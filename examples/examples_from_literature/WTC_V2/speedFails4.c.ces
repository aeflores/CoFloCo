% unmodified input variables in loop eval_speedFails4_bb1_in: [1,2,3] 
% matching output-input vars: [[]] 
% removed  output variables [] in loop eval_speedFails4_bb1_in 
% remove in vars  [] in loop eval_speedFails4_bb1_in 
% unmodified input variables in loop nil: [] 
% matching output-input vars: [[]] 
% removed  output variables [] in loop nil 
% remove in vars  [] in loop nil 
input_output_vars(eval_speedFails4_bb0_in(V_x,V_n,B),[V_x,V_n],[B]).
input_output_vars(eval_speedFails4_bb1_in(V_n,V_0,V__,V__0,B),[V_n,V_0,V__,V__0],[B]).
input_output_vars(eval_speedFails4_bb1_in_loop_cont(A,B),[A],[B]).
input_output_vars(eval_speedFails4_bb2_in(V_n,V_0,V__,V__0,B),[V_n,V_0,V__,V__0],[B]).
input_output_vars(eval_speedFails4_bb3_in(B),[],[B]).
input_output_vars(eval_speedFails4_start(V_x,V_n,B),[V_x,V_n],[B]).
input_output_vars(eval_speedFails4_stop(A),[],[A]).
eq(eval_speedFails4_start(V_x,V_n,B),0,[eval_speedFails4_bb0_in(V_x,V_n,B)],[]).
eq(eval_speedFails4_bb1_in(V_n,V_0,V__,V__0,B),0,[eval_speedFails4_bb2_in(V_n,V_0,V__,V__0,B)],[V__0=<V_n]).
eq(eval_speedFails4_bb1_in(V_n,V_0,V__,V__0,2),0,[],[V__0>V_n]).
eq(eval_speedFails4_bb2_in(V_n,V_0,V__,V__0,B),1,[eval_speedFails4_bb1_in(V_n,V_0,V__,V__0+V__,B)],[V_0>=1]).
eq(eval_speedFails4_bb2_in(V_n,V_0,V__,V__0,B),1,[eval_speedFails4_bb1_in(V_n,V_0,V__,V__0-V__,B)],[V_0<1]).
eq(eval_speedFails4_bb0_in(V_x,V_n,B),0,[eval_speedFails4_bb1_in(V_n,C,1,V_x,D),eval_speedFails4_bb1_in_loop_cont(D,B)],[C>=1]).
eq(eval_speedFails4_bb0_in(V_x,V_n,B),0,[eval_speedFails4_bb1_in(V_n,C,-1,V_x,D),eval_speedFails4_bb1_in_loop_cont(D,B)],[C<1]).
eq(eval_speedFails4_bb3_in(B),0,[eval_speedFails4_stop(B)],[]).
eq(eval_speedFails4_stop(A),0,[],[]).
eq(eval_speedFails4_bb1_in_loop_cont(2,A),0,[eval_speedFails4_bb3_in(A)],[B>C]).

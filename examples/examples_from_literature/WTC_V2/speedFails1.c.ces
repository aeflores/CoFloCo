% unmodified input variables in loop eval_speedFails1_bb1_in: [1,2] 
% matching output-input vars: [[]] 
% removed  output variables [] in loop eval_speedFails1_bb1_in 
% remove in vars  [] in loop eval_speedFails1_bb1_in 
% unmodified input variables in loop nil: [] 
% matching output-input vars: [[]] 
% removed  output variables [] in loop nil 
% remove in vars  [] in loop nil 
input_output_vars(eval_speedFails1_bb0_in(V_i,V_n,V_m,B),[V_i,V_n,V_m],[B]).
input_output_vars(eval_speedFails1_bb1_in(V_n,V_m,V__0,B),[V_n,V_m,V__0],[B]).
input_output_vars(eval_speedFails1_bb1_in_loop_cont(A,B),[A],[B]).
input_output_vars(eval_speedFails1_bb2_in(V_n,V_m,V__0,B),[V_n,V_m,V__0],[B]).
input_output_vars(eval_speedFails1_bb3_in(B),[],[B]).
input_output_vars(eval_speedFails1_start(V_i,V_n,V_m,B),[V_i,V_n,V_m],[B]).
input_output_vars(eval_speedFails1_stop(A),[],[A]).
eq(eval_speedFails1_start(V_i,V_n,V_m,B),0,[eval_speedFails1_bb0_in(V_i,V_n,V_m,B)],[]).
eq(eval_speedFails1_bb1_in(V_n,V_m,V__0,B),0,[eval_speedFails1_bb2_in(V_n,V_m,V__0,B)],[V__0=<V_n]).
eq(eval_speedFails1_bb1_in(V_n,V_m,V__0,2),0,[],[V__0>V_n]).
eq(eval_speedFails1_bb2_in(V_n,V_m,V__0,B),1,[eval_speedFails1_bb1_in(V_n,V_m,V__0+V_m,B)],[]).
eq(eval_speedFails1_bb0_in(V_i,V_n,V_m,B),0,[eval_speedFails1_bb1_in(V_n,V_m,V_i,C),eval_speedFails1_bb1_in_loop_cont(C,B)],[]).
eq(eval_speedFails1_bb3_in(B),0,[eval_speedFails1_stop(B)],[]).
eq(eval_speedFails1_stop(A),0,[],[]).
eq(eval_speedFails1_bb1_in_loop_cont(2,A),0,[eval_speedFails1_bb3_in(A)],[B>C]).

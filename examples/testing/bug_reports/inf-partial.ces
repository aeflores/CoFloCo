%start with pairNs
eq(start(A, B),0,[pairNs(Out)],[]).

%This should yield an infinite loop oddNs -> pairNs -> oddNs -> ...
eq(pairNs(Out),1,[oddNs(Ret1),cons(1, Ret1, Ret2)],[Out = Ret2]).  %changing cons(1,..) to cons(0,..) yields "inf"
input_output_vars(pairNs(Out),[],[Out]).

eq(oddNs(Out),1,[pairNs(Ret1),incr(Ret1, Ret2)],[Out = Ret2]).

%Auxiliary methods just return something (if Out is not restricted, cofloco finds "inf")
eq(cons(A, B, Out),1,[],[Out = A + B]).
eq(incr(A, Out),1,[],[Out = A, A >= 0]).

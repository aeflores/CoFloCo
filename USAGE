Usage information
------------------
Usage: cofloco [options]
 where the options can be:
 * [-h,-help]  :Display help information 
 * [-input,-i]  filename: Selects input program. 
 * [-stats,-s]  Show some basic statistics 
 * [-debug]  Show debug information 
 * [-v,-verbosity]  0-3 : selects the level of verbosity  
 * [-n_rankings]   nat : (default 2) Sets the maximum number of ranking functions that can be considered for each cost equation . 
 * [-assume_sequential]  Assume that the calls performed in a cost equation are done sequentially.
   It is important for non-terminating programs.
 * [-maximize_fast]  nat : (default 5) The  maximum number of upper bound of a cost expression that the maximize operation can return.
 * [-conditional_ubs]  Generate a set of conditional upper bounds (whose preconditions are mutually exclusive) instead of a single unconditional one
 
Input format
------------------
The input format is a slightly variation  of the one of PUBS (http://costa.ls.fi.upm.es/pubs/help.php).

Equation::= eq(Head, CostExpression, ListOfCalls, ListOfSizeRelations).

Head::= Name | Name(Arguments) 

Arguments ::= Variable | Variable,Arguments

ListOfCalls ::= [] |[Head|ListOfCalls]

ListOfSizeRelations ::= [] | [SizeRelation|ListOfSizeRelations]

SizeRelation ::= Variable Oper LinearExpression

Oper ::=  >= | <= | =

LinearExpression ::= Variable | PositiveRationalNumber | 
                     LinearExpression Signo LinearExpression

Sign ::= + | - | * | /

CostExpression :: = PositiveRationalNumber                           | 
                    nat(LinearExpression)                            | 
                    CostExpression * CostExpression                  |
                    CostExpression + CostExpression                  |
                    max(ListOfCostExpressions)                       |
					min(ListOfCostExpressions)

ListOfCostExpressions :: = [] | [CostExpression|ListOfCostExpressions]

* A "Name" can be either a sequence of characters between quotes or any
  sequence of consecutive characters (only letters and numbers) 
  beginning with a lower letter. Examples of valid names are:
 
       'function factorial'
       factorial
       factorial1

  Examples of invalid names are:

       Factorial
       1factorial
       function factorial

* Variables follows Prolog syntax, i.e., are sequences of characters
  (letters or numbers) beginning with a capital letter. Examples of
  valid variables are:

      X
      Variable1
    
* A PositiveRationalNumber has the form Number/Number, where Number
  is a positive natural number.




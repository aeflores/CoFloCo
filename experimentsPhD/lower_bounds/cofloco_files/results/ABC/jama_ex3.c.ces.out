Warning: Ignored call to eval_jama_ex3_stop/1 in equation eval_jama_ex3_bb5_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_jama_ex3_bb2_in/7,eval_jama_ex3_bb3_in/7]
1. recursive : [eval_jama_ex3_8/5,eval_jama_ex3_9/5,eval_jama_ex3_bb1_in/3,eval_jama_ex3_bb4_in/4,loop_cont_eval_jama_ex3_bb2_in/5]
2. non_recursive : [eval_jama_ex3_bb5_in/1]
3. non_recursive : [loop_cont_eval_jama_ex3_bb1_in/2]
4. non_recursive : [eval_jama_ex3_4/2]
5. non_recursive : [eval_jama_ex3_3/2]
6. non_recursive : [eval_jama_ex3_2/2]
7. non_recursive : [eval_jama_ex3_1/2]
8. non_recursive : [eval_jama_ex3_0/2]
9. non_recursive : [eval_jama_ex3_bb0_in/2]
10. non_recursive : [eval_jama_ex3_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_jama_ex3_bb2_in/7
1. SCC is partially evaluated into eval_jama_ex3_bb1_in/3
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is partially evaluated into eval_jama_ex3_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_jama_ex3_bb2_in/7 
* CE 6 is refined into CE [7] 
* CE 5 is refined into CE [8] 


#### Refined cost equations eval_jama_ex3_bb2_in/7 
* CE 7: eval_jama_ex3_bb2_in(A,B,C,D,A,B,C) = 0
     [A>=B,C>=A+1,D=2] 
* CE 8: eval_jama_ex3_bb2_in(V_n,V_i_0,V_j_0,B,C,D,E) = 1+ eval_jama_ex3_bb2_in(V_n,V_i_0,F,G,C,D,E)
     [V_n>=V_j_0,V_j_0>=V_i_0,V_j_0+1=F,G=2,B=2] 

### Cost equations --> "Loop" of eval_jama_ex3_bb2_in/7 
* CEs [8] --> Loop 6 
* CEs [7] --> Loop 7 

#### Loops of eval_jama_ex3_bb2_in/7 
* Loop 6: eval_jama_ex3_bb2_in(V_n,V_i_0,V_j_0,B,C,D,E)->  eval_jama_ex3_bb2_in(V_n,V_i_0,V_j_0',B',C,D,E)
                  [V_n>=V_j_0,V_j_0>=V_i_0,V_j_0+1=V_j_0',B'=2,B=2] 
* Loop 7: eval_jama_ex3_bb2_in(A,B,C,D,A,B,C) [A>=B,C>=A+1,D=2] 

### Ranking functions of CR eval_jama_ex3_bb2_in(V_n,V_i_0,V_j_0,B,C,D,E) 
* RF of phase [6]: [V_n-V_j_0+1]

#### Partial ranking functions of CR eval_jama_ex3_bb2_in(V_n,V_i_0,V_j_0,B,C,D,E) 
* Partial RF of phase [6]:
  - RF of loop [6:1]:
    V_n-V_j_0+1


### Resulting Chains:eval_jama_ex3_bb2_in(V_n,V_i_0,V_j_0,B,C,D,E) 
* [[6],7]


### Specialization of cost equations eval_jama_ex3_bb1_in/3 
* CE 4 is refined into CE [9] 
* CE 3 is refined into CE [10] 


#### Refined cost equations eval_jama_ex3_bb1_in/3 
* CE 9: eval_jama_ex3_bb1_in(V_n,V_i_0,B) = 0
     [V_i_0>=V_n+1,B=3] 
* CE 10: eval_jama_ex3_bb1_in(V_n,V_i_0,B) = 2+ eval_jama_ex3_bb2_in(V_n,V_i_0,V_i_0,C,V_n,V_i_0,D):[[6],7]+ eval_jama_ex3_bb1_in(V_n,E,F)
     [V_n>=V_i_0,V_i_0+1=E,V_n+1=D,F=3,C=2,B=3] 

### Cost equations --> "Loop" of eval_jama_ex3_bb1_in/3 
* CEs [10] --> Loop 8 
* CEs [9] --> Loop 9 

#### Loops of eval_jama_ex3_bb1_in/3 
* Loop 8: eval_jama_ex3_bb1_in(V_n,V_i_0,B)->  eval_jama_ex3_bb1_in(V_n,V_i_0',B')
                  [V_n+1>=V_i_0',V_i_0'=V_i_0+1,B'=3,B=3] 
* Loop 9: eval_jama_ex3_bb1_in(V_n,V_i_0,B) [V_i_0>=V_n+1,B=3] 

### Ranking functions of CR eval_jama_ex3_bb1_in(V_n,V_i_0,B) 
* RF of phase [8]: [V_n-V_i_0+1]

#### Partial ranking functions of CR eval_jama_ex3_bb1_in(V_n,V_i_0,B) 
* Partial RF of phase [8]:
  - RF of loop [8:1]:
    V_n-V_i_0+1


### Resulting Chains:eval_jama_ex3_bb1_in(V_n,V_i_0,B) 
* [[8],9]
* [9]


### Specialization of cost equations eval_jama_ex3_start/2 
* CE 2 is refined into CE [11,12] 


#### Refined cost equations eval_jama_ex3_start/2 
* CE 11: eval_jama_ex3_start(V_n,B) = 1+ eval_jama_ex3_bb1_in(V_n,C,D):[[8],9]
     [V_n>=1,D=3,C=1] 
* CE 12: eval_jama_ex3_start(V_n,B) = 1+ eval_jama_ex3_bb1_in(V_n,C,D):[9]
     [0>=V_n,D=3,C=1] 

### Cost equations --> "Loop" of eval_jama_ex3_start/2 
* CEs [11] --> Loop 10 
* CEs [12] --> Loop 11 

#### Loops of eval_jama_ex3_start/2 
* Loop 10: eval_jama_ex3_start(V_n,B) [V_n>=1] 
* Loop 11: eval_jama_ex3_start(V_n,B) [0>=V_n] 

### Ranking functions of CR eval_jama_ex3_start(V_n,B) 

#### Partial ranking functions of CR eval_jama_ex3_start(V_n,B) 


### Resulting Chains:eval_jama_ex3_start(V_n,B) 
* [11]
* [10]


Computing Bounds
=====================================

#### Cost of loops [6] 

 * loop 6:eval_jama_ex3_bb2_in(V_n,V_i_0,V_j_0,B,C,D,E) -> [eval_jama_ex3_bb2_in(V_n',V_i_0',V_j_0',B',C',D',E')] 
1
#### Cost of phase [6]:eval_jama_ex3_bb2_in(V_n,V_i_0,V_j_0,B,C,D,E) -> [eval_jama_ex3_bb2_in(V_n',V_i_0',V_j_0',B',C',D',E')] 
1*it(6)+0
  Such that:it(6) =< V_n-V_j_0+1
it(6) =< V_n-V_j_0-V_n'+V_j_0'
it(6) >= V_n-V_j_0-V_n'+V_j_0'

#### Cost of chains of eval_jama_ex3_bb2_in(V_n,V_i_0,V_j_0,B,C,D,E):
* Chain [[6],7]: 1*it(6)+0
  Such that:it(6) =< V_n-V_j_0+1
it(6) >= V_n-V_j_0+1

  with precondition: [B=2,V_n=C,V_i_0=D,V_n+1=E,V_j_0>=V_i_0,V_n>=V_j_0] 


#### Cost of loops [8] 

 * loop 8:eval_jama_ex3_bb1_in(V_n,V_i_0,B) -> [eval_jama_ex3_bb1_in(V_n',V_i_0',B')] 
1*s(2)+2
  Such that:s(2) =< V_n'-V_i_0'+2
s(2) >= V_n-V_i_0'+2

#### Cost of phase [8]:eval_jama_ex3_bb1_in(V_n,V_i_0,B) -> [eval_jama_ex3_bb1_in(V_n',V_i_0',B')] 
2*it(8)+1*s(3)+0
  Such that:it(8) =< V_n-V_i_0-V_n'+V_i_0'
aux(4) =< V_n-V_i_0+1
it(8) =< aux(4)
s(3) =< it(8)*aux(4)
aux(1) =< it(8)
aux(2) >= V_n-V_i_0+1
it(8) >= V_n-V_i_0-V_n'+V_i_0'
aux(1) >= it(8)
s(3) >= aux(1)*aux(2)+aux(1)* (1/2)-aux(1)*aux(1)* (1/2)

#### Cost of chains of eval_jama_ex3_bb1_in(V_n,V_i_0,B):
* Chain [[8],9]: 2*it(8)+1*s(3)+0
  Such that:aux(5) =< V_n-V_i_0+1
it(8) =< aux(5)
s(3) =< it(8)*aux(5)
aux(1) =< it(8)
aux(6) >= V_n-V_i_0+1
aux(6) >= aux(6)
it(8) >= aux(6)
aux(1) >= it(8)
s(3) >= aux(1)*aux(6)+aux(1)* (1/2)-aux(1)*aux(1)* (1/2)

  with precondition: [B=3,V_i_0>=1,V_n>=V_i_0] 

* Chain [9]: 0
  with precondition: [B=3,V_i_0>=1,V_i_0>=V_n+1] 


#### Cost of chains of eval_jama_ex3_start(V_n,B):
* Chain [11]: 1
  with precondition: [0>=V_n] 

* Chain [10]: 2*s(6)+1*s(7)+1
  Such that:s(4) =< V_n
s(6) =< s(4)
s(7) =< s(6)*s(4)
s(8) =< s(6)
s(5) >= V_n
s(5) >= s(5)
s(6) >= s(5)
s(8) >= s(6)
s(7) >= s(8)*s(5)+s(8)* (1/2)-s(8)*s(8)* (1/2)

  with precondition: [V_n>=1] 


Closed-form bounds of eval_jama_ex3_start(V_n,B): 
-------------------------------------
* Chain [11] with precondition: [0>=V_n] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [10] with precondition: [V_n>=1] 
    - Lower bound: 5/2*V_n+1+V_n/2*V_n 
    - Complexity: n^2
 
### Partitioned lower bound of eval_jama_ex3_start(V_n,B): 
* 1 
 if [0>=V_n]
* 5/2*V_n+1+V_n/2*V_n 
 if [V_n>=1]
Possible lower bounds : [1,5/2*V_n+1+V_n/2*V_n]
Maximum lower bound complexity: n^2

Time statistics: 
-------------------------------------
* Partial evaluation computed in 10 ms.
* Invariants computed in 17 ms.
   - Backward Invariants 7 ms.
   - Transitive Invariants 4 ms.
* Refinement performed in 18 ms.
* Termination proved in 4 ms.
* Upper bounds computed in 31 ms.
   - Equation cost structures 7 ms.
   - Phase cost structures 15 ms.
   - Chain cost structures 10 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 99 ms.


Warning: Ignored call to eval_jama_ex5_stop/1 in equation eval_jama_ex5_bb5_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_jama_ex5_bb2_in/7,eval_jama_ex5_bb3_in/7]
1. recursive : [eval_jama_ex5_8/5,eval_jama_ex5_9/5,eval_jama_ex5_bb1_in/3,eval_jama_ex5_bb4_in/4,loop_cont_eval_jama_ex5_bb2_in/5]
2. non_recursive : [eval_jama_ex5_bb5_in/1]
3. non_recursive : [loop_cont_eval_jama_ex5_bb1_in/2]
4. non_recursive : [eval_jama_ex5_4/2]
5. non_recursive : [eval_jama_ex5_3/2]
6. non_recursive : [eval_jama_ex5_2/2]
7. non_recursive : [eval_jama_ex5_1/2]
8. non_recursive : [eval_jama_ex5_0/2]
9. non_recursive : [eval_jama_ex5_bb0_in/2]
10. non_recursive : [eval_jama_ex5_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_jama_ex5_bb2_in/7
1. SCC is partially evaluated into eval_jama_ex5_bb1_in/3
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is partially evaluated into eval_jama_ex5_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_jama_ex5_bb2_in/7 
* CE 6 is refined into CE [7] 
* CE 5 is refined into CE [8] 


#### Refined cost equations eval_jama_ex5_bb2_in/7 
* CE 7: eval_jama_ex5_bb2_in(A,B,C,D,A,B,C) = 0
     [A>=B,C>=A+1,C>=0,D=2] 
* CE 8: eval_jama_ex5_bb2_in(V_n,V_i_0,V_j_0,B,C,D,E) = 1+ eval_jama_ex5_bb2_in(V_n,V_i_0,F,G,C,D,E)
     [V_n>=V_j_0,V_n>=V_i_0,V_j_0>=0,V_j_0+2=F,G=2,B=2] 

### Cost equations --> "Loop" of eval_jama_ex5_bb2_in/7 
* CEs [8] --> Loop 6 
* CEs [7] --> Loop 7 

#### Loops of eval_jama_ex5_bb2_in/7 
* Loop 6: eval_jama_ex5_bb2_in(V_n,V_i_0,V_j_0,B,C,D,E)->  eval_jama_ex5_bb2_in(V_n,V_i_0,V_j_0',B',C,D,E)
                  [V_n>=V_j_0,V_n>=V_i_0,V_j_0>=0,V_j_0+2=V_j_0',B'=2,B=2] 
* Loop 7: eval_jama_ex5_bb2_in(A,B,C,D,A,B,C) [A>=B,C>=A+1,C>=0,D=2] 

### Ranking functions of CR eval_jama_ex5_bb2_in(V_n,V_i_0,V_j_0,B,C,D,E) 
* RF of phase [6]: [V_n-V_j_0+1]

#### Partial ranking functions of CR eval_jama_ex5_bb2_in(V_n,V_i_0,V_j_0,B,C,D,E) 
* Partial RF of phase [6]:
  - RF of loop [6:1]:
    V_n-V_j_0+1


### Resulting Chains:eval_jama_ex5_bb2_in(V_n,V_i_0,V_j_0,B,C,D,E) 
* [[6],7]
* [7]


### Specialization of cost equations eval_jama_ex5_bb1_in/3 
* CE 4 is refined into CE [9] 
* CE 3 is refined into CE [10,11] 


#### Refined cost equations eval_jama_ex5_bb1_in/3 
* CE 9: eval_jama_ex5_bb1_in(V_n,V_i_0,B) = 0
     [V_i_0>=V_n+1,B=3] 
* CE 10: eval_jama_ex5_bb1_in(V_n,V_i_0,B) = 2+ eval_jama_ex5_bb2_in(V_n,V_i_0,C,D,V_n,V_i_0,E):[[6],7]+ eval_jama_ex5_bb1_in(V_n,F,G)
     [V_n+2>=E,V_n>=V_i_0,E>=V_n+1,E>=2,V_i_0+2=F,G=3,D=2,C=0,B=3] 
* CE 11: eval_jama_ex5_bb1_in(V_n,V_i_0,B) = 2+ eval_jama_ex5_bb2_in(V_n,V_i_0,C,D,V_n,V_i_0,E):[7]+ eval_jama_ex5_bb1_in(V_n,F,G)
     [V_n>=V_i_0,0>=V_n+1,V_i_0+2=F,G=3,E=0,D=2,C=0,B=3] 

### Cost equations --> "Loop" of eval_jama_ex5_bb1_in/3 
* CEs [10] --> Loop 8 
* CEs [11] --> Loop 9 
* CEs [9] --> Loop 10 

#### Loops of eval_jama_ex5_bb1_in/3 
* Loop 8: eval_jama_ex5_bb1_in(V_n,V_i_0,B)->  eval_jama_ex5_bb1_in(V_n,V_i_0',B')
                  [V_n>=V_i_0,V_n>=0,V_i_0+2=V_i_0',B'=3,B=3] 
* Loop 9: eval_jama_ex5_bb1_in(V_n,V_i_0,B)->  eval_jama_ex5_bb1_in(V_n,V_i_0',B')
                  [V_n>=V_i_0,0>=V_n+1,V_i_0+2=V_i_0',B'=3,B=3] 
* Loop 10: eval_jama_ex5_bb1_in(V_n,V_i_0,B) [V_i_0>=V_n+1,B=3] 

### Ranking functions of CR eval_jama_ex5_bb1_in(V_n,V_i_0,B) 
* RF of phase [8]: [V_n-V_i_0+1]

#### Partial ranking functions of CR eval_jama_ex5_bb1_in(V_n,V_i_0,B) 
* Partial RF of phase [8]:
  - RF of loop [8:1]:
    V_n-V_i_0+1


### Resulting Chains:eval_jama_ex5_bb1_in(V_n,V_i_0,B) 
* [[8],10]
* [10]


### Specialization of cost equations eval_jama_ex5_start/2 
* CE 2 is refined into CE [12,13] 


#### Refined cost equations eval_jama_ex5_start/2 
* CE 12: eval_jama_ex5_start(V_n,B) = 1+ eval_jama_ex5_bb1_in(V_n,C,D):[[8],10]
     [V_n>=0,D=3,C=0] 
* CE 13: eval_jama_ex5_start(V_n,B) = 1+ eval_jama_ex5_bb1_in(V_n,C,D):[10]
     [0>=V_n+1,D=3,C=0] 

### Cost equations --> "Loop" of eval_jama_ex5_start/2 
* CEs [12] --> Loop 11 
* CEs [13] --> Loop 12 

#### Loops of eval_jama_ex5_start/2 
* Loop 11: eval_jama_ex5_start(V_n,B) [V_n>=0] 
* Loop 12: eval_jama_ex5_start(V_n,B) [0>=V_n+1] 

### Ranking functions of CR eval_jama_ex5_start(V_n,B) 

#### Partial ranking functions of CR eval_jama_ex5_start(V_n,B) 


### Resulting Chains:eval_jama_ex5_start(V_n,B) 
* [12]
* [11]


Computing Bounds
=====================================

#### Cost of loops [6] 

 * loop 6:eval_jama_ex5_bb2_in(V_n,V_i_0,V_j_0,B,C,D,E) -> [eval_jama_ex5_bb2_in(V_n',V_i_0',V_j_0',B',C',D',E')] 
1
#### Cost of phase [6]:eval_jama_ex5_bb2_in(V_n,V_i_0,V_j_0,B,C,D,E) -> [eval_jama_ex5_bb2_in(V_n',V_i_0',V_j_0',B',C',D',E')] 
1*it(6)+0
  Such that:it(6) =< V_n-V_j_0+1
it(6) =< V_n-V_j_0-V_n'+V_j_0'
it(6) >= V_n/2-V_j_0/2-V_n'/2+V_j_0'/2

#### Cost of chains of eval_jama_ex5_bb2_in(V_n,V_i_0,V_j_0,B,C,D,E):
* Chain [[6],7]: 1*it(6)+0
  Such that:it(6) =< -V_j_0+C+1
it(6) >= -V_j_0/2+E/2

  with precondition: [B=2,V_n=C,V_i_0=D,V_j_0>=0,E>=V_n+1,V_n>=V_i_0,E>=V_j_0+2,V_n+2>=E] 

* Chain [7]: 0
  with precondition: [B=2,V_n=C,V_i_0=D,V_j_0=E,V_j_0>=0,V_j_0>=V_n+1,V_n>=V_i_0] 


#### Cost of loops [8] 

 * loop 8:eval_jama_ex5_bb1_in(V_n,V_i_0,B) -> [eval_jama_ex5_bb1_in(V_n',V_i_0',B')] 
1*s(2)+2
  Such that:s(2) =< V_n'+1
s(2) >= V_n'/2+1/2

#### Cost of phase [8]:eval_jama_ex5_bb1_in(V_n,V_i_0,B) -> [eval_jama_ex5_bb1_in(V_n',V_i_0',B')] 
2*it(8)+1*s(3)+0
  Such that:aux(2) =< V_n+1
it(8) =< V_n-V_i_0+1
it(8) =< V_n-V_i_0-V_n'+V_i_0'
s(3) =< it(8)*aux(2)
aux(1) >= V_n/2+1/2
it(8) >= V_n/2-V_i_0/2-V_n'/2+V_i_0'/2
s(3) >= -V_i_0/4+V_i_0'/4
s(3) >= it(8)*aux(1)

#### Cost of chains of eval_jama_ex5_bb1_in(V_n,V_i_0,B):
* Chain [[8],10]: 2*it(8)+1*s(3)+0
  Such that:aux(2) =< V_n+1
it(8) =< V_n-V_i_0+1
s(3) =< it(8)*aux(2)
aux(1) >= V_n/2+1/2
it(8) >= V_n/2-V_i_0/2+1/2
s(3) >= V_n/4-V_i_0/4+1/4
s(3) >= it(8)*aux(1)

  with precondition: [B=3,V_i_0>=0,V_n>=V_i_0] 

* Chain [10]: 0
  with precondition: [B=3,V_i_0>=0,V_i_0>=V_n+1] 


#### Cost of chains of eval_jama_ex5_start(V_n,B):
* Chain [12]: 1
  with precondition: [0>=V_n+1] 

* Chain [11]: 2*s(5)+1*s(7)+1
  Such that:aux(3) =< V_n+1
s(5) =< aux(3)
s(7) =< s(5)*aux(3)
s(7) >= V_n/4+1/4
aux(4) >= V_n/2+1/2
s(5) >= aux(4)
aux(4) >= aux(4)
s(7) >= s(5)*aux(4)

  with precondition: [V_n>=0] 


Closed-form bounds of eval_jama_ex5_start(V_n,B): 
-------------------------------------
* Chain [12] with precondition: [0>=V_n+1] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [11] with precondition: [V_n>=0] 
    - Lower bound: V_n+2+ (V_n/2+1/2)* (V_n/2+1/2) 
    - Complexity: n^2
 
### Partitioned lower bound of eval_jama_ex5_start(V_n,B): 
* 1 
 if [0>=V_n+1]
* V_n+2+ (V_n/2+1/2)* (V_n/2+1/2) 
 if [V_n>=0]
Possible lower bounds : [1,V_n+2+ (V_n/2+1/2)* (V_n/2+1/2)]
Maximum lower bound complexity: n^2

Time statistics: 
-------------------------------------
* Partial evaluation computed in 11 ms.
* Invariants computed in 27 ms.
   - Backward Invariants 12 ms.
   - Transitive Invariants 7 ms.
* Refinement performed in 32 ms.
* Termination proved in 5 ms.
* Upper bounds computed in 46 ms.
   - Equation cost structures 13 ms.
   - Phase cost structures 25 ms.
   - Chain cost structures 11 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 146 ms.


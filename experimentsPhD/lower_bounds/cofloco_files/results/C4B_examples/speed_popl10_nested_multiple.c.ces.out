Warning: Ignored call to eval_speed_popl10_nested_multiple_stop/1 in equation eval_speed_popl10_nested_multiple_bb6_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_speed_popl10_nested_multiple_6/11,eval_speed_popl10_nested_multiple_7/12,eval_speed_popl10_nested_multiple_bb2_in/11,eval_speed_popl10_nested_multiple_bb3_in/11,eval_speed_popl10_nested_multiple_bb4_in/12]
1. recursive : [eval_speed_popl10_nested_multiple_11/7,eval_speed_popl10_nested_multiple_12/7,eval_speed_popl10_nested_multiple_bb1_in/5,eval_speed_popl10_nested_multiple_bb5_in/6,loop_cont_eval_speed_popl10_nested_multiple_bb2_in/7]
2. non_recursive : [eval_speed_popl10_nested_multiple_bb6_in/1]
3. non_recursive : [loop_cont_eval_speed_popl10_nested_multiple_bb1_in/2]
4. non_recursive : [eval_speed_popl10_nested_multiple_5/5]
5. non_recursive : [eval_speed_popl10_nested_multiple_4/5]
6. non_recursive : [eval_speed_popl10_nested_multiple_3/5]
7. non_recursive : [eval_speed_popl10_nested_multiple_2/5]
8. non_recursive : [eval_speed_popl10_nested_multiple_1/5]
9. non_recursive : [eval_speed_popl10_nested_multiple_0/5]
10. non_recursive : [eval_speed_popl10_nested_multiple_bb0_in/5]
11. non_recursive : [eval_speed_popl10_nested_multiple_start/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_speed_popl10_nested_multiple_bb2_in/11
1. SCC is partially evaluated into eval_speed_popl10_nested_multiple_bb1_in/5
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into eval_speed_popl10_nested_multiple_start/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_speed_popl10_nested_multiple_bb2_in/11 
* CE 5 is refined into CE [8] 
* CE 7 is refined into CE [9] 
* CE 6 is refined into CE [10] 


#### Refined cost equations eval_speed_popl10_nested_multiple_bb2_in/11 
* CE 8: eval_speed_popl10_nested_multiple_bb2_in(A,B,C,D,E,F,A,B,C,D,E) = 0
     [B>=E+1,A>=D+1,E>=C,F=2] 
* CE 9: eval_speed_popl10_nested_multiple_bb2_in(A,B,C,D,E,F,A,B,C,D,E) = 0
     [A>=D+1,E>=C,E>=B,F=2] 
* CE 10: eval_speed_popl10_nested_multiple_bb2_in(V_n,V_m,V__01,V__0,V__1,B,C,D,E,F,G) = 1+ eval_speed_popl10_nested_multiple_bb2_in(V_n,V_m,V__01,V__0,H,I,C,D,E,F,G)
     [V_m>=V__1+1,V_n>=V__0+1,V__1>=V__01,V__1+1=H,I=2,B=2] 

### Cost equations --> "Loop" of eval_speed_popl10_nested_multiple_bb2_in/11 
* CEs [10] --> Loop 7 
* CEs [8] --> Loop 8 
* CEs [9] --> Loop 9 

#### Loops of eval_speed_popl10_nested_multiple_bb2_in/11 
* Loop 7: eval_speed_popl10_nested_multiple_bb2_in(V_n,V_m,V__01,V__0,V__1,B,C,D,E,F,G)->  eval_speed_popl10_nested_multiple_bb2_in(V_n,V_m,V__01,V__0,V__1',B',C,D,E,F,G)
                  [V_m>=V__1+1,V_n>=V__0+1,V__1>=V__01,V__1+1=V__1',B'=2,B=2] 
* Loop 8: eval_speed_popl10_nested_multiple_bb2_in(A,B,C,D,E,F,A,B,C,D,E) [B>=E+1,A>=D+1,E>=C,F=2] 
* Loop 9: eval_speed_popl10_nested_multiple_bb2_in(A,B,C,D,E,F,A,B,C,D,E) [A>=D+1,E>=C,E>=B,F=2] 

### Ranking functions of CR eval_speed_popl10_nested_multiple_bb2_in(V_n,V_m,V__01,V__0,V__1,B,C,D,E,F,G) 
* RF of phase [7]: [V_m-V__1]

#### Partial ranking functions of CR eval_speed_popl10_nested_multiple_bb2_in(V_n,V_m,V__01,V__0,V__1,B,C,D,E,F,G) 
* Partial RF of phase [7]:
  - RF of loop [7:1]:
    V_m-V__1


### Resulting Chains:eval_speed_popl10_nested_multiple_bb2_in(V_n,V_m,V__01,V__0,V__1,B,C,D,E,F,G) 
* [[7],9]
* [[7],8]
* [9]
* [8]


### Specialization of cost equations eval_speed_popl10_nested_multiple_bb1_in/5 
* CE 4 is refined into CE [11] 
* CE 3 is refined into CE [12,13,14,15] 


#### Refined cost equations eval_speed_popl10_nested_multiple_bb1_in/5 
* CE 11: eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,V__01,V__0,B) = 0
     [V__0>=V_n,B=3] 
* CE 12: eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,V__01,V__0,B) = 2+ eval_speed_popl10_nested_multiple_bb2_in(V_n,V_m,V__01,V__0,V__01,C,V_n,V_m,V__01,V__0,V_m):[[7],9]+ eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,V_m,D,E)
     [V_n>=V__0+1,V_m>=V__01+1,V__0+1=D,E=3,C=2,B=3] 
* CE 13: eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,V__01,V__0,B) = 2+ eval_speed_popl10_nested_multiple_bb2_in(V_n,V_m,V__01,V__0,V__01,C,V_n,V_m,V__01,V__0,D):[[7],8]+ eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,D,E,F)
     [V_m>=D+1,V_n>=V__0+1,D>=V__01+1,V__0+1=E,F=3,C=2,B=3] 
* CE 14: eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,V__01,V__0,B) = 2+ eval_speed_popl10_nested_multiple_bb2_in(V_n,V_m,V__01,V__0,V__01,C,V_n,V_m,V__01,V__0,V__01):[9]+ eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,V__01,D,E)
     [V_n>=V__0+1,V__01>=V_m,V__0+1=D,E=3,C=2,B=3] 
* CE 15: eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,V__01,V__0,B) = 2+ eval_speed_popl10_nested_multiple_bb2_in(V_n,V_m,V__01,V__0,V__01,C,V_n,V_m,V__01,V__0,V__01):[8]+ eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,V__01,D,E)
     [V_n>=V__0+1,V_m>=V__01+1,V__0+1=D,E=3,C=2,B=3] 

### Cost equations --> "Loop" of eval_speed_popl10_nested_multiple_bb1_in/5 
* CEs [13] --> Loop 10 
* CEs [15] --> Loop 11 
* CEs [14] --> Loop 12 
* CEs [12] --> Loop 13 
* CEs [11] --> Loop 14 

#### Loops of eval_speed_popl10_nested_multiple_bb1_in/5 
* Loop 10: eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,V__01,V__0,B)->  eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,V__01',V__0',B')
                  [V_m>=V__01'+1,V_n>=V__0+1,V__01'>=V__01+1,V__0+1=V__0',B'=3,B=3] 
* Loop 11: eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,V__01,V__0,B)->  eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,V__01,V__0',B')
                  [V_n>=V__0+1,V_m>=V__01+1,V__0+1=V__0',B'=3,B=3] 
* Loop 12: eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,V__01,V__0,B)->  eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,V__01,V__0',B')
                  [V_n>=V__0+1,V__01>=V_m,V__0+1=V__0',B'=3,B=3] 
* Loop 13: eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,V__01,V__0,B)->  eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,V_m,A',B')
                  [V_n>=V__0+1,V_m>=V__01+1,V__0+1=A',B'=3,B=3] 
* Loop 14: eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,V__01,V__0,B) [V__0>=V_n,B=3] 

### Ranking functions of CR eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,V__01,V__0,B) 
* RF of phase [10,11]: [V_n-V__0]
* RF of phase [12]: [V_n-V__0]

#### Partial ranking functions of CR eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,V__01,V__0,B) 
* Partial RF of phase [10,11]:
  - RF of loop [10:1]:
    V_m-V__01-1
  - RF of loop [10:1,11:1]:
    V_n-V__0
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    V_n-V__0


### Resulting Chains:eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,V__01,V__0,B) 
* [[12],14]
* [[10,11],14]
* [[10,11],13,[12],14]
* [[10,11],13,14]
* [14]
* [13,[12],14]
* [13,14]


### Specialization of cost equations eval_speed_popl10_nested_multiple_start/5 
* CE 2 is refined into CE [16,17,18,19,20,21,22] 


#### Refined cost equations eval_speed_popl10_nested_multiple_start/5 
* CE 16: eval_speed_popl10_nested_multiple_start(V_x,V_n,V_y,V_m,B) = 1+ eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,V_y,V_x,C):[[12],14]
     [V_n>=V_x+1,V_y>=V_m,C=3] 
* CE 17: eval_speed_popl10_nested_multiple_start(V_x,V_n,V_y,V_m,B) = 1+ eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,V_y,V_x,C):[[10,11],14]
     [V_n>=V_x+1,V_m>=V_y+1,C=3] 
* CE 18: eval_speed_popl10_nested_multiple_start(V_x,V_n,V_y,V_m,B) = 1+ eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,V_y,V_x,C):[[10,11],13,[12],14]
     [V_n>=V_x+3,V_m>=V_y+1,C=3] 
* CE 19: eval_speed_popl10_nested_multiple_start(V_x,V_n,V_y,V_m,B) = 1+ eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,V_y,V_x,C):[[10,11],13,14]
     [V_n>=V_x+2,V_m>=V_y+1,C=3] 
* CE 20: eval_speed_popl10_nested_multiple_start(V_x,V_n,V_y,V_m,B) = 1+ eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,V_y,V_x,C):[14]
     [V_x>=V_n,C=3] 
* CE 21: eval_speed_popl10_nested_multiple_start(V_x,V_n,V_y,V_m,B) = 1+ eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,V_y,V_x,C):[13,[12],14]
     [V_n>=V_x+2,V_m>=V_y+1,C=3] 
* CE 22: eval_speed_popl10_nested_multiple_start(V_x,V_n,V_y,V_m,B) = 1+ eval_speed_popl10_nested_multiple_bb1_in(C,V_m,V_y,V_x,D):[13,14]
     [V_m>=V_y+1,V_x+1=C,V_x+1=V_n,D=3] 

### Cost equations --> "Loop" of eval_speed_popl10_nested_multiple_start/5 
* CEs [20] --> Loop 15 
* CEs [18] --> Loop 16 
* CEs [21] --> Loop 17 
* CEs [19] --> Loop 18 
* CEs [16] --> Loop 19 
* CEs [17] --> Loop 20 
* CEs [22] --> Loop 21 

#### Loops of eval_speed_popl10_nested_multiple_start/5 
* Loop 15: eval_speed_popl10_nested_multiple_start(V_x,V_n,V_y,V_m,B) [V_x>=V_n] 
* Loop 16: eval_speed_popl10_nested_multiple_start(V_x,V_n,V_y,V_m,B) [V_m>=V_y+1,V_n>=V_x+3] 
* Loop 17: eval_speed_popl10_nested_multiple_start(V_x,V_n,V_y,V_m,B) [V_m>=V_y+1,V_n>=V_x+2] 
* Loop 18: eval_speed_popl10_nested_multiple_start(V_x,V_n,V_y,V_m,B) [V_m>=V_y+1,V_n>=V_x+2] 
* Loop 19: eval_speed_popl10_nested_multiple_start(V_x,V_n,V_y,V_m,B) [V_y>=V_m,V_n>=V_x+1] 
* Loop 20: eval_speed_popl10_nested_multiple_start(V_x,V_n,V_y,V_m,B) [V_m>=V_y+1,V_n>=V_x+1] 
* Loop 21: eval_speed_popl10_nested_multiple_start(V_x,V_n,V_y,V_m,B) [V_m>=V_y+1,V_x+1=V_n] 

### Ranking functions of CR eval_speed_popl10_nested_multiple_start(V_x,V_n,V_y,V_m,B) 

#### Partial ranking functions of CR eval_speed_popl10_nested_multiple_start(V_x,V_n,V_y,V_m,B) 


### Resulting Chains:eval_speed_popl10_nested_multiple_start(V_x,V_n,V_y,V_m,B) 
* [21]
* [20]
* [19]
* [18]
* [17]
* [16]
* [15]


Computing Bounds
=====================================

#### Cost of loops [7] 

 * loop 7:eval_speed_popl10_nested_multiple_bb2_in(V_n,V_m,V__01,V__0,V__1,B,C,D,E,F,G) -> [eval_speed_popl10_nested_multiple_bb2_in(V_n',V_m',V__01',V__0',V__1',B',C',D',E',F',G')] 
1
#### Cost of phase [7]:eval_speed_popl10_nested_multiple_bb2_in(V_n,V_m,V__01,V__0,V__1,B,C,D,E,F,G) -> [eval_speed_popl10_nested_multiple_bb2_in(V_n',V_m',V__01',V__0',V__1',B',C',D',E',F',G')] 
1*it(7)+0
  Such that:it(7) =< V_m-V__1
it(7) =< V_m-V__1-V_m'+V__1'
it(7) >= V_m-V__1-V_m'+V__1'

#### Cost of phase [7]:eval_speed_popl10_nested_multiple_bb2_in(V_n,V_m,V__01,V__0,V__1,B,C,D,E,F,G) -> [eval_speed_popl10_nested_multiple_bb2_in(V_n',V_m',V__01',V__0',V__1',B',C',D',E',F',G')] 
1*it(7)+0
  Such that:it(7) =< V_m-V__1
it(7) =< V_m-V__1-V_m'+V__1'
it(7) >= V_m-V__1-V_m'+V__1'

#### Cost of chains of eval_speed_popl10_nested_multiple_bb2_in(V_n,V_m,V__01,V__0,V__1,B,C,D,E,F,G):
* Chain [[7],9]: 1*it(7)+0
  Such that:it(7) =< V_m-V__1
it(7) >= V_m-V__1

  with precondition: [B=2,V_n=C,V_m=D,V__01=E,V__0=F,V_m=G,V__1>=V__01,V_n>=V__0+1,V_m>=V__1+1] 

* Chain [[7],8]: 1*it(7)+0
  Such that:it(7) =< -V__1+G
it(7) >= -V__1+G

  with precondition: [B=2,V_n=C,V_m=D,V__01=E,V__0=F,V__1>=V__01,V_n>=V__0+1,G>=V__1+1,V_m>=G+1] 

* Chain [9]: 0
  with precondition: [B=2,V_n=C,V_m=D,V__01=E,V__0=F,V__1=G,V__1>=V_m,V__1>=V__01,V_n>=V__0+1] 

* Chain [8]: 0
  with precondition: [B=2,V_n=C,V_m=D,V__01=E,V__0=F,V__1=G,V__1>=V__01,V_n>=V__0+1,V_m>=V__1+1] 


#### Cost of loops [12] 

 * loop 12:eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,V__01,V__0,B) -> [eval_speed_popl10_nested_multiple_bb1_in(V_n',V_m',V__01',V__0',B')] 
2
#### Cost of phase [12]:eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,V__01,V__0,B) -> [eval_speed_popl10_nested_multiple_bb1_in(V_n',V_m',V__01',V__0',B')] 
2*it(12)+0
  Such that:it(12) =< V_n-V__0
it(12) =< V_n-V__0-V_n'+V__0'
it(12) >= V_n-V__0-V_n'+V__0'

#### Cost of loops [10,11] 

 * loop 10:eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,V__01,V__0,B) -> [eval_speed_popl10_nested_multiple_bb1_in(V_n',V_m',V__01',V__0',B')] 
1*s(2)+2
  Such that:s(2) =< -V__01+V__01'
s(2) >= -V__01+V__01'

 * loop 11:eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,V__01,V__0,B) -> [eval_speed_popl10_nested_multiple_bb1_in(V_n',V_m',V__01',V__0',B')] 
2
#### Cost of phase [10,11]:eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,V__01,V__0,B) -> [eval_speed_popl10_nested_multiple_bb1_in(V_n',V_m',V__01',V__0',B')] 
2*it(10)+2*it(11)+1*s(3)+0
  Such that:it(10)+it(11) =< V_n-V__0
it(10)+it(11) =< V_n-V__0-V_n'+V__0'
aux(2) =< V_m-V__01-1
aux(3) =< V_m-V__01-V_m'+V__01'
it(10) =< aux(2)
s(3) =< aux(2)
it(10) =< aux(3)
s(3) =< aux(3)
aux(1) >= 1
it(10)+it(11) >= V_n-V__0-V_n'+V__0'
s(3) >= -V__01+V__01'
s(3) >= it(10)*aux(1)

#### Cost of phase [10,11]:eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,V__01,V__0,B) -> [eval_speed_popl10_nested_multiple_bb1_in(V_n',V_m',V__01',V__0',B')] 
2*it(10)+2*it(11)+1*s(3)+0
  Such that:it(10)+it(11) =< V_n-V__0
it(10)+it(11) =< V_n-V__0-V_n'+V__0'
aux(2) =< V_m-V__01-1
aux(3) =< V_m-V__01-V_m'+V__01'
it(10) =< aux(2)
s(3) =< aux(2)
it(10) =< aux(3)
s(3) =< aux(3)
aux(1) >= 1
it(10)+it(11) >= V_n-V__0-V_n'+V__0'
s(3) >= -V__01+V__01'
s(3) >= it(10)*aux(1)

#### Cost of phase [10,11]:eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,V__01,V__0,B) -> [eval_speed_popl10_nested_multiple_bb1_in(V_n',V_m',V__01',V__0',B')] 
2*it(10)+2*it(11)+1*s(3)+0
  Such that:it(10)+it(11) =< V_n-V__0
it(10)+it(11) =< V_n-V__0-V_n'+V__0'
aux(2) =< V_m-V__01-1
aux(3) =< V_m-V__01-V_m'+V__01'
it(10) =< aux(2)
s(3) =< aux(2)
it(10) =< aux(3)
s(3) =< aux(3)
aux(1) >= 1
it(10)+it(11) >= V_n-V__0-V_n'+V__0'
s(3) >= -V__01+V__01'
s(3) >= it(10)*aux(1)

#### Cost of chains of eval_speed_popl10_nested_multiple_bb1_in(V_n,V_m,V__01,V__0,B):
* Chain [[12],14]: 2*it(12)+0
  Such that:it(12) =< V_n-V__0
it(12) >= V_n-V__0

  with precondition: [B=3,V__01>=V_m,V_n>=V__0+1] 

* Chain [[10,11],14]: 2*it(10)+2*it(11)+1*s(3)+0
  Such that:it(11)+it(10) =< V_n-V__0
aux(4) =< V_m-V__01-1
it(10) =< aux(4)
s(3) =< aux(4)
it(11)+it(10) >= V_n-V__0

  with precondition: [B=3,V_m>=V__01+1,V_n>=V__0+1] 

* Chain [[10,11],13,[12],14]: 2*it(10)+2*it(11)+2*it(12)+1*s(3)+1*s(4)+2
  Such that:it(10) =< V_n-V__0-2
it(11)+it(10)+it(12) =< V_n-V__0-1
aux(2) =< V_m-V__01-1
aux(3)+s(4) =< V_m-V__01
it(10) =< aux(2)
s(3) =< aux(2)
it(10) =< aux(3)
s(3) =< aux(3)
it(11)+it(10)+it(12) >= V_n-V__0-1
s(3)+s(4) >= V_m-V__01
aux(5) >= 1
aux(5) >= aux(5)
it(10)+it(11) >= aux(5)
it(12) >= aux(5)
s(4) >= aux(5)
s(3) >= it(10)*aux(5)

  with precondition: [B=3,V_m>=V__01+1,V_n>=V__0+3] 

* Chain [[10,11],13,14]: 2*it(10)+2*it(11)+1*s(3)+1*s(4)+2
  Such that:it(11)+it(10) =< V_n-V__0-1
aux(2) =< V_m-V__01-1
aux(3)+s(4) =< V_m-V__01
it(10) =< aux(2)
s(3) =< aux(2)
it(10) =< aux(3)
s(3) =< aux(3)
it(11)+it(10) >= V_n-V__0-1
s(3)+s(4) >= V_m-V__01
aux(6) >= 1
aux(6) >= aux(6)
s(4) >= aux(6)

  with precondition: [B=3,V_m>=V__01+1,V_n>=V__0+2] 

* Chain [14]: 0
  with precondition: [B=3,V__0>=V_n] 

* Chain [13,[12],14]: 2*it(12)+1*s(4)+2
  Such that:it(12) =< V_n-V__0-1
s(4) =< V_m-V__01
it(12) >= V_n-V__0-1
s(4) >= V_m-V__01

  with precondition: [B=3,V_m>=V__01+1,V_n>=V__0+2] 

* Chain [13,14]: 1*s(4)+2
  Such that:s(4) =< V_m-V__01
s(4) >= V_m-V__01

  with precondition: [B=3,V_n=V__0+1,V_m>=V__01+1] 


#### Cost of chains of eval_speed_popl10_nested_multiple_start(V_x,V_n,V_y,V_m,B):
* Chain [21]: 1*s(5)+3
  Such that:s(5) =< -V_y+V_m
s(5) >= -V_y+V_m

  with precondition: [V_n=V_x+1,V_m>=V_y+1] 

* Chain [20]: 2*s(6)+2*s(7)+1*s(9)+1
  Such that:s(7)+s(6) =< -V_x+V_n
s(8) =< -V_y+V_m-1
s(7) =< s(8)
s(9) =< s(8)
s(7)+s(6) >= -V_x+V_n

  with precondition: [V_n>=V_x+1,V_m>=V_y+1] 

* Chain [19]: 2*s(10)+1
  Such that:s(10) =< -V_x+V_n
s(10) >= -V_x+V_n

  with precondition: [V_n>=V_x+1,V_y>=V_m] 

* Chain [18]: 2*s(11)+2*s(12)+1*s(15)+1*s(16)+3
  Such that:s(12)+s(11) =< -V_x+V_n-1
s(13) =< -V_y+V_m-1
s(15)+s(14) =< -V_y+V_m
s(12) =< s(13)
s(16) =< s(13)
s(17) >= 1
s(12)+s(11) >= -V_x+V_n-1
s(16)+s(15) >= -V_y+V_m
s(17) >= s(17)
s(15) >= s(17)

  with precondition: [V_n>=V_x+2,V_m>=V_y+1] 

* Chain [17]: 2*s(18)+1*s(19)+3
  Such that:s(18) =< -V_x+V_n-1
s(19) =< -V_y+V_m
s(18) >= -V_x+V_n-1
s(19) >= -V_y+V_m

  with precondition: [V_n>=V_x+2,V_m>=V_y+1] 

* Chain [16]: 2*s(20)+2*s(21)+2*s(22)+1*s(25)+1*s(26)+3
  Such that:s(20) =< -V_x+V_n-2
s(22)+s(21)+s(20) =< -V_x+V_n-1
s(23) =< -V_y+V_m-1
s(25)+s(24) =< -V_y+V_m
s(20) =< s(23)
s(26) =< s(23)
s(27) >= 1
s(22)+s(21)+s(20) >= -V_x+V_n-1
s(26)+s(25) >= -V_y+V_m
s(27) >= s(27)
s(20)+s(21) >= s(27)
s(22) >= s(27)
s(25) >= s(27)
s(26) >= s(20)*s(27)

  with precondition: [V_n>=V_x+3,V_m>=V_y+1] 

* Chain [15]: 1
  with precondition: [V_x>=V_n] 


Closed-form bounds of eval_speed_popl10_nested_multiple_start(V_x,V_n,V_y,V_m,B): 
-------------------------------------
* Chain [21] with precondition: [V_n=V_x+1,V_m>=V_y+1] 
    - Lower bound: -V_y+V_m+3 
    - Complexity: n
 * Chain [20] with precondition: [V_n>=V_x+1,V_m>=V_y+1] 
    - Lower bound: -2*V_x+2*V_n+1 
    - Complexity: n
 * Chain [19] with precondition: [V_n>=V_x+1,V_y>=V_m] 
    - Lower bound: -2*V_x+2*V_n+1 
    - Complexity: n
 * Chain [18] with precondition: [V_n>=V_x+2,V_m>=V_y+1] 
    - Lower bound: -2*V_x+2*V_n-V_y+V_m+1 
    - Complexity: n
 * Chain [17] with precondition: [V_n>=V_x+2,V_m>=V_y+1] 
    - Lower bound: -2*V_x+2*V_n-V_y+V_m+1 
    - Complexity: n
 * Chain [16] with precondition: [V_n>=V_x+3,V_m>=V_y+1] 
    - Lower bound: -V_y+V_m+7 
    - Complexity: n
 * Chain [15] with precondition: [V_x>=V_n] 
    - Lower bound: 1 
    - Complexity: constant
 
### Partitioned lower bound of eval_speed_popl10_nested_multiple_start(V_x,V_n,V_y,V_m,B): 
* 1 
 if [V_x>=V_n]
* min([-V_y+V_m+6,-2*V_x+2*V_n])+1 
 if [V_n>=V_x+3,V_m>=V_y+1]
* -2*V_x+2*V_n+1 
 if [V_n>=V_x+1,V_y>=V_m]
 or [V_x+1=V_n,V_m>=V_y+1]
 or [V_x+2=V_n,V_m>=V_y+1]
Possible lower bounds : [1,min([-V_y+V_m+6,-2*V_x+2*V_n])+1,-2*V_x+2*V_n+1]
Maximum lower bound complexity: n

Time statistics: 
-------------------------------------
* Partial evaluation computed in 87 ms.
* Invariants computed in 229 ms.
   - Backward Invariants 100 ms.
   - Transitive Invariants 28 ms.
* Refinement performed in 216 ms.
* Termination proved in 32 ms.
* Upper bounds computed in 397 ms.
   - Equation cost structures 94 ms.
   - Phase cost structures 116 ms.
   - Chain cost structures 130 ms.
   - Solving cost expressions 15 ms.
* Total analysis performed in 1077 ms.


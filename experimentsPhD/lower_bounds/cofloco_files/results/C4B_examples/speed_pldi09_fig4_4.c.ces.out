Warning: Ignored call to eval_peed_pldi09_fig4_4_stop/1 in equation eval_peed_pldi09_fig4_4_9/1 
Warning: Ignored call to eval_peed_pldi09_fig4_4_stop/1 in equation eval_peed_pldi09_fig4_4_bb3_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_peed_pldi09_fig4_4_bb1_in/3,eval_peed_pldi09_fig4_4_bb2_in/3]
1. non_recursive : [eval_peed_pldi09_fig4_4_9/1]
2. non_recursive : [eval_peed_pldi09_fig4_4_8/1]
3. non_recursive : [eval_peed_pldi09_fig4_4_bb4_in/1]
4. non_recursive : [eval_peed_pldi09_fig4_4_bb3_in/1]
5. non_recursive : [loop_cont_eval_peed_pldi09_fig4_4_bb1_in/2]
6. non_recursive : [eval_peed_pldi09_fig4_4_3/3]
7. non_recursive : [eval_peed_pldi09_fig4_4_2/3]
8. non_recursive : [eval_peed_pldi09_fig4_4_1/3]
9. non_recursive : [eval_peed_pldi09_fig4_4_0/3]
10. non_recursive : [eval_peed_pldi09_fig4_4_bb0_in/3]
11. non_recursive : [eval_peed_pldi09_fig4_4_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_peed_pldi09_fig4_4_bb1_in/3
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into eval_peed_pldi09_fig4_4_3/3
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into eval_peed_pldi09_fig4_4_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_peed_pldi09_fig4_4_bb1_in/3 
* CE 7 is refined into CE [8] 
* CE 5 is refined into CE [9] 
* CE 6 is refined into CE [10] 


#### Refined cost equations eval_peed_pldi09_fig4_4_bb1_in/3 
* CE 8: eval_peed_pldi09_fig4_4_bb1_in(V_m,V_i_0,B) = 0
     [V_m>=1,0>=V_i_0,B=2] 
* CE 9: eval_peed_pldi09_fig4_4_bb1_in(V_m,V_i_0,B) = 1+ eval_peed_pldi09_fig4_4_bb1_in(V_m,C,D)
     [V_i_0>=V_m,V_m>=1,V_m+C=V_i_0,D=2,B=2] 
* CE 10: eval_peed_pldi09_fig4_4_bb1_in(V_m,V_i_0,B) = 1+ eval_peed_pldi09_fig4_4_bb1_in(V_m,C,D)
     [V_m>=V_i_0+1,V_i_0>=1,V_i_0=C+1,D=2,B=2] 

### Cost equations --> "Loop" of eval_peed_pldi09_fig4_4_bb1_in/3 
* CEs [9] --> Loop 7 
* CEs [10] --> Loop 8 
* CEs [8] --> Loop 9 

#### Loops of eval_peed_pldi09_fig4_4_bb1_in/3 
* Loop 7: eval_peed_pldi09_fig4_4_bb1_in(V_m,V_i_0,B)->  eval_peed_pldi09_fig4_4_bb1_in(V_m,V_i_0',B')
                  [V_i_0>=V_m,V_m>=1,V_m+V_i_0'=V_i_0,B'=2,B=2] 
* Loop 8: eval_peed_pldi09_fig4_4_bb1_in(V_m,V_i_0,B)->  eval_peed_pldi09_fig4_4_bb1_in(V_m,V_i_0',B')
                  [V_m>=V_i_0+1,V_i_0>=1,V_i_0=V_i_0'+1,B'=2,B=2] 
* Loop 9: eval_peed_pldi09_fig4_4_bb1_in(V_m,V_i_0,B) [V_m>=1,0>=V_i_0,B=2] 

### Ranking functions of CR eval_peed_pldi09_fig4_4_bb1_in(V_m,V_i_0,B) 
* RF of phase [7]: [V_i_0,-V_m+V_i_0+1]
* RF of phase [8]: [V_i_0]

#### Partial ranking functions of CR eval_peed_pldi09_fig4_4_bb1_in(V_m,V_i_0,B) 
* Partial RF of phase [7]:
  - RF of loop [7:1]:
    V_i_0
    -V_m+V_i_0+1
* Partial RF of phase [8]:
  - RF of loop [8:1]:
    V_i_0


### Resulting Chains:eval_peed_pldi09_fig4_4_bb1_in(V_m,V_i_0,B) 
* [[8],9]
* [[7],[8],9]
* [[7],9]
* [9]


### Specialization of cost equations eval_peed_pldi09_fig4_4_3/3 
* CE 3 is refined into CE [11,12,13,14] 
* CE 4 is refined into CE [15] 


#### Refined cost equations eval_peed_pldi09_fig4_4_3/3 
* CE 11: eval_peed_pldi09_fig4_4_3(V_n,V_m,B) = 1+ eval_peed_pldi09_fig4_4_bb1_in(V_m,V_n,C):[[8],9]
     [V_m>=V_n+1,V_n>=1,C=2] 
* CE 12: eval_peed_pldi09_fig4_4_3(V_n,V_m,B) = 1+ eval_peed_pldi09_fig4_4_bb1_in(V_m,V_n,C):[[7],[8],9]
     [V_n>=V_m+1,V_m>=2,C=2] 
* CE 13: eval_peed_pldi09_fig4_4_3(V_n,V_m,B) = 1+ eval_peed_pldi09_fig4_4_bb1_in(V_m,V_n,C):[[7],9]
     [V_n>=V_m,V_m>=1,C=2] 
* CE 14: eval_peed_pldi09_fig4_4_3(V_n,V_m,B) = 1+ eval_peed_pldi09_fig4_4_bb1_in(V_m,V_n,C):[9]
     [V_m>=1,0>=V_n,C=2] 
* CE 15: eval_peed_pldi09_fig4_4_3(V_n,V_m,B) = 0
     [0>=V_m] 

### Cost equations --> "Loop" of eval_peed_pldi09_fig4_4_3/3 
* CEs [12] --> Loop 10 
* CEs [13] --> Loop 11 
* CEs [11] --> Loop 12 
* CEs [15] --> Loop 13 
* CEs [14] --> Loop 14 

#### Loops of eval_peed_pldi09_fig4_4_3/3 
* Loop 10: eval_peed_pldi09_fig4_4_3(V_n,V_m,B) [V_n>=V_m+1,V_m>=2] 
* Loop 11: eval_peed_pldi09_fig4_4_3(V_n,V_m,B) [V_n>=V_m,V_m>=1] 
* Loop 12: eval_peed_pldi09_fig4_4_3(V_n,V_m,B) [V_m>=V_n+1,V_n>=1] 
* Loop 13: eval_peed_pldi09_fig4_4_3(V_n,V_m,B) [0>=V_m] 
* Loop 14: eval_peed_pldi09_fig4_4_3(V_n,V_m,B) [V_m>=1,0>=V_n] 

### Ranking functions of CR eval_peed_pldi09_fig4_4_3(V_n,V_m,B) 

#### Partial ranking functions of CR eval_peed_pldi09_fig4_4_3(V_n,V_m,B) 


### Resulting Chains:eval_peed_pldi09_fig4_4_3(V_n,V_m,B) 
* [14]
* [13]
* [12]
* [11]
* [10]


### Specialization of cost equations eval_peed_pldi09_fig4_4_start/3 
* CE 2 is refined into CE [16,17,18,19,20] 


#### Refined cost equations eval_peed_pldi09_fig4_4_start/3 
* CE 16: eval_peed_pldi09_fig4_4_start(V_n,V_m,B) = 0+ eval_peed_pldi09_fig4_4_3(V_n,V_m,B):[14]
     [V_m>=1,0>=V_n] 
* CE 17: eval_peed_pldi09_fig4_4_start(V_n,V_m,B) = 0+ eval_peed_pldi09_fig4_4_3(V_n,V_m,B):[13]
     [0>=V_m] 
* CE 18: eval_peed_pldi09_fig4_4_start(V_n,V_m,B) = 0+ eval_peed_pldi09_fig4_4_3(V_n,V_m,B):[12]
     [V_m>=V_n+1,V_n>=1] 
* CE 19: eval_peed_pldi09_fig4_4_start(V_n,V_m,B) = 0+ eval_peed_pldi09_fig4_4_3(V_n,V_m,B):[11]
     [V_n>=V_m,V_m>=1] 
* CE 20: eval_peed_pldi09_fig4_4_start(V_n,V_m,B) = 0+ eval_peed_pldi09_fig4_4_3(V_n,V_m,B):[10]
     [V_n>=V_m+1,V_m>=2] 

### Cost equations --> "Loop" of eval_peed_pldi09_fig4_4_start/3 
* CEs [20] --> Loop 15 
* CEs [19] --> Loop 16 
* CEs [18] --> Loop 17 
* CEs [17] --> Loop 18 
* CEs [16] --> Loop 19 

#### Loops of eval_peed_pldi09_fig4_4_start/3 
* Loop 15: eval_peed_pldi09_fig4_4_start(V_n,V_m,B) [V_n>=V_m+1,V_m>=2] 
* Loop 16: eval_peed_pldi09_fig4_4_start(V_n,V_m,B) [V_n>=V_m,V_m>=1] 
* Loop 17: eval_peed_pldi09_fig4_4_start(V_n,V_m,B) [V_m>=V_n+1,V_n>=1] 
* Loop 18: eval_peed_pldi09_fig4_4_start(V_n,V_m,B) [0>=V_m] 
* Loop 19: eval_peed_pldi09_fig4_4_start(V_n,V_m,B) [V_m>=1,0>=V_n] 

### Ranking functions of CR eval_peed_pldi09_fig4_4_start(V_n,V_m,B) 

#### Partial ranking functions of CR eval_peed_pldi09_fig4_4_start(V_n,V_m,B) 


### Resulting Chains:eval_peed_pldi09_fig4_4_start(V_n,V_m,B) 
* [19]
* [18]
* [17]
* [16]
* [15]


Computing Bounds
=====================================

#### Cost of loops [8] 

 * loop 8:eval_peed_pldi09_fig4_4_bb1_in(V_m,V_i_0,B) -> [eval_peed_pldi09_fig4_4_bb1_in(V_m',V_i_0',B')] 
1
#### Cost of phase [8]:eval_peed_pldi09_fig4_4_bb1_in(V_m,V_i_0,B) -> [eval_peed_pldi09_fig4_4_bb1_in(V_m',V_i_0',B')] 
1*it(8)+0
  Such that:it(8) =< V_i_0
it(8) =< V_i_0-V_i_0'
it(8) >= V_i_0-V_i_0'

#### Cost of loops [7] 

 * loop 7:eval_peed_pldi09_fig4_4_bb1_in(V_m,V_i_0,B) -> [eval_peed_pldi09_fig4_4_bb1_in(V_m',V_i_0',B')] 
1
#### Cost of phase [7]:eval_peed_pldi09_fig4_4_bb1_in(V_m,V_i_0,B) -> [eval_peed_pldi09_fig4_4_bb1_in(V_m',V_i_0',B')] 
1*it(7)+0
  Such that:it(7) =< -V_m+V_i_0+1
it(7) =< -V_m+V_i_0+V_m'-V_i_0'
it(7) =< V_i_0
it(7) =< V_i_0-V_i_0'

#### Cost of phase [7]:eval_peed_pldi09_fig4_4_bb1_in(V_m,V_i_0,B) -> [eval_peed_pldi09_fig4_4_bb1_in(V_m',V_i_0',B')] 
1*it(7)+0
  Such that:it(7) =< -V_m+V_i_0+1
it(7) =< -V_m+V_i_0+V_m'-V_i_0'
it(7) =< V_i_0
it(7) =< V_i_0-V_i_0'

#### Cost of chains of eval_peed_pldi09_fig4_4_bb1_in(V_m,V_i_0,B):
* Chain [[8],9]: 1*it(8)+0
  Such that:it(8) =< V_i_0
it(8) >= V_i_0

  with precondition: [B=2,V_i_0>=1,V_m>=V_i_0+1] 

* Chain [[7],[8],9]: 1*it(7)+1*it(8)+0
  Such that:it(8) =< -V_m+V_i_0
it(7) =< -V_m+V_i_0+1
it(8) >= 1

  with precondition: [B=2,V_m>=2,V_i_0>=V_m+1] 

* Chain [[7],9]: 1*it(7)+0
  Such that:it(7) =< -V_m+V_i_0+1

  with precondition: [B=2,V_m>=1,V_i_0>=V_m] 

* Chain [9]: 0
  with precondition: [B=2,0>=V_i_0,V_m>=1] 


#### Cost of chains of eval_peed_pldi09_fig4_4_3(V_n,V_m,B):
* Chain [14]: 1
  with precondition: [0>=V_n,V_m>=1] 

* Chain [13]: 0
  with precondition: [0>=V_m] 

* Chain [12]: 1*s(1)+1
  Such that:s(1) =< V_n
s(1) >= V_n

  with precondition: [V_n>=1,V_m>=V_n+1] 

* Chain [11]: 1*s(2)+1
  Such that:s(2) =< V_n-V_m+1

  with precondition: [V_m>=1,V_n>=V_m] 

* Chain [10]: 1*s(3)+1*s(4)+1
  Such that:s(3) =< V_n-V_m
s(4) =< V_n-V_m+1
s(3) >= 1

  with precondition: [V_m>=2,V_n>=V_m+1] 


#### Cost of chains of eval_peed_pldi09_fig4_4_start(V_n,V_m,B):
* Chain [19]: 1
  with precondition: [0>=V_n,V_m>=1] 

* Chain [18]: 0
  with precondition: [0>=V_m] 

* Chain [17]: 1*s(5)+1
  Such that:s(5) =< V_n
s(5) >= V_n

  with precondition: [V_n>=1,V_m>=V_n+1] 

* Chain [16]: 1*s(6)+1
  Such that:s(6) =< V_n-V_m+1

  with precondition: [V_m>=1,V_n>=V_m] 

* Chain [15]: 1*s(7)+1*s(8)+1
  Such that:s(7) =< V_n-V_m
s(8) =< V_n-V_m+1
s(7) >= 1

  with precondition: [V_m>=2,V_n>=V_m+1] 


Closed-form bounds of eval_peed_pldi09_fig4_4_start(V_n,V_m,B): 
-------------------------------------
* Chain [19] with precondition: [0>=V_n,V_m>=1] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [18] with precondition: [0>=V_m] 
    - Lower bound: 0 
    - Complexity: constant
 * Chain [17] with precondition: [V_n>=1,V_m>=V_n+1] 
    - Lower bound: V_n+1 
    - Complexity: n
 * Chain [16] with precondition: [V_m>=1,V_n>=V_m] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [15] with precondition: [V_m>=2,V_n>=V_m+1] 
    - Lower bound: 2 
    - Complexity: constant
 
### Partitioned lower bound of eval_peed_pldi09_fig4_4_start(V_n,V_m,B): 
* 0 
 if [0>=V_m]
* 1 
 if [V_m>=2,V_n>=V_m]
 or [0>=V_n,V_m>=1]
 or [V_m=1,V_n>=1]
* V_n+1 
 if [V_n>=1,V_m>=V_n+1]
Possible lower bounds : [0,1,V_n+1]
Maximum lower bound complexity: n

Time statistics: 
-------------------------------------
* Partial evaluation computed in 43 ms.
* Invariants computed in 67 ms.
   - Backward Invariants 30 ms.
   - Transitive Invariants 9 ms.
* Refinement performed in 91 ms.
* Termination proved in 15 ms.
* Upper bounds computed in 167 ms.
   - Equation cost structures 54 ms.
   - Phase cost structures 30 ms.
   - Chain cost structures 47 ms.
   - Solving cost expressions 5 ms.
* Total analysis performed in 459 ms.


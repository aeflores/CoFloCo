Warning: Ignored call to eval_speed_pldi10_ex1_stop/1 in equation eval_speed_pldi10_ex1_bb6_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_speed_pldi10_ex1_10/12,eval_speed_pldi10_ex1_11/12,eval_speed_pldi10_ex1_8/11,eval_speed_pldi10_ex1_9/12,eval_speed_pldi10_ex1_bb2_in/10,eval_speed_pldi10_ex1_bb3_in/11,eval_speed_pldi10_ex1_bb4_in/12]
1. recursive : [eval_speed_pldi10_ex1_15/7,eval_speed_pldi10_ex1_16/7,eval_speed_pldi10_ex1_bb1_in/3,eval_speed_pldi10_ex1_bb5_in/6,loop_cont_eval_speed_pldi10_ex1_bb2_in/7]
2. non_recursive : [eval_speed_pldi10_ex1_bb6_in/1]
3. non_recursive : [loop_cont_eval_speed_pldi10_ex1_bb1_in/2]
4. non_recursive : [eval_speed_pldi10_ex1_5/2]
5. non_recursive : [eval_speed_pldi10_ex1_4/2]
6. non_recursive : [eval_speed_pldi10_ex1_3/2]
7. non_recursive : [eval_speed_pldi10_ex1_2/2]
8. non_recursive : [eval_speed_pldi10_ex1_1/2]
9. non_recursive : [eval_speed_pldi10_ex1_0/2]
10. non_recursive : [eval_speed_pldi10_ex1_bb0_in/2]
11. non_recursive : [eval_speed_pldi10_ex1_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_speed_pldi10_ex1_bb2_in/10
1. SCC is partially evaluated into eval_speed_pldi10_ex1_bb1_in/3
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into eval_speed_pldi10_ex1_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_speed_pldi10_ex1_bb2_in/10 
* CE 7 is refined into CE [8] 
* CE 5 is refined into CE [9] 
* CE 6 is refined into CE [10] 


#### Refined cost equations eval_speed_pldi10_ex1_bb2_in/10 
* CE 8: eval_speed_pldi10_ex1_bb2_in(A,B,C,D,E,A,B,C,F,G) = 0
     [B>=C+1,C>=A,C+1=G,C+1=F,C+1=D,E=2] 
* CE 9: eval_speed_pldi10_ex1_bb2_in(V_i_0,V__0,V_i_0_sink,V__1,B,C,D,E,F,G) = 1+ eval_speed_pldi10_ex1_bb2_in(V_i_0,V__0,H,V__1,I,C,D,E,F,G)
     [V__0>=V__1,V__1>=V_i_0_sink+2,V_i_0_sink>=V_i_0,V_i_0_sink+1=H,I=2,B=2] 
* CE 10: eval_speed_pldi10_ex1_bb2_in(V_i_0,V__0,V_i_0_sink,V__1,B,C,D,E,F,G) = 1+ eval_speed_pldi10_ex1_bb2_in(V_i_0,V__0,V_i_0_sink,H,I,C,D,E,F,G)
     [V__0>=H+1,H>=V_i_0_sink+1,V_i_0_sink>=V_i_0,H+1=V__1,I=2,B=2] 

### Cost equations --> "Loop" of eval_speed_pldi10_ex1_bb2_in/10 
* CEs [9] --> Loop 7 
* CEs [10] --> Loop 8 
* CEs [8] --> Loop 9 

#### Loops of eval_speed_pldi10_ex1_bb2_in/10 
* Loop 7: eval_speed_pldi10_ex1_bb2_in(V_i_0,V__0,V_i_0_sink,V__1,B,C,D,E,F,G)->  eval_speed_pldi10_ex1_bb2_in(V_i_0,V__0,V_i_0_sink',V__1,B',C,D,E,F,G)
                  [V__0>=V__1,V__1>=V_i_0_sink+2,V_i_0_sink>=V_i_0,V_i_0_sink+1=V_i_0_sink',B'=2,B=2] 
* Loop 8: eval_speed_pldi10_ex1_bb2_in(V_i_0,V__0,V_i_0_sink,V__1,B,C,D,E,F,G)->  eval_speed_pldi10_ex1_bb2_in(V_i_0,V__0,V_i_0_sink,V__1',B',C,D,E,F,G)
                  [V__0>=V__1'+1,V__1'>=V_i_0_sink+1,V_i_0_sink>=V_i_0,V__1'+1=V__1,B'=2,B=2] 
* Loop 9: eval_speed_pldi10_ex1_bb2_in(A,B,C,D,E,A,B,C,F,G) [B>=C+1,C>=A,C+1=G,C+1=F,C+1=D,E=2] 

### Ranking functions of CR eval_speed_pldi10_ex1_bb2_in(V_i_0,V__0,V_i_0_sink,V__1,B,C,D,E,F,G) 
* RF of phase [7,8]: [-V_i_0_sink+V__1-1]

#### Partial ranking functions of CR eval_speed_pldi10_ex1_bb2_in(V_i_0,V__0,V_i_0_sink,V__1,B,C,D,E,F,G) 
* Partial RF of phase [7,8]:
  - RF of loop [7:1]:
    V__0-V_i_0_sink-1
  - RF of loop [7:1,8:1]:
    -V_i_0_sink+V__1-1
  - RF of loop [8:1]:
    -V_i_0+V__1-1


### Resulting Chains:eval_speed_pldi10_ex1_bb2_in(V_i_0,V__0,V_i_0_sink,V__1,B,C,D,E,F,G) 
* [[7,8],9]
* [9]


### Specialization of cost equations eval_speed_pldi10_ex1_bb1_in/3 
* CE 4 is refined into CE [11] 
* CE 3 is refined into CE [12,13] 


#### Refined cost equations eval_speed_pldi10_ex1_bb1_in/3 
* CE 11: eval_speed_pldi10_ex1_bb1_in(V_i_0,V__0,B) = 0
     [V_i_0>=V__0,B=3] 
* CE 12: eval_speed_pldi10_ex1_bb1_in(V_i_0,V__0,B) = 2+ eval_speed_pldi10_ex1_bb2_in(V_i_0,V__0,V_i_0,V__0,C,V_i_0,V__0,D,E,E):[[7,8],9]+ eval_speed_pldi10_ex1_bb1_in(F,E,G)
     [V__0>=E,E>=V_i_0+1,V__0>=V_i_0+2,V_i_0+1=F,E=D+1,G=3,C=2,B=3] 
* CE 13: eval_speed_pldi10_ex1_bb1_in(V_i_0,V__0,B) = 2+ eval_speed_pldi10_ex1_bb2_in(C,V__0,D,V__0,E,F,V__0,G,V__0,V__0):[9]+ eval_speed_pldi10_ex1_bb1_in(V__0,V__0,H)
     [V__0=G+1,V__0=F+1,V__0=D+1,V__0=C+1,V__0=V_i_0+1,H=3,E=2,B=3] 

### Cost equations --> "Loop" of eval_speed_pldi10_ex1_bb1_in/3 
* CEs [12] --> Loop 10 
* CEs [13] --> Loop 11 
* CEs [11] --> Loop 12 

#### Loops of eval_speed_pldi10_ex1_bb1_in/3 
* Loop 10: eval_speed_pldi10_ex1_bb1_in(V_i_0,V__0,B)->  eval_speed_pldi10_ex1_bb1_in(V_i_0',V__0',B')
                  [V__0>=V__0',V__0'>=V_i_0+1,V__0>=V_i_0+2,V_i_0+1=V_i_0',B'=3,B=3] 
* Loop 11: eval_speed_pldi10_ex1_bb1_in(V_i_0,V__0,B)->  eval_speed_pldi10_ex1_bb1_in(V__0,V__0,A')
                  [V__0=V_i_0+1,A'=3,B=3] 
* Loop 12: eval_speed_pldi10_ex1_bb1_in(V_i_0,V__0,B) [V_i_0>=V__0,B=3] 

### Ranking functions of CR eval_speed_pldi10_ex1_bb1_in(V_i_0,V__0,B) 
* RF of phase [10]: [-V_i_0+V__0-1]

#### Partial ranking functions of CR eval_speed_pldi10_ex1_bb1_in(V_i_0,V__0,B) 
* Partial RF of phase [10]:
  - RF of loop [10:1]:
    -V_i_0+V__0-1


### Resulting Chains:eval_speed_pldi10_ex1_bb1_in(V_i_0,V__0,B) 
* [[10],12]
* [[10],11,12]
* [12]
* [11,12]


### Specialization of cost equations eval_speed_pldi10_ex1_start/2 
* CE 2 is refined into CE [14,15,16,17] 


#### Refined cost equations eval_speed_pldi10_ex1_start/2 
* CE 14: eval_speed_pldi10_ex1_start(V_n,B) = 1+ eval_speed_pldi10_ex1_bb1_in(C,V_n,D):[[10],12]
     [V_n>=2,D=3,C=0] 
* CE 15: eval_speed_pldi10_ex1_start(V_n,B) = 1+ eval_speed_pldi10_ex1_bb1_in(C,V_n,D):[[10],11,12]
     [V_n>=2,D=3,C=0] 
* CE 16: eval_speed_pldi10_ex1_start(V_n,B) = 1+ eval_speed_pldi10_ex1_bb1_in(C,V_n,D):[12]
     [0>=V_n,D=3,C=0] 
* CE 17: eval_speed_pldi10_ex1_start(V_n,B) = 1+ eval_speed_pldi10_ex1_bb1_in(C,D,E):[11,12]
     [E=3,D=1,C=0,V_n=1] 

### Cost equations --> "Loop" of eval_speed_pldi10_ex1_start/2 
* CEs [15] --> Loop 13 
* CEs [14] --> Loop 14 
* CEs [16] --> Loop 15 
* CEs [17] --> Loop 16 

#### Loops of eval_speed_pldi10_ex1_start/2 
* Loop 13: eval_speed_pldi10_ex1_start(V_n,B) [V_n>=2] 
* Loop 14: eval_speed_pldi10_ex1_start(V_n,B) [V_n>=2] 
* Loop 15: eval_speed_pldi10_ex1_start(V_n,B) [0>=V_n] 
* Loop 16: eval_speed_pldi10_ex1_start(V_n,B) [V_n=1] 

### Ranking functions of CR eval_speed_pldi10_ex1_start(V_n,B) 

#### Partial ranking functions of CR eval_speed_pldi10_ex1_start(V_n,B) 


### Resulting Chains:eval_speed_pldi10_ex1_start(V_n,B) 
* [16]
* [15]
* [14]
* [13]


Computing Bounds
=====================================

#### Cost of loops [7,8] 

 * loop 7:eval_speed_pldi10_ex1_bb2_in(V_i_0,V__0,V_i_0_sink,V__1,B,C,D,E,F,G) -> [eval_speed_pldi10_ex1_bb2_in(V_i_0',V__0',V_i_0_sink',V__1',B',C',D',E',F',G')] 
1
 * loop 8:eval_speed_pldi10_ex1_bb2_in(V_i_0,V__0,V_i_0_sink,V__1,B,C,D,E,F,G) -> [eval_speed_pldi10_ex1_bb2_in(V_i_0',V__0',V_i_0_sink',V__1',B',C',D',E',F',G')] 
1
#### Cost of phase [7,8]:eval_speed_pldi10_ex1_bb2_in(V_i_0,V__0,V_i_0_sink,V__1,B,C,D,E,F,G) -> [eval_speed_pldi10_ex1_bb2_in(V_i_0',V__0',V_i_0_sink',V__1',B',C',D',E',F',G')] 
1*it(7)+1*it(8)+0
  Such that:it(8) =< -V_i_0+V__1-1
it(8) =< -V_i_0+V__1+V_i_0'-V__1'
it(7) =< V__0-V_i_0_sink-1
it(7) =< V__0-V_i_0_sink-V__0'+V_i_0_sink'
it(7)+it(8) =< -V_i_0_sink+V__1-1
it(7)+it(8) =< -V_i_0_sink+V__1+V_i_0_sink'-V__1'
it(8) >= -V_i_0+V__1+V_i_0'-V__1'
it(7) >= V__0-V_i_0_sink-V__0'+V_i_0_sink'
it(7)+it(8) >= -V_i_0_sink+V__1+V_i_0_sink'-V__1'

#### Cost of chains of eval_speed_pldi10_ex1_bb2_in(V_i_0,V__0,V_i_0_sink,V__1,B,C,D,E,F,G):
* Chain [[7,8],9]: 1*it(7)+1*it(8)+0
  Such that:it(7) =< -V_i_0_sink+F-1
it(8) =< V__1-F
it(7) >= -V_i_0_sink+G-1
it(8) >= V__1-G

  with precondition: [B=2,V_i_0=C,V__0=D,E+1=F,E+1=G,V_i_0_sink>=V_i_0,V__1>=V_i_0_sink+2,E>=V_i_0_sink,V__0>=V__1,V__1>=E+1] 

* Chain [9]: 0
  with precondition: [B=2,V_i_0_sink+1=V__1,V_i_0=C,V__0=D,V_i_0_sink=E,V_i_0_sink+1=F,V_i_0_sink+1=G,V_i_0_sink>=V_i_0,V__0>=V_i_0_sink+1] 


#### Cost of loops [10] 

 * loop 10:eval_speed_pldi10_ex1_bb1_in(V_i_0,V__0,B) -> [eval_speed_pldi10_ex1_bb1_in(V_i_0',V__0',B')] 
1*s(4)+1*s(3)+2
  Such that:s(3) =< V__0-V__0'
s(4) =< -V_i_0'+V__0'
s(4) >= -V_i_0+V__0'-1
s(3) >= V__0-V__0'

#### Cost of phase [10]:eval_speed_pldi10_ex1_bb1_in(V_i_0,V__0,B) -> [eval_speed_pldi10_ex1_bb1_in(V_i_0',V__0',B')] 
2*it(10)+1*s(5)+1*s(6)+0
  Such that:aux(4) =< -V_i_0+V__0-1
aux(5) =< -V_i_0+V__0+V_i_0'-V__0'
it(10) =< aux(4)
s(6) =< aux(4)
it(10) =< aux(5)
s(6) =< aux(5)
s(5) =< it(10)*aux(4)
s(6) >= V__0-V__0'
aux(6) >= aux(6)
s(5) >= aux(6)

#### Cost of phase [10]:eval_speed_pldi10_ex1_bb1_in(V_i_0,V__0,B) -> [eval_speed_pldi10_ex1_bb1_in(V_i_0',V__0',B')] 
2*it(10)+1*s(5)+1*s(6)+0
  Such that:aux(4) =< -V_i_0+V__0-1
aux(5) =< -V_i_0+V__0+V_i_0'-V__0'
it(10) =< aux(4)
s(6) =< aux(4)
it(10) =< aux(5)
s(6) =< aux(5)
s(5) =< it(10)*aux(4)
s(6) >= V__0-V__0'
aux(6) >= aux(6)
s(5) >= aux(6)

#### Cost of chains of eval_speed_pldi10_ex1_bb1_in(V_i_0,V__0,B):
* Chain [[10],12]: 2*it(10)+1*s(5)+1*s(6)+0
  Such that:aux(4) =< -V_i_0+V__0-1
aux(5) =< -V_i_0+V__0
it(10) =< aux(4)
s(6) =< aux(4)
it(10) =< aux(5)
s(6) =< aux(5)
s(5) =< it(10)*aux(4)
s(6) >= 1

  with precondition: [B=3,V_i_0>=0,V__0>=V_i_0+2] 

* Chain [[10],11,12]: 2*it(10)+1*s(5)+1*s(6)+2
  Such that:aux(7) =< -V_i_0+V__0-1
it(10) =< aux(7)
s(6) =< aux(7)
s(5) =< it(10)*aux(7)

  with precondition: [B=3,V_i_0>=0,V__0>=V_i_0+2] 

* Chain [12]: 0
  with precondition: [B=3,V_i_0>=0,V_i_0>=V__0] 

* Chain [11,12]: 2
  with precondition: [B=3,V__0=V_i_0+1,V__0>=1] 


#### Cost of chains of eval_speed_pldi10_ex1_start(V_n,B):
* Chain [16]: 3
  with precondition: [V_n=1] 

* Chain [15]: 1
  with precondition: [0>=V_n] 

* Chain [14]: 1*s(9)+2*s(10)+1*s(11)+1
  Such that:s(7) =< V_n-1
s(8) =< V_n
s(10) =< s(7)
s(9) =< s(7)
s(10) =< s(8)
s(9) =< s(8)
s(11) =< s(10)*s(7)
s(9) >= 1

  with precondition: [V_n>=2] 

* Chain [13]: 3*s(13)+1*s(15)+3
  Such that:s(12) =< V_n-1
s(13) =< s(12)
s(15) =< s(13)*s(12)

  with precondition: [V_n>=2] 


Closed-form bounds of eval_speed_pldi10_ex1_start(V_n,B): 
-------------------------------------
* Chain [16] with precondition: [V_n=1] 
    - Lower bound: 3 
    - Complexity: constant
 * Chain [15] with precondition: [0>=V_n] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [14] with precondition: [V_n>=2] 
    - Lower bound: 2 
    - Complexity: constant
 * Chain [13] with precondition: [V_n>=2] 
    - Lower bound: 3 
    - Complexity: constant
 
### Partitioned lower bound of eval_speed_pldi10_ex1_start(V_n,B): 
* 1 
 if [0>=V_n]
* 2 
 if [V_n>=2]
* 3 
 if [V_n=1]
Possible lower bounds : [1,2,3]
Maximum lower bound complexity: constant

Time statistics: 
-------------------------------------
* Partial evaluation computed in 101 ms.
* Invariants computed in 130 ms.
   - Backward Invariants 49 ms.
   - Transitive Invariants 26 ms.
* Refinement performed in 164 ms.
* Termination proved in 42 ms.
* Upper bounds computed in 432 ms.
   - Equation cost structures 77 ms.
   - Phase cost structures 241 ms.
   - Chain cost structures 135 ms.
   - Solving cost expressions 4 ms.
* Total analysis performed in 991 ms.


Warning: Ignored call to eval_t30_stop/1 in equation eval_t30_bb3_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_t30_bb1_in/3,eval_t30_bb2_in/3]
1. non_recursive : [eval_t30_bb3_in/1]
2. non_recursive : [loop_cont_eval_t30_bb1_in/2]
3. non_recursive : [eval_t30_7/3]
4. non_recursive : [eval_t30_6/3]
5. non_recursive : [eval_t30_5/3]
6. non_recursive : [eval_t30_4/3]
7. non_recursive : [eval_t30_3/3]
8. non_recursive : [eval_t30_2/3]
9. non_recursive : [eval_t30_1/3]
10. non_recursive : [eval_t30_0/3]
11. non_recursive : [eval_t30_bb0_in/3]
12. non_recursive : [eval_t30_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_t30_bb1_in/3
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into eval_t30_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_t30_bb1_in/3 
* CE 4 is refined into CE [5] 
* CE 3 is refined into CE [6] 


#### Refined cost equations eval_t30_bb1_in/3 
* CE 5: eval_t30_bb1_in(V__01,V__0,B) = 0
     [0>=V__0,B=2] 
* CE 6: eval_t30_bb1_in(V__01,V__0,B) = 1+ eval_t30_bb1_in(C,V__01,D)
     [V__0>=1,V__0=C+1,D=2,B=2] 

### Cost equations --> "Loop" of eval_t30_bb1_in/3 
* CEs [6] --> Loop 4 
* CEs [5] --> Loop 5 

#### Loops of eval_t30_bb1_in/3 
* Loop 4: eval_t30_bb1_in(V__01,V__0,B)->  eval_t30_bb1_in(A',V__01,B')
                  [V__0>=1,V__0=A'+1,B'=2,B=2] 
* Loop 5: eval_t30_bb1_in(V__01,V__0,B) [0>=V__0,B=2] 

### Ranking functions of CR eval_t30_bb1_in(V__01,V__0,B) 

#### Partial ranking functions of CR eval_t30_bb1_in(V__01,V__0,B) 


### Resulting Chains:eval_t30_bb1_in(V__01,V__0,B) 
* [[4]]...
* [[4],5]
* [5]


### Specialization of cost equations eval_t30_start/3 
* CE 2 is refined into CE [7,8,9] 


#### Refined cost equations eval_t30_start/3 
* CE 7: eval_t30_start(V_x,V_y,B) = 1+ eval_t30_bb1_in(V_y,V_x,C):[[4]]
     [V_x>=1,C=2] 
* CE 8: eval_t30_start(V_x,V_y,B) = 1+ eval_t30_bb1_in(V_y,V_x,C):[[4],5]
     [V_x>=1,C=2] 
* CE 9: eval_t30_start(V_x,V_y,B) = 1+ eval_t30_bb1_in(V_y,V_x,C):[5]
     [0>=V_x,C=2] 

### Cost equations --> "Loop" of eval_t30_start/3 
* CEs [8] --> Loop 6 
* CEs [9] --> Loop 7 
* CEs [7] --> Loop 8 

#### Loops of eval_t30_start/3 
* Loop 6: eval_t30_start(V_x,V_y,B) [V_x>=1] 
* Loop 7: eval_t30_start(V_x,V_y,B) [0>=V_x] 
* Loop 8: eval_t30_start(V_x,V_y,B) [V_x>=1] 

### Ranking functions of CR eval_t30_start(V_x,V_y,B) 

#### Partial ranking functions of CR eval_t30_start(V_x,V_y,B) 


### Resulting Chains:eval_t30_start(V_x,V_y,B) 
* [8]...
* [7]
* [6]


Computing Bounds
=====================================

#### Cost of loops [4] 

 * loop 4:eval_t30_bb1_in(V__01,V__0,B) -> [eval_t30_bb1_in(V__01',V__0',B')] 
1
#### Cost of phase [4]:eval_t30_bb1_in(V__01,V__0,B) -> [eval_t30_bb1_in(V__01',V__0',B')] 
1*it(4)+0
#### Cost of phase [4]:eval_t30_bb1_in(V__01,V__0,B) -> [eval_t30_bb1_in(V__01',V__0',B')] 
1*it(4)+0
#### Cost of chains of eval_t30_bb1_in(V__01,V__0,B):
* Chain [[4]]...: 1*it(4)+0
  with precondition: [V__0>=1,B=2] 

* Chain [[4],5]: 1*it(4)+0
  with precondition: [B=2,V__0>=1] 

* Chain [5]: 0
  with precondition: [B=2,0>=V__0] 


#### Cost of chains of eval_t30_start(V_x,V_y,B):
* Chain [8]...: 1*s(1)+1
  with precondition: [V_x>=1] 

* Chain [7]: 1
  with precondition: [0>=V_x] 

* Chain [6]: 1*s(2)+1
  with precondition: [V_x>=1] 


Closed-form bounds of eval_t30_start(V_x,V_y,B): 
-------------------------------------
* Chain [8]... with precondition: [V_x>=1] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [7] with precondition: [0>=V_x] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [6] with precondition: [V_x>=1] 
    - Lower bound: 1 
    - Complexity: constant
 
### Partitioned lower bound of eval_t30_start(V_x,V_y,B): 
* 1 
 if []
Possible lower bounds : [1]
Maximum lower bound complexity: constant

Time statistics: 
-------------------------------------
* Partial evaluation computed in 21 ms.
* Invariants computed in 16 ms.
   - Backward Invariants 8 ms.
   - Transitive Invariants 4 ms.
* Refinement performed in 24 ms.
* Termination proved in 3 ms.
* Upper bounds computed in 23 ms.
   - Equation cost structures 6 ms.
   - Phase cost structures 6 ms.
   - Chain cost structures 8 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 119 ms.


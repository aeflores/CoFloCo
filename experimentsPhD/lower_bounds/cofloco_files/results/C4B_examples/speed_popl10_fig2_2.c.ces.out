Warning: Ignored call to eval_speed_popl10_fig2_2_stop/1 in equation eval_speed_popl10_fig2_2_bb3_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_speed_popl10_fig2_2_bb1_in/4,eval_speed_popl10_fig2_2_bb2_in/4]
1. non_recursive : [eval_speed_popl10_fig2_2_bb3_in/1]
2. non_recursive : [loop_cont_eval_speed_popl10_fig2_2_bb1_in/2]
3. non_recursive : [eval_speed_popl10_fig2_2_5/4]
4. non_recursive : [eval_speed_popl10_fig2_2_4/4]
5. non_recursive : [eval_speed_popl10_fig2_2_3/4]
6. non_recursive : [eval_speed_popl10_fig2_2_2/4]
7. non_recursive : [eval_speed_popl10_fig2_2_1/4]
8. non_recursive : [eval_speed_popl10_fig2_2_0/4]
9. non_recursive : [eval_speed_popl10_fig2_2_bb0_in/4]
10. non_recursive : [eval_speed_popl10_fig2_2_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_speed_popl10_fig2_2_bb1_in/4
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is partially evaluated into eval_speed_popl10_fig2_2_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_speed_popl10_fig2_2_bb1_in/4 
* CE 5 is refined into CE [6] 
* CE 4 is refined into CE [7] 
* CE 3 is refined into CE [8] 


#### Refined cost equations eval_speed_popl10_fig2_2_bb1_in/4 
* CE 6: eval_speed_popl10_fig2_2_bb1_in(V_n,V__01,V__0,B) = 0
     [V__0>=V_n,B=2] 
* CE 7: eval_speed_popl10_fig2_2_bb1_in(V_n,V__01,V__0,B) = 1+ eval_speed_popl10_fig2_2_bb1_in(V_n,V__01,C,D)
     [V__01>=V__0+1,V_n>=V__0+1,V__0+1=C,D=2,B=2] 
* CE 8: eval_speed_popl10_fig2_2_bb1_in(V_n,V__01,V__0,B) = 1+ eval_speed_popl10_fig2_2_bb1_in(V_n,C,V__0,D)
     [V_n>=V__0+1,V__0>=V__01,V__01+1=C,D=2,B=2] 

### Cost equations --> "Loop" of eval_speed_popl10_fig2_2_bb1_in/4 
* CEs [7] --> Loop 5 
* CEs [8] --> Loop 6 
* CEs [6] --> Loop 7 

#### Loops of eval_speed_popl10_fig2_2_bb1_in/4 
* Loop 5: eval_speed_popl10_fig2_2_bb1_in(V_n,V__01,V__0,B)->  eval_speed_popl10_fig2_2_bb1_in(V_n,V__01,V__0',B')
                  [V__01>=V__0+1,V_n>=V__0+1,V__0+1=V__0',B'=2,B=2] 
* Loop 6: eval_speed_popl10_fig2_2_bb1_in(V_n,V__01,V__0,B)->  eval_speed_popl10_fig2_2_bb1_in(V_n,V__01',V__0,B')
                  [V_n>=V__0+1,V__0>=V__01,V__01+1=V__01',B'=2,B=2] 
* Loop 7: eval_speed_popl10_fig2_2_bb1_in(V_n,V__01,V__0,B) [V__0>=V_n,B=2] 

### Ranking functions of CR eval_speed_popl10_fig2_2_bb1_in(V_n,V__01,V__0,B) 

#### Partial ranking functions of CR eval_speed_popl10_fig2_2_bb1_in(V_n,V__01,V__0,B) 
* Partial RF of phase [5,6]:
  - RF of loop [5:1]:
    V__01-V__0 depends on loops [6:1] 
    V_n-V__0
  - RF of loop [6:1]:
    -V__01+V__0+1 depends on loops [5:1] 
    V_n-V__01


### Resulting Chains:eval_speed_popl10_fig2_2_bb1_in(V_n,V__01,V__0,B) 
* [[5,6],7]
* [7]


### Specialization of cost equations eval_speed_popl10_fig2_2_start/4 
* CE 2 is refined into CE [9,10] 


#### Refined cost equations eval_speed_popl10_fig2_2_start/4 
* CE 9: eval_speed_popl10_fig2_2_start(V_x,V_z,V_n,B) = 1+ eval_speed_popl10_fig2_2_bb1_in(V_n,V_z,V_x,C):[[5,6],7]
     [V_n>=V_x+1,C=2] 
* CE 10: eval_speed_popl10_fig2_2_start(V_x,V_z,V_n,B) = 1+ eval_speed_popl10_fig2_2_bb1_in(V_n,V_z,V_x,C):[7]
     [V_x>=V_n,C=2] 

### Cost equations --> "Loop" of eval_speed_popl10_fig2_2_start/4 
* CEs [10] --> Loop 8 
* CEs [9] --> Loop 9 

#### Loops of eval_speed_popl10_fig2_2_start/4 
* Loop 8: eval_speed_popl10_fig2_2_start(V_x,V_z,V_n,B) [V_x>=V_n] 
* Loop 9: eval_speed_popl10_fig2_2_start(V_x,V_z,V_n,B) [V_n>=V_x+1] 

### Ranking functions of CR eval_speed_popl10_fig2_2_start(V_x,V_z,V_n,B) 

#### Partial ranking functions of CR eval_speed_popl10_fig2_2_start(V_x,V_z,V_n,B) 


### Resulting Chains:eval_speed_popl10_fig2_2_start(V_x,V_z,V_n,B) 
* [9]
* [8]


Computing Bounds
=====================================

#### Cost of loops [5,6] 

 * loop 5:eval_speed_popl10_fig2_2_bb1_in(V_n,V__01,V__0,B) -> [eval_speed_popl10_fig2_2_bb1_in(V_n',V__01',V__0',B')] 
1
 * loop 6:eval_speed_popl10_fig2_2_bb1_in(V_n,V__01,V__0,B) -> [eval_speed_popl10_fig2_2_bb1_in(V_n',V__01',V__0',B')] 
1
#### Cost of phase [5,6]:eval_speed_popl10_fig2_2_bb1_in(V_n,V__01,V__0,B) -> [eval_speed_popl10_fig2_2_bb1_in(V_n',V__01',V__0',B')] 
1*it(5)+1*it(6)+0
  Such that:it(6) =< V_n-V__01
it(6) =< V_n-V__01-V_n'+V__01'
it(5) =< V_n-V__0
it(5) =< V_n-V__0-V_n'+V__0'
it(6) >= V_n-V__01-V_n'+V__01'
it(5) >= V_n-V__0-V_n'+V__0'

#### Cost of chains of eval_speed_popl10_fig2_2_bb1_in(V_n,V__01,V__0,B):
* Chain [[5,6],7]: 1*it(5)+1*it(6)+0
  Such that:it(6) =< V_n-V__01
it(5) =< V_n-V__0
it(5) >= V_n-V__0

  with precondition: [B=2,V_n>=V__0+1] 

* Chain [7]: 0
  with precondition: [B=2,V__0>=V_n] 


#### Cost of chains of eval_speed_popl10_fig2_2_start(V_x,V_z,V_n,B):
* Chain [9]: 1*s(1)+1*s(2)+1
  Such that:s(2) =< -V_x+V_n
s(1) =< -V_z+V_n
s(2) >= -V_x+V_n

  with precondition: [V_n>=V_x+1] 

* Chain [8]: 1
  with precondition: [V_x>=V_n] 


Closed-form bounds of eval_speed_popl10_fig2_2_start(V_x,V_z,V_n,B): 
-------------------------------------
* Chain [9] with precondition: [V_n>=V_x+1] 
    - Lower bound: -V_x+V_n+1 
    - Complexity: n
 * Chain [8] with precondition: [V_x>=V_n] 
    - Lower bound: 1 
    - Complexity: constant
 
### Partitioned lower bound of eval_speed_popl10_fig2_2_start(V_x,V_z,V_n,B): 
* 1 
 if [V_x>=V_n]
* -V_x+V_n+1 
 if [V_n>=V_x+1]
Possible lower bounds : [1,-V_x+V_n+1]
Maximum lower bound complexity: n

Time statistics: 
-------------------------------------
* Partial evaluation computed in 44 ms.
* Invariants computed in 30 ms.
   - Backward Invariants 10 ms.
   - Transitive Invariants 10 ms.
* Refinement performed in 49 ms.
* Termination proved in 15 ms.
* Upper bounds computed in 64 ms.
   - Equation cost structures 16 ms.
   - Phase cost structures 31 ms.
   - Chain cost structures 16 ms.
   - Solving cost expressions 2 ms.
* Total analysis performed in 247 ms.


Warning: Ignored call to eval_realselect_stop/1 in equation eval_realselect_bb5_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_realselect_bb2_in/8,eval_realselect_bb3_in/9]
1. recursive : [eval_realselect_19/5,eval_realselect_20/5,eval_realselect_27/6,eval_realselect_28/6,eval_realselect_bb1_in/3,eval_realselect_bb4_in/5,loop_cont_eval_realselect_bb2_in/6]
2. non_recursive : [eval_realselect_bb5_in/1]
3. non_recursive : [loop_cont_eval_realselect_bb1_in/2]
4. non_recursive : [eval_realselect_6/2]
5. non_recursive : [eval_realselect_5/2]
6. non_recursive : [eval_realselect_4/2]
7. non_recursive : [eval_realselect_3/2]
8. non_recursive : [eval_realselect_2/2]
9. non_recursive : [eval_realselect_1/2]
10. non_recursive : [eval_realselect_0/2]
11. non_recursive : [eval_realselect_bb0_in/2]
12. non_recursive : [eval_realselect_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_realselect_bb2_in/8
1. SCC is partially evaluated into eval_realselect_bb1_in/3
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into eval_realselect_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_realselect_bb2_in/8 
* CE 6 is refined into CE [7] 
* CE 5 is refined into CE [8] 


#### Refined cost equations eval_realselect_bb2_in/8 
* CE 7: eval_realselect_bb2_in(A,B,C,D,A,B,C,E) = 0
     [A>=B+2,C+1>=A,C+1=E,D=2] 
* CE 8: eval_realselect_bb2_in(V_array_size,V_i_0,V_j_0_sink,B,C,D,E,F) = 1+ eval_realselect_bb2_in(V_array_size,V_i_0,G,H,C,D,E,F)
     [V_array_size>=V_j_0_sink+2,V_j_0_sink>=V_i_0,V_j_0_sink+1=G,H=2,B=2] 

### Cost equations --> "Loop" of eval_realselect_bb2_in/8 
* CEs [8] --> Loop 6 
* CEs [7] --> Loop 7 

#### Loops of eval_realselect_bb2_in/8 
* Loop 6: eval_realselect_bb2_in(V_array_size,V_i_0,V_j_0_sink,B,C,D,E,F)->  eval_realselect_bb2_in(V_array_size,V_i_0,V_j_0_sink',B',C,D,E,F)
                  [V_array_size>=V_j_0_sink+2,V_j_0_sink>=V_i_0,V_j_0_sink+1=V_j_0_sink',B'=2,B=2] 
* Loop 7: eval_realselect_bb2_in(A,B,C,D,A,B,C,E) [A>=B+2,C+1>=A,C+1=E,D=2] 

### Ranking functions of CR eval_realselect_bb2_in(V_array_size,V_i_0,V_j_0_sink,B,C,D,E,F) 
* RF of phase [6]: [V_array_size-V_j_0_sink-1]

#### Partial ranking functions of CR eval_realselect_bb2_in(V_array_size,V_i_0,V_j_0_sink,B,C,D,E,F) 
* Partial RF of phase [6]:
  - RF of loop [6:1]:
    V_array_size-V_j_0_sink-1


### Resulting Chains:eval_realselect_bb2_in(V_array_size,V_i_0,V_j_0_sink,B,C,D,E,F) 
* [[6],7]


### Specialization of cost equations eval_realselect_bb1_in/3 
* CE 4 is refined into CE [9] 
* CE 3 is refined into CE [10] 


#### Refined cost equations eval_realselect_bb1_in/3 
* CE 9: eval_realselect_bb1_in(V_array_size,V_i_0,B) = 0
     [V_i_0+1>=V_array_size,B=3] 
* CE 10: eval_realselect_bb1_in(V_array_size,V_i_0,B) = 2+ eval_realselect_bb2_in(V_array_size,V_i_0,V_i_0,C,V_array_size,V_i_0,D,V_array_size):[[6],7]+ eval_realselect_bb1_in(V_array_size,E,F)
     [V_array_size>=V_i_0+2,V_i_0+1=E,V_array_size=D+1,F=3,C=2,B=3] 

### Cost equations --> "Loop" of eval_realselect_bb1_in/3 
* CEs [10] --> Loop 8 
* CEs [9] --> Loop 9 

#### Loops of eval_realselect_bb1_in/3 
* Loop 8: eval_realselect_bb1_in(V_array_size,V_i_0,B)->  eval_realselect_bb1_in(V_array_size,V_i_0',B')
                  [V_array_size>=V_i_0+2,V_i_0+1=V_i_0',B'=3,B=3] 
* Loop 9: eval_realselect_bb1_in(V_array_size,V_i_0,B) [V_i_0+1>=V_array_size,B=3] 

### Ranking functions of CR eval_realselect_bb1_in(V_array_size,V_i_0,B) 
* RF of phase [8]: [V_array_size-V_i_0-1]

#### Partial ranking functions of CR eval_realselect_bb1_in(V_array_size,V_i_0,B) 
* Partial RF of phase [8]:
  - RF of loop [8:1]:
    V_array_size-V_i_0-1


### Resulting Chains:eval_realselect_bb1_in(V_array_size,V_i_0,B) 
* [[8],9]
* [9]


### Specialization of cost equations eval_realselect_start/2 
* CE 2 is refined into CE [11,12] 


#### Refined cost equations eval_realselect_start/2 
* CE 11: eval_realselect_start(V_array_size,B) = 1+ eval_realselect_bb1_in(V_array_size,C,D):[[8],9]
     [V_array_size>=2,D=3,C=0] 
* CE 12: eval_realselect_start(V_array_size,B) = 1+ eval_realselect_bb1_in(V_array_size,C,D):[9]
     [1>=V_array_size,D=3,C=0] 

### Cost equations --> "Loop" of eval_realselect_start/2 
* CEs [11] --> Loop 10 
* CEs [12] --> Loop 11 

#### Loops of eval_realselect_start/2 
* Loop 10: eval_realselect_start(V_array_size,B) [V_array_size>=2] 
* Loop 11: eval_realselect_start(V_array_size,B) [1>=V_array_size] 

### Ranking functions of CR eval_realselect_start(V_array_size,B) 

#### Partial ranking functions of CR eval_realselect_start(V_array_size,B) 


### Resulting Chains:eval_realselect_start(V_array_size,B) 
* [11]
* [10]


Computing Bounds
=====================================

#### Cost of loops [6] 

 * loop 6:eval_realselect_bb2_in(V_array_size,V_i_0,V_j_0_sink,B,C,D,E,F) -> [eval_realselect_bb2_in(V_array_size',V_i_0',V_j_0_sink',B',C',D',E',F')] 
1
#### Cost of phase [6]:eval_realselect_bb2_in(V_array_size,V_i_0,V_j_0_sink,B,C,D,E,F) -> [eval_realselect_bb2_in(V_array_size',V_i_0',V_j_0_sink',B',C',D',E',F')] 
1*it(6)+0
  Such that:it(6) =< V_array_size-V_j_0_sink-1
it(6) =< V_array_size-V_j_0_sink-V_array_size'+V_j_0_sink'
it(6) >= V_array_size-V_j_0_sink-V_array_size'+V_j_0_sink'

#### Cost of chains of eval_realselect_bb2_in(V_array_size,V_i_0,V_j_0_sink,B,C,D,E,F):
* Chain [[6],7]: 1*it(6)+0
  Such that:it(6) =< V_array_size-V_j_0_sink-1
it(6) >= V_array_size-V_j_0_sink-1

  with precondition: [B=2,V_array_size=C,V_i_0=D,V_array_size=E+1,V_array_size=F,V_j_0_sink>=V_i_0,V_array_size>=V_j_0_sink+2] 


#### Cost of loops [8] 

 * loop 8:eval_realselect_bb1_in(V_array_size,V_i_0,B) -> [eval_realselect_bb1_in(V_array_size',V_i_0',B')] 
1*s(2)+2
  Such that:s(2) =< V_array_size'-V_i_0'
s(2) >= V_array_size-V_i_0'

#### Cost of phase [8]:eval_realselect_bb1_in(V_array_size,V_i_0,B) -> [eval_realselect_bb1_in(V_array_size',V_i_0',B')] 
2*it(8)+1*s(3)+0
  Such that:it(8) =< V_array_size-V_i_0-V_array_size'+V_i_0'
aux(4) =< V_array_size-V_i_0-1
it(8) =< aux(4)
s(3) =< it(8)*aux(4)
aux(1) =< it(8)
aux(2) >= V_array_size-V_i_0-1
it(8) >= V_array_size-V_i_0-V_array_size'+V_i_0'
aux(1) >= it(8)
s(3) >= aux(1)*aux(2)+aux(1)* (1/2)-aux(1)*aux(1)* (1/2)

#### Cost of chains of eval_realselect_bb1_in(V_array_size,V_i_0,B):
* Chain [[8],9]: 2*it(8)+1*s(3)+0
  Such that:aux(5) =< V_array_size-V_i_0-1
it(8) =< aux(5)
s(3) =< it(8)*aux(5)
aux(1) =< it(8)
aux(6) >= V_array_size-V_i_0-1
aux(6) >= aux(6)
it(8) >= aux(6)
aux(1) >= it(8)
s(3) >= aux(1)*aux(6)+aux(1)* (1/2)-aux(1)*aux(1)* (1/2)

  with precondition: [B=3,V_i_0>=0,V_array_size>=V_i_0+2] 

* Chain [9]: 0
  with precondition: [B=3,V_i_0>=0,V_i_0+1>=V_array_size] 


#### Cost of chains of eval_realselect_start(V_array_size,B):
* Chain [11]: 1
  with precondition: [1>=V_array_size] 

* Chain [10]: 2*s(6)+1*s(7)+1
  Such that:s(4) =< V_array_size-1
s(6) =< s(4)
s(7) =< s(6)*s(4)
s(8) =< s(6)
s(5) >= V_array_size-1
s(5) >= s(5)
s(6) >= s(5)
s(8) >= s(6)
s(7) >= s(8)*s(5)+s(8)* (1/2)-s(8)*s(8)* (1/2)

  with precondition: [V_array_size>=2] 


Closed-form bounds of eval_realselect_start(V_array_size,B): 
-------------------------------------
* Chain [11] with precondition: [1>=V_array_size] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [10] with precondition: [V_array_size>=2] 
    - Lower bound: 5/2*V_array_size-3/2+ (V_array_size/2-1/2)* (V_array_size-1) 
    - Complexity: n^2
 
### Partitioned lower bound of eval_realselect_start(V_array_size,B): 
* 1 
 if [1>=V_array_size]
* 5/2*V_array_size-3/2+ (V_array_size/2-1/2)* (V_array_size-1) 
 if [V_array_size>=2]
Possible lower bounds : [1,5/2*V_array_size-3/2+ (V_array_size/2-1/2)* (V_array_size-1)]
Maximum lower bound complexity: n^2

Time statistics: 
-------------------------------------
* Partial evaluation computed in 48 ms.
* Invariants computed in 59 ms.
   - Backward Invariants 26 ms.
   - Transitive Invariants 17 ms.
* Refinement performed in 66 ms.
* Termination proved in 15 ms.
* Upper bounds computed in 117 ms.
   - Equation cost structures 28 ms.
   - Phase cost structures 57 ms.
   - Chain cost structures 37 ms.
   - Solving cost expressions 3 ms.
* Total analysis performed in 373 ms.


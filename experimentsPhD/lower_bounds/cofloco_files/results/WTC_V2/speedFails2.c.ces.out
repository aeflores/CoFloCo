Warning: Ignored call to eval_speedFails2_stop/1 in equation eval_speedFails2_bb3_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_speedFails2_bb1_in/3,eval_speedFails2_bb2_in/3]
1. non_recursive : [eval_speedFails2_bb3_in/1]
2. non_recursive : [loop_cont_eval_speedFails2_bb1_in/2]
3. non_recursive : [eval_speedFails2_4/3]
4. non_recursive : [eval_speedFails2_3/3]
5. non_recursive : [eval_speedFails2_2/3]
6. non_recursive : [eval_speedFails2_1/3]
7. non_recursive : [eval_speedFails2_0/3]
8. non_recursive : [eval_speedFails2_bb0_in/3]
9. non_recursive : [eval_speedFails2_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_speedFails2_bb1_in/3
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into eval_speedFails2_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_speedFails2_bb1_in/3 
* CE 5 is refined into CE [6] 
* CE 4 is refined into CE [7] 
* CE 3 is refined into CE [8] 


#### Refined cost equations eval_speedFails2_bb1_in/3 
* CE 6: eval_speedFails2_bb1_in(A,A,B) = 0
     [B=2] 
* CE 7: eval_speedFails2_bb1_in(V_n,V_i_0,B) = 1+ eval_speedFails2_bb1_in(V_n,C,D)
     [V_n>=V_i_0+1,V_i_0+1=C,D=2,B=2] 
* CE 8: eval_speedFails2_bb1_in(V_n,V_i_0,B) = 1+ eval_speedFails2_bb1_in(V_n,C,D)
     [V_i_0>=V_n+1,V_i_0+1=C,D=2,B=2] 

### Cost equations --> "Loop" of eval_speedFails2_bb1_in/3 
* CEs [7] --> Loop 5 
* CEs [8] --> Loop 6 
* CEs [6] --> Loop 7 

#### Loops of eval_speedFails2_bb1_in/3 
* Loop 5: eval_speedFails2_bb1_in(V_n,V_i_0,B)->  eval_speedFails2_bb1_in(V_n,V_i_0',B')
                  [V_n>=V_i_0+1,V_i_0+1=V_i_0',B'=2,B=2] 
* Loop 6: eval_speedFails2_bb1_in(V_n,V_i_0,B)->  eval_speedFails2_bb1_in(V_n,V_i_0',B')
                  [V_i_0>=V_n+1,V_i_0+1=V_i_0',B'=2,B=2] 
* Loop 7: eval_speedFails2_bb1_in(A,A,B) [B=2] 

### Ranking functions of CR eval_speedFails2_bb1_in(V_n,V_i_0,B) 
* RF of phase [5]: [V_n-V_i_0]

#### Partial ranking functions of CR eval_speedFails2_bb1_in(V_n,V_i_0,B) 
* Partial RF of phase [5]:
  - RF of loop [5:1]:
    V_n-V_i_0


### Resulting Chains:eval_speedFails2_bb1_in(V_n,V_i_0,B) 
* [[6]]...
* [[5],7]
* [7]


### Specialization of cost equations eval_speedFails2_start/3 
* CE 2 is refined into CE [9,10,11] 


#### Refined cost equations eval_speedFails2_start/3 
* CE 9: eval_speedFails2_start(V_x,V_n,B) = 1+ eval_speedFails2_bb1_in(V_n,V_x,C):[[6]]
     [V_x>=V_n+1,C=2] 
* CE 10: eval_speedFails2_start(V_x,V_n,B) = 1+ eval_speedFails2_bb1_in(V_n,V_x,C):[[5],7]
     [V_n>=V_x+1,C=2] 
* CE 11: eval_speedFails2_start(A,A,B) = 1+ eval_speedFails2_bb1_in(A,A,C):[7]
     [C=2] 

### Cost equations --> "Loop" of eval_speedFails2_start/3 
* CEs [10] --> Loop 8 
* CEs [11] --> Loop 9 
* CEs [9] --> Loop 10 

#### Loops of eval_speedFails2_start/3 
* Loop 8: eval_speedFails2_start(V_x,V_n,B) [V_n>=V_x+1] 
* Loop 9: eval_speedFails2_start(A,A,B) [] 
* Loop 10: eval_speedFails2_start(V_x,V_n,B) [V_x>=V_n+1] 

### Ranking functions of CR eval_speedFails2_start(V_x,V_n,B) 

#### Partial ranking functions of CR eval_speedFails2_start(V_x,V_n,B) 


### Resulting Chains:eval_speedFails2_start(V_x,V_n,B) 
* [10]...
* [9]
* [8]


Computing Bounds
=====================================

#### Cost of loops [6] 

 * loop 6:eval_speedFails2_bb1_in(V_n,V_i_0,B) -> [eval_speedFails2_bb1_in(V_n',V_i_0',B')] 
1
#### Cost of phase [6]:eval_speedFails2_bb1_in(V_n,V_i_0,B) -> [eval_speedFails2_bb1_in(V_n',V_i_0',B')] 
1*it(6)+0
#### Cost of loops [5] 

 * loop 5:eval_speedFails2_bb1_in(V_n,V_i_0,B) -> [eval_speedFails2_bb1_in(V_n',V_i_0',B')] 
1
#### Cost of phase [5]:eval_speedFails2_bb1_in(V_n,V_i_0,B) -> [eval_speedFails2_bb1_in(V_n',V_i_0',B')] 
1*it(5)+0
  Such that:it(5) =< V_n-V_i_0
it(5) =< V_n-V_i_0-V_n'+V_i_0'
it(5) >= V_n-V_i_0-V_n'+V_i_0'

#### Cost of chains of eval_speedFails2_bb1_in(V_n,V_i_0,B):
* Chain [[6]]...: 1*it(6)+0
  with precondition: [V_i_0>=V_n+1,B=2] 

* Chain [[5],7]: 1*it(5)+0
  Such that:it(5) =< V_n-V_i_0
it(5) >= V_n-V_i_0

  with precondition: [B=2,V_n>=V_i_0+1] 

* Chain [7]: 0
  with precondition: [B=2,V_i_0=V_n] 


#### Cost of chains of eval_speedFails2_start(V_x,V_n,B):
* Chain [10]...: 1*s(1)+1
  with precondition: [V_x>=V_n+1] 

* Chain [9]: 1
  with precondition: [V_n=V_x] 

* Chain [8]: 1*s(2)+1
  Such that:s(2) =< -V_x+V_n
s(2) >= -V_x+V_n

  with precondition: [V_n>=V_x+1] 


Closed-form bounds of eval_speedFails2_start(V_x,V_n,B): 
-------------------------------------
* Chain [10]... with precondition: [V_x>=V_n+1] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [9] with precondition: [V_n=V_x] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [8] with precondition: [V_n>=V_x+1] 
    - Lower bound: -V_x+V_n+1 
    - Complexity: n
 
### Partitioned lower bound of eval_speedFails2_start(V_x,V_n,B): 
* 1 
 if [V_x>=V_n]
* -V_x+V_n+1 
 if [V_n>=V_x+1]
Possible lower bounds : [1,-V_x+V_n+1]
Maximum lower bound complexity: n

Time statistics: 
-------------------------------------
* Partial evaluation computed in 22 ms.
* Invariants computed in 26 ms.
   - Backward Invariants 9 ms.
   - Transitive Invariants 8 ms.
* Refinement performed in 39 ms.
* Termination proved in 8 ms.
* Upper bounds computed in 44 ms.
   - Equation cost structures 14 ms.
   - Phase cost structures 14 ms.
   - Chain cost structures 12 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 174 ms.


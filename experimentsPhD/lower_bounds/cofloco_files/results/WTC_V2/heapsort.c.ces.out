Warning: Ignored call to eval_heapsort_stop/1 in equation eval_heapsort_bb11_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_heapsort_14/5,eval_heapsort_15/6,eval_heapsort_17/6,eval_heapsort_18/7,eval_heapsort_bb10_in/7,eval_heapsort_bb1_in/3,eval_heapsort_bb2_in/3,eval_heapsort_bb3_in/5,eval_heapsort_bb4_in/5,eval_heapsort_bb5_in/6,eval_heapsort_bb6_in/6,eval_heapsort_bb7_in/6,eval_heapsort_bb8_in/7,eval_heapsort_bb9_in/7]
1. non_recursive : [eval_heapsort_bb11_in/1]
2. non_recursive : [loop_cont_eval_heapsort_bb1_in/2]
3. non_recursive : [eval_heapsort_9/2]
4. non_recursive : [eval_heapsort_8/2]
5. non_recursive : [eval_heapsort_7/2]
6. non_recursive : [eval_heapsort_6/2]
7. non_recursive : [eval_heapsort_5/2]
8. non_recursive : [eval_heapsort_4/2]
9. non_recursive : [eval_heapsort_3/2]
10. non_recursive : [eval_heapsort_2/2]
11. non_recursive : [eval_heapsort_1/2]
12. non_recursive : [eval_heapsort_0/2]
13. non_recursive : [eval_heapsort_bb0_in/2]
14. non_recursive : [eval_heapsort_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_heapsort_bb1_in/3
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is partially evaluated into eval_heapsort_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_heapsort_bb1_in/3 
* CE 7 is refined into CE [11] 
* CE 3 is refined into CE [12] 
* CE 10 is discarded (unfeasible) 
* CE 9 is refined into CE [13] 
* CE 5 is refined into CE [14] 
* CE 6 is refined into CE [15] 
* CE 8 is refined into CE [16] 
* CE 4 is refined into CE [17] 


#### Refined cost equations eval_heapsort_bb1_in/3 
* CE 11: eval_heapsort_bb1_in(V_size,V_i_0,B) = 0
     [V_size>=2*V_i_0+1,V_i_0>=1,B=2] 
* CE 12: eval_heapsort_bb1_in(V_size,V_i_0,B) = 0
     [2*V_i_0>=V_size+1,V_size>=1,B=2] 
* CE 13: eval_heapsort_bb1_in(V_size,V_i_0,B) = 0
     [0>=V_size,B=2,V_i_0=1] 
* CE 14: eval_heapsort_bb1_in(V_size,V_i_0,B) = 0
     [V_size>=2,V_size=2*V_i_0,B=2] 
* CE 15: eval_heapsort_bb1_in(V_size,V_i_0,B) = 1+ eval_heapsort_bb1_in(V_size,C,D)
     [V_size>=C,C>=3,C=2*V_i_0+1,D=2,B=2] 
* CE 16: eval_heapsort_bb1_in(V_size,V_i_0,B) = 1+ eval_heapsort_bb1_in(V_size,C,D)
     [V_size>=C+1,C>=2,C=2*V_i_0,D=2,B=2] 
* CE 17: eval_heapsort_bb1_in(V_size,V_i_0,B) = 1+ eval_heapsort_bb1_in(V_size,V_size,C)
     [V_size>=2,V_size=2*V_i_0,C=2,B=2] 

### Cost equations --> "Loop" of eval_heapsort_bb1_in/3 
* CEs [15] --> Loop 10 
* CEs [16] --> Loop 11 
* CEs [17] --> Loop 12 
* CEs [11] --> Loop 13 
* CEs [12] --> Loop 14 
* CEs [14] --> Loop 15 
* CEs [13] --> Loop 16 

#### Loops of eval_heapsort_bb1_in/3 
* Loop 10: eval_heapsort_bb1_in(V_size,V_i_0,B)->  eval_heapsort_bb1_in(V_size,V_i_0',B')
                  [V_size>=V_i_0',V_i_0'>=3,V_i_0'=2*V_i_0+1,B'=2,B=2] 
* Loop 11: eval_heapsort_bb1_in(V_size,V_i_0,B)->  eval_heapsort_bb1_in(V_size,V_i_0',B')
                  [V_size>=V_i_0'+1,V_i_0'>=2,V_i_0'=2*V_i_0,B'=2,B=2] 
* Loop 12: eval_heapsort_bb1_in(V_size,V_i_0,B)->  eval_heapsort_bb1_in(V_size,V_size,A')
                  [V_size>=2,V_size=2*V_i_0,A'=2,B=2] 
* Loop 13: eval_heapsort_bb1_in(V_size,V_i_0,B) [V_size>=2*V_i_0+1,V_i_0>=1,B=2] 
* Loop 14: eval_heapsort_bb1_in(V_size,V_i_0,B) [2*V_i_0>=V_size+1,V_size>=1,B=2] 
* Loop 15: eval_heapsort_bb1_in(V_size,V_i_0,B) [V_size>=2,V_size=2*V_i_0,B=2] 
* Loop 16: eval_heapsort_bb1_in(V_size,V_i_0,B) [0>=V_size,B=2,V_i_0=1] 

### Ranking functions of CR eval_heapsort_bb1_in(V_size,V_i_0,B) 
* RF of phase [10,11]: [V_size/2-V_i_0]

#### Partial ranking functions of CR eval_heapsort_bb1_in(V_size,V_i_0,B) 
* Partial RF of phase [10,11]:
  - RF of loop [10:1]:
    V_size/4-V_i_0/2
  - RF of loop [11:1]:
    V_size/2-V_i_0


### Resulting Chains:eval_heapsort_bb1_in(V_size,V_i_0,B) 
* [[10,11],15]
* [[10,11],14]
* [[10,11],13]
* [[10,11],12,14]
* [16]
* [15]
* [14]
* [13]
* [12,14]


### Specialization of cost equations eval_heapsort_start/2 
* CE 2 is refined into CE [18,19,20,21,22,23,24,25,26] 


#### Refined cost equations eval_heapsort_start/2 
* CE 18: eval_heapsort_start(V_size,B) = 1+ eval_heapsort_bb1_in(V_size,C,D):[[10,11],15]
     [V_size>=4,D=2,C=1] 
* CE 19: eval_heapsort_start(V_size,B) = 1+ eval_heapsort_bb1_in(V_size,C,D):[[10,11],14]
     [V_size>=3,D=2,C=1] 
* CE 20: eval_heapsort_start(V_size,B) = 1+ eval_heapsort_bb1_in(V_size,C,D):[[10,11],13]
     [V_size>=5,D=2,C=1] 
* CE 21: eval_heapsort_start(V_size,B) = 1+ eval_heapsort_bb1_in(V_size,C,D):[[10,11],12,14]
     [V_size>=4,D=2,C=1] 
* CE 22: eval_heapsort_start(V_size,B) = 1+ eval_heapsort_bb1_in(V_size,C,D):[16]
     [0>=V_size,D=2,C=1] 
* CE 23: eval_heapsort_start(V_size,B) = 1+ eval_heapsort_bb1_in(C,D,E):[15]
     [E=2,D=1,C=2,V_size=2] 
* CE 24: eval_heapsort_start(V_size,B) = 1+ eval_heapsort_bb1_in(C,D,E):[14]
     [E=2,D=1,C=1,V_size=1] 
* CE 25: eval_heapsort_start(V_size,B) = 1+ eval_heapsort_bb1_in(V_size,C,D):[13]
     [V_size>=3,D=2,C=1] 
* CE 26: eval_heapsort_start(V_size,B) = 1+ eval_heapsort_bb1_in(C,D,E):[12,14]
     [E=2,D=1,C=2,V_size=2] 

### Cost equations --> "Loop" of eval_heapsort_start/2 
* CEs [20] --> Loop 17 
* CEs [21] --> Loop 18 
* CEs [18] --> Loop 19 
* CEs [25] --> Loop 20 
* CEs [19] --> Loop 21 
* CEs [22] --> Loop 22 
* CEs [26] --> Loop 23 
* CEs [23] --> Loop 24 
* CEs [24] --> Loop 25 

#### Loops of eval_heapsort_start/2 
* Loop 17: eval_heapsort_start(V_size,B) [V_size>=5] 
* Loop 18: eval_heapsort_start(V_size,B) [V_size>=4] 
* Loop 19: eval_heapsort_start(V_size,B) [V_size>=4] 
* Loop 20: eval_heapsort_start(V_size,B) [V_size>=3] 
* Loop 21: eval_heapsort_start(V_size,B) [V_size>=3] 
* Loop 22: eval_heapsort_start(V_size,B) [0>=V_size] 
* Loop 23: eval_heapsort_start(V_size,B) [V_size=2] 
* Loop 24: eval_heapsort_start(V_size,B) [V_size=2] 
* Loop 25: eval_heapsort_start(V_size,B) [V_size=1] 

### Ranking functions of CR eval_heapsort_start(V_size,B) 

#### Partial ranking functions of CR eval_heapsort_start(V_size,B) 


### Resulting Chains:eval_heapsort_start(V_size,B) 
* [25]
* [24]
* [23]
* [22]
* [21]
* [20]
* [19]
* [18]
* [17]


Computing Bounds
=====================================

#### Cost of loops [10,11] 

 * loop 10:eval_heapsort_bb1_in(V_size,V_i_0,B) -> [eval_heapsort_bb1_in(V_size',V_i_0',B')] 
1
 * loop 11:eval_heapsort_bb1_in(V_size,V_i_0,B) -> [eval_heapsort_bb1_in(V_size',V_i_0',B')] 
1
#### Cost of phase [10,11]:eval_heapsort_bb1_in(V_size,V_i_0,B) -> [eval_heapsort_bb1_in(V_size',V_i_0',B')] 
1*it(10)+1*it(11)+0
  Such that:it(10)+it(11) =< V_size/2-V_i_0-V_size'/2+V_i_0'
it(10) =< V_size/4-V_i_0/2
it(10) =< V_size/4-V_i_0/2-V_size'/4+V_i_0'/2
aux(1) =< V_size/2-V_i_0
it(10)+it(11) =< aux(1)

#### Cost of phase [10,11]:eval_heapsort_bb1_in(V_size,V_i_0,B) -> [eval_heapsort_bb1_in(V_size',V_i_0',B')] 
1*it(10)+1*it(11)+0
  Such that:it(10)+it(11) =< V_size/2-V_i_0-V_size'/2+V_i_0'
it(10) =< V_size/4-V_i_0/2
it(10) =< V_size/4-V_i_0/2-V_size'/4+V_i_0'/2
aux(1) =< V_size/2-V_i_0
it(10)+it(11) =< aux(1)

#### Cost of phase [10,11]:eval_heapsort_bb1_in(V_size,V_i_0,B) -> [eval_heapsort_bb1_in(V_size',V_i_0',B')] 
1*it(10)+1*it(11)+0
  Such that:it(10)+it(11) =< V_size/2-V_i_0-V_size'/2+V_i_0'
it(10) =< V_size/4-V_i_0/2
it(10) =< V_size/4-V_i_0/2-V_size'/4+V_i_0'/2
aux(1) =< V_size/2-V_i_0
it(10)+it(11) =< aux(1)

#### Cost of phase [10,11]:eval_heapsort_bb1_in(V_size,V_i_0,B) -> [eval_heapsort_bb1_in(V_size',V_i_0',B')] 
1*it(10)+1*it(11)+0
  Such that:it(10)+it(11) =< V_size/2-V_i_0-V_size'/2+V_i_0'
it(10) =< V_size/4-V_i_0/2
it(10) =< V_size/4-V_i_0/2-V_size'/4+V_i_0'/2
aux(1) =< V_size/2-V_i_0
it(10)+it(11) =< aux(1)

#### Cost of chains of eval_heapsort_bb1_in(V_size,V_i_0,B):
* Chain [[10,11],15]: 1*it(10)+1*it(11)+0
  Such that:it(10) =< V_size/4-V_i_0/2
aux(2) =< V_size/2-V_i_0
it(10)+it(11) =< aux(2)

  with precondition: [B=2,V_i_0>=1,V_size>=4*V_i_0] 

* Chain [[10,11],14]: 1*it(10)+1*it(11)+0
  Such that:it(11)+it(10) =< V_size-V_i_0
aux(1) =< V_size/2-V_i_0
it(10) =< V_size/4-V_i_0/2
it(10)+it(11) =< aux(1)

  with precondition: [B=2,V_i_0>=1,V_size>=2*V_i_0+1] 

* Chain [[10,11],13]: 1*it(10)+1*it(11)+0
  Such that:aux(1) =< V_size/2-V_i_0
it(11)+it(10) =< V_size/2-V_i_0-1/2
it(10) =< V_size/4-V_i_0/2-1/4
it(10)+it(11) =< aux(1)

  with precondition: [B=2,V_i_0>=1,V_size>=4*V_i_0+1] 

* Chain [[10,11],12,14]: 1*it(10)+1*it(11)+1
  Such that:it(10) =< V_size/4-V_i_0/2
aux(3) =< V_size/2-V_i_0
it(10)+it(11) =< aux(3)

  with precondition: [B=2,V_i_0>=1,V_size>=4*V_i_0] 

* Chain [16]: 0
  with precondition: [V_i_0=1,B=2,0>=V_size] 

* Chain [15]: 0
  with precondition: [B=2,2*V_i_0=V_size,V_i_0>=1] 

* Chain [14]: 0
  with precondition: [B=2,V_size>=1,2*V_i_0>=V_size+1] 

* Chain [13]: 0
  with precondition: [B=2,V_i_0>=1,V_size>=2*V_i_0+1] 

* Chain [12,14]: 1
  with precondition: [B=2,V_size=2*V_i_0,V_size>=2] 


#### Cost of chains of eval_heapsort_start(V_size,B):
* Chain [25]: 1
  with precondition: [V_size=1] 

* Chain [24]: 1
  with precondition: [V_size=2] 

* Chain [23]: 2
  with precondition: [V_size=2] 

* Chain [22]: 1
  with precondition: [0>=V_size] 

* Chain [21]: 1*s(1)+1*s(2)+1
  Such that:s(2)+s(1) =< V_size-1
s(3) =< V_size/2-1
s(1)+s(2) =< s(3)

  with precondition: [V_size>=3] 

* Chain [20]: 1
  with precondition: [V_size>=3] 

* Chain [19]: 1*s(4)+1*s(6)+1
  Such that:s(5) =< V_size/2-1
s(4) =< V_size/4-1/2
s(4)+s(6) =< s(5)

  with precondition: [V_size>=4] 

* Chain [18]: 1*s(7)+1*s(9)+2
  Such that:s(8) =< V_size/2-1
s(7) =< V_size/4-1/2
s(7)+s(9) =< s(8)

  with precondition: [V_size>=4] 

* Chain [17]: 1*s(11)+1*s(12)+1
  Such that:s(10) =< V_size/2-1
s(12)+s(11) =< V_size/2-3/2
s(11)+s(12) =< s(10)

  with precondition: [V_size>=5] 


Closed-form bounds of eval_heapsort_start(V_size,B): 
-------------------------------------
* Chain [25] with precondition: [V_size=1] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [24] with precondition: [V_size=2] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [23] with precondition: [V_size=2] 
    - Lower bound: 2 
    - Complexity: constant
 * Chain [22] with precondition: [0>=V_size] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [21] with precondition: [V_size>=3] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [20] with precondition: [V_size>=3] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [19] with precondition: [V_size>=4] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [18] with precondition: [V_size>=4] 
    - Lower bound: 2 
    - Complexity: constant
 * Chain [17] with precondition: [V_size>=5] 
    - Lower bound: 1 
    - Complexity: constant
 
### Partitioned lower bound of eval_heapsort_start(V_size,B): 
* 1 
 if []
Possible lower bounds : [1]
Maximum lower bound complexity: constant

Time statistics: 
-------------------------------------
* Partial evaluation computed in 283 ms.
* Invariants computed in 86 ms.
   - Backward Invariants 50 ms.
   - Transitive Invariants 12 ms.
* Refinement performed in 95 ms.
* Termination proved in 11 ms.
* Upper bounds computed in 138 ms.
   - Equation cost structures 34 ms.
   - Phase cost structures 26 ms.
   - Chain cost structures 49 ms.
   - Solving cost expressions 5 ms.
* Total analysis performed in 736 ms.


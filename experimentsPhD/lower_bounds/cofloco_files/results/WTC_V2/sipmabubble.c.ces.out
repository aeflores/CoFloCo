Warning: Ignored call to eval_sipmabubble_stop/1 in equation eval_sipmabubble_bb7_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_sipmabubble_bb2_in/5,eval_sipmabubble_bb3_in/5,eval_sipmabubble_bb4_in/5,eval_sipmabubble_bb5_in/5]
1. recursive : [eval_sipmabubble_29/4,eval_sipmabubble_30/4,eval_sipmabubble_bb1_in/2,eval_sipmabubble_bb6_in/3,loop_cont_eval_sipmabubble_bb2_in/4]
2. non_recursive : [eval_sipmabubble_bb7_in/1]
3. non_recursive : [loop_cont_eval_sipmabubble_bb1_in/2]
4. non_recursive : [eval_sipmabubble_6/2]
5. non_recursive : [eval_sipmabubble_5/2]
6. non_recursive : [eval_sipmabubble_4/2]
7. non_recursive : [eval_sipmabubble_3/2]
8. non_recursive : [eval_sipmabubble_2/2]
9. non_recursive : [eval_sipmabubble_1/2]
10. non_recursive : [eval_sipmabubble_0/2]
11. non_recursive : [eval_sipmabubble_bb0_in/2]
12. non_recursive : [eval_sipmabubble_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_sipmabubble_bb2_in/5
1. SCC is partially evaluated into eval_sipmabubble_bb1_in/2
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into eval_sipmabubble_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_sipmabubble_bb2_in/5 
* CE 6 is refined into CE [7] 
* CE 5 is refined into CE [8] 


#### Refined cost equations eval_sipmabubble_bb2_in/5 
* CE 7: eval_sipmabubble_bb2_in(A,A,B,A,A) = 0
     [A>=0,B=2] 
* CE 8: eval_sipmabubble_bb2_in(V_i_0,V_j_0,B,C,D) = 1+ eval_sipmabubble_bb2_in(V_i_0,E,F,C,D)
     [V_i_0>=V_j_0+1,V_j_0>=0,V_j_0+1=E,F=2,B=2] 

### Cost equations --> "Loop" of eval_sipmabubble_bb2_in/5 
* CEs [8] --> Loop 6 
* CEs [7] --> Loop 7 

#### Loops of eval_sipmabubble_bb2_in/5 
* Loop 6: eval_sipmabubble_bb2_in(V_i_0,V_j_0,B,C,D)->  eval_sipmabubble_bb2_in(V_i_0,V_j_0',B',C,D)
                  [V_i_0>=V_j_0+1,V_j_0>=0,V_j_0+1=V_j_0',B'=2,B=2] 
* Loop 7: eval_sipmabubble_bb2_in(A,A,B,A,A) [A>=0,B=2] 

### Ranking functions of CR eval_sipmabubble_bb2_in(V_i_0,V_j_0,B,C,D) 
* RF of phase [6]: [V_i_0-V_j_0]

#### Partial ranking functions of CR eval_sipmabubble_bb2_in(V_i_0,V_j_0,B,C,D) 
* Partial RF of phase [6]:
  - RF of loop [6:1]:
    V_i_0-V_j_0


### Resulting Chains:eval_sipmabubble_bb2_in(V_i_0,V_j_0,B,C,D) 
* [[6],7]
* [7]


### Specialization of cost equations eval_sipmabubble_bb1_in/2 
* CE 4 is refined into CE [9] 
* CE 3 is refined into CE [10,11] 


#### Refined cost equations eval_sipmabubble_bb1_in/2 
* CE 9: eval_sipmabubble_bb1_in(V_i_0,B) = 0
     [0>=V_i_0+1,B=3] 
* CE 10: eval_sipmabubble_bb1_in(V_i_0,B) = 2+ eval_sipmabubble_bb2_in(V_i_0,C,D,V_i_0,V_i_0):[[6],7]+ eval_sipmabubble_bb1_in(E,F)
     [V_i_0>=1,V_i_0=E+1,F=3,D=2,C=0,B=3] 
* CE 11: eval_sipmabubble_bb1_in(V_i_0,B) = 2+ eval_sipmabubble_bb2_in(C,D,E,F,G):[7]+ eval_sipmabubble_bb1_in(H,I)
     [I=3,H+1=0,G=0,F=0,E=2,D=0,C=0,B=3,V_i_0=0] 

### Cost equations --> "Loop" of eval_sipmabubble_bb1_in/2 
* CEs [10] --> Loop 8 
* CEs [11] --> Loop 9 
* CEs [9] --> Loop 10 

#### Loops of eval_sipmabubble_bb1_in/2 
* Loop 8: eval_sipmabubble_bb1_in(V_i_0,B)->  eval_sipmabubble_bb1_in(V_i_0',B')
                  [V_i_0>=1,V_i_0=V_i_0'+1,B'=3,B=3] 
* Loop 9: eval_sipmabubble_bb1_in(V_i_0,B)->  eval_sipmabubble_bb1_in(V_i_0',B')
                  [B'=3,V_i_0'+1=0,B=3,V_i_0=0] 
* Loop 10: eval_sipmabubble_bb1_in(V_i_0,B) [0>=V_i_0+1,B=3] 

### Ranking functions of CR eval_sipmabubble_bb1_in(V_i_0,B) 
* RF of phase [8]: [V_i_0]

#### Partial ranking functions of CR eval_sipmabubble_bb1_in(V_i_0,B) 
* Partial RF of phase [8]:
  - RF of loop [8:1]:
    V_i_0


### Resulting Chains:eval_sipmabubble_bb1_in(V_i_0,B) 
* [[8],9,10]
* [10]
* [9,10]


### Specialization of cost equations eval_sipmabubble_start/2 
* CE 2 is refined into CE [12,13,14] 


#### Refined cost equations eval_sipmabubble_start/2 
* CE 12: eval_sipmabubble_start(V_n,B) = 1+ eval_sipmabubble_bb1_in(V_n,C):[[8],9,10]
     [V_n>=1,C=3] 
* CE 13: eval_sipmabubble_start(V_n,B) = 1+ eval_sipmabubble_bb1_in(V_n,C):[10]
     [0>=V_n+1,C=3] 
* CE 14: eval_sipmabubble_start(V_n,B) = 1+ eval_sipmabubble_bb1_in(C,D):[9,10]
     [D=3,C=0,V_n=0] 

### Cost equations --> "Loop" of eval_sipmabubble_start/2 
* CEs [12] --> Loop 11 
* CEs [13] --> Loop 12 
* CEs [14] --> Loop 13 

#### Loops of eval_sipmabubble_start/2 
* Loop 11: eval_sipmabubble_start(V_n,B) [V_n>=1] 
* Loop 12: eval_sipmabubble_start(V_n,B) [0>=V_n+1] 
* Loop 13: eval_sipmabubble_start(V_n,B) [V_n=0] 

### Ranking functions of CR eval_sipmabubble_start(V_n,B) 

#### Partial ranking functions of CR eval_sipmabubble_start(V_n,B) 


### Resulting Chains:eval_sipmabubble_start(V_n,B) 
* [13]
* [12]
* [11]


Computing Bounds
=====================================

#### Cost of loops [6] 

 * loop 6:eval_sipmabubble_bb2_in(V_i_0,V_j_0,B,C,D) -> [eval_sipmabubble_bb2_in(V_i_0',V_j_0',B',C',D')] 
1
#### Cost of phase [6]:eval_sipmabubble_bb2_in(V_i_0,V_j_0,B,C,D) -> [eval_sipmabubble_bb2_in(V_i_0',V_j_0',B',C',D')] 
1*it(6)+0
  Such that:it(6) =< V_i_0-V_j_0
it(6) =< V_i_0-V_j_0-V_i_0'+V_j_0'
it(6) >= V_i_0-V_j_0-V_i_0'+V_j_0'

#### Cost of chains of eval_sipmabubble_bb2_in(V_i_0,V_j_0,B,C,D):
* Chain [[6],7]: 1*it(6)+0
  Such that:it(6) =< -V_j_0+D
it(6) >= V_i_0-V_j_0

  with precondition: [B=2,V_i_0=C,V_i_0=D,V_j_0>=0,V_i_0>=V_j_0+1] 

* Chain [7]: 0
  with precondition: [B=2,V_j_0=V_i_0,V_j_0=C,V_j_0=D,V_j_0>=0] 


#### Cost of loops [8] 

 * loop 8:eval_sipmabubble_bb1_in(V_i_0,B) -> [eval_sipmabubble_bb1_in(V_i_0',B')] 
1*s(2)+2
  Such that:s(2) =< V_i_0
s(2) >= V_i_0

#### Cost of phase [8]:eval_sipmabubble_bb1_in(V_i_0,B) -> [eval_sipmabubble_bb1_in(V_i_0',B')] 
2*it(8)+1*s(3)+0
  Such that:it(8) =< V_i_0-V_i_0'
aux(4) =< V_i_0
it(8) =< aux(4)
s(3) =< it(8)*aux(4)
aux(1) =< it(8)
aux(2) >= V_i_0
it(8) >= V_i_0-V_i_0'
aux(1) >= it(8)
s(3) >= aux(1)*aux(2)+aux(1)* (1/2)-aux(1)*aux(1)* (1/2)

#### Cost of chains of eval_sipmabubble_bb1_in(V_i_0,B):
* Chain [[8],9,10]: 2*it(8)+1*s(3)+2
  Such that:aux(5) =< V_i_0
it(8) =< aux(5)
s(3) =< it(8)*aux(5)
aux(1) =< it(8)
aux(6) >= V_i_0
aux(6) >= aux(6)
it(8) >= aux(6)
aux(1) >= it(8)
s(3) >= aux(1)*aux(6)+aux(1)* (1/2)-aux(1)*aux(1)* (1/2)

  with precondition: [B=3,V_i_0>=1] 

* Chain [10]: 0
  with precondition: [B=3,0>=V_i_0+1] 

* Chain [9,10]: 2
  with precondition: [V_i_0=0,B=3] 


#### Cost of chains of eval_sipmabubble_start(V_n,B):
* Chain [13]: 3
  with precondition: [V_n=0] 

* Chain [12]: 1
  with precondition: [0>=V_n+1] 

* Chain [11]: 2*s(6)+1*s(7)+3
  Such that:s(4) =< V_n
s(6) =< s(4)
s(7) =< s(6)*s(4)
s(8) =< s(6)
s(5) >= V_n
s(5) >= s(5)
s(6) >= s(5)
s(8) >= s(6)
s(7) >= s(8)*s(5)+s(8)* (1/2)-s(8)*s(8)* (1/2)

  with precondition: [V_n>=1] 


Closed-form bounds of eval_sipmabubble_start(V_n,B): 
-------------------------------------
* Chain [13] with precondition: [V_n=0] 
    - Lower bound: 3 
    - Complexity: constant
 * Chain [12] with precondition: [0>=V_n+1] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [11] with precondition: [V_n>=1] 
    - Lower bound: 5/2*V_n+3+V_n/2*V_n 
    - Complexity: n^2
 
### Partitioned lower bound of eval_sipmabubble_start(V_n,B): 
* 1 
 if [0>=V_n+1]
* 3 
 if [V_n=0]
* 5/2*V_n+3+V_n/2*V_n 
 if [V_n>=1]
Possible lower bounds : [1,3,5/2*V_n+3+V_n/2*V_n]
Maximum lower bound complexity: n^2

Time statistics: 
-------------------------------------
* Partial evaluation computed in 37 ms.
* Invariants computed in 53 ms.
   - Backward Invariants 25 ms.
   - Transitive Invariants 10 ms.
* Refinement performed in 52 ms.
* Termination proved in 12 ms.
* Upper bounds computed in 90 ms.
   - Equation cost structures 23 ms.
   - Phase cost structures 40 ms.
   - Chain cost structures 22 ms.
   - Solving cost expressions 3 ms.
* Total analysis performed in 306 ms.


Warning: Ignored call to eval_while2_stop/1 in equation eval_while2_bb5_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_while2_bb2_in/7,eval_while2_bb3_in/7]
1. recursive : [eval_while2_8/5,eval_while2_9/5,eval_while2_bb1_in/3,eval_while2_bb4_in/4,loop_cont_eval_while2_bb2_in/5]
2. non_recursive : [eval_while2_bb5_in/1]
3. non_recursive : [loop_cont_eval_while2_bb1_in/2]
4. non_recursive : [eval_while2_4/2]
5. non_recursive : [eval_while2_3/2]
6. non_recursive : [eval_while2_2/2]
7. non_recursive : [eval_while2_1/2]
8. non_recursive : [eval_while2_0/2]
9. non_recursive : [eval_while2_bb0_in/2]
10. non_recursive : [eval_while2_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_while2_bb2_in/7
1. SCC is partially evaluated into eval_while2_bb1_in/3
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is partially evaluated into eval_while2_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_while2_bb2_in/7 
* CE 6 is refined into CE [7] 
* CE 5 is refined into CE [8] 


#### Refined cost equations eval_while2_bb2_in/7 
* CE 7: eval_while2_bb2_in(A,B,C,D,A,B,C) = 0
     [A>=C,B>=1,0>=C,D=2] 
* CE 8: eval_while2_bb2_in(V_N,V_i_0,V_j_0,B,C,D,E) = 1+ eval_while2_bb2_in(V_N,V_i_0,F,G,C,D,E)
     [V_N>=V_j_0,V_j_0>=1,V_i_0>=1,V_j_0=F+1,G=2,B=2] 

### Cost equations --> "Loop" of eval_while2_bb2_in/7 
* CEs [8] --> Loop 6 
* CEs [7] --> Loop 7 

#### Loops of eval_while2_bb2_in/7 
* Loop 6: eval_while2_bb2_in(V_N,V_i_0,V_j_0,B,C,D,E)->  eval_while2_bb2_in(V_N,V_i_0,V_j_0',B',C,D,E)
                  [V_N>=V_j_0,V_j_0>=1,V_i_0>=1,V_j_0=V_j_0'+1,B'=2,B=2] 
* Loop 7: eval_while2_bb2_in(A,B,C,D,A,B,C) [A>=C,B>=1,0>=C,D=2] 

### Ranking functions of CR eval_while2_bb2_in(V_N,V_i_0,V_j_0,B,C,D,E) 
* RF of phase [6]: [V_j_0]

#### Partial ranking functions of CR eval_while2_bb2_in(V_N,V_i_0,V_j_0,B,C,D,E) 
* Partial RF of phase [6]:
  - RF of loop [6:1]:
    V_j_0


### Resulting Chains:eval_while2_bb2_in(V_N,V_i_0,V_j_0,B,C,D,E) 
* [[6],7]
* [7]


### Specialization of cost equations eval_while2_bb1_in/3 
* CE 4 is refined into CE [9] 
* CE 3 is refined into CE [10,11] 


#### Refined cost equations eval_while2_bb1_in/3 
* CE 9: eval_while2_bb1_in(V_N,V_i_0,B) = 0
     [0>=V_i_0,B=3] 
* CE 10: eval_while2_bb1_in(V_N,V_i_0,B) = 2+ eval_while2_bb2_in(V_N,V_i_0,V_N,C,V_N,V_i_0,D):[[6],7]+ eval_while2_bb1_in(V_N,E,F)
     [V_i_0>=1,V_N>=1,V_i_0=E+1,F=3,D=0,C=2,B=3] 
* CE 11: eval_while2_bb1_in(V_N,V_i_0,B) = 2+ eval_while2_bb2_in(V_N,V_i_0,V_N,C,V_N,V_i_0,V_N):[7]+ eval_while2_bb1_in(V_N,D,E)
     [V_i_0>=1,0>=V_N,V_i_0=D+1,E=3,C=2,B=3] 

### Cost equations --> "Loop" of eval_while2_bb1_in/3 
* CEs [10] --> Loop 8 
* CEs [11] --> Loop 9 
* CEs [9] --> Loop 10 

#### Loops of eval_while2_bb1_in/3 
* Loop 8: eval_while2_bb1_in(V_N,V_i_0,B)->  eval_while2_bb1_in(V_N,V_i_0',B')
                  [V_i_0>=1,V_N>=1,V_i_0=V_i_0'+1,B'=3,B=3] 
* Loop 9: eval_while2_bb1_in(V_N,V_i_0,B)->  eval_while2_bb1_in(V_N,V_i_0',B')
                  [V_i_0>=1,0>=V_N,V_i_0=V_i_0'+1,B'=3,B=3] 
* Loop 10: eval_while2_bb1_in(V_N,V_i_0,B) [0>=V_i_0,B=3] 

### Ranking functions of CR eval_while2_bb1_in(V_N,V_i_0,B) 
* RF of phase [8]: [V_i_0]

#### Partial ranking functions of CR eval_while2_bb1_in(V_N,V_i_0,B) 
* Partial RF of phase [8]:
  - RF of loop [8:1]:
    V_i_0


### Resulting Chains:eval_while2_bb1_in(V_N,V_i_0,B) 
* [[8],10]
* [10]


### Specialization of cost equations eval_while2_start/2 
* CE 2 is refined into CE [12,13] 


#### Refined cost equations eval_while2_start/2 
* CE 12: eval_while2_start(V_N,B) = 1+ eval_while2_bb1_in(V_N,V_N,C):[[8],10]
     [V_N>=1,C=3] 
* CE 13: eval_while2_start(V_N,B) = 1+ eval_while2_bb1_in(V_N,V_N,C):[10]
     [0>=V_N,C=3] 

### Cost equations --> "Loop" of eval_while2_start/2 
* CEs [12] --> Loop 11 
* CEs [13] --> Loop 12 

#### Loops of eval_while2_start/2 
* Loop 11: eval_while2_start(V_N,B) [V_N>=1] 
* Loop 12: eval_while2_start(V_N,B) [0>=V_N] 

### Ranking functions of CR eval_while2_start(V_N,B) 

#### Partial ranking functions of CR eval_while2_start(V_N,B) 


### Resulting Chains:eval_while2_start(V_N,B) 
* [12]
* [11]


Computing Bounds
=====================================

#### Cost of loops [6] 

 * loop 6:eval_while2_bb2_in(V_N,V_i_0,V_j_0,B,C,D,E) -> [eval_while2_bb2_in(V_N',V_i_0',V_j_0',B',C',D',E')] 
1
#### Cost of phase [6]:eval_while2_bb2_in(V_N,V_i_0,V_j_0,B,C,D,E) -> [eval_while2_bb2_in(V_N',V_i_0',V_j_0',B',C',D',E')] 
1*it(6)+0
  Such that:it(6) =< V_j_0
it(6) =< V_j_0-V_j_0'
it(6) >= V_j_0-V_j_0'

#### Cost of chains of eval_while2_bb2_in(V_N,V_i_0,V_j_0,B,C,D,E):
* Chain [[6],7]: 1*it(6)+0
  Such that:it(6) =< V_j_0
it(6) >= V_j_0

  with precondition: [B=2,E=0,V_N=C,V_i_0=D,V_i_0>=1,V_j_0>=1,V_N>=V_j_0] 

* Chain [7]: 0
  with precondition: [B=2,V_N=C,V_i_0=D,V_j_0=E,0>=V_j_0,V_i_0>=1,V_N>=V_j_0] 


#### Cost of loops [8] 

 * loop 8:eval_while2_bb1_in(V_N,V_i_0,B) -> [eval_while2_bb1_in(V_N',V_i_0',B')] 
1*s(2)+2
  Such that:s(2) =< V_N
s(2) >= V_N

#### Cost of phase [8]:eval_while2_bb1_in(V_N,V_i_0,B) -> [eval_while2_bb1_in(V_N',V_i_0',B')] 
2*it(8)+1*s(3)+0
  Such that:aux(2) =< V_N
it(8) =< V_i_0
it(8) =< V_i_0-V_i_0'
s(3) =< it(8)*aux(2)
aux(1) >= V_N
aux(3) >= V_i_0-V_i_0'
it(8) >= aux(3)
s(3) >= aux(3)
s(3) >= it(8)*aux(1)

#### Cost of chains of eval_while2_bb1_in(V_N,V_i_0,B):
* Chain [[8],10]: 2*it(8)+1*s(3)+0
  Such that:aux(2) =< V_N
it(8) =< V_i_0
s(3) =< it(8)*aux(2)
aux(1) >= V_N
aux(3) >= V_i_0
it(8) >= aux(3)
s(3) >= aux(3)
s(3) >= it(8)*aux(1)

  with precondition: [B=3,V_i_0>=1,V_N>=V_i_0] 

* Chain [10]: 0
  with precondition: [B=3,0>=V_i_0,V_N>=V_i_0] 


#### Cost of chains of eval_while2_start(V_N,B):
* Chain [12]: 1
  with precondition: [0>=V_N] 

* Chain [11]: 2*s(5)+1*s(8)+1
  Such that:aux(4) =< V_N
s(5) =< aux(4)
s(8) =< s(5)*aux(4)
aux(5) >= V_N
aux(5) >= aux(5)
s(5) >= aux(5)
s(8) >= aux(5)
s(8) >= s(5)*aux(5)

  with precondition: [V_N>=1] 


Closed-form bounds of eval_while2_start(V_N,B): 
-------------------------------------
* Chain [12] with precondition: [0>=V_N] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [11] with precondition: [V_N>=1] 
    - Lower bound: 2*V_N+1+V_N*V_N 
    - Complexity: n^2
 
### Partitioned lower bound of eval_while2_start(V_N,B): 
* 1 
 if [0>=V_N]
* 2*V_N+1+V_N*V_N 
 if [V_N>=1]
Possible lower bounds : [1,2*V_N+1+V_N*V_N]
Maximum lower bound complexity: n^2

Time statistics: 
-------------------------------------
* Partial evaluation computed in 36 ms.
* Invariants computed in 62 ms.
   - Backward Invariants 25 ms.
   - Transitive Invariants 16 ms.
* Refinement performed in 70 ms.
* Termination proved in 16 ms.
* Upper bounds computed in 107 ms.
   - Equation cost structures 25 ms.
   - Phase cost structures 55 ms.
   - Chain cost structures 29 ms.
   - Solving cost expressions 2 ms.
* Total analysis performed in 352 ms.


Warning: Ignored call to eval_counterex1a_stop/1 in equation eval_counterex1a__critedge_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_counterex1a_11/6,eval_counterex1a_12/7,eval_counterex1a_15/6,eval_counterex1a_16/7,eval_counterex1a_bb1_in/5,eval_counterex1a_bb2_in/5,eval_counterex1a_bb3_in/5,eval_counterex1a_bb4_in/5]
1. non_recursive : [eval_counterex1a__critedge_in/1]
2. non_recursive : [loop_cont_eval_counterex1a_bb1_in/2]
3. non_recursive : [eval_counterex1a_9/5]
4. non_recursive : [eval_counterex1a_8/5]
5. non_recursive : [eval_counterex1a_7/5]
6. non_recursive : [eval_counterex1a_6/5]
7. non_recursive : [eval_counterex1a_5/5]
8. non_recursive : [eval_counterex1a_4/5]
9. non_recursive : [eval_counterex1a_3/5]
10. non_recursive : [eval_counterex1a_2/5]
11. non_recursive : [eval_counterex1a_1/5]
12. non_recursive : [eval_counterex1a_0/5]
13. non_recursive : [eval_counterex1a_bb0_in/5]
14. non_recursive : [eval_counterex1a_start/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_counterex1a_bb1_in/5
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is partially evaluated into eval_counterex1a_start/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_counterex1a_bb1_in/5 
* CE 11 is refined into CE [12] 
* CE 9 is refined into CE [13] 
* CE 10 is refined into CE [14] 
* CE 8 is refined into CE [15] 
* CE 7 is refined into CE [16] 
* CE 6 is refined into CE [17] 
* CE 5 is refined into CE [18] 
* CE 3 is refined into CE [19] 
* CE 4 is refined into CE [20] 


#### Refined cost equations eval_counterex1a_bb1_in/5 
* CE 12: eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B) = 0
     [V__04>=V_n+1,B=2] 
* CE 13: eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B) = 0
     [0>=V__01+1,B=2] 
* CE 14: eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B) = 0
     [0>=V__04+1,B=2] 
* CE 15: eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B) = 1+ eval_counterex1a_bb1_in(V_n,C,V__01,V__0,D)
     [V_n>=V__04,V__0>=1,V__01>=0,V__04>=0,V__04=C+1,D=2,B=2] 
* CE 16: eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B) = 1+ eval_counterex1a_bb1_in(V_n,C,V__01,V__0,D)
     [V_n>=V__04,V__01>=0,V__04>=0,0>=V__0+1,V__04=C+1,D=2,B=2] 
* CE 17: eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B) = 1+ eval_counterex1a_bb1_in(V_n,C,D,E,F)
     [V_n>=V__04,V__0>=1,V__01>=0,V__04>=0,V__01=D+1,V__04=C+1,F=2,E=0,B=2] 
* CE 18: eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B) = 1+ eval_counterex1a_bb1_in(V_n,C,D,E,F)
     [V_n>=V__04,V__01>=0,V__04>=0,0>=V__0+1,V__01=D+1,V__04=C+1,F=2,E=0,B=2] 
* CE 19: eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B) = 1+ eval_counterex1a_bb1_in(V_n,C,V__01,D,E)
     [V_n>=V__04,V__01>=0,V__04>=0,V__04+1=C,E=2,D=1,B=2,V__0=0] 
* CE 20: eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B) = 1+ eval_counterex1a_bb1_in(V_n,C,V__01,D,E)
     [V_n>=V__04,V__01>=0,V__04>=0,V__04+1=C,E=2,D=0,B=2,V__0=0] 

### Cost equations --> "Loop" of eval_counterex1a_bb1_in/5 
* CEs [15] --> Loop 11 
* CEs [16] --> Loop 12 
* CEs [17] --> Loop 13 
* CEs [18] --> Loop 14 
* CEs [19] --> Loop 15 
* CEs [20] --> Loop 16 
* CEs [12] --> Loop 17 
* CEs [13] --> Loop 18 
* CEs [14] --> Loop 19 

#### Loops of eval_counterex1a_bb1_in/5 
* Loop 11: eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B)->  eval_counterex1a_bb1_in(V_n,V__04',V__01,V__0,B')
                  [V_n>=V__04,V__0>=1,V__01>=0,V__04>=0,V__04=V__04'+1,B'=2,B=2] 
* Loop 12: eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B)->  eval_counterex1a_bb1_in(V_n,V__04',V__01,V__0,B')
                  [V_n>=V__04,V__01>=0,V__04>=0,0>=V__0+1,V__04=V__04'+1,B'=2,B=2] 
* Loop 13: eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B)->  eval_counterex1a_bb1_in(V_n,V__04',V__01',V__0',B')
                  [V_n>=V__04,V__0>=1,V__01>=0,V__04>=0,V__01=V__01'+1,V__04=V__04'+1,B'=2,V__0'=0,B=2] 
* Loop 14: eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B)->  eval_counterex1a_bb1_in(V_n,V__04',V__01',V__0',B')
                  [V_n>=V__04,V__01>=0,V__04>=0,0>=V__0+1,V__01=V__01'+1,V__04=V__04'+1,B'=2,V__0'=0,B=2] 
* Loop 15: eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B)->  eval_counterex1a_bb1_in(V_n,V__04',V__01,V__0',B')
                  [V_n>=V__04,V__01>=0,V__04>=0,V__04+1=V__04',B'=2,V__0'=1,B=2,V__0=0] 
* Loop 16: eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B)->  eval_counterex1a_bb1_in(V_n,V__04',V__01,V__0',B')
                  [V_n>=V__04,V__01>=0,V__04>=0,V__04+1=V__04',B'=2,V__0'=0,B=2,V__0=0] 
* Loop 17: eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B) [V__04>=V_n+1,B=2] 
* Loop 18: eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B) [0>=V__01+1,B=2] 
* Loop 19: eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B) [0>=V__04+1,B=2] 

### Ranking functions of CR eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B) 
* RF of phase [12]: [V__04+1]

#### Partial ranking functions of CR eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B) 
* Partial RF of phase [11,13,15,16]:
  - RF of loop [11:1,13:1]:
    V__04+1 depends on loops [15:1,16:1] 
  - RF of loop [13:1]:
    V__0 depends on loops [15:1] 
    V__01+1
  - RF of loop [15:1]:
    -V__0+1 depends on loops [13:1] 
  - RF of loop [15:1,16:1]:
    V_n-V__04+1 depends on loops [11:1,13:1] 
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    V__04+1


### Resulting Chains:eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B) 
* [[12],19]
* [[12],14,[11,13,15,16]]...
* [[12],14,[11,13,15,16],19]
* [[12],14,[11,13,15,16],18]
* [[12],14,[11,13,15,16],17]
* [[12],14,19]
* [[12],14,18]
* [[11,13,15,16]]...
* [[11,13,15,16],19]
* [[11,13,15,16],18]
* [[11,13,15,16],17]
* [19]
* [18]
* [17]
* [14,[11,13,15,16]]...
* [14,[11,13,15,16],19]
* [14,[11,13,15,16],18]
* [14,[11,13,15,16],17]
* [14,19]
* [14,18]


### Specialization of cost equations eval_counterex1a_start/5 
* CE 2 is refined into CE [21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40] 


#### Refined cost equations eval_counterex1a_start/5 
* CE 21: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) = 1+ eval_counterex1a_bb1_in(V_n,V_y,V_x,V_b,C):[[12],19]
     [V_n>=V_y,V_x>=0,V_y>=0,0>=V_b+1,C=2] 
* CE 22: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) = 1+ eval_counterex1a_bb1_in(V_n,V_y,V_x,V_b,C):[[12],14,[11,13,15,16]]
     [V_n>=V_y,V_x>=1,V_y>=2,0>=V_b+1,C=2] 
* CE 23: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) = 1+ eval_counterex1a_bb1_in(V_n,V_y,V_x,V_b,C):[[12],14,[11,13,15,16],19]
     [V_n>=V_y,V_x>=1,V_y>=2,0>=V_b+1,C=2] 
* CE 24: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) = 1+ eval_counterex1a_bb1_in(V_n,V_y,V_x,V_b,C):[[12],14,[11,13,15,16],18]
     [V_n>=V_y,V_x>=1,V_y>=2,0>=V_b+1,C=2] 
* CE 25: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) = 1+ eval_counterex1a_bb1_in(V_n,V_y,V_x,V_b,C):[[12],14,[11,13,15,16],17]
     [V_n>=V_y,V_x>=1,V_y>=2,0>=V_b+1,C=2] 
* CE 26: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) = 1+ eval_counterex1a_bb1_in(V_n,V_y,V_x,V_b,C):[[12],14,19]
     [V_n>=V_y,V_x>=0,V_y>=1,0>=V_b+1,C=2] 
* CE 27: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) = 1+ eval_counterex1a_bb1_in(V_n,V_y,C,V_b,D):[[12],14,18]
     [V_n>=V_y,V_y>=1,0>=V_b+1,D=2,C=0,V_x=0] 
* CE 28: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) = 1+ eval_counterex1a_bb1_in(V_n,V_y,V_x,V_b,C):[[11,13,15,16]]
     [V_n>=V_y,V_b>=0,V_x>=0,V_y>=0,C=2] 
* CE 29: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) = 1+ eval_counterex1a_bb1_in(V_n,V_y,V_x,V_b,C):[[11,13,15,16],19]
     [V_n>=V_y,V_b>=0,V_x>=0,V_y>=0,C=2] 
* CE 30: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) = 1+ eval_counterex1a_bb1_in(V_n,V_y,V_x,V_b,C):[[11,13,15,16],18]
     [V_n+V_b>=V_y+1,V_n>=V_y,V_b>=0,V_x>=0,V_y>=0,C=2] 
* CE 31: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) = 1+ eval_counterex1a_bb1_in(V_n,V_y,V_x,V_b,C):[[11,13,15,16],17]
     [V_n>=V_y,V_b>=0,V_x>=0,V_y>=0,C=2] 
* CE 32: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) = 1+ eval_counterex1a_bb1_in(V_n,V_y,V_x,V_b,C):[19]
     [0>=V_y+1,C=2] 
* CE 33: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) = 1+ eval_counterex1a_bb1_in(V_n,V_y,V_x,V_b,C):[18]
     [0>=V_x+1,C=2] 
* CE 34: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) = 1+ eval_counterex1a_bb1_in(V_n,V_y,V_x,V_b,C):[17]
     [V_y>=V_n+1,C=2] 
* CE 35: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) = 1+ eval_counterex1a_bb1_in(V_n,V_y,V_x,V_b,C):[14,[11,13,15,16]]
     [V_n>=V_y,V_x>=1,V_y>=1,0>=V_b+1,C=2] 
* CE 36: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) = 1+ eval_counterex1a_bb1_in(V_n,V_y,V_x,V_b,C):[14,[11,13,15,16],19]
     [V_n>=V_y,V_x>=1,V_y>=1,0>=V_b+1,C=2] 
* CE 37: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) = 1+ eval_counterex1a_bb1_in(V_n,V_y,V_x,V_b,C):[14,[11,13,15,16],18]
     [V_n>=V_y,V_x>=1,V_y>=1,0>=V_b+1,C=2] 
* CE 38: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) = 1+ eval_counterex1a_bb1_in(V_n,V_y,V_x,V_b,C):[14,[11,13,15,16],17]
     [V_n>=V_y,V_x>=1,V_y>=1,0>=V_b+1,C=2] 
* CE 39: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) = 1+ eval_counterex1a_bb1_in(V_n,C,V_x,V_b,D):[14,19]
     [V_x>=0,V_n>=0,0>=V_b+1,D=2,C=0,V_y=0] 
* CE 40: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) = 1+ eval_counterex1a_bb1_in(V_n,V_y,C,V_b,D):[14,18]
     [V_n>=V_y,V_y>=0,0>=V_b+1,D=2,C=0,V_x=0] 

### Cost equations --> "Loop" of eval_counterex1a_start/5 
* CEs [34] --> Loop 20 
* CEs [30] --> Loop 21 
* CEs [31] --> Loop 22 
* CEs [29] --> Loop 23 
* CEs [32] --> Loop 24 
* CEs [33] --> Loop 25 
* CEs [25] --> Loop 26 
* CEs [24] --> Loop 27 
* CEs [23] --> Loop 28 
* CEs [38] --> Loop 29 
* CEs [37] --> Loop 30 
* CEs [36] --> Loop 31 
* CEs [26] --> Loop 32 
* CEs [21] --> Loop 33 
* CEs [39] --> Loop 34 
* CEs [27] --> Loop 35 
* CEs [40] --> Loop 36 
* CEs [28] --> Loop 37 
* CEs [22] --> Loop 38 
* CEs [35] --> Loop 39 

#### Loops of eval_counterex1a_start/5 
* Loop 20: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) [V_y>=V_n+1] 
* Loop 21: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) [V_n+V_b>=V_y+1,V_n>=V_y,V_y>=0,V_x>=0,V_b>=0] 
* Loop 22: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) [V_n>=V_y,V_y>=0,V_x>=0,V_b>=0] 
* Loop 23: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) [V_n>=V_y,V_y>=0,V_x>=0,V_b>=0] 
* Loop 24: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) [0>=V_y+1] 
* Loop 25: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) [0>=V_x+1] 
* Loop 26: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) [V_n>=V_y,V_y>=2,V_x>=1,0>=V_b+1] 
* Loop 27: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) [V_n>=V_y,V_y>=2,V_x>=1,0>=V_b+1] 
* Loop 28: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) [V_n>=V_y,V_y>=2,V_x>=1,0>=V_b+1] 
* Loop 29: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) [V_n>=V_y,V_y>=1,V_x>=1,0>=V_b+1] 
* Loop 30: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) [V_n>=V_y,V_y>=1,V_x>=1,0>=V_b+1] 
* Loop 31: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) [V_n>=V_y,V_y>=1,V_x>=1,0>=V_b+1] 
* Loop 32: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) [V_n>=V_y,V_y>=1,V_x>=0,0>=V_b+1] 
* Loop 33: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) [V_n>=V_y,V_y>=0,V_x>=0,0>=V_b+1] 
* Loop 34: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) [V_x>=0,V_n>=0,0>=V_b+1,V_y=0] 
* Loop 35: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) [V_n>=V_y,V_y>=1,0>=V_b+1,V_x=0] 
* Loop 36: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) [V_n>=V_y,V_y>=0,0>=V_b+1,V_x=0] 
* Loop 37: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) [V_n>=V_y,V_y>=0,V_x>=0,V_b>=0] 
* Loop 38: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) [V_n>=V_y,V_y>=2,V_x>=1,0>=V_b+1] 
* Loop 39: eval_counterex1a_start(V_n,V_b,V_x,V_y,B) [V_n>=V_y,V_y>=1,V_x>=1,0>=V_b+1] 

### Ranking functions of CR eval_counterex1a_start(V_n,V_b,V_x,V_y,B) 

#### Partial ranking functions of CR eval_counterex1a_start(V_n,V_b,V_x,V_y,B) 


### Resulting Chains:eval_counterex1a_start(V_n,V_b,V_x,V_y,B) 
* [39]...
* [38]...
* [37]...
* [36]
* [35]
* [34]
* [33]
* [32]
* [31]
* [30]
* [29]
* [28]
* [27]
* [26]
* [25]
* [24]
* [23]
* [22]
* [21]
* [20]


Computing Bounds
=====================================

#### Cost of loops [12] 

 * loop 12:eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B) -> [eval_counterex1a_bb1_in(V_n',V__04',V__01',V__0',B')] 
1
#### Cost of phase [12]:eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B) -> [eval_counterex1a_bb1_in(V_n',V__04',V__01',V__0',B')] 
1*it(12)+0
  Such that:it(12) =< V__04+1
it(12) =< V__04-V__04'
it(12) >= V__04-V__04'

#### Cost of loops [11,13,15,16] 

 * loop 11:eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B) -> [eval_counterex1a_bb1_in(V_n',V__04',V__01',V__0',B')] 
1
 * loop 13:eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B) -> [eval_counterex1a_bb1_in(V_n',V__04',V__01',V__0',B')] 
1
 * loop 15:eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B) -> [eval_counterex1a_bb1_in(V_n',V__04',V__01',V__0',B')] 
1
 * loop 16:eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B) -> [eval_counterex1a_bb1_in(V_n',V__04',V__01',V__0',B')] 
1
#### Cost of phase [11,13,15,16]:eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B) -> [eval_counterex1a_bb1_in(V_n',V__04',V__01',V__0',B')] 
2*it(11)+1*it(13)+1*it(15)+0
  Such that:aux(32) =< V__01+1
aux(33) =< V__01-V__01'
it(13) =< aux(32)
it(13) =< aux(33)
it(13) >= V__01-V__01'

#### Cost of phase [12]:eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B) -> [eval_counterex1a_bb1_in(V_n',V__04',V__01',V__0',B')] 
1*it(12)+0
  Such that:it(12) =< V__04+1
it(12) =< V__04-V__04'
it(12) >= V__04-V__04'

#### Cost of phase [11,13,15,16]:eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B) -> [eval_counterex1a_bb1_in(V_n',V__04',V__01',V__0',B')] 
2*it(11)+1*it(13)+1*it(15)+0
  Such that:aux(32) =< V__01+1
aux(33) =< V__01-V__01'
it(13) =< aux(32)
it(13) =< aux(33)
it(13) >= V__01-V__01'

#### Cost of phase [12]:eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B) -> [eval_counterex1a_bb1_in(V_n',V__04',V__01',V__0',B')] 
1*it(12)+0
  Such that:it(12) =< V__04+1
it(12) =< V__04-V__04'
it(12) >= V__04-V__04'

#### Cost of phase [11,13,15,16]:eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B) -> [eval_counterex1a_bb1_in(V_n',V__04',V__01',V__0',B')] 
2*it(11)+1*it(13)+1*it(15)+0
  Such that:aux(32) =< V__01+1
aux(33) =< V__01-V__01'
it(13) =< aux(32)
it(13) =< aux(33)
it(13) >= V__01-V__01'

#### Cost of phase [12]:eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B) -> [eval_counterex1a_bb1_in(V_n',V__04',V__01',V__0',B')] 
1*it(12)+0
  Such that:it(12) =< V__04+1
it(12) =< V__04-V__04'
it(12) >= V__04-V__04'

#### Cost of phase [11,13,15,16]:eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B) -> [eval_counterex1a_bb1_in(V_n',V__04',V__01',V__0',B')] 
2*it(11)+1*it(13)+1*it(15)+0
  Such that:aux(32) =< V__01+1
aux(33) =< V__01-V__01'
it(13) =< aux(32)
it(13) =< aux(33)
it(13) >= V__01-V__01'

#### Cost of phase [12]:eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B) -> [eval_counterex1a_bb1_in(V_n',V__04',V__01',V__0',B')] 
1*it(12)+0
  Such that:it(12) =< V__04+1
it(12) =< V__04-V__04'
it(12) >= V__04-V__04'

#### Cost of phase [12]:eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B) -> [eval_counterex1a_bb1_in(V_n',V__04',V__01',V__0',B')] 
1*it(12)+0
  Such that:it(12) =< V__04+1
it(12) =< V__04-V__04'
it(12) >= V__04-V__04'

#### Cost of phase [12]:eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B) -> [eval_counterex1a_bb1_in(V_n',V__04',V__01',V__0',B')] 
1*it(12)+0
  Such that:it(12) =< V__04+1
it(12) =< V__04-V__04'
it(12) >= V__04-V__04'

#### Cost of chains of eval_counterex1a_bb1_in(V_n,V__04,V__01,V__0,B):
* Chain [[12],19]: 1*it(12)+0
  Such that:it(12) =< V__04+1
it(12) >= V__04+1

  with precondition: [B=2,0>=V__0+1,V__04>=0,V__01>=0,V_n>=V__04] 

* Chain [[12],14,[11,13,15,16]]...: 3*it(11)+1*it(12)+1*it(13)+1
  Such that:it(12) =< V__04-1
aux(37) =< V__01
it(13) =< aux(37)
it(12) >= 1

  with precondition: [B=2,0>=V__0+1,V__04>=2,V__01>=1,V_n>=V__04] 

* Chain [[12],14,[11,13,15,16],19]: 3*it(11)+1*it(12)+1*it(13)+1
  Such that:it(12) =< V__04-1
aux(38) =< V__01
it(13) =< aux(38)
it(12) >= 1

  with precondition: [B=2,0>=V__0+1,V__04>=2,V__01>=1,V_n>=V__04] 

* Chain [[12],14,[11,13,15,16],18]: 3*it(11)+1*it(12)+1*it(13)+1
  Such that:it(12) =< V__04-1
aux(39) =< V__01
it(13) =< aux(39)
it(12) >= 1
it(13) >= V__01

  with precondition: [B=2,0>=V__0+1,V__04>=2,V__01>=1,V_n>=V__04] 

* Chain [[12],14,[11,13,15,16],17]: 3*it(11)+1*it(12)+1*it(13)+1
  Such that:it(12) =< V__04-1
aux(33) =< V__01-1
aux(32) =< V__01
it(13) =< aux(32)
it(13) =< aux(33)
it(12) >= 1

  with precondition: [B=2,0>=V__0+1,V__04>=2,V__01>=1,V_n>=V__04] 

* Chain [[12],14,19]: 1*it(12)+1
  Such that:it(12) =< V__04
it(12) >= V__04

  with precondition: [B=2,0>=V__0+1,V__04>=1,V__01>=0,V_n>=V__04] 

* Chain [[12],14,18]: 1*it(12)+1
  Such that:it(12) =< V__04
it(12) >= 1

  with precondition: [V__01=0,B=2,0>=V__0+1,V__04>=1,V_n>=V__04] 

* Chain [[11,13,15,16]]...: 3*it(11)+1*it(13)+0
  Such that:aux(37) =< V__01+1
it(13) =< aux(37)

  with precondition: [V__0>=0,V__01>=0,V_n>=V__04,V__04>=0,B=2] 

* Chain [[11,13,15,16],19]: 3*it(11)+1*it(13)+0
  Such that:aux(38) =< V__01+1
it(13) =< aux(38)

  with precondition: [B=2,V__04>=0,V__01>=0,V__0>=0,V_n>=V__04] 

* Chain [[11,13,15,16],18]: 3*it(11)+1*it(13)+0
  Such that:aux(39) =< V__01+1
it(13) =< aux(39)
it(13) >= V__01+1

  with precondition: [B=2,V__04>=0,V__01>=0,V__0>=0,V_n>=V__04,V__0+V_n>=V__04+1] 

* Chain [[11,13,15,16],17]: 3*it(11)+1*it(13)+0
  Such that:aux(33) =< V__01
aux(32) =< V__01+1
it(13) =< aux(32)
it(13) =< aux(33)

  with precondition: [B=2,V__04>=0,V__01>=0,V__0>=0,V_n>=V__04] 

* Chain [19]: 0
  with precondition: [B=2,0>=V__04+1] 

* Chain [18]: 0
  with precondition: [B=2,0>=V__01+1] 

* Chain [17]: 0
  with precondition: [B=2,V__04>=V_n+1] 

* Chain [14,[11,13,15,16]]...: 3*it(11)+1*it(13)+1
  Such that:aux(37) =< V__01
it(13) =< aux(37)

  with precondition: [B=2,0>=V__0+1,V__04>=1,V__01>=1,V_n>=V__04] 

* Chain [14,[11,13,15,16],19]: 3*it(11)+1*it(13)+1
  Such that:aux(38) =< V__01
it(13) =< aux(38)

  with precondition: [B=2,0>=V__0+1,V__04>=1,V__01>=1,V_n>=V__04] 

* Chain [14,[11,13,15,16],18]: 3*it(11)+1*it(13)+1
  Such that:aux(39) =< V__01
it(13) =< aux(39)
it(13) >= V__01

  with precondition: [B=2,0>=V__0+1,V__04>=1,V__01>=1,V_n>=V__04] 

* Chain [14,[11,13,15,16],17]: 3*it(11)+1*it(13)+1
  Such that:aux(33) =< V__01-1
aux(32) =< V__01
it(13) =< aux(32)
it(13) =< aux(33)

  with precondition: [B=2,0>=V__0+1,V__04>=1,V__01>=1,V_n>=V__04] 

* Chain [14,19]: 1
  with precondition: [V__04=0,B=2,0>=V__0+1,V_n>=0,V__01>=0] 

* Chain [14,18]: 1
  with precondition: [V__01=0,B=2,0>=V__0+1,V__04>=0,V_n>=V__04] 


#### Cost of chains of eval_counterex1a_start(V_n,V_b,V_x,V_y,B):
* Chain [39]...: 1*s(2)+3*s(3)+2
  Such that:s(1) =< V_x
s(2) =< s(1)

  with precondition: [0>=V_b+1,V_x>=1,V_y>=1,V_n>=V_y] 

* Chain [38]...: 1*s(4)+1*s(6)+3*s(7)+2
  Such that:s(5) =< V_x
s(4) =< V_y-1
s(6) =< s(5)
s(4) >= 1

  with precondition: [0>=V_b+1,V_x>=1,V_y>=2,V_n>=V_y] 

* Chain [37]...: 1*s(9)+3*s(10)+1
  Such that:s(8) =< V_x+1
s(9) =< s(8)

  with precondition: [V_b>=0,V_x>=0,V_y>=0,V_n>=V_y] 

* Chain [36]: 2
  with precondition: [V_x=0,0>=V_b+1,V_y>=0,V_n>=V_y] 

* Chain [35]: 1*s(11)+2
  Such that:s(11) =< V_y
s(11) >= 1

  with precondition: [V_x=0,0>=V_b+1,V_y>=1,V_n>=V_y] 

* Chain [34]: 2
  with precondition: [V_y=0,0>=V_b+1,V_n>=0,V_x>=0] 

* Chain [33]: 1*s(12)+1
  Such that:s(12) =< V_y+1
s(12) >= V_y+1

  with precondition: [0>=V_b+1,V_x>=0,V_y>=0,V_n>=V_y] 

* Chain [32]: 1*s(13)+2
  Such that:s(13) =< V_y
s(13) >= V_y

  with precondition: [0>=V_b+1,V_x>=0,V_y>=1,V_n>=V_y] 

* Chain [31]: 1*s(15)+3*s(16)+2
  Such that:s(14) =< V_x
s(15) =< s(14)

  with precondition: [0>=V_b+1,V_x>=1,V_y>=1,V_n>=V_y] 

* Chain [30]: 1*s(18)+3*s(19)+2
  Such that:s(17) =< V_x
s(18) =< s(17)
s(18) >= V_x

  with precondition: [0>=V_b+1,V_x>=1,V_y>=1,V_n>=V_y] 

* Chain [29]: 1*s(22)+3*s(23)+2
  Such that:s(20) =< V_x-1
s(21) =< V_x
s(22) =< s(21)
s(22) =< s(20)

  with precondition: [0>=V_b+1,V_x>=1,V_y>=1,V_n>=V_y] 

* Chain [28]: 1*s(24)+1*s(26)+3*s(27)+2
  Such that:s(25) =< V_x
s(24) =< V_y-1
s(26) =< s(25)
s(24) >= 1

  with precondition: [0>=V_b+1,V_x>=1,V_y>=2,V_n>=V_y] 

* Chain [27]: 1*s(28)+1*s(30)+3*s(31)+2
  Such that:s(29) =< V_x
s(28) =< V_y-1
s(30) =< s(29)
s(28) >= 1
s(30) >= V_x

  with precondition: [0>=V_b+1,V_x>=1,V_y>=2,V_n>=V_y] 

* Chain [26]: 1*s(32)+1*s(35)+3*s(36)+2
  Such that:s(33) =< V_x-1
s(34) =< V_x
s(32) =< V_y-1
s(35) =< s(34)
s(35) =< s(33)
s(32) >= 1

  with precondition: [0>=V_b+1,V_x>=1,V_y>=2,V_n>=V_y] 

* Chain [25]: 1
  with precondition: [0>=V_x+1] 

* Chain [24]: 1
  with precondition: [0>=V_y+1] 

* Chain [23]: 1*s(38)+3*s(39)+1
  Such that:s(37) =< V_x+1
s(38) =< s(37)

  with precondition: [V_b>=0,V_x>=0,V_y>=0,V_n>=V_y] 

* Chain [22]: 1*s(42)+3*s(43)+1
  Such that:s(40) =< V_x
s(41) =< V_x+1
s(42) =< s(41)
s(42) =< s(40)

  with precondition: [V_b>=0,V_x>=0,V_y>=0,V_n>=V_y] 

* Chain [21]: 1*s(45)+3*s(46)+1
  Such that:s(44) =< V_x+1
s(45) =< s(44)
s(45) >= V_x+1

  with precondition: [V_b>=0,V_x>=0,V_y>=0,V_n>=V_y,V_b+V_n>=V_y+1] 

* Chain [20]: 1
  with precondition: [V_y>=V_n+1] 


Closed-form bounds of eval_counterex1a_start(V_n,V_b,V_x,V_y,B): 
-------------------------------------
* Chain [39]... with precondition: [0>=V_b+1,V_x>=1,V_y>=1,V_n>=V_y] 
    - Lower bound: 2 
    - Complexity: constant
 * Chain [38]... with precondition: [0>=V_b+1,V_x>=1,V_y>=2,V_n>=V_y] 
    - Lower bound: 3 
    - Complexity: constant
 * Chain [37]... with precondition: [V_b>=0,V_x>=0,V_y>=0,V_n>=V_y] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [36] with precondition: [V_x=0,0>=V_b+1,V_y>=0,V_n>=V_y] 
    - Lower bound: 2 
    - Complexity: constant
 * Chain [35] with precondition: [V_x=0,0>=V_b+1,V_y>=1,V_n>=V_y] 
    - Lower bound: 3 
    - Complexity: constant
 * Chain [34] with precondition: [V_y=0,0>=V_b+1,V_n>=0,V_x>=0] 
    - Lower bound: 2 
    - Complexity: constant
 * Chain [33] with precondition: [0>=V_b+1,V_x>=0,V_y>=0,V_n>=V_y] 
    - Lower bound: V_y+2 
    - Complexity: n
 * Chain [32] with precondition: [0>=V_b+1,V_x>=0,V_y>=1,V_n>=V_y] 
    - Lower bound: V_y+2 
    - Complexity: n
 * Chain [31] with precondition: [0>=V_b+1,V_x>=1,V_y>=1,V_n>=V_y] 
    - Lower bound: 2 
    - Complexity: constant
 * Chain [30] with precondition: [0>=V_b+1,V_x>=1,V_y>=1,V_n>=V_y] 
    - Lower bound: V_x+2 
    - Complexity: n
 * Chain [29] with precondition: [0>=V_b+1,V_x>=1,V_y>=1,V_n>=V_y] 
    - Lower bound: 2 
    - Complexity: constant
 * Chain [28] with precondition: [0>=V_b+1,V_x>=1,V_y>=2,V_n>=V_y] 
    - Lower bound: 3 
    - Complexity: constant
 * Chain [27] with precondition: [0>=V_b+1,V_x>=1,V_y>=2,V_n>=V_y] 
    - Lower bound: V_x+3 
    - Complexity: n
 * Chain [26] with precondition: [0>=V_b+1,V_x>=1,V_y>=2,V_n>=V_y] 
    - Lower bound: 3 
    - Complexity: constant
 * Chain [25] with precondition: [0>=V_x+1] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [24] with precondition: [0>=V_y+1] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [23] with precondition: [V_b>=0,V_x>=0,V_y>=0,V_n>=V_y] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [22] with precondition: [V_b>=0,V_x>=0,V_y>=0,V_n>=V_y] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [21] with precondition: [V_b>=0,V_x>=0,V_y>=0,V_n>=V_y,V_n+V_b>=V_y+1] 
    - Lower bound: V_x+2 
    - Complexity: n
 * Chain [20] with precondition: [V_y>=V_n+1] 
    - Lower bound: 1 
    - Complexity: constant
 
### Partitioned lower bound of eval_counterex1a_start(V_n,V_b,V_x,V_y,B): 
* 1 
 if [0>=V_b+1,V_x>=0,V_y>=V_n+1]
 or [0>=V_b+1,0>=V_y+1,V_x>=0,V_n>=V_y]
 or [V_b>=0,V_y>=V_n+1]
 or [0>=V_b+1,0>=V_x+1]
 or [V_b=0,V_y=V_n]
 or [0=1]
* 2 
 if [V_x=0,0>=V_b+1,V_y>=1,V_n>=V_y]
 or [0>=V_b+1,V_x>=1,V_y>=2,V_n>=V_y]
 or [V_y=1,0>=V_b+1,V_n>=1,V_x>=1]
 or [V_y=0,0>=V_b+1,V_n>=0,V_x>=0]
Possible lower bounds : [1,2]
Maximum lower bound complexity: constant

Time statistics: 
-------------------------------------
* Partial evaluation computed in 135 ms.
* Invariants computed in 333 ms.
   - Backward Invariants 160 ms.
   - Transitive Invariants 38 ms.
* Refinement performed in 327 ms.
* Termination proved in 47 ms.
* Upper bounds computed in 581 ms.
   - Equation cost structures 103 ms.
   - Phase cost structures 117 ms.
   - Chain cost structures 161 ms.
   - Solving cost expressions 14 ms.
* Total analysis performed in 1626 ms.


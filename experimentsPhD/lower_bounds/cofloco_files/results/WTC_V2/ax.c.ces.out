Warning: Ignored call to eval_ax_stop/1 in equation eval_ax_bb5_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_ax_bb2_in/7,eval_ax_bb3_in/7]
1. recursive : [eval_ax_12/5,eval_ax_13/5,eval_ax_bb1_in/3,eval_ax_bb4_in/4,loop_cont_eval_ax_bb2_in/5]
2. non_recursive : [eval_ax_bb5_in/1]
3. non_recursive : [loop_cont_eval_ax_bb1_in/2]
4. non_recursive : [eval_ax_6/2]
5. non_recursive : [eval_ax_5/2]
6. non_recursive : [eval_ax_4/2]
7. non_recursive : [eval_ax_3/2]
8. non_recursive : [eval_ax_2/2]
9. non_recursive : [eval_ax_1/2]
10. non_recursive : [eval_ax_0/2]
11. non_recursive : [eval_ax_bb0_in/2]
12. non_recursive : [eval_ax_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_ax_bb2_in/7
1. SCC is partially evaluated into eval_ax_bb1_in/3
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into eval_ax_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_ax_bb2_in/7 
* CE 7 is refined into CE [8] 
* CE 6 is refined into CE [9] 


#### Refined cost equations eval_ax_bb2_in/7 
* CE 8: eval_ax_bb2_in(A,B,C,D,A,B,C) = 0
     [C+1>=A,C>=0,D=2] 
* CE 9: eval_ax_bb2_in(V_n,V__0,V__01,B,C,D,E) = 1+ eval_ax_bb2_in(V_n,V__0,F,G,C,D,E)
     [V_n>=V__01+2,V__01>=0,V__01+1=F,G=2,B=2] 

### Cost equations --> "Loop" of eval_ax_bb2_in/7 
* CEs [9] --> Loop 7 
* CEs [8] --> Loop 8 

#### Loops of eval_ax_bb2_in/7 
* Loop 7: eval_ax_bb2_in(V_n,V__0,V__01,B,C,D,E)->  eval_ax_bb2_in(V_n,V__0,V__01',B',C,D,E)
                  [V_n>=V__01+2,V__01>=0,V__01+1=V__01',B'=2,B=2] 
* Loop 8: eval_ax_bb2_in(A,B,C,D,A,B,C) [C+1>=A,C>=0,D=2] 

### Ranking functions of CR eval_ax_bb2_in(V_n,V__0,V__01,B,C,D,E) 
* RF of phase [7]: [V_n-V__01-1]

#### Partial ranking functions of CR eval_ax_bb2_in(V_n,V__0,V__01,B,C,D,E) 
* Partial RF of phase [7]:
  - RF of loop [7:1]:
    V_n-V__01-1


### Resulting Chains:eval_ax_bb2_in(V_n,V__0,V__01,B,C,D,E) 
* [[7],8]
* [8]


### Specialization of cost equations eval_ax_bb1_in/3 
* CE 5 is refined into CE [10,11] 
* CE 4 is discarded (unfeasible) 
* CE 3 is refined into CE [12,13] 


#### Refined cost equations eval_ax_bb1_in/3 
* CE 10: eval_ax_bb1_in(V_n,V__0,B) = 2+ eval_ax_bb2_in(V_n,V__0,C,D,V_n,V__0,E):[[7],8]+ eval_ax_bb1_in(V_n,F,G)
     [V_n>=V__0+3,V_n>=2,V__0+1=F,V_n=E+1,G=3,D=2,C=0,B=3] 
* CE 11: eval_ax_bb1_in(V_n,V__0,B) = 2+ eval_ax_bb2_in(V_n,V__0,C,D,V_n,V__0,E):[8]+ eval_ax_bb1_in(V_n,F,G)
     [V_n>=V__0+3,1>=V_n,V__0+1=F,G=3,E=0,D=2,C=0,B=3] 
* CE 12: eval_ax_bb1_in(V_n,V__0,B) = 1+ eval_ax_bb2_in(V_n,V__0,C,D,V_n,V__0,E):[[7],8]
     [V__0+2>=V_n,V_n>=2,V_n=E+1,D=2,C=0,B=3] 
* CE 13: eval_ax_bb1_in(V_n,V__0,B) = 1+ eval_ax_bb2_in(V_n,V__0,C,D,V_n,V__0,E):[8]
     [V__0+2>=V_n,1>=V_n,E=0,D=2,C=0,B=3] 

### Cost equations --> "Loop" of eval_ax_bb1_in/3 
* CEs [12] --> Loop 9 
* CEs [13] --> Loop 10 
* CEs [10] --> Loop 11 
* CEs [11] --> Loop 12 

#### Loops of eval_ax_bb1_in/3 
* Loop 9: eval_ax_bb1_in(V_n,V__0,B) [V__0+2>=V_n,V_n>=2,B=3] 
* Loop 10: eval_ax_bb1_in(V_n,V__0,B) [V__0+2>=V_n,1>=V_n,B=3] 
* Loop 11: eval_ax_bb1_in(V_n,V__0,B)->  eval_ax_bb1_in(V_n,V__0',B')
                  [V_n>=V__0+3,V_n>=2,V__0+1=V__0',B'=3,B=3] 
* Loop 12: eval_ax_bb1_in(V_n,V__0,B)->  eval_ax_bb1_in(V_n,V__0',B')
                  [V_n>=V__0+3,1>=V_n,V__0+1=V__0',B'=3,B=3] 

### Ranking functions of CR eval_ax_bb1_in(V_n,V__0,B) 
* RF of phase [11]: [V_n-V__0-2]

#### Partial ranking functions of CR eval_ax_bb1_in(V_n,V__0,B) 
* Partial RF of phase [11]:
  - RF of loop [11:1]:
    V_n-V__0-2


### Resulting Chains:eval_ax_bb1_in(V_n,V__0,B) 
* [[11],9]
* [10]
* [9]


### Specialization of cost equations eval_ax_start/4 
* CE 2 is refined into CE [14,15,16] 


#### Refined cost equations eval_ax_start/4 
* CE 14: eval_ax_start(V_i,V_j,V_n,B) = 1+ eval_ax_bb1_in(V_n,C,D):[[11],9]
     [V_n>=3,D=3,C=0] 
* CE 15: eval_ax_start(V_i,V_j,V_n,B) = 1+ eval_ax_bb1_in(V_n,C,D):[10]
     [1>=V_n,D=3,C=0] 
* CE 16: eval_ax_start(V_i,V_j,V_n,B) = 1+ eval_ax_bb1_in(C,D,E):[9]
     [E=3,D=0,C=2,V_n=2] 

### Cost equations --> "Loop" of eval_ax_start/4 
* CEs [14] --> Loop 13 
* CEs [15] --> Loop 14 
* CEs [16] --> Loop 15 

#### Loops of eval_ax_start/4 
* Loop 13: eval_ax_start(V_i,V_j,V_n,B) [V_n>=3] 
* Loop 14: eval_ax_start(V_i,V_j,V_n,B) [1>=V_n] 
* Loop 15: eval_ax_start(V_i,V_j,V_n,B) [V_n=2] 

### Ranking functions of CR eval_ax_start(V_i,V_j,V_n,B) 

#### Partial ranking functions of CR eval_ax_start(V_i,V_j,V_n,B) 


### Resulting Chains:eval_ax_start(V_i,V_j,V_n,B) 
* [15]
* [14]
* [13]


Computing Bounds
=====================================

#### Cost of loops [7] 

 * loop 7:eval_ax_bb2_in(V_n,V__0,V__01,B,C,D,E) -> [eval_ax_bb2_in(V_n',V__0',V__01',B',C',D',E')] 
1
#### Cost of phase [7]:eval_ax_bb2_in(V_n,V__0,V__01,B,C,D,E) -> [eval_ax_bb2_in(V_n',V__0',V__01',B',C',D',E')] 
1*it(7)+0
  Such that:it(7) =< V_n-V__01-1
it(7) =< V_n-V__01-V_n'+V__01'
it(7) >= V_n-V__01-V_n'+V__01'

#### Cost of chains of eval_ax_bb2_in(V_n,V__0,V__01,B,C,D,E):
* Chain [[7],8]: 1*it(7)+0
  Such that:it(7) =< V_n-V__01-1
it(7) >= V_n-V__01-1

  with precondition: [B=2,V_n=C,V__0=D,V_n=E+1,V__01>=0,V_n>=V__01+2] 

* Chain [8]: 0
  with precondition: [B=2,D=V__0,V_n=C,V__01=E,V__01>=0,V__01+1>=V_n] 


#### Cost of loops [11] 

 * loop 11:eval_ax_bb1_in(V_n,V__0,B) -> [eval_ax_bb1_in(V_n',V__0',B')] 
1*s(3)+2
  Such that:s(3) =< V_n-1
s(3) >= V_n-1

#### Cost of phase [11]:eval_ax_bb1_in(V_n,V__0,B) -> [eval_ax_bb1_in(V_n',V__0',B')] 
2*it(11)+1*s(4)+0
  Such that:aux(2) =< V_n-1
it(11) =< V_n-V__0-2
it(11) =< V_n-V__0-V_n'+V__0'
s(4) =< it(11)*aux(2)
aux(1) >= V_n-1
it(11) >= V_n-V__0-V_n'+V__0'
s(4) >= -2*V__0+2*V__0'
s(4) >= it(11)*aux(1)

#### Cost of chains of eval_ax_bb1_in(V_n,V__0,B):
* Chain [[11],9]: 2*it(11)+1*s(1)+1*s(4)+1
  Such that:it(11) =< V_n-V__0-2
aux(3) =< V_n-1
s(1) =< aux(3)
s(4) =< it(11)*aux(3)
it(11) >= V_n-V__0-2
s(4) >= 2*V_n-2*V__0-4
aux(4) >= V_n-1
aux(4) >= aux(4)
s(1) >= aux(4)
s(4) >= it(11)*aux(4)

  with precondition: [B=3,V__0>=0,V_n>=V__0+3] 

* Chain [10]: 1
  with precondition: [V__0=0,B=3,1>=V_n] 

* Chain [9]: 1*s(1)+1
  Such that:s(1) =< V_n-1
s(1) >= V_n-1

  with precondition: [B=3,V_n>=2,V__0+2>=V_n] 


#### Cost of chains of eval_ax_start(V_i,V_j,V_n,B):
* Chain [15]: 1*s(5)+2
  Such that:s(5) =< 1
s(5) >= 1

  with precondition: [V_n=2] 

* Chain [14]: 2
  with precondition: [1>=V_n] 

* Chain [13]: 2*s(6)+1*s(8)+1*s(10)+2
  Such that:s(6) =< V_n-2
s(7) =< V_n-1
s(10) =< s(7)
s(8) =< s(6)*s(7)
s(6) >= V_n-2
s(9) >= V_n-1
s(8) >= 2*V_n-4
s(9) >= s(9)
s(10) >= s(9)
s(8) >= s(6)*s(9)

  with precondition: [V_n>=3] 


Closed-form bounds of eval_ax_start(V_i,V_j,V_n,B): 
-------------------------------------
* Chain [15] with precondition: [V_n=2] 
    - Lower bound: 3 
    - Complexity: constant
 * Chain [14] with precondition: [1>=V_n] 
    - Lower bound: 2 
    - Complexity: constant
 * Chain [13] with precondition: [V_n>=3] 
    - Lower bound: 2*V_n-4+ (V_n+1+ (V_n-2)* (V_n-1)) 
    - Complexity: n^2
 
### Partitioned lower bound of eval_ax_start(V_i,V_j,V_n,B): 
* 2 
 if [1>=V_n]
* 3 
 if [V_n=2]
* 2*V_n-4+ (V_n+1+ (V_n-2)* (V_n-1)) 
 if [V_n>=3]
Possible lower bounds : [2,3,2*V_n-4+ (V_n+1+ (V_n-2)* (V_n-1))]
Maximum lower bound complexity: n^2

Time statistics: 
-------------------------------------
* Partial evaluation computed in 59 ms.
* Invariants computed in 71 ms.
   - Backward Invariants 29 ms.
   - Transitive Invariants 19 ms.
* Refinement performed in 91 ms.
* Termination proved in 16 ms.
* Upper bounds computed in 134 ms.
   - Equation cost structures 39 ms.
   - Phase cost structures 54 ms.
   - Chain cost structures 34 ms.
   - Solving cost expressions 5 ms.
* Total analysis performed in 435 ms.


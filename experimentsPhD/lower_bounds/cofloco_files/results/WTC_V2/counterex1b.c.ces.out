Warning: Ignored call to eval_counterex1b_stop/1 in equation eval_counterex1b_bb7_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_counterex1b_5/9,eval_counterex1b_6/10,eval_counterex1b_bb1_in/9,eval_counterex1b_bb2_in/9,eval_counterex1b_bb3_in/10]
1. recursive : [eval_counterex1b_13/10,eval_counterex1b_14/11,eval_counterex1b_bb4_in/10,eval_counterex1b_bb5_in/10,eval_counterex1b_bb6_in/11]
2. recursive : [eval_counterex1b_10/6,eval_counterex1b_11/6,eval_counterex1b_12/6,eval_counterex1b__critedge2_in/4,eval_counterex1b__critedge_in/5,loop_cont_eval_counterex1b_bb1_in/6,loop_cont_eval_counterex1b_bb4_in/5]
3. non_recursive : [eval_counterex1b_bb7_in/1]
4. non_recursive : [loop_cont_eval_counterex1b__critedge2_in/2]
5. non_recursive : [eval_counterex1b_4/4]
6. non_recursive : [eval_counterex1b_3/4]
7. non_recursive : [eval_counterex1b_2/4]
8. non_recursive : [eval_counterex1b_1/4]
9. non_recursive : [eval_counterex1b_0/4]
10. non_recursive : [eval_counterex1b_bb0_in/4]
11. non_recursive : [eval_counterex1b_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_counterex1b_bb1_in/9
1. SCC is partially evaluated into eval_counterex1b_bb4_in/10
2. SCC is partially evaluated into eval_counterex1b__critedge2_in/4
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into eval_counterex1b_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_counterex1b_bb1_in/9 
* CE 5 is refined into CE [11] 
* CE 7 is refined into CE [12] 
* CE 6 is refined into CE [13] 


#### Refined cost equations eval_counterex1b_bb1_in/9 
* CE 11: eval_counterex1b_bb1_in(A,B,C,D,E,A,B,C,D) = 0
     [B>=D,D>=0,C>=0,E=2] 
* CE 12: eval_counterex1b_bb1_in(A,B,C,D,E,A,B,C,D) = 0
     [B>=D,C>=0,0>=D+1,E=2] 
* CE 13: eval_counterex1b_bb1_in(V_n,V__01,V__0,V__1,B,C,D,E,F) = 1+ eval_counterex1b_bb1_in(V_n,V__01,V__0,G,H,C,D,E,F)
     [V__01>=V__1,V__1>=0,V__0>=0,V__1=G+1,H=2,B=2] 

### Cost equations --> "Loop" of eval_counterex1b_bb1_in/9 
* CEs [13] --> Loop 10 
* CEs [11] --> Loop 11 
* CEs [12] --> Loop 12 

#### Loops of eval_counterex1b_bb1_in/9 
* Loop 10: eval_counterex1b_bb1_in(V_n,V__01,V__0,V__1,B,C,D,E,F)->  eval_counterex1b_bb1_in(V_n,V__01,V__0,V__1',B',C,D,E,F)
                  [V__01>=V__1,V__1>=0,V__0>=0,V__1=V__1'+1,B'=2,B=2] 
* Loop 11: eval_counterex1b_bb1_in(A,B,C,D,E,A,B,C,D) [B>=D,D>=0,C>=0,E=2] 
* Loop 12: eval_counterex1b_bb1_in(A,B,C,D,E,A,B,C,D) [B>=D,C>=0,0>=D+1,E=2] 

### Ranking functions of CR eval_counterex1b_bb1_in(V_n,V__01,V__0,V__1,B,C,D,E,F) 
* RF of phase [10]: [V__1+1]

#### Partial ranking functions of CR eval_counterex1b_bb1_in(V_n,V__01,V__0,V__1,B,C,D,E,F) 
* Partial RF of phase [10]:
  - RF of loop [10:1]:
    V__1+1


### Resulting Chains:eval_counterex1b_bb1_in(V_n,V__01,V__0,V__1,B,C,D,E,F) 
* [[10],12]
* [[10],11]
* [12]
* [11]


### Specialization of cost equations eval_counterex1b_bb4_in/10 
* CE 8 is refined into CE [14] 
* CE 10 is refined into CE [15] 
* CE 9 is refined into CE [16] 


#### Refined cost equations eval_counterex1b_bb4_in/10 
* CE 14: eval_counterex1b_bb4_in(A,B,C,D,E,F,G,A,F,E) = 0
     [A>=F,F>=D,E+1=C,G=3] 
* CE 15: eval_counterex1b_bb4_in(A,B,C,D,E,F,G,A,F,E) = 0
     [F>=D,F>=A+1,E+1=C,G=3] 
* CE 16: eval_counterex1b_bb4_in(V_n,V__01,V__0,V__1,V_5,V__2,B,C,D,E) = 1+ eval_counterex1b_bb4_in(V_n,V__01,F,V__1,V_5,G,H,C,D,E)
     [V_n>=V__2,V__2>=V__1,V__2+1=G,V_5+1=F,V_5+1=V__0,H=3,B=3] 

### Cost equations --> "Loop" of eval_counterex1b_bb4_in/10 
* CEs [16] --> Loop 13 
* CEs [14] --> Loop 14 
* CEs [15] --> Loop 15 

#### Loops of eval_counterex1b_bb4_in/10 
* Loop 13: eval_counterex1b_bb4_in(V_n,V__01,V__0,V__1,V_5,V__2,B,C,D,E)->  eval_counterex1b_bb4_in(V_n,V__01,V__0',V__1,V_5,V__2',B',C,D,E)
                  [V_n>=V__2,V__2>=V__1,V__2+1=V__2',V_5+1=V__0',V_5+1=V__0,B'=3,B=3] 
* Loop 14: eval_counterex1b_bb4_in(A,B,C,D,E,F,G,A,F,E) [A>=F,F>=D,E+1=C,G=3] 
* Loop 15: eval_counterex1b_bb4_in(A,B,C,D,E,F,G,A,F,E) [F>=D,F>=A+1,E+1=C,G=3] 

### Ranking functions of CR eval_counterex1b_bb4_in(V_n,V__01,V__0,V__1,V_5,V__2,B,C,D,E) 
* RF of phase [13]: [V_n-V__2+1]

#### Partial ranking functions of CR eval_counterex1b_bb4_in(V_n,V__01,V__0,V__1,V_5,V__2,B,C,D,E) 
* Partial RF of phase [13]:
  - RF of loop [13:1]:
    V_n-V__2+1


### Resulting Chains:eval_counterex1b_bb4_in(V_n,V__01,V__0,V__1,V_5,V__2,B,C,D,E) 
* [[13],15]
* [[13],14]
* [15]
* [14]


### Specialization of cost equations eval_counterex1b__critedge2_in/4 
* CE 4 is refined into CE [17] 
* CE 3 is refined into CE [18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33] 


#### Refined cost equations eval_counterex1b__critedge2_in/4 
* CE 17: eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) = 0
     [0>=V__0+1,B=4] 
* CE 18: eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) = 3+ eval_counterex1b_bb1_in(V_n,V__01,C,V__01,D,V_n,V__01,E,F):[[10],12]+ eval_counterex1b_bb4_in(V_n,V__01,G,H,I,J,K,V_n,L,I):[[13],15]+ eval_counterex1b__critedge2_in(V_n,M,I,N)
     [V_n+1>=0,I+1>=0,V__01>=0,V_n+1=M,V_n+1=L,I+1=G,I+1=E,I+1=C,I+1=V__0,N=4,K=3,J+1=0,H+1=0,F+1=0,D=2,B=4] 
* CE 19: eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) = 3+ eval_counterex1b_bb1_in(V_n,V__01,C,V__01,D,V_n,V__01,E,F):[[10],12]+ eval_counterex1b_bb4_in(V_n,V__01,G,H,I,J,K,V_n,L,I):[[13],14]+ eval_counterex1b__critedge2_in(V_n,L,I,M)
     [V_n>=L,L>=0,I+1>=0,V__01>=0,I+1=G,I+1=E,I+1=C,I+1=V__0,M=4,K=3,J+1=0,H+1=0,F+1=0,D=2,B=4] 
* CE 20: eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) = 3+ eval_counterex1b_bb1_in(V_n,V__01,C,V__01,D,V_n,V__01,E,F):[[10],12]+ eval_counterex1b_bb4_in(V_n,V__01,G,H,I,J,K,V_n,L,I):[15]+ eval_counterex1b__critedge2_in(V_n,M,I,N)
     [I+1>=0,V__01>=0,0>=V_n+2,I+1=G,I+1=E,I+1=C,I+1=V__0,N=4,M+1=0,L+1=0,K=3,J+1=0,H+1=0,F+1=0,D=2,B=4] 
* CE 21: eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) = 3+ eval_counterex1b_bb1_in(V_n,V__01,C,V__01,D,V_n,V__01,E,F):[[10],12]+ eval_counterex1b_bb4_in(V_n,V__01,G,H,I,J,K,V_n,L,I):[14]+ eval_counterex1b__critedge2_in(V_n,M,I,N)
     [V_n+1>=0,I+1>=0,V__01>=0,I+1=G,I+1=E,I+1=C,I+1=V__0,N=4,M+1=0,L+1=0,K=3,J+1=0,H+1=0,F+1=0,D=2,B=4] 
* CE 22: eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) = 3+ eval_counterex1b_bb1_in(V_n,V__01,C,V__01,D,V_n,V__01,E,F):[[10],11]+ eval_counterex1b_bb4_in(V_n,V__01,G,F,H,F,I,V_n,J,H):[[13],15]+ eval_counterex1b__critedge2_in(V_n,K,H,L)
     [V_n>=F,V__01>=F+1,H+1>=0,F>=0,V_n+1=K,V_n+1=J,H+1=G,H+1=E,H+1=C,H+1=V__0,L=4,I=3,D=2,B=4] 
* CE 23: eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) = 3+ eval_counterex1b_bb1_in(V_n,V__01,C,V__01,D,V_n,V__01,E,F):[[10],11]+ eval_counterex1b_bb4_in(V_n,V__01,G,F,H,F,I,V_n,J,H):[[13],14]+ eval_counterex1b__critedge2_in(V_n,J,H,K)
     [V_n>=J,J>=F+1,V__01>=F+1,H+1>=0,F>=0,H+1=G,H+1=E,H+1=C,H+1=V__0,K=4,I=3,D=2,B=4] 
* CE 24: eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) = 3+ eval_counterex1b_bb1_in(V_n,V__01,C,V__01,D,V_n,V__01,E,F):[[10],11]+ eval_counterex1b_bb4_in(V_n,V__01,G,F,H,F,I,V_n,F,H):[15]+ eval_counterex1b__critedge2_in(V_n,F,H,J)
     [V__01>=F+1,F>=V_n+1,F>=0,H+1>=0,H+1=G,H+1=E,H+1=C,H+1=V__0,J=4,I=3,D=2,B=4] 
* CE 25: eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) = 3+ eval_counterex1b_bb1_in(V_n,V__01,C,V__01,D,V_n,V__01,E,F):[[10],11]+ eval_counterex1b_bb4_in(V_n,V__01,G,F,H,F,I,V_n,F,H):[14]+ eval_counterex1b__critedge2_in(V_n,F,H,J)
     [V_n>=F,V__01>=F+1,F>=0,H+1>=0,H+1=G,H+1=E,H+1=C,H+1=V__0,J=4,I=3,D=2,B=4] 
* CE 26: eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) = 3+ eval_counterex1b_bb1_in(V_n,V__01,C,V__01,D,V_n,V__01,E,V__01):[12]+ eval_counterex1b_bb4_in(V_n,V__01,F,V__01,G,V__01,H,V_n,I,G):[[13],15]+ eval_counterex1b__critedge2_in(V_n,J,G,K)
     [V_n>=V__01,G+1>=0,0>=V__01+1,V_n+1=J,V_n+1=I,G+1=F,G+1=E,G+1=C,G+1=V__0,K=4,H=3,D=2,B=4] 
* CE 27: eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) = 3+ eval_counterex1b_bb1_in(V_n,V__01,C,V__01,D,V_n,V__01,E,V__01):[12]+ eval_counterex1b_bb4_in(V_n,V__01,F,V__01,G,V__01,H,V_n,I,G):[[13],14]+ eval_counterex1b__critedge2_in(V_n,I,G,J)
     [V_n>=I,I>=V__01+1,G+1>=0,0>=V__01+1,G+1=F,G+1=E,G+1=C,G+1=V__0,J=4,H=3,D=2,B=4] 
* CE 28: eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) = 3+ eval_counterex1b_bb1_in(V_n,V__01,C,V__01,D,V_n,V__01,E,V__01):[12]+ eval_counterex1b_bb4_in(V_n,V__01,F,V__01,G,V__01,H,V_n,V__01,G):[15]+ eval_counterex1b__critedge2_in(V_n,V__01,G,I)
     [V__01>=V_n+1,G+1>=0,0>=V__01+1,G+1=F,G+1=E,G+1=C,G+1=V__0,I=4,H=3,D=2,B=4] 
* CE 29: eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) = 3+ eval_counterex1b_bb1_in(V_n,V__01,C,V__01,D,V_n,V__01,E,V__01):[12]+ eval_counterex1b_bb4_in(V_n,V__01,F,V__01,G,V__01,H,V_n,V__01,G):[14]+ eval_counterex1b__critedge2_in(V_n,V__01,G,I)
     [V_n>=V__01,G+1>=0,0>=V__01+1,G+1=F,G+1=E,G+1=C,G+1=V__0,I=4,H=3,D=2,B=4] 
* CE 30: eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) = 3+ eval_counterex1b_bb1_in(V_n,V__01,C,V__01,D,V_n,V__01,E,V__01):[11]+ eval_counterex1b_bb4_in(V_n,V__01,F,V__01,G,V__01,H,V_n,I,G):[[13],15]+ eval_counterex1b__critedge2_in(V_n,J,G,K)
     [V_n>=V__01,G+1>=0,V__01>=0,V_n+1=J,V_n+1=I,G+1=F,G+1=E,G+1=C,G+1=V__0,K=4,H=3,D=2,B=4] 
* CE 31: eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) = 3+ eval_counterex1b_bb1_in(V_n,V__01,C,V__01,D,V_n,V__01,E,V__01):[11]+ eval_counterex1b_bb4_in(V_n,V__01,F,V__01,G,V__01,H,V_n,I,G):[[13],14]+ eval_counterex1b__critedge2_in(V_n,I,G,J)
     [V_n>=I,I>=V__01+1,G+1>=0,V__01>=0,G+1=F,G+1=E,G+1=C,G+1=V__0,J=4,H=3,D=2,B=4] 
* CE 32: eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) = 3+ eval_counterex1b_bb1_in(V_n,V__01,C,V__01,D,V_n,V__01,E,V__01):[11]+ eval_counterex1b_bb4_in(V_n,V__01,F,V__01,G,V__01,H,V_n,V__01,G):[15]+ eval_counterex1b__critedge2_in(V_n,V__01,G,I)
     [V__01>=V_n+1,V__01>=0,G+1>=0,G+1=F,G+1=E,G+1=C,G+1=V__0,I=4,H=3,D=2,B=4] 
* CE 33: eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) = 3+ eval_counterex1b_bb1_in(V_n,V__01,C,V__01,D,V_n,V__01,E,V__01):[11]+ eval_counterex1b_bb4_in(V_n,V__01,F,V__01,G,V__01,H,V_n,V__01,G):[14]+ eval_counterex1b__critedge2_in(V_n,V__01,G,I)
     [V_n>=V__01,V__01>=0,G+1>=0,G+1=F,G+1=E,G+1=C,G+1=V__0,I=4,H=3,D=2,B=4] 

### Cost equations --> "Loop" of eval_counterex1b__critedge2_in/4 
* CEs [25] --> Loop 16 
* CEs [24] --> Loop 17 
* CEs [23] --> Loop 18 
* CEs [31] --> Loop 19 
* CEs [19] --> Loop 20 
* CEs [27] --> Loop 21 
* CEs [33] --> Loop 22 
* CEs [32] --> Loop 23 
* CEs [29] --> Loop 24 
* CEs [28] --> Loop 25 
* CEs [30] --> Loop 26 
* CEs [22] --> Loop 27 
* CEs [18] --> Loop 28 
* CEs [26] --> Loop 29 
* CEs [21] --> Loop 30 
* CEs [20] --> Loop 31 
* CEs [17] --> Loop 32 

#### Loops of eval_counterex1b__critedge2_in/4 
* Loop 16: eval_counterex1b__critedge2_in(V_n,V__01,V__0,B)->  eval_counterex1b__critedge2_in(V_n,V__01',V__0',B')
                  [V__01>=V__01'+1,V_n>=V__01',V__0'+1>=0,V__01'>=0,V__0'+1=V__0,B'=4,B=4] 
* Loop 17: eval_counterex1b__critedge2_in(V_n,V__01,V__0,B)->  eval_counterex1b__critedge2_in(V_n,V__01',V__0',B')
                  [V__01>=V__01'+1,V__01'>=V_n+1,V__0'+1>=0,V__01'>=0,V__0'+1=V__0,B'=4,B=4] 
* Loop 18: eval_counterex1b__critedge2_in(V_n,V__01,V__0,B)->  eval_counterex1b__critedge2_in(V_n,V__01',V__0',B')
                  [V_n>=V__01',V__0'+1>=0,V__01'>=1,V__01>=1,V__0'+1=V__0,B'=4,B=4] 
* Loop 19: eval_counterex1b__critedge2_in(V_n,V__01,V__0,B)->  eval_counterex1b__critedge2_in(V_n,V__01',V__0',B')
                  [V_n>=V__01',V__01'>=V__01+1,V__0'+1>=0,V__01>=0,V__0'+1=V__0,B'=4,B=4] 
* Loop 20: eval_counterex1b__critedge2_in(V_n,V__01,V__0,B)->  eval_counterex1b__critedge2_in(V_n,V__01',V__0',B')
                  [V_n>=V__01',V__0'+1>=0,V__01'>=0,V__01>=0,V__0'+1=V__0,B'=4,B=4] 
* Loop 21: eval_counterex1b__critedge2_in(V_n,V__01,V__0,B)->  eval_counterex1b__critedge2_in(V_n,V__01',V__0',B')
                  [V_n>=V__01',V__01'>=V__01+1,V__0'+1>=0,0>=V__01+1,V__0'+1=V__0,B'=4,B=4] 
* Loop 22: eval_counterex1b__critedge2_in(V_n,V__01,V__0,B)->  eval_counterex1b__critedge2_in(V_n,V__01,V__0',B')
                  [V_n>=V__01,V__0'+1>=0,V__01>=0,V__0'+1=V__0,B'=4,B=4] 
* Loop 23: eval_counterex1b__critedge2_in(V_n,V__01,V__0,B)->  eval_counterex1b__critedge2_in(V_n,V__01,V__0',B')
                  [V__01>=V_n+1,V__0'+1>=0,V__01>=0,V__0'+1=V__0,B'=4,B=4] 
* Loop 24: eval_counterex1b__critedge2_in(V_n,V__01,V__0,B)->  eval_counterex1b__critedge2_in(V_n,V__01,V__0',B')
                  [V_n>=V__01,V__0'+1>=0,0>=V__01+1,V__0'+1=V__0,B'=4,B=4] 
* Loop 25: eval_counterex1b__critedge2_in(V_n,V__01,V__0,B)->  eval_counterex1b__critedge2_in(V_n,V__01,V__0',B')
                  [V__01>=V_n+1,V__0'+1>=0,0>=V__01+1,V__0'+1=V__0,B'=4,B=4] 
* Loop 26: eval_counterex1b__critedge2_in(V_n,V__01,V__0,B)->  eval_counterex1b__critedge2_in(V_n,V__01',V__0',B')
                  [V_n>=V__01,V__0'+1>=0,V__01>=0,V_n+1=V__01',V__0'+1=V__0,B'=4,B=4] 
* Loop 27: eval_counterex1b__critedge2_in(V_n,V__01,V__0,B)->  eval_counterex1b__critedge2_in(V_n,V__01',V__0',B')
                  [V__0'+1>=0,V__01>=1,V_n>=0,V_n+1=V__01',V__0'+1=V__0,B'=4,B=4] 
* Loop 28: eval_counterex1b__critedge2_in(V_n,V__01,V__0,B)->  eval_counterex1b__critedge2_in(V_n,V__01',V__0',B')
                  [V__0'+1>=0,V__01>=0,V_n+1>=0,V_n+1=V__01',V__0'+1=V__0,B'=4,B=4] 
* Loop 29: eval_counterex1b__critedge2_in(V_n,V__01,V__0,B)->  eval_counterex1b__critedge2_in(V_n,V__01',V__0',B')
                  [V_n>=V__01,V__0'+1>=0,0>=V__01+1,V_n+1=V__01',V__0'+1=V__0,B'=4,B=4] 
* Loop 30: eval_counterex1b__critedge2_in(V_n,V__01,V__0,B)->  eval_counterex1b__critedge2_in(V_n,V__01',V__0',B')
                  [V__0'+1>=0,V__01>=0,V_n+1>=0,V__0'+1=V__0,B'=4,V__01'+1=0,B=4] 
* Loop 31: eval_counterex1b__critedge2_in(V_n,V__01,V__0,B)->  eval_counterex1b__critedge2_in(V_n,V__01',V__0',B')
                  [V__0'+1>=0,V__01>=0,0>=V_n+2,V__0'+1=V__0,B'=4,V__01'+1=0,B=4] 
* Loop 32: eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) [0>=V__0+1,B=4] 

### Ranking functions of CR eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) 
* RF of phase [16,17,18,19,20,21,22,23,24,26,27,28,29,30]: [V__0+1]
* RF of phase [25]: [V__0+1]

#### Partial ranking functions of CR eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) 
* Partial RF of phase [16,17,18,19,20,21,22,23,24,26,27,28,29,30]:
  - RF of loop [16:1,17:1]:
    V__01 depends on loops [18:1,19:1,20:1,21:1,26:1,27:1,28:1,29:1] 
  - RF of loop [16:1,17:1,18:1,19:1,20:1,21:1,22:1,23:1,24:1,26:1,27:1,28:1,29:1,30:1]:
    V__0+1
  - RF of loop [17:1]:
    -V_n+V__01-1 depends on loops [18:1,19:1,20:1,21:1,26:1,27:1,28:1,29:1] 
  - RF of loop [19:1,21:1]:
    V_n-V__01 depends on loops [16:1,17:1,18:1,20:1,27:1,28:1,30:1] 
  - RF of loop [21:1,29:1]:
    -V__01 depends on loops [16:1,17:1,18:1,20:1,27:1,28:1,30:1] 
  - RF of loop [26:1,29:1]:
    V_n-V__01+1 depends on loops [16:1,17:1,18:1,20:1,27:1,28:1,30:1] 
  - RF of loop [30:1]:
    V__01+1 depends on loops [18:1,19:1,20:1,21:1,26:1,27:1,28:1,29:1] 
* Partial RF of phase [25]:
  - RF of loop [25:1]:
    V__0+1


### Resulting Chains:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) 
* [[25],32]
* [[16,17,18,19,20,21,22,23,24,26,27,28,29,30],[25],32]
* [[16,17,18,19,20,21,22,23,24,26,27,28,29,30],32]
* [[16,17,18,19,20,21,22,23,24,26,27,28,29,30],31,[25],32]
* [[16,17,18,19,20,21,22,23,24,26,27,28,29,30],31,32]
* [32]
* [31,[25],32]
* [31,32]


### Specialization of cost equations eval_counterex1b_start/4 
* CE 2 is refined into CE [34,35,36,37,38,39,40,41] 


#### Refined cost equations eval_counterex1b_start/4 
* CE 34: eval_counterex1b_start(V_n,V_x,V_y,B) = 1+ eval_counterex1b__critedge2_in(V_n,V_y,V_x,C):[[25],32]
     [V_y>=V_n+1,V_x>=0,0>=V_y+1,C=4] 
* CE 35: eval_counterex1b_start(V_n,V_x,V_y,B) = 1+ eval_counterex1b__critedge2_in(V_n,V_y,V_x,C):[[16,17,18,19,20,21,22,23,24,26,27,28,29,30],[25],32]
     [V_n>=V_y,V_x>=1,0>=V_n+2,C=4] 
* CE 36: eval_counterex1b_start(V_n,V_x,V_y,B) = 1+ eval_counterex1b__critedge2_in(V_n,V_y,V_x,C):[[16,17,18,19,20,21,22,23,24,26,27,28,29,30],32]
     [V_x>=0,C=4] 
* CE 37: eval_counterex1b_start(V_n,V_x,V_y,B) = 1+ eval_counterex1b__critedge2_in(V_n,V_y,V_x,C):[[16,17,18,19,20,21,22,23,24,26,27,28,29,30],31,[25],32]
     [V_x>=2,V_y>=0,0>=V_n+2,C=4] 
* CE 38: eval_counterex1b_start(V_n,V_x,V_y,B) = 1+ eval_counterex1b__critedge2_in(V_n,V_y,V_x,C):[[16,17,18,19,20,21,22,23,24,26,27,28,29,30],31,32]
     [V_x>=1,V_y>=0,0>=V_n+2,C=4] 
* CE 39: eval_counterex1b_start(V_n,V_x,V_y,B) = 1+ eval_counterex1b__critedge2_in(V_n,V_y,V_x,C):[32]
     [0>=V_x+1,C=4] 
* CE 40: eval_counterex1b_start(V_n,V_x,V_y,B) = 1+ eval_counterex1b__critedge2_in(V_n,V_y,V_x,C):[31,[25],32]
     [V_x>=1,V_y>=0,0>=V_n+2,C=4] 
* CE 41: eval_counterex1b_start(V_n,V_x,V_y,B) = 1+ eval_counterex1b__critedge2_in(V_n,V_y,C,D):[31,32]
     [V_y>=0,0>=V_n+2,D=4,C=0,V_x=0] 

### Cost equations --> "Loop" of eval_counterex1b_start/4 
* CEs [36] --> Loop 33 
* CEs [34] --> Loop 34 
* CEs [39] --> Loop 35 
* CEs [37] --> Loop 36 
* CEs [35] --> Loop 37 
* CEs [40] --> Loop 38 
* CEs [38] --> Loop 39 
* CEs [41] --> Loop 40 

#### Loops of eval_counterex1b_start/4 
* Loop 33: eval_counterex1b_start(V_n,V_x,V_y,B) [V_x>=0] 
* Loop 34: eval_counterex1b_start(V_n,V_x,V_y,B) [V_y>=V_n+1,V_x>=0,0>=V_y+1] 
* Loop 35: eval_counterex1b_start(V_n,V_x,V_y,B) [0>=V_x+1] 
* Loop 36: eval_counterex1b_start(V_n,V_x,V_y,B) [V_y>=0,V_x>=2,0>=V_n+2] 
* Loop 37: eval_counterex1b_start(V_n,V_x,V_y,B) [V_n>=V_y,V_x>=1,0>=V_n+2] 
* Loop 38: eval_counterex1b_start(V_n,V_x,V_y,B) [V_y>=0,V_x>=1,0>=V_n+2] 
* Loop 39: eval_counterex1b_start(V_n,V_x,V_y,B) [V_y>=0,V_x>=1,0>=V_n+2] 
* Loop 40: eval_counterex1b_start(V_n,V_x,V_y,B) [V_y>=0,0>=V_n+2,V_x=0] 

### Ranking functions of CR eval_counterex1b_start(V_n,V_x,V_y,B) 

#### Partial ranking functions of CR eval_counterex1b_start(V_n,V_x,V_y,B) 


### Resulting Chains:eval_counterex1b_start(V_n,V_x,V_y,B) 
* [40]
* [39]
* [38]
* [37]
* [36]
* [35]
* [34]
* [33]


Computing Bounds
=====================================

#### Cost of loops [10] 

 * loop 10:eval_counterex1b_bb1_in(V_n,V__01,V__0,V__1,B,C,D,E,F) -> [eval_counterex1b_bb1_in(V_n',V__01',V__0',V__1',B',C',D',E',F')] 
1
#### Cost of phase [10]:eval_counterex1b_bb1_in(V_n,V__01,V__0,V__1,B,C,D,E,F) -> [eval_counterex1b_bb1_in(V_n',V__01',V__0',V__1',B',C',D',E',F')] 
1*it(10)+0
  Such that:it(10) =< V__1+1
it(10) =< V__1-V__1'
it(10) >= V__1-V__1'

#### Cost of phase [10]:eval_counterex1b_bb1_in(V_n,V__01,V__0,V__1,B,C,D,E,F) -> [eval_counterex1b_bb1_in(V_n',V__01',V__0',V__1',B',C',D',E',F')] 
1*it(10)+0
  Such that:it(10) =< V__1+1
it(10) =< V__1-V__1'
it(10) >= V__1-V__1'

#### Cost of chains of eval_counterex1b_bb1_in(V_n,V__01,V__0,V__1,B,C,D,E,F):
* Chain [[10],12]: 1*it(10)+0
  Such that:it(10) =< V__1+1
it(10) >= V__1+1

  with precondition: [B=2,F+1=0,V_n=C,V__01=D,V__0=E,V__0>=0,V__1>=0,V__01>=V__1] 

* Chain [[10],11]: 1*it(10)+0
  Such that:it(10) =< V__1-F
it(10) >= V__1-F

  with precondition: [B=2,V_n=C,V__01=D,V__0=E,V__0>=0,F>=0,V__01>=V__1,V__1>=F+1] 

* Chain [12]: 0
  with precondition: [B=2,C=V_n,V__01=D,V__0=E,V__1=F,0>=V__1+1,V__0>=0,V__01>=V__1] 

* Chain [11]: 0
  with precondition: [B=2,C=V_n,V__01=D,V__0=E,V__1=F,V__0>=0,V__1>=0,V__01>=V__1] 


#### Cost of loops [13] 

 * loop 13:eval_counterex1b_bb4_in(V_n,V__01,V__0,V__1,V_5,V__2,B,C,D,E) -> [eval_counterex1b_bb4_in(V_n',V__01',V__0',V__1',V_5',V__2',B',C',D',E')] 
1
#### Cost of phase [13]:eval_counterex1b_bb4_in(V_n,V__01,V__0,V__1,V_5,V__2,B,C,D,E) -> [eval_counterex1b_bb4_in(V_n',V__01',V__0',V__1',V_5',V__2',B',C',D',E')] 
1*it(13)+0
  Such that:it(13) =< V_n-V__2+1
it(13) =< V_n-V__2-V_n'+V__2'
it(13) >= V_n-V__2-V_n'+V__2'

#### Cost of phase [13]:eval_counterex1b_bb4_in(V_n,V__01,V__0,V__1,V_5,V__2,B,C,D,E) -> [eval_counterex1b_bb4_in(V_n',V__01',V__0',V__1',V_5',V__2',B',C',D',E')] 
1*it(13)+0
  Such that:it(13) =< V_n-V__2+1
it(13) =< V_n-V__2-V_n'+V__2'
it(13) >= V_n-V__2-V_n'+V__2'

#### Cost of chains of eval_counterex1b_bb4_in(V_n,V__01,V__0,V__1,V_5,V__2,B,C,D,E):
* Chain [[13],15]: 1*it(13)+0
  Such that:it(13) =< V_n-V__2+1
it(13) >= V_n-V__2+1

  with precondition: [B=3,V__0=V_5+1,V_n=C,V_n+1=D,V__0=E+1,V__2>=V__1,V_n>=V__2] 

* Chain [[13],14]: 1*it(13)+0
  Such that:it(13) =< -V__2+D
it(13) >= -V__2+D

  with precondition: [B=3,V__0=V_5+1,V_n=C,V__0=E+1,V__2>=V__1,D>=V__2+1,V_n>=D] 

* Chain [15]: 0
  with precondition: [B=3,V__0=V_5+1,V_n=C,V__2=D,V__0=E+1,V__2>=V_n+1,V__2>=V__1] 

* Chain [14]: 0
  with precondition: [B=3,V__0=V_5+1,V_n=C,V__2=D,V__0=E+1,V__2>=V__1,V_n>=V__2] 


#### Cost of loops [25] 

 * loop 25:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
3
#### Cost of phase [25]:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
3*it(25)+0
  Such that:it(25) =< V__0+1
it(25) =< V__0-V__0'
it(25) >= V__0-V__0'

#### Cost of loops [16,17,18,19,20,21,22,23,24,26,27,28,29,30] 

 * loop 16:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
1*s(2)+3
  Such that:s(2) =< V__01-V__01'
s(2) >= V__01-V__01'

 * loop 17:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
1*s(4)+3
  Such that:s(4) =< V__01-V__01'
s(4) >= V__01-V__01'

 * loop 18:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
1*s(7)+1*s(8)+3
  Such that:s(7) =< V__01
s(8) =< V__01'
s(7) >= V__01-V__01'+1
s(9) >= 1
s(7) >= s(9)
s(8) >= s(9)

 * loop 19:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
1*s(11)+3
  Such that:s(11) =< -V__01+V__01'
s(11) >= -V__01+V__01'

 * loop 20:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
1*s(14)+1*s(15)+3
  Such that:s(14) =< V__01+1
s(15) =< V__01'+1
s(14) >= V__01+1
s(15) >= V__01'+1

 * loop 21:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
1*s(17)+3
  Such that:s(17) =< -V__01+V__01'
s(17) >= -V__01+V__01'

 * loop 22:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
3
 * loop 23:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
3
 * loop 24:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
3
 * loop 26:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
1*s(19)+3
  Such that:s(19) =< -V__01+V__01'
s(19) >= V_n-V__01+1

 * loop 27:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
1*s(22)+1*s(23)+3
  Such that:s(22) =< V__01
s(23) =< V_n'+1
s(22) >= -V_n+V__01
s(23) >= V_n-V__01+2

 * loop 28:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
1*s(26)+1*s(27)+3
  Such that:s(26) =< V__01+1
s(27) =< V_n'+2
s(26) >= V__01+1
s(27) >= V__01'+1

 * loop 29:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
1*s(29)+3
  Such that:s(29) =< V_n-V__01+1
s(29) >= V_n-V__01+1

 * loop 30:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
1*s(31)+3
  Such that:s(31) =< V__01+1
s(31) >= V__01+1

#### Cost of phase [16,17,18,19,20,21,22,23,24,26,27,28,29,30]:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
3*it(16)+3*it(17)+3*it(18)+3*it(19)+3*it(20)+3*it(21)+3*it(22)+3*it(23)+3*it(24)+3*it(26)+3*it(27)+3*it(28)+3*it(29)+3*it(30)+1*s(32)+1*s(33)+1*s(34)+1*s(35)+1*s(37)+1*s(38)+1*s(39)+1*s(40)+1*s(41)+1*s(42)+1*s(43)+1*s(44)+1*s(45)+1*s(46)+1*s(47)+0
  Such that:aux(27) =< V_n
aux(227) =< -V_n+V__01-1
aux(228) =< -V_n+V_n'
aux(229) =< V_n-V__01
aux(230) =< V_n-V__01+1
aux(233) =< V__01
aux(235) =< V__0+1
aux(236) =< V__0-V__0'
aux(69) =< aux(228)
aux(36)+it(16) =< aux(235)
aux(37)+it(16) =< aux(235)
aux(38)+it(16) =< aux(235)
aux(39)+it(16) =< aux(235)
aux(65)+it(16) =< aux(235)
aux(68)+it(16) =< aux(235)
aux(69)+it(16) =< aux(235)
it(16) =< aux(235)
it(16) =< aux(235)
it(16) =< aux(235)
it(16) =< aux(235)
it(16) =< aux(235)
it(16) =< aux(235)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(235)
aux(36)+it(16)+it(17)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
aux(37)+it(16)+it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
aux(38)+it(16)+it(17)+it(18)+it(19)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
aux(39)+it(16)+it(17)+it(18)+it(19)+it(20)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
aux(65)+it(16)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
aux(68)+it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(28)+it(29)+it(30) =< aux(236)
aux(69)+it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(29)+it(30) =< aux(236)
it(16)+it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
it(16)+it(17)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
it(16)+it(17)+it(18)+it(19)+it(20)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(27)+it(28)+it(29)+it(30) =< aux(236)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(30) =< aux(236)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29) =< aux(236)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
aux(157) =< aux(27)+2
aux(31) =< aux(27)+1
aux(58) =< aux(27)
aux(59) =< aux(27)-1
aux(77) =< max([aux(229),aux(58),0,aux(59),aux(58),0,0,aux(31)])
aux(15) =< it(28)*aux(31)
aux(135) =< it(20)*aux(31)
aux(14) =< it(27)*aux(58)
aux(11) =< it(20)*aux(58)
aux(9) =< it(18)*aux(59)
aux(134) =< it(18)*aux(58)
s(45) =< it(28)*aux(157)
s(43) =< it(27)*aux(31)
s(39) =< it(20)*aux(31)
aux(24) =< it(18)*aux(59)
s(35) =< it(18)*aux(58)
aux(144) =< aux(77)+1
aux(117) =< aux(77)
aux(70) =< it(30)*aux(31)
aux(138) =< it(30)*aux(157)
aux(132) =< it(16)*aux(31)
s(46) =< it(29)*aux(144)
aux(64) =< it(16)*aux(58)
it(26)+s(46) =< aux(138)+aux(135)+aux(134)+aux(132)+aux(230)
s(41) =< aux(138)+aux(135)+aux(134)+aux(132)+aux(230)
it(19)+s(40) =< aux(70)+aux(69)+aux(68)+aux(11)+aux(9)+aux(65)+aux(64)+aux(229)
it(21)+s(37) =< aux(70)+aux(69)+aux(68)+aux(11)+aux(9)+aux(65)+aux(64)+aux(229)
aux(13) =< it(26)*aux(31)
s(41) =< it(26)*aux(144)
s(40) =< it(21)*aux(117)
aux(25) =< it(19)*aux(58)
s(37) =< it(19)*aux(77)
s(33) =< aux(39)+aux(38)+aux(37)+aux(36)+aux(227)
aux(22) =< max([aux(233),aux(27),aux(31)])+aux(24)+aux(25)+aux(11)+aux(13)+aux(14)+aux(15)
aux(100) =< aux(22)+1
aux(46) =< aux(22)
s(32) =< it(16)*aux(22)
s(47) =< it(30)*aux(100)
s(44) =< it(28)*aux(100)
s(42) =< it(27)*aux(46)
s(38) =< it(20)*aux(100)
s(34) =< it(18)*aux(46)
aux(56) >= -V_n
aux(49) >= -V_n+V__01+1
aux(96) >= V_n+2
aux(123) >= V_n-V__01+1
aux(91) >= V__01+1
aux(238) >= 1
aux(239) >= 2
aux(241) >= V__0-V__0'
aux(237) >= aux(237)
s(43) >= aux(237)
aux(238) >= aux(238)
aux(239) >= aux(239)
aux(47)+it(16)+it(17)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) >= aux(241)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) >= aux(241)
it(16)+it(17)+it(18)+it(19)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+s(39) >= aux(241)
it(16)+it(17)+it(18)+it(19)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(29)+it(30)+s(39)+s(45) >= aux(241)
aux(97) >= aux(96)
aux(122) >= min([aux(123),aux(238),aux(238),aux(238),aux(238),aux(237),aux(237),aux(237),aux(237)])
aux(52) >= aux(56)+2
aux(50) >= aux(56)+1
s(40) >= it(21)*aux(238)
s(39) >= it(20)*aux(238)
s(37) >= it(19)*aux(238)
aux(47) >= aux(47)
s(33) >= it(17)*aux(238)
s(32) >= it(16)*aux(238)
aux(160) >= aux(122)
aux(149) >= aux(122)+1
aux(90) >= min([aux(91),aux(238),aux(238),aux(239),aux(238),aux(96),aux(97),aux(237)])
aux(48) >= min([aux(49),aux(50),aux(239),aux(52),aux(50),aux(239),aux(239),aux(56)])
s(45) >= it(28)*aux(97)
s(41) >= it(26)*aux(122)
aux(154) >= aux(90)
aux(148) >= aux(48)-1
s(46) >= it(29)*aux(160)
s(43) >= it(27)*aux(149)
s(38) >= it(20)*aux(90)
s(34) >= it(18)*aux(48)
s(47) >= it(30)*aux(154)
s(44) >= it(28)*aux(154)
s(42) >= it(27)*aux(148)
s(34) >= aux(47)
s(35) >= aux(47)

#### Cost of phase [16,17,18,19,20,21,22,23,24,26,27,28,29,30]:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
3*it(16)+3*it(17)+3*it(18)+3*it(19)+3*it(20)+3*it(21)+3*it(22)+3*it(23)+3*it(24)+3*it(26)+3*it(27)+3*it(28)+3*it(29)+3*it(30)+1*s(32)+1*s(33)+1*s(34)+1*s(35)+1*s(37)+1*s(38)+1*s(39)+1*s(40)+1*s(41)+1*s(42)+1*s(43)+1*s(44)+1*s(45)+1*s(46)+1*s(47)+0
  Such that:aux(27) =< V_n
aux(227) =< -V_n+V__01-1
aux(228) =< -V_n+V_n'
aux(229) =< V_n-V__01
aux(230) =< V_n-V__01+1
aux(233) =< V__01
aux(235) =< V__0+1
aux(236) =< V__0-V__0'
aux(69) =< aux(228)
aux(36)+it(16) =< aux(235)
aux(37)+it(16) =< aux(235)
aux(38)+it(16) =< aux(235)
aux(39)+it(16) =< aux(235)
aux(65)+it(16) =< aux(235)
aux(68)+it(16) =< aux(235)
aux(69)+it(16) =< aux(235)
it(16) =< aux(235)
it(16) =< aux(235)
it(16) =< aux(235)
it(16) =< aux(235)
it(16) =< aux(235)
it(16) =< aux(235)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(235)
aux(36)+it(16)+it(17)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
aux(37)+it(16)+it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
aux(38)+it(16)+it(17)+it(18)+it(19)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
aux(39)+it(16)+it(17)+it(18)+it(19)+it(20)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
aux(65)+it(16)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
aux(68)+it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(28)+it(29)+it(30) =< aux(236)
aux(69)+it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(29)+it(30) =< aux(236)
it(16)+it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
it(16)+it(17)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
it(16)+it(17)+it(18)+it(19)+it(20)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(27)+it(28)+it(29)+it(30) =< aux(236)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(30) =< aux(236)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29) =< aux(236)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
aux(157) =< aux(27)+2
aux(31) =< aux(27)+1
aux(58) =< aux(27)
aux(59) =< aux(27)-1
aux(77) =< max([aux(229),aux(58),0,aux(59),aux(58),0,0,aux(31)])
aux(15) =< it(28)*aux(31)
aux(135) =< it(20)*aux(31)
aux(14) =< it(27)*aux(58)
aux(11) =< it(20)*aux(58)
aux(9) =< it(18)*aux(59)
aux(134) =< it(18)*aux(58)
s(45) =< it(28)*aux(157)
s(43) =< it(27)*aux(31)
s(39) =< it(20)*aux(31)
aux(24) =< it(18)*aux(59)
s(35) =< it(18)*aux(58)
aux(144) =< aux(77)+1
aux(117) =< aux(77)
aux(70) =< it(30)*aux(31)
aux(138) =< it(30)*aux(157)
aux(132) =< it(16)*aux(31)
s(46) =< it(29)*aux(144)
aux(64) =< it(16)*aux(58)
it(26)+s(46) =< aux(138)+aux(135)+aux(134)+aux(132)+aux(230)
s(41) =< aux(138)+aux(135)+aux(134)+aux(132)+aux(230)
it(19)+s(40) =< aux(70)+aux(69)+aux(68)+aux(11)+aux(9)+aux(65)+aux(64)+aux(229)
it(21)+s(37) =< aux(70)+aux(69)+aux(68)+aux(11)+aux(9)+aux(65)+aux(64)+aux(229)
aux(13) =< it(26)*aux(31)
s(41) =< it(26)*aux(144)
s(40) =< it(21)*aux(117)
aux(25) =< it(19)*aux(58)
s(37) =< it(19)*aux(77)
s(33) =< aux(39)+aux(38)+aux(37)+aux(36)+aux(227)
aux(22) =< max([aux(233),aux(27),aux(31)])+aux(24)+aux(25)+aux(11)+aux(13)+aux(14)+aux(15)
aux(100) =< aux(22)+1
aux(46) =< aux(22)
s(32) =< it(16)*aux(22)
s(47) =< it(30)*aux(100)
s(44) =< it(28)*aux(100)
s(42) =< it(27)*aux(46)
s(38) =< it(20)*aux(100)
s(34) =< it(18)*aux(46)
aux(56) >= -V_n
aux(49) >= -V_n+V__01+1
aux(96) >= V_n+2
aux(123) >= V_n-V__01+1
aux(91) >= V__01+1
aux(238) >= 1
aux(239) >= 2
aux(241) >= V__0-V__0'
aux(237) >= aux(237)
s(43) >= aux(237)
aux(238) >= aux(238)
aux(239) >= aux(239)
aux(47)+it(16)+it(17)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) >= aux(241)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) >= aux(241)
it(16)+it(17)+it(18)+it(19)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+s(39) >= aux(241)
it(16)+it(17)+it(18)+it(19)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(29)+it(30)+s(39)+s(45) >= aux(241)
aux(97) >= aux(96)
aux(122) >= min([aux(123),aux(238),aux(238),aux(238),aux(238),aux(237),aux(237),aux(237),aux(237)])
aux(52) >= aux(56)+2
aux(50) >= aux(56)+1
s(40) >= it(21)*aux(238)
s(39) >= it(20)*aux(238)
s(37) >= it(19)*aux(238)
aux(47) >= aux(47)
s(33) >= it(17)*aux(238)
s(32) >= it(16)*aux(238)
aux(160) >= aux(122)
aux(149) >= aux(122)+1
aux(90) >= min([aux(91),aux(238),aux(238),aux(239),aux(238),aux(96),aux(97),aux(237)])
aux(48) >= min([aux(49),aux(50),aux(239),aux(52),aux(50),aux(239),aux(239),aux(56)])
s(45) >= it(28)*aux(97)
s(41) >= it(26)*aux(122)
aux(154) >= aux(90)
aux(148) >= aux(48)-1
s(46) >= it(29)*aux(160)
s(43) >= it(27)*aux(149)
s(38) >= it(20)*aux(90)
s(34) >= it(18)*aux(48)
s(47) >= it(30)*aux(154)
s(44) >= it(28)*aux(154)
s(42) >= it(27)*aux(148)
s(34) >= aux(47)
s(35) >= aux(47)

#### Cost of phase [16,17,18,19,20,21,22,23,24,26,27,28,29,30]:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
3*it(16)+3*it(17)+3*it(18)+3*it(19)+3*it(20)+3*it(21)+3*it(22)+3*it(23)+3*it(24)+3*it(26)+3*it(27)+3*it(28)+3*it(29)+3*it(30)+1*s(32)+1*s(33)+1*s(34)+1*s(35)+1*s(37)+1*s(38)+1*s(39)+1*s(40)+1*s(41)+1*s(42)+1*s(43)+1*s(44)+1*s(45)+1*s(46)+1*s(47)+0
  Such that:aux(27) =< V_n
aux(227) =< -V_n+V__01-1
aux(228) =< -V_n+V_n'
aux(229) =< V_n-V__01
aux(230) =< V_n-V__01+1
aux(233) =< V__01
aux(235) =< V__0+1
aux(236) =< V__0-V__0'
aux(69) =< aux(228)
aux(36)+it(16) =< aux(235)
aux(37)+it(16) =< aux(235)
aux(38)+it(16) =< aux(235)
aux(39)+it(16) =< aux(235)
aux(65)+it(16) =< aux(235)
aux(68)+it(16) =< aux(235)
aux(69)+it(16) =< aux(235)
it(16) =< aux(235)
it(16) =< aux(235)
it(16) =< aux(235)
it(16) =< aux(235)
it(16) =< aux(235)
it(16) =< aux(235)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(235)
aux(36)+it(16)+it(17)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
aux(37)+it(16)+it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
aux(38)+it(16)+it(17)+it(18)+it(19)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
aux(39)+it(16)+it(17)+it(18)+it(19)+it(20)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
aux(65)+it(16)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
aux(68)+it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(28)+it(29)+it(30) =< aux(236)
aux(69)+it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(29)+it(30) =< aux(236)
it(16)+it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
it(16)+it(17)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
it(16)+it(17)+it(18)+it(19)+it(20)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(27)+it(28)+it(29)+it(30) =< aux(236)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(30) =< aux(236)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29) =< aux(236)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
aux(157) =< aux(27)+2
aux(31) =< aux(27)+1
aux(58) =< aux(27)
aux(59) =< aux(27)-1
aux(77) =< max([aux(229),aux(58),0,aux(59),aux(58),0,0,aux(31)])
aux(15) =< it(28)*aux(31)
aux(135) =< it(20)*aux(31)
aux(14) =< it(27)*aux(58)
aux(11) =< it(20)*aux(58)
aux(9) =< it(18)*aux(59)
aux(134) =< it(18)*aux(58)
s(45) =< it(28)*aux(157)
s(43) =< it(27)*aux(31)
s(39) =< it(20)*aux(31)
aux(24) =< it(18)*aux(59)
s(35) =< it(18)*aux(58)
aux(144) =< aux(77)+1
aux(117) =< aux(77)
aux(70) =< it(30)*aux(31)
aux(138) =< it(30)*aux(157)
aux(132) =< it(16)*aux(31)
s(46) =< it(29)*aux(144)
aux(64) =< it(16)*aux(58)
it(26)+s(46) =< aux(138)+aux(135)+aux(134)+aux(132)+aux(230)
s(41) =< aux(138)+aux(135)+aux(134)+aux(132)+aux(230)
it(19)+s(40) =< aux(70)+aux(69)+aux(68)+aux(11)+aux(9)+aux(65)+aux(64)+aux(229)
it(21)+s(37) =< aux(70)+aux(69)+aux(68)+aux(11)+aux(9)+aux(65)+aux(64)+aux(229)
aux(13) =< it(26)*aux(31)
s(41) =< it(26)*aux(144)
s(40) =< it(21)*aux(117)
aux(25) =< it(19)*aux(58)
s(37) =< it(19)*aux(77)
s(33) =< aux(39)+aux(38)+aux(37)+aux(36)+aux(227)
aux(22) =< max([aux(233),aux(27),aux(31)])+aux(24)+aux(25)+aux(11)+aux(13)+aux(14)+aux(15)
aux(100) =< aux(22)+1
aux(46) =< aux(22)
s(32) =< it(16)*aux(22)
s(47) =< it(30)*aux(100)
s(44) =< it(28)*aux(100)
s(42) =< it(27)*aux(46)
s(38) =< it(20)*aux(100)
s(34) =< it(18)*aux(46)
aux(56) >= -V_n
aux(49) >= -V_n+V__01+1
aux(96) >= V_n+2
aux(123) >= V_n-V__01+1
aux(91) >= V__01+1
aux(238) >= 1
aux(239) >= 2
aux(241) >= V__0-V__0'
aux(237) >= aux(237)
s(43) >= aux(237)
aux(238) >= aux(238)
aux(239) >= aux(239)
aux(47)+it(16)+it(17)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) >= aux(241)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) >= aux(241)
it(16)+it(17)+it(18)+it(19)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+s(39) >= aux(241)
it(16)+it(17)+it(18)+it(19)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(29)+it(30)+s(39)+s(45) >= aux(241)
aux(97) >= aux(96)
aux(122) >= min([aux(123),aux(238),aux(238),aux(238),aux(238),aux(237),aux(237),aux(237),aux(237)])
aux(52) >= aux(56)+2
aux(50) >= aux(56)+1
s(40) >= it(21)*aux(238)
s(39) >= it(20)*aux(238)
s(37) >= it(19)*aux(238)
aux(47) >= aux(47)
s(33) >= it(17)*aux(238)
s(32) >= it(16)*aux(238)
aux(160) >= aux(122)
aux(149) >= aux(122)+1
aux(90) >= min([aux(91),aux(238),aux(238),aux(239),aux(238),aux(96),aux(97),aux(237)])
aux(48) >= min([aux(49),aux(50),aux(239),aux(52),aux(50),aux(239),aux(239),aux(56)])
s(45) >= it(28)*aux(97)
s(41) >= it(26)*aux(122)
aux(154) >= aux(90)
aux(148) >= aux(48)-1
s(46) >= it(29)*aux(160)
s(43) >= it(27)*aux(149)
s(38) >= it(20)*aux(90)
s(34) >= it(18)*aux(48)
s(47) >= it(30)*aux(154)
s(44) >= it(28)*aux(154)
s(42) >= it(27)*aux(148)
s(34) >= aux(47)
s(35) >= aux(47)

#### Cost of loops [16,17,18,19,20,21,22,23,24,26,27,28,29,30] 

 * loop 16:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
1*s(2)+3
  Such that:s(2) =< V__01-V__01'
s(2) >= V__01-V__01'

 * loop 17:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
1*s(4)+3
  Such that:s(4) =< V__01-V__01'
s(4) >= V__01-V__01'

 * loop 18:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
1*s(7)+1*s(8)+3
  Such that:s(7) =< V__01
s(8) =< V__01'
s(7) >= V__01-V__01'+1
s(9) >= 1
s(7) >= s(9)
s(8) >= s(9)

 * loop 19:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
1*s(11)+3
  Such that:s(11) =< -V__01+V__01'
s(11) >= -V__01+V__01'

 * loop 20:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
1*s(14)+1*s(15)+3
  Such that:s(14) =< V__01+1
s(15) =< V__01'+1
s(14) >= V__01+1
s(15) >= V__01'+1

 * loop 21:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
1*s(17)+3
  Such that:s(17) =< -V__01+V__01'
s(17) >= -V__01+V__01'

 * loop 22:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
3
 * loop 23:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
3
 * loop 24:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
3
 * loop 26:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
1*s(19)+3
  Such that:s(19) =< -V__01+V__01'
s(19) >= V_n-V__01+1

 * loop 27:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
1*s(22)+1*s(23)+3
  Such that:s(22) =< V__01
s(23) =< V_n'+1
s(22) >= -V_n+V__01
s(23) >= V_n-V__01+2

 * loop 28:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
1*s(26)+1*s(27)+3
  Such that:s(26) =< V__01+1
s(27) =< V_n'+2
s(26) >= V__01+1
s(27) >= V__01'+1

 * loop 29:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
1*s(29)+3
  Such that:s(29) =< V_n-V__01+1
s(29) >= V_n-V__01+1

 * loop 30:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
1*s(31)+3
  Such that:s(31) =< V__01+1
s(31) >= V__01+1

#### Cost of phase [16,17,18,19,20,21,22,23,24,26,27,28,29,30]:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [] 
3*it(16)+3*it(17)+3*it(18)+3*it(19)+3*it(20)+3*it(21)+3*it(22)+3*it(23)+3*it(24)+3*it(26)+3*it(27)+3*it(28)+3*it(29)+3*it(30)+3*it([31,[25],32])+1*s(32)+1*s(33)+1*s(34)+1*s(35)+1*s(37)+1*s(38)+1*s(39)+1*s(40)+1*s(41)+1*s(42)+1*s(43)+1*s(44)+1*s(45)+1*s(46)+1*s(47)+3*s(49)+1*s(50)+0
  Such that:it([31,[25],32]) =< 1
aux(270) =< V_n
s(49) =< V__0
aux(502) =< -V_n-1
aux(503) =< -V_n+V__01-1
aux(504) =< V_n-V__01
aux(505) =< V_n-V__01+1
aux(507) =< V__01
aux(508) =< V__01+1
aux(509) =< V__0+1
aux(311)+it([31,[25],32]) =< aux(502)
it([31,[25],32]) =< aux(502)
aux(279)+it(16)+it(17)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,[25],32]) =< aux(509)
aux(280)+it(16)+it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,[25],32]) =< aux(509)
aux(281)+it(16)+it(17)+it(18)+it(19)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,[25],32]) =< aux(509)
aux(282)+it(16)+it(17)+it(18)+it(19)+it(20)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,[25],32]) =< aux(509)
aux(307)+it(16)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,[25],32]) =< aux(509)
aux(310)+it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(28)+it(29)+it(30)+it([31,[25],32]) =< aux(509)
aux(311)+it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(29)+it(30)+it([31,[25],32]) =< aux(509)
it(16)+it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,[25],32]) =< aux(509)
it(16)+it(17)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,[25],32]) =< aux(509)
it(16)+it(17)+it(18)+it(19)+it(20)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,[25],32]) =< aux(509)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(27)+it(28)+it(29)+it(30)+it([31,[25],32]) =< aux(509)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(30)+it([31,[25],32]) =< aux(509)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it([31,[25],32]) =< aux(509)
it(16)+it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,[25],32]) =< aux(509)
it(16)+it(17)+it(18)+it(19)+it(20)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,[25],32]) =< aux(509)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(27)+it(28)+it(29)+it(30)+it([31,[25],32]) =< aux(509)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(30)+it([31,[25],32]) =< aux(509)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,[25],32]) =< aux(509)
aux(399) =< aux(270)+2
aux(274) =< aux(270)+1
aux(300) =< aux(270)
aux(301) =< aux(270)-1
aux(319) =< max([aux(504),aux(300),0,aux(301),aux(300),0,0,aux(274)])
aux(258) =< it(28)*aux(274)
aux(257) =< it(27)*aux(300)
aux(254) =< it(20)*aux(300)
aux(252) =< it(18)*aux(301)
aux(377) =< it(20)*aux(274)
aux(376) =< it(18)*aux(300)
s(45) =< it(28)*aux(399)
s(43) =< it(27)*aux(274)
s(39) =< it(20)*aux(274)
aux(267) =< it(18)*aux(301)
s(35) =< it(18)*aux(300)
aux(386) =< aux(319)+1
aux(359) =< aux(319)
aux(433) =< it(29)*aux(399)
aux(312) =< it(30)*aux(274)
aux(380) =< it(30)*aux(399)
aux(374) =< it(16)*aux(274)
s(46) =< it(29)*aux(386)
aux(306) =< it(16)*aux(300)
it(26)+s(46) =< aux(380)+aux(377)+aux(376)+aux(374)+aux(505)
s(41) =< aux(380)+aux(377)+aux(376)+aux(374)+aux(505)
it(19)+s(40) =< aux(312)+aux(311)+aux(310)+aux(254)+aux(252)+aux(307)+aux(306)+aux(504)
it(21)+s(37) =< aux(312)+aux(311)+aux(310)+aux(254)+aux(252)+aux(307)+aux(306)+aux(504)
aux(256) =< it(26)*aux(274)
aux(429) =< it(21)*aux(274)
aux(253) =< it(19)*aux(300)
s(41) =< it(26)*aux(386)
s(40) =< it(21)*aux(359)
aux(268) =< it(19)*aux(300)
s(37) =< it(19)*aux(319)
it([31,[25],32])+s(33) =< aux(282)+aux(281)+aux(280)+aux(279)+aux(503)
aux(265) =< max([aux(507),aux(270),aux(274)])+aux(267)+aux(268)+aux(254)+aux(256)+aux(257)+aux(258)
aux(342) =< aux(265)+1
aux(289) =< aux(265)
s(32) =< it(16)*aux(265)
s(47) =< it(30)*aux(342)
s(44) =< it(28)*aux(342)
s(42) =< it(27)*aux(289)
s(38) =< it(20)*aux(342)
s(34) =< it(18)*aux(289)
s(50) =< it([31,[25],32])*aux(342)
s(50) =< aux(433)+aux(258)+aux(257)+aux(256)+aux(429)+aux(254)+aux(253)+aux(252)+aux(508)
aux(298) >= -V_n
aux(291) >= -V_n+V__01+1
aux(338) >= V_n+2
aux(365) >= V_n-V__01+1
aux(511) >= 1
aux(512) >= 2
aux(514) >= V__01+1
aux(515) >= V__0
aux(510) >= aux(510)
s(43) >= aux(510)
aux(511) >= aux(511)
it([31,[25],32]) >= aux(511)
aux(512) >= aux(512)
aux(514) >= aux(514)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+s(49) >= aux(515)
it(16)+it(17)+it(18)+it(19)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+s(39)+s(49) >= aux(515)
it(16)+it(17)+it(18)+it(19)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(29)+it(30)+s(39)+s(45)+s(49) >= aux(515)
aux(339) >= aux(338)
aux(364) >= min([aux(365),aux(511),aux(511),aux(511),aux(511),aux(510),aux(510),aux(510),aux(510)])
aux(294) >= aux(298)+2
aux(292) >= aux(298)+1
s(49) >= it([31,[25],32])*aux(510)
s(40) >= it(21)*aux(511)
s(39) >= it(20)*aux(511)
s(37) >= it(19)*aux(511)
s(33) >= it(17)*aux(511)
s(32) >= it(16)*aux(511)
aux(402) >= aux(364)
aux(391) >= aux(364)+1
aux(332) >= min([aux(514),aux(511),aux(511),aux(512),aux(511),aux(338),aux(339),aux(510)])
aux(290) >= min([aux(291),aux(292),aux(512),aux(294),aux(292),aux(512),aux(512),aux(298)])
s(45) >= it(28)*aux(339)
s(41) >= it(26)*aux(364)
aux(396) >= aux(332)
aux(390) >= aux(290)-1
s(46) >= it(29)*aux(402)
s(43) >= it(27)*aux(391)
s(38) >= it(20)*aux(332)
s(34) >= it(18)*aux(290)
s(50) >= it([31,[25],32])*aux(396)
s(47) >= it(30)*aux(396)
s(44) >= it(28)*aux(396)
s(42) >= it(27)*aux(390)

#### Cost of phase [16,17,18,19,20,21,22,23,24,26,27,28,29,30]:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
3*it(16)+3*it(17)+3*it(18)+3*it(19)+3*it(20)+3*it(21)+3*it(22)+3*it(23)+3*it(24)+3*it(26)+3*it(27)+3*it(28)+3*it(29)+3*it(30)+1*s(32)+1*s(33)+1*s(34)+1*s(35)+1*s(37)+1*s(38)+1*s(39)+1*s(40)+1*s(41)+1*s(42)+1*s(43)+1*s(44)+1*s(45)+1*s(46)+1*s(47)+0
  Such that:aux(27) =< V_n
aux(227) =< -V_n+V__01-1
aux(228) =< -V_n+V_n'
aux(229) =< V_n-V__01
aux(230) =< V_n-V__01+1
aux(233) =< V__01
aux(235) =< V__0+1
aux(236) =< V__0-V__0'
aux(69) =< aux(228)
aux(36)+it(16) =< aux(235)
aux(37)+it(16) =< aux(235)
aux(38)+it(16) =< aux(235)
aux(39)+it(16) =< aux(235)
aux(65)+it(16) =< aux(235)
aux(68)+it(16) =< aux(235)
aux(69)+it(16) =< aux(235)
it(16) =< aux(235)
it(16) =< aux(235)
it(16) =< aux(235)
it(16) =< aux(235)
it(16) =< aux(235)
it(16) =< aux(235)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(235)
aux(36)+it(16)+it(17)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
aux(37)+it(16)+it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
aux(38)+it(16)+it(17)+it(18)+it(19)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
aux(39)+it(16)+it(17)+it(18)+it(19)+it(20)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
aux(65)+it(16)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
aux(68)+it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(28)+it(29)+it(30) =< aux(236)
aux(69)+it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(29)+it(30) =< aux(236)
it(16)+it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
it(16)+it(17)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
it(16)+it(17)+it(18)+it(19)+it(20)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(27)+it(28)+it(29)+it(30) =< aux(236)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(30) =< aux(236)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29) =< aux(236)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
aux(157) =< aux(27)+2
aux(31) =< aux(27)+1
aux(58) =< aux(27)
aux(59) =< aux(27)-1
aux(77) =< max([aux(229),aux(58),0,aux(59),aux(58),0,0,aux(31)])
aux(15) =< it(28)*aux(31)
aux(135) =< it(20)*aux(31)
aux(14) =< it(27)*aux(58)
aux(11) =< it(20)*aux(58)
aux(9) =< it(18)*aux(59)
aux(134) =< it(18)*aux(58)
s(45) =< it(28)*aux(157)
s(43) =< it(27)*aux(31)
s(39) =< it(20)*aux(31)
aux(24) =< it(18)*aux(59)
s(35) =< it(18)*aux(58)
aux(144) =< aux(77)+1
aux(117) =< aux(77)
aux(70) =< it(30)*aux(31)
aux(138) =< it(30)*aux(157)
aux(132) =< it(16)*aux(31)
s(46) =< it(29)*aux(144)
aux(64) =< it(16)*aux(58)
it(26)+s(46) =< aux(138)+aux(135)+aux(134)+aux(132)+aux(230)
s(41) =< aux(138)+aux(135)+aux(134)+aux(132)+aux(230)
it(19)+s(40) =< aux(70)+aux(69)+aux(68)+aux(11)+aux(9)+aux(65)+aux(64)+aux(229)
it(21)+s(37) =< aux(70)+aux(69)+aux(68)+aux(11)+aux(9)+aux(65)+aux(64)+aux(229)
aux(13) =< it(26)*aux(31)
s(41) =< it(26)*aux(144)
s(40) =< it(21)*aux(117)
aux(25) =< it(19)*aux(58)
s(37) =< it(19)*aux(77)
s(33) =< aux(39)+aux(38)+aux(37)+aux(36)+aux(227)
aux(22) =< max([aux(233),aux(27),aux(31)])+aux(24)+aux(25)+aux(11)+aux(13)+aux(14)+aux(15)
aux(100) =< aux(22)+1
aux(46) =< aux(22)
s(32) =< it(16)*aux(22)
s(47) =< it(30)*aux(100)
s(44) =< it(28)*aux(100)
s(42) =< it(27)*aux(46)
s(38) =< it(20)*aux(100)
s(34) =< it(18)*aux(46)
aux(56) >= -V_n
aux(49) >= -V_n+V__01+1
aux(96) >= V_n+2
aux(123) >= V_n-V__01+1
aux(91) >= V__01+1
aux(238) >= 1
aux(239) >= 2
aux(241) >= V__0-V__0'
aux(237) >= aux(237)
s(43) >= aux(237)
aux(238) >= aux(238)
aux(239) >= aux(239)
aux(47)+it(16)+it(17)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) >= aux(241)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) >= aux(241)
it(16)+it(17)+it(18)+it(19)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+s(39) >= aux(241)
it(16)+it(17)+it(18)+it(19)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(29)+it(30)+s(39)+s(45) >= aux(241)
aux(97) >= aux(96)
aux(122) >= min([aux(123),aux(238),aux(238),aux(238),aux(238),aux(237),aux(237),aux(237),aux(237)])
aux(52) >= aux(56)+2
aux(50) >= aux(56)+1
s(40) >= it(21)*aux(238)
s(39) >= it(20)*aux(238)
s(37) >= it(19)*aux(238)
aux(47) >= aux(47)
s(33) >= it(17)*aux(238)
s(32) >= it(16)*aux(238)
aux(160) >= aux(122)
aux(149) >= aux(122)+1
aux(90) >= min([aux(91),aux(238),aux(238),aux(239),aux(238),aux(96),aux(97),aux(237)])
aux(48) >= min([aux(49),aux(50),aux(239),aux(52),aux(50),aux(239),aux(239),aux(56)])
s(45) >= it(28)*aux(97)
s(41) >= it(26)*aux(122)
aux(154) >= aux(90)
aux(148) >= aux(48)-1
s(46) >= it(29)*aux(160)
s(43) >= it(27)*aux(149)
s(38) >= it(20)*aux(90)
s(34) >= it(18)*aux(48)
s(47) >= it(30)*aux(154)
s(44) >= it(28)*aux(154)
s(42) >= it(27)*aux(148)
s(34) >= aux(47)
s(35) >= aux(47)

#### Cost of loops [16,17,18,19,20,21,22,23,24,26,27,28,29,30] 

 * loop 16:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
1*s(2)+3
  Such that:s(2) =< V__01-V__01'
s(2) >= V__01-V__01'

 * loop 17:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
1*s(4)+3
  Such that:s(4) =< V__01-V__01'
s(4) >= V__01-V__01'

 * loop 18:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
1*s(7)+1*s(8)+3
  Such that:s(7) =< V__01
s(8) =< V__01'
s(7) >= V__01-V__01'+1
s(9) >= 1
s(7) >= s(9)
s(8) >= s(9)

 * loop 19:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
1*s(11)+3
  Such that:s(11) =< -V__01+V__01'
s(11) >= -V__01+V__01'

 * loop 20:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
1*s(14)+1*s(15)+3
  Such that:s(14) =< V__01+1
s(15) =< V__01'+1
s(14) >= V__01+1
s(15) >= V__01'+1

 * loop 21:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
1*s(17)+3
  Such that:s(17) =< -V__01+V__01'
s(17) >= -V__01+V__01'

 * loop 22:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
3
 * loop 23:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
3
 * loop 24:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
3
 * loop 26:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
1*s(19)+3
  Such that:s(19) =< -V__01+V__01'
s(19) >= V_n-V__01+1

 * loop 27:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
1*s(22)+1*s(23)+3
  Such that:s(22) =< V__01
s(23) =< V_n'+1
s(22) >= -V_n+V__01
s(23) >= V_n-V__01+2

 * loop 28:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
1*s(26)+1*s(27)+3
  Such that:s(26) =< V__01+1
s(27) =< V_n'+2
s(26) >= V__01+1
s(27) >= V__01'+1

 * loop 29:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
1*s(29)+3
  Such that:s(29) =< V_n-V__01+1
s(29) >= V_n-V__01+1

 * loop 30:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [eval_counterex1b__critedge2_in(V_n',V__01',V__0',B')] 
1*s(31)+3
  Such that:s(31) =< V__01+1
s(31) >= V__01+1

#### Cost of phase [16,17,18,19,20,21,22,23,24,26,27,28,29,30]:eval_counterex1b__critedge2_in(V_n,V__01,V__0,B) -> [] 
3*it(16)+3*it(17)+3*it(18)+3*it(19)+3*it(20)+3*it(21)+3*it(22)+3*it(23)+3*it(24)+3*it(26)+3*it(27)+3*it(28)+3*it(29)+3*it(30)+3*it([31,32])+1*s(32)+1*s(33)+1*s(34)+1*s(35)+1*s(37)+1*s(38)+1*s(39)+1*s(40)+1*s(41)+1*s(42)+1*s(43)+1*s(44)+1*s(45)+1*s(46)+1*s(47)+1*s(51)+0
  Such that:it([31,32]) =< 1
aux(541) =< V_n
aux(766) =< V_n+2
aux(758) =< V__01-V__0+1
aux(788) =< -V_n-1
aux(789) =< -V_n+V__01-1
aux(790) =< V_n-V__01
aux(791) =< V_n-V__01+1
aux(793) =< V__01
aux(795) =< V__0+1
aux(583)+it([31,32]) =< aux(788)
it([31,32]) =< aux(788)
aux(550)+it(16)+it(17)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,32]) =< aux(795)
aux(551)+it(16)+it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,32]) =< aux(795)
aux(552)+it(16)+it(17)+it(18)+it(19)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,32]) =< aux(795)
aux(553)+it(16)+it(17)+it(18)+it(19)+it(20)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,32]) =< aux(795)
aux(579)+it(16)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,32]) =< aux(795)
aux(582)+it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(28)+it(29)+it(30)+it([31,32]) =< aux(795)
aux(583)+it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(29)+it(30)+it([31,32]) =< aux(795)
it(16)+it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,32]) =< aux(795)
it(16)+it(17)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,32]) =< aux(795)
it(16)+it(17)+it(18)+it(19)+it(20)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,32]) =< aux(795)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(27)+it(28)+it(29)+it(30)+it([31,32]) =< aux(795)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(30)+it([31,32]) =< aux(795)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it([31,32]) =< aux(795)
it(16)+it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,32]) =< aux(795)
it(16)+it(17)+it(18)+it(19)+it(20)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,32]) =< aux(795)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(27)+it(28)+it(29)+it(30)+it([31,32]) =< aux(795)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(30)+it([31,32]) =< aux(795)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,32]) =< aux(795)
aux(778) =< aux(766)+1
aux(671) =< aux(541)+2
aux(545) =< aux(541)+1
aux(572) =< aux(541)
aux(573) =< aux(541)-1
aux(591) =< max([aux(790),aux(572),0,aux(573),aux(572),0,0,aux(545)])
aux(769) =< it(28)*aux(671)
aux(768) =< it(27)*aux(545)
aux(649) =< it(20)*aux(545)
aux(648) =< it(18)*aux(572)
aux(529) =< it(28)*aux(545)
aux(528) =< it(27)*aux(572)
aux(525) =< it(20)*aux(572)
aux(523) =< it(18)*aux(573)
s(45) =< it(28)*aux(671)
s(43) =< it(27)*aux(545)
s(39) =< it(20)*aux(545)
aux(538) =< it(18)*aux(573)
s(35) =< it(18)*aux(572)
aux(658) =< aux(591)+1
aux(631) =< aux(591)
aux(757) =< it(29)*aux(778)
aux(584) =< it(30)*aux(545)
aux(652) =< it(30)*aux(671)
aux(646) =< it(16)*aux(545)
s(46) =< it(29)*aux(658)
aux(578) =< it(16)*aux(572)
it(26)+s(46) =< aux(652)+aux(649)+aux(648)+aux(646)+aux(791)
s(41) =< aux(652)+aux(649)+aux(648)+aux(646)+aux(791)
it(19)+s(40) =< aux(584)+aux(583)+aux(582)+aux(525)+aux(523)+aux(579)+aux(578)+aux(790)
it(21)+s(37) =< aux(584)+aux(583)+aux(582)+aux(525)+aux(523)+aux(579)+aux(578)+aux(790)
aux(754) =< it(26)*aux(671)
aux(753) =< it(21)*aux(766)
aux(751) =< it(19)*aux(545)
aux(527) =< it(26)*aux(545)
s(41) =< it(26)*aux(658)
s(40) =< it(21)*aux(631)
aux(539) =< it(19)*aux(572)
s(37) =< it(19)*aux(591)
it([31,32])+s(33) =< aux(553)+aux(552)+aux(551)+aux(550)+aux(789)
aux(536) =< max([aux(793),aux(541),aux(545)])+aux(538)+aux(539)+aux(525)+aux(527)+aux(528)+aux(529)
aux(614) =< aux(536)+1
aux(560) =< aux(536)
s(32) =< it(16)*aux(536)
s(47) =< it(30)*aux(614)
s(44) =< it(28)*aux(614)
s(42) =< it(27)*aux(560)
s(38) =< it(20)*aux(614)
s(34) =< it(18)*aux(560)
s(51) =< aux(757)+aux(769)+aux(768)+aux(754)+it(24)+it(23)+it(22)+aux(753)+aux(649)+aux(751)+aux(648)+aux(758)
s(51) =< it([31,32])*aux(614)
aux(570) >= -V_n
aux(563) >= -V_n+V__01+1
aux(610) >= V_n+2
aux(637) >= V_n-V__01+1
aux(797) >= 1
aux(798) >= 2
aux(800) >= V__01+1
aux(801) >= V__0
aux(802) >= V__0+1
aux(796) >= aux(796)
s(43) >= aux(796)
aux(797) >= aux(797)
it([31,32]) >= aux(797)
aux(798) >= aux(798)
aux(800) >= aux(800)
it(16)+it(17)+it(18)+it(19)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+s(39) >= aux(801)
it(16)+it(17)+it(18)+it(19)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(29)+it(30)+s(39)+s(45) >= aux(801)
aux(561)+it(16)+it(17)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,32]) >= aux(802)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,32]) >= aux(802)
aux(611) >= aux(610)
aux(636) >= min([aux(637),aux(797),aux(797),aux(797),aux(797),aux(796),aux(796),aux(796),aux(796)])
aux(566) >= aux(570)+2
aux(564) >= aux(570)+1
s(40) >= it(21)*aux(797)
s(39) >= it(20)*aux(797)
s(37) >= it(19)*aux(797)
aux(561) >= aux(561)
s(33) >= it(17)*aux(797)
s(32) >= it(16)*aux(797)
aux(674) >= aux(636)
aux(663) >= aux(636)+1
aux(604) >= min([aux(800),aux(797),aux(797),aux(798),aux(797),aux(610),aux(611),aux(796)])
aux(562) >= min([aux(563),aux(564),aux(798),aux(566),aux(564),aux(798),aux(798),aux(570)])
s(45) >= it(28)*aux(611)
s(41) >= it(26)*aux(636)
aux(668) >= aux(604)
aux(662) >= aux(562)-1
s(46) >= it(29)*aux(674)
s(43) >= it(27)*aux(663)
s(38) >= it(20)*aux(604)
s(34) >= it(18)*aux(562)
s(51) >= it([31,32])*aux(668)
s(47) >= it(30)*aux(668)
s(44) >= it(28)*aux(668)
s(42) >= it(27)*aux(662)
s(34) >= aux(561)
s(35) >= aux(561)

#### Cost of chains of eval_counterex1b__critedge2_in(V_n,V__01,V__0,B):
* Chain [[25],32]: 3*it(25)+0
  Such that:it(25) =< V__0+1
it(25) >= V__0+1

  with precondition: [B=4,0>=V__01+1,V__0>=0,V__01>=V_n+1] 

* Chain [[16,17,18,19,20,21,22,23,24,26,27,28,29,30],[25],32]: 3*it(16)+3*it(17)+3*it(18)+3*it(19)+3*it(20)+3*it(21)+3*it(22)+3*it(23)+3*it(24)+3*it(25)+3*it(26)+3*it(27)+3*it(28)+3*it(29)+3*it(30)+1*s(32)+1*s(33)+1*s(34)+1*s(35)+1*s(37)+1*s(38)+1*s(39)+1*s(40)+1*s(41)+1*s(42)+1*s(43)+1*s(44)+1*s(45)+1*s(46)+1*s(47)+0
  Such that:aux(227) =< -V_n+V__01-1
aux(27) =< V_n
aux(229) =< V_n-V__01
aux(230) =< V_n-V__01+1
aux(233) =< V__01
aux(242) =< V__0+1
aux(236)+it(25) =< aux(242)
aux(36)+it(16) =< aux(242)
aux(37)+it(16) =< aux(242)
aux(38)+it(16) =< aux(242)
aux(39)+it(16) =< aux(242)
aux(65)+it(16) =< aux(242)
aux(68)+it(16) =< aux(242)
it(16) =< aux(242)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(242)
aux(36)+it(16)+it(17)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
aux(37)+it(16)+it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
aux(38)+it(16)+it(17)+it(18)+it(19)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
aux(39)+it(16)+it(17)+it(18)+it(19)+it(20)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
aux(65)+it(16)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
aux(68)+it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(28)+it(29)+it(30) =< aux(236)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(29)+it(30) =< aux(236)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(236)
aux(157) =< aux(27)+2
aux(31) =< aux(27)+1
aux(58) =< aux(27)
aux(59) =< aux(27)-1
aux(77) =< max([aux(229),aux(58),0,aux(59),aux(58),0,0,aux(31)])
aux(15) =< it(28)*aux(31)
aux(135) =< it(20)*aux(31)
aux(14) =< it(27)*aux(58)
aux(11) =< it(20)*aux(58)
aux(9) =< it(18)*aux(59)
aux(134) =< it(18)*aux(58)
s(45) =< it(28)*aux(157)
s(43) =< it(27)*aux(31)
s(39) =< it(20)*aux(31)
s(35) =< it(18)*aux(58)
aux(144) =< aux(77)+1
aux(117) =< aux(77)
aux(70) =< it(30)*aux(31)
aux(138) =< it(30)*aux(157)
aux(132) =< it(16)*aux(31)
s(46) =< it(29)*aux(144)
aux(64) =< it(16)*aux(58)
it(26)+s(46) =< aux(138)+aux(135)+aux(134)+aux(132)+aux(230)
s(41) =< aux(138)+aux(135)+aux(134)+aux(132)+aux(230)
it(19)+s(40) =< aux(70)+aux(68)+aux(11)+aux(9)+aux(65)+aux(64)+aux(229)
it(21)+s(37) =< aux(70)+aux(68)+aux(11)+aux(9)+aux(65)+aux(64)+aux(229)
aux(13) =< it(26)*aux(31)
s(41) =< it(26)*aux(144)
s(40) =< it(21)*aux(117)
aux(25) =< it(19)*aux(58)
s(37) =< it(19)*aux(77)
s(33) =< aux(39)+aux(38)+aux(37)+aux(36)+aux(227)
aux(22) =< max([aux(233),aux(27),aux(31)])+aux(9)+aux(25)+aux(11)+aux(13)+aux(14)+aux(15)
aux(100) =< aux(22)+1
aux(46) =< aux(22)
s(32) =< it(16)*aux(22)
s(47) =< it(30)*aux(100)
s(44) =< it(28)*aux(100)
s(42) =< it(27)*aux(46)
s(38) =< it(20)*aux(100)
s(34) =< it(18)*aux(46)
aux(239) >= 2
aux(56) >= -V_n
aux(49) >= -V_n+V__01+1
aux(96) >= V_n+2
aux(241)+it(25) >= V__0+1
aux(243) >= 1
aux(238) >= aux(243)
aux(241) >= aux(243)
it(25) >= aux(243)
aux(238) >= aux(238)
aux(239) >= aux(239)
aux(47)+it(16)+it(17)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) >= aux(241)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) >= aux(241)
it(16)+it(17)+it(18)+it(19)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+s(39) >= aux(241)
it(16)+it(17)+it(18)+it(19)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(29)+it(30)+s(39)+s(45) >= aux(241)
aux(97) >= aux(96)
aux(52) >= aux(56)+2
aux(50) >= aux(56)+1
s(40) >= it(21)*aux(238)
s(39) >= it(20)*aux(238)
s(37) >= it(19)*aux(238)
aux(47) >= aux(47)
s(33) >= it(17)*aux(238)
s(32) >= it(16)*aux(238)
aux(48) >= min([aux(49),aux(50),aux(239),aux(52),aux(50),aux(239),aux(239),aux(56)])
s(45) >= it(28)*aux(97)
aux(148) >= aux(48)-1
s(34) >= it(18)*aux(48)
s(42) >= it(27)*aux(148)
s(34) >= aux(47)
s(35) >= aux(47)

  with precondition: [B=4,0>=V_n+2,V__0>=1,V_n>=V__01] 

* Chain [[16,17,18,19,20,21,22,23,24,26,27,28,29,30],32]: 3*it(16)+3*it(17)+3*it(18)+3*it(19)+3*it(20)+3*it(21)+3*it(22)+3*it(23)+3*it(24)+3*it(26)+3*it(27)+3*it(28)+3*it(29)+3*it(30)+1*s(32)+1*s(33)+1*s(34)+1*s(35)+1*s(37)+1*s(38)+1*s(39)+1*s(40)+1*s(41)+1*s(42)+1*s(43)+1*s(44)+1*s(45)+1*s(46)+1*s(47)+0
  Such that:aux(227) =< -V_n+V__01-1
aux(27) =< V_n
aux(229) =< V_n-V__01
aux(230) =< V_n-V__01+1
aux(233) =< V__01
aux(244) =< V__0+1
aux(36)+it(16) =< aux(244)
aux(37)+it(16) =< aux(244)
aux(38)+it(16) =< aux(244)
aux(39)+it(16) =< aux(244)
aux(65)+it(16) =< aux(244)
aux(68)+it(16) =< aux(244)
it(16) =< aux(244)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(244)
aux(36)+it(16)+it(17)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(244)
aux(37)+it(16)+it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(244)
aux(38)+it(16)+it(17)+it(18)+it(19)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(244)
aux(39)+it(16)+it(17)+it(18)+it(19)+it(20)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(244)
aux(65)+it(16)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) =< aux(244)
aux(68)+it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(28)+it(29)+it(30) =< aux(244)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(29)+it(30) =< aux(244)
aux(157) =< aux(27)+2
aux(31) =< aux(27)+1
aux(58) =< aux(27)
aux(59) =< aux(27)-1
aux(77) =< max([aux(229),aux(58),0,aux(59),aux(58),0,0,aux(31)])
aux(15) =< it(28)*aux(31)
aux(135) =< it(20)*aux(31)
aux(14) =< it(27)*aux(58)
aux(11) =< it(20)*aux(58)
aux(9) =< it(18)*aux(59)
aux(134) =< it(18)*aux(58)
s(45) =< it(28)*aux(157)
s(43) =< it(27)*aux(31)
s(39) =< it(20)*aux(31)
s(35) =< it(18)*aux(58)
aux(144) =< aux(77)+1
aux(117) =< aux(77)
aux(70) =< it(30)*aux(31)
aux(138) =< it(30)*aux(157)
aux(132) =< it(16)*aux(31)
s(46) =< it(29)*aux(144)
aux(64) =< it(16)*aux(58)
it(26)+s(46) =< aux(138)+aux(135)+aux(134)+aux(132)+aux(230)
s(41) =< aux(138)+aux(135)+aux(134)+aux(132)+aux(230)
it(19)+s(40) =< aux(70)+aux(68)+aux(11)+aux(9)+aux(65)+aux(64)+aux(229)
it(21)+s(37) =< aux(70)+aux(68)+aux(11)+aux(9)+aux(65)+aux(64)+aux(229)
aux(13) =< it(26)*aux(31)
s(41) =< it(26)*aux(144)
s(40) =< it(21)*aux(117)
aux(25) =< it(19)*aux(58)
s(37) =< it(19)*aux(77)
s(33) =< aux(39)+aux(38)+aux(37)+aux(36)+aux(227)
aux(22) =< max([aux(233),aux(27),aux(31)])+aux(9)+aux(25)+aux(11)+aux(13)+aux(14)+aux(15)
aux(100) =< aux(22)+1
aux(46) =< aux(22)
s(32) =< it(16)*aux(22)
s(47) =< it(30)*aux(100)
s(44) =< it(28)*aux(100)
s(42) =< it(27)*aux(46)
s(38) =< it(20)*aux(100)
s(34) =< it(18)*aux(46)
aux(238) >= 1
aux(239) >= 2
aux(56) >= -V_n
aux(49) >= -V_n+V__01+1
aux(96) >= V_n+2
aux(241) >= V__0+1
aux(238) >= aux(238)
aux(239) >= aux(239)
aux(47)+it(16)+it(17)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) >= aux(241)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30) >= aux(241)
it(16)+it(17)+it(18)+it(19)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+s(39) >= aux(241)
it(16)+it(17)+it(18)+it(19)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(29)+it(30)+s(39)+s(45) >= aux(241)
aux(97) >= aux(96)
aux(52) >= aux(56)+2
aux(50) >= aux(56)+1
s(40) >= it(21)*aux(238)
s(39) >= it(20)*aux(238)
s(37) >= it(19)*aux(238)
aux(47) >= aux(47)
s(33) >= it(17)*aux(238)
s(32) >= it(16)*aux(238)
aux(48) >= min([aux(49),aux(50),aux(239),aux(52),aux(50),aux(239),aux(239),aux(56)])
s(45) >= it(28)*aux(97)
aux(148) >= aux(48)-1
s(34) >= it(18)*aux(48)
s(42) >= it(27)*aux(148)
s(34) >= aux(47)
s(35) >= aux(47)

  with precondition: [B=4,V__0>=0] 

* Chain [[16,17,18,19,20,21,22,23,24,26,27,28,29,30],31,[25],32]: 3*it(16)+3*it(17)+3*it(18)+3*it(19)+3*it(20)+3*it(21)+3*it(22)+3*it(23)+3*it(24)+3*it(26)+3*it(27)+3*it(28)+3*it(29)+3*it(30)+3*it([31,[25],32])+1*s(32)+1*s(33)+1*s(34)+1*s(35)+1*s(37)+1*s(38)+1*s(39)+1*s(40)+1*s(41)+1*s(42)+1*s(43)+1*s(44)+1*s(45)+1*s(46)+1*s(47)+3*s(49)+1*s(50)+0
  Such that:it([31,[25],32]) =< 1
aux(270) =< V_n
s(49) =< V__0
aux(502) =< -V_n-1
aux(503) =< -V_n+V__01-1
aux(504) =< V_n-V__01
aux(505) =< V_n-V__01+1
aux(507) =< V__01
aux(508) =< V__01+1
aux(509) =< V__0+1
aux(311)+it([31,[25],32]) =< aux(502)
it([31,[25],32]) =< aux(502)
aux(279)+it(16)+it(17)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,[25],32]) =< aux(509)
aux(280)+it(16)+it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,[25],32]) =< aux(509)
aux(281)+it(16)+it(17)+it(18)+it(19)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,[25],32]) =< aux(509)
aux(282)+it(16)+it(17)+it(18)+it(19)+it(20)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,[25],32]) =< aux(509)
aux(307)+it(16)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,[25],32]) =< aux(509)
aux(310)+it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(28)+it(29)+it(30)+it([31,[25],32]) =< aux(509)
aux(311)+it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(29)+it(30)+it([31,[25],32]) =< aux(509)
it(16)+it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,[25],32]) =< aux(509)
it(16)+it(17)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,[25],32]) =< aux(509)
it(16)+it(17)+it(18)+it(19)+it(20)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,[25],32]) =< aux(509)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(27)+it(28)+it(29)+it(30)+it([31,[25],32]) =< aux(509)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(30)+it([31,[25],32]) =< aux(509)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it([31,[25],32]) =< aux(509)
it(16)+it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,[25],32]) =< aux(509)
it(16)+it(17)+it(18)+it(19)+it(20)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,[25],32]) =< aux(509)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(27)+it(28)+it(29)+it(30)+it([31,[25],32]) =< aux(509)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(30)+it([31,[25],32]) =< aux(509)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,[25],32]) =< aux(509)
aux(399) =< aux(270)+2
aux(274) =< aux(270)+1
aux(300) =< aux(270)
aux(301) =< aux(270)-1
aux(319) =< max([aux(504),aux(300),0,aux(301),aux(300),0,0,aux(274)])
aux(258) =< it(28)*aux(274)
aux(257) =< it(27)*aux(300)
aux(254) =< it(20)*aux(300)
aux(252) =< it(18)*aux(301)
aux(377) =< it(20)*aux(274)
aux(376) =< it(18)*aux(300)
s(45) =< it(28)*aux(399)
s(43) =< it(27)*aux(274)
s(39) =< it(20)*aux(274)
aux(267) =< it(18)*aux(301)
s(35) =< it(18)*aux(300)
aux(386) =< aux(319)+1
aux(359) =< aux(319)
aux(433) =< it(29)*aux(399)
aux(312) =< it(30)*aux(274)
aux(380) =< it(30)*aux(399)
aux(374) =< it(16)*aux(274)
s(46) =< it(29)*aux(386)
aux(306) =< it(16)*aux(300)
it(26)+s(46) =< aux(380)+aux(377)+aux(376)+aux(374)+aux(505)
s(41) =< aux(380)+aux(377)+aux(376)+aux(374)+aux(505)
it(19)+s(40) =< aux(312)+aux(311)+aux(310)+aux(254)+aux(252)+aux(307)+aux(306)+aux(504)
it(21)+s(37) =< aux(312)+aux(311)+aux(310)+aux(254)+aux(252)+aux(307)+aux(306)+aux(504)
aux(256) =< it(26)*aux(274)
aux(429) =< it(21)*aux(274)
aux(253) =< it(19)*aux(300)
s(41) =< it(26)*aux(386)
s(40) =< it(21)*aux(359)
aux(268) =< it(19)*aux(300)
s(37) =< it(19)*aux(319)
it([31,[25],32])+s(33) =< aux(282)+aux(281)+aux(280)+aux(279)+aux(503)
aux(265) =< max([aux(507),aux(270),aux(274)])+aux(267)+aux(268)+aux(254)+aux(256)+aux(257)+aux(258)
aux(342) =< aux(265)+1
aux(289) =< aux(265)
s(32) =< it(16)*aux(265)
s(47) =< it(30)*aux(342)
s(44) =< it(28)*aux(342)
s(42) =< it(27)*aux(289)
s(38) =< it(20)*aux(342)
s(34) =< it(18)*aux(289)
s(50) =< it([31,[25],32])*aux(342)
s(50) =< aux(433)+aux(258)+aux(257)+aux(256)+aux(429)+aux(254)+aux(253)+aux(252)+aux(508)
aux(298) >= -V_n
aux(291) >= -V_n+V__01+1
aux(338) >= V_n+2
aux(365) >= V_n-V__01+1
aux(511) >= 1
aux(512) >= 2
aux(514) >= V__01+1
aux(515) >= V__0
aux(510) >= aux(510)
s(43) >= aux(510)
aux(511) >= aux(511)
it([31,[25],32]) >= aux(511)
aux(512) >= aux(512)
aux(514) >= aux(514)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+s(49) >= aux(515)
it(16)+it(17)+it(18)+it(19)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+s(39)+s(49) >= aux(515)
it(16)+it(17)+it(18)+it(19)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(29)+it(30)+s(39)+s(45)+s(49) >= aux(515)
aux(339) >= aux(338)
aux(364) >= min([aux(365),aux(511),aux(511),aux(511),aux(511),aux(510),aux(510),aux(510),aux(510)])
aux(294) >= aux(298)+2
aux(292) >= aux(298)+1
s(49) >= it([31,[25],32])*aux(510)
s(40) >= it(21)*aux(511)
s(39) >= it(20)*aux(511)
s(37) >= it(19)*aux(511)
s(33) >= it(17)*aux(511)
s(32) >= it(16)*aux(511)
aux(402) >= aux(364)
aux(391) >= aux(364)+1
aux(332) >= min([aux(514),aux(511),aux(511),aux(512),aux(511),aux(338),aux(339),aux(510)])
aux(290) >= min([aux(291),aux(292),aux(512),aux(294),aux(292),aux(512),aux(512),aux(298)])
s(45) >= it(28)*aux(339)
s(41) >= it(26)*aux(364)
aux(396) >= aux(332)
aux(390) >= aux(290)-1
s(46) >= it(29)*aux(402)
s(43) >= it(27)*aux(391)
s(38) >= it(20)*aux(332)
s(34) >= it(18)*aux(290)
s(50) >= it([31,[25],32])*aux(396)
s(47) >= it(30)*aux(396)
s(44) >= it(28)*aux(396)
s(42) >= it(27)*aux(390)

  with precondition: [B=4,0>=V_n+2,V__01>=0,V__0>=2] 

* Chain [[16,17,18,19,20,21,22,23,24,26,27,28,29,30],31,32]: 3*it(16)+3*it(17)+3*it(18)+3*it(19)+3*it(20)+3*it(21)+3*it(22)+3*it(23)+3*it(24)+3*it(26)+3*it(27)+3*it(28)+3*it(29)+3*it(30)+3*it([31,32])+1*s(32)+1*s(33)+1*s(34)+1*s(35)+1*s(37)+1*s(38)+1*s(39)+1*s(40)+1*s(41)+1*s(42)+1*s(43)+1*s(44)+1*s(45)+1*s(46)+1*s(47)+1*s(51)+0
  Such that:it([31,32]) =< 1
aux(541) =< V_n
aux(766) =< V_n+2
aux(758) =< V__01-V__0+1
aux(788) =< -V_n-1
aux(789) =< -V_n+V__01-1
aux(790) =< V_n-V__01
aux(791) =< V_n-V__01+1
aux(793) =< V__01
aux(795) =< V__0+1
aux(583)+it([31,32]) =< aux(788)
it([31,32]) =< aux(788)
aux(550)+it(16)+it(17)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,32]) =< aux(795)
aux(551)+it(16)+it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,32]) =< aux(795)
aux(552)+it(16)+it(17)+it(18)+it(19)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,32]) =< aux(795)
aux(553)+it(16)+it(17)+it(18)+it(19)+it(20)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,32]) =< aux(795)
aux(579)+it(16)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,32]) =< aux(795)
aux(582)+it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(28)+it(29)+it(30)+it([31,32]) =< aux(795)
aux(583)+it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(29)+it(30)+it([31,32]) =< aux(795)
it(16)+it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,32]) =< aux(795)
it(16)+it(17)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,32]) =< aux(795)
it(16)+it(17)+it(18)+it(19)+it(20)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,32]) =< aux(795)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(27)+it(28)+it(29)+it(30)+it([31,32]) =< aux(795)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(30)+it([31,32]) =< aux(795)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it([31,32]) =< aux(795)
it(16)+it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,32]) =< aux(795)
it(16)+it(17)+it(18)+it(19)+it(20)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,32]) =< aux(795)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(27)+it(28)+it(29)+it(30)+it([31,32]) =< aux(795)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(30)+it([31,32]) =< aux(795)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,32]) =< aux(795)
aux(778) =< aux(766)+1
aux(671) =< aux(541)+2
aux(545) =< aux(541)+1
aux(572) =< aux(541)
aux(573) =< aux(541)-1
aux(591) =< max([aux(790),aux(572),0,aux(573),aux(572),0,0,aux(545)])
aux(769) =< it(28)*aux(671)
aux(768) =< it(27)*aux(545)
aux(649) =< it(20)*aux(545)
aux(648) =< it(18)*aux(572)
aux(529) =< it(28)*aux(545)
aux(528) =< it(27)*aux(572)
aux(525) =< it(20)*aux(572)
aux(523) =< it(18)*aux(573)
s(45) =< it(28)*aux(671)
s(43) =< it(27)*aux(545)
s(39) =< it(20)*aux(545)
aux(538) =< it(18)*aux(573)
s(35) =< it(18)*aux(572)
aux(658) =< aux(591)+1
aux(631) =< aux(591)
aux(757) =< it(29)*aux(778)
aux(584) =< it(30)*aux(545)
aux(652) =< it(30)*aux(671)
aux(646) =< it(16)*aux(545)
s(46) =< it(29)*aux(658)
aux(578) =< it(16)*aux(572)
it(26)+s(46) =< aux(652)+aux(649)+aux(648)+aux(646)+aux(791)
s(41) =< aux(652)+aux(649)+aux(648)+aux(646)+aux(791)
it(19)+s(40) =< aux(584)+aux(583)+aux(582)+aux(525)+aux(523)+aux(579)+aux(578)+aux(790)
it(21)+s(37) =< aux(584)+aux(583)+aux(582)+aux(525)+aux(523)+aux(579)+aux(578)+aux(790)
aux(754) =< it(26)*aux(671)
aux(753) =< it(21)*aux(766)
aux(751) =< it(19)*aux(545)
aux(527) =< it(26)*aux(545)
s(41) =< it(26)*aux(658)
s(40) =< it(21)*aux(631)
aux(539) =< it(19)*aux(572)
s(37) =< it(19)*aux(591)
it([31,32])+s(33) =< aux(553)+aux(552)+aux(551)+aux(550)+aux(789)
aux(536) =< max([aux(793),aux(541),aux(545)])+aux(538)+aux(539)+aux(525)+aux(527)+aux(528)+aux(529)
aux(614) =< aux(536)+1
aux(560) =< aux(536)
s(32) =< it(16)*aux(536)
s(47) =< it(30)*aux(614)
s(44) =< it(28)*aux(614)
s(42) =< it(27)*aux(560)
s(38) =< it(20)*aux(614)
s(34) =< it(18)*aux(560)
s(51) =< aux(757)+aux(769)+aux(768)+aux(754)+it(24)+it(23)+it(22)+aux(753)+aux(649)+aux(751)+aux(648)+aux(758)
s(51) =< it([31,32])*aux(614)
aux(570) >= -V_n
aux(563) >= -V_n+V__01+1
aux(610) >= V_n+2
aux(637) >= V_n-V__01+1
aux(797) >= 1
aux(798) >= 2
aux(800) >= V__01+1
aux(801) >= V__0
aux(802) >= V__0+1
aux(796) >= aux(796)
s(43) >= aux(796)
aux(797) >= aux(797)
it([31,32]) >= aux(797)
aux(798) >= aux(798)
aux(800) >= aux(800)
it(16)+it(17)+it(18)+it(19)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+s(39) >= aux(801)
it(16)+it(17)+it(18)+it(19)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(29)+it(30)+s(39)+s(45) >= aux(801)
aux(561)+it(16)+it(17)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,32]) >= aux(802)
it(16)+it(17)+it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it([31,32]) >= aux(802)
aux(611) >= aux(610)
aux(636) >= min([aux(637),aux(797),aux(797),aux(797),aux(797),aux(796),aux(796),aux(796),aux(796)])
aux(566) >= aux(570)+2
aux(564) >= aux(570)+1
s(40) >= it(21)*aux(797)
s(39) >= it(20)*aux(797)
s(37) >= it(19)*aux(797)
aux(561) >= aux(561)
s(33) >= it(17)*aux(797)
s(32) >= it(16)*aux(797)
aux(674) >= aux(636)
aux(663) >= aux(636)+1
aux(604) >= min([aux(800),aux(797),aux(797),aux(798),aux(797),aux(610),aux(611),aux(796)])
aux(562) >= min([aux(563),aux(564),aux(798),aux(566),aux(564),aux(798),aux(798),aux(570)])
s(45) >= it(28)*aux(611)
s(41) >= it(26)*aux(636)
aux(668) >= aux(604)
aux(662) >= aux(562)-1
s(46) >= it(29)*aux(674)
s(43) >= it(27)*aux(663)
s(38) >= it(20)*aux(604)
s(34) >= it(18)*aux(562)
s(51) >= it([31,32])*aux(668)
s(47) >= it(30)*aux(668)
s(44) >= it(28)*aux(668)
s(42) >= it(27)*aux(662)
s(34) >= aux(561)
s(35) >= aux(561)

  with precondition: [B=4,0>=V_n+2,V__01>=0,V__0>=1] 

* Chain [32]: 0
  with precondition: [B=4,0>=V__0+1] 

* Chain [31,[25],32]: 3*it(25)+1*s(48)+3
  Such that:s(48) =< V__01+1
it(25) =< V__0
s(48) >= V__01+1
it(25) >= V__0

  with precondition: [B=4,0>=V_n+2,V__01>=0,V__0>=1] 

* Chain [31,32]: 1*s(48)+3
  Such that:s(48) =< V__01+1
s(48) >= V__01+1

  with precondition: [V__0=0,B=4,0>=V_n+2,V__01>=0] 


#### Cost of chains of eval_counterex1b_start(V_n,V_x,V_y,B):
* Chain [40]: 1*s(52)+4
  Such that:s(52) =< V_y+1
s(52) >= V_y+1

  with precondition: [V_x=0,0>=V_n+2,V_y>=0] 

* Chain [39]: 3*s(53)+3*s(74)+3*s(75)+3*s(76)+3*s(77)+3*s(78)+3*s(79)+3*s(80)+3*s(81)+3*s(82)+3*s(83)+3*s(84)+3*s(85)+3*s(86)+3*s(88)+1*s(94)+1*s(95)+1*s(96)+1*s(107)+1*s(108)+1*s(109)+1*s(110)+1*s(124)+1*s(126)+1*s(131)+1*s(132)+1*s(133)+1*s(134)+1*s(135)+1*s(136)+1*s(137)+1
  Such that:s(53) =< 1
s(57) =< -V_n-1
s(58) =< -V_n+V_y-1
s(54) =< V_n
s(55) =< V_n+2
s(59) =< V_n-V_y
s(60) =< V_n-V_y+1
s(56) =< -V_x+V_y+1
s(62) =< V_x+1
s(61) =< V_y
s(53)+s(72) =< s(57)
s(53)+s(73)+s(74)+s(75)+s(76)+s(77)+s(78)+s(79)+s(80)+s(81)+s(82)+s(83)+s(84)+s(85)+s(86) =< s(62)
s(53)+s(74)+s(75)+s(77)+s(78)+s(79)+s(80)+s(81)+s(82)+s(83)+s(84)+s(85)+s(86)+s(87)+s(88) =< s(62)
s(53)+s(74)+s(75)+s(76)+s(78)+s(79)+s(80)+s(81)+s(82)+s(83)+s(84)+s(85)+s(86)+s(88)+s(89) =< s(62)
s(53)+s(74)+s(75)+s(76)+s(77)+s(79)+s(80)+s(81)+s(82)+s(83)+s(84)+s(85)+s(86)+s(88)+s(90) =< s(62)
s(53)+s(74)+s(76)+s(77)+s(78)+s(79)+s(80)+s(81)+s(82)+s(83)+s(84)+s(85)+s(86)+s(88)+s(91) =< s(62)
s(53)+s(74)+s(75)+s(76)+s(77)+s(78)+s(79)+s(80)+s(81)+s(82)+s(84)+s(85)+s(86)+s(88)+s(92) =< s(62)
s(53)+s(72)+s(74)+s(75)+s(76)+s(77)+s(78)+s(79)+s(80)+s(81)+s(82)+s(83)+s(85)+s(86)+s(88) =< s(62)
s(53)+s(74)+s(75)+s(76)+s(77)+s(78)+s(79)+s(80)+s(81)+s(82)+s(83)+s(84)+s(85)+s(86)+s(88) =< s(62)
s(98) =< s(55)+1
s(99) =< s(54)+2
s(100) =< s(54)+1
s(101) =< s(54)
s(104) =< s(54)-1
s(114) =< max([s(59),s(101),0,s(104),s(101),0,0,s(100)])
s(116) =< s(84)*s(99)
s(117) =< s(83)*s(100)
s(118) =< s(77)*s(100)
s(119) =< s(88)*s(101)
s(120) =< s(84)*s(100)
s(121) =< s(83)*s(101)
s(122) =< s(77)*s(101)
s(123) =< s(88)*s(104)
s(96) =< s(84)*s(99)
s(94) =< s(83)*s(100)
s(95) =< s(77)*s(100)
s(126) =< s(88)*s(101)
s(128) =< s(114)+1
s(130) =< s(114)
s(138) =< s(85)*s(98)
s(139) =< s(86)*s(100)
s(140) =< s(86)*s(99)
s(141) =< s(74)*s(100)
s(131) =< s(85)*s(128)
s(142) =< s(74)*s(101)
s(82)+s(131) =< s(140)+s(118)+s(119)+s(141)+s(60)
s(124) =< s(140)+s(118)+s(119)+s(141)+s(60)
s(76)+s(107) =< s(139)+s(72)+s(92)+s(122)+s(123)+s(91)+s(142)+s(59)
s(78)+s(108) =< s(139)+s(72)+s(92)+s(122)+s(123)+s(91)+s(142)+s(59)
s(143) =< s(82)*s(99)
s(144) =< s(78)*s(55)
s(145) =< s(76)*s(100)
s(146) =< s(82)*s(100)
s(124) =< s(82)*s(128)
s(107) =< s(78)*s(130)
s(147) =< s(76)*s(101)
s(108) =< s(76)*s(114)
s(53)+s(109) =< s(90)+s(89)+s(87)+s(73)+s(58)
s(148) =< max([s(61),s(54),s(100)])+s(123)+s(147)+s(122)+s(146)+s(121)+s(120)
s(149) =< s(148)+1
s(150) =< s(148)
s(110) =< s(74)*s(148)
s(135) =< s(86)*s(149)
s(136) =< s(84)*s(149)
s(137) =< s(83)*s(150)
s(132) =< s(77)*s(149)
s(133) =< s(88)*s(150)
s(134) =< s(138)+s(116)+s(117)+s(143)+s(81)+s(80)+s(79)+s(144)+s(118)+s(145)+s(119)+s(56)
s(134) =< s(53)*s(149)
s(67) >= 1
s(68) >= 2
s(63) >= -V_n
s(64) >= -V_n+V_y+1
s(65) >= V_n+2
s(70) >= V_x
s(71) >= V_x+1
s(67) >= s(67)
s(53) >= s(67)
s(68) >= s(68)
s(74)+s(75)+s(76)+s(78)+s(79)+s(80)+s(81)+s(82)+s(83)+s(84)+s(85)+s(86)+s(88)+s(95) >= s(70)
s(74)+s(75)+s(76)+s(78)+s(79)+s(80)+s(81)+s(82)+s(83)+s(85)+s(86)+s(88)+s(95)+s(96) >= s(70)
s(53)+s(74)+s(75)+s(76)+s(77)+s(78)+s(79)+s(80)+s(81)+s(82)+s(83)+s(84)+s(85)+s(86)+s(97) >= s(71)
s(53)+s(74)+s(75)+s(76)+s(77)+s(78)+s(79)+s(80)+s(81)+s(82)+s(83)+s(84)+s(85)+s(86)+s(88) >= s(71)
s(102) >= s(65)
s(105) >= s(63)+2
s(106) >= s(63)+1
s(107) >= s(78)*s(67)
s(95) >= s(77)*s(67)
s(108) >= s(76)*s(67)
s(97) >= s(97)
s(109) >= s(75)*s(67)
s(110) >= s(74)*s(67)
s(115) >= min([s(64),s(106),s(68),s(105),s(106),s(68),s(68),s(63)])
s(96) >= s(84)*s(102)
s(129) >= s(115)-1
s(133) >= s(88)*s(115)
s(137) >= s(83)*s(129)
s(133) >= s(97)
s(126) >= s(97)

  with precondition: [0>=V_n+2,V_x>=1,V_y>=0] 

* Chain [38]: 1*s(151)+3*s(152)+4
  Such that:s(152) =< V_x
s(151) =< V_y+1
s(152) >= V_x
s(151) >= V_y+1

  with precondition: [0>=V_n+2,V_x>=1,V_y>=0] 

* Chain [37]: 3*s(164)+3*s(169)+3*s(175)+3*s(176)+3*s(177)+3*s(178)+3*s(179)+3*s(180)+3*s(181)+3*s(182)+3*s(183)+3*s(184)+3*s(185)+3*s(186)+3*s(187)+1*s(189)+1*s(190)+1*s(198)+1*s(199)+1*s(200)+1*s(201)+1*s(210)+1*s(211)+1*s(215)+1*s(216)+1*s(220)+1*s(222)+1*s(228)+1*s(229)+1*s(230)+1
  Such that:s(153) =< -V_n+V_y-1
s(154) =< V_n
s(155) =< V_n-V_y
s(156) =< V_n-V_y+1
s(158) =< V_x+1
s(157) =< V_y
s(164)+s(166) =< s(158)
s(168)+s(169) =< s(158)
s(169)+s(170) =< s(158)
s(169)+s(171) =< s(158)
s(169)+s(172) =< s(158)
s(169)+s(173) =< s(158)
s(169)+s(174) =< s(158)
s(169)+s(175)+s(176)+s(177)+s(178)+s(179)+s(180)+s(181)+s(182)+s(183)+s(184)+s(185)+s(186)+s(187) =< s(158)
s(168)+s(169)+s(175)+s(177)+s(178)+s(179)+s(180)+s(181)+s(182)+s(183)+s(184)+s(185)+s(186)+s(187) =< s(166)
s(169)+s(170)+s(175)+s(176)+s(178)+s(179)+s(180)+s(181)+s(182)+s(183)+s(184)+s(185)+s(186)+s(187) =< s(166)
s(169)+s(171)+s(175)+s(176)+s(177)+s(179)+s(180)+s(181)+s(182)+s(183)+s(184)+s(185)+s(186)+s(187) =< s(166)
s(169)+s(172)+s(175)+s(176)+s(177)+s(178)+s(180)+s(181)+s(182)+s(183)+s(184)+s(185)+s(186)+s(187) =< s(166)
s(169)+s(173)+s(176)+s(177)+s(178)+s(179)+s(180)+s(181)+s(182)+s(183)+s(184)+s(185)+s(186)+s(187) =< s(166)
s(169)+s(174)+s(175)+s(176)+s(177)+s(178)+s(179)+s(180)+s(181)+s(182)+s(183)+s(185)+s(186)+s(187) =< s(166)
s(169)+s(175)+s(176)+s(177)+s(178)+s(179)+s(180)+s(181)+s(182)+s(183)+s(184)+s(185)+s(186)+s(187) =< s(166)
s(191) =< s(154)+2
s(192) =< s(154)+1
s(193) =< s(154)
s(195) =< s(154)-1
s(202) =< max([s(155),s(193),0,s(195),s(193),0,0,s(192)])
s(204) =< s(185)*s(192)
s(205) =< s(178)*s(192)
s(206) =< s(184)*s(193)
s(207) =< s(178)*s(193)
s(208) =< s(176)*s(195)
s(209) =< s(176)*s(193)
s(190) =< s(185)*s(191)
s(210) =< s(184)*s(192)
s(189) =< s(178)*s(192)
s(211) =< s(176)*s(193)
s(212) =< s(202)+1
s(214) =< s(202)
s(217) =< s(187)*s(192)
s(218) =< s(187)*s(191)
s(219) =< s(169)*s(192)
s(220) =< s(186)*s(212)
s(221) =< s(169)*s(193)
s(183)+s(220) =< s(218)+s(205)+s(209)+s(219)+s(156)
s(222) =< s(218)+s(205)+s(209)+s(219)+s(156)
s(177)+s(198) =< s(217)+s(174)+s(207)+s(208)+s(173)+s(221)+s(155)
s(179)+s(199) =< s(217)+s(174)+s(207)+s(208)+s(173)+s(221)+s(155)
s(223) =< s(183)*s(192)
s(222) =< s(183)*s(212)
s(198) =< s(179)*s(214)
s(224) =< s(177)*s(193)
s(199) =< s(177)*s(202)
s(200) =< s(172)+s(171)+s(170)+s(168)+s(153)
s(225) =< max([s(157),s(154),s(192)])+s(208)+s(224)+s(207)+s(223)+s(206)+s(204)
s(226) =< s(225)+1
s(227) =< s(225)
s(201) =< s(169)*s(225)
s(228) =< s(187)*s(226)
s(229) =< s(185)*s(226)
s(216) =< s(184)*s(227)
s(230) =< s(178)*s(226)
s(215) =< s(176)*s(227)
s(165) >= 1
s(159) >= 2
s(160) >= -V_n
s(161) >= -V_n+V_y+1
s(162) >= V_n+2
s(164)+s(163) >= V_x+1
s(167) >= s(165)
s(163) >= s(165)
s(164) >= s(165)
s(167) >= s(167)
s(159) >= s(159)
s(169)+s(175)+s(177)+s(178)+s(179)+s(180)+s(181)+s(182)+s(183)+s(184)+s(185)+s(186)+s(187)+s(188) >= s(163)
s(169)+s(175)+s(176)+s(177)+s(178)+s(179)+s(180)+s(181)+s(182)+s(183)+s(184)+s(185)+s(186)+s(187) >= s(163)
s(169)+s(175)+s(176)+s(177)+s(179)+s(180)+s(181)+s(182)+s(183)+s(184)+s(185)+s(186)+s(187)+s(189) >= s(163)
s(169)+s(175)+s(176)+s(177)+s(179)+s(180)+s(181)+s(182)+s(183)+s(184)+s(186)+s(187)+s(189)+s(190) >= s(163)
s(194) >= s(162)
s(196) >= s(160)+2
s(197) >= s(160)+1
s(198) >= s(179)*s(167)
s(189) >= s(178)*s(167)
s(199) >= s(177)*s(167)
s(188) >= s(188)
s(200) >= s(175)*s(167)
s(201) >= s(169)*s(167)
s(203) >= min([s(161),s(197),s(159),s(196),s(197),s(159),s(159),s(160)])
s(190) >= s(185)*s(194)
s(213) >= s(203)-1
s(215) >= s(176)*s(203)
s(216) >= s(184)*s(213)
s(215) >= s(188)
s(211) >= s(188)

  with precondition: [0>=V_n+2,V_x>=1,V_n>=V_y] 

* Chain [36]: 3*s(231)+3*s(233)+3*s(251)+3*s(252)+3*s(253)+3*s(254)+3*s(255)+3*s(256)+3*s(257)+3*s(258)+3*s(259)+3*s(260)+3*s(261)+3*s(262)+3*s(263)+3*s(265)+1*s(271)+1*s(272)+1*s(273)+1*s(282)+1*s(283)+1*s(284)+1*s(285)+1*s(297)+1*s(299)+1*s(304)+1*s(305)+1*s(306)+1*s(307)+1*s(308)+1*s(309)+1*s(310)+1
  Such that:s(231) =< 1
s(234) =< -V_n-1
s(235) =< -V_n+V_y-1
s(232) =< V_n
s(236) =< V_n-V_y
s(237) =< V_n-V_y+1
s(233) =< V_x
s(240) =< V_x+1
s(238) =< V_y
s(239) =< V_y+1
s(231)+s(249) =< s(234)
s(231)+s(250)+s(251)+s(252)+s(253)+s(254)+s(255)+s(256)+s(257)+s(258)+s(259)+s(260)+s(261)+s(262)+s(263) =< s(240)
s(231)+s(251)+s(252)+s(254)+s(255)+s(256)+s(257)+s(258)+s(259)+s(260)+s(261)+s(262)+s(263)+s(264)+s(265) =< s(240)
s(231)+s(251)+s(252)+s(253)+s(255)+s(256)+s(257)+s(258)+s(259)+s(260)+s(261)+s(262)+s(263)+s(265)+s(266) =< s(240)
s(231)+s(251)+s(252)+s(253)+s(254)+s(256)+s(257)+s(258)+s(259)+s(260)+s(261)+s(262)+s(263)+s(265)+s(267) =< s(240)
s(231)+s(251)+s(253)+s(254)+s(255)+s(256)+s(257)+s(258)+s(259)+s(260)+s(261)+s(262)+s(263)+s(265)+s(268) =< s(240)
s(231)+s(251)+s(252)+s(253)+s(254)+s(255)+s(256)+s(257)+s(258)+s(259)+s(261)+s(262)+s(263)+s(265)+s(269) =< s(240)
s(231)+s(249)+s(251)+s(252)+s(253)+s(254)+s(255)+s(256)+s(257)+s(258)+s(259)+s(260)+s(262)+s(263)+s(265) =< s(240)
s(231)+s(251)+s(252)+s(253)+s(254)+s(255)+s(256)+s(257)+s(258)+s(259)+s(260)+s(261)+s(262)+s(263)+s(265) =< s(240)
s(274) =< s(232)+2
s(275) =< s(232)+1
s(276) =< s(232)
s(279) =< s(232)-1
s(289) =< max([s(236),s(276),0,s(279),s(276),0,0,s(275)])
s(291) =< s(261)*s(275)
s(292) =< s(260)*s(276)
s(293) =< s(254)*s(276)
s(294) =< s(265)*s(279)
s(295) =< s(254)*s(275)
s(296) =< s(265)*s(276)
s(273) =< s(261)*s(274)
s(271) =< s(260)*s(275)
s(272) =< s(254)*s(275)
s(299) =< s(265)*s(276)
s(301) =< s(289)+1
s(303) =< s(289)
s(311) =< s(262)*s(274)
s(312) =< s(263)*s(275)
s(313) =< s(263)*s(274)
s(314) =< s(251)*s(275)
s(304) =< s(262)*s(301)
s(315) =< s(251)*s(276)
s(259)+s(304) =< s(313)+s(295)+s(296)+s(314)+s(237)
s(297) =< s(313)+s(295)+s(296)+s(314)+s(237)
s(253)+s(282) =< s(312)+s(249)+s(269)+s(293)+s(294)+s(268)+s(315)+s(236)
s(255)+s(283) =< s(312)+s(249)+s(269)+s(293)+s(294)+s(268)+s(315)+s(236)
s(316) =< s(259)*s(275)
s(317) =< s(255)*s(275)
s(318) =< s(253)*s(276)
s(297) =< s(259)*s(301)
s(282) =< s(255)*s(303)
s(283) =< s(253)*s(289)
s(231)+s(284) =< s(267)+s(266)+s(264)+s(250)+s(235)
s(320) =< max([s(238),s(232),s(275)])+s(294)+s(318)+s(293)+s(316)+s(292)+s(291)
s(321) =< s(320)+1
s(322) =< s(320)
s(285) =< s(251)*s(320)
s(308) =< s(263)*s(321)
s(309) =< s(261)*s(321)
s(310) =< s(260)*s(322)
s(305) =< s(254)*s(321)
s(306) =< s(265)*s(322)
s(307) =< s(231)*s(321)
s(307) =< s(311)+s(291)+s(292)+s(316)+s(317)+s(293)+s(318)+s(294)+s(239)
s(245) >= 1
s(246) >= 2
s(241) >= -V_n
s(242) >= -V_n+V_y+1
s(243) >= V_n+2
s(248) >= V_x
s(245) >= s(245)
s(231) >= s(245)
s(246) >= s(246)
s(233)+s(251)+s(252)+s(253)+s(254)+s(255)+s(256)+s(257)+s(258)+s(259)+s(260)+s(261)+s(262)+s(263)+s(265) >= s(248)
s(233)+s(251)+s(252)+s(253)+s(255)+s(256)+s(257)+s(258)+s(259)+s(260)+s(261)+s(262)+s(263)+s(265)+s(272) >= s(248)
s(233)+s(251)+s(252)+s(253)+s(255)+s(256)+s(257)+s(258)+s(259)+s(260)+s(262)+s(263)+s(265)+s(272)+s(273) >= s(248)
s(277) >= s(243)
s(280) >= s(241)+2
s(281) >= s(241)+1
s(282) >= s(255)*s(245)
s(272) >= s(254)*s(245)
s(283) >= s(253)*s(245)
s(284) >= s(252)*s(245)
s(285) >= s(251)*s(245)
s(290) >= min([s(242),s(281),s(246),s(280),s(281),s(246),s(246),s(241)])
s(273) >= s(261)*s(277)
s(302) >= s(290)-1
s(306) >= s(265)*s(290)
s(310) >= s(260)*s(302)

  with precondition: [0>=V_n+2,V_x>=2,V_y>=0] 

* Chain [35]: 1
  with precondition: [0>=V_x+1] 

* Chain [34]: 3*s(323)+1
  Such that:s(323) =< V_x+1
s(323) >= V_x+1

  with precondition: [0>=V_y+1,V_x>=0,V_y>=V_n+1] 

* Chain [33]: 3*s(337)+3*s(343)+3*s(344)+3*s(345)+3*s(346)+3*s(347)+3*s(348)+3*s(349)+3*s(350)+3*s(351)+3*s(352)+3*s(353)+3*s(354)+3*s(355)+1*s(357)+1*s(358)+1*s(366)+1*s(367)+1*s(368)+1*s(369)+1*s(378)+1*s(379)+1*s(383)+1*s(384)+1*s(388)+1*s(390)+1*s(396)+1*s(397)+1*s(398)+1
  Such that:s(324) =< -V_n+V_y-1
s(325) =< V_n
s(326) =< V_n-V_y
s(327) =< V_n-V_y+1
s(329) =< V_x+1
s(328) =< V_y
s(337)+s(343)+s(344)+s(345)+s(346)+s(347)+s(348)+s(349)+s(350)+s(351)+s(352)+s(353)+s(354)+s(355) =< s(329)
s(336)+s(337)+s(343)+s(345)+s(346)+s(347)+s(348)+s(349)+s(350)+s(351)+s(352)+s(353)+s(354)+s(355) =< s(329)
s(337)+s(338)+s(343)+s(344)+s(346)+s(347)+s(348)+s(349)+s(350)+s(351)+s(352)+s(353)+s(354)+s(355) =< s(329)
s(337)+s(339)+s(343)+s(344)+s(345)+s(347)+s(348)+s(349)+s(350)+s(351)+s(352)+s(353)+s(354)+s(355) =< s(329)
s(337)+s(340)+s(343)+s(344)+s(345)+s(346)+s(348)+s(349)+s(350)+s(351)+s(352)+s(353)+s(354)+s(355) =< s(329)
s(337)+s(341)+s(344)+s(345)+s(346)+s(347)+s(348)+s(349)+s(350)+s(351)+s(352)+s(353)+s(354)+s(355) =< s(329)
s(337)+s(342)+s(343)+s(344)+s(345)+s(346)+s(347)+s(348)+s(349)+s(350)+s(351)+s(353)+s(354)+s(355) =< s(329)
s(359) =< s(325)+2
s(360) =< s(325)+1
s(361) =< s(325)
s(363) =< s(325)-1
s(370) =< max([s(326),s(361),0,s(363),s(361),0,0,s(360)])
s(372) =< s(353)*s(360)
s(373) =< s(346)*s(360)
s(374) =< s(352)*s(361)
s(375) =< s(346)*s(361)
s(376) =< s(344)*s(363)
s(377) =< s(344)*s(361)
s(358) =< s(353)*s(359)
s(378) =< s(352)*s(360)
s(357) =< s(346)*s(360)
s(379) =< s(344)*s(361)
s(380) =< s(370)+1
s(382) =< s(370)
s(385) =< s(355)*s(360)
s(386) =< s(355)*s(359)
s(387) =< s(337)*s(360)
s(388) =< s(354)*s(380)
s(389) =< s(337)*s(361)
s(351)+s(388) =< s(386)+s(373)+s(377)+s(387)+s(327)
s(390) =< s(386)+s(373)+s(377)+s(387)+s(327)
s(345)+s(366) =< s(385)+s(342)+s(375)+s(376)+s(341)+s(389)+s(326)
s(347)+s(367) =< s(385)+s(342)+s(375)+s(376)+s(341)+s(389)+s(326)
s(391) =< s(351)*s(360)
s(390) =< s(351)*s(380)
s(366) =< s(347)*s(382)
s(392) =< s(345)*s(361)
s(367) =< s(345)*s(370)
s(368) =< s(340)+s(339)+s(338)+s(336)+s(324)
s(393) =< max([s(328),s(325),s(360)])+s(376)+s(392)+s(375)+s(391)+s(374)+s(372)
s(394) =< s(393)+1
s(395) =< s(393)
s(369) =< s(337)*s(393)
s(396) =< s(355)*s(394)
s(397) =< s(353)*s(394)
s(384) =< s(352)*s(395)
s(398) =< s(346)*s(394)
s(383) =< s(344)*s(395)
s(330) >= 1
s(331) >= 2
s(332) >= -V_n
s(333) >= -V_n+V_y+1
s(334) >= V_n+2
s(335) >= V_x+1
s(330) >= s(330)
s(331) >= s(331)
s(337)+s(343)+s(345)+s(346)+s(347)+s(348)+s(349)+s(350)+s(351)+s(352)+s(353)+s(354)+s(355)+s(356) >= s(335)
s(337)+s(343)+s(344)+s(345)+s(346)+s(347)+s(348)+s(349)+s(350)+s(351)+s(352)+s(353)+s(354)+s(355) >= s(335)
s(337)+s(343)+s(344)+s(345)+s(347)+s(348)+s(349)+s(350)+s(351)+s(352)+s(353)+s(354)+s(355)+s(357) >= s(335)
s(337)+s(343)+s(344)+s(345)+s(347)+s(348)+s(349)+s(350)+s(351)+s(352)+s(354)+s(355)+s(357)+s(358) >= s(335)
s(362) >= s(334)
s(364) >= s(332)+2
s(365) >= s(332)+1
s(366) >= s(347)*s(330)
s(357) >= s(346)*s(330)
s(367) >= s(345)*s(330)
s(356) >= s(356)
s(368) >= s(343)*s(330)
s(369) >= s(337)*s(330)
s(371) >= min([s(333),s(365),s(331),s(364),s(365),s(331),s(331),s(332)])
s(358) >= s(353)*s(362)
s(381) >= s(371)-1
s(383) >= s(344)*s(371)
s(384) >= s(352)*s(381)
s(383) >= s(356)
s(379) >= s(356)

  with precondition: [V_x>=0] 


Closed-form bounds of eval_counterex1b_start(V_n,V_x,V_y,B): 
-------------------------------------
* Chain [40] with precondition: [V_x=0,0>=V_n+2,V_y>=0] 
    - Lower bound: V_y+5 
    - Complexity: n
 * Chain [39] with precondition: [0>=V_n+2,V_x>=1,V_y>=0] 
    - Lower bound: V_x+4 
    - Complexity: n
 * Chain [38] with precondition: [0>=V_n+2,V_x>=1,V_y>=0] 
    - Lower bound: 3*V_x+V_y+5 
    - Complexity: n
 * Chain [37] with precondition: [0>=V_n+2,V_x>=1,V_n>=V_y] 
    - Lower bound: 3*V_x+4 
    - Complexity: n
 * Chain [36] with precondition: [0>=V_n+2,V_x>=2,V_y>=0] 
    - Lower bound: 3*V_x+4 
    - Complexity: n
 * Chain [35] with precondition: [0>=V_x+1] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [34] with precondition: [0>=V_y+1,V_x>=0,V_y>=V_n+1] 
    - Lower bound: 3*V_x+4 
    - Complexity: n
 * Chain [33] with precondition: [V_x>=0] 
    - Lower bound: 2*V_x+3 
    - Complexity: n
 
### Partitioned lower bound of eval_counterex1b_start(V_n,V_x,V_y,B): 
* 1 
 if [0>=V_x+1,V_y>=0]
 or [0=1]
* V_x+4 
 if [0>=V_n+2,V_x>=1,V_y>=0]
* 2*V_x+3 
 if [V_x=0,0>=V_n+2,V_y>=0]
 or [V_n+1>=0,V_x>=0,V_y>=0]
Possible lower bounds : [1,V_x+4,2*V_x+3]
Maximum lower bound complexity: n

Time statistics: 
-------------------------------------
* Partial evaluation computed in 135 ms.
* Invariants computed in 584 ms.
   - Backward Invariants 295 ms.
   - Transitive Invariants 127 ms.
* Refinement performed in 777 ms.
* Termination proved in 180 ms.
* Upper bounds computed in 13021 ms.
   - Equation cost structures 640 ms.
   - Phase cost structures 11897 ms.
   - Chain cost structures 331 ms.
   - Solving cost expressions 262 ms.
* Total analysis performed in 14858 ms.


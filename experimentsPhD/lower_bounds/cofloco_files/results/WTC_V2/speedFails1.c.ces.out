Warning: Ignored call to eval_speedFails1_stop/1 in equation eval_speedFails1_bb3_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_speedFails1_bb1_in/4,eval_speedFails1_bb2_in/4]
1. non_recursive : [eval_speedFails1_bb3_in/1]
2. non_recursive : [loop_cont_eval_speedFails1_bb1_in/2]
3. non_recursive : [eval_speedFails1_4/4]
4. non_recursive : [eval_speedFails1_3/4]
5. non_recursive : [eval_speedFails1_2/4]
6. non_recursive : [eval_speedFails1_1/4]
7. non_recursive : [eval_speedFails1_0/4]
8. non_recursive : [eval_speedFails1_bb0_in/4]
9. non_recursive : [eval_speedFails1_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_speedFails1_bb1_in/4
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into eval_speedFails1_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_speedFails1_bb1_in/4 
* CE 4 is refined into CE [5] 
* CE 3 is refined into CE [6] 


#### Refined cost equations eval_speedFails1_bb1_in/4 
* CE 5: eval_speedFails1_bb1_in(V_n,V_m,V__0,B) = 0
     [V__0>=V_n+1,B=2] 
* CE 6: eval_speedFails1_bb1_in(V_n,V_m,V__0,B) = 1+ eval_speedFails1_bb1_in(V_n,V_m,C,D)
     [V_n>=V__0,V_m+V__0=C,D=2,B=2] 

### Cost equations --> "Loop" of eval_speedFails1_bb1_in/4 
* CEs [6] --> Loop 4 
* CEs [5] --> Loop 5 

#### Loops of eval_speedFails1_bb1_in/4 
* Loop 4: eval_speedFails1_bb1_in(V_n,V_m,V__0,B)->  eval_speedFails1_bb1_in(V_n,V_m,V__0',B')
                  [V_n>=V__0,V_m+V__0=V__0',B'=2,B=2] 
* Loop 5: eval_speedFails1_bb1_in(V_n,V_m,V__0,B) [V__0>=V_n+1,B=2] 

### Ranking functions of CR eval_speedFails1_bb1_in(V_n,V_m,V__0,B) 

#### Partial ranking functions of CR eval_speedFails1_bb1_in(V_n,V_m,V__0,B) 


### Resulting Chains:eval_speedFails1_bb1_in(V_n,V_m,V__0,B) 
* [[4]]...
* [[4],5]
* [5]


### Specialization of cost equations eval_speedFails1_start/4 
* CE 2 is refined into CE [7,8,9] 


#### Refined cost equations eval_speedFails1_start/4 
* CE 7: eval_speedFails1_start(V_i,V_n,V_m,B) = 1+ eval_speedFails1_bb1_in(V_n,V_m,V_i,C):[[4]]
     [V_n>=V_i,C=2] 
* CE 8: eval_speedFails1_start(V_i,V_n,V_m,B) = 1+ eval_speedFails1_bb1_in(V_n,V_m,V_i,C):[[4],5]
     [V_n>=V_i,V_m>=1,C=2] 
* CE 9: eval_speedFails1_start(V_i,V_n,V_m,B) = 1+ eval_speedFails1_bb1_in(V_n,V_m,V_i,C):[5]
     [V_i>=V_n+1,C=2] 

### Cost equations --> "Loop" of eval_speedFails1_start/4 
* CEs [9] --> Loop 6 
* CEs [8] --> Loop 7 
* CEs [7] --> Loop 8 

#### Loops of eval_speedFails1_start/4 
* Loop 6: eval_speedFails1_start(V_i,V_n,V_m,B) [V_i>=V_n+1] 
* Loop 7: eval_speedFails1_start(V_i,V_n,V_m,B) [V_n>=V_i,V_m>=1] 
* Loop 8: eval_speedFails1_start(V_i,V_n,V_m,B) [V_n>=V_i] 

### Ranking functions of CR eval_speedFails1_start(V_i,V_n,V_m,B) 

#### Partial ranking functions of CR eval_speedFails1_start(V_i,V_n,V_m,B) 


### Resulting Chains:eval_speedFails1_start(V_i,V_n,V_m,B) 
* [8]...
* [7]
* [6]


Computing Bounds
=====================================

#### Cost of loops [4] 

 * loop 4:eval_speedFails1_bb1_in(V_n,V_m,V__0,B) -> [eval_speedFails1_bb1_in(V_n',V_m',V__0',B')] 
1
#### Cost of phase [4]:eval_speedFails1_bb1_in(V_n,V_m,V__0,B) -> [eval_speedFails1_bb1_in(V_n',V_m',V__0',B')] 
1*it(4)+0
#### Cost of phase [4]:eval_speedFails1_bb1_in(V_n,V_m,V__0,B) -> [eval_speedFails1_bb1_in(V_n',V_m',V__0',B')] 
1*it(4)+0
#### Cost of chains of eval_speedFails1_bb1_in(V_n,V_m,V__0,B):
* Chain [[4]]...: 1*it(4)+0
  with precondition: [V_n>=V__0,B=2] 

* Chain [[4],5]: 1*it(4)+0
  with precondition: [B=2,V_m>=1,V_n>=V__0] 

* Chain [5]: 0
  with precondition: [B=2,V__0>=V_n+1] 


#### Cost of chains of eval_speedFails1_start(V_i,V_n,V_m,B):
* Chain [8]...: 1*s(1)+1
  with precondition: [V_n>=V_i] 

* Chain [7]: 1*s(2)+1
  with precondition: [V_m>=1,V_n>=V_i] 

* Chain [6]: 1
  with precondition: [V_i>=V_n+1] 


Closed-form bounds of eval_speedFails1_start(V_i,V_n,V_m,B): 
-------------------------------------
* Chain [8]... with precondition: [V_n>=V_i] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [7] with precondition: [V_m>=1,V_n>=V_i] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [6] with precondition: [V_i>=V_n+1] 
    - Lower bound: 1 
    - Complexity: constant
 
### Partitioned lower bound of eval_speedFails1_start(V_i,V_n,V_m,B): 
* 1 
 if []
Possible lower bounds : [1]
Maximum lower bound complexity: constant

Time statistics: 
-------------------------------------
* Partial evaluation computed in 21 ms.
* Invariants computed in 22 ms.
   - Backward Invariants 11 ms.
   - Transitive Invariants 5 ms.
* Refinement performed in 33 ms.
* Termination proved in 5 ms.
* Upper bounds computed in 31 ms.
   - Equation cost structures 12 ms.
   - Phase cost structures 8 ms.
   - Chain cost structures 9 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 147 ms.


Warning: Ignored call to eval_exmini_stop/1 in equation eval_exmini_bb3_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_exmini_bb1_in/4,eval_exmini_bb2_in/4]
1. non_recursive : [eval_exmini_bb3_in/1]
2. non_recursive : [loop_cont_eval_exmini_bb1_in/2]
3. non_recursive : [eval_exmini_7/4]
4. non_recursive : [eval_exmini_6/4]
5. non_recursive : [eval_exmini_5/4]
6. non_recursive : [eval_exmini_4/4]
7. non_recursive : [eval_exmini_3/4]
8. non_recursive : [eval_exmini_2/4]
9. non_recursive : [eval_exmini_1/4]
10. non_recursive : [eval_exmini_0/4]
11. non_recursive : [eval_exmini_bb0_in/4]
12. non_recursive : [eval_exmini_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_exmini_bb1_in/4
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into eval_exmini_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_exmini_bb1_in/4 
* CE 5 is refined into CE [6] 
* CE 4 is refined into CE [7] 
* CE 3 is refined into CE [8] 


#### Refined cost equations eval_exmini_bb1_in/4 
* CE 6: eval_exmini_bb1_in(V__02,V__01,V__0,B) = 0
     [V__01>=V__02+1,B=2] 
* CE 7: eval_exmini_bb1_in(V__02,V__01,V__0,B) = 0
     [V__0>=101,B=2] 
* CE 8: eval_exmini_bb1_in(V__02,V__01,V__0,B) = 1+ eval_exmini_bb1_in(C,D,V__01,E)
     [V__02>=V__01,100>=V__0,V__0+1=D,V__02=C+1,E=2,B=2] 

### Cost equations --> "Loop" of eval_exmini_bb1_in/4 
* CEs [8] --> Loop 5 
* CEs [6] --> Loop 6 
* CEs [7] --> Loop 7 

#### Loops of eval_exmini_bb1_in/4 
* Loop 5: eval_exmini_bb1_in(V__02,V__01,V__0,B)->  eval_exmini_bb1_in(A',B',V__01,C')
                  [V__02>=V__01,100>=V__0,V__0+1=B',V__02=A'+1,C'=2,B=2] 
* Loop 6: eval_exmini_bb1_in(V__02,V__01,V__0,B) [V__01>=V__02+1,B=2] 
* Loop 7: eval_exmini_bb1_in(V__02,V__01,V__0,B) [V__0>=101,B=2] 

### Ranking functions of CR eval_exmini_bb1_in(V__02,V__01,V__0,B) 
* RF of phase [5]: [V__02/2-V__01/2-V__0/2+101/2]

#### Partial ranking functions of CR eval_exmini_bb1_in(V__02,V__01,V__0,B) 
* Partial RF of phase [5]:
  - RF of loop [5:1]:
    V__02/2-V__01/2-V__0/2+101/2


### Resulting Chains:eval_exmini_bb1_in(V__02,V__01,V__0,B) 
* [[5],7]
* [[5],6]
* [7]
* [6]


### Specialization of cost equations eval_exmini_start/4 
* CE 2 is refined into CE [9,10,11,12] 


#### Refined cost equations eval_exmini_start/4 
* CE 9: eval_exmini_start(V_i,V_j,V_k,B) = 1+ eval_exmini_bb1_in(V_k,V_j,V_i,C):[[5],7]
     [V_k>=V_j,V_k>=101,100>=V_i,C=2] 
* CE 10: eval_exmini_start(V_i,V_j,V_k,B) = 1+ eval_exmini_bb1_in(V_k,V_j,V_i,C):[[5],6]
     [V_k>=V_j,100>=V_i,C=2] 
* CE 11: eval_exmini_start(V_i,V_j,V_k,B) = 1+ eval_exmini_bb1_in(V_k,V_j,V_i,C):[7]
     [V_i>=101,C=2] 
* CE 12: eval_exmini_start(V_i,V_j,V_k,B) = 1+ eval_exmini_bb1_in(V_k,V_j,V_i,C):[6]
     [V_j>=V_k+1,C=2] 

### Cost equations --> "Loop" of eval_exmini_start/4 
* CEs [12] --> Loop 8 
* CEs [11] --> Loop 9 
* CEs [10] --> Loop 10 
* CEs [9] --> Loop 11 

#### Loops of eval_exmini_start/4 
* Loop 8: eval_exmini_start(V_i,V_j,V_k,B) [V_j>=V_k+1] 
* Loop 9: eval_exmini_start(V_i,V_j,V_k,B) [V_i>=101] 
* Loop 10: eval_exmini_start(V_i,V_j,V_k,B) [V_k>=V_j,100>=V_i] 
* Loop 11: eval_exmini_start(V_i,V_j,V_k,B) [V_k>=V_j,V_k>=101,100>=V_i] 

### Ranking functions of CR eval_exmini_start(V_i,V_j,V_k,B) 

#### Partial ranking functions of CR eval_exmini_start(V_i,V_j,V_k,B) 


### Resulting Chains:eval_exmini_start(V_i,V_j,V_k,B) 
* [11]
* [10]
* [9]
* [8]


Computing Bounds
=====================================

#### Cost of loops [5] 

 * loop 5:eval_exmini_bb1_in(V__02,V__01,V__0,B) -> [eval_exmini_bb1_in(V__02',V__01',V__0',B')] 
1
#### Cost of phase [5]:eval_exmini_bb1_in(V__02,V__01,V__0,B) -> [eval_exmini_bb1_in(V__02',V__01',V__0',B')] 
1*it(5)+0
  Such that:it(5) =< V__02/2-V__01/2-V__0/2+101/2
it(5) =< V__02/2-V__01/2-V__0/2-V__02'/2+V__01'/2+V__0'/2
it(5) >= V__02/2-V__01/2-V__0/2-V__02'/2+V__01'/2+V__0'/2

#### Cost of phase [5]:eval_exmini_bb1_in(V__02,V__01,V__0,B) -> [eval_exmini_bb1_in(V__02',V__01',V__0',B')] 
1*it(5)+0
  Such that:it(5) =< V__02/2-V__01/2-V__0/2+101/2
it(5) =< V__02/2-V__01/2-V__0/2-V__02'/2+V__01'/2+V__0'/2
it(5) >= V__02/2-V__01/2-V__0/2-V__02'/2+V__01'/2+V__0'/2

#### Cost of chains of eval_exmini_bb1_in(V__02,V__01,V__0,B):
* Chain [[5],7]: 1*it(5)+0
  Such that:it(5) =< V__02/2-V__01/2-V__0/2+101/2
it(5) >= 1

  with precondition: [B=2,100>=V__0,V__02>=101,V__02>=V__01] 

* Chain [[5],6]: 1*it(5)+0
  Such that:it(5) =< V__02/2-V__01/2-V__0/2+101/2
it(5) >= V__02-100

  with precondition: [B=2,100>=V__0,V__02>=V__01] 

* Chain [7]: 0
  with precondition: [B=2,V__0>=101] 

* Chain [6]: 0
  with precondition: [B=2,V__01>=V__02+1] 


#### Cost of chains of eval_exmini_start(V_i,V_j,V_k,B):
* Chain [11]: 1*s(1)+1
  Such that:s(1) =< -V_i/2-V_j/2+V_k/2+101/2
s(1) >= 1

  with precondition: [100>=V_i,V_k>=101,V_k>=V_j] 

* Chain [10]: 1*s(2)+1
  Such that:s(2) =< -V_i/2-V_j/2+V_k/2+101/2
s(2) >= V_k-100

  with precondition: [100>=V_i,V_k>=V_j] 

* Chain [9]: 1
  with precondition: [V_i>=101] 

* Chain [8]: 1
  with precondition: [V_j>=V_k+1] 


Closed-form bounds of eval_exmini_start(V_i,V_j,V_k,B): 
-------------------------------------
* Chain [11] with precondition: [100>=V_i,V_k>=101,V_k>=V_j] 
    - Lower bound: 2 
    - Complexity: constant
 * Chain [10] with precondition: [100>=V_i,V_k>=V_j] 
    - Lower bound: nat(V_k-100)+1 
    - Complexity: n
 * Chain [9] with precondition: [V_i>=101] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [8] with precondition: [V_j>=V_k+1] 
    - Lower bound: 1 
    - Complexity: constant
 
### Partitioned lower bound of eval_exmini_start(V_i,V_j,V_k,B): 
* 1 
 if [100>=V_i,100>=V_k,V_k>=V_j]
 or [V_j>=V_k+1]
 or [V_i>=101,V_k>=V_j]
* 2 
 if [100>=V_i,V_k>=101,V_k>=V_j]
Possible lower bounds : [1,2]
Maximum lower bound complexity: constant

Time statistics: 
-------------------------------------
* Partial evaluation computed in 31 ms.
* Invariants computed in 35 ms.
   - Backward Invariants 19 ms.
   - Transitive Invariants 8 ms.
* Refinement performed in 44 ms.
* Termination proved in 9 ms.
* Upper bounds computed in 82 ms.
   - Equation cost structures 20 ms.
   - Phase cost structures 13 ms.
   - Chain cost structures 30 ms.
   - Solving cost expressions 3 ms.
* Total analysis performed in 249 ms.


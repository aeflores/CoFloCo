Warning: Ignored call to eval_serpent_stop/1 in equation eval_serpent_bb7_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_serpent_2/9,eval_serpent_3/10,eval_serpent_bb1_in/9,eval_serpent_bb2_in/9,eval_serpent_bb3_in/10]
1. recursive : [eval_serpent_10/10,eval_serpent_11/11,eval_serpent_bb4_in/10,eval_serpent_bb5_in/10,eval_serpent_bb6_in/11]
2. recursive : [eval_serpent_7/6,eval_serpent_8/6,eval_serpent_9/6,eval_serpent__critedge1_in/4,eval_serpent__critedge_in/5,loop_cont_eval_serpent_bb1_in/6,loop_cont_eval_serpent_bb4_in/5]
3. non_recursive : [eval_serpent_bb7_in/1]
4. non_recursive : [loop_cont_eval_serpent__critedge1_in/2]
5. non_recursive : [eval_serpent_1/2]
6. non_recursive : [eval_serpent_0/2]
7. non_recursive : [eval_serpent_bb0_in/2]
8. non_recursive : [eval_serpent_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_serpent_bb1_in/9
1. SCC is partially evaluated into eval_serpent_bb4_in/10
2. SCC is partially evaluated into eval_serpent__critedge1_in/4
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_serpent_1/2
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into eval_serpent_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_serpent_bb1_in/9 
* CE 7 is refined into CE [13] 
* CE 9 is refined into CE [14] 
* CE 8 is refined into CE [15] 


#### Refined cost equations eval_serpent_bb1_in/9 
* CE 13: eval_serpent_bb1_in(A,B,C,D,E,A,B,C,D) = 0
     [B>=D,D>=0,C>=0,E=2] 
* CE 14: eval_serpent_bb1_in(A,B,C,D,E,A,B,C,D) = 0
     [B>=D,C>=0,0>=D+1,E=2] 
* CE 15: eval_serpent_bb1_in(V_n,V_y_0,V_x_0,V_y_1,B,C,D,E,F) = 1+ eval_serpent_bb1_in(V_n,V_y_0,V_x_0,G,H,C,D,E,F)
     [V_y_0>=V_y_1,V_y_1>=0,V_x_0>=0,V_y_1=G+1,H=2,B=2] 

### Cost equations --> "Loop" of eval_serpent_bb1_in/9 
* CEs [15] --> Loop 12 
* CEs [13] --> Loop 13 
* CEs [14] --> Loop 14 

#### Loops of eval_serpent_bb1_in/9 
* Loop 12: eval_serpent_bb1_in(V_n,V_y_0,V_x_0,V_y_1,B,C,D,E,F)->  eval_serpent_bb1_in(V_n,V_y_0,V_x_0,V_y_1',B',C,D,E,F)
                  [V_y_0>=V_y_1,V_y_1>=0,V_x_0>=0,V_y_1=V_y_1'+1,B'=2,B=2] 
* Loop 13: eval_serpent_bb1_in(A,B,C,D,E,A,B,C,D) [B>=D,D>=0,C>=0,E=2] 
* Loop 14: eval_serpent_bb1_in(A,B,C,D,E,A,B,C,D) [B>=D,C>=0,0>=D+1,E=2] 

### Ranking functions of CR eval_serpent_bb1_in(V_n,V_y_0,V_x_0,V_y_1,B,C,D,E,F) 
* RF of phase [12]: [V_y_1+1]

#### Partial ranking functions of CR eval_serpent_bb1_in(V_n,V_y_0,V_x_0,V_y_1,B,C,D,E,F) 
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    V_y_1+1


### Resulting Chains:eval_serpent_bb1_in(V_n,V_y_0,V_x_0,V_y_1,B,C,D,E,F) 
* [[12],14]
* [[12],13]
* [14]
* [13]


### Specialization of cost equations eval_serpent_bb4_in/10 
* CE 10 is refined into CE [16] 
* CE 12 is refined into CE [17] 
* CE 11 is refined into CE [18] 


#### Refined cost equations eval_serpent_bb4_in/10 
* CE 16: eval_serpent_bb4_in(A,B,C,D,E,F,G,A,F,E) = 0
     [A>=F,F>=D,E+1=C,G=3] 
* CE 17: eval_serpent_bb4_in(A,B,C,D,E,F,G,A,F,E) = 0
     [F>=D,F>=A+1,E+1=C,G=3] 
* CE 18: eval_serpent_bb4_in(V_n,V_y_0,V_x_0,V_y_1,V_6,V_y_2,B,C,D,E) = 1+ eval_serpent_bb4_in(V_n,V_y_0,F,V_y_1,V_6,G,H,C,D,E)
     [V_n>=V_y_2,V_y_2>=V_y_1,V_y_2+1=G,V_6+1=F,V_6+1=V_x_0,H=3,B=3] 

### Cost equations --> "Loop" of eval_serpent_bb4_in/10 
* CEs [18] --> Loop 15 
* CEs [16] --> Loop 16 
* CEs [17] --> Loop 17 

#### Loops of eval_serpent_bb4_in/10 
* Loop 15: eval_serpent_bb4_in(V_n,V_y_0,V_x_0,V_y_1,V_6,V_y_2,B,C,D,E)->  eval_serpent_bb4_in(V_n,V_y_0,V_x_0',V_y_1,V_6,V_y_2',B',C,D,E)
                  [V_n>=V_y_2,V_y_2>=V_y_1,V_y_2+1=V_y_2',V_6+1=V_x_0',V_6+1=V_x_0,B'=3,B=3] 
* Loop 16: eval_serpent_bb4_in(A,B,C,D,E,F,G,A,F,E) [A>=F,F>=D,E+1=C,G=3] 
* Loop 17: eval_serpent_bb4_in(A,B,C,D,E,F,G,A,F,E) [F>=D,F>=A+1,E+1=C,G=3] 

### Ranking functions of CR eval_serpent_bb4_in(V_n,V_y_0,V_x_0,V_y_1,V_6,V_y_2,B,C,D,E) 
* RF of phase [15]: [V_n-V_y_2+1]

#### Partial ranking functions of CR eval_serpent_bb4_in(V_n,V_y_0,V_x_0,V_y_1,V_6,V_y_2,B,C,D,E) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    V_n-V_y_2+1


### Resulting Chains:eval_serpent_bb4_in(V_n,V_y_0,V_x_0,V_y_1,V_6,V_y_2,B,C,D,E) 
* [[15],17]
* [[15],16]
* [17]
* [16]


### Specialization of cost equations eval_serpent__critedge1_in/4 
* CE 6 is refined into CE [19] 
* CE 5 is refined into CE [20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35] 


#### Refined cost equations eval_serpent__critedge1_in/4 
* CE 19: eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) = 0
     [0>=V_x_0+1,B=4] 
* CE 20: eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) = 3+ eval_serpent_bb1_in(V_n,V_y_0,C,V_y_0,D,V_n,V_y_0,E,F):[[12],14]+ eval_serpent_bb4_in(V_n,V_y_0,G,H,I,J,K,V_n,L,I):[[15],17]+ eval_serpent__critedge1_in(V_n,M,I,N)
     [V_n+1>=0,I+1>=0,V_y_0>=0,V_n+1=M,V_n+1=L,I+1=G,I+1=E,I+1=C,I+1=V_x_0,N=4,K=3,J+1=0,H+1=0,F+1=0,D=2,B=4] 
* CE 21: eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) = 3+ eval_serpent_bb1_in(V_n,V_y_0,C,V_y_0,D,V_n,V_y_0,E,F):[[12],14]+ eval_serpent_bb4_in(V_n,V_y_0,G,H,I,J,K,V_n,L,I):[[15],16]+ eval_serpent__critedge1_in(V_n,L,I,M)
     [V_n>=L,L>=0,I+1>=0,V_y_0>=0,I+1=G,I+1=E,I+1=C,I+1=V_x_0,M=4,K=3,J+1=0,H+1=0,F+1=0,D=2,B=4] 
* CE 22: eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) = 3+ eval_serpent_bb1_in(V_n,V_y_0,C,V_y_0,D,V_n,V_y_0,E,F):[[12],14]+ eval_serpent_bb4_in(V_n,V_y_0,G,H,I,J,K,V_n,L,I):[17]+ eval_serpent__critedge1_in(V_n,M,I,N)
     [I+1>=0,V_y_0>=0,0>=V_n+2,I+1=G,I+1=E,I+1=C,I+1=V_x_0,N=4,M+1=0,L+1=0,K=3,J+1=0,H+1=0,F+1=0,D=2,B=4] 
* CE 23: eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) = 3+ eval_serpent_bb1_in(V_n,V_y_0,C,V_y_0,D,V_n,V_y_0,E,F):[[12],14]+ eval_serpent_bb4_in(V_n,V_y_0,G,H,I,J,K,V_n,L,I):[16]+ eval_serpent__critedge1_in(V_n,M,I,N)
     [V_n+1>=0,I+1>=0,V_y_0>=0,I+1=G,I+1=E,I+1=C,I+1=V_x_0,N=4,M+1=0,L+1=0,K=3,J+1=0,H+1=0,F+1=0,D=2,B=4] 
* CE 24: eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) = 3+ eval_serpent_bb1_in(V_n,V_y_0,C,V_y_0,D,V_n,V_y_0,E,F):[[12],13]+ eval_serpent_bb4_in(V_n,V_y_0,G,F,H,F,I,V_n,J,H):[[15],17]+ eval_serpent__critedge1_in(V_n,K,H,L)
     [V_n>=F,V_y_0>=F+1,H+1>=0,F>=0,V_n+1=K,V_n+1=J,H+1=G,H+1=E,H+1=C,H+1=V_x_0,L=4,I=3,D=2,B=4] 
* CE 25: eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) = 3+ eval_serpent_bb1_in(V_n,V_y_0,C,V_y_0,D,V_n,V_y_0,E,F):[[12],13]+ eval_serpent_bb4_in(V_n,V_y_0,G,F,H,F,I,V_n,J,H):[[15],16]+ eval_serpent__critedge1_in(V_n,J,H,K)
     [V_n>=J,J>=F+1,V_y_0>=F+1,H+1>=0,F>=0,H+1=G,H+1=E,H+1=C,H+1=V_x_0,K=4,I=3,D=2,B=4] 
* CE 26: eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) = 3+ eval_serpent_bb1_in(V_n,V_y_0,C,V_y_0,D,V_n,V_y_0,E,F):[[12],13]+ eval_serpent_bb4_in(V_n,V_y_0,G,F,H,F,I,V_n,F,H):[17]+ eval_serpent__critedge1_in(V_n,F,H,J)
     [V_y_0>=F+1,F>=V_n+1,F>=0,H+1>=0,H+1=G,H+1=E,H+1=C,H+1=V_x_0,J=4,I=3,D=2,B=4] 
* CE 27: eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) = 3+ eval_serpent_bb1_in(V_n,V_y_0,C,V_y_0,D,V_n,V_y_0,E,F):[[12],13]+ eval_serpent_bb4_in(V_n,V_y_0,G,F,H,F,I,V_n,F,H):[16]+ eval_serpent__critedge1_in(V_n,F,H,J)
     [V_n>=F,V_y_0>=F+1,F>=0,H+1>=0,H+1=G,H+1=E,H+1=C,H+1=V_x_0,J=4,I=3,D=2,B=4] 
* CE 28: eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) = 3+ eval_serpent_bb1_in(V_n,V_y_0,C,V_y_0,D,V_n,V_y_0,E,V_y_0):[14]+ eval_serpent_bb4_in(V_n,V_y_0,F,V_y_0,G,V_y_0,H,V_n,I,G):[[15],17]+ eval_serpent__critedge1_in(V_n,J,G,K)
     [V_n>=V_y_0,G+1>=0,0>=V_y_0+1,V_n+1=J,V_n+1=I,G+1=F,G+1=E,G+1=C,G+1=V_x_0,K=4,H=3,D=2,B=4] 
* CE 29: eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) = 3+ eval_serpent_bb1_in(V_n,V_y_0,C,V_y_0,D,V_n,V_y_0,E,V_y_0):[14]+ eval_serpent_bb4_in(V_n,V_y_0,F,V_y_0,G,V_y_0,H,V_n,I,G):[[15],16]+ eval_serpent__critedge1_in(V_n,I,G,J)
     [V_n>=I,I>=V_y_0+1,G+1>=0,0>=V_y_0+1,G+1=F,G+1=E,G+1=C,G+1=V_x_0,J=4,H=3,D=2,B=4] 
* CE 30: eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) = 3+ eval_serpent_bb1_in(V_n,V_y_0,C,V_y_0,D,V_n,V_y_0,E,V_y_0):[14]+ eval_serpent_bb4_in(V_n,V_y_0,F,V_y_0,G,V_y_0,H,V_n,V_y_0,G):[17]+ eval_serpent__critedge1_in(V_n,V_y_0,G,I)
     [V_y_0>=V_n+1,G+1>=0,0>=V_y_0+1,G+1=F,G+1=E,G+1=C,G+1=V_x_0,I=4,H=3,D=2,B=4] 
* CE 31: eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) = 3+ eval_serpent_bb1_in(V_n,V_y_0,C,V_y_0,D,V_n,V_y_0,E,V_y_0):[14]+ eval_serpent_bb4_in(V_n,V_y_0,F,V_y_0,G,V_y_0,H,V_n,V_y_0,G):[16]+ eval_serpent__critedge1_in(V_n,V_y_0,G,I)
     [V_n>=V_y_0,G+1>=0,0>=V_y_0+1,G+1=F,G+1=E,G+1=C,G+1=V_x_0,I=4,H=3,D=2,B=4] 
* CE 32: eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) = 3+ eval_serpent_bb1_in(V_n,V_y_0,C,V_y_0,D,V_n,V_y_0,E,V_y_0):[13]+ eval_serpent_bb4_in(V_n,V_y_0,F,V_y_0,G,V_y_0,H,V_n,I,G):[[15],17]+ eval_serpent__critedge1_in(V_n,J,G,K)
     [V_n>=V_y_0,G+1>=0,V_y_0>=0,V_n+1=J,V_n+1=I,G+1=F,G+1=E,G+1=C,G+1=V_x_0,K=4,H=3,D=2,B=4] 
* CE 33: eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) = 3+ eval_serpent_bb1_in(V_n,V_y_0,C,V_y_0,D,V_n,V_y_0,E,V_y_0):[13]+ eval_serpent_bb4_in(V_n,V_y_0,F,V_y_0,G,V_y_0,H,V_n,I,G):[[15],16]+ eval_serpent__critedge1_in(V_n,I,G,J)
     [V_n>=I,I>=V_y_0+1,G+1>=0,V_y_0>=0,G+1=F,G+1=E,G+1=C,G+1=V_x_0,J=4,H=3,D=2,B=4] 
* CE 34: eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) = 3+ eval_serpent_bb1_in(V_n,V_y_0,C,V_y_0,D,V_n,V_y_0,E,V_y_0):[13]+ eval_serpent_bb4_in(V_n,V_y_0,F,V_y_0,G,V_y_0,H,V_n,V_y_0,G):[17]+ eval_serpent__critedge1_in(V_n,V_y_0,G,I)
     [V_y_0>=V_n+1,V_y_0>=0,G+1>=0,G+1=F,G+1=E,G+1=C,G+1=V_x_0,I=4,H=3,D=2,B=4] 
* CE 35: eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) = 3+ eval_serpent_bb1_in(V_n,V_y_0,C,V_y_0,D,V_n,V_y_0,E,V_y_0):[13]+ eval_serpent_bb4_in(V_n,V_y_0,F,V_y_0,G,V_y_0,H,V_n,V_y_0,G):[16]+ eval_serpent__critedge1_in(V_n,V_y_0,G,I)
     [V_n>=V_y_0,V_y_0>=0,G+1>=0,G+1=F,G+1=E,G+1=C,G+1=V_x_0,I=4,H=3,D=2,B=4] 

### Cost equations --> "Loop" of eval_serpent__critedge1_in/4 
* CEs [27] --> Loop 18 
* CEs [26] --> Loop 19 
* CEs [25] --> Loop 20 
* CEs [33] --> Loop 21 
* CEs [21] --> Loop 22 
* CEs [29] --> Loop 23 
* CEs [35] --> Loop 24 
* CEs [34] --> Loop 25 
* CEs [31] --> Loop 26 
* CEs [30] --> Loop 27 
* CEs [32] --> Loop 28 
* CEs [24] --> Loop 29 
* CEs [20] --> Loop 30 
* CEs [28] --> Loop 31 
* CEs [23] --> Loop 32 
* CEs [22] --> Loop 33 
* CEs [19] --> Loop 34 

#### Loops of eval_serpent__critedge1_in/4 
* Loop 18: eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B)->  eval_serpent__critedge1_in(V_n,V_y_0',V_x_0',B')
                  [V_y_0>=V_y_0'+1,V_n>=V_y_0',V_x_0'+1>=0,V_y_0'>=0,V_x_0'+1=V_x_0,B'=4,B=4] 
* Loop 19: eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B)->  eval_serpent__critedge1_in(V_n,V_y_0',V_x_0',B')
                  [V_y_0>=V_y_0'+1,V_y_0'>=V_n+1,V_x_0'+1>=0,V_y_0'>=0,V_x_0'+1=V_x_0,B'=4,B=4] 
* Loop 20: eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B)->  eval_serpent__critedge1_in(V_n,V_y_0',V_x_0',B')
                  [V_n>=V_y_0',V_x_0'+1>=0,V_y_0'>=1,V_y_0>=1,V_x_0'+1=V_x_0,B'=4,B=4] 
* Loop 21: eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B)->  eval_serpent__critedge1_in(V_n,V_y_0',V_x_0',B')
                  [V_n>=V_y_0',V_y_0'>=V_y_0+1,V_x_0'+1>=0,V_y_0>=0,V_x_0'+1=V_x_0,B'=4,B=4] 
* Loop 22: eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B)->  eval_serpent__critedge1_in(V_n,V_y_0',V_x_0',B')
                  [V_n>=V_y_0',V_x_0'+1>=0,V_y_0'>=0,V_y_0>=0,V_x_0'+1=V_x_0,B'=4,B=4] 
* Loop 23: eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B)->  eval_serpent__critedge1_in(V_n,V_y_0',V_x_0',B')
                  [V_n>=V_y_0',V_y_0'>=V_y_0+1,V_x_0'+1>=0,0>=V_y_0+1,V_x_0'+1=V_x_0,B'=4,B=4] 
* Loop 24: eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B)->  eval_serpent__critedge1_in(V_n,V_y_0,V_x_0',B')
                  [V_n>=V_y_0,V_x_0'+1>=0,V_y_0>=0,V_x_0'+1=V_x_0,B'=4,B=4] 
* Loop 25: eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B)->  eval_serpent__critedge1_in(V_n,V_y_0,V_x_0',B')
                  [V_y_0>=V_n+1,V_x_0'+1>=0,V_y_0>=0,V_x_0'+1=V_x_0,B'=4,B=4] 
* Loop 26: eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B)->  eval_serpent__critedge1_in(V_n,V_y_0,V_x_0',B')
                  [V_n>=V_y_0,V_x_0'+1>=0,0>=V_y_0+1,V_x_0'+1=V_x_0,B'=4,B=4] 
* Loop 27: eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B)->  eval_serpent__critedge1_in(V_n,V_y_0,V_x_0',B')
                  [V_y_0>=V_n+1,V_x_0'+1>=0,0>=V_y_0+1,V_x_0'+1=V_x_0,B'=4,B=4] 
* Loop 28: eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B)->  eval_serpent__critedge1_in(V_n,V_y_0',V_x_0',B')
                  [V_n>=V_y_0,V_x_0'+1>=0,V_y_0>=0,V_n+1=V_y_0',V_x_0'+1=V_x_0,B'=4,B=4] 
* Loop 29: eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B)->  eval_serpent__critedge1_in(V_n,V_y_0',V_x_0',B')
                  [V_x_0'+1>=0,V_y_0>=1,V_n>=0,V_n+1=V_y_0',V_x_0'+1=V_x_0,B'=4,B=4] 
* Loop 30: eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B)->  eval_serpent__critedge1_in(V_n,V_y_0',V_x_0',B')
                  [V_x_0'+1>=0,V_y_0>=0,V_n+1>=0,V_n+1=V_y_0',V_x_0'+1=V_x_0,B'=4,B=4] 
* Loop 31: eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B)->  eval_serpent__critedge1_in(V_n,V_y_0',V_x_0',B')
                  [V_n>=V_y_0,V_x_0'+1>=0,0>=V_y_0+1,V_n+1=V_y_0',V_x_0'+1=V_x_0,B'=4,B=4] 
* Loop 32: eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B)->  eval_serpent__critedge1_in(V_n,V_y_0',V_x_0',B')
                  [V_x_0'+1>=0,V_y_0>=0,V_n+1>=0,V_x_0'+1=V_x_0,B'=4,V_y_0'+1=0,B=4] 
* Loop 33: eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B)->  eval_serpent__critedge1_in(V_n,V_y_0',V_x_0',B')
                  [V_x_0'+1>=0,V_y_0>=0,0>=V_n+2,V_x_0'+1=V_x_0,B'=4,V_y_0'+1=0,B=4] 
* Loop 34: eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) [0>=V_x_0+1,B=4] 

### Ranking functions of CR eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) 
* RF of phase [18,19,20,21,22,23,24,25,26,28,29,30,31,32]: [V_x_0+1]

#### Partial ranking functions of CR eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) 
* Partial RF of phase [18,19,20,21,22,23,24,25,26,28,29,30,31,32]:
  - RF of loop [18:1]:
    V_y_0 depends on loops [20:1,21:1,22:1,23:1,28:1,29:1,30:1,31:1] 
  - RF of loop [18:1,19:1,20:1,21:1,22:1,23:1,24:1,25:1,26:1,28:1,29:1,30:1,31:1,32:1]:
    V_x_0+1
  - RF of loop [19:1]:
    -V_n+V_y_0-1 depends on loops [20:1,21:1,22:1,23:1,28:1,29:1,30:1,31:1] 
    V_y_0-3 depends on loops [20:1,21:1,22:1,23:1,28:1,29:1,30:1,31:1] 
  - RF of loop [21:1]:
    V_n-V_y_0 depends on loops [18:1,19:1,20:1,22:1,29:1,30:1,32:1] 
  - RF of loop [23:1]:
    V_n-V_y_0-1 depends on loops [18:1,19:1,20:1,22:1,29:1,30:1,32:1] 
    -V_y_0 depends on loops [18:1,19:1,20:1,22:1,29:1,30:1,32:1] 
  - RF of loop [28:1]:
    V_n-V_y_0+1 depends on loops [18:1,19:1,20:1,22:1,29:1,30:1,32:1] 
  - RF of loop [31:1]:
    -V_y_0/3 depends on loops [18:1,19:1,20:1,22:1,29:1,30:1,32:1] 
  - RF of loop [32:1]:
    2*V_n+V_y_0-1 depends on loops [20:1,21:1,22:1,23:1,28:1,29:1,30:1,31:1] 
    V_y_0+1 depends on loops [20:1,21:1,22:1,23:1,28:1,29:1,30:1,31:1] 


### Resulting Chains:eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) 
* [[18,19,20,21,22,23,24,25,26,28,29,30,31,32],34]


### Specialization of cost equations eval_serpent_1/2 
* CE 4 is refined into CE [36] 
* CE 3 is refined into CE [37] 


#### Refined cost equations eval_serpent_1/2 
* CE 36: eval_serpent_1(V_n,B) = 1+ eval_serpent__critedge1_in(V_n,V_n,V_n,C):[[18,19,20,21,22,23,24,25,26,28,29,30,31,32],34]
     [V_n>=1,C=4] 
* CE 37: eval_serpent_1(V_n,B) = 0
     [0>=V_n] 

### Cost equations --> "Loop" of eval_serpent_1/2 
* CEs [36] --> Loop 35 
* CEs [37] --> Loop 36 

#### Loops of eval_serpent_1/2 
* Loop 35: eval_serpent_1(V_n,B) [V_n>=1] 
* Loop 36: eval_serpent_1(V_n,B) [0>=V_n] 

### Ranking functions of CR eval_serpent_1(V_n,B) 

#### Partial ranking functions of CR eval_serpent_1(V_n,B) 


### Resulting Chains:eval_serpent_1(V_n,B) 
* [36]
* [35]


### Specialization of cost equations eval_serpent_start/2 
* CE 2 is refined into CE [38,39] 


#### Refined cost equations eval_serpent_start/2 
* CE 38: eval_serpent_start(V_n,B) = 0+ eval_serpent_1(V_n,B):[36]
     [0>=V_n] 
* CE 39: eval_serpent_start(V_n,B) = 0+ eval_serpent_1(V_n,B):[35]
     [V_n>=1] 

### Cost equations --> "Loop" of eval_serpent_start/2 
* CEs [39] --> Loop 37 
* CEs [38] --> Loop 38 

#### Loops of eval_serpent_start/2 
* Loop 37: eval_serpent_start(V_n,B) [V_n>=1] 
* Loop 38: eval_serpent_start(V_n,B) [0>=V_n] 

### Ranking functions of CR eval_serpent_start(V_n,B) 

#### Partial ranking functions of CR eval_serpent_start(V_n,B) 


### Resulting Chains:eval_serpent_start(V_n,B) 
* [38]
* [37]


Computing Bounds
=====================================

#### Cost of loops [12] 

 * loop 12:eval_serpent_bb1_in(V_n,V_y_0,V_x_0,V_y_1,B,C,D,E,F) -> [eval_serpent_bb1_in(V_n',V_y_0',V_x_0',V_y_1',B',C',D',E',F')] 
1
#### Cost of phase [12]:eval_serpent_bb1_in(V_n,V_y_0,V_x_0,V_y_1,B,C,D,E,F) -> [eval_serpent_bb1_in(V_n',V_y_0',V_x_0',V_y_1',B',C',D',E',F')] 
1*it(12)+0
  Such that:it(12) =< V_y_1+1
it(12) =< V_y_1-V_y_1'
it(12) >= V_y_1-V_y_1'

#### Cost of phase [12]:eval_serpent_bb1_in(V_n,V_y_0,V_x_0,V_y_1,B,C,D,E,F) -> [eval_serpent_bb1_in(V_n',V_y_0',V_x_0',V_y_1',B',C',D',E',F')] 
1*it(12)+0
  Such that:it(12) =< V_y_1+1
it(12) =< V_y_1-V_y_1'
it(12) >= V_y_1-V_y_1'

#### Cost of chains of eval_serpent_bb1_in(V_n,V_y_0,V_x_0,V_y_1,B,C,D,E,F):
* Chain [[12],14]: 1*it(12)+0
  Such that:it(12) =< V_y_1+1
it(12) >= V_y_1+1

  with precondition: [B=2,F+1=0,V_n=C,V_y_0=D,V_x_0=E,V_x_0>=0,V_y_1>=0,V_y_0>=V_y_1] 

* Chain [[12],13]: 1*it(12)+0
  Such that:it(12) =< V_y_1-F
it(12) >= V_y_1-F

  with precondition: [B=2,V_n=C,V_y_0=D,V_x_0=E,V_x_0>=0,F>=0,V_y_0>=V_y_1,V_y_1>=F+1] 

* Chain [14]: 0
  with precondition: [B=2,C=V_n,V_y_0=D,V_x_0=E,V_y_1=F,0>=V_y_1+1,V_x_0>=0,V_y_0>=V_y_1] 

* Chain [13]: 0
  with precondition: [B=2,C=V_n,V_y_0=D,V_x_0=E,V_y_1=F,V_x_0>=0,V_y_1>=0,V_y_0>=V_y_1] 


#### Cost of loops [15] 

 * loop 15:eval_serpent_bb4_in(V_n,V_y_0,V_x_0,V_y_1,V_6,V_y_2,B,C,D,E) -> [eval_serpent_bb4_in(V_n',V_y_0',V_x_0',V_y_1',V_6',V_y_2',B',C',D',E')] 
1
#### Cost of phase [15]:eval_serpent_bb4_in(V_n,V_y_0,V_x_0,V_y_1,V_6,V_y_2,B,C,D,E) -> [eval_serpent_bb4_in(V_n',V_y_0',V_x_0',V_y_1',V_6',V_y_2',B',C',D',E')] 
1*it(15)+0
  Such that:it(15) =< V_n-V_y_2+1
it(15) =< V_n-V_y_2-V_n'+V_y_2'
it(15) >= V_n-V_y_2-V_n'+V_y_2'

#### Cost of phase [15]:eval_serpent_bb4_in(V_n,V_y_0,V_x_0,V_y_1,V_6,V_y_2,B,C,D,E) -> [eval_serpent_bb4_in(V_n',V_y_0',V_x_0',V_y_1',V_6',V_y_2',B',C',D',E')] 
1*it(15)+0
  Such that:it(15) =< V_n-V_y_2+1
it(15) =< V_n-V_y_2-V_n'+V_y_2'
it(15) >= V_n-V_y_2-V_n'+V_y_2'

#### Cost of chains of eval_serpent_bb4_in(V_n,V_y_0,V_x_0,V_y_1,V_6,V_y_2,B,C,D,E):
* Chain [[15],17]: 1*it(15)+0
  Such that:it(15) =< V_n-V_y_2+1
it(15) >= V_n-V_y_2+1

  with precondition: [B=3,V_x_0=V_6+1,V_n=C,V_n+1=D,V_x_0=E+1,V_y_2>=V_y_1,V_n>=V_y_2] 

* Chain [[15],16]: 1*it(15)+0
  Such that:it(15) =< -V_y_2+D
it(15) >= -V_y_2+D

  with precondition: [B=3,V_x_0=V_6+1,V_n=C,V_x_0=E+1,V_y_2>=V_y_1,D>=V_y_2+1,V_n>=D] 

* Chain [17]: 0
  with precondition: [B=3,V_x_0=V_6+1,V_n=C,V_y_2=D,V_x_0=E+1,V_y_2>=V_n+1,V_y_2>=V_y_1] 

* Chain [16]: 0
  with precondition: [B=3,V_x_0=V_6+1,V_n=C,V_y_2=D,V_x_0=E+1,V_y_2>=V_y_1,V_n>=V_y_2] 


#### Cost of loops [18,19,20,21,22,23,24,25,26,28,29,30,31,32] 

 * loop 18:eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) -> [eval_serpent__critedge1_in(V_n',V_y_0',V_x_0',B')] 
1*s(2)+3
  Such that:s(2) =< V_y_0-V_y_0'
s(2) >= V_y_0-V_y_0'

 * loop 19:eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) -> [eval_serpent__critedge1_in(V_n',V_y_0',V_x_0',B')] 
1*s(4)+3
  Such that:s(4) =< V_y_0-V_y_0'
s(4) >= V_y_0-V_y_0'

 * loop 20:eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) -> [eval_serpent__critedge1_in(V_n',V_y_0',V_x_0',B')] 
1*s(7)+1*s(8)+3
  Such that:s(7) =< V_y_0
s(8) =< V_y_0'
s(8) >= -V_y_0+V_y_0'+1
s(9) >= 1
s(7) >= s(9)
s(8) >= s(9)

 * loop 21:eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) -> [eval_serpent__critedge1_in(V_n',V_y_0',V_x_0',B')] 
1*s(11)+3
  Such that:s(11) =< -V_y_0+V_y_0'
s(11) >= -V_y_0+V_y_0'

 * loop 22:eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) -> [eval_serpent__critedge1_in(V_n',V_y_0',V_x_0',B')] 
1*s(14)+1*s(15)+3
  Such that:s(14) =< V_y_0+1
s(15) =< V_y_0'+1
s(14) >= V_y_0+1
s(15) >= V_y_0'+1

 * loop 23:eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) -> [eval_serpent__critedge1_in(V_n',V_y_0',V_x_0',B')] 
1*s(17)+3
  Such that:s(17) =< -V_y_0+V_y_0'
s(17) >= -V_y_0+V_y_0'

 * loop 24:eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) -> [eval_serpent__critedge1_in(V_n',V_y_0',V_x_0',B')] 
3
 * loop 25:eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) -> [eval_serpent__critedge1_in(V_n',V_y_0',V_x_0',B')] 
3
 * loop 26:eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) -> [eval_serpent__critedge1_in(V_n',V_y_0',V_x_0',B')] 
3
 * loop 28:eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) -> [eval_serpent__critedge1_in(V_n',V_y_0',V_x_0',B')] 
1*s(19)+3
  Such that:s(19) =< V_n-V_y_0+1
s(19) >= V_n-V_y_0+1

 * loop 29:eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) -> [eval_serpent__critedge1_in(V_n',V_y_0',V_x_0',B')] 
1*s(22)+1*s(23)+3
  Such that:s(22) =< V_y_0
s(23) =< V_y_0'
s(22) >= -V_n+V_y_0
s(23) >= V_n-V_y_0+2

 * loop 30:eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) -> [eval_serpent__critedge1_in(V_n',V_y_0',V_x_0',B')] 
1*s(26)+1*s(27)+3
  Such that:s(26) =< V_y_0+1
s(27) =< V_y_0'+1
s(27) >= V_n+2
s(26) >= V_y_0+1

 * loop 31:eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) -> [eval_serpent__critedge1_in(V_n',V_y_0',V_x_0',B')] 
1*s(29)+3
  Such that:s(29) =< V_n-V_y_0+1
s(29) >= V_n-V_y_0+1

 * loop 32:eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) -> [eval_serpent__critedge1_in(V_n',V_y_0',V_x_0',B')] 
1*s(31)+3
  Such that:s(31) =< V_y_0+1
s(31) >= V_y_0+1

#### Cost of phase [18,19,20,21,22,23,24,25,26,28,29,30,31,32]:eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B) -> [eval_serpent__critedge1_in(V_n',V_y_0',V_x_0',B')] 
3*it(18)+3*it(19)+3*it(20)+3*it(21)+3*it(22)+3*it(23)+3*it(24)+3*it(25)+3*it(26)+3*it(28)+3*it(29)+3*it(30)+3*it(31)+3*it(32)+1*s(32)+1*s(33)+1*s(34)+1*s(35)+1*s(37)+3*s(38)+1*s(39)+1*s(40)+1*s(41)+1*s(42)+1*s(43)+1*s(45)+1*s(46)+0
  Such that:aux(85) =< V_n
aux(431) =< V_x_0+1
aux(432) =< V_x_0-V_x_0'
it(18) =< aux(431)
it(18) =< aux(431)
it(18) =< aux(431)
it(18) =< aux(431)
it(18) =< aux(431)
it(18) =< aux(431)
it(18) =< aux(431)
it(18) =< aux(431)
it(18) =< aux(431)
it(18) =< aux(431)
it(18) =< aux(431)
it(18) =< aux(431)
it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(25)+it(26)+it(28)+it(29)+it(30)+it(31)+it(32) =< aux(431)
it(18)+it(19)+it(21)+it(22)+it(23)+it(24)+it(25)+it(26)+it(28)+it(29)+it(30)+it(31)+it(32) =< aux(432)
it(18)+it(19)+it(20)+it(22)+it(23)+it(24)+it(25)+it(26)+it(28)+it(29)+it(30)+it(31)+it(32) =< aux(432)
it(18)+it(19)+it(20)+it(21)+it(23)+it(24)+it(25)+it(26)+it(28)+it(29)+it(30)+it(31)+it(32) =< aux(432)
it(18)+it(19)+it(20)+it(21)+it(22)+it(24)+it(25)+it(26)+it(28)+it(29)+it(30)+it(31)+it(32) =< aux(432)
it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(25)+it(26)+it(28)+it(29)+it(30)+it(31)+it(32) =< aux(432)
it(18)+it(20)+it(21)+it(22)+it(23)+it(24)+it(25)+it(26)+it(28)+it(29)+it(30)+it(31)+it(32) =< aux(432)
it(18)+it(20)+it(21)+it(22)+it(23)+it(24)+it(25)+it(26)+it(28)+it(29)+it(30)+it(31)+it(32) =< aux(432)
it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(25)+it(26)+it(28)+it(30)+it(31)+it(32) =< aux(432)
it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(25)+it(26)+it(28)+it(29)+it(31)+it(32) =< aux(432)
it(18)+it(20)+it(21)+it(22)+it(23)+it(24)+it(25)+it(26)+it(28)+it(29)+it(30)+it(31)+it(32) =< aux(432)
it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(25)+it(26)+it(28)+it(30)+it(31)+it(32) =< aux(432)
it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(25)+it(26)+it(28)+it(29)+it(31)+it(32) =< aux(432)
it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(25)+it(26)+it(28)+it(29)+it(30)+it(31) =< aux(432)
it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(25)+it(26)+it(28)+it(29)+it(30)+it(31)+it(32) =< aux(432)
aux(270) =< aux(85)+2
aux(149) =< aux(85)+1
s(35) =< it(20)*aux(85)
s(45) =< it(30)*aux(270)
s(43) =< it(29)*aux(149)
s(39) =< it(22)*aux(149)
aux(251) >= -V_n-1
aux(244) >= -V_n+V_y_0
aux(267) >= V_n+2
aux(214) >= V_n-V_y_0+1
aux(434) >= 1
aux(436) >= V_x_0-V_x_0'
aux(433) >= aux(433)
s(35) >= aux(433)
s(35)+s(43) >= aux(433)
aux(434) >= aux(434)
aux(73)+it(18)+it(19)+it(21)+it(22)+it(23)+it(24)+it(25)+it(26)+it(28)+it(29)+it(30)+it(31)+it(32) >= aux(436)
it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(25)+it(26)+it(28)+it(29)+it(30)+it(31)+it(32) >= aux(436)
it(18)+it(19)+it(20)+it(21)+it(23)+it(24)+it(25)+it(26)+it(28)+it(29)+it(30)+it(31)+it(32)+s(39) >= aux(436)
aux(247) >= aux(251)+2
aux(245) >= aux(251)+1
aux(213) >= min([aux(214),aux(434),aux(434),aux(434),aux(434),aux(433),aux(433),aux(433),aux(433)])
s(45) >= it(30)*aux(267)
s(40) >= it(23)*aux(434)
s(39) >= it(22)*aux(434)
s(37) >= it(21)*aux(434)
aux(73) >= aux(73)
s(33) >= it(19)*aux(434)
s(32) >= it(18)*aux(434)
aux(285) >= aux(213)
aux(252) >= aux(213)+1
aux(243) >= min([aux(244),aux(245),aux(434),aux(247),aux(245),aux(434),aux(434),aux(251)])
s(41) >= it(28)*aux(213)
s(46) >= it(31)*aux(285)
s(43) >= it(29)*aux(252)
s(42) >= it(29)*aux(243)
s(34) >= aux(73)
s(35) >= aux(73)

#### Cost of chains of eval_serpent__critedge1_in(V_n,V_y_0,V_x_0,B):
* Chain [[18,19,20,21,22,23,24,25,26,28,29,30,31,32],34]: 3*it(18)+3*it(19)+3*it(20)+3*it(21)+3*it(22)+3*it(23)+3*it(24)+3*it(25)+3*it(26)+3*it(28)+3*it(29)+3*it(30)+3*it(31)+3*it(32)+1*s(32)+1*s(33)+1*s(34)+1*s(35)+1*s(37)+3*s(38)+1*s(39)+1*s(40)+1*s(41)+1*s(42)+1*s(43)+1*s(45)+1*s(46)+0
  Such that:aux(85) =< V_n
aux(437) =< V_x_0+1
it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(25)+it(26)+it(28)+it(29)+it(30)+it(31)+it(32) =< aux(437)
aux(270) =< aux(85)+2
aux(149) =< aux(85)+1
s(35) =< it(20)*aux(85)
s(45) =< it(30)*aux(270)
s(43) =< it(29)*aux(149)
s(39) =< it(22)*aux(149)
aux(434) >= 1
aux(251) >= -V_n-1
aux(244) >= -V_n+V_y_0
aux(267) >= V_n+2
aux(436) >= V_x_0+1
aux(434) >= aux(434)
aux(73)+it(18)+it(19)+it(21)+it(22)+it(23)+it(24)+it(25)+it(26)+it(28)+it(29)+it(30)+it(31)+it(32) >= aux(436)
it(18)+it(19)+it(20)+it(21)+it(22)+it(23)+it(24)+it(25)+it(26)+it(28)+it(29)+it(30)+it(31)+it(32) >= aux(436)
it(18)+it(19)+it(20)+it(21)+it(23)+it(24)+it(25)+it(26)+it(28)+it(29)+it(30)+it(31)+it(32)+s(39) >= aux(436)
aux(247) >= aux(251)+2
aux(245) >= aux(251)+1
s(45) >= it(30)*aux(267)
s(40) >= it(23)*aux(434)
s(39) >= it(22)*aux(434)
s(37) >= it(21)*aux(434)
aux(73) >= aux(73)
s(33) >= it(19)*aux(434)
s(32) >= it(18)*aux(434)
aux(243) >= min([aux(244),aux(245),aux(434),aux(247),aux(245),aux(434),aux(434),aux(251)])
s(42) >= it(29)*aux(243)
s(34) >= aux(73)
s(35) >= aux(73)

  with precondition: [B=4,V_n>=1,V_x_0>=0,V_y_0+2*V_n>=2*V_x_0+1,2*V_n>=V_x_0+V_y_0] 


#### Cost of chains of eval_serpent_1(V_n,B):
* Chain [36]: 0
  with precondition: [0>=V_n] 

* Chain [35]: 3*s(55)+3*s(56)+3*s(57)+3*s(58)+3*s(59)+3*s(60)+3*s(61)+3*s(62)+3*s(63)+3*s(64)+3*s(65)+3*s(66)+3*s(67)+3*s(68)+1*s(70)+1*s(75)+1*s(76)+1*s(77)+1*s(78)+1*s(79)+1*s(80)+1*s(82)+1*s(83)+1*s(84)+5*s(85)+1
  Such that:s(48) =< V_n
s(49) =< V_n+1
s(55)+s(56)+s(57)+s(58)+s(59)+s(60)+s(61)+s(62)+s(63)+s(64)+s(65)+s(66)+s(67)+s(68) =< s(49)
s(71) =< s(48)+2
s(72) =< s(48)+1
s(78) =< s(57)*s(48)
s(75) =< s(66)*s(71)
s(82) =< s(65)*s(72)
s(70) =< s(59)*s(72)
s(50) >= 1
s(51) >= -V_n-1
s(54) >= V_n+1
s(53) >= V_n+2
s(50) >= s(50)
s(55)+s(56)+s(58)+s(59)+s(60)+s(61)+s(62)+s(63)+s(64)+s(65)+s(66)+s(67)+s(68)+s(69) >= s(54)
s(55)+s(56)+s(57)+s(58)+s(59)+s(60)+s(61)+s(62)+s(63)+s(64)+s(65)+s(66)+s(67)+s(68) >= s(54)
s(55)+s(56)+s(57)+s(58)+s(60)+s(61)+s(62)+s(63)+s(64)+s(65)+s(66)+s(67)+s(68)+s(70) >= s(54)
s(73) >= s(51)+2
s(74) >= s(51)+1
s(75) >= s(66)*s(53)
s(76) >= s(60)*s(50)
s(70) >= s(59)*s(50)
s(77) >= s(58)*s(50)
s(69) >= s(69)
s(79) >= s(56)*s(50)
s(80) >= s(55)*s(50)
s(81) >= min([s(52),s(74),s(50),s(73),s(74),s(50),s(50),s(51)])
s(83) >= s(65)*s(81)
s(84) >= s(69)
s(78) >= s(69)

  with precondition: [V_n>=1] 


#### Cost of chains of eval_serpent_start(V_n,B):
* Chain [38]: 0
  with precondition: [0>=V_n] 

* Chain [37]: 3*s(94)+3*s(95)+3*s(96)+3*s(97)+3*s(98)+3*s(99)+3*s(100)+3*s(101)+3*s(102)+3*s(103)+3*s(104)+3*s(105)+3*s(106)+3*s(107)+1*s(109)+1*s(114)+1*s(115)+1*s(116)+1*s(117)+1*s(118)+1*s(119)+1*s(122)+1*s(123)+1*s(124)+5*s(125)+1
  Such that:s(88) =< V_n
s(89) =< V_n+1
s(94)+s(95)+s(96)+s(97)+s(98)+s(99)+s(100)+s(101)+s(102)+s(103)+s(104)+s(105)+s(106)+s(107) =< s(89)
s(110) =< s(88)+2
s(111) =< s(88)+1
s(117) =< s(96)*s(88)
s(114) =< s(105)*s(110)
s(122) =< s(104)*s(111)
s(109) =< s(98)*s(111)
s(90) >= 1
s(92) >= V_n+1
s(93) >= V_n+2
s(90) >= s(90)
s(94)+s(95)+s(97)+s(98)+s(99)+s(100)+s(101)+s(102)+s(103)+s(104)+s(105)+s(106)+s(107)+s(108) >= s(92)
s(94)+s(95)+s(96)+s(97)+s(98)+s(99)+s(100)+s(101)+s(102)+s(103)+s(104)+s(105)+s(106)+s(107) >= s(92)
s(94)+s(95)+s(96)+s(97)+s(99)+s(100)+s(101)+s(102)+s(103)+s(104)+s(105)+s(106)+s(107)+s(109) >= s(92)
s(114) >= s(105)*s(93)
s(115) >= s(99)*s(90)
s(109) >= s(98)*s(90)
s(116) >= s(97)*s(90)
s(108) >= s(108)
s(118) >= s(95)*s(90)
s(119) >= s(94)*s(90)
s(124) >= s(108)
s(117) >= s(108)

  with precondition: [V_n>=1] 


Closed-form bounds of eval_serpent_start(V_n,B): 
-------------------------------------
* Chain [38] with precondition: [0>=V_n] 
    - Lower bound: 0 
    - Complexity: constant
 * Chain [37] with precondition: [V_n>=1] 
    - Lower bound: 2*V_n+3 
    - Complexity: n
 
### Partitioned lower bound of eval_serpent_start(V_n,B): 
* 0 
 if [0>=V_n]
* 2*V_n+3 
 if [V_n>=1]
Possible lower bounds : [0,2*V_n+3]
Maximum lower bound complexity: n

Time statistics: 
-------------------------------------
* Partial evaluation computed in 125 ms.
* Invariants computed in 376 ms.
   - Backward Invariants 154 ms.
   - Transitive Invariants 77 ms.
* Refinement performed in 578 ms.
* Termination proved in 320 ms.
* Upper bounds computed in 6651 ms.
   - Equation cost structures 352 ms.
   - Phase cost structures 6433 ms.
   - Chain cost structures 128 ms.
   - Solving cost expressions 23 ms.
* Total analysis performed in 8205 ms.


Warning: Ignored call to eval_realshellsort_stop/1 in equation eval_realshellsort_bb7_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_realshellsort_bb4_in/13,eval_realshellsort_bb5_in/13,eval_realshellsort_bb6_in/13]
1. recursive : [eval_realshellsort_27/10,eval_realshellsort_28/10,eval_realshellsort__critedge_in/9,eval_realshellsort_bb2_in/7,eval_realshellsort_bb3_in/7,loop_cont_eval_realshellsort_bb4_in/10]
2. recursive : [eval_realshellsort_bb1_in/3,loop_cont_eval_realshellsort_bb2_in/4]
3. non_recursive : [eval_realshellsort_bb7_in/1]
4. non_recursive : [loop_cont_eval_realshellsort_bb1_in/2]
5. non_recursive : [eval_realshellsort_7/2]
6. non_recursive : [eval_realshellsort_6/2]
7. non_recursive : [eval_realshellsort_5/2]
8. non_recursive : [eval_realshellsort_4/2]
9. non_recursive : [eval_realshellsort_3/2]
10. non_recursive : [eval_realshellsort_2/2]
11. non_recursive : [eval_realshellsort_1/2]
12. non_recursive : [eval_realshellsort_0/2]
13. non_recursive : [eval_realshellsort_bb0_in/2]
14. non_recursive : [eval_realshellsort_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_realshellsort_bb4_in/13
1. SCC is partially evaluated into eval_realshellsort_bb2_in/7
2. SCC is partially evaluated into eval_realshellsort_bb1_in/3
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is partially evaluated into eval_realshellsort_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_realshellsort_bb4_in/13 
* CE 11 is refined into CE [12] 
* CE 9 is refined into CE [13] 
* CE 10 is refined into CE [14] 


#### Refined cost equations eval_realshellsort_bb4_in/13 
* CE 12: eval_realshellsort_bb4_in(A,B,C,D,E,F,G,A,B,C,D,E,F) = 0
     [C>=F+1,A>=D+1,G=2] 
* CE 13: eval_realshellsort_bb4_in(A,B,C,D,E,F,G,A,B,C,D,E,F) = 0
     [A>=D+1,F>=C,G=2] 
* CE 14: eval_realshellsort_bb4_in(V_array_size,V_array_size_sink,V_0,V_i_0,V_5,V_j_0,B,C,D,E,F,G,H) = 1+ eval_realshellsort_bb4_in(V_array_size,V_array_size_sink,V_0,V_i_0,V_5,I,J,C,D,E,F,G,H)
     [V_array_size>=V_i_0+1,V_j_0>=V_0,V_0+I=V_j_0,J=2,B=2] 

### Cost equations --> "Loop" of eval_realshellsort_bb4_in/13 
* CEs [14] --> Loop 11 
* CEs [12] --> Loop 12 
* CEs [13] --> Loop 13 

#### Loops of eval_realshellsort_bb4_in/13 
* Loop 11: eval_realshellsort_bb4_in(V_array_size,V_array_size_sink,V_0,V_i_0,V_5,V_j_0,B,C,D,E,F,G,H)->  eval_realshellsort_bb4_in(V_array_size,V_array_size_sink,V_0,V_i_0,V_5,V_j_0',B',C,D,E,F,G,H)
                  [V_array_size>=V_i_0+1,V_j_0>=V_0,V_0+V_j_0'=V_j_0,B'=2,B=2] 
* Loop 12: eval_realshellsort_bb4_in(A,B,C,D,E,F,G,A,B,C,D,E,F) [C>=F+1,A>=D+1,G=2] 
* Loop 13: eval_realshellsort_bb4_in(A,B,C,D,E,F,G,A,B,C,D,E,F) [A>=D+1,F>=C,G=2] 

### Ranking functions of CR eval_realshellsort_bb4_in(V_array_size,V_array_size_sink,V_0,V_i_0,V_5,V_j_0,B,C,D,E,F,G,H) 

#### Partial ranking functions of CR eval_realshellsort_bb4_in(V_array_size,V_array_size_sink,V_0,V_i_0,V_5,V_j_0,B,C,D,E,F,G,H) 


### Resulting Chains:eval_realshellsort_bb4_in(V_array_size,V_array_size_sink,V_0,V_i_0,V_5,V_j_0,B,C,D,E,F,G,H) 
* [[11]]...
* [[11],13]
* [[11],12]
* [13]
* [12]


### Specialization of cost equations eval_realshellsort_bb2_in/7 
* CE 8 is refined into CE [15] 
* CE 7 is refined into CE [16,17,18,19,20] 


#### Refined cost equations eval_realshellsort_bb2_in/7 
* CE 15: eval_realshellsort_bb2_in(A,B,C,D,E,A,C) = 0
     [D>=A,E=3] 
* CE 16: eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,V_i_0,B,C,D) = 2+ eval_realshellsort_bb4_in(V_array_size,V_array_size_sink,V_0,V_i_0,E,V_i_0,F,G,H,I,J,K,L):[[11]]
     [V_array_size>=V_i_0+1,V_i_0>=V_0,M=J+1,N=3,F=2,B=3] 
* CE 17: eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,V_i_0,B,C,D) = 2+ eval_realshellsort_bb4_in(V_array_size,V_array_size_sink,V_0,V_i_0,E,V_i_0,F,V_array_size,V_array_size_sink,V_0,V_i_0,E,G):[[11],13]+ eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,H,I,C,D)
     [V_array_size>=V_i_0+1,G>=V_0,V_i_0>=V_0,V_i_0+1=H,I=3,F=2,B=3] 
* CE 18: eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,V_i_0,B,C,D) = 2+ eval_realshellsort_bb4_in(V_array_size,V_array_size_sink,V_0,V_i_0,E,V_i_0,F,V_array_size,V_array_size_sink,V_0,V_i_0,E,G):[[11],12]+ eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,H,I,C,D)
     [V_i_0>=V_0+G,V_0>=G+1,V_array_size>=V_i_0+1,G>=0,V_i_0+1=H,I=3,F=2,B=3] 
* CE 19: eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,V_i_0,B,C,D) = 2+ eval_realshellsort_bb4_in(V_array_size,V_array_size_sink,V_0,V_i_0,E,V_i_0,F,V_array_size,V_array_size_sink,V_0,V_i_0,E,V_i_0):[13]+ eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,G,H,C,D)
     [V_array_size>=V_i_0+1,V_i_0>=V_0,V_i_0+1=G,H=3,F=2,B=3] 
* CE 20: eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,V_i_0,B,C,D) = 2+ eval_realshellsort_bb4_in(V_array_size,V_array_size_sink,V_0,V_i_0,E,V_i_0,F,V_array_size,V_array_size_sink,V_0,V_i_0,E,V_i_0):[12]+ eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,G,H,C,D)
     [V_0>=V_i_0+1,V_array_size>=V_i_0+1,V_i_0+1=G,H=3,F=2,B=3] 

### Cost equations --> "Loop" of eval_realshellsort_bb2_in/7 
* CEs [20] --> Loop 14 
* CEs [19] --> Loop 15 
* CEs [17] --> Loop 16 
* CEs [18] --> Loop 17 
* CEs [16] --> Loop 18 
* CEs [15] --> Loop 19 

#### Loops of eval_realshellsort_bb2_in/7 
* Loop 14: eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,V_i_0,B,C,D)->  eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,V_i_0',B',C,D)
                  [V_0>=V_i_0+1,V_array_size>=V_i_0+1,V_i_0+1=V_i_0',B'=3,B=3] 
* Loop 15: eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,V_i_0,B,C,D)->  eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,V_i_0',B',C,D)
                  [V_array_size>=V_i_0+1,V_i_0>=V_0,V_i_0+1=V_i_0',B'=3,B=3] 
* Loop 16: eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,V_i_0,B,C,D)->  eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,V_i_0',B',C,D)
                  [V_array_size>=V_i_0',V_i_0'>=V_0+1,V_i_0'=V_i_0+1,B'=3,B=3] 
* Loop 17: eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,V_i_0,B,C,D)->  eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,V_i_0',B',C,D)
                  [V_array_size>=V_i_0',V_i_0'>=V_0+1,V_0>=1,V_i_0'=V_i_0+1,B'=3,B=3] 
* Loop 18: eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,V_i_0,B,C,D) [V_array_size>=V_i_0+1,V_i_0>=V_0,B=3] 
* Loop 19: eval_realshellsort_bb2_in(A,B,C,D,E,A,C) [D>=A,E=3] 

### Ranking functions of CR eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,V_i_0,B,C,D) 
* RF of phase [14]: [V_0-V_i_0,V_array_size-V_i_0,V_array_size_sink/2-V_i_0-1/2]
* RF of phase [15,16,17]: [V_array_size-V_i_0]

#### Partial ranking functions of CR eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,V_i_0,B,C,D) 
* Partial RF of phase [14]:
  - RF of loop [14:1]:
    V_0-V_i_0
    V_array_size-V_i_0
    V_array_size_sink/2-V_i_0-1/2
* Partial RF of phase [15,16,17]:
  - RF of loop [15:1,16:1,17:1]:
    V_array_size-V_i_0


### Resulting Chains:eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,V_i_0,B,C,D) 
* [[14],[15,16,17],19]
* [[14],[15,16,17],18]...
* [[14],19]
* [[14],18]...
* [19]


### Specialization of cost equations eval_realshellsort_bb1_in/3 
* CE 6 is refined into CE [21] 
* CE 5 is refined into CE [22] 
* CE 4 is refined into CE [23] 
* CE 3 is refined into CE [24,25,26,27,28] 


#### Refined cost equations eval_realshellsort_bb1_in/3 
* CE 21: eval_realshellsort_bb1_in(V_array_size,V_array_size_sink,B) = 0
     [0>=V_array_size_sink+1,B=4] 
* CE 22: eval_realshellsort_bb1_in(V_array_size,V_array_size_sink,B) = 0
     [B=4,V_array_size_sink=1] 
* CE 23: eval_realshellsort_bb1_in(V_array_size,V_array_size_sink,B) = 0
     [B=4,V_array_size_sink=0] 
* CE 24: eval_realshellsort_bb1_in(V_array_size,V_array_size_sink,B) = 2+ eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,C,D,E,V_array_size,C):[[14],[15,16,17],19]+ eval_realshellsort_bb1_in(V_array_size,C,F)
     [V_array_size>=C+1,2*C+1>=V_array_size_sink,V_array_size_sink>=2*C,C>=1,F=4,E=3,D=0,B=4] 
* CE 25: eval_realshellsort_bb1_in(V_array_size,V_array_size_sink,B) = 2+ eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,C,D,E,F,G):[[14],[15,16,17],18]
     [V_array_size>=C+2,2*C+1>=V_array_size_sink,V_array_size_sink>=2*C,C>=1,H=4,E=3,D=0,B=4] 
* CE 26: eval_realshellsort_bb1_in(V_array_size,V_array_size_sink,B) = 2+ eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,C,D,E,V_array_size,C):[[14],19]+ eval_realshellsort_bb1_in(V_array_size,C,F)
     [C>=V_array_size,2*C+1>=V_array_size_sink,V_array_size_sink>=2*C,V_array_size>=1,F=4,E=3,D=0,B=4] 
* CE 27: eval_realshellsort_bb1_in(V_array_size,V_array_size_sink,B) = 2+ eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,C,D,E,F,G):[[14],18]
     [V_array_size>=C+1,2*C+1>=V_array_size_sink,V_array_size_sink>=2*C,C>=1,H=4,E=3,D=0,B=4] 
* CE 28: eval_realshellsort_bb1_in(V_array_size,V_array_size_sink,B) = 2+ eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,C,D,E,V_array_size,C):[19]+ eval_realshellsort_bb1_in(V_array_size,C,F)
     [2*C+1>=V_array_size_sink,V_array_size_sink>=2*C,C>=1,0>=V_array_size,F=4,E=3,D=0,B=4] 

### Cost equations --> "Loop" of eval_realshellsort_bb1_in/3 
* CEs [24] --> Loop 20 
* CEs [26] --> Loop 21 
* CEs [28] --> Loop 22 
* CEs [25] --> Loop 23 
* CEs [27] --> Loop 24 
* CEs [21] --> Loop 25 
* CEs [22] --> Loop 26 
* CEs [23] --> Loop 27 

#### Loops of eval_realshellsort_bb1_in/3 
* Loop 20: eval_realshellsort_bb1_in(V_array_size,V_array_size_sink,B)->  eval_realshellsort_bb1_in(V_array_size,V_array_size_sink',B')
                  [V_array_size>=V_array_size_sink'+1,2*V_array_size_sink'+1>=V_array_size_sink,V_array_size_sink>=2*V_array_size_sink',V_array_size_sink'>=1,B'=4,B=4] 
* Loop 21: eval_realshellsort_bb1_in(V_array_size,V_array_size_sink,B)->  eval_realshellsort_bb1_in(V_array_size,V_array_size_sink',B')
                  [2*V_array_size_sink'+1>=V_array_size_sink,V_array_size_sink'>=V_array_size,V_array_size_sink>=2*V_array_size_sink',V_array_size>=1,B'=4,B=4] 
* Loop 22: eval_realshellsort_bb1_in(V_array_size,V_array_size_sink,B)->  eval_realshellsort_bb1_in(V_array_size,V_array_size_sink',B')
                  [2*V_array_size_sink'+1>=V_array_size_sink,V_array_size_sink>=2*V_array_size_sink',V_array_size_sink'>=1,0>=V_array_size,B'=4,B=4] 
* Loop 23: eval_realshellsort_bb1_in(V_array_size,V_array_size_sink,B) [2*V_array_size>=V_array_size_sink+3,V_array_size_sink>=2,V_array_size>=3,B=4] 
* Loop 24: eval_realshellsort_bb1_in(V_array_size,V_array_size_sink,B) [2*V_array_size>=V_array_size_sink+1,V_array_size_sink>=2,V_array_size>=2,B=4] 
* Loop 25: eval_realshellsort_bb1_in(V_array_size,V_array_size_sink,B) [0>=V_array_size_sink+1,B=4] 
* Loop 26: eval_realshellsort_bb1_in(V_array_size,V_array_size_sink,B) [B=4,V_array_size_sink=1] 
* Loop 27: eval_realshellsort_bb1_in(V_array_size,V_array_size_sink,B) [B=4,V_array_size_sink=0] 

### Ranking functions of CR eval_realshellsort_bb1_in(V_array_size,V_array_size_sink,B) 
* RF of phase [20]: [V_array_size_sink-1]

#### Partial ranking functions of CR eval_realshellsort_bb1_in(V_array_size,V_array_size_sink,B) 
* Partial RF of phase [20]:
  - RF of loop [20:1]:
    V_array_size_sink-1


### Resulting Chains:eval_realshellsort_bb1_in(V_array_size,V_array_size_sink,B) 
* [[20],26]
* [[20],24]...
* [[20],23]...
* [27]
* [26]
* [25]
* [24]...
* [23]...


### Specialization of cost equations eval_realshellsort_start/2 
* CE 2 is refined into CE [29,30,31,32,33,34,35,36] 


#### Refined cost equations eval_realshellsort_start/2 
* CE 29: eval_realshellsort_start(V_array_size,B) = 1+ eval_realshellsort_bb1_in(V_array_size,V_array_size,C):[[20],26]
     [V_array_size>=2,C=4] 
* CE 30: eval_realshellsort_start(V_array_size,B) = 1+ eval_realshellsort_bb1_in(V_array_size,V_array_size,C):[[20],24]
     [V_array_size>=4,C=4] 
* CE 31: eval_realshellsort_start(V_array_size,B) = 1+ eval_realshellsort_bb1_in(V_array_size,V_array_size,C):[[20],23]
     [V_array_size>=4,C=4] 
* CE 32: eval_realshellsort_start(V_array_size,B) = 1+ eval_realshellsort_bb1_in(C,D,E):[27]
     [E=4,D=0,C=0,V_array_size=0] 
* CE 33: eval_realshellsort_start(V_array_size,B) = 1+ eval_realshellsort_bb1_in(C,D,E):[26]
     [E=4,D=1,C=1,V_array_size=1] 
* CE 34: eval_realshellsort_start(V_array_size,B) = 1+ eval_realshellsort_bb1_in(V_array_size,V_array_size,C):[25]
     [0>=V_array_size+1,C=4] 
* CE 35: eval_realshellsort_start(V_array_size,B) = 1+ eval_realshellsort_bb1_in(V_array_size,V_array_size,C):[24]
     [V_array_size>=2,C=4] 
* CE 36: eval_realshellsort_start(V_array_size,B) = 1+ eval_realshellsort_bb1_in(V_array_size,V_array_size,C):[23]
     [V_array_size>=3,C=4] 

### Cost equations --> "Loop" of eval_realshellsort_start/2 
* CEs [31] --> Loop 28 
* CEs [30] --> Loop 29 
* CEs [36] --> Loop 30 
* CEs [35] --> Loop 31 
* CEs [29] --> Loop 32 
* CEs [34] --> Loop 33 
* CEs [33] --> Loop 34 
* CEs [32] --> Loop 35 

#### Loops of eval_realshellsort_start/2 
* Loop 28: eval_realshellsort_start(V_array_size,B) [V_array_size>=4] 
* Loop 29: eval_realshellsort_start(V_array_size,B) [V_array_size>=4] 
* Loop 30: eval_realshellsort_start(V_array_size,B) [V_array_size>=3] 
* Loop 31: eval_realshellsort_start(V_array_size,B) [V_array_size>=2] 
* Loop 32: eval_realshellsort_start(V_array_size,B) [V_array_size>=2] 
* Loop 33: eval_realshellsort_start(V_array_size,B) [0>=V_array_size+1] 
* Loop 34: eval_realshellsort_start(V_array_size,B) [V_array_size=1] 
* Loop 35: eval_realshellsort_start(V_array_size,B) [V_array_size=0] 

### Ranking functions of CR eval_realshellsort_start(V_array_size,B) 

#### Partial ranking functions of CR eval_realshellsort_start(V_array_size,B) 


### Resulting Chains:eval_realshellsort_start(V_array_size,B) 
* [35]
* [34]
* [33]
* [32]
* [31]...
* [30]...
* [29]...
* [28]...


Computing Bounds
=====================================

#### Cost of loops [11] 

 * loop 11:eval_realshellsort_bb4_in(V_array_size,V_array_size_sink,V_0,V_i_0,V_5,V_j_0,B,C,D,E,F,G,H) -> [eval_realshellsort_bb4_in(V_array_size',V_array_size_sink',V_0',V_i_0',V_5',V_j_0',B',C',D',E',F',G',H')] 
1
#### Cost of phase [11]:eval_realshellsort_bb4_in(V_array_size,V_array_size_sink,V_0,V_i_0,V_5,V_j_0,B,C,D,E,F,G,H) -> [eval_realshellsort_bb4_in(V_array_size',V_array_size_sink',V_0',V_i_0',V_5',V_j_0',B',C',D',E',F',G',H')] 
1*it(11)+0
#### Cost of phase [11]:eval_realshellsort_bb4_in(V_array_size,V_array_size_sink,V_0,V_i_0,V_5,V_j_0,B,C,D,E,F,G,H) -> [eval_realshellsort_bb4_in(V_array_size',V_array_size_sink',V_0',V_i_0',V_5',V_j_0',B',C',D',E',F',G',H')] 
1*it(11)+0
#### Cost of phase [11]:eval_realshellsort_bb4_in(V_array_size,V_array_size_sink,V_0,V_i_0,V_5,V_j_0,B,C,D,E,F,G,H) -> [eval_realshellsort_bb4_in(V_array_size',V_array_size_sink',V_0',V_i_0',V_5',V_j_0',B',C',D',E',F',G',H')] 
1*it(11)+0
#### Cost of chains of eval_realshellsort_bb4_in(V_array_size,V_array_size_sink,V_0,V_i_0,V_5,V_j_0,B,C,D,E,F,G,H):
* Chain [[11]]...: 1*it(11)+0
  with precondition: [V_array_size>=V_i_0+1,V_j_0>=V_0,B=2] 

* Chain [[11],13]: 1*it(11)+0
  with precondition: [B=2,V_array_size=C,V_array_size_sink=D,V_0=E,V_i_0=F,V_5=G,V_j_0>=V_0,H>=V_0,V_array_size>=V_i_0+1] 

* Chain [[11],12]: 1*it(11)+0
  with precondition: [B=2,V_array_size=C,V_array_size_sink=D,V_0=E,V_i_0=F,V_5=G,H>=0,V_array_size>=V_i_0+1,V_0>=H+1,V_j_0>=V_0+H] 

* Chain [13]: 0
  with precondition: [B=2,D=V_array_size_sink,G=V_5,V_array_size=C,V_0=E,V_i_0=F,V_j_0=H,V_j_0>=V_0,V_array_size>=V_i_0+1] 

* Chain [12]: 0
  with precondition: [B=2,D=V_array_size_sink,G=V_5,V_array_size=C,V_0=E,V_i_0=F,V_j_0=H,V_array_size>=V_i_0+1,V_0>=V_j_0+1] 


#### Cost of loops [15,16,17] 

 * loop 15:eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,V_i_0,B,C,D) -> [eval_realshellsort_bb2_in(V_array_size',V_array_size_sink',V_0',V_i_0',B',C',D')] 
2
 * loop 16:eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,V_i_0,B,C,D) -> [eval_realshellsort_bb2_in(V_array_size',V_array_size_sink',V_0',V_i_0',B',C',D')] 
1*s(2)+2
 * loop 17:eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,V_i_0,B,C,D) -> [eval_realshellsort_bb2_in(V_array_size',V_array_size_sink',V_0',V_i_0',B',C',D')] 
1*s(4)+2
#### Cost of phase [15,16,17]:eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,V_i_0,B,C,D) -> [eval_realshellsort_bb2_in(V_array_size',V_array_size_sink',V_0',V_i_0',B',C',D')] 
2*it(15)+2*it(16)+2*it(17)+2*s(5)+0
  Such that:it(15)+it(16)+it(17) =< V_array_size-V_i_0
it(15)+it(16)+it(17) =< V_array_size-V_i_0-V_array_size'+V_i_0'
it(15)+it(16)+it(17) >= V_array_size-V_i_0-V_array_size'+V_i_0'

#### Cost of loops [14] 

 * loop 14:eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,V_i_0,B,C,D) -> [eval_realshellsort_bb2_in(V_array_size',V_array_size_sink',V_0',V_i_0',B',C',D')] 
2
#### Cost of phase [14]:eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,V_i_0,B,C,D) -> [eval_realshellsort_bb2_in(V_array_size',V_array_size_sink',V_0',V_i_0',B',C',D')] 
2*it(14)+0
  Such that:it(14) =< V_array_size-V_i_0
it(14) =< V_array_size-V_i_0-V_array_size'+V_i_0'
it(14) =< V_array_size_sink/2-V_i_0-1/2
it(14) =< V_array_size_sink/2-V_i_0-V_array_size_sink'/2+V_i_0'
it(14) =< V_0-V_i_0
it(14) =< V_0-V_i_0-V_0'+V_i_0'
it(14) >= V_array_size-V_i_0-V_array_size'+V_i_0'
it(14) >= V_array_size_sink/2-V_i_0-V_array_size_sink'/2+V_i_0'
it(14) >= V_0-V_i_0-V_0'+V_i_0'

#### Cost of loops [14] 

 * loop 14:eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,V_i_0,B,C,D) -> [eval_realshellsort_bb2_in(V_array_size',V_array_size_sink',V_0',V_i_0',B',C',D')] 
2
#### Cost of phase [14]:eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,V_i_0,B,C,D) -> [] 
2*it(14)+2*s(7)+2*s(8)+2*s(9)+2*s(10)+0
  Such that:it([[15,16,17],19]) =< 1
aux(2) =< -V_array_size_sink/2+V_i_0+1/2
it(14) =< V_0-V_i_0
aux(6) =< V_array_size-V_i_0
aux(7) =< V_array_size_sink/2-V_i_0-1/2
it(14)+it([[15,16,17],19]) =< aux(6)
s(7)+s(8)+s(9) =< aux(6)
it(14) =< aux(7)
it(14) =< it([[15,16,17],19])* (1/2)+aux(7)
it([[15,16,17],19]) >= 1
aux(5) >= V_array_size-V_0
it(14)+s(7)+s(8)+s(9) >= V_array_size-V_i_0
aux(1) >= V_array_size_sink/2-V_i_0-1/2
it(14) >= V_0-V_i_0
s(7)+s(8)+s(9) >= it([[15,16,17],19])*aux(5)
it(14) >= it([[15,16,17],19])* (1/2)+aux(1)-aux(2)

#### Cost of phase [15,16,17]:eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,V_i_0,B,C,D) -> [eval_realshellsort_bb2_in(V_array_size',V_array_size_sink',V_0',V_i_0',B',C',D')] 
2*it(15)+2*it(16)+2*it(17)+2*s(5)+0
  Such that:it(15)+it(16)+it(17) =< V_array_size-V_i_0
it(15)+it(16)+it(17) =< V_array_size-V_i_0-V_array_size'+V_i_0'
it(15)+it(16)+it(17) >= V_array_size-V_i_0-V_array_size'+V_i_0'

#### Cost of phase [14]:eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,V_i_0,B,C,D) -> [eval_realshellsort_bb2_in(V_array_size',V_array_size_sink',V_0',V_i_0',B',C',D')] 
2*it(14)+0
  Such that:it(14) =< V_array_size-V_i_0
it(14) =< V_array_size-V_i_0-V_array_size'+V_i_0'
it(14) =< V_array_size_sink/2-V_i_0-1/2
it(14) =< V_array_size_sink/2-V_i_0-V_array_size_sink'/2+V_i_0'
it(14) =< V_0-V_i_0
it(14) =< V_0-V_i_0-V_0'+V_i_0'
it(14) >= V_array_size-V_i_0-V_array_size'+V_i_0'
it(14) >= V_array_size_sink/2-V_i_0-V_array_size_sink'/2+V_i_0'
it(14) >= V_0-V_i_0-V_0'+V_i_0'

#### Cost of loops [14] 

 * loop 14:eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,V_i_0,B,C,D) -> [eval_realshellsort_bb2_in(V_array_size',V_array_size_sink',V_0',V_i_0',B',C',D')] 
2
#### Cost of phase [14]:eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,V_i_0,B,C,D) -> [] 
2*it(14)+2*it([[15,16,17],18])+2*s(12)+2*s(13)+2*s(14)+3*s(15)+0
  Such that:it([[15,16,17],18]) =< 1
s(12)+s(13)+s(14) =< V_array_size-V_i_0-1
it(14)+it([[15,16,17],18]) =< V_array_size-V_i_0
aux(9) =< -V_array_size_sink/2+V_i_0+1/2
it(14) =< V_0-V_i_0
aux(13) =< V_array_size_sink/2-V_i_0-1/2
it(14) =< aux(13)
it(14) =< it([[15,16,17],18])* (1/2)+aux(13)
aux(8) >= V_array_size_sink/2-V_i_0-1/2
it(14) >= V_0-V_i_0
aux(14) >= 1
aux(14) >= aux(14)
it([[15,16,17],18]) >= aux(14)
s(12)+s(13)+s(14) >= aux(14)
it(14) >= it([[15,16,17],18])* (1/2)+aux(8)-aux(9)

#### Cost of phase [14]:eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,V_i_0,B,C,D) -> [eval_realshellsort_bb2_in(V_array_size',V_array_size_sink',V_0',V_i_0',B',C',D')] 
2*it(14)+0
  Such that:it(14) =< V_array_size-V_i_0
it(14) =< V_array_size-V_i_0-V_array_size'+V_i_0'
it(14) =< V_array_size_sink/2-V_i_0-1/2
it(14) =< V_array_size_sink/2-V_i_0-V_array_size_sink'/2+V_i_0'
it(14) =< V_0-V_i_0
it(14) =< V_0-V_i_0-V_0'+V_i_0'
it(14) >= V_array_size-V_i_0-V_array_size'+V_i_0'
it(14) >= V_array_size_sink/2-V_i_0-V_array_size_sink'/2+V_i_0'
it(14) >= V_0-V_i_0-V_0'+V_i_0'

#### Cost of phase [14]:eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,V_i_0,B,C,D) -> [eval_realshellsort_bb2_in(V_array_size',V_array_size_sink',V_0',V_i_0',B',C',D')] 
2*it(14)+0
  Such that:it(14) =< V_array_size-V_i_0
it(14) =< V_array_size-V_i_0-V_array_size'+V_i_0'
it(14) =< V_array_size_sink/2-V_i_0-1/2
it(14) =< V_array_size_sink/2-V_i_0-V_array_size_sink'/2+V_i_0'
it(14) =< V_0-V_i_0
it(14) =< V_0-V_i_0-V_0'+V_i_0'
it(14) >= V_array_size-V_i_0-V_array_size'+V_i_0'
it(14) >= V_array_size_sink/2-V_i_0-V_array_size_sink'/2+V_i_0'
it(14) >= V_0-V_i_0-V_0'+V_i_0'

#### Cost of chains of eval_realshellsort_bb2_in(V_array_size,V_array_size_sink,V_0,V_i_0,B,C,D):
* Chain [[14],[15,16,17],19]: 2*it(14)+2*s(7)+2*s(8)+2*s(9)+2*s(10)+0
  Such that:it([[15,16,17],19]) =< 1
aux(2) =< -V_array_size_sink/2+V_i_0+1/2
it(14) =< V_0-V_i_0
aux(6) =< V_array_size-V_i_0
aux(7) =< V_array_size_sink/2-V_i_0-1/2
it(14)+it([[15,16,17],19]) =< aux(6)
s(7)+s(8)+s(9) =< aux(6)
it(14) =< aux(7)
it(14) =< it([[15,16,17],19])* (1/2)+aux(7)
it([[15,16,17],19]) >= 1
aux(5) >= V_array_size-V_0
it(14)+s(7)+s(8)+s(9) >= V_array_size-V_i_0
aux(1) >= V_array_size_sink/2-V_i_0-1/2
it(14) >= V_0-V_i_0
s(7)+s(8)+s(9) >= it([[15,16,17],19])*aux(5)
it(14) >= it([[15,16,17],19])* (1/2)+aux(1)-aux(2)

  with precondition: [B=3,V_array_size=C,V_0=D,V_i_0>=0,V_array_size_sink>=2*V_0,2*V_0+1>=V_array_size_sink,V_array_size>=V_0+1,V_0>=V_i_0+1] 

* Chain [[14],[15,16,17],18]...: 2*it(14)+2*it([[15,16,17],18])+2*s(12)+2*s(13)+2*s(14)+3*s(15)+0
  Such that:it([[15,16,17],18]) =< 1
s(12)+s(13)+s(14) =< V_array_size-V_i_0-1
it(14)+it([[15,16,17],18]) =< V_array_size-V_i_0
aux(9) =< -V_array_size_sink/2+V_i_0+1/2
it(14) =< V_0-V_i_0
aux(13) =< V_array_size_sink/2-V_i_0-1/2
it(14) =< aux(13)
it(14) =< it([[15,16,17],18])* (1/2)+aux(13)
aux(8) >= V_array_size_sink/2-V_i_0-1/2
it(14) >= V_0-V_i_0
aux(14) >= 1
aux(14) >= aux(14)
it([[15,16,17],18]) >= aux(14)
s(12)+s(13)+s(14) >= aux(14)
it(14) >= it([[15,16,17],18])* (1/2)+aux(8)-aux(9)

  with precondition: [B=3,V_i_0>=0,V_array_size_sink>=2*V_0,2*V_0+1>=V_array_size_sink,V_array_size>=V_0+2,V_0>=V_i_0+1] 

* Chain [[14],19]: 2*it(14)+0
  Such that:it(14) =< V_array_size_sink/2-V_i_0-1/2
it(14) >= V_array_size-V_i_0

  with precondition: [B=3,V_array_size=C,V_0=D,V_i_0>=0,V_array_size_sink>=2*V_0,V_0>=V_array_size,2*V_0+1>=V_array_size_sink,V_array_size>=V_i_0+1] 

* Chain [[14],18]...: 2*it(14)+1*s(11)+2
  Such that:it(14) =< V_array_size_sink/2-V_i_0-1/2
it(14) >= V_0-V_i_0

  with precondition: [B=3,V_i_0>=0,V_array_size_sink>=2*V_0,2*V_0+1>=V_array_size_sink,V_array_size>=V_0+1,V_0>=V_i_0+1] 

* Chain [19]: 0
  with precondition: [B=3,V_array_size=C,V_0=D,V_0>=1,V_i_0>=0,V_array_size_sink>=2*V_0,V_i_0>=V_array_size,2*V_0+1>=V_array_size_sink] 


#### Cost of loops [20] 

 * loop 20:eval_realshellsort_bb1_in(V_array_size,V_array_size_sink,B) -> [eval_realshellsort_bb1_in(V_array_size',V_array_size_sink',B')] 
2*s(31)+2*s(34)+2*s(33)+2*s(32)+2*s(37)+2
  Such that:s(27) =< 1
s(28) =< -V_array_size_sink/2+1/2
s(29) =< V_array_size_sink/2-1/2
s(30) =< V_array_size'
s(31) =< V_array_size_sink'
s(27)+s(31) =< s(30)
s(32)+s(33)+s(34) =< s(30)
s(31) =< s(29)
s(31) =< s(27)* (1/2)+s(29)
s(27) >= 1
s(31)+s(32)+s(33)+s(34) >= V_array_size
s(35) >= V_array_size-V_array_size_sink'
s(36) >= V_array_size_sink/2-1/2
s(31) >= V_array_size_sink'
s(32)+s(33)+s(34) >= s(27)*s(35)
s(31) >= s(27)* (1/2)+s(36)-s(28)

#### Cost of phase [20]:eval_realshellsort_bb1_in(V_array_size,V_array_size_sink,B) -> [eval_realshellsort_bb1_in(V_array_size',V_array_size_sink',B')] 
2*it(20)+2*s(38)+2*s(39)+2*s(40)+2*s(41)+2*s(42)+0
  Such that:aux(19) =< V_array_size
s(46) =< V_array_size_sink-3/2
aux(20) =< V_array_size_sink-1
aux(21) =< V_array_size_sink-V_array_size_sink'
aux(18) =< aux(20)
it(20) =< aux(20)
s(38) =< aux(20)
aux(18) =< aux(21)
it(20) =< aux(21)
s(38) =< aux(21)
s(46) =< aux(21)
s(47) =< it(20)*aux(19)
s(44) =< aux(18)
s(38)+s(44) =< s(47)
s(39)+s(40)+s(41) =< s(47)
s(38) =< s(46)
s(38) =< s(44)* (1/2)+s(46)
s(38)+s(39)+s(40)+s(41) >= 3/2*V_array_size_sink-3/2*V_array_size_sink'
aux(22) >= V_array_size_sink/2-V_array_size_sink'/2
s(38) >= aux(22)

#### Cost of phase [20]:eval_realshellsort_bb1_in(V_array_size,V_array_size_sink,B) -> [eval_realshellsort_bb1_in(V_array_size',V_array_size_sink',B')] 
2*it(20)+2*s(38)+2*s(39)+2*s(40)+2*s(41)+2*s(42)+0
  Such that:aux(19) =< V_array_size
s(46) =< V_array_size_sink-3/2
aux(20) =< V_array_size_sink-1
aux(21) =< V_array_size_sink-V_array_size_sink'
aux(18) =< aux(20)
it(20) =< aux(20)
s(38) =< aux(20)
aux(18) =< aux(21)
it(20) =< aux(21)
s(38) =< aux(21)
s(46) =< aux(21)
s(47) =< it(20)*aux(19)
s(44) =< aux(18)
s(38)+s(44) =< s(47)
s(39)+s(40)+s(41) =< s(47)
s(38) =< s(46)
s(38) =< s(44)* (1/2)+s(46)
s(38)+s(39)+s(40)+s(41) >= 3/2*V_array_size_sink-3/2*V_array_size_sink'
aux(22) >= V_array_size_sink/2-V_array_size_sink'/2
s(38) >= aux(22)

#### Cost of phase [20]:eval_realshellsort_bb1_in(V_array_size,V_array_size_sink,B) -> [eval_realshellsort_bb1_in(V_array_size',V_array_size_sink',B')] 
2*it(20)+2*s(38)+2*s(39)+2*s(40)+2*s(41)+2*s(42)+0
  Such that:aux(19) =< V_array_size
s(46) =< V_array_size_sink-3/2
aux(20) =< V_array_size_sink-1
aux(21) =< V_array_size_sink-V_array_size_sink'
aux(18) =< aux(20)
it(20) =< aux(20)
s(38) =< aux(20)
aux(18) =< aux(21)
it(20) =< aux(21)
s(38) =< aux(21)
s(46) =< aux(21)
s(47) =< it(20)*aux(19)
s(44) =< aux(18)
s(38)+s(44) =< s(47)
s(39)+s(40)+s(41) =< s(47)
s(38) =< s(46)
s(38) =< s(44)* (1/2)+s(46)
s(38)+s(39)+s(40)+s(41) >= 3/2*V_array_size_sink-3/2*V_array_size_sink'
aux(22) >= V_array_size_sink/2-V_array_size_sink'/2
s(38) >= aux(22)

#### Cost of loops [20] 

 * loop 20:eval_realshellsort_bb1_in(V_array_size,V_array_size_sink,B) -> [eval_realshellsort_bb1_in(V_array_size',V_array_size_sink',B')] 
2*s(31)+2*s(34)+2*s(33)+2*s(32)+2*s(37)+2
  Such that:s(27) =< 1
s(28) =< -V_array_size_sink/2+1/2
s(29) =< V_array_size_sink/2-1/2
s(30) =< V_array_size'
s(31) =< V_array_size_sink'
s(27)+s(31) =< s(30)
s(32)+s(33)+s(34) =< s(30)
s(31) =< s(29)
s(31) =< s(27)* (1/2)+s(29)
s(27) >= 1
s(31)+s(32)+s(33)+s(34) >= V_array_size
s(35) >= V_array_size-V_array_size_sink'
s(36) >= V_array_size_sink/2-1/2
s(31) >= V_array_size_sink'
s(32)+s(33)+s(34) >= s(27)*s(35)
s(31) >= s(27)* (1/2)+s(36)-s(28)

#### Cost of phase [20]:eval_realshellsort_bb1_in(V_array_size,V_array_size_sink,B) -> [] 
2*it(20)+2*it([23])+2*s(38)+2*s(39)+2*s(40)+2*s(41)+5*s(42)+2*s(60)+2*s(61)+2*s(62)+2*s(63)+2*s(64)+0
  Such that:s(61)+s(62)+s(63) =< V_array_size-1
s(68) =< V_array_size/4-1/2
s(46)+s(67) =< V_array_size_sink-3/2
aux(37) =< 1
aux(39) =< V_array_size
aux(40) =< V_array_size_sink-1
it([23]) =< aux(37)
s(60)+s(64) =< aux(39)
aux(30)+it([23]) =< aux(40)
it(20)+it([23]) =< aux(40)
it([23])+s(38) =< aux(40)
s(60) =< aux(37)
s(47) =< it(20)*aux(39)
s(44) =< aux(30)
s(64) =< s(68)
s(64) =< s(60)* (1/2)+s(68)
s(38)+s(44) =< s(47)
s(39)+s(40)+s(41) =< s(47)
s(38) =< s(46)
s(38) =< s(44)* (1/2)+s(46)
aux(28) >= 1/2
s(38)+s(39)+s(40)+s(41)+s(66) >= V_array_size_sink/2-1/2
aux(41) >= 1
aux(41) >= aux(41)
it([23]) >= aux(41)
aux(35) >= aux(28)
s(66) >= it([23])*aux(35)
s(64) >= aux(41)
s(69) >= aux(41)
s(64) >= s(66)
s(66) >= s(66)
s(69) >= s(69)
s(60) >= s(69)
s(61)+s(62)+s(63) >= s(69)
s(64) >= s(60)* (1/2)+s(66)

#### Cost of chains of eval_realshellsort_bb1_in(V_array_size,V_array_size_sink,B):
* Chain [[20],26]: 2*it(20)+2*s(38)+2*s(39)+2*s(40)+2*s(41)+2*s(42)+0
  Such that:aux(19) =< V_array_size
s(46) =< V_array_size_sink-3/2
aux(23) =< V_array_size_sink-1
it(20) =< aux(23)
s(38) =< aux(23)
s(46) =< aux(23)
s(47) =< it(20)*aux(19)
s(44) =< aux(23)
s(38)+s(44) =< s(47)
s(39)+s(40)+s(41) =< s(47)
s(38) =< s(46)
s(38) =< s(44)* (1/2)+s(46)
aux(22) >= V_array_size_sink/2-1/2
s(41)+s(40)+s(39)+s(38) >= 3/2*V_array_size_sink-3/2
s(38) >= aux(22)

  with precondition: [B=4,V_array_size_sink>=2,V_array_size>=V_array_size_sink] 

* Chain [[20],24]...: 2*it(20)+2*s(38)+2*s(39)+2*s(40)+2*s(41)+3*s(42)+2*s(48)+4
  Such that:aux(19) =< V_array_size
s(46) =< V_array_size_sink-3/2
aux(24) =< V_array_size_sink-1
aux(21)+s(48) =< aux(24)
aux(18) =< aux(24)
it(20) =< aux(24)
s(38) =< aux(24)
aux(18) =< aux(21)
it(20) =< aux(21)
s(38) =< aux(21)
s(46) =< aux(21)
s(47) =< it(20)*aux(19)
s(44) =< aux(18)
s(38)+s(44) =< s(47)
s(39)+s(40)+s(41) =< s(47)
s(38) =< s(46)
s(38) =< s(44)* (1/2)+s(46)
s(48) >= 1/2
aux(22)+s(48) >= V_array_size_sink/2-1/2
aux(22) >= V_array_size_sink/4
s(48)+s(41)+s(40)+s(39)+s(38) >= 3/2*V_array_size_sink-3/2
s(41)+s(40)+s(39)+s(38) >= 3/4*V_array_size_sink
s(38) >= aux(22)

  with precondition: [B=4,V_array_size_sink>=4,V_array_size>=V_array_size_sink] 

* Chain [[20],23]...: 2*it(20)+2*it([23])+2*s(38)+2*s(39)+2*s(40)+2*s(41)+5*s(42)+2*s(60)+2*s(61)+2*s(62)+2*s(63)+2*s(64)+0
  Such that:s(61)+s(62)+s(63) =< V_array_size-1
s(68) =< V_array_size/4-1/2
s(46)+s(67) =< V_array_size_sink-3/2
aux(37) =< 1
aux(39) =< V_array_size
aux(40) =< V_array_size_sink-1
it([23]) =< aux(37)
s(60)+s(64) =< aux(39)
aux(30)+it([23]) =< aux(40)
it(20)+it([23]) =< aux(40)
it([23])+s(38) =< aux(40)
s(60) =< aux(37)
s(47) =< it(20)*aux(39)
s(44) =< aux(30)
s(64) =< s(68)
s(64) =< s(60)* (1/2)+s(68)
s(38)+s(44) =< s(47)
s(39)+s(40)+s(41) =< s(47)
s(38) =< s(46)
s(38) =< s(44)* (1/2)+s(46)
aux(28) >= 1/2
s(38)+s(39)+s(40)+s(41)+s(66) >= V_array_size_sink/2-1/2
aux(41) >= 1
aux(41) >= aux(41)
it([23]) >= aux(41)
aux(35) >= aux(28)
s(66) >= it([23])*aux(35)
s(64) >= aux(41)
s(69) >= aux(41)
s(64) >= s(66)
s(66) >= s(66)
s(69) >= s(69)
s(60) >= s(69)
s(61)+s(62)+s(63) >= s(69)
s(64) >= s(60)* (1/2)+s(66)

  with precondition: [B=4,V_array_size_sink>=4,V_array_size>=V_array_size_sink] 

* Chain [27]: 0
  with precondition: [V_array_size=0,V_array_size_sink=0,B=4] 

* Chain [26]: 0
  with precondition: [V_array_size_sink=1,B=4,V_array_size>=1] 

* Chain [25]: 0
  with precondition: [B=4,V_array_size_sink=V_array_size,0>=V_array_size_sink+1] 

* Chain [24]...: 2*s(48)+1*s(49)+4
  Such that:s(48) =< V_array_size_sink/2-1/2
s(48) >= V_array_size_sink/2-1/2

  with precondition: [B=4,V_array_size_sink>=2,V_array_size>=V_array_size_sink] 

* Chain [23]...: 2*s(50)+2*s(51)+2*s(52)+2*s(53)+2*s(54)+3*s(59)+2
  Such that:s(50) =< 1
s(53)+s(52)+s(51) =< V_array_size-1
s(54)+s(50) =< V_array_size
s(55) =< -V_array_size_sink/2+1/2
s(56) =< V_array_size_sink/2-1/2
s(54) =< s(56)
s(54) =< s(50)* (1/2)+s(56)
aux(25) >= 1
aux(26) >= V_array_size_sink/2-1/2
s(54) >= aux(25)
s(58) >= aux(25)
s(54) >= aux(26)
aux(26) >= aux(26)
s(58) >= s(58)
s(50) >= s(58)
s(51)+s(52)+s(53) >= s(58)
s(54) >= s(50)* (1/2)+aux(26)-s(55)

  with precondition: [B=4,V_array_size>=3,V_array_size_sink>=2,V_array_size>=V_array_size_sink] 


#### Cost of chains of eval_realshellsort_start(V_array_size,B):
* Chain [35]: 1
  with precondition: [V_array_size=0] 

* Chain [34]: 1
  with precondition: [V_array_size=1] 

* Chain [33]: 1
  with precondition: [0>=V_array_size+1] 

* Chain [32]: 2*s(75)+2*s(76)+2*s(77)+2*s(78)+2*s(79)+2*s(82)+1
  Such that:s(73) =< V_array_size-1
s(71) =< V_array_size
s(72) =< V_array_size-3/2
s(79) =< s(73)
s(78) =< s(73)
s(72) =< s(73)
s(80) =< s(79)*s(71)
s(81) =< s(73)
s(78)+s(81) =< s(80)
s(75)+s(76)+s(77) =< s(80)
s(78) =< s(72)
s(78) =< s(81)* (1/2)+s(72)
s(74) >= V_array_size/2-1/2
s(78)+s(77)+s(76)+s(75) >= 3/2*V_array_size-3/2
s(78) >= s(74)

  with precondition: [V_array_size>=2] 

* Chain [31]...: 2*s(83)+1*s(84)+5
  Such that:s(83) =< V_array_size/2-1/2
s(83) >= V_array_size/2-1/2

  with precondition: [V_array_size>=2] 

* Chain [30]...: 2*s(85)+2*s(86)+2*s(87)+2*s(88)+2*s(89)+3*s(95)+3
  Such that:s(85) =< 1
s(88)+s(87)+s(86) =< V_array_size-1
s(89)+s(85) =< V_array_size
s(90) =< -V_array_size/2+1/2
s(91) =< V_array_size/2-1/2
s(89) =< s(91)
s(89) =< s(85)* (1/2)+s(91)
s(92) >= 1
s(93) >= V_array_size/2-1/2
s(89) >= s(92)
s(94) >= s(92)
s(89) >= s(93)
s(93) >= s(93)
s(94) >= s(94)
s(85) >= s(94)
s(86)+s(87)+s(88) >= s(94)
s(89) >= s(85)* (1/2)+s(93)-s(90)

  with precondition: [V_array_size>=3] 

* Chain [29]...: 2*s(99)+2*s(101)+2*s(102)+2*s(103)+2*s(104)+2*s(107)+3*s(110)+5
  Such that:s(98) =< V_array_size-1
s(96) =< V_array_size
s(97) =< V_array_size-3/2
s(99)+s(105) =< s(98)
s(106) =< s(98)
s(107) =< s(98)
s(104) =< s(98)
s(106) =< s(105)
s(107) =< s(105)
s(104) =< s(105)
s(97) =< s(105)
s(108) =< s(107)*s(96)
s(109) =< s(106)
s(104)+s(109) =< s(108)
s(101)+s(102)+s(103) =< s(108)
s(104) =< s(97)
s(104) =< s(109)* (1/2)+s(97)
s(99) >= 1/2
s(100)+s(99) >= V_array_size/2-1/2
s(100) >= V_array_size/4
s(104)+s(103)+s(102)+s(101)+s(99) >= 3/2*V_array_size-3/2
s(104)+s(103)+s(102)+s(101) >= 3/4*V_array_size
s(104) >= s(100)

  with precondition: [V_array_size>=4] 

* Chain [28]...: 2*s(111)+2*s(112)+2*s(113)+2*s(121)+2*s(122)+2*s(123)+2*s(124)+2*s(127)+2*s(128)+2*s(129)+2*s(131)+5*s(136)+1
  Such that:s(117) =< 1
s(118) =< V_array_size
s(114) =< V_array_size/4-1/2
aux(42) =< V_array_size-1
s(111)+s(112)+s(113) =< aux(42)
s(127) =< s(117)
s(128)+s(129) =< s(118)
s(127) =< aux(42)
s(127)+s(131) =< aux(42)
s(121)+s(127) =< aux(42)
s(128) =< s(117)
s(133) =< s(131)*s(118)
s(129) =< s(114)
s(129) =< s(128)* (1/2)+s(114)
s(121) =< s(133)
s(122)+s(123)+s(124) =< s(133)
s(126) >= 1
s(120) >= 1/2
s(125)+s(124)+s(123)+s(122)+s(121) >= V_array_size/2-1/2
s(126) >= s(126)
s(127) >= s(126)
s(132) >= s(120)
s(125) >= s(127)*s(132)
s(129) >= s(126)
s(135) >= s(126)
s(129) >= s(125)
s(125) >= s(125)
s(135) >= s(135)
s(128) >= s(135)
s(111)+s(112)+s(113) >= s(135)
s(129) >= s(128)* (1/2)+s(125)

  with precondition: [V_array_size>=4] 


Closed-form bounds of eval_realshellsort_start(V_array_size,B): 
-------------------------------------
* Chain [35] with precondition: [V_array_size=0] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [34] with precondition: [V_array_size=1] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [33] with precondition: [0>=V_array_size+1] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [32] with precondition: [V_array_size>=2] 
    - Lower bound: V_array_size 
    - Complexity: n
 * Chain [31]... with precondition: [V_array_size>=2] 
    - Lower bound: V_array_size+4 
    - Complexity: n
 * Chain [30]... with precondition: [V_array_size>=3] 
    - Lower bound: V_array_size+6 
    - Complexity: n
 * Chain [29]... with precondition: [V_array_size>=4] 
    - Lower bound: 3/2*V_array_size+6 
    - Complexity: n
 * Chain [28]... with precondition: [V_array_size>=4] 
    - Lower bound: V_array_size+7 
    - Complexity: n
 
### Partitioned lower bound of eval_realshellsort_start(V_array_size,B): 
* V_array_size 
 if [V_array_size>=2]
* 1 
 if [1>=V_array_size]
Possible lower bounds : [V_array_size,1]
Maximum lower bound complexity: n

Time statistics: 
-------------------------------------
* Partial evaluation computed in 105 ms.
* Invariants computed in 337 ms.
   - Backward Invariants 183 ms.
   - Transitive Invariants 56 ms.
* Refinement performed in 311 ms.
* Termination proved in 54 ms.
* Upper bounds computed in 992 ms.
   - Equation cost structures 164 ms.
   - Phase cost structures 567 ms.
   - Chain cost structures 196 ms.
   - Solving cost expressions 24 ms.
* Total analysis performed in 1931 ms.


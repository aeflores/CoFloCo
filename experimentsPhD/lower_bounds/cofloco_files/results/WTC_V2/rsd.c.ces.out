Warning: Ignored call to eval_rsd_stop/1 in equation eval_rsd_bb4_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_rsd_13/4,eval_rsd_14/5,eval_rsd_bb2_in/4,eval_rsd_bb3_in/4]
1. non_recursive : [eval_rsd_bb4_in/1]
2. non_recursive : [loop_cont_eval_rsd_bb2_in/2]
3. non_recursive : [eval_rsd_12/4]
4. non_recursive : [eval_rsd_11/4]
5. non_recursive : [eval_rsd_10/4]
6. non_recursive : [eval_rsd_9/4]
7. non_recursive : [eval_rsd_8/4]
8. non_recursive : [eval_rsd_7/4]
9. non_recursive : [eval_rsd_6/4]
10. non_recursive : [eval_rsd_5/3]
11. non_recursive : [eval_rsd_4/3]
12. non_recursive : [eval_rsd_bb1_in/2]
13. non_recursive : [eval_rsd_2/2]
14. non_recursive : [eval_rsd_1/2]
15. non_recursive : [eval_rsd_0/2]
16. non_recursive : [eval_rsd_bb0_in/2]
17. non_recursive : [eval_rsd_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_rsd_bb2_in/4
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is partially evaluated into eval_rsd_2/2
14. SCC is completely evaluated into other SCCs
15. SCC is completely evaluated into other SCCs
16. SCC is completely evaluated into other SCCs
17. SCC is partially evaluated into eval_rsd_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_rsd_bb2_in/4 
* CE 7 is refined into CE [8] 
* CE 5 is refined into CE [9] 
* CE 6 is refined into CE [10] 


#### Refined cost equations eval_rsd_bb2_in/4 
* CE 8: eval_rsd_bb2_in(V_r,V_db_0,V_da_0,B) = 0
     [V_r>=V_da_0+1,2*V_r>=V_db_0,V_db_0>=V_r,B=2] 
* CE 9: eval_rsd_bb2_in(V_r,V_db_0,V_da_0,B) = 1+ eval_rsd_bb2_in(V_r,V_da_0,C,D)
     [2*V_r>=V_da_0,2*V_r>=V_db_0,V_da_0>=V_r,V_db_0>=V_r,V_db_0=C+1,D=2,B=2] 
* CE 10: eval_rsd_bb2_in(V_r,V_db_0,V_da_0,B) = 1+ eval_rsd_bb2_in(V_r,V_db_0,C,D)
     [2*V_r>=V_da_0,2*V_r>=V_db_0,V_da_0>=V_r,V_db_0>=V_r,V_da_0=C+1,D=2,B=2] 

### Cost equations --> "Loop" of eval_rsd_bb2_in/4 
* CEs [9] --> Loop 7 
* CEs [10] --> Loop 8 
* CEs [8] --> Loop 9 

#### Loops of eval_rsd_bb2_in/4 
* Loop 7: eval_rsd_bb2_in(V_r,V_db_0,V_da_0,B)->  eval_rsd_bb2_in(V_r,V_da_0,A',B')
                  [2*V_r>=V_da_0,2*V_r>=V_db_0,V_da_0>=V_r,V_db_0>=V_r,V_db_0=A'+1,B'=2,B=2] 
* Loop 8: eval_rsd_bb2_in(V_r,V_db_0,V_da_0,B)->  eval_rsd_bb2_in(V_r,V_db_0,V_da_0',B')
                  [2*V_r>=V_da_0,2*V_r>=V_db_0,V_da_0>=V_r,V_db_0>=V_r,V_da_0=V_da_0'+1,B'=2,B=2] 
* Loop 9: eval_rsd_bb2_in(V_r,V_db_0,V_da_0,B) [V_r>=V_da_0+1,2*V_r>=V_db_0,V_db_0>=V_r,B=2] 

### Ranking functions of CR eval_rsd_bb2_in(V_r,V_db_0,V_da_0,B) 
* RF of phase [7,8]: [V_db_0+V_da_0+1,-2*V_r+V_db_0+V_da_0+1]

#### Partial ranking functions of CR eval_rsd_bb2_in(V_r,V_db_0,V_da_0,B) 
* Partial RF of phase [7,8]:
  - RF of loop [7:1]:
    V_db_0+V_da_0+1
    -2*V_r+V_db_0+V_da_0+1
  - RF of loop [8:1]:
    V_da_0+1 depends on loops [7:1] 
    -V_db_0/2+V_da_0+1/2 depends on loops [7:1] 
    -V_r+V_da_0+1 depends on loops [7:1] 


### Resulting Chains:eval_rsd_bb2_in(V_r,V_db_0,V_da_0,B) 
* [[7,8],9]


### Specialization of cost equations eval_rsd_2/2 
* CE 3 is refined into CE [11] 
* CE 4 is refined into CE [12] 


#### Refined cost equations eval_rsd_2/2 
* CE 11: eval_rsd_2(V_r,B) = 1+ eval_rsd_bb2_in(V_r,C,D,E):[[7,8],9]
     [V_r>=0,2*V_r=D,2*V_r=C,E=2] 
* CE 12: eval_rsd_2(V_r,B) = 0
     [0>=V_r+1] 

### Cost equations --> "Loop" of eval_rsd_2/2 
* CEs [11] --> Loop 10 
* CEs [12] --> Loop 11 

#### Loops of eval_rsd_2/2 
* Loop 10: eval_rsd_2(V_r,B) [V_r>=0] 
* Loop 11: eval_rsd_2(V_r,B) [0>=V_r+1] 

### Ranking functions of CR eval_rsd_2(V_r,B) 

#### Partial ranking functions of CR eval_rsd_2(V_r,B) 


### Resulting Chains:eval_rsd_2(V_r,B) 
* [11]
* [10]


### Specialization of cost equations eval_rsd_start/2 
* CE 2 is refined into CE [13,14] 


#### Refined cost equations eval_rsd_start/2 
* CE 13: eval_rsd_start(V_r,B) = 0+ eval_rsd_2(V_r,B):[11]
     [0>=V_r+1] 
* CE 14: eval_rsd_start(V_r,B) = 0+ eval_rsd_2(V_r,B):[10]
     [V_r>=0] 

### Cost equations --> "Loop" of eval_rsd_start/2 
* CEs [14] --> Loop 12 
* CEs [13] --> Loop 13 

#### Loops of eval_rsd_start/2 
* Loop 12: eval_rsd_start(V_r,B) [V_r>=0] 
* Loop 13: eval_rsd_start(V_r,B) [0>=V_r+1] 

### Ranking functions of CR eval_rsd_start(V_r,B) 

#### Partial ranking functions of CR eval_rsd_start(V_r,B) 


### Resulting Chains:eval_rsd_start(V_r,B) 
* [13]
* [12]


Computing Bounds
=====================================

#### Cost of loops [7,8] 

 * loop 7:eval_rsd_bb2_in(V_r,V_db_0,V_da_0,B) -> [eval_rsd_bb2_in(V_r',V_db_0',V_da_0',B')] 
1
 * loop 8:eval_rsd_bb2_in(V_r,V_db_0,V_da_0,B) -> [eval_rsd_bb2_in(V_r',V_db_0',V_da_0',B')] 
1
#### Cost of phase [7,8]:eval_rsd_bb2_in(V_r,V_db_0,V_da_0,B) -> [eval_rsd_bb2_in(V_r',V_db_0',V_da_0',B')] 
1*it(7)+1*it(8)+0
  Such that:it(7)+it(8) =< -2*V_r+V_db_0+V_da_0+2*V_r'-V_db_0'-V_da_0'
aux(4) =< -V_r+V_da_0+1
aux(10) =< -V_r+V_da_0+V_r'-V_da_0'
aux(13) =< V_r-1
aux(17) =< 3/2*V_r-1
it(7)+it(8) =< V_db_0+V_da_0-V_db_0'-V_da_0'
aux(6) =< -V_db_0/2+V_da_0+1/2
aux(12) =< -V_db_0/2+V_da_0+V_db_0'/2-V_da_0'
aux(2) =< V_da_0+1
aux(8) =< V_da_0-V_da_0'
aux(19) =< -2*V_r+V_db_0+V_da_0+1
aux(20) =< V_db_0+V_da_0+1
it(7)+it(8) =< aux(19)
it(7)+it(8) =< aux(20)
aux(5) =< it(7)*aux(17)
aux(1) =< it(7)*aux(13)
it(8) =< aux(5)+aux(6)
it(8) =< aux(1)+aux(2)
it(8) =< aux(5)+aux(12)
it(8) =< aux(1)+aux(10)
it(8) =< aux(1)+aux(8)
it(8) =< aux(1)+aux(4)
it(7)+it(8) >= -2*V_r+V_db_0+V_da_0+2*V_r'-V_db_0'-V_da_0'
it(7)+it(8) >= V_db_0+V_da_0-V_db_0'-V_da_0'

#### Cost of chains of eval_rsd_bb2_in(V_r,V_db_0,V_da_0,B):
* Chain [[7,8],9]: 1*it(7)+1*it(8)+0
  Such that:aux(13) =< V_r-1
aux(12) =< -3/2*V_r+3/2*V_da_0+1
aux(17) =< 3/2*V_r-1
aux(20) =< V_db_0+V_da_0+1
aux(6) =< -V_db_0/2+V_da_0+1/2
aux(2) =< V_da_0+1
aux(21) =< -2*V_r+V_db_0+V_da_0+1
aux(22) =< -V_r+V_da_0+1
it(7)+it(8) =< aux(21)
it(7)+it(8) =< aux(20)
aux(5) =< it(7)*aux(17)
aux(1) =< it(7)*aux(13)
it(8) =< aux(5)+aux(6)
it(8) =< aux(1)+aux(2)
it(8) =< aux(5)+aux(12)
it(8) =< aux(1)+aux(22)
it(8)+it(7) >= 1
it(8)+it(7) >= -3*V_r+V_db_0+V_da_0+1

  with precondition: [B=2,V_db_0>=V_r,V_da_0>=V_r,2*V_r>=V_db_0,2*V_r>=V_da_0] 


#### Cost of chains of eval_rsd_2(V_r,B):
* Chain [11]: 0
  with precondition: [0>=V_r+1] 

* Chain [10]: 1*s(9)+1*s(10)+1
  Such that:s(1) =< V_r-1
s(8) =< V_r+1
s(5) =< V_r+1/2
s(4) =< 4*V_r+1
s(3) =< 3/2*V_r-1
s(2) =< 3/2*V_r+1
aux(23) =< 2*V_r+1
s(9)+s(10) =< aux(23)
s(9)+s(10) =< s(4)
s(11) =< s(10)*s(3)
s(12) =< s(10)*s(1)
s(9) =< s(11)+s(5)
s(9) =< s(12)+aux(23)
s(9) =< s(11)+s(2)
s(9) =< s(12)+s(8)
s(9)+s(10) >= 1
s(10)+s(9) >= V_r+1

  with precondition: [V_r>=0] 


#### Cost of chains of eval_rsd_start(V_r,B):
* Chain [13]: 0
  with precondition: [0>=V_r+1] 

* Chain [12]: 1*s(20)+1*s(21)+1
  Such that:s(13) =< V_r-1
s(14) =< V_r+1
s(15) =< V_r+1/2
s(19) =< 2*V_r+1
s(16) =< 4*V_r+1
s(17) =< 3/2*V_r-1
s(18) =< 3/2*V_r+1
s(20)+s(21) =< s(19)
s(20)+s(21) =< s(16)
s(22) =< s(21)*s(17)
s(23) =< s(21)*s(13)
s(20) =< s(22)+s(15)
s(20) =< s(23)+s(19)
s(20) =< s(22)+s(18)
s(20) =< s(23)+s(14)
s(20)+s(21) >= 1
s(21)+s(20) >= V_r+1

  with precondition: [V_r>=0] 


Closed-form bounds of eval_rsd_start(V_r,B): 
-------------------------------------
* Chain [13] with precondition: [0>=V_r+1] 
    - Lower bound: 0 
    - Complexity: constant
 * Chain [12] with precondition: [V_r>=0] 
    - Lower bound: V_r+2 
    - Complexity: n
 
### Partitioned lower bound of eval_rsd_start(V_r,B): 
* 0 
 if [0>=V_r+1]
* V_r+2 
 if [V_r>=0]
Possible lower bounds : [0,V_r+2]
Maximum lower bound complexity: n

Time statistics: 
-------------------------------------
* Partial evaluation computed in 45 ms.
* Invariants computed in 55 ms.
   - Backward Invariants 18 ms.
   - Transitive Invariants 18 ms.
* Refinement performed in 53 ms.
* Termination proved in 39 ms.
* Upper bounds computed in 231 ms.
   - Equation cost structures 39 ms.
   - Phase cost structures 138 ms.
   - Chain cost structures 53 ms.
   - Solving cost expressions 4 ms.
* Total analysis performed in 488 ms.


Warning: Ignored call to eval_speedSimpleMultipleDep_stop/1 in equation eval_speedSimpleMultipleDep_bb3_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_speedSimpleMultipleDep_bb1_in/5,eval_speedSimpleMultipleDep_bb2_in/5]
1. non_recursive : [eval_speedSimpleMultipleDep_bb3_in/1]
2. non_recursive : [loop_cont_eval_speedSimpleMultipleDep_bb1_in/2]
3. non_recursive : [eval_speedSimpleMultipleDep_7/3]
4. non_recursive : [eval_speedSimpleMultipleDep_6/3]
5. non_recursive : [eval_speedSimpleMultipleDep_5/3]
6. non_recursive : [eval_speedSimpleMultipleDep_4/3]
7. non_recursive : [eval_speedSimpleMultipleDep_3/3]
8. non_recursive : [eval_speedSimpleMultipleDep_2/3]
9. non_recursive : [eval_speedSimpleMultipleDep_1/3]
10. non_recursive : [eval_speedSimpleMultipleDep_0/3]
11. non_recursive : [eval_speedSimpleMultipleDep_bb0_in/3]
12. non_recursive : [eval_speedSimpleMultipleDep_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_speedSimpleMultipleDep_bb1_in/5
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into eval_speedSimpleMultipleDep_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_speedSimpleMultipleDep_bb1_in/5 
* CE 5 is refined into CE [6] 
* CE 4 is refined into CE [7] 
* CE 3 is refined into CE [8] 


#### Refined cost equations eval_speedSimpleMultipleDep_bb1_in/5 
* CE 6: eval_speedSimpleMultipleDep_bb1_in(V_n,V_m,V_y_0,V_x_0,B) = 0
     [V_x_0>=V_n,V_x_0>=0,V_y_0>=0,B=2] 
* CE 7: eval_speedSimpleMultipleDep_bb1_in(V_n,V_m,V_y_0,V_x_0,B) = 1+ eval_speedSimpleMultipleDep_bb1_in(V_n,V_m,C,V_x_0,D)
     [V_n>=V_x_0+1,V_m>=V_y_0+1,V_x_0>=0,V_y_0>=0,V_y_0+1=C,D=2,B=2] 
* CE 8: eval_speedSimpleMultipleDep_bb1_in(V_n,V_m,V_y_0,V_x_0,B) = 1+ eval_speedSimpleMultipleDep_bb1_in(V_n,V_m,C,D,E)
     [V_n>=V_x_0+1,V_y_0>=V_m,V_x_0>=0,V_y_0>=0,V_x_0+1=D,E=2,C=0,B=2] 

### Cost equations --> "Loop" of eval_speedSimpleMultipleDep_bb1_in/5 
* CEs [7] --> Loop 5 
* CEs [8] --> Loop 6 
* CEs [6] --> Loop 7 

#### Loops of eval_speedSimpleMultipleDep_bb1_in/5 
* Loop 5: eval_speedSimpleMultipleDep_bb1_in(V_n,V_m,V_y_0,V_x_0,B)->  eval_speedSimpleMultipleDep_bb1_in(V_n,V_m,V_y_0',V_x_0,B')
                  [V_n>=V_x_0+1,V_m>=V_y_0+1,V_x_0>=0,V_y_0>=0,V_y_0+1=V_y_0',B'=2,B=2] 
* Loop 6: eval_speedSimpleMultipleDep_bb1_in(V_n,V_m,V_y_0,V_x_0,B)->  eval_speedSimpleMultipleDep_bb1_in(V_n,V_m,V_y_0',V_x_0',B')
                  [V_n>=V_x_0+1,V_y_0>=V_m,V_x_0>=0,V_y_0>=0,V_x_0+1=V_x_0',B'=2,V_y_0'=0,B=2] 
* Loop 7: eval_speedSimpleMultipleDep_bb1_in(V_n,V_m,V_y_0,V_x_0,B) [V_x_0>=V_n,V_x_0>=0,V_y_0>=0,B=2] 

### Ranking functions of CR eval_speedSimpleMultipleDep_bb1_in(V_n,V_m,V_y_0,V_x_0,B) 

#### Partial ranking functions of CR eval_speedSimpleMultipleDep_bb1_in(V_n,V_m,V_y_0,V_x_0,B) 
* Partial RF of phase [5,6]:
  - RF of loop [5:1]:
    V_m-V_y_0 depends on loops [6:1] 
  - RF of loop [6:1]:
    V_n-V_x_0


### Resulting Chains:eval_speedSimpleMultipleDep_bb1_in(V_n,V_m,V_y_0,V_x_0,B) 
* [[5,6],7]
* [7]


### Specialization of cost equations eval_speedSimpleMultipleDep_start/3 
* CE 2 is refined into CE [9,10] 


#### Refined cost equations eval_speedSimpleMultipleDep_start/3 
* CE 9: eval_speedSimpleMultipleDep_start(V_n,V_m,B) = 1+ eval_speedSimpleMultipleDep_bb1_in(V_n,V_m,C,D,E):[[5,6],7]
     [V_n>=1,E=2,D=0,C=0] 
* CE 10: eval_speedSimpleMultipleDep_start(V_n,V_m,B) = 1+ eval_speedSimpleMultipleDep_bb1_in(V_n,V_m,C,D,E):[7]
     [0>=V_n,E=2,D=0,C=0] 

### Cost equations --> "Loop" of eval_speedSimpleMultipleDep_start/3 
* CEs [9] --> Loop 8 
* CEs [10] --> Loop 9 

#### Loops of eval_speedSimpleMultipleDep_start/3 
* Loop 8: eval_speedSimpleMultipleDep_start(V_n,V_m,B) [V_n>=1] 
* Loop 9: eval_speedSimpleMultipleDep_start(V_n,V_m,B) [0>=V_n] 

### Ranking functions of CR eval_speedSimpleMultipleDep_start(V_n,V_m,B) 

#### Partial ranking functions of CR eval_speedSimpleMultipleDep_start(V_n,V_m,B) 


### Resulting Chains:eval_speedSimpleMultipleDep_start(V_n,V_m,B) 
* [9]
* [8]


Computing Bounds
=====================================

#### Cost of loops [5,6] 

 * loop 5:eval_speedSimpleMultipleDep_bb1_in(V_n,V_m,V_y_0,V_x_0,B) -> [eval_speedSimpleMultipleDep_bb1_in(V_n',V_m',V_y_0',V_x_0',B')] 
1
 * loop 6:eval_speedSimpleMultipleDep_bb1_in(V_n,V_m,V_y_0,V_x_0,B) -> [eval_speedSimpleMultipleDep_bb1_in(V_n',V_m',V_y_0',V_x_0',B')] 
1
#### Cost of phase [5,6]:eval_speedSimpleMultipleDep_bb1_in(V_n,V_m,V_y_0,V_x_0,B) -> [eval_speedSimpleMultipleDep_bb1_in(V_n',V_m',V_y_0',V_x_0',B')] 
1*it(5)+1*it(6)+0
  Such that:it(6) =< V_n-V_x_0
it(6) =< V_n-V_x_0-V_n'+V_x_0'
aux(8) =< V_m
aux(5) =< V_m-V_y_0
aux(4) =< it(6)*aux(8)
it(5) =< aux(4)+aux(5)
it(6) >= V_n-V_x_0-V_n'+V_x_0'

#### Cost of chains of eval_speedSimpleMultipleDep_bb1_in(V_n,V_m,V_y_0,V_x_0,B):
* Chain [[5,6],7]: 1*it(5)+1*it(6)+0
  Such that:it(6) =< V_n-V_x_0
aux(8) =< V_m
aux(5) =< V_m-V_y_0
aux(4) =< it(6)*aux(8)
it(5) =< aux(4)+aux(5)
it(6) >= V_n-V_x_0

  with precondition: [B=2,V_y_0>=0,V_x_0>=0,V_n>=V_x_0+1] 

* Chain [7]: 0
  with precondition: [B=2,V_y_0>=0,V_x_0>=0,V_x_0>=V_n] 


#### Cost of chains of eval_speedSimpleMultipleDep_start(V_n,V_m,B):
* Chain [9]: 1
  with precondition: [0>=V_n] 

* Chain [8]: 1*s(1)+1*s(5)+1
  Such that:s(1) =< V_n
aux(9) =< V_m
s(4) =< s(1)*aux(9)
s(5) =< s(4)+aux(9)
s(1) >= V_n

  with precondition: [V_n>=1] 


Closed-form bounds of eval_speedSimpleMultipleDep_start(V_n,V_m,B): 
-------------------------------------
* Chain [9] with precondition: [0>=V_n] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [8] with precondition: [V_n>=1] 
    - Lower bound: V_n+1 
    - Complexity: n
 
### Partitioned lower bound of eval_speedSimpleMultipleDep_start(V_n,V_m,B): 
* 1 
 if [0>=V_n]
* V_n+1 
 if [V_n>=1]
Possible lower bounds : [1,V_n+1]
Maximum lower bound complexity: n

Time statistics: 
-------------------------------------
* Partial evaluation computed in 34 ms.
* Invariants computed in 43 ms.
   - Backward Invariants 16 ms.
   - Transitive Invariants 13 ms.
* Refinement performed in 57 ms.
* Termination proved in 17 ms.
* Upper bounds computed in 113 ms.
   - Equation cost structures 20 ms.
   - Phase cost structures 77 ms.
   - Chain cost structures 18 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 320 ms.


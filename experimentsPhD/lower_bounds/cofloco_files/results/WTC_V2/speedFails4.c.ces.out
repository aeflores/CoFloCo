Warning: Ignored call to eval_speedFails4_stop/1 in equation eval_speedFails4_bb3_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_speedFails4_bb1_in/5,eval_speedFails4_bb2_in/5]
1. non_recursive : [eval_speedFails4_bb3_in/1]
2. non_recursive : [loop_cont_eval_speedFails4_bb1_in/2]
3. non_recursive : [eval_speedFails4_7/5]
4. non_recursive : [eval_speedFails4_6/5]
5. non_recursive : [eval_speedFails4_5/5]
6. non_recursive : [eval_speedFails4_4/4]
7. non_recursive : [eval_speedFails4_3/4]
8. non_recursive : [eval_speedFails4_2/4]
9. non_recursive : [eval_speedFails4_1/4]
10. non_recursive : [eval_speedFails4_bb0_in/3]
11. non_recursive : [eval_speedFails4_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_speedFails4_bb1_in/5
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into eval_speedFails4_4/4
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into eval_speedFails4_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_speedFails4_bb1_in/5 
* CE 7 is refined into CE [8] 
* CE 6 is refined into CE [9] 
* CE 5 is refined into CE [10] 


#### Refined cost equations eval_speedFails4_bb1_in/5 
* CE 8: eval_speedFails4_bb1_in(V_n,V_0,V__,V__0,B) = 0
     [V__0>=V_n+1,V__+1>=0,1>=V__,B=2] 
* CE 9: eval_speedFails4_bb1_in(V_n,V_0,V__,V__0,B) = 1+ eval_speedFails4_bb1_in(V_n,V_0,V__,C,D)
     [V_n>=V__0,V__+1>=0,V_0>=1,1>=V__,V__+V__0=C,D=2,B=2] 
* CE 10: eval_speedFails4_bb1_in(V_n,V_0,V__,V__0,B) = 1+ eval_speedFails4_bb1_in(V_n,V_0,V__,C,D)
     [V_n>=V__0,V__+1>=0,1>=V__,0>=V_0,V__0=V__+C,D=2,B=2] 

### Cost equations --> "Loop" of eval_speedFails4_bb1_in/5 
* CEs [9] --> Loop 7 
* CEs [10] --> Loop 8 
* CEs [8] --> Loop 9 

#### Loops of eval_speedFails4_bb1_in/5 
* Loop 7: eval_speedFails4_bb1_in(V_n,V_0,V__,V__0,B)->  eval_speedFails4_bb1_in(V_n,V_0,V__,V__0',B')
                  [V_n>=V__0,V__+1>=0,V_0>=1,1>=V__,V__+V__0=V__0',B'=2,B=2] 
* Loop 8: eval_speedFails4_bb1_in(V_n,V_0,V__,V__0,B)->  eval_speedFails4_bb1_in(V_n,V_0,V__,V__0',B')
                  [V_n>=V__0,V__+1>=0,1>=V__,0>=V_0,V__+V__0'=V__0,B'=2,B=2] 
* Loop 9: eval_speedFails4_bb1_in(V_n,V_0,V__,V__0,B) [V__0>=V_n+1,V__+1>=0,1>=V__,B=2] 

### Ranking functions of CR eval_speedFails4_bb1_in(V_n,V_0,V__,V__0,B) 

#### Partial ranking functions of CR eval_speedFails4_bb1_in(V_n,V_0,V__,V__0,B) 


### Resulting Chains:eval_speedFails4_bb1_in(V_n,V_0,V__,V__0,B) 
* [[8]]...
* [[8],9]
* [[7]]...
* [[7],9]
* [9]


### Specialization of cost equations eval_speedFails4_4/4 
* CE 3 is refined into CE [11,12,13] 
* CE 4 is refined into CE [14,15,16] 


#### Refined cost equations eval_speedFails4_4/4 
* CE 11: eval_speedFails4_4(V_x,V_n,V_0,B) = 1+ eval_speedFails4_bb1_in(V_n,V_0,C,V_x,D):[[7]]
     [V_n>=V_x,V_0>=1,D=2,C=1] 
* CE 12: eval_speedFails4_4(V_x,V_n,V_0,B) = 1+ eval_speedFails4_bb1_in(V_n,V_0,C,V_x,D):[[7],9]
     [V_n>=V_x,V_0>=1,D=2,C=1] 
* CE 13: eval_speedFails4_4(V_x,V_n,V_0,B) = 1+ eval_speedFails4_bb1_in(V_n,V_0,C,V_x,D):[9]
     [V_x>=V_n+1,V_0>=1,D=2,C=1] 
* CE 14: eval_speedFails4_4(V_x,V_n,V_0,B) = 1+ eval_speedFails4_bb1_in(V_n,V_0,C,V_x,D):[[8]]
     [V_n>=V_x,0>=V_0,D=2,C+1=0] 
* CE 15: eval_speedFails4_4(V_x,V_n,V_0,B) = 1+ eval_speedFails4_bb1_in(V_n,V_0,C,V_x,D):[[8],9]
     [V_n>=V_x,0>=V_0,D=2,C+1=0] 
* CE 16: eval_speedFails4_4(V_x,V_n,V_0,B) = 1+ eval_speedFails4_bb1_in(V_n,V_0,C,V_x,D):[9]
     [V_x>=V_n+1,0>=V_0,D=2,C+1=0] 

### Cost equations --> "Loop" of eval_speedFails4_4/4 
* CEs [13] --> Loop 10 
* CEs [12] --> Loop 11 
* CEs [16] --> Loop 12 
* CEs [15] --> Loop 13 
* CEs [11] --> Loop 14 
* CEs [14] --> Loop 15 

#### Loops of eval_speedFails4_4/4 
* Loop 10: eval_speedFails4_4(V_x,V_n,V_0,B) [V_x>=V_n+1,V_0>=1] 
* Loop 11: eval_speedFails4_4(V_x,V_n,V_0,B) [V_n>=V_x,V_0>=1] 
* Loop 12: eval_speedFails4_4(V_x,V_n,V_0,B) [V_x>=V_n+1,0>=V_0] 
* Loop 13: eval_speedFails4_4(V_x,V_n,V_0,B) [V_n>=V_x,0>=V_0] 
* Loop 14: eval_speedFails4_4(V_x,V_n,V_0,B) [V_n>=V_x,V_0>=1] 
* Loop 15: eval_speedFails4_4(V_x,V_n,V_0,B) [V_n>=V_x,0>=V_0] 

### Ranking functions of CR eval_speedFails4_4(V_x,V_n,V_0,B) 

#### Partial ranking functions of CR eval_speedFails4_4(V_x,V_n,V_0,B) 


### Resulting Chains:eval_speedFails4_4(V_x,V_n,V_0,B) 
* [15]...
* [14]...
* [13]
* [12]
* [11]
* [10]


### Specialization of cost equations eval_speedFails4_start/3 
* CE 2 is refined into CE [17,18,19,20,21,22] 


#### Refined cost equations eval_speedFails4_start/3 
* CE 17: eval_speedFails4_start(V_x,V_n,B) = 0+ eval_speedFails4_4(V_x,V_n,C,B):[15]
     [V_n>=V_x,0>=C] 
* CE 18: eval_speedFails4_start(V_x,V_n,B) = 0+ eval_speedFails4_4(V_x,V_n,C,B):[14]
     [V_n>=V_x,C>=1] 
* CE 19: eval_speedFails4_start(V_x,V_n,B) = 0+ eval_speedFails4_4(V_x,V_n,C,B):[13]
     [V_n>=V_x,0>=C] 
* CE 20: eval_speedFails4_start(V_x,V_n,B) = 0+ eval_speedFails4_4(V_x,V_n,C,B):[12]
     [V_x>=V_n+1,0>=C] 
* CE 21: eval_speedFails4_start(V_x,V_n,B) = 0+ eval_speedFails4_4(V_x,V_n,C,B):[11]
     [V_n>=V_x,C>=1] 
* CE 22: eval_speedFails4_start(V_x,V_n,B) = 0+ eval_speedFails4_4(V_x,V_n,C,B):[10]
     [V_x>=V_n+1,C>=1] 

### Cost equations --> "Loop" of eval_speedFails4_start/3 
* CEs [22] --> Loop 16 
* CEs [20] --> Loop 17 
* CEs [21] --> Loop 18 
* CEs [19] --> Loop 19 
* CEs [18] --> Loop 20 
* CEs [17] --> Loop 21 

#### Loops of eval_speedFails4_start/3 
* Loop 16: eval_speedFails4_start(V_x,V_n,B) [V_x>=V_n+1] 
* Loop 17: eval_speedFails4_start(V_x,V_n,B) [V_x>=V_n+1] 
* Loop 18: eval_speedFails4_start(V_x,V_n,B) [V_n>=V_x] 
* Loop 19: eval_speedFails4_start(V_x,V_n,B) [V_n>=V_x] 
* Loop 20: eval_speedFails4_start(V_x,V_n,B) [V_n>=V_x] 
* Loop 21: eval_speedFails4_start(V_x,V_n,B) [V_n>=V_x] 

### Ranking functions of CR eval_speedFails4_start(V_x,V_n,B) 

#### Partial ranking functions of CR eval_speedFails4_start(V_x,V_n,B) 


### Resulting Chains:eval_speedFails4_start(V_x,V_n,B) 
* [21]...
* [20]...
* [19]
* [18]
* [17]
* [16]


Computing Bounds
=====================================

#### Cost of loops [8] 

 * loop 8:eval_speedFails4_bb1_in(V_n,V_0,V__,V__0,B) -> [eval_speedFails4_bb1_in(V_n',V_0',V__',V__0',B')] 
1
#### Cost of phase [8]:eval_speedFails4_bb1_in(V_n,V_0,V__,V__0,B) -> [eval_speedFails4_bb1_in(V_n',V_0',V__',V__0',B')] 
1*it(8)+0
#### Cost of phase [8]:eval_speedFails4_bb1_in(V_n,V_0,V__,V__0,B) -> [eval_speedFails4_bb1_in(V_n',V_0',V__',V__0',B')] 
1*it(8)+0
#### Cost of loops [7] 

 * loop 7:eval_speedFails4_bb1_in(V_n,V_0,V__,V__0,B) -> [eval_speedFails4_bb1_in(V_n',V_0',V__',V__0',B')] 
1
#### Cost of phase [7]:eval_speedFails4_bb1_in(V_n,V_0,V__,V__0,B) -> [eval_speedFails4_bb1_in(V_n',V_0',V__',V__0',B')] 
1*it(7)+0
#### Cost of phase [7]:eval_speedFails4_bb1_in(V_n,V_0,V__,V__0,B) -> [eval_speedFails4_bb1_in(V_n',V_0',V__',V__0',B')] 
1*it(7)+0
#### Cost of chains of eval_speedFails4_bb1_in(V_n,V_0,V__,V__0,B):
* Chain [[8]]...: 1*it(8)+0
  with precondition: [1>=V__,V_n>=V__0,V__+1>=0,0>=V_0,B=2] 

* Chain [[8],9]: 1*it(8)+0
  with precondition: [V__+1=0,B=2,0>=V_0,V_n>=V__0] 

* Chain [[7]]...: 1*it(7)+0
  with precondition: [1>=V__,V_n>=V__0,V__+1>=0,V_0>=1,B=2] 

* Chain [[7],9]: 1*it(7)+0
  with precondition: [V__=1,B=2,V_0>=1,V_n>=V__0] 

* Chain [9]: 0
  with precondition: [B=2,1>=V__,V__+1>=0,V__0>=V_n+1] 


#### Cost of chains of eval_speedFails4_4(V_x,V_n,V_0,B):
* Chain [15]...: 1*s(1)+1
  with precondition: [0>=V_0,V_n>=V_x] 

* Chain [14]...: 1*s(2)+1
  with precondition: [V_0>=1,V_n>=V_x] 

* Chain [13]: 1*s(3)+1
  with precondition: [0>=V_0,V_n>=V_x] 

* Chain [12]: 1
  with precondition: [0>=V_0,V_x>=V_n+1] 

* Chain [11]: 1*s(4)+1
  with precondition: [V_0>=1,V_n>=V_x] 

* Chain [10]: 1
  with precondition: [V_0>=1,V_x>=V_n+1] 


#### Cost of chains of eval_speedFails4_start(V_x,V_n,B):
* Chain [21]...: 1*s(5)+1
  with precondition: [V_n>=V_x] 

* Chain [20]...: 1*s(6)+1
  with precondition: [V_n>=V_x] 

* Chain [19]: 1*s(7)+1
  with precondition: [V_n>=V_x] 

* Chain [18]: 1*s(8)+1
  with precondition: [V_n>=V_x] 

* Chain [17]: 1
  with precondition: [V_x>=V_n+1] 

* Chain [16]: 1
  with precondition: [V_x>=V_n+1] 


Closed-form bounds of eval_speedFails4_start(V_x,V_n,B): 
-------------------------------------
* Chain [21]... with precondition: [V_n>=V_x] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [20]... with precondition: [V_n>=V_x] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [19] with precondition: [V_n>=V_x] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [18] with precondition: [V_n>=V_x] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [17] with precondition: [V_x>=V_n+1] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [16] with precondition: [V_x>=V_n+1] 
    - Lower bound: 1 
    - Complexity: constant
 
### Partitioned lower bound of eval_speedFails4_start(V_x,V_n,B): 
* 1 
 if []
Possible lower bounds : [1]
Maximum lower bound complexity: constant

Time statistics: 
-------------------------------------
* Partial evaluation computed in 52 ms.
* Invariants computed in 72 ms.
   - Backward Invariants 35 ms.
   - Transitive Invariants 19 ms.
* Refinement performed in 115 ms.
* Termination proved in 13 ms.
* Upper bounds computed in 88 ms.
   - Equation cost structures 34 ms.
   - Phase cost structures 21 ms.
   - Chain cost structures 30 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 398 ms.


Warning: Ignored call to eval_speedpldi3_stop/1 in equation eval_speedpldi3_bb3_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_speedpldi3_bb1_in/5,eval_speedpldi3_bb2_in/5]
1. non_recursive : [eval_speedpldi3_bb3_in/1]
2. non_recursive : [loop_cont_eval_speedpldi3_bb1_in/2]
3. non_recursive : [eval_speedpldi3_2/3]
4. non_recursive : [eval_speedpldi3_1/3]
5. non_recursive : [eval_speedpldi3_0/3]
6. non_recursive : [eval_speedpldi3_bb0_in/3]
7. non_recursive : [eval_speedpldi3_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_speedpldi3_bb1_in/5
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into eval_speedpldi3_2/3
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into eval_speedpldi3_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_speedpldi3_bb1_in/5 
* CE 8 is refined into CE [9] 
* CE 7 is refined into CE [10] 
* CE 6 is refined into CE [11] 


#### Refined cost equations eval_speedpldi3_bb1_in/5 
* CE 9: eval_speedpldi3_bb1_in(V_m,V_n,V_j_0,V_i_0,B) = 0
     [V_i_0>=V_n,V_n>=V_m+1,V_j_0>=0,V_m>=1,B=2] 
* CE 10: eval_speedpldi3_bb1_in(V_m,V_n,V_j_0,V_i_0,B) = 1+ eval_speedpldi3_bb1_in(V_m,V_n,C,V_i_0,D)
     [V_n>=V_i_0+1,V_m>=V_j_0+1,V_n>=V_m+1,V_i_0>=0,V_j_0>=0,V_j_0+1=C,D=2,B=2] 
* CE 11: eval_speedpldi3_bb1_in(V_m,V_n,V_j_0,V_i_0,B) = 1+ eval_speedpldi3_bb1_in(V_m,V_n,C,D,E)
     [V_n>=V_i_0+1,V_j_0>=V_m,V_n>=V_m+1,V_i_0>=0,V_m>=1,V_i_0+1=D,E=2,C=0,B=2] 

### Cost equations --> "Loop" of eval_speedpldi3_bb1_in/5 
* CEs [10] --> Loop 8 
* CEs [11] --> Loop 9 
* CEs [9] --> Loop 10 

#### Loops of eval_speedpldi3_bb1_in/5 
* Loop 8: eval_speedpldi3_bb1_in(V_m,V_n,V_j_0,V_i_0,B)->  eval_speedpldi3_bb1_in(V_m,V_n,V_j_0',V_i_0,B')
                  [V_n>=V_i_0+1,V_m>=V_j_0+1,V_n>=V_m+1,V_i_0>=0,V_j_0>=0,V_j_0+1=V_j_0',B'=2,B=2] 
* Loop 9: eval_speedpldi3_bb1_in(V_m,V_n,V_j_0,V_i_0,B)->  eval_speedpldi3_bb1_in(V_m,V_n,V_j_0',V_i_0',B')
                  [V_n>=V_i_0+1,V_j_0>=V_m,V_n>=V_m+1,V_i_0>=0,V_m>=1,V_i_0+1=V_i_0',B'=2,V_j_0'=0,B=2] 
* Loop 10: eval_speedpldi3_bb1_in(V_m,V_n,V_j_0,V_i_0,B) [V_i_0>=V_n,V_n>=V_m+1,V_j_0>=0,V_m>=1,B=2] 

### Ranking functions of CR eval_speedpldi3_bb1_in(V_m,V_n,V_j_0,V_i_0,B) 

#### Partial ranking functions of CR eval_speedpldi3_bb1_in(V_m,V_n,V_j_0,V_i_0,B) 
* Partial RF of phase [8,9]:
  - RF of loop [8:1]:
    V_m-V_j_0 depends on loops [9:1] 
    V_n-V_j_0-1 depends on loops [9:1] 
  - RF of loop [9:1]:
    V_j_0 depends on loops [8:1] 
    -V_m+V_j_0+1 depends on loops [8:1] 
    V_n-V_i_0


### Resulting Chains:eval_speedpldi3_bb1_in(V_m,V_n,V_j_0,V_i_0,B) 
* [[8,9],10]


### Specialization of cost equations eval_speedpldi3_2/3 
* CE 4 is refined into CE [12] 
* CE 5 is refined into CE [13] 
* CE 3 is refined into CE [14] 


#### Refined cost equations eval_speedpldi3_2/3 
* CE 12: eval_speedpldi3_2(V_m,V_n,B) = 0
     [V_m>=V_n] 
* CE 13: eval_speedpldi3_2(V_m,V_n,B) = 1+ eval_speedpldi3_bb1_in(V_m,V_n,C,D,E):[[8,9],10]
     [V_n>=V_m+1,V_m>=1,E=2,D=0,C=0] 
* CE 14: eval_speedpldi3_2(V_m,V_n,B) = 0
     [0>=V_m] 

### Cost equations --> "Loop" of eval_speedpldi3_2/3 
* CEs [12] --> Loop 11 
* CEs [13] --> Loop 12 
* CEs [14] --> Loop 13 

#### Loops of eval_speedpldi3_2/3 
* Loop 11: eval_speedpldi3_2(V_m,V_n,B) [V_m>=V_n] 
* Loop 12: eval_speedpldi3_2(V_m,V_n,B) [V_n>=V_m+1,V_m>=1] 
* Loop 13: eval_speedpldi3_2(V_m,V_n,B) [0>=V_m] 

### Ranking functions of CR eval_speedpldi3_2(V_m,V_n,B) 

#### Partial ranking functions of CR eval_speedpldi3_2(V_m,V_n,B) 


### Resulting Chains:eval_speedpldi3_2(V_m,V_n,B) 
* [13]
* [12]
* [11]


### Specialization of cost equations eval_speedpldi3_start/3 
* CE 2 is refined into CE [15,16,17] 


#### Refined cost equations eval_speedpldi3_start/3 
* CE 15: eval_speedpldi3_start(V_m,V_n,B) = 0+ eval_speedpldi3_2(V_m,V_n,B):[13]
     [0>=V_m] 
* CE 16: eval_speedpldi3_start(V_m,V_n,B) = 0+ eval_speedpldi3_2(V_m,V_n,B):[12]
     [V_n>=V_m+1,V_m>=1] 
* CE 17: eval_speedpldi3_start(V_m,V_n,B) = 0+ eval_speedpldi3_2(V_m,V_n,B):[11]
     [V_m>=V_n] 

### Cost equations --> "Loop" of eval_speedpldi3_start/3 
* CEs [17] --> Loop 14 
* CEs [16] --> Loop 15 
* CEs [15] --> Loop 16 

#### Loops of eval_speedpldi3_start/3 
* Loop 14: eval_speedpldi3_start(V_m,V_n,B) [V_m>=V_n] 
* Loop 15: eval_speedpldi3_start(V_m,V_n,B) [V_n>=V_m+1,V_m>=1] 
* Loop 16: eval_speedpldi3_start(V_m,V_n,B) [0>=V_m] 

### Ranking functions of CR eval_speedpldi3_start(V_m,V_n,B) 

#### Partial ranking functions of CR eval_speedpldi3_start(V_m,V_n,B) 


### Resulting Chains:eval_speedpldi3_start(V_m,V_n,B) 
* [16]
* [15]
* [14]


Computing Bounds
=====================================

#### Cost of loops [8,9] 

 * loop 8:eval_speedpldi3_bb1_in(V_m,V_n,V_j_0,V_i_0,B) -> [eval_speedpldi3_bb1_in(V_m',V_n',V_j_0',V_i_0',B')] 
1
 * loop 9:eval_speedpldi3_bb1_in(V_m,V_n,V_j_0,V_i_0,B) -> [eval_speedpldi3_bb1_in(V_m',V_n',V_j_0',V_i_0',B')] 
1
#### Cost of phase [8,9]:eval_speedpldi3_bb1_in(V_m,V_n,V_j_0,V_i_0,B) -> [eval_speedpldi3_bb1_in(V_m',V_n',V_j_0',V_i_0',B')] 
1*it(8)+1*it(9)+0
  Such that:aux(20) =< V_n-1
aux(10) =< V_n-V_j_0-1
aux(22) =< V_n-V_i_0
aux(23) =< V_n-V_i_0-V_n'+V_i_0'
it(9) =< aux(22)
it(9) =< aux(23)
aux(9) =< it(9)*aux(20)
it(8) =< aux(9)+aux(10)
it(9) >= V_n-V_i_0-V_n'+V_i_0'

#### Cost of chains of eval_speedpldi3_bb1_in(V_m,V_n,V_j_0,V_i_0,B):
* Chain [[8,9],10]: 1*it(8)+1*it(9)+0
  Such that:aux(23) =< V_m+V_n-V_i_0-1
aux(20) =< V_n-1
aux(10) =< V_n-V_j_0-1
aux(22) =< V_n-V_i_0
it(9) =< aux(22)
it(9) =< aux(23)
aux(9) =< it(9)*aux(20)
it(8) =< aux(9)+aux(10)
it(9) >= V_n-V_i_0

  with precondition: [B=2,V_m>=1,V_j_0>=0,V_i_0>=0,V_n>=V_m+1,V_n>=V_i_0+1] 


#### Cost of chains of eval_speedpldi3_2(V_m,V_n,B):
* Chain [13]: 0
  with precondition: [0>=V_m] 

* Chain [12]: 1*s(5)+1*s(7)+1
  Such that:s(1) =< V_m+V_n-1
s(4) =< V_n
aux(26) =< V_n-1
s(5) =< s(4)
s(5) =< s(1)
s(6) =< s(5)*aux(26)
s(7) =< s(6)+aux(26)
s(5) >= V_n

  with precondition: [V_m>=1,V_n>=V_m+1] 

* Chain [11]: 0
  with precondition: [V_m>=V_n] 


#### Cost of chains of eval_speedpldi3_start(V_m,V_n,B):
* Chain [16]: 0
  with precondition: [0>=V_m] 

* Chain [15]: 1*s(11)+1*s(13)+1
  Such that:s(8) =< V_m+V_n-1
s(10) =< V_n-1
s(9) =< V_n
s(11) =< s(9)
s(11) =< s(8)
s(12) =< s(11)*s(10)
s(13) =< s(12)+s(10)
s(11) >= V_n

  with precondition: [V_m>=1,V_n>=V_m+1] 

* Chain [14]: 0
  with precondition: [V_m>=V_n] 


Closed-form bounds of eval_speedpldi3_start(V_m,V_n,B): 
-------------------------------------
* Chain [16] with precondition: [0>=V_m] 
    - Lower bound: 0 
    - Complexity: constant
 * Chain [15] with precondition: [V_m>=1,V_n>=V_m+1] 
    - Lower bound: V_n+1 
    - Complexity: n
 * Chain [14] with precondition: [V_m>=V_n] 
    - Lower bound: 0 
    - Complexity: constant
 
### Partitioned lower bound of eval_speedpldi3_start(V_m,V_n,B): 
* 0 
 if [V_m>=V_n]
 or [0>=V_m,V_n>=V_m+1]
* V_n+1 
 if [V_m>=1,V_n>=V_m+1]
Possible lower bounds : [0,V_n+1]
Maximum lower bound complexity: n

Time statistics: 
-------------------------------------
* Partial evaluation computed in 33 ms.
* Invariants computed in 64 ms.
   - Backward Invariants 21 ms.
   - Transitive Invariants 23 ms.
* Refinement performed in 71 ms.
* Termination proved in 29 ms.
* Upper bounds computed in 200 ms.
   - Equation cost structures 36 ms.
   - Phase cost structures 135 ms.
   - Chain cost structures 31 ms.
   - Solving cost expressions 2 ms.
* Total analysis performed in 450 ms.


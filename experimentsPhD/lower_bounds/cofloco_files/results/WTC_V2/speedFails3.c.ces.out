Warning: Ignored call to eval_speedFails3_stop/1 in equation eval_speedFails3_bb3_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_speedFails3_bb1_in/5,eval_speedFails3_bb2_in/5]
1. non_recursive : [eval_speedFails3_bb3_in/1]
2. non_recursive : [loop_cont_eval_speedFails3_bb1_in/2]
3. non_recursive : [eval_speedFails3_7/5]
4. non_recursive : [eval_speedFails3_6/5]
5. non_recursive : [eval_speedFails3_5/5]
6. non_recursive : [eval_speedFails3_4/5]
7. non_recursive : [eval_speedFails3_3/4]
8. non_recursive : [eval_speedFails3_2/4]
9. non_recursive : [eval_speedFails3_1/4]
10. non_recursive : [eval_speedFails3_0/4]
11. non_recursive : [eval_speedFails3_bb0_in/4]
12. non_recursive : [eval_speedFails3_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_speedFails3_bb1_in/5
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into eval_speedFails3_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_speedFails3_bb1_in/5 
* CE 6 is refined into CE [7] 
* CE 5 is refined into CE [8] 
* CE 4 is refined into CE [9] 
* CE 3 is refined into CE [10] 


#### Refined cost equations eval_speedFails3_bb1_in/5 
* CE 7: eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B) = 0
     [V__0>=V_n+1,B=2] 
* CE 8: eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B) = 0
     [0>=V__0+1,B=2] 
* CE 9: eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B) = 1+ eval_speedFails3_bb1_in(V_n,V_t,V_0,C,D)
     [V_n>=V__0,V__0>=0,V_0>=1,V_t+V__0=C,D=2,B=2] 
* CE 10: eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B) = 1+ eval_speedFails3_bb1_in(V_n,V_t,V_0,C,D)
     [V_n>=V__0,V__0>=0,0>=V_0,V__0=V_t+C,D=2,B=2] 

### Cost equations --> "Loop" of eval_speedFails3_bb1_in/5 
* CEs [9] --> Loop 6 
* CEs [10] --> Loop 7 
* CEs [7] --> Loop 8 
* CEs [8] --> Loop 9 

#### Loops of eval_speedFails3_bb1_in/5 
* Loop 6: eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B)->  eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0',B')
                  [V_n>=V__0,V__0>=0,V_0>=1,V_t+V__0=V__0',B'=2,B=2] 
* Loop 7: eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B)->  eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0',B')
                  [V_n>=V__0,V__0>=0,0>=V_0,V_t+V__0'=V__0,B'=2,B=2] 
* Loop 8: eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B) [V__0>=V_n+1,B=2] 
* Loop 9: eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B) [0>=V__0+1,B=2] 

### Ranking functions of CR eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B) 

#### Partial ranking functions of CR eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B) 


### Resulting Chains:eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B) 
* [[7]]...
* [[7],9]
* [[7],8]
* [[6]]...
* [[6],9]
* [[6],8]
* [9]
* [8]


### Specialization of cost equations eval_speedFails3_start/4 
* CE 2 is refined into CE [11,12,13,14,15,16,17,18] 


#### Refined cost equations eval_speedFails3_start/4 
* CE 11: eval_speedFails3_start(V_x,V_n,V_t,B) = 1+ eval_speedFails3_bb1_in(V_n,V_t,C,V_x,D):[[7]]
     [V_n>=V_x,V_x>=0,0>=C,D=2] 
* CE 12: eval_speedFails3_start(V_x,V_n,V_t,B) = 1+ eval_speedFails3_bb1_in(V_n,V_t,C,V_x,D):[[7],9]
     [V_n>=V_x,V_x>=0,V_t>=1,0>=C,D=2] 
* CE 13: eval_speedFails3_start(V_x,V_n,V_t,B) = 1+ eval_speedFails3_bb1_in(V_n,V_t,C,V_x,D):[[7],8]
     [V_n>=V_x,V_x>=0,0>=C,0>=V_t+1,D=2] 
* CE 14: eval_speedFails3_start(V_x,V_n,V_t,B) = 1+ eval_speedFails3_bb1_in(V_n,V_t,C,V_x,D):[[6]]
     [V_n>=V_x,V_x>=0,C>=1,D=2] 
* CE 15: eval_speedFails3_start(V_x,V_n,V_t,B) = 1+ eval_speedFails3_bb1_in(V_n,V_t,C,V_x,D):[[6],9]
     [V_n>=V_x,V_x>=0,C>=1,0>=V_t+1,D=2] 
* CE 16: eval_speedFails3_start(V_x,V_n,V_t,B) = 1+ eval_speedFails3_bb1_in(V_n,V_t,C,V_x,D):[[6],8]
     [V_n>=V_x,V_x>=0,C>=1,V_t>=1,D=2] 
* CE 17: eval_speedFails3_start(V_x,V_n,V_t,B) = 1+ eval_speedFails3_bb1_in(V_n,V_t,C,V_x,D):[9]
     [0>=V_x+1,D=2] 
* CE 18: eval_speedFails3_start(V_x,V_n,V_t,B) = 1+ eval_speedFails3_bb1_in(V_n,V_t,C,V_x,D):[8]
     [V_x>=V_n+1,D=2] 

### Cost equations --> "Loop" of eval_speedFails3_start/4 
* CEs [18] --> Loop 10 
* CEs [16] --> Loop 11 
* CEs [12] --> Loop 12 
* CEs [15] --> Loop 13 
* CEs [13] --> Loop 14 
* CEs [17] --> Loop 15 
* CEs [14] --> Loop 16 
* CEs [11] --> Loop 17 

#### Loops of eval_speedFails3_start/4 
* Loop 10: eval_speedFails3_start(V_x,V_n,V_t,B) [V_x>=V_n+1] 
* Loop 11: eval_speedFails3_start(V_x,V_n,V_t,B) [V_n>=V_x,V_t>=1,V_x>=0] 
* Loop 12: eval_speedFails3_start(V_x,V_n,V_t,B) [V_n>=V_x,V_t>=1,V_x>=0] 
* Loop 13: eval_speedFails3_start(V_x,V_n,V_t,B) [V_n>=V_x,V_x>=0,0>=V_t+1] 
* Loop 14: eval_speedFails3_start(V_x,V_n,V_t,B) [V_n>=V_x,V_x>=0,0>=V_t+1] 
* Loop 15: eval_speedFails3_start(V_x,V_n,V_t,B) [0>=V_x+1] 
* Loop 16: eval_speedFails3_start(V_x,V_n,V_t,B) [V_n>=V_x,V_x>=0] 
* Loop 17: eval_speedFails3_start(V_x,V_n,V_t,B) [V_n>=V_x,V_x>=0] 

### Ranking functions of CR eval_speedFails3_start(V_x,V_n,V_t,B) 

#### Partial ranking functions of CR eval_speedFails3_start(V_x,V_n,V_t,B) 


### Resulting Chains:eval_speedFails3_start(V_x,V_n,V_t,B) 
* [17]...
* [16]...
* [15]
* [14]
* [13]
* [12]
* [11]
* [10]


Computing Bounds
=====================================

#### Cost of loops [7] 

 * loop 7:eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B) -> [eval_speedFails3_bb1_in(V_n',V_t',V_0',V__0',B')] 
1
#### Cost of phase [7]:eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B) -> [eval_speedFails3_bb1_in(V_n',V_t',V_0',V__0',B')] 
1*it(7)+0
#### Cost of phase [7]:eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B) -> [eval_speedFails3_bb1_in(V_n',V_t',V_0',V__0',B')] 
1*it(7)+0
#### Cost of phase [7]:eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B) -> [eval_speedFails3_bb1_in(V_n',V_t',V_0',V__0',B')] 
1*it(7)+0
#### Cost of loops [6] 

 * loop 6:eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B) -> [eval_speedFails3_bb1_in(V_n',V_t',V_0',V__0',B')] 
1
#### Cost of phase [6]:eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B) -> [eval_speedFails3_bb1_in(V_n',V_t',V_0',V__0',B')] 
1*it(6)+0
#### Cost of phase [6]:eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B) -> [eval_speedFails3_bb1_in(V_n',V_t',V_0',V__0',B')] 
1*it(6)+0
#### Cost of phase [6]:eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B) -> [eval_speedFails3_bb1_in(V_n',V_t',V_0',V__0',B')] 
1*it(6)+0
#### Cost of chains of eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B):
* Chain [[7]]...: 1*it(7)+0
  with precondition: [V_n>=V__0,V__0>=0,0>=V_0,B=2] 

* Chain [[7],9]: 1*it(7)+0
  with precondition: [B=2,0>=V_0,V_t>=1,V__0>=0,V_n>=V__0] 

* Chain [[7],8]: 1*it(7)+0
  with precondition: [B=2,0>=V_t+1,0>=V_0,V__0>=0,V_n>=V__0] 

* Chain [[6]]...: 1*it(6)+0
  with precondition: [V__0>=0,V_n>=V__0,V_0>=1,B=2] 

* Chain [[6],9]: 1*it(6)+0
  with precondition: [B=2,0>=V_t+1,V_0>=1,V__0>=0,V_n>=V__0] 

* Chain [[6],8]: 1*it(6)+0
  with precondition: [B=2,V_t>=1,V_0>=1,V__0>=0,V_n>=V__0] 

* Chain [9]: 0
  with precondition: [B=2,0>=V__0+1] 

* Chain [8]: 0
  with precondition: [B=2,V__0>=V_n+1] 


#### Cost of chains of eval_speedFails3_start(V_x,V_n,V_t,B):
* Chain [17]...: 1*s(1)+1
  with precondition: [V_x>=0,V_n>=V_x] 

* Chain [16]...: 1*s(2)+1
  with precondition: [V_x>=0,V_n>=V_x] 

* Chain [15]: 1
  with precondition: [0>=V_x+1] 

* Chain [14]: 1*s(3)+1
  with precondition: [0>=V_t+1,V_x>=0,V_n>=V_x] 

* Chain [13]: 1*s(4)+1
  with precondition: [0>=V_t+1,V_x>=0,V_n>=V_x] 

* Chain [12]: 1*s(5)+1
  with precondition: [V_x>=0,V_t>=1,V_n>=V_x] 

* Chain [11]: 1*s(6)+1
  with precondition: [V_x>=0,V_t>=1,V_n>=V_x] 

* Chain [10]: 1
  with precondition: [V_x>=V_n+1] 


Closed-form bounds of eval_speedFails3_start(V_x,V_n,V_t,B): 
-------------------------------------
* Chain [17]... with precondition: [V_x>=0,V_n>=V_x] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [16]... with precondition: [V_x>=0,V_n>=V_x] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [15] with precondition: [0>=V_x+1] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [14] with precondition: [0>=V_t+1,V_x>=0,V_n>=V_x] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [13] with precondition: [0>=V_t+1,V_x>=0,V_n>=V_x] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [12] with precondition: [V_x>=0,V_t>=1,V_n>=V_x] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [11] with precondition: [V_x>=0,V_t>=1,V_n>=V_x] 
    - Lower bound: 1 
    - Complexity: constant
 * Chain [10] with precondition: [V_x>=V_n+1] 
    - Lower bound: 1 
    - Complexity: constant
 
### Partitioned lower bound of eval_speedFails3_start(V_x,V_n,V_t,B): 
* 1 
 if []
Possible lower bounds : [1]
Maximum lower bound complexity: constant

Time statistics: 
-------------------------------------
* Partial evaluation computed in 40 ms.
* Invariants computed in 76 ms.
   - Backward Invariants 46 ms.
   - Transitive Invariants 13 ms.
* Refinement performed in 96 ms.
* Termination proved in 13 ms.
* Upper bounds computed in 110 ms.
   - Equation cost structures 35 ms.
   - Phase cost structures 25 ms.
   - Chain cost structures 43 ms.
   - Solving cost expressions 2 ms.
* Total analysis performed in 390 ms.


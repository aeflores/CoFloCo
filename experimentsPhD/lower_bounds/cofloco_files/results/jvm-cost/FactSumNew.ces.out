
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive : [6/3]
1. non_recursive : [15_normal/3]
2. non_recursive : [2_loop_nexit/2]
3. non_recursive : [12/2]
4. non_recursive : [10/1]
5. non_recursive : [18_normal/4]
6. recursive : [17/2,9/1,pubs/FactSum_factorial(I)I/1]
7. recursive : [14_normal/4,16/3,2_loop/2,3/2]
8. non_recursive : [2/2]
9. non_recursive : [doSum/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into pubs/FactSum_factorial(I)I/1
7. SCC is partially evaluated into 2_loop/2
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into doSum/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations pubs/FactSum_factorial(I)I/1 
* CE 6 is refined into CE [7] 
* CE 5 is refined into CE [8] 


#### Refined cost equations pubs/FactSum_factorial(I)I/1 
* CE 7: pubs/FactSum_factorial(I)I(A) = 9+ pubs/FactSum_factorial(I)I(B)
     [A>=1,A=B+1] 
* CE 8: pubs/FactSum_factorial(I)I(A) = 4
     [A=0] 

### Cost equations --> "Loop" of pubs/FactSum_factorial(I)I/1 
* CEs [8] --> Loop 6 
* CEs [7] --> Loop 7 

#### Loops of pubs/FactSum_factorial(I)I/1 
* Loop 6: pubs/FactSum_factorial(I)I(A) [A=0] 
* Loop 7: pubs/FactSum_factorial(I)I(A)->  pubs/FactSum_factorial(I)I(A')
                  [A>=1,A=A'+1] 

### Ranking functions of CR pubs/FactSum_factorial(I)I(A) 
* RF of phase [7]: [A]

#### Partial ranking functions of CR pubs/FactSum_factorial(I)I(A) 
* Partial RF of phase [7]:
  - RF of loop [7:1]:
    A


### Resulting Chains:pubs/FactSum_factorial(I)I(A) 
* [[7],6]
* [6]


### Specialization of cost equations 2_loop/2 
* CE 4 is refined into CE [9,10] 
* CE 3 is refined into CE [11] 


#### Refined cost equations 2_loop/2 
* CE 9: 2_loop(A,B) = 8+ pubs/FactSum_factorial(I)I(A):[[7],6]+ 2_loop(C,D)
     [A>=1,A=C+1] 
* CE 10: 2_loop(A,B) = 8+ pubs/FactSum_factorial(I)I(C):[6]+ 2_loop(D,E)
     [D+1=0,C=0,A=0] 
* CE 11: 2_loop(A,B) = 2
     [0>=A+1] 

### Cost equations --> "Loop" of 2_loop/2 
* CEs [11] --> Loop 8 
* CEs [9] --> Loop 9 
* CEs [10] --> Loop 10 

#### Loops of 2_loop/2 
* Loop 8: 2_loop(A,B) [0>=A+1] 
* Loop 9: 2_loop(A,B)->  2_loop(A',B')
                  [A>=1,A=A'+1] 
* Loop 10: 2_loop(A,B)->  2_loop(A',B')
                  [A'+1=0,A=0] 

### Ranking functions of CR 2_loop(A,B) 
* RF of phase [9]: [A]

#### Partial ranking functions of CR 2_loop(A,B) 
* Partial RF of phase [9]:
  - RF of loop [9:1]:
    A


### Resulting Chains:2_loop(A,B) 
* [[9],10,8]
* [10,8]
* [8]


### Specialization of cost equations doSum/1 
* CE 2 is refined into CE [12,13,14] 


#### Refined cost equations doSum/1 
* CE 12: doSum(A) = 5+ 2_loop(A,B):[[9],10,8]
     [A>=1,B=0] 
* CE 13: doSum(A) = 5+ 2_loop(B,C):[10,8]
     [C=0,B=0,A=0] 
* CE 14: doSum(A) = 5+ 2_loop(A,B):[8]
     [0>=A+1,B=0] 

### Cost equations --> "Loop" of doSum/1 
* CEs [12] --> Loop 11 
* CEs [14] --> Loop 12 
* CEs [13] --> Loop 13 

#### Loops of doSum/1 
* Loop 11: doSum(A) [A>=1] 
* Loop 12: doSum(A) [0>=A+1] 
* Loop 13: doSum(A) [A=0] 

### Ranking functions of CR doSum(A) 

#### Partial ranking functions of CR doSum(A) 


### Resulting Chains:doSum(A) 
* [13]
* [12]
* [11]


Computing Bounds
=====================================

#### Cost of loops [7] 

 * loop 7:pubs/FactSum_factorial(I)I(A) -> [pubs/FactSum_factorial(I)I(A')] 
9
#### Cost of phase [7]:pubs/FactSum_factorial(I)I(A) -> [pubs/FactSum_factorial(I)I(A')] 
9*it(7)+0
  Such that:it(7) =< A
it(7) =< A-A'
it(7) >= A-A'

#### Cost of chains of pubs/FactSum_factorial(I)I(A):
* Chain [[7],6]: 9*it(7)+4
  Such that:it(7) =< A
it(7) >= A

  with precondition: [A>=1] 

* Chain [6]: 4
  with precondition: [A=0] 


#### Cost of loops [9] 

 * loop 9:2_loop(A,B) -> [2_loop(A',B')] 
9*s(2)+12
  Such that:s(2) =< A
s(2) >= A

#### Cost of phase [9]:2_loop(A,B) -> [2_loop(A',B')] 
12*it(9)+9*s(3)+0
  Such that:it(9) =< A-A'
aux(4) =< A
it(9) =< aux(4)
s(3) =< it(9)*aux(4)
aux(1) =< it(9)
aux(2) >= A
it(9) >= A-A'
aux(1) >= it(9)
s(3) >= aux(1)*aux(2)+aux(1)* (1/2)-aux(1)*aux(1)* (1/2)

#### Cost of chains of 2_loop(A,B):
* Chain [[9],10,8]: 12*it(9)+9*s(3)+14
  Such that:aux(5) =< A
it(9) =< aux(5)
s(3) =< it(9)*aux(5)
aux(1) =< it(9)
aux(6) >= A
aux(6) >= aux(6)
it(9) >= aux(6)
aux(1) >= it(9)
s(3) >= aux(1)*aux(6)+aux(1)* (1/2)-aux(1)*aux(1)* (1/2)

  with precondition: [A>=1] 

* Chain [10,8]: 14
  with precondition: [A=0] 

* Chain [8]: 2
  with precondition: [0>=A+1] 


#### Cost of chains of doSum(A):
* Chain [13]: 19
  with precondition: [A=0] 

* Chain [12]: 7
  with precondition: [0>=A+1] 

* Chain [11]: 12*s(6)+9*s(7)+19
  Such that:s(4) =< A
s(6) =< s(4)
s(7) =< s(6)*s(4)
s(8) =< s(6)
s(5) >= A
s(5) >= s(5)
s(6) >= s(5)
s(8) >= s(6)
s(7) >= s(8)*s(5)+s(8)* (1/2)-s(8)*s(8)* (1/2)

  with precondition: [A>=1] 


Closed-form bounds of doSum(A): 
-------------------------------------
* Chain [13] with precondition: [A=0] 
    - Lower bound: 19 
    - Complexity: constant
 * Chain [12] with precondition: [0>=A+1] 
    - Lower bound: 7 
    - Complexity: constant
 * Chain [11] with precondition: [A>=1] 
    - Lower bound: 33/2*A+19+9/2*A*A 
    - Complexity: n^2
 
### Partitioned lower bound of doSum(A): 
* 7 
 if [0>=A+1]
* 19 
 if [A=0]
* 33/2*A+19+9/2*A*A 
 if [A>=1]
Possible lower bounds : [7,19,33/2*A+19+9/2*A*A]
Maximum lower bound complexity: n^2

Time statistics: 
-------------------------------------
* Partial evaluation computed in 37 ms.
* Invariants computed in 37 ms.
   - Backward Invariants 16 ms.
   - Transitive Invariants 8 ms.
* Refinement performed in 45 ms.
* Termination proved in 10 ms.
* Upper bounds computed in 90 ms.
   - Equation cost structures 20 ms.
   - Phase cost structures 36 ms.
   - Chain cost structures 18 ms.
   - Solving cost expressions 5 ms.
* Total analysis performed in 265 ms.


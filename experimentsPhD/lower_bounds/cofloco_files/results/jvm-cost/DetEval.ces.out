
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive : [4_loop_nexit/6]
1. recursive : [4_loop/6,56/8,6/6]
2. non_recursive : [10/10]
3. non_recursive : [53_normal/9]
4. non_recursive : [7_loop_nexit/5]
5. recursive : [11/5,12/5,13/5,51/7,52/7,54/7,7_loop/5,9/5]
6. non_recursive : [7/8]
7. non_recursive : [55_normal/9]
8. non_recursive : [2/8]
9. non_recursive : [50_normal/9]
10. non_recursive : [15_loop_nexit/3]
11. recursive : [15_loop/3,17/3,74/5]
12. non_recursive : [18_loop_nexit/9]
13. non_recursive : [22_loop_nexit/8]
14. non_recursive : [47/4]
15. non_recursive : [45/2]
16. non_recursive : [46/2]
17. non_recursive : [75/3]
18. non_recursive : [java/lang/Math_abs(D)D/2]
19. recursive : [22_loop/8,26/8,29/10,33/8,34/8,57_normal/10,58/9,70/10]
20. recursive : [18_loop/9,20/9,25/9,69_normal/9,72/11]
21. non_recursive : [21_loop_nexit/13]
22. non_recursive : [28_loop_nexit/10]
23. recursive : [28_loop/10,32/10,36/12,39/10,40/10,59_normal/12,60/11,66/12]
24. non_recursive : [35_loop_nexit/8]
25. non_recursive : [41_loop_nexit/8]
26. recursive : [41_loop/8,43/8,62/10]
27. recursive : [35_loop/8,38/8,61_normal/8,64/10]
28. recursive : [21_loop/13,24/13,31/13,63_normal/13,65_normal/13,68/15]
29. non_recursive : [23/13]
30. non_recursive : [67_normal/14]
31. non_recursive : [19/13]
32. non_recursive : [71_normal/14]
33. non_recursive : [18/13]
34. non_recursive : [73_normal/14]
35. non_recursive : [15/13]
36. non_recursive : [Det_gaussian([[D[I)V/2]
37. non_recursive : [Det_det([[D)D/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is partially evaluated into 4_loop/6
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into 7_loop/5
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into 15_loop/3
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is completely evaluated into other SCCs
16. SCC is completely evaluated into other SCCs
17. SCC is partially evaluated into 75/3
18. SCC is completely evaluated into other SCCs
19. SCC is partially evaluated into 22_loop/8
20. SCC is partially evaluated into 18_loop/9
21. SCC is completely evaluated into other SCCs
22. SCC is completely evaluated into other SCCs
23. SCC is partially evaluated into 28_loop/10
24. SCC is completely evaluated into other SCCs
25. SCC is completely evaluated into other SCCs
26. SCC is partially evaluated into 41_loop/8
27. SCC is partially evaluated into 35_loop/8
28. SCC is partially evaluated into 21_loop/13
29. SCC is completely evaluated into other SCCs
30. SCC is completely evaluated into other SCCs
31. SCC is completely evaluated into other SCCs
32. SCC is completely evaluated into other SCCs
33. SCC is completely evaluated into other SCCs
34. SCC is completely evaluated into other SCCs
35. SCC is completely evaluated into other SCCs
36. SCC is completely evaluated into other SCCs
37. SCC is partially evaluated into Det_det([[D)D/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations 4_loop/6 
* CE 10 is refined into CE [27] 
* CE 9 is refined into CE [28] 


#### Refined cost equations 4_loop/6 
* CE 27: 4_loop(A,A,A,B,C,D) = 15+ 4_loop(A,A,A,E,F,G)
     [A>=D+1,D>=0,D+1=G] 
* CE 28: 4_loop(A,A,A,B,C,A) = 3
     [A>=0] 

### Cost equations --> "Loop" of 4_loop/6 
* CEs [28] --> Loop 26 
* CEs [27] --> Loop 27 

#### Loops of 4_loop/6 
* Loop 26: 4_loop(A,A,A,B,C,A) [A>=0] 
* Loop 27: 4_loop(A,A,A,B,C,D)->  4_loop(A,A,A,A',B',C')
                  [A>=D+1,D>=0,D+1=C'] 

### Ranking functions of CR 4_loop(A,B,C,D,E,F) 
* RF of phase [27]: [A-F,B-F,C-F]

#### Partial ranking functions of CR 4_loop(A,B,C,D,E,F) 
* Partial RF of phase [27]:
  - RF of loop [27:1]:
    A-F
    B-F
    C-F


### Resulting Chains:4_loop(A,B,C,D,E,F) 
* [[27],26]
* [26]


### Specialization of cost equations 7_loop/5 
* CE 14 is refined into CE [29] 
* CE 12 is refined into CE [30] 
* CE 11 is refined into CE [31] 
* CE 13 is refined into CE [32] 


#### Refined cost equations 7_loop/5 
* CE 29: 7_loop(A,A,B,A,C) = 3
     [B+2*A>=1,2*A+1>=B] 
* CE 30: 7_loop(A,A,B,C,D) = 32+ 7_loop(A,A,E,F,G)
     [B+2*F>=3,A>=F,2*F>=B+1,B+E=0,F=C+1] 
* CE 31: 7_loop(A,A,B,C,D) = 27+ 7_loop(A,A,E,F,G)
     [B+2*F>=3,A>=F,2*F>=B+1,B+E=0,F=C+1] 
* CE 32: 7_loop(A,A,B,C,D) = 15+ 7_loop(A,A,B,E,D)
     [B+2*E>=3,A>=E,2*E>=B+1,E=C+1] 

### Cost equations --> "Loop" of 7_loop/5 
* CEs [31] --> Loop 28 
* CEs [30] --> Loop 29 
* CEs [32] --> Loop 30 
* CEs [29] --> Loop 31 

#### Loops of 7_loop/5 
* Loop 28: 7_loop(A,A,B,C,D)->  7_loop(A,A,A',B',C')
                  [B+2*B'>=3,A>=B',2*B'>=B+1,B+A'=0,B'=C+1] 
* Loop 29: 7_loop(A,A,B,C,D)->  7_loop(A,A,A',B',C')
                  [B+2*B'>=3,A>=B',2*B'>=B+1,B+A'=0,B'=C+1] 
* Loop 30: 7_loop(A,A,B,C,D)->  7_loop(A,A,B,A',D)
                  [B+2*A'>=3,A>=A',2*A'>=B+1,A'=C+1] 
* Loop 31: 7_loop(A,A,B,A,C) [B+2*A>=1,2*A+1>=B] 

### Ranking functions of CR 7_loop(A,B,C,D,E) 
* RF of phase [28,29,30]: [A-D,B-D]

#### Partial ranking functions of CR 7_loop(A,B,C,D,E) 
* Partial RF of phase [28,29,30]:
  - RF of loop [28:1,29:1,30:1]:
    A-D
    B-D


### Resulting Chains:7_loop(A,B,C,D,E) 
* [[28,29,30],31]
* [31]


### Specialization of cost equations 15_loop/3 
* CE 4 is refined into CE [33] 
* CE 3 is refined into CE [34] 


#### Refined cost equations 15_loop/3 
* CE 33: 15_loop(A,A,B) = 9+ 15_loop(A,A,C)
     [A>=B+1,B>=0,B+1=C] 
* CE 34: 15_loop(A,A,A) = 3
     [A>=0] 

### Cost equations --> "Loop" of 15_loop/3 
* CEs [34] --> Loop 32 
* CEs [33] --> Loop 33 

#### Loops of 15_loop/3 
* Loop 32: 15_loop(A,A,A) [A>=0] 
* Loop 33: 15_loop(A,A,B)->  15_loop(A,A,A')
                  [A>=B+1,B>=0,B+1=A'] 

### Ranking functions of CR 15_loop(A,B,C) 
* RF of phase [33]: [A-C,B-C]

#### Partial ranking functions of CR 15_loop(A,B,C) 
* Partial RF of phase [33]:
  - RF of loop [33:1]:
    A-C
    B-C


### Resulting Chains:15_loop(A,B,C) 
* [[33],32]
* [32]


### Specialization of cost equations 75/3 
* CE 23 is refined into CE [35] 
* CE 24 is refined into CE [36] 


#### Refined cost equations 75/3 
* CE 35: 75(A,B,C) = 2
     [C>=1] 
* CE 36: 75(A,B,C) = 5
     [0>=C] 

### Cost equations --> "Loop" of 75/3 
* CEs [35] --> Loop 34 
* CEs [36] --> Loop 35 

#### Loops of 75/3 
* Loop 34: 75(A,B,C) [C>=1] 
* Loop 35: 75(A,B,C) [0>=C] 

### Ranking functions of CR 75(A,B,C) 

#### Partial ranking functions of CR 75(A,B,C) 


### Resulting Chains:75(A,B,C) 
* [35]
* [34]


### Specialization of cost equations 22_loop/8 
* CE 17 is refined into CE [37] 
* CE 16 is refined into CE [38,39] 
* CE 15 is refined into CE [40,41] 


#### Refined cost equations 22_loop/8 
* CE 37: 22_loop(A,A,B,C,D,E,F,G) = 3
     [A>=B+1,E>=A,B>=0] 
* CE 38: 22_loop(A,A,B,C,D,E,F,G) = 22+ 75(H,I,J):[35]+ 22_loop(A,A,B,K,L,M,K,L)
     [A>=E+1,A>=B+1,E>=0,B>=0,0>=J,E+1=M] 
* CE 39: 22_loop(A,A,B,C,D,E,F,G) = 22+ 75(H,I,J):[34]+ 22_loop(A,A,B,K,L,M,K,L)
     [A>=E+1,A>=B+1,J>=1,E>=0,B>=0,E+1=M] 
* CE 40: 22_loop(A,A,B,C,D,E,F,G) = 20+ 75(H,I,J):[35]+ 22_loop(A,A,B,C,D,K,L,M)
     [A>=E+1,A>=B+1,E>=0,B>=0,0>=J,E+1=K] 
* CE 41: 22_loop(A,A,B,C,D,E,F,G) = 20+ 75(H,I,J):[34]+ 22_loop(A,A,B,C,D,K,L,M)
     [A>=E+1,A>=B+1,J>=1,E>=0,B>=0,E+1=K] 

### Cost equations --> "Loop" of 22_loop/8 
* CEs [39] --> Loop 36 
* CEs [38] --> Loop 37 
* CEs [41] --> Loop 38 
* CEs [40] --> Loop 39 
* CEs [37] --> Loop 40 

#### Loops of 22_loop/8 
* Loop 36: 22_loop(A,A,B,C,D,E,F,G)->  22_loop(A,A,B,A',B',C',A',B')
                  [A>=E+1,A>=B+1,E>=0,B>=0,E+1=C'] 
* Loop 37: 22_loop(A,A,B,C,D,E,F,G)->  22_loop(A,A,B,A',B',C',A',B')
                  [A>=E+1,A>=B+1,E>=0,B>=0,E+1=C'] 
* Loop 38: 22_loop(A,A,B,C,D,E,F,G)->  22_loop(A,A,B,C,D,A',B',C')
                  [A>=E+1,A>=B+1,E>=0,B>=0,E+1=A'] 
* Loop 39: 22_loop(A,A,B,C,D,E,F,G)->  22_loop(A,A,B,C,D,A',B',C')
                  [A>=E+1,A>=B+1,E>=0,B>=0,E+1=A'] 
* Loop 40: 22_loop(A,A,B,C,D,E,F,G) [A>=B+1,E>=A,B>=0] 

### Ranking functions of CR 22_loop(A,B,C,D,E,F,G,H) 
* RF of phase [36,37,38,39]: [A-F,B-F]

#### Partial ranking functions of CR 22_loop(A,B,C,D,E,F,G,H) 
* Partial RF of phase [36,37,38,39]:
  - RF of loop [36:1,37:1,38:1,39:1]:
    A-F
    B-F


### Resulting Chains:22_loop(A,B,C,D,E,F,G,H) 
* [[36,37,38,39],40]


### Specialization of cost equations 18_loop/9 
* CE 6 is refined into CE [42] 
* CE 5 is refined into CE [43] 


#### Refined cost equations 18_loop/9 
* CE 42: 18_loop(A,A,A,B,C,D,E,F,G) = 13+ 22_loop(A,A,B,H,I,J,F,G):[[36,37,38,39],40]+ 18_loop(A,A,A,K,L,M,N,O,P)
     [A>=B+1,E>=B,N>=A,B>=0,B+1=K,J=0] 
* CE 43: 18_loop(A,A,A,A,B,C,D,E,F) = 3
     [D>=A,A>=0] 

### Cost equations --> "Loop" of 18_loop/9 
* CEs [43] --> Loop 41 
* CEs [42] --> Loop 42 

#### Loops of 18_loop/9 
* Loop 41: 18_loop(A,A,A,A,B,C,D,E,F) [D>=A,A>=0] 
* Loop 42: 18_loop(A,A,A,B,C,D,E,F,G)->  18_loop(A,A,A,A',B',C',D',E',F')
                  [E>=B,A>=B+1,D'>=A,B>=0,B+1=A'] 

### Ranking functions of CR 18_loop(A,B,C,D,E,F,G,H,I) 
* RF of phase [42]: [A-D,B-D,C-D]

#### Partial ranking functions of CR 18_loop(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [42]:
  - RF of loop [42:1]:
    A-D
    B-D
    C-D


### Resulting Chains:18_loop(A,B,C,D,E,F,G,H,I) 
* [[42],41]
* [41]


### Specialization of cost equations 28_loop/10 
* CE 20 is refined into CE [44] 
* CE 19 is refined into CE [45,46] 
* CE 18 is refined into CE [47,48] 


#### Refined cost equations 28_loop/10 
* CE 44: 28_loop(A,A,A,A,B,C,D,E,F,G) = 3
     [A>=B+2,E>=A,B>=0] 
* CE 45: 28_loop(A,A,A,A,B,C,D,E,F,G) = 34+ 75(H,I,J):[35]+ 28_loop(A,A,A,A,B,K,L,M,K,L)
     [A>=E+1,E>=B,A>=B+2,B>=0,0>=J,E+1=M] 
* CE 46: 28_loop(A,A,A,A,B,C,D,E,F,G) = 34+ 75(H,I,J):[34]+ 28_loop(A,A,A,A,B,K,L,M,K,L)
     [A>=E+1,E>=B,A>=B+2,J>=1,B>=0,E+1=M] 
* CE 47: 28_loop(A,A,A,A,B,C,D,E,F,G) = 30+ 75(H,I,J):[35]+ 28_loop(A,A,A,A,B,C,D,K,L,M)
     [A>=E+1,E>=B,A>=B+2,B>=0,0>=J,E+1=K] 
* CE 48: 28_loop(A,A,A,A,B,C,D,E,F,G) = 30+ 75(H,I,J):[34]+ 28_loop(A,A,A,A,B,C,D,K,L,M)
     [A>=E+1,E>=B,A>=B+2,J>=1,B>=0,E+1=K] 

### Cost equations --> "Loop" of 28_loop/10 
* CEs [46] --> Loop 43 
* CEs [45] --> Loop 44 
* CEs [48] --> Loop 45 
* CEs [47] --> Loop 46 
* CEs [44] --> Loop 47 

#### Loops of 28_loop/10 
* Loop 43: 28_loop(A,A,A,A,B,C,D,E,F,G)->  28_loop(A,A,A,A,B,A',B',C',A',B')
                  [A>=E+1,E>=B,A>=B+2,B>=0,E+1=C'] 
* Loop 44: 28_loop(A,A,A,A,B,C,D,E,F,G)->  28_loop(A,A,A,A,B,A',B',C',A',B')
                  [A>=E+1,E>=B,A>=B+2,B>=0,E+1=C'] 
* Loop 45: 28_loop(A,A,A,A,B,C,D,E,F,G)->  28_loop(A,A,A,A,B,C,D,A',B',C')
                  [A>=E+1,E>=B,A>=B+2,B>=0,E+1=A'] 
* Loop 46: 28_loop(A,A,A,A,B,C,D,E,F,G)->  28_loop(A,A,A,A,B,C,D,A',B',C')
                  [A>=E+1,E>=B,A>=B+2,B>=0,E+1=A'] 
* Loop 47: 28_loop(A,A,A,A,B,C,D,E,F,G) [A>=B+2,E>=A,B>=0] 

### Ranking functions of CR 28_loop(A,B,C,D,E,F,G,H,I,J) 
* RF of phase [43,44,45,46]: [A-H,B-H,C-H,D-H]

#### Partial ranking functions of CR 28_loop(A,B,C,D,E,F,G,H,I,J) 
* Partial RF of phase [43,44,45,46]:
  - RF of loop [43:1,44:1,45:1,46:1]:
    A-H
    B-H
    C-H
    D-H


### Resulting Chains:28_loop(A,B,C,D,E,F,G,H,I,J) 
* [[43,44,45,46],47]


### Specialization of cost equations 41_loop/8 
* CE 26 is refined into CE [49] 
* CE 25 is refined into CE [50] 


#### Refined cost equations 41_loop/8 
* CE 49: 41_loop(A,A,A,B,C,D,E,F) = 24+ 41_loop(A,A,A,B,C,D,E,G)
     [A>=F+1,A>=C+1,F>=B+1,C>=B+1,B>=0,F+1=G] 
* CE 50: 41_loop(A,A,A,B,C,D,E,F) = 3
     [A>=C+1,C>=B+1,F>=A,B>=0] 

### Cost equations --> "Loop" of 41_loop/8 
* CEs [50] --> Loop 48 
* CEs [49] --> Loop 49 

#### Loops of 41_loop/8 
* Loop 48: 41_loop(A,A,A,B,C,D,E,F) [A>=C+1,C>=B+1,F>=A,B>=0] 
* Loop 49: 41_loop(A,A,A,B,C,D,E,F)->  41_loop(A,A,A,B,C,D,E,A')
                  [A>=F+1,A>=C+1,F>=B+1,C>=B+1,B>=0,F+1=A'] 

### Ranking functions of CR 41_loop(A,B,C,D,E,F,G,H) 
* RF of phase [49]: [A-H,B-H,C-H]

#### Partial ranking functions of CR 41_loop(A,B,C,D,E,F,G,H) 
* Partial RF of phase [49]:
  - RF of loop [49:1]:
    A-H
    B-H
    C-H


### Resulting Chains:41_loop(A,B,C,D,E,F,G,H) 
* [[49],48]


### Specialization of cost equations 35_loop/8 
* CE 22 is refined into CE [51] 
* CE 21 is refined into CE [52] 


#### Refined cost equations 35_loop/8 
* CE 51: 35_loop(A,A,A,B,C,D,E,F) = 33+ 41_loop(A,A,A,B,C,G,H,I):[[49],48]+ 35_loop(A,A,A,B,J,G,H,K)
     [A>=C+1,C>=B+1,K>=A,B>=0,C+1=J,B+1=I] 
* CE 52: 35_loop(A,A,A,B,C,D,E,F) = 3
     [A>=B+2,C>=A,B>=0] 

### Cost equations --> "Loop" of 35_loop/8 
* CEs [52] --> Loop 50 
* CEs [51] --> Loop 51 

#### Loops of 35_loop/8 
* Loop 50: 35_loop(A,A,A,B,C,D,E,F) [A>=B+2,C>=A,B>=0] 
* Loop 51: 35_loop(A,A,A,B,C,D,E,F)->  35_loop(A,A,A,B,A',B',C',D')
                  [A>=A',A'>=B+2,D'>=A,B>=0,A'=C+1] 

### Ranking functions of CR 35_loop(A,B,C,D,E,F,G,H) 
* RF of phase [51]: [A-E,B-E,C-E]

#### Partial ranking functions of CR 35_loop(A,B,C,D,E,F,G,H) 
* Partial RF of phase [51]:
  - RF of loop [51:1]:
    A-E
    B-E
    C-E


### Resulting Chains:35_loop(A,B,C,D,E,F,G,H) 
* [[51],50]


### Specialization of cost equations 21_loop/13 
* CE 8 is refined into CE [53] 
* CE 7 is refined into CE [54] 


#### Refined cost equations 21_loop/13 
* CE 53: 21_loop(A,A,A,A,B,C,D,E,F,G,H,I,J) = 29+ 28_loop(A,A,A,A,C,K,L,C,G,H):[[43,44,45,46],47]+ 35_loop(A,A,A,C,M,N,I,J):[[51],50]+ 21_loop(A,A,A,A,O,P,Q,R,S,T,U,V,W)
     [A>=C+2,T>=A,C>=0,C+1=P,C+1=M] 
* CE 54: 21_loop(A,A,A,A,B,C,D,E,F,G,H,I,J) = 5
     [C+1>=A,C>=0] 

### Cost equations --> "Loop" of 21_loop/13 
* CEs [54] --> Loop 52 
* CEs [53] --> Loop 53 

#### Loops of 21_loop/13 
* Loop 52: 21_loop(A,A,A,A,B,C,D,E,F,G,H,I,J) [C+1>=A,C>=0] 
* Loop 53: 21_loop(A,A,A,A,B,C,D,E,F,G,H,I,J)->  21_loop(A,A,A,A,A',B',C',D',E',F',G',H',I')
                  [A>=B'+1,F'>=A,B'>=1,B'=C+1] 

### Ranking functions of CR 21_loop(A,B,C,D,E,F,G,H,I,J,K,L,M) 
* RF of phase [53]: [A-F-1,B-F-1,C-F-1,D-F-1]

#### Partial ranking functions of CR 21_loop(A,B,C,D,E,F,G,H,I,J,K,L,M) 
* Partial RF of phase [53]:
  - RF of loop [53:1]:
    A-F-1
    B-F-1
    C-F-1
    D-F-1


### Resulting Chains:21_loop(A,B,C,D,E,F,G,H,I,J,K,L,M) 
* [[53],52]
* [52]


### Specialization of cost equations Det_det([[D)D/1 
* CE 2 is refined into CE [55,56,57] 


#### Refined cost equations Det_det([[D)D/1 
* CE 55: Det_det([[D)D(A) = 37+ 15_loop(A,A,B):[[33],32]+ 18_loop(A,A,A,C,D,E,F,G,H):[[42],41]+ 21_loop(A,A,A,A,I,J,K,L,M,N,O,P,Q):[[53],52]+ 4_loop(A,A,A,R,S,T):[[27],26]+ 7_loop(A,A,U,V,W):[[28,29,30],31]
     [A>=2,W=0,V=0,U=1,T=0,Q=0,P=0,O=0,J=0,I=0,H=0,G=0,F=0,E=0,D=0,C=0,B=0] 
* CE 56: Det_det([[D)D(A) = 37+ 15_loop(B,C,D):[[33],32]+ 18_loop(E,F,G,H,I,J,K,L,M):[[42],41]+ 21_loop(N,O,P,Q,R,S,T,U,V,W,X,Y,Z):[52]+ 4_loop(A1,B1,C1,D1,E1,F1):[[27],26]+ 7_loop(G1,H1,I1,J1,K1):[[28,29,30],31]
     [K1=0,J1=0,I1=1,H1=1,G1=1,F1=0,C1=1,B1=1,A1=1,Z=0,Y=0,X=0,S=0,R=0,Q=1,P=1,O=1,N=1,M=0,L=0,K=0,J=0,I=0,H=0,G=1,F=1,E=1,D=0,C=1,B=1,A=1] 
* CE 57: Det_det([[D)D(A) = 37+ 15_loop(B,C,D):[32]+ 18_loop(E,F,G,H,I,J,K,L,M):[41]+ 21_loop(N,O,P,Q,R,S,T,U,V,W,X,Y,Z):[52]+ 4_loop(A1,B1,C1,D1,E1,F1):[26]+ 7_loop(G1,H1,I1,J1,K1):[31]
     [K1=0,J1=0,I1=1,H1=0,G1=0,F1=0,C1=0,B1=0,A1=0,Z=0,Y=0,X=0,S=0,R=0,Q=0,P=0,O=0,N=0,M=0,L=0,K=0,J=0,I=0,H=0,G=0,F=0,E=0,D=0,C=0,B=0,A=0] 

### Cost equations --> "Loop" of Det_det([[D)D/1 
* CEs [55] --> Loop 54 
* CEs [56] --> Loop 55 
* CEs [57] --> Loop 56 

#### Loops of Det_det([[D)D/1 
* Loop 54: Det_det([[D)D(A) [A>=2] 
* Loop 55: Det_det([[D)D(A) [A=1] 
* Loop 56: Det_det([[D)D(A) [A=0] 

### Ranking functions of CR Det_det([[D)D(A) 

#### Partial ranking functions of CR Det_det([[D)D(A) 


### Resulting Chains:Det_det([[D)D(A) 
* [56]
* [55]
* [54]


Computing Bounds
=====================================

#### Cost of loops [27] 

 * loop 27:4_loop(A,B,C,D,E,F) -> [4_loop(A',B',C',D',E',F')] 
15
#### Cost of phase [27]:4_loop(A,B,C,D,E,F) -> [4_loop(A',B',C',D',E',F')] 
15*it(27)+0
  Such that:it(27) =< A-F
it(27) =< A-F-A'+F'
it(27) =< B-F
it(27) =< B-F-B'+F'
it(27) =< C-F
it(27) =< C-F-C'+F'
it(27) >= A-F-A'+F'
it(27) >= B-F-B'+F'
it(27) >= C-F-C'+F'

#### Cost of chains of 4_loop(A,B,C,D,E,F):
* Chain [[27],26]: 15*it(27)+3
  Such that:it(27) =< C-F
it(27) >= A-F

  with precondition: [A=B,A=C,F>=0,A>=F+1] 

* Chain [26]: 3
  with precondition: [A=B,A=C,A=F,A>=0] 


#### Cost of loops [28,29,30] 

 * loop 28:7_loop(A,B,C,D,E) -> [7_loop(A',B',C',D',E')] 
27
 * loop 29:7_loop(A,B,C,D,E) -> [7_loop(A',B',C',D',E')] 
32
 * loop 30:7_loop(A,B,C,D,E) -> [7_loop(A',B',C',D',E')] 
15
#### Cost of phase [28,29,30]:7_loop(A,B,C,D,E) -> [7_loop(A',B',C',D',E')] 
27*it(28)+32*it(29)+15*it(30)+0
  Such that:it(28)+it(29)+it(30) =< A-D
it(28)+it(29)+it(30) =< A-D-A'+D'
it(28)+it(29)+it(30) =< B-D
it(28)+it(29)+it(30) =< B-D-B'+D'
it(28)+it(29)+it(30) >= A-D-A'+D'
it(28)+it(29)+it(30) >= B-D-B'+D'

#### Cost of chains of 7_loop(A,B,C,D,E):
* Chain [[28,29,30],31]: 27*it(28)+32*it(29)+15*it(30)+3
  Such that:it(30)+it(29)+it(28) =< A-D
it(30)+it(29)+it(28) >= B-D

  with precondition: [A=B,2*D+1>=C,A>=D+1,C+2*D>=1] 

* Chain [31]: 3
  with precondition: [B=A,B=D,2*B+1>=C,C+2*B>=1] 


#### Cost of loops [33] 

 * loop 33:15_loop(A,B,C) -> [15_loop(A',B',C')] 
9
#### Cost of phase [33]:15_loop(A,B,C) -> [15_loop(A',B',C')] 
9*it(33)+0
  Such that:it(33) =< A-C
it(33) =< A-C-A'+C'
it(33) =< B-C
it(33) =< B-C-B'+C'
it(33) >= A-C-A'+C'
it(33) >= B-C-B'+C'

#### Cost of chains of 15_loop(A,B,C):
* Chain [[33],32]: 9*it(33)+3
  Such that:it(33) =< B-C
it(33) >= A-C

  with precondition: [A=B,C>=0,A>=C+1] 

* Chain [32]: 3
  with precondition: [B=A,B=C,B>=0] 


#### Cost of chains of 75(A,B,C):
* Chain [35]: 5
  with precondition: [0>=C] 

* Chain [34]: 2
  with precondition: [C>=1] 


#### Cost of loops [36,37,38,39] 

 * loop 36:22_loop(A,B,C,D,E,F,G,H) -> [22_loop(A',B',C',D',E',F',G',H')] 
24
 * loop 37:22_loop(A,B,C,D,E,F,G,H) -> [22_loop(A',B',C',D',E',F',G',H')] 
27
 * loop 38:22_loop(A,B,C,D,E,F,G,H) -> [22_loop(A',B',C',D',E',F',G',H')] 
22
 * loop 39:22_loop(A,B,C,D,E,F,G,H) -> [22_loop(A',B',C',D',E',F',G',H')] 
25
#### Cost of phase [36,37,38,39]:22_loop(A,B,C,D,E,F,G,H) -> [22_loop(A',B',C',D',E',F',G',H')] 
24*it(36)+27*it(37)+22*it(38)+25*it(39)+0
  Such that:it(36)+it(37)+it(38)+it(39) =< A-F
it(36)+it(37)+it(38)+it(39) =< A-F-A'+F'
it(36)+it(37)+it(38)+it(39) =< B-F
it(36)+it(37)+it(38)+it(39) =< B-F-B'+F'
it(36)+it(37)+it(38)+it(39) >= A-F-A'+F'
it(36)+it(37)+it(38)+it(39) >= B-F-B'+F'

#### Cost of chains of 22_loop(A,B,C,D,E,F,G,H):
* Chain [[36,37,38,39],40]: 24*it(36)+27*it(37)+22*it(38)+25*it(39)+3
  Such that:it(39)+it(38)+it(37)+it(36) =< A-F
it(39)+it(38)+it(37)+it(36) >= A-F

  with precondition: [A=B,C>=0,F>=0,A>=C+1,A>=F+1] 


#### Cost of loops [42] 

 * loop 42:18_loop(A,B,C,D,E,F,G,H,I) -> [18_loop(A',B',C',D',E',F',G',H',I')] 
25*s(8)+22*s(7)+27*s(6)+24*s(5)+16
  Such that:s(5)+s(6)+s(7)+s(8) =< A'
s(5)+s(6)+s(7)+s(8) >= A'

#### Cost of phase [42]:18_loop(A,B,C,D,E,F,G,H,I) -> [18_loop(A',B',C',D',E',F',G',H',I')] 
16*it(42)+25*s(9)+22*s(10)+27*s(11)+24*s(12)+0
  Such that:aux(2) =< A
it(42) =< A-D
it(42) =< A-D-A'+D'
it(42) =< B-D
it(42) =< B-D-B'+D'
it(42) =< C-D
it(42) =< C-D-C'+D'
s(9)+s(10)+s(11)+s(12) =< it(42)*aux(2)
aux(1) >= A
it(42) >= A-D-A'+D'
it(42) >= B-D-B'+D'
it(42) >= C-D-C'+D'
s(9)+s(10)+s(11)+s(12) >= -D+D'
s(9)+s(10)+s(11)+s(12) >= it(42)*aux(1)

#### Cost of chains of 18_loop(A,B,C,D,E,F,G,H,I):
* Chain [[42],41]: 16*it(42)+25*s(9)+22*s(10)+27*s(11)+24*s(12)+3
  Such that:aux(2) =< C
it(42) =< C-D
s(9)+s(10)+s(11)+s(12) =< it(42)*aux(2)
aux(1) >= C
aux(3) >= C-D
it(42) >= aux(3)
s(9)+s(10)+s(11)+s(12) >= aux(3)
s(9)+s(10)+s(11)+s(12) >= it(42)*aux(1)

  with precondition: [A=B,A=C,D>=0,A>=D+1,G>=D] 

* Chain [41]: 3
  with precondition: [A=B,A=C,A=D,A>=0,G>=A] 


#### Cost of loops [43,44,45,46] 

 * loop 43:28_loop(A,B,C,D,E,F,G,H,I,J) -> [28_loop(A',B',C',D',E',F',G',H',I',J')] 
36
 * loop 44:28_loop(A,B,C,D,E,F,G,H,I,J) -> [28_loop(A',B',C',D',E',F',G',H',I',J')] 
39
 * loop 45:28_loop(A,B,C,D,E,F,G,H,I,J) -> [28_loop(A',B',C',D',E',F',G',H',I',J')] 
32
 * loop 46:28_loop(A,B,C,D,E,F,G,H,I,J) -> [28_loop(A',B',C',D',E',F',G',H',I',J')] 
35
#### Cost of phase [43,44,45,46]:28_loop(A,B,C,D,E,F,G,H,I,J) -> [28_loop(A',B',C',D',E',F',G',H',I',J')] 
36*it(43)+39*it(44)+32*it(45)+35*it(46)+0
  Such that:it(43)+it(44)+it(45)+it(46) =< A-H
it(43)+it(44)+it(45)+it(46) =< A-H-A'+H'
it(43)+it(44)+it(45)+it(46) =< B-H
it(43)+it(44)+it(45)+it(46) =< B-H-B'+H'
it(43)+it(44)+it(45)+it(46) =< C-H
it(43)+it(44)+it(45)+it(46) =< C-H-C'+H'
it(43)+it(44)+it(45)+it(46) =< D-H
it(43)+it(44)+it(45)+it(46) =< D-H-D'+H'
it(43)+it(44)+it(45)+it(46) >= A-H-A'+H'
it(43)+it(44)+it(45)+it(46) >= B-H-B'+H'
it(43)+it(44)+it(45)+it(46) >= C-H-C'+H'
it(43)+it(44)+it(45)+it(46) >= D-H-D'+H'

#### Cost of chains of 28_loop(A,B,C,D,E,F,G,H,I,J):
* Chain [[43,44,45,46],47]: 36*it(43)+39*it(44)+32*it(45)+35*it(46)+3
  Such that:it(46)+it(45)+it(44)+it(43) =< B-H
it(46)+it(45)+it(44)+it(43) >= C-H

  with precondition: [A=B,A=C,A=D,E>=0,A>=E+2,H>=E,A>=H+1] 


#### Cost of loops [49] 

 * loop 49:41_loop(A,B,C,D,E,F,G,H) -> [41_loop(A',B',C',D',E',F',G',H')] 
24
#### Cost of phase [49]:41_loop(A,B,C,D,E,F,G,H) -> [41_loop(A',B',C',D',E',F',G',H')] 
24*it(49)+0
  Such that:it(49) =< A-H
it(49) =< A-H-A'+H'
it(49) =< B-H
it(49) =< B-H-B'+H'
it(49) =< C-H
it(49) =< C-H-C'+H'
it(49) >= A-H-A'+H'
it(49) >= B-H-B'+H'
it(49) >= C-H-C'+H'

#### Cost of chains of 41_loop(A,B,C,D,E,F,G,H):
* Chain [[49],48]: 24*it(49)+3
  Such that:it(49) =< C-H
it(49) >= A-H

  with precondition: [A=B,A=C,D>=0,E>=D+1,H>=D+1,A>=E+1,A>=H+1] 


#### Cost of loops [51] 

 * loop 51:35_loop(A,B,C,D,E,F,G,H) -> [35_loop(A',B',C',D',E',F',G',H')] 
24*s(14)+36
  Such that:s(14) =< -D+C'-1
s(14) >= A-D-1

#### Cost of phase [51]:35_loop(A,B,C,D,E,F,G,H) -> [35_loop(A',B',C',D',E',F',G',H')] 
36*it(51)+24*s(15)+0
  Such that:aux(5) =< A-D-1
it(51) =< A-E
it(51) =< A-E-A'+E'
it(51) =< B-E
it(51) =< B-E-B'+E'
it(51) =< C-E
it(51) =< C-E-C'+E'
s(15) =< it(51)*aux(5)
aux(4) >= A-D-1
it(51) >= A-E-A'+E'
it(51) >= B-E-B'+E'
it(51) >= C-E-C'+E'
s(15) >= -E+E'
s(15) >= it(51)*aux(4)

#### Cost of chains of 35_loop(A,B,C,D,E,F,G,H):
* Chain [[51],50]: 36*it(51)+24*s(15)+3
  Such that:aux(5) =< C-D-1
it(51) =< C-E
s(15) =< it(51)*aux(5)
aux(4) >= A-D-1
aux(6) >= A-E
it(51) >= aux(6)
s(15) >= aux(6)
s(15) >= it(51)*aux(4)

  with precondition: [A=B,A=C,D>=0,E>=D+1,A>=E+1] 


#### Cost of loops [53] 

 * loop 53:21_loop(A,B,C,D,E,F,G,H,I,J,K,L,M) -> [21_loop(A',B',C',D',E',F',G',H',I',J',K',L',M')] 
35*s(28)+32*s(27)+39*s(26)+36*s(25)+36*s(31)+24*s(32)+35
  Such that:s(25)+s(26)+s(27)+s(28) =< D'-F'+1
s(29) =< D'-F'
s(31) =< s(29)
s(32) =< s(31)*s(29)
s(25)+s(26)+s(27)+s(28) >= D'-F'+1
s(30) >= D'-F'
s(30) >= s(30)
s(31) >= s(30)
s(32) >= s(30)
s(32) >= s(31)*s(30)

#### Cost of phase [53]:21_loop(A,B,C,D,E,F,G,H,I,J,K,L,M) -> [21_loop(A',B',C',D',E',F',G',H',I',J',K',L',M')] 
35*it(53)+35*s(33)+32*s(34)+39*s(35)+36*s(36)+36*s(37)+24*s(38)+0
  Such that:it(53) =< A-F-A'+F'
it(53) =< B-F-1
it(53) =< B-F-B'+F'
it(53) =< C-F-1
it(53) =< C-F-C'+F'
it(53) =< D-F-1
it(53) =< D-F-D'+F'
aux(15) =< A-F-1
it(53) =< aux(15)
aux(14) =< aux(15)+1
aux(13) =< aux(15)
aux(9) =< it(53)
s(33)+s(34)+s(35)+s(36) =< it(53)*aux(14)
s(40) =< it(53)*aux(13)
s(37) =< s(40)
s(38) =< s(37)*aux(15)
s(30) >= 1
aux(10) >= A-F-1
aux(12) >= A-F
it(53) >= A-F-A'+F'
it(53) >= B-F-B'+F'
it(53) >= C-F-C'+F'
it(53) >= D-F-D'+F'
aux(9) >= it(53)
s(33)+s(34)+s(35)+s(36) >= aux(9)*aux(12)+aux(9)* (1/2)-aux(9)*aux(9)* (1/2)
s(39) >= aux(9)*aux(10)+aux(9)* (1/2)-aux(9)*aux(9)* (1/2)
s(39) >= s(39)
s(30) >= s(30)
s(37) >= s(39)
s(38) >= s(39)
s(38) >= s(37)*s(30)

#### Cost of chains of 21_loop(A,B,C,D,E,F,G,H,I,J,K,L,M):
* Chain [[53],52]: 35*it(53)+35*s(33)+32*s(34)+39*s(35)+36*s(36)+36*s(37)+24*s(38)+5
  Such that:aux(16) =< C-F-1
it(53) =< aux(16)
aux(14) =< aux(16)+1
aux(13) =< aux(16)
aux(9) =< it(53)
s(33)+s(34)+s(35)+s(36) =< it(53)*aux(14)
s(40) =< it(53)*aux(13)
s(37) =< s(40)
s(38) =< s(37)*aux(16)
s(30) >= 1
aux(12) >= A-F
aux(17) >= A-F-1
aux(17) >= aux(17)
it(53) >= aux(17)
aux(9) >= it(53)
s(33)+s(34)+s(35)+s(36) >= aux(9)*aux(12)+aux(9)* (1/2)-aux(9)*aux(9)* (1/2)
s(39) >= aux(9)*aux(17)+aux(9)* (1/2)-aux(9)*aux(9)* (1/2)
s(39) >= s(39)
s(30) >= s(30)
s(37) >= s(39)
s(38) >= s(39)
s(38) >= s(37)*s(30)

  with precondition: [A=B,A=C,A=D,F>=0,A>=F+2] 

* Chain [52]: 5
  with precondition: [A=B,A=C,A=D,F>=0,F+1>=A] 


#### Cost of chains of Det_det([[D)D(A):
* Chain [56]: 54
  with precondition: [A=0] 

* Chain [55]: 40*s(41)+25*s(46)+22*s(47)+27*s(48)+24*s(49)+15*s(51)+32*s(52)+27*s(53)+54
  Such that:aux(18) =< 1
s(51)+s(52)+s(53) =< aux(18)
s(41) =< aux(18)
s(46)+s(47)+s(48)+s(49) =< s(41)*aux(18)
aux(19) >= 1
s(41) >= aux(19)
aux(19) >= aux(19)
s(51)+s(52)+s(53) >= aux(19)
s(46)+s(47)+s(48)+s(49) >= aux(19)
s(46)+s(47)+s(48)+s(49) >= s(41)*aux(19)

  with precondition: [A=1] 

* Chain [54]: 40*s(54)+25*s(59)+22*s(60)+27*s(61)+24*s(62)+35*s(67)+35*s(71)+32*s(72)+39*s(73)+36*s(74)+36*s(77)+24*s(78)+15*s(80)+32*s(81)+27*s(82)+54
  Such that:s(63) =< A-1
aux(20) =< A
s(80)+s(81)+s(82) =< aux(20)
s(54) =< aux(20)
s(67) =< s(63)
s(68) =< s(63)+1
s(69) =< s(63)
s(70) =< s(67)
s(71)+s(72)+s(73)+s(74) =< s(67)*s(68)
s(75) =< s(67)*s(69)
s(77) =< s(75)
s(78) =< s(77)*s(63)
s(59)+s(60)+s(61)+s(62) =< s(54)*aux(20)
s(64) >= 1
s(66) >= A-1
aux(21) >= A
s(54) >= aux(21)
aux(21) >= aux(21)
s(80)+s(81)+s(82) >= aux(21)
s(66) >= s(66)
s(67) >= s(66)
s(70) >= s(67)
s(71)+s(72)+s(73)+s(74) >= s(70)*aux(21)+s(70)* (1/2)-s(70)*s(70)* (1/2)
s(76) >= s(70)*s(66)+s(70)* (1/2)-s(70)*s(70)* (1/2)
s(76) >= s(76)
s(64) >= s(64)
s(77) >= s(76)
s(78) >= s(76)
s(78) >= s(77)*s(64)
s(59)+s(60)+s(61)+s(62) >= aux(21)
s(59)+s(60)+s(61)+s(62) >= s(54)*aux(21)

  with precondition: [A>=2] 


Closed-form bounds of Det_det([[D)D(A): 
-------------------------------------
* Chain [56] with precondition: [A=0] 
    - Lower bound: 54 
    - Complexity: constant
 * Chain [55] with precondition: [A=1] 
    - Lower bound: 131 
    - Complexity: constant
 * Chain [54] with precondition: [A>=2] 
    - Lower bound: 65*A-65+ (55*A+54+22*A*A+nat(A/2-1/2+ (A-1)*A+ (A-1)* (-A/2+1/2))*32)+ (30*A-30)* (A-1) 
    - Complexity: n^2
 
### Partitioned lower bound of Det_det([[D)D(A): 
* 54 
 if [A=0]
* 131 
 if [A=1]
* 65*A-65+ (55*A+54+22*A*A+nat(A/2-1/2+ (A-1)*A+ (A-1)* (-A/2+1/2))*32)+ (30*A-30)* (A-1) 
 if [A>=2]
Possible lower bounds : [54,131,65*A-65+ (55*A+54+22*A*A+nat(A/2-1/2+ (A-1)*A+ (A-1)* (-A/2+1/2))*32)+ (30*A-30)* (A-1)]
Maximum lower bound complexity: n^2

Time statistics: 
-------------------------------------
* Partial evaluation computed in 878 ms.
* Invariants computed in 587 ms.
   - Backward Invariants 205 ms.
   - Transitive Invariants 160 ms.
* Refinement performed in 717 ms.
* Termination proved in 293 ms.
* Upper bounds computed in 1220 ms.
   - Equation cost structures 293 ms.
   - Phase cost structures 710 ms.
   - Chain cost structures 291 ms.
   - Solving cost expressions 32 ms.
* Total analysis performed in 4426 ms.



Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive : [4_loop_nexit/6]
1. non_recursive : [8_loop_nexit/6]
2. recursive : [12/6,59/8,8_loop/6]
3. recursive : [4_loop/6,58_normal/6,6/6,61/8]
4. non_recursive : [13/8]
5. non_recursive : [56_normal/8]
6. non_recursive : [14_loop_nexit/6]
7. recursive : [14_loop/6,16/6,55/8]
8. non_recursive : [7_loop_nexit/7]
9. recursive : [10/7,54_normal/7,57/8,7_loop/7]
10. non_recursive : [7/7]
11. non_recursive : [60_normal/8]
12. non_recursive : [2/7]
13. non_recursive : [53_normal/8]
14. non_recursive : [18_loop_nexit/3]
15. recursive : [18_loop/3,20/3,79/5]
16. non_recursive : [21_loop_nexit/9]
17. non_recursive : [25_loop_nexit/8]
18. recursive : [25_loop/8,29/8,32/10,36/8,37/8,62_normal/10,63/9,75/10]
19. recursive : [21_loop/9,23/9,28/9,74_normal/9,77/11]
20. non_recursive : [24_loop_nexit/13]
21. non_recursive : [31_loop_nexit/10]
22. recursive : [31_loop/10,35/10,39/12,42/10,43/10,64_normal/12,65/11,71/12]
23. non_recursive : [38_loop_nexit/8]
24. non_recursive : [44_loop_nexit/8]
25. recursive : [44_loop/8,46/8,67/10]
26. recursive : [38_loop/8,41/8,66_normal/8,69/10]
27. recursive : [24_loop/13,27/13,34/13,68_normal/13,70_normal/13,73/15]
28. non_recursive : [26/13]
29. non_recursive : [72_normal/14]
30. non_recursive : [22/13]
31. non_recursive : [76_normal/14]
32. non_recursive : [21/13]
33. non_recursive : [78_normal/14]
34. non_recursive : [18/13]
35. non_recursive : [LinearEq_gaussian([[D[I)V/2]
36. non_recursive : [LinearEq_solve([[D[D[I)[D/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into 8_loop/6
3. SCC is partially evaluated into 4_loop/6
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into 14_loop/6
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into 7_loop/7
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is partially evaluated into 18_loop/3
16. SCC is completely evaluated into other SCCs
17. SCC is completely evaluated into other SCCs
18. SCC is partially evaluated into 25_loop/8
19. SCC is partially evaluated into 21_loop/9
20. SCC is completely evaluated into other SCCs
21. SCC is completely evaluated into other SCCs
22. SCC is partially evaluated into 31_loop/10
23. SCC is completely evaluated into other SCCs
24. SCC is completely evaluated into other SCCs
25. SCC is partially evaluated into 44_loop/8
26. SCC is partially evaluated into 38_loop/8
27. SCC is partially evaluated into 24_loop/13
28. SCC is completely evaluated into other SCCs
29. SCC is completely evaluated into other SCCs
30. SCC is completely evaluated into other SCCs
31. SCC is completely evaluated into other SCCs
32. SCC is completely evaluated into other SCCs
33. SCC is completely evaluated into other SCCs
34. SCC is completely evaluated into other SCCs
35. SCC is completely evaluated into other SCCs
36. SCC is partially evaluated into LinearEq_solve([[D[D[I)[D/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations 8_loop/6 
* CE 22 is refined into CE [27] 
* CE 21 is refined into CE [28] 


#### Refined cost equations 8_loop/6 
* CE 27: 8_loop(A,B,C,B,D,E) = 26+ 8_loop(A,B,C,B,D,F)
     [B>=E+1,E>=D+1,D>=0,C>=0,E+1=F] 
* CE 28: 8_loop(A,B,C,B,D,E) = 3
     [B>=D+2,E>=B,D>=0,C>=0] 

### Cost equations --> "Loop" of 8_loop/6 
* CEs [28] --> Loop 26 
* CEs [27] --> Loop 27 

#### Loops of 8_loop/6 
* Loop 26: 8_loop(A,B,C,B,D,E) [B>=D+2,E>=B,D>=0,C>=0] 
* Loop 27: 8_loop(A,B,C,B,D,E)->  8_loop(A,B,C,B,D,A')
                  [B>=E+1,E>=D+1,D>=0,C>=0,E+1=A'] 

### Ranking functions of CR 8_loop(A,B,C,D,E,F) 
* RF of phase [27]: [B-F,D-F]

#### Partial ranking functions of CR 8_loop(A,B,C,D,E,F) 
* Partial RF of phase [27]:
  - RF of loop [27:1]:
    B-F
    D-F


### Resulting Chains:8_loop(A,B,C,D,E,F) 
* [[27],26]


### Specialization of cost equations 4_loop/6 
* CE 10 is refined into CE [29] 
* CE 9 is refined into CE [30] 


#### Refined cost equations 4_loop/6 
* CE 29: 4_loop(A,B,C,B,D,E) = 11+ 8_loop(A,B,C,B,D,F):[[27],26]+ 4_loop(A,B,C,B,G,H)
     [B>=D+2,H>=B,D>=0,C>=0,D+1=G,D+1=F] 
* CE 30: 4_loop(A,B,C,B,D,E) = 5
     [D+1>=B,D>=0,C>=0] 

### Cost equations --> "Loop" of 4_loop/6 
* CEs [30] --> Loop 28 
* CEs [29] --> Loop 29 

#### Loops of 4_loop/6 
* Loop 28: 4_loop(A,B,C,B,D,E) [D+1>=B,D>=0,C>=0] 
* Loop 29: 4_loop(A,B,C,B,D,E)->  4_loop(A,B,C,B,A',B')
                  [B>=A'+1,B'>=B,A'>=1,C>=0,A'=D+1] 

### Ranking functions of CR 4_loop(A,B,C,D,E,F) 
* RF of phase [29]: [B-E-1,D-E-1]

#### Partial ranking functions of CR 4_loop(A,B,C,D,E,F) 
* Partial RF of phase [29]:
  - RF of loop [29:1]:
    B-E-1
    D-E-1


### Resulting Chains:4_loop(A,B,C,D,E,F) 
* [[29],28]
* [28]


### Specialization of cost equations 14_loop/6 
* CE 24 is refined into CE [31] 
* CE 23 is refined into CE [32] 


#### Refined cost equations 14_loop/6 
* CE 31: 14_loop(A,B,C,C,D,E) = 22+ 14_loop(A,B,C,C,D,F)
     [C>=E+1,E>=D+1,D>=0,B>=0,E+1=F] 
* CE 32: 14_loop(A,B,C,C,D,E) = 3
     [C>=D+2,E>=C,D>=0,B>=0] 

### Cost equations --> "Loop" of 14_loop/6 
* CEs [32] --> Loop 30 
* CEs [31] --> Loop 31 

#### Loops of 14_loop/6 
* Loop 30: 14_loop(A,B,C,C,D,E) [C>=D+2,E>=C,D>=0,B>=0] 
* Loop 31: 14_loop(A,B,C,C,D,E)->  14_loop(A,B,C,C,D,A')
                  [C>=E+1,E>=D+1,D>=0,B>=0,E+1=A'] 

### Ranking functions of CR 14_loop(A,B,C,D,E,F) 
* RF of phase [31]: [C-F,D-F]

#### Partial ranking functions of CR 14_loop(A,B,C,D,E,F) 
* Partial RF of phase [31]:
  - RF of loop [31:1]:
    C-F
    D-F


### Resulting Chains:14_loop(A,B,C,D,E,F) 
* [[31],30]


### Specialization of cost equations 7_loop/7 
* CE 12 is refined into CE [33] 
* CE 11 is refined into CE [34] 


#### Refined cost equations 7_loop/7 
* CE 33: 7_loop(A,B,C,B,B,D,E) = 29+ 14_loop(A,C,B,B,D,F):[[31],30]+ 7_loop(A,B,C,B,B,G,H)
     [B>=D+2,H>=B,D>=0,C>=0,D=G+1,D+1=F] 
* CE 34: 7_loop(A,B,C,B,B,D,E) = 2
     [B>=D+2,C>=0,0>=D+1] 

### Cost equations --> "Loop" of 7_loop/7 
* CEs [34] --> Loop 32 
* CEs [33] --> Loop 33 

#### Loops of 7_loop/7 
* Loop 32: 7_loop(A,B,C,B,B,D,E) [B>=D+2,C>=0,0>=D+1] 
* Loop 33: 7_loop(A,B,C,B,B,D,E)->  7_loop(A,B,C,B,B,A',B')
                  [B>=A'+3,B'>=B,A'+1>=0,C>=0,A'+1=D] 

### Ranking functions of CR 7_loop(A,B,C,D,E,F,G) 
* RF of phase [33]: [F+1]

#### Partial ranking functions of CR 7_loop(A,B,C,D,E,F,G) 
* Partial RF of phase [33]:
  - RF of loop [33:1]:
    F+1


### Resulting Chains:7_loop(A,B,C,D,E,F,G) 
* [[33],32]
* [32]


### Specialization of cost equations 18_loop/3 
* CE 4 is refined into CE [35] 
* CE 3 is refined into CE [36] 


#### Refined cost equations 18_loop/3 
* CE 35: 18_loop(A,A,B) = 9+ 18_loop(A,A,C)
     [A>=B+1,B>=0,B+1=C] 
* CE 36: 18_loop(A,A,A) = 3
     [A>=0] 

### Cost equations --> "Loop" of 18_loop/3 
* CEs [36] --> Loop 34 
* CEs [35] --> Loop 35 

#### Loops of 18_loop/3 
* Loop 34: 18_loop(A,A,A) [A>=0] 
* Loop 35: 18_loop(A,A,B)->  18_loop(A,A,A')
                  [A>=B+1,B>=0,B+1=A'] 

### Ranking functions of CR 18_loop(A,B,C) 
* RF of phase [35]: [A-C,B-C]

#### Partial ranking functions of CR 18_loop(A,B,C) 
* Partial RF of phase [35]:
  - RF of loop [35:1]:
    A-C
    B-C


### Resulting Chains:18_loop(A,B,C) 
* [[35],34]
* [34]


### Specialization of cost equations 25_loop/8 
* CE 15 is refined into CE [37] 
* CE 14 is refined into CE [38] 
* CE 13 is refined into CE [39] 


#### Refined cost equations 25_loop/8 
* CE 37: 25_loop(A,B,C,D,E,F,G,H) = 3
     [B>=C+1,F>=B,C>=0] 
* CE 38: 25_loop(A,B,C,D,E,F,G,H) = 28+ 25_loop(A,B,C,I,J,K,I,J)
     [B>=F+1,B>=C+1,F>=0,C>=0,F+1=K] 
* CE 39: 25_loop(A,B,C,D,E,F,G,H) = 26+ 25_loop(A,B,C,D,E,I,J,K)
     [B>=F+1,B>=C+1,F>=0,C>=0,F+1=I] 

### Cost equations --> "Loop" of 25_loop/8 
* CEs [38] --> Loop 36 
* CEs [39] --> Loop 37 
* CEs [37] --> Loop 38 

#### Loops of 25_loop/8 
* Loop 36: 25_loop(A,B,C,D,E,F,G,H)->  25_loop(A,B,C,A',B',C',A',B')
                  [B>=F+1,B>=C+1,F>=0,C>=0,F+1=C'] 
* Loop 37: 25_loop(A,B,C,D,E,F,G,H)->  25_loop(A,B,C,D,E,F',G',H')
                  [B>=F+1,B>=C+1,F>=0,C>=0,F+1=F'] 
* Loop 38: 25_loop(A,B,C,D,E,F,G,H) [B>=C+1,F>=B,C>=0] 

### Ranking functions of CR 25_loop(A,B,C,D,E,F,G,H) 
* RF of phase [36,37]: [B-F]

#### Partial ranking functions of CR 25_loop(A,B,C,D,E,F,G,H) 
* Partial RF of phase [36,37]:
  - RF of loop [36:1,37:1]:
    B-F


### Resulting Chains:25_loop(A,B,C,D,E,F,G,H) 
* [[36,37],38]


### Specialization of cost equations 21_loop/9 
* CE 6 is refined into CE [40] 
* CE 5 is refined into CE [41] 


#### Refined cost equations 21_loop/9 
* CE 40: 21_loop(A,B,B,C,D,E,F,G,H) = 13+ 25_loop(A,B,C,I,J,K,G,H):[[36,37],38]+ 21_loop(A,B,B,L,M,N,O,P,Q)
     [B>=C+1,F>=C,O>=B,C>=0,C+1=L,K=0] 
* CE 41: 21_loop(A,B,B,B,C,D,E,F,G) = 3
     [E>=B,B>=0] 

### Cost equations --> "Loop" of 21_loop/9 
* CEs [41] --> Loop 39 
* CEs [40] --> Loop 40 

#### Loops of 21_loop/9 
* Loop 39: 21_loop(A,B,B,B,C,D,E,F,G) [E>=B,B>=0] 
* Loop 40: 21_loop(A,B,B,C,D,E,F,G,H)->  21_loop(A,B,B,A',B',C',D',E',F')
                  [F>=C,B>=C+1,D'>=B,C>=0,C+1=A'] 

### Ranking functions of CR 21_loop(A,B,C,D,E,F,G,H,I) 
* RF of phase [40]: [B-D,C-D]

#### Partial ranking functions of CR 21_loop(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [40]:
  - RF of loop [40:1]:
    B-D
    C-D


### Resulting Chains:21_loop(A,B,C,D,E,F,G,H,I) 
* [[40],39]
* [39]


### Specialization of cost equations 31_loop/10 
* CE 18 is refined into CE [42] 
* CE 17 is refined into CE [43] 
* CE 16 is refined into CE [44] 


#### Refined cost equations 31_loop/10 
* CE 42: 31_loop(A,B,B,B,C,D,E,F,G,H) = 3
     [B>=C+2,F>=B,C>=0] 
* CE 43: 31_loop(A,B,B,B,C,D,E,F,G,H) = 40+ 31_loop(A,B,B,B,C,I,J,K,I,J)
     [B>=F+1,F>=C,B>=C+2,C>=0,F+1=K] 
* CE 44: 31_loop(A,B,B,B,C,D,E,F,G,H) = 36+ 31_loop(A,B,B,B,C,D,E,I,J,K)
     [B>=F+1,F>=C,B>=C+2,C>=0,F+1=I] 

### Cost equations --> "Loop" of 31_loop/10 
* CEs [43] --> Loop 41 
* CEs [44] --> Loop 42 
* CEs [42] --> Loop 43 

#### Loops of 31_loop/10 
* Loop 41: 31_loop(A,B,B,B,C,D,E,F,G,H)->  31_loop(A,B,B,B,C,A',B',C',A',B')
                  [B>=F+1,F>=C,B>=C+2,C>=0,F+1=C'] 
* Loop 42: 31_loop(A,B,B,B,C,D,E,F,G,H)->  31_loop(A,B,B,B,C,D,E,A',B',C')
                  [B>=F+1,F>=C,B>=C+2,C>=0,F+1=A'] 
* Loop 43: 31_loop(A,B,B,B,C,D,E,F,G,H) [B>=C+2,F>=B,C>=0] 

### Ranking functions of CR 31_loop(A,B,C,D,E,F,G,H,I,J) 
* RF of phase [41,42]: [B-H,C-H,D-H]

#### Partial ranking functions of CR 31_loop(A,B,C,D,E,F,G,H,I,J) 
* Partial RF of phase [41,42]:
  - RF of loop [41:1,42:1]:
    B-H
    C-H
    D-H


### Resulting Chains:31_loop(A,B,C,D,E,F,G,H,I,J) 
* [[41,42],43]


### Specialization of cost equations 44_loop/8 
* CE 26 is refined into CE [45] 
* CE 25 is refined into CE [46] 


#### Refined cost equations 44_loop/8 
* CE 45: 44_loop(A,B,B,C,D,E,F,G) = 24+ 44_loop(A,B,B,C,D,E,F,H)
     [B>=G+1,B>=D+1,G>=C+1,D>=C+1,C>=0,G+1=H] 
* CE 46: 44_loop(A,B,B,C,D,E,F,G) = 3
     [B>=D+1,D>=C+1,G>=B,C>=0] 

### Cost equations --> "Loop" of 44_loop/8 
* CEs [46] --> Loop 44 
* CEs [45] --> Loop 45 

#### Loops of 44_loop/8 
* Loop 44: 44_loop(A,B,B,C,D,E,F,G) [B>=D+1,D>=C+1,G>=B,C>=0] 
* Loop 45: 44_loop(A,B,B,C,D,E,F,G)->  44_loop(A,B,B,C,D,E,F,A')
                  [B>=G+1,B>=D+1,G>=C+1,D>=C+1,C>=0,G+1=A'] 

### Ranking functions of CR 44_loop(A,B,C,D,E,F,G,H) 
* RF of phase [45]: [B-H,C-H]

#### Partial ranking functions of CR 44_loop(A,B,C,D,E,F,G,H) 
* Partial RF of phase [45]:
  - RF of loop [45:1]:
    B-H
    C-H


### Resulting Chains:44_loop(A,B,C,D,E,F,G,H) 
* [[45],44]


### Specialization of cost equations 38_loop/8 
* CE 20 is refined into CE [47] 
* CE 19 is refined into CE [48] 


#### Refined cost equations 38_loop/8 
* CE 47: 38_loop(A,B,B,C,D,E,F,G) = 33+ 44_loop(A,B,B,C,D,H,I,J):[[45],44]+ 38_loop(A,B,B,C,K,H,I,L)
     [B>=D+1,D>=C+1,L>=B,C>=0,D+1=K,C+1=J] 
* CE 48: 38_loop(A,B,B,C,D,E,F,G) = 3
     [B>=C+2,D>=B,C>=0] 

### Cost equations --> "Loop" of 38_loop/8 
* CEs [48] --> Loop 46 
* CEs [47] --> Loop 47 

#### Loops of 38_loop/8 
* Loop 46: 38_loop(A,B,B,C,D,E,F,G) [B>=C+2,D>=B,C>=0] 
* Loop 47: 38_loop(A,B,B,C,D,E,F,G)->  38_loop(A,B,B,C,A',B',C',D')
                  [B>=A',A'>=C+2,D'>=B,C>=0,A'=D+1] 

### Ranking functions of CR 38_loop(A,B,C,D,E,F,G,H) 
* RF of phase [47]: [B-E,C-E]

#### Partial ranking functions of CR 38_loop(A,B,C,D,E,F,G,H) 
* Partial RF of phase [47]:
  - RF of loop [47:1]:
    B-E
    C-E


### Resulting Chains:38_loop(A,B,C,D,E,F,G,H) 
* [[47],46]


### Specialization of cost equations 24_loop/13 
* CE 8 is refined into CE [49] 
* CE 7 is refined into CE [50] 


#### Refined cost equations 24_loop/13 
* CE 49: 24_loop(A,B,B,B,C,D,E,F,G,H,I,J,K) = 29+ 31_loop(A,B,B,B,D,L,M,D,H,I):[[41,42],43]+ 38_loop(A,B,B,D,N,O,J,K):[[47],46]+ 24_loop(A,B,B,B,P,Q,R,S,T,U,V,W,X)
     [B>=D+2,U>=B,D>=0,D+1=Q,D+1=N] 
* CE 50: 24_loop(A,B,B,B,C,D,E,F,G,H,I,J,K) = 5
     [D+1>=B,D>=0] 

### Cost equations --> "Loop" of 24_loop/13 
* CEs [50] --> Loop 48 
* CEs [49] --> Loop 49 

#### Loops of 24_loop/13 
* Loop 48: 24_loop(A,B,B,B,C,D,E,F,G,H,I,J,K) [D+1>=B,D>=0] 
* Loop 49: 24_loop(A,B,B,B,C,D,E,F,G,H,I,J,K)->  24_loop(A,B,B,B,A',B',C',D',E',F',G',H',I')
                  [B>=B'+1,F'>=B,B'>=1,B'=D+1] 

### Ranking functions of CR 24_loop(A,B,C,D,E,F,G,H,I,J,K,L,M) 
* RF of phase [49]: [B-F-1,C-F-1,D-F-1]

#### Partial ranking functions of CR 24_loop(A,B,C,D,E,F,G,H,I,J,K,L,M) 
* Partial RF of phase [49]:
  - RF of loop [49:1]:
    B-F-1
    C-F-1
    D-F-1


### Resulting Chains:24_loop(A,B,C,D,E,F,G,H,I,J,K,L,M) 
* [[49],48]
* [48]


### Specialization of cost equations LinearEq_solve([[D[D[I)[D/3 
* CE 2 is refined into CE [51,52,53,54,55,56] 


#### Refined cost equations LinearEq_solve([[D[D[I)[D/3 
* CE 51: LinearEq_solve([[D[D[I)[D(A,B,C) = 56+ 18_loop(C,C,D):[[35],34]+ 21_loop(A,C,C,E,F,G,H,I,J):[[40],39]+ 24_loop(A,C,C,C,K,L,M,N,O,P,Q,R,S):[[49],48]+ 4_loop(A,B,C,B,T,U):[[29],28]+ 7_loop(A,B,C,B,B,V,W):[[33],32]
     [B>=2,C>=2,B=V+2,U=0,T=0,S=0,R=0,Q=0,L=0,K=0,J=0,I=0,H=0,G=0,F=0,E=0,D=0] 
* CE 52: LinearEq_solve([[D[D[I)[D(A,B,C) = 56+ 18_loop(C,C,D):[[35],34]+ 21_loop(A,C,C,E,F,G,H,I,J):[[40],39]+ 24_loop(A,C,C,C,K,L,M,N,O,P,Q,R,S):[[49],48]+ 4_loop(A,B,C,B,T,U):[28]+ 7_loop(A,B,C,B,B,V,W):[32]
     [B>=0,C>=2,1>=B,B=V+2,U=0,T=0,S=0,R=0,Q=0,L=0,K=0,J=0,I=0,H=0,G=0,F=0,E=0,D=0] 
* CE 53: LinearEq_solve([[D[D[I)[D(A,B,C) = 56+ 18_loop(D,E,F):[[35],34]+ 21_loop(A,G,H,I,J,K,L,M,N):[[40],39]+ 24_loop(A,O,P,Q,R,S,T,U,V,W,X,Y,Z):[48]+ 4_loop(A,B,A1,B,B1,C1):[[29],28]+ 7_loop(A,B,D1,B,B,E1,F1):[[33],32]
     [B>=2,B=E1+2,D1=1,C1=0,B1=0,A1=1,Z=0,Y=0,X=0,S=0,R=0,Q=1,P=1,O=1,N=0,M=0,L=0,K=0,J=0,I=0,H=1,G=1,F=0,E=1,D=1,C=1] 
* CE 54: LinearEq_solve([[D[D[I)[D(A,B,C) = 56+ 18_loop(D,E,F):[[35],34]+ 21_loop(A,G,H,I,J,K,L,M,N):[[40],39]+ 24_loop(A,O,P,Q,R,S,T,U,V,W,X,Y,Z):[48]+ 4_loop(A,B,A1,B,B1,C1):[28]+ 7_loop(A,B,D1,B,B,E1,F1):[32]
     [B>=0,1>=B,B=E1+2,D1=1,C1=0,B1=0,A1=1,Z=0,Y=0,X=0,S=0,R=0,Q=1,P=1,O=1,N=0,M=0,L=0,K=0,J=0,I=0,H=1,G=1,F=0,E=1,D=1,C=1] 
* CE 55: LinearEq_solve([[D[D[I)[D(A,B,C) = 56+ 18_loop(D,E,F):[34]+ 21_loop(A,G,H,I,J,K,L,M,N):[39]+ 24_loop(A,O,P,Q,R,S,T,U,V,W,X,Y,Z):[48]+ 4_loop(A,B,A1,B,B1,C1):[[29],28]+ 7_loop(A,B,D1,B,B,E1,F1):[[33],32]
     [B>=2,B=E1+2,D1=0,C1=0,B1=0,A1=0,Z=0,Y=0,X=0,S=0,R=0,Q=0,P=0,O=0,N=0,M=0,L=0,K=0,J=0,I=0,H=0,G=0,F=0,E=0,D=0,C=0] 
* CE 56: LinearEq_solve([[D[D[I)[D(A,B,C) = 56+ 18_loop(D,E,F):[34]+ 21_loop(A,G,H,I,J,K,L,M,N):[39]+ 24_loop(A,O,P,Q,R,S,T,U,V,W,X,Y,Z):[48]+ 4_loop(A,B,A1,B,B1,C1):[28]+ 7_loop(A,B,D1,B,B,E1,F1):[32]
     [B>=0,1>=B,B=E1+2,D1=0,C1=0,B1=0,A1=0,Z=0,Y=0,X=0,S=0,R=0,Q=0,P=0,O=0,N=0,M=0,L=0,K=0,J=0,I=0,H=0,G=0,F=0,E=0,D=0,C=0] 

### Cost equations --> "Loop" of LinearEq_solve([[D[D[I)[D/3 
* CEs [51] --> Loop 50 
* CEs [52] --> Loop 51 
* CEs [53] --> Loop 52 
* CEs [54] --> Loop 53 
* CEs [55] --> Loop 54 
* CEs [56] --> Loop 55 

#### Loops of LinearEq_solve([[D[D[I)[D/3 
* Loop 50: LinearEq_solve([[D[D[I)[D(A,B,C) [C>=2,B>=2] 
* Loop 51: LinearEq_solve([[D[D[I)[D(A,B,C) [C>=2,B>=0,1>=B] 
* Loop 52: LinearEq_solve([[D[D[I)[D(A,B,C) [B>=2,C=1] 
* Loop 53: LinearEq_solve([[D[D[I)[D(A,B,C) [B>=0,1>=B,C=1] 
* Loop 54: LinearEq_solve([[D[D[I)[D(A,B,C) [B>=2,C=0] 
* Loop 55: LinearEq_solve([[D[D[I)[D(A,B,C) [B>=0,1>=B,C=0] 

### Ranking functions of CR LinearEq_solve([[D[D[I)[D(A,B,C) 

#### Partial ranking functions of CR LinearEq_solve([[D[D[I)[D(A,B,C) 


### Resulting Chains:LinearEq_solve([[D[D[I)[D(A,B,C) 
* [55]
* [54]
* [53]
* [52]
* [51]
* [50]


Computing Bounds
=====================================

#### Cost of loops [27] 

 * loop 27:8_loop(A,B,C,D,E,F) -> [8_loop(A',B',C',D',E',F')] 
26
#### Cost of phase [27]:8_loop(A,B,C,D,E,F) -> [8_loop(A',B',C',D',E',F')] 
26*it(27)+0
  Such that:it(27) =< B-F
it(27) =< B-F-B'+F'
it(27) =< D-F
it(27) =< D-F-D'+F'
it(27) >= B-F-B'+F'
it(27) >= D-F-D'+F'

#### Cost of chains of 8_loop(A,B,C,D,E,F):
* Chain [[27],26]: 26*it(27)+3
  Such that:it(27) =< B-F
it(27) >= B-F

  with precondition: [B=D,C>=0,E>=0,F>=E+1,B>=F+1] 


#### Cost of loops [29] 

 * loop 29:4_loop(A,B,C,D,E,F) -> [4_loop(A',B',C',D',E',F')] 
26*s(2)+14
  Such that:s(2) =< D'-E'
s(2) >= B'-E'

#### Cost of phase [29]:4_loop(A,B,C,D,E,F) -> [4_loop(A',B',C',D',E',F')] 
14*it(29)+26*s(3)+0
  Such that:it(29) =< B-E-B'+E'
it(29) =< D-E-1
it(29) =< D-E-D'+E'
aux(4) =< B-E-1
it(29) =< aux(4)
s(3) =< it(29)*aux(4)
aux(1) =< it(29)
aux(2) >= B-E-1
it(29) >= B-E-B'+E'
it(29) >= D-E-D'+E'
aux(1) >= it(29)
s(3) >= aux(1)*aux(2)+aux(1)* (1/2)-aux(1)*aux(1)* (1/2)

#### Cost of chains of 4_loop(A,B,C,D,E,F):
* Chain [[29],28]: 14*it(29)+26*s(3)+5
  Such that:aux(5) =< D-E-1
it(29) =< aux(5)
s(3) =< it(29)*aux(5)
aux(1) =< it(29)
aux(6) >= D-E-1
aux(6) >= aux(6)
it(29) >= aux(6)
aux(1) >= it(29)
s(3) >= aux(1)*aux(6)+aux(1)* (1/2)-aux(1)*aux(1)* (1/2)

  with precondition: [B=D,C>=0,E>=0,B>=E+2] 

* Chain [28]: 5
  with precondition: [D=B,C>=0,E>=0,E+1>=D] 


#### Cost of loops [31] 

 * loop 31:14_loop(A,B,C,D,E,F) -> [14_loop(A',B',C',D',E',F')] 
22
#### Cost of phase [31]:14_loop(A,B,C,D,E,F) -> [14_loop(A',B',C',D',E',F')] 
22*it(31)+0
  Such that:it(31) =< C-F
it(31) =< C-F-C'+F'
it(31) =< D-F
it(31) =< D-F-D'+F'
it(31) >= C-F-C'+F'
it(31) >= D-F-D'+F'

#### Cost of chains of 14_loop(A,B,C,D,E,F):
* Chain [[31],30]: 22*it(31)+3
  Such that:it(31) =< C-F
it(31) >= C-F

  with precondition: [C=D,B>=0,E>=0,F>=E+1,C>=F+1] 


#### Cost of loops [33] 

 * loop 33:7_loop(A,B,C,D,E,F,G) -> [7_loop(A',B',C',D',E',F',G')] 
22*s(5)+32
  Such that:s(5) =< E'-F'-2
s(5) >= B'-F'-2

#### Cost of phase [33]:7_loop(A,B,C,D,E,F,G) -> [7_loop(A',B',C',D',E',F',G')] 
32*it(33)+22*s(6)+0
  Such that:aux(9) =< -D+F+1
aux(10) =< E-1
it(33) =< F+1
it(33) =< F-F'
s(6) =< it(33)*aux(10)
aux(7) =< it(33)
aux(8) >= D-F-1
it(33) >= F-F'
aux(7) >= it(33)
s(6) >= aux(7)*aux(8)+aux(7)*aux(7)* (1/2)- (aux(9)*aux(7)+aux(7)* (1/2))

#### Cost of chains of 7_loop(A,B,C,D,E,F,G):
* Chain [[33],32]: 32*it(33)+22*s(6)+2
  Such that:aux(9) =< -D+F+1
aux(10) =< E-1
it(33) =< F+1
s(6) =< it(33)*aux(10)
aux(7) =< it(33)
aux(8) >= D-F-1
it(33) >= F+1
aux(7) >= it(33)
s(6) >= aux(7)*aux(8)+aux(7)*aux(7)* (1/2)- (aux(9)*aux(7)+aux(7)* (1/2))

  with precondition: [B=D,B=E,C>=0,F>=0,B>=F+2] 

* Chain [32]: 2
  with precondition: [B=D,B=E,0>=F+1,C>=0,B>=F+2] 


#### Cost of loops [35] 

 * loop 35:18_loop(A,B,C) -> [18_loop(A',B',C')] 
9
#### Cost of phase [35]:18_loop(A,B,C) -> [18_loop(A',B',C')] 
9*it(35)+0
  Such that:it(35) =< A-C
it(35) =< A-C-A'+C'
it(35) =< B-C
it(35) =< B-C-B'+C'
it(35) >= A-C-A'+C'
it(35) >= B-C-B'+C'

#### Cost of chains of 18_loop(A,B,C):
* Chain [[35],34]: 9*it(35)+3
  Such that:it(35) =< B-C
it(35) >= A-C

  with precondition: [A=B,C>=0,A>=C+1] 

* Chain [34]: 3
  with precondition: [B=A,B=C,B>=0] 


#### Cost of loops [36,37] 

 * loop 36:25_loop(A,B,C,D,E,F,G,H) -> [25_loop(A',B',C',D',E',F',G',H')] 
28
 * loop 37:25_loop(A,B,C,D,E,F,G,H) -> [25_loop(A',B',C',D',E',F',G',H')] 
26
#### Cost of phase [36,37]:25_loop(A,B,C,D,E,F,G,H) -> [25_loop(A',B',C',D',E',F',G',H')] 
28*it(36)+26*it(37)+0
  Such that:it(36)+it(37) =< B-F
it(36)+it(37) =< B-F-B'+F'
it(36)+it(37) >= B-F-B'+F'

#### Cost of chains of 25_loop(A,B,C,D,E,F,G,H):
* Chain [[36,37],38]: 28*it(36)+26*it(37)+3
  Such that:it(37)+it(36) =< B-F
it(37)+it(36) >= B-F

  with precondition: [C>=0,F>=0,B>=C+1,B>=F+1] 


#### Cost of loops [40] 

 * loop 40:21_loop(A,B,C,D,E,F,G,H,I) -> [21_loop(A',B',C',D',E',F',G',H',I')] 
26*s(10)+28*s(9)+16
  Such that:s(9)+s(10) =< C'
s(9)+s(10) >= C'

#### Cost of phase [40]:21_loop(A,B,C,D,E,F,G,H,I) -> [21_loop(A',B',C',D',E',F',G',H',I')] 
16*it(40)+26*s(11)+28*s(12)+0
  Such that:it(40) =< B-D
it(40) =< B-D-B'+D'
aux(12) =< C
it(40) =< C-D
it(40) =< C-D-C'+D'
s(11)+s(12) =< it(40)*aux(12)
it(40) >= B-D-B'+D'
aux(11) >= C
it(40) >= C-D-C'+D'
s(11)+s(12) >= -D+D'
s(11)+s(12) >= it(40)*aux(11)

#### Cost of chains of 21_loop(A,B,C,D,E,F,G,H,I):
* Chain [[40],39]: 16*it(40)+26*s(11)+28*s(12)+3
  Such that:aux(12) =< B
it(40) =< B-D
s(11)+s(12) =< it(40)*aux(12)
aux(11) >= B
aux(13) >= B-D
it(40) >= aux(13)
s(11)+s(12) >= aux(13)
s(11)+s(12) >= it(40)*aux(11)

  with precondition: [B=C,D>=0,B>=D+1,G>=D] 

* Chain [39]: 3
  with precondition: [C=B,C=D,C>=0,G>=C] 


#### Cost of loops [41,42] 

 * loop 41:31_loop(A,B,C,D,E,F,G,H,I,J) -> [31_loop(A',B',C',D',E',F',G',H',I',J')] 
40
 * loop 42:31_loop(A,B,C,D,E,F,G,H,I,J) -> [31_loop(A',B',C',D',E',F',G',H',I',J')] 
36
#### Cost of phase [41,42]:31_loop(A,B,C,D,E,F,G,H,I,J) -> [31_loop(A',B',C',D',E',F',G',H',I',J')] 
40*it(41)+36*it(42)+0
  Such that:it(41)+it(42) =< B-H
it(41)+it(42) =< B-H-B'+H'
it(41)+it(42) =< C-H
it(41)+it(42) =< C-H-C'+H'
it(41)+it(42) =< D-H
it(41)+it(42) =< D-H-D'+H'
it(41)+it(42) >= B-H-B'+H'
it(41)+it(42) >= C-H-C'+H'
it(41)+it(42) >= D-H-D'+H'

#### Cost of chains of 31_loop(A,B,C,D,E,F,G,H,I,J):
* Chain [[41,42],43]: 40*it(41)+36*it(42)+3
  Such that:it(42)+it(41) =< D-H
it(42)+it(41) >= C-H

  with precondition: [B=C,B=D,E>=0,B>=E+2,H>=E,B>=H+1] 


#### Cost of loops [45] 

 * loop 45:44_loop(A,B,C,D,E,F,G,H) -> [44_loop(A',B',C',D',E',F',G',H')] 
24
#### Cost of phase [45]:44_loop(A,B,C,D,E,F,G,H) -> [44_loop(A',B',C',D',E',F',G',H')] 
24*it(45)+0
  Such that:it(45) =< B-H
it(45) =< B-H-B'+H'
it(45) =< C-H
it(45) =< C-H-C'+H'
it(45) >= B-H-B'+H'
it(45) >= C-H-C'+H'

#### Cost of chains of 44_loop(A,B,C,D,E,F,G,H):
* Chain [[45],44]: 24*it(45)+3
  Such that:it(45) =< C-H
it(45) >= B-H

  with precondition: [B=C,D>=0,E>=D+1,H>=D+1,B>=E+1,B>=H+1] 


#### Cost of loops [47] 

 * loop 47:38_loop(A,B,C,D,E,F,G,H) -> [38_loop(A',B',C',D',E',F',G',H')] 
24*s(14)+36
  Such that:s(14) =< -D+B'-1
s(14) >= -D+C'-1

#### Cost of phase [47]:38_loop(A,B,C,D,E,F,G,H) -> [38_loop(A',B',C',D',E',F',G',H')] 
36*it(47)+24*s(15)+0
  Such that:it(47) =< B-E
it(47) =< B-E-B'+E'
aux(15) =< C-D-1
it(47) =< C-E
it(47) =< C-E-C'+E'
s(15) =< it(47)*aux(15)
it(47) >= B-E-B'+E'
aux(14) >= C-D-1
it(47) >= C-E-C'+E'
s(15) >= -E+E'
s(15) >= it(47)*aux(14)

#### Cost of chains of 38_loop(A,B,C,D,E,F,G,H):
* Chain [[47],46]: 36*it(47)+24*s(15)+3
  Such that:aux(15) =< B-D-1
it(47) =< B-E
s(15) =< it(47)*aux(15)
aux(14) >= C-D-1
aux(16) >= C-E
it(47) >= aux(16)
s(15) >= aux(16)
s(15) >= it(47)*aux(14)

  with precondition: [B=C,D>=0,E>=D+1,B>=E+1] 


#### Cost of loops [49] 

 * loop 49:24_loop(A,B,C,D,E,F,G,H,I,J,K,L,M) -> [24_loop(A',B',C',D',E',F',G',H',I',J',K',L',M')] 
36*s(24)+40*s(23)+36*s(27)+24*s(28)+35
  Such that:s(23)+s(24) =< -F+C'
s(25) =< -F+C'-1
s(27) =< s(25)
s(28) =< s(27)*s(25)
s(23)+s(24) >= -F+C'
s(26) >= -F+C'-1
s(26) >= s(26)
s(27) >= s(26)
s(28) >= s(26)
s(28) >= s(27)*s(26)

#### Cost of phase [49]:24_loop(A,B,C,D,E,F,G,H,I,J,K,L,M) -> [24_loop(A',B',C',D',E',F',G',H',I',J',K',L',M')] 
35*it(49)+36*s(29)+40*s(30)+36*s(31)+24*s(32)+0
  Such that:it(49) =< B-F-B'+F'
it(49) =< C-F-1
it(49) =< C-F-C'+F'
it(49) =< D-F-1
it(49) =< D-F-D'+F'
aux(25) =< B-F-1
it(49) =< aux(25)
aux(24) =< aux(25)+1
aux(23) =< aux(25)
aux(19) =< it(49)
s(29)+s(30) =< it(49)*aux(24)
s(34) =< it(49)*aux(23)
s(31) =< s(34)
s(32) =< s(31)*aux(25)
s(26) >= 1
it(49) >= B-F-B'+F'
it(49) >= C-F-C'+F'
aux(20) >= D-F-1
aux(22) >= D-F
it(49) >= D-F-D'+F'
aux(19) >= it(49)
s(29)+s(30) >= aux(19)*aux(22)+aux(19)* (1/2)-aux(19)*aux(19)* (1/2)
s(33) >= aux(19)*aux(20)+aux(19)* (1/2)-aux(19)*aux(19)* (1/2)
s(33) >= s(33)
s(26) >= s(26)
s(31) >= s(33)
s(32) >= s(33)
s(32) >= s(31)*s(26)

#### Cost of chains of 24_loop(A,B,C,D,E,F,G,H,I,J,K,L,M):
* Chain [[49],48]: 35*it(49)+36*s(29)+40*s(30)+36*s(31)+24*s(32)+5
  Such that:aux(26) =< D-F-1
it(49) =< aux(26)
aux(24) =< aux(26)+1
aux(23) =< aux(26)
aux(19) =< it(49)
s(29)+s(30) =< it(49)*aux(24)
s(34) =< it(49)*aux(23)
s(31) =< s(34)
s(32) =< s(31)*aux(26)
s(26) >= 1
aux(22) >= D-F
aux(27) >= D-F-1
aux(27) >= aux(27)
it(49) >= aux(27)
aux(19) >= it(49)
s(29)+s(30) >= aux(19)*aux(22)+aux(19)* (1/2)-aux(19)*aux(19)* (1/2)
s(33) >= aux(19)*aux(27)+aux(19)* (1/2)-aux(19)*aux(19)* (1/2)
s(33) >= s(33)
s(26) >= s(26)
s(31) >= s(33)
s(32) >= s(33)
s(32) >= s(31)*s(26)

  with precondition: [B=C,B=D,F>=0,B>=F+2] 

* Chain [48]: 5
  with precondition: [B=C,B=D,F>=0,F+1>=B] 


#### Cost of chains of LinearEq_solve([[D[D[I)[D(A,B,C):
* Chain [55]: 74
  with precondition: [C=0,1>=B,B>=0] 

* Chain [54]: 14*s(37)+26*s(38)+32*s(42)+22*s(44)+74
  Such that:aux(28) =< B-1
s(42) =< aux(28)
s(44) =< s(42)*aux(28)
s(45) =< s(42)
s(37) =< aux(28)
s(38) =< s(37)*aux(28)
s(39) =< s(37)
s(43) >= 1
aux(29) >= B-1
s(36) >= aux(29)
s(42) >= aux(29)
s(45) >= s(42)
s(44) >= s(45)*s(43)+s(45)*s(45)* (1/2)-s(45)* (1/2)
s(36) >= s(36)
s(37) >= s(36)
s(39) >= s(37)
s(38) >= s(39)*s(36)+s(39)* (1/2)-s(39)*s(39)* (1/2)

  with precondition: [C=0,B>=2] 

* Chain [53]: 25*s(46)+26*s(51)+28*s(52)+74
  Such that:aux(30) =< 1
s(46) =< aux(30)
s(51)+s(52) =< s(46)*aux(30)
aux(31) >= 1
s(46) >= aux(31)
aux(31) >= aux(31)
s(51)+s(52) >= aux(31)
s(51)+s(52) >= s(46)*aux(31)

  with precondition: [C=1,1>=B,B>=0] 

* Chain [52]: 25*s(53)+26*s(58)+28*s(59)+14*s(62)+26*s(63)+32*s(67)+22*s(69)+74
  Such that:aux(32) =< 1
aux(33) =< B-1
s(53) =< aux(32)
s(67) =< aux(33)
s(69) =< s(67)*aux(33)
s(70) =< s(67)
s(62) =< aux(33)
s(63) =< s(62)*aux(33)
s(64) =< s(62)
s(58)+s(59) =< s(53)*aux(32)
aux(34) >= 1
aux(35) >= B-1
s(53) >= aux(34)
aux(34) >= aux(34)
s(61) >= aux(35)
s(67) >= aux(35)
s(70) >= s(67)
s(69) >= s(70)*aux(34)+s(70)*s(70)* (1/2)-s(70)* (1/2)
s(61) >= s(61)
s(62) >= s(61)
s(64) >= s(62)
s(63) >= s(64)*s(61)+s(64)* (1/2)-s(64)*s(64)* (1/2)
s(58)+s(59) >= aux(34)
s(58)+s(59) >= s(53)*aux(34)

  with precondition: [C=1,B>=2] 

* Chain [51]: 25*s(71)+26*s(76)+28*s(77)+35*s(82)+36*s(86)+40*s(87)+36*s(90)+24*s(91)+74
  Such that:s(78) =< C-1
aux(36) =< C
s(71) =< aux(36)
s(82) =< s(78)
s(83) =< s(78)+1
s(84) =< s(78)
s(85) =< s(82)
s(86)+s(87) =< s(82)*s(83)
s(88) =< s(82)*s(84)
s(90) =< s(88)
s(91) =< s(90)*s(78)
s(76)+s(77) =< s(71)*aux(36)
s(79) >= 1
s(81) >= C-1
aux(37) >= C
s(71) >= aux(37)
aux(37) >= aux(37)
s(81) >= s(81)
s(82) >= s(81)
s(85) >= s(82)
s(86)+s(87) >= s(85)*aux(37)+s(85)* (1/2)-s(85)*s(85)* (1/2)
s(89) >= s(85)*s(81)+s(85)* (1/2)-s(85)*s(85)* (1/2)
s(89) >= s(89)
s(79) >= s(79)
s(90) >= s(89)
s(91) >= s(89)
s(91) >= s(90)*s(79)
s(76)+s(77) >= aux(37)
s(76)+s(77) >= s(71)*aux(37)

  with precondition: [1>=B,B>=0,C>=2] 

* Chain [50]: 25*s(92)+26*s(97)+28*s(98)+35*s(103)+36*s(107)+40*s(108)+36*s(111)+24*s(112)+14*s(115)+26*s(116)+32*s(120)+22*s(122)+74
  Such that:s(99) =< C-1
aux(38) =< B-1
aux(39) =< C
s(120) =< aux(38)
s(92) =< aux(39)
s(122) =< s(120)*aux(38)
s(123) =< s(120)
s(115) =< aux(38)
s(116) =< s(115)*aux(38)
s(117) =< s(115)
s(103) =< s(99)
s(104) =< s(99)+1
s(105) =< s(99)
s(106) =< s(103)
s(107)+s(108) =< s(103)*s(104)
s(109) =< s(103)*s(105)
s(111) =< s(109)
s(112) =< s(111)*s(99)
s(97)+s(98) =< s(92)*aux(39)
s(102) >= C-1
aux(40) >= 1
aux(41) >= B-1
aux(42) >= C
s(100) >= aux(40)
aux(40) >= aux(40)
s(114) >= aux(41)
s(120) >= aux(41)
s(92) >= aux(42)
aux(42) >= aux(42)
s(123) >= s(120)
s(122) >= s(123)*aux(40)+s(123)*s(123)* (1/2)-s(123)* (1/2)
s(114) >= s(114)
s(115) >= s(114)
s(117) >= s(115)
s(116) >= s(117)*s(114)+s(117)* (1/2)-s(117)*s(117)* (1/2)
s(102) >= s(102)
s(103) >= s(102)
s(106) >= s(103)
s(107)+s(108) >= s(106)*aux(42)+s(106)* (1/2)-s(106)*s(106)* (1/2)
s(110) >= s(106)*s(102)+s(106)* (1/2)-s(106)*s(106)* (1/2)
s(110) >= s(110)
s(100) >= s(100)
s(111) >= s(110)
s(112) >= s(110)
s(112) >= s(111)*s(100)
s(97)+s(98) >= aux(42)
s(97)+s(98) >= s(92)*aux(42)

  with precondition: [B>=2,C>=2] 


Closed-form bounds of LinearEq_solve([[D[D[I)[D(A,B,C): 
-------------------------------------
* Chain [55] with precondition: [C=0,1>=B,B>=0] 
    - Lower bound: 74 
    - Complexity: constant
 * Chain [54] with precondition: [C=0,B>=2] 
    - Lower bound: 70*B+4+ (24*B-24)* (B-1) 
    - Complexity: n^2
 * Chain [53] with precondition: [C=1,1>=B,B>=0] 
    - Lower bound: 125 
    - Complexity: constant
 * Chain [52] with precondition: [C=1,B>=2] 
    - Lower bound: 70*B+55+ (24*B-24)* (B-1) 
    - Complexity: n^2
 * Chain [51] with precondition: [1>=B,B>=0,C>=2] 
    - Lower bound: 65*C-65+ (25*C+74+26*C*C+nat(C/2-1/2+ (C-1)*C+ (C-1)* (-C/2+1/2))*36)+ (30*C-30)* (C-1) 
    - Complexity: n^2
 * Chain [50] with precondition: [B>=2,C>=2] 
    - Lower bound: 65*C-65+ (70*B-70+ (25*C+74+26*C*C+nat(C/2-1/2+ (C-1)*C+ (C-1)* (-C/2+1/2))*36)+ (24*B-24)* (B-1))+ (30*C-30)* (C-1) 
    - Complexity: n^2
 
### Partitioned lower bound of LinearEq_solve([[D[D[I)[D(A,B,C): 
* 74 
 if [C=0,1>=B,B>=0]
* 125 
 if [C=1,1>=B,B>=0]
* 70*B+4+ (24*B-24)* (B-1) 
 if [C=0,B>=2]
* 70*B+55+ (24*B-24)* (B-1) 
 if [C=1,B>=2]
* 65*C-65+ (25*C+74+26*C*C+nat(C/2-1/2+ (C-1)*C+ (C-1)* (-C/2+1/2))*36)+ (30*C-30)* (C-1) 
 if [1>=B,B>=0,C>=2]
* 65*C-65+ (70*B-70+ (25*C+74+26*C*C+nat(C/2-1/2+ (C-1)*C+ (C-1)* (-C/2+1/2))*36)+ (24*B-24)* (B-1))+ (30*C-30)* (C-1) 
 if [B>=2,C>=2]
Possible lower bounds : [74,125,70*B+4+ (24*B-24)* (B-1),70*B+55+ (24*B-24)* (B-1),65*C-65+ (25*C+74+26*C*C+nat(C/2-1/2+ (C-1)*C+ (C-1)* (-C/2+1/2))*36)+ (30*C-30)* (C-1),65*C-65+ (70*B-70+ (25*C+74+26*C*C+nat(C/2-1/2+ (C-1)*C+ (C-1)* (-C/2+1/2))*36)+ (24*B-24)* (B-1))+ (30*C-30)* (C-1)]
Maximum lower bound complexity: n^2

Time statistics: 
-------------------------------------
* Partial evaluation computed in 590 ms.
* Invariants computed in 432 ms.
   - Backward Invariants 167 ms.
   - Transitive Invariants 115 ms.
* Refinement performed in 586 ms.
* Termination proved in 188 ms.
* Upper bounds computed in 1128 ms.
   - Equation cost structures 346 ms.
   - Phase cost structures 561 ms.
   - Chain cost structures 275 ms.
   - Solving cost expressions 33 ms.
* Total analysis performed in 3400 ms.


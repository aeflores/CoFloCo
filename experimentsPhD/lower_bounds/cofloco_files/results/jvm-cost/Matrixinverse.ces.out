
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive : [2_loop_nexit/3]
1. recursive : [2_loop/3,4/3,76/5]
2. non_recursive : [10_loop_nexit/8]
3. non_recursive : [17_loop_nexit/8]
4. non_recursive : [23_loop_nexit/7]
5. recursive : [23_loop/7,25/7,64/9]
6. recursive : [17_loop/8,20/8,63_normal/8,66/9]
7. recursive : [10_loop/8,13/8,65_normal/8,68/10]
8. non_recursive : [16/9]
9. non_recursive : [67_normal/9]
10. non_recursive : [10/8]
11. non_recursive : [73_normal/9]
12. non_recursive : [7_loop_nexit/7]
13. non_recursive : [11_loop_nexit/7]
14. non_recursive : [18_loop_nexit/7]
15. recursive : [18_loop/7,22/7,70/9]
16. recursive : [11_loop/7,15/7,69_normal/7,72/9]
17. recursive : [71_normal/7,74/9,7_loop/7,9/7]
18. non_recursive : [5/8]
19. non_recursive : [62_normal/9]
20. non_recursive : [27_loop_nexit/3]
21. recursive : [27_loop/3,29/3,94/5]
22. non_recursive : [30_loop_nexit/9]
23. non_recursive : [34_loop_nexit/8]
24. non_recursive : [59/4]
25. non_recursive : [57/2]
26. non_recursive : [58/2]
27. non_recursive : [95/3]
28. non_recursive : [java/lang/Math_abs(D)D/2]
29. recursive : [34_loop/8,38/8,41/10,45/8,46/8,77_normal/10,78/9,90/10]
30. recursive : [30_loop/9,32/9,37/9,89_normal/9,92/11]
31. non_recursive : [33_loop_nexit/13]
32. non_recursive : [40_loop_nexit/10]
33. recursive : [40_loop/10,44/10,48/12,51/10,52/10,79_normal/12,80/11,86/12]
34. non_recursive : [47_loop_nexit/8]
35. non_recursive : [53_loop_nexit/8]
36. recursive : [53_loop/8,55/8,82/10]
37. recursive : [47_loop/8,50/8,81_normal/8,84/10]
38. recursive : [33_loop/13,36/13,43/13,83_normal/13,85_normal/13,88/15]
39. non_recursive : [35/13]
40. non_recursive : [87_normal/14]
41. non_recursive : [31/13]
42. non_recursive : [91_normal/14]
43. non_recursive : [30/13]
44. non_recursive : [93_normal/14]
45. non_recursive : [27/13]
46. non_recursive : [Inverse_gaussian([[D[I)V/2]
47. non_recursive : [75_normal/9]
48. non_recursive : [2/8]
49. non_recursive : [Inverse_invert([[D)[[D/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is partially evaluated into 2_loop/3
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into 23_loop/7
6. SCC is partially evaluated into 17_loop/8
7. SCC is partially evaluated into 10_loop/8
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is partially evaluated into 18_loop/7
16. SCC is partially evaluated into 11_loop/7
17. SCC is partially evaluated into 7_loop/7
18. SCC is completely evaluated into other SCCs
19. SCC is completely evaluated into other SCCs
20. SCC is completely evaluated into other SCCs
21. SCC is partially evaluated into 27_loop/3
22. SCC is completely evaluated into other SCCs
23. SCC is completely evaluated into other SCCs
24. SCC is completely evaluated into other SCCs
25. SCC is completely evaluated into other SCCs
26. SCC is completely evaluated into other SCCs
27. SCC is partially evaluated into 95/3
28. SCC is completely evaluated into other SCCs
29. SCC is partially evaluated into 34_loop/8
30. SCC is partially evaluated into 30_loop/9
31. SCC is completely evaluated into other SCCs
32. SCC is completely evaluated into other SCCs
33. SCC is partially evaluated into 40_loop/10
34. SCC is completely evaluated into other SCCs
35. SCC is completely evaluated into other SCCs
36. SCC is partially evaluated into 53_loop/8
37. SCC is partially evaluated into 47_loop/8
38. SCC is partially evaluated into 33_loop/13
39. SCC is completely evaluated into other SCCs
40. SCC is completely evaluated into other SCCs
41. SCC is completely evaluated into other SCCs
42. SCC is completely evaluated into other SCCs
43. SCC is completely evaluated into other SCCs
44. SCC is completely evaluated into other SCCs
45. SCC is completely evaluated into other SCCs
46. SCC is completely evaluated into other SCCs
47. SCC is completely evaluated into other SCCs
48. SCC is completely evaluated into other SCCs
49. SCC is partially evaluated into Inverse_invert([[D)[[D/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations 2_loop/3 
* CE 4 is refined into CE [35] 
* CE 3 is refined into CE [36] 


#### Refined cost equations 2_loop/3 
* CE 35: 2_loop(A,A,B) = 11+ 2_loop(A,A,C)
     [A>=B+1,B>=0,B+1=C] 
* CE 36: 2_loop(A,A,A) = 3
     [A>=0] 

### Cost equations --> "Loop" of 2_loop/3 
* CEs [36] --> Loop 34 
* CEs [35] --> Loop 35 

#### Loops of 2_loop/3 
* Loop 34: 2_loop(A,A,A) [A>=0] 
* Loop 35: 2_loop(A,A,B)->  2_loop(A,A,A')
                  [A>=B+1,B>=0,B+1=A'] 

### Ranking functions of CR 2_loop(A,B,C) 
* RF of phase [35]: [A-C,B-C]

#### Partial ranking functions of CR 2_loop(A,B,C) 
* Partial RF of phase [35]:
  - RF of loop [35:1]:
    A-C
    B-C


### Resulting Chains:2_loop(A,B,C) 
* [[35],34]
* [34]


### Specialization of cost equations 23_loop/7 
* CE 34 is refined into CE [37] 
* CE 33 is refined into CE [38] 


#### Refined cost equations 23_loop/7 
* CE 37: 23_loop(A,A,A,A,B,C,D) = 26+ 23_loop(A,A,A,A,B,C,E)
     [A>=D+1,D>=C+1,A>=B+1,C>=0,B>=0,D+1=E] 
* CE 38: 23_loop(A,A,A,A,B,C,D) = 3
     [A>=C+2,A>=B+1,D>=A,C>=0,B>=0] 

### Cost equations --> "Loop" of 23_loop/7 
* CEs [38] --> Loop 36 
* CEs [37] --> Loop 37 

#### Loops of 23_loop/7 
* Loop 36: 23_loop(A,A,A,A,B,C,D) [A>=C+2,A>=B+1,D>=A,C>=0,B>=0] 
* Loop 37: 23_loop(A,A,A,A,B,C,D)->  23_loop(A,A,A,A,B,C,A')
                  [A>=D+1,D>=C+1,A>=B+1,C>=0,B>=0,D+1=A'] 

### Ranking functions of CR 23_loop(A,B,C,D,E,F,G) 
* RF of phase [37]: [A-G,B-G,C-G,D-G]

#### Partial ranking functions of CR 23_loop(A,B,C,D,E,F,G) 
* Partial RF of phase [37]:
  - RF of loop [37:1]:
    A-G
    B-G
    C-G
    D-G


### Resulting Chains:23_loop(A,B,C,D,E,F,G) 
* [[37],36]


### Specialization of cost equations 17_loop/8 
* CE 26 is refined into CE [39] 
* CE 25 is refined into CE [40] 


#### Refined cost equations 17_loop/8 
* CE 39: 17_loop(A,A,A,A,A,B,C,D) = 35+ 23_loop(A,A,A,A,B,C,E):[[37],36]+ 17_loop(A,A,A,A,A,B,F,G)
     [A>=C+2,A>=B+1,G>=A,C>=0,B>=0,C=F+1,C+1=E] 
* CE 40: 17_loop(A,A,A,A,A,B,C,D) = 2
     [A>=B+1,B>=0,C+1=0] 

### Cost equations --> "Loop" of 17_loop/8 
* CEs [40] --> Loop 38 
* CEs [39] --> Loop 39 

#### Loops of 17_loop/8 
* Loop 38: 17_loop(A,A,A,A,A,B,C,D) [A>=B+1,B>=0,C+1=0] 
* Loop 39: 17_loop(A,A,A,A,A,B,C,D)->  17_loop(A,A,A,A,A,B,A',B')
                  [A>=A'+3,A>=B+1,B'>=A,A'+1>=0,B>=0,A'+1=C] 

### Ranking functions of CR 17_loop(A,B,C,D,E,F,G,H) 
* RF of phase [39]: [G+1]

#### Partial ranking functions of CR 17_loop(A,B,C,D,E,F,G,H) 
* Partial RF of phase [39]:
  - RF of loop [39:1]:
    G+1


### Resulting Chains:17_loop(A,B,C,D,E,F,G,H) 
* [[39],38]
* [38]


### Specialization of cost equations 10_loop/8 
* CE 14 is refined into CE [41,42] 
* CE 13 is refined into CE [43] 


#### Refined cost equations 10_loop/8 
* CE 41: 10_loop(A,A,A,A,A,B,C,D) = 37+ 17_loop(A,A,A,A,A,B,E,D):[[39],38]+ 10_loop(A,A,A,A,A,F,G,H)
     [A>=B+1,B>=0,A>=2,0>=G+1,B+1=F,A=E+2] 
* CE 42: 10_loop(A,B,C,D,E,F,G,H) = 37+ 17_loop(I,J,K,L,M,N,O,H):[38]+ 10_loop(P,Q,R,S,T,U,V,W)
     [0>=V+1,U=1,T=1,S=1,R=1,Q=1,P=1,O+1=0,N=0,M=1,L=1,K=1,J=1,I=1,F=0,E=1,D=1,C=1,B=1,A=1] 
* CE 43: 10_loop(A,A,A,A,A,A,B,C) = 3
     [A>=0] 

### Cost equations --> "Loop" of 10_loop/8 
* CEs [43] --> Loop 40 
* CEs [41] --> Loop 41 
* CEs [42] --> Loop 42 

#### Loops of 10_loop/8 
* Loop 40: 10_loop(A,A,A,A,A,A,B,C) [A>=0] 
* Loop 41: 10_loop(A,A,A,A,A,B,C,D)->  10_loop(A,A,A,A,A,A',B',C')
                  [A>=A',A'>=1,A>=2,0>=B'+1,A'=B+1] 
* Loop 42: 10_loop(A,B,C,D,E,F,G,H)->  10_loop(A',B',C',D',E',F',G',H')
                  [0>=G'+1,F'=1,E'=1,D'=1,C'=1,B'=1,A'=1,F=0,E=1,D=1,C=1,B=1,A=1] 

### Ranking functions of CR 10_loop(A,B,C,D,E,F,G,H) 
* RF of phase [41]: [A-F,B-F,C-F,D-F,E-F]

#### Partial ranking functions of CR 10_loop(A,B,C,D,E,F,G,H) 
* Partial RF of phase [41]:
  - RF of loop [41:1]:
    A-F
    B-F
    C-F
    D-F
    E-F


### Resulting Chains:10_loop(A,B,C,D,E,F,G,H) 
* [[41],40]
* [42,40]
* [40]


### Specialization of cost equations 18_loop/7 
* CE 32 is refined into CE [44] 
* CE 31 is refined into CE [45] 


#### Refined cost equations 18_loop/7 
* CE 44: 18_loop(A,A,A,A,B,C,D) = 30+ 18_loop(A,A,A,A,B,C,E)
     [A>=D+1,A>=C+1,C>=B+1,D>=0,B>=0,D+1=E] 
* CE 45: 18_loop(A,A,A,A,B,C,D) = 3
     [A>=C+1,C>=B+1,D>=A,B>=0] 

### Cost equations --> "Loop" of 18_loop/7 
* CEs [45] --> Loop 43 
* CEs [44] --> Loop 44 

#### Loops of 18_loop/7 
* Loop 43: 18_loop(A,A,A,A,B,C,D) [A>=C+1,C>=B+1,D>=A,B>=0] 
* Loop 44: 18_loop(A,A,A,A,B,C,D)->  18_loop(A,A,A,A,B,C,A')
                  [A>=D+1,A>=C+1,C>=B+1,D>=0,B>=0,D+1=A'] 

### Ranking functions of CR 18_loop(A,B,C,D,E,F,G) 
* RF of phase [44]: [A-G,B-G,C-G,D-G]

#### Partial ranking functions of CR 18_loop(A,B,C,D,E,F,G) 
* Partial RF of phase [44]:
  - RF of loop [44:1]:
    A-G
    B-G
    C-G
    D-G


### Resulting Chains:18_loop(A,B,C,D,E,F,G) 
* [[44],43]


### Specialization of cost equations 11_loop/7 
* CE 24 is refined into CE [46] 
* CE 23 is refined into CE [47] 


#### Refined cost equations 11_loop/7 
* CE 46: 11_loop(A,A,A,A,B,C,D) = 7+ 18_loop(A,A,A,A,B,C,E):[[44],43]+ 11_loop(A,A,A,A,B,F,G)
     [A>=C+1,C>=B+1,G>=A,B>=0,C+1=F,E=0] 
* CE 47: 11_loop(A,A,A,A,B,C,D) = 3
     [A>=B+2,C>=A,B>=0] 

### Cost equations --> "Loop" of 11_loop/7 
* CEs [47] --> Loop 45 
* CEs [46] --> Loop 46 

#### Loops of 11_loop/7 
* Loop 45: 11_loop(A,A,A,A,B,C,D) [A>=B+2,C>=A,B>=0] 
* Loop 46: 11_loop(A,A,A,A,B,C,D)->  11_loop(A,A,A,A,B,A',B')
                  [A>=C+1,C>=B+1,B'>=A,B>=0,C+1=A'] 

### Ranking functions of CR 11_loop(A,B,C,D,E,F,G) 
* RF of phase [46]: [A-F,B-F,C-F,D-F]

#### Partial ranking functions of CR 11_loop(A,B,C,D,E,F,G) 
* Partial RF of phase [46]:
  - RF of loop [46:1]:
    A-F
    B-F
    C-F
    D-F


### Resulting Chains:11_loop(A,B,C,D,E,F,G) 
* [[46],45]


### Specialization of cost equations 7_loop/7 
* CE 12 is refined into CE [48] 
* CE 11 is refined into CE [49] 


#### Refined cost equations 7_loop/7 
* CE 48: 7_loop(A,A,A,A,B,C,D) = 11+ 11_loop(A,A,A,A,B,E,D):[[46],45]+ 7_loop(A,A,A,A,F,G,H)
     [A>=B+2,G>=A,B>=0,B+1=F,B+1=E] 
* CE 49: 7_loop(A,A,A,A,B,C,D) = 5
     [B+1>=A,B>=0] 

### Cost equations --> "Loop" of 7_loop/7 
* CEs [49] --> Loop 47 
* CEs [48] --> Loop 48 

#### Loops of 7_loop/7 
* Loop 47: 7_loop(A,A,A,A,B,C,D) [B+1>=A,B>=0] 
* Loop 48: 7_loop(A,A,A,A,B,C,D)->  7_loop(A,A,A,A,A',B',C')
                  [A>=A'+1,B'>=A,A'>=1,A'=B+1] 

### Ranking functions of CR 7_loop(A,B,C,D,E,F,G) 
* RF of phase [48]: [A-E-1,B-E-1,C-E-1,D-E-1]

#### Partial ranking functions of CR 7_loop(A,B,C,D,E,F,G) 
* Partial RF of phase [48]:
  - RF of loop [48:1]:
    A-E-1
    B-E-1
    C-E-1
    D-E-1


### Resulting Chains:7_loop(A,B,C,D,E,F,G) 
* [[48],47]
* [47]


### Specialization of cost equations 27_loop/3 
* CE 6 is refined into CE [50] 
* CE 5 is refined into CE [51] 


#### Refined cost equations 27_loop/3 
* CE 50: 27_loop(A,A,B) = 9+ 27_loop(A,A,C)
     [A>=B+1,B>=0,B+1=C] 
* CE 51: 27_loop(A,A,A) = 3
     [A>=0] 

### Cost equations --> "Loop" of 27_loop/3 
* CEs [51] --> Loop 49 
* CEs [50] --> Loop 50 

#### Loops of 27_loop/3 
* Loop 49: 27_loop(A,A,A) [A>=0] 
* Loop 50: 27_loop(A,A,B)->  27_loop(A,A,A')
                  [A>=B+1,B>=0,B+1=A'] 

### Ranking functions of CR 27_loop(A,B,C) 
* RF of phase [50]: [A-C,B-C]

#### Partial ranking functions of CR 27_loop(A,B,C) 
* Partial RF of phase [50]:
  - RF of loop [50:1]:
    A-C
    B-C


### Resulting Chains:27_loop(A,B,C) 
* [[50],49]
* [49]


### Specialization of cost equations 95/3 
* CE 27 is refined into CE [52] 
* CE 28 is refined into CE [53] 


#### Refined cost equations 95/3 
* CE 52: 95(A,B,C) = 2
     [C>=1] 
* CE 53: 95(A,B,C) = 5
     [0>=C] 

### Cost equations --> "Loop" of 95/3 
* CEs [52] --> Loop 51 
* CEs [53] --> Loop 52 

#### Loops of 95/3 
* Loop 51: 95(A,B,C) [C>=1] 
* Loop 52: 95(A,B,C) [0>=C] 

### Ranking functions of CR 95(A,B,C) 

#### Partial ranking functions of CR 95(A,B,C) 


### Resulting Chains:95(A,B,C) 
* [52]
* [51]


### Specialization of cost equations 34_loop/8 
* CE 17 is refined into CE [54] 
* CE 16 is refined into CE [55,56] 
* CE 15 is refined into CE [57,58] 


#### Refined cost equations 34_loop/8 
* CE 54: 34_loop(A,A,B,C,D,E,F,G) = 3
     [A>=B+1,E>=A,B>=0] 
* CE 55: 34_loop(A,A,B,C,D,E,F,G) = 22+ 95(H,I,J):[52]+ 34_loop(A,A,B,K,L,M,K,L)
     [A>=E+1,A>=B+1,E>=0,B>=0,0>=J,E+1=M] 
* CE 56: 34_loop(A,A,B,C,D,E,F,G) = 22+ 95(H,I,J):[51]+ 34_loop(A,A,B,K,L,M,K,L)
     [A>=E+1,A>=B+1,J>=1,E>=0,B>=0,E+1=M] 
* CE 57: 34_loop(A,A,B,C,D,E,F,G) = 20+ 95(H,I,J):[52]+ 34_loop(A,A,B,C,D,K,L,M)
     [A>=E+1,A>=B+1,E>=0,B>=0,0>=J,E+1=K] 
* CE 58: 34_loop(A,A,B,C,D,E,F,G) = 20+ 95(H,I,J):[51]+ 34_loop(A,A,B,C,D,K,L,M)
     [A>=E+1,A>=B+1,J>=1,E>=0,B>=0,E+1=K] 

### Cost equations --> "Loop" of 34_loop/8 
* CEs [56] --> Loop 53 
* CEs [55] --> Loop 54 
* CEs [58] --> Loop 55 
* CEs [57] --> Loop 56 
* CEs [54] --> Loop 57 

#### Loops of 34_loop/8 
* Loop 53: 34_loop(A,A,B,C,D,E,F,G)->  34_loop(A,A,B,A',B',C',A',B')
                  [A>=E+1,A>=B+1,E>=0,B>=0,E+1=C'] 
* Loop 54: 34_loop(A,A,B,C,D,E,F,G)->  34_loop(A,A,B,A',B',C',A',B')
                  [A>=E+1,A>=B+1,E>=0,B>=0,E+1=C'] 
* Loop 55: 34_loop(A,A,B,C,D,E,F,G)->  34_loop(A,A,B,C,D,A',B',C')
                  [A>=E+1,A>=B+1,E>=0,B>=0,E+1=A'] 
* Loop 56: 34_loop(A,A,B,C,D,E,F,G)->  34_loop(A,A,B,C,D,A',B',C')
                  [A>=E+1,A>=B+1,E>=0,B>=0,E+1=A'] 
* Loop 57: 34_loop(A,A,B,C,D,E,F,G) [A>=B+1,E>=A,B>=0] 

### Ranking functions of CR 34_loop(A,B,C,D,E,F,G,H) 
* RF of phase [53,54,55,56]: [A-F,B-F]

#### Partial ranking functions of CR 34_loop(A,B,C,D,E,F,G,H) 
* Partial RF of phase [53,54,55,56]:
  - RF of loop [53:1,54:1,55:1,56:1]:
    A-F
    B-F


### Resulting Chains:34_loop(A,B,C,D,E,F,G,H) 
* [[53,54,55,56],57]


### Specialization of cost equations 30_loop/9 
* CE 8 is refined into CE [59] 
* CE 7 is refined into CE [60] 


#### Refined cost equations 30_loop/9 
* CE 59: 30_loop(A,A,A,B,C,D,E,F,G) = 13+ 34_loop(A,A,B,H,I,J,F,G):[[53,54,55,56],57]+ 30_loop(A,A,A,K,L,M,N,O,P)
     [A>=B+1,E>=B,N>=A,B>=0,B+1=K,J=0] 
* CE 60: 30_loop(A,A,A,A,B,C,D,E,F) = 3
     [D>=A,A>=0] 

### Cost equations --> "Loop" of 30_loop/9 
* CEs [60] --> Loop 58 
* CEs [59] --> Loop 59 

#### Loops of 30_loop/9 
* Loop 58: 30_loop(A,A,A,A,B,C,D,E,F) [D>=A,A>=0] 
* Loop 59: 30_loop(A,A,A,B,C,D,E,F,G)->  30_loop(A,A,A,A',B',C',D',E',F')
                  [E>=B,A>=B+1,D'>=A,B>=0,B+1=A'] 

### Ranking functions of CR 30_loop(A,B,C,D,E,F,G,H,I) 
* RF of phase [59]: [A-D,B-D,C-D]

#### Partial ranking functions of CR 30_loop(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [59]:
  - RF of loop [59:1]:
    A-D
    B-D
    C-D


### Resulting Chains:30_loop(A,B,C,D,E,F,G,H,I) 
* [[59],58]
* [58]


### Specialization of cost equations 40_loop/10 
* CE 20 is refined into CE [61] 
* CE 19 is refined into CE [62,63] 
* CE 18 is refined into CE [64,65] 


#### Refined cost equations 40_loop/10 
* CE 61: 40_loop(A,A,A,A,B,C,D,E,F,G) = 3
     [A>=B+2,E>=A,B>=0] 
* CE 62: 40_loop(A,A,A,A,B,C,D,E,F,G) = 34+ 95(H,I,J):[52]+ 40_loop(A,A,A,A,B,K,L,M,K,L)
     [A>=E+1,E>=B,A>=B+2,B>=0,0>=J,E+1=M] 
* CE 63: 40_loop(A,A,A,A,B,C,D,E,F,G) = 34+ 95(H,I,J):[51]+ 40_loop(A,A,A,A,B,K,L,M,K,L)
     [A>=E+1,E>=B,A>=B+2,J>=1,B>=0,E+1=M] 
* CE 64: 40_loop(A,A,A,A,B,C,D,E,F,G) = 30+ 95(H,I,J):[52]+ 40_loop(A,A,A,A,B,C,D,K,L,M)
     [A>=E+1,E>=B,A>=B+2,B>=0,0>=J,E+1=K] 
* CE 65: 40_loop(A,A,A,A,B,C,D,E,F,G) = 30+ 95(H,I,J):[51]+ 40_loop(A,A,A,A,B,C,D,K,L,M)
     [A>=E+1,E>=B,A>=B+2,J>=1,B>=0,E+1=K] 

### Cost equations --> "Loop" of 40_loop/10 
* CEs [63] --> Loop 60 
* CEs [62] --> Loop 61 
* CEs [65] --> Loop 62 
* CEs [64] --> Loop 63 
* CEs [61] --> Loop 64 

#### Loops of 40_loop/10 
* Loop 60: 40_loop(A,A,A,A,B,C,D,E,F,G)->  40_loop(A,A,A,A,B,A',B',C',A',B')
                  [A>=E+1,E>=B,A>=B+2,B>=0,E+1=C'] 
* Loop 61: 40_loop(A,A,A,A,B,C,D,E,F,G)->  40_loop(A,A,A,A,B,A',B',C',A',B')
                  [A>=E+1,E>=B,A>=B+2,B>=0,E+1=C'] 
* Loop 62: 40_loop(A,A,A,A,B,C,D,E,F,G)->  40_loop(A,A,A,A,B,C,D,A',B',C')
                  [A>=E+1,E>=B,A>=B+2,B>=0,E+1=A'] 
* Loop 63: 40_loop(A,A,A,A,B,C,D,E,F,G)->  40_loop(A,A,A,A,B,C,D,A',B',C')
                  [A>=E+1,E>=B,A>=B+2,B>=0,E+1=A'] 
* Loop 64: 40_loop(A,A,A,A,B,C,D,E,F,G) [A>=B+2,E>=A,B>=0] 

### Ranking functions of CR 40_loop(A,B,C,D,E,F,G,H,I,J) 
* RF of phase [60,61,62,63]: [A-H,B-H,C-H,D-H]

#### Partial ranking functions of CR 40_loop(A,B,C,D,E,F,G,H,I,J) 
* Partial RF of phase [60,61,62,63]:
  - RF of loop [60:1,61:1,62:1,63:1]:
    A-H
    B-H
    C-H
    D-H


### Resulting Chains:40_loop(A,B,C,D,E,F,G,H,I,J) 
* [[60,61,62,63],64]


### Specialization of cost equations 53_loop/8 
* CE 30 is refined into CE [66] 
* CE 29 is refined into CE [67] 


#### Refined cost equations 53_loop/8 
* CE 66: 53_loop(A,A,A,B,C,D,E,F) = 24+ 53_loop(A,A,A,B,C,D,E,G)
     [A>=F+1,A>=C+1,F>=B+1,C>=B+1,B>=0,F+1=G] 
* CE 67: 53_loop(A,A,A,B,C,D,E,F) = 3
     [A>=C+1,C>=B+1,F>=A,B>=0] 

### Cost equations --> "Loop" of 53_loop/8 
* CEs [67] --> Loop 65 
* CEs [66] --> Loop 66 

#### Loops of 53_loop/8 
* Loop 65: 53_loop(A,A,A,B,C,D,E,F) [A>=C+1,C>=B+1,F>=A,B>=0] 
* Loop 66: 53_loop(A,A,A,B,C,D,E,F)->  53_loop(A,A,A,B,C,D,E,A')
                  [A>=F+1,A>=C+1,F>=B+1,C>=B+1,B>=0,F+1=A'] 

### Ranking functions of CR 53_loop(A,B,C,D,E,F,G,H) 
* RF of phase [66]: [A-H,B-H,C-H]

#### Partial ranking functions of CR 53_loop(A,B,C,D,E,F,G,H) 
* Partial RF of phase [66]:
  - RF of loop [66:1]:
    A-H
    B-H
    C-H


### Resulting Chains:53_loop(A,B,C,D,E,F,G,H) 
* [[66],65]


### Specialization of cost equations 47_loop/8 
* CE 22 is refined into CE [68] 
* CE 21 is refined into CE [69] 


#### Refined cost equations 47_loop/8 
* CE 68: 47_loop(A,A,A,B,C,D,E,F) = 33+ 53_loop(A,A,A,B,C,G,H,I):[[66],65]+ 47_loop(A,A,A,B,J,G,H,K)
     [A>=C+1,C>=B+1,K>=A,B>=0,C+1=J,B+1=I] 
* CE 69: 47_loop(A,A,A,B,C,D,E,F) = 3
     [A>=B+2,C>=A,B>=0] 

### Cost equations --> "Loop" of 47_loop/8 
* CEs [69] --> Loop 67 
* CEs [68] --> Loop 68 

#### Loops of 47_loop/8 
* Loop 67: 47_loop(A,A,A,B,C,D,E,F) [A>=B+2,C>=A,B>=0] 
* Loop 68: 47_loop(A,A,A,B,C,D,E,F)->  47_loop(A,A,A,B,A',B',C',D')
                  [A>=A',A'>=B+2,D'>=A,B>=0,A'=C+1] 

### Ranking functions of CR 47_loop(A,B,C,D,E,F,G,H) 
* RF of phase [68]: [A-E,B-E,C-E]

#### Partial ranking functions of CR 47_loop(A,B,C,D,E,F,G,H) 
* Partial RF of phase [68]:
  - RF of loop [68:1]:
    A-E
    B-E
    C-E


### Resulting Chains:47_loop(A,B,C,D,E,F,G,H) 
* [[68],67]


### Specialization of cost equations 33_loop/13 
* CE 10 is refined into CE [70] 
* CE 9 is refined into CE [71] 


#### Refined cost equations 33_loop/13 
* CE 70: 33_loop(A,A,A,A,B,C,D,E,F,G,H,I,J) = 29+ 40_loop(A,A,A,A,C,K,L,C,G,H):[[60,61,62,63],64]+ 47_loop(A,A,A,C,M,N,I,J):[[68],67]+ 33_loop(A,A,A,A,O,P,Q,R,S,T,U,V,W)
     [A>=C+2,T>=A,C>=0,C+1=P,C+1=M] 
* CE 71: 33_loop(A,A,A,A,B,C,D,E,F,G,H,I,J) = 5
     [C+1>=A,C>=0] 

### Cost equations --> "Loop" of 33_loop/13 
* CEs [71] --> Loop 69 
* CEs [70] --> Loop 70 

#### Loops of 33_loop/13 
* Loop 69: 33_loop(A,A,A,A,B,C,D,E,F,G,H,I,J) [C+1>=A,C>=0] 
* Loop 70: 33_loop(A,A,A,A,B,C,D,E,F,G,H,I,J)->  33_loop(A,A,A,A,A',B',C',D',E',F',G',H',I')
                  [A>=B'+1,F'>=A,B'>=1,B'=C+1] 

### Ranking functions of CR 33_loop(A,B,C,D,E,F,G,H,I,J,K,L,M) 
* RF of phase [70]: [A-F-1,B-F-1,C-F-1,D-F-1]

#### Partial ranking functions of CR 33_loop(A,B,C,D,E,F,G,H,I,J,K,L,M) 
* Partial RF of phase [70]:
  - RF of loop [70:1]:
    A-F-1
    B-F-1
    C-F-1
    D-F-1


### Resulting Chains:33_loop(A,B,C,D,E,F,G,H,I,J,K,L,M) 
* [[70],69]
* [69]


### Specialization of cost equations Inverse_invert([[D)[[D/1 
* CE 2 is refined into CE [72,73,74] 


#### Refined cost equations Inverse_invert([[D)[[D/1 
* CE 72: Inverse_invert([[D)[[D(A) = 40+ 2_loop(A,A,B):[[35],34]+ 27_loop(A,A,C):[[50],49]+ 30_loop(A,A,A,D,E,F,G,H,I):[[59],58]+ 33_loop(A,A,A,A,J,K,L,M,N,O,P,Q,R):[[70],69]+ 7_loop(A,A,A,A,S,T,U):[[48],47]+ 10_loop(A,A,A,A,A,V,W,X):[[41],40]
     [A>=2,V=0,U=0,T=0,S=0,R=0,Q=0,P=0,K=0,J=0,I=0,H=0,G=0,F=0,E=0,D=0,C=0,B=0] 
* CE 73: Inverse_invert([[D)[[D(A) = 40+ 2_loop(B,C,D):[[35],34]+ 27_loop(E,F,G):[[50],49]+ 30_loop(H,I,J,K,L,M,N,O,P):[[59],58]+ 33_loop(Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1):[69]+ 7_loop(D1,E1,F1,G1,H1,I1,J1):[47]+ 10_loop(K1,L1,M1,N1,O1,P1,Q1,R1):[42,40]
     [P1=0,O1=1,N1=1,M1=1,L1=1,K1=1,J1=0,I1=0,H1=0,G1=1,F1=1,E1=1,D1=1,C1=0,B1=0,A1=0,V=0,U=0,T=1,S=1,R=1,Q=1,P=0,O=0,N=0,M=0,L=0,K=0,J=1,I=1,H=1,G=0,F=1,E=1,D=0,C=1,B=1,A=1] 
* CE 74: Inverse_invert([[D)[[D(A) = 40+ 2_loop(B,C,D):[34]+ 27_loop(E,F,G):[49]+ 30_loop(H,I,J,K,L,M,N,O,P):[58]+ 33_loop(Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1):[69]+ 7_loop(D1,E1,F1,G1,H1,I1,J1):[47]+ 10_loop(K1,L1,M1,N1,O1,P1,Q1,R1):[40]
     [P1=0,O1=0,N1=0,M1=0,L1=0,K1=0,J1=0,I1=0,H1=0,G1=0,F1=0,E1=0,D1=0,C1=0,B1=0,A1=0,V=0,U=0,T=0,S=0,R=0,Q=0,P=0,O=0,N=0,M=0,L=0,K=0,J=0,I=0,H=0,G=0,F=0,E=0,D=0,C=0,B=0,A=0] 

### Cost equations --> "Loop" of Inverse_invert([[D)[[D/1 
* CEs [72] --> Loop 71 
* CEs [73] --> Loop 72 
* CEs [74] --> Loop 73 

#### Loops of Inverse_invert([[D)[[D/1 
* Loop 71: Inverse_invert([[D)[[D(A) [A>=2] 
* Loop 72: Inverse_invert([[D)[[D(A) [A=1] 
* Loop 73: Inverse_invert([[D)[[D(A) [A=0] 

### Ranking functions of CR Inverse_invert([[D)[[D(A) 

#### Partial ranking functions of CR Inverse_invert([[D)[[D(A) 


### Resulting Chains:Inverse_invert([[D)[[D(A) 
* [73]
* [72]
* [71]


Computing Bounds
=====================================

#### Cost of loops [35] 

 * loop 35:2_loop(A,B,C) -> [2_loop(A',B',C')] 
11
#### Cost of phase [35]:2_loop(A,B,C) -> [2_loop(A',B',C')] 
11*it(35)+0
  Such that:it(35) =< A-C
it(35) =< A-C-A'+C'
it(35) =< B-C
it(35) =< B-C-B'+C'
it(35) >= A-C-A'+C'
it(35) >= B-C-B'+C'

#### Cost of chains of 2_loop(A,B,C):
* Chain [[35],34]: 11*it(35)+3
  Such that:it(35) =< B-C
it(35) >= A-C

  with precondition: [A=B,C>=0,A>=C+1] 

* Chain [34]: 3
  with precondition: [B=A,B=C,B>=0] 


#### Cost of loops [37] 

 * loop 37:23_loop(A,B,C,D,E,F,G) -> [23_loop(A',B',C',D',E',F',G')] 
26
#### Cost of phase [37]:23_loop(A,B,C,D,E,F,G) -> [23_loop(A',B',C',D',E',F',G')] 
26*it(37)+0
  Such that:it(37) =< A-G
it(37) =< A-G-A'+G'
it(37) =< B-G
it(37) =< B-G-B'+G'
it(37) =< C-G
it(37) =< C-G-C'+G'
it(37) =< D-G
it(37) =< D-G-D'+G'
it(37) >= A-G-A'+G'
it(37) >= B-G-B'+G'
it(37) >= C-G-C'+G'
it(37) >= D-G-D'+G'

#### Cost of chains of 23_loop(A,B,C,D,E,F,G):
* Chain [[37],36]: 26*it(37)+3
  Such that:it(37) =< D-G
it(37) >= A-G

  with precondition: [A=B,A=C,A=D,E>=0,F>=0,A>=E+1,G>=F+1,A>=G+1] 


#### Cost of loops [39] 

 * loop 39:17_loop(A,B,C,D,E,F,G,H) -> [17_loop(A',B',C',D',E',F',G',H')] 
26*s(2)+38
  Such that:s(2) =< E'-G'-2
s(2) >= A-G-1

#### Cost of phase [39]:17_loop(A,B,C,D,E,F,G,H) -> [17_loop(A',B',C',D',E',F',G',H')] 
38*it(39)+26*s(3)+0
  Such that:aux(3) =< -A+G+1
aux(4) =< A-1
it(39) =< G+1
it(39) =< G-G'
s(3) =< it(39)*aux(4)
aux(1) =< it(39)
aux(2) >= A-G-1
it(39) >= G-G'
aux(1) >= it(39)
s(3) >= aux(1)*aux(2)+aux(1)*aux(1)* (1/2)- (aux(3)*aux(1)+aux(1)* (1/2))

#### Cost of chains of 17_loop(A,B,C,D,E,F,G,H):
* Chain [[39],38]: 38*it(39)+26*s(3)+2
  Such that:aux(3) =< -A+G+1
aux(4) =< E-1
it(39) =< G+1
s(3) =< it(39)*aux(4)
aux(1) =< it(39)
aux(2) >= D-G-1
it(39) >= G+1
aux(1) >= it(39)
s(3) >= aux(1)*aux(2)+aux(1)*aux(1)* (1/2)- (aux(3)*aux(1)+aux(1)* (1/2))

  with precondition: [A=B,A=C,A=D,A=E,F>=0,G>=0,A>=F+1,A>=G+2] 

* Chain [38]: 2
  with precondition: [G+1=0,A=B,A=C,A=D,A=E,F>=0,A>=F+1] 


#### Cost of loops [41] 

 * loop 41:10_loop(A,B,C,D,E,F,G,H) -> [10_loop(A',B',C',D',E',F',G',H')] 
38*s(12)+26*s(13)+39
  Such that:s(10) =< E'-1
s(12) =< s(10)
s(13) =< s(12)*s(10)
s(14) =< s(12)
s(11) >= 1
s(12) >= C'-1
s(14) >= s(12)
s(13) >= s(14)*s(11)+s(14)*s(14)* (1/2)-s(14)* (1/2)

#### Cost of phase [41]:10_loop(A,B,C,D,E,F,G,H) -> [10_loop(A',B',C',D',E',F',G',H')] 
39*it(41)+38*s(15)+26*s(16)+0
  Such that:it(41) =< A-F
it(41) =< A-F-A'+F'
it(41) =< B-F
it(41) =< B-F-B'+F'
s(10) =< C-1
it(41) =< C-F
it(41) =< C-F-C'+F'
it(41) =< D-F
it(41) =< D-F-D'+F'
it(41) =< E-F
it(41) =< E-F-E'+F'
aux(7) =< s(10)
s(18) =< it(41)*aux(7)
s(15) =< s(18)
s(16) =< s(15)*s(10)
s(17) =< s(15)
s(11) >= 1
it(41) >= A-F-A'+F'
it(41) >= B-F-B'+F'
s(12) >= C-1
it(41) >= C-F-C'+F'
it(41) >= D-F-D'+F'
it(41) >= E-F-E'+F'
s(15) >= -F+F'
aux(6) >= s(12)
s(15) >= it(41)*aux(6)
s(17) >= s(15)
s(14) >= s(12)
s(16) >= s(17)*s(11)+s(17)*s(14)* (1/2)-s(17)* (1/2)

#### Cost of chains of 10_loop(A,B,C,D,E,F,G,H):
* Chain [[41],40]: 39*it(41)+38*s(15)+26*s(16)+3
  Such that:s(10) =< D-1
it(41) =< D-F
aux(7) =< s(10)
s(18) =< it(41)*aux(7)
s(15) =< s(18)
s(16) =< s(15)*s(10)
s(17) =< s(15)
s(11) >= 1
s(12) >= B-1
aux(8) >= B-F
it(41) >= aux(8)
s(15) >= aux(8)
aux(6) >= s(12)
s(15) >= it(41)*aux(6)
s(17) >= s(15)
s(12) >= s(12)
s(16) >= s(17)*s(11)+s(17)*s(12)* (1/2)-s(17)* (1/2)

  with precondition: [A=B,A=C,A=D,A=E,A>=2,F>=0,A>=F+1] 

* Chain [42,40]: 42
  with precondition: [A=1,B=1,C=1,D=1,E=1,F=0] 

* Chain [40]: 3
  with precondition: [A=B,A=C,A=D,A=E,A=F,A>=0] 


#### Cost of loops [44] 

 * loop 44:18_loop(A,B,C,D,E,F,G) -> [18_loop(A',B',C',D',E',F',G')] 
30
#### Cost of phase [44]:18_loop(A,B,C,D,E,F,G) -> [18_loop(A',B',C',D',E',F',G')] 
30*it(44)+0
  Such that:it(44) =< A-G
it(44) =< A-G-A'+G'
it(44) =< B-G
it(44) =< B-G-B'+G'
it(44) =< C-G
it(44) =< C-G-C'+G'
it(44) =< D-G
it(44) =< D-G-D'+G'
it(44) >= A-G-A'+G'
it(44) >= B-G-B'+G'
it(44) >= C-G-C'+G'
it(44) >= D-G-D'+G'

#### Cost of chains of 18_loop(A,B,C,D,E,F,G):
* Chain [[44],43]: 30*it(44)+3
  Such that:it(44) =< D-G
it(44) >= A-G

  with precondition: [A=B,A=C,A=D,E>=0,G>=0,F>=E+1,A>=F+1,A>=G+1] 


#### Cost of loops [46] 

 * loop 46:11_loop(A,B,C,D,E,F,G) -> [11_loop(A',B',C',D',E',F',G')] 
30*s(20)+10
  Such that:s(20) =< A
s(20) >= A

#### Cost of phase [46]:11_loop(A,B,C,D,E,F,G) -> [11_loop(A',B',C',D',E',F',G')] 
10*it(46)+30*s(21)+0
  Such that:it(46) =< A-F
it(46) =< A-F-A'+F'
aux(10) =< B
it(46) =< B-F
it(46) =< B-F-B'+F'
it(46) =< C-F
it(46) =< C-F-C'+F'
it(46) =< D-F
it(46) =< D-F-D'+F'
s(21) =< it(46)*aux(10)
it(46) >= A-F-A'+F'
aux(9) >= B
it(46) >= B-F-B'+F'
it(46) >= C-F-C'+F'
it(46) >= D-F-D'+F'
s(21) >= -2*F+2*F'
s(21) >= it(46)*aux(9)

#### Cost of chains of 11_loop(A,B,C,D,E,F,G):
* Chain [[46],45]: 10*it(46)+30*s(21)+3
  Such that:aux(10) =< D
it(46) =< D-F
s(21) =< it(46)*aux(10)
aux(9) >= D
it(46) >= D-F
s(21) >= 2*D-2*F
s(21) >= it(46)*aux(9)

  with precondition: [A=B,A=C,A=D,E>=0,F>=E+1,A>=F+1] 


#### Cost of loops [48] 

 * loop 48:7_loop(A,B,C,D,E,F,G) -> [7_loop(A',B',C',D',E',F',G')] 
10*s(26)+30*s(28)+14
  Such that:s(26) =< -E+D'-1
s(27) =< D'
s(28) =< s(26)*s(27)
s(28) >= -2*E+2*B'-2
s(26) >= -E+B'-1
s(29) >= B'
s(28) >= s(26)*s(29)

#### Cost of phase [48]:7_loop(A,B,C,D,E,F,G) -> [7_loop(A',B',C',D',E',F',G')] 
14*it(48)+10*s(30)+30*s(31)+0
  Such that:it(48) =< A-E-A'+E'
s(27) =< B
it(48) =< B-E-1
it(48) =< B-E-B'+E'
it(48) =< C-E-1
it(48) =< C-E-C'+E'
it(48) =< D-E-1
it(48) =< D-E-D'+E'
aux(15) =< A-E-1
it(48) =< aux(15)
s(30) =< it(48)*aux(15)
aux(11) =< it(48)
s(31) =< s(30)*s(27)
it(48) >= A-E-A'+E'
aux(12) >= 2*A-2*E-2
s(29) >= B
it(48) >= B-E-B'+E'
it(48) >= C-E-C'+E'
it(48) >= D-E-D'+E'
aux(11) >= it(48)
aux(13) >= aux(11)*aux(12)+aux(11)-aux(11)*aux(11)
s(31) >= aux(11)*aux(12)+aux(11)-aux(11)*aux(11)
s(30) >= aux(13)* (1/2)
s(31) >= s(30)*s(29)

#### Cost of chains of 7_loop(A,B,C,D,E,F,G):
* Chain [[48],47]: 14*it(48)+10*s(30)+30*s(31)+5
  Such that:s(27) =< B
aux(16) =< B-E-1
it(48) =< aux(16)
s(30) =< it(48)*aux(16)
aux(11) =< it(48)
s(31) =< s(30)*s(27)
s(29) >= B
it(48) >= B-E-1
aux(12) >= 2*B-2*E-2
aux(11) >= it(48)
aux(13) >= aux(11)*aux(12)+aux(11)-aux(11)*aux(11)
s(31) >= aux(11)*aux(12)+aux(11)-aux(11)*aux(11)
s(30) >= aux(13)* (1/2)
s(31) >= s(30)*s(29)

  with precondition: [A=B,A=C,A=D,E>=0,A>=E+2] 

* Chain [47]: 5
  with precondition: [A=B,A=C,A=D,E>=0,E+1>=A] 


#### Cost of loops [50] 

 * loop 50:27_loop(A,B,C) -> [27_loop(A',B',C')] 
9
#### Cost of phase [50]:27_loop(A,B,C) -> [27_loop(A',B',C')] 
9*it(50)+0
  Such that:it(50) =< A-C
it(50) =< A-C-A'+C'
it(50) =< B-C
it(50) =< B-C-B'+C'
it(50) >= A-C-A'+C'
it(50) >= B-C-B'+C'

#### Cost of chains of 27_loop(A,B,C):
* Chain [[50],49]: 9*it(50)+3
  Such that:it(50) =< B-C
it(50) >= A-C

  with precondition: [A=B,C>=0,A>=C+1] 

* Chain [49]: 3
  with precondition: [B=A,B=C,B>=0] 


#### Cost of chains of 95(A,B,C):
* Chain [52]: 5
  with precondition: [0>=C] 

* Chain [51]: 2
  with precondition: [C>=1] 


#### Cost of loops [53,54,55,56] 

 * loop 53:34_loop(A,B,C,D,E,F,G,H) -> [34_loop(A',B',C',D',E',F',G',H')] 
24
 * loop 54:34_loop(A,B,C,D,E,F,G,H) -> [34_loop(A',B',C',D',E',F',G',H')] 
27
 * loop 55:34_loop(A,B,C,D,E,F,G,H) -> [34_loop(A',B',C',D',E',F',G',H')] 
22
 * loop 56:34_loop(A,B,C,D,E,F,G,H) -> [34_loop(A',B',C',D',E',F',G',H')] 
25
#### Cost of phase [53,54,55,56]:34_loop(A,B,C,D,E,F,G,H) -> [34_loop(A',B',C',D',E',F',G',H')] 
24*it(53)+27*it(54)+22*it(55)+25*it(56)+0
  Such that:it(53)+it(54)+it(55)+it(56) =< A-F
it(53)+it(54)+it(55)+it(56) =< A-F-A'+F'
it(53)+it(54)+it(55)+it(56) =< B-F
it(53)+it(54)+it(55)+it(56) =< B-F-B'+F'
it(53)+it(54)+it(55)+it(56) >= A-F-A'+F'
it(53)+it(54)+it(55)+it(56) >= B-F-B'+F'

#### Cost of chains of 34_loop(A,B,C,D,E,F,G,H):
* Chain [[53,54,55,56],57]: 24*it(53)+27*it(54)+22*it(55)+25*it(56)+3
  Such that:it(56)+it(55)+it(54)+it(53) =< A-F
it(56)+it(55)+it(54)+it(53) >= A-F

  with precondition: [A=B,C>=0,F>=0,A>=C+1,A>=F+1] 


#### Cost of loops [59] 

 * loop 59:30_loop(A,B,C,D,E,F,G,H,I) -> [30_loop(A',B',C',D',E',F',G',H',I')] 
25*s(39)+22*s(38)+27*s(37)+24*s(36)+16
  Such that:s(36)+s(37)+s(38)+s(39) =< A'
s(36)+s(37)+s(38)+s(39) >= A'

#### Cost of phase [59]:30_loop(A,B,C,D,E,F,G,H,I) -> [30_loop(A',B',C',D',E',F',G',H',I')] 
16*it(59)+25*s(40)+22*s(41)+27*s(42)+24*s(43)+0
  Such that:aux(18) =< A
it(59) =< A-D
it(59) =< A-D-A'+D'
it(59) =< B-D
it(59) =< B-D-B'+D'
it(59) =< C-D
it(59) =< C-D-C'+D'
s(40)+s(41)+s(42)+s(43) =< it(59)*aux(18)
aux(17) >= A
it(59) >= A-D-A'+D'
it(59) >= B-D-B'+D'
it(59) >= C-D-C'+D'
s(40)+s(41)+s(42)+s(43) >= -D+D'
s(40)+s(41)+s(42)+s(43) >= it(59)*aux(17)

#### Cost of chains of 30_loop(A,B,C,D,E,F,G,H,I):
* Chain [[59],58]: 16*it(59)+25*s(40)+22*s(41)+27*s(42)+24*s(43)+3
  Such that:aux(18) =< C
it(59) =< C-D
s(40)+s(41)+s(42)+s(43) =< it(59)*aux(18)
aux(17) >= C
aux(19) >= C-D
it(59) >= aux(19)
s(40)+s(41)+s(42)+s(43) >= aux(19)
s(40)+s(41)+s(42)+s(43) >= it(59)*aux(17)

  with precondition: [A=B,A=C,D>=0,A>=D+1,G>=D] 

* Chain [58]: 3
  with precondition: [A=B,A=C,A=D,A>=0,G>=A] 


#### Cost of loops [60,61,62,63] 

 * loop 60:40_loop(A,B,C,D,E,F,G,H,I,J) -> [40_loop(A',B',C',D',E',F',G',H',I',J')] 
36
 * loop 61:40_loop(A,B,C,D,E,F,G,H,I,J) -> [40_loop(A',B',C',D',E',F',G',H',I',J')] 
39
 * loop 62:40_loop(A,B,C,D,E,F,G,H,I,J) -> [40_loop(A',B',C',D',E',F',G',H',I',J')] 
32
 * loop 63:40_loop(A,B,C,D,E,F,G,H,I,J) -> [40_loop(A',B',C',D',E',F',G',H',I',J')] 
35
#### Cost of phase [60,61,62,63]:40_loop(A,B,C,D,E,F,G,H,I,J) -> [40_loop(A',B',C',D',E',F',G',H',I',J')] 
36*it(60)+39*it(61)+32*it(62)+35*it(63)+0
  Such that:it(60)+it(61)+it(62)+it(63) =< A-H
it(60)+it(61)+it(62)+it(63) =< A-H-A'+H'
it(60)+it(61)+it(62)+it(63) =< B-H
it(60)+it(61)+it(62)+it(63) =< B-H-B'+H'
it(60)+it(61)+it(62)+it(63) =< C-H
it(60)+it(61)+it(62)+it(63) =< C-H-C'+H'
it(60)+it(61)+it(62)+it(63) =< D-H
it(60)+it(61)+it(62)+it(63) =< D-H-D'+H'
it(60)+it(61)+it(62)+it(63) >= A-H-A'+H'
it(60)+it(61)+it(62)+it(63) >= B-H-B'+H'
it(60)+it(61)+it(62)+it(63) >= C-H-C'+H'
it(60)+it(61)+it(62)+it(63) >= D-H-D'+H'

#### Cost of chains of 40_loop(A,B,C,D,E,F,G,H,I,J):
* Chain [[60,61,62,63],64]: 36*it(60)+39*it(61)+32*it(62)+35*it(63)+3
  Such that:it(63)+it(62)+it(61)+it(60) =< B-H
it(63)+it(62)+it(61)+it(60) >= C-H

  with precondition: [A=B,A=C,A=D,E>=0,A>=E+2,H>=E,A>=H+1] 


#### Cost of loops [66] 

 * loop 66:53_loop(A,B,C,D,E,F,G,H) -> [53_loop(A',B',C',D',E',F',G',H')] 
24
#### Cost of phase [66]:53_loop(A,B,C,D,E,F,G,H) -> [53_loop(A',B',C',D',E',F',G',H')] 
24*it(66)+0
  Such that:it(66) =< A-H
it(66) =< A-H-A'+H'
it(66) =< B-H
it(66) =< B-H-B'+H'
it(66) =< C-H
it(66) =< C-H-C'+H'
it(66) >= A-H-A'+H'
it(66) >= B-H-B'+H'
it(66) >= C-H-C'+H'

#### Cost of chains of 53_loop(A,B,C,D,E,F,G,H):
* Chain [[66],65]: 24*it(66)+3
  Such that:it(66) =< C-H
it(66) >= A-H

  with precondition: [A=B,A=C,D>=0,E>=D+1,H>=D+1,A>=E+1,A>=H+1] 


#### Cost of loops [68] 

 * loop 68:47_loop(A,B,C,D,E,F,G,H) -> [47_loop(A',B',C',D',E',F',G',H')] 
24*s(45)+36
  Such that:s(45) =< -D+C'-1
s(45) >= A-D-1

#### Cost of phase [68]:47_loop(A,B,C,D,E,F,G,H) -> [47_loop(A',B',C',D',E',F',G',H')] 
36*it(68)+24*s(46)+0
  Such that:aux(21) =< A-D-1
it(68) =< A-E
it(68) =< A-E-A'+E'
it(68) =< B-E
it(68) =< B-E-B'+E'
it(68) =< C-E
it(68) =< C-E-C'+E'
s(46) =< it(68)*aux(21)
aux(20) >= A-D-1
it(68) >= A-E-A'+E'
it(68) >= B-E-B'+E'
it(68) >= C-E-C'+E'
s(46) >= -E+E'
s(46) >= it(68)*aux(20)

#### Cost of chains of 47_loop(A,B,C,D,E,F,G,H):
* Chain [[68],67]: 36*it(68)+24*s(46)+3
  Such that:aux(21) =< C-D-1
it(68) =< C-E
s(46) =< it(68)*aux(21)
aux(20) >= A-D-1
aux(22) >= A-E
it(68) >= aux(22)
s(46) >= aux(22)
s(46) >= it(68)*aux(20)

  with precondition: [A=B,A=C,D>=0,E>=D+1,A>=E+1] 


#### Cost of loops [70] 

 * loop 70:33_loop(A,B,C,D,E,F,G,H,I,J,K,L,M) -> [33_loop(A',B',C',D',E',F',G',H',I',J',K',L',M')] 
35*s(59)+32*s(58)+39*s(57)+36*s(56)+36*s(62)+24*s(63)+35
  Such that:s(56)+s(57)+s(58)+s(59) =< D'-F'+1
s(60) =< D'-F'
s(62) =< s(60)
s(63) =< s(62)*s(60)
s(56)+s(57)+s(58)+s(59) >= D'-F'+1
s(61) >= D'-F'
s(61) >= s(61)
s(62) >= s(61)
s(63) >= s(61)
s(63) >= s(62)*s(61)

#### Cost of phase [70]:33_loop(A,B,C,D,E,F,G,H,I,J,K,L,M) -> [33_loop(A',B',C',D',E',F',G',H',I',J',K',L',M')] 
35*it(70)+35*s(64)+32*s(65)+39*s(66)+36*s(67)+36*s(68)+24*s(69)+0
  Such that:it(70) =< A-F-A'+F'
it(70) =< B-F-1
it(70) =< B-F-B'+F'
it(70) =< C-F-1
it(70) =< C-F-C'+F'
it(70) =< D-F-1
it(70) =< D-F-D'+F'
aux(31) =< A-F-1
it(70) =< aux(31)
aux(30) =< aux(31)+1
aux(29) =< aux(31)
aux(25) =< it(70)
s(64)+s(65)+s(66)+s(67) =< it(70)*aux(30)
s(71) =< it(70)*aux(29)
s(68) =< s(71)
s(69) =< s(68)*aux(31)
s(61) >= 1
aux(26) >= A-F-1
aux(28) >= A-F
it(70) >= A-F-A'+F'
it(70) >= B-F-B'+F'
it(70) >= C-F-C'+F'
it(70) >= D-F-D'+F'
aux(25) >= it(70)
s(64)+s(65)+s(66)+s(67) >= aux(25)*aux(28)+aux(25)* (1/2)-aux(25)*aux(25)* (1/2)
s(70) >= aux(25)*aux(26)+aux(25)* (1/2)-aux(25)*aux(25)* (1/2)
s(70) >= s(70)
s(61) >= s(61)
s(68) >= s(70)
s(69) >= s(70)
s(69) >= s(68)*s(61)

#### Cost of chains of 33_loop(A,B,C,D,E,F,G,H,I,J,K,L,M):
* Chain [[70],69]: 35*it(70)+35*s(64)+32*s(65)+39*s(66)+36*s(67)+36*s(68)+24*s(69)+5
  Such that:aux(32) =< C-F-1
it(70) =< aux(32)
aux(30) =< aux(32)+1
aux(29) =< aux(32)
aux(25) =< it(70)
s(64)+s(65)+s(66)+s(67) =< it(70)*aux(30)
s(71) =< it(70)*aux(29)
s(68) =< s(71)
s(69) =< s(68)*aux(32)
s(61) >= 1
aux(28) >= A-F
aux(33) >= A-F-1
aux(33) >= aux(33)
it(70) >= aux(33)
aux(25) >= it(70)
s(64)+s(65)+s(66)+s(67) >= aux(25)*aux(28)+aux(25)* (1/2)-aux(25)*aux(25)* (1/2)
s(70) >= aux(25)*aux(33)+aux(25)* (1/2)-aux(25)*aux(25)* (1/2)
s(70) >= s(70)
s(61) >= s(61)
s(68) >= s(70)
s(69) >= s(70)
s(69) >= s(68)*s(61)

  with precondition: [A=B,A=C,A=D,F>=0,A>=F+2] 

* Chain [69]: 5
  with precondition: [A=B,A=C,A=D,F>=0,F+1>=A] 


#### Cost of chains of Inverse_invert([[D)[[D(A):
* Chain [73]: 62
  with precondition: [A=0] 

* Chain [72]: 36*s(72)+25*s(78)+22*s(79)+27*s(80)+24*s(81)+101
  Such that:aux(34) =< 1
s(72) =< aux(34)
s(78)+s(79)+s(80)+s(81) =< s(72)*aux(34)
aux(35) >= 1
s(72) >= aux(35)
aux(35) >= aux(35)
s(78)+s(79)+s(80)+s(81) >= aux(35)
s(78)+s(79)+s(80)+s(81) >= s(72)*aux(35)

  with precondition: [A=1] 

* Chain [71]: 75*s(82)+25*s(88)+22*s(89)+27*s(90)+24*s(91)+35*s(96)+35*s(100)+32*s(101)+39*s(102)+36*s(103)+36*s(106)+24*s(107)+14*s(111)+10*s(113)+30*s(116)+38*s(122)+26*s(126)+62
  Such that:aux(36) =< A-1
aux(37) =< A
s(82) =< aux(37)
s(98) =< aux(36)
s(125) =< s(82)*s(98)
s(122) =< s(125)
s(126) =< s(122)*aux(36)
s(127) =< s(122)
s(111) =< aux(36)
s(113) =< s(111)*aux(36)
s(114) =< s(111)
s(116) =< s(113)*aux(37)
s(96) =< aux(36)
s(97) =< aux(36)+1
s(99) =< s(96)
s(100)+s(101)+s(102)+s(103) =< s(96)*s(97)
s(104) =< s(96)*s(98)
s(106) =< s(104)
s(107) =< s(106)*aux(36)
s(88)+s(89)+s(90)+s(91) =< s(82)*aux(37)
s(112) >= 2*A-2
aux(38) >= 1
aux(39) >= A-1
aux(40) >= A
s(93) >= aux(38)
aux(38) >= aux(38)
s(95) >= aux(39)
s(111) >= aux(39)
s(120) >= aux(39)
s(82) >= aux(40)
aux(40) >= aux(40)
s(122) >= aux(40)
s(124) >= s(120)
s(122) >= s(82)*s(124)
s(127) >= s(122)
s(120) >= s(120)
s(126) >= s(127)*aux(38)+s(127)*s(120)* (1/2)-s(127)* (1/2)
s(114) >= s(111)
s(115) >= s(114)*s(112)+s(114)-s(114)*s(114)
s(116) >= s(114)*s(112)+s(114)-s(114)*s(114)
s(113) >= s(115)* (1/2)
s(116) >= s(113)*aux(40)
s(95) >= s(95)
s(96) >= s(95)
s(99) >= s(96)
s(100)+s(101)+s(102)+s(103) >= s(99)*aux(40)+s(99)* (1/2)-s(99)*s(99)* (1/2)
s(105) >= s(99)*s(95)+s(99)* (1/2)-s(99)*s(99)* (1/2)
s(105) >= s(105)
s(93) >= s(93)
s(106) >= s(105)
s(107) >= s(105)
s(107) >= s(106)*s(93)
s(88)+s(89)+s(90)+s(91) >= aux(40)
s(88)+s(89)+s(90)+s(91) >= s(82)*aux(40)

  with precondition: [A>=2] 


Closed-form bounds of Inverse_invert([[D)[[D(A): 
-------------------------------------
* Chain [73] with precondition: [A=0] 
    - Lower bound: 62 
    - Complexity: constant
 * Chain [72] with precondition: [A=1] 
    - Lower bound: 159 
    - Complexity: constant
 * Chain [71] with precondition: [A>=2] 
    - Lower bound: 79*A-79+ (75*A+62+22*A*A+15*A*nat(A-1+ (A-1)* - (A-1)+ (2*A-2)* (A-1))+nat(A/2-1/2+ (A-1)*A+ (A-1)* (-A/2+1/2))*32+nat(A-1+ (A-1)* - (A-1)+ (2*A-2)* (A-1))*5)+ (51*A-51)*A+ (A-1)* ((13*A-13)*A)+ (30*A-30)* (A-1) 
    - Complexity: n^3
 
### Partitioned lower bound of Inverse_invert([[D)[[D(A): 
* 62 
 if [A=0]
* 159 
 if [A=1]
* 79*A-79+ (75*A+62+22*A*A+15*A*nat(A-1+ (A-1)* - (A-1)+ (2*A-2)* (A-1))+nat(A/2-1/2+ (A-1)*A+ (A-1)* (-A/2+1/2))*32+nat(A-1+ (A-1)* - (A-1)+ (2*A-2)* (A-1))*5)+ (51*A-51)*A+ (A-1)* ((13*A-13)*A)+ (30*A-30)* (A-1) 
 if [A>=2]
Possible lower bounds : [62,159,79*A-79+ (75*A+62+22*A*A+15*A*nat(A-1+ (A-1)* - (A-1)+ (2*A-2)* (A-1))+nat(A/2-1/2+ (A-1)*A+ (A-1)* (-A/2+1/2))*32+nat(A-1+ (A-1)* - (A-1)+ (2*A-2)* (A-1))*5)+ (51*A-51)*A+ (A-1)* ((13*A-13)*A)+ (30*A-30)* (A-1)]
Maximum lower bound complexity: n^3

Time statistics: 
-------------------------------------
* Partial evaluation computed in 769 ms.
* Invariants computed in 720 ms.
   - Backward Invariants 270 ms.
   - Transitive Invariants 199 ms.
* Refinement performed in 853 ms.
* Termination proved in 375 ms.
* Upper bounds computed in 2198 ms.
   - Equation cost structures 573 ms.
   - Phase cost structures 1161 ms.
   - Chain cost structures 570 ms.
   - Solving cost expressions 48 ms.
* Total analysis performed in 5599 ms.


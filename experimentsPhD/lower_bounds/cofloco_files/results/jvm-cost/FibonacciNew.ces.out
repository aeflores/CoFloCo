
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive : [6/2]
1. non_recursive : [7/3]
2. non_recursive : [10_normal/4]
3. non_recursive : [3/1]
4. recursive : [2/1,4/2,8/3,9_normal/3,pubs/Fibonacci_fibonacciMethod(I)I/1]
5. non_recursive : [fibonacciMethod/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into 8/3
5. SCC is partially evaluated into fibonacciMethod/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations 8/3 
* CE 4 is refined into CE [5] 
* CE 3 is refined into CE [6] 


#### Refined cost equations 8/3 
* CE 5: 8(A,A,B) = 2
     [1>=A,B=1] 
* CE 6: 8(A,A,B) = 16+ 8(C,D,E)+ 8(F,G,H)
     [A>=2,A=G+2,A=F+2,A=D+1,A=C+1,H=1,E=1,B=1] 

### Cost equations --> "Loop" of 8/3 
* CEs [6] --> Loop 4 
* CEs [5] --> Loop 5 

#### Loops of 8/3 
* Loop 4: 8(A,A,B)->  8(A',B',C')  8(A'2,B'2,C'2)
                  [A>=2,A=B'2+2,A=A'2+2,A=B'+1,A=A'+1,C'2=1,C'=1,B=1] 
* Loop 5: 8(A,A,B) [1>=A,B=1] 

### Ranking functions of CR 8(A,B,C) 
* RF of phase [4]: [A-1]

#### Partial ranking functions of CR 8(A,B,C) 
* Partial RF of phase [4]:
  - RF of loop [4:1]:
    A-1
    B-1
  - RF of loop [4:2]:
    A/2-1/2
    B/2-1/2


### Resulting Chains:8(A,B,C) 
* [5]
* [multiple([4],[[5]])]


### Specialization of cost equations fibonacciMethod/1 
* CE 2 is refined into CE [7,8] 


#### Refined cost equations fibonacciMethod/1 
* CE 7: fibonacciMethod(A) = 3+ 8(A,A,B):[5]
     [1>=A,B=1] 
* CE 8: fibonacciMethod(A) = 3+ 8(A,A,B):[multiple([4],[[5]])]
     [A>=2,B=1] 

### Cost equations --> "Loop" of fibonacciMethod/1 
* CEs [8] --> Loop 6 
* CEs [7] --> Loop 7 

#### Loops of fibonacciMethod/1 
* Loop 6: fibonacciMethod(A) [A>=2] 
* Loop 7: fibonacciMethod(A) [1>=A] 

### Ranking functions of CR fibonacciMethod(A) 

#### Partial ranking functions of CR fibonacciMethod(A) 


### Resulting Chains:fibonacciMethod(A) 
* [7]
* [6]


Computing Bounds
=====================================

#### Cost of loops [4] 

 * loop 4:8(A,B,C) -> [8(A',B',C'),8(A'2,B'2,C'2)] 
16
#### Cost of phase [4]:8(A,B,C) -> [] 
16*it(4)+2*it([5])+0
#### Cost of chains of 8(A,B,C):
* Chain [5]: 2
  with precondition: [C=1,B=A,1>=B] 

* Chain [multiple([4],[[5]])]: 16*it(4)+2*it([5])+0
  with precondition: [C=1,A=B,A>=2] 


#### Cost of chains of fibonacciMethod(A):
* Chain [7]: 5
  with precondition: [1>=A] 

* Chain [6]: 18*s(1)+3
  with precondition: [A>=2] 


Closed-form bounds of fibonacciMethod(A): 
-------------------------------------
* Chain [7] with precondition: [1>=A] 
    - Lower bound: 5 
    - Complexity: constant
 * Chain [6] with precondition: [A>=2] 
    - Lower bound: 3 
    - Complexity: constant
 
### Partitioned lower bound of fibonacciMethod(A): 
* 3 
 if [A>=2]
* 5 
 if [1>=A]
Possible lower bounds : [3,5]
Maximum lower bound complexity: constant

Time statistics: 
-------------------------------------
* Partial evaluation computed in 26 ms.
* Invariants computed in 28 ms.
   - Backward Invariants 8 ms.
   - Transitive Invariants 9 ms.
* Refinement performed in 31 ms.
* Termination proved in 19 ms.
* Upper bounds computed in 76 ms.
   - Equation cost structures 11 ms.
   - Phase cost structures 64 ms.
   - Chain cost structures 0 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 213 ms.


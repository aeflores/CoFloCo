
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive : [2/5]
1. non_recursive : [30_normal/6]
2. non_recursive : [12_loop_nexit/5]
3. non_recursive : [25/1]
4. non_recursive : [testing/recursion/ms_COUNTPOINT()V/1]
5. recursive : [12_loop/5,15/5,33_normal/5,37/7]
6. non_recursive : [18/9]
7. non_recursive : [36_normal/10]
8. non_recursive : [12/9]
9. non_recursive : [38_normal/10]
10. non_recursive : [9_loop_nexit/8]
11. recursive : [11/8,16/8,17/8,20/8,21/8,22/8,31_normal/8,32/10,34/10,35/10,39/10,9_loop/8]
12. non_recursive : [9/9]
13. non_recursive : [testing/recursion/ms_merge([IIII)V/5]
14. non_recursive : [29_normal/6]
15. recursive : [27/7,28_normal/6,3/5,ms_sort/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into 12_loop/5
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into 9_loop/8
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is partially evaluated into ms_sort/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations 12_loop/5 
* CE 10 is refined into CE [11] 
* CE 9 is refined into CE [12] 


#### Refined cost equations 12_loop/5 
* CE 11: 12_loop(A,B,C,D,B) = 1+ 12_loop(A,B,C,E,B)
     [C>=D,B>=0,D+1=E] 
* CE 12: 12_loop(A,B,C,D,B) = 0
     [D>=C+1,B>=0] 

### Cost equations --> "Loop" of 12_loop/5 
* CEs [12] --> Loop 10 
* CEs [11] --> Loop 11 

#### Loops of 12_loop/5 
* Loop 10: 12_loop(A,B,C,D,B) [D>=C+1,B>=0] 
* Loop 11: 12_loop(A,B,C,D,B)->  12_loop(A,B,C,A',B)
                  [C>=D,B>=0,D+1=A'] 

### Ranking functions of CR 12_loop(A,B,C,D,E) 
* RF of phase [11]: [C-D+1]

#### Partial ranking functions of CR 12_loop(A,B,C,D,E) 
* Partial RF of phase [11]:
  - RF of loop [11:1]:
    C-D+1


### Resulting Chains:12_loop(A,B,C,D,E) 
* [[11],10]


### Specialization of cost equations 9_loop/8 
* CE 8 is refined into CE [13] 
* CE 6 is refined into CE [14] 
* CE 7 is refined into CE [15] 
* CE 5 is refined into CE [16] 
* CE 4 is refined into CE [17] 


#### Refined cost equations 9_loop/8 
* CE 13: 9_loop(A,B,C,D,E,F,G,B) = 0
     [F+2*C>=2*D+E+1,3*C>=2*D+F+2,3*C>=2*D+E+1,E>=F,E>=C+1,B>=0,D+E+1=F+G] 
* CE 14: 9_loop(A,B,C,D,E,F,G,B) = 1+ 9_loop(A,B,C,D,H,F,I,B)
     [C+F>=2*D,C>=G,D>=F,G>=D+1,B>=0,F+G=D+H,F+G=D+E+1,G+1=I] 
* CE 15: 9_loop(A,B,C,D,E,F,G,B) = 1+ 9_loop(A,B,C,D,H,F,I,B)
     [E>=F,C>=E,F>=D+1,B>=0,D+E+2=F+I,D+E+1=F+G,E+1=H] 
* CE 16: 9_loop(A,B,C,D,E,F,G,B) = 1+ 9_loop(A,B,C,D,H,I,G,B)
     [C+F>=2*D,C>=G,D>=F,G>=D+1,B>=0,F+G=D+H,F+G=D+E+1,F+1=I] 
* CE 17: 9_loop(A,B,C,D,E,F,G,B) = 1+ 9_loop(A,B,C,D,H,I,J,B)
     [D+E>=C+F,F+2*C>=2*D+E+1,C+F>=2*D,C>=E,B>=0,F+J=D+E+1,F+G=D+E+1,F+1=I,E+1=H] 

### Cost equations --> "Loop" of 9_loop/8 
* CEs [14] --> Loop 12 
* CEs [16] --> Loop 13 
* CEs [15] --> Loop 14 
* CEs [17] --> Loop 15 
* CEs [13] --> Loop 16 

#### Loops of 9_loop/8 
* Loop 12: 9_loop(A,B,C,D,E,F,G,B)->  9_loop(A,B,C,D,A',F,B',B)
                  [C+F>=2*D,C>=G,D>=F,G>=D+1,B>=0,F+G=D+A',F+G=D+E+1,G+1=B'] 
* Loop 13: 9_loop(A,B,C,D,E,F,G,B)->  9_loop(A,B,C,D,A',B',G,B)
                  [C+F>=2*D,C>=G,D>=F,G>=D+1,B>=0,F+G=D+A',F+G=D+E+1,F+1=B'] 
* Loop 14: 9_loop(A,B,C,D,E,F,G,B)->  9_loop(A,B,C,D,A',F,B',B)
                  [E>=F,C>=E,F>=D+1,B>=0,F+B'=D+E+2,F+G=D+E+1,E+1=A'] 
* Loop 15: 9_loop(A,B,C,D,E,F,G,B)->  9_loop(A,B,C,D,A',B',C',B)
                  [D+E>=C+F,F+2*C>=2*D+E+1,C+F>=2*D,C>=E,B>=0,D+E+1=F+C',D+E+1=F+G,F+1=B',E+1=A'] 
* Loop 16: 9_loop(A,B,C,D,E,F,G,B) [F+2*C>=2*D+E+1,3*C>=2*D+F+2,3*C>=2*D+E+1,E>=F,E>=C+1,B>=0,D+E+1=F+G] 

### Ranking functions of CR 9_loop(A,B,C,D,E,F,G,H) 
* RF of phase [12,13]: [C+D-F-G+1,C-E,2*C-F-G]
* RF of phase [14]: [C+D-F-G+2,C-E+1,C-G+1]
* RF of phase [15]: [C+D-F-G+2,C-E+1,C-F,3*C-F-2*G+2,D-F+1,-E+G,-F+G-1]

#### Partial ranking functions of CR 9_loop(A,B,C,D,E,F,G,H) 
* Partial RF of phase [12,13]:
  - RF of loop [12:1]:
    C-D-E+F
    C-G+1
  - RF of loop [12:1,13:1]:
    C-E
  - RF of loop [13:1]:
    C-F
    D-F+1
    -E+G
    -F+G depends on loops [12:1] 
* Partial RF of phase [14]:
  - RF of loop [14:1]:
    C+D-F-G+2
    C-E+1
    C-G+1
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    C+D-F-G+2
    C-E+1
    C-F
    3*C-F-2*G+2
    D-F+1
    -E+G
    -F+G-1


### Resulting Chains:9_loop(A,B,C,D,E,F,G,H) 
* [[12,13],[15],16]
* [[12,13],[14],16]


### Specialization of cost equations ms_sort/4 
* CE 3 is refined into CE [18,19] 
* CE 2 is refined into CE [20] 


#### Refined cost equations ms_sort/4 
* CE 18: ms_sort(A,B,C,D) = 0+ ms_sort(A,B,C,E)+ ms_sort(A,B,F,D)+ 9_loop(A,B,D,G,C,C,F,B):[[12,13],[15],16]+ 12_loop(A,B,D,C,B):[[11],10]
     [2*F>=C+D,C+D+2>=2*F,F>=C+1,D>=F,B>=0,F=E+1,F=G+1] 
* CE 19: ms_sort(A,B,C,D) = 0+ ms_sort(A,B,C,E)+ ms_sort(A,B,F,D)+ 9_loop(A,B,D,G,C,C,F,B):[[12,13],[14],16]+ 12_loop(A,B,D,C,B):[[11],10]
     [2*F>=C+D,C+D+2>=2*F,F>=C+1,D>=F,B>=0,F=E+1,F=G+1] 
* CE 20: ms_sort(A,B,C,D) = 0
     [C>=D] 

### Cost equations --> "Loop" of ms_sort/4 
* CEs [20] --> Loop 17 
* CEs [19] --> Loop 18 
* CEs [18] --> Loop 19 

#### Loops of ms_sort/4 
* Loop 17: ms_sort(A,B,C,D) [C>=D] 
* Loop 18: ms_sort(A,B,C,D)->  ms_sort(A,B,C,D')  ms_sort(A,B,C'2,D)
                  [2*D'+2>=C+D,C+D>=2*D',D>=D'+1,D'>=C,B>=0,D'+1=C'2] 
* Loop 19: ms_sort(A,B,C,D)->  ms_sort(A,B,C,D')  ms_sort(A,B,C'2,D)
                  [2*D'+2>=C+D,C+D>=2*D',D>=D'+1,D'>=C,B>=0,D'+1=C'2] 

### Ranking functions of CR ms_sort(A,B,C,D) 
* RF of phase [18,19]: [-C+D]

#### Partial ranking functions of CR ms_sort(A,B,C,D) 
* Partial RF of phase [18,19]:
  - RF of loop [18:1,18:2,19:1,19:2]:
    -C+D


### Resulting Chains:ms_sort(A,B,C,D) 
* [17]
* [multiple([18,19],[[17]])]


Computing Bounds
=====================================

#### Cost of loops [11] 

 * loop 11:12_loop(A,B,C,D,E) -> [12_loop(A',B',C',D',E')] 
1
#### Cost of phase [11]:12_loop(A,B,C,D,E) -> [12_loop(A',B',C',D',E')] 
1*it(11)+0
  Such that:it(11) =< C-D+1
it(11) =< C-D-C'+D'
it(11) >= C-D-C'+D'

#### Cost of chains of 12_loop(A,B,C,D,E):
* Chain [[11],10]: 1*it(11)+0
  Such that:it(11) =< C-D+1
it(11) >= C-D+1

  with precondition: [B=E,B>=0,C>=D] 


#### Cost of loops [15] 

 * loop 15:9_loop(A,B,C,D,E,F,G,H) -> [9_loop(A',B',C',D',E',F',G',H')] 
1
#### Cost of phase [15]:9_loop(A,B,C,D,E,F,G,H) -> [9_loop(A',B',C',D',E',F',G',H')] 
1*it(15)+0
  Such that:it(15) =< C+D-F-G+2
it(15) =< C+D-F-G-C'-D'+F'+G'
it(15) =< C-E+1
it(15) =< C-E-C'+E'
it(15) =< C-F
it(15) =< C-F-C'+F'
it(15) =< 3*C-F-2*G+2
it(15) =< 3*C-F-2*G-3*C'+F'+2*G'
it(15) =< D-F+1
it(15) =< D-F-D'+F'
it(15) =< -E+G
it(15) =< -E+G+E'-G'
it(15) =< -F+G-1
it(15) =< -F+G+F'-G'
it(15) >= C+D-F-G-C'-D'+F'+G'
it(15) >= C-E-C'+E'
it(15) >= C-F-C'+F'
it(15) >= 3*C-F-2*G-3*C'+F'+2*G'
it(15) >= D-F-D'+F'
it(15) >= -E+G+E'-G'
it(15) >= -F+G+F'-G'

#### Cost of loops [12,13] 

 * loop 12:9_loop(A,B,C,D,E,F,G,H) -> [9_loop(A',B',C',D',E',F',G',H')] 
1
 * loop 13:9_loop(A,B,C,D,E,F,G,H) -> [9_loop(A',B',C',D',E',F',G',H')] 
1
#### Cost of phase [12,13]:9_loop(A,B,C,D,E,F,G,H) -> [9_loop(A',B',C',D',E',F',G',H')] 
1*it(12)+1*it(13)+0
  Such that:it(12) =< C-D-E+F
it(12) =< C-D-E+F-C'+D'+E'-F'
it(12)+it(13) =< C+D-F-G-C'-D'+F'+G'
it(12)+it(13) =< C-E
it(12)+it(13) =< C-E-C'+E'
it(13) =< C-F
it(13) =< C-F-C'+F'
it(12) =< C-G+1
it(12) =< C-G-C'+G'
it(12)+it(13) =< 2*C-F-G
it(12)+it(13) =< 2*C-F-G-2*C'+F'+G'
it(13) =< D-F+1
it(13) =< D-F-D'+F'
it(13) =< -E+G
it(13) =< -E+G+E'-G'
aux(3) =< -F+G
aux(4) =< -F+G+F'-G'
aux(2) =< F-G-F'+G'
aux(5) =< C+D-F-G+1
it(12)+it(13) =< aux(5)
it(13) =< it(12)+aux(4)
it(13) =< it(12)+aux(3)
it(12) >= C-D-E+F-C'+D'+E'-F'
it(12)+it(13) >= C-E-C'+E'
it(13) >= C-F-C'+F'
it(12) >= C-G-C'+G'
it(12)+it(13) >= 2*C-F-G-2*C'+F'+G'
it(13) >= D-F-D'+F'
it(13) >= -E+G+E'-G'
aux(1) >= -F+G+F'-G'
it(13) >= it(12)+aux(1)-aux(2)

#### Cost of loops [14] 

 * loop 14:9_loop(A,B,C,D,E,F,G,H) -> [9_loop(A',B',C',D',E',F',G',H')] 
1
#### Cost of phase [14]:9_loop(A,B,C,D,E,F,G,H) -> [9_loop(A',B',C',D',E',F',G',H')] 
1*it(14)+0
  Such that:it(14) =< C+D-F-G+2
it(14) =< C+D-F-G-C'-D'+F'+G'
it(14) =< C-E+1
it(14) =< C-E-C'+E'
it(14) =< C-G+1
it(14) =< C-G-C'+G'
it(14) >= C+D-F-G-C'-D'+F'+G'
it(14) >= C-E-C'+E'
it(14) >= C-G-C'+G'

#### Cost of phase [12,13]:9_loop(A,B,C,D,E,F,G,H) -> [9_loop(A',B',C',D',E',F',G',H')] 
1*it(12)+1*it(13)+0
  Such that:it(12) =< C-D-E+F
it(12) =< C-D-E+F-C'+D'+E'-F'
it(12)+it(13) =< C+D-F-G-C'-D'+F'+G'
it(12)+it(13) =< C-E
it(12)+it(13) =< C-E-C'+E'
it(13) =< C-F
it(13) =< C-F-C'+F'
it(12) =< C-G+1
it(12) =< C-G-C'+G'
it(12)+it(13) =< 2*C-F-G
it(12)+it(13) =< 2*C-F-G-2*C'+F'+G'
it(13) =< D-F+1
it(13) =< D-F-D'+F'
it(13) =< -E+G
it(13) =< -E+G+E'-G'
aux(3) =< -F+G
aux(4) =< -F+G+F'-G'
aux(2) =< F-G-F'+G'
aux(5) =< C+D-F-G+1
it(12)+it(13) =< aux(5)
it(13) =< it(12)+aux(4)
it(13) =< it(12)+aux(3)
it(12) >= C-D-E+F-C'+D'+E'-F'
it(12)+it(13) >= C-E-C'+E'
it(13) >= C-F-C'+F'
it(12) >= C-G-C'+G'
it(12)+it(13) >= 2*C-F-G-2*C'+F'+G'
it(13) >= D-F-D'+F'
it(13) >= -E+G+E'-G'
aux(1) >= -F+G+F'-G'
it(13) >= it(12)+aux(1)-aux(2)

#### Cost of chains of 9_loop(A,B,C,D,E,F,G,H):
* Chain [[12,13],[15],16]: 1*it(12)+1*it(13)+1*it(15)+0
  Such that:aux(4) =< -C+2*D+E-2*F
it(12) =< C-D-E+F
aux(5) =< C-E
aux(2) =< C-G+1
aux(3) =< D+E-2*F+1
it(13)+it(15) =< D-F+1
it(12)+it(13) =< aux(5)
it(13) =< it(12)+aux(4)
it(13) =< it(12)+aux(3)
it(15) >= 1
aux(1) >= -C+G-1
it(12) >= C-D-E+F
it(13)+it(15) >= D-F+1
it(13) >= it(12)+aux(1)-aux(2)

  with precondition: [B=H,D+E+1=F+G,B>=0,G>=D+1,G>=E+1,C>=G,C+E+1>=D+G] 

* Chain [[12,13],[14],16]: 1*it(12)+1*it(13)+1*it(14)+0
  Such that:it(12)+it(14) =< C-D-E+F
aux(5) =< C-E
aux(2) =< C+E-2*G
aux(3) =< D+E-2*F+1
it(13) =< D-F+1
aux(4) =< -E+G
it(12)+it(13) =< aux(5)
it(13) =< it(12)+aux(4)
it(13) =< it(12)+aux(3)
it(14) >= 1
aux(1) >= -C-E+2*G
it(12)+it(14) >= C-D-E+F
it(13) >= D-F+1
it(13) >= it(12)+aux(1)-aux(2)

  with precondition: [B=H,D+E+1=F+G,B>=0,G>=D+1,G>=E+1,C>=G,C+E+1>=D+G] 


#### Cost of loops [18,19] 

 * loop 18:ms_sort(A,B,C,D) -> [ms_sort(A',B',C',D'),ms_sort(A'2,B'2,C'2,D'2)] 
1*s(14)+1*s(13)+1*s(16)+1*s(11)+0
  Such that:s(10) =< -C+D'2
s(11) =< -C+D'2+1
s(12) =< C-2*D'+D'2-2
s(13)+s(14) =< -C'2+D'2+1
s(15) =< -C+C'2
s(16) =< s(15)
s(14)+s(16) =< s(10)
s(16) =< s(14)+s(15)
s(13) >= 1
s(16) >= -C+D'+1
s(17) >= -C+2*D'-D'2+2
s(11) >= -C+D'2+1
s(13)+s(14) >= -D'+D'2
s(16) >= s(14)+s(17)-s(12)

 * loop 19:ms_sort(A,B,C,D) -> [ms_sort(A',B',C',D'),ms_sort(A'2,B'2,C'2,D'2)] 
1*s(35)+1*s(33)+1*s(32)+1*s(29)+0
  Such that:s(27) =< -C+2*D'-D'2
s(28) =< -C+D'2
s(29) =< -C+D'2+1
s(30) =< -C+C'2
s(31) =< -C'2+D'2+1
s(32)+s(33) =< s(30)
s(35) =< s(31)
s(33)+s(35) =< s(28)
s(33) =< s(35)+s(27)
s(33) =< s(35)+s(30)
s(32) >= 1
s(29) >= -C+D+1
s(32)+s(33) >= -C+D'+1
s(34) >= -D+C'2-1
s(35) >= D-D'
s(33) >= s(35)+s(34)-s(31)

#### Cost of phase [18,19]:ms_sort(A,B,C,D) -> [] 
1*s(36)+1*s(37)+1*s(38)+1*s(39)+1*s(44)+1*s(45)+1*s(46)+1*s(47)+0
  Such that:it(19)+s(41) =< -2*C+2*D
it(18)+it(19)+it([17]) =< -2*C+2*D+1
aux(14) =< -C+D
aux(15) =< aux(14)
aux(16) =< aux(14)+1
s(42) =< it(18)*aux(14)
s(49) =< it(19)*aux(15)
s(47) =< it(19)*aux(16)
s(36)+s(37) =< it(18)*aux(15)
s(39) =< it(18)*aux(16)
s(43) =< it(18)*aux(15)
s(45)+s(46) =< s(49)
s(44) =< s(49)
s(44)+s(45) =< s(49)
s(45) =< s(44)
s(45) =< s(44)+s(49)
s(38) =< s(42)
s(36)+s(38) =< s(43)
s(38) =< s(36)+s(42)
aux(12) >= 2
s(39)+s(47) >= -2*C+2*D
aux(21) >= C-D
aux(33) >= 1
aux(34) >= -C+D
aux(32) >= aux(32)
s(40) >= aux(32)
s(40)+s(48) >= aux(32)
aux(33) >= aux(33)
aux(9)+it(19) >= aux(34)
aux(18)+it(18) >= aux(34)
it(18)+it(19) >= aux(34)
it(18)+s(44) >= aux(34)
it(18)+s(45)+s(46) >= aux(34)
it(19)+s(36)+s(37) >= aux(34)
it(19)+s(38) >= aux(34)
aux(19) >= aux(12)
s(44) >= it(19)*aux(33)
s(48) >= it(19)*aux(21)
s(45)+s(46) >= it(19)*aux(33)
s(46) >= aux(18)
s(36)+s(37) >= it(18)*aux(33)
s(39) >= it(18)*aux(12)
s(40) >= it(18)*aux(32)
s(38) >= it(18)*aux(33)
s(37) >= aux(9)
s(47) >= it(19)*aux(19)
s(45) >= s(44)+s(48)-s(49)
s(38) >= s(36)+s(40)-s(41)

#### Cost of chains of ms_sort(A,B,C,D):
* Chain [17]: 0
  with precondition: [C>=D] 

* Chain [multiple([18,19],[[17]])]: 1*s(36)+1*s(37)+1*s(38)+1*s(39)+1*s(44)+1*s(45)+1*s(46)+1*s(47)+0
  Such that:it(19)+s(41) =< -2*C+2*D
it(18)+it(19)+it([17]) =< -2*C+2*D+1
aux(14) =< -C+D
aux(15) =< aux(14)
aux(16) =< aux(14)+1
s(42) =< it(18)*aux(14)
s(49) =< it(19)*aux(15)
s(47) =< it(19)*aux(16)
s(36)+s(37) =< it(18)*aux(15)
s(39) =< it(18)*aux(16)
s(43) =< it(18)*aux(15)
s(45)+s(46) =< s(49)
s(44) =< s(49)
s(44)+s(45) =< s(49)
s(45) =< s(44)
s(45) =< s(44)+s(49)
s(38) =< s(42)
s(36)+s(38) =< s(43)
s(38) =< s(36)+s(42)
aux(12) >= 2
s(39)+s(47) >= -2*C+2*D
aux(21) >= C-D
aux(33) >= 1
aux(34) >= -C+D
aux(32) >= aux(32)
s(40) >= aux(32)
s(40)+s(48) >= aux(32)
aux(33) >= aux(33)
aux(9)+it(19) >= aux(34)
aux(18)+it(18) >= aux(34)
it(18)+it(19) >= aux(34)
it(18)+s(44) >= aux(34)
it(18)+s(45)+s(46) >= aux(34)
it(19)+s(36)+s(37) >= aux(34)
it(19)+s(38) >= aux(34)
aux(19) >= aux(12)
s(44) >= it(19)*aux(33)
s(48) >= it(19)*aux(21)
s(45)+s(46) >= it(19)*aux(33)
s(46) >= aux(18)
s(36)+s(37) >= it(18)*aux(33)
s(39) >= it(18)*aux(12)
s(40) >= it(18)*aux(32)
s(38) >= it(18)*aux(33)
s(37) >= aux(9)
s(47) >= it(19)*aux(19)
s(45) >= s(44)+s(48)-s(49)
s(38) >= s(36)+s(40)-s(41)

  with precondition: [B>=0,D>=C+1] 


Closed-form bounds of ms_sort(A,B,C,D): 
-------------------------------------
* Chain [17] with precondition: [C>=D] 
    - Lower bound: 0 
    - Complexity: constant
 * Chain [multiple([18,19],[[17]])] with precondition: [B>=0,D>=C+1] 
    - Lower bound: -5*C+5*D 
    - Complexity: n
 
### Partitioned lower bound of ms_sort(A,B,C,D): 
* 0 
 if [C>=D]
* -5*C+5*D 
 if [B>=0,D>=C+1]
Possible lower bounds : [0,-5*C+5*D]
Maximum lower bound complexity: n

Time statistics: 
-------------------------------------
* Partial evaluation computed in 295 ms.
* Invariants computed in 394 ms.
   - Backward Invariants 164 ms.
   - Transitive Invariants 103 ms.
* Refinement performed in 337 ms.
* Termination proved in 283 ms.
* Upper bounds computed in 1845 ms.
   - Equation cost structures 211 ms.
   - Phase cost structures 1210 ms.
   - Chain cost structures 525 ms.
   - Solving cost expressions 78 ms.
* Total analysis performed in 3472 ms.


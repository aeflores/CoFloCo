
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive : [m1/0]
1. non_recursive : [m3/1]
2. recursive : [fibonacciMethod/1,m0/1,m2/1,m4/1,m5/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into fibonacciMethod/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fibonacciMethod/1 
* CE 3 is refined into CE [4] 
* CE 2 is refined into CE [5] 


#### Refined cost equations fibonacciMethod/1 
* CE 4: fibonacciMethod(A) = 13+ fibonacciMethod(B)+ fibonacciMethod(C)
     [A>=2,A=C+2,A=B+1] 
* CE 5: fibonacciMethod(A) = 5
     [A>=0,1>=A] 

### Cost equations --> "Loop" of fibonacciMethod/1 
* CEs [5] --> Loop 3 
* CEs [4] --> Loop 4 

#### Loops of fibonacciMethod/1 
* Loop 3: fibonacciMethod(A) [A>=0,1>=A] 
* Loop 4: fibonacciMethod(A)->  fibonacciMethod(A')  fibonacciMethod(A'2)
                  [A>=2,A=A'2+2,A=A'+1] 

### Ranking functions of CR fibonacciMethod(A) 
* RF of phase [4]: [A-1]

#### Partial ranking functions of CR fibonacciMethod(A) 
* Partial RF of phase [4]:
  - RF of loop [4:1,4:2]:
    A-1


### Resulting Chains:fibonacciMethod(A) 
* [3]
* [multiple([4],[[3]])]


Computing Bounds
=====================================

#### Cost of loops [4] 

 * loop 4:fibonacciMethod(A) -> [fibonacciMethod(A'),fibonacciMethod(A'2)] 
13
#### Cost of phase [4]:fibonacciMethod(A) -> [] 
13*it(4)+5*it([3])+0
#### Cost of chains of fibonacciMethod(A):
* Chain [3]: 5
  with precondition: [1>=A,A>=0] 

* Chain [multiple([4],[[3]])]: 13*it(4)+5*it([3])+0
  with precondition: [A>=2] 


Closed-form bounds of fibonacciMethod(A): 
-------------------------------------
* Chain [3] with precondition: [1>=A,A>=0] 
    - Lower bound: 5 
    - Complexity: constant
 * Chain [multiple([4],[[3]])] with precondition: [A>=2] 
    - Lower bound: 0 
    - Complexity: constant
 
### Partitioned lower bound of fibonacciMethod(A): 
* 0 
 if [A>=2]
* 5 
 if [1>=A,A>=0]
Possible lower bounds : [0,5]
Maximum lower bound complexity: constant

Time statistics: 
-------------------------------------
* Partial evaluation computed in 15 ms.
* Invariants computed in 20 ms.
   - Backward Invariants 7 ms.
   - Transitive Invariants 7 ms.
* Refinement performed in 20 ms.
* Termination proved in 10 ms.
* Upper bounds computed in 45 ms.
   - Equation cost structures 5 ms.
   - Phase cost structures 37 ms.
   - Chain cost structures 0 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 142 ms.


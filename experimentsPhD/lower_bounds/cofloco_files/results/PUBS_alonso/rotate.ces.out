
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive : [amor/atva/Rotate_swap([CII)V/3]
1. recursive : [19_loop/5]
2. non_recursive : [amor/atva/Rotate_block([CIII)V/4]
3. recursive : [5_loop/6]
4. non_recursive : [amor/atva/Rotate_loop([CIIIII)V/6]
5. non_recursive : [amor/atva/Rotate_rotate([CI)V/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is partially evaluated into 19_loop/5
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into 5_loop/6
4. SCC is partially evaluated into amor/atva/Rotate_loop([CIIIII)V/6
5. SCC is partially evaluated into amor/atva/Rotate_rotate([CI)V/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations 19_loop/5 
* CE 12 is refined into CE [13] 
* CE 11 is refined into CE [14] 


#### Refined cost equations 19_loop/5 
* CE 13: 19_loop(A,B,C,D,E) = 3
     [A+B+D>=C+E,C>=B+D,E>=D,E>=0] 
* CE 14: 19_loop(A,B,C,D,E) = 28+ 19_loop(A,B,C,D,F)
     [A+B>=C,C>=B+D,D>=F,F>=1,F=E+1] 

### Cost equations --> "Loop" of 19_loop/5 
* CEs [14] --> Loop 12 
* CEs [13] --> Loop 13 

#### Loops of 19_loop/5 
* Loop 12: 19_loop(A,B,C,D,E)->  19_loop(A,B,C,D,E')
                  [A+B>=C,C>=B+D,D>=E',E'>=1,E'=E+1] 
* Loop 13: 19_loop(A,B,C,D,E) [A+B+D>=C+E,C>=B+D,E>=D,E>=0] 

### Ranking functions of CR 19_loop(A,B,C,D,E) 
* RF of phase [12]: [A-E,-B+C-E,D-E]

#### Partial ranking functions of CR 19_loop(A,B,C,D,E) 
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    A-E
    -B+C-E
    D-E


### Resulting Chains:19_loop(A,B,C,D,E) 
* [[12],13]
* [13]


### Specialization of cost equations 5_loop/6 
* CE 9 is refined into CE [15] 
* CE 7 is discarded (unfeasible) 
* CE 6 is refined into CE [16] 
* CE 10 is refined into CE [17] 
* CE 8 is refined into CE [18] 
* CE 5 is refined into CE [19] 


#### Refined cost equations 5_loop/6 
* CE 15: 5_loop(A,B,C,D,C,E) = 6
     [C+E>=0,C>=E+1,0>=E,C+E=D+1,C+E=A,B=0] 
* CE 16: 5_loop(A,B,C,D,C,E) = 9
     [C+E>=0,E>=1,0>=C,C+E=D+1,C+E=A,B=0] 
* CE 17: 5_loop(A,B,C,D,E,E) = 3
     [A>=2*E+B,B>=0,B+2*E=D+1,B+E=C] 
* CE 18: 5_loop(A,B,C,D,E,F) = 29+ 19_loop(A,B,C,F,G):[[12],13]+ 5_loop(A,H,C,I,J,F)
     [A>=C+F,C>=B+F+1,F>=1,B>=0,B+F+J=C,C+F=I+1,B+F=H,B+E=C,C+F=D+1,G=0] 
* CE 19: 5_loop(A,B,C,D,E,F) = 33+ 19_loop(A,B,G,E,H):[[12],13]+ 5_loop(A,B,I,J,E,K)
     [A>=E+G,G>=B+E+1,E>=1,B>=0,B+E+K=G,B+E=I,B+F=G,E+G=D+1,B+E=C,G=J+1,H=0] 

### Cost equations --> "Loop" of 5_loop/6 
* CEs [18] --> Loop 14 
* CEs [19] --> Loop 15 
* CEs [17] --> Loop 16 
* CEs [15] --> Loop 17 
* CEs [16] --> Loop 18 

#### Loops of 5_loop/6 
* Loop 14: 5_loop(A,B,C,D,E,F)->  5_loop(A,B',C,D',E',F)
                  [A>=C+F,C>=B+F+1,F>=1,B>=0,B+F+E'=C,C+F=D'+1,B+F=B',C+F=D+1,C=B+E] 
* Loop 15: 5_loop(A,B,C,D,E,F)->  5_loop(A,B,C',D',E,F')
                  [A>=E+D'+1,D'>=B+E,E>=1,B>=0,B+E+F'=D'+1,B+F=D'+1,B+E=C',E+D'=D,B+E=C] 
* Loop 16: 5_loop(A,B,C,D,E,E) [A>=2*E+B,B>=0,B+2*E=D+1,B+E=C] 
* Loop 17: 5_loop(A,B,C,D,C,E) [C+E>=0,C>=E+1,0>=E,C+E=D+1,C+E=A,B=0] 
* Loop 18: 5_loop(A,B,C,D,C,E) [C+E>=0,E>=1,0>=C,C+E=D+1,C+E=A,B=0] 

### Ranking functions of CR 5_loop(A,B,C,D,E,F) 
* RF of phase [14,15]: [-B+D-1]

#### Partial ranking functions of CR 5_loop(A,B,C,D,E,F) 
* Partial RF of phase [14,15]:
  - RF of loop [14:1]:
    A-B-2
    A-B-2*F depends on loops [15:1] 
    -B+C-1
    -B+C-F depends on loops [15:1] 
    -B+2*C-D-1 depends on loops [15:1] 
    -B+D-2*F+1 depends on loops [15:1] 
    B-D+2*E-1 depends on loops [15:1] 
    C-D+E-1 depends on loops [15:1] 
    E-1
    E-F depends on loops [15:1] 
  - RF of loop [14:1,15:1]:
    -B+D-1
  - RF of loop [15:1]:
    -B+D-2*E+1 depends on loops [14:1] 
    B-2*C+D+1 depends on loops [14:1] 
    B-C+F depends on loops [14:1] 
    B-D+2*F-1 depends on loops [14:1] 
    -C+D
    -C+D-E+1 depends on loops [14:1] 
    D-1
    D-2*E+1 depends on loops [14:1] 
    -E+F depends on loops [14:1] 
    F-1


### Resulting Chains:5_loop(A,B,C,D,E,F) 
* [[14,15],16]
* [18]
* [17]
* [16]


### Specialization of cost equations amor/atva/Rotate_loop([CIIIII)V/6 
* CE 4 is refined into CE [20,21,22,23,24,25,26,27] 
* CE 3 is refined into CE [28,29,30,31] 


#### Refined cost equations amor/atva/Rotate_loop([CIIIII)V/6 
* CE 20: amor/atva/Rotate_loop([CIIIII)V(A,B,C,D,E,F) = 13+ 5_loop(A,G,H,I,J,K):[[14,15],16]+ 19_loop(A,L,M,N,O):[[12],13]
     [A>=L+N+1,L+N>=1,A>=N,N>=1,A>=3,K+L+N=A,F+L+N=A,L+N=M,L+N=J,L+N=H,L+N=E,L+N=C,A=I+1,A=D+1,O=0,G=0,B=0] 
* CE 21: amor/atva/Rotate_loop([CIIIII)V(A,B,C,D,E,F) = 13+ 5_loop(A,G,H,I,J,K):[[14,15],16]+ 19_loop(A,L,M,N,O):[13]
     [A>=L+N+1,L+N>=1,A>=3,0>=N,K+L+N=A,F+L+N=A,L+N=M,L+N=J,L+N=H,L+N=E,L+N=C,A=I+1,A=D+1,O=0,G=0,B=0] 
* CE 22: amor/atva/Rotate_loop([CIIIII)V(A,B,C,D,E,F) = 13+ 5_loop(A,G,H,I,J,K):[18]+ 19_loop(A,L,M,N,O):[[12],13]
     [A>=N,0>=L+N,N>=1,K+L+N=A,F+L+N=A,L+N=M,L+N=J,L+N=H,L+N=E,L+N=C,A=I+1,A=D+1,O=0,G=0,B=0] 
* CE 23: amor/atva/Rotate_loop([CIIIII)V(A,B,C,D,E,F) = 13+ 5_loop(A,G,H,I,J,K):[18]+ 19_loop(A,L,M,N,O):[13]
     [A>=L+N+1,0>=L+N,A>=0,0>=N,K+L+N=A,F+L+N=A,L+N=M,L+N=J,L+N=H,L+N=E,L+N=C,A=I+1,A=D+1,O=0,G=0,B=0] 
* CE 24: amor/atva/Rotate_loop([CIIIII)V(A,B,C,D,E,F) = 13+ 5_loop(A,G,H,I,J,K):[17]+ 19_loop(A,L,M,N,O):[[12],13]
     [L+N>=A,A>=N,N>=1,K+L+N=A,F+L+N=A,L+N=M,L+N=J,L+N=H,L+N=E,L+N=C,A=I+1,A=D+1,O=0,G=0,B=0] 
* CE 25: amor/atva/Rotate_loop([CIIIII)V(A,B,C,D,E,F) = 13+ 5_loop(A,G,H,I,J,K):[17]+ 19_loop(A,L,M,N,O):[13]
     [2*L+2*N>=A+1,L+N>=A,A>=0,0>=N,K+L+N=A,F+L+N=A,L+N=M,L+N=J,L+N=H,L+N=E,L+N=C,A=I+1,A=D+1,O=0,G=0,B=0] 
* CE 26: amor/atva/Rotate_loop([CIIIII)V(A,B,C,D,E,F) = 13+ 5_loop(G,H,I,J,K,L):[16]+ 19_loop(M,N,O,P,Q):[[12],13]
     [P+2*N>=0,P>=1,N+P=O,2*N+2*P=M,N+P=L,N+P=K,2*N+2*P=J+1,N+P=I,2*N+2*P=G,N+P=F,N+P=E,2*N+2*P=D+1,N+P=C,2*N+2*P=A,Q=0,H=0,B=0] 
* CE 27: amor/atva/Rotate_loop([CIIIII)V(A,B,C,D,E,F) = 13+ 5_loop(G,H,I,J,K,L):[16]+ 19_loop(M,N,O,P,Q):[13]
     [N+P>=0,0>=P,N+P=O,2*N+2*P=M,N+P=L,N+P=K,2*N+2*P=J+1,N+P=I,2*N+2*P=G,N+P=F,N+P=E,2*N+2*P=D+1,N+P=C,2*N+2*P=A,Q=0,H=0,B=0] 
* CE 28: amor/atva/Rotate_loop([CIIIII)V(A,B,C,D,C,E) = 5+ 5_loop(F,G,C,D,C,H):[[14,15],16]
     [D>=C,D>=2,C>=1,D+1=C+H,D+1=C+E,D+1=F,D+1=A,G=0,B=0] 
* CE 29: amor/atva/Rotate_loop([CIIIII)V(A,B,C,D,C,E) = 5+ 5_loop(F,G,C,D,C,H):[18]
     [D>=C,D+1>=0,0>=C,C+H=D+1,C+E=D+1,D+1=F,D+1=A,G=0,B=0] 
* CE 30: amor/atva/Rotate_loop([CIIIII)V(A,B,C,D,C,E) = 5+ 5_loop(F,G,C,D,C,H):[17]
     [2*C>=D+2,C>=D+1,D+1>=0,C+H=D+1,C+E=D+1,D+1=F,D+1=A,G=0,B=0] 
* CE 31: amor/atva/Rotate_loop([CIIIII)V(A,B,C,D,C,C) = 5+ 5_loop(E,F,C,G,C,C):[16]
     [C>=0,2*C=G+1,2*C=E,2*C=D+1,2*C=A,F=0,B=0] 

### Cost equations --> "Loop" of amor/atva/Rotate_loop([CIIIII)V/6 
* CEs [28] --> Loop 19 
* CEs [30] --> Loop 20 
* CEs [21] --> Loop 21 
* CEs [20] --> Loop 22 
* CEs [24] --> Loop 23 
* CEs [22] --> Loop 24 
* CEs [25] --> Loop 25 
* CEs [23] --> Loop 26 
* CEs [26] --> Loop 27 
* CEs [27] --> Loop 28 
* CEs [31] --> Loop 29 
* CEs [29] --> Loop 30 

#### Loops of amor/atva/Rotate_loop([CIIIII)V/6 
* Loop 19: amor/atva/Rotate_loop([CIIIII)V(A,B,C,D,C,E) [C+E>=3,E>=1,C>=1,C+E=D+1,C+E=A,B=0] 
* Loop 20: amor/atva/Rotate_loop([CIIIII)V(A,B,C,D,C,E) [C+E>=0,C>=E+1,0>=E,C+E=D+1,C+E=A,B=0] 
* Loop 21: amor/atva/Rotate_loop([CIIIII)V(A,B,C,D,E,F) [A>=F+1,F>=1,A>=3,E+F=A,C+F=A,A=D+1,B=0] 
* Loop 22: amor/atva/Rotate_loop([CIIIII)V(A,B,C,D,E,F) [A>=F+1,F>=1,A>=3,E+F=A,C+F=A,A=D+1,B=0] 
* Loop 23: amor/atva/Rotate_loop([CIIIII)V(A,B,C,D,C,E) [C>=A,A>=1,A=C+E,A=D+1,B=0] 
* Loop 24: amor/atva/Rotate_loop([CIIIII)V(A,B,C,D,C,E) [A>=1,0>=C,C+E=A,A=D+1,B=0] 
* Loop 25: amor/atva/Rotate_loop([CIIIII)V(A,B,C,D,C,E) [C+E>=0,C>=E+1,0>=E,C+E=D+1,C+E=A,B=0] 
* Loop 26: amor/atva/Rotate_loop([CIIIII)V(A,B,C,D,C,E) [C+E>=0,E>=1,0>=C,C+E=D+1,C+E=A,B=0] 
* Loop 27: amor/atva/Rotate_loop([CIIIII)V(A,B,C,D,C,C) [2*C>=1,2*C=D+1,2*C=A,B=0] 
* Loop 28: amor/atva/Rotate_loop([CIIIII)V(A,B,C,D,C,C) [C>=0,2*C=D+1,2*C=A,B=0] 
* Loop 29: amor/atva/Rotate_loop([CIIIII)V(A,B,C,D,C,C) [C>=0,2*C=D+1,2*C=A,B=0] 
* Loop 30: amor/atva/Rotate_loop([CIIIII)V(A,B,C,D,C,E) [D>=C,D+1>=0,0>=C,C+E=D+1,D+1=A,B=0] 

### Ranking functions of CR amor/atva/Rotate_loop([CIIIII)V(A,B,C,D,E,F) 

#### Partial ranking functions of CR amor/atva/Rotate_loop([CIIIII)V(A,B,C,D,E,F) 


### Resulting Chains:amor/atva/Rotate_loop([CIIIII)V(A,B,C,D,E,F) 
* [30]
* [29]
* [28]
* [27]
* [26]
* [25]
* [24]
* [23]
* [22]
* [21]
* [20]
* [19]


### Specialization of cost equations amor/atva/Rotate_rotate([CI)V/2 
* CE 2 is refined into CE [32,33,34,35,36,37,38,39,40,41,42,43] 


#### Refined cost equations amor/atva/Rotate_rotate([CI)V/2 
* CE 32: amor/atva/Rotate_rotate([CI)V(A,B) = 14+ amor/atva/Rotate_loop([CIIIII)V(C,D,B,E,B,F):[30]
     [E>=B,E+1>=0,0>=B,B+F=E+1,E+1=C,E+1=A,D=0] 
* CE 33: amor/atva/Rotate_rotate([CI)V(A,B) = 14+ amor/atva/Rotate_loop([CIIIII)V(C,D,B,E,B,B):[29]
     [B>=0,2*B=E+1,2*B=C,2*B=A,D=0] 
* CE 34: amor/atva/Rotate_rotate([CI)V(A,B) = 14+ amor/atva/Rotate_loop([CIIIII)V(C,D,B,E,B,B):[28]
     [B>=0,2*B=E+1,2*B=C,2*B=A,D=0] 
* CE 35: amor/atva/Rotate_rotate([CI)V(A,B) = 14+ amor/atva/Rotate_loop([CIIIII)V(C,D,B,E,B,B):[27]
     [2*B>=1,2*B=E+1,2*B=C,2*B=A,D=0] 
* CE 36: amor/atva/Rotate_rotate([CI)V(A,B) = 14+ amor/atva/Rotate_loop([CIIIII)V(C,D,B,E,B,F):[26]
     [E>=B,E+1>=0,0>=B,E+1=B+F,E+1=C,E+1=A,D=0] 
* CE 37: amor/atva/Rotate_rotate([CI)V(A,B) = 14+ amor/atva/Rotate_loop([CIIIII)V(C,D,B,E,B,F):[25]
     [2*B>=E+2,B>=E+1,E+1>=0,E+1=B+F,E+1=C,E+1=A,D=0] 
* CE 38: amor/atva/Rotate_rotate([CI)V(A,B) = 14+ amor/atva/Rotate_loop([CIIIII)V(A,C,B,D,B,E):[24]
     [A>=1,0>=B,A=B+E,A=D+1,C=0] 
* CE 39: amor/atva/Rotate_rotate([CI)V(A,B) = 14+ amor/atva/Rotate_loop([CIIIII)V(A,C,B,D,B,E):[23]
     [B>=A,A>=1,A=B+E,A=D+1,C=0] 
* CE 40: amor/atva/Rotate_rotate([CI)V(A,B) = 14+ amor/atva/Rotate_loop([CIIIII)V(A,C,B,D,B,E):[22]
     [A>=B+1,B>=1,A>=3,A=B+E,A=D+1,C=0] 
* CE 41: amor/atva/Rotate_rotate([CI)V(A,B) = 14+ amor/atva/Rotate_loop([CIIIII)V(A,C,B,D,B,E):[21]
     [A>=B+1,B>=1,A>=3,A=B+E,A=D+1,C=0] 
* CE 42: amor/atva/Rotate_rotate([CI)V(A,B) = 14+ amor/atva/Rotate_loop([CIIIII)V(C,D,B,E,B,F):[20]
     [2*B>=E+2,B>=E+1,E+1>=0,B+F=E+1,E+1=C,E+1=A,D=0] 
* CE 43: amor/atva/Rotate_rotate([CI)V(A,B) = 14+ amor/atva/Rotate_loop([CIIIII)V(C,D,B,E,B,F):[19]
     [E>=B,E>=2,B>=1,B+F=E+1,E+1=C,E+1=A,D=0] 

### Cost equations --> "Loop" of amor/atva/Rotate_rotate([CI)V/2 
* CEs [43] --> Loop 31 
* CEs [41] --> Loop 32 
* CEs [40] --> Loop 33 
* CEs [39] --> Loop 34 
* CEs [42] --> Loop 35 
* CEs [37] --> Loop 36 
* CEs [38] --> Loop 37 
* CEs [36] --> Loop 38 
* CEs [32] --> Loop 39 
* CEs [34] --> Loop 40 
* CEs [33] --> Loop 41 
* CEs [35] --> Loop 42 

#### Loops of amor/atva/Rotate_rotate([CI)V/2 
* Loop 31: amor/atva/Rotate_rotate([CI)V(A,B) [A>=B+1,B>=1,A>=3] 
* Loop 32: amor/atva/Rotate_rotate([CI)V(A,B) [A>=B+1,B>=1,A>=3] 
* Loop 33: amor/atva/Rotate_rotate([CI)V(A,B) [A>=B+1,B>=1,A>=3] 
* Loop 34: amor/atva/Rotate_rotate([CI)V(A,B) [B>=A,A>=1] 
* Loop 35: amor/atva/Rotate_rotate([CI)V(A,B) [2*B>=A+1,B>=A,A>=0] 
* Loop 36: amor/atva/Rotate_rotate([CI)V(A,B) [2*B>=A+1,B>=A,A>=0] 
* Loop 37: amor/atva/Rotate_rotate([CI)V(A,B) [A>=1,0>=B] 
* Loop 38: amor/atva/Rotate_rotate([CI)V(A,B) [A>=B+1,A>=0,0>=B] 
* Loop 39: amor/atva/Rotate_rotate([CI)V(A,B) [A>=B+1,A>=0,0>=B] 
* Loop 40: amor/atva/Rotate_rotate([CI)V(A,B) [B>=0,2*B=A] 
* Loop 41: amor/atva/Rotate_rotate([CI)V(A,B) [B>=0,2*B=A] 
* Loop 42: amor/atva/Rotate_rotate([CI)V(A,B) [A>=1,A=2*B] 

### Ranking functions of CR amor/atva/Rotate_rotate([CI)V(A,B) 

#### Partial ranking functions of CR amor/atva/Rotate_rotate([CI)V(A,B) 


### Resulting Chains:amor/atva/Rotate_rotate([CI)V(A,B) 
* [42]
* [41]
* [40]
* [39]
* [38]
* [37]
* [36]
* [35]
* [34]
* [33]
* [32]
* [31]


Computing Bounds
=====================================

#### Cost of loops [12] 

 * loop 12:19_loop(A,B,C,D,E) -> [19_loop(A',B',C',D',E')] 
28
#### Cost of phase [12]:19_loop(A,B,C,D,E) -> [19_loop(A',B',C',D',E')] 
28*it(12)+0
  Such that:it(12) =< A-E
it(12) =< A-E-A'+E'
it(12) =< -B+C-E
it(12) =< -B+C-E+B'-C'+E'
it(12) =< D-E
it(12) =< D-E-D'+E'
it(12) >= A-E-A'+E'
it(12) >= -B+C-E+B'-C'+E'
it(12) >= D-E-D'+E'

#### Cost of chains of 19_loop(A,B,C,D,E):
* Chain [[12],13]: 28*it(12)+3
  Such that:it(12) =< D-E
it(12) >= D-E

  with precondition: [E>=0,D>=E+1,C>=B+D,A+B>=C] 

* Chain [13]: 3
  with precondition: [E>=0,E>=D,C>=B+D,A+B+D>=C+E] 


#### Cost of loops [14,15] 

 * loop 14:5_loop(A,B,C,D,E,F) -> [5_loop(A',B',C',D',E',F')] 
28*s(2)+32
  Such that:s(2) =< F'
s(2) >= F'

 * loop 15:5_loop(A,B,C,D,E,F) -> [5_loop(A',B',C',D',E',F')] 
28*s(4)+36
  Such that:s(4) =< E'
s(4) >= -B+C'

#### Cost of phase [14,15]:5_loop(A,B,C,D,E,F) -> [5_loop(A',B',C',D',E',F')] 
32*it(14)+36*it(15)+28*s(5)+28*s(6)+0
  Such that:it(14) =< A-B-2
aux(31) =< A-B-F-1
aux(33) =< A-B-F-A'+B'+F'
it(14) =< A-B-A'+B'
it(14) =< -B+C-1
aux(5) =< -B+C-F
aux(19) =< -B+C-F+B'-C'+F'
it(14) =< -B+C+B'-C'
aux(9) =< -B+2*C-D-1
aux(23) =< -B+2*C-D+B'-2*C'+D'
aux(45) =< B-2*C+D+1
aux(59) =< B-2*C+D-B'+2*C'-D'
aux(47) =< B-C+F
aux(61) =< B-C+F-B'+C'-F'
aux(13) =< B-D+2*E-1
aux(27) =< B-D+2*E-B'+D'-2*E'
aux(49) =< B-D+2*F-1
aux(63) =< B-D+2*F-B'+D'-2*F'
aux(81) =< -2*C+2*D-E
aux(83) =< -2*C+2*D-E+2*C'-2*D'+E'
aux(43) =< -C+D-E+1
aux(57) =< -C+D-E+C'-D'+E'
aux(15) =< C-D+E-1
aux(29) =< C-D+E-C'+D'-E'
it(15) =< D-1
aux(39) =< D-2*E+1
aux(53) =< D-2*E-D'+2*E'
it(15) =< D-D'
aux(84) =< E
aux(3) =< E-F
aux(17) =< E-F-E'+F'
aux(34) =< F
aux(101) =< -2*B+2*C-2
aux(102) =< -2*B+2*C+2*B'-2*C'
aux(103) =< -B+D-1
aux(104) =< -B+D-E
aux(105) =< -B+D-E+B'-D'+E'
aux(106) =< -B+D+B'-D'
aux(107) =< -C+D
aux(108) =< -C+D+C'-D'
aux(109) =< E-1
aux(110) =< E-E'
aux(111) =< F-1
aux(112) =< F-F'
aux(38) =< aux(101)
aux(38) =< aux(102)
aux(8)+it(14) =< aux(103)
aux(89)+it(14) =< aux(103)
it(14)+it(15) =< aux(103)
aux(4) =< aux(104)
aux(4) =< aux(105)
aux(8)+it(14) =< aux(106)
aux(89)+it(14) =< aux(106)
it(14)+it(15) =< aux(106)
aux(2) =< aux(107)
it(15) =< aux(107)
aux(2) =< aux(108)
it(15) =< aux(108)
aux(44) =< aux(109)
it(14) =< aux(109)
aux(44) =< aux(110)
it(14) =< aux(110)
aux(12) =< aux(111)
it(15) =< aux(111)
aux(12) =< aux(112)
it(15) =< aux(112)
aux(42) =< aux(38)* (1/2)
it(15) =< aux(44)+aux(45)
it(15) =< aux(38)+aux(39)
it(14) =< aux(12)+aux(13)
it(14) =< aux(8)+aux(9)
it(14) =< aux(4)+aux(5)
it(14) =< aux(2)+aux(3)
aux(93) =< aux(42)+aux(83)
aux(93) =< aux(42)+aux(81)
s(6) =< aux(42)+aux(83)
s(6) =< aux(42)+aux(81)
it(15) =< aux(44)+aux(63)
it(15) =< aux(44)+aux(61)
it(15) =< aux(44)+aux(59)
it(15) =< aux(42)+aux(57)
it(15) =< aux(38)+aux(53)
it(15) =< aux(44)+aux(49)
it(15) =< aux(44)+aux(47)
it(15) =< aux(42)+aux(43)
it(14) =< aux(12)+aux(29)
it(14) =< aux(12)+aux(27)
it(14) =< aux(89)+aux(23)
it(14) =< aux(4)+aux(19)
it(14) =< aux(2)+aux(17)
it(14) =< aux(12)+aux(15)
aux(93) =< it(15)*aux(84)
s(6) =< it(15)*aux(84)
s(5) =< it(14)*aux(34)
s(5) =< aux(93)+aux(33)
s(5) =< aux(93)+aux(31)
s(5) >= -B+B'
s(6) >= F-F'

#### Cost of chains of 5_loop(A,B,C,D,E,F):
* Chain [[14,15],16]: 32*it(14)+36*it(15)+28*s(5)+28*s(6)+3
  Such that:aux(31) =< A-B-F-1
aux(84) =< -B+C
aux(9) =< -B+2*C-D-1
aux(45) =< B-2*C+D+1
aux(13) =< B-D+2*E-1
aux(49) =< B-D+2*F-1
aux(81) =< -2*C+2*D-E
aux(43) =< -C+D-E+1
aux(15) =< C-D+E-1
aux(39) =< D-2*E+1
aux(53) =< -2*E+2*F
aux(83) =< -E+2*F-1
aux(3) =< E-F
aux(34) =< F
aux(114) =< -2*B+2*C-2
aux(115) =< -B+C-1
aux(116) =< -B+C-F
aux(117) =< -B+C+F-2
aux(118) =< B-C+F
aux(119) =< F-1
it(14) =< aux(115)
it(15) =< aux(119)
aux(8)+it(14) =< aux(117)
aux(89)+it(14) =< aux(117)
it(14)+it(15) =< aux(117)
aux(42) =< aux(114)* (1/2)
it(15) =< aux(115)+aux(45)
it(15) =< aux(114)+aux(39)
it(14) =< aux(119)+aux(13)
it(14) =< aux(8)+aux(9)
it(14) =< aux(119)+aux(116)
it(14) =< aux(119)+aux(3)
aux(93) =< aux(42)+aux(83)
aux(93) =< aux(42)+aux(81)
s(6) =< aux(42)+aux(83)
s(6) =< aux(42)+aux(81)
it(15) =< aux(115)+aux(118)
it(15) =< aux(42)+aux(118)
it(15) =< aux(114)+aux(53)
it(15) =< aux(115)+aux(49)
it(15) =< aux(42)+aux(43)
it(14) =< aux(89)+aux(116)
it(14) =< aux(119)+aux(15)
aux(93) =< it(15)*aux(84)
s(6) =< it(15)*aux(84)
s(5) =< it(14)*aux(34)
s(5) =< aux(93)+aux(116)
s(5) =< aux(93)+aux(31)
s(5) >= -B+C-F
s(5) >= -B/2+C/2-F/2+1/2
s(6) >= B/2-C/2+F/2+1/2

  with precondition: [C+F=D+1,B+E+F=D+1,E>=1,F>=1,A>=D+1,E+F>=3,D+1>=E+F] 

* Chain [18]: 9
  with precondition: [B=0,E=C,A=D+1,A=E+F,0>=E,A>=0,A>=E+1] 

* Chain [17]: 6
  with precondition: [B=0,E=C,A=D+1,A=E+F,A>=0,E>=A,2*E>=A+1] 

* Chain [16]: 3
  with precondition: [F=E,B+F=C,B+2*F=D+1,B>=0,A>=2*F+B] 


#### Cost of chains of amor/atva/Rotate_loop([CIIIII)V(A,B,C,D,E,F):
* Chain [30]: 14
  with precondition: [B=0,E=C,A=D+1,A=E+F,0>=E,A>=0,A>=E+1] 

* Chain [29]: 8
  with precondition: [B=0,A=2*C,A=2*E,A=2*F,A=D+1,A>=0] 

* Chain [28]: 19
  with precondition: [B=0,A=2*C,A=2*E,A=2*F,A=D+1,A>=0] 

* Chain [27]: 28*s(7)+19
  Such that:s(7) =< 2*F
s(7) >= 1

  with precondition: [B=0,A=2*C,A=2*E,A=2*F,A=D+1,A>=1] 

* Chain [26]: 25
  with precondition: [B=0,A=D+1,C=E,A=C+F,0>=C,A>=0,A>=C+1] 

* Chain [25]: 22
  with precondition: [B=0,A=D+1,C=E,A=C+F,A>=0,C>=A,2*C>=A+1] 

* Chain [24]: 28*s(8)+25
  Such that:s(8) =< E+F
s(8) >= 1

  with precondition: [B=0,D+1=A,E=C,D+1=E+F,0>=E,D>=0] 

* Chain [23]: 28*s(9)+22
  Such that:s(9) =< E+F
s(9) >= 1

  with precondition: [B=0,D+1=A,E=C,D+1=E+F,D>=0,E>=D+1] 

* Chain [22]: 28*s(30)+28*s(31)+32*s(32)+36*s(33)+28*s(38)+19
  Such that:s(20) =< 2*A-4*C
s(21) =< 2*A-3*C-1
s(16) =< -3*C+2*D
s(27) =< D-1
s(38) =< D+1
s(29) =< D-E
s(23) =< D-E+1
s(11) =< E
s(24) =< 2*E-2
aux(120) =< -A+2*C
aux(121) =< A-2*C
aux(122) =< E-1
s(32) =< aux(122)
s(33) =< s(29)
s(32)+s(34) =< s(27)
s(32)+s(35) =< s(27)
s(32)+s(33) =< s(27)
s(36) =< s(24)* (1/2)
s(33) =< aux(122)+aux(121)
s(33) =< s(24)+aux(121)
s(32) =< s(29)+aux(120)
s(32) =< s(34)+aux(120)
s(37) =< s(36)+s(21)
s(37) =< s(36)+s(16)
s(31) =< s(36)+s(21)
s(31) =< s(36)+s(16)
s(33) =< s(36)+aux(121)
s(33) =< s(24)+s(20)
s(32) =< s(35)+aux(120)
s(37) =< s(33)*s(11)
s(31) =< s(33)*s(11)
s(30) =< s(32)*s(23)
s(30) =< s(37)+aux(120)
s(30) =< s(37)+aux(122)
s(38) >= 1
s(30) >= -A+2*C
s(30) >= -A/2+C+1/2
s(31) >= A/2-C+1/2

  with precondition: [B=0,D+1=A,C=E,D+1=C+F,C>=1,D>=2,D>=C] 

* Chain [21]: 28*s(59)+28*s(60)+32*s(61)+36*s(62)+19
  Such that:s(49) =< -2*D+4*F-2
s(50) =< -D+3*F-2
s(56) =< D-1
s(40) =< D-F+1
s(45) =< 2*D-3*E
s(53) =< 2*D-2*F
s(58) =< F-1
s(52) =< F
aux(123) =< -D+2*F-1
aux(124) =< D-2*F+1
aux(125) =< D-F
s(61) =< aux(125)
s(62) =< s(58)
s(61)+s(63) =< s(56)
s(61)+s(64) =< s(56)
s(61)+s(62) =< s(56)
s(65) =< s(53)* (1/2)
s(62) =< aux(125)+aux(123)
s(62) =< s(53)+aux(123)
s(61) =< s(58)+aux(124)
s(61) =< s(63)+aux(124)
s(66) =< s(65)+s(50)
s(66) =< s(65)+s(45)
s(60) =< s(65)+s(50)
s(60) =< s(65)+s(45)
s(62) =< s(65)+aux(123)
s(62) =< s(53)+s(49)
s(61) =< s(64)+aux(124)
s(66) =< s(62)*s(40)
s(60) =< s(62)*s(40)
s(59) =< s(61)*s(52)
s(59) =< s(66)+aux(124)
s(59) =< s(66)+aux(125)
s(59) >= E-F
s(60) >= -E/2+F/2+1/2
s(59) >= E/2-F/2+1/2

  with precondition: [B=0,D+1=A,C=E,D+1=C+F,C>=1,D>=2,D>=C] 

* Chain [20]: 11
  with precondition: [B=0,E=C,A=D+1,A=E+F,A>=0,E>=A,2*E>=A+1] 

* Chain [19]: 28*s(87)+28*s(88)+32*s(89)+36*s(90)+8
  Such that:s(77) =< -2*D+4*F-2
s(78) =< -D+3*F-2
s(84) =< D-1
s(68) =< D-F+1
s(73) =< 2*D-3*E
s(81) =< 2*D-2*F
s(86) =< F-1
s(80) =< F
aux(126) =< -D+2*F-1
aux(127) =< D-2*F+1
aux(128) =< D-F
s(89) =< aux(128)
s(90) =< s(86)
s(89)+s(91) =< s(84)
s(89)+s(92) =< s(84)
s(89)+s(90) =< s(84)
s(93) =< s(81)* (1/2)
s(90) =< aux(128)+aux(126)
s(90) =< s(81)+aux(126)
s(89) =< s(86)+aux(127)
s(89) =< s(91)+aux(127)
s(94) =< s(93)+s(78)
s(94) =< s(93)+s(73)
s(88) =< s(93)+s(78)
s(88) =< s(93)+s(73)
s(90) =< s(93)+aux(126)
s(90) =< s(81)+s(77)
s(89) =< s(92)+aux(127)
s(94) =< s(90)*s(68)
s(88) =< s(90)*s(68)
s(87) =< s(89)*s(80)
s(87) =< s(94)+aux(127)
s(87) =< s(94)+aux(128)
s(87) >= E-F
s(88) >= -E/2+F/2+1/2
s(87) >= E/2-F/2+1/2

  with precondition: [B=0,E=C,A=D+1,A=E+F,A>=3,E>=1,A>=E+1] 


#### Cost of chains of amor/atva/Rotate_rotate([CI)V(A,B):
* Chain [42]: 28*s(95)+33
  Such that:s(95) =< 2*B
s(95) >= 1

  with precondition: [A=2*B,A>=1] 

* Chain [41]: 22
  with precondition: [2*B=A,B>=0] 

* Chain [40]: 33
  with precondition: [2*B=A,B>=0] 

* Chain [39]: 28
  with precondition: [0>=B,A>=0,A>=B+1] 

* Chain [38]: 39
  with precondition: [0>=B,A>=0,A>=B+1] 

* Chain [37]: 28*s(96)+39
  Such that:s(96) =< A
s(96) >= 1

  with precondition: [0>=B,A>=1] 

* Chain [36]: 36
  with precondition: [A>=0,B>=A,2*B>=A+1] 

* Chain [35]: 25
  with precondition: [A>=0,B>=A,2*B>=A+1] 

* Chain [34]: 28*s(97)+36
  Such that:s(97) =< A
s(97) >= 1

  with precondition: [A>=1,B>=A] 

* Chain [33]: 28*s(102)+28*s(110)+28*s(111)+32*s(112)+36*s(113)+33
  Such that:s(107) =< -A+2*B
s(101) =< A-2
s(102) =< A
s(108) =< A-2*B
s(103) =< A-B-1
s(104) =< A-B
s(98) =< 2*A-4*B
s(100) =< 2*A-3*B-2
s(99) =< 2*A-3*B-1
s(109) =< B-1
s(105) =< B
s(106) =< 2*B-2
s(112) =< s(109)
s(113) =< s(103)
s(112)+s(114) =< s(101)
s(112)+s(115) =< s(101)
s(112)+s(113) =< s(101)
s(116) =< s(106)* (1/2)
s(113) =< s(109)+s(108)
s(113) =< s(106)+s(108)
s(112) =< s(103)+s(107)
s(112) =< s(114)+s(107)
s(117) =< s(116)+s(99)
s(117) =< s(116)+s(100)
s(111) =< s(116)+s(99)
s(111) =< s(116)+s(100)
s(113) =< s(116)+s(108)
s(113) =< s(106)+s(98)
s(112) =< s(115)+s(107)
s(117) =< s(113)*s(105)
s(111) =< s(113)*s(105)
s(110) =< s(112)*s(104)
s(110) =< s(117)+s(107)
s(110) =< s(117)+s(109)
s(102) >= 1
s(110) >= -A+2*B
s(110) >= -A/2+B+1/2
s(111) >= A/2-B+1/2

  with precondition: [A>=3,B>=1,A>=B+1] 

* Chain [32]: 28*s(129)+28*s(130)+32*s(131)+36*s(132)+33
  Such that:s(127) =< -A+2*B
s(120) =< A-2
s(126) =< A-2*B
s(124) =< A-B-1
s(125) =< A-B
s(118) =< 2*A-4*B
s(122) =< 2*A-3*B-2
s(119) =< 2*A-3*B-1
s(128) =< B-1
s(121) =< B
s(123) =< 2*B-2
s(131) =< s(128)
s(132) =< s(124)
s(131)+s(133) =< s(120)
s(131)+s(134) =< s(120)
s(131)+s(132) =< s(120)
s(135) =< s(123)* (1/2)
s(132) =< s(128)+s(126)
s(132) =< s(123)+s(126)
s(131) =< s(124)+s(127)
s(131) =< s(133)+s(127)
s(136) =< s(135)+s(119)
s(136) =< s(135)+s(122)
s(130) =< s(135)+s(119)
s(130) =< s(135)+s(122)
s(132) =< s(135)+s(126)
s(132) =< s(123)+s(118)
s(131) =< s(134)+s(127)
s(136) =< s(132)*s(121)
s(130) =< s(132)*s(121)
s(129) =< s(131)*s(125)
s(129) =< s(136)+s(127)
s(129) =< s(136)+s(128)
s(129) >= -A+2*B
s(129) >= -A/2+B+1/2
s(130) >= A/2-B+1/2

  with precondition: [A>=3,B>=1,A>=B+1] 

* Chain [31]: 28*s(148)+28*s(149)+32*s(150)+36*s(151)+22
  Such that:s(146) =< -A+2*B
s(139) =< A-2
s(145) =< A-2*B
s(143) =< A-B-1
s(144) =< A-B
s(137) =< 2*A-4*B
s(141) =< 2*A-3*B-2
s(138) =< 2*A-3*B-1
s(147) =< B-1
s(140) =< B
s(142) =< 2*B-2
s(150) =< s(147)
s(151) =< s(143)
s(150)+s(152) =< s(139)
s(150)+s(153) =< s(139)
s(150)+s(151) =< s(139)
s(154) =< s(142)* (1/2)
s(151) =< s(147)+s(145)
s(151) =< s(142)+s(145)
s(150) =< s(143)+s(146)
s(150) =< s(152)+s(146)
s(155) =< s(154)+s(138)
s(155) =< s(154)+s(141)
s(149) =< s(154)+s(138)
s(149) =< s(154)+s(141)
s(151) =< s(154)+s(145)
s(151) =< s(142)+s(137)
s(150) =< s(153)+s(146)
s(155) =< s(151)*s(140)
s(149) =< s(151)*s(140)
s(148) =< s(150)*s(144)
s(148) =< s(155)+s(146)
s(148) =< s(155)+s(147)
s(148) >= -A+2*B
s(148) >= -A/2+B+1/2
s(149) >= A/2-B+1/2

  with precondition: [A>=3,B>=1,A>=B+1] 


Closed-form bounds of amor/atva/Rotate_rotate([CI)V(A,B): 
-------------------------------------
* Chain [42] with precondition: [A=2*B,A>=1] 
    - Lower bound: 61 
    - Complexity: constant
 * Chain [41] with precondition: [2*B=A,B>=0] 
    - Lower bound: 22 
    - Complexity: constant
 * Chain [40] with precondition: [2*B=A,B>=0] 
    - Lower bound: 33 
    - Complexity: constant
 * Chain [39] with precondition: [0>=B,A>=0,A>=B+1] 
    - Lower bound: 28 
    - Complexity: constant
 * Chain [38] with precondition: [0>=B,A>=0,A>=B+1] 
    - Lower bound: 39 
    - Complexity: constant
 * Chain [37] with precondition: [0>=B,A>=1] 
    - Lower bound: 67 
    - Complexity: constant
 * Chain [36] with precondition: [A>=0,B>=A,2*B>=A+1] 
    - Lower bound: 36 
    - Complexity: constant
 * Chain [35] with precondition: [A>=0,B>=A,2*B>=A+1] 
    - Lower bound: 25 
    - Complexity: constant
 * Chain [34] with precondition: [A>=1,B>=A] 
    - Lower bound: 64 
    - Complexity: constant
 * Chain [33] with precondition: [A>=3,B>=1,A>=B+1] 
    - Lower bound: nat(-A+2*B)*28+61+nat(A/2-B+1/2)*28 
    - Complexity: n
 * Chain [32] with precondition: [A>=3,B>=1,A>=B+1] 
    - Lower bound: nat(-A+2*B)*28+33+nat(A/2-B+1/2)*28 
    - Complexity: n
 * Chain [31] with precondition: [A>=3,B>=1,A>=B+1] 
    - Lower bound: nat(-A+2*B)*28+22+nat(A/2-B+1/2)*28 
    - Complexity: n
 
### Partitioned lower bound of amor/atva/Rotate_rotate([CI)V(A,B): 
* 22 
 if [A=2*B,A>=3]
 or [A=2,B=1]
 or [A=0,B=0]
* 25 
 if [A=0,2*B>=1]
 or [A>=1,B>=A]
* 28 
 if [0>=B,A>=1]
 or [A=0,0>=B+1]
* -28*A+56*B+22 
 if [2*B>=A+1,A>=B+1]
* 14*A-28*B+36 
 if [B>=1,A>=2*B+1]
Possible lower bounds : [22,25,28,-28*A+56*B+22,14*A-28*B+36]
Maximum lower bound complexity: n

Time statistics: 
-------------------------------------
* Partial evaluation computed in 55 ms.
* Invariants computed in 203 ms.
   - Backward Invariants 100 ms.
   - Transitive Invariants 31 ms.
* Refinement performed in 432 ms.
* Termination proved in 139 ms.
* Upper bounds computed in 2483 ms.
   - Equation cost structures 665 ms.
   - Phase cost structures 1321 ms.
   - Chain cost structures 389 ms.
   - Solving cost expressions 30 ms.
* Total analysis performed in 3411 ms.


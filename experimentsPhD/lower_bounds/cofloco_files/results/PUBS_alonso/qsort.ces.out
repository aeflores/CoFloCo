
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [32_loop/4]
1. recursive : [28_loop/6]
2. non_recursive : [amor/atva/DynamicArray_insertionSort(II[C)V/3]
3. non_recursive : [amor/atva/DynamicArray_swap(II[C)V/3]
4. recursive : [19_loop/5]
5. non_recursive : [amor/atva/DynamicArray_partition(II[C)I/3]
6. recursive : [amor/atva/DynamicArray_qs(III[C)V/4]
7. non_recursive : [amor/atva/DynamicArray_qsort(II[C)V/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into 32_loop/4
1. SCC is partially evaluated into 28_loop/6
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into 19_loop/5
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into amor/atva/DynamicArray_qs(III[C)V/4
7. SCC is partially evaluated into amor/atva/DynamicArray_qsort(II[C)V/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations 32_loop/4 
* CE 15 is refined into CE [16] 
* CE 14 is refined into CE [17] 
* CE 13 is refined into CE [18] 


#### Refined cost equations 32_loop/4 
* CE 16: 32_loop(A,B,A,C) = 3
     [A>=0] 
* CE 17: 32_loop(A,B,C,D) = 10
     [C>=A+1,A>=0] 
* CE 18: 32_loop(A,B,C,D) = 20+ 32_loop(A,B,E,D)
     [C>=A+1,A>=0,C=E+1] 

### Cost equations --> "Loop" of 32_loop/4 
* CEs [18] --> Loop 15 
* CEs [17] --> Loop 16 
* CEs [16] --> Loop 17 

#### Loops of 32_loop/4 
* Loop 15: 32_loop(A,B,C,D)->  32_loop(A,B,C',D)
                  [C>=A+1,A>=0,C=C'+1] 
* Loop 16: 32_loop(A,B,C,D) [C>=A+1,A>=0] 
* Loop 17: 32_loop(A,B,A,C) [A>=0] 

### Ranking functions of CR 32_loop(A,B,C,D) 
* RF of phase [15]: [-A+C,C]

#### Partial ranking functions of CR 32_loop(A,B,C,D) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    -A+C
    C


### Resulting Chains:32_loop(A,B,C,D) 
* [[15],17]
* [[15],16]
* [16]


### Specialization of cost equations 28_loop/6 
* CE 12 is refined into CE [19] 
* CE 11 is refined into CE [20,21,22] 


#### Refined cost equations 28_loop/6 
* CE 19: 28_loop(A,B,C,D,E,F) = 3
     [D>=E+1,D>=B+1,D>=A+1,A>=0] 
* CE 20: 28_loop(A,B,C,D,E,F) = 15+ 32_loop(A,C,D,G):[[15],17]+ 28_loop(A,B,C,H,I,G)
     [D>=I,B>=D,D>=A+1,D>=E+1,A>=0,D+1=H] 
* CE 21: 28_loop(A,B,C,D,E,F) = 15+ 32_loop(A,C,D,G):[[15],16]+ 28_loop(A,B,C,H,I,G)
     [D>=I,B>=D,D>=A+2,D>=E+1,A>=0,D+1=H] 
* CE 22: 28_loop(A,B,C,D,E,F) = 15+ 32_loop(A,C,D,G):[16]+ 28_loop(A,B,C,H,I,G)
     [D>=I,B>=D,D>=A+1,D>=E+1,A>=0,D+1=H] 

### Cost equations --> "Loop" of 28_loop/6 
* CEs [21] --> Loop 18 
* CEs [22] --> Loop 19 
* CEs [20] --> Loop 20 
* CEs [19] --> Loop 21 

#### Loops of 28_loop/6 
* Loop 18: 28_loop(A,B,C,D,E,F)->  28_loop(A,B,C,D',E',F')
                  [D>=E',D>=E+1,B>=D,D>=A+2,A>=0,D+1=D'] 
* Loop 19: 28_loop(A,B,C,D,E,F)->  28_loop(A,B,C,D',E',F')
                  [D>=E',D>=E+1,B>=D,D>=A+1,A>=0,D+1=D'] 
* Loop 20: 28_loop(A,B,C,D,E,F)->  28_loop(A,B,C,D',E',F')
                  [D>=E',D>=E+1,B>=D,D>=A+1,A>=0,D+1=D'] 
* Loop 21: 28_loop(A,B,C,D,E,F) [D>=E+1,D>=B+1,D>=A+1,A>=0] 

### Ranking functions of CR 28_loop(A,B,C,D,E,F) 
* RF of phase [18,19,20]: [B-D+1]

#### Partial ranking functions of CR 28_loop(A,B,C,D,E,F) 
* Partial RF of phase [18,19,20]:
  - RF of loop [18:1,19:1,20:1]:
    B-D+1


### Resulting Chains:28_loop(A,B,C,D,E,F) 
* [[18,19,20],21]
* [21]


### Specialization of cost equations 19_loop/5 
* CE 10 is refined into CE [23] 
* CE 8 is refined into CE [24] 
* CE 9 is refined into CE [25] 


#### Refined cost equations 19_loop/5 
* CE 23: 19_loop(A,B,C,D,E) = 3
     [E>=D+1,D>=0,E=A+1] 
* CE 24: 19_loop(A,B,C,D,E) = 10+ 19_loop(A,B,C,D,F)
     [A>=E,E>=D+1,D>=0,E+1=F] 
* CE 25: 19_loop(A,B,C,D,E) = 30+ 19_loop(A,B,C,F,G)
     [A>=E,E>=D+1,D>=0,E+1=G,D+1=F] 

### Cost equations --> "Loop" of 19_loop/5 
* CEs [24] --> Loop 22 
* CEs [25] --> Loop 23 
* CEs [23] --> Loop 24 

#### Loops of 19_loop/5 
* Loop 22: 19_loop(A,B,C,D,E)->  19_loop(A,B,C,D,E')
                  [A>=E,E>=D+1,D>=0,E+1=E'] 
* Loop 23: 19_loop(A,B,C,D,E)->  19_loop(A,B,C,D',E')
                  [A>=E,E>=D+1,D>=0,E+1=E',D+1=D'] 
* Loop 24: 19_loop(A,B,C,D,E) [E>=D+1,D>=0,E=A+1] 

### Ranking functions of CR 19_loop(A,B,C,D,E) 
* RF of phase [22,23]: [A-E+1]

#### Partial ranking functions of CR 19_loop(A,B,C,D,E) 
* Partial RF of phase [22,23]:
  - RF of loop [22:1,23:1]:
    A-E+1
  - RF of loop [23:1]:
    A-D


### Resulting Chains:19_loop(A,B,C,D,E) 
* [[22,23],24]
* [24]


### Specialization of cost equations amor/atva/DynamicArray_qs(III[C)V/4 
* CE 7 is refined into CE [26,27] 
* CE 5 is refined into CE [28,29] 
* CE 6 is refined into CE [30,31] 


#### Refined cost equations amor/atva/DynamicArray_qs(III[C)V/4 
* CE 26: amor/atva/DynamicArray_qs(III[C)V(A,B,C,D) = 16+ 28_loop(A,B,D,E,F,G):[[18,19,20],21]
     [A+C>=B+1,B>=A+1,A>=0,A+1=E,G=0,F=0] 
* CE 27: amor/atva/DynamicArray_qs(III[C)V(A,B,C,D) = 16+ 28_loop(A,B,D,E,F,G):[21]
     [A+C>=B+1,A>=B,B+1>=A,A>=0,A+1=E,G=0,F=0] 
* CE 28: amor/atva/DynamicArray_qs(III[C)V(A,B,C,D) = 48+ 19_loop(B,D,E,A,F):[[22,23],24]
     [B>=A+C,B>=A+1,A>=0,C>=0,A+1=F] 
* CE 29: amor/atva/DynamicArray_qs(III[C)V(A,A,B,C) = 48+ 19_loop(A,C,D,A,E):[24]
     [A>=0,A+1=E,B=0] 
* CE 30: amor/atva/DynamicArray_qs(III[C)V(A,B,C,D) = 62+ 19_loop(B,D,E,A,F):[[22,23],24]+ amor/atva/DynamicArray_qs(III[C)V(A,G,C,D)+ amor/atva/DynamicArray_qs(III[C)V(H,B,C,D)
     [B>=A+C,B+1>=H,H>=A+1,B>=A+1,A>=0,C>=0,H=G+2,A+1=F] 
* CE 31: amor/atva/DynamicArray_qs(III[C)V(A,A,B,C) = 62+ 19_loop(A,C,D,A,E):[24]+ amor/atva/DynamicArray_qs(III[C)V(A,F,G,C)+ amor/atva/DynamicArray_qs(III[C)V(H,A,I,C)
     [A>=0,A+1=H,A=F+1,A+1=E,I=0,G=0,B=0] 

### Cost equations --> "Loop" of amor/atva/DynamicArray_qs(III[C)V/4 
* CEs [30] --> Loop 25 
* CEs [31] --> Loop 26 
* CEs [26] --> Loop 27 
* CEs [27] --> Loop 28 
* CEs [28] --> Loop 29 
* CEs [29] --> Loop 30 

#### Loops of amor/atva/DynamicArray_qs(III[C)V/4 
* Loop 25: amor/atva/DynamicArray_qs(III[C)V(A,B,C,D)->  amor/atva/DynamicArray_qs(III[C)V(A,B',C,D)  amor/atva/DynamicArray_qs(III[C)V(A'2,B,C,D)
                  [B>=A+C,B+1>=A'2,A'2>=A+1,B>=A+1,C>=0,A>=0,A'2=B'+2] 
* Loop 26: amor/atva/DynamicArray_qs(III[C)V(A,A,B,C)->  amor/atva/DynamicArray_qs(III[C)V(A,A',B',C)  amor/atva/DynamicArray_qs(III[C)V(A'2,A,B'2,C)
                  [A>=0,A+1=A'2,A=A'+1,B'2=0,B'=0,B=0] 
* Loop 27: amor/atva/DynamicArray_qs(III[C)V(A,B,C,D) [A+C>=B+1,B>=A+1,A>=0] 
* Loop 28: amor/atva/DynamicArray_qs(III[C)V(A,B,C,D) [A+C>=B+1,A>=B,B+1>=A,A>=0] 
* Loop 29: amor/atva/DynamicArray_qs(III[C)V(A,B,C,D) [B>=A+C,B>=A+1,C>=0,A>=0] 
* Loop 30: amor/atva/DynamicArray_qs(III[C)V(A,A,B,C) [A>=0,B=0] 

### Ranking functions of CR amor/atva/DynamicArray_qs(III[C)V(A,B,C,D) 
* RF of phase [25]: [-A+B,-A+B-C+1]

#### Partial ranking functions of CR amor/atva/DynamicArray_qs(III[C)V(A,B,C,D) 
* Partial RF of phase [25]:
  - RF of loop [25:1]:
    B
    B-C+1
  - RF of loop [25:1,25:2]:
    -A+B
    -A+B-C+1


### Resulting Chains:amor/atva/DynamicArray_qs(III[C)V(A,B,C,D) 
* [30]
* [29]
* [28]
* [27]
* [multiple(26,[[28]])]
* [multiple([25],[[30],[29],[28],[27],[multiple(26,[[28]])]])]


### Specialization of cost equations amor/atva/DynamicArray_qsort(II[C)V/3 
* CE 4 is refined into CE [32,33,34,35,36,37] 
* CE 2 is refined into CE [38] 
* CE 3 is refined into CE [39] 


#### Refined cost equations amor/atva/DynamicArray_qsort(II[C)V/3 
* CE 32: amor/atva/DynamicArray_qsort(II[C)V(A,B,C) = 12+ amor/atva/DynamicArray_qs(III[C)V(D,E,F,C):[30]
     [F=0,E=0,D=0,B=0,A=1] 
* CE 33: amor/atva/DynamicArray_qsort(II[C)V(A,B,C) = 12+ amor/atva/DynamicArray_qs(III[C)V(D,E,B,C):[29]
     [E>=B,B>=0,E>=1,E+1=A,D=0] 
* CE 34: amor/atva/DynamicArray_qsort(II[C)V(A,B,C) = 12+ amor/atva/DynamicArray_qs(III[C)V(D,E,B,C):[28]
     [B>=E+1,E+1>=0,0>=E,E+1=A,D=0] 
* CE 35: amor/atva/DynamicArray_qsort(II[C)V(A,B,C) = 12+ amor/atva/DynamicArray_qs(III[C)V(D,E,B,C):[27]
     [B>=E+1,E>=1,E+1=A,D=0] 
* CE 36: amor/atva/DynamicArray_qsort(II[C)V(A,B,C) = 12+ amor/atva/DynamicArray_qs(III[C)V(D,E,F,C):[multiple(26,[[28]])]
     [F=0,E=0,D=0,B=0,A=1] 
* CE 37: amor/atva/DynamicArray_qsort(II[C)V(A,B,C) = 12+ amor/atva/DynamicArray_qs(III[C)V(D,E,B,C):[multiple([25],[[30],[29],[28],[27],[multiple(26,[[28]])]])]
     [E>=B,B>=0,E>=1,E+1=A,D=0] 
* CE 38: amor/atva/DynamicArray_qsort(II[C)V(A,B,C) = 3
     [0>=B+1] 
* CE 39: amor/atva/DynamicArray_qsort(II[C)V(A,B,C) = 5
     [B>=0,0>=A+1] 

### Cost equations --> "Loop" of amor/atva/DynamicArray_qsort(II[C)V/3 
* CEs [35] --> Loop 31 
* CEs [37] --> Loop 32 
* CEs [33] --> Loop 33 
* CEs [38] --> Loop 34 
* CEs [39] --> Loop 35 
* CEs [34] --> Loop 36 
* CEs [36] --> Loop 37 
* CEs [32] --> Loop 38 

#### Loops of amor/atva/DynamicArray_qsort(II[C)V/3 
* Loop 31: amor/atva/DynamicArray_qsort(II[C)V(A,B,C) [B>=A,A>=2] 
* Loop 32: amor/atva/DynamicArray_qsort(II[C)V(A,B,C) [A>=B+1,B>=0,A>=2] 
* Loop 33: amor/atva/DynamicArray_qsort(II[C)V(A,B,C) [A>=B+1,B>=0,A>=2] 
* Loop 34: amor/atva/DynamicArray_qsort(II[C)V(A,B,C) [0>=B+1] 
* Loop 35: amor/atva/DynamicArray_qsort(II[C)V(A,B,C) [B>=0,0>=A+1] 
* Loop 36: amor/atva/DynamicArray_qsort(II[C)V(A,B,C) [B>=A,A>=0,1>=A] 
* Loop 37: amor/atva/DynamicArray_qsort(II[C)V(A,B,C) [B=0,A=1] 
* Loop 38: amor/atva/DynamicArray_qsort(II[C)V(A,B,C) [B=0,A=1] 

### Ranking functions of CR amor/atva/DynamicArray_qsort(II[C)V(A,B,C) 

#### Partial ranking functions of CR amor/atva/DynamicArray_qsort(II[C)V(A,B,C) 


### Resulting Chains:amor/atva/DynamicArray_qsort(II[C)V(A,B,C) 
* [38]
* [37]
* [36]
* [35]
* [34]
* [33]
* [32]
* [31]


Computing Bounds
=====================================

#### Cost of loops [15] 

 * loop 15:32_loop(A,B,C,D) -> [32_loop(A',B',C',D')] 
20
#### Cost of phase [15]:32_loop(A,B,C,D) -> [32_loop(A',B',C',D')] 
20*it(15)+0
  Such that:it(15) =< -A+C
it(15) =< -A+C+A'-C'
it(15) =< C
it(15) =< C-C'
it(15) >= -A+C+A'-C'
it(15) >= C-C'

#### Cost of phase [15]:32_loop(A,B,C,D) -> [32_loop(A',B',C',D')] 
20*it(15)+0
  Such that:it(15) =< -A+C
it(15) =< -A+C+A'-C'
it(15) =< C
it(15) =< C-C'
it(15) >= -A+C+A'-C'
it(15) >= C-C'

#### Cost of chains of 32_loop(A,B,C,D):
* Chain [[15],17]: 20*it(15)+3
  Such that:it(15) =< -A+C
it(15) >= -A+C

  with precondition: [A>=0,C>=A+1] 

* Chain [[15],16]: 20*it(15)+10
  Such that:it(15) =< -A+C-1
it(15) >= 1

  with precondition: [A>=0,C>=A+2] 

* Chain [16]: 10
  with precondition: [A>=0,C>=A+1] 


#### Cost of loops [18,19,20] 

 * loop 18:28_loop(A,B,C,D,E,F) -> [28_loop(A',B',C',D',E',F')] 
20*s(2)+25
  Such that:s(2) =< -A+D'-2
s(2) >= 1

 * loop 19:28_loop(A,B,C,D,E,F) -> [28_loop(A',B',C',D',E',F')] 
25
 * loop 20:28_loop(A,B,C,D,E,F) -> [28_loop(A',B',C',D',E',F')] 
20*s(4)+18
  Such that:s(4) =< -A+D
s(4) >= -A+D

#### Cost of phase [18,19,20]:28_loop(A,B,C,D,E,F) -> [28_loop(A',B',C',D',E',F')] 
25*it(18)+25*it(19)+18*it(20)+20*s(5)+20*s(6)+0
  Such that:aux(2) =< -A+B-1
it(18)+it(19)+it(20) =< B-D-B'+D'
aux(5) =< B-D+1
it(18)+it(19)+it(20) =< aux(5)
aux(4) =< aux(2)+1
s(5) =< it(18)*aux(2)
s(6) =< it(20)*aux(4)
aux(3) >= -A+D
it(18)+it(19)+s(6) >= -D+D'
aux(6) >= B-D-B'+D'
aux(1)+it(19)+it(20) >= aux(6)
it(18)+it(19)+it(20) >= aux(6)
s(6) >= it(20)*aux(3)
s(5) >= aux(1)

#### Cost of chains of 28_loop(A,B,C,D,E,F):
* Chain [[18,19,20],21]: 25*it(18)+25*it(19)+18*it(20)+20*s(5)+20*s(6)+3
  Such that:aux(2) =< -A+B-1
aux(7) =< B-D+1
it(18)+it(19)+it(20) =< aux(7)
aux(4) =< aux(2)+1
s(5) =< it(18)*aux(2)
s(6) =< it(20)*aux(4)
aux(3) >= -A+D
aux(8) >= B-D+1
aux(8) >= aux(8)
it(18)+it(19)+s(6) >= aux(8)
aux(1)+it(19)+it(20) >= aux(8)
it(18)+it(19)+it(20) >= aux(8)
s(6) >= it(20)*aux(3)
s(5) >= aux(1)

  with precondition: [A>=0,D>=A+1,B>=D,D>=E+1] 

* Chain [21]: 3
  with precondition: [A>=0,D>=A+1,D>=B+1,D>=E+1] 


#### Cost of loops [22,23] 

 * loop 22:19_loop(A,B,C,D,E) -> [19_loop(A',B',C',D',E')] 
10
 * loop 23:19_loop(A,B,C,D,E) -> [19_loop(A',B',C',D',E')] 
30
#### Cost of phase [22,23]:19_loop(A,B,C,D,E) -> [19_loop(A',B',C',D',E')] 
10*it(22)+30*it(23)+0
  Such that:it(23) =< A-D
it(23) =< A-D-A'+D'
it(22)+it(23) =< A-E-A'+E'
aux(9) =< A-E+1
it(22)+it(23) =< aux(9)
it(23) >= A-D-A'+D'
it(22)+it(23) >= A-E-A'+E'

#### Cost of chains of 19_loop(A,B,C,D,E):
* Chain [[22,23],24]: 10*it(22)+30*it(23)+3
  Such that:aux(10) =< A-E+1
it(22)+it(23) =< aux(10)
it(22)+it(23) >= A-E+1

  with precondition: [D>=0,E>=D+1,A>=E] 

* Chain [24]: 3
  with precondition: [E=A+1,D>=0,E>=D+1] 


#### Cost of loops [25] 

 * loop 25:amor/atva/DynamicArray_qs(III[C)V(A,B,C,D) -> [amor/atva/DynamicArray_qs(III[C)V(A',B',C',D'),amor/atva/DynamicArray_qs(III[C)V(A'2,B'2,C'2,D'2)] 
10*s(26)+30*s(25)+65
  Such that:s(24) =< -A+B'2
s(25)+s(26) =< s(24)
s(25)+s(26) >= -A+B'2

#### Cost of phase [25]:amor/atva/DynamicArray_qs(III[C)V(A,B,C,D) -> [] 
65*it(25)+19*it([27])+19*it([28])+51*it([29])+51*it([30])+103*it([multiple(26,[[28]])])+10*s(27)+30*s(28)+10*s(30)+30*s(31)+25*s(33)+25*s(34)+18*s(35)+20*s(36)+20*s(37)+0
  Such that:s(10) =< -A+B-1
it([28])+it([29])+it([30])+it([multiple(26,[[28]])]) =< -A+B+2
it([29])+it([30])+it([multiple(26,[[28]])]) =< -A/2+B/2+1
it([27])+it([29]) =< -A/3+B/3+2/3
aux(37) =< -A+B
aux(38) =< -A+B+1
it([29])+s(40) =< aux(37)
s(32)+s(40) =< aux(37)
it([29])+it([30])+it([multiple(26,[[28]])]) =< aux(38)
it(25)+it([27])+it([29])+it([30])+it([multiple(26,[[28]])]) =< aux(38)
aux(19) =< s(10)+1
s(32)+s(40) =< it([28])+aux(37)
it([29])+s(40) =< it([28])+aux(37)
s(32) =< it([29])*aux(19)
s(40) =< it([27])*aux(19)
s(29) =< it(25)*aux(19)
s(33)+s(34)+s(35) =< s(40)
s(37) =< s(33)*s(10)
s(36) =< s(35)*aux(19)
s(30)+s(31) =< s(32)
s(27)+s(28) =< s(29)

#### Cost of chains of amor/atva/DynamicArray_qs(III[C)V(A,B,C,D):
* Chain [30]: 51
  with precondition: [C=0,B=A,B>=0] 

* Chain [29]: 10*s(8)+30*s(9)+51
  Such that:s(7) =< -A+B
s(8)+s(9) =< s(7)
s(9)+s(8) >= -A+B

  with precondition: [A>=0,C>=0,B>=A+1,B>=A+C] 

* Chain [28]: 19
  with precondition: [A>=0,B+1>=A,A>=B,A+C>=B+1] 

* Chain [27]: 25*s(14)+25*s(15)+18*s(16)+20*s(17)+20*s(20)+19
  Such that:s(10) =< -A+B-1
s(11) =< -A+B
s(14)+s(15)+s(16) =< s(11)
s(19) =< s(10)+1
s(20) =< s(14)*s(10)
s(17) =< s(16)*s(19)
s(12) >= 1
s(13) >= -A+B
s(13) >= s(13)
s(14)+s(15)+s(17) >= s(13)
s(15)+s(16)+s(18) >= s(13)
s(14)+s(15)+s(16) >= s(13)
s(17) >= s(16)*s(12)
s(20) >= s(18)

  with precondition: [A>=0,B>=A+1,A+C>=B+1] 

* Chain [multiple(26,[[28]])]: 103
  with precondition: [C=0,A=B,A>=0] 

* Chain [multiple([25],[[30],[29],[28],[27],[multiple(26,[[28]])]])]: 65*it(25)+19*it([27])+19*it([28])+51*it([29])+51*it([30])+103*it([multiple(26,[[28]])])+10*s(27)+30*s(28)+10*s(30)+30*s(31)+25*s(33)+25*s(34)+18*s(35)+20*s(36)+20*s(37)+0
  Such that:s(10) =< -A+B-1
it([28])+it([29])+it([30])+it([multiple(26,[[28]])]) =< -A+B+2
it([29])+it([30])+it([multiple(26,[[28]])]) =< -A/2+B/2+1
it([27])+it([29]) =< -A/3+B/3+2/3
aux(37) =< -A+B
aux(38) =< -A+B+1
it([29])+s(40) =< aux(37)
s(32)+s(40) =< aux(37)
it([29])+it([30])+it([multiple(26,[[28]])]) =< aux(38)
it(25)+it([27])+it([29])+it([30])+it([multiple(26,[[28]])]) =< aux(38)
aux(19) =< s(10)+1
s(32)+s(40) =< it([28])+aux(37)
it([29])+s(40) =< it([28])+aux(37)
s(32) =< it([29])*aux(19)
s(40) =< it([27])*aux(19)
s(29) =< it(25)*aux(19)
s(33)+s(34)+s(35) =< s(40)
s(37) =< s(33)*s(10)
s(36) =< s(35)*aux(19)
s(30)+s(31) =< s(32)
s(27)+s(28) =< s(29)

  with precondition: [A>=0,C>=0,B>=A+1,B>=A+C] 


#### Cost of chains of amor/atva/DynamicArray_qsort(II[C)V(A,B,C):
* Chain [38]: 63
  with precondition: [A=1,B=0] 

* Chain [37]: 115
  with precondition: [A=1,B=0] 

* Chain [36]: 31
  with precondition: [1>=A,A>=0,B>=A] 

* Chain [35]: 5
  with precondition: [0>=A+1,B>=0] 

* Chain [34]: 3
  with precondition: [0>=B+1] 

* Chain [33]: 30*s(42)+10*s(43)+63
  Such that:s(41) =< A-1
s(42)+s(43) =< s(41)
s(43)+s(42) >= A-1

  with precondition: [A>=2,B>=0,A>=B+1] 

* Chain [32]: 19*s(45)+51*s(46)+51*s(47)+103*s(48)+19*s(49)+65*s(54)+25*s(57)+25*s(58)+18*s(59)+20*s(60)+20*s(61)+10*s(62)+30*s(63)+10*s(64)+30*s(65)+12
  Such that:s(44) =< A-2
s(50) =< A-1
s(51) =< A
s(48)+s(47)+s(46)+s(45) =< A+1
s(47)+s(46) =< A/2+1/2
s(49)+s(46) =< A/3+1/3
s(46)+s(52) =< s(50)
s(52)+s(53) =< s(50)
s(46)+s(47)+s(48)+s(49)+s(54) =< s(51)
s(55) =< s(44)+1
s(53) =< s(46)*s(55)
s(52) =< s(49)*s(55)
s(56) =< s(54)*s(55)
s(57)+s(58)+s(59) =< s(52)
s(60) =< s(57)*s(44)
s(61) =< s(59)*s(55)
s(62)+s(63) =< s(53)
s(64)+s(65) =< s(56)

  with precondition: [A>=2,B>=0,A>=B+1] 

* Chain [31]: 25*s(70)+25*s(71)+18*s(72)+20*s(73)+20*s(76)+31
  Such that:s(66) =< A-2
s(67) =< A-1
s(70)+s(71)+s(72) =< s(67)
s(75) =< s(66)+1
s(76) =< s(70)*s(66)
s(73) =< s(72)*s(75)
s(68) >= 1
s(69) >= A-1
s(69) >= s(69)
s(70)+s(71)+s(73) >= s(69)
s(71)+s(72)+s(74) >= s(69)
s(70)+s(71)+s(72) >= s(69)
s(73) >= s(72)*s(68)
s(76) >= s(74)

  with precondition: [A>=2,B>=A] 


Closed-form bounds of amor/atva/DynamicArray_qsort(II[C)V(A,B,C): 
-------------------------------------
* Chain [38] with precondition: [A=1,B=0] 
    - Lower bound: 63 
    - Complexity: constant
 * Chain [37] with precondition: [A=1,B=0] 
    - Lower bound: 115 
    - Complexity: constant
 * Chain [36] with precondition: [1>=A,A>=0,B>=A] 
    - Lower bound: 31 
    - Complexity: constant
 * Chain [35] with precondition: [0>=A+1,B>=0] 
    - Lower bound: 5 
    - Complexity: constant
 * Chain [34] with precondition: [0>=B+1] 
    - Lower bound: 3 
    - Complexity: constant
 * Chain [33] with precondition: [A>=2,B>=0,A>=B+1] 
    - Lower bound: 10*A+53 
    - Complexity: n
 * Chain [32] with precondition: [A>=2,B>=0,A>=B+1] 
    - Lower bound: 12 
    - Complexity: constant
 * Chain [31] with precondition: [A>=2,B>=A] 
    - Lower bound: 20*A+11 
    - Complexity: n
 
### Partitioned lower bound of amor/atva/DynamicArray_qsort(II[C)V(A,B,C): 
* 3 
 if [0>=B+1,A>=B+1]
 or [0=1]
* 12 
 if [A>=2,B>=0,A>=B+1]
* 31 
 if [1>=A,A>=0,B>=A]
* 63 
 if [A=1,B=0]
* 20*A+11 
 if [A>=2,B>=A]
Possible lower bounds : [3,12,31,63,20*A+11]
Maximum lower bound complexity: n

Time statistics: 
-------------------------------------
* Partial evaluation computed in 53 ms.
* Invariants computed in 217 ms.
   - Backward Invariants 85 ms.
   - Transitive Invariants 43 ms.
* Refinement performed in 266 ms.
* Termination proved in 80 ms.
* Upper bounds computed in 718 ms.
   - Equation cost structures 131 ms.
   - Phase cost structures 506 ms.
   - Chain cost structures 72 ms.
   - Solving cost expressions 11 ms.
* Total analysis performed in 1438 ms.


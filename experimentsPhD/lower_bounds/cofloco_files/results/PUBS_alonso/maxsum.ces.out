
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive : [amor/atva/MaxSumSubArray_choose(Lamor/atva/Rec;Lamor/atva/Rec;Lamor/atva/Rec;)Lamor/atva/Rec;/3]
1. recursive : [26_loop/7]
2. recursive : [29_loop/7]
3. non_recursive : [java/lang/Object_<init>()V/1]
4. non_recursive : [amor/atva/Rec_<init>(IID)V/5]
5. non_recursive : [amor/atva/MaxSumSubArray_cross([DIII)Lamor/atva/Rec;/4]
6. recursive : [amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;/3]
7. non_recursive : [amor/atva/MaxSumSubArray_maxsum([D)Lamor/atva/Rec;/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into amor/atva/MaxSumSubArray_choose(Lamor/atva/Rec;Lamor/atva/Rec;Lamor/atva/Rec;)Lamor/atva/Rec;/3
1. SCC is partially evaluated into 26_loop/7
2. SCC is partially evaluated into 29_loop/7
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into amor/atva/MaxSumSubArray_cross([DIII)Lamor/atva/Rec;/4
6. SCC is partially evaluated into amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;/3
7. SCC is partially evaluated into amor/atva/MaxSumSubArray_maxsum([D)Lamor/atva/Rec;/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations amor/atva/MaxSumSubArray_choose(Lamor/atva/Rec;Lamor/atva/Rec;Lamor/atva/Rec;)Lamor/atva/Rec;/3 
* CE 9 is refined into CE [16] 
* CE 8 is refined into CE [17] 


#### Refined cost equations amor/atva/MaxSumSubArray_choose(Lamor/atva/Rec;Lamor/atva/Rec;Lamor/atva/Rec;)Lamor/atva/Rec;/3 
* CE 16: amor/atva/MaxSumSubArray_choose(Lamor/atva/Rec;Lamor/atva/Rec;Lamor/atva/Rec;)Lamor/atva/Rec;(A,B,C) = 22
     [C>=1,B>=1,A>=1] 
* CE 17: amor/atva/MaxSumSubArray_choose(Lamor/atva/Rec;Lamor/atva/Rec;Lamor/atva/Rec;)Lamor/atva/Rec;(A,B,C) = 21
     [C>=1,B>=1,A>=1] 

### Cost equations --> "Loop" of amor/atva/MaxSumSubArray_choose(Lamor/atva/Rec;Lamor/atva/Rec;Lamor/atva/Rec;)Lamor/atva/Rec;/3 
* CEs [17] --> Loop 15 
* CEs [16] --> Loop 16 

#### Loops of amor/atva/MaxSumSubArray_choose(Lamor/atva/Rec;Lamor/atva/Rec;Lamor/atva/Rec;)Lamor/atva/Rec;/3 
* Loop 15: amor/atva/MaxSumSubArray_choose(Lamor/atva/Rec;Lamor/atva/Rec;Lamor/atva/Rec;)Lamor/atva/Rec;(A,B,C) [C>=1,B>=1,A>=1] 
* Loop 16: amor/atva/MaxSumSubArray_choose(Lamor/atva/Rec;Lamor/atva/Rec;Lamor/atva/Rec;)Lamor/atva/Rec;(A,B,C) [C>=1,B>=1,A>=1] 

### Ranking functions of CR amor/atva/MaxSumSubArray_choose(Lamor/atva/Rec;Lamor/atva/Rec;Lamor/atva/Rec;)Lamor/atva/Rec;(A,B,C) 

#### Partial ranking functions of CR amor/atva/MaxSumSubArray_choose(Lamor/atva/Rec;Lamor/atva/Rec;Lamor/atva/Rec;)Lamor/atva/Rec;(A,B,C) 


### Resulting Chains:amor/atva/MaxSumSubArray_choose(Lamor/atva/Rec;Lamor/atva/Rec;Lamor/atva/Rec;)Lamor/atva/Rec;(A,B,C) 
* [16]
* [15]


### Specialization of cost equations 26_loop/7 
* CE 12 is refined into CE [18] 
* CE 11 is refined into CE [19] 
* CE 10 is refined into CE [20] 


#### Refined cost equations 26_loop/7 
* CE 18: 26_loop(A,B,C,D,E,F,G) = 3
     [A>=B+2,B>=0,B=G+1] 
* CE 19: 26_loop(A,B,C,D,E,F,G) = 19+ 26_loop(A,B,H,I,H,I,J)
     [A+B>=2*G+2,G>=B,B>=0,G=J+1] 
* CE 20: 26_loop(A,B,C,D,E,F,G) = 15+ 26_loop(A,B,C,D,H,I,J)
     [A+B>=2*G+2,G>=B,B>=0,G=J+1] 

### Cost equations --> "Loop" of 26_loop/7 
* CEs [19] --> Loop 17 
* CEs [20] --> Loop 18 
* CEs [18] --> Loop 19 

#### Loops of 26_loop/7 
* Loop 17: 26_loop(A,B,C,D,E,F,G)->  26_loop(A,B,A',B',A',B',C')
                  [A+B>=2*G+2,G>=B,B>=0,G=C'+1] 
* Loop 18: 26_loop(A,B,C,D,E,F,G)->  26_loop(A,B,C,D,E',F',G')
                  [A+B>=2*G+2,G>=B,B>=0,G=G'+1] 
* Loop 19: 26_loop(A,B,C,D,E,F,G) [A>=B+2,B>=0,B=G+1] 

### Ranking functions of CR 26_loop(A,B,C,D,E,F,G) 
* RF of phase [17,18]: [-B+G+1,G+1]

#### Partial ranking functions of CR 26_loop(A,B,C,D,E,F,G) 
* Partial RF of phase [17,18]:
  - RF of loop [17:1,18:1]:
    -B+G+1
    G+1


### Resulting Chains:26_loop(A,B,C,D,E,F,G) 
* [[17,18],19]


### Specialization of cost equations 29_loop/7 
* CE 15 is refined into CE [21] 
* CE 14 is refined into CE [22] 
* CE 13 is refined into CE [23] 


#### Refined cost equations 29_loop/7 
* CE 21: 29_loop(A,B,C,D,E,F,B) = 3
     [A>=B,B>=2] 
* CE 22: 29_loop(A,B,C,D,E,F,G) = 21+ 29_loop(A,B,H,I,H,I,J)
     [B>=G+1,2*G+1>=B,A>=B,B>=2,G+1=J] 
* CE 23: 29_loop(A,B,C,D,E,F,G) = 15+ 29_loop(A,B,H,I,E,F,J)
     [B>=G+1,2*G+1>=B,A>=B,B>=2,G+1=J] 

### Cost equations --> "Loop" of 29_loop/7 
* CEs [22] --> Loop 20 
* CEs [23] --> Loop 21 
* CEs [21] --> Loop 22 

#### Loops of 29_loop/7 
* Loop 20: 29_loop(A,B,C,D,E,F,G)->  29_loop(A,B,A',B',A',B',C')
                  [B>=G+1,2*G+1>=B,A>=B,B>=2,G+1=C'] 
* Loop 21: 29_loop(A,B,C,D,E,F,G)->  29_loop(A,B,C',D',E,F,G')
                  [B>=G+1,2*G+1>=B,A>=B,B>=2,G+1=G'] 
* Loop 22: 29_loop(A,B,C,D,E,F,B) [A>=B,B>=2] 

### Ranking functions of CR 29_loop(A,B,C,D,E,F,G) 
* RF of phase [20,21]: [A-G,B-G]

#### Partial ranking functions of CR 29_loop(A,B,C,D,E,F,G) 
* Partial RF of phase [20,21]:
  - RF of loop [20:1,21:1]:
    A-G
    B-G


### Resulting Chains:29_loop(A,B,C,D,E,F,G) 
* [[20,21],22]


### Specialization of cost equations amor/atva/MaxSumSubArray_cross([DIII)Lamor/atva/Rec;/4 
* CE 7 is refined into CE [24] 


#### Refined cost equations amor/atva/MaxSumSubArray_cross([DIII)Lamor/atva/Rec;/4 
* CE 24: amor/atva/MaxSumSubArray_cross([DIII)Lamor/atva/Rec;(A,B,C,D) = 40+ 26_loop(A,B,E,F,G,H,I):[[17,18],19]+ 29_loop(A,D,J,K,L,M,C):[[20,21],22]
     [2*C+1>=B+D,B+D>=2*C,A>=D,C>=B+1,B>=0,C=I+1] 

### Cost equations --> "Loop" of amor/atva/MaxSumSubArray_cross([DIII)Lamor/atva/Rec;/4 
* CEs [24] --> Loop 23 

#### Loops of amor/atva/MaxSumSubArray_cross([DIII)Lamor/atva/Rec;/4 
* Loop 23: amor/atva/MaxSumSubArray_cross([DIII)Lamor/atva/Rec;(A,B,C,D) [2*C+1>=B+D,B+D>=2*C,A>=D,C>=B+1,B>=0] 

### Ranking functions of CR amor/atva/MaxSumSubArray_cross([DIII)Lamor/atva/Rec;(A,B,C,D) 

#### Partial ranking functions of CR amor/atva/MaxSumSubArray_cross([DIII)Lamor/atva/Rec;(A,B,C,D) 


### Resulting Chains:amor/atva/MaxSumSubArray_cross([DIII)Lamor/atva/Rec;(A,B,C,D) 
* [23]


### Specialization of cost equations amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;/3 
* CE 6 is refined into CE [25] 
* CE 4 is refined into CE [26] 
* CE 3 is refined into CE [27] 
* CE 5 is refined into CE [28,29] 


#### Refined cost equations amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;/3 
* CE 25: amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;(A,B,C) = 10
     [C=0,B=0,A=0] 
* CE 26: amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;(A,B,C) = 42
     [A>=B+1,B>=0,B+1=C] 
* CE 27: amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;(A,B,C) = 21
     [A>=B+1,B>=0,B+1=C] 
* CE 28: amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;(A,B,C) = 39+ amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;(A,B,D)+ amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;(A,D,C)+ amor/atva/MaxSumSubArray_cross([DIII)Lamor/atva/Rec;(A,B,D,C):[23]+ amor/atva/MaxSumSubArray_choose(Lamor/atva/Rec;Lamor/atva/Rec;Lamor/atva/Rec;)Lamor/atva/Rec;(E,F,G):[16]
     [2*D+1>=B+C,B+C>=2*D,A>=C,D>=B+1,G>=1,F>=1,E>=1,B>=0] 
* CE 29: amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;(A,B,C) = 39+ amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;(A,B,D)+ amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;(A,D,C)+ amor/atva/MaxSumSubArray_cross([DIII)Lamor/atva/Rec;(A,B,D,C):[23]+ amor/atva/MaxSumSubArray_choose(Lamor/atva/Rec;Lamor/atva/Rec;Lamor/atva/Rec;)Lamor/atva/Rec;(E,F,G):[15]
     [2*D+1>=B+C,B+C>=2*D,A>=C,D>=B+1,G>=1,F>=1,E>=1,B>=0] 

### Cost equations --> "Loop" of amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;/3 
* CEs [29] --> Loop 24 
* CEs [28] --> Loop 25 
* CEs [27] --> Loop 26 
* CEs [26] --> Loop 27 
* CEs [25] --> Loop 28 

#### Loops of amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;/3 
* Loop 24: amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;(A,B,C)->  amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;(A,B,C')  amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;(A,C',C)
                  [2*C'+1>=B+C,B+C>=2*C',A>=C,C'>=B+1,B>=0] 
* Loop 25: amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;(A,B,C)->  amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;(A,B,C')  amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;(A,C',C)
                  [2*C'+1>=B+C,B+C>=2*C',A>=C,C'>=B+1,B>=0] 
* Loop 26: amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;(A,B,C) [A>=B+1,B>=0,B+1=C] 
* Loop 27: amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;(A,B,C) [A>=B+1,B>=0,B+1=C] 
* Loop 28: amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;(A,B,C) [C=0,B=0,A=0] 

### Ranking functions of CR amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;(A,B,C) 
* RF of phase [24,25]: [A-2*B+C-3,-2*B+2*C-3,-B+C-1]

#### Partial ranking functions of CR amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;(A,B,C) 
* Partial RF of phase [24,25]:
  - RF of loop [24:1,24:2,25:1,25:2]:
    -B+C-1
  - RF of loop [24:1,25:1]:
    C-1
  - RF of loop [24:2,25:2]:
    A-B-1


### Resulting Chains:amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;(A,B,C) 
* [28]
* [27]
* [26]
* [multiple([24,25],[[27],[26]])]


### Specialization of cost equations amor/atva/MaxSumSubArray_maxsum([D)Lamor/atva/Rec;/1 
* CE 2 is refined into CE [30,31,32,33] 


#### Refined cost equations amor/atva/MaxSumSubArray_maxsum([D)Lamor/atva/Rec;/1 
* CE 30: amor/atva/MaxSumSubArray_maxsum([D)Lamor/atva/Rec;(A) = 6+ amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;(B,C,D):[28]
     [D=0,C=0,B=0,A=0] 
* CE 31: amor/atva/MaxSumSubArray_maxsum([D)Lamor/atva/Rec;(A) = 6+ amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;(B,C,D):[27]
     [D=1,C=0,B=1,A=1] 
* CE 32: amor/atva/MaxSumSubArray_maxsum([D)Lamor/atva/Rec;(A) = 6+ amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;(B,C,D):[26]
     [D=1,C=0,B=1,A=1] 
* CE 33: amor/atva/MaxSumSubArray_maxsum([D)Lamor/atva/Rec;(A) = 6+ amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;(A,B,A):[multiple([24,25],[[27],[26]])]
     [A>=2,B=0] 

### Cost equations --> "Loop" of amor/atva/MaxSumSubArray_maxsum([D)Lamor/atva/Rec;/1 
* CEs [33] --> Loop 29 
* CEs [32] --> Loop 30 
* CEs [31] --> Loop 31 
* CEs [30] --> Loop 32 

#### Loops of amor/atva/MaxSumSubArray_maxsum([D)Lamor/atva/Rec;/1 
* Loop 29: amor/atva/MaxSumSubArray_maxsum([D)Lamor/atva/Rec;(A) [A>=2] 
* Loop 30: amor/atva/MaxSumSubArray_maxsum([D)Lamor/atva/Rec;(A) [A=1] 
* Loop 31: amor/atva/MaxSumSubArray_maxsum([D)Lamor/atva/Rec;(A) [A=1] 
* Loop 32: amor/atva/MaxSumSubArray_maxsum([D)Lamor/atva/Rec;(A) [A=0] 

### Ranking functions of CR amor/atva/MaxSumSubArray_maxsum([D)Lamor/atva/Rec;(A) 

#### Partial ranking functions of CR amor/atva/MaxSumSubArray_maxsum([D)Lamor/atva/Rec;(A) 


### Resulting Chains:amor/atva/MaxSumSubArray_maxsum([D)Lamor/atva/Rec;(A) 
* [32]
* [31]
* [30]
* [29]


Computing Bounds
=====================================

#### Cost of chains of amor/atva/MaxSumSubArray_choose(Lamor/atva/Rec;Lamor/atva/Rec;Lamor/atva/Rec;)Lamor/atva/Rec;(A,B,C):
* Chain [16]: 22
  with precondition: [A>=1,B>=1,C>=1] 

* Chain [15]: 21
  with precondition: [A>=1,B>=1,C>=1] 


#### Cost of loops [17,18] 

 * loop 17:26_loop(A,B,C,D,E,F,G) -> [26_loop(A',B',C',D',E',F',G')] 
19
 * loop 18:26_loop(A,B,C,D,E,F,G) -> [26_loop(A',B',C',D',E',F',G')] 
15
#### Cost of phase [17,18]:26_loop(A,B,C,D,E,F,G) -> [26_loop(A',B',C',D',E',F',G')] 
19*it(17)+15*it(18)+0
  Such that:it(17)+it(18) =< -B+G+B'-G'
it(17)+it(18) =< G-G'
aux(1) =< -B+G+1
aux(2) =< G+1
it(17)+it(18) =< aux(1)
it(17)+it(18) =< aux(2)
it(17)+it(18) >= -B+G+B'-G'
it(17)+it(18) >= G-G'

#### Cost of chains of 26_loop(A,B,C,D,E,F,G):
* Chain [[17,18],19]: 19*it(17)+15*it(18)+3
  Such that:aux(2) =< G+1
aux(3) =< -B+G+1
it(17)+it(18) =< aux(3)
it(17)+it(18) =< aux(2)
it(18)+it(17) >= -B+G+1

  with precondition: [B>=0,G>=B,A+B>=2*G+2] 


#### Cost of loops [20,21] 

 * loop 20:29_loop(A,B,C,D,E,F,G) -> [29_loop(A',B',C',D',E',F',G')] 
21
 * loop 21:29_loop(A,B,C,D,E,F,G) -> [29_loop(A',B',C',D',E',F',G')] 
15
#### Cost of phase [20,21]:29_loop(A,B,C,D,E,F,G) -> [29_loop(A',B',C',D',E',F',G')] 
21*it(20)+15*it(21)+0
  Such that:it(20)+it(21) =< A-G
it(20)+it(21) =< A-G-A'+G'
it(20)+it(21) =< B-G
it(20)+it(21) =< B-G-B'+G'
it(20)+it(21) >= A-G-A'+G'
it(20)+it(21) >= B-G-B'+G'

#### Cost of chains of 29_loop(A,B,C,D,E,F,G):
* Chain [[20,21],22]: 21*it(20)+15*it(21)+3
  Such that:it(21)+it(20) =< B-G
it(21)+it(20) >= B-G

  with precondition: [G>=1,A>=B,2*G+1>=B,B>=G+1] 


#### Cost of chains of amor/atva/MaxSumSubArray_cross([DIII)Lamor/atva/Rec;(A,B,C,D):
* Chain [23]: 15*s(3)+19*s(4)+15*s(5)+21*s(6)+46
  Such that:s(2) =< -B+C
s(6)+s(5) =< -C+D
s(1) =< C
s(3)+s(4) =< s(2)
s(3)+s(4) =< s(1)
s(4)+s(3) >= -B+C
s(6)+s(5) >= -C+D

  with precondition: [B>=0,C>=B+1,A>=D,B+D>=2*C,2*C+1>=B+D] 


#### Cost of loops [24,25] 

 * loop 24:amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;(A,B,C) -> [amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;(A',B',C'),amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;(A'2,B'2,C'2)] 
21*s(15)+15*s(14)+19*s(18)+15*s(17)+106
  Such that:s(13) =< -B+B'2
s(14)+s(15) =< -B'2+C'2
s(16) =< B'2
s(17)+s(18) =< s(13)
s(17)+s(18) =< s(16)
s(17)+s(18) >= -B+B'2
s(14)+s(15) >= -B'2+C'2

 * loop 25:amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;(A,B,C) -> [amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;(A',B',C'),amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;(A'2,B'2,C'2)] 
21*s(27)+15*s(26)+19*s(30)+15*s(29)+107
  Such that:s(25) =< -B+B'2
s(26)+s(27) =< -B'2+C'2
s(28) =< B'2
s(29)+s(30) =< s(25)
s(29)+s(30) =< s(28)
s(29)+s(30) >= -B+B'2
s(26)+s(27) >= -B'2+C'2

#### Cost of phase [24,25]:amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;(A,B,C) -> [] 
106*it(24)+107*it(25)+21*it([26])+42*it([27])+21*s(31)+15*s(32)+19*s(33)+15*s(34)+21*s(37)+15*s(38)+19*s(39)+15*s(40)+0
  Such that:it(24)+it(25) =< -B+C-1
it([26])+it([27]) =< -B+C
aux(12) =< -B/2+C/2
aux(14) =< C-1
aux(26) =< 1
aux(25) =< aux(14)
aux(13) =< aux(12)*2-1
aux(23) =< aux(12)
s(35) =< it(24)*aux(14)
s(36) =< it(24)*aux(12)
s(41) =< it(25)*aux(25)
s(37)+s(38) =< it(25)*aux(13)
s(42) =< it(25)*aux(23)
s(31)+s(32) =< it(24)*aux(13)
s(39)+s(40) =< s(42)
s(39)+s(40) =< s(41)
s(33)+s(34) =< s(36)
s(33)+s(34) =< s(35)
it([26])+it([27]) >= -B+C
aux(28) >= 1
aux(27) >= aux(27)
aux(28) >= aux(28)
aux(22) >= aux(28)
it(24)+s(37)+s(38) >= it([26])+it([27])+aux(27)-aux(26)
it(24)+s(39)+s(40) >= it([26])+it([27])+aux(27)-aux(26)
it(24)+it(25) >= it([26])+it([27])+aux(27)-aux(26)
it(25)+s(31)+s(32) >= it([26])+it([27])+aux(27)-aux(26)
it(25)+s(33)+s(34) >= it([26])+it([27])+aux(27)-aux(26)
s(37)+s(38) >= it(25)*aux(22)
s(39)+s(40) >= it(25)*aux(28)
s(31)+s(32) >= it(24)*aux(28)
s(33)+s(34) >= it(24)*aux(28)

#### Cost of chains of amor/atva/MaxSumSubArray_maxsumx([DII)Lamor/atva/Rec;(A,B,C):
* Chain [28]: 10
  with precondition: [A=0,B=0,C=0] 

* Chain [27]: 42
  with precondition: [C=B+1,C>=1,A>=C] 

* Chain [26]: 21
  with precondition: [C=B+1,C>=1,A>=C] 

* Chain [multiple([24,25],[[27],[26]])]: 106*it(24)+107*it(25)+21*it([26])+42*it([27])+21*s(31)+15*s(32)+19*s(33)+15*s(34)+21*s(37)+15*s(38)+19*s(39)+15*s(40)+0
  Such that:it(24)+it(25) =< -B+C-1
it([26])+it([27]) =< -B+C
aux(12) =< -B/2+C/2
aux(14) =< C-1
aux(26) =< 1
aux(25) =< aux(14)
aux(13) =< aux(12)*2-1
aux(23) =< aux(12)
s(35) =< it(24)*aux(14)
s(36) =< it(24)*aux(12)
s(41) =< it(25)*aux(25)
s(37)+s(38) =< it(25)*aux(13)
s(42) =< it(25)*aux(23)
s(31)+s(32) =< it(24)*aux(13)
s(39)+s(40) =< s(42)
s(39)+s(40) =< s(41)
s(33)+s(34) =< s(36)
s(33)+s(34) =< s(35)
it([26])+it([27]) >= -B+C
aux(28) >= 1
aux(27) >= aux(27)
aux(28) >= aux(28)
aux(22) >= aux(28)
it(24)+s(37)+s(38) >= it([26])+it([27])+aux(27)-aux(26)
it(24)+s(39)+s(40) >= it([26])+it([27])+aux(27)-aux(26)
it(24)+it(25) >= it([26])+it([27])+aux(27)-aux(26)
it(25)+s(31)+s(32) >= it([26])+it([27])+aux(27)-aux(26)
it(25)+s(33)+s(34) >= it([26])+it([27])+aux(27)-aux(26)
s(37)+s(38) >= it(25)*aux(22)
s(39)+s(40) >= it(25)*aux(28)
s(31)+s(32) >= it(24)*aux(28)
s(33)+s(34) >= it(24)*aux(28)

  with precondition: [B>=0,C>=B+2,A>=C] 


#### Cost of chains of amor/atva/MaxSumSubArray_maxsum([D)Lamor/atva/Rec;(A):
* Chain [32]: 16
  with precondition: [A=0] 

* Chain [31]: 48
  with precondition: [A=1] 

* Chain [30]: 27
  with precondition: [A=1] 

* Chain [29]: 106*s(43)+107*s(44)+21*s(45)+42*s(46)+21*s(56)+15*s(57)+19*s(58)+15*s(59)+21*s(62)+15*s(63)+19*s(64)+15*s(65)+6
  Such that:s(46)+s(45) =< A
s(47) =< A/2
aux(29) =< A-1
s(43)+s(44) =< aux(29)
s(52) =< aux(29)
s(53) =< s(47)*2-1
s(54) =< s(47)
s(60) =< s(43)*aux(29)
s(61) =< s(43)*s(47)
s(66) =< s(44)*s(52)
s(56)+s(57) =< s(44)*s(53)
s(67) =< s(44)*s(54)
s(62)+s(63) =< s(43)*s(53)
s(58)+s(59) =< s(67)
s(58)+s(59) =< s(66)
s(64)+s(65) =< s(61)
s(64)+s(65) =< s(60)
s(46)+s(45) >= A

  with precondition: [A>=2] 


Closed-form bounds of amor/atva/MaxSumSubArray_maxsum([D)Lamor/atva/Rec;(A): 
-------------------------------------
* Chain [32] with precondition: [A=0] 
    - Lower bound: 16 
    - Complexity: constant
 * Chain [31] with precondition: [A=1] 
    - Lower bound: 48 
    - Complexity: constant
 * Chain [30] with precondition: [A=1] 
    - Lower bound: 27 
    - Complexity: constant
 * Chain [29] with precondition: [A>=2] 
    - Lower bound: 21*A+6 
    - Complexity: n
 
### Partitioned lower bound of amor/atva/MaxSumSubArray_maxsum([D)Lamor/atva/Rec;(A): 
* 16 
 if [A=0]
* 27 
 if [A=1]
* 21*A+6 
 if [A>=2]
Possible lower bounds : [16,27,21*A+6]
Maximum lower bound complexity: n

Time statistics: 
-------------------------------------
* Partial evaluation computed in 42 ms.
* Invariants computed in 178 ms.
   - Backward Invariants 55 ms.
   - Transitive Invariants 55 ms.
* Refinement performed in 195 ms.
* Termination proved in 122 ms.
* Upper bounds computed in 612 ms.
   - Equation cost structures 121 ms.
   - Phase cost structures 506 ms.
   - Chain cost structures 37 ms.
   - Solving cost expressions 5 ms.
* Total analysis performed in 1260 ms.


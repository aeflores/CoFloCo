
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [13_loop/4]
1. recursive : [16_loop/7]
2. recursive : [17_loop/5]
3. non_recursive : [amor/atva/MergeSort_merge([C[CIII)V/5]
4. recursive : [amor/atva/MergeSort_msort([C[CII)V/4]
5. non_recursive : [amor/atva/MergeSort_msort([C)V/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into 13_loop/4
1. SCC is partially evaluated into 16_loop/7
2. SCC is partially evaluated into 17_loop/5
3. SCC is partially evaluated into amor/atva/MergeSort_merge([C[CIII)V/5
4. SCC is partially evaluated into amor/atva/MergeSort_msort([C[CII)V/4
5. SCC is partially evaluated into amor/atva/MergeSort_msort([C)V/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations 13_loop/4 
* CE 7 is refined into CE [14] 
* CE 6 is refined into CE [15] 


#### Refined cost equations 13_loop/4 
* CE 14: 13_loop(A,A,B,C) = 3
     [C>=B+1,A>=B+1,B>=1] 
* CE 15: 13_loop(A,A,B,C) = 11+ 13_loop(A,A,B,D)
     [B>=C,A>=B+1,C>=0,B>=1,C+1=D] 

### Cost equations --> "Loop" of 13_loop/4 
* CEs [15] --> Loop 13 
* CEs [14] --> Loop 14 

#### Loops of 13_loop/4 
* Loop 13: 13_loop(A,A,B,C)->  13_loop(A,A,B,A')
                  [B>=C,A>=B+1,C>=0,B>=1,C+1=A'] 
* Loop 14: 13_loop(A,A,B,C) [C>=B+1,A>=B+1,B>=1] 

### Ranking functions of CR 13_loop(A,B,C,D) 
* RF of phase [13]: [A-D,B-D,C-D+1]

#### Partial ranking functions of CR 13_loop(A,B,C,D) 
* Partial RF of phase [13]:
  - RF of loop [13:1]:
    A-D
    B-D
    C-D+1


### Resulting Chains:13_loop(A,B,C,D) 
* [[13],14]


### Specialization of cost equations 16_loop/7 
* CE 10 is refined into CE [16] 
* CE 11 is refined into CE [17] 
* CE 8 is refined into CE [18] 
* CE 9 is refined into CE [19] 


#### Refined cost equations 16_loop/7 
* CE 16: 16_loop(A,A,B,C,D,E,F) = 6
     [2*C>=B+E,C+D>=2*B,B>=D,2*B+1>=C,E>=C+1,A>=C+1,D>=0,B+F+1=D+E] 
* CE 17: 16_loop(A,A,B,C,D,E,F) = 3
     [3*C>=B+D+E+1,2*C>=B+E,2*B+1>=C,A>=C+1,E>=B+1,D>=B+1,B+F+1=D+E] 
* CE 18: 16_loop(A,A,B,C,D,E,F) = 22+ 16_loop(A,A,B,C,D,G,H)
     [C+D>=2*B,C>=E,B>=D,2*B+1>=C,A>=C+1,E>=B+1,D>=0,D+E=B+H,D+E=B+F+1,E+1=G] 
* CE 19: 16_loop(A,A,B,C,D,E,F) = 23+ 16_loop(A,A,B,C,G,E,H)
     [C+D>=2*B,C>=E,B>=D,2*B+1>=C,A>=C+1,E>=B+1,D>=0,D+E=B+H,D+E=B+F+1,D+1=G] 

### Cost equations --> "Loop" of 16_loop/7 
* CEs [18] --> Loop 15 
* CEs [19] --> Loop 16 
* CEs [17] --> Loop 17 
* CEs [16] --> Loop 18 

#### Loops of 16_loop/7 
* Loop 15: 16_loop(A,A,B,C,D,E,F)->  16_loop(A,A,B,C,D,A',B')
                  [C+D>=2*B,C>=E,B>=D,2*B+1>=C,A>=C+1,E>=B+1,D>=0,D+E=B+B',D+E=B+F+1,E+1=A'] 
* Loop 16: 16_loop(A,A,B,C,D,E,F)->  16_loop(A,A,B,C,A',E,B')
                  [C+D>=2*B,C>=E,B>=D,2*B+1>=C,A>=C+1,E>=B+1,D>=0,D+E=B+B',D+E=B+F+1,D+1=A'] 
* Loop 17: 16_loop(A,A,B,C,D,E,F) [3*C>=B+D+E+1,2*C>=B+E,2*B+1>=C,A>=C+1,E>=B+1,D>=B+1,B+F+1=D+E] 
* Loop 18: 16_loop(A,A,B,C,D,E,F) [2*C>=B+E,C+D>=2*B,B>=D,2*B+1>=C,E>=C+1,A>=C+1,D>=0,B+F+1=D+E] 

### Ranking functions of CR 16_loop(A,B,C,D,E,F,G) 
* RF of phase [15,16]: [A+C-E-F,A-G-1,2*A-E-F-2,B+C-E-F,B-G-1,2*B-E-F-2,C+D-E-F+1,2*C-G+1,3*C-E-F+2,D-G,2*D-E-F,2*E+2*F-3*G-1]

#### Partial ranking functions of CR 16_loop(A,B,C,D,E,F,G) 
* Partial RF of phase [15,16]:
  - RF of loop [15:1]:
    A-C+E-G-1
    A-F
    A/2+E-G-1/2
    B-C+E-G-1
    B-F
    B/2+E-G-1/2
    -C+D+E-G
    C+E-G+1
    2*C-F+2
    D-F+1
    D/2+E-G
    2*E+F-2*G
  - RF of loop [15:1,16:1]:
    A-G-1
    B-G-1
    2*C-G+1
    D-G
  - RF of loop [16:1]:
    A-E-1
    B-E-1
    C-E+1
    D-E
    -E+F depends on loops [15:1] 
    F-G


### Resulting Chains:16_loop(A,B,C,D,E,F,G) 
* [[15,16],18]
* [[15,16],17]


### Specialization of cost equations 17_loop/5 
* CE 13 is refined into CE [20] 
* CE 12 is refined into CE [21] 


#### Refined cost equations 17_loop/5 
* CE 20: 17_loop(A,A,B,C,D) = 3
     [D>=C,C>=B+1,2*A>=2*B+3,B>=0,A>=2] 
* CE 21: 17_loop(A,A,B,C,D) = 12+ 17_loop(A,A,B,E,F)
     [A+C>=2*B+1,D>=C,B>=C,2*A>=2*B+3,C>=0,A>=2,D+1=F,C+1=E] 

### Cost equations --> "Loop" of 17_loop/5 
* CEs [21] --> Loop 19 
* CEs [20] --> Loop 20 

#### Loops of 17_loop/5 
* Loop 19: 17_loop(A,A,B,C,D)->  17_loop(A,A,B,A',B')
                  [A+C>=2*B+1,D>=C,B>=C,2*A>=2*B+3,C>=0,A>=2,D+1=B',C+1=A'] 
* Loop 20: 17_loop(A,A,B,C,D) [D>=C,C>=B+1,2*A>=2*B+3,B>=0,A>=2] 

### Ranking functions of CR 17_loop(A,B,C,D,E) 
* RF of phase [19]: [A-D,B-D,C-D+1]

#### Partial ranking functions of CR 17_loop(A,B,C,D,E) 
* Partial RF of phase [19]:
  - RF of loop [19:1]:
    A-D
    B-D
    C-D+1


### Resulting Chains:17_loop(A,B,C,D,E) 
* [[19],20]
* [20]


### Specialization of cost equations amor/atva/MergeSort_merge([C[CIII)V/5 
* CE 5 is refined into CE [22,23,24,25] 


#### Refined cost equations amor/atva/MergeSort_merge([C[CIII)V/5 
* CE 22: amor/atva/MergeSort_merge([C[CIII)V(A,A,B,C,D) = 11+ 13_loop(A,A,D,B):[[13],14]+ 16_loop(A,A,C,D,B,E,B):[[15,16],18]+ 17_loop(A,A,C,F,G):[[19],20]
     [2*C+1>=B+D,B+D>=2*C,G>=F,C>=F,D>=C+1,F>=B,A>=D+1,B>=0,C+1=E] 
* CE 23: amor/atva/MergeSort_merge([C[CIII)V(A,A,B,C,D) = 11+ 13_loop(A,A,D,B):[[13],14]+ 16_loop(A,A,C,D,B,E,B):[[15,16],18]+ 17_loop(A,A,C,F,G):[20]
     [2*C+1>=B+D,B+D>=2*C,G>=F,F>=C+1,D>=C+1,A>=D+1,B>=0,C+1=E] 
* CE 24: amor/atva/MergeSort_merge([C[CIII)V(A,A,B,C,D) = 11+ 13_loop(A,A,D,B):[[13],14]+ 16_loop(A,A,C,D,B,E,B):[[15,16],17]+ 17_loop(A,A,C,F,G):[[19],20]
     [2*C+1>=B+D,B+D>=2*C,G>=F,C>=F,D>=C+1,F>=B,A>=D+1,B>=0,C+1=E] 
* CE 25: amor/atva/MergeSort_merge([C[CIII)V(A,A,B,C,D) = 11+ 13_loop(A,A,D,B):[[13],14]+ 16_loop(A,A,C,D,B,E,B):[[15,16],17]+ 17_loop(A,A,C,F,G):[20]
     [2*C+1>=B+D,B+D>=2*C,G>=F,F>=C+1,D>=C+1,A>=D+1,B>=0,C+1=E] 

### Cost equations --> "Loop" of amor/atva/MergeSort_merge([C[CIII)V/5 
* CEs [25] --> Loop 21 
* CEs [24] --> Loop 22 
* CEs [23] --> Loop 23 
* CEs [22] --> Loop 24 

#### Loops of amor/atva/MergeSort_merge([C[CIII)V/5 
* Loop 21: amor/atva/MergeSort_merge([C[CIII)V(A,A,B,C,D) [2*C+1>=B+D,B+D>=2*C,A>=D+1,D>=C+1,B>=0] 
* Loop 22: amor/atva/MergeSort_merge([C[CIII)V(A,A,B,C,D) [2*C+1>=B+D,B+D>=2*C,A>=D+1,D>=C+1,B>=0] 
* Loop 23: amor/atva/MergeSort_merge([C[CIII)V(A,A,B,C,D) [2*C+1>=B+D,B+D>=2*C,A>=D+1,D>=C+1,B>=0] 
* Loop 24: amor/atva/MergeSort_merge([C[CIII)V(A,A,B,C,D) [2*C+1>=B+D,B+D>=2*C,A>=D+1,D>=C+1,B>=0] 

### Ranking functions of CR amor/atva/MergeSort_merge([C[CIII)V(A,B,C,D,E) 

#### Partial ranking functions of CR amor/atva/MergeSort_merge([C[CIII)V(A,B,C,D,E) 


### Resulting Chains:amor/atva/MergeSort_merge([C[CIII)V(A,B,C,D,E) 
* [24]
* [23]
* [22]
* [21]


### Specialization of cost equations amor/atva/MergeSort_msort([C[CII)V/4 
* CE 4 is refined into CE [26,27,28,29] 
* CE 3 is refined into CE [30] 


#### Refined cost equations amor/atva/MergeSort_msort([C[CII)V/4 
* CE 26: amor/atva/MergeSort_msort([C[CII)V(A,A,B,C) = 30+ amor/atva/MergeSort_msort([C[CII)V(A,A,B,D)+ amor/atva/MergeSort_msort([C[CII)V(A,A,E,C)+ amor/atva/MergeSort_merge([C[CIII)V(A,A,B,D,C):[24]
     [2*D+1>=B+C,B+C>=2*D,A>=C+1,C>=D+1,B>=0,D+1=E] 
* CE 27: amor/atva/MergeSort_msort([C[CII)V(A,A,B,C) = 30+ amor/atva/MergeSort_msort([C[CII)V(A,A,B,D)+ amor/atva/MergeSort_msort([C[CII)V(A,A,E,C)+ amor/atva/MergeSort_merge([C[CIII)V(A,A,B,D,C):[23]
     [2*D+1>=B+C,B+C>=2*D,A>=C+1,C>=D+1,B>=0,D+1=E] 
* CE 28: amor/atva/MergeSort_msort([C[CII)V(A,A,B,C) = 30+ amor/atva/MergeSort_msort([C[CII)V(A,A,B,D)+ amor/atva/MergeSort_msort([C[CII)V(A,A,E,C)+ amor/atva/MergeSort_merge([C[CIII)V(A,A,B,D,C):[22]
     [2*D+1>=B+C,B+C>=2*D,A>=C+1,C>=D+1,B>=0,D+1=E] 
* CE 29: amor/atva/MergeSort_msort([C[CII)V(A,A,B,C) = 30+ amor/atva/MergeSort_msort([C[CII)V(A,A,B,D)+ amor/atva/MergeSort_msort([C[CII)V(A,A,E,C)+ amor/atva/MergeSort_merge([C[CIII)V(A,A,B,D,C):[21]
     [2*D+1>=B+C,B+C>=2*D,A>=C+1,C>=D+1,B>=0,D+1=E] 
* CE 30: amor/atva/MergeSort_msort([C[CII)V(A,A,B,C) = 4
     [B>=C,A>=C+1,C+1>=B,B>=0] 

### Cost equations --> "Loop" of amor/atva/MergeSort_msort([C[CII)V/4 
* CEs [30] --> Loop 25 
* CEs [29] --> Loop 26 
* CEs [28] --> Loop 27 
* CEs [27] --> Loop 28 
* CEs [26] --> Loop 29 

#### Loops of amor/atva/MergeSort_msort([C[CII)V/4 
* Loop 25: amor/atva/MergeSort_msort([C[CII)V(A,A,B,C) [B>=C,A>=C+1,C+1>=B,B>=0] 
* Loop 26: amor/atva/MergeSort_msort([C[CII)V(A,A,B,C)->  amor/atva/MergeSort_msort([C[CII)V(A,A,B,A')  amor/atva/MergeSort_msort([C[CII)V(A,A,A'2,C)
                  [2*A'+1>=B+C,B+C>=2*A',C>=A'+1,A>=C+1,B>=0,A'+1=A'2] 
* Loop 27: amor/atva/MergeSort_msort([C[CII)V(A,A,B,C)->  amor/atva/MergeSort_msort([C[CII)V(A,A,B,A')  amor/atva/MergeSort_msort([C[CII)V(A,A,A'2,C)
                  [2*A'+1>=B+C,B+C>=2*A',C>=A'+1,A>=C+1,B>=0,A'+1=A'2] 
* Loop 28: amor/atva/MergeSort_msort([C[CII)V(A,A,B,C)->  amor/atva/MergeSort_msort([C[CII)V(A,A,B,A')  amor/atva/MergeSort_msort([C[CII)V(A,A,A'2,C)
                  [2*A'+1>=B+C,B+C>=2*A',C>=A'+1,A>=C+1,B>=0,A'+1=A'2] 
* Loop 29: amor/atva/MergeSort_msort([C[CII)V(A,A,B,C)->  amor/atva/MergeSort_msort([C[CII)V(A,A,B,A')  amor/atva/MergeSort_msort([C[CII)V(A,A,A'2,C)
                  [2*A'+1>=B+C,B+C>=2*A',C>=A'+1,A>=C+1,B>=0,A'+1=A'2] 

### Ranking functions of CR amor/atva/MergeSort_msort([C[CII)V(A,B,C,D) 
* RF of phase [26,27,28,29]: [-2*C+2*D-1,-C+D,-C+2*D-1]

#### Partial ranking functions of CR amor/atva/MergeSort_msort([C[CII)V(A,B,C,D) 
* Partial RF of phase [26,27,28,29]:
  - RF of loop [26:1,26:2,27:1,27:2,28:1,28:2,29:1,29:2]:
    -C+D
  - RF of loop [26:1,27:1,28:1,29:1]:
    D
  - RF of loop [26:2,27:2,28:2,29:2]:
    A-C-1
    B-C-1


### Resulting Chains:amor/atva/MergeSort_msort([C[CII)V(A,B,C,D) 
* [25]
* [multiple([26,27,28,29],[[25]])]


### Specialization of cost equations amor/atva/MergeSort_msort([C)V/1 
* CE 2 is refined into CE [31,32] 


#### Refined cost equations amor/atva/MergeSort_msort([C)V/1 
* CE 31: amor/atva/MergeSort_msort([C)V(A) = 15+ amor/atva/MergeSort_msort([C[CII)V(A,A,B,C):[25]
     [A>=0,1>=A,A=C+1,B=0] 
* CE 32: amor/atva/MergeSort_msort([C)V(A) = 15+ amor/atva/MergeSort_msort([C[CII)V(A,A,B,C):[multiple([26,27,28,29],[[25]])]
     [A>=2,A=C+1,B=0] 

### Cost equations --> "Loop" of amor/atva/MergeSort_msort([C)V/1 
* CEs [32] --> Loop 30 
* CEs [31] --> Loop 31 

#### Loops of amor/atva/MergeSort_msort([C)V/1 
* Loop 30: amor/atva/MergeSort_msort([C)V(A) [A>=2] 
* Loop 31: amor/atva/MergeSort_msort([C)V(A) [A>=0,1>=A] 

### Ranking functions of CR amor/atva/MergeSort_msort([C)V(A) 

#### Partial ranking functions of CR amor/atva/MergeSort_msort([C)V(A) 


### Resulting Chains:amor/atva/MergeSort_msort([C)V(A) 
* [31]
* [30]


Computing Bounds
=====================================

#### Cost of loops [13] 

 * loop 13:13_loop(A,B,C,D) -> [13_loop(A',B',C',D')] 
11
#### Cost of phase [13]:13_loop(A,B,C,D) -> [13_loop(A',B',C',D')] 
11*it(13)+0
  Such that:it(13) =< A-D
it(13) =< A-D-A'+D'
it(13) =< B-D
it(13) =< B-D-B'+D'
it(13) =< C-D+1
it(13) =< C-D-C'+D'
it(13) >= A-D-A'+D'
it(13) >= B-D-B'+D'
it(13) >= C-D-C'+D'

#### Cost of chains of 13_loop(A,B,C,D):
* Chain [[13],14]: 11*it(13)+3
  Such that:it(13) =< C-D+1
it(13) >= C-D+1

  with precondition: [A=B,C>=1,D>=0,A>=C+1,C>=D] 


#### Cost of loops [15,16] 

 * loop 15:16_loop(A,B,C,D,E,F,G) -> [16_loop(A',B',C',D',E',F',G')] 
22
 * loop 16:16_loop(A,B,C,D,E,F,G) -> [16_loop(A',B',C',D',E',F',G')] 
23
#### Cost of phase [15,16]:16_loop(A,B,C,D,E,F,G) -> [16_loop(A',B',C',D',E',F',G')] 
22*it(15)+23*it(16)+0
  Such that:it(15) =< A-C+E-G-1
it(15) =< A-C+E-G-A'+C'-E'+G'
it(15)+it(16) =< A+C-E-F
it(15)+it(16) =< A+C-E-F-A'-C'+E'+F'
it(16) =< A-E-1
it(16) =< A-E-A'+E'
it(15) =< A-F
it(15) =< A-F-A'+F'
it(15)+it(16) =< A-G-1
it(15)+it(16) =< A-G-A'+G'
it(15)+it(16) =< 2*A-E-F-2
it(15)+it(16) =< 2*A-E-F-2*A'+E'+F'
it(15) =< A/2+E-G-1/2
it(15) =< A/2+E-G-A'/2-E'+G'
it(15) =< B-C+E-G-1
it(15) =< B-C+E-G-B'+C'-E'+G'
it(15)+it(16) =< B+C-E-F
it(15)+it(16) =< B+C-E-F-B'-C'+E'+F'
it(16) =< B-E-1
it(16) =< B-E-B'+E'
it(15) =< B-F
it(15) =< B-F-B'+F'
it(15)+it(16) =< B-G-1
it(15)+it(16) =< B-G-B'+G'
it(15)+it(16) =< 2*B-E-F-2
it(15)+it(16) =< 2*B-E-F-2*B'+E'+F'
it(15) =< B/2+E-G-1/2
it(15) =< B/2+E-G-B'/2-E'+G'
it(15) =< -C+D+E-G
it(15) =< -C+D+E-G+C'-D'-E'+G'
it(15)+it(16) =< C+D-E-F-C'-D'+E'+F'
it(16) =< C-E+1
it(16) =< C-E-C'+E'
it(15) =< C+E-G+1
it(15) =< C+E-G-C'-E'+G'
it(15) =< 2*C-F+2
it(15) =< 2*C-F-2*C'+F'
it(15)+it(16) =< 2*C-G-2*C'+G'
it(15)+it(16) =< 3*C-E-F-3*C'+E'+F'
it(16) =< D-E
it(16) =< D-E-D'+E'
it(15) =< D-F+1
it(15) =< D-F-D'+F'
it(15)+it(16) =< D-G
it(15)+it(16) =< D-G-D'+G'
it(15)+it(16) =< 2*D-E-F
it(15)+it(16) =< 2*D-E-F-2*D'+E'+F'
it(15) =< D/2+E-G
it(15) =< D/2+E-G-D'/2-E'+G'
aux(3) =< -E+F
aux(4) =< -E+F+E'-F'
aux(2) =< E-F-E'+F'
it(15) =< 2*E+F-2*G
it(15) =< 2*E+F-2*G-2*E'-F'+2*G'
it(15)+it(16) =< 2*E+2*F-3*G-1
it(15)+it(16) =< 2*E+2*F-3*G-2*E'-2*F'+3*G'
it(16) =< F-G
it(16) =< F-G-F'+G'
aux(5) =< C+D-E-F+1
aux(6) =< 2*C-G+1
aux(7) =< 3*C-E-F+2
it(15)+it(16) =< aux(5)
it(15)+it(16) =< aux(6)
it(15)+it(16) =< aux(7)
it(16) =< it(15)+aux(4)
it(16) =< it(15)+aux(3)
it(15) >= A-C+E-G-A'+C'-E'+G'
it(16) >= A-E-A'+E'
it(15) >= A-F-A'+F'
it(15)+it(16) >= A-G-A'+G'
it(15) >= A/2+E-G-A'/2-E'+G'
it(15) >= B-C+E-G-B'+C'-E'+G'
it(16) >= B-E-B'+E'
it(15) >= B-F-B'+F'
it(15)+it(16) >= B-G-B'+G'
it(15) >= B/2+E-G-B'/2-E'+G'
it(15) >= -C+D+E-G+C'-D'-E'+G'
it(16) >= C-E-C'+E'
it(15) >= C+E-G-C'-E'+G'
it(15) >= 2*C-F-2*C'+F'
it(15)+it(16) >= 2*C-G-2*C'+G'
it(16) >= D-E-D'+E'
it(15) >= D-F-D'+F'
it(15)+it(16) >= D-G-D'+G'
it(15) >= D/2+E-G-D'/2-E'+G'
aux(1) >= -E+F+E'-F'
it(15) >= 2*E+F-2*G-2*E'-F'+2*G'
it(16) >= F-G-F'+G'
it(16) >= it(15)+aux(1)-aux(2)

#### Cost of phase [15,16]:16_loop(A,B,C,D,E,F,G) -> [16_loop(A',B',C',D',E',F',G')] 
22*it(15)+23*it(16)+0
  Such that:it(15) =< A-C+E-G-1
it(15) =< A-C+E-G-A'+C'-E'+G'
it(15)+it(16) =< A+C-E-F
it(15)+it(16) =< A+C-E-F-A'-C'+E'+F'
it(16) =< A-E-1
it(16) =< A-E-A'+E'
it(15) =< A-F
it(15) =< A-F-A'+F'
it(15)+it(16) =< A-G-1
it(15)+it(16) =< A-G-A'+G'
it(15)+it(16) =< 2*A-E-F-2
it(15)+it(16) =< 2*A-E-F-2*A'+E'+F'
it(15) =< A/2+E-G-1/2
it(15) =< A/2+E-G-A'/2-E'+G'
it(15) =< B-C+E-G-1
it(15) =< B-C+E-G-B'+C'-E'+G'
it(15)+it(16) =< B+C-E-F
it(15)+it(16) =< B+C-E-F-B'-C'+E'+F'
it(16) =< B-E-1
it(16) =< B-E-B'+E'
it(15) =< B-F
it(15) =< B-F-B'+F'
it(15)+it(16) =< B-G-1
it(15)+it(16) =< B-G-B'+G'
it(15)+it(16) =< 2*B-E-F-2
it(15)+it(16) =< 2*B-E-F-2*B'+E'+F'
it(15) =< B/2+E-G-1/2
it(15) =< B/2+E-G-B'/2-E'+G'
it(15) =< -C+D+E-G
it(15) =< -C+D+E-G+C'-D'-E'+G'
it(15)+it(16) =< C+D-E-F-C'-D'+E'+F'
it(16) =< C-E+1
it(16) =< C-E-C'+E'
it(15) =< C+E-G+1
it(15) =< C+E-G-C'-E'+G'
it(15) =< 2*C-F+2
it(15) =< 2*C-F-2*C'+F'
it(15)+it(16) =< 2*C-G-2*C'+G'
it(15)+it(16) =< 3*C-E-F-3*C'+E'+F'
it(16) =< D-E
it(16) =< D-E-D'+E'
it(15) =< D-F+1
it(15) =< D-F-D'+F'
it(15)+it(16) =< D-G
it(15)+it(16) =< D-G-D'+G'
it(15)+it(16) =< 2*D-E-F
it(15)+it(16) =< 2*D-E-F-2*D'+E'+F'
it(15) =< D/2+E-G
it(15) =< D/2+E-G-D'/2-E'+G'
aux(3) =< -E+F
aux(4) =< -E+F+E'-F'
aux(2) =< E-F-E'+F'
it(15) =< 2*E+F-2*G
it(15) =< 2*E+F-2*G-2*E'-F'+2*G'
it(15)+it(16) =< 2*E+2*F-3*G-1
it(15)+it(16) =< 2*E+2*F-3*G-2*E'-2*F'+3*G'
it(16) =< F-G
it(16) =< F-G-F'+G'
aux(5) =< C+D-E-F+1
aux(6) =< 2*C-G+1
aux(7) =< 3*C-E-F+2
it(15)+it(16) =< aux(5)
it(15)+it(16) =< aux(6)
it(15)+it(16) =< aux(7)
it(16) =< it(15)+aux(4)
it(16) =< it(15)+aux(3)
it(15) >= A-C+E-G-A'+C'-E'+G'
it(16) >= A-E-A'+E'
it(15) >= A-F-A'+F'
it(15)+it(16) >= A-G-A'+G'
it(15) >= A/2+E-G-A'/2-E'+G'
it(15) >= B-C+E-G-B'+C'-E'+G'
it(16) >= B-E-B'+E'
it(15) >= B-F-B'+F'
it(15)+it(16) >= B-G-B'+G'
it(15) >= B/2+E-G-B'/2-E'+G'
it(15) >= -C+D+E-G+C'-D'-E'+G'
it(16) >= C-E-C'+E'
it(15) >= C+E-G-C'-E'+G'
it(15) >= 2*C-F-2*C'+F'
it(15)+it(16) >= 2*C-G-2*C'+G'
it(16) >= D-E-D'+E'
it(15) >= D-F-D'+F'
it(15)+it(16) >= D-G-D'+G'
it(15) >= D/2+E-G-D'/2-E'+G'
aux(1) >= -E+F+E'-F'
it(15) >= 2*E+F-2*G-2*E'-F'+2*G'
it(16) >= F-G-F'+G'
it(16) >= it(15)+aux(1)-aux(2)

#### Cost of chains of 16_loop(A,B,C,D,E,F,G):
* Chain [[15,16],18]: 22*it(15)+23*it(16)+6
  Such that:aux(4) =< C-D-E+F-1
aux(2) =< D-F+1
aux(5) =< D-G
it(15) =< D/2+E-G
aux(3) =< -E+F
it(16) =< F-G-1
aux(8) =< 2*E+2*F-3*G-1
it(15)+it(16) =< aux(5)
it(15)+it(16) =< aux(8)
it(16) =< it(15)+aux(4)
it(16) =< it(15)+aux(3)
it(15) >= -C+D+E-G
aux(1) >= C-D-E+G
it(16) >= it(15)+aux(1)-aux(2)

  with precondition: [A=B,E+F=C+G+1,E>=0,A>=D+1,G>=E,D>=F,F>=G+1,D+2*G+2>=2*F+E,2*E+2*F>=2*G+D+1] 

* Chain [[15,16],17]: 22*it(15)+23*it(16)+3
  Such that:aux(2) =< -C+D+E-F-1
it(15) =< D-F
aux(5) =< D-G
aux(3) =< -E+F
aux(9) =< 2*E+2*F-3*G-1
aux(10) =< F-G
it(16) =< aux(10)
it(15)+it(16) =< aux(5)
it(15)+it(16) =< aux(9)
it(16) =< it(15)+aux(10)
it(16) =< it(15)+aux(3)
aux(1) >= 2*C-D-2*E+G+2
it(16) >= F-G
it(16) >= it(15)+aux(1)-aux(2)

  with precondition: [A=B,E+F=C+G+1,E>=0,A>=D+1,G>=E,D>=F,F>=G+1,D+2*G+2>=2*F+E,2*E+2*F>=2*G+D+1] 


#### Cost of loops [19] 

 * loop 19:17_loop(A,B,C,D,E) -> [17_loop(A',B',C',D',E')] 
12
#### Cost of phase [19]:17_loop(A,B,C,D,E) -> [17_loop(A',B',C',D',E')] 
12*it(19)+0
  Such that:it(19) =< A-D
it(19) =< A-D-A'+D'
it(19) =< B-D
it(19) =< B-D-B'+D'
it(19) =< C-D+1
it(19) =< C-D-C'+D'
it(19) >= A-D-A'+D'
it(19) >= B-D-B'+D'
it(19) >= C-D-C'+D'

#### Cost of chains of 17_loop(A,B,C,D,E):
* Chain [[19],20]: 12*it(19)+3
  Such that:it(19) =< C-D+1
it(19) >= C-D+1

  with precondition: [A=B,D>=0,C>=D,E>=D,D+2*A>=3*C+3,A+D>=2*C+1,A+D>=C+2] 

* Chain [20]: 3
  with precondition: [B=A,B>=2,C>=0,2*B>=2*C+3,D>=C+1,E>=D] 


#### Cost of chains of amor/atva/MergeSort_merge([C[CIII)V(A,B,C,D,E):
* Chain [24]: 11*s(1)+22*s(5)+23*s(7)+12*s(10)+23
  Such that:s(7) =< -C+D
s(8) =< -C+2*D+1
s(2) =< -C+2*D-E
s(4) =< -C+E
s(1) =< -C+E+1
s(3) =< -D+E
s(5) =< E/2
aux(11) =< -C+D+1
s(10) =< aux(11)
s(5)+s(7) =< s(4)
s(5)+s(7) =< s(8)
s(7) =< s(5)+s(2)
s(7) =< s(5)+aux(11)
s(10) >= 1
s(1) >= -C+E+1
s(5) >= -D+E
s(9) >= D-E
s(7) >= s(5)+s(9)-s(3)

  with precondition: [B=A,C>=0,E>=D+1,B>=E+1,C+E>=2*D,2*D+1>=C+E] 

* Chain [23]: 11*s(11)+22*s(15)+23*s(17)+23
  Such that:s(17) =< -C+D
s(16) =< -C+D+1
s(18) =< -C+2*D+1
s(12) =< -C+2*D-E
s(14) =< -C+E
s(11) =< -C+E+1
s(13) =< -D+E
s(15) =< E/2
s(15)+s(17) =< s(14)
s(15)+s(17) =< s(18)
s(17) =< s(15)+s(12)
s(17) =< s(15)+s(16)
s(11) >= -C+E+1
s(15) >= -D+E
s(19) >= D-E
s(17) >= s(15)+s(19)-s(13)

  with precondition: [B=A,C>=0,E>=D+1,B>=E+1,C+E>=2*D,2*D+1>=C+E] 

* Chain [22]: 11*s(20)+22*s(22)+23*s(28)+12*s(29)+20
  Such that:s(25) =< -C+2*D+1
s(23) =< -C+E
s(20) =< -C+E+1
s(22) =< -D+E-1
aux(12) =< -C+D+1
s(29) =< aux(12)
s(28) =< aux(12)
s(22)+s(28) =< s(23)
s(22)+s(28) =< s(25)
s(28) =< s(22)+aux(12)
s(29) >= 1
s(28) >= -C+D+1
s(20) >= -C+E+1

  with precondition: [B=A,C>=0,E>=D+1,B>=E+1,C+E>=2*D,2*D+1>=C+E] 

* Chain [21]: 11*s(30)+22*s(32)+23*s(38)+20
  Such that:s(35) =< -C+2*D+1
s(33) =< -C+E
s(30) =< -C+E+1
s(32) =< -D+E-1
aux(13) =< -C+D+1
s(38) =< aux(13)
s(32)+s(38) =< s(33)
s(32)+s(38) =< s(35)
s(38) =< s(32)+aux(13)
s(38) >= -C+D+1
s(30) >= -C+E+1

  with precondition: [B=A,C>=0,E>=D+1,B>=E+1,C+E>=2*D,2*D+1>=C+E] 


#### Cost of loops [26,27,28,29] 

 * loop 26:amor/atva/MergeSort_msort([C[CII)V(A,B,C,D) -> [amor/atva/MergeSort_msort([C[CII)V(A',B',C',D'),amor/atva/MergeSort_msort([C[CII)V(A'2,B'2,C'2,D'2)] 
11*s(48)+22*s(49)+23*s(50)+50
  Such that:s(45) =< -C'+C'2
s(46) =< -C'+2*C'2-1
s(47) =< -C'+D'2
s(48) =< -C'+D'2+1
s(49) =< -C'2+D'2
s(50) =< s(45)
s(49)+s(50) =< s(47)
s(49)+s(50) =< s(46)
s(50) =< s(49)+s(45)
s(50) >= -C'+D'+1
s(48) >= -C'+D'2+1

 * loop 27:amor/atva/MergeSort_msort([C[CII)V(A,B,C,D) -> [amor/atva/MergeSort_msort([C[CII)V(A',B',C',D'),amor/atva/MergeSort_msort([C[CII)V(A'2,B'2,C'2,D'2)] 
11*s(61)+22*s(62)+12*s(63)+23*s(64)+50
  Such that:s(58) =< -C'+C'2
s(59) =< -C'+2*C'2-1
s(60) =< -C'+D'2
s(61) =< -C'+D'2+1
s(62) =< -C'2+D'2
s(63) =< s(58)
s(64) =< s(58)
s(62)+s(64) =< s(60)
s(62)+s(64) =< s(59)
s(64) =< s(62)+s(58)
s(63) >= 1
s(64) >= -C'+D'+1
s(61) >= -C'+D'2+1

 * loop 28:amor/atva/MergeSort_msort([C[CII)V(A,B,C,D) -> [amor/atva/MergeSort_msort([C[CII)V(A',B',C',D'),amor/atva/MergeSort_msort([C[CII)V(A'2,B'2,C'2,D'2)] 
23*s(77)+11*s(76)+22*s(81)+53
  Such that:s(74) =< -C-D+2*C'2-2
s(75) =< -C+D
s(76) =< -C+D+1
s(77) =< -C+C'2-1
s(78) =< -C+C'2
s(79) =< -C+2*C'2-1
s(80) =< D-C'2+1
s(81) =< D/2
s(77)+s(81) =< s(75)
s(77)+s(81) =< s(79)
s(77) =< s(81)+s(74)
s(77) =< s(81)+s(78)
s(82) >= -D+D'
s(76) >= -C'+D'2+1
s(81) >= -D'+D'2
s(77) >= s(81)+s(82)-s(80)

 * loop 29:amor/atva/MergeSort_msort([C[CII)V(A,B,C,D) -> [amor/atva/MergeSort_msort([C[CII)V(A',B',C',D'),amor/atva/MergeSort_msort([C[CII)V(A'2,B'2,C'2,D'2)] 
23*s(96)+11*s(95)+22*s(100)+12*s(101)+53
  Such that:s(93) =< -C-D+2*C'2-2
s(94) =< -C+D
s(95) =< -C+D+1
s(96) =< -C+C'2-1
s(97) =< -C+C'2
s(98) =< -C+2*C'2-1
s(99) =< D-C'2+1
s(100) =< D/2
s(101) =< s(97)
s(96)+s(100) =< s(94)
s(96)+s(100) =< s(98)
s(96) =< s(100)+s(93)
s(96) =< s(100)+s(97)
s(101) >= 1
s(95) >= -C'+D'2+1
s(102) >= D'-D'2
s(100) >= -C'2+D'2+1
s(96) >= s(100)+s(102)-s(99)

#### Cost of phase [26,27,28,29]:amor/atva/MergeSort_msort([C[CII)V(A,B,C,D) -> [] 
50*it(26)+50*it(27)+53*it(28)+53*it(29)+4*it([25])+11*s(103)+22*s(104)+23*s(105)+11*s(109)+22*s(110)+12*s(111)+23*s(112)+23*s(116)+11*s(117)+22*s(118)+23*s(125)+11*s(126)+22*s(127)+12*s(128)+0
  Such that:it([25]) =< -C+D+1
aux(17) =< D+1
aux(57) =< -C+D-2
aux(58) =< -C+D
it(29) =< aux(57)
it(26)+it(27)+it(28)+it(29) =< aux(58)
aux(40) =< aux(17)* (1/2)-1/2
aux(39) =< aux(58)* (1/2)+1/2
aux(25) =< aux(17)
aux(18) =< aux(58)
aux(36) =< aux(58)* (1/2)
aux(19) =< aux(58)+1
aux(20) =< aux(58)* (1/2)-1/2
it(29) =< it([25])*2+aux(57)
s(107) =< it(26)*aux(17)
s(106) =< it(26)*aux(58)
s(127) =< it(29)*aux(40)
s(130) =< it(29)*aux(39)
s(133) =< it(29)*aux(25)
s(131) =< it(29)*aux(18)
s(125) =< it(29)*aux(36)
s(126) =< it(29)*aux(19)
s(118) =< it(28)*aux(40)
s(120) =< it(28)*aux(39)
s(123) =< it(28)*aux(25)
s(121) =< it(28)*aux(18)
s(116) =< it(28)*aux(36)
s(117) =< it(28)*aux(19)
s(110) =< it(27)*aux(20)
s(109) =< it(27)*aux(19)
s(113) =< it(27)*aux(18)
s(114) =< it(27)*aux(25)
s(104) =< it(26)*aux(20)
s(103) =< it(26)*aux(19)
s(108) =< it(26)*aux(18)
s(128) =< s(131)
s(125)+s(127) =< s(131)
s(125)+s(127) =< s(133)
s(125) =< s(127)
s(125) =< s(127)+s(131)
s(116)+s(118) =< s(121)
s(116)+s(118) =< s(123)
s(116) =< s(118)
s(116) =< s(118)+s(121)
s(111) =< s(113)
s(112) =< s(113)
s(110)+s(112) =< s(113)
s(110)+s(112) =< s(114)
s(112) =< s(110)+s(113)
s(105) =< s(106)
s(104)+s(105) =< s(108)
s(104)+s(105) =< s(107)
s(105) =< s(104)+s(106)
s(103)+s(109)+s(117)+s(126) >= -2*C+2*D
aux(29) >= C/2-D/2-1/2
aux(60) >= 1
aux(61) >= -C+D
s(119) >= aux(59)
s(119)+s(129) >= aux(59)
aux(60) >= aux(60)
aux(21)+it(26)+it(28)+it(29) >= aux(61)
aux(41)+it(26)+it(27)+it(28) >= aux(61)
it(26)+it(27)+it(28)+it(29) >= aux(61)
it(26)+it(27)+it(28)+s(127) >= aux(61)
it(26)+it(27)+it(29)+s(118) >= aux(61)
it(26)+it(28)+it(29)+s(112) >= aux(61)
it(27)+it(28)+it(29)+s(105) >= aux(61)
aux(43) >= aux(29)
aux(15) >= aux(60)*2
aux(22) >= aux(60)
it([25]) >= it(29)+it(28)+it(27)+it(26)+aux(60)
s(127) >= it(29)*aux(60)
s(128) >= aux(41)
s(118) >= it(28)*aux(60)
s(119) >= it(28)*aux(29)
s(111) >= aux(21)
s(105) >= it(26)*aux(60)
s(129) >= it(29)*aux(43)
s(126) >= it(29)*aux(15)
s(117) >= it(28)*aux(15)
s(109) >= it(27)*aux(15)
s(112) >= it(27)*aux(22)
s(103) >= it(26)*aux(15)
s(125) >= s(127)+s(129)-s(130)
s(116) >= s(118)+s(119)-s(120)

#### Cost of chains of amor/atva/MergeSort_msort([C[CII)V(A,B,C,D):
* Chain [25]: 4
  with precondition: [B=A,C>=0,D+1>=C,B>=D+1,C>=D] 

* Chain [multiple([26,27,28,29],[[25]])]: 50*it(26)+50*it(27)+53*it(28)+53*it(29)+4*it([25])+11*s(103)+22*s(104)+23*s(105)+11*s(109)+22*s(110)+12*s(111)+23*s(112)+23*s(116)+11*s(117)+22*s(118)+23*s(125)+11*s(126)+22*s(127)+12*s(128)+0
  Such that:it([25]) =< -C+D+1
aux(17) =< D+1
aux(57) =< -C+D-2
aux(58) =< -C+D
it(29) =< aux(57)
it(26)+it(27)+it(28)+it(29) =< aux(58)
aux(40) =< aux(17)* (1/2)-1/2
aux(39) =< aux(58)* (1/2)+1/2
aux(25) =< aux(17)
aux(18) =< aux(58)
aux(36) =< aux(58)* (1/2)
aux(19) =< aux(58)+1
aux(20) =< aux(58)* (1/2)-1/2
it(29) =< it([25])*2+aux(57)
s(107) =< it(26)*aux(17)
s(106) =< it(26)*aux(58)
s(127) =< it(29)*aux(40)
s(130) =< it(29)*aux(39)
s(133) =< it(29)*aux(25)
s(131) =< it(29)*aux(18)
s(125) =< it(29)*aux(36)
s(126) =< it(29)*aux(19)
s(118) =< it(28)*aux(40)
s(120) =< it(28)*aux(39)
s(123) =< it(28)*aux(25)
s(121) =< it(28)*aux(18)
s(116) =< it(28)*aux(36)
s(117) =< it(28)*aux(19)
s(110) =< it(27)*aux(20)
s(109) =< it(27)*aux(19)
s(113) =< it(27)*aux(18)
s(114) =< it(27)*aux(25)
s(104) =< it(26)*aux(20)
s(103) =< it(26)*aux(19)
s(108) =< it(26)*aux(18)
s(128) =< s(131)
s(125)+s(127) =< s(131)
s(125)+s(127) =< s(133)
s(125) =< s(127)
s(125) =< s(127)+s(131)
s(116)+s(118) =< s(121)
s(116)+s(118) =< s(123)
s(116) =< s(118)
s(116) =< s(118)+s(121)
s(111) =< s(113)
s(112) =< s(113)
s(110)+s(112) =< s(113)
s(110)+s(112) =< s(114)
s(112) =< s(110)+s(113)
s(105) =< s(106)
s(104)+s(105) =< s(108)
s(104)+s(105) =< s(107)
s(105) =< s(104)+s(106)
s(103)+s(109)+s(117)+s(126) >= -2*C+2*D
aux(29) >= C/2-D/2-1/2
aux(60) >= 1
aux(61) >= -C+D
s(119) >= aux(59)
s(119)+s(129) >= aux(59)
aux(60) >= aux(60)
aux(21)+it(26)+it(28)+it(29) >= aux(61)
aux(41)+it(26)+it(27)+it(28) >= aux(61)
it(26)+it(27)+it(28)+it(29) >= aux(61)
it(26)+it(27)+it(28)+s(127) >= aux(61)
it(26)+it(27)+it(29)+s(118) >= aux(61)
it(26)+it(28)+it(29)+s(112) >= aux(61)
it(27)+it(28)+it(29)+s(105) >= aux(61)
aux(43) >= aux(29)
aux(15) >= aux(60)*2
aux(22) >= aux(60)
it([25]) >= it(29)+it(28)+it(27)+it(26)+aux(60)
s(127) >= it(29)*aux(60)
s(128) >= aux(41)
s(118) >= it(28)*aux(60)
s(119) >= it(28)*aux(29)
s(111) >= aux(21)
s(105) >= it(26)*aux(60)
s(129) >= it(29)*aux(43)
s(126) >= it(29)*aux(15)
s(117) >= it(28)*aux(15)
s(109) >= it(27)*aux(15)
s(112) >= it(27)*aux(22)
s(103) >= it(26)*aux(15)
s(125) >= s(127)+s(129)-s(130)
s(116) >= s(118)+s(119)-s(120)

  with precondition: [A=B,C>=0,D>=C+1,A>=D+1] 


#### Cost of chains of amor/atva/MergeSort_msort([C)V(A):
* Chain [31]: 19
  with precondition: [1>=A,A>=0] 

* Chain [30]: 4*s(135)+11*s(139)+11*s(140)+11*s(141)+11*s(142)+53*s(146)+50*s(147)+50*s(148)+53*s(149)+22*s(155)+22*s(156)+23*s(157)+23*s(158)+12*s(169)+12*s(170)+23*s(176)+23*s(180)+22*s(181)+22*s(184)+15
  Such that:s(137) =< A-3
s(138) =< A-1
aux(62) =< A
s(135) =< aux(62)
s(146) =< s(137)
s(146)+s(147)+s(148)+s(149) =< s(138)
s(159) =< aux(62)* (1/2)-1/2
s(160) =< s(138)* (1/2)+1/2
s(161) =< aux(62)
s(162) =< s(138)
s(163) =< s(138)* (1/2)
s(164) =< s(138)+1
s(167) =< s(138)* (1/2)-1/2
s(146) =< s(135)*2+s(137)
s(171) =< s(147)*aux(62)
s(172) =< s(147)*s(138)
s(155) =< s(146)*s(159)
s(173) =< s(146)*s(160)
s(174) =< s(146)*s(161)
s(175) =< s(146)*s(162)
s(176) =< s(146)*s(163)
s(142) =< s(146)*s(164)
s(156) =< s(149)*s(159)
s(177) =< s(149)*s(160)
s(178) =< s(149)*s(161)
s(179) =< s(149)*s(162)
s(180) =< s(149)*s(163)
s(141) =< s(149)*s(164)
s(181) =< s(148)*s(167)
s(140) =< s(148)*s(164)
s(182) =< s(148)*s(162)
s(183) =< s(148)*s(161)
s(184) =< s(147)*s(167)
s(139) =< s(147)*s(164)
s(185) =< s(147)*s(162)
s(169) =< s(175)
s(155)+s(176) =< s(175)
s(155)+s(176) =< s(174)
s(176) =< s(155)
s(176) =< s(155)+s(175)
s(156)+s(180) =< s(179)
s(156)+s(180) =< s(178)
s(180) =< s(156)
s(180) =< s(156)+s(179)
s(170) =< s(182)
s(157)+s(181) =< s(182)
s(157)+s(181) =< s(183)
s(157) =< s(181)+s(182)
s(158) =< s(172)
s(158)+s(184) =< s(185)
s(158)+s(184) =< s(171)
s(158) =< s(184)+s(172)
s(144) >= 1
s(145) >= A-1
s(142)+s(141)+s(140)+s(139) >= 2*A-2
s(143) >= -A/2
s(144) >= s(144)
s(146)+s(147)+s(149)+s(153) >= s(145)
s(147)+s(148)+s(149)+s(154) >= s(145)
s(146)+s(147)+s(148)+s(149) >= s(145)
s(147)+s(148)+s(149)+s(155) >= s(145)
s(146)+s(147)+s(148)+s(156) >= s(145)
s(146)+s(147)+s(149)+s(157) >= s(145)
s(146)+s(148)+s(149)+s(158) >= s(145)
s(165) >= s(143)
s(166) >= s(144)*2
s(168) >= s(144)
s(135) >= s(146)+s(149)+s(148)+s(147)+s(144)
s(155) >= s(146)*s(144)
s(169) >= s(154)
s(156) >= s(149)*s(144)
s(151) >= s(149)*s(143)
s(170) >= s(153)
s(158) >= s(147)*s(144)
s(152) >= s(146)*s(165)
s(142) >= s(146)*s(166)
s(141) >= s(149)*s(166)
s(140) >= s(148)*s(166)
s(157) >= s(148)*s(168)
s(139) >= s(147)*s(166)
s(176) >= s(155)+s(152)-s(173)
s(180) >= s(156)+s(151)-s(177)

  with precondition: [A>=2] 


Closed-form bounds of amor/atva/MergeSort_msort([C)V(A): 
-------------------------------------
* Chain [31] with precondition: [1>=A,A>=0] 
    - Lower bound: 19 
    - Complexity: constant
 * Chain [30] with precondition: [A>=2] 
    - Lower bound: 22*A-22+ (137*A-137+ (nat(A/2-1/2+ (A-1)* (-A/2+1/2))*23+19)) 
    - Complexity: n^2
 
### Partitioned lower bound of amor/atva/MergeSort_msort([C)V(A): 
* 19 
 if [1>=A,A>=0]
* 22*A-22+ (137*A-137+ (nat(A/2-1/2+ (A-1)* (-A/2+1/2))*23+19)) 
 if [A>=2]
Possible lower bounds : [19,22*A-22+ (137*A-137+ (nat(A/2-1/2+ (A-1)* (-A/2+1/2))*23+19))]
Maximum lower bound complexity: n^2

Time statistics: 
-------------------------------------
* Partial evaluation computed in 38 ms.
* Invariants computed in 418 ms.
   - Backward Invariants 141 ms.
   - Transitive Invariants 131 ms.
* Refinement performed in 399 ms.
* Termination proved in 415 ms.
* Upper bounds computed in 4207 ms.
   - Equation cost structures 546 ms.
   - Phase cost structures 2230 ms.
   - Chain cost structures 1565 ms.
   - Solving cost expressions 67 ms.
* Total analysis performed in 5614 ms.


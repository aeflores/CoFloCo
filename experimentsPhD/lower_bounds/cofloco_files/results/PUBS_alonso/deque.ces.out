
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive : [java/lang/Object_<init>()V/1]
1. non_recursive : [amor/atva/QNode_<init>(CLamor/atva/QNode;)V/3]
2. recursive : [9_loop/3]
3. recursive : [2_loop/5]
4. non_recursive : [amor/atva/Queue_deque(Lamor/atva/QNode;Lamor/atva/QNode;I)V/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into 9_loop/3
3. SCC is partially evaluated into 2_loop/5
4. SCC is partially evaluated into amor/atva/Queue_deque(Lamor/atva/QNode;Lamor/atva/QNode;I)V/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations 9_loop/3 
* CE 8 is refined into CE [9] 
* CE 7 is refined into CE [10] 


#### Refined cost equations 9_loop/3 
* CE 9: 9_loop(A,B,C) = 2
     [B>=1,A>=1,C=0] 
* CE 10: 9_loop(A,B,C) = 23+ 9_loop(A,D,E)
     [C>=E+1,A>=C,E>=0,D>=1,B>=0] 

### Cost equations --> "Loop" of 9_loop/3 
* CEs [10] --> Loop 8 
* CEs [9] --> Loop 9 

#### Loops of 9_loop/3 
* Loop 8: 9_loop(A,B,C)->  9_loop(A,B',C')
                  [C>=C'+1,A>=C,C'>=0,B'>=1,B>=0] 
* Loop 9: 9_loop(A,B,C) [B>=1,A>=1,C=0] 

### Ranking functions of CR 9_loop(A,B,C) 
* RF of phase [8]: [C]

#### Partial ranking functions of CR 9_loop(A,B,C) 
* Partial RF of phase [8]:
  - RF of loop [8:1]:
    C


### Resulting Chains:9_loop(A,B,C) 
* [[8],9]


### Specialization of cost equations 2_loop/5 
* CE 6 is refined into CE [11] 
* CE 3 is refined into CE [12] 
* CE 5 is refined into CE [13] 
* CE 4 is refined into CE [14] 


#### Refined cost equations 2_loop/5 
* CE 11: 2_loop(A,B,C,D,E) = 3
     [D>=C,D>=0,E=0] 
* CE 12: 2_loop(A,B,C,D,E) = 7+ 2_loop(A,B,C,F,G)
     [C>=D+1,D>=0,B>=1,D+1=F,G=0,E=0] 
* CE 13: 2_loop(A,B,C,D,E) = 16+ 9_loop(A,F,A):[[8],9]+ 2_loop(G,H,C,I,J)
     [H>=0,A>=1,C>=1,J=0,I=1,G=0,F=0,E=0,D=0,B=0] 
* CE 14: 2_loop(A,B,C,D,E) = 9+ 2_loop(F,G,C,H,I)
     [C>=D+1,D>=0,D+1=H,I=0,G=0,F=0,E=0,B=0,A=0] 

### Cost equations --> "Loop" of 2_loop/5 
* CEs [12] --> Loop 10 
* CEs [13] --> Loop 11 
* CEs [14] --> Loop 12 
* CEs [11] --> Loop 13 

#### Loops of 2_loop/5 
* Loop 10: 2_loop(A,B,C,D,E)->  2_loop(A,B,C,D',E')
                  [C>=D+1,D>=0,B>=1,D+1=D',E'=0,E=0] 
* Loop 11: 2_loop(A,B,C,D,E)->  2_loop(A',B',C,D',E')
                  [B'>=0,C>=1,A>=1,E'=0,D'=1,A'=0,E=0,D=0,B=0] 
* Loop 12: 2_loop(A,B,C,D,E)->  2_loop(A',B',C,D',E')
                  [C>=D+1,D>=0,D+1=D',E'=0,B'=0,A'=0,E=0,B=0,A=0] 
* Loop 13: 2_loop(A,B,C,D,E) [D>=C,D>=0,E=0] 

### Ranking functions of CR 2_loop(A,B,C,D,E) 
* RF of phase [10]: [C-D]
* RF of phase [12]: [C-D]

#### Partial ranking functions of CR 2_loop(A,B,C,D,E) 
* Partial RF of phase [10]:
  - RF of loop [10:1]:
    C-D
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    C-D


### Resulting Chains:2_loop(A,B,C,D,E) 
* [[12],13]
* [[10],13]
* [13]
* [11,[12],13]
* [11,[10],13]
* [11,13]


### Specialization of cost equations amor/atva/Queue_deque(Lamor/atva/QNode;Lamor/atva/QNode;I)V/3 
* CE 2 is refined into CE [15,16,17,18,19,20] 


#### Refined cost equations amor/atva/Queue_deque(Lamor/atva/QNode;Lamor/atva/QNode;I)V/3 
* CE 15: amor/atva/Queue_deque(Lamor/atva/QNode;Lamor/atva/QNode;I)V(A,B,C) = 3+ 2_loop(D,E,C,F,G):[[12],13]
     [C>=1,G=0,F=0,E=0,D=0,B=0,A=0] 
* CE 16: amor/atva/Queue_deque(Lamor/atva/QNode;Lamor/atva/QNode;I)V(A,B,C) = 3+ 2_loop(A,B,C,D,E):[[10],13]
     [C>=1,B>=1,E=0,D=0] 
* CE 17: amor/atva/Queue_deque(Lamor/atva/QNode;Lamor/atva/QNode;I)V(A,B,C) = 3+ 2_loop(A,B,C,D,E):[13]
     [0>=C,E=0,D=0] 
* CE 18: amor/atva/Queue_deque(Lamor/atva/QNode;Lamor/atva/QNode;I)V(A,B,C) = 3+ 2_loop(A,D,C,E,F):[11,[12],13]
     [C>=2,A>=1,F=0,E=0,D=0,B=0] 
* CE 19: amor/atva/Queue_deque(Lamor/atva/QNode;Lamor/atva/QNode;I)V(A,B,C) = 3+ 2_loop(A,D,C,E,F):[11,[10],13]
     [C>=2,A>=1,F=0,E=0,D=0,B=0] 
* CE 20: amor/atva/Queue_deque(Lamor/atva/QNode;Lamor/atva/QNode;I)V(A,B,C) = 3+ 2_loop(A,D,E,F,G):[11,13]
     [A>=1,G=0,F=0,E=1,D=0,C=1,B=0] 

### Cost equations --> "Loop" of amor/atva/Queue_deque(Lamor/atva/QNode;Lamor/atva/QNode;I)V/3 
* CEs [16] --> Loop 14 
* CEs [17] --> Loop 15 
* CEs [19] --> Loop 16 
* CEs [18] --> Loop 17 
* CEs [20] --> Loop 18 
* CEs [15] --> Loop 19 

#### Loops of amor/atva/Queue_deque(Lamor/atva/QNode;Lamor/atva/QNode;I)V/3 
* Loop 14: amor/atva/Queue_deque(Lamor/atva/QNode;Lamor/atva/QNode;I)V(A,B,C) [C>=1,B>=1] 
* Loop 15: amor/atva/Queue_deque(Lamor/atva/QNode;Lamor/atva/QNode;I)V(A,B,C) [0>=C] 
* Loop 16: amor/atva/Queue_deque(Lamor/atva/QNode;Lamor/atva/QNode;I)V(A,B,C) [C>=2,A>=1,B=0] 
* Loop 17: amor/atva/Queue_deque(Lamor/atva/QNode;Lamor/atva/QNode;I)V(A,B,C) [C>=2,A>=1,B=0] 
* Loop 18: amor/atva/Queue_deque(Lamor/atva/QNode;Lamor/atva/QNode;I)V(A,B,C) [A>=1,C=1,B=0] 
* Loop 19: amor/atva/Queue_deque(Lamor/atva/QNode;Lamor/atva/QNode;I)V(A,B,C) [C>=1,B=0,A=0] 

### Ranking functions of CR amor/atva/Queue_deque(Lamor/atva/QNode;Lamor/atva/QNode;I)V(A,B,C) 

#### Partial ranking functions of CR amor/atva/Queue_deque(Lamor/atva/QNode;Lamor/atva/QNode;I)V(A,B,C) 


### Resulting Chains:amor/atva/Queue_deque(Lamor/atva/QNode;Lamor/atva/QNode;I)V(A,B,C) 
* [19]
* [18]
* [17]
* [16]
* [15]
* [14]


Computing Bounds
=====================================

#### Cost of loops [8] 

 * loop 8:9_loop(A,B,C) -> [9_loop(A',B',C')] 
23
#### Cost of phase [8]:9_loop(A,B,C) -> [9_loop(A',B',C')] 
23*it(8)+0
  Such that:it(8) =< C
it(8) =< C-C'

#### Cost of chains of 9_loop(A,B,C):
* Chain [[8],9]: 23*it(8)+2
  Such that:it(8) =< C

  with precondition: [B>=0,C>=1,A>=C] 


#### Cost of loops [12] 

 * loop 12:2_loop(A,B,C,D,E) -> [2_loop(A',B',C',D',E')] 
9
#### Cost of phase [12]:2_loop(A,B,C,D,E) -> [2_loop(A',B',C',D',E')] 
9*it(12)+0
  Such that:it(12) =< C-D
it(12) =< C-D-C'+D'
it(12) >= C-D-C'+D'

#### Cost of loops [10] 

 * loop 10:2_loop(A,B,C,D,E) -> [2_loop(A',B',C',D',E')] 
7
#### Cost of phase [10]:2_loop(A,B,C,D,E) -> [2_loop(A',B',C',D',E')] 
7*it(10)+0
  Such that:it(10) =< C-D
it(10) =< C-D-C'+D'
it(10) >= C-D-C'+D'

#### Cost of chains of 2_loop(A,B,C,D,E):
* Chain [[12],13]: 9*it(12)+3
  Such that:it(12) =< C-D
it(12) >= C-D

  with precondition: [A=0,B=0,E=0,D>=0,C>=D+1] 

* Chain [[10],13]: 7*it(10)+3
  Such that:it(10) =< C-D
it(10) >= C-D

  with precondition: [E=0,B>=1,D>=0,C>=D+1] 

* Chain [13]: 3
  with precondition: [E=0,D>=0,D>=C] 

* Chain [11,[12],13]: 9*it(12)+23*s(1)+21
  Such that:s(1) =< A
it(12) =< C-1
it(12) >= C-1

  with precondition: [B=0,D=0,E=0,A>=1,C>=2] 

* Chain [11,[10],13]: 7*it(10)+23*s(1)+21
  Such that:s(1) =< A
it(10) =< C-1
it(10) >= C-1

  with precondition: [B=0,D=0,E=0,A>=1,C>=2] 

* Chain [11,13]: 23*s(1)+21
  Such that:s(1) =< A

  with precondition: [B=0,C=1,D=0,E=0,A>=1] 


#### Cost of chains of amor/atva/Queue_deque(Lamor/atva/QNode;Lamor/atva/QNode;I)V(A,B,C):
* Chain [19]: 9*s(2)+6
  Such that:s(2) =< C
s(2) >= C

  with precondition: [A=0,B=0,C>=1] 

* Chain [18]: 23*s(3)+24
  Such that:s(3) =< A

  with precondition: [B=0,C=1,A>=1] 

* Chain [17]: 23*s(4)+9*s(5)+24
  Such that:s(4) =< A
s(5) =< C-1
s(5) >= C-1

  with precondition: [B=0,A>=1,C>=2] 

* Chain [16]: 23*s(6)+7*s(7)+24
  Such that:s(6) =< A
s(7) =< C-1
s(7) >= C-1

  with precondition: [B=0,A>=1,C>=2] 

* Chain [15]: 6
  with precondition: [0>=C] 

* Chain [14]: 7*s(8)+6
  Such that:s(8) =< C
s(8) >= C

  with precondition: [B>=1,C>=1] 


Closed-form bounds of amor/atva/Queue_deque(Lamor/atva/QNode;Lamor/atva/QNode;I)V(A,B,C): 
-------------------------------------
* Chain [19] with precondition: [A=0,B=0,C>=1] 
    - Lower bound: 9*C+6 
    - Complexity: n
 * Chain [18] with precondition: [B=0,C=1,A>=1] 
    - Lower bound: 24 
    - Complexity: constant
 * Chain [17] with precondition: [B=0,A>=1,C>=2] 
    - Lower bound: 9*C+15 
    - Complexity: n
 * Chain [16] with precondition: [B=0,A>=1,C>=2] 
    - Lower bound: 7*C+17 
    - Complexity: n
 * Chain [15] with precondition: [0>=C] 
    - Lower bound: 6 
    - Complexity: constant
 * Chain [14] with precondition: [B>=1,C>=1] 
    - Lower bound: 7*C+6 
    - Complexity: n
 
### Partitioned lower bound of amor/atva/Queue_deque(Lamor/atva/QNode;Lamor/atva/QNode;I)V(A,B,C): 
* 6 
 if [0>=C]
* 24 
 if [B=0,C=1,A>=1]
* 7*C+6 
 if [B>=1,C>=1]
* 7*C+17 
 if [B=0,A>=1,C>=2]
* 9*C+6 
 if [A=0,B=0,C>=1]
Possible lower bounds : [6,24,7*C+6,7*C+17,9*C+6]
Maximum lower bound complexity: n

Time statistics: 
-------------------------------------
* Partial evaluation computed in 24 ms.
* Invariants computed in 120 ms.
   - Backward Invariants 43 ms.
   - Transitive Invariants 16 ms.
* Refinement performed in 113 ms.
* Termination proved in 26 ms.
* Upper bounds computed in 155 ms.
   - Equation cost structures 41 ms.
   - Phase cost structures 36 ms.
   - Chain cost structures 31 ms.
   - Solving cost expressions 5 ms.
* Total analysis performed in 527 ms.


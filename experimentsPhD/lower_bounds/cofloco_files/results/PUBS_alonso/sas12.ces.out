
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [15_loop/2]
1. recursive : [13_loop/3]
2. recursive : [6_loop/3]
3. recursive : [2_loop/6]
4. non_recursive : [amor/atva/Sas12_sas12(II)V/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into 15_loop/2
1. SCC is partially evaluated into 13_loop/3
2. SCC is partially evaluated into 6_loop/3
3. SCC is partially evaluated into 2_loop/6
4. SCC is partially evaluated into amor/atva/Sas12_sas12(II)V/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations 15_loop/2 
* CE 12 is refined into CE [13] 
* CE 11 is refined into CE [14] 


#### Refined cost equations 15_loop/2 
* CE 13: 15_loop(A,A) = 3
     [A>=0] 
* CE 14: 15_loop(A,B) = 5+ 15_loop(A,C)
     [A>=B+1,B>=0,B+1=C] 

### Cost equations --> "Loop" of 15_loop/2 
* CEs [14] --> Loop 12 
* CEs [13] --> Loop 13 

#### Loops of 15_loop/2 
* Loop 12: 15_loop(A,B)->  15_loop(A,B')
                  [A>=B+1,B>=0,B+1=B'] 
* Loop 13: 15_loop(A,A) [A>=0] 

### Ranking functions of CR 15_loop(A,B) 
* RF of phase [12]: [A-B]

#### Partial ranking functions of CR 15_loop(A,B) 
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    A-B


### Resulting Chains:15_loop(A,B) 
* [[12],13]
* [13]


### Specialization of cost equations 13_loop/3 
* CE 10 is refined into CE [15] 
* CE 9 is refined into CE [16,17] 


#### Refined cost equations 13_loop/3 
* CE 15: 13_loop(A,A,B) = 3
     [A>=0] 
* CE 16: 13_loop(A,B,C) = 7+ 15_loop(B,D):[[12],13]+ 13_loop(A,E,F)
     [F>=B,A>=B+1,B>=1,B+1=E,D=0] 
* CE 17: 13_loop(A,B,C) = 7+ 15_loop(D,E):[13]+ 13_loop(A,F,G)
     [G>=0,A>=1,F=1,E=0,D=0,B=0] 

### Cost equations --> "Loop" of 13_loop/3 
* CEs [16] --> Loop 14 
* CEs [17] --> Loop 15 
* CEs [15] --> Loop 16 

#### Loops of 13_loop/3 
* Loop 14: 13_loop(A,B,C)->  13_loop(A,B',C')
                  [C'>=B,A>=B+1,B>=1,B+1=B'] 
* Loop 15: 13_loop(A,B,C)->  13_loop(A,B',C')
                  [C'>=0,A>=1,B'=1,B=0] 
* Loop 16: 13_loop(A,A,B) [A>=0] 

### Ranking functions of CR 13_loop(A,B,C) 
* RF of phase [14]: [A-B]

#### Partial ranking functions of CR 13_loop(A,B,C) 
* Partial RF of phase [14]:
  - RF of loop [14:1]:
    A-B


### Resulting Chains:13_loop(A,B,C) 
* [16]
* [15,[14],16]
* [15,16]


### Specialization of cost equations 6_loop/3 
* CE 7 is refined into CE [18] 
* CE 8 is refined into CE [19] 
* CE 6 is refined into CE [20] 


#### Refined cost equations 6_loop/3 
* CE 18: 6_loop(A,B,C) = 8
     [A>=C+1,C>=0,B>=0] 
* CE 19: 6_loop(A,B,C) = 3
     [C>=A,C>=0,B>=0] 
* CE 20: 6_loop(A,B,C) = 10+ 6_loop(A,B,D)
     [A>=C+1,C>=0,B>=0,C+1=D] 

### Cost equations --> "Loop" of 6_loop/3 
* CEs [20] --> Loop 17 
* CEs [18] --> Loop 18 
* CEs [19] --> Loop 19 

#### Loops of 6_loop/3 
* Loop 17: 6_loop(A,B,C)->  6_loop(A,B,C')
                  [A>=C+1,C>=0,B>=0,C+1=C'] 
* Loop 18: 6_loop(A,B,C) [A>=C+1,C>=0,B>=0] 
* Loop 19: 6_loop(A,B,C) [C>=A,C>=0,B>=0] 

### Ranking functions of CR 6_loop(A,B,C) 
* RF of phase [17]: [A-C]

#### Partial ranking functions of CR 6_loop(A,B,C) 
* Partial RF of phase [17]:
  - RF of loop [17:1]:
    A-C


### Resulting Chains:6_loop(A,B,C) 
* [[17],19]
* [[17],18]
* [19]
* [18]


### Specialization of cost equations 2_loop/6 
* CE 5 is refined into CE [21] 
* CE 4 is refined into CE [22,23,24,25,26,27,28,29,30,31] 
* CE 3 is refined into CE [32,33,34,35] 


#### Refined cost equations 2_loop/6 
* CE 21: 2_loop(A,B,C,D,E,F) = 3
     [C>=B,E>=0,D>=0,C>=0] 
* CE 22: 2_loop(A,B,C,D,E,F) = 19+ 6_loop(A,C,G):[[17],19]+ 13_loop(H,I,F):[16]+ 2_loop(J,B,K,L,M,N)
     [B>=C+1,M>=0,C>=0,A>=1,E>=0,D>=0,C+1=K,A+1=J,L=0,I=0,H=0,G=0] 
* CE 23: 2_loop(A,B,C,D,E,F) = 19+ 6_loop(A,C,G):[[17],19]+ 13_loop(H,I,F):[15,[14],16]+ 2_loop(J,B,K,H,L,M)
     [L>=H,A>=H,B>=C+1,H>=2,C>=0,E>=0,D>=0,H+J=A+1,C+1=K,I=0,G=0] 
* CE 24: 2_loop(A,B,C,D,E,F) = 19+ 6_loop(A,C,G):[[17],19]+ 13_loop(H,I,F):[15,16]+ 2_loop(A,B,J,K,L,M)
     [B>=C+1,L>=1,C>=0,A>=1,E>=0,D>=0,C+1=J,K=1,I=0,H=1,G=0] 
* CE 25: 2_loop(A,B,C,D,E,F) = 19+ 6_loop(A,C,G):[[17],18]+ 13_loop(H,I,F):[16]+ 2_loop(J,B,K,L,M,N)
     [B>=C+1,M>=0,C>=0,A>=2,E>=0,D>=0,C+1=K,A+1=J,L=0,I=0,H=0,G=0] 
* CE 26: 2_loop(A,B,C,D,E,F) = 19+ 6_loop(A,C,G):[[17],18]+ 13_loop(H,I,F):[15,[14],16]+ 2_loop(J,B,K,H,L,M)
     [L>=H,A>=H,B>=C+1,H>=2,C>=0,E>=0,D>=0,H+J=A+1,C+1=K,I=0,G=0] 
* CE 27: 2_loop(A,B,C,D,E,F) = 19+ 6_loop(A,C,G):[[17],18]+ 13_loop(H,I,F):[15,16]+ 2_loop(A,B,J,K,L,M)
     [B>=C+1,L>=1,C>=0,A>=2,E>=0,D>=0,C+1=J,K=1,I=0,H=1,G=0] 
* CE 28: 2_loop(A,B,C,D,E,F) = 19+ 6_loop(G,C,H):[19]+ 13_loop(I,J,F):[16]+ 2_loop(K,B,L,M,N,O)
     [B>=C+1,N>=0,C>=0,E>=0,D>=0,C+1=L,M=0,K=1,J=0,I=0,H=0,G=0,A=0] 
* CE 29: 2_loop(A,B,C,D,E,F) = 19+ 6_loop(A,C,G):[18]+ 13_loop(H,I,F):[16]+ 2_loop(J,B,K,L,M,N)
     [B>=C+1,M>=0,C>=0,A>=1,E>=0,D>=0,C+1=K,A+1=J,L=0,I=0,H=0,G=0] 
* CE 30: 2_loop(A,B,C,D,E,F) = 19+ 6_loop(A,C,G):[18]+ 13_loop(H,I,F):[15,[14],16]+ 2_loop(J,B,K,H,L,M)
     [L>=H,A>=H,B>=C+1,H>=2,C>=0,E>=0,D>=0,H+J=A+1,C+1=K,I=0,G=0] 
* CE 31: 2_loop(A,B,C,D,E,F) = 19+ 6_loop(A,C,G):[18]+ 13_loop(H,I,F):[15,16]+ 2_loop(A,B,J,K,L,M)
     [B>=C+1,L>=1,C>=0,A>=1,E>=0,D>=0,C+1=J,K=1,I=0,H=1,G=0] 
* CE 32: 2_loop(A,B,C,D,E,F) = 15+ 6_loop(A,C,G):[[17],19]+ 2_loop(H,B,I,J,E,F)
     [B>=C+1,J>=A+1,C>=0,A>=1,E>=0,D>=0,A+1=H+J,C+1=I,G=0] 
* CE 33: 2_loop(A,B,C,D,E,F) = 15+ 6_loop(A,C,G):[[17],18]+ 2_loop(H,B,I,J,E,F)
     [B>=C+1,J>=A+1,C>=0,A>=2,E>=0,D>=0,A+1=H+J,C+1=I,G=0] 
* CE 34: 2_loop(A,B,C,D,E,F) = 15+ 6_loop(A,C,G):[19]+ 2_loop(H,B,I,J,E,F)
     [B>=C+1,J>=A+1,J>=0,C>=0,E>=0,D>=0,0>=A,A+1=H+J,C+1=I,G=0] 
* CE 35: 2_loop(A,B,C,D,E,F) = 15+ 6_loop(A,C,G):[18]+ 2_loop(H,B,I,J,E,F)
     [B>=C+1,J>=A+1,C>=0,A>=1,E>=0,D>=0,A+1=H+J,C+1=I,G=0] 

### Cost equations --> "Loop" of 2_loop/6 
* CEs [30] --> Loop 20 
* CEs [26] --> Loop 21 
* CEs [23] --> Loop 22 
* CEs [33] --> Loop 23 
* CEs [35] --> Loop 24 
* CEs [32] --> Loop 25 
* CEs [34] --> Loop 26 
* CEs [27] --> Loop 27 
* CEs [31] --> Loop 28 
* CEs [24] --> Loop 29 
* CEs [25] --> Loop 30 
* CEs [29] --> Loop 31 
* CEs [22] --> Loop 32 
* CEs [28] --> Loop 33 
* CEs [21] --> Loop 34 

#### Loops of 2_loop/6 
* Loop 20: 2_loop(A,B,C,D,E,F)->  2_loop(A',B,C',D',E',F')
                  [E'>=D',A>=D',B>=C+1,D'>=2,E>=0,D>=0,C>=0,A'+D'=A+1,C+1=C'] 
* Loop 21: 2_loop(A,B,C,D,E,F)->  2_loop(A',B,C',D',E',F')
                  [E'>=D',A>=D',B>=C+1,D'>=2,E>=0,D>=0,C>=0,A'+D'=A+1,C+1=C'] 
* Loop 22: 2_loop(A,B,C,D,E,F)->  2_loop(A',B,C',D',E',F')
                  [E'>=D',A>=D',B>=C+1,D'>=2,E>=0,D>=0,C>=0,A'+D'=A+1,C+1=C'] 
* Loop 23: 2_loop(A,B,C,D,E,F)->  2_loop(A',B,C',D',E,F)
                  [B>=C+1,D'>=A+1,E>=0,D>=0,C>=0,A>=2,A+1=A'+D',C+1=C'] 
* Loop 24: 2_loop(A,B,C,D,E,F)->  2_loop(A',B,C',D',E,F)
                  [B>=C+1,D'>=A+1,E>=0,D>=0,C>=0,A>=1,A+1=A'+D',C+1=C'] 
* Loop 25: 2_loop(A,B,C,D,E,F)->  2_loop(A',B,C',D',E,F)
                  [B>=C+1,D'>=A+1,E>=0,D>=0,C>=0,A>=1,A+1=A'+D',C+1=C'] 
* Loop 26: 2_loop(A,B,C,D,E,F)->  2_loop(A',B,C',D',E,F)
                  [B>=C+1,D'>=A+1,D'>=0,E>=0,D>=0,C>=0,0>=A,A+1=A'+D',C+1=C'] 
* Loop 27: 2_loop(A,B,C,D,E,F)->  2_loop(A,B,C',D',E',F')
                  [B>=C+1,E'>=1,E>=0,D>=0,C>=0,A>=2,C+1=C',D'=1] 
* Loop 28: 2_loop(A,B,C,D,E,F)->  2_loop(A,B,C',D',E',F')
                  [B>=C+1,E'>=1,E>=0,D>=0,C>=0,A>=1,C+1=C',D'=1] 
* Loop 29: 2_loop(A,B,C,D,E,F)->  2_loop(A,B,C',D',E',F')
                  [B>=C+1,E'>=1,E>=0,D>=0,C>=0,A>=1,C+1=C',D'=1] 
* Loop 30: 2_loop(A,B,C,D,E,F)->  2_loop(A',B,C',D',E',F')
                  [B>=C+1,E'>=0,E>=0,D>=0,C>=0,A>=2,C+1=C',A+1=A',D'=0] 
* Loop 31: 2_loop(A,B,C,D,E,F)->  2_loop(A',B,C',D',E',F')
                  [B>=C+1,E'>=0,E>=0,D>=0,C>=0,A>=1,C+1=C',A+1=A',D'=0] 
* Loop 32: 2_loop(A,B,C,D,E,F)->  2_loop(A',B,C',D',E',F')
                  [B>=C+1,E'>=0,E>=0,D>=0,C>=0,A>=1,C+1=C',A+1=A',D'=0] 
* Loop 33: 2_loop(A,B,C,D,E,F)->  2_loop(A',B,C',D',E',F')
                  [B>=C+1,E'>=0,E>=0,D>=0,C>=0,C+1=C',D'=0,A'=1,A=0] 
* Loop 34: 2_loop(A,B,C,D,E,F) [C>=B,E>=0,D>=0,C>=0] 

### Ranking functions of CR 2_loop(A,B,C,D,E,F) 
* RF of phase [20,21,22,23,24,25,26,27,28,29,30,31,32,33]: [B-C]

#### Partial ranking functions of CR 2_loop(A,B,C,D,E,F) 
* Partial RF of phase [20,21,22,23,24,25,26,27,28,29,30,31,32,33]:
  - RF of loop [20:1,21:1,22:1]:
    A-1 depends on loops [26:1,30:1,31:1,32:1,33:1] 
  - RF of loop [20:1,21:1,22:1,23:1,24:1,25:1,26:1,27:1,28:1,29:1,30:1,31:1,32:1,33:1]:
    B-C
  - RF of loop [23:1]:
    A/2-1/2 depends on loops [26:1,30:1,31:1,32:1,33:1] 
  - RF of loop [24:1,25:1]:
    A depends on loops [26:1,30:1,31:1,32:1,33:1] 
  - RF of loop [33:1]:
    -A+1 depends on loops [20:1,21:1,22:1,23:1,24:1,25:1,26:1] 


### Resulting Chains:2_loop(A,B,C,D,E,F) 
* [[20,21,22,23,24,25,26,27,28,29,30,31,32,33],34]
* [34]


### Specialization of cost equations amor/atva/Sas12_sas12(II)V/2 
* CE 2 is refined into CE [36,37] 


#### Refined cost equations amor/atva/Sas12_sas12(II)V/2 
* CE 36: amor/atva/Sas12_sas12(II)V(A,B) = 3+ 2_loop(A,B,C,D,E,F):[[20,21,22,23,24,25,26,27,28,29,30,31,32,33],34]
     [B>=1,F=0,E=0,D=0,C=0] 
* CE 37: amor/atva/Sas12_sas12(II)V(A,B) = 3+ 2_loop(A,B,C,D,E,F):[34]
     [0>=B,F=0,E=0,D=0,C=0] 

### Cost equations --> "Loop" of amor/atva/Sas12_sas12(II)V/2 
* CEs [36] --> Loop 35 
* CEs [37] --> Loop 36 

#### Loops of amor/atva/Sas12_sas12(II)V/2 
* Loop 35: amor/atva/Sas12_sas12(II)V(A,B) [B>=1] 
* Loop 36: amor/atva/Sas12_sas12(II)V(A,B) [0>=B] 

### Ranking functions of CR amor/atva/Sas12_sas12(II)V(A,B) 

#### Partial ranking functions of CR amor/atva/Sas12_sas12(II)V(A,B) 


### Resulting Chains:amor/atva/Sas12_sas12(II)V(A,B) 
* [36]
* [35]


Computing Bounds
=====================================

#### Cost of loops [12] 

 * loop 12:15_loop(A,B) -> [15_loop(A',B')] 
5
#### Cost of phase [12]:15_loop(A,B) -> [15_loop(A',B')] 
5*it(12)+0
  Such that:it(12) =< A-B
it(12) =< A-B-A'+B'
it(12) >= A-B-A'+B'

#### Cost of chains of 15_loop(A,B):
* Chain [[12],13]: 5*it(12)+3
  Such that:it(12) =< A-B
it(12) >= A-B

  with precondition: [B>=0,A>=B+1] 

* Chain [13]: 3
  with precondition: [B=A,B>=0] 


#### Cost of loops [14] 

 * loop 14:13_loop(A,B,C) -> [13_loop(A',B',C')] 
5*s(2)+10
  Such that:s(2) =< B'-1
s(2) >= B'-1

#### Cost of phase [14]:13_loop(A,B,C) -> [13_loop(A',B',C')] 
10*it(14)+5*s(3)+0
  Such that:aux(4) =< A-1
it(14) =< A-B
it(14) =< A-B-A'+B'
aux(3) =< -B
s(3) =< it(14)*aux(4)
aux(1) =< it(14)
it(14) >= A-B-A'+B'
aux(2) >= B
aux(1) >= it(14)
s(3) >= aux(1)*aux(2)+aux(1)*aux(1)* (1/2)- (aux(3)*aux(1)+aux(1)* (1/2))

#### Cost of chains of 13_loop(A,B,C):
* Chain [16]: 3
  with precondition: [B=A,B>=0] 

* Chain [15,[14],16]: 10*it(14)+5*s(3)+13
  Such that:aux(5) =< A-1
it(14) =< aux(5)
s(3) =< it(14)*aux(5)
aux(1) =< it(14)
aux(2) >= 1
it(14) >= A-1
aux(1) >= it(14)
s(3) >= aux(1)*aux(2)+aux(1)*aux(1)* (1/2)-aux(1)* (1/2)

  with precondition: [B=0,A>=2] 

* Chain [15,16]: 13
  with precondition: [A=1,B=0] 


#### Cost of loops [17] 

 * loop 17:6_loop(A,B,C) -> [6_loop(A',B',C')] 
10
#### Cost of phase [17]:6_loop(A,B,C) -> [6_loop(A',B',C')] 
10*it(17)+0
  Such that:it(17) =< A-C
it(17) =< A-C-A'+C'
it(17) >= A-C-A'+C'

#### Cost of phase [17]:6_loop(A,B,C) -> [6_loop(A',B',C')] 
10*it(17)+0
  Such that:it(17) =< A-C
it(17) =< A-C-A'+C'
it(17) >= A-C-A'+C'

#### Cost of chains of 6_loop(A,B,C):
* Chain [[17],19]: 10*it(17)+3
  Such that:it(17) =< A-C
it(17) >= A-C

  with precondition: [B>=0,C>=0,A>=C+1] 

* Chain [[17],18]: 10*it(17)+8
  Such that:it(17) =< A-C-1
it(17) >= 1

  with precondition: [B>=0,C>=0,A>=C+2] 

* Chain [19]: 3
  with precondition: [B>=0,C>=0,C>=A] 

* Chain [18]: 8
  with precondition: [B>=0,C>=0,A>=C+1] 


#### Cost of loops [20,21,22,23,24,25,26,27,28,29,30,31,32,33] 

 * loop 20:2_loop(A,B,C,D,E,F) -> [2_loop(A',B',C',D',E',F')] 
10*s(11)+5*s(12)+40
  Such that:s(9) =< D'-1
s(11) =< s(9)
s(12) =< s(11)*s(9)
s(13) =< s(11)
s(10) >= 1
s(11) >= D'-1
s(13) >= s(11)
s(12) >= s(13)*s(10)+s(13)*s(13)* (1/2)-s(13)* (1/2)

 * loop 21:2_loop(A,B,C,D,E,F) -> [2_loop(A',B',C',D',E',F')] 
10*s(20)+10*s(22)+5*s(24)+40
  Such that:s(20) =< A-1
s(21) =< D'-1
s(22) =< s(21)
s(24) =< s(22)*s(21)
s(25) =< s(22)
s(22) >= D'-1
s(23) >= 1
s(20) >= s(23)
s(23) >= s(23)
s(25) >= s(22)
s(24) >= s(25)*s(23)+s(25)*s(25)* (1/2)-s(25)* (1/2)

 * loop 22:2_loop(A,B,C,D,E,F) -> [2_loop(A',B',C',D',E',F')] 
10*s(32)+10*s(35)+5*s(36)+35
  Such that:s(32) =< A
s(33) =< D'-1
s(35) =< s(33)
s(36) =< s(35)*s(33)
s(37) =< s(35)
s(34) >= 1
s(32) >= A'+D'-1
s(35) >= D'-1
s(37) >= s(35)
s(36) >= s(37)*s(34)+s(37)*s(37)* (1/2)-s(37)* (1/2)

 * loop 23:2_loop(A,B,C,D,E,F) -> [2_loop(A',B',C',D',E',F')] 
10*s(39)+23
  Such that:s(39) =< A-1
s(39) >= 1

 * loop 24:2_loop(A,B,C,D,E,F) -> [2_loop(A',B',C',D',E',F')] 
23
 * loop 25:2_loop(A,B,C,D,E,F) -> [2_loop(A',B',C',D',E',F')] 
10*s(41)+18
  Such that:s(41) =< A
s(41) >= A

 * loop 26:2_loop(A,B,C,D,E,F) -> [2_loop(A',B',C',D',E',F')] 
18
 * loop 27:2_loop(A,B,C,D,E,F) -> [2_loop(A',B',C',D',E',F')] 
10*s(43)+40
  Such that:s(43) =< A-1
s(43) >= 1

 * loop 28:2_loop(A,B,C,D,E,F) -> [2_loop(A',B',C',D',E',F')] 
40
 * loop 29:2_loop(A,B,C,D,E,F) -> [2_loop(A',B',C',D',E',F')] 
10*s(45)+35
  Such that:s(45) =< A
s(45) >= A

 * loop 30:2_loop(A,B,C,D,E,F) -> [2_loop(A',B',C',D',E',F')] 
10*s(47)+30
  Such that:s(47) =< A-1
s(47) >= 1

 * loop 31:2_loop(A,B,C,D,E,F) -> [2_loop(A',B',C',D',E',F')] 
30
 * loop 32:2_loop(A,B,C,D,E,F) -> [2_loop(A',B',C',D',E',F')] 
10*s(49)+25
  Such that:s(49) =< A
s(49) >= A

 * loop 33:2_loop(A,B,C,D,E,F) -> [2_loop(A',B',C',D',E',F')] 
25
#### Cost of phase [20,21,22,23,24,25,26,27,28,29,30,31,32,33]:2_loop(A,B,C,D,E,F) -> [2_loop(A',B',C',D',E',F')] 
40*it(20)+40*it(21)+35*it(22)+23*it(23)+23*it(24)+18*it(25)+18*it(26)+40*it(27)+40*it(28)+35*it(29)+30*it(30)+30*it(31)+25*it(32)+25*it(33)+10*s(50)+5*s(51)+10*s(54)+10*s(55)+5*s(56)+10*s(60)+10*s(61)+5*s(62)+10*s(65)+10*s(66)+10*s(67)+10*s(68)+10*s(69)+10*s(70)+0
  Such that:s(9) =< A+B-C-2
aux(36) =< A+C-1
aux(37) =< A+C-A'-C'
it(20)+it(21)+it(22)+it(23)+it(24)+it(25)+it(26)+it(27)+it(28)+it(29)+it(30)+it(31)+it(32)+it(33) =< B-C
it(20)+it(21)+it(22)+it(23)+it(24)+it(25)+it(26)+it(27)+it(28)+it(29)+it(30)+it(31)+it(32)+it(33) =< B-C-B'+C'
aux(113) =< A-1
aux(114) =< A
aux(115) =< A-A'
aux(29) =< s(9)+1
aux(12) =< s(9)
s(70) =< it(32)*aux(29)
s(69) =< it(30)*aux(12)
s(68) =< it(29)*aux(29)
s(67) =< it(27)*aux(12)
it(20)+it(21)+it(23)+it(24)+it(25) =< it(33)+it(32)+it(31)+it(30)+it(26)+aux(115)
it(20)+it(21)+it(23)+it(24)+it(25) =< it(33)+it(32)+it(31)+it(30)+it(26)+aux(113)
it(20)+it(21)+it(23)+it(24)+it(25) =< it(33)+it(32)+it(31)+it(30)+it(26)+aux(115)
it(20)+it(21)+it(23)+it(24)+it(25) =< it(33)+it(32)+it(31)+it(30)+it(26)+aux(113)
it(20)+it(22)+it(23)+it(24)+it(25) =< it(33)+it(32)+it(31)+it(30)+it(26)+aux(115)
it(20)+it(22)+it(23)+it(24)+it(25) =< it(33)+it(32)+it(31)+it(30)+it(26)+aux(113)
it(20)+it(22)+it(23)+it(24)+it(25) =< it(33)+it(32)+it(31)+it(30)+it(26)+aux(115)
it(20)+it(22)+it(23)+it(24)+it(25) =< it(33)+it(32)+it(31)+it(30)+it(26)+aux(113)
it(21)+it(22)+it(23)+it(24)+it(25) =< it(33)+it(32)+it(31)+it(30)+it(26)+aux(115)
it(21)+it(22)+it(23)+it(24)+it(25) =< it(33)+it(32)+it(31)+it(30)+it(26)+aux(113)
it(21)+it(22)+it(23)+it(24)+it(25) =< it(33)+it(32)+it(31)+it(30)+it(26)+aux(115)
it(21)+it(22)+it(23)+it(24)+it(25) =< it(33)+it(32)+it(31)+it(30)+it(26)+aux(113)
it(20)+it(21)+it(23)+it(24)+it(25) =< it(33)+it(32)+it(31)+it(30)+it(26)+aux(115)
it(20)+it(21)+it(23)+it(24)+it(25) =< it(33)+it(32)+it(31)+it(30)+it(26)+aux(113)
it(20)+it(22)+it(23)+it(24)+it(25) =< it(33)+it(32)+it(31)+it(30)+it(26)+aux(115)
it(20)+it(22)+it(23)+it(24)+it(25) =< it(33)+it(32)+it(31)+it(30)+it(26)+aux(113)
it(21)+it(22)+it(23)+it(24)+it(25) =< it(33)+it(32)+it(31)+it(30)+it(26)+aux(115)
it(21)+it(22)+it(23)+it(24)+it(25) =< it(33)+it(32)+it(31)+it(30)+it(26)+aux(113)
it(20)+it(21)+it(23)+it(24)+it(25) =< it(33)+it(32)+it(31)+it(30)+it(26)+aux(115)
it(20)+it(21)+it(23)+it(24)+it(25) =< it(33)+it(32)+it(31)+it(30)+it(26)+aux(113)
it(20)+it(22)+it(23)+it(24)+it(25) =< it(33)+it(32)+it(31)+it(30)+it(26)+aux(115)
it(20)+it(22)+it(23)+it(24)+it(25) =< it(33)+it(32)+it(31)+it(30)+it(26)+aux(113)
it(21)+it(22)+it(23)+it(24)+it(25) =< it(33)+it(32)+it(31)+it(30)+it(26)+aux(115)
it(21)+it(22)+it(23)+it(24)+it(25) =< it(33)+it(32)+it(31)+it(30)+it(26)+aux(113)
it(24)+s(66) =< it(33)+it(32)+it(31)+it(30)+it(26)+aux(115)
it(24)+s(66) =< it(33)+it(32)+it(31)+it(30)+it(26)+aux(114)
s(65) =< it(33)*2+it(32)*2+it(31)*2+it(30)*2+it(29)+it(28)+it(27)+it(26)*2+aux(37)
s(65) =< it(33)*2+it(32)*2+it(31)*2+it(30)*2+it(29)+it(28)+it(27)+it(26)*2+aux(36)
it(20)+it(21)+it(23)+it(24)+it(25)+s(64) =< it(33)+it(32)+it(31)+it(30)+it(26)+aux(115)
it(20)+it(21)+it(23)+it(24)+it(25)+s(64) =< it(33)+it(32)+it(31)+it(30)+it(26)+aux(113)
it(20)+it(22)+it(23)+it(24)+it(25)+s(58) =< it(33)+it(32)+it(31)+it(30)+it(26)+aux(115)
it(20)+it(22)+it(23)+it(24)+it(25)+s(58) =< it(33)+it(32)+it(31)+it(30)+it(26)+aux(113)
it(21)+it(22)+it(23)+it(24)+it(25)+s(53) =< it(33)+it(32)+it(31)+it(30)+it(26)+aux(115)
it(21)+it(22)+it(23)+it(24)+it(25)+s(53) =< it(33)+it(32)+it(31)+it(30)+it(26)+aux(113)
s(66) =< it(25)*aux(29)
s(65) =< it(23)*aux(12)
s(64) =< it(22)*aux(12)
s(60) =< it(22)*aux(29)
s(58) =< it(21)*aux(12)
s(54) =< it(21)*aux(12)
s(53) =< it(20)*aux(12)
s(61) =< s(64)
s(62) =< s(61)*aux(12)
s(63) =< s(61)
s(55) =< s(58)
s(56) =< s(55)*aux(12)
s(57) =< s(55)
s(50) =< s(53)
s(51) =< s(50)*s(9)
s(52) =< s(50)
aux(116) >= 1
aux(118) >= B-C-B'+C'
aux(119) >= -C+C'
aux(116) >= aux(116)
s(11) >= aux(116)
s(22) >= aux(116)
s(23) >= aux(116)
aux(13)+it(20)+it(22)+it(23)+it(24)+it(25)+it(26)+it(27)+it(28)+it(29)+it(30)+it(31)+it(32)+it(33) >= aux(118)
aux(33)+it(20)+it(21)+it(22)+it(24)+it(25)+it(26)+it(27)+it(28)+it(29)+it(30)+it(31)+it(32)+it(33) >= aux(118)
aux(47)+it(20)+it(21)+it(22)+it(23)+it(24)+it(25)+it(26)+it(28)+it(29)+it(30)+it(31)+it(32)+it(33) >= aux(118)
aux(51)+it(20)+it(21)+it(22)+it(23)+it(24)+it(25)+it(26)+it(27)+it(28)+it(29)+it(31)+it(32)+it(33) >= aux(118)
it(20)+it(21)+it(22)+it(23)+it(24)+it(25)+it(26)+it(27)+it(28)+it(29)+it(30)+it(31)+it(32)+it(33) >= aux(118)
it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it(31)+it(32)+it(33)+s(66) >= aux(119)
it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(30)+it(31)+it(32)+it(33)+s(66)+s(68) >= aux(119)
s(69) >= aux(51)
s(67) >= aux(47)
s(65) >= aux(33)
s(61) >= it(22)*aux(116)
s(55) >= it(21)*aux(116)
aux(13) >= aux(13)
s(50) >= it(20)*aux(116)
s(63) >= s(61)
s(25) >= s(22)
s(62) >= s(63)*aux(116)+s(63)*s(25)* (1/2)-s(63)* (1/2)
s(54) >= aux(13)
s(23) >= s(23)
s(57) >= s(55)
s(56) >= s(57)*s(23)+s(57)*s(25)* (1/2)-s(57)* (1/2)
s(52) >= s(50)
s(13) >= s(11)
s(51) >= s(52)*aux(116)+s(52)*s(13)* (1/2)-s(52)* (1/2)

#### Cost of chains of 2_loop(A,B,C,D,E,F):
* Chain [[20,21,22,23,24,25,26,27,28,29,30,31,32,33],34]: 40*it(20)+40*it(21)+35*it(22)+23*it(23)+23*it(24)+18*it(25)+18*it(26)+40*it(27)+40*it(28)+35*it(29)+30*it(30)+30*it(31)+25*it(32)+25*it(33)+10*s(50)+5*s(51)+10*s(54)+10*s(55)+5*s(56)+10*s(60)+10*s(61)+5*s(62)+10*s(65)+10*s(66)+10*s(67)+10*s(68)+10*s(69)+10*s(70)+3
  Such that:it(33)+it(32)+it(31)+it(30)+it(29)+it(28)+it(27)+it(26)+it(25)+it(24)+it(23)+it(22)+it(21)+it(20) =< B-C
aux(116) >= 1
aux(120) >= B-C
aux(120) >= aux(120)
aux(116) >= aux(116)
aux(13)+it(20)+it(22)+it(23)+it(24)+it(25)+it(26)+it(27)+it(28)+it(29)+it(30)+it(31)+it(32)+it(33) >= aux(120)
aux(33)+it(20)+it(21)+it(22)+it(24)+it(25)+it(26)+it(27)+it(28)+it(29)+it(30)+it(31)+it(32)+it(33) >= aux(120)
aux(47)+it(20)+it(21)+it(22)+it(23)+it(24)+it(25)+it(26)+it(28)+it(29)+it(30)+it(31)+it(32)+it(33) >= aux(120)
aux(51)+it(20)+it(21)+it(22)+it(23)+it(24)+it(25)+it(26)+it(27)+it(28)+it(29)+it(31)+it(32)+it(33) >= aux(120)
it(20)+it(21)+it(22)+it(23)+it(24)+it(25)+it(26)+it(27)+it(28)+it(29)+it(30)+it(31)+it(32)+it(33) >= aux(120)
it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(29)+it(30)+it(31)+it(32)+it(33)+s(66) >= aux(120)
it(20)+it(21)+it(22)+it(23)+it(24)+it(26)+it(27)+it(28)+it(30)+it(31)+it(32)+it(33)+s(66)+s(68) >= aux(120)
s(69) >= aux(51)
s(67) >= aux(47)
s(65) >= aux(33)
s(61) >= it(22)*aux(116)
s(55) >= it(21)*aux(116)
aux(13) >= aux(13)
s(50) >= it(20)*aux(116)
s(54) >= aux(13)

  with precondition: [C>=0,D>=0,E>=0,B>=C+1] 

* Chain [34]: 3
  with precondition: [C>=0,D>=0,E>=0,C>=B] 


#### Cost of chains of amor/atva/Sas12_sas12(II)V(A,B):
* Chain [36]: 6
  with precondition: [0>=B] 

* Chain [35]: 25*s(71)+25*s(72)+30*s(73)+30*s(74)+35*s(75)+40*s(76)+40*s(77)+18*s(78)+18*s(79)+23*s(80)+23*s(81)+35*s(82)+40*s(83)+40*s(84)+10*s(91)+10*s(92)+10*s(93)+10*s(94)+10*s(95)+10*s(96)+10*s(97)+10*s(98)+10*s(99)+35*s(100)+6
  Such that:s(84)+s(83)+s(82)+s(81)+s(80)+s(79)+s(78)+s(77)+s(76)+s(75)+s(74)+s(73)+s(72)+s(71) =< B
s(85) >= 1
s(86) >= B
s(86) >= s(86)
s(85) >= s(85)
s(71)+s(72)+s(73)+s(74)+s(75)+s(76)+s(77)+s(78)+s(79)+s(80)+s(81)+s(82)+s(84)+s(87) >= s(86)
s(71)+s(72)+s(73)+s(74)+s(75)+s(76)+s(77)+s(78)+s(79)+s(80)+s(82)+s(83)+s(84)+s(88) >= s(86)
s(71)+s(72)+s(73)+s(74)+s(75)+s(76)+s(78)+s(79)+s(80)+s(81)+s(82)+s(83)+s(84)+s(89) >= s(86)
s(71)+s(72)+s(73)+s(75)+s(76)+s(77)+s(78)+s(79)+s(80)+s(81)+s(82)+s(83)+s(84)+s(90) >= s(86)
s(71)+s(72)+s(73)+s(74)+s(75)+s(76)+s(77)+s(78)+s(79)+s(80)+s(81)+s(82)+s(83)+s(84) >= s(86)
s(71)+s(72)+s(73)+s(74)+s(75)+s(76)+s(77)+s(78)+s(80)+s(81)+s(82)+s(83)+s(84)+s(91) >= s(86)
s(71)+s(72)+s(73)+s(74)+s(76)+s(77)+s(78)+s(80)+s(81)+s(82)+s(83)+s(84)+s(91)+s(92) >= s(86)
s(93) >= s(90)
s(94) >= s(89)
s(95) >= s(88)
s(96) >= s(82)*s(85)
s(97) >= s(83)*s(85)
s(87) >= s(87)
s(98) >= s(84)*s(85)
s(99) >= s(87)

  with precondition: [B>=1] 


Closed-form bounds of amor/atva/Sas12_sas12(II)V(A,B): 
-------------------------------------
* Chain [36] with precondition: [0>=B] 
    - Lower bound: 6 
    - Complexity: constant
 * Chain [35] with precondition: [B>=1] 
    - Lower bound: 10*B+6 
    - Complexity: n
 
### Partitioned lower bound of amor/atva/Sas12_sas12(II)V(A,B): 
* 6 
 if [0>=B]
* 10*B+6 
 if [B>=1]
Possible lower bounds : [6,10*B+6]
Maximum lower bound complexity: n

Time statistics: 
-------------------------------------
* Partial evaluation computed in 30 ms.
* Invariants computed in 342 ms.
   - Backward Invariants 112 ms.
   - Transitive Invariants 95 ms.
* Refinement performed in 402 ms.
* Termination proved in 160 ms.
* Upper bounds computed in 1873 ms.
   - Equation cost structures 161 ms.
   - Phase cost structures 1684 ms.
   - Chain cost structures 104 ms.
   - Solving cost expressions 21 ms.
* Total analysis performed in 2885 ms.


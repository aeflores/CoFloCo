
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [12_loop/7]
1. recursive : [15_loop/4]
2. non_recursive : [amor/atva/MergeExp_mergePair([CIII)V/4]
3. recursive : [2_loop/3]
4. non_recursive : [amor/atva/MergeExp_mergexp([C)V/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into 12_loop/7
1. SCC is partially evaluated into 15_loop/4
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into 2_loop/3
4. SCC is partially evaluated into amor/atva/MergeExp_mergexp([C)V/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations 12_loop/7 
* CE 10 is refined into CE [13] 
* CE 6 is refined into CE [14] 
* CE 9 is refined into CE [15] 
* CE 7 is refined into CE [16] 
* CE 8 is refined into CE [17] 


#### Refined cost equations 12_loop/7 
* CE 13: 12_loop(A,B,C,D,E,C,F) = 4
     [2*A>=C+2,F>=C,F>=D,C>=2,D>=0,C+2*F=2*D+2*E,C=2*B] 
* CE 14: 12_loop(A,B,C,D,E,C,F) = 26+ 12_loop(A,G,C,H,I,C,J)
     [C+2*F>=2*E,E>=F+1,2*E>=C,2*A>=C+2,C>=E+1,C+2*F=2*E+2*H,C+2*F=2*D+2*E,F+1=J,E+1=I,C=2*G,C=2*B] 
* CE 15: 12_loop(A,B,C,D,E,C,F) = 17+ 12_loop(A,G,C,D,H,C,I)
     [C>=F+1,2*D>=C,2*A>=C+2,F>=D,C+2*F+2=2*D+2*H,C+2*F=2*D+2*E,F+1=I,C=2*G,C=2*B] 
* CE 16: 12_loop(A,B,C,D,E,C,F) = 27+ 12_loop(A,G,C,H,E,C,I)
     [C+2*F>=2*E,E>=F+1,2*E>=C,2*A>=C+2,C>=E+1,C+2*F+2=2*E+2*H,C+2*F=2*D+2*E,F+1=I,C=2*G,C=2*B] 
* CE 17: 12_loop(A,B,C,D,E,C,F) = 20+ 12_loop(A,G,C,H,I,C,J)
     [2*F>=2*D+C,C>=F+1,2*A>=C+2,D>=0,C+2*F=2*D+2*I,C+2*F=2*D+2*E,F+1=J,D+1=H,C=2*G,C=2*B] 

### Cost equations --> "Loop" of 12_loop/7 
* CEs [16] --> Loop 12 
* CEs [14] --> Loop 13 
* CEs [15] --> Loop 14 
* CEs [17] --> Loop 15 
* CEs [13] --> Loop 16 

#### Loops of 12_loop/7 
* Loop 12: 12_loop(A,B,C,D,E,C,F)->  12_loop(A,A',C,B',E,C,C')
                  [C+2*F>=2*E,E>=F+1,C>=E+1,2*E>=C,2*A>=C+2,C+2*F+2=2*E+2*B',C+2*F=2*D+2*E,F+1=C',C=2*A',C=2*B] 
* Loop 13: 12_loop(A,B,C,D,E,C,F)->  12_loop(A,A',C,B',C',C,D')
                  [C+2*F>=2*E,E>=F+1,C>=E+1,2*E>=C,2*A>=C+2,C+2*F=2*E+2*B',C+2*F=2*D+2*E,F+1=D',E+1=C',C=2*A',C=2*B] 
* Loop 14: 12_loop(A,B,C,D,E,C,F)->  12_loop(A,A',C,D,B',C,C')
                  [C>=F+1,F>=D,2*D>=C,2*A>=C+2,C+2*F+2=2*D+2*B',C+2*F=2*D+2*E,F+1=C',C=2*A',C=2*B] 
* Loop 15: 12_loop(A,B,C,D,E,C,F)->  12_loop(A,A',C,B',C',C,D')
                  [2*F>=2*D+C,C>=F+1,2*A>=C+2,D>=0,C+2*F=2*D+2*C',C+2*F=2*D+2*E,F+1=D',D+1=B',C=2*A',C=2*B] 
* Loop 16: 12_loop(A,B,C,D,E,C,F) [F>=D,2*A>=C+2,F>=C,D>=0,C>=2,C+2*F=2*D+2*E,C=2*B] 

### Ranking functions of CR 12_loop(A,B,C,D,E,F,G) 
* RF of phase [12,13]: [2*A-G-3,3*A-D-E-4,2*B-G-1,3*B-D-E-1,C-G-1,3/2*C-D-E-3/2,-D-E+3/2*F-3/2,2*D+2*E-3*G-1,F-G-1]
* RF of phase [14]: [2*A-E-2,2*A-G-2,3*A-D-E-3,2*B-E,2*B-G,3*B-D-E,C-E,C-G,3/2*C-D-E-1/2,-D-E+3/2*F-1/2,2*D-E,2*D+2*E-3*G,2*D-G,-E+F,F-G]
* RF of phase [15]: [A-D-1,2*A-G-2,3*A-D-E-3,B-D,2*B-G,3*B-D-E,C-G,C/2-D-1/2,3/2*C-D-E-1/2,-2*D+G,-D-E+3/2*F-1/2,-D+E/2-1/2,-D+F/2-1/2,2*D+2*E-3*G,E-G,F-G]

#### Partial ranking functions of CR 12_loop(A,B,C,D,E,F,G) 
* Partial RF of phase [12,13]:
  - RF of loop [12:1]:
    A-D-1
    B-D
    C/2-D-1/2
    -D+E depends on loops [13:1] 
    -D+F/2-1/2
    E-G
  - RF of loop [12:1,13:1]:
    2*A-G-3
    2*B-G-1
    C-G-1
    F-G-1
  - RF of loop [13:1]:
    A+D-G-1
    2*A-E-2
    B+D-G
    2*B-E
    C-E
    C/2+D-G-1/2
    D+F/2-G-1/2
    2*D+E-2*G
    -E+F
* Partial RF of phase [14]:
  - RF of loop [14:1]:
    2*A-E-2
    2*A-G-2
    3*A-D-E-3
    2*B-E
    2*B-G
    3*B-D-E
    C-E
    C-G
    3/2*C-D-E-1/2
    -D-E+3/2*F-1/2
    2*D-E
    2*D+2*E-3*G
    2*D-G
    -E+F
    F-G
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    A-D-1
    2*A-G-2
    3*A-D-E-3
    B-D
    2*B-G
    3*B-D-E
    C-G
    C/2-D-1/2
    3/2*C-D-E-1/2
    -2*D+G
    -D-E+3/2*F-1/2
    -D+E/2-1/2
    -D+F/2-1/2
    2*D+2*E-3*G
    E-G
    F-G


### Resulting Chains:12_loop(A,B,C,D,E,F,G) 
* [[12,13],[15],16]
* [[12,13],[14],16]


### Specialization of cost equations 15_loop/4 
* CE 12 is refined into CE [18] 
* CE 11 is refined into CE [19] 


#### Refined cost equations 15_loop/4 
* CE 18: 15_loop(A,B,C,D) = 4
     [2*A>=C+2,D>=C,C>=2,B=0] 
* CE 19: 15_loop(A,B,C,D) = 14+ 15_loop(A,E,C,F)
     [C>=D+1,2*A>=C+2,D>=0,C>=2,D+1=F,E=0,B=0] 

### Cost equations --> "Loop" of 15_loop/4 
* CEs [19] --> Loop 17 
* CEs [18] --> Loop 18 

#### Loops of 15_loop/4 
* Loop 17: 15_loop(A,B,C,D)->  15_loop(A,B',C,D')
                  [C>=D+1,2*A>=C+2,D>=0,C>=2,D+1=D',B'=0,B=0] 
* Loop 18: 15_loop(A,B,C,D) [2*A>=C+2,D>=C,C>=2,B=0] 

### Ranking functions of CR 15_loop(A,B,C,D) 
* RF of phase [17]: [2*A-D-2,C-D]

#### Partial ranking functions of CR 15_loop(A,B,C,D) 
* Partial RF of phase [17]:
  - RF of loop [17:1]:
    2*A-D-2
    C-D


### Resulting Chains:15_loop(A,B,C,D) 
* [[17],18]


### Specialization of cost equations 2_loop/3 
* CE 4 is refined into CE [20] 
* CE 5 is discarded (unfeasible) 
* CE 3 is refined into CE [21,22] 


#### Refined cost equations 2_loop/3 
* CE 20: 2_loop(A,B,C) = 7
     [2*B>=C+2,B>=C,B>=A,B>=1,A>=0] 
* CE 21: 2_loop(A,B,C) = 36+ 12_loop(A,D,E,F,G,E,H):[[12,13],[15],16]+ 15_loop(A,I,E,J):[[17],18]+ 2_loop(A,E,E)
     [2*A>=E+2,E>=C+2,E>=2*C,E>=2,E=2*G,E=2*D,E=2*B,J=0,I=0,H=0,F=0] 
* CE 22: 2_loop(A,B,C) = 36+ 12_loop(A,D,E,F,G,E,H):[[12,13],[14],16]+ 15_loop(A,I,E,J):[[17],18]+ 2_loop(A,E,E)
     [2*A>=E+2,E>=C+2,E>=2*C,E>=2,E=2*G,E=2*D,E=2*B,J=0,I=0,H=0,F=0] 

### Cost equations --> "Loop" of 2_loop/3 
* CEs [22] --> Loop 19 
* CEs [21] --> Loop 20 
* CEs [20] --> Loop 21 

#### Loops of 2_loop/3 
* Loop 19: 2_loop(A,B,C)->  2_loop(A,A',A')
                  [2*A>=A'+2,A'>=C+2,A'>=2*C,A'>=2,A'=2*B] 
* Loop 20: 2_loop(A,B,C)->  2_loop(A,A',A')
                  [2*A>=A'+2,A'>=C+2,A'>=2*C,A'>=2,A'=2*B] 
* Loop 21: 2_loop(A,B,C) [2*B>=C+2,B>=C,B>=A,B>=1,A>=0] 

### Ranking functions of CR 2_loop(A,B,C) 
* RF of phase [19,20]: [A-C,2*A-2*B-1,2*A-2*C-1,2*A-C-3,4*A-2*C-7]

#### Partial ranking functions of CR 2_loop(A,B,C) 
* Partial RF of phase [19,20]:
  - RF of loop [19:1,20:1]:
    A-C
    2*A-2*B-1
    2*A-2*C-1
    2*A-C-3
    4*A-2*C-7


### Resulting Chains:2_loop(A,B,C) 
* [[19,20],21]
* [21]


### Specialization of cost equations amor/atva/MergeExp_mergexp([C)V/1 
* CE 2 is refined into CE [23,24] 


#### Refined cost equations amor/atva/MergeExp_mergexp([C)V/1 
* CE 23: amor/atva/MergeExp_mergexp([C)V(A) = 3+ 2_loop(A,B,C):[[19,20],21]
     [A>=2,C=0,B=1] 
* CE 24: amor/atva/MergeExp_mergexp([C)V(A) = 3+ 2_loop(A,B,C):[21]
     [A>=0,1>=A,C=0,B=1] 

### Cost equations --> "Loop" of amor/atva/MergeExp_mergexp([C)V/1 
* CEs [23] --> Loop 22 
* CEs [24] --> Loop 23 

#### Loops of amor/atva/MergeExp_mergexp([C)V/1 
* Loop 22: amor/atva/MergeExp_mergexp([C)V(A) [A>=2] 
* Loop 23: amor/atva/MergeExp_mergexp([C)V(A) [A>=0,1>=A] 

### Ranking functions of CR amor/atva/MergeExp_mergexp([C)V(A) 

#### Partial ranking functions of CR amor/atva/MergeExp_mergexp([C)V(A) 


### Resulting Chains:amor/atva/MergeExp_mergexp([C)V(A) 
* [23]
* [22]


Computing Bounds
=====================================

#### Cost of loops [15] 

 * loop 15:12_loop(A,B,C,D,E,F,G) -> [12_loop(A',B',C',D',E',F',G')] 
20
#### Cost of phase [15]:12_loop(A,B,C,D,E,F,G) -> [12_loop(A',B',C',D',E',F',G')] 
20*it(15)+0
  Such that:it(15) =< A-D-1
it(15) =< A-D-A'+D'
it(15) =< 2*A-G-2
it(15) =< 2*A-G-2*A'+G'
it(15) =< 3*A-D-E-3
it(15) =< 3*A-D-E-3*A'+D'+E'
it(15) =< B-D
it(15) =< B-D-B'+D'
it(15) =< 2*B-G
it(15) =< 2*B-G-2*B'+G'
it(15) =< 3*B-D-E
it(15) =< 3*B-D-E-3*B'+D'+E'
it(15) =< C-G
it(15) =< C-G-C'+G'
it(15) =< C/2-D-1/2
it(15) =< C/2-D-C'/2+D'
it(15) =< 3/2*C-D-E-1/2
it(15) =< 3/2*C-D-E-3/2*C'+D'+E'
it(15) =< -2*D+G
it(15) =< -2*D+G+2*D'-G'
it(15) =< -D-E+3/2*F-1/2
it(15) =< -D-E+3/2*F+D'+E'-3/2*F'
it(15) =< -D+E/2-1/2
it(15) =< -D+E/2+D'-E'/2
it(15) =< -D+F/2-1/2
it(15) =< -D+F/2+D'-F'/2
it(15) =< 2*D+2*E-3*G
it(15) =< 2*D+2*E-3*G-2*D'-2*E'+3*G'
it(15) =< E-G
it(15) =< E-G-E'+G'
it(15) =< F-G
it(15) =< F-G-F'+G'
it(15) >= A-D-A'+D'
it(15) >= 2*A-G-2*A'+G'
it(15) >= 3*A-D-E-3*A'+D'+E'
it(15) >= B-D-B'+D'
it(15) >= 2*B-G-2*B'+G'
it(15) >= 3*B-D-E-3*B'+D'+E'
it(15) >= C-G-C'+G'
it(15) >= C/2-D-C'/2+D'
it(15) >= 3/2*C-D-E-3/2*C'+D'+E'
it(15) >= -2*D+G+2*D'-G'
it(15) >= -D-E+3/2*F+D'+E'-3/2*F'
it(15) >= -D+E/2+D'-E'/2
it(15) >= -D+F/2+D'-F'/2
it(15) >= 2*D+2*E-3*G-2*D'-2*E'+3*G'
it(15) >= E-G-E'+G'
it(15) >= F-G-F'+G'

#### Cost of loops [12,13] 

 * loop 12:12_loop(A,B,C,D,E,F,G) -> [12_loop(A',B',C',D',E',F',G')] 
27
 * loop 13:12_loop(A,B,C,D,E,F,G) -> [12_loop(A',B',C',D',E',F',G')] 
26
#### Cost of phase [12,13]:12_loop(A,B,C,D,E,F,G) -> [12_loop(A',B',C',D',E',F',G')] 
27*it(12)+26*it(13)+0
  Such that:it(12) =< A-D-1
it(12) =< A-D-A'+D'
it(13) =< A+D-G-1
it(13) =< A+D-G-A'-D'+G'
it(13) =< 2*A-E-2
it(13) =< 2*A-E-2*A'+E'
it(12)+it(13) =< 2*A-G-3
it(12)+it(13) =< 2*A-G-2*A'+G'
it(12)+it(13) =< 3*A-D-E-4
it(12)+it(13) =< 3*A-D-E-3*A'+D'+E'
it(12) =< B-D
it(12) =< B-D-B'+D'
it(13) =< B+D-G
it(13) =< B+D-G-B'-D'+G'
it(13) =< 2*B-E
it(13) =< 2*B-E-2*B'+E'
it(12)+it(13) =< 2*B-G-1
it(12)+it(13) =< 2*B-G-2*B'+G'
it(12)+it(13) =< 3*B-D-E-1
it(12)+it(13) =< 3*B-D-E-3*B'+D'+E'
it(13) =< C-E
it(13) =< C-E-C'+E'
it(12)+it(13) =< C-G-1
it(12)+it(13) =< C-G-C'+G'
it(12) =< C/2-D-1/2
it(12) =< C/2-D-C'/2+D'
it(13) =< C/2+D-G-1/2
it(13) =< C/2+D-G-C'/2-D'+G'
it(12)+it(13) =< 3/2*C-D-E-3/2
it(12)+it(13) =< 3/2*C-D-E-3/2*C'+D'+E'
it(12)+it(13) =< -D-E+3/2*F-3/2
it(12)+it(13) =< -D-E+3/2*F+D'+E'-3/2*F'
aux(3) =< -D+E
aux(4) =< -D+E+D'-E'
it(12) =< -D+F/2-1/2
it(12) =< -D+F/2+D'-F'/2
aux(2) =< D-E-D'+E'
it(13) =< D+F/2-G-1/2
it(13) =< D+F/2-G-D'-F'/2+G'
it(13) =< 2*D+E-2*G
it(13) =< 2*D+E-2*G-2*D'-E'+2*G'
it(12)+it(13) =< 2*D+2*E-3*G-1
it(12)+it(13) =< 2*D+2*E-3*G-2*D'-2*E'+3*G'
it(13) =< -E+F
it(13) =< -E+F+E'-F'
it(12) =< E-G
it(12) =< E-G-E'+G'
it(12)+it(13) =< F-G-1
it(12)+it(13) =< F-G-F'+G'
it(12) =< it(13)+aux(4)
it(12) =< it(13)+aux(3)
it(12) >= A-D-A'+D'
it(13) >= A+D-G-A'-D'+G'
it(13) >= 2*A-E-2*A'+E'
it(12)+it(13) >= 2*A-G-2*A'+G'
it(12) >= B-D-B'+D'
it(13) >= B+D-G-B'-D'+G'
it(13) >= 2*B-E-2*B'+E'
it(12)+it(13) >= 2*B-G-2*B'+G'
it(13) >= C-E-C'+E'
it(12)+it(13) >= C-G-C'+G'
it(12) >= C/2-D-C'/2+D'
it(13) >= C/2+D-G-C'/2-D'+G'
aux(1) >= -D+E+D'-E'
it(12) >= -D+F/2+D'-F'/2
it(13) >= D+F/2-G-D'-F'/2+G'
it(13) >= 2*D+E-2*G-2*D'-E'+2*G'
it(13) >= -E+F+E'-F'
it(12) >= E-G-E'+G'
it(12)+it(13) >= F-G-F'+G'
it(12) >= it(13)+aux(1)-aux(2)

#### Cost of loops [14] 

 * loop 14:12_loop(A,B,C,D,E,F,G) -> [12_loop(A',B',C',D',E',F',G')] 
17
#### Cost of phase [14]:12_loop(A,B,C,D,E,F,G) -> [12_loop(A',B',C',D',E',F',G')] 
17*it(14)+0
  Such that:it(14) =< 2*A-E-2
it(14) =< 2*A-E-2*A'+E'
it(14) =< 2*A-G-2
it(14) =< 2*A-G-2*A'+G'
it(14) =< 3*A-D-E-3
it(14) =< 3*A-D-E-3*A'+D'+E'
it(14) =< 2*B-E
it(14) =< 2*B-E-2*B'+E'
it(14) =< 2*B-G
it(14) =< 2*B-G-2*B'+G'
it(14) =< 3*B-D-E
it(14) =< 3*B-D-E-3*B'+D'+E'
it(14) =< C-E
it(14) =< C-E-C'+E'
it(14) =< C-G
it(14) =< C-G-C'+G'
it(14) =< 3/2*C-D-E-1/2
it(14) =< 3/2*C-D-E-3/2*C'+D'+E'
it(14) =< -D-E+3/2*F-1/2
it(14) =< -D-E+3/2*F+D'+E'-3/2*F'
it(14) =< 2*D-E
it(14) =< 2*D-E-2*D'+E'
it(14) =< 2*D+2*E-3*G
it(14) =< 2*D+2*E-3*G-2*D'-2*E'+3*G'
it(14) =< 2*D-G
it(14) =< 2*D-G-2*D'+G'
it(14) =< -E+F
it(14) =< -E+F+E'-F'
it(14) =< F-G
it(14) =< F-G-F'+G'
it(14) >= 2*A-E-2*A'+E'
it(14) >= 2*A-G-2*A'+G'
it(14) >= 3*A-D-E-3*A'+D'+E'
it(14) >= 2*B-E-2*B'+E'
it(14) >= 2*B-G-2*B'+G'
it(14) >= 3*B-D-E-3*B'+D'+E'
it(14) >= C-E-C'+E'
it(14) >= C-G-C'+G'
it(14) >= 3/2*C-D-E-3/2*C'+D'+E'
it(14) >= -D-E+3/2*F+D'+E'-3/2*F'
it(14) >= 2*D-E-2*D'+E'
it(14) >= 2*D+2*E-3*G-2*D'-2*E'+3*G'
it(14) >= 2*D-G-2*D'+G'
it(14) >= -E+F+E'-F'
it(14) >= F-G-F'+G'

#### Cost of phase [12,13]:12_loop(A,B,C,D,E,F,G) -> [12_loop(A',B',C',D',E',F',G')] 
27*it(12)+26*it(13)+0
  Such that:it(12) =< A-D-1
it(12) =< A-D-A'+D'
it(13) =< A+D-G-1
it(13) =< A+D-G-A'-D'+G'
it(13) =< 2*A-E-2
it(13) =< 2*A-E-2*A'+E'
it(12)+it(13) =< 2*A-G-3
it(12)+it(13) =< 2*A-G-2*A'+G'
it(12)+it(13) =< 3*A-D-E-4
it(12)+it(13) =< 3*A-D-E-3*A'+D'+E'
it(12) =< B-D
it(12) =< B-D-B'+D'
it(13) =< B+D-G
it(13) =< B+D-G-B'-D'+G'
it(13) =< 2*B-E
it(13) =< 2*B-E-2*B'+E'
it(12)+it(13) =< 2*B-G-1
it(12)+it(13) =< 2*B-G-2*B'+G'
it(12)+it(13) =< 3*B-D-E-1
it(12)+it(13) =< 3*B-D-E-3*B'+D'+E'
it(13) =< C-E
it(13) =< C-E-C'+E'
it(12)+it(13) =< C-G-1
it(12)+it(13) =< C-G-C'+G'
it(12) =< C/2-D-1/2
it(12) =< C/2-D-C'/2+D'
it(13) =< C/2+D-G-1/2
it(13) =< C/2+D-G-C'/2-D'+G'
it(12)+it(13) =< 3/2*C-D-E-3/2
it(12)+it(13) =< 3/2*C-D-E-3/2*C'+D'+E'
it(12)+it(13) =< -D-E+3/2*F-3/2
it(12)+it(13) =< -D-E+3/2*F+D'+E'-3/2*F'
aux(3) =< -D+E
aux(4) =< -D+E+D'-E'
it(12) =< -D+F/2-1/2
it(12) =< -D+F/2+D'-F'/2
aux(2) =< D-E-D'+E'
it(13) =< D+F/2-G-1/2
it(13) =< D+F/2-G-D'-F'/2+G'
it(13) =< 2*D+E-2*G
it(13) =< 2*D+E-2*G-2*D'-E'+2*G'
it(12)+it(13) =< 2*D+2*E-3*G-1
it(12)+it(13) =< 2*D+2*E-3*G-2*D'-2*E'+3*G'
it(13) =< -E+F
it(13) =< -E+F+E'-F'
it(12) =< E-G
it(12) =< E-G-E'+G'
it(12)+it(13) =< F-G-1
it(12)+it(13) =< F-G-F'+G'
it(12) =< it(13)+aux(4)
it(12) =< it(13)+aux(3)
it(12) >= A-D-A'+D'
it(13) >= A+D-G-A'-D'+G'
it(13) >= 2*A-E-2*A'+E'
it(12)+it(13) >= 2*A-G-2*A'+G'
it(12) >= B-D-B'+D'
it(13) >= B+D-G-B'-D'+G'
it(13) >= 2*B-E-2*B'+E'
it(12)+it(13) >= 2*B-G-2*B'+G'
it(13) >= C-E-C'+E'
it(12)+it(13) >= C-G-C'+G'
it(12) >= C/2-D-C'/2+D'
it(13) >= C/2+D-G-C'/2-D'+G'
aux(1) >= -D+E+D'-E'
it(12) >= -D+F/2+D'-F'/2
it(13) >= D+F/2-G-D'-F'/2+G'
it(13) >= 2*D+E-2*G-2*D'-E'+2*G'
it(13) >= -E+F+E'-F'
it(12) >= E-G-E'+G'
it(12)+it(13) >= F-G-F'+G'
it(12) >= it(13)+aux(1)-aux(2)

#### Cost of chains of 12_loop(A,B,C,D,E,F,G):
* Chain [[12,13],[15],16]: 27*it(12)+26*it(13)+20*it(15)+4
  Such that:aux(2) =< 2*B-E
aux(4) =< -2*D+G-1
it(13) =< -E+F-1/2
it(12)+it(15) =< E-G-1/2
aux(3) =< 2*E-F/2-G
it(12) =< it(13)+aux(4)
it(12) =< it(13)+aux(3)
it(15) >= 1
it(13) >= C-E
aux(1) >= -C/2-D+G
it(12)+it(15) >= E-G
it(12) >= it(13)+aux(1)-aux(2)

  with precondition: [2*B=C,2*B=F,D+E=B+G,A>=B+1,E>=B,2*B>=E+1,E>=G+1,B+G>=E] 

* Chain [[12,13],[14],16]: 27*it(12)+26*it(13)+17*it(14)+4
  Such that:aux(2) =< D-E+F/2-1
it(13)+it(14) =< -E+F-1/2
aux(4) =< E-G
it(12) =< E-G-1/2
aux(3) =< 2*E-F/2-G
it(12) =< it(13)+aux(4)
it(12) =< it(13)+aux(3)
it(14) >= 1
aux(1) >= -2*D+G+1
it(13)+it(14) >= 2*D+E-2*G
it(12) >= E-G
it(12) >= it(13)+aux(1)-aux(2)

  with precondition: [2*B=C,2*B=F,D+E=B+G,A>=B+1,E>=B,2*B>=E+1,E>=G+1,B+G>=E] 


#### Cost of loops [17] 

 * loop 17:15_loop(A,B,C,D) -> [15_loop(A',B',C',D')] 
14
#### Cost of phase [17]:15_loop(A,B,C,D) -> [15_loop(A',B',C',D')] 
14*it(17)+0
  Such that:it(17) =< 2*A-D-2
it(17) =< 2*A-D-2*A'+D'
it(17) =< C-D
it(17) =< C-D-C'+D'
it(17) >= 2*A-D-2*A'+D'
it(17) >= C-D-C'+D'

#### Cost of chains of 15_loop(A,B,C,D):
* Chain [[17],18]: 14*it(17)+4
  Such that:it(17) =< C-D
it(17) >= C-D

  with precondition: [B=0,C>=2,D>=0,2*A>=C+2,C>=D+1] 


#### Cost of loops [19,20] 

 * loop 19:2_loop(A,B,C) -> [2_loop(A',B',C')] 
26*s(14)+17*s(15)+27*s(16)+14*s(9)+44
  Such that:s(9) =< B'
s(10) =< B'/2
s(11) =< B'/2-1/2
s(14)+s(15) =< s(11)
s(16) =< s(11)
s(16) =< s(14)+s(10)
s(9) >= C'
s(12) >= 1
s(13) >= C'/2
s(15) >= s(12)
s(12) >= s(12)
s(14)+s(15) >= s(13)
s(16) >= s(13)
s(16) >= s(14)+s(12)

 * loop 20:2_loop(A,B,C) -> [2_loop(A',B',C')] 
26*s(32)+27*s(31)+20*s(28)+14*s(25)+44
  Such that:s(25) =< 2*B
s(26) =< B
s(27) =< B-1/2
s(28)+s(31) =< s(27)
s(32) =< s(27)
s(31) =< s(32)
s(31) =< s(32)+s(26)
s(28) >= 1
s(25) >= 2*B
s(29) >= -C'/2
s(30) >= B
s(32) >= s(30)
s(28)+s(31) >= s(30)
s(31) >= s(32)+s(29)-s(26)

#### Cost of phase [19,20]:2_loop(A,B,C) -> [2_loop(A',B',C')] 
44*it(19)+44*it(20)+26*s(33)+17*s(34)+27*s(35)+14*s(36)+26*s(41)+27*s(42)+20*s(43)+14*s(44)+0
  Such that:it(19)+it(20) =< A-C
it(19)+it(20) =< A-C-A'+C'
it(19)+it(20) =< 2*A-2*B-1
it(19)+it(20) =< 2*A-2*B-2*A'+2*B'
s(48) =< 2*A-B-5/2
it(19)+it(20) =< 2*A-2*C-1
it(19)+it(20) =< 2*A-2*C-2*A'+2*C'
it(19)+it(20) =< 2*A-C-3
it(19)+it(20) =< 2*A-C-2*A'+C'
it(20)+s(40) =< 3*A-C-11/2
it(20)+s(40) =< 3*A-C-3*A'+C'
it(19)+it(20) =< 4*A-2*C-7
it(19)+it(20) =< 4*A-2*C-4*A'+2*C'
aux(23) =< 2*A-B-2
aux(24) =< 2*A-B-2*A'+B'
aux(25) =< 6*A-2*C-10
aux(26) =< 6*A-2*C-6*A'+2*C'
aux(22) =< aux(23)
aux(22) =< aux(24)
s(48) =< aux(24)
aux(16)+it(20) =< aux(25)
it(20)+s(36) =< aux(25)
aux(16)+it(20) =< aux(26)
it(20)+s(36) =< aux(26)
s(44) =< aux(22)*2
s(38) =< aux(16)* (1/2)
s(42)+s(43) =< s(48)
s(41) =< s(48)
s(42) =< s(41)
s(42) =< s(41)+aux(22)
s(33)+s(34) =< s(40)
s(35) =< s(40)
s(35) =< s(33)+s(38)

#### Cost of chains of 2_loop(A,B,C):
* Chain [[19,20],21]: 44*it(19)+44*it(20)+26*s(33)+17*s(34)+27*s(35)+14*s(36)+26*s(41)+27*s(42)+20*s(43)+14*s(44)+7
  Such that:it(19) =< A-C
it(20)+it(19) =< 2*A-2*B-1
s(48) =< 2*A-B-5/2
s(40)+it(20) =< 3*A-C-11/2
aux(26) =< 4*A-2*C-4
aux(25) =< 6*A-2*C-10
aux(27) =< 2*A-B-2
s(48) =< aux(27)
aux(16)+it(20) =< aux(25)
it(20)+s(36) =< aux(25)
aux(16)+it(20) =< aux(26)
it(20)+s(36) =< aux(26)
s(44) =< aux(27)*2
s(38) =< aux(16)* (1/2)
s(42)+s(43) =< s(48)
s(41) =< s(48)
s(42) =< s(41)
s(42) =< s(41)+aux(27)
s(33)+s(34) =< s(40)
s(35) =< s(40)
s(35) =< s(33)+s(38)

  with precondition: [B>=1,A>=B+1,B>=C,2*B>=C+2] 

* Chain [21]: 7
  with precondition: [A>=0,B>=1,B>=A,B>=C,2*B>=C+2] 


#### Cost of chains of amor/atva/MergeExp_mergexp([C)V(A):
* Chain [23]: 10
  with precondition: [1>=A,A>=0] 

* Chain [22]: 44*s(49)+44*s(50)+14*s(57)+14*s(58)+27*s(60)+20*s(61)+26*s(62)+26*s(63)+17*s(64)+27*s(65)+10
  Such that:s(49) =< A
s(51) =< 2*A-7/2
s(52)+s(50) =< 3*A-11/2
s(53) =< 4*A-4
s(54) =< 6*A-10
aux(28) =< 2*A-3
s(49)+s(50) =< aux(28)
s(51) =< aux(28)
s(50)+s(56) =< s(54)
s(50)+s(57) =< s(54)
s(50)+s(56) =< s(53)
s(50)+s(57) =< s(53)
s(58) =< aux(28)*2
s(59) =< s(56)* (1/2)
s(60)+s(61) =< s(51)
s(62) =< s(51)
s(60) =< s(62)
s(60) =< s(62)+aux(28)
s(63)+s(64) =< s(52)
s(65) =< s(52)
s(65) =< s(63)+s(59)

  with precondition: [A>=2] 


Closed-form bounds of amor/atva/MergeExp_mergexp([C)V(A): 
-------------------------------------
* Chain [23] with precondition: [1>=A,A>=0] 
    - Lower bound: 10 
    - Complexity: constant
 * Chain [22] with precondition: [A>=2] 
    - Lower bound: 10 
    - Complexity: constant
 
### Partitioned lower bound of amor/atva/MergeExp_mergexp([C)V(A): 
* 10 
 if [A>=0]
Possible lower bounds : [10]
Maximum lower bound complexity: constant

Time statistics: 
-------------------------------------
* Partial evaluation computed in 44 ms.
* Invariants computed in 296 ms.
   - Backward Invariants 124 ms.
   - Transitive Invariants 70 ms.
* Refinement performed in 283 ms.
* Termination proved in 328 ms.
* Upper bounds computed in 1821 ms.
   - Equation cost structures 171 ms.
   - Phase cost structures 707 ms.
   - Chain cost structures 1070 ms.
   - Solving cost expressions 4 ms.
* Total analysis performed in 2931 ms.



Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [14_loop/2]
1. recursive : [amor/atva/MultipleRecursion_dacx(II)V/2]
2. non_recursive : [amor/atva/MultipleRecursion_dac(II)V/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into 14_loop/2
1. SCC is partially evaluated into amor/atva/MultipleRecursion_dacx(II)V/2
2. SCC is partially evaluated into amor/atva/MultipleRecursion_dac(II)V/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations 14_loop/2 
* CE 10 is refined into CE [11] 
* CE 9 is refined into CE [12] 


#### Refined cost equations 14_loop/2 
* CE 11: 14_loop(A,B) = 3
     [B>=A,A>=2] 
* CE 12: 14_loop(A,B) = 5+ 14_loop(A,C)
     [A>=B+1,B>=0,A>=2,B+1=C] 

### Cost equations --> "Loop" of 14_loop/2 
* CEs [12] --> Loop 10 
* CEs [11] --> Loop 11 

#### Loops of 14_loop/2 
* Loop 10: 14_loop(A,B)->  14_loop(A,B')
                  [A>=B+1,B>=0,A>=2,B+1=B'] 
* Loop 11: 14_loop(A,B) [B>=A,A>=2] 

### Ranking functions of CR 14_loop(A,B) 
* RF of phase [10]: [A-B]

#### Partial ranking functions of CR 14_loop(A,B) 
* Partial RF of phase [10]:
  - RF of loop [10:1]:
    A-B


### Resulting Chains:14_loop(A,B) 
* [[10],11]


### Specialization of cost equations amor/atva/MultipleRecursion_dacx(II)V/2 
* CE 8 is refined into CE [13] 
* CE 7 is refined into CE [14] 
* CE 6 is refined into CE [15] 
* CE 5 is refined into CE [16] 


#### Refined cost equations amor/atva/MultipleRecursion_dacx(II)V/2 
* CE 13: amor/atva/MultipleRecursion_dacx(II)V(A,B) = 34+ 14_loop(A,C):[[10],11]+ amor/atva/MultipleRecursion_dacx(II)V(D,E)+ amor/atva/MultipleRecursion_dacx(II)V(F,G)
     [A>=F+1,F>=1,B>=1,A=D+F,B=G+1,B=E+1,C=0] 
* CE 14: amor/atva/MultipleRecursion_dacx(II)V(A,B) = 22
     [A>=2,B=0] 
* CE 15: amor/atva/MultipleRecursion_dacx(II)V(A,B) = 15
     [B>=0,A>=1] 
* CE 16: amor/atva/MultipleRecursion_dacx(II)V(A,B) = 12
     [B>=0,A>=1] 

### Cost equations --> "Loop" of amor/atva/MultipleRecursion_dacx(II)V/2 
* CEs [16] --> Loop 12 
* CEs [15] --> Loop 13 
* CEs [14] --> Loop 14 
* CEs [13] --> Loop 15 

#### Loops of amor/atva/MultipleRecursion_dacx(II)V/2 
* Loop 12: amor/atva/MultipleRecursion_dacx(II)V(A,B) [B>=0,A>=1] 
* Loop 13: amor/atva/MultipleRecursion_dacx(II)V(A,B) [B>=0,A>=1] 
* Loop 14: amor/atva/MultipleRecursion_dacx(II)V(A,B) [A>=2,B=0] 
* Loop 15: amor/atva/MultipleRecursion_dacx(II)V(A,B)->  amor/atva/MultipleRecursion_dacx(II)V(A',B')  amor/atva/MultipleRecursion_dacx(II)V(A'2,B'2)
                  [A>=A'2+1,A'2>=1,B>=1,A=A'+A'2,B=B'2+1,B=B'+1] 

### Ranking functions of CR amor/atva/MultipleRecursion_dacx(II)V(A,B) 
* RF of phase [15]: [A-1,B]

#### Partial ranking functions of CR amor/atva/MultipleRecursion_dacx(II)V(A,B) 
* Partial RF of phase [15]:
  - RF of loop [15:1,15:2]:
    A-1
    B


### Resulting Chains:amor/atva/MultipleRecursion_dacx(II)V(A,B) 
* [13]
* [12]
* [multiple([15],[[14],[13],[12]])]


### Specialization of cost equations amor/atva/MultipleRecursion_dac(II)V/2 
* CE 4 is refined into CE [17,18,19] 
* CE 3 is refined into CE [20] 
* CE 2 is refined into CE [21] 


#### Refined cost equations amor/atva/MultipleRecursion_dac(II)V/2 
* CE 17: amor/atva/MultipleRecursion_dac(II)V(A,B) = 10+ amor/atva/MultipleRecursion_dacx(II)V(A,B):[13]
     [B>=1,A>=1] 
* CE 18: amor/atva/MultipleRecursion_dac(II)V(A,B) = 10+ amor/atva/MultipleRecursion_dacx(II)V(A,B):[12]
     [B>=1,A>=1] 
* CE 19: amor/atva/MultipleRecursion_dac(II)V(A,B) = 10+ amor/atva/MultipleRecursion_dacx(II)V(A,B):[multiple([15],[[14],[13],[12]])]
     [B>=1,A>=2] 
* CE 20: amor/atva/MultipleRecursion_dac(II)V(A,B) = 7
     [A>=1,0>=B] 
* CE 21: amor/atva/MultipleRecursion_dac(II)V(A,B) = 4
     [0>=A] 

### Cost equations --> "Loop" of amor/atva/MultipleRecursion_dac(II)V/2 
* CEs [19] --> Loop 16 
* CEs [18] --> Loop 17 
* CEs [17] --> Loop 18 
* CEs [20] --> Loop 19 
* CEs [21] --> Loop 20 

#### Loops of amor/atva/MultipleRecursion_dac(II)V/2 
* Loop 16: amor/atva/MultipleRecursion_dac(II)V(A,B) [B>=1,A>=2] 
* Loop 17: amor/atva/MultipleRecursion_dac(II)V(A,B) [B>=1,A>=1] 
* Loop 18: amor/atva/MultipleRecursion_dac(II)V(A,B) [B>=1,A>=1] 
* Loop 19: amor/atva/MultipleRecursion_dac(II)V(A,B) [A>=1,0>=B] 
* Loop 20: amor/atva/MultipleRecursion_dac(II)V(A,B) [0>=A] 

### Ranking functions of CR amor/atva/MultipleRecursion_dac(II)V(A,B) 

#### Partial ranking functions of CR amor/atva/MultipleRecursion_dac(II)V(A,B) 


### Resulting Chains:amor/atva/MultipleRecursion_dac(II)V(A,B) 
* [20]
* [19]
* [18]
* [17]
* [16]


Computing Bounds
=====================================

#### Cost of loops [10] 

 * loop 10:14_loop(A,B) -> [14_loop(A',B')] 
5
#### Cost of phase [10]:14_loop(A,B) -> [14_loop(A',B')] 
5*it(10)+0
  Such that:it(10) =< A-B
it(10) =< A-B-A'+B'
it(10) >= A-B-A'+B'

#### Cost of chains of 14_loop(A,B):
* Chain [[10],11]: 5*it(10)+3
  Such that:it(10) =< A-B
it(10) >= A-B

  with precondition: [A>=2,B>=0,A>=B+1] 


#### Cost of loops [15] 

 * loop 15:amor/atva/MultipleRecursion_dacx(II)V(A,B) -> [amor/atva/MultipleRecursion_dacx(II)V(A',B'),amor/atva/MultipleRecursion_dacx(II)V(A'2,B'2)] 
5*s(2)+37
  Such that:s(2) =< A
s(2) >= A

#### Cost of phase [15]:amor/atva/MultipleRecursion_dacx(II)V(A,B) -> [] 
37*it(15)+12*it([12])+15*it([13])+22*it([14])+5*s(3)+0
  Such that:it(15)+it([14]) =< A-1
it([14]) =< A/2
aux(14) =< A
it([12])+it([13])+it([14]) =< aux(14)
s(3) =< it(15)*aux(14)

#### Cost of chains of amor/atva/MultipleRecursion_dacx(II)V(A,B):
* Chain [13]: 15
  with precondition: [A>=1,B>=0] 

* Chain [12]: 12
  with precondition: [A>=1,B>=0] 

* Chain [multiple([15],[[14],[13],[12]])]: 37*it(15)+12*it([12])+15*it([13])+22*it([14])+5*s(3)+0
  Such that:it(15)+it([14]) =< A-1
it([14]) =< A/2
aux(14) =< A
it([12])+it([13])+it([14]) =< aux(14)
s(3) =< it(15)*aux(14)

  with precondition: [A>=2,B>=1] 


#### Cost of chains of amor/atva/MultipleRecursion_dac(II)V(A,B):
* Chain [20]: 4
  with precondition: [0>=A] 

* Chain [19]: 7
  with precondition: [0>=B,A>=1] 

* Chain [18]: 25
  with precondition: [A>=1,B>=1] 

* Chain [17]: 22
  with precondition: [A>=1,B>=1] 

* Chain [16]: 37*s(4)+22*s(5)+12*s(7)+15*s(8)+5*s(9)+10
  Such that:s(5)+s(4) =< A-1
s(6) =< A
s(5)+s(7)+s(8) =< s(6)

  with precondition: [A>=2,B>=1] 


Closed-form bounds of amor/atva/MultipleRecursion_dac(II)V(A,B): 
-------------------------------------
* Chain [20] with precondition: [0>=A] 
    - Lower bound: 4 
    - Complexity: constant
 * Chain [19] with precondition: [0>=B,A>=1] 
    - Lower bound: 7 
    - Complexity: constant
 * Chain [18] with precondition: [A>=1,B>=1] 
    - Lower bound: 25 
    - Complexity: constant
 * Chain [17] with precondition: [A>=1,B>=1] 
    - Lower bound: 22 
    - Complexity: constant
 * Chain [16] with precondition: [A>=2,B>=1] 
    - Lower bound: 10 
    - Complexity: constant
 
### Partitioned lower bound of amor/atva/MultipleRecursion_dac(II)V(A,B): 
* 4 
 if [0>=A]
* 7 
 if [0>=B,A>=1]
* 10 
 if [A>=2,B>=1]
* 22 
 if [A=1,B>=1]
Possible lower bounds : [4,7,10,22]
Maximum lower bound complexity: constant

Time statistics: 
-------------------------------------
* Partial evaluation computed in 12 ms.
* Invariants computed in 47 ms.
   - Backward Invariants 18 ms.
   - Transitive Invariants 11 ms.
* Refinement performed in 60 ms.
* Termination proved in 15 ms.
* Upper bounds computed in 147 ms.
   - Equation cost structures 28 ms.
   - Phase cost structures 107 ms.
   - Chain cost structures 8 ms.
   - Solving cost expressions 2 ms.
* Total analysis performed in 325 ms.



Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [11_loop/2]
1. recursive : [6_loop/3]
2. recursive : [2_loop/5]
3. non_recursive : [amor/atva/Loops_cache(II)V/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into 11_loop/2
1. SCC is partially evaluated into 6_loop/3
2. SCC is partially evaluated into 2_loop/5
3. SCC is partially evaluated into amor/atva/Loops_cache(II)V/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations 11_loop/2 
* CE 9 is refined into CE [10] 
* CE 8 is refined into CE [11] 


#### Refined cost equations 11_loop/2 
* CE 10: 11_loop(A,B) = 3
     [B>=A,A>=1] 
* CE 11: 11_loop(A,B) = 5+ 11_loop(A,C)
     [A>=B+1,B>=0,B+1=C] 

### Cost equations --> "Loop" of 11_loop/2 
* CEs [11] --> Loop 9 
* CEs [10] --> Loop 10 

#### Loops of 11_loop/2 
* Loop 9: 11_loop(A,B)->  11_loop(A,B')
                  [A>=B+1,B>=0,B+1=B'] 
* Loop 10: 11_loop(A,B) [B>=A,A>=1] 

### Ranking functions of CR 11_loop(A,B) 
* RF of phase [9]: [A-B]

#### Partial ranking functions of CR 11_loop(A,B) 
* Partial RF of phase [9]:
  - RF of loop [9:1]:
    A-B


### Resulting Chains:11_loop(A,B) 
* [[9],10]


### Specialization of cost equations 6_loop/3 
* CE 7 is refined into CE [12] 
* CE 6 is refined into CE [13] 
* CE 5 is refined into CE [14] 


#### Refined cost equations 6_loop/3 
* CE 12: 6_loop(A,B,C) = 3
     [B>=A,B>=0] 
* CE 13: 6_loop(A,B,C) = 7+ 6_loop(A,D,C)
     [A>=B+1,C>=A,B>=1,B+1=D] 
* CE 14: 6_loop(A,B,C) = 9+ 11_loop(A,D):[[9],10]+ 6_loop(A,E,F)
     [F>=A,A>=1,E=1,D=0,B=0] 

### Cost equations --> "Loop" of 6_loop/3 
* CEs [13] --> Loop 11 
* CEs [14] --> Loop 12 
* CEs [12] --> Loop 13 

#### Loops of 6_loop/3 
* Loop 11: 6_loop(A,B,C)->  6_loop(A,B',C)
                  [A>=B+1,C>=A,B>=1,B+1=B'] 
* Loop 12: 6_loop(A,B,C)->  6_loop(A,B',C')
                  [C'>=A,A>=1,B'=1,B=0] 
* Loop 13: 6_loop(A,B,C) [B>=A,B>=0] 

### Ranking functions of CR 6_loop(A,B,C) 
* RF of phase [11]: [A-B,-B+C]

#### Partial ranking functions of CR 6_loop(A,B,C) 
* Partial RF of phase [11]:
  - RF of loop [11:1]:
    A-B
    -B+C


### Resulting Chains:6_loop(A,B,C) 
* [13]
* [12,[11],13]
* [12,13]


### Specialization of cost equations 2_loop/5 
* CE 4 is refined into CE [15] 
* CE 3 is refined into CE [16,17,18] 


#### Refined cost equations 2_loop/5 
* CE 15: 2_loop(A,B,C,D,E) = 3
     [C>=A,D>=0,C>=0] 
* CE 16: 2_loop(A,B,C,D,E) = 7+ 6_loop(B,F,E):[13]+ 2_loop(A,B,G,H,I)
     [A>=C+1,H>=0,D>=0,C>=0,0>=B,C+1=G,F=0] 
* CE 17: 2_loop(A,B,C,D,E) = 7+ 6_loop(B,F,E):[12,[11],13]+ 2_loop(A,B,G,H,I)
     [H>=B,A>=C+1,B>=2,D>=0,C>=0,C+1=G,F=0] 
* CE 18: 2_loop(A,B,C,D,E) = 7+ 6_loop(F,G,E):[12,13]+ 2_loop(A,H,I,J,K)
     [A>=C+1,J>=1,D>=0,C>=0,C+1=I,H=1,G=0,F=1,B=1] 

### Cost equations --> "Loop" of 2_loop/5 
* CEs [17] --> Loop 14 
* CEs [16] --> Loop 15 
* CEs [18] --> Loop 16 
* CEs [15] --> Loop 17 

#### Loops of 2_loop/5 
* Loop 14: 2_loop(A,B,C,D,E)->  2_loop(A,B,C',D',E')
                  [A>=C+1,D'>=B,D>=0,C>=0,B>=2,C+1=C'] 
* Loop 15: 2_loop(A,B,C,D,E)->  2_loop(A,B,C',D',E')
                  [A>=C+1,D'>=0,D>=0,C>=0,0>=B,C+1=C'] 
* Loop 16: 2_loop(A,B,C,D,E)->  2_loop(A,B',C',D',E')
                  [A>=C+1,D'>=1,D>=0,C>=0,C+1=C',B'=1,B=1] 
* Loop 17: 2_loop(A,B,C,D,E) [C>=A,D>=0,C>=0] 

### Ranking functions of CR 2_loop(A,B,C,D,E) 
* RF of phase [14]: [A-C]
* RF of phase [15]: [A-C]
* RF of phase [16]: [A-C]

#### Partial ranking functions of CR 2_loop(A,B,C,D,E) 
* Partial RF of phase [14]:
  - RF of loop [14:1]:
    A-C
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    A-C
* Partial RF of phase [16]:
  - RF of loop [16:1]:
    A-C


### Resulting Chains:2_loop(A,B,C,D,E) 
* [[16],17]
* [[15],17]
* [[14],17]
* [17]


### Specialization of cost equations amor/atva/Loops_cache(II)V/2 
* CE 2 is refined into CE [19,20,21,22] 


#### Refined cost equations amor/atva/Loops_cache(II)V/2 
* CE 19: amor/atva/Loops_cache(II)V(A,B) = 3+ 2_loop(A,C,D,E,F):[[16],17]
     [A>=1,F=0,E=0,D=0,C=1,B=1] 
* CE 20: amor/atva/Loops_cache(II)V(A,B) = 3+ 2_loop(A,B,C,D,E):[[15],17]
     [A>=1,0>=B,E=0,D=0,C=0] 
* CE 21: amor/atva/Loops_cache(II)V(A,B) = 3+ 2_loop(A,B,C,D,E):[[14],17]
     [B>=2,A>=1,E=0,D=0,C=0] 
* CE 22: amor/atva/Loops_cache(II)V(A,B) = 3+ 2_loop(A,B,C,D,E):[17]
     [0>=A,E=0,D=0,C=0] 

### Cost equations --> "Loop" of amor/atva/Loops_cache(II)V/2 
* CEs [21] --> Loop 18 
* CEs [20] --> Loop 19 
* CEs [22] --> Loop 20 
* CEs [19] --> Loop 21 

#### Loops of amor/atva/Loops_cache(II)V/2 
* Loop 18: amor/atva/Loops_cache(II)V(A,B) [B>=2,A>=1] 
* Loop 19: amor/atva/Loops_cache(II)V(A,B) [A>=1,0>=B] 
* Loop 20: amor/atva/Loops_cache(II)V(A,B) [0>=A] 
* Loop 21: amor/atva/Loops_cache(II)V(A,B) [A>=1,B=1] 

### Ranking functions of CR amor/atva/Loops_cache(II)V(A,B) 

#### Partial ranking functions of CR amor/atva/Loops_cache(II)V(A,B) 


### Resulting Chains:amor/atva/Loops_cache(II)V(A,B) 
* [21]
* [20]
* [19]
* [18]


Computing Bounds
=====================================

#### Cost of loops [9] 

 * loop 9:11_loop(A,B) -> [11_loop(A',B')] 
5
#### Cost of phase [9]:11_loop(A,B) -> [11_loop(A',B')] 
5*it(9)+0
  Such that:it(9) =< A-B
it(9) =< A-B-A'+B'
it(9) >= A-B-A'+B'

#### Cost of chains of 11_loop(A,B):
* Chain [[9],10]: 5*it(9)+3
  Such that:it(9) =< A-B
it(9) >= A-B

  with precondition: [B>=0,A>=B+1] 


#### Cost of loops [11] 

 * loop 11:6_loop(A,B,C) -> [6_loop(A',B',C')] 
7
#### Cost of phase [11]:6_loop(A,B,C) -> [6_loop(A',B',C')] 
7*it(11)+0
  Such that:it(11) =< A-B
it(11) =< A-B-A'+B'
it(11) =< -B+C
it(11) =< -B+C+B'-C'
it(11) >= A-B-A'+B'
it(11) >= -B+C+B'-C'

#### Cost of chains of 6_loop(A,B,C):
* Chain [13]: 3
  with precondition: [B>=0,B>=A] 

* Chain [12,[11],13]: 7*it(11)+5*s(1)+15
  Such that:it(11) =< A-1
s(1) =< A
it(11) >= A-1
s(1) >= A

  with precondition: [B=0,A>=2] 

* Chain [12,13]: 5*s(1)+15
  Such that:s(1) =< 1
s(1) >= 1

  with precondition: [A=1,B=0] 


#### Cost of loops [16] 

 * loop 16:2_loop(A,B,C,D,E) -> [2_loop(A',B',C',D',E')] 
5*s(3)+22
  Such that:s(3) =< 1
s(3) >= 1

#### Cost of phase [16]:2_loop(A,B,C,D,E) -> [2_loop(A',B',C',D',E')] 
22*it(16)+5*s(4)+0
  Such that:aux(3) =< A-C
aux(4) =< A-C-A'+C'
aux(2) =< aux(3)
it(16) =< aux(3)
aux(2) =< aux(4)
it(16) =< aux(4)
s(4) =< aux(2)
aux(5) >= A-C-A'+C'
aux(5) >= aux(5)
it(16) >= aux(5)
s(4) >= aux(5)

#### Cost of loops [15] 

 * loop 15:2_loop(A,B,C,D,E) -> [2_loop(A',B',C',D',E')] 
10
#### Cost of phase [15]:2_loop(A,B,C,D,E) -> [2_loop(A',B',C',D',E')] 
10*it(15)+0
  Such that:it(15) =< A-C
it(15) =< A-C-A'+C'
it(15) >= A-C-A'+C'

#### Cost of loops [14] 

 * loop 14:2_loop(A,B,C,D,E) -> [2_loop(A',B',C',D',E')] 
7*s(7)+5*s(8)+22
  Such that:s(7) =< B'-1
s(8) =< B'
s(7) >= B'-1
s(8) >= B'

#### Cost of phase [14]:2_loop(A,B,C,D,E) -> [2_loop(A',B',C',D',E')] 
22*it(14)+7*s(9)+5*s(10)+0
  Such that:it(14) =< A-C
it(14) =< A-C-A'+C'
aux(9) =< B-1
aux(10) =< aux(9)+1
s(9) =< it(14)*aux(9)
s(10) =< it(14)*aux(10)
it(14) >= A-C-A'+C'
aux(7) >= B-1
s(10) >= -2*C+2*C'
s(9) >= -C+C'
aux(8) >= aux(7)+1
s(9) >= it(14)*aux(7)
s(10) >= it(14)*aux(8)

#### Cost of chains of 2_loop(A,B,C,D,E):
* Chain [[16],17]: 27*it(16)+3
  Such that:aux(6) =< A-C
it(16) =< aux(6)
aux(5) >= A-C
aux(5) >= aux(5)
it(16) >= aux(5)

  with precondition: [B=1,C>=0,D>=0,A>=C+1] 

* Chain [[15],17]: 10*it(15)+3
  Such that:it(15) =< A-C
it(15) >= A-C

  with precondition: [0>=B,C>=0,D>=0,A>=C+1] 

* Chain [[14],17]: 22*it(14)+7*s(9)+5*s(10)+3
  Such that:it(14) =< A-C
aux(9) =< B-1
aux(10) =< aux(9)+1
s(9) =< it(14)*aux(9)
s(10) =< it(14)*aux(10)
s(10) >= 2*A-2*C
aux(7) >= B-1
aux(11) >= A-C
it(14) >= aux(11)
s(9) >= aux(11)
aux(8) >= aux(7)+1
s(9) >= it(14)*aux(7)
s(10) >= it(14)*aux(8)

  with precondition: [B>=2,C>=0,D>=0,A>=C+1] 

* Chain [17]: 3
  with precondition: [C>=0,D>=0,C>=A] 


#### Cost of chains of amor/atva/Loops_cache(II)V(A,B):
* Chain [21]: 27*s(13)+6
  Such that:s(11) =< A
s(13) =< s(11)
s(12) >= A
s(12) >= s(12)
s(13) >= s(12)

  with precondition: [B=1,A>=1] 

* Chain [20]: 6
  with precondition: [0>=A] 

* Chain [19]: 10*s(14)+6
  Such that:s(14) =< A
s(14) >= A

  with precondition: [0>=B,A>=1] 

* Chain [18]: 22*s(15)+5*s(17)+7*s(20)+6
  Such that:s(15) =< A
s(16) =< B-1
s(21) =< s(16)+1
s(20) =< s(15)*s(16)
s(17) =< s(15)*s(21)
s(19) >= A
s(17) >= 2*A
s(18) >= B-1
s(15) >= s(19)
s(20) >= s(19)
s(22) >= s(18)+1
s(20) >= s(15)*s(18)
s(17) >= s(15)*s(22)

  with precondition: [A>=1,B>=2] 


Closed-form bounds of amor/atva/Loops_cache(II)V(A,B): 
-------------------------------------
* Chain [21] with precondition: [B=1,A>=1] 
    - Lower bound: 27*A+6 
    - Complexity: n
 * Chain [20] with precondition: [0>=A] 
    - Lower bound: 6 
    - Complexity: constant
 * Chain [19] with precondition: [0>=B,A>=1] 
    - Lower bound: 10*A+6 
    - Complexity: n
 * Chain [18] with precondition: [A>=1,B>=2] 
    - Lower bound: 27*A+6+ (12*B-12)*A 
    - Complexity: n^2
 
### Partitioned lower bound of amor/atva/Loops_cache(II)V(A,B): 
* 6 
 if [0>=A]
* 10*A+6 
 if [0>=B,A>=1]
* 27*A+6 
 if [B=1,A>=1]
* 27*A+6+ (12*B-12)*A 
 if [A>=1,B>=2]
Possible lower bounds : [6,10*A+6,27*A+6,27*A+6+ (12*B-12)*A]
Maximum lower bound complexity: n^2

Time statistics: 
-------------------------------------
* Partial evaluation computed in 17 ms.
* Invariants computed in 118 ms.
   - Backward Invariants 44 ms.
   - Transitive Invariants 28 ms.
* Refinement performed in 115 ms.
* Termination proved in 38 ms.
* Upper bounds computed in 252 ms.
   - Equation cost structures 52 ms.
   - Phase cost structures 130 ms.
   - Chain cost structures 63 ms.
   - Solving cost expressions 5 ms.
* Total analysis performed in 599 ms.


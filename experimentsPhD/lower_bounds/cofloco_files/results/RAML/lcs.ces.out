
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [firstline/1]
1. non_recursive : [max/2]
2. non_recursive : [right/1]
3. recursive : [newline/3]
4. recursive : [lcstable/2]
5. non_recursive : [lcs/2]
7. recursive : [out1_lcstable/2]
8. recursive : [out2_lcstable/2]
9. recursive : [out_newline/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into firstline/1
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into newline/3
4. SCC is partially evaluated into lcstable/2
5. SCC is partially evaluated into lcs/2
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations firstline/1 
* CE 6 is refined into CE [11] 
* CE 5 is refined into CE [12] 


#### Refined cost equations firstline/1 
* CE 11: firstline(A) = 1+ firstline(B)
     [A>=1,A=B+1] 
* CE 12: firstline(A) = 1
     [A=0] 

### Cost equations --> "Loop" of firstline/1 
* CEs [12] --> Loop 10 
* CEs [11] --> Loop 11 

#### Loops of firstline/1 
* Loop 10: firstline(A) [A=0] 
* Loop 11: firstline(A)->  firstline(A')
                  [A>=1,A=A'+1] 

### Ranking functions of CR firstline(A) 
* RF of phase [11]: [A]

#### Partial ranking functions of CR firstline(A) 
* Partial RF of phase [11]:
  - RF of loop [11:1]:
    A


### Resulting Chains:firstline(A) 
* [[11],10]
* [10]


### Specialization of cost equations newline/3 
* CE 10 is refined into CE [13] 
* CE 9 is refined into CE [14] 
* CE 7 is refined into CE [15] 
* CE 8 is discarded (unfeasible) 


#### Refined cost equations newline/3 
* CE 13: newline(A,B,C) = 3+ newline(A,D,D)
     [D>=0,D+1=C,D+1=B] 
* CE 14: newline(A,B,C) = 4+ newline(A,D,D)
     [D>=0,D+1=C,D+1=B] 
* CE 15: newline(A,B,C) = 1
     [C=0,B=0] 

### Cost equations --> "Loop" of newline/3 
* CEs [15] --> Loop 12 
* CEs [14] --> Loop 13 
* CEs [13] --> Loop 14 

#### Loops of newline/3 
* Loop 12: newline(A,B,C) [C=0,B=0] 
* Loop 13: newline(A,B,C)->  newline(A,A',A')
                  [A'>=0,A'+1=C,A'+1=B] 
* Loop 14: newline(A,B,C)->  newline(A,A',A')
                  [A'>=0,A'+1=C,A'+1=B] 

### Ranking functions of CR newline(A,B,C) 
* RF of phase [13,14]: [B,C]

#### Partial ranking functions of CR newline(A,B,C) 
* Partial RF of phase [13,14]:
  - RF of loop [13:1,14:1]:
    B
    C


### Resulting Chains:newline(A,B,C) 
* [[13,14],12]
* [12]


### Specialization of cost equations lcstable/2 
* CE 4 is refined into CE [16,17] 
* CE 3 is refined into CE [18,19] 


#### Refined cost equations lcstable/2 
* CE 16: lcstable(A,B) = 1+ newline(C,B,B):[[13,14],12]+ lcstable(D,B)
     [B>=1,A>=1,A=D+1] 
* CE 17: lcstable(A,B) = 1+ newline(C,D,E):[12]+ lcstable(F,G)
     [A>=1,A=F+1,G=0,E=0,D=0,B=0] 
* CE 18: lcstable(A,B) = 1+ firstline(B):[[11],10]
     [B>=1,A=0] 
* CE 19: lcstable(A,B) = 1+ firstline(C):[10]
     [C=0,B=0,A=0] 

### Cost equations --> "Loop" of lcstable/2 
* CEs [18] --> Loop 15 
* CEs [19] --> Loop 16 
* CEs [16] --> Loop 17 
* CEs [17] --> Loop 18 

#### Loops of lcstable/2 
* Loop 15: lcstable(A,B) [B>=1,A=0] 
* Loop 16: lcstable(A,B) [B=0,A=0] 
* Loop 17: lcstable(A,B)->  lcstable(A',B)
                  [B>=1,A>=1,A=A'+1] 
* Loop 18: lcstable(A,B)->  lcstable(A',B')
                  [A>=1,A=A'+1,B'=0,B=0] 

### Ranking functions of CR lcstable(A,B) 
* RF of phase [17]: [A]
* RF of phase [18]: [A]

#### Partial ranking functions of CR lcstable(A,B) 
* Partial RF of phase [17]:
  - RF of loop [17:1]:
    A
* Partial RF of phase [18]:
  - RF of loop [18:1]:
    A


### Resulting Chains:lcstable(A,B) 
* [[18],16]
* [[17],15]
* [16]
* [15]


### Specialization of cost equations lcs/2 
* CE 2 is refined into CE [20,21,22,23] 


#### Refined cost equations lcs/2 
* CE 20: lcs(A,B) = 1+ lcstable(A,C):[[18],16]
     [A>=1,C=0,B=0] 
* CE 21: lcs(A,B) = 1+ lcstable(A,B):[[17],15]
     [B>=1,A>=1] 
* CE 22: lcs(A,B) = 1+ lcstable(C,D):[16]
     [D=0,C=0,B=0,A=0] 
* CE 23: lcs(A,B) = 1+ lcstable(C,B):[15]
     [B>=1,C=0,A=0] 

### Cost equations --> "Loop" of lcs/2 
* CEs [21] --> Loop 19 
* CEs [20] --> Loop 20 
* CEs [23] --> Loop 21 
* CEs [22] --> Loop 22 

#### Loops of lcs/2 
* Loop 19: lcs(A,B) [B>=1,A>=1] 
* Loop 20: lcs(A,B) [A>=1,B=0] 
* Loop 21: lcs(A,B) [B>=1,A=0] 
* Loop 22: lcs(A,B) [B=0,A=0] 

### Ranking functions of CR lcs(A,B) 

#### Partial ranking functions of CR lcs(A,B) 


### Resulting Chains:lcs(A,B) 
* [22]
* [21]
* [20]
* [19]


Computing Bounds
=====================================

#### Cost of loops [11] 

 * loop 11:firstline(A) -> [firstline(A')] 
1
#### Cost of phase [11]:firstline(A) -> [firstline(A')] 
1*it(11)+0
  Such that:it(11) =< A
it(11) =< A-A'
it(11) >= A-A'

#### Cost of chains of firstline(A):
* Chain [[11],10]: 1*it(11)+1
  Such that:it(11) =< A
it(11) >= A

  with precondition: [A>=1] 

* Chain [10]: 1
  with precondition: [A=0] 


#### Cost of loops [13,14] 

 * loop 13:newline(A,B,C) -> [newline(A',B',C')] 
4
 * loop 14:newline(A,B,C) -> [newline(A',B',C')] 
3
#### Cost of phase [13,14]:newline(A,B,C) -> [newline(A',B',C')] 
4*it(13)+3*it(14)+0
  Such that:it(13)+it(14) =< B
it(13)+it(14) =< B-B'
it(13)+it(14) =< C
it(13)+it(14) =< C-C'
it(13)+it(14) >= B-B'
it(13)+it(14) >= C-C'

#### Cost of chains of newline(A,B,C):
* Chain [[13,14],12]: 4*it(13)+3*it(14)+1
  Such that:it(14)+it(13) =< B
it(14)+it(13) >= B

  with precondition: [B=C,B>=1] 

* Chain [12]: 1
  with precondition: [B=0,C=0] 


#### Cost of loops [18] 

 * loop 18:lcstable(A,B) -> [lcstable(A',B')] 
2
#### Cost of phase [18]:lcstable(A,B) -> [lcstable(A',B')] 
2*it(18)+0
  Such that:it(18) =< A
it(18) =< A-A'
it(18) >= A-A'

#### Cost of loops [17] 

 * loop 17:lcstable(A,B) -> [lcstable(A',B')] 
3*s(5)+4*s(4)+2
  Such that:s(4)+s(5) =< B'
s(4)+s(5) >= B'

#### Cost of phase [17]:lcstable(A,B) -> [lcstable(A',B')] 
2*it(17)+3*s(6)+4*s(7)+0
  Such that:it(17) =< A
it(17) =< A-A'
aux(3) =< B
s(6)+s(7) =< it(17)*aux(3)
aux(2) >= B
aux(4) >= A-A'
it(17) >= aux(4)
s(6)+s(7) >= aux(4)
s(6)+s(7) >= it(17)*aux(2)

#### Cost of chains of lcstable(A,B):
* Chain [[18],16]: 2*it(18)+2
  Such that:it(18) =< A
it(18) >= A

  with precondition: [B=0,A>=1] 

* Chain [[17],15]: 2*it(17)+1*s(1)+3*s(6)+4*s(7)+2
  Such that:it(17) =< A
aux(5) =< B
s(1) =< aux(5)
s(6)+s(7) =< it(17)*aux(5)
aux(4) >= A
aux(6) >= B
aux(6) >= aux(6)
s(1) >= aux(6)
it(17) >= aux(4)
s(6)+s(7) >= aux(4)
s(6)+s(7) >= it(17)*aux(6)

  with precondition: [A>=1,B>=1] 

* Chain [16]: 2
  with precondition: [A=0,B=0] 

* Chain [15]: 1*s(1)+2
  Such that:s(1) =< B
s(1) >= B

  with precondition: [A=0,B>=1] 


#### Cost of chains of lcs(A,B):
* Chain [22]: 3
  with precondition: [A=0,B=0] 

* Chain [21]: 1*s(8)+3
  Such that:s(8) =< B
s(8) >= B

  with precondition: [A=0,B>=1] 

* Chain [20]: 2*s(9)+3
  Such that:s(9) =< A
s(9) >= A

  with precondition: [B=0,A>=1] 

* Chain [19]: 2*s(10)+1*s(14)+3*s(15)+4*s(16)+3
  Such that:s(10) =< A
s(11) =< B
s(14) =< s(11)
s(15)+s(16) =< s(10)*s(11)
s(12) >= A
s(13) >= B
s(13) >= s(13)
s(14) >= s(13)
s(10) >= s(12)
s(15)+s(16) >= s(12)
s(15)+s(16) >= s(10)*s(13)

  with precondition: [A>=1,B>=1] 


Closed-form bounds of lcs(A,B): 
-------------------------------------
* Chain [22] with precondition: [A=0,B=0] 
    - Lower bound: 3 
    - Complexity: constant
 * Chain [21] with precondition: [A=0,B>=1] 
    - Lower bound: B+3 
    - Complexity: n
 * Chain [20] with precondition: [B=0,A>=1] 
    - Lower bound: 2*A+3 
    - Complexity: n
 * Chain [19] with precondition: [A>=1,B>=1] 
    - Lower bound: 2*A+B+3+3*B*A 
    - Complexity: n^2
 
### Partitioned lower bound of lcs(A,B): 
* 3 
 if [A=0,B=0]
* B+3 
 if [A=0,B>=1]
* 2*A+3 
 if [B=0,A>=1]
* 2*A+B+3+3*B*A 
 if [A>=1,B>=1]
Possible lower bounds : [3,B+3,2*A+3,2*A+B+3+3*B*A]
Maximum lower bound complexity: n^2

Time statistics: 
-------------------------------------
* Partial evaluation computed in 21 ms.
* Invariants computed in 64 ms.
   - Backward Invariants 29 ms.
   - Transitive Invariants 14 ms.
* Refinement performed in 77 ms.
* Termination proved in 31 ms.
* Upper bounds computed in 146 ms.
   - Equation cost structures 40 ms.
   - Phase cost structures 70 ms.
   - Chain cost structures 32 ms.
   - Solving cost expressions 4 ms.
* Total analysis performed in 387 ms.


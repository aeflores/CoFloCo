
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [leq/2]
1. recursive : [insert/3]
2. recursive : [isortlist/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into leq/2
1. SCC is partially evaluated into insert/3
2. SCC is partially evaluated into isortlist/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations leq/2 
* CE 9 is refined into CE [10] 
* CE 8 is discarded (unfeasible) 
* CE 7 is refined into CE [11] 


#### Refined cost equations leq/2 
* CE 10: leq(A,A) = 1+ leq(B,C)
     [A>=1,A=C+1,A=B+1] 
* CE 11: leq(A,B) = 1
     [B=0,A=0] 

### Cost equations --> "Loop" of leq/2 
* CEs [11] --> Loop 9 
* CEs [10] --> Loop 10 

#### Loops of leq/2 
* Loop 9: leq(A,B) [B=0,A=0] 
* Loop 10: leq(A,A)->  leq(A',B')
                  [A>=1,A=B'+1,A=A'+1] 

### Ranking functions of CR leq(A,B) 
* RF of phase [10]: [A,B]

#### Partial ranking functions of CR leq(A,B) 
* Partial RF of phase [10]:
  - RF of loop [10:1]:
    A
    B


### Resulting Chains:leq(A,B) 
* [[10],9]
* [9]


### Specialization of cost equations insert/3 
* CE 6 is refined into CE [12,13] 
* CE 5 is refined into CE [14,15] 
* CE 4 is refined into CE [16] 


#### Refined cost equations insert/3 
* CE 12: insert(A,B,A) = 1+ leq(A,A):[[10],9]+ insert(A,C,A)
     [A>=1,B>=1,B=C+1] 
* CE 13: insert(A,R,C) = 1+ leq(S,T):[9]+ insert(U,V,W)
     [R>=1,R=V+1,W=0,U=0,T=0,S=0,C=0,A=0] 
* CE 14: insert(A,B,A) = 1+ leq(A,A):[[10],9]
     [A>=1,B>=1] 
* CE 15: insert(A,R,C) = 1+ leq(S,T):[9]
     [R>=1,T=0,S=0,C=0,A=0] 
* CE 16: insert(A,B,A) = 1
     [B=0] 

### Cost equations --> "Loop" of insert/3 
* CEs [14] --> Loop 11 
* CEs [16] --> Loop 12 
* CEs [15] --> Loop 13 
* CEs [12] --> Loop 14 
* CEs [13] --> Loop 15 

#### Loops of insert/3 
* Loop 11: insert(A,B,A) [B>=1,A>=1] 
* Loop 12: insert(A,B,A) [B=0] 
* Loop 13: insert(A,R,C) [R>=1,C=0,A=0] 
* Loop 14: insert(A,B,A)->  insert(A,A',A)
                  [B>=1,A>=1,B=A'+1] 
* Loop 15: insert(A,R,C)->  insert(A',R',C')
                  [R>=1,R=R'+1,C'=0,A'=0,C=0,A=0] 

### Ranking functions of CR insert(A,R,C) 
* RF of phase [14]: [R]
* RF of phase [15]: [R]

#### Partial ranking functions of CR insert(A,R,C) 
* Partial RF of phase [14]:
  - RF of loop [14:1]:
    R
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    R


### Resulting Chains:insert(A,R,C) 
* [[15],13]
* [[15],12]
* [[14],12]
* [[14],11]
* [13]
* [12]
* [11]


### Specialization of cost equations isortlist/2 
* CE 3 is refined into CE [17,18,19,20,21,22,23] 
* CE 2 is refined into CE [24] 


#### Refined cost equations isortlist/2 
* CE 17: isortlist(R,C) = 1+ insert(S,T,U):[[15],13]+ isortlist(T,V)
     [T>=2,T+1=R,V=0,U=0,S=0,C=0] 
* CE 18: isortlist(R,C) = 1+ insert(S,T,U):[[15],12]+ isortlist(T,V)
     [T>=1,T+1=R,V=0,U=0,S=0,C=0] 
* CE 19: isortlist(R,C) = 1+ insert(C,S,C):[[14],12]+ isortlist(S,C)
     [C>=1,S>=1,S+1=R] 
* CE 20: isortlist(R,C) = 1+ insert(C,S,C):[[14],11]+ isortlist(S,C)
     [C>=1,S>=2,S+1=R] 
* CE 21: isortlist(R,C) = 1+ insert(S,T,U):[13]+ isortlist(T,V)
     [T>=1,T+1=R,V=0,U=0,S=0,C=0] 
* CE 22: isortlist(R,C) = 1+ insert(C,S,C):[12]+ isortlist(T,C)
     [T=0,S=0,R=1] 
* CE 23: isortlist(R,C) = 1+ insert(C,S,C):[11]+ isortlist(S,C)
     [S>=1,C>=1,S+1=R] 
* CE 24: isortlist(R,C) = 1
     [R=0] 

### Cost equations --> "Loop" of isortlist/2 
* CEs [24] --> Loop 16 
* CEs [20] --> Loop 17 
* CEs [23] --> Loop 18 
* CEs [19] --> Loop 19 
* CEs [17] --> Loop 20 
* CEs [21] --> Loop 21 
* CEs [18] --> Loop 22 
* CEs [22] --> Loop 23 

#### Loops of isortlist/2 
* Loop 16: isortlist(R,C) [R=0] 
* Loop 17: isortlist(R,C)->  isortlist(R',C)
                  [R'>=2,C>=1,R'+1=R] 
* Loop 18: isortlist(R,C)->  isortlist(R',C)
                  [R'>=1,C>=1,R'+1=R] 
* Loop 19: isortlist(R,C)->  isortlist(R',C)
                  [R'>=1,C>=1,R'+1=R] 
* Loop 20: isortlist(R,C)->  isortlist(R',C')
                  [R'>=2,R'+1=R,C'=0,C=0] 
* Loop 21: isortlist(R,C)->  isortlist(R',C')
                  [R'>=1,R'+1=R,C'=0,C=0] 
* Loop 22: isortlist(R,C)->  isortlist(R',C')
                  [R'>=1,R'+1=R,C'=0,C=0] 
* Loop 23: isortlist(R,C)->  isortlist(R',C)
                  [R'=0,R=1] 

### Ranking functions of CR isortlist(R,C) 
* RF of phase [17,18,19]: [R-1]
* RF of phase [20,21,22]: [R-1]

#### Partial ranking functions of CR isortlist(R,C) 
* Partial RF of phase [17,18,19]:
  - RF of loop [17:1]:
    R-2
  - RF of loop [18:1,19:1]:
    R-1
* Partial RF of phase [20,21,22]:
  - RF of loop [20:1]:
    R-2
  - RF of loop [21:1,22:1]:
    R-1


### Resulting Chains:isortlist(R,C) 
* [[20,21,22],23,16]
* [[17,18,19],23,16]
* [23,16]
* [16]


Computing Bounds
=====================================

#### Cost of loops [10] 

 * loop 10:leq(A,B) -> [leq(A',B')] 
1
#### Cost of phase [10]:leq(A,B) -> [leq(A',B')] 
1*it(10)+0
  Such that:it(10) =< A
it(10) =< A-A'
it(10) =< B
it(10) =< B-B'
it(10) >= A-A'
it(10) >= B-B'

#### Cost of chains of leq(A,B):
* Chain [[10],9]: 1*it(10)+1
  Such that:it(10) =< B
it(10) >= B

  with precondition: [A=B,A>=1] 

* Chain [9]: 1
  with precondition: [A=0,B=0] 


#### Cost of loops [15] 

 * loop 15:insert(A,R,C) -> [insert(A',R',C')] 
2
#### Cost of phase [15]:insert(A,R,C) -> [insert(A',R',C')] 
2*it(15)+0
  Such that:it(15) =< R
it(15) =< R-R'
it(15) >= R-R'

#### Cost of phase [15]:insert(A,R,C) -> [insert(A',R',C')] 
2*it(15)+0
  Such that:it(15) =< R
it(15) =< R-R'
it(15) >= R-R'

#### Cost of loops [14] 

 * loop 14:insert(A,R,C) -> [insert(A',R',C')] 
1*s(2)+2
  Such that:s(2) =< C'
s(2) >= A

#### Cost of phase [14]:insert(A,R,C) -> [insert(A',R',C')] 
2*it(14)+1*s(3)+0
  Such that:it(14) =< R
it(14) =< R-R'
aux(2) =< C
s(3) =< it(14)*aux(2)
aux(1) >= C
aux(3) >= R-R'
it(14) >= aux(3)
s(3) >= aux(3)
s(3) >= it(14)*aux(1)

#### Cost of phase [14]:insert(A,R,C) -> [insert(A',R',C')] 
2*it(14)+1*s(3)+0
  Such that:it(14) =< R
it(14) =< R-R'
aux(2) =< C
s(3) =< it(14)*aux(2)
aux(1) >= C
aux(3) >= R-R'
it(14) >= aux(3)
s(3) >= aux(3)
s(3) >= it(14)*aux(1)

#### Cost of chains of insert(A,R,C):
* Chain [[15],13]: 2*it(15)+2
  Such that:it(15) =< R-1
it(15) >= 1

  with precondition: [A=0,C=0,R>=2] 

* Chain [[15],12]: 2*it(15)+1
  Such that:it(15) =< R
it(15) >= R

  with precondition: [A=0,C=0,R>=1] 

* Chain [[14],12]: 2*it(14)+1*s(3)+1
  Such that:it(14) =< R
aux(2) =< C
s(3) =< it(14)*aux(2)
aux(1) >= A
aux(3) >= R
it(14) >= aux(3)
s(3) >= aux(3)
s(3) >= it(14)*aux(1)

  with precondition: [A=C,A>=1,R>=1] 

* Chain [[14],11]: 2*it(14)+1*s(3)+1*s(4)+2
  Such that:it(14) =< R-1
aux(4) =< C
s(4) =< aux(4)
s(3) =< it(14)*aux(4)
aux(3) >= 1
aux(5) >= C
aux(5) >= aux(5)
s(4) >= aux(5)
it(14) >= aux(3)
s(3) >= aux(3)
s(3) >= it(14)*aux(5)

  with precondition: [A=C,A>=1,R>=2] 

* Chain [13]: 2
  with precondition: [A=0,C=0,R>=1] 

* Chain [12]: 1
  with precondition: [R=0,C=A] 

* Chain [11]: 1*s(4)+2
  Such that:s(4) =< C
s(4) >= C

  with precondition: [C=A,R>=1,C>=1] 


#### Cost of loops [20,21,22] 

 * loop 20:isortlist(R,C) -> [isortlist(R',C')] 
2*s(6)+3
  Such that:s(6) =< R-2
s(6) >= 1

 * loop 21:isortlist(R,C) -> [isortlist(R',C')] 
3
 * loop 22:isortlist(R,C) -> [isortlist(R',C')] 
2*s(8)+2
  Such that:s(8) =< R-1
s(8) >= R-1

#### Cost of phase [20,21,22]:isortlist(R,C) -> [isortlist(R',C')] 
3*it(20)+3*it(21)+2*it(22)+2*s(9)+2*s(10)+0
  Such that:it(20)+it(21)+it(22) =< R-1
it(20)+it(21)+it(22) =< R-R'
aux(10) =< R-2
it(20)+it(21)+it(22) =< aux(10)
aux(9) =< aux(10)+1
s(9) =< it(20)*aux(10)
s(10) =< it(22)*aux(9)
aux(8) >= 1
aux(11) >= R-R'
aux(6)+it(21)+it(22) >= aux(11)
it(20)+it(21)+it(22) >= aux(11)
it(20)+it(21)+s(10) >= aux(11)
s(10) >= it(22)*aux(8)
s(9) >= aux(6)

#### Cost of loops [17,18,19] 

 * loop 17:isortlist(R,C) -> [isortlist(R',C')] 
2*s(17)+1*s(21)+1*s(22)+3
  Such that:s(17) =< R'-1
s(18) =< C'
s(21) =< s(18)
s(22) =< s(17)*s(18)
s(19) >= 1
s(20) >= C'
s(20) >= s(20)
s(21) >= s(20)
s(17) >= s(19)
s(22) >= s(19)
s(22) >= s(17)*s(20)

 * loop 18:isortlist(R,C) -> [isortlist(R',C')] 
1*s(24)+3
  Such that:s(24) =< C'
s(24) >= C'

 * loop 19:isortlist(R,C) -> [isortlist(R',C')] 
2*s(30)+1*s(34)+2
  Such that:s(30) =< R'
s(31) =< C'
s(34) =< s(30)*s(31)
s(32) >= R-1
s(33) >= C
s(30) >= s(32)
s(34) >= s(32)
s(34) >= s(30)*s(33)

#### Cost of phase [17,18,19]:isortlist(R,C) -> [isortlist(R',C')] 
3*it(17)+3*it(18)+2*it(19)+2*s(35)+1*s(36)+1*s(37)+1*s(41)+2*s(42)+1*s(43)+0
  Such that:it(17)+it(18)+it(19) =< R-1
it(17)+it(18)+it(19) =< R-R'
s(18) =< C
aux(20) =< R-2
it(17)+it(18)+it(19) =< aux(20)
aux(19) =< aux(20)+1
aux(15) =< s(18)
s(35) =< it(17)*aux(20)
s(42) =< it(19)*aux(19)
s(41) =< it(18)*aux(15)
s(40) =< it(17)*aux(15)
s(43) =< s(42)*aux(15)
s(36) =< s(40)
s(37) =< s(35)*s(18)
aux(18) >= 1
s(20) >= C
aux(21) >= R-R'
aux(12)+it(18)+it(19) >= aux(21)
it(17)+it(18)+it(19) >= aux(21)
it(18)+it(19)+s(39) >= aux(21)
it(18)+s(39)+s(44) >= aux(21)
it(19)+s(39)+s(41) >= aux(21)
aux(13) >= s(20)
s(44) >= it(19)*aux(18)
aux(12) >= aux(12)
s(41) >= it(18)*aux(13)
s(39) >= it(17)*aux(13)
s(42) >= s(44)
s(43) >= s(44)
s(43) >= s(42)*aux(13)
s(39) >= s(39)
s(20) >= s(20)
s(36) >= s(39)
s(35) >= aux(12)
s(37) >= aux(12)
s(37) >= s(35)*s(20)

#### Cost of chains of isortlist(R,C):
* Chain [[20,21,22],23,16]: 3*it(20)+3*it(21)+2*it(22)+2*s(9)+2*s(10)+3
  Such that:aux(10) =< R-2
it(22)+it(21)+it(20) =< R-1
it(20)+it(21)+it(22) =< aux(10)
aux(9) =< aux(10)+1
s(9) =< it(20)*aux(10)
s(10) =< it(22)*aux(9)
aux(8) >= 1
aux(11) >= R-1
aux(6)+it(21)+it(22) >= aux(11)
it(20)+it(21)+it(22) >= aux(11)
it(20)+it(21)+s(10) >= aux(11)
s(10) >= it(22)*aux(8)
s(9) >= aux(6)

  with precondition: [C=0,R>=2] 

* Chain [[17,18,19],23,16]: 3*it(17)+3*it(18)+2*it(19)+2*s(35)+1*s(36)+1*s(37)+1*s(41)+2*s(42)+1*s(43)+3
  Such that:aux(20) =< R-2
it(19)+it(18)+it(17) =< R-1
s(18) =< C
it(17)+it(18)+it(19) =< aux(20)
aux(19) =< aux(20)+1
aux(15) =< s(18)
s(35) =< it(17)*aux(20)
s(42) =< it(19)*aux(19)
s(41) =< it(18)*aux(15)
s(40) =< it(17)*aux(15)
s(43) =< s(42)*aux(15)
s(36) =< s(40)
s(37) =< s(35)*s(18)
aux(18) >= 1
aux(21) >= R-1
s(20) >= C
aux(12)+it(18)+it(19) >= aux(21)
it(17)+it(18)+it(19) >= aux(21)
it(18)+it(19)+s(39) >= aux(21)
it(18)+s(39)+s(44) >= aux(21)
it(19)+s(39)+s(41) >= aux(21)
aux(13) >= s(20)
s(44) >= it(19)*aux(18)
aux(12) >= aux(12)
s(41) >= it(18)*aux(13)
s(39) >= it(17)*aux(13)
s(42) >= s(44)
s(43) >= s(44)
s(43) >= s(42)*aux(13)
s(39) >= s(39)
s(20) >= s(20)
s(36) >= s(39)
s(35) >= aux(12)
s(37) >= aux(12)
s(37) >= s(35)*s(20)

  with precondition: [R>=2,C>=1] 

* Chain [23,16]: 3
  with precondition: [R=1] 

* Chain [16]: 1
  with precondition: [R=0] 


Closed-form bounds of isortlist(R,C): 
-------------------------------------
* Chain [[20,21,22],23,16] with precondition: [C=0,R>=2] 
    - Lower bound: 2*R+1 
    - Complexity: n
 * Chain [[17,18,19],23,16] with precondition: [R>=2,C>=1] 
    - Lower bound: 2*R-2+ ((R-1)*C+3) 
    - Complexity: n^2
 * Chain [23,16] with precondition: [R=1] 
    - Lower bound: 3 
    - Complexity: constant
 * Chain [16] with precondition: [R=0] 
    - Lower bound: 1 
    - Complexity: constant
 
### Partitioned lower bound of isortlist(R,C): 
* 1 
 if [R=0]
* 3 
 if [R=1]
* 2*R+1 
 if [C=0,R>=2]
* 2*R-2+ ((R-1)*C+3) 
 if [R>=2,C>=1]
Possible lower bounds : [1,3,2*R+1,2*R-2+ ((R-1)*C+3)]
Maximum lower bound complexity: n^2

Time statistics: 
-------------------------------------
* Partial evaluation computed in 13 ms.
* Invariants computed in 111 ms.
   - Backward Invariants 45 ms.
   - Transitive Invariants 24 ms.
* Refinement performed in 127 ms.
* Termination proved in 40 ms.
* Upper bounds computed in 350 ms.
   - Equation cost structures 54 ms.
   - Phase cost structures 233 ms.
   - Chain cost structures 67 ms.
   - Solving cost expressions 17 ms.
* Total analysis performed in 681 ms.



Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [findMin/1]
1. recursive : [minSort/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into findMin/1
1. SCC is partially evaluated into minSort/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations findMin/1 
* CE 5 is refined into CE [6] 
* CE 4 is refined into CE [7] 


#### Refined cost equations findMin/1 
* CE 6: findMin(N) = 1+ findMin(O)
     [N>=1,N=O+1] 
* CE 7: findMin(N) = 1
     [N=0] 

### Cost equations --> "Loop" of findMin/1 
* CEs [7] --> Loop 5 
* CEs [6] --> Loop 6 

#### Loops of findMin/1 
* Loop 5: findMin(N) [N=0] 
* Loop 6: findMin(N)->  findMin(N')
                  [N>=1,N=N'+1] 

### Ranking functions of CR findMin(N) 
* RF of phase [6]: [N]

#### Partial ranking functions of CR findMin(N) 
* Partial RF of phase [6]:
  - RF of loop [6:1]:
    N


### Resulting Chains:findMin(N) 
* [[6],5]
* [5]


### Specialization of cost equations minSort/1 
* CE 3 is refined into CE [8] 
* CE 2 is refined into CE [9] 


#### Refined cost equations minSort/1 
* CE 8: minSort(N) = 1+ findMin(N):[[6],5]+ minSort(O)
     [N>=1,N=O+1] 
* CE 9: minSort(N) = 1+ findMin(O):[5]
     [O=0,N=0] 

### Cost equations --> "Loop" of minSort/1 
* CEs [9] --> Loop 7 
* CEs [8] --> Loop 8 

#### Loops of minSort/1 
* Loop 7: minSort(N) [N=0] 
* Loop 8: minSort(N)->  minSort(N')
                  [N>=1,N=N'+1] 

### Ranking functions of CR minSort(N) 
* RF of phase [8]: [N]

#### Partial ranking functions of CR minSort(N) 
* Partial RF of phase [8]:
  - RF of loop [8:1]:
    N


### Resulting Chains:minSort(N) 
* [[8],7]
* [7]


Computing Bounds
=====================================

#### Cost of loops [6] 

 * loop 6:findMin(N) -> [findMin(N')] 
1
#### Cost of phase [6]:findMin(N) -> [findMin(N')] 
1*it(6)+0
  Such that:it(6) =< N
it(6) =< N-N'
it(6) >= N-N'

#### Cost of chains of findMin(N):
* Chain [[6],5]: 1*it(6)+1
  Such that:it(6) =< N
it(6) >= N

  with precondition: [N>=1] 

* Chain [5]: 1
  with precondition: [N=0] 


#### Cost of loops [8] 

 * loop 8:minSort(N) -> [minSort(N')] 
1*s(2)+2
  Such that:s(2) =< N
s(2) >= N

#### Cost of phase [8]:minSort(N) -> [minSort(N')] 
2*it(8)+1*s(3)+0
  Such that:it(8) =< N-N'
aux(4) =< N
it(8) =< aux(4)
s(3) =< it(8)*aux(4)
aux(1) =< it(8)
aux(2) >= N
it(8) >= N-N'
aux(1) >= it(8)
s(3) >= aux(1)*aux(2)+aux(1)* (1/2)-aux(1)*aux(1)* (1/2)

#### Cost of chains of minSort(N):
* Chain [[8],7]: 2*it(8)+1*s(3)+2
  Such that:aux(5) =< N
it(8) =< aux(5)
s(3) =< it(8)*aux(5)
aux(1) =< it(8)
aux(6) >= N
aux(6) >= aux(6)
it(8) >= aux(6)
aux(1) >= it(8)
s(3) >= aux(1)*aux(6)+aux(1)* (1/2)-aux(1)*aux(1)* (1/2)

  with precondition: [N>=1] 

* Chain [7]: 2
  with precondition: [N=0] 


Closed-form bounds of minSort(N): 
-------------------------------------
* Chain [[8],7] with precondition: [N>=1] 
    - Lower bound: 5/2*N+2+N/2*N 
    - Complexity: n^2
 * Chain [7] with precondition: [N=0] 
    - Lower bound: 2 
    - Complexity: constant
 
### Partitioned lower bound of minSort(N): 
* 2 
 if [N=0]
* 5/2*N+2+N/2*N 
 if [N>=1]
Possible lower bounds : [2,5/2*N+2+N/2*N]
Maximum lower bound complexity: n^2

Time statistics: 
-------------------------------------
* Partial evaluation computed in 4 ms.
* Invariants computed in 15 ms.
   - Backward Invariants 6 ms.
   - Transitive Invariants 4 ms.
* Refinement performed in 16 ms.
* Termination proved in 6 ms.
* Upper bounds computed in 43 ms.
   - Equation cost structures 7 ms.
   - Phase cost structures 21 ms.
   - Chain cost structures 10 ms.
   - Solving cost expressions 3 ms.
* Total analysis performed in 107 ms.


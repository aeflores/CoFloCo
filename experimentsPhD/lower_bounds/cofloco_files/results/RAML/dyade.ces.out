
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [mult/2]
1. recursive : [dyade/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into mult/2
1. SCC is partially evaluated into dyade/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations mult/2 
* CE 5 is refined into CE [6] 
* CE 4 is refined into CE [7] 


#### Refined cost equations mult/2 
* CE 6: mult(N,M) = 1+ mult(N,O)
     [M>=1,M=O+1] 
* CE 7: mult(N,M) = 1
     [M=0] 

### Cost equations --> "Loop" of mult/2 
* CEs [7] --> Loop 5 
* CEs [6] --> Loop 6 

#### Loops of mult/2 
* Loop 5: mult(N,M) [M=0] 
* Loop 6: mult(N,M)->  mult(N,M')
                  [M>=1,M=M'+1] 

### Ranking functions of CR mult(N,M) 
* RF of phase [6]: [M]

#### Partial ranking functions of CR mult(N,M) 
* Partial RF of phase [6]:
  - RF of loop [6:1]:
    M


### Resulting Chains:mult(N,M) 
* [[6],5]
* [5]


### Specialization of cost equations dyade/2 
* CE 3 is refined into CE [8,9] 
* CE 2 is refined into CE [10] 


#### Refined cost equations dyade/2 
* CE 8: dyade(N,M) = 1+ mult(O,M):[[6],5]+ dyade(P,M)
     [M>=1,N>=1,N=P+1] 
* CE 9: dyade(N,M) = 1+ mult(O,P):[5]+ dyade(Q,R)
     [N>=1,N=Q+1,R=0,P=0,M=0] 
* CE 10: dyade(N,M) = 1
     [N=0] 

### Cost equations --> "Loop" of dyade/2 
* CEs [10] --> Loop 7 
* CEs [8] --> Loop 8 
* CEs [9] --> Loop 9 

#### Loops of dyade/2 
* Loop 7: dyade(N,M) [N=0] 
* Loop 8: dyade(N,M)->  dyade(N',M)
                  [M>=1,N>=1,N=N'+1] 
* Loop 9: dyade(N,M)->  dyade(N',M')
                  [N>=1,N=N'+1,M'=0,M=0] 

### Ranking functions of CR dyade(N,M) 
* RF of phase [8]: [N]
* RF of phase [9]: [N]

#### Partial ranking functions of CR dyade(N,M) 
* Partial RF of phase [8]:
  - RF of loop [8:1]:
    N
* Partial RF of phase [9]:
  - RF of loop [9:1]:
    N


### Resulting Chains:dyade(N,M) 
* [[9],7]
* [[8],7]
* [7]


Computing Bounds
=====================================

#### Cost of loops [6] 

 * loop 6:mult(N,M) -> [mult(N',M')] 
1
#### Cost of phase [6]:mult(N,M) -> [mult(N',M')] 
1*it(6)+0
  Such that:it(6) =< M
it(6) =< M-M'
it(6) >= M-M'

#### Cost of chains of mult(N,M):
* Chain [[6],5]: 1*it(6)+1
  Such that:it(6) =< M
it(6) >= M

  with precondition: [M>=1] 

* Chain [5]: 1
  with precondition: [M=0] 


#### Cost of loops [9] 

 * loop 9:dyade(N,M) -> [dyade(N',M')] 
2
#### Cost of phase [9]:dyade(N,M) -> [dyade(N',M')] 
2*it(9)+0
  Such that:it(9) =< N
it(9) =< N-N'
it(9) >= N-N'

#### Cost of loops [8] 

 * loop 8:dyade(N,M) -> [dyade(N',M')] 
1*s(2)+2
  Such that:s(2) =< M'
s(2) >= M'

#### Cost of phase [8]:dyade(N,M) -> [dyade(N',M')] 
2*it(8)+1*s(3)+0
  Such that:it(8) =< N
it(8) =< N-N'
aux(2) =< M
s(3) =< it(8)*aux(2)
aux(1) >= M
aux(3) >= N-N'
it(8) >= aux(3)
s(3) >= aux(3)
s(3) >= it(8)*aux(1)

#### Cost of chains of dyade(N,M):
* Chain [[9],7]: 2*it(9)+1
  Such that:it(9) =< N
it(9) >= N

  with precondition: [M=0,N>=1] 

* Chain [[8],7]: 2*it(8)+1*s(3)+1
  Such that:it(8) =< N
aux(2) =< M
s(3) =< it(8)*aux(2)
aux(3) >= N
aux(1) >= M
it(8) >= aux(3)
s(3) >= aux(3)
s(3) >= it(8)*aux(1)

  with precondition: [N>=1,M>=1] 

* Chain [7]: 1
  with precondition: [N=0] 


Closed-form bounds of dyade(N,M): 
-------------------------------------
* Chain [[9],7] with precondition: [M=0,N>=1] 
    - Lower bound: 2*N+1 
    - Complexity: n
 * Chain [[8],7] with precondition: [N>=1,M>=1] 
    - Lower bound: 2*N+1+M*N 
    - Complexity: n^2
 * Chain [7] with precondition: [N=0] 
    - Lower bound: 1 
    - Complexity: constant
 
### Partitioned lower bound of dyade(N,M): 
* 1 
 if [N=0]
* 2*N+1 
 if [M=0,N>=1]
* 2*N+1+M*N 
 if [N>=1,M>=1]
Possible lower bounds : [1,2*N+1,2*N+1+M*N]
Maximum lower bound complexity: n^2

Time statistics: 
-------------------------------------
* Partial evaluation computed in 5 ms.
* Invariants computed in 27 ms.
   - Backward Invariants 12 ms.
   - Transitive Invariants 8 ms.
* Refinement performed in 26 ms.
* Termination proved in 12 ms.
* Upper bounds computed in 73 ms.
   - Equation cost structures 10 ms.
   - Phase cost structures 40 ms.
   - Chain cost structures 16 ms.
   - Solving cost expressions 3 ms.
* Total analysis performed in 164 ms.



Resource Aware ML, Version 1.3.1, October 2016

Typechecking module ...
  Typecheck successful.
  Stack-based typecheck successful.

Analyzing function append ...

  Trying degree: 1

== append :

  ['a list; 'a list] -> 'a list

  Non-zero annotations of the argument:
     11.00  <--  ([::(*)], [])
      3.00  <--  ([], [])

  Non-zero annotations of result:

  Simplified bound:
     3.00 + 11.00*M
   where
     M is the number of ::-nodes of the 1st component of the argument

--
  Mode:          upper
  Metric:        steps
  Degree:        1
  Run time:      0.04 seconds
  #Constraints:  35

====

Analyzing function flatten ...

  Trying degree: 1, 2, 3

== flatten :

  tree -> int list

  Non-zero annotations of the argument:
     11.00  <--  [Node([]); Node([::(*)])]
     11.00  <--  [Node([::(*)])]
     24.00  <--  [Node([])]
      3.00  <--  []

  Non-zero annotations of result:

  Simplified bound:
     3.00 + 5.50*L*M + 5.50*L*M^2 + 24.00*M
   where
     M is the number of Node-nodes of the argument
     L is the maximal number of ::-nodes in the Node-nodes of the argument

--
  Mode:          upper
  Metric:        steps
  Degree:        3
  Run time:      2.37 seconds
  #Constraints:  3388

====

Analyzing function insert ...

  Trying degree: 1

== insert :

  [int; int list] -> int list

  Non-zero annotations of the argument:
     17.00  <--  (*, [::(*)])
      6.00  <--  (*, [])

  Non-zero annotations of result:

  Simplified bound:
     6.00 + 17.00*M
   where
     M is the number of ::-nodes of the 2nd component of the argument

--
  Mode:          upper
  Metric:        steps
  Degree:        1
  Run time:      0.07 seconds
  #Constraints:  55

====

Analyzing function insertionsort ...

  Trying degree: 1, 2

== insertionsort :

  int list -> int list

  Non-zero annotations of the argument:
     17.00  <--  [::(*); ::(*)]
     16.00  <--  [::(*)]
      3.00  <--  []

  Non-zero annotations of result:

  Simplified bound:
     3.00 + 7.50*M + 8.50*M^2
   where
     M is the number of ::-nodes of the argument

--
  Mode:          upper
  Metric:        steps
  Degree:        2
  Run time:      0.24 seconds
  #Constraints:  181

====

Analyzing function flattensort ...

  Trying degree: 1, 2, 3, 4

== flattensort :

  tree -> int list

  Non-zero annotations of the argument:
     17.00  <--  [Node([::(*)]); Node([::(*)])]
     11.00  <--  [Node([]); Node([::(*)])]
     17.00  <--  [Node([::(*); ::(*)])]
     27.00  <--  [Node([::(*)])]
     24.00  <--  [Node([])]
     11.00  <--  []

  Non-zero annotations of result:

  Simplified bound:
     11.00 + 13.00*L*M + 5.50*L*M^2 + 8.50*L^2*M^2
                               + 24.00*M
   where
     M is the number of Node-nodes of the argument
     L is the maximal number of ::-nodes in the Node-nodes of the argument

--
  Mode:          upper
  Metric:        steps
  Degree:        4
  Run time:      9.11 seconds
  #Constraints:  19153

====


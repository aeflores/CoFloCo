
Abs program loaded in 15 ms.

Rule based representation generated in 10 ms.

Rule based representation stored in /tmp/costabs/rbr.rbr

RBR properties stored in /tmp/costabs/rbr.properties

Class invariants generated and loaded in 0 ms.

Abstract compilation performed in 98 ms.

Cost relation system stored in /tmp/costabs/crs.crs

Generated 155 equations 
entry('size'(A,B,C):[]).
entry('check_lists'(A,B,C,D,E):[]).
entry('check_mat'(A,B,C,D,E,F):[]).
entry('check_matrix'(A,B,C,D,E):[]).
entry('construct_matrix'(A,B,C,D,E,F,G,H,I):[]).
entry('get_elemL'(A,B,C,D,E,F):[]).
entry('get_elemMat'(A,B,C,D,E,F,G):[]).
entry('op'(A,B,C,D):[]).
entry('rec_list'(A,B,C,D,E,F,G):[]).
entry('rec_mat'(A,B,C,D,E,F,G,H,I,J):[]).
entry('check_sanity'(A,B,C,D,E,F,G,H,I):[]).
entry('plus'(A,B,C,D,E,F,G,H,I,J,K,L):[]).
entry('minus'(A,B,C,D,E,F,G,H,I,J,K,L):[]).
entry('append'(A,B,C,D,E):[]).
entry('append_row'(A,B,C,D,E,F,G,H):[]).
entry('transpose_helper'(A,B,C,D,E,F,G,H,I):[]).
entry('transpose'(A,B,C,D,E,F):[]).
entry('reverse_helper'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O):[]).
entry('reverseL'(A,B,C,D,E,F,G,H,I,J):[]).
entry('reverse_rows_helper'(A,B,C,D,E,F,G,H,I):[]).
entry('reverse_rows'(A,B,C,D,E,F):[]).
entry('append_start'(A,B,C,D,E,F,G,H):[]).
entry('new_transpose_helper'(A,B,C,D,E,F,G,H,I):[]).
entry('new_transpose'(A,B,C,D,E,F):[]).
entry('prod'(A,B,C,D,E):[]).
entry('prod_mat'(A,B,C,D,E,F,G):[]).
entry('mat_mult'(A,B,C,D,E,F,G,H,I):[]).
entry('lineMult'(A,B,C,D,E,F,G):[]).
entry('computeLine'(A,B,C,D,E,F,G,H,I):[]).
entry('mat_mult_jan'(A,B,C,D,E,F,G,H,I):[]).
entry('check_mult_sanity'(A,B,C,D,E,F,G,H,I):[]).
entry('mult'(A,B,C,D,E,F,G,H,I,J,K,L):[]).
entry('evaluate'(A,B,C,D,E,F,G,H):[]).
entry('del'(A,B,C,D,E):[]).
entry('submat'(A,B,C,D,E,F,G,H):[]).
entry('remFirstRow'(A,B,C,D,E,F):[]).
input_output_vars('and_op'(A,B,C),[A,B],[C]).
input_output_vars('append'(A,B,C,D,E),[A,B,C],[D,E]).
input_output_vars('append_row'(A,B,C,D,E,F,G,H),[A,B,C,D,E],[F,G,H]).
input_output_vars('append_start'(A,B,C,D,E,F,G,H),[A,B,C,D,E],[F,G,H]).
input_output_vars('case_0'(A,B,C,D,E,F,G),[A,B,C,D,E],[F,G]).
input_output_vars('case_1'(A,B,C,D,E),[A,B,C,D],[E]).
input_output_vars('case_10'(A,B,C,D,E,F,G),[A,B,C,D,E,F],[G]).
input_output_vars('case_11'(A,B,C,D,E),[A,B,C,D],[E]).
input_output_vars('case_12'(A,B,C,D,E,F,G),[A,B,C,D,E],[F,G]).
input_output_vars('case_13'(A,B,C,D,E,F,G,H,I,J),[A,B,C,D,E,F,G,H],[I,J]).
input_output_vars('case_14'(A,B,C,D,E,F,G,H,I,J),[A,B,C,D,E,F,G],[H,I,J]).
input_output_vars('case_15'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O),[A,B,C,D,E,F,G,H,I,J,K,L],[M,N,O]).
input_output_vars('case_16'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F,G,H],[I]).
input_output_vars('case_17'(A,B,C,D,E,F,G,H,I,J,K),[A,B,C,D,E,F,G,H,I,J],[K]).
input_output_vars('case_18'(A,B,C,D,E,F,G,H,I,J,K,L,M),[A,B,C,D,E,F,G,H,I],[J,K,L,M]).
input_output_vars('case_19'(A,B,C,D,E,F,G,H,I,J,K,L),[A,B,C,D,E,F,G,H],[I,J,K,L]).
input_output_vars('case_2'(A,B,C,D,E,F,G,H,I,J,K),[A,B,C,D,E,F,G,H,I,J],[K]).
input_output_vars('case_20'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q),[A,B,C,D,E,F,G,H,I,J,K,L,M],[N,O,P,Q]).
input_output_vars('case_21'(A,B,C,D,E,F,G,H,I,J,K,L,M),[A,B,C,D,E,F,G,H,I],[J,K,L,M]).
input_output_vars('case_22'(A,B,C,D,E,F,G,H,I,J,K,L),[A,B,C,D,E,F,G,H],[I,J,K,L]).
input_output_vars('case_23'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q),[A,B,C,D,E,F,G,H,I,J,K,L,M],[N,O,P,Q]).
input_output_vars('case_24'(A,B,C,D,E),[A,B,C],[D,E]).
input_output_vars('case_25'(A,B,C,D,E,F,G,H),[A,B,C,D,E],[F,G,H]).
input_output_vars('case_26'(A,B,C,D,E,F,G,H,I,J,K),[A,B,C,D,E,F,G,H],[I,J,K]).
input_output_vars('case_27'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F],[G,H,I]).
input_output_vars('case_28'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O),[A,B,C,D,E,F,G,H,I,J],[K,L,M,N,O]).
input_output_vars('case_29'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F],[G,H,I]).
input_output_vars('case_3'(A,B,C,D,E,F,G),[A,B,C,D,E,F],[G]).
input_output_vars('case_30'(A,B,C,D,E,F,G,H),[A,B,C,D,E],[F,G,H]).
input_output_vars('case_31'(A,B,C,D,E,F,G,H,I,J,K),[A,B,C,D,E,F,G,H],[I,J,K]).
input_output_vars('case_32'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F],[G,H,I]).
input_output_vars('case_33'(A,B,C,D,E),[A,B,C,D],[E]).
input_output_vars('case_34'(A,B,C,D,E,F,G,H),[A,B,C,D,E,F,G],[H]).
input_output_vars('case_35'(A,B,C,D,E,F,G),[A,B,C,D,E],[F,G]).
input_output_vars('case_36'(A,B,C,D,E,F,G,H,I,J,K,L),[A,B,C,D,E,F,G,H,I],[J,K,L]).
input_output_vars('case_37'(A,B,C,D,E,F,G),[A,B,C,D,E],[F,G]).
input_output_vars('case_38'(A,B,C,D,E,F,G,H,I,J),[A,B,C,D,E,F,G,H],[I,J]).
input_output_vars('case_39'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F,G],[H,I]).
input_output_vars('case_4'(A,B,C,D,E),[A,B,C,D],[E]).
input_output_vars('case_40'(A,B,C,D,E,F,G,H,I,J,K,L),[A,B,C,D,E,F,G,H,I,J],[K,L]).
input_output_vars('case_41'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F],[G,H,I]).
input_output_vars('case_42'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F,G,H],[I]).
input_output_vars('case_43'(A,B,C,D,E,F,G,H,I,J),[A,B,C,D,E,F,G,H,I],[J]).
input_output_vars('case_44'(A,B,C,D,E,F,G,H,I,J,K,L,M),[A,B,C,D,E,F,G,H,I],[J,K,L,M]).
input_output_vars('case_45'(A,B,C,D,E,F,G,H,I,J,K,L),[A,B,C,D,E,F,G,H],[I,J,K,L]).
input_output_vars('case_46'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q),[A,B,C,D,E,F,G,H,I,J,K,L,M],[N,O,P,Q]).
input_output_vars('case_47'(A,B,C,D,E,F,G,H),[A,B,C,D],[E,F,G,H]).
input_output_vars('case_48'(A,B,C,D,E),[A,B,C],[D,E]).
input_output_vars('case_49'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F,G],[H,I]).
input_output_vars('case_5'(A,B,C,D,E,F,G,H,I,J),[A,B,C,D,E,F],[G,H,I,J]).
input_output_vars('case_50'(A,B,C,D,E,F,G,H),[A,B,C,D,E],[F,G,H]).
input_output_vars('case_51'(A,B,C,D,E,F,G,H,I,J,K,L,M,N),[A,B,C,D,E,F,G,H,I,J,K],[L,M,N]).
input_output_vars('case_52'(A,B,C,D,E,F),[A,B,C],[D,E,F]).
input_output_vars('case_53'(A,B,C),[A,B],[C]).
input_output_vars('case_6'(A,B,C,D),[A,B,C],[D]).
input_output_vars('case_7'(A,B,C,D,E,F,G,H),[A,B,C,D,E,F,G],[H]).
input_output_vars('case_8'(A,B,C,D,E,F),[A,B,C,D],[E,F]).
input_output_vars('case_9'(A,B,C,D,E,F,G,H,I,J,K,L),[A,B,C,D,E,F,G,H,I,J],[K,L]).
input_output_vars('check_lists'(A,B,C,D,E),[A,B,C,D],[E]).
input_output_vars('check_mat'(A,B,C,D,E,F),[A,B,C,D,E],[F]).
input_output_vars('check_matrix'(A,B,C,D,E),[A,B,C,D],[E]).
input_output_vars('check_mult_sanity'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F,G,H],[I]).
input_output_vars('check_sanity'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F,G,H],[I]).
input_output_vars('computeLine'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F,G],[H,I]).
input_output_vars('construct_matrix'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E],[F,G,H,I]).
input_output_vars('del'(A,B,C,D,E),[A,B,C],[D,E]).
input_output_vars('eq'(A,B,C),[A,B],[C]).
input_output_vars('evaluate'(A,B,C,D,E,F,G,H),[A,B,C,D],[E,F,G,H]).
input_output_vars('geq'(A,B,C),[A,B],[C]).
input_output_vars('get_elem'(A,B,C,D),[A,B,C],[D]).
input_output_vars('get_elemL'(A,B,C,D,E,F),[A,B,C,D],[E,F]).
input_output_vars('get_elemMat'(A,B,C,D,E,F,G),[A,B,C,D,E,F],[G]).
input_output_vars('gt'(A,B,C),[A,B],[C]).
input_output_vars('leq'(A,B,C),[A,B],[C]).
input_output_vars('lineMult'(A,B,C,D,E,F,G),[A,B,C,D,E],[F,G]).
input_output_vars('lt'(A,B,C),[A,B],[C]).
input_output_vars('mat_mult'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F],[G,H,I]).
input_output_vars('mat_mult_jan'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F],[G,H,I]).
input_output_vars('maxNorm'(A,B,C),[A,B],[C]).
input_output_vars('minus'(A,B,C,D,E,F,G,H,I,J,K,L),[A,B,C,D,E,F,G,H],[I,J,K,L]).
input_output_vars('mult'(A,B,C,D,E,F,G,H,I,J,K,L),[A,B,C,D,E,F,G,H],[I,J,K,L]).
input_output_vars('neg'(A,B),[A],[B]).
input_output_vars('neq'(A,B,C),[A,B],[C]).
input_output_vars('new_transpose'(A,B,C,D,E,F),[A,B,C],[D,E,F]).
input_output_vars('new_transpose_helper'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F],[G,H,I]).
input_output_vars('op'(A,B,C,D),[A,B,C],[D]).
input_output_vars('or'(A,B,C),[A,B],[C]).
input_output_vars('plus'(A,B,C,D,E,F,G,H,I,J,K,L),[A,B,C,D,E,F,G,H],[I,J,K,L]).
input_output_vars('prod'(A,B,C,D,E),[A,B,C,D],[E]).
input_output_vars('prod_mat'(A,B,C,D,E,F,G),[A,B,C,D,E],[F,G]).
input_output_vars('rec_list'(A,B,C,D,E,F,G),[A,B,C,D,E],[F,G]).
input_output_vars('rec_mat'(A,B,C,D,E,F,G,H,I,J),[A,B,C,D,E,F,G],[H,I,J]).
input_output_vars('remFirstRow'(A,B,C,D,E,F),[A,B,C],[D,E,F]).
input_output_vars('reverseL'(A,B,C,D,E,F,G,H,I,J),[A,B,C,D,E],[F,G,H,I,J]).
input_output_vars('reverse_helper'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O),[A,B,C,D,E,F,G,H,I,J],[K,L,M,N,O]).
input_output_vars('reverse_rows'(A,B,C,D,E,F),[A,B,C],[D,E,F]).
input_output_vars('reverse_rows_helper'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F],[G,H,I]).
input_output_vars('size'(A,B,C),[A,B],[C]).
input_output_vars('sizeL'(A,B,C,D,E,F,G),[A,B,C,D,E],[F,G]).
input_output_vars('submat'(A,B,C,D,E,F,G,H),[A,B,C,D,E],[F,G,H]).
input_output_vars('transpose'(A,B,C,D,E,F),[A,B,C],[D,E,F]).
input_output_vars('transpose_helper'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F],[G,H,I]).
eq('eq',[A,B,C],0,[],[A=B,C=1,A>=0,B>=0,C>=0]).
eq('eq',[A,B,C],0,[],[A>=B+1,C=0,A>=0,B>=0,C>=0]).
eq('eq',[A,B,C],0,[],[B>=A+1,C=0,A>=0,B>=0,C>=0]).
eq('neq',[A,B,C],0,[],[A=B,C=0,A>=0,B>=0,C>=0]).
eq('neq',[A,B,C],0,[],[A>=B+1,C=1,A>=0,B>=0,C>=0]).
eq('neq',[A,B,C],0,[],[B>=A+1,C=1,A>=0,B>=0,C>=0]).
eq('lt',[A,B,C],0,[],[B-A>=1,C=1,A>=0,B>=0,C>=0]).
eq('lt',[A,B,C],0,[],[B=<A,C=0,A>=0,B>=0,C>=0]).
eq('leq',[A,B,C],0,[],[A=<B,C=1,A>=0,B>=0,C>=0]).
eq('leq',[A,B,C],0,[],[A-B>=1,C=0,A>=0,B>=0,C>=0]).
eq('gt',[A,B,C],0,[],[A-B>=1,C=1,A>=0,B>=0,C>=0]).
eq('gt',[A,B,C],0,[],[A=<B,C=0,A>=0,B>=0,C>=0]).
eq('geq',[A,B,C],0,[],[B=<A,C=1,A>=0,B>=0,C>=0]).
eq('geq',[A,B,C],0,[],[B-A>=1,C=0,A>=0,B>=0,C>=0]).
eq('neg',[A,B],0,[],[A=0,B=1,A>=0,B>=0]).
eq('neg',[A,B],0,[],[A=1,B=0,A>=0,B>=0]).
eq('and_op',[A,B,C],0,[],[A=0,C=0,A>=0,B>=0,C>=0]).
eq('and_op',[A,B,C],0,[],[A=1,C=B,A>=0,B>=0,C>=0]).
eq('or',[A,B,C],0,[],[A=1,C=1,A>=0,B>=0,C>=0]).
eq('or',[A,B,C],0,[],[A=0,C=B,A>=0,B>=0,C>=0]).
eq('maxNorm',[A,B,A],0,[],[A>=1+B,A>=0,B>=0,A>=0]).
eq('maxNorm',[A,B,B],0,[],[A=<B,A>=0,B>=0,B>=0]).
eq('case_0',[A,B,C,D,E,F,G],2,[],[D=0,C=1,A=1,G=0,F=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_0',[A,B,C,D,E,F,G],5,['sizeL'(H,I,J,K,L,M,N)],[E=O+L,D=P+K,C=J+1,B=Q+I,A=H+1,J>=1,H>=1,P>=1,R=1,S=1,G=R+N,F=S+M,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('sizeL',[A,B,C,D,E,F,G],1,['case_0'(A,B,C,D,E,F,G)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_1',[A,B,C,D,E],2,[],[B=0,A=1,E=1,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_2',[A,B,C,D,E,F,G,H,I,J,K],2,['check_lists'(H,I,J,E,K)],[A=E,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0]).
eq('case_2',[A,B,C,D,E,F,G,H,I,J,K],2,[],[A>=E+1,K=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0]).
eq('case_1',[A,B,C,D,E],4,['sizeL'(F,G,H,I,J,K,L),'case_2'(K,A,B,C,D,F,G,M,N,O,E)],[C=G+O,B=F+N,A=M+1,M>=1,F>=1,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('check_lists',[A,B,C,D,E],1,['case_1'(A,B,C,D,E)],[A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_3',[A,B,C,D,E,F,G],2,['check_lists'(D,E,F,C,G)],[A=B,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_3',[A,B,C,D,E,F,G],2,[],[A>=B+1,G=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('check_mat',[A,B,C,D,E,F],2,['sizeL'(G,H,C,D,E,I,J),'case_3'(J,A,B,C,D,E,F)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0]).
eq('case_4',[A,B,C,D,E],2,['check_mat'(F,G,H,I,J,E)],[D=1,C=F+G+J,B=I,A=H,H>=1,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('check_matrix',[A,B,C,D,E],1,['case_4'(A,B,C,D,E)],[A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_5',[A,B,C,D,E,F,G,H,I,J],2,[],[A=1,J=1,I=B+C+F,H=E,G=D,D>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('case_5',[A,B,C,D,E,F,G,H,I,J],6,[],[A=0,K=0,L=0,M=0,N=1,J=1,I=K+L+O,H=M,G=N,N>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('construct_matrix',[A,B,C,D,E,F,G,H,I],2,['check_mat'(A,B,C,D,E,J),'case_5'(J,A,B,C,D,E,F,G,H,I)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('case_7',[A,B,C,D,E,F,G,E],1,[],[D=A,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,E>=0]).
eq('case_7',[A,B,C,D,E,F,G,H],4,['get_elem'(F,G,I,H)],[D>=A+1,J=1,I=D-J,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('case_6',[A,B,C,D],3,['case_7'(E,A,B,C,F,G,H,D)],[B=F+H,A=G+1,G>=1,E=0,A>=0,B>=0,C>=0,D>=0]).
eq('get_elem',[A,B,C,D],1,['case_6'(A,B,C,D)],[A>=0,B>=0,C>=0,D>=0]).
eq('case_9',[A,B,C,D,E,F,G,H,I,J,F,G],1,[],[E=A,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,F>=0,G>=0]).
eq('case_9',[A,B,C,D,E,F,G,H,I,J,K,L],4,['get_elemL'(H,I,J,M,K,L)],[E>=A+1,N=1,M=E-N,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0]).
eq('case_8',[A,B,C,D,E,F],3,['case_9'(G,A,B,C,D,H,I,J,K,L,E,F)],[C=I+L,B=H+K,A=J+1,J>=1,H>=1,G=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0]).
eq('get_elemL',[A,B,C,D,E,F],1,['case_8'(A,B,C,D,E,F)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0]).
eq('case_10',[A,B,C,D,E,F,G],3,['get_elemL'(H,I,J,E,K,L),'get_elem'(K,L,F,G)],[D=1,C=M+M+J,B=I,A=H,H>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('get_elemMat',[A,B,C,D,E,F,G],1,['case_10'(A,B,C,D,E,F,G)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_11',[A,B,C,D,E],2,[],[B>=A+1,E=C+D,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_11',[A,B,C,D,E],2,[],[A>=B,E=C-D,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('op',[A,B,C,D],2,['case_11'(E,A,B,C,D)],[E=0,A>=0,B>=0,C>=0,D>=0]).
eq('case_12',[A,B,C,D,E,F,G],2,[],[A=1,F=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_13',[A,B,C,D,E,F,G,H,I,J],2,[],[C=1,I=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('case_13',[A,B,C,D,E,F,G,H,I,J],5,['op'(E,F,K,L),'rec_list'(G,H,M,N,E,O,P)],[D=K+N,C=M+1,M>=1,J=L+P,I=O+1,O>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('case_12',[A,B,C,D,E,F,G],3,['case_13'(A,B,C,D,E,H,I,J,F,G)],[B=H+J,A=I+1,I>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('rec_list',[A,B,C,D,E,F,G],1,['case_12'(A,B,C,D,E,F,G)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_14',[A,B,C,D,E,F,G,H,I,J],2,[],[B=0,A=1,I=0,H=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('case_15',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O],2,[],[E=0,D=1,N=0,M=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0]).
eq('case_15',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O],5,['rec_list'(H,I,P,Q,G,R,S),'rec_mat'(J,K,L,T,U,V,G,W,X,Y)],[F=Q+V,E=P+U,D=T+1,T>=1,P>=1,O=S+Y,N=R+X,M=W+1,W>=1,R>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0]).
eq('case_14',[A,B,C,D,E,F,G,H,I,J],3,['case_15'(A,B,C,D,E,F,G,K,L,M,N,O,H,I,J)],[C=L+O,B=K+N,A=M+1,M>=1,K>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('rec_mat',[A,B,C,D,E,F,G,H,I,J],1,['case_14'(A,B,C,D,E,F,G,H,I,J)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('case_17',[A,B,C,D,E,F,G,H,I,J,K],8,['check_matrix'(A,B,C,D,L),'check_matrix'(E,F,G,H,M),'and_op'(L,M,N),'eq'(I,O,P),'and_op'(N,P,Q),'eq'(J,R,S),'and_op'(Q,S,K)],[H=1,G=O+R+T,F=U,U>=1,E=V,V>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0]).
eq('case_16',[A,B,C,D,E,F,G,H,I],2,['case_17'(A,B,C,D,E,F,G,H,J,K,I)],[D=1,C=J+K+L,B=M,M>=1,A=N,N>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('check_sanity',[A,B,C,D,E,F,G,H,I],1,['case_16'(A,B,C,D,E,F,G,H,I)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('case_20',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q],4,['rec_mat'(K,L,M,R,S,T,U,V,W,X),'construct_matrix'(I,J,V,W,X,N,O,P,Q)],[H=1,G=Y+Y+T,F=S,E=R,R>=1,U=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0]).
eq('case_19',[A,B,C,D,E,F,G,H,I,J,K,L],2,['case_20'(A,B,C,D,E,F,G,H,M,N,O,P,Q,I,J,K,L)],[D=1,C=M+N+Q,B=P,A=O,O>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0]).
eq('case_18',[A,B,C,D,E,F,G,H,I,J,K,L,M],2,['case_19'(B,C,D,E,F,G,H,I,J,K,L,M)],[A=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0]).
eq('case_18',[A,B,C,D,E,F,G,H,I,J,K,L,M],6,[],[A=0,N=0,O=0,P=0,Q=1,M=1,L=N+O+R,K=P,J=Q,Q>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0]).
eq('plus',[A,B,C,D,E,F,G,H,I,J,K,L],2,['check_sanity'(A,B,C,D,E,F,G,H,M),'case_18'(M,A,B,C,D,E,F,G,H,I,J,K,L)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0]).
eq('case_23',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q],6,['rec_mat'(K,L,M,R,S,T,U,V,W,X),'construct_matrix'(I,J,Y,Z,A1,B1,C1,D1,E1)],[H=1,G=F1+F1+T,F=S,E=R,R>=1,U= -1,A1=X,Z=W,Y=V,V>=1,Q=E1,P=D1,O=C1,N=B1,E1>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0]).
eq('case_22',[A,B,C,D,E,F,G,H,I,J,K,L],2,['case_23'(A,B,C,D,E,F,G,H,M,N,O,P,Q,I,J,K,L)],[D=1,C=M+N+Q,B=P,A=O,O>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0]).
eq('case_21',[A,B,C,D,E,F,G,H,I,J,K,L,M],2,['case_22'(B,C,D,E,F,G,H,I,J,K,L,M)],[A=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0]).
eq('case_21',[A,B,C,D,E,F,G,H,I,J,K,L,M],6,[],[A=0,N=0,O=0,P=0,Q=1,M=1,L=N+O+R,K=P,J=Q,Q>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0]).
eq('minus',[A,B,C,D,E,F,G,H,I,J,K,L],2,['check_sanity'(A,B,C,D,E,F,G,H,M),'case_21'(M,A,B,C,D,E,F,G,H,I,J,K,L)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0]).
eq('case_24',[A,B,C,D,E],3,[],[A=1,F=1,E=C+G,D=F+1,F>=1,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_24',[A,B,C,D,E],4,['append'(F,G,C,H,I)],[B=J+G,A=F+1,F>=1,E=J+I,D=H+1,H>=1,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('append',[A,B,C,D,E],1,['case_24'(A,B,C,D,E)],[A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_25',[A,B,C,D,E,A,B,C],1,[],[D=1,A>=0,B>=0,C>=0,D>=0,E>=0,A>=0,B>=0,C>=0]).
eq('case_26',[A,B,C,D,E,F,G,H,I,J,K],6,['append_row'(L,M,N,G,H,O,P,Q)],[B=0,A=1,R=1,S=F+T,U=R+1,R>=1,M=0,L=1,K=S+Q,J=U+P,I=O+1,O>=1,U>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0]).
eq('case_26',[A,B,C,D,E,F,G,H,I,J,K],5,['append'(L,M,F,N,O),'append_row'(P,Q,R,G,H,S,T,U)],[C=M+R,B=L+Q,A=P+1,P>=1,L>=1,K=O+U,J=N+T,I=S+1,S>=1,N>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0]).
eq('case_25',[A,B,C,D,E,F,G,H],3,['case_26'(A,B,C,D,E,I,J,K,F,G,H)],[E=I+K,D=J+1,J>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('append_row',[A,B,C,D,E,F,G,H],1,['case_25'(A,B,C,D,E,F,G,H)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('case_27',[A,B,C,D,E,F,D,E,F],1,[],[B=0,A=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,D>=0,E>=0,F>=0]).
eq('case_27',[A,B,C,D,E,F,G,H,I],4,['append_row'(D,E,F,J,K,L,M,N),'transpose_helper'(O,P,Q,L,M,N,G,H,I)],[C=K+Q,B=J+P,A=O+1,O>=1,J>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('transpose_helper',[A,B,C,D,E,F,G,H,I],1,['case_27'(A,B,C,D,E,F,G,H,I)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('transpose',[A,B,C,D,E,F],2,['transpose_helper'(A,B,C,G,H,I,D,E,F)],[H=0,G=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0]).
eq('case_28',[A,B,C,D,E,F,G,H,I,J,F,G,H,I,J],1,[],[E=0,D=1,B=0,A=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('case_28',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O],4,['reverse_helper'(P,Q,R,S,T,U,V,W,X,Y,K,L,M,N,O)],[E=Z+T,D=S+1,C=A1+R,B=B1+Q,A=P+1,S>=1,P>=1,Z>=1,B1>=1,Y=Z+J,X=I+1,W=A1+H,V=B1+G,U=F+1,I>=1,F>=1,Z>=1,B1>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0]).
eq('reverse_helper',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O],1,['case_28'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0]).
eq('reverseL',[A,B,C,D,E,F,G,H,I,J],2,['reverse_helper'(A,B,C,D,E,K,L,M,N,O,F,G,H,I,J)],[O=0,N=1,L=0,K=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('case_29',[A,B,C,D,E,F,D,E,F],1,[],[B=0,A=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,D>=0,E>=0,F>=0]).
eq('case_29',[A,B,C,D,E,F,G,H,I],5,['reverseL'(J,K,L,M,N,O,P,Q,R,S),'reverse_rows_helper'(T,U,V,O,P,Q,G,H,I)],[C=W+V,B=X+U,A=T+1,T>=1,X>=1,L=W+F,K=X+E,J=D+1,D>=1,X>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('reverse_rows_helper',[A,B,C,D,E,F,G,H,I],1,['case_29'(A,B,C,D,E,F,G,H,I)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('reverse_rows',[A,B,C,D,E,F],3,['reverse_rows_helper'(A,B,C,G,H,I,J,K,L),'reverseL'(J,K,L,M,N,D,E,F,O,P)],[H=0,G=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0]).
eq('case_30',[A,B,C,D,E,F,G,H],2,['reverse_rows'(A,B,C,F,G,H)],[D=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('case_31',[A,B,C,D,E,F,G,H,I,J,K],6,['append_start'(L,M,N,G,H,O,P,Q)],[B=0,A=1,R=1,S=F+T,U=R+1,R>=1,M=0,L=1,K=S+Q,J=U+P,I=O+1,O>=1,U>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0]).
eq('case_31',[A,B,C,D,E,F,G,H,I,J,K],5,['append_start'(L,M,N,G,H,O,P,Q)],[C=R+N,B=S+M,A=L+1,L>=1,S>=1,T=F+R,U=S+1,S>=1,K=T+Q,J=U+P,I=O+1,O>=1,U>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0]).
eq('case_30',[A,B,C,D,E,F,G,H],3,['case_31'(A,B,C,D,E,I,J,K,F,G,H)],[E=I+K,D=J+1,J>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('append_start',[A,B,C,D,E,F,G,H],1,['case_30'(A,B,C,D,E,F,G,H)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('case_32',[A,B,C,D,E,F,D,E,F],1,[],[B=0,A=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,D>=0,E>=0,F>=0]).
eq('case_32',[A,B,C,D,E,F,G,H,I],4,['append_start'(D,E,F,J,K,L,M,N),'new_transpose_helper'(O,P,Q,L,M,N,G,H,I)],[C=K+Q,B=J+P,A=O+1,O>=1,J>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('new_transpose_helper',[A,B,C,D,E,F,G,H,I],1,['case_32'(A,B,C,D,E,F,G,H,I)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('new_transpose',[A,B,C,D,E,F],3,['new_transpose_helper'(A,B,C,G,H,I,J,K,L),'reverse_rows'(J,K,L,D,E,F)],[H=0,G=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0]).
eq('case_33',[A,B,C,D,E],2,[],[A=1,E=0,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_34',[A,B,C,D,E,F,G,H],2,[],[C=1,H=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('case_34',[A,B,C,D,E,F,G,H],5,['prod'(F,G,I,J,K)],[D=L+J,C=I+1,I>=1,M=N,H=M+K,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('case_33',[A,B,C,D,E],3,['case_34'(A,B,C,D,F,G,H,E)],[B=F+H,A=G+1,G>=1,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('prod',[A,B,C,D,E],1,['case_33'(A,B,C,D,E)],[A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_35',[A,B,C,D,E,F,G],2,[],[D=0,C=1,F=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_35',[A,B,C,D,E,F,G],5,['prod'(A,B,H,I,J),'prod_mat'(A,B,K,L,M,N,O)],[E=I+M,D=H+L,C=K+1,K>=1,H>=1,G=J+O,F=N+1,N>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('prod_mat',[A,B,C,D,E,F,G],1,['case_35'(A,B,C,D,E,F,G)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_36',[A,B,C,D,E,F,G,H,I,J,K,L],2,[],[E=0,D=1,K=0,J=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0]).
eq('case_36',[A,B,C,D,E,F,G,H,I,J,K,L],5,['prod_mat'(M,N,A,B,C,O,P),'mat_mult'(Q,R,S,G,H,I,T,U,V)],[F=N+S,E=M+R,D=Q+1,Q>=1,M>=1,L=P+V,K=O+U,J=T+1,T>=1,O>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0]).
eq('mat_mult',[A,B,C,D,E,F,G,H,I],4,['transpose'(D,E,F,J,K,L),'case_36'(M,N,O,A,B,C,D,E,F,P,Q,R)],[O=L,N=K,M=J,J>=1,I=R,H=Q,G=P,P>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('case_37',[A,B,C,D,E,F,G],2,[],[B=1,F=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_38',[A,B,C,D,E,F,G,H,I,J],5,['lineMult'(A,G,H,K,L,M,N)],[D=1,O=P,K=1,J=O+N,I=M+1,M>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('case_38',[A,B,C,D,E,F,G,H,I,J],6,['lineMult'(A,G,H,K,L,M,N)],[E=O+L,D=K+1,K>=1,P=Q,R=P+O,J=R+N,I=M+1,M>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('case_37',[A,B,C,D,E,F,G],3,['case_38'(A,B,C,D,E,H,I,J,F,G)],[C=H+J,B=I+1,I>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('lineMult',[A,B,C,D,E,F,G],1,['case_37'(A,B,C,D,E,F,G)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_39',[A,B,C,D,E,F,G,F,G],1,[],[A=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,F>=0,G>=0]).
eq('case_40',[A,B,C,D,E,F,G,H,I,J,K,L],2,[],[D=0,C=1,K=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0]).
eq('case_40',[A,B,C,D,E,F,G,H,I,J,K,L],4,['lineMult'(H,M,N,F,G,O,P),'computeLine'(I,J,Q,R,S,O,P,K,L)],[E=N+S,D=M+R,C=Q+1,Q>=1,M>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0]).
eq('case_39',[A,B,C,D,E,F,G,H,I],3,['case_40'(A,B,C,D,E,F,G,J,K,L,H,I)],[B=J+L,A=K+1,K>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('computeLine',[A,B,C,D,E,F,G,H,I],1,['case_39'(A,B,C,D,E,F,G,H,I)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('case_41',[A,B,C,D,E,F,G,H,I],2,[],[B=0,A=1,H=0,G=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('case_41',[A,B,C,D,E,F,G,H,I],6,['computeLine'(J,K,D,E,F,L,M,N,O),'mat_mult_jan'(P,Q,R,D,E,F,S,T,U)],[C=K+R,B=J+Q,A=P+1,P>=1,J>=1,L=1,I=O+U,H=N+T,G=S+1,S>=1,N>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('mat_mult_jan',[A,B,C,D,E,F,G,H,I],1,['case_41'(A,B,C,D,E,F,G,H,I)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('case_43',[A,B,C,D,E,F,G,H,I,J],2,['eq'(I,K,J)],[H=1,G=L+K+L,F=M,M>=1,E=N,N>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('case_42',[A,B,C,D,E,F,G,H,I],2,['case_43'(A,B,C,D,E,F,G,H,J,I)],[D=1,C=K+J+K,B=L,L>=1,A=M,M>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('check_mult_sanity',[A,B,C,D,E,F,G,H,I],5,['check_matrix'(A,B,C,D,J),'check_matrix'(E,F,G,H,K),'and_op'(J,K,L),'case_42'(A,B,C,D,E,F,G,H,M),'and_op'(L,M,I)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('case_46',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q],5,['mat_mult_jan'(K,L,M,R,S,T,U,V,W),'construct_matrix'(I,J,X,Y,Z,A1,B1,C1,D1)],[H=1,G=E1+F1+T,F=S,E=R,R>=1,Z=W,Y=V,X=U,U>=1,Q=D1,P=C1,O=B1,N=A1,D1>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0]).
eq('case_45',[A,B,C,D,E,F,G,H,I,J,K,L],2,['case_46'(A,B,C,D,E,F,G,H,M,N,O,P,Q,I,J,K,L)],[D=1,C=M+N+Q,B=P,A=O,O>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0]).
eq('case_44',[A,B,C,D,E,F,G,H,I,J,K,L,M],2,['case_45'(B,C,D,E,F,G,H,I,J,K,L,M)],[A=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0]).
eq('case_44',[A,B,C,D,E,F,G,H,I,J,K,L,M],6,[],[A=0,N=0,O=0,P=0,Q=1,M=1,L=N+O+R,K=P,J=Q,Q>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0]).
eq('mult',[A,B,C,D,E,F,G,H,I,J,K,L],2,['check_mult_sanity'(A,B,C,D,E,F,G,H,M),'case_44'(M,A,B,C,D,E,F,G,H,I,J,K,L)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0]).
eq('case_47',[A,B,C,D,E,F,G,H],2,['construct_matrix'(I,J,K,L,M,E,F,G,H)],[D=1,C=I+J+M,B=L,A=K,K>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('case_47',[A,B,C,D,E,F,G,H],5,['evaluate'(I,J,K,L,M,N,O,P),'evaluate'(Q,R,S,T,U,V,W,X),'plus'(M,N,O,P,U,V,W,X,E,F,G,H)],[D=T+L+1,C=K+S,B=J+R,A=I+Q,T>=1,L>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('case_47',[A,B,C,D,E,F,G,H],6,['evaluate'(I,J,K,L,M,N,O,P),'evaluate'(Q,R,S,T,U,V,W,X),'minus'(M,N,O,P,U,V,W,X,E,F,G,H)],[D=T+L+1,C=K+S,B=J+R,A=I+Q,T>=1,L>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('case_47',[A,B,C,D,E,F,G,H],7,['evaluate'(I,J,K,L,M,N,O,P),'evaluate'(Q,R,S,T,U,V,W,X),'mult'(M,N,O,P,U,V,W,X,E,F,G,H)],[D=T+L+1,C=K+S,B=J+R,A=I+Q,T>=1,L>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('evaluate',[A,B,C,D,E,F,G,H],1,['case_47'(A,B,C,D,E,F,G,H)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('case_48',[A,B,C,D,E],2,[],[A=1,D=1,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_49',[A,B,C,D,E,F,G,F,G],1,[],[D=A,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,F>=0,G>=0]).
eq('case_49',[A,B,C,D,E,F,G,H,I],5,['del'(F,G,J,K,L)],[D>=A+1,M=1,J=D-M,I=E+L,H=K+1,K>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('case_48',[A,B,C,D,E],4,['case_49'(F,A,B,C,G,H,I,D,E)],[B=G+I,A=H+1,H>=1,F=0,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('del',[A,B,C,D,E],1,['case_48'(A,B,C,D,E)],[A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_50',[A,B,C,D,E,F,G,H],2,[],[B=0,A=1,G=0,F=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('case_51',[A,B,C,D,E,F,G,H,I,J,K,L,M,N],4,['submat'(I,J,K,O,F,L,M,N)],[E=A,P=1,O=E-P,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0]).
eq('case_51',[A,B,C,D,E,F,G,H,I,J,K,L,M,N],6,['del'(G,H,F,O,P),'submat'(I,J,K,Q,F,R,S,T)],[E>=A+1,U=1,Q=E-U,N=P+T,M=O+S,L=R+1,R>=1,O>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0]).
eq('case_50',[A,B,C,D,E,F,G,H],4,['case_51'(I,A,B,C,D,E,J,K,L,M,N,F,G,H)],[C=K+N,B=J+M,A=L+1,L>=1,J>=1,I=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('submat',[A,B,C,D,E,F,G,H],1,['case_50'(A,B,C,D,E,F,G,H)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('case_52',[A,B,C,D,E,F],1,[],[C=G+F,B=H+E,A=D+1,D>=1,H>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0]).
eq('remFirstRow',[A,B,C,D,E,F],1,['case_52'(A,B,C,D,E,F)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0]).
eq('case_53',[A,B,C],2,[],[B=0,A=1,C=0,A>=0,B>=0,C>=0]).
eq('case_53',[A,B,C],5,['size'(D,E,F)],[B=G+E,A=D+1,D>=1,G>=1,H=1,C=H+F,A>=0,B>=0,C>=0]).
eq('size',[A,B,C],1,['case_53'(A,B,C)],[A>=0,B>=0,C>=0]).

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [append/5,case_24/5]
1. recursive  : [append_row/8,case_25/8,case_26/11]
2. recursive  : [case_28/15,reverse_helper/15]
3. non_recursive  : [reverseL/10]
4. recursive  : [case_29/9,reverse_rows_helper/9]
5. non_recursive  : [reverse_rows/6]
6. recursive  : [append_start/8,case_30/8,case_31/11]
7. recursive  : [case_0/7,sizeL/7]
8. recursive  : [case_1/5,case_2/11,check_lists/5]
9. non_recursive  : [case_3/7]
10. non_recursive  : [check_mat/6]
11. non_recursive  : [case_4/5]
12. non_recursive  : [check_matrix/5]
13. non_recursive  : [and_op/3]
14. non_recursive  : [eq/3]
15. non_recursive  : [case_43/10]
16. non_recursive  : [case_42/9]
17. non_recursive  : [check_mult_sanity/9]
18. non_recursive  : [case_17/11]
19. non_recursive  : [case_16/9]
20. non_recursive  : [check_sanity/9]
21. recursive  : [case_37/7,case_38/10,lineMult/7]
22. recursive  : [case_39/9,case_40/12,computeLine/9]
23. non_recursive  : [case_5/10]
24. non_recursive  : [construct_matrix/9]
25. recursive  : [case_48/5,case_49/9,del/5]
26. non_recursive  : [case_11/5]
27. non_recursive  : [op/4]
28. recursive  : [case_12/7,case_13/10,rec_list/7]
29. recursive  : [case_14/10,case_15/15,rec_mat/10]
30. non_recursive  : [case_23/17]
31. non_recursive  : [case_22/12]
32. non_recursive  : [case_21/13]
33. non_recursive  : [minus/12]
34. recursive  : [case_41/9,mat_mult_jan/9]
35. non_recursive  : [case_46/17]
36. non_recursive  : [case_45/12]
37. non_recursive  : [case_44/13]
38. non_recursive  : [mult/12]
39. non_recursive  : [case_20/17]
40. non_recursive  : [case_19/12]
41. non_recursive  : [case_18/13]
42. non_recursive  : [plus/12]
43. recursive [non_tail,multiple] : [case_47/8,evaluate/8]
44. recursive  : [case_8/6,case_9/12,get_elemL/6]
45. recursive  : [case_6/4,case_7/8,get_elem/4]
46. non_recursive  : [case_10/7]
47. non_recursive  : [get_elemMat/7]
48. recursive  : [case_33/5,case_34/8,prod/5]
49. recursive  : [case_35/7,prod_mat/7]
50. recursive  : [case_27/9,transpose_helper/9]
51. non_recursive  : [transpose/6]
52. recursive  : [case_36/12,mat_mult/9]
53. recursive  : [case_32/9,new_transpose_helper/9]
54. non_recursive  : [new_transpose/6]
55. non_recursive  : [case_52/6]
56. non_recursive  : [remFirstRow/6]
57. recursive  : [case_53/3,size/3]
58. recursive  : [case_50/8,case_51/14,submat/8]
Warning: the following predicates are never called:[geq/3,gt/3,leq/3,lt/3,maxNorm/3,neg/2,neq/3,or/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into append/5
1. SCC is partially evaluated into append_row/8
2. SCC is partially evaluated into reverse_helper/15
3. SCC is partially evaluated into reverseL/10
4. SCC is partially evaluated into reverse_rows_helper/9
5. SCC is partially evaluated into reverse_rows/6
6. SCC is partially evaluated into append_start/8
7. SCC is partially evaluated into sizeL/7
8. SCC is partially evaluated into check_lists/5
9. SCC is partially evaluated into case_3/7
10. SCC is partially evaluated into check_mat/6
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into check_matrix/5
13. SCC is partially evaluated into and_op/3
14. SCC is partially evaluated into eq/3
15. SCC is completely evaluated into other SCCs
16. SCC is completely evaluated into other SCCs
17. SCC is partially evaluated into check_mult_sanity/9
18. SCC is partially evaluated into case_17/11
19. SCC is completely evaluated into other SCCs
20. SCC is partially evaluated into check_sanity/9
21. SCC is partially evaluated into lineMult/7
22. SCC is partially evaluated into computeLine/9
23. SCC is partially evaluated into case_5/10
24. SCC is partially evaluated into construct_matrix/9
25. SCC is partially evaluated into del/5
26. SCC is partially evaluated into case_11/5
27. SCC is partially evaluated into op/4
28. SCC is partially evaluated into rec_list/7
29. SCC is partially evaluated into rec_mat/10
30. SCC is partially evaluated into case_23/17
31. SCC is completely evaluated into other SCCs
32. SCC is partially evaluated into case_21/13
33. SCC is partially evaluated into minus/12
34. SCC is partially evaluated into mat_mult_jan/9
35. SCC is partially evaluated into case_46/17
36. SCC is completely evaluated into other SCCs
37. SCC is partially evaluated into case_44/13
38. SCC is partially evaluated into mult/12
39. SCC is partially evaluated into case_20/17
40. SCC is completely evaluated into other SCCs
41. SCC is partially evaluated into case_18/13
42. SCC is partially evaluated into plus/12
43. SCC is partially evaluated into evaluate/8
44. SCC is partially evaluated into get_elemL/6
45. SCC is partially evaluated into get_elem/4
46. SCC is partially evaluated into case_10/7
47. SCC is partially evaluated into get_elemMat/7
48. SCC is partially evaluated into prod/5
49. SCC is partially evaluated into prod_mat/7
50. SCC is partially evaluated into transpose_helper/9
51. SCC is partially evaluated into transpose/6
52. SCC is partially evaluated into mat_mult/9
53. SCC is partially evaluated into new_transpose_helper/9
54. SCC is partially evaluated into new_transpose/6
55. SCC is completely evaluated into other SCCs
56. SCC is partially evaluated into remFirstRow/6
57. SCC is partially evaluated into size/3
58. SCC is partially evaluated into submat/8

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations append/5 
* CE 23 is refined into CE [96] 
* CE 22 is refined into CE [97] 


#### Refined cost equations append/5 
* CE 96: append(A,B,C,D,E) = 4
     [E>=0,C>=0,B>=0,D=2,A=1] 
* CE 97: append(A,B,C,D,E) = 5+ append(F,G,C,H,I)
     [E+G>=I,H>=1,F>=1,E>=0,C>=0,B+I=E+G,H+1=D,F+1=A] 

### Cost equations --> "Loop" of append/5 
* CEs [97] --> Loop 94 
* CEs [96] --> Loop 95 

#### Loops of append/5 
* Loop 94: append(A,B,C,D,E)->  append(A',B',C,C',D')
                  [E+B'>=D',C'>=1,A'>=1,E>=0,C>=0,E+B'=B+D',C'+1=D,A'+1=A] 
* Loop 95: append(A,B,C,D,E) [E>=0,C>=0,B>=0,D=2,A=1] 

### Ranking functions of CR append(A,B,C,D,E) 
* RF of phase [94]: [A-1]

#### Partial ranking functions of CR append(A,B,C,D,E) 
* Partial RF of phase [94]:
  - RF of loop [94:1]:
    A-1

Discarded unfeasible chain [[94]]...(Non-terminating chain proved terminating)

### Resulting Chains:append(A,B,C,D,E) 
* [[94],95]
* [95]


### Merging Chains  append/5 into  External patterns of execution 
* [[95]] --> 1 
* [[95,[94]]] --> 2 


### Specialization of cost equations append_row/8 
* CE 26 is refined into CE [98,99] 
* CE 25 is refined into CE [100] 
* CE 24 is refined into CE [101] 


#### Refined cost equations append_row/8 
* CE 98: append_row(A,B,C,D,E,F,G,H) = 9+ append(I,J,K,L,M):1+ append_row(N,O,P,Q,R,S,T,U)
     [M+U>=0,J+P>=0,T+2>=0,S>=1,R>=0,Q>=1,O+1>=0,N>=1,M>=0,K>=0,J>=0,M+U=H,K+R=E,J+P=C,T+2=G,S+1=F,Q+1=D,O+1=B,N+1=A,L=2,I=1] 
* CE 99: append_row(A,B,C,D,E,F,G,H) = 9+ append(I,J,K,L,M):2+ append_row(N,O,P,Q,R,S,T,U)
     [M+U>=0,L+T>=0,L+O>=1,J+P>=0,S>=1,R>=0,Q>=1,N>=1,M>=0,L>=3,K>=0,J>=0,M+U=H,L+T=G,K+R=E,J+P=C,L+O=B+1,L=I+1,S+1=F,Q+1=D,N+1=A] 
* CE 100: append_row(A,B,C,D,E,F,G,H) = 10+ append_row(I,J,K,L,M,N,O,P)
     [E>=M,O+2>=0,N>=1,M>=0,L>=1,H>=0,C>=0,O+2=G,N+1=F,L+1=D,J=0,I=1,B=0,A=1] 
* CE 101: append_row(A,B,C,D,E,A,B,C) = 2
     [E>=0,C>=0,B>=0,A>=0,D=1] 

### Cost equations --> "Loop" of append_row/8 
* CEs [101] --> Loop 96 
* CEs [99] --> Loop 97 
* CEs [98] --> Loop 98 
* CEs [100] --> Loop 99 

#### Loops of append_row/8 
* Loop 96: append_row(A,B,C,D,E,A,B,C) [E>=0,C>=0,B>=0,A>=0,D=1] 
* Loop 97: append_row(A,B,C,D,E,F,G,H)->  append_row(A',B',C',D',E',F',G',H')
                  [H>=H',E>=E',C>=C',B>=B'+2,E'>=0,H>=0,G>=0,F>=2,D>=2,C>=0,B>=0,A>=2,B+G'+1=G+B',F=F'+1,D=D'+1,A=A'+1] 
* Loop 98: append_row(A,B,C,D,E,F,G,H)->  append_row(A',B',C',D',E',F',G',H')
                  [H>=H',E>=E',C>=C',E'>=0,H>=0,G>=0,F>=2,D>=2,C>=0,B>=0,A>=2,G=G'+2,F=F'+1,D=D'+1,B=B'+1,A=A'+1] 
* Loop 99: append_row(A,B,C,D,E,F,G,H)->  append_row(A',B',C',D',E',F',G',H')
                  [E>=E',E'>=0,H>=0,G>=0,F>=2,D>=2,C>=0,G=G'+2,F=F'+1,D=D'+1,B'=0,A'=1,B=0,A=1] 

### Ranking functions of CR append_row(A,B,C,D,E,F,G,H) 
* RF of phase [97,98]: [A-1,B+1,D-1]
* RF of phase [99]: [D-1]

#### Partial ranking functions of CR append_row(A,B,C,D,E,F,G,H) 
* Partial RF of phase [97,98]:
  - RF of loop [97:1]:
    B/2+1/2
  - RF of loop [97:1,98:1]:
    A-1
    D-1
  - RF of loop [98:1]:
    B+1
* Partial RF of phase [99]:
  - RF of loop [99:1]:
    D-1

Discarded unfeasible chain [[99]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [[97,98]](Non-terminating chain proved terminating)
Discarded unfeasible chain [[97,98],[99]](Non-terminating chain proved terminating)

### Resulting Chains:append_row(A,B,C,D,E,F,G,H) 
* [[99],96]
* [[97,98],[99],96]
* [[97,98],96]
* [96]


### Merging Chains  append_row/8 into  External patterns of execution 
* [[96,[99]]] --> 1 
* [[96]] --> 2 
* [[96,[97,98]]] --> 3 
* [[96,[99],[97,98]]] --> 4 


### Specialization of cost equations reverse_helper/15 
* CE 31 is refined into CE [102] 
* CE 30 is refined into CE [103] 


#### Refined cost equations reverse_helper/15 
* CE 102: reverse_helper(A,B,C,D,E,F,G,H,I,J,F,G,H,I,J) = 2
     [J>=0,I>=0,H>=0,G>=0,F>=0,C>=0,E=0,D=1,B=0,A=1] 
* CE 103: reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) = 5+ reverse_helper(P,Q,R,S,T,U,V,W,X,Y,K,L,M,N,O)
     [T+Y>=J,R+W>=H,Q+V>=G,Y>=J+1,V>=G+1,S>=1,P>=1,O>=0,N>=0,M>=0,L>=0,K>=0,J>=0,I>=1,H>=0,G>=0,F>=1,T+Y=E+J,R+W=C+H,Q+V=B+G,I+1=X,F+1=U,S+1=D,P+1=A] 

### Cost equations --> "Loop" of reverse_helper/15 
* CEs [103] --> Loop 100 
* CEs [102] --> Loop 101 

#### Loops of reverse_helper/15 
* Loop 100: reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)->  reverse_helper(A',B',C',D',E',F',G',H',I',J',K,L,M,N,O)
                  [E'+J'>=J,C'+H'>=H,B'+G'>=G,J'>=J+1,G'>=G+1,D'>=1,A'>=1,O>=0,N>=0,M>=0,L>=0,K>=0,J>=0,I>=1,H>=0,G>=0,F>=1,E+J=E'+J',C+H=C'+H',B+G=B'+G',I+1=I',F+1=F',D'+1=D,A'+1=A] 
* Loop 101: reverse_helper(A,B,C,D,E,F,G,H,I,J,F,G,H,I,J) [J>=0,I>=0,H>=0,G>=0,F>=0,C>=0,E=0,D=1,B=0,A=1] 

### Ranking functions of CR reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) 
* RF of phase [100]: [A-1,B+1,D-1,E+1]

#### Partial ranking functions of CR reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) 
* Partial RF of phase [100]:
  - RF of loop [100:1]:
    A-1
    B+1
    D-1
    E+1

Discarded unfeasible chain [[100]]...(Non-terminating chain proved terminating)

### Resulting Chains:reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) 
* [[100],101]
* [101]


### Merging Chains  reverse_helper/15 into  External patterns of execution 
* [[101]] --> 1 
* [[101,[100]]] --> 2 


### Specialization of cost equations reverseL/10 
* CE 32 is refined into CE [104,105] 


#### Refined cost equations reverseL/10 
* CE 104: reverseL(A,B,C,D,E,F,G,H,I,J) = 2+ reverse_helper(K,L,C,M,N,O,P,H,Q,R,S,T,H,U,V):1
     [H>=0,C>=0,V=0,U=1,T=0,S=1,R=0,Q=1,P=0,O=1,N=0,M=1,L=0,K=1,J=0,I=1,G=0,F=1,E=0,D=1,B=0,A=1] 
* CE 105: reverseL(A,B,C,A,D,A,B,E,A,D) = 2+ reverse_helper(A,B,C,A,D,F,G,H,I,J,A,B,E,A,D):2
     [C+H>=E,D+1>=A,B+1>=A,E>=0,H>=0,A>=2,C>=0,J=0,I=1,G=0,F=1] 

### Cost equations --> "Loop" of reverseL/10 
* CEs [105] --> Loop 102 
* CEs [104] --> Loop 103 

#### Loops of reverseL/10 
* Loop 102: reverseL(A,B,C,A,D,A,B,E,A,D) [D+1>=A,B+1>=A,E>=0,C>=0,A>=2] 
* Loop 103: reverseL(A,B,C,D,E,F,G,H,I,J) [H>=0,C>=0,J=0,I=1,G=0,F=1,E=0,D=1,B=0,A=1] 

### Ranking functions of CR reverseL(A,B,C,D,E,F,G,H,I,J) 

#### Partial ranking functions of CR reverseL(A,B,C,D,E,F,G,H,I,J) 


### Resulting Chains:reverseL(A,B,C,D,E,F,G,H,I,J) 
* [103]
* [102]


### Merging Chains  reverseL/10 into  External patterns of execution 
* [[103]] --> 1 
* [[102]] --> 2 


### Specialization of cost equations reverse_rows_helper/9 
* CE 34 is refined into CE [106] 
* CE 33 is refined into CE [107] 


#### Refined cost equations reverse_rows_helper/9 
* CE 106: reverse_rows_helper(A,B,C,D,E,F,D,E,F) = 2
     [F>=0,E>=0,D>=0,C>=0,B=0,A=1] 
* CE 107: reverse_rows_helper(A,B,C,D,E,F,G,H,I) = 6+ reverseL(J,K,L,J,M,J,K,N,J,M):2+ reverse_rows_helper(O,P,Q,J,K,N,G,H,I)
     [L+Q>=F,K+P>=E,M+1>=J,K+1>=J,K>=E+1,O>=1,N>=0,J>=2,L>=0,I>=0,H>=0,G>=0,F>=0,E>=0,L+Q=C+F,K+P=B+E,J=D+1,O+1=A] 

### Cost equations --> "Loop" of reverse_rows_helper/9 
* CEs [107] --> Loop 104 
* CEs [106] --> Loop 105 

#### Loops of reverse_rows_helper/9 
* Loop 104: reverse_rows_helper(A,B,C,D,E,F,G,H,I)->  reverse_rows_helper(A',B',C',D',E',F',G,H,I)
                  [B+E>=D+B',C+F>=C',B>=B'+1,F'>=0,A'>=1,I>=0,H>=0,G>=0,F>=0,E>=0,D>=1,C>=0,B>=0,B+E=B'+E',D+1=D',A'+1=A] 
* Loop 105: reverse_rows_helper(A,B,C,D,E,F,D,E,F) [F>=0,E>=0,D>=0,C>=0,B=0,A=1] 

### Ranking functions of CR reverse_rows_helper(A,B,C,D,E,F,G,H,I) 
* RF of phase [104]: [A-1,B+1]

#### Partial ranking functions of CR reverse_rows_helper(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [104]:
  - RF of loop [104:1]:
    A-1
    B+1

Discarded unfeasible chain [[104]]...(Non-terminating chain proved terminating)

### Resulting Chains:reverse_rows_helper(A,B,C,D,E,F,G,H,I) 
* [[104],105]
* [105]


### Merging Chains  reverse_rows_helper/9 into  External patterns of execution 
* [[105]] --> 1 
* [[105,[104]]] --> 2 


### Specialization of cost equations reverse_rows/6 
* CE 35 is refined into CE [108,109] 


#### Refined cost equations reverse_rows/6 
* CE 108: reverse_rows(A,B,C,D,E,F) = 3+ reverse_rows_helper(G,H,C,I,J,K,L,M,K):1+ reverseL(N,O,K,P,Q,R,S,F,T,U):1
     [F>=0,K>=0,C>=0,U=0,T=1,S=0,R=1,Q=0,P=1,O=0,N=1,M=0,L=1,J=0,I=1,H=0,G=1,E=0,D=1,B=0,A=1] 
* CE 109: reverse_rows(A,B,C,A,B,D) = 3+ reverse_rows_helper(A,B,C,E,F,G,A,B,H):2+ reverseL(A,B,H,A,I,A,B,D,A,I):2
     [I+1>=A,B+1>=A,D>=0,A>=2,H>=0,G>=0,C>=0,F=0,E=1] 

### Cost equations --> "Loop" of reverse_rows/6 
* CEs [109] --> Loop 106 
* CEs [108] --> Loop 107 

#### Loops of reverse_rows/6 
* Loop 106: reverse_rows(A,B,C,A,B,D) [B+1>=A,D>=0,C>=0,A>=2] 
* Loop 107: reverse_rows(A,B,C,D,E,F) [F>=0,C>=0,E=0,D=1,B=0,A=1] 

### Ranking functions of CR reverse_rows(A,B,C,D,E,F) 

#### Partial ranking functions of CR reverse_rows(A,B,C,D,E,F) 


### Resulting Chains:reverse_rows(A,B,C,D,E,F) 
* [107]
* [106]


### Merging Chains  reverse_rows/6 into  External patterns of execution 
* [[107]] --> 1 
* [[106]] --> 2 


### Specialization of cost equations append_start/8 
* CE 38 is refined into CE [110] 
* CE 37 is refined into CE [111] 
* CE 36 is refined into CE [112,113] 


#### Refined cost equations append_start/8 
* CE 110: append_start(A,B,C,D,E,F,G,H) = 9+ append_start(I,J,K,L,M,N,O,P)
     [H+K+M>=E+P,G+J>=O+1,G>=O+2,E>=M,N>=1,M>=0,L>=1,I>=1,H>=0,G>=0,H+K+M=C+E+P,B+O+1=G+J,N+1=F,L+1=D,I+1=A] 
* CE 111: append_start(A,B,C,D,E,F,G,H) = 10+ append_start(I,J,K,L,M,N,O,P)
     [E>=M,O+2>=0,N>=1,M>=0,L>=1,H>=0,C>=0,O+2=G,N+1=F,L+1=D,J=0,I=1,B=0,A=1] 
* CE 112: append_start(A,B,C,D,E,F,G,H) = 3+ reverse_rows(I,J,C,K,L,H):1
     [H>=0,C>=0,E>=0,L=0,K=1,J=0,I=1,G=0,F=1,D=1,B=0,A=1] 
* CE 113: append_start(A,B,C,D,E,A,B,F) = 3+ reverse_rows(A,B,C,A,B,F):2
     [B+1>=A,F>=0,A>=2,C>=0,E>=0,D=1] 

### Cost equations --> "Loop" of append_start/8 
* CEs [113] --> Loop 108 
* CEs [112] --> Loop 109 
* CEs [110] --> Loop 110 
* CEs [111] --> Loop 111 

#### Loops of append_start/8 
* Loop 108: append_start(A,B,C,D,E,A,B,F) [B+1>=A,F>=0,E>=0,C>=0,A>=2,D=1] 
* Loop 109: append_start(A,B,C,D,E,F,G,H) [H>=0,E>=0,C>=0,G=0,F=1,D=1,B=0,A=1] 
* Loop 110: append_start(A,B,C,D,E,F,G,H)->  append_start(A',B',C',D',E',F',G',H')
                  [E>=E',B>=B'+1,E'>=0,H>=0,G>=0,F>=2,D>=2,C>=0,B>=0,A>=2,C+E+H'=H+C'+E',B+G'+1=G+B',F=F'+1,D=D'+1,A=A'+1] 
* Loop 111: append_start(A,B,C,D,E,F,G,H)->  append_start(A',B',C',D',E',F',G',H')
                  [E>=E',E'>=0,H>=0,G>=0,F>=2,D>=2,C>=0,G=G'+2,F=F'+1,D=D'+1,B'=0,A'=1,B=0,A=1] 

### Ranking functions of CR append_start(A,B,C,D,E,F,G,H) 
* RF of phase [110]: [A-1,B+1,D-1]
* RF of phase [111]: [D-1]

#### Partial ranking functions of CR append_start(A,B,C,D,E,F,G,H) 
* Partial RF of phase [110]:
  - RF of loop [110:1]:
    A-1
    B+1
    D-1
* Partial RF of phase [111]:
  - RF of loop [111:1]:
    D-1

Discarded unfeasible chain [[111]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [[110]](Non-terminating chain proved terminating)
Discarded unfeasible chain [[110],[111]](Non-terminating chain proved terminating)

### Resulting Chains:append_start(A,B,C,D,E,F,G,H) 
* [[111],109]
* [[110],[111],109]
* [[110],109]
* [[110],108]
* [109]
* [108]


### Merging Chains  append_start/8 into  External patterns of execution 
* [[109]] --> 1 
* [[109,[111]]] --> 2 
* [[108]] --> 3 
* [[109,[110]]] --> 4 
* [[108,[110]]] --> 5 
* [[109,[111],[110]]] --> 6 


### Specialization of cost equations sizeL/7 
* CE 71 is refined into CE [114] 
* CE 70 is refined into CE [115] 


#### Refined cost equations sizeL/7 
* CE 114: sizeL(A,B,C,D,E,F,G) = 3
     [E>=0,B>=0,G=0,F=0,D=0,C=1,A=1] 
* CE 115: sizeL(A,B,C,D,E,F,G) = 6+ sizeL(H,I,J,K,L,M,N)
     [D>=K+1,N+1>=0,M+1>=0,J>=1,H>=1,E>=0,D>=0,B>=0,N+1=G,M+1=F,J+1=C,H+1=A] 

### Cost equations --> "Loop" of sizeL/7 
* CEs [115] --> Loop 112 
* CEs [114] --> Loop 113 

#### Loops of sizeL/7 
* Loop 112: sizeL(A,B,C,D,E,F,G)->  sizeL(A',B',C',D',E',F',G')
                  [D>=D'+1,G'+1>=0,F'+1>=0,C'>=1,A'>=1,E>=0,D>=0,B>=0,G'+1=G,F'+1=F,C'+1=C,A'+1=A] 
* Loop 113: sizeL(A,B,C,D,E,F,G) [E>=0,B>=0,G=0,F=0,D=0,C=1,A=1] 

### Ranking functions of CR sizeL(A,B,C,D,E,F,G) 
* RF of phase [112]: [A-1,C-1,D+1]

#### Partial ranking functions of CR sizeL(A,B,C,D,E,F,G) 
* Partial RF of phase [112]:
  - RF of loop [112:1]:
    A-1
    C-1
    D+1

Discarded unfeasible chain [[112]]...(Non-terminating chain proved terminating)

### Resulting Chains:sizeL(A,B,C,D,E,F,G) 
* [[112],113]
* [113]


### Merging Chains  sizeL/7 into  External patterns of execution 
* [[113]] --> 1 
* [[113,[112]]] --> 2 


### Specialization of cost equations check_lists/5 
* CE 5 is refined into CE [116] 
* CE 3 is refined into CE [117] 
* CE 4 is refined into CE [118,119] 


#### Refined cost equations check_lists/5 
* CE 116: check_lists(A,B,C,D,E) = 7+ sizeL(F,G,F,H,I,J,K):2
     [H+1>=F,B>=F,C>=G,F>=D+2,I>=0,G>=0,D>=0,A>=2,F=K+1,F=J+1,E=0] 
* CE 117: check_lists(A,B,C,D,E) = 3
     [D>=0,C>=0,E=1,B=0,A=1] 
* CE 118: check_lists(A,B,C,D,E) = 7+ sizeL(F,G,H,I,J,K,L):1+ check_lists(M,N,O,P,E)
     [O>=0,N>=0,M>=1,J>=0,G>=0,E>=0,G+O=C,N+1=B,M+1=A,P=0,L=0,K=0,I=0,H=1,F=1,D=0] 
* CE 119: check_lists(A,B,C,D,E) = 7+ sizeL(F,G,F,H,I,J,K):2+ check_lists(L,M,N,O,E)
     [H+1>=F,N>=0,M>=0,L>=1,I>=0,F>=2,G>=0,E>=0,G+N=C,F+M=B,F=O+1,F=K+1,F=J+1,F=D+1,L+1=A] 

### Cost equations --> "Loop" of check_lists/5 
* CEs [119] --> Loop 114 
* CEs [118] --> Loop 115 
* CEs [116] --> Loop 116 
* CEs [117] --> Loop 117 

#### Loops of check_lists/5 
* Loop 114: check_lists(A,B,C,D,E)->  check_lists(A',B',C',D,E)
                  [C>=C',B>=D+1,C'>=0,E>=0,D>=1,A>=2,B=D+B'+1,A=A'+1] 
* Loop 115: check_lists(A,B,C,D,E)->  check_lists(A',B',C',D',E)
                  [C>=C',C'>=0,E>=0,B>=1,A>=2,B=B'+1,A=A'+1,D'=0,D=0] 
* Loop 116: check_lists(A,B,C,D,E) [B>=D+2,D>=0,C>=0,A>=2,E=0] 
* Loop 117: check_lists(A,B,C,D,E) [D>=0,C>=0,E=1,B=0,A=1] 

### Ranking functions of CR check_lists(A,B,C,D,E) 
* RF of phase [114]: [A-1,B/2-1/2,B/2-D/2]
* RF of phase [115]: [A-1,B]

#### Partial ranking functions of CR check_lists(A,B,C,D,E) 
* Partial RF of phase [114]:
  - RF of loop [114:1]:
    A-1
    B/2-1/2
    B/2-D/2
* Partial RF of phase [115]:
  - RF of loop [115:1]:
    A-1
    B

Discarded unfeasible chain [[115]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [[114]](Non-terminating chain proved terminating)

### Resulting Chains:check_lists(A,B,C,D,E) 
* [[115],117]
* [[115],116]
* [[114],117]
* [[114],116]
* [117]
* [116]


### Merging Chains  check_lists/5 into  External patterns of execution 
* [[117]] --> 1 
* [[116],[116,[114]],[116,[115]]] --> 2 
* [[117,[115]]] --> 3 
* [[117,[114]]] --> 4 


### Specialization of cost equations case_3/7 
* CE 72 is refined into CE [120,121,122,123] 
* CE 73 is refined into CE [124] 


#### Refined cost equations case_3/7 
* CE 120: case_3(A,A,B,C,D,E,F) = 2+ check_lists(G,H,E,B,I):1
     [B>=0,E>=0,A>=0,I=1,H=0,G=1,F=1,D=0,C=1] 
* CE 121: case_3(A,A,B,C,D,E,F) = 2+ check_lists(C,D,E,B,G):2
     [D>=B+2,B>=0,E>=0,C>=2,A>=0,G=0,F=0] 
* CE 122: case_3(A,A,B,C,D,E,F) = 2+ check_lists(G,D,E,H,I):3
     [E>=0,D>=1,A>=0,D+1=G,D+1=C,I=1,H=0,F=1,B=0] 
* CE 123: case_3(A,A,B,C,D,E,F) = 2+ check_lists(C,D,E,B,G):4
     [D+3>=2*C+B,B>=1,E>=0,C>=2,A>=0,G=1,F=1] 
* CE 124: case_3(A,B,C,D,E,F,G) = 2
     [A>=B+1,F>=0,E>=0,D>=0,C>=0,B>=0,G=0] 

### Cost equations --> "Loop" of case_3/7 
* CEs [123] --> Loop 118 
* CEs [124] --> Loop 119 
* CEs [121] --> Loop 120 
* CEs [120] --> Loop 121 
* CEs [122] --> Loop 122 

#### Loops of case_3/7 
* Loop 118: case_3(A,A,B,C,D,E,F) [D+3>=2*C+B,E>=0,C>=2,B>=1,A>=0,F=1] 
* Loop 119: case_3(A,B,C,D,E,F,G) [A>=B+1,F>=0,E>=0,D>=0,C>=0,B>=0,G=0] 
* Loop 120: case_3(A,A,B,C,D,E,F) [D>=B+2,E>=0,C>=2,B>=0,A>=0,F=0] 
* Loop 121: case_3(A,A,B,C,D,E,F) [E>=0,B>=0,A>=0,F=1,D=0,C=1] 
* Loop 122: case_3(A,A,B,C,D,E,F) [E>=0,C>=2,A>=0,C=D+1,F=1,B=0] 

### Ranking functions of CR case_3(A,B,C,D,E,F,G) 

#### Partial ranking functions of CR case_3(A,B,C,D,E,F,G) 


### Resulting Chains:case_3(A,B,C,D,E,F,G) 
* [122]
* [121]
* [120]
* [119]
* [118]


### Merging Chains  case_3/7 into  External patterns of execution 
* [[122]] --> 1 
* [[121]] --> 2 
* [[120]] --> 3 
* [[119]] --> 4 
* [[118]] --> 5 


### Specialization of cost equations check_mat/6 
* CE 6 is refined into CE [125,126,127,128,129] 


#### Refined cost equations check_mat/6 
* CE 125: check_mat(A,B,C,D,E,F) = 2+ sizeL(G,H,I,J,E,K,L):1+ case_3(M,N,B,O,P,E,Q):2
     [E>=0,B>=0,H>=0,Q=1,P=0,O=1,N=0,M=0,L=0,K=0,J=0,I=1,G=1,F=1,D=0,C=1,A=0] 
* CE 126: check_mat(A,B,C,A,D,E) = 2+ sizeL(F,G,H,A,D,A,A):2+ case_3(A,A,I,J,A,D,K):1
     [D>=0,A>=1,G>=0,A+1=J,A+1=H,A+1=F,A+1=C,K=1,I=0,E=1,B=0] 
* CE 127: check_mat(A,B,C,D,E,F) = 2+ sizeL(G,H,I,D,E,A,A):2+ case_3(A,A,B,J,D,E,K):3
     [D>=B+2,D>=A,E>=0,B>=0,A>=1,H>=0,A+1=J,A+1=I,A+1=G,A+1=C,K=0,F=0] 
* CE 128: check_mat(A,B,C,D,E,F) = 2+ sizeL(C,G,C,D,E,H,I):2+ case_3(J,A,B,C,D,E,K):4
     [D+1>=C,C>=A+2,E>=0,B>=0,A>=0,G>=0,C=J+1,C=I+1,C=H+1,K=0,F=0] 
* CE 129: check_mat(A,B,C,D,E,F) = 2+ sizeL(G,H,I,D,E,A,A):2+ case_3(A,A,B,J,D,E,K):5
     [D+1>=2*A+B,E>=0,B>=1,A>=1,H>=0,A+1=J,A+1=I,A+1=G,A+1=C,K=1,F=1] 

### Cost equations --> "Loop" of check_mat/6 
* CEs [129] --> Loop 123 
* CEs [128] --> Loop 124 
* CEs [127] --> Loop 125 
* CEs [126] --> Loop 126 
* CEs [125] --> Loop 127 

#### Loops of check_mat/6 
* Loop 123: check_mat(A,B,C,D,E,F) [D+1>=2*A+B,E>=0,B>=1,A>=1,A+1=C,F=1] 
* Loop 124: check_mat(A,B,C,D,E,F) [D+1>=C,C>=A+2,E>=0,B>=0,A>=0,F=0] 
* Loop 125: check_mat(A,B,C,D,E,F) [D>=B+2,D>=A,E>=0,B>=0,A>=1,A+1=C,F=0] 
* Loop 126: check_mat(A,B,C,A,D,E) [D>=0,A>=1,A+1=C,E=1,B=0] 
* Loop 127: check_mat(A,B,C,D,E,F) [E>=0,B>=0,F=1,D=0,C=1,A=0] 

### Ranking functions of CR check_mat(A,B,C,D,E,F) 

#### Partial ranking functions of CR check_mat(A,B,C,D,E,F) 


### Resulting Chains:check_mat(A,B,C,D,E,F) 
* [127]
* [126]
* [125]
* [124]
* [123]


### Merging Chains  check_mat/6 into  External patterns of execution 
* [[127]] --> 1 
* [[126]] --> 2 
* [[125]] --> 3 
* [[124]] --> 4 
* [[123]] --> 5 


### Specialization of cost equations check_matrix/5 
* CE 7 is refined into CE [130,131,132,133,134] 


#### Refined cost equations check_matrix/5 
* CE 130: check_matrix(A,B,C,D,E) = 3+ check_mat(F,G,H,I,J,K):1
     [J>=0,G>=0,G+J=C,K=1,I=0,H=1,F=0,E=1,D=1,B=0,A=1] 
* CE 131: check_matrix(A,B,C,D,E) = 3+ check_mat(F,G,A,H,I,J):2
     [I>=0,A>=2,A+I=C+1,A=H+1,A=F+1,A=B+1,J=1,G=0,E=1,D=1] 
* CE 132: check_matrix(A,B,C,D,E) = 3+ check_mat(F,G,A,B,H,I):3
     [B+1>=A,B>=G+2,H>=0,A>=2,G>=0,A+G+H=C+1,A=F+1,I=0,E=0,D=1] 
* CE 133: check_matrix(A,B,C,D,E) = 3+ check_mat(F,G,A,B,H,I):4
     [B+1>=A,A>=F+2,H>=0,G>=0,F>=0,F+G+H=C,I=0,E=0,D=1] 
* CE 134: check_matrix(A,B,C,D,E) = 3+ check_mat(F,G,A,B,H,I):5
     [B+3>=2*A+G,H>=0,A>=2,G>=1,A+G+H=C+1,A=F+1,I=1,E=1,D=1] 

### Cost equations --> "Loop" of check_matrix/5 
* CEs [134] --> Loop 128 
* CEs [131] --> Loop 129 
* CEs [132,133] --> Loop 130 
* CEs [130] --> Loop 131 

#### Loops of check_matrix/5 
* Loop 128: check_matrix(A,B,C,D,E) [C>=A,B+2>=2*A,A>=2,E=1,D=1] 
* Loop 129: check_matrix(A,B,C,D,E) [C+1>=A,A>=2,A=B+1,E=1,D=1] 
* Loop 130: check_matrix(A,B,C,D,E) [B+1>=A,C>=0,A>=2,E=0,D=1] 
* Loop 131: check_matrix(A,B,C,D,E) [C>=0,E=1,D=1,B=0,A=1] 

### Ranking functions of CR check_matrix(A,B,C,D,E) 

#### Partial ranking functions of CR check_matrix(A,B,C,D,E) 


### Resulting Chains:check_matrix(A,B,C,D,E) 
* [131]
* [130]
* [129]
* [128]


### Merging Chains  check_matrix/5 into  External patterns of execution 
* [[131]] --> 1 
* [[130]] --> 2 
* [[129]] --> 3 
* [[128]] --> 4 


### Specialization of cost equations and_op/3 
* CE 85 is refined into CE [135] 
* CE 84 is refined into CE [136] 


#### Refined cost equations and_op/3 
* CE 135: and_op(A,B,B) = 0
     [B>=0,A=1] 
* CE 136: and_op(A,B,C) = 0
     [B>=0,C=0,A=0] 

### Cost equations --> "Loop" of and_op/3 
* CEs [135] --> Loop 132 
* CEs [136] --> Loop 133 

#### Loops of and_op/3 
* Loop 132: and_op(A,B,B) [B>=0,A=1] 
* Loop 133: and_op(A,B,C) [B>=0,C=0,A=0] 

### Ranking functions of CR and_op(A,B,C) 

#### Partial ranking functions of CR and_op(A,B,C) 


### Resulting Chains:and_op(A,B,C) 
* [133]
* [132]


### Merging Chains  and_op/3 into  External patterns of execution 
* [[133]] --> 1 
* [[132]] --> 2 


### Specialization of cost equations eq/3 
* CE 86 is refined into CE [137] 
* CE 87 is refined into CE [138] 
* CE 88 is refined into CE [139] 


#### Refined cost equations eq/3 
* CE 137: eq(A,A,B) = 0
     [A>=0,B=1] 
* CE 138: eq(A,B,C) = 0
     [A>=B+1,B>=0,C=0] 
* CE 139: eq(A,B,C) = 0
     [B>=A+1,A>=0,C=0] 

### Cost equations --> "Loop" of eq/3 
* CEs [137] --> Loop 134 
* CEs [138] --> Loop 135 
* CEs [139] --> Loop 136 

#### Loops of eq/3 
* Loop 134: eq(A,A,B) [A>=0,B=1] 
* Loop 135: eq(A,B,C) [A>=B+1,B>=0,C=0] 
* Loop 136: eq(A,B,C) [B>=A+1,A>=0,C=0] 

### Ranking functions of CR eq(A,B,C) 

#### Partial ranking functions of CR eq(A,B,C) 


### Resulting Chains:eq(A,B,C) 
* [136]
* [135]
* [134]


### Merging Chains  eq/3 into  External patterns of execution 
* [[136]] --> 1 
* [[135]] --> 2 
* [[134]] --> 3 


### Specialization of cost equations check_mult_sanity/9 
* CE 57 is refined into CE [140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166] 


#### Refined cost equations check_mult_sanity/9 
* CE 140: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(A,B,C,J,K):2+ check_matrix(E,F,G,L,M):2+ and_op(N,O,P):1+ eq(Q,R,S):1+ and_op(T,U,V):1
     [R>=Q+1,F+1>=E,B+1>=A,Q>=0,G>=0,E>=2,C>=0,A>=2,V=0,U=0,T=0,S=0,P=0,O=0,N=0,M=0,L=1,K=0,J=1,I=0,H=1,D=1] 
* CE 141: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(A,B,C,J,K):2+ check_matrix(E,F,G,L,M):2+ and_op(N,O,P):1+ eq(Q,R,S):2+ and_op(T,U,V):1
     [Q>=R+1,F+1>=E,B+1>=A,R>=0,G>=0,E>=2,C>=0,A>=2,V=0,U=0,T=0,S=0,P=0,O=0,N=0,M=0,L=1,K=0,J=1,I=0,H=1,D=1] 
* CE 142: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(A,B,C,J,K):2+ check_matrix(E,F,G,L,M):2+ and_op(N,O,P):1+ eq(Q,Q,R):3+ and_op(S,T,U):1
     [F+1>=E,B+1>=A,Q>=0,G>=0,E>=2,C>=0,A>=2,U=0,T=1,S=0,R=1,P=0,O=0,N=0,M=0,L=1,K=0,J=1,I=0,H=1,D=1] 
* CE 143: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(A,B,C,J,K):2+ check_matrix(L,F,G,M,N):3+ and_op(O,P,Q):1+ eq(R,S,T):1+ and_op(U,V,W):1
     [S>=R+1,G>=F,B+1>=A,R>=0,F>=1,C>=0,A>=2,F+1=L,F+1=E,W=0,V=0,U=0,T=0,Q=0,P=1,O=0,N=1,M=1,K=0,J=1,I=0,H=1,D=1] 
* CE 144: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(A,B,C,J,K):2+ check_matrix(L,F,G,M,N):3+ and_op(O,P,Q):1+ eq(R,S,T):2+ and_op(U,V,W):1
     [R>=S+1,G>=F,B+1>=A,S>=0,F>=1,C>=0,A>=2,F+1=L,F+1=E,W=0,V=0,U=0,T=0,Q=0,P=1,O=0,N=1,M=1,K=0,J=1,I=0,H=1,D=1] 
* CE 145: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(A,B,C,J,K):2+ check_matrix(L,F,G,M,N):3+ and_op(O,P,Q):1+ eq(R,R,S):3+ and_op(T,U,V):1
     [G>=F,B+1>=A,R>=0,F>=1,C>=0,A>=2,F+1=L,F+1=E,V=0,U=1,T=0,S=1,Q=0,P=1,O=0,N=1,M=1,K=0,J=1,I=0,H=1,D=1] 
* CE 146: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(A,B,C,J,K):2+ check_matrix(E,F,G,L,M):4+ and_op(N,O,P):1+ eq(Q,R,S):1+ and_op(T,U,V):1
     [R>=Q+1,G>=E,B+1>=A,F+2>=2*E,Q>=0,E>=2,C>=0,A>=2,V=0,U=0,T=0,S=0,P=0,O=1,N=0,M=1,L=1,K=0,J=1,I=0,H=1,D=1] 
* CE 147: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(A,B,C,J,K):2+ check_matrix(E,F,G,L,M):4+ and_op(N,O,P):1+ eq(Q,R,S):2+ and_op(T,U,V):1
     [Q>=R+1,G>=E,B+1>=A,F+2>=2*E,R>=0,E>=2,C>=0,A>=2,V=0,U=0,T=0,S=0,P=0,O=1,N=0,M=1,L=1,K=0,J=1,I=0,H=1,D=1] 
* CE 148: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(A,B,C,J,K):2+ check_matrix(E,F,G,L,M):4+ and_op(N,O,P):1+ eq(Q,Q,R):3+ and_op(S,T,U):1
     [G>=E,B+1>=A,F+2>=2*E,Q>=0,E>=2,C>=0,A>=2,U=0,T=1,S=0,R=1,P=0,O=1,N=0,M=1,L=1,K=0,J=1,I=0,H=1,D=1] 
* CE 149: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(J,B,C,K,L):3+ check_matrix(E,F,G,M,N):2+ and_op(O,P,Q):2+ eq(R,S,T):1+ and_op(U,V,W):1
     [S>=R+1,F+1>=E,C>=B,R>=0,G>=0,E>=2,B>=1,B+1=J,B+1=A,W=0,V=0,U=0,T=0,Q=0,P=0,O=1,N=0,M=1,L=1,K=1,I=0,H=1,D=1] 
* CE 150: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(J,B,C,K,L):3+ check_matrix(E,F,G,M,N):2+ and_op(O,P,Q):2+ eq(R,S,T):2+ and_op(U,V,W):1
     [R>=S+1,F+1>=E,C>=B,S>=0,G>=0,E>=2,B>=1,B+1=J,B+1=A,W=0,V=0,U=0,T=0,Q=0,P=0,O=1,N=0,M=1,L=1,K=1,I=0,H=1,D=1] 
* CE 151: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(J,B,C,K,L):3+ check_matrix(E,F,G,M,N):2+ and_op(O,P,Q):2+ eq(R,R,S):3+ and_op(T,U,V):1
     [F+1>=E,C>=B,R>=0,G>=0,E>=2,B>=1,B+1=J,B+1=A,V=0,U=1,T=0,S=1,Q=0,P=0,O=1,N=0,M=1,L=1,K=1,I=0,H=1,D=1] 
* CE 152: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(J,B,C,K,L):3+ check_matrix(M,F,G,N,O):3+ and_op(P,Q,R):2+ eq(S,T,U):1+ and_op(V,W,X):2
     [T>=S+1,G>=F,C>=B,S>=0,F>=1,B>=1,F+1=M,B+1=J,F+1=E,B+1=A,X=0,W=0,V=1,U=0,R=1,Q=1,P=1,O=1,N=1,L=1,K=1,I=0,H=1,D=1] 
* CE 153: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(J,B,C,K,L):3+ check_matrix(M,F,G,N,O):3+ and_op(P,Q,R):2+ eq(S,T,U):2+ and_op(V,W,X):2
     [S>=T+1,G>=F,C>=B,T>=0,F>=1,B>=1,F+1=M,B+1=J,F+1=E,B+1=A,X=0,W=0,V=1,U=0,R=1,Q=1,P=1,O=1,N=1,L=1,K=1,I=0,H=1,D=1] 
* CE 154: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(J,B,C,K,L):3+ check_matrix(M,F,G,N,O):3+ and_op(P,Q,R):2+ eq(S,S,T):3+ and_op(U,V,W):2
     [G>=F,C>=B,S>=0,F>=1,B>=1,F+1=M,B+1=J,F+1=E,B+1=A,W=1,V=1,U=1,T=1,R=1,Q=1,P=1,O=1,N=1,L=1,K=1,I=1,H=1,D=1] 
* CE 155: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(J,B,C,K,L):3+ check_matrix(E,F,G,M,N):4+ and_op(O,P,Q):2+ eq(R,S,T):1+ and_op(U,V,W):2
     [S>=R+1,G>=E,C>=B,F+2>=2*E,R>=0,E>=2,B>=1,B+1=J,B+1=A,W=0,V=0,U=1,T=0,Q=1,P=1,O=1,N=1,M=1,L=1,K=1,I=0,H=1,D=1] 
* CE 156: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(J,B,C,K,L):3+ check_matrix(E,F,G,M,N):4+ and_op(O,P,Q):2+ eq(R,S,T):2+ and_op(U,V,W):2
     [R>=S+1,G>=E,C>=B,F+2>=2*E,S>=0,E>=2,B>=1,B+1=J,B+1=A,W=0,V=0,U=1,T=0,Q=1,P=1,O=1,N=1,M=1,L=1,K=1,I=0,H=1,D=1] 
* CE 157: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(J,B,C,K,L):3+ check_matrix(E,F,G,M,N):4+ and_op(O,P,Q):2+ eq(R,R,S):3+ and_op(T,U,V):2
     [G>=E,C>=B,F+2>=2*E,R>=0,E>=2,B>=1,B+1=J,B+1=A,V=1,U=1,T=1,S=1,Q=1,P=1,O=1,N=1,M=1,L=1,K=1,I=1,H=1,D=1] 
* CE 158: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(A,B,C,J,K):4+ check_matrix(E,F,G,L,M):2+ and_op(N,O,P):2+ eq(Q,R,S):1+ and_op(T,U,V):1
     [R>=Q+1,F+1>=E,C>=A,B+2>=2*A,Q>=0,G>=0,E>=2,A>=2,V=0,U=0,T=0,S=0,P=0,O=0,N=1,M=0,L=1,K=1,J=1,I=0,H=1,D=1] 
* CE 159: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(A,B,C,J,K):4+ check_matrix(E,F,G,L,M):2+ and_op(N,O,P):2+ eq(Q,R,S):2+ and_op(T,U,V):1
     [Q>=R+1,F+1>=E,C>=A,B+2>=2*A,R>=0,G>=0,E>=2,A>=2,V=0,U=0,T=0,S=0,P=0,O=0,N=1,M=0,L=1,K=1,J=1,I=0,H=1,D=1] 
* CE 160: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(A,B,C,J,K):4+ check_matrix(E,F,G,L,M):2+ and_op(N,O,P):2+ eq(Q,Q,R):3+ and_op(S,T,U):1
     [F+1>=E,C>=A,B+2>=2*A,Q>=0,G>=0,E>=2,A>=2,U=0,T=1,S=0,R=1,P=0,O=0,N=1,M=0,L=1,K=1,J=1,I=0,H=1,D=1] 
* CE 161: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(A,B,C,J,K):4+ check_matrix(L,F,G,M,N):3+ and_op(O,P,Q):2+ eq(R,S,T):1+ and_op(U,V,W):2
     [S>=R+1,G>=F,C>=A,B+2>=2*A,R>=0,F>=1,A>=2,F+1=L,F+1=E,W=0,V=0,U=1,T=0,Q=1,P=1,O=1,N=1,M=1,K=1,J=1,I=0,H=1,D=1] 
* CE 162: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(A,B,C,J,K):4+ check_matrix(L,F,G,M,N):3+ and_op(O,P,Q):2+ eq(R,S,T):2+ and_op(U,V,W):2
     [R>=S+1,G>=F,C>=A,B+2>=2*A,S>=0,F>=1,A>=2,F+1=L,F+1=E,W=0,V=0,U=1,T=0,Q=1,P=1,O=1,N=1,M=1,K=1,J=1,I=0,H=1,D=1] 
* CE 163: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(A,B,C,J,K):4+ check_matrix(L,F,G,M,N):3+ and_op(O,P,Q):2+ eq(R,R,S):3+ and_op(T,U,V):2
     [G>=F,C>=A,B+2>=2*A,R>=0,F>=1,A>=2,F+1=L,F+1=E,V=1,U=1,T=1,S=1,Q=1,P=1,O=1,N=1,M=1,K=1,J=1,I=1,H=1,D=1] 
* CE 164: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(A,B,C,J,K):4+ check_matrix(E,F,G,L,M):4+ and_op(N,O,P):2+ eq(Q,R,S):1+ and_op(T,U,V):2
     [R>=Q+1,G>=E,C>=A,F+2>=2*E,B+2>=2*A,Q>=0,E>=2,A>=2,V=0,U=0,T=1,S=0,P=1,O=1,N=1,M=1,L=1,K=1,J=1,I=0,H=1,D=1] 
* CE 165: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(A,B,C,J,K):4+ check_matrix(E,F,G,L,M):4+ and_op(N,O,P):2+ eq(Q,R,S):2+ and_op(T,U,V):2
     [Q>=R+1,G>=E,C>=A,F+2>=2*E,B+2>=2*A,R>=0,E>=2,A>=2,V=0,U=0,T=1,S=0,P=1,O=1,N=1,M=1,L=1,K=1,J=1,I=0,H=1,D=1] 
* CE 166: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(A,B,C,J,K):4+ check_matrix(E,F,G,L,M):4+ and_op(N,O,P):2+ eq(Q,Q,R):3+ and_op(S,T,U):2
     [G>=E,C>=A,F+2>=2*E,B+2>=2*A,Q>=0,E>=2,A>=2,U=1,T=1,S=1,R=1,P=1,O=1,N=1,M=1,L=1,K=1,J=1,I=1,H=1,D=1] 

### Cost equations --> "Loop" of check_mult_sanity/9 
* CEs [166] --> Loop 137 
* CEs [163] --> Loop 138 
* CEs [157] --> Loop 139 
* CEs [154] --> Loop 140 
* CEs [143,144,145,161,162] --> Loop 141 
* CEs [140,141,142,146,147,148,149,150,151,152,153,155,156,158,159,160,164,165] --> Loop 142 

#### Loops of check_mult_sanity/9 
* Loop 137: check_mult_sanity(A,B,C,D,E,F,G,H,I) [G>=E,C>=A,F+2>=2*E,B+2>=2*A,E>=2,A>=2,I=1,H=1,D=1] 
* Loop 138: check_mult_sanity(A,B,C,D,E,F,G,H,I) [G+1>=E,C>=A,B+2>=2*A,E>=2,A>=2,E=F+1,I=1,H=1,D=1] 
* Loop 139: check_mult_sanity(A,B,C,D,E,F,G,H,I) [G>=E,C+1>=A,F+2>=2*E,E>=2,A>=2,A=B+1,I=1,H=1,D=1] 
* Loop 140: check_mult_sanity(A,B,C,D,E,F,G,H,I) [G+1>=E,C+1>=A,E>=2,A>=2,E=F+1,A=B+1,I=1,H=1,D=1] 
* Loop 141: check_mult_sanity(A,B,C,D,E,F,G,H,I) [G+1>=E,B+1>=A,E>=2,C>=0,A>=2,E=F+1,I=0,H=1,D=1] 
* Loop 142: check_mult_sanity(A,B,C,D,E,F,G,H,I) [F+1>=E,B+1>=A,G>=0,E>=2,C>=0,A>=2,I=0,H=1,D=1] 

### Ranking functions of CR check_mult_sanity(A,B,C,D,E,F,G,H,I) 

#### Partial ranking functions of CR check_mult_sanity(A,B,C,D,E,F,G,H,I) 


### Resulting Chains:check_mult_sanity(A,B,C,D,E,F,G,H,I) 
* [142]
* [141]
* [140]
* [139]
* [138]
* [137]


### Merging Chains  check_mult_sanity/9 into  External patterns of execution 
* [[141],[142]] --> 1 
* [[140]] --> 2 
* [[139]] --> 3 
* [[138]] --> 4 
* [[137]] --> 5 


### Specialization of cost equations case_17/11 
* CE 79 is refined into CE [167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247] 


#### Refined cost equations case_17/11 
* CE 167: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):1+ eq(I,S,T):1+ and_op(U,V,W):1+ eq(J,X,Y):1+ and_op(Z,A1,B1):1
     [X>=J+1,S>=I+1,F+1>=E,B+1>=A,J>=0,I>=0,G>=0,E>=2,C>=0,A>=2,B1=0,A1=0,Z=0,Y=0,W=0,V=0,U=0,T=0,R=0,Q=0,P=0,O=0,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 168: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):1+ eq(I,S,T):1+ and_op(U,V,W):1+ eq(J,X,Y):2+ and_op(Z,A1,B1):1
     [J>=X+1,S>=I+1,F+1>=E,B+1>=A,X>=0,I>=0,G>=0,E>=2,C>=0,A>=2,B1=0,A1=0,Z=0,Y=0,W=0,V=0,U=0,T=0,R=0,Q=0,P=0,O=0,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 169: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):1+ eq(I,S,T):1+ and_op(U,V,W):1+ eq(J,J,X):3+ and_op(Y,Z,A1):1
     [S>=I+1,F+1>=E,B+1>=A,J>=0,I>=0,G>=0,E>=2,C>=0,A>=2,A1=0,Z=1,Y=0,X=1,W=0,V=0,U=0,T=0,R=0,Q=0,P=0,O=0,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 170: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):1+ eq(I,S,T):2+ and_op(U,V,W):1+ eq(J,X,Y):1+ and_op(Z,A1,B1):1
     [X>=J+1,I>=S+1,F+1>=E,B+1>=A,J>=0,S>=0,G>=0,E>=2,C>=0,A>=2,B1=0,A1=0,Z=0,Y=0,W=0,V=0,U=0,T=0,R=0,Q=0,P=0,O=0,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 171: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):1+ eq(I,S,T):2+ and_op(U,V,W):1+ eq(J,X,Y):2+ and_op(Z,A1,B1):1
     [J>=X+1,I>=S+1,F+1>=E,B+1>=A,X>=0,S>=0,G>=0,E>=2,C>=0,A>=2,B1=0,A1=0,Z=0,Y=0,W=0,V=0,U=0,T=0,R=0,Q=0,P=0,O=0,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 172: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):1+ eq(I,S,T):2+ and_op(U,V,W):1+ eq(J,J,X):3+ and_op(Y,Z,A1):1
     [I>=S+1,F+1>=E,B+1>=A,J>=0,S>=0,G>=0,E>=2,C>=0,A>=2,A1=0,Z=1,Y=0,X=1,W=0,V=0,U=0,T=0,R=0,Q=0,P=0,O=0,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 173: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):1+ eq(I,I,S):3+ and_op(T,U,V):1+ eq(J,W,X):1+ and_op(Y,Z,A1):1
     [W>=J+1,F+1>=E,B+1>=A,J>=0,I>=0,G>=0,E>=2,C>=0,A>=2,A1=0,Z=0,Y=0,X=0,V=0,U=1,T=0,S=1,R=0,Q=0,P=0,O=0,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 174: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):1+ eq(I,I,S):3+ and_op(T,U,V):1+ eq(J,W,X):2+ and_op(Y,Z,A1):1
     [J>=W+1,F+1>=E,B+1>=A,W>=0,I>=0,G>=0,E>=2,C>=0,A>=2,A1=0,Z=0,Y=0,X=0,V=0,U=1,T=0,S=1,R=0,Q=0,P=0,O=0,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 175: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):1+ eq(I,I,S):3+ and_op(T,U,V):1+ eq(J,J,W):3+ and_op(X,Y,Z):1
     [F+1>=E,B+1>=A,J>=0,I>=0,G>=0,E>=2,C>=0,A>=2,Z=0,Y=1,X=0,W=1,V=0,U=1,T=0,S=1,R=0,Q=0,P=0,O=0,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 176: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(N,F,G,O,P):3+ and_op(Q,R,S):1+ eq(I,T,U):1+ and_op(V,W,X):1+ eq(J,Y,Z):1+ and_op(A1,B1,C1):1
     [Y>=J+1,T>=I+1,G>=F,B+1>=A,J>=0,I>=0,F>=1,C>=0,A>=2,F+1=N,F+1=E,C1=0,B1=0,A1=0,Z=0,X=0,W=0,V=0,U=0,S=0,R=1,Q=0,P=1,O=1,M=0,L=1,K=0,H=1,D=1] 
* CE 177: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(N,F,G,O,P):3+ and_op(Q,R,S):1+ eq(I,T,U):1+ and_op(V,W,X):1+ eq(J,Y,Z):2+ and_op(A1,B1,C1):1
     [J>=Y+1,T>=I+1,G>=F,B+1>=A,Y>=0,I>=0,F>=1,C>=0,A>=2,F+1=N,F+1=E,C1=0,B1=0,A1=0,Z=0,X=0,W=0,V=0,U=0,S=0,R=1,Q=0,P=1,O=1,M=0,L=1,K=0,H=1,D=1] 
* CE 178: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(N,F,G,O,P):3+ and_op(Q,R,S):1+ eq(I,T,U):1+ and_op(V,W,X):1+ eq(J,J,Y):3+ and_op(Z,A1,B1):1
     [T>=I+1,G>=F,B+1>=A,J>=0,I>=0,F>=1,C>=0,A>=2,F+1=N,F+1=E,B1=0,A1=1,Z=0,Y=1,X=0,W=0,V=0,U=0,S=0,R=1,Q=0,P=1,O=1,M=0,L=1,K=0,H=1,D=1] 
* CE 179: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(N,F,G,O,P):3+ and_op(Q,R,S):1+ eq(I,T,U):2+ and_op(V,W,X):1+ eq(J,Y,Z):1+ and_op(A1,B1,C1):1
     [Y>=J+1,I>=T+1,G>=F,B+1>=A,J>=0,T>=0,F>=1,C>=0,A>=2,F+1=N,F+1=E,C1=0,B1=0,A1=0,Z=0,X=0,W=0,V=0,U=0,S=0,R=1,Q=0,P=1,O=1,M=0,L=1,K=0,H=1,D=1] 
* CE 180: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(N,F,G,O,P):3+ and_op(Q,R,S):1+ eq(I,T,U):2+ and_op(V,W,X):1+ eq(J,Y,Z):2+ and_op(A1,B1,C1):1
     [J>=Y+1,I>=T+1,G>=F,B+1>=A,Y>=0,T>=0,F>=1,C>=0,A>=2,F+1=N,F+1=E,C1=0,B1=0,A1=0,Z=0,X=0,W=0,V=0,U=0,S=0,R=1,Q=0,P=1,O=1,M=0,L=1,K=0,H=1,D=1] 
* CE 181: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(N,F,G,O,P):3+ and_op(Q,R,S):1+ eq(I,T,U):2+ and_op(V,W,X):1+ eq(J,J,Y):3+ and_op(Z,A1,B1):1
     [I>=T+1,G>=F,B+1>=A,J>=0,T>=0,F>=1,C>=0,A>=2,F+1=N,F+1=E,B1=0,A1=1,Z=0,Y=1,X=0,W=0,V=0,U=0,S=0,R=1,Q=0,P=1,O=1,M=0,L=1,K=0,H=1,D=1] 
* CE 182: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(N,F,G,O,P):3+ and_op(Q,R,S):1+ eq(I,I,T):3+ and_op(U,V,W):1+ eq(J,X,Y):1+ and_op(Z,A1,B1):1
     [X>=J+1,G>=F,B+1>=A,J>=0,I>=0,F>=1,C>=0,A>=2,F+1=N,F+1=E,B1=0,A1=0,Z=0,Y=0,W=0,V=1,U=0,T=1,S=0,R=1,Q=0,P=1,O=1,M=0,L=1,K=0,H=1,D=1] 
* CE 183: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(N,F,G,O,P):3+ and_op(Q,R,S):1+ eq(I,I,T):3+ and_op(U,V,W):1+ eq(J,X,Y):2+ and_op(Z,A1,B1):1
     [J>=X+1,G>=F,B+1>=A,X>=0,I>=0,F>=1,C>=0,A>=2,F+1=N,F+1=E,B1=0,A1=0,Z=0,Y=0,W=0,V=1,U=0,T=1,S=0,R=1,Q=0,P=1,O=1,M=0,L=1,K=0,H=1,D=1] 
* CE 184: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(N,F,G,O,P):3+ and_op(Q,R,S):1+ eq(I,I,T):3+ and_op(U,V,W):1+ eq(J,J,X):3+ and_op(Y,Z,A1):1
     [G>=F,B+1>=A,J>=0,I>=0,F>=1,C>=0,A>=2,F+1=N,F+1=E,A1=0,Z=1,Y=0,X=1,W=0,V=1,U=0,T=1,S=0,R=1,Q=0,P=1,O=1,M=0,L=1,K=0,H=1,D=1] 
* CE 185: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):4+ and_op(P,Q,R):1+ eq(I,S,T):1+ and_op(U,V,W):1+ eq(J,X,Y):1+ and_op(Z,A1,B1):1
     [X>=J+1,S>=I+1,G>=E,B+1>=A,F+2>=2*E,J>=0,I>=0,E>=2,C>=0,A>=2,B1=0,A1=0,Z=0,Y=0,W=0,V=0,U=0,T=0,R=0,Q=1,P=0,O=1,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 186: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):4+ and_op(P,Q,R):1+ eq(I,S,T):1+ and_op(U,V,W):1+ eq(J,X,Y):2+ and_op(Z,A1,B1):1
     [J>=X+1,S>=I+1,G>=E,B+1>=A,F+2>=2*E,X>=0,I>=0,E>=2,C>=0,A>=2,B1=0,A1=0,Z=0,Y=0,W=0,V=0,U=0,T=0,R=0,Q=1,P=0,O=1,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 187: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):4+ and_op(P,Q,R):1+ eq(I,S,T):1+ and_op(U,V,W):1+ eq(J,J,X):3+ and_op(Y,Z,A1):1
     [S>=I+1,G>=E,B+1>=A,F+2>=2*E,J>=0,I>=0,E>=2,C>=0,A>=2,A1=0,Z=1,Y=0,X=1,W=0,V=0,U=0,T=0,R=0,Q=1,P=0,O=1,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 188: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):4+ and_op(P,Q,R):1+ eq(I,S,T):2+ and_op(U,V,W):1+ eq(J,X,Y):1+ and_op(Z,A1,B1):1
     [X>=J+1,I>=S+1,G>=E,B+1>=A,F+2>=2*E,J>=0,S>=0,E>=2,C>=0,A>=2,B1=0,A1=0,Z=0,Y=0,W=0,V=0,U=0,T=0,R=0,Q=1,P=0,O=1,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 189: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):4+ and_op(P,Q,R):1+ eq(I,S,T):2+ and_op(U,V,W):1+ eq(J,X,Y):2+ and_op(Z,A1,B1):1
     [J>=X+1,I>=S+1,G>=E,B+1>=A,F+2>=2*E,X>=0,S>=0,E>=2,C>=0,A>=2,B1=0,A1=0,Z=0,Y=0,W=0,V=0,U=0,T=0,R=0,Q=1,P=0,O=1,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 190: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):4+ and_op(P,Q,R):1+ eq(I,S,T):2+ and_op(U,V,W):1+ eq(J,J,X):3+ and_op(Y,Z,A1):1
     [I>=S+1,G>=E,B+1>=A,F+2>=2*E,J>=0,S>=0,E>=2,C>=0,A>=2,A1=0,Z=1,Y=0,X=1,W=0,V=0,U=0,T=0,R=0,Q=1,P=0,O=1,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 191: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):4+ and_op(P,Q,R):1+ eq(I,I,S):3+ and_op(T,U,V):1+ eq(J,W,X):1+ and_op(Y,Z,A1):1
     [W>=J+1,G>=E,B+1>=A,F+2>=2*E,J>=0,I>=0,E>=2,C>=0,A>=2,A1=0,Z=0,Y=0,X=0,V=0,U=1,T=0,S=1,R=0,Q=1,P=0,O=1,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 192: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):4+ and_op(P,Q,R):1+ eq(I,I,S):3+ and_op(T,U,V):1+ eq(J,W,X):2+ and_op(Y,Z,A1):1
     [J>=W+1,G>=E,B+1>=A,F+2>=2*E,W>=0,I>=0,E>=2,C>=0,A>=2,A1=0,Z=0,Y=0,X=0,V=0,U=1,T=0,S=1,R=0,Q=1,P=0,O=1,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 193: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):4+ and_op(P,Q,R):1+ eq(I,I,S):3+ and_op(T,U,V):1+ eq(J,J,W):3+ and_op(X,Y,Z):1
     [G>=E,B+1>=A,F+2>=2*E,J>=0,I>=0,E>=2,C>=0,A>=2,Z=0,Y=1,X=0,W=1,V=0,U=1,T=0,S=1,R=0,Q=1,P=0,O=1,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 194: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(L,B,C,M,N):3+ check_matrix(E,F,G,O,P):2+ and_op(Q,R,S):2+ eq(I,T,U):1+ and_op(V,W,X):1+ eq(J,Y,Z):1+ and_op(A1,B1,C1):1
     [Y>=J+1,T>=I+1,F+1>=E,C>=B,J>=0,I>=0,G>=0,E>=2,B>=1,B+1=L,B+1=A,C1=0,B1=0,A1=0,Z=0,X=0,W=0,V=0,U=0,S=0,R=0,Q=1,P=0,O=1,N=1,M=1,K=0,H=1,D=1] 
* CE 195: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(L,B,C,M,N):3+ check_matrix(E,F,G,O,P):2+ and_op(Q,R,S):2+ eq(I,T,U):1+ and_op(V,W,X):1+ eq(J,Y,Z):2+ and_op(A1,B1,C1):1
     [J>=Y+1,T>=I+1,F+1>=E,C>=B,Y>=0,I>=0,G>=0,E>=2,B>=1,B+1=L,B+1=A,C1=0,B1=0,A1=0,Z=0,X=0,W=0,V=0,U=0,S=0,R=0,Q=1,P=0,O=1,N=1,M=1,K=0,H=1,D=1] 
* CE 196: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(L,B,C,M,N):3+ check_matrix(E,F,G,O,P):2+ and_op(Q,R,S):2+ eq(I,T,U):1+ and_op(V,W,X):1+ eq(J,J,Y):3+ and_op(Z,A1,B1):1
     [T>=I+1,F+1>=E,C>=B,J>=0,I>=0,G>=0,E>=2,B>=1,B+1=L,B+1=A,B1=0,A1=1,Z=0,Y=1,X=0,W=0,V=0,U=0,S=0,R=0,Q=1,P=0,O=1,N=1,M=1,K=0,H=1,D=1] 
* CE 197: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(L,B,C,M,N):3+ check_matrix(E,F,G,O,P):2+ and_op(Q,R,S):2+ eq(I,T,U):2+ and_op(V,W,X):1+ eq(J,Y,Z):1+ and_op(A1,B1,C1):1
     [Y>=J+1,I>=T+1,F+1>=E,C>=B,J>=0,T>=0,G>=0,E>=2,B>=1,B+1=L,B+1=A,C1=0,B1=0,A1=0,Z=0,X=0,W=0,V=0,U=0,S=0,R=0,Q=1,P=0,O=1,N=1,M=1,K=0,H=1,D=1] 
* CE 198: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(L,B,C,M,N):3+ check_matrix(E,F,G,O,P):2+ and_op(Q,R,S):2+ eq(I,T,U):2+ and_op(V,W,X):1+ eq(J,Y,Z):2+ and_op(A1,B1,C1):1
     [J>=Y+1,I>=T+1,F+1>=E,C>=B,Y>=0,T>=0,G>=0,E>=2,B>=1,B+1=L,B+1=A,C1=0,B1=0,A1=0,Z=0,X=0,W=0,V=0,U=0,S=0,R=0,Q=1,P=0,O=1,N=1,M=1,K=0,H=1,D=1] 
* CE 199: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(L,B,C,M,N):3+ check_matrix(E,F,G,O,P):2+ and_op(Q,R,S):2+ eq(I,T,U):2+ and_op(V,W,X):1+ eq(J,J,Y):3+ and_op(Z,A1,B1):1
     [I>=T+1,F+1>=E,C>=B,J>=0,T>=0,G>=0,E>=2,B>=1,B+1=L,B+1=A,B1=0,A1=1,Z=0,Y=1,X=0,W=0,V=0,U=0,S=0,R=0,Q=1,P=0,O=1,N=1,M=1,K=0,H=1,D=1] 
* CE 200: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(L,B,C,M,N):3+ check_matrix(E,F,G,O,P):2+ and_op(Q,R,S):2+ eq(I,I,T):3+ and_op(U,V,W):1+ eq(J,X,Y):1+ and_op(Z,A1,B1):1
     [X>=J+1,F+1>=E,C>=B,J>=0,I>=0,G>=0,E>=2,B>=1,B+1=L,B+1=A,B1=0,A1=0,Z=0,Y=0,W=0,V=1,U=0,T=1,S=0,R=0,Q=1,P=0,O=1,N=1,M=1,K=0,H=1,D=1] 
* CE 201: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(L,B,C,M,N):3+ check_matrix(E,F,G,O,P):2+ and_op(Q,R,S):2+ eq(I,I,T):3+ and_op(U,V,W):1+ eq(J,X,Y):2+ and_op(Z,A1,B1):1
     [J>=X+1,F+1>=E,C>=B,X>=0,I>=0,G>=0,E>=2,B>=1,B+1=L,B+1=A,B1=0,A1=0,Z=0,Y=0,W=0,V=1,U=0,T=1,S=0,R=0,Q=1,P=0,O=1,N=1,M=1,K=0,H=1,D=1] 
* CE 202: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(L,B,C,M,N):3+ check_matrix(E,F,G,O,P):2+ and_op(Q,R,S):2+ eq(I,I,T):3+ and_op(U,V,W):1+ eq(J,J,X):3+ and_op(Y,Z,A1):1
     [F+1>=E,C>=B,J>=0,I>=0,G>=0,E>=2,B>=1,B+1=L,B+1=A,A1=0,Z=1,Y=0,X=1,W=0,V=1,U=0,T=1,S=0,R=0,Q=1,P=0,O=1,N=1,M=1,K=0,H=1,D=1] 
* CE 203: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(L,B,C,M,N):3+ check_matrix(O,F,G,P,Q):3+ and_op(R,S,T):2+ eq(I,U,V):1+ and_op(W,X,Y):2+ eq(J,Z,A1):1+ and_op(B1,C1,D1):1
     [Z>=J+1,U>=I+1,G>=F,C>=B,J>=0,I>=0,F>=1,B>=1,F+1=O,B+1=L,F+1=E,B+1=A,D1=0,C1=0,B1=0,A1=0,Y=0,X=0,W=1,V=0,T=1,S=1,R=1,Q=1,P=1,N=1,M=1,K=0,H=1,D=1] 
* CE 204: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(L,B,C,M,N):3+ check_matrix(O,F,G,P,Q):3+ and_op(R,S,T):2+ eq(I,U,V):1+ and_op(W,X,Y):2+ eq(J,Z,A1):2+ and_op(B1,C1,D1):1
     [J>=Z+1,U>=I+1,G>=F,C>=B,Z>=0,I>=0,F>=1,B>=1,F+1=O,B+1=L,F+1=E,B+1=A,D1=0,C1=0,B1=0,A1=0,Y=0,X=0,W=1,V=0,T=1,S=1,R=1,Q=1,P=1,N=1,M=1,K=0,H=1,D=1] 
* CE 205: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(L,B,C,M,N):3+ check_matrix(O,F,G,P,Q):3+ and_op(R,S,T):2+ eq(I,U,V):1+ and_op(W,X,Y):2+ eq(J,J,Z):3+ and_op(A1,B1,C1):1
     [U>=I+1,G>=F,C>=B,J>=0,I>=0,F>=1,B>=1,F+1=O,B+1=L,F+1=E,B+1=A,C1=0,B1=1,A1=0,Z=1,Y=0,X=0,W=1,V=0,T=1,S=1,R=1,Q=1,P=1,N=1,M=1,K=0,H=1,D=1] 
* CE 206: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(L,B,C,M,N):3+ check_matrix(O,F,G,P,Q):3+ and_op(R,S,T):2+ eq(I,U,V):2+ and_op(W,X,Y):2+ eq(J,Z,A1):1+ and_op(B1,C1,D1):1
     [Z>=J+1,I>=U+1,G>=F,C>=B,J>=0,U>=0,F>=1,B>=1,F+1=O,B+1=L,F+1=E,B+1=A,D1=0,C1=0,B1=0,A1=0,Y=0,X=0,W=1,V=0,T=1,S=1,R=1,Q=1,P=1,N=1,M=1,K=0,H=1,D=1] 
* CE 207: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(L,B,C,M,N):3+ check_matrix(O,F,G,P,Q):3+ and_op(R,S,T):2+ eq(I,U,V):2+ and_op(W,X,Y):2+ eq(J,Z,A1):2+ and_op(B1,C1,D1):1
     [J>=Z+1,I>=U+1,G>=F,C>=B,Z>=0,U>=0,F>=1,B>=1,F+1=O,B+1=L,F+1=E,B+1=A,D1=0,C1=0,B1=0,A1=0,Y=0,X=0,W=1,V=0,T=1,S=1,R=1,Q=1,P=1,N=1,M=1,K=0,H=1,D=1] 
* CE 208: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(L,B,C,M,N):3+ check_matrix(O,F,G,P,Q):3+ and_op(R,S,T):2+ eq(I,U,V):2+ and_op(W,X,Y):2+ eq(J,J,Z):3+ and_op(A1,B1,C1):1
     [I>=U+1,G>=F,C>=B,J>=0,U>=0,F>=1,B>=1,F+1=O,B+1=L,F+1=E,B+1=A,C1=0,B1=1,A1=0,Z=1,Y=0,X=0,W=1,V=0,T=1,S=1,R=1,Q=1,P=1,N=1,M=1,K=0,H=1,D=1] 
* CE 209: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(L,B,C,M,N):3+ check_matrix(O,F,G,P,Q):3+ and_op(R,S,T):2+ eq(I,I,U):3+ and_op(V,W,X):2+ eq(J,Y,Z):1+ and_op(A1,B1,C1):2
     [Y>=J+1,G>=F,C>=B,J>=0,I>=0,F>=1,B>=1,F+1=O,B+1=L,F+1=E,B+1=A,C1=0,B1=0,A1=1,Z=0,X=1,W=1,V=1,U=1,T=1,S=1,R=1,Q=1,P=1,N=1,M=1,K=0,H=1,D=1] 
* CE 210: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(L,B,C,M,N):3+ check_matrix(O,F,G,P,Q):3+ and_op(R,S,T):2+ eq(I,I,U):3+ and_op(V,W,X):2+ eq(J,Y,Z):2+ and_op(A1,B1,C1):2
     [J>=Y+1,G>=F,C>=B,Y>=0,I>=0,F>=1,B>=1,F+1=O,B+1=L,F+1=E,B+1=A,C1=0,B1=0,A1=1,Z=0,X=1,W=1,V=1,U=1,T=1,S=1,R=1,Q=1,P=1,N=1,M=1,K=0,H=1,D=1] 
* CE 211: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(L,B,C,M,N):3+ check_matrix(O,F,G,P,Q):3+ and_op(R,S,T):2+ eq(I,I,U):3+ and_op(V,W,X):2+ eq(J,J,Y):3+ and_op(Z,A1,B1):2
     [G>=F,C>=B,J>=0,I>=0,F>=1,B>=1,F+1=O,B+1=L,F+1=E,B+1=A,B1=1,A1=1,Z=1,Y=1,X=1,W=1,V=1,U=1,T=1,S=1,R=1,Q=1,P=1,N=1,M=1,K=1,H=1,D=1] 
* CE 212: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(L,B,C,M,N):3+ check_matrix(E,F,G,O,P):4+ and_op(Q,R,S):2+ eq(I,T,U):1+ and_op(V,W,X):2+ eq(J,Y,Z):1+ and_op(A1,B1,C1):1
     [Y>=J+1,T>=I+1,G>=E,C>=B,F+2>=2*E,J>=0,I>=0,E>=2,B>=1,B+1=L,B+1=A,C1=0,B1=0,A1=0,Z=0,X=0,W=0,V=1,U=0,S=1,R=1,Q=1,P=1,O=1,N=1,M=1,K=0,H=1,D=1] 
* CE 213: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(L,B,C,M,N):3+ check_matrix(E,F,G,O,P):4+ and_op(Q,R,S):2+ eq(I,T,U):1+ and_op(V,W,X):2+ eq(J,Y,Z):2+ and_op(A1,B1,C1):1
     [J>=Y+1,T>=I+1,G>=E,C>=B,F+2>=2*E,Y>=0,I>=0,E>=2,B>=1,B+1=L,B+1=A,C1=0,B1=0,A1=0,Z=0,X=0,W=0,V=1,U=0,S=1,R=1,Q=1,P=1,O=1,N=1,M=1,K=0,H=1,D=1] 
* CE 214: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(L,B,C,M,N):3+ check_matrix(E,F,G,O,P):4+ and_op(Q,R,S):2+ eq(I,T,U):1+ and_op(V,W,X):2+ eq(J,J,Y):3+ and_op(Z,A1,B1):1
     [T>=I+1,G>=E,C>=B,F+2>=2*E,J>=0,I>=0,E>=2,B>=1,B+1=L,B+1=A,B1=0,A1=1,Z=0,Y=1,X=0,W=0,V=1,U=0,S=1,R=1,Q=1,P=1,O=1,N=1,M=1,K=0,H=1,D=1] 
* CE 215: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(L,B,C,M,N):3+ check_matrix(E,F,G,O,P):4+ and_op(Q,R,S):2+ eq(I,T,U):2+ and_op(V,W,X):2+ eq(J,Y,Z):1+ and_op(A1,B1,C1):1
     [Y>=J+1,I>=T+1,G>=E,C>=B,F+2>=2*E,J>=0,T>=0,E>=2,B>=1,B+1=L,B+1=A,C1=0,B1=0,A1=0,Z=0,X=0,W=0,V=1,U=0,S=1,R=1,Q=1,P=1,O=1,N=1,M=1,K=0,H=1,D=1] 
* CE 216: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(L,B,C,M,N):3+ check_matrix(E,F,G,O,P):4+ and_op(Q,R,S):2+ eq(I,T,U):2+ and_op(V,W,X):2+ eq(J,Y,Z):2+ and_op(A1,B1,C1):1
     [J>=Y+1,I>=T+1,G>=E,C>=B,F+2>=2*E,Y>=0,T>=0,E>=2,B>=1,B+1=L,B+1=A,C1=0,B1=0,A1=0,Z=0,X=0,W=0,V=1,U=0,S=1,R=1,Q=1,P=1,O=1,N=1,M=1,K=0,H=1,D=1] 
* CE 217: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(L,B,C,M,N):3+ check_matrix(E,F,G,O,P):4+ and_op(Q,R,S):2+ eq(I,T,U):2+ and_op(V,W,X):2+ eq(J,J,Y):3+ and_op(Z,A1,B1):1
     [I>=T+1,G>=E,C>=B,F+2>=2*E,J>=0,T>=0,E>=2,B>=1,B+1=L,B+1=A,B1=0,A1=1,Z=0,Y=1,X=0,W=0,V=1,U=0,S=1,R=1,Q=1,P=1,O=1,N=1,M=1,K=0,H=1,D=1] 
* CE 218: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(L,B,C,M,N):3+ check_matrix(E,F,G,O,P):4+ and_op(Q,R,S):2+ eq(I,I,T):3+ and_op(U,V,W):2+ eq(J,X,Y):1+ and_op(Z,A1,B1):2
     [X>=J+1,G>=E,C>=B,F+2>=2*E,J>=0,I>=0,E>=2,B>=1,B+1=L,B+1=A,B1=0,A1=0,Z=1,Y=0,W=1,V=1,U=1,T=1,S=1,R=1,Q=1,P=1,O=1,N=1,M=1,K=0,H=1,D=1] 
* CE 219: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(L,B,C,M,N):3+ check_matrix(E,F,G,O,P):4+ and_op(Q,R,S):2+ eq(I,I,T):3+ and_op(U,V,W):2+ eq(J,X,Y):2+ and_op(Z,A1,B1):2
     [J>=X+1,G>=E,C>=B,F+2>=2*E,X>=0,I>=0,E>=2,B>=1,B+1=L,B+1=A,B1=0,A1=0,Z=1,Y=0,W=1,V=1,U=1,T=1,S=1,R=1,Q=1,P=1,O=1,N=1,M=1,K=0,H=1,D=1] 
* CE 220: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(L,B,C,M,N):3+ check_matrix(E,F,G,O,P):4+ and_op(Q,R,S):2+ eq(I,I,T):3+ and_op(U,V,W):2+ eq(J,J,X):3+ and_op(Y,Z,A1):2
     [G>=E,C>=B,F+2>=2*E,J>=0,I>=0,E>=2,B>=1,B+1=L,B+1=A,A1=1,Z=1,Y=1,X=1,W=1,V=1,U=1,T=1,S=1,R=1,Q=1,P=1,O=1,N=1,M=1,K=1,H=1,D=1] 
* CE 221: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):4+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):2+ eq(I,S,T):1+ and_op(U,V,W):1+ eq(J,X,Y):1+ and_op(Z,A1,B1):1
     [X>=J+1,S>=I+1,F+1>=E,C>=A,B+2>=2*A,J>=0,I>=0,G>=0,E>=2,A>=2,B1=0,A1=0,Z=0,Y=0,W=0,V=0,U=0,T=0,R=0,Q=0,P=1,O=0,N=1,M=1,L=1,K=0,H=1,D=1] 
* CE 222: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):4+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):2+ eq(I,S,T):1+ and_op(U,V,W):1+ eq(J,X,Y):2+ and_op(Z,A1,B1):1
     [J>=X+1,S>=I+1,F+1>=E,C>=A,B+2>=2*A,X>=0,I>=0,G>=0,E>=2,A>=2,B1=0,A1=0,Z=0,Y=0,W=0,V=0,U=0,T=0,R=0,Q=0,P=1,O=0,N=1,M=1,L=1,K=0,H=1,D=1] 
* CE 223: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):4+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):2+ eq(I,S,T):1+ and_op(U,V,W):1+ eq(J,J,X):3+ and_op(Y,Z,A1):1
     [S>=I+1,F+1>=E,C>=A,B+2>=2*A,J>=0,I>=0,G>=0,E>=2,A>=2,A1=0,Z=1,Y=0,X=1,W=0,V=0,U=0,T=0,R=0,Q=0,P=1,O=0,N=1,M=1,L=1,K=0,H=1,D=1] 
* CE 224: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):4+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):2+ eq(I,S,T):2+ and_op(U,V,W):1+ eq(J,X,Y):1+ and_op(Z,A1,B1):1
     [X>=J+1,I>=S+1,F+1>=E,C>=A,B+2>=2*A,J>=0,S>=0,G>=0,E>=2,A>=2,B1=0,A1=0,Z=0,Y=0,W=0,V=0,U=0,T=0,R=0,Q=0,P=1,O=0,N=1,M=1,L=1,K=0,H=1,D=1] 
* CE 225: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):4+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):2+ eq(I,S,T):2+ and_op(U,V,W):1+ eq(J,X,Y):2+ and_op(Z,A1,B1):1
     [J>=X+1,I>=S+1,F+1>=E,C>=A,B+2>=2*A,X>=0,S>=0,G>=0,E>=2,A>=2,B1=0,A1=0,Z=0,Y=0,W=0,V=0,U=0,T=0,R=0,Q=0,P=1,O=0,N=1,M=1,L=1,K=0,H=1,D=1] 
* CE 226: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):4+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):2+ eq(I,S,T):2+ and_op(U,V,W):1+ eq(J,J,X):3+ and_op(Y,Z,A1):1
     [I>=S+1,F+1>=E,C>=A,B+2>=2*A,J>=0,S>=0,G>=0,E>=2,A>=2,A1=0,Z=1,Y=0,X=1,W=0,V=0,U=0,T=0,R=0,Q=0,P=1,O=0,N=1,M=1,L=1,K=0,H=1,D=1] 
* CE 227: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):4+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):2+ eq(I,I,S):3+ and_op(T,U,V):1+ eq(J,W,X):1+ and_op(Y,Z,A1):1
     [W>=J+1,F+1>=E,C>=A,B+2>=2*A,J>=0,I>=0,G>=0,E>=2,A>=2,A1=0,Z=0,Y=0,X=0,V=0,U=1,T=0,S=1,R=0,Q=0,P=1,O=0,N=1,M=1,L=1,K=0,H=1,D=1] 
* CE 228: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):4+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):2+ eq(I,I,S):3+ and_op(T,U,V):1+ eq(J,W,X):2+ and_op(Y,Z,A1):1
     [J>=W+1,F+1>=E,C>=A,B+2>=2*A,W>=0,I>=0,G>=0,E>=2,A>=2,A1=0,Z=0,Y=0,X=0,V=0,U=1,T=0,S=1,R=0,Q=0,P=1,O=0,N=1,M=1,L=1,K=0,H=1,D=1] 
* CE 229: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):4+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):2+ eq(I,I,S):3+ and_op(T,U,V):1+ eq(J,J,W):3+ and_op(X,Y,Z):1
     [F+1>=E,C>=A,B+2>=2*A,J>=0,I>=0,G>=0,E>=2,A>=2,Z=0,Y=1,X=0,W=1,V=0,U=1,T=0,S=1,R=0,Q=0,P=1,O=0,N=1,M=1,L=1,K=0,H=1,D=1] 
* CE 230: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):4+ check_matrix(N,F,G,O,P):3+ and_op(Q,R,S):2+ eq(I,T,U):1+ and_op(V,W,X):2+ eq(J,Y,Z):1+ and_op(A1,B1,C1):1
     [Y>=J+1,T>=I+1,G>=F,C>=A,B+2>=2*A,J>=0,I>=0,F>=1,A>=2,F+1=N,F+1=E,C1=0,B1=0,A1=0,Z=0,X=0,W=0,V=1,U=0,S=1,R=1,Q=1,P=1,O=1,M=1,L=1,K=0,H=1,D=1] 
* CE 231: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):4+ check_matrix(N,F,G,O,P):3+ and_op(Q,R,S):2+ eq(I,T,U):1+ and_op(V,W,X):2+ eq(J,Y,Z):2+ and_op(A1,B1,C1):1
     [J>=Y+1,T>=I+1,G>=F,C>=A,B+2>=2*A,Y>=0,I>=0,F>=1,A>=2,F+1=N,F+1=E,C1=0,B1=0,A1=0,Z=0,X=0,W=0,V=1,U=0,S=1,R=1,Q=1,P=1,O=1,M=1,L=1,K=0,H=1,D=1] 
* CE 232: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):4+ check_matrix(N,F,G,O,P):3+ and_op(Q,R,S):2+ eq(I,T,U):1+ and_op(V,W,X):2+ eq(J,J,Y):3+ and_op(Z,A1,B1):1
     [T>=I+1,G>=F,C>=A,B+2>=2*A,J>=0,I>=0,F>=1,A>=2,F+1=N,F+1=E,B1=0,A1=1,Z=0,Y=1,X=0,W=0,V=1,U=0,S=1,R=1,Q=1,P=1,O=1,M=1,L=1,K=0,H=1,D=1] 
* CE 233: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):4+ check_matrix(N,F,G,O,P):3+ and_op(Q,R,S):2+ eq(I,T,U):2+ and_op(V,W,X):2+ eq(J,Y,Z):1+ and_op(A1,B1,C1):1
     [Y>=J+1,I>=T+1,G>=F,C>=A,B+2>=2*A,J>=0,T>=0,F>=1,A>=2,F+1=N,F+1=E,C1=0,B1=0,A1=0,Z=0,X=0,W=0,V=1,U=0,S=1,R=1,Q=1,P=1,O=1,M=1,L=1,K=0,H=1,D=1] 
* CE 234: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):4+ check_matrix(N,F,G,O,P):3+ and_op(Q,R,S):2+ eq(I,T,U):2+ and_op(V,W,X):2+ eq(J,Y,Z):2+ and_op(A1,B1,C1):1
     [J>=Y+1,I>=T+1,G>=F,C>=A,B+2>=2*A,Y>=0,T>=0,F>=1,A>=2,F+1=N,F+1=E,C1=0,B1=0,A1=0,Z=0,X=0,W=0,V=1,U=0,S=1,R=1,Q=1,P=1,O=1,M=1,L=1,K=0,H=1,D=1] 
* CE 235: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):4+ check_matrix(N,F,G,O,P):3+ and_op(Q,R,S):2+ eq(I,T,U):2+ and_op(V,W,X):2+ eq(J,J,Y):3+ and_op(Z,A1,B1):1
     [I>=T+1,G>=F,C>=A,B+2>=2*A,J>=0,T>=0,F>=1,A>=2,F+1=N,F+1=E,B1=0,A1=1,Z=0,Y=1,X=0,W=0,V=1,U=0,S=1,R=1,Q=1,P=1,O=1,M=1,L=1,K=0,H=1,D=1] 
* CE 236: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):4+ check_matrix(N,F,G,O,P):3+ and_op(Q,R,S):2+ eq(I,I,T):3+ and_op(U,V,W):2+ eq(J,X,Y):1+ and_op(Z,A1,B1):2
     [X>=J+1,G>=F,C>=A,B+2>=2*A,J>=0,I>=0,F>=1,A>=2,F+1=N,F+1=E,B1=0,A1=0,Z=1,Y=0,W=1,V=1,U=1,T=1,S=1,R=1,Q=1,P=1,O=1,M=1,L=1,K=0,H=1,D=1] 
* CE 237: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):4+ check_matrix(N,F,G,O,P):3+ and_op(Q,R,S):2+ eq(I,I,T):3+ and_op(U,V,W):2+ eq(J,X,Y):2+ and_op(Z,A1,B1):2
     [J>=X+1,G>=F,C>=A,B+2>=2*A,X>=0,I>=0,F>=1,A>=2,F+1=N,F+1=E,B1=0,A1=0,Z=1,Y=0,W=1,V=1,U=1,T=1,S=1,R=1,Q=1,P=1,O=1,M=1,L=1,K=0,H=1,D=1] 
* CE 238: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):4+ check_matrix(N,F,G,O,P):3+ and_op(Q,R,S):2+ eq(I,I,T):3+ and_op(U,V,W):2+ eq(J,J,X):3+ and_op(Y,Z,A1):2
     [G>=F,C>=A,B+2>=2*A,J>=0,I>=0,F>=1,A>=2,F+1=N,F+1=E,A1=1,Z=1,Y=1,X=1,W=1,V=1,U=1,T=1,S=1,R=1,Q=1,P=1,O=1,M=1,L=1,K=1,H=1,D=1] 
* CE 239: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):4+ check_matrix(E,F,G,N,O):4+ and_op(P,Q,R):2+ eq(I,S,T):1+ and_op(U,V,W):2+ eq(J,X,Y):1+ and_op(Z,A1,B1):1
     [X>=J+1,S>=I+1,G>=E,C>=A,F+2>=2*E,B+2>=2*A,J>=0,I>=0,E>=2,A>=2,B1=0,A1=0,Z=0,Y=0,W=0,V=0,U=1,T=0,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,K=0,H=1,D=1] 
* CE 240: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):4+ check_matrix(E,F,G,N,O):4+ and_op(P,Q,R):2+ eq(I,S,T):1+ and_op(U,V,W):2+ eq(J,X,Y):2+ and_op(Z,A1,B1):1
     [J>=X+1,S>=I+1,G>=E,C>=A,F+2>=2*E,B+2>=2*A,X>=0,I>=0,E>=2,A>=2,B1=0,A1=0,Z=0,Y=0,W=0,V=0,U=1,T=0,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,K=0,H=1,D=1] 
* CE 241: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):4+ check_matrix(E,F,G,N,O):4+ and_op(P,Q,R):2+ eq(I,S,T):1+ and_op(U,V,W):2+ eq(J,J,X):3+ and_op(Y,Z,A1):1
     [S>=I+1,G>=E,C>=A,F+2>=2*E,B+2>=2*A,J>=0,I>=0,E>=2,A>=2,A1=0,Z=1,Y=0,X=1,W=0,V=0,U=1,T=0,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,K=0,H=1,D=1] 
* CE 242: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):4+ check_matrix(E,F,G,N,O):4+ and_op(P,Q,R):2+ eq(I,S,T):2+ and_op(U,V,W):2+ eq(J,X,Y):1+ and_op(Z,A1,B1):1
     [X>=J+1,I>=S+1,G>=E,C>=A,F+2>=2*E,B+2>=2*A,J>=0,S>=0,E>=2,A>=2,B1=0,A1=0,Z=0,Y=0,W=0,V=0,U=1,T=0,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,K=0,H=1,D=1] 
* CE 243: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):4+ check_matrix(E,F,G,N,O):4+ and_op(P,Q,R):2+ eq(I,S,T):2+ and_op(U,V,W):2+ eq(J,X,Y):2+ and_op(Z,A1,B1):1
     [J>=X+1,I>=S+1,G>=E,C>=A,F+2>=2*E,B+2>=2*A,X>=0,S>=0,E>=2,A>=2,B1=0,A1=0,Z=0,Y=0,W=0,V=0,U=1,T=0,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,K=0,H=1,D=1] 
* CE 244: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):4+ check_matrix(E,F,G,N,O):4+ and_op(P,Q,R):2+ eq(I,S,T):2+ and_op(U,V,W):2+ eq(J,J,X):3+ and_op(Y,Z,A1):1
     [I>=S+1,G>=E,C>=A,F+2>=2*E,B+2>=2*A,J>=0,S>=0,E>=2,A>=2,A1=0,Z=1,Y=0,X=1,W=0,V=0,U=1,T=0,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,K=0,H=1,D=1] 
* CE 245: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):4+ check_matrix(E,F,G,N,O):4+ and_op(P,Q,R):2+ eq(I,I,S):3+ and_op(T,U,V):2+ eq(J,W,X):1+ and_op(Y,Z,A1):2
     [W>=J+1,G>=E,C>=A,F+2>=2*E,B+2>=2*A,J>=0,I>=0,E>=2,A>=2,A1=0,Z=0,Y=1,X=0,V=1,U=1,T=1,S=1,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,K=0,H=1,D=1] 
* CE 246: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):4+ check_matrix(E,F,G,N,O):4+ and_op(P,Q,R):2+ eq(I,I,S):3+ and_op(T,U,V):2+ eq(J,W,X):2+ and_op(Y,Z,A1):2
     [J>=W+1,G>=E,C>=A,F+2>=2*E,B+2>=2*A,W>=0,I>=0,E>=2,A>=2,A1=0,Z=0,Y=1,X=0,V=1,U=1,T=1,S=1,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,K=0,H=1,D=1] 
* CE 247: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):4+ check_matrix(E,F,G,N,O):4+ and_op(P,Q,R):2+ eq(I,I,S):3+ and_op(T,U,V):2+ eq(J,J,W):3+ and_op(X,Y,Z):2
     [G>=E,C>=A,F+2>=2*E,B+2>=2*A,J>=0,I>=0,E>=2,A>=2,Z=1,Y=1,X=1,W=1,V=1,U=1,T=1,S=1,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,K=1,H=1,D=1] 

### Cost equations --> "Loop" of case_17/11 
* CEs [247] --> Loop 143 
* CEs [238] --> Loop 144 
* CEs [220] --> Loop 145 
* CEs [211] --> Loop 146 
* CEs [176,177,178,179,180,181,182,183,184,230,231,232,233,234,235,236,237] --> Loop 147 
* CEs [167,168,169,170,171,172,173,174,175,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,212,213,214,215,216,217,218,219,221,222,223,224,225,226,227,228,229,239,240,241,242,243,244,245,246] --> Loop 148 

#### Loops of case_17/11 
* Loop 143: case_17(A,B,C,D,E,F,G,H,I,J,K) [G>=E,C>=A,F+2>=2*E,B+2>=2*A,J>=0,I>=0,E>=2,A>=2,K=1,H=1,D=1] 
* Loop 144: case_17(A,B,C,D,E,F,G,H,I,J,K) [G+1>=E,C>=A,B+2>=2*A,J>=0,I>=0,E>=2,A>=2,E=F+1,K=1,H=1,D=1] 
* Loop 145: case_17(A,B,C,D,E,F,G,H,I,J,K) [G>=E,C+1>=A,F+2>=2*E,J>=0,I>=0,E>=2,A>=2,A=B+1,K=1,H=1,D=1] 
* Loop 146: case_17(A,B,C,D,E,F,G,H,I,J,K) [G+1>=E,C+1>=A,J>=0,I>=0,E>=2,A>=2,E=F+1,A=B+1,K=1,H=1,D=1] 
* Loop 147: case_17(A,B,C,D,E,F,G,H,I,J,K) [G+1>=E,B+1>=A,J>=0,I>=0,E>=2,C>=0,A>=2,E=F+1,K=0,H=1,D=1] 
* Loop 148: case_17(A,B,C,D,E,F,G,H,I,J,K) [F+1>=E,B+1>=A,J>=0,I>=0,G>=0,E>=2,C>=0,A>=2,K=0,H=1,D=1] 

### Ranking functions of CR case_17(A,B,C,D,E,F,G,H,I,J,K) 

#### Partial ranking functions of CR case_17(A,B,C,D,E,F,G,H,I,J,K) 


### Resulting Chains:case_17(A,B,C,D,E,F,G,H,I,J,K) 
* [148]
* [147]
* [146]
* [145]
* [144]
* [143]


### Merging Chains  case_17/11 into  External patterns of execution 
* [[147],[148]] --> 1 
* [[146]] --> 2 
* [[145]] --> 3 
* [[144]] --> 4 
* [[143]] --> 5 


### Specialization of cost equations check_sanity/9 
* CE 19 is refined into CE [248,249,250,251,252] 


#### Refined cost equations check_sanity/9 
* CE 248: check_sanity(A,B,C,D,E,F,G,H,I) = 3+ case_17(A,B,C,J,E,F,G,K,L,M,N):1
     [F+1>=E,B+1>=A,M>=0,L>=0,G>=0,E>=2,C>=0,A>=2,N=0,K=1,J=1,I=0,H=1,D=1] 
* CE 249: check_sanity(A,B,C,D,E,F,G,H,I) = 3+ case_17(J,B,C,K,L,F,G,M,N,O,P):2
     [G>=F,C>=B,O>=0,N>=0,F>=1,B>=1,F+1=L,B+1=J,F+1=E,B+1=A,P=1,M=1,K=1,I=1,H=1,D=1] 
* CE 250: check_sanity(A,B,C,D,E,F,G,H,I) = 3+ case_17(J,B,C,K,E,F,G,L,M,N,O):3
     [G>=E,C>=B,F+2>=2*E,N>=0,M>=0,E>=2,B>=1,B+1=J,B+1=A,O=1,L=1,K=1,I=1,H=1,D=1] 
* CE 251: check_sanity(A,B,C,D,E,F,G,H,I) = 3+ case_17(A,B,C,J,K,F,G,L,M,N,O):4
     [G>=F,C>=A,B+2>=2*A,N>=0,M>=0,F>=1,A>=2,F+1=K,F+1=E,O=1,L=1,J=1,I=1,H=1,D=1] 
* CE 252: check_sanity(A,B,C,D,E,F,G,H,I) = 3+ case_17(A,B,C,J,E,F,G,K,L,M,N):5
     [G>=E,C>=A,F+2>=2*E,B+2>=2*A,M>=0,L>=0,E>=2,A>=2,N=1,K=1,J=1,I=1,H=1,D=1] 

### Cost equations --> "Loop" of check_sanity/9 
* CEs [252] --> Loop 149 
* CEs [251] --> Loop 150 
* CEs [250] --> Loop 151 
* CEs [249] --> Loop 152 
* CEs [248] --> Loop 153 

#### Loops of check_sanity/9 
* Loop 149: check_sanity(A,B,C,D,E,F,G,H,I) [G>=E,C>=A,F+2>=2*E,B+2>=2*A,E>=2,A>=2,I=1,H=1,D=1] 
* Loop 150: check_sanity(A,B,C,D,E,F,G,H,I) [G+1>=E,C>=A,B+2>=2*A,E>=2,A>=2,E=F+1,I=1,H=1,D=1] 
* Loop 151: check_sanity(A,B,C,D,E,F,G,H,I) [G>=E,C+1>=A,F+2>=2*E,E>=2,A>=2,A=B+1,I=1,H=1,D=1] 
* Loop 152: check_sanity(A,B,C,D,E,F,G,H,I) [G+1>=E,C+1>=A,E>=2,A>=2,E=F+1,A=B+1,I=1,H=1,D=1] 
* Loop 153: check_sanity(A,B,C,D,E,F,G,H,I) [F+1>=E,B+1>=A,G>=0,E>=2,C>=0,A>=2,I=0,H=1,D=1] 

### Ranking functions of CR check_sanity(A,B,C,D,E,F,G,H,I) 

#### Partial ranking functions of CR check_sanity(A,B,C,D,E,F,G,H,I) 


### Resulting Chains:check_sanity(A,B,C,D,E,F,G,H,I) 
* [153]
* [152]
* [151]
* [150]
* [149]


### Merging Chains  check_sanity/9 into  External patterns of execution 
* [[153]] --> 1 
* [[152]] --> 2 
* [[151]] --> 3 
* [[150]] --> 4 
* [[149]] --> 5 


### Specialization of cost equations lineMult/7 
* CE 51 is refined into CE [253] 
* CE 50 is refined into CE [254] 
* CE 49 is refined into CE [255] 


#### Refined cost equations lineMult/7 
* CE 253: lineMult(A,B,C,D,E,F,G) = 10+ lineMult(A,H,I,J,K,L,M)
     [C>=I,L>=1,J>=1,I>=0,H>=1,G>=0,E>=0,A>=0,L+1=F,J+1=D,H+1=B] 
* CE 254: lineMult(A,B,C,D,E,F,G) = 9+ lineMult(A,H,I,J,K,L,M)
     [C>=I,L>=1,I>=0,H>=1,G>=0,E>=0,A>=0,L+1=F,H+1=B,J=1,D=1] 
* CE 255: lineMult(A,B,C,D,E,F,G) = 3
     [G>=0,E>=0,D>=0,C>=0,A>=0,F=1,B=1] 

### Cost equations --> "Loop" of lineMult/7 
* CEs [255] --> Loop 154 
* CEs [253] --> Loop 155 
* CEs [254] --> Loop 156 

#### Loops of lineMult/7 
* Loop 154: lineMult(A,B,C,D,E,F,G) [G>=0,E>=0,D>=0,C>=0,A>=0,F=1,B=1] 
* Loop 155: lineMult(A,B,C,D,E,F,G)->  lineMult(A,A',B',C',D',E',F')
                  [C>=B',B'>=0,G>=0,F>=2,E>=0,D>=2,B>=2,A>=0,F=E'+1,D=C'+1,B=A'+1] 
* Loop 156: lineMult(A,B,C,D,E,F,G)->  lineMult(A,A',B',C',D',E',F')
                  [C>=B',B'>=0,G>=0,F>=2,E>=0,B>=2,A>=0,F=E'+1,B=A'+1,C'=1,D=1] 

### Ranking functions of CR lineMult(A,B,C,D,E,F,G) 
* RF of phase [155]: [B-1,D-1]
* RF of phase [156]: [B-1]

#### Partial ranking functions of CR lineMult(A,B,C,D,E,F,G) 
* Partial RF of phase [155]:
  - RF of loop [155:1]:
    B-1
    D-1
* Partial RF of phase [156]:
  - RF of loop [156:1]:
    B-1

Discarded unfeasible chain [[156]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [[155]](Non-terminating chain proved terminating)
Discarded unfeasible chain [[155],[156]](Non-terminating chain proved terminating)

### Resulting Chains:lineMult(A,B,C,D,E,F,G) 
* [[156],154]
* [[155],[156],154]
* [[155],154]
* [154]


### Merging Chains  lineMult/7 into  External patterns of execution 
* [[154]] --> 1 
* [[154,[156]]] --> 2 
* [[154,[155]]] --> 3 
* [[154,[156],[155]]] --> 4 


### Specialization of cost equations computeLine/9 
* CE 54 is refined into CE [256,257,258,259] 
* CE 53 is refined into CE [260] 
* CE 52 is refined into CE [261] 


#### Refined cost equations computeLine/9 
* CE 256: computeLine(A,B,C,D,E,F,G,H,I) = 8+ lineMult(J,K,L,F,G,M,N):1+ computeLine(O,P,Q,R,S,T,N,H,I)
     [L+S>=0,R+1>=0,Q>=1,P>=0,O>=1,N>=0,G>=0,F>=0,L>=0,J>=0,I>=0,H>=0,L+S=E,J+P=B,R+1=D,Q+1=C,O+1=A,T=1,M=1,K=1] 
* CE 257: computeLine(A,B,C,D,E,F,G,H,I) = 8+ lineMult(J,K,L,M,G,K,N):2+ computeLine(O,P,Q,R,S,K,N,H,I)
     [K+R>=0,L+S>=0,Q>=1,P>=0,O>=1,N>=0,K>=2,G>=0,L>=0,J>=0,I>=0,H>=0,L+S=E,K+R=D,J+P=B,Q+1=C,O+1=A,M=1,F=1] 
* CE 258: computeLine(A,B,C,D,E,F,G,H,I) = 8+ lineMult(J,K,L,F,G,K,M):3+ computeLine(N,O,P,Q,R,K,M,H,I)
     [K+Q>=0,L+R>=0,F>=K,P>=1,O>=0,N>=1,M>=0,K>=2,G>=0,L>=0,J>=0,I>=0,H>=0,L+R=E,K+Q=D,J+O=B,P+1=C,N+1=A] 
* CE 259: computeLine(A,B,C,D,E,F,G,H,I) = 8+ lineMult(J,K,L,F,G,K,M):4+ computeLine(N,O,P,Q,R,K,M,H,I)
     [K+Q>=0,L+R>=0,K>=F+1,P>=1,O>=0,N>=1,M>=0,G>=0,F>=2,L>=0,J>=0,I>=0,H>=0,L+R=E,K+Q=D,J+O=B,P+1=C,N+1=A] 
* CE 260: computeLine(A,B,C,D,E,F,G,H,I) = 6
     [I>=0,G>=0,F>=0,E>=0,B>=0,A>=2,H=1,D=0,C=1] 
* CE 261: computeLine(A,B,C,D,E,F,G,F,G) = 2
     [G>=0,F>=0,E>=0,D>=0,C>=0,B>=0,A=1] 

### Cost equations --> "Loop" of computeLine/9 
* CEs [260] --> Loop 157 
* CEs [261] --> Loop 158 
* CEs [258] --> Loop 159 
* CEs [259] --> Loop 160 
* CEs [256] --> Loop 161 
* CEs [257] --> Loop 162 

#### Loops of computeLine/9 
* Loop 157: computeLine(A,B,C,D,E,F,G,H,I) [I>=0,G>=0,F>=0,E>=0,B>=0,A>=2,H=1,D=0,C=1] 
* Loop 158: computeLine(A,B,C,D,E,F,G,F,G) [G>=0,F>=0,E>=0,D>=0,C>=0,B>=0,A=1] 
* Loop 159: computeLine(A,B,C,D,E,F,G,H,I)->  computeLine(A',B',C',D',E',F',G',H,I)
                  [F+D'>=D,E>=E',D>=D'+2,B>=B',G'>=0,B'>=0,I>=0,H>=0,G>=0,E>=0,D>=0,C>=2,A>=2,D=D'+F',C=C'+1,A=A'+1] 
* Loop 160: computeLine(A,B,C,D,E,F,G,H,I)->  computeLine(A',B',C',D',E',F',G',H,I)
                  [D>=F+D'+1,E>=E',B>=B',G'>=0,B'>=0,I>=0,H>=0,G>=0,F>=2,E>=0,D>=0,C>=2,A>=2,D=D'+F',C=C'+1,A=A'+1] 
* Loop 161: computeLine(A,B,C,D,E,F,G,H,I)->  computeLine(A',B',C',D',E',F',G',H,I)
                  [E>=E',B>=B',G'>=0,B'>=0,I>=0,H>=0,G>=0,F>=0,E>=0,D>=0,C>=2,A>=2,D=D'+1,C=C'+1,A=A'+1,F'=1] 
* Loop 162: computeLine(A,B,C,D,E,F,G,H,I)->  computeLine(A',B',C',D',E',F',G',H,I)
                  [E>=E',D>=D'+2,B>=B',G'>=0,B'>=0,I>=0,H>=0,G>=0,E>=0,D>=0,C>=2,A>=2,D=D'+F',C=C'+1,A=A'+1,F=1] 

### Ranking functions of CR computeLine(A,B,C,D,E,F,G,H,I) 
* RF of phase [159,160,161,162]: [A-1,C-1,D+1]

#### Partial ranking functions of CR computeLine(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [159,160,161,162]:
  - RF of loop [159:1,160:1,161:1,162:1]:
    A-1
    C-1
  - RF of loop [159:1,162:1]:
    D/2+1/2
  - RF of loop [160:1]:
    D/2+F/2-1/2
    D/3+1/3
  - RF of loop [161:1]:
    D+1
  - RF of loop [162:1]:
    D+F
    -F+2 depends on loops [159:1,161:1] 

Discarded unfeasible chain [[159,160,161,162]]...(Non-terminating chain proved terminating)

### Resulting Chains:computeLine(A,B,C,D,E,F,G,H,I) 
* [[159,160,161,162],158]
* [[159,160,161,162],157]
* [158]
* [157]


### Merging Chains  computeLine/9 into  External patterns of execution 
* [[158]] --> 1 
* [[157]] --> 2 
* [[157,[159,160,161,162]]] --> 3 
* [[158,[159,160,161,162]]] --> 4 


### Specialization of cost equations case_5/10 
* CE 74 is refined into CE [262] 
* CE 75 is refined into CE [263] 


#### Refined cost equations case_5/10 
* CE 262: case_5(A,B,C,D,E,F,D,E,G,H) = 2
     [F>=0,E>=0,D>=1,C>=0,B>=0,B+C+F=G,H=1,A=1] 
* CE 263: case_5(A,B,C,D,E,F,G,H,I,J) = 6
     [I>=0,F>=0,E>=0,D>=0,C>=0,B>=0,J=1,H=0,G=1,A=0] 

### Cost equations --> "Loop" of case_5/10 
* CEs [262] --> Loop 163 
* CEs [263] --> Loop 164 

#### Loops of case_5/10 
* Loop 163: case_5(A,B,C,D,E,F,D,E,G,H) [F>=0,E>=0,D>=1,C>=0,B>=0,B+C+F=G,H=1,A=1] 
* Loop 164: case_5(A,B,C,D,E,F,G,H,I,J) [I>=0,F>=0,E>=0,D>=0,C>=0,B>=0,J=1,H=0,G=1,A=0] 

### Ranking functions of CR case_5(A,B,C,D,E,F,G,H,I,J) 

#### Partial ranking functions of CR case_5(A,B,C,D,E,F,G,H,I,J) 


### Resulting Chains:case_5(A,B,C,D,E,F,G,H,I,J) 
* [164]
* [163]


### Merging Chains  case_5/10 into  External patterns of execution 
* [[164]] --> 1 
* [[163]] --> 2 


### Specialization of cost equations construct_matrix/9 
* CE 8 is refined into CE [264,265,266,267,268] 


#### Refined cost equations construct_matrix/9 
* CE 264: construct_matrix(A,B,C,D,E,F,G,H,I) = 2+ check_mat(J,B,K,L,M,N):1+ case_5(O,P,B,Q,R,S,T,U,H,V):2
     [H>=B,B>=0,H=B+S,H=B+M,H=B+E,V=1,U=0,T=1,R=0,Q=1,P=0,O=1,N=1,L=0,K=1,J=0,I=1,G=0,F=1,D=0,C=1,A=0] 
* CE 265: construct_matrix(A,B,C,D,E,C,F,G,H) = 2+ check_mat(I,J,C,K,L,M):2+ case_5(N,O,P,C,Q,R,C,S,G,T):2
     [G+1>=C,C>=2,C+R=G+1,C+L=G+1,C+E=G+1,C=S+1,C=Q+1,C=O+1,C=K+1,C=I+1,C=F+1,C=D+1,C=A+1,T=1,P=0,N=1,M=1,J=0,H=1,B=0] 
* CE 266: construct_matrix(A,B,C,D,E,F,G,H,I) = 2+ check_mat(A,B,J,D,E,K):3+ case_5(L,A,B,M,D,E,N,O,H,P):1
     [D>=B+2,D>=A,H>=0,E>=0,B>=0,A>=1,A+1=M,A+1=J,A+1=C,P=1,O=0,N=1,L=0,K=0,I=1,G=0,F=1] 
* CE 267: construct_matrix(A,B,C,D,E,F,G,H,I) = 2+ check_mat(A,B,C,D,E,J):4+ case_5(K,A,B,C,D,E,L,M,H,N):1
     [D+1>=C,C>=A+2,H>=0,E>=0,B>=0,A>=0,N=1,M=0,L=1,K=0,J=0,I=1,G=0,F=1] 
* CE 268: construct_matrix(A,B,C,D,E,C,D,F,G) = 2+ check_mat(H,B,C,D,I,J):5+ case_5(K,L,B,C,D,M,C,D,F,N):2
     [F+1>=B+C,D+3>=2*C+B,C>=2,B>=1,B+C+M=F+1,B+C+I=F+1,B+C+E=F+1,C=L+1,C=H+1,C=A+1,N=1,K=1,J=1,G=1] 

### Cost equations --> "Loop" of construct_matrix/9 
* CEs [268] --> Loop 165 
* CEs [267] --> Loop 166 
* CEs [266] --> Loop 167 
* CEs [265] --> Loop 168 
* CEs [264] --> Loop 169 

#### Loops of construct_matrix/9 
* Loop 165: construct_matrix(A,B,C,D,E,F,D,G,H) [D+1>=2*A+B,E>=0,B>=1,A>=1,A+B+E=G,A+1=F,A+1=C,H=1] 
* Loop 166: construct_matrix(A,B,C,D,E,F,G,H,I) [D+1>=C,C>=A+2,H>=0,E>=0,B>=0,A>=0,I=1,G=0,F=1] 
* Loop 167: construct_matrix(A,B,C,D,E,F,G,H,I) [D>=B+2,D>=A,H>=0,E>=0,B>=0,A>=1,A+1=C,I=1,G=0,F=1] 
* Loop 168: construct_matrix(A,B,C,A,D,E,A,F,G) [D>=0,A>=1,A+D=F,A+1=E,A+1=C,G=1,B=0] 
* Loop 169: construct_matrix(A,B,C,D,E,F,G,H,I) [E>=0,B>=0,B+E=H,I=1,G=0,F=1,D=0,C=1,A=0] 

### Ranking functions of CR construct_matrix(A,B,C,D,E,F,G,H,I) 

#### Partial ranking functions of CR construct_matrix(A,B,C,D,E,F,G,H,I) 


### Resulting Chains:construct_matrix(A,B,C,D,E,F,G,H,I) 
* [169]
* [168]
* [167]
* [166]
* [165]


### Merging Chains  construct_matrix/9 into  External patterns of execution 
* [[169]] --> 1 
* [[168]] --> 2 
* [[167]] --> 3 
* [[166]] --> 4 
* [[165]] --> 5 


### Specialization of cost equations del/5 
* CE 65 is refined into CE [269] 
* CE 64 is refined into CE [270] 
* CE 63 is refined into CE [271] 


#### Refined cost equations del/5 
* CE 269: del(A,B,C,D,E) = 10+ del(F,G,H,I,J)
     [B+J>=G,B>=G,I>=1,H>=0,G>=0,F>=1,E+G=B+J,I+1=D,H+1=C,F+1=A] 
* CE 270: del(A,B,C,D,E) = 6
     [B>=E,E>=0,D>=1,D+1=A,C=0] 
* CE 271: del(A,B,C,D,E) = 3
     [E>=0,C>=0,B>=0,D=1,A=1] 

### Cost equations --> "Loop" of del/5 
* CEs [270] --> Loop 170 
* CEs [271] --> Loop 171 
* CEs [269] --> Loop 172 

#### Loops of del/5 
* Loop 170: del(A,B,C,D,E) [B>=E,E>=0,A>=2,A=D+1,C=0] 
* Loop 171: del(A,B,C,D,E) [E>=0,C>=0,B>=0,D=1,A=1] 
* Loop 172: del(A,B,C,D,E)->  del(A',B',C',D',E')
                  [B+E'>=B',B>=B',D'>=1,C'>=0,B'>=0,A'>=1,B+E'=E+B',D'+1=D,C'+1=C,A'+1=A] 

### Ranking functions of CR del(A,B,C,D,E) 
* RF of phase [172]: [A-1,C]

#### Partial ranking functions of CR del(A,B,C,D,E) 
* Partial RF of phase [172]:
  - RF of loop [172:1]:
    A-1
    C

Discarded unfeasible chain [[172]]...(Non-terminating chain proved terminating)

### Resulting Chains:del(A,B,C,D,E) 
* [[172],171]
* [[172],170]
* [171]
* [170]


### Merging Chains  del/5 into  External patterns of execution 
* [[171]] --> 1 
* [[170]] --> 2 
* [[171,[172]]] --> 3 
* [[170,[172]]] --> 4 


### Specialization of cost equations case_11/5 
* CE 77 is refined into CE [272] 
* CE 78 is refined into CE [273] 


#### Refined cost equations case_11/5 
* CE 272: case_11(A,B,C,D,E) = 2
     [D>=0,C>=0,B>=1,C+D=E,A=0] 
* CE 273: case_11(A,B,C,D,E) = 2
     [C>=D,D>=0,D+E=C,B=0,A=0] 

### Cost equations --> "Loop" of case_11/5 
* CEs [272] --> Loop 173 
* CEs [273] --> Loop 174 

#### Loops of case_11/5 
* Loop 173: case_11(A,B,C,D,E) [D>=0,C>=0,B>=1,C+D=E,A=0] 
* Loop 174: case_11(A,B,C,D,E) [C>=D,D>=0,C=D+E,B=0,A=0] 

### Ranking functions of CR case_11(A,B,C,D,E) 

#### Partial ranking functions of CR case_11(A,B,C,D,E) 


### Resulting Chains:case_11(A,B,C,D,E) 
* [174]
* [173]


### Merging Chains  case_11/5 into  External patterns of execution 
* [[174]] --> 1 
* [[173]] --> 2 


### Specialization of cost equations op/4 
* CE 12 is refined into CE [274,275] 


#### Refined cost equations op/4 
* CE 274: op(A,B,C,D) = 2+ case_11(E,F,G,C,D):1
     [D>=0,C>=0,C+D=G,C+D=B,F=0,E=0,A=0] 
* CE 275: op(A,B,C,D) = 2+ case_11(E,A,B,F,D):2
     [D>=B,B>=0,A>=1,D=B+F,D=B+C,E=0] 

### Cost equations --> "Loop" of op/4 
* CEs [275] --> Loop 175 
* CEs [274] --> Loop 176 

#### Loops of op/4 
* Loop 175: op(A,B,C,D) [C>=0,B>=0,A>=1,B+C=D] 
* Loop 176: op(A,B,C,D) [B>=C,C>=0,C+D=B,A=0] 

### Ranking functions of CR op(A,B,C,D) 

#### Partial ranking functions of CR op(A,B,C,D) 


### Resulting Chains:op(A,B,C,D) 
* [176]
* [175]


### Merging Chains  op/4 into  External patterns of execution 
* [[176]] --> 1 
* [[175]] --> 2 


### Specialization of cost equations rec_list/7 
* CE 15 is refined into CE [276,277] 
* CE 14 is refined into CE [278] 
* CE 13 is refined into CE [279] 


#### Refined cost equations rec_list/7 
* CE 276: rec_list(A,B,C,D,E,F,G) = 9+ op(H,I,J,K):1+ rec_list(L,M,N,O,P,Q,R)
     [K+R>=0,J+O>=0,Q>=1,N>=1,M>=0,L>=1,K>=0,J>=0,J+K+M=B,J+K=I,K+R=G,J+O=D,Q+1=F,N+1=C,L+1=A,P=0,H=0,E=0] 
* CE 277: rec_list(A,B,C,D,E,F,G) = 9+ op(E,H,I,J):2+ rec_list(K,L,M,N,E,O,P)
     [J+N>=H,J+P>=0,J>=H,O>=1,M>=1,L>=0,K>=1,H>=0,E>=1,J+N=D+H,J=H+I,J+P=G,H+L=B,O+1=F,M+1=C,K+1=A] 
* CE 278: rec_list(A,B,C,D,E,F,G) = 6
     [G>=0,E>=0,D>=0,B>=0,A>=2,F=1,C=1] 
* CE 279: rec_list(A,B,C,D,E,F,G) = 3
     [G>=0,E>=0,D>=0,C>=0,B>=0,F=1,A=1] 

### Cost equations --> "Loop" of rec_list/7 
* CEs [278] --> Loop 177 
* CEs [279] --> Loop 178 
* CEs [277] --> Loop 179 
* CEs [276] --> Loop 180 

#### Loops of rec_list/7 
* Loop 177: rec_list(A,B,C,D,E,F,G) [G>=0,E>=0,D>=0,B>=0,A>=2,F=1,C=1] 
* Loop 178: rec_list(A,B,C,D,E,F,G) [G>=0,E>=0,D>=0,C>=0,B>=0,F=1,A=1] 
* Loop 179: rec_list(A,B,C,D,E,F,G)->  rec_list(A',B',C',D',E,E',F')
                  [D>=D',B>=B',B'>=0,G>=0,F>=2,E>=1,D>=0,C>=2,A>=2,G+B'+D'=B+D+F',F=E'+1,C=C'+1,A=A'+1] 
* Loop 180: rec_list(A,B,C,D,E,F,G)->  rec_list(A',B',C',D',E',F',G')
                  [B+D'>=D+B',D>=D',B'>=0,G>=0,F>=2,D>=0,C>=2,A>=2,D+G+B'=B+D'+G',F=F'+1,C=C'+1,A=A'+1,E'=0,E=0] 

### Ranking functions of CR rec_list(A,B,C,D,E,F,G) 
* RF of phase [179]: [A-1,C-1]
* RF of phase [180]: [A-1,C-1]

#### Partial ranking functions of CR rec_list(A,B,C,D,E,F,G) 
* Partial RF of phase [179]:
  - RF of loop [179:1]:
    A-1
    C-1
* Partial RF of phase [180]:
  - RF of loop [180:1]:
    A-1
    C-1

Discarded unfeasible chain [[180]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [[179]](Non-terminating chain proved terminating)

### Resulting Chains:rec_list(A,B,C,D,E,F,G) 
* [[180],178]
* [[180],177]
* [[179],178]
* [[179],177]
* [178]
* [177]


### Merging Chains  rec_list/7 into  External patterns of execution 
* [[178]] --> 1 
* [[177]] --> 2 
* [[178,[180]]] --> 3 
* [[177,[180]]] --> 4 
* [[178,[179]]] --> 5 
* [[177,[179]]] --> 6 


### Specialization of cost equations rec_mat/10 
* CE 18 is refined into CE [280,281,282,283,284,285] 
* CE 17 is refined into CE [286] 
* CE 16 is refined into CE [287] 


#### Refined cost equations rec_mat/10 
* CE 280: rec_mat(A,B,C,D,E,F,G,H,I,J) = 9+ rec_list(K,L,M,N,G,O,P):1+ rec_mat(Q,R,S,T,U,V,G,W,X,Y)
     [P+Y>=0,N+V>=0,M+U>=0,X+1>=0,W>=1,T>=1,S>=0,R>=0,Q>=1,P>=0,G>=0,N>=0,M>=1,L>=0,P+Y=J,N+V=F,M+U=E,L+S=C,X+1=I,W+1=H,T+1=D,R+1=B,Q+1=A,O=1,K=1] 
* CE 281: rec_mat(A,B,C,D,E,F,G,H,I,J) = 9+ rec_list(K,L,M,N,G,O,P):2+ rec_mat(Q,R,S,T,U,V,G,W,X,Y)
     [P+Y>=0,N+V>=0,X+1>=0,W>=1,U+1>=0,T>=1,S>=0,R>=0,Q>=1,P>=0,G>=0,N>=0,L>=0,K>=2,P+Y=J,N+V=F,L+S=C,K+R=B,X+1=I,W+1=H,U+1=E,T+1=D,Q+1=A,O=1,M=1] 
* CE 282: rec_mat(A,B,C,D,E,F,G,H,I,J) = 9+ rec_list(K,L,M,N,O,K,P):3+ rec_mat(Q,R,S,T,U,V,W,X,Y,Z)
     [P+Z>=0,K+Y>=0,N+V>=0,M+U>=0,M>=K,X>=1,T>=1,S>=0,R>=0,Q>=1,P>=0,K>=2,N>=0,L>=0,P+Z=J,K+Y=I,N+V=F,M+U=E,L+S=C,K+R=B,X+1=H,T+1=D,Q+1=A,W=0,O=0,G=0] 
* CE 283: rec_mat(A,B,C,D,E,F,G,H,I,J) = 9+ rec_list(K,L,M,N,O,M,P):4+ rec_mat(Q,R,S,T,U,V,W,X,Y,Z)
     [P+Z>=0,M+Y>=0,M+U>=0,N+V>=0,K>=M+1,X>=1,T>=1,S>=0,R>=0,Q>=1,P>=0,M>=2,N>=0,L>=0,P+Z=J,M+Y=I,N+V=F,M+U=E,L+S=C,K+R=B,X+1=H,T+1=D,Q+1=A,W=0,O=0,G=0] 
* CE 284: rec_mat(A,B,C,D,E,F,G,H,I,J) = 9+ rec_list(K,L,M,N,G,K,O):5+ rec_mat(P,Q,R,S,T,U,G,V,W,X)
     [O+X>=0,K+W>=0,N+U>=0,M+T>=0,M>=K,V>=1,S>=1,R>=0,Q>=0,P>=1,O>=0,K>=2,G>=1,N>=0,L>=0,O+X=J,K+W=I,N+U=F,M+T=E,L+R=C,K+Q=B,V+1=H,S+1=D,P+1=A] 
* CE 285: rec_mat(A,B,C,D,E,F,G,H,I,J) = 9+ rec_list(K,L,M,N,G,M,O):6+ rec_mat(P,Q,R,S,T,U,G,V,W,X)
     [O+X>=0,M+W>=0,M+T>=0,N+U>=0,K>=M+1,V>=1,S>=1,R>=0,Q>=0,P>=1,O>=0,M>=2,G>=1,N>=0,L>=0,O+X=J,M+W=I,N+U=F,M+T=E,L+R=C,K+Q=B,V+1=H,S+1=D,P+1=A] 
* CE 286: rec_mat(A,B,C,D,E,F,G,H,I,J) = 6
     [J>=0,G>=0,F>=0,C>=0,B>=1,A>=2,I=0,H=1,E=0,D=1] 
* CE 287: rec_mat(A,B,C,D,E,F,G,H,I,J) = 3
     [J>=0,G>=0,F>=0,E>=0,D>=0,C>=0,I=0,H=1,B=0,A=1] 

### Cost equations --> "Loop" of rec_mat/10 
* CEs [286] --> Loop 181 
* CEs [287] --> Loop 182 
* CEs [285] --> Loop 183 
* CEs [284] --> Loop 184 
* CEs [281] --> Loop 185 
* CEs [280] --> Loop 186 
* CEs [283] --> Loop 187 
* CEs [282] --> Loop 188 

#### Loops of rec_mat/10 
* Loop 181: rec_mat(A,B,C,D,E,F,G,H,I,J) [J>=0,G>=0,F>=0,C>=0,B>=1,A>=2,I=0,H=1,E=0,D=1] 
* Loop 182: rec_mat(A,B,C,D,E,F,G,H,I,J) [J>=0,G>=0,F>=0,E>=0,D>=0,C>=0,I=0,H=1,B=0,A=1] 
* Loop 183: rec_mat(A,B,C,D,E,F,G,H,I,J)->  rec_mat(A',B',C',D',E',F',G,G',H',I')
                  [B+E'>=E+B'+1,J>=I',F>=F',E>=E'+2,C>=C',C'>=0,B'>=0,J>=0,I>=0,H>=2,G>=1,F>=0,E>=0,D>=2,A>=2,E+H'=I+E',H=G'+1,D=D'+1,A=A'+1] 
* Loop 184: rec_mat(A,B,C,D,E,F,G,H,I,J)->  rec_mat(A',B',C',D',E',F',G,G',H',I')
                  [E+B'>=B+E',J>=I',F>=F',C>=C',B>=B'+2,C'>=0,B'>=0,J>=0,I>=0,H>=2,G>=1,F>=0,E>=0,D>=2,A>=2,I+B'=B+H',H=G'+1,D=D'+1,A=A'+1] 
* Loop 185: rec_mat(A,B,C,D,E,F,G,H,I,J)->  rec_mat(A',B',C',D',E',F',G,G',H',I')
                  [J>=I',F>=F',C>=C',B>=B'+2,C'>=0,B'>=0,J>=0,I>=0,H>=2,G>=0,F>=0,E>=0,D>=2,A>=2,I=H'+1,H=G'+1,E=E'+1,D=D'+1,A=A'+1] 
* Loop 186: rec_mat(A,B,C,D,E,F,G,H,I,J)->  rec_mat(A',B',C',D',E',F',G,G',H',I')
                  [J>=I',F>=F',E>=E'+1,C>=C',C'>=0,J>=0,I>=0,H>=2,G>=0,F>=0,E>=0,D>=2,B>=1,A>=2,I=H'+1,H=G'+1,D=D'+1,B=B'+1,A=A'+1] 
* Loop 187: rec_mat(A,B,C,D,E,F,G,H,I,J)->  rec_mat(A',B',C',D',E',F',G',H',I',J')
                  [B+E'>=E+B'+1,J>=J',F>=F',E>=E'+2,C>=C',C'>=0,B'>=0,J>=0,I>=0,H>=2,F>=0,E>=0,D>=2,A>=2,E+I'=I+E',H=H'+1,D=D'+1,A=A'+1,G'=0,G=0] 
* Loop 188: rec_mat(A,B,C,D,E,F,G,H,I,J)->  rec_mat(A',B',C',D',E',F',G',H',I',J')
                  [E+B'>=B+E',J>=J',F>=F',C>=C',B>=B'+2,C'>=0,B'>=0,J>=0,I>=0,H>=2,F>=0,E>=0,D>=2,A>=2,I+B'=B+I',H=H'+1,D=D'+1,A=A'+1,G'=0,G=0] 

### Ranking functions of CR rec_mat(A,B,C,D,E,F,G,H,I,J) 
* RF of phase [183,184,185,186,187,188]: [A-1,B,D-1,E+1]

#### Partial ranking functions of CR rec_mat(A,B,C,D,E,F,G,H,I,J) 
* Partial RF of phase [183,184,185,186,187,188]:
  - RF of loop [183:1,184:1,185:1,186:1,187:1,188:1]:
    A-1
    D-1
  - RF of loop [183:1,184:1,187:1,188:1]:
    E/2+1/2
  - RF of loop [183:1,187:1]:
    B/3-2/3
  - RF of loop [184:1,185:1,188:1]:
    B/2-1/2
  - RF of loop [185:1,186:1]:
    E+1
  - RF of loop [186:1]:
    B

Discarded unfeasible chain [[183,184,185,186,187,188]]...(Non-terminating chain proved terminating)

### Resulting Chains:rec_mat(A,B,C,D,E,F,G,H,I,J) 
* [[183,184,185,186,187,188],182]
* [[183,184,185,186,187,188],181]
* [182]
* [181]


### Merging Chains  rec_mat/10 into  External patterns of execution 
* [[182]] --> 1 
* [[181]] --> 2 
* [[182,[183,184,185,186,187,188]]] --> 3 
* [[181,[183,184,185,186,187,188]]] --> 4 


### Specialization of cost equations case_23/17 
* CE 94 is discarded (unfeasible) 


#### Refined cost equations case_23/17 

### Cost equations --> "Loop" of case_23/17 

#### Loops of case_23/17 

### Ranking functions of CR case_23(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) 

#### Partial ranking functions of CR case_23(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) 

Warning: no base case found for predicate

### Resulting Chains:case_23(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) 


### Merging Chains  case_23/17 into  External patterns of execution 


### Specialization of cost equations case_21/13 
* CE 82 is discarded (unfeasible) 
* CE 83 is refined into CE [288] 


#### Refined cost equations case_21/13 
* CE 288: case_21(A,B,C,D,E,F,G,H,I,J,K,L,M) = 6
     [L>=0,I>=0,H>=0,G>=0,F>=0,E>=0,D>=0,C>=0,B>=0,M=1,K=0,J=1,A=0] 

### Cost equations --> "Loop" of case_21/13 
* CEs [288] --> Loop 189 

#### Loops of case_21/13 
* Loop 189: case_21(A,B,C,D,E,F,G,H,I,J,K,L,M) [L>=0,I>=0,H>=0,G>=0,F>=0,E>=0,D>=0,C>=0,B>=0,M=1,K=0,J=1,A=0] 

### Ranking functions of CR case_21(A,B,C,D,E,F,G,H,I,J,K,L,M) 

#### Partial ranking functions of CR case_21(A,B,C,D,E,F,G,H,I,J,K,L,M) 


### Resulting Chains:case_21(A,B,C,D,E,F,G,H,I,J,K,L,M) 
* [189]


### Merging Chains  case_21/13 into  External patterns of execution 
* [[189]] --> 1 


### Specialization of cost equations minus/12 
* CE 21 is refined into CE [289] 


#### Refined cost equations minus/12 
* CE 289: minus(A,B,C,D,E,F,G,H,I,J,K,L) = 2+ check_sanity(A,B,C,M,E,F,G,N,O):1+ case_21(P,A,B,C,Q,E,F,G,R,S,T,K,U):1
     [F+1>=E,B+1>=A,K>=0,G>=0,E>=2,C>=0,A>=2,U=1,T=0,S=1,R=1,Q=1,P=0,O=0,N=1,M=1,L=1,J=0,I=1,H=1,D=1] 

### Cost equations --> "Loop" of minus/12 
* CEs [289] --> Loop 190 

#### Loops of minus/12 
* Loop 190: minus(A,B,C,D,E,F,G,H,I,J,K,L) [F+1>=E,B+1>=A,K>=0,G>=0,E>=2,C>=0,A>=2,L=1,J=0,I=1,H=1,D=1] 

### Ranking functions of CR minus(A,B,C,D,E,F,G,H,I,J,K,L) 

#### Partial ranking functions of CR minus(A,B,C,D,E,F,G,H,I,J,K,L) 


### Resulting Chains:minus(A,B,C,D,E,F,G,H,I,J,K,L) 
* [190]


### Merging Chains  minus/12 into  External patterns of execution 
* [[190]] --> 1 


### Specialization of cost equations mat_mult_jan/9 
* CE 56 is refined into CE [290] 
* CE 55 is refined into CE [291,292,293,294] 


#### Refined cost equations mat_mult_jan/9 
* CE 290: mat_mult_jan(A,B,C,D,E,F,G,H,I) = 3
     [I>=0,F>=0,E>=0,D>=0,C>=0,H=0,G=1,B=0,A=1] 
* CE 291: mat_mult_jan(A,B,C,D,E,F,G,H,I) = 7+ computeLine(J,K,D,E,F,L,M,N,M):1+ mat_mult_jan(O,P,Q,D,E,F,R,S,T)
     [M+T>=0,K+Q>=0,S+1>=0,R>=1,P+1>=0,O>=1,M>=0,F>=0,E>=0,D>=0,K>=0,M+T=I,K+Q=C,S+1=H,R+1=G,P+1=B,O+1=A,N=1,L=1,J=1] 
* CE 292: mat_mult_jan(A,B,C,D,E,F,G,H,I) = 7+ computeLine(J,K,L,M,F,N,O,P,Q):2+ mat_mult_jan(R,S,T,U,V,F,W,X,Y)
     [Q+Y>=0,K+T>=0,J+S>=0,X+1>=0,W>=1,R>=1,Q>=0,O>=0,F>=0,K>=0,J>=2,Q+Y=I,K+T=C,J+S=B,X+1=H,W+1=G,R+1=A,V=0,U=1,P=1,N=1,M=0,L=1,E=0,D=1] 
* CE 293: mat_mult_jan(A,B,C,D,E,F,G,H,I) = 7+ computeLine(J,K,D,E,F,L,M,N,O):3+ mat_mult_jan(P,Q,R,D,E,F,S,T,U)
     [O+U>=0,K+R>=0,J+Q>=0,E+1>=D,J>=D+1,T+1>=0,S>=1,P>=1,O>=0,M>=0,F>=0,D>=2,K>=0,O+U=I,K+R=C,J+Q=B,T+1=H,S+1=G,P+1=A,N=1,L=1] 
* CE 294: mat_mult_jan(A,B,C,D,E,F,G,H,I) = 7+ computeLine(J,K,D,E,F,L,M,N,O):4+ mat_mult_jan(P,Q,R,D,E,F,S,T,U)
     [E+2>=J+N,O+U>=0,N+T>=0,K+R>=0,J+Q>=0,D>=J,S>=1,P>=1,O>=0,N>=1,M>=0,F>=0,K>=0,J>=2,O+U=I,N+T=H,K+R=C,J+Q=B,S+1=G,P+1=A,L=1] 

### Cost equations --> "Loop" of mat_mult_jan/9 
* CEs [294] --> Loop 191 
* CEs [293] --> Loop 192 
* CEs [291] --> Loop 193 
* CEs [292] --> Loop 194 
* CEs [290] --> Loop 195 

#### Loops of mat_mult_jan/9 
* Loop 191: mat_mult_jan(A,B,C,D,E,F,G,H,I)->  mat_mult_jan(A',B',C',D,E,F,D',E',F')
                  [E+B'+E'+2>=B+H,D+B'>=B,I>=F',H>=E'+1,C>=C',B>=B'+2,I>=0,H>=0,G>=2,F>=0,C>=0,B>=0,A>=2,G=D'+1,A=A'+1] 
* Loop 192: mat_mult_jan(A,B,C,D,E,F,G,H,I)->  mat_mult_jan(A',B',C',D,E,F,D',E',F')
                  [B>=D+B'+1,I>=F',C>=C',E+1>=D,I>=0,H>=0,G>=2,F>=0,D>=2,C>=0,B>=0,A>=2,H=E'+1,G=D'+1,A=A'+1] 
* Loop 193: mat_mult_jan(A,B,C,D,E,F,G,H,I)->  mat_mult_jan(A',B',C',D,E,F,D',E',F')
                  [I>=F',C>=C',I>=0,H>=0,G>=2,F>=0,E>=0,D>=0,C>=0,B>=0,A>=2,H=E'+1,G=D'+1,B=B'+1,A=A'+1] 
* Loop 194: mat_mult_jan(A,B,C,D,E,F,G,H,I)->  mat_mult_jan(A',B',C',D',E',F,F',G',H')
                  [I>=H',C>=C',B>=B'+2,I>=0,H>=0,G>=2,F>=0,C>=0,B>=0,A>=2,H=G'+1,G=F'+1,A=A'+1,E'=0,D'=1,E=0,D=1] 
* Loop 195: mat_mult_jan(A,B,C,D,E,F,G,H,I) [I>=0,F>=0,E>=0,D>=0,C>=0,H=0,G=1,B=0,A=1] 

### Ranking functions of CR mat_mult_jan(A,B,C,D,E,F,G,H,I) 
* RF of phase [191,192,193,194]: [A-1,B+1]

#### Partial ranking functions of CR mat_mult_jan(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [191,192,193,194]:
  - RF of loop [191:1,192:1,193:1,194:1]:
    A-1
  - RF of loop [191:1,194:1]:
    B/2+1/2
  - RF of loop [192:1]:
    B/3+1/3
  - RF of loop [193:1]:
    B+1

Discarded unfeasible chain [[191,192,193,194]]...(Non-terminating chain proved terminating)

### Resulting Chains:mat_mult_jan(A,B,C,D,E,F,G,H,I) 
* [[191,192,193,194],195]
* [195]


### Merging Chains  mat_mult_jan/9 into  External patterns of execution 
* [[195]] --> 1 
* [[195,[191,192,193,194]]] --> 2 


### Specialization of cost equations case_46/17 
* CE 95 is refined into CE [295,296,297,298,299] 


#### Refined cost equations case_46/17 
* CE 295: case_46(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) = 5+ mat_mult_jan(R,S,M,E,F,T,U,V,W):1+ construct_matrix(X,J,Y,Z,A1,B1,C1,P,D1):1
     [P>=J,J>=0,T>=0,F>=0,E>=1,M>=0,G>=0,P=J+A1,P=J+W,J+M=C,D1=1,C1=0,B1=1,Z=0,Y=1,X=0,V=0,U=1,S=0,R=1,Q=1,O=0,N=1,L=0,K=1,I=0,H=1,D=1,B=0,A=1] 
* CE 296: case_46(A,B,C,D,E,F,G,H,I,J,A,B,K,A,L,M,N) = 5+ mat_mult_jan(A,B,K,E,F,O,A,P,Q):2+ construct_matrix(R,S,A,T,U,A,V,M,W):2
     [M+1>=A,B+1>=A,A>=2,O>=0,F>=0,E>=1,K>=0,G>=0,A+U=M+1,A+Q=M+1,A+K=C+1,A=V+1,A=T+1,A=R+1,A=P+1,A=L+1,A=I+1,W=1,S=0,N=1,J=0,H=1,D=1] 
* CE 297: case_46(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) = 5+ mat_mult_jan(A,B,K,E,F,P,A,Q,R):2+ construct_matrix(S,J,A,Q,R,T,U,N,V):3
     [Q+1>=A,B+1>=A,Q>=J+2,N>=0,R>=0,A>=2,J>=0,P>=0,F>=0,E>=1,K>=0,G>=0,A+J+K=C+1,A=S+1,A=I+1,V=1,U=0,T=1,O=1,M=0,L=1,H=1,D=1] 
* CE 298: case_46(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) = 5+ mat_mult_jan(A,B,K,E,F,P,A,Q,R):2+ construct_matrix(I,J,A,Q,R,S,T,N,U):4
     [Q+1>=A,B+1>=A,A>=I+2,N>=0,R>=0,J>=0,I>=0,P>=0,F>=0,E>=1,K>=0,G>=0,I+J+K=C,U=1,T=0,S=1,O=1,M=0,L=1,H=1,D=1] 
* CE 299: case_46(A,B,C,D,E,F,G,H,I,J,A,B,K,A,L,M,N) = 5+ mat_mult_jan(A,B,K,E,F,O,A,L,P):2+ construct_matrix(Q,J,A,L,R,A,L,M,S):5
     [M+1>=A+J,L+3>=2*A+J,B+1>=A,A>=2,J>=1,O>=0,F>=0,E>=1,K>=0,G>=0,A+J+R=M+1,A+J+P=M+1,A+J+K=C+1,A=Q+1,A=I+1,S=1,N=1,H=1,D=1] 

### Cost equations --> "Loop" of case_46/17 
* CEs [299] --> Loop 196 
* CEs [298] --> Loop 197 
* CEs [297] --> Loop 198 
* CEs [296] --> Loop 199 
* CEs [295] --> Loop 200 

#### Loops of case_46/17 
* Loop 196: case_46(A,B,C,D,E,F,G,H,I,J,A,B,K,A,L,M,N) [M+1>=A+J,C+1>=A+J,L+3>=2*A+J,B+1>=A,J>=1,G>=0,F>=0,E>=1,A>=2,A+J+K=C+1,A=I+1,N=1,H=1,D=1] 
* Loop 197: case_46(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) [C>=I+J,A>=I+2,B+1>=A,N>=0,J>=0,I>=0,G>=0,F>=0,E>=1,I+J+K=C,O=1,M=0,L=1,H=1,D=1] 
* Loop 198: case_46(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) [C+1>=A+J,B+1>=A,N>=0,J>=0,G>=0,F>=0,E>=1,A>=2,A+J+K=C+1,A=I+1,O=1,M=0,L=1,H=1,D=1] 
* Loop 199: case_46(A,B,C,D,E,F,G,H,I,J,A,B,K,A,L,M,N) [M+1>=A,C+1>=A,B+1>=A,G>=0,F>=0,E>=1,A>=2,A+K=C+1,A=L+1,A=I+1,N=1,J=0,H=1,D=1] 
* Loop 200: case_46(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) [P>=J,C>=J,J>=0,G>=0,F>=0,E>=1,J+M=C,Q=1,O=0,N=1,L=0,K=1,I=0,H=1,D=1,B=0,A=1] 

### Ranking functions of CR case_46(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) 

#### Partial ranking functions of CR case_46(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) 


### Resulting Chains:case_46(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) 
* [200]
* [199]
* [198]
* [197]
* [196]


### Merging Chains  case_46/17 into  External patterns of execution 
* [[200]] --> 1 
* [[199]] --> 2 
* [[197]] --> 3 
* [[198]] --> 4 
* [[196]] --> 5 


### Specialization of cost equations case_44/13 
* CE 89 is refined into CE [300,301,302,303,304] 
* CE 90 is refined into CE [305] 


#### Refined cost equations case_44/13 
* CE 300: case_44(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_46(N,O,P,Q,F,G,H,R,S,T,U,V,W,X,Y,L,Z):1
     [L>=T,W>=0,T>=0,H>=0,G>=0,F>=1,T+W=P,T+W=D,Z=1,Y=0,X=1,V=0,U=1,S=0,R=1,Q=1,O=0,N=1,M=1,K=0,J=1,I=1,E=1,C=0,B=1,A=1] 
* CE 301: case_44(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_46(N,C,D,O,F,G,H,P,K,Q,R,C,S,T,K,L,U):2
     [L>=K,C>=K,D>=K,K>=1,H>=0,G>=0,F>=1,K+S=D,K+1=T,K+1=R,K+1=N,K+1=J,K+1=B,U=1,Q=0,P=1,O=1,M=1,I=1,E=1,A=1] 
* CE 302: case_44(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_46(B,C,N,O,F,G,H,P,Q,R,B,C,S,T,U,L,V):3
     [C+1>=B,B>=Q+2,L>=0,S>=0,R>=0,Q>=0,H>=0,G>=0,F>=1,Q+R+S=N,Q+R+S=D,V=1,U=0,T=1,P=1,O=1,M=1,K=0,J=1,I=1,E=1,A=1] 
* CE 303: case_44(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_46(N,C,D,O,F,G,H,P,Q,R,S,C,T,U,V,L,W):4
     [D>=Q+R,C>=Q,L>=0,R>=0,Q>=1,H>=0,G>=0,F>=1,Q+R+T=D,Q+1=S,Q+1=N,Q+1=B,W=1,V=0,U=1,P=1,O=1,M=1,K=0,J=1,I=1,E=1,A=1] 
* CE 304: case_44(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_46(N,C,D,O,F,G,H,P,Q,R,S,C,T,U,K,L,V):5
     [L>=Q+R,D>=Q+R,K+1>=2*Q+R,C>=Q,R>=1,Q>=1,H>=0,G>=0,F>=1,Q+R+T=D,Q+1=U,Q+1=S,Q+1=N,Q+1=J,Q+1=B,V=1,P=1,O=1,M=1,I=1,E=1,A=1] 
* CE 305: case_44(A,B,C,D,E,F,G,H,I,J,K,L,M) = 6
     [L>=0,I>=0,H>=0,G>=0,F>=0,E>=0,D>=0,C>=0,B>=0,M=1,K=0,J=1,A=0] 

### Cost equations --> "Loop" of case_44/13 
* CEs [304] --> Loop 201 
* CEs [301] --> Loop 202 
* CEs [302,303] --> Loop 203 
* CEs [300] --> Loop 204 
* CEs [305] --> Loop 205 

#### Loops of case_44/13 
* Loop 201: case_44(A,B,C,D,E,F,G,H,I,B,J,K,L) [K>=B,D>=B,C+1>=B,J+2>=2*B,H>=0,G>=0,F>=1,B>=2,L=1,I=1,E=1,A=1] 
* Loop 202: case_44(A,B,C,D,E,F,G,H,I,B,J,K,L) [K+1>=B,D+1>=B,C+1>=B,H>=0,G>=0,F>=1,B>=2,B=J+1,L=1,I=1,E=1,A=1] 
* Loop 203: case_44(A,B,C,D,E,F,G,H,I,J,K,L,M) [C+1>=B,L>=0,H>=0,G>=0,F>=1,D>=0,B>=2,M=1,K=0,J=1,I=1,E=1,A=1] 
* Loop 204: case_44(A,B,C,D,E,F,G,H,I,J,K,L,M) [L>=0,H>=0,G>=0,F>=1,D>=0,M=1,K=0,J=1,I=1,E=1,C=0,B=1,A=1] 
* Loop 205: case_44(A,B,C,D,E,F,G,H,I,J,K,L,M) [L>=0,I>=0,H>=0,G>=0,F>=0,E>=0,D>=0,C>=0,B>=0,M=1,K=0,J=1,A=0] 

### Ranking functions of CR case_44(A,B,C,D,E,F,G,H,I,J,K,L,M) 

#### Partial ranking functions of CR case_44(A,B,C,D,E,F,G,H,I,J,K,L,M) 


### Resulting Chains:case_44(A,B,C,D,E,F,G,H,I,J,K,L,M) 
* [205]
* [204]
* [203]
* [202]
* [201]


### Merging Chains  case_44/13 into  External patterns of execution 
* [[205]] --> 1 
* [[204]] --> 2 
* [[203]] --> 3 
* [[202]] --> 4 
* [[201]] --> 5 


### Specialization of cost equations mult/12 
* CE 58 is refined into CE [306,307,308,309,310,311,312,313,314,315,316,317,318] 


#### Refined cost equations mult/12 
* CE 306: mult(A,B,C,D,E,F,G,H,I,J,K,L) = 2+ check_mult_sanity(A,B,C,M,E,F,G,N,O):1+ case_44(P,A,B,C,Q,E,F,G,R,S,T,K,U):1
     [F+1>=E,B+1>=A,K>=0,G>=0,E>=2,C>=0,A>=2,U=1,T=0,S=1,R=1,Q=1,P=0,O=0,N=1,M=1,L=1,J=0,I=1,H=1,D=1] 
* CE 307: mult(A,B,C,D,E,F,G,H,I,J,K,L) = 2+ check_mult_sanity(A,M,C,N,E,O,G,P,Q):2+ case_44(R,A,S,C,T,E,U,G,V,W,X,K,Y):3
     [G+1>=E,C+1>=A,K>=0,E>=2,A>=2,E=U+1,A=S+1,E=O+1,A=M+1,E=F+1,A=B+1,Y=1,X=0,W=1,V=1,T=1,R=1,Q=1,P=1,N=1,L=1,J=0,I=1,H=1,D=1] 
* CE 308: mult(A,B,C,D,E,F,G,H,A,I,J,K) = 2+ check_mult_sanity(A,L,C,M,E,N,G,O,P):2+ case_44(Q,A,R,C,S,E,T,G,U,A,V,J,W):4
     [J+1>=A,C+1>=A,G+1>=E,A>=2,E>=2,A=V+1,E=T+1,A=R+1,E=N+1,A=L+1,A=I+1,E=F+1,A=B+1,W=1,U=1,S=1,Q=1,P=1,O=1,M=1,K=1,H=1,D=1] 
* CE 309: mult(A,B,C,D,E,F,G,H,A,I,J,K) = 2+ check_mult_sanity(A,L,C,M,E,N,G,O,P):2+ case_44(Q,A,R,C,S,E,T,G,U,A,I,J,V):5
     [J>=A,C>=A,G+1>=E,I+2>=2*A,A>=2,E>=2,E=T+1,A=R+1,E=N+1,A=L+1,E=F+1,A=B+1,V=1,U=1,S=1,Q=1,P=1,O=1,M=1,K=1,H=1,D=1] 
* CE 310: mult(A,B,C,D,E,F,G,H,I,J,K,L) = 2+ check_mult_sanity(A,M,C,N,E,F,G,O,P):3+ case_44(Q,A,R,C,S,E,F,G,T,U,V,K,W):3
     [G>=E,C+1>=A,F+2>=2*E,K>=0,E>=2,A>=2,A=R+1,A=M+1,A=B+1,W=1,V=0,U=1,T=1,S=1,Q=1,P=1,O=1,N=1,L=1,J=0,I=1,H=1,D=1] 
* CE 311: mult(A,B,C,D,E,F,G,H,A,I,J,K) = 2+ check_mult_sanity(A,L,C,M,E,F,G,N,O):3+ case_44(P,A,Q,C,R,E,F,G,S,A,T,J,U):4
     [J+1>=A,C+1>=A,G>=E,F+2>=2*E,A>=2,E>=2,A=T+1,A=Q+1,A=L+1,A=I+1,A=B+1,U=1,S=1,R=1,P=1,O=1,N=1,M=1,K=1,H=1,D=1] 
* CE 312: mult(A,B,C,D,E,F,G,H,A,I,J,K) = 2+ check_mult_sanity(A,L,C,M,E,F,G,N,O):3+ case_44(P,A,Q,C,R,E,F,G,S,A,I,J,T):5
     [J>=A,C>=A,G>=E,I+2>=2*A,F+2>=2*E,A>=2,E>=2,A=Q+1,A=L+1,A=B+1,T=1,S=1,R=1,P=1,O=1,N=1,M=1,K=1,H=1,D=1] 
* CE 313: mult(A,B,C,D,E,F,G,H,I,J,K,L) = 2+ check_mult_sanity(A,B,C,M,E,N,G,O,P):4+ case_44(Q,A,B,C,R,E,S,G,T,U,V,K,W):3
     [G+1>=E,C>=A,B+2>=2*A,K>=0,E>=2,A>=2,E=S+1,E=N+1,E=F+1,W=1,V=0,U=1,T=1,R=1,Q=1,P=1,O=1,M=1,L=1,J=0,I=1,H=1,D=1] 
* CE 314: mult(A,B,C,D,E,F,G,H,A,I,J,K) = 2+ check_mult_sanity(A,B,C,L,E,M,G,N,O):4+ case_44(P,A,B,C,Q,E,R,G,S,A,T,J,U):4
     [J+1>=A,C>=A,G+1>=E,B+2>=2*A,A>=2,E>=2,A=T+1,E=R+1,E=M+1,A=I+1,E=F+1,U=1,S=1,Q=1,P=1,O=1,N=1,L=1,K=1,H=1,D=1] 
* CE 315: mult(A,B,C,D,E,F,G,H,A,I,J,K) = 2+ check_mult_sanity(A,B,C,L,E,M,G,N,O):4+ case_44(P,A,B,C,Q,E,R,G,S,A,I,J,T):5
     [J>=A,C>=A,G+1>=E,I+2>=2*A,B+2>=2*A,A>=2,E>=2,E=R+1,E=M+1,E=F+1,T=1,S=1,Q=1,P=1,O=1,N=1,L=1,K=1,H=1,D=1] 
* CE 316: mult(A,B,C,D,E,F,G,H,I,J,K,L) = 2+ check_mult_sanity(A,B,C,M,E,F,G,N,O):5+ case_44(P,A,B,C,Q,E,F,G,R,S,T,K,U):3
     [G>=E,C>=A,F+2>=2*E,B+2>=2*A,K>=0,E>=2,A>=2,U=1,T=0,S=1,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,J=0,I=1,H=1,D=1] 
* CE 317: mult(A,B,C,D,E,F,G,H,A,I,J,K) = 2+ check_mult_sanity(A,B,C,L,E,F,G,M,N):5+ case_44(O,A,B,C,P,E,F,G,Q,A,R,J,S):4
     [J+1>=A,C>=A,G>=E,B+2>=2*A,F+2>=2*E,A>=2,E>=2,A=R+1,A=I+1,S=1,Q=1,P=1,O=1,N=1,M=1,L=1,K=1,H=1,D=1] 
* CE 318: mult(A,B,C,D,E,F,G,H,A,I,J,K) = 2+ check_mult_sanity(A,B,C,L,E,F,G,M,N):5+ case_44(O,A,B,C,P,E,F,G,Q,A,I,J,R):5
     [J>=A,C>=A,G>=E,I+2>=2*A,B+2>=2*A,F+2>=2*E,A>=2,E>=2,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,K=1,H=1,D=1] 

### Cost equations --> "Loop" of mult/12 
* CEs [318] --> Loop 206 
* CEs [317] --> Loop 207 
* CEs [315] --> Loop 208 
* CEs [314] --> Loop 209 
* CEs [312] --> Loop 210 
* CEs [311] --> Loop 211 
* CEs [309] --> Loop 212 
* CEs [308] --> Loop 213 
* CEs [313] --> Loop 214 
* CEs [310] --> Loop 215 
* CEs [306,307,316] --> Loop 216 

#### Loops of mult/12 
* Loop 206: mult(A,B,C,D,E,F,G,H,A,I,J,K) [G>=E,J>=A,C>=A,F+2>=2*E,I+2>=2*A,B+2>=2*A,E>=2,A>=2,K=1,H=1,D=1] 
* Loop 207: mult(A,B,C,D,E,F,G,H,A,I,J,K) [G>=E,J+1>=A,C>=A,F+2>=2*E,B+2>=2*A,E>=2,A>=2,A=I+1,K=1,H=1,D=1] 
* Loop 208: mult(A,B,C,D,E,F,G,H,A,I,J,K) [G+1>=E,J>=A,C>=A,I+2>=2*A,B+2>=2*A,E>=2,A>=2,E=F+1,K=1,H=1,D=1] 
* Loop 209: mult(A,B,C,D,E,F,G,H,A,I,J,K) [G+1>=E,J+1>=A,C>=A,B+2>=2*A,E>=2,A>=2,A=I+1,E=F+1,K=1,H=1,D=1] 
* Loop 210: mult(A,B,C,D,E,F,G,H,A,I,J,K) [G>=E,J>=A,C>=A,F+2>=2*E,I+2>=2*A,E>=2,A>=2,A=B+1,K=1,H=1,D=1] 
* Loop 211: mult(A,B,C,D,E,F,G,H,A,I,J,K) [G>=E,J+1>=A,C+1>=A,F+2>=2*E,E>=2,A>=2,A=I+1,A=B+1,K=1,H=1,D=1] 
* Loop 212: mult(A,B,C,D,E,F,G,H,A,I,J,K) [G+1>=E,J>=A,C>=A,I+2>=2*A,E>=2,A>=2,E=F+1,A=B+1,K=1,H=1,D=1] 
* Loop 213: mult(A,B,C,D,E,F,G,H,A,I,J,K) [G+1>=E,J+1>=A,C+1>=A,E>=2,A>=2,A=I+1,E=F+1,A=B+1,K=1,H=1,D=1] 
* Loop 214: mult(A,B,C,D,E,F,G,H,I,J,K,L) [G+1>=E,C>=A,B+2>=2*A,K>=0,E>=2,A>=2,E=F+1,L=1,J=0,I=1,H=1,D=1] 
* Loop 215: mult(A,B,C,D,E,F,G,H,I,J,K,L) [G>=E,C+1>=A,F+2>=2*E,K>=0,E>=2,A>=2,A=B+1,L=1,J=0,I=1,H=1,D=1] 
* Loop 216: mult(A,B,C,D,E,F,G,H,I,J,K,L) [F+1>=E,B+1>=A,K>=0,G>=0,E>=2,C>=0,A>=2,L=1,J=0,I=1,H=1,D=1] 

### Ranking functions of CR mult(A,B,C,D,E,F,G,H,I,J,K,L) 

#### Partial ranking functions of CR mult(A,B,C,D,E,F,G,H,I,J,K,L) 


### Resulting Chains:mult(A,B,C,D,E,F,G,H,I,J,K,L) 
* [216]
* [215]
* [214]
* [213]
* [212]
* [211]
* [210]
* [209]
* [208]
* [207]
* [206]


### Merging Chains  mult/12 into  External patterns of execution 
* [[215],[216]] --> 1 
* [[214]] --> 2 
* [[213]] --> 3 
* [[212]] --> 4 
* [[211]] --> 5 
* [[210]] --> 6 
* [[209]] --> 7 
* [[208]] --> 8 
* [[207]] --> 9 
* [[206]] --> 10 


### Specialization of cost equations case_20/17 
* CE 93 is refined into CE [319,320,321,322,323,324,325,326,327,328] 


#### Refined cost equations case_20/17 
* CE 319: case_20(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) = 4+ rec_mat(R,S,M,E,F,T,U,V,W,X):1+ construct_matrix(Y,J,Z,A1,B1,C1,D1,P,E1):1
     [P>=J,J>=0,T>=0,F>=0,E>=1,M>=0,G>=0,P=J+B1,P=J+X,J+M=C,E1=1,D1=0,C1=1,A1=0,Z=1,Y=0,W=0,V=1,U=1,S=0,R=1,Q=1,O=0,N=1,L=0,K=1,I=0,H=1,D=1,B=0,A=1] 
* CE 320: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) = 4+ rec_mat(A,B,K,P,Q,R,S,T,U,V):2+ construct_matrix(W,J,X,Y,Z,A1,B1,N,C1):1
     [N>=J,J>=0,R>=0,K>=0,B>=1,A>=2,G>=0,N=J+Z,N=J+V,J+K=C,C1=1,B1=0,A1=1,Y=0,X=1,W=0,U=0,T=1,S=1,Q=0,P=1,O=1,M=0,L=1,I=0,H=1,F=0,E=1,D=1] 
* CE 321: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,A,L,M,N) = 4+ rec_mat(A,B,K,E,F,O,P,A,Q,R):3+ construct_matrix(S,T,A,U,V,A,W,M,X):2
     [M+1>=A,F+1>=A,E>=A,B+1>=A,A>=2,O>=0,K>=0,G>=0,A+V=M+1,A+R=M+1,A+K=C+1,A=W+1,A=U+1,A=S+1,A=Q+1,A=L+1,A=I+1,X=1,T=0,P=1,N=1,J=0,H=1,D=1] 
* CE 322: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) = 4+ rec_mat(A,B,K,E,F,P,Q,A,R,S):3+ construct_matrix(T,J,A,R,S,U,V,N,W):3
     [F>=R,B>=R,R+1>=A,E>=A,R>=J+2,N>=0,S>=0,A>=2,J>=0,P>=0,K>=0,G>=0,A+J+K=C+1,A=T+1,A=I+1,W=1,V=0,U=1,Q=1,O=1,M=0,L=1,H=1,D=1] 
* CE 323: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) = 4+ rec_mat(A,B,K,E,F,P,Q,A,R,S):3+ construct_matrix(I,J,A,R,S,T,U,N,V):4
     [F>=R,B>=R,R+1>=A,E>=A,A>=I+2,N>=0,S>=0,J>=0,I>=0,P>=0,K>=0,G>=0,I+J+K=C,V=1,U=0,T=1,Q=1,O=1,M=0,L=1,H=1,D=1] 
* CE 324: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,A,L,M,N) = 4+ rec_mat(A,B,K,E,F,O,P,A,L,Q):3+ construct_matrix(R,J,A,L,S,A,L,M,T):5
     [M+1>=A+J,L+3>=2*A+J,F>=L,B>=L,E>=A,A>=2,J>=1,O>=0,K>=0,G>=0,A+J+S=M+1,A+J+Q=M+1,A+J+K=C+1,A=R+1,A=I+1,T=1,P=1,N=1,H=1,D=1] 
* CE 325: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,E,L,M,N) = 4+ rec_mat(A,B,K,E,F,O,P,E,Q,R):4+ construct_matrix(S,T,E,U,V,E,W,M,X):2
     [M+1>=E,F+1>=E,B>=E,A>=E+1,E>=2,O>=0,K>=0,G>=0,E+V=M+1,E+R=M+1,E+K=C+1,E=W+1,E=U+1,E=S+1,E=Q+1,E=L+1,E=I+1,X=1,T=0,P=1,N=1,J=0,H=1,D=1] 
* CE 326: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) = 4+ rec_mat(A,B,K,E,F,P,Q,E,R,S):4+ construct_matrix(T,J,E,R,S,U,V,N,W):3
     [F>=R,B>=R+1,R+1>=E,A>=E+1,R>=J+2,N>=0,S>=0,E>=2,J>=0,P>=0,K>=0,G>=0,E+J+K=C+1,E=T+1,E=I+1,W=1,V=0,U=1,Q=1,O=1,M=0,L=1,H=1,D=1] 
* CE 327: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) = 4+ rec_mat(A,B,K,E,F,P,Q,E,R,S):4+ construct_matrix(I,J,E,R,S,T,U,N,V):4
     [F>=R,B>=R+1,R+1>=E,A>=E+1,E>=I+2,N>=0,S>=0,J>=0,I>=0,P>=0,K>=0,G>=0,I+J+K=C,V=1,U=0,T=1,Q=1,O=1,M=0,L=1,H=1,D=1] 
* CE 328: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,E,L,M,N) = 4+ rec_mat(A,B,K,E,F,O,P,E,L,Q):4+ construct_matrix(R,J,E,L,S,E,L,M,T):5
     [M+1>=E+J,L+3>=2*E+J,F>=L,B>=L+1,A>=E+1,E>=2,J>=1,O>=0,K>=0,G>=0,E+J+S=M+1,E+J+Q=M+1,E+J+K=C+1,E=R+1,E=I+1,T=1,P=1,N=1,H=1,D=1] 

### Cost equations --> "Loop" of case_20/17 
* CEs [328] --> Loop 217 
* CEs [324] --> Loop 218 
* CEs [327] --> Loop 219 
* CEs [323] --> Loop 220 
* CEs [326] --> Loop 221 
* CEs [322] --> Loop 222 
* CEs [325] --> Loop 223 
* CEs [321] --> Loop 224 
* CEs [320] --> Loop 225 
* CEs [319] --> Loop 226 

#### Loops of case_20/17 
* Loop 217: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,E,L,M,N) [M+1>=E+J,C+1>=E+J,L+3>=2*E+J,F>=L,B>=L+1,A>=E+1,J>=1,G>=0,E>=2,E+J+K=C+1,E=I+1,N=1,H=1,D=1] 
* Loop 218: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,A,L,M,N) [M+1>=A+J,C+1>=A+J,L+3>=2*A+J,F>=L,B>=L,E>=A,J>=1,G>=0,A>=2,A+J+K=C+1,A=I+1,N=1,H=1,D=1] 
* Loop 219: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) [C>=I+J,E>=I+2,F+1>=E,B>=E,A>=E+1,N>=0,J>=0,I>=0,G>=0,C=I+J+K,O=1,M=0,L=1,H=1,D=1] 
* Loop 220: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) [C>=I+J,A>=I+2,F+1>=A,E>=A,B+1>=A,N>=0,J>=0,I>=0,G>=0,I+J+K=C,O=1,M=0,L=1,H=1,D=1] 
* Loop 221: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) [C+1>=E+J,F>=J+2,B>=J+3,F+1>=E,B>=E,A>=E+1,N>=0,J>=0,G>=0,E>=2,E+J+K=C+1,E=I+1,O=1,M=0,L=1,H=1,D=1] 
* Loop 222: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) [C+1>=A+J,F>=J+2,B>=J+2,F+1>=A,E>=A,B+1>=A,N>=0,J>=0,G>=0,A>=2,A+J+K=C+1,A=I+1,O=1,M=0,L=1,H=1,D=1] 
* Loop 223: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,E,L,M,N) [M+1>=E,F+1>=E,C+1>=E,B>=E,A>=E+1,G>=0,E>=2,E+K=C+1,E=L+1,E=I+1,N=1,J=0,H=1,D=1] 
* Loop 224: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,A,L,M,N) [M+1>=A,F+1>=A,E>=A,C+1>=A,B+1>=A,G>=0,A>=2,A+K=C+1,A=L+1,A=I+1,N=1,J=0,H=1,D=1] 
* Loop 225: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) [N>=J,C>=J,J>=0,G>=0,B>=1,A>=2,J+K=C,O=1,M=0,L=1,I=0,H=1,F=0,E=1,D=1] 
* Loop 226: case_20(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) [P>=J,C>=J,J>=0,G>=0,F>=0,E>=1,J+M=C,Q=1,O=0,N=1,L=0,K=1,I=0,H=1,D=1,B=0,A=1] 

### Ranking functions of CR case_20(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) 

#### Partial ranking functions of CR case_20(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) 


### Resulting Chains:case_20(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) 
* [226]
* [225]
* [224]
* [223]
* [222]
* [221]
* [220]
* [219]
* [218]
* [217]


### Merging Chains  case_20/17 into  External patterns of execution 
* [[226]] --> 1 
* [[225]] --> 2 
* [[223]] --> 3 
* [[224]] --> 4 
* [[221]] --> 5 
* [[219]] --> 6 
* [[220]] --> 7 
* [[222]] --> 8 
* [[217]] --> 9 
* [[218]] --> 10 


### Specialization of cost equations case_18/13 
* CE 80 is refined into CE [329,330,331,332,333,334,335,336,337,338] 
* CE 81 is refined into CE [339] 


#### Refined cost equations case_18/13 
* CE 329: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_20(N,O,P,Q,F,G,H,R,S,T,U,V,W,X,Y,L,Z):1
     [L>=T,W>=0,T>=0,H>=0,G>=0,F>=1,T+W=P,T+W=D,Z=1,Y=0,X=1,V=0,U=1,S=0,R=1,Q=1,O=0,N=1,M=1,K=0,J=1,I=1,E=1,C=0,B=1,A=1] 
* CE 330: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_20(B,C,N,O,P,Q,H,R,S,T,B,C,U,V,W,L,X):2
     [L>=T,U>=0,C>=1,B>=2,T>=0,H>=0,T+U=N,T+U=D,X=1,W=0,V=1,S=0,R=1,Q=0,P=1,O=1,M=1,K=0,J=1,I=1,G=0,F=1,E=1,A=1] 
* CE 331: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_20(B,C,N,O,P,G,H,Q,K,R,B,C,S,T,K,L,U):3
     [L>=K,C>=K+1,B>=K+2,G>=K,S>=0,K>=1,H>=0,K+S=N,K+S=D,K+1=T,K+1=P,K+1=J,K+1=F,U=1,R=0,Q=1,O=1,M=1,I=1,E=1,A=1] 
* CE 332: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_20(N,C,D,O,F,G,H,P,K,Q,R,C,S,T,K,L,U):4
     [L>=K,C>=K,G>=K,F>=K+1,D>=K,K>=1,H>=0,K+S=D,K+1=T,K+1=R,K+1=N,K+1=J,K+1=B,U=1,Q=0,P=1,O=1,M=1,I=1,E=1,A=1] 
* CE 333: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_20(B,C,N,O,P,G,H,Q,R,S,B,C,T,U,V,L,W):5
     [C>=S+3,G>=S+2,C>=R+1,B>=R+2,G>=R,L>=0,T>=0,S>=0,R>=1,H>=0,R+S+T=N,R+S+T=D,R+1=P,R+1=F,W=1,V=0,U=1,Q=1,O=1,M=1,K=0,J=1,I=1,E=1,A=1] 
* CE 334: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_20(B,C,D,N,F,G,H,O,P,Q,B,C,R,S,T,L,U):6
     [D>=P+Q,F>=P+2,C>=F,B>=F+1,G+1>=F,L>=0,Q>=0,P>=0,H>=0,D=P+Q+R,U=1,T=0,S=1,O=1,N=1,M=1,K=0,J=1,I=1,E=1,A=1] 
* CE 335: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_20(B,C,N,O,F,G,H,P,Q,R,B,C,S,T,U,L,V):7
     [C+1>=B,G+1>=B,F>=B,B>=Q+2,L>=0,S>=0,R>=0,Q>=0,H>=0,Q+R+S=N,Q+R+S=D,V=1,U=0,T=1,P=1,O=1,M=1,K=0,J=1,I=1,E=1,A=1] 
* CE 336: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_20(N,C,D,O,F,G,H,P,Q,R,S,C,T,U,V,L,W):8
     [D>=Q+R,C>=R+2,G>=R+2,C>=Q,G>=Q,F>=Q+1,L>=0,R>=0,Q>=1,H>=0,Q+R+T=D,Q+1=S,Q+1=N,Q+1=B,W=1,V=0,U=1,P=1,O=1,M=1,K=0,J=1,I=1,E=1,A=1] 
* CE 337: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_20(B,C,N,O,P,G,H,Q,R,S,B,C,T,U,K,L,V):9
     [L>=R+S,K+1>=2*R+S,C>=K+1,G>=K,B>=R+2,T>=0,S>=1,R>=1,H>=0,R+S+T=N,R+S+T=D,R+1=U,R+1=P,R+1=J,R+1=F,V=1,Q=1,O=1,M=1,I=1,E=1,A=1] 
* CE 338: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_20(N,C,D,O,F,G,H,P,Q,R,S,C,T,U,K,L,V):10
     [L>=Q+R,D>=Q+R,K+1>=2*Q+R,C>=K,G>=K,F>=Q+1,R>=1,Q>=1,H>=0,Q+R+T=D,Q+1=U,Q+1=S,Q+1=N,Q+1=J,Q+1=B,V=1,P=1,O=1,M=1,I=1,E=1,A=1] 
* CE 339: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 6
     [L>=0,I>=0,H>=0,G>=0,F>=0,E>=0,D>=0,C>=0,B>=0,M=1,K=0,J=1,A=0] 

### Cost equations --> "Loop" of case_18/13 
* CEs [331] --> Loop 227 
* CEs [338] --> Loop 228 
* CEs [332] --> Loop 229 
* CEs [337] --> Loop 230 
* CEs [333,334] --> Loop 231 
* CEs [335,336] --> Loop 232 
* CEs [330] --> Loop 233 
* CEs [329] --> Loop 234 
* CEs [339] --> Loop 235 

#### Loops of case_18/13 
* Loop 227: case_18(A,B,C,D,E,F,G,H,I,F,J,K,L) [K+1>=F,G+1>=F,D+1>=F,C>=F,B>=F+1,H>=0,F>=2,F=J+1,L=1,I=1,E=1,A=1] 
* Loop 228: case_18(A,B,C,D,E,F,G,H,I,B,J,K,L) [G>=J,C>=J,K>=B,F>=B,D>=B,J+2>=2*B,H>=0,B>=2,L=1,I=1,E=1,A=1] 
* Loop 229: case_18(A,B,C,D,E,F,G,H,I,B,J,K,L) [K+1>=B,G+1>=B,F>=B,D+1>=B,C+1>=B,H>=0,B>=2,B=J+1,L=1,I=1,E=1,A=1] 
* Loop 230: case_18(A,B,C,D,E,F,G,H,I,F,J,K,L) [G>=J,C>=J+1,K>=F,D>=F,B>=F+1,J+2>=2*F,H>=0,F>=2,L=1,I=1,E=1,A=1] 
* Loop 231: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) [G+1>=F,C>=F,B>=F+1,L>=0,H>=0,F>=2,D>=0,M=1,K=0,J=1,I=1,E=1,A=1] 
* Loop 232: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) [G+1>=B,F>=B,C+1>=B,L>=0,H>=0,D>=0,B>=2,M=1,K=0,J=1,I=1,E=1,A=1] 
* Loop 233: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) [L>=0,H>=0,D>=0,C>=1,B>=2,M=1,K=0,J=1,I=1,G=0,F=1,E=1,A=1] 
* Loop 234: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) [L>=0,H>=0,G>=0,F>=1,D>=0,M=1,K=0,J=1,I=1,E=1,C=0,B=1,A=1] 
* Loop 235: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) [L>=0,I>=0,H>=0,G>=0,F>=0,E>=0,D>=0,C>=0,B>=0,M=1,K=0,J=1,A=0] 

### Ranking functions of CR case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) 

#### Partial ranking functions of CR case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) 


### Resulting Chains:case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) 
* [235]
* [234]
* [233]
* [232]
* [231]
* [230]
* [229]
* [228]
* [227]


### Merging Chains  case_18/13 into  External patterns of execution 
* [[235]] --> 1 
* [[234]] --> 2 
* [[233]] --> 3 
* [[232]] --> 4 
* [[231]] --> 5 
* [[229]] --> 6 
* [[228]] --> 7 
* [[227]] --> 8 
* [[230]] --> 9 


### Specialization of cost equations plus/12 
* CE 20 is refined into CE [340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360] 


#### Refined cost equations plus/12 
* CE 340: plus(A,B,C,D,E,F,G,H,I,J,K,L) = 2+ check_sanity(A,B,C,M,E,F,G,N,O):1+ case_18(P,A,B,C,Q,E,F,G,R,S,T,K,U):1
     [F+1>=E,B+1>=A,K>=0,G>=0,E>=2,C>=0,A>=2,U=1,T=0,S=1,R=1,Q=1,P=0,O=0,N=1,M=1,L=1,J=0,I=1,H=1,D=1] 
* CE 341: plus(A,B,C,D,E,F,G,H,I,J,K,L) = 2+ check_sanity(A,M,C,N,E,O,G,P,Q):2+ case_18(R,A,S,C,T,E,U,G,V,W,X,K,Y):4
     [G+1>=E,E>=A,C+1>=A,K>=0,A>=2,E=U+1,A=S+1,E=O+1,A=M+1,E=F+1,A=B+1,Y=1,X=0,W=1,V=1,T=1,R=1,Q=1,P=1,N=1,L=1,J=0,I=1,H=1,D=1] 
* CE 342: plus(A,B,C,D,E,F,G,H,I,J,K,L) = 2+ check_sanity(A,M,C,N,E,O,G,P,Q):2+ case_18(R,A,S,C,T,E,U,G,V,W,X,K,Y):5
     [G+1>=E,A>=E+1,C+1>=A,K>=0,E>=2,E=U+1,A=S+1,E=O+1,A=M+1,E=F+1,A=B+1,Y=1,X=0,W=1,V=1,T=1,R=1,Q=1,P=1,N=1,L=1,J=0,I=1,H=1,D=1] 
* CE 343: plus(A,B,C,D,E,F,G,H,A,I,J,K) = 2+ check_sanity(A,L,C,M,E,N,G,O,P):2+ case_18(Q,A,R,C,S,E,T,G,U,A,V,J,W):6
     [J+1>=A,E>=A,C+1>=A,G+1>=E,A>=2,A=V+1,E=T+1,A=R+1,E=N+1,A=L+1,A=I+1,E=F+1,A=B+1,W=1,U=1,S=1,Q=1,P=1,O=1,M=1,K=1,H=1,D=1] 
* CE 344: plus(A,B,C,D,E,F,G,H,E,I,J,K) = 2+ check_sanity(A,L,C,M,E,N,G,O,P):2+ case_18(Q,A,R,C,S,E,T,G,U,E,V,J,W):8
     [J+1>=E,G+1>=E,A>=E+1,C+1>=A,E>=2,E=V+1,E=T+1,A=R+1,E=N+1,A=L+1,E=I+1,E=F+1,A=B+1,W=1,U=1,S=1,Q=1,P=1,O=1,M=1,K=1,H=1,D=1] 
* CE 345: plus(A,B,C,D,E,F,G,H,I,J,K,L) = 2+ check_sanity(A,M,C,N,E,F,G,O,P):3+ case_18(Q,A,R,C,S,E,F,G,T,U,V,K,W):4
     [G>=E,E>=A,C+1>=A,F+2>=2*E,K>=0,A>=2,A=R+1,A=M+1,A=B+1,W=1,V=0,U=1,T=1,S=1,Q=1,P=1,O=1,N=1,L=1,J=0,I=1,H=1,D=1] 
* CE 346: plus(A,B,C,D,E,F,G,H,I,J,K,L) = 2+ check_sanity(A,M,C,N,E,F,G,O,P):3+ case_18(Q,A,R,C,S,E,F,G,T,U,V,K,W):5
     [G>=E,A>=E+1,C+1>=A,F+2>=2*E,K>=0,E>=2,A=R+1,A=M+1,A=B+1,W=1,V=0,U=1,T=1,S=1,Q=1,P=1,O=1,N=1,L=1,J=0,I=1,H=1,D=1] 
* CE 347: plus(A,B,C,D,E,F,G,H,A,I,J,K) = 2+ check_sanity(A,L,C,M,E,F,G,N,O):3+ case_18(P,A,Q,C,R,E,F,G,S,A,T,J,U):6
     [J+1>=A,E>=A,C+1>=A,G>=E,F+2>=2*E,A>=2,A=T+1,A=Q+1,A=L+1,A=I+1,A=B+1,U=1,S=1,R=1,P=1,O=1,N=1,M=1,K=1,H=1,D=1] 
* CE 348: plus(A,B,C,D,E,F,G,H,E,I,J,K) = 2+ check_sanity(A,L,C,M,E,F,G,N,O):3+ case_18(P,A,Q,C,R,E,F,G,S,E,T,J,U):8
     [J+1>=E,G>=E,A>=E+1,C+1>=A,F+2>=2*E,E>=2,E=T+1,A=Q+1,A=L+1,E=I+1,A=B+1,U=1,S=1,R=1,P=1,O=1,N=1,M=1,K=1,H=1,D=1] 
* CE 349: plus(A,B,C,D,E,F,G,H,E,I,J,K) = 2+ check_sanity(A,L,C,M,E,F,G,N,O):3+ case_18(P,A,Q,C,R,E,F,G,S,E,I,J,T):9
     [F>=I,A>=I+2,J>=E,G>=E,C+1>=A,I+2>=2*E,E>=2,A=Q+1,A=L+1,A=B+1,T=1,S=1,R=1,P=1,O=1,N=1,M=1,K=1,H=1,D=1] 
* CE 350: plus(A,B,C,D,E,F,G,H,I,J,K,L) = 2+ check_sanity(A,B,C,M,E,N,G,O,P):4+ case_18(Q,A,B,C,R,E,S,G,T,U,V,K,W):4
     [G+1>=E,E>=A,C>=A,B+2>=2*A,K>=0,A>=2,E=S+1,E=N+1,E=F+1,W=1,V=0,U=1,T=1,R=1,Q=1,P=1,O=1,M=1,L=1,J=0,I=1,H=1,D=1] 
* CE 351: plus(A,B,C,D,E,F,G,H,I,J,K,L) = 2+ check_sanity(A,B,C,M,E,N,G,O,P):4+ case_18(Q,A,B,C,R,E,S,G,T,U,V,K,W):5
     [G+1>=E,A>=E+1,C>=A,B+2>=2*A,K>=0,E>=2,E=S+1,E=N+1,E=F+1,W=1,V=0,U=1,T=1,R=1,Q=1,P=1,O=1,M=1,L=1,J=0,I=1,H=1,D=1] 
* CE 352: plus(A,B,C,D,E,F,G,H,A,I,J,K) = 2+ check_sanity(A,B,C,L,E,M,G,N,O):4+ case_18(P,A,B,C,Q,E,R,G,S,A,T,J,U):6
     [J+1>=A,E>=A,C>=A,G+1>=E,B+2>=2*A,A>=2,A=T+1,E=R+1,E=M+1,A=I+1,E=F+1,U=1,S=1,Q=1,P=1,O=1,N=1,L=1,K=1,H=1,D=1] 
* CE 353: plus(A,B,C,D,E,F,G,H,A,I,J,K) = 2+ check_sanity(A,B,C,L,E,M,G,N,O):4+ case_18(P,A,B,C,Q,E,R,G,S,A,I,J,T):7
     [E>=I+1,B>=I,J>=A,C>=A,G+1>=E,I+2>=2*A,A>=2,E=R+1,E=M+1,E=F+1,T=1,S=1,Q=1,P=1,O=1,N=1,L=1,K=1,H=1,D=1] 
* CE 354: plus(A,B,C,D,E,F,G,H,E,I,J,K) = 2+ check_sanity(A,B,C,L,E,M,G,N,O):4+ case_18(P,A,B,C,Q,E,R,G,S,E,T,J,U):8
     [J+1>=E,G+1>=E,A>=E+1,C>=A,B+2>=2*A,E>=2,E=T+1,E=R+1,E=M+1,E=I+1,E=F+1,U=1,S=1,Q=1,P=1,O=1,N=1,L=1,K=1,H=1,D=1] 
* CE 355: plus(A,B,C,D,E,F,G,H,I,J,K,L) = 2+ check_sanity(A,B,C,M,E,F,G,N,O):5+ case_18(P,A,B,C,Q,E,F,G,R,S,T,K,U):4
     [G>=E,E>=A,C>=A,F+2>=2*E,B+2>=2*A,K>=0,A>=2,U=1,T=0,S=1,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,J=0,I=1,H=1,D=1] 
* CE 356: plus(A,B,C,D,E,F,G,H,I,J,K,L) = 2+ check_sanity(A,B,C,M,E,F,G,N,O):5+ case_18(P,A,B,C,Q,E,F,G,R,S,T,K,U):5
     [G>=E,A>=E+1,C>=A,F+2>=2*E,B+2>=2*A,K>=0,E>=2,U=1,T=0,S=1,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,J=0,I=1,H=1,D=1] 
* CE 357: plus(A,B,C,D,E,F,G,H,A,I,J,K) = 2+ check_sanity(A,B,C,L,E,F,G,M,N):5+ case_18(O,A,B,C,P,E,F,G,Q,A,R,J,S):6
     [J+1>=A,E>=A,C>=A,G>=E,B+2>=2*A,F+2>=2*E,A>=2,A=R+1,A=I+1,S=1,Q=1,P=1,O=1,N=1,M=1,L=1,K=1,H=1,D=1] 
* CE 358: plus(A,B,C,D,E,F,G,H,A,I,J,K) = 2+ check_sanity(A,B,C,L,E,F,G,M,N):5+ case_18(O,A,B,C,P,E,F,G,Q,A,I,J,R):7
     [F>=I,B>=I,J>=A,E>=A,C>=A,G>=E,I+2>=2*A,F+2>=2*E,A>=2,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,K=1,H=1,D=1] 
* CE 359: plus(A,B,C,D,E,F,G,H,E,I,J,K) = 2+ check_sanity(A,B,C,L,E,F,G,M,N):5+ case_18(O,A,B,C,P,E,F,G,Q,E,R,J,S):8
     [J+1>=E,G>=E,A>=E+1,C>=A,F+2>=2*E,B+2>=2*A,E>=2,E=R+1,E=I+1,S=1,Q=1,P=1,O=1,N=1,M=1,L=1,K=1,H=1,D=1] 
* CE 360: plus(A,B,C,D,E,F,G,H,E,I,J,K) = 2+ check_sanity(A,B,C,L,E,F,G,M,N):5+ case_18(O,A,B,C,P,E,F,G,Q,E,I,J,R):9
     [F>=I,B>=I+1,J>=E,G>=E,A>=E+1,C>=A,I+2>=2*E,B+2>=2*A,E>=2,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,K=1,H=1,D=1] 

### Cost equations --> "Loop" of plus/12 
* CEs [360] --> Loop 236 
* CEs [359] --> Loop 237 
* CEs [358] --> Loop 238 
* CEs [357] --> Loop 239 
* CEs [354] --> Loop 240 
* CEs [353] --> Loop 241 
* CEs [352] --> Loop 242 
* CEs [349] --> Loop 243 
* CEs [348] --> Loop 244 
* CEs [347] --> Loop 245 
* CEs [344] --> Loop 246 
* CEs [343] --> Loop 247 
* CEs [350] --> Loop 248 
* CEs [351] --> Loop 249 
* CEs [346] --> Loop 250 
* CEs [345] --> Loop 251 
* CEs [342] --> Loop 252 
* CEs [340,341,355,356] --> Loop 253 

#### Loops of plus/12 
* Loop 236: plus(A,B,C,D,E,F,G,H,E,I,J,K) [F>=I,B>=I+1,J>=E,G>=E,A>=E+1,C>=A,I+2>=2*E,B+2>=2*A,E>=2,K=1,H=1,D=1] 
* Loop 237: plus(A,B,C,D,E,F,G,H,E,I,J,K) [J+1>=E,G>=E,A>=E+1,C>=A,F+2>=2*E,B+2>=2*A,E>=2,E=I+1,K=1,H=1,D=1] 
* Loop 238: plus(A,B,C,D,E,F,G,H,A,I,J,K) [F>=I,B>=I,G>=E,J>=A,E>=A,C>=A,F+2>=2*E,I+2>=2*A,A>=2,K=1,H=1,D=1] 
* Loop 239: plus(A,B,C,D,E,F,G,H,A,I,J,K) [G>=E,J+1>=A,E>=A,C>=A,F+2>=2*E,B+2>=2*A,A>=2,A=I+1,K=1,H=1,D=1] 
* Loop 240: plus(A,B,C,D,E,F,G,H,E,I,J,K) [J+1>=E,G+1>=E,A>=E+1,C>=A,B+2>=2*A,E>=2,E=I+1,E=F+1,K=1,H=1,D=1] 
* Loop 241: plus(A,B,C,D,E,F,G,H,A,I,J,K) [E>=I+1,B>=I,G+1>=E,J>=A,C>=A,I+2>=2*A,A>=2,E=F+1,K=1,H=1,D=1] 
* Loop 242: plus(A,B,C,D,E,F,G,H,A,I,J,K) [G+1>=E,J+1>=A,E>=A,C>=A,B+2>=2*A,A>=2,A=I+1,E=F+1,K=1,H=1,D=1] 
* Loop 243: plus(A,B,C,D,E,F,G,H,E,I,J,K) [F>=I,A>=I+2,J>=E,G>=E,C+1>=A,I+2>=2*E,E>=2,A=B+1,K=1,H=1,D=1] 
* Loop 244: plus(A,B,C,D,E,F,G,H,E,I,J,K) [J+1>=E,G>=E,A>=E+1,C+1>=A,F+2>=2*E,E>=2,E=I+1,A=B+1,K=1,H=1,D=1] 
* Loop 245: plus(A,B,C,D,E,F,G,H,A,I,J,K) [G>=E,J+1>=A,E>=A,C+1>=A,F+2>=2*E,A>=2,A=I+1,A=B+1,K=1,H=1,D=1] 
* Loop 246: plus(A,B,C,D,E,F,G,H,E,I,J,K) [J+1>=E,G+1>=E,A>=E+1,C+1>=A,E>=2,E=I+1,E=F+1,A=B+1,K=1,H=1,D=1] 
* Loop 247: plus(A,B,C,D,E,F,G,H,A,I,J,K) [G+1>=E,J+1>=A,E>=A,C+1>=A,A>=2,A=I+1,E=F+1,A=B+1,K=1,H=1,D=1] 
* Loop 248: plus(A,B,C,D,E,F,G,H,I,J,K,L) [G+1>=E,E>=A,C>=A,B+2>=2*A,K>=0,A>=2,E=F+1,L=1,J=0,I=1,H=1,D=1] 
* Loop 249: plus(A,B,C,D,E,F,G,H,I,J,K,L) [G+1>=E,A>=E+1,C>=A,B+2>=2*A,K>=0,E>=2,E=F+1,L=1,J=0,I=1,H=1,D=1] 
* Loop 250: plus(A,B,C,D,E,F,G,H,I,J,K,L) [G>=E,A>=E+1,C+1>=A,F+2>=2*E,K>=0,E>=2,A=B+1,L=1,J=0,I=1,H=1,D=1] 
* Loop 251: plus(A,B,C,D,E,F,G,H,I,J,K,L) [G>=E,E>=A,C+1>=A,F+2>=2*E,K>=0,A>=2,A=B+1,L=1,J=0,I=1,H=1,D=1] 
* Loop 252: plus(A,B,C,D,E,F,G,H,I,J,K,L) [G+1>=E,A>=E+1,C+1>=A,K>=0,E>=2,E=F+1,A=B+1,L=1,J=0,I=1,H=1,D=1] 
* Loop 253: plus(A,B,C,D,E,F,G,H,I,J,K,L) [F+1>=E,B+1>=A,K>=0,G>=0,E>=2,C>=0,A>=2,L=1,J=0,I=1,H=1,D=1] 

### Ranking functions of CR plus(A,B,C,D,E,F,G,H,I,J,K,L) 

#### Partial ranking functions of CR plus(A,B,C,D,E,F,G,H,I,J,K,L) 


### Resulting Chains:plus(A,B,C,D,E,F,G,H,I,J,K,L) 
* [253]
* [252]
* [251]
* [250]
* [249]
* [248]
* [247]
* [246]
* [245]
* [244]
* [243]
* [242]
* [241]
* [240]
* [239]
* [238]
* [237]
* [236]


### Merging Chains  plus/12 into  External patterns of execution 
* [[252],[253]] --> 1 
* [[251]] --> 2 
* [[250]] --> 3 
* [[248]] --> 4 
* [[249]] --> 5 
* [[247]] --> 6 
* [[246]] --> 7 
* [[245]] --> 8 
* [[244]] --> 9 
* [[243]] --> 10 
* [[242]] --> 11 
* [[241]] --> 12 
* [[240]] --> 13 
* [[239]] --> 14 
* [[238]] --> 15 
* [[237]] --> 16 
* [[236]] --> 17 


### Specialization of cost equations evaluate/8 
* CE 62 is refined into CE [361,362,363,364,365] 
* CE 59 is refined into CE [366,367,368,369,370,371,372,373,374,375] 
* CE 60 is refined into CE [376] 
* CE 61 is refined into CE [377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393] 


#### Refined cost equations evaluate/8 
* CE 361: evaluate(A,B,C,D,E,F,C,G) = 3+ construct_matrix(H,I,J,K,L,M,N,C,O):1
     [C>=I,I>=0,C=I+L,O=1,N=0,M=1,K=0,J=1,H=0,G=1,F=0,E=1,D=1,B=0,A=1] 
* CE 362: evaluate(A,B,C,D,A,E,C,F) = 3+ construct_matrix(G,H,A,I,J,A,K,C,L):2
     [C+1>=A,A>=2,A+J=C+1,A=K+1,A=I+1,A=G+1,A=E+1,A=B+1,L=1,H=0,F=1,D=1] 
* CE 363: evaluate(A,B,C,D,E,F,G,H) = 3+ construct_matrix(I,J,A,B,K,L,M,G,N):3
     [B+1>=A,B>=J+2,G>=0,K>=0,A>=2,J>=0,A+J+K=C+1,A=I+1,N=1,M=0,L=1,H=1,F=0,E=1,D=1] 
* CE 364: evaluate(A,B,C,D,E,F,G,H) = 3+ construct_matrix(I,J,A,B,K,L,M,G,N):4
     [B+1>=A,A>=I+2,G>=0,K>=0,J>=0,I>=0,I+J+K=C,N=1,M=0,L=1,H=1,F=0,E=1,D=1] 
* CE 365: evaluate(A,B,C,D,A,B,C,E) = 3+ construct_matrix(F,G,A,B,H,A,B,C,I):5
     [C+1>=A+G,B+3>=2*A+G,A>=2,G>=1,A+G+H=C+1,A=F+1,I=1,E=1,D=1] 
* CE 366: evaluate(A,B,C,D,E,F,G,H) = 8+ evaluate(I,J,K,L,M,N,O,P)+ evaluate(Q,R,S,T,U,V,W,X)+ mult(M,N,O,Y,U,V,W,Z,A1,B1,G,C1):1
     [K+S>=0,J+R>=0,I+Q>=0,V+1>=U,N+1>=M,T>=1,L>=1,G>=0,W>=0,U>=2,O>=0,M>=2,L+T+1=D,K+S=C,J+R=B,I+Q=A,X=1,P=1,C1=1,B1=0,A1=1,Z=1,Y=1,H=1,F=0,E=1] 
* CE 367: evaluate(A,B,C,D,E,F,G,H) = 8+ evaluate(I,J,K,L,M,N,O,P)+ evaluate(Q,R,S,T,U,V,W,X)+ mult(M,N,O,Y,Z,V,W,A1,B1,C1,G,D1):2
     [K+S>=0,J+R>=0,I+Q>=0,W>=V,O>=M,N+2>=2*M,T>=1,L>=1,G>=0,V>=1,M>=2,L+T+1=D,K+S=C,J+R=B,I+Q=A,V+1=U,V+1=Z,X=1,P=1,D1=1,C1=0,B1=1,A1=1,Y=1,H=1,F=0,E=1] 
* CE 368: evaluate(A,B,C,D,E,F,G,H) = 8+ evaluate(I,J,K,L,M,F,N,O)+ evaluate(P,Q,R,S,T,U,V,W)+ mult(X,F,N,Y,Z,U,V,A1,B1,F,G,C1):3
     [K+R>=0,J+Q>=0,I+P>=0,V>=U,G>=F,N>=F,S>=1,L>=1,U>=1,F>=1,L+S+1=D,K+R=C,J+Q=B,I+P=A,U+1=T,F+1=M,F+1=B1,U+1=Z,F+1=X,F+1=E,W=1,O=1,C1=1,A1=1,Y=1,H=1] 
* CE 369: evaluate(A,B,C,D,E,F,G,H) = 8+ evaluate(I,J,K,L,M,N,O,P)+ evaluate(Q,R,S,T,U,V,W,X)+ mult(Y,N,O,Z,A1,V,W,B1,C1,F,G,D1):4
     [K+S>=0,J+R>=0,I+Q>=0,W>=V,G>=N+1,O>=N+1,F>=2*N,T>=1,L>=1,V>=1,N>=1,L+T+1=D,K+S=C,J+R=B,I+Q=A,V+1=U,N+1=M,N+1=C1,V+1=A1,N+1=Y,N+1=E,X=1,P=1,D1=1,B1=1,Z=1,H=1] 
* CE 370: evaluate(A,B,C,D,E,F,G,H) = 8+ evaluate(I,J,K,L,M,F,N,O)+ evaluate(P,Q,R,S,T,U,V,W)+ mult(X,F,N,Y,T,U,V,Z,A1,F,G,B1):5
     [K+R>=0,J+Q>=0,I+P>=0,V>=T,G>=F,N>=F,U+2>=2*T,S>=1,L>=1,T>=2,F>=1,L+S+1=D,K+R=C,J+Q=B,I+P=A,F+1=M,F+1=A1,F+1=X,F+1=E,W=1,O=1,B1=1,Z=1,Y=1,H=1] 
* CE 371: evaluate(A,B,C,D,E,F,G,H) = 8+ evaluate(I,J,K,L,M,N,O,P)+ evaluate(Q,R,S,T,U,V,W,X)+ mult(Y,N,O,Z,U,V,W,A1,B1,F,G,C1):6
     [K+S>=0,J+R>=0,I+Q>=0,W>=U,G>=N+1,O>=N+1,V+2>=2*U,F>=2*N,T>=1,L>=1,U>=2,N>=1,L+T+1=D,K+S=C,J+R=B,I+Q=A,N+1=M,N+1=B1,N+1=Y,N+1=E,X=1,P=1,C1=1,A1=1,Z=1,H=1] 
* CE 372: evaluate(A,B,C,D,E,F,G,H) = 8+ evaluate(I,J,K,L,E,M,N,O)+ evaluate(P,Q,R,S,T,U,V,W)+ mult(E,M,N,X,Y,U,V,Z,E,A1,G,B1):7
     [K+R>=0,J+Q>=0,I+P>=0,G+1>=E,N>=E,V>=U,M+2>=2*E,S>=1,L>=1,E>=2,U>=1,L+S+1=D,K+R=C,J+Q=B,I+P=A,U+1=T,E=A1+1,U+1=Y,E=F+1,W=1,O=1,B1=1,Z=1,X=1,H=1] 
* CE 373: evaluate(A,B,C,D,E,F,G,H) = 8+ evaluate(I,J,K,L,E,M,N,O)+ evaluate(P,Q,R,S,T,U,V,W)+ mult(E,M,N,X,Y,U,V,Z,E,F,G,A1):8
     [K+R>=0,J+Q>=0,I+P>=0,G>=E,N>=E,V>=U,F+2>=2*E,M+2>=2*E,S>=1,L>=1,E>=2,U>=1,L+S+1=D,K+R=C,J+Q=B,I+P=A,U+1=T,U+1=Y,W=1,O=1,A1=1,Z=1,X=1,H=1] 
* CE 374: evaluate(A,B,C,D,E,F,G,H) = 8+ evaluate(I,J,K,L,E,M,N,O)+ evaluate(P,Q,R,S,T,U,V,W)+ mult(E,M,N,X,T,U,V,Y,E,Z,G,A1):9
     [K+R>=0,J+Q>=0,I+P>=0,G+1>=E,N>=E,V>=T,M+2>=2*E,U+2>=2*T,S>=1,L>=1,E>=2,T>=2,L+S+1=D,K+R=C,J+Q=B,I+P=A,E=Z+1,E=F+1,W=1,O=1,A1=1,Y=1,X=1,H=1] 
* CE 375: evaluate(A,B,C,D,E,F,G,H) = 8+ evaluate(I,J,K,L,E,M,N,O)+ evaluate(P,Q,R,S,T,U,V,W)+ mult(E,M,N,X,T,U,V,Y,E,F,G,Z):10
     [K+R>=0,J+Q>=0,I+P>=0,G>=E,N>=E,V>=T,F+2>=2*E,M+2>=2*E,U+2>=2*T,S>=1,L>=1,E>=2,T>=2,L+S+1=D,K+R=C,J+Q=B,I+P=A,W=1,O=1,Z=1,Y=1,X=1,H=1] 
* CE 376: evaluate(A,B,C,D,E,F,G,H) = 7+ evaluate(I,J,K,L,M,N,O,P)+ evaluate(Q,R,S,T,U,V,W,X)+ minus(M,N,O,Y,U,V,W,Z,A1,B1,G,C1):1
     [K+S>=0,J+R>=0,I+Q>=0,V+1>=U,N+1>=M,T>=1,L>=1,G>=0,W>=0,U>=2,O>=0,M>=2,L+T+1=D,K+S=C,J+R=B,I+Q=A,X=1,P=1,C1=1,B1=0,A1=1,Z=1,Y=1,H=1,F=0,E=1] 
* CE 377: evaluate(A,B,C,D,E,F,G,H) = 6+ evaluate(I,J,K,L,M,N,O,P)+ evaluate(Q,R,S,T,U,V,W,X)+ plus(M,N,O,Y,U,V,W,Z,A1,B1,G,C1):1
     [K+S>=0,J+R>=0,I+Q>=0,V+1>=U,N+1>=M,T>=1,L>=1,G>=0,W>=0,U>=2,O>=0,M>=2,L+T+1=D,K+S=C,J+R=B,I+Q=A,X=1,P=1,C1=1,B1=0,A1=1,Z=1,Y=1,H=1,F=0,E=1] 
* CE 378: evaluate(A,B,C,D,E,F,G,H) = 6+ evaluate(I,J,K,L,M,N,O,P)+ evaluate(Q,R,S,T,U,V,W,X)+ plus(Y,N,O,Z,U,V,W,A1,B1,C1,G,D1):2
     [K+S>=0,J+R>=0,I+Q>=0,W>=U,U>=N+1,O>=N,V+2>=2*U,T>=1,L>=1,G>=0,N>=1,L+T+1=D,K+S=C,J+R=B,I+Q=A,N+1=M,N+1=Y,X=1,P=1,D1=1,C1=0,B1=1,A1=1,Z=1,H=1,F=0,E=1] 
* CE 379: evaluate(A,B,C,D,E,F,G,H) = 6+ evaluate(I,J,K,L,M,N,O,P)+ evaluate(Q,R,S,T,U,V,W,X)+ plus(Y,N,O,Z,U,V,W,A1,B1,C1,G,D1):3
     [K+S>=0,J+R>=0,I+Q>=0,W>=U,N>=U,O>=N,V+2>=2*U,T>=1,L>=1,G>=0,U>=2,L+T+1=D,K+S=C,J+R=B,I+Q=A,N+1=M,N+1=Y,X=1,P=1,D1=1,C1=0,B1=1,A1=1,Z=1,H=1,F=0,E=1] 
* CE 380: evaluate(A,B,C,D,E,F,G,H) = 6+ evaluate(I,J,K,L,M,N,O,P)+ evaluate(Q,R,S,T,U,V,W,X)+ plus(M,N,O,Y,Z,V,W,A1,B1,C1,G,D1):4
     [K+S>=0,J+R>=0,I+Q>=0,W>=V,V+1>=M,O>=M,N+2>=2*M,T>=1,L>=1,G>=0,M>=2,L+T+1=D,K+S=C,J+R=B,I+Q=A,V+1=U,V+1=Z,X=1,P=1,D1=1,C1=0,B1=1,A1=1,Y=1,H=1,F=0,E=1] 
* CE 381: evaluate(A,B,C,D,E,F,G,H) = 6+ evaluate(I,J,K,L,M,N,O,P)+ evaluate(Q,R,S,T,U,V,W,X)+ plus(M,N,O,Y,Z,V,W,A1,B1,C1,G,D1):5
     [K+S>=0,J+R>=0,I+Q>=0,W>=V,M>=V+2,O>=M,N+2>=2*M,T>=1,L>=1,G>=0,V>=1,L+T+1=D,K+S=C,J+R=B,I+Q=A,V+1=U,V+1=Z,X=1,P=1,D1=1,C1=0,B1=1,A1=1,Y=1,H=1,F=0,E=1] 
* CE 382: evaluate(A,B,C,D,E,F,G,H) = 6+ evaluate(I,J,K,L,M,F,N,O)+ evaluate(P,Q,R,S,T,U,V,W)+ plus(X,F,N,Y,Z,U,V,A1,B1,F,G,C1):6
     [K+R>=0,J+Q>=0,I+P>=0,V>=U,G>=F,U>=F,N>=F,S>=1,L>=1,F>=1,L+S+1=D,K+R=C,J+Q=B,I+P=A,U+1=T,F+1=M,F+1=B1,U+1=Z,F+1=X,F+1=E,W=1,O=1,C1=1,A1=1,Y=1,H=1] 
* CE 383: evaluate(A,B,C,D,E,F,G,H) = 6+ evaluate(I,J,K,L,M,N,O,P)+ evaluate(Q,R,S,T,U,F,V,W)+ plus(X,N,O,Y,Z,F,V,A1,B1,F,G,C1):7
     [K+S>=0,J+R>=0,I+Q>=0,G>=F,V>=F,N>=F+1,O>=N,T>=1,L>=1,F>=1,L+T+1=D,K+S=C,J+R=B,I+Q=A,F+1=U,N+1=M,F+1=B1,F+1=Z,N+1=X,F+1=E,W=1,P=1,C1=1,A1=1,Y=1,H=1] 
* CE 384: evaluate(A,B,C,D,E,F,G,H) = 6+ evaluate(I,J,K,L,M,F,N,O)+ evaluate(P,Q,R,S,T,U,V,W)+ plus(X,F,N,Y,T,U,V,Z,A1,F,G,B1):8
     [K+R>=0,J+Q>=0,I+P>=0,V>=T,G>=F,T>=F+1,N>=F,U+2>=2*T,S>=1,L>=1,F>=1,L+S+1=D,K+R=C,J+Q=B,I+P=A,F+1=M,F+1=A1,F+1=X,F+1=E,W=1,O=1,B1=1,Z=1,Y=1,H=1] 
* CE 385: evaluate(A,B,C,D,E,F,G,H) = 6+ evaluate(I,J,K,L,M,N,O,P)+ evaluate(Q,R,S,T,E,U,V,W)+ plus(X,N,O,Y,E,U,V,Z,E,A1,G,B1):9
     [K+S>=0,J+R>=0,I+Q>=0,G+1>=E,V>=E,N>=E,O>=N,U+2>=2*E,T>=1,L>=1,E>=2,L+T+1=D,K+S=C,J+R=B,I+Q=A,N+1=M,E=A1+1,N+1=X,E=F+1,W=1,P=1,B1=1,Z=1,Y=1,H=1] 
* CE 386: evaluate(A,B,C,D,E,F,G,H) = 6+ evaluate(I,J,K,L,M,N,O,P)+ evaluate(Q,R,S,T,E,U,V,W)+ plus(X,N,O,Y,E,U,V,Z,E,F,G,A1):10
     [K+S>=0,J+R>=0,I+Q>=0,U>=F,N>=F+1,G>=E,V>=E,O>=N,F+2>=2*E,T>=1,L>=1,E>=2,L+T+1=D,K+S=C,J+R=B,I+Q=A,N+1=M,N+1=X,W=1,P=1,A1=1,Z=1,Y=1,H=1] 
* CE 387: evaluate(A,B,C,D,E,F,G,H) = 6+ evaluate(I,J,K,L,E,M,N,O)+ evaluate(P,Q,R,S,T,U,V,W)+ plus(E,M,N,X,Y,U,V,Z,E,A1,G,B1):11
     [K+R>=0,J+Q>=0,I+P>=0,G+1>=E,U+1>=E,N>=E,V>=U,M+2>=2*E,S>=1,L>=1,E>=2,L+S+1=D,K+R=C,J+Q=B,I+P=A,U+1=T,E=A1+1,U+1=Y,E=F+1,W=1,O=1,B1=1,Z=1,X=1,H=1] 
* CE 388: evaluate(A,B,C,D,E,F,G,H) = 6+ evaluate(I,J,K,L,E,M,N,O)+ evaluate(P,Q,R,S,T,U,V,W)+ plus(E,M,N,X,Y,U,V,Z,E,F,G,A1):12
     [K+R>=0,J+Q>=0,I+P>=0,U>=F,M>=F,G>=E,N>=E,V>=U,F+2>=2*E,S>=1,L>=1,E>=2,L+S+1=D,K+R=C,J+Q=B,I+P=A,U+1=T,U+1=Y,W=1,O=1,A1=1,Z=1,X=1,H=1] 
* CE 389: evaluate(A,B,C,D,E,F,G,H) = 6+ evaluate(I,J,K,L,M,N,O,P)+ evaluate(Q,R,S,T,U,F,V,W)+ plus(M,N,O,X,Y,F,V,Z,A1,F,G,B1):13
     [K+S>=0,J+R>=0,I+Q>=0,G>=F,V>=F,M>=F+2,O>=M,N+2>=2*M,T>=1,L>=1,F>=1,L+T+1=D,K+S=C,J+R=B,I+Q=A,F+1=U,F+1=A1,F+1=Y,F+1=E,W=1,P=1,B1=1,Z=1,X=1,H=1] 
* CE 390: evaluate(A,B,C,D,E,F,G,H) = 6+ evaluate(I,J,K,L,E,M,N,O)+ evaluate(P,Q,R,S,T,U,V,W)+ plus(E,M,N,X,T,U,V,Y,E,Z,G,A1):14
     [K+R>=0,J+Q>=0,I+P>=0,G+1>=E,T>=E,N>=E,V>=T,M+2>=2*E,U+2>=2*T,S>=1,L>=1,E>=2,L+S+1=D,K+R=C,J+Q=B,I+P=A,E=Z+1,E=F+1,W=1,O=1,A1=1,Y=1,X=1,H=1] 
* CE 391: evaluate(A,B,C,D,E,F,G,H) = 6+ evaluate(I,J,K,L,E,M,N,O)+ evaluate(P,Q,R,S,T,U,V,W)+ plus(E,M,N,X,T,U,V,Y,E,F,G,Z):15
     [K+R>=0,J+Q>=0,I+P>=0,U>=F,M>=F,G>=E,T>=E,N>=E,V>=T,F+2>=2*E,U+2>=2*T,S>=1,L>=1,E>=2,L+S+1=D,K+R=C,J+Q=B,I+P=A,W=1,O=1,Z=1,Y=1,X=1,H=1] 
* CE 392: evaluate(A,B,C,D,E,F,G,H) = 6+ evaluate(I,J,K,L,M,N,O,P)+ evaluate(Q,R,S,T,E,U,V,W)+ plus(M,N,O,X,E,U,V,Y,E,Z,G,A1):16
     [K+S>=0,J+R>=0,I+Q>=0,G+1>=E,V>=E,M>=E+1,O>=M,U+2>=2*E,N+2>=2*M,T>=1,L>=1,E>=2,L+T+1=D,K+S=C,J+R=B,I+Q=A,E=Z+1,E=F+1,W=1,P=1,A1=1,Y=1,X=1,H=1] 
* CE 393: evaluate(A,B,C,D,E,F,G,H) = 6+ evaluate(I,J,K,L,M,N,O,P)+ evaluate(Q,R,S,T,E,U,V,W)+ plus(M,N,O,X,E,U,V,Y,E,F,G,Z):17
     [K+S>=0,J+R>=0,I+Q>=0,U>=F,N>=F+1,G>=E,V>=E,M>=E+1,O>=M,F+2>=2*E,N+2>=2*M,T>=1,L>=1,E>=2,L+T+1=D,K+S=C,J+R=B,I+Q=A,W=1,P=1,Z=1,Y=1,X=1,H=1] 

### Cost equations --> "Loop" of evaluate/8 
* CEs [393] --> Loop 254 
* CEs [386] --> Loop 255 
* CEs [375,391] --> Loop 256 
* CEs [373,388] --> Loop 257 
* CEs [371] --> Loop 258 
* CEs [369] --> Loop 259 
* CEs [392] --> Loop 260 
* CEs [385] --> Loop 261 
* CEs [374,390] --> Loop 262 
* CEs [372,387] --> Loop 263 
* CEs [389] --> Loop 264 
* CEs [383] --> Loop 265 
* CEs [370,384] --> Loop 266 
* CEs [368,382] --> Loop 267 
* CEs [367,380,381] --> Loop 268 
* CEs [379] --> Loop 269 
* CEs [366,376,377,378] --> Loop 270 
* CEs [365] --> Loop 271 
* CEs [362] --> Loop 272 
* CEs [363,364] --> Loop 273 
* CEs [361] --> Loop 274 

#### Loops of evaluate/8 
* Loop 254: evaluate(A,B,C,D,E,F,G,H)->  evaluate(A',B',C',D',E',F',G',H')  evaluate(A'2,B'2,C'2,D'2,E,E'2,F'2,G'2)
                  [G'>=E',D>=D'+2,E'2>=F,F'>=F+1,F'2>=E,E'>=E+1,G>=E,F'+2>=2*E',F+2>=2*E,D'>=1,E>=2,C>=0,B>=0,A>=0,C=C'+C'2,B=B'+B'2,A=A'+A'2,D'+D'2+1=D,G'2=1,H'=1,H=1] 
* Loop 255: evaluate(A,B,C,D,E,F,G,H)->  evaluate(A',B',C',D',E',F',G',H')  evaluate(A'2,B'2,C'2,D'2,E,E'2,F'2,G'2)
                  [G'+1>=E',D>=D'+2,E'2>=F,E'>=F+2,F'2>=E,G>=E,F+2>=2*E,D'>=1,E>=2,C>=0,B>=0,A>=0,C=C'+C'2,B=B'+B'2,A=A'+A'2,D'+D'2+1=D,E'=F'+1,G'2=1,H'=1,H=1] 
* Loop 256: evaluate(A,B,C,D,E,F,G,H)->  evaluate(A',B',C',D',E,E',F',G')  evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)
                  [G'2>=E'2,D>=D'+2,F'>=E,G>=E,F'2+2>=2*E'2,E'+2>=2*E,F+2>=2*E,E'2>=2,D'>=1,E>=2,C>=0,B>=0,A>=0,C=C'+C'2,B=B'+B'2,A=A'+A'2,D'+D'2+1=D,H'2=1,G'=1,H=1] 
* Loop 257: evaluate(A,B,C,D,E,F,G,H)->  evaluate(A',B',C',D',E,E',F',G')  evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)
                  [G'2+1>=E'2,D>=D'+2,F'>=E,G>=E,E'+2>=2*E,F+2>=2*E,E'2>=2,D'>=1,E>=2,C>=0,B>=0,A>=0,C=C'+C'2,B=B'+B'2,A=A'+A'2,D'+D'2+1=D,E'2=F'2+1,H'2=1,G'=1,H=1] 
* Loop 258: evaluate(A,B,C,D,E,F,G,H)->  evaluate(A',B',C',D',E,E',F',G')  evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)
                  [G'2>=E'2,D>=D'+2,F'>=E,G>=E,F'2+2>=2*E'2,F+2>=2*E,E'2>=2,D'>=1,E>=2,C>=0,B>=0,A>=0,C=C'+C'2,B=B'+B'2,A=A'+A'2,D'+D'2+1=D,E=E'+1,H'2=1,G'=1,H=1] 
* Loop 259: evaluate(A,B,C,D,E,F,G,H)->  evaluate(A',B',C',D',E,E',F',G')  evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)
                  [G'2+1>=E'2,D>=D'+2,F'>=E,G>=E,F+2>=2*E,E'2>=2,D'>=1,E>=2,C>=0,B>=0,A>=0,C=C'+C'2,B=B'+B'2,A=A'+A'2,D'+D'2+1=D,E'2=F'2+1,E=E'+1,H'2=1,G'=1,H=1] 
* Loop 260: evaluate(A,B,C,D,E,F,G,H)->  evaluate(A',B',C',D',E',F',G',H')  evaluate(A'2,B'2,C'2,D'2,E,E'2,F'2,G'2)
                  [G'>=E',D>=D'+2,F'2>=E,E'>=E+1,G+1>=E,F'+2>=2*E',E'2+2>=2*E,D'>=1,E>=2,C>=0,B>=0,A>=0,C=C'+C'2,B=B'+B'2,A=A'+A'2,D'+D'2+1=D,E=F+1,G'2=1,H'=1,H=1] 
* Loop 261: evaluate(A,B,C,D,E,F,G,H)->  evaluate(A',B',C',D',E',F',G',H')  evaluate(A'2,B'2,C'2,D'2,E,E'2,F'2,G'2)
                  [G'+1>=E',D>=D'+2,F'2>=E,E'>=E+1,G+1>=E,E'2+2>=2*E,D'>=1,E>=2,C>=0,B>=0,A>=0,C=C'+C'2,B=B'+B'2,A=A'+A'2,D'+D'2+1=D,E'=F'+1,E=F+1,G'2=1,H'=1,H=1] 
* Loop 262: evaluate(A,B,C,D,E,F,G,H)->  evaluate(A',B',C',D',E,E',F',G')  evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)
                  [G'2>=E'2,D>=D'+2,F'>=E,G+1>=E,F'2+2>=2*E'2,E'+2>=2*E,E'2>=2,D'>=1,E>=2,C>=0,B>=0,A>=0,C=C'+C'2,B=B'+B'2,A=A'+A'2,D'+D'2+1=D,E=F+1,H'2=1,G'=1,H=1] 
* Loop 263: evaluate(A,B,C,D,E,F,G,H)->  evaluate(A',B',C',D',E,E',F',G')  evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)
                  [G'2+1>=E'2,D>=D'+2,F'>=E,G+1>=E,E'+2>=2*E,E'2>=2,D'>=1,E>=2,C>=0,B>=0,A>=0,C=C'+C'2,B=B'+B'2,A=A'+A'2,D'+D'2+1=D,E'2=F'2+1,E=F+1,H'2=1,G'=1,H=1] 
* Loop 264: evaluate(A,B,C,D,E,F,G,H)->  evaluate(A',B',C',D',E',F',G',H')  evaluate(A'2,B'2,C'2,D'2,E,E'2,F'2,G'2)
                  [G'>=E',D>=D'+2,F'2+1>=E,E'>=E+1,G+1>=E,F'+2>=2*E',D'>=1,E>=2,C>=0,B>=0,A>=0,C=C'+C'2,B=B'+B'2,A=A'+A'2,D'+D'2+1=D,E=E'2+1,E=F+1,G'2=1,H'=1,H=1] 
* Loop 265: evaluate(A,B,C,D,E,F,G,H)->  evaluate(A',B',C',D',E',F',G',H')  evaluate(A'2,B'2,C'2,D'2,E,E'2,F'2,G'2)
                  [G'+1>=E',D>=D'+2,F'2+1>=E,E'>=E+1,G+1>=E,D'>=1,E>=2,C>=0,B>=0,A>=0,C=C'+C'2,B=B'+B'2,A=A'+A'2,D'+D'2+1=D,E=E'2+1,E'=F'+1,E=F+1,G'2=1,H'=1,H=1] 
* Loop 266: evaluate(A,B,C,D,E,F,G,H)->  evaluate(A',B',C',D',E,E',F',G')  evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)
                  [G'2>=E'2,D>=D'+2,F'+1>=E,G+1>=E,F'2+2>=2*E'2,E'2>=2,D'>=1,E>=2,C>=0,B>=0,A>=0,C=C'+C'2,B=B'+B'2,A=A'+A'2,D'+D'2+1=D,E=E'+1,E=F+1,H'2=1,G'=1,H=1] 
* Loop 267: evaluate(A,B,C,D,E,F,G,H)->  evaluate(A',B',C',D',E,E',F',G')  evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)
                  [G'2+1>=E'2,D>=D'+2,F'+1>=E,G+1>=E,E'2>=2,D'>=1,E>=2,C>=0,B>=0,A>=0,C=C'+C'2,B=B'+B'2,A=A'+A'2,D'+D'2+1=D,E'2=F'2+1,E=E'+1,E=F+1,H'2=1,G'=1,H=1] 
* Loop 268: evaluate(A,B,C,D,E,F,G,H)->  evaluate(A',B',C',D',E',F',G',H')  evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)
                  [G'2+1>=E'2,G'>=E',D>=D'+2,F'+2>=2*E',E'2>=2,E'>=2,D'>=1,G>=0,C>=0,B>=0,A>=0,C=C'+C'2,B=B'+B'2,A=A'+A'2,D'+D'2+1=D,E'2=F'2+1,H'2=1,H'=1,H=1,F=0,E=1] 
* Loop 269: evaluate(A,B,C,D,E,F,G,H)->  evaluate(A',B',C',D',E',F',G',H')  evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)
                  [G'2>=E'2,E'>=E'2+1,G'+1>=E',D>=D'+2,F'2+2>=2*E'2,E'2>=2,D'>=1,G>=0,C>=0,B>=0,A>=0,C=C'+C'2,B=B'+B'2,A=A'+A'2,D'+D'2+1=D,E'=F'+1,H'2=1,H'=1,H=1,F=0,E=1] 
* Loop 270: evaluate(A,B,C,D,E,F,G,H)->  evaluate(A',B',C',D',E',F',G',H')  evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)
                  [F'2+1>=E'2,F'+1>=E',D>=D'+2,G'2>=0,E'2>=2,G'>=0,E'>=2,D'>=1,G>=0,C>=0,B>=0,A>=0,C=C'+C'2,B=B'+B'2,A=A'+A'2,D'+D'2+1=D,H'2=1,H'=1,H=1,F=0,E=1] 
* Loop 271: evaluate(A,B,C,D,A,B,C,E) [C>=A,B+2>=2*A,A>=2,E=1,D=1] 
* Loop 272: evaluate(A,B,C,D,A,E,C,F) [C+1>=A,A>=2,A=E+1,A=B+1,F=1,D=1] 
* Loop 273: evaluate(A,B,C,D,E,F,G,H) [B+1>=A,G>=0,C>=0,A>=2,H=1,F=0,E=1,D=1] 
* Loop 274: evaluate(A,B,C,D,E,F,C,G) [C>=0,G=1,F=0,E=1,D=1,B=0,A=1] 

### Ranking functions of CR evaluate(A,B,C,D,E,F,G,H) 
* RF of phase [254,255,256,257,258,259,260,261,262,263,264,265,266,267]: [D/2-1]

#### Partial ranking functions of CR evaluate(A,B,C,D,E,F,G,H) 
* Partial RF of phase [254,255,256,257,258,259,260,261,262,263,264,265,266,267]:
  - RF of loop [254:1,254:2,255:1,255:2,256:1,256:2,257:1,257:2,258:1,258:2,259:1,259:2,260:1,260:2,261:1,261:2,262:1,262:2,263:1,263:2,264:1,264:2,265:1,265:2,266:1,266:2,267:1,267:2]:
    D/2-1

Discarded unfeasible chain [multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[],[272],[271]])]...(Non-terminating chain proved terminating)
Remaining chain: [multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])]
Discarded unfeasible chain [multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[],[272],[271]])],[272],[271]])](Non-terminating chain proved terminating)
Remaining chain: [multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]
Discarded unfeasible chain [multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[],[272],[271]])],[272],[271]])](Non-terminating chain proved terminating)
Remaining chain: [multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]
Discarded unfeasible chain [multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[],[272],[271]])],[272],[271]])](Non-terminating chain proved terminating)
Remaining chain: [multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]

### Resulting Chains:evaluate(A,B,C,D,E,F,G,H) 
* [274]
* [273]
* [272]
* [271]
* [multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])]
* [multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]
* [multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]
* [multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]


### Merging Chains  evaluate/8 into  External patterns of execution 
* [[274]] --> 1 
* [[273]] --> 2 
* [[272]] --> 3 
* [[271]] --> 4 
* [[multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])],[multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])],[multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]] --> 5 
* [[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])]] --> 6 


### Specialization of cost equations get_elemL/6 
* CE 10 is refined into CE [394] 
* CE 9 is refined into CE [395] 


#### Refined cost equations get_elemL/6 
* CE 394: get_elemL(A,B,C,D,E,F) = 5
     [C>=F,B>=E,F>=0,E>=1,A>=2,D=0] 
* CE 395: get_elemL(A,B,C,D,E,F) = 8+ get_elemL(G,H,I,J,E,F)
     [C>=I,B>=H+1,J>=0,I>=0,H>=0,G>=1,F>=0,E>=0,J+1=D,G+1=A] 

### Cost equations --> "Loop" of get_elemL/6 
* CEs [395] --> Loop 275 
* CEs [394] --> Loop 276 

#### Loops of get_elemL/6 
* Loop 275: get_elemL(A,B,C,D,E,F)->  get_elemL(A',B',C',D',E,F)
                  [C>=C',B>=B'+1,D'>=0,C'>=0,B'>=0,A'>=1,F>=0,E>=0,D'+1=D,A'+1=A] 
* Loop 276: get_elemL(A,B,C,D,E,F) [C>=F,B>=E,F>=0,E>=1,A>=2,D=0] 

### Ranking functions of CR get_elemL(A,B,C,D,E,F) 
* RF of phase [275]: [A-1,B,D]

#### Partial ranking functions of CR get_elemL(A,B,C,D,E,F) 
* Partial RF of phase [275]:
  - RF of loop [275:1]:
    A-1
    B
    D

Discarded unfeasible chain [[275]]...(Non-terminating chain proved terminating)

### Resulting Chains:get_elemL(A,B,C,D,E,F) 
* [[275],276]
* [276]


### Merging Chains  get_elemL/6 into  External patterns of execution 
* [[276]] --> 1 
* [[276,[275]]] --> 2 


### Specialization of cost equations get_elem/4 
* CE 92 is refined into CE [396] 
* CE 91 is refined into CE [397] 


#### Refined cost equations get_elem/4 
* CE 396: get_elem(A,B,C,D) = 5
     [B>=D,D>=0,A>=2,C=0] 
* CE 397: get_elem(A,B,C,D) = 8+ get_elem(E,F,G,D)
     [B>=F,G>=0,F>=0,E>=1,D>=0,G+1=C,E+1=A] 

### Cost equations --> "Loop" of get_elem/4 
* CEs [397] --> Loop 277 
* CEs [396] --> Loop 278 

#### Loops of get_elem/4 
* Loop 277: get_elem(A,B,C,D)->  get_elem(A',B',C',D)
                  [B>=B',C'>=0,B'>=0,A'>=1,D>=0,C'+1=C,A'+1=A] 
* Loop 278: get_elem(A,B,C,D) [B>=D,D>=0,A>=2,C=0] 

### Ranking functions of CR get_elem(A,B,C,D) 
* RF of phase [277]: [A-1,C]

#### Partial ranking functions of CR get_elem(A,B,C,D) 
* Partial RF of phase [277]:
  - RF of loop [277:1]:
    A-1
    C

Discarded unfeasible chain [[277]]...(Non-terminating chain proved terminating)

### Resulting Chains:get_elem(A,B,C,D) 
* [[277],278]
* [278]


### Merging Chains  get_elem/4 into  External patterns of execution 
* [[278]] --> 1 
* [[278,[277]]] --> 2 


### Specialization of cost equations case_10/7 
* CE 76 is refined into CE [398,399,400,401] 


#### Refined cost equations case_10/7 
* CE 398: case_10(A,B,C,D,E,F,G) = 3+ get_elemL(A,B,H,I,J,K):1+ get_elem(J,K,L,G):1
     [K>=G,H>=K,B>=J,G>=0,J>=2,A>=2,C>=0,L=0,I=0,F=0,E=0,D=1] 
* CE 399: case_10(A,B,C,D,E,F,G) = 3+ get_elemL(A,B,H,I,J,K):1+ get_elem(J,K,F,G):2
     [K>=G,J>=F+2,H>=K,B>=J,G>=0,F>=1,A>=2,C>=0,I=0,E=0,D=1] 
* CE 400: case_10(A,B,C,D,E,F,G) = 3+ get_elemL(A,B,H,E,I,J):2+ get_elem(I,J,K,G):1
     [B>=E+I,J>=G,H>=J,A>=E+2,G>=0,I>=2,E>=1,C>=0,K=0,F=0,D=1] 
* CE 401: case_10(A,B,C,D,E,F,G) = 3+ get_elemL(A,B,H,E,I,J):2+ get_elem(I,J,F,G):2
     [B>=E+I,J>=G,I>=F+2,H>=J,A>=E+2,G>=0,F>=1,E>=1,C>=0,D=1] 

### Cost equations --> "Loop" of case_10/7 
* CEs [401] --> Loop 279 
* CEs [400] --> Loop 280 
* CEs [399] --> Loop 281 
* CEs [398] --> Loop 282 

#### Loops of case_10/7 
* Loop 279: case_10(A,B,C,D,E,F,G) [B>=E+F+2,A>=E+2,G>=0,F>=1,E>=1,C>=0,D=1] 
* Loop 280: case_10(A,B,C,D,E,F,G) [B>=E+2,A>=E+2,G>=0,E>=1,C>=0,F=0,D=1] 
* Loop 281: case_10(A,B,C,D,E,F,G) [B>=F+2,G>=0,F>=1,C>=0,A>=2,E=0,D=1] 
* Loop 282: case_10(A,B,C,D,E,F,G) [G>=0,C>=0,B>=2,A>=2,F=0,E=0,D=1] 

### Ranking functions of CR case_10(A,B,C,D,E,F,G) 

#### Partial ranking functions of CR case_10(A,B,C,D,E,F,G) 


### Resulting Chains:case_10(A,B,C,D,E,F,G) 
* [282]
* [281]
* [280]
* [279]


### Merging Chains  case_10/7 into  External patterns of execution 
* [[282]] --> 1 
* [[281]] --> 2 
* [[280]] --> 3 
* [[279]] --> 4 


### Specialization of cost equations get_elemMat/7 
* CE 11 is refined into CE [402,403,404,405] 


#### Refined cost equations get_elemMat/7 
* CE 402: get_elemMat(A,B,C,D,E,F,G) = 1+ case_10(A,B,C,H,I,J,G):1
     [G>=0,C>=0,B>=2,A>=2,J=0,I=0,H=1,F=0,E=0,D=1] 
* CE 403: get_elemMat(A,B,C,D,E,F,G) = 1+ case_10(A,B,C,H,I,F,G):2
     [B>=F+2,G>=0,F>=1,C>=0,A>=2,I=0,H=1,E=0,D=1] 
* CE 404: get_elemMat(A,B,C,D,E,F,G) = 1+ case_10(A,B,C,H,E,I,G):3
     [B>=E+2,A>=E+2,G>=0,E>=1,C>=0,I=0,H=1,F=0,D=1] 
* CE 405: get_elemMat(A,B,C,D,E,F,G) = 1+ case_10(A,B,C,H,E,F,G):4
     [B>=E+F+2,A>=E+2,G>=0,F>=1,E>=1,C>=0,H=1,D=1] 

### Cost equations --> "Loop" of get_elemMat/7 
* CEs [405] --> Loop 283 
* CEs [404] --> Loop 284 
* CEs [403] --> Loop 285 
* CEs [402] --> Loop 286 

#### Loops of get_elemMat/7 
* Loop 283: get_elemMat(A,B,C,D,E,F,G) [B>=E+F+2,A>=E+2,G>=0,F>=1,E>=1,C>=0,D=1] 
* Loop 284: get_elemMat(A,B,C,D,E,F,G) [B>=E+2,A>=E+2,G>=0,E>=1,C>=0,F=0,D=1] 
* Loop 285: get_elemMat(A,B,C,D,E,F,G) [B>=F+2,G>=0,F>=1,C>=0,A>=2,E=0,D=1] 
* Loop 286: get_elemMat(A,B,C,D,E,F,G) [G>=0,C>=0,B>=2,A>=2,F=0,E=0,D=1] 

### Ranking functions of CR get_elemMat(A,B,C,D,E,F,G) 

#### Partial ranking functions of CR get_elemMat(A,B,C,D,E,F,G) 


### Resulting Chains:get_elemMat(A,B,C,D,E,F,G) 
* [286]
* [285]
* [284]
* [283]


### Merging Chains  get_elemMat/7 into  External patterns of execution 
* [[286]] --> 1 
* [[285]] --> 2 
* [[284]] --> 3 
* [[283]] --> 4 


### Specialization of cost equations prod/5 
* CE 44 is refined into CE [406] 
* CE 43 is refined into CE [407] 
* CE 42 is refined into CE [408] 


#### Refined cost equations prod/5 
* CE 406: prod(A,B,C,D,E) = 9+ prod(F,G,H,I,J)
     [B>=G,H>=1,G>=0,F>=1,E>=0,D>=0,H+1=C,F+1=A] 
* CE 407: prod(A,B,C,D,E) = 6
     [D>=0,B>=0,A>=2,E=0,C=1] 
* CE 408: prod(A,B,C,D,E) = 3
     [D>=0,C>=0,B>=0,E=0,A=1] 

### Cost equations --> "Loop" of prod/5 
* CEs [407] --> Loop 287 
* CEs [408] --> Loop 288 
* CEs [406] --> Loop 289 

#### Loops of prod/5 
* Loop 287: prod(A,B,C,D,E) [D>=0,B>=0,A>=2,E=0,C=1] 
* Loop 288: prod(A,B,C,D,E) [D>=0,C>=0,B>=0,E=0,A=1] 
* Loop 289: prod(A,B,C,D,E)->  prod(A',B',C',D',E')
                  [B>=B',C'>=1,B'>=0,A'>=1,E>=0,D>=0,C'+1=C,A'+1=A] 

### Ranking functions of CR prod(A,B,C,D,E) 
* RF of phase [289]: [A-1,C-1]

#### Partial ranking functions of CR prod(A,B,C,D,E) 
* Partial RF of phase [289]:
  - RF of loop [289:1]:
    A-1
    C-1

Discarded unfeasible chain [[289]]...(Non-terminating chain proved terminating)

### Resulting Chains:prod(A,B,C,D,E) 
* [[289],288]
* [[289],287]
* [288]
* [287]


### Merging Chains  prod/5 into  External patterns of execution 
* [[288]] --> 1 
* [[287]] --> 2 
* [[288,[289]]] --> 3 
* [[287,[289]]] --> 4 


### Specialization of cost equations prod_mat/7 
* CE 46 is refined into CE [409] 
* CE 45 is refined into CE [410,411,412,413] 


#### Refined cost equations prod_mat/7 
* CE 409: prod_mat(A,B,C,D,E,F,G) = 3
     [G>=0,E>=0,B>=0,A>=0,F=1,D=0,C=1] 
* CE 410: prod_mat(A,B,C,D,E,F,G) = 6+ prod(H,B,I,J,K):1+ prod_mat(L,B,M,N,O,P,G)
     [J+O>=0,I+N>=0,G>=0,P>=1,M>=1,J>=0,I>=1,B>=0,J+O=E,I+N=D,P+1=F,M+1=C,L=1,K=0,H=1,A=1] 
* CE 411: prod_mat(A,B,C,D,E,F,G) = 6+ prod(A,B,H,I,J):2+ prod_mat(A,B,K,L,M,N,G)
     [I+M>=0,G>=0,N>=1,L+1>=0,K>=1,I>=0,B>=0,A>=2,I+M=E,N+1=F,L+1=D,K+1=C,J=0,H=1] 
* CE 412: prod_mat(A,B,C,D,E,F,G) = 6+ prod(A,B,H,I,J):3+ prod_mat(A,B,K,L,M,N,O)
     [J+O>=0,I+M>=0,H+L>=0,H>=A,N>=1,K>=1,J>=0,I>=0,B>=0,A>=2,J+O=G,I+M=E,H+L=D,N+1=F,K+1=C] 
* CE 413: prod_mat(A,B,C,D,E,F,G) = 6+ prod(A,B,H,I,J):4+ prod_mat(A,B,K,L,M,N,O)
     [J+O>=0,I+M>=0,H+L>=0,A>=H+1,N>=1,K>=1,J>=0,I>=0,H>=2,B>=0,J+O=G,I+M=E,H+L=D,N+1=F,K+1=C] 

### Cost equations --> "Loop" of prod_mat/7 
* CEs [413] --> Loop 290 
* CEs [412] --> Loop 291 
* CEs [411] --> Loop 292 
* CEs [410] --> Loop 293 
* CEs [409] --> Loop 294 

#### Loops of prod_mat/7 
* Loop 290: prod_mat(A,B,C,D,E,F,G)->  prod_mat(A,B,A',B',C',D',E')
                  [A+B'>=D+1,G>=E',E>=C',D>=B'+2,G>=0,F>=2,E>=0,D>=0,C>=2,B>=0,F=D'+1,C=A'+1] 
* Loop 291: prod_mat(A,B,C,D,E,F,G)->  prod_mat(A,B,A',B',C',D',E')
                  [D>=A+B',G>=E',E>=C',G>=0,F>=2,E>=0,D>=0,C>=2,B>=0,A>=2,F=D'+1,C=A'+1] 
* Loop 292: prod_mat(A,B,C,D,E,F,G)->  prod_mat(A,B,A',B',C',D',G)
                  [E>=C',G>=0,F>=2,E>=0,D>=0,C>=2,B>=0,A>=2,F=D'+1,D=B'+1,C=A'+1] 
* Loop 293: prod_mat(A,B,C,D,E,F,G)->  prod_mat(A',B,B',C',D',E',G)
                  [E>=D',D>=C'+1,G>=0,F>=2,E>=0,D>=0,C>=2,B>=0,F=E'+1,C=B'+1,A'=1,A=1] 
* Loop 294: prod_mat(A,B,C,D,E,F,G) [G>=0,E>=0,B>=0,A>=0,F=1,D=0,C=1] 

### Ranking functions of CR prod_mat(A,B,C,D,E,F,G) 
* RF of phase [290,291,292]: [C-1,D+1]
* RF of phase [293]: [C-1,D+1]

#### Partial ranking functions of CR prod_mat(A,B,C,D,E,F,G) 
* Partial RF of phase [290,291,292]:
  - RF of loop [290:1,291:1]:
    D/2+1/2
  - RF of loop [290:1,291:1,292:1]:
    C-1
  - RF of loop [292:1]:
    D+1
* Partial RF of phase [293]:
  - RF of loop [293:1]:
    C-1
    D+1

Discarded unfeasible chain [[293]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [[290,291,292]](Non-terminating chain proved terminating)

### Resulting Chains:prod_mat(A,B,C,D,E,F,G) 
* [[293],294]
* [[290,291,292],294]
* [294]


### Merging Chains  prod_mat/7 into  External patterns of execution 
* [[294,[293]]] --> 1 
* [[294]] --> 2 
* [[294,[290,291,292]]] --> 3 


### Specialization of cost equations transpose_helper/9 
* CE 28 is refined into CE [414] 
* CE 27 is refined into CE [415,416,417,418] 


#### Refined cost equations transpose_helper/9 
* CE 414: transpose_helper(A,B,C,D,E,F,D,E,F) = 2
     [F>=0,E>=0,D>=0,C>=0,B=0,A=1] 
* CE 415: transpose_helper(A,B,C,D,E,F,G,H,I) = 5+ append_row(J,K,F,L,M,L,N,O):1+ transpose_helper(P,Q,R,L,S,O,G,H,I)
     [L+Q>=0,M+R>=0,P>=1,O>=0,L>=2,M>=0,F>=0,I>=0,H>=0,G>=0,M+R=C,L+Q=B,2*L=S+2,2*L=N+2,P+1=A,K=0,J=1,E=0,D=1] 
* CE 416: transpose_helper(A,B,C,D,E,F,G,H,I) = 5+ append_row(D,E,F,J,K,D,E,F):2+ transpose_helper(L,M,N,D,E,F,G,H,I)
     [K+N>=0,M+1>=0,L>=1,F>=0,E>=0,D>=0,K>=0,I>=0,H>=0,G>=0,K+N=C,M+1=B,L+1=A,J=1] 
* CE 417: transpose_helper(A,B,C,D,E,F,G,H,I) = 5+ append_row(D,E,F,J,K,D,L,M):3+ transpose_helper(N,O,P,D,L,M,G,H,I)
     [D+E>=L+1,L+O+1>=E,K+P>=0,2*E>=L,L>=E+1,N>=1,M>=0,K>=0,F>=0,I>=0,H>=0,G>=0,L+O+1=B+E,L+1=E+J,K+P=C,N+1=A] 
* CE 418: transpose_helper(A,B,C,D,E,F,G,H,I) = 5+ append_row(D,E,F,J,K,J,L,M):4+ transpose_helper(N,O,P,J,Q,M,G,H,I)
     [J+O>=0,K+P>=0,J>=D+1,E+1>=D,N>=1,M>=0,K>=0,F>=0,D>=2,I>=0,H>=0,G>=0,E+2*J=D+Q+1,E+2*J=D+L+1,K+P=C,J+O=B,N+1=A] 

### Cost equations --> "Loop" of transpose_helper/9 
* CEs [418] --> Loop 295 
* CEs [417] --> Loop 296 
* CEs [416] --> Loop 297 
* CEs [415] --> Loop 298 
* CEs [414] --> Loop 299 

#### Loops of transpose_helper/9 
* Loop 295: transpose_helper(A,B,C,D,E,F,G,H,I)->  transpose_helper(A',B',C',D',E',F',G,H,I)
                  [B>=D+B'+1,C>=C',E+1>=D,F'>=0,I>=0,H>=0,G>=0,F>=0,D>=2,C>=0,B>=0,A>=2,D+E'+2*B'+1=2*B+E,B=B'+D',A=A'+1] 
* Loop 296: transpose_helper(A,B,C,D,E,F,G,H,I)->  transpose_helper(A',B',C',D,D',E',G,H,I)
                  [E+B'+1>=B,D+B'>=B,C>=C',B>=B'+2,E'>=0,I>=0,H>=0,G>=0,F>=0,C>=0,B>=0,A>=2,B+E=B'+D'+1,A=A'+1] 
* Loop 297: transpose_helper(A,B,C,D,E,F,G,H,I)->  transpose_helper(A',B',C',D,E,F,G,H,I)
                  [C>=C',I>=0,H>=0,G>=0,F>=0,E>=0,D>=0,C>=0,B>=0,A>=2,B=B'+1,A=A'+1] 
* Loop 298: transpose_helper(A,B,C,D,E,F,G,H,I)->  transpose_helper(A',B',C',D',E',F',G,H,I)
                  [C>=C',B>=B'+2,F'>=0,I>=0,H>=0,G>=0,F>=0,C>=0,B>=0,A>=2,B=B'+D',2*B=2*B'+E'+2,A=A'+1,E=0,D=1] 
* Loop 299: transpose_helper(A,B,C,D,E,F,D,E,F) [F>=0,E>=0,D>=0,C>=0,B=0,A=1] 

### Ranking functions of CR transpose_helper(A,B,C,D,E,F,G,H,I) 
* RF of phase [295,296,297,298]: [A-1,B+1,B+D+1,B+E/2+1/2]

#### Partial ranking functions of CR transpose_helper(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [295,296,297,298]:
  - RF of loop [295:1]:
    B-D+E+2
    B/2+D/2-1/2
    B/3+1/3
  - RF of loop [295:1,296:1,297:1,298:1]:
    A-1
  - RF of loop [296:1]:
    B+E depends on loops [295:1,298:1] 
  - RF of loop [296:1,298:1]:
    B/2+1/2
  - RF of loop [297:1]:
    B+1
  - RF of loop [298:1]:
    B+D
    B+E/2+1/2
    -D+2
    -E/2+1/2

Discarded unfeasible chain [[295,296,297,298]]...(Non-terminating chain proved terminating)

### Resulting Chains:transpose_helper(A,B,C,D,E,F,G,H,I) 
* [[295,296,297,298],299]
* [299]


### Merging Chains  transpose_helper/9 into  External patterns of execution 
* [[299]] --> 1 
* [[299,[295,296,297,298]]] --> 2 


### Specialization of cost equations transpose/6 
* CE 29 is refined into CE [419,420] 


#### Refined cost equations transpose/6 
* CE 419: transpose(A,B,C,D,E,F) = 2+ transpose_helper(G,H,C,I,J,F,K,L,F):1
     [F>=0,C>=0,L=0,K=1,J=0,I=1,H=0,G=1,E=0,D=1,B=0,A=1] 
* CE 420: transpose(A,B,C,D,E,F) = 2+ transpose_helper(A,B,C,G,H,I,D,J,F):2
     [B+2>=A+D,F>=0,D>=1,I>=0,C>=0,A>=2,B+D=A+J,B+D=A+E,H=0,G=1] 

### Cost equations --> "Loop" of transpose/6 
* CEs [420] --> Loop 300 
* CEs [419] --> Loop 301 

#### Loops of transpose/6 
* Loop 300: transpose(A,B,C,D,E,F) [B+2>=A+D,F>=0,D>=1,C>=0,A>=2,A+E=B+D] 
* Loop 301: transpose(A,B,C,D,E,F) [F>=0,C>=0,E=0,D=1,B=0,A=1] 

### Ranking functions of CR transpose(A,B,C,D,E,F) 

#### Partial ranking functions of CR transpose(A,B,C,D,E,F) 


### Resulting Chains:transpose(A,B,C,D,E,F) 
* [301]
* [300]


### Merging Chains  transpose/6 into  External patterns of execution 
* [[301]] --> 1 
* [[300]] --> 2 


### Specialization of cost equations mat_mult/9 
* CE 48 is refined into CE [421,422] 
* CE 47 is refined into CE [423,424,425,426] 


#### Refined cost equations mat_mult/9 
* CE 421: mat_mult(A,B,C,D,E,F,G,H,I) = 6+ transpose(J,K,F,L,M,N):1
     [N>=0,F>=0,I>=0,C>=0,M=0,L=1,K=0,J=1,H=0,G=1,E=0,D=1,B=0,A=1] 
* CE 422: mat_mult(A,B,C,D,E,F,G,H,I) = 6+ transpose(D,E,F,J,K,L):2
     [E+2>=D+J,L>=0,J>=1,F>=0,D>=2,I>=0,C>=0,E+J=D+K,H=0,G=1,B=0,A=1] 
* CE 423: mat_mult(A,B,C,D,E,F,G,H,I) = 9+ transpose(J,K,F,L,M,N):1+ prod_mat(O,P,Q,R,N,S,T):2+ mat_mult(U,V,W,X,Y,F,Z,A1,B1)
     [T+B1>=0,P+W>=0,O+V>=0,A1+1>=0,Z>=1,U>=1,T>=0,N>=0,P>=0,O>=1,F>=0,T+B1=I,P+W=C,O+V=B,A1+1=H,Z+1=G,U+1=A,Y=0,X=1,S=1,R=0,Q=1,M=0,L=1,K=0,J=1,E=0,D=1] 
* CE 424: mat_mult(A,B,C,D,E,F,G,H,I) = 9+ transpose(J,E,F,K,L,M):2+ prod_mat(N,O,K,L,M,K,P):1+ mat_mult(Q,R,S,T,E,F,U,V,W)
     [E+K>=L+2,P+W>=0,K+V>=0,O+S>=0,L+2>=2*K,U>=1,R+1>=0,Q>=1,P>=0,K>=2,M>=0,O>=0,F>=0,E+K=L+T,E+K=J+L,E+K=D+L,P+W=I,K+V=H,O+S=C,U+1=G,R+1=B,Q+1=A,N=1] 
* CE 425: mat_mult(A,B,C,D,E,F,G,H,I) = 9+ transpose(J,E,F,K,L,M):2+ prod_mat(N,O,P,Q,M,R,S):2+ mat_mult(T,U,V,W,E,F,X,Y,Z)
     [S+Z>=0,O+V>=0,N+U>=0,Y+1>=0,X>=1,T>=1,S>=0,M>=0,O>=0,N>=1,F>=0,E>=1,S+Z=I,O+V=C,N+U=B,E+1=W,E+1=J,Y+1=H,X+1=G,E+1=D,T+1=A,R=1,Q=0,P=1,L=0,K=1] 
* CE 426: mat_mult(A,B,C,D,E,F,G,H,I) = 9+ transpose(J,E,F,K,L,M):2+ prod_mat(N,O,K,L,M,K,P):3+ mat_mult(Q,R,S,T,E,F,U,V,W)
     [E+K>=L+2,P+W>=0,K+V>=0,O+S>=0,N+R>=0,L+2>=2*K,U>=1,Q>=1,P>=0,K>=2,M>=0,O>=0,N>=2,F>=0,E+K=L+T,E+K=J+L,E+K=D+L,P+W=I,K+V=H,O+S=C,N+R=B,U+1=G,Q+1=A] 

### Cost equations --> "Loop" of mat_mult/9 
* CEs [426] --> Loop 302 
* CEs [425] --> Loop 303 
* CEs [424] --> Loop 304 
* CEs [423] --> Loop 305 
* CEs [422] --> Loop 306 
* CEs [421] --> Loop 307 

#### Loops of mat_mult/9 
* Loop 302: mat_mult(A,B,C,D,E,F,G,H,I)->  mat_mult(A',B',C',D,E,F,D',E',F')
                  [E+E'+2>=D+H,I>=F',H>=E'+2,C>=C',B>=B'+2,I>=0,H>=0,G>=2,F>=0,D>=2,C>=0,B>=0,A>=2,G=D'+1,A=A'+1] 
* Loop 303: mat_mult(A,B,C,D,E,F,G,H,I)->  mat_mult(A',B',C',D,D',F,E',F',G')
                  [I>=G',C>=C',B>=B'+1,I>=0,H>=0,G>=2,F>=0,D>=2,C>=0,B>=0,A>=2,H=F'+1,G=E'+1,D=D'+1,A=A'+1,D=E+1] 
* Loop 304: mat_mult(A,B,C,D,E,F,G,H,I)->  mat_mult(A',B',C',D,E,F,D',E',F')
                  [E+E'+2>=D+H,I>=F',H>=E'+2,C>=C',I>=0,H>=0,G>=2,F>=0,D>=2,C>=0,B>=0,A>=2,G=D'+1,B=B'+1,A=A'+1] 
* Loop 305: mat_mult(A,B,C,D,E,F,G,H,I)->  mat_mult(A',B',C',D',E',F,F',G',H')
                  [I>=H',C>=C',B>=B'+1,I>=0,H>=0,G>=2,F>=0,C>=0,B>=0,A>=2,H=G'+1,G=F'+1,A=A'+1,E'=0,D'=1,E=0,D=1] 
* Loop 306: mat_mult(A,B,C,D,E,F,G,H,I) [E+1>=D,I>=0,F>=0,D>=2,C>=0,H=0,G=1,B=0,A=1] 
* Loop 307: mat_mult(A,B,C,D,E,F,G,H,I) [I>=0,F>=0,C>=0,H=0,G=1,E=0,D=1,B=0,A=1] 

### Ranking functions of CR mat_mult(A,B,C,D,E,F,G,H,I) 
* RF of phase [302,304]: [A-1,B+1]
* RF of phase [303]: [A-1,B+1]
* RF of phase [305]: [A-1,B+1]

#### Partial ranking functions of CR mat_mult(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [302,304]:
  - RF of loop [302:1]:
    B/2+1/2
  - RF of loop [302:1,304:1]:
    A-1
  - RF of loop [304:1]:
    B+1
* Partial RF of phase [303]:
  - RF of loop [303:1]:
    A-1
    B+1
* Partial RF of phase [305]:
  - RF of loop [305:1]:
    A-1
    B+1

Discarded unfeasible chain [[305]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [[303]](Non-terminating chain proved terminating)
Discarded unfeasible chain [[302,304]](Non-terminating chain proved terminating)

### Resulting Chains:mat_mult(A,B,C,D,E,F,G,H,I) 
* [[305],307]
* [[303],306]
* [[302,304],306]
* [307]
* [306]


### Merging Chains  mat_mult/9 into  External patterns of execution 
* [[307]] --> 1 
* [[306]] --> 2 
* [[307,[305]]] --> 3 
* [[306,[303]]] --> 4 
* [[306,[302,304]]] --> 5 


### Specialization of cost equations new_transpose_helper/9 
* CE 40 is refined into CE [427] 
* CE 39 is refined into CE [428,429,430,431,432,433] 


#### Refined cost equations new_transpose_helper/9 
* CE 427: new_transpose_helper(A,B,C,D,E,F,D,E,F) = 2
     [F>=0,E>=0,D>=0,C>=0,B=0,A=1] 
* CE 428: new_transpose_helper(A,B,C,D,E,F,G,H,I) = 5+ append_start(J,K,F,L,M,N,O,P):1+ new_transpose_helper(Q,R,S,T,U,P,G,H,I)
     [M+S>=0,R+1>=0,Q>=1,P>=0,M>=0,F>=0,I>=0,H>=0,G>=0,M+S=C,R+1=B,Q+1=A,U=0,T=1,O=0,N=1,L=1,K=0,J=1,E=0,D=1] 
* CE 429: new_transpose_helper(A,B,C,D,E,F,G,H,I) = 5+ append_start(J,K,F,L,M,L,N,O):2+ new_transpose_helper(P,Q,R,L,S,O,G,H,I)
     [L+Q>=0,M+R>=0,P>=1,O>=0,L>=2,M>=0,F>=0,I>=0,H>=0,G>=0,M+R=C,L+Q=B,2*L=S+2,2*L=N+2,P+1=A,K=0,J=1,E=0,D=1] 
* CE 430: new_transpose_helper(A,B,C,D,E,F,G,H,I) = 5+ append_start(D,E,F,J,K,D,E,L):3+ new_transpose_helper(M,N,O,D,E,L,G,H,I)
     [K+O>=0,E+1>=D,N+1>=0,M>=1,L>=0,D>=2,K>=0,F>=0,I>=0,H>=0,G>=0,K+O=C,N+1=B,M+1=A,J=1] 
* CE 431: new_transpose_helper(A,B,C,D,E,F,G,H,I) = 5+ append_start(D,J,F,D,K,D,L,M):4+ new_transpose_helper(N,O,P,D,L,M,G,H,I)
     [K+P>=0,D+O>=0,L+2>=2*D,N>=1,M>=0,K>=0,D>=2,F>=0,I>=0,H>=0,G>=0,D+J=L+1,D+E=L+1,K+P=C,D+O=B,N+1=A] 
* CE 432: new_transpose_helper(A,B,C,D,E,F,G,H,I) = 5+ append_start(D,E,F,J,K,D,L,M):5+ new_transpose_helper(N,O,P,D,L,M,G,H,I)
     [D+E>=L+2,L+O+1>=E,K+P>=0,E+1>=D,L>=E+1,N>=1,M>=0,K>=0,F>=0,I>=0,H>=0,G>=0,L+O+1=B+E,L+1=E+J,K+P=C,N+1=A] 
* CE 433: new_transpose_helper(A,B,C,D,E,F,G,H,I) = 5+ append_start(D,E,F,J,K,J,L,M):6+ new_transpose_helper(N,O,P,J,Q,M,G,H,I)
     [J+O>=0,K+P>=0,J>=D+1,E+1>=D,N>=1,M>=0,K>=0,F>=0,D>=2,I>=0,H>=0,G>=0,E+2*J=D+Q+1,E+2*J=D+L+1,K+P=C,J+O=B,N+1=A] 

### Cost equations --> "Loop" of new_transpose_helper/9 
* CEs [433] --> Loop 308 
* CEs [432] --> Loop 309 
* CEs [431] --> Loop 310 
* CEs [430] --> Loop 311 
* CEs [429] --> Loop 312 
* CEs [428] --> Loop 313 
* CEs [427] --> Loop 314 

#### Loops of new_transpose_helper/9 
* Loop 308: new_transpose_helper(A,B,C,D,E,F,G,H,I)->  new_transpose_helper(A',B',C',D',E',F',G,H,I)
                  [B>=D+B'+1,C>=C',E+1>=D,F'>=0,I>=0,H>=0,G>=0,F>=0,D>=2,C>=0,B>=0,A>=2,D+E'+2*B'+1=2*B+E,B=B'+D',A=A'+1] 
* Loop 309: new_transpose_helper(A,B,C,D,E,F,G,H,I)->  new_transpose_helper(A',B',C',D,D',E',G,H,I)
                  [D+B'>=B+1,C>=C',B>=B'+2,E+1>=D,E'>=0,I>=0,H>=0,G>=0,F>=0,C>=0,B>=0,A>=2,B+E=B'+D'+1,A=A'+1] 
* Loop 310: new_transpose_helper(A,B,C,D,E,F,G,H,I)->  new_transpose_helper(A',B',C',D,D',E',G,H,I)
                  [C>=C',E+1>=D,E'>=0,I>=0,H>=0,G>=0,F>=0,D>=2,C>=0,B>=0,A>=2,D+E=D'+1,B=D+B',A=A'+1] 
* Loop 311: new_transpose_helper(A,B,C,D,E,F,G,H,I)->  new_transpose_helper(A',B',C',D,E,D',G,H,I)
                  [C>=C',E+1>=D,D'>=0,I>=0,H>=0,G>=0,F>=0,D>=2,C>=0,B>=0,A>=2,B=B'+1,A=A'+1] 
* Loop 312: new_transpose_helper(A,B,C,D,E,F,G,H,I)->  new_transpose_helper(A',B',C',D',E',F',G,H,I)
                  [C>=C',B>=B'+2,F'>=0,I>=0,H>=0,G>=0,F>=0,C>=0,B>=0,A>=2,B=B'+D',2*B=2*B'+E'+2,A=A'+1,E=0,D=1] 
* Loop 313: new_transpose_helper(A,B,C,D,E,F,G,H,I)->  new_transpose_helper(A',B',C',D',E',F',G,H,I)
                  [C>=C',F'>=0,I>=0,H>=0,G>=0,F>=0,C>=0,B>=0,A>=2,B=B'+1,A=A'+1,E'=0,D'=1,E=0,D=1] 
* Loop 314: new_transpose_helper(A,B,C,D,E,F,D,E,F) [F>=0,E>=0,D>=0,C>=0,B=0,A=1] 

### Ranking functions of CR new_transpose_helper(A,B,C,D,E,F,G,H,I) 
* RF of phase [308,309,310,311]: [A-1,B+1,B-D+E+2,B+D-1]
* RF of phase [313]: [A-1,B+1]

#### Partial ranking functions of CR new_transpose_helper(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [308,309,310,311]:
  - RF of loop [308:1]:
    B/2+D/2-1/2
    B/3+1/3
  - RF of loop [308:1,309:1,310:1]:
    B-D+E+2
  - RF of loop [308:1,309:1,310:1,311:1]:
    A-1
  - RF of loop [309:1]:
    B+E-1 depends on loops [308:1] 
  - RF of loop [309:1,310:1]:
    B/2+1/2
  - RF of loop [310:1]:
    B+E depends on loops [308:1] 
  - RF of loop [311:1]:
    B+1
* Partial RF of phase [313]:
  - RF of loop [313:1]:
    A-1
    B+1

Discarded unfeasible chain [[313]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [[313],312,[308,309,310,311]](Non-terminating chain proved terminating)
Discarded unfeasible chain [[308,309,310,311]](Non-terminating chain proved terminating)
Discarded unfeasible chain [312,[308,309,310,311]](Non-terminating chain proved terminating)

### Resulting Chains:new_transpose_helper(A,B,C,D,E,F,G,H,I) 
* [[313],314]
* [[313],312,[308,309,310,311],314]
* [[313],312,314]
* [[308,309,310,311],314]
* [314]
* [312,[308,309,310,311],314]
* [312,314]


### Merging Chains  new_transpose_helper/9 into  External patterns of execution 
* [[314]] --> 1 
* [[314,312]] --> 2 
* [[314,[313]]] --> 3 
* [[314,[308,309,310,311],312],[314,312,[313]],[314,[308,309,310,311],312,[313]]] --> 4 
* [[314,[308,309,310,311]]] --> 5 


### Specialization of cost equations new_transpose/6 
* CE 41 is refined into CE [434,435,436,437] 


#### Refined cost equations new_transpose/6 
* CE 434: new_transpose(A,B,C,D,E,F) = 3+ new_transpose_helper(G,H,C,I,J,K,L,M,K):1+ reverse_rows(N,O,K,P,Q,F):1
     [F>=0,K>=0,C>=0,Q=0,P=1,O=0,N=1,M=0,L=1,J=0,I=1,H=0,G=1,E=0,D=1,B=0,A=1] 
* CE 435: new_transpose(A,B,C,B,D,E) = 3+ new_transpose_helper(F,B,C,G,H,I,B,J,K):2+ reverse_rows(B,L,K,B,M,E):2
     [E>=0,B>=2,K>=0,I>=0,C>=0,2*B=M+2,2*B=L+2,2*B=J+2,2*B=D+2,H=0,G=1,F=2,A=2] 
* CE 436: new_transpose(A,B,C,D,E,F) = 3+ new_transpose_helper(G,B,C,H,I,J,K,L,M):3+ reverse_rows(N,O,M,P,Q,F):1
     [F>=0,M>=0,J>=0,C>=0,B>=1,B+1=G,B+1=A,Q=0,P=1,O=0,N=1,L=0,K=1,I=0,H=1,E=0,D=1] 
* CE 437: new_transpose(A,B,C,D,E,F) = 3+ new_transpose_helper(G,B,C,H,I,J,D,E,K):4+ reverse_rows(D,E,K,D,E,F):2
     [B+D>=E+3,E+2>=2*D,F>=0,D>=2,K>=0,J>=0,C>=0,B+D=E+G,B+D=A+E,I=0,H=1] 

### Cost equations --> "Loop" of new_transpose/6 
* CEs [437] --> Loop 315 
* CEs [436] --> Loop 316 
* CEs [435] --> Loop 317 
* CEs [434] --> Loop 318 

#### Loops of new_transpose/6 
* Loop 315: new_transpose(A,B,C,D,E,F) [B+2>=A+D,F>=0,D>=2,C>=0,A>=3,A+E=B+D] 
* Loop 316: new_transpose(A,B,C,D,E,F) [F>=0,C>=0,A>=2,A=B+1,E=0,D=1] 
* Loop 317: new_transpose(A,B,C,B,D,E) [E>=0,C>=0,B>=2,2*B=D+2,A=2] 
* Loop 318: new_transpose(A,B,C,D,E,F) [F>=0,C>=0,E=0,D=1,B=0,A=1] 

### Ranking functions of CR new_transpose(A,B,C,D,E,F) 

#### Partial ranking functions of CR new_transpose(A,B,C,D,E,F) 


### Resulting Chains:new_transpose(A,B,C,D,E,F) 
* [318]
* [317]
* [316]
* [315]


### Merging Chains  new_transpose/6 into  External patterns of execution 
* [[318]] --> 1 
* [[317]] --> 2 
* [[316]] --> 3 
* [[315]] --> 4 


### Specialization of cost equations remFirstRow/6 
* CE 69 is refined into CE [438] 


#### Refined cost equations remFirstRow/6 
* CE 438: remFirstRow(A,B,C,D,E,F) = 2
     [B>=E+1,F>=0,E>=0,D>=1,C>=0,D+1=A] 

### Cost equations --> "Loop" of remFirstRow/6 
* CEs [438] --> Loop 319 

#### Loops of remFirstRow/6 
* Loop 319: remFirstRow(A,B,C,D,E,F) [B>=E+1,F>=0,E>=0,D>=1,C>=0,D+1=A] 

### Ranking functions of CR remFirstRow(A,B,C,D,E,F) 

#### Partial ranking functions of CR remFirstRow(A,B,C,D,E,F) 


### Resulting Chains:remFirstRow(A,B,C,D,E,F) 
* [319]


### Merging Chains  remFirstRow/6 into  External patterns of execution 
* [[319]] --> 1 


### Specialization of cost equations size/3 
* CE 2 is refined into CE [439] 
* CE 1 is refined into CE [440] 


#### Refined cost equations size/3 
* CE 439: size(A,B,C) = 3
     [C=0,B=0,A=1] 
* CE 440: size(A,B,C) = 6+ size(D,E,F)
     [B>=E+1,F+1>=0,D>=1,B>=0,F+1=C,D+1=A] 

### Cost equations --> "Loop" of size/3 
* CEs [440] --> Loop 320 
* CEs [439] --> Loop 321 

#### Loops of size/3 
* Loop 320: size(A,B,C)->  size(A',B',C')
                  [B>=B'+1,C'+1>=0,A'>=1,B>=0,C'+1=C,A'+1=A] 
* Loop 321: size(A,B,C) [C=0,B=0,A=1] 

### Ranking functions of CR size(A,B,C) 
* RF of phase [320]: [A-1,B+1]

#### Partial ranking functions of CR size(A,B,C) 
* Partial RF of phase [320]:
  - RF of loop [320:1]:
    A-1
    B+1

Discarded unfeasible chain [[320]]...(Non-terminating chain proved terminating)

### Resulting Chains:size(A,B,C) 
* [[320],321]
* [321]


### Merging Chains  size/3 into  External patterns of execution 
* [[321]] --> 1 
* [[321,[320]]] --> 2 


### Specialization of cost equations submat/8 
* CE 68 is refined into CE [441,442,443,444] 
* CE 67 is discarded (unfeasible) 
* CE 66 is refined into CE [445] 


#### Refined cost equations submat/8 
* CE 441: submat(A,B,C,D,E,F,G,H) = 11+ del(I,J,E,K,L):1+ submat(M,N,O,P,E,Q,R,S)
     [L+S>=0,R+1>=0,Q>=1,P>=0,O>=0,N>=0,M>=1,L>=0,E>=0,J>=0,L+S=H,J+O=C,R+1=G,Q+1=F,P+1=D,N+1=B,M+1=A,K=1,I=1] 
* CE 442: submat(A,B,C,D,E,F,G,H) = 11+ del(I,J,K,L,M):2+ submat(N,O,P,Q,R,S,T,U)
     [M+U>=0,L+T>=0,J>=M,S>=1,Q>=0,P>=0,O>=0,N>=1,M>=0,L>=1,M+U=H,L+T=G,J+P=C,L+O+1=B,L+1=I,S+1=F,Q+1=D,N+1=A,R=0,K=0,E=0] 
* CE 443: submat(A,B,C,D,E,F,G,H) = 11+ del(I,J,E,I,K):3+ submat(L,M,N,O,E,P,Q,R)
     [K+R>=0,I+Q>=0,E+1>=I,P>=1,O>=0,N>=0,M>=0,L>=1,K>=0,I>=2,J>=0,K+R=H,I+Q=G,J+N=C,I+M=B,P+1=F,O+1=D,L+1=A] 
* CE 444: submat(A,B,C,D,E,F,G,H) = 11+ del(I,J,E,K,L):4+ submat(M,N,O,P,E,Q,R,S)
     [L+S>=0,K+R>=0,J>=L,K>=E+1,Q>=1,P>=0,O>=0,N>=0,M>=1,L>=0,E>=1,L+S=H,K+R=G,J+O=C,K+N+1=B,K+1=I,Q+1=F,P+1=D,M+1=A] 
* CE 445: submat(A,B,C,D,E,F,G,H) = 3
     [H>=0,E>=0,D>=0,C>=0,G=0,F=1,B=0,A=1] 

### Cost equations --> "Loop" of submat/8 
* CEs [445] --> Loop 322 
* CEs [443] --> Loop 323 
* CEs [444] --> Loop 324 
* CEs [441] --> Loop 325 
* CEs [442] --> Loop 326 

#### Loops of submat/8 
* Loop 322: submat(A,B,C,D,E,F,G,H) [H>=0,E>=0,D>=0,C>=0,G=0,F=1,B=0,A=1] 
* Loop 323: submat(A,B,C,D,E,F,G,H)->  submat(A',B',C',D',E,E',F',G')
                  [E+B'+1>=B,H>=G',C>=C',B>=B'+2,C'>=0,B'>=0,H>=0,G>=0,F>=2,D>=1,A>=2,G+B'=B+F',F=E'+1,D=D'+1,A=A'+1] 
* Loop 324: submat(A,B,C,D,E,F,G,H)->  submat(A',B',C',D',E,E',F',G')
                  [C+G'>=H+C',B>=E+B'+2,H>=G',C'>=0,B'>=0,H>=0,G>=0,F>=2,E>=1,D>=1,A>=2,B+F'=G+B'+1,F=E'+1,D=D'+1,A=A'+1] 
* Loop 325: submat(A,B,C,D,E,F,G,H)->  submat(A',B',C',D',E,E',F',G')
                  [H>=G',C>=C',C'>=0,H>=0,G>=0,F>=2,E>=0,D>=1,B>=1,A>=2,G=F'+1,F=E'+1,D=D'+1,B=B'+1,A=A'+1] 
* Loop 326: submat(A,B,C,D,E,F,G,H)->  submat(A',B',C',D',E',F',G',H')
                  [C+H'>=H+C',H>=H',B>=B'+2,C'>=0,B'>=0,H>=0,G>=0,F>=2,D>=1,A>=2,B+G'=G+B'+1,F=F'+1,D=D'+1,A=A'+1,E'=0,E=0] 

### Ranking functions of CR submat(A,B,C,D,E,F,G,H) 
* RF of phase [323,324,325,326]: [A-1,B,D]

#### Partial ranking functions of CR submat(A,B,C,D,E,F,G,H) 
* Partial RF of phase [323,324,325,326]:
  - RF of loop [323:1,324:1,325:1,326:1]:
    A-1
    D
  - RF of loop [323:1,326:1]:
    B/2-1/2
  - RF of loop [324:1]:
    B/3-2/3
    B/3-E/3-1/3
  - RF of loop [325:1]:
    B

Discarded unfeasible chain [[323,324,325,326]]...(Non-terminating chain proved terminating)

### Resulting Chains:submat(A,B,C,D,E,F,G,H) 
* [[323,324,325,326],322]
* [322]


### Merging Chains  submat/8 into  External patterns of execution 
* [[322]] --> 1 
* [[322,[323,324,325,326]]] --> 2 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 96 

#### Computing cost of phase [94] 

#### Simplifying cost structure of CE 97 

#### Cost of loops [94] 

 * loop 94:append(A,B,C,D,E) -> [append(A',B',C',D',E')] 
5
##### Pending set append(A,B,C,D,E)
* Psum in Loop 94: [it(94)=<1]

###### Computing sum for it(94)=<1  in Loop 94 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(94)=<A-1,it(94)=<A-1,it(94)=<A-A',it(94)=<A-A'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [94] 

#### Simplifying cost structure of phase [94] 

#### Cost of phase [94]:append(A,B,C,D,E) -> [append(A',B',C',D',E')] 
5*it(94)+0
  Such that:it(94) =< A
it(94) =< A-A'

#### Simplifying cost structure of chain [[94],95] 

#### Cost of chains of append(A,B,C,D,E):
* Chain [[94],95]: 5*it(94)+4
  Such that:it(94) =< D

  with precondition: [A+1=D,A>=2,B>=0,C>=0,E>=0] 

* Chain [95]: 4
  with precondition: [A=1,D=2,B>=0,C>=0,E>=0] 


#### Simplifying cost structure of CE 101 

#### Computing cost of phase [99] 

#### Simplifying cost structure of CE 100 

#### Cost of loops [99] 

 * loop 99:append_row(A,B,C,D,E,F,G,H) -> [append_row(A',B',C',D',E',F',G',H')] 
10
##### Pending set append_row(A,B,C,D,E,F,G,H)
* Psum in Loop 99: [it(99)=<1]

###### Computing sum for it(99)=<1  in Loop 99 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(99)=<D-1,it(99)=<D-1,it(99)=<D-D',it(99)=<D-D'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [99] 

#### Simplifying cost structure of phase [99] 

#### Cost of phase [99]:append_row(A,B,C,D,E,F,G,H) -> [append_row(A',B',C',D',E',F',G',H')] 
10*it(99)+0
  Such that:it(99) =< D
it(99) =< D-D'

#### Simplifying cost structure of chain [[99],96] 

#### Computing cost of phase [97,98] 
 * Renamed intermediate variables: 
[ (eq(99,1),it(94))>>s(1)]

#### Simplifying cost structure of CE 99 
 * Renamed intermediate variables: 
[ (it(97),s(1))>>s(2)]

#### Simplifying cost structure of CE 98 

#### Cost of loops [97,98] 

 * loop 97:append_row(A,B,C,D,E,F,G,H) -> [append_row(A',B',C',D',E',F',G',H')] 
5*s(2)+13
  Such that:s(2) =< B-B'+1

 * loop 98:append_row(A,B,C,D,E,F,G,H) -> [append_row(A',B',C',D',E',F',G',H')] 
13
##### Pending set append_row(A,B,C,D,E,F,G,H)
* Psum in Loop 97: [it(97)=<1,s(3)=<B-B'+1]
* Psum in Loop 98: [it(98)=<1]

###### Computing sum for it(97)=<1  in Loop 97 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
       - Loop 98 is collaborative and bounds [it(98)] 
     - head Candidate: A-1 
       - Loop 98 is collaborative and bounds [it(98)] 
     - head Candidate: B+1 
       - Loop 98 is collaborative and bounds [it(98)] 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B/2+1/2 
       - Loop 98 is collaborative
     - tail Candidate: D-1 
       - Loop 98 is collaborative and bounds [it(98)] 
     - tail Candidate: A-1 
       - Loop 98 is collaborative and bounds [it(98)] 
     - tail Candidate: B+1 
       - Loop 98 is collaborative and bounds [it(98)] 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B/2+1/2 
       - Loop 98 is collaborative
 * Adding constraints: [it(97)+it(98)=<D-1,it(97)+it(98)=<A-1,it(97)+it(98)=<B+1,it(97)+it(98)=<A-1,it(97)+it(98)=<D-1,it(97)=<B/2+1/2,it(97)+it(98)=<D-D',it(97)+it(98)=<A-A',it(97)+it(98)=<B-B',it(97)+it(98)=<A-A',it(97)+it(98)=<D-D',it(97)=<B/2-B'/2] 

##### Pending set A
* Psum in Loop 97: [s(3)=<B-B'+1]
* Psum in Loop 98: [it(98)=<1]

###### Computing sum for s(3)=<B-B'+1  in Loop 97 
   - Applying inductive sum strategy 
     - head Candidate: A+B-1 
       - Loop 98 is collaborative and bounds [it(98)] 
     - head Candidate: 3/2*B 
       - Loop 98 is collaborative and bounds [it(98)] 
     - tail Candidate: A+B-1 
       - Loop 98 is collaborative and bounds [it(98)] 
     - tail Candidate: 3/2*B 
       - Loop 98 is collaborative and bounds [it(98)] 
 * Adding constraints: [it(98)+s(3)=<A+B-1,it(98)+s(3)=<3/2*B,it(98)+s(3)=<A+B-A'-B',it(98)+s(3)=<3/2*B-3/2*B'] 

##### Pending set A
* Psum in Loop 98: [it(98)=<1]

###### Computing sum for it(98)=<1  in Loop 98 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(97)+it(98)=<D-1,it(97)+it(98)=<A-1,it(97)+it(98)=<B+1,it(97)+it(98)=<A-1,it(97)+it(98)=<B+1,it(97)+it(98)=<D-1,it(97)+it(98)=<D-D',it(97)+it(98)=<A-A',it(97)+it(98)=<B-B',it(97)+it(98)=<A-A',it(97)+it(98)=<B-B',it(97)+it(98)=<D-D'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [97,98] 

#### Simplifying cost structure of phase [97,98] 

#### Cost of phase [97,98]:append_row(A,B,C,D,E,F,G,H) -> [append_row(A',B',C',D',E',F',G',H')] 
13*it(97)+13*it(98)+5*s(3)+0
  Such that:it(97) =< B/2+1/2
it(97) =< B/2-B'/2
aux(1) =< A
aux(2) =< A+B
aux(3) =< A+B-A'-B'
aux(4) =< A-A'
aux(5) =< B+1
aux(6) =< B-B'
aux(7) =< 3/2*B
aux(8) =< 3/2*B-3/2*B'
aux(9) =< D
aux(10) =< D-D'
it(97) =< aux(1)
it(98) =< aux(1)
it(98) =< aux(2)
s(3) =< aux(2)
it(98) =< aux(3)
s(3) =< aux(3)
it(97) =< aux(4)
it(98) =< aux(4)
it(97) =< aux(5)
it(98) =< aux(5)
it(97) =< aux(6)
it(98) =< aux(6)
it(98) =< aux(7)
s(3) =< aux(7)
it(98) =< aux(8)
s(3) =< aux(8)
it(97) =< aux(9)
it(98) =< aux(9)
it(97) =< aux(10)
it(98) =< aux(10)

#### Simplifying cost structure of chain [[97,98],[99],96] 
 * Joined equivalent variables [aux(11),aux(1),aux(4),aux(10)] into aux(11)
 * Joined equivalent variables [aux(12),aux(7),aux(8)] into aux(12)

#### Found solution for phase  [97,98] in the cache 

#### Cost of phase [97,98]:append_row(A,B,C,D,E,F,G,H) -> [append_row(A',B',C',D',E',F',G',H')] 
13*it(97)+13*it(98)+5*s(3)+0
  Such that:it(97) =< B/2+1/2
it(97) =< B/2-B'/2
aux(1) =< A
aux(2) =< A+B
aux(3) =< A+B-A'-B'
aux(4) =< A-A'
aux(5) =< B+1
aux(6) =< B-B'
aux(7) =< 3/2*B
aux(8) =< 3/2*B-3/2*B'
aux(9) =< D
aux(10) =< D-D'
it(97) =< aux(1)
it(98) =< aux(1)
it(98) =< aux(2)
s(3) =< aux(2)
it(98) =< aux(3)
s(3) =< aux(3)
it(97) =< aux(4)
it(98) =< aux(4)
it(97) =< aux(5)
it(98) =< aux(5)
it(97) =< aux(6)
it(98) =< aux(6)
it(98) =< aux(7)
s(3) =< aux(7)
it(98) =< aux(8)
s(3) =< aux(8)
it(97) =< aux(9)
it(98) =< aux(9)
it(97) =< aux(10)
it(98) =< aux(10)

#### Simplifying cost structure of chain [[97,98],96] 
 * Joined equivalent variables [aux(13),aux(4),aux(10)] into aux(13)
 * Joined equivalent variables [aux(14),aux(7),aux(8)] into aux(14)

#### Cost of chains of append_row(A,B,C,D,E,F,G,H):
* Chain [[99],96]: 10*it(99)+2
  Such that:it(99) =< G/2

  with precondition: [A=1,B=0,D=F,2*D=G+2,C>=0,D>=2,E>=0,H>=0] 

* Chain [[97,98],[99],96]: 13*it(97)+13*it(98)+10*it(99)+5*s(3)+2
  Such that:it(99) =< -A+D
aux(6) =< A-2*D+G+1
aux(5) =< A-2*D+G+2
aux(3) =< 2*A-2*D+G
aux(2) =< 2*A-2*D+G+1
it(97) =< A/2-D+G/2+1/2
aux(9) =< D
aux(11) =< A
aux(12) =< 3/2*A-3*D+3/2*G+3/2
it(97) =< aux(11)
it(98) =< aux(11)
it(98) =< aux(2)
s(3) =< aux(2)
it(98) =< aux(3)
s(3) =< aux(3)
it(97) =< aux(5)
it(98) =< aux(5)
it(97) =< aux(6)
it(98) =< aux(6)
it(98) =< aux(12)
s(3) =< aux(12)
it(97) =< aux(9)
it(98) =< aux(9)

  with precondition: [A+G+1=2*D+B,A+G+1=2*F+B,A>=2,C>=0,E>=0,H>=0,B+1>=A,G>=A+B+1] 

* Chain [[97,98],96]: 13*it(97)+13*it(98)+5*s(3)+2
  Such that:aux(1) =< A
aux(2) =< A+B
aux(9) =< -B+G+1
aux(6) =< B
aux(5) =< B+1
it(97) =< B/2
aux(3) =< G
aux(13) =< -B+G
aux(14) =< 3/2*B
it(97) =< aux(1)
it(98) =< aux(1)
it(98) =< aux(2)
s(3) =< aux(2)
it(98) =< aux(3)
s(3) =< aux(3)
it(97) =< aux(13)
it(98) =< aux(13)
it(97) =< aux(5)
it(98) =< aux(5)
it(97) =< aux(6)
it(98) =< aux(6)
it(98) =< aux(14)
s(3) =< aux(14)
it(97) =< aux(9)
it(98) =< aux(9)

  with precondition: [A=F,G+1=B+D,C>=0,E>=0,H>=0,G>=B+1,2*B>=G,A+B>=G+1] 

* Chain [96]: 2
  with precondition: [D=1,A=F,B=G,C=H,A>=0,B>=0,C>=0,E>=0] 


#### Simplifying cost structure of CE 102 

#### Computing cost of phase [100] 

#### Simplifying cost structure of CE 103 

#### Cost of loops [100] 

 * loop 100:reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) -> [reverse_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O')] 
5
##### Pending set reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)
* Psum in Loop 100: [it(100)=<1]

###### Computing sum for it(100)=<1  in Loop 100 
   - Applying inductive sum strategy 
     - head Candidate: E+1 
     - head Candidate: A-1 
     - head Candidate: B+1 
     - head Candidate: D-1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: E+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E+1 
     - tail Candidate: A-1 
     - tail Candidate: B+1 
     - tail Candidate: D-1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(100)=<E+1,it(100)=<A-1,it(100)=<B+1,it(100)=<D-1,it(100)=<A-1,it(100)=<B+1,it(100)=<D-1,it(100)=<E+1,it(100)=<E-E',it(100)=<A-A',it(100)=<B-B',it(100)=<D-D',it(100)=<A-A',it(100)=<B-B',it(100)=<D-D',it(100)=<E-E'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [100] 

#### Simplifying cost structure of phase [100] 

#### Cost of phase [100]:reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) -> [reverse_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O')] 
5*it(100)+0
  Such that:it(100) =< A
it(100) =< A-A'
it(100) =< B+1
it(100) =< B-B'
it(100) =< D
it(100) =< D-D'
it(100) =< E+1
it(100) =< E-E'

#### Simplifying cost structure of chain [[100],101] 

#### Cost of chains of reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O):
* Chain [[100],101]: 5*it(100)+2
  Such that:it(100) =< -I+N

  with precondition: [A=D,A+F=K+1,B+G=L,A+I=N+1,E+J=O,A>=2,C>=0,F>=1,G>=0,H>=0,I>=1,J>=0,M>=0,B+1>=A,E+1>=A,C+H>=M] 

* Chain [101]: 2
  with precondition: [A=1,B=0,D=1,E=0,F=K,G=L,H=M,I=N,J=O,C>=0,F>=0,G>=0,H>=0,I>=0,J>=0] 


#### Simplifying cost structure of CE 104 
 * Renamed intermediate variables: 
[ (eq(105,1),it(100))>>s(4)]

#### Simplifying cost structure of CE 105 

#### Cost of chains of reverseL(A,B,C,D,E,F,G,H,I,J):
* Chain [103]: 4
  with precondition: [A=1,B=0,D=1,E=0,F=1,G=0,I=1,J=0,C>=0,H>=0] 

* Chain [102]: 5*s(4)+4
  Such that:s(4) =< D

  with precondition: [A=D,A=F,B=G,A=I,E=J,A>=2,C>=0,H>=0,B+1>=A,E+1>=A] 


#### Simplifying cost structure of CE 106 

#### Computing cost of phase [104] 
 * Renamed intermediate variables: 
[ (eq(107,1),s(4))>>s(5)]

#### Simplifying cost structure of CE 107 
 * Renamed intermediate variables: 
[ (it(104),s(5))>>s(6)]

#### Cost of loops [104] 

 * loop 104:reverse_rows_helper(A,B,C,D,E,F,G,H,I) -> [reverse_rows_helper(A',B',C',D',E',F',G',H',I')] 
5*s(6)+10
  Such that:s(6) =< D+1

##### Pending set reverse_rows_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 104: [it(104)=<1,s(7)=<D+1]

###### Computing sum for it(104)=<1  in Loop 104 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
     - head Candidate: B+1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
     - tail Candidate: B+1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(104)=<A-1,it(104)=<B+1,it(104)=<A-1,it(104)=<B+1,it(104)=<A-A',it(104)=<B-B',it(104)=<A-A',it(104)=<B-B'] 

##### Pending set A
* Psum in Loop 104: [s(7)=<D+1]

###### Computing sum for s(7)=<D+1  in Loop 104 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(15)=<D+1] 
 * Adding constraints: [s(7)=<it(104)*aux(15)] 

##### Pending set reverse_rows_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(15)=<D+1]

###### Computing max_min for aux(15)=<D+1  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(15)=<A+D-1,aux(15)=<B+D+1] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [104] 

#### Simplifying cost structure of phase [104] 

#### Cost of phase [104]:reverse_rows_helper(A,B,C,D,E,F,G,H,I) -> [reverse_rows_helper(A',B',C',D',E',F',G',H',I')] 
10*it(104)+5*s(7)+0
  Such that:it(104) =< A
aux(15) =< A+D
it(104) =< A-A'
it(104) =< B+1
aux(15) =< B+D+1
it(104) =< B-B'
s(7) =< it(104)*aux(15)

#### Simplifying cost structure of chain [[104],105] 

#### Cost of chains of reverse_rows_helper(A,B,C,D,E,F,G,H,I):
* Chain [[104],105]: 10*it(104)+5*s(7)+2
  Such that:it(104) =< -D+G
aux(15) =< G+1
s(7) =< it(104)*aux(15)

  with precondition: [A+D=G+1,B+E=H,A>=2,C>=0,D>=1,E>=0,F>=0,I>=0,B+1>=A,B+E+2>=A+D] 

* Chain [105]: 2
  with precondition: [A=1,B=0,D=G,E=H,F=I,C>=0,D>=0,E>=0,F>=0] 


#### Simplifying cost structure of CE 108 
 * Renamed intermediate variables: 
[ (eq(109,1),it(104))>>s(8), (eq(109,1),aux(15))>>s(9), (eq(109,1),s(7))>>s(10)]
 * Renamed intermediate variables: 
[ (eq(109,2),s(4))>>s(11)]

#### Simplifying cost structure of CE 109 
 * Joined equivalent variables [s(8),s(11)] into s(8)

#### Cost of chains of reverse_rows(A,B,C,D,E,F):
* Chain [107]: 9
  with precondition: [A=1,B=0,D=1,E=0,C>=0,F>=0] 

* Chain [106]: 15*s(8)+5*s(10)+9
  Such that:s(9) =< A+1
aux(16) =< A
s(8) =< aux(16)
s(10) =< s(8)*s(9)

  with precondition: [A=D,B=E,A>=2,C>=0,F>=0,B+1>=A] 


#### Simplifying cost structure of CE 112 

#### Computing cost of phase [111] 

#### Simplifying cost structure of CE 111 

#### Cost of loops [111] 

 * loop 111:append_start(A,B,C,D,E,F,G,H) -> [append_start(A',B',C',D',E',F',G',H')] 
10
##### Pending set append_start(A,B,C,D,E,F,G,H)
* Psum in Loop 111: [it(111)=<1]

###### Computing sum for it(111)=<1  in Loop 111 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(111)=<D-1,it(111)=<D-1,it(111)=<D-D',it(111)=<D-D'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [111] 

#### Simplifying cost structure of phase [111] 

#### Cost of phase [111]:append_start(A,B,C,D,E,F,G,H) -> [append_start(A',B',C',D',E',F',G',H')] 
10*it(111)+0
  Such that:it(111) =< D
it(111) =< D-D'

#### Simplifying cost structure of chain [[111],109] 

#### Computing cost of phase [110] 

#### Simplifying cost structure of CE 110 

#### Cost of loops [110] 

 * loop 110:append_start(A,B,C,D,E,F,G,H) -> [append_start(A',B',C',D',E',F',G',H')] 
9
##### Pending set append_start(A,B,C,D,E,F,G,H)
* Psum in Loop 110: [it(110)=<1]

###### Computing sum for it(110)=<1  in Loop 110 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
     - head Candidate: A-1 
     - head Candidate: B+1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
     - tail Candidate: A-1 
     - tail Candidate: B+1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(110)=<D-1,it(110)=<A-1,it(110)=<B+1,it(110)=<A-1,it(110)=<B+1,it(110)=<D-1,it(110)=<D-D',it(110)=<A-A',it(110)=<B-B',it(110)=<A-A',it(110)=<B-B',it(110)=<D-D'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [110] 

#### Simplifying cost structure of phase [110] 

#### Cost of phase [110]:append_start(A,B,C,D,E,F,G,H) -> [append_start(A',B',C',D',E',F',G',H')] 
9*it(110)+0
  Such that:it(110) =< A
it(110) =< A-A'
it(110) =< B+1
it(110) =< B-B'
it(110) =< D
it(110) =< D-D'

#### Simplifying cost structure of chain [[110],[111],109] 

#### Found solution for phase  [110] in the cache 

#### Cost of phase [110]:append_start(A,B,C,D,E,F,G,H) -> [append_start(A',B',C',D',E',F',G',H')] 
9*it(110)+0
  Such that:it(110) =< A
it(110) =< A-A'
it(110) =< B+1
it(110) =< B-B'
it(110) =< D
it(110) =< D-D'

#### Simplifying cost structure of chain [[110],109] 
 * Renamed intermediate variables: 
[ (eq(113,1),s(9))>>s(12), (eq(113,1),aux(16))>>s(13), (eq(113,1),s(8))>>s(14), (eq(113,1),s(10))>>s(15)]

#### Simplifying cost structure of CE 113 

#### Found solution for phase  [110] in the cache 

#### Cost of phase [110]:append_start(A,B,C,D,E,F,G,H) -> [append_start(A',B',C',D',E',F',G',H')] 
9*it(110)+0
  Such that:it(110) =< A
it(110) =< A-A'
it(110) =< B+1
it(110) =< B-B'
it(110) =< D
it(110) =< D-D'

#### Simplifying cost structure of chain [[110],108] 

#### Cost of chains of append_start(A,B,C,D,E,F,G,H):
* Chain [[111],109]: 10*it(111)+12
  Such that:it(111) =< G/2

  with precondition: [A=1,B=0,D=F,2*D=G+2,C>=0,D>=2,E>=0,H>=0] 

* Chain [[110],[111],109]: 9*it(110)+10*it(111)+12
  Such that:it(111) =< -B-F+G+1
it(110) =< B+2*F-G

  with precondition: [A+G+1=2*D+B,A+G+1=2*F+B,A>=2,C>=0,E>=0,H>=0,B+1>=A,G>=A+B+1] 

* Chain [[110],109]: 9*it(110)+12
  Such that:it(110) =< D

  with precondition: [A=D,A=F,A+B=G+1,A>=2,C>=0,E>=0,H>=0,G+2>=2*A] 

* Chain [[110],108]: 9*it(110)+15*s(14)+5*s(15)+12
  Such that:s(13) =< -D+F+1
s(12) =< -D+F+2
it(110) =< D
s(14) =< s(13)
s(15) =< s(14)*s(12)

  with precondition: [A=F,G+1=B+D,C>=0,E>=0,H>=0,B+1>=A,G>=B+1,A+B>=G+2] 

* Chain [109]: 12
  with precondition: [A=1,B=0,D=1,F=1,G=0,C>=0,E>=0,H>=0] 

* Chain [108]: 15*s(14)+5*s(15)+12
  Such that:s(13) =< A
s(12) =< A+1
s(14) =< s(13)
s(15) =< s(14)*s(12)

  with precondition: [D=1,A=F,B=G,A>=2,C>=0,E>=0,H>=0,B+1>=A] 


#### Simplifying cost structure of CE 114 

#### Computing cost of phase [112] 

#### Simplifying cost structure of CE 115 

#### Cost of loops [112] 

 * loop 112:sizeL(A,B,C,D,E,F,G) -> [sizeL(A',B',C',D',E',F',G')] 
6
##### Pending set sizeL(A,B,C,D,E,F,G)
* Psum in Loop 112: [it(112)=<1]

###### Computing sum for it(112)=<1  in Loop 112 
   - Applying inductive sum strategy 
     - head Candidate: C-1 
     - head Candidate: A-1 
     - head Candidate: D+1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
     - tail Candidate: A-1 
     - tail Candidate: D+1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(112)=<C-1,it(112)=<A-1,it(112)=<D+1,it(112)=<A-1,it(112)=<C-1,it(112)=<D+1,it(112)=<C-C',it(112)=<A-A',it(112)=<D-D',it(112)=<A-A',it(112)=<C-C',it(112)=<D-D'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [112] 

#### Simplifying cost structure of phase [112] 

#### Cost of phase [112]:sizeL(A,B,C,D,E,F,G) -> [sizeL(A',B',C',D',E',F',G')] 
6*it(112)+0
  Such that:it(112) =< A
it(112) =< A-A'
it(112) =< C
it(112) =< C-C'
it(112) =< D+1
it(112) =< D-D'

#### Simplifying cost structure of chain [[112],113] 

#### Cost of chains of sizeL(A,B,C,D,E,F,G):
* Chain [[112],113]: 6*it(112)+3
  Such that:it(112) =< G

  with precondition: [A=C,A=F+1,A=G+1,A>=2,B>=0,E>=0,D+1>=A] 

* Chain [113]: 3
  with precondition: [A=1,C=1,D=0,F=0,G=0,B>=0,E>=0] 


#### Simplifying cost structure of CE 117 

#### Computing cost of phase [115] 

#### Simplifying cost structure of CE 118 

#### Cost of loops [115] 

 * loop 115:check_lists(A,B,C,D,E) -> [check_lists(A',B',C',D',E')] 
10
##### Pending set check_lists(A,B,C,D,E)
* Psum in Loop 115: [it(115)=<1]

###### Computing sum for it(115)=<1  in Loop 115 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
     - head Candidate: B 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
     - tail Candidate: B 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(115)=<A-1,it(115)=<B,it(115)=<A-1,it(115)=<B,it(115)=<A-A',it(115)=<B-B',it(115)=<A-A',it(115)=<B-B'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [115] 

#### Simplifying cost structure of phase [115] 

#### Cost of phase [115]:check_lists(A,B,C,D,E) -> [check_lists(A',B',C',D',E')] 
10*it(115)+0
  Such that:it(115) =< A
it(115) =< A-A'
it(115) =< B
it(115) =< B-B'

#### Simplifying cost structure of chain [[115],117] 
 * Renamed intermediate variables: 
[ (eq(116,1),it(112))>>s(16)]

#### Simplifying cost structure of CE 116 

#### Found solution for phase  [115] in the cache 

#### Cost of phase [115]:check_lists(A,B,C,D,E) -> [check_lists(A',B',C',D',E')] 
10*it(115)+0
  Such that:it(115) =< A
it(115) =< A-A'
it(115) =< B
it(115) =< B-B'

#### Simplifying cost structure of chain [[115],116] 

#### Computing cost of phase [114] 
 * Renamed intermediate variables: 
[ (eq(119,1),it(112))>>s(17)]

#### Simplifying cost structure of CE 119 
 * Renamed intermediate variables: 
[ (it(114),s(17))>>s(18)]

#### Cost of loops [114] 

 * loop 114:check_lists(A,B,C,D,E) -> [check_lists(A',B',C',D',E')] 
6*s(18)+10
  Such that:s(18) =< D'

##### Pending set check_lists(A,B,C,D,E)
* Psum in Loop 114: [it(114)=<1,s(19)=<D']

###### Computing sum for it(114)=<1  in Loop 114 
   - Applying inductive sum strategy 
     - head Candidate: B/2-1/2 
     - head Candidate: B/2-D/2 
     - head Candidate: A-1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B/2-D/2 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B/2-1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B/2-1/2 
     - tail Candidate: B/2-D/2 
     - tail Candidate: A-1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B/2-D/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B/2-1/2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(114)=<B/2-1/2,it(114)=<B/2-D/2,it(114)=<A-1,it(114)=<A-1,it(114)=<B/2-D/2,it(114)=<B/2-1/2,it(114)=<B/2-B'/2,it(114)=<B/2-D/2-B'/2+D'/2,it(114)=<A-A',it(114)=<A-A',it(114)=<B/2-D/2-B'/2+D'/2,it(114)=<B/2-B'/2] 

##### Pending set A
* Psum in Loop 114: [s(19)=<D']

###### Computing sum for s(19)=<D'  in Loop 114 
   - Applying inductive sum strategy 
     - head Candidate: B-1 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [s(19)=<B-1,s(19)=<B-1,s(19)=<B-B',s(19)=<B-B'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [114] 

#### Simplifying cost structure of phase [114] 

#### Cost of phase [114]:check_lists(A,B,C,D,E) -> [check_lists(A',B',C',D',E')] 
10*it(114)+6*s(19)+0
  Such that:it(114) =< A
it(114) =< A-A'
s(19) =< B
s(19) =< B-B'
it(114) =< B/2
it(114) =< B/2-D/2
it(114) =< B/2-D/2-B'/2+D'/2
it(114) =< B/2-B'/2

#### Simplifying cost structure of chain [[114],117] 

#### Found solution for phase  [114] in the cache 

#### Cost of phase [114]:check_lists(A,B,C,D,E) -> [check_lists(A',B',C',D',E')] 
10*it(114)+6*s(19)+0
  Such that:it(114) =< A
it(114) =< A-A'
s(19) =< B
s(19) =< B-B'
it(114) =< B/2
it(114) =< B/2-D/2
it(114) =< B/2-D/2-B'/2+D'/2
it(114) =< B/2-B'/2

#### Simplifying cost structure of chain [[114],116] 
 * Renamed intermediate variables: 
[ (ch([116]),s(16))>>s(20)]
 * Renamed intermediate variables: 
[ (ch([[114],116]),it(114))>>s(21), (ch([[114],116]),s(19))>>s(22), (ch([[114],116]),aux(18))>>s(23), (ch([[114],116]),aux(19))>>s(24), (ch([[114],116]),s(16))>>s(25)]
 * Renamed intermediate variables: 
[ (ch([[115],116]),it(115))>>s(26), (ch([[115],116]),aux(17))>>s(27), (ch([[115],116]),s(16))>>s(28)]
 * Joined equivalent variables [aux(21),s(23),s(27)] into aux(21)
 * Joined equivalent variables [s(20),s(28)] into s(20)

#### Cost of chains of check_lists(A,B,C,D,E):
* Chain [[115],117]: 10*it(115)+3
  Such that:it(115) =< A

  with precondition: [D=0,E=1,A=B+1,A>=2,C>=0] 

* Chain [[115],116]: 10*it(115)+6*s(16)+10
  Such that:it(115) =< A
aux(17) =< B
it(115) =< aux(17)
s(16) =< aux(17)

  with precondition: [D=0,E=0,A>=3,B>=3,C>=0] 

* Chain [[114],117]: 10*it(114)+6*s(19)+3
  Such that:it(114) =< A
s(19) =< B
it(114) =< B/2-D/2

  with precondition: [E=1,A>=2,C>=0,D>=1,B+3>=2*A+D] 

* Chain [[114],116]: 10*it(114)+6*s(16)+6*s(19)+10
  Such that:it(114) =< A
s(19) =< B-D
aux(18) =< B
aux(19) =< B-D+1
s(16) =< aux(18)
s(19) =< aux(18)
it(114) =< aux(19)
s(16) =< aux(19)

  with precondition: [E=0,A>=3,C>=0,D>=1,B>=2*D+3] 

* Chain [117]: 3
  with precondition: [A=1,B=0,E=1,C>=0,D>=0] 

* Chain [116]: 6*s(16)+10
  Such that:s(16) =< B

  with precondition: [E=0,A>=2,C>=0,D>=0,B>=D+2] 

 * Renamed intermediate variables: 
[ (eq(122,1),it(115))>>s(29)]

#### Simplifying cost structure of CE 122 

#### Simplifying cost structure of CE 120 
 * Renamed intermediate variables: 
[ (eq(121,1),s(22))>>s(30), (eq(121,1),s(24))>>s(31), (eq(121,1),aux(20))>>s(32), (eq(121,1),aux(21))>>s(33), (eq(121,1),s(21))>>s(34), (eq(121,1),s(26))>>s(35), (eq(121,1),s(20))>>s(36), (eq(121,1),s(25))>>s(37)]

#### Simplifying cost structure of CE 121 

#### Simplifying cost structure of CE 124 
 * Renamed intermediate variables: 
[ (eq(123,1),it(114))>>s(38), (eq(123,1),s(19))>>s(39)]

#### Simplifying cost structure of CE 123 

#### Cost of chains of case_3(A,B,C,D,E,F,G):
* Chain [122]: 10*s(29)+5
  Such that:s(29) =< E+1

  with precondition: [C=0,G=1,B=A,D=E+1,B>=0,D>=2,F>=0] 

* Chain [121]: 5
  with precondition: [D=1,E=0,G=1,B=A,B>=0,C>=0,F>=0] 

* Chain [120]: 6*s(30)+10*s(34)+10*s(35)+12*s(36)+6*s(37)+12
  Such that:s(30) =< -C+E
s(31) =< -C+E+1
s(32) =< D
s(33) =< E
s(34) =< s(32)
s(35) =< s(32)
s(36) =< s(33)
s(37) =< s(33)
s(30) =< s(33)
s(34) =< s(31)
s(37) =< s(31)
s(35) =< s(33)

  with precondition: [G=0,B=A,B>=0,C>=0,D>=2,F>=0,E>=C+2] 

* Chain [119]: 2
  with precondition: [G=0,B>=0,C>=0,D>=0,E>=0,F>=0,A>=B+1] 

* Chain [118]: 10*s(38)+6*s(39)+5
  Such that:s(38) =< -C/2+E/2
s(38) =< D
s(39) =< E

  with precondition: [G=1,B=A,B>=0,C>=1,D>=2,F>=0,E+3>=2*D+C] 


#### Simplifying cost structure of CE 125 
 * Renamed intermediate variables: 
[ (eq(126,1),it(112))>>s(40)]
 * Renamed intermediate variables: 
[ (eq(126,2),s(29))>>s(41)]

#### Simplifying cost structure of CE 126 
 * Joined equivalent variables [s(40),s(41)] into s(40)
 * Renamed intermediate variables: 
[ (eq(127,1),it(112))>>s(42)]
 * Renamed intermediate variables: 
[ (eq(127,2),s(30))>>s(43), (eq(127,2),s(31))>>s(44), (eq(127,2),s(32))>>s(45), (eq(127,2),s(33))>>s(46), (eq(127,2),s(34))>>s(47), (eq(127,2),s(35))>>s(48), (eq(127,2),s(36))>>s(49), (eq(127,2),s(37))>>s(50)]

#### Simplifying cost structure of CE 127 
 * Renamed intermediate variables: 
[ (eq(128,1),it(112))>>s(51)]

#### Simplifying cost structure of CE 128 
 * Renamed intermediate variables: 
[ (eq(129,1),it(112))>>s(52)]
 * Renamed intermediate variables: 
[ (eq(129,2),s(38))>>s(53), (eq(129,2),s(39))>>s(54)]

#### Simplifying cost structure of CE 129 

#### Cost of chains of check_mat(A,B,C,D,E,F):
* Chain [127]: 10
  with precondition: [A=0,C=1,D=0,F=1,B>=0,E>=0] 

* Chain [126]: 16*s(40)+10
  Such that:aux(22) =< C
s(40) =< aux(22)

  with precondition: [B=0,F=1,A+1=C,A=D,A>=1,E>=0] 

* Chain [125]: 6*s(42)+6*s(43)+10*s(47)+10*s(48)+12*s(49)+6*s(50)+17
  Such that:s(42) =< A
s(45) =< A+1
s(43) =< -B+D
s(44) =< -B+D+1
s(46) =< D
s(47) =< s(45)
s(48) =< s(45)
s(49) =< s(46)
s(50) =< s(46)
s(43) =< s(46)
s(47) =< s(44)
s(50) =< s(44)
s(48) =< s(46)

  with precondition: [F=0,A+1=C,A>=1,B>=0,E>=0,D>=A,D>=B+2] 

* Chain [124]: 6*s(51)+7
  Such that:s(51) =< C

  with precondition: [F=0,A>=0,B>=0,E>=0,C>=A+2,D+1>=C] 

* Chain [123]: 6*s(52)+10*s(53)+6*s(54)+10
  Such that:s(53) =< -B/2+D/2
s(54) =< D
aux(23) =< C
s(52) =< aux(23)
s(53) =< aux(23)

  with precondition: [F=1,A+1=C,A>=1,B>=1,E>=0,D+1>=2*A+B] 


#### Simplifying cost structure of CE 130 
 * Renamed intermediate variables: 
[ (eq(132,1),s(42))>>s(55), (eq(132,1),s(45))>>s(56), (eq(132,1),s(43))>>s(57), (eq(132,1),s(44))>>s(58), (eq(132,1),s(46))>>s(59), (eq(132,1),s(47))>>s(60), (eq(132,1),s(48))>>s(61), (eq(132,1),s(49))>>s(62), (eq(132,1),s(50))>>s(63)]

#### Simplifying cost structure of CE 132 
 * Joined equivalent variables [aux(24),s(56)] into aux(24)
 * Joined equivalent variables [aux(25),s(59)] into aux(25)
 * Joined equivalent variables [s(57),s(62)] into s(57)
 * Renamed intermediate variables: 
[ (eq(133,1),s(51))>>s(64)]

#### Simplifying cost structure of CE 133 
 * Joined equivalent variables [aux(26),aux(24)] into aux(26)
 * Joined equivalent variables [s(55),s(64)] into s(55)
 * Renamed intermediate variables: 
[ (eq(131,1),aux(22))>>s(65), (eq(131,1),s(40))>>s(66)]

#### Simplifying cost structure of CE 131 
 * Renamed intermediate variables: 
[ (eq(134,1),s(53))>>s(67), (eq(134,1),s(54))>>s(68), (eq(134,1),aux(23))>>s(69), (eq(134,1),s(52))>>s(70)]

#### Simplifying cost structure of CE 134 

#### Cost of chains of check_matrix(A,B,C,D,E):
* Chain [131]: 13
  with precondition: [A=1,B=0,D=1,E=1,C>=0] 

* Chain [130]: 12*s(55)+18*s(57)+10*s(60)+10*s(61)+6*s(63)+20
  Such that:aux(25) =< B
s(58) =< B+1
aux(26) =< A
s(55) =< aux(26)
s(57) =< aux(25)
s(60) =< aux(26)
s(61) =< aux(26)
s(63) =< aux(25)
s(60) =< s(58)
s(63) =< s(58)
s(61) =< aux(25)

  with precondition: [D=1,E=0,A>=2,C>=0,B+1>=A] 

* Chain [129]: 16*s(66)+13
  Such that:s(65) =< A
s(66) =< s(65)

  with precondition: [D=1,E=1,A=B+1,A>=2,C+1>=A] 

* Chain [128]: 10*s(67)+6*s(68)+6*s(70)+13
  Such that:s(69) =< A
s(68) =< B
s(67) =< B/2
s(70) =< s(69)
s(67) =< s(69)

  with precondition: [D=1,E=1,A>=2,B+2>=2*A,C>=A] 


#### Simplifying cost structure of CE 136 

#### Simplifying cost structure of CE 135 

#### Cost of chains of and_op(A,B,C):
* Chain [133]: 0
  with precondition: [A=0,C=0,B>=0] 

* Chain [132]: 0
  with precondition: [A=1,B=C,B>=0] 


#### Simplifying cost structure of CE 139 

#### Simplifying cost structure of CE 138 

#### Simplifying cost structure of CE 137 

#### Cost of chains of eq(A,B,C):
* Chain [136]: 0
  with precondition: [C=0,A>=0,B>=A+1] 

* Chain [135]: 0
  with precondition: [C=0,B>=0,A>=B+1] 

* Chain [134]: 0
  with precondition: [C=1,A=B,A>=0] 

 * Renamed intermediate variables: 
[ (eq(140,1),aux(25))>>s(71), (eq(140,1),s(58))>>s(72), (eq(140,1),aux(26))>>s(73), (eq(140,1),s(55))>>s(74), (eq(140,1),s(57))>>s(75), (eq(140,1),s(60))>>s(76), (eq(140,1),s(61))>>s(77), (eq(140,1),s(63))>>s(78)]
 * Renamed intermediate variables: 
[ (eq(140,2),aux(25))>>s(79), (eq(140,2),s(58))>>s(80), (eq(140,2),aux(26))>>s(81), (eq(140,2),s(55))>>s(82), (eq(140,2),s(57))>>s(83), (eq(140,2),s(60))>>s(84), (eq(140,2),s(61))>>s(85), (eq(140,2),s(63))>>s(86)]

#### Simplifying cost structure of CE 140 
 * Renamed intermediate variables: 
[ (eq(141,1),aux(25))>>s(87), (eq(141,1),s(58))>>s(88), (eq(141,1),aux(26))>>s(89), (eq(141,1),s(55))>>s(90), (eq(141,1),s(57))>>s(91), (eq(141,1),s(60))>>s(92), (eq(141,1),s(61))>>s(93), (eq(141,1),s(63))>>s(94)]
 * Renamed intermediate variables: 
[ (eq(141,2),aux(25))>>s(95), (eq(141,2),s(58))>>s(96), (eq(141,2),aux(26))>>s(97), (eq(141,2),s(55))>>s(98), (eq(141,2),s(57))>>s(99), (eq(141,2),s(60))>>s(100), (eq(141,2),s(61))>>s(101), (eq(141,2),s(63))>>s(102)]

#### Simplifying cost structure of CE 141 
 * Renamed intermediate variables: 
[ (eq(142,1),aux(25))>>s(103), (eq(142,1),s(58))>>s(104), (eq(142,1),aux(26))>>s(105), (eq(142,1),s(55))>>s(106), (eq(142,1),s(57))>>s(107), (eq(142,1),s(60))>>s(108), (eq(142,1),s(61))>>s(109), (eq(142,1),s(63))>>s(110)]
 * Renamed intermediate variables: 
[ (eq(142,2),aux(25))>>s(111), (eq(142,2),s(58))>>s(112), (eq(142,2),aux(26))>>s(113), (eq(142,2),s(55))>>s(114), (eq(142,2),s(57))>>s(115), (eq(142,2),s(60))>>s(116), (eq(142,2),s(61))>>s(117), (eq(142,2),s(63))>>s(118)]

#### Simplifying cost structure of CE 142 
 * Renamed intermediate variables: 
[ (eq(146,1),aux(25))>>s(119), (eq(146,1),s(58))>>s(120), (eq(146,1),aux(26))>>s(121), (eq(146,1),s(55))>>s(122), (eq(146,1),s(57))>>s(123), (eq(146,1),s(60))>>s(124), (eq(146,1),s(61))>>s(125), (eq(146,1),s(63))>>s(126)]
 * Renamed intermediate variables: 
[ (eq(146,2),s(69))>>s(127), (eq(146,2),s(68))>>s(128), (eq(146,2),s(67))>>s(129), (eq(146,2),s(70))>>s(130)]

#### Simplifying cost structure of CE 146 
 * Renamed intermediate variables: 
[ (eq(147,1),aux(25))>>s(131), (eq(147,1),s(58))>>s(132), (eq(147,1),aux(26))>>s(133), (eq(147,1),s(55))>>s(134), (eq(147,1),s(57))>>s(135), (eq(147,1),s(60))>>s(136), (eq(147,1),s(61))>>s(137), (eq(147,1),s(63))>>s(138)]
 * Renamed intermediate variables: 
[ (eq(147,2),s(69))>>s(139), (eq(147,2),s(68))>>s(140), (eq(147,2),s(67))>>s(141), (eq(147,2),s(70))>>s(142)]

#### Simplifying cost structure of CE 147 
 * Renamed intermediate variables: 
[ (eq(148,1),aux(25))>>s(143), (eq(148,1),s(58))>>s(144), (eq(148,1),aux(26))>>s(145), (eq(148,1),s(55))>>s(146), (eq(148,1),s(57))>>s(147), (eq(148,1),s(60))>>s(148), (eq(148,1),s(61))>>s(149), (eq(148,1),s(63))>>s(150)]
 * Renamed intermediate variables: 
[ (eq(148,2),s(69))>>s(151), (eq(148,2),s(68))>>s(152), (eq(148,2),s(67))>>s(153), (eq(148,2),s(70))>>s(154)]

#### Simplifying cost structure of CE 148 
 * Renamed intermediate variables: 
[ (eq(149,1),s(65))>>s(155), (eq(149,1),s(66))>>s(156)]
 * Renamed intermediate variables: 
[ (eq(149,2),aux(25))>>s(157), (eq(149,2),s(58))>>s(158), (eq(149,2),aux(26))>>s(159), (eq(149,2),s(55))>>s(160), (eq(149,2),s(57))>>s(161), (eq(149,2),s(60))>>s(162), (eq(149,2),s(61))>>s(163), (eq(149,2),s(63))>>s(164)]

#### Simplifying cost structure of CE 149 
 * Renamed intermediate variables: 
[ (eq(150,1),s(65))>>s(165), (eq(150,1),s(66))>>s(166)]
 * Renamed intermediate variables: 
[ (eq(150,2),aux(25))>>s(167), (eq(150,2),s(58))>>s(168), (eq(150,2),aux(26))>>s(169), (eq(150,2),s(55))>>s(170), (eq(150,2),s(57))>>s(171), (eq(150,2),s(60))>>s(172), (eq(150,2),s(61))>>s(173), (eq(150,2),s(63))>>s(174)]

#### Simplifying cost structure of CE 150 
 * Renamed intermediate variables: 
[ (eq(151,1),s(65))>>s(175), (eq(151,1),s(66))>>s(176)]
 * Renamed intermediate variables: 
[ (eq(151,2),aux(25))>>s(177), (eq(151,2),s(58))>>s(178), (eq(151,2),aux(26))>>s(179), (eq(151,2),s(55))>>s(180), (eq(151,2),s(57))>>s(181), (eq(151,2),s(60))>>s(182), (eq(151,2),s(61))>>s(183), (eq(151,2),s(63))>>s(184)]

#### Simplifying cost structure of CE 151 
 * Renamed intermediate variables: 
[ (eq(152,1),s(65))>>s(185), (eq(152,1),s(66))>>s(186)]
 * Renamed intermediate variables: 
[ (eq(152,2),s(65))>>s(187), (eq(152,2),s(66))>>s(188)]

#### Simplifying cost structure of CE 152 
 * Renamed intermediate variables: 
[ (eq(153,1),s(65))>>s(189), (eq(153,1),s(66))>>s(190)]
 * Renamed intermediate variables: 
[ (eq(153,2),s(65))>>s(191), (eq(153,2),s(66))>>s(192)]

#### Simplifying cost structure of CE 153 
 * Renamed intermediate variables: 
[ (eq(155,1),s(65))>>s(193), (eq(155,1),s(66))>>s(194)]
 * Renamed intermediate variables: 
[ (eq(155,2),s(69))>>s(195), (eq(155,2),s(68))>>s(196), (eq(155,2),s(67))>>s(197), (eq(155,2),s(70))>>s(198)]

#### Simplifying cost structure of CE 155 
 * Renamed intermediate variables: 
[ (eq(156,1),s(65))>>s(199), (eq(156,1),s(66))>>s(200)]
 * Renamed intermediate variables: 
[ (eq(156,2),s(69))>>s(201), (eq(156,2),s(68))>>s(202), (eq(156,2),s(67))>>s(203), (eq(156,2),s(70))>>s(204)]

#### Simplifying cost structure of CE 156 
 * Renamed intermediate variables: 
[ (eq(158,1),s(69))>>s(205), (eq(158,1),s(68))>>s(206), (eq(158,1),s(67))>>s(207), (eq(158,1),s(70))>>s(208)]
 * Renamed intermediate variables: 
[ (eq(158,2),aux(25))>>s(209), (eq(158,2),s(58))>>s(210), (eq(158,2),aux(26))>>s(211), (eq(158,2),s(55))>>s(212), (eq(158,2),s(57))>>s(213), (eq(158,2),s(60))>>s(214), (eq(158,2),s(61))>>s(215), (eq(158,2),s(63))>>s(216)]

#### Simplifying cost structure of CE 158 
 * Renamed intermediate variables: 
[ (eq(159,1),s(69))>>s(217), (eq(159,1),s(68))>>s(218), (eq(159,1),s(67))>>s(219), (eq(159,1),s(70))>>s(220)]
 * Renamed intermediate variables: 
[ (eq(159,2),aux(25))>>s(221), (eq(159,2),s(58))>>s(222), (eq(159,2),aux(26))>>s(223), (eq(159,2),s(55))>>s(224), (eq(159,2),s(57))>>s(225), (eq(159,2),s(60))>>s(226), (eq(159,2),s(61))>>s(227), (eq(159,2),s(63))>>s(228)]

#### Simplifying cost structure of CE 159 
 * Renamed intermediate variables: 
[ (eq(160,1),s(69))>>s(229), (eq(160,1),s(68))>>s(230), (eq(160,1),s(67))>>s(231), (eq(160,1),s(70))>>s(232)]
 * Renamed intermediate variables: 
[ (eq(160,2),aux(25))>>s(233), (eq(160,2),s(58))>>s(234), (eq(160,2),aux(26))>>s(235), (eq(160,2),s(55))>>s(236), (eq(160,2),s(57))>>s(237), (eq(160,2),s(60))>>s(238), (eq(160,2),s(61))>>s(239), (eq(160,2),s(63))>>s(240)]

#### Simplifying cost structure of CE 160 
 * Renamed intermediate variables: 
[ (eq(164,1),s(69))>>s(241), (eq(164,1),s(68))>>s(242), (eq(164,1),s(67))>>s(243), (eq(164,1),s(70))>>s(244)]
 * Renamed intermediate variables: 
[ (eq(164,2),s(69))>>s(245), (eq(164,2),s(68))>>s(246), (eq(164,2),s(67))>>s(247), (eq(164,2),s(70))>>s(248)]

#### Simplifying cost structure of CE 164 
 * Renamed intermediate variables: 
[ (eq(165,1),s(69))>>s(249), (eq(165,1),s(68))>>s(250), (eq(165,1),s(67))>>s(251), (eq(165,1),s(70))>>s(252)]
 * Renamed intermediate variables: 
[ (eq(165,2),s(69))>>s(253), (eq(165,2),s(68))>>s(254), (eq(165,2),s(67))>>s(255), (eq(165,2),s(70))>>s(256)]

#### Simplifying cost structure of CE 165 
 * Joined equivalent variables [aux(27),s(73),s(89),s(105),s(121),s(133),s(145),s(185),s(189),s(205),s(217),s(229),s(241),s(249)] into aux(27)
 * Joined equivalent variables [aux(28),s(71),s(87),s(103),s(119),s(131),s(143)] into aux(28)
 * Joined equivalent variables [aux(29),s(72),s(88),s(104),s(120),s(132),s(144),s(155),s(165),s(175),s(193),s(199)] into aux(29)
 * Joined equivalent variables [aux(31),s(81),s(97),s(113),s(127),s(139),s(151),s(159),s(169),s(179),s(195),s(201),s(211),s(223),s(235),s(245),s(253)] into aux(31)
 * Joined equivalent variables [aux(32),s(79),s(95),s(111),s(157),s(167),s(177),s(209),s(221),s(233)] into aux(32)
 * Joined equivalent variables [aux(33),s(80),s(96),s(112),s(158),s(168),s(178),s(187),s(191),s(210),s(222),s(234)] into aux(33)
 * Joined equivalent variables [s(206),s(218),s(230),s(242),s(250)] into s(206)
 * Joined equivalent variables [s(128),s(140),s(152),s(196),s(202),s(246),s(254)] into s(128)
 * Joined equivalent variables [s(74),s(90),s(106),s(122),s(134),s(146),s(186),s(190),s(208),s(220),s(232),s(244),s(252)] into s(74)
 * Joined equivalent variables [s(77),s(93),s(109),s(125),s(137),s(149)] into s(77)
 * Joined equivalent variables [s(76),s(92),s(108),s(124),s(136),s(148)] into s(76)
 * Joined equivalent variables [s(207),s(219),s(231),s(243),s(251)] into s(207)
 * Joined equivalent variables [s(75),s(91),s(107),s(123),s(135),s(147),s(206)] into s(75)
 * Joined equivalent variables [s(78),s(94),s(110),s(126),s(138),s(150)] into s(78)
 * Joined equivalent variables [s(156),s(166),s(176),s(194),s(200)] into s(156)
 * Joined equivalent variables [s(82),s(98),s(114),s(130),s(142),s(154),s(160),s(170),s(180),s(198),s(204),s(212),s(224),s(236),s(248),s(256)] into s(82)
 * Joined equivalent variables [s(85),s(101),s(117),s(163),s(173),s(183),s(215),s(227),s(239)] into s(85)
 * Joined equivalent variables [s(84),s(100),s(116),s(162),s(172),s(182),s(214),s(226),s(238)] into s(84)
 * Joined equivalent variables [s(129),s(141),s(153),s(197),s(203),s(247),s(255)] into s(129)
 * Joined equivalent variables [s(83),s(99),s(115),s(128),s(161),s(171),s(181),s(213),s(225),s(237)] into s(83)
 * Joined equivalent variables [s(86),s(102),s(118),s(164),s(174),s(184),s(216),s(228),s(240)] into s(86)
 * Joined equivalent variables [s(188),s(192)] into s(188)
 * Renamed intermediate variables: 
[ (eq(143,1),aux(25))>>s(257), (eq(143,1),s(58))>>s(258), (eq(143,1),aux(26))>>s(259), (eq(143,1),s(55))>>s(260), (eq(143,1),s(57))>>s(261), (eq(143,1),s(60))>>s(262), (eq(143,1),s(61))>>s(263), (eq(143,1),s(63))>>s(264)]
 * Renamed intermediate variables: 
[ (eq(143,2),s(65))>>s(265), (eq(143,2),s(66))>>s(266)]

#### Simplifying cost structure of CE 143 
 * Renamed intermediate variables: 
[ (eq(144,1),aux(25))>>s(267), (eq(144,1),s(58))>>s(268), (eq(144,1),aux(26))>>s(269), (eq(144,1),s(55))>>s(270), (eq(144,1),s(57))>>s(271), (eq(144,1),s(60))>>s(272), (eq(144,1),s(61))>>s(273), (eq(144,1),s(63))>>s(274)]
 * Renamed intermediate variables: 
[ (eq(144,2),s(65))>>s(275), (eq(144,2),s(66))>>s(276)]

#### Simplifying cost structure of CE 144 
 * Renamed intermediate variables: 
[ (eq(145,1),aux(25))>>s(277), (eq(145,1),s(58))>>s(278), (eq(145,1),aux(26))>>s(279), (eq(145,1),s(55))>>s(280), (eq(145,1),s(57))>>s(281), (eq(145,1),s(60))>>s(282), (eq(145,1),s(61))>>s(283), (eq(145,1),s(63))>>s(284)]
 * Renamed intermediate variables: 
[ (eq(145,2),s(65))>>s(285), (eq(145,2),s(66))>>s(286)]

#### Simplifying cost structure of CE 145 
 * Renamed intermediate variables: 
[ (eq(161,1),s(69))>>s(287), (eq(161,1),s(68))>>s(288), (eq(161,1),s(67))>>s(289), (eq(161,1),s(70))>>s(290)]
 * Renamed intermediate variables: 
[ (eq(161,2),s(65))>>s(291), (eq(161,2),s(66))>>s(292)]

#### Simplifying cost structure of CE 161 
 * Renamed intermediate variables: 
[ (eq(162,1),s(69))>>s(293), (eq(162,1),s(68))>>s(294), (eq(162,1),s(67))>>s(295), (eq(162,1),s(70))>>s(296)]
 * Renamed intermediate variables: 
[ (eq(162,2),s(65))>>s(297), (eq(162,2),s(66))>>s(298)]

#### Simplifying cost structure of CE 162 
 * Joined equivalent variables [aux(35),s(259),s(269),s(279),s(287),s(293)] into aux(35)
 * Joined equivalent variables [aux(36),s(257),s(267),s(277)] into aux(36)
 * Joined equivalent variables [aux(37),s(258),s(268),s(278)] into aux(37)
 * Joined equivalent variables [aux(39),s(265),s(275),s(285),s(291),s(297)] into aux(39)
 * Joined equivalent variables [s(288),s(294)] into s(288)
 * Joined equivalent variables [s(260),s(270),s(280),s(290),s(296)] into s(260)
 * Joined equivalent variables [s(263),s(273),s(283)] into s(263)
 * Joined equivalent variables [s(262),s(272),s(282)] into s(262)
 * Joined equivalent variables [s(289),s(295)] into s(289)
 * Joined equivalent variables [s(261),s(271),s(281),s(288)] into s(261)
 * Joined equivalent variables [s(264),s(274),s(284)] into s(264)
 * Joined equivalent variables [s(266),s(276),s(286),s(292),s(298)] into s(266)
 * Renamed intermediate variables: 
[ (eq(154,1),s(65))>>s(299), (eq(154,1),s(66))>>s(300)]
 * Renamed intermediate variables: 
[ (eq(154,2),s(65))>>s(301), (eq(154,2),s(66))>>s(302)]

#### Simplifying cost structure of CE 154 
 * Renamed intermediate variables: 
[ (eq(157,1),s(65))>>s(303), (eq(157,1),s(66))>>s(304)]
 * Renamed intermediate variables: 
[ (eq(157,2),s(69))>>s(305), (eq(157,2),s(68))>>s(306), (eq(157,2),s(67))>>s(307), (eq(157,2),s(70))>>s(308)]

#### Simplifying cost structure of CE 157 
 * Renamed intermediate variables: 
[ (eq(163,1),s(69))>>s(309), (eq(163,1),s(68))>>s(310), (eq(163,1),s(67))>>s(311), (eq(163,1),s(70))>>s(312)]
 * Renamed intermediate variables: 
[ (eq(163,2),s(65))>>s(313), (eq(163,2),s(66))>>s(314)]

#### Simplifying cost structure of CE 163 
 * Renamed intermediate variables: 
[ (eq(166,1),s(69))>>s(315), (eq(166,1),s(68))>>s(316), (eq(166,1),s(67))>>s(317), (eq(166,1),s(70))>>s(318)]
 * Renamed intermediate variables: 
[ (eq(166,2),s(69))>>s(319), (eq(166,2),s(68))>>s(320), (eq(166,2),s(67))>>s(321), (eq(166,2),s(70))>>s(322)]

#### Simplifying cost structure of CE 166 
 * Renamed intermediate variables: 
[ (ch([141]),aux(35))>>s(323), (ch([141]),aux(36))>>s(324), (ch([141]),aux(37))>>s(325), (ch([141]),aux(38))>>s(326), (ch([141]),aux(39))>>s(327), (ch([141]),s(261))>>s(328), (ch([141]),s(289))>>s(329), (ch([141]),s(266))>>s(330), (ch([141]),s(260))>>s(331), (ch([141]),s(262))>>s(332), (ch([141]),s(263))>>s(333), (ch([141]),s(264))>>s(334)]
 * Renamed intermediate variables: 
[ (ch([142]),aux(27))>>s(335), (ch([142]),aux(28))>>s(336), (ch([142]),aux(29))>>s(337), (ch([142]),aux(30))>>s(338), (ch([142]),aux(31))>>s(339), (ch([142]),aux(32))>>s(340), (ch([142]),aux(33))>>s(341), (ch([142]),aux(34))>>s(342), (ch([142]),s(75))>>s(343), (ch([142]),s(207))>>s(344), (ch([142]),s(83))>>s(345), (ch([142]),s(129))>>s(346), (ch([142]),s(82))>>s(347), (ch([142]),s(84))>>s(348), (ch([142]),s(85))>>s(349), (ch([142]),s(86))>>s(350), (ch([142]),s(74))>>s(351), (ch([142]),s(76))>>s(352), (ch([142]),s(77))>>s(353), (ch([142]),s(78))>>s(354), (ch([142]),s(188))>>s(355), (ch([142]),s(156))>>s(356)]
 * Joined equivalent variables [aux(40),s(323),s(335)] into aux(40)
 * Joined equivalent variables [aux(41),s(324),s(336)] into aux(41)
 * Joined equivalent variables [aux(42),s(325),s(337)] into aux(42)
 * Joined equivalent variables [aux(43),s(326),s(338)] into aux(43)
 * Joined equivalent variables [aux(44),s(327),s(341)] into aux(44)
 * Joined equivalent variables [s(331),s(351)] into s(331)
 * Joined equivalent variables [s(333),s(353)] into s(333)
 * Joined equivalent variables [s(332),s(352)] into s(332)
 * Joined equivalent variables [s(329),s(344)] into s(329)
 * Joined equivalent variables [s(328),s(343)] into s(328)
 * Joined equivalent variables [s(334),s(354)] into s(334)
 * Joined equivalent variables [s(330),s(355)] into s(330)

#### Cost of chains of check_mult_sanity(A,B,C,D,E,F,G,H,I):
* Chain [142]: 134*s(74)+138*s(75)+60*s(76)+60*s(77)+36*s(78)+150*s(82)+204*s(83)+90*s(84)+90*s(85)+54*s(86)+70*s(129)+80*s(156)+32*s(188)+50*s(207)+49
  Such that:aux(27) =< A
aux(28) =< B
aux(29) =< B+1
aux(30) =< B/2
aux(31) =< E
aux(32) =< F
aux(33) =< F+1
aux(34) =< F/2
s(75) =< aux(28)
s(207) =< aux(30)
s(83) =< aux(32)
s(129) =< aux(34)
s(82) =< aux(31)
s(84) =< aux(31)
s(85) =< aux(31)
s(86) =< aux(32)
s(84) =< aux(33)
s(86) =< aux(33)
s(85) =< aux(32)
s(74) =< aux(27)
s(76) =< aux(27)
s(77) =< aux(27)
s(78) =< aux(28)
s(76) =< aux(29)
s(78) =< aux(29)
s(77) =< aux(28)
s(129) =< aux(31)
s(188) =< aux(33)
s(207) =< aux(27)
s(156) =< aux(29)

  with precondition: [D=1,H=1,I=0,A>=2,C>=0,E>=2,G>=0,B+1>=A,F+1>=E] 

* Chain [141]: 48*s(260)+66*s(261)+30*s(262)+30*s(263)+18*s(264)+80*s(266)+20*s(289)+42
  Such that:aux(35) =< A
aux(36) =< B
aux(37) =< B+1
aux(38) =< B/2
aux(39) =< F+1
s(261) =< aux(36)
s(289) =< aux(38)
s(266) =< aux(39)
s(260) =< aux(35)
s(262) =< aux(35)
s(263) =< aux(35)
s(264) =< aux(36)
s(262) =< aux(37)
s(264) =< aux(37)
s(263) =< aux(36)
s(289) =< aux(35)

  with precondition: [D=1,H=1,I=0,E=F+1,A>=2,C>=0,E>=2,B+1>=A,G+1>=E] 

* Chain [140]: 16*s(300)+16*s(302)+35
  Such that:s(299) =< A
s(301) =< F+1
s(302) =< s(301)
s(300) =< s(299)

  with precondition: [D=1,H=1,I=1,A=B+1,E=F+1,A>=2,E>=2,C+1>=A,G+1>=E] 

* Chain [139]: 16*s(304)+6*s(306)+10*s(307)+6*s(308)+35
  Such that:s(303) =< B+1
s(305) =< E
s(306) =< F
s(307) =< F/2
s(308) =< s(305)
s(307) =< s(305)
s(304) =< s(303)

  with precondition: [D=1,H=1,I=1,A=B+1,A>=2,E>=2,F+2>=2*E,C+1>=A,G>=E] 

* Chain [138]: 6*s(310)+10*s(311)+6*s(312)+16*s(314)+35
  Such that:s(309) =< A
s(310) =< B
s(311) =< B/2
s(313) =< F+1
s(314) =< s(313)
s(312) =< s(309)
s(311) =< s(309)

  with precondition: [D=1,H=1,I=1,E=F+1,A>=2,E>=2,B+2>=2*A,C>=A,G+1>=E] 

* Chain [137]: 6*s(316)+10*s(317)+6*s(318)+6*s(320)+10*s(321)+6*s(322)+35
  Such that:s(315) =< A
s(316) =< B
s(317) =< B/2
s(319) =< E
s(320) =< F
s(321) =< F/2
s(322) =< s(319)
s(321) =< s(319)
s(318) =< s(315)
s(317) =< s(315)

  with precondition: [D=1,H=1,I=1,A>=2,E>=2,B+2>=2*A,F+2>=2*E,C>=A,G>=E] 

 * Renamed intermediate variables: 
[ (eq(167,1),aux(25))>>s(357), (eq(167,1),s(58))>>s(358), (eq(167,1),aux(26))>>s(359), (eq(167,1),s(55))>>s(360), (eq(167,1),s(57))>>s(361), (eq(167,1),s(60))>>s(362), (eq(167,1),s(61))>>s(363), (eq(167,1),s(63))>>s(364)]
 * Renamed intermediate variables: 
[ (eq(167,2),aux(25))>>s(365), (eq(167,2),s(58))>>s(366), (eq(167,2),aux(26))>>s(367), (eq(167,2),s(55))>>s(368), (eq(167,2),s(57))>>s(369), (eq(167,2),s(60))>>s(370), (eq(167,2),s(61))>>s(371), (eq(167,2),s(63))>>s(372)]

#### Simplifying cost structure of CE 167 
 * Renamed intermediate variables: 
[ (eq(168,1),aux(25))>>s(373), (eq(168,1),s(58))>>s(374), (eq(168,1),aux(26))>>s(375), (eq(168,1),s(55))>>s(376), (eq(168,1),s(57))>>s(377), (eq(168,1),s(60))>>s(378), (eq(168,1),s(61))>>s(379), (eq(168,1),s(63))>>s(380)]
 * Renamed intermediate variables: 
[ (eq(168,2),aux(25))>>s(381), (eq(168,2),s(58))>>s(382), (eq(168,2),aux(26))>>s(383), (eq(168,2),s(55))>>s(384), (eq(168,2),s(57))>>s(385), (eq(168,2),s(60))>>s(386), (eq(168,2),s(61))>>s(387), (eq(168,2),s(63))>>s(388)]

#### Simplifying cost structure of CE 168 
 * Renamed intermediate variables: 
[ (eq(169,1),aux(25))>>s(389), (eq(169,1),s(58))>>s(390), (eq(169,1),aux(26))>>s(391), (eq(169,1),s(55))>>s(392), (eq(169,1),s(57))>>s(393), (eq(169,1),s(60))>>s(394), (eq(169,1),s(61))>>s(395), (eq(169,1),s(63))>>s(396)]
 * Renamed intermediate variables: 
[ (eq(169,2),aux(25))>>s(397), (eq(169,2),s(58))>>s(398), (eq(169,2),aux(26))>>s(399), (eq(169,2),s(55))>>s(400), (eq(169,2),s(57))>>s(401), (eq(169,2),s(60))>>s(402), (eq(169,2),s(61))>>s(403), (eq(169,2),s(63))>>s(404)]

#### Simplifying cost structure of CE 169 
 * Renamed intermediate variables: 
[ (eq(170,1),aux(25))>>s(405), (eq(170,1),s(58))>>s(406), (eq(170,1),aux(26))>>s(407), (eq(170,1),s(55))>>s(408), (eq(170,1),s(57))>>s(409), (eq(170,1),s(60))>>s(410), (eq(170,1),s(61))>>s(411), (eq(170,1),s(63))>>s(412)]
 * Renamed intermediate variables: 
[ (eq(170,2),aux(25))>>s(413), (eq(170,2),s(58))>>s(414), (eq(170,2),aux(26))>>s(415), (eq(170,2),s(55))>>s(416), (eq(170,2),s(57))>>s(417), (eq(170,2),s(60))>>s(418), (eq(170,2),s(61))>>s(419), (eq(170,2),s(63))>>s(420)]

#### Simplifying cost structure of CE 170 
 * Renamed intermediate variables: 
[ (eq(171,1),aux(25))>>s(421), (eq(171,1),s(58))>>s(422), (eq(171,1),aux(26))>>s(423), (eq(171,1),s(55))>>s(424), (eq(171,1),s(57))>>s(425), (eq(171,1),s(60))>>s(426), (eq(171,1),s(61))>>s(427), (eq(171,1),s(63))>>s(428)]
 * Renamed intermediate variables: 
[ (eq(171,2),aux(25))>>s(429), (eq(171,2),s(58))>>s(430), (eq(171,2),aux(26))>>s(431), (eq(171,2),s(55))>>s(432), (eq(171,2),s(57))>>s(433), (eq(171,2),s(60))>>s(434), (eq(171,2),s(61))>>s(435), (eq(171,2),s(63))>>s(436)]

#### Simplifying cost structure of CE 171 
 * Renamed intermediate variables: 
[ (eq(172,1),aux(25))>>s(437), (eq(172,1),s(58))>>s(438), (eq(172,1),aux(26))>>s(439), (eq(172,1),s(55))>>s(440), (eq(172,1),s(57))>>s(441), (eq(172,1),s(60))>>s(442), (eq(172,1),s(61))>>s(443), (eq(172,1),s(63))>>s(444)]
 * Renamed intermediate variables: 
[ (eq(172,2),aux(25))>>s(445), (eq(172,2),s(58))>>s(446), (eq(172,2),aux(26))>>s(447), (eq(172,2),s(55))>>s(448), (eq(172,2),s(57))>>s(449), (eq(172,2),s(60))>>s(450), (eq(172,2),s(61))>>s(451), (eq(172,2),s(63))>>s(452)]

#### Simplifying cost structure of CE 172 
 * Renamed intermediate variables: 
[ (eq(173,1),aux(25))>>s(453), (eq(173,1),s(58))>>s(454), (eq(173,1),aux(26))>>s(455), (eq(173,1),s(55))>>s(456), (eq(173,1),s(57))>>s(457), (eq(173,1),s(60))>>s(458), (eq(173,1),s(61))>>s(459), (eq(173,1),s(63))>>s(460)]
 * Renamed intermediate variables: 
[ (eq(173,2),aux(25))>>s(461), (eq(173,2),s(58))>>s(462), (eq(173,2),aux(26))>>s(463), (eq(173,2),s(55))>>s(464), (eq(173,2),s(57))>>s(465), (eq(173,2),s(60))>>s(466), (eq(173,2),s(61))>>s(467), (eq(173,2),s(63))>>s(468)]

#### Simplifying cost structure of CE 173 
 * Renamed intermediate variables: 
[ (eq(174,1),aux(25))>>s(469), (eq(174,1),s(58))>>s(470), (eq(174,1),aux(26))>>s(471), (eq(174,1),s(55))>>s(472), (eq(174,1),s(57))>>s(473), (eq(174,1),s(60))>>s(474), (eq(174,1),s(61))>>s(475), (eq(174,1),s(63))>>s(476)]
 * Renamed intermediate variables: 
[ (eq(174,2),aux(25))>>s(477), (eq(174,2),s(58))>>s(478), (eq(174,2),aux(26))>>s(479), (eq(174,2),s(55))>>s(480), (eq(174,2),s(57))>>s(481), (eq(174,2),s(60))>>s(482), (eq(174,2),s(61))>>s(483), (eq(174,2),s(63))>>s(484)]

#### Simplifying cost structure of CE 174 
 * Renamed intermediate variables: 
[ (eq(175,1),aux(25))>>s(485), (eq(175,1),s(58))>>s(486), (eq(175,1),aux(26))>>s(487), (eq(175,1),s(55))>>s(488), (eq(175,1),s(57))>>s(489), (eq(175,1),s(60))>>s(490), (eq(175,1),s(61))>>s(491), (eq(175,1),s(63))>>s(492)]
 * Renamed intermediate variables: 
[ (eq(175,2),aux(25))>>s(493), (eq(175,2),s(58))>>s(494), (eq(175,2),aux(26))>>s(495), (eq(175,2),s(55))>>s(496), (eq(175,2),s(57))>>s(497), (eq(175,2),s(60))>>s(498), (eq(175,2),s(61))>>s(499), (eq(175,2),s(63))>>s(500)]

#### Simplifying cost structure of CE 175 
 * Renamed intermediate variables: 
[ (eq(185,1),aux(25))>>s(501), (eq(185,1),s(58))>>s(502), (eq(185,1),aux(26))>>s(503), (eq(185,1),s(55))>>s(504), (eq(185,1),s(57))>>s(505), (eq(185,1),s(60))>>s(506), (eq(185,1),s(61))>>s(507), (eq(185,1),s(63))>>s(508)]
 * Renamed intermediate variables: 
[ (eq(185,2),s(69))>>s(509), (eq(185,2),s(68))>>s(510), (eq(185,2),s(67))>>s(511), (eq(185,2),s(70))>>s(512)]

#### Simplifying cost structure of CE 185 
 * Renamed intermediate variables: 
[ (eq(186,1),aux(25))>>s(513), (eq(186,1),s(58))>>s(514), (eq(186,1),aux(26))>>s(515), (eq(186,1),s(55))>>s(516), (eq(186,1),s(57))>>s(517), (eq(186,1),s(60))>>s(518), (eq(186,1),s(61))>>s(519), (eq(186,1),s(63))>>s(520)]
 * Renamed intermediate variables: 
[ (eq(186,2),s(69))>>s(521), (eq(186,2),s(68))>>s(522), (eq(186,2),s(67))>>s(523), (eq(186,2),s(70))>>s(524)]

#### Simplifying cost structure of CE 186 
 * Renamed intermediate variables: 
[ (eq(187,1),aux(25))>>s(525), (eq(187,1),s(58))>>s(526), (eq(187,1),aux(26))>>s(527), (eq(187,1),s(55))>>s(528), (eq(187,1),s(57))>>s(529), (eq(187,1),s(60))>>s(530), (eq(187,1),s(61))>>s(531), (eq(187,1),s(63))>>s(532)]
 * Renamed intermediate variables: 
[ (eq(187,2),s(69))>>s(533), (eq(187,2),s(68))>>s(534), (eq(187,2),s(67))>>s(535), (eq(187,2),s(70))>>s(536)]

#### Simplifying cost structure of CE 187 
 * Renamed intermediate variables: 
[ (eq(188,1),aux(25))>>s(537), (eq(188,1),s(58))>>s(538), (eq(188,1),aux(26))>>s(539), (eq(188,1),s(55))>>s(540), (eq(188,1),s(57))>>s(541), (eq(188,1),s(60))>>s(542), (eq(188,1),s(61))>>s(543), (eq(188,1),s(63))>>s(544)]
 * Renamed intermediate variables: 
[ (eq(188,2),s(69))>>s(545), (eq(188,2),s(68))>>s(546), (eq(188,2),s(67))>>s(547), (eq(188,2),s(70))>>s(548)]

#### Simplifying cost structure of CE 188 
 * Renamed intermediate variables: 
[ (eq(189,1),aux(25))>>s(549), (eq(189,1),s(58))>>s(550), (eq(189,1),aux(26))>>s(551), (eq(189,1),s(55))>>s(552), (eq(189,1),s(57))>>s(553), (eq(189,1),s(60))>>s(554), (eq(189,1),s(61))>>s(555), (eq(189,1),s(63))>>s(556)]
 * Renamed intermediate variables: 
[ (eq(189,2),s(69))>>s(557), (eq(189,2),s(68))>>s(558), (eq(189,2),s(67))>>s(559), (eq(189,2),s(70))>>s(560)]

#### Simplifying cost structure of CE 189 
 * Renamed intermediate variables: 
[ (eq(190,1),aux(25))>>s(561), (eq(190,1),s(58))>>s(562), (eq(190,1),aux(26))>>s(563), (eq(190,1),s(55))>>s(564), (eq(190,1),s(57))>>s(565), (eq(190,1),s(60))>>s(566), (eq(190,1),s(61))>>s(567), (eq(190,1),s(63))>>s(568)]
 * Renamed intermediate variables: 
[ (eq(190,2),s(69))>>s(569), (eq(190,2),s(68))>>s(570), (eq(190,2),s(67))>>s(571), (eq(190,2),s(70))>>s(572)]

#### Simplifying cost structure of CE 190 
 * Renamed intermediate variables: 
[ (eq(191,1),aux(25))>>s(573), (eq(191,1),s(58))>>s(574), (eq(191,1),aux(26))>>s(575), (eq(191,1),s(55))>>s(576), (eq(191,1),s(57))>>s(577), (eq(191,1),s(60))>>s(578), (eq(191,1),s(61))>>s(579), (eq(191,1),s(63))>>s(580)]
 * Renamed intermediate variables: 
[ (eq(191,2),s(69))>>s(581), (eq(191,2),s(68))>>s(582), (eq(191,2),s(67))>>s(583), (eq(191,2),s(70))>>s(584)]

#### Simplifying cost structure of CE 191 
 * Renamed intermediate variables: 
[ (eq(192,1),aux(25))>>s(585), (eq(192,1),s(58))>>s(586), (eq(192,1),aux(26))>>s(587), (eq(192,1),s(55))>>s(588), (eq(192,1),s(57))>>s(589), (eq(192,1),s(60))>>s(590), (eq(192,1),s(61))>>s(591), (eq(192,1),s(63))>>s(592)]
 * Renamed intermediate variables: 
[ (eq(192,2),s(69))>>s(593), (eq(192,2),s(68))>>s(594), (eq(192,2),s(67))>>s(595), (eq(192,2),s(70))>>s(596)]

#### Simplifying cost structure of CE 192 
 * Renamed intermediate variables: 
[ (eq(193,1),aux(25))>>s(597), (eq(193,1),s(58))>>s(598), (eq(193,1),aux(26))>>s(599), (eq(193,1),s(55))>>s(600), (eq(193,1),s(57))>>s(601), (eq(193,1),s(60))>>s(602), (eq(193,1),s(61))>>s(603), (eq(193,1),s(63))>>s(604)]
 * Renamed intermediate variables: 
[ (eq(193,2),s(69))>>s(605), (eq(193,2),s(68))>>s(606), (eq(193,2),s(67))>>s(607), (eq(193,2),s(70))>>s(608)]

#### Simplifying cost structure of CE 193 
 * Renamed intermediate variables: 
[ (eq(194,1),s(65))>>s(609), (eq(194,1),s(66))>>s(610)]
 * Renamed intermediate variables: 
[ (eq(194,2),aux(25))>>s(611), (eq(194,2),s(58))>>s(612), (eq(194,2),aux(26))>>s(613), (eq(194,2),s(55))>>s(614), (eq(194,2),s(57))>>s(615), (eq(194,2),s(60))>>s(616), (eq(194,2),s(61))>>s(617), (eq(194,2),s(63))>>s(618)]

#### Simplifying cost structure of CE 194 
 * Renamed intermediate variables: 
[ (eq(195,1),s(65))>>s(619), (eq(195,1),s(66))>>s(620)]
 * Renamed intermediate variables: 
[ (eq(195,2),aux(25))>>s(621), (eq(195,2),s(58))>>s(622), (eq(195,2),aux(26))>>s(623), (eq(195,2),s(55))>>s(624), (eq(195,2),s(57))>>s(625), (eq(195,2),s(60))>>s(626), (eq(195,2),s(61))>>s(627), (eq(195,2),s(63))>>s(628)]

#### Simplifying cost structure of CE 195 
 * Renamed intermediate variables: 
[ (eq(196,1),s(65))>>s(629), (eq(196,1),s(66))>>s(630)]
 * Renamed intermediate variables: 
[ (eq(196,2),aux(25))>>s(631), (eq(196,2),s(58))>>s(632), (eq(196,2),aux(26))>>s(633), (eq(196,2),s(55))>>s(634), (eq(196,2),s(57))>>s(635), (eq(196,2),s(60))>>s(636), (eq(196,2),s(61))>>s(637), (eq(196,2),s(63))>>s(638)]

#### Simplifying cost structure of CE 196 
 * Renamed intermediate variables: 
[ (eq(197,1),s(65))>>s(639), (eq(197,1),s(66))>>s(640)]
 * Renamed intermediate variables: 
[ (eq(197,2),aux(25))>>s(641), (eq(197,2),s(58))>>s(642), (eq(197,2),aux(26))>>s(643), (eq(197,2),s(55))>>s(644), (eq(197,2),s(57))>>s(645), (eq(197,2),s(60))>>s(646), (eq(197,2),s(61))>>s(647), (eq(197,2),s(63))>>s(648)]

#### Simplifying cost structure of CE 197 
 * Renamed intermediate variables: 
[ (eq(198,1),s(65))>>s(649), (eq(198,1),s(66))>>s(650)]
 * Renamed intermediate variables: 
[ (eq(198,2),aux(25))>>s(651), (eq(198,2),s(58))>>s(652), (eq(198,2),aux(26))>>s(653), (eq(198,2),s(55))>>s(654), (eq(198,2),s(57))>>s(655), (eq(198,2),s(60))>>s(656), (eq(198,2),s(61))>>s(657), (eq(198,2),s(63))>>s(658)]

#### Simplifying cost structure of CE 198 
 * Renamed intermediate variables: 
[ (eq(199,1),s(65))>>s(659), (eq(199,1),s(66))>>s(660)]
 * Renamed intermediate variables: 
[ (eq(199,2),aux(25))>>s(661), (eq(199,2),s(58))>>s(662), (eq(199,2),aux(26))>>s(663), (eq(199,2),s(55))>>s(664), (eq(199,2),s(57))>>s(665), (eq(199,2),s(60))>>s(666), (eq(199,2),s(61))>>s(667), (eq(199,2),s(63))>>s(668)]

#### Simplifying cost structure of CE 199 
 * Renamed intermediate variables: 
[ (eq(200,1),s(65))>>s(669), (eq(200,1),s(66))>>s(670)]
 * Renamed intermediate variables: 
[ (eq(200,2),aux(25))>>s(671), (eq(200,2),s(58))>>s(672), (eq(200,2),aux(26))>>s(673), (eq(200,2),s(55))>>s(674), (eq(200,2),s(57))>>s(675), (eq(200,2),s(60))>>s(676), (eq(200,2),s(61))>>s(677), (eq(200,2),s(63))>>s(678)]

#### Simplifying cost structure of CE 200 
 * Renamed intermediate variables: 
[ (eq(201,1),s(65))>>s(679), (eq(201,1),s(66))>>s(680)]
 * Renamed intermediate variables: 
[ (eq(201,2),aux(25))>>s(681), (eq(201,2),s(58))>>s(682), (eq(201,2),aux(26))>>s(683), (eq(201,2),s(55))>>s(684), (eq(201,2),s(57))>>s(685), (eq(201,2),s(60))>>s(686), (eq(201,2),s(61))>>s(687), (eq(201,2),s(63))>>s(688)]

#### Simplifying cost structure of CE 201 
 * Renamed intermediate variables: 
[ (eq(202,1),s(65))>>s(689), (eq(202,1),s(66))>>s(690)]
 * Renamed intermediate variables: 
[ (eq(202,2),aux(25))>>s(691), (eq(202,2),s(58))>>s(692), (eq(202,2),aux(26))>>s(693), (eq(202,2),s(55))>>s(694), (eq(202,2),s(57))>>s(695), (eq(202,2),s(60))>>s(696), (eq(202,2),s(61))>>s(697), (eq(202,2),s(63))>>s(698)]

#### Simplifying cost structure of CE 202 
 * Renamed intermediate variables: 
[ (eq(203,1),s(65))>>s(699), (eq(203,1),s(66))>>s(700)]
 * Renamed intermediate variables: 
[ (eq(203,2),s(65))>>s(701), (eq(203,2),s(66))>>s(702)]

#### Simplifying cost structure of CE 203 
 * Renamed intermediate variables: 
[ (eq(204,1),s(65))>>s(703), (eq(204,1),s(66))>>s(704)]
 * Renamed intermediate variables: 
[ (eq(204,2),s(65))>>s(705), (eq(204,2),s(66))>>s(706)]

#### Simplifying cost structure of CE 204 
 * Renamed intermediate variables: 
[ (eq(205,1),s(65))>>s(707), (eq(205,1),s(66))>>s(708)]
 * Renamed intermediate variables: 
[ (eq(205,2),s(65))>>s(709), (eq(205,2),s(66))>>s(710)]

#### Simplifying cost structure of CE 205 
 * Renamed intermediate variables: 
[ (eq(206,1),s(65))>>s(711), (eq(206,1),s(66))>>s(712)]
 * Renamed intermediate variables: 
[ (eq(206,2),s(65))>>s(713), (eq(206,2),s(66))>>s(714)]

#### Simplifying cost structure of CE 206 
 * Renamed intermediate variables: 
[ (eq(207,1),s(65))>>s(715), (eq(207,1),s(66))>>s(716)]
 * Renamed intermediate variables: 
[ (eq(207,2),s(65))>>s(717), (eq(207,2),s(66))>>s(718)]

#### Simplifying cost structure of CE 207 
 * Renamed intermediate variables: 
[ (eq(208,1),s(65))>>s(719), (eq(208,1),s(66))>>s(720)]
 * Renamed intermediate variables: 
[ (eq(208,2),s(65))>>s(721), (eq(208,2),s(66))>>s(722)]

#### Simplifying cost structure of CE 208 
 * Renamed intermediate variables: 
[ (eq(209,1),s(65))>>s(723), (eq(209,1),s(66))>>s(724)]
 * Renamed intermediate variables: 
[ (eq(209,2),s(65))>>s(725), (eq(209,2),s(66))>>s(726)]

#### Simplifying cost structure of CE 209 
 * Renamed intermediate variables: 
[ (eq(210,1),s(65))>>s(727), (eq(210,1),s(66))>>s(728)]
 * Renamed intermediate variables: 
[ (eq(210,2),s(65))>>s(729), (eq(210,2),s(66))>>s(730)]

#### Simplifying cost structure of CE 210 
 * Renamed intermediate variables: 
[ (eq(212,1),s(65))>>s(731), (eq(212,1),s(66))>>s(732)]
 * Renamed intermediate variables: 
[ (eq(212,2),s(69))>>s(733), (eq(212,2),s(68))>>s(734), (eq(212,2),s(67))>>s(735), (eq(212,2),s(70))>>s(736)]

#### Simplifying cost structure of CE 212 
 * Renamed intermediate variables: 
[ (eq(213,1),s(65))>>s(737), (eq(213,1),s(66))>>s(738)]
 * Renamed intermediate variables: 
[ (eq(213,2),s(69))>>s(739), (eq(213,2),s(68))>>s(740), (eq(213,2),s(67))>>s(741), (eq(213,2),s(70))>>s(742)]

#### Simplifying cost structure of CE 213 
 * Renamed intermediate variables: 
[ (eq(214,1),s(65))>>s(743), (eq(214,1),s(66))>>s(744)]
 * Renamed intermediate variables: 
[ (eq(214,2),s(69))>>s(745), (eq(214,2),s(68))>>s(746), (eq(214,2),s(67))>>s(747), (eq(214,2),s(70))>>s(748)]

#### Simplifying cost structure of CE 214 
 * Renamed intermediate variables: 
[ (eq(215,1),s(65))>>s(749), (eq(215,1),s(66))>>s(750)]
 * Renamed intermediate variables: 
[ (eq(215,2),s(69))>>s(751), (eq(215,2),s(68))>>s(752), (eq(215,2),s(67))>>s(753), (eq(215,2),s(70))>>s(754)]

#### Simplifying cost structure of CE 215 
 * Renamed intermediate variables: 
[ (eq(216,1),s(65))>>s(755), (eq(216,1),s(66))>>s(756)]
 * Renamed intermediate variables: 
[ (eq(216,2),s(69))>>s(757), (eq(216,2),s(68))>>s(758), (eq(216,2),s(67))>>s(759), (eq(216,2),s(70))>>s(760)]

#### Simplifying cost structure of CE 216 
 * Renamed intermediate variables: 
[ (eq(217,1),s(65))>>s(761), (eq(217,1),s(66))>>s(762)]
 * Renamed intermediate variables: 
[ (eq(217,2),s(69))>>s(763), (eq(217,2),s(68))>>s(764), (eq(217,2),s(67))>>s(765), (eq(217,2),s(70))>>s(766)]

#### Simplifying cost structure of CE 217 
 * Renamed intermediate variables: 
[ (eq(218,1),s(65))>>s(767), (eq(218,1),s(66))>>s(768)]
 * Renamed intermediate variables: 
[ (eq(218,2),s(69))>>s(769), (eq(218,2),s(68))>>s(770), (eq(218,2),s(67))>>s(771), (eq(218,2),s(70))>>s(772)]

#### Simplifying cost structure of CE 218 
 * Renamed intermediate variables: 
[ (eq(219,1),s(65))>>s(773), (eq(219,1),s(66))>>s(774)]
 * Renamed intermediate variables: 
[ (eq(219,2),s(69))>>s(775), (eq(219,2),s(68))>>s(776), (eq(219,2),s(67))>>s(777), (eq(219,2),s(70))>>s(778)]

#### Simplifying cost structure of CE 219 
 * Renamed intermediate variables: 
[ (eq(221,1),s(69))>>s(779), (eq(221,1),s(68))>>s(780), (eq(221,1),s(67))>>s(781), (eq(221,1),s(70))>>s(782)]
 * Renamed intermediate variables: 
[ (eq(221,2),aux(25))>>s(783), (eq(221,2),s(58))>>s(784), (eq(221,2),aux(26))>>s(785), (eq(221,2),s(55))>>s(786), (eq(221,2),s(57))>>s(787), (eq(221,2),s(60))>>s(788), (eq(221,2),s(61))>>s(789), (eq(221,2),s(63))>>s(790)]

#### Simplifying cost structure of CE 221 
 * Renamed intermediate variables: 
[ (eq(222,1),s(69))>>s(791), (eq(222,1),s(68))>>s(792), (eq(222,1),s(67))>>s(793), (eq(222,1),s(70))>>s(794)]
 * Renamed intermediate variables: 
[ (eq(222,2),aux(25))>>s(795), (eq(222,2),s(58))>>s(796), (eq(222,2),aux(26))>>s(797), (eq(222,2),s(55))>>s(798), (eq(222,2),s(57))>>s(799), (eq(222,2),s(60))>>s(800), (eq(222,2),s(61))>>s(801), (eq(222,2),s(63))>>s(802)]

#### Simplifying cost structure of CE 222 
 * Renamed intermediate variables: 
[ (eq(223,1),s(69))>>s(803), (eq(223,1),s(68))>>s(804), (eq(223,1),s(67))>>s(805), (eq(223,1),s(70))>>s(806)]
 * Renamed intermediate variables: 
[ (eq(223,2),aux(25))>>s(807), (eq(223,2),s(58))>>s(808), (eq(223,2),aux(26))>>s(809), (eq(223,2),s(55))>>s(810), (eq(223,2),s(57))>>s(811), (eq(223,2),s(60))>>s(812), (eq(223,2),s(61))>>s(813), (eq(223,2),s(63))>>s(814)]

#### Simplifying cost structure of CE 223 
 * Renamed intermediate variables: 
[ (eq(224,1),s(69))>>s(815), (eq(224,1),s(68))>>s(816), (eq(224,1),s(67))>>s(817), (eq(224,1),s(70))>>s(818)]
 * Renamed intermediate variables: 
[ (eq(224,2),aux(25))>>s(819), (eq(224,2),s(58))>>s(820), (eq(224,2),aux(26))>>s(821), (eq(224,2),s(55))>>s(822), (eq(224,2),s(57))>>s(823), (eq(224,2),s(60))>>s(824), (eq(224,2),s(61))>>s(825), (eq(224,2),s(63))>>s(826)]

#### Simplifying cost structure of CE 224 
 * Renamed intermediate variables: 
[ (eq(225,1),s(69))>>s(827), (eq(225,1),s(68))>>s(828), (eq(225,1),s(67))>>s(829), (eq(225,1),s(70))>>s(830)]
 * Renamed intermediate variables: 
[ (eq(225,2),aux(25))>>s(831), (eq(225,2),s(58))>>s(832), (eq(225,2),aux(26))>>s(833), (eq(225,2),s(55))>>s(834), (eq(225,2),s(57))>>s(835), (eq(225,2),s(60))>>s(836), (eq(225,2),s(61))>>s(837), (eq(225,2),s(63))>>s(838)]

#### Simplifying cost structure of CE 225 
 * Renamed intermediate variables: 
[ (eq(226,1),s(69))>>s(839), (eq(226,1),s(68))>>s(840), (eq(226,1),s(67))>>s(841), (eq(226,1),s(70))>>s(842)]
 * Renamed intermediate variables: 
[ (eq(226,2),aux(25))>>s(843), (eq(226,2),s(58))>>s(844), (eq(226,2),aux(26))>>s(845), (eq(226,2),s(55))>>s(846), (eq(226,2),s(57))>>s(847), (eq(226,2),s(60))>>s(848), (eq(226,2),s(61))>>s(849), (eq(226,2),s(63))>>s(850)]

#### Simplifying cost structure of CE 226 
 * Renamed intermediate variables: 
[ (eq(227,1),s(69))>>s(851), (eq(227,1),s(68))>>s(852), (eq(227,1),s(67))>>s(853), (eq(227,1),s(70))>>s(854)]
 * Renamed intermediate variables: 
[ (eq(227,2),aux(25))>>s(855), (eq(227,2),s(58))>>s(856), (eq(227,2),aux(26))>>s(857), (eq(227,2),s(55))>>s(858), (eq(227,2),s(57))>>s(859), (eq(227,2),s(60))>>s(860), (eq(227,2),s(61))>>s(861), (eq(227,2),s(63))>>s(862)]

#### Simplifying cost structure of CE 227 
 * Renamed intermediate variables: 
[ (eq(228,1),s(69))>>s(863), (eq(228,1),s(68))>>s(864), (eq(228,1),s(67))>>s(865), (eq(228,1),s(70))>>s(866)]
 * Renamed intermediate variables: 
[ (eq(228,2),aux(25))>>s(867), (eq(228,2),s(58))>>s(868), (eq(228,2),aux(26))>>s(869), (eq(228,2),s(55))>>s(870), (eq(228,2),s(57))>>s(871), (eq(228,2),s(60))>>s(872), (eq(228,2),s(61))>>s(873), (eq(228,2),s(63))>>s(874)]

#### Simplifying cost structure of CE 228 
 * Renamed intermediate variables: 
[ (eq(229,1),s(69))>>s(875), (eq(229,1),s(68))>>s(876), (eq(229,1),s(67))>>s(877), (eq(229,1),s(70))>>s(878)]
 * Renamed intermediate variables: 
[ (eq(229,2),aux(25))>>s(879), (eq(229,2),s(58))>>s(880), (eq(229,2),aux(26))>>s(881), (eq(229,2),s(55))>>s(882), (eq(229,2),s(57))>>s(883), (eq(229,2),s(60))>>s(884), (eq(229,2),s(61))>>s(885), (eq(229,2),s(63))>>s(886)]

#### Simplifying cost structure of CE 229 
 * Renamed intermediate variables: 
[ (eq(239,1),s(69))>>s(887), (eq(239,1),s(68))>>s(888), (eq(239,1),s(67))>>s(889), (eq(239,1),s(70))>>s(890)]
 * Renamed intermediate variables: 
[ (eq(239,2),s(69))>>s(891), (eq(239,2),s(68))>>s(892), (eq(239,2),s(67))>>s(893), (eq(239,2),s(70))>>s(894)]

#### Simplifying cost structure of CE 239 
 * Renamed intermediate variables: 
[ (eq(240,1),s(69))>>s(895), (eq(240,1),s(68))>>s(896), (eq(240,1),s(67))>>s(897), (eq(240,1),s(70))>>s(898)]
 * Renamed intermediate variables: 
[ (eq(240,2),s(69))>>s(899), (eq(240,2),s(68))>>s(900), (eq(240,2),s(67))>>s(901), (eq(240,2),s(70))>>s(902)]

#### Simplifying cost structure of CE 240 
 * Renamed intermediate variables: 
[ (eq(241,1),s(69))>>s(903), (eq(241,1),s(68))>>s(904), (eq(241,1),s(67))>>s(905), (eq(241,1),s(70))>>s(906)]
 * Renamed intermediate variables: 
[ (eq(241,2),s(69))>>s(907), (eq(241,2),s(68))>>s(908), (eq(241,2),s(67))>>s(909), (eq(241,2),s(70))>>s(910)]

#### Simplifying cost structure of CE 241 
 * Renamed intermediate variables: 
[ (eq(242,1),s(69))>>s(911), (eq(242,1),s(68))>>s(912), (eq(242,1),s(67))>>s(913), (eq(242,1),s(70))>>s(914)]
 * Renamed intermediate variables: 
[ (eq(242,2),s(69))>>s(915), (eq(242,2),s(68))>>s(916), (eq(242,2),s(67))>>s(917), (eq(242,2),s(70))>>s(918)]

#### Simplifying cost structure of CE 242 
 * Renamed intermediate variables: 
[ (eq(243,1),s(69))>>s(919), (eq(243,1),s(68))>>s(920), (eq(243,1),s(67))>>s(921), (eq(243,1),s(70))>>s(922)]
 * Renamed intermediate variables: 
[ (eq(243,2),s(69))>>s(923), (eq(243,2),s(68))>>s(924), (eq(243,2),s(67))>>s(925), (eq(243,2),s(70))>>s(926)]

#### Simplifying cost structure of CE 243 
 * Renamed intermediate variables: 
[ (eq(244,1),s(69))>>s(927), (eq(244,1),s(68))>>s(928), (eq(244,1),s(67))>>s(929), (eq(244,1),s(70))>>s(930)]
 * Renamed intermediate variables: 
[ (eq(244,2),s(69))>>s(931), (eq(244,2),s(68))>>s(932), (eq(244,2),s(67))>>s(933), (eq(244,2),s(70))>>s(934)]

#### Simplifying cost structure of CE 244 
 * Renamed intermediate variables: 
[ (eq(245,1),s(69))>>s(935), (eq(245,1),s(68))>>s(936), (eq(245,1),s(67))>>s(937), (eq(245,1),s(70))>>s(938)]
 * Renamed intermediate variables: 
[ (eq(245,2),s(69))>>s(939), (eq(245,2),s(68))>>s(940), (eq(245,2),s(67))>>s(941), (eq(245,2),s(70))>>s(942)]

#### Simplifying cost structure of CE 245 
 * Renamed intermediate variables: 
[ (eq(246,1),s(69))>>s(943), (eq(246,1),s(68))>>s(944), (eq(246,1),s(67))>>s(945), (eq(246,1),s(70))>>s(946)]
 * Renamed intermediate variables: 
[ (eq(246,2),s(69))>>s(947), (eq(246,2),s(68))>>s(948), (eq(246,2),s(67))>>s(949), (eq(246,2),s(70))>>s(950)]

#### Simplifying cost structure of CE 246 
 * Joined equivalent variables [aux(45),s(359),s(375),s(391),s(407),s(423),s(439),s(455),s(471),s(487),s(503),s(515),s(527),s(539),s(551),s(563),s(575),s(587),s(599),s(699),s(703),s(707),s(711),s(715),s(719),s(723),s(727),s(779),s(791),s(803),s(815),s(827),s(839),s(851),s(863),s(875),s(887),s(895),s(903),s(911),s(919),s(927),s(935),s(943)] into aux(45)
 * Joined equivalent variables [aux(46),s(357),s(373),s(389),s(405),s(421),s(437),s(453),s(469),s(485),s(501),s(513),s(525),s(537),s(549),s(561),s(573),s(585),s(597)] into aux(46)
 * Joined equivalent variables [aux(47),s(358),s(374),s(390),s(406),s(422),s(438),s(454),s(470),s(486),s(502),s(514),s(526),s(538),s(550),s(562),s(574),s(586),s(598),s(609),s(619),s(629),s(639),s(649),s(659),s(669),s(679),s(689),s(731),s(737),s(743),s(749),s(755),s(761),s(767),s(773)] into aux(47)
 * Joined equivalent variables [aux(49),s(367),s(383),s(399),s(415),s(431),s(447),s(463),s(479),s(495),s(509),s(521),s(533),s(545),s(557),s(569),s(581),s(593),s(605),s(613),s(623),s(633),s(643),s(653),s(663),s(673),s(683),s(693),s(733),s(739),s(745),s(751),s(757),s(763),s(769),s(775),s(785),s(797),s(809),s(821),s(833),s(845),s(857),s(869),s(881),s(891),s(899),s(907),s(915),s(923),s(931),s(939),s(947)] into aux(49)
 * Joined equivalent variables [aux(50),s(365),s(381),s(397),s(413),s(429),s(445),s(461),s(477),s(493),s(611),s(621),s(631),s(641),s(651),s(661),s(671),s(681),s(691),s(783),s(795),s(807),s(819),s(831),s(843),s(855),s(867),s(879)] into aux(50)
 * Joined equivalent variables [aux(51),s(366),s(382),s(398),s(414),s(430),s(446),s(462),s(478),s(494),s(612),s(622),s(632),s(642),s(652),s(662),s(672),s(682),s(692),s(701),s(705),s(709),s(713),s(717),s(721),s(725),s(729),s(784),s(796),s(808),s(820),s(832),s(844),s(856),s(868),s(880)] into aux(51)
 * Joined equivalent variables [s(780),s(792),s(804),s(816),s(828),s(840),s(852),s(864),s(876),s(888),s(896),s(904),s(912),s(920),s(928),s(936),s(944)] into s(780)
 * Joined equivalent variables [s(510),s(522),s(534),s(546),s(558),s(570),s(582),s(594),s(606),s(734),s(740),s(746),s(752),s(758),s(764),s(770),s(776),s(892),s(900),s(908),s(916),s(924),s(932),s(940),s(948)] into s(510)
 * Joined equivalent variables [s(360),s(376),s(392),s(408),s(424),s(440),s(456),s(472),s(488),s(504),s(516),s(528),s(540),s(552),s(564),s(576),s(588),s(600),s(700),s(704),s(708),s(712),s(716),s(720),s(724),s(728),s(782),s(794),s(806),s(818),s(830),s(842),s(854),s(866),s(878),s(890),s(898),s(906),s(914),s(922),s(930),s(938),s(946)] into s(360)
 * Joined equivalent variables [s(363),s(379),s(395),s(411),s(427),s(443),s(459),s(475),s(491),s(507),s(519),s(531),s(543),s(555),s(567),s(579),s(591),s(603)] into s(363)
 * Joined equivalent variables [s(362),s(378),s(394),s(410),s(426),s(442),s(458),s(474),s(490),s(506),s(518),s(530),s(542),s(554),s(566),s(578),s(590),s(602)] into s(362)
 * Joined equivalent variables [s(781),s(793),s(805),s(817),s(829),s(841),s(853),s(865),s(877),s(889),s(897),s(905),s(913),s(921),s(929),s(937),s(945)] into s(781)
 * Joined equivalent variables [s(361),s(377),s(393),s(409),s(425),s(441),s(457),s(473),s(489),s(505),s(517),s(529),s(541),s(553),s(565),s(577),s(589),s(601),s(780)] into s(361)
 * Joined equivalent variables [s(364),s(380),s(396),s(412),s(428),s(444),s(460),s(476),s(492),s(508),s(520),s(532),s(544),s(556),s(568),s(580),s(592),s(604)] into s(364)
 * Joined equivalent variables [s(610),s(620),s(630),s(640),s(650),s(660),s(670),s(680),s(690),s(732),s(738),s(744),s(750),s(756),s(762),s(768),s(774)] into s(610)
 * Joined equivalent variables [s(368),s(384),s(400),s(416),s(432),s(448),s(464),s(480),s(496),s(512),s(524),s(536),s(548),s(560),s(572),s(584),s(596),s(608),s(614),s(624),s(634),s(644),s(654),s(664),s(674),s(684),s(694),s(736),s(742),s(748),s(754),s(760),s(766),s(772),s(778),s(786),s(798),s(810),s(822),s(834),s(846),s(858),s(870),s(882),s(894),s(902),s(910),s(918),s(926),s(934),s(942),s(950)] into s(368)
 * Joined equivalent variables [s(371),s(387),s(403),s(419),s(435),s(451),s(467),s(483),s(499),s(617),s(627),s(637),s(647),s(657),s(667),s(677),s(687),s(697),s(789),s(801),s(813),s(825),s(837),s(849),s(861),s(873),s(885)] into s(371)
 * Joined equivalent variables [s(370),s(386),s(402),s(418),s(434),s(450),s(466),s(482),s(498),s(616),s(626),s(636),s(646),s(656),s(666),s(676),s(686),s(696),s(788),s(800),s(812),s(824),s(836),s(848),s(860),s(872),s(884)] into s(370)
 * Joined equivalent variables [s(511),s(523),s(535),s(547),s(559),s(571),s(583),s(595),s(607),s(735),s(741),s(747),s(753),s(759),s(765),s(771),s(777),s(893),s(901),s(909),s(917),s(925),s(933),s(941),s(949)] into s(511)
 * Joined equivalent variables [s(369),s(385),s(401),s(417),s(433),s(449),s(465),s(481),s(497),s(510),s(615),s(625),s(635),s(645),s(655),s(665),s(675),s(685),s(695),s(787),s(799),s(811),s(823),s(835),s(847),s(859),s(871),s(883)] into s(369)
 * Joined equivalent variables [s(372),s(388),s(404),s(420),s(436),s(452),s(468),s(484),s(500),s(618),s(628),s(638),s(648),s(658),s(668),s(678),s(688),s(698),s(790),s(802),s(814),s(826),s(838),s(850),s(862),s(874),s(886)] into s(372)
 * Joined equivalent variables [s(702),s(706),s(710),s(714),s(718),s(722),s(726),s(730)] into s(702)
 * Renamed intermediate variables: 
[ (eq(176,1),aux(25))>>s(951), (eq(176,1),s(58))>>s(952), (eq(176,1),aux(26))>>s(953), (eq(176,1),s(55))>>s(954), (eq(176,1),s(57))>>s(955), (eq(176,1),s(60))>>s(956), (eq(176,1),s(61))>>s(957), (eq(176,1),s(63))>>s(958)]
 * Renamed intermediate variables: 
[ (eq(176,2),s(65))>>s(959), (eq(176,2),s(66))>>s(960)]

#### Simplifying cost structure of CE 176 
 * Renamed intermediate variables: 
[ (eq(177,1),aux(25))>>s(961), (eq(177,1),s(58))>>s(962), (eq(177,1),aux(26))>>s(963), (eq(177,1),s(55))>>s(964), (eq(177,1),s(57))>>s(965), (eq(177,1),s(60))>>s(966), (eq(177,1),s(61))>>s(967), (eq(177,1),s(63))>>s(968)]
 * Renamed intermediate variables: 
[ (eq(177,2),s(65))>>s(969), (eq(177,2),s(66))>>s(970)]

#### Simplifying cost structure of CE 177 
 * Renamed intermediate variables: 
[ (eq(178,1),aux(25))>>s(971), (eq(178,1),s(58))>>s(972), (eq(178,1),aux(26))>>s(973), (eq(178,1),s(55))>>s(974), (eq(178,1),s(57))>>s(975), (eq(178,1),s(60))>>s(976), (eq(178,1),s(61))>>s(977), (eq(178,1),s(63))>>s(978)]
 * Renamed intermediate variables: 
[ (eq(178,2),s(65))>>s(979), (eq(178,2),s(66))>>s(980)]

#### Simplifying cost structure of CE 178 
 * Renamed intermediate variables: 
[ (eq(179,1),aux(25))>>s(981), (eq(179,1),s(58))>>s(982), (eq(179,1),aux(26))>>s(983), (eq(179,1),s(55))>>s(984), (eq(179,1),s(57))>>s(985), (eq(179,1),s(60))>>s(986), (eq(179,1),s(61))>>s(987), (eq(179,1),s(63))>>s(988)]
 * Renamed intermediate variables: 
[ (eq(179,2),s(65))>>s(989), (eq(179,2),s(66))>>s(990)]

#### Simplifying cost structure of CE 179 
 * Renamed intermediate variables: 
[ (eq(180,1),aux(25))>>s(991), (eq(180,1),s(58))>>s(992), (eq(180,1),aux(26))>>s(993), (eq(180,1),s(55))>>s(994), (eq(180,1),s(57))>>s(995), (eq(180,1),s(60))>>s(996), (eq(180,1),s(61))>>s(997), (eq(180,1),s(63))>>s(998)]
 * Renamed intermediate variables: 
[ (eq(180,2),s(65))>>s(999), (eq(180,2),s(66))>>s(1000)]

#### Simplifying cost structure of CE 180 
 * Renamed intermediate variables: 
[ (eq(181,1),aux(25))>>s(1001), (eq(181,1),s(58))>>s(1002), (eq(181,1),aux(26))>>s(1003), (eq(181,1),s(55))>>s(1004), (eq(181,1),s(57))>>s(1005), (eq(181,1),s(60))>>s(1006), (eq(181,1),s(61))>>s(1007), (eq(181,1),s(63))>>s(1008)]
 * Renamed intermediate variables: 
[ (eq(181,2),s(65))>>s(1009), (eq(181,2),s(66))>>s(1010)]

#### Simplifying cost structure of CE 181 
 * Renamed intermediate variables: 
[ (eq(182,1),aux(25))>>s(1011), (eq(182,1),s(58))>>s(1012), (eq(182,1),aux(26))>>s(1013), (eq(182,1),s(55))>>s(1014), (eq(182,1),s(57))>>s(1015), (eq(182,1),s(60))>>s(1016), (eq(182,1),s(61))>>s(1017), (eq(182,1),s(63))>>s(1018)]
 * Renamed intermediate variables: 
[ (eq(182,2),s(65))>>s(1019), (eq(182,2),s(66))>>s(1020)]

#### Simplifying cost structure of CE 182 
 * Renamed intermediate variables: 
[ (eq(183,1),aux(25))>>s(1021), (eq(183,1),s(58))>>s(1022), (eq(183,1),aux(26))>>s(1023), (eq(183,1),s(55))>>s(1024), (eq(183,1),s(57))>>s(1025), (eq(183,1),s(60))>>s(1026), (eq(183,1),s(61))>>s(1027), (eq(183,1),s(63))>>s(1028)]
 * Renamed intermediate variables: 
[ (eq(183,2),s(65))>>s(1029), (eq(183,2),s(66))>>s(1030)]

#### Simplifying cost structure of CE 183 
 * Renamed intermediate variables: 
[ (eq(184,1),aux(25))>>s(1031), (eq(184,1),s(58))>>s(1032), (eq(184,1),aux(26))>>s(1033), (eq(184,1),s(55))>>s(1034), (eq(184,1),s(57))>>s(1035), (eq(184,1),s(60))>>s(1036), (eq(184,1),s(61))>>s(1037), (eq(184,1),s(63))>>s(1038)]
 * Renamed intermediate variables: 
[ (eq(184,2),s(65))>>s(1039), (eq(184,2),s(66))>>s(1040)]

#### Simplifying cost structure of CE 184 
 * Renamed intermediate variables: 
[ (eq(230,1),s(69))>>s(1041), (eq(230,1),s(68))>>s(1042), (eq(230,1),s(67))>>s(1043), (eq(230,1),s(70))>>s(1044)]
 * Renamed intermediate variables: 
[ (eq(230,2),s(65))>>s(1045), (eq(230,2),s(66))>>s(1046)]

#### Simplifying cost structure of CE 230 
 * Renamed intermediate variables: 
[ (eq(231,1),s(69))>>s(1047), (eq(231,1),s(68))>>s(1048), (eq(231,1),s(67))>>s(1049), (eq(231,1),s(70))>>s(1050)]
 * Renamed intermediate variables: 
[ (eq(231,2),s(65))>>s(1051), (eq(231,2),s(66))>>s(1052)]

#### Simplifying cost structure of CE 231 
 * Renamed intermediate variables: 
[ (eq(232,1),s(69))>>s(1053), (eq(232,1),s(68))>>s(1054), (eq(232,1),s(67))>>s(1055), (eq(232,1),s(70))>>s(1056)]
 * Renamed intermediate variables: 
[ (eq(232,2),s(65))>>s(1057), (eq(232,2),s(66))>>s(1058)]

#### Simplifying cost structure of CE 232 
 * Renamed intermediate variables: 
[ (eq(233,1),s(69))>>s(1059), (eq(233,1),s(68))>>s(1060), (eq(233,1),s(67))>>s(1061), (eq(233,1),s(70))>>s(1062)]
 * Renamed intermediate variables: 
[ (eq(233,2),s(65))>>s(1063), (eq(233,2),s(66))>>s(1064)]

#### Simplifying cost structure of CE 233 
 * Renamed intermediate variables: 
[ (eq(234,1),s(69))>>s(1065), (eq(234,1),s(68))>>s(1066), (eq(234,1),s(67))>>s(1067), (eq(234,1),s(70))>>s(1068)]
 * Renamed intermediate variables: 
[ (eq(234,2),s(65))>>s(1069), (eq(234,2),s(66))>>s(1070)]

#### Simplifying cost structure of CE 234 
 * Renamed intermediate variables: 
[ (eq(235,1),s(69))>>s(1071), (eq(235,1),s(68))>>s(1072), (eq(235,1),s(67))>>s(1073), (eq(235,1),s(70))>>s(1074)]
 * Renamed intermediate variables: 
[ (eq(235,2),s(65))>>s(1075), (eq(235,2),s(66))>>s(1076)]

#### Simplifying cost structure of CE 235 
 * Renamed intermediate variables: 
[ (eq(236,1),s(69))>>s(1077), (eq(236,1),s(68))>>s(1078), (eq(236,1),s(67))>>s(1079), (eq(236,1),s(70))>>s(1080)]
 * Renamed intermediate variables: 
[ (eq(236,2),s(65))>>s(1081), (eq(236,2),s(66))>>s(1082)]

#### Simplifying cost structure of CE 236 
 * Renamed intermediate variables: 
[ (eq(237,1),s(69))>>s(1083), (eq(237,1),s(68))>>s(1084), (eq(237,1),s(67))>>s(1085), (eq(237,1),s(70))>>s(1086)]
 * Renamed intermediate variables: 
[ (eq(237,2),s(65))>>s(1087), (eq(237,2),s(66))>>s(1088)]

#### Simplifying cost structure of CE 237 
 * Joined equivalent variables [aux(53),s(953),s(963),s(973),s(983),s(993),s(1003),s(1013),s(1023),s(1033),s(1041),s(1047),s(1053),s(1059),s(1065),s(1071),s(1077),s(1083)] into aux(53)
 * Joined equivalent variables [aux(54),s(951),s(961),s(971),s(981),s(991),s(1001),s(1011),s(1021),s(1031)] into aux(54)
 * Joined equivalent variables [aux(55),s(952),s(962),s(972),s(982),s(992),s(1002),s(1012),s(1022),s(1032)] into aux(55)
 * Joined equivalent variables [aux(57),s(959),s(969),s(979),s(989),s(999),s(1009),s(1019),s(1029),s(1039),s(1045),s(1051),s(1057),s(1063),s(1069),s(1075),s(1081),s(1087)] into aux(57)
 * Joined equivalent variables [s(1042),s(1048),s(1054),s(1060),s(1066),s(1072),s(1078),s(1084)] into s(1042)
 * Joined equivalent variables [s(954),s(964),s(974),s(984),s(994),s(1004),s(1014),s(1024),s(1034),s(1044),s(1050),s(1056),s(1062),s(1068),s(1074),s(1080),s(1086)] into s(954)
 * Joined equivalent variables [s(957),s(967),s(977),s(987),s(997),s(1007),s(1017),s(1027),s(1037)] into s(957)
 * Joined equivalent variables [s(956),s(966),s(976),s(986),s(996),s(1006),s(1016),s(1026),s(1036)] into s(956)
 * Joined equivalent variables [s(1043),s(1049),s(1055),s(1061),s(1067),s(1073),s(1079),s(1085)] into s(1043)
 * Joined equivalent variables [s(955),s(965),s(975),s(985),s(995),s(1005),s(1015),s(1025),s(1035),s(1042)] into s(955)
 * Joined equivalent variables [s(958),s(968),s(978),s(988),s(998),s(1008),s(1018),s(1028),s(1038)] into s(958)
 * Joined equivalent variables [s(960),s(970),s(980),s(990),s(1000),s(1010),s(1020),s(1030),s(1040),s(1046),s(1052),s(1058),s(1064),s(1070),s(1076),s(1082),s(1088)] into s(960)
 * Renamed intermediate variables: 
[ (eq(211,1),s(65))>>s(1089), (eq(211,1),s(66))>>s(1090)]
 * Renamed intermediate variables: 
[ (eq(211,2),s(65))>>s(1091), (eq(211,2),s(66))>>s(1092)]

#### Simplifying cost structure of CE 211 
 * Renamed intermediate variables: 
[ (eq(220,1),s(65))>>s(1093), (eq(220,1),s(66))>>s(1094)]
 * Renamed intermediate variables: 
[ (eq(220,2),s(69))>>s(1095), (eq(220,2),s(68))>>s(1096), (eq(220,2),s(67))>>s(1097), (eq(220,2),s(70))>>s(1098)]

#### Simplifying cost structure of CE 220 
 * Renamed intermediate variables: 
[ (eq(238,1),s(69))>>s(1099), (eq(238,1),s(68))>>s(1100), (eq(238,1),s(67))>>s(1101), (eq(238,1),s(70))>>s(1102)]
 * Renamed intermediate variables: 
[ (eq(238,2),s(65))>>s(1103), (eq(238,2),s(66))>>s(1104)]

#### Simplifying cost structure of CE 238 
 * Renamed intermediate variables: 
[ (eq(247,1),s(69))>>s(1105), (eq(247,1),s(68))>>s(1106), (eq(247,1),s(67))>>s(1107), (eq(247,1),s(70))>>s(1108)]
 * Renamed intermediate variables: 
[ (eq(247,2),s(69))>>s(1109), (eq(247,2),s(68))>>s(1110), (eq(247,2),s(67))>>s(1111), (eq(247,2),s(70))>>s(1112)]

#### Simplifying cost structure of CE 247 
 * Renamed intermediate variables: 
[ (ch([147]),aux(53))>>s(1113), (ch([147]),aux(54))>>s(1114), (ch([147]),aux(55))>>s(1115), (ch([147]),aux(56))>>s(1116), (ch([147]),aux(57))>>s(1117), (ch([147]),s(955))>>s(1118), (ch([147]),s(1043))>>s(1119), (ch([147]),s(960))>>s(1120), (ch([147]),s(954))>>s(1121), (ch([147]),s(956))>>s(1122), (ch([147]),s(957))>>s(1123), (ch([147]),s(958))>>s(1124)]
 * Renamed intermediate variables: 
[ (ch([148]),aux(45))>>s(1125), (ch([148]),aux(46))>>s(1126), (ch([148]),aux(47))>>s(1127), (ch([148]),aux(48))>>s(1128), (ch([148]),aux(49))>>s(1129), (ch([148]),aux(50))>>s(1130), (ch([148]),aux(51))>>s(1131), (ch([148]),aux(52))>>s(1132), (ch([148]),s(361))>>s(1133), (ch([148]),s(781))>>s(1134), (ch([148]),s(369))>>s(1135), (ch([148]),s(511))>>s(1136), (ch([148]),s(368))>>s(1137), (ch([148]),s(370))>>s(1138), (ch([148]),s(371))>>s(1139), (ch([148]),s(372))>>s(1140), (ch([148]),s(360))>>s(1141), (ch([148]),s(362))>>s(1142), (ch([148]),s(363))>>s(1143), (ch([148]),s(364))>>s(1144), (ch([148]),s(702))>>s(1145), (ch([148]),s(610))>>s(1146)]
 * Joined equivalent variables [aux(58),s(1113),s(1125)] into aux(58)
 * Joined equivalent variables [aux(59),s(1114),s(1126)] into aux(59)
 * Joined equivalent variables [aux(60),s(1115),s(1127)] into aux(60)
 * Joined equivalent variables [aux(61),s(1116),s(1128)] into aux(61)
 * Joined equivalent variables [aux(62),s(1117),s(1131)] into aux(62)
 * Joined equivalent variables [s(1121),s(1141)] into s(1121)
 * Joined equivalent variables [s(1123),s(1143)] into s(1123)
 * Joined equivalent variables [s(1122),s(1142)] into s(1122)
 * Joined equivalent variables [s(1119),s(1134)] into s(1119)
 * Joined equivalent variables [s(1118),s(1133)] into s(1118)
 * Joined equivalent variables [s(1124),s(1144)] into s(1124)
 * Joined equivalent variables [s(1120),s(1145)] into s(1120)

#### Cost of chains of case_17(A,B,C,D,E,F,G,H,I,J,K):
* Chain [148]: 446*s(360)+426*s(361)+180*s(362)+180*s(363)+108*s(364)+474*s(368)+636*s(369)+270*s(370)+270*s(371)+162*s(372)+250*s(511)+272*s(610)+128*s(702)+170*s(781)+48
  Such that:aux(45) =< A
aux(46) =< B
aux(47) =< B+1
aux(48) =< B/2
aux(49) =< E
aux(50) =< F
aux(51) =< F+1
aux(52) =< F/2
s(361) =< aux(46)
s(781) =< aux(48)
s(369) =< aux(50)
s(511) =< aux(52)
s(368) =< aux(49)
s(370) =< aux(49)
s(371) =< aux(49)
s(372) =< aux(50)
s(370) =< aux(51)
s(372) =< aux(51)
s(371) =< aux(50)
s(360) =< aux(45)
s(362) =< aux(45)
s(363) =< aux(45)
s(364) =< aux(46)
s(362) =< aux(47)
s(364) =< aux(47)
s(363) =< aux(46)
s(511) =< aux(49)
s(702) =< aux(51)
s(781) =< aux(45)
s(610) =< aux(47)

  with precondition: [D=1,H=1,K=0,A>=2,C>=0,E>=2,G>=0,I>=0,J>=0,B+1>=A,F+1>=E] 

* Chain [147]: 156*s(954)+210*s(955)+90*s(956)+90*s(957)+54*s(958)+272*s(960)+80*s(1043)+41
  Such that:aux(53) =< A
aux(54) =< B
aux(55) =< B+1
aux(56) =< B/2
aux(57) =< F+1
s(955) =< aux(54)
s(1043) =< aux(56)
s(960) =< aux(57)
s(954) =< aux(53)
s(956) =< aux(53)
s(957) =< aux(53)
s(958) =< aux(54)
s(956) =< aux(55)
s(958) =< aux(55)
s(957) =< aux(54)
s(1043) =< aux(53)

  with precondition: [D=1,H=1,K=0,E=F+1,A>=2,C>=0,E>=2,I>=0,J>=0,B+1>=A,G+1>=E] 

* Chain [146]: 16*s(1090)+16*s(1092)+34
  Such that:s(1089) =< A
s(1091) =< F+1
s(1092) =< s(1091)
s(1090) =< s(1089)

  with precondition: [D=1,H=1,K=1,A=B+1,E=F+1,A>=2,E>=2,I>=0,J>=0,C+1>=A,G+1>=E] 

* Chain [145]: 16*s(1094)+6*s(1096)+10*s(1097)+6*s(1098)+34
  Such that:s(1093) =< B+1
s(1095) =< E
s(1096) =< F
s(1097) =< F/2
s(1098) =< s(1095)
s(1097) =< s(1095)
s(1094) =< s(1093)

  with precondition: [D=1,H=1,K=1,A=B+1,A>=2,E>=2,I>=0,J>=0,F+2>=2*E,C+1>=A,G>=E] 

* Chain [144]: 6*s(1100)+10*s(1101)+6*s(1102)+16*s(1104)+34
  Such that:s(1099) =< A
s(1100) =< B
s(1101) =< B/2
s(1103) =< F+1
s(1104) =< s(1103)
s(1102) =< s(1099)
s(1101) =< s(1099)

  with precondition: [D=1,H=1,K=1,E=F+1,A>=2,E>=2,I>=0,J>=0,B+2>=2*A,C>=A,G+1>=E] 

* Chain [143]: 6*s(1106)+10*s(1107)+6*s(1108)+6*s(1110)+10*s(1111)+6*s(1112)+34
  Such that:s(1105) =< A
s(1106) =< B
s(1107) =< B/2
s(1109) =< E
s(1110) =< F
s(1111) =< F/2
s(1112) =< s(1109)
s(1111) =< s(1109)
s(1108) =< s(1105)
s(1107) =< s(1105)

  with precondition: [D=1,H=1,K=1,A>=2,E>=2,I>=0,J>=0,B+2>=2*A,F+2>=2*E,C>=A,G>=E] 

 * Renamed intermediate variables: 
[ (eq(248,1),s(1129))>>s(1147), (eq(248,1),s(1130))>>s(1148), (eq(248,1),s(1132))>>s(1149), (eq(248,1),aux(58))>>s(1150), (eq(248,1),aux(59))>>s(1151), (eq(248,1),aux(60))>>s(1152), (eq(248,1),aux(61))>>s(1153), (eq(248,1),aux(62))>>s(1154), (eq(248,1),s(1118))>>s(1155), (eq(248,1),s(1119))>>s(1156), (eq(248,1),s(1120))>>s(1157), (eq(248,1),s(1121))>>s(1158), (eq(248,1),s(1122))>>s(1159), (eq(248,1),s(1123))>>s(1160), (eq(248,1),s(1124))>>s(1161), (eq(248,1),s(1135))>>s(1162), (eq(248,1),s(1136))>>s(1163), (eq(248,1),s(1137))>>s(1164), (eq(248,1),s(1138))>>s(1165), (eq(248,1),s(1139))>>s(1166), (eq(248,1),s(1140))>>s(1167), (eq(248,1),s(1146))>>s(1168)]

#### Simplifying cost structure of CE 248 
 * Renamed intermediate variables: 
[ (eq(249,1),s(1089))>>s(1169), (eq(249,1),s(1091))>>s(1170), (eq(249,1),s(1092))>>s(1171), (eq(249,1),s(1090))>>s(1172)]

#### Simplifying cost structure of CE 249 
 * Renamed intermediate variables: 
[ (eq(250,1),s(1093))>>s(1173), (eq(250,1),s(1095))>>s(1174), (eq(250,1),s(1096))>>s(1175), (eq(250,1),s(1097))>>s(1176), (eq(250,1),s(1098))>>s(1177), (eq(250,1),s(1094))>>s(1178)]

#### Simplifying cost structure of CE 250 
 * Renamed intermediate variables: 
[ (eq(251,1),s(1099))>>s(1179), (eq(251,1),s(1100))>>s(1180), (eq(251,1),s(1101))>>s(1181), (eq(251,1),s(1103))>>s(1182), (eq(251,1),s(1104))>>s(1183), (eq(251,1),s(1102))>>s(1184)]

#### Simplifying cost structure of CE 251 
 * Renamed intermediate variables: 
[ (eq(252,1),s(1105))>>s(1185), (eq(252,1),s(1106))>>s(1186), (eq(252,1),s(1107))>>s(1187), (eq(252,1),s(1109))>>s(1188), (eq(252,1),s(1110))>>s(1189), (eq(252,1),s(1111))>>s(1190), (eq(252,1),s(1112))>>s(1191), (eq(252,1),s(1108))>>s(1192)]

#### Simplifying cost structure of CE 252 

#### Cost of chains of check_sanity(A,B,C,D,E,F,G,H,I):
* Chain [153]: 636*s(1155)+250*s(1156)+400*s(1157)+602*s(1158)+270*s(1159)+270*s(1160)+162*s(1161)+636*s(1162)+250*s(1163)+474*s(1164)+270*s(1165)+270*s(1166)+162*s(1167)+272*s(1168)+51
  Such that:s(1150) =< A
s(1151) =< B
s(1152) =< B+1
s(1153) =< B/2
s(1147) =< E
s(1148) =< F
s(1154) =< F+1
s(1149) =< F/2
s(1155) =< s(1151)
s(1156) =< s(1153)
s(1157) =< s(1154)
s(1158) =< s(1150)
s(1159) =< s(1150)
s(1160) =< s(1150)
s(1161) =< s(1151)
s(1159) =< s(1152)
s(1161) =< s(1152)
s(1160) =< s(1151)
s(1156) =< s(1150)
s(1162) =< s(1148)
s(1163) =< s(1149)
s(1164) =< s(1147)
s(1165) =< s(1147)
s(1166) =< s(1147)
s(1167) =< s(1148)
s(1165) =< s(1154)
s(1167) =< s(1154)
s(1166) =< s(1148)
s(1163) =< s(1147)
s(1168) =< s(1152)

  with precondition: [D=1,H=1,I=0,A>=2,C>=0,E>=2,G>=0,B+1>=A,F+1>=E] 

* Chain [152]: 16*s(1171)+16*s(1172)+37
  Such that:s(1169) =< A
s(1170) =< F+1
s(1171) =< s(1170)
s(1172) =< s(1169)

  with precondition: [D=1,H=1,I=1,A=B+1,E=F+1,A>=2,E>=2,C+1>=A,G+1>=E] 

* Chain [151]: 6*s(1175)+10*s(1176)+6*s(1177)+16*s(1178)+37
  Such that:s(1173) =< B+1
s(1174) =< E
s(1175) =< F
s(1176) =< F/2
s(1177) =< s(1174)
s(1176) =< s(1174)
s(1178) =< s(1173)

  with precondition: [D=1,H=1,I=1,A=B+1,A>=2,E>=2,F+2>=2*E,C+1>=A,G>=E] 

* Chain [150]: 6*s(1180)+10*s(1181)+16*s(1183)+6*s(1184)+37
  Such that:s(1179) =< A
s(1180) =< B
s(1181) =< B/2
s(1182) =< F+1
s(1183) =< s(1182)
s(1184) =< s(1179)
s(1181) =< s(1179)

  with precondition: [D=1,H=1,I=1,E=F+1,A>=2,E>=2,B+2>=2*A,C>=A,G+1>=E] 

* Chain [149]: 6*s(1186)+10*s(1187)+6*s(1189)+10*s(1190)+6*s(1191)+6*s(1192)+37
  Such that:s(1185) =< A
s(1186) =< B
s(1187) =< B/2
s(1188) =< E
s(1189) =< F
s(1190) =< F/2
s(1191) =< s(1188)
s(1190) =< s(1188)
s(1192) =< s(1185)
s(1187) =< s(1185)

  with precondition: [D=1,H=1,I=1,A>=2,E>=2,B+2>=2*A,F+2>=2*E,C>=A,G>=E] 


#### Simplifying cost structure of CE 255 

#### Computing cost of phase [156] 

#### Simplifying cost structure of CE 254 

#### Cost of loops [156] 

 * loop 156:lineMult(A,B,C,D,E,F,G) -> [lineMult(A',B',C',D',E',F',G')] 
9
##### Pending set lineMult(A,B,C,D,E,F,G)
* Psum in Loop 156: [it(156)=<1]

###### Computing sum for it(156)=<1  in Loop 156 
   - Applying inductive sum strategy 
     - head Candidate: B-1 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(156)=<B-1,it(156)=<B-1,it(156)=<B-B',it(156)=<B-B'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [156] 

#### Simplifying cost structure of phase [156] 

#### Cost of phase [156]:lineMult(A,B,C,D,E,F,G) -> [lineMult(A',B',C',D',E',F',G')] 
9*it(156)+0
  Such that:it(156) =< B
it(156) =< B-B'

#### Simplifying cost structure of chain [[156],154] 

#### Computing cost of phase [155] 

#### Simplifying cost structure of CE 253 

#### Cost of loops [155] 

 * loop 155:lineMult(A,B,C,D,E,F,G) -> [lineMult(A',B',C',D',E',F',G')] 
10
##### Pending set lineMult(A,B,C,D,E,F,G)
* Psum in Loop 155: [it(155)=<1]

###### Computing sum for it(155)=<1  in Loop 155 
   - Applying inductive sum strategy 
     - head Candidate: B-1 
     - head Candidate: D-1 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
     - tail Candidate: D-1 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(155)=<B-1,it(155)=<D-1,it(155)=<B-1,it(155)=<D-1,it(155)=<B-B',it(155)=<D-D',it(155)=<B-B',it(155)=<D-D'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [155] 

#### Simplifying cost structure of phase [155] 

#### Cost of phase [155]:lineMult(A,B,C,D,E,F,G) -> [lineMult(A',B',C',D',E',F',G')] 
10*it(155)+0
  Such that:it(155) =< B
it(155) =< B-B'
it(155) =< D
it(155) =< D-D'

#### Simplifying cost structure of chain [[155],[156],154] 

#### Found solution for phase  [155] in the cache 

#### Cost of phase [155]:lineMult(A,B,C,D,E,F,G) -> [lineMult(A',B',C',D',E',F',G')] 
10*it(155)+0
  Such that:it(155) =< B
it(155) =< B-B'
it(155) =< D
it(155) =< D-D'

#### Simplifying cost structure of chain [[155],154] 

#### Cost of chains of lineMult(A,B,C,D,E,F,G):
* Chain [[156],154]: 9*it(156)+3
  Such that:it(156) =< F

  with precondition: [D=1,B=F,A>=0,B>=2,C>=0,E>=0,G>=0] 

* Chain [[155],[156],154]: 10*it(155)+9*it(156)+3
  Such that:it(156) =< -D+F+1
it(155) =< D

  with precondition: [B=F,A>=0,C>=0,D>=2,E>=0,G>=0,B>=D+1] 

* Chain [[155],154]: 10*it(155)+3
  Such that:it(155) =< F

  with precondition: [B=F,A>=0,B>=2,C>=0,E>=0,G>=0,D>=B] 

* Chain [154]: 3
  with precondition: [B=1,F=1,A>=0,C>=0,D>=0,E>=0,G>=0] 


#### Simplifying cost structure of CE 261 

#### Computing cost of phase [159,160,161,162] 
 * Renamed intermediate variables: 
[ (eq(258,1),it(155))>>s(1193)]

#### Simplifying cost structure of CE 258 
 * Renamed intermediate variables: 
[ (it(159),s(1193))>>s(1194)]
 * Renamed intermediate variables: 
[ (eq(259,1),it(156))>>s(1195), (eq(259,1),it(155))>>s(1196)]

#### Simplifying cost structure of CE 259 
 * Renamed intermediate variables: 
[ (it(160),s(1195))>>s(1197), (it(160),s(1196))>>s(1198)]

#### Simplifying cost structure of CE 256 
 * Renamed intermediate variables: 
[ (eq(257,1),it(156))>>s(1199)]

#### Simplifying cost structure of CE 257 
 * Renamed intermediate variables: 
[ (it(162),s(1199))>>s(1200)]

#### Cost of loops [159,160,161,162] 

 * loop 159:computeLine(A,B,C,D,E,F,G,H,I) -> [computeLine(A',B',C',D',E',F',G',H',I')] 
10*s(1194)+11
  Such that:s(1194) =< F'

 * loop 160:computeLine(A,B,C,D,E,F,G,H,I) -> [computeLine(A',B',C',D',E',F',G',H',I')] 
9*s(1197)+10*s(1198)+11
  Such that:s(1197) =< -F+F'+1
s(1198) =< F

 * loop 161:computeLine(A,B,C,D,E,F,G,H,I) -> [computeLine(A',B',C',D',E',F',G',H',I')] 
11
 * loop 162:computeLine(A,B,C,D,E,F,G,H,I) -> [computeLine(A',B',C',D',E',F',G',H',I')] 
9*s(1200)+11
  Such that:s(1200) =< F'

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Psum in Loop 159: [it(159)=<1,s(1201)=<F']
* Psum in Loop 160: [it(160)=<1,s(1202)=< -F+F'+1,s(1203)=<F]
* Psum in Loop 161: [it(161)=<1]
* Psum in Loop 162: [it(162)=<1,s(1204)=<F']

###### Computing sum for it(159)=<1  in Loop 159 
   - Applying inductive sum strategy 
     - head Candidate: D+1 
       - Loop 160 is collaborative and bounds [it(160)] 
       - Loop 161 is collaborative and bounds [it(161)] 
       - Loop 162 is collaborative and bounds [it(162)] 
     - head Candidate: A-1 
       - Loop 160 is collaborative and bounds [it(160)] 
       - Loop 161 is collaborative and bounds [it(161)] 
       - Loop 162 is collaborative and bounds [it(162)] 
     - head Candidate: C-1 
       - Loop 160 is collaborative and bounds [it(160)] 
       - Loop 161 is collaborative and bounds [it(161)] 
       - Loop 162 is collaborative and bounds [it(162)] 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D/2+1/2 
       - Loop 160 is collaborative and bounds [it(160)] 
       - Loop 161 is collaborative
       - Loop 162 is collaborative and bounds [it(162)] 
     - tail Candidate: D+1 
       - Loop 160 is collaborative and bounds [it(160)] 
       - Loop 161 is collaborative and bounds [it(161)] 
       - Loop 162 is collaborative and bounds [it(162)] 
     - tail Candidate: A-1 
       - Loop 160 is collaborative and bounds [it(160)] 
       - Loop 161 is collaborative and bounds [it(161)] 
       - Loop 162 is collaborative and bounds [it(162)] 
     - tail Candidate: C-1 
       - Loop 160 is collaborative and bounds [it(160)] 
       - Loop 161 is collaborative and bounds [it(161)] 
       - Loop 162 is collaborative and bounds [it(162)] 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D/2+1/2 
       - Loop 160 is collaborative and bounds [it(160)] 
       - Loop 161 is collaborative
       - Loop 162 is collaborative and bounds [it(162)] 
 * Adding constraints: [it(159)+it(160)+it(161)+it(162)=<D+1,it(159)+it(160)+it(161)+it(162)=<A-1,it(159)+it(160)+it(161)+it(162)=<C-1,it(159)+it(160)+it(161)+it(162)=<A-1,it(159)+it(160)+it(161)+it(162)=<C-1,it(159)+it(160)+it(162)=<D/2+1/2,it(159)+it(160)+it(161)+it(162)=<D-D',it(159)+it(160)+it(161)+it(162)=<A-A',it(159)+it(160)+it(161)+it(162)=<C-C',it(159)+it(160)+it(161)+it(162)=<A-A',it(159)+it(160)+it(161)+it(162)=<C-C',it(159)+it(160)+it(162)=<D/2-D'/2] 

##### Pending set A
* Psum in Loop 159: [s(1201)=<F']
* Psum in Loop 160: [it(160)=<1,s(1202)=< -F+F'+1,s(1203)=<F]
* Psum in Loop 161: [it(161)=<1]
* Psum in Loop 162: [it(162)=<1,s(1204)=<F']

###### Computing sum for s(1201)=<F'  in Loop 159 
   - Applying inductive sum strategy 
     - head Candidate: A+D+F-2 
       - Loop 160 is collaborative and bounds [it(160)] 
       - Loop 161 is collaborative and bounds [it(161)] 
       - Loop 162 is collaborative and bounds [it(162)] 
     - head Candidate: D+F+1 
       - Loop 160 is collaborative and bounds [it(160)] 
       - Loop 161 is collaborative
       - Loop 162 is collaborative and bounds [it(162)] 
     - tail Candidate: A+D+F-2 
       - Loop 160 is collaborative and bounds [it(160)] 
       - Loop 161 is collaborative and bounds [it(161)] 
       - Loop 162 is collaborative and bounds [it(162)] 
     - tail Candidate: D+F+1 
       - Loop 160 is collaborative and bounds [it(160)] 
       - Loop 161 is collaborative
       - Loop 162 is collaborative and bounds [it(162)] 
 * Adding constraints: [it(160)+it(161)+it(162)+s(1201)=<A+D+F-2,it(160)+it(162)+s(1201)=<D+F+1,it(160)+it(161)+it(162)+s(1201)=<A+D+F-A'-D'-F',it(160)+it(162)+s(1201)=<D+F-D'-F'] 

##### Pending set A
* Psum in Loop 160: [it(160)=<1,s(1202)=< -F+F'+1,s(1203)=<F]
* Psum in Loop 161: [it(161)=<1]
* Psum in Loop 162: [it(162)=<1,s(1204)=<F']

###### Computing sum for it(160)=<1  in Loop 160 
   - Applying inductive sum strategy 
     - head Candidate: D+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D/3+1/3 
       - Loop 159 is collaborative
       - Loop 161 is collaborative
       - Loop 162 is collaborative
     - head Candidate: D/2+F/2-1/2 
       - Loop 159 is collaborative
       - Loop 161 is collaborative
       - Loop 162 is collaborative
     - tail Candidate: D+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D/3+1/3 
       - Loop 159 is collaborative
       - Loop 161 is collaborative
       - Loop 162 is collaborative
     - tail Candidate: D/2+F/2-1/2 
       - Loop 159 is collaborative
       - Loop 161 is collaborative
       - Loop 162 is collaborative
 * Adding constraints: [it(159)+it(160)+it(161)+it(162)=<D+1,it(159)+it(160)+it(161)+it(162)=<A-1,it(159)+it(160)+it(161)+it(162)=<C-1,it(159)+it(160)+it(161)+it(162)=<A-1,it(159)+it(160)+it(161)+it(162)=<C-1,it(160)=<D/3+1/3,it(160)=<D/2+F/2-1/2,it(159)+it(160)+it(161)+it(162)=<D-D',it(159)+it(160)+it(161)+it(162)=<A-A',it(159)+it(160)+it(161)+it(162)=<C-C',it(159)+it(160)+it(161)+it(162)=<A-A',it(159)+it(160)+it(161)+it(162)=<C-C',it(160)=<D/3-D'/3,it(160)=<D/2+F/2-D'/2-F'/2] 

##### Pending set A
* Psum in Loop 160: [s(1202)=< -F+F'+1,s(1203)=<F]
* Psum in Loop 161: [it(161)=<1]
* Psum in Loop 162: [it(162)=<1,s(1204)=<F']

###### Computing sum for s(1202)=< -F+F'+1  in Loop 160 
   - Applying inductive sum strategy 
     - head Candidate: D-F+1 
       - Loop 159 has a reset to  [D-3]
       - Loop 161 has a reset to  [D-1]
       - Loop 162 is collaborative and bounds [it(162)] 
     - head Candidate: D-1 
       - Loop 159 is collaborative
       - Loop 161 is collaborative
       - Loop 162 is collaborative and bounds [it(162)] 
     - tail Candidate: D-F+1 
       - Loop 159 has undefined behavior 
     - tail Candidate: D-1 
       - Loop 159 is collaborative
       - Loop 161 is collaborative and bounds [it(161)] 
       - Loop 162 is collaborative and bounds [it(162)] 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(66)=<D-F+1] 
 * Adding constraints: [s(1202)=<it(160)*aux(66),it(162)+s(1202)=<aux(64)+aux(63)+aux(65),aux(65)=<D-F+1,it(162)+s(1202)=<D-1,it(161)+it(162)+s(1202)=<D-D'] 

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(66)=<D-F+1]
* Psum in Loop 159: [aux(63)=<D-3]
* Psum in Loop 160: [s(1203)=<F]
* Psum in Loop 161: [it(161)=<1,aux(64)=<D-1]
* Psum in Loop 162: [it(162)=<1,s(1204)=<F']

###### Computing max_min for aux(66)=<D-F+1  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(66)=<D+1] 

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Psum in Loop 159: [aux(63)=<D-3]
* Psum in Loop 160: [s(1203)=<F]
* Psum in Loop 161: [it(161)=<1,aux(64)=<D-1]
* Psum in Loop 162: [it(162)=<1,s(1204)=<F']

###### Computing sum for aux(63)=<D-3  in Loop 159 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(67)=<D-3] 
 * Adding constraints: [aux(63)=<it(159)*aux(67)] 

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(67)=<D-3]
* Psum in Loop 160: [s(1203)=<F]
* Psum in Loop 161: [it(161)=<1,aux(64)=<D-1]
* Psum in Loop 162: [it(162)=<1,s(1204)=<F']

###### Computing max_min for aux(67)=<D-3  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(67)=<D-3] 

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Psum in Loop 160: [s(1203)=<F]
* Psum in Loop 161: [it(161)=<1,aux(64)=<D-1]
* Psum in Loop 162: [it(162)=<1,s(1204)=<F']

###### Computing sum for s(1203)=<F  in Loop 160 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A+D+F-2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A+D+F-2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(162)+s(1203)=<D-1,it(161)+it(162)+s(1201)+s(1203)=<A+D+F-2,it(161)+it(162)+s(1203)=<D-D',it(161)+it(162)+s(1201)+s(1203)=<A+D+F-A'-D'-F'] 

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Psum in Loop 161: [it(161)=<1,aux(64)=<D-1]
* Psum in Loop 162: [it(162)=<1,s(1204)=<F']

###### Computing sum for it(161)=<1  in Loop 161 
   - Applying inductive sum strategy 
     - head Candidate: D+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(159)+it(160)+it(161)+it(162)=<D+1,it(159)+it(160)+it(161)+it(162)=<A-1,it(159)+it(160)+it(161)+it(162)=<C-1,it(159)+it(160)+it(161)+it(162)=<A-1,it(159)+it(160)+it(161)+it(162)=<C-1,it(159)+it(160)+it(161)+it(162)=<D+1,it(159)+it(160)+it(161)+it(162)=<D-D',it(159)+it(160)+it(161)+it(162)=<A-A',it(159)+it(160)+it(161)+it(162)=<C-C',it(159)+it(160)+it(161)+it(162)=<A-A',it(159)+it(160)+it(161)+it(162)=<C-C',it(159)+it(160)+it(161)+it(162)=<D-D'] 

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Psum in Loop 161: [aux(64)=<D-1]
* Psum in Loop 162: [it(162)=<1,s(1204)=<F']

###### Computing sum for aux(64)=<D-1  in Loop 161 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(68)=<D-1] 
 * Adding constraints: [aux(64)=<it(161)*aux(68)] 

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(68)=<D-1]
* Psum in Loop 162: [it(162)=<1,s(1204)=<F']

###### Computing max_min for aux(68)=<D-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(68)=<aux(67)+2] 

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Psum in Loop 162: [it(162)=<1,s(1204)=<F']

###### Computing sum for it(162)=<1  in Loop 162 
   - Applying inductive sum strategy 
     - head Candidate: D+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -F+2 
       - Loop 159 has a reset to  [0]
       - Loop 160 is collaborative
       - Loop 161 has a reset to  [1]
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D+F 
       - Loop 159 is collaborative
       - Loop 160 is collaborative
       - Loop 161 is collaborative
     - tail Candidate: D+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -F+2 
       - Loop 159 has undefined behavior 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D+F 
       - Loop 159 is collaborative
       - Loop 160 is collaborative
       - Loop 161 is collaborative
 * Adding constraints: [it(162)=<aux(70)+aux(69)+aux(71),it(159)+it(160)+it(161)+it(162)=<D+1,it(159)+it(160)+it(161)+it(162)=<A-1,it(159)+it(160)+it(161)+it(162)=<C-1,aux(71)=< -F+2,it(159)+it(160)+it(161)+it(162)=<A-1,it(159)+it(160)+it(161)+it(162)=<C-1,it(159)+it(160)+it(162)=<D/2+1/2,it(162)=<D+F,it(159)+it(160)+it(161)+it(162)=<D-D',it(159)+it(160)+it(161)+it(162)=<A-A',it(159)+it(160)+it(161)+it(162)=<C-C',it(159)+it(160)+it(161)+it(162)=<A-A',it(159)+it(160)+it(161)+it(162)=<C-C',it(159)+it(160)+it(162)=<D/2-D'/2,it(162)=<D+F-D'-F'] 

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Psum in Loop 159: [aux(69)=<0]
* Psum in Loop 161: [aux(70)=<1]
* Psum in Loop 162: [s(1204)=<F']

###### Computing sum for aux(69)=<0  in Loop 159 
 * Adding constraints: [aux(69)=<0] 

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Psum in Loop 161: [aux(70)=<1]
* Psum in Loop 162: [s(1204)=<F']

###### Computing sum for aux(70)=<1  in Loop 161 
   - Found a solution using cacheing 
 * Adding constraints: [aux(70)=<aux(72),aux(72)+it(159)+it(160)+it(162)=<D+1,aux(72)+it(159)+it(160)+it(162)=<A-1,aux(72)+it(159)+it(160)+it(162)=<C-1,aux(72)+it(159)+it(160)+it(162)=<A-1,aux(72)+it(159)+it(160)+it(162)=<C-1,aux(72)+it(159)+it(160)+it(162)=<D+1,aux(72)+it(159)+it(160)+it(162)=<D-D',aux(72)+it(159)+it(160)+it(162)=<A-A',aux(72)+it(159)+it(160)+it(162)=<C-C',aux(72)+it(159)+it(160)+it(162)=<A-A',aux(72)+it(159)+it(160)+it(162)=<C-C',aux(72)+it(159)+it(160)+it(162)=<D-D'] 

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Psum in Loop 162: [s(1204)=<F']

###### Computing sum for s(1204)=<F'  in Loop 162 
   - Applying inductive sum strategy 
     - head Candidate: D 
       - Loop 159 is collaborative
       - Loop 160 is collaborative
       - Loop 161 is collaborative
     - tail Candidate: D 
       - Loop 159 is collaborative
       - Loop 160 is collaborative
       - Loop 161 is collaborative
 * Adding constraints: [s(1204)=<D,s(1204)=<D-D'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [159,160,161,162] 

#### Simplifying cost structure of phase [159,160,161,162] 
 * Joined equivalent variables [aux(72),aux(70)] into aux(72)
 * Joined equivalent variables [aux(79),aux(67)] into aux(79)
 * Joined equivalent variables [aux(80),aux(66)] into aux(80)

#### Cost of phase [159,160,161,162]:computeLine(A,B,C,D,E,F,G,H,I) -> [computeLine(A',B',C',D',E',F',G',H',I')] 
11*it(159)+11*it(160)+11*it(161)+11*it(162)+10*s(1201)+9*s(1202)+10*s(1203)+9*s(1204)+0
  Such that:aux(65) =< D-F+1
it(162) =< D+F
it(160) =< D/2+F/2
it(160) =< D/2+F/2-D'/2-F'/2
it(160) =< D/3+1/3
it(160) =< D/3-D'/3
aux(71) =< -F+2
aux(73) =< A
aux(74) =< A+D+F
aux(75) =< A+D+F-A'-D'-F'
aux(76) =< A-A'
aux(77) =< C
aux(78) =< C-C'
aux(79) =< D
aux(80) =< D+1
aux(81) =< D+F+1
aux(82) =< D+F-D'-F'
aux(83) =< D-D'
aux(84) =< D/2+1/2
aux(85) =< D/2-D'/2
aux(72) =< aux(73)
it(159) =< aux(73)
it(160) =< aux(73)
it(161) =< aux(73)
it(162) =< aux(73)
it(160) =< aux(74)
it(161) =< aux(74)
it(162) =< aux(74)
s(1201) =< aux(74)
s(1203) =< aux(74)
it(160) =< aux(75)
it(161) =< aux(75)
it(162) =< aux(75)
s(1201) =< aux(75)
s(1203) =< aux(75)
aux(72) =< aux(76)
it(159) =< aux(76)
it(160) =< aux(76)
it(161) =< aux(76)
it(162) =< aux(76)
aux(72) =< aux(77)
it(159) =< aux(77)
it(160) =< aux(77)
it(161) =< aux(77)
it(162) =< aux(77)
aux(72) =< aux(78)
it(159) =< aux(78)
it(160) =< aux(78)
it(161) =< aux(78)
it(162) =< aux(78)
it(162) =< aux(79)
s(1202) =< aux(79)
s(1203) =< aux(79)
s(1204) =< aux(79)
aux(72) =< aux(80)
it(159) =< aux(80)
it(160) =< aux(80)
it(161) =< aux(80)
it(162) =< aux(80)
it(160) =< aux(81)
it(162) =< aux(81)
s(1201) =< aux(81)
it(160) =< aux(82)
it(162) =< aux(82)
s(1201) =< aux(82)
aux(72) =< aux(83)
it(159) =< aux(83)
it(160) =< aux(83)
it(161) =< aux(83)
it(162) =< aux(83)
s(1202) =< aux(83)
s(1203) =< aux(83)
s(1204) =< aux(83)
it(159) =< aux(84)
it(160) =< aux(84)
it(162) =< aux(84)
it(159) =< aux(85)
it(160) =< aux(85)
it(162) =< aux(85)
aux(68) =< aux(79)+2
aux(63) =< it(159)*aux(79)
s(1202) =< it(160)*aux(80)
it(162) =< aux(72)+aux(71)
aux(64) =< it(161)*aux(68)
it(162) =< aux(64)+aux(63)+aux(65)
s(1202) =< aux(64)+aux(63)+aux(65)

#### Simplifying cost structure of chain [[159,160,161,162],158] 
 * Joined equivalent variables [aux(86),aux(73),aux(76),aux(78)] into aux(86)
 * Joined equivalent variables [aux(87),aux(79),aux(83)] into aux(87)

#### Simplifying cost structure of CE 260 

#### Found solution for phase  [159,160,161,162] in the cache 

#### Cost of phase [159,160,161,162]:computeLine(A,B,C,D,E,F,G,H,I) -> [computeLine(A',B',C',D',E',F',G',H',I')] 
11*it(159)+11*it(160)+11*it(161)+11*it(162)+10*s(1201)+9*s(1202)+10*s(1203)+9*s(1204)+0
  Such that:aux(65) =< D-F+1
it(162) =< D+F
it(160) =< D/2+F/2
it(160) =< D/2+F/2-D'/2-F'/2
it(160) =< D/3+1/3
it(160) =< D/3-D'/3
aux(71) =< -F+2
aux(73) =< A
aux(74) =< A+D+F
aux(75) =< A+D+F-A'-D'-F'
aux(76) =< A-A'
aux(77) =< C
aux(78) =< C-C'
aux(79) =< D
aux(80) =< D+1
aux(81) =< D+F+1
aux(82) =< D+F-D'-F'
aux(83) =< D-D'
aux(84) =< D/2+1/2
aux(85) =< D/2-D'/2
aux(72) =< aux(73)
it(159) =< aux(73)
it(160) =< aux(73)
it(161) =< aux(73)
it(162) =< aux(73)
it(160) =< aux(74)
it(161) =< aux(74)
it(162) =< aux(74)
s(1201) =< aux(74)
s(1203) =< aux(74)
it(160) =< aux(75)
it(161) =< aux(75)
it(162) =< aux(75)
s(1201) =< aux(75)
s(1203) =< aux(75)
aux(72) =< aux(76)
it(159) =< aux(76)
it(160) =< aux(76)
it(161) =< aux(76)
it(162) =< aux(76)
aux(72) =< aux(77)
it(159) =< aux(77)
it(160) =< aux(77)
it(161) =< aux(77)
it(162) =< aux(77)
aux(72) =< aux(78)
it(159) =< aux(78)
it(160) =< aux(78)
it(161) =< aux(78)
it(162) =< aux(78)
it(162) =< aux(79)
s(1202) =< aux(79)
s(1203) =< aux(79)
s(1204) =< aux(79)
aux(72) =< aux(80)
it(159) =< aux(80)
it(160) =< aux(80)
it(161) =< aux(80)
it(162) =< aux(80)
it(160) =< aux(81)
it(162) =< aux(81)
s(1201) =< aux(81)
it(160) =< aux(82)
it(162) =< aux(82)
s(1201) =< aux(82)
aux(72) =< aux(83)
it(159) =< aux(83)
it(160) =< aux(83)
it(161) =< aux(83)
it(162) =< aux(83)
s(1202) =< aux(83)
s(1203) =< aux(83)
s(1204) =< aux(83)
it(159) =< aux(84)
it(160) =< aux(84)
it(162) =< aux(84)
it(159) =< aux(85)
it(160) =< aux(85)
it(162) =< aux(85)
aux(68) =< aux(79)+2
aux(63) =< it(159)*aux(79)
s(1202) =< it(160)*aux(80)
it(162) =< aux(72)+aux(71)
aux(64) =< it(161)*aux(68)
it(162) =< aux(64)+aux(63)+aux(65)
s(1202) =< aux(64)+aux(63)+aux(65)

#### Simplifying cost structure of chain [[159,160,161,162],157] 
 * Joined equivalent variables [aux(88),aux(76),aux(77),aux(78)] into aux(88)
 * Joined equivalent variables [aux(89),aux(79),aux(83)] into aux(89)
 * Joined equivalent variables [aux(90),aux(82)] into aux(90)

#### Cost of chains of computeLine(A,B,C,D,E,F,G,H,I):
* Chain [[159,160,161,162],158]: 11*it(159)+11*it(160)+11*it(161)+11*it(162)+10*s(1201)+9*s(1202)+10*s(1203)+9*s(1204)+2
  Such that:aux(74) =< A+D+F
aux(75) =< A+D+F-H
aux(77) =< C
aux(80) =< D+1
aux(65) =< D-F+1
it(162) =< D+F
aux(81) =< D+F+1
aux(82) =< D+F-H
aux(85) =< D/2
aux(84) =< D/2+1/2
it(160) =< D/2+F/2-H/2
it(160) =< D/3
aux(71) =< -F+2
aux(86) =< A
aux(87) =< D
aux(72) =< aux(86)
it(159) =< aux(86)
it(160) =< aux(86)
it(161) =< aux(86)
it(162) =< aux(86)
it(160) =< aux(74)
it(161) =< aux(74)
it(162) =< aux(74)
s(1201) =< aux(74)
s(1203) =< aux(74)
it(160) =< aux(75)
it(161) =< aux(75)
it(162) =< aux(75)
s(1201) =< aux(75)
s(1203) =< aux(75)
aux(72) =< aux(77)
it(159) =< aux(77)
it(160) =< aux(77)
it(161) =< aux(77)
it(162) =< aux(77)
it(162) =< aux(87)
s(1202) =< aux(87)
s(1203) =< aux(87)
s(1204) =< aux(87)
aux(72) =< aux(80)
it(159) =< aux(80)
it(160) =< aux(80)
it(161) =< aux(80)
it(162) =< aux(80)
it(160) =< aux(81)
it(162) =< aux(81)
s(1201) =< aux(81)
it(160) =< aux(82)
it(162) =< aux(82)
s(1201) =< aux(82)
aux(72) =< aux(87)
it(159) =< aux(87)
it(160) =< aux(87)
it(161) =< aux(87)
it(159) =< aux(84)
it(160) =< aux(84)
it(162) =< aux(84)
it(159) =< aux(85)
it(160) =< aux(85)
it(162) =< aux(85)
aux(68) =< aux(87)+2
aux(63) =< it(159)*aux(87)
s(1202) =< it(160)*aux(80)
it(162) =< aux(72)+aux(71)
aux(64) =< it(161)*aux(68)
it(162) =< aux(64)+aux(63)+aux(65)
s(1202) =< aux(64)+aux(63)+aux(65)

  with precondition: [A>=2,B>=0,E>=0,F>=0,G>=0,H>=1,I>=0,C>=A,D+2>=A+H] 

* Chain [[159,160,161,162],157]: 11*it(159)+11*it(160)+11*it(161)+11*it(162)+10*s(1201)+9*s(1202)+10*s(1203)+9*s(1204)+6
  Such that:aux(73) =< A
aux(74) =< A+D+F
aux(75) =< C+D+F
aux(80) =< D+1
aux(65) =< D-F+1
aux(81) =< D+F+1
aux(85) =< D/2
aux(84) =< D/2+1/2
it(160) =< D/2+F/2
it(160) =< D/3
aux(71) =< -F+2
aux(88) =< C
aux(89) =< D
aux(90) =< D+F
it(162) =< aux(90)
aux(72) =< aux(73)
it(159) =< aux(73)
it(160) =< aux(73)
it(161) =< aux(73)
it(162) =< aux(73)
it(160) =< aux(74)
it(161) =< aux(74)
it(162) =< aux(74)
s(1201) =< aux(74)
s(1203) =< aux(74)
it(160) =< aux(75)
it(161) =< aux(75)
it(162) =< aux(75)
s(1201) =< aux(75)
s(1203) =< aux(75)
aux(72) =< aux(88)
it(159) =< aux(88)
it(160) =< aux(88)
it(161) =< aux(88)
it(162) =< aux(88)
it(162) =< aux(89)
s(1202) =< aux(89)
s(1203) =< aux(89)
s(1204) =< aux(89)
aux(72) =< aux(80)
it(159) =< aux(80)
it(160) =< aux(80)
it(161) =< aux(80)
it(162) =< aux(80)
it(160) =< aux(81)
it(162) =< aux(81)
s(1201) =< aux(81)
it(160) =< aux(90)
s(1201) =< aux(90)
aux(72) =< aux(89)
it(159) =< aux(89)
it(160) =< aux(89)
it(161) =< aux(89)
it(159) =< aux(84)
it(160) =< aux(84)
it(162) =< aux(84)
it(159) =< aux(85)
it(160) =< aux(85)
it(162) =< aux(85)
aux(68) =< aux(89)+2
aux(63) =< it(159)*aux(89)
s(1202) =< it(160)*aux(80)
it(162) =< aux(72)+aux(71)
aux(64) =< it(161)*aux(68)
it(162) =< aux(64)+aux(63)+aux(65)
s(1202) =< aux(64)+aux(63)+aux(65)

  with precondition: [H=1,B>=0,C>=2,E>=0,F>=0,G>=0,I>=0,A>=C+1,D+1>=C] 

* Chain [158]: 2
  with precondition: [A=1,F=H,G=I,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0] 

* Chain [157]: 6
  with precondition: [C=1,D=0,H=1,A>=2,B>=0,E>=0,F>=0,G>=0,I>=0] 


#### Simplifying cost structure of CE 263 

#### Simplifying cost structure of CE 262 

#### Cost of chains of case_5(A,B,C,D,E,F,G,H,I,J):
* Chain [164]: 6
  with precondition: [A=0,G=1,H=0,J=1,B>=0,C>=0,D>=0,E>=0,F>=0,I>=0] 

* Chain [163]: 2
  with precondition: [A=1,J=1,D=G,E=H,B+C+F=I,B>=0,C>=0,D>=1,E>=0,F>=0] 


#### Simplifying cost structure of CE 264 
 * Renamed intermediate variables: 
[ (eq(265,1),aux(22))>>s(1205), (eq(265,1),s(40))>>s(1206)]

#### Simplifying cost structure of CE 265 
 * Renamed intermediate variables: 
[ (eq(266,1),s(42))>>s(1207), (eq(266,1),s(45))>>s(1208), (eq(266,1),s(43))>>s(1209), (eq(266,1),s(44))>>s(1210), (eq(266,1),s(46))>>s(1211), (eq(266,1),s(47))>>s(1212), (eq(266,1),s(48))>>s(1213), (eq(266,1),s(49))>>s(1214), (eq(266,1),s(50))>>s(1215)]

#### Simplifying cost structure of CE 266 
 * Renamed intermediate variables: 
[ (eq(267,1),s(51))>>s(1216)]

#### Simplifying cost structure of CE 267 
 * Renamed intermediate variables: 
[ (eq(268,1),s(53))>>s(1217), (eq(268,1),s(54))>>s(1218), (eq(268,1),aux(23))>>s(1219), (eq(268,1),s(52))>>s(1220)]

#### Simplifying cost structure of CE 268 

#### Cost of chains of construct_matrix(A,B,C,D,E,F,G,H,I):
* Chain [169]: 14
  with precondition: [A=0,C=1,D=0,F=1,G=0,I=1,B+E=H,B>=0,E>=0] 

* Chain [168]: 16*s(1206)+14
  Such that:s(1205) =< D+1
s(1206) =< s(1205)

  with precondition: [B=0,I=1,A+1=C,A=D,A+1=F,A=G,A+E=H,A>=1,E>=0] 

* Chain [167]: 6*s(1207)+6*s(1209)+10*s(1212)+10*s(1213)+12*s(1214)+6*s(1215)+25
  Such that:s(1207) =< A
s(1208) =< A+1
s(1209) =< -B+D
s(1210) =< -B+D+1
s(1211) =< D
s(1212) =< s(1208)
s(1213) =< s(1208)
s(1214) =< s(1211)
s(1215) =< s(1211)
s(1209) =< s(1211)
s(1212) =< s(1210)
s(1215) =< s(1210)
s(1213) =< s(1211)

  with precondition: [F=1,G=0,I=1,A+1=C,A>=1,B>=0,E>=0,H>=0,D>=A,D>=B+2] 

* Chain [166]: 6*s(1216)+15
  Such that:s(1216) =< C

  with precondition: [F=1,G=0,I=1,A>=0,B>=0,E>=0,H>=0,C>=A+2,D+1>=C] 

* Chain [165]: 10*s(1217)+6*s(1218)+6*s(1220)+14
  Such that:s(1219) =< A+1
s(1217) =< -B/2+D/2
s(1218) =< D
s(1220) =< s(1219)
s(1217) =< s(1219)

  with precondition: [I=1,A+1=C,A+1=F,D=G,A+B+E=H,A>=1,B>=1,E>=0,D+1>=2*A+B] 


#### Simplifying cost structure of CE 271 

#### Computing cost of phase [172] 

#### Simplifying cost structure of CE 269 

#### Cost of loops [172] 

 * loop 172:del(A,B,C,D,E) -> [del(A',B',C',D',E')] 
10
##### Pending set del(A,B,C,D,E)
* Psum in Loop 172: [it(172)=<1]

###### Computing sum for it(172)=<1  in Loop 172 
   - Applying inductive sum strategy 
     - head Candidate: C 
     - head Candidate: A-1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C 
     - tail Candidate: A-1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(172)=<C,it(172)=<A-1,it(172)=<A-1,it(172)=<C,it(172)=<C-C',it(172)=<A-A',it(172)=<A-A',it(172)=<C-C'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [172] 

#### Simplifying cost structure of phase [172] 

#### Cost of phase [172]:del(A,B,C,D,E) -> [del(A',B',C',D',E')] 
10*it(172)+0
  Such that:it(172) =< A
it(172) =< A-A'
it(172) =< C
it(172) =< C-C'

#### Simplifying cost structure of chain [[172],171] 

#### Simplifying cost structure of CE 270 

#### Found solution for phase  [172] in the cache 

#### Cost of phase [172]:del(A,B,C,D,E) -> [del(A',B',C',D',E')] 
10*it(172)+0
  Such that:it(172) =< A
it(172) =< A-A'
it(172) =< C
it(172) =< C-C'

#### Simplifying cost structure of chain [[172],170] 

#### Cost of chains of del(A,B,C,D,E):
* Chain [[172],171]: 10*it(172)+3
  Such that:it(172) =< D

  with precondition: [A=D,A>=2,B>=0,E>=0,C+1>=A] 

* Chain [[172],170]: 10*it(172)+6
  Such that:it(172) =< C

  with precondition: [A=D+1,C>=1,E>=0,A>=C+2,B>=E] 

* Chain [171]: 3
  with precondition: [A=1,D=1,B>=0,C>=0,E>=0] 

* Chain [170]: 6
  with precondition: [C=0,A=D+1,A>=2,E>=0,B>=E] 


#### Simplifying cost structure of CE 273 

#### Simplifying cost structure of CE 272 

#### Cost of chains of case_11(A,B,C,D,E):
* Chain [174]: 2
  with precondition: [A=0,B=0,C=D+E,D>=0,C>=D] 

* Chain [173]: 2
  with precondition: [A=0,C+D=E,B>=1,C>=0,D>=0] 


#### Simplifying cost structure of CE 274 

#### Simplifying cost structure of CE 275 

#### Cost of chains of op(A,B,C,D):
* Chain [176]: 4
  with precondition: [A=0,B=C+D,C>=0,B>=C] 

* Chain [175]: 4
  with precondition: [B+C=D,A>=1,B>=0,C>=0] 


#### Simplifying cost structure of CE 279 

#### Computing cost of phase [180] 

#### Simplifying cost structure of CE 276 

#### Cost of loops [180] 

 * loop 180:rec_list(A,B,C,D,E,F,G) -> [rec_list(A',B',C',D',E',F',G')] 
13
##### Pending set rec_list(A,B,C,D,E,F,G)
* Psum in Loop 180: [it(180)=<1]

###### Computing sum for it(180)=<1  in Loop 180 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
     - head Candidate: C-1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
     - tail Candidate: C-1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(180)=<A-1,it(180)=<C-1,it(180)=<A-1,it(180)=<C-1,it(180)=<A-A',it(180)=<C-C',it(180)=<A-A',it(180)=<C-C'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [180] 

#### Simplifying cost structure of phase [180] 

#### Cost of phase [180]:rec_list(A,B,C,D,E,F,G) -> [rec_list(A',B',C',D',E',F',G')] 
13*it(180)+0
  Such that:it(180) =< A
it(180) =< A-A'
it(180) =< C
it(180) =< C-C'

#### Simplifying cost structure of chain [[180],178] 

#### Simplifying cost structure of CE 278 

#### Found solution for phase  [180] in the cache 

#### Cost of phase [180]:rec_list(A,B,C,D,E,F,G) -> [rec_list(A',B',C',D',E',F',G')] 
13*it(180)+0
  Such that:it(180) =< A
it(180) =< A-A'
it(180) =< C
it(180) =< C-C'

#### Simplifying cost structure of chain [[180],177] 

#### Computing cost of phase [179] 

#### Simplifying cost structure of CE 277 

#### Cost of loops [179] 

 * loop 179:rec_list(A,B,C,D,E,F,G) -> [rec_list(A',B',C',D',E',F',G')] 
13
##### Pending set rec_list(A,B,C,D,E,F,G)
* Psum in Loop 179: [it(179)=<1]

###### Computing sum for it(179)=<1  in Loop 179 
   - Applying inductive sum strategy 
     - head Candidate: C-1 
     - head Candidate: A-1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
     - tail Candidate: A-1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(179)=<C-1,it(179)=<A-1,it(179)=<A-1,it(179)=<C-1,it(179)=<C-C',it(179)=<A-A',it(179)=<A-A',it(179)=<C-C'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [179] 

#### Simplifying cost structure of phase [179] 

#### Cost of phase [179]:rec_list(A,B,C,D,E,F,G) -> [rec_list(A',B',C',D',E',F',G')] 
13*it(179)+0
  Such that:it(179) =< A
it(179) =< A-A'
it(179) =< C
it(179) =< C-C'

#### Simplifying cost structure of chain [[179],178] 

#### Found solution for phase  [179] in the cache 

#### Cost of phase [179]:rec_list(A,B,C,D,E,F,G) -> [rec_list(A',B',C',D',E',F',G')] 
13*it(179)+0
  Such that:it(179) =< A
it(179) =< A-A'
it(179) =< C
it(179) =< C-C'

#### Simplifying cost structure of chain [[179],177] 

#### Cost of chains of rec_list(A,B,C,D,E,F,G):
* Chain [[180],178]: 13*it(180)+3
  Such that:it(180) =< F

  with precondition: [E=0,A=F,A>=2,B>=0,D>=0,G>=0,C>=A] 

* Chain [[180],177]: 13*it(180)+6
  Such that:it(180) =< F

  with precondition: [E=0,C=F,B>=0,C>=2,D>=0,G>=0,A>=C+1] 

* Chain [[179],178]: 13*it(179)+3
  Such that:it(179) =< F

  with precondition: [A=F,A>=2,B>=0,D>=0,E>=1,G>=0,C>=A] 

* Chain [[179],177]: 13*it(179)+6
  Such that:it(179) =< F

  with precondition: [C=F,B>=0,C>=2,D>=0,E>=1,G>=0,A>=C+1] 

* Chain [178]: 3
  with precondition: [A=1,F=1,B>=0,C>=0,D>=0,E>=0,G>=0] 

* Chain [177]: 6
  with precondition: [C=1,F=1,A>=2,B>=0,D>=0,E>=0,G>=0] 


#### Simplifying cost structure of CE 287 

#### Computing cost of phase [183,184,185,186,187,188] 
 * Renamed intermediate variables: 
[ (eq(285,1),it(179))>>s(1221)]

#### Simplifying cost structure of CE 285 
 * Renamed intermediate variables: 
[ (it(183),s(1221))>>s(1222)]
 * Renamed intermediate variables: 
[ (eq(284,1),it(179))>>s(1223)]

#### Simplifying cost structure of CE 284 
 * Renamed intermediate variables: 
[ (it(184),s(1223))>>s(1224)]

#### Simplifying cost structure of CE 281 

#### Simplifying cost structure of CE 280 
 * Renamed intermediate variables: 
[ (eq(283,1),it(180))>>s(1225)]

#### Simplifying cost structure of CE 283 
 * Renamed intermediate variables: 
[ (it(187),s(1225))>>s(1226)]
 * Renamed intermediate variables: 
[ (eq(282,1),it(180))>>s(1227)]

#### Simplifying cost structure of CE 282 
 * Renamed intermediate variables: 
[ (it(188),s(1227))>>s(1228)]

#### Cost of loops [183,184,185,186,187,188] 

 * loop 183:rec_mat(A,B,C,D,E,F,G,H,I,J) -> [rec_mat(A',B',C',D',E',F',G',H',I',J')] 
13*s(1222)+15
  Such that:s(1222) =< E-E'

 * loop 184:rec_mat(A,B,C,D,E,F,G,H,I,J) -> [rec_mat(A',B',C',D',E',F',G',H',I',J')] 
13*s(1224)+12
  Such that:s(1224) =< B-B'

 * loop 185:rec_mat(A,B,C,D,E,F,G,H,I,J) -> [rec_mat(A',B',C',D',E',F',G',H',I',J')] 
15
 * loop 186:rec_mat(A,B,C,D,E,F,G,H,I,J) -> [rec_mat(A',B',C',D',E',F',G',H',I',J')] 
12
 * loop 187:rec_mat(A,B,C,D,E,F,G,H,I,J) -> [rec_mat(A',B',C',D',E',F',G',H',I',J')] 
13*s(1226)+15
  Such that:s(1226) =< E-E'

 * loop 188:rec_mat(A,B,C,D,E,F,G,H,I,J) -> [rec_mat(A',B',C',D',E',F',G',H',I',J')] 
13*s(1228)+12
  Such that:s(1228) =< B-B'

##### Pending set rec_mat(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 183: [it(183)=<1,s(1229)=<E-E']
* Psum in Loop 184: [it(184)=<1,s(1230)=<B-B']
* Psum in Loop 185: [it(185)=<1]
* Psum in Loop 186: [it(186)=<1]
* Psum in Loop 187: [it(187)=<1,s(1231)=<E-E']
* Psum in Loop 188: [it(188)=<1,s(1232)=<B-B']

###### Computing sum for it(183)=<1  in Loop 183 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
       - Loop 184 is collaborative and bounds [it(184)] 
       - Loop 185 is collaborative and bounds [it(185)] 
       - Loop 186 is collaborative and bounds [it(186)] 
       - Loop 187 is collaborative and bounds [it(187)] 
       - Loop 188 is collaborative and bounds [it(188)] 
     - head Candidate: E+1 
       - Loop 184 is collaborative and bounds [it(184)] 
       - Loop 185 is collaborative and bounds [it(185)] 
       - Loop 186 is collaborative and bounds [it(186)] 
       - Loop 187 is collaborative and bounds [it(187)] 
       - Loop 188 is collaborative and bounds [it(188)] 
     - head Candidate: A-1 
       - Loop 184 is collaborative and bounds [it(184)] 
       - Loop 185 is collaborative and bounds [it(185)] 
       - Loop 186 is collaborative and bounds [it(186)] 
       - Loop 187 is collaborative and bounds [it(187)] 
       - Loop 188 is collaborative and bounds [it(188)] 
     - head Candidate: B 
       - Loop 184 is collaborative and bounds [it(184)] 
       - Loop 185 is collaborative and bounds [it(185)] 
       - Loop 186 is collaborative and bounds [it(186)] 
       - Loop 187 is collaborative and bounds [it(187)] 
       - Loop 188 is collaborative and bounds [it(188)] 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: E/2+1/2 
       - Loop 184 is collaborative and bounds [it(184)] 
       - Loop 185 is collaborative
       - Loop 186 is collaborative
       - Loop 187 is collaborative and bounds [it(187)] 
       - Loop 188 is collaborative and bounds [it(188)] 
     - head Candidate: B/3-2/3 
       - Loop 184 is collaborative
       - Loop 185 is collaborative
       - Loop 186 is collaborative
       - Loop 187 is collaborative
       - Loop 188 is collaborative
     - tail Candidate: D-1 
       - Loop 184 is collaborative and bounds [it(184)] 
       - Loop 185 is collaborative and bounds [it(185)] 
       - Loop 186 is collaborative and bounds [it(186)] 
       - Loop 187 is collaborative and bounds [it(187)] 
       - Loop 188 is collaborative and bounds [it(188)] 
     - tail Candidate: E+1 
       - Loop 184 is collaborative and bounds [it(184)] 
       - Loop 185 is collaborative and bounds [it(185)] 
       - Loop 186 is collaborative and bounds [it(186)] 
       - Loop 187 is collaborative and bounds [it(187)] 
       - Loop 188 is collaborative and bounds [it(188)] 
     - tail Candidate: A-1 
       - Loop 184 is collaborative and bounds [it(184)] 
       - Loop 185 is collaborative and bounds [it(185)] 
       - Loop 186 is collaborative and bounds [it(186)] 
       - Loop 187 is collaborative and bounds [it(187)] 
       - Loop 188 is collaborative and bounds [it(188)] 
     - tail Candidate: B 
       - Loop 184 is collaborative and bounds [it(184)] 
       - Loop 185 is collaborative and bounds [it(185)] 
       - Loop 186 is collaborative and bounds [it(186)] 
       - Loop 187 is collaborative and bounds [it(187)] 
       - Loop 188 is collaborative and bounds [it(188)] 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E/2+1/2 
       - Loop 184 is collaborative and bounds [it(184)] 
       - Loop 185 is collaborative
       - Loop 186 is collaborative
       - Loop 187 is collaborative and bounds [it(187)] 
       - Loop 188 is collaborative and bounds [it(188)] 
     - tail Candidate: B/3-2/3 
       - Loop 184 is collaborative
       - Loop 185 is collaborative
       - Loop 186 is collaborative
       - Loop 187 is collaborative and bounds [it(187)] 
       - Loop 188 is collaborative
 * Adding constraints: [it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<D-1,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<E+1,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<A-1,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<B,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<A-1,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<D-1,it(183)+it(184)+it(187)+it(188)=<E/2+1/2,it(183)=<B/3-2/3,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<D-D',it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<E-E',it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<A-A',it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<B-B',it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<A-A',it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<D-D',it(183)+it(184)+it(187)+it(188)=<E/2-E'/2,it(183)+it(187)=<B/3-B'/3] 

##### Pending set A
* Psum in Loop 183: [s(1229)=<E-E']
* Psum in Loop 184: [it(184)=<1,s(1230)=<B-B']
* Psum in Loop 185: [it(185)=<1]
* Psum in Loop 186: [it(186)=<1]
* Psum in Loop 187: [it(187)=<1,s(1231)=<E-E']
* Psum in Loop 188: [it(188)=<1,s(1232)=<B-B']

###### Computing sum for s(1229)=<E-E'  in Loop 183 
   - Applying inductive sum strategy 
     - head Candidate: B-1 
       - Loop 184 is collaborative and bounds [it(184)] 
       - Loop 185 is collaborative and bounds [it(185)] 
       - Loop 186 is collaborative
       - Loop 187 is collaborative and bounds [it(187)] 
       - Loop 188 is collaborative and bounds [it(188)] 
     - head Candidate: E 
       - Loop 184 is collaborative and bounds [it(184)] 
       - Loop 185 is collaborative and bounds [it(185)] 
       - Loop 186 is collaborative and bounds [it(186)] 
       - Loop 187 is collaborative and bounds [it(187)] 
       - Loop 188 is collaborative and bounds [it(188)] 
     - tail Candidate: B-1 
       - Loop 184 is collaborative and bounds [it(184)] 
       - Loop 185 is collaborative and bounds [it(185)] 
       - Loop 186 is collaborative and bounds [it(186)] 
       - Loop 187 is collaborative and bounds [it(187)] 
       - Loop 188 is collaborative and bounds [it(188)] 
     - tail Candidate: E 
       - Loop 184 is collaborative and bounds [it(184)] 
       - Loop 185 is collaborative and bounds [it(185)] 
       - Loop 186 is collaborative and bounds [it(186)] 
       - Loop 187 is collaborative and bounds [it(187)] 
       - Loop 188 is collaborative and bounds [it(188)] 
 * Adding constraints: [it(184)+it(185)+it(187)+it(188)+s(1229)=<B-1,it(184)+it(185)+it(186)+it(187)+it(188)+s(1229)=<E,it(184)+it(185)+it(186)+it(187)+it(188)+s(1229)=<B-B',it(184)+it(185)+it(186)+it(187)+it(188)+s(1229)=<E-E'] 

##### Pending set A
* Psum in Loop 184: [it(184)=<1,s(1230)=<B-B']
* Psum in Loop 185: [it(185)=<1]
* Psum in Loop 186: [it(186)=<1]
* Psum in Loop 187: [it(187)=<1,s(1231)=<E-E']
* Psum in Loop 188: [it(188)=<1,s(1232)=<B-B']

###### Computing sum for it(184)=<1  in Loop 184 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: E+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B/2-1/2 
       - Loop 183 is collaborative
       - Loop 185 is collaborative
       - Loop 186 is collaborative
       - Loop 187 is collaborative and bounds [it(187)] 
       - Loop 188 is collaborative
     - head Candidate: E/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B/2-1/2 
       - Loop 183 is collaborative
       - Loop 185 is collaborative and bounds [it(185)] 
       - Loop 186 is collaborative
       - Loop 187 is collaborative and bounds [it(187)] 
       - Loop 188 is collaborative and bounds [it(188)] 
     - tail Candidate: E/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<D-1,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<E+1,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<A-1,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<B,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<A-1,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<D-1,it(184)+it(187)=<B/2-1/2,it(183)+it(184)+it(187)+it(188)=<E/2+1/2,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<D-D',it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<E-E',it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<A-A',it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<B-B',it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<A-A',it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<D-D',it(184)+it(185)+it(187)+it(188)=<B/2-B'/2,it(183)+it(184)+it(187)+it(188)=<E/2-E'/2] 

##### Pending set A
* Psum in Loop 184: [s(1230)=<B-B']
* Psum in Loop 185: [it(185)=<1]
* Psum in Loop 186: [it(186)=<1]
* Psum in Loop 187: [it(187)=<1,s(1231)=<E-E']
* Psum in Loop 188: [it(188)=<1,s(1232)=<B-B']

###### Computing sum for s(1230)=<B-B'  in Loop 184 
   - Applying inductive sum strategy 
     - head Candidate: E 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(185)+it(186)+it(187)+it(188)+s(1229)+s(1230)=<E,it(183)+it(185)+it(186)+it(187)+it(188)+s(1230)=<B,it(185)+it(186)+it(187)+it(188)+s(1229)+s(1230)=<E-E',it(183)+it(185)+it(186)+it(187)+it(188)+s(1230)=<B-B'] 

##### Pending set A
* Psum in Loop 185: [it(185)=<1]
* Psum in Loop 186: [it(186)=<1]
* Psum in Loop 187: [it(187)=<1,s(1231)=<E-E']
* Psum in Loop 188: [it(188)=<1,s(1232)=<B-B']

###### Computing sum for it(185)=<1  in Loop 185 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: E+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: E+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B/2-1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B/2-1/2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<D-1,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<E+1,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<A-1,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<B,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<A-1,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<D-1,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<E+1,it(184)+it(185)+it(187)=<B/2-1/2,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<D-D',it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<E-E',it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<A-A',it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<B-B',it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<A-A',it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<D-D',it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<E-E',it(184)+it(185)+it(187)+it(188)=<B/2-B'/2] 

##### Pending set A
* Psum in Loop 186: [it(186)=<1]
* Psum in Loop 187: [it(187)=<1,s(1231)=<E-E']
* Psum in Loop 188: [it(188)=<1,s(1232)=<B-B']

###### Computing sum for it(186)=<1  in Loop 186 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: E+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: E+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<D-1,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<E+1,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<A-1,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<B,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<A-1,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<B,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<D-1,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<E+1,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<D-D',it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<E-E',it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<A-A',it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<B-B',it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<A-A',it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<B-B',it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<D-D',it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<E-E'] 

##### Pending set A
* Psum in Loop 187: [it(187)=<1,s(1231)=<E-E']
* Psum in Loop 188: [it(188)=<1,s(1232)=<B-B']

###### Computing sum for it(187)=<1  in Loop 187 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: E+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: E/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B/3-2/3 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B/3-2/3 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<D-1,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<E+1,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<A-1,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<B,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<A-1,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<D-1,it(183)+it(184)+it(187)+it(188)=<E/2+1/2,it(183)+it(187)=<B/3-2/3,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<D-D',it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<E-E',it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<A-A',it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<B-B',it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<A-A',it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<D-D',it(183)+it(184)+it(187)+it(188)=<E/2-E'/2,it(183)+it(187)=<B/3-B'/3] 

##### Pending set A
* Psum in Loop 187: [s(1231)=<E-E']
* Psum in Loop 188: [it(188)=<1,s(1232)=<B-B']

###### Computing sum for s(1231)=<E-E'  in Loop 187 
   - Applying inductive sum strategy 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: E 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(184)+it(185)+it(188)+s(1229)+s(1231)=<B-1,it(184)+it(185)+it(186)+it(188)+s(1229)+s(1231)=<E,it(184)+it(185)+it(186)+it(188)+s(1229)+s(1231)=<B-B',it(184)+it(185)+it(186)+it(188)+s(1229)+s(1231)=<E-E'] 

##### Pending set A
* Psum in Loop 188: [it(188)=<1,s(1232)=<B-B']

###### Computing sum for it(188)=<1  in Loop 188 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: E+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B/2-1/2 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: E/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B/2-1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<D-1,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<E+1,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<A-1,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<B,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<A-1,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<D-1,it(184)+it(187)+it(188)=<B/2-1/2,it(183)+it(184)+it(187)+it(188)=<E/2+1/2,it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<D-D',it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<E-E',it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<A-A',it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<B-B',it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<A-A',it(183)+it(184)+it(185)+it(186)+it(187)+it(188)=<D-D',it(184)+it(185)+it(187)+it(188)=<B/2-B'/2,it(183)+it(184)+it(187)+it(188)=<E/2-E'/2] 

##### Pending set A
* Psum in Loop 188: [s(1232)=<B-B']

###### Computing sum for s(1232)=<B-B'  in Loop 188 
   - Applying inductive sum strategy 
     - head Candidate: E 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(184)+it(185)+it(186)+it(187)+s(1229)+s(1232)=<E,it(183)+it(184)+it(185)+it(186)+it(187)+s(1232)=<B,it(184)+it(185)+it(186)+it(187)+s(1229)+s(1232)=<E-E',it(183)+it(184)+it(185)+it(186)+it(187)+s(1232)=<B-B'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [183,184,185,186,187,188] 

#### Simplifying cost structure of phase [183,184,185,186,187,188] 
 * Joined equivalent variables [it(184),it(188)] into it(184)
 * Joined equivalent variables [s(1229),s(1230),s(1231),s(1232)] into s(1229)

#### Cost of phase [183,184,185,186,187,188]:rec_mat(A,B,C,D,E,F,G,H,I,J) -> [rec_mat(A',B',C',D',E',F',G',H',I',J')] 
15*it(183)+24*it(184)+15*it(185)+12*it(186)+15*it(187)+52*s(1229)+0
  Such that:aux(91) =< A
aux(92) =< A-A'
aux(93) =< B
aux(94) =< B-B'
aux(95) =< B/2
aux(96) =< B/2-B'/2
aux(97) =< B/3
aux(98) =< B/3-B'/3
aux(99) =< D
aux(100) =< D-D'
aux(101) =< E
aux(102) =< E+1
aux(103) =< E-E'
aux(104) =< E/2+1/2
aux(105) =< E/2-E'/2
it(183) =< aux(91)
it(184) =< aux(91)
it(185) =< aux(91)
it(186) =< aux(91)
it(187) =< aux(91)
it(183) =< aux(92)
it(184) =< aux(92)
it(185) =< aux(92)
it(186) =< aux(92)
it(187) =< aux(92)
it(183) =< aux(93)
it(184) =< aux(93)
it(185) =< aux(93)
it(186) =< aux(93)
it(187) =< aux(93)
s(1229) =< aux(93)
it(183) =< aux(94)
it(184) =< aux(94)
it(185) =< aux(94)
it(186) =< aux(94)
it(187) =< aux(94)
s(1229) =< aux(94)
it(184) =< aux(95)
it(185) =< aux(95)
it(187) =< aux(95)
it(184) =< aux(96)
it(185) =< aux(96)
it(187) =< aux(96)
it(183) =< aux(97)
it(187) =< aux(97)
it(183) =< aux(98)
it(187) =< aux(98)
it(183) =< aux(99)
it(184) =< aux(99)
it(185) =< aux(99)
it(186) =< aux(99)
it(187) =< aux(99)
it(183) =< aux(100)
it(184) =< aux(100)
it(185) =< aux(100)
it(186) =< aux(100)
it(187) =< aux(100)
it(184) =< aux(101)
it(185) =< aux(101)
it(186) =< aux(101)
it(187) =< aux(101)
s(1229) =< aux(101)
it(183) =< aux(102)
it(184) =< aux(102)
it(185) =< aux(102)
it(186) =< aux(102)
it(187) =< aux(102)
it(183) =< aux(103)
it(184) =< aux(103)
it(185) =< aux(103)
it(186) =< aux(103)
it(187) =< aux(103)
s(1229) =< aux(103)
it(183) =< aux(104)
it(184) =< aux(104)
it(187) =< aux(104)
it(183) =< aux(105)
it(184) =< aux(105)
it(187) =< aux(105)

#### Simplifying cost structure of chain [[183,184,185,186,187,188],182] 
 * Joined equivalent variables [aux(106),aux(91),aux(92),aux(100)] into aux(106)
 * Joined equivalent variables [aux(107),aux(93),aux(94)] into aux(107)
 * Joined equivalent variables [aux(108),aux(95),aux(96)] into aux(108)
 * Joined equivalent variables [aux(109),aux(97),aux(98)] into aux(109)
 * Joined equivalent variables [aux(110),aux(101),aux(103)] into aux(110)

#### Simplifying cost structure of CE 286 

#### Found solution for phase  [183,184,185,186,187,188] in the cache 

#### Cost of phase [183,184,185,186,187,188]:rec_mat(A,B,C,D,E,F,G,H,I,J) -> [rec_mat(A',B',C',D',E',F',G',H',I',J')] 
15*it(183)+24*it(184)+15*it(185)+12*it(186)+15*it(187)+52*s(1229)+0
  Such that:aux(91) =< A
aux(92) =< A-A'
aux(93) =< B
aux(94) =< B-B'
aux(95) =< B/2
aux(96) =< B/2-B'/2
aux(97) =< B/3
aux(98) =< B/3-B'/3
aux(99) =< D
aux(100) =< D-D'
aux(101) =< E
aux(102) =< E+1
aux(103) =< E-E'
aux(104) =< E/2+1/2
aux(105) =< E/2-E'/2
it(183) =< aux(91)
it(184) =< aux(91)
it(185) =< aux(91)
it(186) =< aux(91)
it(187) =< aux(91)
it(183) =< aux(92)
it(184) =< aux(92)
it(185) =< aux(92)
it(186) =< aux(92)
it(187) =< aux(92)
it(183) =< aux(93)
it(184) =< aux(93)
it(185) =< aux(93)
it(186) =< aux(93)
it(187) =< aux(93)
s(1229) =< aux(93)
it(183) =< aux(94)
it(184) =< aux(94)
it(185) =< aux(94)
it(186) =< aux(94)
it(187) =< aux(94)
s(1229) =< aux(94)
it(184) =< aux(95)
it(185) =< aux(95)
it(187) =< aux(95)
it(184) =< aux(96)
it(185) =< aux(96)
it(187) =< aux(96)
it(183) =< aux(97)
it(187) =< aux(97)
it(183) =< aux(98)
it(187) =< aux(98)
it(183) =< aux(99)
it(184) =< aux(99)
it(185) =< aux(99)
it(186) =< aux(99)
it(187) =< aux(99)
it(183) =< aux(100)
it(184) =< aux(100)
it(185) =< aux(100)
it(186) =< aux(100)
it(187) =< aux(100)
it(184) =< aux(101)
it(185) =< aux(101)
it(186) =< aux(101)
it(187) =< aux(101)
s(1229) =< aux(101)
it(183) =< aux(102)
it(184) =< aux(102)
it(185) =< aux(102)
it(186) =< aux(102)
it(187) =< aux(102)
it(183) =< aux(103)
it(184) =< aux(103)
it(185) =< aux(103)
it(186) =< aux(103)
it(187) =< aux(103)
s(1229) =< aux(103)
it(183) =< aux(104)
it(184) =< aux(104)
it(187) =< aux(104)
it(183) =< aux(105)
it(184) =< aux(105)
it(187) =< aux(105)

#### Simplifying cost structure of chain [[183,184,185,186,187,188],181] 
 * Joined equivalent variables [aux(111),aux(93),aux(94)] into aux(111)
 * Joined equivalent variables [aux(112),aux(95),aux(96)] into aux(112)
 * Joined equivalent variables [aux(113),aux(97),aux(98)] into aux(113)
 * Joined equivalent variables [aux(114),aux(101),aux(103)] into aux(114)
 * Joined equivalent variables [aux(115),aux(92),aux(99),aux(100)] into aux(115)

#### Cost of chains of rec_mat(A,B,C,D,E,F,G,H,I,J):
* Chain [[183,184,185,186,187,188],182]: 15*it(183)+24*it(184)+15*it(185)+12*it(186)+15*it(187)+52*s(1229)+3
  Such that:aux(99) =< D
aux(102) =< E+1
aux(105) =< E/2
aux(104) =< E/2+1/2
aux(106) =< A
aux(107) =< B
aux(108) =< B/2
aux(109) =< B/3
aux(110) =< E
it(183) =< aux(106)
it(184) =< aux(106)
it(185) =< aux(106)
it(186) =< aux(106)
it(187) =< aux(106)
it(183) =< aux(107)
it(184) =< aux(107)
it(185) =< aux(107)
it(186) =< aux(107)
it(187) =< aux(107)
s(1229) =< aux(107)
it(184) =< aux(108)
it(185) =< aux(108)
it(187) =< aux(108)
it(183) =< aux(109)
it(187) =< aux(109)
it(183) =< aux(99)
it(184) =< aux(99)
it(185) =< aux(99)
it(186) =< aux(99)
it(187) =< aux(99)
it(184) =< aux(110)
it(185) =< aux(110)
it(186) =< aux(110)
it(187) =< aux(110)
s(1229) =< aux(110)
it(183) =< aux(102)
it(184) =< aux(102)
it(185) =< aux(102)
it(186) =< aux(102)
it(187) =< aux(102)
it(183) =< aux(110)
it(183) =< aux(104)
it(184) =< aux(104)
it(187) =< aux(104)
it(183) =< aux(105)
it(184) =< aux(105)
it(187) =< aux(105)

  with precondition: [A=H,A>=2,C>=0,F>=0,G>=0,J>=0,D>=A,I+1>=A,B>=I,E>=I] 

* Chain [[183,184,185,186,187,188],181]: 15*it(183)+24*it(184)+15*it(185)+12*it(186)+15*it(187)+52*s(1229)+6
  Such that:aux(91) =< A
aux(102) =< E+1
aux(105) =< E/2
aux(104) =< E/2+1/2
aux(111) =< B
aux(112) =< B/2
aux(113) =< B/3
aux(114) =< E
aux(115) =< H
it(183) =< aux(91)
it(184) =< aux(91)
it(185) =< aux(91)
it(186) =< aux(91)
it(187) =< aux(91)
it(183) =< aux(115)
it(184) =< aux(115)
it(185) =< aux(115)
it(186) =< aux(115)
it(187) =< aux(115)
it(183) =< aux(111)
it(184) =< aux(111)
it(185) =< aux(111)
it(186) =< aux(111)
it(187) =< aux(111)
s(1229) =< aux(111)
it(184) =< aux(112)
it(185) =< aux(112)
it(187) =< aux(112)
it(183) =< aux(113)
it(187) =< aux(113)
it(184) =< aux(114)
it(185) =< aux(114)
it(186) =< aux(114)
it(187) =< aux(114)
s(1229) =< aux(114)
it(183) =< aux(102)
it(184) =< aux(102)
it(185) =< aux(102)
it(186) =< aux(102)
it(187) =< aux(102)
it(183) =< aux(114)
it(183) =< aux(104)
it(184) =< aux(104)
it(187) =< aux(104)
it(183) =< aux(105)
it(184) =< aux(105)
it(187) =< aux(105)

  with precondition: [D=H,C>=0,D>=2,F>=0,G>=0,J>=0,A>=D+1,I+1>=D,B>=I+1,E>=I] 

* Chain [182]: 3
  with precondition: [A=1,B=0,H=1,I=0,C>=0,D>=0,E>=0,F>=0,G>=0,J>=0] 

* Chain [181]: 6
  with precondition: [D=1,E=0,H=1,I=0,A>=2,B>=1,C>=0,F>=0,G>=0,J>=0] 


#### Cost of chains of case_23(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q):

#### Simplifying cost structure of CE 288 

#### Cost of chains of case_21(A,B,C,D,E,F,G,H,I,J,K,L,M):
* Chain [189]: 6
  with precondition: [A=0,J=1,K=0,M=1,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,L>=0] 

 * Renamed intermediate variables: 
[ (eq(289,1),s(1150))>>s(1233), (eq(289,1),s(1151))>>s(1234), (eq(289,1),s(1152))>>s(1235), (eq(289,1),s(1153))>>s(1236), (eq(289,1),s(1147))>>s(1237), (eq(289,1),s(1148))>>s(1238), (eq(289,1),s(1154))>>s(1239), (eq(289,1),s(1149))>>s(1240), (eq(289,1),s(1155))>>s(1241), (eq(289,1),s(1156))>>s(1242), (eq(289,1),s(1157))>>s(1243), (eq(289,1),s(1158))>>s(1244), (eq(289,1),s(1159))>>s(1245), (eq(289,1),s(1160))>>s(1246), (eq(289,1),s(1161))>>s(1247), (eq(289,1),s(1162))>>s(1248), (eq(289,1),s(1163))>>s(1249), (eq(289,1),s(1164))>>s(1250), (eq(289,1),s(1165))>>s(1251), (eq(289,1),s(1166))>>s(1252), (eq(289,1),s(1167))>>s(1253), (eq(289,1),s(1168))>>s(1254)]

#### Simplifying cost structure of CE 289 

#### Cost of chains of minus(A,B,C,D,E,F,G,H,I,J,K,L):
* Chain [190]: 636*s(1241)+250*s(1242)+400*s(1243)+602*s(1244)+270*s(1245)+270*s(1246)+162*s(1247)+636*s(1248)+250*s(1249)+474*s(1250)+270*s(1251)+270*s(1252)+162*s(1253)+272*s(1254)+59
  Such that:s(1233) =< A
s(1234) =< B
s(1235) =< B+1
s(1236) =< B/2
s(1237) =< E
s(1238) =< F
s(1239) =< F+1
s(1240) =< F/2
s(1241) =< s(1234)
s(1242) =< s(1236)
s(1243) =< s(1239)
s(1244) =< s(1233)
s(1245) =< s(1233)
s(1246) =< s(1233)
s(1247) =< s(1234)
s(1245) =< s(1235)
s(1247) =< s(1235)
s(1246) =< s(1234)
s(1242) =< s(1233)
s(1248) =< s(1238)
s(1249) =< s(1240)
s(1250) =< s(1237)
s(1251) =< s(1237)
s(1252) =< s(1237)
s(1253) =< s(1238)
s(1251) =< s(1239)
s(1253) =< s(1239)
s(1252) =< s(1238)
s(1249) =< s(1237)
s(1254) =< s(1235)

  with precondition: [D=1,H=1,I=1,J=0,L=1,A>=2,C>=0,E>=2,G>=0,K>=0,B+1>=A,F+1>=E] 


#### Simplifying cost structure of CE 290 

#### Computing cost of phase [191,192,193,194] 
 * Renamed intermediate variables: 
[ (eq(294,1),aux(74))>>s(1255), (eq(294,1),aux(75))>>s(1256), (eq(294,1),aux(77))>>s(1257), (eq(294,1),aux(80))>>s(1258), (eq(294,1),aux(65))>>s(1259), (eq(294,1),it(162))>>s(1260), (eq(294,1),aux(81))>>s(1261), (eq(294,1),aux(82))>>s(1262), (eq(294,1),aux(85))>>s(1263), (eq(294,1),aux(84))>>s(1264), (eq(294,1),it(160))>>s(1265), (eq(294,1),aux(71))>>s(1266), (eq(294,1),aux(86))>>s(1267), (eq(294,1),aux(87))>>s(1268), (eq(294,1),aux(72))>>s(1269), (eq(294,1),it(159))>>s(1270), (eq(294,1),it(161))>>s(1271), (eq(294,1),s(1201))>>s(1272), (eq(294,1),s(1203))>>s(1273), (eq(294,1),s(1202))>>s(1274), (eq(294,1),s(1204))>>s(1275), (eq(294,1),aux(68))>>s(1276), (eq(294,1),aux(63))>>s(1277), (eq(294,1),aux(64))>>s(1278)]

#### Simplifying cost structure of CE 294 
 * Joined equivalent variables [aux(116),s(1259),s(1262),s(1268)] into aux(116)
 * Joined equivalent variables [aux(117),s(1258)] into aux(117)
 * Renamed intermediate variables: 
[ (it(191),s(1266))>>s(1279), (it(191),s(1256))>>s(1280), (it(191),s(1255))>>s(1281), (it(191),s(1267))>>s(1282), (it(191),s(1261))>>s(1283), (it(191),s(1263))>>s(1284), (it(191),s(1264))>>s(1285), (it(191),s(1265))>>s(1286), (it(191),s(1257))>>s(1287), (it(191),aux(116))>>s(1288), (it(191),aux(117))>>s(1289), (it(191),s(1260))>>s(1290), (it(191),s(1269))>>s(1291), (it(191),s(1270))>>s(1292), (it(191),s(1271))>>s(1293), (it(191),s(1272))>>s(1294), (it(191),s(1273))>>s(1295), (it(191),s(1274))>>s(1296), (it(191),s(1275))>>s(1297), (it(191),s(1276))>>s(1298), (it(191),s(1277))>>s(1299), (it(191),s(1278))>>s(1300)]
 * Renamed intermediate variables: 
[ (eq(293,1),aux(73))>>s(1301), (eq(293,1),aux(74))>>s(1302), (eq(293,1),aux(75))>>s(1303), (eq(293,1),aux(80))>>s(1304), (eq(293,1),aux(65))>>s(1305), (eq(293,1),aux(81))>>s(1306), (eq(293,1),aux(85))>>s(1307), (eq(293,1),aux(84))>>s(1308), (eq(293,1),it(160))>>s(1309), (eq(293,1),aux(71))>>s(1310), (eq(293,1),aux(88))>>s(1311), (eq(293,1),aux(89))>>s(1312), (eq(293,1),aux(90))>>s(1313), (eq(293,1),it(162))>>s(1314), (eq(293,1),aux(72))>>s(1315), (eq(293,1),it(159))>>s(1316), (eq(293,1),it(161))>>s(1317), (eq(293,1),s(1201))>>s(1318), (eq(293,1),s(1203))>>s(1319), (eq(293,1),s(1202))>>s(1320), (eq(293,1),s(1204))>>s(1321), (eq(293,1),aux(68))>>s(1322), (eq(293,1),aux(63))>>s(1323), (eq(293,1),aux(64))>>s(1324)]

#### Simplifying cost structure of CE 293 
 * Joined equivalent variables [aux(118),s(1305),s(1312)] into aux(118)
 * Joined equivalent variables [aux(119),s(1304),s(1313)] into aux(119)
 * Renamed intermediate variables: 
[ (it(192),s(1310))>>s(1325), (it(192),s(1302))>>s(1326), (it(192),s(1301))>>s(1327), (it(192),s(1306))>>s(1328), (it(192),s(1303))>>s(1329), (it(192),s(1307))>>s(1330), (it(192),s(1308))>>s(1331), (it(192),s(1309))>>s(1332), (it(192),s(1311))>>s(1333), (it(192),aux(118))>>s(1334), (it(192),aux(119))>>s(1335), (it(192),s(1314))>>s(1336), (it(192),s(1315))>>s(1337), (it(192),s(1316))>>s(1338), (it(192),s(1317))>>s(1339), (it(192),s(1318))>>s(1340), (it(192),s(1319))>>s(1341), (it(192),s(1320))>>s(1342), (it(192),s(1321))>>s(1343), (it(192),s(1322))>>s(1344), (it(192),s(1323))>>s(1345), (it(192),s(1324))>>s(1346)]

#### Simplifying cost structure of CE 291 

#### Simplifying cost structure of CE 292 

#### Cost of loops [191,192,193,194] 

 * loop 191:mat_mult_jan(A,B,C,D,E,F,G,H,I) -> [mat_mult_jan(A',B',C',D',E',F',G',H',I')] 
11*s(1290)+11*s(1286)+11*s(1292)+11*s(1293)+10*s(1294)+10*s(1295)+9*s(1296)+9*s(1297)+9
  Such that:s(1279) =< 1
s(1280) =< B+E-B'
s(1281) =< B+E-B'+1
s(1282) =< B-B'
s(1283) =< E+2
s(1284) =< E/2
s(1285) =< E/2+1/2
s(1286) =< E/3
s(1287) =< D'
s(1288) =< E
s(1289) =< E+1
s(1290) =< s(1289)
s(1291) =< s(1282)
s(1292) =< s(1282)
s(1286) =< s(1282)
s(1293) =< s(1282)
s(1290) =< s(1282)
s(1286) =< s(1281)
s(1293) =< s(1281)
s(1290) =< s(1281)
s(1294) =< s(1281)
s(1295) =< s(1281)
s(1286) =< s(1280)
s(1293) =< s(1280)
s(1290) =< s(1280)
s(1294) =< s(1280)
s(1295) =< s(1280)
s(1291) =< s(1287)
s(1292) =< s(1287)
s(1286) =< s(1287)
s(1293) =< s(1287)
s(1290) =< s(1287)
s(1290) =< s(1288)
s(1296) =< s(1288)
s(1295) =< s(1288)
s(1297) =< s(1288)
s(1291) =< s(1289)
s(1292) =< s(1289)
s(1286) =< s(1289)
s(1293) =< s(1289)
s(1286) =< s(1283)
s(1290) =< s(1283)
s(1294) =< s(1283)
s(1286) =< s(1288)
s(1294) =< s(1288)
s(1291) =< s(1288)
s(1292) =< s(1288)
s(1293) =< s(1288)
s(1292) =< s(1285)
s(1286) =< s(1285)
s(1290) =< s(1285)
s(1292) =< s(1284)
s(1286) =< s(1284)
s(1290) =< s(1284)
s(1298) =< s(1288)+2
s(1299) =< s(1292)*s(1288)
s(1296) =< s(1286)*s(1289)
s(1290) =< s(1291)+s(1279)
s(1300) =< s(1293)*s(1298)
s(1290) =< s(1300)+s(1299)+s(1288)
s(1296) =< s(1300)+s(1299)+s(1288)

 * loop 192:mat_mult_jan(A,B,C,D,E,F,G,H,I) -> [mat_mult_jan(A',B',C',D',E',F',G',H',I')] 
11*s(1332)+11*s(1336)+11*s(1338)+11*s(1339)+10*s(1340)+10*s(1341)+9*s(1342)+9*s(1343)+13
  Such that:s(1325) =< 1
s(1326) =< B+E-B'+1
s(1327) =< B-B'
s(1328) =< E+2
s(1329) =< E+D'+1
s(1330) =< E/2
s(1331) =< E/2+1/2
s(1332) =< E/3
s(1333) =< D'
s(1334) =< E
s(1335) =< E+1
s(1336) =< s(1335)
s(1337) =< s(1327)
s(1338) =< s(1327)
s(1332) =< s(1327)
s(1339) =< s(1327)
s(1336) =< s(1327)
s(1332) =< s(1326)
s(1339) =< s(1326)
s(1336) =< s(1326)
s(1340) =< s(1326)
s(1341) =< s(1326)
s(1332) =< s(1329)
s(1339) =< s(1329)
s(1336) =< s(1329)
s(1340) =< s(1329)
s(1341) =< s(1329)
s(1337) =< s(1333)
s(1338) =< s(1333)
s(1332) =< s(1333)
s(1339) =< s(1333)
s(1336) =< s(1333)
s(1336) =< s(1334)
s(1342) =< s(1334)
s(1341) =< s(1334)
s(1343) =< s(1334)
s(1337) =< s(1335)
s(1338) =< s(1335)
s(1332) =< s(1335)
s(1339) =< s(1335)
s(1332) =< s(1328)
s(1336) =< s(1328)
s(1340) =< s(1328)
s(1340) =< s(1335)
s(1337) =< s(1334)
s(1338) =< s(1334)
s(1332) =< s(1334)
s(1339) =< s(1334)
s(1338) =< s(1331)
s(1332) =< s(1331)
s(1336) =< s(1331)
s(1338) =< s(1330)
s(1332) =< s(1330)
s(1336) =< s(1330)
s(1344) =< s(1334)+2
s(1345) =< s(1338)*s(1334)
s(1342) =< s(1332)*s(1335)
s(1336) =< s(1337)+s(1325)
s(1346) =< s(1339)*s(1344)
s(1336) =< s(1346)+s(1345)+s(1334)
s(1342) =< s(1346)+s(1345)+s(1334)

 * loop 193:mat_mult_jan(A,B,C,D,E,F,G,H,I) -> [mat_mult_jan(A',B',C',D',E',F',G',H',I')] 
9
 * loop 194:mat_mult_jan(A,B,C,D,E,F,G,H,I) -> [mat_mult_jan(A',B',C',D',E',F',G',H',I')] 
13
##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(1288)=<E,s(1334)=<E,s(1289)=<E+1,s(1335)=<E+1]
* Psum in Loop 191: [it(191)=<1,s(1358)=<1,s(1365)=<B+E-B',s(1366)=<B+E-B'+1,s(1367)=<B-B',s(1355)=<E,s(1363)=<E+1,s(1362)=<E+2,s(1360)=<E/2,s(1361)=<E/2+1/2,s(1348)=<E/3,s(1364)=<D']
* Psum in Loop 192: [it(192)=<1,s(1379)=<1,s(1387)=<B+E-B'+1,s(1388)=<B-B',s(1376)=<E,s(1383)=<E+1,s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing max_min for s(1288)=<E  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(1288)=<E] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(1334)=<E,s(1289)=<E+1,s(1335)=<E+1]
* Psum in Loop 191: [it(191)=<1,s(1358)=<1,s(1365)=<B+E-B',s(1366)=<B+E-B'+1,s(1367)=<B-B',s(1355)=<E,s(1363)=<E+1,s(1362)=<E+2,s(1360)=<E/2,s(1361)=<E/2+1/2,s(1348)=<E/3,s(1364)=<D']
* Psum in Loop 192: [it(192)=<1,s(1379)=<1,s(1387)=<B+E-B'+1,s(1388)=<B-B',s(1376)=<E,s(1383)=<E+1,s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing max_min for s(1334)=<E  
   - Found a solution using cacheing 
 * Adding constraints:[s(1334)=<s(1288)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(1289)=<E+1,s(1335)=<E+1]
* Psum in Loop 191: [it(191)=<1,s(1358)=<1,s(1365)=<B+E-B',s(1366)=<B+E-B'+1,s(1367)=<B-B',s(1355)=<E,s(1363)=<E+1,s(1362)=<E+2,s(1360)=<E/2,s(1361)=<E/2+1/2,s(1348)=<E/3,s(1364)=<D']
* Psum in Loop 192: [it(192)=<1,s(1379)=<1,s(1387)=<B+E-B'+1,s(1388)=<B-B',s(1376)=<E,s(1383)=<E+1,s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing max_min for s(1289)=<E+1  
   - Found a solution using cacheing 
 * Adding constraints:[s(1289)=<s(1288)+1] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(1335)=<E+1]
* Psum in Loop 191: [it(191)=<1,s(1358)=<1,s(1365)=<B+E-B',s(1366)=<B+E-B'+1,s(1367)=<B-B',s(1355)=<E,s(1363)=<E+1,s(1362)=<E+2,s(1360)=<E/2,s(1361)=<E/2+1/2,s(1348)=<E/3,s(1364)=<D']
* Psum in Loop 192: [it(192)=<1,s(1379)=<1,s(1387)=<B+E-B'+1,s(1388)=<B-B',s(1376)=<E,s(1383)=<E+1,s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing max_min for s(1335)=<E+1  
   - Found a solution using cacheing 
 * Adding constraints:[s(1335)=<s(1288)+1] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 191: [it(191)=<1,s(1358)=<1,s(1365)=<B+E-B',s(1366)=<B+E-B'+1,s(1367)=<B-B',s(1355)=<E,s(1363)=<E+1,s(1362)=<E+2,s(1360)=<E/2,s(1361)=<E/2+1/2,s(1348)=<E/3,s(1364)=<D']
* Psum in Loop 192: [it(192)=<1,s(1379)=<1,s(1387)=<B+E-B'+1,s(1388)=<B-B',s(1376)=<E,s(1383)=<E+1,s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing sum for it(191)=<1  in Loop 191 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - Loop 192 is collaborative and bounds [it(192)] 
       - Loop 193 is collaborative and bounds [it(193)] 
       - Loop 194 is collaborative and bounds [it(194)] 
     - head Candidate: B+1 
       - Loop 192 is collaborative and bounds [it(192)] 
       - Loop 193 is collaborative and bounds [it(193)] 
       - Loop 194 is collaborative and bounds [it(194)] 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B/2+1/2 
       - Loop 192 is collaborative and bounds [it(192)] 
       - Loop 193 is collaborative
       - Loop 194 is collaborative and bounds [it(194)] 
     - tail Candidate: A-1 
       - Loop 192 is collaborative and bounds [it(192)] 
       - Loop 193 is collaborative and bounds [it(193)] 
       - Loop 194 is collaborative and bounds [it(194)] 
     - tail Candidate: B+1 
       - Loop 192 is collaborative and bounds [it(192)] 
       - Loop 193 is collaborative and bounds [it(193)] 
       - Loop 194 is collaborative and bounds [it(194)] 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B/2+1/2 
       - Loop 192 is collaborative and bounds [it(192)] 
       - Loop 193 is collaborative
       - Loop 194 is collaborative and bounds [it(194)] 
 * Adding constraints: [it(191)+it(192)+it(193)+it(194)=<A-1,it(191)+it(192)+it(193)+it(194)=<B+1,it(191)+it(192)+it(193)+it(194)=<A-1,it(191)+it(192)+it(194)=<B/2+1/2,it(191)+it(192)+it(193)+it(194)=<A-A',it(191)+it(192)+it(193)+it(194)=<B-B',it(191)+it(192)+it(193)+it(194)=<A-A',it(191)+it(192)+it(194)=<B/2-B'/2] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 191: [s(1358)=<1,s(1365)=<B+E-B',s(1366)=<B+E-B'+1,s(1367)=<B-B',s(1355)=<E,s(1363)=<E+1,s(1362)=<E+2,s(1360)=<E/2,s(1361)=<E/2+1/2,s(1348)=<E/3,s(1364)=<D']
* Psum in Loop 192: [it(192)=<1,s(1379)=<1,s(1387)=<B+E-B'+1,s(1388)=<B-B',s(1376)=<E,s(1383)=<E+1,s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing sum for s(1358)=<1  in Loop 191 
   - Found a solution using cacheing 
 * Adding constraints: [s(1358)=<aux(120),aux(120)+it(192)+it(193)+it(194)=<A-1,aux(120)+it(192)+it(193)+it(194)=<B+1,aux(120)+it(192)+it(193)+it(194)=<A-1,aux(120)+it(192)+it(194)=<B/2+1/2,aux(120)+it(192)+it(193)+it(194)=<A-A',aux(120)+it(192)+it(193)+it(194)=<B-B',aux(120)+it(192)+it(193)+it(194)=<A-A',aux(120)+it(192)+it(194)=<B/2-B'/2] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 191: [s(1365)=<B+E-B',s(1366)=<B+E-B'+1,s(1367)=<B-B',s(1355)=<E,s(1363)=<E+1,s(1362)=<E+2,s(1360)=<E/2,s(1361)=<E/2+1/2,s(1348)=<E/3,s(1364)=<D']
* Psum in Loop 192: [it(192)=<1,s(1379)=<1,s(1387)=<B+E-B'+1,s(1388)=<B-B',s(1376)=<E,s(1383)=<E+1,s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing sum for s(1365)=<B+E-B'  in Loop 191 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(121)=<D+E,aux(121)=<2*E+1] 
 * Adding constraints: [s(1365)=<it(191)*aux(121)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(121)=<D+E,aux(121)=<2*E+1]
* Psum in Loop 191: [s(1366)=<B+E-B'+1,s(1367)=<B-B',s(1355)=<E,s(1363)=<E+1,s(1362)=<E+2,s(1360)=<E/2,s(1361)=<E/2+1/2,s(1348)=<E/3,s(1364)=<D']
* Psum in Loop 192: [it(192)=<1,s(1379)=<1,s(1387)=<B+E-B'+1,s(1388)=<B-B',s(1376)=<E,s(1383)=<E+1,s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing max_min for aux(121)=<D+E  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(121)=<D+E] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(121)=<2*E+1]
* Psum in Loop 191: [s(1366)=<B+E-B'+1,s(1367)=<B-B',s(1355)=<E,s(1363)=<E+1,s(1362)=<E+2,s(1360)=<E/2,s(1361)=<E/2+1/2,s(1348)=<E/3,s(1364)=<D']
* Psum in Loop 192: [it(192)=<1,s(1379)=<1,s(1387)=<B+E-B'+1,s(1388)=<B-B',s(1376)=<E,s(1383)=<E+1,s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing max_min for aux(121)=<2*E+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(121)=<s(1288)*2+1] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 191: [s(1366)=<B+E-B'+1,s(1367)=<B-B',s(1355)=<E,s(1363)=<E+1,s(1362)=<E+2,s(1360)=<E/2,s(1361)=<E/2+1/2,s(1348)=<E/3,s(1364)=<D']
* Psum in Loop 192: [it(192)=<1,s(1379)=<1,s(1387)=<B+E-B'+1,s(1388)=<B-B',s(1376)=<E,s(1383)=<E+1,s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing sum for s(1366)=<B+E-B'+1  in Loop 191 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(122)=<2*E+2,aux(122)=<D+E+1] 
 * Adding constraints: [s(1366)=<it(191)*aux(122)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(122)=<D+E+1,aux(122)=<2*E+2]
* Psum in Loop 191: [s(1367)=<B-B',s(1355)=<E,s(1363)=<E+1,s(1362)=<E+2,s(1360)=<E/2,s(1361)=<E/2+1/2,s(1348)=<E/3,s(1364)=<D']
* Psum in Loop 192: [it(192)=<1,s(1379)=<1,s(1387)=<B+E-B'+1,s(1388)=<B-B',s(1376)=<E,s(1383)=<E+1,s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing max_min for aux(122)=<D+E+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(122)=<aux(121)+1] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(122)=<2*E+2]
* Psum in Loop 191: [s(1367)=<B-B',s(1355)=<E,s(1363)=<E+1,s(1362)=<E+2,s(1360)=<E/2,s(1361)=<E/2+1/2,s(1348)=<E/3,s(1364)=<D']
* Psum in Loop 192: [it(192)=<1,s(1379)=<1,s(1387)=<B+E-B'+1,s(1388)=<B-B',s(1376)=<E,s(1383)=<E+1,s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing max_min for aux(122)=<2*E+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(122)=<s(1288)*2+2] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 191: [s(1367)=<B-B',s(1355)=<E,s(1363)=<E+1,s(1362)=<E+2,s(1360)=<E/2,s(1361)=<E/2+1/2,s(1348)=<E/3,s(1364)=<D']
* Psum in Loop 192: [it(192)=<1,s(1379)=<1,s(1387)=<B+E-B'+1,s(1388)=<B-B',s(1376)=<E,s(1383)=<E+1,s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing sum for s(1367)=<B-B'  in Loop 191 
   - Applying inductive sum strategy 
     - head Candidate: -2*A+2*B+2 
       - Loop 192 is collaborative and bounds [it(192)] 
       - Loop 193 is collaborative
       - Loop 194 is collaborative and bounds [it(194)] 
     - head Candidate: B 
       - Loop 192 is collaborative and bounds [it(192)] 
       - Loop 193 is collaborative and bounds [it(193)] 
       - Loop 194 is collaborative and bounds [it(194)] 
     - tail Candidate: -2*A+2*B+2 
       - Loop 192 is collaborative and bounds [it(192)] 
       - Loop 193 is collaborative
       - Loop 194 is collaborative and bounds [it(194)] 
     - tail Candidate: B 
       - Loop 192 is collaborative and bounds [it(192)] 
       - Loop 193 is collaborative and bounds [it(193)] 
       - Loop 194 is collaborative and bounds [it(194)] 
 * Adding constraints: [it(192)+it(194)+s(1367)=< -2*A+2*B+2,it(192)+it(193)+it(194)+s(1367)=<B,it(192)+it(194)+s(1367)=< -2*A+2*B+2*A'-2*B',it(192)+it(193)+it(194)+s(1367)=<B-B'] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 191: [s(1355)=<E,s(1363)=<E+1,s(1362)=<E+2,s(1360)=<E/2,s(1361)=<E/2+1/2,s(1348)=<E/3,s(1364)=<D']
* Psum in Loop 192: [it(192)=<1,s(1379)=<1,s(1387)=<B+E-B'+1,s(1388)=<B-B',s(1376)=<E,s(1383)=<E+1,s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing sum for s(1355)=<E  in Loop 191 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(123)=<E] 
 * Adding constraints: [s(1355)=<it(191)*aux(123)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(123)=<E]
* Psum in Loop 191: [s(1363)=<E+1,s(1362)=<E+2,s(1360)=<E/2,s(1361)=<E/2+1/2,s(1348)=<E/3,s(1364)=<D']
* Psum in Loop 192: [it(192)=<1,s(1379)=<1,s(1387)=<B+E-B'+1,s(1388)=<B-B',s(1376)=<E,s(1383)=<E+1,s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing max_min for aux(123)=<E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(123)=<s(1288)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 191: [s(1363)=<E+1,s(1362)=<E+2,s(1360)=<E/2,s(1361)=<E/2+1/2,s(1348)=<E/3,s(1364)=<D']
* Psum in Loop 192: [it(192)=<1,s(1379)=<1,s(1387)=<B+E-B'+1,s(1388)=<B-B',s(1376)=<E,s(1383)=<E+1,s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing sum for s(1363)=<E+1  in Loop 191 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(124)=<E+1] 
 * Adding constraints: [s(1363)=<it(191)*aux(124)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(124)=<E+1]
* Psum in Loop 191: [s(1362)=<E+2,s(1360)=<E/2,s(1361)=<E/2+1/2,s(1348)=<E/3,s(1364)=<D']
* Psum in Loop 192: [it(192)=<1,s(1379)=<1,s(1387)=<B+E-B'+1,s(1388)=<B-B',s(1376)=<E,s(1383)=<E+1,s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing max_min for aux(124)=<E+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(124)=<s(1288)+1] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 191: [s(1362)=<E+2,s(1360)=<E/2,s(1361)=<E/2+1/2,s(1348)=<E/3,s(1364)=<D']
* Psum in Loop 192: [it(192)=<1,s(1379)=<1,s(1387)=<B+E-B'+1,s(1388)=<B-B',s(1376)=<E,s(1383)=<E+1,s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing sum for s(1362)=<E+2  in Loop 191 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(125)=<E+2] 
 * Adding constraints: [s(1362)=<it(191)*aux(125)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(125)=<E+2]
* Psum in Loop 191: [s(1360)=<E/2,s(1361)=<E/2+1/2,s(1348)=<E/3,s(1364)=<D']
* Psum in Loop 192: [it(192)=<1,s(1379)=<1,s(1387)=<B+E-B'+1,s(1388)=<B-B',s(1376)=<E,s(1383)=<E+1,s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing max_min for aux(125)=<E+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(125)=<s(1288)+2] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 191: [s(1360)=<E/2,s(1361)=<E/2+1/2,s(1348)=<E/3,s(1364)=<D']
* Psum in Loop 192: [it(192)=<1,s(1379)=<1,s(1387)=<B+E-B'+1,s(1388)=<B-B',s(1376)=<E,s(1383)=<E+1,s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing sum for s(1360)=<E/2  in Loop 191 
   - Found a solution using cacheing 
 * Adding constraints: [s(1360)=<aux(126)* (1/2),aux(126)=<it(191)*aux(123)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 191: [s(1361)=<E/2+1/2,s(1348)=<E/3,s(1364)=<D']
* Psum in Loop 192: [it(192)=<1,s(1379)=<1,s(1387)=<B+E-B'+1,s(1388)=<B-B',s(1376)=<E,s(1383)=<E+1,s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing sum for s(1361)=<E/2+1/2  in Loop 191 
   - Found a solution using cacheing 
 * Adding constraints: [s(1361)=<aux(127)* (1/2),aux(127)=<it(191)*aux(124)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 191: [s(1348)=<E/3,s(1364)=<D']
* Psum in Loop 192: [it(192)=<1,s(1379)=<1,s(1387)=<B+E-B'+1,s(1388)=<B-B',s(1376)=<E,s(1383)=<E+1,s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing sum for s(1348)=<E/3  in Loop 191 
   - Found a solution using cacheing 
 * Adding constraints: [s(1348)=<aux(128)* (1/3),aux(128)=<it(191)*aux(123)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 191: [s(1364)=<D']
* Psum in Loop 192: [it(192)=<1,s(1379)=<1,s(1387)=<B+E-B'+1,s(1388)=<B-B',s(1376)=<E,s(1383)=<E+1,s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing sum for s(1364)=<D'  in Loop 191 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(129)=<D] 
 * Adding constraints: [s(1364)=<it(191)*aux(129)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(129)=<D]
* Psum in Loop 192: [it(192)=<1,s(1379)=<1,s(1387)=<B+E-B'+1,s(1388)=<B-B',s(1376)=<E,s(1383)=<E+1,s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing max_min for aux(129)=<D  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(129)=<D] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 192: [it(192)=<1,s(1379)=<1,s(1387)=<B+E-B'+1,s(1388)=<B-B',s(1376)=<E,s(1383)=<E+1,s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing sum for it(192)=<1  in Loop 192 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B/3+1/3 
       - Loop 191 is collaborative
       - Loop 193 is collaborative
       - Loop 194 is collaborative
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B/3+1/3 
       - Loop 191 is collaborative
       - Loop 193 is collaborative
       - Loop 194 is collaborative
 * Adding constraints: [it(191)+it(192)+it(193)+it(194)=<A-1,it(191)+it(192)+it(193)+it(194)=<B+1,it(191)+it(192)+it(193)+it(194)=<A-1,it(192)=<B/3+1/3,it(191)+it(192)+it(193)+it(194)=<A-A',it(191)+it(192)+it(193)+it(194)=<B-B',it(191)+it(192)+it(193)+it(194)=<A-A',it(192)=<B/3-B'/3] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 192: [s(1379)=<1,s(1387)=<B+E-B'+1,s(1388)=<B-B',s(1376)=<E,s(1383)=<E+1,s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing sum for s(1379)=<1  in Loop 192 
   - Found a solution using cacheing 
 * Adding constraints: [s(1379)=<aux(130),aux(130)+it(191)+it(193)+it(194)=<A-1,aux(130)+it(191)+it(193)+it(194)=<B+1,aux(130)+it(191)+it(193)+it(194)=<A-1,aux(130)=<B/3+1/3,aux(130)+it(191)+it(193)+it(194)=<A-A',aux(130)+it(191)+it(193)+it(194)=<B-B',aux(130)+it(191)+it(193)+it(194)=<A-A',aux(130)=<B/3-B'/3] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 192: [s(1387)=<B+E-B'+1,s(1388)=<B-B',s(1376)=<E,s(1383)=<E+1,s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing sum for s(1387)=<B+E-B'+1  in Loop 192 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(131)=<B+E+1,aux(131)=< -A+B+E+3] 
 * Adding constraints: [s(1387)=<it(192)*aux(131)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(131)=< -A+B+E+3,aux(131)=<B+E+1]
* Psum in Loop 192: [s(1388)=<B-B',s(1376)=<E,s(1383)=<E+1,s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing max_min for aux(131)=< -A+B+E+3  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(131)=<B+E+1,aux(131)=< -A+B+E+3] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(131)=<B+E+1]
* Psum in Loop 192: [s(1388)=<B-B',s(1376)=<E,s(1383)=<E+1,s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing max_min for aux(131)=<B+E+1  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(131)=<B+E+1] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 192: [s(1388)=<B-B',s(1376)=<E,s(1383)=<E+1,s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing sum for s(1388)=<B-B'  in Loop 192 
   - Applying inductive sum strategy 
     - head Candidate: -3/2*A+3/2*B-D/2+5/2 
       - Loop 191 is collaborative
       - Loop 193 is collaborative
       - Loop 194 is collaborative and bounds [it(194)] 
     - head Candidate: -3/2*A+3/2*B+3/2 
       - Loop 191 is collaborative
       - Loop 193 is collaborative
       - Loop 194 is collaborative and bounds [it(194)] 
     - tail Candidate: -3/2*A+3/2*B-D/2+5/2 
       - Loop 191 is collaborative
       - Loop 193 is collaborative
       - Loop 194 is collaborative and bounds [it(194)] 
     - tail Candidate: -3/2*A+3/2*B+3/2 
       - Loop 191 is collaborative
       - Loop 193 is collaborative
       - Loop 194 is collaborative and bounds [it(194)] 
 * Adding constraints: [it(194)+s(1388)=< -3/2*A+3/2*B-D/2+5/2,it(194)+s(1388)=< -3/2*A+3/2*B+3/2,it(194)+s(1388)=< -3/2*A+3/2*B-D/2+3/2*A'-3/2*B'+D'/2,it(194)+s(1388)=< -3/2*A+3/2*B+3/2*A'-3/2*B'] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 192: [s(1376)=<E,s(1383)=<E+1,s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing sum for s(1376)=<E  in Loop 192 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(132)=<E] 
 * Adding constraints: [s(1376)=<it(192)*aux(132)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(132)=<E]
* Psum in Loop 192: [s(1383)=<E+1,s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing max_min for aux(132)=<E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(132)=<s(1288)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 192: [s(1383)=<E+1,s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing sum for s(1383)=<E+1  in Loop 192 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(133)=<E+1] 
 * Adding constraints: [s(1383)=<it(192)*aux(133)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(133)=<E+1]
* Psum in Loop 192: [s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing max_min for aux(133)=<E+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(133)=<s(1288)+1] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 192: [s(1384)=<E+2,s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing sum for s(1384)=<E+2  in Loop 192 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(134)=<E+2] 
 * Adding constraints: [s(1384)=<it(192)*aux(134)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(134)=<E+2]
* Psum in Loop 192: [s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing max_min for aux(134)=<E+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(134)=<s(1288)+2] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 192: [s(1386)=<E+D'+1,s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing sum for s(1386)=<E+D'+1  in Loop 192 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(135)=<2*E+2,aux(135)=<D+E+1] 
 * Adding constraints: [s(1386)=<it(192)*aux(135)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(135)=<D+E+1,aux(135)=<2*E+2]
* Psum in Loop 192: [s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing max_min for aux(135)=<D+E+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(135)=<aux(121)+1] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(135)=<2*E+2]
* Psum in Loop 192: [s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing max_min for aux(135)=<2*E+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(135)=<s(1288)*2+2] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 192: [s(1381)=<E/2,s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing sum for s(1381)=<E/2  in Loop 192 
   - Found a solution using cacheing 
 * Adding constraints: [s(1381)=<aux(136)* (1/2),aux(136)=<it(192)*aux(132)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 192: [s(1382)=<E/2+1/2,s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing sum for s(1382)=<E/2+1/2  in Loop 192 
   - Found a solution using cacheing 
 * Adding constraints: [s(1382)=<aux(137)* (1/2),aux(137)=<it(192)*aux(133)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 192: [s(1368)=<E/3,s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing sum for s(1368)=<E/3  in Loop 192 
   - Found a solution using cacheing 
 * Adding constraints: [s(1368)=<aux(138)* (1/3),aux(138)=<it(192)*aux(132)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 192: [s(1385)=<D']
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing sum for s(1385)=<D'  in Loop 192 
   - Applying inductive sum strategy 
     - head Candidate: B-1 
       - Loop 191 is collaborative
       - Loop 193 is collaborative
       - Loop 194 is collaborative and bounds [it(194)] 
     - head Candidate: -A+B+1 
       - Loop 191 is collaborative
       - Loop 193 is collaborative
       - Loop 194 is collaborative and bounds [it(194)] 
     - tail Candidate: B-1 
       - Loop 191 is collaborative
       - Loop 193 is collaborative and bounds [it(193)] 
       - Loop 194 is collaborative and bounds [it(194)] 
     - tail Candidate: -A+B+1 
       - Loop 191 is collaborative
       - Loop 193 is collaborative
       - Loop 194 is collaborative and bounds [it(194)] 
 * Adding constraints: [it(194)+s(1385)=<B-1,it(194)+s(1385)=< -A+B+1,it(193)+it(194)+s(1385)=<B-B',it(194)+s(1385)=< -A+B+A'-B'] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 193: [it(193)=<1]
* Psum in Loop 194: [it(194)=<1]

###### Computing sum for it(193)=<1  in Loop 193 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(191)+it(192)+it(193)+it(194)=<A-1,it(191)+it(192)+it(193)+it(194)=<B+1,it(191)+it(192)+it(193)+it(194)=<A-1,it(191)+it(192)+it(193)+it(194)=<B+1,it(191)+it(192)+it(193)+it(194)=<A-A',it(191)+it(192)+it(193)+it(194)=<B-B',it(191)+it(192)+it(193)+it(194)=<A-A',it(191)+it(192)+it(193)+it(194)=<B-B'] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 194: [it(194)=<1]

###### Computing sum for it(194)=<1  in Loop 194 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(191)+it(192)+it(193)+it(194)=<A-1,it(191)+it(192)+it(193)+it(194)=<B+1,it(191)+it(192)+it(193)+it(194)=<A-1,it(191)+it(192)+it(194)=<B/2+1/2,it(191)+it(192)+it(193)+it(194)=<A-A',it(191)+it(192)+it(193)+it(194)=<B-B',it(191)+it(192)+it(193)+it(194)=<A-A',it(191)+it(192)+it(194)=<B/2-B'/2] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [191,192,193,194] 

#### Simplifying cost structure of phase [191,192,193,194] 
 * Joined equivalent variables [aux(120),s(1358)] into aux(120)
 * Joined equivalent variables [aux(130),s(1379)] into aux(130)
 * Joined equivalent variables [aux(122),aux(135)] into aux(122)
 * Joined equivalent variables [aux(125),aux(134),s(1298)] into aux(125)
 * Joined equivalent variables [aux(124),aux(133),s(1289),s(1335)] into aux(124)
 * Joined equivalent variables [aux(123),aux(132),s(1334)] into aux(123)
 * Joined equivalent variables [aux(136),aux(138),s(1376)] into aux(136)
 * Joined equivalent variables [aux(137),s(1383)] into aux(137)
 * Joined equivalent variables [aux(126),aux(128),s(1355)] into aux(126)
 * Joined equivalent variables [aux(127),s(1363)] into aux(127)

#### Cost of phase [191,192,193,194]:mat_mult_jan(A,B,C,D,E,F,G,H,I) -> [mat_mult_jan(A',B',C',D',E',F',G',H',I')] 
9*it(191)+13*it(192)+9*it(193)+13*it(194)+11*s(1347)+11*s(1348)+11*s(1349)+11*s(1350)+10*s(1351)+10*s(1352)+9*s(1353)+9*s(1354)+11*s(1368)+11*s(1369)+11*s(1370)+11*s(1371)+10*s(1372)+10*s(1373)+9*s(1374)+9*s(1375)+0
  Such that:aux(131) =< -A+B+E+3
aux(131) =< B+E+1
aux(129) =< D
aux(121) =< D+E
s(1288) =< E
aux(139) =< -2*A+2*B+2
aux(140) =< -2*A+2*B+2*A'-2*B'
aux(141) =< -A+B+1
aux(142) =< -A+B+A'-B'
aux(143) =< A
aux(144) =< A-A'
aux(145) =< -3/2*A+3/2*B+3/2
aux(146) =< -3/2*A+3/2*B-D/2+5/2
aux(147) =< -3/2*A+3/2*B-D/2+3/2*A'-3/2*B'+D'/2
aux(148) =< -3/2*A+3/2*B+3/2*A'-3/2*B'
aux(149) =< B
aux(150) =< B+1
aux(151) =< B-B'
aux(152) =< B/2+1/2
aux(153) =< B/2-B'/2
aux(154) =< B/3+1/3
aux(155) =< B/3-B'/3
it(192) =< aux(139)
it(194) =< aux(139)
s(1367) =< aux(139)
it(192) =< aux(140)
it(194) =< aux(140)
s(1367) =< aux(140)
it(194) =< aux(141)
s(1385) =< aux(141)
it(194) =< aux(142)
s(1385) =< aux(142)
aux(120) =< aux(143)
aux(130) =< aux(143)
it(191) =< aux(143)
it(192) =< aux(143)
it(193) =< aux(143)
it(194) =< aux(143)
aux(120) =< aux(144)
aux(130) =< aux(144)
it(191) =< aux(144)
it(192) =< aux(144)
it(193) =< aux(144)
it(194) =< aux(144)
it(194) =< aux(145)
s(1388) =< aux(145)
it(194) =< aux(146)
s(1388) =< aux(146)
it(194) =< aux(147)
s(1388) =< aux(147)
it(194) =< aux(148)
s(1388) =< aux(148)
it(192) =< aux(149)
it(193) =< aux(149)
it(194) =< aux(149)
s(1367) =< aux(149)
s(1385) =< aux(149)
aux(120) =< aux(150)
aux(130) =< aux(150)
it(191) =< aux(150)
it(192) =< aux(150)
it(193) =< aux(150)
it(194) =< aux(150)
aux(120) =< aux(151)
aux(130) =< aux(151)
it(191) =< aux(151)
it(192) =< aux(151)
it(193) =< aux(151)
it(194) =< aux(151)
s(1367) =< aux(151)
s(1385) =< aux(151)
aux(120) =< aux(152)
it(191) =< aux(152)
it(192) =< aux(152)
it(194) =< aux(152)
aux(120) =< aux(153)
it(191) =< aux(153)
it(192) =< aux(153)
it(194) =< aux(153)
aux(130) =< aux(154)
it(192) =< aux(154)
aux(130) =< aux(155)
it(192) =< aux(155)
aux(122) =< s(1288)*2+2
aux(125) =< s(1288)+2
aux(124) =< s(1288)+1
aux(123) =< s(1288)
aux(121) =< s(1288)*2+1
s(1387) =< it(192)*aux(131)
s(1364) =< it(191)*aux(129)
aux(122) =< aux(121)+1
aux(136) =< it(192)*aux(123)
aux(137) =< it(192)*aux(124)
s(1384) =< it(192)*aux(125)
aux(126) =< it(191)*aux(123)
aux(127) =< it(191)*aux(124)
s(1362) =< it(191)*aux(125)
s(1365) =< it(191)*aux(121)
s(1368) =< aux(136)* (1/3)
s(1382) =< aux(137)* (1/2)
s(1381) =< aux(136)* (1/2)
s(1386) =< it(192)*aux(122)
s(1348) =< aux(126)* (1/3)
s(1361) =< aux(127)* (1/2)
s(1360) =< aux(126)* (1/2)
s(1366) =< it(191)*aux(122)
s(1369) =< aux(137)
s(1380) =< s(1388)
s(1370) =< s(1388)
s(1368) =< s(1388)
s(1371) =< s(1388)
s(1369) =< s(1388)
s(1368) =< s(1387)
s(1371) =< s(1387)
s(1369) =< s(1387)
s(1372) =< s(1387)
s(1373) =< s(1387)
s(1368) =< s(1386)
s(1371) =< s(1386)
s(1369) =< s(1386)
s(1372) =< s(1386)
s(1373) =< s(1386)
s(1380) =< s(1385)
s(1370) =< s(1385)
s(1368) =< s(1385)
s(1371) =< s(1385)
s(1369) =< s(1385)
s(1369) =< aux(136)
s(1374) =< aux(136)
s(1373) =< aux(136)
s(1375) =< aux(136)
s(1380) =< aux(137)
s(1370) =< aux(137)
s(1368) =< aux(137)
s(1371) =< aux(137)
s(1368) =< s(1384)
s(1369) =< s(1384)
s(1372) =< s(1384)
s(1372) =< aux(137)
s(1380) =< aux(136)
s(1370) =< aux(136)
s(1368) =< aux(136)
s(1371) =< aux(136)
s(1370) =< s(1382)
s(1368) =< s(1382)
s(1369) =< s(1382)
s(1370) =< s(1381)
s(1368) =< s(1381)
s(1369) =< s(1381)
s(1344) =< aux(123)+2
s(1377) =< s(1370)*aux(123)
s(1374) =< s(1368)*aux(124)
s(1369) =< s(1380)+aux(130)
s(1378) =< s(1371)*s(1344)
s(1369) =< s(1378)+s(1377)+aux(136)
s(1374) =< s(1378)+s(1377)+aux(136)
s(1347) =< aux(127)
s(1359) =< s(1367)
s(1349) =< s(1367)
s(1348) =< s(1367)
s(1350) =< s(1367)
s(1347) =< s(1367)
s(1348) =< s(1366)
s(1350) =< s(1366)
s(1347) =< s(1366)
s(1351) =< s(1366)
s(1352) =< s(1366)
s(1348) =< s(1365)
s(1350) =< s(1365)
s(1347) =< s(1365)
s(1351) =< s(1365)
s(1352) =< s(1365)
s(1359) =< s(1364)
s(1349) =< s(1364)
s(1348) =< s(1364)
s(1350) =< s(1364)
s(1347) =< s(1364)
s(1347) =< aux(126)
s(1353) =< aux(126)
s(1352) =< aux(126)
s(1354) =< aux(126)
s(1359) =< aux(127)
s(1349) =< aux(127)
s(1348) =< aux(127)
s(1350) =< aux(127)
s(1348) =< s(1362)
s(1347) =< s(1362)
s(1351) =< s(1362)
s(1348) =< aux(126)
s(1351) =< aux(126)
s(1359) =< aux(126)
s(1349) =< aux(126)
s(1350) =< aux(126)
s(1349) =< s(1361)
s(1348) =< s(1361)
s(1347) =< s(1361)
s(1349) =< s(1360)
s(1348) =< s(1360)
s(1347) =< s(1360)
s(1356) =< s(1349)*s(1288)
s(1353) =< s(1348)*aux(124)
s(1347) =< s(1359)+aux(120)
s(1357) =< s(1350)*aux(125)
s(1347) =< s(1357)+s(1356)+aux(126)
s(1353) =< s(1357)+s(1356)+aux(126)

#### Simplifying cost structure of chain [[191,192,193,194],195] 
 * Joined equivalent variables [aux(156),aux(139),aux(140)] into aux(156)
 * Joined equivalent variables [aux(157),aux(141),aux(142)] into aux(157)
 * Joined equivalent variables [aux(158),aux(143),aux(144)] into aux(158)
 * Joined equivalent variables [aux(159),aux(145),aux(147),aux(148)] into aux(159)
 * Joined equivalent variables [aux(160),aux(149),aux(151)] into aux(160)

#### Cost of chains of mat_mult_jan(A,B,C,D,E,F,G,H,I):
* Chain [[191,192,193,194],195]: 9*it(191)+13*it(192)+9*it(193)+13*it(194)+11*s(1347)+11*s(1348)+11*s(1349)+11*s(1350)+10*s(1351)+10*s(1352)+9*s(1353)+9*s(1354)+11*s(1368)+11*s(1369)+11*s(1370)+11*s(1371)+10*s(1372)+10*s(1373)+9*s(1374)+9*s(1375)+3
  Such that:aux(131) =< -A+B+E+3
aux(146) =< -3/2*A+3/2*B-D/2+5/2
aux(150) =< B+1
aux(153) =< B/2
aux(152) =< B/2+1/2
aux(155) =< B/3
aux(154) =< B/3+1/3
aux(129) =< D
aux(121) =< D+E
s(1288) =< E
aux(156) =< -2*A+2*B+2
aux(157) =< -A+B+1
aux(158) =< A
aux(159) =< -3/2*A+3/2*B+3/2
aux(160) =< B
it(192) =< aux(156)
it(194) =< aux(156)
s(1367) =< aux(156)
it(194) =< aux(157)
s(1385) =< aux(157)
aux(120) =< aux(158)
aux(130) =< aux(158)
it(191) =< aux(158)
it(192) =< aux(158)
it(193) =< aux(158)
it(194) =< aux(158)
it(194) =< aux(159)
s(1388) =< aux(159)
it(194) =< aux(146)
s(1388) =< aux(146)
it(192) =< aux(160)
it(193) =< aux(160)
it(194) =< aux(160)
s(1367) =< aux(160)
s(1385) =< aux(160)
aux(120) =< aux(150)
aux(130) =< aux(150)
it(191) =< aux(150)
it(192) =< aux(150)
it(193) =< aux(150)
it(194) =< aux(150)
aux(120) =< aux(160)
aux(130) =< aux(160)
it(191) =< aux(160)
aux(120) =< aux(152)
it(191) =< aux(152)
it(192) =< aux(152)
it(194) =< aux(152)
aux(120) =< aux(153)
it(191) =< aux(153)
it(192) =< aux(153)
it(194) =< aux(153)
aux(130) =< aux(154)
it(192) =< aux(154)
aux(130) =< aux(155)
it(192) =< aux(155)
aux(122) =< s(1288)*2+2
aux(125) =< s(1288)+2
aux(124) =< s(1288)+1
aux(123) =< s(1288)
aux(121) =< s(1288)*2+1
s(1387) =< it(192)*aux(131)
s(1364) =< it(191)*aux(129)
aux(122) =< aux(121)+1
aux(136) =< it(192)*aux(123)
aux(137) =< it(192)*aux(124)
s(1384) =< it(192)*aux(125)
aux(126) =< it(191)*aux(123)
aux(127) =< it(191)*aux(124)
s(1362) =< it(191)*aux(125)
s(1365) =< it(191)*aux(121)
s(1368) =< aux(136)* (1/3)
s(1382) =< aux(137)* (1/2)
s(1381) =< aux(136)* (1/2)
s(1386) =< it(192)*aux(122)
s(1348) =< aux(126)* (1/3)
s(1361) =< aux(127)* (1/2)
s(1360) =< aux(126)* (1/2)
s(1366) =< it(191)*aux(122)
s(1369) =< aux(137)
s(1380) =< s(1388)
s(1370) =< s(1388)
s(1368) =< s(1388)
s(1371) =< s(1388)
s(1369) =< s(1388)
s(1368) =< s(1387)
s(1371) =< s(1387)
s(1369) =< s(1387)
s(1372) =< s(1387)
s(1373) =< s(1387)
s(1368) =< s(1386)
s(1371) =< s(1386)
s(1369) =< s(1386)
s(1372) =< s(1386)
s(1373) =< s(1386)
s(1380) =< s(1385)
s(1370) =< s(1385)
s(1368) =< s(1385)
s(1371) =< s(1385)
s(1369) =< s(1385)
s(1369) =< aux(136)
s(1374) =< aux(136)
s(1373) =< aux(136)
s(1375) =< aux(136)
s(1380) =< aux(137)
s(1370) =< aux(137)
s(1368) =< aux(137)
s(1371) =< aux(137)
s(1368) =< s(1384)
s(1369) =< s(1384)
s(1372) =< s(1384)
s(1372) =< aux(137)
s(1380) =< aux(136)
s(1370) =< aux(136)
s(1368) =< aux(136)
s(1371) =< aux(136)
s(1370) =< s(1382)
s(1368) =< s(1382)
s(1369) =< s(1382)
s(1370) =< s(1381)
s(1368) =< s(1381)
s(1369) =< s(1381)
s(1344) =< aux(123)+2
s(1377) =< s(1370)*aux(123)
s(1374) =< s(1368)*aux(124)
s(1369) =< s(1380)+aux(130)
s(1378) =< s(1371)*s(1344)
s(1369) =< s(1378)+s(1377)+aux(136)
s(1374) =< s(1378)+s(1377)+aux(136)
s(1347) =< aux(127)
s(1359) =< s(1367)
s(1349) =< s(1367)
s(1348) =< s(1367)
s(1350) =< s(1367)
s(1347) =< s(1367)
s(1348) =< s(1366)
s(1350) =< s(1366)
s(1347) =< s(1366)
s(1351) =< s(1366)
s(1352) =< s(1366)
s(1348) =< s(1365)
s(1350) =< s(1365)
s(1347) =< s(1365)
s(1351) =< s(1365)
s(1352) =< s(1365)
s(1359) =< s(1364)
s(1349) =< s(1364)
s(1348) =< s(1364)
s(1350) =< s(1364)
s(1347) =< s(1364)
s(1347) =< aux(126)
s(1353) =< aux(126)
s(1352) =< aux(126)
s(1354) =< aux(126)
s(1359) =< aux(127)
s(1349) =< aux(127)
s(1348) =< aux(127)
s(1350) =< aux(127)
s(1348) =< s(1362)
s(1347) =< s(1362)
s(1351) =< s(1362)
s(1348) =< aux(126)
s(1351) =< aux(126)
s(1359) =< aux(126)
s(1349) =< aux(126)
s(1350) =< aux(126)
s(1349) =< s(1361)
s(1348) =< s(1361)
s(1347) =< s(1361)
s(1349) =< s(1360)
s(1348) =< s(1360)
s(1347) =< s(1360)
s(1356) =< s(1349)*s(1288)
s(1353) =< s(1348)*aux(124)
s(1347) =< s(1359)+aux(120)
s(1357) =< s(1350)*aux(125)
s(1347) =< s(1357)+s(1356)+aux(126)
s(1353) =< s(1357)+s(1356)+aux(126)

  with precondition: [A=G,A>=2,C>=0,D>=0,E>=0,F>=0,I>=0,B+1>=A,H+1>=A] 

* Chain [195]: 3
  with precondition: [A=1,B=0,G=1,H=0,C>=0,D>=0,E>=0,F>=0,I>=0] 


#### Simplifying cost structure of CE 295 
 * Renamed intermediate variables: 
[ (eq(296,1),aux(131))>>s(1389), (eq(296,1),aux(146))>>s(1390), (eq(296,1),aux(150))>>s(1391), (eq(296,1),aux(153))>>s(1392), (eq(296,1),aux(152))>>s(1393), (eq(296,1),aux(155))>>s(1394), (eq(296,1),aux(154))>>s(1395), (eq(296,1),aux(129))>>s(1396), (eq(296,1),aux(121))>>s(1397), (eq(296,1),s(1288))>>s(1398), (eq(296,1),aux(156))>>s(1399), (eq(296,1),aux(157))>>s(1400), (eq(296,1),aux(158))>>s(1401), (eq(296,1),aux(159))>>s(1402), (eq(296,1),aux(160))>>s(1403), (eq(296,1),it(192))>>s(1404), (eq(296,1),it(194))>>s(1405), (eq(296,1),s(1367))>>s(1406), (eq(296,1),s(1385))>>s(1407), (eq(296,1),aux(120))>>s(1408), (eq(296,1),aux(130))>>s(1409), (eq(296,1),it(191))>>s(1410), (eq(296,1),it(193))>>s(1411), (eq(296,1),s(1388))>>s(1412), (eq(296,1),aux(122))>>s(1413), (eq(296,1),aux(125))>>s(1414), (eq(296,1),aux(124))>>s(1415), (eq(296,1),aux(123))>>s(1416), (eq(296,1),s(1387))>>s(1417), (eq(296,1),s(1364))>>s(1418), (eq(296,1),aux(136))>>s(1419), (eq(296,1),aux(137))>>s(1420), (eq(296,1),s(1384))>>s(1421), (eq(296,1),aux(126))>>s(1422), (eq(296,1),aux(127))>>s(1423), (eq(296,1),s(1362))>>s(1424), (eq(296,1),s(1365))>>s(1425), (eq(296,1),s(1368))>>s(1426), (eq(296,1),s(1382))>>s(1427), (eq(296,1),s(1381))>>s(1428), (eq(296,1),s(1386))>>s(1429), (eq(296,1),s(1348))>>s(1430), (eq(296,1),s(1361))>>s(1431), (eq(296,1),s(1360))>>s(1432), (eq(296,1),s(1366))>>s(1433), (eq(296,1),s(1369))>>s(1434), (eq(296,1),s(1380))>>s(1435), (eq(296,1),s(1370))>>s(1436), (eq(296,1),s(1371))>>s(1437), (eq(296,1),s(1372))>>s(1438), (eq(296,1),s(1373))>>s(1439), (eq(296,1),s(1374))>>s(1440), (eq(296,1),s(1375))>>s(1441), (eq(296,1),s(1344))>>s(1442), (eq(296,1),s(1377))>>s(1443), (eq(296,1),s(1378))>>s(1444), (eq(296,1),s(1347))>>s(1445), (eq(296,1),s(1359))>>s(1446), (eq(296,1),s(1349))>>s(1447), (eq(296,1),s(1350))>>s(1448), (eq(296,1),s(1351))>>s(1449), (eq(296,1),s(1352))>>s(1450), (eq(296,1),s(1353))>>s(1451), (eq(296,1),s(1354))>>s(1452), (eq(296,1),s(1356))>>s(1453), (eq(296,1),s(1357))>>s(1454)]
 * Renamed intermediate variables: 
[ (eq(296,2),s(1205))>>s(1455), (eq(296,2),s(1206))>>s(1456)]

#### Simplifying cost structure of CE 296 
 * Joined equivalent variables [aux(161),s(1401),s(1455)] into aux(161)
 * Renamed intermediate variables: 
[ (eq(297,1),aux(131))>>s(1457), (eq(297,1),aux(146))>>s(1458), (eq(297,1),aux(150))>>s(1459), (eq(297,1),aux(153))>>s(1460), (eq(297,1),aux(152))>>s(1461), (eq(297,1),aux(155))>>s(1462), (eq(297,1),aux(154))>>s(1463), (eq(297,1),aux(129))>>s(1464), (eq(297,1),aux(121))>>s(1465), (eq(297,1),s(1288))>>s(1466), (eq(297,1),aux(156))>>s(1467), (eq(297,1),aux(157))>>s(1468), (eq(297,1),aux(158))>>s(1469), (eq(297,1),aux(159))>>s(1470), (eq(297,1),aux(160))>>s(1471), (eq(297,1),it(192))>>s(1472), (eq(297,1),it(194))>>s(1473), (eq(297,1),s(1367))>>s(1474), (eq(297,1),s(1385))>>s(1475), (eq(297,1),aux(120))>>s(1476), (eq(297,1),aux(130))>>s(1477), (eq(297,1),it(191))>>s(1478), (eq(297,1),it(193))>>s(1479), (eq(297,1),s(1388))>>s(1480), (eq(297,1),aux(122))>>s(1481), (eq(297,1),aux(125))>>s(1482), (eq(297,1),aux(124))>>s(1483), (eq(297,1),aux(123))>>s(1484), (eq(297,1),s(1387))>>s(1485), (eq(297,1),s(1364))>>s(1486), (eq(297,1),aux(136))>>s(1487), (eq(297,1),aux(137))>>s(1488), (eq(297,1),s(1384))>>s(1489), (eq(297,1),aux(126))>>s(1490), (eq(297,1),aux(127))>>s(1491), (eq(297,1),s(1362))>>s(1492), (eq(297,1),s(1365))>>s(1493), (eq(297,1),s(1368))>>s(1494), (eq(297,1),s(1382))>>s(1495), (eq(297,1),s(1381))>>s(1496), (eq(297,1),s(1386))>>s(1497), (eq(297,1),s(1348))>>s(1498), (eq(297,1),s(1361))>>s(1499), (eq(297,1),s(1360))>>s(1500), (eq(297,1),s(1366))>>s(1501), (eq(297,1),s(1369))>>s(1502), (eq(297,1),s(1380))>>s(1503), (eq(297,1),s(1370))>>s(1504), (eq(297,1),s(1371))>>s(1505), (eq(297,1),s(1372))>>s(1506), (eq(297,1),s(1373))>>s(1507), (eq(297,1),s(1374))>>s(1508), (eq(297,1),s(1375))>>s(1509), (eq(297,1),s(1344))>>s(1510), (eq(297,1),s(1377))>>s(1511), (eq(297,1),s(1378))>>s(1512), (eq(297,1),s(1347))>>s(1513), (eq(297,1),s(1359))>>s(1514), (eq(297,1),s(1349))>>s(1515), (eq(297,1),s(1350))>>s(1516), (eq(297,1),s(1351))>>s(1517), (eq(297,1),s(1352))>>s(1518), (eq(297,1),s(1353))>>s(1519), (eq(297,1),s(1354))>>s(1520), (eq(297,1),s(1356))>>s(1521), (eq(297,1),s(1357))>>s(1522)]
 * Renamed intermediate variables: 
[ (eq(297,2),s(1207))>>s(1523), (eq(297,2),s(1208))>>s(1524), (eq(297,2),s(1209))>>s(1525), (eq(297,2),s(1210))>>s(1526), (eq(297,2),s(1211))>>s(1527), (eq(297,2),s(1212))>>s(1528), (eq(297,2),s(1213))>>s(1529), (eq(297,2),s(1214))>>s(1530), (eq(297,2),s(1215))>>s(1531)]

#### Simplifying cost structure of CE 297 
 * Joined equivalent variables [aux(162),s(1469),s(1524)] into aux(162)
 * Joined equivalent variables [s(1525),s(1530)] into s(1525)
 * Renamed intermediate variables: 
[ (eq(298,1),aux(131))>>s(1532), (eq(298,1),aux(146))>>s(1533), (eq(298,1),aux(150))>>s(1534), (eq(298,1),aux(153))>>s(1535), (eq(298,1),aux(152))>>s(1536), (eq(298,1),aux(155))>>s(1537), (eq(298,1),aux(154))>>s(1538), (eq(298,1),aux(129))>>s(1539), (eq(298,1),aux(121))>>s(1540), (eq(298,1),s(1288))>>s(1541), (eq(298,1),aux(156))>>s(1542), (eq(298,1),aux(157))>>s(1543), (eq(298,1),aux(158))>>s(1544), (eq(298,1),aux(159))>>s(1545), (eq(298,1),aux(160))>>s(1546), (eq(298,1),it(192))>>s(1547), (eq(298,1),it(194))>>s(1548), (eq(298,1),s(1367))>>s(1549), (eq(298,1),s(1385))>>s(1550), (eq(298,1),aux(120))>>s(1551), (eq(298,1),aux(130))>>s(1552), (eq(298,1),it(191))>>s(1553), (eq(298,1),it(193))>>s(1554), (eq(298,1),s(1388))>>s(1555), (eq(298,1),aux(122))>>s(1556), (eq(298,1),aux(125))>>s(1557), (eq(298,1),aux(124))>>s(1558), (eq(298,1),aux(123))>>s(1559), (eq(298,1),s(1387))>>s(1560), (eq(298,1),s(1364))>>s(1561), (eq(298,1),aux(136))>>s(1562), (eq(298,1),aux(137))>>s(1563), (eq(298,1),s(1384))>>s(1564), (eq(298,1),aux(126))>>s(1565), (eq(298,1),aux(127))>>s(1566), (eq(298,1),s(1362))>>s(1567), (eq(298,1),s(1365))>>s(1568), (eq(298,1),s(1368))>>s(1569), (eq(298,1),s(1382))>>s(1570), (eq(298,1),s(1381))>>s(1571), (eq(298,1),s(1386))>>s(1572), (eq(298,1),s(1348))>>s(1573), (eq(298,1),s(1361))>>s(1574), (eq(298,1),s(1360))>>s(1575), (eq(298,1),s(1366))>>s(1576), (eq(298,1),s(1369))>>s(1577), (eq(298,1),s(1380))>>s(1578), (eq(298,1),s(1370))>>s(1579), (eq(298,1),s(1371))>>s(1580), (eq(298,1),s(1372))>>s(1581), (eq(298,1),s(1373))>>s(1582), (eq(298,1),s(1374))>>s(1583), (eq(298,1),s(1375))>>s(1584), (eq(298,1),s(1344))>>s(1585), (eq(298,1),s(1377))>>s(1586), (eq(298,1),s(1378))>>s(1587), (eq(298,1),s(1347))>>s(1588), (eq(298,1),s(1359))>>s(1589), (eq(298,1),s(1349))>>s(1590), (eq(298,1),s(1350))>>s(1591), (eq(298,1),s(1351))>>s(1592), (eq(298,1),s(1352))>>s(1593), (eq(298,1),s(1353))>>s(1594), (eq(298,1),s(1354))>>s(1595), (eq(298,1),s(1356))>>s(1596), (eq(298,1),s(1357))>>s(1597)]
 * Renamed intermediate variables: 
[ (eq(298,2),s(1216))>>s(1598)]

#### Simplifying cost structure of CE 298 
 * Joined equivalent variables [aux(163),s(1544)] into aux(163)
 * Renamed intermediate variables: 
[ (eq(299,1),aux(131))>>s(1599), (eq(299,1),aux(146))>>s(1600), (eq(299,1),aux(150))>>s(1601), (eq(299,1),aux(153))>>s(1602), (eq(299,1),aux(152))>>s(1603), (eq(299,1),aux(155))>>s(1604), (eq(299,1),aux(154))>>s(1605), (eq(299,1),aux(129))>>s(1606), (eq(299,1),aux(121))>>s(1607), (eq(299,1),s(1288))>>s(1608), (eq(299,1),aux(156))>>s(1609), (eq(299,1),aux(157))>>s(1610), (eq(299,1),aux(158))>>s(1611), (eq(299,1),aux(159))>>s(1612), (eq(299,1),aux(160))>>s(1613), (eq(299,1),it(192))>>s(1614), (eq(299,1),it(194))>>s(1615), (eq(299,1),s(1367))>>s(1616), (eq(299,1),s(1385))>>s(1617), (eq(299,1),aux(120))>>s(1618), (eq(299,1),aux(130))>>s(1619), (eq(299,1),it(191))>>s(1620), (eq(299,1),it(193))>>s(1621), (eq(299,1),s(1388))>>s(1622), (eq(299,1),aux(122))>>s(1623), (eq(299,1),aux(125))>>s(1624), (eq(299,1),aux(124))>>s(1625), (eq(299,1),aux(123))>>s(1626), (eq(299,1),s(1387))>>s(1627), (eq(299,1),s(1364))>>s(1628), (eq(299,1),aux(136))>>s(1629), (eq(299,1),aux(137))>>s(1630), (eq(299,1),s(1384))>>s(1631), (eq(299,1),aux(126))>>s(1632), (eq(299,1),aux(127))>>s(1633), (eq(299,1),s(1362))>>s(1634), (eq(299,1),s(1365))>>s(1635), (eq(299,1),s(1368))>>s(1636), (eq(299,1),s(1382))>>s(1637), (eq(299,1),s(1381))>>s(1638), (eq(299,1),s(1386))>>s(1639), (eq(299,1),s(1348))>>s(1640), (eq(299,1),s(1361))>>s(1641), (eq(299,1),s(1360))>>s(1642), (eq(299,1),s(1366))>>s(1643), (eq(299,1),s(1369))>>s(1644), (eq(299,1),s(1380))>>s(1645), (eq(299,1),s(1370))>>s(1646), (eq(299,1),s(1371))>>s(1647), (eq(299,1),s(1372))>>s(1648), (eq(299,1),s(1373))>>s(1649), (eq(299,1),s(1374))>>s(1650), (eq(299,1),s(1375))>>s(1651), (eq(299,1),s(1344))>>s(1652), (eq(299,1),s(1377))>>s(1653), (eq(299,1),s(1378))>>s(1654), (eq(299,1),s(1347))>>s(1655), (eq(299,1),s(1359))>>s(1656), (eq(299,1),s(1349))>>s(1657), (eq(299,1),s(1350))>>s(1658), (eq(299,1),s(1351))>>s(1659), (eq(299,1),s(1352))>>s(1660), (eq(299,1),s(1353))>>s(1661), (eq(299,1),s(1354))>>s(1662), (eq(299,1),s(1356))>>s(1663), (eq(299,1),s(1357))>>s(1664)]
 * Renamed intermediate variables: 
[ (eq(299,2),s(1219))>>s(1665), (eq(299,2),s(1217))>>s(1666), (eq(299,2),s(1218))>>s(1667), (eq(299,2),s(1220))>>s(1668)]

#### Simplifying cost structure of CE 299 
 * Joined equivalent variables [aux(164),s(1611),s(1665)] into aux(164)
 * Joined equivalent variables [s(1666),s(1668)] into s(1666)

#### Cost of chains of case_46(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q):
* Chain [200]: 22
  with precondition: [A=1,B=0,D=1,H=1,I=0,K=1,L=0,N=1,O=0,Q=1,C=J+M,E>=1,F>=0,G>=0,J>=0,C>=J,P>=J] 

* Chain [199]: 13*s(1404)+13*s(1405)+9*s(1410)+9*s(1411)+11*s(1426)+11*s(1430)+11*s(1434)+11*s(1436)+11*s(1437)+10*s(1438)+10*s(1439)+9*s(1440)+9*s(1441)+11*s(1445)+11*s(1447)+11*s(1448)+10*s(1449)+10*s(1450)+9*s(1451)+9*s(1452)+16*s(1456)+22
  Such that:s(1390) =< 3/2*B-3/2*C-E/2+3/2*M+1
s(1396) =< E
s(1397) =< E+F
s(1390) =< -E/2-3/2*I+3/2*L+1
s(1398) =< F
s(1389) =< F-K+L+3
s(1399) =< -2*K+2*L+2
s(1400) =< -K+L+1
s(1402) =< -3/2*K+3/2*L+3/2
s(1403) =< L
s(1391) =< L+1
s(1392) =< L/2
s(1393) =< L/2+1/2
s(1394) =< L/3
s(1395) =< L/3+1/3
aux(161) =< K
s(1456) =< aux(161)
s(1404) =< s(1399)
s(1405) =< s(1399)
s(1406) =< s(1399)
s(1405) =< s(1400)
s(1407) =< s(1400)
s(1408) =< aux(161)
s(1409) =< aux(161)
s(1410) =< aux(161)
s(1404) =< aux(161)
s(1411) =< aux(161)
s(1405) =< aux(161)
s(1405) =< s(1402)
s(1412) =< s(1402)
s(1405) =< s(1390)
s(1412) =< s(1390)
s(1404) =< s(1403)
s(1411) =< s(1403)
s(1405) =< s(1403)
s(1406) =< s(1403)
s(1407) =< s(1403)
s(1408) =< s(1391)
s(1409) =< s(1391)
s(1410) =< s(1391)
s(1404) =< s(1391)
s(1411) =< s(1391)
s(1405) =< s(1391)
s(1408) =< s(1403)
s(1409) =< s(1403)
s(1410) =< s(1403)
s(1408) =< s(1393)
s(1410) =< s(1393)
s(1404) =< s(1393)
s(1405) =< s(1393)
s(1408) =< s(1392)
s(1410) =< s(1392)
s(1404) =< s(1392)
s(1405) =< s(1392)
s(1409) =< s(1395)
s(1404) =< s(1395)
s(1409) =< s(1394)
s(1404) =< s(1394)
s(1413) =< s(1398)*2+2
s(1414) =< s(1398)+2
s(1415) =< s(1398)+1
s(1416) =< s(1398)
s(1397) =< s(1398)*2+1
s(1417) =< s(1404)*s(1389)
s(1418) =< s(1410)*s(1396)
s(1413) =< s(1397)+1
s(1419) =< s(1404)*s(1416)
s(1420) =< s(1404)*s(1415)
s(1421) =< s(1404)*s(1414)
s(1422) =< s(1410)*s(1416)
s(1423) =< s(1410)*s(1415)
s(1424) =< s(1410)*s(1414)
s(1425) =< s(1410)*s(1397)
s(1426) =< s(1419)* (1/3)
s(1427) =< s(1420)* (1/2)
s(1428) =< s(1419)* (1/2)
s(1429) =< s(1404)*s(1413)
s(1430) =< s(1422)* (1/3)
s(1431) =< s(1423)* (1/2)
s(1432) =< s(1422)* (1/2)
s(1433) =< s(1410)*s(1413)
s(1434) =< s(1420)
s(1435) =< s(1412)
s(1436) =< s(1412)
s(1426) =< s(1412)
s(1437) =< s(1412)
s(1434) =< s(1412)
s(1426) =< s(1417)
s(1437) =< s(1417)
s(1434) =< s(1417)
s(1438) =< s(1417)
s(1439) =< s(1417)
s(1426) =< s(1429)
s(1437) =< s(1429)
s(1434) =< s(1429)
s(1438) =< s(1429)
s(1439) =< s(1429)
s(1435) =< s(1407)
s(1436) =< s(1407)
s(1426) =< s(1407)
s(1437) =< s(1407)
s(1434) =< s(1407)
s(1434) =< s(1419)
s(1440) =< s(1419)
s(1439) =< s(1419)
s(1441) =< s(1419)
s(1435) =< s(1420)
s(1436) =< s(1420)
s(1426) =< s(1420)
s(1437) =< s(1420)
s(1426) =< s(1421)
s(1434) =< s(1421)
s(1438) =< s(1421)
s(1438) =< s(1420)
s(1435) =< s(1419)
s(1436) =< s(1419)
s(1426) =< s(1419)
s(1437) =< s(1419)
s(1436) =< s(1427)
s(1426) =< s(1427)
s(1434) =< s(1427)
s(1436) =< s(1428)
s(1426) =< s(1428)
s(1434) =< s(1428)
s(1442) =< s(1416)+2
s(1443) =< s(1436)*s(1416)
s(1440) =< s(1426)*s(1415)
s(1434) =< s(1435)+s(1409)
s(1444) =< s(1437)*s(1442)
s(1434) =< s(1444)+s(1443)+s(1419)
s(1440) =< s(1444)+s(1443)+s(1419)
s(1445) =< s(1423)
s(1446) =< s(1406)
s(1447) =< s(1406)
s(1430) =< s(1406)
s(1448) =< s(1406)
s(1445) =< s(1406)
s(1430) =< s(1433)
s(1448) =< s(1433)
s(1445) =< s(1433)
s(1449) =< s(1433)
s(1450) =< s(1433)
s(1430) =< s(1425)
s(1448) =< s(1425)
s(1445) =< s(1425)
s(1449) =< s(1425)
s(1450) =< s(1425)
s(1446) =< s(1418)
s(1447) =< s(1418)
s(1430) =< s(1418)
s(1448) =< s(1418)
s(1445) =< s(1418)
s(1445) =< s(1422)
s(1451) =< s(1422)
s(1450) =< s(1422)
s(1452) =< s(1422)
s(1446) =< s(1423)
s(1447) =< s(1423)
s(1430) =< s(1423)
s(1448) =< s(1423)
s(1430) =< s(1424)
s(1445) =< s(1424)
s(1449) =< s(1424)
s(1430) =< s(1422)
s(1449) =< s(1422)
s(1446) =< s(1422)
s(1447) =< s(1422)
s(1448) =< s(1422)
s(1447) =< s(1431)
s(1430) =< s(1431)
s(1445) =< s(1431)
s(1447) =< s(1432)
s(1430) =< s(1432)
s(1445) =< s(1432)
s(1453) =< s(1447)*s(1398)
s(1451) =< s(1430)*s(1415)
s(1445) =< s(1446)+s(1408)
s(1454) =< s(1448)*s(1414)
s(1445) =< s(1454)+s(1453)+s(1422)
s(1451) =< s(1454)+s(1453)+s(1422)

  with precondition: [D=1,H=1,J=0,Q=1,L=B,A=I+1,A=K,A=N,A=O+1,A+M=C+1,A>=2,E>=1,F>=0,G>=0,C+1>=A,L+1>=A,P+1>=A] 

* Chain [198]: 13*s(1472)+13*s(1473)+9*s(1478)+9*s(1479)+11*s(1494)+11*s(1498)+11*s(1502)+11*s(1504)+11*s(1505)+10*s(1506)+10*s(1507)+9*s(1508)+9*s(1509)+11*s(1513)+11*s(1515)+11*s(1516)+10*s(1517)+10*s(1518)+9*s(1519)+9*s(1520)+6*s(1523)+18*s(1525)+10*s(1528)+10*s(1529)+6*s(1531)+33
  Such that:s(1458) =< -3/2*A-E/2+3/2*L+5/2
s(1464) =< E
s(1465) =< E+F
s(1458) =< -E/2-3/2*I+3/2*L+1
s(1466) =< F
s(1457) =< F-K+L+3
s(1467) =< -2*K+2*L+2
s(1468) =< -K+L+1
s(1470) =< -3/2*K+3/2*L+3/2
s(1471) =< L
s(1459) =< L+1
s(1460) =< L/2
s(1461) =< L/2+1/2
s(1462) =< L/3
s(1463) =< L/3+1/3
aux(162) =< K
s(1523) =< aux(162)
s(1528) =< aux(162)
s(1529) =< aux(162)
s(1472) =< s(1467)
s(1473) =< s(1467)
s(1474) =< s(1467)
s(1473) =< s(1468)
s(1475) =< s(1468)
s(1476) =< aux(162)
s(1477) =< aux(162)
s(1478) =< aux(162)
s(1472) =< aux(162)
s(1479) =< aux(162)
s(1473) =< aux(162)
s(1473) =< s(1470)
s(1480) =< s(1470)
s(1473) =< s(1458)
s(1480) =< s(1458)
s(1472) =< s(1471)
s(1479) =< s(1471)
s(1473) =< s(1471)
s(1474) =< s(1471)
s(1475) =< s(1471)
s(1476) =< s(1459)
s(1477) =< s(1459)
s(1478) =< s(1459)
s(1472) =< s(1459)
s(1479) =< s(1459)
s(1473) =< s(1459)
s(1476) =< s(1471)
s(1477) =< s(1471)
s(1478) =< s(1471)
s(1476) =< s(1461)
s(1478) =< s(1461)
s(1472) =< s(1461)
s(1473) =< s(1461)
s(1476) =< s(1460)
s(1478) =< s(1460)
s(1472) =< s(1460)
s(1473) =< s(1460)
s(1477) =< s(1463)
s(1472) =< s(1463)
s(1477) =< s(1462)
s(1472) =< s(1462)
s(1481) =< s(1466)*2+2
s(1482) =< s(1466)+2
s(1483) =< s(1466)+1
s(1484) =< s(1466)
s(1465) =< s(1466)*2+1
s(1485) =< s(1472)*s(1457)
s(1486) =< s(1478)*s(1464)
s(1481) =< s(1465)+1
s(1487) =< s(1472)*s(1484)
s(1488) =< s(1472)*s(1483)
s(1489) =< s(1472)*s(1482)
s(1490) =< s(1478)*s(1484)
s(1491) =< s(1478)*s(1483)
s(1492) =< s(1478)*s(1482)
s(1493) =< s(1478)*s(1465)
s(1494) =< s(1487)* (1/3)
s(1495) =< s(1488)* (1/2)
s(1496) =< s(1487)* (1/2)
s(1497) =< s(1472)*s(1481)
s(1498) =< s(1490)* (1/3)
s(1499) =< s(1491)* (1/2)
s(1500) =< s(1490)* (1/2)
s(1501) =< s(1478)*s(1481)
s(1502) =< s(1488)
s(1503) =< s(1480)
s(1504) =< s(1480)
s(1494) =< s(1480)
s(1505) =< s(1480)
s(1502) =< s(1480)
s(1494) =< s(1485)
s(1505) =< s(1485)
s(1502) =< s(1485)
s(1506) =< s(1485)
s(1507) =< s(1485)
s(1494) =< s(1497)
s(1505) =< s(1497)
s(1502) =< s(1497)
s(1506) =< s(1497)
s(1507) =< s(1497)
s(1503) =< s(1475)
s(1504) =< s(1475)
s(1494) =< s(1475)
s(1505) =< s(1475)
s(1502) =< s(1475)
s(1502) =< s(1487)
s(1508) =< s(1487)
s(1507) =< s(1487)
s(1509) =< s(1487)
s(1503) =< s(1488)
s(1504) =< s(1488)
s(1494) =< s(1488)
s(1505) =< s(1488)
s(1494) =< s(1489)
s(1502) =< s(1489)
s(1506) =< s(1489)
s(1506) =< s(1488)
s(1503) =< s(1487)
s(1504) =< s(1487)
s(1494) =< s(1487)
s(1505) =< s(1487)
s(1504) =< s(1495)
s(1494) =< s(1495)
s(1502) =< s(1495)
s(1504) =< s(1496)
s(1494) =< s(1496)
s(1502) =< s(1496)
s(1510) =< s(1484)+2
s(1511) =< s(1504)*s(1484)
s(1508) =< s(1494)*s(1483)
s(1502) =< s(1503)+s(1477)
s(1512) =< s(1505)*s(1510)
s(1502) =< s(1512)+s(1511)+s(1487)
s(1508) =< s(1512)+s(1511)+s(1487)
s(1513) =< s(1491)
s(1514) =< s(1474)
s(1515) =< s(1474)
s(1498) =< s(1474)
s(1516) =< s(1474)
s(1513) =< s(1474)
s(1498) =< s(1501)
s(1516) =< s(1501)
s(1513) =< s(1501)
s(1517) =< s(1501)
s(1518) =< s(1501)
s(1498) =< s(1493)
s(1516) =< s(1493)
s(1513) =< s(1493)
s(1517) =< s(1493)
s(1518) =< s(1493)
s(1514) =< s(1486)
s(1515) =< s(1486)
s(1498) =< s(1486)
s(1516) =< s(1486)
s(1513) =< s(1486)
s(1513) =< s(1490)
s(1519) =< s(1490)
s(1518) =< s(1490)
s(1520) =< s(1490)
s(1514) =< s(1491)
s(1515) =< s(1491)
s(1498) =< s(1491)
s(1516) =< s(1491)
s(1498) =< s(1492)
s(1513) =< s(1492)
s(1517) =< s(1492)
s(1498) =< s(1490)
s(1517) =< s(1490)
s(1514) =< s(1490)
s(1515) =< s(1490)
s(1516) =< s(1490)
s(1515) =< s(1499)
s(1498) =< s(1499)
s(1513) =< s(1499)
s(1515) =< s(1500)
s(1498) =< s(1500)
s(1513) =< s(1500)
s(1521) =< s(1515)*s(1466)
s(1519) =< s(1498)*s(1483)
s(1513) =< s(1514)+s(1476)
s(1522) =< s(1516)*s(1482)
s(1513) =< s(1522)+s(1521)+s(1490)
s(1519) =< s(1522)+s(1521)+s(1490)

Unbounded itvars
s(1525) :  eq(297,2),s(1209)
s(1531) :  eq(297,2),s(1215)

  with precondition: [D=1,H=1,N=1,O=0,Q=1,L=B,A=I+1,A=K,A+J+M=C+1,A>=2,E>=1,F>=0,G>=0,J>=0,P>=0,L+1>=A,C+1>=A+J] 

* Chain [197]: 13*s(1547)+13*s(1548)+9*s(1553)+9*s(1554)+11*s(1569)+11*s(1573)+11*s(1577)+11*s(1579)+11*s(1580)+10*s(1581)+10*s(1582)+9*s(1583)+9*s(1584)+11*s(1588)+11*s(1590)+11*s(1591)+10*s(1592)+10*s(1593)+9*s(1594)+9*s(1595)+6*s(1598)+23
  Such that:s(1533) =< -3/2*A-E/2+3/2*L+5/2
s(1533) =< 3/2*B-E/2-3/2*K+5/2
s(1539) =< E
s(1540) =< E+F
s(1541) =< F
s(1532) =< F-K+L+3
s(1542) =< -2*K+2*L+2
s(1543) =< -K+L+1
s(1545) =< -3/2*K+3/2*L+3/2
s(1546) =< L
s(1534) =< L+1
s(1535) =< L/2
s(1536) =< L/2+1/2
s(1537) =< L/3
s(1538) =< L/3+1/3
aux(163) =< K
s(1598) =< aux(163)
s(1547) =< s(1542)
s(1548) =< s(1542)
s(1549) =< s(1542)
s(1548) =< s(1543)
s(1550) =< s(1543)
s(1551) =< aux(163)
s(1552) =< aux(163)
s(1553) =< aux(163)
s(1547) =< aux(163)
s(1554) =< aux(163)
s(1548) =< aux(163)
s(1548) =< s(1545)
s(1555) =< s(1545)
s(1548) =< s(1533)
s(1555) =< s(1533)
s(1547) =< s(1546)
s(1554) =< s(1546)
s(1548) =< s(1546)
s(1549) =< s(1546)
s(1550) =< s(1546)
s(1551) =< s(1534)
s(1552) =< s(1534)
s(1553) =< s(1534)
s(1547) =< s(1534)
s(1554) =< s(1534)
s(1548) =< s(1534)
s(1551) =< s(1546)
s(1552) =< s(1546)
s(1553) =< s(1546)
s(1551) =< s(1536)
s(1553) =< s(1536)
s(1547) =< s(1536)
s(1548) =< s(1536)
s(1551) =< s(1535)
s(1553) =< s(1535)
s(1547) =< s(1535)
s(1548) =< s(1535)
s(1552) =< s(1538)
s(1547) =< s(1538)
s(1552) =< s(1537)
s(1547) =< s(1537)
s(1556) =< s(1541)*2+2
s(1557) =< s(1541)+2
s(1558) =< s(1541)+1
s(1559) =< s(1541)
s(1540) =< s(1541)*2+1
s(1560) =< s(1547)*s(1532)
s(1561) =< s(1553)*s(1539)
s(1556) =< s(1540)+1
s(1562) =< s(1547)*s(1559)
s(1563) =< s(1547)*s(1558)
s(1564) =< s(1547)*s(1557)
s(1565) =< s(1553)*s(1559)
s(1566) =< s(1553)*s(1558)
s(1567) =< s(1553)*s(1557)
s(1568) =< s(1553)*s(1540)
s(1569) =< s(1562)* (1/3)
s(1570) =< s(1563)* (1/2)
s(1571) =< s(1562)* (1/2)
s(1572) =< s(1547)*s(1556)
s(1573) =< s(1565)* (1/3)
s(1574) =< s(1566)* (1/2)
s(1575) =< s(1565)* (1/2)
s(1576) =< s(1553)*s(1556)
s(1577) =< s(1563)
s(1578) =< s(1555)
s(1579) =< s(1555)
s(1569) =< s(1555)
s(1580) =< s(1555)
s(1577) =< s(1555)
s(1569) =< s(1560)
s(1580) =< s(1560)
s(1577) =< s(1560)
s(1581) =< s(1560)
s(1582) =< s(1560)
s(1569) =< s(1572)
s(1580) =< s(1572)
s(1577) =< s(1572)
s(1581) =< s(1572)
s(1582) =< s(1572)
s(1578) =< s(1550)
s(1579) =< s(1550)
s(1569) =< s(1550)
s(1580) =< s(1550)
s(1577) =< s(1550)
s(1577) =< s(1562)
s(1583) =< s(1562)
s(1582) =< s(1562)
s(1584) =< s(1562)
s(1578) =< s(1563)
s(1579) =< s(1563)
s(1569) =< s(1563)
s(1580) =< s(1563)
s(1569) =< s(1564)
s(1577) =< s(1564)
s(1581) =< s(1564)
s(1581) =< s(1563)
s(1578) =< s(1562)
s(1579) =< s(1562)
s(1569) =< s(1562)
s(1580) =< s(1562)
s(1579) =< s(1570)
s(1569) =< s(1570)
s(1577) =< s(1570)
s(1579) =< s(1571)
s(1569) =< s(1571)
s(1577) =< s(1571)
s(1585) =< s(1559)+2
s(1586) =< s(1579)*s(1559)
s(1583) =< s(1569)*s(1558)
s(1577) =< s(1578)+s(1552)
s(1587) =< s(1580)*s(1585)
s(1577) =< s(1587)+s(1586)+s(1562)
s(1583) =< s(1587)+s(1586)+s(1562)
s(1588) =< s(1566)
s(1589) =< s(1549)
s(1590) =< s(1549)
s(1573) =< s(1549)
s(1591) =< s(1549)
s(1588) =< s(1549)
s(1573) =< s(1576)
s(1591) =< s(1576)
s(1588) =< s(1576)
s(1592) =< s(1576)
s(1593) =< s(1576)
s(1573) =< s(1568)
s(1591) =< s(1568)
s(1588) =< s(1568)
s(1592) =< s(1568)
s(1593) =< s(1568)
s(1589) =< s(1561)
s(1590) =< s(1561)
s(1573) =< s(1561)
s(1591) =< s(1561)
s(1588) =< s(1561)
s(1588) =< s(1565)
s(1594) =< s(1565)
s(1593) =< s(1565)
s(1595) =< s(1565)
s(1589) =< s(1566)
s(1590) =< s(1566)
s(1573) =< s(1566)
s(1591) =< s(1566)
s(1573) =< s(1567)
s(1588) =< s(1567)
s(1592) =< s(1567)
s(1573) =< s(1565)
s(1592) =< s(1565)
s(1589) =< s(1565)
s(1590) =< s(1565)
s(1591) =< s(1565)
s(1590) =< s(1574)
s(1573) =< s(1574)
s(1588) =< s(1574)
s(1590) =< s(1575)
s(1573) =< s(1575)
s(1588) =< s(1575)
s(1596) =< s(1590)*s(1541)
s(1594) =< s(1573)*s(1558)
s(1588) =< s(1589)+s(1551)
s(1597) =< s(1591)*s(1557)
s(1588) =< s(1597)+s(1596)+s(1565)
s(1594) =< s(1597)+s(1596)+s(1565)

  with precondition: [D=1,H=1,N=1,O=0,Q=1,K=A,L=B,C=I+J+M,E>=1,F>=0,G>=0,I>=0,J>=0,P>=0,K>=I+2,L+1>=K,C>=I+J] 

* Chain [196]: 13*s(1614)+13*s(1615)+9*s(1620)+9*s(1621)+11*s(1636)+11*s(1640)+11*s(1644)+11*s(1646)+11*s(1647)+10*s(1648)+10*s(1649)+9*s(1650)+9*s(1651)+11*s(1655)+11*s(1657)+11*s(1658)+10*s(1659)+10*s(1660)+9*s(1661)+9*s(1662)+16*s(1666)+6*s(1667)+22
  Such that:s(1600) =< 3/2*B-3/2*I+1/2
s(1606) =< E
s(1607) =< E+F
s(1600) =< -E/2-3/2*I+3/2*L+1
s(1608) =< F
s(1599) =< F-K+L+3
s(1609) =< -2*K+2*L+2
s(1610) =< -K+L+1
s(1612) =< -3/2*K+3/2*L+3/2
s(1613) =< L
s(1601) =< L+1
s(1602) =< L/2
s(1603) =< L/2+1/2
s(1604) =< L/3
s(1605) =< L/3+1/3
aux(164) =< K
s(1666) =< aux(164)
s(1614) =< s(1609)
s(1615) =< s(1609)
s(1616) =< s(1609)
s(1615) =< s(1610)
s(1617) =< s(1610)
s(1618) =< aux(164)
s(1619) =< aux(164)
s(1620) =< aux(164)
s(1614) =< aux(164)
s(1621) =< aux(164)
s(1615) =< aux(164)
s(1615) =< s(1612)
s(1622) =< s(1612)
s(1615) =< s(1600)
s(1622) =< s(1600)
s(1614) =< s(1613)
s(1621) =< s(1613)
s(1615) =< s(1613)
s(1616) =< s(1613)
s(1617) =< s(1613)
s(1618) =< s(1601)
s(1619) =< s(1601)
s(1620) =< s(1601)
s(1614) =< s(1601)
s(1621) =< s(1601)
s(1615) =< s(1601)
s(1618) =< s(1613)
s(1619) =< s(1613)
s(1620) =< s(1613)
s(1618) =< s(1603)
s(1620) =< s(1603)
s(1614) =< s(1603)
s(1615) =< s(1603)
s(1618) =< s(1602)
s(1620) =< s(1602)
s(1614) =< s(1602)
s(1615) =< s(1602)
s(1619) =< s(1605)
s(1614) =< s(1605)
s(1619) =< s(1604)
s(1614) =< s(1604)
s(1623) =< s(1608)*2+2
s(1624) =< s(1608)+2
s(1625) =< s(1608)+1
s(1626) =< s(1608)
s(1607) =< s(1608)*2+1
s(1627) =< s(1614)*s(1599)
s(1628) =< s(1620)*s(1606)
s(1623) =< s(1607)+1
s(1629) =< s(1614)*s(1626)
s(1630) =< s(1614)*s(1625)
s(1631) =< s(1614)*s(1624)
s(1632) =< s(1620)*s(1626)
s(1633) =< s(1620)*s(1625)
s(1634) =< s(1620)*s(1624)
s(1635) =< s(1620)*s(1607)
s(1636) =< s(1629)* (1/3)
s(1637) =< s(1630)* (1/2)
s(1638) =< s(1629)* (1/2)
s(1639) =< s(1614)*s(1623)
s(1640) =< s(1632)* (1/3)
s(1641) =< s(1633)* (1/2)
s(1642) =< s(1632)* (1/2)
s(1643) =< s(1620)*s(1623)
s(1644) =< s(1630)
s(1645) =< s(1622)
s(1646) =< s(1622)
s(1636) =< s(1622)
s(1647) =< s(1622)
s(1644) =< s(1622)
s(1636) =< s(1627)
s(1647) =< s(1627)
s(1644) =< s(1627)
s(1648) =< s(1627)
s(1649) =< s(1627)
s(1636) =< s(1639)
s(1647) =< s(1639)
s(1644) =< s(1639)
s(1648) =< s(1639)
s(1649) =< s(1639)
s(1645) =< s(1617)
s(1646) =< s(1617)
s(1636) =< s(1617)
s(1647) =< s(1617)
s(1644) =< s(1617)
s(1644) =< s(1629)
s(1650) =< s(1629)
s(1649) =< s(1629)
s(1651) =< s(1629)
s(1645) =< s(1630)
s(1646) =< s(1630)
s(1636) =< s(1630)
s(1647) =< s(1630)
s(1636) =< s(1631)
s(1644) =< s(1631)
s(1648) =< s(1631)
s(1648) =< s(1630)
s(1645) =< s(1629)
s(1646) =< s(1629)
s(1636) =< s(1629)
s(1647) =< s(1629)
s(1646) =< s(1637)
s(1636) =< s(1637)
s(1644) =< s(1637)
s(1646) =< s(1638)
s(1636) =< s(1638)
s(1644) =< s(1638)
s(1652) =< s(1626)+2
s(1653) =< s(1646)*s(1626)
s(1650) =< s(1636)*s(1625)
s(1644) =< s(1645)+s(1619)
s(1654) =< s(1647)*s(1652)
s(1644) =< s(1654)+s(1653)+s(1629)
s(1650) =< s(1654)+s(1653)+s(1629)
s(1655) =< s(1633)
s(1656) =< s(1616)
s(1657) =< s(1616)
s(1640) =< s(1616)
s(1658) =< s(1616)
s(1655) =< s(1616)
s(1640) =< s(1643)
s(1658) =< s(1643)
s(1655) =< s(1643)
s(1659) =< s(1643)
s(1660) =< s(1643)
s(1640) =< s(1635)
s(1658) =< s(1635)
s(1655) =< s(1635)
s(1659) =< s(1635)
s(1660) =< s(1635)
s(1656) =< s(1628)
s(1657) =< s(1628)
s(1640) =< s(1628)
s(1658) =< s(1628)
s(1655) =< s(1628)
s(1655) =< s(1632)
s(1661) =< s(1632)
s(1660) =< s(1632)
s(1662) =< s(1632)
s(1656) =< s(1633)
s(1657) =< s(1633)
s(1640) =< s(1633)
s(1658) =< s(1633)
s(1640) =< s(1634)
s(1655) =< s(1634)
s(1659) =< s(1634)
s(1640) =< s(1632)
s(1659) =< s(1632)
s(1656) =< s(1632)
s(1657) =< s(1632)
s(1658) =< s(1632)
s(1657) =< s(1641)
s(1640) =< s(1641)
s(1655) =< s(1641)
s(1657) =< s(1642)
s(1640) =< s(1642)
s(1655) =< s(1642)
s(1663) =< s(1657)*s(1608)
s(1661) =< s(1640)*s(1625)
s(1655) =< s(1656)+s(1618)
s(1664) =< s(1658)*s(1624)
s(1655) =< s(1664)+s(1663)+s(1632)
s(1661) =< s(1664)+s(1663)+s(1632)

Unbounded itvars
s(1667) :  eq(299,2),s(1218)

  with precondition: [D=1,H=1,Q=1,L=B,A=I+1,A=K,A=N,A+J+M=C+1,A>=2,E>=1,F>=0,G>=0,J>=1,L+1>=A,O+3>=2*A+J,C+1>=A+J,P+1>=A+J] 


#### Simplifying cost structure of CE 305 

#### Simplifying cost structure of CE 300 
 * Renamed intermediate variables: 
[ (eq(302,1),s(1533))>>s(1669), (eq(302,1),s(1539))>>s(1670), (eq(302,1),s(1540))>>s(1671), (eq(302,1),s(1541))>>s(1672), (eq(302,1),s(1532))>>s(1673), (eq(302,1),s(1542))>>s(1674), (eq(302,1),s(1543))>>s(1675), (eq(302,1),s(1545))>>s(1676), (eq(302,1),s(1546))>>s(1677), (eq(302,1),s(1534))>>s(1678), (eq(302,1),s(1535))>>s(1679), (eq(302,1),s(1536))>>s(1680), (eq(302,1),s(1537))>>s(1681), (eq(302,1),s(1538))>>s(1682), (eq(302,1),aux(163))>>s(1683), (eq(302,1),s(1598))>>s(1684), (eq(302,1),s(1547))>>s(1685), (eq(302,1),s(1548))>>s(1686), (eq(302,1),s(1549))>>s(1687), (eq(302,1),s(1550))>>s(1688), (eq(302,1),s(1551))>>s(1689), (eq(302,1),s(1552))>>s(1690), (eq(302,1),s(1553))>>s(1691), (eq(302,1),s(1554))>>s(1692), (eq(302,1),s(1555))>>s(1693), (eq(302,1),s(1556))>>s(1694), (eq(302,1),s(1557))>>s(1695), (eq(302,1),s(1558))>>s(1696), (eq(302,1),s(1559))>>s(1697), (eq(302,1),s(1560))>>s(1698), (eq(302,1),s(1561))>>s(1699), (eq(302,1),s(1562))>>s(1700), (eq(302,1),s(1563))>>s(1701), (eq(302,1),s(1564))>>s(1702), (eq(302,1),s(1565))>>s(1703), (eq(302,1),s(1566))>>s(1704), (eq(302,1),s(1567))>>s(1705), (eq(302,1),s(1568))>>s(1706), (eq(302,1),s(1569))>>s(1707), (eq(302,1),s(1570))>>s(1708), (eq(302,1),s(1571))>>s(1709), (eq(302,1),s(1572))>>s(1710), (eq(302,1),s(1573))>>s(1711), (eq(302,1),s(1574))>>s(1712), (eq(302,1),s(1575))>>s(1713), (eq(302,1),s(1576))>>s(1714), (eq(302,1),s(1577))>>s(1715), (eq(302,1),s(1578))>>s(1716), (eq(302,1),s(1579))>>s(1717), (eq(302,1),s(1580))>>s(1718), (eq(302,1),s(1581))>>s(1719), (eq(302,1),s(1582))>>s(1720), (eq(302,1),s(1583))>>s(1721), (eq(302,1),s(1584))>>s(1722), (eq(302,1),s(1585))>>s(1723), (eq(302,1),s(1586))>>s(1724), (eq(302,1),s(1587))>>s(1725), (eq(302,1),s(1588))>>s(1726), (eq(302,1),s(1589))>>s(1727), (eq(302,1),s(1590))>>s(1728), (eq(302,1),s(1591))>>s(1729), (eq(302,1),s(1592))>>s(1730), (eq(302,1),s(1593))>>s(1731), (eq(302,1),s(1594))>>s(1732), (eq(302,1),s(1595))>>s(1733), (eq(302,1),s(1596))>>s(1734), (eq(302,1),s(1597))>>s(1735)]

#### Simplifying cost structure of CE 302 
 * Renamed intermediate variables: 
[ (eq(303,1),s(1458))>>s(1736), (eq(303,1),s(1464))>>s(1737), (eq(303,1),s(1465))>>s(1738), (eq(303,1),s(1466))>>s(1739), (eq(303,1),s(1457))>>s(1740), (eq(303,1),s(1467))>>s(1741), (eq(303,1),s(1468))>>s(1742), (eq(303,1),s(1470))>>s(1743), (eq(303,1),s(1471))>>s(1744), (eq(303,1),s(1459))>>s(1745), (eq(303,1),s(1460))>>s(1746), (eq(303,1),s(1461))>>s(1747), (eq(303,1),s(1462))>>s(1748), (eq(303,1),s(1463))>>s(1749), (eq(303,1),aux(162))>>s(1750), (eq(303,1),s(1523))>>s(1751), (eq(303,1),s(1528))>>s(1752), (eq(303,1),s(1529))>>s(1753), (eq(303,1),s(1472))>>s(1754), (eq(303,1),s(1473))>>s(1755), (eq(303,1),s(1474))>>s(1756), (eq(303,1),s(1475))>>s(1757), (eq(303,1),s(1476))>>s(1758), (eq(303,1),s(1477))>>s(1759), (eq(303,1),s(1478))>>s(1760), (eq(303,1),s(1479))>>s(1761), (eq(303,1),s(1480))>>s(1762), (eq(303,1),s(1481))>>s(1763), (eq(303,1),s(1482))>>s(1764), (eq(303,1),s(1483))>>s(1765), (eq(303,1),s(1484))>>s(1766), (eq(303,1),s(1485))>>s(1767), (eq(303,1),s(1486))>>s(1768), (eq(303,1),s(1487))>>s(1769), (eq(303,1),s(1488))>>s(1770), (eq(303,1),s(1489))>>s(1771), (eq(303,1),s(1490))>>s(1772), (eq(303,1),s(1491))>>s(1773), (eq(303,1),s(1492))>>s(1774), (eq(303,1),s(1493))>>s(1775), (eq(303,1),s(1494))>>s(1776), (eq(303,1),s(1495))>>s(1777), (eq(303,1),s(1496))>>s(1778), (eq(303,1),s(1497))>>s(1779), (eq(303,1),s(1498))>>s(1780), (eq(303,1),s(1499))>>s(1781), (eq(303,1),s(1500))>>s(1782), (eq(303,1),s(1501))>>s(1783), (eq(303,1),s(1502))>>s(1784), (eq(303,1),s(1503))>>s(1785), (eq(303,1),s(1504))>>s(1786), (eq(303,1),s(1505))>>s(1787), (eq(303,1),s(1506))>>s(1788), (eq(303,1),s(1507))>>s(1789), (eq(303,1),s(1508))>>s(1790), (eq(303,1),s(1509))>>s(1791), (eq(303,1),s(1510))>>s(1792), (eq(303,1),s(1511))>>s(1793), (eq(303,1),s(1512))>>s(1794), (eq(303,1),s(1513))>>s(1795), (eq(303,1),s(1514))>>s(1796), (eq(303,1),s(1515))>>s(1797), (eq(303,1),s(1516))>>s(1798), (eq(303,1),s(1517))>>s(1799), (eq(303,1),s(1518))>>s(1800), (eq(303,1),s(1519))>>s(1801), (eq(303,1),s(1520))>>s(1802), (eq(303,1),s(1521))>>s(1803), (eq(303,1),s(1522))>>s(1804), (eq(303,1),s(1525))>>s(1805), (eq(303,1),s(1531))>>s(1806)]

#### Simplifying cost structure of CE 303 
 * Joined equivalent variables [s(1805),s(1806)] into s(1805)
 * Joined equivalent variables [s(1751),s(1752),s(1753)] into s(1751)
 * Joined equivalent variables [aux(165),s(1674),s(1741)] into aux(165)
 * Joined equivalent variables [aux(166),s(1675),s(1742)] into aux(166)
 * Joined equivalent variables [aux(167),s(1673),s(1740)] into aux(167)
 * Joined equivalent variables [aux(168),s(1683),s(1750)] into aux(168)
 * Joined equivalent variables [aux(169),s(1676),s(1743)] into aux(169)
 * Joined equivalent variables [aux(171),s(1677),s(1744)] into aux(171)
 * Joined equivalent variables [aux(172),s(1678),s(1745)] into aux(172)
 * Joined equivalent variables [aux(173),s(1679),s(1746)] into aux(173)
 * Joined equivalent variables [aux(174),s(1680),s(1747)] into aux(174)
 * Joined equivalent variables [aux(175),s(1681),s(1748)] into aux(175)
 * Joined equivalent variables [aux(176),s(1682),s(1749)] into aux(176)
 * Joined equivalent variables [aux(178),s(1670),s(1737)] into aux(178)
 * Joined equivalent variables [aux(180),s(1672),s(1739)] into aux(180)
 * Joined equivalent variables [s(1669),s(1736)] into s(1669)
 * Joined equivalent variables [s(1695),s(1764)] into s(1695)
 * Joined equivalent variables [s(1696),s(1765)] into s(1696)
 * Joined equivalent variables [s(1697),s(1766)] into s(1697)
 * Joined equivalent variables [s(1671),s(1738)] into s(1671)
 * Joined equivalent variables [s(1686),s(1755)] into s(1686)
 * Joined equivalent variables [s(1685),s(1754)] into s(1685)
 * Joined equivalent variables [s(1684),s(1751)] into s(1684)
 * Joined equivalent variables [s(1692),s(1761)] into s(1692)
 * Joined equivalent variables [s(1691),s(1760)] into s(1691)
 * Joined equivalent variables [s(1687),s(1756)] into s(1687)
 * Joined equivalent variables [s(1688),s(1757)] into s(1688)
 * Joined equivalent variables [s(1689),s(1758)] into s(1689)
 * Joined equivalent variables [s(1690),s(1759)] into s(1690)
 * Joined equivalent variables [s(1693),s(1762)] into s(1693)
 * Joined equivalent variables [s(1694),s(1763)] into s(1694)
 * Joined equivalent variables [s(1700),s(1769)] into s(1700)
 * Joined equivalent variables [s(1701),s(1770)] into s(1701)
 * Joined equivalent variables [s(1702),s(1771)] into s(1702)
 * Joined equivalent variables [s(1703),s(1772)] into s(1703)
 * Joined equivalent variables [s(1704),s(1773)] into s(1704)
 * Joined equivalent variables [s(1705),s(1774)] into s(1705)
 * Joined equivalent variables [s(1706),s(1775)] into s(1706)
 * Joined equivalent variables [s(1723),s(1792)] into s(1723)
 * Joined equivalent variables [s(1698),s(1767)] into s(1698)
 * Joined equivalent variables [s(1699),s(1768)] into s(1699)
 * Joined equivalent variables [s(1708),s(1777)] into s(1708)
 * Joined equivalent variables [s(1709),s(1778)] into s(1709)
 * Joined equivalent variables [s(1710),s(1779)] into s(1710)
 * Joined equivalent variables [s(1712),s(1781)] into s(1712)
 * Joined equivalent variables [s(1713),s(1782)] into s(1713)
 * Joined equivalent variables [s(1714),s(1783)] into s(1714)
 * Joined equivalent variables [s(1722),s(1791)] into s(1722)
 * Joined equivalent variables [s(1733),s(1802)] into s(1733)
 * Joined equivalent variables [s(1727),s(1796)] into s(1727)
 * Joined equivalent variables [s(1716),s(1785)] into s(1716)
 * Joined equivalent variables [s(1707),s(1776)] into s(1707)
 * Joined equivalent variables [s(1711),s(1780)] into s(1711)
 * Joined equivalent variables [s(1729),s(1798)] into s(1729)
 * Joined equivalent variables [s(1728),s(1797)] into s(1728)
 * Joined equivalent variables [s(1718),s(1787)] into s(1718)
 * Joined equivalent variables [s(1717),s(1786)] into s(1717)
 * Joined equivalent variables [s(1720),s(1789)] into s(1720)
 * Joined equivalent variables [s(1719),s(1788)] into s(1719)
 * Joined equivalent variables [s(1730),s(1799)] into s(1730)
 * Joined equivalent variables [s(1731),s(1800)] into s(1731)
 * Joined equivalent variables [s(1724),s(1793)] into s(1724)
 * Joined equivalent variables [s(1725),s(1794)] into s(1725)
 * Joined equivalent variables [s(1735),s(1804)] into s(1735)
 * Joined equivalent variables [s(1734),s(1803)] into s(1734)
 * Joined equivalent variables [s(1721),s(1790)] into s(1721)
 * Joined equivalent variables [s(1715),s(1784)] into s(1715)
 * Joined equivalent variables [s(1732),s(1801)] into s(1732)
 * Joined equivalent variables [s(1726),s(1795)] into s(1726)
 * Renamed intermediate variables: 
[ (eq(301,1),s(1390))>>s(1807), (eq(301,1),s(1396))>>s(1808), (eq(301,1),s(1397))>>s(1809), (eq(301,1),s(1398))>>s(1810), (eq(301,1),s(1389))>>s(1811), (eq(301,1),s(1399))>>s(1812), (eq(301,1),s(1400))>>s(1813), (eq(301,1),s(1402))>>s(1814), (eq(301,1),s(1403))>>s(1815), (eq(301,1),s(1391))>>s(1816), (eq(301,1),s(1392))>>s(1817), (eq(301,1),s(1393))>>s(1818), (eq(301,1),s(1394))>>s(1819), (eq(301,1),s(1395))>>s(1820), (eq(301,1),aux(161))>>s(1821), (eq(301,1),s(1456))>>s(1822), (eq(301,1),s(1404))>>s(1823), (eq(301,1),s(1405))>>s(1824), (eq(301,1),s(1406))>>s(1825), (eq(301,1),s(1407))>>s(1826), (eq(301,1),s(1408))>>s(1827), (eq(301,1),s(1409))>>s(1828), (eq(301,1),s(1410))>>s(1829), (eq(301,1),s(1411))>>s(1830), (eq(301,1),s(1412))>>s(1831), (eq(301,1),s(1413))>>s(1832), (eq(301,1),s(1414))>>s(1833), (eq(301,1),s(1415))>>s(1834), (eq(301,1),s(1416))>>s(1835), (eq(301,1),s(1417))>>s(1836), (eq(301,1),s(1418))>>s(1837), (eq(301,1),s(1419))>>s(1838), (eq(301,1),s(1420))>>s(1839), (eq(301,1),s(1421))>>s(1840), (eq(301,1),s(1422))>>s(1841), (eq(301,1),s(1423))>>s(1842), (eq(301,1),s(1424))>>s(1843), (eq(301,1),s(1425))>>s(1844), (eq(301,1),s(1426))>>s(1845), (eq(301,1),s(1427))>>s(1846), (eq(301,1),s(1428))>>s(1847), (eq(301,1),s(1429))>>s(1848), (eq(301,1),s(1430))>>s(1849), (eq(301,1),s(1431))>>s(1850), (eq(301,1),s(1432))>>s(1851), (eq(301,1),s(1433))>>s(1852), (eq(301,1),s(1434))>>s(1853), (eq(301,1),s(1435))>>s(1854), (eq(301,1),s(1436))>>s(1855), (eq(301,1),s(1437))>>s(1856), (eq(301,1),s(1438))>>s(1857), (eq(301,1),s(1439))>>s(1858), (eq(301,1),s(1440))>>s(1859), (eq(301,1),s(1441))>>s(1860), (eq(301,1),s(1442))>>s(1861), (eq(301,1),s(1443))>>s(1862), (eq(301,1),s(1444))>>s(1863), (eq(301,1),s(1445))>>s(1864), (eq(301,1),s(1446))>>s(1865), (eq(301,1),s(1447))>>s(1866), (eq(301,1),s(1448))>>s(1867), (eq(301,1),s(1449))>>s(1868), (eq(301,1),s(1450))>>s(1869), (eq(301,1),s(1451))>>s(1870), (eq(301,1),s(1452))>>s(1871), (eq(301,1),s(1453))>>s(1872), (eq(301,1),s(1454))>>s(1873)]

#### Simplifying cost structure of CE 301 
 * Renamed intermediate variables: 
[ (eq(304,1),s(1600))>>s(1874), (eq(304,1),s(1606))>>s(1875), (eq(304,1),s(1607))>>s(1876), (eq(304,1),s(1608))>>s(1877), (eq(304,1),s(1599))>>s(1878), (eq(304,1),s(1609))>>s(1879), (eq(304,1),s(1610))>>s(1880), (eq(304,1),s(1612))>>s(1881), (eq(304,1),s(1613))>>s(1882), (eq(304,1),s(1601))>>s(1883), (eq(304,1),s(1602))>>s(1884), (eq(304,1),s(1603))>>s(1885), (eq(304,1),s(1604))>>s(1886), (eq(304,1),s(1605))>>s(1887), (eq(304,1),aux(164))>>s(1888), (eq(304,1),s(1666))>>s(1889), (eq(304,1),s(1614))>>s(1890), (eq(304,1),s(1615))>>s(1891), (eq(304,1),s(1616))>>s(1892), (eq(304,1),s(1617))>>s(1893), (eq(304,1),s(1618))>>s(1894), (eq(304,1),s(1619))>>s(1895), (eq(304,1),s(1620))>>s(1896), (eq(304,1),s(1621))>>s(1897), (eq(304,1),s(1622))>>s(1898), (eq(304,1),s(1623))>>s(1899), (eq(304,1),s(1624))>>s(1900), (eq(304,1),s(1625))>>s(1901), (eq(304,1),s(1626))>>s(1902), (eq(304,1),s(1627))>>s(1903), (eq(304,1),s(1628))>>s(1904), (eq(304,1),s(1629))>>s(1905), (eq(304,1),s(1630))>>s(1906), (eq(304,1),s(1631))>>s(1907), (eq(304,1),s(1632))>>s(1908), (eq(304,1),s(1633))>>s(1909), (eq(304,1),s(1634))>>s(1910), (eq(304,1),s(1635))>>s(1911), (eq(304,1),s(1636))>>s(1912), (eq(304,1),s(1637))>>s(1913), (eq(304,1),s(1638))>>s(1914), (eq(304,1),s(1639))>>s(1915), (eq(304,1),s(1640))>>s(1916), (eq(304,1),s(1641))>>s(1917), (eq(304,1),s(1642))>>s(1918), (eq(304,1),s(1643))>>s(1919), (eq(304,1),s(1644))>>s(1920), (eq(304,1),s(1645))>>s(1921), (eq(304,1),s(1646))>>s(1922), (eq(304,1),s(1647))>>s(1923), (eq(304,1),s(1648))>>s(1924), (eq(304,1),s(1649))>>s(1925), (eq(304,1),s(1650))>>s(1926), (eq(304,1),s(1651))>>s(1927), (eq(304,1),s(1652))>>s(1928), (eq(304,1),s(1653))>>s(1929), (eq(304,1),s(1654))>>s(1930), (eq(304,1),s(1655))>>s(1931), (eq(304,1),s(1656))>>s(1932), (eq(304,1),s(1657))>>s(1933), (eq(304,1),s(1658))>>s(1934), (eq(304,1),s(1659))>>s(1935), (eq(304,1),s(1660))>>s(1936), (eq(304,1),s(1661))>>s(1937), (eq(304,1),s(1662))>>s(1938), (eq(304,1),s(1663))>>s(1939), (eq(304,1),s(1664))>>s(1940), (eq(304,1),s(1667))>>s(1941)]

#### Simplifying cost structure of CE 304 

#### Cost of chains of case_44(A,B,C,D,E,F,G,H,I,J,K,L,M):
* Chain [205]: 6
  with precondition: [A=0,J=1,K=0,M=1,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,L>=0] 

* Chain [204]: 26
  with precondition: [A=1,B=1,C=0,E=1,I=1,J=1,K=0,M=1,D>=0,F>=1,G>=0,H>=0,L>=0] 

* Chain [203]: 32*s(1684)+26*s(1685)+26*s(1686)+18*s(1691)+18*s(1692)+22*s(1707)+22*s(1711)+22*s(1715)+22*s(1717)+22*s(1718)+20*s(1719)+20*s(1720)+18*s(1721)+18*s(1722)+22*s(1726)+22*s(1728)+22*s(1729)+20*s(1730)+20*s(1731)+18*s(1732)+18*s(1733)+24*s(1805)+37
  Such that:aux(165) =< -2*B+2*C+2
aux(166) =< -B+C+1
aux(167) =< -B+C+G+3
aux(168) =< B
aux(169) =< -3/2*B+3/2*C+3/2
aux(170) =< -3/2*B+3/2*C-F/2+5/2
aux(171) =< C
aux(172) =< C+1
aux(173) =< C/2
aux(174) =< C/2+1/2
aux(175) =< C/3
aux(176) =< C/3+1/3
aux(177) =< 3/2*C-F/2
aux(178) =< F
aux(179) =< F+G
aux(180) =< G
s(1669) =< aux(170)
s(1669) =< aux(177)
s(1671) =< aux(179)
s(1684) =< aux(168)
s(1685) =< aux(165)
s(1686) =< aux(165)
s(1687) =< aux(165)
s(1686) =< aux(166)
s(1688) =< aux(166)
s(1689) =< aux(168)
s(1690) =< aux(168)
s(1691) =< aux(168)
s(1685) =< aux(168)
s(1692) =< aux(168)
s(1686) =< aux(168)
s(1686) =< aux(169)
s(1693) =< aux(169)
s(1686) =< s(1669)
s(1693) =< s(1669)
s(1685) =< aux(171)
s(1692) =< aux(171)
s(1686) =< aux(171)
s(1687) =< aux(171)
s(1688) =< aux(171)
s(1689) =< aux(172)
s(1690) =< aux(172)
s(1691) =< aux(172)
s(1685) =< aux(172)
s(1692) =< aux(172)
s(1686) =< aux(172)
s(1689) =< aux(171)
s(1690) =< aux(171)
s(1691) =< aux(171)
s(1689) =< aux(174)
s(1691) =< aux(174)
s(1685) =< aux(174)
s(1686) =< aux(174)
s(1689) =< aux(173)
s(1691) =< aux(173)
s(1685) =< aux(173)
s(1686) =< aux(173)
s(1690) =< aux(176)
s(1685) =< aux(176)
s(1690) =< aux(175)
s(1685) =< aux(175)
s(1694) =< aux(180)*2+2
s(1695) =< aux(180)+2
s(1696) =< aux(180)+1
s(1697) =< aux(180)
s(1671) =< aux(180)*2+1
s(1698) =< s(1685)*aux(167)
s(1699) =< s(1691)*aux(178)
s(1694) =< s(1671)+1
s(1700) =< s(1685)*s(1697)
s(1701) =< s(1685)*s(1696)
s(1702) =< s(1685)*s(1695)
s(1703) =< s(1691)*s(1697)
s(1704) =< s(1691)*s(1696)
s(1705) =< s(1691)*s(1695)
s(1706) =< s(1691)*s(1671)
s(1707) =< s(1700)* (1/3)
s(1708) =< s(1701)* (1/2)
s(1709) =< s(1700)* (1/2)
s(1710) =< s(1685)*s(1694)
s(1711) =< s(1703)* (1/3)
s(1712) =< s(1704)* (1/2)
s(1713) =< s(1703)* (1/2)
s(1714) =< s(1691)*s(1694)
s(1715) =< s(1701)
s(1716) =< s(1693)
s(1717) =< s(1693)
s(1707) =< s(1693)
s(1718) =< s(1693)
s(1715) =< s(1693)
s(1707) =< s(1698)
s(1718) =< s(1698)
s(1715) =< s(1698)
s(1719) =< s(1698)
s(1720) =< s(1698)
s(1707) =< s(1710)
s(1718) =< s(1710)
s(1715) =< s(1710)
s(1719) =< s(1710)
s(1720) =< s(1710)
s(1716) =< s(1688)
s(1717) =< s(1688)
s(1707) =< s(1688)
s(1718) =< s(1688)
s(1715) =< s(1688)
s(1715) =< s(1700)
s(1721) =< s(1700)
s(1720) =< s(1700)
s(1722) =< s(1700)
s(1716) =< s(1701)
s(1717) =< s(1701)
s(1707) =< s(1701)
s(1718) =< s(1701)
s(1707) =< s(1702)
s(1715) =< s(1702)
s(1719) =< s(1702)
s(1719) =< s(1701)
s(1716) =< s(1700)
s(1717) =< s(1700)
s(1707) =< s(1700)
s(1718) =< s(1700)
s(1717) =< s(1708)
s(1707) =< s(1708)
s(1715) =< s(1708)
s(1717) =< s(1709)
s(1707) =< s(1709)
s(1715) =< s(1709)
s(1723) =< s(1697)+2
s(1724) =< s(1717)*s(1697)
s(1721) =< s(1707)*s(1696)
s(1715) =< s(1716)+s(1690)
s(1725) =< s(1718)*s(1723)
s(1715) =< s(1725)+s(1724)+s(1700)
s(1721) =< s(1725)+s(1724)+s(1700)
s(1726) =< s(1704)
s(1727) =< s(1687)
s(1728) =< s(1687)
s(1711) =< s(1687)
s(1729) =< s(1687)
s(1726) =< s(1687)
s(1711) =< s(1714)
s(1729) =< s(1714)
s(1726) =< s(1714)
s(1730) =< s(1714)
s(1731) =< s(1714)
s(1711) =< s(1706)
s(1729) =< s(1706)
s(1726) =< s(1706)
s(1730) =< s(1706)
s(1731) =< s(1706)
s(1727) =< s(1699)
s(1728) =< s(1699)
s(1711) =< s(1699)
s(1729) =< s(1699)
s(1726) =< s(1699)
s(1726) =< s(1703)
s(1732) =< s(1703)
s(1731) =< s(1703)
s(1733) =< s(1703)
s(1727) =< s(1704)
s(1728) =< s(1704)
s(1711) =< s(1704)
s(1729) =< s(1704)
s(1711) =< s(1705)
s(1726) =< s(1705)
s(1730) =< s(1705)
s(1711) =< s(1703)
s(1730) =< s(1703)
s(1727) =< s(1703)
s(1728) =< s(1703)
s(1729) =< s(1703)
s(1728) =< s(1712)
s(1711) =< s(1712)
s(1726) =< s(1712)
s(1728) =< s(1713)
s(1711) =< s(1713)
s(1726) =< s(1713)
s(1734) =< s(1728)*aux(180)
s(1732) =< s(1711)*s(1696)
s(1726) =< s(1727)+s(1689)
s(1735) =< s(1729)*s(1695)
s(1726) =< s(1735)+s(1734)+s(1703)
s(1732) =< s(1735)+s(1734)+s(1703)

Unbounded itvars
s(1805) :  eq(303,1),s(1525)

  with precondition: [A=1,E=1,I=1,J=1,K=0,M=1,B>=2,D>=0,F>=1,G>=0,H>=0,L>=0,C+1>=B] 

* Chain [202]: 16*s(1822)+13*s(1823)+13*s(1824)+9*s(1829)+9*s(1830)+11*s(1845)+11*s(1849)+11*s(1853)+11*s(1855)+11*s(1856)+10*s(1857)+10*s(1858)+9*s(1859)+9*s(1860)+11*s(1864)+11*s(1866)+11*s(1867)+10*s(1868)+10*s(1869)+9*s(1870)+9*s(1871)+26
  Such that:s(1812) =< -2*B+2*C+2
s(1813) =< -B+C+1
s(1811) =< -B+C+G+3
s(1821) =< B
s(1814) =< -3/2*B+3/2*C+3/2
s(1807) =< -3/2*B+3/2*C-F/2+5/2
s(1815) =< C
s(1816) =< C+1
s(1817) =< C/2
s(1818) =< C/2+1/2
s(1819) =< C/3
s(1820) =< C/3+1/3
s(1807) =< 3/2*C-F/2
s(1808) =< F
s(1809) =< F+G
s(1810) =< G
s(1822) =< s(1821)
s(1823) =< s(1812)
s(1824) =< s(1812)
s(1825) =< s(1812)
s(1824) =< s(1813)
s(1826) =< s(1813)
s(1827) =< s(1821)
s(1828) =< s(1821)
s(1829) =< s(1821)
s(1823) =< s(1821)
s(1830) =< s(1821)
s(1824) =< s(1821)
s(1824) =< s(1814)
s(1831) =< s(1814)
s(1824) =< s(1807)
s(1831) =< s(1807)
s(1823) =< s(1815)
s(1830) =< s(1815)
s(1824) =< s(1815)
s(1825) =< s(1815)
s(1826) =< s(1815)
s(1827) =< s(1816)
s(1828) =< s(1816)
s(1829) =< s(1816)
s(1823) =< s(1816)
s(1830) =< s(1816)
s(1824) =< s(1816)
s(1827) =< s(1815)
s(1828) =< s(1815)
s(1829) =< s(1815)
s(1827) =< s(1818)
s(1829) =< s(1818)
s(1823) =< s(1818)
s(1824) =< s(1818)
s(1827) =< s(1817)
s(1829) =< s(1817)
s(1823) =< s(1817)
s(1824) =< s(1817)
s(1828) =< s(1820)
s(1823) =< s(1820)
s(1828) =< s(1819)
s(1823) =< s(1819)
s(1832) =< s(1810)*2+2
s(1833) =< s(1810)+2
s(1834) =< s(1810)+1
s(1835) =< s(1810)
s(1809) =< s(1810)*2+1
s(1836) =< s(1823)*s(1811)
s(1837) =< s(1829)*s(1808)
s(1832) =< s(1809)+1
s(1838) =< s(1823)*s(1835)
s(1839) =< s(1823)*s(1834)
s(1840) =< s(1823)*s(1833)
s(1841) =< s(1829)*s(1835)
s(1842) =< s(1829)*s(1834)
s(1843) =< s(1829)*s(1833)
s(1844) =< s(1829)*s(1809)
s(1845) =< s(1838)* (1/3)
s(1846) =< s(1839)* (1/2)
s(1847) =< s(1838)* (1/2)
s(1848) =< s(1823)*s(1832)
s(1849) =< s(1841)* (1/3)
s(1850) =< s(1842)* (1/2)
s(1851) =< s(1841)* (1/2)
s(1852) =< s(1829)*s(1832)
s(1853) =< s(1839)
s(1854) =< s(1831)
s(1855) =< s(1831)
s(1845) =< s(1831)
s(1856) =< s(1831)
s(1853) =< s(1831)
s(1845) =< s(1836)
s(1856) =< s(1836)
s(1853) =< s(1836)
s(1857) =< s(1836)
s(1858) =< s(1836)
s(1845) =< s(1848)
s(1856) =< s(1848)
s(1853) =< s(1848)
s(1857) =< s(1848)
s(1858) =< s(1848)
s(1854) =< s(1826)
s(1855) =< s(1826)
s(1845) =< s(1826)
s(1856) =< s(1826)
s(1853) =< s(1826)
s(1853) =< s(1838)
s(1859) =< s(1838)
s(1858) =< s(1838)
s(1860) =< s(1838)
s(1854) =< s(1839)
s(1855) =< s(1839)
s(1845) =< s(1839)
s(1856) =< s(1839)
s(1845) =< s(1840)
s(1853) =< s(1840)
s(1857) =< s(1840)
s(1857) =< s(1839)
s(1854) =< s(1838)
s(1855) =< s(1838)
s(1845) =< s(1838)
s(1856) =< s(1838)
s(1855) =< s(1846)
s(1845) =< s(1846)
s(1853) =< s(1846)
s(1855) =< s(1847)
s(1845) =< s(1847)
s(1853) =< s(1847)
s(1861) =< s(1835)+2
s(1862) =< s(1855)*s(1835)
s(1859) =< s(1845)*s(1834)
s(1853) =< s(1854)+s(1828)
s(1863) =< s(1856)*s(1861)
s(1853) =< s(1863)+s(1862)+s(1838)
s(1859) =< s(1863)+s(1862)+s(1838)
s(1864) =< s(1842)
s(1865) =< s(1825)
s(1866) =< s(1825)
s(1849) =< s(1825)
s(1867) =< s(1825)
s(1864) =< s(1825)
s(1849) =< s(1852)
s(1867) =< s(1852)
s(1864) =< s(1852)
s(1868) =< s(1852)
s(1869) =< s(1852)
s(1849) =< s(1844)
s(1867) =< s(1844)
s(1864) =< s(1844)
s(1868) =< s(1844)
s(1869) =< s(1844)
s(1865) =< s(1837)
s(1866) =< s(1837)
s(1849) =< s(1837)
s(1867) =< s(1837)
s(1864) =< s(1837)
s(1864) =< s(1841)
s(1870) =< s(1841)
s(1869) =< s(1841)
s(1871) =< s(1841)
s(1865) =< s(1842)
s(1866) =< s(1842)
s(1849) =< s(1842)
s(1867) =< s(1842)
s(1849) =< s(1843)
s(1864) =< s(1843)
s(1868) =< s(1843)
s(1849) =< s(1841)
s(1868) =< s(1841)
s(1865) =< s(1841)
s(1866) =< s(1841)
s(1867) =< s(1841)
s(1866) =< s(1850)
s(1849) =< s(1850)
s(1864) =< s(1850)
s(1866) =< s(1851)
s(1849) =< s(1851)
s(1864) =< s(1851)
s(1872) =< s(1866)*s(1810)
s(1870) =< s(1849)*s(1834)
s(1864) =< s(1865)+s(1827)
s(1873) =< s(1867)*s(1833)
s(1864) =< s(1873)+s(1872)+s(1841)
s(1870) =< s(1873)+s(1872)+s(1841)

  with precondition: [A=1,E=1,I=1,M=1,B=J,B=K+1,B>=2,F>=1,G>=0,H>=0,C+1>=B,D+1>=B,L+1>=B] 

* Chain [201]: 16*s(1889)+13*s(1890)+13*s(1891)+9*s(1896)+9*s(1897)+11*s(1912)+11*s(1916)+11*s(1920)+11*s(1922)+11*s(1923)+10*s(1924)+10*s(1925)+9*s(1926)+9*s(1927)+11*s(1931)+11*s(1933)+11*s(1934)+10*s(1935)+10*s(1936)+9*s(1937)+9*s(1938)+6*s(1941)+26
  Such that:s(1879) =< -2*B+2*C+2
s(1880) =< -B+C+1
s(1878) =< -B+C+G+3
s(1888) =< B
s(1874) =< -3/2*B+3/2*C+2
s(1881) =< -3/2*B+3/2*C+3/2
s(1874) =< -3/2*B+3/2*C-F/2+5/2
s(1882) =< C
s(1883) =< C+1
s(1884) =< C/2
s(1885) =< C/2+1/2
s(1886) =< C/3
s(1887) =< C/3+1/3
s(1874) =< 3/2*C-F/2
s(1875) =< F
s(1876) =< F+G
s(1877) =< G
s(1889) =< s(1888)
s(1890) =< s(1879)
s(1891) =< s(1879)
s(1892) =< s(1879)
s(1891) =< s(1880)
s(1893) =< s(1880)
s(1894) =< s(1888)
s(1895) =< s(1888)
s(1896) =< s(1888)
s(1890) =< s(1888)
s(1897) =< s(1888)
s(1891) =< s(1888)
s(1891) =< s(1881)
s(1898) =< s(1881)
s(1891) =< s(1874)
s(1898) =< s(1874)
s(1890) =< s(1882)
s(1897) =< s(1882)
s(1891) =< s(1882)
s(1892) =< s(1882)
s(1893) =< s(1882)
s(1894) =< s(1883)
s(1895) =< s(1883)
s(1896) =< s(1883)
s(1890) =< s(1883)
s(1897) =< s(1883)
s(1891) =< s(1883)
s(1894) =< s(1882)
s(1895) =< s(1882)
s(1896) =< s(1882)
s(1894) =< s(1885)
s(1896) =< s(1885)
s(1890) =< s(1885)
s(1891) =< s(1885)
s(1894) =< s(1884)
s(1896) =< s(1884)
s(1890) =< s(1884)
s(1891) =< s(1884)
s(1895) =< s(1887)
s(1890) =< s(1887)
s(1895) =< s(1886)
s(1890) =< s(1886)
s(1899) =< s(1877)*2+2
s(1900) =< s(1877)+2
s(1901) =< s(1877)+1
s(1902) =< s(1877)
s(1876) =< s(1877)*2+1
s(1903) =< s(1890)*s(1878)
s(1904) =< s(1896)*s(1875)
s(1899) =< s(1876)+1
s(1905) =< s(1890)*s(1902)
s(1906) =< s(1890)*s(1901)
s(1907) =< s(1890)*s(1900)
s(1908) =< s(1896)*s(1902)
s(1909) =< s(1896)*s(1901)
s(1910) =< s(1896)*s(1900)
s(1911) =< s(1896)*s(1876)
s(1912) =< s(1905)* (1/3)
s(1913) =< s(1906)* (1/2)
s(1914) =< s(1905)* (1/2)
s(1915) =< s(1890)*s(1899)
s(1916) =< s(1908)* (1/3)
s(1917) =< s(1909)* (1/2)
s(1918) =< s(1908)* (1/2)
s(1919) =< s(1896)*s(1899)
s(1920) =< s(1906)
s(1921) =< s(1898)
s(1922) =< s(1898)
s(1912) =< s(1898)
s(1923) =< s(1898)
s(1920) =< s(1898)
s(1912) =< s(1903)
s(1923) =< s(1903)
s(1920) =< s(1903)
s(1924) =< s(1903)
s(1925) =< s(1903)
s(1912) =< s(1915)
s(1923) =< s(1915)
s(1920) =< s(1915)
s(1924) =< s(1915)
s(1925) =< s(1915)
s(1921) =< s(1893)
s(1922) =< s(1893)
s(1912) =< s(1893)
s(1923) =< s(1893)
s(1920) =< s(1893)
s(1920) =< s(1905)
s(1926) =< s(1905)
s(1925) =< s(1905)
s(1927) =< s(1905)
s(1921) =< s(1906)
s(1922) =< s(1906)
s(1912) =< s(1906)
s(1923) =< s(1906)
s(1912) =< s(1907)
s(1920) =< s(1907)
s(1924) =< s(1907)
s(1924) =< s(1906)
s(1921) =< s(1905)
s(1922) =< s(1905)
s(1912) =< s(1905)
s(1923) =< s(1905)
s(1922) =< s(1913)
s(1912) =< s(1913)
s(1920) =< s(1913)
s(1922) =< s(1914)
s(1912) =< s(1914)
s(1920) =< s(1914)
s(1928) =< s(1902)+2
s(1929) =< s(1922)*s(1902)
s(1926) =< s(1912)*s(1901)
s(1920) =< s(1921)+s(1895)
s(1930) =< s(1923)*s(1928)
s(1920) =< s(1930)+s(1929)+s(1905)
s(1926) =< s(1930)+s(1929)+s(1905)
s(1931) =< s(1909)
s(1932) =< s(1892)
s(1933) =< s(1892)
s(1916) =< s(1892)
s(1934) =< s(1892)
s(1931) =< s(1892)
s(1916) =< s(1919)
s(1934) =< s(1919)
s(1931) =< s(1919)
s(1935) =< s(1919)
s(1936) =< s(1919)
s(1916) =< s(1911)
s(1934) =< s(1911)
s(1931) =< s(1911)
s(1935) =< s(1911)
s(1936) =< s(1911)
s(1932) =< s(1904)
s(1933) =< s(1904)
s(1916) =< s(1904)
s(1934) =< s(1904)
s(1931) =< s(1904)
s(1931) =< s(1908)
s(1937) =< s(1908)
s(1936) =< s(1908)
s(1938) =< s(1908)
s(1932) =< s(1909)
s(1933) =< s(1909)
s(1916) =< s(1909)
s(1934) =< s(1909)
s(1916) =< s(1910)
s(1931) =< s(1910)
s(1935) =< s(1910)
s(1916) =< s(1908)
s(1935) =< s(1908)
s(1932) =< s(1908)
s(1933) =< s(1908)
s(1934) =< s(1908)
s(1933) =< s(1917)
s(1916) =< s(1917)
s(1931) =< s(1917)
s(1933) =< s(1918)
s(1916) =< s(1918)
s(1931) =< s(1918)
s(1939) =< s(1933)*s(1877)
s(1937) =< s(1916)*s(1901)
s(1931) =< s(1932)+s(1894)
s(1940) =< s(1934)*s(1900)
s(1931) =< s(1940)+s(1939)+s(1908)
s(1937) =< s(1940)+s(1939)+s(1908)

Unbounded itvars
s(1941) :  eq(304,1),s(1667)

  with precondition: [A=1,E=1,I=1,M=1,B=J,B>=2,F>=1,G>=0,H>=0,K+2>=2*B,C+1>=B,D>=B,L>=B] 

 * Renamed intermediate variables: 
[ (eq(306,1),s(339))>>s(1942), (eq(306,1),s(340))>>s(1943), (eq(306,1),s(342))>>s(1944), (eq(306,1),aux(40))>>s(1945), (eq(306,1),aux(41))>>s(1946), (eq(306,1),aux(42))>>s(1947), (eq(306,1),aux(43))>>s(1948), (eq(306,1),aux(44))>>s(1949), (eq(306,1),s(328))>>s(1950), (eq(306,1),s(329))>>s(1951), (eq(306,1),s(330))>>s(1952), (eq(306,1),s(331))>>s(1953), (eq(306,1),s(332))>>s(1954), (eq(306,1),s(333))>>s(1955), (eq(306,1),s(334))>>s(1956), (eq(306,1),s(345))>>s(1957), (eq(306,1),s(346))>>s(1958), (eq(306,1),s(347))>>s(1959), (eq(306,1),s(348))>>s(1960), (eq(306,1),s(349))>>s(1961), (eq(306,1),s(350))>>s(1962), (eq(306,1),s(356))>>s(1963)]

#### Simplifying cost structure of CE 306 
 * Renamed intermediate variables: 
[ (eq(307,1),s(299))>>s(1964), (eq(307,1),s(301))>>s(1965), (eq(307,1),s(302))>>s(1966), (eq(307,1),s(300))>>s(1967)]
 * Renamed intermediate variables: 
[ (eq(307,2),aux(165))>>s(1968), (eq(307,2),aux(166))>>s(1969), (eq(307,2),aux(167))>>s(1970), (eq(307,2),aux(168))>>s(1971), (eq(307,2),aux(169))>>s(1972), (eq(307,2),aux(170))>>s(1973), (eq(307,2),aux(171))>>s(1974), (eq(307,2),aux(172))>>s(1975), (eq(307,2),aux(173))>>s(1976), (eq(307,2),aux(174))>>s(1977), (eq(307,2),aux(175))>>s(1978), (eq(307,2),aux(176))>>s(1979), (eq(307,2),aux(177))>>s(1980), (eq(307,2),aux(178))>>s(1981), (eq(307,2),aux(179))>>s(1982), (eq(307,2),aux(180))>>s(1983), (eq(307,2),s(1669))>>s(1984), (eq(307,2),s(1671))>>s(1985), (eq(307,2),s(1684))>>s(1986), (eq(307,2),s(1685))>>s(1987), (eq(307,2),s(1686))>>s(1988), (eq(307,2),s(1687))>>s(1989), (eq(307,2),s(1688))>>s(1990), (eq(307,2),s(1689))>>s(1991), (eq(307,2),s(1690))>>s(1992), (eq(307,2),s(1691))>>s(1993), (eq(307,2),s(1692))>>s(1994), (eq(307,2),s(1693))>>s(1995), (eq(307,2),s(1694))>>s(1996), (eq(307,2),s(1695))>>s(1997), (eq(307,2),s(1696))>>s(1998), (eq(307,2),s(1697))>>s(1999), (eq(307,2),s(1698))>>s(2000), (eq(307,2),s(1699))>>s(2001), (eq(307,2),s(1700))>>s(2002), (eq(307,2),s(1701))>>s(2003), (eq(307,2),s(1702))>>s(2004), (eq(307,2),s(1703))>>s(2005), (eq(307,2),s(1704))>>s(2006), (eq(307,2),s(1705))>>s(2007), (eq(307,2),s(1706))>>s(2008), (eq(307,2),s(1707))>>s(2009), (eq(307,2),s(1708))>>s(2010), (eq(307,2),s(1709))>>s(2011), (eq(307,2),s(1710))>>s(2012), (eq(307,2),s(1711))>>s(2013), (eq(307,2),s(1712))>>s(2014), (eq(307,2),s(1713))>>s(2015), (eq(307,2),s(1714))>>s(2016), (eq(307,2),s(1715))>>s(2017), (eq(307,2),s(1716))>>s(2018), (eq(307,2),s(1717))>>s(2019), (eq(307,2),s(1718))>>s(2020), (eq(307,2),s(1719))>>s(2021), (eq(307,2),s(1720))>>s(2022), (eq(307,2),s(1721))>>s(2023), (eq(307,2),s(1722))>>s(2024), (eq(307,2),s(1723))>>s(2025), (eq(307,2),s(1724))>>s(2026), (eq(307,2),s(1725))>>s(2027), (eq(307,2),s(1726))>>s(2028), (eq(307,2),s(1727))>>s(2029), (eq(307,2),s(1728))>>s(2030), (eq(307,2),s(1729))>>s(2031), (eq(307,2),s(1730))>>s(2032), (eq(307,2),s(1731))>>s(2033), (eq(307,2),s(1732))>>s(2034), (eq(307,2),s(1733))>>s(2035), (eq(307,2),s(1734))>>s(2036), (eq(307,2),s(1735))>>s(2037), (eq(307,2),s(1805))>>s(2038)]

#### Simplifying cost structure of CE 307 
 * Joined equivalent variables [aux(181),s(1968),s(1969),s(1972)] into aux(181)
 * Joined equivalent variables [aux(182),s(1964),s(1971),s(1974),s(1975)] into aux(182)
 * Joined equivalent variables [aux(183),s(1976),s(1977)] into aux(183)
 * Joined equivalent variables [aux(184),s(1978),s(1979)] into aux(184)
 * Joined equivalent variables [aux(185),s(1965),s(1981)] into aux(185)
 * Joined equivalent variables [s(1967),s(1986),s(1994)] into s(1967)
 * Joined equivalent variables [s(1989),s(1990)] into s(1989)
 * Renamed intermediate variables: 
[ (eq(316,1),s(315))>>s(2039), (eq(316,1),s(316))>>s(2040), (eq(316,1),s(317))>>s(2041), (eq(316,1),s(319))>>s(2042), (eq(316,1),s(320))>>s(2043), (eq(316,1),s(321))>>s(2044), (eq(316,1),s(322))>>s(2045), (eq(316,1),s(318))>>s(2046)]
 * Renamed intermediate variables: 
[ (eq(316,2),aux(165))>>s(2047), (eq(316,2),aux(166))>>s(2048), (eq(316,2),aux(167))>>s(2049), (eq(316,2),aux(168))>>s(2050), (eq(316,2),aux(169))>>s(2051), (eq(316,2),aux(170))>>s(2052), (eq(316,2),aux(171))>>s(2053), (eq(316,2),aux(172))>>s(2054), (eq(316,2),aux(173))>>s(2055), (eq(316,2),aux(174))>>s(2056), (eq(316,2),aux(175))>>s(2057), (eq(316,2),aux(176))>>s(2058), (eq(316,2),aux(177))>>s(2059), (eq(316,2),aux(178))>>s(2060), (eq(316,2),aux(179))>>s(2061), (eq(316,2),aux(180))>>s(2062), (eq(316,2),s(1669))>>s(2063), (eq(316,2),s(1671))>>s(2064), (eq(316,2),s(1684))>>s(2065), (eq(316,2),s(1685))>>s(2066), (eq(316,2),s(1686))>>s(2067), (eq(316,2),s(1687))>>s(2068), (eq(316,2),s(1688))>>s(2069), (eq(316,2),s(1689))>>s(2070), (eq(316,2),s(1690))>>s(2071), (eq(316,2),s(1691))>>s(2072), (eq(316,2),s(1692))>>s(2073), (eq(316,2),s(1693))>>s(2074), (eq(316,2),s(1694))>>s(2075), (eq(316,2),s(1695))>>s(2076), (eq(316,2),s(1696))>>s(2077), (eq(316,2),s(1697))>>s(2078), (eq(316,2),s(1698))>>s(2079), (eq(316,2),s(1699))>>s(2080), (eq(316,2),s(1700))>>s(2081), (eq(316,2),s(1701))>>s(2082), (eq(316,2),s(1702))>>s(2083), (eq(316,2),s(1703))>>s(2084), (eq(316,2),s(1704))>>s(2085), (eq(316,2),s(1705))>>s(2086), (eq(316,2),s(1706))>>s(2087), (eq(316,2),s(1707))>>s(2088), (eq(316,2),s(1708))>>s(2089), (eq(316,2),s(1709))>>s(2090), (eq(316,2),s(1710))>>s(2091), (eq(316,2),s(1711))>>s(2092), (eq(316,2),s(1712))>>s(2093), (eq(316,2),s(1713))>>s(2094), (eq(316,2),s(1714))>>s(2095), (eq(316,2),s(1715))>>s(2096), (eq(316,2),s(1716))>>s(2097), (eq(316,2),s(1717))>>s(2098), (eq(316,2),s(1718))>>s(2099), (eq(316,2),s(1719))>>s(2100), (eq(316,2),s(1720))>>s(2101), (eq(316,2),s(1721))>>s(2102), (eq(316,2),s(1722))>>s(2103), (eq(316,2),s(1723))>>s(2104), (eq(316,2),s(1724))>>s(2105), (eq(316,2),s(1725))>>s(2106), (eq(316,2),s(1726))>>s(2107), (eq(316,2),s(1727))>>s(2108), (eq(316,2),s(1728))>>s(2109), (eq(316,2),s(1729))>>s(2110), (eq(316,2),s(1730))>>s(2111), (eq(316,2),s(1731))>>s(2112), (eq(316,2),s(1732))>>s(2113), (eq(316,2),s(1733))>>s(2114), (eq(316,2),s(1734))>>s(2115), (eq(316,2),s(1735))>>s(2116), (eq(316,2),s(1805))>>s(2117)]

#### Simplifying cost structure of CE 316 
 * Joined equivalent variables [aux(186),s(2039),s(2050)] into aux(186)
 * Joined equivalent variables [aux(187),s(2053)] into aux(187)
 * Joined equivalent variables [aux(188),s(2055)] into aux(188)
 * Joined equivalent variables [aux(189),s(2059)] into aux(189)
 * Joined equivalent variables [aux(190),s(2042),s(2060)] into aux(190)
 * Joined equivalent variables [aux(191),s(2062)] into aux(191)
 * Joined equivalent variables [s(2046),s(2065)] into s(2046)
 * Joined equivalent variables [aux(192),aux(182),aux(186),s(1945)] into aux(192)
 * Joined equivalent variables [aux(193),aux(187),s(1946)] into aux(193)
 * Joined equivalent variables [aux(194),s(1947),s(2054)] into aux(194)
 * Joined equivalent variables [aux(195),aux(188),s(1948)] into aux(195)
 * Joined equivalent variables [aux(196),aux(190),s(1942)] into aux(196)
 * Joined equivalent variables [aux(197),aux(191),s(1943),s(1983)] into aux(197)
 * Joined equivalent variables [aux(198),aux(185),s(1949)] into aux(198)
 * Joined equivalent variables [aux(199),s(1944)] into aux(199)
 * Joined equivalent variables [s(2038),s(2117)] into s(2038)
 * Joined equivalent variables [s(1997),s(2076)] into s(1997)
 * Joined equivalent variables [s(1999),s(2078)] into s(1999)
 * Joined equivalent variables [s(1953),s(1967),s(2046)] into s(1953)
 * Joined equivalent variables [s(1951),s(2041)] into s(1951)
 * Joined equivalent variables [s(1950),s(2040)] into s(1950)
 * Joined equivalent variables [s(1959),s(2045)] into s(1959)
 * Joined equivalent variables [s(1958),s(2044)] into s(1958)
 * Joined equivalent variables [s(1957),s(2043)] into s(1957)
 * Joined equivalent variables [s(1952),s(1966)] into s(1952)
 * Renamed intermediate variables: 
[ (eq(310,1),s(303))>>s(2118), (eq(310,1),s(305))>>s(2119), (eq(310,1),s(306))>>s(2120), (eq(310,1),s(307))>>s(2121), (eq(310,1),s(308))>>s(2122), (eq(310,1),s(304))>>s(2123)]
 * Renamed intermediate variables: 
[ (eq(310,2),aux(165))>>s(2124), (eq(310,2),aux(166))>>s(2125), (eq(310,2),aux(167))>>s(2126), (eq(310,2),aux(168))>>s(2127), (eq(310,2),aux(169))>>s(2128), (eq(310,2),aux(170))>>s(2129), (eq(310,2),aux(171))>>s(2130), (eq(310,2),aux(172))>>s(2131), (eq(310,2),aux(173))>>s(2132), (eq(310,2),aux(174))>>s(2133), (eq(310,2),aux(175))>>s(2134), (eq(310,2),aux(176))>>s(2135), (eq(310,2),aux(177))>>s(2136), (eq(310,2),aux(178))>>s(2137), (eq(310,2),aux(179))>>s(2138), (eq(310,2),aux(180))>>s(2139), (eq(310,2),s(1669))>>s(2140), (eq(310,2),s(1671))>>s(2141), (eq(310,2),s(1684))>>s(2142), (eq(310,2),s(1685))>>s(2143), (eq(310,2),s(1686))>>s(2144), (eq(310,2),s(1687))>>s(2145), (eq(310,2),s(1688))>>s(2146), (eq(310,2),s(1689))>>s(2147), (eq(310,2),s(1690))>>s(2148), (eq(310,2),s(1691))>>s(2149), (eq(310,2),s(1692))>>s(2150), (eq(310,2),s(1693))>>s(2151), (eq(310,2),s(1694))>>s(2152), (eq(310,2),s(1695))>>s(2153), (eq(310,2),s(1696))>>s(2154), (eq(310,2),s(1697))>>s(2155), (eq(310,2),s(1698))>>s(2156), (eq(310,2),s(1699))>>s(2157), (eq(310,2),s(1700))>>s(2158), (eq(310,2),s(1701))>>s(2159), (eq(310,2),s(1702))>>s(2160), (eq(310,2),s(1703))>>s(2161), (eq(310,2),s(1704))>>s(2162), (eq(310,2),s(1705))>>s(2163), (eq(310,2),s(1706))>>s(2164), (eq(310,2),s(1707))>>s(2165), (eq(310,2),s(1708))>>s(2166), (eq(310,2),s(1709))>>s(2167), (eq(310,2),s(1710))>>s(2168), (eq(310,2),s(1711))>>s(2169), (eq(310,2),s(1712))>>s(2170), (eq(310,2),s(1713))>>s(2171), (eq(310,2),s(1714))>>s(2172), (eq(310,2),s(1715))>>s(2173), (eq(310,2),s(1716))>>s(2174), (eq(310,2),s(1717))>>s(2175), (eq(310,2),s(1718))>>s(2176), (eq(310,2),s(1719))>>s(2177), (eq(310,2),s(1720))>>s(2178), (eq(310,2),s(1721))>>s(2179), (eq(310,2),s(1722))>>s(2180), (eq(310,2),s(1723))>>s(2181), (eq(310,2),s(1724))>>s(2182), (eq(310,2),s(1725))>>s(2183), (eq(310,2),s(1726))>>s(2184), (eq(310,2),s(1727))>>s(2185), (eq(310,2),s(1728))>>s(2186), (eq(310,2),s(1729))>>s(2187), (eq(310,2),s(1730))>>s(2188), (eq(310,2),s(1731))>>s(2189), (eq(310,2),s(1732))>>s(2190), (eq(310,2),s(1733))>>s(2191), (eq(310,2),s(1734))>>s(2192), (eq(310,2),s(1735))>>s(2193), (eq(310,2),s(1805))>>s(2194)]

#### Simplifying cost structure of CE 310 
 * Joined equivalent variables [aux(200),s(2124),s(2125),s(2128)] into aux(200)
 * Joined equivalent variables [aux(201),s(2118),s(2127),s(2130),s(2131)] into aux(201)
 * Joined equivalent variables [aux(202),s(2132),s(2133)] into aux(202)
 * Joined equivalent variables [aux(203),s(2134),s(2135)] into aux(203)
 * Joined equivalent variables [aux(204),s(2119),s(2137)] into aux(204)
 * Joined equivalent variables [aux(205),s(2139)] into aux(205)
 * Joined equivalent variables [s(2123),s(2142),s(2150)] into s(2123)
 * Joined equivalent variables [s(2145),s(2146)] into s(2145)
 * Renamed intermediate variables: 
[ (eq(313,1),s(309))>>s(2195), (eq(313,1),s(310))>>s(2196), (eq(313,1),s(311))>>s(2197), (eq(313,1),s(313))>>s(2198), (eq(313,1),s(314))>>s(2199), (eq(313,1),s(312))>>s(2200)]
 * Renamed intermediate variables: 
[ (eq(313,2),aux(165))>>s(2201), (eq(313,2),aux(166))>>s(2202), (eq(313,2),aux(167))>>s(2203), (eq(313,2),aux(168))>>s(2204), (eq(313,2),aux(169))>>s(2205), (eq(313,2),aux(170))>>s(2206), (eq(313,2),aux(171))>>s(2207), (eq(313,2),aux(172))>>s(2208), (eq(313,2),aux(173))>>s(2209), (eq(313,2),aux(174))>>s(2210), (eq(313,2),aux(175))>>s(2211), (eq(313,2),aux(176))>>s(2212), (eq(313,2),aux(177))>>s(2213), (eq(313,2),aux(178))>>s(2214), (eq(313,2),aux(179))>>s(2215), (eq(313,2),aux(180))>>s(2216), (eq(313,2),s(1669))>>s(2217), (eq(313,2),s(1671))>>s(2218), (eq(313,2),s(1684))>>s(2219), (eq(313,2),s(1685))>>s(2220), (eq(313,2),s(1686))>>s(2221), (eq(313,2),s(1687))>>s(2222), (eq(313,2),s(1688))>>s(2223), (eq(313,2),s(1689))>>s(2224), (eq(313,2),s(1690))>>s(2225), (eq(313,2),s(1691))>>s(2226), (eq(313,2),s(1692))>>s(2227), (eq(313,2),s(1693))>>s(2228), (eq(313,2),s(1694))>>s(2229), (eq(313,2),s(1695))>>s(2230), (eq(313,2),s(1696))>>s(2231), (eq(313,2),s(1697))>>s(2232), (eq(313,2),s(1698))>>s(2233), (eq(313,2),s(1699))>>s(2234), (eq(313,2),s(1700))>>s(2235), (eq(313,2),s(1701))>>s(2236), (eq(313,2),s(1702))>>s(2237), (eq(313,2),s(1703))>>s(2238), (eq(313,2),s(1704))>>s(2239), (eq(313,2),s(1705))>>s(2240), (eq(313,2),s(1706))>>s(2241), (eq(313,2),s(1707))>>s(2242), (eq(313,2),s(1708))>>s(2243), (eq(313,2),s(1709))>>s(2244), (eq(313,2),s(1710))>>s(2245), (eq(313,2),s(1711))>>s(2246), (eq(313,2),s(1712))>>s(2247), (eq(313,2),s(1713))>>s(2248), (eq(313,2),s(1714))>>s(2249), (eq(313,2),s(1715))>>s(2250), (eq(313,2),s(1716))>>s(2251), (eq(313,2),s(1717))>>s(2252), (eq(313,2),s(1718))>>s(2253), (eq(313,2),s(1719))>>s(2254), (eq(313,2),s(1720))>>s(2255), (eq(313,2),s(1721))>>s(2256), (eq(313,2),s(1722))>>s(2257), (eq(313,2),s(1723))>>s(2258), (eq(313,2),s(1724))>>s(2259), (eq(313,2),s(1725))>>s(2260), (eq(313,2),s(1726))>>s(2261), (eq(313,2),s(1727))>>s(2262), (eq(313,2),s(1728))>>s(2263), (eq(313,2),s(1729))>>s(2264), (eq(313,2),s(1730))>>s(2265), (eq(313,2),s(1731))>>s(2266), (eq(313,2),s(1732))>>s(2267), (eq(313,2),s(1733))>>s(2268), (eq(313,2),s(1734))>>s(2269), (eq(313,2),s(1735))>>s(2270), (eq(313,2),s(1805))>>s(2271)]

#### Simplifying cost structure of CE 313 
 * Joined equivalent variables [aux(206),s(2195),s(2204)] into aux(206)
 * Joined equivalent variables [aux(207),s(2207)] into aux(207)
 * Joined equivalent variables [aux(208),s(2209)] into aux(208)
 * Joined equivalent variables [aux(209),s(2213)] into aux(209)
 * Joined equivalent variables [aux(210),s(2198),s(2214)] into aux(210)
 * Joined equivalent variables [s(2200),s(2219)] into s(2200)
 * Renamed intermediate variables: 
[ (eq(308,1),s(299))>>s(2272), (eq(308,1),s(301))>>s(2273), (eq(308,1),s(302))>>s(2274), (eq(308,1),s(300))>>s(2275)]
 * Renamed intermediate variables: 
[ (eq(308,2),s(1812))>>s(2276), (eq(308,2),s(1813))>>s(2277), (eq(308,2),s(1811))>>s(2278), (eq(308,2),s(1821))>>s(2279), (eq(308,2),s(1814))>>s(2280), (eq(308,2),s(1807))>>s(2281), (eq(308,2),s(1815))>>s(2282), (eq(308,2),s(1816))>>s(2283), (eq(308,2),s(1817))>>s(2284), (eq(308,2),s(1818))>>s(2285), (eq(308,2),s(1819))>>s(2286), (eq(308,2),s(1820))>>s(2287), (eq(308,2),s(1808))>>s(2288), (eq(308,2),s(1809))>>s(2289), (eq(308,2),s(1810))>>s(2290), (eq(308,2),s(1822))>>s(2291), (eq(308,2),s(1823))>>s(2292), (eq(308,2),s(1824))>>s(2293), (eq(308,2),s(1825))>>s(2294), (eq(308,2),s(1826))>>s(2295), (eq(308,2),s(1827))>>s(2296), (eq(308,2),s(1828))>>s(2297), (eq(308,2),s(1829))>>s(2298), (eq(308,2),s(1830))>>s(2299), (eq(308,2),s(1831))>>s(2300), (eq(308,2),s(1832))>>s(2301), (eq(308,2),s(1833))>>s(2302), (eq(308,2),s(1834))>>s(2303), (eq(308,2),s(1835))>>s(2304), (eq(308,2),s(1836))>>s(2305), (eq(308,2),s(1837))>>s(2306), (eq(308,2),s(1838))>>s(2307), (eq(308,2),s(1839))>>s(2308), (eq(308,2),s(1840))>>s(2309), (eq(308,2),s(1841))>>s(2310), (eq(308,2),s(1842))>>s(2311), (eq(308,2),s(1843))>>s(2312), (eq(308,2),s(1844))>>s(2313), (eq(308,2),s(1845))>>s(2314), (eq(308,2),s(1846))>>s(2315), (eq(308,2),s(1847))>>s(2316), (eq(308,2),s(1848))>>s(2317), (eq(308,2),s(1849))>>s(2318), (eq(308,2),s(1850))>>s(2319), (eq(308,2),s(1851))>>s(2320), (eq(308,2),s(1852))>>s(2321), (eq(308,2),s(1853))>>s(2322), (eq(308,2),s(1854))>>s(2323), (eq(308,2),s(1855))>>s(2324), (eq(308,2),s(1856))>>s(2325), (eq(308,2),s(1857))>>s(2326), (eq(308,2),s(1858))>>s(2327), (eq(308,2),s(1859))>>s(2328), (eq(308,2),s(1860))>>s(2329), (eq(308,2),s(1861))>>s(2330), (eq(308,2),s(1862))>>s(2331), (eq(308,2),s(1863))>>s(2332), (eq(308,2),s(1864))>>s(2333), (eq(308,2),s(1865))>>s(2334), (eq(308,2),s(1866))>>s(2335), (eq(308,2),s(1867))>>s(2336), (eq(308,2),s(1868))>>s(2337), (eq(308,2),s(1869))>>s(2338), (eq(308,2),s(1870))>>s(2339), (eq(308,2),s(1871))>>s(2340), (eq(308,2),s(1872))>>s(2341), (eq(308,2),s(1873))>>s(2342)]

#### Simplifying cost structure of CE 308 
 * Joined equivalent variables [aux(211),s(2276),s(2277),s(2280)] into aux(211)
 * Joined equivalent variables [aux(212),s(2272),s(2279),s(2283)] into aux(212)
 * Joined equivalent variables [aux(213),s(2273),s(2288)] into aux(213)
 * Joined equivalent variables [s(2275),s(2291)] into s(2275)
 * Joined equivalent variables [s(2294),s(2295)] into s(2294)
 * Renamed intermediate variables: 
[ (eq(309,1),s(299))>>s(2343), (eq(309,1),s(301))>>s(2344), (eq(309,1),s(302))>>s(2345), (eq(309,1),s(300))>>s(2346)]
 * Renamed intermediate variables: 
[ (eq(309,2),s(1879))>>s(2347), (eq(309,2),s(1880))>>s(2348), (eq(309,2),s(1878))>>s(2349), (eq(309,2),s(1888))>>s(2350), (eq(309,2),s(1874))>>s(2351), (eq(309,2),s(1881))>>s(2352), (eq(309,2),s(1882))>>s(2353), (eq(309,2),s(1883))>>s(2354), (eq(309,2),s(1884))>>s(2355), (eq(309,2),s(1885))>>s(2356), (eq(309,2),s(1886))>>s(2357), (eq(309,2),s(1887))>>s(2358), (eq(309,2),s(1875))>>s(2359), (eq(309,2),s(1876))>>s(2360), (eq(309,2),s(1877))>>s(2361), (eq(309,2),s(1889))>>s(2362), (eq(309,2),s(1890))>>s(2363), (eq(309,2),s(1891))>>s(2364), (eq(309,2),s(1892))>>s(2365), (eq(309,2),s(1893))>>s(2366), (eq(309,2),s(1894))>>s(2367), (eq(309,2),s(1895))>>s(2368), (eq(309,2),s(1896))>>s(2369), (eq(309,2),s(1897))>>s(2370), (eq(309,2),s(1898))>>s(2371), (eq(309,2),s(1899))>>s(2372), (eq(309,2),s(1900))>>s(2373), (eq(309,2),s(1901))>>s(2374), (eq(309,2),s(1902))>>s(2375), (eq(309,2),s(1903))>>s(2376), (eq(309,2),s(1904))>>s(2377), (eq(309,2),s(1905))>>s(2378), (eq(309,2),s(1906))>>s(2379), (eq(309,2),s(1907))>>s(2380), (eq(309,2),s(1908))>>s(2381), (eq(309,2),s(1909))>>s(2382), (eq(309,2),s(1910))>>s(2383), (eq(309,2),s(1911))>>s(2384), (eq(309,2),s(1912))>>s(2385), (eq(309,2),s(1913))>>s(2386), (eq(309,2),s(1914))>>s(2387), (eq(309,2),s(1915))>>s(2388), (eq(309,2),s(1916))>>s(2389), (eq(309,2),s(1917))>>s(2390), (eq(309,2),s(1918))>>s(2391), (eq(309,2),s(1919))>>s(2392), (eq(309,2),s(1920))>>s(2393), (eq(309,2),s(1921))>>s(2394), (eq(309,2),s(1922))>>s(2395), (eq(309,2),s(1923))>>s(2396), (eq(309,2),s(1924))>>s(2397), (eq(309,2),s(1925))>>s(2398), (eq(309,2),s(1926))>>s(2399), (eq(309,2),s(1927))>>s(2400), (eq(309,2),s(1928))>>s(2401), (eq(309,2),s(1929))>>s(2402), (eq(309,2),s(1930))>>s(2403), (eq(309,2),s(1931))>>s(2404), (eq(309,2),s(1932))>>s(2405), (eq(309,2),s(1933))>>s(2406), (eq(309,2),s(1934))>>s(2407), (eq(309,2),s(1935))>>s(2408), (eq(309,2),s(1936))>>s(2409), (eq(309,2),s(1937))>>s(2410), (eq(309,2),s(1938))>>s(2411), (eq(309,2),s(1939))>>s(2412), (eq(309,2),s(1940))>>s(2413), (eq(309,2),s(1941))>>s(2414)]

#### Simplifying cost structure of CE 309 
 * Joined equivalent variables [aux(214),s(2347),s(2348),s(2352)] into aux(214)
 * Joined equivalent variables [aux(215),s(2343),s(2350),s(2353),s(2354)] into aux(215)
 * Joined equivalent variables [aux(216),s(2355),s(2356)] into aux(216)
 * Joined equivalent variables [aux(217),s(2357),s(2358)] into aux(217)
 * Joined equivalent variables [aux(218),s(2344),s(2359)] into aux(218)
 * Joined equivalent variables [s(2346),s(2362),s(2370)] into s(2346)
 * Joined equivalent variables [s(2365),s(2366)] into s(2365)
 * Renamed intermediate variables: 
[ (eq(311,1),s(303))>>s(2415), (eq(311,1),s(305))>>s(2416), (eq(311,1),s(306))>>s(2417), (eq(311,1),s(307))>>s(2418), (eq(311,1),s(308))>>s(2419), (eq(311,1),s(304))>>s(2420)]
 * Renamed intermediate variables: 
[ (eq(311,2),s(1812))>>s(2421), (eq(311,2),s(1813))>>s(2422), (eq(311,2),s(1811))>>s(2423), (eq(311,2),s(1821))>>s(2424), (eq(311,2),s(1814))>>s(2425), (eq(311,2),s(1807))>>s(2426), (eq(311,2),s(1815))>>s(2427), (eq(311,2),s(1816))>>s(2428), (eq(311,2),s(1817))>>s(2429), (eq(311,2),s(1818))>>s(2430), (eq(311,2),s(1819))>>s(2431), (eq(311,2),s(1820))>>s(2432), (eq(311,2),s(1808))>>s(2433), (eq(311,2),s(1809))>>s(2434), (eq(311,2),s(1810))>>s(2435), (eq(311,2),s(1822))>>s(2436), (eq(311,2),s(1823))>>s(2437), (eq(311,2),s(1824))>>s(2438), (eq(311,2),s(1825))>>s(2439), (eq(311,2),s(1826))>>s(2440), (eq(311,2),s(1827))>>s(2441), (eq(311,2),s(1828))>>s(2442), (eq(311,2),s(1829))>>s(2443), (eq(311,2),s(1830))>>s(2444), (eq(311,2),s(1831))>>s(2445), (eq(311,2),s(1832))>>s(2446), (eq(311,2),s(1833))>>s(2447), (eq(311,2),s(1834))>>s(2448), (eq(311,2),s(1835))>>s(2449), (eq(311,2),s(1836))>>s(2450), (eq(311,2),s(1837))>>s(2451), (eq(311,2),s(1838))>>s(2452), (eq(311,2),s(1839))>>s(2453), (eq(311,2),s(1840))>>s(2454), (eq(311,2),s(1841))>>s(2455), (eq(311,2),s(1842))>>s(2456), (eq(311,2),s(1843))>>s(2457), (eq(311,2),s(1844))>>s(2458), (eq(311,2),s(1845))>>s(2459), (eq(311,2),s(1846))>>s(2460), (eq(311,2),s(1847))>>s(2461), (eq(311,2),s(1848))>>s(2462), (eq(311,2),s(1849))>>s(2463), (eq(311,2),s(1850))>>s(2464), (eq(311,2),s(1851))>>s(2465), (eq(311,2),s(1852))>>s(2466), (eq(311,2),s(1853))>>s(2467), (eq(311,2),s(1854))>>s(2468), (eq(311,2),s(1855))>>s(2469), (eq(311,2),s(1856))>>s(2470), (eq(311,2),s(1857))>>s(2471), (eq(311,2),s(1858))>>s(2472), (eq(311,2),s(1859))>>s(2473), (eq(311,2),s(1860))>>s(2474), (eq(311,2),s(1861))>>s(2475), (eq(311,2),s(1862))>>s(2476), (eq(311,2),s(1863))>>s(2477), (eq(311,2),s(1864))>>s(2478), (eq(311,2),s(1865))>>s(2479), (eq(311,2),s(1866))>>s(2480), (eq(311,2),s(1867))>>s(2481), (eq(311,2),s(1868))>>s(2482), (eq(311,2),s(1869))>>s(2483), (eq(311,2),s(1870))>>s(2484), (eq(311,2),s(1871))>>s(2485), (eq(311,2),s(1872))>>s(2486), (eq(311,2),s(1873))>>s(2487)]

#### Simplifying cost structure of CE 311 
 * Joined equivalent variables [aux(219),s(2421),s(2422),s(2425)] into aux(219)
 * Joined equivalent variables [aux(220),s(2415),s(2424),s(2428)] into aux(220)
 * Joined equivalent variables [aux(221),s(2416),s(2433)] into aux(221)
 * Joined equivalent variables [aux(222),s(2435)] into aux(222)
 * Joined equivalent variables [s(2420),s(2436)] into s(2420)
 * Joined equivalent variables [s(2439),s(2440)] into s(2439)
 * Renamed intermediate variables: 
[ (eq(312,1),s(303))>>s(2488), (eq(312,1),s(305))>>s(2489), (eq(312,1),s(306))>>s(2490), (eq(312,1),s(307))>>s(2491), (eq(312,1),s(308))>>s(2492), (eq(312,1),s(304))>>s(2493)]
 * Renamed intermediate variables: 
[ (eq(312,2),s(1879))>>s(2494), (eq(312,2),s(1880))>>s(2495), (eq(312,2),s(1878))>>s(2496), (eq(312,2),s(1888))>>s(2497), (eq(312,2),s(1874))>>s(2498), (eq(312,2),s(1881))>>s(2499), (eq(312,2),s(1882))>>s(2500), (eq(312,2),s(1883))>>s(2501), (eq(312,2),s(1884))>>s(2502), (eq(312,2),s(1885))>>s(2503), (eq(312,2),s(1886))>>s(2504), (eq(312,2),s(1887))>>s(2505), (eq(312,2),s(1875))>>s(2506), (eq(312,2),s(1876))>>s(2507), (eq(312,2),s(1877))>>s(2508), (eq(312,2),s(1889))>>s(2509), (eq(312,2),s(1890))>>s(2510), (eq(312,2),s(1891))>>s(2511), (eq(312,2),s(1892))>>s(2512), (eq(312,2),s(1893))>>s(2513), (eq(312,2),s(1894))>>s(2514), (eq(312,2),s(1895))>>s(2515), (eq(312,2),s(1896))>>s(2516), (eq(312,2),s(1897))>>s(2517), (eq(312,2),s(1898))>>s(2518), (eq(312,2),s(1899))>>s(2519), (eq(312,2),s(1900))>>s(2520), (eq(312,2),s(1901))>>s(2521), (eq(312,2),s(1902))>>s(2522), (eq(312,2),s(1903))>>s(2523), (eq(312,2),s(1904))>>s(2524), (eq(312,2),s(1905))>>s(2525), (eq(312,2),s(1906))>>s(2526), (eq(312,2),s(1907))>>s(2527), (eq(312,2),s(1908))>>s(2528), (eq(312,2),s(1909))>>s(2529), (eq(312,2),s(1910))>>s(2530), (eq(312,2),s(1911))>>s(2531), (eq(312,2),s(1912))>>s(2532), (eq(312,2),s(1913))>>s(2533), (eq(312,2),s(1914))>>s(2534), (eq(312,2),s(1915))>>s(2535), (eq(312,2),s(1916))>>s(2536), (eq(312,2),s(1917))>>s(2537), (eq(312,2),s(1918))>>s(2538), (eq(312,2),s(1919))>>s(2539), (eq(312,2),s(1920))>>s(2540), (eq(312,2),s(1921))>>s(2541), (eq(312,2),s(1922))>>s(2542), (eq(312,2),s(1923))>>s(2543), (eq(312,2),s(1924))>>s(2544), (eq(312,2),s(1925))>>s(2545), (eq(312,2),s(1926))>>s(2546), (eq(312,2),s(1927))>>s(2547), (eq(312,2),s(1928))>>s(2548), (eq(312,2),s(1929))>>s(2549), (eq(312,2),s(1930))>>s(2550), (eq(312,2),s(1931))>>s(2551), (eq(312,2),s(1932))>>s(2552), (eq(312,2),s(1933))>>s(2553), (eq(312,2),s(1934))>>s(2554), (eq(312,2),s(1935))>>s(2555), (eq(312,2),s(1936))>>s(2556), (eq(312,2),s(1937))>>s(2557), (eq(312,2),s(1938))>>s(2558), (eq(312,2),s(1939))>>s(2559), (eq(312,2),s(1940))>>s(2560), (eq(312,2),s(1941))>>s(2561)]

#### Simplifying cost structure of CE 312 
 * Joined equivalent variables [aux(223),s(2494),s(2495),s(2499)] into aux(223)
 * Joined equivalent variables [aux(224),s(2488),s(2497),s(2500),s(2501)] into aux(224)
 * Joined equivalent variables [aux(225),s(2502),s(2503)] into aux(225)
 * Joined equivalent variables [aux(226),s(2504),s(2505)] into aux(226)
 * Joined equivalent variables [aux(227),s(2489),s(2506)] into aux(227)
 * Joined equivalent variables [aux(228),s(2508)] into aux(228)
 * Joined equivalent variables [s(2493),s(2509),s(2517)] into s(2493)
 * Joined equivalent variables [s(2512),s(2513)] into s(2512)
 * Renamed intermediate variables: 
[ (eq(314,1),s(309))>>s(2562), (eq(314,1),s(310))>>s(2563), (eq(314,1),s(311))>>s(2564), (eq(314,1),s(313))>>s(2565), (eq(314,1),s(314))>>s(2566), (eq(314,1),s(312))>>s(2567)]
 * Renamed intermediate variables: 
[ (eq(314,2),s(1812))>>s(2568), (eq(314,2),s(1813))>>s(2569), (eq(314,2),s(1811))>>s(2570), (eq(314,2),s(1821))>>s(2571), (eq(314,2),s(1814))>>s(2572), (eq(314,2),s(1807))>>s(2573), (eq(314,2),s(1815))>>s(2574), (eq(314,2),s(1816))>>s(2575), (eq(314,2),s(1817))>>s(2576), (eq(314,2),s(1818))>>s(2577), (eq(314,2),s(1819))>>s(2578), (eq(314,2),s(1820))>>s(2579), (eq(314,2),s(1808))>>s(2580), (eq(314,2),s(1809))>>s(2581), (eq(314,2),s(1810))>>s(2582), (eq(314,2),s(1822))>>s(2583), (eq(314,2),s(1823))>>s(2584), (eq(314,2),s(1824))>>s(2585), (eq(314,2),s(1825))>>s(2586), (eq(314,2),s(1826))>>s(2587), (eq(314,2),s(1827))>>s(2588), (eq(314,2),s(1828))>>s(2589), (eq(314,2),s(1829))>>s(2590), (eq(314,2),s(1830))>>s(2591), (eq(314,2),s(1831))>>s(2592), (eq(314,2),s(1832))>>s(2593), (eq(314,2),s(1833))>>s(2594), (eq(314,2),s(1834))>>s(2595), (eq(314,2),s(1835))>>s(2596), (eq(314,2),s(1836))>>s(2597), (eq(314,2),s(1837))>>s(2598), (eq(314,2),s(1838))>>s(2599), (eq(314,2),s(1839))>>s(2600), (eq(314,2),s(1840))>>s(2601), (eq(314,2),s(1841))>>s(2602), (eq(314,2),s(1842))>>s(2603), (eq(314,2),s(1843))>>s(2604), (eq(314,2),s(1844))>>s(2605), (eq(314,2),s(1845))>>s(2606), (eq(314,2),s(1846))>>s(2607), (eq(314,2),s(1847))>>s(2608), (eq(314,2),s(1848))>>s(2609), (eq(314,2),s(1849))>>s(2610), (eq(314,2),s(1850))>>s(2611), (eq(314,2),s(1851))>>s(2612), (eq(314,2),s(1852))>>s(2613), (eq(314,2),s(1853))>>s(2614), (eq(314,2),s(1854))>>s(2615), (eq(314,2),s(1855))>>s(2616), (eq(314,2),s(1856))>>s(2617), (eq(314,2),s(1857))>>s(2618), (eq(314,2),s(1858))>>s(2619), (eq(314,2),s(1859))>>s(2620), (eq(314,2),s(1860))>>s(2621), (eq(314,2),s(1861))>>s(2622), (eq(314,2),s(1862))>>s(2623), (eq(314,2),s(1863))>>s(2624), (eq(314,2),s(1864))>>s(2625), (eq(314,2),s(1865))>>s(2626), (eq(314,2),s(1866))>>s(2627), (eq(314,2),s(1867))>>s(2628), (eq(314,2),s(1868))>>s(2629), (eq(314,2),s(1869))>>s(2630), (eq(314,2),s(1870))>>s(2631), (eq(314,2),s(1871))>>s(2632), (eq(314,2),s(1872))>>s(2633), (eq(314,2),s(1873))>>s(2634)]

#### Simplifying cost structure of CE 314 
 * Joined equivalent variables [aux(229),s(2562),s(2571)] into aux(229)
 * Joined equivalent variables [aux(230),s(2574)] into aux(230)
 * Joined equivalent variables [aux(231),s(2576)] into aux(231)
 * Joined equivalent variables [aux(232),s(2565),s(2580)] into aux(232)
 * Joined equivalent variables [s(2567),s(2583)] into s(2567)
 * Renamed intermediate variables: 
[ (eq(315,1),s(309))>>s(2635), (eq(315,1),s(310))>>s(2636), (eq(315,1),s(311))>>s(2637), (eq(315,1),s(313))>>s(2638), (eq(315,1),s(314))>>s(2639), (eq(315,1),s(312))>>s(2640)]
 * Renamed intermediate variables: 
[ (eq(315,2),s(1879))>>s(2641), (eq(315,2),s(1880))>>s(2642), (eq(315,2),s(1878))>>s(2643), (eq(315,2),s(1888))>>s(2644), (eq(315,2),s(1874))>>s(2645), (eq(315,2),s(1881))>>s(2646), (eq(315,2),s(1882))>>s(2647), (eq(315,2),s(1883))>>s(2648), (eq(315,2),s(1884))>>s(2649), (eq(315,2),s(1885))>>s(2650), (eq(315,2),s(1886))>>s(2651), (eq(315,2),s(1887))>>s(2652), (eq(315,2),s(1875))>>s(2653), (eq(315,2),s(1876))>>s(2654), (eq(315,2),s(1877))>>s(2655), (eq(315,2),s(1889))>>s(2656), (eq(315,2),s(1890))>>s(2657), (eq(315,2),s(1891))>>s(2658), (eq(315,2),s(1892))>>s(2659), (eq(315,2),s(1893))>>s(2660), (eq(315,2),s(1894))>>s(2661), (eq(315,2),s(1895))>>s(2662), (eq(315,2),s(1896))>>s(2663), (eq(315,2),s(1897))>>s(2664), (eq(315,2),s(1898))>>s(2665), (eq(315,2),s(1899))>>s(2666), (eq(315,2),s(1900))>>s(2667), (eq(315,2),s(1901))>>s(2668), (eq(315,2),s(1902))>>s(2669), (eq(315,2),s(1903))>>s(2670), (eq(315,2),s(1904))>>s(2671), (eq(315,2),s(1905))>>s(2672), (eq(315,2),s(1906))>>s(2673), (eq(315,2),s(1907))>>s(2674), (eq(315,2),s(1908))>>s(2675), (eq(315,2),s(1909))>>s(2676), (eq(315,2),s(1910))>>s(2677), (eq(315,2),s(1911))>>s(2678), (eq(315,2),s(1912))>>s(2679), (eq(315,2),s(1913))>>s(2680), (eq(315,2),s(1914))>>s(2681), (eq(315,2),s(1915))>>s(2682), (eq(315,2),s(1916))>>s(2683), (eq(315,2),s(1917))>>s(2684), (eq(315,2),s(1918))>>s(2685), (eq(315,2),s(1919))>>s(2686), (eq(315,2),s(1920))>>s(2687), (eq(315,2),s(1921))>>s(2688), (eq(315,2),s(1922))>>s(2689), (eq(315,2),s(1923))>>s(2690), (eq(315,2),s(1924))>>s(2691), (eq(315,2),s(1925))>>s(2692), (eq(315,2),s(1926))>>s(2693), (eq(315,2),s(1927))>>s(2694), (eq(315,2),s(1928))>>s(2695), (eq(315,2),s(1929))>>s(2696), (eq(315,2),s(1930))>>s(2697), (eq(315,2),s(1931))>>s(2698), (eq(315,2),s(1932))>>s(2699), (eq(315,2),s(1933))>>s(2700), (eq(315,2),s(1934))>>s(2701), (eq(315,2),s(1935))>>s(2702), (eq(315,2),s(1936))>>s(2703), (eq(315,2),s(1937))>>s(2704), (eq(315,2),s(1938))>>s(2705), (eq(315,2),s(1939))>>s(2706), (eq(315,2),s(1940))>>s(2707), (eq(315,2),s(1941))>>s(2708)]

#### Simplifying cost structure of CE 315 
 * Joined equivalent variables [aux(233),s(2635),s(2644)] into aux(233)
 * Joined equivalent variables [aux(234),s(2647)] into aux(234)
 * Joined equivalent variables [aux(235),s(2649)] into aux(235)
 * Joined equivalent variables [aux(236),s(2638),s(2653)] into aux(236)
 * Joined equivalent variables [s(2640),s(2656)] into s(2640)
 * Renamed intermediate variables: 
[ (eq(317,1),s(315))>>s(2709), (eq(317,1),s(316))>>s(2710), (eq(317,1),s(317))>>s(2711), (eq(317,1),s(319))>>s(2712), (eq(317,1),s(320))>>s(2713), (eq(317,1),s(321))>>s(2714), (eq(317,1),s(322))>>s(2715), (eq(317,1),s(318))>>s(2716)]
 * Renamed intermediate variables: 
[ (eq(317,2),s(1812))>>s(2717), (eq(317,2),s(1813))>>s(2718), (eq(317,2),s(1811))>>s(2719), (eq(317,2),s(1821))>>s(2720), (eq(317,2),s(1814))>>s(2721), (eq(317,2),s(1807))>>s(2722), (eq(317,2),s(1815))>>s(2723), (eq(317,2),s(1816))>>s(2724), (eq(317,2),s(1817))>>s(2725), (eq(317,2),s(1818))>>s(2726), (eq(317,2),s(1819))>>s(2727), (eq(317,2),s(1820))>>s(2728), (eq(317,2),s(1808))>>s(2729), (eq(317,2),s(1809))>>s(2730), (eq(317,2),s(1810))>>s(2731), (eq(317,2),s(1822))>>s(2732), (eq(317,2),s(1823))>>s(2733), (eq(317,2),s(1824))>>s(2734), (eq(317,2),s(1825))>>s(2735), (eq(317,2),s(1826))>>s(2736), (eq(317,2),s(1827))>>s(2737), (eq(317,2),s(1828))>>s(2738), (eq(317,2),s(1829))>>s(2739), (eq(317,2),s(1830))>>s(2740), (eq(317,2),s(1831))>>s(2741), (eq(317,2),s(1832))>>s(2742), (eq(317,2),s(1833))>>s(2743), (eq(317,2),s(1834))>>s(2744), (eq(317,2),s(1835))>>s(2745), (eq(317,2),s(1836))>>s(2746), (eq(317,2),s(1837))>>s(2747), (eq(317,2),s(1838))>>s(2748), (eq(317,2),s(1839))>>s(2749), (eq(317,2),s(1840))>>s(2750), (eq(317,2),s(1841))>>s(2751), (eq(317,2),s(1842))>>s(2752), (eq(317,2),s(1843))>>s(2753), (eq(317,2),s(1844))>>s(2754), (eq(317,2),s(1845))>>s(2755), (eq(317,2),s(1846))>>s(2756), (eq(317,2),s(1847))>>s(2757), (eq(317,2),s(1848))>>s(2758), (eq(317,2),s(1849))>>s(2759), (eq(317,2),s(1850))>>s(2760), (eq(317,2),s(1851))>>s(2761), (eq(317,2),s(1852))>>s(2762), (eq(317,2),s(1853))>>s(2763), (eq(317,2),s(1854))>>s(2764), (eq(317,2),s(1855))>>s(2765), (eq(317,2),s(1856))>>s(2766), (eq(317,2),s(1857))>>s(2767), (eq(317,2),s(1858))>>s(2768), (eq(317,2),s(1859))>>s(2769), (eq(317,2),s(1860))>>s(2770), (eq(317,2),s(1861))>>s(2771), (eq(317,2),s(1862))>>s(2772), (eq(317,2),s(1863))>>s(2773), (eq(317,2),s(1864))>>s(2774), (eq(317,2),s(1865))>>s(2775), (eq(317,2),s(1866))>>s(2776), (eq(317,2),s(1867))>>s(2777), (eq(317,2),s(1868))>>s(2778), (eq(317,2),s(1869))>>s(2779), (eq(317,2),s(1870))>>s(2780), (eq(317,2),s(1871))>>s(2781), (eq(317,2),s(1872))>>s(2782), (eq(317,2),s(1873))>>s(2783)]

#### Simplifying cost structure of CE 317 
 * Joined equivalent variables [aux(237),s(2709),s(2720)] into aux(237)
 * Joined equivalent variables [aux(238),s(2723)] into aux(238)
 * Joined equivalent variables [aux(239),s(2725)] into aux(239)
 * Joined equivalent variables [aux(240),s(2712),s(2729)] into aux(240)
 * Joined equivalent variables [aux(241),s(2731)] into aux(241)
 * Joined equivalent variables [s(2716),s(2732)] into s(2716)
 * Renamed intermediate variables: 
[ (eq(318,1),s(315))>>s(2784), (eq(318,1),s(316))>>s(2785), (eq(318,1),s(317))>>s(2786), (eq(318,1),s(319))>>s(2787), (eq(318,1),s(320))>>s(2788), (eq(318,1),s(321))>>s(2789), (eq(318,1),s(322))>>s(2790), (eq(318,1),s(318))>>s(2791)]
 * Renamed intermediate variables: 
[ (eq(318,2),s(1879))>>s(2792), (eq(318,2),s(1880))>>s(2793), (eq(318,2),s(1878))>>s(2794), (eq(318,2),s(1888))>>s(2795), (eq(318,2),s(1874))>>s(2796), (eq(318,2),s(1881))>>s(2797), (eq(318,2),s(1882))>>s(2798), (eq(318,2),s(1883))>>s(2799), (eq(318,2),s(1884))>>s(2800), (eq(318,2),s(1885))>>s(2801), (eq(318,2),s(1886))>>s(2802), (eq(318,2),s(1887))>>s(2803), (eq(318,2),s(1875))>>s(2804), (eq(318,2),s(1876))>>s(2805), (eq(318,2),s(1877))>>s(2806), (eq(318,2),s(1889))>>s(2807), (eq(318,2),s(1890))>>s(2808), (eq(318,2),s(1891))>>s(2809), (eq(318,2),s(1892))>>s(2810), (eq(318,2),s(1893))>>s(2811), (eq(318,2),s(1894))>>s(2812), (eq(318,2),s(1895))>>s(2813), (eq(318,2),s(1896))>>s(2814), (eq(318,2),s(1897))>>s(2815), (eq(318,2),s(1898))>>s(2816), (eq(318,2),s(1899))>>s(2817), (eq(318,2),s(1900))>>s(2818), (eq(318,2),s(1901))>>s(2819), (eq(318,2),s(1902))>>s(2820), (eq(318,2),s(1903))>>s(2821), (eq(318,2),s(1904))>>s(2822), (eq(318,2),s(1905))>>s(2823), (eq(318,2),s(1906))>>s(2824), (eq(318,2),s(1907))>>s(2825), (eq(318,2),s(1908))>>s(2826), (eq(318,2),s(1909))>>s(2827), (eq(318,2),s(1910))>>s(2828), (eq(318,2),s(1911))>>s(2829), (eq(318,2),s(1912))>>s(2830), (eq(318,2),s(1913))>>s(2831), (eq(318,2),s(1914))>>s(2832), (eq(318,2),s(1915))>>s(2833), (eq(318,2),s(1916))>>s(2834), (eq(318,2),s(1917))>>s(2835), (eq(318,2),s(1918))>>s(2836), (eq(318,2),s(1919))>>s(2837), (eq(318,2),s(1920))>>s(2838), (eq(318,2),s(1921))>>s(2839), (eq(318,2),s(1922))>>s(2840), (eq(318,2),s(1923))>>s(2841), (eq(318,2),s(1924))>>s(2842), (eq(318,2),s(1925))>>s(2843), (eq(318,2),s(1926))>>s(2844), (eq(318,2),s(1927))>>s(2845), (eq(318,2),s(1928))>>s(2846), (eq(318,2),s(1929))>>s(2847), (eq(318,2),s(1930))>>s(2848), (eq(318,2),s(1931))>>s(2849), (eq(318,2),s(1932))>>s(2850), (eq(318,2),s(1933))>>s(2851), (eq(318,2),s(1934))>>s(2852), (eq(318,2),s(1935))>>s(2853), (eq(318,2),s(1936))>>s(2854), (eq(318,2),s(1937))>>s(2855), (eq(318,2),s(1938))>>s(2856), (eq(318,2),s(1939))>>s(2857), (eq(318,2),s(1940))>>s(2858), (eq(318,2),s(1941))>>s(2859)]

#### Simplifying cost structure of CE 318 
 * Joined equivalent variables [aux(242),s(2784),s(2795)] into aux(242)
 * Joined equivalent variables [aux(243),s(2798)] into aux(243)
 * Joined equivalent variables [aux(244),s(2800)] into aux(244)
 * Joined equivalent variables [aux(245),s(2787),s(2804)] into aux(245)
 * Joined equivalent variables [aux(246),s(2806)] into aux(246)
 * Joined equivalent variables [s(2791),s(2807)] into s(2791)
 * Renamed intermediate variables: 
[ (ch([215]),s(2138))>>s(2860), (ch([215]),s(2121))>>s(2861), (ch([215]),aux(201))>>s(2862), (ch([215]),aux(202))>>s(2863), (ch([215]),aux(204))>>s(2864), (ch([215]),aux(205))>>s(2865), (ch([215]),s(2120))>>s(2866), (ch([215]),s(2141))>>s(2867), (ch([215]),s(2123))>>s(2868), (ch([215]),s(2149))>>s(2869), (ch([215]),s(2152))>>s(2870), (ch([215]),s(2153))>>s(2871), (ch([215]),s(2155))>>s(2872), (ch([215]),s(2161))>>s(2873), (ch([215]),s(2163))>>s(2874), (ch([215]),s(2164))>>s(2875), (ch([215]),s(2172))>>s(2876), (ch([215]),s(2188))>>s(2877), (ch([215]),s(2189))>>s(2878), (ch([215]),s(2191))>>s(2879), (ch([215]),s(2122))>>s(2880), (ch([215]),s(2194))>>s(2881)]
 * Renamed intermediate variables: 
[ (ch([216]),s(2047))>>s(2882), (ch([216]),s(2048))>>s(2883), (ch([216]),s(2049))>>s(2884), (ch([216]),s(2051))>>s(2885), (ch([216]),s(2052))>>s(2886), (ch([216]),aux(183))>>s(2887), (ch([216]),s(2056))>>s(2888), (ch([216]),s(2057))>>s(2889), (ch([216]),s(2058))>>s(2890), (ch([216]),aux(189))>>s(2891), (ch([216]),s(2061))>>s(2892), (ch([216]),s(1982))>>s(2893), (ch([216]),aux(192))>>s(2894), (ch([216]),aux(193))>>s(2895), (ch([216]),aux(194))>>s(2896), (ch([216]),aux(195))>>s(2897), (ch([216]),aux(196))>>s(2898), (ch([216]),aux(197))>>s(2899), (ch([216]),aux(198))>>s(2900), (ch([216]),aux(199))>>s(2901), (ch([216]),s(1958))>>s(2902), (ch([216]),s(1950))>>s(2903), (ch([216]),s(1951))>>s(2904), (ch([216]),s(1957))>>s(2905), (ch([216]),s(2063))>>s(2906), (ch([216]),s(2064))>>s(2907), (ch([216]),s(1953))>>s(2908), (ch([216]),s(2066))>>s(2909), (ch([216]),s(2067))>>s(2910), (ch([216]),s(2068))>>s(2911), (ch([216]),s(2069))>>s(2912), (ch([216]),s(2070))>>s(2913), (ch([216]),s(2071))>>s(2914), (ch([216]),s(2072))>>s(2915), (ch([216]),s(2073))>>s(2916), (ch([216]),s(2074))>>s(2917), (ch([216]),s(2075))>>s(2918), (ch([216]),s(1997))>>s(2919), (ch([216]),s(2077))>>s(2920), (ch([216]),s(1999))>>s(2921), (ch([216]),s(2079))>>s(2922), (ch([216]),s(2080))>>s(2923), (ch([216]),s(2081))>>s(2924), (ch([216]),s(2082))>>s(2925), (ch([216]),s(2083))>>s(2926), (ch([216]),s(2084))>>s(2927), (ch([216]),s(2085))>>s(2928), (ch([216]),s(2086))>>s(2929), (ch([216]),s(2087))>>s(2930), (ch([216]),s(2088))>>s(2931), (ch([216]),s(2089))>>s(2932), (ch([216]),s(2090))>>s(2933), (ch([216]),s(2091))>>s(2934), (ch([216]),s(2092))>>s(2935), (ch([216]),s(2093))>>s(2936), (ch([216]),s(2094))>>s(2937), (ch([216]),s(2095))>>s(2938), (ch([216]),s(2096))>>s(2939), (ch([216]),s(2097))>>s(2940), (ch([216]),s(2098))>>s(2941), (ch([216]),s(2099))>>s(2942), (ch([216]),s(2100))>>s(2943), (ch([216]),s(2101))>>s(2944), (ch([216]),s(2102))>>s(2945), (ch([216]),s(2103))>>s(2946), (ch([216]),s(2104))>>s(2947), (ch([216]),s(2105))>>s(2948), (ch([216]),s(2106))>>s(2949), (ch([216]),s(2107))>>s(2950), (ch([216]),s(2108))>>s(2951), (ch([216]),s(2109))>>s(2952), (ch([216]),s(2110))>>s(2953), (ch([216]),s(2111))>>s(2954), (ch([216]),s(2112))>>s(2955), (ch([216]),s(2113))>>s(2956), (ch([216]),s(2114))>>s(2957), (ch([216]),s(2115))>>s(2958), (ch([216]),s(2116))>>s(2959), (ch([216]),s(1959))>>s(2960), (ch([216]),s(1952))>>s(2961), (ch([216]),s(1954))>>s(2962), (ch([216]),s(1955))>>s(2963), (ch([216]),s(1956))>>s(2964), (ch([216]),s(1960))>>s(2965), (ch([216]),s(1961))>>s(2966), (ch([216]),s(1962))>>s(2967), (ch([216]),s(1963))>>s(2968), (ch([216]),s(1985))>>s(2969), (ch([216]),s(1993))>>s(2970), (ch([216]),s(1996))>>s(2971), (ch([216]),s(2005))>>s(2972), (ch([216]),s(2007))>>s(2973), (ch([216]),s(2008))>>s(2974), (ch([216]),s(2016))>>s(2975), (ch([216]),s(2032))>>s(2976), (ch([216]),s(2033))>>s(2977), (ch([216]),s(2035))>>s(2978), (ch([216]),s(2038))>>s(2979)]
 * Joined equivalent variables [aux(247),s(2862),s(2894)] into aux(247)
 * Joined equivalent variables [aux(248),s(2863),s(2887)] into aux(248)
 * Joined equivalent variables [aux(249),s(2864),s(2898)] into aux(249)
 * Joined equivalent variables [aux(250),s(2860),s(2892)] into aux(250)
 * Joined equivalent variables [aux(251),s(2865),s(2899)] into aux(251)
 * Joined equivalent variables [aux(252),s(2901)] into aux(252)
 * Joined equivalent variables [s(2881),s(2979)] into s(2881)
 * Joined equivalent variables [s(2871),s(2919)] into s(2871)
 * Joined equivalent variables [s(2872),s(2921)] into s(2872)
 * Joined equivalent variables [s(2867),s(2907)] into s(2867)
 * Joined equivalent variables [s(2868),s(2908)] into s(2868)
 * Joined equivalent variables [s(2869),s(2970)] into s(2869)
 * Joined equivalent variables [s(2880),s(2960)] into s(2880)
 * Joined equivalent variables [s(2861),s(2902)] into s(2861)
 * Joined equivalent variables [s(2866),s(2905)] into s(2866)
 * Joined equivalent variables [s(2870),s(2918)] into s(2870)
 * Joined equivalent variables [s(2873),s(2972)] into s(2873)
 * Joined equivalent variables [s(2874),s(2973)] into s(2874)
 * Joined equivalent variables [s(2879),s(2978)] into s(2879)

#### Cost of chains of mult(A,B,C,D,E,F,G,H,I,J,K,L):
* Chain [216]: 210*s(1950)+80*s(1951)+128*s(1952)+286*s(1953)+90*s(1954)+90*s(1955)+54*s(1956)+210*s(1957)+80*s(1958)+156*s(1959)+90*s(1960)+90*s(1961)+54*s(1962)+80*s(1963)+18*s(1993)+20*s(2032)+20*s(2033)+18*s(2035)+48*s(2038)+26*s(2066)+26*s(2067)+18*s(2072)+18*s(2073)+22*s(2088)+22*s(2092)+22*s(2096)+22*s(2098)+22*s(2099)+20*s(2100)+20*s(2101)+18*s(2102)+18*s(2103)+22*s(2107)+22*s(2109)+22*s(2110)+20*s(2111)+20*s(2112)+18*s(2113)+18*s(2114)+74
  Such that:s(2047) =< -2*A+2*B+2
s(2048) =< -A+B+1
s(2049) =< -A+B+F+3
s(2051) =< -3/2*A+3/2*B+3/2
s(2052) =< -3/2*A+3/2*B-E/2+5/2
aux(183) =< A/2
s(2056) =< B/2+1/2
s(2057) =< B/3
s(2058) =< B/3+1/3
aux(189) =< 3/2*B-E/2
s(2061) =< E+F
s(1982) =< 2*F+1
aux(192) =< A
aux(193) =< B
aux(194) =< B+1
aux(195) =< B/2
aux(196) =< E
aux(197) =< F
aux(198) =< F+1
aux(199) =< F/2
s(1958) =< aux(199)
s(1950) =< aux(193)
s(1951) =< aux(195)
s(2052) =< aux(189)
s(1957) =< aux(197)
s(2063) =< s(2052)
s(2063) =< aux(189)
s(2064) =< s(2061)
s(1953) =< aux(192)
s(2066) =< s(2047)
s(2067) =< s(2047)
s(2068) =< s(2047)
s(2067) =< s(2048)
s(2069) =< s(2048)
s(2070) =< aux(192)
s(2071) =< aux(192)
s(2072) =< aux(192)
s(2066) =< aux(192)
s(2073) =< aux(192)
s(2067) =< aux(192)
s(2067) =< s(2051)
s(2074) =< s(2051)
s(2067) =< s(2063)
s(2074) =< s(2063)
s(2066) =< aux(193)
s(2073) =< aux(193)
s(2067) =< aux(193)
s(2068) =< aux(193)
s(2069) =< aux(193)
s(2070) =< aux(194)
s(2071) =< aux(194)
s(2072) =< aux(194)
s(2066) =< aux(194)
s(2073) =< aux(194)
s(2067) =< aux(194)
s(2070) =< aux(193)
s(2071) =< aux(193)
s(2072) =< aux(193)
s(2070) =< s(2056)
s(2072) =< s(2056)
s(2066) =< s(2056)
s(2067) =< s(2056)
s(2070) =< aux(195)
s(2072) =< aux(195)
s(2066) =< aux(195)
s(2067) =< aux(195)
s(2071) =< s(2058)
s(2066) =< s(2058)
s(2071) =< s(2057)
s(2066) =< s(2057)
s(2075) =< aux(197)*2+2
s(1997) =< aux(197)+2
s(2077) =< aux(197)+1
s(1999) =< aux(197)
s(2064) =< aux(197)*2+1
s(2079) =< s(2066)*s(2049)
s(2080) =< s(2072)*aux(196)
s(2075) =< s(2064)+1
s(2081) =< s(2066)*s(1999)
s(2082) =< s(2066)*s(2077)
s(2083) =< s(2066)*s(1997)
s(2084) =< s(2072)*s(1999)
s(2085) =< s(2072)*s(2077)
s(2086) =< s(2072)*s(1997)
s(2087) =< s(2072)*s(2064)
s(2088) =< s(2081)* (1/3)
s(2089) =< s(2082)* (1/2)
s(2090) =< s(2081)* (1/2)
s(2091) =< s(2066)*s(2075)
s(2092) =< s(2084)* (1/3)
s(2093) =< s(2085)* (1/2)
s(2094) =< s(2084)* (1/2)
s(2095) =< s(2072)*s(2075)
s(2096) =< s(2082)
s(2097) =< s(2074)
s(2098) =< s(2074)
s(2088) =< s(2074)
s(2099) =< s(2074)
s(2096) =< s(2074)
s(2088) =< s(2079)
s(2099) =< s(2079)
s(2096) =< s(2079)
s(2100) =< s(2079)
s(2101) =< s(2079)
s(2088) =< s(2091)
s(2099) =< s(2091)
s(2096) =< s(2091)
s(2100) =< s(2091)
s(2101) =< s(2091)
s(2097) =< s(2069)
s(2098) =< s(2069)
s(2088) =< s(2069)
s(2099) =< s(2069)
s(2096) =< s(2069)
s(2096) =< s(2081)
s(2102) =< s(2081)
s(2101) =< s(2081)
s(2103) =< s(2081)
s(2097) =< s(2082)
s(2098) =< s(2082)
s(2088) =< s(2082)
s(2099) =< s(2082)
s(2088) =< s(2083)
s(2096) =< s(2083)
s(2100) =< s(2083)
s(2100) =< s(2082)
s(2097) =< s(2081)
s(2098) =< s(2081)
s(2088) =< s(2081)
s(2099) =< s(2081)
s(2098) =< s(2089)
s(2088) =< s(2089)
s(2096) =< s(2089)
s(2098) =< s(2090)
s(2088) =< s(2090)
s(2096) =< s(2090)
s(2104) =< s(1999)+2
s(2105) =< s(2098)*s(1999)
s(2102) =< s(2088)*s(2077)
s(2096) =< s(2097)+s(2071)
s(2106) =< s(2099)*s(2104)
s(2096) =< s(2106)+s(2105)+s(2081)
s(2102) =< s(2106)+s(2105)+s(2081)
s(2107) =< s(2085)
s(2108) =< s(2068)
s(2109) =< s(2068)
s(2092) =< s(2068)
s(2110) =< s(2068)
s(2107) =< s(2068)
s(2092) =< s(2095)
s(2110) =< s(2095)
s(2107) =< s(2095)
s(2111) =< s(2095)
s(2112) =< s(2095)
s(2092) =< s(2087)
s(2110) =< s(2087)
s(2107) =< s(2087)
s(2111) =< s(2087)
s(2112) =< s(2087)
s(2108) =< s(2080)
s(2109) =< s(2080)
s(2092) =< s(2080)
s(2110) =< s(2080)
s(2107) =< s(2080)
s(2107) =< s(2084)
s(2113) =< s(2084)
s(2112) =< s(2084)
s(2114) =< s(2084)
s(2108) =< s(2085)
s(2109) =< s(2085)
s(2092) =< s(2085)
s(2110) =< s(2085)
s(2092) =< s(2086)
s(2107) =< s(2086)
s(2111) =< s(2086)
s(2092) =< s(2084)
s(2111) =< s(2084)
s(2108) =< s(2084)
s(2109) =< s(2084)
s(2110) =< s(2084)
s(2109) =< s(2093)
s(2092) =< s(2093)
s(2107) =< s(2093)
s(2109) =< s(2094)
s(2092) =< s(2094)
s(2107) =< s(2094)
s(2115) =< s(2109)*aux(197)
s(2113) =< s(2092)*s(2077)
s(2107) =< s(2108)+s(2070)
s(2116) =< s(2110)*s(1997)
s(2107) =< s(2116)+s(2115)+s(2084)
s(2113) =< s(2116)+s(2115)+s(2084)
s(1959) =< aux(196)
s(1958) =< aux(196)
s(1951) =< aux(192)
s(1952) =< aux(198)
s(1954) =< aux(192)
s(1955) =< aux(192)
s(1956) =< aux(193)
s(1954) =< aux(194)
s(1956) =< aux(194)
s(1955) =< aux(193)
s(1960) =< aux(196)
s(1961) =< aux(196)
s(1962) =< aux(197)
s(1960) =< aux(198)
s(1962) =< aux(198)
s(1961) =< aux(197)
s(1963) =< aux(194)
s(1985) =< s(1982)
s(1993) =< aux(192)
s(1993) =< aux(183)
s(1996) =< aux(197)*2+2
s(1985) =< aux(197)*2+1
s(1996) =< s(1985)+1
s(2005) =< s(1993)*s(1999)
s(2007) =< s(1993)*s(1997)
s(2008) =< s(1993)*s(1985)
s(2016) =< s(1993)*s(1996)
s(2032) =< s(2016)
s(2033) =< s(2016)
s(2032) =< s(2008)
s(2033) =< s(2008)
s(2033) =< s(2005)
s(2035) =< s(2005)
s(2032) =< s(2007)
s(2032) =< s(2005)

Unbounded itvars
s(2038) :  eq(307,2),s(1805)

  with precondition: [D=1,H=1,I=1,J=0,L=1,A>=2,C>=0,E>=2,G>=0,K>=0,B+1>=A,F+1>=E] 

* Chain [215]: 6*s(2120)+10*s(2121)+6*s(2122)+66*s(2123)+18*s(2149)+20*s(2188)+20*s(2189)+18*s(2191)+24*s(2194)+74
  Such that:s(2138) =< E+F
s(2121) =< F/2
aux(201) =< A
aux(202) =< A/2
aux(204) =< E
aux(205) =< F
s(2120) =< aux(205)
s(2141) =< s(2138)
s(2123) =< aux(201)
s(2149) =< aux(201)
s(2149) =< aux(202)
s(2152) =< aux(205)*2+2
s(2153) =< aux(205)+2
s(2155) =< aux(205)
s(2141) =< aux(205)*2+1
s(2152) =< s(2141)+1
s(2161) =< s(2149)*s(2155)
s(2163) =< s(2149)*s(2153)
s(2164) =< s(2149)*s(2141)
s(2172) =< s(2149)*s(2152)
s(2188) =< s(2172)
s(2189) =< s(2172)
s(2188) =< s(2164)
s(2189) =< s(2164)
s(2189) =< s(2161)
s(2191) =< s(2161)
s(2188) =< s(2163)
s(2188) =< s(2161)
s(2122) =< aux(204)
s(2121) =< aux(204)

Unbounded itvars
s(2194) :  eq(310,2),s(1805)

  with precondition: [D=1,H=1,I=1,J=0,L=1,A=B+1,A>=2,E>=2,K>=0,F+2>=2*E,C+1>=A,G>=E] 

* Chain [214]: 6*s(2196)+10*s(2197)+16*s(2199)+38*s(2200)+26*s(2220)+26*s(2221)+18*s(2226)+18*s(2227)+22*s(2242)+22*s(2246)+22*s(2250)+22*s(2252)+22*s(2253)+20*s(2254)+20*s(2255)+18*s(2256)+18*s(2257)+22*s(2261)+22*s(2263)+22*s(2264)+20*s(2265)+20*s(2266)+18*s(2267)+18*s(2268)+24*s(2271)+74
  Such that:s(2201) =< -2*A+2*B+2
s(2202) =< -A+B+1
s(2203) =< -A+B+F+3
s(2205) =< -3/2*A+3/2*B+3/2
s(2206) =< -3/2*A+3/2*B-F/2+2
s(2208) =< B+1
s(2210) =< B/2+1/2
s(2211) =< B/3
s(2212) =< B/3+1/3
s(2216) =< F
s(2215) =< 2*F+1
aux(206) =< A
aux(207) =< B
aux(208) =< B/2
aux(209) =< 3/2*B-F/2
aux(210) =< F+1
s(2196) =< aux(207)
s(2197) =< aux(208)
s(2206) =< aux(209)
s(2217) =< s(2206)
s(2217) =< aux(209)
s(2218) =< s(2215)
s(2200) =< aux(206)
s(2220) =< s(2201)
s(2221) =< s(2201)
s(2222) =< s(2201)
s(2221) =< s(2202)
s(2223) =< s(2202)
s(2224) =< aux(206)
s(2225) =< aux(206)
s(2226) =< aux(206)
s(2220) =< aux(206)
s(2227) =< aux(206)
s(2221) =< aux(206)
s(2221) =< s(2205)
s(2228) =< s(2205)
s(2221) =< s(2217)
s(2228) =< s(2217)
s(2220) =< aux(207)
s(2227) =< aux(207)
s(2221) =< aux(207)
s(2222) =< aux(207)
s(2223) =< aux(207)
s(2224) =< s(2208)
s(2225) =< s(2208)
s(2226) =< s(2208)
s(2220) =< s(2208)
s(2227) =< s(2208)
s(2221) =< s(2208)
s(2224) =< aux(207)
s(2225) =< aux(207)
s(2226) =< aux(207)
s(2224) =< s(2210)
s(2226) =< s(2210)
s(2220) =< s(2210)
s(2221) =< s(2210)
s(2224) =< aux(208)
s(2226) =< aux(208)
s(2220) =< aux(208)
s(2221) =< aux(208)
s(2225) =< s(2212)
s(2220) =< s(2212)
s(2225) =< s(2211)
s(2220) =< s(2211)
s(2229) =< s(2216)*2+2
s(2230) =< s(2216)+2
s(2231) =< s(2216)+1
s(2232) =< s(2216)
s(2218) =< s(2216)*2+1
s(2233) =< s(2220)*s(2203)
s(2234) =< s(2226)*aux(210)
s(2229) =< s(2218)+1
s(2235) =< s(2220)*s(2232)
s(2236) =< s(2220)*s(2231)
s(2237) =< s(2220)*s(2230)
s(2238) =< s(2226)*s(2232)
s(2239) =< s(2226)*s(2231)
s(2240) =< s(2226)*s(2230)
s(2241) =< s(2226)*s(2218)
s(2242) =< s(2235)* (1/3)
s(2243) =< s(2236)* (1/2)
s(2244) =< s(2235)* (1/2)
s(2245) =< s(2220)*s(2229)
s(2246) =< s(2238)* (1/3)
s(2247) =< s(2239)* (1/2)
s(2248) =< s(2238)* (1/2)
s(2249) =< s(2226)*s(2229)
s(2250) =< s(2236)
s(2251) =< s(2228)
s(2252) =< s(2228)
s(2242) =< s(2228)
s(2253) =< s(2228)
s(2250) =< s(2228)
s(2242) =< s(2233)
s(2253) =< s(2233)
s(2250) =< s(2233)
s(2254) =< s(2233)
s(2255) =< s(2233)
s(2242) =< s(2245)
s(2253) =< s(2245)
s(2250) =< s(2245)
s(2254) =< s(2245)
s(2255) =< s(2245)
s(2251) =< s(2223)
s(2252) =< s(2223)
s(2242) =< s(2223)
s(2253) =< s(2223)
s(2250) =< s(2223)
s(2250) =< s(2235)
s(2256) =< s(2235)
s(2255) =< s(2235)
s(2257) =< s(2235)
s(2251) =< s(2236)
s(2252) =< s(2236)
s(2242) =< s(2236)
s(2253) =< s(2236)
s(2242) =< s(2237)
s(2250) =< s(2237)
s(2254) =< s(2237)
s(2254) =< s(2236)
s(2251) =< s(2235)
s(2252) =< s(2235)
s(2242) =< s(2235)
s(2253) =< s(2235)
s(2252) =< s(2243)
s(2242) =< s(2243)
s(2250) =< s(2243)
s(2252) =< s(2244)
s(2242) =< s(2244)
s(2250) =< s(2244)
s(2258) =< s(2232)+2
s(2259) =< s(2252)*s(2232)
s(2256) =< s(2242)*s(2231)
s(2250) =< s(2251)+s(2225)
s(2260) =< s(2253)*s(2258)
s(2250) =< s(2260)+s(2259)+s(2235)
s(2256) =< s(2260)+s(2259)+s(2235)
s(2261) =< s(2239)
s(2262) =< s(2222)
s(2263) =< s(2222)
s(2246) =< s(2222)
s(2264) =< s(2222)
s(2261) =< s(2222)
s(2246) =< s(2249)
s(2264) =< s(2249)
s(2261) =< s(2249)
s(2265) =< s(2249)
s(2266) =< s(2249)
s(2246) =< s(2241)
s(2264) =< s(2241)
s(2261) =< s(2241)
s(2265) =< s(2241)
s(2266) =< s(2241)
s(2262) =< s(2234)
s(2263) =< s(2234)
s(2246) =< s(2234)
s(2264) =< s(2234)
s(2261) =< s(2234)
s(2261) =< s(2238)
s(2267) =< s(2238)
s(2266) =< s(2238)
s(2268) =< s(2238)
s(2262) =< s(2239)
s(2263) =< s(2239)
s(2246) =< s(2239)
s(2264) =< s(2239)
s(2246) =< s(2240)
s(2261) =< s(2240)
s(2265) =< s(2240)
s(2246) =< s(2238)
s(2265) =< s(2238)
s(2262) =< s(2238)
s(2263) =< s(2238)
s(2264) =< s(2238)
s(2263) =< s(2247)
s(2246) =< s(2247)
s(2261) =< s(2247)
s(2263) =< s(2248)
s(2246) =< s(2248)
s(2261) =< s(2248)
s(2269) =< s(2263)*s(2216)
s(2267) =< s(2246)*s(2231)
s(2261) =< s(2262)+s(2224)
s(2270) =< s(2264)*s(2230)
s(2261) =< s(2270)+s(2269)+s(2238)
s(2267) =< s(2270)+s(2269)+s(2238)
s(2199) =< aux(210)
s(2197) =< aux(206)

Unbounded itvars
s(2271) :  eq(313,2),s(1805)

  with precondition: [D=1,H=1,I=1,J=0,L=1,E=F+1,A>=2,E>=2,K>=0,B+2>=2*A,C>=A,G+1>=E] 

* Chain [213]: 16*s(2274)+32*s(2275)+9*s(2298)+9*s(2299)+10*s(2337)+10*s(2338)+9*s(2340)+63
  Such that:s(2282) =< B
s(2284) =< B/2
s(2285) =< B/2+1/2
s(2290) =< F
s(2289) =< 2*F+1
aux(212) =< B+1
aux(213) =< F+1
s(2275) =< aux(212)
s(2298) =< aux(212)
s(2299) =< aux(212)
s(2299) =< s(2282)
s(2298) =< s(2282)
s(2298) =< s(2285)
s(2298) =< s(2284)
s(2301) =< s(2290)*2+2
s(2302) =< s(2290)+2
s(2304) =< s(2290)
s(2289) =< s(2290)*2+1
s(2301) =< s(2289)+1
s(2310) =< s(2298)*s(2304)
s(2312) =< s(2298)*s(2302)
s(2313) =< s(2298)*s(2289)
s(2321) =< s(2298)*s(2301)
s(2337) =< s(2321)
s(2338) =< s(2321)
s(2337) =< s(2313)
s(2338) =< s(2313)
s(2338) =< s(2310)
s(2340) =< s(2310)
s(2337) =< s(2312)
s(2337) =< s(2310)
s(2274) =< aux(213)

  with precondition: [D=1,H=1,L=1,A=B+1,E=F+1,A=I,A=J+1,A>=2,E>=2,C+1>=A,K+1>=A,G+1>=E] 

* Chain [212]: 16*s(2345)+41*s(2346)+9*s(2369)+10*s(2408)+10*s(2409)+9*s(2411)+6*s(2414)+63
  Such that:s(2361) =< F
s(2360) =< 2*F+1
aux(215) =< A
aux(216) =< A/2
aux(218) =< F+1
s(2346) =< aux(215)
s(2369) =< aux(215)
s(2369) =< aux(216)
s(2372) =< s(2361)*2+2
s(2373) =< s(2361)+2
s(2375) =< s(2361)
s(2360) =< s(2361)*2+1
s(2372) =< s(2360)+1
s(2381) =< s(2369)*s(2375)
s(2383) =< s(2369)*s(2373)
s(2384) =< s(2369)*s(2360)
s(2392) =< s(2369)*s(2372)
s(2408) =< s(2392)
s(2409) =< s(2392)
s(2408) =< s(2384)
s(2409) =< s(2384)
s(2409) =< s(2381)
s(2411) =< s(2381)
s(2408) =< s(2383)
s(2408) =< s(2381)
s(2345) =< aux(218)

Unbounded itvars
s(2414) :  eq(309,2),s(1941)

  with precondition: [D=1,H=1,L=1,A=B+1,E=F+1,A=I,A>=2,E>=2,J+2>=2*A,C>=A,K>=A,G+1>=E] 

* Chain [211]: 6*s(2417)+10*s(2418)+6*s(2419)+32*s(2420)+9*s(2443)+9*s(2444)+10*s(2482)+10*s(2483)+9*s(2485)+63
  Such that:s(2427) =< B
s(2429) =< B/2
s(2430) =< B/2+1/2
s(2434) =< E+F
s(2418) =< F/2
aux(220) =< B+1
aux(221) =< E
aux(222) =< F
s(2417) =< aux(222)
s(2420) =< aux(220)
s(2443) =< aux(220)
s(2444) =< aux(220)
s(2444) =< s(2427)
s(2443) =< s(2427)
s(2443) =< s(2430)
s(2443) =< s(2429)
s(2446) =< aux(222)*2+2
s(2447) =< aux(222)+2
s(2449) =< aux(222)
s(2434) =< aux(222)*2+1
s(2446) =< s(2434)+1
s(2455) =< s(2443)*s(2449)
s(2457) =< s(2443)*s(2447)
s(2458) =< s(2443)*s(2434)
s(2466) =< s(2443)*s(2446)
s(2482) =< s(2466)
s(2483) =< s(2466)
s(2482) =< s(2458)
s(2483) =< s(2458)
s(2483) =< s(2455)
s(2485) =< s(2455)
s(2482) =< s(2457)
s(2482) =< s(2455)
s(2419) =< aux(221)
s(2418) =< aux(221)

  with precondition: [D=1,H=1,L=1,A=B+1,A=I,A=J+1,A>=2,E>=2,F+2>=2*E,C+1>=A,K+1>=A,G>=E] 

* Chain [210]: 6*s(2490)+10*s(2491)+6*s(2492)+41*s(2493)+9*s(2516)+10*s(2555)+10*s(2556)+9*s(2558)+6*s(2561)+63
  Such that:s(2507) =< E+F
s(2491) =< F/2
aux(224) =< A
aux(225) =< A/2
aux(227) =< E
aux(228) =< F
s(2490) =< aux(228)
s(2493) =< aux(224)
s(2516) =< aux(224)
s(2516) =< aux(225)
s(2519) =< aux(228)*2+2
s(2520) =< aux(228)+2
s(2522) =< aux(228)
s(2507) =< aux(228)*2+1
s(2519) =< s(2507)+1
s(2528) =< s(2516)*s(2522)
s(2530) =< s(2516)*s(2520)
s(2531) =< s(2516)*s(2507)
s(2539) =< s(2516)*s(2519)
s(2555) =< s(2539)
s(2556) =< s(2539)
s(2555) =< s(2531)
s(2556) =< s(2531)
s(2556) =< s(2528)
s(2558) =< s(2528)
s(2555) =< s(2530)
s(2555) =< s(2528)
s(2492) =< aux(227)
s(2491) =< aux(227)

Unbounded itvars
s(2561) :  eq(312,2),s(1941)

  with precondition: [D=1,H=1,L=1,A=B+1,A=I,A>=2,E>=2,J+2>=2*A,F+2>=2*E,C>=A,K>=A,G>=E] 

* Chain [209]: 6*s(2563)+10*s(2564)+16*s(2566)+22*s(2567)+13*s(2584)+13*s(2585)+9*s(2590)+9*s(2591)+11*s(2606)+11*s(2610)+11*s(2614)+11*s(2616)+11*s(2617)+10*s(2618)+10*s(2619)+9*s(2620)+9*s(2621)+11*s(2625)+11*s(2627)+11*s(2628)+10*s(2629)+10*s(2630)+9*s(2631)+9*s(2632)+63
  Such that:s(2568) =< -2*A+2*B+2
s(2569) =< -A+B+1
s(2570) =< -A+B+F+3
s(2572) =< -3/2*A+3/2*B+3/2
s(2573) =< -3/2*A+3/2*B-E/2+5/2
s(2575) =< B+1
s(2577) =< B/2+1/2
s(2578) =< B/3
s(2579) =< B/3+1/3
s(2573) =< 3/2*B-E/2
s(2573) =< 3/2*B-F/2
s(2582) =< F
s(2581) =< 2*F+1
aux(229) =< A
aux(230) =< B
aux(231) =< B/2
aux(232) =< F+1
s(2563) =< aux(230)
s(2564) =< aux(231)
s(2567) =< aux(229)
s(2584) =< s(2568)
s(2585) =< s(2568)
s(2586) =< s(2568)
s(2585) =< s(2569)
s(2587) =< s(2569)
s(2588) =< aux(229)
s(2589) =< aux(229)
s(2590) =< aux(229)
s(2584) =< aux(229)
s(2591) =< aux(229)
s(2585) =< aux(229)
s(2585) =< s(2572)
s(2592) =< s(2572)
s(2585) =< s(2573)
s(2592) =< s(2573)
s(2584) =< aux(230)
s(2591) =< aux(230)
s(2585) =< aux(230)
s(2586) =< aux(230)
s(2587) =< aux(230)
s(2588) =< s(2575)
s(2589) =< s(2575)
s(2590) =< s(2575)
s(2584) =< s(2575)
s(2591) =< s(2575)
s(2585) =< s(2575)
s(2588) =< aux(230)
s(2589) =< aux(230)
s(2590) =< aux(230)
s(2588) =< s(2577)
s(2590) =< s(2577)
s(2584) =< s(2577)
s(2585) =< s(2577)
s(2588) =< aux(231)
s(2590) =< aux(231)
s(2584) =< aux(231)
s(2585) =< aux(231)
s(2589) =< s(2579)
s(2584) =< s(2579)
s(2589) =< s(2578)
s(2584) =< s(2578)
s(2593) =< s(2582)*2+2
s(2594) =< s(2582)+2
s(2595) =< s(2582)+1
s(2596) =< s(2582)
s(2581) =< s(2582)*2+1
s(2597) =< s(2584)*s(2570)
s(2598) =< s(2590)*aux(232)
s(2593) =< s(2581)+1
s(2599) =< s(2584)*s(2596)
s(2600) =< s(2584)*s(2595)
s(2601) =< s(2584)*s(2594)
s(2602) =< s(2590)*s(2596)
s(2603) =< s(2590)*s(2595)
s(2604) =< s(2590)*s(2594)
s(2605) =< s(2590)*s(2581)
s(2606) =< s(2599)* (1/3)
s(2607) =< s(2600)* (1/2)
s(2608) =< s(2599)* (1/2)
s(2609) =< s(2584)*s(2593)
s(2610) =< s(2602)* (1/3)
s(2611) =< s(2603)* (1/2)
s(2612) =< s(2602)* (1/2)
s(2613) =< s(2590)*s(2593)
s(2614) =< s(2600)
s(2615) =< s(2592)
s(2616) =< s(2592)
s(2606) =< s(2592)
s(2617) =< s(2592)
s(2614) =< s(2592)
s(2606) =< s(2597)
s(2617) =< s(2597)
s(2614) =< s(2597)
s(2618) =< s(2597)
s(2619) =< s(2597)
s(2606) =< s(2609)
s(2617) =< s(2609)
s(2614) =< s(2609)
s(2618) =< s(2609)
s(2619) =< s(2609)
s(2615) =< s(2587)
s(2616) =< s(2587)
s(2606) =< s(2587)
s(2617) =< s(2587)
s(2614) =< s(2587)
s(2614) =< s(2599)
s(2620) =< s(2599)
s(2619) =< s(2599)
s(2621) =< s(2599)
s(2615) =< s(2600)
s(2616) =< s(2600)
s(2606) =< s(2600)
s(2617) =< s(2600)
s(2606) =< s(2601)
s(2614) =< s(2601)
s(2618) =< s(2601)
s(2618) =< s(2600)
s(2615) =< s(2599)
s(2616) =< s(2599)
s(2606) =< s(2599)
s(2617) =< s(2599)
s(2616) =< s(2607)
s(2606) =< s(2607)
s(2614) =< s(2607)
s(2616) =< s(2608)
s(2606) =< s(2608)
s(2614) =< s(2608)
s(2622) =< s(2596)+2
s(2623) =< s(2616)*s(2596)
s(2620) =< s(2606)*s(2595)
s(2614) =< s(2615)+s(2589)
s(2624) =< s(2617)*s(2622)
s(2614) =< s(2624)+s(2623)+s(2599)
s(2620) =< s(2624)+s(2623)+s(2599)
s(2625) =< s(2603)
s(2626) =< s(2586)
s(2627) =< s(2586)
s(2610) =< s(2586)
s(2628) =< s(2586)
s(2625) =< s(2586)
s(2610) =< s(2613)
s(2628) =< s(2613)
s(2625) =< s(2613)
s(2629) =< s(2613)
s(2630) =< s(2613)
s(2610) =< s(2605)
s(2628) =< s(2605)
s(2625) =< s(2605)
s(2629) =< s(2605)
s(2630) =< s(2605)
s(2626) =< s(2598)
s(2627) =< s(2598)
s(2610) =< s(2598)
s(2628) =< s(2598)
s(2625) =< s(2598)
s(2625) =< s(2602)
s(2631) =< s(2602)
s(2630) =< s(2602)
s(2632) =< s(2602)
s(2626) =< s(2603)
s(2627) =< s(2603)
s(2610) =< s(2603)
s(2628) =< s(2603)
s(2610) =< s(2604)
s(2625) =< s(2604)
s(2629) =< s(2604)
s(2610) =< s(2602)
s(2629) =< s(2602)
s(2626) =< s(2602)
s(2627) =< s(2602)
s(2628) =< s(2602)
s(2627) =< s(2611)
s(2610) =< s(2611)
s(2625) =< s(2611)
s(2627) =< s(2612)
s(2610) =< s(2612)
s(2625) =< s(2612)
s(2633) =< s(2627)*s(2582)
s(2631) =< s(2610)*s(2595)
s(2625) =< s(2626)+s(2588)
s(2634) =< s(2628)*s(2594)
s(2625) =< s(2634)+s(2633)+s(2602)
s(2631) =< s(2634)+s(2633)+s(2602)
s(2566) =< aux(232)
s(2564) =< aux(229)

  with precondition: [D=1,H=1,L=1,E=F+1,A=I,A=J+1,A>=2,E>=2,B+2>=2*A,C>=A,K+1>=A,G+1>=E] 

* Chain [208]: 6*s(2636)+10*s(2637)+16*s(2639)+22*s(2640)+13*s(2657)+13*s(2658)+9*s(2663)+9*s(2664)+11*s(2679)+11*s(2683)+11*s(2687)+11*s(2689)+11*s(2690)+10*s(2691)+10*s(2692)+9*s(2693)+9*s(2694)+11*s(2698)+11*s(2700)+11*s(2701)+10*s(2702)+10*s(2703)+9*s(2704)+9*s(2705)+6*s(2708)+63
  Such that:s(2641) =< -2*A+2*B+2
s(2642) =< -A+B+1
s(2643) =< -A+B+F+3
s(2645) =< -3/2*A+3/2*B+2
s(2646) =< -3/2*A+3/2*B+3/2
s(2645) =< -3/2*A+3/2*B-E/2+5/2
s(2648) =< B+1
s(2650) =< B/2+1/2
s(2651) =< B/3
s(2652) =< B/3+1/3
s(2645) =< 3/2*B-E/2
s(2645) =< 3/2*B-F/2
s(2655) =< F
s(2654) =< 2*F+1
aux(233) =< A
aux(234) =< B
aux(235) =< B/2
aux(236) =< F+1
s(2636) =< aux(234)
s(2637) =< aux(235)
s(2640) =< aux(233)
s(2657) =< s(2641)
s(2658) =< s(2641)
s(2659) =< s(2641)
s(2658) =< s(2642)
s(2660) =< s(2642)
s(2661) =< aux(233)
s(2662) =< aux(233)
s(2663) =< aux(233)
s(2657) =< aux(233)
s(2664) =< aux(233)
s(2658) =< aux(233)
s(2658) =< s(2646)
s(2665) =< s(2646)
s(2658) =< s(2645)
s(2665) =< s(2645)
s(2657) =< aux(234)
s(2664) =< aux(234)
s(2658) =< aux(234)
s(2659) =< aux(234)
s(2660) =< aux(234)
s(2661) =< s(2648)
s(2662) =< s(2648)
s(2663) =< s(2648)
s(2657) =< s(2648)
s(2664) =< s(2648)
s(2658) =< s(2648)
s(2661) =< aux(234)
s(2662) =< aux(234)
s(2663) =< aux(234)
s(2661) =< s(2650)
s(2663) =< s(2650)
s(2657) =< s(2650)
s(2658) =< s(2650)
s(2661) =< aux(235)
s(2663) =< aux(235)
s(2657) =< aux(235)
s(2658) =< aux(235)
s(2662) =< s(2652)
s(2657) =< s(2652)
s(2662) =< s(2651)
s(2657) =< s(2651)
s(2666) =< s(2655)*2+2
s(2667) =< s(2655)+2
s(2668) =< s(2655)+1
s(2669) =< s(2655)
s(2654) =< s(2655)*2+1
s(2670) =< s(2657)*s(2643)
s(2671) =< s(2663)*aux(236)
s(2666) =< s(2654)+1
s(2672) =< s(2657)*s(2669)
s(2673) =< s(2657)*s(2668)
s(2674) =< s(2657)*s(2667)
s(2675) =< s(2663)*s(2669)
s(2676) =< s(2663)*s(2668)
s(2677) =< s(2663)*s(2667)
s(2678) =< s(2663)*s(2654)
s(2679) =< s(2672)* (1/3)
s(2680) =< s(2673)* (1/2)
s(2681) =< s(2672)* (1/2)
s(2682) =< s(2657)*s(2666)
s(2683) =< s(2675)* (1/3)
s(2684) =< s(2676)* (1/2)
s(2685) =< s(2675)* (1/2)
s(2686) =< s(2663)*s(2666)
s(2687) =< s(2673)
s(2688) =< s(2665)
s(2689) =< s(2665)
s(2679) =< s(2665)
s(2690) =< s(2665)
s(2687) =< s(2665)
s(2679) =< s(2670)
s(2690) =< s(2670)
s(2687) =< s(2670)
s(2691) =< s(2670)
s(2692) =< s(2670)
s(2679) =< s(2682)
s(2690) =< s(2682)
s(2687) =< s(2682)
s(2691) =< s(2682)
s(2692) =< s(2682)
s(2688) =< s(2660)
s(2689) =< s(2660)
s(2679) =< s(2660)
s(2690) =< s(2660)
s(2687) =< s(2660)
s(2687) =< s(2672)
s(2693) =< s(2672)
s(2692) =< s(2672)
s(2694) =< s(2672)
s(2688) =< s(2673)
s(2689) =< s(2673)
s(2679) =< s(2673)
s(2690) =< s(2673)
s(2679) =< s(2674)
s(2687) =< s(2674)
s(2691) =< s(2674)
s(2691) =< s(2673)
s(2688) =< s(2672)
s(2689) =< s(2672)
s(2679) =< s(2672)
s(2690) =< s(2672)
s(2689) =< s(2680)
s(2679) =< s(2680)
s(2687) =< s(2680)
s(2689) =< s(2681)
s(2679) =< s(2681)
s(2687) =< s(2681)
s(2695) =< s(2669)+2
s(2696) =< s(2689)*s(2669)
s(2693) =< s(2679)*s(2668)
s(2687) =< s(2688)+s(2662)
s(2697) =< s(2690)*s(2695)
s(2687) =< s(2697)+s(2696)+s(2672)
s(2693) =< s(2697)+s(2696)+s(2672)
s(2698) =< s(2676)
s(2699) =< s(2659)
s(2700) =< s(2659)
s(2683) =< s(2659)
s(2701) =< s(2659)
s(2698) =< s(2659)
s(2683) =< s(2686)
s(2701) =< s(2686)
s(2698) =< s(2686)
s(2702) =< s(2686)
s(2703) =< s(2686)
s(2683) =< s(2678)
s(2701) =< s(2678)
s(2698) =< s(2678)
s(2702) =< s(2678)
s(2703) =< s(2678)
s(2699) =< s(2671)
s(2700) =< s(2671)
s(2683) =< s(2671)
s(2701) =< s(2671)
s(2698) =< s(2671)
s(2698) =< s(2675)
s(2704) =< s(2675)
s(2703) =< s(2675)
s(2705) =< s(2675)
s(2699) =< s(2676)
s(2700) =< s(2676)
s(2683) =< s(2676)
s(2701) =< s(2676)
s(2683) =< s(2677)
s(2698) =< s(2677)
s(2702) =< s(2677)
s(2683) =< s(2675)
s(2702) =< s(2675)
s(2699) =< s(2675)
s(2700) =< s(2675)
s(2701) =< s(2675)
s(2700) =< s(2684)
s(2683) =< s(2684)
s(2698) =< s(2684)
s(2700) =< s(2685)
s(2683) =< s(2685)
s(2698) =< s(2685)
s(2706) =< s(2700)*s(2655)
s(2704) =< s(2683)*s(2668)
s(2698) =< s(2699)+s(2661)
s(2707) =< s(2701)*s(2667)
s(2698) =< s(2707)+s(2706)+s(2675)
s(2704) =< s(2707)+s(2706)+s(2675)
s(2639) =< aux(236)
s(2637) =< aux(233)

Unbounded itvars
s(2708) :  eq(315,2),s(1941)

  with precondition: [D=1,H=1,L=1,E=F+1,A=I,A>=2,E>=2,B+2>=2*A,J+2>=2*A,C>=A,K>=A,G+1>=E] 

* Chain [207]: 6*s(2710)+10*s(2711)+6*s(2713)+10*s(2714)+6*s(2715)+22*s(2716)+13*s(2733)+13*s(2734)+9*s(2739)+9*s(2740)+11*s(2755)+11*s(2759)+11*s(2763)+11*s(2765)+11*s(2766)+10*s(2767)+10*s(2768)+9*s(2769)+9*s(2770)+11*s(2774)+11*s(2776)+11*s(2777)+10*s(2778)+10*s(2779)+9*s(2780)+9*s(2781)+63
  Such that:s(2717) =< -2*A+2*B+2
s(2718) =< -A+B+1
s(2719) =< -A+B+F+3
s(2721) =< -3/2*A+3/2*B+3/2
s(2722) =< -3/2*A+3/2*B-E/2+5/2
s(2724) =< B+1
s(2726) =< B/2+1/2
s(2727) =< B/3
s(2728) =< B/3+1/3
s(2722) =< 3/2*B-E/2
s(2730) =< E+F
s(2714) =< F/2
aux(237) =< A
aux(238) =< B
aux(239) =< B/2
aux(240) =< E
aux(241) =< F
s(2710) =< aux(238)
s(2711) =< aux(239)
s(2713) =< aux(241)
s(2716) =< aux(237)
s(2733) =< s(2717)
s(2734) =< s(2717)
s(2735) =< s(2717)
s(2734) =< s(2718)
s(2736) =< s(2718)
s(2737) =< aux(237)
s(2738) =< aux(237)
s(2739) =< aux(237)
s(2733) =< aux(237)
s(2740) =< aux(237)
s(2734) =< aux(237)
s(2734) =< s(2721)
s(2741) =< s(2721)
s(2734) =< s(2722)
s(2741) =< s(2722)
s(2733) =< aux(238)
s(2740) =< aux(238)
s(2734) =< aux(238)
s(2735) =< aux(238)
s(2736) =< aux(238)
s(2737) =< s(2724)
s(2738) =< s(2724)
s(2739) =< s(2724)
s(2733) =< s(2724)
s(2740) =< s(2724)
s(2734) =< s(2724)
s(2737) =< aux(238)
s(2738) =< aux(238)
s(2739) =< aux(238)
s(2737) =< s(2726)
s(2739) =< s(2726)
s(2733) =< s(2726)
s(2734) =< s(2726)
s(2737) =< aux(239)
s(2739) =< aux(239)
s(2733) =< aux(239)
s(2734) =< aux(239)
s(2738) =< s(2728)
s(2733) =< s(2728)
s(2738) =< s(2727)
s(2733) =< s(2727)
s(2742) =< aux(241)*2+2
s(2743) =< aux(241)+2
s(2744) =< aux(241)+1
s(2745) =< aux(241)
s(2730) =< aux(241)*2+1
s(2746) =< s(2733)*s(2719)
s(2747) =< s(2739)*aux(240)
s(2742) =< s(2730)+1
s(2748) =< s(2733)*s(2745)
s(2749) =< s(2733)*s(2744)
s(2750) =< s(2733)*s(2743)
s(2751) =< s(2739)*s(2745)
s(2752) =< s(2739)*s(2744)
s(2753) =< s(2739)*s(2743)
s(2754) =< s(2739)*s(2730)
s(2755) =< s(2748)* (1/3)
s(2756) =< s(2749)* (1/2)
s(2757) =< s(2748)* (1/2)
s(2758) =< s(2733)*s(2742)
s(2759) =< s(2751)* (1/3)
s(2760) =< s(2752)* (1/2)
s(2761) =< s(2751)* (1/2)
s(2762) =< s(2739)*s(2742)
s(2763) =< s(2749)
s(2764) =< s(2741)
s(2765) =< s(2741)
s(2755) =< s(2741)
s(2766) =< s(2741)
s(2763) =< s(2741)
s(2755) =< s(2746)
s(2766) =< s(2746)
s(2763) =< s(2746)
s(2767) =< s(2746)
s(2768) =< s(2746)
s(2755) =< s(2758)
s(2766) =< s(2758)
s(2763) =< s(2758)
s(2767) =< s(2758)
s(2768) =< s(2758)
s(2764) =< s(2736)
s(2765) =< s(2736)
s(2755) =< s(2736)
s(2766) =< s(2736)
s(2763) =< s(2736)
s(2763) =< s(2748)
s(2769) =< s(2748)
s(2768) =< s(2748)
s(2770) =< s(2748)
s(2764) =< s(2749)
s(2765) =< s(2749)
s(2755) =< s(2749)
s(2766) =< s(2749)
s(2755) =< s(2750)
s(2763) =< s(2750)
s(2767) =< s(2750)
s(2767) =< s(2749)
s(2764) =< s(2748)
s(2765) =< s(2748)
s(2755) =< s(2748)
s(2766) =< s(2748)
s(2765) =< s(2756)
s(2755) =< s(2756)
s(2763) =< s(2756)
s(2765) =< s(2757)
s(2755) =< s(2757)
s(2763) =< s(2757)
s(2771) =< s(2745)+2
s(2772) =< s(2765)*s(2745)
s(2769) =< s(2755)*s(2744)
s(2763) =< s(2764)+s(2738)
s(2773) =< s(2766)*s(2771)
s(2763) =< s(2773)+s(2772)+s(2748)
s(2769) =< s(2773)+s(2772)+s(2748)
s(2774) =< s(2752)
s(2775) =< s(2735)
s(2776) =< s(2735)
s(2759) =< s(2735)
s(2777) =< s(2735)
s(2774) =< s(2735)
s(2759) =< s(2762)
s(2777) =< s(2762)
s(2774) =< s(2762)
s(2778) =< s(2762)
s(2779) =< s(2762)
s(2759) =< s(2754)
s(2777) =< s(2754)
s(2774) =< s(2754)
s(2778) =< s(2754)
s(2779) =< s(2754)
s(2775) =< s(2747)
s(2776) =< s(2747)
s(2759) =< s(2747)
s(2777) =< s(2747)
s(2774) =< s(2747)
s(2774) =< s(2751)
s(2780) =< s(2751)
s(2779) =< s(2751)
s(2781) =< s(2751)
s(2775) =< s(2752)
s(2776) =< s(2752)
s(2759) =< s(2752)
s(2777) =< s(2752)
s(2759) =< s(2753)
s(2774) =< s(2753)
s(2778) =< s(2753)
s(2759) =< s(2751)
s(2778) =< s(2751)
s(2775) =< s(2751)
s(2776) =< s(2751)
s(2777) =< s(2751)
s(2776) =< s(2760)
s(2759) =< s(2760)
s(2774) =< s(2760)
s(2776) =< s(2761)
s(2759) =< s(2761)
s(2774) =< s(2761)
s(2782) =< s(2776)*aux(241)
s(2780) =< s(2759)*s(2744)
s(2774) =< s(2775)+s(2737)
s(2783) =< s(2777)*s(2743)
s(2774) =< s(2783)+s(2782)+s(2751)
s(2780) =< s(2783)+s(2782)+s(2751)
s(2715) =< aux(240)
s(2714) =< aux(240)
s(2711) =< aux(237)

  with precondition: [D=1,H=1,L=1,A=I,A=J+1,A>=2,E>=2,B+2>=2*A,F+2>=2*E,C>=A,K+1>=A,G>=E] 

* Chain [206]: 6*s(2785)+10*s(2786)+6*s(2788)+10*s(2789)+6*s(2790)+22*s(2791)+13*s(2808)+13*s(2809)+9*s(2814)+9*s(2815)+11*s(2830)+11*s(2834)+11*s(2838)+11*s(2840)+11*s(2841)+10*s(2842)+10*s(2843)+9*s(2844)+9*s(2845)+11*s(2849)+11*s(2851)+11*s(2852)+10*s(2853)+10*s(2854)+9*s(2855)+9*s(2856)+6*s(2859)+63
  Such that:s(2792) =< -2*A+2*B+2
s(2793) =< -A+B+1
s(2794) =< -A+B+F+3
s(2796) =< -3/2*A+3/2*B+2
s(2797) =< -3/2*A+3/2*B+3/2
s(2796) =< -3/2*A+3/2*B-E/2+5/2
s(2799) =< B+1
s(2801) =< B/2+1/2
s(2802) =< B/3
s(2803) =< B/3+1/3
s(2796) =< 3/2*B-E/2
s(2805) =< E+F
s(2789) =< F/2
aux(242) =< A
aux(243) =< B
aux(244) =< B/2
aux(245) =< E
aux(246) =< F
s(2785) =< aux(243)
s(2786) =< aux(244)
s(2788) =< aux(246)
s(2791) =< aux(242)
s(2808) =< s(2792)
s(2809) =< s(2792)
s(2810) =< s(2792)
s(2809) =< s(2793)
s(2811) =< s(2793)
s(2812) =< aux(242)
s(2813) =< aux(242)
s(2814) =< aux(242)
s(2808) =< aux(242)
s(2815) =< aux(242)
s(2809) =< aux(242)
s(2809) =< s(2797)
s(2816) =< s(2797)
s(2809) =< s(2796)
s(2816) =< s(2796)
s(2808) =< aux(243)
s(2815) =< aux(243)
s(2809) =< aux(243)
s(2810) =< aux(243)
s(2811) =< aux(243)
s(2812) =< s(2799)
s(2813) =< s(2799)
s(2814) =< s(2799)
s(2808) =< s(2799)
s(2815) =< s(2799)
s(2809) =< s(2799)
s(2812) =< aux(243)
s(2813) =< aux(243)
s(2814) =< aux(243)
s(2812) =< s(2801)
s(2814) =< s(2801)
s(2808) =< s(2801)
s(2809) =< s(2801)
s(2812) =< aux(244)
s(2814) =< aux(244)
s(2808) =< aux(244)
s(2809) =< aux(244)
s(2813) =< s(2803)
s(2808) =< s(2803)
s(2813) =< s(2802)
s(2808) =< s(2802)
s(2817) =< aux(246)*2+2
s(2818) =< aux(246)+2
s(2819) =< aux(246)+1
s(2820) =< aux(246)
s(2805) =< aux(246)*2+1
s(2821) =< s(2808)*s(2794)
s(2822) =< s(2814)*aux(245)
s(2817) =< s(2805)+1
s(2823) =< s(2808)*s(2820)
s(2824) =< s(2808)*s(2819)
s(2825) =< s(2808)*s(2818)
s(2826) =< s(2814)*s(2820)
s(2827) =< s(2814)*s(2819)
s(2828) =< s(2814)*s(2818)
s(2829) =< s(2814)*s(2805)
s(2830) =< s(2823)* (1/3)
s(2831) =< s(2824)* (1/2)
s(2832) =< s(2823)* (1/2)
s(2833) =< s(2808)*s(2817)
s(2834) =< s(2826)* (1/3)
s(2835) =< s(2827)* (1/2)
s(2836) =< s(2826)* (1/2)
s(2837) =< s(2814)*s(2817)
s(2838) =< s(2824)
s(2839) =< s(2816)
s(2840) =< s(2816)
s(2830) =< s(2816)
s(2841) =< s(2816)
s(2838) =< s(2816)
s(2830) =< s(2821)
s(2841) =< s(2821)
s(2838) =< s(2821)
s(2842) =< s(2821)
s(2843) =< s(2821)
s(2830) =< s(2833)
s(2841) =< s(2833)
s(2838) =< s(2833)
s(2842) =< s(2833)
s(2843) =< s(2833)
s(2839) =< s(2811)
s(2840) =< s(2811)
s(2830) =< s(2811)
s(2841) =< s(2811)
s(2838) =< s(2811)
s(2838) =< s(2823)
s(2844) =< s(2823)
s(2843) =< s(2823)
s(2845) =< s(2823)
s(2839) =< s(2824)
s(2840) =< s(2824)
s(2830) =< s(2824)
s(2841) =< s(2824)
s(2830) =< s(2825)
s(2838) =< s(2825)
s(2842) =< s(2825)
s(2842) =< s(2824)
s(2839) =< s(2823)
s(2840) =< s(2823)
s(2830) =< s(2823)
s(2841) =< s(2823)
s(2840) =< s(2831)
s(2830) =< s(2831)
s(2838) =< s(2831)
s(2840) =< s(2832)
s(2830) =< s(2832)
s(2838) =< s(2832)
s(2846) =< s(2820)+2
s(2847) =< s(2840)*s(2820)
s(2844) =< s(2830)*s(2819)
s(2838) =< s(2839)+s(2813)
s(2848) =< s(2841)*s(2846)
s(2838) =< s(2848)+s(2847)+s(2823)
s(2844) =< s(2848)+s(2847)+s(2823)
s(2849) =< s(2827)
s(2850) =< s(2810)
s(2851) =< s(2810)
s(2834) =< s(2810)
s(2852) =< s(2810)
s(2849) =< s(2810)
s(2834) =< s(2837)
s(2852) =< s(2837)
s(2849) =< s(2837)
s(2853) =< s(2837)
s(2854) =< s(2837)
s(2834) =< s(2829)
s(2852) =< s(2829)
s(2849) =< s(2829)
s(2853) =< s(2829)
s(2854) =< s(2829)
s(2850) =< s(2822)
s(2851) =< s(2822)
s(2834) =< s(2822)
s(2852) =< s(2822)
s(2849) =< s(2822)
s(2849) =< s(2826)
s(2855) =< s(2826)
s(2854) =< s(2826)
s(2856) =< s(2826)
s(2850) =< s(2827)
s(2851) =< s(2827)
s(2834) =< s(2827)
s(2852) =< s(2827)
s(2834) =< s(2828)
s(2849) =< s(2828)
s(2853) =< s(2828)
s(2834) =< s(2826)
s(2853) =< s(2826)
s(2850) =< s(2826)
s(2851) =< s(2826)
s(2852) =< s(2826)
s(2851) =< s(2835)
s(2834) =< s(2835)
s(2849) =< s(2835)
s(2851) =< s(2836)
s(2834) =< s(2836)
s(2849) =< s(2836)
s(2857) =< s(2851)*aux(246)
s(2855) =< s(2834)*s(2819)
s(2849) =< s(2850)+s(2812)
s(2858) =< s(2852)*s(2818)
s(2849) =< s(2858)+s(2857)+s(2826)
s(2855) =< s(2858)+s(2857)+s(2826)
s(2790) =< aux(245)
s(2789) =< aux(245)
s(2786) =< aux(242)

Unbounded itvars
s(2859) :  eq(318,2),s(1941)

  with precondition: [D=1,H=1,L=1,A=I,A>=2,E>=2,B+2>=2*A,J+2>=2*A,F+2>=2*E,C>=A,K>=A,G>=E] 


#### Simplifying cost structure of CE 319 

#### Simplifying cost structure of CE 320 
 * Renamed intermediate variables: 
[ (eq(321,1),aux(99))>>s(2980), (eq(321,1),aux(102))>>s(2981), (eq(321,1),aux(105))>>s(2982), (eq(321,1),aux(104))>>s(2983), (eq(321,1),aux(106))>>s(2984), (eq(321,1),aux(107))>>s(2985), (eq(321,1),aux(108))>>s(2986), (eq(321,1),aux(109))>>s(2987), (eq(321,1),aux(110))>>s(2988), (eq(321,1),it(183))>>s(2989), (eq(321,1),it(184))>>s(2990), (eq(321,1),it(185))>>s(2991), (eq(321,1),it(186))>>s(2992), (eq(321,1),it(187))>>s(2993), (eq(321,1),s(1229))>>s(2994)]
 * Renamed intermediate variables: 
[ (eq(321,2),s(1205))>>s(2995), (eq(321,2),s(1206))>>s(2996)]

#### Simplifying cost structure of CE 321 
 * Joined equivalent variables [aux(253),s(2984),s(2995)] into aux(253)
 * Renamed intermediate variables: 
[ (eq(325,1),aux(91))>>s(2997), (eq(325,1),aux(102))>>s(2998), (eq(325,1),aux(105))>>s(2999), (eq(325,1),aux(104))>>s(3000), (eq(325,1),aux(111))>>s(3001), (eq(325,1),aux(112))>>s(3002), (eq(325,1),aux(113))>>s(3003), (eq(325,1),aux(114))>>s(3004), (eq(325,1),aux(115))>>s(3005), (eq(325,1),it(183))>>s(3006), (eq(325,1),it(184))>>s(3007), (eq(325,1),it(185))>>s(3008), (eq(325,1),it(186))>>s(3009), (eq(325,1),it(187))>>s(3010), (eq(325,1),s(1229))>>s(3011)]
 * Renamed intermediate variables: 
[ (eq(325,2),s(1205))>>s(3012), (eq(325,2),s(1206))>>s(3013)]

#### Simplifying cost structure of CE 325 
 * Joined equivalent variables [aux(254),s(3005),s(3012)] into aux(254)
 * Renamed intermediate variables: 
[ (eq(322,1),aux(99))>>s(3014), (eq(322,1),aux(102))>>s(3015), (eq(322,1),aux(105))>>s(3016), (eq(322,1),aux(104))>>s(3017), (eq(322,1),aux(106))>>s(3018), (eq(322,1),aux(107))>>s(3019), (eq(322,1),aux(108))>>s(3020), (eq(322,1),aux(109))>>s(3021), (eq(322,1),aux(110))>>s(3022), (eq(322,1),it(183))>>s(3023), (eq(322,1),it(184))>>s(3024), (eq(322,1),it(185))>>s(3025), (eq(322,1),it(186))>>s(3026), (eq(322,1),it(187))>>s(3027), (eq(322,1),s(1229))>>s(3028)]
 * Renamed intermediate variables: 
[ (eq(322,2),s(1207))>>s(3029), (eq(322,2),s(1208))>>s(3030), (eq(322,2),s(1209))>>s(3031), (eq(322,2),s(1210))>>s(3032), (eq(322,2),s(1211))>>s(3033), (eq(322,2),s(1212))>>s(3034), (eq(322,2),s(1213))>>s(3035), (eq(322,2),s(1214))>>s(3036), (eq(322,2),s(1215))>>s(3037)]

#### Simplifying cost structure of CE 322 
 * Joined equivalent variables [aux(255),s(3019)] into aux(255)
 * Joined equivalent variables [aux(258),s(3022)] into aux(258)
 * Joined equivalent variables [aux(259),s(3018),s(3030)] into aux(259)
 * Renamed intermediate variables: 
[ (eq(326,1),aux(91))>>s(3038), (eq(326,1),aux(102))>>s(3039), (eq(326,1),aux(105))>>s(3040), (eq(326,1),aux(104))>>s(3041), (eq(326,1),aux(111))>>s(3042), (eq(326,1),aux(112))>>s(3043), (eq(326,1),aux(113))>>s(3044), (eq(326,1),aux(114))>>s(3045), (eq(326,1),aux(115))>>s(3046), (eq(326,1),it(183))>>s(3047), (eq(326,1),it(184))>>s(3048), (eq(326,1),it(185))>>s(3049), (eq(326,1),it(186))>>s(3050), (eq(326,1),it(187))>>s(3051), (eq(326,1),s(1229))>>s(3052)]
 * Renamed intermediate variables: 
[ (eq(326,2),s(1207))>>s(3053), (eq(326,2),s(1208))>>s(3054), (eq(326,2),s(1209))>>s(3055), (eq(326,2),s(1210))>>s(3056), (eq(326,2),s(1211))>>s(3057), (eq(326,2),s(1212))>>s(3058), (eq(326,2),s(1213))>>s(3059), (eq(326,2),s(1214))>>s(3060), (eq(326,2),s(1215))>>s(3061)]

#### Simplifying cost structure of CE 326 
 * Joined equivalent variables [aux(260),s(3042)] into aux(260)
 * Joined equivalent variables [aux(263),s(3046),s(3054)] into aux(263)
 * Joined equivalent variables [aux(264),s(3045)] into aux(264)
 * Renamed intermediate variables: 
[ (eq(323,1),aux(99))>>s(3062), (eq(323,1),aux(102))>>s(3063), (eq(323,1),aux(105))>>s(3064), (eq(323,1),aux(104))>>s(3065), (eq(323,1),aux(106))>>s(3066), (eq(323,1),aux(107))>>s(3067), (eq(323,1),aux(108))>>s(3068), (eq(323,1),aux(109))>>s(3069), (eq(323,1),aux(110))>>s(3070), (eq(323,1),it(183))>>s(3071), (eq(323,1),it(184))>>s(3072), (eq(323,1),it(185))>>s(3073), (eq(323,1),it(186))>>s(3074), (eq(323,1),it(187))>>s(3075), (eq(323,1),s(1229))>>s(3076)]
 * Renamed intermediate variables: 
[ (eq(323,2),s(1216))>>s(3077)]

#### Simplifying cost structure of CE 323 
 * Joined equivalent variables [aux(265),s(3066)] into aux(265)
 * Renamed intermediate variables: 
[ (eq(327,1),aux(91))>>s(3078), (eq(327,1),aux(102))>>s(3079), (eq(327,1),aux(105))>>s(3080), (eq(327,1),aux(104))>>s(3081), (eq(327,1),aux(111))>>s(3082), (eq(327,1),aux(112))>>s(3083), (eq(327,1),aux(113))>>s(3084), (eq(327,1),aux(114))>>s(3085), (eq(327,1),aux(115))>>s(3086), (eq(327,1),it(183))>>s(3087), (eq(327,1),it(184))>>s(3088), (eq(327,1),it(185))>>s(3089), (eq(327,1),it(186))>>s(3090), (eq(327,1),it(187))>>s(3091), (eq(327,1),s(1229))>>s(3092)]
 * Renamed intermediate variables: 
[ (eq(327,2),s(1216))>>s(3093)]

#### Simplifying cost structure of CE 327 
 * Joined equivalent variables [aux(266),s(3086)] into aux(266)
 * Renamed intermediate variables: 
[ (eq(324,1),aux(99))>>s(3094), (eq(324,1),aux(102))>>s(3095), (eq(324,1),aux(105))>>s(3096), (eq(324,1),aux(104))>>s(3097), (eq(324,1),aux(106))>>s(3098), (eq(324,1),aux(107))>>s(3099), (eq(324,1),aux(108))>>s(3100), (eq(324,1),aux(109))>>s(3101), (eq(324,1),aux(110))>>s(3102), (eq(324,1),it(183))>>s(3103), (eq(324,1),it(184))>>s(3104), (eq(324,1),it(185))>>s(3105), (eq(324,1),it(186))>>s(3106), (eq(324,1),it(187))>>s(3107), (eq(324,1),s(1229))>>s(3108)]
 * Renamed intermediate variables: 
[ (eq(324,2),s(1219))>>s(3109), (eq(324,2),s(1217))>>s(3110), (eq(324,2),s(1218))>>s(3111), (eq(324,2),s(1220))>>s(3112)]

#### Simplifying cost structure of CE 324 
 * Joined equivalent variables [aux(267),s(3099)] into aux(267)
 * Joined equivalent variables [aux(268),s(3102)] into aux(268)
 * Joined equivalent variables [aux(269),s(3098),s(3109)] into aux(269)
 * Joined equivalent variables [s(3108),s(3111)] into s(3108)
 * Renamed intermediate variables: 
[ (eq(328,1),aux(91))>>s(3113), (eq(328,1),aux(102))>>s(3114), (eq(328,1),aux(105))>>s(3115), (eq(328,1),aux(104))>>s(3116), (eq(328,1),aux(111))>>s(3117), (eq(328,1),aux(112))>>s(3118), (eq(328,1),aux(113))>>s(3119), (eq(328,1),aux(114))>>s(3120), (eq(328,1),aux(115))>>s(3121), (eq(328,1),it(183))>>s(3122), (eq(328,1),it(184))>>s(3123), (eq(328,1),it(185))>>s(3124), (eq(328,1),it(186))>>s(3125), (eq(328,1),it(187))>>s(3126), (eq(328,1),s(1229))>>s(3127)]
 * Renamed intermediate variables: 
[ (eq(328,2),s(1219))>>s(3128), (eq(328,2),s(1217))>>s(3129), (eq(328,2),s(1218))>>s(3130), (eq(328,2),s(1220))>>s(3131)]

#### Simplifying cost structure of CE 328 
 * Joined equivalent variables [aux(270),s(3117)] into aux(270)
 * Joined equivalent variables [aux(271),s(3121),s(3128)] into aux(271)
 * Joined equivalent variables [aux(272),s(3120)] into aux(272)
 * Joined equivalent variables [s(3127),s(3130)] into s(3127)

#### Cost of chains of case_20(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q):
* Chain [226]: 21
  with precondition: [A=1,B=0,D=1,H=1,I=0,K=1,L=0,N=1,O=0,Q=1,C=J+M,E>=1,F>=0,G>=0,J>=0,C>=J,P>=J] 

* Chain [225]: 24
  with precondition: [D=1,E=1,F=0,H=1,I=0,N=1,O=0,Q=1,K=A,L=B,C=J+M,G>=0,J>=0,K>=2,L>=1,C>=J,P>=J] 

* Chain [224]: 15*s(2989)+24*s(2990)+15*s(2991)+12*s(2992)+15*s(2993)+52*s(2994)+16*s(2996)+21
  Such that:s(2985) =< B
s(2986) =< B/2
s(2987) =< B/3
s(2980) =< E
s(2988) =< F
s(2981) =< F+1
s(2982) =< F/2
s(2983) =< F/2+1/2
aux(253) =< A
s(2996) =< aux(253)
s(2989) =< aux(253)
s(2990) =< aux(253)
s(2991) =< aux(253)
s(2992) =< aux(253)
s(2993) =< aux(253)
s(2989) =< s(2985)
s(2990) =< s(2985)
s(2991) =< s(2985)
s(2992) =< s(2985)
s(2993) =< s(2985)
s(2994) =< s(2985)
s(2990) =< s(2986)
s(2991) =< s(2986)
s(2993) =< s(2986)
s(2989) =< s(2987)
s(2993) =< s(2987)
s(2989) =< s(2980)
s(2990) =< s(2980)
s(2991) =< s(2980)
s(2992) =< s(2980)
s(2993) =< s(2980)
s(2990) =< s(2988)
s(2991) =< s(2988)
s(2992) =< s(2988)
s(2993) =< s(2988)
s(2994) =< s(2988)
s(2989) =< s(2981)
s(2990) =< s(2981)
s(2991) =< s(2981)
s(2992) =< s(2981)
s(2993) =< s(2981)
s(2989) =< s(2988)
s(2989) =< s(2983)
s(2990) =< s(2983)
s(2993) =< s(2983)
s(2989) =< s(2982)
s(2990) =< s(2982)
s(2993) =< s(2982)

  with precondition: [D=1,H=1,J=0,Q=1,L=B,A=I+1,A=K,A=N,A=O+1,A+M=C+1,A>=2,G>=0,C+1>=A,E>=A,F+1>=A,L+1>=A,P+1>=A] 

* Chain [223]: 15*s(3006)+24*s(3007)+15*s(3008)+12*s(3009)+15*s(3010)+52*s(3011)+16*s(3013)+24
  Such that:s(2997) =< A
s(3001) =< B
s(3002) =< B/2
s(3003) =< B/3
s(3004) =< F
s(2998) =< F+1
s(2999) =< F/2
s(3000) =< F/2+1/2
aux(254) =< E
s(3013) =< aux(254)
s(3006) =< s(2997)
s(3007) =< s(2997)
s(3008) =< s(2997)
s(3009) =< s(2997)
s(3010) =< s(2997)
s(3006) =< aux(254)
s(3007) =< aux(254)
s(3008) =< aux(254)
s(3009) =< aux(254)
s(3010) =< aux(254)
s(3006) =< s(3001)
s(3007) =< s(3001)
s(3008) =< s(3001)
s(3009) =< s(3001)
s(3010) =< s(3001)
s(3011) =< s(3001)
s(3007) =< s(3002)
s(3008) =< s(3002)
s(3010) =< s(3002)
s(3006) =< s(3003)
s(3010) =< s(3003)
s(3007) =< s(3004)
s(3008) =< s(3004)
s(3009) =< s(3004)
s(3010) =< s(3004)
s(3011) =< s(3004)
s(3006) =< s(2998)
s(3007) =< s(2998)
s(3008) =< s(2998)
s(3009) =< s(2998)
s(3010) =< s(2998)
s(3006) =< s(3004)
s(3006) =< s(3000)
s(3007) =< s(3000)
s(3010) =< s(3000)
s(3006) =< s(2999)
s(3007) =< s(2999)
s(3010) =< s(2999)

  with precondition: [D=1,H=1,J=0,Q=1,K=A,L=B,I+1=E,I+1=N,I=O,I+M=C,G>=0,I>=1,C>=I,F>=I,K>=I+2,L>=I+1,P>=I] 

* Chain [222]: 15*s(3023)+24*s(3024)+15*s(3025)+12*s(3026)+15*s(3027)+52*s(3028)+6*s(3029)+6*s(3031)+10*s(3034)+10*s(3035)+12*s(3036)+6*s(3037)+32
  Such that:s(3020) =< B/2
s(3021) =< B/3
s(3014) =< E
s(3015) =< F+1
s(3016) =< F/2
s(3017) =< F/2+1/2
aux(255) =< B
aux(256) =< B-C+K+M
aux(257) =< -C+F+K+M
aux(258) =< F
aux(259) =< K
s(3033) =< aux(255)
s(3031) =< aux(256)
s(3032) =< aux(256)
s(3031) =< aux(257)
s(3032) =< aux(257)
s(3033) =< aux(258)
s(3029) =< aux(259)
s(3034) =< aux(259)
s(3035) =< aux(259)
s(3036) =< s(3033)
s(3037) =< s(3033)
s(3031) =< s(3033)
s(3034) =< s(3032)
s(3037) =< s(3032)
s(3035) =< s(3033)
s(3023) =< aux(259)
s(3024) =< aux(259)
s(3025) =< aux(259)
s(3026) =< aux(259)
s(3027) =< aux(259)
s(3023) =< aux(255)
s(3024) =< aux(255)
s(3025) =< aux(255)
s(3026) =< aux(255)
s(3027) =< aux(255)
s(3028) =< aux(255)
s(3024) =< s(3020)
s(3025) =< s(3020)
s(3027) =< s(3020)
s(3023) =< s(3021)
s(3027) =< s(3021)
s(3023) =< s(3014)
s(3024) =< s(3014)
s(3025) =< s(3014)
s(3026) =< s(3014)
s(3027) =< s(3014)
s(3024) =< aux(258)
s(3025) =< aux(258)
s(3026) =< aux(258)
s(3027) =< aux(258)
s(3028) =< aux(258)
s(3023) =< s(3015)
s(3024) =< s(3015)
s(3025) =< s(3015)
s(3026) =< s(3015)
s(3027) =< s(3015)
s(3023) =< aux(258)
s(3023) =< s(3017)
s(3024) =< s(3017)
s(3027) =< s(3017)
s(3023) =< s(3016)
s(3024) =< s(3016)
s(3027) =< s(3016)

  with precondition: [D=1,H=1,N=1,O=0,Q=1,L=B,A=I+1,A=K,A+J+M=C+1,A>=2,G>=0,J>=0,P>=0,E>=A,F+1>=A,L+1>=A,F>=J+2,L>=J+2,C+1>=A+J] 

* Chain [221]: 15*s(3047)+24*s(3048)+15*s(3049)+12*s(3050)+15*s(3051)+52*s(3052)+6*s(3053)+6*s(3055)+10*s(3058)+10*s(3059)+12*s(3060)+6*s(3061)+35
  Such that:s(3043) =< B/2
s(3044) =< B/3
s(3039) =< F+1
s(3040) =< F/2
s(3041) =< F/2+1/2
s(3038) =< K
aux(260) =< B
aux(261) =< B-C+E+M
aux(262) =< -C+E+F+M
aux(263) =< E
aux(264) =< F
s(3057) =< aux(260)
s(3055) =< aux(261)
s(3056) =< aux(261)
s(3055) =< aux(262)
s(3056) =< aux(262)
s(3053) =< aux(263)
s(3057) =< aux(264)
s(3058) =< aux(263)
s(3059) =< aux(263)
s(3060) =< s(3057)
s(3061) =< s(3057)
s(3055) =< s(3057)
s(3058) =< s(3056)
s(3061) =< s(3056)
s(3059) =< s(3057)
s(3047) =< s(3038)
s(3048) =< s(3038)
s(3049) =< s(3038)
s(3050) =< s(3038)
s(3051) =< s(3038)
s(3047) =< aux(263)
s(3048) =< aux(263)
s(3049) =< aux(263)
s(3050) =< aux(263)
s(3051) =< aux(263)
s(3047) =< aux(260)
s(3048) =< aux(260)
s(3049) =< aux(260)
s(3050) =< aux(260)
s(3051) =< aux(260)
s(3052) =< aux(260)
s(3048) =< s(3043)
s(3049) =< s(3043)
s(3051) =< s(3043)
s(3047) =< s(3044)
s(3051) =< s(3044)
s(3048) =< aux(264)
s(3049) =< aux(264)
s(3050) =< aux(264)
s(3051) =< aux(264)
s(3052) =< aux(264)
s(3047) =< s(3039)
s(3048) =< s(3039)
s(3049) =< s(3039)
s(3050) =< s(3039)
s(3051) =< s(3039)
s(3047) =< aux(264)
s(3047) =< s(3041)
s(3048) =< s(3041)
s(3051) =< s(3041)
s(3047) =< s(3040)
s(3048) =< s(3040)
s(3051) =< s(3040)

  with precondition: [D=1,H=1,N=1,O=0,Q=1,K=A,L=B,I+1=E,I+J+M=C,G>=0,I>=1,J>=0,P>=0,F>=I,K>=I+2,L>=I+1,F>=J+2,L>=J+3,C>=I+J] 

* Chain [220]: 15*s(3071)+24*s(3072)+15*s(3073)+12*s(3074)+15*s(3075)+52*s(3076)+6*s(3077)+22
  Such that:s(3067) =< B
s(3068) =< B/2
s(3069) =< B/3
s(3062) =< E
s(3070) =< F
s(3063) =< F+1
s(3064) =< F/2
s(3065) =< F/2+1/2
aux(265) =< K
s(3077) =< aux(265)
s(3071) =< aux(265)
s(3072) =< aux(265)
s(3073) =< aux(265)
s(3074) =< aux(265)
s(3075) =< aux(265)
s(3071) =< s(3067)
s(3072) =< s(3067)
s(3073) =< s(3067)
s(3074) =< s(3067)
s(3075) =< s(3067)
s(3076) =< s(3067)
s(3072) =< s(3068)
s(3073) =< s(3068)
s(3075) =< s(3068)
s(3071) =< s(3069)
s(3075) =< s(3069)
s(3071) =< s(3062)
s(3072) =< s(3062)
s(3073) =< s(3062)
s(3074) =< s(3062)
s(3075) =< s(3062)
s(3072) =< s(3070)
s(3073) =< s(3070)
s(3074) =< s(3070)
s(3075) =< s(3070)
s(3076) =< s(3070)
s(3071) =< s(3063)
s(3072) =< s(3063)
s(3073) =< s(3063)
s(3074) =< s(3063)
s(3075) =< s(3063)
s(3071) =< s(3070)
s(3071) =< s(3065)
s(3072) =< s(3065)
s(3075) =< s(3065)
s(3071) =< s(3064)
s(3072) =< s(3064)
s(3075) =< s(3064)

  with precondition: [D=1,H=1,N=1,O=0,Q=1,K=A,L=B,C=I+J+M,G>=0,I>=0,J>=0,P>=0,K>=I+2,E>=K,F+1>=K,L+1>=K,C>=I+J] 

* Chain [219]: 15*s(3087)+24*s(3088)+15*s(3089)+12*s(3090)+15*s(3091)+52*s(3092)+6*s(3093)+25
  Such that:s(3082) =< B
s(3083) =< B/2
s(3084) =< B/3
s(3085) =< F
s(3079) =< F+1
s(3080) =< F/2
s(3081) =< F/2+1/2
s(3078) =< K
aux(266) =< E
s(3093) =< aux(266)
s(3087) =< s(3078)
s(3088) =< s(3078)
s(3089) =< s(3078)
s(3090) =< s(3078)
s(3091) =< s(3078)
s(3087) =< aux(266)
s(3088) =< aux(266)
s(3089) =< aux(266)
s(3090) =< aux(266)
s(3091) =< aux(266)
s(3087) =< s(3082)
s(3088) =< s(3082)
s(3089) =< s(3082)
s(3090) =< s(3082)
s(3091) =< s(3082)
s(3092) =< s(3082)
s(3088) =< s(3083)
s(3089) =< s(3083)
s(3091) =< s(3083)
s(3087) =< s(3084)
s(3091) =< s(3084)
s(3088) =< s(3085)
s(3089) =< s(3085)
s(3090) =< s(3085)
s(3091) =< s(3085)
s(3092) =< s(3085)
s(3087) =< s(3079)
s(3088) =< s(3079)
s(3089) =< s(3079)
s(3090) =< s(3079)
s(3091) =< s(3079)
s(3087) =< s(3085)
s(3087) =< s(3081)
s(3088) =< s(3081)
s(3091) =< s(3081)
s(3087) =< s(3080)
s(3088) =< s(3080)
s(3091) =< s(3080)

  with precondition: [D=1,H=1,N=1,O=0,Q=1,K=A,L=B,I+J+M=C,G>=0,I>=0,J>=0,M>=0,P>=0,F+1>=E,K>=E+1,L>=E,E>=I+2] 

* Chain [218]: 15*s(3103)+24*s(3104)+15*s(3105)+12*s(3106)+15*s(3107)+58*s(3108)+10*s(3110)+6*s(3112)+21
  Such that:s(3100) =< B/2
s(3110) =< B/2-C/2+K/2+M/2
s(3101) =< B/3
s(3110) =< -C/2+F/2+K/2+M/2
s(3094) =< E
s(3095) =< F+1
s(3096) =< F/2
s(3097) =< F/2+1/2
aux(267) =< B
aux(268) =< F
aux(269) =< K
s(3108) =< aux(267)
s(3108) =< aux(268)
s(3112) =< aux(269)
s(3110) =< aux(269)
s(3103) =< aux(269)
s(3104) =< aux(269)
s(3105) =< aux(269)
s(3106) =< aux(269)
s(3107) =< aux(269)
s(3103) =< aux(267)
s(3104) =< aux(267)
s(3105) =< aux(267)
s(3106) =< aux(267)
s(3107) =< aux(267)
s(3104) =< s(3100)
s(3105) =< s(3100)
s(3107) =< s(3100)
s(3103) =< s(3101)
s(3107) =< s(3101)
s(3103) =< s(3094)
s(3104) =< s(3094)
s(3105) =< s(3094)
s(3106) =< s(3094)
s(3107) =< s(3094)
s(3104) =< aux(268)
s(3105) =< aux(268)
s(3106) =< aux(268)
s(3107) =< aux(268)
s(3103) =< s(3095)
s(3104) =< s(3095)
s(3105) =< s(3095)
s(3106) =< s(3095)
s(3107) =< s(3095)
s(3103) =< aux(268)
s(3103) =< s(3097)
s(3104) =< s(3097)
s(3107) =< s(3097)
s(3103) =< s(3096)
s(3104) =< s(3096)
s(3107) =< s(3096)

  with precondition: [D=1,H=1,Q=1,L=B,A=I+1,A=K,A=N,A+J+M=C+1,A>=2,G>=0,J>=1,E>=A,F>=O,L>=O,O+3>=2*A+J,C+1>=A+J,P+1>=A+J] 

* Chain [217]: 15*s(3122)+24*s(3123)+15*s(3124)+12*s(3125)+15*s(3126)+58*s(3127)+10*s(3129)+6*s(3131)+24
  Such that:s(3118) =< B/2
s(3129) =< B/2-C/2+E/2+M/2
s(3119) =< B/3
s(3129) =< -C/2+E/2+F/2+M/2
s(3114) =< F+1
s(3115) =< F/2
s(3116) =< F/2+1/2
s(3113) =< K
aux(270) =< B
aux(271) =< E
aux(272) =< F
s(3127) =< aux(270)
s(3127) =< aux(272)
s(3131) =< aux(271)
s(3129) =< aux(271)
s(3122) =< s(3113)
s(3123) =< s(3113)
s(3124) =< s(3113)
s(3125) =< s(3113)
s(3126) =< s(3113)
s(3122) =< aux(271)
s(3123) =< aux(271)
s(3124) =< aux(271)
s(3125) =< aux(271)
s(3126) =< aux(271)
s(3122) =< aux(270)
s(3123) =< aux(270)
s(3124) =< aux(270)
s(3125) =< aux(270)
s(3126) =< aux(270)
s(3123) =< s(3118)
s(3124) =< s(3118)
s(3126) =< s(3118)
s(3122) =< s(3119)
s(3126) =< s(3119)
s(3123) =< aux(272)
s(3124) =< aux(272)
s(3125) =< aux(272)
s(3126) =< aux(272)
s(3122) =< s(3114)
s(3123) =< s(3114)
s(3124) =< s(3114)
s(3125) =< s(3114)
s(3126) =< s(3114)
s(3122) =< aux(272)
s(3122) =< s(3116)
s(3123) =< s(3116)
s(3126) =< s(3116)
s(3122) =< s(3115)
s(3123) =< s(3115)
s(3126) =< s(3115)

  with precondition: [D=1,H=1,Q=1,K=A,L=B,I+1=E,I+1=N,I+J+M=C,G>=0,I>=1,J>=1,K>=I+2,F>=O,L>=O+1,O+1>=2*I+J,C>=I+J,P>=I+J] 


#### Simplifying cost structure of CE 339 

#### Simplifying cost structure of CE 329 

#### Simplifying cost structure of CE 330 
 * Renamed intermediate variables: 
[ (eq(335,1),s(3067))>>s(3132), (eq(335,1),s(3068))>>s(3133), (eq(335,1),s(3069))>>s(3134), (eq(335,1),s(3062))>>s(3135), (eq(335,1),s(3070))>>s(3136), (eq(335,1),s(3063))>>s(3137), (eq(335,1),s(3064))>>s(3138), (eq(335,1),s(3065))>>s(3139), (eq(335,1),aux(265))>>s(3140), (eq(335,1),s(3077))>>s(3141), (eq(335,1),s(3071))>>s(3142), (eq(335,1),s(3072))>>s(3143), (eq(335,1),s(3073))>>s(3144), (eq(335,1),s(3074))>>s(3145), (eq(335,1),s(3075))>>s(3146), (eq(335,1),s(3076))>>s(3147)]

#### Simplifying cost structure of CE 335 
 * Renamed intermediate variables: 
[ (eq(336,1),s(3020))>>s(3148), (eq(336,1),s(3021))>>s(3149), (eq(336,1),s(3014))>>s(3150), (eq(336,1),s(3015))>>s(3151), (eq(336,1),s(3016))>>s(3152), (eq(336,1),s(3017))>>s(3153), (eq(336,1),aux(255))>>s(3154), (eq(336,1),aux(256))>>s(3155), (eq(336,1),aux(257))>>s(3156), (eq(336,1),aux(258))>>s(3157), (eq(336,1),aux(259))>>s(3158), (eq(336,1),s(3033))>>s(3159), (eq(336,1),s(3031))>>s(3160), (eq(336,1),s(3032))>>s(3161), (eq(336,1),s(3029))>>s(3162), (eq(336,1),s(3034))>>s(3163), (eq(336,1),s(3035))>>s(3164), (eq(336,1),s(3036))>>s(3165), (eq(336,1),s(3037))>>s(3166), (eq(336,1),s(3023))>>s(3167), (eq(336,1),s(3024))>>s(3168), (eq(336,1),s(3025))>>s(3169), (eq(336,1),s(3026))>>s(3170), (eq(336,1),s(3027))>>s(3171), (eq(336,1),s(3028))>>s(3172)]

#### Simplifying cost structure of CE 336 
 * Joined equivalent variables [aux(273),s(3151),s(3156)] into aux(273)
 * Joined equivalent variables [aux(274),s(3140),s(3158)] into aux(274)
 * Joined equivalent variables [aux(275),s(3132),s(3154)] into aux(275)
 * Joined equivalent variables [aux(276),s(3133),s(3148)] into aux(276)
 * Joined equivalent variables [aux(277),s(3134),s(3149)] into aux(277)
 * Joined equivalent variables [aux(278),s(3135),s(3150)] into aux(278)
 * Joined equivalent variables [aux(279),s(3136),s(3157)] into aux(279)
 * Joined equivalent variables [aux(280),aux(273),s(3137)] into aux(280)
 * Joined equivalent variables [aux(281),s(3138),s(3152)] into aux(281)
 * Joined equivalent variables [aux(282),s(3139),s(3153)] into aux(282)
 * Joined equivalent variables [s(3141),s(3162)] into s(3141)
 * Joined equivalent variables [s(3146),s(3171)] into s(3146)
 * Joined equivalent variables [s(3144),s(3169)] into s(3144)
 * Joined equivalent variables [s(3143),s(3168)] into s(3143)
 * Joined equivalent variables [s(3142),s(3167)] into s(3142)
 * Joined equivalent variables [s(3145),s(3170)] into s(3145)
 * Joined equivalent variables [s(3147),s(3172)] into s(3147)
 * Renamed intermediate variables: 
[ (eq(333,1),s(3043))>>s(3173), (eq(333,1),s(3044))>>s(3174), (eq(333,1),s(3039))>>s(3175), (eq(333,1),s(3040))>>s(3176), (eq(333,1),s(3041))>>s(3177), (eq(333,1),s(3038))>>s(3178), (eq(333,1),aux(260))>>s(3179), (eq(333,1),aux(261))>>s(3180), (eq(333,1),aux(262))>>s(3181), (eq(333,1),aux(263))>>s(3182), (eq(333,1),aux(264))>>s(3183), (eq(333,1),s(3057))>>s(3184), (eq(333,1),s(3055))>>s(3185), (eq(333,1),s(3056))>>s(3186), (eq(333,1),s(3053))>>s(3187), (eq(333,1),s(3058))>>s(3188), (eq(333,1),s(3059))>>s(3189), (eq(333,1),s(3060))>>s(3190), (eq(333,1),s(3061))>>s(3191), (eq(333,1),s(3047))>>s(3192), (eq(333,1),s(3048))>>s(3193), (eq(333,1),s(3049))>>s(3194), (eq(333,1),s(3050))>>s(3195), (eq(333,1),s(3051))>>s(3196), (eq(333,1),s(3052))>>s(3197)]

#### Simplifying cost structure of CE 333 
 * Joined equivalent variables [aux(283),s(3175),s(3181)] into aux(283)
 * Renamed intermediate variables: 
[ (eq(334,1),s(3082))>>s(3198), (eq(334,1),s(3083))>>s(3199), (eq(334,1),s(3084))>>s(3200), (eq(334,1),s(3085))>>s(3201), (eq(334,1),s(3079))>>s(3202), (eq(334,1),s(3080))>>s(3203), (eq(334,1),s(3081))>>s(3204), (eq(334,1),s(3078))>>s(3205), (eq(334,1),aux(266))>>s(3206), (eq(334,1),s(3093))>>s(3207), (eq(334,1),s(3087))>>s(3208), (eq(334,1),s(3088))>>s(3209), (eq(334,1),s(3089))>>s(3210), (eq(334,1),s(3090))>>s(3211), (eq(334,1),s(3091))>>s(3212), (eq(334,1),s(3092))>>s(3213)]

#### Simplifying cost structure of CE 334 
 * Joined equivalent variables [aux(284),s(3178),s(3205)] into aux(284)
 * Joined equivalent variables [aux(285),s(3179),s(3198)] into aux(285)
 * Joined equivalent variables [aux(286),s(3173),s(3199)] into aux(286)
 * Joined equivalent variables [aux(287),s(3174),s(3200)] into aux(287)
 * Joined equivalent variables [aux(288),s(3182),s(3206)] into aux(288)
 * Joined equivalent variables [aux(289),s(3183),s(3201)] into aux(289)
 * Joined equivalent variables [aux(290),aux(283),s(3202)] into aux(290)
 * Joined equivalent variables [aux(291),s(3176),s(3203)] into aux(291)
 * Joined equivalent variables [aux(292),s(3177),s(3204)] into aux(292)
 * Joined equivalent variables [s(3196),s(3212)] into s(3196)
 * Joined equivalent variables [s(3194),s(3210)] into s(3194)
 * Joined equivalent variables [s(3193),s(3209)] into s(3193)
 * Joined equivalent variables [s(3192),s(3208)] into s(3192)
 * Joined equivalent variables [s(3195),s(3211)] into s(3195)
 * Joined equivalent variables [s(3197),s(3213)] into s(3197)
 * Joined equivalent variables [s(3187),s(3207)] into s(3187)
 * Renamed intermediate variables: 
[ (eq(337,1),s(3118))>>s(3214), (eq(337,1),s(3129))>>s(3215), (eq(337,1),s(3119))>>s(3216), (eq(337,1),s(3114))>>s(3217), (eq(337,1),s(3115))>>s(3218), (eq(337,1),s(3116))>>s(3219), (eq(337,1),s(3113))>>s(3220), (eq(337,1),aux(270))>>s(3221), (eq(337,1),aux(271))>>s(3222), (eq(337,1),aux(272))>>s(3223), (eq(337,1),s(3127))>>s(3224), (eq(337,1),s(3131))>>s(3225), (eq(337,1),s(3122))>>s(3226), (eq(337,1),s(3123))>>s(3227), (eq(337,1),s(3124))>>s(3228), (eq(337,1),s(3125))>>s(3229), (eq(337,1),s(3126))>>s(3230)]

#### Simplifying cost structure of CE 337 
 * Joined equivalent variables [aux(293),s(3214)] into aux(293)
 * Joined equivalent variables [aux(294),s(3218)] into aux(294)
 * Renamed intermediate variables: 
[ (eq(332,1),s(2985))>>s(3231), (eq(332,1),s(2986))>>s(3232), (eq(332,1),s(2987))>>s(3233), (eq(332,1),s(2980))>>s(3234), (eq(332,1),s(2988))>>s(3235), (eq(332,1),s(2981))>>s(3236), (eq(332,1),s(2982))>>s(3237), (eq(332,1),s(2983))>>s(3238), (eq(332,1),aux(253))>>s(3239), (eq(332,1),s(2996))>>s(3240), (eq(332,1),s(2989))>>s(3241), (eq(332,1),s(2990))>>s(3242), (eq(332,1),s(2991))>>s(3243), (eq(332,1),s(2992))>>s(3244), (eq(332,1),s(2993))>>s(3245), (eq(332,1),s(2994))>>s(3246)]

#### Simplifying cost structure of CE 332 
 * Renamed intermediate variables: 
[ (eq(338,1),s(3100))>>s(3247), (eq(338,1),s(3110))>>s(3248), (eq(338,1),s(3101))>>s(3249), (eq(338,1),s(3094))>>s(3250), (eq(338,1),s(3095))>>s(3251), (eq(338,1),s(3096))>>s(3252), (eq(338,1),s(3097))>>s(3253), (eq(338,1),aux(267))>>s(3254), (eq(338,1),aux(268))>>s(3255), (eq(338,1),aux(269))>>s(3256), (eq(338,1),s(3108))>>s(3257), (eq(338,1),s(3112))>>s(3258), (eq(338,1),s(3103))>>s(3259), (eq(338,1),s(3104))>>s(3260), (eq(338,1),s(3105))>>s(3261), (eq(338,1),s(3106))>>s(3262), (eq(338,1),s(3107))>>s(3263)]

#### Simplifying cost structure of CE 338 
 * Joined equivalent variables [aux(295),s(3247)] into aux(295)
 * Joined equivalent variables [aux(296),s(3252)] into aux(296)
 * Renamed intermediate variables: 
[ (eq(331,1),s(2997))>>s(3264), (eq(331,1),s(3001))>>s(3265), (eq(331,1),s(3002))>>s(3266), (eq(331,1),s(3003))>>s(3267), (eq(331,1),s(3004))>>s(3268), (eq(331,1),s(2998))>>s(3269), (eq(331,1),s(2999))>>s(3270), (eq(331,1),s(3000))>>s(3271), (eq(331,1),aux(254))>>s(3272), (eq(331,1),s(3013))>>s(3273), (eq(331,1),s(3006))>>s(3274), (eq(331,1),s(3007))>>s(3275), (eq(331,1),s(3008))>>s(3276), (eq(331,1),s(3009))>>s(3277), (eq(331,1),s(3010))>>s(3278), (eq(331,1),s(3011))>>s(3279)]

#### Simplifying cost structure of CE 331 

#### Cost of chains of case_18(A,B,C,D,E,F,G,H,I,J,K,L,M):
* Chain [235]: 6
  with precondition: [A=0,J=1,K=0,M=1,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,L>=0] 

* Chain [234]: 25
  with precondition: [A=1,B=1,C=0,E=1,I=1,J=1,K=0,M=1,D>=0,F>=1,G>=0,H>=0,L>=0] 

* Chain [233]: 28
  with precondition: [A=1,E=1,F=1,G=0,I=1,J=1,K=0,M=1,B>=2,C>=1,D>=0,H>=0,L>=0] 

* Chain [232]: 12*s(3141)+30*s(3142)+48*s(3143)+30*s(3144)+24*s(3145)+30*s(3146)+104*s(3147)+6*s(3160)+10*s(3163)+10*s(3164)+12*s(3165)+6*s(3166)+36
  Such that:s(3155) =< C+1
aux(274) =< B
aux(275) =< C
aux(276) =< C/2
aux(277) =< C/3
aux(278) =< F
aux(279) =< G
aux(280) =< G+1
aux(281) =< G/2
aux(282) =< G/2+1/2
s(3141) =< aux(274)
s(3142) =< aux(274)
s(3143) =< aux(274)
s(3144) =< aux(274)
s(3145) =< aux(274)
s(3146) =< aux(274)
s(3142) =< aux(275)
s(3143) =< aux(275)
s(3144) =< aux(275)
s(3145) =< aux(275)
s(3146) =< aux(275)
s(3147) =< aux(275)
s(3143) =< aux(276)
s(3144) =< aux(276)
s(3146) =< aux(276)
s(3142) =< aux(277)
s(3146) =< aux(277)
s(3142) =< aux(278)
s(3143) =< aux(278)
s(3144) =< aux(278)
s(3145) =< aux(278)
s(3146) =< aux(278)
s(3143) =< aux(279)
s(3144) =< aux(279)
s(3145) =< aux(279)
s(3146) =< aux(279)
s(3147) =< aux(279)
s(3142) =< aux(280)
s(3143) =< aux(280)
s(3144) =< aux(280)
s(3145) =< aux(280)
s(3146) =< aux(280)
s(3142) =< aux(279)
s(3142) =< aux(282)
s(3143) =< aux(282)
s(3146) =< aux(282)
s(3142) =< aux(281)
s(3143) =< aux(281)
s(3146) =< aux(281)
s(3159) =< aux(275)
s(3160) =< s(3155)
s(3161) =< s(3155)
s(3160) =< aux(280)
s(3161) =< aux(280)
s(3159) =< aux(279)
s(3163) =< aux(274)
s(3164) =< aux(274)
s(3165) =< s(3159)
s(3166) =< s(3159)
s(3160) =< s(3159)
s(3163) =< s(3161)
s(3166) =< s(3161)
s(3164) =< s(3159)

  with precondition: [A=1,E=1,I=1,J=1,K=0,M=1,B>=2,D>=0,H>=0,L>=0,C+1>=B,F>=B,G+1>=B] 

* Chain [231]: 6*s(3185)+12*s(3187)+10*s(3188)+10*s(3189)+12*s(3190)+6*s(3191)+30*s(3192)+48*s(3193)+30*s(3194)+24*s(3195)+30*s(3196)+104*s(3197)+39
  Such that:s(3180) =< C+1
aux(284) =< B
aux(285) =< C
aux(286) =< C/2
aux(287) =< C/3
aux(288) =< F
aux(289) =< G
aux(290) =< G+1
aux(291) =< G/2
aux(292) =< G/2+1/2
s(3184) =< aux(285)
s(3185) =< s(3180)
s(3186) =< s(3180)
s(3185) =< aux(290)
s(3186) =< aux(290)
s(3187) =< aux(288)
s(3184) =< aux(289)
s(3188) =< aux(288)
s(3189) =< aux(288)
s(3190) =< s(3184)
s(3191) =< s(3184)
s(3185) =< s(3184)
s(3188) =< s(3186)
s(3191) =< s(3186)
s(3189) =< s(3184)
s(3192) =< aux(284)
s(3193) =< aux(284)
s(3194) =< aux(284)
s(3195) =< aux(284)
s(3196) =< aux(284)
s(3192) =< aux(288)
s(3193) =< aux(288)
s(3194) =< aux(288)
s(3195) =< aux(288)
s(3196) =< aux(288)
s(3192) =< aux(285)
s(3193) =< aux(285)
s(3194) =< aux(285)
s(3195) =< aux(285)
s(3196) =< aux(285)
s(3197) =< aux(285)
s(3193) =< aux(286)
s(3194) =< aux(286)
s(3196) =< aux(286)
s(3192) =< aux(287)
s(3196) =< aux(287)
s(3193) =< aux(289)
s(3194) =< aux(289)
s(3195) =< aux(289)
s(3196) =< aux(289)
s(3197) =< aux(289)
s(3192) =< aux(290)
s(3193) =< aux(290)
s(3194) =< aux(290)
s(3195) =< aux(290)
s(3196) =< aux(290)
s(3192) =< aux(289)
s(3192) =< aux(292)
s(3193) =< aux(292)
s(3196) =< aux(292)
s(3192) =< aux(291)
s(3193) =< aux(291)
s(3196) =< aux(291)

  with precondition: [A=1,E=1,I=1,J=1,K=0,M=1,D>=0,F>=2,H>=0,L>=0,B>=F+1,C>=F,G+1>=F] 

* Chain [230]: 10*s(3215)+58*s(3224)+6*s(3225)+15*s(3226)+24*s(3227)+15*s(3228)+12*s(3229)+15*s(3230)+28
  Such that:s(3220) =< B
s(3221) =< C
s(3216) =< C/3
s(3222) =< F
s(3223) =< G
s(3217) =< G+1
s(3219) =< G/2+1/2
aux(293) =< C/2
aux(294) =< G/2
s(3215) =< aux(293)
s(3215) =< aux(294)
s(3224) =< s(3221)
s(3224) =< s(3223)
s(3225) =< s(3222)
s(3215) =< s(3222)
s(3226) =< s(3220)
s(3227) =< s(3220)
s(3228) =< s(3220)
s(3229) =< s(3220)
s(3230) =< s(3220)
s(3226) =< s(3222)
s(3227) =< s(3222)
s(3228) =< s(3222)
s(3229) =< s(3222)
s(3230) =< s(3222)
s(3226) =< s(3221)
s(3227) =< s(3221)
s(3228) =< s(3221)
s(3229) =< s(3221)
s(3230) =< s(3221)
s(3227) =< aux(293)
s(3228) =< aux(293)
s(3230) =< aux(293)
s(3226) =< s(3216)
s(3230) =< s(3216)
s(3227) =< s(3223)
s(3228) =< s(3223)
s(3229) =< s(3223)
s(3230) =< s(3223)
s(3226) =< s(3217)
s(3227) =< s(3217)
s(3228) =< s(3217)
s(3229) =< s(3217)
s(3230) =< s(3217)
s(3226) =< s(3223)
s(3226) =< s(3219)
s(3227) =< s(3219)
s(3230) =< s(3219)
s(3226) =< aux(294)
s(3227) =< aux(294)
s(3230) =< aux(294)

  with precondition: [A=1,E=1,I=1,M=1,F=J,F>=2,H>=0,K+2>=2*F,B>=F+1,D>=F,L>=F,C>=K+1,G>=K] 

* Chain [229]: 16*s(3240)+15*s(3241)+24*s(3242)+15*s(3243)+12*s(3244)+15*s(3245)+52*s(3246)+25
  Such that:s(3239) =< B
s(3231) =< C
s(3232) =< C/2
s(3233) =< C/3
s(3234) =< F
s(3235) =< G
s(3236) =< G+1
s(3237) =< G/2
s(3238) =< G/2+1/2
s(3240) =< s(3239)
s(3241) =< s(3239)
s(3242) =< s(3239)
s(3243) =< s(3239)
s(3244) =< s(3239)
s(3245) =< s(3239)
s(3241) =< s(3231)
s(3242) =< s(3231)
s(3243) =< s(3231)
s(3244) =< s(3231)
s(3245) =< s(3231)
s(3246) =< s(3231)
s(3242) =< s(3232)
s(3243) =< s(3232)
s(3245) =< s(3232)
s(3241) =< s(3233)
s(3245) =< s(3233)
s(3241) =< s(3234)
s(3242) =< s(3234)
s(3243) =< s(3234)
s(3244) =< s(3234)
s(3245) =< s(3234)
s(3242) =< s(3235)
s(3243) =< s(3235)
s(3244) =< s(3235)
s(3245) =< s(3235)
s(3246) =< s(3235)
s(3241) =< s(3236)
s(3242) =< s(3236)
s(3243) =< s(3236)
s(3244) =< s(3236)
s(3245) =< s(3236)
s(3241) =< s(3235)
s(3241) =< s(3238)
s(3242) =< s(3238)
s(3245) =< s(3238)
s(3241) =< s(3237)
s(3242) =< s(3237)
s(3245) =< s(3237)

  with precondition: [A=1,E=1,I=1,M=1,B=J,B=K+1,B>=2,H>=0,C+1>=B,D+1>=B,F>=B,G+1>=B,L+1>=B] 

* Chain [228]: 10*s(3248)+58*s(3257)+6*s(3258)+15*s(3259)+24*s(3260)+15*s(3261)+12*s(3262)+15*s(3263)+25
  Such that:s(3256) =< B
s(3254) =< C
s(3249) =< C/3
s(3250) =< F
s(3255) =< G
s(3251) =< G+1
s(3253) =< G/2+1/2
aux(295) =< C/2
aux(296) =< G/2
s(3248) =< aux(295)
s(3248) =< aux(296)
s(3257) =< s(3254)
s(3257) =< s(3255)
s(3258) =< s(3256)
s(3248) =< s(3256)
s(3259) =< s(3256)
s(3260) =< s(3256)
s(3261) =< s(3256)
s(3262) =< s(3256)
s(3263) =< s(3256)
s(3259) =< s(3254)
s(3260) =< s(3254)
s(3261) =< s(3254)
s(3262) =< s(3254)
s(3263) =< s(3254)
s(3260) =< aux(295)
s(3261) =< aux(295)
s(3263) =< aux(295)
s(3259) =< s(3249)
s(3263) =< s(3249)
s(3259) =< s(3250)
s(3260) =< s(3250)
s(3261) =< s(3250)
s(3262) =< s(3250)
s(3263) =< s(3250)
s(3260) =< s(3255)
s(3261) =< s(3255)
s(3262) =< s(3255)
s(3263) =< s(3255)
s(3259) =< s(3251)
s(3260) =< s(3251)
s(3261) =< s(3251)
s(3262) =< s(3251)
s(3263) =< s(3251)
s(3259) =< s(3255)
s(3259) =< s(3253)
s(3260) =< s(3253)
s(3263) =< s(3253)
s(3259) =< aux(296)
s(3260) =< aux(296)
s(3263) =< aux(296)

  with precondition: [A=1,E=1,I=1,M=1,B=J,B>=2,H>=0,K+2>=2*B,D>=B,F>=B,L>=B,C>=K,G>=K] 

* Chain [227]: 16*s(3273)+15*s(3274)+24*s(3275)+15*s(3276)+12*s(3277)+15*s(3278)+52*s(3279)+28
  Such that:s(3264) =< B
s(3265) =< C
s(3266) =< C/2
s(3267) =< C/3
s(3272) =< F
s(3268) =< G
s(3269) =< G+1
s(3270) =< G/2
s(3271) =< G/2+1/2
s(3273) =< s(3272)
s(3274) =< s(3264)
s(3275) =< s(3264)
s(3276) =< s(3264)
s(3277) =< s(3264)
s(3278) =< s(3264)
s(3274) =< s(3272)
s(3275) =< s(3272)
s(3276) =< s(3272)
s(3277) =< s(3272)
s(3278) =< s(3272)
s(3274) =< s(3265)
s(3275) =< s(3265)
s(3276) =< s(3265)
s(3277) =< s(3265)
s(3278) =< s(3265)
s(3279) =< s(3265)
s(3275) =< s(3266)
s(3276) =< s(3266)
s(3278) =< s(3266)
s(3274) =< s(3267)
s(3278) =< s(3267)
s(3275) =< s(3268)
s(3276) =< s(3268)
s(3277) =< s(3268)
s(3278) =< s(3268)
s(3279) =< s(3268)
s(3274) =< s(3269)
s(3275) =< s(3269)
s(3276) =< s(3269)
s(3277) =< s(3269)
s(3278) =< s(3269)
s(3274) =< s(3268)
s(3274) =< s(3271)
s(3275) =< s(3271)
s(3278) =< s(3271)
s(3274) =< s(3270)
s(3275) =< s(3270)
s(3278) =< s(3270)

  with precondition: [A=1,E=1,I=1,M=1,F=J,F=K+1,F>=2,H>=0,B>=F+1,C>=F,D+1>=F,G+1>=F,L+1>=F] 

 * Renamed intermediate variables: 
[ (eq(340,1),s(1150))>>s(3280), (eq(340,1),s(1151))>>s(3281), (eq(340,1),s(1152))>>s(3282), (eq(340,1),s(1153))>>s(3283), (eq(340,1),s(1147))>>s(3284), (eq(340,1),s(1148))>>s(3285), (eq(340,1),s(1154))>>s(3286), (eq(340,1),s(1149))>>s(3287), (eq(340,1),s(1155))>>s(3288), (eq(340,1),s(1156))>>s(3289), (eq(340,1),s(1157))>>s(3290), (eq(340,1),s(1158))>>s(3291), (eq(340,1),s(1159))>>s(3292), (eq(340,1),s(1160))>>s(3293), (eq(340,1),s(1161))>>s(3294), (eq(340,1),s(1162))>>s(3295), (eq(340,1),s(1163))>>s(3296), (eq(340,1),s(1164))>>s(3297), (eq(340,1),s(1165))>>s(3298), (eq(340,1),s(1166))>>s(3299), (eq(340,1),s(1167))>>s(3300), (eq(340,1),s(1168))>>s(3301)]

#### Simplifying cost structure of CE 340 
 * Renamed intermediate variables: 
[ (eq(341,1),s(1169))>>s(3302), (eq(341,1),s(1170))>>s(3303), (eq(341,1),s(1171))>>s(3304), (eq(341,1),s(1172))>>s(3305)]
 * Renamed intermediate variables: 
[ (eq(341,2),s(3155))>>s(3306), (eq(341,2),aux(274))>>s(3307), (eq(341,2),aux(275))>>s(3308), (eq(341,2),aux(276))>>s(3309), (eq(341,2),aux(277))>>s(3310), (eq(341,2),aux(278))>>s(3311), (eq(341,2),aux(279))>>s(3312), (eq(341,2),aux(280))>>s(3313), (eq(341,2),aux(281))>>s(3314), (eq(341,2),aux(282))>>s(3315), (eq(341,2),s(3141))>>s(3316), (eq(341,2),s(3142))>>s(3317), (eq(341,2),s(3143))>>s(3318), (eq(341,2),s(3144))>>s(3319), (eq(341,2),s(3145))>>s(3320), (eq(341,2),s(3146))>>s(3321), (eq(341,2),s(3147))>>s(3322), (eq(341,2),s(3159))>>s(3323), (eq(341,2),s(3160))>>s(3324), (eq(341,2),s(3161))>>s(3325), (eq(341,2),s(3163))>>s(3326), (eq(341,2),s(3164))>>s(3327), (eq(341,2),s(3165))>>s(3328), (eq(341,2),s(3166))>>s(3329)]

#### Simplifying cost structure of CE 341 
 * Joined equivalent variables [aux(297),s(3302),s(3306),s(3307),s(3308)] into aux(297)
 * Joined equivalent variables [aux(298),s(3303),s(3311),s(3313)] into aux(298)
 * Joined equivalent variables [s(3305),s(3316)] into s(3305)
 * Renamed intermediate variables: 
[ (eq(355,1),s(1185))>>s(3330), (eq(355,1),s(1186))>>s(3331), (eq(355,1),s(1187))>>s(3332), (eq(355,1),s(1188))>>s(3333), (eq(355,1),s(1189))>>s(3334), (eq(355,1),s(1190))>>s(3335), (eq(355,1),s(1191))>>s(3336), (eq(355,1),s(1192))>>s(3337)]
 * Renamed intermediate variables: 
[ (eq(355,2),s(3155))>>s(3338), (eq(355,2),aux(274))>>s(3339), (eq(355,2),aux(275))>>s(3340), (eq(355,2),aux(276))>>s(3341), (eq(355,2),aux(277))>>s(3342), (eq(355,2),aux(278))>>s(3343), (eq(355,2),aux(279))>>s(3344), (eq(355,2),aux(280))>>s(3345), (eq(355,2),aux(281))>>s(3346), (eq(355,2),aux(282))>>s(3347), (eq(355,2),s(3141))>>s(3348), (eq(355,2),s(3142))>>s(3349), (eq(355,2),s(3143))>>s(3350), (eq(355,2),s(3144))>>s(3351), (eq(355,2),s(3145))>>s(3352), (eq(355,2),s(3146))>>s(3353), (eq(355,2),s(3147))>>s(3354), (eq(355,2),s(3159))>>s(3355), (eq(355,2),s(3160))>>s(3356), (eq(355,2),s(3161))>>s(3357), (eq(355,2),s(3163))>>s(3358), (eq(355,2),s(3164))>>s(3359), (eq(355,2),s(3165))>>s(3360), (eq(355,2),s(3166))>>s(3361)]

#### Simplifying cost structure of CE 355 
 * Joined equivalent variables [aux(299),s(3330),s(3339)] into aux(299)
 * Joined equivalent variables [aux(300),s(3340)] into aux(300)
 * Joined equivalent variables [aux(301),s(3341)] into aux(301)
 * Joined equivalent variables [aux(302),s(3333),s(3343)] into aux(302)
 * Joined equivalent variables [aux(303),s(3344)] into aux(303)
 * Joined equivalent variables [aux(304),s(3346)] into aux(304)
 * Joined equivalent variables [s(3337),s(3348)] into s(3337)
 * Renamed intermediate variables: 
[ (eq(356,1),s(1185))>>s(3362), (eq(356,1),s(1186))>>s(3363), (eq(356,1),s(1187))>>s(3364), (eq(356,1),s(1188))>>s(3365), (eq(356,1),s(1189))>>s(3366), (eq(356,1),s(1190))>>s(3367), (eq(356,1),s(1191))>>s(3368), (eq(356,1),s(1192))>>s(3369)]
 * Renamed intermediate variables: 
[ (eq(356,2),s(3180))>>s(3370), (eq(356,2),aux(284))>>s(3371), (eq(356,2),aux(285))>>s(3372), (eq(356,2),aux(286))>>s(3373), (eq(356,2),aux(287))>>s(3374), (eq(356,2),aux(288))>>s(3375), (eq(356,2),aux(289))>>s(3376), (eq(356,2),aux(290))>>s(3377), (eq(356,2),aux(291))>>s(3378), (eq(356,2),aux(292))>>s(3379), (eq(356,2),s(3184))>>s(3380), (eq(356,2),s(3185))>>s(3381), (eq(356,2),s(3186))>>s(3382), (eq(356,2),s(3187))>>s(3383), (eq(356,2),s(3188))>>s(3384), (eq(356,2),s(3189))>>s(3385), (eq(356,2),s(3190))>>s(3386), (eq(356,2),s(3191))>>s(3387), (eq(356,2),s(3192))>>s(3388), (eq(356,2),s(3193))>>s(3389), (eq(356,2),s(3194))>>s(3390), (eq(356,2),s(3195))>>s(3391), (eq(356,2),s(3196))>>s(3392), (eq(356,2),s(3197))>>s(3393)]

#### Simplifying cost structure of CE 356 
 * Joined equivalent variables [aux(305),s(3362),s(3371)] into aux(305)
 * Joined equivalent variables [aux(306),s(3372)] into aux(306)
 * Joined equivalent variables [aux(307),s(3373)] into aux(307)
 * Joined equivalent variables [aux(308),s(3365),s(3375)] into aux(308)
 * Joined equivalent variables [aux(309),s(3376)] into aux(309)
 * Joined equivalent variables [aux(310),s(3378)] into aux(310)
 * Joined equivalent variables [s(3368),s(3383)] into s(3368)
 * Joined equivalent variables [aux(311),aux(297),aux(299),aux(305),s(3280)] into aux(311)
 * Joined equivalent variables [aux(312),aux(300),aux(306),s(3281)] into aux(312)
 * Joined equivalent variables [aux(313),s(3282),s(3338),s(3370)] into aux(313)
 * Joined equivalent variables [aux(314),aux(301),aux(307),s(3283)] into aux(314)
 * Joined equivalent variables [aux(315),s(3342),s(3374)] into aux(315)
 * Joined equivalent variables [aux(316),aux(302),aux(308),s(3284)] into aux(316)
 * Joined equivalent variables [aux(317),aux(303),aux(309),s(3285),s(3312)] into aux(317)
 * Joined equivalent variables [aux(318),aux(298),s(3286),s(3345),s(3377)] into aux(318)
 * Joined equivalent variables [aux(319),aux(304),aux(310),s(3287),s(3314)] into aux(319)
 * Joined equivalent variables [aux(320),s(3315),s(3347),s(3379)] into aux(320)
 * Joined equivalent variables [s(3291),s(3305),s(3337),s(3369)] into s(3291)
 * Joined equivalent variables [s(3353),s(3392)] into s(3353)
 * Joined equivalent variables [s(3351),s(3390)] into s(3351)
 * Joined equivalent variables [s(3350),s(3389)] into s(3350)
 * Joined equivalent variables [s(3349),s(3388)] into s(3349)
 * Joined equivalent variables [s(3352),s(3391)] into s(3352)
 * Joined equivalent variables [s(3289),s(3332),s(3364)] into s(3289)
 * Joined equivalent variables [s(3288),s(3331),s(3363)] into s(3288)
 * Joined equivalent variables [s(3354),s(3393)] into s(3354)
 * Joined equivalent variables [s(3297),s(3336),s(3368)] into s(3297)
 * Joined equivalent variables [s(3296),s(3335),s(3367)] into s(3296)
 * Joined equivalent variables [s(3295),s(3334),s(3366)] into s(3295)
 * Joined equivalent variables [s(3290),s(3304)] into s(3290)
 * Joined equivalent variables [s(3355),s(3380)] into s(3355)
 * Joined equivalent variables [s(3357),s(3382)] into s(3357)
 * Joined equivalent variables [s(3356),s(3381)] into s(3356)
 * Joined equivalent variables [s(3360),s(3386)] into s(3360)
 * Joined equivalent variables [s(3361),s(3387)] into s(3361)
 * Renamed intermediate variables: 
[ (eq(342,1),s(1169))>>s(3394), (eq(342,1),s(1170))>>s(3395), (eq(342,1),s(1171))>>s(3396), (eq(342,1),s(1172))>>s(3397)]
 * Renamed intermediate variables: 
[ (eq(342,2),s(3180))>>s(3398), (eq(342,2),aux(284))>>s(3399), (eq(342,2),aux(285))>>s(3400), (eq(342,2),aux(286))>>s(3401), (eq(342,2),aux(287))>>s(3402), (eq(342,2),aux(288))>>s(3403), (eq(342,2),aux(289))>>s(3404), (eq(342,2),aux(290))>>s(3405), (eq(342,2),aux(291))>>s(3406), (eq(342,2),aux(292))>>s(3407), (eq(342,2),s(3184))>>s(3408), (eq(342,2),s(3185))>>s(3409), (eq(342,2),s(3186))>>s(3410), (eq(342,2),s(3187))>>s(3411), (eq(342,2),s(3188))>>s(3412), (eq(342,2),s(3189))>>s(3413), (eq(342,2),s(3190))>>s(3414), (eq(342,2),s(3191))>>s(3415), (eq(342,2),s(3192))>>s(3416), (eq(342,2),s(3193))>>s(3417), (eq(342,2),s(3194))>>s(3418), (eq(342,2),s(3195))>>s(3419), (eq(342,2),s(3196))>>s(3420), (eq(342,2),s(3197))>>s(3421)]

#### Simplifying cost structure of CE 342 
 * Joined equivalent variables [aux(321),s(3394),s(3398),s(3399),s(3400)] into aux(321)
 * Joined equivalent variables [aux(322),s(3395),s(3403),s(3405)] into aux(322)
 * Joined equivalent variables [s(3396),s(3411)] into s(3396)
 * Renamed intermediate variables: 
[ (eq(345,1),s(1173))>>s(3422), (eq(345,1),s(1174))>>s(3423), (eq(345,1),s(1175))>>s(3424), (eq(345,1),s(1176))>>s(3425), (eq(345,1),s(1177))>>s(3426), (eq(345,1),s(1178))>>s(3427)]
 * Renamed intermediate variables: 
[ (eq(345,2),s(3155))>>s(3428), (eq(345,2),aux(274))>>s(3429), (eq(345,2),aux(275))>>s(3430), (eq(345,2),aux(276))>>s(3431), (eq(345,2),aux(277))>>s(3432), (eq(345,2),aux(278))>>s(3433), (eq(345,2),aux(279))>>s(3434), (eq(345,2),aux(280))>>s(3435), (eq(345,2),aux(281))>>s(3436), (eq(345,2),aux(282))>>s(3437), (eq(345,2),s(3141))>>s(3438), (eq(345,2),s(3142))>>s(3439), (eq(345,2),s(3143))>>s(3440), (eq(345,2),s(3144))>>s(3441), (eq(345,2),s(3145))>>s(3442), (eq(345,2),s(3146))>>s(3443), (eq(345,2),s(3147))>>s(3444), (eq(345,2),s(3159))>>s(3445), (eq(345,2),s(3160))>>s(3446), (eq(345,2),s(3161))>>s(3447), (eq(345,2),s(3163))>>s(3448), (eq(345,2),s(3164))>>s(3449), (eq(345,2),s(3165))>>s(3450), (eq(345,2),s(3166))>>s(3451)]

#### Simplifying cost structure of CE 345 
 * Joined equivalent variables [aux(323),s(3422),s(3428),s(3429),s(3430)] into aux(323)
 * Joined equivalent variables [aux(324),s(3423),s(3433)] into aux(324)
 * Joined equivalent variables [aux(325),s(3434)] into aux(325)
 * Joined equivalent variables [aux(326),s(3436)] into aux(326)
 * Joined equivalent variables [s(3427),s(3438)] into s(3427)
 * Renamed intermediate variables: 
[ (eq(346,1),s(1173))>>s(3452), (eq(346,1),s(1174))>>s(3453), (eq(346,1),s(1175))>>s(3454), (eq(346,1),s(1176))>>s(3455), (eq(346,1),s(1177))>>s(3456), (eq(346,1),s(1178))>>s(3457)]
 * Renamed intermediate variables: 
[ (eq(346,2),s(3180))>>s(3458), (eq(346,2),aux(284))>>s(3459), (eq(346,2),aux(285))>>s(3460), (eq(346,2),aux(286))>>s(3461), (eq(346,2),aux(287))>>s(3462), (eq(346,2),aux(288))>>s(3463), (eq(346,2),aux(289))>>s(3464), (eq(346,2),aux(290))>>s(3465), (eq(346,2),aux(291))>>s(3466), (eq(346,2),aux(292))>>s(3467), (eq(346,2),s(3184))>>s(3468), (eq(346,2),s(3185))>>s(3469), (eq(346,2),s(3186))>>s(3470), (eq(346,2),s(3187))>>s(3471), (eq(346,2),s(3188))>>s(3472), (eq(346,2),s(3189))>>s(3473), (eq(346,2),s(3190))>>s(3474), (eq(346,2),s(3191))>>s(3475), (eq(346,2),s(3192))>>s(3476), (eq(346,2),s(3193))>>s(3477), (eq(346,2),s(3194))>>s(3478), (eq(346,2),s(3195))>>s(3479), (eq(346,2),s(3196))>>s(3480), (eq(346,2),s(3197))>>s(3481)]

#### Simplifying cost structure of CE 346 
 * Joined equivalent variables [aux(327),s(3452),s(3458),s(3459),s(3460)] into aux(327)
 * Joined equivalent variables [aux(328),s(3453),s(3463)] into aux(328)
 * Joined equivalent variables [aux(329),s(3464)] into aux(329)
 * Joined equivalent variables [aux(330),s(3466)] into aux(330)
 * Joined equivalent variables [s(3456),s(3471)] into s(3456)
 * Renamed intermediate variables: 
[ (eq(351,1),s(1179))>>s(3482), (eq(351,1),s(1180))>>s(3483), (eq(351,1),s(1181))>>s(3484), (eq(351,1),s(1182))>>s(3485), (eq(351,1),s(1183))>>s(3486), (eq(351,1),s(1184))>>s(3487)]
 * Renamed intermediate variables: 
[ (eq(351,2),s(3180))>>s(3488), (eq(351,2),aux(284))>>s(3489), (eq(351,2),aux(285))>>s(3490), (eq(351,2),aux(286))>>s(3491), (eq(351,2),aux(287))>>s(3492), (eq(351,2),aux(288))>>s(3493), (eq(351,2),aux(289))>>s(3494), (eq(351,2),aux(290))>>s(3495), (eq(351,2),aux(291))>>s(3496), (eq(351,2),aux(292))>>s(3497), (eq(351,2),s(3184))>>s(3498), (eq(351,2),s(3185))>>s(3499), (eq(351,2),s(3186))>>s(3500), (eq(351,2),s(3187))>>s(3501), (eq(351,2),s(3188))>>s(3502), (eq(351,2),s(3189))>>s(3503), (eq(351,2),s(3190))>>s(3504), (eq(351,2),s(3191))>>s(3505), (eq(351,2),s(3192))>>s(3506), (eq(351,2),s(3193))>>s(3507), (eq(351,2),s(3194))>>s(3508), (eq(351,2),s(3195))>>s(3509), (eq(351,2),s(3196))>>s(3510), (eq(351,2),s(3197))>>s(3511)]

#### Simplifying cost structure of CE 351 
 * Joined equivalent variables [aux(331),s(3482),s(3489)] into aux(331)
 * Joined equivalent variables [aux(332),s(3490)] into aux(332)
 * Joined equivalent variables [aux(333),s(3491)] into aux(333)
 * Joined equivalent variables [aux(334),s(3485),s(3493),s(3495)] into aux(334)
 * Joined equivalent variables [s(3486),s(3501)] into s(3486)
 * Renamed intermediate variables: 
[ (eq(350,1),s(1179))>>s(3512), (eq(350,1),s(1180))>>s(3513), (eq(350,1),s(1181))>>s(3514), (eq(350,1),s(1182))>>s(3515), (eq(350,1),s(1183))>>s(3516), (eq(350,1),s(1184))>>s(3517)]
 * Renamed intermediate variables: 
[ (eq(350,2),s(3155))>>s(3518), (eq(350,2),aux(274))>>s(3519), (eq(350,2),aux(275))>>s(3520), (eq(350,2),aux(276))>>s(3521), (eq(350,2),aux(277))>>s(3522), (eq(350,2),aux(278))>>s(3523), (eq(350,2),aux(279))>>s(3524), (eq(350,2),aux(280))>>s(3525), (eq(350,2),aux(281))>>s(3526), (eq(350,2),aux(282))>>s(3527), (eq(350,2),s(3141))>>s(3528), (eq(350,2),s(3142))>>s(3529), (eq(350,2),s(3143))>>s(3530), (eq(350,2),s(3144))>>s(3531), (eq(350,2),s(3145))>>s(3532), (eq(350,2),s(3146))>>s(3533), (eq(350,2),s(3147))>>s(3534), (eq(350,2),s(3159))>>s(3535), (eq(350,2),s(3160))>>s(3536), (eq(350,2),s(3161))>>s(3537), (eq(350,2),s(3163))>>s(3538), (eq(350,2),s(3164))>>s(3539), (eq(350,2),s(3165))>>s(3540), (eq(350,2),s(3166))>>s(3541)]

#### Simplifying cost structure of CE 350 
 * Joined equivalent variables [aux(335),s(3512),s(3519)] into aux(335)
 * Joined equivalent variables [aux(336),s(3520)] into aux(336)
 * Joined equivalent variables [aux(337),s(3521)] into aux(337)
 * Joined equivalent variables [aux(338),s(3515),s(3523),s(3525)] into aux(338)
 * Joined equivalent variables [s(3517),s(3528)] into s(3517)
 * Renamed intermediate variables: 
[ (eq(343,1),s(1169))>>s(3542), (eq(343,1),s(1170))>>s(3543), (eq(343,1),s(1171))>>s(3544), (eq(343,1),s(1172))>>s(3545)]
 * Renamed intermediate variables: 
[ (eq(343,2),s(3239))>>s(3546), (eq(343,2),s(3231))>>s(3547), (eq(343,2),s(3232))>>s(3548), (eq(343,2),s(3233))>>s(3549), (eq(343,2),s(3234))>>s(3550), (eq(343,2),s(3235))>>s(3551), (eq(343,2),s(3236))>>s(3552), (eq(343,2),s(3237))>>s(3553), (eq(343,2),s(3238))>>s(3554), (eq(343,2),s(3240))>>s(3555), (eq(343,2),s(3241))>>s(3556), (eq(343,2),s(3242))>>s(3557), (eq(343,2),s(3243))>>s(3558), (eq(343,2),s(3244))>>s(3559), (eq(343,2),s(3245))>>s(3560), (eq(343,2),s(3246))>>s(3561)]

#### Simplifying cost structure of CE 343 
 * Joined equivalent variables [aux(339),s(3542),s(3546),s(3547)] into aux(339)
 * Joined equivalent variables [aux(340),s(3543),s(3550),s(3552)] into aux(340)
 * Joined equivalent variables [s(3545),s(3555)] into s(3545)
 * Renamed intermediate variables: 
[ (eq(344,1),s(1169))>>s(3562), (eq(344,1),s(1170))>>s(3563), (eq(344,1),s(1171))>>s(3564), (eq(344,1),s(1172))>>s(3565)]
 * Renamed intermediate variables: 
[ (eq(344,2),s(3264))>>s(3566), (eq(344,2),s(3265))>>s(3567), (eq(344,2),s(3266))>>s(3568), (eq(344,2),s(3267))>>s(3569), (eq(344,2),s(3272))>>s(3570), (eq(344,2),s(3268))>>s(3571), (eq(344,2),s(3269))>>s(3572), (eq(344,2),s(3270))>>s(3573), (eq(344,2),s(3271))>>s(3574), (eq(344,2),s(3273))>>s(3575), (eq(344,2),s(3274))>>s(3576), (eq(344,2),s(3275))>>s(3577), (eq(344,2),s(3276))>>s(3578), (eq(344,2),s(3277))>>s(3579), (eq(344,2),s(3278))>>s(3580), (eq(344,2),s(3279))>>s(3581)]

#### Simplifying cost structure of CE 344 
 * Joined equivalent variables [aux(341),s(3562),s(3566),s(3567)] into aux(341)
 * Joined equivalent variables [aux(342),s(3563),s(3570),s(3572)] into aux(342)
 * Joined equivalent variables [s(3564),s(3575)] into s(3564)
 * Renamed intermediate variables: 
[ (eq(347,1),s(1173))>>s(3582), (eq(347,1),s(1174))>>s(3583), (eq(347,1),s(1175))>>s(3584), (eq(347,1),s(1176))>>s(3585), (eq(347,1),s(1177))>>s(3586), (eq(347,1),s(1178))>>s(3587)]
 * Renamed intermediate variables: 
[ (eq(347,2),s(3239))>>s(3588), (eq(347,2),s(3231))>>s(3589), (eq(347,2),s(3232))>>s(3590), (eq(347,2),s(3233))>>s(3591), (eq(347,2),s(3234))>>s(3592), (eq(347,2),s(3235))>>s(3593), (eq(347,2),s(3236))>>s(3594), (eq(347,2),s(3237))>>s(3595), (eq(347,2),s(3238))>>s(3596), (eq(347,2),s(3240))>>s(3597), (eq(347,2),s(3241))>>s(3598), (eq(347,2),s(3242))>>s(3599), (eq(347,2),s(3243))>>s(3600), (eq(347,2),s(3244))>>s(3601), (eq(347,2),s(3245))>>s(3602), (eq(347,2),s(3246))>>s(3603)]

#### Simplifying cost structure of CE 347 
 * Joined equivalent variables [aux(343),s(3582),s(3588),s(3589)] into aux(343)
 * Joined equivalent variables [aux(344),s(3583),s(3592)] into aux(344)
 * Joined equivalent variables [aux(345),s(3593)] into aux(345)
 * Joined equivalent variables [aux(346),s(3595)] into aux(346)
 * Joined equivalent variables [s(3587),s(3597)] into s(3587)
 * Renamed intermediate variables: 
[ (eq(348,1),s(1173))>>s(3604), (eq(348,1),s(1174))>>s(3605), (eq(348,1),s(1175))>>s(3606), (eq(348,1),s(1176))>>s(3607), (eq(348,1),s(1177))>>s(3608), (eq(348,1),s(1178))>>s(3609)]
 * Renamed intermediate variables: 
[ (eq(348,2),s(3264))>>s(3610), (eq(348,2),s(3265))>>s(3611), (eq(348,2),s(3266))>>s(3612), (eq(348,2),s(3267))>>s(3613), (eq(348,2),s(3272))>>s(3614), (eq(348,2),s(3268))>>s(3615), (eq(348,2),s(3269))>>s(3616), (eq(348,2),s(3270))>>s(3617), (eq(348,2),s(3271))>>s(3618), (eq(348,2),s(3273))>>s(3619), (eq(348,2),s(3274))>>s(3620), (eq(348,2),s(3275))>>s(3621), (eq(348,2),s(3276))>>s(3622), (eq(348,2),s(3277))>>s(3623), (eq(348,2),s(3278))>>s(3624), (eq(348,2),s(3279))>>s(3625)]

#### Simplifying cost structure of CE 348 
 * Joined equivalent variables [aux(347),s(3604),s(3610),s(3611)] into aux(347)
 * Joined equivalent variables [aux(348),s(3605),s(3614)] into aux(348)
 * Joined equivalent variables [aux(349),s(3615)] into aux(349)
 * Joined equivalent variables [aux(350),s(3617)] into aux(350)
 * Joined equivalent variables [s(3608),s(3619)] into s(3608)
 * Renamed intermediate variables: 
[ (eq(349,1),s(1173))>>s(3626), (eq(349,1),s(1174))>>s(3627), (eq(349,1),s(1175))>>s(3628), (eq(349,1),s(1176))>>s(3629), (eq(349,1),s(1177))>>s(3630), (eq(349,1),s(1178))>>s(3631)]
 * Renamed intermediate variables: 
[ (eq(349,2),s(3220))>>s(3632), (eq(349,2),s(3221))>>s(3633), (eq(349,2),s(3216))>>s(3634), (eq(349,2),s(3222))>>s(3635), (eq(349,2),s(3223))>>s(3636), (eq(349,2),s(3217))>>s(3637), (eq(349,2),s(3219))>>s(3638), (eq(349,2),aux(293))>>s(3639), (eq(349,2),aux(294))>>s(3640), (eq(349,2),s(3215))>>s(3641), (eq(349,2),s(3224))>>s(3642), (eq(349,2),s(3225))>>s(3643), (eq(349,2),s(3226))>>s(3644), (eq(349,2),s(3227))>>s(3645), (eq(349,2),s(3228))>>s(3646), (eq(349,2),s(3229))>>s(3647), (eq(349,2),s(3230))>>s(3648)]

#### Simplifying cost structure of CE 349 
 * Joined equivalent variables [aux(351),s(3626),s(3632),s(3633)] into aux(351)
 * Joined equivalent variables [aux(352),s(3627),s(3635)] into aux(352)
 * Joined equivalent variables [aux(353),s(3636)] into aux(353)
 * Joined equivalent variables [aux(354),s(3640)] into aux(354)
 * Joined equivalent variables [s(3630),s(3643)] into s(3630)
 * Renamed intermediate variables: 
[ (eq(352,1),s(1179))>>s(3649), (eq(352,1),s(1180))>>s(3650), (eq(352,1),s(1181))>>s(3651), (eq(352,1),s(1182))>>s(3652), (eq(352,1),s(1183))>>s(3653), (eq(352,1),s(1184))>>s(3654)]
 * Renamed intermediate variables: 
[ (eq(352,2),s(3239))>>s(3655), (eq(352,2),s(3231))>>s(3656), (eq(352,2),s(3232))>>s(3657), (eq(352,2),s(3233))>>s(3658), (eq(352,2),s(3234))>>s(3659), (eq(352,2),s(3235))>>s(3660), (eq(352,2),s(3236))>>s(3661), (eq(352,2),s(3237))>>s(3662), (eq(352,2),s(3238))>>s(3663), (eq(352,2),s(3240))>>s(3664), (eq(352,2),s(3241))>>s(3665), (eq(352,2),s(3242))>>s(3666), (eq(352,2),s(3243))>>s(3667), (eq(352,2),s(3244))>>s(3668), (eq(352,2),s(3245))>>s(3669), (eq(352,2),s(3246))>>s(3670)]

#### Simplifying cost structure of CE 352 
 * Joined equivalent variables [aux(355),s(3649),s(3655)] into aux(355)
 * Joined equivalent variables [aux(356),s(3656)] into aux(356)
 * Joined equivalent variables [aux(357),s(3657)] into aux(357)
 * Joined equivalent variables [aux(358),s(3652),s(3659),s(3661)] into aux(358)
 * Joined equivalent variables [s(3654),s(3664)] into s(3654)
 * Renamed intermediate variables: 
[ (eq(353,1),s(1179))>>s(3671), (eq(353,1),s(1180))>>s(3672), (eq(353,1),s(1181))>>s(3673), (eq(353,1),s(1182))>>s(3674), (eq(353,1),s(1183))>>s(3675), (eq(353,1),s(1184))>>s(3676)]
 * Renamed intermediate variables: 
[ (eq(353,2),s(3256))>>s(3677), (eq(353,2),s(3254))>>s(3678), (eq(353,2),s(3249))>>s(3679), (eq(353,2),s(3250))>>s(3680), (eq(353,2),s(3255))>>s(3681), (eq(353,2),s(3251))>>s(3682), (eq(353,2),s(3253))>>s(3683), (eq(353,2),aux(295))>>s(3684), (eq(353,2),aux(296))>>s(3685), (eq(353,2),s(3248))>>s(3686), (eq(353,2),s(3257))>>s(3687), (eq(353,2),s(3258))>>s(3688), (eq(353,2),s(3259))>>s(3689), (eq(353,2),s(3260))>>s(3690), (eq(353,2),s(3261))>>s(3691), (eq(353,2),s(3262))>>s(3692), (eq(353,2),s(3263))>>s(3693)]

#### Simplifying cost structure of CE 353 
 * Joined equivalent variables [aux(359),s(3671),s(3677)] into aux(359)
 * Joined equivalent variables [aux(360),s(3678)] into aux(360)
 * Joined equivalent variables [aux(361),s(3684)] into aux(361)
 * Joined equivalent variables [aux(362),s(3674),s(3680),s(3682)] into aux(362)
 * Joined equivalent variables [s(3676),s(3688)] into s(3676)
 * Renamed intermediate variables: 
[ (eq(354,1),s(1179))>>s(3694), (eq(354,1),s(1180))>>s(3695), (eq(354,1),s(1181))>>s(3696), (eq(354,1),s(1182))>>s(3697), (eq(354,1),s(1183))>>s(3698), (eq(354,1),s(1184))>>s(3699)]
 * Renamed intermediate variables: 
[ (eq(354,2),s(3264))>>s(3700), (eq(354,2),s(3265))>>s(3701), (eq(354,2),s(3266))>>s(3702), (eq(354,2),s(3267))>>s(3703), (eq(354,2),s(3272))>>s(3704), (eq(354,2),s(3268))>>s(3705), (eq(354,2),s(3269))>>s(3706), (eq(354,2),s(3270))>>s(3707), (eq(354,2),s(3271))>>s(3708), (eq(354,2),s(3273))>>s(3709), (eq(354,2),s(3274))>>s(3710), (eq(354,2),s(3275))>>s(3711), (eq(354,2),s(3276))>>s(3712), (eq(354,2),s(3277))>>s(3713), (eq(354,2),s(3278))>>s(3714), (eq(354,2),s(3279))>>s(3715)]

#### Simplifying cost structure of CE 354 
 * Joined equivalent variables [aux(363),s(3694),s(3700)] into aux(363)
 * Joined equivalent variables [aux(364),s(3701)] into aux(364)
 * Joined equivalent variables [aux(365),s(3702)] into aux(365)
 * Joined equivalent variables [aux(366),s(3697),s(3704),s(3706)] into aux(366)
 * Joined equivalent variables [s(3698),s(3709)] into s(3698)
 * Renamed intermediate variables: 
[ (eq(357,1),s(1185))>>s(3716), (eq(357,1),s(1186))>>s(3717), (eq(357,1),s(1187))>>s(3718), (eq(357,1),s(1188))>>s(3719), (eq(357,1),s(1189))>>s(3720), (eq(357,1),s(1190))>>s(3721), (eq(357,1),s(1191))>>s(3722), (eq(357,1),s(1192))>>s(3723)]
 * Renamed intermediate variables: 
[ (eq(357,2),s(3239))>>s(3724), (eq(357,2),s(3231))>>s(3725), (eq(357,2),s(3232))>>s(3726), (eq(357,2),s(3233))>>s(3727), (eq(357,2),s(3234))>>s(3728), (eq(357,2),s(3235))>>s(3729), (eq(357,2),s(3236))>>s(3730), (eq(357,2),s(3237))>>s(3731), (eq(357,2),s(3238))>>s(3732), (eq(357,2),s(3240))>>s(3733), (eq(357,2),s(3241))>>s(3734), (eq(357,2),s(3242))>>s(3735), (eq(357,2),s(3243))>>s(3736), (eq(357,2),s(3244))>>s(3737), (eq(357,2),s(3245))>>s(3738), (eq(357,2),s(3246))>>s(3739)]

#### Simplifying cost structure of CE 357 
 * Joined equivalent variables [aux(367),s(3716),s(3724)] into aux(367)
 * Joined equivalent variables [aux(368),s(3725)] into aux(368)
 * Joined equivalent variables [aux(369),s(3726)] into aux(369)
 * Joined equivalent variables [aux(370),s(3719),s(3728)] into aux(370)
 * Joined equivalent variables [aux(371),s(3729)] into aux(371)
 * Joined equivalent variables [aux(372),s(3731)] into aux(372)
 * Joined equivalent variables [s(3723),s(3733)] into s(3723)
 * Renamed intermediate variables: 
[ (eq(358,1),s(1185))>>s(3740), (eq(358,1),s(1186))>>s(3741), (eq(358,1),s(1187))>>s(3742), (eq(358,1),s(1188))>>s(3743), (eq(358,1),s(1189))>>s(3744), (eq(358,1),s(1190))>>s(3745), (eq(358,1),s(1191))>>s(3746), (eq(358,1),s(1192))>>s(3747)]
 * Renamed intermediate variables: 
[ (eq(358,2),s(3256))>>s(3748), (eq(358,2),s(3254))>>s(3749), (eq(358,2),s(3249))>>s(3750), (eq(358,2),s(3250))>>s(3751), (eq(358,2),s(3255))>>s(3752), (eq(358,2),s(3251))>>s(3753), (eq(358,2),s(3253))>>s(3754), (eq(358,2),aux(295))>>s(3755), (eq(358,2),aux(296))>>s(3756), (eq(358,2),s(3248))>>s(3757), (eq(358,2),s(3257))>>s(3758), (eq(358,2),s(3258))>>s(3759), (eq(358,2),s(3259))>>s(3760), (eq(358,2),s(3260))>>s(3761), (eq(358,2),s(3261))>>s(3762), (eq(358,2),s(3262))>>s(3763), (eq(358,2),s(3263))>>s(3764)]

#### Simplifying cost structure of CE 358 
 * Joined equivalent variables [aux(373),s(3740),s(3748)] into aux(373)
 * Joined equivalent variables [aux(374),s(3749)] into aux(374)
 * Joined equivalent variables [aux(375),s(3755)] into aux(375)
 * Joined equivalent variables [aux(376),s(3743),s(3751)] into aux(376)
 * Joined equivalent variables [aux(377),s(3752)] into aux(377)
 * Joined equivalent variables [aux(378),s(3756)] into aux(378)
 * Joined equivalent variables [s(3747),s(3759)] into s(3747)
 * Renamed intermediate variables: 
[ (eq(359,1),s(1185))>>s(3765), (eq(359,1),s(1186))>>s(3766), (eq(359,1),s(1187))>>s(3767), (eq(359,1),s(1188))>>s(3768), (eq(359,1),s(1189))>>s(3769), (eq(359,1),s(1190))>>s(3770), (eq(359,1),s(1191))>>s(3771), (eq(359,1),s(1192))>>s(3772)]
 * Renamed intermediate variables: 
[ (eq(359,2),s(3264))>>s(3773), (eq(359,2),s(3265))>>s(3774), (eq(359,2),s(3266))>>s(3775), (eq(359,2),s(3267))>>s(3776), (eq(359,2),s(3272))>>s(3777), (eq(359,2),s(3268))>>s(3778), (eq(359,2),s(3269))>>s(3779), (eq(359,2),s(3270))>>s(3780), (eq(359,2),s(3271))>>s(3781), (eq(359,2),s(3273))>>s(3782), (eq(359,2),s(3274))>>s(3783), (eq(359,2),s(3275))>>s(3784), (eq(359,2),s(3276))>>s(3785), (eq(359,2),s(3277))>>s(3786), (eq(359,2),s(3278))>>s(3787), (eq(359,2),s(3279))>>s(3788)]

#### Simplifying cost structure of CE 359 
 * Joined equivalent variables [aux(379),s(3765),s(3773)] into aux(379)
 * Joined equivalent variables [aux(380),s(3774)] into aux(380)
 * Joined equivalent variables [aux(381),s(3775)] into aux(381)
 * Joined equivalent variables [aux(382),s(3768),s(3777)] into aux(382)
 * Joined equivalent variables [aux(383),s(3778)] into aux(383)
 * Joined equivalent variables [aux(384),s(3780)] into aux(384)
 * Joined equivalent variables [s(3771),s(3782)] into s(3771)
 * Renamed intermediate variables: 
[ (eq(360,1),s(1185))>>s(3789), (eq(360,1),s(1186))>>s(3790), (eq(360,1),s(1187))>>s(3791), (eq(360,1),s(1188))>>s(3792), (eq(360,1),s(1189))>>s(3793), (eq(360,1),s(1190))>>s(3794), (eq(360,1),s(1191))>>s(3795), (eq(360,1),s(1192))>>s(3796)]
 * Renamed intermediate variables: 
[ (eq(360,2),s(3220))>>s(3797), (eq(360,2),s(3221))>>s(3798), (eq(360,2),s(3216))>>s(3799), (eq(360,2),s(3222))>>s(3800), (eq(360,2),s(3223))>>s(3801), (eq(360,2),s(3217))>>s(3802), (eq(360,2),s(3219))>>s(3803), (eq(360,2),aux(293))>>s(3804), (eq(360,2),aux(294))>>s(3805), (eq(360,2),s(3215))>>s(3806), (eq(360,2),s(3224))>>s(3807), (eq(360,2),s(3225))>>s(3808), (eq(360,2),s(3226))>>s(3809), (eq(360,2),s(3227))>>s(3810), (eq(360,2),s(3228))>>s(3811), (eq(360,2),s(3229))>>s(3812), (eq(360,2),s(3230))>>s(3813)]

#### Simplifying cost structure of CE 360 
 * Joined equivalent variables [aux(385),s(3789),s(3797)] into aux(385)
 * Joined equivalent variables [aux(386),s(3798)] into aux(386)
 * Joined equivalent variables [aux(387),s(3804)] into aux(387)
 * Joined equivalent variables [aux(388),s(3792),s(3800)] into aux(388)
 * Joined equivalent variables [aux(389),s(3801)] into aux(389)
 * Joined equivalent variables [aux(390),s(3805)] into aux(390)
 * Joined equivalent variables [s(3795),s(3808)] into s(3795)
 * Renamed intermediate variables: 
[ (ch([252]),s(3401))>>s(3814), (ch([252]),s(3402))>>s(3815), (ch([252]),s(3404))>>s(3816), (ch([252]),s(3406))>>s(3817), (ch([252]),s(3407))>>s(3818), (ch([252]),aux(321))>>s(3819), (ch([252]),aux(322))>>s(3820), (ch([252]),s(3408))>>s(3821), (ch([252]),s(3409))>>s(3822), (ch([252]),s(3410))>>s(3823), (ch([252]),s(3396))>>s(3824), (ch([252]),s(3412))>>s(3825), (ch([252]),s(3413))>>s(3826), (ch([252]),s(3414))>>s(3827), (ch([252]),s(3415))>>s(3828), (ch([252]),s(3416))>>s(3829), (ch([252]),s(3417))>>s(3830), (ch([252]),s(3418))>>s(3831), (ch([252]),s(3419))>>s(3832), (ch([252]),s(3420))>>s(3833), (ch([252]),s(3421))>>s(3834), (ch([252]),s(3397))>>s(3835)]
 * Renamed intermediate variables: 
[ (ch([253]),s(3309))>>s(3836), (ch([253]),s(3310))>>s(3837), (ch([253]),aux(311))>>s(3838), (ch([253]),aux(312))>>s(3839), (ch([253]),aux(313))>>s(3840), (ch([253]),aux(314))>>s(3841), (ch([253]),aux(315))>>s(3842), (ch([253]),aux(316))>>s(3843), (ch([253]),aux(317))>>s(3844), (ch([253]),aux(318))>>s(3845), (ch([253]),aux(319))>>s(3846), (ch([253]),aux(320))>>s(3847), (ch([253]),s(3288))>>s(3848), (ch([253]),s(3289))>>s(3849), (ch([253]),s(3290))>>s(3850), (ch([253]),s(3291))>>s(3851), (ch([253]),s(3292))>>s(3852), (ch([253]),s(3293))>>s(3853), (ch([253]),s(3294))>>s(3854), (ch([253]),s(3295))>>s(3855), (ch([253]),s(3296))>>s(3856), (ch([253]),s(3297))>>s(3857), (ch([253]),s(3298))>>s(3858), (ch([253]),s(3299))>>s(3859), (ch([253]),s(3300))>>s(3860), (ch([253]),s(3301))>>s(3861), (ch([253]),s(3317))>>s(3862), (ch([253]),s(3318))>>s(3863), (ch([253]),s(3319))>>s(3864), (ch([253]),s(3320))>>s(3865), (ch([253]),s(3321))>>s(3866), (ch([253]),s(3322))>>s(3867), (ch([253]),s(3323))>>s(3868), (ch([253]),s(3324))>>s(3869), (ch([253]),s(3325))>>s(3870), (ch([253]),s(3326))>>s(3871), (ch([253]),s(3327))>>s(3872), (ch([253]),s(3328))>>s(3873), (ch([253]),s(3329))>>s(3874), (ch([253]),s(3349))>>s(3875), (ch([253]),s(3350))>>s(3876), (ch([253]),s(3351))>>s(3877), (ch([253]),s(3352))>>s(3878), (ch([253]),s(3353))>>s(3879), (ch([253]),s(3354))>>s(3880), (ch([253]),s(3355))>>s(3881), (ch([253]),s(3356))>>s(3882), (ch([253]),s(3357))>>s(3883), (ch([253]),s(3358))>>s(3884), (ch([253]),s(3359))>>s(3885), (ch([253]),s(3360))>>s(3886), (ch([253]),s(3361))>>s(3887), (ch([253]),s(3384))>>s(3888), (ch([253]),s(3385))>>s(3889)]
 * Joined equivalent variables [aux(391),s(3819),s(3838)] into aux(391)
 * Joined equivalent variables [aux(392),s(3814),s(3836)] into aux(392)
 * Joined equivalent variables [aux(393),s(3815),s(3837)] into aux(393)
 * Joined equivalent variables [aux(394),s(3816),s(3844)] into aux(394)
 * Joined equivalent variables [aux(395),s(3820),s(3845)] into aux(395)
 * Joined equivalent variables [aux(396),s(3817),s(3846)] into aux(396)
 * Joined equivalent variables [aux(397),s(3818),s(3847)] into aux(397)
 * Joined equivalent variables [s(3835),s(3851)] into s(3835)
 * Joined equivalent variables [s(3833),s(3866)] into s(3833)
 * Joined equivalent variables [s(3831),s(3864)] into s(3831)
 * Joined equivalent variables [s(3830),s(3863)] into s(3830)
 * Joined equivalent variables [s(3829),s(3862)] into s(3829)
 * Joined equivalent variables [s(3834),s(3867)] into s(3834)
 * Joined equivalent variables [s(3832),s(3865)] into s(3832)
 * Joined equivalent variables [s(3824),s(3850)] into s(3824)
 * Joined equivalent variables [s(3821),s(3868)] into s(3821)
 * Joined equivalent variables [s(3823),s(3870)] into s(3823)
 * Joined equivalent variables [s(3822),s(3869)] into s(3822)
 * Joined equivalent variables [s(3827),s(3873)] into s(3827)
 * Joined equivalent variables [s(3828),s(3874)] into s(3828)

#### Cost of chains of plus(A,B,C,D,E,F,G,H,I,J,K,L):
* Chain [253]: 648*s(3288)+270*s(3289)+416*s(3290)+654*s(3291)+270*s(3292)+270*s(3293)+162*s(3294)+648*s(3295)+270*s(3296)+498*s(3297)+270*s(3298)+270*s(3299)+162*s(3300)+272*s(3301)+30*s(3317)+48*s(3318)+30*s(3319)+24*s(3320)+30*s(3321)+104*s(3322)+6*s(3324)+10*s(3326)+10*s(3327)+12*s(3328)+6*s(3329)+60*s(3349)+96*s(3350)+60*s(3351)+48*s(3352)+60*s(3353)+208*s(3354)+12*s(3356)+10*s(3358)+10*s(3359)+24*s(3360)+12*s(3361)+10*s(3384)+10*s(3385)+78
  Such that:s(3309) =< A/2
s(3310) =< A/3
aux(311) =< A
aux(312) =< B
aux(313) =< B+1
aux(314) =< B/2
aux(315) =< B/3
aux(316) =< E
aux(317) =< F
aux(318) =< F+1
aux(319) =< F/2
aux(320) =< F/2+1/2
s(3288) =< aux(312)
s(3289) =< aux(314)
s(3290) =< aux(318)
s(3291) =< aux(311)
s(3292) =< aux(311)
s(3293) =< aux(311)
s(3294) =< aux(312)
s(3292) =< aux(313)
s(3294) =< aux(313)
s(3293) =< aux(312)
s(3289) =< aux(311)
s(3295) =< aux(317)
s(3296) =< aux(319)
s(3297) =< aux(316)
s(3298) =< aux(316)
s(3299) =< aux(316)
s(3300) =< aux(317)
s(3298) =< aux(318)
s(3300) =< aux(318)
s(3299) =< aux(317)
s(3296) =< aux(316)
s(3301) =< aux(313)
s(3317) =< aux(311)
s(3318) =< aux(311)
s(3319) =< aux(311)
s(3320) =< aux(311)
s(3321) =< aux(311)
s(3322) =< aux(311)
s(3318) =< s(3309)
s(3319) =< s(3309)
s(3321) =< s(3309)
s(3317) =< s(3310)
s(3321) =< s(3310)
s(3317) =< aux(318)
s(3318) =< aux(318)
s(3319) =< aux(318)
s(3320) =< aux(318)
s(3321) =< aux(318)
s(3318) =< aux(317)
s(3319) =< aux(317)
s(3320) =< aux(317)
s(3321) =< aux(317)
s(3322) =< aux(317)
s(3317) =< aux(317)
s(3317) =< aux(320)
s(3318) =< aux(320)
s(3321) =< aux(320)
s(3317) =< aux(319)
s(3318) =< aux(319)
s(3321) =< aux(319)
s(3323) =< aux(311)
s(3324) =< aux(311)
s(3325) =< aux(311)
s(3324) =< aux(318)
s(3325) =< aux(318)
s(3323) =< aux(317)
s(3326) =< aux(311)
s(3327) =< aux(311)
s(3328) =< s(3323)
s(3329) =< s(3323)
s(3324) =< s(3323)
s(3326) =< s(3325)
s(3329) =< s(3325)
s(3327) =< s(3323)
s(3349) =< aux(311)
s(3350) =< aux(311)
s(3351) =< aux(311)
s(3352) =< aux(311)
s(3353) =< aux(311)
s(3349) =< aux(312)
s(3350) =< aux(312)
s(3351) =< aux(312)
s(3352) =< aux(312)
s(3353) =< aux(312)
s(3354) =< aux(312)
s(3350) =< aux(314)
s(3351) =< aux(314)
s(3353) =< aux(314)
s(3349) =< aux(315)
s(3353) =< aux(315)
s(3349) =< aux(316)
s(3350) =< aux(316)
s(3351) =< aux(316)
s(3352) =< aux(316)
s(3353) =< aux(316)
s(3350) =< aux(317)
s(3351) =< aux(317)
s(3352) =< aux(317)
s(3353) =< aux(317)
s(3354) =< aux(317)
s(3349) =< aux(318)
s(3350) =< aux(318)
s(3351) =< aux(318)
s(3352) =< aux(318)
s(3353) =< aux(318)
s(3349) =< aux(317)
s(3349) =< aux(320)
s(3350) =< aux(320)
s(3353) =< aux(320)
s(3349) =< aux(319)
s(3350) =< aux(319)
s(3353) =< aux(319)
s(3355) =< aux(312)
s(3356) =< aux(313)
s(3357) =< aux(313)
s(3356) =< aux(318)
s(3357) =< aux(318)
s(3355) =< aux(317)
s(3358) =< aux(311)
s(3359) =< aux(311)
s(3360) =< s(3355)
s(3361) =< s(3355)
s(3356) =< s(3355)
s(3358) =< s(3357)
s(3361) =< s(3357)
s(3359) =< s(3355)
s(3384) =< aux(316)
s(3385) =< aux(316)
s(3384) =< s(3357)
s(3385) =< s(3355)

  with precondition: [D=1,H=1,I=1,J=0,L=1,A>=2,C>=0,E>=2,G>=0,K>=0,B+1>=A,F+1>=E] 

* Chain [252]: 28*s(3396)+16*s(3397)+6*s(3409)+10*s(3412)+10*s(3413)+12*s(3414)+6*s(3415)+30*s(3416)+48*s(3417)+30*s(3418)+24*s(3419)+30*s(3420)+104*s(3421)+78
  Such that:s(3401) =< A/2
s(3402) =< A/3
s(3404) =< F
s(3406) =< F/2
s(3407) =< F/2+1/2
aux(321) =< A
aux(322) =< F+1
s(3408) =< aux(321)
s(3409) =< aux(321)
s(3410) =< aux(321)
s(3409) =< aux(322)
s(3410) =< aux(322)
s(3396) =< aux(322)
s(3408) =< s(3404)
s(3412) =< aux(322)
s(3413) =< aux(322)
s(3414) =< s(3408)
s(3415) =< s(3408)
s(3409) =< s(3408)
s(3412) =< s(3410)
s(3415) =< s(3410)
s(3413) =< s(3408)
s(3416) =< aux(321)
s(3417) =< aux(321)
s(3418) =< aux(321)
s(3419) =< aux(321)
s(3420) =< aux(321)
s(3416) =< aux(322)
s(3417) =< aux(322)
s(3418) =< aux(322)
s(3419) =< aux(322)
s(3420) =< aux(322)
s(3421) =< aux(321)
s(3417) =< s(3401)
s(3418) =< s(3401)
s(3420) =< s(3401)
s(3416) =< s(3402)
s(3420) =< s(3402)
s(3417) =< s(3404)
s(3418) =< s(3404)
s(3419) =< s(3404)
s(3420) =< s(3404)
s(3421) =< s(3404)
s(3416) =< s(3404)
s(3416) =< s(3407)
s(3417) =< s(3407)
s(3420) =< s(3407)
s(3416) =< s(3406)
s(3417) =< s(3406)
s(3420) =< s(3406)
s(3397) =< aux(321)

  with precondition: [D=1,H=1,I=1,J=0,L=1,A=B+1,E=F+1,E>=2,K>=0,C+1>=A,A>=E+1,G+1>=E] 

* Chain [251]: 6*s(3424)+10*s(3425)+6*s(3426)+28*s(3427)+30*s(3439)+48*s(3440)+30*s(3441)+24*s(3442)+30*s(3443)+104*s(3444)+6*s(3446)+10*s(3448)+10*s(3449)+12*s(3450)+6*s(3451)+75
  Such that:s(3431) =< A/2
s(3432) =< A/3
s(3435) =< F+1
s(3437) =< F/2+1/2
aux(323) =< A
aux(324) =< E
aux(325) =< F
aux(326) =< F/2
s(3424) =< aux(325)
s(3425) =< aux(326)
s(3427) =< aux(323)
s(3439) =< aux(323)
s(3440) =< aux(323)
s(3441) =< aux(323)
s(3442) =< aux(323)
s(3443) =< aux(323)
s(3444) =< aux(323)
s(3440) =< s(3431)
s(3441) =< s(3431)
s(3443) =< s(3431)
s(3439) =< s(3432)
s(3443) =< s(3432)
s(3439) =< aux(324)
s(3440) =< aux(324)
s(3441) =< aux(324)
s(3442) =< aux(324)
s(3443) =< aux(324)
s(3440) =< aux(325)
s(3441) =< aux(325)
s(3442) =< aux(325)
s(3443) =< aux(325)
s(3444) =< aux(325)
s(3439) =< s(3435)
s(3440) =< s(3435)
s(3441) =< s(3435)
s(3442) =< s(3435)
s(3443) =< s(3435)
s(3439) =< aux(325)
s(3439) =< s(3437)
s(3440) =< s(3437)
s(3443) =< s(3437)
s(3439) =< aux(326)
s(3440) =< aux(326)
s(3443) =< aux(326)
s(3445) =< aux(323)
s(3446) =< aux(323)
s(3447) =< aux(323)
s(3446) =< s(3435)
s(3447) =< s(3435)
s(3445) =< aux(325)
s(3448) =< aux(323)
s(3449) =< aux(323)
s(3450) =< s(3445)
s(3451) =< s(3445)
s(3446) =< s(3445)
s(3448) =< s(3447)
s(3451) =< s(3447)
s(3449) =< s(3445)
s(3426) =< aux(324)
s(3425) =< aux(324)

  with precondition: [D=1,H=1,I=1,J=0,L=1,A=B+1,A>=2,K>=0,F+2>=2*E,C+1>=A,E>=A,G>=E] 

* Chain [250]: 6*s(3454)+10*s(3455)+18*s(3456)+16*s(3457)+6*s(3469)+10*s(3472)+10*s(3473)+12*s(3474)+6*s(3475)+30*s(3476)+48*s(3477)+30*s(3478)+24*s(3479)+30*s(3480)+104*s(3481)+78
  Such that:s(3461) =< A/2
s(3462) =< A/3
s(3465) =< F+1
s(3467) =< F/2+1/2
aux(327) =< A
aux(328) =< E
aux(329) =< F
aux(330) =< F/2
s(3454) =< aux(329)
s(3455) =< aux(330)
s(3468) =< aux(327)
s(3469) =< aux(327)
s(3470) =< aux(327)
s(3469) =< s(3465)
s(3470) =< s(3465)
s(3456) =< aux(328)
s(3468) =< aux(329)
s(3472) =< aux(328)
s(3473) =< aux(328)
s(3474) =< s(3468)
s(3475) =< s(3468)
s(3469) =< s(3468)
s(3472) =< s(3470)
s(3475) =< s(3470)
s(3473) =< s(3468)
s(3476) =< aux(327)
s(3477) =< aux(327)
s(3478) =< aux(327)
s(3479) =< aux(327)
s(3480) =< aux(327)
s(3476) =< aux(328)
s(3477) =< aux(328)
s(3478) =< aux(328)
s(3479) =< aux(328)
s(3480) =< aux(328)
s(3481) =< aux(327)
s(3477) =< s(3461)
s(3478) =< s(3461)
s(3480) =< s(3461)
s(3476) =< s(3462)
s(3480) =< s(3462)
s(3477) =< aux(329)
s(3478) =< aux(329)
s(3479) =< aux(329)
s(3480) =< aux(329)
s(3481) =< aux(329)
s(3476) =< s(3465)
s(3477) =< s(3465)
s(3478) =< s(3465)
s(3479) =< s(3465)
s(3480) =< s(3465)
s(3476) =< aux(329)
s(3476) =< s(3467)
s(3477) =< s(3467)
s(3480) =< s(3467)
s(3476) =< aux(330)
s(3477) =< aux(330)
s(3480) =< aux(330)
s(3455) =< aux(328)
s(3457) =< aux(327)

  with precondition: [D=1,H=1,I=1,J=0,L=1,A=B+1,E>=2,K>=0,F+2>=2*E,C+1>=A,A>=E+1,G>=E] 

* Chain [249]: 6*s(3483)+10*s(3484)+28*s(3486)+6*s(3487)+6*s(3499)+10*s(3502)+10*s(3503)+12*s(3504)+6*s(3505)+30*s(3506)+48*s(3507)+30*s(3508)+24*s(3509)+30*s(3510)+104*s(3511)+78
  Such that:s(3488) =< B+1
s(3492) =< B/3
s(3494) =< F
s(3496) =< F/2
s(3497) =< F/2+1/2
aux(331) =< A
aux(332) =< B
aux(333) =< B/2
aux(334) =< F+1
s(3483) =< aux(332)
s(3484) =< aux(333)
s(3498) =< aux(332)
s(3499) =< s(3488)
s(3500) =< s(3488)
s(3499) =< aux(334)
s(3500) =< aux(334)
s(3486) =< aux(334)
s(3498) =< s(3494)
s(3502) =< aux(334)
s(3503) =< aux(334)
s(3504) =< s(3498)
s(3505) =< s(3498)
s(3499) =< s(3498)
s(3502) =< s(3500)
s(3505) =< s(3500)
s(3503) =< s(3498)
s(3506) =< aux(331)
s(3507) =< aux(331)
s(3508) =< aux(331)
s(3509) =< aux(331)
s(3510) =< aux(331)
s(3506) =< aux(334)
s(3507) =< aux(334)
s(3508) =< aux(334)
s(3509) =< aux(334)
s(3510) =< aux(334)
s(3506) =< aux(332)
s(3507) =< aux(332)
s(3508) =< aux(332)
s(3509) =< aux(332)
s(3510) =< aux(332)
s(3511) =< aux(332)
s(3507) =< aux(333)
s(3508) =< aux(333)
s(3510) =< aux(333)
s(3506) =< s(3492)
s(3510) =< s(3492)
s(3507) =< s(3494)
s(3508) =< s(3494)
s(3509) =< s(3494)
s(3510) =< s(3494)
s(3511) =< s(3494)
s(3506) =< s(3494)
s(3506) =< s(3497)
s(3507) =< s(3497)
s(3510) =< s(3497)
s(3506) =< s(3496)
s(3507) =< s(3496)
s(3510) =< s(3496)
s(3487) =< aux(331)
s(3484) =< aux(331)

  with precondition: [D=1,H=1,I=1,J=0,L=1,E=F+1,E>=2,K>=0,B+2>=2*A,C>=A,A>=E+1,G+1>=E] 

* Chain [248]: 6*s(3513)+10*s(3514)+16*s(3516)+18*s(3517)+30*s(3529)+48*s(3530)+30*s(3531)+24*s(3532)+30*s(3533)+104*s(3534)+6*s(3536)+10*s(3538)+10*s(3539)+12*s(3540)+6*s(3541)+75
  Such that:s(3518) =< B+1
s(3522) =< B/3
s(3524) =< F
s(3526) =< F/2
s(3527) =< F/2+1/2
aux(335) =< A
aux(336) =< B
aux(337) =< B/2
aux(338) =< F+1
s(3513) =< aux(336)
s(3514) =< aux(337)
s(3517) =< aux(335)
s(3529) =< aux(335)
s(3530) =< aux(335)
s(3531) =< aux(335)
s(3532) =< aux(335)
s(3533) =< aux(335)
s(3529) =< aux(336)
s(3530) =< aux(336)
s(3531) =< aux(336)
s(3532) =< aux(336)
s(3533) =< aux(336)
s(3534) =< aux(336)
s(3530) =< aux(337)
s(3531) =< aux(337)
s(3533) =< aux(337)
s(3529) =< s(3522)
s(3533) =< s(3522)
s(3529) =< aux(338)
s(3530) =< aux(338)
s(3531) =< aux(338)
s(3532) =< aux(338)
s(3533) =< aux(338)
s(3530) =< s(3524)
s(3531) =< s(3524)
s(3532) =< s(3524)
s(3533) =< s(3524)
s(3534) =< s(3524)
s(3529) =< s(3524)
s(3529) =< s(3527)
s(3530) =< s(3527)
s(3533) =< s(3527)
s(3529) =< s(3526)
s(3530) =< s(3526)
s(3533) =< s(3526)
s(3535) =< aux(336)
s(3536) =< s(3518)
s(3537) =< s(3518)
s(3536) =< aux(338)
s(3537) =< aux(338)
s(3535) =< s(3524)
s(3538) =< aux(335)
s(3539) =< aux(335)
s(3540) =< s(3535)
s(3541) =< s(3535)
s(3536) =< s(3535)
s(3538) =< s(3537)
s(3541) =< s(3537)
s(3539) =< s(3535)
s(3516) =< aux(338)
s(3514) =< aux(335)

  with precondition: [D=1,H=1,I=1,J=0,L=1,E=F+1,A>=2,K>=0,B+2>=2*A,C>=A,E>=A,G+1>=E] 

* Chain [247]: 16*s(3544)+32*s(3545)+15*s(3556)+24*s(3557)+15*s(3558)+12*s(3559)+15*s(3560)+52*s(3561)+64
  Such that:s(3548) =< A/2
s(3549) =< A/3
s(3551) =< F
s(3553) =< F/2
s(3554) =< F/2+1/2
aux(339) =< A
aux(340) =< F+1
s(3545) =< aux(339)
s(3556) =< aux(339)
s(3557) =< aux(339)
s(3558) =< aux(339)
s(3559) =< aux(339)
s(3560) =< aux(339)
s(3561) =< aux(339)
s(3557) =< s(3548)
s(3558) =< s(3548)
s(3560) =< s(3548)
s(3556) =< s(3549)
s(3560) =< s(3549)
s(3556) =< aux(340)
s(3557) =< aux(340)
s(3558) =< aux(340)
s(3559) =< aux(340)
s(3560) =< aux(340)
s(3557) =< s(3551)
s(3558) =< s(3551)
s(3559) =< s(3551)
s(3560) =< s(3551)
s(3561) =< s(3551)
s(3556) =< s(3551)
s(3556) =< s(3554)
s(3557) =< s(3554)
s(3560) =< s(3554)
s(3556) =< s(3553)
s(3557) =< s(3553)
s(3560) =< s(3553)
s(3544) =< aux(340)

  with precondition: [D=1,H=1,L=1,A=B+1,E=F+1,A=I,A=J+1,A>=2,C+1>=A,E>=A,K+1>=A,G+1>=E] 

* Chain [246]: 32*s(3564)+16*s(3565)+15*s(3576)+24*s(3577)+15*s(3578)+12*s(3579)+15*s(3580)+52*s(3581)+67
  Such that:s(3568) =< A/2
s(3569) =< A/3
s(3571) =< F
s(3573) =< F/2
s(3574) =< F/2+1/2
aux(341) =< A
aux(342) =< F+1
s(3564) =< aux(342)
s(3576) =< aux(341)
s(3577) =< aux(341)
s(3578) =< aux(341)
s(3579) =< aux(341)
s(3580) =< aux(341)
s(3576) =< aux(342)
s(3577) =< aux(342)
s(3578) =< aux(342)
s(3579) =< aux(342)
s(3580) =< aux(342)
s(3581) =< aux(341)
s(3577) =< s(3568)
s(3578) =< s(3568)
s(3580) =< s(3568)
s(3576) =< s(3569)
s(3580) =< s(3569)
s(3577) =< s(3571)
s(3578) =< s(3571)
s(3579) =< s(3571)
s(3580) =< s(3571)
s(3581) =< s(3571)
s(3576) =< s(3571)
s(3576) =< s(3574)
s(3577) =< s(3574)
s(3580) =< s(3574)
s(3576) =< s(3573)
s(3577) =< s(3573)
s(3580) =< s(3573)
s(3565) =< aux(341)

  with precondition: [D=1,H=1,L=1,A=B+1,E=F+1,E=I,E=J+1,E>=2,C+1>=A,A>=E+1,G+1>=E,K+1>=E] 

* Chain [245]: 6*s(3584)+10*s(3585)+6*s(3586)+32*s(3587)+15*s(3598)+24*s(3599)+15*s(3600)+12*s(3601)+15*s(3602)+52*s(3603)+64
  Such that:s(3590) =< A/2
s(3591) =< A/3
s(3594) =< F+1
s(3596) =< F/2+1/2
aux(343) =< A
aux(344) =< E
aux(345) =< F
aux(346) =< F/2
s(3584) =< aux(345)
s(3585) =< aux(346)
s(3587) =< aux(343)
s(3598) =< aux(343)
s(3599) =< aux(343)
s(3600) =< aux(343)
s(3601) =< aux(343)
s(3602) =< aux(343)
s(3603) =< aux(343)
s(3599) =< s(3590)
s(3600) =< s(3590)
s(3602) =< s(3590)
s(3598) =< s(3591)
s(3602) =< s(3591)
s(3598) =< aux(344)
s(3599) =< aux(344)
s(3600) =< aux(344)
s(3601) =< aux(344)
s(3602) =< aux(344)
s(3599) =< aux(345)
s(3600) =< aux(345)
s(3601) =< aux(345)
s(3602) =< aux(345)
s(3603) =< aux(345)
s(3598) =< s(3594)
s(3599) =< s(3594)
s(3600) =< s(3594)
s(3601) =< s(3594)
s(3602) =< s(3594)
s(3598) =< aux(345)
s(3598) =< s(3596)
s(3599) =< s(3596)
s(3602) =< s(3596)
s(3598) =< aux(346)
s(3599) =< aux(346)
s(3602) =< aux(346)
s(3586) =< aux(344)
s(3585) =< aux(344)

  with precondition: [D=1,H=1,L=1,A=B+1,A=I,A=J+1,A>=2,F+2>=2*E,C+1>=A,E>=A,K+1>=A,G>=E] 

* Chain [244]: 6*s(3606)+10*s(3607)+22*s(3608)+16*s(3609)+15*s(3620)+24*s(3621)+15*s(3622)+12*s(3623)+15*s(3624)+52*s(3625)+67
  Such that:s(3612) =< A/2
s(3613) =< A/3
s(3616) =< F+1
s(3618) =< F/2+1/2
aux(347) =< A
aux(348) =< E
aux(349) =< F
aux(350) =< F/2
s(3606) =< aux(349)
s(3607) =< aux(350)
s(3608) =< aux(348)
s(3620) =< aux(347)
s(3621) =< aux(347)
s(3622) =< aux(347)
s(3623) =< aux(347)
s(3624) =< aux(347)
s(3620) =< aux(348)
s(3621) =< aux(348)
s(3622) =< aux(348)
s(3623) =< aux(348)
s(3624) =< aux(348)
s(3625) =< aux(347)
s(3621) =< s(3612)
s(3622) =< s(3612)
s(3624) =< s(3612)
s(3620) =< s(3613)
s(3624) =< s(3613)
s(3621) =< aux(349)
s(3622) =< aux(349)
s(3623) =< aux(349)
s(3624) =< aux(349)
s(3625) =< aux(349)
s(3620) =< s(3616)
s(3621) =< s(3616)
s(3622) =< s(3616)
s(3623) =< s(3616)
s(3624) =< s(3616)
s(3620) =< aux(349)
s(3620) =< s(3618)
s(3621) =< s(3618)
s(3624) =< s(3618)
s(3620) =< aux(350)
s(3621) =< aux(350)
s(3624) =< aux(350)
s(3607) =< aux(348)
s(3609) =< aux(347)

  with precondition: [D=1,H=1,L=1,A=B+1,E=I,E=J+1,E>=2,F+2>=2*E,C+1>=A,A>=E+1,G>=E,K+1>=E] 

* Chain [243]: 6*s(3628)+10*s(3629)+12*s(3630)+16*s(3631)+10*s(3641)+58*s(3642)+15*s(3644)+24*s(3645)+15*s(3646)+12*s(3647)+15*s(3648)+67
  Such that:s(3639) =< A/2
s(3634) =< A/3
s(3637) =< F+1
s(3638) =< F/2+1/2
aux(351) =< A
aux(352) =< E
aux(353) =< F
aux(354) =< F/2
s(3628) =< aux(353)
s(3629) =< aux(354)
s(3641) =< s(3639)
s(3641) =< aux(354)
s(3642) =< aux(351)
s(3642) =< aux(353)
s(3630) =< aux(352)
s(3641) =< aux(352)
s(3644) =< aux(351)
s(3645) =< aux(351)
s(3646) =< aux(351)
s(3647) =< aux(351)
s(3648) =< aux(351)
s(3644) =< aux(352)
s(3645) =< aux(352)
s(3646) =< aux(352)
s(3647) =< aux(352)
s(3648) =< aux(352)
s(3645) =< s(3639)
s(3646) =< s(3639)
s(3648) =< s(3639)
s(3644) =< s(3634)
s(3648) =< s(3634)
s(3645) =< aux(353)
s(3646) =< aux(353)
s(3647) =< aux(353)
s(3648) =< aux(353)
s(3644) =< s(3637)
s(3645) =< s(3637)
s(3646) =< s(3637)
s(3647) =< s(3637)
s(3648) =< s(3637)
s(3644) =< aux(353)
s(3644) =< s(3638)
s(3645) =< s(3638)
s(3648) =< s(3638)
s(3644) =< aux(354)
s(3645) =< aux(354)
s(3648) =< aux(354)
s(3629) =< aux(352)
s(3631) =< aux(351)

  with precondition: [D=1,H=1,L=1,A=B+1,E=I,E>=2,J+2>=2*E,C+1>=A,G>=E,K>=E,A>=J+2,F>=J] 

* Chain [242]: 6*s(3650)+10*s(3651)+16*s(3653)+22*s(3654)+15*s(3665)+24*s(3666)+15*s(3667)+12*s(3668)+15*s(3669)+52*s(3670)+64
  Such that:s(3658) =< B/3
s(3660) =< F
s(3662) =< F/2
s(3663) =< F/2+1/2
aux(355) =< A
aux(356) =< B
aux(357) =< B/2
aux(358) =< F+1
s(3650) =< aux(356)
s(3651) =< aux(357)
s(3654) =< aux(355)
s(3665) =< aux(355)
s(3666) =< aux(355)
s(3667) =< aux(355)
s(3668) =< aux(355)
s(3669) =< aux(355)
s(3665) =< aux(356)
s(3666) =< aux(356)
s(3667) =< aux(356)
s(3668) =< aux(356)
s(3669) =< aux(356)
s(3670) =< aux(356)
s(3666) =< aux(357)
s(3667) =< aux(357)
s(3669) =< aux(357)
s(3665) =< s(3658)
s(3669) =< s(3658)
s(3665) =< aux(358)
s(3666) =< aux(358)
s(3667) =< aux(358)
s(3668) =< aux(358)
s(3669) =< aux(358)
s(3666) =< s(3660)
s(3667) =< s(3660)
s(3668) =< s(3660)
s(3669) =< s(3660)
s(3670) =< s(3660)
s(3665) =< s(3660)
s(3665) =< s(3663)
s(3666) =< s(3663)
s(3669) =< s(3663)
s(3665) =< s(3662)
s(3666) =< s(3662)
s(3669) =< s(3662)
s(3653) =< aux(358)
s(3651) =< aux(355)

  with precondition: [D=1,H=1,L=1,E=F+1,A=I,A=J+1,A>=2,B+2>=2*A,C>=A,E>=A,K+1>=A,G+1>=E] 

* Chain [241]: 6*s(3672)+10*s(3673)+16*s(3675)+12*s(3676)+10*s(3686)+58*s(3687)+15*s(3689)+24*s(3690)+15*s(3691)+12*s(3692)+15*s(3693)+64
  Such that:s(3679) =< B/3
s(3681) =< F
s(3685) =< F/2
s(3683) =< F/2+1/2
aux(359) =< A
aux(360) =< B
aux(361) =< B/2
aux(362) =< F+1
s(3672) =< aux(360)
s(3673) =< aux(361)
s(3686) =< aux(361)
s(3686) =< s(3685)
s(3687) =< aux(360)
s(3687) =< s(3681)
s(3676) =< aux(359)
s(3686) =< aux(359)
s(3689) =< aux(359)
s(3690) =< aux(359)
s(3691) =< aux(359)
s(3692) =< aux(359)
s(3693) =< aux(359)
s(3689) =< aux(360)
s(3690) =< aux(360)
s(3691) =< aux(360)
s(3692) =< aux(360)
s(3693) =< aux(360)
s(3690) =< aux(361)
s(3691) =< aux(361)
s(3693) =< aux(361)
s(3689) =< s(3679)
s(3693) =< s(3679)
s(3689) =< aux(362)
s(3690) =< aux(362)
s(3691) =< aux(362)
s(3692) =< aux(362)
s(3693) =< aux(362)
s(3690) =< s(3681)
s(3691) =< s(3681)
s(3692) =< s(3681)
s(3693) =< s(3681)
s(3689) =< s(3681)
s(3689) =< s(3683)
s(3690) =< s(3683)
s(3693) =< s(3683)
s(3689) =< s(3685)
s(3690) =< s(3685)
s(3693) =< s(3685)
s(3675) =< aux(362)
s(3673) =< aux(359)

  with precondition: [D=1,H=1,L=1,E=F+1,A=I,A>=2,J+2>=2*A,C>=A,K>=A,G+1>=E,B>=J,E>=J+1] 

* Chain [240]: 6*s(3695)+10*s(3696)+32*s(3698)+6*s(3699)+15*s(3710)+24*s(3711)+15*s(3712)+12*s(3713)+15*s(3714)+52*s(3715)+67
  Such that:s(3703) =< B/3
s(3705) =< F
s(3707) =< F/2
s(3708) =< F/2+1/2
aux(363) =< A
aux(364) =< B
aux(365) =< B/2
aux(366) =< F+1
s(3695) =< aux(364)
s(3696) =< aux(365)
s(3698) =< aux(366)
s(3710) =< aux(363)
s(3711) =< aux(363)
s(3712) =< aux(363)
s(3713) =< aux(363)
s(3714) =< aux(363)
s(3710) =< aux(366)
s(3711) =< aux(366)
s(3712) =< aux(366)
s(3713) =< aux(366)
s(3714) =< aux(366)
s(3710) =< aux(364)
s(3711) =< aux(364)
s(3712) =< aux(364)
s(3713) =< aux(364)
s(3714) =< aux(364)
s(3715) =< aux(364)
s(3711) =< aux(365)
s(3712) =< aux(365)
s(3714) =< aux(365)
s(3710) =< s(3703)
s(3714) =< s(3703)
s(3711) =< s(3705)
s(3712) =< s(3705)
s(3713) =< s(3705)
s(3714) =< s(3705)
s(3715) =< s(3705)
s(3710) =< s(3705)
s(3710) =< s(3708)
s(3711) =< s(3708)
s(3714) =< s(3708)
s(3710) =< s(3707)
s(3711) =< s(3707)
s(3714) =< s(3707)
s(3699) =< aux(363)
s(3696) =< aux(363)

  with precondition: [D=1,H=1,L=1,E=F+1,E=I,E=J+1,E>=2,B+2>=2*A,C>=A,A>=E+1,G+1>=E,K+1>=E] 

* Chain [239]: 6*s(3717)+10*s(3718)+6*s(3720)+10*s(3721)+6*s(3722)+22*s(3723)+15*s(3734)+24*s(3735)+15*s(3736)+12*s(3737)+15*s(3738)+52*s(3739)+64
  Such that:s(3727) =< B/3
s(3730) =< F+1
s(3732) =< F/2+1/2
aux(367) =< A
aux(368) =< B
aux(369) =< B/2
aux(370) =< E
aux(371) =< F
aux(372) =< F/2
s(3717) =< aux(368)
s(3718) =< aux(369)
s(3720) =< aux(371)
s(3721) =< aux(372)
s(3723) =< aux(367)
s(3734) =< aux(367)
s(3735) =< aux(367)
s(3736) =< aux(367)
s(3737) =< aux(367)
s(3738) =< aux(367)
s(3734) =< aux(368)
s(3735) =< aux(368)
s(3736) =< aux(368)
s(3737) =< aux(368)
s(3738) =< aux(368)
s(3739) =< aux(368)
s(3735) =< aux(369)
s(3736) =< aux(369)
s(3738) =< aux(369)
s(3734) =< s(3727)
s(3738) =< s(3727)
s(3734) =< aux(370)
s(3735) =< aux(370)
s(3736) =< aux(370)
s(3737) =< aux(370)
s(3738) =< aux(370)
s(3735) =< aux(371)
s(3736) =< aux(371)
s(3737) =< aux(371)
s(3738) =< aux(371)
s(3739) =< aux(371)
s(3734) =< s(3730)
s(3735) =< s(3730)
s(3736) =< s(3730)
s(3737) =< s(3730)
s(3738) =< s(3730)
s(3734) =< aux(371)
s(3734) =< s(3732)
s(3735) =< s(3732)
s(3738) =< s(3732)
s(3734) =< aux(372)
s(3735) =< aux(372)
s(3738) =< aux(372)
s(3722) =< aux(370)
s(3721) =< aux(370)
s(3718) =< aux(367)

  with precondition: [D=1,H=1,L=1,A=I,A=J+1,A>=2,B+2>=2*A,F+2>=2*E,C>=A,E>=A,K+1>=A,G>=E] 

* Chain [238]: 6*s(3741)+10*s(3742)+6*s(3744)+10*s(3745)+6*s(3746)+12*s(3747)+10*s(3757)+58*s(3758)+15*s(3760)+24*s(3761)+15*s(3762)+12*s(3763)+15*s(3764)+64
  Such that:s(3750) =< B/3
s(3753) =< F+1
s(3754) =< F/2+1/2
aux(373) =< A
aux(374) =< B
aux(375) =< B/2
aux(376) =< E
aux(377) =< F
aux(378) =< F/2
s(3741) =< aux(374)
s(3742) =< aux(375)
s(3744) =< aux(377)
s(3745) =< aux(378)
s(3757) =< aux(375)
s(3757) =< aux(378)
s(3758) =< aux(374)
s(3758) =< aux(377)
s(3747) =< aux(373)
s(3757) =< aux(373)
s(3760) =< aux(373)
s(3761) =< aux(373)
s(3762) =< aux(373)
s(3763) =< aux(373)
s(3764) =< aux(373)
s(3760) =< aux(374)
s(3761) =< aux(374)
s(3762) =< aux(374)
s(3763) =< aux(374)
s(3764) =< aux(374)
s(3761) =< aux(375)
s(3762) =< aux(375)
s(3764) =< aux(375)
s(3760) =< s(3750)
s(3764) =< s(3750)
s(3760) =< aux(376)
s(3761) =< aux(376)
s(3762) =< aux(376)
s(3763) =< aux(376)
s(3764) =< aux(376)
s(3761) =< aux(377)
s(3762) =< aux(377)
s(3763) =< aux(377)
s(3764) =< aux(377)
s(3760) =< s(3753)
s(3761) =< s(3753)
s(3762) =< s(3753)
s(3763) =< s(3753)
s(3764) =< s(3753)
s(3760) =< aux(377)
s(3760) =< s(3754)
s(3761) =< s(3754)
s(3764) =< s(3754)
s(3760) =< aux(378)
s(3761) =< aux(378)
s(3764) =< aux(378)
s(3746) =< aux(376)
s(3745) =< aux(376)
s(3742) =< aux(373)

  with precondition: [D=1,H=1,L=1,A=I,A>=2,J+2>=2*A,F+2>=2*E,C>=A,E>=A,K>=A,G>=E,B>=J,F>=J] 

* Chain [237]: 6*s(3766)+10*s(3767)+6*s(3769)+10*s(3770)+22*s(3771)+6*s(3772)+15*s(3783)+24*s(3784)+15*s(3785)+12*s(3786)+15*s(3787)+52*s(3788)+67
  Such that:s(3776) =< B/3
s(3779) =< F+1
s(3781) =< F/2+1/2
aux(379) =< A
aux(380) =< B
aux(381) =< B/2
aux(382) =< E
aux(383) =< F
aux(384) =< F/2
s(3766) =< aux(380)
s(3767) =< aux(381)
s(3769) =< aux(383)
s(3770) =< aux(384)
s(3771) =< aux(382)
s(3783) =< aux(379)
s(3784) =< aux(379)
s(3785) =< aux(379)
s(3786) =< aux(379)
s(3787) =< aux(379)
s(3783) =< aux(382)
s(3784) =< aux(382)
s(3785) =< aux(382)
s(3786) =< aux(382)
s(3787) =< aux(382)
s(3783) =< aux(380)
s(3784) =< aux(380)
s(3785) =< aux(380)
s(3786) =< aux(380)
s(3787) =< aux(380)
s(3788) =< aux(380)
s(3784) =< aux(381)
s(3785) =< aux(381)
s(3787) =< aux(381)
s(3783) =< s(3776)
s(3787) =< s(3776)
s(3784) =< aux(383)
s(3785) =< aux(383)
s(3786) =< aux(383)
s(3787) =< aux(383)
s(3788) =< aux(383)
s(3783) =< s(3779)
s(3784) =< s(3779)
s(3785) =< s(3779)
s(3786) =< s(3779)
s(3787) =< s(3779)
s(3783) =< aux(383)
s(3783) =< s(3781)
s(3784) =< s(3781)
s(3787) =< s(3781)
s(3783) =< aux(384)
s(3784) =< aux(384)
s(3787) =< aux(384)
s(3770) =< aux(382)
s(3772) =< aux(379)
s(3767) =< aux(379)

  with precondition: [D=1,H=1,L=1,E=I,E=J+1,E>=2,B+2>=2*A,F+2>=2*E,C>=A,A>=E+1,G>=E,K+1>=E] 

* Chain [236]: 6*s(3790)+10*s(3791)+6*s(3793)+10*s(3794)+12*s(3795)+6*s(3796)+10*s(3806)+58*s(3807)+15*s(3809)+24*s(3810)+15*s(3811)+12*s(3812)+15*s(3813)+67
  Such that:s(3799) =< B/3
s(3802) =< F+1
s(3803) =< F/2+1/2
aux(385) =< A
aux(386) =< B
aux(387) =< B/2
aux(388) =< E
aux(389) =< F
aux(390) =< F/2
s(3790) =< aux(386)
s(3791) =< aux(387)
s(3793) =< aux(389)
s(3794) =< aux(390)
s(3806) =< aux(387)
s(3806) =< aux(390)
s(3807) =< aux(386)
s(3807) =< aux(389)
s(3795) =< aux(388)
s(3806) =< aux(388)
s(3809) =< aux(385)
s(3810) =< aux(385)
s(3811) =< aux(385)
s(3812) =< aux(385)
s(3813) =< aux(385)
s(3809) =< aux(388)
s(3810) =< aux(388)
s(3811) =< aux(388)
s(3812) =< aux(388)
s(3813) =< aux(388)
s(3809) =< aux(386)
s(3810) =< aux(386)
s(3811) =< aux(386)
s(3812) =< aux(386)
s(3813) =< aux(386)
s(3810) =< aux(387)
s(3811) =< aux(387)
s(3813) =< aux(387)
s(3809) =< s(3799)
s(3813) =< s(3799)
s(3810) =< aux(389)
s(3811) =< aux(389)
s(3812) =< aux(389)
s(3813) =< aux(389)
s(3809) =< s(3802)
s(3810) =< s(3802)
s(3811) =< s(3802)
s(3812) =< s(3802)
s(3813) =< s(3802)
s(3809) =< aux(389)
s(3809) =< s(3803)
s(3810) =< s(3803)
s(3813) =< s(3803)
s(3809) =< aux(390)
s(3810) =< aux(390)
s(3813) =< aux(390)
s(3794) =< aux(388)
s(3796) =< aux(385)
s(3791) =< aux(385)

  with precondition: [D=1,H=1,L=1,E=I,E>=2,B+2>=2*A,J+2>=2*E,C>=A,A>=E+1,G>=E,K>=E,B>=J+1,F>=J] 


#### Simplifying cost structure of CE 361 
 * Renamed intermediate variables: 
[ (eq(363,1),s(1207))>>s(3890), (eq(363,1),s(1208))>>s(3891), (eq(363,1),s(1209))>>s(3892), (eq(363,1),s(1210))>>s(3893), (eq(363,1),s(1211))>>s(3894), (eq(363,1),s(1212))>>s(3895), (eq(363,1),s(1213))>>s(3896), (eq(363,1),s(1214))>>s(3897), (eq(363,1),s(1215))>>s(3898)]

#### Simplifying cost structure of CE 363 
 * Joined equivalent variables [aux(398),s(3891)] into aux(398)
 * Joined equivalent variables [aux(399),s(3894)] into aux(399)
 * Joined equivalent variables [s(3892),s(3897)] into s(3892)
 * Renamed intermediate variables: 
[ (eq(364,1),s(1216))>>s(3899)]

#### Simplifying cost structure of CE 364 
 * Joined equivalent variables [aux(400),aux(398)] into aux(400)
 * Joined equivalent variables [s(3890),s(3899)] into s(3890)
 * Renamed intermediate variables: 
[ (eq(362,1),s(1205))>>s(3900), (eq(362,1),s(1206))>>s(3901)]

#### Simplifying cost structure of CE 362 
 * Renamed intermediate variables: 
[ (eq(365,1),s(1219))>>s(3902), (eq(365,1),s(1217))>>s(3903), (eq(365,1),s(1218))>>s(3904), (eq(365,1),s(1220))>>s(3905)]

#### Simplifying cost structure of CE 365 

#### Computing cost of chain [multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])] with multiple recursion
 * Renamed intermediate variables: 
[ (eq(393,1),s(3799))>>s(3906), (eq(393,1),s(3802))>>s(3907), (eq(393,1),s(3803))>>s(3908), (eq(393,1),aux(385))>>s(3909), (eq(393,1),aux(386))>>s(3910), (eq(393,1),aux(387))>>s(3911), (eq(393,1),aux(388))>>s(3912), (eq(393,1),aux(389))>>s(3913), (eq(393,1),aux(390))>>s(3914), (eq(393,1),s(3790))>>s(3915), (eq(393,1),s(3791))>>s(3916), (eq(393,1),s(3793))>>s(3917), (eq(393,1),s(3794))>>s(3918), (eq(393,1),s(3806))>>s(3919), (eq(393,1),s(3807))>>s(3920), (eq(393,1),s(3795))>>s(3921), (eq(393,1),s(3809))>>s(3922), (eq(393,1),s(3810))>>s(3923), (eq(393,1),s(3811))>>s(3924), (eq(393,1),s(3812))>>s(3925), (eq(393,1),s(3813))>>s(3926), (eq(393,1),s(3796))>>s(3927)]

#### Simplifying cost structure of CE 393 
 * Renamed intermediate variables: 
[ (it(254),s(3912))>>s(3928), (it(254),s(3909))>>s(3929), (it(254),s(3921))>>s(3930), (it(254),s(3919))>>s(3931), (it(254),s(3922))>>s(3932), (it(254),s(3923))>>s(3933), (it(254),s(3924))>>s(3934), (it(254),s(3925))>>s(3935), (it(254),s(3926))>>s(3936), (it(254),s(3918))>>s(3937), (it(254),s(3927))>>s(3938), (it(254),s(3916))>>s(3939), (it(254),s(3915))>>s(3940), (it(254),s(3917))>>s(3941), (it(254),s(3920))>>s(3942)]
 * Renamed intermediate variables: 
[ (eq(386,1),s(3639))>>s(3943), (eq(386,1),s(3634))>>s(3944), (eq(386,1),s(3637))>>s(3945), (eq(386,1),s(3638))>>s(3946), (eq(386,1),aux(351))>>s(3947), (eq(386,1),aux(352))>>s(3948), (eq(386,1),aux(353))>>s(3949), (eq(386,1),aux(354))>>s(3950), (eq(386,1),s(3628))>>s(3951), (eq(386,1),s(3629))>>s(3952), (eq(386,1),s(3641))>>s(3953), (eq(386,1),s(3642))>>s(3954), (eq(386,1),s(3630))>>s(3955), (eq(386,1),s(3644))>>s(3956), (eq(386,1),s(3645))>>s(3957), (eq(386,1),s(3646))>>s(3958), (eq(386,1),s(3647))>>s(3959), (eq(386,1),s(3648))>>s(3960), (eq(386,1),s(3631))>>s(3961)]

#### Simplifying cost structure of CE 386 
 * Joined equivalent variables [aux(401),s(3943)] into aux(401)
 * Renamed intermediate variables: 
[ (it(255),s(3948))>>s(3962), (it(255),s(3947))>>s(3963), (it(255),s(3944))>>s(3964), (it(255),aux(401))>>s(3965), (it(255),s(3953))>>s(3966), (it(255),s(3954))>>s(3967), (it(255),s(3955))>>s(3968), (it(255),s(3956))>>s(3969), (it(255),s(3957))>>s(3970), (it(255),s(3958))>>s(3971), (it(255),s(3959))>>s(3972), (it(255),s(3960))>>s(3973), (it(255),s(3952))>>s(3974), (it(255),s(3961))>>s(3975), (it(255),s(3951))>>s(3976)]
 * Renamed intermediate variables: 
[ (eq(375,1),s(2792))>>s(3977), (eq(375,1),s(2793))>>s(3978), (eq(375,1),s(2794))>>s(3979), (eq(375,1),s(2796))>>s(3980), (eq(375,1),s(2797))>>s(3981), (eq(375,1),s(2799))>>s(3982), (eq(375,1),s(2801))>>s(3983), (eq(375,1),s(2802))>>s(3984), (eq(375,1),s(2803))>>s(3985), (eq(375,1),s(2805))>>s(3986), (eq(375,1),s(2789))>>s(3987), (eq(375,1),aux(242))>>s(3988), (eq(375,1),aux(243))>>s(3989), (eq(375,1),aux(244))>>s(3990), (eq(375,1),aux(245))>>s(3991), (eq(375,1),aux(246))>>s(3992), (eq(375,1),s(2785))>>s(3993), (eq(375,1),s(2786))>>s(3994), (eq(375,1),s(2788))>>s(3995), (eq(375,1),s(2791))>>s(3996), (eq(375,1),s(2808))>>s(3997), (eq(375,1),s(2809))>>s(3998), (eq(375,1),s(2810))>>s(3999), (eq(375,1),s(2811))>>s(4000), (eq(375,1),s(2812))>>s(4001), (eq(375,1),s(2813))>>s(4002), (eq(375,1),s(2814))>>s(4003), (eq(375,1),s(2815))>>s(4004), (eq(375,1),s(2816))>>s(4005), (eq(375,1),s(2817))>>s(4006), (eq(375,1),s(2818))>>s(4007), (eq(375,1),s(2819))>>s(4008), (eq(375,1),s(2820))>>s(4009), (eq(375,1),s(2821))>>s(4010), (eq(375,1),s(2822))>>s(4011), (eq(375,1),s(2823))>>s(4012), (eq(375,1),s(2824))>>s(4013), (eq(375,1),s(2825))>>s(4014), (eq(375,1),s(2826))>>s(4015), (eq(375,1),s(2827))>>s(4016), (eq(375,1),s(2828))>>s(4017), (eq(375,1),s(2829))>>s(4018), (eq(375,1),s(2830))>>s(4019), (eq(375,1),s(2831))>>s(4020), (eq(375,1),s(2832))>>s(4021), (eq(375,1),s(2833))>>s(4022), (eq(375,1),s(2834))>>s(4023), (eq(375,1),s(2835))>>s(4024), (eq(375,1),s(2836))>>s(4025), (eq(375,1),s(2837))>>s(4026), (eq(375,1),s(2838))>>s(4027), (eq(375,1),s(2839))>>s(4028), (eq(375,1),s(2840))>>s(4029), (eq(375,1),s(2841))>>s(4030), (eq(375,1),s(2842))>>s(4031), (eq(375,1),s(2843))>>s(4032), (eq(375,1),s(2844))>>s(4033), (eq(375,1),s(2845))>>s(4034), (eq(375,1),s(2846))>>s(4035), (eq(375,1),s(2847))>>s(4036), (eq(375,1),s(2848))>>s(4037), (eq(375,1),s(2849))>>s(4038), (eq(375,1),s(2850))>>s(4039), (eq(375,1),s(2851))>>s(4040), (eq(375,1),s(2852))>>s(4041), (eq(375,1),s(2853))>>s(4042), (eq(375,1),s(2854))>>s(4043), (eq(375,1),s(2855))>>s(4044), (eq(375,1),s(2856))>>s(4045), (eq(375,1),s(2857))>>s(4046), (eq(375,1),s(2858))>>s(4047), (eq(375,1),s(2790))>>s(4048), (eq(375,1),s(2859))>>s(4049)]

#### Simplifying cost structure of CE 375 
 * Joined equivalent variables [s(3987),s(4048)] into s(3987)
 * Renamed intermediate variables: 
[ (eq(391,1),s(3750))>>s(4050), (eq(391,1),s(3753))>>s(4051), (eq(391,1),s(3754))>>s(4052), (eq(391,1),aux(373))>>s(4053), (eq(391,1),aux(374))>>s(4054), (eq(391,1),aux(375))>>s(4055), (eq(391,1),aux(376))>>s(4056), (eq(391,1),aux(377))>>s(4057), (eq(391,1),aux(378))>>s(4058), (eq(391,1),s(3741))>>s(4059), (eq(391,1),s(3742))>>s(4060), (eq(391,1),s(3744))>>s(4061), (eq(391,1),s(3745))>>s(4062), (eq(391,1),s(3757))>>s(4063), (eq(391,1),s(3758))>>s(4064), (eq(391,1),s(3747))>>s(4065), (eq(391,1),s(3760))>>s(4066), (eq(391,1),s(3761))>>s(4067), (eq(391,1),s(3762))>>s(4068), (eq(391,1),s(3763))>>s(4069), (eq(391,1),s(3764))>>s(4070), (eq(391,1),s(3746))>>s(4071)]

#### Simplifying cost structure of CE 391 
 * Joined equivalent variables [aux(402),s(4056)] into aux(402)
 * Joined equivalent variables [aux(403),aux(402),s(3991)] into aux(403)
 * Joined equivalent variables [aux(404),s(3988)] into aux(404)
 * Joined equivalent variables [s(3988),s(4001)] into s(3988)
 * Joined equivalent variables [s(4011),s(4039)] into s(4011)
 * Joined equivalent variables [s(3993),s(3995),s(4019),s(4027),s(4029),s(4030),s(4031),s(4032),s(4033),s(4034),s(4042),s(4043),s(4044),s(4045),s(4049),s(4059),s(4061),s(4064)] into s(3993)
 * Joined equivalent variables [s(4062),s(4071)] into s(4062)
 * Joined equivalent variables [s(4066),s(4067),s(4068),s(4069),s(4070)] into s(4066)
 * Joined equivalent variables [s(3994),s(3996),s(3997),s(3998),s(4003),s(4004)] into s(3994)
 * Joined equivalent variables [s(4023),s(4040),s(4041)] into s(4023)
 * Joined equivalent variables [s(4060),s(4063),s(4065)] into s(4060)
 * Joined equivalent variables [s(3987),s(4062)] into s(3987)
 * Renamed intermediate variables: 
[ (it(256),aux(403))>>s(4072), (it(256),aux(404))>>s(4073), (it(256),s(4053))>>s(4074), (it(256),s(3994))>>s(4075), (it(256),s(4011))>>s(4076), (it(256),s(4023))>>s(4077), (it(256),s(4038))>>s(4078), (it(256),s(3987))>>s(4079), (it(256),s(4060))>>s(4080), (it(256),s(4066))>>s(4081), (it(256),s(3993))>>s(4082)]
 * Renamed intermediate variables: 
[ (eq(373,1),s(2641))>>s(4083), (eq(373,1),s(2642))>>s(4084), (eq(373,1),s(2643))>>s(4085), (eq(373,1),s(2645))>>s(4086), (eq(373,1),s(2646))>>s(4087), (eq(373,1),s(2648))>>s(4088), (eq(373,1),s(2650))>>s(4089), (eq(373,1),s(2651))>>s(4090), (eq(373,1),s(2652))>>s(4091), (eq(373,1),s(2655))>>s(4092), (eq(373,1),s(2654))>>s(4093), (eq(373,1),aux(233))>>s(4094), (eq(373,1),aux(234))>>s(4095), (eq(373,1),aux(235))>>s(4096), (eq(373,1),aux(236))>>s(4097), (eq(373,1),s(2636))>>s(4098), (eq(373,1),s(2637))>>s(4099), (eq(373,1),s(2640))>>s(4100), (eq(373,1),s(2657))>>s(4101), (eq(373,1),s(2658))>>s(4102), (eq(373,1),s(2659))>>s(4103), (eq(373,1),s(2660))>>s(4104), (eq(373,1),s(2661))>>s(4105), (eq(373,1),s(2662))>>s(4106), (eq(373,1),s(2663))>>s(4107), (eq(373,1),s(2664))>>s(4108), (eq(373,1),s(2665))>>s(4109), (eq(373,1),s(2666))>>s(4110), (eq(373,1),s(2667))>>s(4111), (eq(373,1),s(2668))>>s(4112), (eq(373,1),s(2669))>>s(4113), (eq(373,1),s(2670))>>s(4114), (eq(373,1),s(2671))>>s(4115), (eq(373,1),s(2672))>>s(4116), (eq(373,1),s(2673))>>s(4117), (eq(373,1),s(2674))>>s(4118), (eq(373,1),s(2675))>>s(4119), (eq(373,1),s(2676))>>s(4120), (eq(373,1),s(2677))>>s(4121), (eq(373,1),s(2678))>>s(4122), (eq(373,1),s(2679))>>s(4123), (eq(373,1),s(2680))>>s(4124), (eq(373,1),s(2681))>>s(4125), (eq(373,1),s(2682))>>s(4126), (eq(373,1),s(2683))>>s(4127), (eq(373,1),s(2684))>>s(4128), (eq(373,1),s(2685))>>s(4129), (eq(373,1),s(2686))>>s(4130), (eq(373,1),s(2687))>>s(4131), (eq(373,1),s(2688))>>s(4132), (eq(373,1),s(2689))>>s(4133), (eq(373,1),s(2690))>>s(4134), (eq(373,1),s(2691))>>s(4135), (eq(373,1),s(2692))>>s(4136), (eq(373,1),s(2693))>>s(4137), (eq(373,1),s(2694))>>s(4138), (eq(373,1),s(2695))>>s(4139), (eq(373,1),s(2696))>>s(4140), (eq(373,1),s(2697))>>s(4141), (eq(373,1),s(2698))>>s(4142), (eq(373,1),s(2699))>>s(4143), (eq(373,1),s(2700))>>s(4144), (eq(373,1),s(2701))>>s(4145), (eq(373,1),s(2702))>>s(4146), (eq(373,1),s(2703))>>s(4147), (eq(373,1),s(2704))>>s(4148), (eq(373,1),s(2705))>>s(4149), (eq(373,1),s(2706))>>s(4150), (eq(373,1),s(2707))>>s(4151), (eq(373,1),s(2639))>>s(4152), (eq(373,1),s(2708))>>s(4153)]

#### Simplifying cost structure of CE 373 
 * Renamed intermediate variables: 
[ (eq(388,1),s(3679))>>s(4154), (eq(388,1),s(3681))>>s(4155), (eq(388,1),s(3685))>>s(4156), (eq(388,1),s(3683))>>s(4157), (eq(388,1),aux(359))>>s(4158), (eq(388,1),aux(360))>>s(4159), (eq(388,1),aux(361))>>s(4160), (eq(388,1),aux(362))>>s(4161), (eq(388,1),s(3672))>>s(4162), (eq(388,1),s(3673))>>s(4163), (eq(388,1),s(3686))>>s(4164), (eq(388,1),s(3687))>>s(4165), (eq(388,1),s(3676))>>s(4166), (eq(388,1),s(3689))>>s(4167), (eq(388,1),s(3690))>>s(4168), (eq(388,1),s(3691))>>s(4169), (eq(388,1),s(3692))>>s(4170), (eq(388,1),s(3693))>>s(4171), (eq(388,1),s(3675))>>s(4172)]

#### Simplifying cost structure of CE 388 
 * Joined equivalent variables [aux(405),s(4092),s(4155)] into aux(405)
 * Joined equivalent variables [aux(406),s(4097),s(4161)] into aux(406)
 * Joined equivalent variables [aux(407),s(4094)] into aux(407)
 * Joined equivalent variables [s(4094),s(4105),s(4106)] into s(4094)
 * Joined equivalent variables [s(4098),s(4153),s(4162)] into s(4098)
 * Joined equivalent variables [s(4099),s(4100),s(4101),s(4102),s(4107),s(4108)] into s(4099)
 * Joined equivalent variables [s(4167),s(4168),s(4171)] into s(4167)
 * Joined equivalent variables [s(4169),s(4170)] into s(4169)
 * Joined equivalent variables [s(4163),s(4166)] into s(4163)
 * Joined equivalent variables [s(4116),s(4119)] into s(4116)
 * Joined equivalent variables [s(4117),s(4120)] into s(4117)
 * Joined equivalent variables [s(4118),s(4121)] into s(4118)
 * Joined equivalent variables [s(4126),s(4130)] into s(4126)
 * Joined equivalent variables [s(4152),s(4172)] into s(4152)
 * Joined equivalent variables [s(4124),s(4128)] into s(4124)
 * Joined equivalent variables [s(4125),s(4129)] into s(4125)
 * Joined equivalent variables [s(4138),s(4149)] into s(4138)
 * Renamed intermediate variables: 
[ (it(257),s(4093))>>s(4173), (it(257),s(4156))>>s(4174), (it(257),s(4158))>>s(4175), (it(257),s(4157))>>s(4176), (it(257),aux(405))>>s(4177), (it(257),aux(406))>>s(4178), (it(257),aux(407))>>s(4179), (it(257),s(4099))>>s(4180), (it(257),s(4110))>>s(4181), (it(257),s(4111))>>s(4182), (it(257),s(4112))>>s(4183), (it(257),s(4113))>>s(4184), (it(257),s(4115))>>s(4185), (it(257),s(4116))>>s(4186), (it(257),s(4117))>>s(4187), (it(257),s(4118))>>s(4188), (it(257),s(4122))>>s(4189), (it(257),s(4123))>>s(4190), (it(257),s(4124))>>s(4191), (it(257),s(4125))>>s(4192), (it(257),s(4126))>>s(4193), (it(257),s(4127))>>s(4194), (it(257),s(4131))>>s(4195), (it(257),s(4134))>>s(4196), (it(257),s(4135))>>s(4197), (it(257),s(4136))>>s(4198), (it(257),s(4137))>>s(4199), (it(257),s(4138))>>s(4200), (it(257),s(4132))>>s(4201), (it(257),s(4133))>>s(4202), (it(257),s(4139))>>s(4203), (it(257),s(4140))>>s(4204), (it(257),s(4141))>>s(4205), (it(257),s(4142))>>s(4206), (it(257),s(4145))>>s(4207), (it(257),s(4146))>>s(4208), (it(257),s(4147))>>s(4209), (it(257),s(4143))>>s(4210), (it(257),s(4144))>>s(4211), (it(257),s(4148))>>s(4212), (it(257),s(4150))>>s(4213), (it(257),s(4151))>>s(4214), (it(257),s(4152))>>s(4215), (it(257),s(4164))>>s(4216), (it(257),s(4165))>>s(4217), (it(257),s(4163))>>s(4218), (it(257),s(4167))>>s(4219), (it(257),s(4169))>>s(4220), (it(257),s(4098))>>s(4221)]
 * Renamed intermediate variables: 
[ (eq(371,1),s(2507))>>s(4222), (eq(371,1),s(2491))>>s(4223), (eq(371,1),aux(224))>>s(4224), (eq(371,1),aux(225))>>s(4225), (eq(371,1),aux(227))>>s(4226), (eq(371,1),aux(228))>>s(4227), (eq(371,1),s(2490))>>s(4228), (eq(371,1),s(2493))>>s(4229), (eq(371,1),s(2516))>>s(4230), (eq(371,1),s(2519))>>s(4231), (eq(371,1),s(2520))>>s(4232), (eq(371,1),s(2522))>>s(4233), (eq(371,1),s(2528))>>s(4234), (eq(371,1),s(2530))>>s(4235), (eq(371,1),s(2531))>>s(4236), (eq(371,1),s(2539))>>s(4237), (eq(371,1),s(2555))>>s(4238), (eq(371,1),s(2556))>>s(4239), (eq(371,1),s(2558))>>s(4240), (eq(371,1),s(2492))>>s(4241), (eq(371,1),s(2561))>>s(4242)]

#### Simplifying cost structure of CE 371 
 * Joined equivalent variables [s(4223),s(4241)] into s(4223)
 * Renamed intermediate variables: 
[ (it(258),s(4224))>>s(4243), (it(258),s(4225))>>s(4244), (it(258),s(4226))>>s(4245), (it(258),s(4229))>>s(4246), (it(258),s(4230))>>s(4247), (it(258),s(4223))>>s(4248), (it(258),s(4228))>>s(4249), (it(258),s(4238))>>s(4250), (it(258),s(4239))>>s(4251), (it(258),s(4240))>>s(4252), (it(258),s(4242))>>s(4253)]
 * Renamed intermediate variables: 
[ (eq(369,1),s(2361))>>s(4254), (eq(369,1),s(2360))>>s(4255), (eq(369,1),aux(215))>>s(4256), (eq(369,1),aux(216))>>s(4257), (eq(369,1),aux(218))>>s(4258), (eq(369,1),s(2346))>>s(4259), (eq(369,1),s(2369))>>s(4260), (eq(369,1),s(2372))>>s(4261), (eq(369,1),s(2373))>>s(4262), (eq(369,1),s(2375))>>s(4263), (eq(369,1),s(2381))>>s(4264), (eq(369,1),s(2383))>>s(4265), (eq(369,1),s(2384))>>s(4266), (eq(369,1),s(2392))>>s(4267), (eq(369,1),s(2408))>>s(4268), (eq(369,1),s(2409))>>s(4269), (eq(369,1),s(2411))>>s(4270), (eq(369,1),s(2345))>>s(4271), (eq(369,1),s(2414))>>s(4272)]

#### Simplifying cost structure of CE 369 
 * Renamed intermediate variables: 
[ (it(259),s(4256))>>s(4273), (it(259),s(4257))>>s(4274), (it(259),s(4254))>>s(4275), (it(259),s(4258))>>s(4276), (it(259),s(4255))>>s(4277), (it(259),s(4259))>>s(4278), (it(259),s(4260))>>s(4279), (it(259),s(4261))>>s(4280), (it(259),s(4262))>>s(4281), (it(259),s(4263))>>s(4282), (it(259),s(4264))>>s(4283), (it(259),s(4265))>>s(4284), (it(259),s(4266))>>s(4285), (it(259),s(4267))>>s(4286), (it(259),s(4268))>>s(4287), (it(259),s(4269))>>s(4288), (it(259),s(4270))>>s(4289), (it(259),s(4271))>>s(4290), (it(259),s(4272))>>s(4291)]
 * Renamed intermediate variables: 
[ (eq(392,1),s(3776))>>s(4292), (eq(392,1),s(3779))>>s(4293), (eq(392,1),s(3781))>>s(4294), (eq(392,1),aux(379))>>s(4295), (eq(392,1),aux(380))>>s(4296), (eq(392,1),aux(381))>>s(4297), (eq(392,1),aux(382))>>s(4298), (eq(392,1),aux(383))>>s(4299), (eq(392,1),aux(384))>>s(4300), (eq(392,1),s(3766))>>s(4301), (eq(392,1),s(3767))>>s(4302), (eq(392,1),s(3769))>>s(4303), (eq(392,1),s(3770))>>s(4304), (eq(392,1),s(3771))>>s(4305), (eq(392,1),s(3783))>>s(4306), (eq(392,1),s(3784))>>s(4307), (eq(392,1),s(3785))>>s(4308), (eq(392,1),s(3786))>>s(4309), (eq(392,1),s(3787))>>s(4310), (eq(392,1),s(3788))>>s(4311), (eq(392,1),s(3772))>>s(4312)]

#### Simplifying cost structure of CE 392 
 * Renamed intermediate variables: 
[ (it(260),s(4298))>>s(4313), (it(260),s(4295))>>s(4314), (it(260),s(4305))>>s(4315), (it(260),s(4306))>>s(4316), (it(260),s(4307))>>s(4317), (it(260),s(4308))>>s(4318), (it(260),s(4309))>>s(4319), (it(260),s(4310))>>s(4320), (it(260),s(4304))>>s(4321), (it(260),s(4312))>>s(4322), (it(260),s(4302))>>s(4323), (it(260),s(4301))>>s(4324), (it(260),s(4303))>>s(4325), (it(260),s(4311))>>s(4326)]
 * Renamed intermediate variables: 
[ (eq(385,1),s(3612))>>s(4327), (eq(385,1),s(3613))>>s(4328), (eq(385,1),s(3616))>>s(4329), (eq(385,1),s(3618))>>s(4330), (eq(385,1),aux(347))>>s(4331), (eq(385,1),aux(348))>>s(4332), (eq(385,1),aux(349))>>s(4333), (eq(385,1),aux(350))>>s(4334), (eq(385,1),s(3606))>>s(4335), (eq(385,1),s(3607))>>s(4336), (eq(385,1),s(3608))>>s(4337), (eq(385,1),s(3620))>>s(4338), (eq(385,1),s(3621))>>s(4339), (eq(385,1),s(3622))>>s(4340), (eq(385,1),s(3623))>>s(4341), (eq(385,1),s(3624))>>s(4342), (eq(385,1),s(3625))>>s(4343), (eq(385,1),s(3609))>>s(4344)]

#### Simplifying cost structure of CE 385 
 * Renamed intermediate variables: 
[ (it(261),s(4332))>>s(4345), (it(261),s(4331))>>s(4346), (it(261),s(4327))>>s(4347), (it(261),s(4328))>>s(4348), (it(261),s(4337))>>s(4349), (it(261),s(4338))>>s(4350), (it(261),s(4339))>>s(4351), (it(261),s(4340))>>s(4352), (it(261),s(4341))>>s(4353), (it(261),s(4342))>>s(4354), (it(261),s(4343))>>s(4355), (it(261),s(4336))>>s(4356), (it(261),s(4344))>>s(4357), (it(261),s(4335))>>s(4358)]
 * Renamed intermediate variables: 
[ (eq(374,1),s(2717))>>s(4359), (eq(374,1),s(2718))>>s(4360), (eq(374,1),s(2719))>>s(4361), (eq(374,1),s(2721))>>s(4362), (eq(374,1),s(2722))>>s(4363), (eq(374,1),s(2724))>>s(4364), (eq(374,1),s(2726))>>s(4365), (eq(374,1),s(2727))>>s(4366), (eq(374,1),s(2728))>>s(4367), (eq(374,1),s(2730))>>s(4368), (eq(374,1),s(2714))>>s(4369), (eq(374,1),aux(237))>>s(4370), (eq(374,1),aux(238))>>s(4371), (eq(374,1),aux(239))>>s(4372), (eq(374,1),aux(240))>>s(4373), (eq(374,1),aux(241))>>s(4374), (eq(374,1),s(2710))>>s(4375), (eq(374,1),s(2711))>>s(4376), (eq(374,1),s(2713))>>s(4377), (eq(374,1),s(2716))>>s(4378), (eq(374,1),s(2733))>>s(4379), (eq(374,1),s(2734))>>s(4380), (eq(374,1),s(2735))>>s(4381), (eq(374,1),s(2736))>>s(4382), (eq(374,1),s(2737))>>s(4383), (eq(374,1),s(2738))>>s(4384), (eq(374,1),s(2739))>>s(4385), (eq(374,1),s(2740))>>s(4386), (eq(374,1),s(2741))>>s(4387), (eq(374,1),s(2742))>>s(4388), (eq(374,1),s(2743))>>s(4389), (eq(374,1),s(2744))>>s(4390), (eq(374,1),s(2745))>>s(4391), (eq(374,1),s(2746))>>s(4392), (eq(374,1),s(2747))>>s(4393), (eq(374,1),s(2748))>>s(4394), (eq(374,1),s(2749))>>s(4395), (eq(374,1),s(2750))>>s(4396), (eq(374,1),s(2751))>>s(4397), (eq(374,1),s(2752))>>s(4398), (eq(374,1),s(2753))>>s(4399), (eq(374,1),s(2754))>>s(4400), (eq(374,1),s(2755))>>s(4401), (eq(374,1),s(2756))>>s(4402), (eq(374,1),s(2757))>>s(4403), (eq(374,1),s(2758))>>s(4404), (eq(374,1),s(2759))>>s(4405), (eq(374,1),s(2760))>>s(4406), (eq(374,1),s(2761))>>s(4407), (eq(374,1),s(2762))>>s(4408), (eq(374,1),s(2763))>>s(4409), (eq(374,1),s(2764))>>s(4410), (eq(374,1),s(2765))>>s(4411), (eq(374,1),s(2766))>>s(4412), (eq(374,1),s(2767))>>s(4413), (eq(374,1),s(2768))>>s(4414), (eq(374,1),s(2769))>>s(4415), (eq(374,1),s(2770))>>s(4416), (eq(374,1),s(2771))>>s(4417), (eq(374,1),s(2772))>>s(4418), (eq(374,1),s(2773))>>s(4419), (eq(374,1),s(2774))>>s(4420), (eq(374,1),s(2775))>>s(4421), (eq(374,1),s(2776))>>s(4422), (eq(374,1),s(2777))>>s(4423), (eq(374,1),s(2778))>>s(4424), (eq(374,1),s(2779))>>s(4425), (eq(374,1),s(2780))>>s(4426), (eq(374,1),s(2781))>>s(4427), (eq(374,1),s(2782))>>s(4428), (eq(374,1),s(2783))>>s(4429), (eq(374,1),s(2715))>>s(4430)]

#### Simplifying cost structure of CE 374 
 * Joined equivalent variables [s(4369),s(4430)] into s(4369)
 * Renamed intermediate variables: 
[ (eq(390,1),s(3727))>>s(4431), (eq(390,1),s(3730))>>s(4432), (eq(390,1),s(3732))>>s(4433), (eq(390,1),aux(367))>>s(4434), (eq(390,1),aux(368))>>s(4435), (eq(390,1),aux(369))>>s(4436), (eq(390,1),aux(370))>>s(4437), (eq(390,1),aux(371))>>s(4438), (eq(390,1),aux(372))>>s(4439), (eq(390,1),s(3717))>>s(4440), (eq(390,1),s(3718))>>s(4441), (eq(390,1),s(3720))>>s(4442), (eq(390,1),s(3721))>>s(4443), (eq(390,1),s(3723))>>s(4444), (eq(390,1),s(3734))>>s(4445), (eq(390,1),s(3735))>>s(4446), (eq(390,1),s(3736))>>s(4447), (eq(390,1),s(3737))>>s(4448), (eq(390,1),s(3738))>>s(4449), (eq(390,1),s(3739))>>s(4450), (eq(390,1),s(3722))>>s(4451)]

#### Simplifying cost structure of CE 390 
 * Joined equivalent variables [aux(408),s(4437)] into aux(408)
 * Joined equivalent variables [aux(409),aux(408),s(4373)] into aux(409)
 * Joined equivalent variables [s(4370),s(4383)] into s(4370)
 * Joined equivalent variables [s(4393),s(4421)] into s(4393)
 * Joined equivalent variables [s(4375),s(4377),s(4401),s(4409),s(4411),s(4412),s(4413),s(4414),s(4415),s(4416),s(4424),s(4425),s(4426),s(4427),s(4440),s(4442),s(4450)] into s(4375)
 * Joined equivalent variables [s(4443),s(4451)] into s(4443)
 * Joined equivalent variables [s(4445),s(4446),s(4447),s(4448),s(4449)] into s(4445)
 * Joined equivalent variables [s(4376),s(4378),s(4379),s(4380),s(4385),s(4386)] into s(4376)
 * Joined equivalent variables [s(4405),s(4422),s(4423)] into s(4405)
 * Joined equivalent variables [s(4441),s(4444)] into s(4441)
 * Joined equivalent variables [s(4369),s(4443)] into s(4369)
 * Renamed intermediate variables: 
[ (it(262),s(4434))>>s(4452), (it(262),s(4370))>>s(4453), (it(262),aux(409))>>s(4454), (it(262),s(4376))>>s(4455), (it(262),s(4393))>>s(4456), (it(262),s(4405))>>s(4457), (it(262),s(4420))>>s(4458), (it(262),s(4369))>>s(4459), (it(262),s(4441))>>s(4460), (it(262),s(4445))>>s(4461), (it(262),s(4375))>>s(4462)]
 * Renamed intermediate variables: 
[ (eq(372,1),s(2568))>>s(4463), (eq(372,1),s(2569))>>s(4464), (eq(372,1),s(2570))>>s(4465), (eq(372,1),s(2572))>>s(4466), (eq(372,1),s(2573))>>s(4467), (eq(372,1),s(2575))>>s(4468), (eq(372,1),s(2577))>>s(4469), (eq(372,1),s(2578))>>s(4470), (eq(372,1),s(2579))>>s(4471), (eq(372,1),s(2582))>>s(4472), (eq(372,1),s(2581))>>s(4473), (eq(372,1),aux(229))>>s(4474), (eq(372,1),aux(230))>>s(4475), (eq(372,1),aux(231))>>s(4476), (eq(372,1),aux(232))>>s(4477), (eq(372,1),s(2563))>>s(4478), (eq(372,1),s(2564))>>s(4479), (eq(372,1),s(2567))>>s(4480), (eq(372,1),s(2584))>>s(4481), (eq(372,1),s(2585))>>s(4482), (eq(372,1),s(2586))>>s(4483), (eq(372,1),s(2587))>>s(4484), (eq(372,1),s(2588))>>s(4485), (eq(372,1),s(2589))>>s(4486), (eq(372,1),s(2590))>>s(4487), (eq(372,1),s(2591))>>s(4488), (eq(372,1),s(2592))>>s(4489), (eq(372,1),s(2593))>>s(4490), (eq(372,1),s(2594))>>s(4491), (eq(372,1),s(2595))>>s(4492), (eq(372,1),s(2596))>>s(4493), (eq(372,1),s(2597))>>s(4494), (eq(372,1),s(2598))>>s(4495), (eq(372,1),s(2599))>>s(4496), (eq(372,1),s(2600))>>s(4497), (eq(372,1),s(2601))>>s(4498), (eq(372,1),s(2602))>>s(4499), (eq(372,1),s(2603))>>s(4500), (eq(372,1),s(2604))>>s(4501), (eq(372,1),s(2605))>>s(4502), (eq(372,1),s(2606))>>s(4503), (eq(372,1),s(2607))>>s(4504), (eq(372,1),s(2608))>>s(4505), (eq(372,1),s(2609))>>s(4506), (eq(372,1),s(2610))>>s(4507), (eq(372,1),s(2611))>>s(4508), (eq(372,1),s(2612))>>s(4509), (eq(372,1),s(2613))>>s(4510), (eq(372,1),s(2614))>>s(4511), (eq(372,1),s(2615))>>s(4512), (eq(372,1),s(2616))>>s(4513), (eq(372,1),s(2617))>>s(4514), (eq(372,1),s(2618))>>s(4515), (eq(372,1),s(2619))>>s(4516), (eq(372,1),s(2620))>>s(4517), (eq(372,1),s(2621))>>s(4518), (eq(372,1),s(2622))>>s(4519), (eq(372,1),s(2623))>>s(4520), (eq(372,1),s(2624))>>s(4521), (eq(372,1),s(2625))>>s(4522), (eq(372,1),s(2626))>>s(4523), (eq(372,1),s(2627))>>s(4524), (eq(372,1),s(2628))>>s(4525), (eq(372,1),s(2629))>>s(4526), (eq(372,1),s(2630))>>s(4527), (eq(372,1),s(2631))>>s(4528), (eq(372,1),s(2632))>>s(4529), (eq(372,1),s(2633))>>s(4530), (eq(372,1),s(2634))>>s(4531), (eq(372,1),s(2566))>>s(4532)]

#### Simplifying cost structure of CE 372 
 * Renamed intermediate variables: 
[ (eq(387,1),s(3658))>>s(4533), (eq(387,1),s(3660))>>s(4534), (eq(387,1),s(3662))>>s(4535), (eq(387,1),s(3663))>>s(4536), (eq(387,1),aux(355))>>s(4537), (eq(387,1),aux(356))>>s(4538), (eq(387,1),aux(357))>>s(4539), (eq(387,1),aux(358))>>s(4540), (eq(387,1),s(3650))>>s(4541), (eq(387,1),s(3651))>>s(4542), (eq(387,1),s(3654))>>s(4543), (eq(387,1),s(3665))>>s(4544), (eq(387,1),s(3666))>>s(4545), (eq(387,1),s(3667))>>s(4546), (eq(387,1),s(3668))>>s(4547), (eq(387,1),s(3669))>>s(4548), (eq(387,1),s(3670))>>s(4549), (eq(387,1),s(3653))>>s(4550)]

#### Simplifying cost structure of CE 387 
 * Joined equivalent variables [aux(410),s(4540)] into aux(410)
 * Joined equivalent variables [aux(411),s(4472),s(4534)] into aux(411)
 * Joined equivalent variables [aux(412),aux(410),s(4477)] into aux(412)
 * Joined equivalent variables [s(4474),s(4485),s(4486)] into s(4474)
 * Joined equivalent variables [s(4478),s(4541)] into s(4478)
 * Joined equivalent variables [s(4544),s(4545),s(4548)] into s(4544)
 * Joined equivalent variables [s(4546),s(4547)] into s(4546)
 * Joined equivalent variables [s(4479),s(4480),s(4481),s(4482),s(4487),s(4488)] into s(4479)
 * Joined equivalent variables [s(4542),s(4543)] into s(4542)
 * Joined equivalent variables [s(4496),s(4499)] into s(4496)
 * Joined equivalent variables [s(4497),s(4500)] into s(4497)
 * Joined equivalent variables [s(4498),s(4501)] into s(4498)
 * Joined equivalent variables [s(4506),s(4510)] into s(4506)
 * Joined equivalent variables [s(4532),s(4550)] into s(4532)
 * Joined equivalent variables [s(4504),s(4508)] into s(4504)
 * Joined equivalent variables [s(4505),s(4509)] into s(4505)
 * Joined equivalent variables [s(4518),s(4529)] into s(4518)
 * Renamed intermediate variables: 
[ (it(263),s(4473))>>s(4551), (it(263),s(4535))>>s(4552), (it(263),s(4536))>>s(4553), (it(263),s(4537))>>s(4554), (it(263),s(4474))>>s(4555), (it(263),aux(411))>>s(4556), (it(263),aux(412))>>s(4557), (it(263),s(4479))>>s(4558), (it(263),s(4490))>>s(4559), (it(263),s(4491))>>s(4560), (it(263),s(4492))>>s(4561), (it(263),s(4493))>>s(4562), (it(263),s(4495))>>s(4563), (it(263),s(4496))>>s(4564), (it(263),s(4497))>>s(4565), (it(263),s(4498))>>s(4566), (it(263),s(4502))>>s(4567), (it(263),s(4503))>>s(4568), (it(263),s(4504))>>s(4569), (it(263),s(4505))>>s(4570), (it(263),s(4506))>>s(4571), (it(263),s(4507))>>s(4572), (it(263),s(4511))>>s(4573), (it(263),s(4514))>>s(4574), (it(263),s(4515))>>s(4575), (it(263),s(4516))>>s(4576), (it(263),s(4517))>>s(4577), (it(263),s(4518))>>s(4578), (it(263),s(4512))>>s(4579), (it(263),s(4513))>>s(4580), (it(263),s(4519))>>s(4581), (it(263),s(4520))>>s(4582), (it(263),s(4521))>>s(4583), (it(263),s(4522))>>s(4584), (it(263),s(4525))>>s(4585), (it(263),s(4526))>>s(4586), (it(263),s(4527))>>s(4587), (it(263),s(4523))>>s(4588), (it(263),s(4524))>>s(4589), (it(263),s(4528))>>s(4590), (it(263),s(4530))>>s(4591), (it(263),s(4531))>>s(4592), (it(263),s(4532))>>s(4593), (it(263),s(4542))>>s(4594), (it(263),s(4544))>>s(4595), (it(263),s(4546))>>s(4596), (it(263),s(4549))>>s(4597), (it(263),s(4478))>>s(4598)]
 * Renamed intermediate variables: 
[ (eq(389,1),s(3703))>>s(4599), (eq(389,1),s(3705))>>s(4600), (eq(389,1),s(3707))>>s(4601), (eq(389,1),s(3708))>>s(4602), (eq(389,1),aux(363))>>s(4603), (eq(389,1),aux(364))>>s(4604), (eq(389,1),aux(365))>>s(4605), (eq(389,1),aux(366))>>s(4606), (eq(389,1),s(3695))>>s(4607), (eq(389,1),s(3696))>>s(4608), (eq(389,1),s(3698))>>s(4609), (eq(389,1),s(3710))>>s(4610), (eq(389,1),s(3711))>>s(4611), (eq(389,1),s(3712))>>s(4612), (eq(389,1),s(3713))>>s(4613), (eq(389,1),s(3714))>>s(4614), (eq(389,1),s(3715))>>s(4615), (eq(389,1),s(3699))>>s(4616)]

#### Simplifying cost structure of CE 389 
 * Renamed intermediate variables: 
[ (it(264),s(4600))>>s(4617), (it(264),s(4606))>>s(4618), (it(264),s(4601))>>s(4619), (it(264),s(4602))>>s(4620), (it(264),s(4603))>>s(4621), (it(264),s(4609))>>s(4622), (it(264),s(4610))>>s(4623), (it(264),s(4611))>>s(4624), (it(264),s(4612))>>s(4625), (it(264),s(4613))>>s(4626), (it(264),s(4614))>>s(4627), (it(264),s(4615))>>s(4628), (it(264),s(4616))>>s(4629), (it(264),s(4608))>>s(4630), (it(264),s(4607))>>s(4631)]
 * Renamed intermediate variables: 
[ (eq(383,1),s(3568))>>s(4632), (eq(383,1),s(3569))>>s(4633), (eq(383,1),s(3571))>>s(4634), (eq(383,1),s(3573))>>s(4635), (eq(383,1),s(3574))>>s(4636), (eq(383,1),aux(341))>>s(4637), (eq(383,1),aux(342))>>s(4638), (eq(383,1),s(3564))>>s(4639), (eq(383,1),s(3576))>>s(4640), (eq(383,1),s(3577))>>s(4641), (eq(383,1),s(3578))>>s(4642), (eq(383,1),s(3579))>>s(4643), (eq(383,1),s(3580))>>s(4644), (eq(383,1),s(3581))>>s(4645), (eq(383,1),s(3565))>>s(4646)]

#### Simplifying cost structure of CE 383 
 * Renamed intermediate variables: 
[ (it(265),s(4634))>>s(4647), (it(265),s(4638))>>s(4648), (it(265),s(4637))>>s(4649), (it(265),s(4635))>>s(4650), (it(265),s(4632))>>s(4651), (it(265),s(4636))>>s(4652), (it(265),s(4633))>>s(4653), (it(265),s(4639))>>s(4654), (it(265),s(4640))>>s(4655), (it(265),s(4641))>>s(4656), (it(265),s(4642))>>s(4657), (it(265),s(4643))>>s(4658), (it(265),s(4644))>>s(4659), (it(265),s(4645))>>s(4660), (it(265),s(4646))>>s(4661)]
 * Renamed intermediate variables: 
[ (eq(370,1),s(2427))>>s(4662), (eq(370,1),s(2429))>>s(4663), (eq(370,1),s(2430))>>s(4664), (eq(370,1),s(2434))>>s(4665), (eq(370,1),s(2418))>>s(4666), (eq(370,1),aux(220))>>s(4667), (eq(370,1),aux(221))>>s(4668), (eq(370,1),aux(222))>>s(4669), (eq(370,1),s(2417))>>s(4670), (eq(370,1),s(2420))>>s(4671), (eq(370,1),s(2443))>>s(4672), (eq(370,1),s(2444))>>s(4673), (eq(370,1),s(2446))>>s(4674), (eq(370,1),s(2447))>>s(4675), (eq(370,1),s(2449))>>s(4676), (eq(370,1),s(2455))>>s(4677), (eq(370,1),s(2457))>>s(4678), (eq(370,1),s(2458))>>s(4679), (eq(370,1),s(2466))>>s(4680), (eq(370,1),s(2482))>>s(4681), (eq(370,1),s(2483))>>s(4682), (eq(370,1),s(2485))>>s(4683), (eq(370,1),s(2419))>>s(4684)]

#### Simplifying cost structure of CE 370 
 * Joined equivalent variables [s(4666),s(4684)] into s(4666)
 * Renamed intermediate variables: 
[ (eq(384,1),s(3590))>>s(4685), (eq(384,1),s(3591))>>s(4686), (eq(384,1),s(3594))>>s(4687), (eq(384,1),s(3596))>>s(4688), (eq(384,1),aux(343))>>s(4689), (eq(384,1),aux(344))>>s(4690), (eq(384,1),aux(345))>>s(4691), (eq(384,1),aux(346))>>s(4692), (eq(384,1),s(3584))>>s(4693), (eq(384,1),s(3585))>>s(4694), (eq(384,1),s(3587))>>s(4695), (eq(384,1),s(3598))>>s(4696), (eq(384,1),s(3599))>>s(4697), (eq(384,1),s(3600))>>s(4698), (eq(384,1),s(3601))>>s(4699), (eq(384,1),s(3602))>>s(4700), (eq(384,1),s(3603))>>s(4701), (eq(384,1),s(3586))>>s(4702)]

#### Simplifying cost structure of CE 384 
 * Joined equivalent variables [aux(413),s(4690)] into aux(413)
 * Joined equivalent variables [aux(414),aux(413),s(4668)] into aux(414)
 * Joined equivalent variables [aux(415),s(4667)] into aux(415)
 * Joined equivalent variables [aux(416),s(4664)] into aux(416)
 * Joined equivalent variables [s(4670),s(4681),s(4682),s(4683),s(4693)] into s(4670)
 * Joined equivalent variables [s(4694),s(4702)] into s(4694)
 * Joined equivalent variables [s(4697),s(4698)] into s(4697)
 * Joined equivalent variables [s(4695),s(4701)] into s(4695)
 * Joined equivalent variables [s(4666),s(4694)] into s(4666)
 * Renamed intermediate variables: 
[ (it(266),s(4685))>>s(4703), (it(266),s(4686))>>s(4704), (it(266),s(4662))>>s(4705), (it(266),s(4663))>>s(4706), (it(266),aux(414))>>s(4707), (it(266),aux(415))>>s(4708), (it(266),aux(416))>>s(4709), (it(266),s(4689))>>s(4710), (it(266),s(4671))>>s(4711), (it(266),s(4672))>>s(4712), (it(266),s(4673))>>s(4713), (it(266),s(4666))>>s(4714), (it(266),s(4695))>>s(4715), (it(266),s(4696))>>s(4716), (it(266),s(4697))>>s(4717), (it(266),s(4699))>>s(4718), (it(266),s(4700))>>s(4719), (it(266),s(4670))>>s(4720)]
 * Renamed intermediate variables: 
[ (eq(368,1),s(2282))>>s(4721), (eq(368,1),s(2284))>>s(4722), (eq(368,1),s(2285))>>s(4723), (eq(368,1),s(2290))>>s(4724), (eq(368,1),s(2289))>>s(4725), (eq(368,1),aux(212))>>s(4726), (eq(368,1),aux(213))>>s(4727), (eq(368,1),s(2275))>>s(4728), (eq(368,1),s(2298))>>s(4729), (eq(368,1),s(2299))>>s(4730), (eq(368,1),s(2301))>>s(4731), (eq(368,1),s(2302))>>s(4732), (eq(368,1),s(2304))>>s(4733), (eq(368,1),s(2310))>>s(4734), (eq(368,1),s(2312))>>s(4735), (eq(368,1),s(2313))>>s(4736), (eq(368,1),s(2321))>>s(4737), (eq(368,1),s(2337))>>s(4738), (eq(368,1),s(2338))>>s(4739), (eq(368,1),s(2340))>>s(4740), (eq(368,1),s(2274))>>s(4741)]

#### Simplifying cost structure of CE 368 
 * Renamed intermediate variables: 
[ (eq(382,1),s(3548))>>s(4742), (eq(382,1),s(3549))>>s(4743), (eq(382,1),s(3551))>>s(4744), (eq(382,1),s(3553))>>s(4745), (eq(382,1),s(3554))>>s(4746), (eq(382,1),aux(339))>>s(4747), (eq(382,1),aux(340))>>s(4748), (eq(382,1),s(3545))>>s(4749), (eq(382,1),s(3556))>>s(4750), (eq(382,1),s(3557))>>s(4751), (eq(382,1),s(3558))>>s(4752), (eq(382,1),s(3559))>>s(4753), (eq(382,1),s(3560))>>s(4754), (eq(382,1),s(3561))>>s(4755), (eq(382,1),s(3544))>>s(4756)]

#### Simplifying cost structure of CE 382 
 * Joined equivalent variables [aux(417),s(4748)] into aux(417)
 * Joined equivalent variables [aux(418),s(4746)] into aux(418)
 * Joined equivalent variables [aux(419),s(4726)] into aux(419)
 * Joined equivalent variables [aux(420),s(4723)] into aux(420)
 * Joined equivalent variables [aux(421),s(4724),s(4744)] into aux(421)
 * Joined equivalent variables [aux(422),aux(417),s(4727)] into aux(422)
 * Joined equivalent variables [s(4741),s(4756)] into s(4741)
 * Renamed intermediate variables: 
[ (it(267),s(4721))>>s(4757), (it(267),s(4722))>>s(4758), (it(267),s(4743))>>s(4759), (it(267),s(4725))>>s(4760), (it(267),s(4745))>>s(4761), (it(267),aux(418))>>s(4762), (it(267),aux(419))>>s(4763), (it(267),aux(420))>>s(4764), (it(267),aux(421))>>s(4765), (it(267),aux(422))>>s(4766), (it(267),s(4747))>>s(4767), (it(267),s(4742))>>s(4768), (it(267),s(4728))>>s(4769), (it(267),s(4729))>>s(4770), (it(267),s(4730))>>s(4771), (it(267),s(4731))>>s(4772), (it(267),s(4732))>>s(4773), (it(267),s(4733))>>s(4774), (it(267),s(4734))>>s(4775), (it(267),s(4735))>>s(4776), (it(267),s(4736))>>s(4777), (it(267),s(4737))>>s(4778), (it(267),s(4738))>>s(4779), (it(267),s(4739))>>s(4780), (it(267),s(4740))>>s(4781), (it(267),s(4741))>>s(4782), (it(267),s(4749))>>s(4783), (it(267),s(4750))>>s(4784), (it(267),s(4751))>>s(4785), (it(267),s(4752))>>s(4786), (it(267),s(4753))>>s(4787), (it(267),s(4754))>>s(4788), (it(267),s(4755))>>s(4789)]

#### Cost of loops [254,255,256,257,258,259,260,261,262,263,264,265,266,267] 

 * loop 254:evaluate(A,B,C,D,E,F,G,H) -> [evaluate(A',B',C',D',E',F',G',H'),evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)] 
6*s(3940)+10*s(3939)+6*s(3941)+10*s(3937)+10*s(3931)+58*s(3942)+12*s(3930)+15*s(3932)+24*s(3933)+15*s(3934)+12*s(3935)+15*s(3936)+6*s(3938)+73
  Such that:s(3928) =< A-A'-D'2+1
s(3928) =< -D+A'+D'2+1
s(3929) =< -D+A'+D'2+2
s(3930) =< s(3928)
s(3931) =< s(3928)
s(3932) =< s(3929)
s(3933) =< s(3929)
s(3934) =< s(3929)
s(3935) =< s(3929)
s(3936) =< s(3929)
s(3932) =< s(3928)
s(3933) =< s(3928)
s(3934) =< s(3928)
s(3935) =< s(3928)
s(3936) =< s(3928)
s(3937) =< s(3928)
s(3938) =< s(3929)
s(3939) =< s(3929)

Unbounded itvars
s(3940) :  it(254),s(3915)
s(3941) :  it(254),s(3917)
s(3942) :  it(254),s(3920)

 * loop 255:evaluate(A,B,C,D,E,F,G,H) -> [evaluate(A',B',C',D',E',F',G',H'),evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)] 
6*s(3976)+10*s(3974)+10*s(3966)+58*s(3967)+12*s(3968)+15*s(3969)+24*s(3970)+15*s(3971)+12*s(3972)+15*s(3973)+16*s(3975)+73
  Such that:s(3962) =< A-A'-D'2+1
s(3963) =< -D+A'+D'2+2
s(3964) =< -D/3+A'/3+D'2/3+2/3
s(3965) =< -D/2+A'/2+D'2/2+1
s(3962) =< s(3965)
s(3966) =< s(3965)
s(3967) =< s(3963)
s(3968) =< s(3962)
s(3966) =< s(3962)
s(3969) =< s(3963)
s(3970) =< s(3963)
s(3971) =< s(3963)
s(3972) =< s(3963)
s(3973) =< s(3963)
s(3969) =< s(3962)
s(3970) =< s(3962)
s(3971) =< s(3962)
s(3972) =< s(3962)
s(3973) =< s(3962)
s(3970) =< s(3965)
s(3971) =< s(3965)
s(3973) =< s(3965)
s(3969) =< s(3964)
s(3973) =< s(3964)
s(3974) =< s(3962)
s(3975) =< s(3963)

Unbounded itvars
s(3976) :  it(255),s(3951)

 * loop 256:evaluate(A,B,C,D,E,F,G,H) -> [evaluate(A',B',C',D',E',F',G',H'),evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)] 
32*s(4079)+208*s(4082)+76*s(4075)+33*s(4077)+11*s(4078)+32*s(4080)+81*s(4081)+71
  Such that:s(4072) =< A-A'-D'2+1
s(4073) =< -D+A'+D'2+2
s(4074) =< s(4073)
s(4075) =< s(4073)
s(4076) =< s(4075)*s(4072)
s(4077) =< s(4076)
s(4078) =< s(4076)
s(4078) =< s(4076)+s(4073)
s(4079) =< s(4072)
s(4074) =< s(4072)
s(4080) =< s(4074)
s(4081) =< s(4074)
s(4081) =< s(4072)

Unbounded itvars
s(4082) :  it(256),s(3993)

 * loop 257:evaluate(A,B,C,D,E,F,G,H) -> [evaluate(A',B',C',D',E',F',G',H'),evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)] 
18*s(4221)+76*s(4180)+11*s(4190)+11*s(4194)+11*s(4195)+11*s(4202)+11*s(4196)+10*s(4197)+10*s(4198)+9*s(4199)+18*s(4200)+11*s(4206)+11*s(4211)+11*s(4207)+10*s(4208)+10*s(4209)+9*s(4212)+32*s(4215)+22*s(4218)+10*s(4216)+58*s(4217)+54*s(4219)+27*s(4220)+71
  Such that:s(4173) =< 2*A-2*A'-2*D'2+1
s(4174) =< A/2-A'/2-D'2/2
s(4175) =< A/2-A'/2-D'2/2+1
s(4176) =< A/2-A'/2-D'2/2+1/2
s(4177) =< A-A'-D'2
s(4178) =< A-A'-D'2+1
s(4179) =< -D+A'+D'2+2
s(4175) =< s(4179)
s(4180) =< s(4179)
s(4181) =< s(4177)*2+2
s(4182) =< s(4177)+2
s(4183) =< s(4177)+1
s(4184) =< s(4177)
s(4173) =< s(4177)*2+1
s(4185) =< s(4180)*s(4178)
s(4181) =< s(4173)+1
s(4186) =< s(4180)*s(4184)
s(4187) =< s(4180)*s(4183)
s(4188) =< s(4180)*s(4182)
s(4189) =< s(4180)*s(4173)
s(4190) =< s(4186)* (1/3)
s(4191) =< s(4187)* (1/2)
s(4192) =< s(4186)* (1/2)
s(4193) =< s(4180)*s(4181)
s(4194) =< s(4186)* (1/3)
s(4195) =< s(4187)
s(4190) =< s(4193)
s(4196) =< s(4193)
s(4195) =< s(4193)
s(4197) =< s(4193)
s(4198) =< s(4193)
s(4195) =< s(4186)
s(4199) =< s(4186)
s(4198) =< s(4186)
s(4200) =< s(4186)
s(4201) =< s(4187)
s(4202) =< s(4187)
s(4190) =< s(4187)
s(4196) =< s(4187)
s(4190) =< s(4188)
s(4195) =< s(4188)
s(4197) =< s(4188)
s(4197) =< s(4187)
s(4201) =< s(4186)
s(4202) =< s(4186)
s(4190) =< s(4186)
s(4196) =< s(4186)
s(4202) =< s(4191)
s(4190) =< s(4191)
s(4195) =< s(4191)
s(4202) =< s(4192)
s(4190) =< s(4192)
s(4195) =< s(4192)
s(4203) =< s(4184)+2
s(4204) =< s(4202)*s(4184)
s(4199) =< s(4190)*s(4183)
s(4195) =< s(4201)+s(4179)
s(4205) =< s(4196)*s(4203)
s(4195) =< s(4205)+s(4204)+s(4186)
s(4199) =< s(4205)+s(4204)+s(4186)
s(4206) =< s(4187)
s(4194) =< s(4193)
s(4207) =< s(4193)
s(4206) =< s(4193)
s(4208) =< s(4193)
s(4209) =< s(4193)
s(4194) =< s(4189)
s(4207) =< s(4189)
s(4206) =< s(4189)
s(4208) =< s(4189)
s(4209) =< s(4189)
s(4210) =< s(4185)
s(4211) =< s(4185)
s(4194) =< s(4185)
s(4207) =< s(4185)
s(4206) =< s(4185)
s(4206) =< s(4186)
s(4212) =< s(4186)
s(4209) =< s(4186)
s(4210) =< s(4187)
s(4211) =< s(4187)
s(4194) =< s(4187)
s(4207) =< s(4187)
s(4194) =< s(4188)
s(4206) =< s(4188)
s(4208) =< s(4188)
s(4194) =< s(4186)
s(4208) =< s(4186)
s(4210) =< s(4186)
s(4211) =< s(4186)
s(4207) =< s(4186)
s(4211) =< s(4191)
s(4194) =< s(4191)
s(4206) =< s(4191)
s(4211) =< s(4192)
s(4194) =< s(4192)
s(4206) =< s(4192)
s(4213) =< s(4211)*s(4177)
s(4212) =< s(4194)*s(4183)
s(4206) =< s(4210)+s(4179)
s(4214) =< s(4207)*s(4182)
s(4206) =< s(4214)+s(4213)+s(4186)
s(4212) =< s(4214)+s(4213)+s(4186)
s(4215) =< s(4178)
s(4216) =< s(4174)
s(4217) =< s(4177)
s(4218) =< s(4175)
s(4216) =< s(4175)
s(4219) =< s(4175)
s(4220) =< s(4175)
s(4219) =< s(4178)
s(4220) =< s(4178)
s(4219) =< s(4177)
s(4220) =< s(4177)
s(4219) =< s(4176)
s(4219) =< s(4174)

Unbounded itvars
s(4221) :  it(257),s(4098)

 * loop 258:evaluate(A,B,C,D,E,F,G,H) -> [evaluate(A',B',C',D',E',F',G',H'),evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)] 
16*s(4248)+6*s(4249)+41*s(4246)+9*s(4247)+10*s(4250)+10*s(4251)+9*s(4252)+6*s(4253)+71
  Such that:s(4243) =< -D+A'+D'2+2
s(4244) =< -D/2+A'/2+D'2/2+1
s(4245) =< A'2-D'2+1
s(4246) =< s(4243)
s(4247) =< s(4243)
s(4247) =< s(4244)
s(4248) =< s(4245)

Unbounded itvars
s(4249) :  it(258),s(4228)
s(4250) :  it(258),s(4238)
s(4251) :  it(258),s(4239)
s(4252) :  it(258),s(4240)
s(4253) :  it(258),s(4242)

 * loop 259:evaluate(A,B,C,D,E,F,G,H) -> [evaluate(A',B',C',D',E',F',G',H'),evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)] 
41*s(4278)+9*s(4279)+10*s(4287)+10*s(4288)+9*s(4289)+16*s(4290)+6*s(4291)+71
  Such that:s(4273) =< -D+A'+D'2+2
s(4274) =< -D/2+A'/2+D'2/2+1
s(4275) =< A'2-D'2
s(4276) =< A'2-D'2+1
s(4277) =< 2*A'2-2*D'2+1
s(4278) =< s(4273)
s(4279) =< s(4273)
s(4279) =< s(4274)
s(4280) =< s(4275)*2+2
s(4281) =< s(4275)+2
s(4282) =< s(4275)
s(4277) =< s(4275)*2+1
s(4280) =< s(4277)+1
s(4283) =< s(4279)*s(4282)
s(4284) =< s(4279)*s(4281)
s(4285) =< s(4279)*s(4277)
s(4286) =< s(4279)*s(4280)
s(4287) =< s(4286)
s(4288) =< s(4286)
s(4287) =< s(4285)
s(4288) =< s(4285)
s(4288) =< s(4283)
s(4289) =< s(4283)
s(4287) =< s(4284)
s(4287) =< s(4283)
s(4290) =< s(4276)

Unbounded itvars
s(4291) :  it(259),s(4272)

 * loop 260:evaluate(A,B,C,D,E,F,G,H) -> [evaluate(A',B',C',D',E',F',G',H'),evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)] 
6*s(4324)+10*s(4323)+6*s(4325)+10*s(4321)+22*s(4315)+15*s(4316)+24*s(4317)+15*s(4318)+12*s(4319)+15*s(4320)+52*s(4326)+6*s(4322)+73
  Such that:s(4313) =< A-A'-D'2+1
s(4313) =< -D+A'+D'2+1
s(4314) =< -D+A'+D'2+2
s(4315) =< s(4313)
s(4316) =< s(4314)
s(4317) =< s(4314)
s(4318) =< s(4314)
s(4319) =< s(4314)
s(4320) =< s(4314)
s(4316) =< s(4313)
s(4317) =< s(4313)
s(4318) =< s(4313)
s(4319) =< s(4313)
s(4320) =< s(4313)
s(4321) =< s(4313)
s(4322) =< s(4314)
s(4323) =< s(4314)

Unbounded itvars
s(4324) :  it(260),s(4301)
s(4325) :  it(260),s(4303)
s(4326) :  it(260),s(4311)

 * loop 261:evaluate(A,B,C,D,E,F,G,H) -> [evaluate(A',B',C',D',E',F',G',H'),evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)] 
6*s(4358)+10*s(4356)+22*s(4349)+15*s(4350)+24*s(4351)+15*s(4352)+12*s(4353)+15*s(4354)+52*s(4355)+16*s(4357)+73
  Such that:s(4345) =< A-A'-D'2+1
s(4345) =< -D+A'+D'2+1
s(4346) =< -D+A'+D'2+2
s(4347) =< -D/2+A'/2+D'2/2+1
s(4348) =< -D/3+A'/3+D'2/3+2/3
s(4349) =< s(4345)
s(4350) =< s(4346)
s(4351) =< s(4346)
s(4352) =< s(4346)
s(4353) =< s(4346)
s(4354) =< s(4346)
s(4350) =< s(4345)
s(4351) =< s(4345)
s(4352) =< s(4345)
s(4353) =< s(4345)
s(4354) =< s(4345)
s(4355) =< s(4346)
s(4351) =< s(4347)
s(4352) =< s(4347)
s(4354) =< s(4347)
s(4350) =< s(4348)
s(4354) =< s(4348)
s(4356) =< s(4345)
s(4357) =< s(4346)

Unbounded itvars
s(4358) :  it(261),s(4335)

 * loop 262:evaluate(A,B,C,D,E,F,G,H) -> [evaluate(A',B',C',D',E',F',G',H'),evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)] 
32*s(4459)+196*s(4462)+76*s(4455)+33*s(4457)+11*s(4458)+32*s(4460)+81*s(4461)+71
  Such that:s(4452) =< -D+A'+D'2+2
s(4453) =< A'-D'+1
s(4454) =< A-A'-D'2+1
s(4455) =< s(4453)
s(4456) =< s(4455)*s(4454)
s(4457) =< s(4456)
s(4458) =< s(4456)
s(4458) =< s(4456)+s(4453)
s(4459) =< s(4454)
s(4452) =< s(4454)
s(4460) =< s(4452)
s(4461) =< s(4452)
s(4461) =< s(4454)

Unbounded itvars
s(4462) :  it(262),s(4375)

 * loop 263:evaluate(A,B,C,D,E,F,G,H) -> [evaluate(A',B',C',D',E',F',G',H'),evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)] 
12*s(4598)+76*s(4558)+11*s(4568)+11*s(4572)+11*s(4573)+11*s(4580)+11*s(4574)+10*s(4575)+10*s(4576)+9*s(4577)+18*s(4578)+11*s(4584)+11*s(4589)+11*s(4585)+10*s(4586)+10*s(4587)+9*s(4590)+32*s(4593)+32*s(4594)+54*s(4595)+27*s(4596)+52*s(4597)+71
  Such that:s(4551) =< 2*A-2*A'-2*D'2+1
s(4552) =< A/2-A'/2-D'2/2
s(4553) =< A/2-A'/2-D'2/2+1/2
s(4554) =< -D+A'+D'2+2
s(4555) =< A'-D'+1
s(4556) =< A-A'-D'2
s(4557) =< A-A'-D'2+1
s(4558) =< s(4555)
s(4559) =< s(4556)*2+2
s(4560) =< s(4556)+2
s(4561) =< s(4556)+1
s(4562) =< s(4556)
s(4551) =< s(4556)*2+1
s(4563) =< s(4558)*s(4557)
s(4559) =< s(4551)+1
s(4564) =< s(4558)*s(4562)
s(4565) =< s(4558)*s(4561)
s(4566) =< s(4558)*s(4560)
s(4567) =< s(4558)*s(4551)
s(4568) =< s(4564)* (1/3)
s(4569) =< s(4565)* (1/2)
s(4570) =< s(4564)* (1/2)
s(4571) =< s(4558)*s(4559)
s(4572) =< s(4564)* (1/3)
s(4573) =< s(4565)
s(4568) =< s(4571)
s(4574) =< s(4571)
s(4573) =< s(4571)
s(4575) =< s(4571)
s(4576) =< s(4571)
s(4573) =< s(4564)
s(4577) =< s(4564)
s(4576) =< s(4564)
s(4578) =< s(4564)
s(4579) =< s(4565)
s(4580) =< s(4565)
s(4568) =< s(4565)
s(4574) =< s(4565)
s(4568) =< s(4566)
s(4573) =< s(4566)
s(4575) =< s(4566)
s(4575) =< s(4565)
s(4579) =< s(4564)
s(4580) =< s(4564)
s(4568) =< s(4564)
s(4574) =< s(4564)
s(4580) =< s(4569)
s(4568) =< s(4569)
s(4573) =< s(4569)
s(4580) =< s(4570)
s(4568) =< s(4570)
s(4573) =< s(4570)
s(4581) =< s(4562)+2
s(4582) =< s(4580)*s(4562)
s(4577) =< s(4568)*s(4561)
s(4573) =< s(4579)+s(4555)
s(4583) =< s(4574)*s(4581)
s(4573) =< s(4583)+s(4582)+s(4564)
s(4577) =< s(4583)+s(4582)+s(4564)
s(4584) =< s(4565)
s(4572) =< s(4571)
s(4585) =< s(4571)
s(4584) =< s(4571)
s(4586) =< s(4571)
s(4587) =< s(4571)
s(4572) =< s(4567)
s(4585) =< s(4567)
s(4584) =< s(4567)
s(4586) =< s(4567)
s(4587) =< s(4567)
s(4588) =< s(4563)
s(4589) =< s(4563)
s(4572) =< s(4563)
s(4585) =< s(4563)
s(4584) =< s(4563)
s(4584) =< s(4564)
s(4590) =< s(4564)
s(4587) =< s(4564)
s(4588) =< s(4565)
s(4589) =< s(4565)
s(4572) =< s(4565)
s(4585) =< s(4565)
s(4572) =< s(4566)
s(4584) =< s(4566)
s(4586) =< s(4566)
s(4572) =< s(4564)
s(4586) =< s(4564)
s(4588) =< s(4564)
s(4589) =< s(4564)
s(4585) =< s(4564)
s(4589) =< s(4569)
s(4572) =< s(4569)
s(4584) =< s(4569)
s(4589) =< s(4570)
s(4572) =< s(4570)
s(4584) =< s(4570)
s(4591) =< s(4589)*s(4556)
s(4590) =< s(4572)*s(4561)
s(4584) =< s(4588)+s(4555)
s(4592) =< s(4585)*s(4560)
s(4584) =< s(4592)+s(4591)+s(4564)
s(4590) =< s(4592)+s(4591)+s(4564)
s(4593) =< s(4557)
s(4554) =< s(4557)
s(4594) =< s(4554)
s(4595) =< s(4554)
s(4596) =< s(4554)
s(4595) =< s(4557)
s(4596) =< s(4557)
s(4595) =< s(4556)
s(4596) =< s(4556)
s(4597) =< s(4556)
s(4595) =< s(4553)
s(4595) =< s(4552)

Unbounded itvars
s(4598) :  it(263),s(4478)

 * loop 264:evaluate(A,B,C,D,E,F,G,H) -> [evaluate(A',B',C',D',E',F',G',H'),evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)] 
6*s(4631)+10*s(4630)+32*s(4622)+15*s(4623)+24*s(4624)+15*s(4625)+12*s(4626)+15*s(4627)+52*s(4628)+6*s(4629)+73
  Such that:s(4617) =< A-A'-D'2
s(4618) =< A-A'-D'2+1
s(4619) =< A/2-A'/2-D'2/2
s(4620) =< A/2-A'/2-D'2/2+1/2
s(4617) =< -D+A'+D'2
s(4618) =< -D+A'+D'2+1
s(4621) =< -D+A'+D'2+2
s(4619) =< -D/2+A'/2+D'2/2
s(4620) =< -D/2+A'/2+D'2/2+1/2
s(4622) =< s(4618)
s(4623) =< s(4621)
s(4624) =< s(4621)
s(4625) =< s(4621)
s(4626) =< s(4621)
s(4627) =< s(4621)
s(4623) =< s(4618)
s(4624) =< s(4618)
s(4625) =< s(4618)
s(4626) =< s(4618)
s(4627) =< s(4618)
s(4624) =< s(4617)
s(4625) =< s(4617)
s(4626) =< s(4617)
s(4627) =< s(4617)
s(4628) =< s(4617)
s(4623) =< s(4617)
s(4623) =< s(4620)
s(4624) =< s(4620)
s(4627) =< s(4620)
s(4623) =< s(4619)
s(4624) =< s(4619)
s(4627) =< s(4619)
s(4629) =< s(4621)
s(4630) =< s(4621)

Unbounded itvars
s(4631) :  it(264),s(4607)

 * loop 265:evaluate(A,B,C,D,E,F,G,H) -> [evaluate(A',B',C',D',E',F',G',H'),evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)] 
32*s(4654)+15*s(4655)+24*s(4656)+15*s(4657)+12*s(4658)+15*s(4659)+52*s(4660)+16*s(4661)+73
  Such that:s(4647) =< -D+A'+D'2
s(4648) =< -D+A'+D'2+1
s(4649) =< -D+A'+D'2+2
s(4650) =< -D/2+A'/2+D'2/2
s(4651) =< -D/2+A'/2+D'2/2+1
s(4652) =< -D/2+A'/2+D'2/2+1/2
s(4653) =< -D/3+A'/3+D'2/3+2/3
s(4647) =< A'2-D'2
s(4648) =< A'2-D'2+1
s(4650) =< A'2/2-D'2/2
s(4652) =< A'2/2-D'2/2+1/2
s(4654) =< s(4648)
s(4655) =< s(4649)
s(4656) =< s(4649)
s(4657) =< s(4649)
s(4658) =< s(4649)
s(4659) =< s(4649)
s(4655) =< s(4648)
s(4656) =< s(4648)
s(4657) =< s(4648)
s(4658) =< s(4648)
s(4659) =< s(4648)
s(4660) =< s(4649)
s(4656) =< s(4651)
s(4657) =< s(4651)
s(4659) =< s(4651)
s(4655) =< s(4653)
s(4659) =< s(4653)
s(4656) =< s(4647)
s(4657) =< s(4647)
s(4658) =< s(4647)
s(4659) =< s(4647)
s(4660) =< s(4647)
s(4655) =< s(4647)
s(4655) =< s(4652)
s(4656) =< s(4652)
s(4659) =< s(4652)
s(4655) =< s(4650)
s(4656) =< s(4650)
s(4659) =< s(4650)
s(4661) =< s(4649)

 * loop 266:evaluate(A,B,C,D,E,F,G,H) -> [evaluate(A',B',C',D',E',F',G',H'),evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)] 
32*s(4714)+41*s(4720)+32*s(4711)+9*s(4712)+9*s(4713)+84*s(4715)+15*s(4716)+39*s(4717)+12*s(4718)+15*s(4719)+71
  Such that:s(4703) =< A/2-A'/2-D'2/2+1/2
s(4704) =< A/3-A'/3-D'2/3+1/3
s(4705) =< -D+A'+D'2+1
s(4706) =< -D/2+A'/2+D'2/2+1/2
s(4704) =< -D/3+A'/3+D'2/3+2/3
s(4707) =< A-A'-D'2+1
s(4708) =< -D+A'+D'2+2
s(4709) =< -D/2+A'/2+D'2/2+1
s(4710) =< s(4708)
s(4703) =< s(4709)
s(4711) =< s(4708)
s(4712) =< s(4708)
s(4713) =< s(4708)
s(4713) =< s(4705)
s(4712) =< s(4705)
s(4712) =< s(4709)
s(4712) =< s(4706)
s(4714) =< s(4707)
s(4710) =< s(4707)
s(4715) =< s(4710)
s(4716) =< s(4710)
s(4717) =< s(4710)
s(4718) =< s(4710)
s(4719) =< s(4710)
s(4717) =< s(4703)
s(4719) =< s(4703)
s(4716) =< s(4704)
s(4719) =< s(4704)
s(4716) =< s(4707)
s(4717) =< s(4707)
s(4718) =< s(4707)
s(4719) =< s(4707)

Unbounded itvars
s(4720) :  it(266),s(4670)

 * loop 267:evaluate(A,B,C,D,E,F,G,H) -> [evaluate(A',B',C',D',E',F',G',H'),evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)] 
32*s(4769)+9*s(4770)+9*s(4771)+10*s(4779)+10*s(4780)+9*s(4781)+32*s(4782)+32*s(4783)+15*s(4784)+24*s(4785)+15*s(4786)+12*s(4787)+15*s(4788)+52*s(4789)+71
  Such that:s(4757) =< -D+A'+D'2+1
s(4758) =< -D/2+A'/2+D'2/2+1/2
s(4759) =< -D/3+A'/3+D'2/3+2/3
s(4760) =< 2*A'2-2*D'2+1
s(4761) =< A'2/2-D'2/2
s(4762) =< A'2/2-D'2/2+1/2
s(4759) =< A'2/3-D'2/3+1/3
s(4763) =< -D+A'+D'2+2
s(4764) =< -D/2+A'/2+D'2/2+1
s(4765) =< A'2-D'2
s(4766) =< A'2-D'2+1
s(4767) =< s(4763)
s(4768) =< s(4764)
s(4769) =< s(4763)
s(4770) =< s(4763)
s(4771) =< s(4763)
s(4771) =< s(4757)
s(4770) =< s(4757)
s(4770) =< s(4764)
s(4770) =< s(4758)
s(4772) =< s(4765)*2+2
s(4773) =< s(4765)+2
s(4774) =< s(4765)
s(4760) =< s(4765)*2+1
s(4772) =< s(4760)+1
s(4775) =< s(4770)*s(4774)
s(4776) =< s(4770)*s(4773)
s(4777) =< s(4770)*s(4760)
s(4778) =< s(4770)*s(4772)
s(4779) =< s(4778)
s(4780) =< s(4778)
s(4779) =< s(4777)
s(4780) =< s(4777)
s(4780) =< s(4775)
s(4781) =< s(4775)
s(4779) =< s(4776)
s(4779) =< s(4775)
s(4782) =< s(4766)
s(4767) =< s(4766)
s(4768) =< s(4762)
s(4783) =< s(4767)
s(4784) =< s(4767)
s(4785) =< s(4767)
s(4786) =< s(4767)
s(4787) =< s(4767)
s(4788) =< s(4767)
s(4789) =< s(4767)
s(4785) =< s(4768)
s(4786) =< s(4768)
s(4788) =< s(4768)
s(4784) =< s(4759)
s(4788) =< s(4759)
s(4784) =< s(4766)
s(4785) =< s(4766)
s(4786) =< s(4766)
s(4787) =< s(4766)
s(4788) =< s(4766)
s(4785) =< s(4765)
s(4786) =< s(4765)
s(4787) =< s(4765)
s(4788) =< s(4765)
s(4789) =< s(4765)
s(4784) =< s(4765)
s(4784) =< s(4762)
s(4785) =< s(4762)
s(4788) =< s(4762)
s(4784) =< s(4761)
s(4785) =< s(4761)
s(4788) =< s(4761)

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4177)=<A-D,s(4275)=<A-D,s(4556)=<A-D,s(4765)=<A-D,s(4072)=<A-D+1,s(4178)=<A-D+1,s(4454)=<A-D+1,s(4557)=<A-D+1,s(4173)=<2*A-2*D+1,s(4277)=<2*A-2*D+1,s(4551)=<2*A-2*D+1,s(4760)=<2*A-2*D+1]
* Psum in Loop 254: [it(254)=<1,s(4804)=<A-A'-D'2+1,s(4804)=< -D+A'+D'2+1,s(4803)=< -D+A'+D'2+2]
* Psum in Loop 255: [it(255)=<1,s(4817)=<A-A'-D'2+1,s(4816)=< -D+A'+D'2+2,s(4819)=< -D/2+A'/2+D'2/2+1,s(4818)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 256: [it(256)=<1,s(4827)=<A-A'-D'2+1,s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for s(4177)=<A-D  
   - Applying max/min strategy 
     - Loop 254 does not increase the expression
     - Loop 255 does not increase the expression
     - Loop 256 does not increase the expression
     - Loop 257 does not increase the expression
     - Loop 258 does not increase the expression
     - Loop 259 does not increase the expression
     - Loop 260 does not increase the expression
     - Loop 261 does not increase the expression
     - Loop 262 does not increase the expression
     - Loop 263 does not increase the expression
     - Loop 264 does not increase the expression
     - Loop 265 does not increase the expression
     - Loop 266 does not increase the expression
     - Loop 267 does not increase the expression
 * Adding constraints:[s(4177)=<aux(423),aux(423)=<A-D] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4275)=<A-D,s(4556)=<A-D,s(4765)=<A-D,s(4072)=<A-D+1,s(4178)=<A-D+1,s(4454)=<A-D+1,s(4557)=<A-D+1,s(4173)=<2*A-2*D+1,s(4277)=<2*A-2*D+1,s(4551)=<2*A-2*D+1,s(4760)=<2*A-2*D+1]
* Psum in Loop 254: [it(254)=<1,s(4804)=<A-A'-D'2+1,s(4804)=< -D+A'+D'2+1,s(4803)=< -D+A'+D'2+2]
* Psum in Loop 255: [it(255)=<1,s(4817)=<A-A'-D'2+1,s(4816)=< -D+A'+D'2+2,s(4819)=< -D/2+A'/2+D'2/2+1,s(4818)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 256: [it(256)=<1,s(4827)=<A-A'-D'2+1,s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for s(4275)=<A-D  
   - Found a solution using cacheing 
 * Adding constraints:[s(4275)=<s(4177)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4556)=<A-D,s(4765)=<A-D,s(4072)=<A-D+1,s(4178)=<A-D+1,s(4454)=<A-D+1,s(4557)=<A-D+1,s(4173)=<2*A-2*D+1,s(4277)=<2*A-2*D+1,s(4551)=<2*A-2*D+1,s(4760)=<2*A-2*D+1]
* Psum in Loop 254: [it(254)=<1,s(4804)=<A-A'-D'2+1,s(4804)=< -D+A'+D'2+1,s(4803)=< -D+A'+D'2+2]
* Psum in Loop 255: [it(255)=<1,s(4817)=<A-A'-D'2+1,s(4816)=< -D+A'+D'2+2,s(4819)=< -D/2+A'/2+D'2/2+1,s(4818)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 256: [it(256)=<1,s(4827)=<A-A'-D'2+1,s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for s(4556)=<A-D  
   - Found a solution using cacheing 
 * Adding constraints:[s(4556)=<s(4177)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4765)=<A-D,s(4072)=<A-D+1,s(4178)=<A-D+1,s(4454)=<A-D+1,s(4557)=<A-D+1,s(4173)=<2*A-2*D+1,s(4277)=<2*A-2*D+1,s(4551)=<2*A-2*D+1,s(4760)=<2*A-2*D+1]
* Psum in Loop 254: [it(254)=<1,s(4804)=<A-A'-D'2+1,s(4804)=< -D+A'+D'2+1,s(4803)=< -D+A'+D'2+2]
* Psum in Loop 255: [it(255)=<1,s(4817)=<A-A'-D'2+1,s(4816)=< -D+A'+D'2+2,s(4819)=< -D/2+A'/2+D'2/2+1,s(4818)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 256: [it(256)=<1,s(4827)=<A-A'-D'2+1,s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for s(4765)=<A-D  
   - Found a solution using cacheing 
 * Adding constraints:[s(4765)=<s(4177)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4072)=<A-D+1,s(4178)=<A-D+1,s(4454)=<A-D+1,s(4557)=<A-D+1,s(4173)=<2*A-2*D+1,s(4277)=<2*A-2*D+1,s(4551)=<2*A-2*D+1,s(4760)=<2*A-2*D+1]
* Psum in Loop 254: [it(254)=<1,s(4804)=<A-A'-D'2+1,s(4804)=< -D+A'+D'2+1,s(4803)=< -D+A'+D'2+2]
* Psum in Loop 255: [it(255)=<1,s(4817)=<A-A'-D'2+1,s(4816)=< -D+A'+D'2+2,s(4819)=< -D/2+A'/2+D'2/2+1,s(4818)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 256: [it(256)=<1,s(4827)=<A-A'-D'2+1,s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for s(4072)=<A-D+1  
   - Found a solution using cacheing 
 * Adding constraints:[s(4072)=<s(4177)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4178)=<A-D+1,s(4454)=<A-D+1,s(4557)=<A-D+1,s(4173)=<2*A-2*D+1,s(4277)=<2*A-2*D+1,s(4551)=<2*A-2*D+1,s(4760)=<2*A-2*D+1]
* Psum in Loop 254: [it(254)=<1,s(4804)=<A-A'-D'2+1,s(4804)=< -D+A'+D'2+1,s(4803)=< -D+A'+D'2+2]
* Psum in Loop 255: [it(255)=<1,s(4817)=<A-A'-D'2+1,s(4816)=< -D+A'+D'2+2,s(4819)=< -D/2+A'/2+D'2/2+1,s(4818)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 256: [it(256)=<1,s(4827)=<A-A'-D'2+1,s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for s(4178)=<A-D+1  
   - Found a solution using cacheing 
 * Adding constraints:[s(4178)=<s(4177)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4454)=<A-D+1,s(4557)=<A-D+1,s(4173)=<2*A-2*D+1,s(4277)=<2*A-2*D+1,s(4551)=<2*A-2*D+1,s(4760)=<2*A-2*D+1]
* Psum in Loop 254: [it(254)=<1,s(4804)=<A-A'-D'2+1,s(4804)=< -D+A'+D'2+1,s(4803)=< -D+A'+D'2+2]
* Psum in Loop 255: [it(255)=<1,s(4817)=<A-A'-D'2+1,s(4816)=< -D+A'+D'2+2,s(4819)=< -D/2+A'/2+D'2/2+1,s(4818)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 256: [it(256)=<1,s(4827)=<A-A'-D'2+1,s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for s(4454)=<A-D+1  
   - Found a solution using cacheing 
 * Adding constraints:[s(4454)=<s(4177)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4557)=<A-D+1,s(4173)=<2*A-2*D+1,s(4277)=<2*A-2*D+1,s(4551)=<2*A-2*D+1,s(4760)=<2*A-2*D+1]
* Psum in Loop 254: [it(254)=<1,s(4804)=<A-A'-D'2+1,s(4804)=< -D+A'+D'2+1,s(4803)=< -D+A'+D'2+2]
* Psum in Loop 255: [it(255)=<1,s(4817)=<A-A'-D'2+1,s(4816)=< -D+A'+D'2+2,s(4819)=< -D/2+A'/2+D'2/2+1,s(4818)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 256: [it(256)=<1,s(4827)=<A-A'-D'2+1,s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for s(4557)=<A-D+1  
   - Found a solution using cacheing 
 * Adding constraints:[s(4557)=<s(4177)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4173)=<2*A-2*D+1,s(4277)=<2*A-2*D+1,s(4551)=<2*A-2*D+1,s(4760)=<2*A-2*D+1]
* Psum in Loop 254: [it(254)=<1,s(4804)=<A-A'-D'2+1,s(4804)=< -D+A'+D'2+1,s(4803)=< -D+A'+D'2+2]
* Psum in Loop 255: [it(255)=<1,s(4817)=<A-A'-D'2+1,s(4816)=< -D+A'+D'2+2,s(4819)=< -D/2+A'/2+D'2/2+1,s(4818)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 256: [it(256)=<1,s(4827)=<A-A'-D'2+1,s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for s(4173)=<2*A-2*D+1  
   - Found a solution using cacheing 
 * Adding constraints:[s(4173)=<s(4177)*2+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4277)=<2*A-2*D+1,s(4551)=<2*A-2*D+1,s(4760)=<2*A-2*D+1]
* Psum in Loop 254: [it(254)=<1,s(4804)=<A-A'-D'2+1,s(4804)=< -D+A'+D'2+1,s(4803)=< -D+A'+D'2+2]
* Psum in Loop 255: [it(255)=<1,s(4817)=<A-A'-D'2+1,s(4816)=< -D+A'+D'2+2,s(4819)=< -D/2+A'/2+D'2/2+1,s(4818)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 256: [it(256)=<1,s(4827)=<A-A'-D'2+1,s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for s(4277)=<2*A-2*D+1  
   - Found a solution using cacheing 
 * Adding constraints:[s(4277)=<s(4177)*2+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4551)=<2*A-2*D+1,s(4760)=<2*A-2*D+1]
* Psum in Loop 254: [it(254)=<1,s(4804)=<A-A'-D'2+1,s(4804)=< -D+A'+D'2+1,s(4803)=< -D+A'+D'2+2]
* Psum in Loop 255: [it(255)=<1,s(4817)=<A-A'-D'2+1,s(4816)=< -D+A'+D'2+2,s(4819)=< -D/2+A'/2+D'2/2+1,s(4818)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 256: [it(256)=<1,s(4827)=<A-A'-D'2+1,s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for s(4551)=<2*A-2*D+1  
   - Found a solution using cacheing 
 * Adding constraints:[s(4551)=<s(4177)*2+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4760)=<2*A-2*D+1]
* Psum in Loop 254: [it(254)=<1,s(4804)=<A-A'-D'2+1,s(4804)=< -D+A'+D'2+1,s(4803)=< -D+A'+D'2+2]
* Psum in Loop 255: [it(255)=<1,s(4817)=<A-A'-D'2+1,s(4816)=< -D+A'+D'2+2,s(4819)=< -D/2+A'/2+D'2/2+1,s(4818)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 256: [it(256)=<1,s(4827)=<A-A'-D'2+1,s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for s(4760)=<2*A-2*D+1  
   - Found a solution using cacheing 
 * Adding constraints:[s(4760)=<s(4177)*2+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 254: [it(254)=<1,s(4804)=<A-A'-D'2+1,s(4804)=< -D+A'+D'2+1,s(4803)=< -D+A'+D'2+2]
* Psum in Loop 255: [it(255)=<1,s(4817)=<A-A'-D'2+1,s(4816)=< -D+A'+D'2+2,s(4819)=< -D/2+A'/2+D'2/2+1,s(4818)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 256: [it(256)=<1,s(4827)=<A-A'-D'2+1,s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for it(254)=<1  in Loop 254 
   - Applying inductive sum strategy 
     - head Candidate: -2*A+4*C-1 
       - Loop 255 is collaborative and bounds [it(255)] 
       - Loop 256 is collaborative
       - Loop 257 is collaborative
       - Loop 258 is collaborative
       - Loop 259 is collaborative
       - Loop 260 is collaborative and bounds [it(260)] 
       - Loop 261 is collaborative and bounds [it(261)] 
       - Loop 262 is collaborative
       - Loop 263 is collaborative
       - Loop 264 is collaborative and bounds [it(264)] 
       - Loop 265 is collaborative and bounds [it(265)] 
       - Loop 266 is collaborative
       - Loop 267 is collaborative
       - Chain [272] is ignored
       - Chain-Tail [271] is collaborative and bounds [it([271])] 
     - head Candidate: -2*A+4*B-1 
       - Loop 255 is collaborative and bounds [it(255)] 
       - Loop 256 is collaborative
       - Loop 257 is collaborative
       - Loop 258 is collaborative
       - Loop 259 is collaborative
       - Loop 260 is collaborative and bounds [it(260)] 
       - Loop 261 is collaborative and bounds [it(261)] 
       - Loop 262 is collaborative
       - Loop 263 is collaborative
       - Loop 264 is collaborative and bounds [it(264)] 
       - Loop 265 is collaborative and bounds [it(265)] 
       - Loop 266 is collaborative
       - Loop 267 is collaborative
       - Chain [272] is ignored
       - Chain-Tail [271] is collaborative and bounds [it([271])] 
     - tail Candidate: -2*A+4*C-1 
       - Loop 255 is collaborative and bounds [it(255)] 
       - Loop 256 is collaborative and bounds [it(256)] 
       - Loop 257 is collaborative and bounds [it(257)] 
       - Loop 258 is collaborative and bounds [it(258)] 
       - Loop 259 is collaborative and bounds [it(259)] 
       - Loop 260 is collaborative and bounds [it(260)] 
       - Loop 261 is collaborative and bounds [it(261)] 
       - Loop 262 is collaborative and bounds [it(262)] 
       - Loop 263 is collaborative and bounds [it(263)] 
       - Loop 264 is collaborative and bounds [it(264)] 
       - Loop 265 is collaborative and bounds [it(265)] 
       - Loop 266 is collaborative and bounds [it(266)] 
       - Loop 267 is collaborative and bounds [it(267)] 
       - Chain-Tail [272] adds a constant 1/1 
       - Chain-Tail [271] is collaborative and bounds [it([271])] 
     - tail Candidate: -2*A+4*B-1 
       - Loop 255 is collaborative and bounds [it(255)] 
       - Loop 256 is collaborative and bounds [it(256)] 
       - Loop 257 is collaborative and bounds [it(257)] 
       - Loop 258 is collaborative and bounds [it(258)] 
       - Loop 259 is collaborative and bounds [it(259)] 
       - Loop 260 is collaborative and bounds [it(260)] 
       - Loop 261 is collaborative and bounds [it(261)] 
       - Loop 262 is collaborative and bounds [it(262)] 
       - Loop 263 is collaborative and bounds [it(263)] 
       - Loop 264 is collaborative and bounds [it(264)] 
       - Loop 265 is collaborative and bounds [it(265)] 
       - Loop 266 is collaborative and bounds [it(266)] 
       - Loop 267 is collaborative and bounds [it(267)] 
       - Chain-Tail [272] adds a constant 1/1 
       - Chain-Tail [271] is collaborative and bounds [it([271])] 
 * Adding constraints: [it(254)+it(255)+it(256)+it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)+it([271])=<it([272])+aux(424),it(254)+it(255)+it(256)+it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)+it([271])=<it([272])+aux(425),it(254)+it(255)+it(260)+it(261)+it(264)+it(265)+it([271])=< -2*A+4*C-1,it(254)+it(255)+it(260)+it(261)+it(264)+it(265)+it([271])=< -2*A+4*B-1,aux(424)=< -2*A+4*C-1,aux(425)=< -2*A+4*B-1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 254: [s(4804)=<A-A'-D'2+1,s(4804)=< -D+A'+D'2+1,s(4803)=< -D+A'+D'2+2]
* Psum in Loop 255: [it(255)=<1,s(4817)=<A-A'-D'2+1,s(4816)=< -D+A'+D'2+2,s(4819)=< -D/2+A'/2+D'2/2+1,s(4818)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 256: [it(256)=<1,s(4827)=<A-A'-D'2+1,s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4804)=<A-A'-D'2+1  in Loop 254 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(426)=<A-D,aux(426)=<B-D/2+1/2] 
 * Adding constraints: [s(4804)=<it(254)*aux(426)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(426)=<A-D,aux(426)=<B-D/2+1/2]
* Psum in Loop 254: [s(4804)=< -D+A'+D'2+1,s(4803)=< -D+A'+D'2+2]
* Psum in Loop 255: [it(255)=<1,s(4817)=<A-A'-D'2+1,s(4816)=< -D+A'+D'2+2,s(4819)=< -D/2+A'/2+D'2/2+1,s(4818)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 256: [it(256)=<1,s(4827)=<A-A'-D'2+1,s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(426)=<A-D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(426)=<s(4177)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(426)=<B-D/2+1/2]
* Psum in Loop 254: [s(4804)=< -D+A'+D'2+1,s(4803)=< -D+A'+D'2+2]
* Psum in Loop 255: [it(255)=<1,s(4817)=<A-A'-D'2+1,s(4816)=< -D+A'+D'2+2,s(4819)=< -D/2+A'/2+D'2/2+1,s(4818)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 256: [it(256)=<1,s(4827)=<A-A'-D'2+1,s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(426)=<B-D/2+1/2  
   - Applying max/min strategy 
     - Loop 254 does not increase the expression
     - Loop 255 does not increase the expression
     - Loop 256 does not increase the expression
     - Loop 257 does not increase the expression
     - Loop 258 does not increase the expression
     - Loop 259 does not increase the expression
     - Loop 260 does not increase the expression
     - Loop 261 does not increase the expression
     - Loop 262 does not increase the expression
     - Loop 263 does not increase the expression
     - Loop 264 does not increase the expression
     - Loop 265 does not increase the expression
     - Loop 266 does not increase the expression
     - Loop 267 does not increase the expression
 * Adding constraints:[aux(426)=<aux(427),aux(427)=<B-D/2+1/2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 254: [s(4804)=< -D+A'+D'2+1,s(4803)=< -D+A'+D'2+2]
* Psum in Loop 255: [it(255)=<1,s(4817)=<A-A'-D'2+1,s(4816)=< -D+A'+D'2+2,s(4819)=< -D/2+A'/2+D'2/2+1,s(4818)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 256: [it(256)=<1,s(4827)=<A-A'-D'2+1,s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4804)=< -D+A'+D'2+1  in Loop 254 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(428)=<A-D,aux(428)=<B-D/2+1/2] 
 * Adding constraints: [s(4804)=<it(254)*aux(428)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(428)=<A-D,aux(428)=<B-D/2+1/2]
* Psum in Loop 254: [s(4803)=< -D+A'+D'2+2]
* Psum in Loop 255: [it(255)=<1,s(4817)=<A-A'-D'2+1,s(4816)=< -D+A'+D'2+2,s(4819)=< -D/2+A'/2+D'2/2+1,s(4818)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 256: [it(256)=<1,s(4827)=<A-A'-D'2+1,s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(428)=<A-D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(428)=<s(4177)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(428)=<B-D/2+1/2]
* Psum in Loop 254: [s(4803)=< -D+A'+D'2+2]
* Psum in Loop 255: [it(255)=<1,s(4817)=<A-A'-D'2+1,s(4816)=< -D+A'+D'2+2,s(4819)=< -D/2+A'/2+D'2/2+1,s(4818)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 256: [it(256)=<1,s(4827)=<A-A'-D'2+1,s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(428)=<B-D/2+1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(428)=<aux(426)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 254: [s(4803)=< -D+A'+D'2+2]
* Psum in Loop 255: [it(255)=<1,s(4817)=<A-A'-D'2+1,s(4816)=< -D+A'+D'2+2,s(4819)=< -D/2+A'/2+D'2/2+1,s(4818)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 256: [it(256)=<1,s(4827)=<A-A'-D'2+1,s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4803)=< -D+A'+D'2+2  in Loop 254 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(429)=<A-D+1,aux(429)=<B-D/2+3/2] 
 * Adding constraints: [s(4803)=<it(254)*aux(429)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(429)=<A-D+1,aux(429)=<B-D/2+3/2]
* Psum in Loop 255: [it(255)=<1,s(4817)=<A-A'-D'2+1,s(4816)=< -D+A'+D'2+2,s(4819)=< -D/2+A'/2+D'2/2+1,s(4818)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 256: [it(256)=<1,s(4827)=<A-A'-D'2+1,s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(429)=<A-D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(429)=<s(4177)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(429)=<B-D/2+3/2]
* Psum in Loop 255: [it(255)=<1,s(4817)=<A-A'-D'2+1,s(4816)=< -D+A'+D'2+2,s(4819)=< -D/2+A'/2+D'2/2+1,s(4818)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 256: [it(256)=<1,s(4827)=<A-A'-D'2+1,s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(429)=<B-D/2+3/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(429)=<aux(426)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 255: [it(255)=<1,s(4817)=<A-A'-D'2+1,s(4816)=< -D+A'+D'2+2,s(4819)=< -D/2+A'/2+D'2/2+1,s(4818)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 256: [it(256)=<1,s(4827)=<A-A'-D'2+1,s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for it(255)=<1  in Loop 255 
   - Applying inductive sum strategy 
     - head Candidate: A/3-1 
       - Loop 254 is collaborative
       - Loop 256 is collaborative
       - Loop 257 is collaborative
       - Loop 258 is collaborative
       - Loop 259 is collaborative
       - Loop 260 is collaborative
       - Loop 261 is collaborative
       - Loop 262 is collaborative
       - Loop 263 is collaborative
       - Loop 264 is collaborative
       - Loop 265 is collaborative
       - Loop 266 is collaborative
       - Loop 267 is collaborative
       - Chain [272] is ignored
       - Chain [271] is ignored
     - head Candidate: -A+2*B-1 
       - Loop 254 is collaborative
       - Loop 256 is collaborative
       - Loop 257 is collaborative
       - Loop 258 is collaborative
       - Loop 259 is collaborative
       - Loop 260 is collaborative
       - Loop 261 is collaborative
       - Loop 262 is collaborative
       - Loop 263 is collaborative
       - Loop 264 is collaborative
       - Loop 265 is collaborative
       - Loop 266 is collaborative
       - Loop 267 is collaborative
       - Chain [272] is ignored
       - Chain-Tail [271] is collaborative and bounds [it([271])] 
     - tail Candidate: A/3-1 
       - Loop 254 is collaborative
       - Loop 256 is collaborative and bounds [it(256)] 
       - Loop 257 is collaborative and bounds [it(257)] 
       - Loop 258 is collaborative and bounds [it(258)] 
       - Loop 259 is collaborative and bounds [it(259)] 
       - Loop 260 is collaborative and bounds [it(260)] 
       - Loop 261 is collaborative and bounds [it(261)] 
       - Loop 262 is collaborative and bounds [it(262)] 
       - Loop 263 is collaborative and bounds [it(263)] 
       - Loop 264 is collaborative and bounds [it(264)] 
       - Loop 265 is collaborative and bounds [it(265)] 
       - Loop 266 is collaborative and bounds [it(266)] 
       - Loop 267 is collaborative and bounds [it(267)] 
       - Chain-Tail [272] adds a constant 1/3 
       - Chain-Tail [271] adds a constant 1/3 
     - tail Candidate: -A+2*B-1 
       - Loop 254 is collaborative
       - Loop 256 is collaborative and bounds [it(256)] 
       - Loop 257 is collaborative and bounds [it(257)] 
       - Loop 258 is collaborative and bounds [it(258)] 
       - Loop 259 is collaborative and bounds [it(259)] 
       - Loop 260 is collaborative and bounds [it(260)] 
       - Loop 261 is collaborative and bounds [it(261)] 
       - Loop 262 is collaborative and bounds [it(262)] 
       - Loop 263 is collaborative and bounds [it(263)] 
       - Loop 264 is collaborative and bounds [it(264)] 
       - Loop 265 is collaborative and bounds [it(265)] 
       - Loop 266 is collaborative and bounds [it(266)] 
       - Loop 267 is collaborative and bounds [it(267)] 
       - Chain-Tail [272] adds a constant 1/1 
       - Chain-Tail [271] is collaborative and bounds [it([271])] 
 * Adding constraints: [it(255)+it(256)+it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)=<it([271])* (1/3)+it([272])* (1/3)+aux(430),it(255)+it(256)+it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)+it([271])=<it([272])+aux(431),it(255)=<A/3-1,it(255)+it([271])=< -A+2*B-1,aux(430)=<A/3-1,aux(431)=< -A+2*B-1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 255: [s(4817)=<A-A'-D'2+1,s(4816)=< -D+A'+D'2+2,s(4819)=< -D/2+A'/2+D'2/2+1,s(4818)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 256: [it(256)=<1,s(4827)=<A-A'-D'2+1,s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4817)=<A-A'-D'2+1  in Loop 255 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(432)=<A-D-1,aux(432)=<B-D/2-1/2] 
 * Adding constraints: [s(4817)=<it(255)*aux(432)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(432)=<A-D-1,aux(432)=<B-D/2-1/2]
* Psum in Loop 255: [s(4816)=< -D+A'+D'2+2,s(4819)=< -D/2+A'/2+D'2/2+1,s(4818)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 256: [it(256)=<1,s(4827)=<A-A'-D'2+1,s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(432)=<A-D-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(432)=<s(4177)-1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(432)=<B-D/2-1/2]
* Psum in Loop 255: [s(4816)=< -D+A'+D'2+2,s(4819)=< -D/2+A'/2+D'2/2+1,s(4818)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 256: [it(256)=<1,s(4827)=<A-A'-D'2+1,s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(432)=<B-D/2-1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(432)=<aux(426)-1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 255: [s(4816)=< -D+A'+D'2+2,s(4819)=< -D/2+A'/2+D'2/2+1,s(4818)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 256: [it(256)=<1,s(4827)=<A-A'-D'2+1,s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4816)=< -D+A'+D'2+2  in Loop 255 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(433)=<A-D+1,aux(433)=<B-D/2+3/2] 
 * Adding constraints: [s(4816)=<it(255)*aux(433)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(433)=<A-D+1,aux(433)=<B-D/2+3/2]
* Psum in Loop 255: [s(4819)=< -D/2+A'/2+D'2/2+1,s(4818)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 256: [it(256)=<1,s(4827)=<A-A'-D'2+1,s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(433)=<A-D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(433)=<s(4177)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(433)=<B-D/2+3/2]
* Psum in Loop 255: [s(4819)=< -D/2+A'/2+D'2/2+1,s(4818)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 256: [it(256)=<1,s(4827)=<A-A'-D'2+1,s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(433)=<B-D/2+3/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(433)=<aux(426)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 255: [s(4819)=< -D/2+A'/2+D'2/2+1,s(4818)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 256: [it(256)=<1,s(4827)=<A-A'-D'2+1,s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4819)=< -D/2+A'/2+D'2/2+1  in Loop 255 
   - Found a solution using cacheing 
 * Adding constraints: [s(4819)=<aux(434)* (1/2),aux(434)=<it(255)*aux(433)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 255: [s(4818)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 256: [it(256)=<1,s(4827)=<A-A'-D'2+1,s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4818)=< -D/3+A'/3+D'2/3+2/3  in Loop 255 
   - Found a solution using cacheing 
 * Adding constraints: [s(4818)=<aux(435)* (1/3),aux(435)=<it(255)*aux(433)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 256: [it(256)=<1,s(4827)=<A-A'-D'2+1,s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for it(256)=<1  in Loop 256 
   - Applying inductive sum strategy 
     - head Candidate: A/2-1 
       - Loop 254 is collaborative
       - Loop 255 is collaborative
       - Loop 257 is collaborative and bounds [it(257)] 
       - Loop 258 is collaborative and bounds [it(258)] 
       - Loop 259 is collaborative and bounds [it(259)] 
       - Loop 260 is collaborative and bounds [it(260)] 
       - Loop 261 is collaborative and bounds [it(261)] 
       - Loop 262 is collaborative and bounds [it(262)] 
       - Loop 263 is collaborative and bounds [it(263)] 
       - Loop 264 is collaborative and bounds [it(264)] 
       - Loop 265 is collaborative and bounds [it(265)] 
       - Loop 266 is collaborative and bounds [it(266)] 
       - Loop 267 is collaborative and bounds [it(267)] 
       - Chain-Tail [272] is collaborative
       - Chain-Tail [271] is collaborative
     - head Candidate: D/2-1/2 
       - Loop 254 is collaborative
       - Loop 255 is collaborative
       - Loop 257 is collaborative and bounds [it(257)] 
       - Loop 258 is collaborative and bounds [it(258)] 
       - Loop 259 is collaborative and bounds [it(259)] 
       - Loop 260 is collaborative and bounds [it(260)] 
       - Loop 261 is collaborative and bounds [it(261)] 
       - Loop 262 is collaborative and bounds [it(262)] 
       - Loop 263 is collaborative and bounds [it(263)] 
       - Loop 264 is collaborative and bounds [it(264)] 
       - Loop 265 is collaborative and bounds [it(265)] 
       - Loop 266 is collaborative and bounds [it(266)] 
       - Loop 267 is collaborative and bounds [it(267)] 
       - Chain-Tail [272] is collaborative
       - Chain-Tail [271] is collaborative
     - tail Candidate: A/2-1 
       - Loop 254 is collaborative
       - Loop 255 is collaborative
       - Loop 257 is collaborative and bounds [it(257)] 
       - Loop 258 is collaborative and bounds [it(258)] 
       - Loop 259 is collaborative and bounds [it(259)] 
       - Loop 260 is collaborative and bounds [it(260)] 
       - Loop 261 is collaborative and bounds [it(261)] 
       - Loop 262 is collaborative and bounds [it(262)] 
       - Loop 263 is collaborative and bounds [it(263)] 
       - Loop 264 is collaborative and bounds [it(264)] 
       - Loop 265 is collaborative and bounds [it(265)] 
       - Loop 266 is collaborative and bounds [it(266)] 
       - Loop 267 is collaborative and bounds [it(267)] 
       - Chain-Tail [272] is collaborative
       - Chain-Tail [271] is collaborative
     - tail Candidate: D/2-1/2 
       - Loop 254 is collaborative
       - Loop 255 is collaborative
       - Loop 257 is collaborative and bounds [it(257)] 
       - Loop 258 is collaborative and bounds [it(258)] 
       - Loop 259 is collaborative and bounds [it(259)] 
       - Loop 260 is collaborative and bounds [it(260)] 
       - Loop 261 is collaborative and bounds [it(261)] 
       - Loop 262 is collaborative and bounds [it(262)] 
       - Loop 263 is collaborative and bounds [it(263)] 
       - Loop 264 is collaborative and bounds [it(264)] 
       - Loop 265 is collaborative and bounds [it(265)] 
       - Loop 266 is collaborative and bounds [it(266)] 
       - Loop 267 is collaborative and bounds [it(267)] 
       - Chain-Tail [272] is collaborative
       - Chain-Tail [271] is collaborative
 * Adding constraints: [it(256)+it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)=<A/2-1,it(256)+it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)=<D/2-1/2,it(256)+it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)=<A/2-1,it(256)+it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)=<D/2-1/2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 256: [s(4827)=<A-A'-D'2+1,s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4827)=<A-A'-D'2+1  in Loop 256 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(436)=<A-D+1,aux(436)=<B-D/2+3/2] 
 * Adding constraints: [s(4827)=<it(256)*aux(436)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(436)=<A-D+1,aux(436)=<B-D/2+3/2]
* Psum in Loop 256: [s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(436)=<A-D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(436)=<s(4177)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(436)=<B-D/2+3/2]
* Psum in Loop 256: [s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(436)=<B-D/2+3/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(436)=<aux(426)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 256: [s(4829)=< -D+A'+D'2+2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4829)=< -D+A'+D'2+2  in Loop 256 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(437)=<A-D+1,aux(437)=<B-D/2+3/2] 
 * Adding constraints: [s(4829)=<it(256)*aux(437)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(437)=<A-D+1,aux(437)=<B-D/2+3/2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(437)=<A-D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(437)=<s(4177)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(437)=<B-D/2+3/2]
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(437)=<B-D/2+3/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(437)=<aux(426)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 257: [it(257)=<1,s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for it(257)=<1  in Loop 257 
   - Applying inductive sum strategy 
     - head Candidate: B-1 
       - Loop 254 is collaborative
       - Loop 255 is collaborative
       - Loop 256 is collaborative
       - Loop 258 is collaborative and bounds [it(258)] 
       - Loop 259 is collaborative and bounds [it(259)] 
       - Loop 260 is collaborative and bounds [it(260)] 
       - Loop 261 is collaborative and bounds [it(261)] 
       - Loop 262 is collaborative and bounds [it(262)] 
       - Loop 263 is collaborative and bounds [it(263)] 
       - Loop 264 is collaborative and bounds [it(264)] 
       - Loop 265 is collaborative and bounds [it(265)] 
       - Loop 266 is collaborative and bounds [it(266)] 
       - Loop 267 is collaborative and bounds [it(267)] 
       - Chain-Tail [272] is collaborative
       - Chain-Tail [271] is collaborative and bounds [it([271])] 
     - head Candidate: A/2-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - Loop 254 is collaborative
       - Loop 255 is collaborative
       - Loop 256 is collaborative
       - Loop 258 is collaborative and bounds [it(258)] 
       - Loop 259 is collaborative and bounds [it(259)] 
       - Loop 260 is collaborative and bounds [it(260)] 
       - Loop 261 is collaborative and bounds [it(261)] 
       - Loop 262 is collaborative and bounds [it(262)] 
       - Loop 263 is collaborative and bounds [it(263)] 
       - Loop 264 is collaborative and bounds [it(264)] 
       - Loop 265 is collaborative and bounds [it(265)] 
       - Loop 266 is collaborative and bounds [it(266)] 
       - Loop 267 is collaborative and bounds [it(267)] 
       - Chain-Tail [272] is collaborative
       - Chain-Tail [271] is collaborative and bounds [it([271])] 
     - tail Candidate: A/2-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)+it([271])=<B-1,it(256)+it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)=<A/2-1,it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)+it([271])=<B-1,it(256)+it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)=<A/2-1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 257: [s(4856)=<A-A'-D'2,s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4856)=<A-A'-D'2  in Loop 257 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(438)=<A-D,aux(438)=<B-D/2+1/2] 
 * Adding constraints: [s(4856)=<it(257)*aux(438)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(438)=<A-D,aux(438)=<B-D/2+1/2]
* Psum in Loop 257: [s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(438)=<A-D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(438)=<s(4177)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(438)=<B-D/2+1/2]
* Psum in Loop 257: [s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(438)=<B-D/2+1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(438)=<aux(426)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 257: [s(4857)=<A-A'-D'2+1,s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4857)=<A-A'-D'2+1  in Loop 257 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(439)=<A-D+1,aux(439)=<B-D/2+3/2] 
 * Adding constraints: [s(4857)=<it(257)*aux(439)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(439)=<A-D+1,aux(439)=<B-D/2+3/2]
* Psum in Loop 257: [s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(439)=<A-D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(439)=<s(4177)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(439)=<B-D/2+3/2]
* Psum in Loop 257: [s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(439)=<B-D/2+3/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(439)=<aux(426)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 257: [s(4854)=<A/2-A'/2-D'2/2,s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4854)=<A/2-A'/2-D'2/2  in Loop 257 
   - Found a solution using cacheing 
 * Adding constraints: [s(4854)=<aux(440)* (1/2),aux(440)=<it(257)*aux(438)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 257: [s(4858)=<A/2-A'/2-D'2/2+1,s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4858)=<A/2-A'/2-D'2/2+1  in Loop 257 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(441)=<A/2-D/2+1,aux(441)=<B/2-D/4+5/4] 
 * Adding constraints: [s(4858)=<it(257)*aux(441)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(441)=<A/2-D/2+1,aux(441)=<B/2-D/4+5/4]
* Psum in Loop 257: [s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(441)=<A/2-D/2+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(441)=<s(4177)* (1/2)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(441)=<B/2-D/4+5/4]
* Psum in Loop 257: [s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(441)=<B/2-D/4+5/4  
   - Found a solution using cacheing 
 * Adding constraints:[aux(441)=<aux(426)* (1/2)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 257: [s(4855)=<A/2-A'/2-D'2/2+1/2,s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4855)=<A/2-A'/2-D'2/2+1/2  in Loop 257 
   - Found a solution using cacheing 
 * Adding constraints: [s(4855)=<aux(442)* (1/2),aux(442)=<it(257)*aux(439)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 257: [s(4862)=< -D+A'+D'2+2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4862)=< -D+A'+D'2+2  in Loop 257 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(443)=<A-D+1,aux(443)=<B-D/2+3/2] 
 * Adding constraints: [s(4862)=<it(257)*aux(443)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(443)=<A-D+1,aux(443)=<B-D/2+3/2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(443)=<A-D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(443)=<s(4177)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(443)=<B-D/2+3/2]
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(443)=<B-D/2+3/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(443)=<aux(426)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 258: [it(258)=<1,s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for it(258)=<1  in Loop 258 
   - Applying inductive sum strategy 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A/2-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A/2-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)+it([271])=<B-1,it(256)+it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)=<A/2-1,it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)+it([271])=<B-1,it(256)+it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)=<A/2-1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 258: [s(4884)=< -D+A'+D'2+2,s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4884)=< -D+A'+D'2+2  in Loop 258 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(444)=<A-D+1,aux(444)=<B-D/2+3/2] 
 * Adding constraints: [s(4884)=<it(258)*aux(444)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(444)=<A-D+1,aux(444)=<B-D/2+3/2]
* Psum in Loop 258: [s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(444)=<A-D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(444)=<s(4177)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(444)=<B-D/2+3/2]
* Psum in Loop 258: [s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(444)=<B-D/2+3/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(444)=<aux(426)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 258: [s(4883)=< -D/2+A'/2+D'2/2+1,s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4883)=< -D/2+A'/2+D'2/2+1  in Loop 258 
   - Found a solution using cacheing 
 * Adding constraints: [s(4883)=<aux(445)* (1/2),aux(445)=<it(258)*aux(444)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 258: [s(4882)=<A'2-D'2+1]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4882)=<A'2-D'2+1  in Loop 258 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(446)=<A-D+1,aux(446)=<B-D/2+3/2] 
 * Adding constraints: [s(4882)=<it(258)*aux(446)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(446)=<A-D+1,aux(446)=<B-D/2+3/2]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(446)=<A-D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(446)=<s(4177)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(446)=<B-D/2+3/2]
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(446)=<B-D/2+3/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(446)=<aux(426)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 259: [it(259)=<1,s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for it(259)=<1  in Loop 259 
   - Applying inductive sum strategy 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C-1 
       - Loop 254 is collaborative
       - Loop 255 is collaborative
       - Loop 256 is collaborative
       - Loop 257 is collaborative
       - Loop 258 is collaborative
       - Loop 260 is collaborative and bounds [it(260)] 
       - Loop 261 is collaborative and bounds [it(261)] 
       - Loop 262 is collaborative and bounds [it(262)] 
       - Loop 263 is collaborative and bounds [it(263)] 
       - Loop 264 is collaborative and bounds [it(264)] 
       - Loop 265 is collaborative and bounds [it(265)] 
       - Loop 266 is collaborative and bounds [it(266)] 
       - Loop 267 is collaborative and bounds [it(267)] 
       - Chain-Tail [272] is collaborative
       - Chain-Tail [271] is collaborative and bounds [it([271])] 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - Loop 254 is collaborative
       - Loop 255 is collaborative
       - Loop 256 is collaborative
       - Loop 257 is collaborative
       - Loop 258 is collaborative
       - Loop 260 is collaborative and bounds [it(260)] 
       - Loop 261 is collaborative and bounds [it(261)] 
       - Loop 262 is collaborative and bounds [it(262)] 
       - Loop 263 is collaborative and bounds [it(263)] 
       - Loop 264 is collaborative and bounds [it(264)] 
       - Loop 265 is collaborative and bounds [it(265)] 
       - Loop 266 is collaborative and bounds [it(266)] 
       - Loop 267 is collaborative and bounds [it(267)] 
       - Chain-Tail [272] is collaborative
       - Chain-Tail [271] is collaborative and bounds [it([271])] 
 * Adding constraints: [it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)+it([271])=<B-1,it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)+it([271])=<C-1,it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)+it([271])=<B-1,it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)+it([271])=<C-1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 259: [s(4898)=< -D+A'+D'2+2,s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4898)=< -D+A'+D'2+2  in Loop 259 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(447)=<A-D+1,aux(447)=<B-D/2+3/2] 
 * Adding constraints: [s(4898)=<it(259)*aux(447)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(447)=<A-D+1,aux(447)=<B-D/2+3/2]
* Psum in Loop 259: [s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(447)=<A-D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(447)=<s(4177)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(447)=<B-D/2+3/2]
* Psum in Loop 259: [s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(447)=<B-D/2+3/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(447)=<aux(426)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 259: [s(4897)=< -D/2+A'/2+D'2/2+1,s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4897)=< -D/2+A'/2+D'2/2+1  in Loop 259 
   - Found a solution using cacheing 
 * Adding constraints: [s(4897)=<aux(448)* (1/2),aux(448)=<it(259)*aux(447)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 259: [s(4892)=<A'2-D'2+1]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4892)=<A'2-D'2+1  in Loop 259 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(449)=<A-D+1,aux(449)=<B-D/2+3/2] 
 * Adding constraints: [s(4892)=<it(259)*aux(449)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(449)=<A-D+1,aux(449)=<B-D/2+3/2]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(449)=<A-D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(449)=<s(4177)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(449)=<B-D/2+3/2]
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(449)=<B-D/2+3/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(449)=<aux(426)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 260: [it(260)=<1,s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for it(260)=<1  in Loop 260 
   - Applying inductive sum strategy 
     - head Candidate: 2/5*A-1 
       - Loop 254 is collaborative
       - Loop 255 is collaborative
       - Loop 256 is collaborative
       - Loop 257 is collaborative
       - Loop 258 is collaborative
       - Loop 259 is collaborative
       - Loop 261 is collaborative and bounds [it(261)] 
       - Loop 262 is collaborative
       - Loop 263 is collaborative
       - Loop 264 is collaborative and bounds [it(264)] 
       - Loop 265 is collaborative and bounds [it(265)] 
       - Loop 266 is collaborative
       - Loop 267 is collaborative
       - Chain [272] is ignored
       - Chain [271] is ignored
     - head Candidate: -2*A+4*B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: 2/5*A-1 
       - Loop 254 is collaborative
       - Loop 255 is collaborative
       - Loop 256 is collaborative
       - Loop 257 is collaborative
       - Loop 258 is collaborative
       - Loop 259 is collaborative
       - Loop 261 is collaborative and bounds [it(261)] 
       - Loop 262 is collaborative and bounds [it(262)] 
       - Loop 263 is collaborative and bounds [it(263)] 
       - Loop 264 is collaborative and bounds [it(264)] 
       - Loop 265 is collaborative and bounds [it(265)] 
       - Loop 266 is collaborative and bounds [it(266)] 
       - Loop 267 is collaborative and bounds [it(267)] 
       - Chain-Tail [272] adds a constant 1/5 
       - Chain-Tail [271] adds a constant 1/5 
     - tail Candidate: -2*A+4*B-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)=<it([271])* (1/5)+it([272])* (1/5)+aux(450),it(254)+it(255)+it(256)+it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)+it([271])=<it([272])+aux(451),it(260)+it(261)+it(264)+it(265)=<2/5*A-1,it(254)+it(255)+it(260)+it(261)+it(264)+it(265)+it([271])=< -2*A+4*B-1,aux(450)=<2/5*A-1,aux(451)=< -2*A+4*B-1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 260: [s(4912)=<A-A'-D'2+1,s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4912)=<A-A'-D'2+1  in Loop 260 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(452)=<A-D,aux(452)=<B-D/2+1/2] 
 * Adding constraints: [s(4912)=<it(260)*aux(452)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(452)=<A-D,aux(452)=<B-D/2+1/2]
* Psum in Loop 260: [s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(452)=<A-D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(452)=<s(4177)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(452)=<B-D/2+1/2]
* Psum in Loop 260: [s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(452)=<B-D/2+1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(452)=<aux(426)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 260: [s(4912)=< -D+A'+D'2+1,s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4912)=< -D+A'+D'2+1  in Loop 260 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(453)=<A-D,aux(453)=<B-D/2+1/2] 
 * Adding constraints: [s(4912)=<it(260)*aux(453)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(453)=<A-D,aux(453)=<B-D/2+1/2]
* Psum in Loop 260: [s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(453)=<A-D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(453)=<s(4177)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(453)=<B-D/2+1/2]
* Psum in Loop 260: [s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(453)=<B-D/2+1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(453)=<aux(426)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 260: [s(4911)=< -D+A'+D'2+2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4911)=< -D+A'+D'2+2  in Loop 260 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(454)=<A-D+1,aux(454)=<B-D/2+3/2] 
 * Adding constraints: [s(4911)=<it(260)*aux(454)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(454)=<A-D+1,aux(454)=<B-D/2+3/2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(454)=<A-D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(454)=<s(4177)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(454)=<B-D/2+3/2]
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(454)=<B-D/2+3/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(454)=<aux(426)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 261: [it(261)=<1,s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for it(261)=<1  in Loop 261 
   - Applying inductive sum strategy 
     - head Candidate: 2*C-D-2 
       - Loop 254 is collaborative
       - Loop 255 is collaborative
       - Loop 256 is collaborative
       - Loop 257 is collaborative
       - Loop 258 is collaborative
       - Loop 259 is collaborative
       - Loop 260 is collaborative
       - Loop 262 is collaborative
       - Loop 263 is collaborative
       - Loop 264 is collaborative and bounds [it(264)] 
       - Loop 265 is collaborative and bounds [it(265)] 
       - Loop 266 is collaborative
       - Loop 267 is collaborative
       - Chain [272] is ignored
       - Chain-Tail [271] is collaborative and bounds [it([271])] 
     - head Candidate: 2*A-2*D-3 
       - Loop 254 is collaborative
       - Loop 255 is collaborative
       - Loop 256 is collaborative
       - Loop 257 is collaborative
       - Loop 258 is collaborative
       - Loop 259 is collaborative
       - Loop 260 is collaborative
       - Loop 262 is collaborative
       - Loop 263 is collaborative
       - Loop 264 is collaborative and bounds [it(264)] 
       - Loop 265 is collaborative and bounds [it(265)] 
       - Loop 266 is collaborative
       - Loop 267 is collaborative
       - Chain [272] is ignored
       - Chain [271] is ignored
     - tail Candidate: 2*C-D-2 
       - Loop 254 is collaborative
       - Loop 255 is collaborative
       - Loop 256 is collaborative
       - Loop 257 is collaborative
       - Loop 258 is collaborative
       - Loop 259 is collaborative
       - Loop 260 is collaborative
       - Loop 262 is collaborative and bounds [it(262)] 
       - Loop 263 is collaborative and bounds [it(263)] 
       - Loop 264 is collaborative and bounds [it(264)] 
       - Loop 265 is collaborative and bounds [it(265)] 
       - Loop 266 is collaborative and bounds [it(266)] 
       - Loop 267 is collaborative and bounds [it(267)] 
       - Chain-Tail [272] adds a constant 1/1 
       - Chain-Tail [271] is collaborative and bounds [it([271])] 
     - tail Candidate: 2*A-2*D-3 
       - Loop 254 is collaborative
       - Loop 255 is collaborative
       - Loop 256 is collaborative
       - Loop 257 is collaborative
       - Loop 258 is collaborative
       - Loop 259 is collaborative
       - Loop 260 is collaborative
       - Loop 262 is collaborative and bounds [it(262)] 
       - Loop 263 is collaborative and bounds [it(263)] 
       - Loop 264 is collaborative and bounds [it(264)] 
       - Loop 265 is collaborative and bounds [it(265)] 
       - Loop 266 is collaborative and bounds [it(266)] 
       - Loop 267 is collaborative and bounds [it(267)] 
       - Chain-Tail [272] adds a constant 1/1 
       - Chain-Tail [271] adds a constant 1/1 
 * Adding constraints: [it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)+it([271])=<it([272])+aux(455),it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)=<it([271])+it([272])+aux(456),it(261)+it(264)+it(265)+it([271])=<2*C-D-2,it(261)+it(264)+it(265)=<2*A-2*D-3,aux(455)=<2*C-D-2,aux(456)=<2*A-2*D-3] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 261: [s(4924)=<A-A'-D'2+1,s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4924)=<A-A'-D'2+1  in Loop 261 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(457)=<A-D,aux(457)=<B-D/2+1/2] 
 * Adding constraints: [s(4924)=<it(261)*aux(457)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(457)=<A-D,aux(457)=<B-D/2+1/2]
* Psum in Loop 261: [s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(457)=<A-D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(457)=<s(4177)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(457)=<B-D/2+1/2]
* Psum in Loop 261: [s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(457)=<B-D/2+1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(457)=<aux(426)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 261: [s(4924)=< -D+A'+D'2+1,s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4924)=< -D+A'+D'2+1  in Loop 261 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(458)=<A-D,aux(458)=<B-D/2+1/2] 
 * Adding constraints: [s(4924)=<it(261)*aux(458)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(458)=<A-D,aux(458)=<B-D/2+1/2]
* Psum in Loop 261: [s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(458)=<A-D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(458)=<s(4177)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(458)=<B-D/2+1/2]
* Psum in Loop 261: [s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(458)=<B-D/2+1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(458)=<aux(426)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 261: [s(4923)=< -D+A'+D'2+2,s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4923)=< -D+A'+D'2+2  in Loop 261 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(459)=<A-D+1,aux(459)=<B-D/2+3/2] 
 * Adding constraints: [s(4923)=<it(261)*aux(459)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(459)=<A-D+1,aux(459)=<B-D/2+3/2]
* Psum in Loop 261: [s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(459)=<A-D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(459)=<s(4177)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(459)=<B-D/2+3/2]
* Psum in Loop 261: [s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(459)=<B-D/2+3/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(459)=<aux(426)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 261: [s(4926)=< -D/2+A'/2+D'2/2+1,s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4926)=< -D/2+A'/2+D'2/2+1  in Loop 261 
   - Found a solution using cacheing 
 * Adding constraints: [s(4926)=<aux(460)* (1/2),aux(460)=<it(261)*aux(459)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 261: [s(4925)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4925)=< -D/3+A'/3+D'2/3+2/3  in Loop 261 
   - Found a solution using cacheing 
 * Adding constraints: [s(4925)=<aux(461)* (1/3),aux(461)=<it(261)*aux(459)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 262: [it(262)=<1,s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for it(262)=<1  in Loop 262 
   - Applying inductive sum strategy 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A/2-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A/2-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)+it([271])=<B-1,it(256)+it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)=<A/2-1,it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)+it([271])=<B-1,it(256)+it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)=<A/2-1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 262: [s(4934)=<A-A'-D'2+1,s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4934)=<A-A'-D'2+1  in Loop 262 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(462)=<A-D+1,aux(462)=<B-D/2+3/2] 
 * Adding constraints: [s(4934)=<it(262)*aux(462)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(462)=<A-D+1,aux(462)=<B-D/2+3/2]
* Psum in Loop 262: [s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(462)=<A-D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(462)=<s(4177)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(462)=<B-D/2+3/2]
* Psum in Loop 262: [s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(462)=<B-D/2+3/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(462)=<aux(426)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 262: [s(4935)=< -D+A'+D'2+2,s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4935)=< -D+A'+D'2+2  in Loop 262 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(463)=<A-D+1,aux(463)=<B-D/2+3/2] 
 * Adding constraints: [s(4935)=<it(262)*aux(463)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(463)=<A-D+1,aux(463)=<B-D/2+3/2]
* Psum in Loop 262: [s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(463)=<A-D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(463)=<s(4177)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(463)=<B-D/2+3/2]
* Psum in Loop 262: [s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(463)=<B-D/2+3/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(463)=<aux(426)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 262: [s(4936)=<A'-D'+1]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4936)=<A'-D'+1  in Loop 262 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(464)=<A-D+1,aux(464)=<B-D/2+3/2] 
 * Adding constraints: [s(4936)=<it(262)*aux(464)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(464)=<A-D+1,aux(464)=<B-D/2+3/2]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(464)=<A-D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(464)=<s(4177)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(464)=<B-D/2+3/2]
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(464)=<B-D/2+3/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(464)=<aux(426)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 263: [it(263)=<1,s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for it(263)=<1  in Loop 263 
   - Applying inductive sum strategy 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)+it([271])=<B-1,it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)+it([271])=<C-1,it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)+it([271])=<B-1,it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)+it([271])=<C-1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 263: [s(4962)=<A-A'-D'2,s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4962)=<A-A'-D'2  in Loop 263 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(465)=<A-D,aux(465)=<B-D/2+1/2] 
 * Adding constraints: [s(4962)=<it(263)*aux(465)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(465)=<A-D,aux(465)=<B-D/2+1/2]
* Psum in Loop 263: [s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(465)=<A-D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(465)=<s(4177)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(465)=<B-D/2+1/2]
* Psum in Loop 263: [s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(465)=<B-D/2+1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(465)=<aux(426)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 263: [s(4963)=<A-A'-D'2+1,s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4963)=<A-A'-D'2+1  in Loop 263 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(466)=<A-D+1,aux(466)=<B-D/2+3/2] 
 * Adding constraints: [s(4963)=<it(263)*aux(466)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(466)=<A-D+1,aux(466)=<B-D/2+3/2]
* Psum in Loop 263: [s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(466)=<A-D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(466)=<s(4177)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(466)=<B-D/2+3/2]
* Psum in Loop 263: [s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(466)=<B-D/2+3/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(466)=<aux(426)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 263: [s(4960)=<A/2-A'/2-D'2/2,s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4960)=<A/2-A'/2-D'2/2  in Loop 263 
   - Found a solution using cacheing 
 * Adding constraints: [s(4960)=<aux(467)* (1/2),aux(467)=<it(263)*aux(465)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 263: [s(4961)=<A/2-A'/2-D'2/2+1/2,s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4961)=<A/2-A'/2-D'2/2+1/2  in Loop 263 
   - Found a solution using cacheing 
 * Adding constraints: [s(4961)=<aux(468)* (1/2),aux(468)=<it(263)*aux(466)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 263: [s(4964)=< -D+A'+D'2+2,s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4964)=< -D+A'+D'2+2  in Loop 263 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(469)=<A-D+1,aux(469)=<B-D/2+3/2] 
 * Adding constraints: [s(4964)=<it(263)*aux(469)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(469)=<A-D+1,aux(469)=<B-D/2+3/2]
* Psum in Loop 263: [s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(469)=<A-D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(469)=<s(4177)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(469)=<B-D/2+3/2]
* Psum in Loop 263: [s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(469)=<B-D/2+3/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(469)=<aux(426)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 263: [s(4968)=<A'-D'+1]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4968)=<A'-D'+1  in Loop 263 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(470)=<A-D+1,aux(470)=<B-D/2+3/2] 
 * Adding constraints: [s(4968)=<it(263)*aux(470)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(470)=<A-D+1,aux(470)=<B-D/2+3/2]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(470)=<A-D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(470)=<s(4177)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(470)=<B-D/2+3/2]
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(470)=<B-D/2+3/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(470)=<aux(426)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 264: [it(264)=<1,s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for it(264)=<1  in Loop 264 
   - Applying inductive sum strategy 
     - head Candidate: 2*C-D-2 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: 2*A-2*D-3 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: 2*C-D-2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: 2*A-2*D-3 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)+it([271])=<it([272])+aux(471),it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)=<it([271])+it([272])+aux(472),it(261)+it(264)+it(265)+it([271])=<2*C-D-2,it(261)+it(264)+it(265)=<2*A-2*D-3,aux(471)=<2*C-D-2,aux(472)=<2*A-2*D-3] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 264: [s(4993)=<A-A'-D'2,s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4993)=<A-A'-D'2  in Loop 264 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(473)=<A-D-1,aux(473)=<B-D/2-1/2] 
 * Adding constraints: [s(4993)=<it(264)*aux(473)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(473)=<A-D-1,aux(473)=<B-D/2-1/2]
* Psum in Loop 264: [s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(473)=<A-D-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(473)=<s(4177)-1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(473)=<B-D/2-1/2]
* Psum in Loop 264: [s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(473)=<B-D/2-1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(473)=<aux(426)-1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 264: [s(4994)=<A-A'-D'2+1,s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4994)=<A-A'-D'2+1  in Loop 264 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(474)=<A-D,aux(474)=<B-D/2+1/2] 
 * Adding constraints: [s(4994)=<it(264)*aux(474)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(474)=<A-D,aux(474)=<B-D/2+1/2]
* Psum in Loop 264: [s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(474)=<A-D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(474)=<s(4177)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(474)=<B-D/2+1/2]
* Psum in Loop 264: [s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(474)=<B-D/2+1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(474)=<aux(426)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 264: [s(4991)=<A/2-A'/2-D'2/2,s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4991)=<A/2-A'/2-D'2/2  in Loop 264 
   - Found a solution using cacheing 
 * Adding constraints: [s(4991)=<aux(475)* (1/2),aux(475)=<it(264)*aux(473)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 264: [s(4992)=<A/2-A'/2-D'2/2+1/2,s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4992)=<A/2-A'/2-D'2/2+1/2  in Loop 264 
   - Found a solution using cacheing 
 * Adding constraints: [s(4992)=<aux(476)* (1/2),aux(476)=<it(264)*aux(474)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 264: [s(4993)=< -D+A'+D'2,s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4993)=< -D+A'+D'2  in Loop 264 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(477)=<A-D-1,aux(477)=<B-D/2-1/2] 
 * Adding constraints: [s(4993)=<it(264)*aux(477)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(477)=<A-D-1,aux(477)=<B-D/2-1/2]
* Psum in Loop 264: [s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(477)=<A-D-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(477)=<s(4177)-1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(477)=<B-D/2-1/2]
* Psum in Loop 264: [s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(477)=<B-D/2-1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(477)=<aux(426)-1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 264: [s(4994)=< -D+A'+D'2+1,s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4994)=< -D+A'+D'2+1  in Loop 264 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(478)=<A-D,aux(478)=<B-D/2+1/2] 
 * Adding constraints: [s(4994)=<it(264)*aux(478)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(478)=<A-D,aux(478)=<B-D/2+1/2]
* Psum in Loop 264: [s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(478)=<A-D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(478)=<s(4177)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(478)=<B-D/2+1/2]
* Psum in Loop 264: [s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(478)=<B-D/2+1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(478)=<aux(426)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 264: [s(4990)=< -D+A'+D'2+2,s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4990)=< -D+A'+D'2+2  in Loop 264 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(479)=<A-D+1,aux(479)=<B-D/2+3/2] 
 * Adding constraints: [s(4990)=<it(264)*aux(479)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(479)=<A-D+1,aux(479)=<B-D/2+3/2]
* Psum in Loop 264: [s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(479)=<A-D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(479)=<s(4177)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(479)=<B-D/2+3/2]
* Psum in Loop 264: [s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(479)=<B-D/2+3/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(479)=<aux(426)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 264: [s(4991)=< -D/2+A'/2+D'2/2,s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4991)=< -D/2+A'/2+D'2/2  in Loop 264 
   - Found a solution using cacheing 
 * Adding constraints: [s(4991)=<aux(480)* (1/2),aux(480)=<it(264)*aux(477)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 264: [s(4992)=< -D/2+A'/2+D'2/2+1/2]
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(4992)=< -D/2+A'/2+D'2/2+1/2  in Loop 264 
   - Found a solution using cacheing 
 * Adding constraints: [s(4992)=<aux(481)* (1/2),aux(481)=<it(264)*aux(478)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 265: [it(265)=<1,s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for it(265)=<1  in Loop 265 
   - Applying inductive sum strategy 
     - head Candidate: 2*B-D-2 
       - Loop 254 is collaborative
       - Loop 255 is collaborative
       - Loop 256 is collaborative
       - Loop 257 is collaborative
       - Loop 258 is collaborative
       - Loop 259 is collaborative
       - Loop 260 is collaborative
       - Loop 261 is collaborative
       - Loop 262 is collaborative
       - Loop 263 is collaborative
       - Loop 264 is collaborative
       - Loop 266 is collaborative
       - Loop 267 is collaborative
       - Chain [272] is ignored
       - Chain-Tail [271] is collaborative and bounds [it([271])] 
     - head Candidate: 2*C-D-2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: 2*B-D-2 
       - Loop 254 is collaborative
       - Loop 255 is collaborative
       - Loop 256 is collaborative
       - Loop 257 is collaborative
       - Loop 258 is collaborative
       - Loop 259 is collaborative
       - Loop 260 is collaborative
       - Loop 261 is collaborative
       - Loop 262 is collaborative
       - Loop 263 is collaborative
       - Loop 264 is collaborative
       - Loop 266 is collaborative and bounds [it(266)] 
       - Loop 267 is collaborative and bounds [it(267)] 
       - Chain-Tail [272] adds a constant 1/1 
       - Chain-Tail [271] is collaborative and bounds [it([271])] 
     - tail Candidate: 2*C-D-2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(265)+it(266)+it(267)+it([271])=<it([272])+aux(482),it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)+it([271])=<it([272])+aux(483),it(265)+it([271])=<2*B-D-2,it(261)+it(264)+it(265)+it([271])=<2*C-D-2,aux(482)=<2*B-D-2,aux(483)=<2*C-D-2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 265: [s(5006)=< -D+A'+D'2,s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(5006)=< -D+A'+D'2  in Loop 265 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(484)=<A-D-1,aux(484)=<B-D/2-1/2] 
 * Adding constraints: [s(5006)=<it(265)*aux(484)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(484)=<A-D-1,aux(484)=<B-D/2-1/2]
* Psum in Loop 265: [s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(484)=<A-D-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(484)=<s(4177)-1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(484)=<B-D/2-1/2]
* Psum in Loop 265: [s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(484)=<B-D/2-1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(484)=<aux(426)-1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 265: [s(5009)=< -D+A'+D'2+1,s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(5009)=< -D+A'+D'2+1  in Loop 265 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(485)=<A-D,aux(485)=<B-D/2+1/2] 
 * Adding constraints: [s(5009)=<it(265)*aux(485)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(485)=<A-D,aux(485)=<B-D/2+1/2]
* Psum in Loop 265: [s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(485)=<A-D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(485)=<s(4177)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(485)=<B-D/2+1/2]
* Psum in Loop 265: [s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(485)=<B-D/2+1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(485)=<aux(426)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 265: [s(5003)=< -D+A'+D'2+2,s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(5003)=< -D+A'+D'2+2  in Loop 265 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(486)=<A-D+1,aux(486)=<B-D/2+3/2] 
 * Adding constraints: [s(5003)=<it(265)*aux(486)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(486)=<A-D+1,aux(486)=<B-D/2+3/2]
* Psum in Loop 265: [s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(486)=<A-D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(486)=<s(4177)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(486)=<B-D/2+3/2]
* Psum in Loop 265: [s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(486)=<B-D/2+3/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(486)=<aux(426)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 265: [s(5004)=< -D/2+A'/2+D'2/2,s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(5004)=< -D/2+A'/2+D'2/2  in Loop 265 
   - Found a solution using cacheing 
 * Adding constraints: [s(5004)=<aux(487)* (1/2),aux(487)=<it(265)*aux(484)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 265: [s(5008)=< -D/2+A'/2+D'2/2+1,s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(5008)=< -D/2+A'/2+D'2/2+1  in Loop 265 
   - Found a solution using cacheing 
 * Adding constraints: [s(5008)=<aux(488)* (1/2),aux(488)=<it(265)*aux(486)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 265: [s(5005)=< -D/2+A'/2+D'2/2+1/2,s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(5005)=< -D/2+A'/2+D'2/2+1/2  in Loop 265 
   - Found a solution using cacheing 
 * Adding constraints: [s(5005)=<aux(489)* (1/2),aux(489)=<it(265)*aux(485)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 265: [s(5007)=< -D/3+A'/3+D'2/3+2/3,s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(5007)=< -D/3+A'/3+D'2/3+2/3  in Loop 265 
   - Found a solution using cacheing 
 * Adding constraints: [s(5007)=<aux(490)* (1/3),aux(490)=<it(265)*aux(486)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 265: [s(5006)=<A'2-D'2,s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(5006)=<A'2-D'2  in Loop 265 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(491)=<A-D-1,aux(491)=<B-D/2-1/2] 
 * Adding constraints: [s(5006)=<it(265)*aux(491)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(491)=<A-D-1,aux(491)=<B-D/2-1/2]
* Psum in Loop 265: [s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(491)=<A-D-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(491)=<s(4177)-1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(491)=<B-D/2-1/2]
* Psum in Loop 265: [s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(491)=<B-D/2-1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(491)=<aux(426)-1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 265: [s(5009)=<A'2-D'2+1,s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(5009)=<A'2-D'2+1  in Loop 265 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(492)=<A-D,aux(492)=<B-D/2+1/2] 
 * Adding constraints: [s(5009)=<it(265)*aux(492)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(492)=<A-D,aux(492)=<B-D/2+1/2]
* Psum in Loop 265: [s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(492)=<A-D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(492)=<s(4177)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(492)=<B-D/2+1/2]
* Psum in Loop 265: [s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(492)=<B-D/2+1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(492)=<aux(426)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 265: [s(5004)=<A'2/2-D'2/2,s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(5004)=<A'2/2-D'2/2  in Loop 265 
   - Found a solution using cacheing 
 * Adding constraints: [s(5004)=<aux(493)* (1/2),aux(493)=<it(265)*aux(491)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 265: [s(5005)=<A'2/2-D'2/2+1/2]
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(5005)=<A'2/2-D'2/2+1/2  in Loop 265 
   - Found a solution using cacheing 
 * Adding constraints: [s(5005)=<aux(494)* (1/2),aux(494)=<it(265)*aux(492)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 266: [it(266)=<1,s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for it(266)=<1  in Loop 266 
   - Applying inductive sum strategy 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)+it([271])=<B-1,it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)+it([271])=<C-1,it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)+it([271])=<B-1,it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)+it([271])=<C-1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 266: [s(5020)=<A-A'-D'2+1,s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(5020)=<A-A'-D'2+1  in Loop 266 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(495)=<A-D+1,aux(495)=<B-D/2+3/2] 
 * Adding constraints: [s(5020)=<it(266)*aux(495)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(495)=<A-D+1,aux(495)=<B-D/2+3/2]
* Psum in Loop 266: [s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(495)=<A-D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(495)=<s(4177)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(495)=<B-D/2+3/2]
* Psum in Loop 266: [s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(495)=<B-D/2+3/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(495)=<aux(426)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 266: [s(5022)=<A/2-A'/2-D'2/2+1/2,s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(5022)=<A/2-A'/2-D'2/2+1/2  in Loop 266 
   - Found a solution using cacheing 
 * Adding constraints: [s(5022)=<aux(496)* (1/2),aux(496)=<it(266)*aux(495)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 266: [s(5021)=<A/3-A'/3-D'2/3+1/3,s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(5021)=<A/3-A'/3-D'2/3+1/3  in Loop 266 
   - Found a solution using cacheing 
 * Adding constraints: [s(5021)=<aux(497)* (1/3),aux(497)=<it(266)*aux(495)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 266: [s(5026)=< -D+A'+D'2+1,s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(5026)=< -D+A'+D'2+1  in Loop 266 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(498)=<A-D,aux(498)=<B-D/2+1/2] 
 * Adding constraints: [s(5026)=<it(266)*aux(498)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(498)=<A-D,aux(498)=<B-D/2+1/2]
* Psum in Loop 266: [s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(498)=<A-D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(498)=<s(4177)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(498)=<B-D/2+1/2]
* Psum in Loop 266: [s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(498)=<B-D/2+1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(498)=<aux(426)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 266: [s(5027)=< -D+A'+D'2+2,s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(5027)=< -D+A'+D'2+2  in Loop 266 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(499)=<A-D+1,aux(499)=<B-D/2+3/2] 
 * Adding constraints: [s(5027)=<it(266)*aux(499)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(499)=<A-D+1,aux(499)=<B-D/2+3/2]
* Psum in Loop 266: [s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(499)=<A-D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(499)=<s(4177)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(499)=<B-D/2+3/2]
* Psum in Loop 266: [s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(499)=<B-D/2+3/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(499)=<aux(426)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 266: [s(5025)=< -D/2+A'/2+D'2/2+1,s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(5025)=< -D/2+A'/2+D'2/2+1  in Loop 266 
   - Found a solution using cacheing 
 * Adding constraints: [s(5025)=<aux(500)* (1/2),aux(500)=<it(266)*aux(499)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 266: [s(5024)=< -D/2+A'/2+D'2/2+1/2,s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(5024)=< -D/2+A'/2+D'2/2+1/2  in Loop 266 
   - Found a solution using cacheing 
 * Adding constraints: [s(5024)=<aux(501)* (1/2),aux(501)=<it(266)*aux(498)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 266: [s(5021)=< -D/3+A'/3+D'2/3+2/3]
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(5021)=< -D/3+A'/3+D'2/3+2/3  in Loop 266 
   - Found a solution using cacheing 
 * Adding constraints: [s(5021)=<aux(502)* (1/3),aux(502)=<it(266)*aux(499)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 267: [it(267)=<1,s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for it(267)=<1  in Loop 267 
   - Applying inductive sum strategy 
     - head Candidate: D/2-1/2 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D/2-1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(256)+it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)=<D/2-1/2,it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)+it([271])=<B-1,it(256)+it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)=<D/2-1/2,it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)+it([271])=<B-1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 267: [s(5055)=< -D+A'+D'2+1,s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(5055)=< -D+A'+D'2+1  in Loop 267 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(503)=<A-D,aux(503)=<B-D/2+1/2] 
 * Adding constraints: [s(5055)=<it(267)*aux(503)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(503)=<A-D,aux(503)=<B-D/2+1/2]
* Psum in Loop 267: [s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(503)=<A-D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(503)=<s(4177)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(503)=<B-D/2+1/2]
* Psum in Loop 267: [s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(503)=<B-D/2+1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(503)=<aux(426)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 267: [s(5056)=< -D+A'+D'2+2,s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(5056)=< -D+A'+D'2+2  in Loop 267 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(504)=<A-D+1,aux(504)=<B-D/2+3/2] 
 * Adding constraints: [s(5056)=<it(267)*aux(504)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(504)=<A-D+1,aux(504)=<B-D/2+3/2]
* Psum in Loop 267: [s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(504)=<A-D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(504)=<s(4177)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(504)=<B-D/2+3/2]
* Psum in Loop 267: [s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(504)=<B-D/2+3/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(504)=<aux(426)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 267: [s(5054)=< -D/2+A'/2+D'2/2+1,s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(5054)=< -D/2+A'/2+D'2/2+1  in Loop 267 
   - Found a solution using cacheing 
 * Adding constraints: [s(5054)=<aux(505)* (1/2),aux(505)=<it(267)*aux(504)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 267: [s(5053)=< -D/2+A'/2+D'2/2+1/2,s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(5053)=< -D/2+A'/2+D'2/2+1/2  in Loop 267 
   - Found a solution using cacheing 
 * Adding constraints: [s(5053)=<aux(506)* (1/2),aux(506)=<it(267)*aux(503)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 267: [s(5046)=< -D/3+A'/3+D'2/3+2/3,s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(5046)=< -D/3+A'/3+D'2/3+2/3  in Loop 267 
   - Found a solution using cacheing 
 * Adding constraints: [s(5046)=<aux(507)* (1/3),aux(507)=<it(267)*aux(504)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 267: [s(5044)=<A'2-D'2,s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(5044)=<A'2-D'2  in Loop 267 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(508)=<A-D,aux(508)=<B-D/2+1/2] 
 * Adding constraints: [s(5044)=<it(267)*aux(508)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(508)=<A-D,aux(508)=<B-D/2+1/2]
* Psum in Loop 267: [s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(508)=<A-D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(508)=<s(4177)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(508)=<B-D/2+1/2]
* Psum in Loop 267: [s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(508)=<B-D/2+1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(508)=<aux(426)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 267: [s(5045)=<A'2-D'2+1,s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(5045)=<A'2-D'2+1  in Loop 267 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(509)=<A-D+1,aux(509)=<B-D/2+3/2] 
 * Adding constraints: [s(5045)=<it(267)*aux(509)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(509)=<A-D+1,aux(509)=<B-D/2+3/2]
* Psum in Loop 267: [s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(509)=<A-D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(509)=<s(4177)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(509)=<B-D/2+3/2]
* Psum in Loop 267: [s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing max_min for aux(509)=<B-D/2+3/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(509)=<aux(426)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 267: [s(5042)=<A'2/2-D'2/2,s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(5042)=<A'2/2-D'2/2  in Loop 267 
   - Found a solution using cacheing 
 * Adding constraints: [s(5042)=<aux(510)* (1/2),aux(510)=<it(267)*aux(508)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 267: [s(5043)=<A'2/2-D'2/2+1/2,s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(5043)=<A'2/2-D'2/2+1/2  in Loop 267 
   - Found a solution using cacheing 
 * Adding constraints: [s(5043)=<aux(511)* (1/2),aux(511)=<it(267)*aux(509)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 267: [s(5046)=<A'2/3-D'2/3+1/3]
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(5046)=<A'2/3-D'2/3+1/3  in Loop 267 
   - Found a solution using cacheing 
 * Adding constraints: [s(5046)=<aux(512)* (1/3),aux(512)=<it(267)*aux(509)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Chain-Tail [271]: [it([271])=<1,s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for it([271])=<1  in Chain-Tail [271] 
   - Applying inductive sum strategy 
     - head Candidate: B/2 
       - Loop 254 is collaborative
       - Loop 255 is collaborative
       - Loop 256 is collaborative
       - Loop 257 is collaborative
       - Loop 258 is collaborative
       - Loop 259 is collaborative
       - Loop 260 is collaborative
       - Loop 261 is collaborative
       - Loop 262 is collaborative
       - Loop 263 is collaborative
       - Loop 264 is collaborative
       - Loop 265 is collaborative
       - Loop 266 is collaborative
       - Loop 267 is collaborative
       - Chain-Tail [272] is collaborative
     - head Candidate: A/2 
       - Loop 254 is collaborative
       - Loop 255 is collaborative
       - Loop 256 is collaborative
       - Loop 257 is collaborative
       - Loop 258 is collaborative
       - Loop 259 is collaborative
       - Loop 260 is collaborative
       - Loop 261 is collaborative
       - Loop 262 is collaborative
       - Loop 263 is collaborative
       - Loop 264 is collaborative
       - Loop 265 is collaborative
       - Loop 266 is collaborative
       - Loop 267 is collaborative
       - Chain-Tail [272] is collaborative and bounds [it([272])] 
     - tail Candidate: B/2 
       - Loop 254 is collaborative
       - Loop 255 is collaborative
       - Loop 256 is collaborative
       - Loop 257 is collaborative
       - Loop 258 is collaborative
       - Loop 259 is collaborative
       - Loop 260 is collaborative
       - Loop 261 is collaborative
       - Loop 262 is collaborative
       - Loop 263 is collaborative
       - Loop 264 is collaborative
       - Loop 265 is collaborative
       - Loop 266 is collaborative
       - Loop 267 is collaborative
       - Chain-Tail [272] is collaborative
     - tail Candidate: A/2 
       - Loop 254 is collaborative
       - Loop 255 is collaborative
       - Loop 256 is collaborative
       - Loop 257 is collaborative
       - Loop 258 is collaborative
       - Loop 259 is collaborative
       - Loop 260 is collaborative
       - Loop 261 is collaborative
       - Loop 262 is collaborative
       - Loop 263 is collaborative
       - Loop 264 is collaborative
       - Loop 265 is collaborative
       - Loop 266 is collaborative
       - Loop 267 is collaborative
       - Chain-Tail [272] is collaborative and bounds [it([272])] 
 * Adding constraints: [it([271])=<B/2,it([271])+it([272])=<A/2,it([271])=<B/2,it([271])+it([272])=<A/2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Chain-Tail [271]: [s(5062)=<A,s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(5062)=<A  in Chain-Tail [271] 
   - Applying inductive sum strategy 
     - head Candidate: A 
       - Loop 254 is collaborative
       - Loop 255 is collaborative
       - Loop 256 is collaborative
       - Loop 257 is collaborative
       - Loop 258 is collaborative
       - Loop 259 is collaborative
       - Loop 260 is collaborative
       - Loop 261 is collaborative
       - Loop 262 is collaborative
       - Loop 263 is collaborative
       - Loop 264 is collaborative
       - Loop 265 is collaborative
       - Loop 266 is collaborative
       - Loop 267 is collaborative
       - Chain-Tail [272] is collaborative and bounds [it([272])] 
     - tail Candidate: A 
       - Loop 254 is collaborative
       - Loop 255 is collaborative
       - Loop 256 is collaborative
       - Loop 257 is collaborative
       - Loop 258 is collaborative
       - Loop 259 is collaborative
       - Loop 260 is collaborative
       - Loop 261 is collaborative
       - Loop 262 is collaborative
       - Loop 263 is collaborative
       - Loop 264 is collaborative
       - Loop 265 is collaborative
       - Loop 266 is collaborative
       - Loop 267 is collaborative
       - Chain-Tail [272] is collaborative and bounds [it([272])] 
 * Adding constraints: [it([272])+s(5062)=<A,it([272])+s(5062)=<A] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Chain-Tail [271]: [s(5060)=<B,s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(5060)=<B  in Chain-Tail [271] 
   - Applying inductive sum strategy 
     - head Candidate: B 
       - Loop 254 is collaborative
       - Loop 255 is collaborative
       - Loop 256 is collaborative
       - Loop 257 is collaborative
       - Loop 258 is collaborative
       - Loop 259 is collaborative
       - Loop 260 is collaborative
       - Loop 261 is collaborative
       - Loop 262 is collaborative
       - Loop 263 is collaborative
       - Loop 264 is collaborative
       - Loop 265 is collaborative
       - Loop 266 is collaborative
       - Loop 267 is collaborative
       - Chain-Tail [272] is collaborative and bounds [it([272])] 
     - tail Candidate: B 
       - Loop 254 is collaborative
       - Loop 255 is collaborative
       - Loop 256 is collaborative
       - Loop 257 is collaborative
       - Loop 258 is collaborative
       - Loop 259 is collaborative
       - Loop 260 is collaborative
       - Loop 261 is collaborative
       - Loop 262 is collaborative
       - Loop 263 is collaborative
       - Loop 264 is collaborative
       - Loop 265 is collaborative
       - Loop 266 is collaborative
       - Loop 267 is collaborative
       - Chain-Tail [272] is collaborative and bounds [it([272])] 
 * Adding constraints: [it([272])+s(5060)=<B,it([272])+s(5060)=<B] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Chain-Tail [271]: [s(5059)=<B/2]
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for s(5059)=<B/2  in Chain-Tail [271] 
   - Found a solution using cacheing 
 * Adding constraints: [s(5059)=<aux(513)* (1/2),aux(513)+it([272])=<B,aux(513)+it([272])=<B] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Chain-Tail [272]: [it([272])=<1,s(5058)=<A]

###### Computing sum for it([272])=<1  in Chain-Tail [272] 
   - Applying inductive sum strategy 
     - head Candidate: D/2+1/2 
       - Loop 254 is collaborative
       - Loop 255 is collaborative
       - Loop 256 is collaborative
       - Loop 257 is collaborative
       - Loop 258 is collaborative
       - Loop 259 is collaborative
       - Loop 260 is collaborative
       - Loop 261 is collaborative
       - Loop 262 is collaborative
       - Loop 263 is collaborative
       - Loop 264 is collaborative
       - Loop 265 is collaborative
       - Loop 266 is collaborative
       - Loop 267 is collaborative
       - Chain-Tail [271] is collaborative
     - head Candidate: A-B 
       - Loop 254 is collaborative
       - Loop 255 is collaborative
       - Loop 256 is collaborative
       - Loop 257 is collaborative
       - Loop 258 is collaborative
       - Loop 259 is collaborative
       - Loop 260 is collaborative
       - Loop 261 is collaborative
       - Loop 262 is collaborative
       - Loop 263 is collaborative
       - Loop 264 is collaborative
       - Loop 265 is collaborative
       - Loop 266 is collaborative
       - Loop 267 is collaborative
       - Chain [271] is ignored
     - tail Candidate: D/2+1/2 
       - Loop 254 is collaborative
       - Loop 255 is collaborative
       - Loop 256 is collaborative
       - Loop 257 is collaborative
       - Loop 258 is collaborative
       - Loop 259 is collaborative
       - Loop 260 is collaborative
       - Loop 261 is collaborative
       - Loop 262 is collaborative
       - Loop 263 is collaborative
       - Loop 264 is collaborative
       - Loop 265 is collaborative
       - Loop 266 is collaborative
       - Loop 267 is collaborative
       - Chain-Tail [271] is collaborative
     - tail Candidate: A-B 
       - Loop 254 is collaborative
       - Loop 255 is collaborative
       - Loop 256 is collaborative
       - Loop 257 is collaborative
       - Loop 258 is collaborative
       - Loop 259 is collaborative
       - Loop 260 is collaborative
       - Loop 261 is collaborative
       - Loop 262 is collaborative
       - Loop 263 is collaborative
       - Loop 264 is collaborative
       - Loop 265 is collaborative
       - Loop 266 is collaborative
       - Loop 267 is collaborative
       - Chain-Tail [271] adds an expression [F-2,-E+F]
 * Adding constraints: [it([272])=<aux(514)+aux(515),it([272])=<D/2+1/2,it([272])=<A-B,it([272])=<D/2+1/2,aux(515)=<A-B] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Chain-Tail [271]: [aux(514)=< -E+F,aux(514)=<F-2]
* Psum in Chain-Tail [272]: [s(5058)=<A]

###### Computing sum for aux(514)=< -E+F  in Chain-Tail [271] 
   - Applying inductive sum strategy 
     - head Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-D-1 
       - Loop 254 is collaborative
       - Loop 255 is collaborative
       - Loop 256 is collaborative
       - Loop 257 is collaborative
       - Loop 258 is collaborative
       - Loop 259 is collaborative
       - Loop 260 is collaborative
       - Loop 261 is collaborative
       - Loop 262 is collaborative
       - Loop 263 is collaborative
       - Loop 264 is collaborative
       - Loop 265 is collaborative
       - Loop 266 is collaborative
       - Loop 267 is collaborative
       - Chain [272] is ignored
     - tail Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-D-1 
       - Loop 254 is collaborative
       - Loop 255 is collaborative
       - Loop 256 is collaborative
       - Loop 257 is collaborative
       - Loop 258 is collaborative
       - Loop 259 is collaborative
       - Loop 260 is collaborative
       - Loop 261 is collaborative
       - Loop 262 is collaborative
       - Loop 263 is collaborative
       - Loop 264 is collaborative
       - Loop 265 is collaborative
       - Loop 266 is collaborative
       - Loop 267 is collaborative
       - Chain-Tail [272] adds a constant 1/1 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(517)=<B-2,aux(517)=< -A+B] 
 * Adding constraints: [aux(514)=<it([271])*aux(517),aux(514)=<it([272])+aux(516),aux(514)+it([272])=<B,aux(514)=<B-D-1,aux(514)+it([272])=<B,aux(516)=<B-D-1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(517)=< -A+B,aux(517)=<B-2]
* Psum in Chain-Tail [271]: [aux(514)=<F-2]
* Psum in Chain-Tail [272]: [s(5058)=<A]

###### Computing max_min for aux(517)=< -A+B  
   - Applying max/min strategy 
     - Loop 254  increases the expression by [-1/2] 
     - Loop 255  increases the expression by [-1/2] 
     - Loop 256  increases the expression by [-1/2] 
     - Loop 257  increases the expression by [-1/2] 
     - Loop 258  increases the expression by [-1/2] 
     - Loop 259  increases the expression by [-1/2] 
     - Loop 260  increases the expression by [-1/2] 
     - Loop 261  increases the expression by [-1/2] 
     - Loop 262  increases the expression by [-1/2] 
     - Loop 263  increases the expression by [-1/2] 
     - Loop 264  increases the expression by [-1/2] 
     - Loop 265  increases the expression by [-1/2] 
     - Loop 266  increases the expression by [-1/2] 
     - Loop 267  increases the expression by [-1/2] 
 * Adding constraints:[aux(517)=<aux(518)+aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532),aux(518)=< -A+B] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(517)=<B-2]
* Psum in Loop 254: [aux(519)=< -1/2]
* Psum in Loop 255: [aux(520)=< -1/2]
* Psum in Loop 256: [aux(521)=< -1/2]
* Psum in Loop 257: [aux(522)=< -1/2]
* Psum in Loop 258: [aux(523)=< -1/2]
* Psum in Loop 259: [aux(524)=< -1/2]
* Psum in Loop 260: [aux(525)=< -1/2]
* Psum in Loop 261: [aux(526)=< -1/2]
* Psum in Loop 262: [aux(527)=< -1/2]
* Psum in Loop 263: [aux(528)=< -1/2]
* Psum in Loop 264: [aux(529)=< -1/2]
* Psum in Loop 265: [aux(530)=< -1/2]
* Psum in Loop 266: [aux(531)=< -1/2]
* Psum in Loop 267: [aux(532)=< -1/2]
* Psum in Chain-Tail [271]: [aux(514)=<F-2]
* Psum in Chain-Tail [272]: [s(5058)=<A]

###### Computing max_min for aux(517)=<B-2  
   - Applying max/min strategy 
     - Loop 254 does not increase the expression
     - Loop 255 does not increase the expression
     - Loop 256 does not increase the expression
     - Loop 257 does not increase the expression
     - Loop 258 does not increase the expression
     - Loop 259 does not increase the expression
     - Loop 260 does not increase the expression
     - Loop 261 does not increase the expression
     - Loop 262 does not increase the expression
     - Loop 263 does not increase the expression
     - Loop 264 does not increase the expression
     - Loop 265 does not increase the expression
     - Loop 266 does not increase the expression
     - Loop 267 does not increase the expression
 * Adding constraints:[aux(517)=<aux(533),aux(533)=<B-2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 254: [aux(519)=< -1/2]
* Psum in Loop 255: [aux(520)=< -1/2]
* Psum in Loop 256: [aux(521)=< -1/2]
* Psum in Loop 257: [aux(522)=< -1/2]
* Psum in Loop 258: [aux(523)=< -1/2]
* Psum in Loop 259: [aux(524)=< -1/2]
* Psum in Loop 260: [aux(525)=< -1/2]
* Psum in Loop 261: [aux(526)=< -1/2]
* Psum in Loop 262: [aux(527)=< -1/2]
* Psum in Loop 263: [aux(528)=< -1/2]
* Psum in Loop 264: [aux(529)=< -1/2]
* Psum in Loop 265: [aux(530)=< -1/2]
* Psum in Loop 266: [aux(531)=< -1/2]
* Psum in Loop 267: [aux(532)=< -1/2]
* Psum in Chain-Tail [271]: [aux(514)=<F-2]
* Psum in Chain-Tail [272]: [s(5058)=<A]

###### Computing sum for aux(519)=< -1/2  in Loop 254 
   - Applying inductive sum strategy 
     - head Candidate: 0 
       - Loop 255 is collaborative and bounds [aux(520)] 
       - Loop 256 is collaborative and bounds [aux(521)] 
       - Loop 257 is collaborative and bounds [aux(522)] 
       - Loop 258 is collaborative and bounds [aux(523)] 
       - Loop 259 is collaborative and bounds [aux(524)] 
       - Loop 260 is collaborative and bounds [aux(525)] 
       - Loop 261 is collaborative and bounds [aux(526)] 
       - Loop 262 is collaborative and bounds [aux(527)] 
       - Loop 263 is collaborative and bounds [aux(528)] 
       - Loop 264 is collaborative and bounds [aux(529)] 
       - Loop 265 is collaborative and bounds [aux(530)] 
       - Loop 266 is collaborative and bounds [aux(531)] 
       - Loop 267 is collaborative and bounds [aux(532)] 
       - Chain-Tail [272] is collaborative
       - Chain-Tail [271] is collaborative
     - head Candidate: -1/2 
       - Loop 255 is collaborative and bounds [aux(520)] 
       - Loop 256 is collaborative and bounds [aux(521)] 
       - Loop 257 is collaborative and bounds [aux(522)] 
       - Loop 258 is collaborative and bounds [aux(523)] 
       - Loop 259 is collaborative and bounds [aux(524)] 
       - Loop 260 is collaborative and bounds [aux(525)] 
       - Loop 261 is collaborative and bounds [aux(526)] 
       - Loop 262 is collaborative and bounds [aux(527)] 
       - Loop 263 is collaborative and bounds [aux(528)] 
       - Loop 264 is collaborative and bounds [aux(529)] 
       - Loop 265 is collaborative and bounds [aux(530)] 
       - Loop 266 is collaborative and bounds [aux(531)] 
       - Loop 267 is collaborative and bounds [aux(532)] 
       - Chain [272] is ignored
       - Chain [271] is ignored
     - tail Candidate: 0 
       - Loop 255 is collaborative and bounds [aux(520)] 
       - Loop 256 is collaborative and bounds [aux(521)] 
       - Loop 257 is collaborative and bounds [aux(522)] 
       - Loop 258 is collaborative and bounds [aux(523)] 
       - Loop 259 is collaborative and bounds [aux(524)] 
       - Loop 260 is collaborative and bounds [aux(525)] 
       - Loop 261 is collaborative and bounds [aux(526)] 
       - Loop 262 is collaborative and bounds [aux(527)] 
       - Loop 263 is collaborative and bounds [aux(528)] 
       - Loop 264 is collaborative and bounds [aux(529)] 
       - Loop 265 is collaborative and bounds [aux(530)] 
       - Loop 266 is collaborative and bounds [aux(531)] 
       - Loop 267 is collaborative and bounds [aux(532)] 
       - Chain-Tail [272] is collaborative
       - Chain-Tail [271] is collaborative
     - tail Candidate: -1/2 
       - Loop 255 is collaborative and bounds [aux(520)] 
       - Loop 256 is collaborative and bounds [aux(521)] 
       - Loop 257 is collaborative and bounds [aux(522)] 
       - Loop 258 is collaborative and bounds [aux(523)] 
       - Loop 259 is collaborative and bounds [aux(524)] 
       - Loop 260 is collaborative and bounds [aux(525)] 
       - Loop 261 is collaborative and bounds [aux(526)] 
       - Loop 262 is collaborative and bounds [aux(527)] 
       - Loop 263 is collaborative and bounds [aux(528)] 
       - Loop 264 is collaborative and bounds [aux(529)] 
       - Loop 265 is collaborative and bounds [aux(530)] 
       - Loop 266 is collaborative and bounds [aux(531)] 
       - Loop 267 is collaborative and bounds [aux(532)] 
       - Chain-Tail [272] adds a constant 1/2 
       - Chain-Tail [271] adds a constant 1/2 
 * Adding constraints: [aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<it([271])* (1/2)+it([272])* (1/2)+aux(534),aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<0,aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=< -1/2,aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<0,aux(534)=< -1/2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 255: [aux(520)=< -1/2]
* Psum in Loop 256: [aux(521)=< -1/2]
* Psum in Loop 257: [aux(522)=< -1/2]
* Psum in Loop 258: [aux(523)=< -1/2]
* Psum in Loop 259: [aux(524)=< -1/2]
* Psum in Loop 260: [aux(525)=< -1/2]
* Psum in Loop 261: [aux(526)=< -1/2]
* Psum in Loop 262: [aux(527)=< -1/2]
* Psum in Loop 263: [aux(528)=< -1/2]
* Psum in Loop 264: [aux(529)=< -1/2]
* Psum in Loop 265: [aux(530)=< -1/2]
* Psum in Loop 266: [aux(531)=< -1/2]
* Psum in Loop 267: [aux(532)=< -1/2]
* Psum in Chain-Tail [271]: [aux(514)=<F-2]
* Psum in Chain-Tail [272]: [s(5058)=<A]

###### Computing sum for aux(520)=< -1/2  in Loop 255 
   - Applying inductive sum strategy 
     - head Candidate: 0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: 0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -1/2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<it([271])* (1/2)+it([272])* (1/2)+aux(535),aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<0,aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=< -1/2,aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<0,aux(535)=< -1/2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 256: [aux(521)=< -1/2]
* Psum in Loop 257: [aux(522)=< -1/2]
* Psum in Loop 258: [aux(523)=< -1/2]
* Psum in Loop 259: [aux(524)=< -1/2]
* Psum in Loop 260: [aux(525)=< -1/2]
* Psum in Loop 261: [aux(526)=< -1/2]
* Psum in Loop 262: [aux(527)=< -1/2]
* Psum in Loop 263: [aux(528)=< -1/2]
* Psum in Loop 264: [aux(529)=< -1/2]
* Psum in Loop 265: [aux(530)=< -1/2]
* Psum in Loop 266: [aux(531)=< -1/2]
* Psum in Loop 267: [aux(532)=< -1/2]
* Psum in Chain-Tail [271]: [aux(514)=<F-2]
* Psum in Chain-Tail [272]: [s(5058)=<A]

###### Computing sum for aux(521)=< -1/2  in Loop 256 
   - Applying inductive sum strategy 
     - head Candidate: 0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: 0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -1/2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<it([271])* (1/2)+it([272])* (1/2)+aux(536),aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<0,aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=< -1/2,aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<0,aux(536)=< -1/2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 257: [aux(522)=< -1/2]
* Psum in Loop 258: [aux(523)=< -1/2]
* Psum in Loop 259: [aux(524)=< -1/2]
* Psum in Loop 260: [aux(525)=< -1/2]
* Psum in Loop 261: [aux(526)=< -1/2]
* Psum in Loop 262: [aux(527)=< -1/2]
* Psum in Loop 263: [aux(528)=< -1/2]
* Psum in Loop 264: [aux(529)=< -1/2]
* Psum in Loop 265: [aux(530)=< -1/2]
* Psum in Loop 266: [aux(531)=< -1/2]
* Psum in Loop 267: [aux(532)=< -1/2]
* Psum in Chain-Tail [271]: [aux(514)=<F-2]
* Psum in Chain-Tail [272]: [s(5058)=<A]

###### Computing sum for aux(522)=< -1/2  in Loop 257 
   - Applying inductive sum strategy 
     - head Candidate: 0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: 0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -1/2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<it([271])* (1/2)+it([272])* (1/2)+aux(537),aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<0,aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=< -1/2,aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<0,aux(537)=< -1/2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 258: [aux(523)=< -1/2]
* Psum in Loop 259: [aux(524)=< -1/2]
* Psum in Loop 260: [aux(525)=< -1/2]
* Psum in Loop 261: [aux(526)=< -1/2]
* Psum in Loop 262: [aux(527)=< -1/2]
* Psum in Loop 263: [aux(528)=< -1/2]
* Psum in Loop 264: [aux(529)=< -1/2]
* Psum in Loop 265: [aux(530)=< -1/2]
* Psum in Loop 266: [aux(531)=< -1/2]
* Psum in Loop 267: [aux(532)=< -1/2]
* Psum in Chain-Tail [271]: [aux(514)=<F-2]
* Psum in Chain-Tail [272]: [s(5058)=<A]

###### Computing sum for aux(523)=< -1/2  in Loop 258 
   - Applying inductive sum strategy 
     - head Candidate: 0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: 0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -1/2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<it([271])* (1/2)+it([272])* (1/2)+aux(538),aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<0,aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=< -1/2,aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<0,aux(538)=< -1/2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 259: [aux(524)=< -1/2]
* Psum in Loop 260: [aux(525)=< -1/2]
* Psum in Loop 261: [aux(526)=< -1/2]
* Psum in Loop 262: [aux(527)=< -1/2]
* Psum in Loop 263: [aux(528)=< -1/2]
* Psum in Loop 264: [aux(529)=< -1/2]
* Psum in Loop 265: [aux(530)=< -1/2]
* Psum in Loop 266: [aux(531)=< -1/2]
* Psum in Loop 267: [aux(532)=< -1/2]
* Psum in Chain-Tail [271]: [aux(514)=<F-2]
* Psum in Chain-Tail [272]: [s(5058)=<A]

###### Computing sum for aux(524)=< -1/2  in Loop 259 
   - Applying inductive sum strategy 
     - head Candidate: 0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: 0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -1/2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<it([271])* (1/2)+it([272])* (1/2)+aux(539),aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<0,aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=< -1/2,aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<0,aux(539)=< -1/2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 260: [aux(525)=< -1/2]
* Psum in Loop 261: [aux(526)=< -1/2]
* Psum in Loop 262: [aux(527)=< -1/2]
* Psum in Loop 263: [aux(528)=< -1/2]
* Psum in Loop 264: [aux(529)=< -1/2]
* Psum in Loop 265: [aux(530)=< -1/2]
* Psum in Loop 266: [aux(531)=< -1/2]
* Psum in Loop 267: [aux(532)=< -1/2]
* Psum in Chain-Tail [271]: [aux(514)=<F-2]
* Psum in Chain-Tail [272]: [s(5058)=<A]

###### Computing sum for aux(525)=< -1/2  in Loop 260 
   - Applying inductive sum strategy 
     - head Candidate: 0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: 0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -1/2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<it([271])* (1/2)+it([272])* (1/2)+aux(540),aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<0,aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=< -1/2,aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<0,aux(540)=< -1/2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 261: [aux(526)=< -1/2]
* Psum in Loop 262: [aux(527)=< -1/2]
* Psum in Loop 263: [aux(528)=< -1/2]
* Psum in Loop 264: [aux(529)=< -1/2]
* Psum in Loop 265: [aux(530)=< -1/2]
* Psum in Loop 266: [aux(531)=< -1/2]
* Psum in Loop 267: [aux(532)=< -1/2]
* Psum in Chain-Tail [271]: [aux(514)=<F-2]
* Psum in Chain-Tail [272]: [s(5058)=<A]

###### Computing sum for aux(526)=< -1/2  in Loop 261 
   - Applying inductive sum strategy 
     - head Candidate: 0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: 0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -1/2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<it([271])* (1/2)+it([272])* (1/2)+aux(541),aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<0,aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=< -1/2,aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<0,aux(541)=< -1/2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 262: [aux(527)=< -1/2]
* Psum in Loop 263: [aux(528)=< -1/2]
* Psum in Loop 264: [aux(529)=< -1/2]
* Psum in Loop 265: [aux(530)=< -1/2]
* Psum in Loop 266: [aux(531)=< -1/2]
* Psum in Loop 267: [aux(532)=< -1/2]
* Psum in Chain-Tail [271]: [aux(514)=<F-2]
* Psum in Chain-Tail [272]: [s(5058)=<A]

###### Computing sum for aux(527)=< -1/2  in Loop 262 
   - Applying inductive sum strategy 
     - head Candidate: 0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: 0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -1/2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<it([271])* (1/2)+it([272])* (1/2)+aux(542),aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<0,aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=< -1/2,aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<0,aux(542)=< -1/2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 263: [aux(528)=< -1/2]
* Psum in Loop 264: [aux(529)=< -1/2]
* Psum in Loop 265: [aux(530)=< -1/2]
* Psum in Loop 266: [aux(531)=< -1/2]
* Psum in Loop 267: [aux(532)=< -1/2]
* Psum in Chain-Tail [271]: [aux(514)=<F-2]
* Psum in Chain-Tail [272]: [s(5058)=<A]

###### Computing sum for aux(528)=< -1/2  in Loop 263 
   - Applying inductive sum strategy 
     - head Candidate: 0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: 0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -1/2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<it([271])* (1/2)+it([272])* (1/2)+aux(543),aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<0,aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=< -1/2,aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<0,aux(543)=< -1/2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 264: [aux(529)=< -1/2]
* Psum in Loop 265: [aux(530)=< -1/2]
* Psum in Loop 266: [aux(531)=< -1/2]
* Psum in Loop 267: [aux(532)=< -1/2]
* Psum in Chain-Tail [271]: [aux(514)=<F-2]
* Psum in Chain-Tail [272]: [s(5058)=<A]

###### Computing sum for aux(529)=< -1/2  in Loop 264 
   - Applying inductive sum strategy 
     - head Candidate: 0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: 0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -1/2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<it([271])* (1/2)+it([272])* (1/2)+aux(544),aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<0,aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=< -1/2,aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<0,aux(544)=< -1/2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 265: [aux(530)=< -1/2]
* Psum in Loop 266: [aux(531)=< -1/2]
* Psum in Loop 267: [aux(532)=< -1/2]
* Psum in Chain-Tail [271]: [aux(514)=<F-2]
* Psum in Chain-Tail [272]: [s(5058)=<A]

###### Computing sum for aux(530)=< -1/2  in Loop 265 
   - Applying inductive sum strategy 
     - head Candidate: 0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: 0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -1/2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<it([271])* (1/2)+it([272])* (1/2)+aux(545),aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<0,aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=< -1/2,aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<0,aux(545)=< -1/2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 266: [aux(531)=< -1/2]
* Psum in Loop 267: [aux(532)=< -1/2]
* Psum in Chain-Tail [271]: [aux(514)=<F-2]
* Psum in Chain-Tail [272]: [s(5058)=<A]

###### Computing sum for aux(531)=< -1/2  in Loop 266 
   - Applying inductive sum strategy 
     - head Candidate: 0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: 0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -1/2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<it([271])* (1/2)+it([272])* (1/2)+aux(546),aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<0,aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=< -1/2,aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<0,aux(546)=< -1/2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 267: [aux(532)=< -1/2]
* Psum in Chain-Tail [271]: [aux(514)=<F-2]
* Psum in Chain-Tail [272]: [s(5058)=<A]

###### Computing sum for aux(532)=< -1/2  in Loop 267 
   - Applying inductive sum strategy 
     - head Candidate: 0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: 0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -1/2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<it([271])* (1/2)+it([272])* (1/2)+aux(547),aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<0,aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=< -1/2,aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<0,aux(547)=< -1/2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Chain-Tail [271]: [aux(514)=<F-2]
* Psum in Chain-Tail [272]: [s(5058)=<A]

###### Computing sum for aux(514)=<F-2  in Chain-Tail [271] 
   - Applying inductive sum strategy 
     - head Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-D-1 
       - The candidate was classified before. We reuse its previous classification 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(549)=<B-2] 
 * Adding constraints: [aux(514)=<it([271])*aux(549),aux(514)=<it([272])+aux(548),aux(514)+it([272])=<B,aux(514)=<B-D-1,aux(514)+it([272])=<B,aux(548)=<B-D-1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(549)=<B-2]
* Psum in Chain-Tail [272]: [s(5058)=<A]

###### Computing max_min for aux(549)=<B-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(549)=<aux(517)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Chain-Tail [272]: [s(5058)=<A]

###### Computing sum for s(5058)=<A  in Chain-Tail [272] 
   - Applying inductive sum strategy 
     - head Candidate: A 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [s(5058)+s(5062)=<A,s(5058)+s(5062)=<A] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [254,255,256,257,258,259,260,261,262,263,264,265,266,267,[272],[271]] 
Found a cycle in the non-final constraints
 Removed possibly redundant constraints to solve a cycle in the cost structure 
it(254)+it(255)+it(256)+it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)+it([271])=<it([272])+aux(424)
it(254)+it(255)+it(256)+it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)+it([271])=<it([272])+aux(425)
it(255)+it(256)+it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)=<it([271])* (1/3)+it([272])* (1/3)+aux(430)
it(255)+it(256)+it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)+it([271])=<it([272])+aux(431)
it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)=<it([271])* (1/5)+it([272])* (1/5)+aux(450)
it(254)+it(255)+it(256)+it(257)+it(258)+it(259)+it(260)+it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)+it([271])=<it([272])+aux(451)
it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)+it([271])=<it([272])+aux(455)
it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)=<it([271])+it([272])+aux(456)
it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)+it([271])=<it([272])+aux(471)
it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)=<it([271])+it([272])+aux(472)
it(265)+it(266)+it(267)+it([271])=<it([272])+aux(482)
it(261)+it(262)+it(263)+it(264)+it(265)+it(266)+it(267)+it([271])=<it([272])+aux(483)
it([272])=<aux(514)+aux(515)
aux(514)=<it([271])*aux(517)
aux(514)=<it([272])+aux(516)
aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<it([271])* (1/2)+it([272])* (1/2)+aux(534)
aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<it([271])* (1/2)+it([272])* (1/2)+aux(535)
aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<it([271])* (1/2)+it([272])* (1/2)+aux(536)
aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<it([271])* (1/2)+it([272])* (1/2)+aux(537)
aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<it([271])* (1/2)+it([272])* (1/2)+aux(538)
aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<it([271])* (1/2)+it([272])* (1/2)+aux(539)
aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<it([271])* (1/2)+it([272])* (1/2)+aux(540)
aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<it([271])* (1/2)+it([272])* (1/2)+aux(541)
aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<it([271])* (1/2)+it([272])* (1/2)+aux(542)
aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<it([271])* (1/2)+it([272])* (1/2)+aux(543)
aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<it([271])* (1/2)+it([272])* (1/2)+aux(544)
aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<it([271])* (1/2)+it([272])* (1/2)+aux(545)
aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<it([271])* (1/2)+it([272])* (1/2)+aux(546)
aux(519)+aux(520)+aux(521)+aux(522)+aux(523)+aux(524)+aux(525)+aux(526)+aux(527)+aux(528)+aux(529)+aux(530)+aux(531)+aux(532)=<it([271])* (1/2)+it([272])* (1/2)+aux(547)
aux(514)=<it([271])*aux(549)
aux(514)=<it([272])+aux(548)

#### Simplifying cost structure of phase [254,255,256,257,258,259,260,261,262,263,264,265,266,267,[272],[271]] 
 * Joined equivalent variables [aux(423),s(4177)] into aux(423)
 * Joined equivalent variables [aux(550),aux(519),aux(520),aux(521),aux(522),aux(523),aux(524),aux(525),aux(526),aux(527),aux(528),aux(529),aux(530),aux(531),aux(532),aux(534),aux(535),aux(536),aux(537),aux(538),aux(539),aux(540),aux(541),aux(542),aux(543),aux(544),aux(545),aux(546),aux(547)] into aux(550)
 * Joined equivalent variables [aux(551),aux(425),aux(451)] into aux(551)
 * Joined equivalent variables [aux(552),aux(424)] into aux(552)
 * Joined equivalent variables [aux(553),aux(431)] into aux(553)
 * Joined equivalent variables [aux(554),s(5058),s(5062)] into aux(554)
 * Joined equivalent variables [aux(555),aux(515)] into aux(555)
 * Joined equivalent variables [aux(556),aux(456),aux(472)] into aux(556)
 * Joined equivalent variables [aux(558),aux(430)] into aux(558)
 * Joined equivalent variables [aux(559),aux(450)] into aux(559)
 * Joined equivalent variables [aux(560),aux(513),aux(533)] into aux(560)
 * Joined equivalent variables [aux(561),aux(516),aux(548)] into aux(561)
 * Joined equivalent variables [aux(562),aux(482)] into aux(562)
 * Joined equivalent variables [aux(564),aux(455),aux(471),aux(483)] into aux(564)
 * Joined equivalent variables [s(4072),s(4178),s(4183),s(4454),s(4557)] into s(4072)
 * Joined equivalent variables [aux(429),aux(433),aux(436),aux(437),aux(439),aux(443),aux(444),aux(446),aux(447),aux(449),aux(454),aux(459),aux(462),aux(463),aux(464),aux(466),aux(469),aux(470),aux(479),aux(486),aux(495),aux(499),aux(504),aux(509)] into aux(429)
 * Joined equivalent variables [s(4184),s(4275),s(4556),s(4765)] into s(4184)
 * Joined equivalent variables [aux(428),aux(438),aux(452),aux(453),aux(457),aux(458),aux(465),aux(474),aux(478),aux(485),aux(492),aux(498),aux(503),aux(508)] into aux(428)
 * Joined equivalent variables [aux(432),aux(473),aux(477),aux(484),aux(491)] into aux(432)
 * Joined equivalent variables [aux(511),aux(512),s(5045)] into aux(511)
 * Joined equivalent variables [aux(510),s(5044)] into aux(510)
 * Joined equivalent variables [aux(505),aux(507),s(5056)] into aux(505)
 * Joined equivalent variables [aux(506),s(5055)] into aux(506)
 * Joined equivalent variables [aux(500),aux(502),s(5027)] into aux(500)
 * Joined equivalent variables [aux(501),s(5026)] into aux(501)
 * Joined equivalent variables [aux(496),aux(497),s(5020)] into aux(496)
 * Joined equivalent variables [aux(488),aux(490),s(5003)] into aux(488)
 * Joined equivalent variables [aux(468),s(4963)] into aux(468)
 * Joined equivalent variables [aux(467),s(4962)] into aux(467)
 * Joined equivalent variables [aux(460),aux(461),s(4923)] into aux(460)
 * Joined equivalent variables [aux(448),s(4898)] into aux(448)
 * Joined equivalent variables [aux(445),s(4884)] into aux(445)
 * Joined equivalent variables [aux(442),s(4857)] into aux(442)
 * Joined equivalent variables [aux(440),s(4856)] into aux(440)
 * Joined equivalent variables [aux(434),aux(435),s(4816)] into aux(434)
 * Joined equivalent variables [s(4790),s(4792),s(4795),s(4805),s(4821),s(4831),s(4875),s(4878),s(4879),s(4880),s(4881),s(4891),s(4899),s(4901),s(4909),s(4913),s(4928),s(4938),s(4980),s(5011)] into s(4790)
 * Joined equivalent variables [it(261),it(264)] into it(261)
 * Joined equivalent variables [it(259),it(262),it(263),it(266),it(267)] into it(259)
 * Joined equivalent variables [it(257),it(258)] into it(257)
 * Joined equivalent variables [s(4791),s(4802)] into s(4791)
 * Joined equivalent variables [s(4797),s(4798),s(4799),s(4800),s(4801)] into s(4797)
 * Joined equivalent variables [s(4793),s(4794),s(4796)] into s(4793)
 * Joined equivalent variables [s(4808),s(4815)] into s(4808)
 * Joined equivalent variables [s(4811),s(4812)] into s(4811)
 * Joined equivalent variables [s(4806),s(4809)] into s(4806)
 * Joined equivalent variables [s(4900),s(4910)] into s(4900)
 * Joined equivalent variables [s(4904),s(4905),s(4906),s(4907),s(4908)] into s(4904)
 * Joined equivalent variables [s(4902),s(4903)] into s(4902)
 * Joined equivalent variables [s(4921),s(4922)] into s(4921)
 * Joined equivalent variables [s(4917),s(4918)] into s(4917)
 * Joined equivalent variables [s(4914),s(4915)] into s(4914)
 * Joined equivalent variables [s(4981),s(4989)] into s(4981)
 * Joined equivalent variables [s(4983),s(4984),s(4987)] into s(4983)
 * Joined equivalent variables [s(4985),s(4986)] into s(4985)
 * Joined equivalent variables [s(4203),s(4281),s(4560),s(4773)] into s(4203)
 * Joined equivalent variables [s(4277),s(4551),s(4760)] into s(4277)
 * Joined equivalent variables [s(4892),s(4934),s(4936),s(4968)] into s(4892)
 * Joined equivalent variables [aux(448),aux(468),aux(496),aux(500),aux(505),aux(511)] into aux(448)
 * Joined equivalent variables [aux(467),aux(501),aux(506),aux(510)] into aux(467)
 * Joined equivalent variables [aux(489),aux(494),s(5009)] into aux(489)
 * Joined equivalent variables [aux(487),aux(493),s(5006)] into aux(487)
 * Joined equivalent variables [aux(476),aux(481),s(4924),s(4994)] into aux(476)
 * Joined equivalent variables [aux(475),aux(480),s(4993)] into aux(475)
 * Joined equivalent variables [s(4862),s(4882)] into s(4862)
 * Joined equivalent variables [aux(442),aux(445)] into aux(442)
 * Joined equivalent variables [s(4827),s(4829)] into s(4827)
 * Joined equivalent variables [s(4282),s(4562),s(4774)] into s(4282)
 * Joined equivalent variables [s(4867),s(4868)] into s(4867)
 * Joined equivalent variables [s(5057),s(5061)] into s(5057)
 * Joined equivalent variables [aux(448),s(5023),s(5048)] into aux(448)
 * Joined equivalent variables [s(4827),s(4828)] into s(4827)
 * Joined equivalent variables [s(4960),s(5024),s(5042),s(5053)] into s(4960)
 * Joined equivalent variables [s(4897),s(4961),s(5025),s(5043),s(5054)] into s(4897)
 * Joined equivalent variables [s(4855),s(4883)] into s(4855)
 * Joined equivalent variables [s(4280),s(4559),s(4772)] into s(4280)
 * Joined equivalent variables [aux(448),s(4892)] into aux(448)
 * Joined equivalent variables [aux(442),s(4862)] into aux(442)
 * Joined equivalent variables [s(5021),s(5046)] into s(5021)
 * Joined equivalent variables [s(4848),s(4876)] into s(4848)
 * Joined equivalent variables [s(4885),s(4955),s(5010),s(5012),s(5028),s(5034)] into s(4885)
 * Joined equivalent variables [s(5014),s(5030)] into s(5014)
 * Joined equivalent variables [s(4914),s(4982)] into s(4914)
 * Joined equivalent variables [s(4820),s(4822)] into s(4820)
 * Joined equivalent variables [s(4836),s(4843)] into s(4836)
 * Joined equivalent variables [s(4832),s(4874)] into s(4832)
 * Joined equivalent variables [s(4890),s(4927),s(4929),s(4939)] into s(4890)
 * Joined equivalent variables [s(4863),s(4873)] into s(4863)
 * Joined equivalent variables [s(4897),s(5047)] into s(4897)
 * Joined equivalent variables [s(4935),s(4964)] into s(4935)
 * Joined equivalent variables [s(4937),s(4974)] into s(4937)
 * Joined equivalent variables [s(4832),s(4848)] into s(4832)
 * Joined equivalent variables [s(4885),s(4890),s(5015),s(5018),s(5035)] into s(4885)
 * Joined equivalent variables [s(5014),s(5039),s(5041)] into s(5014)
 * Joined equivalent variables [s(5013),s(5029)] into s(5013)
 * Joined equivalent variables [s(4820),s(4825),s(4826)] into s(4820)
 * Joined equivalent variables [s(5013),s(5037)] into s(5013)
 * Joined equivalent variables [s(5036),s(5040)] into s(5036)
 * Joined equivalent variables [s(4932),s(4956)] into s(4932)

#### Cost of phase [254,255,256,257,258,259,260,261,262,263,264,265,266,267]:evaluate(A,B,C,D,E,F,G,H) -> [] 
73*it(254)+73*it(255)+71*it(256)+142*it(257)+355*it(259)+73*it(260)+146*it(261)+73*it(265)+17*it([271])+17*it([272])+674*s(4790)+16*s(4791)+32*s(4793)+81*s(4797)+22*s(4806)+10*s(4807)+74*s(4808)+15*s(4810)+39*s(4811)+12*s(4813)+15*s(4814)+221*s(4820)+33*s(4823)+11*s(4824)+165*s(4832)+11*s(4833)+11*s(4834)+11*s(4835)+22*s(4836)+11*s(4837)+10*s(4838)+10*s(4839)+9*s(4840)+18*s(4841)+11*s(4842)+11*s(4844)+10*s(4845)+10*s(4846)+9*s(4847)+22*s(4849)+10*s(4850)+58*s(4851)+54*s(4852)+27*s(4853)+9*s(4877)+529*s(4885)+9*s(4886)+10*s(4887)+10*s(4888)+9*s(4889)+16*s(4900)+32*s(4902)+81*s(4904)+64*s(4914)+15*s(4916)+39*s(4917)+12*s(4919)+15*s(4920)+68*s(4921)+33*s(4930)+11*s(4931)+64*s(4932)+81*s(4933)+11*s(4940)+11*s(4941)+11*s(4942)+11*s(4943)+11*s(4944)+10*s(4945)+10*s(4946)+9*s(4947)+18*s(4948)+11*s(4949)+11*s(4950)+11*s(4951)+10*s(4952)+10*s(4953)+9*s(4954)+54*s(4957)+27*s(4958)+52*s(4959)+16*s(4981)+54*s(4983)+27*s(4985)+52*s(4988)+32*s(4995)+15*s(4996)+24*s(4997)+15*s(4998)+12*s(4999)+15*s(5000)+52*s(5001)+16*s(5002)+42*s(5013)+82*s(5014)+15*s(5016)+39*s(5017)+15*s(5019)+10*s(5031)+10*s(5032)+9*s(5033)+30*s(5036)+15*s(5038)+22*s(5057)+10*s(5059)+6*s(5060)+0
  Such that:aux(423) =< A-D
aux(427) =< B-D/2+1/2
it([271]) =< B/2
it([272]) =< D/2+1/2
aux(551) =< -2*A+4*B
aux(552) =< -2*A+4*C
aux(553) =< -A+2*B
aux(554) =< A
aux(555) =< A-B
aux(556) =< 2*A-2*D
aux(557) =< A/2
aux(558) =< A/3
aux(559) =< 2/5*A
aux(560) =< B
aux(562) =< 2*B-D
aux(563) =< C
aux(564) =< 2*C-D
aux(565) =< D/2
it(254) =< aux(551)
it(255) =< aux(551)
it(260) =< aux(551)
it(261) =< aux(551)
it(265) =< aux(551)
it([271]) =< aux(551)
it(254) =< aux(552)
it(255) =< aux(552)
it(260) =< aux(552)
it(261) =< aux(552)
it(265) =< aux(552)
it([271]) =< aux(552)
it(255) =< aux(553)
it([271]) =< aux(553)
it([272]) =< aux(554)
it([272]) =< aux(555)
it(261) =< aux(556)
it(265) =< aux(556)
it(256) =< aux(557)
it(257) =< aux(557)
it(259) =< aux(557)
it(260) =< aux(557)
it(261) =< aux(557)
it(265) =< aux(557)
it([271]) =< aux(557)
it([272]) =< aux(557)
it(255) =< aux(558)
it(260) =< aux(559)
it(261) =< aux(559)
it(265) =< aux(559)
it(257) =< aux(560)
it(259) =< aux(560)
it(260) =< aux(560)
it(261) =< aux(560)
it(265) =< aux(560)
it([271]) =< aux(560)
it([272]) =< aux(560)
s(5060) =< aux(560)
it(265) =< aux(562)
it([271]) =< aux(562)
it(259) =< aux(563)
it(260) =< aux(563)
it(261) =< aux(563)
it(265) =< aux(563)
it([271]) =< aux(563)
it(261) =< aux(564)
it(265) =< aux(564)
it([271]) =< aux(564)
it(256) =< aux(565)
it(257) =< aux(565)
it(259) =< aux(565)
it(260) =< aux(565)
it(261) =< aux(565)
it(265) =< aux(565)
aux(426) =< aux(427)
s(5059) =< aux(560)* (1/2)
aux(429) =< aux(423)+1
aux(428) =< aux(423)
aux(432) =< aux(423)-1
aux(441) =< aux(423)* (1/2)+1
aux(426) =< aux(423)
s(4277) =< aux(423)*2+1
s(4173) =< aux(423)*2+1
s(4072) =< aux(423)+1
s(4184) =< aux(423)
aux(429) =< aux(426)+1
aux(428) =< aux(426)
aux(432) =< aux(426)-1
aux(441) =< aux(426)* (1/2)+1
aux(448) =< it(259)*aux(429)
aux(467) =< it(259)*aux(428)
aux(489) =< it(265)*aux(428)
aux(487) =< it(265)*aux(432)
aux(488) =< it(265)*aux(429)
aux(476) =< it(261)*aux(428)
aux(475) =< it(261)*aux(432)
s(4990) =< it(261)*aux(429)
s(4935) =< it(259)*aux(429)
aux(460) =< it(261)*aux(429)
s(4911) =< it(260)*aux(429)
s(4912) =< it(260)*aux(428)
aux(442) =< it(257)*aux(429)
s(4858) =< it(257)*aux(441)
aux(440) =< it(257)*aux(428)
s(4827) =< it(256)*aux(429)
aux(434) =< it(255)*aux(429)
s(4817) =< it(255)*aux(432)
s(4803) =< it(254)*aux(429)
s(4804) =< it(254)*aux(428)
s(4804) =< it(254)*aux(426)
s(5021) =< aux(448)* (1/3)
s(4897) =< aux(448)* (1/2)
s(4960) =< aux(467)* (1/2)
s(5022) =< aux(448)* (1/2)
s(5005) =< aux(489)* (1/2)
s(5004) =< aux(487)* (1/2)
s(5007) =< aux(488)* (1/3)
s(5008) =< aux(488)* (1/2)
s(4992) =< aux(476)* (1/2)
s(4991) =< aux(475)* (1/2)
s(4925) =< aux(460)* (1/3)
s(4926) =< aux(460)* (1/2)
s(4855) =< aux(442)* (1/2)
s(4854) =< aux(440)* (1/2)
s(4818) =< aux(434)* (1/3)
s(4819) =< aux(434)* (1/2)
s(5057) =< aux(554)
s(5059) =< aux(554)
s(4885) =< aux(448)
s(5013) =< aux(448)
s(5014) =< aux(448)
s(5014) =< aux(467)
s(5013) =< aux(467)
s(5013) =< s(4897)
s(5013) =< s(4960)
s(4280) =< s(4184)*2+2
s(4203) =< s(4184)+2
s(4282) =< s(4184)
s(4277) =< s(4184)*2+1
s(4280) =< s(4277)+1
s(5049) =< s(5013)*s(4282)
s(5050) =< s(5013)*s(4203)
s(5051) =< s(5013)*s(4277)
s(5052) =< s(5013)*s(4280)
s(5031) =< s(5052)
s(5032) =< s(5052)
s(5031) =< s(5051)
s(5032) =< s(5051)
s(5032) =< s(5049)
s(5033) =< s(5049)
s(5031) =< s(5050)
s(5031) =< s(5049)
s(5036) =< aux(448)
s(5038) =< aux(448)
s(5038) =< s(4897)
s(5036) =< s(4897)
s(5036) =< s(5021)
s(5038) =< aux(467)
s(5036) =< aux(467)
s(5036) =< s(4960)
s(5022) =< s(4897)
s(5016) =< aux(448)
s(5017) =< aux(448)
s(5019) =< aux(448)
s(5017) =< s(5022)
s(5019) =< s(5022)
s(5016) =< s(5021)
s(5019) =< s(5021)
s(4995) =< aux(489)
s(4996) =< aux(488)
s(4997) =< aux(488)
s(4998) =< aux(488)
s(4999) =< aux(488)
s(5000) =< aux(488)
s(4996) =< aux(489)
s(4997) =< aux(489)
s(4998) =< aux(489)
s(4999) =< aux(489)
s(5000) =< aux(489)
s(5001) =< aux(488)
s(4997) =< s(5008)
s(4998) =< s(5008)
s(5000) =< s(5008)
s(4996) =< s(5007)
s(5000) =< s(5007)
s(4997) =< aux(487)
s(4998) =< aux(487)
s(4999) =< aux(487)
s(5000) =< aux(487)
s(5001) =< aux(487)
s(4996) =< aux(487)
s(4996) =< s(5005)
s(4997) =< s(5005)
s(5000) =< s(5005)
s(4996) =< s(5004)
s(4997) =< s(5004)
s(5000) =< s(5004)
s(5002) =< aux(488)
s(4914) =< aux(476)
s(4983) =< s(4990)
s(4985) =< s(4990)
s(4983) =< aux(476)
s(4985) =< aux(476)
s(4983) =< aux(475)
s(4985) =< aux(475)
s(4988) =< aux(475)
s(4983) =< s(4992)
s(4983) =< s(4991)
s(4981) =< s(4990)
s(4561) =< s(4184)+1
s(4937) =< s(4885)*s(4072)
s(4965) =< s(4885)*s(4282)
s(4973) =< s(4885)*s(4561)
s(4972) =< s(4885)*s(4203)
s(4975) =< s(4885)*s(4277)
s(4940) =< s(4965)* (1/3)
s(4971) =< s(4973)* (1/2)
s(4970) =< s(4965)* (1/2)
s(4976) =< s(4885)*s(4280)
s(4941) =< s(4965)* (1/3)
s(4942) =< s(4973)
s(4940) =< s(4976)
s(4944) =< s(4976)
s(4942) =< s(4976)
s(4945) =< s(4976)
s(4946) =< s(4976)
s(4942) =< s(4965)
s(4947) =< s(4965)
s(4946) =< s(4965)
s(4948) =< s(4965)
s(4979) =< s(4973)
s(4943) =< s(4973)
s(4940) =< s(4973)
s(4944) =< s(4973)
s(4940) =< s(4972)
s(4942) =< s(4972)
s(4945) =< s(4972)
s(4945) =< s(4973)
s(4979) =< s(4965)
s(4943) =< s(4965)
s(4940) =< s(4965)
s(4944) =< s(4965)
s(4943) =< s(4971)
s(4940) =< s(4971)
s(4942) =< s(4971)
s(4943) =< s(4970)
s(4940) =< s(4970)
s(4942) =< s(4970)
s(4581) =< s(4282)+2
s(4977) =< s(4943)*s(4282)
s(4947) =< s(4940)*s(4561)
s(4942) =< s(4979)+aux(448)
s(4978) =< s(4944)*s(4581)
s(4942) =< s(4978)+s(4977)+s(4965)
s(4947) =< s(4978)+s(4977)+s(4965)
s(4949) =< s(4973)
s(4941) =< s(4976)
s(4951) =< s(4976)
s(4949) =< s(4976)
s(4952) =< s(4976)
s(4953) =< s(4976)
s(4941) =< s(4975)
s(4951) =< s(4975)
s(4949) =< s(4975)
s(4952) =< s(4975)
s(4953) =< s(4975)
s(4969) =< s(4937)
s(4950) =< s(4937)
s(4941) =< s(4937)
s(4951) =< s(4937)
s(4949) =< s(4937)
s(4949) =< s(4965)
s(4954) =< s(4965)
s(4953) =< s(4965)
s(4969) =< s(4973)
s(4950) =< s(4973)
s(4941) =< s(4973)
s(4951) =< s(4973)
s(4941) =< s(4972)
s(4949) =< s(4972)
s(4952) =< s(4972)
s(4941) =< s(4965)
s(4952) =< s(4965)
s(4969) =< s(4965)
s(4950) =< s(4965)
s(4951) =< s(4965)
s(4950) =< s(4971)
s(4941) =< s(4971)
s(4949) =< s(4971)
s(4950) =< s(4970)
s(4941) =< s(4970)
s(4949) =< s(4970)
s(4966) =< s(4950)*s(4184)
s(4954) =< s(4941)*s(4561)
s(4949) =< s(4969)+aux(448)
s(4967) =< s(4951)*s(4203)
s(4949) =< s(4967)+s(4966)+s(4965)
s(4954) =< s(4967)+s(4966)+s(4965)
s(4935) =< aux(448)
s(4932) =< s(4935)
s(4957) =< s(4935)
s(4958) =< s(4935)
s(4957) =< aux(448)
s(4958) =< aux(448)
s(4957) =< aux(467)
s(4958) =< aux(467)
s(4959) =< aux(467)
s(4957) =< s(4897)
s(4957) =< s(4960)
s(4930) =< s(4937)
s(4931) =< s(4937)
s(4931) =< s(4937)+aux(448)
s(4933) =< s(4935)
s(4933) =< aux(448)
s(4916) =< aux(460)
s(4917) =< aux(460)
s(4919) =< aux(460)
s(4920) =< aux(460)
s(4916) =< aux(476)
s(4917) =< aux(476)
s(4919) =< aux(476)
s(4920) =< aux(476)
s(4921) =< aux(460)
s(4917) =< s(4926)
s(4920) =< s(4926)
s(4916) =< s(4925)
s(4920) =< s(4925)
s(4902) =< s(4912)
s(4904) =< s(4911)
s(4904) =< s(4912)
s(4900) =< s(4911)
s(4886) =< aux(448)
s(4886) =< s(4897)
s(4893) =< s(4886)*s(4282)
s(4894) =< s(4886)*s(4203)
s(4895) =< s(4886)*s(4277)
s(4896) =< s(4886)*s(4280)
s(4887) =< s(4896)
s(4888) =< s(4896)
s(4887) =< s(4895)
s(4888) =< s(4895)
s(4888) =< s(4893)
s(4889) =< s(4893)
s(4887) =< s(4894)
s(4887) =< s(4893)
s(4832) =< aux(442)
s(4877) =< aux(442)
s(4877) =< s(4855)
s(4858) =< aux(442)
s(4181) =< aux(423)*2+2
s(4182) =< aux(423)+2
s(4867) =< s(4832)*s(4072)
s(4181) =< s(4173)+1
s(4859) =< s(4832)*s(4184)
s(4866) =< s(4832)*s(4182)
s(4869) =< s(4832)*s(4173)
s(4833) =< s(4859)* (1/3)
s(4865) =< s(4867)* (1/2)
s(4864) =< s(4859)* (1/2)
s(4870) =< s(4832)*s(4181)
s(4834) =< s(4859)* (1/3)
s(4835) =< s(4867)
s(4833) =< s(4870)
s(4837) =< s(4870)
s(4835) =< s(4870)
s(4838) =< s(4870)
s(4839) =< s(4870)
s(4835) =< s(4859)
s(4840) =< s(4859)
s(4839) =< s(4859)
s(4841) =< s(4859)
s(4863) =< s(4867)
s(4836) =< s(4867)
s(4833) =< s(4867)
s(4837) =< s(4867)
s(4833) =< s(4866)
s(4835) =< s(4866)
s(4838) =< s(4866)
s(4838) =< s(4867)
s(4863) =< s(4859)
s(4836) =< s(4859)
s(4833) =< s(4859)
s(4837) =< s(4859)
s(4836) =< s(4865)
s(4833) =< s(4865)
s(4835) =< s(4865)
s(4836) =< s(4864)
s(4833) =< s(4864)
s(4835) =< s(4864)
s(4871) =< s(4836)*s(4184)
s(4840) =< s(4833)*s(4072)
s(4835) =< s(4863)+aux(442)
s(4872) =< s(4837)*s(4203)
s(4835) =< s(4872)+s(4871)+s(4859)
s(4840) =< s(4872)+s(4871)+s(4859)
s(4842) =< s(4867)
s(4834) =< s(4870)
s(4844) =< s(4870)
s(4842) =< s(4870)
s(4845) =< s(4870)
s(4846) =< s(4870)
s(4834) =< s(4869)
s(4844) =< s(4869)
s(4842) =< s(4869)
s(4845) =< s(4869)
s(4846) =< s(4869)
s(4834) =< s(4867)
s(4844) =< s(4867)
s(4842) =< s(4859)
s(4847) =< s(4859)
s(4846) =< s(4859)
s(4834) =< s(4866)
s(4842) =< s(4866)
s(4845) =< s(4866)
s(4834) =< s(4859)
s(4845) =< s(4859)
s(4844) =< s(4859)
s(4834) =< s(4865)
s(4842) =< s(4865)
s(4834) =< s(4864)
s(4842) =< s(4864)
s(4860) =< s(4836)*aux(423)
s(4847) =< s(4834)*s(4072)
s(4842) =< s(4863)+aux(442)
s(4861) =< s(4844)*s(4182)
s(4842) =< s(4861)+s(4860)+s(4859)
s(4847) =< s(4861)+s(4860)+s(4859)
s(4850) =< s(4854)
s(4851) =< aux(440)
s(4849) =< s(4858)
s(4850) =< s(4858)
s(4852) =< s(4858)
s(4853) =< s(4858)
s(4852) =< aux(442)
s(4853) =< aux(442)
s(4852) =< aux(440)
s(4853) =< aux(440)
s(4852) =< s(4855)
s(4852) =< s(4854)
s(4820) =< s(4827)
s(4830) =< s(4820)*s(4072)
s(4823) =< s(4830)
s(4824) =< s(4830)
s(4824) =< s(4830)+s(4827)
s(4817) =< s(4819)
s(4807) =< s(4819)
s(4808) =< aux(434)
s(4806) =< s(4817)
s(4807) =< s(4817)
s(4810) =< aux(434)
s(4811) =< aux(434)
s(4813) =< aux(434)
s(4814) =< aux(434)
s(4810) =< s(4817)
s(4811) =< s(4817)
s(4813) =< s(4817)
s(4814) =< s(4817)
s(4811) =< s(4819)
s(4814) =< s(4819)
s(4810) =< s(4818)
s(4814) =< s(4818)
s(4793) =< s(4804)
s(4797) =< s(4803)
s(4797) =< s(4804)
s(4791) =< s(4803)

Unbounded itvars
s(4790) :  sum(254),s(3940)
 * Joined equivalent variables [aux(566),aux(554),s(3900),s(3902)] into aux(566)
 * Joined equivalent variables [aux(567),aux(560)] into aux(567)
 * Joined equivalent variables [aux(460),s(4990)] into aux(460)
 * Joined equivalent variables [s(4921),s(4981)] into s(4921)
 * Joined equivalent variables [s(3901),s(3905),s(5057)] into s(3901)
 * Joined equivalent variables [s(3904),s(5060)] into s(3904)
 * Renamed intermediate variables: 
[ (eq(366,1),s(2882))>>s(5063), (eq(366,1),s(2883))>>s(5064), (eq(366,1),s(2884))>>s(5065), (eq(366,1),s(2885))>>s(5066), (eq(366,1),s(2886))>>s(5067), (eq(366,1),s(2895))>>s(5068), (eq(366,1),s(2896))>>s(5069), (eq(366,1),s(2897))>>s(5070), (eq(366,1),s(2888))>>s(5071), (eq(366,1),s(2889))>>s(5072), (eq(366,1),s(2890))>>s(5073), (eq(366,1),s(2891))>>s(5074), (eq(366,1),s(2900))>>s(5075), (eq(366,1),s(2893))>>s(5076), (eq(366,1),aux(247))>>s(5077), (eq(366,1),aux(248))>>s(5078), (eq(366,1),aux(249))>>s(5079), (eq(366,1),aux(250))>>s(5080), (eq(366,1),aux(251))>>s(5081), (eq(366,1),aux(252))>>s(5082), (eq(366,1),s(2861))>>s(5083), (eq(366,1),s(2903))>>s(5084), (eq(366,1),s(2904))>>s(5085), (eq(366,1),s(2866))>>s(5086), (eq(366,1),s(2906))>>s(5087), (eq(366,1),s(2867))>>s(5088), (eq(366,1),s(2868))>>s(5089), (eq(366,1),s(2909))>>s(5090), (eq(366,1),s(2910))>>s(5091), (eq(366,1),s(2911))>>s(5092), (eq(366,1),s(2912))>>s(5093), (eq(366,1),s(2913))>>s(5094), (eq(366,1),s(2914))>>s(5095), (eq(366,1),s(2915))>>s(5096), (eq(366,1),s(2916))>>s(5097), (eq(366,1),s(2917))>>s(5098), (eq(366,1),s(2870))>>s(5099), (eq(366,1),s(2871))>>s(5100), (eq(366,1),s(2920))>>s(5101), (eq(366,1),s(2872))>>s(5102), (eq(366,1),s(2922))>>s(5103), (eq(366,1),s(2923))>>s(5104), (eq(366,1),s(2924))>>s(5105), (eq(366,1),s(2925))>>s(5106), (eq(366,1),s(2926))>>s(5107), (eq(366,1),s(2927))>>s(5108), (eq(366,1),s(2928))>>s(5109), (eq(366,1),s(2929))>>s(5110), (eq(366,1),s(2930))>>s(5111), (eq(366,1),s(2931))>>s(5112), (eq(366,1),s(2932))>>s(5113), (eq(366,1),s(2933))>>s(5114), (eq(366,1),s(2934))>>s(5115), (eq(366,1),s(2935))>>s(5116), (eq(366,1),s(2936))>>s(5117), (eq(366,1),s(2937))>>s(5118), (eq(366,1),s(2938))>>s(5119), (eq(366,1),s(2939))>>s(5120), (eq(366,1),s(2940))>>s(5121), (eq(366,1),s(2941))>>s(5122), (eq(366,1),s(2942))>>s(5123), (eq(366,1),s(2943))>>s(5124), (eq(366,1),s(2944))>>s(5125), (eq(366,1),s(2945))>>s(5126), (eq(366,1),s(2946))>>s(5127), (eq(366,1),s(2947))>>s(5128), (eq(366,1),s(2948))>>s(5129), (eq(366,1),s(2949))>>s(5130), (eq(366,1),s(2950))>>s(5131), (eq(366,1),s(2951))>>s(5132), (eq(366,1),s(2952))>>s(5133), (eq(366,1),s(2953))>>s(5134), (eq(366,1),s(2954))>>s(5135), (eq(366,1),s(2955))>>s(5136), (eq(366,1),s(2956))>>s(5137), (eq(366,1),s(2957))>>s(5138), (eq(366,1),s(2958))>>s(5139), (eq(366,1),s(2959))>>s(5140), (eq(366,1),s(2880))>>s(5141), (eq(366,1),s(2961))>>s(5142), (eq(366,1),s(2962))>>s(5143), (eq(366,1),s(2963))>>s(5144), (eq(366,1),s(2964))>>s(5145), (eq(366,1),s(2965))>>s(5146), (eq(366,1),s(2966))>>s(5147), (eq(366,1),s(2967))>>s(5148), (eq(366,1),s(2968))>>s(5149), (eq(366,1),s(2969))>>s(5150), (eq(366,1),s(2869))>>s(5151), (eq(366,1),s(2971))>>s(5152), (eq(366,1),s(2873))>>s(5153), (eq(366,1),s(2874))>>s(5154), (eq(366,1),s(2974))>>s(5155), (eq(366,1),s(2975))>>s(5156), (eq(366,1),s(2976))>>s(5157), (eq(366,1),s(2977))>>s(5158), (eq(366,1),s(2879))>>s(5159), (eq(366,1),s(2875))>>s(5160), (eq(366,1),s(2876))>>s(5161), (eq(366,1),s(2877))>>s(5162), (eq(366,1),s(2878))>>s(5163), (eq(366,1),s(2881))>>s(5164)]

#### Simplifying cost structure of CE 366 
 * Joined equivalent variables [s(5074),s(5067)] into s(5074)
 * Joined equivalent variables [s(5074),s(5087)] into s(5074)
 * Renamed intermediate variables: 
[ (eq(376,1),s(1233))>>s(5165), (eq(376,1),s(1234))>>s(5166), (eq(376,1),s(1235))>>s(5167), (eq(376,1),s(1236))>>s(5168), (eq(376,1),s(1237))>>s(5169), (eq(376,1),s(1238))>>s(5170), (eq(376,1),s(1239))>>s(5171), (eq(376,1),s(1240))>>s(5172), (eq(376,1),s(1241))>>s(5173), (eq(376,1),s(1242))>>s(5174), (eq(376,1),s(1243))>>s(5175), (eq(376,1),s(1244))>>s(5176), (eq(376,1),s(1245))>>s(5177), (eq(376,1),s(1246))>>s(5178), (eq(376,1),s(1247))>>s(5179), (eq(376,1),s(1248))>>s(5180), (eq(376,1),s(1249))>>s(5181), (eq(376,1),s(1250))>>s(5182), (eq(376,1),s(1251))>>s(5183), (eq(376,1),s(1252))>>s(5184), (eq(376,1),s(1253))>>s(5185), (eq(376,1),s(1254))>>s(5186)]

#### Simplifying cost structure of CE 376 
 * Renamed intermediate variables: 
[ (eq(377,1),s(3839))>>s(5187), (eq(377,1),s(3840))>>s(5188), (eq(377,1),s(3841))>>s(5189), (eq(377,1),s(3842))>>s(5190), (eq(377,1),s(3843))>>s(5191), (eq(377,1),aux(391))>>s(5192), (eq(377,1),aux(392))>>s(5193), (eq(377,1),aux(393))>>s(5194), (eq(377,1),aux(394))>>s(5195), (eq(377,1),aux(395))>>s(5196), (eq(377,1),aux(396))>>s(5197), (eq(377,1),aux(397))>>s(5198), (eq(377,1),s(3821))>>s(5199), (eq(377,1),s(3822))>>s(5200), (eq(377,1),s(3823))>>s(5201), (eq(377,1),s(3824))>>s(5202), (eq(377,1),s(3825))>>s(5203), (eq(377,1),s(3826))>>s(5204), (eq(377,1),s(3827))>>s(5205), (eq(377,1),s(3828))>>s(5206), (eq(377,1),s(3829))>>s(5207), (eq(377,1),s(3830))>>s(5208), (eq(377,1),s(3831))>>s(5209), (eq(377,1),s(3832))>>s(5210), (eq(377,1),s(3833))>>s(5211), (eq(377,1),s(3834))>>s(5212), (eq(377,1),s(3835))>>s(5213), (eq(377,1),s(3848))>>s(5214), (eq(377,1),s(3849))>>s(5215), (eq(377,1),s(3852))>>s(5216), (eq(377,1),s(3853))>>s(5217), (eq(377,1),s(3854))>>s(5218), (eq(377,1),s(3855))>>s(5219), (eq(377,1),s(3856))>>s(5220), (eq(377,1),s(3857))>>s(5221), (eq(377,1),s(3858))>>s(5222), (eq(377,1),s(3859))>>s(5223), (eq(377,1),s(3860))>>s(5224), (eq(377,1),s(3861))>>s(5225), (eq(377,1),s(3871))>>s(5226), (eq(377,1),s(3872))>>s(5227), (eq(377,1),s(3875))>>s(5228), (eq(377,1),s(3876))>>s(5229), (eq(377,1),s(3877))>>s(5230), (eq(377,1),s(3878))>>s(5231), (eq(377,1),s(3879))>>s(5232), (eq(377,1),s(3880))>>s(5233), (eq(377,1),s(3881))>>s(5234), (eq(377,1),s(3882))>>s(5235), (eq(377,1),s(3883))>>s(5236), (eq(377,1),s(3884))>>s(5237), (eq(377,1),s(3885))>>s(5238), (eq(377,1),s(3886))>>s(5239), (eq(377,1),s(3887))>>s(5240), (eq(377,1),s(3888))>>s(5241), (eq(377,1),s(3889))>>s(5242)]

#### Simplifying cost structure of CE 377 
 * Renamed intermediate variables: 
[ (eq(378,1),s(3431))>>s(5243), (eq(378,1),s(3432))>>s(5244), (eq(378,1),s(3435))>>s(5245), (eq(378,1),s(3437))>>s(5246), (eq(378,1),aux(323))>>s(5247), (eq(378,1),aux(324))>>s(5248), (eq(378,1),aux(325))>>s(5249), (eq(378,1),aux(326))>>s(5250), (eq(378,1),s(3424))>>s(5251), (eq(378,1),s(3425))>>s(5252), (eq(378,1),s(3427))>>s(5253), (eq(378,1),s(3439))>>s(5254), (eq(378,1),s(3440))>>s(5255), (eq(378,1),s(3441))>>s(5256), (eq(378,1),s(3442))>>s(5257), (eq(378,1),s(3443))>>s(5258), (eq(378,1),s(3444))>>s(5259), (eq(378,1),s(3445))>>s(5260), (eq(378,1),s(3446))>>s(5261), (eq(378,1),s(3447))>>s(5262), (eq(378,1),s(3448))>>s(5263), (eq(378,1),s(3449))>>s(5264), (eq(378,1),s(3450))>>s(5265), (eq(378,1),s(3451))>>s(5266), (eq(378,1),s(3426))>>s(5267)]

#### Simplifying cost structure of CE 378 
 * Joined equivalent variables [s(5083),s(5084),s(5085),s(5086),s(5089),s(5090),s(5091),s(5096),s(5097),s(5112),s(5116),s(5120),s(5122),s(5123),s(5124),s(5125),s(5126),s(5127),s(5131),s(5133),s(5134),s(5135),s(5136),s(5137),s(5138),s(5141),s(5142),s(5143),s(5144),s(5145),s(5146),s(5147),s(5148),s(5149),s(5151),s(5157),s(5158),s(5159),s(5162),s(5163),s(5164),s(5173),s(5174),s(5175),s(5176),s(5177),s(5178),s(5179),s(5180),s(5181),s(5182),s(5183),s(5184),s(5185),s(5186),s(5200),s(5202),s(5203),s(5204),s(5205),s(5206),s(5207),s(5208),s(5209),s(5210),s(5211),s(5212),s(5213),s(5214),s(5215),s(5216),s(5217),s(5218),s(5219),s(5220),s(5221),s(5222),s(5223),s(5224),s(5225),s(5226),s(5227),s(5228),s(5229),s(5230),s(5231),s(5232),s(5233),s(5235),s(5237),s(5238),s(5239),s(5240),s(5241),s(5242),s(5251),s(5252),s(5253),s(5254),s(5255),s(5256),s(5257),s(5258),s(5259),s(5261),s(5263),s(5264),s(5265),s(5266),s(5267)] into s(5083)

#### Simplifying cost structure of chain [multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])] 
 * Joined equivalent variables [aux(570),aux(566)] into aux(570)
 * Joined equivalent variables [aux(569),s(4790)] into aux(569)
 * Joined equivalent variables [aux(571),aux(554),s(3900),s(3902)] into aux(571)
 * Joined equivalent variables [aux(572),aux(560)] into aux(572)
 * Joined equivalent variables [aux(460),s(4990)] into aux(460)
 * Joined equivalent variables [s(4921),s(4981)] into s(4921)
 * Joined equivalent variables [s(3901),s(3905),s(5057)] into s(3901)
 * Joined equivalent variables [s(3904),s(5060)] into s(3904)
 * Renamed intermediate variables: 
[ (eq(379,1),s(3461))>>s(5268), (eq(379,1),s(3462))>>s(5269), (eq(379,1),s(3465))>>s(5270), (eq(379,1),s(3467))>>s(5271), (eq(379,1),aux(327))>>s(5272), (eq(379,1),aux(328))>>s(5273), (eq(379,1),aux(329))>>s(5274), (eq(379,1),aux(330))>>s(5275), (eq(379,1),s(3454))>>s(5276), (eq(379,1),s(3455))>>s(5277), (eq(379,1),s(3468))>>s(5278), (eq(379,1),s(3469))>>s(5279), (eq(379,1),s(3470))>>s(5280), (eq(379,1),s(3456))>>s(5281), (eq(379,1),s(3472))>>s(5282), (eq(379,1),s(3473))>>s(5283), (eq(379,1),s(3474))>>s(5284), (eq(379,1),s(3475))>>s(5285), (eq(379,1),s(3476))>>s(5286), (eq(379,1),s(3477))>>s(5287), (eq(379,1),s(3478))>>s(5288), (eq(379,1),s(3479))>>s(5289), (eq(379,1),s(3480))>>s(5290), (eq(379,1),s(3481))>>s(5291), (eq(379,1),s(3457))>>s(5292)]

#### Simplifying cost structure of CE 379 

#### Simplifying cost structure of chain [multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])] 
 * Joined equivalent variables [aux(576),aux(553)] into aux(576)
 * Joined equivalent variables [aux(578),aux(427),aux(551),aux(552),aux(562),aux(563),aux(572),aux(573)] into aux(578)
 * Joined equivalent variables [s(4790),s(5276),s(5277),s(5279),s(5281),s(5282),s(5283),s(5284),s(5285),s(5286),s(5287),s(5288),s(5289),s(5290),s(5291),s(5292)] into s(4790)
 * Joined equivalent variables [aux(557),aux(558),aux(571)] into aux(557)
 * Joined equivalent variables [it(261),it(265)] into it(261)
 * Joined equivalent variables [it(257),it(259)] into it(257)
 * Joined equivalent variables [it(254),s(3904)] into it(254)
 * Joined equivalent variables [aux(476),aux(489)] into aux(476)
 * Joined equivalent variables [aux(475),aux(487)] into aux(475)
 * Joined equivalent variables [aux(460),aux(488)] into aux(460)
 * Joined equivalent variables [aux(442),aux(448)] into aux(442)
 * Joined equivalent variables [aux(440),aux(467)] into aux(440)
 * Joined equivalent variables [s(4992),s(5005)] into s(4992)
 * Joined equivalent variables [s(4991),s(5004)] into s(4991)
 * Joined equivalent variables [s(4925),s(5007)] into s(4925)
 * Joined equivalent variables [s(4926),s(5008)] into s(4926)
 * Joined equivalent variables [s(4855),s(4897)] into s(4855)
 * Joined equivalent variables [s(4854),s(4960)] into s(4854)
 * Joined equivalent variables [s(4851),s(4959)] into s(4851)
 * Joined equivalent variables [s(4832),s(4885)] into s(4832)
 * Joined equivalent variables [s(4921),s(5002)] into s(4921)
 * Joined equivalent variables [s(4985),s(4999)] into s(4985)
 * Joined equivalent variables [s(4914),s(4995)] into s(4914)
 * Joined equivalent variables [s(4867),s(4937)] into s(4867)
 * Joined equivalent variables [s(4877),s(4886)] into s(4877)
 * Joined equivalent variables [aux(580),aux(554),s(3900),s(3902)] into aux(580)
 * Joined equivalent variables [aux(581),aux(560)] into aux(581)
 * Joined equivalent variables [aux(460),s(4990)] into aux(460)
 * Joined equivalent variables [s(4921),s(4981)] into s(4921)
 * Joined equivalent variables [s(3901),s(3905),s(5057)] into s(3901)
 * Joined equivalent variables [s(3904),s(5060)] into s(3904)
 * Renamed intermediate variables: 
[ (eq(367,1),s(2201))>>s(5293), (eq(367,1),s(2202))>>s(5294), (eq(367,1),s(2203))>>s(5295), (eq(367,1),s(2205))>>s(5296), (eq(367,1),s(2206))>>s(5297), (eq(367,1),s(2208))>>s(5298), (eq(367,1),s(2210))>>s(5299), (eq(367,1),s(2211))>>s(5300), (eq(367,1),s(2212))>>s(5301), (eq(367,1),s(2216))>>s(5302), (eq(367,1),s(2215))>>s(5303), (eq(367,1),aux(206))>>s(5304), (eq(367,1),aux(207))>>s(5305), (eq(367,1),aux(208))>>s(5306), (eq(367,1),aux(209))>>s(5307), (eq(367,1),aux(210))>>s(5308), (eq(367,1),s(2196))>>s(5309), (eq(367,1),s(2197))>>s(5310), (eq(367,1),s(2217))>>s(5311), (eq(367,1),s(2218))>>s(5312), (eq(367,1),s(2200))>>s(5313), (eq(367,1),s(2220))>>s(5314), (eq(367,1),s(2221))>>s(5315), (eq(367,1),s(2222))>>s(5316), (eq(367,1),s(2223))>>s(5317), (eq(367,1),s(2224))>>s(5318), (eq(367,1),s(2225))>>s(5319), (eq(367,1),s(2226))>>s(5320), (eq(367,1),s(2227))>>s(5321), (eq(367,1),s(2228))>>s(5322), (eq(367,1),s(2229))>>s(5323), (eq(367,1),s(2230))>>s(5324), (eq(367,1),s(2231))>>s(5325), (eq(367,1),s(2232))>>s(5326), (eq(367,1),s(2233))>>s(5327), (eq(367,1),s(2234))>>s(5328), (eq(367,1),s(2235))>>s(5329), (eq(367,1),s(2236))>>s(5330), (eq(367,1),s(2237))>>s(5331), (eq(367,1),s(2238))>>s(5332), (eq(367,1),s(2239))>>s(5333), (eq(367,1),s(2240))>>s(5334), (eq(367,1),s(2241))>>s(5335), (eq(367,1),s(2242))>>s(5336), (eq(367,1),s(2243))>>s(5337), (eq(367,1),s(2244))>>s(5338), (eq(367,1),s(2245))>>s(5339), (eq(367,1),s(2246))>>s(5340), (eq(367,1),s(2247))>>s(5341), (eq(367,1),s(2248))>>s(5342), (eq(367,1),s(2249))>>s(5343), (eq(367,1),s(2250))>>s(5344), (eq(367,1),s(2251))>>s(5345), (eq(367,1),s(2252))>>s(5346), (eq(367,1),s(2253))>>s(5347), (eq(367,1),s(2254))>>s(5348), (eq(367,1),s(2255))>>s(5349), (eq(367,1),s(2256))>>s(5350), (eq(367,1),s(2257))>>s(5351), (eq(367,1),s(2258))>>s(5352), (eq(367,1),s(2259))>>s(5353), (eq(367,1),s(2260))>>s(5354), (eq(367,1),s(2261))>>s(5355), (eq(367,1),s(2262))>>s(5356), (eq(367,1),s(2263))>>s(5357), (eq(367,1),s(2264))>>s(5358), (eq(367,1),s(2265))>>s(5359), (eq(367,1),s(2266))>>s(5360), (eq(367,1),s(2267))>>s(5361), (eq(367,1),s(2268))>>s(5362), (eq(367,1),s(2269))>>s(5363), (eq(367,1),s(2270))>>s(5364), (eq(367,1),s(2199))>>s(5365), (eq(367,1),s(2271))>>s(5366)]

#### Simplifying cost structure of CE 367 
 * Joined equivalent variables [s(5307),s(5297)] into s(5307)
 * Joined equivalent variables [s(5307),s(5311)] into s(5307)
 * Renamed intermediate variables: 
[ (eq(380,1),s(3518))>>s(5367), (eq(380,1),s(3522))>>s(5368), (eq(380,1),s(3524))>>s(5369), (eq(380,1),s(3526))>>s(5370), (eq(380,1),s(3527))>>s(5371), (eq(380,1),aux(335))>>s(5372), (eq(380,1),aux(336))>>s(5373), (eq(380,1),aux(337))>>s(5374), (eq(380,1),aux(338))>>s(5375), (eq(380,1),s(3513))>>s(5376), (eq(380,1),s(3514))>>s(5377), (eq(380,1),s(3517))>>s(5378), (eq(380,1),s(3529))>>s(5379), (eq(380,1),s(3530))>>s(5380), (eq(380,1),s(3531))>>s(5381), (eq(380,1),s(3532))>>s(5382), (eq(380,1),s(3533))>>s(5383), (eq(380,1),s(3534))>>s(5384), (eq(380,1),s(3535))>>s(5385), (eq(380,1),s(3536))>>s(5386), (eq(380,1),s(3537))>>s(5387), (eq(380,1),s(3538))>>s(5388), (eq(380,1),s(3539))>>s(5389), (eq(380,1),s(3540))>>s(5390), (eq(380,1),s(3541))>>s(5391), (eq(380,1),s(3516))>>s(5392)]

#### Simplifying cost structure of CE 380 
 * Renamed intermediate variables: 
[ (eq(381,1),s(3488))>>s(5393), (eq(381,1),s(3492))>>s(5394), (eq(381,1),s(3494))>>s(5395), (eq(381,1),s(3496))>>s(5396), (eq(381,1),s(3497))>>s(5397), (eq(381,1),aux(331))>>s(5398), (eq(381,1),aux(332))>>s(5399), (eq(381,1),aux(333))>>s(5400), (eq(381,1),aux(334))>>s(5401), (eq(381,1),s(3483))>>s(5402), (eq(381,1),s(3484))>>s(5403), (eq(381,1),s(3498))>>s(5404), (eq(381,1),s(3499))>>s(5405), (eq(381,1),s(3500))>>s(5406), (eq(381,1),s(3486))>>s(5407), (eq(381,1),s(3502))>>s(5408), (eq(381,1),s(3503))>>s(5409), (eq(381,1),s(3504))>>s(5410), (eq(381,1),s(3505))>>s(5411), (eq(381,1),s(3506))>>s(5412), (eq(381,1),s(3507))>>s(5413), (eq(381,1),s(3508))>>s(5414), (eq(381,1),s(3509))>>s(5415), (eq(381,1),s(3510))>>s(5416), (eq(381,1),s(3511))>>s(5417), (eq(381,1),s(3487))>>s(5418)]

#### Simplifying cost structure of CE 381 
 * Joined equivalent variables [s(5309),s(5310),s(5313),s(5314),s(5315),s(5320),s(5321),s(5336),s(5340),s(5344),s(5346),s(5347),s(5348),s(5349),s(5350),s(5351),s(5355),s(5357),s(5358),s(5359),s(5360),s(5361),s(5362),s(5365),s(5366),s(5376),s(5377),s(5378),s(5379),s(5380),s(5381),s(5382),s(5383),s(5384),s(5386),s(5388),s(5389),s(5390),s(5391),s(5392),s(5402),s(5403),s(5405),s(5407),s(5408),s(5409),s(5410),s(5411),s(5412),s(5413),s(5414),s(5415),s(5416),s(5417),s(5418)] into s(5309)

#### Simplifying cost structure of chain [multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])] 
 * Joined equivalent variables [aux(584),aux(580)] into aux(584)
 * Joined equivalent variables [aux(583),s(4790)] into aux(583)
 * Renamed intermediate variables: 
[ (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(551))>>s(5419), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(552))>>s(5420), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(556))>>s(5421), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(553))>>s(5422), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(423))>>s(5423), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(557))>>s(5424), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(559))>>s(5425), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(558))>>s(5426), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(562))>>s(5427), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(581))>>s(5428), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(427))>>s(5429), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(582))>>s(5430), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(564))>>s(5431), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(563))>>s(5432), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(555))>>s(5433), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(565))>>s(5434), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),it([272]))>>s(5435), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(584))>>s(5436), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(3904))>>s(5437), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),it([271]))>>s(5438), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(3903))>>s(5439), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(3901))>>s(5440), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),it(254))>>s(5441), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),it(255))>>s(5442), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),it(260))>>s(5443), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),it(261))>>s(5444), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),it(265))>>s(5445), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),it(256))>>s(5446), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),it(257))>>s(5447), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),it(259))>>s(5448), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(426))>>s(5449), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5059))>>s(5450), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(429))>>s(5451), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(428))>>s(5452), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(432))>>s(5453), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(441))>>s(5454), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4277))>>s(5455), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4173))>>s(5456), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4072))>>s(5457), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4184))>>s(5458), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(448))>>s(5459), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(467))>>s(5460), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(489))>>s(5461), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(487))>>s(5462), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(488))>>s(5463), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(476))>>s(5464), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(475))>>s(5465), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(460))>>s(5466), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4935))>>s(5467), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4911))>>s(5468), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4912))>>s(5469), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(442))>>s(5470), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4858))>>s(5471), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(440))>>s(5472), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4827))>>s(5473), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(434))>>s(5474), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4817))>>s(5475), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4803))>>s(5476), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4804))>>s(5477), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5021))>>s(5478), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4897))>>s(5479), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4960))>>s(5480), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5022))>>s(5481), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5005))>>s(5482), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5004))>>s(5483), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5007))>>s(5484), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5008))>>s(5485), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4992))>>s(5486), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4991))>>s(5487), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4925))>>s(5488), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4926))>>s(5489), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4855))>>s(5490), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4854))>>s(5491), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4818))>>s(5492), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4819))>>s(5493), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4885))>>s(5494), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5013))>>s(5495), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5014))>>s(5496), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4280))>>s(5497), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4203))>>s(5498), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4282))>>s(5499), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5049))>>s(5500), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5050))>>s(5501), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5051))>>s(5502), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5052))>>s(5503), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5031))>>s(5504), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5032))>>s(5505), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5033))>>s(5506), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5036))>>s(5507), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5038))>>s(5508), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5016))>>s(5509), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5017))>>s(5510), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5019))>>s(5511), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4995))>>s(5512), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4996))>>s(5513), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4997))>>s(5514), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4998))>>s(5515), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4999))>>s(5516), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5000))>>s(5517), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5001))>>s(5518), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5002))>>s(5519), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4914))>>s(5520), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4983))>>s(5521), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4985))>>s(5522), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4988))>>s(5523), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4921))>>s(5524), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4561))>>s(5525), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4937))>>s(5526), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4965))>>s(5527), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4973))>>s(5528), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4972))>>s(5529), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4975))>>s(5530), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4940))>>s(5531), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4971))>>s(5532), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4970))>>s(5533), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4976))>>s(5534), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4941))>>s(5535), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4942))>>s(5536), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4944))>>s(5537), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4945))>>s(5538), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4946))>>s(5539), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4947))>>s(5540), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4948))>>s(5541), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4979))>>s(5542), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4943))>>s(5543), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4581))>>s(5544), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4977))>>s(5545), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4978))>>s(5546), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4949))>>s(5547), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4951))>>s(5548), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4952))>>s(5549), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4953))>>s(5550), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4969))>>s(5551), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4950))>>s(5552), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4954))>>s(5553), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4966))>>s(5554), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4967))>>s(5555), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4932))>>s(5556), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4957))>>s(5557), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4958))>>s(5558), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4959))>>s(5559), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4930))>>s(5560), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4931))>>s(5561), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4933))>>s(5562), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4916))>>s(5563), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4917))>>s(5564), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4919))>>s(5565), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4920))>>s(5566), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4902))>>s(5567), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4904))>>s(5568), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4900))>>s(5569), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4886))>>s(5570), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4893))>>s(5571), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4894))>>s(5572), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4895))>>s(5573), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4896))>>s(5574), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4887))>>s(5575), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4888))>>s(5576), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4889))>>s(5577), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4832))>>s(5578), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4877))>>s(5579), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4181))>>s(5580), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4182))>>s(5581), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4867))>>s(5582), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4859))>>s(5583), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4866))>>s(5584), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4869))>>s(5585), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4833))>>s(5586), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4865))>>s(5587), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4864))>>s(5588), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4870))>>s(5589), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4834))>>s(5590), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4835))>>s(5591), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4837))>>s(5592), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4838))>>s(5593), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4839))>>s(5594), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4840))>>s(5595), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4841))>>s(5596), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4863))>>s(5597), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4836))>>s(5598), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4871))>>s(5599), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4872))>>s(5600), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4842))>>s(5601), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4844))>>s(5602), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4845))>>s(5603), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4846))>>s(5604), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4847))>>s(5605), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4860))>>s(5606), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4861))>>s(5607), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4850))>>s(5608), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4851))>>s(5609), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4849))>>s(5610), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4852))>>s(5611), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4853))>>s(5612), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4820))>>s(5613), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4830))>>s(5614), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4823))>>s(5615), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4824))>>s(5616), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4807))>>s(5617), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4808))>>s(5618), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4806))>>s(5619), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4810))>>s(5620), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4811))>>s(5621), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4813))>>s(5622), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4814))>>s(5623), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4793))>>s(5624), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4797))>>s(5625), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4791))>>s(5626), (ch([multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(583))>>s(5627)]
 * Renamed intermediate variables: 
[ (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(423))>>s(5628), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(556))>>s(5629), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(559))>>s(5630), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(555))>>s(5631), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(574))>>s(5632), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(575))>>s(5633), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(576))>>s(5634), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(577))>>s(5635), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(578))>>s(5636), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(579))>>s(5637), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(557))>>s(5638), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(564))>>s(5639), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(565))>>s(5640), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),it([272]))>>s(5641), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),it(254))>>s(5642), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),it([271]))>>s(5643), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(3903))>>s(5644), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(3901))>>s(5645), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),it(255))>>s(5646), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),it(260))>>s(5647), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),it(261))>>s(5648), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),it(256))>>s(5649), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),it(257))>>s(5650), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(426))>>s(5651), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5059))>>s(5652), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(429))>>s(5653), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(428))>>s(5654), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(432))>>s(5655), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(441))>>s(5656), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4277))>>s(5657), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4173))>>s(5658), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4072))>>s(5659), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4184))>>s(5660), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(442))>>s(5661), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(440))>>s(5662), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(476))>>s(5663), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(475))>>s(5664), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(460))>>s(5665), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4935))>>s(5666), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4911))>>s(5667), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4912))>>s(5668), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4858))>>s(5669), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4827))>>s(5670), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(434))>>s(5671), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4817))>>s(5672), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4803))>>s(5673), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4804))>>s(5674), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5021))>>s(5675), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4855))>>s(5676), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4854))>>s(5677), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5022))>>s(5678), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4992))>>s(5679), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4991))>>s(5680), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4925))>>s(5681), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4926))>>s(5682), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4818))>>s(5683), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4819))>>s(5684), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4832))>>s(5685), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5013))>>s(5686), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5014))>>s(5687), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4280))>>s(5688), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4203))>>s(5689), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4282))>>s(5690), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5049))>>s(5691), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5050))>>s(5692), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5051))>>s(5693), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5052))>>s(5694), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5031))>>s(5695), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5032))>>s(5696), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5033))>>s(5697), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5036))>>s(5698), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5038))>>s(5699), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5016))>>s(5700), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5017))>>s(5701), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5019))>>s(5702), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4914))>>s(5703), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4996))>>s(5704), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4997))>>s(5705), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4998))>>s(5706), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4985))>>s(5707), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5000))>>s(5708), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5001))>>s(5709), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4921))>>s(5710), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4983))>>s(5711), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4988))>>s(5712), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4561))>>s(5713), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4867))>>s(5714), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4965))>>s(5715), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4973))>>s(5716), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4972))>>s(5717), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4975))>>s(5718), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4940))>>s(5719), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4971))>>s(5720), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4970))>>s(5721), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4976))>>s(5722), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4941))>>s(5723), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4942))>>s(5724), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4944))>>s(5725), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4945))>>s(5726), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4946))>>s(5727), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4947))>>s(5728), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4948))>>s(5729), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4979))>>s(5730), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4943))>>s(5731), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4581))>>s(5732), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4977))>>s(5733), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4978))>>s(5734), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4949))>>s(5735), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4951))>>s(5736), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4952))>>s(5737), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4953))>>s(5738), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4969))>>s(5739), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4950))>>s(5740), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4954))>>s(5741), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4966))>>s(5742), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4967))>>s(5743), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4932))>>s(5744), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4957))>>s(5745), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4958))>>s(5746), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4851))>>s(5747), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4930))>>s(5748), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4931))>>s(5749), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4933))>>s(5750), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4916))>>s(5751), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4917))>>s(5752), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4919))>>s(5753), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4920))>>s(5754), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4902))>>s(5755), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4904))>>s(5756), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4900))>>s(5757), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4877))>>s(5758), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4893))>>s(5759), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4894))>>s(5760), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4895))>>s(5761), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4896))>>s(5762), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4887))>>s(5763), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4888))>>s(5764), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4889))>>s(5765), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4181))>>s(5766), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4182))>>s(5767), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4859))>>s(5768), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4866))>>s(5769), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4869))>>s(5770), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4833))>>s(5771), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4865))>>s(5772), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4864))>>s(5773), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4870))>>s(5774), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4834))>>s(5775), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4835))>>s(5776), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4837))>>s(5777), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4838))>>s(5778), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4839))>>s(5779), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4840))>>s(5780), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4841))>>s(5781), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4863))>>s(5782), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4836))>>s(5783), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4871))>>s(5784), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4872))>>s(5785), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4842))>>s(5786), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4844))>>s(5787), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4845))>>s(5788), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4846))>>s(5789), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4847))>>s(5790), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4860))>>s(5791), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4861))>>s(5792), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4850))>>s(5793), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4849))>>s(5794), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4852))>>s(5795), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4853))>>s(5796), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4820))>>s(5797), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4830))>>s(5798), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4823))>>s(5799), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4824))>>s(5800), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4807))>>s(5801), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4808))>>s(5802), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4806))>>s(5803), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4810))>>s(5804), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4811))>>s(5805), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4813))>>s(5806), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4814))>>s(5807), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4793))>>s(5808), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4797))>>s(5809), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4791))>>s(5810), (ch([multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4790))>>s(5811)]
 * Renamed intermediate variables: 
[ (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(551))>>s(5812), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(552))>>s(5813), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(556))>>s(5814), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(553))>>s(5815), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(423))>>s(5816), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(557))>>s(5817), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(559))>>s(5818), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(558))>>s(5819), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(562))>>s(5820), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(567))>>s(5821), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(427))>>s(5822), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(568))>>s(5823), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(564))>>s(5824), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(563))>>s(5825), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(555))>>s(5826), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(565))>>s(5827), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),it([272]))>>s(5828), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(570))>>s(5829), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(3904))>>s(5830), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),it([271]))>>s(5831), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(3903))>>s(5832), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(3901))>>s(5833), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),it(254))>>s(5834), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),it(255))>>s(5835), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),it(260))>>s(5836), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),it(261))>>s(5837), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),it(265))>>s(5838), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),it(256))>>s(5839), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),it(257))>>s(5840), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),it(259))>>s(5841), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(426))>>s(5842), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5059))>>s(5843), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(429))>>s(5844), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(428))>>s(5845), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(432))>>s(5846), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(441))>>s(5847), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4277))>>s(5848), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4173))>>s(5849), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4072))>>s(5850), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4184))>>s(5851), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(448))>>s(5852), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(467))>>s(5853), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(489))>>s(5854), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(487))>>s(5855), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(488))>>s(5856), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(476))>>s(5857), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(475))>>s(5858), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(460))>>s(5859), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4935))>>s(5860), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4911))>>s(5861), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4912))>>s(5862), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(442))>>s(5863), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4858))>>s(5864), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(440))>>s(5865), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4827))>>s(5866), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(434))>>s(5867), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4817))>>s(5868), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4803))>>s(5869), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4804))>>s(5870), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5021))>>s(5871), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4897))>>s(5872), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4960))>>s(5873), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5022))>>s(5874), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5005))>>s(5875), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5004))>>s(5876), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5007))>>s(5877), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5008))>>s(5878), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4992))>>s(5879), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4991))>>s(5880), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4925))>>s(5881), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4926))>>s(5882), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4855))>>s(5883), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4854))>>s(5884), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4818))>>s(5885), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4819))>>s(5886), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4885))>>s(5887), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5013))>>s(5888), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5014))>>s(5889), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4280))>>s(5890), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4203))>>s(5891), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4282))>>s(5892), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5049))>>s(5893), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5050))>>s(5894), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5051))>>s(5895), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5052))>>s(5896), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5031))>>s(5897), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5032))>>s(5898), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5033))>>s(5899), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5036))>>s(5900), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5038))>>s(5901), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5016))>>s(5902), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5017))>>s(5903), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5019))>>s(5904), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4995))>>s(5905), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4996))>>s(5906), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4997))>>s(5907), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4998))>>s(5908), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4999))>>s(5909), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5000))>>s(5910), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5001))>>s(5911), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(5002))>>s(5912), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4914))>>s(5913), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4983))>>s(5914), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4985))>>s(5915), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4988))>>s(5916), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4921))>>s(5917), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4561))>>s(5918), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4937))>>s(5919), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4965))>>s(5920), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4973))>>s(5921), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4972))>>s(5922), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4975))>>s(5923), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4940))>>s(5924), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4971))>>s(5925), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4970))>>s(5926), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4976))>>s(5927), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4941))>>s(5928), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4942))>>s(5929), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4944))>>s(5930), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4945))>>s(5931), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4946))>>s(5932), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4947))>>s(5933), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4948))>>s(5934), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4979))>>s(5935), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4943))>>s(5936), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4581))>>s(5937), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4977))>>s(5938), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4978))>>s(5939), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4949))>>s(5940), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4951))>>s(5941), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4952))>>s(5942), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4953))>>s(5943), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4969))>>s(5944), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4950))>>s(5945), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4954))>>s(5946), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4966))>>s(5947), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4967))>>s(5948), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4932))>>s(5949), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4957))>>s(5950), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4958))>>s(5951), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4959))>>s(5952), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4930))>>s(5953), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4931))>>s(5954), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4933))>>s(5955), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4916))>>s(5956), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4917))>>s(5957), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4919))>>s(5958), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4920))>>s(5959), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4902))>>s(5960), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4904))>>s(5961), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4900))>>s(5962), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4886))>>s(5963), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4893))>>s(5964), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4894))>>s(5965), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4895))>>s(5966), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4896))>>s(5967), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4887))>>s(5968), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4888))>>s(5969), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4889))>>s(5970), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4832))>>s(5971), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4877))>>s(5972), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4181))>>s(5973), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4182))>>s(5974), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4867))>>s(5975), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4859))>>s(5976), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4866))>>s(5977), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4869))>>s(5978), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4833))>>s(5979), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4865))>>s(5980), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4864))>>s(5981), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4870))>>s(5982), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4834))>>s(5983), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4835))>>s(5984), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4837))>>s(5985), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4838))>>s(5986), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4839))>>s(5987), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4840))>>s(5988), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4841))>>s(5989), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4863))>>s(5990), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4836))>>s(5991), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4871))>>s(5992), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4872))>>s(5993), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4842))>>s(5994), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4844))>>s(5995), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4845))>>s(5996), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4846))>>s(5997), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4847))>>s(5998), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4860))>>s(5999), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4861))>>s(6000), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4850))>>s(6001), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4851))>>s(6002), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4849))>>s(6003), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4852))>>s(6004), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4853))>>s(6005), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4820))>>s(6006), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4830))>>s(6007), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4823))>>s(6008), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4824))>>s(6009), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4807))>>s(6010), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4808))>>s(6011), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4806))>>s(6012), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4810))>>s(6013), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4811))>>s(6014), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4813))>>s(6015), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4814))>>s(6016), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4793))>>s(6017), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4797))>>s(6018), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),s(4791))>>s(6019), (ch([multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]),aux(569))>>s(6020)]
 * Joined equivalent variables [aux(585),s(5419),s(5812)] into aux(585)
 * Joined equivalent variables [aux(586),s(5420),s(5813)] into aux(586)
 * Joined equivalent variables [aux(587),s(5421),s(5814)] into aux(587)
 * Joined equivalent variables [aux(588),s(5422),s(5815)] into aux(588)
 * Joined equivalent variables [aux(589),s(5436),s(5829)] into aux(589)
 * Joined equivalent variables [aux(590),s(5423),s(5816)] into aux(590)
 * Joined equivalent variables [aux(591),s(5424),s(5817)] into aux(591)
 * Joined equivalent variables [aux(592),s(5425),s(5818)] into aux(592)
 * Joined equivalent variables [aux(593),s(5426),s(5819)] into aux(593)
 * Joined equivalent variables [aux(594),s(5427),s(5820)] into aux(594)
 * Joined equivalent variables [aux(595),s(5428),s(5821)] into aux(595)
 * Joined equivalent variables [aux(596),s(5429),s(5822)] into aux(596)
 * Joined equivalent variables [aux(597),s(5430),s(5823)] into aux(597)
 * Joined equivalent variables [aux(598),s(5431),s(5824)] into aux(598)
 * Joined equivalent variables [aux(599),s(5432),s(5825)] into aux(599)
 * Joined equivalent variables [aux(601),s(5434),s(5827)] into aux(601)
 * Joined equivalent variables [s(5627),s(5811),s(6020)] into s(5627)
 * Joined equivalent variables [s(5450),s(5843)] into s(5450)
 * Joined equivalent variables [s(5457),s(5850)] into s(5457)
 * Joined equivalent variables [s(5458),s(5851)] into s(5458)
 * Joined equivalent variables [s(5449),s(5842)] into s(5449)
 * Joined equivalent variables [s(5456),s(5849)] into s(5456)
 * Joined equivalent variables [s(5581),s(5974)] into s(5581)
 * Joined equivalent variables [s(5441),s(5834)] into s(5441)
 * Joined equivalent variables [s(5445),s(5838)] into s(5445)
 * Joined equivalent variables [s(5444),s(5837)] into s(5444)
 * Joined equivalent variables [s(5438),s(5831)] into s(5438)
 * Joined equivalent variables [s(5442),s(5835)] into s(5442)
 * Joined equivalent variables [s(5443),s(5836)] into s(5443)
 * Joined equivalent variables [s(5440),s(5833)] into s(5440)
 * Joined equivalent variables [s(5439),s(5832)] into s(5439)
 * Joined equivalent variables [s(5448),s(5841)] into s(5448)
 * Joined equivalent variables [s(5447),s(5840)] into s(5447)
 * Joined equivalent variables [s(5446),s(5839)] into s(5446)
 * Joined equivalent variables [s(5437),s(5830)] into s(5437)
 * Joined equivalent variables [s(5433),s(5631),s(5826)] into s(5433)
 * Joined equivalent variables [s(5451),s(5844)] into s(5451)
 * Joined equivalent variables [s(5452),s(5845)] into s(5452)
 * Joined equivalent variables [s(5453),s(5846)] into s(5453)
 * Joined equivalent variables [s(5454),s(5847)] into s(5454)
 * Joined equivalent variables [s(5498),s(5891)] into s(5498)
 * Joined equivalent variables [s(5499),s(5892)] into s(5499)
 * Joined equivalent variables [s(5455),s(5848)] into s(5455)
 * Joined equivalent variables [s(5525),s(5918)] into s(5525)
 * Joined equivalent variables [s(5580),s(5973)] into s(5580)
 * Joined equivalent variables [s(5435),s(5828)] into s(5435)
 * Joined equivalent variables [s(5459),s(5852)] into s(5459)
 * Joined equivalent variables [s(5460),s(5853)] into s(5460)
 * Joined equivalent variables [s(5461),s(5854)] into s(5461)
 * Joined equivalent variables [s(5462),s(5855)] into s(5462)
 * Joined equivalent variables [s(5463),s(5856)] into s(5463)
 * Joined equivalent variables [s(5464),s(5857)] into s(5464)
 * Joined equivalent variables [s(5465),s(5858)] into s(5465)
 * Joined equivalent variables [s(5466),s(5859)] into s(5466)
 * Joined equivalent variables [s(5468),s(5861)] into s(5468)
 * Joined equivalent variables [s(5469),s(5862)] into s(5469)
 * Joined equivalent variables [s(5470),s(5863)] into s(5470)
 * Joined equivalent variables [s(5472),s(5865)] into s(5472)
 * Joined equivalent variables [s(5473),s(5866)] into s(5473)
 * Joined equivalent variables [s(5474),s(5867)] into s(5474)
 * Joined equivalent variables [s(5476),s(5869)] into s(5476)
 * Joined equivalent variables [s(5477),s(5870)] into s(5477)
 * Joined equivalent variables [s(5497),s(5890)] into s(5497)
 * Joined equivalent variables [s(5544),s(5937)] into s(5544)
 * Joined equivalent variables [s(5467),s(5860)] into s(5467)
 * Joined equivalent variables [s(5471),s(5864)] into s(5471)
 * Joined equivalent variables [s(5478),s(5871)] into s(5478)
 * Joined equivalent variables [s(5479),s(5872)] into s(5479)
 * Joined equivalent variables [s(5480),s(5873)] into s(5480)
 * Joined equivalent variables [s(5482),s(5875)] into s(5482)
 * Joined equivalent variables [s(5483),s(5876)] into s(5483)
 * Joined equivalent variables [s(5484),s(5877)] into s(5484)
 * Joined equivalent variables [s(5485),s(5878)] into s(5485)
 * Joined equivalent variables [s(5486),s(5879)] into s(5486)
 * Joined equivalent variables [s(5487),s(5880)] into s(5487)
 * Joined equivalent variables [s(5488),s(5881)] into s(5488)
 * Joined equivalent variables [s(5489),s(5882)] into s(5489)
 * Joined equivalent variables [s(5490),s(5883)] into s(5490)
 * Joined equivalent variables [s(5491),s(5884)] into s(5491)
 * Joined equivalent variables [s(5492),s(5885)] into s(5492)
 * Joined equivalent variables [s(5493),s(5886)] into s(5493)
 * Joined equivalent variables [s(5494),s(5887)] into s(5494)
 * Joined equivalent variables [s(5496),s(5889)] into s(5496)
 * Joined equivalent variables [s(5559),s(5952)] into s(5559)
 * Joined equivalent variables [s(5512),s(5905)] into s(5512)
 * Joined equivalent variables [s(5516),s(5909)] into s(5516)
 * Joined equivalent variables [s(5518),s(5911)] into s(5518)
 * Joined equivalent variables [s(5519),s(5912)] into s(5519)
 * Joined equivalent variables [s(5520),s(5913)] into s(5520)
 * Joined equivalent variables [s(5522),s(5915)] into s(5522)
 * Joined equivalent variables [s(5565),s(5958)] into s(5565)
 * Joined equivalent variables [s(5523),s(5916)] into s(5523)
 * Joined equivalent variables [s(5524),s(5917)] into s(5524)
 * Joined equivalent variables [s(5569),s(5962)] into s(5569)
 * Joined equivalent variables [s(5568),s(5961)] into s(5568)
 * Joined equivalent variables [s(5567),s(5960)] into s(5567)
 * Joined equivalent variables [s(5578),s(5971)] into s(5578)
 * Joined equivalent variables [s(5609),s(6002)] into s(5609)
 * Joined equivalent variables [s(5613),s(6006)] into s(5613)
 * Joined equivalent variables [s(5618),s(6011)] into s(5618)
 * Joined equivalent variables [s(5626),s(6019)] into s(5626)
 * Joined equivalent variables [s(5625),s(6018)] into s(5625)
 * Joined equivalent variables [s(5624),s(6017)] into s(5624)
 * Joined equivalent variables [s(5475),s(5868)] into s(5475)
 * Joined equivalent variables [s(5481),s(5874)] into s(5481)
 * Joined equivalent variables [s(5526),s(5919)] into s(5526)
 * Joined equivalent variables [s(5527),s(5920)] into s(5527)
 * Joined equivalent variables [s(5528),s(5921)] into s(5528)
 * Joined equivalent variables [s(5529),s(5922)] into s(5529)
 * Joined equivalent variables [s(5530),s(5923)] into s(5530)
 * Joined equivalent variables [s(5534),s(5927)] into s(5534)
 * Joined equivalent variables [s(5582),s(5975)] into s(5582)
 * Joined equivalent variables [s(5583),s(5976)] into s(5583)
 * Joined equivalent variables [s(5584),s(5977)] into s(5584)
 * Joined equivalent variables [s(5585),s(5978)] into s(5585)
 * Joined equivalent variables [s(5589),s(5982)] into s(5589)
 * Joined equivalent variables [s(5614),s(6007)] into s(5614)
 * Joined equivalent variables [s(5558),s(5951)] into s(5558)
 * Joined equivalent variables [s(5557),s(5950)] into s(5557)
 * Joined equivalent variables [s(5507),s(5900)] into s(5507)
 * Joined equivalent variables [s(5508),s(5901)] into s(5508)
 * Joined equivalent variables [s(5495),s(5888)] into s(5495)
 * Joined equivalent variables [s(5562),s(5955)] into s(5562)
 * Joined equivalent variables [s(5509),s(5902)] into s(5509)
 * Joined equivalent variables [s(5570),s(5963)] into s(5570)
 * Joined equivalent variables [s(5513),s(5906)] into s(5513)
 * Joined equivalent variables [s(5517),s(5910)] into s(5517)
 * Joined equivalent variables [s(5514),s(5907)] into s(5514)
 * Joined equivalent variables [s(5515),s(5908)] into s(5515)
 * Joined equivalent variables [s(5521),s(5914)] into s(5521)
 * Joined equivalent variables [s(5563),s(5956)] into s(5563)
 * Joined equivalent variables [s(5566),s(5959)] into s(5566)
 * Joined equivalent variables [s(5564),s(5957)] into s(5564)
 * Joined equivalent variables [s(5556),s(5949)] into s(5556)
 * Joined equivalent variables [s(5612),s(6005)] into s(5612)
 * Joined equivalent variables [s(5611),s(6004)] into s(5611)
 * Joined equivalent variables [s(5579),s(5972)] into s(5579)
 * Joined equivalent variables [s(5610),s(6003)] into s(5610)
 * Joined equivalent variables [s(5608),s(6001)] into s(5608)
 * Joined equivalent variables [s(5500),s(5893)] into s(5500)
 * Joined equivalent variables [s(5501),s(5894)] into s(5501)
 * Joined equivalent variables [s(5502),s(5895)] into s(5502)
 * Joined equivalent variables [s(5503),s(5896)] into s(5503)
 * Joined equivalent variables [s(5532),s(5925)] into s(5532)
 * Joined equivalent variables [s(5533),s(5926)] into s(5533)
 * Joined equivalent variables [s(5561),s(5954)] into s(5561)
 * Joined equivalent variables [s(5571),s(5964)] into s(5571)
 * Joined equivalent variables [s(5572),s(5965)] into s(5572)
 * Joined equivalent variables [s(5573),s(5966)] into s(5573)
 * Joined equivalent variables [s(5574),s(5967)] into s(5574)
 * Joined equivalent variables [s(5587),s(5980)] into s(5587)
 * Joined equivalent variables [s(5588),s(5981)] into s(5588)
 * Joined equivalent variables [s(5616),s(6009)] into s(5616)
 * Joined equivalent variables [s(5511),s(5904)] into s(5511)
 * Joined equivalent variables [s(5510),s(5903)] into s(5510)
 * Joined equivalent variables [s(5622),s(6015)] into s(5622)
 * Joined equivalent variables [s(5620),s(6013)] into s(5620)
 * Joined equivalent variables [s(5623),s(6016)] into s(5623)
 * Joined equivalent variables [s(5621),s(6014)] into s(5621)
 * Joined equivalent variables [s(5619),s(6012)] into s(5619)
 * Joined equivalent variables [s(5617),s(6010)] into s(5617)
 * Joined equivalent variables [s(5560),s(5953)] into s(5560)
 * Joined equivalent variables [s(5548),s(5941)] into s(5548)
 * Joined equivalent variables [s(5541),s(5934)] into s(5541)
 * Joined equivalent variables [s(5537),s(5930)] into s(5537)
 * Joined equivalent variables [s(5549),s(5942)] into s(5549)
 * Joined equivalent variables [s(5550),s(5943)] into s(5550)
 * Joined equivalent variables [s(5539),s(5932)] into s(5539)
 * Joined equivalent variables [s(5538),s(5931)] into s(5538)
 * Joined equivalent variables [s(5602),s(5995)] into s(5602)
 * Joined equivalent variables [s(5592),s(5985)] into s(5592)
 * Joined equivalent variables [s(5593),s(5986)] into s(5593)
 * Joined equivalent variables [s(5596),s(5989)] into s(5596)
 * Joined equivalent variables [s(5603),s(5996)] into s(5603)
 * Joined equivalent variables [s(5604),s(5997)] into s(5604)
 * Joined equivalent variables [s(5594),s(5987)] into s(5594)
 * Joined equivalent variables [s(5615),s(6008)] into s(5615)
 * Joined equivalent variables [s(5551),s(5944)] into s(5551)
 * Joined equivalent variables [s(5542),s(5935)] into s(5542)
 * Joined equivalent variables [s(5597),s(5990)] into s(5597)
 * Joined equivalent variables [s(5535),s(5928)] into s(5535)
 * Joined equivalent variables [s(5531),s(5924)] into s(5531)
 * Joined equivalent variables [s(5546),s(5939)] into s(5546)
 * Joined equivalent variables [s(5555),s(5948)] into s(5555)
 * Joined equivalent variables [s(5590),s(5983)] into s(5590)
 * Joined equivalent variables [s(5586),s(5979)] into s(5586)
 * Joined equivalent variables [s(5600),s(5993)] into s(5600)
 * Joined equivalent variables [s(5607),s(6000)] into s(5607)
 * Joined equivalent variables [s(5506),s(5899)] into s(5506)
 * Joined equivalent variables [s(5504),s(5897)] into s(5504)
 * Joined equivalent variables [s(5505),s(5898)] into s(5505)
 * Joined equivalent variables [s(5552),s(5945)] into s(5552)
 * Joined equivalent variables [s(5543),s(5936)] into s(5543)
 * Joined equivalent variables [s(5577),s(5970)] into s(5577)
 * Joined equivalent variables [s(5575),s(5968)] into s(5575)
 * Joined equivalent variables [s(5576),s(5969)] into s(5576)
 * Joined equivalent variables [s(5598),s(5991)] into s(5598)
 * Joined equivalent variables [s(5545),s(5938)] into s(5545)
 * Joined equivalent variables [s(5554),s(5947)] into s(5554)
 * Joined equivalent variables [s(5599),s(5992)] into s(5599)
 * Joined equivalent variables [s(5606),s(5999)] into s(5606)
 * Joined equivalent variables [s(5540),s(5933)] into s(5540)
 * Joined equivalent variables [s(5536),s(5929)] into s(5536)
 * Joined equivalent variables [s(5553),s(5946)] into s(5553)
 * Joined equivalent variables [s(5547),s(5940)] into s(5547)
 * Joined equivalent variables [s(5595),s(5988)] into s(5595)
 * Joined equivalent variables [s(5591),s(5984)] into s(5591)
 * Joined equivalent variables [s(5601),s(5994)] into s(5601)
 * Joined equivalent variables [s(5605),s(5998)] into s(5605)

#### Cost of chains of evaluate(A,B,C,D,E,F,G,H):
* Chain [274]: 17
  with precondition: [A=1,B=0,D=1,E=1,F=0,H=1,C=G,C>=0] 

* Chain [273]: 12*s(3890)+18*s(3892)+10*s(3895)+10*s(3896)+6*s(3898)+28
  Such that:aux(399) =< B
s(3893) =< B+1
aux(400) =< A
s(3890) =< aux(400)
s(3892) =< aux(399)
s(3895) =< aux(400)
s(3896) =< aux(400)
s(3898) =< aux(399)
s(3895) =< s(3893)
s(3898) =< s(3893)
s(3896) =< aux(399)

  with precondition: [D=1,E=1,F=0,H=1,A>=2,C>=0,G>=0,B+1>=A] 

* Chain [272]: 16*s(3901)+17
  Such that:s(3900) =< A
s(3901) =< s(3900)

  with precondition: [D=1,H=1,A=B+1,A=E,A=F+1,C=G,A>=2,C+1>=A] 

* Chain [271]: 10*s(3903)+6*s(3904)+6*s(3905)+17
  Such that:s(3902) =< A
s(3904) =< B
s(3903) =< B/2
s(3905) =< s(3902)
s(3903) =< s(3902)

  with precondition: [D=1,H=1,A=E,B=F,C=G,A>=2,B+2>=2*A,C>=A] 

* Chain [multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])]: 73*it(254)+73*it(255)+71*it(256)+142*it(257)+355*it(259)+73*it(260)+146*it(261)+73*it(265)+17*it([271])+17*it([272])+674*s(4790)+16*s(4791)+32*s(4793)+81*s(4797)+22*s(4806)+10*s(4807)+74*s(4808)+15*s(4810)+39*s(4811)+12*s(4813)+15*s(4814)+221*s(4820)+33*s(4823)+11*s(4824)+165*s(4832)+11*s(4833)+11*s(4834)+11*s(4835)+22*s(4836)+11*s(4837)+10*s(4838)+10*s(4839)+9*s(4840)+18*s(4841)+11*s(4842)+11*s(4844)+10*s(4845)+10*s(4846)+9*s(4847)+22*s(4849)+10*s(4850)+58*s(4851)+54*s(4852)+27*s(4853)+9*s(4877)+529*s(4885)+9*s(4886)+10*s(4887)+10*s(4888)+9*s(4889)+16*s(4900)+32*s(4902)+81*s(4904)+64*s(4914)+15*s(4916)+39*s(4917)+12*s(4919)+15*s(4920)+68*s(4921)+33*s(4930)+11*s(4931)+64*s(4932)+81*s(4933)+11*s(4940)+11*s(4941)+11*s(4942)+11*s(4943)+11*s(4944)+10*s(4945)+10*s(4946)+9*s(4947)+18*s(4948)+11*s(4949)+11*s(4950)+11*s(4951)+10*s(4952)+10*s(4953)+9*s(4954)+54*s(4957)+27*s(4958)+52*s(4959)+16*s(4981)+54*s(4983)+27*s(4985)+52*s(4988)+32*s(4995)+15*s(4996)+24*s(4997)+15*s(4998)+12*s(4999)+15*s(5000)+52*s(5001)+16*s(5002)+42*s(5013)+82*s(5014)+15*s(5016)+39*s(5017)+15*s(5019)+10*s(5031)+10*s(5032)+9*s(5033)+30*s(5036)+15*s(5038)+22*s(5057)+10*s(5059)+6*s(5060)+0
  Such that:aux(423) =< A-D
aux(427) =< B-D/2+1/2
it([271]) =< B/2
it([272]) =< D/2+1/2
aux(551) =< -2*A+4*B
aux(552) =< -2*A+4*C
aux(553) =< -A+2*B
aux(554) =< A
aux(555) =< A-B
aux(556) =< 2*A-2*D
aux(557) =< A/2
aux(558) =< A/3
aux(559) =< 2/5*A
aux(560) =< B
aux(562) =< 2*B-D
aux(563) =< C
aux(564) =< 2*C-D
aux(565) =< D/2
it(254) =< aux(551)
it(255) =< aux(551)
it(260) =< aux(551)
it(261) =< aux(551)
it(265) =< aux(551)
it([271]) =< aux(551)
it(254) =< aux(552)
it(255) =< aux(552)
it(260) =< aux(552)
it(261) =< aux(552)
it(265) =< aux(552)
it([271]) =< aux(552)
it(255) =< aux(553)
it([271]) =< aux(553)
it([272]) =< aux(554)
it([272]) =< aux(555)
it(261) =< aux(556)
it(265) =< aux(556)
it(256) =< aux(557)
it(257) =< aux(557)
it(259) =< aux(557)
it(260) =< aux(557)
it(261) =< aux(557)
it(265) =< aux(557)
it([271]) =< aux(557)
it([272]) =< aux(557)
it(255) =< aux(558)
it(260) =< aux(559)
it(261) =< aux(559)
it(265) =< aux(559)
it(257) =< aux(560)
it(259) =< aux(560)
it(260) =< aux(560)
it(261) =< aux(560)
it(265) =< aux(560)
it([271]) =< aux(560)
it([272]) =< aux(560)
s(5060) =< aux(560)
it(265) =< aux(562)
it([271]) =< aux(562)
it(259) =< aux(563)
it(260) =< aux(563)
it(261) =< aux(563)
it(265) =< aux(563)
it([271]) =< aux(563)
it(261) =< aux(564)
it(265) =< aux(564)
it([271]) =< aux(564)
it(256) =< aux(565)
it(257) =< aux(565)
it(259) =< aux(565)
it(260) =< aux(565)
it(261) =< aux(565)
it(265) =< aux(565)
aux(426) =< aux(427)
s(5059) =< aux(560)* (1/2)
aux(429) =< aux(423)+1
aux(428) =< aux(423)
aux(432) =< aux(423)-1
aux(441) =< aux(423)* (1/2)+1
aux(426) =< aux(423)
s(4277) =< aux(423)*2+1
s(4173) =< aux(423)*2+1
s(4072) =< aux(423)+1
s(4184) =< aux(423)
aux(429) =< aux(426)+1
aux(428) =< aux(426)
aux(432) =< aux(426)-1
aux(441) =< aux(426)* (1/2)+1
aux(448) =< it(259)*aux(429)
aux(467) =< it(259)*aux(428)
aux(489) =< it(265)*aux(428)
aux(487) =< it(265)*aux(432)
aux(488) =< it(265)*aux(429)
aux(476) =< it(261)*aux(428)
aux(475) =< it(261)*aux(432)
s(4990) =< it(261)*aux(429)
s(4935) =< it(259)*aux(429)
aux(460) =< it(261)*aux(429)
s(4911) =< it(260)*aux(429)
s(4912) =< it(260)*aux(428)
aux(442) =< it(257)*aux(429)
s(4858) =< it(257)*aux(441)
aux(440) =< it(257)*aux(428)
s(4827) =< it(256)*aux(429)
aux(434) =< it(255)*aux(429)
s(4817) =< it(255)*aux(432)
s(4803) =< it(254)*aux(429)
s(4804) =< it(254)*aux(428)
s(4804) =< it(254)*aux(426)
s(5021) =< aux(448)* (1/3)
s(4897) =< aux(448)* (1/2)
s(4960) =< aux(467)* (1/2)
s(5022) =< aux(448)* (1/2)
s(5005) =< aux(489)* (1/2)
s(5004) =< aux(487)* (1/2)
s(5007) =< aux(488)* (1/3)
s(5008) =< aux(488)* (1/2)
s(4992) =< aux(476)* (1/2)
s(4991) =< aux(475)* (1/2)
s(4925) =< aux(460)* (1/3)
s(4926) =< aux(460)* (1/2)
s(4855) =< aux(442)* (1/2)
s(4854) =< aux(440)* (1/2)
s(4818) =< aux(434)* (1/3)
s(4819) =< aux(434)* (1/2)
s(5057) =< aux(554)
s(5059) =< aux(554)
s(4885) =< aux(448)
s(5013) =< aux(448)
s(5014) =< aux(448)
s(5014) =< aux(467)
s(5013) =< aux(467)
s(5013) =< s(4897)
s(5013) =< s(4960)
s(4280) =< s(4184)*2+2
s(4203) =< s(4184)+2
s(4282) =< s(4184)
s(4277) =< s(4184)*2+1
s(4280) =< s(4277)+1
s(5049) =< s(5013)*s(4282)
s(5050) =< s(5013)*s(4203)
s(5051) =< s(5013)*s(4277)
s(5052) =< s(5013)*s(4280)
s(5031) =< s(5052)
s(5032) =< s(5052)
s(5031) =< s(5051)
s(5032) =< s(5051)
s(5032) =< s(5049)
s(5033) =< s(5049)
s(5031) =< s(5050)
s(5031) =< s(5049)
s(5036) =< aux(448)
s(5038) =< aux(448)
s(5038) =< s(4897)
s(5036) =< s(4897)
s(5036) =< s(5021)
s(5038) =< aux(467)
s(5036) =< aux(467)
s(5036) =< s(4960)
s(5022) =< s(4897)
s(5016) =< aux(448)
s(5017) =< aux(448)
s(5019) =< aux(448)
s(5017) =< s(5022)
s(5019) =< s(5022)
s(5016) =< s(5021)
s(5019) =< s(5021)
s(4995) =< aux(489)
s(4996) =< aux(488)
s(4997) =< aux(488)
s(4998) =< aux(488)
s(4999) =< aux(488)
s(5000) =< aux(488)
s(4996) =< aux(489)
s(4997) =< aux(489)
s(4998) =< aux(489)
s(4999) =< aux(489)
s(5000) =< aux(489)
s(5001) =< aux(488)
s(4997) =< s(5008)
s(4998) =< s(5008)
s(5000) =< s(5008)
s(4996) =< s(5007)
s(5000) =< s(5007)
s(4997) =< aux(487)
s(4998) =< aux(487)
s(4999) =< aux(487)
s(5000) =< aux(487)
s(5001) =< aux(487)
s(4996) =< aux(487)
s(4996) =< s(5005)
s(4997) =< s(5005)
s(5000) =< s(5005)
s(4996) =< s(5004)
s(4997) =< s(5004)
s(5000) =< s(5004)
s(5002) =< aux(488)
s(4914) =< aux(476)
s(4983) =< s(4990)
s(4985) =< s(4990)
s(4983) =< aux(476)
s(4985) =< aux(476)
s(4983) =< aux(475)
s(4985) =< aux(475)
s(4988) =< aux(475)
s(4983) =< s(4992)
s(4983) =< s(4991)
s(4981) =< s(4990)
s(4561) =< s(4184)+1
s(4937) =< s(4885)*s(4072)
s(4965) =< s(4885)*s(4282)
s(4973) =< s(4885)*s(4561)
s(4972) =< s(4885)*s(4203)
s(4975) =< s(4885)*s(4277)
s(4940) =< s(4965)* (1/3)
s(4971) =< s(4973)* (1/2)
s(4970) =< s(4965)* (1/2)
s(4976) =< s(4885)*s(4280)
s(4941) =< s(4965)* (1/3)
s(4942) =< s(4973)
s(4940) =< s(4976)
s(4944) =< s(4976)
s(4942) =< s(4976)
s(4945) =< s(4976)
s(4946) =< s(4976)
s(4942) =< s(4965)
s(4947) =< s(4965)
s(4946) =< s(4965)
s(4948) =< s(4965)
s(4979) =< s(4973)
s(4943) =< s(4973)
s(4940) =< s(4973)
s(4944) =< s(4973)
s(4940) =< s(4972)
s(4942) =< s(4972)
s(4945) =< s(4972)
s(4945) =< s(4973)
s(4979) =< s(4965)
s(4943) =< s(4965)
s(4940) =< s(4965)
s(4944) =< s(4965)
s(4943) =< s(4971)
s(4940) =< s(4971)
s(4942) =< s(4971)
s(4943) =< s(4970)
s(4940) =< s(4970)
s(4942) =< s(4970)
s(4581) =< s(4282)+2
s(4977) =< s(4943)*s(4282)
s(4947) =< s(4940)*s(4561)
s(4942) =< s(4979)+aux(448)
s(4978) =< s(4944)*s(4581)
s(4942) =< s(4978)+s(4977)+s(4965)
s(4947) =< s(4978)+s(4977)+s(4965)
s(4949) =< s(4973)
s(4941) =< s(4976)
s(4951) =< s(4976)
s(4949) =< s(4976)
s(4952) =< s(4976)
s(4953) =< s(4976)
s(4941) =< s(4975)
s(4951) =< s(4975)
s(4949) =< s(4975)
s(4952) =< s(4975)
s(4953) =< s(4975)
s(4969) =< s(4937)
s(4950) =< s(4937)
s(4941) =< s(4937)
s(4951) =< s(4937)
s(4949) =< s(4937)
s(4949) =< s(4965)
s(4954) =< s(4965)
s(4953) =< s(4965)
s(4969) =< s(4973)
s(4950) =< s(4973)
s(4941) =< s(4973)
s(4951) =< s(4973)
s(4941) =< s(4972)
s(4949) =< s(4972)
s(4952) =< s(4972)
s(4941) =< s(4965)
s(4952) =< s(4965)
s(4969) =< s(4965)
s(4950) =< s(4965)
s(4951) =< s(4965)
s(4950) =< s(4971)
s(4941) =< s(4971)
s(4949) =< s(4971)
s(4950) =< s(4970)
s(4941) =< s(4970)
s(4949) =< s(4970)
s(4966) =< s(4950)*s(4184)
s(4954) =< s(4941)*s(4561)
s(4949) =< s(4969)+aux(448)
s(4967) =< s(4951)*s(4203)
s(4949) =< s(4967)+s(4966)+s(4965)
s(4954) =< s(4967)+s(4966)+s(4965)
s(4935) =< aux(448)
s(4932) =< s(4935)
s(4957) =< s(4935)
s(4958) =< s(4935)
s(4957) =< aux(448)
s(4958) =< aux(448)
s(4957) =< aux(467)
s(4958) =< aux(467)
s(4959) =< aux(467)
s(4957) =< s(4897)
s(4957) =< s(4960)
s(4930) =< s(4937)
s(4931) =< s(4937)
s(4931) =< s(4937)+aux(448)
s(4933) =< s(4935)
s(4933) =< aux(448)
s(4916) =< aux(460)
s(4917) =< aux(460)
s(4919) =< aux(460)
s(4920) =< aux(460)
s(4916) =< aux(476)
s(4917) =< aux(476)
s(4919) =< aux(476)
s(4920) =< aux(476)
s(4921) =< aux(460)
s(4917) =< s(4926)
s(4920) =< s(4926)
s(4916) =< s(4925)
s(4920) =< s(4925)
s(4902) =< s(4912)
s(4904) =< s(4911)
s(4904) =< s(4912)
s(4900) =< s(4911)
s(4886) =< aux(448)
s(4886) =< s(4897)
s(4893) =< s(4886)*s(4282)
s(4894) =< s(4886)*s(4203)
s(4895) =< s(4886)*s(4277)
s(4896) =< s(4886)*s(4280)
s(4887) =< s(4896)
s(4888) =< s(4896)
s(4887) =< s(4895)
s(4888) =< s(4895)
s(4888) =< s(4893)
s(4889) =< s(4893)
s(4887) =< s(4894)
s(4887) =< s(4893)
s(4832) =< aux(442)
s(4877) =< aux(442)
s(4877) =< s(4855)
s(4858) =< aux(442)
s(4181) =< aux(423)*2+2
s(4182) =< aux(423)+2
s(4867) =< s(4832)*s(4072)
s(4181) =< s(4173)+1
s(4859) =< s(4832)*s(4184)
s(4866) =< s(4832)*s(4182)
s(4869) =< s(4832)*s(4173)
s(4833) =< s(4859)* (1/3)
s(4865) =< s(4867)* (1/2)
s(4864) =< s(4859)* (1/2)
s(4870) =< s(4832)*s(4181)
s(4834) =< s(4859)* (1/3)
s(4835) =< s(4867)
s(4833) =< s(4870)
s(4837) =< s(4870)
s(4835) =< s(4870)
s(4838) =< s(4870)
s(4839) =< s(4870)
s(4835) =< s(4859)
s(4840) =< s(4859)
s(4839) =< s(4859)
s(4841) =< s(4859)
s(4863) =< s(4867)
s(4836) =< s(4867)
s(4833) =< s(4867)
s(4837) =< s(4867)
s(4833) =< s(4866)
s(4835) =< s(4866)
s(4838) =< s(4866)
s(4838) =< s(4867)
s(4863) =< s(4859)
s(4836) =< s(4859)
s(4833) =< s(4859)
s(4837) =< s(4859)
s(4836) =< s(4865)
s(4833) =< s(4865)
s(4835) =< s(4865)
s(4836) =< s(4864)
s(4833) =< s(4864)
s(4835) =< s(4864)
s(4871) =< s(4836)*s(4184)
s(4840) =< s(4833)*s(4072)
s(4835) =< s(4863)+aux(442)
s(4872) =< s(4837)*s(4203)
s(4835) =< s(4872)+s(4871)+s(4859)
s(4840) =< s(4872)+s(4871)+s(4859)
s(4842) =< s(4867)
s(4834) =< s(4870)
s(4844) =< s(4870)
s(4842) =< s(4870)
s(4845) =< s(4870)
s(4846) =< s(4870)
s(4834) =< s(4869)
s(4844) =< s(4869)
s(4842) =< s(4869)
s(4845) =< s(4869)
s(4846) =< s(4869)
s(4834) =< s(4867)
s(4844) =< s(4867)
s(4842) =< s(4859)
s(4847) =< s(4859)
s(4846) =< s(4859)
s(4834) =< s(4866)
s(4842) =< s(4866)
s(4845) =< s(4866)
s(4834) =< s(4859)
s(4845) =< s(4859)
s(4844) =< s(4859)
s(4834) =< s(4865)
s(4842) =< s(4865)
s(4834) =< s(4864)
s(4842) =< s(4864)
s(4860) =< s(4836)*aux(423)
s(4847) =< s(4834)*s(4072)
s(4842) =< s(4863)+aux(442)
s(4861) =< s(4844)*s(4182)
s(4842) =< s(4861)+s(4860)+s(4859)
s(4847) =< s(4861)+s(4860)+s(4859)
s(4850) =< s(4854)
s(4851) =< aux(440)
s(4849) =< s(4858)
s(4850) =< s(4858)
s(4852) =< s(4858)
s(4853) =< s(4858)
s(4852) =< aux(442)
s(4853) =< aux(442)
s(4852) =< aux(440)
s(4853) =< aux(440)
s(4852) =< s(4855)
s(4852) =< s(4854)
s(4820) =< s(4827)
s(4830) =< s(4820)*s(4072)
s(4823) =< s(4830)
s(4824) =< s(4830)
s(4824) =< s(4830)+s(4827)
s(4817) =< s(4819)
s(4807) =< s(4819)
s(4808) =< aux(434)
s(4806) =< s(4817)
s(4807) =< s(4817)
s(4810) =< aux(434)
s(4811) =< aux(434)
s(4813) =< aux(434)
s(4814) =< aux(434)
s(4810) =< s(4817)
s(4811) =< s(4817)
s(4813) =< s(4817)
s(4814) =< s(4817)
s(4811) =< s(4819)
s(4814) =< s(4819)
s(4810) =< s(4818)
s(4814) =< s(4818)
s(4793) =< s(4804)
s(4797) =< s(4803)
s(4797) =< s(4804)
s(4791) =< s(4803)

Unbounded itvars
s(4790) :  sum(254),s(3940)

  with precondition: [H=1,D>=3,E>=2,F+1>=E,G+1>=E,D+2*B+1>=2*A,D+2*C+1>=2*A,A+1>=D+E] 

* Chain [multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]: 675*aux(569)+73*it(254)+73*it(255)+71*it(256)+142*it(257)+355*it(259)+73*it(260)+146*it(261)+73*it(265)+17*it([271])+17*it([272])+44*s(3901)+10*s(3903)+12*s(3904)+16*s(4791)+32*s(4793)+81*s(4797)+22*s(4806)+10*s(4807)+74*s(4808)+15*s(4810)+39*s(4811)+12*s(4813)+15*s(4814)+221*s(4820)+33*s(4823)+11*s(4824)+165*s(4832)+11*s(4833)+11*s(4834)+11*s(4835)+22*s(4836)+11*s(4837)+10*s(4838)+10*s(4839)+9*s(4840)+18*s(4841)+11*s(4842)+11*s(4844)+10*s(4845)+10*s(4846)+9*s(4847)+22*s(4849)+10*s(4850)+58*s(4851)+54*s(4852)+27*s(4853)+9*s(4877)+529*s(4885)+9*s(4886)+10*s(4887)+10*s(4888)+9*s(4889)+16*s(4900)+32*s(4902)+81*s(4904)+64*s(4914)+15*s(4916)+39*s(4917)+12*s(4919)+15*s(4920)+84*s(4921)+33*s(4930)+11*s(4931)+64*s(4932)+81*s(4933)+11*s(4940)+11*s(4941)+11*s(4942)+11*s(4943)+11*s(4944)+10*s(4945)+10*s(4946)+9*s(4947)+18*s(4948)+11*s(4949)+11*s(4950)+11*s(4951)+10*s(4952)+10*s(4953)+9*s(4954)+54*s(4957)+27*s(4958)+52*s(4959)+54*s(4983)+27*s(4985)+52*s(4988)+32*s(4995)+15*s(4996)+24*s(4997)+15*s(4998)+12*s(4999)+15*s(5000)+52*s(5001)+16*s(5002)+42*s(5013)+82*s(5014)+15*s(5016)+39*s(5017)+15*s(5019)+10*s(5031)+10*s(5032)+9*s(5033)+30*s(5036)+15*s(5038)+10*s(5059)+34
  Such that:aux(551) =< -A+2*B
aux(552) =< -A+2*C
aux(556) =< A-D+1
aux(553) =< -A/2+B
aux(423) =< A/2-D/2+1/2
aux(557) =< A/4
aux(559) =< A/5
aux(558) =< A/6
aux(562) =< B-D/2+1/2
aux(567) =< B/2
aux(427) =< B/2-D/4+3/4
aux(568) =< B/4
aux(564) =< C-D/2+1/2
aux(563) =< C/2
aux(555) =< D/2
aux(565) =< D/4
it([272]) =< D/4+1/4
aux(570) =< A/2
aux(555) =< aux(570)
s(3904) =< aux(567)
it([271]) =< aux(568)
s(3903) =< aux(568)
s(3901) =< aux(570)
s(3903) =< aux(570)
it(254) =< aux(551)
it(255) =< aux(551)
it(260) =< aux(551)
it(261) =< aux(551)
it(265) =< aux(551)
it([271]) =< aux(551)
it(254) =< aux(552)
it(255) =< aux(552)
it(260) =< aux(552)
it(261) =< aux(552)
it(265) =< aux(552)
it([271]) =< aux(552)
it(255) =< aux(553)
it([271]) =< aux(553)
it([272]) =< aux(570)
it([272]) =< aux(555)
it(261) =< aux(556)
it(265) =< aux(556)
it(256) =< aux(557)
it(257) =< aux(557)
it(259) =< aux(557)
it(260) =< aux(557)
it(261) =< aux(557)
it(265) =< aux(557)
it([271]) =< aux(557)
it([272]) =< aux(557)
it(255) =< aux(558)
it(260) =< aux(559)
it(261) =< aux(559)
it(265) =< aux(559)
it(257) =< aux(567)
it(259) =< aux(567)
it(260) =< aux(567)
it(261) =< aux(567)
it(265) =< aux(567)
it([271]) =< aux(567)
it([272]) =< aux(567)
it(265) =< aux(562)
it([271]) =< aux(562)
it(259) =< aux(563)
it(260) =< aux(563)
it(261) =< aux(563)
it(265) =< aux(563)
it([271]) =< aux(563)
it(261) =< aux(564)
it(265) =< aux(564)
it([271]) =< aux(564)
it(256) =< aux(565)
it(257) =< aux(565)
it(259) =< aux(565)
it(260) =< aux(565)
it(261) =< aux(565)
it(265) =< aux(565)
aux(426) =< aux(427)
s(5059) =< aux(567)* (1/2)
aux(429) =< aux(423)+1
aux(428) =< aux(423)
aux(432) =< aux(423)-1
aux(441) =< aux(423)* (1/2)+1
aux(426) =< aux(423)
s(4277) =< aux(423)*2+1
s(4173) =< aux(423)*2+1
s(4072) =< aux(423)+1
s(4184) =< aux(423)
aux(429) =< aux(426)+1
aux(428) =< aux(426)
aux(432) =< aux(426)-1
aux(441) =< aux(426)* (1/2)+1
aux(448) =< it(259)*aux(429)
aux(467) =< it(259)*aux(428)
aux(489) =< it(265)*aux(428)
aux(487) =< it(265)*aux(432)
aux(488) =< it(265)*aux(429)
aux(476) =< it(261)*aux(428)
aux(475) =< it(261)*aux(432)
aux(460) =< it(261)*aux(429)
s(4935) =< it(259)*aux(429)
s(4911) =< it(260)*aux(429)
s(4912) =< it(260)*aux(428)
aux(442) =< it(257)*aux(429)
s(4858) =< it(257)*aux(441)
aux(440) =< it(257)*aux(428)
s(4827) =< it(256)*aux(429)
aux(434) =< it(255)*aux(429)
s(4817) =< it(255)*aux(432)
s(4803) =< it(254)*aux(429)
s(4804) =< it(254)*aux(428)
s(4804) =< it(254)*aux(426)
s(5021) =< aux(448)* (1/3)
s(4897) =< aux(448)* (1/2)
s(4960) =< aux(467)* (1/2)
s(5022) =< aux(448)* (1/2)
s(5005) =< aux(489)* (1/2)
s(5004) =< aux(487)* (1/2)
s(5007) =< aux(488)* (1/3)
s(5008) =< aux(488)* (1/2)
s(4992) =< aux(476)* (1/2)
s(4991) =< aux(475)* (1/2)
s(4925) =< aux(460)* (1/3)
s(4926) =< aux(460)* (1/2)
s(4855) =< aux(442)* (1/2)
s(4854) =< aux(440)* (1/2)
s(4818) =< aux(434)* (1/3)
s(4819) =< aux(434)* (1/2)
s(5059) =< aux(570)
s(4885) =< aux(448)
s(5013) =< aux(448)
s(5014) =< aux(448)
s(5014) =< aux(467)
s(5013) =< aux(467)
s(5013) =< s(4897)
s(5013) =< s(4960)
s(4280) =< s(4184)*2+2
s(4203) =< s(4184)+2
s(4282) =< s(4184)
s(4277) =< s(4184)*2+1
s(4280) =< s(4277)+1
s(5049) =< s(5013)*s(4282)
s(5050) =< s(5013)*s(4203)
s(5051) =< s(5013)*s(4277)
s(5052) =< s(5013)*s(4280)
s(5031) =< s(5052)
s(5032) =< s(5052)
s(5031) =< s(5051)
s(5032) =< s(5051)
s(5032) =< s(5049)
s(5033) =< s(5049)
s(5031) =< s(5050)
s(5031) =< s(5049)
s(5036) =< aux(448)
s(5038) =< aux(448)
s(5038) =< s(4897)
s(5036) =< s(4897)
s(5036) =< s(5021)
s(5038) =< aux(467)
s(5036) =< aux(467)
s(5036) =< s(4960)
s(5022) =< s(4897)
s(5016) =< aux(448)
s(5017) =< aux(448)
s(5019) =< aux(448)
s(5017) =< s(5022)
s(5019) =< s(5022)
s(5016) =< s(5021)
s(5019) =< s(5021)
s(4995) =< aux(489)
s(4996) =< aux(488)
s(4997) =< aux(488)
s(4998) =< aux(488)
s(4999) =< aux(488)
s(5000) =< aux(488)
s(4996) =< aux(489)
s(4997) =< aux(489)
s(4998) =< aux(489)
s(4999) =< aux(489)
s(5000) =< aux(489)
s(5001) =< aux(488)
s(4997) =< s(5008)
s(4998) =< s(5008)
s(5000) =< s(5008)
s(4996) =< s(5007)
s(5000) =< s(5007)
s(4997) =< aux(487)
s(4998) =< aux(487)
s(4999) =< aux(487)
s(5000) =< aux(487)
s(5001) =< aux(487)
s(4996) =< aux(487)
s(4996) =< s(5005)
s(4997) =< s(5005)
s(5000) =< s(5005)
s(4996) =< s(5004)
s(4997) =< s(5004)
s(5000) =< s(5004)
s(5002) =< aux(488)
s(4914) =< aux(476)
s(4983) =< aux(460)
s(4985) =< aux(460)
s(4983) =< aux(476)
s(4985) =< aux(476)
s(4983) =< aux(475)
s(4985) =< aux(475)
s(4988) =< aux(475)
s(4983) =< s(4992)
s(4983) =< s(4991)
s(4921) =< aux(460)
s(4561) =< s(4184)+1
s(4937) =< s(4885)*s(4072)
s(4965) =< s(4885)*s(4282)
s(4973) =< s(4885)*s(4561)
s(4972) =< s(4885)*s(4203)
s(4975) =< s(4885)*s(4277)
s(4940) =< s(4965)* (1/3)
s(4971) =< s(4973)* (1/2)
s(4970) =< s(4965)* (1/2)
s(4976) =< s(4885)*s(4280)
s(4941) =< s(4965)* (1/3)
s(4942) =< s(4973)
s(4940) =< s(4976)
s(4944) =< s(4976)
s(4942) =< s(4976)
s(4945) =< s(4976)
s(4946) =< s(4976)
s(4942) =< s(4965)
s(4947) =< s(4965)
s(4946) =< s(4965)
s(4948) =< s(4965)
s(4979) =< s(4973)
s(4943) =< s(4973)
s(4940) =< s(4973)
s(4944) =< s(4973)
s(4940) =< s(4972)
s(4942) =< s(4972)
s(4945) =< s(4972)
s(4945) =< s(4973)
s(4979) =< s(4965)
s(4943) =< s(4965)
s(4940) =< s(4965)
s(4944) =< s(4965)
s(4943) =< s(4971)
s(4940) =< s(4971)
s(4942) =< s(4971)
s(4943) =< s(4970)
s(4940) =< s(4970)
s(4942) =< s(4970)
s(4581) =< s(4282)+2
s(4977) =< s(4943)*s(4282)
s(4947) =< s(4940)*s(4561)
s(4942) =< s(4979)+aux(448)
s(4978) =< s(4944)*s(4581)
s(4942) =< s(4978)+s(4977)+s(4965)
s(4947) =< s(4978)+s(4977)+s(4965)
s(4949) =< s(4973)
s(4941) =< s(4976)
s(4951) =< s(4976)
s(4949) =< s(4976)
s(4952) =< s(4976)
s(4953) =< s(4976)
s(4941) =< s(4975)
s(4951) =< s(4975)
s(4949) =< s(4975)
s(4952) =< s(4975)
s(4953) =< s(4975)
s(4969) =< s(4937)
s(4950) =< s(4937)
s(4941) =< s(4937)
s(4951) =< s(4937)
s(4949) =< s(4937)
s(4949) =< s(4965)
s(4954) =< s(4965)
s(4953) =< s(4965)
s(4969) =< s(4973)
s(4950) =< s(4973)
s(4941) =< s(4973)
s(4951) =< s(4973)
s(4941) =< s(4972)
s(4949) =< s(4972)
s(4952) =< s(4972)
s(4941) =< s(4965)
s(4952) =< s(4965)
s(4969) =< s(4965)
s(4950) =< s(4965)
s(4951) =< s(4965)
s(4950) =< s(4971)
s(4941) =< s(4971)
s(4949) =< s(4971)
s(4950) =< s(4970)
s(4941) =< s(4970)
s(4949) =< s(4970)
s(4966) =< s(4950)*s(4184)
s(4954) =< s(4941)*s(4561)
s(4949) =< s(4969)+aux(448)
s(4967) =< s(4951)*s(4203)
s(4949) =< s(4967)+s(4966)+s(4965)
s(4954) =< s(4967)+s(4966)+s(4965)
s(4935) =< aux(448)
s(4932) =< s(4935)
s(4957) =< s(4935)
s(4958) =< s(4935)
s(4957) =< aux(448)
s(4958) =< aux(448)
s(4957) =< aux(467)
s(4958) =< aux(467)
s(4959) =< aux(467)
s(4957) =< s(4897)
s(4957) =< s(4960)
s(4930) =< s(4937)
s(4931) =< s(4937)
s(4931) =< s(4937)+aux(448)
s(4933) =< s(4935)
s(4933) =< aux(448)
s(4916) =< aux(460)
s(4917) =< aux(460)
s(4919) =< aux(460)
s(4920) =< aux(460)
s(4916) =< aux(476)
s(4917) =< aux(476)
s(4919) =< aux(476)
s(4920) =< aux(476)
s(4917) =< s(4926)
s(4920) =< s(4926)
s(4916) =< s(4925)
s(4920) =< s(4925)
s(4902) =< s(4912)
s(4904) =< s(4911)
s(4904) =< s(4912)
s(4900) =< s(4911)
s(4886) =< aux(448)
s(4886) =< s(4897)
s(4893) =< s(4886)*s(4282)
s(4894) =< s(4886)*s(4203)
s(4895) =< s(4886)*s(4277)
s(4896) =< s(4886)*s(4280)
s(4887) =< s(4896)
s(4888) =< s(4896)
s(4887) =< s(4895)
s(4888) =< s(4895)
s(4888) =< s(4893)
s(4889) =< s(4893)
s(4887) =< s(4894)
s(4887) =< s(4893)
s(4832) =< aux(442)
s(4877) =< aux(442)
s(4877) =< s(4855)
s(4858) =< aux(442)
s(4181) =< aux(423)*2+2
s(4182) =< aux(423)+2
s(4867) =< s(4832)*s(4072)
s(4181) =< s(4173)+1
s(4859) =< s(4832)*s(4184)
s(4866) =< s(4832)*s(4182)
s(4869) =< s(4832)*s(4173)
s(4833) =< s(4859)* (1/3)
s(4865) =< s(4867)* (1/2)
s(4864) =< s(4859)* (1/2)
s(4870) =< s(4832)*s(4181)
s(4834) =< s(4859)* (1/3)
s(4835) =< s(4867)
s(4833) =< s(4870)
s(4837) =< s(4870)
s(4835) =< s(4870)
s(4838) =< s(4870)
s(4839) =< s(4870)
s(4835) =< s(4859)
s(4840) =< s(4859)
s(4839) =< s(4859)
s(4841) =< s(4859)
s(4863) =< s(4867)
s(4836) =< s(4867)
s(4833) =< s(4867)
s(4837) =< s(4867)
s(4833) =< s(4866)
s(4835) =< s(4866)
s(4838) =< s(4866)
s(4838) =< s(4867)
s(4863) =< s(4859)
s(4836) =< s(4859)
s(4833) =< s(4859)
s(4837) =< s(4859)
s(4836) =< s(4865)
s(4833) =< s(4865)
s(4835) =< s(4865)
s(4836) =< s(4864)
s(4833) =< s(4864)
s(4835) =< s(4864)
s(4871) =< s(4836)*s(4184)
s(4840) =< s(4833)*s(4072)
s(4835) =< s(4863)+aux(442)
s(4872) =< s(4837)*s(4203)
s(4835) =< s(4872)+s(4871)+s(4859)
s(4840) =< s(4872)+s(4871)+s(4859)
s(4842) =< s(4867)
s(4834) =< s(4870)
s(4844) =< s(4870)
s(4842) =< s(4870)
s(4845) =< s(4870)
s(4846) =< s(4870)
s(4834) =< s(4869)
s(4844) =< s(4869)
s(4842) =< s(4869)
s(4845) =< s(4869)
s(4846) =< s(4869)
s(4834) =< s(4867)
s(4844) =< s(4867)
s(4842) =< s(4859)
s(4847) =< s(4859)
s(4846) =< s(4859)
s(4834) =< s(4866)
s(4842) =< s(4866)
s(4845) =< s(4866)
s(4834) =< s(4859)
s(4845) =< s(4859)
s(4844) =< s(4859)
s(4834) =< s(4865)
s(4842) =< s(4865)
s(4834) =< s(4864)
s(4842) =< s(4864)
s(4860) =< s(4836)*aux(423)
s(4847) =< s(4834)*s(4072)
s(4842) =< s(4863)+aux(442)
s(4861) =< s(4844)*s(4182)
s(4842) =< s(4861)+s(4860)+s(4859)
s(4847) =< s(4861)+s(4860)+s(4859)
s(4850) =< s(4854)
s(4851) =< aux(440)
s(4849) =< s(4858)
s(4850) =< s(4858)
s(4852) =< s(4858)
s(4853) =< s(4858)
s(4852) =< aux(442)
s(4853) =< aux(442)
s(4852) =< aux(440)
s(4853) =< aux(440)
s(4852) =< s(4855)
s(4852) =< s(4854)
s(4820) =< s(4827)
s(4830) =< s(4820)*s(4072)
s(4823) =< s(4830)
s(4824) =< s(4830)
s(4824) =< s(4830)+s(4827)
s(4817) =< s(4819)
s(4807) =< s(4819)
s(4808) =< aux(434)
s(4806) =< s(4817)
s(4807) =< s(4817)
s(4810) =< aux(434)
s(4811) =< aux(434)
s(4813) =< aux(434)
s(4814) =< aux(434)
s(4810) =< s(4817)
s(4811) =< s(4817)
s(4813) =< s(4817)
s(4814) =< s(4817)
s(4811) =< s(4819)
s(4814) =< s(4819)
s(4810) =< s(4818)
s(4814) =< s(4818)
s(4793) =< s(4804)
s(4797) =< s(4803)
s(4797) =< s(4804)
s(4791) =< s(4803)

Unbounded itvars
aux(569) :  aux(569)

  with precondition: [E=1,F=0,H=1,D>=3,G>=0,A>=D+1,D+2*B+1>=2*A,D+2*C+1>=2*A] 

* Chain [multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]: 85*it(254)+73*it(255)+71*it(256)+497*it(257)+73*it(260)+219*it(261)+17*it([271])+17*it([272])+44*s(3901)+10*s(3903)+1034*s(4790)+16*s(4791)+32*s(4793)+81*s(4797)+22*s(4806)+10*s(4807)+74*s(4808)+15*s(4810)+39*s(4811)+12*s(4813)+15*s(4814)+221*s(4820)+33*s(4823)+11*s(4824)+694*s(4832)+11*s(4833)+11*s(4834)+11*s(4835)+22*s(4836)+11*s(4837)+10*s(4838)+10*s(4839)+9*s(4840)+18*s(4841)+11*s(4842)+11*s(4844)+10*s(4845)+10*s(4846)+9*s(4847)+22*s(4849)+10*s(4850)+110*s(4851)+54*s(4852)+27*s(4853)+18*s(4877)+10*s(4887)+10*s(4888)+9*s(4889)+16*s(4900)+32*s(4902)+81*s(4904)+96*s(4914)+15*s(4916)+39*s(4917)+12*s(4919)+15*s(4920)+100*s(4921)+33*s(4930)+11*s(4931)+64*s(4932)+81*s(4933)+11*s(4940)+11*s(4941)+11*s(4942)+11*s(4943)+11*s(4944)+10*s(4945)+10*s(4946)+9*s(4947)+18*s(4948)+11*s(4949)+11*s(4950)+11*s(4951)+10*s(4952)+10*s(4953)+9*s(4954)+54*s(4957)+27*s(4958)+54*s(4983)+39*s(4985)+52*s(4988)+15*s(4996)+24*s(4997)+15*s(4998)+15*s(5000)+52*s(5001)+42*s(5013)+82*s(5014)+15*s(5016)+39*s(5017)+15*s(5019)+10*s(5031)+10*s(5032)+9*s(5033)+30*s(5036)+15*s(5038)+10*s(5059)+118
  Such that:aux(423) =< A-D
aux(556) =< A-D+1
aux(559) =< 2*A+4*B-2*D
aux(559) =< 2*A+4*C-2*D
aux(556) =< 2*A-2*D
aux(555) =< A/2
aux(423) =< A/2-D/2+1/2
aux(555) =< D/2
aux(574) =< A+2*B-D
aux(575) =< A+2*C-D
aux(576) =< 2*B+2*C-D
aux(577) =< 4*B
aux(578) =< 4*B+4*C-2*D
aux(579) =< 4*C
aux(557) =< aux(574)
aux(557) =< aux(575)
aux(564) =< aux(576)
aux(565) =< aux(577)
it([272]) =< aux(577)
aux(564) =< aux(578)
aux(565) =< aux(579)
it([272]) =< aux(579)
it(254) =< aux(578)
it([271]) =< aux(578)
s(3903) =< aux(578)
s(3901) =< aux(557)
s(3903) =< aux(557)
it(255) =< aux(578)
it(260) =< aux(578)
it(261) =< aux(578)
it(255) =< aux(576)
it([271]) =< aux(576)
it([272]) =< aux(557)
it([272]) =< aux(555)
it(261) =< aux(556)
it(256) =< aux(557)
it(257) =< aux(557)
it(260) =< aux(557)
it(261) =< aux(557)
it([271]) =< aux(557)
it(255) =< aux(557)
it(260) =< aux(559)
it(261) =< aux(559)
it(257) =< aux(578)
it([272]) =< aux(578)
it(261) =< aux(564)
it([271]) =< aux(564)
it(256) =< aux(565)
it(257) =< aux(565)
it(260) =< aux(565)
it(261) =< aux(565)
aux(426) =< aux(578)
s(5059) =< aux(578)* (1/2)
aux(429) =< aux(423)+1
aux(428) =< aux(423)
aux(432) =< aux(423)-1
aux(441) =< aux(423)* (1/2)+1
aux(426) =< aux(423)
s(4277) =< aux(423)*2+1
s(4173) =< aux(423)*2+1
s(4072) =< aux(423)+1
s(4184) =< aux(423)
aux(429) =< aux(426)+1
aux(428) =< aux(426)
aux(432) =< aux(426)-1
aux(441) =< aux(426)* (1/2)+1
aux(442) =< it(257)*aux(429)
aux(440) =< it(257)*aux(428)
aux(476) =< it(261)*aux(428)
aux(475) =< it(261)*aux(432)
aux(460) =< it(261)*aux(429)
s(4935) =< it(257)*aux(429)
s(4911) =< it(260)*aux(429)
s(4912) =< it(260)*aux(428)
s(4858) =< it(257)*aux(441)
s(4827) =< it(256)*aux(429)
aux(434) =< it(255)*aux(429)
s(4817) =< it(255)*aux(432)
s(4803) =< it(254)*aux(429)
s(4804) =< it(254)*aux(428)
s(4804) =< it(254)*aux(426)
s(5021) =< aux(442)* (1/3)
s(4855) =< aux(442)* (1/2)
s(4854) =< aux(440)* (1/2)
s(5022) =< aux(442)* (1/2)
s(4992) =< aux(476)* (1/2)
s(4991) =< aux(475)* (1/2)
s(4925) =< aux(460)* (1/3)
s(4926) =< aux(460)* (1/2)
s(4818) =< aux(434)* (1/3)
s(4819) =< aux(434)* (1/2)
s(5059) =< aux(557)
s(4832) =< aux(442)
s(5013) =< aux(442)
s(5014) =< aux(442)
s(5014) =< aux(440)
s(5013) =< aux(440)
s(5013) =< s(4855)
s(5013) =< s(4854)
s(4280) =< s(4184)*2+2
s(4203) =< s(4184)+2
s(4282) =< s(4184)
s(4277) =< s(4184)*2+1
s(4280) =< s(4277)+1
s(5049) =< s(5013)*s(4282)
s(5050) =< s(5013)*s(4203)
s(5051) =< s(5013)*s(4277)
s(5052) =< s(5013)*s(4280)
s(5031) =< s(5052)
s(5032) =< s(5052)
s(5031) =< s(5051)
s(5032) =< s(5051)
s(5032) =< s(5049)
s(5033) =< s(5049)
s(5031) =< s(5050)
s(5031) =< s(5049)
s(5036) =< aux(442)
s(5038) =< aux(442)
s(5038) =< s(4855)
s(5036) =< s(4855)
s(5036) =< s(5021)
s(5038) =< aux(440)
s(5036) =< aux(440)
s(5036) =< s(4854)
s(5022) =< s(4855)
s(5016) =< aux(442)
s(5017) =< aux(442)
s(5019) =< aux(442)
s(5017) =< s(5022)
s(5019) =< s(5022)
s(5016) =< s(5021)
s(5019) =< s(5021)
s(4914) =< aux(476)
s(4996) =< aux(460)
s(4997) =< aux(460)
s(4998) =< aux(460)
s(4985) =< aux(460)
s(5000) =< aux(460)
s(4996) =< aux(476)
s(4997) =< aux(476)
s(4998) =< aux(476)
s(4985) =< aux(476)
s(5000) =< aux(476)
s(5001) =< aux(460)
s(4997) =< s(4926)
s(4998) =< s(4926)
s(5000) =< s(4926)
s(4996) =< s(4925)
s(5000) =< s(4925)
s(4997) =< aux(475)
s(4998) =< aux(475)
s(4985) =< aux(475)
s(5000) =< aux(475)
s(5001) =< aux(475)
s(4996) =< aux(475)
s(4996) =< s(4992)
s(4997) =< s(4992)
s(5000) =< s(4992)
s(4996) =< s(4991)
s(4997) =< s(4991)
s(5000) =< s(4991)
s(4921) =< aux(460)
s(4983) =< aux(460)
s(4983) =< aux(476)
s(4983) =< aux(475)
s(4988) =< aux(475)
s(4983) =< s(4992)
s(4983) =< s(4991)
s(4561) =< s(4184)+1
s(4867) =< s(4832)*s(4072)
s(4965) =< s(4832)*s(4282)
s(4973) =< s(4832)*s(4561)
s(4972) =< s(4832)*s(4203)
s(4975) =< s(4832)*s(4277)
s(4940) =< s(4965)* (1/3)
s(4971) =< s(4973)* (1/2)
s(4970) =< s(4965)* (1/2)
s(4976) =< s(4832)*s(4280)
s(4941) =< s(4965)* (1/3)
s(4942) =< s(4973)
s(4940) =< s(4976)
s(4944) =< s(4976)
s(4942) =< s(4976)
s(4945) =< s(4976)
s(4946) =< s(4976)
s(4942) =< s(4965)
s(4947) =< s(4965)
s(4946) =< s(4965)
s(4948) =< s(4965)
s(4979) =< s(4973)
s(4943) =< s(4973)
s(4940) =< s(4973)
s(4944) =< s(4973)
s(4940) =< s(4972)
s(4942) =< s(4972)
s(4945) =< s(4972)
s(4945) =< s(4973)
s(4979) =< s(4965)
s(4943) =< s(4965)
s(4940) =< s(4965)
s(4944) =< s(4965)
s(4943) =< s(4971)
s(4940) =< s(4971)
s(4942) =< s(4971)
s(4943) =< s(4970)
s(4940) =< s(4970)
s(4942) =< s(4970)
s(4581) =< s(4282)+2
s(4977) =< s(4943)*s(4282)
s(4947) =< s(4940)*s(4561)
s(4942) =< s(4979)+aux(442)
s(4978) =< s(4944)*s(4581)
s(4942) =< s(4978)+s(4977)+s(4965)
s(4947) =< s(4978)+s(4977)+s(4965)
s(4949) =< s(4973)
s(4941) =< s(4976)
s(4951) =< s(4976)
s(4949) =< s(4976)
s(4952) =< s(4976)
s(4953) =< s(4976)
s(4941) =< s(4975)
s(4951) =< s(4975)
s(4949) =< s(4975)
s(4952) =< s(4975)
s(4953) =< s(4975)
s(4969) =< s(4867)
s(4950) =< s(4867)
s(4941) =< s(4867)
s(4951) =< s(4867)
s(4949) =< s(4867)
s(4949) =< s(4965)
s(4954) =< s(4965)
s(4953) =< s(4965)
s(4969) =< s(4973)
s(4950) =< s(4973)
s(4941) =< s(4973)
s(4951) =< s(4973)
s(4941) =< s(4972)
s(4949) =< s(4972)
s(4952) =< s(4972)
s(4941) =< s(4965)
s(4952) =< s(4965)
s(4969) =< s(4965)
s(4950) =< s(4965)
s(4951) =< s(4965)
s(4950) =< s(4971)
s(4941) =< s(4971)
s(4949) =< s(4971)
s(4950) =< s(4970)
s(4941) =< s(4970)
s(4949) =< s(4970)
s(4966) =< s(4950)*s(4184)
s(4954) =< s(4941)*s(4561)
s(4949) =< s(4969)+aux(442)
s(4967) =< s(4951)*s(4203)
s(4949) =< s(4967)+s(4966)+s(4965)
s(4954) =< s(4967)+s(4966)+s(4965)
s(4935) =< aux(442)
s(4932) =< s(4935)
s(4957) =< s(4935)
s(4958) =< s(4935)
s(4957) =< aux(442)
s(4958) =< aux(442)
s(4957) =< aux(440)
s(4958) =< aux(440)
s(4851) =< aux(440)
s(4957) =< s(4855)
s(4957) =< s(4854)
s(4930) =< s(4867)
s(4931) =< s(4867)
s(4931) =< s(4867)+aux(442)
s(4933) =< s(4935)
s(4933) =< aux(442)
s(4916) =< aux(460)
s(4917) =< aux(460)
s(4919) =< aux(460)
s(4920) =< aux(460)
s(4916) =< aux(476)
s(4917) =< aux(476)
s(4919) =< aux(476)
s(4920) =< aux(476)
s(4917) =< s(4926)
s(4920) =< s(4926)
s(4916) =< s(4925)
s(4920) =< s(4925)
s(4902) =< s(4912)
s(4904) =< s(4911)
s(4904) =< s(4912)
s(4900) =< s(4911)
s(4877) =< aux(442)
s(4877) =< s(4855)
s(4893) =< s(4877)*s(4282)
s(4894) =< s(4877)*s(4203)
s(4895) =< s(4877)*s(4277)
s(4896) =< s(4877)*s(4280)
s(4887) =< s(4896)
s(4888) =< s(4896)
s(4887) =< s(4895)
s(4888) =< s(4895)
s(4888) =< s(4893)
s(4889) =< s(4893)
s(4887) =< s(4894)
s(4887) =< s(4893)
s(4858) =< aux(442)
s(4181) =< aux(423)*2+2
s(4182) =< aux(423)+2
s(4181) =< s(4173)+1
s(4859) =< s(4832)*s(4184)
s(4866) =< s(4832)*s(4182)
s(4869) =< s(4832)*s(4173)
s(4833) =< s(4859)* (1/3)
s(4865) =< s(4867)* (1/2)
s(4864) =< s(4859)* (1/2)
s(4870) =< s(4832)*s(4181)
s(4834) =< s(4859)* (1/3)
s(4835) =< s(4867)
s(4833) =< s(4870)
s(4837) =< s(4870)
s(4835) =< s(4870)
s(4838) =< s(4870)
s(4839) =< s(4870)
s(4835) =< s(4859)
s(4840) =< s(4859)
s(4839) =< s(4859)
s(4841) =< s(4859)
s(4863) =< s(4867)
s(4836) =< s(4867)
s(4833) =< s(4867)
s(4837) =< s(4867)
s(4833) =< s(4866)
s(4835) =< s(4866)
s(4838) =< s(4866)
s(4838) =< s(4867)
s(4863) =< s(4859)
s(4836) =< s(4859)
s(4833) =< s(4859)
s(4837) =< s(4859)
s(4836) =< s(4865)
s(4833) =< s(4865)
s(4835) =< s(4865)
s(4836) =< s(4864)
s(4833) =< s(4864)
s(4835) =< s(4864)
s(4871) =< s(4836)*s(4184)
s(4840) =< s(4833)*s(4072)
s(4835) =< s(4863)+aux(442)
s(4872) =< s(4837)*s(4203)
s(4835) =< s(4872)+s(4871)+s(4859)
s(4840) =< s(4872)+s(4871)+s(4859)
s(4842) =< s(4867)
s(4834) =< s(4870)
s(4844) =< s(4870)
s(4842) =< s(4870)
s(4845) =< s(4870)
s(4846) =< s(4870)
s(4834) =< s(4869)
s(4844) =< s(4869)
s(4842) =< s(4869)
s(4845) =< s(4869)
s(4846) =< s(4869)
s(4834) =< s(4867)
s(4844) =< s(4867)
s(4842) =< s(4859)
s(4847) =< s(4859)
s(4846) =< s(4859)
s(4834) =< s(4866)
s(4842) =< s(4866)
s(4845) =< s(4866)
s(4834) =< s(4859)
s(4845) =< s(4859)
s(4844) =< s(4859)
s(4834) =< s(4865)
s(4842) =< s(4865)
s(4834) =< s(4864)
s(4842) =< s(4864)
s(4860) =< s(4836)*aux(423)
s(4847) =< s(4834)*s(4072)
s(4842) =< s(4863)+aux(442)
s(4861) =< s(4844)*s(4182)
s(4842) =< s(4861)+s(4860)+s(4859)
s(4847) =< s(4861)+s(4860)+s(4859)
s(4850) =< s(4854)
s(4849) =< s(4858)
s(4850) =< s(4858)
s(4852) =< s(4858)
s(4853) =< s(4858)
s(4852) =< aux(442)
s(4853) =< aux(442)
s(4852) =< aux(440)
s(4853) =< aux(440)
s(4852) =< s(4855)
s(4852) =< s(4854)
s(4820) =< s(4827)
s(4830) =< s(4820)*s(4072)
s(4823) =< s(4830)
s(4824) =< s(4830)
s(4824) =< s(4830)+s(4827)
s(4817) =< s(4819)
s(4807) =< s(4819)
s(4808) =< aux(434)
s(4806) =< s(4817)
s(4807) =< s(4817)
s(4810) =< aux(434)
s(4811) =< aux(434)
s(4813) =< aux(434)
s(4814) =< aux(434)
s(4810) =< s(4817)
s(4811) =< s(4817)
s(4813) =< s(4817)
s(4814) =< s(4817)
s(4811) =< s(4819)
s(4814) =< s(4819)
s(4810) =< s(4818)
s(4814) =< s(4818)
s(4793) =< s(4804)
s(4797) =< s(4803)
s(4797) =< s(4804)
s(4791) =< s(4803)

Unbounded itvars
s(4790) :  sum(254),s(3940)

  with precondition: [E=1,F=0,H=1,D>=3,G>=0,A>=D+2,D+2*B+1>=2*A,D+2*C+1>=2*A] 

* Chain [multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])]: 675*aux(583)+73*it(254)+73*it(255)+71*it(256)+142*it(257)+355*it(259)+73*it(260)+146*it(261)+73*it(265)+17*it([271])+17*it([272])+44*s(3901)+10*s(3903)+12*s(3904)+16*s(4791)+32*s(4793)+81*s(4797)+22*s(4806)+10*s(4807)+74*s(4808)+15*s(4810)+39*s(4811)+12*s(4813)+15*s(4814)+221*s(4820)+33*s(4823)+11*s(4824)+165*s(4832)+11*s(4833)+11*s(4834)+11*s(4835)+22*s(4836)+11*s(4837)+10*s(4838)+10*s(4839)+9*s(4840)+18*s(4841)+11*s(4842)+11*s(4844)+10*s(4845)+10*s(4846)+9*s(4847)+22*s(4849)+10*s(4850)+58*s(4851)+54*s(4852)+27*s(4853)+9*s(4877)+529*s(4885)+9*s(4886)+10*s(4887)+10*s(4888)+9*s(4889)+16*s(4900)+32*s(4902)+81*s(4904)+64*s(4914)+15*s(4916)+39*s(4917)+12*s(4919)+15*s(4920)+84*s(4921)+33*s(4930)+11*s(4931)+64*s(4932)+81*s(4933)+11*s(4940)+11*s(4941)+11*s(4942)+11*s(4943)+11*s(4944)+10*s(4945)+10*s(4946)+9*s(4947)+18*s(4948)+11*s(4949)+11*s(4950)+11*s(4951)+10*s(4952)+10*s(4953)+9*s(4954)+54*s(4957)+27*s(4958)+52*s(4959)+54*s(4983)+27*s(4985)+52*s(4988)+32*s(4995)+15*s(4996)+24*s(4997)+15*s(4998)+12*s(4999)+15*s(5000)+52*s(5001)+16*s(5002)+42*s(5013)+82*s(5014)+15*s(5016)+39*s(5017)+15*s(5019)+10*s(5031)+10*s(5032)+9*s(5033)+30*s(5036)+15*s(5038)+10*s(5059)+34
  Such that:aux(551) =< -A+2*B
aux(552) =< -A+2*C
aux(556) =< A-D+1
aux(553) =< -A/2+B
aux(423) =< A/2-D/2+1/2
aux(557) =< A/4
aux(559) =< A/5
aux(558) =< A/6
aux(562) =< B-D/2+1/2
aux(581) =< B/2
aux(427) =< B/2-D/4+3/4
aux(582) =< B/4
aux(564) =< C-D/2+1/2
aux(563) =< C/2
aux(555) =< D/2
aux(565) =< D/4
it([272]) =< D/4+1/4
aux(584) =< A/2
aux(555) =< aux(584)
s(3904) =< aux(581)
it([271]) =< aux(582)
s(3903) =< aux(582)
s(3901) =< aux(584)
s(3903) =< aux(584)
it(254) =< aux(551)
it(255) =< aux(551)
it(260) =< aux(551)
it(261) =< aux(551)
it(265) =< aux(551)
it([271]) =< aux(551)
it(254) =< aux(552)
it(255) =< aux(552)
it(260) =< aux(552)
it(261) =< aux(552)
it(265) =< aux(552)
it([271]) =< aux(552)
it(255) =< aux(553)
it([271]) =< aux(553)
it([272]) =< aux(584)
it([272]) =< aux(555)
it(261) =< aux(556)
it(265) =< aux(556)
it(256) =< aux(557)
it(257) =< aux(557)
it(259) =< aux(557)
it(260) =< aux(557)
it(261) =< aux(557)
it(265) =< aux(557)
it([271]) =< aux(557)
it([272]) =< aux(557)
it(255) =< aux(558)
it(260) =< aux(559)
it(261) =< aux(559)
it(265) =< aux(559)
it(257) =< aux(581)
it(259) =< aux(581)
it(260) =< aux(581)
it(261) =< aux(581)
it(265) =< aux(581)
it([271]) =< aux(581)
it([272]) =< aux(581)
it(265) =< aux(562)
it([271]) =< aux(562)
it(259) =< aux(563)
it(260) =< aux(563)
it(261) =< aux(563)
it(265) =< aux(563)
it([271]) =< aux(563)
it(261) =< aux(564)
it(265) =< aux(564)
it([271]) =< aux(564)
it(256) =< aux(565)
it(257) =< aux(565)
it(259) =< aux(565)
it(260) =< aux(565)
it(261) =< aux(565)
it(265) =< aux(565)
aux(426) =< aux(427)
s(5059) =< aux(581)* (1/2)
aux(429) =< aux(423)+1
aux(428) =< aux(423)
aux(432) =< aux(423)-1
aux(441) =< aux(423)* (1/2)+1
aux(426) =< aux(423)
s(4277) =< aux(423)*2+1
s(4173) =< aux(423)*2+1
s(4072) =< aux(423)+1
s(4184) =< aux(423)
aux(429) =< aux(426)+1
aux(428) =< aux(426)
aux(432) =< aux(426)-1
aux(441) =< aux(426)* (1/2)+1
aux(448) =< it(259)*aux(429)
aux(467) =< it(259)*aux(428)
aux(489) =< it(265)*aux(428)
aux(487) =< it(265)*aux(432)
aux(488) =< it(265)*aux(429)
aux(476) =< it(261)*aux(428)
aux(475) =< it(261)*aux(432)
aux(460) =< it(261)*aux(429)
s(4935) =< it(259)*aux(429)
s(4911) =< it(260)*aux(429)
s(4912) =< it(260)*aux(428)
aux(442) =< it(257)*aux(429)
s(4858) =< it(257)*aux(441)
aux(440) =< it(257)*aux(428)
s(4827) =< it(256)*aux(429)
aux(434) =< it(255)*aux(429)
s(4817) =< it(255)*aux(432)
s(4803) =< it(254)*aux(429)
s(4804) =< it(254)*aux(428)
s(4804) =< it(254)*aux(426)
s(5021) =< aux(448)* (1/3)
s(4897) =< aux(448)* (1/2)
s(4960) =< aux(467)* (1/2)
s(5022) =< aux(448)* (1/2)
s(5005) =< aux(489)* (1/2)
s(5004) =< aux(487)* (1/2)
s(5007) =< aux(488)* (1/3)
s(5008) =< aux(488)* (1/2)
s(4992) =< aux(476)* (1/2)
s(4991) =< aux(475)* (1/2)
s(4925) =< aux(460)* (1/3)
s(4926) =< aux(460)* (1/2)
s(4855) =< aux(442)* (1/2)
s(4854) =< aux(440)* (1/2)
s(4818) =< aux(434)* (1/3)
s(4819) =< aux(434)* (1/2)
s(5059) =< aux(584)
s(4885) =< aux(448)
s(5013) =< aux(448)
s(5014) =< aux(448)
s(5014) =< aux(467)
s(5013) =< aux(467)
s(5013) =< s(4897)
s(5013) =< s(4960)
s(4280) =< s(4184)*2+2
s(4203) =< s(4184)+2
s(4282) =< s(4184)
s(4277) =< s(4184)*2+1
s(4280) =< s(4277)+1
s(5049) =< s(5013)*s(4282)
s(5050) =< s(5013)*s(4203)
s(5051) =< s(5013)*s(4277)
s(5052) =< s(5013)*s(4280)
s(5031) =< s(5052)
s(5032) =< s(5052)
s(5031) =< s(5051)
s(5032) =< s(5051)
s(5032) =< s(5049)
s(5033) =< s(5049)
s(5031) =< s(5050)
s(5031) =< s(5049)
s(5036) =< aux(448)
s(5038) =< aux(448)
s(5038) =< s(4897)
s(5036) =< s(4897)
s(5036) =< s(5021)
s(5038) =< aux(467)
s(5036) =< aux(467)
s(5036) =< s(4960)
s(5022) =< s(4897)
s(5016) =< aux(448)
s(5017) =< aux(448)
s(5019) =< aux(448)
s(5017) =< s(5022)
s(5019) =< s(5022)
s(5016) =< s(5021)
s(5019) =< s(5021)
s(4995) =< aux(489)
s(4996) =< aux(488)
s(4997) =< aux(488)
s(4998) =< aux(488)
s(4999) =< aux(488)
s(5000) =< aux(488)
s(4996) =< aux(489)
s(4997) =< aux(489)
s(4998) =< aux(489)
s(4999) =< aux(489)
s(5000) =< aux(489)
s(5001) =< aux(488)
s(4997) =< s(5008)
s(4998) =< s(5008)
s(5000) =< s(5008)
s(4996) =< s(5007)
s(5000) =< s(5007)
s(4997) =< aux(487)
s(4998) =< aux(487)
s(4999) =< aux(487)
s(5000) =< aux(487)
s(5001) =< aux(487)
s(4996) =< aux(487)
s(4996) =< s(5005)
s(4997) =< s(5005)
s(5000) =< s(5005)
s(4996) =< s(5004)
s(4997) =< s(5004)
s(5000) =< s(5004)
s(5002) =< aux(488)
s(4914) =< aux(476)
s(4983) =< aux(460)
s(4985) =< aux(460)
s(4983) =< aux(476)
s(4985) =< aux(476)
s(4983) =< aux(475)
s(4985) =< aux(475)
s(4988) =< aux(475)
s(4983) =< s(4992)
s(4983) =< s(4991)
s(4921) =< aux(460)
s(4561) =< s(4184)+1
s(4937) =< s(4885)*s(4072)
s(4965) =< s(4885)*s(4282)
s(4973) =< s(4885)*s(4561)
s(4972) =< s(4885)*s(4203)
s(4975) =< s(4885)*s(4277)
s(4940) =< s(4965)* (1/3)
s(4971) =< s(4973)* (1/2)
s(4970) =< s(4965)* (1/2)
s(4976) =< s(4885)*s(4280)
s(4941) =< s(4965)* (1/3)
s(4942) =< s(4973)
s(4940) =< s(4976)
s(4944) =< s(4976)
s(4942) =< s(4976)
s(4945) =< s(4976)
s(4946) =< s(4976)
s(4942) =< s(4965)
s(4947) =< s(4965)
s(4946) =< s(4965)
s(4948) =< s(4965)
s(4979) =< s(4973)
s(4943) =< s(4973)
s(4940) =< s(4973)
s(4944) =< s(4973)
s(4940) =< s(4972)
s(4942) =< s(4972)
s(4945) =< s(4972)
s(4945) =< s(4973)
s(4979) =< s(4965)
s(4943) =< s(4965)
s(4940) =< s(4965)
s(4944) =< s(4965)
s(4943) =< s(4971)
s(4940) =< s(4971)
s(4942) =< s(4971)
s(4943) =< s(4970)
s(4940) =< s(4970)
s(4942) =< s(4970)
s(4581) =< s(4282)+2
s(4977) =< s(4943)*s(4282)
s(4947) =< s(4940)*s(4561)
s(4942) =< s(4979)+aux(448)
s(4978) =< s(4944)*s(4581)
s(4942) =< s(4978)+s(4977)+s(4965)
s(4947) =< s(4978)+s(4977)+s(4965)
s(4949) =< s(4973)
s(4941) =< s(4976)
s(4951) =< s(4976)
s(4949) =< s(4976)
s(4952) =< s(4976)
s(4953) =< s(4976)
s(4941) =< s(4975)
s(4951) =< s(4975)
s(4949) =< s(4975)
s(4952) =< s(4975)
s(4953) =< s(4975)
s(4969) =< s(4937)
s(4950) =< s(4937)
s(4941) =< s(4937)
s(4951) =< s(4937)
s(4949) =< s(4937)
s(4949) =< s(4965)
s(4954) =< s(4965)
s(4953) =< s(4965)
s(4969) =< s(4973)
s(4950) =< s(4973)
s(4941) =< s(4973)
s(4951) =< s(4973)
s(4941) =< s(4972)
s(4949) =< s(4972)
s(4952) =< s(4972)
s(4941) =< s(4965)
s(4952) =< s(4965)
s(4969) =< s(4965)
s(4950) =< s(4965)
s(4951) =< s(4965)
s(4950) =< s(4971)
s(4941) =< s(4971)
s(4949) =< s(4971)
s(4950) =< s(4970)
s(4941) =< s(4970)
s(4949) =< s(4970)
s(4966) =< s(4950)*s(4184)
s(4954) =< s(4941)*s(4561)
s(4949) =< s(4969)+aux(448)
s(4967) =< s(4951)*s(4203)
s(4949) =< s(4967)+s(4966)+s(4965)
s(4954) =< s(4967)+s(4966)+s(4965)
s(4935) =< aux(448)
s(4932) =< s(4935)
s(4957) =< s(4935)
s(4958) =< s(4935)
s(4957) =< aux(448)
s(4958) =< aux(448)
s(4957) =< aux(467)
s(4958) =< aux(467)
s(4959) =< aux(467)
s(4957) =< s(4897)
s(4957) =< s(4960)
s(4930) =< s(4937)
s(4931) =< s(4937)
s(4931) =< s(4937)+aux(448)
s(4933) =< s(4935)
s(4933) =< aux(448)
s(4916) =< aux(460)
s(4917) =< aux(460)
s(4919) =< aux(460)
s(4920) =< aux(460)
s(4916) =< aux(476)
s(4917) =< aux(476)
s(4919) =< aux(476)
s(4920) =< aux(476)
s(4917) =< s(4926)
s(4920) =< s(4926)
s(4916) =< s(4925)
s(4920) =< s(4925)
s(4902) =< s(4912)
s(4904) =< s(4911)
s(4904) =< s(4912)
s(4900) =< s(4911)
s(4886) =< aux(448)
s(4886) =< s(4897)
s(4893) =< s(4886)*s(4282)
s(4894) =< s(4886)*s(4203)
s(4895) =< s(4886)*s(4277)
s(4896) =< s(4886)*s(4280)
s(4887) =< s(4896)
s(4888) =< s(4896)
s(4887) =< s(4895)
s(4888) =< s(4895)
s(4888) =< s(4893)
s(4889) =< s(4893)
s(4887) =< s(4894)
s(4887) =< s(4893)
s(4832) =< aux(442)
s(4877) =< aux(442)
s(4877) =< s(4855)
s(4858) =< aux(442)
s(4181) =< aux(423)*2+2
s(4182) =< aux(423)+2
s(4867) =< s(4832)*s(4072)
s(4181) =< s(4173)+1
s(4859) =< s(4832)*s(4184)
s(4866) =< s(4832)*s(4182)
s(4869) =< s(4832)*s(4173)
s(4833) =< s(4859)* (1/3)
s(4865) =< s(4867)* (1/2)
s(4864) =< s(4859)* (1/2)
s(4870) =< s(4832)*s(4181)
s(4834) =< s(4859)* (1/3)
s(4835) =< s(4867)
s(4833) =< s(4870)
s(4837) =< s(4870)
s(4835) =< s(4870)
s(4838) =< s(4870)
s(4839) =< s(4870)
s(4835) =< s(4859)
s(4840) =< s(4859)
s(4839) =< s(4859)
s(4841) =< s(4859)
s(4863) =< s(4867)
s(4836) =< s(4867)
s(4833) =< s(4867)
s(4837) =< s(4867)
s(4833) =< s(4866)
s(4835) =< s(4866)
s(4838) =< s(4866)
s(4838) =< s(4867)
s(4863) =< s(4859)
s(4836) =< s(4859)
s(4833) =< s(4859)
s(4837) =< s(4859)
s(4836) =< s(4865)
s(4833) =< s(4865)
s(4835) =< s(4865)
s(4836) =< s(4864)
s(4833) =< s(4864)
s(4835) =< s(4864)
s(4871) =< s(4836)*s(4184)
s(4840) =< s(4833)*s(4072)
s(4835) =< s(4863)+aux(442)
s(4872) =< s(4837)*s(4203)
s(4835) =< s(4872)+s(4871)+s(4859)
s(4840) =< s(4872)+s(4871)+s(4859)
s(4842) =< s(4867)
s(4834) =< s(4870)
s(4844) =< s(4870)
s(4842) =< s(4870)
s(4845) =< s(4870)
s(4846) =< s(4870)
s(4834) =< s(4869)
s(4844) =< s(4869)
s(4842) =< s(4869)
s(4845) =< s(4869)
s(4846) =< s(4869)
s(4834) =< s(4867)
s(4844) =< s(4867)
s(4842) =< s(4859)
s(4847) =< s(4859)
s(4846) =< s(4859)
s(4834) =< s(4866)
s(4842) =< s(4866)
s(4845) =< s(4866)
s(4834) =< s(4859)
s(4845) =< s(4859)
s(4844) =< s(4859)
s(4834) =< s(4865)
s(4842) =< s(4865)
s(4834) =< s(4864)
s(4842) =< s(4864)
s(4860) =< s(4836)*aux(423)
s(4847) =< s(4834)*s(4072)
s(4842) =< s(4863)+aux(442)
s(4861) =< s(4844)*s(4182)
s(4842) =< s(4861)+s(4860)+s(4859)
s(4847) =< s(4861)+s(4860)+s(4859)
s(4850) =< s(4854)
s(4851) =< aux(440)
s(4849) =< s(4858)
s(4850) =< s(4858)
s(4852) =< s(4858)
s(4853) =< s(4858)
s(4852) =< aux(442)
s(4853) =< aux(442)
s(4852) =< aux(440)
s(4853) =< aux(440)
s(4852) =< s(4855)
s(4852) =< s(4854)
s(4820) =< s(4827)
s(4830) =< s(4820)*s(4072)
s(4823) =< s(4830)
s(4824) =< s(4830)
s(4824) =< s(4830)+s(4827)
s(4817) =< s(4819)
s(4807) =< s(4819)
s(4808) =< aux(434)
s(4806) =< s(4817)
s(4807) =< s(4817)
s(4810) =< aux(434)
s(4811) =< aux(434)
s(4813) =< aux(434)
s(4814) =< aux(434)
s(4810) =< s(4817)
s(4811) =< s(4817)
s(4813) =< s(4817)
s(4814) =< s(4817)
s(4811) =< s(4819)
s(4814) =< s(4819)
s(4810) =< s(4818)
s(4814) =< s(4818)
s(4793) =< s(4804)
s(4797) =< s(4803)
s(4797) =< s(4804)
s(4791) =< s(4803)

Unbounded itvars
aux(583) :  aux(583)

  with precondition: [E=1,F=0,H=1,D>=3,G>=0,A>=D+1,D+2*B+1>=2*A,D+2*C+1>=2*A] 


#### Simplifying cost structure of CE 394 

#### Computing cost of phase [275] 

#### Simplifying cost structure of CE 395 

#### Cost of loops [275] 

 * loop 275:get_elemL(A,B,C,D,E,F) -> [get_elemL(A',B',C',D',E',F')] 
8
##### Pending set get_elemL(A,B,C,D,E,F)
* Psum in Loop 275: [it(275)=<1]

###### Computing sum for it(275)=<1  in Loop 275 
   - Applying inductive sum strategy 
     - head Candidate: D 
     - head Candidate: A-1 
     - head Candidate: B 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D 
     - tail Candidate: A-1 
     - tail Candidate: B 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(275)=<D,it(275)=<A-1,it(275)=<B,it(275)=<A-1,it(275)=<B,it(275)=<D,it(275)=<D-D',it(275)=<A-A',it(275)=<B-B',it(275)=<A-A',it(275)=<B-B',it(275)=<D-D'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [275] 

#### Simplifying cost structure of phase [275] 

#### Cost of phase [275]:get_elemL(A,B,C,D,E,F) -> [get_elemL(A',B',C',D',E',F')] 
8*it(275)+0
  Such that:it(275) =< A
it(275) =< A-A'
it(275) =< B
it(275) =< B-B'
it(275) =< D
it(275) =< D-D'

#### Simplifying cost structure of chain [[275],276] 

#### Cost of chains of get_elemL(A,B,C,D,E,F):
* Chain [[275],276]: 8*it(275)+5
  Such that:it(275) =< D

  with precondition: [D>=1,E>=1,F>=0,A>=D+2,C>=F,B>=D+E] 

* Chain [276]: 5
  with precondition: [D=0,A>=2,E>=1,F>=0,B>=E,C>=F] 


#### Simplifying cost structure of CE 396 

#### Computing cost of phase [277] 

#### Simplifying cost structure of CE 397 

#### Cost of loops [277] 

 * loop 277:get_elem(A,B,C,D) -> [get_elem(A',B',C',D')] 
8
##### Pending set get_elem(A,B,C,D)
* Psum in Loop 277: [it(277)=<1]

###### Computing sum for it(277)=<1  in Loop 277 
   - Applying inductive sum strategy 
     - head Candidate: C 
     - head Candidate: A-1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C 
     - tail Candidate: A-1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(277)=<C,it(277)=<A-1,it(277)=<A-1,it(277)=<C,it(277)=<C-C',it(277)=<A-A',it(277)=<A-A',it(277)=<C-C'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [277] 

#### Simplifying cost structure of phase [277] 

#### Cost of phase [277]:get_elem(A,B,C,D) -> [get_elem(A',B',C',D')] 
8*it(277)+0
  Such that:it(277) =< A
it(277) =< A-A'
it(277) =< C
it(277) =< C-C'

#### Simplifying cost structure of chain [[277],278] 

#### Cost of chains of get_elem(A,B,C,D):
* Chain [[277],278]: 8*it(277)+5
  Such that:it(277) =< C

  with precondition: [C>=1,D>=0,A>=C+2,B>=D] 

* Chain [278]: 5
  with precondition: [C=0,A>=2,D>=0,B>=D] 


#### Simplifying cost structure of CE 398 
 * Renamed intermediate variables: 
[ (eq(399,2),it(277))>>s(6021)]

#### Simplifying cost structure of CE 399 
 * Renamed intermediate variables: 
[ (eq(400,1),it(275))>>s(6022)]

#### Simplifying cost structure of CE 400 
 * Renamed intermediate variables: 
[ (eq(401,1),it(275))>>s(6023)]
 * Renamed intermediate variables: 
[ (eq(401,2),it(277))>>s(6024)]

#### Simplifying cost structure of CE 401 

#### Cost of chains of case_10(A,B,C,D,E,F,G):
* Chain [282]: 13
  with precondition: [D=1,E=0,F=0,A>=2,B>=2,C>=0,G>=0] 

* Chain [281]: 8*s(6021)+13
  Such that:s(6021) =< F

  with precondition: [D=1,E=0,A>=2,C>=0,F>=1,G>=0,B>=F+2] 

* Chain [280]: 8*s(6022)+13
  Such that:s(6022) =< E

  with precondition: [D=1,F=0,C>=0,E>=1,G>=0,A>=E+2,B>=E+2] 

* Chain [279]: 8*s(6023)+8*s(6024)+13
  Such that:s(6023) =< E
s(6024) =< F

  with precondition: [D=1,C>=0,E>=1,F>=1,G>=0,A>=E+2,B>=E+F+2] 


#### Simplifying cost structure of CE 402 
 * Renamed intermediate variables: 
[ (eq(403,1),s(6021))>>s(6025)]

#### Simplifying cost structure of CE 403 
 * Renamed intermediate variables: 
[ (eq(404,1),s(6022))>>s(6026)]

#### Simplifying cost structure of CE 404 
 * Renamed intermediate variables: 
[ (eq(405,1),s(6023))>>s(6027), (eq(405,1),s(6024))>>s(6028)]

#### Simplifying cost structure of CE 405 

#### Cost of chains of get_elemMat(A,B,C,D,E,F,G):
* Chain [286]: 14
  with precondition: [D=1,E=0,F=0,A>=2,B>=2,C>=0,G>=0] 

* Chain [285]: 8*s(6025)+14
  Such that:s(6025) =< F

  with precondition: [D=1,E=0,A>=2,C>=0,F>=1,G>=0,B>=F+2] 

* Chain [284]: 8*s(6026)+14
  Such that:s(6026) =< E

  with precondition: [D=1,F=0,C>=0,E>=1,G>=0,A>=E+2,B>=E+2] 

* Chain [283]: 8*s(6027)+8*s(6028)+14
  Such that:s(6027) =< E
s(6028) =< F

  with precondition: [D=1,C>=0,E>=1,F>=1,G>=0,A>=E+2,B>=E+F+2] 


#### Simplifying cost structure of CE 408 

#### Computing cost of phase [289] 

#### Simplifying cost structure of CE 406 

#### Cost of loops [289] 

 * loop 289:prod(A,B,C,D,E) -> [prod(A',B',C',D',E')] 
9
##### Pending set prod(A,B,C,D,E)
* Psum in Loop 289: [it(289)=<1]

###### Computing sum for it(289)=<1  in Loop 289 
   - Applying inductive sum strategy 
     - head Candidate: C-1 
     - head Candidate: A-1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
     - tail Candidate: A-1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(289)=<C-1,it(289)=<A-1,it(289)=<A-1,it(289)=<C-1,it(289)=<C-C',it(289)=<A-A',it(289)=<A-A',it(289)=<C-C'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [289] 

#### Simplifying cost structure of phase [289] 

#### Cost of phase [289]:prod(A,B,C,D,E) -> [prod(A',B',C',D',E')] 
9*it(289)+0
  Such that:it(289) =< A
it(289) =< A-A'
it(289) =< C
it(289) =< C-C'

#### Simplifying cost structure of chain [[289],288] 

#### Simplifying cost structure of CE 407 

#### Found solution for phase  [289] in the cache 

#### Cost of phase [289]:prod(A,B,C,D,E) -> [prod(A',B',C',D',E')] 
9*it(289)+0
  Such that:it(289) =< A
it(289) =< A-A'
it(289) =< C
it(289) =< C-C'

#### Simplifying cost structure of chain [[289],287] 

#### Cost of chains of prod(A,B,C,D,E):
* Chain [[289],288]: 9*it(289)+3
  Such that:it(289) =< A

  with precondition: [A>=2,B>=0,D>=0,E>=0,C>=A] 

* Chain [[289],287]: 9*it(289)+6
  Such that:it(289) =< C

  with precondition: [B>=0,C>=2,D>=0,E>=0,A>=C+1] 

* Chain [288]: 3
  with precondition: [A=1,E=0,B>=0,C>=0,D>=0] 

* Chain [287]: 6
  with precondition: [C=1,E=0,A>=2,B>=0,D>=0] 


#### Simplifying cost structure of CE 409 

#### Computing cost of phase [293] 

#### Simplifying cost structure of CE 410 

#### Cost of loops [293] 

 * loop 293:prod_mat(A,B,C,D,E,F,G) -> [prod_mat(A',B',C',D',E',F',G')] 
9
##### Pending set prod_mat(A,B,C,D,E,F,G)
* Psum in Loop 293: [it(293)=<1]

###### Computing sum for it(293)=<1  in Loop 293 
   - Applying inductive sum strategy 
     - head Candidate: D+1 
     - head Candidate: C-1 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D+1 
     - tail Candidate: C-1 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(293)=<D+1,it(293)=<C-1,it(293)=<C-1,it(293)=<D+1,it(293)=<D-D',it(293)=<C-C',it(293)=<C-C',it(293)=<D-D'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [293] 

#### Simplifying cost structure of phase [293] 

#### Cost of phase [293]:prod_mat(A,B,C,D,E,F,G) -> [prod_mat(A',B',C',D',E',F',G')] 
9*it(293)+0
  Such that:it(293) =< C
it(293) =< C-C'
it(293) =< D+1
it(293) =< D-D'

#### Simplifying cost structure of chain [[293],294] 

#### Computing cost of phase [290,291,292] 
 * Renamed intermediate variables: 
[ (eq(413,1),it(289))>>s(6029)]

#### Simplifying cost structure of CE 413 
 * Renamed intermediate variables: 
[ (it(290),s(6029))>>s(6030)]
 * Renamed intermediate variables: 
[ (eq(412,1),it(289))>>s(6031)]

#### Simplifying cost structure of CE 412 
 * Renamed intermediate variables: 
[ (it(291),s(6031))>>s(6032)]

#### Simplifying cost structure of CE 411 

#### Cost of loops [290,291,292] 

 * loop 290:prod_mat(A,B,C,D,E,F,G) -> [prod_mat(A',B',C',D',E',F',G')] 
9*s(6030)+12
  Such that:s(6030) =< D-D'

 * loop 291:prod_mat(A,B,C,D,E,F,G) -> [prod_mat(A',B',C',D',E',F',G')] 
9*s(6032)+9
  Such that:s(6032) =< A'

 * loop 292:prod_mat(A,B,C,D,E,F,G) -> [prod_mat(A',B',C',D',E',F',G')] 
12
##### Pending set prod_mat(A,B,C,D,E,F,G)
* Psum in Loop 290: [it(290)=<1,s(6033)=<D-D']
* Psum in Loop 291: [it(291)=<1,s(6034)=<A']
* Psum in Loop 292: [it(292)=<1]

###### Computing sum for it(290)=<1  in Loop 290 
   - Applying inductive sum strategy 
     - head Candidate: C-1 
       - Loop 291 is collaborative and bounds [it(291)] 
       - Loop 292 is collaborative and bounds [it(292)] 
     - head Candidate: D+1 
       - Loop 291 is collaborative and bounds [it(291)] 
       - Loop 292 is collaborative and bounds [it(292)] 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D/2+1/2 
       - Loop 291 is collaborative and bounds [it(291)] 
       - Loop 292 is collaborative
     - tail Candidate: C-1 
       - Loop 291 is collaborative and bounds [it(291)] 
       - Loop 292 is collaborative and bounds [it(292)] 
     - tail Candidate: D+1 
       - Loop 291 is collaborative and bounds [it(291)] 
       - Loop 292 is collaborative and bounds [it(292)] 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D/2+1/2 
       - Loop 291 is collaborative and bounds [it(291)] 
       - Loop 292 is collaborative
 * Adding constraints: [it(290)+it(291)+it(292)=<C-1,it(290)+it(291)+it(292)=<D+1,it(290)+it(291)+it(292)=<C-1,it(290)+it(291)=<D/2+1/2,it(290)+it(291)+it(292)=<C-C',it(290)+it(291)+it(292)=<D-D',it(290)+it(291)+it(292)=<C-C',it(290)+it(291)=<D/2-D'/2] 

##### Pending set A
* Psum in Loop 290: [s(6033)=<D-D']
* Psum in Loop 291: [it(291)=<1,s(6034)=<A']
* Psum in Loop 292: [it(292)=<1]

###### Computing sum for s(6033)=<D-D'  in Loop 290 
   - Applying inductive sum strategy 
     - head Candidate: -2*C+2*D+2 
       - Loop 291 is collaborative and bounds [it(291)] 
       - Loop 292 is collaborative
     - head Candidate: D 
       - Loop 291 is collaborative and bounds [it(291)] 
       - Loop 292 is collaborative and bounds [it(292)] 
     - tail Candidate: -2*C+2*D+2 
       - Loop 291 is collaborative and bounds [it(291)] 
       - Loop 292 is collaborative
     - tail Candidate: D 
       - Loop 291 is collaborative and bounds [it(291)] 
       - Loop 292 is collaborative and bounds [it(292)] 
 * Adding constraints: [it(291)+s(6033)=< -2*C+2*D+2,it(291)+it(292)+s(6033)=<D,it(291)+s(6033)=< -2*C+2*D+2*C'-2*D',it(291)+it(292)+s(6033)=<D-D'] 

##### Pending set A
* Psum in Loop 291: [it(291)=<1,s(6034)=<A']
* Psum in Loop 292: [it(292)=<1]

###### Computing sum for it(291)=<1  in Loop 291 
   - Applying inductive sum strategy 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(290)+it(291)+it(292)=<C-1,it(290)+it(291)+it(292)=<D+1,it(290)+it(291)+it(292)=<C-1,it(290)+it(291)=<D/2+1/2,it(290)+it(291)+it(292)=<C-C',it(290)+it(291)+it(292)=<D-D',it(290)+it(291)+it(292)=<C-C',it(290)+it(291)=<D/2-D'/2] 

##### Pending set A
* Psum in Loop 291: [s(6034)=<A']
* Psum in Loop 292: [it(292)=<1]

###### Computing sum for s(6034)=<A'  in Loop 291 
   - Applying inductive sum strategy 
     - head Candidate: -A-2*C+2*D+4 
       - Loop 290 is collaborative
       - Loop 292 is collaborative
     - head Candidate: -2*C+2*D+2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -A-2*C+2*D+4 
       - Loop 290 is collaborative
       - Loop 292 is collaborative
     - tail Candidate: -2*C+2*D+2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [s(6034)=< -A-2*C+2*D+4,s(6033)+s(6034)=< -2*C+2*D+2,s(6034)=< -A-2*C+2*D+A'+2*C'-2*D',s(6033)+s(6034)=< -2*C+2*D+2*C'-2*D'] 

##### Pending set A
* Psum in Loop 292: [it(292)=<1]

###### Computing sum for it(292)=<1  in Loop 292 
   - Applying inductive sum strategy 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(290)+it(291)+it(292)=<C-1,it(290)+it(291)+it(292)=<D+1,it(290)+it(291)+it(292)=<C-1,it(290)+it(291)+it(292)=<D+1,it(290)+it(291)+it(292)=<C-C',it(290)+it(291)+it(292)=<D-D',it(290)+it(291)+it(292)=<C-C',it(290)+it(291)+it(292)=<D-D'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [290,291,292] 

#### Simplifying cost structure of phase [290,291,292] 

#### Cost of phase [290,291,292]:prod_mat(A,B,C,D,E,F,G) -> [prod_mat(A',B',C',D',E',F',G')] 
12*it(290)+9*it(291)+12*it(292)+9*s(6033)+9*s(6034)+0
  Such that:s(6034) =< -A-2*C+2*D+4
s(6034) =< -A-2*C+2*D+A'+2*C'-2*D'
aux(603) =< -2*C+2*D+2
aux(604) =< -2*C+2*D+2*C'-2*D'
aux(605) =< C
aux(606) =< C-C'
aux(607) =< D
aux(608) =< D+1
aux(609) =< D-D'
aux(610) =< D/2+1/2
aux(611) =< D/2-D'/2
it(291) =< aux(603)
s(6033) =< aux(603)
s(6034) =< aux(603)
it(291) =< aux(604)
s(6033) =< aux(604)
s(6034) =< aux(604)
it(290) =< aux(605)
it(291) =< aux(605)
it(292) =< aux(605)
it(290) =< aux(606)
it(291) =< aux(606)
it(292) =< aux(606)
it(291) =< aux(607)
it(292) =< aux(607)
s(6033) =< aux(607)
it(290) =< aux(608)
it(291) =< aux(608)
it(292) =< aux(608)
it(290) =< aux(609)
it(291) =< aux(609)
it(292) =< aux(609)
s(6033) =< aux(609)
it(290) =< aux(610)
it(291) =< aux(610)
it(290) =< aux(611)
it(291) =< aux(611)

#### Simplifying cost structure of chain [[290,291,292],294] 
 * Joined equivalent variables [aux(612),aux(607),aux(609)] into aux(612)
 * Joined equivalent variables [aux(613),aux(603),aux(604)] into aux(613)
 * Joined equivalent variables [aux(614),aux(605),aux(606)] into aux(614)

#### Cost of chains of prod_mat(A,B,C,D,E,F,G):
* Chain [[293],294]: 9*it(293)+3
  Such that:it(293) =< F

  with precondition: [A=1,C=F,B>=0,C>=2,E>=0,G>=0,D+1>=C] 

* Chain [[290,291,292],294]: 12*it(290)+9*it(291)+12*it(292)+9*s(6033)+9*s(6034)+3
  Such that:s(6034) =< -A-2*C+2*D+4
aux(608) =< D+1
aux(611) =< D/2
aux(610) =< D/2+1/2
aux(612) =< D
aux(613) =< 2*D-2*F+2
aux(614) =< F
s(6034) =< aux(613)
it(291) =< aux(613)
s(6033) =< aux(613)
it(290) =< aux(614)
it(291) =< aux(614)
it(292) =< aux(614)
it(291) =< aux(612)
it(292) =< aux(612)
s(6033) =< aux(612)
it(290) =< aux(608)
it(291) =< aux(608)
it(292) =< aux(608)
it(290) =< aux(612)
it(290) =< aux(610)
it(291) =< aux(610)
it(290) =< aux(611)
it(291) =< aux(611)

  with precondition: [C=F,A>=2,B>=0,C>=2,E>=0,G>=0,D+1>=C] 

* Chain [294]: 3
  with precondition: [C=1,D=0,F=1,A>=0,B>=0,E>=0,G>=0] 


#### Simplifying cost structure of CE 414 

#### Computing cost of phase [295,296,297,298] 
 * Renamed intermediate variables: 
[ (eq(418,1),it(99))>>s(6035), (eq(418,1),aux(6))>>s(6036), (eq(418,1),aux(5))>>s(6037), (eq(418,1),aux(3))>>s(6038), (eq(418,1),aux(2))>>s(6039), (eq(418,1),it(97))>>s(6040), (eq(418,1),aux(9))>>s(6041), (eq(418,1),aux(11))>>s(6042), (eq(418,1),aux(12))>>s(6043), (eq(418,1),it(98))>>s(6044), (eq(418,1),s(3))>>s(6045)]

#### Simplifying cost structure of CE 418 
 * Joined equivalent variables [aux(615),s(6038),s(6039)] into aux(615)
 * Renamed intermediate variables: 
[ (it(295),s(6035))>>s(6046), (it(295),s(6041))>>s(6047), (it(295),s(6042))>>s(6048), (it(295),s(6036))>>s(6049), (it(295),s(6037))>>s(6050), (it(295),s(6040))>>s(6051), (it(295),s(6043))>>s(6052), (it(295),aux(615))>>s(6053), (it(295),s(6044))>>s(6054), (it(295),s(6045))>>s(6055)]
 * Renamed intermediate variables: 
[ (eq(417,1),aux(1))>>s(6056), (eq(417,1),aux(2))>>s(6057), (eq(417,1),aux(9))>>s(6058), (eq(417,1),aux(6))>>s(6059), (eq(417,1),aux(5))>>s(6060), (eq(417,1),it(97))>>s(6061), (eq(417,1),aux(3))>>s(6062), (eq(417,1),aux(13))>>s(6063), (eq(417,1),aux(14))>>s(6064), (eq(417,1),it(98))>>s(6065), (eq(417,1),s(3))>>s(6066)]

#### Simplifying cost structure of CE 417 
 * Joined equivalent variables [aux(616),s(6058),s(6063)] into aux(616)
 * Renamed intermediate variables: 
[ (it(296),s(6057))>>s(6067), (it(296),s(6059))>>s(6068), (it(296),s(6060))>>s(6069), (it(296),s(6064))>>s(6070), (it(296),s(6061))>>s(6071), (it(296),s(6056))>>s(6072), (it(296),s(6062))>>s(6073), (it(296),aux(616))>>s(6074), (it(296),s(6065))>>s(6075), (it(296),s(6066))>>s(6076)]

#### Simplifying cost structure of CE 416 
 * Renamed intermediate variables: 
[ (eq(415,1),it(99))>>s(6077)]

#### Simplifying cost structure of CE 415 
 * Renamed intermediate variables: 
[ (it(298),s(6077))>>s(6078)]

#### Cost of loops [295,296,297,298] 

 * loop 295:transpose_helper(A,B,C,D,E,F,G,H,I) -> [transpose_helper(A',B',C',D',E',F',G',H',I')] 
10*s(6046)+13*s(6051)+13*s(6054)+5*s(6055)+7
  Such that:s(6046) =< -B-E+B'+E'+1
s(6047) =< B-B'
s(6048) =< 2*B+E-2*B'-E'
s(6049) =< E
s(6050) =< E+1
s(6051) =< E/2
s(6052) =< 3/2*E
s(6053) =< 2*B+2*E-2*B'-E'
s(6051) =< s(6048)
s(6054) =< s(6048)
s(6054) =< s(6053)
s(6055) =< s(6053)
s(6051) =< s(6050)
s(6054) =< s(6050)
s(6051) =< s(6049)
s(6054) =< s(6049)
s(6054) =< s(6052)
s(6055) =< s(6052)
s(6051) =< s(6047)
s(6054) =< s(6047)

 * loop 296:transpose_helper(A,B,C,D,E,F,G,H,I) -> [transpose_helper(A',B',C',D',E',F',G',H',I')] 
13*s(6071)+13*s(6075)+5*s(6076)+7
  Such that:s(6067) =< -B+B'+D'+E'+1
s(6068) =< -B+B'+E'+1
s(6069) =< -B+B'+E'+2
s(6070) =< -3/2*B+3/2*B'+3/2*E'+3/2
s(6071) =< -B/2+B'/2+E'/2+1/2
s(6072) =< D'
s(6073) =< E'
s(6074) =< B-B'
s(6071) =< s(6072)
s(6075) =< s(6072)
s(6075) =< s(6067)
s(6076) =< s(6067)
s(6075) =< s(6073)
s(6076) =< s(6073)
s(6071) =< s(6074)
s(6075) =< s(6074)
s(6071) =< s(6069)
s(6075) =< s(6069)
s(6071) =< s(6068)
s(6075) =< s(6068)
s(6075) =< s(6070)
s(6076) =< s(6070)

 * loop 297:transpose_helper(A,B,C,D,E,F,G,H,I) -> [transpose_helper(A',B',C',D',E',F',G',H',I')] 
7
 * loop 298:transpose_helper(A,B,C,D,E,F,G,H,I) -> [transpose_helper(A',B',C',D',E',F',G',H',I')] 
10*s(6078)+7
  Such that:s(6078) =< E'/2

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 295: [it(295)=<1,s(6079)=< -B-E+B'+E'+1,s(6083)=<B-B',s(6088)=<2*B+E-2*B'-E',s(6087)=<2*B+2*E-2*B'-E',s(6085)=<E,s(6086)=<E+1,s(6080)=<E/2,s(6084)=<3/2*E]
* Psum in Loop 296: [it(296)=<1,s(6097)=< -B+B'+D'+E'+1,s(6093)=< -B+B'+E'+1,s(6094)=< -B+B'+E'+2,s(6095)=<B-B',s(6092)=< -3/2*B+3/2*B'+3/2*E'+3/2,s(6089)=< -B/2+B'/2+E'/2+1/2,s(6098)=<D',s(6096)=<E']
* Psum in Loop 297: [it(297)=<1]
* Psum in Loop 298: [it(298)=<1,s(6099)=<E'/2]

###### Computing sum for it(295)=<1  in Loop 295 
   - Applying inductive sum strategy 
     - head Candidate: B+E/2+1/2 
       - Loop 296 is collaborative and bounds [it(296)] 
       - Loop 297 is collaborative and bounds [it(297)] 
       - Loop 298 is collaborative and bounds [it(298)] 
     - head Candidate: B+1 
       - Loop 296 is collaborative and bounds [it(296)] 
       - Loop 297 is collaborative and bounds [it(297)] 
       - Loop 298 is collaborative and bounds [it(298)] 
     - head Candidate: A-1 
       - Loop 296 is collaborative and bounds [it(296)] 
       - Loop 297 is collaborative and bounds [it(297)] 
       - Loop 298 is collaborative and bounds [it(298)] 
     - head Candidate: B+D+1 
       - Loop 296 is collaborative and bounds [it(296)] 
       - Loop 297 is collaborative and bounds [it(297)] 
       - Loop 298 is collaborative and bounds [it(298)] 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B/3+1/3 
       - Loop 296 is collaborative
       - Loop 297 is collaborative
       - Loop 298 is collaborative
     - head Candidate: B/2+D/2-1/2 
       - Loop 296 is collaborative and bounds [it(296)] 
       - Loop 297 is collaborative
       - Loop 298 is collaborative
     - head Candidate: B-D+E+2 
       - Loop 296 is collaborative
       - Loop 297 is collaborative
       - Loop 298 is collaborative and bounds [it(298)] 
     - tail Candidate: B+E/2+1/2 
       - Loop 296 is collaborative and bounds [it(296)] 
       - Loop 297 is collaborative and bounds [it(297)] 
       - Loop 298 is collaborative and bounds [it(298)] 
     - tail Candidate: B+1 
       - Loop 296 is collaborative and bounds [it(296)] 
       - Loop 297 is collaborative and bounds [it(297)] 
       - Loop 298 is collaborative and bounds [it(298)] 
     - tail Candidate: A-1 
       - Loop 296 is collaborative and bounds [it(296)] 
       - Loop 297 is collaborative and bounds [it(297)] 
       - Loop 298 is collaborative and bounds [it(298)] 
     - tail Candidate: B+D+1 
       - Loop 296 is collaborative and bounds [it(296)] 
       - Loop 297 is collaborative and bounds [it(297)] 
       - Loop 298 is collaborative and bounds [it(298)] 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B/3+1/3 
       - Loop 296 is collaborative
       - Loop 297 is collaborative
       - Loop 298 is collaborative
     - tail Candidate: B/2+D/2-1/2 
       - Loop 296 is collaborative and bounds [it(296)] 
       - Loop 297 is collaborative
       - Loop 298 is collaborative
     - tail Candidate: B-D+E+2 
       - Loop 296 is collaborative and bounds [it(296)] 
       - Loop 297 is collaborative and bounds [it(297)] 
       - Loop 298 is collaborative and bounds [it(298)] 
 * Adding constraints: [it(295)+it(296)+it(297)+it(298)=<B+E/2+1/2,it(295)+it(296)+it(297)+it(298)=<B+1,it(295)+it(296)+it(297)+it(298)=<A-1,it(295)+it(296)+it(297)+it(298)=<B+D+1,it(295)+it(296)+it(297)+it(298)=<A-1,it(295)=<B/3+1/3,it(295)+it(296)=<B/2+D/2-1/2,it(295)+it(298)=<B-D+E+2,it(295)+it(296)+it(297)+it(298)=<B+E/2-B'-E'/2,it(295)+it(296)+it(297)+it(298)=<B-B',it(295)+it(296)+it(297)+it(298)=<A-A',it(295)+it(296)+it(297)+it(298)=<B+D-B'-D',it(295)+it(296)+it(297)+it(298)=<A-A',it(295)=<B/3-B'/3,it(295)+it(296)=<B/2+D/2-B'/2-D'/2,it(295)+it(296)+it(297)+it(298)=<B-D+E-B'+D'-E'] 

##### Pending set A
* Psum in Loop 295: [s(6079)=< -B-E+B'+E'+1,s(6083)=<B-B',s(6088)=<2*B+E-2*B'-E',s(6087)=<2*B+2*E-2*B'-E',s(6085)=<E,s(6086)=<E+1,s(6080)=<E/2,s(6084)=<3/2*E]
* Psum in Loop 296: [it(296)=<1,s(6097)=< -B+B'+D'+E'+1,s(6093)=< -B+B'+E'+1,s(6094)=< -B+B'+E'+2,s(6095)=<B-B',s(6092)=< -3/2*B+3/2*B'+3/2*E'+3/2,s(6089)=< -B/2+B'/2+E'/2+1/2,s(6098)=<D',s(6096)=<E']
* Psum in Loop 297: [it(297)=<1]
* Psum in Loop 298: [it(298)=<1,s(6099)=<E'/2]

###### Computing sum for s(6079)=< -B-E+B'+E'+1  in Loop 295 
   - Applying inductive sum strategy 
     - head Candidate: B-D 
       - Loop 296 is collaborative
       - Loop 297 is collaborative
       - Loop 298 is collaborative and bounds [it(298)] 
     - head Candidate: -A+B-D+2 
       - Loop 296 is collaborative
       - Loop 297 is collaborative
       - Loop 298 is collaborative and bounds [it(298)] 
     - tail Candidate: B-D 
       - Loop 296 is collaborative and bounds [it(296)] 
       - Loop 297 is collaborative and bounds [it(297)] 
       - Loop 298 is collaborative and bounds [it(298)] 
     - tail Candidate: -A+B-D+2 
       - Loop 296 is collaborative and bounds [it(296)] 
       - Loop 297 is collaborative
       - Loop 298 is collaborative and bounds [it(298)] 
 * Adding constraints: [it(298)+s(6079)=<B-D,it(298)+s(6079)=< -A+B-D+2,it(296)+it(297)+it(298)+s(6079)=<B-D-B'+D',it(296)+it(298)+s(6079)=< -A+B-D+A'-B'+D'] 

##### Pending set A
* Psum in Loop 295: [s(6083)=<B-B',s(6088)=<2*B+E-2*B'-E',s(6087)=<2*B+2*E-2*B'-E',s(6085)=<E,s(6086)=<E+1,s(6080)=<E/2,s(6084)=<3/2*E]
* Psum in Loop 296: [it(296)=<1,s(6097)=< -B+B'+D'+E'+1,s(6093)=< -B+B'+E'+1,s(6094)=< -B+B'+E'+2,s(6095)=<B-B',s(6092)=< -3/2*B+3/2*B'+3/2*E'+3/2,s(6089)=< -B/2+B'/2+E'/2+1/2,s(6098)=<D',s(6096)=<E']
* Psum in Loop 297: [it(297)=<1]
* Psum in Loop 298: [it(298)=<1,s(6099)=<E'/2]

###### Computing sum for s(6083)=<B-B'  in Loop 295 
   - Applying inductive sum strategy 
     - head Candidate: -3/2*A+3/2*B+3/2 
       - Loop 296 is collaborative and bounds [it(296)] 
       - Loop 297 is collaborative
       - Loop 298 is collaborative and bounds [it(298)] 
     - head Candidate: -3*A+3*B+E-1 
       - Loop 296 is collaborative
       - Loop 297 is collaborative
       - Loop 298 is collaborative
     - tail Candidate: -3/2*A+3/2*B+3/2 
       - Loop 296 is collaborative and bounds [it(296)] 
       - Loop 297 is collaborative
       - Loop 298 is collaborative and bounds [it(298)] 
     - tail Candidate: -3*A+3*B+E-1 
       - Loop 296 is collaborative and bounds [it(296)] 
       - Loop 297 is collaborative
       - Loop 298 is collaborative and bounds [it(298)] 
 * Adding constraints: [it(296)+it(298)+s(6083)=< -3/2*A+3/2*B+3/2,s(6083)=< -3*A+3*B+E-1,it(296)+it(298)+s(6083)=< -3/2*A+3/2*B+3/2*A'-3/2*B',it(296)+it(298)+s(6083)=< -3*A+3*B+E+3*A'-3*B'-E'] 

##### Pending set A
* Psum in Loop 295: [s(6088)=<2*B+E-2*B'-E',s(6087)=<2*B+2*E-2*B'-E',s(6085)=<E,s(6086)=<E+1,s(6080)=<E/2,s(6084)=<3/2*E]
* Psum in Loop 296: [it(296)=<1,s(6097)=< -B+B'+D'+E'+1,s(6093)=< -B+B'+E'+1,s(6094)=< -B+B'+E'+2,s(6095)=<B-B',s(6092)=< -3/2*B+3/2*B'+3/2*E'+3/2,s(6089)=< -B/2+B'/2+E'/2+1/2,s(6098)=<D',s(6096)=<E']
* Psum in Loop 297: [it(297)=<1]
* Psum in Loop 298: [it(298)=<1,s(6099)=<E'/2]

###### Computing sum for s(6088)=<2*B+E-2*B'-E'  in Loop 295 
   - Applying inductive sum strategy 
     - head Candidate: 3/2*B+3/2*D-9/2 
       - Loop 296 is collaborative and bounds [it(296)] 
       - Loop 297 is collaborative
       - Loop 298 is collaborative
     - head Candidate: -A+2*B+2*D-5 
       - Loop 296 is collaborative and bounds [it(296)] 
       - Loop 297 is collaborative
       - Loop 298 is collaborative
     - tail Candidate: 3/2*B+3/2*D-9/2 
       - Loop 296 is collaborative and bounds [it(296)] 
       - Loop 297 is collaborative and bounds [it(297)] 
       - Loop 298 is collaborative and bounds [it(298)] 
     - tail Candidate: -A+2*B+2*D-5 
       - Loop 296 is collaborative and bounds [it(296)] 
       - Loop 297 is collaborative and bounds [it(297)] 
       - Loop 298 is collaborative and bounds [it(298)] 
 * Adding constraints: [it(296)+s(6088)=<3/2*B+3/2*D-9/2,it(296)+s(6088)=< -A+2*B+2*D-5,it(296)+it(297)+it(298)+s(6088)=<3/2*B+3/2*D-3/2*B'-3/2*D',it(296)+it(297)+it(298)+s(6088)=< -A+2*B+2*D+A'-2*B'-2*D'] 

##### Pending set A
* Psum in Loop 295: [s(6087)=<2*B+2*E-2*B'-E',s(6085)=<E,s(6086)=<E+1,s(6080)=<E/2,s(6084)=<3/2*E]
* Psum in Loop 296: [it(296)=<1,s(6097)=< -B+B'+D'+E'+1,s(6093)=< -B+B'+E'+1,s(6094)=< -B+B'+E'+2,s(6095)=<B-B',s(6092)=< -3/2*B+3/2*B'+3/2*E'+3/2,s(6089)=< -B/2+B'/2+E'/2+1/2,s(6098)=<D',s(6096)=<E']
* Psum in Loop 297: [it(297)=<1]
* Psum in Loop 298: [it(298)=<1,s(6099)=<E'/2]

###### Computing sum for s(6087)=<2*B+2*E-2*B'-E'  in Loop 295 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(617)=<2*E+2,aux(617)=<D+E+1] 
 * Adding constraints: [s(6087)=<it(295)*aux(617)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(617)=<D+E+1,aux(617)=<2*E+2]
* Psum in Loop 295: [s(6085)=<E,s(6086)=<E+1,s(6080)=<E/2,s(6084)=<3/2*E]
* Psum in Loop 296: [it(296)=<1,s(6097)=< -B+B'+D'+E'+1,s(6093)=< -B+B'+E'+1,s(6094)=< -B+B'+E'+2,s(6095)=<B-B',s(6092)=< -3/2*B+3/2*B'+3/2*E'+3/2,s(6089)=< -B/2+B'/2+E'/2+1/2,s(6098)=<D',s(6096)=<E']
* Psum in Loop 297: [it(297)=<1]
* Psum in Loop 298: [it(298)=<1,s(6099)=<E'/2]

###### Computing max_min for aux(617)=<D+E+1  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(617)=<3*B+D+E+1] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(617)=<2*E+2]
* Psum in Loop 295: [s(6085)=<E,s(6086)=<E+1,s(6080)=<E/2,s(6084)=<3/2*E]
* Psum in Loop 296: [it(296)=<1,s(6097)=< -B+B'+D'+E'+1,s(6093)=< -B+B'+E'+1,s(6094)=< -B+B'+E'+2,s(6095)=<B-B',s(6092)=< -3/2*B+3/2*B'+3/2*E'+3/2,s(6089)=< -B/2+B'/2+E'/2+1/2,s(6098)=<D',s(6096)=<E']
* Psum in Loop 297: [it(297)=<1]
* Psum in Loop 298: [it(298)=<1,s(6099)=<E'/2]

###### Computing max_min for aux(617)=<2*E+2  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(617)=<4*B+2*E+2] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 295: [s(6085)=<E,s(6086)=<E+1,s(6080)=<E/2,s(6084)=<3/2*E]
* Psum in Loop 296: [it(296)=<1,s(6097)=< -B+B'+D'+E'+1,s(6093)=< -B+B'+E'+1,s(6094)=< -B+B'+E'+2,s(6095)=<B-B',s(6092)=< -3/2*B+3/2*B'+3/2*E'+3/2,s(6089)=< -B/2+B'/2+E'/2+1/2,s(6098)=<D',s(6096)=<E']
* Psum in Loop 297: [it(297)=<1]
* Psum in Loop 298: [it(298)=<1,s(6099)=<E'/2]

###### Computing sum for s(6085)=<E  in Loop 295 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(618)=<E] 
 * Adding constraints: [s(6085)=<it(295)*aux(618)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(618)=<E]
* Psum in Loop 295: [s(6086)=<E+1,s(6080)=<E/2,s(6084)=<3/2*E]
* Psum in Loop 296: [it(296)=<1,s(6097)=< -B+B'+D'+E'+1,s(6093)=< -B+B'+E'+1,s(6094)=< -B+B'+E'+2,s(6095)=<B-B',s(6092)=< -3/2*B+3/2*B'+3/2*E'+3/2,s(6089)=< -B/2+B'/2+E'/2+1/2,s(6098)=<D',s(6096)=<E']
* Psum in Loop 297: [it(297)=<1]
* Psum in Loop 298: [it(298)=<1,s(6099)=<E'/2]

###### Computing max_min for aux(618)=<E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(618)=<aux(617)* (1/2)-1] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 295: [s(6086)=<E+1,s(6080)=<E/2,s(6084)=<3/2*E]
* Psum in Loop 296: [it(296)=<1,s(6097)=< -B+B'+D'+E'+1,s(6093)=< -B+B'+E'+1,s(6094)=< -B+B'+E'+2,s(6095)=<B-B',s(6092)=< -3/2*B+3/2*B'+3/2*E'+3/2,s(6089)=< -B/2+B'/2+E'/2+1/2,s(6098)=<D',s(6096)=<E']
* Psum in Loop 297: [it(297)=<1]
* Psum in Loop 298: [it(298)=<1,s(6099)=<E'/2]

###### Computing sum for s(6086)=<E+1  in Loop 295 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(619)=<E+1] 
 * Adding constraints: [s(6086)=<it(295)*aux(619)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(619)=<E+1]
* Psum in Loop 295: [s(6080)=<E/2,s(6084)=<3/2*E]
* Psum in Loop 296: [it(296)=<1,s(6097)=< -B+B'+D'+E'+1,s(6093)=< -B+B'+E'+1,s(6094)=< -B+B'+E'+2,s(6095)=<B-B',s(6092)=< -3/2*B+3/2*B'+3/2*E'+3/2,s(6089)=< -B/2+B'/2+E'/2+1/2,s(6098)=<D',s(6096)=<E']
* Psum in Loop 297: [it(297)=<1]
* Psum in Loop 298: [it(298)=<1,s(6099)=<E'/2]

###### Computing max_min for aux(619)=<E+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(619)=<aux(617)* (1/2)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 295: [s(6080)=<E/2,s(6084)=<3/2*E]
* Psum in Loop 296: [it(296)=<1,s(6097)=< -B+B'+D'+E'+1,s(6093)=< -B+B'+E'+1,s(6094)=< -B+B'+E'+2,s(6095)=<B-B',s(6092)=< -3/2*B+3/2*B'+3/2*E'+3/2,s(6089)=< -B/2+B'/2+E'/2+1/2,s(6098)=<D',s(6096)=<E']
* Psum in Loop 297: [it(297)=<1]
* Psum in Loop 298: [it(298)=<1,s(6099)=<E'/2]

###### Computing sum for s(6080)=<E/2  in Loop 295 
   - Found a solution using cacheing 
 * Adding constraints: [s(6080)=<aux(620)* (1/2),aux(620)=<it(295)*aux(618)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 295: [s(6084)=<3/2*E]
* Psum in Loop 296: [it(296)=<1,s(6097)=< -B+B'+D'+E'+1,s(6093)=< -B+B'+E'+1,s(6094)=< -B+B'+E'+2,s(6095)=<B-B',s(6092)=< -3/2*B+3/2*B'+3/2*E'+3/2,s(6089)=< -B/2+B'/2+E'/2+1/2,s(6098)=<D',s(6096)=<E']
* Psum in Loop 297: [it(297)=<1]
* Psum in Loop 298: [it(298)=<1,s(6099)=<E'/2]

###### Computing sum for s(6084)=<3/2*E  in Loop 295 
   - Found a solution using cacheing 
 * Adding constraints: [s(6084)=<aux(621)* (3/2),aux(621)=<it(295)*aux(618)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 296: [it(296)=<1,s(6097)=< -B+B'+D'+E'+1,s(6093)=< -B+B'+E'+1,s(6094)=< -B+B'+E'+2,s(6095)=<B-B',s(6092)=< -3/2*B+3/2*B'+3/2*E'+3/2,s(6089)=< -B/2+B'/2+E'/2+1/2,s(6098)=<D',s(6096)=<E']
* Psum in Loop 297: [it(297)=<1]
* Psum in Loop 298: [it(298)=<1,s(6099)=<E'/2]

###### Computing sum for it(296)=<1  in Loop 296 
   - Applying inductive sum strategy 
     - head Candidate: B+E/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+D+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B/2+1/2 
       - Loop 295 is collaborative
       - Loop 297 is collaborative
       - Loop 298 is collaborative and bounds [it(298)] 
     - head Candidate: B+E 
       - Loop 295 adds an expression [D'-3,-D+D'-1]
       - Loop 297 is collaborative and bounds [it(297)] 
       - Loop 298 adds an expression [G-2,D'-2]
     - tail Candidate: B+E/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+D+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B/2+1/2 
       - Loop 295 is collaborative
       - Loop 297 is collaborative
       - Loop 298 is collaborative and bounds [it(298)] 
     - tail Candidate: B+E 
       - Loop 295 adds an expression [D'-3,-D+D'-1]
       - Loop 297 is collaborative and bounds [it(297)] 
       - Loop 298 adds an expression [G-2,D'-2]
 * Adding constraints: [it(296)+it(297)=<aux(623)+aux(622)+aux(624),it(296)+it(297)=<aux(626)+aux(625)+aux(627),it(295)+it(296)+it(297)+it(298)=<B+E/2+1/2,it(295)+it(296)+it(297)+it(298)=<B+1,it(295)+it(296)+it(297)+it(298)=<A-1,it(295)+it(296)+it(297)+it(298)=<B+D+1,it(295)+it(296)+it(297)+it(298)=<A-1,it(296)+it(298)=<B/2+1/2,aux(624)=<B+E,it(295)+it(296)+it(297)+it(298)=<B+E/2-B'-E'/2,it(295)+it(296)+it(297)+it(298)=<B-B',it(295)+it(296)+it(297)+it(298)=<A-A',it(295)+it(296)+it(297)+it(298)=<B+D-B'-D',it(295)+it(296)+it(297)+it(298)=<A-A',it(296)+it(298)=<B/2-B'/2,aux(627)=<B+E-B'-E'] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 295: [aux(622)=< -D+D'-1,aux(625)=< -D+D'-1,aux(622)=<D'-3,aux(625)=<D'-3]
* Psum in Loop 296: [s(6097)=< -B+B'+D'+E'+1,s(6093)=< -B+B'+E'+1,s(6094)=< -B+B'+E'+2,s(6095)=<B-B',s(6092)=< -3/2*B+3/2*B'+3/2*E'+3/2,s(6089)=< -B/2+B'/2+E'/2+1/2,s(6098)=<D',s(6096)=<E']
* Psum in Loop 297: [it(297)=<1]
* Psum in Loop 298: [it(298)=<1,s(6099)=<E'/2,aux(623)=<G-2,aux(626)=<G-2,aux(623)=<D'-2,aux(626)=<D'-2]

###### Computing sum for aux(622)=< -D+D'-1  in Loop 295 
   - Applying inductive sum strategy 
     - head Candidate: -A+B-1 
       - Loop 296 is collaborative
       - Loop 297 is collaborative
       - Loop 298 is collaborative
     - head Candidate: B-3 
       - Loop 296 is collaborative
       - Loop 297 is collaborative
       - Loop 298 is collaborative
     - tail Candidate: -A+B-1 
       - Loop 296 is collaborative
       - Loop 297 is collaborative
       - Loop 298 is collaborative and bounds [it(298)] 
     - tail Candidate: B-3 
       - Loop 296 is collaborative and bounds [s(6095)] 
       - Loop 297 is collaborative and bounds [it(297)] 
       - Loop 298 is collaborative and bounds [it(298)] 
 * Adding constraints: [aux(622)=< -A+B-1,aux(622)=<B-3,aux(622)+it(298)=< -A+B+A'-B',aux(622)+it(297)+it(298)+s(6095)=<B-B'] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 295: [aux(625)=< -D+D'-1,aux(622)=<D'-3,aux(625)=<D'-3]
* Psum in Loop 296: [s(6097)=< -B+B'+D'+E'+1,s(6093)=< -B+B'+E'+1,s(6094)=< -B+B'+E'+2,s(6095)=<B-B',s(6092)=< -3/2*B+3/2*B'+3/2*E'+3/2,s(6089)=< -B/2+B'/2+E'/2+1/2,s(6098)=<D',s(6096)=<E']
* Psum in Loop 297: [it(297)=<1]
* Psum in Loop 298: [it(298)=<1,s(6099)=<E'/2,aux(623)=<G-2,aux(626)=<G-2,aux(623)=<D'-2,aux(626)=<D'-2]

###### Computing sum for aux(625)=< -D+D'-1  in Loop 295 
   - Found a solution using cacheing 
 * Adding constraints: [aux(625)=<aux(628),aux(628)=< -A+B-1,aux(628)=<B-3,aux(628)+it(298)=< -A+B+A'-B',aux(628)+it(297)+it(298)+s(6095)=<B-B'] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 295: [aux(622)=<D'-3,aux(625)=<D'-3]
* Psum in Loop 296: [s(6097)=< -B+B'+D'+E'+1,s(6093)=< -B+B'+E'+1,s(6094)=< -B+B'+E'+2,s(6095)=<B-B',s(6092)=< -3/2*B+3/2*B'+3/2*E'+3/2,s(6089)=< -B/2+B'/2+E'/2+1/2,s(6098)=<D',s(6096)=<E']
* Psum in Loop 297: [it(297)=<1]
* Psum in Loop 298: [it(298)=<1,s(6099)=<E'/2,aux(623)=<G-2,aux(626)=<G-2,aux(623)=<D'-2,aux(626)=<D'-2]

###### Computing sum for aux(622)=<D'-3  in Loop 295 
   - Applying inductive sum strategy 
     - head Candidate: B-3 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -A+B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-3 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -A+B-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [aux(622)=<B-3,aux(622)=< -A+B-1,aux(622)+it(297)+it(298)+s(6095)=<B-B',aux(622)+it(298)=< -A+B+A'-B'] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 295: [aux(625)=<D'-3]
* Psum in Loop 296: [s(6097)=< -B+B'+D'+E'+1,s(6093)=< -B+B'+E'+1,s(6094)=< -B+B'+E'+2,s(6095)=<B-B',s(6092)=< -3/2*B+3/2*B'+3/2*E'+3/2,s(6089)=< -B/2+B'/2+E'/2+1/2,s(6098)=<D',s(6096)=<E']
* Psum in Loop 297: [it(297)=<1]
* Psum in Loop 298: [it(298)=<1,s(6099)=<E'/2,aux(623)=<G-2,aux(626)=<G-2,aux(623)=<D'-2,aux(626)=<D'-2]

###### Computing sum for aux(625)=<D'-3  in Loop 295 
   - Found a solution using cacheing 
 * Adding constraints: [aux(625)=<aux(629),aux(629)=<B-3,aux(629)=< -A+B-1,aux(629)+it(297)+it(298)+s(6095)=<B-B',aux(629)+it(298)=< -A+B+A'-B'] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 296: [s(6097)=< -B+B'+D'+E'+1,s(6093)=< -B+B'+E'+1,s(6094)=< -B+B'+E'+2,s(6095)=<B-B',s(6092)=< -3/2*B+3/2*B'+3/2*E'+3/2,s(6089)=< -B/2+B'/2+E'/2+1/2,s(6098)=<D',s(6096)=<E']
* Psum in Loop 297: [it(297)=<1]
* Psum in Loop 298: [it(298)=<1,s(6099)=<E'/2,aux(623)=<G-2,aux(626)=<G-2,aux(623)=<D'-2,aux(626)=<D'-2]

###### Computing sum for s(6097)=< -B+B'+D'+E'+1  in Loop 296 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(630)=<D+E] 
 * Adding constraints: [s(6097)=<it(296)*aux(630)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(630)=<D+E]
* Psum in Loop 296: [s(6093)=< -B+B'+E'+1,s(6094)=< -B+B'+E'+2,s(6095)=<B-B',s(6092)=< -3/2*B+3/2*B'+3/2*E'+3/2,s(6089)=< -B/2+B'/2+E'/2+1/2,s(6098)=<D',s(6096)=<E']
* Psum in Loop 297: [it(297)=<1]
* Psum in Loop 298: [it(298)=<1,s(6099)=<E'/2,aux(623)=<G-2,aux(626)=<G-2,aux(623)=<D'-2,aux(626)=<D'-2]

###### Computing max_min for aux(630)=<D+E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(630)=<aux(617)-1] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 296: [s(6093)=< -B+B'+E'+1,s(6094)=< -B+B'+E'+2,s(6095)=<B-B',s(6092)=< -3/2*B+3/2*B'+3/2*E'+3/2,s(6089)=< -B/2+B'/2+E'/2+1/2,s(6098)=<D',s(6096)=<E']
* Psum in Loop 297: [it(297)=<1]
* Psum in Loop 298: [it(298)=<1,s(6099)=<E'/2,aux(623)=<G-2,aux(626)=<G-2,aux(623)=<D'-2,aux(626)=<D'-2]

###### Computing sum for s(6093)=< -B+B'+E'+1  in Loop 296 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(631)=<E] 
 * Adding constraints: [s(6093)=<it(296)*aux(631)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(631)=<E]
* Psum in Loop 296: [s(6094)=< -B+B'+E'+2,s(6095)=<B-B',s(6092)=< -3/2*B+3/2*B'+3/2*E'+3/2,s(6089)=< -B/2+B'/2+E'/2+1/2,s(6098)=<D',s(6096)=<E']
* Psum in Loop 297: [it(297)=<1]
* Psum in Loop 298: [it(298)=<1,s(6099)=<E'/2,aux(623)=<G-2,aux(626)=<G-2,aux(623)=<D'-2,aux(626)=<D'-2]

###### Computing max_min for aux(631)=<E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(631)=<aux(617)* (1/2)-1] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 296: [s(6094)=< -B+B'+E'+2,s(6095)=<B-B',s(6092)=< -3/2*B+3/2*B'+3/2*E'+3/2,s(6089)=< -B/2+B'/2+E'/2+1/2,s(6098)=<D',s(6096)=<E']
* Psum in Loop 297: [it(297)=<1]
* Psum in Loop 298: [it(298)=<1,s(6099)=<E'/2,aux(623)=<G-2,aux(626)=<G-2,aux(623)=<D'-2,aux(626)=<D'-2]

###### Computing sum for s(6094)=< -B+B'+E'+2  in Loop 296 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(632)=<E+1] 
 * Adding constraints: [s(6094)=<it(296)*aux(632)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(632)=<E+1]
* Psum in Loop 296: [s(6095)=<B-B',s(6092)=< -3/2*B+3/2*B'+3/2*E'+3/2,s(6089)=< -B/2+B'/2+E'/2+1/2,s(6098)=<D',s(6096)=<E']
* Psum in Loop 297: [it(297)=<1]
* Psum in Loop 298: [it(298)=<1,s(6099)=<E'/2,aux(623)=<G-2,aux(626)=<G-2,aux(623)=<D'-2,aux(626)=<D'-2]

###### Computing max_min for aux(632)=<E+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(632)=<aux(617)* (1/2)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 296: [s(6095)=<B-B',s(6092)=< -3/2*B+3/2*B'+3/2*E'+3/2,s(6089)=< -B/2+B'/2+E'/2+1/2,s(6098)=<D',s(6096)=<E']
* Psum in Loop 297: [it(297)=<1]
* Psum in Loop 298: [it(298)=<1,s(6099)=<E'/2,aux(623)=<G-2,aux(626)=<G-2,aux(623)=<D'-2,aux(626)=<D'-2]

###### Computing sum for s(6095)=<B-B'  in Loop 296 
   - Applying inductive sum strategy 
     - head Candidate: -2*A+2*B+2 
       - Loop 295 is collaborative
       - Loop 297 is collaborative
       - Loop 298 is collaborative and bounds [it(298)] 
     - head Candidate: B 
       - Loop 295 is collaborative
       - Loop 297 is collaborative and bounds [it(297)] 
       - Loop 298 is collaborative and bounds [it(298)] 
     - tail Candidate: -2*A+2*B+2 
       - Loop 295 is collaborative
       - Loop 297 is collaborative
       - Loop 298 is collaborative and bounds [it(298)] 
     - tail Candidate: B 
       - Loop 295 is collaborative
       - Loop 297 is collaborative and bounds [it(297)] 
       - Loop 298 is collaborative and bounds [it(298)] 
 * Adding constraints: [it(298)+s(6095)=< -2*A+2*B+2,it(297)+it(298)+s(6095)=<B,it(298)+s(6095)=< -2*A+2*B+2*A'-2*B',it(297)+it(298)+s(6095)=<B-B'] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 296: [s(6092)=< -3/2*B+3/2*B'+3/2*E'+3/2,s(6089)=< -B/2+B'/2+E'/2+1/2,s(6098)=<D',s(6096)=<E']
* Psum in Loop 297: [it(297)=<1]
* Psum in Loop 298: [it(298)=<1,s(6099)=<E'/2,aux(623)=<G-2,aux(626)=<G-2,aux(623)=<D'-2,aux(626)=<D'-2]

###### Computing sum for s(6092)=< -3/2*B+3/2*B'+3/2*E'+3/2  in Loop 296 
   - Found a solution using cacheing 
 * Adding constraints: [s(6092)=<aux(633)* (3/2),aux(633)=<it(296)*aux(631)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 296: [s(6089)=< -B/2+B'/2+E'/2+1/2,s(6098)=<D',s(6096)=<E']
* Psum in Loop 297: [it(297)=<1]
* Psum in Loop 298: [it(298)=<1,s(6099)=<E'/2,aux(623)=<G-2,aux(626)=<G-2,aux(623)=<D'-2,aux(626)=<D'-2]

###### Computing sum for s(6089)=< -B/2+B'/2+E'/2+1/2  in Loop 296 
   - Found a solution using cacheing 
 * Adding constraints: [s(6089)=<aux(634)* (1/2),aux(634)=<it(296)*aux(631)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 296: [s(6098)=<D',s(6096)=<E']
* Psum in Loop 297: [it(297)=<1]
* Psum in Loop 298: [it(298)=<1,s(6099)=<E'/2,aux(623)=<G-2,aux(626)=<G-2,aux(623)=<D'-2,aux(626)=<D'-2]

###### Computing sum for s(6098)=<D'  in Loop 296 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(635)=<D] 
 * Adding constraints: [s(6098)=<it(296)*aux(635)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(635)=<D]
* Psum in Loop 296: [s(6096)=<E']
* Psum in Loop 297: [it(297)=<1]
* Psum in Loop 298: [it(298)=<1,s(6099)=<E'/2,aux(623)=<G-2,aux(626)=<G-2,aux(623)=<D'-2,aux(626)=<D'-2]

###### Computing max_min for aux(635)=<D  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(635)=<B+D] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 296: [s(6096)=<E']
* Psum in Loop 297: [it(297)=<1]
* Psum in Loop 298: [it(298)=<1,s(6099)=<E'/2,aux(623)=<G-2,aux(626)=<G-2,aux(623)=<D'-2,aux(626)=<D'-2]

###### Computing sum for s(6096)=<E'  in Loop 296 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(636)=<2*E,aux(636)=<D+E-1] 
 * Adding constraints: [s(6096)=<it(296)*aux(636)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(636)=<D+E-1,aux(636)=<2*E]
* Psum in Loop 297: [it(297)=<1]
* Psum in Loop 298: [it(298)=<1,s(6099)=<E'/2,aux(623)=<G-2,aux(626)=<G-2,aux(623)=<D'-2,aux(626)=<D'-2]

###### Computing max_min for aux(636)=<D+E-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(636)=<aux(617)-2] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(636)=<2*E]
* Psum in Loop 297: [it(297)=<1]
* Psum in Loop 298: [it(298)=<1,s(6099)=<E'/2,aux(623)=<G-2,aux(626)=<G-2,aux(623)=<D'-2,aux(626)=<D'-2]

###### Computing max_min for aux(636)=<2*E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(636)=<aux(617)-2] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 297: [it(297)=<1]
* Psum in Loop 298: [it(298)=<1,s(6099)=<E'/2,aux(623)=<G-2,aux(626)=<G-2,aux(623)=<D'-2,aux(626)=<D'-2]

###### Computing sum for it(297)=<1  in Loop 297 
   - Applying inductive sum strategy 
     - head Candidate: B+E/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+D+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+E/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+D+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(295)+it(296)+it(297)+it(298)=<B+E/2+1/2,it(295)+it(296)+it(297)+it(298)=<B+1,it(295)+it(296)+it(297)+it(298)=<A-1,it(295)+it(296)+it(297)+it(298)=<B+D+1,it(295)+it(296)+it(297)+it(298)=<A-1,it(295)+it(296)+it(297)+it(298)=<B+1,it(295)+it(296)+it(297)+it(298)=<B+E/2-B'-E'/2,it(295)+it(296)+it(297)+it(298)=<B-B',it(295)+it(296)+it(297)+it(298)=<A-A',it(295)+it(296)+it(297)+it(298)=<B+D-B'-D',it(295)+it(296)+it(297)+it(298)=<A-A',it(295)+it(296)+it(297)+it(298)=<B-B'] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 298: [it(298)=<1,s(6099)=<E'/2,aux(623)=<G-2,aux(626)=<G-2,aux(623)=<D'-2,aux(626)=<D'-2]

###### Computing sum for it(298)=<1  in Loop 298 
   - Applying inductive sum strategy 
     - head Candidate: B+E/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+D+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -D+2 
       - Loop 295 is collaborative
       - Loop 296 is collaborative
       - Loop 297 is collaborative
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -E/2+1/2 
       - Loop 295 is collaborative
       - Loop 296 is collaborative
       - Loop 297 is collaborative
     - head Candidate: B/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+D 
       - Loop 295 is collaborative
       - Loop 296 is collaborative
       - Loop 297 is collaborative
     - head Candidate: B+E/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+E/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+D+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -D+2 
       - Loop 295 is collaborative
       - Loop 296 is collaborative
       - Loop 297 is collaborative
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -E/2+1/2 
       - Loop 295 is collaborative
       - Loop 296 is collaborative
       - Loop 297 is collaborative
     - tail Candidate: B/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+D 
       - Loop 295 is collaborative
       - Loop 296 is collaborative
       - Loop 297 is collaborative
     - tail Candidate: B+E/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(295)+it(296)+it(297)+it(298)=<B+E/2+1/2,it(295)+it(296)+it(297)+it(298)=<B+1,it(295)+it(296)+it(297)+it(298)=<A-1,it(295)+it(296)+it(297)+it(298)=<B+D+1,it(298)=< -D+2,it(295)+it(296)+it(297)+it(298)=<A-1,it(298)=< -E/2+1/2,it(296)+it(298)=<B/2+1/2,it(298)=<B+D,it(295)+it(296)+it(297)+it(298)=<B+E/2+1/2,it(295)+it(296)+it(297)+it(298)=<B+E/2-B'-E'/2,it(295)+it(296)+it(297)+it(298)=<B-B',it(295)+it(296)+it(297)+it(298)=<A-A',it(295)+it(296)+it(297)+it(298)=<B+D-B'-D',it(298)=< -D+D',it(295)+it(296)+it(297)+it(298)=<A-A',it(298)=< -E/2+E'/2,it(296)+it(298)=<B/2-B'/2,it(298)=<B+D-B'-D',it(295)+it(296)+it(297)+it(298)=<B+E/2-B'-E'/2] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 298: [s(6099)=<E'/2,aux(623)=<G-2,aux(626)=<G-2,aux(623)=<D'-2,aux(626)=<D'-2]

###### Computing sum for s(6099)=<E'/2  in Loop 298 
   - Applying inductive sum strategy 
     - head Candidate: B-1 
       - Loop 295 is collaborative
       - Loop 296 is collaborative
       - Loop 297 is collaborative
     - head Candidate: -A+B+1 
       - Loop 295 is collaborative
       - Loop 296 is collaborative
       - Loop 297 is collaborative
     - tail Candidate: B-1 
       - Loop 295 is collaborative
       - Loop 296 is collaborative
       - Loop 297 is collaborative
     - tail Candidate: -A+B+1 
       - Loop 295 is collaborative
       - Loop 296 is collaborative
       - Loop 297 is collaborative
 * Adding constraints: [s(6099)=<B-1,s(6099)=< -A+B+1,s(6099)=<B-B',s(6099)=< -A+B+A'-B'] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 298: [aux(623)=<G-2,aux(626)=<G-2,aux(623)=<D'-2,aux(626)=<D'-2]

###### Computing sum for aux(623)=<G-2  in Loop 298 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(637)=< -A+B,aux(637)=<B-2] 
 * Adding constraints: [aux(623)=<it(298)*aux(637)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(637)=< -A+B,aux(637)=<B-2]
* Psum in Loop 298: [aux(626)=<G-2,aux(623)=<D'-2,aux(626)=<D'-2]

###### Computing max_min for aux(637)=< -A+B  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(637)=< -A+B,aux(637)=<B-2] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(637)=<B-2]
* Psum in Loop 298: [aux(626)=<G-2,aux(623)=<D'-2,aux(626)=<D'-2]

###### Computing max_min for aux(637)=<B-2  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(637)=<B-2] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 298: [aux(626)=<G-2,aux(623)=<D'-2,aux(626)=<D'-2]

###### Computing sum for aux(626)=<G-2  in Loop 298 
   - Found a solution using cacheing 
 * Adding constraints: [aux(626)=<aux(638),aux(638)=<it(298)*aux(637)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 298: [aux(623)=<D'-2,aux(626)=<D'-2]

###### Computing sum for aux(623)=<D'-2  in Loop 298 
   - Applying inductive sum strategy 
     - head Candidate: B-D+E/2-1 
       - Loop 295 is collaborative
       - Loop 296 is collaborative
       - Loop 297 is collaborative
     - head Candidate: -A+B-D+E/2+1 
       - Loop 295 is collaborative
       - Loop 296 is collaborative
       - Loop 297 is collaborative
     - tail Candidate: B-D+E/2-1 
       - Loop 295 is collaborative
       - Loop 296 is collaborative
       - Loop 297 is collaborative
     - tail Candidate: -A+B-D+E/2+1 
       - Loop 295 is collaborative
       - Loop 296 is collaborative
       - Loop 297 is collaborative
 * Adding constraints: [aux(623)=<B-D+E/2-1,aux(623)=< -A+B-D+E/2+1,aux(623)=<B-D+E/2-B'+D'-E'/2,aux(623)=< -A+B-D+E/2+A'-B'+D'-E'/2] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 298: [aux(626)=<D'-2]

###### Computing sum for aux(626)=<D'-2  in Loop 298 
   - Found a solution using cacheing 
 * Adding constraints: [aux(626)=<aux(639),aux(639)=<B-D+E/2-1,aux(639)=< -A+B-D+E/2+1,aux(639)=<B-D+E/2-B'+D'-E'/2,aux(639)=< -A+B-D+E/2+A'-B'+D'-E'/2] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [295,296,297,298] 

#### Simplifying cost structure of phase [295,296,297,298] 
 * Joined equivalent variables [aux(663),aux(635)] into aux(663)
 * Joined equivalent variables [aux(619),aux(632)] into aux(619)
 * Joined equivalent variables [aux(618),aux(631)] into aux(618)
 * Joined equivalent variables [aux(620),aux(621),s(6085)] into aux(620)
 * Joined equivalent variables [aux(633),aux(634),s(6093)] into aux(633)
 * Joined equivalent variables [aux(622),aux(628),aux(629)] into aux(622)
 * Joined equivalent variables [aux(622),aux(625)] into aux(622)

#### Cost of phase [295,296,297,298]:transpose_helper(A,B,C,D,E,F,G,H,I) -> [transpose_helper(A',B',C',D',E',F',G',H',I')] 
7*it(295)+7*it(296)+7*it(297)+7*it(298)+10*s(6079)+13*s(6080)+13*s(6081)+5*s(6082)+13*s(6089)+13*s(6090)+5*s(6091)+10*s(6099)+0
  Such that:s(6083) =< -3*A+3*B+E
s(6099) =< -A+B+1
aux(624) =< B+E
aux(627) =< B+E-B'-E'
aux(617) =< 3*B+D+E+1
aux(617) =< 4*B+2*E+2
it(295) =< B/3+1/3
it(295) =< B/3-B'/3
it(298) =< -D+2
it(298) =< -D+D'
it(298) =< -E/2+1/2
it(298) =< -E/2+E'/2
aux(640) =< -3*A+3*B+E+3*A'-3*B'-E'
aux(641) =< -2*A+2*B+2
aux(642) =< -2*A+2*B+2*A'-2*B'
aux(643) =< -A+B
aux(644) =< -A+B-D+2
aux(645) =< -A+B-D+E/2+1
aux(646) =< -A+B-D+E/2+A'-B'+D'-E'/2
aux(647) =< -A+B-D+A'-B'+D'
aux(648) =< -A+B+A'-B'
aux(649) =< -A+2*B+2*D
aux(650) =< -A+2*B+2*D+A'-2*B'-2*D'
aux(651) =< A
aux(652) =< A-A'
aux(653) =< -3/2*A+3/2*B+3/2
aux(654) =< -3/2*A+3/2*B+3/2*A'-3/2*B'
aux(655) =< B
aux(656) =< B+1
aux(657) =< B-D
aux(658) =< B-D+E+2
aux(659) =< B-D+E-B'+D'-E'
aux(660) =< B-D+E/2
aux(661) =< B-D+E/2-B'+D'-E'/2
aux(662) =< B-D-B'+D'
aux(663) =< B+D
aux(664) =< B+D+1
aux(665) =< B+D-B'-D'
aux(666) =< B+E/2+1/2
aux(667) =< B+E/2-B'-E'/2
aux(668) =< B-B'
aux(669) =< B/2+1/2
aux(670) =< B/2+D/2
aux(671) =< B/2+D/2-B'/2-D'/2
aux(672) =< B/2-B'/2
aux(673) =< 3/2*B+3/2*D
aux(674) =< 3/2*B+3/2*D-3/2*B'-3/2*D'
it(296) =< aux(640)
it(298) =< aux(640)
s(6083) =< aux(640)
it(298) =< aux(641)
s(6095) =< aux(641)
it(298) =< aux(642)
s(6095) =< aux(642)
aux(622) =< aux(643)
aux(637) =< aux(643)
it(298) =< aux(644)
s(6079) =< aux(644)
aux(623) =< aux(645)
aux(639) =< aux(645)
aux(623) =< aux(646)
aux(639) =< aux(646)
it(296) =< aux(647)
it(298) =< aux(647)
s(6079) =< aux(647)
aux(622) =< aux(648)
it(298) =< aux(648)
s(6099) =< aux(648)
it(296) =< aux(649)
s(6088) =< aux(649)
it(296) =< aux(650)
it(297) =< aux(650)
it(298) =< aux(650)
s(6088) =< aux(650)
it(295) =< aux(651)
it(296) =< aux(651)
it(297) =< aux(651)
it(298) =< aux(651)
it(295) =< aux(652)
it(296) =< aux(652)
it(297) =< aux(652)
it(298) =< aux(652)
it(296) =< aux(653)
it(298) =< aux(653)
s(6083) =< aux(653)
it(296) =< aux(654)
it(298) =< aux(654)
s(6083) =< aux(654)
aux(622) =< aux(655)
aux(637) =< aux(655)
it(297) =< aux(655)
it(298) =< aux(655)
s(6095) =< aux(655)
s(6099) =< aux(655)
it(295) =< aux(656)
it(296) =< aux(656)
it(297) =< aux(656)
it(298) =< aux(656)
it(298) =< aux(657)
s(6079) =< aux(657)
it(295) =< aux(658)
it(298) =< aux(658)
it(295) =< aux(659)
it(296) =< aux(659)
it(297) =< aux(659)
it(298) =< aux(659)
aux(623) =< aux(660)
aux(639) =< aux(660)
aux(623) =< aux(661)
aux(639) =< aux(661)
it(296) =< aux(662)
it(297) =< aux(662)
it(298) =< aux(662)
s(6079) =< aux(662)
it(298) =< aux(663)
it(295) =< aux(664)
it(296) =< aux(664)
it(297) =< aux(664)
it(298) =< aux(664)
it(295) =< aux(665)
it(296) =< aux(665)
it(297) =< aux(665)
it(298) =< aux(665)
it(295) =< aux(666)
it(296) =< aux(666)
it(297) =< aux(666)
it(298) =< aux(666)
it(295) =< aux(667)
it(296) =< aux(667)
it(297) =< aux(667)
it(298) =< aux(667)
aux(622) =< aux(668)
it(295) =< aux(668)
it(296) =< aux(668)
it(297) =< aux(668)
it(298) =< aux(668)
s(6095) =< aux(668)
s(6099) =< aux(668)
it(296) =< aux(669)
it(298) =< aux(669)
it(295) =< aux(670)
it(296) =< aux(670)
it(295) =< aux(671)
it(296) =< aux(671)
it(296) =< aux(672)
it(298) =< aux(672)
it(296) =< aux(673)
s(6088) =< aux(673)
it(296) =< aux(674)
it(297) =< aux(674)
it(298) =< aux(674)
s(6088) =< aux(674)
aux(636) =< aux(617)-2
aux(619) =< aux(617)* (1/2)
aux(618) =< aux(617)* (1/2)-1
aux(630) =< aux(617)-1
aux(626) =< aux(639)
aux(638) =< it(298)*aux(637)
aux(623) =< it(298)*aux(637)
s(6087) =< it(295)*aux(617)
aux(626) =< aux(638)
it(296) =< aux(623)+aux(622)+aux(624)
it(297) =< aux(623)+aux(622)+aux(624)
aux(620) =< it(295)*aux(618)
s(6086) =< it(295)*aux(619)
it(296) =< aux(626)+aux(622)+aux(627)
it(297) =< aux(626)+aux(622)+aux(627)
s(6084) =< aux(620)* (3/2)
s(6080) =< aux(620)* (1/2)
s(6096) =< it(296)*aux(636)
s(6098) =< it(296)*aux(663)
aux(633) =< it(296)*aux(618)
s(6094) =< it(296)*aux(619)
s(6097) =< it(296)*aux(630)
s(6089) =< aux(633)* (1/2)
s(6092) =< aux(633)* (3/2)
s(6089) =< s(6098)
s(6090) =< s(6098)
s(6090) =< s(6097)
s(6091) =< s(6097)
s(6090) =< s(6096)
s(6091) =< s(6096)
s(6089) =< s(6095)
s(6090) =< s(6095)
s(6089) =< s(6094)
s(6090) =< s(6094)
s(6089) =< aux(633)
s(6090) =< aux(633)
s(6090) =< s(6092)
s(6091) =< s(6092)
s(6080) =< s(6088)
s(6081) =< s(6088)
s(6081) =< s(6087)
s(6082) =< s(6087)
s(6080) =< s(6086)
s(6081) =< s(6086)
s(6080) =< aux(620)
s(6081) =< aux(620)
s(6081) =< s(6084)
s(6082) =< s(6084)
s(6080) =< s(6083)
s(6081) =< s(6083)

#### Simplifying cost structure of chain [[295,296,297,298],299] 
 * Joined equivalent variables [aux(675),aux(641),aux(642)] into aux(675)
 * Joined equivalent variables [aux(676),aux(648)] into aux(676)
 * Joined equivalent variables [aux(677),aux(651),aux(652),aux(659)] into aux(677)
 * Joined equivalent variables [aux(678),aux(653),aux(654)] into aux(678)
 * Joined equivalent variables [aux(679),aux(655),aux(668)] into aux(679)

#### Cost of chains of transpose_helper(A,B,C,D,E,F,G,H,I):
* Chain [[295,296,297,298],299]: 7*it(295)+7*it(296)+7*it(297)+7*it(298)+10*s(6079)+13*s(6080)+13*s(6081)+5*s(6082)+13*s(6089)+13*s(6090)+5*s(6091)+10*s(6099)+2
  Such that:s(6083) =< -3*A+3*B+E
aux(640) =< -3*A+3*B+E-H+3
aux(649) =< -3*A+4*B+2*E+2*G-2*H+2
aux(650) =< -3*A+4*B+2*E-2*H+3
aux(643) =< -A+B
aux(644) =< -A+B-D+2
aux(645) =< -A+B-D+E/2+1
aux(663) =< -A+2*B+E+G-H+1
aux(664) =< -A+2*B+E+G-H+2
aux(665) =< -A+2*B+E-H+1
aux(617) =< -A+4*B+2*E+G-H+2
it(298) =< A-B-E+H
aux(627) =< A+D-G
aux(662) =< A-E+H
aux(661) =< A-E/2+H/2
aux(673) =< -3/2*A+3*B+3/2*E+3/2*G-3/2*H+3/2
aux(674) =< -3/2*A+3*B+3/2*E-3/2*H+3/2
aux(670) =< -A/2+B+E/2+G/2-H/2+1/2
aux(671) =< -A/2+B+E/2-H/2+1/2
aux(656) =< B+1
aux(657) =< B-D
aux(658) =< B-D+E+2
aux(660) =< B-D+E/2
aux(624) =< B+E
aux(627) =< B+E-H
aux(666) =< B+E/2+1/2
aux(667) =< B+E/2-H/2
aux(617) =< 4*B+2*E+2
aux(672) =< B/2
aux(669) =< B/2+1/2
it(295) =< B/3
it(298) =< -D+2
aux(647) =< -E+H
it(298) =< -E/2+1/2
aux(646) =< -E/2+H/2
aux(675) =< -2*A+2*B+2
aux(676) =< -A+B+1
aux(677) =< A
aux(678) =< -3/2*A+3/2*B+3/2
aux(679) =< B
s(6099) =< aux(676)
it(296) =< aux(640)
it(298) =< aux(640)
s(6083) =< aux(640)
it(298) =< aux(675)
s(6095) =< aux(675)
aux(622) =< aux(643)
aux(637) =< aux(643)
it(298) =< aux(644)
s(6079) =< aux(644)
aux(623) =< aux(645)
aux(639) =< aux(645)
aux(623) =< aux(646)
aux(639) =< aux(646)
it(296) =< aux(647)
it(298) =< aux(647)
s(6079) =< aux(647)
aux(622) =< aux(676)
it(298) =< aux(676)
it(296) =< aux(649)
s(6088) =< aux(649)
it(296) =< aux(650)
it(297) =< aux(650)
it(298) =< aux(650)
s(6088) =< aux(650)
it(295) =< aux(677)
it(296) =< aux(677)
it(297) =< aux(677)
it(298) =< aux(677)
it(296) =< aux(678)
it(298) =< aux(678)
s(6083) =< aux(678)
aux(622) =< aux(679)
aux(637) =< aux(679)
it(297) =< aux(679)
it(298) =< aux(679)
s(6095) =< aux(679)
s(6099) =< aux(679)
it(295) =< aux(656)
it(296) =< aux(656)
it(297) =< aux(656)
it(298) =< aux(656)
it(298) =< aux(657)
s(6079) =< aux(657)
it(295) =< aux(658)
it(298) =< aux(658)
aux(623) =< aux(660)
aux(639) =< aux(660)
aux(623) =< aux(661)
aux(639) =< aux(661)
it(296) =< aux(662)
it(297) =< aux(662)
it(298) =< aux(662)
s(6079) =< aux(662)
it(298) =< aux(663)
it(295) =< aux(664)
it(296) =< aux(664)
it(297) =< aux(664)
it(298) =< aux(664)
it(295) =< aux(665)
it(296) =< aux(665)
it(297) =< aux(665)
it(298) =< aux(665)
it(295) =< aux(666)
it(296) =< aux(666)
it(297) =< aux(666)
it(298) =< aux(666)
it(295) =< aux(667)
it(296) =< aux(667)
it(297) =< aux(667)
it(298) =< aux(667)
it(295) =< aux(679)
it(296) =< aux(679)
it(296) =< aux(669)
it(298) =< aux(669)
it(295) =< aux(670)
it(296) =< aux(670)
it(295) =< aux(671)
it(296) =< aux(671)
it(296) =< aux(672)
it(298) =< aux(672)
it(296) =< aux(673)
s(6088) =< aux(673)
it(296) =< aux(674)
it(297) =< aux(674)
it(298) =< aux(674)
s(6088) =< aux(674)
aux(636) =< aux(617)-2
aux(619) =< aux(617)* (1/2)
aux(618) =< aux(617)* (1/2)-1
aux(630) =< aux(617)-1
aux(626) =< aux(639)
aux(638) =< it(298)*aux(637)
aux(623) =< it(298)*aux(637)
s(6087) =< it(295)*aux(617)
aux(626) =< aux(638)
it(296) =< aux(623)+aux(622)+aux(624)
it(297) =< aux(623)+aux(622)+aux(624)
aux(620) =< it(295)*aux(618)
s(6086) =< it(295)*aux(619)
it(296) =< aux(626)+aux(622)+aux(627)
it(297) =< aux(626)+aux(622)+aux(627)
s(6084) =< aux(620)* (3/2)
s(6080) =< aux(620)* (1/2)
s(6096) =< it(296)*aux(636)
s(6098) =< it(296)*aux(663)
aux(633) =< it(296)*aux(618)
s(6094) =< it(296)*aux(619)
s(6097) =< it(296)*aux(630)
s(6089) =< aux(633)* (1/2)
s(6092) =< aux(633)* (3/2)
s(6089) =< s(6098)
s(6090) =< s(6098)
s(6090) =< s(6097)
s(6091) =< s(6097)
s(6090) =< s(6096)
s(6091) =< s(6096)
s(6089) =< s(6095)
s(6090) =< s(6095)
s(6089) =< s(6094)
s(6090) =< s(6094)
s(6089) =< aux(633)
s(6090) =< aux(633)
s(6090) =< s(6092)
s(6091) =< s(6092)
s(6080) =< s(6088)
s(6081) =< s(6088)
s(6081) =< s(6087)
s(6082) =< s(6087)
s(6080) =< s(6086)
s(6081) =< s(6086)
s(6080) =< aux(620)
s(6081) =< aux(620)
s(6081) =< s(6084)
s(6082) =< s(6084)
s(6080) =< s(6083)
s(6081) =< s(6083)

  with precondition: [A+D+H=B+E+G+1,A>=2,C>=0,D>=0,E>=0,F>=0,I>=0,G>=D,B+D+1>=A+G] 

* Chain [299]: 2
  with precondition: [A=1,B=0,D=G,E=H,F=I,C>=0,D>=0,E>=0,F>=0] 


#### Simplifying cost structure of CE 419 
 * Renamed intermediate variables: 
[ (eq(420,1),s(6083))>>s(6100), (eq(420,1),aux(640))>>s(6101), (eq(420,1),aux(649))>>s(6102), (eq(420,1),aux(650))>>s(6103), (eq(420,1),aux(643))>>s(6104), (eq(420,1),aux(644))>>s(6105), (eq(420,1),aux(645))>>s(6106), (eq(420,1),aux(663))>>s(6107), (eq(420,1),aux(664))>>s(6108), (eq(420,1),aux(665))>>s(6109), (eq(420,1),aux(617))>>s(6110), (eq(420,1),it(298))>>s(6111), (eq(420,1),aux(627))>>s(6112), (eq(420,1),aux(662))>>s(6113), (eq(420,1),aux(661))>>s(6114), (eq(420,1),aux(673))>>s(6115), (eq(420,1),aux(674))>>s(6116), (eq(420,1),aux(670))>>s(6117), (eq(420,1),aux(671))>>s(6118), (eq(420,1),aux(656))>>s(6119), (eq(420,1),aux(657))>>s(6120), (eq(420,1),aux(658))>>s(6121), (eq(420,1),aux(660))>>s(6122), (eq(420,1),aux(624))>>s(6123), (eq(420,1),aux(666))>>s(6124), (eq(420,1),aux(667))>>s(6125), (eq(420,1),aux(672))>>s(6126), (eq(420,1),aux(669))>>s(6127), (eq(420,1),it(295))>>s(6128), (eq(420,1),aux(647))>>s(6129), (eq(420,1),aux(646))>>s(6130), (eq(420,1),aux(675))>>s(6131), (eq(420,1),aux(676))>>s(6132), (eq(420,1),aux(677))>>s(6133), (eq(420,1),aux(678))>>s(6134), (eq(420,1),aux(679))>>s(6135), (eq(420,1),s(6099))>>s(6136), (eq(420,1),it(296))>>s(6137), (eq(420,1),s(6095))>>s(6138), (eq(420,1),aux(622))>>s(6139), (eq(420,1),aux(637))>>s(6140), (eq(420,1),s(6079))>>s(6141), (eq(420,1),aux(623))>>s(6142), (eq(420,1),aux(639))>>s(6143), (eq(420,1),s(6088))>>s(6144), (eq(420,1),it(297))>>s(6145), (eq(420,1),aux(636))>>s(6146), (eq(420,1),aux(619))>>s(6147), (eq(420,1),aux(618))>>s(6148), (eq(420,1),aux(630))>>s(6149), (eq(420,1),aux(626))>>s(6150), (eq(420,1),aux(638))>>s(6151), (eq(420,1),s(6087))>>s(6152), (eq(420,1),aux(620))>>s(6153), (eq(420,1),s(6086))>>s(6154), (eq(420,1),s(6084))>>s(6155), (eq(420,1),s(6080))>>s(6156), (eq(420,1),s(6096))>>s(6157), (eq(420,1),s(6098))>>s(6158), (eq(420,1),aux(633))>>s(6159), (eq(420,1),s(6094))>>s(6160), (eq(420,1),s(6097))>>s(6161), (eq(420,1),s(6089))>>s(6162), (eq(420,1),s(6092))>>s(6163), (eq(420,1),s(6090))>>s(6164), (eq(420,1),s(6091))>>s(6165), (eq(420,1),s(6081))>>s(6166), (eq(420,1),s(6082))>>s(6167)]

#### Simplifying cost structure of CE 420 
 * Joined equivalent variables [aux(682),s(6105),s(6132)] into aux(682)
 * Joined equivalent variables [aux(684),s(6133)] into aux(684)
 * Joined equivalent variables [aux(687),s(6120),s(6122),s(6123),s(6135)] into aux(687)
 * Joined equivalent variables [aux(688),s(6107),s(6119),s(6121)] into aux(688)
 * Joined equivalent variables [aux(689),s(6117),s(6127)] into aux(689)
 * Joined equivalent variables [s(6104),s(6106)] into s(6104)

#### Cost of chains of transpose(A,B,C,D,E,F):
* Chain [301]: 4
  with precondition: [A=1,B=0,D=1,E=0,C>=0,F>=0] 

* Chain [300]: 7*s(6111)+7*s(6128)+10*s(6136)+7*s(6137)+10*s(6141)+7*s(6145)+13*s(6156)+13*s(6162)+13*s(6164)+5*s(6165)+13*s(6166)+5*s(6167)+4
  Such that:s(6111) =< 1/2
s(6100) =< -3*A+3*B
s(6103) =< -3*A+4*B+3
s(6129) =< -3*A+6*B+3
s(6131) =< -2*A+2*B+2
s(6102) =< -A+2*B+2
s(6101) =< -A+3*B+3
s(6125) =< A+B
s(6103) =< A+4*B+3
s(6116) =< -3/2*A+3*B+3/2
s(6134) =< -3/2*A+3/2*B+3/2
s(6118) =< -A/2+B+1/2
s(6118) =< A/2+B+1/2
s(6108) =< B+2
s(6124) =< B+1/2
s(6113) =< 2*B+1
s(6100) =< 3*B
s(6110) =< 3*B+2
s(6113) =< 6*B+3
s(6126) =< B/2
s(6128) =< B/3
s(6115) =< 3/2*B+3/2
aux(680) =< -3*A+3*B+3
aux(681) =< -A+B
aux(682) =< -A+B+1
aux(683) =< -A+2*B+1
aux(684) =< A
aux(685) =< A+2*B+1
aux(686) =< 3/2*A+3*B+3/2
aux(687) =< B
aux(688) =< B+1
aux(689) =< B/2+1/2
s(6101) =< aux(680)
s(6130) =< aux(680)
s(6104) =< aux(681)
s(6109) =< aux(683)
s(6129) =< aux(683)
s(6112) =< aux(684)
s(6109) =< aux(685)
s(6114) =< aux(685)
s(6114) =< aux(686)
s(6116) =< aux(686)
s(6104) =< aux(687)
s(6112) =< aux(687)
s(6125) =< aux(687)
s(6130) =< aux(687)
s(6112) =< aux(688)
s(6136) =< aux(682)
s(6137) =< s(6101)
s(6111) =< s(6101)
s(6100) =< s(6101)
s(6111) =< s(6131)
s(6138) =< s(6131)
s(6139) =< s(6104)
s(6140) =< s(6104)
s(6111) =< aux(682)
s(6141) =< aux(682)
s(6142) =< s(6104)
s(6143) =< s(6104)
s(6142) =< s(6130)
s(6143) =< s(6130)
s(6137) =< s(6129)
s(6111) =< s(6129)
s(6141) =< s(6129)
s(6139) =< aux(682)
s(6137) =< s(6102)
s(6144) =< s(6102)
s(6137) =< s(6103)
s(6145) =< s(6103)
s(6111) =< s(6103)
s(6144) =< s(6103)
s(6128) =< aux(684)
s(6137) =< aux(684)
s(6145) =< aux(684)
s(6111) =< aux(684)
s(6137) =< s(6134)
s(6111) =< s(6134)
s(6100) =< s(6134)
s(6139) =< aux(687)
s(6140) =< aux(687)
s(6145) =< aux(687)
s(6111) =< aux(687)
s(6138) =< aux(687)
s(6136) =< aux(687)
s(6128) =< aux(688)
s(6137) =< aux(688)
s(6145) =< aux(688)
s(6111) =< aux(688)
s(6141) =< aux(687)
s(6142) =< aux(687)
s(6143) =< aux(687)
s(6142) =< s(6114)
s(6143) =< s(6114)
s(6137) =< s(6113)
s(6145) =< s(6113)
s(6111) =< s(6113)
s(6141) =< s(6113)
s(6128) =< s(6108)
s(6137) =< s(6108)
s(6145) =< s(6108)
s(6111) =< s(6108)
s(6128) =< s(6109)
s(6137) =< s(6109)
s(6145) =< s(6109)
s(6111) =< s(6109)
s(6128) =< s(6124)
s(6137) =< s(6124)
s(6145) =< s(6124)
s(6111) =< s(6124)
s(6128) =< s(6125)
s(6137) =< s(6125)
s(6145) =< s(6125)
s(6111) =< s(6125)
s(6128) =< aux(687)
s(6137) =< aux(687)
s(6137) =< aux(689)
s(6111) =< aux(689)
s(6128) =< aux(689)
s(6128) =< s(6118)
s(6137) =< s(6118)
s(6137) =< s(6126)
s(6111) =< s(6126)
s(6137) =< s(6115)
s(6144) =< s(6115)
s(6137) =< s(6116)
s(6145) =< s(6116)
s(6111) =< s(6116)
s(6144) =< s(6116)
s(6146) =< s(6110)-2
s(6147) =< s(6110)* (1/2)
s(6148) =< s(6110)* (1/2)-1
s(6149) =< s(6110)-1
s(6150) =< s(6143)
s(6151) =< s(6111)*s(6140)
s(6142) =< s(6111)*s(6140)
s(6152) =< s(6128)*s(6110)
s(6150) =< s(6151)
s(6137) =< s(6142)+s(6139)+aux(687)
s(6145) =< s(6142)+s(6139)+aux(687)
s(6153) =< s(6128)*s(6148)
s(6154) =< s(6128)*s(6147)
s(6137) =< s(6150)+s(6139)+s(6112)
s(6145) =< s(6150)+s(6139)+s(6112)
s(6155) =< s(6153)* (3/2)
s(6156) =< s(6153)* (1/2)
s(6157) =< s(6137)*s(6146)
s(6158) =< s(6137)*aux(688)
s(6159) =< s(6137)*s(6148)
s(6160) =< s(6137)*s(6147)
s(6161) =< s(6137)*s(6149)
s(6162) =< s(6159)* (1/2)
s(6163) =< s(6159)* (3/2)
s(6162) =< s(6158)
s(6164) =< s(6158)
s(6164) =< s(6161)
s(6165) =< s(6161)
s(6164) =< s(6157)
s(6165) =< s(6157)
s(6162) =< s(6138)
s(6164) =< s(6138)
s(6162) =< s(6160)
s(6164) =< s(6160)
s(6162) =< s(6159)
s(6164) =< s(6159)
s(6164) =< s(6163)
s(6165) =< s(6163)
s(6156) =< s(6144)
s(6166) =< s(6144)
s(6166) =< s(6152)
s(6167) =< s(6152)
s(6156) =< s(6154)
s(6166) =< s(6154)
s(6156) =< s(6153)
s(6166) =< s(6153)
s(6166) =< s(6155)
s(6167) =< s(6155)
s(6156) =< s(6100)
s(6166) =< s(6100)

  with precondition: [B+D=A+E,A>=2,C>=0,D>=1,F>=0,B+2>=A+D] 


#### Simplifying cost structure of CE 421 

#### Computing cost of phase [305] 

#### Simplifying cost structure of CE 423 

#### Cost of loops [305] 

 * loop 305:mat_mult(A,B,C,D,E,F,G,H,I) -> [mat_mult(A',B',C',D',E',F',G',H',I')] 
16
##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 305: [it(305)=<1]

###### Computing sum for it(305)=<1  in Loop 305 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
     - head Candidate: B+1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
     - tail Candidate: B+1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(305)=<A-1,it(305)=<B+1,it(305)=<A-1,it(305)=<B+1,it(305)=<A-A',it(305)=<B-B',it(305)=<A-A',it(305)=<B-B'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [305] 

#### Simplifying cost structure of phase [305] 

#### Cost of phase [305]:mat_mult(A,B,C,D,E,F,G,H,I) -> [mat_mult(A',B',C',D',E',F',G',H',I')] 
16*it(305)+0
  Such that:it(305) =< A
it(305) =< A-A'
it(305) =< B+1
it(305) =< B-B'

#### Simplifying cost structure of chain [[305],307] 
 * Renamed intermediate variables: 
[ (eq(422,1),s(6111))>>s(6168), (eq(422,1),s(6100))>>s(6169), (eq(422,1),s(6103))>>s(6170), (eq(422,1),s(6129))>>s(6171), (eq(422,1),s(6131))>>s(6172), (eq(422,1),s(6102))>>s(6173), (eq(422,1),s(6101))>>s(6174), (eq(422,1),s(6125))>>s(6175), (eq(422,1),s(6116))>>s(6176), (eq(422,1),s(6134))>>s(6177), (eq(422,1),s(6118))>>s(6178), (eq(422,1),s(6108))>>s(6179), (eq(422,1),s(6124))>>s(6180), (eq(422,1),s(6113))>>s(6181), (eq(422,1),s(6110))>>s(6182), (eq(422,1),s(6126))>>s(6183), (eq(422,1),s(6128))>>s(6184), (eq(422,1),s(6115))>>s(6185), (eq(422,1),aux(680))>>s(6186), (eq(422,1),aux(681))>>s(6187), (eq(422,1),aux(682))>>s(6188), (eq(422,1),aux(683))>>s(6189), (eq(422,1),aux(684))>>s(6190), (eq(422,1),aux(685))>>s(6191), (eq(422,1),aux(686))>>s(6192), (eq(422,1),aux(687))>>s(6193), (eq(422,1),aux(688))>>s(6194), (eq(422,1),aux(689))>>s(6195), (eq(422,1),s(6130))>>s(6196), (eq(422,1),s(6104))>>s(6197), (eq(422,1),s(6109))>>s(6198), (eq(422,1),s(6112))>>s(6199), (eq(422,1),s(6114))>>s(6200), (eq(422,1),s(6136))>>s(6201), (eq(422,1),s(6137))>>s(6202), (eq(422,1),s(6138))>>s(6203), (eq(422,1),s(6139))>>s(6204), (eq(422,1),s(6140))>>s(6205), (eq(422,1),s(6141))>>s(6206), (eq(422,1),s(6142))>>s(6207), (eq(422,1),s(6143))>>s(6208), (eq(422,1),s(6144))>>s(6209), (eq(422,1),s(6145))>>s(6210), (eq(422,1),s(6146))>>s(6211), (eq(422,1),s(6147))>>s(6212), (eq(422,1),s(6148))>>s(6213), (eq(422,1),s(6149))>>s(6214), (eq(422,1),s(6150))>>s(6215), (eq(422,1),s(6151))>>s(6216), (eq(422,1),s(6152))>>s(6217), (eq(422,1),s(6153))>>s(6218), (eq(422,1),s(6154))>>s(6219), (eq(422,1),s(6155))>>s(6220), (eq(422,1),s(6156))>>s(6221), (eq(422,1),s(6157))>>s(6222), (eq(422,1),s(6158))>>s(6223), (eq(422,1),s(6159))>>s(6224), (eq(422,1),s(6160))>>s(6225), (eq(422,1),s(6161))>>s(6226), (eq(422,1),s(6162))>>s(6227), (eq(422,1),s(6163))>>s(6228), (eq(422,1),s(6164))>>s(6229), (eq(422,1),s(6165))>>s(6230), (eq(422,1),s(6166))>>s(6231), (eq(422,1),s(6167))>>s(6232)]

#### Simplifying cost structure of CE 422 
 * Joined equivalent variables [aux(690),s(6193)] into aux(690)

#### Computing cost of phase [303] 
 * Renamed intermediate variables: 
[ (eq(425,1),s(6111))>>s(6233), (eq(425,1),s(6100))>>s(6234), (eq(425,1),s(6103))>>s(6235), (eq(425,1),s(6129))>>s(6236), (eq(425,1),s(6131))>>s(6237), (eq(425,1),s(6102))>>s(6238), (eq(425,1),s(6101))>>s(6239), (eq(425,1),s(6125))>>s(6240), (eq(425,1),s(6116))>>s(6241), (eq(425,1),s(6134))>>s(6242), (eq(425,1),s(6118))>>s(6243), (eq(425,1),s(6108))>>s(6244), (eq(425,1),s(6124))>>s(6245), (eq(425,1),s(6113))>>s(6246), (eq(425,1),s(6110))>>s(6247), (eq(425,1),s(6126))>>s(6248), (eq(425,1),s(6128))>>s(6249), (eq(425,1),s(6115))>>s(6250), (eq(425,1),aux(680))>>s(6251), (eq(425,1),aux(681))>>s(6252), (eq(425,1),aux(682))>>s(6253), (eq(425,1),aux(683))>>s(6254), (eq(425,1),aux(684))>>s(6255), (eq(425,1),aux(685))>>s(6256), (eq(425,1),aux(686))>>s(6257), (eq(425,1),aux(687))>>s(6258), (eq(425,1),aux(688))>>s(6259), (eq(425,1),aux(689))>>s(6260), (eq(425,1),s(6130))>>s(6261), (eq(425,1),s(6104))>>s(6262), (eq(425,1),s(6109))>>s(6263), (eq(425,1),s(6112))>>s(6264), (eq(425,1),s(6114))>>s(6265), (eq(425,1),s(6136))>>s(6266), (eq(425,1),s(6137))>>s(6267), (eq(425,1),s(6138))>>s(6268), (eq(425,1),s(6139))>>s(6269), (eq(425,1),s(6140))>>s(6270), (eq(425,1),s(6141))>>s(6271), (eq(425,1),s(6142))>>s(6272), (eq(425,1),s(6143))>>s(6273), (eq(425,1),s(6144))>>s(6274), (eq(425,1),s(6145))>>s(6275), (eq(425,1),s(6146))>>s(6276), (eq(425,1),s(6147))>>s(6277), (eq(425,1),s(6148))>>s(6278), (eq(425,1),s(6149))>>s(6279), (eq(425,1),s(6150))>>s(6280), (eq(425,1),s(6151))>>s(6281), (eq(425,1),s(6152))>>s(6282), (eq(425,1),s(6153))>>s(6283), (eq(425,1),s(6154))>>s(6284), (eq(425,1),s(6155))>>s(6285), (eq(425,1),s(6156))>>s(6286), (eq(425,1),s(6157))>>s(6287), (eq(425,1),s(6158))>>s(6288), (eq(425,1),s(6159))>>s(6289), (eq(425,1),s(6160))>>s(6290), (eq(425,1),s(6161))>>s(6291), (eq(425,1),s(6162))>>s(6292), (eq(425,1),s(6163))>>s(6293), (eq(425,1),s(6164))>>s(6294), (eq(425,1),s(6165))>>s(6295), (eq(425,1),s(6166))>>s(6296), (eq(425,1),s(6167))>>s(6297)]

#### Simplifying cost structure of CE 425 
 * Joined equivalent variables [aux(691),s(6237),s(6242),s(6251),s(6252),s(6253)] into aux(691)
 * Joined equivalent variables [aux(692),s(6235),s(6254),s(6258)] into aux(692)
 * Joined equivalent variables [aux(693),s(6238),s(6255),s(6259)] into aux(693)
 * Joined equivalent variables [aux(694),s(6246)] into aux(694)
 * Joined equivalent variables [aux(696),s(6247),s(6256)] into aux(696)
 * Joined equivalent variables [aux(697),s(6243),s(6248)] into aux(697)
 * Joined equivalent variables [s(6261),s(6262),s(6268)] into s(6261)
 * Renamed intermediate variables: 
[ (it(303),s(6244))>>s(6298), (it(303),s(6245))>>s(6299), (it(303),s(6260))>>s(6300), (it(303),s(6249))>>s(6301), (it(303),s(6241))>>s(6302), (it(303),s(6257))>>s(6303), (it(303),aux(692))>>s(6304), (it(303),aux(693))>>s(6305), (it(303),aux(694))>>s(6306), (it(303),aux(696))>>s(6307), (it(303),aux(697))>>s(6308), (it(303),s(6240))>>s(6309), (it(303),s(6263))>>s(6310), (it(303),s(6264))>>s(6311), (it(303),s(6275))>>s(6312), (it(303),s(6278))>>s(6313), (it(303),s(6282))>>s(6314), (it(303),s(6283))>>s(6315), (it(303),s(6285))>>s(6316), (it(303),s(6297))>>s(6317)]

#### Cost of loops [303] 

 * loop 303:mat_mult(A,B,C,D,E,F,G,H,I) -> [mat_mult(A',B',C',D',E',F',G',H',I')] 
7*s(6301)+7*s(6312)+5*s(6317)+16
  Such that:s(6298) =< E'+2
s(6299) =< E'+1/2
s(6300) =< E'/2+1/2
s(6301) =< E'/3
s(6302) =< 3/2*E'
s(6303) =< 9/2*E'+3
s(6304) =< E'
s(6305) =< E'+1
s(6306) =< 2*E'+1
s(6307) =< 3*E'+2
s(6308) =< E'/2
s(6309) =< s(6306)
s(6310) =< s(6304)
s(6311) =< s(6305)
s(6310) =< s(6307)
s(6302) =< s(6303)
s(6311) =< s(6304)
s(6309) =< s(6304)
s(6312) =< s(6304)
s(6301) =< s(6305)
s(6312) =< s(6305)
s(6312) =< s(6306)
s(6301) =< s(6298)
s(6312) =< s(6298)
s(6301) =< s(6310)
s(6312) =< s(6310)
s(6301) =< s(6299)
s(6312) =< s(6299)
s(6301) =< s(6309)
s(6312) =< s(6309)
s(6301) =< s(6304)
s(6301) =< s(6300)
s(6301) =< s(6308)
s(6312) =< s(6302)
s(6313) =< s(6307)* (1/2)-1
s(6314) =< s(6301)*s(6307)
s(6312) =< s(6304)
s(6315) =< s(6301)*s(6313)
s(6312) =< s(6311)
s(6316) =< s(6315)* (3/2)
s(6317) =< s(6314)
s(6317) =< s(6316)

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(6307)=<3*D-1]
* Psum in Loop 303: [it(303)=<1,s(6325)=<E',s(6334)=<E'+1,s(6332)=<E'+2,s(6330)=<E'+1/2,s(6333)=<2*E'+1,s(6336)=<3*E'+2,s(6327)=<E'/2,s(6328)=<E'/2+1/2,s(6318)=<E'/3,s(6326)=<3/2*E',s(6335)=<9/2*E'+3]

###### Computing max_min for s(6307)=<3*D-1  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(6307)=<3*D-1,s(6307)=<3*E+2] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 303: [it(303)=<1,s(6325)=<E',s(6334)=<E'+1,s(6332)=<E'+2,s(6330)=<E'+1/2,s(6333)=<2*E'+1,s(6336)=<3*E'+2,s(6327)=<E'/2,s(6328)=<E'/2+1/2,s(6318)=<E'/3,s(6326)=<3/2*E',s(6335)=<9/2*E'+3]

###### Computing sum for it(303)=<1  in Loop 303 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
     - head Candidate: B+1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
     - tail Candidate: B+1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(303)=<A-1,it(303)=<B+1,it(303)=<A-1,it(303)=<B+1,it(303)=<A-A',it(303)=<B-B',it(303)=<A-A',it(303)=<B-B'] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 303: [s(6325)=<E',s(6334)=<E'+1,s(6332)=<E'+2,s(6330)=<E'+1/2,s(6333)=<2*E'+1,s(6336)=<3*E'+2,s(6327)=<E'/2,s(6328)=<E'/2+1/2,s(6318)=<E'/3,s(6326)=<3/2*E',s(6335)=<9/2*E'+3]

###### Computing sum for s(6325)=<E'  in Loop 303 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(698)=<E,aux(698)=<D-1] 
 * Adding constraints: [s(6325)=<it(303)*aux(698)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(698)=<D-1,aux(698)=<E]
* Psum in Loop 303: [s(6334)=<E'+1,s(6332)=<E'+2,s(6330)=<E'+1/2,s(6333)=<2*E'+1,s(6336)=<3*E'+2,s(6327)=<E'/2,s(6328)=<E'/2+1/2,s(6318)=<E'/3,s(6326)=<3/2*E',s(6335)=<9/2*E'+3]

###### Computing max_min for aux(698)=<D-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(698)=<s(6307)* (1/3)-2/3] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(698)=<E]
* Psum in Loop 303: [s(6334)=<E'+1,s(6332)=<E'+2,s(6330)=<E'+1/2,s(6333)=<2*E'+1,s(6336)=<3*E'+2,s(6327)=<E'/2,s(6328)=<E'/2+1/2,s(6318)=<E'/3,s(6326)=<3/2*E',s(6335)=<9/2*E'+3]

###### Computing max_min for aux(698)=<E  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(698)=<E,aux(698)=<D-1] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 303: [s(6334)=<E'+1,s(6332)=<E'+2,s(6330)=<E'+1/2,s(6333)=<2*E'+1,s(6336)=<3*E'+2,s(6327)=<E'/2,s(6328)=<E'/2+1/2,s(6318)=<E'/3,s(6326)=<3/2*E',s(6335)=<9/2*E'+3]

###### Computing sum for s(6334)=<E'+1  in Loop 303 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(699)=<D,aux(699)=<E+1] 
 * Adding constraints: [s(6334)=<it(303)*aux(699)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(699)=<D,aux(699)=<E+1]
* Psum in Loop 303: [s(6332)=<E'+2,s(6330)=<E'+1/2,s(6333)=<2*E'+1,s(6336)=<3*E'+2,s(6327)=<E'/2,s(6328)=<E'/2+1/2,s(6318)=<E'/3,s(6326)=<3/2*E',s(6335)=<9/2*E'+3]

###### Computing max_min for aux(699)=<D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(699)=<s(6307)* (1/3)+1/3] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(699)=<E+1]
* Psum in Loop 303: [s(6332)=<E'+2,s(6330)=<E'+1/2,s(6333)=<2*E'+1,s(6336)=<3*E'+2,s(6327)=<E'/2,s(6328)=<E'/2+1/2,s(6318)=<E'/3,s(6326)=<3/2*E',s(6335)=<9/2*E'+3]

###### Computing max_min for aux(699)=<E+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(699)=<aux(698)+1] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 303: [s(6332)=<E'+2,s(6330)=<E'+1/2,s(6333)=<2*E'+1,s(6336)=<3*E'+2,s(6327)=<E'/2,s(6328)=<E'/2+1/2,s(6318)=<E'/3,s(6326)=<3/2*E',s(6335)=<9/2*E'+3]

###### Computing sum for s(6332)=<E'+2  in Loop 303 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(700)=<D+1,aux(700)=<E+2] 
 * Adding constraints: [s(6332)=<it(303)*aux(700)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(700)=<D+1,aux(700)=<E+2]
* Psum in Loop 303: [s(6330)=<E'+1/2,s(6333)=<2*E'+1,s(6336)=<3*E'+2,s(6327)=<E'/2,s(6328)=<E'/2+1/2,s(6318)=<E'/3,s(6326)=<3/2*E',s(6335)=<9/2*E'+3]

###### Computing max_min for aux(700)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(700)=<s(6307)* (1/3)+4/3] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(700)=<E+2]
* Psum in Loop 303: [s(6330)=<E'+1/2,s(6333)=<2*E'+1,s(6336)=<3*E'+2,s(6327)=<E'/2,s(6328)=<E'/2+1/2,s(6318)=<E'/3,s(6326)=<3/2*E',s(6335)=<9/2*E'+3]

###### Computing max_min for aux(700)=<E+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(700)=<aux(698)+2] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 303: [s(6330)=<E'+1/2,s(6333)=<2*E'+1,s(6336)=<3*E'+2,s(6327)=<E'/2,s(6328)=<E'/2+1/2,s(6318)=<E'/3,s(6326)=<3/2*E',s(6335)=<9/2*E'+3]

###### Computing sum for s(6330)=<E'+1/2  in Loop 303 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(701)=<D-1/2,aux(701)=<E+1/2] 
 * Adding constraints: [s(6330)=<it(303)*aux(701)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(701)=<D-1/2,aux(701)=<E+1/2]
* Psum in Loop 303: [s(6333)=<2*E'+1,s(6336)=<3*E'+2,s(6327)=<E'/2,s(6328)=<E'/2+1/2,s(6318)=<E'/3,s(6326)=<3/2*E',s(6335)=<9/2*E'+3]

###### Computing max_min for aux(701)=<D-1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(701)=<s(6307)* (1/3)-1/6] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(701)=<E+1/2]
* Psum in Loop 303: [s(6333)=<2*E'+1,s(6336)=<3*E'+2,s(6327)=<E'/2,s(6328)=<E'/2+1/2,s(6318)=<E'/3,s(6326)=<3/2*E',s(6335)=<9/2*E'+3]

###### Computing max_min for aux(701)=<E+1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(701)=<aux(698)+1/2] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 303: [s(6333)=<2*E'+1,s(6336)=<3*E'+2,s(6327)=<E'/2,s(6328)=<E'/2+1/2,s(6318)=<E'/3,s(6326)=<3/2*E',s(6335)=<9/2*E'+3]

###### Computing sum for s(6333)=<2*E'+1  in Loop 303 
   - Found a solution using cacheing 
 * Adding constraints: [s(6333)=<aux(702)*2,aux(702)=<it(303)*aux(701)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 303: [s(6336)=<3*E'+2,s(6327)=<E'/2,s(6328)=<E'/2+1/2,s(6318)=<E'/3,s(6326)=<3/2*E',s(6335)=<9/2*E'+3]

###### Computing sum for s(6336)=<3*E'+2  in Loop 303 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(703)=<3*D-1,aux(703)=<3*E+2] 
 * Adding constraints: [s(6336)=<it(303)*aux(703)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(703)=<3*D-1,aux(703)=<3*E+2]
* Psum in Loop 303: [s(6327)=<E'/2,s(6328)=<E'/2+1/2,s(6318)=<E'/3,s(6326)=<3/2*E',s(6335)=<9/2*E'+3]

###### Computing max_min for aux(703)=<3*D-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(703)=<s(6307)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(703)=<3*E+2]
* Psum in Loop 303: [s(6327)=<E'/2,s(6328)=<E'/2+1/2,s(6318)=<E'/3,s(6326)=<3/2*E',s(6335)=<9/2*E'+3]

###### Computing max_min for aux(703)=<3*E+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(703)=<aux(698)*3+2] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 303: [s(6327)=<E'/2,s(6328)=<E'/2+1/2,s(6318)=<E'/3,s(6326)=<3/2*E',s(6335)=<9/2*E'+3]

###### Computing sum for s(6327)=<E'/2  in Loop 303 
   - Found a solution using cacheing 
 * Adding constraints: [s(6327)=<aux(704)* (1/2),aux(704)=<it(303)*aux(698)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 303: [s(6328)=<E'/2+1/2,s(6318)=<E'/3,s(6326)=<3/2*E',s(6335)=<9/2*E'+3]

###### Computing sum for s(6328)=<E'/2+1/2  in Loop 303 
   - Found a solution using cacheing 
 * Adding constraints: [s(6328)=<aux(705)* (1/2),aux(705)=<it(303)*aux(699)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 303: [s(6318)=<E'/3,s(6326)=<3/2*E',s(6335)=<9/2*E'+3]

###### Computing sum for s(6318)=<E'/3  in Loop 303 
   - Found a solution using cacheing 
 * Adding constraints: [s(6318)=<aux(706)* (1/3),aux(706)=<it(303)*aux(698)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 303: [s(6326)=<3/2*E',s(6335)=<9/2*E'+3]

###### Computing sum for s(6326)=<3/2*E'  in Loop 303 
   - Found a solution using cacheing 
 * Adding constraints: [s(6326)=<aux(707)* (3/2),aux(707)=<it(303)*aux(698)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 303: [s(6335)=<9/2*E'+3]

###### Computing sum for s(6335)=<9/2*E'+3  in Loop 303 
   - Found a solution using cacheing 
 * Adding constraints: [s(6335)=<aux(708)* (3/2),aux(708)=<it(303)*aux(703)] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [303] 

#### Simplifying cost structure of phase [303] 
 * Joined equivalent variables [aux(704),aux(706),aux(707),s(6325)] into aux(704)
 * Joined equivalent variables [aux(708),s(6336)] into aux(708)
 * Joined equivalent variables [aux(705),s(6334)] into aux(705)
 * Joined equivalent variables [aux(702),s(6330)] into aux(702)

#### Cost of phase [303]:mat_mult(A,B,C,D,E,F,G,H,I) -> [mat_mult(A',B',C',D',E',F',G',H',I')] 
16*it(303)+7*s(6318)+7*s(6319)+5*s(6320)+0
  Such that:it(303) =< A
it(303) =< A-A'
it(303) =< B+1
it(303) =< B-B'
aux(698) =< D
s(6307) =< 3*D
aux(698) =< E
s(6307) =< 3*E+2
aux(703) =< s(6307)
aux(701) =< s(6307)* (1/3)-1/6
aux(700) =< s(6307)* (1/3)+4/3
aux(699) =< s(6307)* (1/3)+1/3
aux(698) =< s(6307)* (1/3)-2/3
aux(703) =< aux(698)*3+2
aux(701) =< aux(698)+1/2
aux(700) =< aux(698)+2
aux(699) =< aux(698)+1
aux(704) =< it(303)*aux(698)
aux(708) =< it(303)*aux(703)
s(6326) =< aux(704)* (3/2)
s(6318) =< aux(704)* (1/3)
aux(705) =< it(303)*aux(699)
s(6327) =< aux(704)* (1/2)
aux(702) =< it(303)*aux(701)
s(6332) =< it(303)*aux(700)
s(6335) =< aux(708)* (3/2)
s(6328) =< aux(705)* (1/2)
s(6333) =< aux(702)*2
s(6329) =< s(6333)
s(6331) =< aux(704)
s(6324) =< aux(705)
s(6331) =< aux(708)
s(6326) =< s(6335)
s(6324) =< aux(704)
s(6329) =< aux(704)
s(6319) =< aux(704)
s(6318) =< aux(705)
s(6319) =< aux(705)
s(6319) =< s(6333)
s(6318) =< s(6332)
s(6319) =< s(6332)
s(6318) =< s(6331)
s(6319) =< s(6331)
s(6318) =< aux(702)
s(6319) =< aux(702)
s(6318) =< s(6329)
s(6319) =< s(6329)
s(6318) =< aux(704)
s(6318) =< s(6328)
s(6318) =< s(6327)
s(6319) =< s(6326)
s(6313) =< s(6307)* (1/2)-1
s(6322) =< s(6318)*s(6307)
s(6323) =< s(6318)*s(6313)
s(6319) =< s(6324)
s(6321) =< s(6323)* (3/2)
s(6320) =< s(6322)
s(6320) =< s(6321)

#### Simplifying cost structure of chain [[303],306] 
 * Joined equivalent variables [aux(709),s(6172),s(6177),s(6186),s(6188)] into aux(709)
 * Joined equivalent variables [aux(710),aux(690),s(6170),s(6173),s(6180),s(6189),s(6190),s(6194)] into aux(710)
 * Joined equivalent variables [aux(711),s(6181)] into aux(711)
 * Joined equivalent variables [aux(712),s(6182),s(6191),s(6307)] into aux(712)
 * Joined equivalent variables [aux(713),s(6178),s(6183),s(6195)] into aux(713)
 * Joined equivalent variables [aux(714),s(6185)] into aux(714)
 * Joined equivalent variables [aux(710),s(6199)] into aux(710)
 * Joined equivalent variables [s(6213),s(6313)] into s(6213)
 * Joined equivalent variables [s(6187),s(6196),s(6203)] into s(6187)
 * Joined equivalent variables [s(6171),s(6198)] into s(6171)

#### Computing cost of phase [302,304] 
 * Renamed intermediate variables: 
[ (eq(426,1),s(6111))>>s(6337), (eq(426,1),s(6100))>>s(6338), (eq(426,1),s(6103))>>s(6339), (eq(426,1),s(6129))>>s(6340), (eq(426,1),s(6131))>>s(6341), (eq(426,1),s(6102))>>s(6342), (eq(426,1),s(6101))>>s(6343), (eq(426,1),s(6125))>>s(6344), (eq(426,1),s(6116))>>s(6345), (eq(426,1),s(6134))>>s(6346), (eq(426,1),s(6118))>>s(6347), (eq(426,1),s(6108))>>s(6348), (eq(426,1),s(6124))>>s(6349), (eq(426,1),s(6113))>>s(6350), (eq(426,1),s(6110))>>s(6351), (eq(426,1),s(6126))>>s(6352), (eq(426,1),s(6128))>>s(6353), (eq(426,1),s(6115))>>s(6354), (eq(426,1),aux(680))>>s(6355), (eq(426,1),aux(681))>>s(6356), (eq(426,1),aux(682))>>s(6357), (eq(426,1),aux(683))>>s(6358), (eq(426,1),aux(684))>>s(6359), (eq(426,1),aux(685))>>s(6360), (eq(426,1),aux(686))>>s(6361), (eq(426,1),aux(687))>>s(6362), (eq(426,1),aux(688))>>s(6363), (eq(426,1),aux(689))>>s(6364), (eq(426,1),s(6130))>>s(6365), (eq(426,1),s(6104))>>s(6366), (eq(426,1),s(6109))>>s(6367), (eq(426,1),s(6112))>>s(6368), (eq(426,1),s(6114))>>s(6369), (eq(426,1),s(6136))>>s(6370), (eq(426,1),s(6137))>>s(6371), (eq(426,1),s(6138))>>s(6372), (eq(426,1),s(6139))>>s(6373), (eq(426,1),s(6140))>>s(6374), (eq(426,1),s(6141))>>s(6375), (eq(426,1),s(6142))>>s(6376), (eq(426,1),s(6143))>>s(6377), (eq(426,1),s(6144))>>s(6378), (eq(426,1),s(6145))>>s(6379), (eq(426,1),s(6146))>>s(6380), (eq(426,1),s(6147))>>s(6381), (eq(426,1),s(6148))>>s(6382), (eq(426,1),s(6149))>>s(6383), (eq(426,1),s(6150))>>s(6384), (eq(426,1),s(6151))>>s(6385), (eq(426,1),s(6152))>>s(6386), (eq(426,1),s(6153))>>s(6387), (eq(426,1),s(6154))>>s(6388), (eq(426,1),s(6155))>>s(6389), (eq(426,1),s(6156))>>s(6390), (eq(426,1),s(6157))>>s(6391), (eq(426,1),s(6158))>>s(6392), (eq(426,1),s(6159))>>s(6393), (eq(426,1),s(6160))>>s(6394), (eq(426,1),s(6161))>>s(6395), (eq(426,1),s(6162))>>s(6396), (eq(426,1),s(6163))>>s(6397), (eq(426,1),s(6164))>>s(6398), (eq(426,1),s(6165))>>s(6399), (eq(426,1),s(6166))>>s(6400), (eq(426,1),s(6167))>>s(6401)]
 * Renamed intermediate variables: 
[ (eq(426,2),s(6034))>>s(6402), (eq(426,2),aux(608))>>s(6403), (eq(426,2),aux(611))>>s(6404), (eq(426,2),aux(610))>>s(6405), (eq(426,2),aux(612))>>s(6406), (eq(426,2),aux(613))>>s(6407), (eq(426,2),aux(614))>>s(6408), (eq(426,2),it(291))>>s(6409), (eq(426,2),s(6033))>>s(6410), (eq(426,2),it(290))>>s(6411), (eq(426,2),it(292))>>s(6412)]

#### Simplifying cost structure of CE 426 
 * Joined equivalent variables [aux(715),s(6341),s(6406),s(6407)] into aux(715)
 * Joined equivalent variables [aux(716),s(6357),s(6404)] into aux(716)
 * Joined equivalent variables [s(6409),s(6411)] into s(6409)
 * Renamed intermediate variables: 
[ (it(302),s(6337))>>s(6413), (it(302),s(6402))>>s(6414), (it(302),s(6338))>>s(6415), (it(302),s(6355))>>s(6416), (it(302),s(6339))>>s(6417), (it(302),s(6340))>>s(6418), (it(302),s(6403))>>s(6419), (it(302),s(6356))>>s(6420), (it(302),s(6408))>>s(6421), (it(302),s(6405))>>s(6422), (it(302),s(6358))>>s(6423), (it(302),s(6342))>>s(6424), (it(302),s(6343))>>s(6425), (it(302),s(6359))>>s(6426), (it(302),s(6344))>>s(6427), (it(302),s(6360))>>s(6428), (it(302),s(6345))>>s(6429), (it(302),s(6346))>>s(6430), (it(302),s(6347))>>s(6431), (it(302),s(6361))>>s(6432), (it(302),s(6362))>>s(6433), (it(302),s(6363))>>s(6434), (it(302),s(6348))>>s(6435), (it(302),s(6349))>>s(6436), (it(302),s(6350))>>s(6437), (it(302),s(6351))>>s(6438), (it(302),s(6352))>>s(6439), (it(302),s(6364))>>s(6440), (it(302),s(6353))>>s(6441), (it(302),s(6354))>>s(6442), (it(302),aux(715))>>s(6443), (it(302),aux(716))>>s(6444), (it(302),s(6409))>>s(6445), (it(302),s(6410))>>s(6446), (it(302),s(6412))>>s(6447), (it(302),s(6365))>>s(6448), (it(302),s(6366))>>s(6449), (it(302),s(6367))>>s(6450), (it(302),s(6368))>>s(6451), (it(302),s(6369))>>s(6452), (it(302),s(6370))>>s(6453), (it(302),s(6371))>>s(6454), (it(302),s(6372))>>s(6455), (it(302),s(6373))>>s(6456), (it(302),s(6374))>>s(6457), (it(302),s(6375))>>s(6458), (it(302),s(6376))>>s(6459), (it(302),s(6377))>>s(6460), (it(302),s(6378))>>s(6461), (it(302),s(6379))>>s(6462), (it(302),s(6380))>>s(6463), (it(302),s(6381))>>s(6464), (it(302),s(6382))>>s(6465), (it(302),s(6383))>>s(6466), (it(302),s(6384))>>s(6467), (it(302),s(6385))>>s(6468), (it(302),s(6386))>>s(6469), (it(302),s(6387))>>s(6470), (it(302),s(6388))>>s(6471), (it(302),s(6389))>>s(6472), (it(302),s(6390))>>s(6473), (it(302),s(6391))>>s(6474), (it(302),s(6392))>>s(6475), (it(302),s(6393))>>s(6476), (it(302),s(6394))>>s(6477), (it(302),s(6395))>>s(6478), (it(302),s(6396))>>s(6479), (it(302),s(6397))>>s(6480), (it(302),s(6398))>>s(6481), (it(302),s(6399))>>s(6482), (it(302),s(6400))>>s(6483), (it(302),s(6401))>>s(6484)]
 * Renamed intermediate variables: 
[ (eq(424,1),s(6111))>>s(6485), (eq(424,1),s(6100))>>s(6486), (eq(424,1),s(6103))>>s(6487), (eq(424,1),s(6129))>>s(6488), (eq(424,1),s(6131))>>s(6489), (eq(424,1),s(6102))>>s(6490), (eq(424,1),s(6101))>>s(6491), (eq(424,1),s(6125))>>s(6492), (eq(424,1),s(6116))>>s(6493), (eq(424,1),s(6134))>>s(6494), (eq(424,1),s(6118))>>s(6495), (eq(424,1),s(6108))>>s(6496), (eq(424,1),s(6124))>>s(6497), (eq(424,1),s(6113))>>s(6498), (eq(424,1),s(6110))>>s(6499), (eq(424,1),s(6126))>>s(6500), (eq(424,1),s(6128))>>s(6501), (eq(424,1),s(6115))>>s(6502), (eq(424,1),aux(680))>>s(6503), (eq(424,1),aux(681))>>s(6504), (eq(424,1),aux(682))>>s(6505), (eq(424,1),aux(683))>>s(6506), (eq(424,1),aux(684))>>s(6507), (eq(424,1),aux(685))>>s(6508), (eq(424,1),aux(686))>>s(6509), (eq(424,1),aux(687))>>s(6510), (eq(424,1),aux(688))>>s(6511), (eq(424,1),aux(689))>>s(6512), (eq(424,1),s(6130))>>s(6513), (eq(424,1),s(6104))>>s(6514), (eq(424,1),s(6109))>>s(6515), (eq(424,1),s(6112))>>s(6516), (eq(424,1),s(6114))>>s(6517), (eq(424,1),s(6136))>>s(6518), (eq(424,1),s(6137))>>s(6519), (eq(424,1),s(6138))>>s(6520), (eq(424,1),s(6139))>>s(6521), (eq(424,1),s(6140))>>s(6522), (eq(424,1),s(6141))>>s(6523), (eq(424,1),s(6142))>>s(6524), (eq(424,1),s(6143))>>s(6525), (eq(424,1),s(6144))>>s(6526), (eq(424,1),s(6145))>>s(6527), (eq(424,1),s(6146))>>s(6528), (eq(424,1),s(6147))>>s(6529), (eq(424,1),s(6148))>>s(6530), (eq(424,1),s(6149))>>s(6531), (eq(424,1),s(6150))>>s(6532), (eq(424,1),s(6151))>>s(6533), (eq(424,1),s(6152))>>s(6534), (eq(424,1),s(6153))>>s(6535), (eq(424,1),s(6154))>>s(6536), (eq(424,1),s(6155))>>s(6537), (eq(424,1),s(6156))>>s(6538), (eq(424,1),s(6157))>>s(6539), (eq(424,1),s(6158))>>s(6540), (eq(424,1),s(6159))>>s(6541), (eq(424,1),s(6160))>>s(6542), (eq(424,1),s(6161))>>s(6543), (eq(424,1),s(6162))>>s(6544), (eq(424,1),s(6163))>>s(6545), (eq(424,1),s(6164))>>s(6546), (eq(424,1),s(6165))>>s(6547), (eq(424,1),s(6166))>>s(6548), (eq(424,1),s(6167))>>s(6549)]
 * Renamed intermediate variables: 
[ (eq(424,2),it(293))>>s(6550)]

#### Simplifying cost structure of CE 424 
 * Renamed intermediate variables: 
[ (it(304),s(6485))>>s(6551), (it(304),s(6510))>>s(6552), (it(304),s(6511))>>s(6553), (it(304),s(6496))>>s(6554), (it(304),s(6497))>>s(6555), (it(304),s(6504))>>s(6556), (it(304),s(6505))>>s(6557), (it(304),s(6550))>>s(6558), (it(304),s(6492))>>s(6559), (it(304),s(6495))>>s(6560), (it(304),s(6498))>>s(6561), (it(304),s(6489))>>s(6562), (it(304),s(6506))>>s(6563), (it(304),s(6490))>>s(6564), (it(304),s(6508))>>s(6565), (it(304),s(6499))>>s(6566), (it(304),s(6486))>>s(6567), (it(304),s(6503))>>s(6568), (it(304),s(6491))>>s(6569), (it(304),s(6493))>>s(6570), (it(304),s(6509))>>s(6571), (it(304),s(6487))>>s(6572), (it(304),s(6488))>>s(6573), (it(304),s(6500))>>s(6574), (it(304),s(6512))>>s(6575), (it(304),s(6501))>>s(6576), (it(304),s(6502))>>s(6577), (it(304),s(6494))>>s(6578), (it(304),s(6507))>>s(6579), (it(304),s(6513))>>s(6580), (it(304),s(6514))>>s(6581), (it(304),s(6515))>>s(6582), (it(304),s(6516))>>s(6583), (it(304),s(6517))>>s(6584), (it(304),s(6518))>>s(6585), (it(304),s(6519))>>s(6586), (it(304),s(6520))>>s(6587), (it(304),s(6521))>>s(6588), (it(304),s(6522))>>s(6589), (it(304),s(6523))>>s(6590), (it(304),s(6524))>>s(6591), (it(304),s(6525))>>s(6592), (it(304),s(6526))>>s(6593), (it(304),s(6527))>>s(6594), (it(304),s(6528))>>s(6595), (it(304),s(6529))>>s(6596), (it(304),s(6530))>>s(6597), (it(304),s(6531))>>s(6598), (it(304),s(6532))>>s(6599), (it(304),s(6533))>>s(6600), (it(304),s(6534))>>s(6601), (it(304),s(6535))>>s(6602), (it(304),s(6536))>>s(6603), (it(304),s(6537))>>s(6604), (it(304),s(6538))>>s(6605), (it(304),s(6539))>>s(6606), (it(304),s(6540))>>s(6607), (it(304),s(6541))>>s(6608), (it(304),s(6542))>>s(6609), (it(304),s(6543))>>s(6610), (it(304),s(6544))>>s(6611), (it(304),s(6545))>>s(6612), (it(304),s(6546))>>s(6613), (it(304),s(6547))>>s(6614), (it(304),s(6548))>>s(6615), (it(304),s(6549))>>s(6616)]

#### Cost of loops [302,304] 

 * loop 302:mat_mult(A,B,C,D,E,F,G,H,I) -> [mat_mult(A',B',C',D',E',F',G',H',I')] 
7*s(6413)+7*s(6441)+10*s(6453)+7*s(6454)+10*s(6458)+7*s(6462)+13*s(6473)+13*s(6479)+13*s(6481)+5*s(6482)+13*s(6483)+5*s(6484)+9*s(6414)+21*s(6445)+9*s(6446)+12*s(6447)+16
  Such that:s(6413) =< 1/2
s(6414) =< -B-2*D+2*E+B'+4
s(6415) =< -3*D'+3*E'
s(6416) =< -3*D'+3*E'+3
s(6417) =< -3*D'+4*E'+3
s(6418) =< -3*D'+6*E'+3
s(6419) =< -2*D'+2*E'+3
s(6420) =< -D'+E'
s(6421) =< -D'+E'+2
s(6422) =< -D'+E'+3/2
s(6423) =< -D'+2*E'+1
s(6424) =< -D'+2*E'+2
s(6425) =< -D'+3*E'+3
s(6426) =< D'
s(6427) =< D'+E'
s(6428) =< D'+2*E'+1
s(6429) =< -3/2*D'+3*E'+3/2
s(6430) =< -3/2*D'+3/2*E'+3/2
s(6431) =< -D'/2+E'+1/2
s(6432) =< 3/2*D'+3*E'+3/2
s(6433) =< E'
s(6434) =< E'+1
s(6435) =< E'+2
s(6436) =< E'+1/2
s(6437) =< 2*E'+1
s(6438) =< 3*E'+2
s(6439) =< E'/2
s(6440) =< E'/2+1/2
s(6441) =< E'/3
s(6442) =< 3/2*E'+3/2
s(6443) =< -2*D'+2*E'+2
s(6444) =< -D'+E'+1
s(6414) =< s(6443)
s(6445) =< s(6443)
s(6446) =< s(6443)
s(6445) =< s(6421)
s(6447) =< s(6421)
s(6447) =< s(6443)
s(6445) =< s(6419)
s(6447) =< s(6419)
s(6445) =< s(6422)
s(6445) =< s(6444)
s(6425) =< s(6416)
s(6448) =< s(6416)
s(6449) =< s(6420)
s(6450) =< s(6423)
s(6418) =< s(6423)
s(6451) =< s(6426)
s(6450) =< s(6428)
s(6452) =< s(6428)
s(6452) =< s(6432)
s(6429) =< s(6432)
s(6449) =< s(6433)
s(6451) =< s(6433)
s(6427) =< s(6433)
s(6448) =< s(6433)
s(6451) =< s(6434)
s(6453) =< s(6444)
s(6454) =< s(6425)
s(6413) =< s(6425)
s(6415) =< s(6425)
s(6413) =< s(6443)
s(6455) =< s(6443)
s(6456) =< s(6449)
s(6457) =< s(6449)
s(6413) =< s(6444)
s(6458) =< s(6444)
s(6459) =< s(6449)
s(6460) =< s(6449)
s(6459) =< s(6448)
s(6460) =< s(6448)
s(6454) =< s(6418)
s(6413) =< s(6418)
s(6458) =< s(6418)
s(6456) =< s(6444)
s(6454) =< s(6424)
s(6461) =< s(6424)
s(6454) =< s(6417)
s(6462) =< s(6417)
s(6413) =< s(6417)
s(6461) =< s(6417)
s(6441) =< s(6426)
s(6454) =< s(6426)
s(6462) =< s(6426)
s(6413) =< s(6426)
s(6454) =< s(6430)
s(6413) =< s(6430)
s(6415) =< s(6430)
s(6456) =< s(6433)
s(6457) =< s(6433)
s(6462) =< s(6433)
s(6413) =< s(6433)
s(6455) =< s(6433)
s(6453) =< s(6433)
s(6441) =< s(6434)
s(6454) =< s(6434)
s(6462) =< s(6434)
s(6413) =< s(6434)
s(6458) =< s(6433)
s(6459) =< s(6433)
s(6460) =< s(6433)
s(6459) =< s(6452)
s(6460) =< s(6452)
s(6454) =< s(6437)
s(6462) =< s(6437)
s(6413) =< s(6437)
s(6458) =< s(6437)
s(6441) =< s(6435)
s(6454) =< s(6435)
s(6462) =< s(6435)
s(6413) =< s(6435)
s(6441) =< s(6450)
s(6454) =< s(6450)
s(6462) =< s(6450)
s(6413) =< s(6450)
s(6441) =< s(6436)
s(6454) =< s(6436)
s(6462) =< s(6436)
s(6413) =< s(6436)
s(6441) =< s(6427)
s(6454) =< s(6427)
s(6462) =< s(6427)
s(6413) =< s(6427)
s(6441) =< s(6433)
s(6454) =< s(6433)
s(6454) =< s(6440)
s(6413) =< s(6440)
s(6441) =< s(6440)
s(6441) =< s(6431)
s(6454) =< s(6431)
s(6454) =< s(6439)
s(6413) =< s(6439)
s(6454) =< s(6442)
s(6461) =< s(6442)
s(6454) =< s(6429)
s(6462) =< s(6429)
s(6413) =< s(6429)
s(6461) =< s(6429)
s(6463) =< s(6438)-2
s(6464) =< s(6438)* (1/2)
s(6465) =< s(6438)* (1/2)-1
s(6466) =< s(6438)-1
s(6467) =< s(6460)
s(6468) =< s(6413)*s(6457)
s(6459) =< s(6413)*s(6457)
s(6469) =< s(6441)*s(6438)
s(6467) =< s(6468)
s(6454) =< s(6459)+s(6456)+s(6433)
s(6462) =< s(6459)+s(6456)+s(6433)
s(6470) =< s(6441)*s(6465)
s(6471) =< s(6441)*s(6464)
s(6454) =< s(6467)+s(6456)+s(6451)
s(6462) =< s(6467)+s(6456)+s(6451)
s(6472) =< s(6470)* (3/2)
s(6473) =< s(6470)* (1/2)
s(6474) =< s(6454)*s(6463)
s(6475) =< s(6454)*s(6434)
s(6476) =< s(6454)*s(6465)
s(6477) =< s(6454)*s(6464)
s(6478) =< s(6454)*s(6466)
s(6479) =< s(6476)* (1/2)
s(6480) =< s(6476)* (3/2)
s(6479) =< s(6475)
s(6481) =< s(6475)
s(6481) =< s(6478)
s(6482) =< s(6478)
s(6481) =< s(6474)
s(6482) =< s(6474)
s(6479) =< s(6455)
s(6481) =< s(6455)
s(6479) =< s(6477)
s(6481) =< s(6477)
s(6479) =< s(6476)
s(6481) =< s(6476)
s(6481) =< s(6480)
s(6482) =< s(6480)
s(6473) =< s(6461)
s(6483) =< s(6461)
s(6483) =< s(6469)
s(6484) =< s(6469)
s(6473) =< s(6471)
s(6483) =< s(6471)
s(6473) =< s(6470)
s(6483) =< s(6470)
s(6483) =< s(6472)
s(6484) =< s(6472)
s(6473) =< s(6415)
s(6483) =< s(6415)

 * loop 304:mat_mult(A,B,C,D,E,F,G,H,I) -> [mat_mult(A',B',C',D',E',F',G',H',I')] 
7*s(6551)+7*s(6576)+10*s(6585)+7*s(6586)+10*s(6590)+7*s(6594)+13*s(6605)+13*s(6611)+13*s(6613)+5*s(6614)+13*s(6615)+5*s(6616)+9*s(6558)+16
  Such that:s(6551) =< 1/2
s(6552) =< E
s(6553) =< E+1
s(6554) =< E+2
s(6555) =< E+1/2
s(6556) =< E-D'
s(6557) =< E-D'+1
s(6558) =< E-D'+2
s(6559) =< E+D'
s(6560) =< E-D'/2+1/2
s(6561) =< 2*E+1
s(6562) =< 2*E-2*D'+2
s(6563) =< 2*E-D'+1
s(6564) =< 2*E-D'+2
s(6565) =< 2*E+D'+1
s(6566) =< 3*E+2
s(6567) =< 3*E-3*D'
s(6568) =< 3*E-3*D'+3
s(6569) =< 3*E-D'+3
s(6570) =< 3*E-3/2*D'+3/2
s(6571) =< 3*E+3/2*D'+3/2
s(6572) =< 4*E-3*D'+3
s(6573) =< 6*E-3*D'+3
s(6574) =< E/2
s(6575) =< E/2+1/2
s(6576) =< E/3
s(6577) =< 3/2*E+3/2
s(6578) =< 3/2*E-3/2*D'+3/2
s(6579) =< D'
s(6569) =< s(6568)
s(6580) =< s(6568)
s(6581) =< s(6556)
s(6582) =< s(6563)
s(6573) =< s(6563)
s(6583) =< s(6579)
s(6582) =< s(6565)
s(6584) =< s(6565)
s(6584) =< s(6571)
s(6570) =< s(6571)
s(6581) =< s(6552)
s(6583) =< s(6552)
s(6559) =< s(6552)
s(6580) =< s(6552)
s(6583) =< s(6553)
s(6585) =< s(6557)
s(6586) =< s(6569)
s(6551) =< s(6569)
s(6567) =< s(6569)
s(6551) =< s(6562)
s(6587) =< s(6562)
s(6588) =< s(6581)
s(6589) =< s(6581)
s(6551) =< s(6557)
s(6590) =< s(6557)
s(6591) =< s(6581)
s(6592) =< s(6581)
s(6591) =< s(6580)
s(6592) =< s(6580)
s(6586) =< s(6573)
s(6551) =< s(6573)
s(6590) =< s(6573)
s(6588) =< s(6557)
s(6586) =< s(6564)
s(6593) =< s(6564)
s(6586) =< s(6572)
s(6594) =< s(6572)
s(6551) =< s(6572)
s(6593) =< s(6572)
s(6576) =< s(6579)
s(6586) =< s(6579)
s(6594) =< s(6579)
s(6551) =< s(6579)
s(6586) =< s(6578)
s(6551) =< s(6578)
s(6567) =< s(6578)
s(6588) =< s(6552)
s(6589) =< s(6552)
s(6594) =< s(6552)
s(6551) =< s(6552)
s(6587) =< s(6552)
s(6585) =< s(6552)
s(6576) =< s(6553)
s(6586) =< s(6553)
s(6594) =< s(6553)
s(6551) =< s(6553)
s(6590) =< s(6552)
s(6591) =< s(6552)
s(6592) =< s(6552)
s(6591) =< s(6584)
s(6592) =< s(6584)
s(6586) =< s(6561)
s(6594) =< s(6561)
s(6551) =< s(6561)
s(6590) =< s(6561)
s(6576) =< s(6554)
s(6586) =< s(6554)
s(6594) =< s(6554)
s(6551) =< s(6554)
s(6576) =< s(6582)
s(6586) =< s(6582)
s(6594) =< s(6582)
s(6551) =< s(6582)
s(6576) =< s(6555)
s(6586) =< s(6555)
s(6594) =< s(6555)
s(6551) =< s(6555)
s(6576) =< s(6559)
s(6586) =< s(6559)
s(6594) =< s(6559)
s(6551) =< s(6559)
s(6576) =< s(6552)
s(6586) =< s(6552)
s(6586) =< s(6575)
s(6551) =< s(6575)
s(6576) =< s(6575)
s(6576) =< s(6560)
s(6586) =< s(6560)
s(6586) =< s(6574)
s(6551) =< s(6574)
s(6586) =< s(6577)
s(6593) =< s(6577)
s(6586) =< s(6570)
s(6594) =< s(6570)
s(6551) =< s(6570)
s(6593) =< s(6570)
s(6595) =< s(6566)-2
s(6596) =< s(6566)* (1/2)
s(6597) =< s(6566)* (1/2)-1
s(6598) =< s(6566)-1
s(6599) =< s(6592)
s(6600) =< s(6551)*s(6589)
s(6591) =< s(6551)*s(6589)
s(6601) =< s(6576)*s(6566)
s(6599) =< s(6600)
s(6586) =< s(6591)+s(6588)+s(6552)
s(6594) =< s(6591)+s(6588)+s(6552)
s(6602) =< s(6576)*s(6597)
s(6603) =< s(6576)*s(6596)
s(6586) =< s(6599)+s(6588)+s(6583)
s(6594) =< s(6599)+s(6588)+s(6583)
s(6604) =< s(6602)* (3/2)
s(6605) =< s(6602)* (1/2)
s(6606) =< s(6586)*s(6595)
s(6607) =< s(6586)*s(6553)
s(6608) =< s(6586)*s(6597)
s(6609) =< s(6586)*s(6596)
s(6610) =< s(6586)*s(6598)
s(6611) =< s(6608)* (1/2)
s(6612) =< s(6608)* (3/2)
s(6611) =< s(6607)
s(6613) =< s(6607)
s(6613) =< s(6610)
s(6614) =< s(6610)
s(6613) =< s(6606)
s(6614) =< s(6606)
s(6611) =< s(6587)
s(6613) =< s(6587)
s(6611) =< s(6609)
s(6613) =< s(6609)
s(6611) =< s(6608)
s(6613) =< s(6608)
s(6613) =< s(6612)
s(6614) =< s(6612)
s(6605) =< s(6593)
s(6615) =< s(6593)
s(6615) =< s(6601)
s(6616) =< s(6601)
s(6605) =< s(6603)
s(6615) =< s(6603)
s(6605) =< s(6602)
s(6615) =< s(6602)
s(6615) =< s(6604)
s(6616) =< s(6604)
s(6605) =< s(6567)
s(6615) =< s(6567)

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(6420)=<E-2,s(6556)=<E-2,s(6433)=<E,s(6552)=<E,s(6434)=<E+1,s(6553)=<E+1,s(6438)=<3*E+2,s(6566)=<3*E+2]
* Psum in Loop 302: [it(302)=<1,s(6617)=<1/2,s(6629)=< -B-2*D+2*E+B'+4,s(6633)=< -3*D'+3*E',s(6679)=< -3*D'+3*E'+3,s(6667)=< -3*D'+4*E'+3,s(6670)=< -3*D'+6*E'+3,s(6673)=< -2*D'+2*E'+2,s(6681)=< -2*D'+2*E'+3,s(6678)=< -D'+E',s(6669)=< -D'+E'+1,s(6682)=< -D'+E'+2,s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for s(6420)=<E-2  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(6420)=<E-2] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(6556)=<E-2,s(6433)=<E,s(6552)=<E,s(6434)=<E+1,s(6553)=<E+1,s(6438)=<3*E+2,s(6566)=<3*E+2]
* Psum in Loop 302: [it(302)=<1,s(6617)=<1/2,s(6629)=< -B-2*D+2*E+B'+4,s(6633)=< -3*D'+3*E',s(6679)=< -3*D'+3*E'+3,s(6667)=< -3*D'+4*E'+3,s(6670)=< -3*D'+6*E'+3,s(6673)=< -2*D'+2*E'+2,s(6681)=< -2*D'+2*E'+3,s(6678)=< -D'+E',s(6669)=< -D'+E'+1,s(6682)=< -D'+E'+2,s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for s(6556)=<E-2  
   - Found a solution using cacheing 
 * Adding constraints:[s(6556)=<s(6420)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(6433)=<E,s(6552)=<E,s(6434)=<E+1,s(6553)=<E+1,s(6438)=<3*E+2,s(6566)=<3*E+2]
* Psum in Loop 302: [it(302)=<1,s(6617)=<1/2,s(6629)=< -B-2*D+2*E+B'+4,s(6633)=< -3*D'+3*E',s(6679)=< -3*D'+3*E'+3,s(6667)=< -3*D'+4*E'+3,s(6670)=< -3*D'+6*E'+3,s(6673)=< -2*D'+2*E'+2,s(6681)=< -2*D'+2*E'+3,s(6678)=< -D'+E',s(6669)=< -D'+E'+1,s(6682)=< -D'+E'+2,s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for s(6433)=<E  
   - Found a solution using cacheing 
 * Adding constraints:[s(6433)=<s(6420)+2] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(6552)=<E,s(6434)=<E+1,s(6553)=<E+1,s(6438)=<3*E+2,s(6566)=<3*E+2]
* Psum in Loop 302: [it(302)=<1,s(6617)=<1/2,s(6629)=< -B-2*D+2*E+B'+4,s(6633)=< -3*D'+3*E',s(6679)=< -3*D'+3*E'+3,s(6667)=< -3*D'+4*E'+3,s(6670)=< -3*D'+6*E'+3,s(6673)=< -2*D'+2*E'+2,s(6681)=< -2*D'+2*E'+3,s(6678)=< -D'+E',s(6669)=< -D'+E'+1,s(6682)=< -D'+E'+2,s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for s(6552)=<E  
   - Found a solution using cacheing 
 * Adding constraints:[s(6552)=<s(6420)+2] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(6434)=<E+1,s(6553)=<E+1,s(6438)=<3*E+2,s(6566)=<3*E+2]
* Psum in Loop 302: [it(302)=<1,s(6617)=<1/2,s(6629)=< -B-2*D+2*E+B'+4,s(6633)=< -3*D'+3*E',s(6679)=< -3*D'+3*E'+3,s(6667)=< -3*D'+4*E'+3,s(6670)=< -3*D'+6*E'+3,s(6673)=< -2*D'+2*E'+2,s(6681)=< -2*D'+2*E'+3,s(6678)=< -D'+E',s(6669)=< -D'+E'+1,s(6682)=< -D'+E'+2,s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for s(6434)=<E+1  
   - Found a solution using cacheing 
 * Adding constraints:[s(6434)=<s(6420)+3] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(6553)=<E+1,s(6438)=<3*E+2,s(6566)=<3*E+2]
* Psum in Loop 302: [it(302)=<1,s(6617)=<1/2,s(6629)=< -B-2*D+2*E+B'+4,s(6633)=< -3*D'+3*E',s(6679)=< -3*D'+3*E'+3,s(6667)=< -3*D'+4*E'+3,s(6670)=< -3*D'+6*E'+3,s(6673)=< -2*D'+2*E'+2,s(6681)=< -2*D'+2*E'+3,s(6678)=< -D'+E',s(6669)=< -D'+E'+1,s(6682)=< -D'+E'+2,s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for s(6553)=<E+1  
   - Found a solution using cacheing 
 * Adding constraints:[s(6553)=<s(6420)+3] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(6438)=<3*E+2,s(6566)=<3*E+2]
* Psum in Loop 302: [it(302)=<1,s(6617)=<1/2,s(6629)=< -B-2*D+2*E+B'+4,s(6633)=< -3*D'+3*E',s(6679)=< -3*D'+3*E'+3,s(6667)=< -3*D'+4*E'+3,s(6670)=< -3*D'+6*E'+3,s(6673)=< -2*D'+2*E'+2,s(6681)=< -2*D'+2*E'+3,s(6678)=< -D'+E',s(6669)=< -D'+E'+1,s(6682)=< -D'+E'+2,s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for s(6438)=<3*E+2  
   - Found a solution using cacheing 
 * Adding constraints:[s(6438)=<s(6420)*3+8] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(6566)=<3*E+2]
* Psum in Loop 302: [it(302)=<1,s(6617)=<1/2,s(6629)=< -B-2*D+2*E+B'+4,s(6633)=< -3*D'+3*E',s(6679)=< -3*D'+3*E'+3,s(6667)=< -3*D'+4*E'+3,s(6670)=< -3*D'+6*E'+3,s(6673)=< -2*D'+2*E'+2,s(6681)=< -2*D'+2*E'+3,s(6678)=< -D'+E',s(6669)=< -D'+E'+1,s(6682)=< -D'+E'+2,s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for s(6566)=<3*E+2  
   - Found a solution using cacheing 
 * Adding constraints:[s(6566)=<s(6420)*3+8] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [it(302)=<1,s(6617)=<1/2,s(6629)=< -B-2*D+2*E+B'+4,s(6633)=< -3*D'+3*E',s(6679)=< -3*D'+3*E'+3,s(6667)=< -3*D'+4*E'+3,s(6670)=< -3*D'+6*E'+3,s(6673)=< -2*D'+2*E'+2,s(6681)=< -2*D'+2*E'+3,s(6678)=< -D'+E',s(6669)=< -D'+E'+1,s(6682)=< -D'+E'+2,s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for it(302)=<1  in Loop 302 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - Loop 304 is collaborative and bounds [it(304)] 
     - head Candidate: B+1 
       - Loop 304 is collaborative and bounds [it(304)] 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B/2+1/2 
       - Loop 304 is collaborative and bounds [s(6683)] 
     - tail Candidate: A-1 
       - Loop 304 is collaborative and bounds [it(304)] 
     - tail Candidate: B+1 
       - Loop 304 is collaborative and bounds [it(304)] 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B/2+1/2 
       - Loop 304 is collaborative and bounds [s(6683)] 
 * Adding constraints: [it(302)+it(304)=<A-1,it(302)+it(304)=<B+1,it(302)+it(304)=<A-1,it(302)+s(6683)=<B/2+1/2,it(302)+it(304)=<A-A',it(302)+it(304)=<B-B',it(302)+it(304)=<A-A',it(302)+s(6683)=<B/2-B'/2] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(6617)=<1/2,s(6629)=< -B-2*D+2*E+B'+4,s(6633)=< -3*D'+3*E',s(6679)=< -3*D'+3*E'+3,s(6667)=< -3*D'+4*E'+3,s(6670)=< -3*D'+6*E'+3,s(6673)=< -2*D'+2*E'+2,s(6681)=< -2*D'+2*E'+3,s(6678)=< -D'+E',s(6669)=< -D'+E'+1,s(6682)=< -D'+E'+2,s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6617)=<1/2  in Loop 302 
   - Found a solution using cacheing 
 * Adding constraints: [s(6617)=<aux(717)* (1/2),aux(717)+it(304)=<A-1,aux(717)+it(304)=<B+1,aux(717)+it(304)=<A-1,aux(717)+s(6683)=<B/2+1/2,aux(717)+it(304)=<A-A',aux(717)+it(304)=<B-B',aux(717)+it(304)=<A-A',aux(717)+s(6683)=<B/2-B'/2] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(6629)=< -B-2*D+2*E+B'+4,s(6633)=< -3*D'+3*E',s(6679)=< -3*D'+3*E'+3,s(6667)=< -3*D'+4*E'+3,s(6670)=< -3*D'+6*E'+3,s(6673)=< -2*D'+2*E'+2,s(6681)=< -2*D'+2*E'+3,s(6678)=< -D'+E',s(6669)=< -D'+E'+1,s(6682)=< -D'+E'+2,s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6629)=< -B-2*D+2*E+B'+4  in Loop 302 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(718)=<2*E-2,aux(718)=< -2*D+2*E+2] 
 * Adding constraints: [s(6629)=<it(302)*aux(718)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(718)=< -2*D+2*E+2,aux(718)=<2*E-2]
* Psum in Loop 302: [s(6633)=< -3*D'+3*E',s(6679)=< -3*D'+3*E'+3,s(6667)=< -3*D'+4*E'+3,s(6670)=< -3*D'+6*E'+3,s(6673)=< -2*D'+2*E'+2,s(6681)=< -2*D'+2*E'+3,s(6678)=< -D'+E',s(6669)=< -D'+E'+1,s(6682)=< -D'+E'+2,s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(718)=< -2*D+2*E+2  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(718)=<2*E-2,aux(718)=< -2*D+2*E+2] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(718)=<2*E-2]
* Psum in Loop 302: [s(6633)=< -3*D'+3*E',s(6679)=< -3*D'+3*E'+3,s(6667)=< -3*D'+4*E'+3,s(6670)=< -3*D'+6*E'+3,s(6673)=< -2*D'+2*E'+2,s(6681)=< -2*D'+2*E'+3,s(6678)=< -D'+E',s(6669)=< -D'+E'+1,s(6682)=< -D'+E'+2,s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(718)=<2*E-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(718)=<s(6420)*2+2] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(6633)=< -3*D'+3*E',s(6679)=< -3*D'+3*E'+3,s(6667)=< -3*D'+4*E'+3,s(6670)=< -3*D'+6*E'+3,s(6673)=< -2*D'+2*E'+2,s(6681)=< -2*D'+2*E'+3,s(6678)=< -D'+E',s(6669)=< -D'+E'+1,s(6682)=< -D'+E'+2,s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6633)=< -3*D'+3*E'  in Loop 302 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(719)=<3*E-6,aux(719)=< -3*D+3*E] 
 * Adding constraints: [s(6633)=<it(302)*aux(719)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(719)=< -3*D+3*E,aux(719)=<3*E-6]
* Psum in Loop 302: [s(6679)=< -3*D'+3*E'+3,s(6667)=< -3*D'+4*E'+3,s(6670)=< -3*D'+6*E'+3,s(6673)=< -2*D'+2*E'+2,s(6681)=< -2*D'+2*E'+3,s(6678)=< -D'+E',s(6669)=< -D'+E'+1,s(6682)=< -D'+E'+2,s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(719)=< -3*D+3*E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(719)=<aux(718)* (3/2)-3] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(719)=<3*E-6]
* Psum in Loop 302: [s(6679)=< -3*D'+3*E'+3,s(6667)=< -3*D'+4*E'+3,s(6670)=< -3*D'+6*E'+3,s(6673)=< -2*D'+2*E'+2,s(6681)=< -2*D'+2*E'+3,s(6678)=< -D'+E',s(6669)=< -D'+E'+1,s(6682)=< -D'+E'+2,s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(719)=<3*E-6  
   - Found a solution using cacheing 
 * Adding constraints:[aux(719)=<s(6420)*3] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(6679)=< -3*D'+3*E'+3,s(6667)=< -3*D'+4*E'+3,s(6670)=< -3*D'+6*E'+3,s(6673)=< -2*D'+2*E'+2,s(6681)=< -2*D'+2*E'+3,s(6678)=< -D'+E',s(6669)=< -D'+E'+1,s(6682)=< -D'+E'+2,s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6679)=< -3*D'+3*E'+3  in Loop 302 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(720)=<3*E-3,aux(720)=< -3*D+3*E+3] 
 * Adding constraints: [s(6679)=<it(302)*aux(720)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(720)=< -3*D+3*E+3,aux(720)=<3*E-3]
* Psum in Loop 302: [s(6667)=< -3*D'+4*E'+3,s(6670)=< -3*D'+6*E'+3,s(6673)=< -2*D'+2*E'+2,s(6681)=< -2*D'+2*E'+3,s(6678)=< -D'+E',s(6669)=< -D'+E'+1,s(6682)=< -D'+E'+2,s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(720)=< -3*D+3*E+3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(720)=<aux(718)* (3/2)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(720)=<3*E-3]
* Psum in Loop 302: [s(6667)=< -3*D'+4*E'+3,s(6670)=< -3*D'+6*E'+3,s(6673)=< -2*D'+2*E'+2,s(6681)=< -2*D'+2*E'+3,s(6678)=< -D'+E',s(6669)=< -D'+E'+1,s(6682)=< -D'+E'+2,s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(720)=<3*E-3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(720)=<s(6420)*3+3] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(6667)=< -3*D'+4*E'+3,s(6670)=< -3*D'+6*E'+3,s(6673)=< -2*D'+2*E'+2,s(6681)=< -2*D'+2*E'+3,s(6678)=< -D'+E',s(6669)=< -D'+E'+1,s(6682)=< -D'+E'+2,s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6667)=< -3*D'+4*E'+3  in Loop 302 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(721)=<4*E-3,aux(721)=< -3*D+4*E+3] 
 * Adding constraints: [s(6667)=<it(302)*aux(721)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(721)=< -3*D+4*E+3,aux(721)=<4*E-3]
* Psum in Loop 302: [s(6670)=< -3*D'+6*E'+3,s(6673)=< -2*D'+2*E'+2,s(6681)=< -2*D'+2*E'+3,s(6678)=< -D'+E',s(6669)=< -D'+E'+1,s(6682)=< -D'+E'+2,s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(721)=< -3*D+4*E+3  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(721)=<4*E-3,aux(721)=< -3*D+4*E+3] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(721)=<4*E-3]
* Psum in Loop 302: [s(6670)=< -3*D'+6*E'+3,s(6673)=< -2*D'+2*E'+2,s(6681)=< -2*D'+2*E'+3,s(6678)=< -D'+E',s(6669)=< -D'+E'+1,s(6682)=< -D'+E'+2,s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(721)=<4*E-3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(721)=<s(6420)*4+5] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(6670)=< -3*D'+6*E'+3,s(6673)=< -2*D'+2*E'+2,s(6681)=< -2*D'+2*E'+3,s(6678)=< -D'+E',s(6669)=< -D'+E'+1,s(6682)=< -D'+E'+2,s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6670)=< -3*D'+6*E'+3  in Loop 302 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(722)=<6*E-3,aux(722)=< -3*D+6*E+3] 
 * Adding constraints: [s(6670)=<it(302)*aux(722)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(722)=< -3*D+6*E+3,aux(722)=<6*E-3]
* Psum in Loop 302: [s(6673)=< -2*D'+2*E'+2,s(6681)=< -2*D'+2*E'+3,s(6678)=< -D'+E',s(6669)=< -D'+E'+1,s(6682)=< -D'+E'+2,s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(722)=< -3*D+6*E+3  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(722)=<6*E-3,aux(722)=< -3*D+6*E+3] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(722)=<6*E-3]
* Psum in Loop 302: [s(6673)=< -2*D'+2*E'+2,s(6681)=< -2*D'+2*E'+3,s(6678)=< -D'+E',s(6669)=< -D'+E'+1,s(6682)=< -D'+E'+2,s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(722)=<6*E-3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(722)=<s(6420)*6+9] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(6673)=< -2*D'+2*E'+2,s(6681)=< -2*D'+2*E'+3,s(6678)=< -D'+E',s(6669)=< -D'+E'+1,s(6682)=< -D'+E'+2,s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6673)=< -2*D'+2*E'+2  in Loop 302 
   - Found a solution using cacheing 
 * Adding constraints: [s(6673)=<aux(723)* (2/3),aux(723)=<it(302)*aux(720)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(6681)=< -2*D'+2*E'+3,s(6678)=< -D'+E',s(6669)=< -D'+E'+1,s(6682)=< -D'+E'+2,s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6681)=< -2*D'+2*E'+3  in Loop 302 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(724)=<2*E-1,aux(724)=< -2*D+2*E+3] 
 * Adding constraints: [s(6681)=<it(302)*aux(724)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(724)=< -2*D+2*E+3,aux(724)=<2*E-1]
* Psum in Loop 302: [s(6678)=< -D'+E',s(6669)=< -D'+E'+1,s(6682)=< -D'+E'+2,s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(724)=< -2*D+2*E+3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(724)=<aux(718)+1] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(724)=<2*E-1]
* Psum in Loop 302: [s(6678)=< -D'+E',s(6669)=< -D'+E'+1,s(6682)=< -D'+E'+2,s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(724)=<2*E-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(724)=<s(6420)*2+3] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(6678)=< -D'+E',s(6669)=< -D'+E'+1,s(6682)=< -D'+E'+2,s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6678)=< -D'+E'  in Loop 302 
   - Found a solution using cacheing 
 * Adding constraints: [s(6678)=<aux(725)* (1/3),aux(725)=<it(302)*aux(719)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(6669)=< -D'+E'+1,s(6682)=< -D'+E'+2,s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6669)=< -D'+E'+1  in Loop 302 
   - Found a solution using cacheing 
 * Adding constraints: [s(6669)=<aux(726)* (1/3),aux(726)=<it(302)*aux(720)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(6682)=< -D'+E'+2,s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6682)=< -D'+E'+2  in Loop 302 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(727)=<E,aux(727)=< -D+E+2] 
 * Adding constraints: [s(6682)=<it(302)*aux(727)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(727)=< -D+E+2,aux(727)=<E]
* Psum in Loop 302: [s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(727)=< -D+E+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(727)=<aux(718)* (1/2)+1] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(727)=<E]
* Psum in Loop 302: [s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(727)=<E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(727)=<s(6420)+2] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(6680)=< -D'+E'+3/2,s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6680)=< -D'+E'+3/2  in Loop 302 
   - Found a solution using cacheing 
 * Adding constraints: [s(6680)=<aux(728)* (1/2),aux(728)=<it(302)*aux(724)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(6677)=< -D'+2*E'+1,s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6677)=< -D'+2*E'+1  in Loop 302 
   - Found a solution using cacheing 
 * Adding constraints: [s(6677)=<aux(729)* (1/3),aux(729)=<it(302)*aux(722)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(6668)=< -D'+2*E'+2,s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6668)=< -D'+2*E'+2  in Loop 302 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(730)=<2*E,aux(730)=< -D+2*E+2] 
 * Adding constraints: [s(6668)=<it(302)*aux(730)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(730)=< -D+2*E+2,aux(730)=<2*E]
* Psum in Loop 302: [s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(730)=< -D+2*E+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(730)=<aux(722)* (1/3)+1] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(730)=<2*E]
* Psum in Loop 302: [s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(730)=<2*E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(730)=<s(6420)*2+4] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(6674)=< -D'+3*E'+3,s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6674)=< -D'+3*E'+3  in Loop 302 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(731)=<3*E+1,aux(731)=< -D+3*E+3] 
 * Adding constraints: [s(6674)=<it(302)*aux(731)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(731)=< -D+3*E+3,aux(731)=<3*E+1]
* Psum in Loop 302: [s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(731)=< -D+3*E+3  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(731)=<3*E+1,aux(731)=< -D+3*E+3] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(731)=<3*E+1]
* Psum in Loop 302: [s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(731)=<3*E+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(731)=<s(6420)*3+7] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(6666)=<D',s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6666)=<D'  in Loop 302 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(732)=<D,aux(732)=<E] 
 * Adding constraints: [s(6666)=<it(302)*aux(732)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(732)=<D,aux(732)=<E]
* Psum in Loop 302: [s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(732)=<D  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(732)=<D,aux(732)=<E] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(732)=<E]
* Psum in Loop 302: [s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(732)=<E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(732)=<s(6420)+2] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(6658)=<D'+E',s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6658)=<D'+E'  in Loop 302 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(733)=<2*E,aux(733)=<D+E] 
 * Adding constraints: [s(6658)=<it(302)*aux(733)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(733)=<D+E,aux(733)=<2*E]
* Psum in Loop 302: [s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(733)=<D+E  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(733)=<2*E,aux(733)=<D+E] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(733)=<2*E]
* Psum in Loop 302: [s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(733)=<2*E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(733)=<s(6420)*2+4] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(6676)=<D'+2*E'+1,s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6676)=<D'+2*E'+1  in Loop 302 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(734)=<3*E+1,aux(734)=<D+2*E+1] 
 * Adding constraints: [s(6676)=<it(302)*aux(734)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(734)=<D+2*E+1,aux(734)=<3*E+1]
* Psum in Loop 302: [s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(734)=<D+2*E+1  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(734)=<3*E+1,aux(734)=<D+2*E+1] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(734)=<3*E+1]
* Psum in Loop 302: [s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(734)=<3*E+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(734)=<s(6420)*3+7] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(6653)=< -3/2*D'+3*E'+3/2,s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6653)=< -3/2*D'+3*E'+3/2  in Loop 302 
   - Found a solution using cacheing 
 * Adding constraints: [s(6653)=<aux(735)* (1/2),aux(735)=<it(302)*aux(722)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(6665)=< -3/2*D'+3/2*E'+3/2,s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6665)=< -3/2*D'+3/2*E'+3/2  in Loop 302 
   - Found a solution using cacheing 
 * Adding constraints: [s(6665)=<aux(736)* (1/2),aux(736)=<it(302)*aux(720)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(6656)=< -D'/2+E'+1/2,s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6656)=< -D'/2+E'+1/2  in Loop 302 
   - Found a solution using cacheing 
 * Adding constraints: [s(6656)=<aux(737)* (1/6),aux(737)=<it(302)*aux(722)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(6675)=<3/2*D'+3*E'+3/2,s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6675)=<3/2*D'+3*E'+3/2  in Loop 302 
   - Found a solution using cacheing 
 * Adding constraints: [s(6675)=<aux(738)* (3/2),aux(738)=<it(302)*aux(734)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(6649)=<E',s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6649)=<E'  in Loop 302 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(739)=<E] 
 * Adding constraints: [s(6649)=<it(302)*aux(739)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(739)=<E]
* Psum in Loop 302: [s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(739)=<E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(739)=<s(6420)+2] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(6664)=<E'+1,s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6664)=<E'+1  in Loop 302 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(740)=<E+1] 
 * Adding constraints: [s(6664)=<it(302)*aux(740)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(740)=<E+1]
* Psum in Loop 302: [s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(740)=<E+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(740)=<s(6420)+3] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(6661)=<E'+2,s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6661)=<E'+2  in Loop 302 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(741)=<E+2] 
 * Adding constraints: [s(6661)=<it(302)*aux(741)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(741)=<E+2]
* Psum in Loop 302: [s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(741)=<E+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(741)=<s(6420)+4] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(6659)=<E'+1/2,s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6659)=<E'+1/2  in Loop 302 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(742)=<E+1/2] 
 * Adding constraints: [s(6659)=<it(302)*aux(742)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(742)=<E+1/2]
* Psum in Loop 302: [s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(742)=<E+1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(742)=<s(6420)+5/2] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(6662)=<2*E'+1,s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6662)=<2*E'+1  in Loop 302 
   - Found a solution using cacheing 
 * Adding constraints: [s(6662)=<aux(743)*2,aux(743)=<it(302)*aux(742)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(6655)=<E'/2,s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6655)=<E'/2  in Loop 302 
   - Found a solution using cacheing 
 * Adding constraints: [s(6655)=<aux(744)* (1/2),aux(744)=<it(302)*aux(739)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(6657)=<E'/2+1/2,s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6657)=<E'/2+1/2  in Loop 302 
   - Found a solution using cacheing 
 * Adding constraints: [s(6657)=<aux(745)* (1/2),aux(745)=<it(302)*aux(740)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(6618)=<E'/3,s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6618)=<E'/3  in Loop 302 
   - Found a solution using cacheing 
 * Adding constraints: [s(6618)=<aux(746)* (1/3),aux(746)=<it(302)*aux(739)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(6654)=<3/2*E'+3/2]
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6654)=<3/2*E'+3/2  in Loop 302 
   - Found a solution using cacheing 
 * Adding constraints: [s(6654)=<aux(747)* (3/2),aux(747)=<it(302)*aux(740)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 304: [it(304)=<1,s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for it(304)=<1  in Loop 304 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(302)+it(304)=<A-1,it(302)+it(304)=<B+1,it(302)+it(304)=<A-1,it(302)+it(304)=<B+1,it(302)+it(304)=<A-A',it(302)+it(304)=<B-B',it(302)+it(304)=<A-A',it(302)+it(304)=<B-B'] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 304: [s(6683)=<1/2,s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6683)=<1/2  in Loop 304 
   - Found a solution using cacheing 
 * Adding constraints: [s(6683)=<aux(748)* (1/2),aux(748)+it(302)=<A-1,aux(748)+it(302)=<B+1,aux(748)+it(302)=<A-1,aux(748)+it(302)=<B+1,aux(748)+it(302)=<A-A',aux(748)+it(302)=<B-B',aux(748)+it(302)=<A-A',aux(748)+it(302)=<B-B'] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 304: [s(6712)=<E,s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6712)=<E  in Loop 304 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(749)=<E] 
 * Adding constraints: [s(6712)=<it(304)*aux(749)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(749)=<E]
* Psum in Loop 304: [s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(749)=<E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(749)=<s(6420)+2] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 304: [s(6727)=<E+1,s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6727)=<E+1  in Loop 304 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(750)=<E+1] 
 * Adding constraints: [s(6727)=<it(304)*aux(750)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(750)=<E+1]
* Psum in Loop 304: [s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(750)=<E+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(750)=<s(6420)+3] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 304: [s(6724)=<E+2,s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6724)=<E+2  in Loop 304 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(751)=<E+2] 
 * Adding constraints: [s(6724)=<it(304)*aux(751)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(751)=<E+2]
* Psum in Loop 304: [s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(751)=<E+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(751)=<s(6420)+4] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 304: [s(6722)=<E+1/2,s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6722)=<E+1/2  in Loop 304 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(752)=<E+1/2] 
 * Adding constraints: [s(6722)=<it(304)*aux(752)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(752)=<E+1/2]
* Psum in Loop 304: [s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(752)=<E+1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(752)=<s(6420)+5/2] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 304: [s(6741)=<E-D',s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6741)=<E-D'  in Loop 304 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(753)=<E-2,aux(753)=< -D+E] 
 * Adding constraints: [s(6741)=<it(304)*aux(753)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(753)=< -D+E,aux(753)=<E-2]
* Psum in Loop 304: [s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(753)=< -D+E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(753)=<aux(718)* (1/2)-1] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(753)=<E-2]
* Psum in Loop 304: [s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(753)=<E-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(753)=<s(6420)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 304: [s(6732)=<E-D'+1,s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6732)=<E-D'+1  in Loop 304 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(754)=<E-1,aux(754)=< -D+E+1] 
 * Adding constraints: [s(6732)=<it(304)*aux(754)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(754)=< -D+E+1,aux(754)=<E-1]
* Psum in Loop 304: [s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(754)=< -D+E+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(754)=<aux(718)* (1/2)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(754)=<E-1]
* Psum in Loop 304: [s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(754)=<E-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(754)=<s(6420)+1] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 304: [s(6695)=<E-D'+2,s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6695)=<E-D'+2  in Loop 304 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(755)=<E,aux(755)=< -D+E+2] 
 * Adding constraints: [s(6695)=<it(304)*aux(755)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(755)=< -D+E+2,aux(755)=<E]
* Psum in Loop 304: [s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(755)=< -D+E+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(755)=<aux(718)* (1/2)+1] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(755)=<E]
* Psum in Loop 304: [s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(755)=<E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(755)=<s(6420)+2] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 304: [s(6721)=<E+D',s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6721)=<E+D'  in Loop 304 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(756)=<2*E,aux(756)=<D+E] 
 * Adding constraints: [s(6721)=<it(304)*aux(756)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(756)=<D+E,aux(756)=<2*E]
* Psum in Loop 304: [s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(756)=<D+E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(756)=<aux(733)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(756)=<2*E]
* Psum in Loop 304: [s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(756)=<2*E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(756)=<s(6420)*2+4] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 304: [s(6719)=<E-D'/2+1/2,s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6719)=<E-D'/2+1/2  in Loop 304 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(757)=<E-1/2,aux(757)=< -D/2+E+1/2] 
 * Adding constraints: [s(6719)=<it(304)*aux(757)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(757)=< -D/2+E+1/2,aux(757)=<E-1/2]
* Psum in Loop 304: [s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(757)=< -D/2+E+1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(757)=<aux(722)* (1/6)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(757)=<E-1/2]
* Psum in Loop 304: [s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(757)=<E-1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(757)=<s(6420)+3/2] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 304: [s(6725)=<2*E+1,s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6725)=<2*E+1  in Loop 304 
   - Found a solution using cacheing 
 * Adding constraints: [s(6725)=<aux(758)*2,aux(758)=<it(304)*aux(752)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 304: [s(6736)=<2*E-2*D'+2,s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6736)=<2*E-2*D'+2  in Loop 304 
   - Found a solution using cacheing 
 * Adding constraints: [s(6736)=<aux(759)*2,aux(759)=<it(304)*aux(754)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 304: [s(6740)=<2*E-D'+1,s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6740)=<2*E-D'+1  in Loop 304 
   - Found a solution using cacheing 
 * Adding constraints: [s(6740)=<aux(760)*2,aux(760)=<it(304)*aux(757)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 304: [s(6731)=<2*E-D'+2,s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6731)=<2*E-D'+2  in Loop 304 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(761)=<2*E,aux(761)=< -D+2*E+2] 
 * Adding constraints: [s(6731)=<it(304)*aux(761)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(761)=< -D+2*E+2,aux(761)=<2*E]
* Psum in Loop 304: [s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(761)=< -D+2*E+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(761)=<aux(722)* (1/3)+1] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(761)=<2*E]
* Psum in Loop 304: [s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(761)=<2*E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(761)=<s(6420)*2+4] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 304: [s(6739)=<2*E+D'+1,s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6739)=<2*E+D'+1  in Loop 304 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(762)=<3*E+1,aux(762)=<D+2*E+1] 
 * Adding constraints: [s(6739)=<it(304)*aux(762)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(762)=<D+2*E+1,aux(762)=<3*E+1]
* Psum in Loop 304: [s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(762)=<D+2*E+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(762)=<aux(734)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(762)=<3*E+1]
* Psum in Loop 304: [s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(762)=<3*E+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(762)=<s(6420)*3+7] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 304: [s(6696)=<3*E-3*D',s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6696)=<3*E-3*D'  in Loop 304 
   - Found a solution using cacheing 
 * Adding constraints: [s(6696)=<aux(763)*3,aux(763)=<it(304)*aux(753)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 304: [s(6742)=<3*E-3*D'+3,s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6742)=<3*E-3*D'+3  in Loop 304 
   - Found a solution using cacheing 
 * Adding constraints: [s(6742)=<aux(764)*3,aux(764)=<it(304)*aux(754)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 304: [s(6737)=<3*E-D'+3,s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6737)=<3*E-D'+3  in Loop 304 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(765)=<3*E+1,aux(765)=< -D+3*E+3] 
 * Adding constraints: [s(6737)=<it(304)*aux(765)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(765)=< -D+3*E+3,aux(765)=<3*E+1]
* Psum in Loop 304: [s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(765)=< -D+3*E+3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(765)=<aux(731)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(765)=<3*E+1]
* Psum in Loop 304: [s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(765)=<3*E+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(765)=<s(6420)*3+7] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 304: [s(6716)=<3*E-3/2*D'+3/2,s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6716)=<3*E-3/2*D'+3/2  in Loop 304 
   - Found a solution using cacheing 
 * Adding constraints: [s(6716)=<aux(766)*3,aux(766)=<it(304)*aux(757)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 304: [s(6738)=<3*E+3/2*D'+3/2,s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6738)=<3*E+3/2*D'+3/2  in Loop 304 
   - Found a solution using cacheing 
 * Adding constraints: [s(6738)=<aux(767)* (3/2),aux(767)=<it(304)*aux(762)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 304: [s(6730)=<4*E-3*D'+3,s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6730)=<4*E-3*D'+3  in Loop 304 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(768)=<4*E-3,aux(768)=< -3*D+4*E+3] 
 * Adding constraints: [s(6730)=<it(304)*aux(768)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(768)=< -3*D+4*E+3,aux(768)=<4*E-3]
* Psum in Loop 304: [s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(768)=< -3*D+4*E+3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(768)=<aux(721)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(768)=<4*E-3]
* Psum in Loop 304: [s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing max_min for aux(768)=<4*E-3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(768)=<s(6420)*4+5] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 304: [s(6733)=<6*E-3*D'+3,s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6733)=<6*E-3*D'+3  in Loop 304 
   - Found a solution using cacheing 
 * Adding constraints: [s(6733)=<aux(769)*6,aux(769)=<it(304)*aux(757)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 304: [s(6718)=<E/2,s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6718)=<E/2  in Loop 304 
   - Found a solution using cacheing 
 * Adding constraints: [s(6718)=<aux(770)* (1/2),aux(770)=<it(304)*aux(749)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 304: [s(6720)=<E/2+1/2,s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6720)=<E/2+1/2  in Loop 304 
   - Found a solution using cacheing 
 * Adding constraints: [s(6720)=<aux(771)* (1/2),aux(771)=<it(304)*aux(750)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 304: [s(6684)=<E/3,s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6684)=<E/3  in Loop 304 
   - Found a solution using cacheing 
 * Adding constraints: [s(6684)=<aux(772)* (1/3),aux(772)=<it(304)*aux(749)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 304: [s(6717)=<3/2*E+3/2,s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6717)=<3/2*E+3/2  in Loop 304 
   - Found a solution using cacheing 
 * Adding constraints: [s(6717)=<aux(773)* (3/2),aux(773)=<it(304)*aux(750)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 304: [s(6728)=<3/2*E-3/2*D'+3/2,s(6729)=<D']

###### Computing sum for s(6728)=<3/2*E-3/2*D'+3/2  in Loop 304 
   - Found a solution using cacheing 
 * Adding constraints: [s(6728)=<aux(774)* (3/2),aux(774)=<it(304)*aux(754)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 304: [s(6729)=<D']

###### Computing sum for s(6729)=<D'  in Loop 304 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(775)=<D,aux(775)=<E] 
 * Adding constraints: [s(6729)=<it(304)*aux(775)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(775)=<D,aux(775)=<E]

###### Computing max_min for aux(775)=<D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(775)=<aux(732)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(775)=<E]

###### Computing max_min for aux(775)=<E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(775)=<s(6420)+2] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [302,304] 

#### Simplifying cost structure of phase [302,304] 
 * Joined equivalent variables [aux(782),s(6420)] into aux(782)
 * Joined equivalent variables [aux(739),aux(749),s(6433),s(6552)] into aux(739)
 * Joined equivalent variables [aux(727),aux(755)] into aux(727)
 * Joined equivalent variables [aux(730),aux(761)] into aux(730)
 * Joined equivalent variables [aux(742),aux(752)] into aux(742)
 * Joined equivalent variables [aux(741),aux(751)] into aux(741)
 * Joined equivalent variables [aux(740),aux(750),s(6434),s(6553)] into aux(740)
 * Joined equivalent variables [s(6438),s(6566)] into s(6438)
 * Joined equivalent variables [aux(771),aux(773),s(6727)] into aux(771)
 * Joined equivalent variables [aux(770),aux(772),s(6712)] into aux(770)
 * Joined equivalent variables [aux(758),s(6722)] into aux(758)
 * Joined equivalent variables [aux(745),aux(747),s(6664)] into aux(745)
 * Joined equivalent variables [aux(744),aux(746),s(6649)] into aux(744)
 * Joined equivalent variables [aux(743),s(6659)] into aux(743)
 * Joined equivalent variables [aux(738),s(6676)] into aux(738)
 * Joined equivalent variables [aux(729),aux(735),aux(737)] into aux(729)
 * Joined equivalent variables [aux(759),aux(764),aux(774),s(6732)] into aux(759)
 * Joined equivalent variables [aux(760),aux(766),aux(769),s(6719)] into aux(760)
 * Joined equivalent variables [aux(767),s(6739)] into aux(767)
 * Joined equivalent variables [aux(763),s(6741)] into aux(763)
 * Joined equivalent variables [aux(723),aux(726),aux(736),s(6679)] into aux(723)
 * Joined equivalent variables [aux(728),s(6681)] into aux(728)
 * Joined equivalent variables [s(6463),s(6595)] into s(6463)
 * Joined equivalent variables [s(6464),s(6596)] into s(6464)
 * Joined equivalent variables [s(6465),s(6597)] into s(6465)
 * Joined equivalent variables [s(6466),s(6598)] into s(6466)

#### Cost of phase [302,304]:mat_mult(A,B,C,D,E,F,G,H,I) -> [mat_mult(A',B',C',D',E',F',G',H',I')] 
16*it(302)+16*it(304)+7*s(6617)+7*s(6618)+10*s(6619)+7*s(6620)+10*s(6621)+7*s(6622)+13*s(6623)+13*s(6624)+13*s(6625)+5*s(6626)+13*s(6627)+5*s(6628)+9*s(6629)+21*s(6630)+9*s(6631)+12*s(6632)+7*s(6683)+7*s(6684)+10*s(6685)+7*s(6686)+10*s(6687)+7*s(6688)+13*s(6689)+13*s(6690)+13*s(6691)+5*s(6692)+13*s(6693)+5*s(6694)+9*s(6695)+0
  Such that:aux(721) =< -3*D+4*E+3
aux(722) =< -3*D+6*E+3
aux(718) =< -2*D+2*E+2
aux(731) =< -D+3*E+3
aux(732) =< D
aux(733) =< D+E
aux(734) =< D+2*E+1
aux(721) =< 4*E
aux(722) =< 6*E
aux(776) =< A
aux(777) =< A-A'
aux(778) =< B+1
aux(779) =< B-B'
aux(780) =< B/2+1/2
aux(781) =< B/2-B'/2
aux(782) =< E
aux(783) =< 2*E
aux(784) =< 3*E+1
aux(717) =< aux(776)
aux(748) =< aux(776)
it(302) =< aux(776)
it(304) =< aux(776)
aux(717) =< aux(777)
aux(748) =< aux(777)
it(302) =< aux(777)
it(304) =< aux(777)
aux(717) =< aux(778)
aux(748) =< aux(778)
it(302) =< aux(778)
it(304) =< aux(778)
aux(717) =< aux(779)
aux(748) =< aux(779)
it(302) =< aux(779)
it(304) =< aux(779)
aux(717) =< aux(780)
it(302) =< aux(780)
s(6683) =< aux(780)
aux(717) =< aux(781)
it(302) =< aux(781)
s(6683) =< aux(781)
aux(732) =< aux(782)
aux(718) =< aux(783)
aux(733) =< aux(783)
aux(731) =< aux(784)
aux(734) =< aux(784)
aux(775) =< aux(782)+2
aux(768) =< aux(782)*4+5
aux(765) =< aux(782)*3+7
aux(762) =< aux(782)*3+7
aux(730) =< aux(782)*2+4
aux(757) =< aux(782)+3/2
aux(756) =< aux(782)*2+4
aux(727) =< aux(782)+2
aux(754) =< aux(782)+1
aux(753) =< aux(782)
aux(742) =< aux(782)+5/2
aux(741) =< aux(782)+4
aux(740) =< aux(782)+3
aux(739) =< aux(782)+2
aux(734) =< aux(782)*3+7
aux(733) =< aux(782)*2+4
aux(732) =< aux(782)+2
aux(731) =< aux(782)*3+7
aux(724) =< aux(782)*2+3
aux(722) =< aux(782)*6+9
aux(721) =< aux(782)*4+5
aux(720) =< aux(782)*3+3
aux(719) =< aux(782)*3
aux(718) =< aux(782)*2+2
s(6438) =< aux(782)*3+8
s(6556) =< aux(782)
s(6683) =< aux(748)* (1/2)
s(6617) =< aux(717)* (1/2)
aux(775) =< aux(732)
aux(768) =< aux(721)
aux(765) =< aux(731)
aux(762) =< aux(734)
aux(730) =< aux(722)* (1/3)+1
aux(757) =< aux(722)* (1/6)
aux(756) =< aux(733)
aux(727) =< aux(718)* (1/2)+1
aux(754) =< aux(718)* (1/2)
aux(753) =< aux(718)* (1/2)-1
aux(724) =< aux(718)+1
aux(720) =< aux(718)* (3/2)
aux(719) =< aux(718)* (3/2)-3
aux(771) =< it(304)*aux(740)
aux(770) =< it(304)*aux(739)
aux(758) =< it(304)*aux(742)
s(6724) =< it(304)*aux(741)
aux(745) =< it(302)*aux(740)
aux(744) =< it(302)*aux(739)
aux(743) =< it(302)*aux(742)
s(6661) =< it(302)*aux(741)
aux(738) =< it(302)*aux(734)
aux(729) =< it(302)*aux(722)
s(6658) =< it(302)*aux(733)
s(6666) =< it(302)*aux(732)
s(6674) =< it(302)*aux(731)
s(6670) =< it(302)*aux(722)
s(6667) =< it(302)*aux(721)
s(6629) =< it(302)*aux(718)
s(6729) =< it(304)*aux(775)
aux(759) =< it(304)*aux(754)
s(6717) =< aux(771)* (3/2)
s(6684) =< aux(770)* (1/3)
s(6720) =< aux(771)* (1/2)
s(6718) =< aux(770)* (1/2)
aux(760) =< it(304)*aux(757)
s(6730) =< it(304)*aux(768)
aux(767) =< it(304)*aux(762)
s(6737) =< it(304)*aux(765)
aux(763) =< it(304)*aux(753)
s(6731) =< it(304)*aux(730)
s(6725) =< aux(758)*2
s(6721) =< it(304)*aux(756)
s(6695) =< it(304)*aux(727)
s(6654) =< aux(745)* (3/2)
s(6618) =< aux(744)* (1/3)
s(6657) =< aux(745)* (1/2)
s(6655) =< aux(744)* (1/2)
s(6662) =< aux(743)*2
s(6675) =< aux(738)* (3/2)
s(6656) =< aux(729)* (1/6)
aux(723) =< it(302)*aux(720)
s(6653) =< aux(729)* (1/2)
s(6668) =< it(302)*aux(730)
s(6677) =< aux(729)* (1/3)
aux(728) =< it(302)*aux(724)
s(6682) =< it(302)*aux(727)
aux(725) =< it(302)*aux(719)
s(6633) =< it(302)*aux(719)
s(6728) =< aux(759)* (3/2)
s(6733) =< aux(760)*6
s(6738) =< aux(767)* (3/2)
s(6716) =< aux(760)*3
s(6742) =< aux(759)*3
s(6696) =< aux(763)*3
s(6740) =< aux(760)*2
s(6736) =< aux(759)*2
s(6665) =< aux(723)* (1/2)
s(6680) =< aux(728)* (1/2)
s(6669) =< aux(723)* (1/3)
s(6678) =< aux(725)* (1/3)
s(6673) =< aux(723)* (2/3)
s(6737) =< s(6742)
s(6734) =< s(6742)
s(6735) =< aux(763)
s(6581) =< s(6556)
s(6723) =< s(6740)
s(6733) =< s(6740)
s(6709) =< s(6729)
s(6723) =< aux(767)
s(6726) =< aux(767)
s(6726) =< s(6738)
s(6716) =< s(6738)
s(6735) =< aux(770)
s(6581) =< aux(739)
s(6709) =< aux(770)
s(6721) =< aux(770)
s(6734) =< aux(770)
s(6709) =< aux(771)
s(6685) =< aux(759)
s(6686) =< s(6737)
s(6683) =< s(6737)
s(6696) =< s(6737)
s(6683) =< s(6736)
s(6705) =< s(6736)
s(6710) =< s(6735)
s(6589) =< s(6581)
s(6683) =< aux(759)
s(6687) =< aux(759)
s(6713) =< s(6735)
s(6715) =< s(6735)
s(6713) =< s(6734)
s(6715) =< s(6734)
s(6686) =< s(6733)
s(6683) =< s(6733)
s(6687) =< s(6733)
s(6710) =< aux(759)
s(6686) =< s(6731)
s(6701) =< s(6731)
s(6686) =< s(6730)
s(6688) =< s(6730)
s(6683) =< s(6730)
s(6701) =< s(6730)
s(6684) =< s(6729)
s(6686) =< s(6729)
s(6688) =< s(6729)
s(6683) =< s(6729)
s(6686) =< s(6728)
s(6683) =< s(6728)
s(6696) =< s(6728)
s(6710) =< aux(770)
s(6589) =< aux(739)
s(6688) =< aux(770)
s(6683) =< aux(770)
s(6705) =< aux(770)
s(6685) =< aux(770)
s(6684) =< aux(771)
s(6686) =< aux(771)
s(6688) =< aux(771)
s(6683) =< aux(771)
s(6687) =< aux(770)
s(6713) =< aux(770)
s(6715) =< aux(770)
s(6713) =< s(6726)
s(6715) =< s(6726)
s(6686) =< s(6725)
s(6688) =< s(6725)
s(6683) =< s(6725)
s(6687) =< s(6725)
s(6684) =< s(6724)
s(6686) =< s(6724)
s(6688) =< s(6724)
s(6683) =< s(6724)
s(6684) =< s(6723)
s(6686) =< s(6723)
s(6688) =< s(6723)
s(6683) =< s(6723)
s(6684) =< aux(758)
s(6686) =< aux(758)
s(6688) =< aux(758)
s(6683) =< aux(758)
s(6684) =< s(6721)
s(6686) =< s(6721)
s(6688) =< s(6721)
s(6683) =< s(6721)
s(6684) =< aux(770)
s(6686) =< aux(770)
s(6686) =< s(6720)
s(6683) =< s(6720)
s(6684) =< s(6720)
s(6684) =< aux(760)
s(6686) =< aux(760)
s(6686) =< s(6718)
s(6683) =< s(6718)
s(6686) =< s(6717)
s(6701) =< s(6717)
s(6686) =< s(6716)
s(6688) =< s(6716)
s(6683) =< s(6716)
s(6701) =< s(6716)
s(6463) =< s(6438)-2
s(6464) =< s(6438)* (1/2)
s(6465) =< s(6438)* (1/2)-1
s(6466) =< s(6438)-1
s(6711) =< s(6715)
s(6714) =< s(6683)*s(6589)
s(6713) =< s(6683)*s(6589)
s(6700) =< s(6684)*s(6438)
s(6711) =< s(6714)
s(6686) =< s(6713)+s(6710)+aux(770)
s(6688) =< s(6713)+s(6710)+aux(770)
s(6698) =< s(6684)*s(6465)
s(6699) =< s(6684)*s(6464)
s(6686) =< s(6711)+s(6710)+s(6709)
s(6688) =< s(6711)+s(6710)+s(6709)
s(6697) =< s(6698)* (3/2)
s(6689) =< s(6698)* (1/2)
s(6706) =< s(6686)*s(6463)
s(6708) =< s(6686)*aux(740)
s(6703) =< s(6686)*s(6465)
s(6704) =< s(6686)*s(6464)
s(6707) =< s(6686)*s(6466)
s(6690) =< s(6703)* (1/2)
s(6702) =< s(6703)* (3/2)
s(6690) =< s(6708)
s(6691) =< s(6708)
s(6691) =< s(6707)
s(6692) =< s(6707)
s(6691) =< s(6706)
s(6692) =< s(6706)
s(6690) =< s(6705)
s(6691) =< s(6705)
s(6690) =< s(6704)
s(6691) =< s(6704)
s(6690) =< s(6703)
s(6691) =< s(6703)
s(6691) =< s(6702)
s(6692) =< s(6702)
s(6689) =< s(6701)
s(6693) =< s(6701)
s(6693) =< s(6700)
s(6694) =< s(6700)
s(6689) =< s(6699)
s(6693) =< s(6699)
s(6689) =< s(6698)
s(6693) =< s(6698)
s(6693) =< s(6697)
s(6694) =< s(6697)
s(6689) =< s(6696)
s(6693) =< s(6696)
s(6629) =< s(6673)
s(6630) =< s(6673)
s(6631) =< s(6673)
s(6630) =< s(6682)
s(6632) =< s(6682)
s(6632) =< s(6673)
s(6630) =< aux(728)
s(6632) =< aux(728)
s(6630) =< s(6680)
s(6630) =< s(6669)
s(6674) =< aux(723)
s(6671) =< aux(723)
s(6672) =< s(6678)
s(6449) =< aux(782)
s(6660) =< s(6677)
s(6670) =< s(6677)
s(6646) =< s(6666)
s(6660) =< aux(738)
s(6663) =< aux(738)
s(6663) =< s(6675)
s(6653) =< s(6675)
s(6672) =< aux(744)
s(6449) =< aux(739)
s(6646) =< aux(744)
s(6658) =< aux(744)
s(6671) =< aux(744)
s(6646) =< aux(745)
s(6619) =< s(6669)
s(6620) =< s(6674)
s(6617) =< s(6674)
s(6633) =< s(6674)
s(6617) =< s(6673)
s(6642) =< s(6673)
s(6647) =< s(6672)
s(6457) =< s(6449)
s(6617) =< s(6669)
s(6621) =< s(6669)
s(6650) =< s(6672)
s(6652) =< s(6672)
s(6650) =< s(6671)
s(6652) =< s(6671)
s(6620) =< s(6670)
s(6617) =< s(6670)
s(6621) =< s(6670)
s(6647) =< s(6669)
s(6620) =< s(6668)
s(6638) =< s(6668)
s(6620) =< s(6667)
s(6622) =< s(6667)
s(6617) =< s(6667)
s(6638) =< s(6667)
s(6618) =< s(6666)
s(6620) =< s(6666)
s(6622) =< s(6666)
s(6617) =< s(6666)
s(6620) =< s(6665)
s(6617) =< s(6665)
s(6633) =< s(6665)
s(6647) =< aux(744)
s(6457) =< aux(739)
s(6622) =< aux(744)
s(6617) =< aux(744)
s(6642) =< aux(744)
s(6619) =< aux(744)
s(6618) =< aux(745)
s(6620) =< aux(745)
s(6622) =< aux(745)
s(6617) =< aux(745)
s(6621) =< aux(744)
s(6650) =< aux(744)
s(6652) =< aux(744)
s(6650) =< s(6663)
s(6652) =< s(6663)
s(6620) =< s(6662)
s(6622) =< s(6662)
s(6617) =< s(6662)
s(6621) =< s(6662)
s(6618) =< s(6661)
s(6620) =< s(6661)
s(6622) =< s(6661)
s(6617) =< s(6661)
s(6618) =< s(6660)
s(6620) =< s(6660)
s(6622) =< s(6660)
s(6617) =< s(6660)
s(6618) =< aux(743)
s(6620) =< aux(743)
s(6622) =< aux(743)
s(6617) =< aux(743)
s(6618) =< s(6658)
s(6620) =< s(6658)
s(6622) =< s(6658)
s(6617) =< s(6658)
s(6618) =< aux(744)
s(6620) =< aux(744)
s(6620) =< s(6657)
s(6617) =< s(6657)
s(6618) =< s(6657)
s(6618) =< s(6656)
s(6620) =< s(6656)
s(6620) =< s(6655)
s(6617) =< s(6655)
s(6620) =< s(6654)
s(6638) =< s(6654)
s(6620) =< s(6653)
s(6622) =< s(6653)
s(6617) =< s(6653)
s(6638) =< s(6653)
s(6648) =< s(6652)
s(6651) =< s(6617)*s(6457)
s(6650) =< s(6617)*s(6457)
s(6637) =< s(6618)*s(6438)
s(6648) =< s(6651)
s(6620) =< s(6650)+s(6647)+aux(744)
s(6622) =< s(6650)+s(6647)+aux(744)
s(6635) =< s(6618)*s(6465)
s(6636) =< s(6618)*s(6464)
s(6620) =< s(6648)+s(6647)+s(6646)
s(6622) =< s(6648)+s(6647)+s(6646)
s(6634) =< s(6635)* (3/2)
s(6623) =< s(6635)* (1/2)
s(6643) =< s(6620)*s(6463)
s(6645) =< s(6620)*aux(740)
s(6640) =< s(6620)*s(6465)
s(6641) =< s(6620)*s(6464)
s(6644) =< s(6620)*s(6466)
s(6624) =< s(6640)* (1/2)
s(6639) =< s(6640)* (3/2)
s(6624) =< s(6645)
s(6625) =< s(6645)
s(6625) =< s(6644)
s(6626) =< s(6644)
s(6625) =< s(6643)
s(6626) =< s(6643)
s(6624) =< s(6642)
s(6625) =< s(6642)
s(6624) =< s(6641)
s(6625) =< s(6641)
s(6624) =< s(6640)
s(6625) =< s(6640)
s(6625) =< s(6639)
s(6626) =< s(6639)
s(6623) =< s(6638)
s(6627) =< s(6638)
s(6627) =< s(6637)
s(6628) =< s(6637)
s(6623) =< s(6636)
s(6627) =< s(6636)
s(6623) =< s(6635)
s(6627) =< s(6635)
s(6627) =< s(6634)
s(6628) =< s(6634)
s(6623) =< s(6633)
s(6627) =< s(6633)

#### Simplifying cost structure of chain [[302,304],306] 
 * Joined equivalent variables [aux(785),aux(776),aux(777)] into aux(785)
 * Joined equivalent variables [aux(786),s(6170)] into aux(786)
 * Joined equivalent variables [aux(788),s(6172)] into aux(788)
 * Joined equivalent variables [aux(790),s(6190)] into aux(790)
 * Joined equivalent variables [aux(792),s(6191)] into aux(792)
 * Joined equivalent variables [aux(793),aux(690),aux(782)] into aux(793)

#### Cost of chains of mat_mult(A,B,C,D,E,F,G,H,I):
* Chain [[305],307]: 16*it(305)+10
  Such that:it(305) =< H

  with precondition: [D=1,E=0,A=G,A=H+1,A>=2,C>=0,F>=0,I>=0,B+1>=A] 

* Chain [[303],306]: 16*it(303)+7*s(6184)+7*s(6210)+5*s(6232)+7*s(6318)+7*s(6319)+5*s(6320)+10
  Such that:s(6179) =< D+1
s(6184) =< D/3
s(6192) =< 9/2*D
it(303) =< G
aux(710) =< D
aux(711) =< 2*D
aux(712) =< 3*D
aux(713) =< D/2
aux(714) =< 3/2*D
aux(698) =< aux(710)
s(6175) =< aux(711)
s(6171) =< aux(712)
s(6176) =< aux(714)
s(6171) =< aux(710)
s(6176) =< s(6192)
s(6175) =< aux(710)
s(6210) =< aux(710)
s(6184) =< aux(710)
s(6210) =< aux(711)
s(6184) =< s(6179)
s(6210) =< s(6179)
s(6184) =< s(6171)
s(6210) =< s(6171)
s(6184) =< s(6175)
s(6210) =< s(6175)
s(6184) =< aux(713)
s(6210) =< s(6176)
s(6213) =< aux(712)* (1/2)-1
s(6217) =< s(6184)*aux(712)
s(6210) =< aux(710)
s(6218) =< s(6184)*s(6213)
s(6210) =< aux(710)
s(6220) =< s(6218)* (3/2)
s(6232) =< s(6217)
s(6232) =< s(6220)
aux(703) =< aux(712)
aux(701) =< aux(712)* (1/3)-1/6
aux(700) =< aux(712)* (1/3)+4/3
aux(699) =< aux(712)* (1/3)+1/3
aux(698) =< aux(712)* (1/3)-2/3
aux(703) =< aux(698)*3+2
aux(701) =< aux(698)+1/2
aux(700) =< aux(698)+2
aux(699) =< aux(698)+1
aux(704) =< it(303)*aux(698)
aux(708) =< it(303)*aux(703)
s(6326) =< aux(704)* (3/2)
s(6318) =< aux(704)* (1/3)
aux(705) =< it(303)*aux(699)
s(6327) =< aux(704)* (1/2)
aux(702) =< it(303)*aux(701)
s(6332) =< it(303)*aux(700)
s(6335) =< aux(708)* (3/2)
s(6328) =< aux(705)* (1/2)
s(6333) =< aux(702)*2
s(6329) =< s(6333)
s(6331) =< aux(704)
s(6324) =< aux(705)
s(6331) =< aux(708)
s(6326) =< s(6335)
s(6324) =< aux(704)
s(6329) =< aux(704)
s(6319) =< aux(704)
s(6318) =< aux(705)
s(6319) =< aux(705)
s(6319) =< s(6333)
s(6318) =< s(6332)
s(6319) =< s(6332)
s(6318) =< s(6331)
s(6319) =< s(6331)
s(6318) =< aux(702)
s(6319) =< aux(702)
s(6318) =< s(6329)
s(6319) =< s(6329)
s(6318) =< aux(704)
s(6318) =< s(6328)
s(6318) =< s(6327)
s(6319) =< s(6326)
s(6322) =< s(6318)*aux(712)
s(6323) =< s(6318)*s(6213)
s(6319) =< s(6324)
s(6321) =< s(6323)* (3/2)
s(6320) =< s(6322)
s(6320) =< s(6321)

  with precondition: [D=E+1,A=G,A=H+1,A>=2,C>=0,D>=2,F>=0,I>=0,B+1>=A] 

* Chain [[302,304],306]: 16*it(302)+16*it(304)+7*s(6168)+7*s(6184)+10*s(6201)+7*s(6202)+10*s(6206)+7*s(6210)+13*s(6221)+13*s(6227)+13*s(6229)+5*s(6230)+13*s(6231)+5*s(6232)+7*s(6617)+7*s(6618)+10*s(6619)+7*s(6620)+10*s(6621)+7*s(6622)+13*s(6623)+13*s(6624)+13*s(6625)+5*s(6626)+13*s(6627)+5*s(6628)+9*s(6629)+21*s(6630)+9*s(6631)+12*s(6632)+7*s(6683)+7*s(6684)+10*s(6685)+7*s(6686)+10*s(6687)+7*s(6688)+13*s(6689)+13*s(6690)+13*s(6691)+5*s(6692)+13*s(6693)+5*s(6694)+9*s(6695)+10
  Such that:s(6168) =< 1/2
aux(779) =< B
aux(778) =< B+1
aux(781) =< B/2
aux(780) =< B/2+1/2
s(6169) =< -3*D+3*E
s(6186) =< -3*D+3*E+3
s(6187) =< -D+E
s(6188) =< -D+E+1
s(6189) =< -D+2*E+1
s(6173) =< -D+2*E+2
s(6176) =< -3/2*D+3*E+3/2
s(6177) =< -3/2*D+3/2*E+3/2
s(6178) =< -D/2+E+1/2
s(6192) =< 3/2*D+3*E+3/2
s(6194) =< E+1
s(6179) =< E+2
s(6180) =< E+1/2
aux(783) =< 2*E
s(6181) =< 2*E+1
aux(784) =< 3*E+1
s(6182) =< 3*E+2
s(6183) =< E/2
s(6195) =< E/2+1/2
s(6184) =< E/3
s(6185) =< 3/2*E+3/2
aux(785) =< A
aux(786) =< -3*D+4*E+3
aux(787) =< -3*D+6*E+3
aux(788) =< -2*D+2*E+2
aux(789) =< -D+3*E+3
aux(790) =< D
aux(791) =< D+E
aux(792) =< D+2*E+1
aux(793) =< E
aux(721) =< aux(786)
aux(722) =< aux(787)
s(6171) =< aux(787)
aux(718) =< aux(788)
aux(731) =< aux(789)
s(6174) =< aux(789)
aux(732) =< aux(790)
aux(733) =< aux(791)
s(6175) =< aux(791)
aux(734) =< aux(792)
s(6187) =< aux(793)
s(6174) =< s(6186)
s(6196) =< s(6186)
s(6197) =< s(6187)
s(6198) =< s(6189)
s(6171) =< s(6189)
s(6199) =< aux(790)
s(6198) =< aux(792)
s(6200) =< aux(792)
s(6200) =< s(6192)
s(6176) =< s(6192)
s(6197) =< aux(793)
s(6199) =< aux(793)
s(6175) =< aux(793)
s(6196) =< aux(793)
s(6199) =< s(6194)
s(6201) =< s(6188)
s(6202) =< s(6174)
s(6168) =< s(6174)
s(6169) =< s(6174)
s(6168) =< aux(788)
s(6203) =< aux(788)
s(6204) =< s(6197)
s(6205) =< s(6197)
s(6168) =< s(6188)
s(6206) =< s(6188)
s(6207) =< s(6197)
s(6208) =< s(6197)
s(6207) =< s(6196)
s(6208) =< s(6196)
s(6202) =< s(6171)
s(6168) =< s(6171)
s(6206) =< s(6171)
s(6204) =< s(6188)
s(6202) =< s(6173)
s(6209) =< s(6173)
s(6202) =< aux(786)
s(6210) =< aux(786)
s(6168) =< aux(786)
s(6209) =< aux(786)
s(6184) =< aux(790)
s(6202) =< aux(790)
s(6210) =< aux(790)
s(6168) =< aux(790)
s(6202) =< s(6177)
s(6168) =< s(6177)
s(6169) =< s(6177)
s(6204) =< aux(793)
s(6205) =< aux(793)
s(6210) =< aux(793)
s(6168) =< aux(793)
s(6203) =< aux(793)
s(6201) =< aux(793)
s(6184) =< s(6194)
s(6202) =< s(6194)
s(6210) =< s(6194)
s(6168) =< s(6194)
s(6206) =< aux(793)
s(6207) =< aux(793)
s(6208) =< aux(793)
s(6207) =< s(6200)
s(6208) =< s(6200)
s(6202) =< s(6181)
s(6210) =< s(6181)
s(6168) =< s(6181)
s(6206) =< s(6181)
s(6184) =< s(6179)
s(6202) =< s(6179)
s(6210) =< s(6179)
s(6168) =< s(6179)
s(6184) =< s(6198)
s(6202) =< s(6198)
s(6210) =< s(6198)
s(6168) =< s(6198)
s(6184) =< s(6180)
s(6202) =< s(6180)
s(6210) =< s(6180)
s(6168) =< s(6180)
s(6184) =< s(6175)
s(6202) =< s(6175)
s(6210) =< s(6175)
s(6168) =< s(6175)
s(6184) =< aux(793)
s(6202) =< aux(793)
s(6202) =< s(6195)
s(6168) =< s(6195)
s(6184) =< s(6195)
s(6184) =< s(6178)
s(6202) =< s(6178)
s(6202) =< s(6183)
s(6168) =< s(6183)
s(6202) =< s(6185)
s(6209) =< s(6185)
s(6202) =< s(6176)
s(6210) =< s(6176)
s(6168) =< s(6176)
s(6209) =< s(6176)
s(6211) =< s(6182)-2
s(6212) =< s(6182)* (1/2)
s(6213) =< s(6182)* (1/2)-1
s(6214) =< s(6182)-1
s(6215) =< s(6208)
s(6216) =< s(6168)*s(6205)
s(6207) =< s(6168)*s(6205)
s(6217) =< s(6184)*s(6182)
s(6215) =< s(6216)
s(6202) =< s(6207)+s(6204)+aux(793)
s(6210) =< s(6207)+s(6204)+aux(793)
s(6218) =< s(6184)*s(6213)
s(6219) =< s(6184)*s(6212)
s(6202) =< s(6215)+s(6204)+s(6199)
s(6210) =< s(6215)+s(6204)+s(6199)
s(6220) =< s(6218)* (3/2)
s(6221) =< s(6218)* (1/2)
s(6222) =< s(6202)*s(6211)
s(6223) =< s(6202)*s(6194)
s(6224) =< s(6202)*s(6213)
s(6225) =< s(6202)*s(6212)
s(6226) =< s(6202)*s(6214)
s(6227) =< s(6224)* (1/2)
s(6228) =< s(6224)* (3/2)
s(6227) =< s(6223)
s(6229) =< s(6223)
s(6229) =< s(6226)
s(6230) =< s(6226)
s(6229) =< s(6222)
s(6230) =< s(6222)
s(6227) =< s(6203)
s(6229) =< s(6203)
s(6227) =< s(6225)
s(6229) =< s(6225)
s(6227) =< s(6224)
s(6229) =< s(6224)
s(6229) =< s(6228)
s(6230) =< s(6228)
s(6221) =< s(6209)
s(6231) =< s(6209)
s(6231) =< s(6217)
s(6232) =< s(6217)
s(6221) =< s(6219)
s(6231) =< s(6219)
s(6221) =< s(6218)
s(6231) =< s(6218)
s(6231) =< s(6220)
s(6232) =< s(6220)
s(6221) =< s(6169)
s(6231) =< s(6169)
aux(717) =< aux(785)
aux(748) =< aux(785)
it(302) =< aux(785)
it(304) =< aux(785)
aux(717) =< aux(778)
aux(748) =< aux(778)
it(302) =< aux(778)
it(304) =< aux(778)
aux(717) =< aux(779)
aux(748) =< aux(779)
it(302) =< aux(779)
it(304) =< aux(779)
aux(717) =< aux(780)
it(302) =< aux(780)
s(6683) =< aux(780)
aux(717) =< aux(781)
it(302) =< aux(781)
s(6683) =< aux(781)
aux(732) =< aux(793)
aux(718) =< aux(783)
aux(733) =< aux(783)
aux(731) =< aux(784)
aux(734) =< aux(784)
aux(775) =< aux(793)+2
aux(768) =< aux(793)*4+5
aux(765) =< aux(793)*3+7
aux(762) =< aux(793)*3+7
aux(730) =< aux(793)*2+4
aux(757) =< aux(793)+3/2
aux(756) =< aux(793)*2+4
aux(727) =< aux(793)+2
aux(754) =< aux(793)+1
aux(753) =< aux(793)
aux(742) =< aux(793)+5/2
aux(741) =< aux(793)+4
aux(740) =< aux(793)+3
aux(739) =< aux(793)+2
aux(734) =< aux(793)*3+7
aux(733) =< aux(793)*2+4
aux(732) =< aux(793)+2
aux(731) =< aux(793)*3+7
aux(724) =< aux(793)*2+3
aux(722) =< aux(793)*6+9
aux(721) =< aux(793)*4+5
aux(720) =< aux(793)*3+3
aux(719) =< aux(793)*3
aux(718) =< aux(793)*2+2
s(6438) =< aux(793)*3+8
s(6556) =< aux(793)
s(6683) =< aux(748)* (1/2)
s(6617) =< aux(717)* (1/2)
aux(775) =< aux(732)
aux(768) =< aux(721)
aux(765) =< aux(731)
aux(762) =< aux(734)
aux(730) =< aux(722)* (1/3)+1
aux(757) =< aux(722)* (1/6)
aux(756) =< aux(733)
aux(727) =< aux(718)* (1/2)+1
aux(754) =< aux(718)* (1/2)
aux(753) =< aux(718)* (1/2)-1
aux(724) =< aux(718)+1
aux(720) =< aux(718)* (3/2)
aux(719) =< aux(718)* (3/2)-3
aux(771) =< it(304)*aux(740)
aux(770) =< it(304)*aux(739)
aux(758) =< it(304)*aux(742)
s(6724) =< it(304)*aux(741)
aux(745) =< it(302)*aux(740)
aux(744) =< it(302)*aux(739)
aux(743) =< it(302)*aux(742)
s(6661) =< it(302)*aux(741)
aux(738) =< it(302)*aux(734)
aux(729) =< it(302)*aux(722)
s(6658) =< it(302)*aux(733)
s(6666) =< it(302)*aux(732)
s(6674) =< it(302)*aux(731)
s(6670) =< it(302)*aux(722)
s(6667) =< it(302)*aux(721)
s(6629) =< it(302)*aux(718)
s(6729) =< it(304)*aux(775)
aux(759) =< it(304)*aux(754)
s(6717) =< aux(771)* (3/2)
s(6684) =< aux(770)* (1/3)
s(6720) =< aux(771)* (1/2)
s(6718) =< aux(770)* (1/2)
aux(760) =< it(304)*aux(757)
s(6730) =< it(304)*aux(768)
aux(767) =< it(304)*aux(762)
s(6737) =< it(304)*aux(765)
aux(763) =< it(304)*aux(753)
s(6731) =< it(304)*aux(730)
s(6725) =< aux(758)*2
s(6721) =< it(304)*aux(756)
s(6695) =< it(304)*aux(727)
s(6654) =< aux(745)* (3/2)
s(6618) =< aux(744)* (1/3)
s(6657) =< aux(745)* (1/2)
s(6655) =< aux(744)* (1/2)
s(6662) =< aux(743)*2
s(6675) =< aux(738)* (3/2)
s(6656) =< aux(729)* (1/6)
aux(723) =< it(302)*aux(720)
s(6653) =< aux(729)* (1/2)
s(6668) =< it(302)*aux(730)
s(6677) =< aux(729)* (1/3)
aux(728) =< it(302)*aux(724)
s(6682) =< it(302)*aux(727)
aux(725) =< it(302)*aux(719)
s(6633) =< it(302)*aux(719)
s(6728) =< aux(759)* (3/2)
s(6733) =< aux(760)*6
s(6738) =< aux(767)* (3/2)
s(6716) =< aux(760)*3
s(6742) =< aux(759)*3
s(6696) =< aux(763)*3
s(6740) =< aux(760)*2
s(6736) =< aux(759)*2
s(6665) =< aux(723)* (1/2)
s(6680) =< aux(728)* (1/2)
s(6669) =< aux(723)* (1/3)
s(6678) =< aux(725)* (1/3)
s(6673) =< aux(723)* (2/3)
s(6737) =< s(6742)
s(6734) =< s(6742)
s(6735) =< aux(763)
s(6581) =< s(6556)
s(6723) =< s(6740)
s(6733) =< s(6740)
s(6709) =< s(6729)
s(6723) =< aux(767)
s(6726) =< aux(767)
s(6726) =< s(6738)
s(6716) =< s(6738)
s(6735) =< aux(770)
s(6581) =< aux(739)
s(6709) =< aux(770)
s(6721) =< aux(770)
s(6734) =< aux(770)
s(6709) =< aux(771)
s(6685) =< aux(759)
s(6686) =< s(6737)
s(6683) =< s(6737)
s(6696) =< s(6737)
s(6683) =< s(6736)
s(6705) =< s(6736)
s(6710) =< s(6735)
s(6589) =< s(6581)
s(6683) =< aux(759)
s(6687) =< aux(759)
s(6713) =< s(6735)
s(6715) =< s(6735)
s(6713) =< s(6734)
s(6715) =< s(6734)
s(6686) =< s(6733)
s(6683) =< s(6733)
s(6687) =< s(6733)
s(6710) =< aux(759)
s(6686) =< s(6731)
s(6701) =< s(6731)
s(6686) =< s(6730)
s(6688) =< s(6730)
s(6683) =< s(6730)
s(6701) =< s(6730)
s(6684) =< s(6729)
s(6686) =< s(6729)
s(6688) =< s(6729)
s(6683) =< s(6729)
s(6686) =< s(6728)
s(6683) =< s(6728)
s(6696) =< s(6728)
s(6710) =< aux(770)
s(6589) =< aux(739)
s(6688) =< aux(770)
s(6683) =< aux(770)
s(6705) =< aux(770)
s(6685) =< aux(770)
s(6684) =< aux(771)
s(6686) =< aux(771)
s(6688) =< aux(771)
s(6683) =< aux(771)
s(6687) =< aux(770)
s(6713) =< aux(770)
s(6715) =< aux(770)
s(6713) =< s(6726)
s(6715) =< s(6726)
s(6686) =< s(6725)
s(6688) =< s(6725)
s(6683) =< s(6725)
s(6687) =< s(6725)
s(6684) =< s(6724)
s(6686) =< s(6724)
s(6688) =< s(6724)
s(6683) =< s(6724)
s(6684) =< s(6723)
s(6686) =< s(6723)
s(6688) =< s(6723)
s(6683) =< s(6723)
s(6684) =< aux(758)
s(6686) =< aux(758)
s(6688) =< aux(758)
s(6683) =< aux(758)
s(6684) =< s(6721)
s(6686) =< s(6721)
s(6688) =< s(6721)
s(6683) =< s(6721)
s(6684) =< aux(770)
s(6686) =< aux(770)
s(6686) =< s(6720)
s(6683) =< s(6720)
s(6684) =< s(6720)
s(6684) =< aux(760)
s(6686) =< aux(760)
s(6686) =< s(6718)
s(6683) =< s(6718)
s(6686) =< s(6717)
s(6701) =< s(6717)
s(6686) =< s(6716)
s(6688) =< s(6716)
s(6683) =< s(6716)
s(6701) =< s(6716)
s(6463) =< s(6438)-2
s(6464) =< s(6438)* (1/2)
s(6465) =< s(6438)* (1/2)-1
s(6466) =< s(6438)-1
s(6711) =< s(6715)
s(6714) =< s(6683)*s(6589)
s(6713) =< s(6683)*s(6589)
s(6700) =< s(6684)*s(6438)
s(6711) =< s(6714)
s(6686) =< s(6713)+s(6710)+aux(770)
s(6688) =< s(6713)+s(6710)+aux(770)
s(6698) =< s(6684)*s(6465)
s(6699) =< s(6684)*s(6464)
s(6686) =< s(6711)+s(6710)+s(6709)
s(6688) =< s(6711)+s(6710)+s(6709)
s(6697) =< s(6698)* (3/2)
s(6689) =< s(6698)* (1/2)
s(6706) =< s(6686)*s(6463)
s(6708) =< s(6686)*aux(740)
s(6703) =< s(6686)*s(6465)
s(6704) =< s(6686)*s(6464)
s(6707) =< s(6686)*s(6466)
s(6690) =< s(6703)* (1/2)
s(6702) =< s(6703)* (3/2)
s(6690) =< s(6708)
s(6691) =< s(6708)
s(6691) =< s(6707)
s(6692) =< s(6707)
s(6691) =< s(6706)
s(6692) =< s(6706)
s(6690) =< s(6705)
s(6691) =< s(6705)
s(6690) =< s(6704)
s(6691) =< s(6704)
s(6690) =< s(6703)
s(6691) =< s(6703)
s(6691) =< s(6702)
s(6692) =< s(6702)
s(6689) =< s(6701)
s(6693) =< s(6701)
s(6693) =< s(6700)
s(6694) =< s(6700)
s(6689) =< s(6699)
s(6693) =< s(6699)
s(6689) =< s(6698)
s(6693) =< s(6698)
s(6693) =< s(6697)
s(6694) =< s(6697)
s(6689) =< s(6696)
s(6693) =< s(6696)
s(6629) =< s(6673)
s(6630) =< s(6673)
s(6631) =< s(6673)
s(6630) =< s(6682)
s(6632) =< s(6682)
s(6632) =< s(6673)
s(6630) =< aux(728)
s(6632) =< aux(728)
s(6630) =< s(6680)
s(6630) =< s(6669)
s(6674) =< aux(723)
s(6671) =< aux(723)
s(6672) =< s(6678)
s(6449) =< aux(793)
s(6660) =< s(6677)
s(6670) =< s(6677)
s(6646) =< s(6666)
s(6660) =< aux(738)
s(6663) =< aux(738)
s(6663) =< s(6675)
s(6653) =< s(6675)
s(6672) =< aux(744)
s(6449) =< aux(739)
s(6646) =< aux(744)
s(6658) =< aux(744)
s(6671) =< aux(744)
s(6646) =< aux(745)
s(6619) =< s(6669)
s(6620) =< s(6674)
s(6617) =< s(6674)
s(6633) =< s(6674)
s(6617) =< s(6673)
s(6642) =< s(6673)
s(6647) =< s(6672)
s(6457) =< s(6449)
s(6617) =< s(6669)
s(6621) =< s(6669)
s(6650) =< s(6672)
s(6652) =< s(6672)
s(6650) =< s(6671)
s(6652) =< s(6671)
s(6620) =< s(6670)
s(6617) =< s(6670)
s(6621) =< s(6670)
s(6647) =< s(6669)
s(6620) =< s(6668)
s(6638) =< s(6668)
s(6620) =< s(6667)
s(6622) =< s(6667)
s(6617) =< s(6667)
s(6638) =< s(6667)
s(6618) =< s(6666)
s(6620) =< s(6666)
s(6622) =< s(6666)
s(6617) =< s(6666)
s(6620) =< s(6665)
s(6617) =< s(6665)
s(6633) =< s(6665)
s(6647) =< aux(744)
s(6457) =< aux(739)
s(6622) =< aux(744)
s(6617) =< aux(744)
s(6642) =< aux(744)
s(6619) =< aux(744)
s(6618) =< aux(745)
s(6620) =< aux(745)
s(6622) =< aux(745)
s(6617) =< aux(745)
s(6621) =< aux(744)
s(6650) =< aux(744)
s(6652) =< aux(744)
s(6650) =< s(6663)
s(6652) =< s(6663)
s(6620) =< s(6662)
s(6622) =< s(6662)
s(6617) =< s(6662)
s(6621) =< s(6662)
s(6618) =< s(6661)
s(6620) =< s(6661)
s(6622) =< s(6661)
s(6617) =< s(6661)
s(6618) =< s(6660)
s(6620) =< s(6660)
s(6622) =< s(6660)
s(6617) =< s(6660)
s(6618) =< aux(743)
s(6620) =< aux(743)
s(6622) =< aux(743)
s(6617) =< aux(743)
s(6618) =< s(6658)
s(6620) =< s(6658)
s(6622) =< s(6658)
s(6617) =< s(6658)
s(6618) =< aux(744)
s(6620) =< aux(744)
s(6620) =< s(6657)
s(6617) =< s(6657)
s(6618) =< s(6657)
s(6618) =< s(6656)
s(6620) =< s(6656)
s(6620) =< s(6655)
s(6617) =< s(6655)
s(6620) =< s(6654)
s(6638) =< s(6654)
s(6620) =< s(6653)
s(6622) =< s(6653)
s(6617) =< s(6653)
s(6638) =< s(6653)
s(6648) =< s(6652)
s(6651) =< s(6617)*s(6457)
s(6650) =< s(6617)*s(6457)
s(6637) =< s(6618)*s(6438)
s(6648) =< s(6651)
s(6620) =< s(6650)+s(6647)+aux(744)
s(6622) =< s(6650)+s(6647)+aux(744)
s(6635) =< s(6618)*s(6465)
s(6636) =< s(6618)*s(6464)
s(6620) =< s(6648)+s(6647)+s(6646)
s(6622) =< s(6648)+s(6647)+s(6646)
s(6634) =< s(6635)* (3/2)
s(6623) =< s(6635)* (1/2)
s(6643) =< s(6620)*s(6463)
s(6645) =< s(6620)*aux(740)
s(6640) =< s(6620)*s(6465)
s(6641) =< s(6620)*s(6464)
s(6644) =< s(6620)*s(6466)
s(6624) =< s(6640)* (1/2)
s(6639) =< s(6640)* (3/2)
s(6624) =< s(6645)
s(6625) =< s(6645)
s(6625) =< s(6644)
s(6626) =< s(6644)
s(6625) =< s(6643)
s(6626) =< s(6643)
s(6624) =< s(6642)
s(6625) =< s(6642)
s(6624) =< s(6641)
s(6625) =< s(6641)
s(6624) =< s(6640)
s(6625) =< s(6640)
s(6625) =< s(6639)
s(6626) =< s(6639)
s(6623) =< s(6638)
s(6627) =< s(6638)
s(6627) =< s(6637)
s(6628) =< s(6637)
s(6623) =< s(6636)
s(6627) =< s(6636)
s(6623) =< s(6635)
s(6627) =< s(6635)
s(6627) =< s(6634)
s(6628) =< s(6634)
s(6623) =< s(6633)
s(6627) =< s(6633)

  with precondition: [A=G,A>=2,C>=0,D>=2,F>=0,I>=0,H+2>=2*A,B+1>=A,E>=D] 

* Chain [307]: 10
  with precondition: [A=1,B=0,D=1,E=0,G=1,H=0,C>=0,F>=0,I>=0] 

* Chain [306]: 7*s(6168)+7*s(6184)+10*s(6201)+7*s(6202)+10*s(6206)+7*s(6210)+13*s(6221)+13*s(6227)+13*s(6229)+5*s(6230)+13*s(6231)+5*s(6232)+10
  Such that:s(6168) =< 1/2
s(6169) =< -3*D+3*E
s(6186) =< -3*D+3*E+3
s(6170) =< -3*D+4*E+3
s(6171) =< -3*D+6*E+3
s(6172) =< -2*D+2*E+2
s(6187) =< -D+E
s(6188) =< -D+E+1
s(6189) =< -D+2*E+1
s(6173) =< -D+2*E+2
s(6174) =< -D+3*E+3
s(6190) =< D
s(6175) =< D+E
s(6191) =< D+2*E+1
s(6176) =< -3/2*D+3*E+3/2
s(6177) =< -3/2*D+3/2*E+3/2
s(6178) =< -D/2+E+1/2
s(6192) =< 3/2*D+3*E+3/2
s(6194) =< E+1
s(6179) =< E+2
s(6180) =< E+1/2
s(6181) =< 2*E+1
s(6169) =< 3*E
s(6182) =< 3*E+2
s(6183) =< E/2
s(6195) =< E/2+1/2
s(6184) =< E/3
s(6185) =< 3/2*E+3/2
aux(690) =< E
s(6187) =< aux(690)
s(6174) =< s(6186)
s(6196) =< s(6186)
s(6197) =< s(6187)
s(6198) =< s(6189)
s(6171) =< s(6189)
s(6199) =< s(6190)
s(6198) =< s(6191)
s(6200) =< s(6191)
s(6200) =< s(6192)
s(6176) =< s(6192)
s(6197) =< aux(690)
s(6199) =< aux(690)
s(6175) =< aux(690)
s(6196) =< aux(690)
s(6199) =< s(6194)
s(6201) =< s(6188)
s(6202) =< s(6174)
s(6168) =< s(6174)
s(6169) =< s(6174)
s(6168) =< s(6172)
s(6203) =< s(6172)
s(6204) =< s(6197)
s(6205) =< s(6197)
s(6168) =< s(6188)
s(6206) =< s(6188)
s(6207) =< s(6197)
s(6208) =< s(6197)
s(6207) =< s(6196)
s(6208) =< s(6196)
s(6202) =< s(6171)
s(6168) =< s(6171)
s(6206) =< s(6171)
s(6204) =< s(6188)
s(6202) =< s(6173)
s(6209) =< s(6173)
s(6202) =< s(6170)
s(6210) =< s(6170)
s(6168) =< s(6170)
s(6209) =< s(6170)
s(6184) =< s(6190)
s(6202) =< s(6190)
s(6210) =< s(6190)
s(6168) =< s(6190)
s(6202) =< s(6177)
s(6168) =< s(6177)
s(6169) =< s(6177)
s(6204) =< aux(690)
s(6205) =< aux(690)
s(6210) =< aux(690)
s(6168) =< aux(690)
s(6203) =< aux(690)
s(6201) =< aux(690)
s(6184) =< s(6194)
s(6202) =< s(6194)
s(6210) =< s(6194)
s(6168) =< s(6194)
s(6206) =< aux(690)
s(6207) =< aux(690)
s(6208) =< aux(690)
s(6207) =< s(6200)
s(6208) =< s(6200)
s(6202) =< s(6181)
s(6210) =< s(6181)
s(6168) =< s(6181)
s(6206) =< s(6181)
s(6184) =< s(6179)
s(6202) =< s(6179)
s(6210) =< s(6179)
s(6168) =< s(6179)
s(6184) =< s(6198)
s(6202) =< s(6198)
s(6210) =< s(6198)
s(6168) =< s(6198)
s(6184) =< s(6180)
s(6202) =< s(6180)
s(6210) =< s(6180)
s(6168) =< s(6180)
s(6184) =< s(6175)
s(6202) =< s(6175)
s(6210) =< s(6175)
s(6168) =< s(6175)
s(6184) =< aux(690)
s(6202) =< aux(690)
s(6202) =< s(6195)
s(6168) =< s(6195)
s(6184) =< s(6195)
s(6184) =< s(6178)
s(6202) =< s(6178)
s(6202) =< s(6183)
s(6168) =< s(6183)
s(6202) =< s(6185)
s(6209) =< s(6185)
s(6202) =< s(6176)
s(6210) =< s(6176)
s(6168) =< s(6176)
s(6209) =< s(6176)
s(6211) =< s(6182)-2
s(6212) =< s(6182)* (1/2)
s(6213) =< s(6182)* (1/2)-1
s(6214) =< s(6182)-1
s(6215) =< s(6208)
s(6216) =< s(6168)*s(6205)
s(6207) =< s(6168)*s(6205)
s(6217) =< s(6184)*s(6182)
s(6215) =< s(6216)
s(6202) =< s(6207)+s(6204)+aux(690)
s(6210) =< s(6207)+s(6204)+aux(690)
s(6218) =< s(6184)*s(6213)
s(6219) =< s(6184)*s(6212)
s(6202) =< s(6215)+s(6204)+s(6199)
s(6210) =< s(6215)+s(6204)+s(6199)
s(6220) =< s(6218)* (3/2)
s(6221) =< s(6218)* (1/2)
s(6222) =< s(6202)*s(6211)
s(6223) =< s(6202)*s(6194)
s(6224) =< s(6202)*s(6213)
s(6225) =< s(6202)*s(6212)
s(6226) =< s(6202)*s(6214)
s(6227) =< s(6224)* (1/2)
s(6228) =< s(6224)* (3/2)
s(6227) =< s(6223)
s(6229) =< s(6223)
s(6229) =< s(6226)
s(6230) =< s(6226)
s(6229) =< s(6222)
s(6230) =< s(6222)
s(6227) =< s(6203)
s(6229) =< s(6203)
s(6227) =< s(6225)
s(6229) =< s(6225)
s(6227) =< s(6224)
s(6229) =< s(6224)
s(6229) =< s(6228)
s(6230) =< s(6228)
s(6221) =< s(6209)
s(6231) =< s(6209)
s(6231) =< s(6217)
s(6232) =< s(6217)
s(6221) =< s(6219)
s(6231) =< s(6219)
s(6221) =< s(6218)
s(6231) =< s(6218)
s(6231) =< s(6220)
s(6232) =< s(6220)
s(6221) =< s(6169)
s(6231) =< s(6169)

  with precondition: [A=1,B=0,G=1,H=0,C>=0,D>=2,F>=0,I>=0,E+1>=D] 


#### Simplifying cost structure of CE 427 

#### Computing cost of phase [313] 

#### Simplifying cost structure of CE 428 

#### Cost of loops [313] 

 * loop 313:new_transpose_helper(A,B,C,D,E,F,G,H,I) -> [new_transpose_helper(A',B',C',D',E',F',G',H',I')] 
17
##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 313: [it(313)=<1]

###### Computing sum for it(313)=<1  in Loop 313 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
     - head Candidate: B+1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
     - tail Candidate: B+1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(313)=<A-1,it(313)=<B+1,it(313)=<A-1,it(313)=<B+1,it(313)=<A-A',it(313)=<B-B',it(313)=<A-A',it(313)=<B-B'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [313] 

#### Simplifying cost structure of phase [313] 

#### Cost of phase [313]:new_transpose_helper(A,B,C,D,E,F,G,H,I) -> [new_transpose_helper(A',B',C',D',E',F',G',H',I')] 
17*it(313)+0
  Such that:it(313) =< A
it(313) =< A-A'
it(313) =< B+1
it(313) =< B-B'

#### Simplifying cost structure of chain [[313],314] 

#### Computing cost of phase [308,309,310,311] 
 * Renamed intermediate variables: 
[ (eq(433,1),it(111))>>s(6743), (eq(433,1),it(110))>>s(6744)]

#### Simplifying cost structure of CE 433 
 * Renamed intermediate variables: 
[ (it(308),s(6743))>>s(6745), (it(308),s(6744))>>s(6746)]
 * Renamed intermediate variables: 
[ (eq(432,1),s(13))>>s(6747), (eq(432,1),s(12))>>s(6748), (eq(432,1),it(110))>>s(6749), (eq(432,1),s(14))>>s(6750), (eq(432,1),s(15))>>s(6751)]

#### Simplifying cost structure of CE 432 
 * Renamed intermediate variables: 
[ (it(309),s(6747))>>s(6752), (it(309),s(6748))>>s(6753), (it(309),s(6749))>>s(6754), (it(309),s(6750))>>s(6755), (it(309),s(6751))>>s(6756)]
 * Renamed intermediate variables: 
[ (eq(431,1),it(110))>>s(6757)]

#### Simplifying cost structure of CE 431 
 * Renamed intermediate variables: 
[ (it(310),s(6757))>>s(6758)]
 * Renamed intermediate variables: 
[ (eq(430,1),s(13))>>s(6759), (eq(430,1),s(12))>>s(6760), (eq(430,1),s(14))>>s(6761), (eq(430,1),s(15))>>s(6762)]

#### Simplifying cost structure of CE 430 
 * Renamed intermediate variables: 
[ (it(311),s(6759))>>s(6763), (it(311),s(6760))>>s(6764), (it(311),s(6761))>>s(6765), (it(311),s(6762))>>s(6766)]

#### Cost of loops [308,309,310,311] 

 * loop 308:new_transpose_helper(A,B,C,D,E,F,G,H,I) -> [new_transpose_helper(A',B',C',D',E',F',G',H',I')] 
10*s(6745)+9*s(6746)+17
  Such that:s(6745) =< -E-D'+E'+1
s(6746) =< E+2*D'-E'

 * loop 309:new_transpose_helper(A,B,C,D,E,F,G,H,I) -> [new_transpose_helper(A',B',C',D',E',F',G',H',I')] 
9*s(6754)+15*s(6755)+5*s(6756)+17
  Such that:s(6752) =< D+E-E'
s(6753) =< D+E-E'+1
s(6754) =< -E+E'+1
s(6755) =< s(6752)
s(6756) =< s(6755)*s(6753)

 * loop 310:new_transpose_helper(A,B,C,D,E,F,G,H,I) -> [new_transpose_helper(A',B',C',D',E',F',G',H',I')] 
9*s(6758)+17
  Such that:s(6758) =< -E+E'+1

 * loop 311:new_transpose_helper(A,B,C,D,E,F,G,H,I) -> [new_transpose_helper(A',B',C',D',E',F',G',H',I')] 
15*s(6765)+5*s(6766)+17
  Such that:s(6763) =< D'
s(6764) =< D'+1
s(6765) =< s(6763)
s(6766) =< s(6765)*s(6764)

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(6753)=<D,s(6764)=<D+1]
* Psum in Loop 308: [it(308)=<1,s(6767)=< -E-D'+E'+1,s(6768)=<E+2*D'-E']
* Psum in Loop 309: [it(309)=<1,s(6772)=<D+E-E',s(6769)=< -E+E'+1]
* Psum in Loop 310: [it(310)=<1,s(6773)=< -E+E'+1]
* Psum in Loop 311: [it(311)=<1,s(6776)=<D']

###### Computing max_min for s(6753)=<D  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(6753)=<B+D] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(6764)=<D+1]
* Psum in Loop 308: [it(308)=<1,s(6767)=< -E-D'+E'+1,s(6768)=<E+2*D'-E']
* Psum in Loop 309: [it(309)=<1,s(6772)=<D+E-E',s(6769)=< -E+E'+1]
* Psum in Loop 310: [it(310)=<1,s(6773)=< -E+E'+1]
* Psum in Loop 311: [it(311)=<1,s(6776)=<D']

###### Computing max_min for s(6764)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[s(6764)=<s(6753)+1] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 308: [it(308)=<1,s(6767)=< -E-D'+E'+1,s(6768)=<E+2*D'-E']
* Psum in Loop 309: [it(309)=<1,s(6772)=<D+E-E',s(6769)=< -E+E'+1]
* Psum in Loop 310: [it(310)=<1,s(6773)=< -E+E'+1]
* Psum in Loop 311: [it(311)=<1,s(6776)=<D']

###### Computing sum for it(308)=<1  in Loop 308 
   - Applying inductive sum strategy 
     - head Candidate: B-D+E+2 
       - Loop 309 is collaborative and bounds [it(309)] 
       - Loop 310 is collaborative and bounds [it(310)] 
       - Loop 311 is collaborative and bounds [it(311)] 
     - head Candidate: A-1 
       - Loop 309 is collaborative and bounds [it(309)] 
       - Loop 310 is collaborative and bounds [it(310)] 
       - Loop 311 is collaborative and bounds [it(311)] 
     - head Candidate: B+1 
       - Loop 309 is collaborative and bounds [it(309)] 
       - Loop 310 is collaborative and bounds [it(310)] 
       - Loop 311 is collaborative and bounds [it(311)] 
     - head Candidate: B+D-1 
       - Loop 309 is collaborative and bounds [it(309)] 
       - Loop 310 is collaborative and bounds [it(310)] 
       - Loop 311 is collaborative and bounds [it(311)] 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B/3+1/3 
       - Loop 309 is collaborative
       - Loop 310 is collaborative
       - Loop 311 is collaborative
     - head Candidate: B/2+D/2-1/2 
       - Loop 309 is collaborative and bounds [it(309)] 
       - Loop 310 is collaborative and bounds [it(310)] 
       - Loop 311 is collaborative
     - head Candidate: B-D+E+2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-D+E+2 
       - Loop 309 is collaborative and bounds [it(309)] 
       - Loop 310 is collaborative and bounds [it(310)] 
       - Loop 311 is collaborative and bounds [it(311)] 
     - tail Candidate: A-1 
       - Loop 309 is collaborative and bounds [it(309)] 
       - Loop 310 is collaborative and bounds [it(310)] 
       - Loop 311 is collaborative and bounds [it(311)] 
     - tail Candidate: B+1 
       - Loop 309 is collaborative and bounds [it(309)] 
       - Loop 310 is collaborative and bounds [it(310)] 
       - Loop 311 is collaborative and bounds [it(311)] 
     - tail Candidate: B+D-1 
       - Loop 309 is collaborative and bounds [it(309)] 
       - Loop 310 is collaborative and bounds [it(310)] 
       - Loop 311 is collaborative and bounds [it(311)] 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B/3+1/3 
       - Loop 309 is collaborative
       - Loop 310 is collaborative
       - Loop 311 is collaborative
     - tail Candidate: B/2+D/2-1/2 
       - Loop 309 is collaborative and bounds [it(309)] 
       - Loop 310 is collaborative and bounds [it(310)] 
       - Loop 311 is collaborative
     - tail Candidate: B-D+E+2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(308)+it(309)+it(310)+it(311)=<B-D+E+2,it(308)+it(309)+it(310)+it(311)=<A-1,it(308)+it(309)+it(310)+it(311)=<B+1,it(308)+it(309)+it(310)+it(311)=<B+D-1,it(308)+it(309)+it(310)+it(311)=<A-1,it(308)=<B/3+1/3,it(308)+it(309)+it(310)=<B/2+D/2-1/2,it(308)+it(309)+it(310)+it(311)=<B-D+E+2,it(308)+it(309)+it(310)+it(311)=<B-D+E-B'+D'-E',it(308)+it(309)+it(310)+it(311)=<A-A',it(308)+it(309)+it(310)+it(311)=<B-B',it(308)+it(309)+it(310)+it(311)=<B+D-B'-D',it(308)+it(309)+it(310)+it(311)=<A-A',it(308)=<B/3-B'/3,it(308)+it(309)+it(310)=<B/2+D/2-B'/2-D'/2,it(308)+it(309)+it(310)+it(311)=<B-D+E-B'+D'-E'] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 308: [s(6767)=< -E-D'+E'+1,s(6768)=<E+2*D'-E']
* Psum in Loop 309: [it(309)=<1,s(6772)=<D+E-E',s(6769)=< -E+E'+1]
* Psum in Loop 310: [it(310)=<1,s(6773)=< -E+E'+1]
* Psum in Loop 311: [it(311)=<1,s(6776)=<D']

###### Computing sum for s(6767)=< -E-D'+E'+1  in Loop 308 
   - Applying inductive sum strategy 
     - head Candidate: B-D 
       - Loop 309 is collaborative
       - Loop 310 is collaborative
       - Loop 311 is collaborative
     - head Candidate: -A+B-D+2 
       - Loop 309 is collaborative
       - Loop 310 is collaborative
       - Loop 311 is collaborative
     - tail Candidate: B-D 
       - Loop 309 is collaborative and bounds [it(309)] 
       - Loop 310 is collaborative and bounds [it(310)] 
       - Loop 311 is collaborative and bounds [it(311)] 
     - tail Candidate: -A+B-D+2 
       - Loop 309 is collaborative and bounds [it(309)] 
       - Loop 310 is collaborative and bounds [it(310)] 
       - Loop 311 is collaborative
 * Adding constraints: [s(6767)=<B-D,s(6767)=< -A+B-D+2,it(309)+it(310)+it(311)+s(6767)=<B-D-B'+D',it(309)+it(310)+s(6767)=< -A+B-D+A'-B'+D'] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 308: [s(6768)=<E+2*D'-E']
* Psum in Loop 309: [it(309)=<1,s(6772)=<D+E-E',s(6769)=< -E+E'+1]
* Psum in Loop 310: [it(310)=<1,s(6773)=< -E+E'+1]
* Psum in Loop 311: [it(311)=<1,s(6776)=<D']

###### Computing sum for s(6768)=<E+2*D'-E'  in Loop 308 
   - Applying inductive sum strategy 
     - head Candidate: A+B+D-4 
       - Loop 309 is collaborative and bounds [it(309)] 
       - Loop 310 is collaborative and bounds [it(310)] 
       - Loop 311 is collaborative and bounds [it(311)] 
     - head Candidate: 3/2*B+3/2*D-9/2 
       - Loop 309 is collaborative and bounds [it(309)] 
       - Loop 310 is collaborative and bounds [it(310)] 
       - Loop 311 is collaborative
     - tail Candidate: A+B+D-4 
       - Loop 309 is collaborative and bounds [it(309)] 
       - Loop 310 is collaborative and bounds [it(310)] 
       - Loop 311 is collaborative and bounds [it(311)] 
     - tail Candidate: 3/2*B+3/2*D-9/2 
       - Loop 309 is collaborative and bounds [it(309)] 
       - Loop 310 is collaborative and bounds [it(310)] 
       - Loop 311 is collaborative and bounds [it(311)] 
 * Adding constraints: [it(309)+it(310)+it(311)+s(6768)=<A+B+D-4,it(309)+it(310)+s(6768)=<3/2*B+3/2*D-9/2,it(309)+it(310)+it(311)+s(6768)=<A+B+D-A'-B'-D',it(309)+it(310)+it(311)+s(6768)=<3/2*B+3/2*D-3/2*B'-3/2*D'] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 309: [it(309)=<1,s(6772)=<D+E-E',s(6769)=< -E+E'+1]
* Psum in Loop 310: [it(310)=<1,s(6773)=< -E+E'+1]
* Psum in Loop 311: [it(311)=<1,s(6776)=<D']

###### Computing sum for it(309)=<1  in Loop 309 
   - Applying inductive sum strategy 
     - head Candidate: B-D+E+2 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B/2+1/2 
       - Loop 308 is collaborative
       - Loop 310 is collaborative and bounds [it(310)] 
       - Loop 311 is collaborative
     - head Candidate: B+E-1 
       - Loop 308 adds an expression [D'-3,-D+D'-1]
       - Loop 310 is collaborative and bounds [it(310)] 
       - Loop 311 is collaborative and bounds [it(311)] 
     - head Candidate: B-D+E+2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-D+E+2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B/2+1/2 
       - Loop 308 is collaborative
       - Loop 310 is collaborative and bounds [it(310)] 
       - Loop 311 is collaborative
     - tail Candidate: B+E-1 
       - Loop 308 adds an expression [D'-3,-D+D'-1]
       - Loop 310 is collaborative and bounds [it(310)] 
       - Loop 311 is collaborative and bounds [it(311)] 
     - tail Candidate: B-D+E+2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(309)+it(310)+it(311)=<aux(794)+aux(795),it(309)+it(310)+it(311)=<aux(796)+aux(797),it(308)+it(309)+it(310)+it(311)=<B-D+E+2,it(308)+it(309)+it(310)+it(311)=<A-1,it(308)+it(309)+it(310)+it(311)=<B+1,it(308)+it(309)+it(310)+it(311)=<B+D-1,it(308)+it(309)+it(310)+it(311)=<A-1,it(309)+it(310)=<B/2+1/2,aux(795)=<B+E-1,it(308)+it(309)+it(310)+it(311)=<B-D+E+2,it(308)+it(309)+it(310)+it(311)=<B-D+E-B'+D'-E',it(308)+it(309)+it(310)+it(311)=<A-A',it(308)+it(309)+it(310)+it(311)=<B-B',it(308)+it(309)+it(310)+it(311)=<B+D-B'-D',it(308)+it(309)+it(310)+it(311)=<A-A',it(309)+it(310)=<B/2-B'/2,aux(797)=<B+E-B'-E',it(308)+it(309)+it(310)+it(311)=<B-D+E-B'+D'-E'] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 308: [aux(794)=< -D+D'-1,aux(796)=< -D+D'-1,aux(794)=<D'-3,aux(796)=<D'-3]
* Psum in Loop 309: [s(6772)=<D+E-E',s(6769)=< -E+E'+1]
* Psum in Loop 310: [it(310)=<1,s(6773)=< -E+E'+1]
* Psum in Loop 311: [it(311)=<1,s(6776)=<D']

###### Computing sum for aux(794)=< -D+D'-1  in Loop 308 
   - Applying inductive sum strategy 
     - head Candidate: -A+B-1 
       - Loop 309 is collaborative
       - Loop 310 is collaborative
       - Loop 311 is collaborative
     - head Candidate: B-3 
       - Loop 309 is collaborative
       - Loop 310 is collaborative
       - Loop 311 is collaborative
     - tail Candidate: -A+B-1 
       - Loop 309 is collaborative
       - Loop 310 is collaborative and bounds [it(310)] 
       - Loop 311 is collaborative
     - tail Candidate: B-3 
       - Loop 309 is collaborative and bounds [s(6769)] 
       - Loop 310 is collaborative and bounds [it(310)] 
       - Loop 311 is collaborative and bounds [it(311)] 
 * Adding constraints: [aux(794)=< -A+B-1,aux(794)=<B-3,aux(794)+it(310)=< -A+B+A'-B',aux(794)+it(310)+it(311)+s(6769)=<B-B'] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 308: [aux(796)=< -D+D'-1,aux(794)=<D'-3,aux(796)=<D'-3]
* Psum in Loop 309: [s(6772)=<D+E-E',s(6769)=< -E+E'+1]
* Psum in Loop 310: [it(310)=<1,s(6773)=< -E+E'+1]
* Psum in Loop 311: [it(311)=<1,s(6776)=<D']

###### Computing sum for aux(796)=< -D+D'-1  in Loop 308 
   - Found a solution using cacheing 
 * Adding constraints: [aux(796)=<aux(798),aux(798)=< -A+B-1,aux(798)=<B-3,aux(798)+it(310)=< -A+B+A'-B',aux(798)+it(310)+it(311)+s(6769)=<B-B'] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 308: [aux(794)=<D'-3,aux(796)=<D'-3]
* Psum in Loop 309: [s(6772)=<D+E-E',s(6769)=< -E+E'+1]
* Psum in Loop 310: [it(310)=<1,s(6773)=< -E+E'+1]
* Psum in Loop 311: [it(311)=<1,s(6776)=<D']

###### Computing sum for aux(794)=<D'-3  in Loop 308 
   - Applying inductive sum strategy 
     - head Candidate: B-3 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -A+B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-3 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -A+B-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [aux(794)=<B-3,aux(794)=< -A+B-1,aux(794)+it(310)+it(311)+s(6769)=<B-B',aux(794)+it(310)=< -A+B+A'-B'] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 308: [aux(796)=<D'-3]
* Psum in Loop 309: [s(6772)=<D+E-E',s(6769)=< -E+E'+1]
* Psum in Loop 310: [it(310)=<1,s(6773)=< -E+E'+1]
* Psum in Loop 311: [it(311)=<1,s(6776)=<D']

###### Computing sum for aux(796)=<D'-3  in Loop 308 
   - Found a solution using cacheing 
 * Adding constraints: [aux(796)=<aux(799),aux(799)=<B-3,aux(799)=< -A+B-1,aux(799)+it(310)+it(311)+s(6769)=<B-B',aux(799)+it(310)=< -A+B+A'-B'] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 309: [s(6772)=<D+E-E',s(6769)=< -E+E'+1]
* Psum in Loop 310: [it(310)=<1,s(6773)=< -E+E'+1]
* Psum in Loop 311: [it(311)=<1,s(6776)=<D']

###### Computing sum for s(6772)=<D+E-E'  in Loop 309 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(800)=<E,aux(800)=<D-1] 
 * Adding constraints: [s(6772)=<it(309)*aux(800)] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(800)=<D-1,aux(800)=<E]
* Psum in Loop 309: [s(6769)=< -E+E'+1]
* Psum in Loop 310: [it(310)=<1,s(6773)=< -E+E'+1]
* Psum in Loop 311: [it(311)=<1,s(6776)=<D']

###### Computing max_min for aux(800)=<D-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(800)=<s(6753)-1] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(800)=<E]
* Psum in Loop 309: [s(6769)=< -E+E'+1]
* Psum in Loop 310: [it(310)=<1,s(6773)=< -E+E'+1]
* Psum in Loop 311: [it(311)=<1,s(6776)=<D']

###### Computing max_min for aux(800)=<E  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(800)=<2*B+E] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 309: [s(6769)=< -E+E'+1]
* Psum in Loop 310: [it(310)=<1,s(6773)=< -E+E'+1]
* Psum in Loop 311: [it(311)=<1,s(6776)=<D']

###### Computing sum for s(6769)=< -E+E'+1  in Loop 309 
   - Applying inductive sum strategy 
     - head Candidate: -2*A+2*B+2 
       - Loop 308 is collaborative
       - Loop 310 is collaborative and bounds [it(310)] 
       - Loop 311 is collaborative
     - head Candidate: B 
       - Loop 308 is collaborative
       - Loop 310 is collaborative and bounds [it(310)] 
       - Loop 311 is collaborative and bounds [it(311)] 
     - tail Candidate: -2*A+2*B+2 
       - Loop 308 is collaborative
       - Loop 310 is collaborative and bounds [it(310)] 
       - Loop 311 is collaborative
     - tail Candidate: B 
       - Loop 308 is collaborative
       - Loop 310 is collaborative and bounds [it(310)] 
       - Loop 311 is collaborative and bounds [it(311)] 
 * Adding constraints: [it(310)+s(6769)=< -2*A+2*B+2,it(310)+it(311)+s(6769)=<B,it(310)+s(6769)=< -2*A+2*B+2*A'-2*B',it(310)+it(311)+s(6769)=<B-B'] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 310: [it(310)=<1,s(6773)=< -E+E'+1]
* Psum in Loop 311: [it(311)=<1,s(6776)=<D']

###### Computing sum for it(310)=<1  in Loop 310 
   - Applying inductive sum strategy 
     - head Candidate: B-D+E+2 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+E 
       - Loop 308 adds an expression [D'-3,-D+D'-1]
       - Loop 309 is collaborative
       - Loop 311 is collaborative and bounds [it(311)] 
     - head Candidate: B-D+E+2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-D+E+2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+E 
       - Loop 308 adds an expression [D'-3,-D+D'-1]
       - Loop 309 is collaborative
       - Loop 311 is collaborative and bounds [it(311)] 
     - tail Candidate: B-D+E+2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(310)+it(311)=<aux(801)+aux(802),it(310)+it(311)=<aux(803)+aux(804),it(308)+it(309)+it(310)+it(311)=<B-D+E+2,it(308)+it(309)+it(310)+it(311)=<A-1,it(308)+it(309)+it(310)+it(311)=<B+1,it(308)+it(309)+it(310)+it(311)=<B+D-1,it(308)+it(309)+it(310)+it(311)=<A-1,it(309)+it(310)=<B/2+1/2,aux(802)=<B+E,it(308)+it(309)+it(310)+it(311)=<B-D+E+2,it(308)+it(309)+it(310)+it(311)=<B-D+E-B'+D'-E',it(308)+it(309)+it(310)+it(311)=<A-A',it(308)+it(309)+it(310)+it(311)=<B-B',it(308)+it(309)+it(310)+it(311)=<B+D-B'-D',it(308)+it(309)+it(310)+it(311)=<A-A',it(309)+it(310)=<B/2-B'/2,aux(804)=<B+E-B'-E',it(308)+it(309)+it(310)+it(311)=<B-D+E-B'+D'-E'] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 308: [aux(801)=< -D+D'-1,aux(803)=< -D+D'-1,aux(801)=<D'-3,aux(803)=<D'-3]
* Psum in Loop 310: [s(6773)=< -E+E'+1]
* Psum in Loop 311: [it(311)=<1,s(6776)=<D']

###### Computing sum for aux(801)=< -D+D'-1  in Loop 308 
   - Found a solution using cacheing 
 * Adding constraints: [aux(801)=<aux(805),aux(805)=< -A+B-1,aux(805)=<B-3,aux(805)+it(310)=< -A+B+A'-B',aux(805)+it(310)+it(311)+s(6769)=<B-B'] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 308: [aux(803)=< -D+D'-1,aux(801)=<D'-3,aux(803)=<D'-3]
* Psum in Loop 310: [s(6773)=< -E+E'+1]
* Psum in Loop 311: [it(311)=<1,s(6776)=<D']

###### Computing sum for aux(803)=< -D+D'-1  in Loop 308 
   - Found a solution using cacheing 
 * Adding constraints: [aux(803)=<aux(806),aux(806)=< -A+B-1,aux(806)=<B-3,aux(806)+it(310)=< -A+B+A'-B',aux(806)+it(310)+it(311)+s(6769)=<B-B'] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 308: [aux(801)=<D'-3,aux(803)=<D'-3]
* Psum in Loop 310: [s(6773)=< -E+E'+1]
* Psum in Loop 311: [it(311)=<1,s(6776)=<D']

###### Computing sum for aux(801)=<D'-3  in Loop 308 
   - Found a solution using cacheing 
 * Adding constraints: [aux(801)=<aux(807),aux(807)=<B-3,aux(807)=< -A+B-1,aux(807)+it(310)+it(311)+s(6769)=<B-B',aux(807)+it(310)=< -A+B+A'-B'] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 308: [aux(803)=<D'-3]
* Psum in Loop 310: [s(6773)=< -E+E'+1]
* Psum in Loop 311: [it(311)=<1,s(6776)=<D']

###### Computing sum for aux(803)=<D'-3  in Loop 308 
   - Found a solution using cacheing 
 * Adding constraints: [aux(803)=<aux(808),aux(808)=<B-3,aux(808)=< -A+B-1,aux(808)+it(310)+it(311)+s(6769)=<B-B',aux(808)+it(310)=< -A+B+A'-B'] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 310: [s(6773)=< -E+E'+1]
* Psum in Loop 311: [it(311)=<1,s(6776)=<D']

###### Computing sum for s(6773)=< -E+E'+1  in Loop 310 
   - Applying inductive sum strategy 
     - head Candidate: -2*A+2*B+2 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -2*A+2*B-D+4 
       - Loop 308 is collaborative
       - Loop 309 is collaborative
       - Loop 311 is collaborative
     - tail Candidate: -2*A+2*B+2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -2*A+2*B-D+4 
       - Loop 308 is collaborative
       - Loop 309 is collaborative
       - Loop 311 is collaborative
 * Adding constraints: [s(6769)+s(6773)=< -2*A+2*B+2,s(6773)=< -2*A+2*B-D+4,s(6769)+s(6773)=< -2*A+2*B+2*A'-2*B',s(6773)=< -2*A+2*B-D+2*A'-2*B'+D'] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 311: [it(311)=<1,s(6776)=<D']

###### Computing sum for it(311)=<1  in Loop 311 
   - Applying inductive sum strategy 
     - head Candidate: B-D+E+2 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-D+E+2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(308)+it(309)+it(310)+it(311)=<B-D+E+2,it(308)+it(309)+it(310)+it(311)=<A-1,it(308)+it(309)+it(310)+it(311)=<B+1,it(308)+it(309)+it(310)+it(311)=<B+D-1,it(308)+it(309)+it(310)+it(311)=<A-1,it(308)+it(309)+it(310)+it(311)=<B+1,it(308)+it(309)+it(310)+it(311)=<B-D+E-B'+D'-E',it(308)+it(309)+it(310)+it(311)=<A-A',it(308)+it(309)+it(310)+it(311)=<B-B',it(308)+it(309)+it(310)+it(311)=<B+D-B'-D',it(308)+it(309)+it(310)+it(311)=<A-A',it(308)+it(309)+it(310)+it(311)=<B-B'] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 311: [s(6776)=<D']

###### Computing sum for s(6776)=<D'  in Loop 311 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(809)=<D,aux(809)=<E+1] 
 * Adding constraints: [s(6776)=<it(311)*aux(809)] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(809)=<D,aux(809)=<E+1]

###### Computing max_min for aux(809)=<D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(809)=<s(6753)] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(809)=<E+1]

###### Computing max_min for aux(809)=<E+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(809)=<aux(800)+1] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [308,309,310,311] 

#### Simplifying cost structure of phase [308,309,310,311] 
 * Joined equivalent variables [aux(824),s(6753)] into aux(824)
 * Joined equivalent variables [aux(826),aux(795),aux(802)] into aux(826)
 * Joined equivalent variables [aux(827),aux(797),aux(804)] into aux(827)
 * Joined equivalent variables [aux(794),aux(798),aux(799),aux(805),aux(806),aux(807),aux(808)] into aux(794)
 * Joined equivalent variables [aux(794),aux(796),aux(801),aux(803)] into aux(794)

#### Cost of phase [308,309,310,311]:new_transpose_helper(A,B,C,D,E,F,G,H,I) -> [new_transpose_helper(A',B',C',D',E',F',G',H',I')] 
17*it(308)+17*it(309)+17*it(310)+17*it(311)+10*s(6767)+9*s(6768)+9*s(6769)+15*s(6770)+5*s(6771)+9*s(6773)+15*s(6774)+5*s(6775)+0
  Such that:s(6773) =< -2*A+2*B-D+4
s(6773) =< -2*A+2*B-D+2*A'-2*B'+D'
s(6767) =< -A+B-D+2
s(6767) =< B-D
aux(800) =< 2*B+E
it(308) =< B/3+1/3
it(308) =< B/3-B'/3
aux(810) =< -2*A+2*B+2
aux(811) =< -2*A+2*B+2*A'-2*B'
aux(812) =< -A+B
aux(813) =< -A+B-D+A'-B'+D'
aux(814) =< -A+B+A'-B'
aux(815) =< A
aux(816) =< A+B+D
aux(817) =< A+B+D-A'-B'-D'
aux(818) =< A-A'
aux(819) =< B
aux(820) =< B+1
aux(821) =< B-D+E+2
aux(822) =< B-D+E-B'+D'-E'
aux(823) =< B-D-B'+D'
aux(824) =< B+D
aux(825) =< B+D-B'-D'
aux(826) =< B+E
aux(827) =< B+E-B'-E'
aux(828) =< B-B'
aux(829) =< B/2+1/2
aux(830) =< B/2+D/2
aux(831) =< B/2+D/2-B'/2-D'/2
aux(832) =< B/2-B'/2
aux(833) =< 3/2*B+3/2*D
aux(834) =< 3/2*B+3/2*D-3/2*B'-3/2*D'
it(310) =< aux(810)
s(6769) =< aux(810)
s(6773) =< aux(810)
it(310) =< aux(811)
s(6769) =< aux(811)
s(6773) =< aux(811)
aux(794) =< aux(812)
it(309) =< aux(813)
it(310) =< aux(813)
s(6767) =< aux(813)
aux(794) =< aux(814)
it(310) =< aux(814)
it(308) =< aux(815)
it(309) =< aux(815)
it(310) =< aux(815)
it(311) =< aux(815)
it(309) =< aux(816)
it(310) =< aux(816)
it(311) =< aux(816)
s(6768) =< aux(816)
it(309) =< aux(817)
it(310) =< aux(817)
it(311) =< aux(817)
s(6768) =< aux(817)
it(308) =< aux(818)
it(309) =< aux(818)
it(310) =< aux(818)
it(311) =< aux(818)
aux(794) =< aux(819)
it(310) =< aux(819)
it(311) =< aux(819)
s(6769) =< aux(819)
it(308) =< aux(820)
it(309) =< aux(820)
it(310) =< aux(820)
it(311) =< aux(820)
it(308) =< aux(821)
it(309) =< aux(821)
it(310) =< aux(821)
it(311) =< aux(821)
it(308) =< aux(822)
it(309) =< aux(822)
it(310) =< aux(822)
it(311) =< aux(822)
it(309) =< aux(823)
it(310) =< aux(823)
it(311) =< aux(823)
s(6767) =< aux(823)
it(308) =< aux(824)
it(309) =< aux(824)
it(310) =< aux(824)
it(311) =< aux(824)
it(308) =< aux(825)
it(309) =< aux(825)
it(310) =< aux(825)
it(311) =< aux(825)
aux(794) =< aux(828)
it(308) =< aux(828)
it(309) =< aux(828)
it(310) =< aux(828)
it(311) =< aux(828)
s(6769) =< aux(828)
it(309) =< aux(829)
it(310) =< aux(829)
it(308) =< aux(830)
it(309) =< aux(830)
it(310) =< aux(830)
it(308) =< aux(831)
it(309) =< aux(831)
it(310) =< aux(831)
it(309) =< aux(832)
it(310) =< aux(832)
it(309) =< aux(833)
it(310) =< aux(833)
s(6768) =< aux(833)
it(309) =< aux(834)
it(310) =< aux(834)
it(311) =< aux(834)
s(6768) =< aux(834)
aux(809) =< aux(824)
aux(800) =< aux(824)-1
s(6764) =< aux(824)+1
it(309) =< aux(794)+aux(826)
it(310) =< aux(794)+aux(826)
it(311) =< aux(794)+aux(826)
aux(809) =< aux(800)+1
it(310) =< aux(794)+aux(827)
it(311) =< aux(794)+aux(827)
it(309) =< aux(794)+aux(827)
s(6776) =< it(311)*aux(809)
s(6772) =< it(309)*aux(800)
s(6774) =< s(6776)
s(6775) =< s(6774)*s(6764)
s(6770) =< s(6772)
s(6771) =< s(6770)*aux(824)

#### Simplifying cost structure of chain [[308,309,310,311],314] 
 * Joined equivalent variables [aux(835),aux(819),aux(828)] into aux(835)
 * Joined equivalent variables [aux(836),aux(818),aux(822)] into aux(836)
 * Joined equivalent variables [aux(837),aux(810),aux(811)] into aux(837)
 * Renamed intermediate variables: 
[ (eq(429,1),it(111))>>s(6777)]

#### Simplifying cost structure of CE 429 

#### Simplifying cost structure of chain [312,[308,309,310,311],314] 
 * Joined equivalent variables [aux(840),aux(815),aux(836)] into aux(840)
 * Joined equivalent variables [aux(842),aux(821),aux(824)] into aux(842)
 * Joined equivalent variables [aux(832),aux(835)] into aux(832)
 * Joined equivalent variables [aux(820),aux(829)] into aux(820)

#### Found solution for phase  [313] in the cache 

#### Cost of phase [313]:new_transpose_helper(A,B,C,D,E,F,G,H,I) -> [new_transpose_helper(A',B',C',D',E',F',G',H',I')] 
17*it(313)+0
  Such that:it(313) =< A
it(313) =< A-A'
it(313) =< B+1
it(313) =< B-B'

#### Simplifying cost structure of chain [[313],312,[308,309,310,311],314] 
 * Joined equivalent variables [aux(846),aux(840)] into aux(846)
 * Joined equivalent variables [aux(847),aux(825)] into aux(847)
 * Joined equivalent variables [aux(848),aux(842)] into aux(848)
 * Joined equivalent variables [aux(849),aux(841)] into aux(849)
 * Joined equivalent variables [aux(850),aux(838),aux(845)] into aux(850)
 * Joined equivalent variables [aux(846),aux(827)] into aux(846)
 * Joined equivalent variables [aux(850),aux(812)] into aux(850)

#### Simplifying cost structure of chain [312,314] 

#### Found solution for phase  [313] in the cache 

#### Cost of phase [313]:new_transpose_helper(A,B,C,D,E,F,G,H,I) -> [new_transpose_helper(A',B',C',D',E',F',G',H',I')] 
17*it(313)+0
  Such that:it(313) =< A
it(313) =< A-A'
it(313) =< B+1
it(313) =< B-B'

#### Simplifying cost structure of chain [[313],312,314] 
 * Renamed intermediate variables: 
[ (ch([312,[308,309,310,311],314]),s(6773))>>s(6778), (ch([312,[308,309,310,311],314]),aux(837))>>s(6779), (ch([312,[308,309,310,311],314]),aux(814))>>s(6780), (ch([312,[308,309,310,311],314]),aux(825))>>s(6781), (ch([312,[308,309,310,311],314]),aux(816))>>s(6782), (ch([312,[308,309,310,311],314]),s(6767))>>s(6783), (ch([312,[308,309,310,311],314]),aux(823))>>s(6784), (ch([312,[308,309,310,311],314]),aux(834))>>s(6785), (ch([312,[308,309,310,311],314]),aux(831))>>s(6786), (ch([312,[308,309,310,311],314]),aux(827))>>s(6787), (ch([312,[308,309,310,311],314]),aux(817))>>s(6788), (ch([312,[308,309,310,311],314]),aux(813))>>s(6789), (ch([312,[308,309,310,311],314]),aux(830))>>s(6790), (ch([312,[308,309,310,311],314]),aux(833))>>s(6791), (ch([312,[308,309,310,311],314]),aux(838))>>s(6792), (ch([312,[308,309,310,311],314]),aux(839))>>s(6793), (ch([312,[308,309,310,311],314]),aux(840))>>s(6794), (ch([312,[308,309,310,311],314]),aux(841))>>s(6795), (ch([312,[308,309,310,311],314]),aux(842))>>s(6796), (ch([312,[308,309,310,311],314]),aux(843))>>s(6797), (ch([312,[308,309,310,311],314]),aux(844))>>s(6798), (ch([312,[308,309,310,311],314]),aux(845))>>s(6799), (ch([312,[308,309,310,311],314]),aux(812))>>s(6800), (ch([312,[308,309,310,311],314]),s(6777))>>s(6801), (ch([312,[308,309,310,311],314]),aux(826))>>s(6802), (ch([312,[308,309,310,311],314]),aux(832))>>s(6803), (ch([312,[308,309,310,311],314]),it(308))>>s(6804), (ch([312,[308,309,310,311],314]),aux(820))>>s(6805), (ch([312,[308,309,310,311],314]),aux(800))>>s(6806), (ch([312,[308,309,310,311],314]),it(310))>>s(6807), (ch([312,[308,309,310,311],314]),s(6769))>>s(6808), (ch([312,[308,309,310,311],314]),aux(794))>>s(6809), (ch([312,[308,309,310,311],314]),it(309))>>s(6810), (ch([312,[308,309,310,311],314]),it(311))>>s(6811), (ch([312,[308,309,310,311],314]),s(6768))>>s(6812), (ch([312,[308,309,310,311],314]),aux(809))>>s(6813), (ch([312,[308,309,310,311],314]),s(6764))>>s(6814), (ch([312,[308,309,310,311],314]),s(6776))>>s(6815), (ch([312,[308,309,310,311],314]),s(6772))>>s(6816), (ch([312,[308,309,310,311],314]),s(6774))>>s(6817), (ch([312,[308,309,310,311],314]),s(6775))>>s(6818), (ch([312,[308,309,310,311],314]),s(6770))>>s(6819), (ch([312,[308,309,310,311],314]),s(6771))>>s(6820)]
 * Renamed intermediate variables: 
[ (ch([[313],312,314]),it(313))>>s(6821), (ch([[313],312,314]),s(6777))>>s(6822)]
 * Renamed intermediate variables: 
[ (ch([[313],312,[308,309,310,311],314]),aux(843))>>s(6823), (ch([[313],312,[308,309,310,311],314]),aux(823))>>s(6824), (ch([[313],312,[308,309,310,311],314]),aux(817))>>s(6825), (ch([[313],312,[308,309,310,311],314]),aux(844))>>s(6826), (ch([[313],312,[308,309,310,311],314]),aux(816))>>s(6827), (ch([[313],312,[308,309,310,311],314]),aux(834))>>s(6828), (ch([[313],312,[308,309,310,311],314]),aux(833))>>s(6829), (ch([[313],312,[308,309,310,311],314]),aux(831))>>s(6830), (ch([[313],312,[308,309,310,311],314]),aux(830))>>s(6831), (ch([[313],312,[308,309,310,311],314]),s(6773))>>s(6832), (ch([[313],312,[308,309,310,311],314]),aux(837))>>s(6833), (ch([[313],312,[308,309,310,311],314]),aux(814))>>s(6834), (ch([[313],312,[308,309,310,311],314]),aux(839))>>s(6835), (ch([[313],312,[308,309,310,311],314]),aux(813))>>s(6836), (ch([[313],312,[308,309,310,311],314]),aux(846))>>s(6837), (ch([[313],312,[308,309,310,311],314]),aux(847))>>s(6838), (ch([[313],312,[308,309,310,311],314]),aux(848))>>s(6839), (ch([[313],312,[308,309,310,311],314]),aux(849))>>s(6840), (ch([[313],312,[308,309,310,311],314]),aux(850))>>s(6841), (ch([[313],312,[308,309,310,311],314]),it(313))>>s(6842), (ch([[313],312,[308,309,310,311],314]),s(6767))>>s(6843), (ch([[313],312,[308,309,310,311],314]),s(6777))>>s(6844), (ch([[313],312,[308,309,310,311],314]),aux(826))>>s(6845), (ch([[313],312,[308,309,310,311],314]),aux(832))>>s(6846), (ch([[313],312,[308,309,310,311],314]),it(308))>>s(6847), (ch([[313],312,[308,309,310,311],314]),aux(820))>>s(6848), (ch([[313],312,[308,309,310,311],314]),aux(800))>>s(6849), (ch([[313],312,[308,309,310,311],314]),it(310))>>s(6850), (ch([[313],312,[308,309,310,311],314]),s(6769))>>s(6851), (ch([[313],312,[308,309,310,311],314]),aux(794))>>s(6852), (ch([[313],312,[308,309,310,311],314]),it(309))>>s(6853), (ch([[313],312,[308,309,310,311],314]),it(311))>>s(6854), (ch([[313],312,[308,309,310,311],314]),s(6768))>>s(6855), (ch([[313],312,[308,309,310,311],314]),aux(809))>>s(6856), (ch([[313],312,[308,309,310,311],314]),s(6764))>>s(6857), (ch([[313],312,[308,309,310,311],314]),s(6776))>>s(6858), (ch([[313],312,[308,309,310,311],314]),s(6772))>>s(6859), (ch([[313],312,[308,309,310,311],314]),s(6774))>>s(6860), (ch([[313],312,[308,309,310,311],314]),s(6775))>>s(6861), (ch([[313],312,[308,309,310,311],314]),s(6770))>>s(6862), (ch([[313],312,[308,309,310,311],314]),s(6771))>>s(6863)]
 * Joined equivalent variables [aux(851),s(6794),s(6837)] into aux(851)
 * Joined equivalent variables [aux(852),s(6839)] into aux(852)
 * Joined equivalent variables [aux(855),s(6799),s(6841)] into aux(855)
 * Joined equivalent variables [aux(856),s(6836)] into aux(856)

#### Cost of chains of new_transpose_helper(A,B,C,D,E,F,G,H,I):
* Chain [[313],314]: 17*it(313)+2
  Such that:it(313) =< A

  with precondition: [D=1,E=0,G=1,H=0,A=B+1,A>=2,C>=0,F>=0,I>=0] 

* Chain [[313],312,[308,309,310,311],314]: 17*it(308)+17*it(309)+17*it(310)+17*it(311)+17*it(313)+10*s(6767)+9*s(6768)+9*s(6769)+15*s(6770)+5*s(6771)+9*s(6773)+15*s(6774)+5*s(6775)+10*s(6777)+19
  Such that:aux(843) =< A-G+H+1
aux(823) =< A+H
aux(817) =< 2*A-2*G+H
aux(844) =< 2*A-2*G+2*H
aux(816) =< 2*A-G+H
aux(834) =< 3*A-6*G+3*H
aux(833) =< 3*A-3*G+3*H
aux(831) =< A/2-G+H/2
aux(830) =< A/2-G/2+H/2
aux(834) =< 3/2*A-3*G+3/2*H
aux(833) =< 3/2*A-3/2*G+3/2*H
s(6773) =< -2*G+2*H
aux(837) =< -2*G+2*H+4
aux(814) =< -G+H+2
aux(839) =< -G+2*H+4
aux(813) =< H+2
aux(846) =< A
aux(847) =< A-2*G+H
aux(848) =< A-G+H
aux(849) =< 3*A-2*G+3*H
aux(850) =< -G+H
it(313) =< aux(846)
aux(831) =< aux(847)
aux(830) =< aux(848)
aux(843) =< aux(848)
s(6767) =< aux(848)
it(313) =< aux(849)
s(6767) =< aux(850)
s(6773) =< aux(839)
s(6777) =< aux(839)
aux(823) =< aux(849)
aux(826) =< aux(849)
aux(832) =< aux(848)
it(308) =< aux(848)
s(6777) =< aux(848)
aux(820) =< aux(843)
aux(800) =< aux(844)
aux(820) =< aux(844)
aux(826) =< aux(844)
aux(832) =< aux(844)
it(308) =< aux(844)
it(310) =< aux(837)
s(6769) =< aux(837)
s(6773) =< aux(837)
aux(794) =< aux(850)
it(309) =< aux(813)
it(310) =< aux(813)
s(6767) =< aux(813)
aux(794) =< aux(814)
it(310) =< aux(814)
it(308) =< aux(846)
it(309) =< aux(846)
it(310) =< aux(846)
it(311) =< aux(846)
it(309) =< aux(816)
it(310) =< aux(816)
it(311) =< aux(816)
s(6768) =< aux(816)
it(309) =< aux(817)
it(310) =< aux(817)
it(311) =< aux(817)
s(6768) =< aux(817)
aux(794) =< aux(832)
it(310) =< aux(832)
it(311) =< aux(832)
s(6769) =< aux(832)
it(308) =< aux(820)
it(309) =< aux(820)
it(310) =< aux(820)
it(311) =< aux(820)
it(309) =< aux(848)
it(310) =< aux(848)
it(311) =< aux(848)
it(309) =< aux(823)
it(310) =< aux(823)
it(311) =< aux(823)
s(6767) =< aux(823)
it(308) =< aux(847)
it(309) =< aux(847)
it(310) =< aux(847)
it(311) =< aux(847)
it(308) =< aux(832)
it(309) =< aux(832)
it(308) =< aux(830)
it(309) =< aux(830)
it(310) =< aux(830)
it(308) =< aux(831)
it(309) =< aux(831)
it(310) =< aux(831)
it(309) =< aux(833)
it(310) =< aux(833)
s(6768) =< aux(833)
it(309) =< aux(834)
it(310) =< aux(834)
it(311) =< aux(834)
s(6768) =< aux(834)
aux(809) =< aux(848)
aux(800) =< aux(848)-1
s(6764) =< aux(848)+1
it(309) =< aux(794)+aux(826)
it(310) =< aux(794)+aux(826)
it(311) =< aux(794)+aux(826)
aux(809) =< aux(800)+1
it(310) =< aux(794)+aux(846)
it(311) =< aux(794)+aux(846)
it(309) =< aux(794)+aux(846)
s(6776) =< it(311)*aux(809)
s(6772) =< it(309)*aux(800)
s(6774) =< s(6776)
s(6775) =< s(6774)*s(6764)
s(6770) =< s(6772)
s(6771) =< s(6770)*aux(848)

  with precondition: [D=1,E=0,A+H=B+G,A>=4,C>=0,F>=0,G>=2,I>=0,B+2>=A+G] 

* Chain [[313],312,314]: 17*it(313)+10*s(6777)+19
  Such that:it(313) =< A
s(6777) =< G

  with precondition: [D=1,E=0,H+2*A=2*B+2,A+G=B+2,A>=3,C>=0,F>=0,I>=0,B>=A] 

* Chain [[308,309,310,311],314]: 17*it(308)+17*it(309)+17*it(310)+17*it(311)+10*s(6767)+9*s(6768)+9*s(6769)+15*s(6770)+5*s(6771)+9*s(6773)+15*s(6774)+5*s(6775)+2
  Such that:s(6773) =< -2*A+2*B-D+4
aux(812) =< -A+B
s(6767) =< -A+B-D+2
aux(827) =< A+D-G
aux(820) =< B+1
s(6767) =< B-D
aux(821) =< B-D+E+2
aux(815) =< B-D+E+G-H+1
aux(823) =< B-D+G
aux(824) =< B+D
aux(825) =< B+D-G
aux(826) =< B+E
aux(827) =< B+E-H
aux(800) =< 2*B+E
aux(816) =< 2*B+E+G-H+1
aux(817) =< 2*B+E-H
aux(832) =< B/2
aux(829) =< B/2+1/2
aux(830) =< B/2+D/2
aux(831) =< B/2+D/2-G/2
it(308) =< B/3
aux(833) =< 3/2*B+3/2*D
aux(834) =< 3/2*B+3/2*D-3/2*G
s(6773) =< D-2*E-G+2*H
aux(814) =< D-E-G+H
aux(813) =< -E+H
aux(835) =< B
aux(836) =< B-D+E+G-H
aux(837) =< 2*D-2*E-2*G+2*H
it(310) =< aux(837)
s(6769) =< aux(837)
s(6773) =< aux(837)
aux(794) =< aux(812)
it(309) =< aux(813)
it(310) =< aux(813)
s(6767) =< aux(813)
aux(794) =< aux(814)
it(310) =< aux(814)
it(308) =< aux(815)
it(309) =< aux(815)
it(310) =< aux(815)
it(311) =< aux(815)
it(309) =< aux(816)
it(310) =< aux(816)
it(311) =< aux(816)
s(6768) =< aux(816)
it(309) =< aux(817)
it(310) =< aux(817)
it(311) =< aux(817)
s(6768) =< aux(817)
it(308) =< aux(836)
it(309) =< aux(836)
it(310) =< aux(836)
it(311) =< aux(836)
aux(794) =< aux(835)
it(310) =< aux(835)
it(311) =< aux(835)
s(6769) =< aux(835)
it(308) =< aux(820)
it(309) =< aux(820)
it(310) =< aux(820)
it(311) =< aux(820)
it(308) =< aux(821)
it(309) =< aux(821)
it(310) =< aux(821)
it(311) =< aux(821)
it(309) =< aux(823)
it(310) =< aux(823)
it(311) =< aux(823)
s(6767) =< aux(823)
it(308) =< aux(824)
it(309) =< aux(824)
it(310) =< aux(824)
it(311) =< aux(824)
it(308) =< aux(825)
it(309) =< aux(825)
it(310) =< aux(825)
it(311) =< aux(825)
it(308) =< aux(835)
it(309) =< aux(835)
it(309) =< aux(829)
it(310) =< aux(829)
it(308) =< aux(830)
it(309) =< aux(830)
it(310) =< aux(830)
it(308) =< aux(831)
it(309) =< aux(831)
it(310) =< aux(831)
it(309) =< aux(832)
it(310) =< aux(832)
it(309) =< aux(833)
it(310) =< aux(833)
s(6768) =< aux(833)
it(309) =< aux(834)
it(310) =< aux(834)
it(311) =< aux(834)
s(6768) =< aux(834)
aux(809) =< aux(824)
aux(800) =< aux(824)-1
s(6764) =< aux(824)+1
it(309) =< aux(794)+aux(826)
it(310) =< aux(794)+aux(826)
it(311) =< aux(794)+aux(826)
aux(809) =< aux(800)+1
it(310) =< aux(794)+aux(827)
it(311) =< aux(794)+aux(827)
it(309) =< aux(794)+aux(827)
s(6776) =< it(311)*aux(809)
s(6772) =< it(309)*aux(800)
s(6774) =< s(6776)
s(6775) =< s(6774)*s(6764)
s(6770) =< s(6772)
s(6771) =< s(6770)*aux(824)

  with precondition: [A+D+H=B+E+G+1,A>=2,C>=0,D>=2,F>=0,I>=0,E+1>=D,G>=D,B+D+1>=A+G] 

* Chain [314]: 2
  with precondition: [A=1,B=0,D=G,E=H,F=I,C>=0,D>=0,E>=0,F>=0] 

* Chain [312,[308,309,310,311],314]: 17*it(308)+17*it(309)+17*it(310)+17*it(311)+10*s(6767)+9*s(6768)+9*s(6769)+15*s(6770)+5*s(6771)+9*s(6773)+15*s(6774)+5*s(6775)+10*s(6777)+19
  Such that:s(6773) =< -2*A+2*B
aux(837) =< -2*A+2*B+4
aux(837) =< -2*A+4*B
aux(814) =< -A+B+2
aux(814) =< -A+2*B
aux(825) =< -A+2*B-H
s(6773) =< -A+4*B+H
aux(816) =< A+B
s(6767) =< A-G+H
aux(823) =< A+H
aux(834) =< -3/2*A+3*B-3/2*H
aux(831) =< -A/2+B-H/2
aux(827) =< B+G-H
aux(817) =< 2*B-H
aux(813) =< 2*B+H
aux(830) =< B/2
aux(833) =< 3/2*B
s(6773) =< -2*G+2*H
aux(813) =< H+2
aux(838) =< -A+B
aux(839) =< -A+B+H+4
aux(840) =< A
aux(841) =< A+2*B+H
aux(842) =< B
aux(843) =< B+1
aux(844) =< 2*B
aux(845) =< -G+H
aux(812) =< aux(838)
s(6767) =< aux(838)
s(6773) =< aux(839)
s(6777) =< aux(839)
aux(827) =< aux(840)
aux(823) =< aux(841)
aux(826) =< aux(841)
aux(832) =< aux(842)
it(308) =< aux(842)
s(6767) =< aux(842)
s(6777) =< aux(842)
aux(820) =< aux(843)
aux(800) =< aux(844)
aux(820) =< aux(844)
aux(826) =< aux(844)
aux(832) =< aux(844)
it(308) =< aux(844)
aux(812) =< aux(845)
s(6767) =< aux(845)
it(310) =< aux(837)
s(6769) =< aux(837)
s(6773) =< aux(837)
aux(794) =< aux(812)
it(309) =< aux(813)
it(310) =< aux(813)
s(6767) =< aux(813)
aux(794) =< aux(814)
it(310) =< aux(814)
it(308) =< aux(840)
it(309) =< aux(840)
it(310) =< aux(840)
it(311) =< aux(840)
it(309) =< aux(816)
it(310) =< aux(816)
it(311) =< aux(816)
s(6768) =< aux(816)
it(309) =< aux(817)
it(310) =< aux(817)
it(311) =< aux(817)
s(6768) =< aux(817)
aux(794) =< aux(832)
it(310) =< aux(832)
it(311) =< aux(832)
s(6769) =< aux(832)
it(308) =< aux(820)
it(309) =< aux(820)
it(310) =< aux(820)
it(311) =< aux(820)
it(309) =< aux(842)
it(310) =< aux(842)
it(311) =< aux(842)
it(309) =< aux(823)
it(310) =< aux(823)
it(311) =< aux(823)
s(6767) =< aux(823)
it(308) =< aux(825)
it(309) =< aux(825)
it(310) =< aux(825)
it(311) =< aux(825)
it(308) =< aux(832)
it(309) =< aux(832)
it(308) =< aux(830)
it(309) =< aux(830)
it(310) =< aux(830)
it(308) =< aux(831)
it(309) =< aux(831)
it(310) =< aux(831)
it(309) =< aux(833)
it(310) =< aux(833)
s(6768) =< aux(833)
it(309) =< aux(834)
it(310) =< aux(834)
it(311) =< aux(834)
s(6768) =< aux(834)
aux(809) =< aux(842)
aux(800) =< aux(842)-1
s(6764) =< aux(842)+1
it(309) =< aux(794)+aux(826)
it(310) =< aux(794)+aux(826)
it(311) =< aux(794)+aux(826)
aux(809) =< aux(800)+1
it(310) =< aux(794)+aux(827)
it(311) =< aux(794)+aux(827)
it(309) =< aux(794)+aux(827)
s(6776) =< it(311)*aux(809)
s(6772) =< it(309)*aux(800)
s(6774) =< s(6776)
s(6775) =< s(6774)*s(6764)
s(6770) =< s(6772)
s(6771) =< s(6770)*aux(842)

  with precondition: [D=1,E=0,A+H=B+G,A>=3,C>=0,F>=0,I>=0,2*B+2>=2*A+H,A+H>=B+2] 

* Chain [312,314]: 10*s(6777)+19
  Such that:s(6777) =< H/2+1

  with precondition: [A=2,D=1,E=0,B=G,2*B=H+2,B>=2,C>=0,F>=0,I>=0] 


#### Simplifying cost structure of CE 434 
 * Renamed intermediate variables: 
[ (eq(435,1),s(6777))>>s(6864)]
 * Renamed intermediate variables: 
[ (eq(435,2),s(9))>>s(6865), (eq(435,2),aux(16))>>s(6866), (eq(435,2),s(8))>>s(6867), (eq(435,2),s(10))>>s(6868)]

#### Simplifying cost structure of CE 435 
 * Joined equivalent variables [aux(857),s(6866)] into aux(857)
 * Joined equivalent variables [s(6864),s(6867)] into s(6864)
 * Renamed intermediate variables: 
[ (eq(436,1),it(313))>>s(6869)]

#### Simplifying cost structure of CE 436 
 * Renamed intermediate variables: 
[ (eq(437,1),s(6778))>>s(6870), (eq(437,1),s(6779))>>s(6871), (eq(437,1),s(6792))>>s(6872), (eq(437,1),s(6780))>>s(6873), (eq(437,1),s(6793))>>s(6874), (eq(437,1),s(6781))>>s(6875), (eq(437,1),s(6782))>>s(6876), (eq(437,1),s(6795))>>s(6877), (eq(437,1),s(6838))>>s(6878), (eq(437,1),s(6823))>>s(6879), (eq(437,1),s(6825))>>s(6880), (eq(437,1),s(6826))>>s(6881), (eq(437,1),s(6827))>>s(6882), (eq(437,1),s(6828))>>s(6883), (eq(437,1),s(6829))>>s(6884), (eq(437,1),s(6840))>>s(6885), (eq(437,1),s(6785))>>s(6886), (eq(437,1),s(6786))>>s(6887), (eq(437,1),s(6830))>>s(6888), (eq(437,1),s(6831))>>s(6889), (eq(437,1),s(6796))>>s(6890), (eq(437,1),s(6797))>>s(6891), (eq(437,1),s(6787))>>s(6892), (eq(437,1),s(6798))>>s(6893), (eq(437,1),s(6788))>>s(6894), (eq(437,1),s(6789))>>s(6895), (eq(437,1),s(6790))>>s(6896), (eq(437,1),s(6791))>>s(6897), (eq(437,1),s(6833))>>s(6898), (eq(437,1),s(6834))>>s(6899), (eq(437,1),s(6835))>>s(6900), (eq(437,1),s(6822))>>s(6901), (eq(437,1),aux(851))>>s(6902), (eq(437,1),aux(852))>>s(6903), (eq(437,1),aux(853))>>s(6904), (eq(437,1),aux(854))>>s(6905), (eq(437,1),aux(855))>>s(6906), (eq(437,1),aux(856))>>s(6907), (eq(437,1),s(6821))>>s(6908), (eq(437,1),s(6783))>>s(6909), (eq(437,1),s(6784))>>s(6910), (eq(437,1),s(6824))>>s(6911), (eq(437,1),s(6832))>>s(6912), (eq(437,1),s(6800))>>s(6913), (eq(437,1),s(6801))>>s(6914), (eq(437,1),s(6802))>>s(6915), (eq(437,1),s(6803))>>s(6916), (eq(437,1),s(6804))>>s(6917), (eq(437,1),s(6805))>>s(6918), (eq(437,1),s(6806))>>s(6919), (eq(437,1),s(6807))>>s(6920), (eq(437,1),s(6808))>>s(6921), (eq(437,1),s(6809))>>s(6922), (eq(437,1),s(6810))>>s(6923), (eq(437,1),s(6811))>>s(6924), (eq(437,1),s(6812))>>s(6925), (eq(437,1),s(6813))>>s(6926), (eq(437,1),s(6814))>>s(6927), (eq(437,1),s(6815))>>s(6928), (eq(437,1),s(6816))>>s(6929), (eq(437,1),s(6817))>>s(6930), (eq(437,1),s(6818))>>s(6931), (eq(437,1),s(6819))>>s(6932), (eq(437,1),s(6820))>>s(6933), (eq(437,1),s(6842))>>s(6934), (eq(437,1),s(6843))>>s(6935), (eq(437,1),s(6844))>>s(6936), (eq(437,1),s(6845))>>s(6937), (eq(437,1),s(6846))>>s(6938), (eq(437,1),s(6847))>>s(6939), (eq(437,1),s(6848))>>s(6940), (eq(437,1),s(6849))>>s(6941), (eq(437,1),s(6850))>>s(6942), (eq(437,1),s(6851))>>s(6943), (eq(437,1),s(6852))>>s(6944), (eq(437,1),s(6853))>>s(6945), (eq(437,1),s(6854))>>s(6946), (eq(437,1),s(6855))>>s(6947), (eq(437,1),s(6856))>>s(6948), (eq(437,1),s(6857))>>s(6949), (eq(437,1),s(6858))>>s(6950), (eq(437,1),s(6859))>>s(6951), (eq(437,1),s(6860))>>s(6952), (eq(437,1),s(6861))>>s(6953), (eq(437,1),s(6862))>>s(6954), (eq(437,1),s(6863))>>s(6955)]
 * Renamed intermediate variables: 
[ (eq(437,2),s(9))>>s(6956), (eq(437,2),aux(16))>>s(6957), (eq(437,2),s(8))>>s(6958), (eq(437,2),s(10))>>s(6959)]

#### Simplifying cost structure of CE 437 
 * Joined equivalent variables [aux(858),s(6905)] into aux(858)
 * Joined equivalent variables [aux(859),s(6871),s(6898)] into aux(859)
 * Joined equivalent variables [aux(861),s(6872),s(6906)] into aux(861)
 * Joined equivalent variables [aux(862),s(6873),s(6899)] into aux(862)
 * Joined equivalent variables [aux(864),s(6902)] into aux(864)
 * Joined equivalent variables [aux(865),s(6876),s(6882)] into aux(865)
 * Joined equivalent variables [aux(867),s(6894)] into aux(867)
 * Joined equivalent variables [aux(868),s(6890),s(6903)] into aux(868)
 * Joined equivalent variables [aux(869),s(6891)] into aux(869)
 * Joined equivalent variables [aux(870),s(6881),s(6893)] into aux(870)
 * Joined equivalent variables [aux(871),s(6875),s(6878),s(6887)] into aux(871)
 * Joined equivalent variables [aux(872),s(6883),s(6886)] into aux(872)
 * Joined equivalent variables [aux(873),s(6896)] into aux(873)
 * Joined equivalent variables [aux(874),s(6884),s(6897)] into aux(874)
 * Joined equivalent variables [s(6874),s(6900)] into s(6874)
 * Joined equivalent variables [s(6877),s(6885)] into s(6877)
 * Joined equivalent variables [aux(861),s(6913)] into aux(861)
 * Joined equivalent variables [aux(864),s(6892)] into aux(864)
 * Joined equivalent variables [aux(871),s(6888)] into aux(871)
 * Joined equivalent variables [s(6919),s(6941)] into s(6919)
 * Joined equivalent variables [s(6927),s(6949)] into s(6927)
 * Joined equivalent variables [s(6870),s(6912)] into s(6870)
 * Joined equivalent variables [s(6914),s(6936)] into s(6914)
 * Joined equivalent variables [s(6916),s(6938)] into s(6916)
 * Joined equivalent variables [s(6915),s(6937)] into s(6915)
 * Joined equivalent variables [s(6910),s(6911)] into s(6910)
 * Joined equivalent variables [s(6926),s(6948)] into s(6926)
 * Joined equivalent variables [s(6921),s(6943)] into s(6921)
 * Joined equivalent variables [s(6922),s(6944)] into s(6922)

#### Cost of chains of new_transpose(A,B,C,D,E,F):
* Chain [318]: 14
  with precondition: [A=1,B=0,D=1,E=0,C>=0,F>=0] 

* Chain [317]: 25*s(6864)+5*s(6868)+31
  Such that:s(6865) =< B+1
aux(857) =< B
s(6864) =< aux(857)
s(6868) =< s(6864)*s(6865)

  with precondition: [A=2,B=D,2*B=E+2,B>=2,C>=0,F>=0] 

* Chain [316]: 17*s(6869)+14
  Such that:s(6869) =< B+1

  with precondition: [D=1,E=0,A=B+1,A>=2,C>=0,F>=0] 

* Chain [315]: 18*s(6870)+10*s(6901)+17*s(6908)+10*s(6909)+20*s(6914)+17*s(6917)+17*s(6920)+18*s(6921)+17*s(6923)+17*s(6924)+9*s(6925)+15*s(6930)+5*s(6931)+15*s(6932)+5*s(6933)+17*s(6934)+10*s(6935)+17*s(6939)+17*s(6942)+17*s(6945)+17*s(6946)+9*s(6947)+15*s(6952)+5*s(6953)+15*s(6954)+5*s(6955)+15*s(6958)+5*s(6959)+31
  Such that:s(6907) =< -A+2*B+2
s(6895) =< -A+4*B
s(6904) =< A+2*B
s(6907) =< 2*B+2
aux(858) =< -2*A+2*B
aux(859) =< -2*A+2*B+4
aux(860) =< -2*A+3*B+4
aux(861) =< -A+B
aux(862) =< -A+B+2
aux(863) =< -A+3*B+4
aux(864) =< A
aux(865) =< A+B
aux(866) =< A+B+1
aux(867) =< A+4*B
aux(868) =< B
aux(869) =< B+1
aux(870) =< 2*B
aux(871) =< 4*B
aux(872) =< 12*B
aux(873) =< B/2
aux(874) =< 3/2*B
s(6870) =< aux(858)
s(6874) =< aux(860)
s(6874) =< aux(863)
s(6880) =< aux(865)
s(6901) =< aux(865)
s(6957) =< aux(865)
s(6880) =< aux(866)
s(6956) =< aux(866)
s(6877) =< aux(867)
s(6901) =< aux(868)
s(6957) =< aux(868)
s(6879) =< aux(869)
s(6956) =< aux(869)
s(6904) =< aux(870)
s(6877) =< aux(871)
s(6895) =< aux(871)
s(6889) =< aux(873)
s(6958) =< s(6957)
s(6959) =< s(6958)*s(6956)
s(6908) =< aux(864)
s(6909) =< aux(868)
s(6910) =< s(6904)
s(6895) =< s(6907)
s(6909) =< aux(861)
s(6870) =< s(6874)
s(6914) =< s(6874)
s(6910) =< s(6877)
s(6915) =< s(6877)
s(6916) =< aux(868)
s(6917) =< aux(868)
s(6914) =< aux(868)
s(6918) =< aux(869)
s(6919) =< aux(870)
s(6918) =< aux(870)
s(6915) =< aux(870)
s(6916) =< aux(870)
s(6917) =< aux(870)
s(6920) =< aux(859)
s(6921) =< aux(859)
s(6870) =< aux(859)
s(6922) =< aux(861)
s(6923) =< s(6895)
s(6920) =< s(6895)
s(6909) =< s(6895)
s(6922) =< aux(862)
s(6920) =< aux(862)
s(6917) =< aux(864)
s(6923) =< aux(864)
s(6920) =< aux(864)
s(6924) =< aux(864)
s(6923) =< aux(865)
s(6920) =< aux(865)
s(6924) =< aux(865)
s(6925) =< aux(865)
s(6923) =< aux(867)
s(6920) =< aux(867)
s(6924) =< aux(867)
s(6925) =< aux(867)
s(6922) =< s(6916)
s(6920) =< s(6916)
s(6924) =< s(6916)
s(6921) =< s(6916)
s(6917) =< s(6918)
s(6923) =< s(6918)
s(6920) =< s(6918)
s(6924) =< s(6918)
s(6923) =< aux(868)
s(6920) =< aux(868)
s(6924) =< aux(868)
s(6923) =< s(6910)
s(6920) =< s(6910)
s(6924) =< s(6910)
s(6909) =< s(6910)
s(6917) =< aux(871)
s(6923) =< aux(871)
s(6920) =< aux(871)
s(6924) =< aux(871)
s(6917) =< s(6916)
s(6923) =< s(6916)
s(6917) =< aux(873)
s(6923) =< aux(873)
s(6920) =< aux(873)
s(6923) =< aux(874)
s(6920) =< aux(874)
s(6925) =< aux(874)
s(6923) =< aux(872)
s(6920) =< aux(872)
s(6924) =< aux(872)
s(6925) =< aux(872)
s(6926) =< aux(868)
s(6919) =< aux(868)-1
s(6927) =< aux(868)+1
s(6923) =< s(6922)+s(6915)
s(6920) =< s(6922)+s(6915)
s(6924) =< s(6922)+s(6915)
s(6926) =< s(6919)+1
s(6920) =< s(6922)+aux(864)
s(6924) =< s(6922)+aux(864)
s(6923) =< s(6922)+aux(864)
s(6928) =< s(6924)*s(6926)
s(6929) =< s(6923)*s(6919)
s(6930) =< s(6928)
s(6931) =< s(6930)*s(6927)
s(6932) =< s(6929)
s(6933) =< s(6932)*aux(868)
s(6934) =< aux(864)
s(6889) =< aux(868)
s(6879) =< aux(868)
s(6935) =< aux(868)
s(6934) =< s(6877)
s(6935) =< aux(861)
s(6939) =< aux(868)
s(6940) =< s(6879)
s(6940) =< aux(870)
s(6939) =< aux(870)
s(6942) =< aux(859)
s(6945) =< s(6907)
s(6942) =< s(6907)
s(6935) =< s(6907)
s(6942) =< aux(862)
s(6939) =< aux(864)
s(6945) =< aux(864)
s(6942) =< aux(864)
s(6946) =< aux(864)
s(6945) =< aux(865)
s(6942) =< aux(865)
s(6946) =< aux(865)
s(6947) =< aux(865)
s(6945) =< s(6880)
s(6942) =< s(6880)
s(6946) =< s(6880)
s(6947) =< s(6880)
s(6942) =< s(6916)
s(6946) =< s(6916)
s(6939) =< s(6940)
s(6945) =< s(6940)
s(6942) =< s(6940)
s(6946) =< s(6940)
s(6945) =< aux(868)
s(6942) =< aux(868)
s(6946) =< aux(868)
s(6945) =< s(6910)
s(6942) =< s(6910)
s(6946) =< s(6910)
s(6935) =< s(6910)
s(6939) =< aux(871)
s(6945) =< aux(871)
s(6942) =< aux(871)
s(6946) =< aux(871)
s(6939) =< s(6916)
s(6945) =< s(6916)
s(6939) =< s(6889)
s(6945) =< s(6889)
s(6942) =< s(6889)
s(6945) =< aux(874)
s(6942) =< aux(874)
s(6947) =< aux(874)
s(6945) =< aux(872)
s(6942) =< aux(872)
s(6946) =< aux(872)
s(6947) =< aux(872)
s(6945) =< s(6922)+s(6915)
s(6942) =< s(6922)+s(6915)
s(6946) =< s(6922)+s(6915)
s(6942) =< s(6922)+aux(864)
s(6946) =< s(6922)+aux(864)
s(6945) =< s(6922)+aux(864)
s(6950) =< s(6946)*s(6926)
s(6951) =< s(6945)*s(6919)
s(6952) =< s(6950)
s(6953) =< s(6952)*s(6927)
s(6954) =< s(6951)
s(6955) =< s(6954)*aux(868)

  with precondition: [B+D=A+E,A>=3,C>=0,D>=2,F>=0,B+2>=A+D] 


#### Simplifying cost structure of CE 438 

#### Cost of chains of remFirstRow(A,B,C,D,E,F):
* Chain [319]: 2
  with precondition: [D+1=A,C>=0,D>=1,E>=0,F>=0,B>=E+1] 


#### Simplifying cost structure of CE 439 

#### Computing cost of phase [320] 

#### Simplifying cost structure of CE 440 

#### Cost of loops [320] 

 * loop 320:size(A,B,C) -> [size(A',B',C')] 
6
##### Pending set size(A,B,C)
* Psum in Loop 320: [it(320)=<1]

###### Computing sum for it(320)=<1  in Loop 320 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
     - head Candidate: B+1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
     - tail Candidate: B+1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(320)=<A-1,it(320)=<B+1,it(320)=<A-1,it(320)=<B+1,it(320)=<A-A',it(320)=<B-B',it(320)=<A-A',it(320)=<B-B'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [320] 

#### Simplifying cost structure of phase [320] 

#### Cost of phase [320]:size(A,B,C) -> [size(A',B',C')] 
6*it(320)+0
  Such that:it(320) =< A
it(320) =< A-A'
it(320) =< B+1
it(320) =< B-B'

#### Simplifying cost structure of chain [[320],321] 

#### Cost of chains of size(A,B,C):
* Chain [[320],321]: 6*it(320)+3
  Such that:it(320) =< C

  with precondition: [A=C+1,A>=2,B+1>=A] 

* Chain [321]: 3
  with precondition: [A=1,B=0,C=0] 


#### Simplifying cost structure of CE 445 

#### Computing cost of phase [323,324,325,326] 
 * Renamed intermediate variables: 
[ (eq(443,1),it(172))>>s(6960)]

#### Simplifying cost structure of CE 443 
 * Renamed intermediate variables: 
[ (it(323),s(6960))>>s(6961)]
 * Renamed intermediate variables: 
[ (eq(444,1),it(172))>>s(6962)]

#### Simplifying cost structure of CE 444 
 * Renamed intermediate variables: 
[ (it(324),s(6962))>>s(6963)]

#### Simplifying cost structure of CE 441 

#### Simplifying cost structure of CE 442 

#### Cost of loops [323,324,325,326] 

 * loop 323:submat(A,B,C,D,E,F,G,H) -> [submat(A',B',C',D',E',F',G',H')] 
10*s(6961)+14
  Such that:s(6961) =< B-B'

 * loop 324:submat(A,B,C,D,E,F,G,H) -> [submat(A',B',C',D',E',F',G',H')] 
10*s(6963)+17
  Such that:s(6963) =< E'

 * loop 325:submat(A,B,C,D,E,F,G,H) -> [submat(A',B',C',D',E',F',G',H')] 
14
 * loop 326:submat(A,B,C,D,E,F,G,H) -> [submat(A',B',C',D',E',F',G',H')] 
17
##### Pending set submat(A,B,C,D,E,F,G,H)
* Psum in Loop 323: [it(323)=<1,s(6964)=<B-B']
* Psum in Loop 324: [it(324)=<1,s(6965)=<E']
* Psum in Loop 325: [it(325)=<1]
* Psum in Loop 326: [it(326)=<1]

###### Computing sum for it(323)=<1  in Loop 323 
   - Applying inductive sum strategy 
     - head Candidate: D 
       - Loop 324 is collaborative and bounds [it(324)] 
       - Loop 325 is collaborative and bounds [it(325)] 
       - Loop 326 is collaborative and bounds [it(326)] 
     - head Candidate: B 
       - Loop 324 is collaborative and bounds [it(324)] 
       - Loop 325 is collaborative and bounds [it(325)] 
       - Loop 326 is collaborative and bounds [it(326)] 
     - head Candidate: A-1 
       - Loop 324 is collaborative and bounds [it(324)] 
       - Loop 325 is collaborative and bounds [it(325)] 
       - Loop 326 is collaborative and bounds [it(326)] 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B/2-1/2 
       - Loop 324 is collaborative and bounds [it(324)] 
       - Loop 325 is collaborative
       - Loop 326 is collaborative
     - tail Candidate: D 
       - Loop 324 is collaborative and bounds [it(324)] 
       - Loop 325 is collaborative and bounds [it(325)] 
       - Loop 326 is collaborative and bounds [it(326)] 
     - tail Candidate: B 
       - Loop 324 is collaborative and bounds [it(324)] 
       - Loop 325 is collaborative and bounds [it(325)] 
       - Loop 326 is collaborative and bounds [it(326)] 
     - tail Candidate: A-1 
       - Loop 324 is collaborative and bounds [it(324)] 
       - Loop 325 is collaborative and bounds [it(325)] 
       - Loop 326 is collaborative and bounds [it(326)] 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B/2-1/2 
       - Loop 324 is collaborative and bounds [it(324)] 
       - Loop 325 is collaborative
       - Loop 326 is collaborative and bounds [it(326)] 
 * Adding constraints: [it(323)+it(324)+it(325)+it(326)=<D,it(323)+it(324)+it(325)+it(326)=<B,it(323)+it(324)+it(325)+it(326)=<A-1,it(323)+it(324)+it(325)+it(326)=<A-1,it(323)+it(324)+it(325)+it(326)=<D,it(323)+it(324)=<B/2-1/2,it(323)+it(324)+it(325)+it(326)=<D-D',it(323)+it(324)+it(325)+it(326)=<B-B',it(323)+it(324)+it(325)+it(326)=<A-A',it(323)+it(324)+it(325)+it(326)=<A-A',it(323)+it(324)+it(325)+it(326)=<D-D',it(323)+it(324)+it(326)=<B/2-B'/2] 

##### Pending set A
* Psum in Loop 323: [s(6964)=<B-B']
* Psum in Loop 324: [it(324)=<1,s(6965)=<E']
* Psum in Loop 325: [it(325)=<1]
* Psum in Loop 326: [it(326)=<1]

###### Computing sum for s(6964)=<B-B'  in Loop 323 
   - Applying inductive sum strategy 
     - head Candidate: -2*A+2*B+2 
       - Loop 324 is collaborative and bounds [it(324)] 
       - Loop 325 is collaborative
       - Loop 326 is collaborative and bounds [it(326)] 
     - head Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -2*A+2*B+2 
       - Loop 324 is collaborative and bounds [it(324)] 
       - Loop 325 is collaborative
       - Loop 326 is collaborative and bounds [it(326)] 
     - tail Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(324)+it(326)+s(6964)=< -2*A+2*B+2,it(324)+it(325)+it(326)+s(6964)=<B,it(324)+it(326)+s(6964)=< -2*A+2*B+2*A'-2*B',it(324)+it(325)+it(326)+s(6964)=<B-B'] 

##### Pending set A
* Psum in Loop 324: [it(324)=<1,s(6965)=<E']
* Psum in Loop 325: [it(325)=<1]
* Psum in Loop 326: [it(326)=<1]

###### Computing sum for it(324)=<1  in Loop 324 
   - Applying inductive sum strategy 
     - head Candidate: D 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B/3-2/3 
       - Loop 323 is collaborative
       - Loop 325 is collaborative
       - Loop 326 is collaborative
     - head Candidate: B/3-E/3-1/3 
       - Loop 323 is collaborative
       - Loop 325 is collaborative
       - Loop 326 is collaborative
     - tail Candidate: D 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B/3-2/3 
       - Loop 323 is collaborative
       - Loop 325 is collaborative
       - Loop 326 is collaborative
     - tail Candidate: B/3-E/3-1/3 
       - Loop 323 is collaborative
       - Loop 325 is collaborative
       - Loop 326 is collaborative
 * Adding constraints: [it(323)+it(324)+it(325)+it(326)=<D,it(323)+it(324)+it(325)+it(326)=<B,it(323)+it(324)+it(325)+it(326)=<A-1,it(323)+it(324)+it(325)+it(326)=<A-1,it(323)+it(324)+it(325)+it(326)=<D,it(324)=<B/3-2/3,it(324)=<B/3-E/3-1/3,it(323)+it(324)+it(325)+it(326)=<D-D',it(323)+it(324)+it(325)+it(326)=<B-B',it(323)+it(324)+it(325)+it(326)=<A-A',it(323)+it(324)+it(325)+it(326)=<A-A',it(323)+it(324)+it(325)+it(326)=<D-D',it(324)=<B/3-B'/3,it(324)=<B/3-E/3-B'/3+E'/3] 

##### Pending set A
* Psum in Loop 324: [s(6965)=<E']
* Psum in Loop 325: [it(325)=<1]
* Psum in Loop 326: [it(326)=<1]

###### Computing sum for s(6965)=<E'  in Loop 324 
   - Applying inductive sum strategy 
     - head Candidate: -A+B 
       - Loop 323 is collaborative
       - Loop 325 is collaborative
       - Loop 326 is collaborative
     - head Candidate: B-2 
       - Loop 323 is collaborative
       - Loop 325 is collaborative
       - Loop 326 is collaborative
     - tail Candidate: -A+B 
       - Loop 323 is collaborative
       - Loop 325 is collaborative
       - Loop 326 is collaborative and bounds [it(326)] 
     - tail Candidate: B-2 
       - Loop 323 is collaborative
       - Loop 325 is collaborative and bounds [it(325)] 
       - Loop 326 is collaborative and bounds [it(326)] 
 * Adding constraints: [s(6965)=< -A+B,s(6965)=<B-2,it(326)+s(6965)=< -A+B+A'-B',it(325)+it(326)+s(6965)=<B-B'] 

##### Pending set A
* Psum in Loop 325: [it(325)=<1]
* Psum in Loop 326: [it(326)=<1]

###### Computing sum for it(325)=<1  in Loop 325 
   - Applying inductive sum strategy 
     - head Candidate: D 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(323)+it(324)+it(325)+it(326)=<D,it(323)+it(324)+it(325)+it(326)=<B,it(323)+it(324)+it(325)+it(326)=<A-1,it(323)+it(324)+it(325)+it(326)=<A-1,it(323)+it(324)+it(325)+it(326)=<B,it(323)+it(324)+it(325)+it(326)=<D,it(323)+it(324)+it(325)+it(326)=<D-D',it(323)+it(324)+it(325)+it(326)=<B-B',it(323)+it(324)+it(325)+it(326)=<A-A',it(323)+it(324)+it(325)+it(326)=<A-A',it(323)+it(324)+it(325)+it(326)=<B-B',it(323)+it(324)+it(325)+it(326)=<D-D'] 

##### Pending set A
* Psum in Loop 326: [it(326)=<1]

###### Computing sum for it(326)=<1  in Loop 326 
   - Applying inductive sum strategy 
     - head Candidate: D 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B/2-1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B/2-1/2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(323)+it(324)+it(325)+it(326)=<D,it(323)+it(324)+it(325)+it(326)=<B,it(323)+it(324)+it(325)+it(326)=<A-1,it(323)+it(324)+it(325)+it(326)=<A-1,it(323)+it(324)+it(325)+it(326)=<D,it(323)+it(324)+it(326)=<B/2-1/2,it(323)+it(324)+it(325)+it(326)=<D-D',it(323)+it(324)+it(325)+it(326)=<B-B',it(323)+it(324)+it(325)+it(326)=<A-A',it(323)+it(324)+it(325)+it(326)=<A-A',it(323)+it(324)+it(325)+it(326)=<D-D',it(323)+it(324)+it(326)=<B/2-B'/2] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [323,324,325,326] 

#### Simplifying cost structure of phase [323,324,325,326] 

#### Cost of phase [323,324,325,326]:submat(A,B,C,D,E,F,G,H) -> [submat(A',B',C',D',E',F',G',H')] 
14*it(323)+17*it(324)+14*it(325)+17*it(326)+10*s(6964)+10*s(6965)+0
  Such that:s(6965) =< -A+B
it(324) =< B/3
it(324) =< B/3-E/3
it(324) =< B/3-E/3-B'/3+E'/3
it(324) =< B/3-B'/3
aux(875) =< -2*A+2*B+2
aux(876) =< -2*A+2*B+2*A'-2*B'
aux(877) =< -A+B+A'-B'
aux(878) =< A
aux(879) =< A-A'
aux(880) =< B
aux(881) =< B-B'
aux(882) =< B/2
aux(883) =< B/2-B'/2
aux(884) =< D
aux(885) =< D-D'
it(324) =< aux(875)
it(326) =< aux(875)
s(6964) =< aux(875)
it(324) =< aux(876)
it(326) =< aux(876)
s(6964) =< aux(876)
it(326) =< aux(877)
s(6965) =< aux(877)
it(323) =< aux(878)
it(324) =< aux(878)
it(325) =< aux(878)
it(326) =< aux(878)
it(323) =< aux(879)
it(324) =< aux(879)
it(325) =< aux(879)
it(326) =< aux(879)
it(323) =< aux(880)
it(324) =< aux(880)
it(325) =< aux(880)
it(326) =< aux(880)
s(6964) =< aux(880)
s(6965) =< aux(880)
it(323) =< aux(881)
it(324) =< aux(881)
it(325) =< aux(881)
it(326) =< aux(881)
s(6964) =< aux(881)
s(6965) =< aux(881)
it(323) =< aux(882)
it(324) =< aux(882)
it(326) =< aux(882)
it(323) =< aux(883)
it(324) =< aux(883)
it(326) =< aux(883)
it(323) =< aux(884)
it(324) =< aux(884)
it(325) =< aux(884)
it(326) =< aux(884)
it(323) =< aux(885)
it(324) =< aux(885)
it(325) =< aux(885)
it(326) =< aux(885)

#### Simplifying cost structure of chain [[323,324,325,326],322] 
 * Joined equivalent variables [aux(886),aux(875),aux(876)] into aux(886)
 * Joined equivalent variables [aux(887),aux(878),aux(879),aux(885)] into aux(887)
 * Joined equivalent variables [aux(888),aux(880),aux(881)] into aux(888)
 * Joined equivalent variables [aux(889),aux(882),aux(883)] into aux(889)

#### Cost of chains of submat(A,B,C,D,E,F,G,H):
* Chain [[323,324,325,326],322]: 14*it(323)+17*it(324)+14*it(325)+17*it(326)+10*s(6964)+10*s(6965)+3
  Such that:s(6965) =< -A+B
aux(877) =< -A+B+1
it(324) =< B/3
it(324) =< B/3-E/3
aux(884) =< D
aux(886) =< -2*A+2*B+2
aux(887) =< A
aux(888) =< B
aux(889) =< B/2
it(324) =< aux(886)
it(326) =< aux(886)
s(6964) =< aux(886)
it(326) =< aux(877)
s(6965) =< aux(877)
it(323) =< aux(887)
it(324) =< aux(887)
it(325) =< aux(887)
it(326) =< aux(887)
it(323) =< aux(888)
it(324) =< aux(888)
it(325) =< aux(888)
it(326) =< aux(888)
s(6964) =< aux(888)
s(6965) =< aux(888)
it(323) =< aux(889)
it(324) =< aux(889)
it(326) =< aux(889)
it(323) =< aux(884)
it(324) =< aux(884)
it(325) =< aux(884)
it(326) =< aux(884)

  with precondition: [A=F,A>=2,C>=0,E>=0,H>=0,D+1>=A,G+1>=A,B>=G,A+G>=B+1] 

* Chain [322]: 3
  with precondition: [A=1,B=0,F=1,G=0,C>=0,D>=0,E>=0,H>=0] 


Closed-form bounds of size(A,B,C): 
-------------------------------------
* Chain [[320],321] with precondition: [A=C+1,A>=2,B+1>=A] 
    - Upper bound: 6*B+3 
    - Complexity: n 
* Chain [321] with precondition: [A=1,B=0,C=0] 
    - Upper bound: 3 
    - Complexity: constant 

### Maximum cost of size(A,B,C): 6*B+3 
Asymptotic class: n 

Closed-form bounds of check_lists(A,B,C,D,E): 
-------------------------------------
* Chain [[115],117] with precondition: [D=0,E=1,A=B+1,A>=2,C>=0] 
    - Upper bound: 10*A+3 
    - Complexity: n 
* Chain [[115],116] with precondition: [D=0,E=0,A>=3,B>=3,C>=0] 
    - Upper bound: 10*A+6*B+10 
    - Complexity: n 
* Chain [[114],117] with precondition: [E=1,A>=2,C>=0,D>=1,B+3>=2*A+D] 
    - Upper bound: 10*A+6*B+3 
    - Complexity: n 
* Chain [[114],116] with precondition: [E=0,A>=3,C>=0,D>=1,B>=2*D+3] 
    - Upper bound: 10*A+12*B-6*D+10 
    - Complexity: n 
* Chain [117] with precondition: [A=1,B=0,E=1,C>=0,D>=0] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [116] with precondition: [E=0,A>=2,C>=0,D>=0,B>=D+2] 
    - Upper bound: 6*B+10 
    - Complexity: n 

### Maximum cost of check_lists(A,B,C,D,E): max([6*B+7,6*B+max([7,nat(B-D)*6+7])+10*A])+3 
Asymptotic class: n 

Closed-form bounds of check_mat(A,B,C,D,E,F): 
-------------------------------------
* Chain [127] with precondition: [A=0,C=1,D=0,F=1,B>=0,E>=0] 
    - Upper bound: 10 
    - Complexity: constant 
* Chain [126] with precondition: [B=0,F=1,A+1=C,A=D,A>=1,E>=0] 
    - Upper bound: 16*C+10 
    - Complexity: n 
* Chain [125] with precondition: [F=0,A+1=C,A>=1,B>=0,E>=0,D>=A,D>=B+2] 
    - Upper bound: 26*A-6*B+24*D+37 
    - Complexity: n 
* Chain [124] with precondition: [F=0,A>=0,B>=0,E>=0,C>=A+2,D+1>=C] 
    - Upper bound: 6*C+7 
    - Complexity: n 
* Chain [123] with precondition: [F=1,A+1=C,A>=1,B>=1,E>=0,D+1>=2*A+B] 
    - Upper bound: -5*B+6*C+11*D+10 
    - Complexity: n 

### Maximum cost of check_mat(A,B,C,D,E,F): max([6*C+max([10*C+3,6*D+3+nat(-B/2+D/2)*10]),26*A+18*D+27+nat(-B+D)*6+3])+7 
Asymptotic class: n 

Closed-form bounds of check_matrix(A,B,C,D,E): 
-------------------------------------
* Chain [131] with precondition: [A=1,B=0,D=1,E=1,C>=0] 
    - Upper bound: 13 
    - Complexity: constant 
* Chain [130] with precondition: [D=1,E=0,A>=2,C>=0,B+1>=A] 
    - Upper bound: 32*A+24*B+20 
    - Complexity: n 
* Chain [129] with precondition: [D=1,E=1,A=B+1,A>=2,C+1>=A] 
    - Upper bound: 16*A+13 
    - Complexity: n 
* Chain [128] with precondition: [D=1,E=1,A>=2,B+2>=2*A,C>=A] 
    - Upper bound: 6*A+11*B+13 
    - Complexity: n 

### Maximum cost of check_matrix(A,B,C,D,E): 32*A+24*B+20 
Asymptotic class: n 

Closed-form bounds of construct_matrix(A,B,C,D,E,F,G,H,I): 
-------------------------------------
* Chain [169] with precondition: [A=0,C=1,D=0,F=1,G=0,I=1,B+E=H,B>=0,E>=0] 
    - Upper bound: 14 
    - Complexity: constant 
* Chain [168] with precondition: [B=0,I=1,A+1=C,A=D,A+1=F,A=G,A+E=H,A>=1,E>=0] 
    - Upper bound: 16*D+30 
    - Complexity: n 
* Chain [167] with precondition: [F=1,G=0,I=1,A+1=C,A>=1,B>=0,E>=0,H>=0,D>=A,D>=B+2] 
    - Upper bound: 26*A-6*B+24*D+45 
    - Complexity: n 
* Chain [166] with precondition: [F=1,G=0,I=1,A>=0,B>=0,E>=0,H>=0,C>=A+2,D+1>=C] 
    - Upper bound: 6*C+15 
    - Complexity: n 
* Chain [165] with precondition: [I=1,A+1=C,A+1=F,D=G,A+B+E=H,A>=1,B>=1,E>=0,D+1>=2*A+B] 
    - Upper bound: 6*A-5*B+11*D+20 
    - Complexity: n 

### Maximum cost of construct_matrix(A,B,C,D,E,F,G,H,I): max([16*D+16,6*A+6*D+6+max([nat(-B/2+D/2)*10,20*A+12*D+25+nat(-B+D)*6])])+14 
Asymptotic class: n 

Closed-form bounds of get_elemL(A,B,C,D,E,F): 
-------------------------------------
* Chain [[275],276] with precondition: [D>=1,E>=1,F>=0,A>=D+2,C>=F,B>=D+E] 
    - Upper bound: 8*D+5 
    - Complexity: n 
* Chain [276] with precondition: [D=0,A>=2,E>=1,F>=0,B>=E,C>=F] 
    - Upper bound: 5 
    - Complexity: constant 

### Maximum cost of get_elemL(A,B,C,D,E,F): 8*D+5 
Asymptotic class: n 

Closed-form bounds of get_elemMat(A,B,C,D,E,F,G): 
-------------------------------------
* Chain [286] with precondition: [D=1,E=0,F=0,A>=2,B>=2,C>=0,G>=0] 
    - Upper bound: 14 
    - Complexity: constant 
* Chain [285] with precondition: [D=1,E=0,A>=2,C>=0,F>=1,G>=0,B>=F+2] 
    - Upper bound: 8*F+14 
    - Complexity: n 
* Chain [284] with precondition: [D=1,F=0,C>=0,E>=1,G>=0,A>=E+2,B>=E+2] 
    - Upper bound: 8*E+14 
    - Complexity: n 
* Chain [283] with precondition: [D=1,C>=0,E>=1,F>=1,G>=0,A>=E+2,B>=E+F+2] 
    - Upper bound: 8*E+8*F+14 
    - Complexity: n 

### Maximum cost of get_elemMat(A,B,C,D,E,F,G): 8*E+8*F+14 
Asymptotic class: n 

Closed-form bounds of op(A,B,C,D): 
-------------------------------------
* Chain [176] with precondition: [A=0,B=C+D,C>=0,B>=C] 
    - Upper bound: 4 
    - Complexity: constant 
* Chain [175] with precondition: [B+C=D,A>=1,B>=0,C>=0] 
    - Upper bound: 4 
    - Complexity: constant 

### Maximum cost of op(A,B,C,D): 4 
Asymptotic class: constant 

Closed-form bounds of rec_list(A,B,C,D,E,F,G): 
-------------------------------------
* Chain [[180],178] with precondition: [E=0,A=F,A>=2,B>=0,D>=0,G>=0,C>=A] 
    - Upper bound: 13*A+3 
    - Complexity: n 
* Chain [[180],177] with precondition: [E=0,C=F,B>=0,C>=2,D>=0,G>=0,A>=C+1] 
    - Upper bound: 13*C+6 
    - Complexity: n 
* Chain [[179],178] with precondition: [A=F,A>=2,B>=0,D>=0,E>=1,G>=0,C>=A] 
    - Upper bound: 13*A+3 
    - Complexity: n 
* Chain [[179],177] with precondition: [C=F,B>=0,C>=2,D>=0,E>=1,G>=0,A>=C+1] 
    - Upper bound: 13*C+6 
    - Complexity: n 
* Chain [178] with precondition: [A=1,F=1,B>=0,C>=0,D>=0,E>=0,G>=0] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [177] with precondition: [C=1,F=1,A>=2,B>=0,D>=0,E>=0,G>=0] 
    - Upper bound: 6 
    - Complexity: constant 

### Maximum cost of rec_list(A,B,C,D,E,F,G): max([13*C+3,13*A])+3 
Asymptotic class: n 
 * Joined equivalent variables [aux(890),aux(111),aux(115)] into aux(890)

Closed-form bounds of rec_mat(A,B,C,D,E,F,G,H,I,J): 
-------------------------------------
* Chain [[183,184,185,186,187,188],182] with precondition: [A=H,A>=2,C>=0,F>=0,G>=0,J>=0,D>=A,I+1>=A,B>=I,E>=I] 
    - Upper bound: 81*A+52*B+3 
    - Complexity: n 
* Chain [[183,184,185,186,187,188],181] with precondition: [D=H,C>=0,D>=2,F>=0,G>=0,J>=0,A>=D+1,I+1>=D,B>=I+1,E>=I] 
    - Upper bound: 81*A+52*B+6 
    - Complexity: n 
* Chain [182] with precondition: [A=1,B=0,H=1,I=0,C>=0,D>=0,E>=0,F>=0,G>=0,J>=0] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [181] with precondition: [D=1,E=0,H=1,I=0,A>=2,B>=1,C>=0,F>=0,G>=0,J>=0] 
    - Upper bound: 6 
    - Complexity: constant 

### Maximum cost of rec_mat(A,B,C,D,E,F,G,H,I,J): 81*A+52*B+6 
Asymptotic class: n 

Closed-form bounds of check_sanity(A,B,C,D,E,F,G,H,I): 
-------------------------------------
* Chain [153] with precondition: [D=1,H=1,I=0,A>=2,C>=0,E>=2,G>=0,B+1>=A,F+1>=E] 
    - Upper bound: 1142*A+1195*B+1014*E+1323*F+723 
    - Complexity: n 
* Chain [152] with precondition: [D=1,H=1,I=1,A=B+1,E=F+1,A>=2,E>=2,C+1>=A,G+1>=E] 
    - Upper bound: 16*A+16*F+53 
    - Complexity: n 
* Chain [151] with precondition: [D=1,H=1,I=1,A=B+1,A>=2,E>=2,F+2>=2*E,C+1>=A,G>=E] 
    - Upper bound: 16*B+6*E+11*F+53 
    - Complexity: n 
* Chain [150] with precondition: [D=1,H=1,I=1,E=F+1,A>=2,E>=2,B+2>=2*A,C>=A,G+1>=E] 
    - Upper bound: 6*A+11*B+16*F+53 
    - Complexity: n 
* Chain [149] with precondition: [D=1,H=1,I=1,A>=2,E>=2,B+2>=2*A,F+2>=2*E,C>=A,G>=E] 
    - Upper bound: 6*A+11*B+6*E+11*F+37 
    - Complexity: n 

### Maximum cost of check_sanity(A,B,C,D,E,F,G,H,I): 1142*A+1195*B+1014*E+1323*F+723 
Asymptotic class: n 

Closed-form bounds of plus(A,B,C,D,E,F,G,H,I,J,K,L): 
-------------------------------------
* Chain [253] with precondition: [D=1,H=1,I=1,J=0,L=1,A>=2,C>=0,E>=2,G>=0,K>=0,B+1>=A,F+1>=E] 
    - Upper bound: 1848*A+1473*B+1058*E+1361*F+778 
    - Complexity: n 
* Chain [252] with precondition: [D=1,H=1,I=1,J=0,L=1,A=B+1,E=F+1,E>=2,K>=0,C+1>=A,A>=E+1,G+1>=E] 
    - Upper bound: 306*A+48*F+126 
    - Complexity: n 
* Chain [251] with precondition: [D=1,H=1,I=1,J=0,L=1,A=B+1,A>=2,K>=0,F+2>=2*E,C+1>=A,E>=A,G>=E] 
    - Upper bound: 338*A+6*E+11*F+75 
    - Complexity: n 
* Chain [250] with precondition: [D=1,H=1,I=1,J=0,L=1,A=B+1,E>=2,K>=0,F+2>=2*E,C+1>=A,A>=E+1,G>=E] 
    - Upper bound: 306*A+38*E+11*F+78 
    - Complexity: n 
* Chain [249] with precondition: [D=1,H=1,I=1,J=0,L=1,E=F+1,E>=2,K>=0,B+2>=2*A,C>=A,A>=E+1,G+1>=E] 
    - Upper bound: 168*A+139*B+48*F+132 
    - Complexity: n 
* Chain [248] with precondition: [D=1,H=1,I=1,J=0,L=1,E=F+1,A>=2,K>=0,B+2>=2*A,C>=A,E>=A,G+1>=E] 
    - Upper bound: 200*A+139*B+16*F+97 
    - Complexity: n 
* Chain [247] with precondition: [D=1,H=1,L=1,A=B+1,E=F+1,A=I,A=J+1,A>=2,C+1>=A,E>=A,K+1>=A,G+1>=E] 
    - Upper bound: 165*A+16*F+80 
    - Complexity: n 
* Chain [246] with precondition: [D=1,H=1,L=1,A=B+1,E=F+1,E=I,E=J+1,E>=2,C+1>=A,A>=E+1,G+1>=E,K+1>=E] 
    - Upper bound: 149*A+32*F+99 
    - Complexity: n 
* Chain [245] with precondition: [D=1,H=1,L=1,A=B+1,A=I,A=J+1,A>=2,F+2>=2*E,C+1>=A,E>=A,K+1>=A,G>=E] 
    - Upper bound: 165*A+6*E+11*F+64 
    - Complexity: n 
* Chain [244] with precondition: [D=1,H=1,L=1,A=B+1,E=I,E=J+1,E>=2,F+2>=2*E,C+1>=A,A>=E+1,G>=E,K+1>=E] 
    - Upper bound: 149*A+22*E+11*F+67 
    - Complexity: n 
* Chain [243] with precondition: [D=1,H=1,L=1,A=B+1,E=I,E>=2,J+2>=2*E,C+1>=A,G>=E,K>=E,A>=J+2,F>=J] 
    - Upper bound: 160*A+12*E+11*F+67 
    - Complexity: n 
* Chain [242] with precondition: [D=1,H=1,L=1,E=F+1,A=I,A=J+1,A>=2,B+2>=2*A,C>=A,E>=A,K+1>=A,G+1>=E] 
    - Upper bound: 103*A+63*B+16*F+80 
    - Complexity: n 
* Chain [241] with precondition: [D=1,H=1,L=1,E=F+1,A=I,A>=2,J+2>=2*A,C>=A,K>=A,G+1>=E,B>=J,E>=J+1] 
    - Upper bound: 93*A+74*B+16*F+80 
    - Complexity: n 
* Chain [240] with precondition: [D=1,H=1,L=1,E=F+1,E=I,E=J+1,E>=2,B+2>=2*A,C>=A,A>=E+1,G+1>=E,K+1>=E] 
    - Upper bound: 87*A+63*B+32*F+99 
    - Complexity: n 
* Chain [239] with precondition: [D=1,H=1,L=1,A=I,A=J+1,A>=2,B+2>=2*A,F+2>=2*E,C>=A,E>=A,K+1>=A,G>=E] 
    - Upper bound: 103*A+63*B+6*E+11*F+64 
    - Complexity: n 
* Chain [238] with precondition: [D=1,H=1,L=1,A=I,A>=2,J+2>=2*A,F+2>=2*E,C>=A,E>=A,K>=A,G>=E,B>=J,F>=J] 
    - Upper bound: 93*A+74*B+6*E+11*F+64 
    - Complexity: n 
* Chain [237] with precondition: [D=1,H=1,L=1,E=I,E=J+1,E>=2,B+2>=2*A,F+2>=2*E,C>=A,A>=E+1,G>=E,K+1>=E] 
    - Upper bound: 87*A+63*B+22*E+11*F+67 
    - Complexity: n 
* Chain [236] with precondition: [D=1,H=1,L=1,E=I,E>=2,B+2>=2*A,J+2>=2*E,C>=A,A>=E+1,G>=E,K>=E,B>=J+1,F>=J] 
    - Upper bound: 87*A+74*B+12*E+11*F+67 
    - Complexity: n 

### Maximum cost of plus(A,B,C,D,E,F,G,H,I,J,K,L): 87*A+64+max([6*A+max([10*A+max([46*A+max([max([32*F+32,22*E+11*F])+3,6*A+max([5*A+12*E+11*F+3,10*A+max([1683*A+1473*B+1058*E+1361*F+714,max([16*F+16,6*E+11*F])])])]),63*B+max([16*F+16,6*E+11*F])]),74*B+max([16*F+16,6*E+11*F])]),63*B+3+max([32*F+32,12*E+11*F+max([11*B,10*E])])]) 
Asymptotic class: n 

Closed-form bounds of minus(A,B,C,D,E,F,G,H,I,J,K,L): 
-------------------------------------
* Chain [190] with precondition: [D=1,H=1,I=1,J=0,L=1,A>=2,C>=0,E>=2,G>=0,K>=0,B+1>=A,F+1>=E] 
    - Upper bound: 1142*A+1195*B+1014*E+1323*F+731 
    - Complexity: n 

### Maximum cost of minus(A,B,C,D,E,F,G,H,I,J,K,L): 1142*A+1195*B+1014*E+1323*F+731 
Asymptotic class: n 

Closed-form bounds of append(A,B,C,D,E): 
-------------------------------------
* Chain [[94],95] with precondition: [A+1=D,A>=2,B>=0,C>=0,E>=0] 
    - Upper bound: 5*A+9 
    - Complexity: n 
* Chain [95] with precondition: [A=1,D=2,B>=0,C>=0,E>=0] 
    - Upper bound: 4 
    - Complexity: constant 

### Maximum cost of append(A,B,C,D,E): 5*A+9 
Asymptotic class: n 
 * Joined equivalent variables [aux(891),aux(1),aux(9)] into aux(891)
 * Joined equivalent variables [aux(892),aux(6),aux(13)] into aux(892)

Closed-form bounds of append_row(A,B,C,D,E,F,G,H): 
-------------------------------------
* Chain [[99],96] with precondition: [A=1,B=0,D=F,2*D=G+2,C>=0,D>=2,E>=0,H>=0] 
    - Upper bound: 10*D+2 
    - Complexity: n 
* Chain [[97,98],[99],96] with precondition: [A+G+1=2*D+B,A+G+1=2*F+B,A>=2,C>=0,E>=0,H>=0,B+1>=A,G>=A+B+1] 
    - Upper bound: 8*A+23/2*B+10*D+2 
    - Complexity: n 
* Chain [[97,98],96] with precondition: [A=F,G+1=B+D,C>=0,E>=0,H>=0,G>=B+1,2*B>=G,A+B>=G+1] 
    - Upper bound: 18*A+23/2*B+2 
    - Complexity: n 
* Chain [96] with precondition: [D=1,A=F,B=G,C=H,A>=0,B>=0,C>=0,E>=0] 
    - Upper bound: 2 
    - Complexity: constant 

### Maximum cost of append_row(A,B,C,D,E,F,G,H): max([10*D,18*A+23/2*B+nat(-A+D)*10])+2 
Asymptotic class: n 
 * Joined equivalent variables [aux(893),aux(677)] into aux(893)
 * Joined equivalent variables [aux(894),aux(646),aux(665),aux(667),aux(679)] into aux(894)
 * Joined equivalent variables [aux(895),aux(656),aux(661)] into aux(895)
 * Joined equivalent variables [aux(896),aux(640),aux(647),aux(650),aux(662)] into aux(896)
 * Joined equivalent variables [aux(897),aux(671),aux(672)] into aux(897)

Closed-form bounds of transpose_helper(A,B,C,D,E,F,G,H,I): 
-------------------------------------
* Chain [[295,296,297,298],299] with precondition: [A+D+H=B+E+G+1,A>=2,C>=0,D>=0,E>=0,F>=0,I>=0,G>=D,B+D+1>=A+G] 
    - Upper bound: (15*B+5*D+5*E)* (2*B)+2+28*B+nat(-D+2)*7+ (52*B+52*D)+ (-10*A+10*B+10)+ (-52*A+52*B+52)+B/3* (15*B+5*D+5*E+5)+nat(-A+B-D+2)*10+7/3*B 
    - Complexity: n^2 
* Chain [299] with precondition: [A=1,B=0,D=G,E=H,F=I,C>=0,D>=0,E>=0,F>=0] 
    - Upper bound: 2 
    - Complexity: constant 

### Maximum cost of transpose_helper(A,B,C,D,E,F,G,H,I): (15*B+5*D+5*E)* (2*B)+28*B+nat(-D+2)*7+ (52*B+52*D)+ (-10*A+10*B+10)+ (-52*A+52*B+52)+B/3* (15*B+5*D+5*E+5)+nat(-A+B-D+2)*10+7/3*B+2 
Asymptotic class: n^2 

Closed-form bounds of transpose(A,B,C,D,E,F): 
-------------------------------------
* Chain [301] with precondition: [A=1,B=0,D=1,E=0,C>=0,F>=0] 
    - Upper bound: 4 
    - Complexity: constant 
* Chain [300] with precondition: [B+D=A+E,A>=2,C>=0,D>=1,F>=0,B+2>=A+D] 
    - Upper bound: 15/2+ (-A+3*B+3)* (15*B+5)+B/3* (15*B+10)+ (-20*A+20*B+20)+ (-26*A+52*B+52)+ (-7*A+21*B+21)+ (-21*A+28*B+21)+ (-52*A+52*B+52)+7/3*B 
    - Complexity: n^2 

### Maximum cost of transpose(A,B,C,D,E,F): 7/2+ (-A+3*B+3)* (15*B+5)+B/3* (15*B+10)+ (-20*A+20*B+20)+ (-26*A+52*B+52)+ (-7*A+21*B+21)+ (-21*A+28*B+21)+ (-52*A+52*B+52)+7/3*B+4 
Asymptotic class: n^2 

Closed-form bounds of reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O): 
-------------------------------------
* Chain [[100],101] with precondition: [A=D,A+F=K+1,B+G=L,A+I=N+1,E+J=O,A>=2,C>=0,F>=1,G>=0,H>=0,I>=1,J>=0,M>=0,B+1>=A,E+1>=A,C+H>=M] 
    - Upper bound: 5*A+2 
    - Complexity: n 
* Chain [101] with precondition: [A=1,B=0,D=1,E=0,F=K,G=L,H=M,I=N,J=O,C>=0,F>=0,G>=0,H>=0,I>=0,J>=0] 
    - Upper bound: 2 
    - Complexity: constant 

### Maximum cost of reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O): 5*A+2 
Asymptotic class: n 

Closed-form bounds of reverseL(A,B,C,D,E,F,G,H,I,J): 
-------------------------------------
* Chain [103] with precondition: [A=1,B=0,D=1,E=0,F=1,G=0,I=1,J=0,C>=0,H>=0] 
    - Upper bound: 4 
    - Complexity: constant 
* Chain [102] with precondition: [A=D,A=F,B=G,A=I,E=J,A>=2,C>=0,H>=0,B+1>=A,E+1>=A] 
    - Upper bound: 5*D+4 
    - Complexity: n 

### Maximum cost of reverseL(A,B,C,D,E,F,G,H,I,J): 5*D+4 
Asymptotic class: n 

Closed-form bounds of reverse_rows_helper(A,B,C,D,E,F,G,H,I): 
-------------------------------------
* Chain [[104],105] with precondition: [A+D=G+1,B+E=H,A>=2,C>=0,D>=1,E>=0,F>=0,I>=0,B+1>=A,B+E+2>=A+D] 
    - Upper bound: 10*B+2+ (A+D)* (5*B) 
    - Complexity: n^2 
* Chain [105] with precondition: [A=1,B=0,D=G,E=H,F=I,C>=0,D>=0,E>=0,F>=0] 
    - Upper bound: 2 
    - Complexity: constant 

### Maximum cost of reverse_rows_helper(A,B,C,D,E,F,G,H,I): (A+D)* (5*B)+10*B+2 
Asymptotic class: n^2 

Closed-form bounds of reverse_rows(A,B,C,D,E,F): 
-------------------------------------
* Chain [107] with precondition: [A=1,B=0,D=1,E=0,C>=0,F>=0] 
    - Upper bound: 9 
    - Complexity: constant 
* Chain [106] with precondition: [A=D,B=E,A>=2,C>=0,F>=0,B+1>=A] 
    - Upper bound: 15*A+9+ (5*A+5)*A 
    - Complexity: n^2 

### Maximum cost of reverse_rows(A,B,C,D,E,F): (5*A+5)*A+15*A+9 
Asymptotic class: n^2 
 * Joined equivalent variables [it(110),it(111)] into it(110)

Closed-form bounds of append_start(A,B,C,D,E,F,G,H): 
-------------------------------------
* Chain [[111],109] with precondition: [A=1,B=0,D=F,2*D=G+2,C>=0,D>=2,E>=0,H>=0] 
    - Upper bound: 10*D+12 
    - Complexity: n 
* Chain [[110],[111],109] with precondition: [A+G+1=2*D+B,A+G+1=2*F+B,A>=2,C>=0,E>=0,H>=0,B+1>=A,G>=A+B+1] 
    - Upper bound: 19*D+12 
    - Complexity: n 
* Chain [[110],109] with precondition: [A=D,A=F,A+B=G+1,A>=2,C>=0,E>=0,H>=0,G+2>=2*A] 
    - Upper bound: 9*D+12 
    - Complexity: n 
* Chain [[110],108] with precondition: [A=F,G+1=B+D,C>=0,E>=0,H>=0,B+1>=A,G>=B+1,A+B>=G+2] 
    - Upper bound: 15*B-6*D+42+ (5*B-5*D+15)* (B-D+2) 
    - Complexity: n^2 
* Chain [109] with precondition: [A=1,B=0,D=1,F=1,G=0,C>=0,E>=0,H>=0] 
    - Upper bound: 12 
    - Complexity: constant 
* Chain [108] with precondition: [D=1,A=F,B=G,A>=2,C>=0,E>=0,H>=0,B+1>=A] 
    - Upper bound: 15*A+12+ (5*A+5)*A 
    - Complexity: n^2 

### Maximum cost of append_start(A,B,C,D,E,F,G,H): max([9*D+max([10*D,nat(B-D+3)*5*nat(B-D+2)+nat(B-D+2)*15]), (5*A+5)*A+15*A])+12 
Asymptotic class: n^2 
 * Joined equivalent variables [aux(899),aux(814),aux(847),aux(848),aux(850)] into aux(899)
 * Joined equivalent variables [aux(900),aux(813),aux(816),aux(817),aux(837),aux(844)] into aux(900)
 * Joined equivalent variables [aux(901),aux(839)] into aux(901)
 * Joined equivalent variables [aux(833),aux(834)] into aux(833)
 * Joined equivalent variables [it(309),it(310)] into it(309)
 * Joined equivalent variables [aux(823),aux(826)] into aux(823)
 * Joined equivalent variables [aux(830),aux(831)] into aux(830)
 * Joined equivalent variables [aux(904),aux(815)] into aux(904)
 * Joined equivalent variables [aux(905),aux(814),aux(825),aux(835),aux(836)] into aux(905)
 * Joined equivalent variables [aux(906),aux(813),aux(817),aux(823),aux(837)] into aux(906)
 * Joined equivalent variables [aux(907),aux(831),aux(832)] into aux(907)
 * Joined equivalent variables [it(309),it(310)] into it(309)
 * Joined equivalent variables [aux(908),aux(840)] into aux(908)
 * Joined equivalent variables [aux(909),aux(825),aux(842),aux(845)] into aux(909)
 * Joined equivalent variables [aux(910),aux(817),aux(844)] into aux(910)
 * Joined equivalent variables [aux(911),aux(841)] into aux(911)
 * Joined equivalent variables [aux(912),aux(830),aux(831)] into aux(912)
 * Joined equivalent variables [aux(913),aux(833),aux(834)] into aux(913)
 * Joined equivalent variables [aux(908),aux(827)] into aux(908)
 * Joined equivalent variables [aux(813),aux(823),aux(826)] into aux(813)

Closed-form bounds of new_transpose_helper(A,B,C,D,E,F,G,H,I): 
-------------------------------------
* Chain [[313],314] with precondition: [D=1,E=0,G=1,H=0,A=B+1,A>=2,C>=0,F>=0,I>=0] 
    - Upper bound: 17*A+2 
    - Complexity: n 
* Chain [[313],312,[308,309,310,311],314] with precondition: [D=1,E=0,A+H=B+G,A>=4,C>=0,F>=0,G>=2,I>=0,B+2>=A+G] 
    - Upper bound: 34*A+27*B+19+20*B*A+5*B*B*A+5*B* (2*B)* (2*B)+122*B+30*B* (2*B)+30*B 
    - Complexity: n^3 
* Chain [[313],312,314] with precondition: [D=1,E=0,H+2*A=2*B+2,A+G=B+2,A>=3,C>=0,F>=0,I>=0,B>=A] 
    - Upper bound: 17*A+10*B+19 
    - Complexity: n 
* Chain [[308,309,310,311],314] with precondition: [A+D+H=B+E+G+1,A>=2,C>=0,D>=2,F>=0,I>=0,E+1>=D,G>=D,B+D+1>=A+G] 
    - Upper bound: 17*A+86*B+2+ (20*B+20*D)*A+ (5*B+5*D)* (B+D)*A+ (5*B+5*D)* (2*B+E)* (2*B)+ (30*B+15*E)* (2*B)+ (9*A+9*B+9*D)+nat(-A+B-D+2)*10+nat(-2*A+2*B-D+4)*9+17/3*B 
    - Complexity: n^3 
* Chain [314] with precondition: [A=1,B=0,D=G,E=H,F=I,C>=0,D>=0,E>=0,F>=0] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [312,[308,309,310,311],314] with precondition: [D=1,E=0,A+H=B+G,A>=3,C>=0,F>=0,I>=0,2*B+2>=2*A+H,A+H>=B+2] 
    - Upper bound: 17*A+27*B+19+20*B*A+5*B*B*A+5*B* (2*B)* (2*B)+34*B+30*B* (2*B)+30*B+ (9*A+9*B)+ (-18*A+18*B)+ (-52*A+52*B+104) 
    - Complexity: n^3 
* Chain [312,314] with precondition: [A=2,D=1,E=0,B=G,2*B=H+2,B>=2,C>=0,F>=0,I>=0] 
    - Upper bound: 10*B+19 
    - Complexity: n 

### Maximum cost of new_transpose_helper(A,B,C,D,E,F,G,H,I): max([10*B+17,17*A+max([20*B*A+17*B+5*B*B*A+5*B* (2*B)* (2*B)+34*B+30*B* (2*B)+30*B+max([17*A+88*B,9*A+9*B+nat(-2*A+2*B)*9+ (-52*A+52*B+104)])+ (10*B+17), (20*B+20*D)*A+86*B+ (5*B+5*D)* (B+D)*A+ (5*B+5*D)* (2*B+E)* (2*B)+ (30*B+15*E)* (2*B)+ (9*A+9*B+9*D)+nat(-A+B-D+2)*10+nat(-2*A+2*B-D+4)*9+17/3*B])])+2 
Asymptotic class: n^3 

Closed-form bounds of new_transpose(A,B,C,D,E,F): 
-------------------------------------
* Chain [318] with precondition: [A=1,B=0,D=1,E=0,C>=0,F>=0] 
    - Upper bound: 14 
    - Complexity: constant 
* Chain [317] with precondition: [A=2,B=D,2*B=E+2,B>=2,C>=0,F>=0] 
    - Upper bound: 25*B+31+ (5*B+5)*B 
    - Complexity: n^2 
* Chain [316] with precondition: [D=1,E=0,A=B+1,A>=2,C>=0,F>=0] 
    - Upper bound: 17*B+31 
    - Complexity: n 
* Chain [315] with precondition: [B+D=A+E,A>=3,C>=0,D>=2,F>=0,B+2>=A+D] 
    - Upper bound: 68*A+54*B+31+40*B*A+10*B*B*A+ (-A+4*B)* (5*B* (2*B))+ (-A+2*B+2)* (5*B* (2*B))+ (-A+4*B)* (30*B)+ (-A+2*B+2)* (30*B)+ (43*A+43*B)+ (A+B+1)* (5*A+5*B)+ (-17*A+68*B)+ (-36*A+36*B)+ (-17*A+34*B+34)+ (-104*A+104*B+208)+ (-40*A+60*B+80) 
    - Complexity: n^3 

### Maximum cost of new_transpose(A,B,C,D,E,F): max([17*B+17,25*B+17+max([ (5*B+5)*B,68*A+29*B+40*B*A+10*B*B*A+5*B* (2*B)*nat(-A+4*B)+ (-A+2*B+2)* (5*B* (2*B))+30*B*nat(-A+4*B)+ (-A+2*B+2)* (30*B)+ (43*A+43*B)+ (A+B+1)* (5*A+5*B)+nat(-A+4*B)*17+nat(-2*A+2*B)*18+ (-17*A+34*B+34)+ (-104*A+104*B+208)+ (-40*A+60*B+80)])])+14 
Asymptotic class: n^3 

Closed-form bounds of prod(A,B,C,D,E): 
-------------------------------------
* Chain [[289],288] with precondition: [A>=2,B>=0,D>=0,E>=0,C>=A] 
    - Upper bound: 9*A+3 
    - Complexity: n 
* Chain [[289],287] with precondition: [B>=0,C>=2,D>=0,E>=0,A>=C+1] 
    - Upper bound: 9*C+6 
    - Complexity: n 
* Chain [288] with precondition: [A=1,E=0,B>=0,C>=0,D>=0] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [287] with precondition: [C=1,E=0,A>=2,B>=0,D>=0] 
    - Upper bound: 6 
    - Complexity: constant 

### Maximum cost of prod(A,B,C,D,E): max([9*C+3,9*A])+3 
Asymptotic class: n 

Closed-form bounds of prod_mat(A,B,C,D,E,F,G): 
-------------------------------------
* Chain [[293],294] with precondition: [A=1,C=F,B>=0,C>=2,E>=0,G>=0,D+1>=C] 
    - Upper bound: 9*C+3 
    - Complexity: n 
* Chain [[290,291,292],294] with precondition: [C=F,A>=2,B>=0,C>=2,E>=0,G>=0,D+1>=C] 
    - Upper bound: 24*C+36*D+3+nat(-A-2*C+2*D+4)*9 
    - Complexity: n 
* Chain [294] with precondition: [C=1,D=0,F=1,A>=0,B>=0,E>=0,G>=0] 
    - Upper bound: 3 
    - Complexity: constant 

### Maximum cost of prod_mat(A,B,C,D,E,F,G): 15*C+36*D+nat(-A-2*C+2*D+4)*9+9*C+3 
Asymptotic class: n 

Closed-form bounds of mat_mult(A,B,C,D,E,F,G,H,I): 
-------------------------------------
* Chain [[305],307] with precondition: [D=1,E=0,A=G,A=H+1,A>=2,C>=0,F>=0,I>=0,B+1>=A] 
    - Upper bound: 16*B+10 
    - Complexity: n 
* Chain [[303],306] with precondition: [D=E+1,A=G,A=H+1,A>=2,C>=0,D>=2,F>=0,I>=0,B+1>=A] 
    - Upper bound: 16*A+10+28/3*A*D+7*D+5*D*A*D+D/3* (15*D)+7/3*D 
    - Complexity: n^3 
* Chain [[302,304],306] with precondition: [A=G,A>=2,C>=0,D>=2,F>=0,I>=0,H+2>=2*A,B+1>=A,E>=D] 
    - Upper bound: 5287/6*A+27/2+ (-D+3*E+3)* (42*A)+ (-3*D+4*E+3)* (7*A)+ (-2*D+2*E+2)* (9*A)+1918/3*E*A+ (-D+3*E+3)* (15*E*A)+55*E*E*A+ (-D+3*E+3)* (15*E+5)+E/3* (15*E+10)+ (-20*D+20*E+20)+ (-26*D+52*E+52)+ (-7*D+21*E+21)+ (-21*D+28*E+21)+ (-52*D+52*E+52)+ (7/2*B+7/2)+7/3*E 
    - Complexity: n^3 
* Chain [307] with precondition: [A=1,B=0,D=1,E=0,G=1,H=0,C>=0,F>=0,I>=0] 
    - Upper bound: 10 
    - Complexity: constant 
* Chain [306] with precondition: [A=1,B=0,G=1,H=0,C>=0,D>=2,F>=0,I>=0,E+1>=D] 
    - Upper bound: 27/2+ (-D+3*E+3)* (15*E+5)+E/3* (15*E+10)+ (-20*D+20*E+20)+ (-26*D+52*E+52)+ (-7*D+21*E+21)+ (-21*D+28*E+21)+ (-52*D+52*E+52)+7/3*E 
    - Complexity: n^2 

### Maximum cost of mat_mult(A,B,C,D,E,F,G,H,I): max([max([16*B,7/2+ (-D+3*E+3)* (15*E+5)+E/3* (15*E+10)+ (-20*D+20*E+20)+ (-26*D+52*E+52)+ (-7*D+21*E+21)+ (-21*D+28*E+21)+ (-52*D+52*E+52)+7/3*E]),16*A+max([28/3*A*D+7*D+5*D*A*D+D/3* (15*D)+7/3*D,5191/6*A+7/2+ (-D+3*E+3)* (42*A)+ (-3*D+4*E+3)* (7*A)+ (-2*D+2*E+2)* (9*A)+1918/3*E*A+ (-D+3*E+3)* (15*E*A)+55*E*E*A+ (-D+3*E+3)* (15*E+5)+E/3* (15*E+10)+ (-20*D+20*E+20)+ (-26*D+52*E+52)+ (-7*D+21*E+21)+ (-21*D+28*E+21)+ (-52*D+52*E+52)+ (7/2*B+7/2)+7/3*E])])+10 
Asymptotic class: n^3 

Closed-form bounds of lineMult(A,B,C,D,E,F,G): 
-------------------------------------
* Chain [[156],154] with precondition: [D=1,B=F,A>=0,B>=2,C>=0,E>=0,G>=0] 
    - Upper bound: 9*B+3 
    - Complexity: n 
* Chain [[155],[156],154] with precondition: [B=F,A>=0,C>=0,D>=2,E>=0,G>=0,B>=D+1] 
    - Upper bound: 9*B+D+12 
    - Complexity: n 
* Chain [[155],154] with precondition: [B=F,A>=0,B>=2,C>=0,E>=0,G>=0,D>=B] 
    - Upper bound: 10*B+3 
    - Complexity: n 
* Chain [154] with precondition: [B=1,F=1,A>=0,C>=0,D>=0,E>=0,G>=0] 
    - Upper bound: 3 
    - Complexity: constant 

### Maximum cost of lineMult(A,B,C,D,E,F,G): max([10*B,nat(B-D+1)*9+10*D])+3 
Asymptotic class: n 
 * Joined equivalent variables [aux(914),aux(82)] into aux(914)

Closed-form bounds of computeLine(A,B,C,D,E,F,G,H,I): 
-------------------------------------
* Chain [[159,160,161,162],158] with precondition: [A>=2,B>=0,E>=0,F>=0,G>=0,H>=1,I>=0,C>=A,D+2>=A+H] 
    - Upper bound: 42*A+109/2*D+73/2*F+2 
    - Complexity: n 
* Chain [[159,160,161,162],157] with precondition: [H=1,B>=0,C>=2,E>=0,F>=0,G>=0,I>=0,A>=C+1,D+1>=C] 
    - Upper bound: 42*A+109/2*D+73/2*F+6 
    - Complexity: n 
* Chain [158] with precondition: [A=1,F=H,G=I,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [157] with precondition: [C=1,D=0,H=1,A>=2,B>=0,E>=0,F>=0,G>=0,I>=0] 
    - Upper bound: 6 
    - Complexity: constant 

### Maximum cost of computeLine(A,B,C,D,E,F,G,H,I): 42*A+109/2*D+73/2*F+6 
Asymptotic class: n 

Closed-form bounds of mat_mult_jan(A,B,C,D,E,F,G,H,I): 
-------------------------------------
* Chain [[191,192,193,194],195] with precondition: [A=G,A>=2,C>=0,D>=0,E>=0,F>=0,I>=0,B+1>=A,H+1>=A] 
    - Upper bound: 58*A+3+58*E*A+ (-2*A+2*B+2)* (18*E)+ (-140*A+140*B+140)+ (-66*A+66*B+66)+ (-20*A+20*B+20*E+60)* (-2*A+2*B+2) 
    - Complexity: n^2 
* Chain [195] with precondition: [A=1,B=0,G=1,H=0,C>=0,D>=0,E>=0,F>=0,I>=0] 
    - Upper bound: 3 
    - Complexity: constant 

### Maximum cost of mat_mult_jan(A,B,C,D,E,F,G,H,I): 58*E*A+58*A+ (-2*A+2*B+2)* (18*E)+ (-140*A+140*B+140)+ (-66*A+66*B+66)+ (-20*A+20*B+20*E+60)* (-2*A+2*B+2)+3 
Asymptotic class: n^2 

Closed-form bounds of check_mult_sanity(A,B,C,D,E,F,G,H,I): 
-------------------------------------
* Chain [142] with precondition: [D=1,H=1,I=0,A>=2,C>=0,E>=2,G>=0,B+1>=A,F+1>=E] 
    - Upper bound: 254*A+279*B+330*E+325*F+161 
    - Complexity: n 
* Chain [141] with precondition: [D=1,H=1,I=0,E=F+1,A>=2,C>=0,E>=2,B+1>=A,G+1>=E] 
    - Upper bound: 108*A+94*B+80*F+122 
    - Complexity: n 
* Chain [140] with precondition: [D=1,H=1,I=1,A=B+1,E=F+1,A>=2,E>=2,C+1>=A,G+1>=E] 
    - Upper bound: 16*A+16*F+51 
    - Complexity: n 
* Chain [139] with precondition: [D=1,H=1,I=1,A=B+1,A>=2,E>=2,F+2>=2*E,C+1>=A,G>=E] 
    - Upper bound: 16*B+6*E+11*F+51 
    - Complexity: n 
* Chain [138] with precondition: [D=1,H=1,I=1,E=F+1,A>=2,E>=2,B+2>=2*A,C>=A,G+1>=E] 
    - Upper bound: 6*A+11*B+16*F+51 
    - Complexity: n 
* Chain [137] with precondition: [D=1,H=1,I=1,A>=2,E>=2,B+2>=2*A,F+2>=2*E,C>=A,G>=E] 
    - Upper bound: 6*A+11*B+6*E+11*F+35 
    - Complexity: n 

### Maximum cost of check_mult_sanity(A,B,C,D,E,F,G,H,I): 254*A+279*B+330*E+325*F+161 
Asymptotic class: n 

Closed-form bounds of mult(A,B,C,D,E,F,G,H,I,J,K,L): 
-------------------------------------
* Chain [216] with precondition: [D=1,H=1,I=1,J=0,L=1,A>=2,C>=0,E>=2,G>=0,K>=0,B+1>=A,F+1>=E] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [215] with precondition: [D=1,H=1,I=1,J=0,L=1,A=B+1,A>=2,E>=2,K>=0,F+2>=2*E,C+1>=A,G>=E] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [214] with precondition: [D=1,H=1,I=1,J=0,L=1,E=F+1,A>=2,E>=2,K>=0,B+2>=2*A,C>=A,G+1>=E] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [213] with precondition: [D=1,H=1,L=1,A=B+1,E=F+1,A=I,A=J+1,A>=2,E>=2,C+1>=A,K+1>=A,G+1>=E] 
    - Upper bound: (B+1)* (49*F)+63+ (90*B+90)+ (16*F+16) 
    - Complexity: n^2 
* Chain [212] with precondition: [D=1,H=1,L=1,A=B+1,E=F+1,A=I,A>=2,E>=2,J+2>=2*A,C>=A,K>=A,G+1>=E] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [211] with precondition: [D=1,H=1,L=1,A=B+1,A=I,A=J+1,A>=2,E>=2,F+2>=2*E,C+1>=A,K+1>=A,G>=E] 
    - Upper bound: 6*E+6*F+63+ (B+1)* (49*F)+ (90*B+90)+5*F 
    - Complexity: n^2 
* Chain [210] with precondition: [D=1,H=1,L=1,A=B+1,A=I,A>=2,E>=2,J+2>=2*A,F+2>=2*E,C>=A,K>=A,G>=E] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [209] with precondition: [D=1,H=1,L=1,E=F+1,A=I,A=J+1,A>=2,E>=2,B+2>=2*A,C>=A,K+1>=A,G+1>=E] 
    - Upper bound: 80*A+6*B+63+58*F*A+ (-2*A+2*B+2)* (18*F)+ (16*F+16)+ (-140*A+140*B+140)+ (-66*A+66*B+66)+ (-20*A+20*B+20*F+60)* (-2*A+2*B+2)+5*B 
    - Complexity: n^2 
* Chain [208] with precondition: [D=1,H=1,L=1,E=F+1,A=I,A>=2,E>=2,B+2>=2*A,J+2>=2*A,C>=A,K>=A,G+1>=E] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [207] with precondition: [D=1,H=1,L=1,A=I,A=J+1,A>=2,E>=2,B+2>=2*A,F+2>=2*E,C>=A,K+1>=A,G>=E] 
    - Upper bound: 80*A+6*B+6*E+6*F+63+58*F*A+ (-2*A+2*B+2)* (18*F)+ (-140*A+140*B+140)+ (-66*A+66*B+66)+ (-20*A+20*B+20*F+60)* (-2*A+2*B+2)+5*B+5*F 
    - Complexity: n^2 
* Chain [206] with precondition: [D=1,H=1,L=1,A=I,A>=2,E>=2,B+2>=2*A,J+2>=2*A,F+2>=2*E,C>=A,K>=A,G>=E] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of mult(A,B,C,D,E,F,G,H,I,J,K,L): inf 
Asymptotic class: infinity 
 * Joined equivalent variables [aux(460),s(4990)] into aux(460)
 * Joined equivalent variables [s(4921),s(4981)] into s(4921)

Closed-form bounds of evaluate(A,B,C,D,E,F,G,H): 
-------------------------------------
* Chain [274] with precondition: [A=1,B=0,D=1,E=1,F=0,H=1,C=G,C>=0] 
    - Upper bound: 17 
    - Complexity: constant 
* Chain [273] with precondition: [D=1,E=1,F=0,H=1,A>=2,C>=0,G>=0,B+1>=A] 
    - Upper bound: 32*A+24*B+28 
    - Complexity: n 
* Chain [272] with precondition: [D=1,H=1,A=B+1,A=E,A=F+1,C=G,A>=2,C+1>=A] 
    - Upper bound: 16*A+17 
    - Complexity: n 
* Chain [271] with precondition: [D=1,H=1,A=E,B=F,C=G,A>=2,B+2>=2*A,C>=A] 
    - Upper bound: 6*A+11*B+17 
    - Complexity: n 
* Chain [multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])] with precondition: [H=1,D>=3,E>=2,F+1>=E,G+1>=E,D+2*B+1>=2*A,D+2*C+1>=2*A,A+1>=D+E] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [multiple(270,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])] with precondition: [E=1,F=0,H=1,D>=3,G>=0,A>=D+1,D+2*B+1>=2*A,D+2*C+1>=2*A] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [multiple(269,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])] with precondition: [E=1,F=0,H=1,D>=3,G>=0,A>=D+2,D+2*B+1>=2*A,D+2*C+1>=2*A] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [multiple(268,[[multiple([254,255,256,257,258,259,260,261,262,263,264,265,266,267],[[272],[271]])],[272],[271]])] with precondition: [E=1,F=0,H=1,D>=3,G>=0,A>=D+1,D+2*B+1>=2*A,D+2*C+1>=2*A] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of evaluate(A,B,C,D,E,F,G,H): inf 
Asymptotic class: infinity 

Closed-form bounds of del(A,B,C,D,E): 
-------------------------------------
* Chain [[172],171] with precondition: [A=D,A>=2,B>=0,E>=0,C+1>=A] 
    - Upper bound: 10*A+3 
    - Complexity: n 
* Chain [[172],170] with precondition: [A=D+1,C>=1,E>=0,A>=C+2,B>=E] 
    - Upper bound: 10*C+6 
    - Complexity: n 
* Chain [171] with precondition: [A=1,D=1,B>=0,C>=0,E>=0] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [170] with precondition: [C=0,A=D+1,A>=2,E>=0,B>=E] 
    - Upper bound: 6 
    - Complexity: constant 

### Maximum cost of del(A,B,C,D,E): max([10*C+3,10*A])+3 
Asymptotic class: n 

Closed-form bounds of submat(A,B,C,D,E,F,G,H): 
-------------------------------------
* Chain [[323,324,325,326],322] with precondition: [A=F,A>=2,C>=0,E>=0,H>=0,D+1>=A,G+1>=A,B>=G,A+G>=B+1] 
    - Upper bound: 28*A+3+nat(-A+B)*10+ (-54*A+54*B+54)+17/3*B 
    - Complexity: n 
* Chain [322] with precondition: [A=1,B=0,F=1,G=0,C>=0,D>=0,E>=0,H>=0] 
    - Upper bound: 3 
    - Complexity: constant 

### Maximum cost of submat(A,B,C,D,E,F,G,H): -54*A+54*B+54+ (nat(-A+B)*10+28*A)+17/3*B+3 
Asymptotic class: n 

Closed-form bounds of remFirstRow(A,B,C,D,E,F): 
-------------------------------------
* Chain [319] with precondition: [D+1=A,C>=0,D>=1,E>=0,F>=0,B>=E+1] 
    - Upper bound: 2 
    - Complexity: constant 

### Maximum cost of remFirstRow(A,B,C,D,E,F): 2 
Asymptotic class: constant 
* Total analysis performed in 86856 ms.


Cost relation system solved by CoFloCo in 86865 ms.

Method size terminates?: YES

 - xs_1: size of xs wrt. Set<A>
 - xs_2: size of xs wrt. A
UB for size(xs_1,xs_2) = 6*xs_2+3

Method check_lists terminates?: YES

 - v_1: size of v wrt. List<List<Rat>>
 - v_2: size of v wrt. List<Rat>
 - v_3: size of v wrt. Rat
 - n_1: size of n wrt. Rat
UB for check_lists(v_1,v_2,v_3,n_1) = max([6*v_2+7,6*v_2+max([7,nat(v_2-n_1)*6+7])+10*v_1])+3

Method check_mat terminates?: YES

 - m_1: size of m wrt. Rat
 - n_1: size of n wrt. Rat
 - v_1: size of v wrt. List<List<Rat>>
 - v_2: size of v wrt. List<Rat>
 - v_3: size of v wrt. Rat
UB for check_mat(m_1,n_1,v_1,v_2,v_3) = max([6*v_1+max([10*v_1+3,6*v_2+3+nat(-n_1/2+v_2/2)*10]),26*m_1+18*v_2+27+nat(-n_1+v_2)*6+3])+7

Method check_matrix terminates?: YES

 - mat_1: size of mat wrt. List<List<Rat>>
 - mat_2: size of mat wrt. List<Rat>
 - mat_3: size of mat wrt. Rat
 - mat_4: size of mat wrt. Matrix
UB for check_matrix(mat_1,mat_2,mat_3,mat_4) = 32*mat_1+24*mat_2+20

Method construct_matrix terminates?: YES

 - m_1: size of m wrt. Rat
 - n_1: size of n wrt. Rat
 - v_1: size of v wrt. List<List<Rat>>
 - v_2: size of v wrt. List<Rat>
 - v_3: size of v wrt. Rat
UB for construct_matrix(m_1,n_1,v_1,v_2,v_3) = max([16*v_2+16,6*m_1+6*v_2+6+max([nat(-n_1/2+v_2/2)*10,20*m_1+12*v_2+25+nat(-n_1+v_2)*6])])+14

Method get_elemL terminates?: YES

 - l_1: size of l wrt. List<List<Rat>>
 - l_2: size of l wrt. List<Rat>
 - l_3: size of l wrt. Rat
 - i_1: size of i wrt. Rat
UB for get_elemL(l_1,l_2,l_3,i_1) = 8*i_1+5

Method get_elemMat terminates?: YES

 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
 - m_4: size of m wrt. Matrix
 - i_1: size of i wrt. Rat
 - j_1: size of j wrt. Rat
UB for get_elemMat(m_1,m_2,m_3,m_4,i_1,j_1) = 8*i_1+8*j_1+14

Method op terminates?: YES

 - sign_1: size of sign wrt. Rat
 - x1_1: size of x1 wrt. Rat
 - x2_1: size of x2 wrt. Rat
UB for op(sign_1,x1_1,x2_1) = 4

Method rec_list terminates?: YES

 - l1_1: size of l1 wrt. List<Rat>
 - l1_2: size of l1 wrt. Rat
 - l2_1: size of l2 wrt. List<Rat>
 - l2_2: size of l2 wrt. Rat
 - sign_1: size of sign wrt. Rat
UB for rec_list(l1_1,l1_2,l2_1,l2_2,sign_1) = max([13*l2_1+3,13*l1_1])+3

Method rec_mat terminates?: YES

 - m1_1: size of m1 wrt. List<List<Rat>>
 - m1_2: size of m1 wrt. List<Rat>
 - m1_3: size of m1 wrt. Rat
 - m2_1: size of m2 wrt. List<List<Rat>>
 - m2_2: size of m2 wrt. List<Rat>
 - m2_3: size of m2 wrt. Rat
 - sign_1: size of sign wrt. Rat
UB for rec_mat(m1_1,m1_2,m1_3,m2_1,m2_2,m2_3,sign_1) = 81*m1_1+52*m1_2+6

Method check_sanity terminates?: YES

 - m1_1: size of m1 wrt. List<List<Rat>>
 - m1_2: size of m1 wrt. List<Rat>
 - m1_3: size of m1 wrt. Rat
 - m1_4: size of m1 wrt. Matrix
 - m2_1: size of m2 wrt. List<List<Rat>>
 - m2_2: size of m2 wrt. List<Rat>
 - m2_3: size of m2 wrt. Rat
 - m2_4: size of m2 wrt. Matrix
UB for check_sanity(m1_1,m1_2,m1_3,m1_4,m2_1,m2_2,m2_3,m2_4) = 1142*m1_1+1195*m1_2+1014*m2_1+1323*m2_2+723

Method plus terminates?: YES

 - m1_1: size of m1 wrt. List<List<Rat>>
 - m1_2: size of m1 wrt. List<Rat>
 - m1_3: size of m1 wrt. Rat
 - m1_4: size of m1 wrt. Matrix
 - m2_1: size of m2 wrt. List<List<Rat>>
 - m2_2: size of m2 wrt. List<Rat>
 - m2_3: size of m2 wrt. Rat
 - m2_4: size of m2 wrt. Matrix
UB for plus(m1_1,m1_2,m1_3,m1_4,m2_1,m2_2,m2_3,m2_4) = 87*m1_1+64+max([6*m1_1+max([10*m1_1+max([46*m1_1+max([max([32*m2_2+32,22*m2_1+11*m2_2])+3,6*m1_1+max([5*m1_1+12*m2_1+11*m2_2+3,10*m1_1+max([1683*m1_1+1473*m1_2+1058*m2_1+1361*m2_2+714,max([16*m2_2+16,6*m2_1+11*m2_2])])])]),63*m1_2+max([16*m2_2+16,6*m2_1+11*m2_2])]),74*m1_2+max([16*m2_2+16,6*m2_1+11*m2_2])]),63*m1_2+3+max([32*m2_2+32,12*m2_1+11*m2_2+max([11*m1_2,10*m2_1])])])

Method minus terminates?: YES

 - m1_1: size of m1 wrt. List<List<Rat>>
 - m1_2: size of m1 wrt. List<Rat>
 - m1_3: size of m1 wrt. Rat
 - m1_4: size of m1 wrt. Matrix
 - m2_1: size of m2 wrt. List<List<Rat>>
 - m2_2: size of m2 wrt. List<Rat>
 - m2_3: size of m2 wrt. Rat
 - m2_4: size of m2 wrt. Matrix
UB for minus(m1_1,m1_2,m1_3,m1_4,m2_1,m2_2,m2_3,m2_4) = 1142*m1_1+1195*m1_2+1014*m2_1+1323*m2_2+731

Method append terminates?: YES

 - l_1: size of l wrt. List<Rat>
 - l_2: size of l wrt. Rat
 - x_1: size of x wrt. Rat
UB for append(l_1,l_2,x_1) = 5*l_1+9

Method append_row terminates?: YES

 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
 - row_1: size of row wrt. List<Rat>
 - row_2: size of row wrt. Rat
UB for append_row(m_1,m_2,m_3,row_1,row_2) = max([10*row_1,18*m_1+23/2*m_2+nat(-m_1+row_1)*10])+2

Method transpose_helper terminates?: YES

 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
 - m_trans_1: size of m_trans wrt. List<List<Rat>>
 - m_trans_2: size of m_trans wrt. List<Rat>
 - m_trans_3: size of m_trans wrt. Rat
UB for transpose_helper(m_1,m_2,m_3,m_trans_1,m_trans_2,m_trans_3) = (15*m_2+5*m_trans_1+5*m_trans_2)* (2*m_2)+28*m_2+nat(-m_trans_1+2)*7+ (52*m_2+52*m_trans_1)+ (-10*m_1+10*m_2+10)+ (-52*m_1+52*m_2+52)+m_2/3* (15*m_2+5*m_trans_1+5*m_trans_2+5)+nat(-m_1+m_2-m_trans_1+2)*10+7/3*m_2+2

Method transpose terminates?: YES

 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
UB for transpose(m_1,m_2,m_3) = 7/2+ (-m_1+3*m_2+3)* (15*m_2+5)+m_2/3* (15*m_2+10)+ (-20*m_1+20*m_2+20)+ (-26*m_1+52*m_2+52)+ (-7*m_1+21*m_2+21)+ (-21*m_1+28*m_2+21)+ (-52*m_1+52*m_2+52)+7/3*m_2+4

Method reverse_helper terminates?: YES

 - l_1: size of l wrt. List<List<Rat>>
 - l_2: size of l wrt. List<Rat>
 - l_3: size of l wrt. Rat
 - l_4: size of l wrt. List<A>
 - l_5: size of l wrt. A
 - acc_1: size of acc wrt. List<List<Rat>>
 - acc_2: size of acc wrt. List<Rat>
 - acc_3: size of acc wrt. Rat
 - acc_4: size of acc wrt. List<A>
 - acc_5: size of acc wrt. A
UB for reverse_helper(l_1,l_2,l_3,l_4,l_5,acc_1,acc_2,acc_3,acc_4,acc_5) = 5*l_1+2

Method reverseL terminates?: YES

 - l_1: size of l wrt. List<List<Rat>>
 - l_2: size of l wrt. List<Rat>
 - l_3: size of l wrt. Rat
 - l_4: size of l wrt. List<A>
 - l_5: size of l wrt. A
UB for reverseL(l_1,l_2,l_3,l_4,l_5) = 5*l_4+4

Method reverse_rows_helper terminates?: YES

 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
 - m_rev_1: size of m_rev wrt. List<List<Rat>>
 - m_rev_2: size of m_rev wrt. List<Rat>
 - m_rev_3: size of m_rev wrt. Rat
UB for reverse_rows_helper(m_1,m_2,m_3,m_rev_1,m_rev_2,m_rev_3) = (m_1+m_rev_1)* (5*m_2)+10*m_2+2

Method reverse_rows terminates?: YES

 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
UB for reverse_rows(m_1,m_2,m_3) = (5*m_1+5)*m_1+15*m_1+9

Method append_start terminates?: YES

 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
 - row_1: size of row wrt. List<Rat>
 - row_2: size of row wrt. Rat
UB for append_start(m_1,m_2,m_3,row_1,row_2) = max([9*row_1+max([10*row_1,nat(m_2-row_1+3)*5*nat(m_2-row_1+2)+nat(m_2-row_1+2)*15]), (5*m_1+5)*m_1+15*m_1])+12

Method new_transpose_helper terminates?: YES

 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
 - m_trans_1: size of m_trans wrt. List<List<Rat>>
 - m_trans_2: size of m_trans wrt. List<Rat>
 - m_trans_3: size of m_trans wrt. Rat
UB for new_transpose_helper(m_1,m_2,m_3,m_trans_1,m_trans_2,m_trans_3) = max([10*m_2+17,17*m_1+max([20*m_2*m_1+17*m_2+5*m_2*m_2*m_1+5*m_2* (2*m_2)* (2*m_2)+34*m_2+30*m_2* (2*m_2)+30*m_2+max([17*m_1+88*m_2,9*m_1+9*m_2+nat(-2*m_1+2*m_2)*9+ (-52*m_1+52*m_2+104)])+ (10*m_2+17), (20*m_2+20*m_trans_1)*m_1+86*m_2+ (5*m_2+5*m_trans_1)* (m_2+m_trans_1)*m_1+ (5*m_2+5*m_trans_1)* (2*m_2+m_trans_2)* (2*m_2)+ (30*m_2+15*m_trans_2)* (2*m_2)+ (9*m_1+9*m_2+9*m_trans_1)+nat(-m_1+m_2-m_trans_1+2)*10+nat(-2*m_1+2*m_2-m_trans_1+4)*9+17/3*m_2])])+2

Method new_transpose terminates?: YES

 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
UB for new_transpose(m_1,m_2,m_3) = max([17*m_2+17,25*m_2+17+max([ (5*m_2+5)*m_2,68*m_1+29*m_2+40*m_2*m_1+10*m_2*m_2*m_1+5*m_2* (2*m_2)*nat(-m_1+4*m_2)+ (-m_1+2*m_2+2)* (5*m_2* (2*m_2))+30*m_2*nat(-m_1+4*m_2)+ (-m_1+2*m_2+2)* (30*m_2)+ (43*m_1+43*m_2)+ (m_1+m_2+1)* (5*m_1+5*m_2)+nat(-m_1+4*m_2)*17+nat(-2*m_1+2*m_2)*18+ (-17*m_1+34*m_2+34)+ (-104*m_1+104*m_2+208)+ (-40*m_1+60*m_2+80)])])+14

Method prod terminates?: YES

 - l1_1: size of l1 wrt. List<Rat>
 - l1_2: size of l1 wrt. Rat
 - l2_1: size of l2 wrt. List<Rat>
 - l2_2: size of l2 wrt. Rat
UB for prod(l1_1,l1_2,l2_1,l2_2) = max([9*l2_1+3,9*l1_1])+3

Method prod_mat terminates?: YES

 - row_1: size of row wrt. List<Rat>
 - row_2: size of row wrt. Rat
 - mat_1: size of mat wrt. List<List<Rat>>
 - mat_2: size of mat wrt. List<Rat>
 - mat_3: size of mat wrt. Rat
UB for prod_mat(row_1,row_2,mat_1,mat_2,mat_3) = 15*mat_1+36*mat_2+nat(-row_1-2*mat_1+2*mat_2+4)*9+9*mat_1+3

Method mat_mult terminates?: YES

 - m1_1: size of m1 wrt. List<List<Rat>>
 - m1_2: size of m1 wrt. List<Rat>
 - m1_3: size of m1 wrt. Rat
 - m2_1: size of m2 wrt. List<List<Rat>>
 - m2_2: size of m2 wrt. List<Rat>
 - m2_3: size of m2 wrt. Rat
UB for mat_mult(m1_1,m1_2,m1_3,m2_1,m2_2,m2_3) = max([max([16*m1_2,7/2+ (-m2_1+3*m2_2+3)* (15*m2_2+5)+m2_2/3* (15*m2_2+10)+ (-20*m2_1+20*m2_2+20)+ (-26*m2_1+52*m2_2+52)+ (-7*m2_1+21*m2_2+21)+ (-21*m2_1+28*m2_2+21)+ (-52*m2_1+52*m2_2+52)+7/3*m2_2]),16*m1_1+max([28/3*m1_1*m2_1+7*m2_1+5*m2_1*m1_1*m2_1+m2_1/3* (15*m2_1)+7/3*m2_1,5191/6*m1_1+7/2+ (-m2_1+3*m2_2+3)* (42*m1_1)+ (-3*m2_1+4*m2_2+3)* (7*m1_1)+ (-2*m2_1+2*m2_2+2)* (9*m1_1)+1918/3*m2_2*m1_1+ (-m2_1+3*m2_2+3)* (15*m2_2*m1_1)+55*m2_2*m2_2*m1_1+ (-m2_1+3*m2_2+3)* (15*m2_2+5)+m2_2/3* (15*m2_2+10)+ (-20*m2_1+20*m2_2+20)+ (-26*m2_1+52*m2_2+52)+ (-7*m2_1+21*m2_2+21)+ (-21*m2_1+28*m2_2+21)+ (-52*m2_1+52*m2_2+52)+ (7/2*m1_2+7/2)+7/3*m2_2])])+10

Method lineMult terminates?: YES

 - n_1: size of n wrt. Rat
 - l1_1: size of l1 wrt. List<Rat>
 - l1_2: size of l1 wrt. Rat
 - l2_1: size of l2 wrt. List<Rat>
 - l2_2: size of l2 wrt. Rat
UB for lineMult(n_1,l1_1,l1_2,l2_1,l2_2) = max([10*l1_1,nat(l1_1-l2_1+1)*9+10*l2_1])+3

Method computeLine terminates?: YES

 - line_1: size of line wrt. List<Rat>
 - line_2: size of line wrt. Rat
 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
 - acc_1: size of acc wrt. List<Rat>
 - acc_2: size of acc wrt. Rat
UB for computeLine(line_1,line_2,m_1,m_2,m_3,acc_1,acc_2) = 42*line_1+109/2*m_2+73/2*acc_1+6

Method mat_mult_jan terminates?: YES

 - m1_1: size of m1 wrt. List<List<Rat>>
 - m1_2: size of m1 wrt. List<Rat>
 - m1_3: size of m1 wrt. Rat
 - m2_1: size of m2 wrt. List<List<Rat>>
 - m2_2: size of m2 wrt. List<Rat>
 - m2_3: size of m2 wrt. Rat
UB for mat_mult_jan(m1_1,m1_2,m1_3,m2_1,m2_2,m2_3) = 58*m2_2*m1_1+58*m1_1+ (-2*m1_1+2*m1_2+2)* (18*m2_2)+ (-140*m1_1+140*m1_2+140)+ (-66*m1_1+66*m1_2+66)+ (-20*m1_1+20*m1_2+20*m2_2+60)* (-2*m1_1+2*m1_2+2)+3

Method check_mult_sanity terminates?: YES

 - m1_1: size of m1 wrt. List<List<Rat>>
 - m1_2: size of m1 wrt. List<Rat>
 - m1_3: size of m1 wrt. Rat
 - m1_4: size of m1 wrt. Matrix
 - m2_1: size of m2 wrt. List<List<Rat>>
 - m2_2: size of m2 wrt. List<Rat>
 - m2_3: size of m2 wrt. Rat
 - m2_4: size of m2 wrt. Matrix
UB for check_mult_sanity(m1_1,m1_2,m1_3,m1_4,m2_1,m2_2,m2_3,m2_4) = 254*m1_1+279*m1_2+330*m2_1+325*m2_2+161

Method mult terminates?: YES

 - m1_1: size of m1 wrt. List<List<Rat>>
 - m1_2: size of m1 wrt. List<Rat>
 - m1_3: size of m1 wrt. Rat
 - m1_4: size of m1 wrt. Matrix
 - m2_1: size of m2 wrt. List<List<Rat>>
 - m2_2: size of m2 wrt. List<Rat>
 - m2_3: size of m2 wrt. Rat
 - m2_4: size of m2 wrt. Matrix
UB for mult(m1_1,m1_2,m1_3,m1_4,m2_1,m2_2,m2_3,m2_4) = inf

Method evaluate terminates?: YES

 - expr_1: size of expr wrt. List<List<Rat>>
 - expr_2: size of expr wrt. List<Rat>
 - expr_3: size of expr wrt. Rat
 - expr_4: size of expr wrt. Arith_exp
UB for evaluate(expr_1,expr_2,expr_3,expr_4) = inf

Method del terminates?: YES

 - l_1: size of l wrt. List<Rat>
 - l_2: size of l wrt. Rat
 - i_1: size of i wrt. Rat
UB for del(l_1,l_2,i_1) = max([10*i_1+3,10*l_1])+3

Method submat terminates?: YES

 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
 - i_1: size of i wrt. Rat
 - j_1: size of j wrt. Rat
UB for submat(m_1,m_2,m_3,i_1,j_1) = -54*m_1+54*m_2+54+ (nat(-m_1+m_2)*10+28*m_1)+17/3*m_2+3

Method remFirstRow terminates?: YES

 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
UB for remFirstRow(m_1,m_2,m_3) = 2

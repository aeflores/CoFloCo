
Abs program loaded in 23 ms.

Rule based representation generated in 3 ms.

Rule based representation stored in /tmp/costabs/rbr.rbr

RBR properties stored in /tmp/costabs/rbr.properties

Class invariants generated and loaded in 0 ms.

Abstract compilation performed in 17 ms.

Cost relation system stored in /tmp/costabs/crs.crs

Generated 34 equations 
entry('append'(A,B,C,D,E,F):[]).
entry('append_all'(A,B,C,D,E):[]).
entry('append_all2'(A,B,C,D,E,F):[]).
entry('append_all3'(A,B,C,D,E,F,G):[]).
input_output_vars('and_op'(A,B,C),[A,B],[C]).
input_output_vars('append'(A,B,C,D,E,F),[A,B,C,D],[E,F]).
input_output_vars('append_all'(A,B,C,D,E),[A,B,C],[D,E]).
input_output_vars('append_all2'(A,B,C,D,E,F),[A,B,C,D],[E,F]).
input_output_vars('append_all3'(A,B,C,D,E,F,G),[A,B,C,D,E],[F,G]).
input_output_vars('case_0'(A,B,C,D,E,F),[A,B,C,D],[E,F]).
input_output_vars('case_1'(A,B,C,D,E),[A,B,C],[D,E]).
input_output_vars('case_2'(A,B,C,D,E,F),[A,B,C,D],[E,F]).
input_output_vars('case_3'(A,B,C,D,E,F,G),[A,B,C,D,E],[F,G]).
input_output_vars('eq'(A,B,C),[A,B],[C]).
input_output_vars('geq'(A,B,C),[A,B],[C]).
input_output_vars('gt'(A,B,C),[A,B],[C]).
input_output_vars('leq'(A,B,C),[A,B],[C]).
input_output_vars('lt'(A,B,C),[A,B],[C]).
input_output_vars('maxNorm'(A,B,C),[A,B],[C]).
input_output_vars('neg'(A,B),[A],[B]).
input_output_vars('neq'(A,B,C),[A,B],[C]).
input_output_vars('or'(A,B,C),[A,B],[C]).
eq('eq',[A,B,C],0,[],[A=B,C=1,A>=0,B>=0,C>=0]).
eq('eq',[A,B,C],0,[],[A>=B+1,C=0,A>=0,B>=0,C>=0]).
eq('eq',[A,B,C],0,[],[B>=A+1,C=0,A>=0,B>=0,C>=0]).
eq('neq',[A,B,C],0,[],[A=B,C=0,A>=0,B>=0,C>=0]).
eq('neq',[A,B,C],0,[],[A>=B+1,C=1,A>=0,B>=0,C>=0]).
eq('neq',[A,B,C],0,[],[B>=A+1,C=1,A>=0,B>=0,C>=0]).
eq('lt',[A,B,C],0,[],[B-A>=1,C=1,A>=0,B>=0,C>=0]).
eq('lt',[A,B,C],0,[],[B=<A,C=0,A>=0,B>=0,C>=0]).
eq('leq',[A,B,C],0,[],[A=<B,C=1,A>=0,B>=0,C>=0]).
eq('leq',[A,B,C],0,[],[A-B>=1,C=0,A>=0,B>=0,C>=0]).
eq('gt',[A,B,C],0,[],[A-B>=1,C=1,A>=0,B>=0,C>=0]).
eq('gt',[A,B,C],0,[],[A=<B,C=0,A>=0,B>=0,C>=0]).
eq('geq',[A,B,C],0,[],[B=<A,C=1,A>=0,B>=0,C>=0]).
eq('geq',[A,B,C],0,[],[B-A>=1,C=0,A>=0,B>=0,C>=0]).
eq('neg',[A,B],0,[],[A=0,B=1,A>=0,B>=0]).
eq('neg',[A,B],0,[],[A=1,B=0,A>=0,B>=0]).
eq('and_op',[A,B,C],0,[],[A=0,C=0,A>=0,B>=0,C>=0]).
eq('and_op',[A,B,C],0,[],[A=1,C=B,A>=0,B>=0,C>=0]).
eq('or',[A,B,C],0,[],[A=1,C=1,A>=0,B>=0,C>=0]).
eq('or',[A,B,C],0,[],[A=0,C=B,A>=0,B>=0,C>=0]).
eq('maxNorm',[A,B,A],0,[],[A>=1+B,A>=0,B>=0,A>=0]).
eq('maxNorm',[A,B,B],0,[],[A=<B,A>=0,B>=0,B>=0]).
eq('case_0',[A,B,C,D,C,D],1,[],[B=0,A=1,A>=0,B>=0,C>=0,D>=0,C>=0,D>=0]).
eq('case_0',[A,B,C,D,E,F],4,['append'(G,H,C,D,I,J)],[B=K+H,A=G+1,G>=1,K>=1,F=K+J,E=I+1,I>=1,K>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0]).
eq('append',[A,B,C,D,E,F],1,['case_0'(A,B,C,D,E,F)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0]).
eq('case_1',[A,B,C,D,E],2,[],[C=0,B=0,A=1,E=0,D=1,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_1',[A,B,C,D,E],4,['append_all'(F,G,H,I,J),'append'(K,L,I,J,D,E)],[C=L+H,B=K+G,A=F+1,F>=1,K>=1,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('append_all',[A,B,C,D,E],1,['case_1'(A,B,C,D,E)],[A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_2',[A,B,C,D,E,F],2,[],[D=0,C=0,B=0,A=1,F=0,E=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0]).
eq('case_2',[A,B,C,D,E,F],5,['append_all'(G,H,I,J,K),'append_all2'(L,M,N,O,P,Q),'append'(J,K,P,Q,E,F)],[D=I+O,C=H+N,B=G+M,A=L+1,L>=1,G>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0]).
eq('append_all2',[A,B,C,D,E,F],1,['case_2'(A,B,C,D,E,F)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0]).
eq('case_3',[A,B,C,D,E,F,G],2,[],[E=0,D=0,C=0,B=0,A=1,G=0,F=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_3',[A,B,C,D,E,F,G],5,['append_all2'(H,I,J,K,L,M),'append_all3'(N,O,P,Q,R,S,T),'append'(L,M,S,T,F,G)],[E=K+R,D=J+Q,C=I+P,B=H+O,A=N+1,N>=1,H>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('append_all3',[A,B,C,D,E,F,G],1,['case_3'(A,B,C,D,E,F,G)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [append/6,case_0/6]
1. recursive [non_tail] : [append_all/5,case_1/5]
2. recursive [non_tail] : [append_all2/6,case_2/6]
3. recursive [non_tail] : [append_all3/7,case_3/7]
Warning: the following predicates are never called:[and_op/3,eq/3,geq/3,gt/3,leq/3,lt/3,maxNorm/3,neg/2,neq/3,or/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into append/6
1. SCC is partially evaluated into append_all/5
2. SCC is partially evaluated into append_all2/6
3. SCC is partially evaluated into append_all3/7

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations append/6 
* CE 2 is refined into CE [9] 
* CE 1 is refined into CE [10] 


#### Refined cost equations append/6 
* CE 9: append(A,B,C,D,C,D) = 2
     [D>=0,C>=0,B=0,A=1] 
* CE 10: append(A,B,C,D,E,F) = 5+ append(G,H,C,D,I,J)
     [F+H>=J,F>=J+1,I>=1,G>=1,F>=0,D>=0,C>=0,B+J=F+H,I+1=E,G+1=A] 

### Cost equations --> "Loop" of append/6 
* CEs [10] --> Loop 9 
* CEs [9] --> Loop 10 

#### Loops of append/6 
* Loop 9: append(A,B,C,D,E,F)->  append(A',B',C,D,C',D')
                  [F+B'>=D',F>=D'+1,C'>=1,A'>=1,F>=0,D>=0,C>=0,F+B'=B+D',C'+1=E,A'+1=A] 
* Loop 10: append(A,B,C,D,C,D) [D>=0,C>=0,B=0,A=1] 

### Ranking functions of CR append(A,B,C,D,E,F) 
* RF of phase [9]: [A-1,B+1]

#### Partial ranking functions of CR append(A,B,C,D,E,F) 
* Partial RF of phase [9]:
  - RF of loop [9:1]:
    A-1
    B+1

Discarded unfeasible chain [[9]]...(Non-terminating chain proved terminating)

### Resulting Chains:append(A,B,C,D,E,F) 
* [[9],10]
* [10]


### Merging Chains  append/6 into  External patterns of execution 
* [[10]] --> 1 
* [[10,[9]]] --> 2 


### Specialization of cost equations append_all/5 
* CE 4 is refined into CE [11] 
* CE 3 is refined into CE [12,13] 


#### Refined cost equations append_all/5 
* CE 11: append_all(A,B,C,D,E) = 3
     [E=0,D=1,C=0,B=0,A=1] 
* CE 12: append_all(A,B,C,D,E) = 5+ append_all(F,G,C,D,E)+ append(H,I,D,E,D,E):1
     [C>=0,G+1>=0,F>=1,E>=0,D>=0,G+1=B,F+1=A,I=0,H=1] 
* CE 13: append_all(A,B,C,D,E) = 5+ append_all(F,G,H,I,J)+ append(K,L,M,N,D,E):2
     [L+H>=0,K+G>=0,E>=L,D>=K,L+1>=K,F>=1,K>=2,E=L+J,E=L+N,D+1=K+I,D+1=K+M,L+H=C,K+G=B,F+1=A] 

### Cost equations --> "Loop" of append_all/5 
* CEs [13] --> Loop 11 
* CEs [12] --> Loop 12 
* CEs [11] --> Loop 13 

#### Loops of append_all/5 
* Loop 11: append_all(A,B,C,D,E)->  append_all(A',B',C',D',E')
                  [C+B'+1>=B+C',E+C'>=C,D+B'>=B,B>=B'+2,C>=0,B>=0,A>=2,C+E'=E+C',B+D'=D+B'+1,A=A'+1] 
* Loop 12: append_all(A,B,C,D,E)->  append_all(A',B',C,D,E)
                  [E>=0,D>=0,C>=0,B>=0,A>=2,B=B'+1,A=A'+1] 
* Loop 13: append_all(A,B,C,D,E) [E=0,D=1,C=0,B=0,A=1] 

### Ranking functions of CR append_all(A,B,C,D,E) 
* RF of phase [11,12]: [A-1,B+1]

#### Partial ranking functions of CR append_all(A,B,C,D,E) 
* Partial RF of phase [11,12]:
  - RF of loop [11:1]:
    B/2+1/2
    C+1
  - RF of loop [11:1,12:1]:
    A-1
  - RF of loop [12:1]:
    B+1

Discarded unfeasible chain [[11,12]]...(Non-terminating chain proved terminating)

### Resulting Chains:append_all(A,B,C,D,E) 
* [[11,12],13]
* [13]


### Merging Chains  append_all/5 into  External patterns of execution 
* [[13]] --> 1 
* [[13,[11,12]]] --> 2 


### Specialization of cost equations append_all2/6 
* CE 6 is refined into CE [14] 
* CE 5 is refined into CE [15,16,17] 


#### Refined cost equations append_all2/6 
* CE 14: append_all2(A,B,C,D,E,F) = 3
     [F=0,E=1,D=0,C=0,B=0,A=1] 
* CE 15: append_all2(A,B,C,D,E,F) = 6+ append_all(G,H,I,J,K):1+ append_all2(L,M,C,D,E,F)+ append(N,O,E,F,E,F):1
     [D>=0,C>=0,M+1>=0,L>=1,F>=0,E>=0,M+1=B,L+1=A,O=0,N=1,K=0,J=1,I=0,H=0,G=1] 
* CE 16: append_all2(A,B,C,D,E,F) = 6+ append_all(G,H,I,J,K):2+ append_all2(L,M,N,D,E,F)+ append(O,P,E,F,E,F):1
     [H+N>=0,H+M+1>=0,D>=0,L>=1,F>=0,E>=0,H>=1,H+N=C,H+M+1=B,H+1=G,L+1=A,P=0,O=1,K=0,J=1,I=0] 
* CE 17: append_all2(A,B,C,D,E,F) = 6+ append_all(G,H,I,J,I):2+ append_all2(K,L,M,N,O,P)+ append(J,I,Q,R,E,F):2
     [H+L+2>=J,I+N>=0,H+M>=0,F>=I,E>=J,I+1>=J,H>=J,K>=1,J>=2,B+J=H+L+2,F=I+P,F=I+R,E+1=J+O,E+1=J+Q,G+J=H+2,I+N=D,H+M=C,K+1=A] 

### Cost equations --> "Loop" of append_all2/6 
* CEs [17] --> Loop 14 
* CEs [16] --> Loop 15 
* CEs [15] --> Loop 16 
* CEs [14] --> Loop 17 

#### Loops of append_all2/6 
* Loop 14: append_all2(A,B,C,D,E,F)->  append_all2(A',B',C',D',E',F')
                  [B+D+C'>=C+B'+D'+1,B+E+C'>=C+B'+2,C+B'>=B+C',F+D'>=D,B>=B'+2,D>=0,C>=0,B>=0,A>=2,C+B'+E'+1=B+E+C',D+F'=F+D',A=A'+1] 
* Loop 15: append_all2(A,B,C,D,E,F)->  append_all2(A',B',C',D,E,F)
                  [B>=B'+2,F>=0,E>=0,D>=0,C>=0,B>=0,A>=2,B+C'=C+B'+1,A=A'+1] 
* Loop 16: append_all2(A,B,C,D,E,F)->  append_all2(A',B',C,D,E,F)
                  [F>=0,E>=0,D>=0,C>=0,B>=0,A>=2,B=B'+1,A=A'+1] 
* Loop 17: append_all2(A,B,C,D,E,F) [F=0,E=1,D=0,C=0,B=0,A=1] 

### Ranking functions of CR append_all2(A,B,C,D,E,F) 
* RF of phase [14,15,16]: [A-1,B+1]

#### Partial ranking functions of CR append_all2(A,B,C,D,E,F) 
* Partial RF of phase [14,15,16]:
  - RF of loop [14:1]:
    C/2+1/2
    D+1
  - RF of loop [14:1,15:1]:
    B/2+1/2
  - RF of loop [14:1,15:1,16:1]:
    A-1
  - RF of loop [15:1]:
    C+1
  - RF of loop [16:1]:
    B+1

Discarded unfeasible chain [[14,15,16]]...(Non-terminating chain proved terminating)

### Resulting Chains:append_all2(A,B,C,D,E,F) 
* [[14,15,16],17]
* [17]


### Merging Chains  append_all2/6 into  External patterns of execution 
* [[17]] --> 1 
* [[17,[14,15,16]]] --> 2 


### Specialization of cost equations append_all3/7 
* CE 8 is refined into CE [18] 
* CE 7 is refined into CE [19,20,21] 


#### Refined cost equations append_all3/7 
* CE 18: append_all3(A,B,C,D,E,F,G) = 3
     [G=0,F=1,E=0,D=0,C=0,B=0,A=1] 
* CE 19: append_all3(A,B,C,D,E,F,G) = 6+ append_all2(H,I,J,K,L,M):1+ append_all3(N,O,C,D,E,F,G)+ append(P,Q,F,G,F,G):1
     [E>=0,D>=0,C>=0,O+1>=0,N>=1,G>=0,F>=0,O+1=B,N+1=A,Q=0,P=1,M=0,L=1,K=0,J=0,I=0,H=1] 
* CE 20: append_all3(A,B,C,D,E,F,G) = 6+ append_all2(H,I,J,K,L,M):2+ append_all3(N,O,P,Q,E,F,G)+ append(R,S,F,G,F,G):1
     [I+Q+1>=H,I+P>=0,H+O>=0,I+1>=H,E>=0,N>=1,G>=0,F>=0,H>=2,I+Q+1=D+H,I+1=H+J,I+P=C,H+O=B,N+1=A,S=0,R=1,M=0,L=1,K=0] 
* CE 21: append_all3(A,B,C,D,E,F,G) = 6+ append_all2(H,I,J,K,L,K):2+ append_all3(M,N,O,P,Q,R,S)+ append(L,K,T,U,F,G):2
     [I+L+P>=H,K+Q>=0,I+O>=0,H+N>=0,G>=K,F>=L,K+1>=L,I+1>=H,M>=1,L>=2,H>=2,I+L+P=D+H,I+L=H+J,G=K+S,G=K+U,F+1=L+R,F+1=L+T,K+Q=E,I+O=C,H+N=B,M+1=A] 

### Cost equations --> "Loop" of append_all3/7 
* CEs [21] --> Loop 18 
* CEs [20] --> Loop 19 
* CEs [19] --> Loop 20 
* CEs [18] --> Loop 21 

#### Loops of append_all3/7 
* Loop 18: append_all3(A,B,C,D,E,F,G)->  append_all3(A',B',C',D',E',F',G')
                  [C+E+B'+D'+1>=B+D+C'+E',C+F+B'+D'>=B+D+C',B+D+C'>=C+B'+D'+2,C+B'+1>=B+C',G+E'>=E,B>=B'+2,E>=0,D>=0,C>=0,B>=0,A>=2,B+D+C'+F'=C+F+B'+D'+1,E+G'=G+E',A=A'+1] 
* Loop 19: append_all3(A,B,C,D,E,F,G)->  append_all3(A',B',C',D',E,F,G)
                  [C+B'+1>=B+C',B>=B'+2,G>=0,F>=0,E>=0,D>=0,C>=0,B>=0,A>=2,C+B'+D'+1=B+D+C',A=A'+1] 
* Loop 20: append_all3(A,B,C,D,E,F,G)->  append_all3(A',B',C,D,E,F,G)
                  [G>=0,F>=0,E>=0,D>=0,C>=0,B>=0,A>=2,B=B'+1,A=A'+1] 
* Loop 21: append_all3(A,B,C,D,E,F,G) [G=0,F=1,E=0,D=0,C=0,B=0,A=1] 

### Ranking functions of CR append_all3(A,B,C,D,E,F,G) 
* RF of phase [18,19,20]: [A-1,B+1]

#### Partial ranking functions of CR append_all3(A,B,C,D,E,F,G) 
* Partial RF of phase [18,19,20]:
  - RF of loop [18:1]:
    D+1
    E+1
  - RF of loop [18:1,19:1]:
    B/2+1/2
    C+1
  - RF of loop [18:1,19:1,20:1]:
    A-1
  - RF of loop [20:1]:
    B+1

Discarded unfeasible chain [[18,19,20]]...(Non-terminating chain proved terminating)

### Resulting Chains:append_all3(A,B,C,D,E,F,G) 
* [[18,19,20],21]
* [21]


### Merging Chains  append_all3/7 into  External patterns of execution 
* [[21]] --> 1 
* [[21,[18,19,20]]] --> 2 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 9 

#### Computing cost of phase [9] 

#### Simplifying cost structure of CE 10 

#### Cost of loops [9] 

 * loop 9:append(A,B,C,D,E,F) -> [append(A',B',C',D',E',F')] 
5
##### Pending set append(A,B,C,D,E,F)
* Psum in Loop 9: [it(9)=<1]

###### Computing sum for it(9)=<1  in Loop 9 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
     - head Candidate: B+1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
     - tail Candidate: B+1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(9)=<A-1,it(9)=<B+1,it(9)=<A-1,it(9)=<B+1,it(9)=<A-A',it(9)=<B-B',it(9)=<A-A',it(9)=<B-B'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [9] 

#### Simplifying cost structure of phase [9] 

#### Cost of phase [9]:append(A,B,C,D,E,F) -> [append(A',B',C',D',E',F')] 
5*it(9)+0
  Such that:it(9) =< A
it(9) =< A-A'
it(9) =< B+1
it(9) =< B-B'

#### Simplifying cost structure of chain [[9],10] 

#### Cost of chains of append(A,B,C,D,E,F):
* Chain [[9],10]: 5*it(9)+2
  Such that:it(9) =< -C+E

  with precondition: [F=B+D,A+C=E+1,A>=2,C>=1,B+1>=A,F>=B] 

* Chain [10]: 2
  with precondition: [A=1,B=0,C=E,D=F,C>=0,D>=0] 


#### Simplifying cost structure of CE 11 

#### Computing cost of phase [11,12] 
 * Renamed intermediate variables: 
[ (eq(13,1),it(9))>>s(1)]

#### Simplifying cost structure of CE 13 
 * Renamed intermediate variables: 
[ (it(11),s(1))>>s(2)]

#### Simplifying cost structure of CE 12 

#### Cost of loops [11,12] 

 * loop 11:append_all(A,B,C,D,E) -> [append_all(A',B',C',D',E')] 
5*s(2)+7
  Such that:s(2) =< B-B'

 * loop 12:append_all(A,B,C,D,E) -> [append_all(A',B',C',D',E')] 
7
##### Pending set append_all(A,B,C,D,E)
* Psum in Loop 11: [it(11)=<1,s(3)=<B-B']
* Psum in Loop 12: [it(12)=<1]

###### Computing sum for it(11)=<1  in Loop 11 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - Loop 12 is collaborative and bounds [it(12)] 
     - head Candidate: B+1 
       - Loop 12 is collaborative and bounds [it(12)] 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C+1 
       - Loop 12 is collaborative
     - head Candidate: B/2+1/2 
       - Loop 12 is collaborative
     - tail Candidate: A-1 
       - Loop 12 is collaborative and bounds [it(12)] 
     - tail Candidate: B+1 
       - Loop 12 is collaborative and bounds [it(12)] 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C+1 
       - Loop 12 is collaborative
     - tail Candidate: B/2+1/2 
       - Loop 12 is collaborative
 * Adding constraints: [it(11)+it(12)=<A-1,it(11)+it(12)=<B+1,it(11)+it(12)=<A-1,it(11)=<C+1,it(11)=<B/2+1/2,it(11)+it(12)=<A-A',it(11)+it(12)=<B-B',it(11)+it(12)=<A-A',it(11)=<C-C',it(11)=<B/2-B'/2] 

##### Pending set A
* Psum in Loop 11: [s(3)=<B-B']
* Psum in Loop 12: [it(12)=<1]

###### Computing sum for s(3)=<B-B'  in Loop 11 
   - Applying inductive sum strategy 
     - head Candidate: 2*C 
       - Loop 12 is collaborative
     - head Candidate: -A+B+C+1 
       - Loop 12 is collaborative
     - tail Candidate: 2*C 
       - Loop 12 is collaborative
     - tail Candidate: -A+B+C+1 
       - Loop 12 is collaborative
 * Adding constraints: [s(3)=<2*C,s(3)=< -A+B+C+1,s(3)=<2*C-2*C',s(3)=< -A+B+C+A'-B'-C'] 

##### Pending set A
* Psum in Loop 12: [it(12)=<1]

###### Computing sum for it(12)=<1  in Loop 12 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(11)+it(12)=<A-1,it(11)+it(12)=<B+1,it(11)+it(12)=<A-1,it(11)+it(12)=<B+1,it(11)+it(12)=<A-A',it(11)+it(12)=<B-B',it(11)+it(12)=<A-A',it(11)+it(12)=<B-B'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [11,12] 

#### Simplifying cost structure of phase [11,12] 

#### Cost of phase [11,12]:append_all(A,B,C,D,E) -> [append_all(A',B',C',D',E')] 
7*it(11)+7*it(12)+5*s(3)+0
  Such that:s(3) =< -A+B+C+1
s(3) =< -A+B+C+A'-B'-C'
it(11) =< B/2+1/2
it(11) =< B/2-B'/2
it(11) =< C+1
it(11) =< C-C'
s(3) =< 2*C
s(3) =< 2*C-2*C'
aux(1) =< A
aux(2) =< A-A'
aux(3) =< B+1
aux(4) =< B-B'
it(11) =< aux(1)
it(12) =< aux(1)
it(11) =< aux(2)
it(12) =< aux(2)
it(11) =< aux(3)
it(12) =< aux(3)
it(11) =< aux(4)
it(12) =< aux(4)

#### Simplifying cost structure of chain [[11,12],13] 
 * Joined equivalent variables [aux(5),aux(1),aux(2)] into aux(5)
 * Joined equivalent variables [aux(6),aux(3),aux(4)] into aux(6)

#### Cost of chains of append_all(A,B,C,D,E):
* Chain [[11,12],13]: 7*it(11)+7*it(12)+5*s(3)+3
  Such that:it(11) =< A/2+D/2
s(3) =< D+E
it(11) =< E
aux(5) =< A
aux(6) =< A+D
it(11) =< aux(5)
it(12) =< aux(5)
it(11) =< aux(6)
it(12) =< aux(6)

  with precondition: [E=C,A+D=B+2,A>=2,D>=1,E+1>=D] 

* Chain [13]: 3
  with precondition: [A=1,B=0,C=0,D=1,E=0] 


#### Simplifying cost structure of CE 14 

#### Computing cost of phase [14,15,16] 
 * Renamed intermediate variables: 
[ (eq(17,1),it(11))>>s(4), (eq(17,1),s(3))>>s(5), (eq(17,1),aux(5))>>s(6), (eq(17,1),aux(6))>>s(7), (eq(17,1),it(12))>>s(8)]
 * Renamed intermediate variables: 
[ (eq(17,2),it(9))>>s(9)]

#### Simplifying cost structure of CE 17 
 * Renamed intermediate variables: 
[ (it(14),s(5))>>s(10), (it(14),s(9))>>s(11), (it(14),s(6))>>s(12), (it(14),s(7))>>s(13), (it(14),s(4))>>s(14), (it(14),s(8))>>s(15)]
 * Renamed intermediate variables: 
[ (eq(16,1),it(11))>>s(16), (eq(16,1),s(3))>>s(17), (eq(16,1),aux(5))>>s(18), (eq(16,1),aux(6))>>s(19), (eq(16,1),it(12))>>s(20)]

#### Simplifying cost structure of CE 16 
 * Renamed intermediate variables: 
[ (it(15),s(17))>>s(21), (it(15),s(18))>>s(22), (it(15),s(19))>>s(23), (it(15),s(20))>>s(24)]

#### Simplifying cost structure of CE 15 

#### Cost of loops [14,15,16] 

 * loop 14:append_all2(A,B,C,D,E,F) -> [append_all2(A',B',C',D',E',F')] 
7*s(14)+5*s(10)+7*s(15)+5*s(11)+11
  Such that:s(10) =< -B+C+D+B'-C'-D'+2
s(11) =< -B+C+B'-C'+1
s(12) =< B-B'
s(13) =< C-C'+2
s(14) =< C/2-C'/2+1
s(14) =< D-D'
s(14) =< s(12)
s(15) =< s(12)
s(14) =< s(13)
s(15) =< s(13)

 * loop 15:append_all2(A,B,C,D,E,F) -> [append_all2(A',B',C',D',E',F')] 
5*s(21)+7*s(24)+11
  Such that:s(21) =< 1
s(22) =< C-C'+1
s(23) =< C-C'+2
s(24) =< s(22)
s(24) =< s(23)

 * loop 16:append_all2(A,B,C,D,E,F) -> [append_all2(A',B',C',D',E',F')] 
11
##### Pending set append_all2(A,B,C,D,E,F)
* Psum in Loop 14: [it(14)=<1,s(26)=< -B+C+D+B'-C'-D'+2,s(28)=< -B+C+B'-C'+1,s(30)=<B-B',s(29)=<C-C'+2,s(25)=<C/2-C'/2+1,s(25)=<D-D']
* Psum in Loop 15: [it(15)=<1,s(31)=<1,s(34)=<C-C'+1,s(33)=<C-C'+2]
* Psum in Loop 16: [it(16)=<1]

###### Computing sum for it(14)=<1  in Loop 14 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - Loop 15 is collaborative and bounds [it(15)] 
       - Loop 16 is collaborative and bounds [it(16)] 
     - head Candidate: B+1 
       - Loop 15 is collaborative and bounds [it(15)] 
       - Loop 16 is collaborative and bounds [it(16)] 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D+1 
       - Loop 15 is collaborative
       - Loop 16 is collaborative
     - head Candidate: B/2+1/2 
       - Loop 15 is collaborative and bounds [it(15)] 
       - Loop 16 is collaborative
     - head Candidate: C/2+1/2 
       - Loop 15 is collaborative
       - Loop 16 is collaborative
     - tail Candidate: A-1 
       - Loop 15 is collaborative and bounds [it(15)] 
       - Loop 16 is collaborative and bounds [it(16)] 
     - tail Candidate: B+1 
       - Loop 15 is collaborative and bounds [it(15)] 
       - Loop 16 is collaborative and bounds [it(16)] 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D+1 
       - Loop 15 is collaborative
       - Loop 16 is collaborative
     - tail Candidate: B/2+1/2 
       - Loop 15 is collaborative and bounds [it(15)] 
       - Loop 16 is collaborative
     - tail Candidate: C/2+1/2 
       - Loop 15 is collaborative
       - Loop 16 is collaborative
 * Adding constraints: [it(14)+it(15)+it(16)=<A-1,it(14)+it(15)+it(16)=<B+1,it(14)+it(15)+it(16)=<A-1,it(14)=<D+1,it(14)+it(15)=<B/2+1/2,it(14)=<C/2+1/2,it(14)+it(15)+it(16)=<A-A',it(14)+it(15)+it(16)=<B-B',it(14)+it(15)+it(16)=<A-A',it(14)=<D-D',it(14)+it(15)=<B/2-B'/2,it(14)=<C/2-C'/2] 

##### Pending set A
* Psum in Loop 14: [s(26)=< -B+C+D+B'-C'-D'+2,s(28)=< -B+C+B'-C'+1,s(30)=<B-B',s(29)=<C-C'+2,s(25)=<C/2-C'/2+1,s(25)=<D-D']
* Psum in Loop 15: [it(15)=<1,s(31)=<1,s(34)=<C-C'+1,s(33)=<C-C'+2]
* Psum in Loop 16: [it(16)=<1]

###### Computing sum for s(26)=< -B+C+D+B'-C'-D'+2  in Loop 14 
   - Applying inductive sum strategy 
     - head Candidate: B-C+3*D 
       - Loop 15 is collaborative and bounds [it(15)] 
       - Loop 16 is collaborative and bounds [it(16)] 
     - head Candidate: 2*A-2*B+2*C+D-2 
       - Loop 15 is collaborative
       - Loop 16 is collaborative
     - tail Candidate: B-C+3*D 
       - Loop 15 is collaborative and bounds [it(15)] 
       - Loop 16 is collaborative and bounds [it(16)] 
     - tail Candidate: 2*A-2*B+2*C+D-2 
       - Loop 15 is collaborative
       - Loop 16 is collaborative
 * Adding constraints: [it(15)+it(16)+s(26)=<B-C+3*D,s(26)=<2*A-2*B+2*C+D-2,it(15)+it(16)+s(26)=<B-C+3*D-B'+C'-3*D',s(26)=<2*A-2*B+2*C+D-2*A'+2*B'-2*C'-D'] 

##### Pending set A
* Psum in Loop 14: [s(28)=< -B+C+B'-C'+1,s(30)=<B-B',s(29)=<C-C'+2,s(25)=<C/2-C'/2+1,s(25)=<D-D']
* Psum in Loop 15: [it(15)=<1,s(31)=<1,s(34)=<C-C'+1,s(33)=<C-C'+2]
* Psum in Loop 16: [it(16)=<1]

###### Computing sum for s(28)=< -B+C+B'-C'+1  in Loop 14 
   - Applying inductive sum strategy 
     - head Candidate: C-1 
       - Loop 15 is collaborative
       - Loop 16 is collaborative
     - head Candidate: A-B+C-1 
       - Loop 15 is collaborative
       - Loop 16 is collaborative
     - tail Candidate: C-1 
       - Loop 15 is collaborative and bounds [it(15)] 
       - Loop 16 is collaborative
     - tail Candidate: A-B+C-1 
       - Loop 15 is collaborative
       - Loop 16 is collaborative
 * Adding constraints: [s(28)=<C-1,s(28)=<A-B+C-1,it(15)+s(28)=<C-C',s(28)=<A-B+C-A'+B'-C'] 

##### Pending set A
* Psum in Loop 14: [s(30)=<B-B',s(29)=<C-C'+2,s(25)=<C/2-C'/2+1,s(25)=<D-D']
* Psum in Loop 15: [it(15)=<1,s(31)=<1,s(34)=<C-C'+1,s(33)=<C-C'+2]
* Psum in Loop 16: [it(16)=<1]

###### Computing sum for s(30)=<B-B'  in Loop 14 
   - Applying inductive sum strategy 
     - head Candidate: -A+B+D+1 
       - Loop 15 is collaborative and bounds [it(15)] 
       - Loop 16 is collaborative
     - head Candidate: -2*A+2*B+2 
       - Loop 15 is collaborative and bounds [it(15)] 
       - Loop 16 is collaborative
     - tail Candidate: -A+B+D+1 
       - Loop 15 is collaborative and bounds [it(15)] 
       - Loop 16 is collaborative
     - tail Candidate: -2*A+2*B+2 
       - Loop 15 is collaborative and bounds [it(15)] 
       - Loop 16 is collaborative
 * Adding constraints: [it(15)+s(30)=< -A+B+D+1,it(15)+s(30)=< -2*A+2*B+2,it(15)+s(30)=< -A+B+D+A'-B'-D',it(15)+s(30)=< -2*A+2*B+2*A'-2*B'] 

##### Pending set A
* Psum in Loop 14: [s(29)=<C-C'+2,s(25)=<C/2-C'/2+1,s(25)=<D-D']
* Psum in Loop 15: [it(15)=<1,s(31)=<1,s(34)=<C-C'+1,s(33)=<C-C'+2]
* Psum in Loop 16: [it(16)=<1]

###### Computing sum for s(29)=<C-C'+2  in Loop 14 
   - Applying inductive sum strategy 
     - head Candidate: 2*A-2*B+3*C-2 
       - Loop 15 is collaborative and bounds [it(15)] 
       - Loop 16 is collaborative
     - head Candidate: B+C 
       - Loop 15 is collaborative and bounds [it(15)] 
       - Loop 16 is collaborative and bounds [it(16)] 
     - tail Candidate: 2*A-2*B+3*C-2 
       - Loop 15 is collaborative and bounds [it(15)] 
       - Loop 16 is collaborative
     - tail Candidate: B+C 
       - Loop 15 is collaborative and bounds [it(15)] 
       - Loop 16 is collaborative and bounds [it(16)] 
 * Adding constraints: [it(15)+s(29)=<2*A-2*B+3*C-2,it(15)+it(16)+s(29)=<B+C,it(15)+s(29)=<2*A-2*B+3*C-2*A'+2*B'-3*C',it(15)+it(16)+s(29)=<B+C-B'-C'] 

##### Pending set A
* Psum in Loop 14: [s(25)=<C/2-C'/2+1,s(25)=<D-D']
* Psum in Loop 15: [it(15)=<1,s(31)=<1,s(34)=<C-C'+1,s(33)=<C-C'+2]
* Psum in Loop 16: [it(16)=<1]

###### Computing sum for s(25)=<C/2-C'/2+1  in Loop 14 
   - Found a solution using cacheing 
 * Adding constraints: [s(25)=<aux(7)* (1/2),aux(7)+it(15)=<2*A-2*B+3*C-2,aux(7)+it(15)+it(16)=<B+C,aux(7)+it(15)=<2*A-2*B+3*C-2*A'+2*B'-3*C',aux(7)+it(15)+it(16)=<B+C-B'-C'] 

##### Pending set A
* Psum in Loop 14: [s(25)=<D-D']
* Psum in Loop 15: [it(15)=<1,s(31)=<1,s(34)=<C-C'+1,s(33)=<C-C'+2]
* Psum in Loop 16: [it(16)=<1]

###### Computing sum for s(25)=<D-D'  in Loop 14 
   - Applying inductive sum strategy 
     - head Candidate: D 
       - Loop 15 is collaborative
       - Loop 16 is collaborative
     - tail Candidate: D 
       - Loop 15 is collaborative
       - Loop 16 is collaborative
 * Adding constraints: [s(25)=<D,s(25)=<D-D'] 

##### Pending set A
* Psum in Loop 15: [it(15)=<1,s(31)=<1,s(34)=<C-C'+1,s(33)=<C-C'+2]
* Psum in Loop 16: [it(16)=<1]

###### Computing sum for it(15)=<1  in Loop 15 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C+1 
       - Loop 14 is collaborative
       - Loop 16 is collaborative
     - head Candidate: B/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C+1 
       - Loop 14 is collaborative
       - Loop 16 is collaborative
     - tail Candidate: B/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(14)+it(15)+it(16)=<A-1,it(14)+it(15)+it(16)=<B+1,it(14)+it(15)+it(16)=<A-1,it(15)=<C+1,it(14)+it(15)=<B/2+1/2,it(14)+it(15)+it(16)=<A-A',it(14)+it(15)+it(16)=<B-B',it(14)+it(15)+it(16)=<A-A',it(15)=<C-C',it(14)+it(15)=<B/2-B'/2] 

##### Pending set A
* Psum in Loop 15: [s(31)=<1,s(34)=<C-C'+1,s(33)=<C-C'+2]
* Psum in Loop 16: [it(16)=<1]

###### Computing sum for s(31)=<1  in Loop 15 
   - Found a solution using cacheing 
 * Adding constraints: [s(31)=<aux(8),aux(8)+it(14)+it(16)=<A-1,aux(8)+it(14)+it(16)=<B+1,aux(8)+it(14)+it(16)=<A-1,aux(8)=<C+1,aux(8)+it(14)=<B/2+1/2,aux(8)+it(14)+it(16)=<A-A',aux(8)+it(14)+it(16)=<B-B',aux(8)+it(14)+it(16)=<A-A',aux(8)=<C-C',aux(8)+it(14)=<B/2-B'/2] 

##### Pending set A
* Psum in Loop 15: [s(34)=<C-C'+1,s(33)=<C-C'+2]
* Psum in Loop 16: [it(16)=<1]

###### Computing sum for s(34)=<C-C'+1  in Loop 15 
   - Applying inductive sum strategy 
     - head Candidate: A+C-1 
       - Loop 14 is collaborative
       - Loop 16 is collaborative and bounds [it(16)] 
     - head Candidate: B/2+C 
       - Loop 14 is collaborative
       - Loop 16 is collaborative
     - tail Candidate: A+C-1 
       - Loop 14 is collaborative
       - Loop 16 is collaborative and bounds [it(16)] 
     - tail Candidate: B/2+C 
       - Loop 14 is collaborative
       - Loop 16 is collaborative
 * Adding constraints: [it(16)+s(34)=<A+C-1,s(34)=<B/2+C,it(16)+s(34)=<A+C-A'-C',s(34)=<B/2+C-B'/2-C'] 

##### Pending set A
* Psum in Loop 15: [s(33)=<C-C'+2]
* Psum in Loop 16: [it(16)=<1]

###### Computing sum for s(33)=<C-C'+2  in Loop 15 
   - Applying inductive sum strategy 
     - head Candidate: 3/2*B 
       - Loop 14 is collaborative
       - Loop 16 is collaborative and bounds [it(16)] 
     - head Candidate: B+C 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: 3/2*B 
       - Loop 14 is collaborative
       - Loop 16 is collaborative and bounds [it(16)] 
     - tail Candidate: B+C 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(16)+s(33)=<3/2*B,it(16)+s(29)+s(33)=<B+C,it(16)+s(33)=<3/2*B-3/2*B',it(16)+s(29)+s(33)=<B+C-B'-C'] 

##### Pending set A
* Psum in Loop 16: [it(16)=<1]

###### Computing sum for it(16)=<1  in Loop 16 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(14)+it(15)+it(16)=<A-1,it(14)+it(15)+it(16)=<B+1,it(14)+it(15)+it(16)=<A-1,it(14)+it(15)+it(16)=<B+1,it(14)+it(15)+it(16)=<A-A',it(14)+it(15)+it(16)=<B-B',it(14)+it(15)+it(16)=<A-A',it(14)+it(15)+it(16)=<B-B'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [14,15,16] 

#### Simplifying cost structure of phase [14,15,16] 
 * Joined equivalent variables [aux(7),s(29)] into aux(7)

#### Cost of phase [14,15,16]:append_all2(A,B,C,D,E,F) -> [append_all2(A',B',C',D',E',F')] 
11*it(14)+11*it(15)+11*it(16)+7*s(25)+5*s(26)+7*s(27)+5*s(28)+5*s(31)+7*s(32)+0
  Such that:s(28) =< A-B+C
s(28) =< A-B+C-A'+B'-C'
s(26) =< 2*A-2*B+2*C+D
s(26) =< 2*A-2*B+2*C+D-2*A'+2*B'-2*C'-D'
s(34) =< B/2+C
s(34) =< B/2+C-B'/2-C'
s(28) =< C
it(14) =< C/2+1/2
it(14) =< C/2-C'/2
s(25) =< D
it(14) =< D+1
aux(9) =< -2*A+2*B+2
aux(10) =< -2*A+2*B+2*A'-2*B'
aux(11) =< -A+B+D+1
aux(12) =< -A+B+D+A'-B'-D'
aux(13) =< A
aux(14) =< A+C
aux(15) =< A+C-A'-C'
aux(16) =< A-A'
aux(17) =< 2*A-2*B+3*C
aux(18) =< 2*A-2*B+3*C-2*A'+2*B'-3*C'
aux(19) =< B+1
aux(20) =< B-C+3*D
aux(21) =< B-C+3*D-B'+C'-3*D'
aux(22) =< B+C
aux(23) =< B+C-B'-C'
aux(24) =< B-B'
aux(25) =< B/2+1/2
aux(26) =< B/2-B'/2
aux(27) =< 3/2*B
aux(28) =< 3/2*B-3/2*B'
aux(29) =< C+1
aux(30) =< C-C'
aux(31) =< D-D'
it(15) =< aux(9)
s(30) =< aux(9)
it(15) =< aux(10)
s(30) =< aux(10)
it(15) =< aux(11)
s(30) =< aux(11)
it(15) =< aux(12)
s(30) =< aux(12)
aux(8) =< aux(13)
it(14) =< aux(13)
it(15) =< aux(13)
it(16) =< aux(13)
it(16) =< aux(14)
s(34) =< aux(14)
it(16) =< aux(15)
s(34) =< aux(15)
aux(8) =< aux(16)
it(14) =< aux(16)
it(15) =< aux(16)
it(16) =< aux(16)
aux(7) =< aux(17)
it(15) =< aux(17)
aux(7) =< aux(18)
it(15) =< aux(18)
aux(8) =< aux(19)
it(14) =< aux(19)
it(15) =< aux(19)
it(16) =< aux(19)
it(15) =< aux(20)
it(16) =< aux(20)
s(26) =< aux(20)
it(15) =< aux(21)
it(16) =< aux(21)
s(26) =< aux(21)
aux(7) =< aux(22)
it(15) =< aux(22)
it(16) =< aux(22)
s(33) =< aux(22)
aux(7) =< aux(23)
it(15) =< aux(23)
it(16) =< aux(23)
s(33) =< aux(23)
aux(8) =< aux(24)
it(14) =< aux(24)
it(15) =< aux(24)
it(16) =< aux(24)
aux(8) =< aux(25)
it(14) =< aux(25)
it(15) =< aux(25)
aux(8) =< aux(26)
it(14) =< aux(26)
it(15) =< aux(26)
it(16) =< aux(27)
s(33) =< aux(27)
it(16) =< aux(28)
s(33) =< aux(28)
aux(8) =< aux(29)
it(15) =< aux(29)
aux(8) =< aux(30)
it(15) =< aux(30)
s(28) =< aux(30)
it(14) =< aux(31)
s(25) =< aux(31)
s(31) =< aux(8)
s(25) =< aux(7)* (1/2)
s(32) =< s(34)
s(32) =< s(33)
s(25) =< s(30)
s(27) =< s(30)
s(25) =< aux(7)
s(27) =< aux(7)

#### Simplifying cost structure of chain [[14,15,16],17] 
 * Joined equivalent variables [aux(32),aux(9),aux(10)] into aux(32)
 * Joined equivalent variables [aux(33),aux(11),aux(12)] into aux(33)
 * Joined equivalent variables [aux(34),aux(13),aux(16)] into aux(34)
 * Joined equivalent variables [aux(35),aux(14),aux(15)] into aux(35)
 * Joined equivalent variables [aux(36),aux(17),aux(18)] into aux(36)
 * Joined equivalent variables [aux(37),aux(20),aux(21)] into aux(37)
 * Joined equivalent variables [aux(38),aux(22),aux(23)] into aux(38)
 * Joined equivalent variables [aux(39),aux(27),aux(28)] into aux(39)
 * Joined equivalent variables [aux(40),aux(31)] into aux(40)

#### Cost of chains of append_all2(A,B,C,D,E,F):
* Chain [[14,15,16],17]: 11*it(14)+11*it(15)+11*it(16)+7*s(25)+5*s(26)+7*s(27)+5*s(28)+5*s(31)+7*s(32)+3
  Such that:s(28) =< A-B+C
s(26) =< 2*A-2*B+2*C+F
aux(24) =< B
aux(19) =< B+1
aux(26) =< B/2
aux(25) =< B/2+1/2
s(34) =< B/2+C
aux(30) =< C
aux(29) =< C+1
it(14) =< C/2
it(14) =< F+1
aux(32) =< -2*A+2*B+2
aux(33) =< -A+B+F+1
aux(34) =< A
aux(35) =< A+C
aux(36) =< 2*A-2*B+3*C
aux(37) =< B-C+3*F
aux(38) =< B+C
aux(39) =< 3/2*B
aux(40) =< F
s(25) =< aux(40)
it(15) =< aux(32)
s(30) =< aux(32)
it(15) =< aux(33)
s(30) =< aux(33)
aux(8) =< aux(34)
it(14) =< aux(34)
it(15) =< aux(34)
it(16) =< aux(34)
it(16) =< aux(35)
s(34) =< aux(35)
aux(7) =< aux(36)
it(15) =< aux(36)
aux(8) =< aux(19)
it(14) =< aux(19)
it(15) =< aux(19)
it(16) =< aux(19)
it(15) =< aux(37)
it(16) =< aux(37)
s(26) =< aux(37)
aux(7) =< aux(38)
it(15) =< aux(38)
it(16) =< aux(38)
s(33) =< aux(38)
aux(8) =< aux(24)
it(14) =< aux(24)
it(15) =< aux(24)
it(16) =< aux(24)
aux(8) =< aux(25)
it(14) =< aux(25)
it(15) =< aux(25)
aux(8) =< aux(26)
it(14) =< aux(26)
it(15) =< aux(26)
it(16) =< aux(39)
s(33) =< aux(39)
aux(8) =< aux(29)
it(15) =< aux(29)
aux(8) =< aux(30)
it(15) =< aux(30)
s(28) =< aux(30)
it(14) =< aux(40)
s(31) =< aux(8)
s(25) =< aux(7)* (1/2)
s(32) =< s(34)
s(32) =< s(33)
s(25) =< s(30)
s(27) =< s(30)
s(25) =< aux(7)
s(27) =< aux(7)

  with precondition: [F=D,A+C=B+E,A>=2,E>=1,C+1>=E,F+1>=E] 

* Chain [17]: 3
  with precondition: [A=1,B=0,C=0,D=0,E=1,F=0] 


#### Simplifying cost structure of CE 18 

#### Computing cost of phase [18,19,20] 
 * Renamed intermediate variables: 
[ (eq(21,1),s(28))>>s(35), (eq(21,1),s(26))>>s(36), (eq(21,1),aux(24))>>s(37), (eq(21,1),aux(19))>>s(38), (eq(21,1),aux(26))>>s(39), (eq(21,1),aux(25))>>s(40), (eq(21,1),s(34))>>s(41), (eq(21,1),aux(30))>>s(42), (eq(21,1),aux(29))>>s(43), (eq(21,1),it(14))>>s(44), (eq(21,1),aux(32))>>s(45), (eq(21,1),aux(33))>>s(46), (eq(21,1),aux(34))>>s(47), (eq(21,1),aux(35))>>s(48), (eq(21,1),aux(36))>>s(49), (eq(21,1),aux(37))>>s(50), (eq(21,1),aux(38))>>s(51), (eq(21,1),aux(39))>>s(52), (eq(21,1),aux(40))>>s(53), (eq(21,1),s(25))>>s(54), (eq(21,1),it(15))>>s(55), (eq(21,1),s(30))>>s(56), (eq(21,1),aux(8))>>s(57), (eq(21,1),it(16))>>s(58), (eq(21,1),aux(7))>>s(59), (eq(21,1),s(33))>>s(60), (eq(21,1),s(31))>>s(61), (eq(21,1),s(32))>>s(62), (eq(21,1),s(27))>>s(63)]
 * Renamed intermediate variables: 
[ (eq(21,2),it(9))>>s(64)]

#### Simplifying cost structure of CE 21 
 * Renamed intermediate variables: 
[ (it(18),s(45))>>s(65), (it(18),s(46))>>s(66), (it(18),s(48))>>s(67), (it(18),s(47))>>s(68), (it(18),s(36))>>s(69), (it(18),s(49))>>s(70), (it(18),s(50))>>s(71), (it(18),s(51))>>s(72), (it(18),s(37))>>s(73), (it(18),s(38))>>s(74), (it(18),s(41))>>s(75), (it(18),s(39))>>s(76), (it(18),s(40))>>s(77), (it(18),s(52))>>s(78), (it(18),s(42))>>s(79), (it(18),s(43))>>s(80), (it(18),s(44))>>s(81), (it(18),s(53))>>s(82), (it(18),aux(41))>>s(83), (it(18),s(35))>>s(84), (it(18),s(64))>>s(85), (it(18),s(54))>>s(86), (it(18),s(55))>>s(87), (it(18),s(56))>>s(88), (it(18),s(57))>>s(89), (it(18),s(58))>>s(90), (it(18),s(59))>>s(91), (it(18),s(60))>>s(92), (it(18),s(61))>>s(93), (it(18),s(62))>>s(94), (it(18),s(63))>>s(95)]
 * Renamed intermediate variables: 
[ (eq(20,1),s(28))>>s(96), (eq(20,1),s(26))>>s(97), (eq(20,1),aux(24))>>s(98), (eq(20,1),aux(19))>>s(99), (eq(20,1),aux(26))>>s(100), (eq(20,1),aux(25))>>s(101), (eq(20,1),s(34))>>s(102), (eq(20,1),aux(30))>>s(103), (eq(20,1),aux(29))>>s(104), (eq(20,1),it(14))>>s(105), (eq(20,1),aux(32))>>s(106), (eq(20,1),aux(33))>>s(107), (eq(20,1),aux(34))>>s(108), (eq(20,1),aux(35))>>s(109), (eq(20,1),aux(36))>>s(110), (eq(20,1),aux(37))>>s(111), (eq(20,1),aux(38))>>s(112), (eq(20,1),aux(39))>>s(113), (eq(20,1),aux(40))>>s(114), (eq(20,1),s(25))>>s(115), (eq(20,1),it(15))>>s(116), (eq(20,1),s(30))>>s(117), (eq(20,1),aux(8))>>s(118), (eq(20,1),it(16))>>s(119), (eq(20,1),aux(7))>>s(120), (eq(20,1),s(33))>>s(121), (eq(20,1),s(31))>>s(122), (eq(20,1),s(32))>>s(123), (eq(20,1),s(27))>>s(124)]

#### Simplifying cost structure of CE 20 
 * Joined equivalent variables [aux(43),s(99),s(109)] into aux(43)
 * Joined equivalent variables [aux(44),s(103),s(107)] into aux(44)
 * Renamed intermediate variables: 
[ (it(19),s(97))>>s(125), (it(19),s(111))>>s(126), (it(19),s(108))>>s(127), (it(19),s(112))>>s(128), (it(19),s(98))>>s(129), (it(19),s(102))>>s(130), (it(19),s(100))>>s(131), (it(19),s(101))>>s(132), (it(19),s(113))>>s(133), (it(19),s(104))>>s(134), (it(19),s(110))>>s(135), (it(19),s(106))>>s(136), (it(19),aux(42))>>s(137), (it(19),aux(43))>>s(138), (it(19),aux(44))>>s(139), (it(19),s(96))>>s(140), (it(19),s(116))>>s(141), (it(19),s(117))>>s(142), (it(19),s(118))>>s(143), (it(19),s(119))>>s(144), (it(19),s(120))>>s(145), (it(19),s(121))>>s(146), (it(19),s(122))>>s(147), (it(19),s(123))>>s(148), (it(19),s(124))>>s(149)]

#### Simplifying cost structure of CE 19 

#### Cost of loops [18,19,20] 

 * loop 18:append_all3(A,B,C,D,E,F,G) -> [append_all3(A',B',C',D',E',F',G')] 
5*s(84)+5*s(69)+11*s(81)+7*s(86)+11*s(87)+11*s(90)+5*s(93)+7*s(94)+7*s(95)+5*s(85)+11
  Such that:s(65) =< -2*B+2*C+2*B'-2*C'+2
s(66) =< -B+C+E+B'-C'-E'+1
s(67) =< B+D-B'-D'
s(68) =< B-B'
s(69) =< 2*B-2*C+2*D+E-2*B'+2*C'-2*D'-E'
s(70) =< 2*B-2*C+3*D-2*B'+2*C'-3*D'
s(71) =< C-D+3*E-C'+D'-3*E'
s(72) =< C+D-C'-D'
s(73) =< C-C'
s(74) =< C-C'+1
s(75) =< C/2+D-C'/2-D'
s(76) =< C/2-C'/2
s(77) =< C/2-C'/2+1/2
s(78) =< 3/2*C-3/2*C'
s(79) =< D-D'
s(80) =< D-D'+1
s(81) =< D/2-D'/2
s(82) =< E-E'
s(81) =< E-E'+1
s(83) =< B-C+D-B'+C'-D'
s(84) =< s(83)
s(85) =< s(83)
s(86) =< s(82)
s(87) =< s(65)
s(88) =< s(65)
s(87) =< s(66)
s(88) =< s(66)
s(89) =< s(68)
s(81) =< s(68)
s(87) =< s(68)
s(90) =< s(68)
s(90) =< s(67)
s(75) =< s(67)
s(91) =< s(70)
s(87) =< s(70)
s(89) =< s(74)
s(81) =< s(74)
s(87) =< s(74)
s(90) =< s(74)
s(87) =< s(71)
s(90) =< s(71)
s(69) =< s(71)
s(91) =< s(72)
s(87) =< s(72)
s(90) =< s(72)
s(92) =< s(72)
s(89) =< s(73)
s(81) =< s(73)
s(87) =< s(73)
s(90) =< s(73)
s(89) =< s(77)
s(81) =< s(77)
s(87) =< s(77)
s(89) =< s(76)
s(81) =< s(76)
s(87) =< s(76)
s(90) =< s(78)
s(92) =< s(78)
s(89) =< s(80)
s(87) =< s(80)
s(89) =< s(79)
s(87) =< s(79)
s(84) =< s(79)
s(81) =< s(82)
s(93) =< s(89)
s(86) =< s(91)* (1/2)
s(94) =< s(75)
s(94) =< s(92)
s(86) =< s(88)
s(95) =< s(88)
s(86) =< s(91)
s(95) =< s(91)

 * loop 19:append_all3(A,B,C,D,E,F,G) -> [append_all3(A',B',C',D',E',F',G')] 
5*s(140)+5*s(125)+11*s(141)+11*s(144)+5*s(147)+7*s(148)+7*s(149)+11
  Such that:s(125) =< 2
s(126) =< C-D-C'+D'
s(127) =< C-D-C'+D'+1
s(128) =< C+D-C'-D'
s(129) =< C-C'
s(130) =< C/2+D-C'/2-D'
s(131) =< C/2-C'/2
s(132) =< C/2-C'/2+1/2
s(133) =< 3/2*C-3/2*C'
s(134) =< D-D'+1
s(135) =< D-D'+2
s(136) =< 2*D-2*D'
s(137) =< 1
s(138) =< C-C'+1
s(139) =< D-D'
s(140) =< s(137)
s(141) =< s(136)
s(142) =< s(136)
s(141) =< s(139)
s(142) =< s(139)
s(143) =< s(127)
s(141) =< s(127)
s(144) =< s(127)
s(144) =< s(138)
s(130) =< s(138)
s(145) =< s(135)
s(141) =< s(135)
s(143) =< s(138)
s(141) =< s(138)
s(141) =< s(126)
s(144) =< s(126)
s(125) =< s(126)
s(145) =< s(128)
s(141) =< s(128)
s(144) =< s(128)
s(146) =< s(128)
s(143) =< s(129)
s(141) =< s(129)
s(144) =< s(129)
s(143) =< s(132)
s(141) =< s(132)
s(143) =< s(131)
s(141) =< s(131)
s(144) =< s(133)
s(146) =< s(133)
s(143) =< s(134)
s(141) =< s(134)
s(143) =< s(139)
s(140) =< s(139)
s(147) =< s(143)
s(148) =< s(130)
s(148) =< s(146)
s(149) =< s(142)
s(149) =< s(145)

 * loop 20:append_all3(A,B,C,D,E,F,G) -> [append_all3(A',B',C',D',E',F',G')] 
11
##### Pending set append_all3(A,B,C,D,E,F,G)
* Psum in Loop 18: [it(18)=<1,s(179)=< -2*B+2*C+2*B'-2*C'+2,s(178)=< -B+C+E+B'-C'-E'+1,s(180)=<B-C+D-B'+C'-D',s(176)=<B+D-B'-D',s(177)=<B-B',s(151)=<2*B-2*C+2*D+E-2*B'+2*C'-2*D'-E',s(175)=<2*B-2*C+3*D-2*B'+2*C'-3*D',s(173)=<C-D+3*E-C'+D'-3*E',s(172)=<C+D-C'-D',s(171)=<C-C',s(174)=<C-C'+1,s(163)=<C/2+D-C'/2-D',s(169)=<C/2-C'/2,s(170)=<C/2-C'/2+1/2,s(168)=<3/2*C-3/2*C',s(166)=<D-D',s(167)=<D-D'+1,s(152)=<D/2-D'/2,s(165)=<E-E',s(152)=<E-E'+1]
* Psum in Loop 19: [it(19)=<1,s(205)=<1,s(182)=<2,s(200)=<C-D-C'+D',s(203)=<C-D-C'+D'+1,s(199)=<C+D-C'-D',s(198)=<C-C',s(201)=<C-C'+1,s(191)=<C/2+D-C'/2-D',s(196)=<C/2-C'/2,s(197)=<C/2-C'/2+1/2,s(195)=<3/2*C-3/2*C',s(193)=<D-D',s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for it(18)=<1  in Loop 18 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative and bounds [it(20)] 
     - head Candidate: B+1 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative and bounds [it(20)] 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C+1 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative
     - head Candidate: D+1 
       - Loop 19 is collaborative and bounds [s(193)] 
       - Loop 20 is collaborative
     - head Candidate: E+1 
       - Loop 19 is collaborative
       - Loop 20 is collaborative
     - head Candidate: B/2+1/2 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative
     - tail Candidate: A-1 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative and bounds [it(20)] 
     - tail Candidate: B+1 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative and bounds [it(20)] 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C+1 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative
     - tail Candidate: D+1 
       - Loop 19 is collaborative and bounds [s(193)] 
       - Loop 20 is collaborative
     - tail Candidate: E+1 
       - Loop 19 is collaborative
       - Loop 20 is collaborative
     - tail Candidate: B/2+1/2 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative
 * Adding constraints: [it(18)+it(19)+it(20)=<A-1,it(18)+it(19)+it(20)=<B+1,it(18)+it(19)+it(20)=<A-1,it(18)+it(19)=<C+1,it(18)+s(193)=<D+1,it(18)=<E+1,it(18)+it(19)=<B/2+1/2,it(18)+it(19)+it(20)=<A-A',it(18)+it(19)+it(20)=<B-B',it(18)+it(19)+it(20)=<A-A',it(18)+it(19)=<C-C',it(18)+s(193)=<D-D',it(18)=<E-E',it(18)+it(19)=<B/2-B'/2] 

##### Pending set A
* Psum in Loop 18: [s(179)=< -2*B+2*C+2*B'-2*C'+2,s(178)=< -B+C+E+B'-C'-E'+1,s(180)=<B-C+D-B'+C'-D',s(176)=<B+D-B'-D',s(177)=<B-B',s(151)=<2*B-2*C+2*D+E-2*B'+2*C'-2*D'-E',s(175)=<2*B-2*C+3*D-2*B'+2*C'-3*D',s(173)=<C-D+3*E-C'+D'-3*E',s(172)=<C+D-C'-D',s(171)=<C-C',s(174)=<C-C'+1,s(163)=<C/2+D-C'/2-D',s(169)=<C/2-C'/2,s(170)=<C/2-C'/2+1/2,s(168)=<3/2*C-3/2*C',s(166)=<D-D',s(167)=<D-D'+1,s(152)=<D/2-D'/2,s(165)=<E-E',s(152)=<E-E'+1]
* Psum in Loop 19: [it(19)=<1,s(205)=<1,s(182)=<2,s(200)=<C-D-C'+D',s(203)=<C-D-C'+D'+1,s(199)=<C+D-C'-D',s(198)=<C-C',s(201)=<C-C'+1,s(191)=<C/2+D-C'/2-D',s(196)=<C/2-C'/2,s(197)=<C/2-C'/2+1/2,s(195)=<3/2*C-3/2*C',s(193)=<D-D',s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(179)=< -2*B+2*C+2*B'-2*C'+2  in Loop 18 
   - Applying inductive sum strategy 
     - head Candidate: 2*C-2 
       - Loop 19 is collaborative and bounds [s(193)] 
       - Loop 20 is collaborative
     - head Candidate: 2*D-2 
       - Loop 19 is collaborative
       - Loop 20 is collaborative
     - tail Candidate: 2*C-2 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative
     - tail Candidate: 2*D-2 
       - Loop 19 is collaborative and bounds [s(193)] 
       - Loop 20 is collaborative
 * Adding constraints: [s(179)+s(193)=<2*C-2,s(179)=<2*D-2,it(19)+s(179)=<2*C-2*C',s(179)+s(193)=<2*D-2*D'] 

##### Pending set A
* Psum in Loop 18: [s(178)=< -B+C+E+B'-C'-E'+1,s(180)=<B-C+D-B'+C'-D',s(176)=<B+D-B'-D',s(177)=<B-B',s(151)=<2*B-2*C+2*D+E-2*B'+2*C'-2*D'-E',s(175)=<2*B-2*C+3*D-2*B'+2*C'-3*D',s(173)=<C-D+3*E-C'+D'-3*E',s(172)=<C+D-C'-D',s(171)=<C-C',s(174)=<C-C'+1,s(163)=<C/2+D-C'/2-D',s(169)=<C/2-C'/2,s(170)=<C/2-C'/2+1/2,s(168)=<3/2*C-3/2*C',s(166)=<D-D',s(167)=<D-D'+1,s(152)=<D/2-D'/2,s(165)=<E-E',s(152)=<E-E'+1]
* Psum in Loop 19: [it(19)=<1,s(205)=<1,s(182)=<2,s(200)=<C-D-C'+D',s(203)=<C-D-C'+D'+1,s(199)=<C+D-C'-D',s(198)=<C-C',s(201)=<C-C'+1,s(191)=<C/2+D-C'/2-D',s(196)=<C/2-C'/2,s(197)=<C/2-C'/2+1/2,s(195)=<3/2*C-3/2*C',s(193)=<D-D',s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(178)=< -B+C+E+B'-C'-E'+1  in Loop 18 
   - Applying inductive sum strategy 
     - head Candidate: D+E-1 
       - Loop 19 is collaborative
       - Loop 20 is collaborative
     - head Candidate: C+E-1 
       - Loop 19 is collaborative and bounds [s(193)] 
       - Loop 20 is collaborative
     - tail Candidate: D+E-1 
       - Loop 19 is collaborative and bounds [s(193)] 
       - Loop 20 is collaborative
     - tail Candidate: C+E-1 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative
 * Adding constraints: [s(178)=<D+E-1,s(178)+s(193)=<C+E-1,s(178)+s(193)=<D+E-D'-E',it(19)+s(178)=<C+E-C'-E'] 

##### Pending set A
* Psum in Loop 18: [s(180)=<B-C+D-B'+C'-D',s(176)=<B+D-B'-D',s(177)=<B-B',s(151)=<2*B-2*C+2*D+E-2*B'+2*C'-2*D'-E',s(175)=<2*B-2*C+3*D-2*B'+2*C'-3*D',s(173)=<C-D+3*E-C'+D'-3*E',s(172)=<C+D-C'-D',s(171)=<C-C',s(174)=<C-C'+1,s(163)=<C/2+D-C'/2-D',s(169)=<C/2-C'/2,s(170)=<C/2-C'/2+1/2,s(168)=<3/2*C-3/2*C',s(166)=<D-D',s(167)=<D-D'+1,s(152)=<D/2-D'/2,s(165)=<E-E',s(152)=<E-E'+1]
* Psum in Loop 19: [it(19)=<1,s(205)=<1,s(182)=<2,s(200)=<C-D-C'+D',s(203)=<C-D-C'+D'+1,s(199)=<C+D-C'-D',s(198)=<C-C',s(201)=<C-C'+1,s(191)=<C/2+D-C'/2-D',s(196)=<C/2-C'/2,s(197)=<C/2-C'/2+1/2,s(195)=<3/2*C-3/2*C',s(193)=<D-D',s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(180)=<B-C+D-B'+C'-D'  in Loop 18 
   - Applying inductive sum strategy 
     - head Candidate: 2*E 
       - Loop 19 is collaborative
       - Loop 20 is collaborative
     - head Candidate: -A+B-C+D+E+1 
       - Loop 19 is collaborative
       - Loop 20 is collaborative
     - tail Candidate: 2*E 
       - Loop 19 is collaborative
       - Loop 20 is collaborative
     - tail Candidate: -A+B-C+D+E+1 
       - Loop 19 is collaborative
       - Loop 20 is collaborative
 * Adding constraints: [s(180)=<2*E,s(180)=< -A+B-C+D+E+1,s(180)=<2*E-2*E',s(180)=< -A+B-C+D+E+A'-B'+C'-D'-E'] 

##### Pending set A
* Psum in Loop 18: [s(176)=<B+D-B'-D',s(177)=<B-B',s(151)=<2*B-2*C+2*D+E-2*B'+2*C'-2*D'-E',s(175)=<2*B-2*C+3*D-2*B'+2*C'-3*D',s(173)=<C-D+3*E-C'+D'-3*E',s(172)=<C+D-C'-D',s(171)=<C-C',s(174)=<C-C'+1,s(163)=<C/2+D-C'/2-D',s(169)=<C/2-C'/2,s(170)=<C/2-C'/2+1/2,s(168)=<3/2*C-3/2*C',s(166)=<D-D',s(167)=<D-D'+1,s(152)=<D/2-D'/2,s(165)=<E-E',s(152)=<E-E'+1]
* Psum in Loop 19: [it(19)=<1,s(205)=<1,s(182)=<2,s(200)=<C-D-C'+D',s(203)=<C-D-C'+D'+1,s(199)=<C+D-C'-D',s(198)=<C-C',s(201)=<C-C'+1,s(191)=<C/2+D-C'/2-D',s(196)=<C/2-C'/2,s(197)=<C/2-C'/2+1/2,s(195)=<3/2*C-3/2*C',s(193)=<D-D',s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(176)=<B+D-B'-D'  in Loop 18 
   - Applying inductive sum strategy 
     - head Candidate: C+2*E 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative
     - head Candidate: -A+B+D+E+1 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative
     - tail Candidate: C+2*E 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative
     - tail Candidate: -A+B+D+E+1 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative
 * Adding constraints: [it(19)+s(176)=<C+2*E,it(19)+s(176)=< -A+B+D+E+1,it(19)+s(176)=<C+2*E-C'-2*E',it(19)+s(176)=< -A+B+D+E+A'-B'-D'-E'] 

##### Pending set A
* Psum in Loop 18: [s(177)=<B-B',s(151)=<2*B-2*C+2*D+E-2*B'+2*C'-2*D'-E',s(175)=<2*B-2*C+3*D-2*B'+2*C'-3*D',s(173)=<C-D+3*E-C'+D'-3*E',s(172)=<C+D-C'-D',s(171)=<C-C',s(174)=<C-C'+1,s(163)=<C/2+D-C'/2-D',s(169)=<C/2-C'/2,s(170)=<C/2-C'/2+1/2,s(168)=<3/2*C-3/2*C',s(166)=<D-D',s(167)=<D-D'+1,s(152)=<D/2-D'/2,s(165)=<E-E',s(152)=<E-E'+1]
* Psum in Loop 19: [it(19)=<1,s(205)=<1,s(182)=<2,s(200)=<C-D-C'+D',s(203)=<C-D-C'+D'+1,s(199)=<C+D-C'-D',s(198)=<C-C',s(201)=<C-C'+1,s(191)=<C/2+D-C'/2-D',s(196)=<C/2-C'/2,s(197)=<C/2-C'/2+1/2,s(195)=<3/2*C-3/2*C',s(193)=<D-D',s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(177)=<B-B'  in Loop 18 
   - Applying inductive sum strategy 
     - head Candidate: 2*C-2*D+2*E 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative
     - head Candidate: -2*A+2*B-C+D+2 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative
     - tail Candidate: 2*C-2*D+2*E 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative
     - tail Candidate: -2*A+2*B-C+D+2 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative
 * Adding constraints: [it(19)+s(177)=<2*C-2*D+2*E,it(19)+s(177)=< -2*A+2*B-C+D+2,it(19)+s(177)=<2*C-2*D+2*E-2*C'+2*D'-2*E',it(19)+s(177)=< -2*A+2*B-C+D+2*A'-2*B'+C'-D'] 

##### Pending set A
* Psum in Loop 18: [s(151)=<2*B-2*C+2*D+E-2*B'+2*C'-2*D'-E',s(175)=<2*B-2*C+3*D-2*B'+2*C'-3*D',s(173)=<C-D+3*E-C'+D'-3*E',s(172)=<C+D-C'-D',s(171)=<C-C',s(174)=<C-C'+1,s(163)=<C/2+D-C'/2-D',s(169)=<C/2-C'/2,s(170)=<C/2-C'/2+1/2,s(168)=<3/2*C-3/2*C',s(166)=<D-D',s(167)=<D-D'+1,s(152)=<D/2-D'/2,s(165)=<E-E',s(152)=<E-E'+1]
* Psum in Loop 19: [it(19)=<1,s(205)=<1,s(182)=<2,s(200)=<C-D-C'+D',s(203)=<C-D-C'+D'+1,s(199)=<C+D-C'-D',s(198)=<C-C',s(201)=<C-C'+1,s(191)=<C/2+D-C'/2-D',s(196)=<C/2-C'/2,s(197)=<C/2-C'/2+1/2,s(195)=<3/2*C-3/2*C',s(193)=<D-D',s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(151)=<2*B-2*C+2*D+E-2*B'+2*C'-2*D'-E'  in Loop 18 
   - Applying inductive sum strategy 
     - head Candidate: 4*D+E 
       - Loop 19 is collaborative and bounds [s(193)] 
       - Loop 20 is collaborative
     - head Candidate: -2*A+2*B-2*C+4*D+E+2 
       - Loop 19 is collaborative and bounds [s(193)] 
       - Loop 20 is collaborative
     - tail Candidate: 4*D+E 
       - Loop 19 is collaborative and bounds [s(193)] 
       - Loop 20 is collaborative
     - tail Candidate: -2*A+2*B-2*C+4*D+E+2 
       - Loop 19 is collaborative and bounds [s(193)] 
       - Loop 20 is collaborative
 * Adding constraints: [s(151)+s(193)=<4*D+E,s(151)+s(193)=< -2*A+2*B-2*C+4*D+E+2,s(151)+s(193)=<4*D+E-4*D'-E',s(151)+s(193)=< -2*A+2*B-2*C+4*D+E+2*A'-2*B'+2*C'-4*D'-E'] 

##### Pending set A
* Psum in Loop 18: [s(175)=<2*B-2*C+3*D-2*B'+2*C'-3*D',s(173)=<C-D+3*E-C'+D'-3*E',s(172)=<C+D-C'-D',s(171)=<C-C',s(174)=<C-C'+1,s(163)=<C/2+D-C'/2-D',s(169)=<C/2-C'/2,s(170)=<C/2-C'/2+1/2,s(168)=<3/2*C-3/2*C',s(166)=<D-D',s(167)=<D-D'+1,s(152)=<D/2-D'/2,s(165)=<E-E',s(152)=<E-E'+1]
* Psum in Loop 19: [it(19)=<1,s(205)=<1,s(182)=<2,s(200)=<C-D-C'+D',s(203)=<C-D-C'+D'+1,s(199)=<C+D-C'-D',s(198)=<C-C',s(201)=<C-C'+1,s(191)=<C/2+D-C'/2-D',s(196)=<C/2-C'/2,s(197)=<C/2-C'/2+1/2,s(195)=<3/2*C-3/2*C',s(193)=<D-D',s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(175)=<2*B-2*C+3*D-2*B'+2*C'-3*D'  in Loop 18 
   - Applying inductive sum strategy 
     - head Candidate: -2*A+2*B-2*C+3*D+2*E+2 
       - Loop 19 is collaborative and bounds [s(193)] 
       - Loop 20 is collaborative
     - head Candidate: 2*C-D+4*E 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative
     - tail Candidate: -2*A+2*B-2*C+3*D+2*E+2 
       - Loop 19 is collaborative and bounds [s(193)] 
       - Loop 20 is collaborative
     - tail Candidate: 2*C-D+4*E 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative
 * Adding constraints: [s(175)+s(193)=< -2*A+2*B-2*C+3*D+2*E+2,it(19)+s(175)=<2*C-D+4*E,s(175)+s(193)=< -2*A+2*B-2*C+3*D+2*E+2*A'-2*B'+2*C'-3*D'-2*E',it(19)+s(175)=<2*C-D+4*E-2*C'+D'-4*E'] 

##### Pending set A
* Psum in Loop 18: [s(173)=<C-D+3*E-C'+D'-3*E',s(172)=<C+D-C'-D',s(171)=<C-C',s(174)=<C-C'+1,s(163)=<C/2+D-C'/2-D',s(169)=<C/2-C'/2,s(170)=<C/2-C'/2+1/2,s(168)=<3/2*C-3/2*C',s(166)=<D-D',s(167)=<D-D'+1,s(152)=<D/2-D'/2,s(165)=<E-E',s(152)=<E-E'+1]
* Psum in Loop 19: [it(19)=<1,s(205)=<1,s(182)=<2,s(200)=<C-D-C'+D',s(203)=<C-D-C'+D'+1,s(199)=<C+D-C'-D',s(198)=<C-C',s(201)=<C-C'+1,s(191)=<C/2+D-C'/2-D',s(196)=<C/2-C'/2,s(197)=<C/2-C'/2+1/2,s(195)=<3/2*C-3/2*C',s(193)=<D-D',s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(173)=<C-D+3*E-C'+D'-3*E'  in Loop 18 
   - Applying inductive sum strategy 
     - head Candidate: C-D+3*E 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative
     - tail Candidate: C-D+3*E 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative
 * Adding constraints: [it(19)+s(173)=<C-D+3*E,it(19)+s(173)=<C-D+3*E-C'+D'-3*E'] 

##### Pending set A
* Psum in Loop 18: [s(172)=<C+D-C'-D',s(171)=<C-C',s(174)=<C-C'+1,s(163)=<C/2+D-C'/2-D',s(169)=<C/2-C'/2,s(170)=<C/2-C'/2+1/2,s(168)=<3/2*C-3/2*C',s(166)=<D-D',s(167)=<D-D'+1,s(152)=<D/2-D'/2,s(165)=<E-E',s(152)=<E-E'+1]
* Psum in Loop 19: [it(19)=<1,s(205)=<1,s(182)=<2,s(200)=<C-D-C'+D',s(203)=<C-D-C'+D'+1,s(199)=<C+D-C'-D',s(198)=<C-C',s(201)=<C-C'+1,s(191)=<C/2+D-C'/2-D',s(196)=<C/2-C'/2,s(197)=<C/2-C'/2+1/2,s(195)=<3/2*C-3/2*C',s(193)=<D-D',s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(172)=<C+D-C'-D'  in Loop 18 
   - Applying inductive sum strategy 
     - head Candidate: C+D 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative
     - tail Candidate: C+D 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative
 * Adding constraints: [it(19)+s(172)=<C+D,it(19)+s(172)=<C+D-C'-D'] 

##### Pending set A
* Psum in Loop 18: [s(171)=<C-C',s(174)=<C-C'+1,s(163)=<C/2+D-C'/2-D',s(169)=<C/2-C'/2,s(170)=<C/2-C'/2+1/2,s(168)=<3/2*C-3/2*C',s(166)=<D-D',s(167)=<D-D'+1,s(152)=<D/2-D'/2,s(165)=<E-E',s(152)=<E-E'+1]
* Psum in Loop 19: [it(19)=<1,s(205)=<1,s(182)=<2,s(200)=<C-D-C'+D',s(203)=<C-D-C'+D'+1,s(199)=<C+D-C'-D',s(198)=<C-C',s(201)=<C-C'+1,s(191)=<C/2+D-C'/2-D',s(196)=<C/2-C'/2,s(197)=<C/2-C'/2+1/2,s(195)=<3/2*C-3/2*C',s(193)=<D-D',s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(171)=<C-C'  in Loop 18 
   - Applying inductive sum strategy 
     - head Candidate: C 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative
     - tail Candidate: C 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative
 * Adding constraints: [it(19)+s(171)=<C,it(19)+s(171)=<C-C'] 

##### Pending set A
* Psum in Loop 18: [s(174)=<C-C'+1,s(163)=<C/2+D-C'/2-D',s(169)=<C/2-C'/2,s(170)=<C/2-C'/2+1/2,s(168)=<3/2*C-3/2*C',s(166)=<D-D',s(167)=<D-D'+1,s(152)=<D/2-D'/2,s(165)=<E-E',s(152)=<E-E'+1]
* Psum in Loop 19: [it(19)=<1,s(205)=<1,s(182)=<2,s(200)=<C-D-C'+D',s(203)=<C-D-C'+D'+1,s(199)=<C+D-C'-D',s(198)=<C-C',s(201)=<C-C'+1,s(191)=<C/2+D-C'/2-D',s(196)=<C/2-C'/2,s(197)=<C/2-C'/2+1/2,s(195)=<3/2*C-3/2*C',s(193)=<D-D',s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(174)=<C-C'+1  in Loop 18 
   - Applying inductive sum strategy 
     - head Candidate: 2*C 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative
     - head Candidate: -A+B+C+1 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative
     - tail Candidate: 2*C 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative
     - tail Candidate: -A+B+C+1 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative
 * Adding constraints: [it(19)+s(174)=<2*C,it(19)+s(174)=< -A+B+C+1,it(19)+s(174)=<2*C-2*C',it(19)+s(174)=< -A+B+C+A'-B'-C'] 

##### Pending set A
* Psum in Loop 18: [s(163)=<C/2+D-C'/2-D',s(169)=<C/2-C'/2,s(170)=<C/2-C'/2+1/2,s(168)=<3/2*C-3/2*C',s(166)=<D-D',s(167)=<D-D'+1,s(152)=<D/2-D'/2,s(165)=<E-E',s(152)=<E-E'+1]
* Psum in Loop 19: [it(19)=<1,s(205)=<1,s(182)=<2,s(200)=<C-D-C'+D',s(203)=<C-D-C'+D'+1,s(199)=<C+D-C'-D',s(198)=<C-C',s(201)=<C-C'+1,s(191)=<C/2+D-C'/2-D',s(196)=<C/2-C'/2,s(197)=<C/2-C'/2+1/2,s(195)=<3/2*C-3/2*C',s(193)=<D-D',s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(163)=<C/2+D-C'/2-D'  in Loop 18 
   - Applying inductive sum strategy 
     - head Candidate: C/2+D 
       - Loop 19 is collaborative and bounds [s(191)] 
       - Loop 20 is collaborative
     - tail Candidate: C/2+D 
       - Loop 19 is collaborative and bounds [s(191)] 
       - Loop 20 is collaborative
 * Adding constraints: [s(163)+s(191)=<C/2+D,s(163)+s(191)=<C/2+D-C'/2-D'] 

##### Pending set A
* Psum in Loop 18: [s(169)=<C/2-C'/2,s(170)=<C/2-C'/2+1/2,s(168)=<3/2*C-3/2*C',s(166)=<D-D',s(167)=<D-D'+1,s(152)=<D/2-D'/2,s(165)=<E-E',s(152)=<E-E'+1]
* Psum in Loop 19: [it(19)=<1,s(205)=<1,s(182)=<2,s(200)=<C-D-C'+D',s(203)=<C-D-C'+D'+1,s(199)=<C+D-C'-D',s(198)=<C-C',s(201)=<C-C'+1,s(191)=<C/2+D-C'/2-D',s(196)=<C/2-C'/2,s(197)=<C/2-C'/2+1/2,s(195)=<3/2*C-3/2*C',s(193)=<D-D',s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(169)=<C/2-C'/2  in Loop 18 
   - Found a solution using cacheing 
 * Adding constraints: [s(169)=<aux(45)* (1/2),aux(45)+it(19)=<C,aux(45)+it(19)=<C-C'] 

##### Pending set A
* Psum in Loop 18: [s(170)=<C/2-C'/2+1/2,s(168)=<3/2*C-3/2*C',s(166)=<D-D',s(167)=<D-D'+1,s(152)=<D/2-D'/2,s(165)=<E-E',s(152)=<E-E'+1]
* Psum in Loop 19: [it(19)=<1,s(205)=<1,s(182)=<2,s(200)=<C-D-C'+D',s(203)=<C-D-C'+D'+1,s(199)=<C+D-C'-D',s(198)=<C-C',s(201)=<C-C'+1,s(191)=<C/2+D-C'/2-D',s(196)=<C/2-C'/2,s(197)=<C/2-C'/2+1/2,s(195)=<3/2*C-3/2*C',s(193)=<D-D',s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(170)=<C/2-C'/2+1/2  in Loop 18 
   - Found a solution using cacheing 
 * Adding constraints: [s(170)=<aux(46)* (1/2),aux(46)+it(19)=<2*C,aux(46)+it(19)=< -A+B+C+1,aux(46)+it(19)=<2*C-2*C',aux(46)+it(19)=< -A+B+C+A'-B'-C'] 

##### Pending set A
* Psum in Loop 18: [s(168)=<3/2*C-3/2*C',s(166)=<D-D',s(167)=<D-D'+1,s(152)=<D/2-D'/2,s(165)=<E-E',s(152)=<E-E'+1]
* Psum in Loop 19: [it(19)=<1,s(205)=<1,s(182)=<2,s(200)=<C-D-C'+D',s(203)=<C-D-C'+D'+1,s(199)=<C+D-C'-D',s(198)=<C-C',s(201)=<C-C'+1,s(191)=<C/2+D-C'/2-D',s(196)=<C/2-C'/2,s(197)=<C/2-C'/2+1/2,s(195)=<3/2*C-3/2*C',s(193)=<D-D',s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(168)=<3/2*C-3/2*C'  in Loop 18 
   - Found a solution using cacheing 
 * Adding constraints: [s(168)=<aux(47)* (3/2),aux(47)+it(19)=<C,aux(47)+it(19)=<C-C'] 

##### Pending set A
* Psum in Loop 18: [s(166)=<D-D',s(167)=<D-D'+1,s(152)=<D/2-D'/2,s(165)=<E-E',s(152)=<E-E'+1]
* Psum in Loop 19: [it(19)=<1,s(205)=<1,s(182)=<2,s(200)=<C-D-C'+D',s(203)=<C-D-C'+D'+1,s(199)=<C+D-C'-D',s(198)=<C-C',s(201)=<C-C'+1,s(191)=<C/2+D-C'/2-D',s(196)=<C/2-C'/2,s(197)=<C/2-C'/2+1/2,s(195)=<3/2*C-3/2*C',s(193)=<D-D',s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(166)=<D-D'  in Loop 18 
   - Applying inductive sum strategy 
     - head Candidate: D 
       - Loop 19 is collaborative and bounds [s(193)] 
       - Loop 20 is collaborative
     - tail Candidate: D 
       - Loop 19 is collaborative and bounds [s(193)] 
       - Loop 20 is collaborative
 * Adding constraints: [s(166)+s(193)=<D,s(166)+s(193)=<D-D'] 

##### Pending set A
* Psum in Loop 18: [s(167)=<D-D'+1,s(152)=<D/2-D'/2,s(165)=<E-E',s(152)=<E-E'+1]
* Psum in Loop 19: [it(19)=<1,s(205)=<1,s(182)=<2,s(200)=<C-D-C'+D',s(203)=<C-D-C'+D'+1,s(199)=<C+D-C'-D',s(198)=<C-C',s(201)=<C-C'+1,s(191)=<C/2+D-C'/2-D',s(196)=<C/2-C'/2,s(197)=<C/2-C'/2+1/2,s(195)=<3/2*C-3/2*C',s(193)=<D-D',s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(167)=<D-D'+1  in Loop 18 
   - Applying inductive sum strategy 
     - head Candidate: A+D-1 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative and bounds [it(20)] 
     - head Candidate: -A+B-C+2*D+1 
       - Loop 19 is collaborative and bounds [s(193)] 
       - Loop 20 is collaborative
     - tail Candidate: A+D-1 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative and bounds [it(20)] 
     - tail Candidate: -A+B-C+2*D+1 
       - Loop 19 is collaborative and bounds [s(193)] 
       - Loop 20 is collaborative
 * Adding constraints: [it(19)+it(20)+s(167)=<A+D-1,s(167)+s(193)=< -A+B-C+2*D+1,it(19)+it(20)+s(167)=<A+D-A'-D',s(167)+s(193)=< -A+B-C+2*D+A'-B'+C'-2*D'] 

##### Pending set A
* Psum in Loop 18: [s(152)=<D/2-D'/2,s(165)=<E-E',s(152)=<E-E'+1]
* Psum in Loop 19: [it(19)=<1,s(205)=<1,s(182)=<2,s(200)=<C-D-C'+D',s(203)=<C-D-C'+D'+1,s(199)=<C+D-C'-D',s(198)=<C-C',s(201)=<C-C'+1,s(191)=<C/2+D-C'/2-D',s(196)=<C/2-C'/2,s(197)=<C/2-C'/2+1/2,s(195)=<3/2*C-3/2*C',s(193)=<D-D',s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(152)=<D/2-D'/2  in Loop 18 
   - Found a solution using cacheing 
 * Adding constraints: [s(152)=<aux(48)* (1/2),aux(48)+s(193)=<D,aux(48)+s(193)=<D-D'] 

##### Pending set A
* Psum in Loop 18: [s(165)=<E-E',s(152)=<E-E'+1]
* Psum in Loop 19: [it(19)=<1,s(205)=<1,s(182)=<2,s(200)=<C-D-C'+D',s(203)=<C-D-C'+D'+1,s(199)=<C+D-C'-D',s(198)=<C-C',s(201)=<C-C'+1,s(191)=<C/2+D-C'/2-D',s(196)=<C/2-C'/2,s(197)=<C/2-C'/2+1/2,s(195)=<3/2*C-3/2*C',s(193)=<D-D',s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(165)=<E-E'  in Loop 18 
   - Applying inductive sum strategy 
     - head Candidate: E 
       - Loop 19 is collaborative
       - Loop 20 is collaborative
     - tail Candidate: E 
       - Loop 19 is collaborative
       - Loop 20 is collaborative
 * Adding constraints: [s(165)=<E,s(165)=<E-E'] 

##### Pending set A
* Psum in Loop 18: [s(152)=<E-E'+1]
* Psum in Loop 19: [it(19)=<1,s(205)=<1,s(182)=<2,s(200)=<C-D-C'+D',s(203)=<C-D-C'+D'+1,s(199)=<C+D-C'-D',s(198)=<C-C',s(201)=<C-C'+1,s(191)=<C/2+D-C'/2-D',s(196)=<C/2-C'/2,s(197)=<C/2-C'/2+1/2,s(195)=<3/2*C-3/2*C',s(193)=<D-D',s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(152)=<E-E'+1  in Loop 18 
   - Applying inductive sum strategy 
     - head Candidate: B/2-C/2+D/2+E 
       - Loop 19 is collaborative
       - Loop 20 is collaborative
     - head Candidate: C-D+2*E 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative
     - tail Candidate: B/2-C/2+D/2+E 
       - Loop 19 is collaborative
       - Loop 20 is collaborative
     - tail Candidate: C-D+2*E 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative
 * Adding constraints: [s(152)=<B/2-C/2+D/2+E,it(19)+s(152)=<C-D+2*E,s(152)=<B/2-C/2+D/2+E-B'/2+C'/2-D'/2-E',it(19)+s(152)=<C-D+2*E-C'+D'-2*E'] 

##### Pending set A
* Psum in Loop 19: [it(19)=<1,s(205)=<1,s(182)=<2,s(200)=<C-D-C'+D',s(203)=<C-D-C'+D'+1,s(199)=<C+D-C'-D',s(198)=<C-C',s(201)=<C-C'+1,s(191)=<C/2+D-C'/2-D',s(196)=<C/2-C'/2,s(197)=<C/2-C'/2+1/2,s(195)=<3/2*C-3/2*C',s(193)=<D-D',s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for it(19)=<1  in Loop 19 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(18)+it(19)+it(20)=<A-1,it(18)+it(19)+it(20)=<B+1,it(18)+it(19)+it(20)=<A-1,it(18)+it(19)=<C+1,it(18)+it(19)=<B/2+1/2,it(18)+it(19)+it(20)=<A-A',it(18)+it(19)+it(20)=<B-B',it(18)+it(19)+it(20)=<A-A',it(18)+it(19)=<C-C',it(18)+it(19)=<B/2-B'/2] 

##### Pending set A
* Psum in Loop 19: [s(205)=<1,s(182)=<2,s(200)=<C-D-C'+D',s(203)=<C-D-C'+D'+1,s(199)=<C+D-C'-D',s(198)=<C-C',s(201)=<C-C'+1,s(191)=<C/2+D-C'/2-D',s(196)=<C/2-C'/2,s(197)=<C/2-C'/2+1/2,s(195)=<3/2*C-3/2*C',s(193)=<D-D',s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(205)=<1  in Loop 19 
   - Found a solution using cacheing 
 * Adding constraints: [s(205)=<aux(49),aux(49)+it(18)+it(20)=<A-1,aux(49)+it(18)+it(20)=<B+1,aux(49)+it(18)+it(20)=<A-1,aux(49)+it(18)=<C+1,aux(49)+it(18)=<B/2+1/2,aux(49)+it(18)+it(20)=<A-A',aux(49)+it(18)+it(20)=<B-B',aux(49)+it(18)+it(20)=<A-A',aux(49)+it(18)=<C-C',aux(49)+it(18)=<B/2-B'/2] 

##### Pending set A
* Psum in Loop 19: [s(182)=<2,s(200)=<C-D-C'+D',s(203)=<C-D-C'+D'+1,s(199)=<C+D-C'-D',s(198)=<C-C',s(201)=<C-C'+1,s(191)=<C/2+D-C'/2-D',s(196)=<C/2-C'/2,s(197)=<C/2-C'/2+1/2,s(195)=<3/2*C-3/2*C',s(193)=<D-D',s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(182)=<2  in Loop 19 
   - Found a solution using cacheing 
 * Adding constraints: [s(182)=<aux(50)*2,aux(50)+it(18)+it(20)=<A-1,aux(50)+it(18)+it(20)=<B+1,aux(50)+it(18)+it(20)=<A-1,aux(50)+it(18)=<C+1,aux(50)+it(18)=<B/2+1/2,aux(50)+it(18)+it(20)=<A-A',aux(50)+it(18)+it(20)=<B-B',aux(50)+it(18)+it(20)=<A-A',aux(50)+it(18)=<C-C',aux(50)+it(18)=<B/2-B'/2] 

##### Pending set A
* Psum in Loop 19: [s(200)=<C-D-C'+D',s(203)=<C-D-C'+D'+1,s(199)=<C+D-C'-D',s(198)=<C-C',s(201)=<C-C'+1,s(191)=<C/2+D-C'/2-D',s(196)=<C/2-C'/2,s(197)=<C/2-C'/2+1/2,s(195)=<3/2*C-3/2*C',s(193)=<D-D',s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(200)=<C-D-C'+D'  in Loop 19 
   - Applying inductive sum strategy 
     - head Candidate: B-1 
       - Loop 18 is collaborative
       - Loop 20 is collaborative
     - head Candidate: -A+B+1 
       - Loop 18 is collaborative
       - Loop 20 is collaborative
     - tail Candidate: B-1 
       - Loop 18 is collaborative
       - Loop 20 is collaborative and bounds [it(20)] 
     - tail Candidate: -A+B+1 
       - Loop 18 is collaborative
       - Loop 20 is collaborative
 * Adding constraints: [s(200)=<B-1,s(200)=< -A+B+1,it(20)+s(200)=<B-B',s(200)=< -A+B+A'-B'] 

##### Pending set A
* Psum in Loop 19: [s(203)=<C-D-C'+D'+1,s(199)=<C+D-C'-D',s(198)=<C-C',s(201)=<C-C'+1,s(191)=<C/2+D-C'/2-D',s(196)=<C/2-C'/2,s(197)=<C/2-C'/2+1/2,s(195)=<3/2*C-3/2*C',s(193)=<D-D',s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(203)=<C-D-C'+D'+1  in Loop 19 
   - Applying inductive sum strategy 
     - head Candidate: A+C-1 
       - Loop 18 is collaborative
       - Loop 20 is collaborative and bounds [it(20)] 
     - head Candidate: A+C-D+E-1 
       - Loop 18 is collaborative
       - Loop 20 is collaborative and bounds [it(20)] 
     - tail Candidate: A+C-1 
       - Loop 18 is collaborative
       - Loop 20 is collaborative and bounds [it(20)] 
     - tail Candidate: A+C-D+E-1 
       - Loop 18 is collaborative
       - Loop 20 is collaborative and bounds [it(20)] 
 * Adding constraints: [it(20)+s(203)=<A+C-1,it(20)+s(203)=<A+C-D+E-1,it(20)+s(203)=<A+C-A'-C',it(20)+s(203)=<A+C-D+E-A'-C'+D'-E'] 

##### Pending set A
* Psum in Loop 19: [s(199)=<C+D-C'-D',s(198)=<C-C',s(201)=<C-C'+1,s(191)=<C/2+D-C'/2-D',s(196)=<C/2-C'/2,s(197)=<C/2-C'/2+1/2,s(195)=<3/2*C-3/2*C',s(193)=<D-D',s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(199)=<C+D-C'-D'  in Loop 19 
   - Applying inductive sum strategy 
     - head Candidate: 2*C-1 
       - Loop 18 is collaborative
       - Loop 20 is collaborative
     - head Candidate: A-B+2*C-1 
       - Loop 18 is collaborative
       - Loop 20 is collaborative
     - tail Candidate: 2*C-1 
       - Loop 18 is collaborative
       - Loop 20 is collaborative
     - tail Candidate: A-B+2*C-1 
       - Loop 18 is collaborative
       - Loop 20 is collaborative
 * Adding constraints: [s(199)=<2*C-1,s(199)=<A-B+2*C-1,s(199)=<2*C-2*C',s(199)=<A-B+2*C-A'+B'-2*C'] 

##### Pending set A
* Psum in Loop 19: [s(198)=<C-C',s(201)=<C-C'+1,s(191)=<C/2+D-C'/2-D',s(196)=<C/2-C'/2,s(197)=<C/2-C'/2+1/2,s(195)=<3/2*C-3/2*C',s(193)=<D-D',s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(198)=<C-C'  in Loop 19 
   - Applying inductive sum strategy 
     - head Candidate: C 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [s(171)+s(198)=<C,s(171)+s(198)=<C-C'] 

##### Pending set A
* Psum in Loop 19: [s(201)=<C-C'+1,s(191)=<C/2+D-C'/2-D',s(196)=<C/2-C'/2,s(197)=<C/2-C'/2+1/2,s(195)=<3/2*C-3/2*C',s(193)=<D-D',s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(201)=<C-C'+1  in Loop 19 
   - Applying inductive sum strategy 
     - head Candidate: B+D 
       - Loop 18 is collaborative
       - Loop 20 is collaborative and bounds [it(20)] 
     - head Candidate: 2*C 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+D 
       - Loop 18 is collaborative
       - Loop 20 is collaborative and bounds [it(20)] 
     - tail Candidate: 2*C 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(20)+s(201)=<B+D,s(174)+s(201)=<2*C,it(20)+s(201)=<B+D-B'-D',s(174)+s(201)=<2*C-2*C'] 

##### Pending set A
* Psum in Loop 19: [s(191)=<C/2+D-C'/2-D',s(196)=<C/2-C'/2,s(197)=<C/2-C'/2+1/2,s(195)=<3/2*C-3/2*C',s(193)=<D-D',s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(191)=<C/2+D-C'/2-D'  in Loop 19 
   - Applying inductive sum strategy 
     - head Candidate: 3/2*C-1 
       - Loop 18 is collaborative
       - Loop 20 is collaborative
     - head Candidate: A-B+3/2*C-1 
       - Loop 18 is collaborative
       - Loop 20 is collaborative
     - tail Candidate: 3/2*C-1 
       - Loop 18 is collaborative
       - Loop 20 is collaborative
     - tail Candidate: A-B+3/2*C-1 
       - Loop 18 is collaborative
       - Loop 20 is collaborative
 * Adding constraints: [s(191)=<3/2*C-1,s(191)=<A-B+3/2*C-1,s(191)=<3/2*C-3/2*C',s(191)=<A-B+3/2*C-A'+B'-3/2*C'] 

##### Pending set A
* Psum in Loop 19: [s(196)=<C/2-C'/2,s(197)=<C/2-C'/2+1/2,s(195)=<3/2*C-3/2*C',s(193)=<D-D',s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(196)=<C/2-C'/2  in Loop 19 
   - Found a solution using cacheing 
 * Adding constraints: [s(196)=<aux(51)* (1/2),aux(51)+s(171)=<C,aux(51)+s(171)=<C-C'] 

##### Pending set A
* Psum in Loop 19: [s(197)=<C/2-C'/2+1/2,s(195)=<3/2*C-3/2*C',s(193)=<D-D',s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(197)=<C/2-C'/2+1/2  in Loop 19 
   - Found a solution using cacheing 
 * Adding constraints: [s(197)=<aux(52)* (1/2),aux(52)+it(20)=<B+D,aux(52)+s(174)=<2*C,aux(52)+it(20)=<B+D-B'-D',aux(52)+s(174)=<2*C-2*C'] 

##### Pending set A
* Psum in Loop 19: [s(195)=<3/2*C-3/2*C',s(193)=<D-D',s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(195)=<3/2*C-3/2*C'  in Loop 19 
   - Found a solution using cacheing 
 * Adding constraints: [s(195)=<aux(53)* (3/2),aux(53)+s(171)=<C,aux(53)+s(171)=<C-C'] 

##### Pending set A
* Psum in Loop 19: [s(193)=<D-D',s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(193)=<D-D'  in Loop 19 
   - Applying inductive sum strategy 
     - head Candidate: C-1 
       - Loop 18 is collaborative
       - Loop 20 is collaborative
     - head Candidate: A-B+C-1 
       - Loop 18 is collaborative
       - Loop 20 is collaborative
     - tail Candidate: C-1 
       - Loop 18 is collaborative
       - Loop 20 is collaborative
     - tail Candidate: A-B+C-1 
       - Loop 18 is collaborative
       - Loop 20 is collaborative
 * Adding constraints: [s(193)=<C-1,s(193)=<A-B+C-1,s(193)=<C-C',s(193)=<A-B+C-A'+B'-C'] 

##### Pending set A
* Psum in Loop 19: [s(194)=<D-D'+1,s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(194)=<D-D'+1  in Loop 19 
   - Applying inductive sum strategy 
     - head Candidate: -A+B+D+1 
       - Loop 18 is collaborative
       - Loop 20 is collaborative
     - head Candidate: B-C+2*D 
       - Loop 18 is collaborative
       - Loop 20 is collaborative and bounds [it(20)] 
     - tail Candidate: -A+B+D+1 
       - Loop 18 is collaborative
       - Loop 20 is collaborative
     - tail Candidate: B-C+2*D 
       - Loop 18 is collaborative
       - Loop 20 is collaborative and bounds [it(20)] 
 * Adding constraints: [s(194)=< -A+B+D+1,it(20)+s(194)=<B-C+2*D,s(194)=< -A+B+D+A'-B'-D',it(20)+s(194)=<B-C+2*D-B'+C'-2*D'] 

##### Pending set A
* Psum in Loop 19: [s(202)=<D-D'+2,s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(202)=<D-D'+2  in Loop 19 
   - Applying inductive sum strategy 
     - head Candidate: B+D 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B/2+C 
       - Loop 18 is collaborative
       - Loop 20 is collaborative
     - tail Candidate: B+D 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B/2+C 
       - Loop 18 is collaborative
       - Loop 20 is collaborative
 * Adding constraints: [it(20)+s(202)=<B+D,s(202)=<B/2+C,it(20)+s(202)=<B+D-B'-D',s(202)=<B/2+C-B'/2-C'] 

##### Pending set A
* Psum in Loop 19: [s(204)=<2*D-2*D']
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for s(204)=<2*D-2*D'  in Loop 19 
   - Found a solution using cacheing 
 * Adding constraints: [s(204)=<aux(54)*2,aux(54)=<C-1,aux(54)=<A-B+C-1,aux(54)=<C-C',aux(54)=<A-B+C-A'+B'-C'] 

##### Pending set A
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for it(20)=<1  in Loop 20 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(18)+it(19)+it(20)=<A-1,it(18)+it(19)+it(20)=<B+1,it(18)+it(19)+it(20)=<A-1,it(18)+it(19)+it(20)=<B+1,it(18)+it(19)+it(20)=<A-A',it(18)+it(19)+it(20)=<B-B',it(18)+it(19)+it(20)=<A-A',it(18)+it(19)+it(20)=<B-B'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [18,19,20] 

#### Simplifying cost structure of phase [18,19,20] 
 * Joined equivalent variables [aux(49),s(205)] into aux(49)
 * Joined equivalent variables [aux(46),s(174)] into aux(46)
 * Joined equivalent variables [aux(49),aux(50)] into aux(49)
 * Joined equivalent variables [aux(52),s(201)] into aux(52)
 * Joined equivalent variables [aux(45),aux(47),aux(51),aux(53),s(171),s(198)] into aux(45)
 * Joined equivalent variables [aux(48),s(166)] into aux(48)
 * Joined equivalent variables [s(169),s(196)] into s(169)
 * Joined equivalent variables [s(168),s(195)] into s(168)

#### Cost of phase [18,19,20]:append_all3(A,B,C,D,E,F,G) -> [append_all3(A',B',C',D',E',F',G')] 
11*it(18)+11*it(19)+11*it(20)+5*s(150)+5*s(151)+11*s(152)+7*s(153)+11*s(154)+11*s(155)+5*s(156)+7*s(157)+7*s(158)+5*s(159)+5*s(181)+5*s(182)+11*s(183)+11*s(184)+5*s(185)+7*s(186)+7*s(187)+0
  Such that:s(200) =< -A+B+1
s(180) =< -A+B-C+D+E+1
s(180) =< -A+B-C+D+E+A'-B'+C'-D'-E'
s(194) =< -A+B+D+1
s(194) =< -A+B+D+A'-B'-D'
s(200) =< -A+B+A'-B'
s(199) =< A-B+2*C
s(199) =< A-B+2*C-A'+B'-2*C'
s(191) =< A-B+3/2*C
s(191) =< A-B+3/2*C-A'+B'-3/2*C'
s(200) =< B
s(202) =< B/2+C
s(202) =< B/2+C-B'/2-C'
s(152) =< B/2-C/2+D/2+E
s(152) =< B/2-C/2+D/2+E-B'/2+C'/2-D'/2-E'
s(191) =< 3/2*C
s(191) =< 3/2*C-3/2*C'
s(178) =< D+E
s(179) =< 2*D
s(165) =< E
it(18) =< E+1
s(180) =< 2*E
s(180) =< 2*E-2*E'
aux(55) =< -2*A+2*B-2*C+3*D+2*E+2
aux(56) =< -2*A+2*B-2*C+3*D+2*E+2*A'-2*B'+2*C'-3*D'-2*E'
aux(57) =< -2*A+2*B-2*C+4*D+E+2
aux(58) =< -2*A+2*B-2*C+4*D+E+2*A'-2*B'+2*C'-4*D'-E'
aux(59) =< -2*A+2*B-C+D+2
aux(60) =< -2*A+2*B-C+D+2*A'-2*B'+C'-D'
aux(61) =< -A+B-C+2*D+1
aux(62) =< -A+B-C+2*D+A'-B'+C'-2*D'
aux(63) =< -A+B+C+1
aux(64) =< -A+B+C+A'-B'-C'
aux(65) =< -A+B+D+E+1
aux(66) =< -A+B+D+E+A'-B'-D'-E'
aux(67) =< A
aux(68) =< A-B+C
aux(69) =< A-B+C-A'+B'-C'
aux(70) =< A+C
aux(71) =< A+C-D+E
aux(72) =< A+C-D+E-A'-C'+D'-E'
aux(73) =< A+C-A'-C'
aux(74) =< A+D
aux(75) =< A+D-A'-D'
aux(76) =< A-A'
aux(77) =< B+1
aux(78) =< B-C+2*D
aux(79) =< B-C+2*D-B'+C'-2*D'
aux(80) =< B+D
aux(81) =< B+D-B'-D'
aux(82) =< B-B'
aux(83) =< B/2+1/2
aux(84) =< B/2-B'/2
aux(85) =< C
aux(86) =< C+1
aux(87) =< C-D+2*E
aux(88) =< C-D+2*E-C'+D'-2*E'
aux(89) =< C-D+3*E
aux(90) =< C-D+3*E-C'+D'-3*E'
aux(91) =< C+D
aux(92) =< C+D-C'-D'
aux(93) =< C+E
aux(94) =< C+E-C'-E'
aux(95) =< C+2*E
aux(96) =< C+2*E-C'-2*E'
aux(97) =< C-C'
aux(98) =< 2*C
aux(99) =< 2*C-2*D+2*E
aux(100) =< 2*C-2*D+2*E-2*C'+2*D'-2*E'
aux(101) =< 2*C-D+4*E
aux(102) =< 2*C-D+4*E-2*C'+D'-4*E'
aux(103) =< 2*C-2*C'
aux(104) =< C/2+D
aux(105) =< C/2+D-C'/2-D'
aux(106) =< D
aux(107) =< D+1
aux(108) =< D+E-D'-E'
aux(109) =< D-D'
aux(110) =< 2*D-2*D'
aux(111) =< 4*D+E
aux(112) =< 4*D+E-4*D'-E'
aux(113) =< E-E'
s(175) =< aux(55)
s(193) =< aux(55)
s(175) =< aux(56)
s(193) =< aux(56)
s(151) =< aux(57)
s(193) =< aux(57)
s(151) =< aux(58)
s(193) =< aux(58)
it(19) =< aux(59)
s(177) =< aux(59)
it(19) =< aux(60)
s(177) =< aux(60)
s(167) =< aux(61)
s(193) =< aux(61)
s(167) =< aux(62)
s(193) =< aux(62)
aux(46) =< aux(63)
it(19) =< aux(63)
aux(46) =< aux(64)
it(19) =< aux(64)
it(19) =< aux(65)
s(176) =< aux(65)
it(19) =< aux(66)
s(176) =< aux(66)
aux(49) =< aux(67)
it(18) =< aux(67)
it(19) =< aux(67)
it(20) =< aux(67)
aux(54) =< aux(68)
s(193) =< aux(68)
aux(54) =< aux(69)
s(193) =< aux(69)
it(20) =< aux(70)
s(203) =< aux(70)
it(20) =< aux(71)
s(203) =< aux(71)
it(20) =< aux(72)
s(203) =< aux(72)
it(20) =< aux(73)
s(203) =< aux(73)
it(19) =< aux(74)
it(20) =< aux(74)
s(167) =< aux(74)
it(19) =< aux(75)
it(20) =< aux(75)
s(167) =< aux(75)
aux(49) =< aux(76)
it(18) =< aux(76)
it(19) =< aux(76)
it(20) =< aux(76)
aux(49) =< aux(77)
it(18) =< aux(77)
it(19) =< aux(77)
it(20) =< aux(77)
it(20) =< aux(78)
s(194) =< aux(78)
it(20) =< aux(79)
s(194) =< aux(79)
aux(52) =< aux(80)
it(20) =< aux(80)
s(202) =< aux(80)
aux(52) =< aux(81)
it(20) =< aux(81)
s(202) =< aux(81)
aux(49) =< aux(82)
it(18) =< aux(82)
it(19) =< aux(82)
it(20) =< aux(82)
s(200) =< aux(82)
aux(49) =< aux(83)
it(18) =< aux(83)
it(19) =< aux(83)
aux(49) =< aux(84)
it(18) =< aux(84)
it(19) =< aux(84)
aux(45) =< aux(85)
aux(54) =< aux(85)
it(19) =< aux(85)
s(193) =< aux(85)
aux(49) =< aux(86)
it(18) =< aux(86)
it(19) =< aux(86)
it(19) =< aux(87)
s(152) =< aux(87)
it(19) =< aux(88)
s(152) =< aux(88)
it(19) =< aux(89)
s(173) =< aux(89)
it(19) =< aux(90)
s(173) =< aux(90)
it(19) =< aux(91)
s(172) =< aux(91)
it(19) =< aux(92)
s(172) =< aux(92)
s(178) =< aux(93)
s(193) =< aux(93)
it(19) =< aux(94)
s(178) =< aux(94)
it(19) =< aux(95)
s(176) =< aux(95)
it(19) =< aux(96)
s(176) =< aux(96)
aux(45) =< aux(97)
aux(49) =< aux(97)
aux(54) =< aux(97)
it(18) =< aux(97)
it(19) =< aux(97)
s(193) =< aux(97)
aux(46) =< aux(98)
aux(52) =< aux(98)
it(19) =< aux(98)
s(179) =< aux(98)
s(193) =< aux(98)
s(199) =< aux(98)
it(19) =< aux(99)
s(177) =< aux(99)
it(19) =< aux(100)
s(177) =< aux(100)
it(19) =< aux(101)
s(175) =< aux(101)
it(19) =< aux(102)
s(175) =< aux(102)
aux(46) =< aux(103)
aux(52) =< aux(103)
it(19) =< aux(103)
s(179) =< aux(103)
s(199) =< aux(103)
s(163) =< aux(104)
s(191) =< aux(104)
s(163) =< aux(105)
s(191) =< aux(105)
aux(48) =< aux(106)
s(193) =< aux(106)
it(18) =< aux(107)
s(193) =< aux(107)
s(178) =< aux(108)
s(193) =< aux(108)
aux(48) =< aux(109)
it(18) =< aux(109)
s(193) =< aux(109)
s(179) =< aux(110)
s(193) =< aux(110)
s(151) =< aux(111)
s(193) =< aux(111)
s(151) =< aux(112)
s(193) =< aux(112)
it(18) =< aux(113)
s(165) =< aux(113)
s(204) =< aux(54)*2
s(168) =< aux(45)* (3/2)
s(197) =< aux(52)* (1/2)
s(169) =< aux(45)* (1/2)
s(182) =< aux(49)*2
s(152) =< aux(48)* (1/2)
s(170) =< aux(46)* (1/2)
s(181) =< aux(49)
s(183) =< s(204)
s(189) =< s(204)
s(183) =< s(193)
s(189) =< s(193)
s(192) =< s(203)
s(183) =< s(203)
s(184) =< s(203)
s(184) =< aux(52)
s(191) =< aux(52)
s(188) =< s(202)
s(183) =< s(202)
s(192) =< aux(52)
s(183) =< aux(52)
s(183) =< s(200)
s(184) =< s(200)
s(182) =< s(200)
s(188) =< s(199)
s(183) =< s(199)
s(184) =< s(199)
s(190) =< s(199)
s(192) =< aux(45)
s(183) =< aux(45)
s(184) =< aux(45)
s(192) =< s(197)
s(183) =< s(197)
s(192) =< s(169)
s(183) =< s(169)
s(184) =< s(168)
s(190) =< s(168)
s(192) =< s(194)
s(183) =< s(194)
s(192) =< s(193)
s(181) =< s(193)
s(185) =< s(192)
s(186) =< s(191)
s(186) =< s(190)
s(187) =< s(189)
s(187) =< s(188)
s(150) =< s(180)
s(159) =< s(180)
s(153) =< s(165)
s(154) =< s(179)
s(161) =< s(179)
s(154) =< s(178)
s(161) =< s(178)
s(164) =< s(177)
s(152) =< s(177)
s(154) =< s(177)
s(155) =< s(177)
s(155) =< s(176)
s(163) =< s(176)
s(160) =< s(175)
s(154) =< s(175)
s(164) =< aux(46)
s(152) =< aux(46)
s(154) =< aux(46)
s(155) =< aux(46)
s(154) =< s(173)
s(155) =< s(173)
s(151) =< s(173)
s(160) =< s(172)
s(154) =< s(172)
s(155) =< s(172)
s(162) =< s(172)
s(164) =< aux(45)
s(152) =< aux(45)
s(154) =< aux(45)
s(155) =< aux(45)
s(164) =< s(170)
s(152) =< s(170)
s(154) =< s(170)
s(164) =< s(169)
s(152) =< s(169)
s(154) =< s(169)
s(155) =< s(168)
s(162) =< s(168)
s(164) =< s(167)
s(154) =< s(167)
s(164) =< aux(48)
s(154) =< aux(48)
s(150) =< aux(48)
s(152) =< s(165)
s(156) =< s(164)
s(153) =< s(160)* (1/2)
s(157) =< s(163)
s(157) =< s(162)
s(153) =< s(161)
s(158) =< s(161)
s(153) =< s(160)
s(158) =< s(160)

#### Simplifying cost structure of chain [[18,19,20],21] 
 * Joined equivalent variables [aux(114),aux(55),aux(56)] into aux(114)
 * Joined equivalent variables [aux(115),aux(57),aux(58)] into aux(115)
 * Joined equivalent variables [aux(116),aux(59),aux(60)] into aux(116)
 * Joined equivalent variables [aux(117),aux(61),aux(62)] into aux(117)
 * Joined equivalent variables [aux(118),aux(63),aux(64)] into aux(118)
 * Joined equivalent variables [aux(119),aux(65),aux(66)] into aux(119)
 * Joined equivalent variables [aux(120),aux(67),aux(76)] into aux(120)
 * Joined equivalent variables [aux(121),aux(68),aux(69)] into aux(121)
 * Joined equivalent variables [aux(122),aux(70),aux(73)] into aux(122)
 * Joined equivalent variables [aux(123),aux(71),aux(72)] into aux(123)
 * Joined equivalent variables [aux(124),aux(74),aux(75)] into aux(124)
 * Joined equivalent variables [aux(125),aux(78),aux(79)] into aux(125)
 * Joined equivalent variables [aux(126),aux(80),aux(81)] into aux(126)
 * Joined equivalent variables [aux(127),aux(85),aux(97)] into aux(127)
 * Joined equivalent variables [aux(128),aux(87),aux(88)] into aux(128)
 * Joined equivalent variables [aux(129),aux(89),aux(90)] into aux(129)
 * Joined equivalent variables [aux(130),aux(91),aux(92)] into aux(130)
 * Joined equivalent variables [aux(131),aux(93),aux(94)] into aux(131)
 * Joined equivalent variables [aux(132),aux(95),aux(96)] into aux(132)
 * Joined equivalent variables [aux(133),aux(98),aux(103)] into aux(133)
 * Joined equivalent variables [aux(134),aux(99),aux(100)] into aux(134)
 * Joined equivalent variables [aux(135),aux(101),aux(102)] into aux(135)
 * Joined equivalent variables [aux(136),aux(104),aux(105)] into aux(136)
 * Joined equivalent variables [aux(137),aux(106),aux(109)] into aux(137)
 * Joined equivalent variables [aux(138),aux(108)] into aux(138)
 * Joined equivalent variables [aux(139),aux(110)] into aux(139)
 * Joined equivalent variables [aux(140),aux(111),aux(112)] into aux(140)
 * Joined equivalent variables [aux(141),aux(113)] into aux(141)
 * Joined equivalent variables [aux(127),aux(45)] into aux(127)
 * Joined equivalent variables [aux(129),s(173)] into aux(129)
 * Joined equivalent variables [aux(130),s(172)] into aux(130)
 * Joined equivalent variables [aux(137),aux(48)] into aux(137)
 * Joined equivalent variables [aux(141),s(165)] into aux(141)

#### Cost of chains of append_all3(A,B,C,D,E,F,G):
* Chain [[18,19,20],21]: 11*it(18)+11*it(19)+11*it(20)+5*s(150)+5*s(151)+11*s(152)+7*s(153)+11*s(154)+11*s(155)+5*s(156)+7*s(157)+7*s(158)+5*s(159)+5*s(181)+5*s(182)+11*s(183)+11*s(184)+5*s(185)+7*s(186)+7*s(187)+3
  Such that:s(200) =< -A+B+1
s(180) =< -A+B-C+D+G+1
s(194) =< -A+B+D+1
s(199) =< A-B+2*C
s(191) =< A-B+3/2*C
aux(82) =< B
aux(77) =< B+1
aux(84) =< B/2
aux(83) =< B/2+1/2
s(202) =< B/2+C
s(152) =< B/2-C/2+D/2+G
aux(86) =< C+1
aux(107) =< D+1
it(18) =< G+1
aux(114) =< -2*A+2*B-2*C+3*D+2*G+2
aux(115) =< -2*A+2*B-2*C+4*D+G+2
aux(116) =< -2*A+2*B-C+D+2
aux(117) =< -A+B-C+2*D+1
aux(118) =< -A+B+C+1
aux(119) =< -A+B+D+G+1
aux(120) =< A
aux(121) =< A-B+C
aux(122) =< A+C
aux(123) =< A+C-D+G
aux(124) =< A+D
aux(125) =< B-C+2*D
aux(126) =< B+D
aux(127) =< C
aux(128) =< C-D+2*G
aux(129) =< C-D+3*G
aux(130) =< C+D
aux(131) =< C+G
aux(132) =< C+2*G
aux(133) =< 2*C
aux(134) =< 2*C-2*D+2*G
aux(135) =< 2*C-D+4*G
aux(136) =< C/2+D
aux(137) =< D
aux(138) =< D+G
aux(139) =< 2*D
aux(140) =< 4*D+G
aux(141) =< G
s(178) =< aux(138)
s(179) =< aux(139)
s(175) =< aux(114)
s(193) =< aux(114)
s(151) =< aux(115)
s(193) =< aux(115)
it(19) =< aux(116)
s(177) =< aux(116)
s(167) =< aux(117)
s(193) =< aux(117)
aux(46) =< aux(118)
it(19) =< aux(118)
it(19) =< aux(119)
s(176) =< aux(119)
aux(49) =< aux(120)
it(18) =< aux(120)
it(19) =< aux(120)
it(20) =< aux(120)
aux(54) =< aux(121)
s(193) =< aux(121)
it(20) =< aux(122)
s(203) =< aux(122)
it(20) =< aux(123)
s(203) =< aux(123)
it(19) =< aux(124)
it(20) =< aux(124)
s(167) =< aux(124)
aux(49) =< aux(77)
it(18) =< aux(77)
it(19) =< aux(77)
it(20) =< aux(77)
it(20) =< aux(125)
s(194) =< aux(125)
aux(52) =< aux(126)
it(20) =< aux(126)
s(202) =< aux(126)
aux(49) =< aux(82)
it(18) =< aux(82)
it(19) =< aux(82)
it(20) =< aux(82)
s(200) =< aux(82)
aux(49) =< aux(83)
it(18) =< aux(83)
it(19) =< aux(83)
aux(49) =< aux(84)
it(18) =< aux(84)
it(19) =< aux(84)
aux(54) =< aux(127)
it(19) =< aux(127)
s(193) =< aux(127)
aux(49) =< aux(86)
it(18) =< aux(86)
it(19) =< aux(86)
it(19) =< aux(128)
s(152) =< aux(128)
it(19) =< aux(129)
it(19) =< aux(130)
s(178) =< aux(131)
s(193) =< aux(131)
it(19) =< aux(131)
it(19) =< aux(132)
s(176) =< aux(132)
aux(49) =< aux(127)
it(18) =< aux(127)
aux(46) =< aux(133)
aux(52) =< aux(133)
it(19) =< aux(133)
s(179) =< aux(133)
s(193) =< aux(133)
s(199) =< aux(133)
it(19) =< aux(134)
s(177) =< aux(134)
it(19) =< aux(135)
s(175) =< aux(135)
s(163) =< aux(136)
s(191) =< aux(136)
s(193) =< aux(137)
it(18) =< aux(107)
s(193) =< aux(107)
s(193) =< aux(138)
it(18) =< aux(137)
s(193) =< aux(139)
s(151) =< aux(140)
s(193) =< aux(140)
it(18) =< aux(141)
s(204) =< aux(54)*2
s(168) =< aux(127)* (3/2)
s(197) =< aux(52)* (1/2)
s(169) =< aux(127)* (1/2)
s(182) =< aux(49)*2
s(152) =< aux(137)* (1/2)
s(170) =< aux(46)* (1/2)
s(181) =< aux(49)
s(183) =< s(204)
s(189) =< s(204)
s(183) =< s(193)
s(189) =< s(193)
s(192) =< s(203)
s(183) =< s(203)
s(184) =< s(203)
s(184) =< aux(52)
s(191) =< aux(52)
s(188) =< s(202)
s(183) =< s(202)
s(192) =< aux(52)
s(183) =< aux(52)
s(183) =< s(200)
s(184) =< s(200)
s(182) =< s(200)
s(188) =< s(199)
s(183) =< s(199)
s(184) =< s(199)
s(190) =< s(199)
s(192) =< aux(127)
s(183) =< aux(127)
s(184) =< aux(127)
s(192) =< s(197)
s(183) =< s(197)
s(192) =< s(169)
s(183) =< s(169)
s(184) =< s(168)
s(190) =< s(168)
s(192) =< s(194)
s(183) =< s(194)
s(192) =< s(193)
s(181) =< s(193)
s(185) =< s(192)
s(186) =< s(191)
s(186) =< s(190)
s(187) =< s(189)
s(187) =< s(188)
s(150) =< s(180)
s(159) =< s(180)
s(153) =< aux(141)
s(154) =< s(179)
s(161) =< s(179)
s(154) =< s(178)
s(161) =< s(178)
s(164) =< s(177)
s(152) =< s(177)
s(154) =< s(177)
s(155) =< s(177)
s(155) =< s(176)
s(163) =< s(176)
s(160) =< s(175)
s(154) =< s(175)
s(164) =< aux(46)
s(152) =< aux(46)
s(154) =< aux(46)
s(155) =< aux(46)
s(154) =< aux(129)
s(155) =< aux(129)
s(151) =< aux(129)
s(160) =< aux(130)
s(154) =< aux(130)
s(155) =< aux(130)
s(162) =< aux(130)
s(164) =< aux(127)
s(152) =< aux(127)
s(154) =< aux(127)
s(155) =< aux(127)
s(164) =< s(170)
s(152) =< s(170)
s(154) =< s(170)
s(164) =< s(169)
s(152) =< s(169)
s(154) =< s(169)
s(155) =< s(168)
s(162) =< s(168)
s(164) =< s(167)
s(154) =< s(167)
s(164) =< aux(137)
s(154) =< aux(137)
s(150) =< aux(137)
s(152) =< aux(141)
s(156) =< s(164)
s(153) =< s(160)* (1/2)
s(157) =< s(163)
s(157) =< s(162)
s(153) =< s(161)
s(158) =< s(161)
s(153) =< s(160)
s(158) =< s(160)

  with precondition: [G=E,A+C+F=B+D+2,A>=2,F>=1,D+1>=F,G+1>=F,C+F>=D+1] 

* Chain [21]: 3
  with precondition: [A=1,B=0,C=0,D=0,E=0,F=1,G=0] 


Closed-form bounds of append(A,B,C,D,E,F): 
-------------------------------------
* Chain [[9],10] with precondition: [F=B+D,A+C=E+1,A>=2,C>=1,B+1>=A,F>=B] 
    - Upper bound: 5*B+2 
    - Complexity: n 
* Chain [10] with precondition: [A=1,B=0,C=E,D=F,C>=0,D>=0] 
    - Upper bound: 2 
    - Complexity: constant 

### Maximum cost of append(A,B,C,D,E,F): 5*B+2 
Asymptotic class: n 

Closed-form bounds of append_all(A,B,C,D,E): 
-------------------------------------
* Chain [[11,12],13] with precondition: [E=C,A+D=B+2,A>=2,D>=1,E+1>=D] 
    - Upper bound: 7*A+17/2*B+5*C+10 
    - Complexity: n 
* Chain [13] with precondition: [A=1,B=0,C=0,D=1,E=0] 
    - Upper bound: 3 
    - Complexity: constant 

### Maximum cost of append_all(A,B,C,D,E): 7*A+17/2*B+5*C+10 
Asymptotic class: n 

Closed-form bounds of append_all2(A,B,C,D,E,F): 
-------------------------------------
* Chain [[14,15,16],17] with precondition: [F=D,A+C=B+E,A>=2,E>=1,C+1>=E,F+1>=E] 
    - Upper bound: -15*A+69/2*B+35/2*C+22*D+49 
    - Complexity: n 
* Chain [17] with precondition: [A=1,B=0,C=0,D=0,E=1,F=0] 
    - Upper bound: 3 
    - Complexity: constant 

### Maximum cost of append_all2(A,B,C,D,E,F): -15*A+69/2*B+35/2*C+22*D+49 
Asymptotic class: n 
 * Joined equivalent variables [aux(142),aux(119),aux(132)] into aux(142)
 * Joined equivalent variables [aux(143),aux(115),aux(140)] into aux(143)
 * Joined equivalent variables [aux(142),s(176)] into aux(142)

Closed-form bounds of append_all3(A,B,C,D,E,F,G): 
-------------------------------------
* Chain [[18,19,20],21] with precondition: [G=E,A+C+F=B+D+2,A>=2,F>=1,D+1>=F,G+1>=F,C+F>=D+1] 
    - Upper bound: 73/2*A+11*B+39*C+90*D+119/2*E+68 
    - Complexity: n 
* Chain [21] with precondition: [A=1,B=0,C=0,D=0,E=0,F=1,G=0] 
    - Upper bound: 3 
    - Complexity: constant 

### Maximum cost of append_all3(A,B,C,D,E,F,G): 73/2*A+11*B+39*C+90*D+119/2*E+68 
Asymptotic class: n 
* Total analysis performed in 8247 ms.


Cost relation system solved by CoFloCo in 8251 ms.

Method append terminates?: YES

 - l1_1: size of l1 wrt. List<A>
 - l1_2: size of l1 wrt. A
 - l2_1: size of l2 wrt. List<A>
 - l2_2: size of l2 wrt. A
UB for append(l1_1,l1_2,l2_1,l2_2) = 5*l1_2+2

Method append_all terminates?: YES

 - l_1: size of l wrt. List<List<A>>
 - l_2: size of l wrt. List<A>
 - l_3: size of l wrt. A
UB for append_all(l_1,l_2,l_3) = 7*l_1+17/2*l_2+5*l_3+10

Method append_all2 terminates?: YES

 - l_1: size of l wrt. List<List<List<A>>>
 - l_2: size of l wrt. List<List<A>>
 - l_3: size of l wrt. List<A>
 - l_4: size of l wrt. A
UB for append_all2(l_1,l_2,l_3,l_4) = -15*l_1+69/2*l_2+35/2*l_3+22*l_4+49

Method append_all3 terminates?: YES

 - l_1: size of l wrt. List<List<List<List<A>>>>
 - l_2: size of l wrt. List<List<List<A>>>
 - l_3: size of l wrt. List<List<A>>
 - l_4: size of l wrt. List<A>
 - l_5: size of l wrt. A
UB for append_all3(l_1,l_2,l_3,l_4,l_5) = 73/2*l_1+11*l_2+39*l_3+90*l_4+119/2*l_5+68

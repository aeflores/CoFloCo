
Abs program loaded in 14 ms.

Rule based representation generated in 5 ms.

Rule based representation stored in /tmp/costabs/rbr.rbr

RBR properties stored in /tmp/costabs/rbr.properties

Class invariants generated and loaded in 1 ms.

Abstract compilation performed in 52 ms.

Cost relation system stored in /tmp/costabs/crs.crs

Generated 75 equations 
entry('sizeL'(A,B,C,D,E,F,G):[]).
entry('get_elem'(A,B,C,D,E,F,G,H,I,J):[]).
entry('get_2elems'(A,B,C,D,E,F,G,H,I,J,K,L,M,N):[]).
entry('subtract_row_helper'(A,B,C,D,E,F,G):[]).
entry('subtract_row'(A,B,C,D,E,F,G):[]).
entry('subtract_helper'(A,B,C,D,E,F,G,H,I):[]).
entry('concat'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O):[]).
entry('tl'(A,B,C,D,E):[]).
entry('hd_helper'(A,B,C,D,E,F,G):[]).
entry('reverse_helper'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O):[]).
entry('reverseL'(A,B,C,D,E,F,G,H,I,J):[]).
entry('hd'(A,B,C,D,E):[]).
entry('split_helper'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U):[]).
entry('split'(A,B,C,D,E,F,G,H,I,J,K,L,M,N):[]).
entry('subtract'(A,B,C,D,E,F,G):[]).
entry('echelon_helper'(A,B,C,D,E,F,G,H,I,J):[]).
entry('echelon_form'(A,B,C,D,E,F):[]).
entry('echelon_helper_old'(A,B,C,D,E,F,G):[]).
entry('echelon_form_old'(A,B,C,D,E,F):[]).
input_output_vars('and_op'(A,B,C),[A,B],[C]).
input_output_vars('case_0'(A,B,C,D,E,F,G),[A,B,C,D,E],[F,G]).
input_output_vars('case_1'(A,B,C,D,E,F,G,H,I,J),[A,B,C,D,E,F,G],[H,I,J]).
input_output_vars('case_10'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O),[A,B,C,D,E,F,G,H,I,J],[K,L,M,N,O]).
input_output_vars('case_11'(A,B,C,D,E,F),[A,B,C,D],[E,F]).
input_output_vars('case_12'(A,B,C,D,E,F),[A,B,C,D],[E,F]).
input_output_vars('case_13'(A,B,C,D,E,F,G,H),[A,B,C,D,E,F],[G,H]).
input_output_vars('case_14'(A,B,C,D,E,F,G,H),[A,B,C,D,E,F],[G,H]).
input_output_vars('case_15'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O),[A,B,C,D,E,F,G,H,I,J],[K,L,M,N,O]).
input_output_vars('case_16'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U),[A,B,C,D,E,F,G,H,I,J,K,L,M,N],[O,P,Q,R,S,T,U]).
input_output_vars('case_17'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U),[A,B,C,D,E,F,G,H,I,J,K,L,M,N],[O,P,Q,R,S,T,U]).
input_output_vars('case_18'(A,B,C,D,E,F,G,H,I,J,K,L,M),[A,B,C,D,E,F,G,H,I,J],[K,L,M]).
input_output_vars('case_19'(A,B,C,D,E,F,G,H,I,J),[A,B,C,D,E,F,G],[H,I,J]).
input_output_vars('case_2'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T),[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q],[R,S,T]).
input_output_vars('case_20'(A,B,C,D,E,F,G,H),[A,B,C,D,E],[F,G,H]).
input_output_vars('case_3'(A,B,C,D,E,F,G,H,I,J,K,L,M,N),[A,B,C,D,E,F,G,H,I,J],[K,L,M,N]).
input_output_vars('case_4'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T),[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P],[Q,R,S,T]).
input_output_vars('case_5'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1),[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X],[Y,Z,A1,B1]).
input_output_vars('case_6'(A,B,C,D,E,F,G),[A,B,C,D,E],[F,G]).
input_output_vars('case_7'(A,B,C,D,E,F,G,H,I,J),[A,B,C,D,E,F,G,H],[I,J]).
input_output_vars('case_8'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F,G],[H,I]).
input_output_vars('case_9'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F],[G,H,I]).
input_output_vars('concat'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O),[A,B,C,D,E,F,G,H,I,J],[K,L,M,N,O]).
input_output_vars('echelon_form'(A,B,C,D,E,F),[A,B,C],[D,E,F]).
input_output_vars('echelon_form_old'(A,B,C,D,E,F),[A,B,C],[D,E,F]).
input_output_vars('echelon_helper'(A,B,C,D,E,F,G,H,I,J),[A,B,C,D,E,F,G],[H,I,J]).
input_output_vars('echelon_helper_old'(A,B,C,D,E,F,G),[A,B,C,D],[E,F,G]).
input_output_vars('eq'(A,B,C),[A,B],[C]).
input_output_vars('geq'(A,B,C),[A,B],[C]).
input_output_vars('get_2elems'(A,B,C,D,E,F,G,H,I,J,K,L,M,N),[A,B,C,D,E,F,G,H,I,J],[K,L,M,N]).
input_output_vars('get_elem'(A,B,C,D,E,F,G,H,I,J),[A,B,C,D,E,F,G],[H,I,J]).
input_output_vars('gt'(A,B,C),[A,B],[C]).
input_output_vars('hd'(A,B,C,D,E),[A,B,C],[D,E]).
input_output_vars('hd_helper'(A,B,C,D,E,F,G),[A,B,C,D,E],[F,G]).
input_output_vars('leq'(A,B,C),[A,B],[C]).
input_output_vars('lt'(A,B,C),[A,B],[C]).
input_output_vars('maxNorm'(A,B,C),[A,B],[C]).
input_output_vars('neg'(A,B),[A],[B]).
input_output_vars('neq'(A,B,C),[A,B],[C]).
input_output_vars('or'(A,B,C),[A,B],[C]).
input_output_vars('reverseL'(A,B,C,D,E,F,G,H,I,J),[A,B,C,D,E],[F,G,H,I,J]).
input_output_vars('reverse_helper'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O),[A,B,C,D,E,F,G,H,I,J],[K,L,M,N,O]).
input_output_vars('sizeL'(A,B,C,D,E,F,G),[A,B,C,D,E],[F,G]).
input_output_vars('split'(A,B,C,D,E,F,G,H,I,J,K,L,M,N),[A,B,C,D,E,F,G],[H,I,J,K,L,M,N]).
input_output_vars('split_helper'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U),[A,B,C,D,E,F,G,H,I,J,K,L,M,N],[O,P,Q,R,S,T,U]).
input_output_vars('subtract'(A,B,C,D,E,F,G),[A,B,C,D],[E,F,G]).
input_output_vars('subtract_helper'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F],[G,H,I]).
input_output_vars('subtract_row'(A,B,C,D,E,F,G),[A,B,C,D,E],[F,G]).
input_output_vars('subtract_row_helper'(A,B,C,D,E,F,G),[A,B,C,D,E],[F,G]).
input_output_vars('tl'(A,B,C,D,E),[A,B,C],[D,E]).
eq('eq',[A,B,C],0,[],[A=B,C=1,A>=0,B>=0,C>=0]).
eq('eq',[A,B,C],0,[],[A>=B+1,C=0,A>=0,B>=0,C>=0]).
eq('eq',[A,B,C],0,[],[B>=A+1,C=0,A>=0,B>=0,C>=0]).
eq('neq',[A,B,C],0,[],[A=B,C=0,A>=0,B>=0,C>=0]).
eq('neq',[A,B,C],0,[],[A>=B+1,C=1,A>=0,B>=0,C>=0]).
eq('neq',[A,B,C],0,[],[B>=A+1,C=1,A>=0,B>=0,C>=0]).
eq('lt',[A,B,C],0,[],[B-A>=1,C=1,A>=0,B>=0,C>=0]).
eq('lt',[A,B,C],0,[],[B=<A,C=0,A>=0,B>=0,C>=0]).
eq('leq',[A,B,C],0,[],[A=<B,C=1,A>=0,B>=0,C>=0]).
eq('leq',[A,B,C],0,[],[A-B>=1,C=0,A>=0,B>=0,C>=0]).
eq('gt',[A,B,C],0,[],[A-B>=1,C=1,A>=0,B>=0,C>=0]).
eq('gt',[A,B,C],0,[],[A=<B,C=0,A>=0,B>=0,C>=0]).
eq('geq',[A,B,C],0,[],[B=<A,C=1,A>=0,B>=0,C>=0]).
eq('geq',[A,B,C],0,[],[B-A>=1,C=0,A>=0,B>=0,C>=0]).
eq('neg',[A,B],0,[],[A=0,B=1,A>=0,B>=0]).
eq('neg',[A,B],0,[],[A=1,B=0,A>=0,B>=0]).
eq('and_op',[A,B,C],0,[],[A=0,C=0,A>=0,B>=0,C>=0]).
eq('and_op',[A,B,C],0,[],[A=1,C=B,A>=0,B>=0,C>=0]).
eq('or',[A,B,C],0,[],[A=1,C=1,A>=0,B>=0,C>=0]).
eq('or',[A,B,C],0,[],[A=0,C=B,A>=0,B>=0,C>=0]).
eq('maxNorm',[A,B,A],0,[],[A>=1+B,A>=0,B>=0,A>=0]).
eq('maxNorm',[A,B,B],0,[],[A=<B,A>=0,B>=0,B>=0]).
eq('case_0',[A,B,C,D,E,F,G],2,[],[E=0,D=1,B=0,A=1,G=0,F=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_0',[A,B,C,D,E,F,G],5,['sizeL'(H,I,J,K,L,M,N)],[E=O+L,D=K+1,C=P+J,B=Q+I,A=H+1,K>=1,H>=1,O>=1,Q>=1,R=1,S=1,G=R+N,F=S+M,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('sizeL',[A,B,C,D,E,F,G],1,['case_0'(A,B,C,D,E,F,G)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_2',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,J,K,L],1,[],[I=B,H=A,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,J>=0,K>=0,L>=0]).
eq('case_2',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T],4,['get_elem'(M,N,O,P,Q,U,V,R,S,T)],[I>=B+1,H>=A+1,W=1,X=1,V=I-W,U=H-X,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0,S>=0,T>=0]).
eq('case_1',[A,B,C,D,E,F,G,H,I,J],3,['case_2'(K,L,A,B,C,D,E,F,G,M,N,O,P,Q,R,S,T,H,I,J)],[E=O+T,D=S+1,C=N+R,B=M+Q,A=P+1,S>=1,P>=1,O>=1,M>=1,L=0,K=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('get_elem',[A,B,C,D,E,F,G,H,I,J],1,['case_1'(A,B,C,D,E,F,G,H,I,J)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('case_5',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1],2,[],[L=B,K=A,B1=N+T,A1=1,Z=M+S,Y=1,T>=1,N>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0,S>=0,T>=0,U>=0,V>=0,W>=0,X>=0,Y>=0,Z>=0,A1>=0,B1>=0]).
eq('case_5',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1],4,['get_2elems'(O,P,Q,R,U,V,W,X,C1,D1,Y,Z,A1,B1)],[L>=B+1,K>=A+1,E1=1,F1=1,D1=L-E1,C1=K-F1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0,S>=0,T>=0,U>=0,V>=0,W>=0,X>=0,Y>=0,Z>=0,A1>=0,B1>=0]).
eq('case_4',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T],3,['case_5'(U,V,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,W,X,Y,Z,A1,B1,Q,R,S,T)],[H=X+B1,G=A1+1,F=W+Z,E=Y+1,A1>=1,Y>=1,X>=1,V=0,U=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0,S>=0,T>=0]).
eq('case_3',[A,B,C,D,E,F,G,H,I,J,K,L,M,N],2,['case_4'(A,B,C,D,E,F,G,H,I,J,O,P,Q,R,S,T,K,L,M,N)],[D=P+T,C=S+1,B=O+R,A=Q+1,S>=1,Q>=1,P>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0]).
eq('get_2elems',[A,B,C,D,E,F,G,H,I,J,K,L,M,N],1,['case_3'(A,B,C,D,E,F,G,H,I,J,K,L,M,N)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0]).
eq('case_6',[A,B,C,D,E,F,G],2,[],[A=1,F=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_7',[A,B,C,D,E,F,G,H,I,J],2,[],[C=1,I=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('case_7',[A,B,C,D,E,F,G,H,I,J],6,['subtract_row_helper'(G,H,K,L,E,M,N)],[D=O+L,C=K+1,K>=1,P=Q,R=O-P,J=R+N,I=M+1,M>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('case_6',[A,B,C,D,E,F,G],3,['case_7'(A,B,C,D,E,H,I,J,F,G)],[B=H+J,A=I+1,I>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('subtract_row_helper',[A,B,C,D,E,F,G],1,['case_6'(A,B,C,D,E,F,G)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_8',[A,B,C,D,E,F,G,H,I],3,['subtract_row_helper'(C,D,E,F,J,H,I)],[B=K+L,A=1,J=M,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('subtract_row',[A,B,C,D,E,F,G],4,['get_2elems'(A,B,H,I,C,D,J,K,E,E,L,M,N,O),'case_8'(P,Q,A,B,C,D,E,R,S)],[Q=M,P=L,L>=1,G=S,F=R,R>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_9',[A,B,C,D,E,F,G,H,I],2,[],[B=0,A=1,H=0,G=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('case_9',[A,B,C,D,E,F,G,H,I],5,['subtract_row'(D,E,J,K,F,L,M),'subtract_helper'(N,O,P,D,E,F,Q,R,S)],[C=K+P,B=J+O,A=N+1,N>=1,J>=1,I=M+S,H=L+R,G=Q+1,Q>=1,L>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('subtract_helper',[A,B,C,D,E,F,G,H,I],1,['case_9'(A,B,C,D,E,F,G,H,I)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('case_10',[A,B,C,D,E,F,G,H,I,J,F,G,H,I,J],1,[],[E=0,D=1,B=0,A=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('case_10',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O],4,['concat'(P,Q,R,S,T,F,G,H,I,J,U,V,W,X,Y)],[E=Z+T,D=S+1,C=A1+R,B=B1+Q,A=P+1,S>=1,P>=1,Z>=1,B1>=1,O=Z+Y,N=X+1,M=A1+W,L=B1+V,K=U+1,X>=1,U>=1,Z>=1,B1>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0]).
eq('concat',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O],1,['case_10'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0]).
eq('case_11',[A,B,C,D,B,C],1,[],[D=A,A>=0,B>=0,C>=0,D>=0,B>=0,C>=0]).
eq('case_12',[A,B,C,D,E,F],4,['tl'(G,H,I,E,F)],[C=J+H,B=G+1,G>=1,J>=1,K=1,I=D-K,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0]).
eq('case_11',[A,B,C,D,E,F],2,['case_12'(A,B,C,D,E,F)],[D>=A+1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0]).
eq('tl',[A,B,C,D,E],2,['case_11'(F,A,B,C,D,E)],[F=0,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_13',[A,B,C,D,E,F,E,F],1,[],[D=A,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,E>=0,F>=0]).
eq('case_14',[A,B,C,D,E,F,G,H],5,['hd_helper'(I,J,K,L,M,G,H)],[C=N+J,B=I+1,I>=1,N>=1,O=1,K=D-O,M=N+F,L=E+1,E>=1,N>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('case_13',[A,B,C,D,E,F,G,H],2,['case_14'(A,B,C,D,E,F,G,H)],[D>=A+1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('hd_helper',[A,B,C,D,E,F,G],2,['case_13'(H,A,B,C,D,E,F,G)],[H=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_15',[A,B,C,D,E,F,G,H,I,J,F,G,H,I,J],1,[],[E=0,D=1,B=0,A=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('case_15',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O],4,['reverse_helper'(P,Q,R,S,T,U,V,W,X,Y,K,L,M,N,O)],[E=Z+T,D=S+1,C=A1+R,B=B1+Q,A=P+1,S>=1,P>=1,Z>=1,B1>=1,Y=Z+J,X=I+1,W=A1+H,V=B1+G,U=F+1,I>=1,F>=1,Z>=1,B1>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0]).
eq('reverse_helper',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O],1,['case_15'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0]).
eq('reverseL',[A,B,C,D,E,F,G,H,I,J],2,['reverse_helper'(A,B,C,D,E,K,L,M,N,O,F,G,H,I,J)],[O=0,N=1,L=0,K=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('hd',[A,B,C,D,E],3,['hd_helper'(A,B,C,F,G,H,I),'reverseL'(J,K,L,H,I,M,N,O,D,E)],[G=0,F=1,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_16',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U],3,['reverseL'(J,K,L,M,N,V,W,X,Y,Z)],[G=I,F=H,U=Z+E,T=Y+D,S=1,R=X+C,Q=W+B,P=V+A,O=1,D>=1,A>=1,Y>=1,V>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0,S>=0,T>=0,U>=0]).
eq('case_17',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U],5,['split_helper'(V,W,X,Y,Z,F,G,A1,B1,C1,D1,E1,F1,G1,O,P,Q,R,S,T,U)],[E=H1+Z,D=Y+1,C=I1+X,B=J1+W,A=V+1,Y>=1,V>=1,H1>=1,J1>=1,K1=1,L1=1,B1=I+K1,A1=H+L1,G1=H1+N,F1=M+1,E1=I1+L,D1=J1+K,C1=J+1,M>=1,J>=1,H1>=1,J1>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0,S>=0,T>=0,U>=0]).
eq('case_16',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U],2,['case_17'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)],[G>=I+1,F>=H+1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0,S>=0,T>=0,U>=0]).
eq('split_helper',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U],1,['case_16'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0,S>=0,T>=0,U>=0]).
eq('split',[A,B,C,D,E,F,G,H,I,J,K,L,M,N],3,['split_helper'(A,B,C,D,E,F,G,O,P,Q,R,S,T,U,H,I,J,K,L,M,N)],[P=0,O=0,U=0,T=1,R=0,Q=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0]).
eq('case_18',[A,B,C,D,E,F,G,H,I,J,K,L,M],3,['subtract_helper'(N,O,P,E,F,J,Q,R,S),'concat'(T,U,V,W,X,Q,R,S,Y,Z,K,L,M,A1,B1)],[D=V+P,C=U+O,B=T+N,A=1,N>=1,T>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0]).
eq('subtract',[A,B,C,D,E,F,G],9,['get_elem'(A,B,C,H,I,D,D,J,K,L),'split'(A,B,C,H,I,M,M,N,O,P,Q,R,S,T),'case_18'(U,V,W,X,Y,Z,A,B,C,D,A1,B1,C1)],[Z=K,Y=J,J>=1,D1=1,M=D+D1,X=Q,W=P,V=O,U=N,N>=1,E1=C1,F1=B1,G1=A1,A1>=1,G=E1,F=F1,E=G1,G1>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_19',[A,B,C,D,E,F,G,H,I,J],2,[],[F=0,E=1,I=0,H=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('case_19',[A,B,C,D,E,F,G,H,I,J],6,['subtract'(A,B,C,D,K,L,M),'echelon_helper'(K,L,M,N,O,P,Q,H,I,J)],[G=R+Q,F=S+P,E=O+1,O>=1,S>=1,T=1,N=D+T,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('echelon_helper',[A,B,C,D,E,F,G,H,I,J],1,['case_19'(A,B,C,D,E,F,G,H,I,J)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('echelon_form',[A,B,C,D,E,F],2,['echelon_helper'(A,B,C,G,A,B,C,D,E,F)],[G=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0]).
eq('case_20',[A,B,C,D,E,B,C,D],1,[],[E>=A,A>=0,B>=0,C>=0,D>=0,E>=0,B>=0,C>=0,D>=0]).
eq('case_20',[A,B,C,D,E,F,G,H],5,['subtract'(B,C,D,E,I,J,K),'echelon_helper_old'(I,J,K,L,F,G,H)],[A>=E+1,M=1,L=E+M,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('echelon_helper_old',[A,B,C,D,E,F,G],2,['sizeL'(A,B,C,H,I,J,K),'case_20'(K,A,B,C,D,E,F,G)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('echelon_form_old',[A,B,C,D,E,F],2,['echelon_helper_old'(A,B,C,G,D,E,F)],[G=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0]).

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [case_10/15,concat/15]
1. recursive  : [case_6/7,case_7/10,subtract_row_helper/7]
2. non_recursive  : [case_8/9]
3. recursive  : [case_3/14,case_4/20,case_5/28,get_2elems/14]
4. non_recursive  : [subtract_row/7]
5. recursive  : [case_9/9,subtract_helper/9]
6. non_recursive  : [case_18/13]
7. recursive  : [case_1/10,case_2/20,get_elem/10]
8. recursive  : [case_15/15,reverse_helper/15]
9. non_recursive  : [reverseL/10]
10. recursive  : [case_16/21,case_17/21,split_helper/21]
11. non_recursive  : [split/14]
12. non_recursive  : [subtract/7]
13. recursive  : [case_19/10,echelon_helper/10]
14. non_recursive  : [echelon_form/6]
15. recursive  : [case_0/7,sizeL/7]
16. recursive  : [case_20/8,echelon_helper_old/7]
17. non_recursive  : [echelon_form_old/6]
18. recursive  : [case_13/8,case_14/8,hd_helper/7]
19. non_recursive  : [hd/5]
20. recursive  : [case_11/6,case_12/6,tl/5]
Warning: the following predicates are never called:[and_op/3,eq/3,geq/3,gt/3,leq/3,lt/3,maxNorm/3,neg/2,neq/3,or/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into concat/15
1. SCC is partially evaluated into subtract_row_helper/7
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into get_2elems/14
4. SCC is partially evaluated into subtract_row/7
5. SCC is partially evaluated into subtract_helper/9
6. SCC is partially evaluated into case_18/13
7. SCC is partially evaluated into get_elem/10
8. SCC is partially evaluated into reverse_helper/15
9. SCC is partially evaluated into reverseL/10
10. SCC is partially evaluated into split_helper/21
11. SCC is partially evaluated into split/14
12. SCC is partially evaluated into subtract/7
13. SCC is partially evaluated into echelon_helper/10
14. SCC is partially evaluated into echelon_form/6
15. SCC is partially evaluated into sizeL/7
16. SCC is partially evaluated into echelon_helper_old/7
17. SCC is partially evaluated into echelon_form_old/6
18. SCC is partially evaluated into hd_helper/7
19. SCC is partially evaluated into hd/5
20. SCC is partially evaluated into tl/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations concat/15 
* CE 14 is refined into CE [34] 
* CE 13 is refined into CE [35] 


#### Refined cost equations concat/15 
* CE 34: concat(A,B,C,D,E,F,G,H,I,J,F,G,H,I,J) = 2
     [J>=0,I>=0,H>=0,G>=0,F>=0,C>=0,E=0,D=1,B=0,A=1] 
* CE 35: concat(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) = 5+ concat(P,Q,R,S,T,F,G,H,I,J,U,V,W,X,Y)
     [O+T>=Y,M+R>=W,L+Q>=V,O>=Y+1,L>=V+1,X>=1,U>=1,S>=1,P>=1,O>=0,M>=0,L>=0,J>=0,I>=0,H>=0,G>=0,F>=0,E+Y=O+T,C+W=M+R,B+V=L+Q,X+1=N,U+1=K,S+1=D,P+1=A] 

### Cost equations --> "Loop" of concat/15 
* CEs [35] --> Loop 34 
* CEs [34] --> Loop 35 

#### Loops of concat/15 
* Loop 34: concat(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)->  concat(A',B',C',D',E',F,G,H,I,J,F',G',H',I',J')
                  [O+E'>=J',M+C'>=H',L+B'>=G',O>=J'+1,L>=G'+1,I'>=1,F'>=1,D'>=1,A'>=1,O>=0,M>=0,L>=0,J>=0,I>=0,H>=0,G>=0,F>=0,O+E'=E+J',M+C'=C+H',L+B'=B+G',I'+1=N,F'+1=K,D'+1=D,A'+1=A] 
* Loop 35: concat(A,B,C,D,E,F,G,H,I,J,F,G,H,I,J) [J>=0,I>=0,H>=0,G>=0,F>=0,C>=0,E=0,D=1,B=0,A=1] 

### Ranking functions of CR concat(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) 
* RF of phase [34]: [A-1,B+1,D-1,E+1]

#### Partial ranking functions of CR concat(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) 
* Partial RF of phase [34]:
  - RF of loop [34:1]:
    A-1
    B+1
    D-1
    E+1

Discarded unfeasible chain [[34]]...(Non-terminating chain proved terminating)

### Resulting Chains:concat(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) 
* [[34],35]
* [35]


### Merging Chains  concat/15 into  External patterns of execution 
* [[35]] --> 1 
* [[35,[34]]] --> 2 


### Specialization of cost equations subtract_row_helper/7 
* CE 9 is refined into CE [36] 
* CE 8 is refined into CE [37] 
* CE 7 is refined into CE [38] 


#### Refined cost equations subtract_row_helper/7 
* CE 36: subtract_row_helper(A,B,C,D,E,F,G) = 10+ subtract_row_helper(H,I,J,K,E,L,M)
     [B>=I,L>=1,J>=1,I>=0,H>=1,G>=0,E>=0,D>=0,L+1=F,J+1=C,H+1=A] 
* CE 37: subtract_row_helper(A,B,C,D,E,F,G) = 6
     [G>=0,E>=0,D>=0,B>=0,A>=2,F=1,C=1] 
* CE 38: subtract_row_helper(A,B,C,D,E,F,G) = 3
     [G>=0,E>=0,D>=0,C>=0,B>=0,F=1,A=1] 

### Cost equations --> "Loop" of subtract_row_helper/7 
* CEs [37] --> Loop 36 
* CEs [38] --> Loop 37 
* CEs [36] --> Loop 38 

#### Loops of subtract_row_helper/7 
* Loop 36: subtract_row_helper(A,B,C,D,E,F,G) [G>=0,E>=0,D>=0,B>=0,A>=2,F=1,C=1] 
* Loop 37: subtract_row_helper(A,B,C,D,E,F,G) [G>=0,E>=0,D>=0,C>=0,B>=0,F=1,A=1] 
* Loop 38: subtract_row_helper(A,B,C,D,E,F,G)->  subtract_row_helper(A',B',C',D',E,E',F')
                  [B>=B',E'>=1,C'>=1,B'>=0,A'>=1,G>=0,E>=0,D>=0,E'+1=F,C'+1=C,A'+1=A] 

### Ranking functions of CR subtract_row_helper(A,B,C,D,E,F,G) 
* RF of phase [38]: [A-1,C-1]

#### Partial ranking functions of CR subtract_row_helper(A,B,C,D,E,F,G) 
* Partial RF of phase [38]:
  - RF of loop [38:1]:
    A-1
    C-1

Discarded unfeasible chain [[38]]...(Non-terminating chain proved terminating)

### Resulting Chains:subtract_row_helper(A,B,C,D,E,F,G) 
* [[38],37]
* [[38],36]
* [37]
* [36]


### Merging Chains  subtract_row_helper/7 into  External patterns of execution 
* [[37]] --> 1 
* [[36]] --> 2 
* [[37,[38]]] --> 3 
* [[36,[38]]] --> 4 


### Specialization of cost equations get_2elems/14 
* CE 6 is refined into CE [39] 
* CE 5 is refined into CE [40] 


#### Refined cost equations get_2elems/14 
* CE 39: get_2elems(A,B,C,D,E,F,G,H,I,J,K,L,M,N) = 8
     [D+H>=N,B+F>=L,N>=2,L>=0,H>=1,G>=2,F>=0,E>=2,D>=1,C>=2,B>=0,A>=2,M=1,K=1,J=0,I=0] 
* CE 40: get_2elems(A,B,C,D,E,F,G,H,I,J,K,L,M,N) = 10+ get_2elems(O,P,Q,R,S,T,U,V,W,X,K,L,M,N)
     [H>=V+1,F>=T,D>=R+1,B>=P,X>=0,W>=0,V>=0,U>=1,T>=0,S>=1,R>=0,Q>=1,P>=0,O>=1,N>=0,M>=0,L>=0,K>=0,X+1=J,W+1=I,U+1=G,S+1=E,Q+1=C,O+1=A] 

### Cost equations --> "Loop" of get_2elems/14 
* CEs [40] --> Loop 39 
* CEs [39] --> Loop 40 

#### Loops of get_2elems/14 
* Loop 39: get_2elems(A,B,C,D,E,F,G,H,I,J,K,L,M,N)->  get_2elems(A',B',C',D',E',F',G',H',I',J',K,L,M,N)
                  [H>=H'+1,F>=F',D>=D'+1,B>=B',J'>=0,I'>=0,H'>=0,G'>=1,F'>=0,E'>=1,D'>=0,C'>=1,B'>=0,A'>=1,N>=0,M>=0,L>=0,K>=0,J'+1=J,I'+1=I,G'+1=G,E'+1=E,C'+1=C,A'+1=A] 
* Loop 40: get_2elems(A,B,C,D,E,F,G,H,I,J,K,L,M,N) [D+H>=N,B+F>=L,N>=2,L>=0,H>=1,G>=2,F>=0,E>=2,D>=1,C>=2,B>=0,A>=2,M=1,K=1,J=0,I=0] 

### Ranking functions of CR get_2elems(A,B,C,D,E,F,G,H,I,J,K,L,M,N) 
* RF of phase [39]: [A-1,C-1,D,E-1,G-1,H,I,J]

#### Partial ranking functions of CR get_2elems(A,B,C,D,E,F,G,H,I,J,K,L,M,N) 
* Partial RF of phase [39]:
  - RF of loop [39:1]:
    A-1
    C-1
    D
    E-1
    G-1
    H
    I
    J

Discarded unfeasible chain [[39]]...(Non-terminating chain proved terminating)

### Resulting Chains:get_2elems(A,B,C,D,E,F,G,H,I,J,K,L,M,N) 
* [[39],40]
* [40]


### Merging Chains  get_2elems/14 into  External patterns of execution 
* [[40]] --> 1 
* [[40,[39]]] --> 2 


### Specialization of cost equations subtract_row/7 
* CE 10 is refined into CE [41,42,43,44] 


#### Refined cost equations subtract_row/7 
* CE 41: subtract_row(A,B,C,D,E,A,F) = 7+ get_2elems(A,B,G,H,C,D,I,J,K,L,M,N,O,P):1+ subtract_row_helper(A,B,C,D,Q,A,F):3
     [H+J>=P,B+D>=N,C>=A,F>=0,A>=2,Q>=0,D>=0,B>=0,P>=2,N>=0,J>=1,I>=2,H>=1,G>=2,O=1,M=1,L=0,K=0,E=0] 
* CE 42: subtract_row(A,B,C,D,E,C,F) = 7+ get_2elems(A,B,G,H,C,D,I,J,K,L,M,N,O,P):1+ subtract_row_helper(A,B,C,D,Q,C,F):4
     [H+J>=P,B+D>=N,A>=C+1,F>=0,C>=2,Q>=0,D>=0,B>=0,P>=2,N>=0,J>=1,I>=2,H>=1,G>=2,O=1,M=1,L=0,K=0,E=0] 
* CE 43: subtract_row(A,B,C,D,E,A,F) = 7+ get_2elems(A,B,G,H,C,D,I,J,E,E,K,L,M,N):2+ subtract_row_helper(A,B,C,D,O,A,F):3
     [H+J>=2*E+N,B+D>=L,C>=A,A>=E+2,J>=E+1,I>=E+2,H>=E+1,G>=E+2,F>=0,O>=0,D>=0,B>=0,N>=2,L>=0,E>=1,M=1,K=1] 
* CE 44: subtract_row(A,B,C,D,E,C,F) = 7+ get_2elems(A,B,G,H,C,D,I,J,E,E,K,L,M,N):2+ subtract_row_helper(A,B,C,D,O,C,F):4
     [H+J>=2*E+N,B+D>=L,A>=C+1,C>=E+2,J>=E+1,I>=E+2,H>=E+1,G>=E+2,F>=0,O>=0,D>=0,B>=0,N>=2,L>=0,E>=1,M=1,K=1] 

### Cost equations --> "Loop" of subtract_row/7 
* CEs [44] --> Loop 41 
* CEs [43] --> Loop 42 
* CEs [42] --> Loop 43 
* CEs [41] --> Loop 44 

#### Loops of subtract_row/7 
* Loop 41: subtract_row(A,B,C,D,E,C,F) [C>=E+2,A>=C+1,F>=0,E>=1,D>=0,B>=0] 
* Loop 42: subtract_row(A,B,C,D,E,A,F) [A>=E+2,C>=A,F>=0,E>=1,D>=0,B>=0] 
* Loop 43: subtract_row(A,B,C,D,E,C,F) [A>=C+1,F>=0,D>=0,C>=2,B>=0,E=0] 
* Loop 44: subtract_row(A,B,C,D,E,A,F) [C>=A,F>=0,D>=0,B>=0,A>=2,E=0] 

### Ranking functions of CR subtract_row(A,B,C,D,E,F,G) 

#### Partial ranking functions of CR subtract_row(A,B,C,D,E,F,G) 


### Resulting Chains:subtract_row(A,B,C,D,E,F,G) 
* [44]
* [43]
* [42]
* [41]


### Merging Chains  subtract_row/7 into  External patterns of execution 
* [[44]] --> 1 
* [[43]] --> 2 
* [[42]] --> 3 
* [[41]] --> 4 


### Specialization of cost equations subtract_helper/9 
* CE 12 is refined into CE [45] 
* CE 11 is refined into CE [46,47,48,49] 


#### Refined cost equations subtract_helper/9 
* CE 45: subtract_helper(A,B,C,D,E,F,G,H,I) = 3
     [I>=0,F>=0,E>=0,D>=0,C>=0,H=0,G=1,B=0,A=1] 
* CE 46: subtract_helper(A,B,C,D,E,F,G,H,I) = 6+ subtract_row(D,E,J,K,L,D,M):1+ subtract_helper(N,O,P,D,E,Q,R,S,T)
     [M+T>=0,D+S>=0,K+P>=0,J+O>=0,J>=D,R>=1,N>=1,M>=0,D>=2,K>=0,E>=0,M+T=I,D+S=H,K+P=C,J+O=B,R+1=G,N+1=A,Q=0,L=0,F=0] 
* CE 47: subtract_helper(A,B,C,D,E,F,G,H,I) = 6+ subtract_row(D,E,J,K,L,J,M):2+ subtract_helper(N,O,P,D,E,Q,R,S,T)
     [M+T>=0,J+S>=0,J+O>=0,K+P>=0,D>=J+1,R>=1,N>=1,M>=0,J>=2,K>=0,E>=0,M+T=I,J+S=H,K+P=C,J+O=B,R+1=G,N+1=A,Q=0,L=0,F=0] 
* CE 48: subtract_helper(A,B,C,D,E,F,G,H,I) = 6+ subtract_row(D,E,J,K,F,D,L):3+ subtract_helper(M,N,O,D,E,F,P,Q,R)
     [L+R>=0,D+Q>=0,K+O>=0,J+N>=0,J>=D,D>=F+2,P>=1,M>=1,L>=0,F>=1,K>=0,E>=0,L+R=I,D+Q=H,K+O=C,J+N=B,P+1=G,M+1=A] 
* CE 49: subtract_helper(A,B,C,D,E,F,G,H,I) = 6+ subtract_row(D,E,J,K,F,J,L):4+ subtract_helper(M,N,O,D,E,F,P,Q,R)
     [L+R>=0,J+Q>=0,J+N>=0,K+O>=0,D>=J+1,J>=F+2,P>=1,M>=1,L>=0,F>=1,K>=0,E>=0,L+R=I,J+Q=H,K+O=C,J+N=B,P+1=G,M+1=A] 

### Cost equations --> "Loop" of subtract_helper/9 
* CEs [49] --> Loop 45 
* CEs [48] --> Loop 46 
* CEs [47] --> Loop 47 
* CEs [46] --> Loop 48 
* CEs [45] --> Loop 49 

#### Loops of subtract_helper/9 
* Loop 45: subtract_helper(A,B,C,D,E,F,G,H,I)->  subtract_helper(A',B',C',D,E,F,D',E',F')
                  [B>=F+B'+2,D+B'>=B+1,I>=F',C>=C',I>=0,H>=0,G>=2,F>=1,E>=0,C>=0,B>=0,A>=2,B+E'=H+B',G=D'+1,A=A'+1] 
* Loop 46: subtract_helper(A,B,C,D,E,F,G,H,I)->  subtract_helper(A',B',C',D,E,F,D',E',F')
                  [B>=D+B',I>=F',C>=C',D>=F+2,I>=0,H>=0,G>=2,F>=1,E>=0,C>=0,B>=0,A>=2,D+E'=H,G=D'+1,A=A'+1] 
* Loop 47: subtract_helper(A,B,C,D,E,F,G,H,I)->  subtract_helper(A',B',C',D,E,D',E',F',G')
                  [D+B'>=B+1,I>=G',C>=C',B>=B'+2,I>=0,H>=0,G>=2,E>=0,C>=0,B>=0,A>=2,B+F'=H+B',G=E'+1,A=A'+1,D'=0,F=0] 
* Loop 48: subtract_helper(A,B,C,D,E,F,G,H,I)->  subtract_helper(A',B',C',D,E,D',E',F',G')
                  [B>=D+B',I>=G',C>=C',I>=0,H>=0,G>=2,E>=0,D>=2,C>=0,B>=0,A>=2,D+F'=H,G=E'+1,A=A'+1,D'=0,F=0] 
* Loop 49: subtract_helper(A,B,C,D,E,F,G,H,I) [I>=0,F>=0,E>=0,D>=0,C>=0,H=0,G=1,B=0,A=1] 

### Ranking functions of CR subtract_helper(A,B,C,D,E,F,G,H,I) 
* RF of phase [45,46]: [A-1,B/3+1/3]
* RF of phase [47,48]: [A-1,B/2+1/2]

#### Partial ranking functions of CR subtract_helper(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [45,46]:
  - RF of loop [45:1,46:1]:
    A-1
    B/3+1/3
* Partial RF of phase [47,48]:
  - RF of loop [47:1,48:1]:
    A-1
    B/2+1/2

Discarded unfeasible chain [[47,48]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [[45,46]](Non-terminating chain proved terminating)

### Resulting Chains:subtract_helper(A,B,C,D,E,F,G,H,I) 
* [[47,48],49]
* [[45,46],49]
* [49]


### Merging Chains  subtract_helper/9 into  External patterns of execution 
* [[49]] --> 1 
* [[49,[47,48]]] --> 2 
* [[49,[45,46]]] --> 3 


### Specialization of cost equations case_18/13 
* CE 33 is refined into CE [50,51,52,53,54,55] 


#### Refined cost equations case_18/13 
* CE 50: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 3+ subtract_helper(N,O,P,E,F,J,Q,R,M):1+ concat(S,T,U,V,W,X,Y,M,Z,A1,B1,C1,M,Z,A1):1
     [A1>=0,Z>=0,M>=0,U>=0,J>=0,F>=0,E>=1,P>=0,I>=0,H>=0,G>=0,P+U=D,C1=0,B1=1,Y=0,X=1,W=0,V=1,T=0,S=1,R=0,Q=1,O=0,N=1,L=0,K=1,C=0,B=2,A=1] 
* CE 51: case_18(A,B,C,D,E,F,G,H,I,J,K,C,L) = 3+ subtract_helper(M,N,O,E,F,J,P,Q,R):1+ concat(K,C,S,K,T,U,V,R,W,X,K,C,L,Y,Z):2
     [R+S>=L,Z>=T,Y>=K,C+1>=K,T+1>=K,L>=0,R>=0,K>=2,S>=0,J>=0,F>=0,E>=1,O>=0,I>=0,H>=0,G>=0,K+W=Y+1,Z=T+X,O+S=D,K+1=B,V=0,U=1,Q=0,P=1,N=0,M=1,A=1] 
* CE 52: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 3+ subtract_helper(K,C,N,E,F,O,K,L,M):2+ concat(P,Q,R,S,T,K,L,M,U,V,K,L,M,U,V):1
     [C>=L,L+2>=2*K,V>=0,U>=0,M>=0,K>=2,R>=0,F>=0,E>=2,N>=0,I>=0,H>=0,G>=0,N+R=D,K+1=B,T=0,S=1,Q=0,P=1,O=0,J=0,A=1] 
* CE 53: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 3+ subtract_helper(N,O,P,E,F,Q,R,S,T):2+ concat(U,V,W,U,X,Y,Z,T,A1,B1,K,L,M,C1,D1):2
     [L+2*U>=2*K+V,T+W>=M,O+V>=L,D1>=X,C1>=U,K>=U+1,X+1>=U,V+1>=U,M>=0,T>=0,U>=2,W>=0,F>=0,E>=2,P>=0,I>=0,H>=0,G>=0,U+A1=C1+1,U+Y=K+1,R+U=K+1,N+U=K+1,D1=X+B1,L=V+Z,L=S+V,P+W=D,O+V=C,K+1=B,Q=0,J=0,A=1] 
* CE 54: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 3+ subtract_helper(K,C,N,E,F,J,K,L,M):3+ concat(O,P,Q,R,S,K,L,M,T,U,K,L,M,T,U):1
     [L+4>=3*K+J,C>=L,E>=J+2,U>=0,T>=0,M>=0,K>=2,Q>=0,J>=1,F>=0,N>=0,I>=0,H>=0,G>=0,N+Q=D,K+1=B,S=0,R=1,P=0,O=1,A=1] 
* CE 55: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 3+ subtract_helper(N,O,P,E,F,J,Q,R,S):3+ concat(T,U,V,T,W,X,Y,S,Z,A1,K,L,M,B1,C1):2
     [L+3*T+1>=3*K+J+U,S+V>=M,O+U>=L,C1>=W,B1>=T,K>=T+1,W+1>=T,U+1>=T,E>=J+2,M>=0,S>=0,T>=2,V>=0,J>=1,F>=0,P>=0,I>=0,H>=0,G>=0,T+Z=B1+1,T+X=K+1,Q+T=K+1,N+T=K+1,C1=W+A1,L=U+Y,L=R+U,P+V=D,O+U=C,K+1=B,A=1] 

### Cost equations --> "Loop" of case_18/13 
* CEs [55] --> Loop 50 
* CEs [51] --> Loop 51 
* CEs [54] --> Loop 52 
* CEs [53] --> Loop 53 
* CEs [52] --> Loop 54 
* CEs [50] --> Loop 55 

#### Loops of case_18/13 
* Loop 50: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) [L+1>=B+J,C>=L,E>=J+2,M>=0,J>=1,I>=0,H>=0,G>=0,F>=0,D>=0,B>=4,B=K+1,A=1] 
* Loop 51: case_18(A,B,C,D,E,F,G,H,I,J,K,C,L) [C+2>=B,L>=0,J>=0,I>=0,H>=0,G>=0,F>=0,E>=1,D>=0,B>=3,B=K+1,A=1] 
* Loop 52: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) [L+7>=3*B+J,C>=L,E>=J+2,M>=0,J>=1,I>=0,H>=0,G>=0,F>=0,D>=0,B>=3,B=K+1,A=1] 
* Loop 53: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) [C>=L,L+1>=B,M>=0,I>=0,H>=0,G>=0,F>=0,E>=2,D>=0,B>=4,B=K+1,J=0,A=1] 
* Loop 54: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) [C>=L,L+4>=2*B,M>=0,I>=0,H>=0,G>=0,F>=0,E>=2,D>=0,B>=3,B=K+1,J=0,A=1] 
* Loop 55: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) [M>=0,J>=0,I>=0,H>=0,G>=0,F>=0,E>=1,D>=0,L=0,K=1,C=0,B=2,A=1] 

### Ranking functions of CR case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) 

#### Partial ranking functions of CR case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) 


### Resulting Chains:case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) 
* [55]
* [54]
* [53]
* [52]
* [51]
* [50]


### Merging Chains  case_18/13 into  External patterns of execution 
* [[55]] --> 1 
* [[54]] --> 2 
* [[53]] --> 3 
* [[51]] --> 4 
* [[52]] --> 5 
* [[50]] --> 6 


### Specialization of cost equations get_elem/10 
* CE 4 is refined into CE [56] 
* CE 3 is refined into CE [57] 


#### Refined cost equations get_elem/10 
* CE 56: get_elem(A,B,C,D,E,F,G,H,I,J) = 5
     [E>=J,C>=I,B>=H,J>=1,I>=0,H>=1,D>=2,A>=2,G=0,F=0] 
* CE 57: get_elem(A,B,C,D,E,F,G,H,I,J) = 8+ get_elem(K,L,M,N,O,P,Q,H,I,J)
     [E>=O+1,C>=M,B>=L+1,Q>=0,P>=0,O>=0,N>=1,M>=0,L>=0,K>=1,J>=0,I>=0,H>=0,Q+1=G,P+1=F,N+1=D,K+1=A] 

### Cost equations --> "Loop" of get_elem/10 
* CEs [57] --> Loop 56 
* CEs [56] --> Loop 57 

#### Loops of get_elem/10 
* Loop 56: get_elem(A,B,C,D,E,F,G,H,I,J)->  get_elem(A',B',C',D',E',F',G',H,I,J)
                  [E>=E'+1,C>=C',B>=B'+1,G'>=0,F'>=0,E'>=0,D'>=1,C'>=0,B'>=0,A'>=1,J>=0,I>=0,H>=0,G'+1=G,F'+1=F,D'+1=D,A'+1=A] 
* Loop 57: get_elem(A,B,C,D,E,F,G,H,I,J) [E>=J,C>=I,B>=H,J>=1,I>=0,H>=1,D>=2,A>=2,G=0,F=0] 

### Ranking functions of CR get_elem(A,B,C,D,E,F,G,H,I,J) 
* RF of phase [56]: [A-1,B,D-1,E,F,G]

#### Partial ranking functions of CR get_elem(A,B,C,D,E,F,G,H,I,J) 
* Partial RF of phase [56]:
  - RF of loop [56:1]:
    A-1
    B
    D-1
    E
    F
    G

Discarded unfeasible chain [[56]]...(Non-terminating chain proved terminating)

### Resulting Chains:get_elem(A,B,C,D,E,F,G,H,I,J) 
* [[56],57]
* [57]


### Merging Chains  get_elem/10 into  External patterns of execution 
* [[57]] --> 1 
* [[57,[56]]] --> 2 


### Specialization of cost equations reverse_helper/15 
* CE 20 is refined into CE [58] 
* CE 19 is refined into CE [59] 


#### Refined cost equations reverse_helper/15 
* CE 58: reverse_helper(A,B,C,D,E,F,G,H,I,J,F,G,H,I,J) = 2
     [J>=0,I>=0,H>=0,G>=0,F>=0,C>=0,E=0,D=1,B=0,A=1] 
* CE 59: reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) = 5+ reverse_helper(P,Q,R,S,T,U,V,W,X,Y,K,L,M,N,O)
     [T+Y>=J,R+W>=H,Q+V>=G,Y>=J+1,V>=G+1,S>=1,P>=1,O>=0,N>=0,M>=0,L>=0,K>=0,J>=0,I>=1,H>=0,G>=0,F>=1,T+Y=E+J,R+W=C+H,Q+V=B+G,I+1=X,F+1=U,S+1=D,P+1=A] 

### Cost equations --> "Loop" of reverse_helper/15 
* CEs [59] --> Loop 58 
* CEs [58] --> Loop 59 

#### Loops of reverse_helper/15 
* Loop 58: reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)->  reverse_helper(A',B',C',D',E',F',G',H',I',J',K,L,M,N,O)
                  [E'+J'>=J,C'+H'>=H,B'+G'>=G,J'>=J+1,G'>=G+1,D'>=1,A'>=1,O>=0,N>=0,M>=0,L>=0,K>=0,J>=0,I>=1,H>=0,G>=0,F>=1,E+J=E'+J',C+H=C'+H',B+G=B'+G',I+1=I',F+1=F',D'+1=D,A'+1=A] 
* Loop 59: reverse_helper(A,B,C,D,E,F,G,H,I,J,F,G,H,I,J) [J>=0,I>=0,H>=0,G>=0,F>=0,C>=0,E=0,D=1,B=0,A=1] 

### Ranking functions of CR reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) 
* RF of phase [58]: [A-1,B+1,D-1,E+1]

#### Partial ranking functions of CR reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) 
* Partial RF of phase [58]:
  - RF of loop [58:1]:
    A-1
    B+1
    D-1
    E+1

Discarded unfeasible chain [[58]]...(Non-terminating chain proved terminating)

### Resulting Chains:reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) 
* [[58],59]
* [59]


### Merging Chains  reverse_helper/15 into  External patterns of execution 
* [[59]] --> 1 
* [[59,[58]]] --> 2 


### Specialization of cost equations reverseL/10 
* CE 21 is refined into CE [60,61] 


#### Refined cost equations reverseL/10 
* CE 60: reverseL(A,B,C,D,E,F,G,H,I,J) = 2+ reverse_helper(K,L,C,M,N,O,P,H,Q,R,S,T,H,U,V):1
     [H>=0,C>=0,V=0,U=1,T=0,S=1,R=0,Q=1,P=0,O=1,N=0,M=1,L=0,K=1,J=0,I=1,G=0,F=1,E=0,D=1,B=0,A=1] 
* CE 61: reverseL(A,B,C,A,D,A,B,E,A,D) = 2+ reverse_helper(A,B,C,A,D,F,G,H,I,J,A,B,E,A,D):2
     [C+H>=E,D+1>=A,B+1>=A,E>=0,H>=0,A>=2,C>=0,J=0,I=1,G=0,F=1] 

### Cost equations --> "Loop" of reverseL/10 
* CEs [61] --> Loop 60 
* CEs [60] --> Loop 61 

#### Loops of reverseL/10 
* Loop 60: reverseL(A,B,C,A,D,A,B,E,A,D) [D+1>=A,B+1>=A,E>=0,C>=0,A>=2] 
* Loop 61: reverseL(A,B,C,D,E,F,G,H,I,J) [H>=0,C>=0,J=0,I=1,G=0,F=1,E=0,D=1,B=0,A=1] 

### Ranking functions of CR reverseL(A,B,C,D,E,F,G,H,I,J) 

#### Partial ranking functions of CR reverseL(A,B,C,D,E,F,G,H,I,J) 


### Resulting Chains:reverseL(A,B,C,D,E,F,G,H,I,J) 
* [61]
* [60]


### Merging Chains  reverseL/10 into  External patterns of execution 
* [[61]] --> 1 
* [[60]] --> 2 


### Specialization of cost equations split_helper/21 
* CE 24 is refined into CE [62] 
* CE 23 is refined into CE [63,64] 


#### Refined cost equations split_helper/21 
* CE 62: split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) = 8+ split_helper(V,W,X,Y,Z,F,G,A1,B1,C1,D1,E1,F1,G1,O,P,Q,R,S,T,U)
     [Z+G1>=N,X+E1>=L,W+D1>=K,G1>=N+1,D1>=K+1,G>=I+1,F>=H+1,Y>=1,V>=1,U>=0,T>=0,S>=0,R>=0,Q>=0,P>=0,O>=0,N>=0,M>=1,L>=0,K>=0,J>=1,I>=0,H>=0,Z+G1=E+N,X+E1=C+L,W+D1=B+K,M+1=F1,J+1=C1,I+1=B1,H+1=A1,Y+1=D,V+1=A] 
* CE 63: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,K,L,M,N,B,O,P,Q,E) = 4+ reverseL(R,S,J,T,U,V,W,X,Y,Z):1
     [X>=0,J>=0,Q>=2,N>=2,G>=0,F>=0,E>=0,C>=0,B>=0,C+X=O,Q=D+1,N=A+1,Z=0,Y=1,W=0,V=1,U=0,T=1,S=0,R=1,P=1,M=1,L=0,K=1,I=0,H=1] 
* CE 64: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,H,K,L,M,N,O,P,Q,R) = 4+ reverseL(H,I,J,H,K,H,I,S,H,K):2
     [K+1>=H,I+1>=H,Q>=H+1,M>=H+1,S>=0,H>=2,J>=0,G>=0,F>=0,E>=0,C>=0,B>=0,E+K=R,D+H=Q,C+S=O,B+I=N,A+H=M,P=1,L=1] 

### Cost equations --> "Loop" of split_helper/21 
* CEs [64] --> Loop 62 
* CEs [63] --> Loop 63 
* CEs [62] --> Loop 64 

#### Loops of split_helper/21 
* Loop 62: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,H,K,L,M,N,O,P,Q,R) [K+1>=H,I+1>=H,O>=C,J>=0,H>=2,G>=0,F>=0,E>=0,D>=1,C>=0,B>=0,A>=1,E+K=R,D+H=Q,B+I=N,A+H=M,P=1,L=1] 
* Loop 63: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,K,L,M,N,B,O,P,Q,E) [O>=C,J>=0,G>=0,F>=0,E>=0,D>=1,C>=0,B>=0,A>=1,D+1=Q,A+1=N,P=1,M=1,L=0,K=1,I=0,H=1] 
* Loop 64: split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)->  split_helper(A',B',C',D',E',F,G,F',G',H',I',J',K',L',O,P,Q,R,S,T,U)
                  [E'+L'>=N,C'+J'>=L,B'+I'>=K,L'>=N+1,I'>=K+1,G>=I+1,F>=H+1,D'>=1,A'>=1,U>=0,T>=0,S>=0,R>=0,Q>=0,P>=0,O>=0,N>=0,M>=1,L>=0,K>=0,J>=1,I>=0,H>=0,E+N=E'+L',C+L=C'+J',B+K=B'+I',M+1=K',J+1=H',I+1=G',H+1=F',D'+1=D,A'+1=A] 

### Ranking functions of CR split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) 
* RF of phase [64]: [A-1,B+1,D-1,E+1,F-H,G-I]

#### Partial ranking functions of CR split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) 
* Partial RF of phase [64]:
  - RF of loop [64:1]:
    A-1
    B+1
    D-1
    E+1
    F-H
    G-I

Discarded unfeasible chain [[64]]...(Non-terminating chain proved terminating)

### Resulting Chains:split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) 
* [[64],62]
* [63]
* [62]


### Merging Chains  split_helper/21 into  External patterns of execution 
* [[63]] --> 1 
* [[62]] --> 2 
* [[62,[64]]] --> 3 


### Specialization of cost equations split/14 
* CE 25 is refined into CE [65,66] 


#### Refined cost equations split/14 
* CE 65: split(A,B,C,D,E,F,G,H,I,B,J,K,L,E) = 3+ split_helper(M,B,C,N,E,O,P,Q,R,S,T,U,V,W,X,I,B,J,Y,L,E):1
     [J>=C,E>=0,L>=2,B>=0,I>=2,U>=0,C>=0,L=N+1,I=M+1,L=D+1,I=A+1,Y=1,X=1,W=0,V=1,T=0,S=1,R=0,Q=0,P=0,O=0,K=1,H=1,G=0,F=0] 
* CE 66: split(A,B,C,D,E,F,F,G,H,B,I,J,K,E) = 3+ split_helper(L,B,C,M,E,F,F,N,O,P,Q,R,S,T,U,H,B,I,V,K,E):3
     [E>=F,K>=F+2,B>=F,H>=F+2,I>=0,R>=0,F>=1,C>=0,K=M+1,H=L+1,K=D+1,H=A+1,V=1,U=1,T=0,S=1,Q=0,P=1,O=0,N=0,J=1,G=1] 

### Cost equations --> "Loop" of split/14 
* CEs [66] --> Loop 65 
* CEs [65] --> Loop 66 

#### Loops of split/14 
* Loop 65: split(A,B,C,D,E,F,F,G,H,B,I,J,K,E) [E>=F,D>=F+1,B>=F,A>=F+1,I>=0,F>=1,C>=0,D+1=K,A+1=H,J=1,G=1] 
* Loop 66: split(A,B,C,D,E,F,G,H,I,B,J,K,L,E) [J>=C,E>=0,D>=1,C>=0,B>=0,A>=1,D+1=L,A+1=I,K=1,H=1,G=0,F=0] 

### Ranking functions of CR split(A,B,C,D,E,F,G,H,I,J,K,L,M,N) 

#### Partial ranking functions of CR split(A,B,C,D,E,F,G,H,I,J,K,L,M,N) 


### Resulting Chains:split(A,B,C,D,E,F,G,H,I,J,K,L,M,N) 
* [66]
* [65]


### Merging Chains  split/14 into  External patterns of execution 
* [[66]] --> 1 
* [[65]] --> 2 


### Specialization of cost equations subtract/7 
* CE 26 is refined into CE [67,68,69,70,71,72] 


#### Refined cost equations subtract/7 
* CE 67: subtract(A,B,C,D,A,E,F) = 9+ get_elem(A,B,C,G,H,I,J,K,L,M):1+ split(A,B,C,N,H,O,P,Q,R,B,S,T,U,H):2+ case_18(V,W,B,S,K,L,A,B,C,X,A,E,F):2
     [B>=E,C>=L,B>=K,H>=M,E+2>=2*A,F>=0,A>=2,L>=0,K>=2,S>=0,U>=3,M>=1,A+1=W,A+1=R,U=N+1,U=G+1,X=0,V=1,T=1,Q=1,P=1,O=1,J=0,I=0,D=0] 
* CE 68: subtract(A,B,C,D,A,E,F) = 9+ get_elem(A,B,C,G,H,I,J,K,L,M):1+ split(A,B,C,N,H,O,P,Q,R,B,S,T,U,H):2+ case_18(V,W,B,S,K,L,A,B,C,X,A,E,F):3
     [B>=E,E>=A,C>=L,B>=K,H>=M,F>=0,A>=3,L>=0,K>=2,S>=0,U>=3,M>=1,A+1=W,A+1=R,U=N+1,U=G+1,X=0,V=1,T=1,Q=1,P=1,O=1,J=0,I=0,D=0] 
* CE 69: subtract(A,B,C,D,A,B,E) = 9+ get_elem(A,B,C,F,G,H,I,J,K,L):1+ split(A,B,C,M,G,N,O,P,Q,B,R,S,T,G):2+ case_18(U,V,B,R,J,K,A,B,C,W,A,B,E):4
     [B+1>=A,C>=K,B>=J,G>=L,E>=0,A>=2,K>=0,J>=1,R>=0,T>=3,L>=1,A+1=V,A+1=Q,T=M+1,T=F+1,W=0,U=1,S=1,P=1,O=1,N=1,I=0,H=0,D=0] 
* CE 70: subtract(A,B,C,D,A,B,E) = 9+ get_elem(A,B,C,F,G,D,D,H,I,J):2+ split(A,B,C,K,G,L,M,N,O,B,P,Q,R,G):2+ case_18(S,T,B,P,H,I,A,B,C,D,A,B,E):4
     [B>=D+H,G>=D+J,B+1>=A,A>=D+2,R>=D+3,C>=I,E>=0,D>=1,I>=0,H>=1,P>=0,J>=1,A+1=T,A+1=O,D+1=M,D+1=L,R=K+1,R=F+1,S=1,Q=1,N=1] 
* CE 71: subtract(A,B,C,D,A,E,F) = 9+ get_elem(A,B,C,G,H,D,D,I,J,K):2+ split(A,B,C,L,H,M,N,O,P,B,Q,R,S,H):2+ case_18(T,U,B,Q,I,J,A,B,C,D,A,E,F):5
     [B>=D+I,H>=D+K,E+4>=3*A+D,B>=E,A>=D+2,I>=D+2,S>=D+3,C>=J,F>=0,D>=1,J>=0,Q>=0,K>=1,A+1=U,A+1=P,D+1=N,D+1=M,S=L+1,S=G+1,T=1,R=1,O=1] 
* CE 72: subtract(A,B,C,D,A,E,F) = 9+ get_elem(A,B,C,G,H,D,D,I,J,K):2+ split(A,B,C,L,H,M,N,O,P,B,Q,R,S,H):2+ case_18(T,U,B,Q,I,J,A,B,C,D,A,E,F):6
     [E>=A+D,B>=D+I,H>=D+K,B>=E,A>=D+2,I>=D+2,S>=D+3,C>=J,F>=0,D>=1,J>=0,Q>=0,K>=1,A+1=U,A+1=P,D+1=N,D+1=M,S=L+1,S=G+1,T=1,R=1,O=1] 

### Cost equations --> "Loop" of subtract/7 
* CEs [71,72] --> Loop 67 
* CEs [70] --> Loop 68 
* CEs [68] --> Loop 69 
* CEs [67] --> Loop 70 
* CEs [69] --> Loop 71 

#### Loops of subtract/7 
* Loop 67: subtract(A,B,C,D,A,E,F) [E>=A+D,B>=E,A>=D+2,F>=0,D>=1,C>=0] 
* Loop 68: subtract(A,B,C,D,A,B,E) [A>=D+2,B+1>=A,E>=0,D>=1,C>=0] 
* Loop 69: subtract(A,B,C,D,A,E,F) [B>=E,E>=A,F>=0,C>=0,A>=3,D=0] 
* Loop 70: subtract(A,B,C,D,A,E,F) [B>=E,E+2>=2*A,F>=0,C>=0,A>=2,D=0] 
* Loop 71: subtract(A,B,C,D,A,B,E) [B+1>=A,E>=0,C>=0,A>=2,D=0] 

### Ranking functions of CR subtract(A,B,C,D,E,F,G) 

#### Partial ranking functions of CR subtract(A,B,C,D,E,F,G) 


### Resulting Chains:subtract(A,B,C,D,E,F,G) 
* [71]
* [70]
* [69]
* [68]
* [67]


### Merging Chains  subtract/7 into  External patterns of execution 
* [[71]] --> 1 
* [[70]] --> 2 
* [[69]] --> 3 
* [[68]] --> 4 
* [[67]] --> 5 


### Specialization of cost equations echelon_helper/10 
* CE 28 is refined into CE [73] 
* CE 27 is refined into CE [74,75,76,77,78] 


#### Refined cost equations echelon_helper/10 
* CE 73: echelon_helper(A,B,C,D,E,F,G,H,I,J) = 3
     [J>=0,G>=0,D>=0,C>=0,B>=0,A>=0,I=0,H=1,F=0,E=1] 
* CE 74: echelon_helper(A,B,C,D,E,F,G,H,I,J) = 7+ subtract(A,B,C,K,A,B,L):1+ echelon_helper(A,B,L,M,N,O,P,H,I,J)
     [F>=O+1,B+1>=A,N>=1,L>=0,A>=2,C>=0,J>=0,I>=0,H>=0,G>=0,F>=0,N+1=E,M=1,K=0,D=0] 
* CE 75: echelon_helper(A,B,C,D,E,F,G,H,I,J) = 7+ subtract(A,B,C,K,A,L,M):2+ echelon_helper(A,L,M,N,O,P,Q,H,I,J)
     [F>=P+1,B>=L,L+2>=2*A,O>=1,M>=0,A>=2,C>=0,J>=0,I>=0,H>=0,G>=0,F>=0,O+1=E,N=1,K=0,D=0] 
* CE 76: echelon_helper(A,B,C,D,E,F,G,H,I,J) = 7+ subtract(A,B,C,K,A,L,M):3+ echelon_helper(A,L,M,N,O,P,Q,H,I,J)
     [F>=P+1,B>=L,L>=A,O>=1,M>=0,A>=3,C>=0,J>=0,I>=0,H>=0,G>=0,F>=0,O+1=E,N=1,K=0,D=0] 
* CE 77: echelon_helper(A,B,C,D,E,F,G,H,I,J) = 7+ subtract(A,B,C,D,A,B,K):4+ echelon_helper(A,B,K,L,M,N,O,H,I,J)
     [F>=N+1,B+1>=A,A>=D+2,M>=1,K>=0,D>=1,C>=0,J>=0,I>=0,H>=0,G>=0,F>=0,D+1=L,M+1=E] 
* CE 78: echelon_helper(A,B,C,D,E,F,G,H,I,J) = 7+ subtract(A,B,C,D,A,K,L):5+ echelon_helper(A,K,L,M,N,O,P,H,I,J)
     [K>=A+D,F>=O+1,B>=K,A>=D+2,N>=1,L>=0,D>=1,C>=0,J>=0,I>=0,H>=0,G>=0,F>=0,D+1=M,N+1=E] 

### Cost equations --> "Loop" of echelon_helper/10 
* CEs [78] --> Loop 72 
* CEs [77] --> Loop 73 
* CEs [76] --> Loop 74 
* CEs [75] --> Loop 75 
* CEs [74] --> Loop 76 
* CEs [73] --> Loop 77 

#### Loops of echelon_helper/10 
* Loop 72: echelon_helper(A,B,C,D,E,F,G,H,I,J)->  echelon_helper(A,A',B',C',D',E',F',H,I,J)
                  [A'>=A+D,F>=E'+1,B>=A',A>=D+2,B'>=0,J>=0,I>=0,H>=0,G>=0,F>=0,E>=2,D>=1,C>=0,E=D'+1,D+1=C'] 
* Loop 73: echelon_helper(A,B,C,D,E,F,G,H,I,J)->  echelon_helper(A,B,A',B',C',D',E',H,I,J)
                  [F>=D'+1,A>=D+2,B+1>=A,A'>=0,J>=0,I>=0,H>=0,G>=0,F>=0,E>=2,D>=1,C>=0,E=C'+1,D+1=B'] 
* Loop 74: echelon_helper(A,B,C,D,E,F,G,H,I,J)->  echelon_helper(A,A',B',C',D',E',F',H,I,J)
                  [F>=E'+1,B>=A',A'>=A,B'>=0,J>=0,I>=0,H>=0,G>=0,F>=0,E>=2,C>=0,A>=3,E=D'+1,C'=1,D=0] 
* Loop 75: echelon_helper(A,B,C,D,E,F,G,H,I,J)->  echelon_helper(A,A',B',C',D',E',F',H,I,J)
                  [F>=E'+1,B>=A',A'+2>=2*A,B'>=0,J>=0,I>=0,H>=0,G>=0,F>=0,E>=2,C>=0,A>=2,E=D'+1,C'=1,D=0] 
* Loop 76: echelon_helper(A,B,C,D,E,F,G,H,I,J)->  echelon_helper(A,B,A',B',C',D',E',H,I,J)
                  [F>=D'+1,B+1>=A,A'>=0,J>=0,I>=0,H>=0,G>=0,F>=0,E>=2,C>=0,A>=2,E=C'+1,B'=1,D=0] 
* Loop 77: echelon_helper(A,B,C,D,E,F,G,H,I,J) [J>=0,G>=0,D>=0,C>=0,B>=0,A>=0,I=0,H=1,F=0,E=1] 

### Ranking functions of CR echelon_helper(A,B,C,D,E,F,G,H,I,J) 
* RF of phase [72,73]: [A-D-1,B-D,E-1,F+1]

#### Partial ranking functions of CR echelon_helper(A,B,C,D,E,F,G,H,I,J) 
* Partial RF of phase [72,73]:
  - RF of loop [72:1]:
    -A+B-D+1
    B/2-D-1/2
  - RF of loop [72:1,73:1]:
    A-D-1
    E-1
    F+1
  - RF of loop [73:1]:
    B-D

Discarded unfeasible chain [[72,73]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [76,[72,73]](Non-terminating chain proved terminating)
Discarded unfeasible chain [75,[72,73]](Non-terminating chain proved terminating)
Discarded unfeasible chain [74,[72,73]](Non-terminating chain proved terminating)

### Resulting Chains:echelon_helper(A,B,C,D,E,F,G,H,I,J) 
* [[72,73],77]
* [77]
* [76,[72,73],77]
* [76,77]
* [75,[72,73],77]
* [75,77]
* [74,[72,73],77]
* [74,77]


### Merging Chains  echelon_helper/10 into  External patterns of execution 
* [[77,74],[77,75],[77,76]] --> 1 
* [[77,[72,73],74],[77,[72,73],75],[77,[72,73],76]] --> 2 
* [[77]] --> 3 
* [[77,[72,73]]] --> 4 


### Specialization of cost equations echelon_form/6 
* CE 29 is refined into CE [79,80,81] 


#### Refined cost equations echelon_form/6 
* CE 79: echelon_form(A,B,C,D,E,F) = 2+ echelon_helper(G,B,C,H,I,B,C,J,K,F):1
     [F>=0,B>=1,C>=0,K=0,J=1,I=2,H=0,G=2,E=0,D=1,A=2] 
* CE 80: echelon_form(A,B,C,D,E,F) = 2+ echelon_helper(A,B,C,G,A,B,C,H,I,F):2
     [B+1>=A,F>=0,A>=3,C>=0,I=0,H=1,G=0,E=0,D=1] 
* CE 81: echelon_form(A,B,C,D,E,F) = 2+ echelon_helper(G,H,C,I,J,K,C,L,M,F):3
     [F>=0,C>=0,M=0,L=1,K=0,J=1,I=0,H=0,G=1,E=0,D=1,B=0,A=1] 

### Cost equations --> "Loop" of echelon_form/6 
* CEs [80] --> Loop 78 
* CEs [79] --> Loop 79 
* CEs [81] --> Loop 80 

#### Loops of echelon_form/6 
* Loop 78: echelon_form(A,B,C,D,E,F) [B+1>=A,F>=0,C>=0,A>=3,E=0,D=1] 
* Loop 79: echelon_form(A,B,C,D,E,F) [F>=0,C>=0,B>=1,E=0,D=1,A=2] 
* Loop 80: echelon_form(A,B,C,D,E,F) [F>=0,C>=0,E=0,D=1,B=0,A=1] 

### Ranking functions of CR echelon_form(A,B,C,D,E,F) 

#### Partial ranking functions of CR echelon_form(A,B,C,D,E,F) 


### Resulting Chains:echelon_form(A,B,C,D,E,F) 
* [80]
* [79]
* [78]


### Merging Chains  echelon_form/6 into  External patterns of execution 
* [[80]] --> 1 
* [[79]] --> 2 
* [[78]] --> 3 


### Specialization of cost equations sizeL/7 
* CE 2 is refined into CE [82] 
* CE 1 is refined into CE [83] 


#### Refined cost equations sizeL/7 
* CE 82: sizeL(A,B,C,D,E,F,G) = 3
     [C>=0,G=0,F=0,E=0,D=1,B=0,A=1] 
* CE 83: sizeL(A,B,C,D,E,F,G) = 6+ sizeL(H,I,J,K,L,M,N)
     [E>=L+1,B>=I+1,N+1>=0,M+1>=0,K>=1,H>=1,E>=0,C>=0,B>=0,N+1=G,M+1=F,K+1=D,H+1=A] 

### Cost equations --> "Loop" of sizeL/7 
* CEs [83] --> Loop 81 
* CEs [82] --> Loop 82 

#### Loops of sizeL/7 
* Loop 81: sizeL(A,B,C,D,E,F,G)->  sizeL(A',B',C',D',E',F',G')
                  [E>=E'+1,B>=B'+1,G'+1>=0,F'+1>=0,D'>=1,A'>=1,E>=0,C>=0,B>=0,G'+1=G,F'+1=F,D'+1=D,A'+1=A] 
* Loop 82: sizeL(A,B,C,D,E,F,G) [C>=0,G=0,F=0,E=0,D=1,B=0,A=1] 

### Ranking functions of CR sizeL(A,B,C,D,E,F,G) 
* RF of phase [81]: [A-1,B+1,D-1,E+1]

#### Partial ranking functions of CR sizeL(A,B,C,D,E,F,G) 
* Partial RF of phase [81]:
  - RF of loop [81:1]:
    A-1
    B+1
    D-1
    E+1

Discarded unfeasible chain [[81]]...(Non-terminating chain proved terminating)

### Resulting Chains:sizeL(A,B,C,D,E,F,G) 
* [[81],82]
* [82]


### Merging Chains  sizeL/7 into  External patterns of execution 
* [[82]] --> 1 
* [[82,[81]]] --> 2 


### Specialization of cost equations echelon_helper_old/7 
* CE 31 is refined into CE [84,85] 
* CE 30 is refined into CE [86,87,88,89,90] 


#### Refined cost equations echelon_helper_old/7 
* CE 84: echelon_helper_old(A,B,C,D,E,F,C) = 3+ sizeL(G,H,C,I,J,K,L):1
     [C>=0,D>=0,L=0,K=0,J=0,I=1,H=0,G=1,F=0,E=1,B=0,A=1] 
* CE 85: echelon_helper_old(A,B,C,D,A,B,C) = 3+ sizeL(A,B,C,A,E,F,G):2
     [E+1>=A,B+1>=A,D+1>=A,A>=2,C>=0,A=G+1,A=F+1] 
* CE 86: echelon_helper_old(A,B,C,D,E,F,G) = 7+ sizeL(A,B,C,A,H,I,J):2+ subtract(A,B,C,K,A,B,L):1+ echelon_helper_old(A,B,L,M,E,F,G)
     [B+1>=A,H+1>=A,L>=0,A>=2,C>=0,G>=0,F>=0,E>=0,A=J+1,A=I+1,M=1,K=0,D=0] 
* CE 87: echelon_helper_old(A,B,C,D,E,F,G) = 7+ sizeL(A,B,C,A,H,I,J):2+ subtract(A,B,C,K,A,L,M):2+ echelon_helper_old(A,L,M,N,E,F,G)
     [B>=L,H+1>=A,L+2>=2*A,M>=0,A>=2,C>=0,G>=0,F>=0,E>=0,A=J+1,A=I+1,N=1,K=0,D=0] 
* CE 88: echelon_helper_old(A,B,C,D,E,F,G) = 7+ sizeL(A,B,C,A,H,I,J):2+ subtract(A,B,C,K,A,L,M):3+ echelon_helper_old(A,L,M,N,E,F,G)
     [B>=L,L>=A,H+1>=A,M>=0,A>=3,C>=0,G>=0,F>=0,E>=0,A=J+1,A=I+1,N=1,K=0,D=0] 
* CE 89: echelon_helper_old(A,B,C,D,E,F,G) = 7+ sizeL(A,B,C,A,H,I,J):2+ subtract(A,B,C,D,A,B,K):4+ echelon_helper_old(A,B,K,L,E,F,G)
     [B+1>=A,H+1>=A,A>=D+2,K>=0,D>=1,C>=0,G>=0,F>=0,E>=0,D+1=L,A=J+1,A=I+1] 
* CE 90: echelon_helper_old(A,B,C,D,E,F,G) = 7+ sizeL(A,B,C,A,H,I,J):2+ subtract(A,B,C,D,A,K,L):5+ echelon_helper_old(A,K,L,M,E,F,G)
     [K>=A+D,B>=K,H+1>=A,A>=D+2,L>=0,D>=1,C>=0,G>=0,F>=0,E>=0,D+1=M,A=J+1,A=I+1] 

### Cost equations --> "Loop" of echelon_helper_old/7 
* CEs [90] --> Loop 83 
* CEs [89] --> Loop 84 
* CEs [88] --> Loop 85 
* CEs [87] --> Loop 86 
* CEs [86] --> Loop 87 
* CEs [85] --> Loop 88 
* CEs [84] --> Loop 89 

#### Loops of echelon_helper_old/7 
* Loop 83: echelon_helper_old(A,B,C,D,E,F,G)->  echelon_helper_old(A,A',B',C',E,F,G)
                  [A'>=A+D,B>=A',A>=D+2,B'>=0,G>=0,F>=0,E>=0,D>=1,C>=0,D+1=C'] 
* Loop 84: echelon_helper_old(A,B,C,D,E,F,G)->  echelon_helper_old(A,B,A',B',E,F,G)
                  [A>=D+2,B+1>=A,A'>=0,G>=0,F>=0,E>=0,D>=1,C>=0,D+1=B'] 
* Loop 85: echelon_helper_old(A,B,C,D,E,F,G)->  echelon_helper_old(A,A',B',C',E,F,G)
                  [B>=A',A'>=A,B'>=0,G>=0,F>=0,E>=0,C>=0,A>=3,C'=1,D=0] 
* Loop 86: echelon_helper_old(A,B,C,D,E,F,G)->  echelon_helper_old(A,A',B',C',E,F,G)
                  [B>=A',A'+2>=2*A,B'>=0,G>=0,F>=0,E>=0,C>=0,A>=2,C'=1,D=0] 
* Loop 87: echelon_helper_old(A,B,C,D,E,F,G)->  echelon_helper_old(A,B,A',B',E,F,G)
                  [B+1>=A,A'>=0,G>=0,F>=0,E>=0,C>=0,A>=2,B'=1,D=0] 
* Loop 88: echelon_helper_old(A,B,C,D,A,B,C) [D+1>=A,B+1>=A,C>=0,A>=2] 
* Loop 89: echelon_helper_old(A,B,C,D,E,F,C) [D>=0,C>=0,F=0,E=1,B=0,A=1] 

### Ranking functions of CR echelon_helper_old(A,B,C,D,E,F,G) 
* RF of phase [83,84]: [A-D-1,B-D]

#### Partial ranking functions of CR echelon_helper_old(A,B,C,D,E,F,G) 
* Partial RF of phase [83,84]:
  - RF of loop [83:1]:
    -A+B-D+1
    B/2-D-1/2
  - RF of loop [83:1,84:1]:
    A-D-1
  - RF of loop [84:1]:
    B-D

Discarded unfeasible chain [[83,84]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [87,[83,84]](Non-terminating chain proved terminating)
Discarded unfeasible chain [86,[83,84]](Non-terminating chain proved terminating)
Discarded unfeasible chain [85,[83,84]](Non-terminating chain proved terminating)

### Resulting Chains:echelon_helper_old(A,B,C,D,E,F,G) 
* [[83,84],88]
* [89]
* [88]
* [87,[83,84],88]
* [87,88]
* [86,[83,84],88]
* [86,88]
* [85,[83,84],88]


### Merging Chains  echelon_helper_old/7 into  External patterns of execution 
* [[89]] --> 1 
* [[88,87]] --> 2 
* [[88,86]] --> 3 
* [[88,[83,84],85],[88,[83,84],86],[88,[83,84],87]] --> 4 
* [[88]] --> 5 
* [[88,[83,84]]] --> 6 


### Specialization of cost equations echelon_form_old/6 
* CE 32 is refined into CE [91,92,93,94] 


#### Refined cost equations echelon_form_old/6 
* CE 91: echelon_form_old(A,B,C,D,E,C) = 2+ echelon_helper_old(F,G,C,H,I,J,C):1
     [C>=0,J=0,I=1,H=0,G=0,F=1,E=0,D=1,B=0,A=1] 
* CE 92: echelon_form_old(A,B,C,D,B,E) = 2+ echelon_helper_old(F,B,C,G,H,B,E):2
     [E>=0,B>=1,C>=0,H=2,G=0,F=2,D=2,A=2] 
* CE 93: echelon_form_old(A,B,C,D,E,F) = 2+ echelon_helper_old(G,B,C,H,I,E,F):3
     [B>=E,F>=0,E>=2,C>=0,I=2,H=0,G=2,D=2,A=2] 
* CE 94: echelon_form_old(A,B,C,A,D,E) = 2+ echelon_helper_old(A,B,C,F,A,D,E):4
     [B>=D,D+1>=A,E>=0,A>=3,C>=0,F=0] 

### Cost equations --> "Loop" of echelon_form_old/6 
* CEs [94] --> Loop 90 
* CEs [93] --> Loop 91 
* CEs [92] --> Loop 92 
* CEs [91] --> Loop 93 

#### Loops of echelon_form_old/6 
* Loop 90: echelon_form_old(A,B,C,A,D,E) [B>=D,D+1>=A,E>=0,C>=0,A>=3] 
* Loop 91: echelon_form_old(A,B,C,D,E,F) [B>=E,F>=0,E>=2,C>=0,D=2,A=2] 
* Loop 92: echelon_form_old(A,B,C,D,B,E) [E>=0,C>=0,B>=1,D=2,A=2] 
* Loop 93: echelon_form_old(A,B,C,D,E,C) [C>=0,E=0,D=1,B=0,A=1] 

### Ranking functions of CR echelon_form_old(A,B,C,D,E,F) 

#### Partial ranking functions of CR echelon_form_old(A,B,C,D,E,F) 


### Resulting Chains:echelon_form_old(A,B,C,D,E,F) 
* [93]
* [92]
* [91]
* [90]


### Merging Chains  echelon_form_old/6 into  External patterns of execution 
* [[93]] --> 1 
* [[92]] --> 2 
* [[91]] --> 3 
* [[90]] --> 4 


### Specialization of cost equations hd_helper/7 
* CE 18 is refined into CE [95] 
* CE 17 is refined into CE [96] 


#### Refined cost equations hd_helper/7 
* CE 95: hd_helper(A,B,C,D,E,F,G) = 9+ hd_helper(H,I,J,K,L,F,G)
     [I+L>=E,L>=E+1,J>=0,H>=1,G>=0,F>=0,E>=0,D>=1,I+L=B+E,D+1=K,J+1=C,H+1=A] 
* CE 96: hd_helper(A,B,C,D,E,D,E) = 3
     [E>=0,D>=0,B>=0,A>=0,C=0] 

### Cost equations --> "Loop" of hd_helper/7 
* CEs [96] --> Loop 94 
* CEs [95] --> Loop 95 

#### Loops of hd_helper/7 
* Loop 94: hd_helper(A,B,C,D,E,D,E) [E>=0,D>=0,B>=0,A>=0,C=0] 
* Loop 95: hd_helper(A,B,C,D,E,F,G)->  hd_helper(A',B',C',D',E',F,G)
                  [B'+E'>=E,E'>=E+1,C'>=0,A'>=1,G>=0,F>=0,E>=0,D>=1,B+E=B'+E',D+1=D',C'+1=C,A'+1=A] 

### Ranking functions of CR hd_helper(A,B,C,D,E,F,G) 
* RF of phase [95]: [A-1,B+1,C]

#### Partial ranking functions of CR hd_helper(A,B,C,D,E,F,G) 
* Partial RF of phase [95]:
  - RF of loop [95:1]:
    A-1
    B+1
    C

Discarded unfeasible chain [[95]]...(Non-terminating chain proved terminating)

### Resulting Chains:hd_helper(A,B,C,D,E,F,G) 
* [[95],94]
* [94]


### Merging Chains  hd_helper/7 into  External patterns of execution 
* [[94]] --> 1 
* [[94,[95]]] --> 2 


### Specialization of cost equations hd/5 
* CE 22 is refined into CE [97,98] 


#### Refined cost equations hd/5 
* CE 97: hd(A,B,C,D,E) = 3+ hd_helper(A,B,F,G,H,I,J):1+ reverseL(K,L,M,N,O,P,Q,R,S,T):1
     [R>=0,M>=0,B>=0,A>=0,T=0,S=1,Q=0,P=1,O=0,N=1,L=0,K=1,J=0,I=1,H=0,G=1,F=0,E=0,D=1,C=0] 
* CE 98: hd(A,B,C,D,E) = 3+ hd_helper(A,B,F,G,H,D,E):2+ reverseL(D,I,J,D,E,D,I,K,D,E):2
     [B>=E,E+1>=D,I+1>=D,A>=D,K>=0,D>=2,J>=0,D=F+1,D=C+1,H=0,G=1] 

### Cost equations --> "Loop" of hd/5 
* CEs [98] --> Loop 96 
* CEs [97] --> Loop 97 

#### Loops of hd/5 
* Loop 96: hd(A,B,C,D,E) [B>=E,E>=C,A>=C+1,C>=1,C+1=D] 
* Loop 97: hd(A,B,C,D,E) [B>=0,A>=0,E=0,D=1,C=0] 

### Ranking functions of CR hd(A,B,C,D,E) 

#### Partial ranking functions of CR hd(A,B,C,D,E) 


### Resulting Chains:hd(A,B,C,D,E) 
* [97]
* [96]


### Merging Chains  hd/5 into  External patterns of execution 
* [[97]] --> 1 
* [[96]] --> 2 


### Specialization of cost equations tl/5 
* CE 16 is refined into CE [99] 
* CE 15 is refined into CE [100] 


#### Refined cost equations tl/5 
* CE 99: tl(A,B,C,D,E) = 8+ tl(F,G,H,D,E)
     [B>=G+1,H>=0,F>=1,E>=0,D>=0,B>=0,H+1=C,F+1=A] 
* CE 100: tl(A,B,C,A,B) = 3
     [B>=0,A>=0,C=0] 

### Cost equations --> "Loop" of tl/5 
* CEs [100] --> Loop 98 
* CEs [99] --> Loop 99 

#### Loops of tl/5 
* Loop 98: tl(A,B,C,A,B) [B>=0,A>=0,C=0] 
* Loop 99: tl(A,B,C,D,E)->  tl(A',B',C',D,E)
                  [B>=B'+1,C'>=0,A'>=1,E>=0,D>=0,B>=0,C'+1=C,A'+1=A] 

### Ranking functions of CR tl(A,B,C,D,E) 
* RF of phase [99]: [A-1,B+1,C]

#### Partial ranking functions of CR tl(A,B,C,D,E) 
* Partial RF of phase [99]:
  - RF of loop [99:1]:
    A-1
    B+1
    C

Discarded unfeasible chain [[99]]...(Non-terminating chain proved terminating)

### Resulting Chains:tl(A,B,C,D,E) 
* [[99],98]
* [98]


### Merging Chains  tl/5 into  External patterns of execution 
* [[98]] --> 1 
* [[98,[99]]] --> 2 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 34 

#### Computing cost of phase [34] 

#### Simplifying cost structure of CE 35 

#### Cost of loops [34] 

 * loop 34:concat(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) -> [concat(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O')] 
5
##### Pending set concat(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)
* Psum in Loop 34: [it(34)=<1]

###### Computing sum for it(34)=<1  in Loop 34 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
     - head Candidate: A-1 
     - head Candidate: B+1 
     - head Candidate: E+1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: E+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
     - tail Candidate: A-1 
     - tail Candidate: B+1 
     - tail Candidate: E+1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(34)=<D-1,it(34)=<A-1,it(34)=<B+1,it(34)=<E+1,it(34)=<A-1,it(34)=<B+1,it(34)=<D-1,it(34)=<E+1,it(34)=<D-D',it(34)=<A-A',it(34)=<B-B',it(34)=<E-E',it(34)=<A-A',it(34)=<B-B',it(34)=<D-D',it(34)=<E-E'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [34] 

#### Simplifying cost structure of phase [34] 

#### Cost of phase [34]:concat(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) -> [concat(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O')] 
5*it(34)+0
  Such that:it(34) =< A
it(34) =< A-A'
it(34) =< B+1
it(34) =< B-B'
it(34) =< D
it(34) =< D-D'
it(34) =< E+1
it(34) =< E-E'

#### Simplifying cost structure of chain [[34],35] 

#### Cost of chains of concat(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O):
* Chain [[34],35]: 5*it(34)+2
  Such that:it(34) =< -I+N

  with precondition: [A=D,L=B+G,O=E+J,A+F=K+1,A+I=N+1,A>=2,C>=0,F>=1,H>=0,I>=1,M>=0,B+1>=A,E+1>=A,L>=B,O>=E,C+H>=M] 

* Chain [35]: 2
  with precondition: [A=1,B=0,D=1,E=0,F=K,G=L,H=M,I=N,J=O,C>=0,F>=0,G>=0,H>=0,I>=0,J>=0] 


#### Simplifying cost structure of CE 38 

#### Computing cost of phase [38] 

#### Simplifying cost structure of CE 36 

#### Cost of loops [38] 

 * loop 38:subtract_row_helper(A,B,C,D,E,F,G) -> [subtract_row_helper(A',B',C',D',E',F',G')] 
10
##### Pending set subtract_row_helper(A,B,C,D,E,F,G)
* Psum in Loop 38: [it(38)=<1]

###### Computing sum for it(38)=<1  in Loop 38 
   - Applying inductive sum strategy 
     - head Candidate: C-1 
     - head Candidate: A-1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
     - tail Candidate: A-1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(38)=<C-1,it(38)=<A-1,it(38)=<A-1,it(38)=<C-1,it(38)=<C-C',it(38)=<A-A',it(38)=<A-A',it(38)=<C-C'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [38] 

#### Simplifying cost structure of phase [38] 

#### Cost of phase [38]:subtract_row_helper(A,B,C,D,E,F,G) -> [subtract_row_helper(A',B',C',D',E',F',G')] 
10*it(38)+0
  Such that:it(38) =< A
it(38) =< A-A'
it(38) =< C
it(38) =< C-C'

#### Simplifying cost structure of chain [[38],37] 

#### Simplifying cost structure of CE 37 

#### Found solution for phase  [38] in the cache 

#### Cost of phase [38]:subtract_row_helper(A,B,C,D,E,F,G) -> [subtract_row_helper(A',B',C',D',E',F',G')] 
10*it(38)+0
  Such that:it(38) =< A
it(38) =< A-A'
it(38) =< C
it(38) =< C-C'

#### Simplifying cost structure of chain [[38],36] 

#### Cost of chains of subtract_row_helper(A,B,C,D,E,F,G):
* Chain [[38],37]: 10*it(38)+3
  Such that:it(38) =< F

  with precondition: [A=F,A>=2,B>=0,D>=0,E>=0,G>=0,C>=A] 

* Chain [[38],36]: 10*it(38)+6
  Such that:it(38) =< F

  with precondition: [C=F,B>=0,C>=2,D>=0,E>=0,G>=0,A>=C+1] 

* Chain [37]: 3
  with precondition: [A=1,F=1,B>=0,C>=0,D>=0,E>=0,G>=0] 

* Chain [36]: 6
  with precondition: [C=1,F=1,A>=2,B>=0,D>=0,E>=0,G>=0] 


#### Simplifying cost structure of CE 39 

#### Computing cost of phase [39] 

#### Simplifying cost structure of CE 40 

#### Cost of loops [39] 

 * loop 39:get_2elems(A,B,C,D,E,F,G,H,I,J,K,L,M,N) -> [get_2elems(A',B',C',D',E',F',G',H',I',J',K',L',M',N')] 
10
##### Pending set get_2elems(A,B,C,D,E,F,G,H,I,J,K,L,M,N)
* Psum in Loop 39: [it(39)=<1]

###### Computing sum for it(39)=<1  in Loop 39 
   - Applying inductive sum strategy 
     - head Candidate: J 
     - head Candidate: D 
     - head Candidate: H 
     - head Candidate: I 
     - head Candidate: A-1 
     - head Candidate: G-1 
     - head Candidate: C-1 
     - head Candidate: E-1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: G-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: H 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: I 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: J 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: J 
     - tail Candidate: D 
     - tail Candidate: H 
     - tail Candidate: I 
     - tail Candidate: A-1 
     - tail Candidate: G-1 
     - tail Candidate: C-1 
     - tail Candidate: E-1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: G-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: H 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: I 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: J 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(39)=<J,it(39)=<D,it(39)=<H,it(39)=<I,it(39)=<A-1,it(39)=<G-1,it(39)=<C-1,it(39)=<E-1,it(39)=<A-1,it(39)=<C-1,it(39)=<D,it(39)=<E-1,it(39)=<G-1,it(39)=<H,it(39)=<I,it(39)=<J,it(39)=<J-J',it(39)=<D-D',it(39)=<H-H',it(39)=<I-I',it(39)=<A-A',it(39)=<G-G',it(39)=<C-C',it(39)=<E-E',it(39)=<A-A',it(39)=<C-C',it(39)=<D-D',it(39)=<E-E',it(39)=<G-G',it(39)=<H-H',it(39)=<I-I',it(39)=<J-J'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [39] 

#### Simplifying cost structure of phase [39] 

#### Cost of phase [39]:get_2elems(A,B,C,D,E,F,G,H,I,J,K,L,M,N) -> [get_2elems(A',B',C',D',E',F',G',H',I',J',K',L',M',N')] 
10*it(39)+0
  Such that:it(39) =< A
it(39) =< A-A'
it(39) =< C
it(39) =< C-C'
it(39) =< D
it(39) =< D-D'
it(39) =< E
it(39) =< E-E'
it(39) =< G
it(39) =< G-G'
it(39) =< H
it(39) =< H-H'
it(39) =< I
it(39) =< I-I'
it(39) =< J
it(39) =< J-J'

#### Simplifying cost structure of chain [[39],40] 

#### Cost of chains of get_2elems(A,B,C,D,E,F,G,H,I,J,K,L,M,N):
* Chain [[39],40]: 10*it(39)+8
  Such that:it(39) =< I

  with precondition: [K=1,M=1,I=J,B>=0,F>=0,I>=1,L>=0,N>=2,A>=I+2,C>=I+2,D>=I+1,E>=I+2,G>=I+2,H>=I+1,B+F>=L,D+H>=2*I+N] 

* Chain [40]: 8
  with precondition: [I=0,J=0,K=1,M=1,A>=2,B>=0,C>=2,D>=1,E>=2,F>=0,G>=2,H>=1,L>=0,N>=2,B+F>=L,D+H>=N] 

 * Renamed intermediate variables: 
[ (eq(41,2),it(38))>>s(1)]

#### Simplifying cost structure of CE 41 
 * Renamed intermediate variables: 
[ (eq(42,2),it(38))>>s(2)]

#### Simplifying cost structure of CE 42 
 * Renamed intermediate variables: 
[ (eq(43,1),it(39))>>s(3)]
 * Renamed intermediate variables: 
[ (eq(43,2),it(38))>>s(4)]

#### Simplifying cost structure of CE 43 
 * Renamed intermediate variables: 
[ (eq(44,1),it(39))>>s(5)]
 * Renamed intermediate variables: 
[ (eq(44,2),it(38))>>s(6)]

#### Simplifying cost structure of CE 44 

#### Cost of chains of subtract_row(A,B,C,D,E,F,G):
* Chain [44]: 10*s(1)+18
  Such that:s(1) =< A

  with precondition: [E=0,A=F,A>=2,B>=0,D>=0,G>=0,C>=A] 

* Chain [43]: 10*s(2)+21
  Such that:s(2) =< C

  with precondition: [E=0,C=F,B>=0,C>=2,D>=0,G>=0,A>=C+1] 

* Chain [42]: 10*s(3)+10*s(4)+18
  Such that:s(4) =< A
s(3) =< E

  with precondition: [A=F,B>=0,D>=0,E>=1,G>=0,C>=A,A>=E+2] 

* Chain [41]: 10*s(5)+10*s(6)+21
  Such that:s(6) =< C
s(5) =< E

  with precondition: [C=F,B>=0,D>=0,E>=1,G>=0,A>=C+1,C>=E+2] 


#### Simplifying cost structure of CE 45 

#### Computing cost of phase [47,48] 
 * Renamed intermediate variables: 
[ (eq(47,1),s(2))>>s(7)]

#### Simplifying cost structure of CE 47 
 * Renamed intermediate variables: 
[ (it(47),s(7))>>s(8)]
 * Renamed intermediate variables: 
[ (eq(46,1),s(1))>>s(9)]

#### Simplifying cost structure of CE 46 
 * Renamed intermediate variables: 
[ (it(48),s(9))>>s(10)]

#### Cost of loops [47,48] 

 * loop 47:subtract_helper(A,B,C,D,E,F,G,H,I) -> [subtract_helper(A',B',C',D',E',F',G',H',I')] 
10*s(8)+27
  Such that:s(8) =< B-B'

 * loop 48:subtract_helper(A,B,C,D,E,F,G,H,I) -> [subtract_helper(A',B',C',D',E',F',G',H',I')] 
10*s(10)+24
  Such that:s(10) =< D'

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 47: [it(47)=<1,s(11)=<B-B']
* Psum in Loop 48: [it(48)=<1,s(12)=<D']

###### Computing sum for it(47)=<1  in Loop 47 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - Loop 48 is collaborative and bounds [it(48)] 
     - head Candidate: B/2+1/2 
       - Loop 48 is collaborative and bounds [it(48)] 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - Loop 48 is collaborative and bounds [it(48)] 
     - tail Candidate: B/2+1/2 
       - Loop 48 is collaborative and bounds [it(48)] 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(47)+it(48)=<A-1,it(47)+it(48)=<B/2+1/2,it(47)+it(48)=<A-1,it(47)+it(48)=<B/2+1/2,it(47)+it(48)=<A-A',it(47)+it(48)=<B/2-B'/2,it(47)+it(48)=<A-A',it(47)+it(48)=<B/2-B'/2] 

##### Pending set A
* Psum in Loop 47: [s(11)=<B-B']
* Psum in Loop 48: [it(48)=<1,s(12)=<D']

###### Computing sum for s(11)=<B-B'  in Loop 47 
   - Applying inductive sum strategy 
     - head Candidate: B 
       - Loop 48 is collaborative and bounds [it(48)] 
     - tail Candidate: B 
       - Loop 48 is collaborative and bounds [it(48)] 
 * Adding constraints: [it(48)+s(11)=<B,it(48)+s(11)=<B-B'] 

##### Pending set A
* Psum in Loop 48: [it(48)=<1,s(12)=<D']

###### Computing sum for it(48)=<1  in Loop 48 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(47)+it(48)=<A-1,it(47)+it(48)=<B/2+1/2,it(47)+it(48)=<A-1,it(47)+it(48)=<B/2+1/2,it(47)+it(48)=<A-A',it(47)+it(48)=<B/2-B'/2,it(47)+it(48)=<A-A',it(47)+it(48)=<B/2-B'/2] 

##### Pending set A
* Psum in Loop 48: [s(12)=<D']

###### Computing sum for s(12)=<D'  in Loop 48 
   - Applying inductive sum strategy 
     - head Candidate: -2*A+2*B-D+4 
       - Loop 47 is collaborative
     - head Candidate: 2*B-D 
       - Loop 47 is collaborative
     - tail Candidate: -2*A+2*B-D+4 
       - Loop 47 is collaborative
     - tail Candidate: 2*B-D 
       - Loop 47 is collaborative
 * Adding constraints: [s(12)=< -2*A+2*B-D+4,s(12)=<2*B-D,s(12)=< -2*A+2*B-D+2*A'-2*B'+D',s(12)=<2*B-D-2*B'+D'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [47,48] 

#### Simplifying cost structure of phase [47,48] 

#### Cost of phase [47,48]:subtract_helper(A,B,C,D,E,F,G,H,I) -> [subtract_helper(A',B',C',D',E',F',G',H',I')] 
27*it(47)+24*it(48)+10*s(11)+10*s(12)+0
  Such that:s(12) =< -2*A+2*B-D+4
s(12) =< -2*A+2*B-D+2*A'-2*B'+D'
s(12) =< 2*B-D
s(12) =< 2*B-D-2*B'+D'
aux(1) =< A
aux(2) =< A-A'
aux(3) =< B
aux(4) =< B-B'
aux(5) =< B/2+1/2
aux(6) =< B/2-B'/2
it(47) =< aux(1)
it(48) =< aux(1)
it(47) =< aux(2)
it(48) =< aux(2)
it(48) =< aux(3)
s(11) =< aux(3)
it(48) =< aux(4)
s(11) =< aux(4)
it(47) =< aux(5)
it(48) =< aux(5)
it(47) =< aux(6)
it(48) =< aux(6)

#### Simplifying cost structure of chain [[47,48],49] 
 * Joined equivalent variables [aux(7),aux(1),aux(2)] into aux(7)
 * Joined equivalent variables [aux(8),aux(3),aux(4)] into aux(8)

#### Computing cost of phase [45,46] 
 * Renamed intermediate variables: 
[ (eq(49,1),s(6))>>s(13), (eq(49,1),s(5))>>s(14)]

#### Simplifying cost structure of CE 49 
 * Renamed intermediate variables: 
[ (it(45),s(13))>>s(15), (it(45),s(14))>>s(16)]
 * Renamed intermediate variables: 
[ (eq(48,1),s(4))>>s(17), (eq(48,1),s(3))>>s(18)]

#### Simplifying cost structure of CE 48 
 * Renamed intermediate variables: 
[ (it(46),s(17))>>s(19), (it(46),s(18))>>s(20)]

#### Cost of loops [45,46] 

 * loop 45:subtract_helper(A,B,C,D,E,F,G,H,I) -> [subtract_helper(A',B',C',D',E',F',G',H',I')] 
10*s(15)+10*s(16)+27
  Such that:s(15) =< B-B'
s(16) =< F'

 * loop 46:subtract_helper(A,B,C,D,E,F,G,H,I) -> [subtract_helper(A',B',C',D',E',F',G',H',I')] 
10*s(19)+10*s(20)+24
  Such that:s(19) =< D'
s(20) =< F'

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 45: [it(45)=<1,s(21)=<B-B',s(22)=<F']
* Psum in Loop 46: [it(46)=<1,s(23)=<D',s(24)=<F']

###### Computing sum for it(45)=<1  in Loop 45 
   - Applying inductive sum strategy 
     - head Candidate: B/3+1/3 
       - Loop 46 is collaborative and bounds [it(46)] 
     - head Candidate: A-1 
       - Loop 46 is collaborative and bounds [it(46)] 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B/3+1/3 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B/3+1/3 
       - Loop 46 is collaborative and bounds [it(46)] 
     - tail Candidate: A-1 
       - Loop 46 is collaborative and bounds [it(46)] 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B/3+1/3 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(45)+it(46)=<B/3+1/3,it(45)+it(46)=<A-1,it(45)+it(46)=<A-1,it(45)+it(46)=<B/3+1/3,it(45)+it(46)=<B/3-B'/3,it(45)+it(46)=<A-A',it(45)+it(46)=<A-A',it(45)+it(46)=<B/3-B'/3] 

##### Pending set A
* Psum in Loop 45: [s(21)=<B-B',s(22)=<F']
* Psum in Loop 46: [it(46)=<1,s(23)=<D',s(24)=<F']

###### Computing sum for s(21)=<B-B'  in Loop 45 
   - Applying inductive sum strategy 
     - head Candidate: B 
       - Loop 46 is collaborative and bounds [it(46)] 
     - tail Candidate: B 
       - Loop 46 is collaborative and bounds [it(46)] 
 * Adding constraints: [it(46)+s(21)=<B,it(46)+s(21)=<B-B'] 

##### Pending set A
* Psum in Loop 45: [s(22)=<F']
* Psum in Loop 46: [it(46)=<1,s(23)=<D',s(24)=<F']

###### Computing sum for s(22)=<F'  in Loop 45 
   - Applying inductive sum strategy 
     - head Candidate: -2*A+B+2 
       - Loop 46 is collaborative and bounds [it(46)] 
     - head Candidate: B-2 
       - Loop 46 is collaborative and bounds [it(46)] 
     - tail Candidate: -2*A+B+2 
       - Loop 46 is collaborative and bounds [it(46)] 
     - tail Candidate: B-2 
       - Loop 46 is collaborative and bounds [it(46)] 
 * Adding constraints: [it(46)+s(22)=< -2*A+B+2,it(46)+s(22)=<B-2,it(46)+s(22)=< -2*A+B+2*A'-B',it(46)+s(22)=<B-B'] 

##### Pending set A
* Psum in Loop 46: [it(46)=<1,s(23)=<D',s(24)=<F']

###### Computing sum for it(46)=<1  in Loop 46 
   - Applying inductive sum strategy 
     - head Candidate: B/3+1/3 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B/3+1/3 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B/3+1/3 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B/3+1/3 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(45)+it(46)=<B/3+1/3,it(45)+it(46)=<A-1,it(45)+it(46)=<A-1,it(45)+it(46)=<B/3+1/3,it(45)+it(46)=<B/3-B'/3,it(45)+it(46)=<A-A',it(45)+it(46)=<A-A',it(45)+it(46)=<B/3-B'/3] 

##### Pending set A
* Psum in Loop 46: [s(23)=<D',s(24)=<F']

###### Computing sum for s(23)=<D'  in Loop 46 
   - Applying inductive sum strategy 
     - head Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [s(21)+s(23)=<B,s(21)+s(23)=<B-B'] 

##### Pending set A
* Psum in Loop 46: [s(24)=<F']

###### Computing sum for s(24)=<F'  in Loop 46 
   - Applying inductive sum strategy 
     - head Candidate: -2*A+B+2 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -2*A+B-D+F+4 
       - Loop 45 is collaborative
     - tail Candidate: -2*A+B+2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -2*A+B-D+F+4 
       - Loop 45 is collaborative
 * Adding constraints: [s(22)+s(24)=< -2*A+B+2,s(24)=< -2*A+B-D+F+4,s(22)+s(24)=< -2*A+B+2*A'-B',s(24)=< -2*A+B-D+F+2*A'-B'+D'-F'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [45,46] 

#### Simplifying cost structure of phase [45,46] 
 * Joined equivalent variables [s(21),s(23)] into s(21)

#### Cost of phase [45,46]:subtract_helper(A,B,C,D,E,F,G,H,I) -> [subtract_helper(A',B',C',D',E',F',G',H',I')] 
27*it(45)+24*it(46)+20*s(21)+10*s(22)+10*s(24)+0
  Such that:s(24) =< -2*A+B-D+F+4
s(24) =< -2*A+B-D+F+2*A'-B'+D'-F'
aux(9) =< -2*A+B+2
aux(10) =< -2*A+B+2*A'-B'
aux(11) =< A
aux(12) =< A-A'
aux(13) =< B
aux(14) =< B-B'
aux(15) =< B/3+1/3
aux(16) =< B/3-B'/3
it(46) =< aux(9)
s(22) =< aux(9)
s(24) =< aux(9)
it(46) =< aux(10)
s(22) =< aux(10)
s(24) =< aux(10)
it(45) =< aux(11)
it(46) =< aux(11)
it(45) =< aux(12)
it(46) =< aux(12)
it(46) =< aux(13)
s(21) =< aux(13)
s(22) =< aux(13)
it(46) =< aux(14)
s(21) =< aux(14)
s(22) =< aux(14)
it(45) =< aux(15)
it(46) =< aux(15)
it(45) =< aux(16)
it(46) =< aux(16)

#### Simplifying cost structure of chain [[45,46],49] 
 * Joined equivalent variables [aux(17),aux(9),aux(10)] into aux(17)
 * Joined equivalent variables [aux(18),aux(11),aux(12)] into aux(18)
 * Joined equivalent variables [aux(19),aux(13),aux(14)] into aux(19)

#### Cost of chains of subtract_helper(A,B,C,D,E,F,G,H,I):
* Chain [[47,48],49]: 27*it(47)+24*it(48)+10*s(11)+10*s(12)+3
  Such that:s(12) =< -2*A+2*B+2
s(12) =< -2*A+2*B-D+4
s(12) =< 2*B-D
aux(6) =< B/2
aux(5) =< B/2+1/2
aux(7) =< A
aux(8) =< B
it(47) =< aux(7)
it(48) =< aux(7)
it(48) =< aux(8)
s(11) =< aux(8)
it(47) =< aux(5)
it(48) =< aux(5)
it(47) =< aux(6)
it(48) =< aux(6)

  with precondition: [F=0,A=G,A>=2,C>=0,D>=2,E>=0,I>=0,H+2>=2*A,B>=H] 

* Chain [[45,46],49]: 27*it(45)+24*it(46)+20*s(21)+10*s(22)+10*s(24)+3
  Such that:s(24) =< -2*A+B-D+F+4
aux(16) =< B/3
aux(15) =< B/3+1/3
aux(17) =< -2*A+B+2
aux(18) =< A
aux(19) =< B
s(24) =< aux(17)
it(46) =< aux(17)
s(22) =< aux(17)
it(45) =< aux(18)
it(46) =< aux(18)
it(46) =< aux(19)
s(21) =< aux(19)
s(22) =< aux(19)
it(45) =< aux(15)
it(46) =< aux(15)
it(45) =< aux(16)
it(46) =< aux(16)

  with precondition: [A=G,A>=2,C>=0,E>=0,F>=1,I>=0,D>=F+2,B>=H,H+4>=3*A+F] 

* Chain [49]: 3
  with precondition: [A=1,B=0,G=1,H=0,C>=0,D>=0,E>=0,F>=0,I>=0] 


#### Simplifying cost structure of CE 50 
 * Renamed intermediate variables: 
[ (eq(52,1),s(12))>>s(25), (eq(52,1),aux(6))>>s(26), (eq(52,1),aux(5))>>s(27), (eq(52,1),aux(7))>>s(28), (eq(52,1),aux(8))>>s(29), (eq(52,1),it(47))>>s(30), (eq(52,1),it(48))>>s(31), (eq(52,1),s(11))>>s(32)]

#### Simplifying cost structure of CE 52 
 * Renamed intermediate variables: 
[ (eq(53,1),s(12))>>s(33), (eq(53,1),aux(6))>>s(34), (eq(53,1),aux(5))>>s(35), (eq(53,1),aux(7))>>s(36), (eq(53,1),aux(8))>>s(37), (eq(53,1),it(47))>>s(38), (eq(53,1),it(48))>>s(39), (eq(53,1),s(11))>>s(40)]
 * Renamed intermediate variables: 
[ (eq(53,2),it(34))>>s(41)]

#### Simplifying cost structure of CE 53 
 * Joined equivalent variables [aux(21),s(36)] into aux(21)
 * Renamed intermediate variables: 
[ (eq(54,1),s(24))>>s(42), (eq(54,1),aux(16))>>s(43), (eq(54,1),aux(15))>>s(44), (eq(54,1),aux(17))>>s(45), (eq(54,1),aux(18))>>s(46), (eq(54,1),aux(19))>>s(47), (eq(54,1),it(46))>>s(48), (eq(54,1),s(22))>>s(49), (eq(54,1),it(45))>>s(50), (eq(54,1),s(21))>>s(51)]

#### Simplifying cost structure of CE 54 
 * Renamed intermediate variables: 
[ (eq(51,2),it(34))>>s(52)]

#### Simplifying cost structure of CE 51 
 * Renamed intermediate variables: 
[ (eq(55,1),s(24))>>s(53), (eq(55,1),aux(16))>>s(54), (eq(55,1),aux(15))>>s(55), (eq(55,1),aux(17))>>s(56), (eq(55,1),aux(18))>>s(57), (eq(55,1),aux(19))>>s(58), (eq(55,1),it(46))>>s(59), (eq(55,1),s(22))>>s(60), (eq(55,1),it(45))>>s(61), (eq(55,1),s(21))>>s(62)]
 * Renamed intermediate variables: 
[ (eq(55,2),it(34))>>s(63)]

#### Simplifying cost structure of CE 55 
 * Joined equivalent variables [s(54),s(58)] into s(54)

#### Cost of chains of case_18(A,B,C,D,E,F,G,H,I,J,K,L,M):
* Chain [55]: 8
  with precondition: [A=1,B=2,C=0,K=1,L=0,D>=0,E>=1,F>=0,G>=0,H>=0,I>=0,J>=0,M>=0] 

* Chain [54]: 10*s(25)+27*s(30)+24*s(31)+10*s(32)+8
  Such that:s(25) =< -2*B+2*C+4
s(25) =< -2*B+2*C-E+6
s(28) =< B
s(29) =< C
s(25) =< 2*C-E
s(26) =< C/2
s(27) =< C/2+1/2
s(30) =< s(28)
s(31) =< s(28)
s(31) =< s(29)
s(32) =< s(29)
s(30) =< s(27)
s(31) =< s(27)
s(30) =< s(26)
s(31) =< s(26)

  with precondition: [A=1,J=0,K+1=B,D>=0,E>=2,F>=0,G>=0,H>=0,I>=0,K>=2,M>=0,L+2>=2*K,C>=L] 

* Chain [53]: 10*s(33)+27*s(38)+24*s(39)+10*s(40)+5*s(41)+8
  Such that:s(33) =< -4*B+4*C-E+8
s(33) =< -2*B+2*C-E+6
s(34) =< -B+C+2
s(35) =< -B+C+5/2
s(35) =< C+1
s(33) =< 2*C-E
aux(20) =< -2*B+2*C+4
aux(21) =< B
aux(22) =< C
s(33) =< aux(20)
s(37) =< aux(20)
s(41) =< aux(21)
s(34) =< aux(22)
s(37) =< aux(22)
s(41) =< aux(22)
s(38) =< aux(21)
s(39) =< aux(21)
s(39) =< s(37)
s(40) =< s(37)
s(38) =< s(35)
s(39) =< s(35)
s(38) =< s(34)
s(39) =< s(34)

  with precondition: [A=1,J=0,K+1=B,D>=0,E>=2,F>=0,G>=0,H>=0,I>=0,K>=3,M>=0,L>=K,C>=L] 

* Chain [52]: 10*s(42)+24*s(48)+10*s(49)+27*s(50)+20*s(51)+8
  Such that:s(45) =< -2*B+C+4
s(42) =< -2*B+C-E+J+6
s(46) =< B
s(47) =< C
s(42) =< C-E+J
s(43) =< C/3
s(44) =< C/3+1/3
s(42) =< s(45)
s(48) =< s(45)
s(49) =< s(45)
s(50) =< s(46)
s(48) =< s(46)
s(48) =< s(47)
s(51) =< s(47)
s(49) =< s(47)
s(50) =< s(44)
s(48) =< s(44)
s(50) =< s(43)
s(48) =< s(43)

  with precondition: [A=1,K+1=B,D>=0,F>=0,G>=0,H>=0,I>=0,J>=1,K>=2,M>=0,E>=J+2,C>=L,L+4>=3*K+J] 

* Chain [51]: 5*s(52)+8
  Such that:s(52) =< B

  with precondition: [A=1,K+1=B,L=C,D>=0,E>=1,F>=0,G>=0,H>=0,I>=0,J>=0,K>=2,M>=0,L+1>=K] 

* Chain [50]: 10*s(53)+24*s(59)+10*s(60)+27*s(61)+20*s(62)+5*s(63)+8
  Such that:s(55) =< -2*B+2*C+5
s(53) =< -B+C-E+J+3
s(55) =< C+1
s(53) =< C-E+J
aux(23) =< -2*B+2*C+4
aux(24) =< -B+C+3
aux(25) =< B
aux(26) =< C
s(54) =< aux(23)
s(56) =< aux(23)
s(56) =< aux(24)
s(57) =< aux(24)
s(57) =< aux(25)
s(63) =< aux(25)
s(54) =< aux(26)
s(63) =< aux(26)
s(53) =< s(56)
s(59) =< s(56)
s(60) =< s(56)
s(61) =< s(57)
s(59) =< s(57)
s(59) =< s(54)
s(62) =< s(54)
s(60) =< s(54)
s(61) =< s(55)
s(59) =< s(55)
s(61) =< s(54)

  with precondition: [A=1,K+1=B,D>=0,F>=0,G>=0,H>=0,I>=0,J>=1,K>=3,M>=0,E>=J+2,C>=L,L>=J+K] 


#### Simplifying cost structure of CE 56 

#### Computing cost of phase [56] 

#### Simplifying cost structure of CE 57 

#### Cost of loops [56] 

 * loop 56:get_elem(A,B,C,D,E,F,G,H,I,J) -> [get_elem(A',B',C',D',E',F',G',H',I',J')] 
8
##### Pending set get_elem(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 56: [it(56)=<1]

###### Computing sum for it(56)=<1  in Loop 56 
   - Applying inductive sum strategy 
     - head Candidate: G 
     - head Candidate: E 
     - head Candidate: F 
     - head Candidate: B 
     - head Candidate: A-1 
     - head Candidate: D-1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: E 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: F 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: G 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: G 
     - tail Candidate: E 
     - tail Candidate: F 
     - tail Candidate: B 
     - tail Candidate: A-1 
     - tail Candidate: D-1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: F 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: G 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(56)=<G,it(56)=<E,it(56)=<F,it(56)=<B,it(56)=<A-1,it(56)=<D-1,it(56)=<A-1,it(56)=<B,it(56)=<D-1,it(56)=<E,it(56)=<F,it(56)=<G,it(56)=<G-G',it(56)=<E-E',it(56)=<F-F',it(56)=<B-B',it(56)=<A-A',it(56)=<D-D',it(56)=<A-A',it(56)=<B-B',it(56)=<D-D',it(56)=<E-E',it(56)=<F-F',it(56)=<G-G'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [56] 

#### Simplifying cost structure of phase [56] 

#### Cost of phase [56]:get_elem(A,B,C,D,E,F,G,H,I,J) -> [get_elem(A',B',C',D',E',F',G',H',I',J')] 
8*it(56)+0
  Such that:it(56) =< A
it(56) =< A-A'
it(56) =< B
it(56) =< B-B'
it(56) =< D
it(56) =< D-D'
it(56) =< E
it(56) =< E-E'
it(56) =< F
it(56) =< F-F'
it(56) =< G
it(56) =< G-G'

#### Simplifying cost structure of chain [[56],57] 

#### Cost of chains of get_elem(A,B,C,D,E,F,G,H,I,J):
* Chain [[56],57]: 8*it(56)+5
  Such that:it(56) =< F

  with precondition: [F=G,F>=1,H>=1,I>=0,J>=1,A>=F+2,D>=F+2,C>=I,B>=F+H,E>=F+J] 

* Chain [57]: 5
  with precondition: [F=0,G=0,A>=2,D>=2,H>=1,I>=0,J>=1,B>=H,C>=I,E>=J] 


#### Simplifying cost structure of CE 58 

#### Computing cost of phase [58] 

#### Simplifying cost structure of CE 59 

#### Cost of loops [58] 

 * loop 58:reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) -> [reverse_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O')] 
5
##### Pending set reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)
* Psum in Loop 58: [it(58)=<1]

###### Computing sum for it(58)=<1  in Loop 58 
   - Applying inductive sum strategy 
     - head Candidate: E+1 
     - head Candidate: A-1 
     - head Candidate: B+1 
     - head Candidate: D-1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: E+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E+1 
     - tail Candidate: A-1 
     - tail Candidate: B+1 
     - tail Candidate: D-1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(58)=<E+1,it(58)=<A-1,it(58)=<B+1,it(58)=<D-1,it(58)=<A-1,it(58)=<B+1,it(58)=<D-1,it(58)=<E+1,it(58)=<E-E',it(58)=<A-A',it(58)=<B-B',it(58)=<D-D',it(58)=<A-A',it(58)=<B-B',it(58)=<D-D',it(58)=<E-E'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [58] 

#### Simplifying cost structure of phase [58] 

#### Cost of phase [58]:reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) -> [reverse_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O')] 
5*it(58)+0
  Such that:it(58) =< A
it(58) =< A-A'
it(58) =< B+1
it(58) =< B-B'
it(58) =< D
it(58) =< D-D'
it(58) =< E+1
it(58) =< E-E'

#### Simplifying cost structure of chain [[58],59] 

#### Cost of chains of reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O):
* Chain [[58],59]: 5*it(58)+2
  Such that:it(58) =< -I+N

  with precondition: [A=D,A+F=K+1,B+G=L,A+I=N+1,E+J=O,A>=2,C>=0,F>=1,G>=0,H>=0,I>=1,J>=0,M>=0,B+1>=A,E+1>=A,C+H>=M] 

* Chain [59]: 2
  with precondition: [A=1,B=0,D=1,E=0,F=K,G=L,H=M,I=N,J=O,C>=0,F>=0,G>=0,H>=0,I>=0,J>=0] 


#### Simplifying cost structure of CE 60 
 * Renamed intermediate variables: 
[ (eq(61,1),it(58))>>s(64)]

#### Simplifying cost structure of CE 61 

#### Cost of chains of reverseL(A,B,C,D,E,F,G,H,I,J):
* Chain [61]: 4
  with precondition: [A=1,B=0,D=1,E=0,F=1,G=0,I=1,J=0,C>=0,H>=0] 

* Chain [60]: 5*s(64)+4
  Such that:s(64) =< D

  with precondition: [A=D,A=F,B=G,A=I,E=J,A>=2,C>=0,H>=0,B+1>=A,E+1>=A] 

 * Renamed intermediate variables: 
[ (eq(64,1),s(64))>>s(65)]

#### Simplifying cost structure of CE 64 

#### Computing cost of phase [64] 

#### Simplifying cost structure of CE 62 

#### Cost of loops [64] 

 * loop 64:split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) -> [split_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T',U')] 
8
##### Pending set split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)
* Psum in Loop 64: [it(64)=<1]

###### Computing sum for it(64)=<1  in Loop 64 
   - Applying inductive sum strategy 
     - head Candidate: G-I 
     - head Candidate: F-H 
     - head Candidate: D-1 
     - head Candidate: A-1 
     - head Candidate: E+1 
     - head Candidate: B+1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: E+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: F-H 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: G-I 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: G-I 
     - tail Candidate: F-H 
     - tail Candidate: D-1 
     - tail Candidate: A-1 
     - tail Candidate: E+1 
     - tail Candidate: B+1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: F-H 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: G-I 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(64)=<G-I,it(64)=<F-H,it(64)=<D-1,it(64)=<A-1,it(64)=<E+1,it(64)=<B+1,it(64)=<A-1,it(64)=<B+1,it(64)=<D-1,it(64)=<E+1,it(64)=<F-H,it(64)=<G-I,it(64)=<G-I-G'+I',it(64)=<F-H-F'+H',it(64)=<D-D',it(64)=<A-A',it(64)=<E-E',it(64)=<B-B',it(64)=<A-A',it(64)=<B-B',it(64)=<D-D',it(64)=<E-E',it(64)=<F-H-F'+H',it(64)=<G-I-G'+I'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [64] 

#### Simplifying cost structure of phase [64] 

#### Cost of phase [64]:split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) -> [split_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T',U')] 
8*it(64)+0
  Such that:it(64) =< A
it(64) =< A-A'
it(64) =< B+1
it(64) =< B-B'
it(64) =< D
it(64) =< D-D'
it(64) =< E+1
it(64) =< E-E'
it(64) =< F-H
it(64) =< F-H-F'+H'
it(64) =< G-I
it(64) =< G-I-G'+I'

#### Simplifying cost structure of chain [[64],62] 

#### Simplifying cost structure of CE 63 

#### Cost of chains of split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U):
* Chain [[64],62]: 8*it(64)+5*s(65)+8
  Such that:it(64) =< F-H
s(65) =< F-H+J

  with precondition: [O=1,S=1,J=M,A+J=P,B+K=Q,D+J=T,E+N=U,F+I=G+H,C>=0,H>=0,J>=1,K>=0,L>=0,N>=0,R>=0,F>=H+1,A+H>=F+1,B+H>=F,D+H>=F+1,E+H>=F,G+H>=F,B+H+K+1>=F+J,E+H+N+1>=F+J] 

* Chain [63]: 8
  with precondition: [J=1,K=0,M=1,N=0,O=1,S=1,F=H,G=I,A+1=P,B=Q,D+1=T,E=U,A>=1,B>=0,C>=0,D>=1,E>=0,F>=0,G>=0,L>=0,R>=C] 

* Chain [62]: 5*s(65)+8
  Such that:s(65) =< M

  with precondition: [O=1,S=1,F=H,G=I,J=M,A+J=P,B+K=Q,D+J=T,E+N=U,A>=1,B>=0,C>=0,D>=1,E>=0,F>=0,G>=0,J>=2,L>=0,R>=C,K+1>=J,N+1>=J] 


#### Simplifying cost structure of CE 65 
 * Renamed intermediate variables: 
[ (eq(66,1),it(64))>>s(66), (eq(66,1),s(65))>>s(67)]

#### Simplifying cost structure of CE 66 

#### Cost of chains of split(A,B,C,D,E,F,G,H,I,J,K,L,M,N):
* Chain [66]: 11
  with precondition: [F=0,G=0,H=1,L=1,A+1=I,B=J,D+1=M,E=N,A>=1,B>=0,C>=0,D>=1,E>=0,K>=C] 

* Chain [65]: 8*s(66)+5*s(67)+11
  Such that:s(66) =< G
s(67) =< G+1

  with precondition: [H=1,L=1,F=G,A+1=I,B=J,D+1=M,E=N,C>=0,F>=1,K>=0,A>=F+1,B>=F,D>=F+1,E>=F] 

 * Renamed intermediate variables: 
[ (eq(69,2),s(66))>>s(68), (eq(69,2),s(67))>>s(69)]
 * Renamed intermediate variables: 
[ (eq(69,3),s(52))>>s(70)]

#### Simplifying cost structure of CE 69 
 * Renamed intermediate variables: 
[ (eq(67,2),s(66))>>s(71), (eq(67,2),s(67))>>s(72)]
 * Renamed intermediate variables: 
[ (eq(67,3),s(25))>>s(73), (eq(67,3),s(28))>>s(74), (eq(67,3),s(29))>>s(75), (eq(67,3),s(26))>>s(76), (eq(67,3),s(27))>>s(77), (eq(67,3),s(30))>>s(78), (eq(67,3),s(31))>>s(79), (eq(67,3),s(32))>>s(80)]

#### Simplifying cost structure of CE 67 
 * Renamed intermediate variables: 
[ (eq(68,2),s(66))>>s(81), (eq(68,2),s(67))>>s(82)]
 * Renamed intermediate variables: 
[ (eq(68,3),s(33))>>s(83), (eq(68,3),s(34))>>s(84), (eq(68,3),s(35))>>s(85), (eq(68,3),aux(20))>>s(86), (eq(68,3),aux(21))>>s(87), (eq(68,3),aux(22))>>s(88), (eq(68,3),s(37))>>s(89), (eq(68,3),s(41))>>s(90), (eq(68,3),s(38))>>s(91), (eq(68,3),s(39))>>s(92), (eq(68,3),s(40))>>s(93)]

#### Simplifying cost structure of CE 68 
 * Joined equivalent variables [aux(27),s(86)] into aux(27)
 * Renamed intermediate variables: 
[ (eq(70,1),it(56))>>s(94)]
 * Renamed intermediate variables: 
[ (eq(70,2),s(66))>>s(95), (eq(70,2),s(67))>>s(96)]
 * Renamed intermediate variables: 
[ (eq(70,3),s(52))>>s(97)]

#### Simplifying cost structure of CE 70 
 * Renamed intermediate variables: 
[ (eq(71,1),it(56))>>s(98)]
 * Renamed intermediate variables: 
[ (eq(71,2),s(66))>>s(99), (eq(71,2),s(67))>>s(100)]
 * Renamed intermediate variables: 
[ (eq(71,3),s(45))>>s(101), (eq(71,3),s(42))>>s(102), (eq(71,3),s(46))>>s(103), (eq(71,3),s(47))>>s(104), (eq(71,3),s(43))>>s(105), (eq(71,3),s(44))>>s(106), (eq(71,3),s(48))>>s(107), (eq(71,3),s(49))>>s(108), (eq(71,3),s(50))>>s(109), (eq(71,3),s(51))>>s(110)]

#### Simplifying cost structure of CE 71 
 * Joined equivalent variables [aux(28),s(101)] into aux(28)
 * Joined equivalent variables [aux(29),s(104)] into aux(29)
 * Renamed intermediate variables: 
[ (eq(72,1),it(56))>>s(111)]
 * Renamed intermediate variables: 
[ (eq(72,2),s(66))>>s(112), (eq(72,2),s(67))>>s(113)]
 * Renamed intermediate variables: 
[ (eq(72,3),s(55))>>s(114), (eq(72,3),s(53))>>s(115), (eq(72,3),aux(23))>>s(116), (eq(72,3),aux(24))>>s(117), (eq(72,3),aux(25))>>s(118), (eq(72,3),aux(26))>>s(119), (eq(72,3),s(54))>>s(120), (eq(72,3),s(56))>>s(121), (eq(72,3),s(57))>>s(122), (eq(72,3),s(63))>>s(123), (eq(72,3),s(59))>>s(124), (eq(72,3),s(60))>>s(125), (eq(72,3),s(61))>>s(126), (eq(72,3),s(62))>>s(127)]

#### Simplifying cost structure of CE 72 
 * Joined equivalent variables [aux(30),s(119)] into aux(30)
 * Joined equivalent variables [aux(31),s(103),s(118)] into aux(31)
 * Joined equivalent variables [aux(32),aux(29),aux(30)] into aux(32)
 * Joined equivalent variables [s(98),s(111)] into s(98)
 * Joined equivalent variables [s(99),s(112)] into s(99)
 * Joined equivalent variables [s(100),s(113)] into s(100)

#### Cost of chains of subtract(A,B,C,D,E,F,G):
* Chain [71]: 8*s(68)+5*s(69)+5*s(70)+33
  Such that:s(68) =< 1
s(69) =< 2
s(70) =< A+1

  with precondition: [D=0,A=E,B=F,A>=2,C>=0,G>=0,B+1>=A] 

* Chain [70]: 8*s(71)+5*s(72)+10*s(73)+27*s(78)+24*s(79)+10*s(80)+33
  Such that:s(71) =< 1
s(72) =< 2
s(73) =< -2*A+2*B+2
s(74) =< A+1
s(75) =< B
s(76) =< B/2
s(77) =< B/2+1/2
s(78) =< s(74)
s(79) =< s(74)
s(79) =< s(75)
s(80) =< s(75)
s(78) =< s(77)
s(79) =< s(77)
s(78) =< s(76)
s(79) =< s(76)

  with precondition: [D=0,A=E,A>=2,C>=0,G>=0,F+2>=2*A,B>=F] 

* Chain [69]: 8*s(81)+5*s(82)+10*s(83)+5*s(90)+27*s(91)+24*s(92)+10*s(93)+33
  Such that:s(81) =< 1
s(82) =< 2
s(83) =< -4*A+4*B+2
s(84) =< -A+B+1
s(85) =< -A+B+3/2
s(87) =< A+1
s(88) =< B
s(83) =< 2*B
s(83) =< 4*B
aux(27) =< -2*A+2*B+2
s(83) =< aux(27)
s(89) =< aux(27)
s(90) =< s(87)
s(84) =< s(88)
s(89) =< s(88)
s(90) =< s(88)
s(91) =< s(87)
s(92) =< s(87)
s(92) =< s(89)
s(93) =< s(89)
s(91) =< s(85)
s(92) =< s(85)
s(91) =< s(84)
s(92) =< s(84)

  with precondition: [D=0,A=E,A>=3,C>=0,G>=0,F>=A,B>=F] 

* Chain [68]: 8*s(94)+8*s(95)+5*s(96)+5*s(97)+33
  Such that:s(97) =< A+1
s(94) =< D
s(95) =< D+1
s(96) =< D+2

  with precondition: [A=E,B=F,C>=0,D>=1,G>=0,B+1>=A,A>=D+2] 

* Chain [67]: 16*s(98)+16*s(99)+10*s(100)+10*s(102)+24*s(107)+10*s(108)+27*s(109)+20*s(110)+10*s(115)+5*s(123)+24*s(124)+10*s(125)+27*s(126)+20*s(127)+33
  Such that:aux(28) =< -2*A+B+2
s(116) =< -2*A+2*B+2
s(114) =< -2*A+2*B+3
s(115) =< -A+B
s(117) =< -A+B+2
s(114) =< B+1
s(102) =< B-2*D
s(115) =< B-D
s(105) =< B/3
s(106) =< B/3+1/3
aux(31) =< A+1
aux(32) =< B
aux(33) =< D
aux(34) =< D+1
aux(35) =< D+2
s(98) =< aux(33)
s(99) =< aux(34)
s(100) =< aux(35)
s(115) =< aux(32)
s(120) =< s(116)
s(121) =< s(116)
s(121) =< s(117)
s(122) =< s(117)
s(122) =< aux(31)
s(123) =< aux(31)
s(120) =< aux(32)
s(123) =< aux(32)
s(115) =< s(121)
s(124) =< s(121)
s(125) =< s(121)
s(126) =< s(122)
s(124) =< s(122)
s(124) =< s(120)
s(127) =< s(120)
s(125) =< s(120)
s(126) =< s(114)
s(124) =< s(114)
s(126) =< s(120)
s(102) =< aux(28)
s(102) =< aux(32)
s(107) =< aux(28)
s(108) =< aux(28)
s(109) =< aux(31)
s(107) =< aux(31)
s(107) =< aux(32)
s(110) =< aux(32)
s(108) =< aux(32)
s(109) =< s(106)
s(107) =< s(106)
s(109) =< s(105)
s(107) =< s(105)

  with precondition: [A=E,C>=0,D>=1,G>=0,A>=D+2,B>=F,F>=A+D] 


#### Simplifying cost structure of CE 73 

#### Computing cost of phase [72,73] 
 * Renamed intermediate variables: 
[ (eq(78,1),aux(28))>>s(128), (eq(78,1),s(116))>>s(129), (eq(78,1),s(114))>>s(130), (eq(78,1),s(115))>>s(131), (eq(78,1),s(117))>>s(132), (eq(78,1),s(102))>>s(133), (eq(78,1),s(105))>>s(134), (eq(78,1),s(106))>>s(135), (eq(78,1),aux(31))>>s(136), (eq(78,1),aux(32))>>s(137), (eq(78,1),aux(33))>>s(138), (eq(78,1),aux(34))>>s(139), (eq(78,1),aux(35))>>s(140), (eq(78,1),s(98))>>s(141), (eq(78,1),s(99))>>s(142), (eq(78,1),s(100))>>s(143), (eq(78,1),s(120))>>s(144), (eq(78,1),s(121))>>s(145), (eq(78,1),s(122))>>s(146), (eq(78,1),s(123))>>s(147), (eq(78,1),s(124))>>s(148), (eq(78,1),s(125))>>s(149), (eq(78,1),s(126))>>s(150), (eq(78,1),s(127))>>s(151), (eq(78,1),s(107))>>s(152), (eq(78,1),s(108))>>s(153), (eq(78,1),s(109))>>s(154), (eq(78,1),s(110))>>s(155)]

#### Simplifying cost structure of CE 78 
 * Renamed intermediate variables: 
[ (it(72),s(129))>>s(156), (it(72),s(130))>>s(157), (it(72),s(131))>>s(158), (it(72),s(132))>>s(159), (it(72),s(136))>>s(160), (it(72),s(137))>>s(161), (it(72),s(133))>>s(162), (it(72),s(128))>>s(163), (it(72),s(134))>>s(164), (it(72),s(135))>>s(165), (it(72),s(138))>>s(166), (it(72),s(139))>>s(167), (it(72),s(140))>>s(168), (it(72),s(141))>>s(169), (it(72),s(142))>>s(170), (it(72),s(143))>>s(171), (it(72),s(144))>>s(172), (it(72),s(145))>>s(173), (it(72),s(146))>>s(174), (it(72),s(147))>>s(175), (it(72),s(148))>>s(176), (it(72),s(149))>>s(177), (it(72),s(150))>>s(178), (it(72),s(151))>>s(179), (it(72),s(152))>>s(180), (it(72),s(153))>>s(181), (it(72),s(154))>>s(182), (it(72),s(155))>>s(183)]
 * Renamed intermediate variables: 
[ (eq(77,1),s(97))>>s(184), (eq(77,1),s(94))>>s(185), (eq(77,1),s(95))>>s(186), (eq(77,1),s(96))>>s(187)]

#### Simplifying cost structure of CE 77 
 * Renamed intermediate variables: 
[ (it(73),s(185))>>s(188), (it(73),s(186))>>s(189), (it(73),s(187))>>s(190), (it(73),s(184))>>s(191)]

#### Cost of loops [72,73] 

 * loop 72:echelon_helper(A,B,C,D,E,F,G,H,I,J) -> [echelon_helper(A',B',C',D',E',F',G',H',I',J')] 
10*s(158)+10*s(162)+16*s(169)+16*s(170)+10*s(171)+5*s(175)+24*s(176)+10*s(177)+27*s(178)+20*s(179)+24*s(180)+10*s(181)+27*s(182)+20*s(183)+40
  Such that:s(156) =< -2*A+2*B+2
s(157) =< -2*A+2*B+3
s(158) =< -A+B
s(159) =< -A+B+2
s(160) =< A+1
s(161) =< B
s(157) =< B+1
s(162) =< B-2*D
s(163) =< B-2*A'+2
s(164) =< B/3
s(165) =< B/3+1/3
s(166) =< D
s(167) =< D+1
s(168) =< D+2
s(169) =< s(166)
s(170) =< s(167)
s(171) =< s(168)
s(158) =< s(161)
s(172) =< s(156)
s(173) =< s(156)
s(173) =< s(159)
s(174) =< s(159)
s(174) =< s(160)
s(175) =< s(160)
s(172) =< s(161)
s(175) =< s(161)
s(158) =< s(173)
s(176) =< s(173)
s(177) =< s(173)
s(178) =< s(174)
s(176) =< s(174)
s(176) =< s(172)
s(179) =< s(172)
s(177) =< s(172)
s(178) =< s(157)
s(176) =< s(157)
s(178) =< s(172)
s(162) =< s(163)
s(162) =< s(161)
s(180) =< s(163)
s(181) =< s(163)
s(182) =< s(160)
s(180) =< s(160)
s(180) =< s(161)
s(183) =< s(161)
s(181) =< s(161)
s(182) =< s(165)
s(180) =< s(165)
s(182) =< s(164)
s(180) =< s(164)

 * loop 73:echelon_helper(A,B,C,D,E,F,G,H,I,J) -> [echelon_helper(A',B',C',D',E',F',G',H',I',J')] 
5*s(191)+8*s(188)+8*s(189)+5*s(190)+40
  Such that:s(188) =< D
s(189) =< D+1
s(190) =< D+2
s(191) =< A'+1

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 72: [it(72)=<1,s(216)=< -2*A+2*B+2,s(212)=< -2*A+2*B+3,s(192)=< -A+B,s(215)=< -A+B+2,s(209)=<A+1,s(208)=<B,s(212)=<B+1,s(193)=<B-2*D,s(210)=<B-2*A'+2,s(206)=<B/3,s(207)=<B/3+1/3,s(219)=<D,s(218)=<D+1,s(217)=<D+2]
* Psum in Loop 73: [it(73)=<1,s(221)=<D,s(222)=<D+1,s(223)=<D+2,s(220)=<A'+1]

###### Computing sum for it(72)=<1  in Loop 72 
   - Applying inductive sum strategy 
     - head Candidate: A-D-1 
       - Loop 73 is collaborative and bounds [it(73)] 
     - head Candidate: B-D 
       - Loop 73 is collaborative and bounds [it(73)] 
     - head Candidate: E-1 
       - Loop 73 is collaborative and bounds [it(73)] 
     - head Candidate: F+1 
       - Loop 73 is collaborative and bounds [it(73)] 
     - head Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: F+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B/2-D-1/2 
       - Loop 73 is collaborative
     - head Candidate: -A+B-D+1 
       - Loop 73 is collaborative
     - tail Candidate: A-D-1 
       - Loop 73 is collaborative and bounds [it(73)] 
     - tail Candidate: B-D 
       - Loop 73 is collaborative and bounds [it(73)] 
     - tail Candidate: E-1 
       - Loop 73 is collaborative and bounds [it(73)] 
     - tail Candidate: F+1 
       - Loop 73 is collaborative and bounds [it(73)] 
     - tail Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: F+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B/2-D-1/2 
       - Loop 73 is collaborative and bounds [it(73)] 
     - tail Candidate: -A+B-D+1 
       - Loop 73 is collaborative and bounds [it(73)] 
 * Adding constraints: [it(72)+it(73)=<A-D-1,it(72)+it(73)=<B-D,it(72)+it(73)=<E-1,it(72)+it(73)=<F+1,it(72)+it(73)=<E-1,it(72)+it(73)=<F+1,it(72)+it(73)=<A-D-1,it(72)=<B/2-D-1/2,it(72)=< -A+B-D+1,it(72)+it(73)=<A-D-A'+D',it(72)+it(73)=<B-D-B'+D',it(72)+it(73)=<E-E',it(72)+it(73)=<F-F',it(72)+it(73)=<E-E',it(72)+it(73)=<F-F',it(72)+it(73)=<A-D-A'+D',it(72)+it(73)=<B/2-D-B'/2+D',it(72)+it(73)=< -A+B-D+A'-B'+D'] 

##### Pending set A
* Psum in Loop 72: [s(216)=< -2*A+2*B+2,s(212)=< -2*A+2*B+3,s(192)=< -A+B,s(215)=< -A+B+2,s(209)=<A+1,s(208)=<B,s(212)=<B+1,s(193)=<B-2*D,s(210)=<B-2*A'+2,s(206)=<B/3,s(207)=<B/3+1/3,s(219)=<D,s(218)=<D+1,s(217)=<D+2]
* Psum in Loop 73: [it(73)=<1,s(221)=<D,s(222)=<D+1,s(223)=<D+2,s(220)=<A'+1]

###### Computing sum for s(216)=< -2*A+2*B+2  in Loop 72 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(36)=< -2*A+2*B+2] 
 * Adding constraints: [s(216)=<it(72)*aux(36)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(36)=< -2*A+2*B+2]
* Psum in Loop 72: [s(212)=< -2*A+2*B+3,s(192)=< -A+B,s(215)=< -A+B+2,s(209)=<A+1,s(208)=<B,s(212)=<B+1,s(193)=<B-2*D,s(210)=<B-2*A'+2,s(206)=<B/3,s(207)=<B/3+1/3,s(219)=<D,s(218)=<D+1,s(217)=<D+2]
* Psum in Loop 73: [it(73)=<1,s(221)=<D,s(222)=<D+1,s(223)=<D+2,s(220)=<A'+1]

###### Computing max_min for aux(36)=< -2*A+2*B+2  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(36)=< -2*A+2*B+2,aux(36)=<2*B-2*D-2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 72: [s(212)=< -2*A+2*B+3,s(192)=< -A+B,s(215)=< -A+B+2,s(209)=<A+1,s(208)=<B,s(212)=<B+1,s(193)=<B-2*D,s(210)=<B-2*A'+2,s(206)=<B/3,s(207)=<B/3+1/3,s(219)=<D,s(218)=<D+1,s(217)=<D+2]
* Psum in Loop 73: [it(73)=<1,s(221)=<D,s(222)=<D+1,s(223)=<D+2,s(220)=<A'+1]

###### Computing sum for s(212)=< -2*A+2*B+3  in Loop 72 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(37)=< -2*A+2*B+3] 
 * Adding constraints: [s(212)=<it(72)*aux(37)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(37)=< -2*A+2*B+3]
* Psum in Loop 72: [s(192)=< -A+B,s(215)=< -A+B+2,s(209)=<A+1,s(208)=<B,s(212)=<B+1,s(193)=<B-2*D,s(210)=<B-2*A'+2,s(206)=<B/3,s(207)=<B/3+1/3,s(219)=<D,s(218)=<D+1,s(217)=<D+2]
* Psum in Loop 73: [it(73)=<1,s(221)=<D,s(222)=<D+1,s(223)=<D+2,s(220)=<A'+1]

###### Computing max_min for aux(37)=< -2*A+2*B+3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(37)=<aux(36)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 72: [s(192)=< -A+B,s(215)=< -A+B+2,s(209)=<A+1,s(208)=<B,s(212)=<B+1,s(193)=<B-2*D,s(210)=<B-2*A'+2,s(206)=<B/3,s(207)=<B/3+1/3,s(219)=<D,s(218)=<D+1,s(217)=<D+2]
* Psum in Loop 73: [it(73)=<1,s(221)=<D,s(222)=<D+1,s(223)=<D+2,s(220)=<A'+1]

###### Computing sum for s(192)=< -A+B  in Loop 72 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(38)=< -A+B] 
 * Adding constraints: [s(192)=<it(72)*aux(38)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(38)=< -A+B]
* Psum in Loop 72: [s(215)=< -A+B+2,s(209)=<A+1,s(208)=<B,s(212)=<B+1,s(193)=<B-2*D,s(210)=<B-2*A'+2,s(206)=<B/3,s(207)=<B/3+1/3,s(219)=<D,s(218)=<D+1,s(217)=<D+2]
* Psum in Loop 73: [it(73)=<1,s(221)=<D,s(222)=<D+1,s(223)=<D+2,s(220)=<A'+1]

###### Computing max_min for aux(38)=< -A+B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(38)=<aux(36)* (1/2)-1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 72: [s(215)=< -A+B+2,s(209)=<A+1,s(208)=<B,s(212)=<B+1,s(193)=<B-2*D,s(210)=<B-2*A'+2,s(206)=<B/3,s(207)=<B/3+1/3,s(219)=<D,s(218)=<D+1,s(217)=<D+2]
* Psum in Loop 73: [it(73)=<1,s(221)=<D,s(222)=<D+1,s(223)=<D+2,s(220)=<A'+1]

###### Computing sum for s(215)=< -A+B+2  in Loop 72 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(39)=< -A+B+2] 
 * Adding constraints: [s(215)=<it(72)*aux(39)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(39)=< -A+B+2]
* Psum in Loop 72: [s(209)=<A+1,s(208)=<B,s(212)=<B+1,s(193)=<B-2*D,s(210)=<B-2*A'+2,s(206)=<B/3,s(207)=<B/3+1/3,s(219)=<D,s(218)=<D+1,s(217)=<D+2]
* Psum in Loop 73: [it(73)=<1,s(221)=<D,s(222)=<D+1,s(223)=<D+2,s(220)=<A'+1]

###### Computing max_min for aux(39)=< -A+B+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(39)=<aux(36)* (1/2)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 72: [s(209)=<A+1,s(208)=<B,s(212)=<B+1,s(193)=<B-2*D,s(210)=<B-2*A'+2,s(206)=<B/3,s(207)=<B/3+1/3,s(219)=<D,s(218)=<D+1,s(217)=<D+2]
* Psum in Loop 73: [it(73)=<1,s(221)=<D,s(222)=<D+1,s(223)=<D+2,s(220)=<A'+1]

###### Computing sum for s(209)=<A+1  in Loop 72 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(40)=<A+1] 
 * Adding constraints: [s(209)=<it(72)*aux(40)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(40)=<A+1]
* Psum in Loop 72: [s(208)=<B,s(212)=<B+1,s(193)=<B-2*D,s(210)=<B-2*A'+2,s(206)=<B/3,s(207)=<B/3+1/3,s(219)=<D,s(218)=<D+1,s(217)=<D+2]
* Psum in Loop 73: [it(73)=<1,s(221)=<D,s(222)=<D+1,s(223)=<D+2,s(220)=<A'+1]

###### Computing max_min for aux(40)=<A+1  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(40)=<A+1,aux(40)=<B+2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 72: [s(208)=<B,s(212)=<B+1,s(193)=<B-2*D,s(210)=<B-2*A'+2,s(206)=<B/3,s(207)=<B/3+1/3,s(219)=<D,s(218)=<D+1,s(217)=<D+2]
* Psum in Loop 73: [it(73)=<1,s(221)=<D,s(222)=<D+1,s(223)=<D+2,s(220)=<A'+1]

###### Computing sum for s(208)=<B  in Loop 72 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(41)=<B] 
 * Adding constraints: [s(208)=<it(72)*aux(41)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(41)=<B]
* Psum in Loop 72: [s(212)=<B+1,s(193)=<B-2*D,s(210)=<B-2*A'+2,s(206)=<B/3,s(207)=<B/3+1/3,s(219)=<D,s(218)=<D+1,s(217)=<D+2]
* Psum in Loop 73: [it(73)=<1,s(221)=<D,s(222)=<D+1,s(223)=<D+2,s(220)=<A'+1]

###### Computing max_min for aux(41)=<B  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(41)=<B] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 72: [s(212)=<B+1,s(193)=<B-2*D,s(210)=<B-2*A'+2,s(206)=<B/3,s(207)=<B/3+1/3,s(219)=<D,s(218)=<D+1,s(217)=<D+2]
* Psum in Loop 73: [it(73)=<1,s(221)=<D,s(222)=<D+1,s(223)=<D+2,s(220)=<A'+1]

###### Computing sum for s(212)=<B+1  in Loop 72 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(42)=<B+1] 
 * Adding constraints: [s(212)=<it(72)*aux(42)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(42)=<B+1]
* Psum in Loop 72: [s(193)=<B-2*D,s(210)=<B-2*A'+2,s(206)=<B/3,s(207)=<B/3+1/3,s(219)=<D,s(218)=<D+1,s(217)=<D+2]
* Psum in Loop 73: [it(73)=<1,s(221)=<D,s(222)=<D+1,s(223)=<D+2,s(220)=<A'+1]

###### Computing max_min for aux(42)=<B+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(42)=<aux(41)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 72: [s(193)=<B-2*D,s(210)=<B-2*A'+2,s(206)=<B/3,s(207)=<B/3+1/3,s(219)=<D,s(218)=<D+1,s(217)=<D+2]
* Psum in Loop 73: [it(73)=<1,s(221)=<D,s(222)=<D+1,s(223)=<D+2,s(220)=<A'+1]

###### Computing sum for s(193)=<B-2*D  in Loop 72 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(43)=<B-2*D] 
 * Adding constraints: [s(193)=<it(72)*aux(43)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(43)=<B-2*D]
* Psum in Loop 72: [s(210)=<B-2*A'+2,s(206)=<B/3,s(207)=<B/3+1/3,s(219)=<D,s(218)=<D+1,s(217)=<D+2]
* Psum in Loop 73: [it(73)=<1,s(221)=<D,s(222)=<D+1,s(223)=<D+2,s(220)=<A'+1]

###### Computing max_min for aux(43)=<B-2*D  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(43)=<B-2*D] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 72: [s(210)=<B-2*A'+2,s(206)=<B/3,s(207)=<B/3+1/3,s(219)=<D,s(218)=<D+1,s(217)=<D+2]
* Psum in Loop 73: [it(73)=<1,s(221)=<D,s(222)=<D+1,s(223)=<D+2,s(220)=<A'+1]

###### Computing sum for s(210)=<B-2*A'+2  in Loop 72 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(44)=<B-2*D-2,aux(44)=< -2*A+B+2] 
 * Adding constraints: [s(210)=<it(72)*aux(44)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(44)=< -2*A+B+2,aux(44)=<B-2*D-2]
* Psum in Loop 72: [s(206)=<B/3,s(207)=<B/3+1/3,s(219)=<D,s(218)=<D+1,s(217)=<D+2]
* Psum in Loop 73: [it(73)=<1,s(221)=<D,s(222)=<D+1,s(223)=<D+2,s(220)=<A'+1]

###### Computing max_min for aux(44)=< -2*A+B+2  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(44)=< -2*A+B+2,aux(44)=<B-2*D-2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(44)=<B-2*D-2]
* Psum in Loop 72: [s(206)=<B/3,s(207)=<B/3+1/3,s(219)=<D,s(218)=<D+1,s(217)=<D+2]
* Psum in Loop 73: [it(73)=<1,s(221)=<D,s(222)=<D+1,s(223)=<D+2,s(220)=<A'+1]

###### Computing max_min for aux(44)=<B-2*D-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(44)=<aux(43)-2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 72: [s(206)=<B/3,s(207)=<B/3+1/3,s(219)=<D,s(218)=<D+1,s(217)=<D+2]
* Psum in Loop 73: [it(73)=<1,s(221)=<D,s(222)=<D+1,s(223)=<D+2,s(220)=<A'+1]

###### Computing sum for s(206)=<B/3  in Loop 72 
   - Found a solution using cacheing 
 * Adding constraints: [s(206)=<aux(45)* (1/3),aux(45)=<it(72)*aux(41)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 72: [s(207)=<B/3+1/3,s(219)=<D,s(218)=<D+1,s(217)=<D+2]
* Psum in Loop 73: [it(73)=<1,s(221)=<D,s(222)=<D+1,s(223)=<D+2,s(220)=<A'+1]

###### Computing sum for s(207)=<B/3+1/3  in Loop 72 
   - Found a solution using cacheing 
 * Adding constraints: [s(207)=<aux(46)* (1/3),aux(46)=<it(72)*aux(42)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 72: [s(219)=<D,s(218)=<D+1,s(217)=<D+2]
* Psum in Loop 73: [it(73)=<1,s(221)=<D,s(222)=<D+1,s(223)=<D+2,s(220)=<A'+1]

###### Computing sum for s(219)=<D  in Loop 72 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(47)=<D] 
 * Adding constraints: [s(219)=<it(72)*aux(47)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(47)=<D]
* Psum in Loop 72: [s(218)=<D+1,s(217)=<D+2]
* Psum in Loop 73: [it(73)=<1,s(221)=<D,s(222)=<D+1,s(223)=<D+2,s(220)=<A'+1]

###### Computing max_min for aux(47)=<D  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(47)=<A-2,aux(47)=<D+F] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 72: [s(218)=<D+1,s(217)=<D+2]
* Psum in Loop 73: [it(73)=<1,s(221)=<D,s(222)=<D+1,s(223)=<D+2,s(220)=<A'+1]

###### Computing sum for s(218)=<D+1  in Loop 72 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(48)=<D+1] 
 * Adding constraints: [s(218)=<it(72)*aux(48)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(48)=<D+1]
* Psum in Loop 72: [s(217)=<D+2]
* Psum in Loop 73: [it(73)=<1,s(221)=<D,s(222)=<D+1,s(223)=<D+2,s(220)=<A'+1]

###### Computing max_min for aux(48)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(48)=<aux(47)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 72: [s(217)=<D+2]
* Psum in Loop 73: [it(73)=<1,s(221)=<D,s(222)=<D+1,s(223)=<D+2,s(220)=<A'+1]

###### Computing sum for s(217)=<D+2  in Loop 72 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(49)=<D+2] 
 * Adding constraints: [s(217)=<it(72)*aux(49)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(49)=<D+2]
* Psum in Loop 73: [it(73)=<1,s(221)=<D,s(222)=<D+1,s(223)=<D+2,s(220)=<A'+1]

###### Computing max_min for aux(49)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(49)=<aux(47)+2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 73: [it(73)=<1,s(221)=<D,s(222)=<D+1,s(223)=<D+2,s(220)=<A'+1]

###### Computing sum for it(73)=<1  in Loop 73 
   - Applying inductive sum strategy 
     - head Candidate: A-D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-D 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: F+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: F+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-D 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-D 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: F+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: F+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-D 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(72)+it(73)=<A-D-1,it(72)+it(73)=<B-D,it(72)+it(73)=<E-1,it(72)+it(73)=<F+1,it(72)+it(73)=<E-1,it(72)+it(73)=<F+1,it(72)+it(73)=<A-D-1,it(72)+it(73)=<B-D,it(72)+it(73)=<A-D-A'+D',it(72)+it(73)=<B-D-B'+D',it(72)+it(73)=<E-E',it(72)+it(73)=<F-F',it(72)+it(73)=<E-E',it(72)+it(73)=<F-F',it(72)+it(73)=<A-D-A'+D',it(72)+it(73)=<B-D-B'+D'] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 73: [s(221)=<D,s(222)=<D+1,s(223)=<D+2,s(220)=<A'+1]

###### Computing sum for s(221)=<D  in Loop 73 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(50)=<D] 
 * Adding constraints: [s(221)=<it(73)*aux(50)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(50)=<D]
* Psum in Loop 73: [s(222)=<D+1,s(223)=<D+2,s(220)=<A'+1]

###### Computing max_min for aux(50)=<D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(50)=<aux(47)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 73: [s(222)=<D+1,s(223)=<D+2,s(220)=<A'+1]

###### Computing sum for s(222)=<D+1  in Loop 73 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(51)=<D+1] 
 * Adding constraints: [s(222)=<it(73)*aux(51)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(51)=<D+1]
* Psum in Loop 73: [s(223)=<D+2,s(220)=<A'+1]

###### Computing max_min for aux(51)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(51)=<aux(47)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 73: [s(223)=<D+2,s(220)=<A'+1]

###### Computing sum for s(223)=<D+2  in Loop 73 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(52)=<D+2] 
 * Adding constraints: [s(223)=<it(73)*aux(52)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(52)=<D+2]
* Psum in Loop 73: [s(220)=<A'+1]

###### Computing max_min for aux(52)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(52)=<aux(47)+2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 73: [s(220)=<A'+1]

###### Computing sum for s(220)=<A'+1  in Loop 73 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(53)=<A+1,aux(53)=<B+2] 
 * Adding constraints: [s(220)=<it(73)*aux(53)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(53)=<A+1,aux(53)=<B+2]

###### Computing max_min for aux(53)=<A+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(53)=<aux(40)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(53)=<B+2]

###### Computing max_min for aux(53)=<B+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(53)=<aux(41)+2] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [72,73] 

#### Simplifying cost structure of phase [72,73] 
 * Joined equivalent variables [aux(57),aux(43)] into aux(57)
 * Joined equivalent variables [aux(49),aux(52)] into aux(49)
 * Joined equivalent variables [aux(48),aux(51)] into aux(48)
 * Joined equivalent variables [aux(45),s(208)] into aux(45)

#### Cost of phase [72,73]:echelon_helper(A,B,C,D,E,F,G,H,I,J) -> [echelon_helper(A',B',C',D',E',F',G',H',I',J')] 
40*it(72)+40*it(73)+10*s(192)+10*s(193)+16*s(194)+16*s(195)+10*s(196)+5*s(197)+24*s(198)+10*s(199)+27*s(200)+20*s(201)+24*s(202)+10*s(203)+27*s(204)+20*s(205)+5*s(220)+8*s(221)+8*s(222)+5*s(223)+0
  Such that:aux(44) =< -2*A+B+2
aux(36) =< -2*A+2*B+2
it(72) =< -A+B-D+1
aux(47) =< A
aux(40) =< A+1
aux(41) =< B
aux(40) =< B+2
aux(36) =< 2*B-2*D
it(72) =< B/2-D
aux(47) =< D+F
aux(54) =< -A+B-D+A'-B'+D'
aux(55) =< A-D
aux(56) =< A-D-A'+D'
aux(57) =< B-2*D
aux(58) =< B-D
aux(59) =< B-D-B'+D'
aux(60) =< B/2-D-B'/2+D'
aux(61) =< E
aux(62) =< E-E'
aux(63) =< F+1
aux(64) =< F-F'
it(72) =< aux(54)
it(73) =< aux(54)
it(72) =< aux(55)
it(73) =< aux(55)
it(72) =< aux(56)
it(73) =< aux(56)
aux(44) =< aux(57)
it(72) =< aux(58)
it(73) =< aux(58)
it(72) =< aux(59)
it(73) =< aux(59)
it(72) =< aux(60)
it(73) =< aux(60)
it(72) =< aux(61)
it(73) =< aux(61)
it(72) =< aux(62)
it(73) =< aux(62)
it(72) =< aux(63)
it(73) =< aux(63)
it(72) =< aux(64)
it(73) =< aux(64)
aux(53) =< aux(41)+2
aux(53) =< aux(40)
aux(49) =< aux(47)+2
aux(48) =< aux(47)+1
aux(50) =< aux(47)
aux(44) =< aux(57)-2
aux(42) =< aux(41)+1
aux(39) =< aux(36)* (1/2)+1
aux(38) =< aux(36)* (1/2)-1
aux(37) =< aux(36)+1
s(219) =< it(72)*aux(47)
aux(45) =< it(72)*aux(41)
s(193) =< it(72)*aux(57)
s(209) =< it(72)*aux(40)
s(216) =< it(72)*aux(36)
s(220) =< it(73)*aux(53)
s(223) =< it(73)*aux(49)
s(222) =< it(73)*aux(48)
s(221) =< it(73)*aux(50)
s(217) =< it(72)*aux(49)
s(218) =< it(72)*aux(48)
aux(46) =< it(72)*aux(42)
s(206) =< aux(45)* (1/3)
s(210) =< it(72)*aux(44)
s(212) =< it(72)*aux(42)
s(215) =< it(72)*aux(39)
s(192) =< it(72)*aux(38)
s(212) =< it(72)*aux(37)
s(207) =< aux(46)* (1/3)
s(194) =< s(219)
s(195) =< s(218)
s(196) =< s(217)
s(192) =< aux(45)
s(211) =< s(216)
s(214) =< s(216)
s(214) =< s(215)
s(213) =< s(215)
s(213) =< s(209)
s(197) =< s(209)
s(211) =< aux(45)
s(197) =< aux(45)
s(192) =< s(214)
s(198) =< s(214)
s(199) =< s(214)
s(200) =< s(213)
s(198) =< s(213)
s(198) =< s(211)
s(201) =< s(211)
s(199) =< s(211)
s(200) =< s(212)
s(198) =< s(212)
s(200) =< s(211)
s(193) =< s(210)
s(193) =< aux(45)
s(202) =< s(210)
s(203) =< s(210)
s(204) =< s(209)
s(202) =< s(209)
s(202) =< aux(45)
s(205) =< aux(45)
s(203) =< aux(45)
s(204) =< s(207)
s(202) =< s(207)
s(204) =< s(206)
s(202) =< s(206)

#### Simplifying cost structure of chain [[72,73],77] 
 * Joined equivalent variables [aux(65),aux(54),aux(59)] into aux(65)
 * Joined equivalent variables [aux(66),aux(56),aux(61),aux(62)] into aux(66)
 * Renamed intermediate variables: 
[ (eq(74,1),s(68))>>s(224), (eq(74,1),s(69))>>s(225), (eq(74,1),s(70))>>s(226)]

#### Simplifying cost structure of CE 74 

#### Simplifying cost structure of chain [76,[72,73],77] 
 * Joined equivalent variables [aux(67),aux(55)] into aux(67)
 * Joined equivalent variables [aux(68),aux(40)] into aux(68)
 * Joined equivalent variables [aux(69),aux(41),aux(57),aux(58)] into aux(69)
 * Joined equivalent variables [aux(70),aux(63),aux(64)] into aux(70)

#### Simplifying cost structure of chain [76,77] 
 * Renamed intermediate variables: 
[ (eq(75,1),s(71))>>s(227), (eq(75,1),s(72))>>s(228), (eq(75,1),s(73))>>s(229), (eq(75,1),s(74))>>s(230), (eq(75,1),s(75))>>s(231), (eq(75,1),s(76))>>s(232), (eq(75,1),s(77))>>s(233), (eq(75,1),s(78))>>s(234), (eq(75,1),s(79))>>s(235), (eq(75,1),s(80))>>s(236)]

#### Simplifying cost structure of CE 75 

#### Simplifying cost structure of chain [75,[72,73],77] 
 * Joined equivalent variables [aux(71),aux(36)] into aux(71)
 * Joined equivalent variables [aux(72),aux(55)] into aux(72)
 * Joined equivalent variables [aux(73),aux(40),s(230)] into aux(73)
 * Joined equivalent variables [aux(74),aux(41),aux(57),aux(58),s(231)] into aux(74)
 * Joined equivalent variables [aux(75),s(232)] into aux(75)
 * Joined equivalent variables [aux(76),aux(63),aux(64)] into aux(76)

#### Simplifying cost structure of chain [75,77] 
 * Renamed intermediate variables: 
[ (eq(76,1),s(81))>>s(237), (eq(76,1),s(82))>>s(238), (eq(76,1),s(83))>>s(239), (eq(76,1),s(84))>>s(240), (eq(76,1),s(85))>>s(241), (eq(76,1),s(87))>>s(242), (eq(76,1),s(88))>>s(243), (eq(76,1),aux(27))>>s(244), (eq(76,1),s(89))>>s(245), (eq(76,1),s(90))>>s(246), (eq(76,1),s(91))>>s(247), (eq(76,1),s(92))>>s(248), (eq(76,1),s(93))>>s(249)]

#### Simplifying cost structure of CE 76 

#### Simplifying cost structure of chain [74,[72,73],77] 
 * Joined equivalent variables [aux(77),aux(36),s(244)] into aux(77)
 * Joined equivalent variables [aux(78),aux(55)] into aux(78)
 * Joined equivalent variables [aux(79),aux(40),s(242)] into aux(79)
 * Joined equivalent variables [aux(80),aux(41),aux(57),aux(58),s(243)] into aux(80)
 * Joined equivalent variables [aux(81),aux(63),aux(64)] into aux(81)

#### Simplifying cost structure of chain [74,77] 
 * Renamed intermediate variables: 
[ (ch([74,77]),s(237))>>s(250), (ch([74,77]),s(238))>>s(251), (ch([74,77]),s(239))>>s(252), (ch([74,77]),s(244))>>s(253), (ch([74,77]),s(240))>>s(254), (ch([74,77]),s(241))>>s(255), (ch([74,77]),s(242))>>s(256), (ch([74,77]),s(243))>>s(257), (ch([74,77]),s(245))>>s(258), (ch([74,77]),s(246))>>s(259), (ch([74,77]),s(247))>>s(260), (ch([74,77]),s(248))>>s(261), (ch([74,77]),s(249))>>s(262)]
 * Renamed intermediate variables: 
[ (ch([75,77]),s(227))>>s(263), (ch([75,77]),s(228))>>s(264), (ch([75,77]),s(229))>>s(265), (ch([75,77]),s(230))>>s(266), (ch([75,77]),s(231))>>s(267), (ch([75,77]),s(232))>>s(268), (ch([75,77]),s(233))>>s(269), (ch([75,77]),s(234))>>s(270), (ch([75,77]),s(235))>>s(271), (ch([75,77]),s(236))>>s(272)]
 * Renamed intermediate variables: 
[ (ch([76,77]),s(224))>>s(273), (ch([76,77]),s(225))>>s(274), (ch([76,77]),s(226))>>s(275)]
 * Joined equivalent variables [aux(84),s(253)] into aux(84)
 * Joined equivalent variables [aux(85),s(256),s(266)] into aux(85)
 * Joined equivalent variables [aux(86),s(257),s(267)] into aux(86)
 * Joined equivalent variables [s(250),s(263),s(273)] into s(250)
 * Joined equivalent variables [s(251),s(264),s(274)] into s(251)
 * Renamed intermediate variables: 
[ (ch([74,[72,73],77]),s(237))>>s(276), (ch([74,[72,73],77]),s(238))>>s(277), (ch([74,[72,73],77]),s(239))>>s(278), (ch([74,[72,73],77]),aux(44))>>s(279), (ch([74,[72,73],77]),it(72))>>s(280), (ch([74,[72,73],77]),s(240))>>s(281), (ch([74,[72,73],77]),s(241))>>s(282), (ch([74,[72,73],77]),aux(65))>>s(283), (ch([74,[72,73],77]),aux(60))>>s(284), (ch([74,[72,73],77]),aux(66))>>s(285), (ch([74,[72,73],77]),aux(77))>>s(286), (ch([74,[72,73],77]),aux(78))>>s(287), (ch([74,[72,73],77]),aux(79))>>s(288), (ch([74,[72,73],77]),aux(80))>>s(289), (ch([74,[72,73],77]),aux(81))>>s(290), (ch([74,[72,73],77]),aux(47))>>s(291), (ch([74,[72,73],77]),it(73))>>s(292), (ch([74,[72,73],77]),aux(53))>>s(293), (ch([74,[72,73],77]),aux(49))>>s(294), (ch([74,[72,73],77]),aux(48))>>s(295), (ch([74,[72,73],77]),aux(50))>>s(296), (ch([74,[72,73],77]),aux(42))>>s(297), (ch([74,[72,73],77]),aux(39))>>s(298), (ch([74,[72,73],77]),aux(38))>>s(299), (ch([74,[72,73],77]),aux(37))>>s(300), (ch([74,[72,73],77]),s(219))>>s(301), (ch([74,[72,73],77]),aux(45))>>s(302), (ch([74,[72,73],77]),s(193))>>s(303), (ch([74,[72,73],77]),s(209))>>s(304), (ch([74,[72,73],77]),s(216))>>s(305), (ch([74,[72,73],77]),s(220))>>s(306), (ch([74,[72,73],77]),s(223))>>s(307), (ch([74,[72,73],77]),s(222))>>s(308), (ch([74,[72,73],77]),s(221))>>s(309), (ch([74,[72,73],77]),s(217))>>s(310), (ch([74,[72,73],77]),s(218))>>s(311), (ch([74,[72,73],77]),aux(46))>>s(312), (ch([74,[72,73],77]),s(206))>>s(313), (ch([74,[72,73],77]),s(210))>>s(314), (ch([74,[72,73],77]),s(212))>>s(315), (ch([74,[72,73],77]),s(215))>>s(316), (ch([74,[72,73],77]),s(192))>>s(317), (ch([74,[72,73],77]),s(207))>>s(318), (ch([74,[72,73],77]),s(194))>>s(319), (ch([74,[72,73],77]),s(195))>>s(320), (ch([74,[72,73],77]),s(196))>>s(321), (ch([74,[72,73],77]),s(211))>>s(322), (ch([74,[72,73],77]),s(214))>>s(323), (ch([74,[72,73],77]),s(213))>>s(324), (ch([74,[72,73],77]),s(197))>>s(325), (ch([74,[72,73],77]),s(198))>>s(326), (ch([74,[72,73],77]),s(199))>>s(327), (ch([74,[72,73],77]),s(200))>>s(328), (ch([74,[72,73],77]),s(201))>>s(329), (ch([74,[72,73],77]),s(202))>>s(330), (ch([74,[72,73],77]),s(203))>>s(331), (ch([74,[72,73],77]),s(204))>>s(332), (ch([74,[72,73],77]),s(205))>>s(333), (ch([74,[72,73],77]),s(245))>>s(334), (ch([74,[72,73],77]),s(246))>>s(335), (ch([74,[72,73],77]),s(247))>>s(336), (ch([74,[72,73],77]),s(248))>>s(337), (ch([74,[72,73],77]),s(249))>>s(338)]
 * Renamed intermediate variables: 
[ (ch([75,[72,73],77]),s(227))>>s(339), (ch([75,[72,73],77]),s(228))>>s(340), (ch([75,[72,73],77]),aux(44))>>s(341), (ch([75,[72,73],77]),aux(65))>>s(342), (ch([75,[72,73],77]),aux(60))>>s(343), (ch([75,[72,73],77]),s(233))>>s(344), (ch([75,[72,73],77]),aux(66))>>s(345), (ch([75,[72,73],77]),aux(71))>>s(346), (ch([75,[72,73],77]),aux(72))>>s(347), (ch([75,[72,73],77]),aux(73))>>s(348), (ch([75,[72,73],77]),aux(74))>>s(349), (ch([75,[72,73],77]),aux(75))>>s(350), (ch([75,[72,73],77]),aux(76))>>s(351), (ch([75,[72,73],77]),s(229))>>s(352), (ch([75,[72,73],77]),aux(47))>>s(353), (ch([75,[72,73],77]),it(72))>>s(354), (ch([75,[72,73],77]),it(73))>>s(355), (ch([75,[72,73],77]),aux(53))>>s(356), (ch([75,[72,73],77]),aux(49))>>s(357), (ch([75,[72,73],77]),aux(48))>>s(358), (ch([75,[72,73],77]),aux(50))>>s(359), (ch([75,[72,73],77]),aux(42))>>s(360), (ch([75,[72,73],77]),aux(39))>>s(361), (ch([75,[72,73],77]),aux(38))>>s(362), (ch([75,[72,73],77]),aux(37))>>s(363), (ch([75,[72,73],77]),s(219))>>s(364), (ch([75,[72,73],77]),aux(45))>>s(365), (ch([75,[72,73],77]),s(193))>>s(366), (ch([75,[72,73],77]),s(209))>>s(367), (ch([75,[72,73],77]),s(216))>>s(368), (ch([75,[72,73],77]),s(220))>>s(369), (ch([75,[72,73],77]),s(223))>>s(370), (ch([75,[72,73],77]),s(222))>>s(371), (ch([75,[72,73],77]),s(221))>>s(372), (ch([75,[72,73],77]),s(217))>>s(373), (ch([75,[72,73],77]),s(218))>>s(374), (ch([75,[72,73],77]),aux(46))>>s(375), (ch([75,[72,73],77]),s(206))>>s(376), (ch([75,[72,73],77]),s(210))>>s(377), (ch([75,[72,73],77]),s(212))>>s(378), (ch([75,[72,73],77]),s(215))>>s(379), (ch([75,[72,73],77]),s(192))>>s(380), (ch([75,[72,73],77]),s(207))>>s(381), (ch([75,[72,73],77]),s(194))>>s(382), (ch([75,[72,73],77]),s(195))>>s(383), (ch([75,[72,73],77]),s(196))>>s(384), (ch([75,[72,73],77]),s(211))>>s(385), (ch([75,[72,73],77]),s(214))>>s(386), (ch([75,[72,73],77]),s(213))>>s(387), (ch([75,[72,73],77]),s(197))>>s(388), (ch([75,[72,73],77]),s(198))>>s(389), (ch([75,[72,73],77]),s(199))>>s(390), (ch([75,[72,73],77]),s(200))>>s(391), (ch([75,[72,73],77]),s(201))>>s(392), (ch([75,[72,73],77]),s(202))>>s(393), (ch([75,[72,73],77]),s(203))>>s(394), (ch([75,[72,73],77]),s(204))>>s(395), (ch([75,[72,73],77]),s(205))>>s(396), (ch([75,[72,73],77]),s(234))>>s(397), (ch([75,[72,73],77]),s(235))>>s(398), (ch([75,[72,73],77]),s(236))>>s(399)]
 * Renamed intermediate variables: 
[ (ch([76,[72,73],77]),s(224))>>s(400), (ch([76,[72,73],77]),s(225))>>s(401), (ch([76,[72,73],77]),aux(44))>>s(402), (ch([76,[72,73],77]),aux(36))>>s(403), (ch([76,[72,73],77]),it(72))>>s(404), (ch([76,[72,73],77]),aux(65))>>s(405), (ch([76,[72,73],77]),aux(60))>>s(406), (ch([76,[72,73],77]),aux(66))>>s(407), (ch([76,[72,73],77]),aux(67))>>s(408), (ch([76,[72,73],77]),aux(68))>>s(409), (ch([76,[72,73],77]),aux(69))>>s(410), (ch([76,[72,73],77]),aux(70))>>s(411), (ch([76,[72,73],77]),aux(47))>>s(412), (ch([76,[72,73],77]),s(226))>>s(413), (ch([76,[72,73],77]),it(73))>>s(414), (ch([76,[72,73],77]),aux(53))>>s(415), (ch([76,[72,73],77]),aux(49))>>s(416), (ch([76,[72,73],77]),aux(48))>>s(417), (ch([76,[72,73],77]),aux(50))>>s(418), (ch([76,[72,73],77]),aux(42))>>s(419), (ch([76,[72,73],77]),aux(39))>>s(420), (ch([76,[72,73],77]),aux(38))>>s(421), (ch([76,[72,73],77]),aux(37))>>s(422), (ch([76,[72,73],77]),s(219))>>s(423), (ch([76,[72,73],77]),aux(45))>>s(424), (ch([76,[72,73],77]),s(193))>>s(425), (ch([76,[72,73],77]),s(209))>>s(426), (ch([76,[72,73],77]),s(216))>>s(427), (ch([76,[72,73],77]),s(220))>>s(428), (ch([76,[72,73],77]),s(223))>>s(429), (ch([76,[72,73],77]),s(222))>>s(430), (ch([76,[72,73],77]),s(221))>>s(431), (ch([76,[72,73],77]),s(217))>>s(432), (ch([76,[72,73],77]),s(218))>>s(433), (ch([76,[72,73],77]),aux(46))>>s(434), (ch([76,[72,73],77]),s(206))>>s(435), (ch([76,[72,73],77]),s(210))>>s(436), (ch([76,[72,73],77]),s(212))>>s(437), (ch([76,[72,73],77]),s(215))>>s(438), (ch([76,[72,73],77]),s(192))>>s(439), (ch([76,[72,73],77]),s(207))>>s(440), (ch([76,[72,73],77]),s(194))>>s(441), (ch([76,[72,73],77]),s(195))>>s(442), (ch([76,[72,73],77]),s(196))>>s(443), (ch([76,[72,73],77]),s(211))>>s(444), (ch([76,[72,73],77]),s(214))>>s(445), (ch([76,[72,73],77]),s(213))>>s(446), (ch([76,[72,73],77]),s(197))>>s(447), (ch([76,[72,73],77]),s(198))>>s(448), (ch([76,[72,73],77]),s(199))>>s(449), (ch([76,[72,73],77]),s(200))>>s(450), (ch([76,[72,73],77]),s(201))>>s(451), (ch([76,[72,73],77]),s(202))>>s(452), (ch([76,[72,73],77]),s(203))>>s(453), (ch([76,[72,73],77]),s(204))>>s(454), (ch([76,[72,73],77]),s(205))>>s(455)]
 * Joined equivalent variables [aux(90),s(286),s(346),s(403)] into aux(90)
 * Joined equivalent variables [aux(92),s(283),s(342),s(405)] into aux(92)
 * Joined equivalent variables [aux(93),s(287),s(347),s(408)] into aux(93)
 * Joined equivalent variables [aux(94),s(288),s(348),s(409)] into aux(94)
 * Joined equivalent variables [aux(95),s(284),s(343),s(406)] into aux(95)
 * Joined equivalent variables [aux(96),s(289),s(349),s(410)] into aux(96)
 * Joined equivalent variables [aux(98),s(350)] into aux(98)
 * Joined equivalent variables [aux(99),s(285),s(345),s(407)] into aux(99)
 * Joined equivalent variables [aux(100),s(290),s(351),s(411)] into aux(100)
 * Joined equivalent variables [s(276),s(339),s(400)] into s(276)
 * Joined equivalent variables [s(277),s(340),s(401)] into s(277)
 * Joined equivalent variables [s(293),s(356),s(415)] into s(293)
 * Joined equivalent variables [s(279),s(402)] into s(279)
 * Joined equivalent variables [s(297),s(360),s(419)] into s(297)
 * Joined equivalent variables [s(298),s(361),s(420)] into s(298)
 * Joined equivalent variables [s(299),s(362),s(421)] into s(299)
 * Joined equivalent variables [s(300),s(363),s(422)] into s(300)
 * Joined equivalent variables [s(292),s(355),s(414)] into s(292)
 * Joined equivalent variables [s(291),s(353),s(412)] into s(291)
 * Joined equivalent variables [s(294),s(357),s(416)] into s(294)
 * Joined equivalent variables [s(295),s(358),s(417)] into s(295)
 * Joined equivalent variables [s(296),s(359),s(418)] into s(296)
 * Joined equivalent variables [s(306),s(369),s(428)] into s(306)
 * Joined equivalent variables [s(307),s(370),s(429)] into s(307)
 * Joined equivalent variables [s(308),s(371),s(430)] into s(308)
 * Joined equivalent variables [s(309),s(372),s(431)] into s(309)

#### Cost of chains of echelon_helper(A,B,C,D,E,F,G,H,I,J):
* Chain [[72,73],77]: 40*it(72)+40*it(73)+10*s(192)+10*s(193)+16*s(194)+16*s(195)+10*s(196)+5*s(197)+24*s(198)+10*s(199)+27*s(200)+20*s(201)+24*s(202)+10*s(203)+27*s(204)+20*s(205)+5*s(220)+8*s(221)+8*s(222)+5*s(223)+3
  Such that:aux(44) =< -2*A+B+2
aux(36) =< -2*A+2*B+2
it(72) =< -A+B-D+1
aux(47) =< A
aux(40) =< A+1
aux(55) =< A-D
aux(60) =< -A/2+B/2+E
aux(41) =< B
aux(57) =< B-2*D
aux(58) =< B-D
it(72) =< B/2-D
aux(47) =< D+F
aux(64) =< F
aux(63) =< F+1
aux(65) =< -A+B+E
aux(66) =< E
it(72) =< aux(65)
it(73) =< aux(65)
it(72) =< aux(55)
it(73) =< aux(55)
it(72) =< aux(66)
it(73) =< aux(66)
aux(44) =< aux(57)
it(72) =< aux(58)
it(73) =< aux(58)
it(72) =< aux(60)
it(73) =< aux(60)
it(72) =< aux(63)
it(73) =< aux(63)
it(72) =< aux(64)
it(73) =< aux(64)
aux(53) =< aux(41)+2
aux(53) =< aux(40)
aux(49) =< aux(47)+2
aux(48) =< aux(47)+1
aux(50) =< aux(47)
aux(44) =< aux(57)-2
aux(42) =< aux(41)+1
aux(39) =< aux(36)* (1/2)+1
aux(38) =< aux(36)* (1/2)-1
aux(37) =< aux(36)+1
s(219) =< it(72)*aux(47)
aux(45) =< it(72)*aux(41)
s(193) =< it(72)*aux(57)
s(209) =< it(72)*aux(40)
s(216) =< it(72)*aux(36)
s(220) =< it(73)*aux(53)
s(223) =< it(73)*aux(49)
s(222) =< it(73)*aux(48)
s(221) =< it(73)*aux(50)
s(217) =< it(72)*aux(49)
s(218) =< it(72)*aux(48)
aux(46) =< it(72)*aux(42)
s(206) =< aux(45)* (1/3)
s(210) =< it(72)*aux(44)
s(212) =< it(72)*aux(42)
s(215) =< it(72)*aux(39)
s(192) =< it(72)*aux(38)
s(212) =< it(72)*aux(37)
s(207) =< aux(46)* (1/3)
s(194) =< s(219)
s(195) =< s(218)
s(196) =< s(217)
s(192) =< aux(45)
s(211) =< s(216)
s(214) =< s(216)
s(214) =< s(215)
s(213) =< s(215)
s(213) =< s(209)
s(197) =< s(209)
s(211) =< aux(45)
s(197) =< aux(45)
s(192) =< s(214)
s(198) =< s(214)
s(199) =< s(214)
s(200) =< s(213)
s(198) =< s(213)
s(198) =< s(211)
s(201) =< s(211)
s(199) =< s(211)
s(200) =< s(212)
s(198) =< s(212)
s(200) =< s(211)
s(193) =< s(210)
s(193) =< aux(45)
s(202) =< s(210)
s(203) =< s(210)
s(204) =< s(209)
s(202) =< s(209)
s(202) =< aux(45)
s(205) =< aux(45)
s(203) =< aux(45)
s(204) =< s(207)
s(202) =< s(207)
s(204) =< s(206)
s(202) =< s(206)

  with precondition: [H=1,I=0,C>=0,D>=1,E>=2,G>=0,J>=0,B+1>=A,F+1>=E,A>=D+E] 

* Chain [77]: 3
  with precondition: [E=1,F=0,H=1,I=0,A>=0,B>=0,C>=0,D>=0,G>=0,J>=0] 

* Chain [76,[72,73],77]: 40*it(72)+40*it(73)+10*s(192)+10*s(193)+16*s(194)+16*s(195)+10*s(196)+5*s(197)+24*s(198)+10*s(199)+27*s(200)+20*s(201)+24*s(202)+10*s(203)+27*s(204)+20*s(205)+5*s(220)+8*s(221)+8*s(222)+5*s(223)+8*s(224)+5*s(225)+5*s(226)+43
  Such that:s(224) =< 1
s(225) =< 2
aux(44) =< -2*A+B+2
aux(36) =< -2*A+2*B+2
it(72) =< -A+B
aux(65) =< -A+B+E
aux(60) =< -A/2+B/2+E
aux(44) =< B-2*E+2
it(72) =< B-E
it(72) =< B/2
aux(66) =< E
aux(67) =< A
aux(68) =< A+1
aux(69) =< B
aux(70) =< F
aux(47) =< aux(67)
s(226) =< aux(68)
aux(47) =< aux(70)
it(72) =< aux(65)
it(73) =< aux(65)
it(72) =< aux(67)
it(73) =< aux(67)
it(72) =< aux(66)
it(73) =< aux(66)
aux(44) =< aux(69)
it(72) =< aux(69)
it(73) =< aux(69)
it(72) =< aux(60)
it(73) =< aux(60)
it(72) =< aux(70)
it(73) =< aux(70)
aux(53) =< aux(69)+2
aux(53) =< aux(68)
aux(49) =< aux(47)+2
aux(48) =< aux(47)+1
aux(50) =< aux(47)
aux(44) =< aux(69)-2
aux(42) =< aux(69)+1
aux(39) =< aux(36)* (1/2)+1
aux(38) =< aux(36)* (1/2)-1
aux(37) =< aux(36)+1
s(219) =< it(72)*aux(47)
aux(45) =< it(72)*aux(69)
s(193) =< it(72)*aux(69)
s(209) =< it(72)*aux(68)
s(216) =< it(72)*aux(36)
s(220) =< it(73)*aux(53)
s(223) =< it(73)*aux(49)
s(222) =< it(73)*aux(48)
s(221) =< it(73)*aux(50)
s(217) =< it(72)*aux(49)
s(218) =< it(72)*aux(48)
aux(46) =< it(72)*aux(42)
s(206) =< aux(45)* (1/3)
s(210) =< it(72)*aux(44)
s(212) =< it(72)*aux(42)
s(215) =< it(72)*aux(39)
s(192) =< it(72)*aux(38)
s(212) =< it(72)*aux(37)
s(207) =< aux(46)* (1/3)
s(194) =< s(219)
s(195) =< s(218)
s(196) =< s(217)
s(192) =< aux(45)
s(211) =< s(216)
s(214) =< s(216)
s(214) =< s(215)
s(213) =< s(215)
s(213) =< s(209)
s(197) =< s(209)
s(211) =< aux(45)
s(197) =< aux(45)
s(192) =< s(214)
s(198) =< s(214)
s(199) =< s(214)
s(200) =< s(213)
s(198) =< s(213)
s(198) =< s(211)
s(201) =< s(211)
s(199) =< s(211)
s(200) =< s(212)
s(198) =< s(212)
s(200) =< s(211)
s(193) =< s(210)
s(193) =< aux(45)
s(202) =< s(210)
s(203) =< s(210)
s(204) =< s(209)
s(202) =< s(209)
s(202) =< aux(45)
s(205) =< aux(45)
s(203) =< aux(45)
s(204) =< s(207)
s(202) =< s(207)
s(204) =< s(206)
s(202) =< s(206)

  with precondition: [D=0,H=1,I=0,C>=0,E>=3,G>=0,J>=0,B+1>=A,A>=E,F+1>=E] 

* Chain [76,77]: 8*s(224)+5*s(225)+5*s(226)+43
  Such that:s(224) =< 1
s(225) =< 2
s(226) =< A+1

  with precondition: [D=0,E=2,H=1,I=0,A>=2,C>=0,F>=1,G>=0,J>=0,B+1>=A] 

* Chain [75,[72,73],77]: 40*it(72)+40*it(73)+10*s(192)+10*s(193)+16*s(194)+16*s(195)+10*s(196)+5*s(197)+24*s(198)+10*s(199)+27*s(200)+20*s(201)+24*s(202)+10*s(203)+27*s(204)+20*s(205)+5*s(220)+8*s(221)+8*s(222)+5*s(223)+8*s(227)+5*s(228)+10*s(229)+27*s(234)+24*s(235)+10*s(236)+43
  Such that:s(227) =< 1
s(228) =< 2
aux(44) =< -2*A+B+2
aux(65) =< -A+B+E
aux(60) =< -A/2+B/2+E
s(233) =< B/2+1/2
aux(66) =< E
aux(71) =< -2*A+2*B+2
aux(72) =< A
aux(73) =< A+1
aux(74) =< B
aux(75) =< B/2
aux(76) =< F
s(229) =< aux(71)
aux(47) =< aux(72)
it(72) =< aux(75)
aux(47) =< aux(76)
it(72) =< aux(65)
it(73) =< aux(65)
it(72) =< aux(72)
it(73) =< aux(72)
it(72) =< aux(66)
it(73) =< aux(66)
aux(44) =< aux(74)
it(72) =< aux(74)
it(73) =< aux(74)
it(72) =< aux(60)
it(73) =< aux(60)
it(72) =< aux(76)
it(73) =< aux(76)
aux(53) =< aux(74)+2
aux(53) =< aux(73)
aux(49) =< aux(47)+2
aux(48) =< aux(47)+1
aux(50) =< aux(47)
aux(44) =< aux(74)-2
aux(42) =< aux(74)+1
aux(39) =< aux(71)* (1/2)+1
aux(38) =< aux(71)* (1/2)-1
aux(37) =< aux(71)+1
s(219) =< it(72)*aux(47)
aux(45) =< it(72)*aux(74)
s(193) =< it(72)*aux(74)
s(209) =< it(72)*aux(73)
s(216) =< it(72)*aux(71)
s(220) =< it(73)*aux(53)
s(223) =< it(73)*aux(49)
s(222) =< it(73)*aux(48)
s(221) =< it(73)*aux(50)
s(217) =< it(72)*aux(49)
s(218) =< it(72)*aux(48)
aux(46) =< it(72)*aux(42)
s(206) =< aux(45)* (1/3)
s(210) =< it(72)*aux(44)
s(212) =< it(72)*aux(42)
s(215) =< it(72)*aux(39)
s(192) =< it(72)*aux(38)
s(212) =< it(72)*aux(37)
s(207) =< aux(46)* (1/3)
s(194) =< s(219)
s(195) =< s(218)
s(196) =< s(217)
s(192) =< aux(45)
s(211) =< s(216)
s(214) =< s(216)
s(214) =< s(215)
s(213) =< s(215)
s(213) =< s(209)
s(197) =< s(209)
s(211) =< aux(45)
s(197) =< aux(45)
s(192) =< s(214)
s(198) =< s(214)
s(199) =< s(214)
s(200) =< s(213)
s(198) =< s(213)
s(198) =< s(211)
s(201) =< s(211)
s(199) =< s(211)
s(200) =< s(212)
s(198) =< s(212)
s(200) =< s(211)
s(193) =< s(210)
s(193) =< aux(45)
s(202) =< s(210)
s(203) =< s(210)
s(204) =< s(209)
s(202) =< s(209)
s(202) =< aux(45)
s(205) =< aux(45)
s(203) =< aux(45)
s(204) =< s(207)
s(202) =< s(207)
s(204) =< s(206)
s(202) =< s(206)
s(234) =< aux(73)
s(235) =< aux(73)
s(235) =< aux(74)
s(236) =< aux(74)
s(234) =< s(233)
s(235) =< s(233)
s(234) =< aux(75)
s(235) =< aux(75)

  with precondition: [D=0,H=1,I=0,C>=0,E>=3,G>=0,J>=0,B+2>=2*A,A>=E,F+1>=E] 

* Chain [75,77]: 8*s(227)+5*s(228)+10*s(229)+27*s(234)+24*s(235)+10*s(236)+43
  Such that:s(227) =< 1
s(228) =< 2
s(229) =< -2*A+2*B+2
s(230) =< A+1
s(231) =< B
s(232) =< B/2
s(233) =< B/2+1/2
s(234) =< s(230)
s(235) =< s(230)
s(235) =< s(231)
s(236) =< s(231)
s(234) =< s(233)
s(235) =< s(233)
s(234) =< s(232)
s(235) =< s(232)

  with precondition: [D=0,E=2,H=1,I=0,A>=2,C>=0,F>=1,G>=0,J>=0,B+2>=2*A] 

* Chain [74,[72,73],77]: 40*it(72)+40*it(73)+10*s(192)+10*s(193)+16*s(194)+16*s(195)+10*s(196)+5*s(197)+24*s(198)+10*s(199)+27*s(200)+20*s(201)+24*s(202)+10*s(203)+27*s(204)+20*s(205)+5*s(220)+8*s(221)+8*s(222)+5*s(223)+8*s(237)+5*s(238)+10*s(239)+5*s(246)+27*s(247)+24*s(248)+10*s(249)+43
  Such that:s(237) =< 1
s(238) =< 2
s(239) =< -4*A+4*B+2
aux(44) =< -2*A+B+2
it(72) =< -A+B
s(240) =< -A+B+1
s(241) =< -A+B+3/2
aux(65) =< -A+B+E
aux(60) =< -A/2+B/2+E
aux(44) =< B-2*E+2
s(239) =< 2*B
it(72) =< B/2
aux(66) =< E
aux(77) =< -2*A+2*B+2
aux(78) =< A
aux(79) =< A+1
aux(80) =< B
aux(81) =< F
aux(47) =< aux(78)
aux(47) =< aux(81)
it(72) =< aux(65)
it(73) =< aux(65)
it(72) =< aux(78)
it(73) =< aux(78)
it(72) =< aux(66)
it(73) =< aux(66)
aux(44) =< aux(80)
it(72) =< aux(80)
it(73) =< aux(80)
it(72) =< aux(60)
it(73) =< aux(60)
it(72) =< aux(81)
it(73) =< aux(81)
aux(53) =< aux(80)+2
aux(53) =< aux(79)
aux(49) =< aux(47)+2
aux(48) =< aux(47)+1
aux(50) =< aux(47)
aux(44) =< aux(80)-2
aux(42) =< aux(80)+1
aux(39) =< aux(77)* (1/2)+1
aux(38) =< aux(77)* (1/2)-1
aux(37) =< aux(77)+1
s(219) =< it(72)*aux(47)
aux(45) =< it(72)*aux(80)
s(193) =< it(72)*aux(80)
s(209) =< it(72)*aux(79)
s(216) =< it(72)*aux(77)
s(220) =< it(73)*aux(53)
s(223) =< it(73)*aux(49)
s(222) =< it(73)*aux(48)
s(221) =< it(73)*aux(50)
s(217) =< it(72)*aux(49)
s(218) =< it(72)*aux(48)
aux(46) =< it(72)*aux(42)
s(206) =< aux(45)* (1/3)
s(210) =< it(72)*aux(44)
s(212) =< it(72)*aux(42)
s(215) =< it(72)*aux(39)
s(192) =< it(72)*aux(38)
s(212) =< it(72)*aux(37)
s(207) =< aux(46)* (1/3)
s(194) =< s(219)
s(195) =< s(218)
s(196) =< s(217)
s(192) =< aux(45)
s(211) =< s(216)
s(214) =< s(216)
s(214) =< s(215)
s(213) =< s(215)
s(213) =< s(209)
s(197) =< s(209)
s(211) =< aux(45)
s(197) =< aux(45)
s(192) =< s(214)
s(198) =< s(214)
s(199) =< s(214)
s(200) =< s(213)
s(198) =< s(213)
s(198) =< s(211)
s(201) =< s(211)
s(199) =< s(211)
s(200) =< s(212)
s(198) =< s(212)
s(200) =< s(211)
s(193) =< s(210)
s(193) =< aux(45)
s(202) =< s(210)
s(203) =< s(210)
s(204) =< s(209)
s(202) =< s(209)
s(202) =< aux(45)
s(205) =< aux(45)
s(203) =< aux(45)
s(204) =< s(207)
s(202) =< s(207)
s(204) =< s(206)
s(202) =< s(206)
s(239) =< aux(77)
s(245) =< aux(77)
s(246) =< aux(79)
s(240) =< aux(80)
s(245) =< aux(80)
s(246) =< aux(80)
s(247) =< aux(79)
s(248) =< aux(79)
s(248) =< s(245)
s(249) =< s(245)
s(247) =< s(241)
s(248) =< s(241)
s(247) =< s(240)
s(248) =< s(240)

  with precondition: [D=0,H=1,I=0,C>=0,E>=3,G>=0,J>=0,B>=A,A>=E,F+1>=E] 

* Chain [74,77]: 8*s(237)+5*s(238)+10*s(239)+5*s(246)+27*s(247)+24*s(248)+10*s(249)+43
  Such that:s(237) =< 1
s(238) =< 2
s(239) =< -4*A+4*B+2
s(244) =< -2*A+2*B+2
s(240) =< -A+B+1
s(241) =< -A+B+3/2
s(242) =< A+1
s(243) =< B
s(239) =< 2*B
s(239) =< s(244)
s(245) =< s(244)
s(246) =< s(242)
s(240) =< s(243)
s(245) =< s(243)
s(246) =< s(243)
s(247) =< s(242)
s(248) =< s(242)
s(248) =< s(245)
s(249) =< s(245)
s(247) =< s(241)
s(248) =< s(241)
s(247) =< s(240)
s(248) =< s(240)

  with precondition: [D=0,E=2,H=1,I=0,A>=3,C>=0,F>=1,G>=0,J>=0,B>=A] 


#### Simplifying cost structure of CE 81 
 * Renamed intermediate variables: 
[ (eq(79,1),s(252))>>s(456), (eq(79,1),s(254))>>s(457), (eq(79,1),s(255))>>s(458), (eq(79,1),s(268))>>s(459), (eq(79,1),s(269))>>s(460), (eq(79,1),aux(82))>>s(461), (eq(79,1),aux(83))>>s(462), (eq(79,1),aux(84))>>s(463), (eq(79,1),aux(85))>>s(464), (eq(79,1),aux(86))>>s(465), (eq(79,1),s(250))>>s(466), (eq(79,1),s(251))>>s(467), (eq(79,1),s(265))>>s(468), (eq(79,1),s(275))>>s(469), (eq(79,1),s(258))>>s(470), (eq(79,1),s(259))>>s(471), (eq(79,1),s(260))>>s(472), (eq(79,1),s(261))>>s(473), (eq(79,1),s(262))>>s(474), (eq(79,1),s(270))>>s(475), (eq(79,1),s(271))>>s(476), (eq(79,1),s(272))>>s(477)]

#### Simplifying cost structure of CE 79 
 * Joined equivalent variables [aux(101),s(458),s(465)] into aux(101)
 * Joined equivalent variables [aux(102),s(463)] into aux(102)
 * Joined equivalent variables [aux(101),s(457)] into aux(101)
 * Joined equivalent variables [s(471),s(472)] into s(471)
 * Renamed intermediate variables: 
[ (eq(80,1),s(278))>>s(478), (eq(80,1),s(281))>>s(479), (eq(80,1),s(282))>>s(480), (eq(80,1),s(404))>>s(481), (eq(80,1),s(344))>>s(482), (eq(80,1),aux(87))>>s(483), (eq(80,1),aux(88))>>s(484), (eq(80,1),aux(89))>>s(485), (eq(80,1),aux(90))>>s(486), (eq(80,1),aux(91))>>s(487), (eq(80,1),aux(92))>>s(488), (eq(80,1),aux(93))>>s(489), (eq(80,1),aux(94))>>s(490), (eq(80,1),aux(95))>>s(491), (eq(80,1),aux(96))>>s(492), (eq(80,1),aux(97))>>s(493), (eq(80,1),aux(98))>>s(494), (eq(80,1),aux(99))>>s(495), (eq(80,1),aux(100))>>s(496), (eq(80,1),s(276))>>s(497), (eq(80,1),s(277))>>s(498), (eq(80,1),s(279))>>s(499), (eq(80,1),s(341))>>s(500), (eq(80,1),s(280))>>s(501), (eq(80,1),s(291))>>s(502), (eq(80,1),s(292))>>s(503), (eq(80,1),s(293))>>s(504), (eq(80,1),s(294))>>s(505), (eq(80,1),s(295))>>s(506), (eq(80,1),s(296))>>s(507), (eq(80,1),s(297))>>s(508), (eq(80,1),s(298))>>s(509), (eq(80,1),s(299))>>s(510), (eq(80,1),s(300))>>s(511), (eq(80,1),s(301))>>s(512), (eq(80,1),s(302))>>s(513), (eq(80,1),s(303))>>s(514), (eq(80,1),s(304))>>s(515), (eq(80,1),s(305))>>s(516), (eq(80,1),s(306))>>s(517), (eq(80,1),s(307))>>s(518), (eq(80,1),s(308))>>s(519), (eq(80,1),s(309))>>s(520), (eq(80,1),s(310))>>s(521), (eq(80,1),s(311))>>s(522), (eq(80,1),s(312))>>s(523), (eq(80,1),s(313))>>s(524), (eq(80,1),s(314))>>s(525), (eq(80,1),s(315))>>s(526), (eq(80,1),s(316))>>s(527), (eq(80,1),s(317))>>s(528), (eq(80,1),s(318))>>s(529), (eq(80,1),s(319))>>s(530), (eq(80,1),s(320))>>s(531), (eq(80,1),s(321))>>s(532), (eq(80,1),s(322))>>s(533), (eq(80,1),s(323))>>s(534), (eq(80,1),s(324))>>s(535), (eq(80,1),s(325))>>s(536), (eq(80,1),s(326))>>s(537), (eq(80,1),s(327))>>s(538), (eq(80,1),s(328))>>s(539), (eq(80,1),s(329))>>s(540), (eq(80,1),s(330))>>s(541), (eq(80,1),s(331))>>s(542), (eq(80,1),s(332))>>s(543), (eq(80,1),s(333))>>s(544), (eq(80,1),s(334))>>s(545), (eq(80,1),s(335))>>s(546), (eq(80,1),s(336))>>s(547), (eq(80,1),s(337))>>s(548), (eq(80,1),s(338))>>s(549), (eq(80,1),s(352))>>s(550), (eq(80,1),s(354))>>s(551), (eq(80,1),s(364))>>s(552), (eq(80,1),s(365))>>s(553), (eq(80,1),s(366))>>s(554), (eq(80,1),s(367))>>s(555), (eq(80,1),s(368))>>s(556), (eq(80,1),s(373))>>s(557), (eq(80,1),s(374))>>s(558), (eq(80,1),s(375))>>s(559), (eq(80,1),s(376))>>s(560), (eq(80,1),s(377))>>s(561), (eq(80,1),s(378))>>s(562), (eq(80,1),s(379))>>s(563), (eq(80,1),s(380))>>s(564), (eq(80,1),s(381))>>s(565), (eq(80,1),s(382))>>s(566), (eq(80,1),s(383))>>s(567), (eq(80,1),s(384))>>s(568), (eq(80,1),s(385))>>s(569), (eq(80,1),s(386))>>s(570), (eq(80,1),s(387))>>s(571), (eq(80,1),s(388))>>s(572), (eq(80,1),s(389))>>s(573), (eq(80,1),s(390))>>s(574), (eq(80,1),s(391))>>s(575), (eq(80,1),s(392))>>s(576), (eq(80,1),s(393))>>s(577), (eq(80,1),s(394))>>s(578), (eq(80,1),s(395))>>s(579), (eq(80,1),s(396))>>s(580), (eq(80,1),s(397))>>s(581), (eq(80,1),s(398))>>s(582), (eq(80,1),s(399))>>s(583), (eq(80,1),s(413))>>s(584), (eq(80,1),s(423))>>s(585), (eq(80,1),s(424))>>s(586), (eq(80,1),s(425))>>s(587), (eq(80,1),s(426))>>s(588), (eq(80,1),s(427))>>s(589), (eq(80,1),s(432))>>s(590), (eq(80,1),s(433))>>s(591), (eq(80,1),s(434))>>s(592), (eq(80,1),s(435))>>s(593), (eq(80,1),s(436))>>s(594), (eq(80,1),s(437))>>s(595), (eq(80,1),s(438))>>s(596), (eq(80,1),s(439))>>s(597), (eq(80,1),s(440))>>s(598), (eq(80,1),s(441))>>s(599), (eq(80,1),s(442))>>s(600), (eq(80,1),s(443))>>s(601), (eq(80,1),s(444))>>s(602), (eq(80,1),s(445))>>s(603), (eq(80,1),s(446))>>s(604), (eq(80,1),s(447))>>s(605), (eq(80,1),s(448))>>s(606), (eq(80,1),s(449))>>s(607), (eq(80,1),s(450))>>s(608), (eq(80,1),s(451))>>s(609), (eq(80,1),s(452))>>s(610), (eq(80,1),s(453))>>s(611), (eq(80,1),s(454))>>s(612), (eq(80,1),s(455))>>s(613)]

#### Simplifying cost structure of CE 80 
 * Joined equivalent variables [aux(105),s(489),s(495)] into aux(105)
 * Joined equivalent variables [aux(106),s(488),s(492),s(496)] into aux(106)
 * Joined equivalent variables [s(485),s(493)] into s(485)
 * Joined equivalent variables [s(499),s(500)] into s(499)

#### Cost of chains of echelon_form(A,B,C,D,E,F):
* Chain [80]: 5
  with precondition: [A=1,B=0,D=1,E=0,C>=0,F>=0] 

* Chain [79]: 10*s(456)+24*s(466)+15*s(467)+10*s(468)+5*s(469)+32*s(471)+24*s(473)+10*s(474)+27*s(475)+24*s(476)+10*s(477)+45
  Such that:s(461) =< 1
s(462) =< 2
s(464) =< 3
s(456) =< 4*B
s(459) =< B/2
s(460) =< B/2+1/2
aux(101) =< B
aux(102) =< 2*B
s(456) =< aux(102)
s(466) =< s(461)
s(467) =< s(462)
s(468) =< aux(102)
s(469) =< s(464)
s(470) =< aux(102)
s(471) =< s(464)
s(470) =< aux(101)
s(471) =< aux(101)
s(473) =< s(464)
s(473) =< s(470)
s(474) =< s(470)
s(473) =< aux(101)
s(475) =< s(464)
s(476) =< s(464)
s(476) =< aux(101)
s(477) =< aux(101)
s(475) =< s(460)
s(476) =< s(460)
s(475) =< s(459)
s(476) =< s(459)

  with precondition: [A=2,D=1,E=0,B>=1,C>=0,F>=0] 

* Chain [78]: 10*s(478)+40*s(481)+24*s(497)+15*s(498)+40*s(501)+120*s(503)+10*s(514)+15*s(517)+15*s(518)+24*s(519)+24*s(520)+10*s(528)+16*s(530)+16*s(531)+10*s(532)+5*s(536)+24*s(537)+10*s(538)+27*s(539)+20*s(540)+24*s(541)+10*s(542)+27*s(543)+20*s(544)+5*s(546)+27*s(547)+24*s(548)+10*s(549)+10*s(550)+40*s(551)+10*s(554)+10*s(564)+16*s(566)+16*s(567)+10*s(568)+5*s(572)+24*s(573)+10*s(574)+27*s(575)+20*s(576)+24*s(577)+10*s(578)+27*s(579)+20*s(580)+27*s(581)+24*s(582)+10*s(583)+5*s(584)+10*s(587)+10*s(597)+16*s(599)+16*s(600)+10*s(601)+5*s(605)+24*s(606)+10*s(607)+27*s(608)+20*s(609)+24*s(610)+10*s(611)+27*s(612)+20*s(613)+45
  Such that:s(483) =< 1
s(484) =< 2
s(478) =< -4*A+4*B+2
s(486) =< -2*A+2*B+2
s(479) =< -A+B+1
s(480) =< -A+B+3/2
s(490) =< A+1
s(491) =< A/2+B/2
s(478) =< 2*B
s(478) =< 4*B
s(494) =< B/2
s(482) =< B/2+1/2
aux(103) =< -2*A+B+2
aux(104) =< -A+B
aux(105) =< A
aux(106) =< B
s(485) =< aux(103)
s(481) =< aux(104)
s(487) =< aux(104)
s(481) =< aux(106)
s(485) =< aux(106)
s(487) =< aux(106)
s(497) =< s(483)
s(498) =< s(484)
s(499) =< s(485)
s(501) =< s(487)
s(481) =< s(487)
s(501) =< s(494)
s(481) =< s(494)
s(502) =< aux(105)
s(502) =< aux(106)
s(501) =< aux(106)
s(503) =< aux(106)
s(501) =< aux(105)
s(503) =< aux(105)
s(499) =< aux(106)
s(501) =< s(491)
s(503) =< s(491)
s(504) =< aux(106)+2
s(504) =< s(490)
s(505) =< s(502)+2
s(506) =< s(502)+1
s(507) =< s(502)
s(499) =< aux(106)-2
s(508) =< aux(106)+1
s(509) =< s(486)* (1/2)+1
s(510) =< s(486)* (1/2)-1
s(511) =< s(486)+1
s(512) =< s(501)*s(502)
s(513) =< s(501)*aux(106)
s(514) =< s(501)*aux(106)
s(515) =< s(501)*s(490)
s(516) =< s(501)*s(486)
s(517) =< s(503)*s(504)
s(518) =< s(503)*s(505)
s(519) =< s(503)*s(506)
s(520) =< s(503)*s(507)
s(521) =< s(501)*s(505)
s(522) =< s(501)*s(506)
s(523) =< s(501)*s(508)
s(524) =< s(513)* (1/3)
s(525) =< s(501)*s(499)
s(526) =< s(501)*s(508)
s(527) =< s(501)*s(509)
s(528) =< s(501)*s(510)
s(526) =< s(501)*s(511)
s(529) =< s(523)* (1/3)
s(530) =< s(512)
s(531) =< s(522)
s(532) =< s(521)
s(528) =< s(513)
s(533) =< s(516)
s(534) =< s(516)
s(534) =< s(527)
s(535) =< s(527)
s(535) =< s(515)
s(536) =< s(515)
s(533) =< s(513)
s(536) =< s(513)
s(528) =< s(534)
s(537) =< s(534)
s(538) =< s(534)
s(539) =< s(535)
s(537) =< s(535)
s(537) =< s(533)
s(540) =< s(533)
s(538) =< s(533)
s(539) =< s(526)
s(537) =< s(526)
s(539) =< s(533)
s(514) =< s(525)
s(514) =< s(513)
s(541) =< s(525)
s(542) =< s(525)
s(543) =< s(515)
s(541) =< s(515)
s(541) =< s(513)
s(544) =< s(513)
s(542) =< s(513)
s(543) =< s(529)
s(541) =< s(529)
s(543) =< s(524)
s(541) =< s(524)
s(478) =< s(486)
s(545) =< s(486)
s(546) =< s(490)
s(479) =< aux(106)
s(545) =< aux(106)
s(546) =< aux(106)
s(547) =< s(490)
s(548) =< s(490)
s(548) =< s(545)
s(549) =< s(545)
s(547) =< s(480)
s(548) =< s(480)
s(547) =< s(479)
s(548) =< s(479)
s(550) =< s(486)
s(551) =< s(494)
s(551) =< aux(106)
s(551) =< aux(105)
s(551) =< s(491)
s(552) =< s(551)*s(502)
s(553) =< s(551)*aux(106)
s(554) =< s(551)*aux(106)
s(555) =< s(551)*s(490)
s(556) =< s(551)*s(486)
s(557) =< s(551)*s(505)
s(558) =< s(551)*s(506)
s(559) =< s(551)*s(508)
s(560) =< s(553)* (1/3)
s(561) =< s(551)*s(499)
s(562) =< s(551)*s(508)
s(563) =< s(551)*s(509)
s(564) =< s(551)*s(510)
s(562) =< s(551)*s(511)
s(565) =< s(559)* (1/3)
s(566) =< s(552)
s(567) =< s(558)
s(568) =< s(557)
s(564) =< s(553)
s(569) =< s(556)
s(570) =< s(556)
s(570) =< s(563)
s(571) =< s(563)
s(571) =< s(555)
s(572) =< s(555)
s(569) =< s(553)
s(572) =< s(553)
s(564) =< s(570)
s(573) =< s(570)
s(574) =< s(570)
s(575) =< s(571)
s(573) =< s(571)
s(573) =< s(569)
s(576) =< s(569)
s(574) =< s(569)
s(575) =< s(562)
s(573) =< s(562)
s(575) =< s(569)
s(554) =< s(561)
s(554) =< s(553)
s(577) =< s(561)
s(578) =< s(561)
s(579) =< s(555)
s(577) =< s(555)
s(577) =< s(553)
s(580) =< s(553)
s(578) =< s(553)
s(579) =< s(565)
s(577) =< s(565)
s(579) =< s(560)
s(577) =< s(560)
s(581) =< s(490)
s(582) =< s(490)
s(582) =< aux(106)
s(583) =< aux(106)
s(581) =< s(482)
s(582) =< s(482)
s(581) =< s(494)
s(582) =< s(494)
s(584) =< s(490)
s(481) =< aux(105)
s(481) =< s(491)
s(585) =< s(481)*s(502)
s(586) =< s(481)*aux(106)
s(587) =< s(481)*aux(106)
s(588) =< s(481)*s(490)
s(589) =< s(481)*s(486)
s(590) =< s(481)*s(505)
s(591) =< s(481)*s(506)
s(592) =< s(481)*s(508)
s(593) =< s(586)* (1/3)
s(594) =< s(481)*s(499)
s(595) =< s(481)*s(508)
s(596) =< s(481)*s(509)
s(597) =< s(481)*s(510)
s(595) =< s(481)*s(511)
s(598) =< s(592)* (1/3)
s(599) =< s(585)
s(600) =< s(591)
s(601) =< s(590)
s(597) =< s(586)
s(602) =< s(589)
s(603) =< s(589)
s(603) =< s(596)
s(604) =< s(596)
s(604) =< s(588)
s(605) =< s(588)
s(602) =< s(586)
s(605) =< s(586)
s(597) =< s(603)
s(606) =< s(603)
s(607) =< s(603)
s(608) =< s(604)
s(606) =< s(604)
s(606) =< s(602)
s(609) =< s(602)
s(607) =< s(602)
s(608) =< s(595)
s(606) =< s(595)
s(608) =< s(602)
s(587) =< s(594)
s(587) =< s(586)
s(610) =< s(594)
s(611) =< s(594)
s(612) =< s(588)
s(610) =< s(588)
s(610) =< s(586)
s(613) =< s(586)
s(611) =< s(586)
s(612) =< s(598)
s(610) =< s(598)
s(612) =< s(593)
s(610) =< s(593)

  with precondition: [D=1,E=0,A>=3,C>=0,F>=0,B+1>=A] 


#### Simplifying cost structure of CE 82 

#### Computing cost of phase [81] 

#### Simplifying cost structure of CE 83 

#### Cost of loops [81] 

 * loop 81:sizeL(A,B,C,D,E,F,G) -> [sizeL(A',B',C',D',E',F',G')] 
6
##### Pending set sizeL(A,B,C,D,E,F,G)
* Psum in Loop 81: [it(81)=<1]

###### Computing sum for it(81)=<1  in Loop 81 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
     - head Candidate: A-1 
     - head Candidate: E+1 
     - head Candidate: B+1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: E+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
     - tail Candidate: A-1 
     - tail Candidate: E+1 
     - tail Candidate: B+1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(81)=<D-1,it(81)=<A-1,it(81)=<E+1,it(81)=<B+1,it(81)=<A-1,it(81)=<B+1,it(81)=<D-1,it(81)=<E+1,it(81)=<D-D',it(81)=<A-A',it(81)=<E-E',it(81)=<B-B',it(81)=<A-A',it(81)=<B-B',it(81)=<D-D',it(81)=<E-E'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [81] 

#### Simplifying cost structure of phase [81] 

#### Cost of phase [81]:sizeL(A,B,C,D,E,F,G) -> [sizeL(A',B',C',D',E',F',G')] 
6*it(81)+0
  Such that:it(81) =< A
it(81) =< A-A'
it(81) =< B+1
it(81) =< B-B'
it(81) =< D
it(81) =< D-D'
it(81) =< E+1
it(81) =< E-E'

#### Simplifying cost structure of chain [[81],82] 

#### Cost of chains of sizeL(A,B,C,D,E,F,G):
* Chain [[81],82]: 6*it(81)+3
  Such that:it(81) =< G

  with precondition: [A=D,A=F+1,A=G+1,A>=2,C>=0,B+1>=A,E+1>=A] 

* Chain [82]: 3
  with precondition: [A=1,B=0,D=1,E=0,F=0,G=0,C>=0] 

 * Renamed intermediate variables: 
[ (eq(85,1),it(81))>>s(614)]

#### Simplifying cost structure of CE 85 

#### Computing cost of phase [83,84] 
 * Renamed intermediate variables: 
[ (eq(90,1),it(81))>>s(615)]
 * Renamed intermediate variables: 
[ (eq(90,2),aux(28))>>s(616), (eq(90,2),s(116))>>s(617), (eq(90,2),s(114))>>s(618), (eq(90,2),s(115))>>s(619), (eq(90,2),s(117))>>s(620), (eq(90,2),s(102))>>s(621), (eq(90,2),s(105))>>s(622), (eq(90,2),s(106))>>s(623), (eq(90,2),aux(31))>>s(624), (eq(90,2),aux(32))>>s(625), (eq(90,2),aux(33))>>s(626), (eq(90,2),aux(34))>>s(627), (eq(90,2),aux(35))>>s(628), (eq(90,2),s(98))>>s(629), (eq(90,2),s(99))>>s(630), (eq(90,2),s(100))>>s(631), (eq(90,2),s(120))>>s(632), (eq(90,2),s(121))>>s(633), (eq(90,2),s(122))>>s(634), (eq(90,2),s(123))>>s(635), (eq(90,2),s(124))>>s(636), (eq(90,2),s(125))>>s(637), (eq(90,2),s(126))>>s(638), (eq(90,2),s(127))>>s(639), (eq(90,2),s(107))>>s(640), (eq(90,2),s(108))>>s(641), (eq(90,2),s(109))>>s(642), (eq(90,2),s(110))>>s(643)]

#### Simplifying cost structure of CE 90 
 * Joined equivalent variables [aux(107),s(626),s(627)] into aux(107)
 * Joined equivalent variables [s(629),s(630)] into s(629)
 * Renamed intermediate variables: 
[ (it(83),s(617))>>s(644), (it(83),s(618))>>s(645), (it(83),s(619))>>s(646), (it(83),s(620))>>s(647), (it(83),s(615))>>s(648), (it(83),s(624))>>s(649), (it(83),s(625))>>s(650), (it(83),s(616))>>s(651), (it(83),s(621))>>s(652), (it(83),s(622))>>s(653), (it(83),s(623))>>s(654), (it(83),s(628))>>s(655), (it(83),aux(107))>>s(656), (it(83),s(629))>>s(657), (it(83),s(631))>>s(658), (it(83),s(632))>>s(659), (it(83),s(633))>>s(660), (it(83),s(634))>>s(661), (it(83),s(635))>>s(662), (it(83),s(636))>>s(663), (it(83),s(637))>>s(664), (it(83),s(638))>>s(665), (it(83),s(639))>>s(666), (it(83),s(640))>>s(667), (it(83),s(641))>>s(668), (it(83),s(642))>>s(669), (it(83),s(643))>>s(670)]
 * Renamed intermediate variables: 
[ (eq(89,1),it(81))>>s(671)]
 * Renamed intermediate variables: 
[ (eq(89,2),s(97))>>s(672), (eq(89,2),s(94))>>s(673), (eq(89,2),s(95))>>s(674), (eq(89,2),s(96))>>s(675)]

#### Simplifying cost structure of CE 89 
 * Joined equivalent variables [s(673),s(674)] into s(673)
 * Renamed intermediate variables: 
[ (it(84),s(671))>>s(676), (it(84),s(672))>>s(677), (it(84),s(675))>>s(678), (it(84),aux(108))>>s(679), (it(84),s(673))>>s(680)]

#### Cost of loops [83,84] 

 * loop 83:echelon_helper_old(A,B,C,D,E,F,G) -> [echelon_helper_old(A',B',C',D',E',F',G')] 
6*s(648)+10*s(646)+10*s(652)+32*s(657)+10*s(658)+5*s(662)+24*s(663)+10*s(664)+27*s(665)+20*s(666)+24*s(667)+10*s(668)+27*s(669)+20*s(670)+43
  Such that:s(644) =< -2*A+2*B+2
s(645) =< -2*A+2*B+3
s(646) =< -A+B
s(647) =< -A+B+2
s(648) =< A
s(649) =< A+1
s(650) =< B
s(645) =< B+1
s(651) =< B-2*A'+2
s(652) =< B-2*D'+2
s(653) =< B/3
s(654) =< B/3+1/3
s(655) =< D'+1
s(656) =< D'
s(657) =< s(656)
s(658) =< s(655)
s(646) =< s(650)
s(659) =< s(644)
s(660) =< s(644)
s(660) =< s(647)
s(661) =< s(647)
s(661) =< s(649)
s(662) =< s(649)
s(659) =< s(650)
s(662) =< s(650)
s(646) =< s(660)
s(663) =< s(660)
s(664) =< s(660)
s(665) =< s(661)
s(663) =< s(661)
s(663) =< s(659)
s(666) =< s(659)
s(664) =< s(659)
s(665) =< s(645)
s(663) =< s(645)
s(665) =< s(659)
s(652) =< s(651)
s(652) =< s(650)
s(667) =< s(651)
s(668) =< s(651)
s(669) =< s(649)
s(667) =< s(649)
s(667) =< s(650)
s(670) =< s(650)
s(668) =< s(650)
s(669) =< s(654)
s(667) =< s(654)
s(669) =< s(653)
s(667) =< s(653)

 * loop 84:echelon_helper_old(A,B,C,D,E,F,G) -> [echelon_helper_old(A',B',C',D',E',F',G')] 
6*s(676)+5*s(677)+16*s(680)+5*s(678)+43
  Such that:s(676) =< A
s(677) =< A+1
s(678) =< D'+1
s(679) =< D'
s(680) =< s(679)

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 83: [it(83)=<1,s(705)=< -2*A+2*B+2,s(701)=< -2*A+2*B+3,s(682)=< -A+B,s(704)=< -A+B+2,s(681)=<A,s(698)=<A+1,s(697)=<B,s(701)=<B+1,s(699)=<B-2*A'+2,s(683)=<B-2*D'+2,s(695)=<B/3,s(696)=<B/3+1/3,s(707)=<D',s(706)=<D'+1]
* Psum in Loop 84: [it(84)=<1,s(708)=<A,s(709)=<A+1,s(712)=<D',s(711)=<D'+1]

###### Computing sum for it(83)=<1  in Loop 83 
   - Applying inductive sum strategy 
     - head Candidate: B-D 
       - Loop 84 is collaborative and bounds [it(84)] 
     - head Candidate: A-D-1 
       - Loop 84 is collaborative and bounds [it(84)] 
     - head Candidate: A-D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B/2-D-1/2 
       - Loop 84 is collaborative
     - head Candidate: -A+B-D+1 
       - Loop 84 is collaborative
     - tail Candidate: B-D 
       - Loop 84 is collaborative and bounds [it(84)] 
     - tail Candidate: A-D-1 
       - Loop 84 is collaborative and bounds [it(84)] 
     - tail Candidate: A-D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B/2-D-1/2 
       - Loop 84 is collaborative and bounds [it(84)] 
     - tail Candidate: -A+B-D+1 
       - Loop 84 is collaborative and bounds [it(84)] 
 * Adding constraints: [it(83)+it(84)=<B-D,it(83)+it(84)=<A-D-1,it(83)+it(84)=<A-D-1,it(83)=<B/2-D-1/2,it(83)=< -A+B-D+1,it(83)+it(84)=<B-D-B'+D',it(83)+it(84)=<A-D-A'+D',it(83)+it(84)=<A-D-A'+D',it(83)+it(84)=<B/2-D-B'/2+D',it(83)+it(84)=< -A+B-D+A'-B'+D'] 

##### Pending set A
* Psum in Loop 83: [s(705)=< -2*A+2*B+2,s(701)=< -2*A+2*B+3,s(682)=< -A+B,s(704)=< -A+B+2,s(681)=<A,s(698)=<A+1,s(697)=<B,s(701)=<B+1,s(699)=<B-2*A'+2,s(683)=<B-2*D'+2,s(695)=<B/3,s(696)=<B/3+1/3,s(707)=<D',s(706)=<D'+1]
* Psum in Loop 84: [it(84)=<1,s(708)=<A,s(709)=<A+1,s(712)=<D',s(711)=<D'+1]

###### Computing sum for s(705)=< -2*A+2*B+2  in Loop 83 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(109)=< -2*A+2*B+2] 
 * Adding constraints: [s(705)=<it(83)*aux(109)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(109)=< -2*A+2*B+2]
* Psum in Loop 83: [s(701)=< -2*A+2*B+3,s(682)=< -A+B,s(704)=< -A+B+2,s(681)=<A,s(698)=<A+1,s(697)=<B,s(701)=<B+1,s(699)=<B-2*A'+2,s(683)=<B-2*D'+2,s(695)=<B/3,s(696)=<B/3+1/3,s(707)=<D',s(706)=<D'+1]
* Psum in Loop 84: [it(84)=<1,s(708)=<A,s(709)=<A+1,s(712)=<D',s(711)=<D'+1]

###### Computing max_min for aux(109)=< -2*A+2*B+2  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(109)=< -2*A+2*B+2,aux(109)=<2*B-2*D-2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 83: [s(701)=< -2*A+2*B+3,s(682)=< -A+B,s(704)=< -A+B+2,s(681)=<A,s(698)=<A+1,s(697)=<B,s(701)=<B+1,s(699)=<B-2*A'+2,s(683)=<B-2*D'+2,s(695)=<B/3,s(696)=<B/3+1/3,s(707)=<D',s(706)=<D'+1]
* Psum in Loop 84: [it(84)=<1,s(708)=<A,s(709)=<A+1,s(712)=<D',s(711)=<D'+1]

###### Computing sum for s(701)=< -2*A+2*B+3  in Loop 83 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(110)=< -2*A+2*B+3] 
 * Adding constraints: [s(701)=<it(83)*aux(110)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(110)=< -2*A+2*B+3]
* Psum in Loop 83: [s(682)=< -A+B,s(704)=< -A+B+2,s(681)=<A,s(698)=<A+1,s(697)=<B,s(701)=<B+1,s(699)=<B-2*A'+2,s(683)=<B-2*D'+2,s(695)=<B/3,s(696)=<B/3+1/3,s(707)=<D',s(706)=<D'+1]
* Psum in Loop 84: [it(84)=<1,s(708)=<A,s(709)=<A+1,s(712)=<D',s(711)=<D'+1]

###### Computing max_min for aux(110)=< -2*A+2*B+3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(110)=<aux(109)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 83: [s(682)=< -A+B,s(704)=< -A+B+2,s(681)=<A,s(698)=<A+1,s(697)=<B,s(701)=<B+1,s(699)=<B-2*A'+2,s(683)=<B-2*D'+2,s(695)=<B/3,s(696)=<B/3+1/3,s(707)=<D',s(706)=<D'+1]
* Psum in Loop 84: [it(84)=<1,s(708)=<A,s(709)=<A+1,s(712)=<D',s(711)=<D'+1]

###### Computing sum for s(682)=< -A+B  in Loop 83 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(111)=< -A+B] 
 * Adding constraints: [s(682)=<it(83)*aux(111)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(111)=< -A+B]
* Psum in Loop 83: [s(704)=< -A+B+2,s(681)=<A,s(698)=<A+1,s(697)=<B,s(701)=<B+1,s(699)=<B-2*A'+2,s(683)=<B-2*D'+2,s(695)=<B/3,s(696)=<B/3+1/3,s(707)=<D',s(706)=<D'+1]
* Psum in Loop 84: [it(84)=<1,s(708)=<A,s(709)=<A+1,s(712)=<D',s(711)=<D'+1]

###### Computing max_min for aux(111)=< -A+B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(111)=<aux(109)* (1/2)-1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 83: [s(704)=< -A+B+2,s(681)=<A,s(698)=<A+1,s(697)=<B,s(701)=<B+1,s(699)=<B-2*A'+2,s(683)=<B-2*D'+2,s(695)=<B/3,s(696)=<B/3+1/3,s(707)=<D',s(706)=<D'+1]
* Psum in Loop 84: [it(84)=<1,s(708)=<A,s(709)=<A+1,s(712)=<D',s(711)=<D'+1]

###### Computing sum for s(704)=< -A+B+2  in Loop 83 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(112)=< -A+B+2] 
 * Adding constraints: [s(704)=<it(83)*aux(112)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(112)=< -A+B+2]
* Psum in Loop 83: [s(681)=<A,s(698)=<A+1,s(697)=<B,s(701)=<B+1,s(699)=<B-2*A'+2,s(683)=<B-2*D'+2,s(695)=<B/3,s(696)=<B/3+1/3,s(707)=<D',s(706)=<D'+1]
* Psum in Loop 84: [it(84)=<1,s(708)=<A,s(709)=<A+1,s(712)=<D',s(711)=<D'+1]

###### Computing max_min for aux(112)=< -A+B+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(112)=<aux(109)* (1/2)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 83: [s(681)=<A,s(698)=<A+1,s(697)=<B,s(701)=<B+1,s(699)=<B-2*A'+2,s(683)=<B-2*D'+2,s(695)=<B/3,s(696)=<B/3+1/3,s(707)=<D',s(706)=<D'+1]
* Psum in Loop 84: [it(84)=<1,s(708)=<A,s(709)=<A+1,s(712)=<D',s(711)=<D'+1]

###### Computing sum for s(681)=<A  in Loop 83 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(113)=<A] 
 * Adding constraints: [s(681)=<it(83)*aux(113)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(113)=<A]
* Psum in Loop 83: [s(698)=<A+1,s(697)=<B,s(701)=<B+1,s(699)=<B-2*A'+2,s(683)=<B-2*D'+2,s(695)=<B/3,s(696)=<B/3+1/3,s(707)=<D',s(706)=<D'+1]
* Psum in Loop 84: [it(84)=<1,s(708)=<A,s(709)=<A+1,s(712)=<D',s(711)=<D'+1]

###### Computing max_min for aux(113)=<A  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(113)=<A,aux(113)=<B+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 83: [s(698)=<A+1,s(697)=<B,s(701)=<B+1,s(699)=<B-2*A'+2,s(683)=<B-2*D'+2,s(695)=<B/3,s(696)=<B/3+1/3,s(707)=<D',s(706)=<D'+1]
* Psum in Loop 84: [it(84)=<1,s(708)=<A,s(709)=<A+1,s(712)=<D',s(711)=<D'+1]

###### Computing sum for s(698)=<A+1  in Loop 83 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(114)=<A+1] 
 * Adding constraints: [s(698)=<it(83)*aux(114)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(114)=<A+1]
* Psum in Loop 83: [s(697)=<B,s(701)=<B+1,s(699)=<B-2*A'+2,s(683)=<B-2*D'+2,s(695)=<B/3,s(696)=<B/3+1/3,s(707)=<D',s(706)=<D'+1]
* Psum in Loop 84: [it(84)=<1,s(708)=<A,s(709)=<A+1,s(712)=<D',s(711)=<D'+1]

###### Computing max_min for aux(114)=<A+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(114)=<aux(113)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 83: [s(697)=<B,s(701)=<B+1,s(699)=<B-2*A'+2,s(683)=<B-2*D'+2,s(695)=<B/3,s(696)=<B/3+1/3,s(707)=<D',s(706)=<D'+1]
* Psum in Loop 84: [it(84)=<1,s(708)=<A,s(709)=<A+1,s(712)=<D',s(711)=<D'+1]

###### Computing sum for s(697)=<B  in Loop 83 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(115)=<B] 
 * Adding constraints: [s(697)=<it(83)*aux(115)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(115)=<B]
* Psum in Loop 83: [s(701)=<B+1,s(699)=<B-2*A'+2,s(683)=<B-2*D'+2,s(695)=<B/3,s(696)=<B/3+1/3,s(707)=<D',s(706)=<D'+1]
* Psum in Loop 84: [it(84)=<1,s(708)=<A,s(709)=<A+1,s(712)=<D',s(711)=<D'+1]

###### Computing max_min for aux(115)=<B  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(115)=<B] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 83: [s(701)=<B+1,s(699)=<B-2*A'+2,s(683)=<B-2*D'+2,s(695)=<B/3,s(696)=<B/3+1/3,s(707)=<D',s(706)=<D'+1]
* Psum in Loop 84: [it(84)=<1,s(708)=<A,s(709)=<A+1,s(712)=<D',s(711)=<D'+1]

###### Computing sum for s(701)=<B+1  in Loop 83 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(116)=<B+1] 
 * Adding constraints: [s(701)=<it(83)*aux(116)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(116)=<B+1]
* Psum in Loop 83: [s(699)=<B-2*A'+2,s(683)=<B-2*D'+2,s(695)=<B/3,s(696)=<B/3+1/3,s(707)=<D',s(706)=<D'+1]
* Psum in Loop 84: [it(84)=<1,s(708)=<A,s(709)=<A+1,s(712)=<D',s(711)=<D'+1]

###### Computing max_min for aux(116)=<B+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(116)=<aux(115)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 83: [s(699)=<B-2*A'+2,s(683)=<B-2*D'+2,s(695)=<B/3,s(696)=<B/3+1/3,s(707)=<D',s(706)=<D'+1]
* Psum in Loop 84: [it(84)=<1,s(708)=<A,s(709)=<A+1,s(712)=<D',s(711)=<D'+1]

###### Computing sum for s(699)=<B-2*A'+2  in Loop 83 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(117)=<B-2*D-2,aux(117)=< -2*A+B+2] 
 * Adding constraints: [s(699)=<it(83)*aux(117)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(117)=< -2*A+B+2,aux(117)=<B-2*D-2]
* Psum in Loop 83: [s(683)=<B-2*D'+2,s(695)=<B/3,s(696)=<B/3+1/3,s(707)=<D',s(706)=<D'+1]
* Psum in Loop 84: [it(84)=<1,s(708)=<A,s(709)=<A+1,s(712)=<D',s(711)=<D'+1]

###### Computing max_min for aux(117)=< -2*A+B+2  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(117)=< -2*A+B+2,aux(117)=<B-2*D-2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(117)=<B-2*D-2]
* Psum in Loop 83: [s(683)=<B-2*D'+2,s(695)=<B/3,s(696)=<B/3+1/3,s(707)=<D',s(706)=<D'+1]
* Psum in Loop 84: [it(84)=<1,s(708)=<A,s(709)=<A+1,s(712)=<D',s(711)=<D'+1]

###### Computing max_min for aux(117)=<B-2*D-2  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(117)=<B-2*D-2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 83: [s(683)=<B-2*D'+2,s(695)=<B/3,s(696)=<B/3+1/3,s(707)=<D',s(706)=<D'+1]
* Psum in Loop 84: [it(84)=<1,s(708)=<A,s(709)=<A+1,s(712)=<D',s(711)=<D'+1]

###### Computing sum for s(683)=<B-2*D'+2  in Loop 83 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(118)=<B-2*D] 
 * Adding constraints: [s(683)=<it(83)*aux(118)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(118)=<B-2*D]
* Psum in Loop 83: [s(695)=<B/3,s(696)=<B/3+1/3,s(707)=<D',s(706)=<D'+1]
* Psum in Loop 84: [it(84)=<1,s(708)=<A,s(709)=<A+1,s(712)=<D',s(711)=<D'+1]

###### Computing max_min for aux(118)=<B-2*D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(118)=<aux(117)+2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 83: [s(695)=<B/3,s(696)=<B/3+1/3,s(707)=<D',s(706)=<D'+1]
* Psum in Loop 84: [it(84)=<1,s(708)=<A,s(709)=<A+1,s(712)=<D',s(711)=<D'+1]

###### Computing sum for s(695)=<B/3  in Loop 83 
   - Found a solution using cacheing 
 * Adding constraints: [s(695)=<aux(119)* (1/3),aux(119)=<it(83)*aux(115)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 83: [s(696)=<B/3+1/3,s(707)=<D',s(706)=<D'+1]
* Psum in Loop 84: [it(84)=<1,s(708)=<A,s(709)=<A+1,s(712)=<D',s(711)=<D'+1]

###### Computing sum for s(696)=<B/3+1/3  in Loop 83 
   - Found a solution using cacheing 
 * Adding constraints: [s(696)=<aux(120)* (1/3),aux(120)=<it(83)*aux(116)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 83: [s(707)=<D',s(706)=<D'+1]
* Psum in Loop 84: [it(84)=<1,s(708)=<A,s(709)=<A+1,s(712)=<D',s(711)=<D'+1]

###### Computing sum for s(707)=<D'  in Loop 83 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(121)=<A-1,aux(121)=<D+1] 
 * Adding constraints: [s(707)=<it(83)*aux(121)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(121)=<A-1,aux(121)=<D+1]
* Psum in Loop 83: [s(706)=<D'+1]
* Psum in Loop 84: [it(84)=<1,s(708)=<A,s(709)=<A+1,s(712)=<D',s(711)=<D'+1]

###### Computing max_min for aux(121)=<A-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(121)=<aux(113)-1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(121)=<D+1]
* Psum in Loop 83: [s(706)=<D'+1]
* Psum in Loop 84: [it(84)=<1,s(708)=<A,s(709)=<A+1,s(712)=<D',s(711)=<D'+1]

###### Computing max_min for aux(121)=<D+1  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(121)=<B,aux(121)=<A-1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 83: [s(706)=<D'+1]
* Psum in Loop 84: [it(84)=<1,s(708)=<A,s(709)=<A+1,s(712)=<D',s(711)=<D'+1]

###### Computing sum for s(706)=<D'+1  in Loop 83 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(122)=<A,aux(122)=<D+2] 
 * Adding constraints: [s(706)=<it(83)*aux(122)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(122)=<A,aux(122)=<D+2]
* Psum in Loop 84: [it(84)=<1,s(708)=<A,s(709)=<A+1,s(712)=<D',s(711)=<D'+1]

###### Computing max_min for aux(122)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(122)=<aux(113)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(122)=<D+2]
* Psum in Loop 84: [it(84)=<1,s(708)=<A,s(709)=<A+1,s(712)=<D',s(711)=<D'+1]

###### Computing max_min for aux(122)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(122)=<aux(121)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 84: [it(84)=<1,s(708)=<A,s(709)=<A+1,s(712)=<D',s(711)=<D'+1]

###### Computing sum for it(84)=<1  in Loop 84 
   - Applying inductive sum strategy 
     - head Candidate: B-D 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-D 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-D 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-D 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(83)+it(84)=<B-D,it(83)+it(84)=<A-D-1,it(83)+it(84)=<A-D-1,it(83)+it(84)=<B-D,it(83)+it(84)=<B-D-B'+D',it(83)+it(84)=<A-D-A'+D',it(83)+it(84)=<A-D-A'+D',it(83)+it(84)=<B-D-B'+D'] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 84: [s(708)=<A,s(709)=<A+1,s(712)=<D',s(711)=<D'+1]

###### Computing sum for s(708)=<A  in Loop 84 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(123)=<A] 
 * Adding constraints: [s(708)=<it(84)*aux(123)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(123)=<A]
* Psum in Loop 84: [s(709)=<A+1,s(712)=<D',s(711)=<D'+1]

###### Computing max_min for aux(123)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(123)=<aux(113)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 84: [s(709)=<A+1,s(712)=<D',s(711)=<D'+1]

###### Computing sum for s(709)=<A+1  in Loop 84 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(124)=<A+1] 
 * Adding constraints: [s(709)=<it(84)*aux(124)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(124)=<A+1]
* Psum in Loop 84: [s(712)=<D',s(711)=<D'+1]

###### Computing max_min for aux(124)=<A+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(124)=<aux(113)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 84: [s(712)=<D',s(711)=<D'+1]

###### Computing sum for s(712)=<D'  in Loop 84 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(125)=<A-1,aux(125)=<D+1] 
 * Adding constraints: [s(712)=<it(84)*aux(125)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(125)=<A-1,aux(125)=<D+1]
* Psum in Loop 84: [s(711)=<D'+1]

###### Computing max_min for aux(125)=<A-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(125)=<aux(113)-1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(125)=<D+1]
* Psum in Loop 84: [s(711)=<D'+1]

###### Computing max_min for aux(125)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(125)=<aux(121)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 84: [s(711)=<D'+1]

###### Computing sum for s(711)=<D'+1  in Loop 84 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(126)=<A,aux(126)=<D+2] 
 * Adding constraints: [s(711)=<it(84)*aux(126)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(126)=<A,aux(126)=<D+2]

###### Computing max_min for aux(126)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(126)=<aux(113)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(126)=<D+2]

###### Computing max_min for aux(126)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(126)=<aux(121)+1] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [83,84] 

#### Simplifying cost structure of phase [83,84] 
 * Joined equivalent variables [aux(131),aux(115)] into aux(131)
 * Joined equivalent variables [aux(122),aux(126)] into aux(122)
 * Joined equivalent variables [aux(114),aux(124)] into aux(114)
 * Joined equivalent variables [aux(119),s(697)] into aux(119)

#### Cost of phase [83,84]:echelon_helper_old(A,B,C,D,E,F,G) -> [echelon_helper_old(A',B',C',D',E',F',G')] 
43*it(83)+43*it(84)+6*s(681)+10*s(682)+10*s(683)+32*s(684)+10*s(685)+5*s(686)+24*s(687)+10*s(688)+27*s(689)+20*s(690)+24*s(691)+10*s(692)+27*s(693)+20*s(694)+6*s(708)+5*s(709)+16*s(710)+5*s(711)+0
  Such that:aux(117) =< -2*A+B+2
aux(109) =< -2*A+2*B+2
it(83) =< -A+B-D+1
aux(113) =< B+1
aux(117) =< B-2*D
aux(109) =< 2*B-2*D
it(83) =< B/2-D
aux(127) =< -A+B-D+A'-B'+D'
aux(128) =< A
aux(129) =< A-D
aux(130) =< A-D-A'+D'
aux(131) =< B
aux(132) =< B-D
aux(133) =< B-D-B'+D'
aux(134) =< B/2-D-B'/2+D'
it(83) =< aux(127)
it(84) =< aux(127)
aux(113) =< aux(128)
aux(121) =< aux(128)
it(83) =< aux(129)
it(84) =< aux(129)
it(83) =< aux(130)
it(84) =< aux(130)
aux(121) =< aux(131)
it(83) =< aux(132)
it(84) =< aux(132)
it(83) =< aux(133)
it(84) =< aux(133)
it(83) =< aux(134)
it(84) =< aux(134)
aux(122) =< aux(113)
aux(125) =< aux(113)-1
aux(114) =< aux(113)+1
aux(123) =< aux(113)
aux(121) =< aux(113)-1
aux(118) =< aux(117)+2
aux(116) =< aux(131)+1
aux(112) =< aux(109)* (1/2)+1
aux(111) =< aux(109)* (1/2)-1
aux(110) =< aux(109)+1
aux(119) =< it(83)*aux(131)
s(699) =< it(83)*aux(117)
s(681) =< it(83)*aux(113)
s(705) =< it(83)*aux(109)
aux(122) =< aux(121)+1
aux(125) =< aux(121)
s(709) =< it(84)*aux(114)
s(708) =< it(84)*aux(123)
s(707) =< it(83)*aux(121)
aux(120) =< it(83)*aux(116)
s(695) =< aux(119)* (1/3)
s(683) =< it(83)*aux(118)
s(701) =< it(83)*aux(116)
s(698) =< it(83)*aux(114)
s(704) =< it(83)*aux(112)
s(682) =< it(83)*aux(111)
s(701) =< it(83)*aux(110)
s(711) =< it(84)*aux(122)
s(712) =< it(84)*aux(125)
s(706) =< it(83)*aux(122)
s(696) =< aux(120)* (1/3)
s(710) =< s(712)
s(684) =< s(707)
s(685) =< s(706)
s(682) =< aux(119)
s(700) =< s(705)
s(703) =< s(705)
s(703) =< s(704)
s(702) =< s(704)
s(702) =< s(698)
s(686) =< s(698)
s(700) =< aux(119)
s(686) =< aux(119)
s(682) =< s(703)
s(687) =< s(703)
s(688) =< s(703)
s(689) =< s(702)
s(687) =< s(702)
s(687) =< s(700)
s(690) =< s(700)
s(688) =< s(700)
s(689) =< s(701)
s(687) =< s(701)
s(689) =< s(700)
s(683) =< s(699)
s(683) =< aux(119)
s(691) =< s(699)
s(692) =< s(699)
s(693) =< s(698)
s(691) =< s(698)
s(691) =< aux(119)
s(694) =< aux(119)
s(692) =< aux(119)
s(693) =< s(696)
s(691) =< s(696)
s(693) =< s(695)
s(691) =< s(695)

#### Simplifying cost structure of chain [[83,84],88] 
 * Joined equivalent variables [aux(135),aux(127),aux(133)] into aux(135)
 * Joined equivalent variables [aux(136),aux(129),aux(130)] into aux(136)
 * Joined equivalent variables [aux(137),aux(128)] into aux(137)

#### Simplifying cost structure of CE 84 
 * Renamed intermediate variables: 
[ (eq(86,1),it(81))>>s(713)]
 * Renamed intermediate variables: 
[ (eq(86,2),s(68))>>s(714), (eq(86,2),s(69))>>s(715), (eq(86,2),s(70))>>s(716)]

#### Simplifying cost structure of CE 86 

#### Simplifying cost structure of chain [87,[83,84],88] 
 * Joined equivalent variables [aux(138),aux(131),aux(132)] into aux(138)
 * Joined equivalent variables [aux(139),aux(136),aux(137)] into aux(139)
 * Joined equivalent variables [s(614),s(713)] into s(614)

#### Simplifying cost structure of chain [87,88] 
 * Joined equivalent variables [s(614),s(713),s(715)] into s(614)
 * Renamed intermediate variables: 
[ (eq(87,1),it(81))>>s(717)]
 * Renamed intermediate variables: 
[ (eq(87,2),s(71))>>s(718), (eq(87,2),s(72))>>s(719), (eq(87,2),s(73))>>s(720), (eq(87,2),s(74))>>s(721), (eq(87,2),s(75))>>s(722), (eq(87,2),s(76))>>s(723), (eq(87,2),s(77))>>s(724), (eq(87,2),s(78))>>s(725), (eq(87,2),s(79))>>s(726), (eq(87,2),s(80))>>s(727)]

#### Simplifying cost structure of CE 87 

#### Simplifying cost structure of chain [86,[83,84],88] 
 * Joined equivalent variables [aux(141),aux(131),aux(132),s(722)] into aux(141)
 * Joined equivalent variables [aux(142),aux(109)] into aux(142)
 * Joined equivalent variables [aux(143),s(723)] into aux(143)
 * Joined equivalent variables [aux(144),aux(136),aux(137)] into aux(144)
 * Joined equivalent variables [s(614),s(717)] into s(614)

#### Simplifying cost structure of chain [86,88] 
 * Joined equivalent variables [s(614),s(717),s(719)] into s(614)
 * Renamed intermediate variables: 
[ (eq(88,1),it(81))>>s(728)]
 * Renamed intermediate variables: 
[ (eq(88,2),s(81))>>s(729), (eq(88,2),s(82))>>s(730), (eq(88,2),s(83))>>s(731), (eq(88,2),s(84))>>s(732), (eq(88,2),s(85))>>s(733), (eq(88,2),s(87))>>s(734), (eq(88,2),s(88))>>s(735), (eq(88,2),aux(27))>>s(736), (eq(88,2),s(89))>>s(737), (eq(88,2),s(90))>>s(738), (eq(88,2),s(91))>>s(739), (eq(88,2),s(92))>>s(740), (eq(88,2),s(93))>>s(741)]

#### Simplifying cost structure of CE 88 

#### Simplifying cost structure of chain [85,[83,84],88] 
 * Joined equivalent variables [aux(146),aux(131),aux(132),s(735)] into aux(146)
 * Joined equivalent variables [aux(147),aux(109),s(736)] into aux(147)
 * Joined equivalent variables [aux(148),aux(136),aux(137)] into aux(148)
 * Joined equivalent variables [s(614),s(728)] into s(614)
 * Renamed intermediate variables: 
[ (ch([85,[83,84],88]),s(729))>>s(742), (ch([85,[83,84],88]),s(730))>>s(743), (ch([85,[83,84],88]),aux(113))>>s(744), (ch([85,[83,84],88]),aux(117))>>s(745), (ch([85,[83,84],88]),it(83))>>s(746), (ch([85,[83,84],88]),s(732))>>s(747), (ch([85,[83,84],88]),s(733))>>s(748), (ch([85,[83,84],88]),aux(135))>>s(749), (ch([85,[83,84],88]),s(731))>>s(750), (ch([85,[83,84],88]),aux(134))>>s(751), (ch([85,[83,84],88]),s(734))>>s(752), (ch([85,[83,84],88]),aux(146))>>s(753), (ch([85,[83,84],88]),aux(147))>>s(754), (ch([85,[83,84],88]),aux(148))>>s(755), (ch([85,[83,84],88]),s(614))>>s(756), (ch([85,[83,84],88]),it(84))>>s(757), (ch([85,[83,84],88]),aux(121))>>s(758), (ch([85,[83,84],88]),aux(122))>>s(759), (ch([85,[83,84],88]),aux(125))>>s(760), (ch([85,[83,84],88]),aux(114))>>s(761), (ch([85,[83,84],88]),aux(123))>>s(762), (ch([85,[83,84],88]),aux(118))>>s(763), (ch([85,[83,84],88]),aux(116))>>s(764), (ch([85,[83,84],88]),aux(112))>>s(765), (ch([85,[83,84],88]),aux(111))>>s(766), (ch([85,[83,84],88]),aux(110))>>s(767), (ch([85,[83,84],88]),aux(119))>>s(768), (ch([85,[83,84],88]),s(699))>>s(769), (ch([85,[83,84],88]),s(681))>>s(770), (ch([85,[83,84],88]),s(705))>>s(771), (ch([85,[83,84],88]),s(709))>>s(772), (ch([85,[83,84],88]),s(708))>>s(773), (ch([85,[83,84],88]),s(707))>>s(774), (ch([85,[83,84],88]),aux(120))>>s(775), (ch([85,[83,84],88]),s(695))>>s(776), (ch([85,[83,84],88]),s(683))>>s(777), (ch([85,[83,84],88]),s(701))>>s(778), (ch([85,[83,84],88]),s(698))>>s(779), (ch([85,[83,84],88]),s(704))>>s(780), (ch([85,[83,84],88]),s(682))>>s(781), (ch([85,[83,84],88]),s(711))>>s(782), (ch([85,[83,84],88]),s(712))>>s(783), (ch([85,[83,84],88]),s(706))>>s(784), (ch([85,[83,84],88]),s(696))>>s(785), (ch([85,[83,84],88]),s(710))>>s(786), (ch([85,[83,84],88]),s(684))>>s(787), (ch([85,[83,84],88]),s(685))>>s(788), (ch([85,[83,84],88]),s(700))>>s(789), (ch([85,[83,84],88]),s(703))>>s(790), (ch([85,[83,84],88]),s(702))>>s(791), (ch([85,[83,84],88]),s(686))>>s(792), (ch([85,[83,84],88]),s(687))>>s(793), (ch([85,[83,84],88]),s(688))>>s(794), (ch([85,[83,84],88]),s(689))>>s(795), (ch([85,[83,84],88]),s(690))>>s(796), (ch([85,[83,84],88]),s(691))>>s(797), (ch([85,[83,84],88]),s(692))>>s(798), (ch([85,[83,84],88]),s(693))>>s(799), (ch([85,[83,84],88]),s(694))>>s(800), (ch([85,[83,84],88]),s(737))>>s(801), (ch([85,[83,84],88]),s(738))>>s(802), (ch([85,[83,84],88]),s(739))>>s(803), (ch([85,[83,84],88]),s(740))>>s(804), (ch([85,[83,84],88]),s(741))>>s(805)]
 * Renamed intermediate variables: 
[ (ch([86,[83,84],88]),s(718))>>s(806), (ch([86,[83,84],88]),s(719))>>s(807), (ch([86,[83,84],88]),aux(113))>>s(808), (ch([86,[83,84],88]),aux(117))>>s(809), (ch([86,[83,84],88]),aux(135))>>s(810), (ch([86,[83,84],88]),s(724))>>s(811), (ch([86,[83,84],88]),aux(134))>>s(812), (ch([86,[83,84],88]),s(721))>>s(813), (ch([86,[83,84],88]),aux(141))>>s(814), (ch([86,[83,84],88]),aux(142))>>s(815), (ch([86,[83,84],88]),aux(143))>>s(816), (ch([86,[83,84],88]),aux(144))>>s(817), (ch([86,[83,84],88]),s(720))>>s(818), (ch([86,[83,84],88]),it(83))>>s(819), (ch([86,[83,84],88]),s(614))>>s(820), (ch([86,[83,84],88]),it(84))>>s(821), (ch([86,[83,84],88]),aux(121))>>s(822), (ch([86,[83,84],88]),aux(122))>>s(823), (ch([86,[83,84],88]),aux(125))>>s(824), (ch([86,[83,84],88]),aux(114))>>s(825), (ch([86,[83,84],88]),aux(123))>>s(826), (ch([86,[83,84],88]),aux(118))>>s(827), (ch([86,[83,84],88]),aux(116))>>s(828), (ch([86,[83,84],88]),aux(112))>>s(829), (ch([86,[83,84],88]),aux(111))>>s(830), (ch([86,[83,84],88]),aux(110))>>s(831), (ch([86,[83,84],88]),aux(119))>>s(832), (ch([86,[83,84],88]),s(699))>>s(833), (ch([86,[83,84],88]),s(681))>>s(834), (ch([86,[83,84],88]),s(705))>>s(835), (ch([86,[83,84],88]),s(709))>>s(836), (ch([86,[83,84],88]),s(708))>>s(837), (ch([86,[83,84],88]),s(707))>>s(838), (ch([86,[83,84],88]),aux(120))>>s(839), (ch([86,[83,84],88]),s(695))>>s(840), (ch([86,[83,84],88]),s(683))>>s(841), (ch([86,[83,84],88]),s(701))>>s(842), (ch([86,[83,84],88]),s(698))>>s(843), (ch([86,[83,84],88]),s(704))>>s(844), (ch([86,[83,84],88]),s(682))>>s(845), (ch([86,[83,84],88]),s(711))>>s(846), (ch([86,[83,84],88]),s(712))>>s(847), (ch([86,[83,84],88]),s(706))>>s(848), (ch([86,[83,84],88]),s(696))>>s(849), (ch([86,[83,84],88]),s(710))>>s(850), (ch([86,[83,84],88]),s(684))>>s(851), (ch([86,[83,84],88]),s(685))>>s(852), (ch([86,[83,84],88]),s(700))>>s(853), (ch([86,[83,84],88]),s(703))>>s(854), (ch([86,[83,84],88]),s(702))>>s(855), (ch([86,[83,84],88]),s(686))>>s(856), (ch([86,[83,84],88]),s(687))>>s(857), (ch([86,[83,84],88]),s(688))>>s(858), (ch([86,[83,84],88]),s(689))>>s(859), (ch([86,[83,84],88]),s(690))>>s(860), (ch([86,[83,84],88]),s(691))>>s(861), (ch([86,[83,84],88]),s(692))>>s(862), (ch([86,[83,84],88]),s(693))>>s(863), (ch([86,[83,84],88]),s(694))>>s(864), (ch([86,[83,84],88]),s(725))>>s(865), (ch([86,[83,84],88]),s(726))>>s(866), (ch([86,[83,84],88]),s(727))>>s(867)]
 * Renamed intermediate variables: 
[ (ch([87,[83,84],88]),s(714))>>s(868), (ch([87,[83,84],88]),s(715))>>s(869), (ch([87,[83,84],88]),aux(117))>>s(870), (ch([87,[83,84],88]),it(83))>>s(871), (ch([87,[83,84],88]),aux(113))>>s(872), (ch([87,[83,84],88]),aux(135))>>s(873), (ch([87,[83,84],88]),aux(109))>>s(874), (ch([87,[83,84],88]),aux(134))>>s(875), (ch([87,[83,84],88]),s(716))>>s(876), (ch([87,[83,84],88]),aux(138))>>s(877), (ch([87,[83,84],88]),aux(139))>>s(878), (ch([87,[83,84],88]),s(614))>>s(879), (ch([87,[83,84],88]),it(84))>>s(880), (ch([87,[83,84],88]),aux(121))>>s(881), (ch([87,[83,84],88]),aux(122))>>s(882), (ch([87,[83,84],88]),aux(125))>>s(883), (ch([87,[83,84],88]),aux(114))>>s(884), (ch([87,[83,84],88]),aux(123))>>s(885), (ch([87,[83,84],88]),aux(118))>>s(886), (ch([87,[83,84],88]),aux(116))>>s(887), (ch([87,[83,84],88]),aux(112))>>s(888), (ch([87,[83,84],88]),aux(111))>>s(889), (ch([87,[83,84],88]),aux(110))>>s(890), (ch([87,[83,84],88]),aux(119))>>s(891), (ch([87,[83,84],88]),s(699))>>s(892), (ch([87,[83,84],88]),s(681))>>s(893), (ch([87,[83,84],88]),s(705))>>s(894), (ch([87,[83,84],88]),s(709))>>s(895), (ch([87,[83,84],88]),s(708))>>s(896), (ch([87,[83,84],88]),s(707))>>s(897), (ch([87,[83,84],88]),aux(120))>>s(898), (ch([87,[83,84],88]),s(695))>>s(899), (ch([87,[83,84],88]),s(683))>>s(900), (ch([87,[83,84],88]),s(701))>>s(901), (ch([87,[83,84],88]),s(698))>>s(902), (ch([87,[83,84],88]),s(704))>>s(903), (ch([87,[83,84],88]),s(682))>>s(904), (ch([87,[83,84],88]),s(711))>>s(905), (ch([87,[83,84],88]),s(712))>>s(906), (ch([87,[83,84],88]),s(706))>>s(907), (ch([87,[83,84],88]),s(696))>>s(908), (ch([87,[83,84],88]),s(710))>>s(909), (ch([87,[83,84],88]),s(684))>>s(910), (ch([87,[83,84],88]),s(685))>>s(911), (ch([87,[83,84],88]),s(700))>>s(912), (ch([87,[83,84],88]),s(703))>>s(913), (ch([87,[83,84],88]),s(702))>>s(914), (ch([87,[83,84],88]),s(686))>>s(915), (ch([87,[83,84],88]),s(687))>>s(916), (ch([87,[83,84],88]),s(688))>>s(917), (ch([87,[83,84],88]),s(689))>>s(918), (ch([87,[83,84],88]),s(690))>>s(919), (ch([87,[83,84],88]),s(691))>>s(920), (ch([87,[83,84],88]),s(692))>>s(921), (ch([87,[83,84],88]),s(693))>>s(922), (ch([87,[83,84],88]),s(694))>>s(923)]
 * Joined equivalent variables [aux(151),s(753),s(814),s(877)] into aux(151)
 * Joined equivalent variables [aux(153),s(809)] into aux(153)
 * Joined equivalent variables [aux(155),s(749),s(810),s(873)] into aux(155)
 * Joined equivalent variables [aux(156),s(754),s(815),s(874)] into aux(156)
 * Joined equivalent variables [aux(157),s(816)] into aux(157)
 * Joined equivalent variables [aux(158),s(751),s(812),s(875)] into aux(158)
 * Joined equivalent variables [aux(159),s(755),s(817),s(878)] into aux(159)
 * Joined equivalent variables [aux(160),s(752),s(813)] into aux(160)
 * Joined equivalent variables [s(742),s(806),s(868)] into s(742)
 * Joined equivalent variables [s(743),s(807),s(869)] into s(743)
 * Joined equivalent variables [s(764),s(828),s(887)] into s(764)
 * Joined equivalent variables [s(765),s(829),s(888)] into s(765)
 * Joined equivalent variables [s(766),s(830),s(889)] into s(766)
 * Joined equivalent variables [s(767),s(831),s(890)] into s(767)
 * Joined equivalent variables [s(757),s(821),s(880)] into s(757)
 * Joined equivalent variables [s(756),s(820),s(879)] into s(756)
 * Joined equivalent variables [s(744),s(808),s(872)] into s(744)
 * Joined equivalent variables [s(762),s(826),s(885)] into s(762)
 * Joined equivalent variables [s(758),s(822),s(881)] into s(758)
 * Joined equivalent variables [s(761),s(825),s(884)] into s(761)
 * Joined equivalent variables [s(759),s(823),s(882)] into s(759)
 * Joined equivalent variables [s(760),s(824),s(883)] into s(760)
 * Joined equivalent variables [s(772),s(836),s(895)] into s(772)
 * Joined equivalent variables [s(773),s(837),s(896)] into s(773)
 * Joined equivalent variables [s(782),s(846),s(905)] into s(782)
 * Joined equivalent variables [s(783),s(847),s(906)] into s(783)
 * Joined equivalent variables [s(786),s(850),s(909)] into s(786)

#### Cost of chains of echelon_helper_old(A,B,C,D,E,F,G):
* Chain [[83,84],88]: 43*it(83)+43*it(84)+6*s(614)+6*s(681)+10*s(682)+10*s(683)+32*s(684)+10*s(685)+5*s(686)+24*s(687)+10*s(688)+27*s(689)+20*s(690)+24*s(691)+10*s(692)+27*s(693)+20*s(694)+6*s(708)+5*s(709)+16*s(710)+5*s(711)+6
  Such that:aux(117) =< -2*A+B+2
it(83) =< -A+B-D+1
aux(131) =< B
aux(113) =< B+1
aux(117) =< B-2*D
aux(132) =< B-D
aux(109) =< 2*B-2*E+2
it(83) =< B/2-D
aux(134) =< B/2-D+E-F/2
aux(135) =< B-D+E-F
aux(136) =< -D+E
aux(137) =< E
s(614) =< aux(137)
it(83) =< aux(135)
it(84) =< aux(135)
aux(113) =< aux(137)
aux(121) =< aux(137)
it(83) =< aux(136)
it(84) =< aux(136)
aux(121) =< aux(131)
it(83) =< aux(132)
it(84) =< aux(132)
it(83) =< aux(134)
it(84) =< aux(134)
aux(122) =< aux(113)
aux(125) =< aux(113)-1
aux(114) =< aux(113)+1
aux(123) =< aux(113)
aux(121) =< aux(113)-1
aux(118) =< aux(117)+2
aux(116) =< aux(131)+1
aux(112) =< aux(109)* (1/2)+1
aux(111) =< aux(109)* (1/2)-1
aux(110) =< aux(109)+1
aux(119) =< it(83)*aux(131)
s(699) =< it(83)*aux(117)
s(681) =< it(83)*aux(113)
s(705) =< it(83)*aux(109)
aux(122) =< aux(121)+1
aux(125) =< aux(121)
s(709) =< it(84)*aux(114)
s(708) =< it(84)*aux(123)
s(707) =< it(83)*aux(121)
aux(120) =< it(83)*aux(116)
s(695) =< aux(119)* (1/3)
s(683) =< it(83)*aux(118)
s(701) =< it(83)*aux(116)
s(698) =< it(83)*aux(114)
s(704) =< it(83)*aux(112)
s(682) =< it(83)*aux(111)
s(701) =< it(83)*aux(110)
s(711) =< it(84)*aux(122)
s(712) =< it(84)*aux(125)
s(706) =< it(83)*aux(122)
s(696) =< aux(120)* (1/3)
s(710) =< s(712)
s(684) =< s(707)
s(685) =< s(706)
s(682) =< aux(119)
s(700) =< s(705)
s(703) =< s(705)
s(703) =< s(704)
s(702) =< s(704)
s(702) =< s(698)
s(686) =< s(698)
s(700) =< aux(119)
s(686) =< aux(119)
s(682) =< s(703)
s(687) =< s(703)
s(688) =< s(703)
s(689) =< s(702)
s(687) =< s(702)
s(687) =< s(700)
s(690) =< s(700)
s(688) =< s(700)
s(689) =< s(701)
s(687) =< s(701)
s(689) =< s(700)
s(683) =< s(699)
s(683) =< aux(119)
s(691) =< s(699)
s(692) =< s(699)
s(693) =< s(698)
s(691) =< s(698)
s(691) =< aux(119)
s(694) =< aux(119)
s(692) =< aux(119)
s(693) =< s(696)
s(691) =< s(696)
s(693) =< s(695)
s(691) =< s(695)

  with precondition: [A=E,C>=0,D>=1,G>=0,F+1>=A,A>=D+2,B>=F] 

* Chain [89]: 6
  with precondition: [A=1,B=0,E=1,F=0,C=G,C>=0,D>=0] 

* Chain [88]: 6*s(614)+6
  Such that:s(614) =< A

  with precondition: [A=E,B=F,C=G,A>=2,C>=0,B+1>=A,D+1>=A] 

* Chain [87,[83,84],88]: 43*it(83)+43*it(84)+12*s(614)+6*s(681)+10*s(682)+10*s(683)+32*s(684)+10*s(685)+5*s(686)+24*s(687)+10*s(688)+27*s(689)+20*s(690)+24*s(691)+10*s(692)+27*s(693)+20*s(694)+6*s(708)+5*s(709)+16*s(710)+5*s(711)+8*s(714)+5*s(715)+5*s(716)+49
  Such that:s(714) =< 1
s(715) =< 2
aux(117) =< -2*A+B+2
it(83) =< -A+B
aux(113) =< B+1
aux(117) =< B-2*E+2
it(83) =< B-E
aux(135) =< B+E-F
aux(109) =< 2*B-2*E+2
it(83) =< B/2
aux(134) =< B/2+E-F/2
s(716) =< E+1
aux(138) =< B
aux(139) =< E
aux(117) =< aux(138)
s(614) =< aux(139)
it(83) =< aux(135)
it(84) =< aux(135)
aux(113) =< aux(139)
aux(121) =< aux(139)
it(83) =< aux(139)
it(84) =< aux(139)
aux(121) =< aux(138)
it(83) =< aux(138)
it(84) =< aux(138)
it(83) =< aux(134)
it(84) =< aux(134)
aux(122) =< aux(113)
aux(125) =< aux(113)-1
aux(114) =< aux(113)+1
aux(123) =< aux(113)
aux(121) =< aux(113)-1
aux(118) =< aux(117)+2
aux(116) =< aux(138)+1
aux(112) =< aux(109)* (1/2)+1
aux(111) =< aux(109)* (1/2)-1
aux(110) =< aux(109)+1
aux(119) =< it(83)*aux(138)
s(699) =< it(83)*aux(117)
s(681) =< it(83)*aux(113)
s(705) =< it(83)*aux(109)
aux(122) =< aux(121)+1
aux(125) =< aux(121)
s(709) =< it(84)*aux(114)
s(708) =< it(84)*aux(123)
s(707) =< it(83)*aux(121)
aux(120) =< it(83)*aux(116)
s(695) =< aux(119)* (1/3)
s(683) =< it(83)*aux(118)
s(701) =< it(83)*aux(116)
s(698) =< it(83)*aux(114)
s(704) =< it(83)*aux(112)
s(682) =< it(83)*aux(111)
s(701) =< it(83)*aux(110)
s(711) =< it(84)*aux(122)
s(712) =< it(84)*aux(125)
s(706) =< it(83)*aux(122)
s(696) =< aux(120)* (1/3)
s(710) =< s(712)
s(684) =< s(707)
s(685) =< s(706)
s(682) =< aux(119)
s(700) =< s(705)
s(703) =< s(705)
s(703) =< s(704)
s(702) =< s(704)
s(702) =< s(698)
s(686) =< s(698)
s(700) =< aux(119)
s(686) =< aux(119)
s(682) =< s(703)
s(687) =< s(703)
s(688) =< s(703)
s(689) =< s(702)
s(687) =< s(702)
s(687) =< s(700)
s(690) =< s(700)
s(688) =< s(700)
s(689) =< s(701)
s(687) =< s(701)
s(689) =< s(700)
s(683) =< s(699)
s(683) =< aux(119)
s(691) =< s(699)
s(692) =< s(699)
s(693) =< s(698)
s(691) =< s(698)
s(691) =< aux(119)
s(694) =< aux(119)
s(692) =< aux(119)
s(693) =< s(696)
s(691) =< s(696)
s(693) =< s(695)
s(691) =< s(695)

  with precondition: [D=0,A=E,A>=3,C>=0,G>=0,F+1>=A,B>=F] 

* Chain [87,88]: 17*s(614)+8*s(714)+5*s(716)+49
  Such that:s(714) =< 1
s(716) =< 3
aux(140) =< 2
s(614) =< aux(140)

  with precondition: [A=2,D=0,E=2,B=F,B>=1,C>=0,G>=0] 

* Chain [86,[83,84],88]: 43*it(83)+43*it(84)+12*s(614)+6*s(681)+10*s(682)+10*s(683)+32*s(684)+10*s(685)+5*s(686)+24*s(687)+10*s(688)+27*s(689)+20*s(690)+24*s(691)+10*s(692)+27*s(693)+20*s(694)+6*s(708)+5*s(709)+16*s(710)+5*s(711)+8*s(718)+5*s(719)+10*s(720)+27*s(725)+24*s(726)+10*s(727)+49
  Such that:s(718) =< 1
s(719) =< 2
aux(113) =< B+1
aux(117) =< B-2*E+2
aux(135) =< B+E-F
s(724) =< B/2+1/2
aux(134) =< B/2+E-F/2
s(721) =< E+1
aux(141) =< B
aux(142) =< 2*B-2*E+2
aux(143) =< B/2
aux(144) =< E
s(720) =< aux(142)
it(83) =< aux(143)
s(614) =< aux(144)
it(83) =< aux(135)
it(84) =< aux(135)
aux(113) =< aux(144)
aux(121) =< aux(144)
it(83) =< aux(144)
it(84) =< aux(144)
aux(121) =< aux(141)
it(83) =< aux(141)
it(84) =< aux(141)
it(83) =< aux(134)
it(84) =< aux(134)
aux(122) =< aux(113)
aux(125) =< aux(113)-1
aux(114) =< aux(113)+1
aux(123) =< aux(113)
aux(121) =< aux(113)-1
aux(118) =< aux(117)+2
aux(116) =< aux(141)+1
aux(112) =< aux(142)* (1/2)+1
aux(111) =< aux(142)* (1/2)-1
aux(110) =< aux(142)+1
aux(119) =< it(83)*aux(141)
s(699) =< it(83)*aux(117)
s(681) =< it(83)*aux(113)
s(705) =< it(83)*aux(142)
aux(122) =< aux(121)+1
aux(125) =< aux(121)
s(709) =< it(84)*aux(114)
s(708) =< it(84)*aux(123)
s(707) =< it(83)*aux(121)
aux(120) =< it(83)*aux(116)
s(695) =< aux(119)* (1/3)
s(683) =< it(83)*aux(118)
s(701) =< it(83)*aux(116)
s(698) =< it(83)*aux(114)
s(704) =< it(83)*aux(112)
s(682) =< it(83)*aux(111)
s(701) =< it(83)*aux(110)
s(711) =< it(84)*aux(122)
s(712) =< it(84)*aux(125)
s(706) =< it(83)*aux(122)
s(696) =< aux(120)* (1/3)
s(710) =< s(712)
s(684) =< s(707)
s(685) =< s(706)
s(682) =< aux(119)
s(700) =< s(705)
s(703) =< s(705)
s(703) =< s(704)
s(702) =< s(704)
s(702) =< s(698)
s(686) =< s(698)
s(700) =< aux(119)
s(686) =< aux(119)
s(682) =< s(703)
s(687) =< s(703)
s(688) =< s(703)
s(689) =< s(702)
s(687) =< s(702)
s(687) =< s(700)
s(690) =< s(700)
s(688) =< s(700)
s(689) =< s(701)
s(687) =< s(701)
s(689) =< s(700)
s(683) =< s(699)
s(683) =< aux(119)
s(691) =< s(699)
s(692) =< s(699)
s(693) =< s(698)
s(691) =< s(698)
s(691) =< aux(119)
s(694) =< aux(119)
s(692) =< aux(119)
s(693) =< s(696)
s(691) =< s(696)
s(693) =< s(695)
s(691) =< s(695)
s(725) =< s(721)
s(726) =< s(721)
s(726) =< aux(141)
s(727) =< aux(141)
s(725) =< s(724)
s(726) =< s(724)
s(725) =< aux(143)
s(726) =< aux(143)

  with precondition: [D=0,A=E,A>=3,C>=0,G>=0,B+2>=2*A,F+1>=A,B>=F] 

* Chain [86,88]: 17*s(614)+8*s(718)+10*s(720)+27*s(725)+24*s(726)+10*s(727)+49
  Such that:s(718) =< 1
s(721) =< 3
s(722) =< B
s(720) =< 2*B
s(723) =< B/2
s(724) =< B/2+1/2
aux(145) =< 2
s(614) =< aux(145)
s(725) =< s(721)
s(726) =< s(721)
s(726) =< s(722)
s(727) =< s(722)
s(725) =< s(724)
s(726) =< s(724)
s(725) =< s(723)
s(726) =< s(723)

  with precondition: [A=2,D=0,E=2,C>=0,F>=2,G>=0,B>=F] 

* Chain [85,[83,84],88]: 43*it(83)+43*it(84)+12*s(614)+6*s(681)+10*s(682)+10*s(683)+32*s(684)+10*s(685)+5*s(686)+24*s(687)+10*s(688)+27*s(689)+20*s(690)+24*s(691)+10*s(692)+27*s(693)+20*s(694)+6*s(708)+5*s(709)+16*s(710)+5*s(711)+8*s(729)+5*s(730)+10*s(731)+5*s(738)+27*s(739)+24*s(740)+10*s(741)+49
  Such that:s(729) =< 1
s(730) =< 2
aux(113) =< B+1
aux(117) =< B-2*E+2
it(83) =< B-E
s(732) =< B-E+1
s(733) =< B-E+3/2
aux(135) =< B+E-F
s(731) =< 2*B
s(731) =< 4*B-4*E+2
it(83) =< B/2
aux(134) =< B/2+E-F/2
s(734) =< E+1
aux(146) =< B
aux(147) =< 2*B-2*E+2
aux(148) =< E
aux(117) =< aux(146)
s(614) =< aux(148)
it(83) =< aux(135)
it(84) =< aux(135)
aux(113) =< aux(148)
aux(121) =< aux(148)
it(83) =< aux(148)
it(84) =< aux(148)
aux(121) =< aux(146)
it(83) =< aux(146)
it(84) =< aux(146)
it(83) =< aux(134)
it(84) =< aux(134)
aux(122) =< aux(113)
aux(125) =< aux(113)-1
aux(114) =< aux(113)+1
aux(123) =< aux(113)
aux(121) =< aux(113)-1
aux(118) =< aux(117)+2
aux(116) =< aux(146)+1
aux(112) =< aux(147)* (1/2)+1
aux(111) =< aux(147)* (1/2)-1
aux(110) =< aux(147)+1
aux(119) =< it(83)*aux(146)
s(699) =< it(83)*aux(117)
s(681) =< it(83)*aux(113)
s(705) =< it(83)*aux(147)
aux(122) =< aux(121)+1
aux(125) =< aux(121)
s(709) =< it(84)*aux(114)
s(708) =< it(84)*aux(123)
s(707) =< it(83)*aux(121)
aux(120) =< it(83)*aux(116)
s(695) =< aux(119)* (1/3)
s(683) =< it(83)*aux(118)
s(701) =< it(83)*aux(116)
s(698) =< it(83)*aux(114)
s(704) =< it(83)*aux(112)
s(682) =< it(83)*aux(111)
s(701) =< it(83)*aux(110)
s(711) =< it(84)*aux(122)
s(712) =< it(84)*aux(125)
s(706) =< it(83)*aux(122)
s(696) =< aux(120)* (1/3)
s(710) =< s(712)
s(684) =< s(707)
s(685) =< s(706)
s(682) =< aux(119)
s(700) =< s(705)
s(703) =< s(705)
s(703) =< s(704)
s(702) =< s(704)
s(702) =< s(698)
s(686) =< s(698)
s(700) =< aux(119)
s(686) =< aux(119)
s(682) =< s(703)
s(687) =< s(703)
s(688) =< s(703)
s(689) =< s(702)
s(687) =< s(702)
s(687) =< s(700)
s(690) =< s(700)
s(688) =< s(700)
s(689) =< s(701)
s(687) =< s(701)
s(689) =< s(700)
s(683) =< s(699)
s(683) =< aux(119)
s(691) =< s(699)
s(692) =< s(699)
s(693) =< s(698)
s(691) =< s(698)
s(691) =< aux(119)
s(694) =< aux(119)
s(692) =< aux(119)
s(693) =< s(696)
s(691) =< s(696)
s(693) =< s(695)
s(691) =< s(695)
s(731) =< aux(147)
s(737) =< aux(147)
s(738) =< s(734)
s(732) =< aux(146)
s(737) =< aux(146)
s(738) =< aux(146)
s(739) =< s(734)
s(740) =< s(734)
s(740) =< s(737)
s(741) =< s(737)
s(739) =< s(733)
s(740) =< s(733)
s(739) =< s(732)
s(740) =< s(732)

  with precondition: [D=0,A=E,A>=3,C>=0,G>=0,B>=A,F+1>=A,B>=F] 


#### Simplifying cost structure of CE 91 
 * Renamed intermediate variables: 
[ (eq(92,1),s(714))>>s(924), (eq(92,1),s(716))>>s(925), (eq(92,1),aux(140))>>s(926), (eq(92,1),s(614))>>s(927)]

#### Simplifying cost structure of CE 92 
 * Renamed intermediate variables: 
[ (eq(93,1),s(718))>>s(928), (eq(93,1),s(721))>>s(929), (eq(93,1),s(722))>>s(930), (eq(93,1),s(720))>>s(931), (eq(93,1),s(723))>>s(932), (eq(93,1),s(724))>>s(933), (eq(93,1),aux(145))>>s(934), (eq(93,1),s(614))>>s(935), (eq(93,1),s(725))>>s(936), (eq(93,1),s(726))>>s(937), (eq(93,1),s(727))>>s(938)]

#### Simplifying cost structure of CE 93 
 * Renamed intermediate variables: 
[ (eq(94,1),s(870))>>s(939), (eq(94,1),s(871))>>s(940), (eq(94,1),s(747))>>s(941), (eq(94,1),s(748))>>s(942), (eq(94,1),s(750))>>s(943), (eq(94,1),s(811))>>s(944), (eq(94,1),aux(149))>>s(945), (eq(94,1),aux(150))>>s(946), (eq(94,1),aux(151))>>s(947), (eq(94,1),aux(152))>>s(948), (eq(94,1),aux(153))>>s(949), (eq(94,1),aux(154))>>s(950), (eq(94,1),aux(155))>>s(951), (eq(94,1),aux(156))>>s(952), (eq(94,1),aux(157))>>s(953), (eq(94,1),aux(158))>>s(954), (eq(94,1),aux(159))>>s(955), (eq(94,1),aux(160))>>s(956), (eq(94,1),s(742))>>s(957), (eq(94,1),s(743))>>s(958), (eq(94,1),s(744))>>s(959), (eq(94,1),s(745))>>s(960), (eq(94,1),s(746))>>s(961), (eq(94,1),s(876))>>s(962), (eq(94,1),s(756))>>s(963), (eq(94,1),s(757))>>s(964), (eq(94,1),s(758))>>s(965), (eq(94,1),s(759))>>s(966), (eq(94,1),s(760))>>s(967), (eq(94,1),s(761))>>s(968), (eq(94,1),s(762))>>s(969), (eq(94,1),s(763))>>s(970), (eq(94,1),s(764))>>s(971), (eq(94,1),s(765))>>s(972), (eq(94,1),s(766))>>s(973), (eq(94,1),s(767))>>s(974), (eq(94,1),s(768))>>s(975), (eq(94,1),s(769))>>s(976), (eq(94,1),s(770))>>s(977), (eq(94,1),s(771))>>s(978), (eq(94,1),s(772))>>s(979), (eq(94,1),s(773))>>s(980), (eq(94,1),s(774))>>s(981), (eq(94,1),s(775))>>s(982), (eq(94,1),s(776))>>s(983), (eq(94,1),s(777))>>s(984), (eq(94,1),s(778))>>s(985), (eq(94,1),s(779))>>s(986), (eq(94,1),s(780))>>s(987), (eq(94,1),s(781))>>s(988), (eq(94,1),s(782))>>s(989), (eq(94,1),s(783))>>s(990), (eq(94,1),s(784))>>s(991), (eq(94,1),s(785))>>s(992), (eq(94,1),s(786))>>s(993), (eq(94,1),s(787))>>s(994), (eq(94,1),s(788))>>s(995), (eq(94,1),s(789))>>s(996), (eq(94,1),s(790))>>s(997), (eq(94,1),s(791))>>s(998), (eq(94,1),s(792))>>s(999), (eq(94,1),s(793))>>s(1000), (eq(94,1),s(794))>>s(1001), (eq(94,1),s(795))>>s(1002), (eq(94,1),s(796))>>s(1003), (eq(94,1),s(797))>>s(1004), (eq(94,1),s(798))>>s(1005), (eq(94,1),s(799))>>s(1006), (eq(94,1),s(800))>>s(1007), (eq(94,1),s(801))>>s(1008), (eq(94,1),s(802))>>s(1009), (eq(94,1),s(803))>>s(1010), (eq(94,1),s(804))>>s(1011), (eq(94,1),s(805))>>s(1012), (eq(94,1),s(818))>>s(1013), (eq(94,1),s(819))>>s(1014), (eq(94,1),s(827))>>s(1015), (eq(94,1),s(832))>>s(1016), (eq(94,1),s(833))>>s(1017), (eq(94,1),s(834))>>s(1018), (eq(94,1),s(835))>>s(1019), (eq(94,1),s(838))>>s(1020), (eq(94,1),s(839))>>s(1021), (eq(94,1),s(840))>>s(1022), (eq(94,1),s(841))>>s(1023), (eq(94,1),s(842))>>s(1024), (eq(94,1),s(843))>>s(1025), (eq(94,1),s(844))>>s(1026), (eq(94,1),s(845))>>s(1027), (eq(94,1),s(848))>>s(1028), (eq(94,1),s(849))>>s(1029), (eq(94,1),s(851))>>s(1030), (eq(94,1),s(852))>>s(1031), (eq(94,1),s(853))>>s(1032), (eq(94,1),s(854))>>s(1033), (eq(94,1),s(855))>>s(1034), (eq(94,1),s(856))>>s(1035), (eq(94,1),s(857))>>s(1036), (eq(94,1),s(858))>>s(1037), (eq(94,1),s(859))>>s(1038), (eq(94,1),s(860))>>s(1039), (eq(94,1),s(861))>>s(1040), (eq(94,1),s(862))>>s(1041), (eq(94,1),s(863))>>s(1042), (eq(94,1),s(864))>>s(1043), (eq(94,1),s(865))>>s(1044), (eq(94,1),s(866))>>s(1045), (eq(94,1),s(867))>>s(1046), (eq(94,1),s(886))>>s(1047), (eq(94,1),s(891))>>s(1048), (eq(94,1),s(892))>>s(1049), (eq(94,1),s(893))>>s(1050), (eq(94,1),s(894))>>s(1051), (eq(94,1),s(897))>>s(1052), (eq(94,1),s(898))>>s(1053), (eq(94,1),s(899))>>s(1054), (eq(94,1),s(900))>>s(1055), (eq(94,1),s(901))>>s(1056), (eq(94,1),s(902))>>s(1057), (eq(94,1),s(903))>>s(1058), (eq(94,1),s(904))>>s(1059), (eq(94,1),s(907))>>s(1060), (eq(94,1),s(908))>>s(1061), (eq(94,1),s(910))>>s(1062), (eq(94,1),s(911))>>s(1063), (eq(94,1),s(912))>>s(1064), (eq(94,1),s(913))>>s(1065), (eq(94,1),s(914))>>s(1066), (eq(94,1),s(915))>>s(1067), (eq(94,1),s(916))>>s(1068), (eq(94,1),s(917))>>s(1069), (eq(94,1),s(918))>>s(1070), (eq(94,1),s(919))>>s(1071), (eq(94,1),s(920))>>s(1072), (eq(94,1),s(921))>>s(1073), (eq(94,1),s(922))>>s(1074), (eq(94,1),s(923))>>s(1075)]

#### Simplifying cost structure of CE 94 
 * Joined equivalent variables [aux(163),s(947)] into aux(163)
 * Joined equivalent variables [aux(164),s(948),s(951)] into aux(164)

#### Cost of chains of echelon_form_old(A,B,C,D,E,F):
* Chain [93]: 8
  with precondition: [A=1,B=0,D=1,E=0,C=F,C>=0] 

* Chain [92]: 8*s(924)+5*s(925)+17*s(927)+51
  Such that:s(924) =< 1
s(926) =< 2
s(925) =< 3
s(927) =< s(926)

  with precondition: [A=2,D=2,B=E,B>=1,C>=0,F>=0] 

* Chain [91]: 8*s(928)+10*s(931)+17*s(935)+27*s(936)+24*s(937)+10*s(938)+51
  Such that:s(928) =< 1
s(934) =< 2
s(929) =< 3
s(930) =< B
s(931) =< 2*B
s(932) =< B/2
s(933) =< B/2+1/2
s(935) =< s(934)
s(936) =< s(929)
s(937) =< s(929)
s(937) =< s(930)
s(938) =< s(930)
s(936) =< s(933)
s(937) =< s(933)
s(936) =< s(932)
s(937) =< s(932)

  with precondition: [A=2,D=2,C>=0,E>=2,F>=0,B>=E] 

* Chain [90]: 43*s(940)+10*s(943)+24*s(957)+15*s(958)+43*s(961)+5*s(962)+36*s(963)+129*s(964)+6*s(977)+15*s(979)+18*s(980)+10*s(984)+10*s(988)+15*s(989)+48*s(993)+32*s(994)+10*s(995)+5*s(999)+24*s(1000)+10*s(1001)+27*s(1002)+20*s(1003)+24*s(1004)+10*s(1005)+27*s(1006)+20*s(1007)+5*s(1009)+27*s(1010)+24*s(1011)+10*s(1012)+10*s(1013)+43*s(1014)+6*s(1018)+10*s(1023)+10*s(1027)+32*s(1030)+10*s(1031)+5*s(1035)+24*s(1036)+10*s(1037)+27*s(1038)+20*s(1039)+24*s(1040)+10*s(1041)+27*s(1042)+20*s(1043)+27*s(1044)+24*s(1045)+10*s(1046)+6*s(1050)+10*s(1055)+10*s(1059)+32*s(1062)+10*s(1063)+5*s(1067)+24*s(1068)+10*s(1069)+27*s(1070)+20*s(1071)+24*s(1072)+10*s(1073)+27*s(1074)+20*s(1075)+51
  Such that:s(945) =< 1
s(946) =< 2
s(943) =< -4*A+4*B+2
s(952) =< -2*A+2*B+2
s(941) =< -A+B+1
s(942) =< -A+B+3/2
s(955) =< A
s(956) =< A+1
s(954) =< A/2+B/2+1/2
s(943) =< 2*B
s(943) =< 4*B
s(953) =< B/2
s(944) =< B/2+1/2
aux(161) =< -2*A+B+2
aux(162) =< -A+B
aux(163) =< B
aux(164) =< B+1
s(939) =< aux(161)
s(949) =< aux(161)
s(940) =< aux(162)
s(950) =< aux(162)
s(939) =< aux(163)
s(940) =< aux(163)
s(949) =< aux(163)
s(950) =< aux(163)
s(957) =< s(945)
s(958) =< s(946)
s(959) =< aux(164)
s(960) =< s(949)
s(939) =< s(949)
s(961) =< s(950)
s(940) =< s(950)
s(961) =< s(953)
s(940) =< s(953)
s(962) =< s(956)
s(960) =< aux(163)
s(963) =< s(955)
s(961) =< aux(164)
s(964) =< aux(164)
s(959) =< s(955)
s(965) =< s(955)
s(961) =< s(955)
s(964) =< s(955)
s(965) =< aux(163)
s(961) =< aux(163)
s(964) =< aux(163)
s(961) =< s(954)
s(964) =< s(954)
s(966) =< s(959)
s(967) =< s(959)-1
s(968) =< s(959)+1
s(969) =< s(959)
s(965) =< s(959)-1
s(970) =< s(960)+2
s(971) =< aux(163)+1
s(972) =< s(952)* (1/2)+1
s(973) =< s(952)* (1/2)-1
s(974) =< s(952)+1
s(975) =< s(961)*aux(163)
s(976) =< s(961)*s(960)
s(977) =< s(961)*s(959)
s(978) =< s(961)*s(952)
s(966) =< s(965)+1
s(967) =< s(965)
s(979) =< s(964)*s(968)
s(980) =< s(964)*s(969)
s(981) =< s(961)*s(965)
s(982) =< s(961)*s(971)
s(983) =< s(975)* (1/3)
s(984) =< s(961)*s(970)
s(985) =< s(961)*s(971)
s(986) =< s(961)*s(968)
s(987) =< s(961)*s(972)
s(988) =< s(961)*s(973)
s(985) =< s(961)*s(974)
s(989) =< s(964)*s(966)
s(990) =< s(964)*s(967)
s(991) =< s(961)*s(966)
s(992) =< s(982)* (1/3)
s(993) =< s(990)
s(994) =< s(981)
s(995) =< s(991)
s(988) =< s(975)
s(996) =< s(978)
s(997) =< s(978)
s(997) =< s(987)
s(998) =< s(987)
s(998) =< s(986)
s(999) =< s(986)
s(996) =< s(975)
s(999) =< s(975)
s(988) =< s(997)
s(1000) =< s(997)
s(1001) =< s(997)
s(1002) =< s(998)
s(1000) =< s(998)
s(1000) =< s(996)
s(1003) =< s(996)
s(1001) =< s(996)
s(1002) =< s(985)
s(1000) =< s(985)
s(1002) =< s(996)
s(984) =< s(976)
s(984) =< s(975)
s(1004) =< s(976)
s(1005) =< s(976)
s(1006) =< s(986)
s(1004) =< s(986)
s(1004) =< s(975)
s(1007) =< s(975)
s(1005) =< s(975)
s(1006) =< s(992)
s(1004) =< s(992)
s(1006) =< s(983)
s(1004) =< s(983)
s(943) =< s(952)
s(1008) =< s(952)
s(1009) =< s(956)
s(941) =< aux(163)
s(1008) =< aux(163)
s(1009) =< aux(163)
s(1010) =< s(956)
s(1011) =< s(956)
s(1011) =< s(1008)
s(1012) =< s(1008)
s(1010) =< s(942)
s(1011) =< s(942)
s(1010) =< s(941)
s(1011) =< s(941)
s(1013) =< s(952)
s(1014) =< s(953)
s(1014) =< aux(164)
s(1014) =< s(955)
s(1014) =< aux(163)
s(1014) =< s(954)
s(1015) =< s(949)+2
s(1016) =< s(1014)*aux(163)
s(1017) =< s(1014)*s(949)
s(1018) =< s(1014)*s(959)
s(1019) =< s(1014)*s(952)
s(1020) =< s(1014)*s(965)
s(1021) =< s(1014)*s(971)
s(1022) =< s(1016)* (1/3)
s(1023) =< s(1014)*s(1015)
s(1024) =< s(1014)*s(971)
s(1025) =< s(1014)*s(968)
s(1026) =< s(1014)*s(972)
s(1027) =< s(1014)*s(973)
s(1024) =< s(1014)*s(974)
s(1028) =< s(1014)*s(966)
s(1029) =< s(1021)* (1/3)
s(1030) =< s(1020)
s(1031) =< s(1028)
s(1027) =< s(1016)
s(1032) =< s(1019)
s(1033) =< s(1019)
s(1033) =< s(1026)
s(1034) =< s(1026)
s(1034) =< s(1025)
s(1035) =< s(1025)
s(1032) =< s(1016)
s(1035) =< s(1016)
s(1027) =< s(1033)
s(1036) =< s(1033)
s(1037) =< s(1033)
s(1038) =< s(1034)
s(1036) =< s(1034)
s(1036) =< s(1032)
s(1039) =< s(1032)
s(1037) =< s(1032)
s(1038) =< s(1024)
s(1036) =< s(1024)
s(1038) =< s(1032)
s(1023) =< s(1017)
s(1023) =< s(1016)
s(1040) =< s(1017)
s(1041) =< s(1017)
s(1042) =< s(1025)
s(1040) =< s(1025)
s(1040) =< s(1016)
s(1043) =< s(1016)
s(1041) =< s(1016)
s(1042) =< s(1029)
s(1040) =< s(1029)
s(1042) =< s(1022)
s(1040) =< s(1022)
s(1044) =< s(956)
s(1045) =< s(956)
s(1045) =< aux(163)
s(1046) =< aux(163)
s(1044) =< s(944)
s(1045) =< s(944)
s(1044) =< s(953)
s(1045) =< s(953)
s(940) =< aux(164)
s(940) =< s(955)
s(940) =< s(954)
s(1047) =< s(939)+2
s(1048) =< s(940)*aux(163)
s(1049) =< s(940)*s(939)
s(1050) =< s(940)*s(959)
s(1051) =< s(940)*s(952)
s(1052) =< s(940)*s(965)
s(1053) =< s(940)*s(971)
s(1054) =< s(1048)* (1/3)
s(1055) =< s(940)*s(1047)
s(1056) =< s(940)*s(971)
s(1057) =< s(940)*s(968)
s(1058) =< s(940)*s(972)
s(1059) =< s(940)*s(973)
s(1056) =< s(940)*s(974)
s(1060) =< s(940)*s(966)
s(1061) =< s(1053)* (1/3)
s(1062) =< s(1052)
s(1063) =< s(1060)
s(1059) =< s(1048)
s(1064) =< s(1051)
s(1065) =< s(1051)
s(1065) =< s(1058)
s(1066) =< s(1058)
s(1066) =< s(1057)
s(1067) =< s(1057)
s(1064) =< s(1048)
s(1067) =< s(1048)
s(1059) =< s(1065)
s(1068) =< s(1065)
s(1069) =< s(1065)
s(1070) =< s(1066)
s(1068) =< s(1066)
s(1068) =< s(1064)
s(1071) =< s(1064)
s(1069) =< s(1064)
s(1070) =< s(1056)
s(1068) =< s(1056)
s(1070) =< s(1064)
s(1055) =< s(1049)
s(1055) =< s(1048)
s(1072) =< s(1049)
s(1073) =< s(1049)
s(1074) =< s(1057)
s(1072) =< s(1057)
s(1072) =< s(1048)
s(1075) =< s(1048)
s(1073) =< s(1048)
s(1074) =< s(1061)
s(1072) =< s(1061)
s(1074) =< s(1054)
s(1072) =< s(1054)

  with precondition: [A=D,A>=3,C>=0,F>=0,E+1>=A,B>=E] 


#### Simplifying cost structure of CE 96 

#### Computing cost of phase [95] 

#### Simplifying cost structure of CE 95 

#### Cost of loops [95] 

 * loop 95:hd_helper(A,B,C,D,E,F,G) -> [hd_helper(A',B',C',D',E',F',G')] 
9
##### Pending set hd_helper(A,B,C,D,E,F,G)
* Psum in Loop 95: [it(95)=<1]

###### Computing sum for it(95)=<1  in Loop 95 
   - Applying inductive sum strategy 
     - head Candidate: B+1 
     - head Candidate: A-1 
     - head Candidate: C 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
     - tail Candidate: A-1 
     - tail Candidate: C 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(95)=<B+1,it(95)=<A-1,it(95)=<C,it(95)=<A-1,it(95)=<B+1,it(95)=<C,it(95)=<B-B',it(95)=<A-A',it(95)=<C-C',it(95)=<A-A',it(95)=<B-B',it(95)=<C-C'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [95] 

#### Simplifying cost structure of phase [95] 

#### Cost of phase [95]:hd_helper(A,B,C,D,E,F,G) -> [hd_helper(A',B',C',D',E',F',G')] 
9*it(95)+0
  Such that:it(95) =< A
it(95) =< A-A'
it(95) =< B+1
it(95) =< B-B'
it(95) =< C
it(95) =< C-C'

#### Simplifying cost structure of chain [[95],94] 

#### Cost of chains of hd_helper(A,B,C,D,E,F,G):
* Chain [[95],94]: 9*it(95)+3
  Such that:it(95) =< C

  with precondition: [C+D=F,C>=1,D>=1,E>=0,A>=C+1,G>=C+E,B+E>=G] 

* Chain [94]: 3
  with precondition: [C=0,D=F,E=G,A>=0,B>=0,D>=0,E>=0] 


#### Simplifying cost structure of CE 97 
 * Renamed intermediate variables: 
[ (eq(98,1),it(95))>>s(1076)]
 * Renamed intermediate variables: 
[ (eq(98,2),s(64))>>s(1077)]

#### Simplifying cost structure of CE 98 

#### Cost of chains of hd(A,B,C,D,E):
* Chain [97]: 10
  with precondition: [C=0,D=1,E=0,A>=0,B>=0] 

* Chain [96]: 9*s(1076)+5*s(1077)+10
  Such that:s(1076) =< C
s(1077) =< C+1

  with precondition: [C+1=D,C>=1,A>=C+1,E>=C,B>=E] 


#### Simplifying cost structure of CE 100 

#### Computing cost of phase [99] 

#### Simplifying cost structure of CE 99 

#### Cost of loops [99] 

 * loop 99:tl(A,B,C,D,E) -> [tl(A',B',C',D',E')] 
8
##### Pending set tl(A,B,C,D,E)
* Psum in Loop 99: [it(99)=<1]

###### Computing sum for it(99)=<1  in Loop 99 
   - Applying inductive sum strategy 
     - head Candidate: C 
     - head Candidate: B+1 
     - head Candidate: A-1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C 
     - tail Candidate: B+1 
     - tail Candidate: A-1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(99)=<C,it(99)=<B+1,it(99)=<A-1,it(99)=<A-1,it(99)=<B+1,it(99)=<C,it(99)=<C-C',it(99)=<B-B',it(99)=<A-A',it(99)=<A-A',it(99)=<B-B',it(99)=<C-C'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [99] 

#### Simplifying cost structure of phase [99] 

#### Cost of phase [99]:tl(A,B,C,D,E) -> [tl(A',B',C',D',E')] 
8*it(99)+0
  Such that:it(99) =< A
it(99) =< A-A'
it(99) =< B+1
it(99) =< B-B'
it(99) =< C
it(99) =< C-C'

#### Simplifying cost structure of chain [[99],98] 

#### Cost of chains of tl(A,B,C,D,E):
* Chain [[99],98]: 8*it(99)+3
  Such that:it(99) =< C

  with precondition: [A=C+D,C>=1,E>=0,A>=C+1,B>=C+E] 

* Chain [98]: 3
  with precondition: [C=0,A=D,B=E,A>=0,B>=0] 


Closed-form bounds of sizeL(A,B,C,D,E,F,G): 
-------------------------------------
* Chain [[81],82] with precondition: [A=D,A=F+1,A=G+1,A>=2,C>=0,B+1>=A,E+1>=A] 
    - Upper bound: 6*A+3 
    - Complexity: n 
* Chain [82] with precondition: [A=1,B=0,D=1,E=0,F=0,G=0,C>=0] 
    - Upper bound: 3 
    - Complexity: constant 

### Maximum cost of sizeL(A,B,C,D,E,F,G): 6*A+3 
Asymptotic class: n 

Closed-form bounds of get_elem(A,B,C,D,E,F,G,H,I,J): 
-------------------------------------
* Chain [[56],57] with precondition: [F=G,F>=1,H>=1,I>=0,J>=1,A>=F+2,D>=F+2,C>=I,B>=F+H,E>=F+J] 
    - Upper bound: 8*F+5 
    - Complexity: n 
* Chain [57] with precondition: [F=0,G=0,A>=2,D>=2,H>=1,I>=0,J>=1,B>=H,C>=I,E>=J] 
    - Upper bound: 5 
    - Complexity: constant 

### Maximum cost of get_elem(A,B,C,D,E,F,G,H,I,J): 8*F+5 
Asymptotic class: n 

Closed-form bounds of get_2elems(A,B,C,D,E,F,G,H,I,J,K,L,M,N): 
-------------------------------------
* Chain [[39],40] with precondition: [K=1,M=1,I=J,B>=0,F>=0,I>=1,L>=0,N>=2,A>=I+2,C>=I+2,D>=I+1,E>=I+2,G>=I+2,H>=I+1,B+F>=L,D+H>=2*I+N] 
    - Upper bound: 10*I+8 
    - Complexity: n 
* Chain [40] with precondition: [I=0,J=0,K=1,M=1,A>=2,B>=0,C>=2,D>=1,E>=2,F>=0,G>=2,H>=1,L>=0,N>=2,B+F>=L,D+H>=N] 
    - Upper bound: 8 
    - Complexity: constant 

### Maximum cost of get_2elems(A,B,C,D,E,F,G,H,I,J,K,L,M,N): 10*I+8 
Asymptotic class: n 

Closed-form bounds of subtract_row_helper(A,B,C,D,E,F,G): 
-------------------------------------
* Chain [[38],37] with precondition: [A=F,A>=2,B>=0,D>=0,E>=0,G>=0,C>=A] 
    - Upper bound: 10*A+3 
    - Complexity: n 
* Chain [[38],36] with precondition: [C=F,B>=0,C>=2,D>=0,E>=0,G>=0,A>=C+1] 
    - Upper bound: 10*C+6 
    - Complexity: n 
* Chain [37] with precondition: [A=1,F=1,B>=0,C>=0,D>=0,E>=0,G>=0] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [36] with precondition: [C=1,F=1,A>=2,B>=0,D>=0,E>=0,G>=0] 
    - Upper bound: 6 
    - Complexity: constant 

### Maximum cost of subtract_row_helper(A,B,C,D,E,F,G): max([10*C+3,10*A])+3 
Asymptotic class: n 

Closed-form bounds of subtract_row(A,B,C,D,E,F,G): 
-------------------------------------
* Chain [44] with precondition: [E=0,A=F,A>=2,B>=0,D>=0,G>=0,C>=A] 
    - Upper bound: 10*A+18 
    - Complexity: n 
* Chain [43] with precondition: [E=0,C=F,B>=0,C>=2,D>=0,G>=0,A>=C+1] 
    - Upper bound: 10*C+21 
    - Complexity: n 
* Chain [42] with precondition: [A=F,B>=0,D>=0,E>=1,G>=0,C>=A,A>=E+2] 
    - Upper bound: 10*A+10*E+18 
    - Complexity: n 
* Chain [41] with precondition: [C=F,B>=0,D>=0,E>=1,G>=0,A>=C+1,C>=E+2] 
    - Upper bound: 10*C+10*E+21 
    - Complexity: n 

### Maximum cost of subtract_row(A,B,C,D,E,F,G): 10*E+18+max([10*C+3,10*A]) 
Asymptotic class: n 

Closed-form bounds of subtract_helper(A,B,C,D,E,F,G,H,I): 
-------------------------------------
* Chain [[47,48],49] with precondition: [F=0,A=G,A>=2,C>=0,D>=2,E>=0,I>=0,H+2>=2*A,B>=H] 
    - Upper bound: 31*A+30*B+23 
    - Complexity: n 
* Chain [[45,46],49] with precondition: [A=G,A>=2,C>=0,E>=0,F>=1,I>=0,D>=F+2,B>=H,H+4>=3*A+F] 
    - Upper bound: -41*A+54*B+71+nat(-2*A+B-D+F+4)*10 
    - Complexity: n 
* Chain [49] with precondition: [A=1,B=0,G=1,H=0,C>=0,D>=0,E>=0,F>=0,I>=0] 
    - Upper bound: 3 
    - Complexity: constant 

### Maximum cost of subtract_helper(A,B,C,D,E,F,G,H,I): 27*A+10*B+max([4*A+20*B+20,-68*A+44*B+68+nat(-2*A+B-D+F+4)*10])+3 
Asymptotic class: n 

Closed-form bounds of concat(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O): 
-------------------------------------
* Chain [[34],35] with precondition: [A=D,L=B+G,O=E+J,A+F=K+1,A+I=N+1,A>=2,C>=0,F>=1,H>=0,I>=1,M>=0,B+1>=A,E+1>=A,L>=B,O>=E,C+H>=M] 
    - Upper bound: 5*A+2 
    - Complexity: n 
* Chain [35] with precondition: [A=1,B=0,D=1,E=0,F=K,G=L,H=M,I=N,J=O,C>=0,F>=0,G>=0,H>=0,I>=0,J>=0] 
    - Upper bound: 2 
    - Complexity: constant 

### Maximum cost of concat(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O): 5*A+2 
Asymptotic class: n 

Closed-form bounds of tl(A,B,C,D,E): 
-------------------------------------
* Chain [[99],98] with precondition: [A=C+D,C>=1,E>=0,A>=C+1,B>=C+E] 
    - Upper bound: 8*C+3 
    - Complexity: n 
* Chain [98] with precondition: [C=0,A=D,B=E,A>=0,B>=0] 
    - Upper bound: 3 
    - Complexity: constant 

### Maximum cost of tl(A,B,C,D,E): 8*C+3 
Asymptotic class: n 

Closed-form bounds of hd_helper(A,B,C,D,E,F,G): 
-------------------------------------
* Chain [[95],94] with precondition: [C+D=F,C>=1,D>=1,E>=0,A>=C+1,G>=C+E,B+E>=G] 
    - Upper bound: 9*C+3 
    - Complexity: n 
* Chain [94] with precondition: [C=0,D=F,E=G,A>=0,B>=0,D>=0,E>=0] 
    - Upper bound: 3 
    - Complexity: constant 

### Maximum cost of hd_helper(A,B,C,D,E,F,G): 9*C+3 
Asymptotic class: n 

Closed-form bounds of reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O): 
-------------------------------------
* Chain [[58],59] with precondition: [A=D,A+F=K+1,B+G=L,A+I=N+1,E+J=O,A>=2,C>=0,F>=1,G>=0,H>=0,I>=1,J>=0,M>=0,B+1>=A,E+1>=A,C+H>=M] 
    - Upper bound: 5*A+2 
    - Complexity: n 
* Chain [59] with precondition: [A=1,B=0,D=1,E=0,F=K,G=L,H=M,I=N,J=O,C>=0,F>=0,G>=0,H>=0,I>=0,J>=0] 
    - Upper bound: 2 
    - Complexity: constant 

### Maximum cost of reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O): 5*A+2 
Asymptotic class: n 

Closed-form bounds of reverseL(A,B,C,D,E,F,G,H,I,J): 
-------------------------------------
* Chain [61] with precondition: [A=1,B=0,D=1,E=0,F=1,G=0,I=1,J=0,C>=0,H>=0] 
    - Upper bound: 4 
    - Complexity: constant 
* Chain [60] with precondition: [A=D,A=F,B=G,A=I,E=J,A>=2,C>=0,H>=0,B+1>=A,E+1>=A] 
    - Upper bound: 5*D+4 
    - Complexity: n 

### Maximum cost of reverseL(A,B,C,D,E,F,G,H,I,J): 5*D+4 
Asymptotic class: n 

Closed-form bounds of hd(A,B,C,D,E): 
-------------------------------------
* Chain [97] with precondition: [C=0,D=1,E=0,A>=0,B>=0] 
    - Upper bound: 10 
    - Complexity: constant 
* Chain [96] with precondition: [C+1=D,C>=1,A>=C+1,E>=C,B>=E] 
    - Upper bound: 14*C+15 
    - Complexity: n 

### Maximum cost of hd(A,B,C,D,E): 14*C+15 
Asymptotic class: n 

Closed-form bounds of split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U): 
-------------------------------------
* Chain [[64],62] with precondition: [O=1,S=1,J=M,A+J=P,B+K=Q,D+J=T,E+N=U,F+I=G+H,C>=0,H>=0,J>=1,K>=0,L>=0,N>=0,R>=0,F>=H+1,A+H>=F+1,B+H>=F,D+H>=F+1,E+H>=F,G+H>=F,B+H+K+1>=F+J,E+H+N+1>=F+J] 
    - Upper bound: 13*F-13*H+5*J+8 
    - Complexity: n 
* Chain [63] with precondition: [J=1,K=0,M=1,N=0,O=1,S=1,F=H,G=I,A+1=P,B=Q,D+1=T,E=U,A>=1,B>=0,C>=0,D>=1,E>=0,F>=0,G>=0,L>=0,R>=C] 
    - Upper bound: 8 
    - Complexity: constant 
* Chain [62] with precondition: [O=1,S=1,F=H,G=I,J=M,A+J=P,B+K=Q,D+J=T,E+N=U,A>=1,B>=0,C>=0,D>=1,E>=0,F>=0,G>=0,J>=2,L>=0,R>=C,K+1>=J,N+1>=J] 
    - Upper bound: 5*M+8 
    - Complexity: n 

### Maximum cost of split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U): 13*F-13*H+5*J+8 
Asymptotic class: n 

Closed-form bounds of split(A,B,C,D,E,F,G,H,I,J,K,L,M,N): 
-------------------------------------
* Chain [66] with precondition: [F=0,G=0,H=1,L=1,A+1=I,B=J,D+1=M,E=N,A>=1,B>=0,C>=0,D>=1,E>=0,K>=C] 
    - Upper bound: 11 
    - Complexity: constant 
* Chain [65] with precondition: [H=1,L=1,F=G,A+1=I,B=J,D+1=M,E=N,C>=0,F>=1,K>=0,A>=F+1,B>=F,D>=F+1,E>=F] 
    - Upper bound: 13*G+16 
    - Complexity: n 

### Maximum cost of split(A,B,C,D,E,F,G,H,I,J,K,L,M,N): 13*G+16 
Asymptotic class: n 

Closed-form bounds of subtract(A,B,C,D,E,F,G): 
-------------------------------------
* Chain [71] with precondition: [D=0,A=E,B=F,A>=2,C>=0,G>=0,B+1>=A] 
    - Upper bound: 5*A+56 
    - Complexity: n 
* Chain [70] with precondition: [D=0,A=E,A>=2,C>=0,G>=0,F+2>=2*A,B>=F] 
    - Upper bound: 31*A+30*B+122 
    - Complexity: n 
* Chain [69] with precondition: [D=0,A=E,A>=3,C>=0,G>=0,F>=A,B>=F] 
    - Upper bound: -4*A+60*B+147 
    - Complexity: n 
* Chain [68] with precondition: [A=E,B=F,C>=0,D>=1,G>=0,B+1>=A,A>=D+2] 
    - Upper bound: 5*A+21*D+56 
    - Complexity: n 
* Chain [67] with precondition: [A=E,C>=0,D>=1,G>=0,A>=D+2,B>=F,F>=A+D] 
    - Upper bound: 10*B-20*D+ (-5*A+57*B+42*D+155+nat(-2*A+B+2)*34+ (-108*A+108*B+108)) 
    - Complexity: n 

### Maximum cost of subtract(A,B,C,D,E,F,G): 5*A+38+max([21*D+18,7*A+20*B+47+max([10*B+max([19*A+37,10*B+42*D+36+nat(-A+B)*10+ (-27*A+27*B+54)+nat(-2*A+B+2)*34+ (-88*A+88*B+88)+nat(B-2*D)*10]),24*A+42+nat(-4*A+4*B+2)*10])]) 
Asymptotic class: n 

Closed-form bounds of echelon_helper(A,B,C,D,E,F,G,H,I,J): 
-------------------------------------
* Chain [[72,73],77] with precondition: [H=1,I=0,C>=0,D>=1,E>=2,G>=0,J>=0,B+1>=A,F+1>=E,A>=D+E] 
    - Upper bound: (-A+B+E)* (21*A)+3+16*A*nat(-A+B-D+1)+ (-A+B+E)* (5*B)+20*B*nat(-A+B-D+1)+nat(-A+B)*10*nat(-A+B-D+1)+ (32*A+32)*nat(-A+B-D+1)+ (-68*A+68*B+68*E)+nat(-2*A+B+2)*34*nat(-A+B-D+1)+ (-108*A+108*B+108)*nat(-A+B-D+1)+nat(-A+B-D+1)*103+nat(-A+B-D+1)*26*A+ (-2*A+2*B+2)* (27/2*nat(-A+B-D+1))+nat(-A+B-D+1)*10*nat(B-2*D) 
    - Complexity: n^2 
* Chain [77] with precondition: [E=1,F=0,H=1,I=0,A>=0,B>=0,C>=0,D>=0,G>=0,J>=0] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [76,[72,73],77] with precondition: [D=0,H=1,I=0,C>=0,E>=3,G>=0,J>=0,B+1>=A,A>=E,F+1>=E] 
    - Upper bound: (-A+B+E)* (21*A)+61+30*B*nat(-A+B)+ (-A+B+E)* (5*B)+nat(-A+B)*10*nat(-A+B)+ (5*A+5)+ (32*A+32)*nat(-A+B)+nat(-A+B)*103+nat(-A+B)*42*A+nat(-A+B)*34*nat(-2*A+B+2)+ (-2*A+2*B+2)* (135/2*nat(-A+B))+ (-68*A+68*B+68*E) 
    - Complexity: n^2 
* Chain [76,77] with precondition: [D=0,E=2,H=1,I=0,A>=2,C>=0,F>=1,G>=0,J>=0,B+1>=A] 
    - Upper bound: 5*A+66 
    - Complexity: n 
* Chain [75,[72,73],77] with precondition: [D=0,H=1,I=0,C>=0,E>=3,G>=0,J>=0,B+2>=2*A,A>=E,F+1>=E] 
    - Upper bound: (-A+B+E)* (21*A)+61+B/2* (42*A)+10*B+ (-A+B+E)* (5*B)+B/2* (30*B)+B/2* (-10*A+10*B)+ (51*A+51)+B/2* (32*A+32)+ (-68*A+68*B+68*E)+B/2* (-68*A+34*B+68)+ (-20*A+20*B+20)+B/2* (-135*A+135*B+135)+103/2*B 
    - Complexity: n^2 
* Chain [75,77] with precondition: [D=0,E=2,H=1,I=0,A>=2,C>=0,F>=1,G>=0,J>=0,B+2>=2*A] 
    - Upper bound: 31*A+30*B+132 
    - Complexity: n 
* Chain [74,[72,73],77] with precondition: [D=0,H=1,I=0,C>=0,E>=3,G>=0,J>=0,B>=A,A>=E,F+1>=E] 
    - Upper bound: (-A+B+E)* (21*A)+61+ (-A+B)* (30*B)+ (-A+B+E)* (5*B)+ (-10*A+10*B)* (-A+B)+ (56*A+56)+ (32*A+32)* (-A+B)+ (-103*A+103*B)+ (-42*A+42*B)*A+ (-34*A+34*B)*nat(-2*A+B+2)+ (-2*A+2*B+2)* (-135/2*A+135/2*B)+ (-68*A+68*B+68*E)+ (-40*A+40*B+20)+ (-20*A+20*B+20) 
    - Complexity: n^2 
* Chain [74,77] with precondition: [D=0,E=2,H=1,I=0,A>=3,C>=0,F>=1,G>=0,J>=0,B>=A] 
    - Upper bound: -4*A+60*B+157 
    - Complexity: n 

### Maximum cost of echelon_helper(A,B,C,D,E,F,G,H,I,J): max([5*A+63+max([46*A+46+nat(-2*A+2*B+2)*10+max([max([10*B,5*A+5+nat(-4*A+4*B+2)*10]),21*A*nat(-A+B+E)+5*B*nat(-A+B+E)+nat(-A+B+E)*68+max([B/2* (42*A)+10*B+B/2* (30*B)+B/2* (nat(1/2*nat(-2*A+2*B+2)+ -1)*10)+B/2* (32*A+32)+B/2* (nat(-2*A+B+2)*34)+B/2* (135/2*nat(-2*A+2*B+2))+103/2*B,nat(1/2*nat(-2*A+2*B+2)+ -1)*10*nat(-A+B)+30*B*nat(-A+B)+ (5*A+5)+ (32*A+32)*nat(-A+B)+nat(-A+B)*103+nat(-A+B)*42*A+nat(-A+B)*34*nat(-2*A+B+2)+135/2*nat(-A+B)*nat(-2*A+2*B+2)+nat(-4*A+4*B+2)*10])]),30*B*nat(-A+B)+21*A*nat(-A+B+E)+5*B*nat(-A+B+E)+nat(1/2*nat(-2*A+2*B+2)+ -1)*10*nat(-A+B)+ (32*A+32)*nat(-A+B)+nat(-A+B)*103+nat(-A+B)*42*A+nat(-A+B)*34*nat(-2*A+B+2)+135/2*nat(-A+B)*nat(-2*A+2*B+2)+nat(-A+B+E)*68]),21*A*nat(-A+B+E)+16*A*nat(-A+B-D+1)+5*B*nat(-A+B+E)+20*B*nat(-A+B-D+1)+nat(1/2*nat(-2*A+2*B+2)+ -1)*10*nat(-A+B-D+1)+ (32*A+32)*nat(-A+B-D+1)+nat(-A+B+E)*68+nat(-2*A+B+2)*34*nat(-A+B-D+1)+nat(-2*A+2*B+2)*54*nat(-A+B-D+1)+nat(-A+B-D+1)*103+nat(-A+B-D+1)*26*A+27/2*nat(-A+B-D+1)*nat(-2*A+2*B+2)+nat(-A+B-D+1)*10*nat(B-2*D)])+3 
Asymptotic class: n^2 

Closed-form bounds of echelon_form(A,B,C,D,E,F): 
-------------------------------------
* Chain [80] with precondition: [A=1,B=0,D=1,E=0,C>=0,F>=0] 
    - Upper bound: 5 
    - Complexity: constant 
* Chain [79] with precondition: [A=2,D=1,E=0,B>=1,C>=0,F>=0] 
    - Upper bound: 90*B+435 
    - Complexity: n 
* Chain [78] with precondition: [D=1,E=0,A>=3,C>=0,F>=0,B+1>=A] 
    - Upper bound: 63*A*B+99+84*A*nat(-A+B)+B/2* (42*A)+214*B+15*B*B+60*B*nat(-A+B)+B/2* (30*B)+nat(-A+B)*20*nat(-A+B)+B/2* (nat(-A+B)*10)+ (112*A+112)+ (64*A+64)*nat(-A+B)+B/2* (32*A+32)+nat(-A+B)*206+nat(-A+B)*68*nat(-2*A+B+2)+nat(-4*A+4*B+2)*10+B/2* (nat(-2*A+B+2)*34)+ (-40*A+40*B+40)+ (-270*A+270*B+270)*nat(-A+B)+B/2* (-135*A+135*B+135)+103/2*B 
    - Complexity: n^2 

### Maximum cost of echelon_form(A,B,C,D,E,F): 10*B+94+max([80*B+336,84*A*nat(-A+B)+63*A*B+B/2* (42*A)+204*B+15*B*B+60*B*nat(-A+B)+B/2* (30*B)+nat(-A+B)*20*nat(-A+B)+B/2* (nat(-A+B)*10)+ (112*A+112)+ (64*A+64)*nat(-A+B)+B/2* (32*A+32)+nat(-A+B)*206+nat(-A+B)*68*nat(-2*A+B+2)+nat(-4*A+4*B+2)*10+B/2* (nat(-2*A+B+2)*34)+ (-40*A+40*B+40)+ (-270*A+270*B+270)*nat(-A+B)+B/2* (-135*A+135*B+135)+103/2*B])+5 
Asymptotic class: n^2 
 * Joined equivalent variables [aux(165),aux(134),aux(135)] into aux(165)
 * Joined equivalent variables [aux(166),aux(138)] into aux(166)
 * Joined equivalent variables [aux(167),aux(134),aux(135)] into aux(167)
 * Joined equivalent variables [aux(168),aux(117),aux(141)] into aux(168)
 * Joined equivalent variables [aux(169),aux(135)] into aux(169)
 * Joined equivalent variables [aux(119),s(699)] into aux(119)
 * Joined equivalent variables [s(692),s(694)] into s(692)
 * Joined equivalent variables [aux(170),aux(146),s(733)] into aux(170)
 * Joined equivalent variables [aux(171),aux(135)] into aux(171)
 * Joined equivalent variables [aux(172),aux(147)] into aux(172)
 * Joined equivalent variables [aux(117),s(732)] into aux(117)

Closed-form bounds of echelon_helper_old(A,B,C,D,E,F,G): 
-------------------------------------
* Chain [[83,84],88] with precondition: [A=E,C>=0,D>=1,G>=0,F+1>=A,A>=D+2,B>=F] 
    - Upper bound: 48*B-48*D+48+ (6*A+6+20*B*nat(-A+B-D+1)+ (B-D+1)* (16*B)+ (10*B-10*D-10)*nat(-A+B-D+1)+ (B-D+1)* (16*B+16)+ (6*B+6)*nat(-A+B-D+1)+nat(-2*A+B+2)*34*nat(-A+B-D+1))+nat(-A+B-D+1)*122+nat(-A+B-D+1)*32*A+ (B+1)* (nat(-A+B-D+1)*42)+nat(-A+B-D+1)*10*nat(-2*A+B+2)+ (2*B-2*D)* (135/2*nat(-A+B-D+1)) 
    - Complexity: n^2 
* Chain [89] with precondition: [A=1,B=0,E=1,F=0,C=G,C>=0,D>=0] 
    - Upper bound: 6 
    - Complexity: constant 
* Chain [88] with precondition: [A=E,B=F,C=G,A>=2,C>=0,B+1>=A,D+1>=A] 
    - Upper bound: 6*A+6 
    - Complexity: n 
* Chain [87,[83,84],88] with precondition: [D=0,A=E,A>=3,C>=0,G>=0,F+1>=A,B>=F] 
    - Upper bound: 12*A+67+20*B*nat(-A+B)+ (10*B-10)*nat(-A+B)+ (B+1)* (16*B)+108*B*nat(-A+B)+ (5*A+5)+ (48*B+48)+ (16*B+16)* (B+1)+nat(-A+B)*122+nat(-A+B)*32*A+27/2*nat(-A+B)* (2*B)+ (B+1)* (nat(-A+B)*48)+nat(-A+B)*44*nat(-2*A+B+2) 
    - Complexity: n^2 
* Chain [87,88] with precondition: [A=2,D=0,E=2,B=F,B>=1,C>=0,G>=0] 
    - Upper bound: 106 
    - Complexity: constant 
* Chain [86,[83,84],88] with precondition: [D=0,A=E,A>=3,C>=0,G>=0,B+2>=2*A,F+1>=A,B>=F] 
    - Upper bound: 12*A+67+B/2* (32*A)+10*B+B/2* (64*B)+B/2* (10*B-10)+ (B+1)* (16*B)+20*B+B/2* (135*B)+ (51*A+51)+ (48*B+48)+ (16*B+16)* (B+1)+B/2* (48*B+48)+61*B 
    - Complexity: n^2 
* Chain [86,88] with precondition: [A=2,D=0,E=2,C>=0,F>=2,G>=0,B>=F] 
    - Upper bound: 30*B+244 
    - Complexity: n 
* Chain [85,[83,84],88] with precondition: [D=0,A=E,A>=3,C>=0,G>=0,B>=A,F+1>=A,B>=F] 
    - Upper bound: 12*A+67+B/2* (20*B)+B/2* (10*B-10)+ (B+1)* (16*B)+20*B+B/2* (108*B)+40*B+ (56*A+56)+ (48*B+48)+ (16*B+16)* (B+1)+61*B+16*B*A+22*B*B+27/4*B* (2*B)+ (B+1)* (24*B) 
    - Complexity: n^2 

### Maximum cost of echelon_helper_old(A,B,C,D,E,F,G): max([30*B+238,6*A+max([6*A+61+ (B+1)* (16*B)+ (5*A+5)+ (48*B+48)+ (16*B+16)* (B+1)+max([B/2* (nat(B-1)*10)+B/2* (20*B)+20*B+B/2* (108*B)+ (46*A+46)+61*B+max([B/2* (32*A)+10*B+B/2* (44*B)+B/2* (27*B)+B/2* (48*B+48),5*A+40*B+5+16*B*A+22*B*B+27/4*B* (2*B)+ (B+1)* (24*B)]),nat(B-1)*10*nat(-A+B)+20*B*nat(-A+B)+108*B*nat(-A+B)+nat(-A+B)*122+nat(-A+B)*32*A+27/2*nat(-A+B)* (2*B)+ (B+1)* (nat(-A+B)*48)+nat(-A+B)*44*nat(-2*A+B+2)]),20*B*nat(-A+B-D+1)+16*B*nat(B-D+1)+nat(1/2*nat(2*B-2*D)+ -1)*10*nat(-A+B-D+1)+ (16*B+16)*nat(B-D+1)+ (6*B+6)*nat(-A+B-D+1)+nat(-2*A+B+2)*34*nat(-A+B-D+1)+nat(B-D+1)*48+nat(-A+B-D+1)*122+nat(-A+B-D+1)*32*A+ (B+1)* (nat(-A+B-D+1)*42)+nat(-A+B-D+1)*10*nat(-2*A+B+2)+135/2*nat(-A+B-D+1)*nat(2*B-2*D)])])+6 
Asymptotic class: n^2 

Closed-form bounds of echelon_form_old(A,B,C,D,E,F): 
-------------------------------------
* Chain [93] with precondition: [A=1,B=0,D=1,E=0,C=F,C>=0] 
    - Upper bound: 8 
    - Complexity: constant 
* Chain [92] with precondition: [A=2,D=2,B=E,B>=1,C>=0,F>=0] 
    - Upper bound: 108 
    - Complexity: constant 
* Chain [91] with precondition: [A=2,D=2,C>=0,E>=2,F>=0,B>=E] 
    - Upper bound: 30*B+246 
    - Complexity: n 
* Chain [90] with precondition: [A=D,A>=3,C>=0,F>=0,E+1>=A,B>=E] 
    - Upper bound: 36*A+105+64*A*nat(-A+B)+B/2* (32*A)+10*B+40*B*nat(-A+B)+B/2* (20*B)+ (B+1)* (48*B)+nat(-A+B)*20*nat(-A+B)+B/2* (nat(-A+B)*10)+ (112*A+112)+ (144*B+144)+ (48*B+48)* (B+1)+ (96*B+96)*nat(-A+B)+B/2* (48*B+48)+nat(-A+B)*244+nat(-A+B)*68*nat(-2*A+B+2)+nat(-4*A+4*B+2)*10+nat(-2*A+B+2)*20*nat(-A+B)+B/2* (nat(-2*A+B+2)*44)+ (-40*A+40*B+40)+ (-270*A+270*B+270)*nat(-A+B)+B/2* (-135*A+135*B+135)+61*B 
    - Complexity: n^2 

### Maximum cost of echelon_form_old(A,B,C,D,E,F): max([3,10*B+max([20*B+141,64*A*nat(-A+B)+36*A+B/2* (32*A)+40*B*nat(-A+B)+B/2* (20*B)+ (B+1)* (48*B)+nat(-A+B)*20*nat(-A+B)+B/2* (nat(-A+B)*10)+ (112*A+112)+ (144*B+144)+ (48*B+48)* (B+1)+ (96*B+96)*nat(-A+B)+B/2* (48*B+48)+nat(-A+B)*244+nat(-A+B)*68*nat(-2*A+B+2)+nat(-4*A+4*B+2)*10+nat(-2*A+B+2)*20*nat(-A+B)+B/2* (nat(-2*A+B+2)*44)+ (-40*A+40*B+40)+ (-270*A+270*B+270)*nat(-A+B)+B/2* (-135*A+135*B+135)+61*B])])+105 
Asymptotic class: n^2 
* Total analysis performed in 5480 ms.


Cost relation system solved by CoFloCo in 5484 ms.

Method sizeL terminates?: YES

 - l_1: size of l wrt. List<List<Rat>>
 - l_2: size of l wrt. List<Rat>
 - l_3: size of l wrt. Rat
 - l_4: size of l wrt. List<A>
 - l_5: size of l wrt. A
UB for sizeL(l_1,l_2,l_3,l_4,l_5) = 6*l_1+3

Method get_elem terminates?: YES

 - l_1: size of l wrt. List<List<Rat>>
 - l_2: size of l wrt. List<Rat>
 - l_3: size of l wrt. Rat
 - l_4: size of l wrt. List<A>
 - l_5: size of l wrt. A
 - i_1: size of i wrt. Rat
 - i_2: size of i wrt. Rat
UB for get_elem(l_1,l_2,l_3,l_4,l_5,i_1,i_2) = 8*i_1+5

Method get_2elems terminates?: YES

 - l1_1: size of l1 wrt. List<Rat>
 - l1_2: size of l1 wrt. Rat
 - l1_3: size of l1 wrt. List<A>
 - l1_4: size of l1 wrt. A
 - l2_1: size of l2 wrt. List<Rat>
 - l2_2: size of l2 wrt. Rat
 - l2_3: size of l2 wrt. List<A>
 - l2_4: size of l2 wrt. A
 - i_1: size of i wrt. Rat
 - i_2: size of i wrt. Rat
UB for get_2elems(l1_1,l1_2,l1_3,l1_4,l2_1,l2_2,l2_3,l2_4,i_1,i_2) = 10*i_1+8

Method subtract_row_helper terminates?: YES

 - r1_1: size of r1 wrt. List<Rat>
 - r1_2: size of r1 wrt. Rat
 - r2_1: size of r2 wrt. List<Rat>
 - r2_2: size of r2 wrt. Rat
 - q_1: size of q wrt. Rat
UB for subtract_row_helper(r1_1,r1_2,r2_1,r2_2,q_1) = max([10*r2_1+3,10*r1_1])+3

Method subtract_row terminates?: YES

 - r1_1: size of r1 wrt. List<Rat>
 - r1_2: size of r1 wrt. Rat
 - r2_1: size of r2 wrt. List<Rat>
 - r2_2: size of r2 wrt. Rat
 - i_1: size of i wrt. Rat
UB for subtract_row(r1_1,r1_2,r2_1,r2_2,i_1) = 10*i_1+18+max([10*r2_1+3,10*r1_1])

Method subtract_helper terminates?: YES

 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
 - row_1: size of row wrt. List<Rat>
 - row_2: size of row wrt. Rat
 - i_1: size of i wrt. Rat
UB for subtract_helper(m_1,m_2,m_3,row_1,row_2,i_1) = 27*m_1+10*m_2+max([4*m_1+20*m_2+20,-68*m_1+44*m_2+68+nat(-2*m_1+m_2-row_1+i_1+4)*10])+3

Method concat terminates?: YES

 - l1_1: size of l1 wrt. List<List<Rat>>
 - l1_2: size of l1 wrt. List<Rat>
 - l1_3: size of l1 wrt. Rat
 - l1_4: size of l1 wrt. List<A>
 - l1_5: size of l1 wrt. A
 - l2_1: size of l2 wrt. List<List<Rat>>
 - l2_2: size of l2 wrt. List<Rat>
 - l2_3: size of l2 wrt. Rat
 - l2_4: size of l2 wrt. List<A>
 - l2_5: size of l2 wrt. A
UB for concat(l1_1,l1_2,l1_3,l1_4,l1_5,l2_1,l2_2,l2_3,l2_4,l2_5) = 5*l1_1+2

Method tl terminates?: YES

 - l_1: size of l wrt. List<A>
 - l_2: size of l wrt. A
 - i_1: size of i wrt. Rat
UB for tl(l_1,l_2,i_1) = 8*i_1+3

Method hd_helper terminates?: YES

 - l_1: size of l wrt. List<A>
 - l_2: size of l wrt. A
 - i_1: size of i wrt. Rat
 - acc_1: size of acc wrt. List<A>
 - acc_2: size of acc wrt. A
UB for hd_helper(l_1,l_2,i_1,acc_1,acc_2) = 9*i_1+3

Method reverse_helper terminates?: YES

 - l_1: size of l wrt. List<List<Rat>>
 - l_2: size of l wrt. List<Rat>
 - l_3: size of l wrt. Rat
 - l_4: size of l wrt. List<A>
 - l_5: size of l wrt. A
 - acc_1: size of acc wrt. List<List<Rat>>
 - acc_2: size of acc wrt. List<Rat>
 - acc_3: size of acc wrt. Rat
 - acc_4: size of acc wrt. List<A>
 - acc_5: size of acc wrt. A
UB for reverse_helper(l_1,l_2,l_3,l_4,l_5,acc_1,acc_2,acc_3,acc_4,acc_5) = 5*l_1+2

Method reverseL terminates?: YES

 - l_1: size of l wrt. List<List<Rat>>
 - l_2: size of l wrt. List<Rat>
 - l_3: size of l wrt. Rat
 - l_4: size of l wrt. List<A>
 - l_5: size of l wrt. A
UB for reverseL(l_1,l_2,l_3,l_4,l_5) = 5*l_4+4

Method hd terminates?: YES

 - l_1: size of l wrt. List<A>
 - l_2: size of l wrt. A
 - i_1: size of i wrt. Rat
UB for hd(l_1,l_2,i_1) = 14*i_1+15

Method split_helper terminates?: YES

 - l_1: size of l wrt. List<List<Rat>>
 - l_2: size of l wrt. List<Rat>
 - l_3: size of l wrt. Rat
 - l_4: size of l wrt. List<A>
 - l_5: size of l wrt. A
 - i_1: size of i wrt. Rat
 - i_2: size of i wrt. Rat
 - j_1: size of j wrt. Rat
 - j_2: size of j wrt. Rat
 - hd_1: size of hd wrt. List<List<Rat>>
 - hd_2: size of hd wrt. List<Rat>
 - hd_3: size of hd wrt. Rat
 - hd_4: size of hd wrt. List<A>
 - hd_5: size of hd wrt. A
UB for split_helper(l_1,l_2,l_3,l_4,l_5,i_1,i_2,j_1,j_2,hd_1,hd_2,hd_3,hd_4,hd_5) = 13*i_1-13*j_1+5*hd_1+8

Method split terminates?: YES

 - l_1: size of l wrt. List<List<Rat>>
 - l_2: size of l wrt. List<Rat>
 - l_3: size of l wrt. Rat
 - l_4: size of l wrt. List<A>
 - l_5: size of l wrt. A
 - i_1: size of i wrt. Rat
 - i_2: size of i wrt. Rat
UB for split(l_1,l_2,l_3,l_4,l_5,i_1,i_2) = 13*i_2+16

Method subtract terminates?: YES

 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
 - i_1: size of i wrt. Rat
UB for subtract(m_1,m_2,m_3,i_1) = 5*m_1+38+max([21*i_1+18,7*m_1+20*m_2+47+max([10*m_2+max([19*m_1+37,10*m_2+42*i_1+36+nat(-m_1+m_2)*10+ (-27*m_1+27*m_2+54)+nat(-2*m_1+m_2+2)*34+ (-88*m_1+88*m_2+88)+nat(m_2-2*i_1)*10]),24*m_1+42+nat(-4*m_1+4*m_2+2)*10])])

Method echelon_helper terminates?: YES

 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
 - i_1: size of i wrt. Rat
 - sizem_1: size of sizem wrt. List<List<Rat>>
 - sizem_2: size of sizem wrt. List<Rat>
 - sizem_3: size of sizem wrt. Rat
UB for echelon_helper(m_1,m_2,m_3,i_1,sizem_1,sizem_2,sizem_3) = max([5*m_1+63+max([46*m_1+46+nat(-2*m_1+2*m_2+2)*10+max([max([10*m_2,5*m_1+5+nat(-4*m_1+4*m_2+2)*10]),21*m_1*nat(-m_1+m_2+sizem_1)+5*m_2*nat(-m_1+m_2+sizem_1)+nat(-m_1+m_2+sizem_1)*68+max([m_2/2* (42*m_1)+10*m_2+m_2/2* (30*m_2)+m_2/2* (nat(1/2*nat(-2*m_1+2*m_2+2)+ -1)*10)+m_2/2* (32*m_1+32)+m_2/2* (nat(-2*m_1+m_2+2)*34)+m_2/2* (135/2*nat(-2*m_1+2*m_2+2))+103/2*m_2,nat(1/2*nat(-2*m_1+2*m_2+2)+ -1)*10*nat(-m_1+m_2)+30*m_2*nat(-m_1+m_2)+ (5*m_1+5)+ (32*m_1+32)*nat(-m_1+m_2)+nat(-m_1+m_2)*103+nat(-m_1+m_2)*42*m_1+nat(-m_1+m_2)*34*nat(-2*m_1+m_2+2)+135/2*nat(-m_1+m_2)*nat(-2*m_1+2*m_2+2)+nat(-4*m_1+4*m_2+2)*10])]),30*m_2*nat(-m_1+m_2)+21*m_1*nat(-m_1+m_2+sizem_1)+5*m_2*nat(-m_1+m_2+sizem_1)+nat(1/2*nat(-2*m_1+2*m_2+2)+ -1)*10*nat(-m_1+m_2)+ (32*m_1+32)*nat(-m_1+m_2)+nat(-m_1+m_2)*103+nat(-m_1+m_2)*42*m_1+nat(-m_1+m_2)*34*nat(-2*m_1+m_2+2)+135/2*nat(-m_1+m_2)*nat(-2*m_1+2*m_2+2)+nat(-m_1+m_2+sizem_1)*68]),21*m_1*nat(-m_1+m_2+sizem_1)+16*m_1*nat(-m_1+m_2-i_1+1)+5*m_2*nat(-m_1+m_2+sizem_1)+20*m_2*nat(-m_1+m_2-i_1+1)+nat(1/2*nat(-2*m_1+2*m_2+2)+ -1)*10*nat(-m_1+m_2-i_1+1)+ (32*m_1+32)*nat(-m_1+m_2-i_1+1)+nat(-m_1+m_2+sizem_1)*68+nat(-2*m_1+m_2+2)*34*nat(-m_1+m_2-i_1+1)+nat(-2*m_1+2*m_2+2)*54*nat(-m_1+m_2-i_1+1)+nat(-m_1+m_2-i_1+1)*103+nat(-m_1+m_2-i_1+1)*26*m_1+27/2*nat(-m_1+m_2-i_1+1)*nat(-2*m_1+2*m_2+2)+nat(-m_1+m_2-i_1+1)*10*nat(m_2-2*i_1)])+3

Method echelon_form terminates?: YES

 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
UB for echelon_form(m_1,m_2,m_3) = 10*m_2+94+max([80*m_2+336,84*m_1*nat(-m_1+m_2)+63*m_1*m_2+m_2/2* (42*m_1)+204*m_2+15*m_2*m_2+60*m_2*nat(-m_1+m_2)+m_2/2* (30*m_2)+nat(-m_1+m_2)*20*nat(-m_1+m_2)+m_2/2* (nat(-m_1+m_2)*10)+ (112*m_1+112)+ (64*m_1+64)*nat(-m_1+m_2)+m_2/2* (32*m_1+32)+nat(-m_1+m_2)*206+nat(-m_1+m_2)*68*nat(-2*m_1+m_2+2)+nat(-4*m_1+4*m_2+2)*10+m_2/2* (nat(-2*m_1+m_2+2)*34)+ (-40*m_1+40*m_2+40)+ (-270*m_1+270*m_2+270)*nat(-m_1+m_2)+m_2/2* (-135*m_1+135*m_2+135)+103/2*m_2])+5

Method echelon_helper_old terminates?: YES

 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
 - i_1: size of i wrt. Rat
UB for echelon_helper_old(m_1,m_2,m_3,i_1) = max([30*m_2+238,6*m_1+max([6*m_1+61+ (m_2+1)* (16*m_2)+ (5*m_1+5)+ (48*m_2+48)+ (16*m_2+16)* (m_2+1)+max([m_2/2* (nat(m_2-1)*10)+m_2/2* (20*m_2)+20*m_2+m_2/2* (108*m_2)+ (46*m_1+46)+61*m_2+max([m_2/2* (32*m_1)+10*m_2+m_2/2* (44*m_2)+m_2/2* (27*m_2)+m_2/2* (48*m_2+48),5*m_1+40*m_2+5+16*m_2*m_1+22*m_2*m_2+27/4*m_2* (2*m_2)+ (m_2+1)* (24*m_2)]),nat(m_2-1)*10*nat(-m_1+m_2)+20*m_2*nat(-m_1+m_2)+108*m_2*nat(-m_1+m_2)+nat(-m_1+m_2)*122+nat(-m_1+m_2)*32*m_1+27/2*nat(-m_1+m_2)* (2*m_2)+ (m_2+1)* (nat(-m_1+m_2)*48)+nat(-m_1+m_2)*44*nat(-2*m_1+m_2+2)]),20*m_2*nat(-m_1+m_2-i_1+1)+16*m_2*nat(m_2-i_1+1)+nat(1/2*nat(2*m_2-2*i_1)+ -1)*10*nat(-m_1+m_2-i_1+1)+ (16*m_2+16)*nat(m_2-i_1+1)+ (6*m_2+6)*nat(-m_1+m_2-i_1+1)+nat(-2*m_1+m_2+2)*34*nat(-m_1+m_2-i_1+1)+nat(m_2-i_1+1)*48+nat(-m_1+m_2-i_1+1)*122+nat(-m_1+m_2-i_1+1)*32*m_1+ (m_2+1)* (nat(-m_1+m_2-i_1+1)*42)+nat(-m_1+m_2-i_1+1)*10*nat(-2*m_1+m_2+2)+135/2*nat(-m_1+m_2-i_1+1)*nat(2*m_2-2*i_1)])])+6

Method echelon_form_old terminates?: YES

 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
UB for echelon_form_old(m_1,m_2,m_3) = max([3,10*m_2+max([20*m_2+141,64*m_1*nat(-m_1+m_2)+36*m_1+m_2/2* (32*m_1)+40*m_2*nat(-m_1+m_2)+m_2/2* (20*m_2)+ (m_2+1)* (48*m_2)+nat(-m_1+m_2)*20*nat(-m_1+m_2)+m_2/2* (nat(-m_1+m_2)*10)+ (112*m_1+112)+ (144*m_2+144)+ (48*m_2+48)* (m_2+1)+ (96*m_2+96)*nat(-m_1+m_2)+m_2/2* (48*m_2+48)+nat(-m_1+m_2)*244+nat(-m_1+m_2)*68*nat(-2*m_1+m_2+2)+nat(-4*m_1+4*m_2+2)*10+nat(-2*m_1+m_2+2)*20*nat(-m_1+m_2)+m_2/2* (nat(-2*m_1+m_2+2)*44)+ (-40*m_1+40*m_2+40)+ (-270*m_1+270*m_2+270)*nat(-m_1+m_2)+m_2/2* (-135*m_1+135*m_2+135)+61*m_2])])+105

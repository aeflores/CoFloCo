
Abs program loaded in 10 ms.

Rule based representation generated in 2 ms.

Rule based representation stored in /tmp/costabs/rbr.rbr

RBR properties stored in /tmp/costabs/rbr.properties

Class invariants generated and loaded in 0 ms.

Abstract compilation performed in 25 ms.

Cost relation system stored in /tmp/costabs/crs.crs

Generated 43 equations 
entry('attach'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):[]).
entry('append'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1,F1,G1,H1,I1,J1,K1,L1,M1,N1,O1,P1):[]).
entry('pairs'(A,B,C,D,E):[]).
entry('pairsAux'(A,B,C,D,E,F,G,H):[]).
entry('pairsp'(A,B,C,D,E):[]).
entry('triples'(A,B,C,D,E,F):[]).
entry('quadruples'(A,B,C,D,E,F,G):[]).
input_output_vars('and_op'(A,B,C),[A,B],[C]).
input_output_vars('append'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1,F1,G1,H1,I1,J1,K1,L1,M1,N1,O1,P1),[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1],[C1,D1,E1,F1,G1,H1,I1,J1,K1,L1,M1,N1,O1,P1]).
input_output_vars('attach'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1),[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O],[P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1]).
input_output_vars('case_0'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1,F1,G1,H1,I1,J1,K1,L1,M1,N1,O1,P1),[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1],[C1,D1,E1,F1,G1,H1,I1,J1,K1,L1,M1,N1,O1,P1]).
input_output_vars('case_1'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1),[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O],[P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1]).
input_output_vars('case_2'(A,B,C,D,E),[A,B],[C,D,E]).
input_output_vars('case_3'(A,B,C,D,E,F,G,H),[A,B,C,D,E],[F,G,H]).
input_output_vars('case_4'(A,B,C,D,E),[A,B],[C,D,E]).
input_output_vars('case_5'(A,B,C,D,E,F),[A,B],[C,D,E,F]).
input_output_vars('case_6'(A,B,C,D,E,F,G),[A,B],[C,D,E,F,G]).
input_output_vars('eq'(A,B,C),[A,B],[C]).
input_output_vars('geq'(A,B,C),[A,B],[C]).
input_output_vars('gt'(A,B,C),[A,B],[C]).
input_output_vars('leq'(A,B,C),[A,B],[C]).
input_output_vars('lt'(A,B,C),[A,B],[C]).
input_output_vars('maxNorm'(A,B,C),[A,B],[C]).
input_output_vars('neg'(A,B),[A],[B]).
input_output_vars('neq'(A,B,C),[A,B],[C]).
input_output_vars('or'(A,B,C),[A,B],[C]).
input_output_vars('pairs'(A,B,C,D,E),[A,B],[C,D,E]).
input_output_vars('pairsAux'(A,B,C,D,E,F,G,H),[A,B,C,D,E],[F,G,H]).
input_output_vars('pairsp'(A,B,C,D,E),[A,B],[C,D,E]).
input_output_vars('quadruples'(A,B,C,D,E,F,G),[A,B],[C,D,E,F,G]).
input_output_vars('triples'(A,B,C,D,E,F),[A,B],[C,D,E,F]).
eq('eq',[A,B,C],0,[],[A=B,C=1,A>=0,B>=0,C>=0]).
eq('eq',[A,B,C],0,[],[A>=B+1,C=0,A>=0,B>=0,C>=0]).
eq('eq',[A,B,C],0,[],[B>=A+1,C=0,A>=0,B>=0,C>=0]).
eq('neq',[A,B,C],0,[],[A=B,C=0,A>=0,B>=0,C>=0]).
eq('neq',[A,B,C],0,[],[A>=B+1,C=1,A>=0,B>=0,C>=0]).
eq('neq',[A,B,C],0,[],[B>=A+1,C=1,A>=0,B>=0,C>=0]).
eq('lt',[A,B,C],0,[],[B-A>=1,C=1,A>=0,B>=0,C>=0]).
eq('lt',[A,B,C],0,[],[B=<A,C=0,A>=0,B>=0,C>=0]).
eq('leq',[A,B,C],0,[],[A=<B,C=1,A>=0,B>=0,C>=0]).
eq('leq',[A,B,C],0,[],[A-B>=1,C=0,A>=0,B>=0,C>=0]).
eq('gt',[A,B,C],0,[],[A-B>=1,C=1,A>=0,B>=0,C>=0]).
eq('gt',[A,B,C],0,[],[A=<B,C=0,A>=0,B>=0,C>=0]).
eq('geq',[A,B,C],0,[],[B=<A,C=1,A>=0,B>=0,C>=0]).
eq('geq',[A,B,C],0,[],[B-A>=1,C=0,A>=0,B>=0,C>=0]).
eq('neg',[A,B],0,[],[A=0,B=1,A>=0,B>=0]).
eq('neg',[A,B],0,[],[A=1,B=0,A>=0,B>=0]).
eq('and_op',[A,B,C],0,[],[A=0,C=0,A>=0,B>=0,C>=0]).
eq('and_op',[A,B,C],0,[],[A=1,C=B,A>=0,B>=0,C>=0]).
eq('or',[A,B,C],0,[],[A=1,C=1,A>=0,B>=0,C>=0]).
eq('or',[A,B,C],0,[],[A=0,C=B,A>=0,B>=0,C>=0]).
eq('maxNorm',[A,B,A],0,[],[A>=1+B,A>=0,B>=0,A>=0]).
eq('maxNorm',[A,B,B],0,[],[A=<B,A>=0,B>=0,B>=0]).
eq('case_0',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1],1,[],[N=0,M=1,L=0,K=1,J=0,I=0,H=1,G=0,F=0,E=0,D=1,C=0,B=0,A=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0,S>=0,T>=0,U>=0,V>=0,W>=0,X>=0,Y>=0,Z>=0,A1>=0,B1>=0,O>=0,P>=0,Q>=0,R>=0,S>=0,T>=0,U>=0,V>=0,W>=0,X>=0,Y>=0,Z>=0,A1>=0,B1>=0]).
eq('case_0',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1,F1,G1,H1,I1,J1,K1,L1,M1,N1,O1,P1],4,['append'(Q1,R1,S1,T1,U1,V1,W1,X1,Y1,Z1,A2,B2,C2,D2,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,E2,F2,G2,H2,I2,J2,K2,L2,M2,N2,O2,P2,Q2,R2)],[N=S2+D2,M=C2+1,L=T2+B2,K=A2+1,J=U2+Z1,I=V2+Y1,H=X1+1,G=W2+W1,F=X2+V1,E=Y2+U1,D=T1+1,C=Z2+S1,B=A3+R1,A=B3+Q1,C2>=1,A2>=1,X1>=1,T1>=1,S2>=1,U2>=1,X2>=1,B3>=1,P1=S2+R2,O1=Q2+1,N1=T2+P2,M1=O2+1,L1=U2+N2,K1=V2+M2,J1=L2+1,I1=W2+K2,H1=X2+J2,G1=Y2+I2,F1=H2+1,E1=Z2+G2,D1=A3+F2,C1=B3+E2,Q2>=1,O2>=1,L2>=1,H2>=1,S2>=1,U2>=1,X2>=1,B3>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0,S>=0,T>=0,U>=0,V>=0,W>=0,X>=0,Y>=0,Z>=0,A1>=0,B1>=0,C1>=0,D1>=0,E1>=0,F1>=0,G1>=0,H1>=0,I1>=0,J1>=0,K1>=0,L1>=0,M1>=0,N1>=0,O1>=0,P1>=0]).
eq('append',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1,F1,G1,H1,I1,J1,K1,L1,M1,N1,O1,P1],1,['case_0'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1,F1,G1,H1,I1,J1,K1,L1,M1,N1,O1,P1)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0,S>=0,T>=0,U>=0,V>=0,W>=0,X>=0,Y>=0,Z>=0,A1>=0,B1>=0,C1>=0,D1>=0,E1>=0,F1>=0,G1>=0,H1>=0,I1>=0,J1>=0,K1>=0,L1>=0,M1>=0,N1>=0,O1>=0,P1>=0]).
eq('case_1',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1],2,[],[O=0,N=1,M=0,L=1,K=0,J=1,I=0,H=0,G=1,F=0,E=0,E1=0,D1=0,C1=1,B1=0,A1=0,Z=1,Y=0,X=0,W=1,V=0,U=0,T=0,S=1,R=0,Q=0,P=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0,S>=0,T>=0,U>=0,V>=0,W>=0,X>=0,Y>=0,Z>=0,A1>=0,B1>=0,C1>=0,D1>=0,E1>=0]).
eq('case_1',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1],5,['attach'(A,B,C,D,F1,G1,H1,I1,J1,K1,L1,M1,N1,O1,P1,Q1,R1,S1,T1,U1,V1,W1,X1,Y1,Z1,A2,B2,C2,D2,E2,F2)],[O=G2+P1,N=O1+1,M=H2+N1,L=M1+1,K=I2+L1,J=K1+1,I=J2+J1,H=K2+I1,G=H1+1,F=L2+G1,E=M2+F1,O1>=1,M1>=1,K1>=1,H1>=1,G2>=1,H2>=1,J2>=1,M2>=1,N2=G2,O2=D,P2=1,Q2=C+H2,R2=1,S2=B+I2,T2=J2,U2=1,V2=A+K2,W2=L2,X2=M2,Y2=1,G2>=1,H2>=1,J2>=1,M2>=1,D>=1,C>=1,B>=1,A>=1,E1=N2+F2,D1=O2+E2,C1=D2+1,B1=P2+C2,A1=Q2+B2,Z=A2+1,Y=R2+Z1,X=S2+Y1,W=X1+1,V=T2+W1,U=U2+V1,T=V2+U1,S=T1+1,R=W2+S1,Q=X2+R1,P=Y2+Q1,D2>=1,A2>=1,X1>=1,T1>=1,P2>=1,R2>=1,U2>=1,Y2>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0,S>=0,T>=0,U>=0,V>=0,W>=0,X>=0,Y>=0,Z>=0,A1>=0,B1>=0,C1>=0,D1>=0,E1>=0]).
eq('attach',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1],1,['case_1'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0,S>=0,T>=0,U>=0,V>=0,W>=0,X>=0,Y>=0,Z>=0,A1>=0,B1>=0,C1>=0,D1>=0,E1>=0]).
eq('case_2',[A,B,C,D,E],2,[],[B=0,A=1,E=0,D=1,C=0,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_2',[A,B,C,D,E],5,['attach'(F,G,H,I,J,K,L,M,N,O,P,Q,R,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1,F1,G1,H1),'pairs'(Q,R,I1,J1,K1),'append'(L1,M1,N1,O1,P1,Q1,R1,S1,T1,B1,C1,H1,U1,H1,V1,W1,X1,Y1,Z1,A2,B2,C2,D2,I1,J1,K1,E2,K1,F2,G2,H2,I2,J2,K2,L2,M2,N2,C,D,O2,P2,E)],[B=H+R,A=Q+1,Q>=1,H>=1,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('pairs',[A,B,C,D,E],1,['case_2'(A,B,C,D,E)],[A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_3',[A,B,C,D,E,C,D,E],1,[],[B=0,A=1,A>=0,B>=0,C>=0,D>=0,E>=0,C>=0,D>=0,E>=0]).
eq('case_3',[A,B,C,D,E,F,G,H],5,['attach'(I,J,K,L,M,N,O,P,Q,R,S,T,U,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1,F1,G1,H1,I1,J1,K1),'append'(L1,M1,N1,O1,P1,Q1,R1,S1,T1,E1,F1,K1,U1,K1,V1,W1,X1,Y1,Z1,A2,B2,C2,D2,C,D,E,E2,E,F2,G2,H2,I2,J2,K2,L2,M2,N2,O2,P2,Q2,R2,S2),'pairsAux'(T,U,O2,P2,S2,F,G,H)],[B=K+U,A=T+1,T>=1,K>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('pairsAux',[A,B,C,D,E,F,G,H],1,['case_3'(A,B,C,D,E,F,G,H)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('case_4',[A,B,C,D,E],2,[],[B=0,A=1,E=0,D=1,C=0,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_4',[A,B,C,D,E],5,['pairsp'(F,G,H,I,J),'attach'(K,L,M,N,O,P,Q,R,S,T,U,F,G,F,G,V,W,X,Y,Z,A1,B1,C1,D1,E1,F1,G1,H1,I1,J1,K1),'append'(L1,M1,N1,O1,P1,Q1,R1,S1,T1,H,I,J,U1,J,V1,W1,X1,Y1,Z1,A2,B2,C2,D2,E1,F1,K1,E2,K1,F2,G2,H2,I2,J2,K2,L2,M2,N2,C,D,O2,P2,E)],[B=M+G,A=F+1,F>=1,M>=1,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('pairsp',[A,B,C,D,E],1,['case_4'(A,B,C,D,E)],[A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_5',[A,B,C,D,E,F],2,[],[B=0,A=1,F=0,E=1,D=0,C=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0]).
eq('case_5',[A,B,C,D,E,F],6,['pairs'(G,H,I,J,K),'attach'(L,M,N,O,P,Q,R,S,I,J,K,T,U,V,K,W,X,Y,Z,A1,B1,C1,D1,E1,F1,G1,H1,I1,J1,K1,L1),'triples'(G,H,M1,N1,O1,P1),'append'(Q1,R1,S1,T1,U1,B1,C1,D1,L1,V1,W1,X1,Y1,L1,Z1,A2,B2,C2,D2,M1,N1,O1,P1,E2,F2,G2,H2,P1,I2,J2,K2,L2,M2,C,D,E,N2,O2,P2,Q2,R2,F)],[B=M+H,A=G+1,G>=1,M>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0]).
eq('triples',[A,B,C,D,E,F],1,['case_5'(A,B,C,D,E,F)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0]).
eq('case_6',[A,B,C,D,E,F,G],2,[],[B=0,A=1,G=0,F=1,E=0,D=0,C=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_6',[A,B,C,D,E,F,G],6,['triples'(H,I,J,K,L,M),'attach'(N,O,P,Q,J,K,L,M,R,S,T,U,V,W,M,X,Y,Z,A1,B1,C1,D1,E1,F1,G1,H1,I1,J1,K1,L1,M1),'quadruples'(H,I,N1,O1,P1,Q1,R1),'append'(X,Y,Z,A1,M1,S1,T1,U1,V1,W1,X1,Y1,Z1,M1,N1,O1,P1,Q1,R1,A2,B2,C2,D2,E2,F2,G2,H2,R1,C,D,E,F,I2,J2,K2,L2,M2,N2,O2,P2,Q2,G)],[B=N+I,A=H+1,H>=1,N>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('quadruples',[A,B,C,D,E,F,G],1,['case_6'(A,B,C,D,E,F,G)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [append/42,case_0/42]
1. recursive  : [attach/31,case_1/31]
2. recursive [non_tail] : [case_2/5,pairs/5]
3. recursive  : [case_3/8,pairsAux/8]
4. recursive [non_tail] : [case_4/5,pairsp/5]
5. recursive [non_tail] : [case_5/6,triples/6]
6. recursive [non_tail] : [case_6/7,quadruples/7]
Warning: the following predicates are never called:[and_op/3,eq/3,geq/3,gt/3,leq/3,lt/3,maxNorm/3,neg/2,neq/3,or/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into append/42
1. SCC is partially evaluated into attach/31
2. SCC is partially evaluated into pairs/5
3. SCC is partially evaluated into pairsAux/8
4. SCC is partially evaluated into pairsp/5
5. SCC is partially evaluated into triples/6
6. SCC is partially evaluated into quadruples/7

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations append/42 
* CE 4 is refined into CE [15] 
* CE 3 is refined into CE [16] 


#### Refined cost equations append/42 
* CE 15: append(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1) = 2
     [B1>=0,A1>=0,Z>=0,Y>=0,X>=0,W>=0,V>=0,U>=0,T>=0,S>=0,R>=0,Q>=0,P>=0,O>=0,N=0,M=1,L=0,K=1,J=0,I=0,H=1,G=0,F=0,E=0,D=1,C=0,B=0,A=0] 
* CE 16: append(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1,F1,G1,H1,I1,J1,K1,L1,M1,N1,O1,P1) = 5+ append(Q1,R1,S1,T1,U1,V1,W1,X1,Y1,Z1,A2,B2,C2,D2,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,E2,F2,G2,H2,I2,J2,K2,L2,M2,N2,O2,P2,Q2,R2)
     [P1+D2>=R2,N1+B2>=P2,L1+Z1>=N2,K1+Y1>=M2,I1+W1>=K2,H1+V1>=J2,G1+U1>=I2,E1+S1>=G2,D1+R1>=F2,C1+Q1>=E2,P1>=R2+1,L1>=N2+1,H1>=J2+1,C1>=E2+1,Q2>=1,O2>=1,L2>=1,H2>=1,C2>=1,A2>=1,X1>=1,T1>=1,P1>=0,N1>=0,L1>=0,K1>=0,I1>=0,H1>=0,G1>=0,E1>=0,D1>=0,C1>=0,B1>=0,A1>=0,Z>=0,Y>=0,X>=0,W>=0,V>=0,U>=0,T>=0,S>=0,R>=0,Q>=0,P>=0,O>=0,N+R2=P1+D2,L+P2=N1+B2,J+N2=L1+Z1,I+M2=K1+Y1,G+K2=I1+W1,F+J2=H1+V1,E+I2=G1+U1,C+G2=E1+S1,B+F2=D1+R1,A+E2=C1+Q1,Q2+1=O1,O2+1=M1,L2+1=J1,H2+1=F1,C2+1=M,A2+1=K,X1+1=H,T1+1=D] 

### Cost equations --> "Loop" of append/42 
* CEs [16] --> Loop 15 
* CEs [15] --> Loop 16 

#### Loops of append/42 
* Loop 15: append(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1,F1,G1,H1,I1,J1,K1,L1,M1,N1,O1,P1)->  append(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,O',P',Q',R',S',T',U',V',W',X',Y',Z',A1',B1')
                  [P1+N'>=B1',N1+L'>=Z',L1+J'>=X',K1+I'>=W',I1+G'>=U',H1+F'>=T',G1+E'>=S',E1+C'>=Q',D1+B'>=P',C1+A'>=O',P1>=B1'+1,L1>=X'+1,H1>=T'+1,C1>=O'+1,A1'>=1,Y'>=1,V'>=1,R'>=1,M'>=1,K'>=1,H'>=1,D'>=1,P1>=0,N1>=0,L1>=0,K1>=0,I1>=0,H1>=0,G1>=0,E1>=0,D1>=0,C1>=0,B1>=0,A1>=0,Z>=0,Y>=0,X>=0,W>=0,V>=0,U>=0,T>=0,S>=0,R>=0,Q>=0,P>=0,O>=0,P1+N'=N+B1',N1+L'=L+Z',L1+J'=J+X',K1+I'=I+W',I1+G'=G+U',H1+F'=F+T',G1+E'=E+S',E1+C'=C+Q',D1+B'=B+P',C1+A'=A+O',A1'+1=O1,Y'+1=M1,V'+1=J1,R'+1=F1,M'+1=M,K'+1=K,H'+1=H,D'+1=D] 
* Loop 16: append(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1) [B1>=0,A1>=0,Z>=0,Y>=0,X>=0,W>=0,V>=0,U>=0,T>=0,S>=0,R>=0,Q>=0,P>=0,O>=0,N=0,M=1,L=0,K=1,J=0,I=0,H=1,G=0,F=0,E=0,D=1,C=0,B=0,A=0] 

### Ranking functions of CR append(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1,F1,G1,H1,I1,J1,K1,L1,M1,N1,O1,P1) 
* RF of phase [15]: [A+1,D-1,F+1,H-1,J+1,K-1,M-1,N+1]

#### Partial ranking functions of CR append(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1,F1,G1,H1,I1,J1,K1,L1,M1,N1,O1,P1) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    A+1
    D-1
    F+1
    H-1
    J+1
    K-1
    M-1
    N+1

Discarded unfeasible chain [[15]]...(Non-terminating chain proved terminating)

### Resulting Chains:append(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1,F1,G1,H1,I1,J1,K1,L1,M1,N1,O1,P1) 
* [[15],16]
* [16]


### Merging Chains  append/42 into  External patterns of execution 
* [[16]] --> 1 
* [[16,[15]]] --> 2 


### Specialization of cost equations attach/31 
* CE 2 is refined into CE [17] 
* CE 1 is refined into CE [18] 


#### Refined cost equations attach/31 
* CE 17: attach(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1) = 3
     [D>=0,C>=0,B>=0,A>=0,E1=0,D1=0,C1=1,B1=0,A1=0,Z=1,Y=0,X=0,W=1,V=0,U=0,T=0,S=1,R=0,Q=0,P=0,O=0,N=1,M=0,L=1,K=0,J=1,I=0,H=0,G=1,F=0,E=0] 
* CE 18: attach(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1) = 6+ attach(A,B,C,D,F1,G1,H1,I1,J1,K1,L1,M1,N1,O1,P1,Q1,R1,S1,T1,U1,V1,W1,X1,Y1,Z1,A2,B2,C2,D2,E2,F2)
     [E1+P1>=F2,V+J1>=W1,R+G1>=S1,Q+F1>=R1,D+E2>=0,E1>=F2+1,V>=W1+1,Q>=R1+1,M>=N1+1,D2>=1,C2+1>=0,A2>=1,Z1+1>=0,X1>=1,V1+1>=0,T1>=1,Q1+1>=0,O1>=1,M1>=1,K1>=1,H1>=1,E1>=0,A1>=0,X>=0,V>=0,T>=0,R>=0,Q>=0,M>=0,K>=0,H>=0,D>=1,C>=1,B>=1,A>=1,A1+N1=C+M+B2,X+L1=B+K+Y1,T+I1=A+H+U1,O+F2=E1+P1,I+W1=V+J1,F+S1=R+G1,E+R1=Q+F1,D+E2=D1,D2+1=C1,C2+1=B1,A2+1=Z,Z1+1=Y,X1+1=W,V1+1=U,T1+1=S,Q1+1=P,O1+1=N,M1+1=L,K1+1=J,H1+1=G] 

### Cost equations --> "Loop" of attach/31 
* CEs [18] --> Loop 17 
* CEs [17] --> Loop 18 

#### Loops of attach/31 
* Loop 17: attach(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1)->  attach(A,B,C,D,A',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T',U',V',W',X',Y',Z',A1')
                  [E1+K'>=A1',V+E'>=R',R+B'>=N',Q+A'>=M',D+Z'>=0,E1>=A1'+1,V>=R'+1,Q>=M'+1,M>=I'+1,Y'>=1,X'+1>=0,V'>=1,U'+1>=0,S'>=1,Q'+1>=0,O'>=1,L'+1>=0,J'>=1,H'>=1,F'>=1,C'>=1,E1>=0,A1>=0,X>=0,V>=0,T>=0,R>=0,Q>=0,M>=0,K>=0,H>=0,D>=1,C>=1,B>=1,A>=1,C+M+W'=A1+I',X+G'=B+K+T',T+D'=A+H+P',E1+K'=O+A1',V+E'=I+R',R+B'=F+N',Q+A'=E+M',D+Z'=D1,Y'+1=C1,X'+1=B1,V'+1=Z,U'+1=Y,S'+1=W,Q'+1=U,O'+1=S,L'+1=P,J'+1=N,H'+1=L,F'+1=J,C'+1=G] 
* Loop 18: attach(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1) [D>=0,C>=0,B>=0,A>=0,E1=0,D1=0,C1=1,B1=0,A1=0,Z=1,Y=0,X=0,W=1,V=0,U=0,T=0,S=1,R=0,Q=0,P=0,O=0,N=1,M=0,L=1,K=0,J=1,I=0,H=0,G=1,F=0,E=0] 

### Ranking functions of CR attach(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1) 
* RF of phase [17]: [E+1,G-1,I+1,J-1,L-1,M+1,N-1,O+1]

#### Partial ranking functions of CR attach(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1) 
* Partial RF of phase [17]:
  - RF of loop [17:1]:
    E+1
    G-1
    I+1
    J-1
    L-1
    M+1
    N-1
    O+1

Discarded unfeasible chain [[17]]...(Non-terminating chain proved terminating)

### Resulting Chains:attach(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1) 
* [[17],18]
* [18]


### Merging Chains  attach/31 into  External patterns of execution 
* [[18]] --> 1 
* [[18,[17]]] --> 2 


### Specialization of cost equations pairs/5 
* CE 6 is refined into CE [19] 
* CE 5 is refined into CE [20,21] 


#### Refined cost equations pairs/5 
* CE 19: pairs(A,B,C,D,E) = 3
     [E=0,D=1,C=0,B=0,A=1] 
* CE 20: pairs(A,B,C,D,E) = 6+ attach(F,G,B,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1,F1,G1,H1,I1):1+ pairs(J1,K1,C,D,E)+ append(L1,M1,N1,O1,P1,Q1,R1,S1,T1,U1,V1,W1,X1,Y1,Z1,A2,B2,C2,D2,E2,F2,G2,H2,C,D,E,I2,E,Z1,A2,B2,C2,D2,E2,F2,G2,H2,C,D,E,I2,E):1
     [I2>=0,E>=0,D>=0,C>=0,H2>=0,G2>=0,F2>=0,E2>=0,D2>=0,C2>=0,B2>=0,A2>=0,Z1>=0,H>=0,B>=1,G>=0,F>=0,K1=0,J1=1,Y1=0,X1=1,W1=0,V1=1,U1=0,T1=0,S1=1,R1=0,Q1=0,P1=0,O1=1,N1=0,M1=0,L1=0,I1=0,H1=0,G1=1,F1=0,E1=0,D1=1,C1=0,B1=0,A1=1,Z=0,Y=0,X=0,W=1,V=0,U=0,T=0,S=0,R=1,Q=0,P=1,O=0,N=1,M=0,L=0,K=1,J=0,I=0,A=2] 
* CE 21: pairs(A,B,C,D,E) = 6+ attach(F,G,H,I,J,K,L,M,N,L,O,L,P,L,P,Q,J,K,L,R,S,N,L,T,U,L,V,W,L,X,P):2+ pairs(L,P,Y,Z,A1)+ append(B1,C1,D1,L,E1,F1,G1,L,H1,I1,L,P,L,P,J1,K1,L1,M1,N1,O1,P1,Q1,R1,S1,T1,U1,V1,W1,X1,Y1,Z1,A2,B2,C2,D2,E2,F2,C,D,E,G2,E):2
     [V+2>=H+L+P,T+2>=G+L+O,R+2>=F+L+M,X+2>=I+L,E>=P,F2>=H1,G2>=L,D>=L,C+1>=L,E2>=L,A2>=L,P+1>=L,F1+1>=L,B1+1>=L,N+1>=L,J+1>=L,D2>=G1,C2>=F1,B2>=E1,Z1>=D1,Y1>=C1,X1>=B1,H1>=0,L>=2,G1>=0,E1>=0,D1>=0,C1>=0,K>=0,O>=0,M>=0,I>=1,H>=1,G>=1,F>=1,L+V1=G2+1,L+Z=D+1,L+T1=D+1,L+Y=C+1,L+S1=C+1,L+Q1=E2+1,L+M1=A2+1,E=P+A1,E=P+W1,E=P+U1,F2=H1+R1,D2=G1+P1,C2=F1+O1,B2=E1+N1,Z1=D1+L1,Y1=C1+K1,X1=B1+J1,H+P=B,L=I1+1,L=W+1,L=U+1,L=S+1,L=Q+1,L+1=A] 

### Cost equations --> "Loop" of pairs/5 
* CEs [21] --> Loop 19 
* CEs [20] --> Loop 20 
* CEs [19] --> Loop 21 

#### Loops of pairs/5 
* Loop 19: pairs(A,B,C,D,E)->  pairs(A',B',C',D',E')
                  [E>=B',B>=B'+1,B'+2>=A,D+1>=A,C+2>=A,A>=3,B'+E'=E,A+D'=D+2,A+C'=C+2,A=A'+1] 
* Loop 20: pairs(A,B,C,D,E)->  pairs(A',B',C,D,E)
                  [E>=0,D>=0,C>=0,B>=1,B'=0,A'=1,A=2] 
* Loop 21: pairs(A,B,C,D,E) [E=0,D=1,C=0,B=0,A=1] 

### Ranking functions of CR pairs(A,B,C,D,E) 
* RF of phase [19]: [A-2,B-1]

#### Partial ranking functions of CR pairs(A,B,C,D,E) 
* Partial RF of phase [19]:
  - RF of loop [19:1]:
    A-2
    B-1

Discarded unfeasible chain [[19]]...(Non-terminating chain proved terminating)

### Resulting Chains:pairs(A,B,C,D,E) 
* [[19],20,21]
* [21]
* [20,21]


### Merging Chains  pairs/5 into  External patterns of execution 
* [[21]] --> 1 
* [[21,20]] --> 2 
* [[21,20,[19]]] --> 3 


### Specialization of cost equations pairsAux/8 
* CE 8 is refined into CE [22] 
* CE 7 is refined into CE [23,24] 


#### Refined cost equations pairsAux/8 
* CE 22: pairsAux(A,B,C,D,E,C,D,E) = 2
     [E>=0,D>=0,C>=0,B=0,A=1] 
* CE 23: pairsAux(A,B,C,D,E,F,G,H) = 6+ attach(I,J,B,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1,F1,G1,H1,I1,J1,K1,L1):1+ append(M1,N1,O1,P1,Q1,R1,S1,T1,U1,V1,W1,X1,Y1,Z1,A2,B2,C2,D2,E2,F2,G2,H2,I2,C,D,E,J2,E,A2,B2,C2,D2,E2,F2,G2,H2,I2,C,D,E,J2,E):1+ pairsAux(K2,L2,C,D,E,F,G,H)
     [J2>=0,E>=0,D>=0,C>=0,I2>=0,H2>=0,G2>=0,F2>=0,E2>=0,D2>=0,C2>=0,B2>=0,A2>=0,K>=0,B>=1,J>=0,I>=0,H>=0,G>=0,F>=0,L2=0,K2=1,Z1=0,Y1=1,X1=0,W1=1,V1=0,U1=0,T1=1,S1=0,R1=0,Q1=0,P1=1,O1=0,N1=0,M1=0,L1=0,K1=0,J1=1,I1=0,H1=0,G1=1,F1=0,E1=0,D1=1,C1=0,B1=0,A1=0,Z=1,Y=0,X=0,W=0,V=0,U=1,T=0,S=1,R=0,Q=1,P=0,O=0,N=1,M=0,L=0,A=2] 
* CE 24: pairsAux(A,B,C,D,E,F,G,H) = 6+ attach(I,J,K,L,M,N,O,P,Q,O,R,O,S,O,S,T,M,N,O,U,V,Q,O,W,X,O,Y,Z,O,A1,S):2+ append(B1,C1,D1,O,E1,F1,G1,O,H1,I1,O,S,O,S,J1,K1,L1,M1,N1,O1,P1,Q1,R1,S1,T1,U1,V1,W1,X1,Y1,Z1,A2,B2,C2,D2,E2,F2,G2,H2,I2,J2,I2):2+ pairsAux(O,S,G2,H2,I2,F,G,H)
     [Y+2>=K+O+S,W+2>=J+O+R,U+2>=I+O+P,A1+2>=L+O,I2>=S,F2>=H1,J2>=O,H2>=O,G2+1>=O,E2>=O,A2>=O,S+1>=O,F1+1>=O,B1+1>=O,Q+1>=O,M+1>=O,D2>=G1,C2>=F1,B2>=E1,Z1>=D1,Y1>=C1,X1>=B1,H1>=0,O>=2,G1>=0,E1>=0,D1>=0,C1>=0,N>=0,R>=0,P>=0,L>=1,K>=1,J>=1,I>=1,H>=0,G>=0,F>=0,O+V1=J2+1,O+T1=H2+1,D+O=H2+1,O+S1=G2+1,C+O=G2+1,O+Q1=E2+1,O+M1=A2+1,I2=S+W1,I2=S+U1,F2=H1+R1,D2=G1+P1,C2=F1+O1,B2=E1+N1,Z1=D1+L1,Y1=C1+K1,X1=B1+J1,I2=E+S,K+S=B,O=I1+1,O=Z+1,O=X+1,O=V+1,O=T+1,O+1=A] 

### Cost equations --> "Loop" of pairsAux/8 
* CEs [24] --> Loop 22 
* CEs [23] --> Loop 23 
* CEs [22] --> Loop 24 

#### Loops of pairsAux/8 
* Loop 22: pairsAux(A,B,C,D,E,F,G,H)->  pairsAux(A',B',C',D',E',F,G,H)
                  [B>=B'+1,B'+2>=A,H>=0,G>=0,F>=0,E>=0,D>=1,C>=0,A>=3,E+B'=E',A+D=D'+2,A+C=C'+2,A=A'+1] 
* Loop 23: pairsAux(A,B,C,D,E,F,G,H)->  pairsAux(A',B',C,D,E,F,G,H)
                  [H>=0,G>=0,F>=0,E>=0,D>=0,C>=0,B>=1,B'=0,A'=1,A=2] 
* Loop 24: pairsAux(A,B,C,D,E,C,D,E) [E>=0,D>=0,C>=0,B=0,A=1] 

### Ranking functions of CR pairsAux(A,B,C,D,E,F,G,H) 
* RF of phase [22]: [A-2,B-1]

#### Partial ranking functions of CR pairsAux(A,B,C,D,E,F,G,H) 
* Partial RF of phase [22]:
  - RF of loop [22:1]:
    A-2
    B-1

Discarded unfeasible chain [[22]]...(Non-terminating chain proved terminating)

### Resulting Chains:pairsAux(A,B,C,D,E,F,G,H) 
* [[22],23,24]
* [24]
* [23,24]


### Merging Chains  pairsAux/8 into  External patterns of execution 
* [[24]] --> 1 
* [[24,23]] --> 2 
* [[24,23,[22]]] --> 3 


### Specialization of cost equations pairsp/5 
* CE 10 is refined into CE [25] 
* CE 9 is refined into CE [26,27,28,29] 


#### Refined cost equations pairsp/5 
* CE 25: pairsp(A,B,C,D,E) = 3
     [E=0,D=1,C=0,B=0,A=1] 
* CE 26: pairsp(A,B,C,D,E) = 6+ pairsp(F,G,H,I,J)+ attach(K,L,B,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1,F1,G1,H1,I1,J1,K1,L1,M1,N1):1+ append(O1,P1,Q1,R1,S1,T1,U1,V1,W1,X1,Y1,Z1,A2,B2,C2,D2,E2,F2,G2,H2,I2,J2,K2,L2,M2,N2,O2,P2,C2,D2,E2,F2,G2,H2,I2,J2,K2,Q2,R2,S2,O2,T2):1
     [O2>=0,K2>=0,J2>=0,I2>=0,H2>=0,G2>=0,F2>=0,E2>=0,D2>=0,C2>=0,M>=0,B>=1,L>=0,K>=0,J=0,I=1,H=0,G=0,F=1,T2=0,S2=0,R2=1,Q2=0,P2=0,N2=0,M2=1,L2=0,B2=0,A2=1,Z1=0,Y1=1,X1=0,W1=0,V1=1,U1=0,T1=0,S1=0,R1=1,Q1=0,P1=0,O1=0,N1=0,M1=0,L1=1,K1=0,J1=0,I1=1,H1=0,G1=0,F1=1,E1=0,D1=0,C1=0,B1=1,A1=0,Z=0,Y=0,X=0,W=1,V=0,U=1,T=0,S=1,R=0,Q=0,P=1,O=0,N=0,E=0,D=1,C=0,A=2] 
* CE 27: pairsp(A,B,C,D,E) = 6+ pairsp(F,G,C,D,E)+ attach(H,I,B,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1,F1,G1,H1,I1,J1,K1):1+ append(L1,M1,N1,D,O1,P1,Q1,D,R1,C,D,E,D,E,S1,T1,U1,V1,W1,X1,Y1,Z1,A2,B2,C2,D2,E2,F2,G2,H2,I2,J2,K2,L2,M2,N2,O2,C,D,E,P2,E):2
     [O2>=R1,P2>=D,E+1>=D,C+1>=D,N2>=D,J2>=D,P1+1>=D,L1+1>=D,M2>=Q1,L2>=P1,K2>=O1,I2>=N1,H2>=M1,G2>=L1,R1>=0,D>=2,Q1>=0,O1>=0,N1>=0,M1>=0,J>=0,B>=1,I>=0,H>=0,D+E2=P2+1,D+Z1=N2+1,D+V1=J2+1,O2=R1+A2,M2=Q1+Y1,L2=P1+X1,K2=O1+W1,I2=N1+U1,H2=M1+T1,G2=L1+S1,G=0,F=1,F2=0,D2=0,C2=1,B2=0,K1=0,J1=0,I1=1,H1=0,G1=0,F1=1,E1=0,D1=0,C1=1,B1=0,A1=0,Z=0,Y=1,X=0,W=0,V=0,U=0,T=1,S=0,R=1,Q=0,P=1,O=0,N=0,M=1,L=0,K=0,A=2] 
* CE 28: pairsp(A,B,C,D,E) = 6+ pairsp(F,E,G,H,I)+ attach(J,K,L,M,N,O,P,Q,R,S,T,U,E,V,E,C,N,O,W,X,C,R,Y,Z,C,A1,B1,C,C1,D1,E):2+ append(E1,F1,G1,H1,I1,J1,K1,L1,M1,N1,O1,P1,Q1,R1,S1,T1,U1,V1,W1,X1,Y1,Z1,A2,C,B2,E,C2,E,S1,T1,U1,V1,W1,X1,Y1,Z1,A2,C,D2,E,C2,E):1
     [B1+1>=C+E+L,Z+1>=C+K+T,X+1>=C+J+Q,D1+1>=C+M,E>=C,R>=C,N>=C,C2>=0,C>=1,A2>=0,Z1>=0,Y1>=0,X1>=0,W1>=0,V1>=0,U1>=0,T1>=0,S1>=0,O>=0,T>=0,Q>=0,M>=1,L>=1,K>=1,J>=1,E+L=B,C+1=F,C+1=D2,C+1=B2,C+1=C1,C+1=A1,C+1=Y,C+1=W,C+1=V,C+1=U,C+1=S,C+1=P,C+1=D,C+2=A,I=0,H=1,G=0,R1=0,Q1=1,P1=0,O1=1,N1=0,M1=0,L1=1,K1=0,J1=0,I1=0,H1=1,G1=0,F1=0,E1=0] 
* CE 29: pairsp(A,B,C,D,E) = 6+ pairsp(F,G,H,I,J)+ attach(K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,O,P,A1,B1,C1,S,D1,E1,F1,G1,H1,I1,J1,K1,L1):2+ append(M1,N1,O1,I,P1,Q1,R1,I,S1,H,I,J,I,J,T1,U1,V1,W1,X1,Y1,Z1,A2,B2,C2,D2,E2,F2,G2,H2,I2,J2,K2,L2,M2,N2,O2,P2,C,Q2,E,R2,E):2
     [H1+H+J+1>=C+E+M,E1+H+1>=C+L+U,B1+H+1>=C+K+R,E+H>=C+J,K1+H+1>=C+N,S+H>=C,O+H>=C,C>=H+1,P2>=S1,R2>=I,O2>=I,K2>=I,J+1>=I,H+1>=I,Q1+1>=I,M1+1>=I,N2>=R1,M2>=Q1,L2>=P1,J2>=O1,I2>=N1,H2>=M1,S1>=0,I>=2,R1>=0,P1>=0,O1>=0,N1>=0,P>=0,U>=0,R>=0,N>=1,M>=1,L>=1,K>=1,C+I=H+Q2,C+I=D+H,E+M=B+J,I+F2=R2+1,I+A2=O2+1,I+W1=K2+1,E=J+G,E=J+G2,E=J+E2,C+1=H+F,C+1=H+D2,C=H+C2,P2=S1+B2,N2=R1+Z1,M2=Q1+Y1,L2=P1+X1,J2=O1+V1,I2=N1+U1,H2=M1+T1,E=L1+J,C+1=J1+H,C=I1+H,C+1=G1+H,C=F1+H,C+1=D1+H,C=C1+H,C+1=A1+H,C=Z+H,E=Y+J,C+1=X+H,E=W+J,C+1=V+H,C+1=T+H,C+1=Q+H,C+2=A+H] 

### Cost equations --> "Loop" of pairsp/5 
* CEs [29] --> Loop 25 
* CEs [28] --> Loop 26 
* CEs [27] --> Loop 27 
* CEs [26] --> Loop 28 
* CEs [25] --> Loop 29 

#### Loops of pairsp/5 
* Loop 25: pairsp(A,B,C,D,E)->  pairsp(A',B',C',D',E')
                  [A+E>=D+B'+1,B>=B'+1,C+1>=D,B'+2>=A,D>=A,A>=3,B'+E'=E,A+D'=D+2,A+C'=C+2,A=A'+1] 
* Loop 26: pairsp(A,B,C,D,E)->  pairsp(A',E,B',C',D')
                  [B>=E+1,E+2>=A,A>=3,A=A'+1,A=D+1,A=C+2,D'=0,C'=1,B'=0] 
* Loop 27: pairsp(A,B,C,D,E)->  pairsp(A',B',C,D,E)
                  [E+1>=D,C+1>=D,D>=2,B>=1,B'=0,A'=1,A=2] 
* Loop 28: pairsp(A,B,C,D,E)->  pairsp(A',B',C',D',E')
                  [B>=1,E'=0,D'=1,C'=0,B'=0,A'=1,E=0,D=1,C=0,A=2] 
* Loop 29: pairsp(A,B,C,D,E) [E=0,D=1,C=0,B=0,A=1] 

### Ranking functions of CR pairsp(A,B,C,D,E) 
* RF of phase [25]: [A-2,B-1]

#### Partial ranking functions of CR pairsp(A,B,C,D,E) 
* Partial RF of phase [25]:
  - RF of loop [25:1]:
    A-2
    B-1

Discarded unfeasible chain [[25]]...(Non-terminating chain proved terminating)

### Resulting Chains:pairsp(A,B,C,D,E) 
* [[25],26,28,29]
* [29]
* [28,29]
* [26,28,29]


### Merging Chains  pairsp/5 into  External patterns of execution 
* [[29]] --> 1 
* [[29,28]] --> 2 
* [[29,28,26]] --> 3 
* [[29,28,26,[25]]] --> 4 


### Specialization of cost equations triples/6 
* CE 12 is refined into CE [30] 
* CE 11 is refined into CE [31,32,33] 


#### Refined cost equations triples/6 
* CE 30: triples(A,B,C,D,E,F) = 3
     [F=0,E=1,D=0,C=0,B=0,A=1] 
* CE 31: triples(A,B,C,D,E,F) = 7+ pairs(G,H,I,J,K):1+ attach(L,B,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1,F1,G1,H1,I1,J1,K1,L1,M1,N1,O1):1+ triples(P1,Q1,C,D,E,F)+ append(R1,S1,T1,U1,V1,W1,X1,Y1,Z1,A2,B2,C2,D2,E2,F2,G2,H2,I2,J2,C,D,E,F,K2,L2,M2,N2,F,F2,G2,H2,I2,J2,C,D,E,F,K2,L2,M2,N2,F):1
     [N2>=0,M2>=0,L2>=0,K2>=0,F>=0,E>=0,D>=0,C>=0,J2>=0,I2>=0,H2>=0,G2>=0,F2>=0,N>=0,M>=0,B>=1,L>=0,Q1=0,P1=1,E2=0,D2=1,C2=0,B2=1,A2=0,Z1=0,Y1=1,X1=0,W1=0,V1=0,U1=1,T1=0,S1=0,R1=0,O1=0,N1=0,M1=1,L1=0,K1=0,J1=1,I1=0,H1=0,G1=1,F1=0,E1=0,D1=0,C1=1,B1=0,A1=0,Z=0,Y=0,X=1,W=0,V=1,U=0,T=1,S=0,R=0,Q=1,P=0,O=0,K=0,J=1,I=0,H=0,G=1,A=2] 
* CE 32: triples(A,B,C,D,E,F) = 7+ pairs(G,H,I,J,K):2+ attach(L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1,F1,G1,H1,I1,J1,K1,L1,M1,N1,O1,P1):1+ triples(Q1,H,C,D,E,F)+ append(R1,S1,T1,U1,V1,W1,X1,Y1,Z1,A2,B2,C2,D2,E2,F2,G2,H2,I2,J2,C,D,E,F,K2,L2,M2,N2,F,F2,G2,H2,I2,J2,C,D,E,F,K2,L2,M2,N2,F):1
     [N2>=0,M2>=0,L2>=0,K2>=0,F>=0,E>=0,D>=0,C>=0,J2>=0,I2>=0,H2>=0,G2>=0,F2>=0,O>=0,N>=0,M>=1,L>=0,H>=1,H+M=B,Q1=2,E2=0,D2=1,C2=0,B2=1,A2=0,Z1=0,Y1=1,X1=0,W1=0,V1=0,U1=1,T1=0,S1=0,R1=0,P1=0,O1=0,N1=1,M1=0,L1=0,K1=1,J1=0,I1=0,H1=1,G1=0,F1=0,E1=0,D1=1,C1=0,B1=0,A1=0,Z=0,Y=1,X=0,W=1,V=0,U=1,T=0,S=0,R=1,Q=0,P=0,K=0,J=1,I=0,G=2,A=3] 
* CE 33: triples(A,B,C,D,E,F) = 7+ pairs(G,H,I,J,K):3+ attach(L,M,N,O,P,Q,J,R,S,J,K,J,T,J,K,U,P,Q,J,V,W,X,J,Y,Z,J,A1,B1,J,C1,K):2+ triples(G,H,D1,E1,F1,G1)+ append(H1,I1,J1,J,K1,L1,M1,J,K,N1,J,O1,J,K,P1,Q1,R1,S1,T1,U1,V1,W1,X1,Y1,Z1,A2,B2,C2,D2,E2,F2,G2,H2,C,D,E,F,I2,J2,K2,L2,F):2
     [A1+2>=J+N+T,Y+2>=J+K+M,V+2>=J+L+R,C1+2>=J+O,K2>=O1,I2>=N1,F>=K,L2>=J,J2>=J,E>=J,D+1>=J,C+1>=J,G2>=J,N1+1>=J,K+1>=J,H1+1>=J,P+1>=J,T+1>=J,H2>=K1,F2>=J1,E2>=I1,D2>=H1,J+1>=G,H+1>=G,O1>=0,K1>=0,J1>=0,I1>=0,Q>=0,R>=0,O>=1,N>=1,M>=1,L>=1,G>=3,J+B2=L2+1,J+Z1=J2+1,J+F1=E+1,J+W1=E+1,J+E1=D+1,J+V1=D+1,J+D1=C+1,J+U1=C+1,J+S1=G2+1,K2=O1+A2,I2=N1+Y1,F=K+G1,F=K+C2,F=K+X1,H2=K1+T1,F2=J1+R1,E2=I1+Q1,D2=H1+P1,H+M=B,J=M1+1,J=L1+1,J=B1+1,J=Z+1,J=X+1,J=W+1,J=U+1,J=S+1,J=I+1,G+1=A] 

### Cost equations --> "Loop" of triples/6 
* CEs [33] --> Loop 30 
* CEs [32] --> Loop 31 
* CEs [31] --> Loop 32 
* CEs [30] --> Loop 33 

#### Loops of triples/6 
* Loop 30: triples(A,B,C,D,E,F)->  triples(A',B',C',D',E',F')
                  [F+C'>=C+F',E+C'>=C+1,D+C'>=C,C+3>=A+C',B>=B'+1,B'+2>=A,F'>=0,C'>=0,A>=4,E+C'=C+E',D+C'=C+D',A=A'+1] 
* Loop 31: triples(A,B,C,D,E,F)->  triples(A',B',C,D,E,F)
                  [B>=B'+1,B'>=1,F>=0,E>=0,D>=0,C>=0,A'=2,A=3] 
* Loop 32: triples(A,B,C,D,E,F)->  triples(A',B',C,D,E,F)
                  [F>=0,E>=0,D>=0,C>=0,B>=1,B'=0,A'=1,A=2] 
* Loop 33: triples(A,B,C,D,E,F) [F=0,E=1,D=0,C=0,B=0,A=1] 

### Ranking functions of CR triples(A,B,C,D,E,F) 
* RF of phase [30]: [A-3,B-2]

#### Partial ranking functions of CR triples(A,B,C,D,E,F) 
* Partial RF of phase [30]:
  - RF of loop [30:1]:
    A-3
    B-2

Discarded unfeasible chain [[30]]...(Non-terminating chain proved terminating)

### Resulting Chains:triples(A,B,C,D,E,F) 
* [[30],31,32,33]
* [33]
* [32,33]
* [31,32,33]


### Merging Chains  triples/6 into  External patterns of execution 
* [[33]] --> 1 
* [[33,32]] --> 2 
* [[33,32,31]] --> 3 
* [[33,32,31,[30]]] --> 4 


### Specialization of cost equations quadruples/7 
* CE 14 is refined into CE [34] 
* CE 13 is refined into CE [35,36,37,38] 


#### Refined cost equations quadruples/7 
* CE 34: quadruples(A,B,C,D,E,F,G) = 3
     [G=0,F=1,E=0,D=0,C=0,B=0,A=1] 
* CE 35: quadruples(A,B,C,D,E,F,G) = 7+ triples(H,I,J,K,L,M):1+ attach(B,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1,F1,G1,H1,I1,J1,K1,L1,M1,N1,O1,P1,Q1):1+ quadruples(R1,S1,C,D,E,F,G)+ append(T1,U1,V1,W1,X1,Y1,Z1,A2,B2,C2,D2,E2,F2,G2,C,D,E,F,G,H2,I2,J2,K2,L2,M2,N2,O2,G,C,D,E,F,G,H2,I2,J2,K2,L2,M2,N2,O2,G):1
     [O2>=0,N2>=0,M2>=0,L2>=0,K2>=0,J2>=0,I2>=0,H2>=0,G>=0,F>=0,E>=0,D>=0,C>=0,P>=0,O>=0,N>=0,B>=1,S1=0,R1=1,G2=0,F2=1,E2=0,D2=1,C2=0,B2=0,A2=1,Z1=0,Y1=0,X1=0,W1=1,V1=0,U1=0,T1=0,Q1=0,P1=0,O1=1,N1=0,M1=0,L1=1,K1=0,J1=0,I1=1,H1=0,G1=0,F1=0,E1=1,D1=0,C1=0,B1=0,A1=0,Z=1,Y=0,X=1,W=0,V=1,U=0,T=0,S=1,R=0,Q=0,M=0,L=1,K=0,J=0,I=0,H=1,A=2] 
* CE 36: quadruples(A,B,C,D,E,F,G) = 7+ triples(H,I,J,K,L,M):2+ attach(N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1,F1,G1,H1,I1,J1,K1,L1,M1,N1,O1,P1,Q1,R1):1+ quadruples(S1,I,C,D,E,F,G)+ append(T1,U1,V1,W1,X1,Y1,Z1,A2,B2,C2,D2,E2,F2,G2,C,D,E,F,G,H2,I2,J2,K2,L2,M2,N2,O2,G,C,D,E,F,G,H2,I2,J2,K2,L2,M2,N2,O2,G):1
     [O2>=0,N2>=0,M2>=0,L2>=0,K2>=0,J2>=0,I2>=0,H2>=0,G>=0,F>=0,E>=0,D>=0,C>=0,Q>=0,P>=0,O>=0,N>=1,I>=1,I+N=B,S1=2,G2=0,F2=1,E2=0,D2=1,C2=0,B2=0,A2=1,Z1=0,Y1=0,X1=0,W1=1,V1=0,U1=0,T1=0,R1=0,Q1=0,P1=1,O1=0,N1=0,M1=1,L1=0,K1=0,J1=1,I1=0,H1=0,G1=0,F1=1,E1=0,D1=0,C1=0,B1=0,A1=1,Z=0,Y=1,X=0,W=1,V=0,U=0,T=1,S=0,R=0,M=0,L=1,K=0,J=0,H=2,A=3] 
* CE 37: quadruples(A,B,C,D,E,F,G) = 7+ triples(H,I,J,K,L,M):3+ attach(N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1,F1,G1,H1,I1,J1,K1,L1,M1,N1,O1,P1,Q1,R1):1+ quadruples(S1,I,C,D,E,F,G)+ append(T1,U1,V1,W1,X1,Y1,Z1,A2,B2,C2,D2,E2,F2,G2,C,D,E,F,G,H2,I2,J2,K2,L2,M2,N2,O2,G,C,D,E,F,G,H2,I2,J2,K2,L2,M2,N2,O2,G):1
     [O2>=0,N2>=0,M2>=0,L2>=0,K2>=0,J2>=0,I2>=0,H2>=0,G>=0,F>=0,E>=0,D>=0,C>=0,Q>=0,P>=0,O>=0,N>=1,I>=2,I+N=B,S1=3,G2=0,F2=1,E2=0,D2=1,C2=0,B2=0,A2=1,Z1=0,Y1=0,X1=0,W1=1,V1=0,U1=0,T1=0,R1=0,Q1=0,P1=1,O1=0,N1=0,M1=1,L1=0,K1=0,J1=1,I1=0,H1=0,G1=0,F1=1,E1=0,D1=0,C1=0,B1=0,A1=1,Z=0,Y=1,X=0,W=1,V=0,U=0,T=1,S=0,R=0,M=0,L=1,K=0,J=0,H=3,A=4] 
* CE 38: quadruples(A,B,C,D,E,F,G) = 7+ triples(H,I,J,K,L,M):4+ attach(N,O,P,Q,R,S,L,M,T,L,U,L,V,L,M,W,X,Y,L,Z,A1,T,L,B1,C1,L,D1,E1,L,F1,M):2+ quadruples(H,I,G1,H1,I1,J1,K1)+ append(L1,M1,N1,L,M,O1,P1,L,Q1,R1,L,S1,L,M,T1,U1,V1,W1,X1,Y1,Z1,A2,B2,C2,D2,E2,F2,G2,C,D,E,F,G,H2,I2,J2,K2,L2,M2,N2,O2,G):2
     [D1+2>=L+P+V,B1+2>=L+O+U,Z+2>=L+M+N,F1+2>=L+Q,N2>=S1,L2>=R1,K2>=Q1,O2>=L,M2>=L,J2>=L,F>=L,E+1>=L,D+1>=L,C+1>=L,R1+1>=L,O1+1>=L,M+1>=L,T+1>=L,V+1>=L,I2>=P1,H2>=O1,G>=M,I+1>=H,L+6>=2*H,S1>=0,Q1>=0,P1>=0,U>=0,Q>=1,P>=1,O>=1,N>=1,H>=4,L+F2=O2+1,L+D2=M2+1,L+A2=J2+1,L+J1=F+1,L+W1=F+1,L+I1=E+1,L+V1=E+1,L+H1=D+1,L+U1=D+1,L+G1=C+1,L+T1=C+1,N2=S1+E2,L2=R1+C2,K2=Q1+B2,I2=P1+Z1,H2=O1+Y1,G=M+K1,G=M+G2,G=M+X1,I+N=B,L=N1+1,L=M1+1,L=L1+1,L=E1+1,L=C1+1,L=A1+1,L=Y+1,L=X+1,L=W+1,L=S+1,L=R+1,L=K+1,L=J+1,H+1=A] 

### Cost equations --> "Loop" of quadruples/7 
* CEs [38] --> Loop 34 
* CEs [37] --> Loop 35 
* CEs [36] --> Loop 36 
* CEs [35] --> Loop 37 
* CEs [34] --> Loop 38 

#### Loops of quadruples/7 
* Loop 34: quadruples(A,B,C,D,E,F,G)->  quadruples(A',B',C',D',E',F',G')
                  [G+C'>=C+G',F+C'>=C+1,E+C'>=C,D+C'>=C,C+9>=2*A+C',B>=B'+1,B'+2>=A,G'>=0,C'>=0,A>=5,F+C'=C+F',E+C'=C+E',D+C'=C+D',A=A'+1] 
* Loop 35: quadruples(A,B,C,D,E,F,G)->  quadruples(A',B',C,D,E,F,G)
                  [B>=B'+1,B'>=2,G>=0,F>=0,E>=0,D>=0,C>=0,A'=3,A=4] 
* Loop 36: quadruples(A,B,C,D,E,F,G)->  quadruples(A',B',C,D,E,F,G)
                  [B>=B'+1,B'>=1,G>=0,F>=0,E>=0,D>=0,C>=0,A'=2,A=3] 
* Loop 37: quadruples(A,B,C,D,E,F,G)->  quadruples(A',B',C,D,E,F,G)
                  [G>=0,F>=0,E>=0,D>=0,C>=0,B>=1,B'=0,A'=1,A=2] 
* Loop 38: quadruples(A,B,C,D,E,F,G) [G=0,F=1,E=0,D=0,C=0,B=0,A=1] 

### Ranking functions of CR quadruples(A,B,C,D,E,F,G) 
* RF of phase [34]: [A-4,B-3]

#### Partial ranking functions of CR quadruples(A,B,C,D,E,F,G) 
* Partial RF of phase [34]:
  - RF of loop [34:1]:
    A-4
    B-3

Discarded unfeasible chain [[34]]...(Non-terminating chain proved terminating)

### Resulting Chains:quadruples(A,B,C,D,E,F,G) 
* [[34],35,36,37,38]
* [38]
* [37,38]
* [36,37,38]
* [35,36,37,38]


### Merging Chains  quadruples/7 into  External patterns of execution 
* [[38]] --> 1 
* [[38,37]] --> 2 
* [[38,37,36]] --> 3 
* [[38,37,36,35]] --> 4 
* [[38,37,36,35,[34]]] --> 5 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 15 

#### Computing cost of phase [15] 

#### Simplifying cost structure of CE 16 

#### Cost of loops [15] 

 * loop 15:append(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1,F1,G1,H1,I1,J1,K1,L1,M1,N1,O1,P1) -> [append(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T',U',V',W',X',Y',Z',A1',B1',C1',D1',E1',F1',G1',H1',I1',J1',K1',L1',M1',N1',O1',P1')] 
5
##### Pending set append(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1,F1,G1,H1,I1,J1,K1,L1,M1,N1,O1,P1)
* Psum in Loop 15: [it(15)=<1]

###### Computing sum for it(15)=<1  in Loop 15 
   - Applying inductive sum strategy 
     - head Candidate: M-1 
     - head Candidate: K-1 
     - head Candidate: D-1 
     - head Candidate: J+1 
     - head Candidate: A+1 
     - head Candidate: F+1 
     - head Candidate: H-1 
     - head Candidate: N+1 
     - head Candidate: A+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: F+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: H-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: J+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: K-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: M-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: N+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: M-1 
     - tail Candidate: K-1 
     - tail Candidate: D-1 
     - tail Candidate: J+1 
     - tail Candidate: A+1 
     - tail Candidate: F+1 
     - tail Candidate: H-1 
     - tail Candidate: N+1 
     - tail Candidate: A+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: F+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: H-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: J+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: K-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: M-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: N+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(15)=<M-1,it(15)=<K-1,it(15)=<D-1,it(15)=<J+1,it(15)=<A+1,it(15)=<F+1,it(15)=<H-1,it(15)=<N+1,it(15)=<A+1,it(15)=<D-1,it(15)=<F+1,it(15)=<H-1,it(15)=<J+1,it(15)=<K-1,it(15)=<M-1,it(15)=<N+1,it(15)=<M-M',it(15)=<K-K',it(15)=<D-D',it(15)=<J-J',it(15)=<A-A',it(15)=<F-F',it(15)=<H-H',it(15)=<N-N',it(15)=<A-A',it(15)=<D-D',it(15)=<F-F',it(15)=<H-H',it(15)=<J-J',it(15)=<K-K',it(15)=<M-M',it(15)=<N-N'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [15] 

#### Simplifying cost structure of phase [15] 

#### Cost of phase [15]:append(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1,F1,G1,H1,I1,J1,K1,L1,M1,N1,O1,P1) -> [append(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T',U',V',W',X',Y',Z',A1',B1',C1',D1',E1',F1',G1',H1',I1',J1',K1',L1',M1',N1',O1',P1')] 
5*it(15)+0
  Such that:it(15) =< A+1
it(15) =< A-A'
it(15) =< D
it(15) =< D-D'
it(15) =< F+1
it(15) =< F-F'
it(15) =< H
it(15) =< H-H'
it(15) =< J+1
it(15) =< J-J'
it(15) =< K
it(15) =< K-K'
it(15) =< M
it(15) =< M-M'
it(15) =< N+1
it(15) =< N-N'

#### Simplifying cost structure of chain [[15],16] 

#### Cost of chains of append(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1,F1,G1,H1,I1,J1,K1,L1,M1,N1,O1,P1):
* Chain [[15],16]: 5*it(15)+2
  Such that:it(15) =< -A1+O1

  with precondition: [D=H,D=K,D=M,C1=A+O,D1=B+P,E1=C+Q,G1=E+S,H1=F+T,I1=G+U,K1=I+W,L1=J+X,N1=L+Z,P1=N+B1,D+R=F1+1,D+V=J1+1,D+Y=M1+1,D+A1=O1+1,B>=0,C>=0,D>=2,E>=0,G>=0,I>=0,L>=0,R>=1,V>=1,Y>=1,A1>=1,C1>=A,D1>=B,E1>=C,A+1>=D,F+1>=D,J+1>=D,N+1>=D,G1>=E,H1>=F,I1>=G,K1>=I,L1>=J,N1>=L,P1>=N] 

* Chain [16]: 2
  with precondition: [A=0,B=0,C=0,D=1,E=0,F=0,G=0,H=1,I=0,J=0,K=1,L=0,M=1,N=0,O=C1,P=D1,Q=E1,R=F1,S=G1,T=H1,U=I1,V=J1,W=K1,X=L1,Y=M1,Z=N1,A1=O1,B1=P1,O>=0,P>=0,Q>=0,R>=0,S>=0,T>=0,U>=0,V>=0,W>=0,X>=0,Y>=0,Z>=0,A1>=0,B1>=0] 


#### Simplifying cost structure of CE 17 

#### Computing cost of phase [17] 

#### Simplifying cost structure of CE 18 

#### Cost of loops [17] 

 * loop 17:attach(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1) -> [attach(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T',U',V',W',X',Y',Z',A1',B1',C1',D1',E1')] 
6
##### Pending set attach(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1)
* Psum in Loop 17: [it(17)=<1]

###### Computing sum for it(17)=<1  in Loop 17 
   - Applying inductive sum strategy 
     - head Candidate: O+1 
     - head Candidate: L-1 
     - head Candidate: N-1 
     - head Candidate: G-1 
     - head Candidate: J-1 
     - head Candidate: I+1 
     - head Candidate: E+1 
     - head Candidate: M+1 
     - head Candidate: E+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: G-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: I+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: J-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: L-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: M+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: N-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: O+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: O+1 
     - tail Candidate: L-1 
     - tail Candidate: N-1 
     - tail Candidate: G-1 
     - tail Candidate: J-1 
     - tail Candidate: I+1 
     - tail Candidate: E+1 
     - tail Candidate: M+1 
     - tail Candidate: E+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: G-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: I+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: J-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: L-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: M+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: N-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: O+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(17)=<O+1,it(17)=<L-1,it(17)=<N-1,it(17)=<G-1,it(17)=<J-1,it(17)=<I+1,it(17)=<E+1,it(17)=<M+1,it(17)=<E+1,it(17)=<G-1,it(17)=<I+1,it(17)=<J-1,it(17)=<L-1,it(17)=<M+1,it(17)=<N-1,it(17)=<O+1,it(17)=<O-O',it(17)=<L-L',it(17)=<N-N',it(17)=<G-G',it(17)=<J-J',it(17)=<I-I',it(17)=<E-E',it(17)=<M-M',it(17)=<E-E',it(17)=<G-G',it(17)=<I-I',it(17)=<J-J',it(17)=<L-L',it(17)=<M-M',it(17)=<N-N',it(17)=<O-O'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [17] 

#### Simplifying cost structure of phase [17] 

#### Cost of phase [17]:attach(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1) -> [attach(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T',U',V',W',X',Y',Z',A1',B1',C1',D1',E1')] 
6*it(17)+0
  Such that:it(17) =< E+1
it(17) =< E-E'
it(17) =< G
it(17) =< G-G'
it(17) =< I+1
it(17) =< I-I'
it(17) =< J
it(17) =< J-J'
it(17) =< L
it(17) =< L-L'
it(17) =< M+1
it(17) =< M-M'
it(17) =< N
it(17) =< N-N'
it(17) =< O+1
it(17) =< O-O'

#### Simplifying cost structure of chain [[17],18] 

#### Cost of chains of attach(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1):
* Chain [[17],18]: 6*it(17)+3
  Such that:it(17) =< Z

  with precondition: [Q=E,R=F,V=I,G=J,G=L,G=N,E1=O,G=P+1,G=S,G=U+1,G=W,G=Y+1,G=Z,G=B1+1,G=C1,A>=1,B>=1,C>=1,D>=1,G>=2,H>=0,K>=0,R>=0,M+1>=G,Q+1>=G,V+1>=G,E1+1>=G,D1+2>=D+G,T+2>=A+G+H,X+2>=B+G+K,A1+2>=C+G+M] 

* Chain [18]: 3
  with precondition: [E=0,F=0,G=1,H=0,I=0,J=1,K=0,L=1,M=0,N=1,O=0,P=0,Q=0,R=0,S=1,T=0,U=0,V=0,W=1,X=0,Y=0,Z=1,A1=0,B1=0,C1=1,D1=0,E1=0,A>=0,B>=0,C>=0,D>=0] 


#### Simplifying cost structure of CE 19 

#### Simplifying cost structure of CE 20 

#### Simplifying cost structure of chain [20,21] 

#### Computing cost of phase [19] 
 * Renamed intermediate variables: 
[ (eq(21,1),it(17))>>s(1)]
 * Renamed intermediate variables: 
[ (eq(21,2),it(15))>>s(2)]

#### Simplifying cost structure of CE 21 
 * Joined equivalent variables [s(1),s(2)] into s(1)
 * Renamed intermediate variables: 
[ (it(19),aux(1))>>s(3), (it(19),s(1))>>s(4)]

#### Cost of loops [19] 

 * loop 19:pairs(A,B,C,D,E) -> [pairs(A',B',C',D',E')] 
11*s(4)+11
  Such that:s(3) =< A
s(4) =< s(3)

##### Pending set pairs(A,B,C,D,E)
* Psum in Loop 19: [it(19)=<1,s(6)=<A]

###### Computing sum for it(19)=<1  in Loop 19 
   - Applying inductive sum strategy 
     - head Candidate: A-2 
     - head Candidate: B-1 
     - head Candidate: A-2 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-2 
     - tail Candidate: B-1 
     - tail Candidate: A-2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(19)=<A-2,it(19)=<B-1,it(19)=<A-2,it(19)=<B-1,it(19)=<A-A',it(19)=<B-B',it(19)=<A-A',it(19)=<B-B'] 

##### Pending set A
* Psum in Loop 19: [s(6)=<A]

###### Computing sum for s(6)=<A  in Loop 19 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(2)=<A] 
 * Adding constraints: [s(6)=<it(19)*aux(2)] 

##### Pending set pairs(A,B,C,D,E)
* Pmax/min: [aux(2)=<A]

###### Computing max_min for aux(2)=<A  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(2)=<A,aux(2)=<B+1] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [19] 

#### Simplifying cost structure of phase [19] 

#### Cost of phase [19]:pairs(A,B,C,D,E) -> [pairs(A',B',C',D',E')] 
11*it(19)+11*s(5)+0
  Such that:it(19) =< A-A'
it(19) =< B
aux(2) =< B+1
it(19) =< B-B'
aux(3) =< A
aux(2) =< aux(3)
it(19) =< aux(3)
s(6) =< it(19)*aux(2)
s(5) =< s(6)

#### Simplifying cost structure of chain [[19],20,21] 
 * Joined equivalent variables [aux(4),aux(3)] into aux(4)

#### Cost of chains of pairs(A,B,C,D,E):
* Chain [[19],20,21]: 11*it(19)+11*s(5)+14
  Such that:aux(2) =< B+1
aux(4) =< A
it(19) =< aux(4)
aux(2) =< aux(4)
s(6) =< it(19)*aux(2)
s(5) =< s(6)

  with precondition: [D=C+1,A>=3,B+1>=A,D+1>=A,E+1>=D] 

* Chain [21]: 3
  with precondition: [A=1,B=0,C=0,D=1,E=0] 

* Chain [20,21]: 14
  with precondition: [A=2,C=0,D=1,E=0,B>=1] 


#### Simplifying cost structure of CE 22 

#### Simplifying cost structure of CE 23 

#### Simplifying cost structure of chain [23,24] 

#### Computing cost of phase [22] 
 * Renamed intermediate variables: 
[ (eq(24,1),it(17))>>s(7)]
 * Renamed intermediate variables: 
[ (eq(24,2),it(15))>>s(8)]

#### Simplifying cost structure of CE 24 
 * Joined equivalent variables [s(7),s(8)] into s(7)
 * Renamed intermediate variables: 
[ (it(22),aux(5))>>s(9), (it(22),s(7))>>s(10)]

#### Cost of loops [22] 

 * loop 22:pairsAux(A,B,C,D,E,F,G,H) -> [pairsAux(A',B',C',D',E',F',G',H')] 
11*s(10)+11
  Such that:s(9) =< A'
s(10) =< s(9)

##### Pending set pairsAux(A,B,C,D,E,F,G,H)
* Psum in Loop 22: [it(22)=<1,s(12)=<A']

###### Computing sum for it(22)=<1  in Loop 22 
   - Applying inductive sum strategy 
     - head Candidate: A-2 
     - head Candidate: B-1 
     - head Candidate: A-2 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-2 
     - tail Candidate: B-1 
     - tail Candidate: A-2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(22)=<A-2,it(22)=<B-1,it(22)=<A-2,it(22)=<B-1,it(22)=<A-A',it(22)=<B-B',it(22)=<A-A',it(22)=<B-B'] 

##### Pending set A
* Psum in Loop 22: [s(12)=<A']

###### Computing sum for s(12)=<A'  in Loop 22 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(6)=<B,aux(6)=<A-1] 
 * Adding constraints: [s(12)=<it(22)*aux(6)] 

##### Pending set pairsAux(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(6)=<A-1,aux(6)=<B]

###### Computing max_min for aux(6)=<A-1  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(6)=<B,aux(6)=<A-1] 

##### Pending set pairsAux(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(6)=<B]

###### Computing max_min for aux(6)=<B  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(6)=<B] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [22] 

#### Simplifying cost structure of phase [22] 

#### Cost of phase [22]:pairsAux(A,B,C,D,E,F,G,H) -> [pairsAux(A',B',C',D',E',F',G',H')] 
11*it(22)+11*s(11)+0
  Such that:it(22) =< A-A'
it(22) =< B-B'
aux(7) =< A
aux(8) =< B
aux(6) =< aux(7)
it(22) =< aux(7)
aux(6) =< aux(8)
it(22) =< aux(8)
s(12) =< it(22)*aux(6)
s(11) =< s(12)

#### Simplifying cost structure of chain [[22],23,24] 
 * Joined equivalent variables [aux(9),aux(7)] into aux(9)

#### Cost of chains of pairsAux(A,B,C,D,E,F,G,H):
* Chain [[22],23,24]: 11*it(22)+11*s(11)+13
  Such that:aux(8) =< B
aux(9) =< A
it(22) =< aux(9)
aux(6) =< aux(9)
aux(6) =< aux(8)
it(22) =< aux(8)
s(12) =< it(22)*aux(6)
s(11) =< s(12)

  with precondition: [D+F=C+G,A>=3,C>=0,D>=1,E>=0,F>=0,H>=0,B+1>=A,D+F>=C,C+H>=E+F] 

* Chain [24]: 2
  with precondition: [A=1,B=0,C=F,D=G,E=H,C>=0,D>=0,E>=0] 

* Chain [23,24]: 13
  with precondition: [A=2,C=F,D=G,E=H,B>=1,C>=0,D>=0,E>=0] 


#### Simplifying cost structure of CE 25 

#### Simplifying cost structure of CE 26 

#### Simplifying cost structure of chain [28,29] 
 * Renamed intermediate variables: 
[ (eq(28,1),it(17))>>s(13)]

#### Simplifying cost structure of CE 28 

#### Simplifying cost structure of chain [26,28,29] 

#### Computing cost of phase [25] 
 * Renamed intermediate variables: 
[ (eq(29,1),it(17))>>s(14)]
 * Renamed intermediate variables: 
[ (eq(29,2),it(15))>>s(15)]

#### Simplifying cost structure of CE 29 
 * Renamed intermediate variables: 
[ (it(25),s(14))>>s(16), (it(25),s(15))>>s(17)]

#### Cost of loops [25] 

 * loop 25:pairsp(A,B,C,D,E) -> [pairsp(A',B',C',D',E')] 
6*s(16)+5*s(17)+11
  Such that:s(16) =< A

Unbounded itvars
s(17) :  it(25),s(15)

##### Pending set pairsp(A,B,C,D,E)
* Psum in Loop 25: [it(25)=<1,s(18)=<A]

###### Computing sum for it(25)=<1  in Loop 25 
   - Applying inductive sum strategy 
     - head Candidate: A-2 
     - head Candidate: B-1 
     - head Candidate: A-2 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-2 
     - tail Candidate: B-1 
     - tail Candidate: A-2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(25)=<A-2,it(25)=<B-1,it(25)=<A-2,it(25)=<B-1,it(25)=<A-A',it(25)=<B-B',it(25)=<A-A',it(25)=<B-B'] 

##### Pending set A
* Psum in Loop 25: [s(18)=<A]

###### Computing sum for s(18)=<A  in Loop 25 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(10)=<A] 
 * Adding constraints: [s(18)=<it(25)*aux(10)] 

##### Pending set pairsp(A,B,C,D,E)
* Pmax/min: [aux(10)=<A]

###### Computing max_min for aux(10)=<A  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(10)=<A,aux(10)=<B+1] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [25] 

#### Simplifying cost structure of phase [25] 

#### Cost of phase [25]:pairsp(A,B,C,D,E) -> [pairsp(A',B',C',D',E')] 
11*it(25)+6*s(18)+5*s(19)+0
  Such that:it(25) =< A-A'
it(25) =< B
aux(10) =< B+1
it(25) =< B-B'
aux(11) =< A
aux(10) =< aux(11)
it(25) =< aux(11)
s(18) =< it(25)*aux(10)

Unbounded itvars
s(19) :  sum(25),s(17)

#### Simplifying cost structure of chain [[25],26,28,29] 
 * Joined equivalent variables [aux(12),aux(11)] into aux(12)

#### Cost of chains of pairsp(A,B,C,D,E):
* Chain [[25],26,28,29]: 11*it(25)+6*s(13)+6*s(18)+5*s(19)+25
  Such that:s(13) =< 2
aux(10) =< B+1
aux(12) =< A
it(25) =< aux(12)
aux(10) =< aux(12)
s(18) =< it(25)*aux(10)

Unbounded itvars
s(19) :  sum(25),s(17)

  with precondition: [D=C+1,A>=3,B+1>=A,D>=A,E+1>=D] 

* Chain [29]: 3
  with precondition: [A=1,B=0,C=0,D=1,E=0] 

* Chain [28,29]: 14
  with precondition: [A=2,C=0,D=1,E=0,B>=1] 

* Chain [26,28,29]: 6*s(13)+25
  Such that:s(13) =< 2

  with precondition: [A=3,C=1,D=2,E>=1,B>=E+1] 


#### Simplifying cost structure of CE 30 

#### Simplifying cost structure of CE 31 

#### Simplifying cost structure of chain [32,33] 

#### Simplifying cost structure of CE 32 

#### Simplifying cost structure of chain [31,32,33] 

#### Computing cost of phase [30] 
 * Renamed intermediate variables: 
[ (eq(33,1),aux(2))>>s(20), (eq(33,1),aux(4))>>s(21), (eq(33,1),it(19))>>s(22), (eq(33,1),s(6))>>s(23), (eq(33,1),s(5))>>s(24)]
 * Renamed intermediate variables: 
[ (eq(33,2),it(17))>>s(25)]
 * Renamed intermediate variables: 
[ (eq(33,3),it(15))>>s(26)]

#### Simplifying cost structure of CE 33 
 * Joined equivalent variables [s(25),s(26)] into s(25)
 * Renamed intermediate variables: 
[ (it(30),s(21))>>s(27), (it(30),s(20))>>s(28), (it(30),s(22))>>s(29), (it(30),s(23))>>s(30), (it(30),s(24))>>s(31), (it(30),s(25))>>s(32)]

#### Cost of loops [30] 

 * loop 30:triples(A,B,C,D,E,F) -> [triples(A',B',C',D',E',F')] 
11*s(29)+11*s(31)+11*s(32)+26
  Such that:s(27) =< A
s(28) =< B'+1
s(29) =< s(27)
s(28) =< s(27)
s(30) =< s(29)*s(28)
s(31) =< s(30)

Unbounded itvars
s(32) :  it(30),s(25)

##### Pending set triples(A,B,C,D,E,F)
* Pmax/min: [s(27)=<A,s(28)=<B]
* Psum in Loop 30: [it(30)=<1,s(37)=<A]

###### Computing max_min for s(27)=<A  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(27)=<A,s(27)=<B+1] 

##### Pending set triples(A,B,C,D,E,F)
* Pmax/min: [s(28)=<B]
* Psum in Loop 30: [it(30)=<1,s(37)=<A]

###### Computing max_min for s(28)=<B  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(28)=<B] 

##### Pending set triples(A,B,C,D,E,F)
* Psum in Loop 30: [it(30)=<1,s(37)=<A]

###### Computing sum for it(30)=<1  in Loop 30 
   - Applying inductive sum strategy 
     - head Candidate: A-3 
     - head Candidate: B-2 
     - head Candidate: A-3 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-3 
     - tail Candidate: B-2 
     - tail Candidate: A-3 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(30)=<A-3,it(30)=<B-2,it(30)=<A-3,it(30)=<B-2,it(30)=<A-A',it(30)=<B-B',it(30)=<A-A',it(30)=<B-B'] 

##### Pending set triples(A,B,C,D,E,F)
* Psum in Loop 30: [s(37)=<A]

###### Computing sum for s(37)=<A  in Loop 30 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(13)=<A] 
 * Adding constraints: [s(37)=<it(30)*aux(13)] 

##### Pending set triples(A,B,C,D,E,F)
* Pmax/min: [aux(13)=<A]

###### Computing max_min for aux(13)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(13)=<s(27)] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [30] 

#### Simplifying cost structure of phase [30] 

#### Cost of phase [30]:triples(A,B,C,D,E,F) -> [triples(A',B',C',D',E',F')] 
26*it(30)+11*s(33)+11*s(34)+11*s(35)+0
  Such that:it(30) =< A-A'
s(27) =< B+1
it(30) =< B-B'
aux(14) =< A
aux(15) =< B
it(30) =< aux(14)
s(27) =< aux(14)
it(30) =< aux(15)
s(28) =< aux(15)
aux(13) =< s(27)
s(37) =< it(30)*aux(13)
s(33) =< s(37)
s(28) =< s(27)
s(36) =< s(33)*s(28)
s(34) =< s(36)

Unbounded itvars
s(35) :  sum(30),s(32)

#### Simplifying cost structure of chain [[30],31,32,33] 
 * Joined equivalent variables [aux(16),aux(14)] into aux(16)

#### Cost of chains of triples(A,B,C,D,E,F):
* Chain [[30],31,32,33]: 26*it(30)+11*s(33)+11*s(34)+11*s(35)+44
  Such that:aux(15) =< B
s(27) =< B+1
aux(16) =< A
it(30) =< aux(16)
s(27) =< aux(16)
it(30) =< aux(15)
s(28) =< aux(15)
aux(13) =< s(27)
s(37) =< it(30)*aux(13)
s(33) =< s(37)
s(28) =< s(27)
s(36) =< s(33)*s(28)
s(34) =< s(36)

Unbounded itvars
s(35) :  sum(30),s(32)

  with precondition: [E=C+1,E=D+1,A>=4,E+6>=2*A,B+1>=A,F+1>=E] 

* Chain [33]: 3
  with precondition: [A=1,B=0,C=0,D=0,E=1,F=0] 

* Chain [32,33]: 18
  with precondition: [A=2,C=0,D=0,E=1,F=0,B>=1] 

* Chain [31,32,33]: 44
  with precondition: [A=3,C=0,D=0,E=1,F=0,B>=2] 


#### Simplifying cost structure of CE 34 

#### Simplifying cost structure of CE 35 

#### Simplifying cost structure of chain [37,38] 

#### Simplifying cost structure of CE 36 

#### Simplifying cost structure of chain [36,37,38] 

#### Simplifying cost structure of CE 37 

#### Simplifying cost structure of chain [35,36,37,38] 

#### Computing cost of phase [34] 
 * Renamed intermediate variables: 
[ (eq(38,1),aux(15))>>s(38), (eq(38,1),s(27))>>s(39), (eq(38,1),aux(16))>>s(40), (eq(38,1),it(30))>>s(41), (eq(38,1),s(28))>>s(42), (eq(38,1),aux(13))>>s(43), (eq(38,1),s(37))>>s(44), (eq(38,1),s(33))>>s(45), (eq(38,1),s(36))>>s(46), (eq(38,1),s(34))>>s(47), (eq(38,1),s(35))>>s(48)]
 * Renamed intermediate variables: 
[ (eq(38,2),it(17))>>s(49)]
 * Renamed intermediate variables: 
[ (eq(38,3),it(15))>>s(50)]

#### Simplifying cost structure of CE 38 
 * Joined equivalent variables [s(48),s(49),s(50)] into s(48)
 * Renamed intermediate variables: 
[ (it(34),s(40))>>s(51), (it(34),s(38))>>s(52), (it(34),s(39))>>s(53), (it(34),s(41))>>s(54), (it(34),s(42))>>s(55), (it(34),s(43))>>s(56), (it(34),s(44))>>s(57), (it(34),s(45))>>s(58), (it(34),s(46))>>s(59), (it(34),s(47))>>s(60), (it(34),s(48))>>s(61)]

#### Cost of loops [34] 

 * loop 34:quadruples(A,B,C,D,E,F,G) -> [quadruples(A',B',C',D',E',F',G')] 
26*s(54)+11*s(58)+11*s(60)+22*s(61)+56
  Such that:s(51) =< A
s(52) =< B'
s(53) =< B'+1
s(54) =< s(51)
s(53) =< s(51)
s(54) =< s(52)
s(55) =< s(52)
s(56) =< s(53)
s(57) =< s(54)*s(56)
s(58) =< s(57)
s(55) =< s(53)
s(59) =< s(58)*s(55)
s(60) =< s(59)

Unbounded itvars
s(61) :  it(34),s(48)

##### Pending set quadruples(A,B,C,D,E,F,G)
* Pmax/min: [s(51)=<A,s(52)=<B-1,s(53)=<B]
* Psum in Loop 34: [it(34)=<1,s(69)=<A,s(68)=<B']

###### Computing max_min for s(51)=<A  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(51)=<A,s(51)=<B+1] 

##### Pending set quadruples(A,B,C,D,E,F,G)
* Pmax/min: [s(52)=<B-1,s(53)=<B]
* Psum in Loop 34: [it(34)=<1,s(69)=<A,s(68)=<B']

###### Computing max_min for s(52)=<B-1  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(52)=<B-1] 

##### Pending set quadruples(A,B,C,D,E,F,G)
* Pmax/min: [s(53)=<B]
* Psum in Loop 34: [it(34)=<1,s(69)=<A,s(68)=<B']

###### Computing max_min for s(53)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[s(53)=<s(52)+1] 

##### Pending set quadruples(A,B,C,D,E,F,G)
* Psum in Loop 34: [it(34)=<1,s(69)=<A,s(68)=<B']

###### Computing sum for it(34)=<1  in Loop 34 
   - Applying inductive sum strategy 
     - head Candidate: A-4 
     - head Candidate: B-3 
     - head Candidate: A-4 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-3 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-4 
     - tail Candidate: B-3 
     - tail Candidate: A-4 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-3 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(34)=<A-4,it(34)=<B-3,it(34)=<A-4,it(34)=<B-3,it(34)=<A-A',it(34)=<B-B',it(34)=<A-A',it(34)=<B-B'] 

##### Pending set quadruples(A,B,C,D,E,F,G)
* Psum in Loop 34: [s(69)=<A,s(68)=<B']

###### Computing sum for s(69)=<A  in Loop 34 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(17)=<A] 
 * Adding constraints: [s(69)=<it(34)*aux(17)] 

##### Pending set quadruples(A,B,C,D,E,F,G)
* Pmax/min: [aux(17)=<A]
* Psum in Loop 34: [s(68)=<B']

###### Computing max_min for aux(17)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(17)=<s(51)] 

##### Pending set quadruples(A,B,C,D,E,F,G)
* Psum in Loop 34: [s(68)=<B']

###### Computing sum for s(68)=<B'  in Loop 34 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(18)=<B-1] 
 * Adding constraints: [s(68)=<it(34)*aux(18)] 

##### Pending set quadruples(A,B,C,D,E,F,G)
* Pmax/min: [aux(18)=<B-1]

###### Computing max_min for aux(18)=<B-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(18)=<s(52)] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [34] 

#### Simplifying cost structure of phase [34] 
 * Joined equivalent variables [aux(20),s(52)] into aux(20)

#### Cost of phase [34]:quadruples(A,B,C,D,E,F,G) -> [quadruples(A',B',C',D',E',F',G')] 
56*it(34)+26*s(62)+11*s(63)+11*s(64)+22*s(65)+0
  Such that:it(34) =< A-A'
s(51) =< B+1
it(34) =< B-B'
aux(19) =< A
aux(20) =< B
it(34) =< aux(19)
s(51) =< aux(19)
it(34) =< aux(20)
aux(18) =< aux(20)
aux(17) =< s(51)
s(53) =< aux(20)+1
s(68) =< it(34)*aux(18)
s(69) =< it(34)*aux(17)
s(62) =< s(69)
s(53) =< s(51)
s(62) =< s(68)
s(55) =< aux(20)
s(56) =< s(53)
s(67) =< s(62)*s(56)
s(63) =< s(67)
s(55) =< s(53)
s(66) =< s(63)*s(55)
s(64) =< s(66)

Unbounded itvars
s(65) :  sum(34),s(61)

#### Simplifying cost structure of chain [[34],35,36,37,38] 
 * Joined equivalent variables [aux(21),aux(19)] into aux(21)

#### Cost of chains of quadruples(A,B,C,D,E,F,G):
* Chain [[34],35,36,37,38]: 56*it(34)+26*s(62)+11*s(63)+11*s(64)+22*s(65)+104
  Such that:aux(20) =< B
s(51) =< B+1
aux(21) =< A
it(34) =< aux(21)
s(51) =< aux(21)
it(34) =< aux(20)
aux(18) =< aux(20)
aux(17) =< s(51)
s(53) =< aux(20)+1
s(68) =< it(34)*aux(18)
s(69) =< it(34)*aux(17)
s(62) =< s(69)
s(53) =< s(51)
s(62) =< s(68)
s(55) =< aux(20)
s(56) =< s(53)
s(67) =< s(62)*s(56)
s(63) =< s(67)
s(55) =< s(53)
s(66) =< s(63)*s(55)
s(64) =< s(66)

Unbounded itvars
s(65) :  sum(34),s(61)

  with precondition: [F=C+1,F=D+1,F=E+1,A>=5,F+13>=3*A,B+1>=A,G+1>=F] 

* Chain [38]: 3
  with precondition: [A=1,B=0,C=0,D=0,E=0,F=1,G=0] 

* Chain [37,38]: 18
  with precondition: [A=2,C=0,D=0,E=0,F=1,G=0,B>=1] 

* Chain [36,37,38]: 48
  with precondition: [A=3,C=0,D=0,E=0,F=1,G=0,B>=2] 

* Chain [35,36,37,38]: 104
  with precondition: [A=4,C=0,D=0,E=0,F=1,G=0,B>=3] 


Closed-form bounds of attach(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1): 
-------------------------------------
* Chain [[17],18] with precondition: [Q=E,R=F,V=I,G=J,G=L,G=N,E1=O,G=P+1,G=S,G=U+1,G=W,G=Y+1,G=Z,G=B1+1,G=C1,A>=1,B>=1,C>=1,D>=1,G>=2,H>=0,K>=0,R>=0,M+1>=G,Q+1>=G,V+1>=G,E1+1>=G,D1+2>=D+G,T+2>=A+G+H,X+2>=B+G+K,A1+2>=C+G+M] 
    - Upper bound: 6*G+3 
    - Complexity: n 
* Chain [18] with precondition: [E=0,F=0,G=1,H=0,I=0,J=1,K=0,L=1,M=0,N=1,O=0,P=0,Q=0,R=0,S=1,T=0,U=0,V=0,W=1,X=0,Y=0,Z=1,A1=0,B1=0,C1=1,D1=0,E1=0,A>=0,B>=0,C>=0,D>=0] 
    - Upper bound: 3 
    - Complexity: constant 

### Maximum cost of attach(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1): 6*G+3 
Asymptotic class: n 

Closed-form bounds of append(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1,F1,G1,H1,I1,J1,K1,L1,M1,N1,O1,P1): 
-------------------------------------
* Chain [[15],16] with precondition: [D=H,D=K,D=M,C1=A+O,D1=B+P,E1=C+Q,G1=E+S,H1=F+T,I1=G+U,K1=I+W,L1=J+X,N1=L+Z,P1=N+B1,D+R=F1+1,D+V=J1+1,D+Y=M1+1,D+A1=O1+1,B>=0,C>=0,D>=2,E>=0,G>=0,I>=0,L>=0,R>=1,V>=1,Y>=1,A1>=1,C1>=A,D1>=B,E1>=C,A+1>=D,F+1>=D,J+1>=D,N+1>=D,G1>=E,H1>=F,I1>=G,K1>=I,L1>=J,N1>=L,P1>=N] 
    - Upper bound: 5*D+2 
    - Complexity: n 
* Chain [16] with precondition: [A=0,B=0,C=0,D=1,E=0,F=0,G=0,H=1,I=0,J=0,K=1,L=0,M=1,N=0,O=C1,P=D1,Q=E1,R=F1,S=G1,T=H1,U=I1,V=J1,W=K1,X=L1,Y=M1,Z=N1,A1=O1,B1=P1,O>=0,P>=0,Q>=0,R>=0,S>=0,T>=0,U>=0,V>=0,W>=0,X>=0,Y>=0,Z>=0,A1>=0,B1>=0] 
    - Upper bound: 2 
    - Complexity: constant 

### Maximum cost of append(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1,C1,D1,E1,F1,G1,H1,I1,J1,K1,L1,M1,N1,O1,P1): 5*D+2 
Asymptotic class: n 

Closed-form bounds of pairs(A,B,C,D,E): 
-------------------------------------
* Chain [[19],20,21] with precondition: [D=C+1,A>=3,B+1>=A,D+1>=A,E+1>=D] 
    - Upper bound: 11*A+14+ (11*B+11)*A 
    - Complexity: n^2 
* Chain [21] with precondition: [A=1,B=0,C=0,D=1,E=0] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [20,21] with precondition: [A=2,C=0,D=1,E=0,B>=1] 
    - Upper bound: 14 
    - Complexity: constant 

### Maximum cost of pairs(A,B,C,D,E): max([11,11*A+11+ (11*B+11)*A])+3 
Asymptotic class: n^2 

Closed-form bounds of pairsAux(A,B,C,D,E,F,G,H): 
-------------------------------------
* Chain [[22],23,24] with precondition: [D+F=C+G,A>=3,C>=0,D>=1,E>=0,F>=0,H>=0,B+1>=A,D+F>=C,C+H>=E+F] 
    - Upper bound: 11*A+13+11*A*A 
    - Complexity: n^2 
* Chain [24] with precondition: [A=1,B=0,C=F,D=G,E=H,C>=0,D>=0,E>=0] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [23,24] with precondition: [A=2,C=F,D=G,E=H,B>=1,C>=0,D>=0,E>=0] 
    - Upper bound: 13 
    - Complexity: constant 

### Maximum cost of pairsAux(A,B,C,D,E,F,G,H): max([11,11*A+11+11*A*A])+2 
Asymptotic class: n^2 

Closed-form bounds of pairsp(A,B,C,D,E): 
-------------------------------------
* Chain [[25],26,28,29] with precondition: [D=C+1,A>=3,B+1>=A,D>=A,E+1>=D] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [29] with precondition: [A=1,B=0,C=0,D=1,E=0] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [28,29] with precondition: [A=2,C=0,D=1,E=0,B>=1] 
    - Upper bound: 14 
    - Complexity: constant 
* Chain [26,28,29] with precondition: [A=3,C=1,D=2,E>=1,B>=E+1] 
    - Upper bound: 37 
    - Complexity: constant 

### Maximum cost of pairsp(A,B,C,D,E): inf 
Asymptotic class: infinity 

Closed-form bounds of triples(A,B,C,D,E,F): 
-------------------------------------
* Chain [[30],31,32,33] with precondition: [E=C+1,E=D+1,A>=4,E+6>=2*A,B+1>=A,F+1>=E] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [33] with precondition: [A=1,B=0,C=0,D=0,E=1,F=0] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [32,33] with precondition: [A=2,C=0,D=0,E=1,F=0,B>=1] 
    - Upper bound: 18 
    - Complexity: constant 
* Chain [31,32,33] with precondition: [A=3,C=0,D=0,E=1,F=0,B>=2] 
    - Upper bound: 44 
    - Complexity: constant 

### Maximum cost of triples(A,B,C,D,E,F): inf 
Asymptotic class: infinity 

Closed-form bounds of quadruples(A,B,C,D,E,F,G): 
-------------------------------------
* Chain [[34],35,36,37,38] with precondition: [F=C+1,F=D+1,F=E+1,A>=5,F+13>=3*A,B+1>=A,G+1>=F] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [38] with precondition: [A=1,B=0,C=0,D=0,E=0,F=1,G=0] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [37,38] with precondition: [A=2,C=0,D=0,E=0,F=1,G=0,B>=1] 
    - Upper bound: 18 
    - Complexity: constant 
* Chain [36,37,38] with precondition: [A=3,C=0,D=0,E=0,F=1,G=0,B>=2] 
    - Upper bound: 48 
    - Complexity: constant 
* Chain [35,36,37,38] with precondition: [A=4,C=0,D=0,E=0,F=1,G=0,B>=3] 
    - Upper bound: 104 
    - Complexity: constant 

### Maximum cost of quadruples(A,B,C,D,E,F,G): inf 
Asymptotic class: infinity 
* Total analysis performed in 8582 ms.


Cost relation system solved by CoFloCo in 8584 ms.

Method attach terminates?: YES

 - n_1: size of n wrt. A
 - n_2: size of n wrt. A
 - n_3: size of n wrt. A
 - n_4: size of n wrt. B
 - l_1: size of l wrt. Pair<A, Pair<A, A>>
 - l_2: size of l wrt. Pair<A, A>
 - l_3: size of l wrt. List<Pair<A, Pair<A, A>>>
 - l_4: size of l wrt. A
 - l_5: size of l wrt. Pair<A, A>
 - l_6: size of l wrt. List<Pair<A, A>>
 - l_7: size of l wrt. A
 - l_8: size of l wrt. List<A>
 - l_9: size of l wrt. A
 - l_10: size of l wrt. List<A>
 - l_11: size of l wrt. A
UB for attach(n_1,n_2,n_3,n_4,l_1,l_2,l_3,l_4,l_5,l_6,l_7,l_8,l_9,l_10,l_11) = 6*l_3+3

Method append terminates?: YES

 - l1_1: size of l1 wrt. Pair<A, Pair<A, Pair<A, A>>>
 - l1_2: size of l1 wrt. Pair<A, Pair<A, A>>
 - l1_3: size of l1 wrt. Pair<A, A>
 - l1_4: size of l1 wrt. List<Pair<A, Pair<A, Pair<A, A>>>>
 - l1_5: size of l1 wrt. A
 - l1_6: size of l1 wrt. Pair<A, Pair<A, A>>
 - l1_7: size of l1 wrt. Pair<A, A>
 - l1_8: size of l1 wrt. List<Pair<A, Pair<A, A>>>
 - l1_9: size of l1 wrt. A
 - l1_10: size of l1 wrt. Pair<A, A>
 - l1_11: size of l1 wrt. List<Pair<A, A>>
 - l1_12: size of l1 wrt. A
 - l1_13: size of l1 wrt. List<A>
 - l1_14: size of l1 wrt. A
 - l2_1: size of l2 wrt. Pair<A, Pair<A, Pair<A, A>>>
 - l2_2: size of l2 wrt. Pair<A, Pair<A, A>>
 - l2_3: size of l2 wrt. Pair<A, A>
 - l2_4: size of l2 wrt. List<Pair<A, Pair<A, Pair<A, A>>>>
 - l2_5: size of l2 wrt. A
 - l2_6: size of l2 wrt. Pair<A, Pair<A, A>>
 - l2_7: size of l2 wrt. Pair<A, A>
 - l2_8: size of l2 wrt. List<Pair<A, Pair<A, A>>>
 - l2_9: size of l2 wrt. A
 - l2_10: size of l2 wrt. Pair<A, A>
 - l2_11: size of l2 wrt. List<Pair<A, A>>
 - l2_12: size of l2 wrt. A
 - l2_13: size of l2 wrt. List<A>
 - l2_14: size of l2 wrt. A
UB for append(l1_1,l1_2,l1_3,l1_4,l1_5,l1_6,l1_7,l1_8,l1_9,l1_10,l1_11,l1_12,l1_13,l1_14,l2_1,l2_2,l2_3,l2_4,l2_5,l2_6,l2_7,l2_8,l2_9,l2_10,l2_11,l2_12,l2_13,l2_14) = 5*l1_4+2

Method pairs terminates?: YES

 - l_1: size of l wrt. List<A>
 - l_2: size of l wrt. A
UB for pairs(l_1,l_2) = max([11,11*l_1+11+ (11*l_2+11)*l_1])+3

Method pairsAux terminates?: YES

 - l_1: size of l wrt. List<A>
 - l_2: size of l wrt. A
 - acc_1: size of acc wrt. Pair<A, A>
 - acc_2: size of acc wrt. List<Pair<A, A>>
 - acc_3: size of acc wrt. A
UB for pairsAux(l_1,l_2,acc_1,acc_2,acc_3) = max([11,11*l_1+11+11*l_1*l_1])+2

Method pairsp terminates?: YES

 - l_1: size of l wrt. List<A>
 - l_2: size of l wrt. A
UB for pairsp(l_1,l_2) = inf

Method triples terminates?: YES

 - l_1: size of l wrt. List<A>
 - l_2: size of l wrt. A
UB for triples(l_1,l_2) = inf

Method quadruples terminates?: YES

 - l_1: size of l wrt. List<A>
 - l_2: size of l wrt. A
UB for quadruples(l_1,l_2) = inf

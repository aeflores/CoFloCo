
Abs program loaded in 18 ms.

Rule based representation generated in 12 ms.

Rule based representation stored in /tmp/costabs/rbr.rbr

RBR properties stored in /tmp/costabs/rbr.properties

Class invariants generated and loaded in 0 ms.

Abstract compilation performed in 113 ms.

Cost relation system stored in /tmp/costabs/crs.crs

Generated 76 equations 
entry('send_msg'(A,B,C):[]).
entry('main1'(A,B,C,D,E):[]).
entry('append'(A,B,C,D,E,F,G,H,I,J,K,L):[]).
entry('main2'(A,B,C,D,E):[]).
entry('main3'(A,B,C,D,E):[]).
entry('main4'(A,B,C,D,E):[]).
entry('main5'(A,B,C,D,E):[]).
input_output_vars('and_op'(A,B,C),[A,B],[C]).
input_output_vars('append'(A,B,C,D,E,F,G,H,I,J,K,L),[A,B,C,D,E,F,G,H],[I,J,K,L]).
input_output_vars('case_0'(A,B,C),[A,B],[C]).
input_output_vars('case_1'(A,B,C,D,E),[A,B,C,D],[E]).
input_output_vars('case_10'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R),[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O],[P,Q,R]).
input_output_vars('case_11'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S),[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R],[S]).
input_output_vars('case_12'(A,B,C,D,E,F,G,H),[A,B,C,D,E,F,G],[H]).
input_output_vars('case_13'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q),[A,B,C,D,E,F,G,H,I,J,K,L,M,N],[O,P,Q]).
input_output_vars('case_14'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V),[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S],[T,U,V]).
input_output_vars('case_15'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R),[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q],[R]).
input_output_vars('case_2'(A,B,C,D,E,F,G,H,I,J,K,L),[A,B,C,D,E,F,G,H,I,J,K],[L]).
input_output_vars('case_3'(A,B,C,D,E,F,G,H,I,J,K,L),[A,B,C,D,E,F,G,H],[I,J,K,L]).
input_output_vars('case_4'(A,B,C,D,E,F,G),[A,B,C,D,E,F],[G]).
input_output_vars('case_5'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O),[A,B,C,D,E,F,G,H,I,J,K,L,M],[N,O]).
input_output_vars('case_6'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F,G,H],[I]).
input_output_vars('case_7'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R),[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O],[P,Q,R]).
input_output_vars('case_8'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S),[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R],[S]).
input_output_vars('case_9'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F,G,H],[I]).
input_output_vars('eq'(A,B,C),[A,B],[C]).
input_output_vars('fun'(A,B,C),[A,B],[C]).
input_output_vars('geq'(A,B,C),[A,B],[C]).
input_output_vars('gt'(A,B,C),[A,B],[C]).
input_output_vars('leq'(A,B,C),[A,B],[C]).
input_output_vars('lt'(A,B,C),[A,B],[C]).
input_output_vars('main1'(A,B,C,D,E),[A,B,C,D],[E]).
input_output_vars('main2'(A,B,C,D,E),[A,B,C,D],[E]).
input_output_vars('main3'(A,B,C,D,E),[A,B,C,D],[E]).
input_output_vars('main4'(A,B,C,D,E),[A,B,C,D],[E]).
input_output_vars('main5'(A,B,C,D,E),[A,B,C,D],[E]).
input_output_vars('maxNorm'(A,B,C),[A,B],[C]).
input_output_vars('neg'(A,B),[A],[B]).
input_output_vars('neq'(A,B,C),[A,B],[C]).
input_output_vars('or'(A,B,C),[A,B],[C]).
input_output_vars('process_main1'(A,B,C,D,E),[A,B,C,D],[E]).
input_output_vars('process_main2'(A,B,C,D,E,F,G),[A,B,C,D,E,F],[G]).
input_output_vars('process_main3'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F,G,H],[I]).
input_output_vars('process_main4'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F,G,H],[I]).
input_output_vars('process_main5'(A,B,C,D,E,F,G,H),[A,B,C,D,E,F,G],[H]).
input_output_vars('send'(A,B,C),[A,B],[C]).
input_output_vars('send_msg'(A,B,C),[A,B],[C]).
input_output_vars('transmit'(A),[],[A]).
eq('eq',[A,B,C],0,[],[A=B,C=1,A>=0,B>=0,C>=0]).
eq('eq',[A,B,C],0,[],[A>=B+1,C=0,A>=0,B>=0,C>=0]).
eq('eq',[A,B,C],0,[],[B>=A+1,C=0,A>=0,B>=0,C>=0]).
eq('neq',[A,B,C],0,[],[A=B,C=0,A>=0,B>=0,C>=0]).
eq('neq',[A,B,C],0,[],[A>=B+1,C=1,A>=0,B>=0,C>=0]).
eq('neq',[A,B,C],0,[],[B>=A+1,C=1,A>=0,B>=0,C>=0]).
eq('lt',[A,B,C],0,[],[B-A>=1,C=1,A>=0,B>=0,C>=0]).
eq('lt',[A,B,C],0,[],[B=<A,C=0,A>=0,B>=0,C>=0]).
eq('leq',[A,B,C],0,[],[A=<B,C=1,A>=0,B>=0,C>=0]).
eq('leq',[A,B,C],0,[],[A-B>=1,C=0,A>=0,B>=0,C>=0]).
eq('gt',[A,B,C],0,[],[A-B>=1,C=1,A>=0,B>=0,C>=0]).
eq('gt',[A,B,C],0,[],[A=<B,C=0,A>=0,B>=0,C>=0]).
eq('geq',[A,B,C],0,[],[B=<A,C=1,A>=0,B>=0,C>=0]).
eq('geq',[A,B,C],0,[],[B-A>=1,C=0,A>=0,B>=0,C>=0]).
eq('neg',[A,B],0,[],[A=0,B=1,A>=0,B>=0]).
eq('neg',[A,B],0,[],[A=1,B=0,A>=0,B>=0]).
eq('and_op',[A,B,C],0,[],[A=0,C=0,A>=0,B>=0,C>=0]).
eq('and_op',[A,B,C],0,[],[A=1,C=B,A>=0,B>=0,C>=0]).
eq('or',[A,B,C],0,[],[A=1,C=1,A>=0,B>=0,C>=0]).
eq('or',[A,B,C],0,[],[A=0,C=B,A>=0,B>=0,C>=0]).
eq('maxNorm',[A,B,A],0,[],[A>=1+B,A>=0,B>=0,A>=0]).
eq('maxNorm',[A,B,B],0,[],[A=<B,A>=0,B>=0,B>=0]).
eq('transmit',[A],1,[],[A=1,A>=0]).
eq('case_0',[A,B,C],2,[],[A=1,C=1,A>=0,B>=0,C>=0]).
eq('case_0',[A,B,C],6,['transmit'(D),'send'(E,F,G)],[B>=H,B>=F,A=E+1,E>=1,I=D,D>=1,C=G,G>=1,A>=0,B>=0,C>=0]).
eq('send',[A,B,C],1,['case_0'(A,B,C)],[A>=0,B>=0,C>=0]).
eq('send_msg',[A,B,C],1,['send'(A,B,C)],[A>=0,B>=0,C>=0]).
eq('case_1',[A,B,C,D,E],2,[],[D=0,B=1,A=0,E=1,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_2',[A,B,C,D,E,F,G,H,I,J,K,L],2,[],[G=1,E=0,L=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0]).
eq('case_2',[A,B,C,D,E,F,G,H,I,J,K,L],3,[],[G=1,E=0,L=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0]).
eq('case_2',[A,B,C,D,E,F,G,H,I,J,K,L],4,[],[G=1,E=0,L=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0]).
eq('case_2',[A,B,C,D,E,F,G,H,I,J,K,L],5,['send_msg'(M,N,L)],[G=1,F=N,E=M,M>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0]).
eq('case_1',[A,B,C,D,E],6,['case_2'(A,B,C,D,F,G,H,I,J,K,L,M),'process_main1'(I,J,K,L,N)],[D>=H,D>=L,C>=G,C>=K,A>=F,A>=I,B=J+1,J>=1,H>=1,O=M,M>=1,E=N,N>=1,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('process_main1',[A,B,C,D,E],1,['case_1'(A,B,C,D,E)],[A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('main1',[A,B,C,D,E],1,['process_main1'(A,B,C,D,E)],[A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_3',[A,B,C,D,E,F,G,H,E,F,G,H],1,[],[D=0,C=1,A=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,E>=0,F>=0,G>=0,H>=0]).
eq('case_3',[A,B,C,D,E,F,G,H,I,J,K,L],4,['append'(M,N,O,P,E,F,G,H,Q,R,S,T),'maxNorm'(U,T,L)],[D>=U,D>=P,B>=V,B>=N,C=O+1,A=M+1,O>=1,M>=1,U>=1,J>=V,J>=R,K=S+1,I=Q+1,S>=1,Q>=1,U>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0]).
eq('append',[A,B,C,D,E,F,G,H,I,J,K,L],1,['case_3'(A,B,C,D,E,F,G,H,I,J,K,L)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0]).
eq('case_4',[A,B,C,D,E,F,G],2,[],[D=0,B=1,A=0,G=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_5',[A,B,C,D,E,F,G,H,I,J,K,L,M,E,F],1,[],[I=1,G=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,E>=0,F>=0]).
eq('case_5',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O],6,['send_msg'(E,F,P)],[I=1,G=0,Q=P,P>=1,R=1,O=S,N=R,R>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0]).
eq('case_5',[A,B,C,D,E,F,G,H,I,J,K,L,M,E,F],3,[],[I=1,G=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,E>=0,F>=0]).
eq('case_5',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O],5,['append'(P,Q,R,S,E,F,T,U,N,O,V,W)],[I=1,H=Q,G=P,P>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0]).
eq('case_4',[A,B,C,D,E,F,G],6,['case_5'(A,B,C,D,E,F,H,I,J,K,L,M,N,O,P),'process_main2'(K,L,M,N,E,F,Q)],[D>=J,D>=N,C>=I,C>=M,A>=H,A>=K,B=L+1,L>=1,J>=1,R=P,S=O,O>=1,G=Q,Q>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('process_main2',[A,B,C,D,E,F,G],1,['case_4'(A,B,C,D,E,F,G)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('main2',[A,B,C,D,E],2,['process_main2'(A,B,C,D,F,G,E)],[F=1,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_6',[A,B,C,D,E,F,G,H,I],2,[],[D=0,B=1,A=0,I=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('case_7',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R],2,['maxNorm'(E,G,Q)],[K=1,I=0,R>=F,R>=H,P=1,G>=1,E>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0]).
eq('case_7',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R],7,['send_msg'(E,F,S),'maxNorm'(T,G,U)],[K=1,I=0,V=S,S>=1,T=1,W>=X,W>=H,Y=1,G>=1,T>=1,R=W,Q=U,P=Y,Y>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0]).
eq('case_7',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R],7,['send_msg'(G,H,S),'maxNorm'(E,G,T)],[K=1,I=0,U=S,S>=1,V>=F,V>=H,W=1,G>=1,E>=1,R=V,Q=T,P=W,W>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0]).
eq('case_7',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R],7,['append'(S,T,U,V,E,F,W,X,Y,Z,A1,B1),'append'(S,T,U,V,G,H,C1,D1,E1,F1,G1,H1),'maxNorm'(Y,E1,Q)],[K=1,J=T,I=S,S>=1,R>=Z,R>=F1,P=1,E1>=1,Y>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0]).
eq('case_8',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S],2,['process_main3'(O,P,Q,R,T,U,V,W,S)],[C>=U,C>=W,B>=T,B>=V,A=1,V>=1,T>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0,S>=0]).
eq('case_6',[A,B,C,D,E,F,G,H,I],6,['case_7'(A,B,C,D,E,F,G,H,J,K,L,M,N,O,P,Q,R,S),'case_8'(T,U,V,A,B,C,D,E,F,G,H,J,K,L,M,N,O,P,W)],[D>=L,D>=P,C>=K,C>=O,A>=J,A>=M,B=N+1,N>=1,L>=1,V=S,U=R,T=Q,Q>=1,I=W,W>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('process_main3',[A,B,C,D,E,F,G,H,I],1,['case_6'(A,B,C,D,E,F,G,H,I)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('main3',[A,B,C,D,E],3,['process_main3'(A,B,C,D,F,G,H,I,E)],[F=1,H=1,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('fun',[A,B,C],1,['send_msg'(A,B,C)],[A>=0,B>=0,C>=0]).
eq('case_9',[A,B,C,D,E,F,G,H,I],2,[],[D=0,B=1,A=0,I=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('case_10',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R],2,['maxNorm'(E,G,Q)],[K=1,I=0,R>=F,R>=H,P=1,G>=1,E>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0]).
eq('case_10',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R],7,['send_msg'(E,F,S),'maxNorm'(T,G,U)],[K=1,I=0,V=S,S>=1,T=1,W>=X,W>=H,Y=1,G>=1,T>=1,R=W,Q=U,P=Y,Y>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0]).
eq('case_10',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R],7,['fun'(G,H,S),'maxNorm'(E,G,T)],[K=1,I=0,U=S,S>=1,V>=F,V>=H,W=1,G>=1,E>=1,R=V,Q=T,P=W,W>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0]).
eq('case_10',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R],7,['append'(S,T,U,V,E,F,W,X,Y,Z,A1,B1),'append'(S,T,U,V,G,H,C1,D1,E1,F1,G1,H1),'maxNorm'(Y,E1,Q)],[K=1,J=T,I=S,S>=1,R>=Z,R>=F1,P=1,E1>=1,Y>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0]).
eq('case_11',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S],2,['process_main4'(O,P,Q,R,T,U,V,W,S)],[C>=U,C>=W,B>=T,B>=V,A=1,V>=1,T>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0,S>=0]).
eq('case_9',[A,B,C,D,E,F,G,H,I],6,['case_10'(A,B,C,D,E,F,G,H,J,K,L,M,N,O,P,Q,R,S),'case_11'(T,U,V,A,B,C,D,E,F,G,H,J,K,L,M,N,O,P,W)],[D>=L,D>=P,C>=K,C>=O,A>=J,A>=M,B=N+1,N>=1,L>=1,V=S,U=R,T=Q,Q>=1,I=W,W>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('process_main4',[A,B,C,D,E,F,G,H,I],1,['case_9'(A,B,C,D,E,F,G,H,I)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('main4',[A,B,C,D,E],3,['process_main4'(A,B,C,D,F,G,H,I,E)],[F=1,H=1,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_12',[A,B,C,D,E,F,G,H],2,[],[D=0,B=1,A=0,H=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('case_13',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q],2,[],[J=1,H=0,Q>=G,Q>=E,P=F,O=1,F>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0]).
eq('case_13',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q],3,[],[J=1,H=0,Q>=G,Q>=E,P=F,O=1,F>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0]).
eq('case_13',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q],4,[],[J=1,H=0,Q>=G,Q>=E,P=F,O=1,F>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0]).
eq('case_14',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V],7,['send_msg'(B,C,W)],[H>=A,X=W,W>=1,Y=1,Z=1,A1>=B1,A1>=Z,C1=Y,D1=1,Y>=1,V=A1,U=C1,T=D1,D1>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0,S>=0,T>=0,U>=0,V>=0]).
eq('case_14',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V],4,[],[A>=H+1,W=1,X=H+W,V>=C,V>=X,U=B,T=1,B>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0,S>=0,T>=0,U>=0,V>=0]).
eq('case_13',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q],9,['append'(R,S,T,U,F,G,V,W,X,Y,Z,A1),'case_14'(B1,C1,D1,A,B,C,D,E,F,G,H,I,J,K,L,M,N,R,S,E1,F1,G1)],[J=1,I=S,H=R,R>=1,D1=Y,C1=X,X>=1,B1=5,Q=G1,P=F1,O=E1,E1>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0]).
eq('case_15',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R],2,['process_main5'(N,O,P,Q,S,T,U,R)],[C>=U,C>=S,B=T,A=1,T>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0]).
eq('case_12',[A,B,C,D,E,F,G,H],6,['case_13'(A,B,C,D,E,F,G,I,J,K,L,M,N,O,P,Q,R),'case_15'(S,T,U,A,B,C,D,E,F,G,I,J,K,L,M,N,O,V)],[D>=K,D>=O,C>=J,C>=N,A>=I,A>=L,B=M+1,M>=1,K>=1,U=R,T=Q,S=P,P>=1,H=V,V>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('process_main5',[A,B,C,D,E,F,G,H],1,['case_12'(A,B,C,D,E,F,G,H)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('main5',[A,B,C,D,E],3,['process_main5'(A,B,C,D,F,G,H,E)],[F=0,G=1,A>=0,B>=0,C>=0,D>=0,E>=0]).

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [maxNorm/3]
1. recursive [non_tail] : [append/12,case_3/12]
2. non_recursive  : [transmit/1]
3. recursive  : [case_0/3,send/3]
4. non_recursive  : [send_msg/3]
5. non_recursive  : [case_2/12]
6. recursive  : [case_1/5,process_main1/5]
7. non_recursive  : [main1/5]
8. non_recursive  : [case_5/15]
9. recursive  : [case_4/7,process_main2/7]
10. non_recursive  : [main2/5]
11. non_recursive  : [case_7/18]
12. recursive  : [case_6/9,case_8/19,process_main3/9]
13. non_recursive  : [main3/5]
14. non_recursive  : [fun/3]
15. non_recursive  : [case_10/18]
16. recursive  : [case_11/19,case_9/9,process_main4/9]
17. non_recursive  : [main4/5]
18. non_recursive  : [case_14/22]
19. non_recursive  : [case_13/17]
20. recursive  : [case_12/8,case_15/18,process_main5/8]
21. non_recursive  : [main5/5]
Warning: the following predicates are never called:[and_op/3,eq/3,geq/3,gt/3,leq/3,lt/3,neg/2,neq/3,or/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into maxNorm/3
1. SCC is partially evaluated into append/12
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into send/3
4. SCC is partially evaluated into send_msg/3
5. SCC is partially evaluated into case_2/12
6. SCC is partially evaluated into process_main1/5
7. SCC is partially evaluated into main1/5
8. SCC is partially evaluated into case_5/15
9. SCC is partially evaluated into process_main2/7
10. SCC is partially evaluated into main2/5
11. SCC is partially evaluated into case_7/18
12. SCC is partially evaluated into process_main3/9
13. SCC is partially evaluated into main3/5
14. SCC is completely evaluated into other SCCs
15. SCC is partially evaluated into case_10/18
16. SCC is partially evaluated into process_main4/9
17. SCC is partially evaluated into main4/5
18. SCC is partially evaluated into case_14/22
19. SCC is partially evaluated into case_13/17
20. SCC is partially evaluated into process_main5/8
21. SCC is partially evaluated into main5/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations maxNorm/3 
* CE 14 is refined into CE [45] 
* CE 13 is refined into CE [46] 


#### Refined cost equations maxNorm/3 
* CE 45: maxNorm(A,B,B) = 0
     [B>=A,A>=1] 
* CE 46: maxNorm(A,B,A) = 0
     [A>=B+1,B>=0] 

### Cost equations --> "Loop" of maxNorm/3 
* CEs [45] --> Loop 36 
* CEs [46] --> Loop 37 

#### Loops of maxNorm/3 
* Loop 36: maxNorm(A,B,B) [B>=A,A>=1] 
* Loop 37: maxNorm(A,B,A) [A>=B+1,B>=0] 

### Ranking functions of CR maxNorm(A,B,C) 

#### Partial ranking functions of CR maxNorm(A,B,C) 


### Resulting Chains:maxNorm(A,B,C) 
* [37]
* [36]


### Merging Chains  maxNorm/3 into  External patterns of execution 
* [[36]] --> 1 
* [[37]] --> 2 


### Specialization of cost equations append/12 
* CE 4 is refined into CE [47] 
* CE 3 is refined into CE [48,49] 


#### Refined cost equations append/12 
* CE 47: append(A,B,C,D,E,F,G,H,E,F,G,H) = 2
     [H>=0,G>=0,F>=0,E>=0,B>=0,D=0,C=1,A=1] 
* CE 48: append(A,B,C,D,E,F,G,H,I,J,K,L) = 5+ append(M,N,O,P,E,F,G,H,Q,R,S,L)+ maxNorm(T,L,L):1
     [J>=R,D>=P,B>=N,L>=T,D>=T,S>=1,Q>=1,O>=1,M>=1,T>=1,J>=0,H>=0,G>=0,F>=0,E>=0,B>=0,S+1=K,Q+1=I,O+1=C,M+1=A] 
* CE 49: append(A,B,C,D,E,F,G,H,I,J,K,L) = 5+ append(M,N,O,P,E,F,G,H,Q,R,S,T)+ maxNorm(L,T,L):2
     [J>=R,D>=P,B>=N,D>=L,L>=T+1,S>=1,Q>=1,O>=1,M>=1,T>=0,J>=0,H>=0,G>=0,F>=0,E>=0,B>=0,S+1=K,Q+1=I,O+1=C,M+1=A] 

### Cost equations --> "Loop" of append/12 
* CEs [49] --> Loop 38 
* CEs [48] --> Loop 39 
* CEs [47] --> Loop 40 

#### Loops of append/12 
* Loop 38: append(A,B,C,D,E,F,G,H,I,J,K,L)->  append(A',B',C',D',E,F,G,H,E',F',G',H')
                  [L>=H'+1,J>=F',D>=D',B>=B',D>=L,H'>=0,K>=2,J>=0,I>=2,H>=0,G>=0,F>=0,E>=0,C>=2,B>=0,A>=2,K=G'+1,I=E'+1,C=C'+1,A=A'+1] 
* Loop 39: append(A,B,C,D,E,F,G,H,I,J,K,L)->  append(A',B',C',D',E,F,G,H,E',F',G',L)
                  [J>=F',D>=D',B>=B',L>=1,K>=2,J>=0,I>=2,H>=0,G>=0,F>=0,E>=0,D>=1,C>=2,B>=0,A>=2,K=G'+1,I=E'+1,C=C'+1,A=A'+1] 
* Loop 40: append(A,B,C,D,E,F,G,H,E,F,G,H) [H>=0,G>=0,F>=0,E>=0,B>=0,D=0,C=1,A=1] 

### Ranking functions of CR append(A,B,C,D,E,F,G,H,I,J,K,L) 
* RF of phase [38,39]: [A-1,C-1]

#### Partial ranking functions of CR append(A,B,C,D,E,F,G,H,I,J,K,L) 
* Partial RF of phase [38,39]:
  - RF of loop [38:1,39:1]:
    A-1
    C-1

Discarded unfeasible chain [[38,39]]...(Non-terminating chain proved terminating)

### Resulting Chains:append(A,B,C,D,E,F,G,H,I,J,K,L) 
* [[38,39],40]
* [40]


### Merging Chains  append/12 into  External patterns of execution 
* [[40]] --> 1 
* [[40,[38,39]]] --> 2 


### Specialization of cost equations send/3 
* CE 10 is refined into CE [50] 
* CE 9 is refined into CE [51] 


#### Refined cost equations send/3 
* CE 50: send(A,B,C) = 3
     [B>=0,C=1,A=1] 
* CE 51: send(A,B,C) = 8+ send(D,E,C)
     [B>=E,D>=1,C>=1,B>=0,D+1=A] 

### Cost equations --> "Loop" of send/3 
* CEs [51] --> Loop 41 
* CEs [50] --> Loop 42 

#### Loops of send/3 
* Loop 41: send(A,B,C)->  send(A',B',C)
                  [B>=B',A'>=1,C>=1,B>=0,A'+1=A] 
* Loop 42: send(A,B,C) [B>=0,C=1,A=1] 

### Ranking functions of CR send(A,B,C) 
* RF of phase [41]: [A-1]

#### Partial ranking functions of CR send(A,B,C) 
* Partial RF of phase [41]:
  - RF of loop [41:1]:
    A-1

Discarded unfeasible chain [[41]]...(Non-terminating chain proved terminating)

### Resulting Chains:send(A,B,C) 
* [[41],42]
* [42]


### Merging Chains  send/3 into  External patterns of execution 
* [[42]] --> 1 
* [[42,[41]]] --> 2 


### Specialization of cost equations send_msg/3 
* CE 1 is refined into CE [52,53] 


#### Refined cost equations send_msg/3 
* CE 52: send_msg(A,B,C) = 1+ send(D,B,E):1
     [B>=0,E=1,D=1,C=1,A=1] 
* CE 53: send_msg(A,B,C) = 1+ send(A,B,D):2
     [B>=0,A>=2,D=1,C=1] 

### Cost equations --> "Loop" of send_msg/3 
* CEs [53] --> Loop 43 
* CEs [52] --> Loop 44 

#### Loops of send_msg/3 
* Loop 43: send_msg(A,B,C) [B>=0,A>=2,C=1] 
* Loop 44: send_msg(A,B,C) [B>=0,C=1,A=1] 

### Ranking functions of CR send_msg(A,B,C) 

#### Partial ranking functions of CR send_msg(A,B,C) 


### Resulting Chains:send_msg(A,B,C) 
* [44]
* [43]


### Merging Chains  send_msg/3 into  External patterns of execution 
* [[44]] --> 1 
* [[43]] --> 2 


### Specialization of cost equations case_2/12 
* CE 26 is refined into CE [54,55] 
* CE 23 is refined into CE [56] 
* CE 24 is refined into CE [57] 
* CE 25 is refined into CE [58] 


#### Refined cost equations case_2/12 
* CE 54: case_2(A,B,C,D,E,F,G,H,I,J,K,L) = 5+ send_msg(M,F,N):1
     [C>=F,D>=K,C>=J,A>=H,F>=0,K>=0,J>=0,I>=1,H>=0,D>=1,A>=1,I+1=B,N=1,M=1,L=1,G=1,E=1] 
* CE 55: case_2(A,B,C,D,E,F,G,H,I,J,K,L) = 5+ send_msg(E,F,M):2
     [C>=F,A>=E,D>=K,C>=J,A>=H,F>=0,E>=2,K>=0,J>=0,I>=1,H>=0,D>=1,I+1=B,M=1,L=1,G=1] 
* CE 56: case_2(A,B,C,D,E,F,G,H,I,J,K,L) = 2
     [D>=K,C>=J,A>=H,C>=F,K>=0,J>=0,I>=1,H>=0,F>=0,D>=1,I+1=B,L=1,G=1,E=0] 
* CE 57: case_2(A,B,C,D,E,F,G,H,I,J,K,L) = 3
     [D>=K,C>=J,A>=H,C>=F,K>=0,J>=0,I>=1,H>=0,F>=0,D>=1,I+1=B,L=1,G=1,E=0] 
* CE 58: case_2(A,B,C,D,E,F,G,H,I,J,K,L) = 4
     [D>=K,C>=J,A>=H,C>=F,K>=0,J>=0,I>=1,H>=0,F>=0,D>=1,I+1=B,L=1,G=1,E=0] 

### Cost equations --> "Loop" of case_2/12 
* CEs [55] --> Loop 45 
* CEs [54] --> Loop 46 
* CEs [56,57,58] --> Loop 47 

#### Loops of case_2/12 
* Loop 45: case_2(A,B,C,D,E,F,G,H,I,J,K,L) [D>=K,C>=J,A>=H,C>=F,A>=E,K>=0,J>=0,H>=0,F>=0,E>=2,D>=1,B>=2,B=I+1,L=1,G=1] 
* Loop 46: case_2(A,B,C,D,E,F,G,H,I,J,K,L) [D>=K,C>=J,A>=H,C>=F,K>=0,J>=0,H>=0,F>=0,D>=1,B>=2,A>=1,B=I+1,L=1,G=1,E=1] 
* Loop 47: case_2(A,B,C,D,E,F,G,H,I,J,K,L) [D>=K,C>=J,A>=H,C>=F,K>=0,J>=0,H>=0,F>=0,D>=1,B>=2,B=I+1,L=1,G=1,E=0] 

### Ranking functions of CR case_2(A,B,C,D,E,F,G,H,I,J,K,L) 

#### Partial ranking functions of CR case_2(A,B,C,D,E,F,G,H,I,J,K,L) 


### Resulting Chains:case_2(A,B,C,D,E,F,G,H,I,J,K,L) 
* [47]
* [46]
* [45]


### Merging Chains  case_2/12 into  External patterns of execution 
* [[47]] --> 1 
* [[46]] --> 2 
* [[45]] --> 3 


### Specialization of cost equations process_main1/5 
* CE 12 is refined into CE [59] 
* CE 11 is refined into CE [60,61,62] 


#### Refined cost equations process_main1/5 
* CE 59: process_main1(A,B,C,D,E) = 3
     [C>=0,E=1,D=0,B=1,A=0] 
* CE 60: process_main1(A,B,C,D,E) = 7+ case_2(A,F,C,D,G,H,I,J,K,L,M,N):1+ process_main1(J,K,L,M,E)
     [D>=M,C>=L,A>=J,C>=H,M>=0,L>=0,K>=1,J>=0,H>=0,D>=1,E>=1,K+1=F,K+1=B,N=1,I=1,G=0] 
* CE 61: process_main1(A,B,C,D,E) = 7+ case_2(A,F,C,D,G,H,I,J,K,L,M,N):2+ process_main1(J,K,L,M,E)
     [D>=M,C>=L,A>=J,C>=H,M>=0,L>=0,K>=1,J>=0,H>=0,D>=1,A>=1,E>=1,K+1=F,K+1=B,N=1,I=1,G=1] 
* CE 62: process_main1(A,B,C,D,E) = 7+ case_2(A,F,C,D,G,H,I,J,K,L,M,N):3+ process_main1(J,K,L,M,E)
     [D>=M,C>=L,A>=J,C>=H,A>=G,M>=0,L>=0,K>=1,J>=0,H>=0,G>=2,D>=1,E>=1,K+1=F,K+1=B,N=1,I=1] 

### Cost equations --> "Loop" of process_main1/5 
* CEs [60,61,62] --> Loop 48 
* CEs [59] --> Loop 49 

#### Loops of process_main1/5 
* Loop 48: process_main1(A,B,C,D,E)->  process_main1(A',B',C',D',E)
                  [D>=D',C>=C',A>=A',D'>=0,C'>=0,A'>=0,E>=1,D>=1,B>=2,B=B'+1] 
* Loop 49: process_main1(A,B,C,D,E) [C>=0,E=1,D=0,B=1,A=0] 

### Ranking functions of CR process_main1(A,B,C,D,E) 
* RF of phase [48]: [B-1]

#### Partial ranking functions of CR process_main1(A,B,C,D,E) 
* Partial RF of phase [48]:
  - RF of loop [48:1]:
    B-1

Discarded unfeasible chain [[48]]...(Non-terminating chain proved terminating)

### Resulting Chains:process_main1(A,B,C,D,E) 
* [[48],49]
* [49]


### Merging Chains  process_main1/5 into  External patterns of execution 
* [[49]] --> 1 
* [[49,[48]]] --> 2 


### Specialization of cost equations main1/5 
* CE 2 is refined into CE [63,64] 


#### Refined cost equations main1/5 
* CE 63: main1(A,B,C,D,E) = 1+ process_main1(F,G,C,H,I):1
     [C>=0,I=1,H=0,G=1,F=0,E=1,D=0,B=1,A=0] 
* CE 64: main1(A,B,C,D,E) = 1+ process_main1(A,B,C,D,F):2
     [D>=1,C>=0,B>=2,A>=0,F=1,E=1] 

### Cost equations --> "Loop" of main1/5 
* CEs [64] --> Loop 50 
* CEs [63] --> Loop 51 

#### Loops of main1/5 
* Loop 50: main1(A,B,C,D,E) [D>=1,C>=0,B>=2,A>=0,E=1] 
* Loop 51: main1(A,B,C,D,E) [C>=0,E=1,D=0,B=1,A=0] 

### Ranking functions of CR main1(A,B,C,D,E) 

#### Partial ranking functions of CR main1(A,B,C,D,E) 


### Resulting Chains:main1(A,B,C,D,E) 
* [51]
* [50]


### Merging Chains  main1/5 into  External patterns of execution 
* [[51]] --> 1 
* [[50]] --> 2 


### Specialization of cost equations case_5/15 
* CE 30 is refined into CE [65,66] 
* CE 27 is refined into CE [67] 
* CE 29 is refined into CE [68] 
* CE 28 is refined into CE [69] 


#### Refined cost equations case_5/15 
* CE 65: case_5(A,B,C,D,E,F,G,H,I,J,K,L,M,N,F) = 5+ append(O,H,P,Q,R,F,S,T,U,F,S,T):1
     [C>=H,D>=M,C>=L,A>=J,T>=0,S>=0,F>=0,H>=0,M>=0,L>=0,K>=1,J>=0,D>=1,A>=1,K+1=B,U=1,R=1,Q=0,P=1,O=1,N=1,I=1,G=1,E=1] 
* CE 66: case_5(A,B,C,D,E,F,G,H,I,J,K,L,M,G,N) = 5+ append(G,H,G,O,P,F,Q,R,G,N,S,T):2
     [O+R>=T,T>=R,N>=F,S>=G,A>=G,C>=H,D>=M,C>=L,A>=J,T>=1,R>=0,F>=0,O>=1,G>=2,H>=0,M>=0,L>=0,K>=1,J>=0,D>=1,G+Q=S+1,K+1=B,P=1,I=1,E=1] 
* CE 67: case_5(A,B,C,D,E,F,G,H,I,J,K,L,M,N,F) = 1
     [D>=M,C>=L,A>=J,C>=H,M>=0,L>=0,K>=1,J>=0,H>=0,F>=0,D>=1,K+1=B,N=1,I=1,G=0,E=1] 
* CE 68: case_5(A,B,C,D,E,F,G,H,I,J,K,L,M,N,F) = 3
     [D>=M,C>=L,A>=J,C>=H,M>=0,L>=0,K>=1,J>=0,H>=0,F>=0,D>=1,K+1=B,N=1,I=1,G=0,E=1] 
* CE 69: case_5(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) = 6+ send_msg(P,F,Q):1
     [D>=M,C>=L,A>=J,C>=H,F>=0,O>=0,M>=0,L>=0,K>=1,J>=0,H>=0,D>=1,K+1=B,Q=1,P=1,N=1,I=1,G=0,E=1] 

### Cost equations --> "Loop" of case_5/15 
* CEs [66] --> Loop 52 
* CEs [65] --> Loop 53 
* CEs [67,68,69] --> Loop 54 

#### Loops of case_5/15 
* Loop 52: case_5(A,B,C,D,E,F,G,H,I,J,K,L,M,G,N) [D>=M,C>=L,A>=J,C>=H,A>=G,N>=F,M>=0,L>=0,J>=0,H>=0,G>=2,F>=0,D>=1,B>=2,B=K+1,I=1,E=1] 
* Loop 53: case_5(A,B,C,D,E,F,G,H,I,J,K,L,M,N,F) [D>=M,C>=L,A>=J,C>=H,M>=0,L>=0,J>=0,H>=0,F>=0,D>=1,B>=2,A>=1,B=K+1,N=1,I=1,G=1,E=1] 
* Loop 54: case_5(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) [D>=M,C>=L,A>=J,C>=H,O>=0,M>=0,L>=0,J>=0,H>=0,F>=0,D>=1,B>=2,B=K+1,N=1,I=1,G=0,E=1] 

### Ranking functions of CR case_5(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) 

#### Partial ranking functions of CR case_5(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) 


### Resulting Chains:case_5(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) 
* [54]
* [53]
* [52]


### Merging Chains  case_5/15 into  External patterns of execution 
* [[54]] --> 1 
* [[53]] --> 2 
* [[52]] --> 3 


### Specialization of cost equations process_main2/7 
* CE 16 is refined into CE [70] 
* CE 15 is refined into CE [71,72,73] 


#### Refined cost equations process_main2/7 
* CE 70: process_main2(A,B,C,D,E,F,G) = 3
     [F>=0,C>=0,G=1,E=1,D=0,B=1,A=0] 
* CE 71: process_main2(A,B,C,D,E,F,G) = 7+ case_5(A,H,C,D,I,F,J,K,L,M,N,O,P,Q,R):1+ process_main2(M,N,O,P,S,F,G)
     [D>=P,C>=O,A>=M,C>=K,R>=0,P>=0,O>=0,N>=1,M>=0,K>=0,F>=0,D>=1,G>=1,N+1=H,N+1=B,S=1,Q=1,L=1,J=0,I=1,E=1] 
* CE 72: process_main2(A,B,C,D,E,F,G) = 7+ case_5(A,H,C,D,I,F,J,K,L,M,N,O,P,Q,F):2+ process_main2(M,N,O,P,R,F,G)
     [D>=P,C>=O,A>=M,C>=K,F>=0,P>=0,O>=0,N>=1,M>=0,K>=0,D>=1,A>=1,G>=1,N+1=H,N+1=B,R=1,Q=1,L=1,J=1,I=1,E=1] 
* CE 73: process_main2(A,B,C,D,E,F,G) = 7+ case_5(A,H,C,D,I,F,J,K,L,M,N,O,P,J,Q):3+ process_main2(M,N,O,P,R,F,G)
     [A>=J,D>=P,C>=O,A>=M,C>=K,Q>=F,J>=2,P>=0,O>=0,N>=1,M>=0,K>=0,F>=0,D>=1,G>=1,N+1=H,N+1=B,R=1,L=1,I=1,E=1] 

### Cost equations --> "Loop" of process_main2/7 
* CEs [71,72,73] --> Loop 55 
* CEs [70] --> Loop 56 

#### Loops of process_main2/7 
* Loop 55: process_main2(A,B,C,D,E,F,G)->  process_main2(A',B',C',D',E',F,G)
                  [D>=D',C>=C',A>=A',D'>=0,C'>=0,A'>=0,G>=1,F>=0,D>=1,B>=2,B=B'+1,E'=1,E=1] 
* Loop 56: process_main2(A,B,C,D,E,F,G) [F>=0,C>=0,G=1,E=1,D=0,B=1,A=0] 

### Ranking functions of CR process_main2(A,B,C,D,E,F,G) 
* RF of phase [55]: [B-1]

#### Partial ranking functions of CR process_main2(A,B,C,D,E,F,G) 
* Partial RF of phase [55]:
  - RF of loop [55:1]:
    B-1

Discarded unfeasible chain [[55]]...(Non-terminating chain proved terminating)

### Resulting Chains:process_main2(A,B,C,D,E,F,G) 
* [[55],56]
* [56]


### Merging Chains  process_main2/7 into  External patterns of execution 
* [[56]] --> 1 
* [[56,[55]]] --> 2 


### Specialization of cost equations main2/5 
* CE 5 is refined into CE [74,75] 


#### Refined cost equations main2/5 
* CE 74: main2(A,B,C,D,E) = 2+ process_main2(F,G,C,H,I,J,K):1
     [J>=0,C>=0,K=1,I=1,H=0,G=1,F=0,E=1,D=0,B=1,A=0] 
* CE 75: main2(A,B,C,D,E) = 2+ process_main2(A,B,C,D,F,G,H):2
     [G>=0,D>=1,C>=0,B>=2,A>=0,H=1,F=1,E=1] 

### Cost equations --> "Loop" of main2/5 
* CEs [75] --> Loop 57 
* CEs [74] --> Loop 58 

#### Loops of main2/5 
* Loop 57: main2(A,B,C,D,E) [D>=1,C>=0,B>=2,A>=0,E=1] 
* Loop 58: main2(A,B,C,D,E) [C>=0,E=1,D=0,B=1,A=0] 

### Ranking functions of CR main2(A,B,C,D,E) 

#### Partial ranking functions of CR main2(A,B,C,D,E) 


### Resulting Chains:main2(A,B,C,D,E) 
* [58]
* [57]


### Merging Chains  main2/5 into  External patterns of execution 
* [[58]] --> 1 
* [[57]] --> 2 


### Specialization of cost equations case_7/18 
* CE 34 is refined into CE [76,77,78,79] 
* CE 31 is refined into CE [80,81] 
* CE 32 is refined into CE [82,83] 
* CE 33 is refined into CE [84,85,86,87] 


#### Refined cost equations case_7/18 
* CE 76: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,G,Q) = 7+ append(R,J,S,T,E,F,U,V,E,F,U,V):1+ append(W,J,X,Y,G,H,Z,A1,G,H,Z,A1):1+ maxNorm(E,G,G):1
     [G>=E,Q>=H,C>=J,Q>=F,D>=O,C>=N,A>=L,E>=1,A1>=0,Z>=0,H>=0,J>=0,V>=0,U>=0,F>=0,O>=0,N>=0,M>=1,L>=0,D>=1,A>=1,M+1=B,Y=0,X=1,W=1,T=0,S=1,R=1,P=1,K=1,I=1] 
* CE 77: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,E,Q) = 7+ append(R,J,S,T,E,F,U,V,E,F,U,V):1+ append(W,J,X,Y,G,H,Z,A1,G,H,Z,A1):1+ maxNorm(E,G,E):2
     [E>=G+1,Q>=H,C>=J,Q>=F,D>=O,C>=N,A>=L,G>=1,A1>=0,Z>=0,H>=0,J>=0,V>=0,U>=0,F>=0,O>=0,N>=0,M>=1,L>=0,D>=1,A>=1,M+1=B,Y=0,X=1,W=1,T=0,S=1,R=1,P=1,K=1,I=1] 
* CE 78: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R) = 7+ append(I,J,I,S,T,F,U,V,W,X,Y,Z):2+ append(I,J,I,S,A1,H,B1,C1,Q,D1,E1,F1):2+ maxNorm(W,Q,Q):1
     [S+C1>=F1,S+V>=Z,Q>=W,R>=D1,F1>=C1,D1>=H,W>=I,E1>=I,Y>=I,A>=I,C>=J,R>=X,Z>=V,X>=F,D>=O,C>=N,A>=L,F1>=1,C1>=0,H>=0,S>=1,I>=2,J>=0,Z>=1,V>=0,F>=0,O>=0,N>=0,M>=1,L>=0,D>=1,I+B1=E1+1,Q+1=I+A1,I+U=Y+1,W+1=I+T,Q+1=G+I,W+1=E+I,M+1=B,P=1,K=1] 
* CE 79: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R) = 7+ append(I,J,I,S,T,F,U,V,Q,W,X,Y):2+ append(I,J,I,S,Z,H,A1,B1,C1,D1,E1,F1):2+ maxNorm(Q,C1,Q):2
     [S+B1>=F1,S+V>=Y,Q>=C1+1,R>=D1,F1>=B1,D1>=H,C1>=I,E1>=I,X>=I,A>=I,C>=J,R>=W,Y>=V,W>=F,D>=O,C>=N,A>=L,F1>=1,B1>=0,H>=0,S>=1,I>=2,J>=0,Y>=1,V>=0,F>=0,O>=0,N>=0,M>=1,L>=0,D>=1,I+A1=E1+1,C1+1=I+Z,I+U=X+1,Q+1=I+T,C1+1=G+I,Q+1=E+I,M+1=B,P=1,K=1] 
* CE 80: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,G,Q) = 2+ maxNorm(E,G,G):1
     [G>=E,D>=O,C>=N,A>=L,C>=J,Q>=H,Q>=F,E>=1,O>=0,N>=0,M>=1,L>=0,J>=0,H>=0,F>=0,D>=1,M+1=B,P=1,K=1,I=0] 
* CE 81: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,E,Q) = 2+ maxNorm(E,G,E):2
     [E>=G+1,D>=O,C>=N,A>=L,C>=J,Q>=H,Q>=F,G>=1,O>=0,N>=0,M>=1,L>=0,J>=0,H>=0,F>=0,D>=1,M+1=B,P=1,K=1,I=0] 
* CE 82: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,G,Q) = 7+ send_msg(R,F,S):1+ maxNorm(T,G,G):1
     [D>=O,C>=N,A>=L,C>=J,Q>=H,G>=1,F>=0,O>=0,N>=0,M>=1,L>=0,J>=0,H>=0,D>=1,M+1=B,T=1,S=1,R=1,P=1,K=1,I=0,E=1] 
* CE 83: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,G,Q) = 7+ send_msg(E,F,R):2+ maxNorm(S,G,G):1
     [D>=O,C>=N,A>=L,C>=J,Q>=H,G>=1,F>=0,E>=2,O>=0,N>=0,M>=1,L>=0,J>=0,H>=0,D>=1,M+1=B,S=1,R=1,P=1,K=1,I=0] 
* CE 84: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R) = 7+ send_msg(S,H,T):1+ maxNorm(U,V,W):1
     [R>=H,D>=O,C>=N,A>=L,C>=J,R>=F,H>=0,O>=0,N>=0,M>=1,L>=0,J>=0,F>=0,D>=1,M+1=B,W=1,V=1,U=1,T=1,S=1,Q=1,P=1,K=1,I=0,G=1,E=1] 
* CE 85: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,E,Q) = 7+ send_msg(R,H,S):1+ maxNorm(E,T,E):2
     [Q>=H,D>=O,C>=N,A>=L,C>=J,Q>=F,E>=2,H>=0,O>=0,N>=0,M>=1,L>=0,J>=0,F>=0,D>=1,M+1=B,T=1,S=1,R=1,P=1,K=1,I=0,G=1] 
* CE 86: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,G,Q) = 7+ send_msg(G,H,R):2+ maxNorm(E,G,G):1
     [G>=E,Q>=H,D>=O,C>=N,A>=L,C>=J,Q>=F,G>=2,E>=1,H>=0,O>=0,N>=0,M>=1,L>=0,J>=0,F>=0,D>=1,M+1=B,R=1,P=1,K=1,I=0] 
* CE 87: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,E,Q) = 7+ send_msg(G,H,R):2+ maxNorm(E,G,E):2
     [E>=G+1,Q>=H,D>=O,C>=N,A>=L,C>=J,Q>=F,G>=2,H>=0,O>=0,N>=0,M>=1,L>=0,J>=0,F>=0,D>=1,M+1=B,R=1,P=1,K=1,I=0] 

### Cost equations --> "Loop" of case_7/18 
* CEs [78] --> Loop 59 
* CEs [79] --> Loop 60 
* CEs [76] --> Loop 61 
* CEs [77] --> Loop 62 
* CEs [83] --> Loop 63 
* CEs [80,86] --> Loop 64 
* CEs [81,85,87] --> Loop 65 
* CEs [82,84] --> Loop 66 

#### Loops of case_7/18 
* Loop 59: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R) [D>=O,C>=N,A>=L,C>=J,A>=I,R>=H,R>=F,G>=E,O>=0,N>=0,L>=0,J>=0,I>=2,H>=0,F>=0,E>=1,D>=1,B>=2,G+I=Q+1,B=M+1,P=1,K=1] 
* Loop 60: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R) [D>=O,C>=N,A>=L,C>=J,A>=I,R>=H,E>=G+1,R>=F,O>=0,N>=0,L>=0,J>=0,I>=2,H>=0,G>=1,F>=0,D>=1,B>=2,E+I=Q+1,B=M+1,P=1,K=1] 
* Loop 61: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,G,Q) [D>=O,C>=N,A>=L,C>=J,Q>=H,Q>=F,G>=E,O>=0,N>=0,L>=0,J>=0,H>=0,F>=0,E>=1,D>=1,B>=2,A>=1,B=M+1,P=1,K=1,I=1] 
* Loop 62: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,E,Q) [D>=O,C>=N,A>=L,C>=J,Q>=H,E>=G+1,Q>=F,O>=0,N>=0,L>=0,J>=0,H>=0,G>=1,F>=0,D>=1,B>=2,A>=1,B=M+1,P=1,K=1,I=1] 
* Loop 63: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,G,Q) [D>=O,C>=N,A>=L,C>=J,Q>=H,O>=0,N>=0,L>=0,J>=0,H>=0,G>=1,F>=0,E>=2,D>=1,B>=2,B=M+1,P=1,K=1,I=0] 
* Loop 64: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,G,Q) [D>=O,C>=N,A>=L,C>=J,Q>=H,Q>=F,G>=E,O>=0,N>=0,L>=0,J>=0,H>=0,F>=0,E>=1,D>=1,B>=2,B=M+1,P=1,K=1,I=0] 
* Loop 65: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,E,Q) [D>=O,C>=N,A>=L,C>=J,Q>=H,E>=G+1,Q>=F,O>=0,N>=0,L>=0,J>=0,H>=0,G>=1,F>=0,D>=1,B>=2,B=M+1,P=1,K=1,I=0] 
* Loop 66: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,G,Q) [D>=O,C>=N,A>=L,C>=J,Q>=H,O>=0,N>=0,L>=0,J>=0,H>=0,G>=1,F>=0,D>=1,B>=2,B=M+1,P=1,K=1,I=0,E=1] 

### Ranking functions of CR case_7(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R) 

#### Partial ranking functions of CR case_7(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R) 


### Resulting Chains:case_7(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R) 
* [66]
* [65]
* [64]
* [63]
* [62]
* [61]
* [60]
* [59]


### Merging Chains  case_7/18 into  External patterns of execution 
* [[66]] --> 1 
* [[65]] --> 2 
* [[64]] --> 3 
* [[63]] --> 4 
* [[62]] --> 5 
* [[61]] --> 6 
* [[60]] --> 7 
* [[59]] --> 8 


### Specialization of cost equations process_main3/9 
* CE 18 is refined into CE [88,89,90,91,92,93,94,95] 
* CE 17 is refined into CE [96] 


#### Refined cost equations process_main3/9 
* CE 88: process_main3(A,B,C,D,E,F,G,H,I) = 9+ case_7(A,J,C,D,K,F,G,H,L,M,N,O,P,Q,R,S,G,T):1+ process_main3(O,P,Q,R,U,V,W,X,I)
     [T>=X,G>=W,T>=V,G>=U,D>=R,C>=Q,A>=O,C>=M,T>=H,W>=1,U>=1,R>=0,Q>=0,P>=1,O>=0,M>=0,H>=0,F>=0,D>=1,I>=1,P+1=J,P+1=B,S=1,N=1,L=0,K=1,E=1] 
* CE 89: process_main3(A,B,C,D,E,F,G,H,I) = 9+ case_7(A,J,C,D,E,F,G,H,K,L,M,N,O,P,Q,R,E,S):2+ process_main3(N,O,P,Q,T,U,V,W,I)
     [S>=W,E>=V,S>=U,E>=T,D>=Q,C>=P,A>=N,C>=L,S>=H,E>=G+1,S>=F,V>=1,T>=1,Q>=0,P>=0,O>=1,N>=0,L>=0,H>=0,G>=1,F>=0,D>=1,I>=1,O+1=J,O+1=B,R=1,M=1,K=0] 
* CE 90: process_main3(A,B,C,D,E,F,G,H,I) = 9+ case_7(A,J,C,D,E,F,G,H,K,L,M,N,O,P,Q,R,G,S):3+ process_main3(N,O,P,Q,T,U,V,W,I)
     [S>=W,G>=V,S>=U,G>=T,D>=Q,C>=P,A>=N,C>=L,S>=H,S>=F,G>=E,V>=1,T>=1,Q>=0,P>=0,O>=1,N>=0,L>=0,H>=0,F>=0,E>=1,D>=1,I>=1,O+1=J,O+1=B,R=1,M=1,K=0] 
* CE 91: process_main3(A,B,C,D,E,F,G,H,I) = 9+ case_7(A,J,C,D,E,F,G,H,K,L,M,N,O,P,Q,R,G,S):4+ process_main3(N,O,P,Q,T,U,V,W,I)
     [S>=W,G>=V,S>=U,G>=T,D>=Q,C>=P,A>=N,C>=L,S>=H,V>=1,T>=1,Q>=0,P>=0,O>=1,N>=0,L>=0,H>=0,F>=0,E>=2,D>=1,I>=1,O+1=J,O+1=B,R=1,M=1,K=0] 
* CE 92: process_main3(A,B,C,D,E,F,G,H,I) = 9+ case_7(A,J,C,D,E,F,G,H,K,L,M,N,O,P,Q,R,E,S):5+ process_main3(N,O,P,Q,T,U,V,W,I)
     [S>=W,E>=V,S>=U,E>=T,D>=Q,C>=P,A>=N,C>=L,S>=H,E>=G+1,S>=F,V>=1,T>=1,Q>=0,P>=0,O>=1,N>=0,L>=0,H>=0,G>=1,F>=0,D>=1,A>=1,I>=1,O+1=J,O+1=B,R=1,M=1,K=1] 
* CE 93: process_main3(A,B,C,D,E,F,G,H,I) = 9+ case_7(A,J,C,D,E,F,G,H,K,L,M,N,O,P,Q,R,G,S):6+ process_main3(N,O,P,Q,T,U,V,W,I)
     [S>=W,G>=V,S>=U,G>=T,D>=Q,C>=P,A>=N,C>=L,S>=H,S>=F,G>=E,V>=1,T>=1,Q>=0,P>=0,O>=1,N>=0,L>=0,H>=0,F>=0,E>=1,D>=1,A>=1,I>=1,O+1=J,O+1=B,R=1,M=1,K=1] 
* CE 94: process_main3(A,B,C,D,E,F,G,H,I) = 9+ case_7(A,J,C,D,E,F,G,H,K,L,M,N,O,P,Q,R,S,T):7+ process_main3(N,O,P,Q,U,V,W,X,I)
     [A+E>=S+1,T>=X,S>=W,T>=V,S>=U,D>=Q,C>=P,A>=N,C>=L,T>=H,E>=G+1,T>=F,S>=E+1,W>=1,U>=1,Q>=0,P>=0,O>=1,N>=0,L>=0,H>=0,G>=1,F>=0,D>=1,I>=1,S+1=E+K,O+1=J,O+1=B,R=1,M=1] 
* CE 95: process_main3(A,B,C,D,E,F,G,H,I) = 9+ case_7(A,J,C,D,E,F,G,H,K,L,M,N,O,P,Q,R,S,T):8+ process_main3(N,O,P,Q,U,V,W,X,I)
     [A+G>=S+1,T>=X,S>=W,T>=V,S>=U,D>=Q,C>=P,A>=N,C>=L,T>=H,S>=G+1,T>=F,G>=E,W>=1,U>=1,Q>=0,P>=0,O>=1,N>=0,L>=0,H>=0,F>=0,E>=1,D>=1,I>=1,S+1=G+K,O+1=J,O+1=B,R=1,M=1] 
* CE 96: process_main3(A,B,C,D,E,F,G,H,I) = 3
     [H>=0,G>=1,F>=0,E>=1,C>=0,I=1,D=0,B=1,A=0] 

### Cost equations --> "Loop" of process_main3/9 
* CEs [96] --> Loop 67 
* CEs [91] --> Loop 68 
* CEs [94] --> Loop 69 
* CEs [95] --> Loop 70 
* CEs [89,92] --> Loop 71 
* CEs [93] --> Loop 72 
* CEs [88,90] --> Loop 73 

#### Loops of process_main3/9 
* Loop 67: process_main3(A,B,C,D,E,F,G,H,I) [H>=0,G>=1,F>=0,E>=1,C>=0,I=1,D=0,B=1,A=0] 
* Loop 68: process_main3(A,B,C,D,E,F,G,H,I)->  process_main3(A',B',C',D',E',F',G',H',I)
                  [G>=G',G>=E',D>=D',C>=C',A>=A',G'>=1,E'>=1,D'>=0,C'>=0,A'>=0,I>=1,H>=0,F>=0,E>=2,D>=1,B>=2,B=B'+1] 
* Loop 69: process_main3(A,B,C,D,E,F,G,H,I)->  process_main3(A',B',C',D',E',F',G',H',I)
                  [A+E>=G'+1,A+E>=E'+1,D>=D',C>=C',A>=A',E>=G+1,G'>=1,E'>=1,D'>=0,C'>=0,A'>=0,I>=1,H>=0,G>=1,F>=0,D>=1,B>=2,A>=2,B=B'+1] 
* Loop 70: process_main3(A,B,C,D,E,F,G,H,I)->  process_main3(A',B',C',D',E',F',G',H',I)
                  [A+G>=G'+1,A+G>=E'+1,D>=D',C>=C',A>=A',G>=E,G'>=1,E'>=1,D'>=0,C'>=0,A'>=0,I>=1,H>=0,F>=0,E>=1,D>=1,B>=2,A>=2,B=B'+1] 
* Loop 71: process_main3(A,B,C,D,E,F,G,H,I)->  process_main3(A',B',C',D',E',F',G',H',I)
                  [E>=G',E>=E',D>=D',C>=C',A>=A',E>=G+1,G'>=1,E'>=1,D'>=0,C'>=0,A'>=0,I>=1,H>=0,G>=1,F>=0,D>=1,B>=2,B=B'+1] 
* Loop 72: process_main3(A,B,C,D,E,F,G,H,I)->  process_main3(A',B',C',D',E',F',G',H',I)
                  [G>=G',G>=E',D>=D',C>=C',A>=A',G>=E,G'>=1,E'>=1,D'>=0,C'>=0,A'>=0,I>=1,H>=0,F>=0,E>=1,D>=1,B>=2,A>=1,B=B'+1] 
* Loop 73: process_main3(A,B,C,D,E,F,G,H,I)->  process_main3(A',B',C',D',E',F',G',H',I)
                  [G>=G',G>=E',D>=D',C>=C',A>=A',G>=E,G'>=1,E'>=1,D'>=0,C'>=0,A'>=0,I>=1,H>=0,F>=0,E>=1,D>=1,B>=2,B=B'+1] 

### Ranking functions of CR process_main3(A,B,C,D,E,F,G,H,I) 
* RF of phase [68,69,70,71,72,73]: [B-1]

#### Partial ranking functions of CR process_main3(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [68,69,70,71,72,73]:
  - RF of loop [68:1,69:1,70:1,71:1,72:1,73:1]:
    B-1

Discarded unfeasible chain [[68,69,70,71,72,73]]...(Non-terminating chain proved terminating)

### Resulting Chains:process_main3(A,B,C,D,E,F,G,H,I) 
* [[68,69,70,71,72,73],67]
* [67]


### Merging Chains  process_main3/9 into  External patterns of execution 
* [[67]] --> 1 
* [[67,[68,69,70,71,72,73]]] --> 2 


### Specialization of cost equations main3/5 
* CE 6 is refined into CE [97,98] 


#### Refined cost equations main3/5 
* CE 97: main3(A,B,C,D,E) = 3+ process_main3(F,G,C,H,I,J,K,L,M):1
     [L>=0,J>=0,C>=0,M=1,K=1,I=1,H=0,G=1,F=0,E=1,D=0,B=1,A=0] 
* CE 98: main3(A,B,C,D,E) = 3+ process_main3(A,B,C,D,F,G,H,I,J):2
     [I>=0,G>=0,D>=1,C>=0,B>=2,A>=0,J=1,H=1,F=1,E=1] 

### Cost equations --> "Loop" of main3/5 
* CEs [98] --> Loop 74 
* CEs [97] --> Loop 75 

#### Loops of main3/5 
* Loop 74: main3(A,B,C,D,E) [D>=1,C>=0,B>=2,A>=0,E=1] 
* Loop 75: main3(A,B,C,D,E) [C>=0,E=1,D=0,B=1,A=0] 

### Ranking functions of CR main3(A,B,C,D,E) 

#### Partial ranking functions of CR main3(A,B,C,D,E) 


### Resulting Chains:main3(A,B,C,D,E) 
* [75]
* [74]


### Merging Chains  main3/5 into  External patterns of execution 
* [[75]] --> 1 
* [[74]] --> 2 


### Specialization of cost equations case_10/18 
* CE 38 is refined into CE [99,100,101,102] 
* CE 35 is refined into CE [103,104] 
* CE 36 is refined into CE [105,106] 
* CE 37 is refined into CE [107,108,109,110] 


#### Refined cost equations case_10/18 
* CE 99: case_10(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,G,Q) = 7+ append(R,J,S,T,E,F,U,V,E,F,U,V):1+ append(W,J,X,Y,G,H,Z,A1,G,H,Z,A1):1+ maxNorm(E,G,G):1
     [G>=E,Q>=H,C>=J,Q>=F,D>=O,C>=N,A>=L,E>=1,A1>=0,Z>=0,H>=0,J>=0,V>=0,U>=0,F>=0,O>=0,N>=0,M>=1,L>=0,D>=1,A>=1,M+1=B,Y=0,X=1,W=1,T=0,S=1,R=1,P=1,K=1,I=1] 
* CE 100: case_10(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,E,Q) = 7+ append(R,J,S,T,E,F,U,V,E,F,U,V):1+ append(W,J,X,Y,G,H,Z,A1,G,H,Z,A1):1+ maxNorm(E,G,E):2
     [E>=G+1,Q>=H,C>=J,Q>=F,D>=O,C>=N,A>=L,G>=1,A1>=0,Z>=0,H>=0,J>=0,V>=0,U>=0,F>=0,O>=0,N>=0,M>=1,L>=0,D>=1,A>=1,M+1=B,Y=0,X=1,W=1,T=0,S=1,R=1,P=1,K=1,I=1] 
* CE 101: case_10(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R) = 7+ append(I,J,I,S,T,F,U,V,W,X,Y,Z):2+ append(I,J,I,S,A1,H,B1,C1,Q,D1,E1,F1):2+ maxNorm(W,Q,Q):1
     [S+C1>=F1,S+V>=Z,Q>=W,R>=D1,F1>=C1,D1>=H,W>=I,E1>=I,Y>=I,A>=I,C>=J,R>=X,Z>=V,X>=F,D>=O,C>=N,A>=L,F1>=1,C1>=0,H>=0,S>=1,I>=2,J>=0,Z>=1,V>=0,F>=0,O>=0,N>=0,M>=1,L>=0,D>=1,I+B1=E1+1,Q+1=I+A1,I+U=Y+1,W+1=I+T,Q+1=G+I,W+1=E+I,M+1=B,P=1,K=1] 
* CE 102: case_10(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R) = 7+ append(I,J,I,S,T,F,U,V,Q,W,X,Y):2+ append(I,J,I,S,Z,H,A1,B1,C1,D1,E1,F1):2+ maxNorm(Q,C1,Q):2
     [S+B1>=F1,S+V>=Y,Q>=C1+1,R>=D1,F1>=B1,D1>=H,C1>=I,E1>=I,X>=I,A>=I,C>=J,R>=W,Y>=V,W>=F,D>=O,C>=N,A>=L,F1>=1,B1>=0,H>=0,S>=1,I>=2,J>=0,Y>=1,V>=0,F>=0,O>=0,N>=0,M>=1,L>=0,D>=1,I+A1=E1+1,C1+1=I+Z,I+U=X+1,Q+1=I+T,C1+1=G+I,Q+1=E+I,M+1=B,P=1,K=1] 
* CE 103: case_10(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,G,Q) = 2+ maxNorm(E,G,G):1
     [G>=E,D>=O,C>=N,A>=L,C>=J,Q>=H,Q>=F,E>=1,O>=0,N>=0,M>=1,L>=0,J>=0,H>=0,F>=0,D>=1,M+1=B,P=1,K=1,I=0] 
* CE 104: case_10(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,E,Q) = 2+ maxNorm(E,G,E):2
     [E>=G+1,D>=O,C>=N,A>=L,C>=J,Q>=H,Q>=F,G>=1,O>=0,N>=0,M>=1,L>=0,J>=0,H>=0,F>=0,D>=1,M+1=B,P=1,K=1,I=0] 
* CE 105: case_10(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,G,Q) = 7+ send_msg(R,F,S):1+ maxNorm(T,G,G):1
     [D>=O,C>=N,A>=L,C>=J,Q>=H,G>=1,F>=0,O>=0,N>=0,M>=1,L>=0,J>=0,H>=0,D>=1,M+1=B,T=1,S=1,R=1,P=1,K=1,I=0,E=1] 
* CE 106: case_10(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,G,Q) = 7+ send_msg(E,F,R):2+ maxNorm(S,G,G):1
     [D>=O,C>=N,A>=L,C>=J,Q>=H,G>=1,F>=0,E>=2,O>=0,N>=0,M>=1,L>=0,J>=0,H>=0,D>=1,M+1=B,S=1,R=1,P=1,K=1,I=0] 
* CE 107: case_10(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R) = 8+ send_msg(S,H,T):1+ maxNorm(U,V,W):1
     [R>=H,D>=O,C>=N,A>=L,C>=J,R>=F,H>=0,O>=0,N>=0,M>=1,L>=0,J>=0,F>=0,D>=1,M+1=B,W=1,V=1,U=1,T=1,S=1,Q=1,P=1,K=1,I=0,G=1,E=1] 
* CE 108: case_10(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,E,Q) = 8+ send_msg(R,H,S):1+ maxNorm(E,T,E):2
     [Q>=H,D>=O,C>=N,A>=L,C>=J,Q>=F,E>=2,H>=0,O>=0,N>=0,M>=1,L>=0,J>=0,F>=0,D>=1,M+1=B,T=1,S=1,R=1,P=1,K=1,I=0,G=1] 
* CE 109: case_10(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,G,Q) = 8+ send_msg(G,H,R):2+ maxNorm(E,G,G):1
     [G>=E,Q>=H,D>=O,C>=N,A>=L,C>=J,Q>=F,G>=2,E>=1,H>=0,O>=0,N>=0,M>=1,L>=0,J>=0,F>=0,D>=1,M+1=B,R=1,P=1,K=1,I=0] 
* CE 110: case_10(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,E,Q) = 8+ send_msg(G,H,R):2+ maxNorm(E,G,E):2
     [E>=G+1,Q>=H,D>=O,C>=N,A>=L,C>=J,Q>=F,G>=2,H>=0,O>=0,N>=0,M>=1,L>=0,J>=0,F>=0,D>=1,M+1=B,R=1,P=1,K=1,I=0] 

### Cost equations --> "Loop" of case_10/18 
* CEs [101] --> Loop 76 
* CEs [102] --> Loop 77 
* CEs [99] --> Loop 78 
* CEs [100] --> Loop 79 
* CEs [106] --> Loop 80 
* CEs [103,109] --> Loop 81 
* CEs [104,108,110] --> Loop 82 
* CEs [105,107] --> Loop 83 

#### Loops of case_10/18 
* Loop 76: case_10(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R) [D>=O,C>=N,A>=L,C>=J,A>=I,R>=H,R>=F,G>=E,O>=0,N>=0,L>=0,J>=0,I>=2,H>=0,F>=0,E>=1,D>=1,B>=2,G+I=Q+1,B=M+1,P=1,K=1] 
* Loop 77: case_10(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R) [D>=O,C>=N,A>=L,C>=J,A>=I,R>=H,E>=G+1,R>=F,O>=0,N>=0,L>=0,J>=0,I>=2,H>=0,G>=1,F>=0,D>=1,B>=2,E+I=Q+1,B=M+1,P=1,K=1] 
* Loop 78: case_10(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,G,Q) [D>=O,C>=N,A>=L,C>=J,Q>=H,Q>=F,G>=E,O>=0,N>=0,L>=0,J>=0,H>=0,F>=0,E>=1,D>=1,B>=2,A>=1,B=M+1,P=1,K=1,I=1] 
* Loop 79: case_10(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,E,Q) [D>=O,C>=N,A>=L,C>=J,Q>=H,E>=G+1,Q>=F,O>=0,N>=0,L>=0,J>=0,H>=0,G>=1,F>=0,D>=1,B>=2,A>=1,B=M+1,P=1,K=1,I=1] 
* Loop 80: case_10(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,G,Q) [D>=O,C>=N,A>=L,C>=J,Q>=H,O>=0,N>=0,L>=0,J>=0,H>=0,G>=1,F>=0,E>=2,D>=1,B>=2,B=M+1,P=1,K=1,I=0] 
* Loop 81: case_10(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,G,Q) [D>=O,C>=N,A>=L,C>=J,Q>=H,Q>=F,G>=E,O>=0,N>=0,L>=0,J>=0,H>=0,F>=0,E>=1,D>=1,B>=2,B=M+1,P=1,K=1,I=0] 
* Loop 82: case_10(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,E,Q) [D>=O,C>=N,A>=L,C>=J,Q>=H,E>=G+1,Q>=F,O>=0,N>=0,L>=0,J>=0,H>=0,G>=1,F>=0,D>=1,B>=2,B=M+1,P=1,K=1,I=0] 
* Loop 83: case_10(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,G,Q) [D>=O,C>=N,A>=L,C>=J,Q>=H,O>=0,N>=0,L>=0,J>=0,H>=0,G>=1,F>=0,D>=1,B>=2,B=M+1,P=1,K=1,I=0,E=1] 

### Ranking functions of CR case_10(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R) 

#### Partial ranking functions of CR case_10(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R) 


### Resulting Chains:case_10(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R) 
* [83]
* [82]
* [81]
* [80]
* [79]
* [78]
* [77]
* [76]


### Merging Chains  case_10/18 into  External patterns of execution 
* [[83]] --> 1 
* [[82]] --> 2 
* [[81]] --> 3 
* [[80]] --> 4 
* [[79]] --> 5 
* [[78]] --> 6 
* [[77]] --> 7 
* [[76]] --> 8 


### Specialization of cost equations process_main4/9 
* CE 20 is refined into CE [111,112,113,114,115,116,117,118] 
* CE 19 is refined into CE [119] 


#### Refined cost equations process_main4/9 
* CE 111: process_main4(A,B,C,D,E,F,G,H,I) = 9+ case_10(A,J,C,D,K,F,G,H,L,M,N,O,P,Q,R,S,G,T):1+ process_main4(O,P,Q,R,U,V,W,X,I)
     [T>=X,G>=W,T>=V,G>=U,D>=R,C>=Q,A>=O,C>=M,T>=H,W>=1,U>=1,R>=0,Q>=0,P>=1,O>=0,M>=0,H>=0,F>=0,D>=1,I>=1,P+1=J,P+1=B,S=1,N=1,L=0,K=1,E=1] 
* CE 112: process_main4(A,B,C,D,E,F,G,H,I) = 9+ case_10(A,J,C,D,E,F,G,H,K,L,M,N,O,P,Q,R,E,S):2+ process_main4(N,O,P,Q,T,U,V,W,I)
     [S>=W,E>=V,S>=U,E>=T,D>=Q,C>=P,A>=N,C>=L,S>=H,E>=G+1,S>=F,V>=1,T>=1,Q>=0,P>=0,O>=1,N>=0,L>=0,H>=0,G>=1,F>=0,D>=1,I>=1,O+1=J,O+1=B,R=1,M=1,K=0] 
* CE 113: process_main4(A,B,C,D,E,F,G,H,I) = 9+ case_10(A,J,C,D,E,F,G,H,K,L,M,N,O,P,Q,R,G,S):3+ process_main4(N,O,P,Q,T,U,V,W,I)
     [S>=W,G>=V,S>=U,G>=T,D>=Q,C>=P,A>=N,C>=L,S>=H,S>=F,G>=E,V>=1,T>=1,Q>=0,P>=0,O>=1,N>=0,L>=0,H>=0,F>=0,E>=1,D>=1,I>=1,O+1=J,O+1=B,R=1,M=1,K=0] 
* CE 114: process_main4(A,B,C,D,E,F,G,H,I) = 9+ case_10(A,J,C,D,E,F,G,H,K,L,M,N,O,P,Q,R,G,S):4+ process_main4(N,O,P,Q,T,U,V,W,I)
     [S>=W,G>=V,S>=U,G>=T,D>=Q,C>=P,A>=N,C>=L,S>=H,V>=1,T>=1,Q>=0,P>=0,O>=1,N>=0,L>=0,H>=0,F>=0,E>=2,D>=1,I>=1,O+1=J,O+1=B,R=1,M=1,K=0] 
* CE 115: process_main4(A,B,C,D,E,F,G,H,I) = 9+ case_10(A,J,C,D,E,F,G,H,K,L,M,N,O,P,Q,R,E,S):5+ process_main4(N,O,P,Q,T,U,V,W,I)
     [S>=W,E>=V,S>=U,E>=T,D>=Q,C>=P,A>=N,C>=L,S>=H,E>=G+1,S>=F,V>=1,T>=1,Q>=0,P>=0,O>=1,N>=0,L>=0,H>=0,G>=1,F>=0,D>=1,A>=1,I>=1,O+1=J,O+1=B,R=1,M=1,K=1] 
* CE 116: process_main4(A,B,C,D,E,F,G,H,I) = 9+ case_10(A,J,C,D,E,F,G,H,K,L,M,N,O,P,Q,R,G,S):6+ process_main4(N,O,P,Q,T,U,V,W,I)
     [S>=W,G>=V,S>=U,G>=T,D>=Q,C>=P,A>=N,C>=L,S>=H,S>=F,G>=E,V>=1,T>=1,Q>=0,P>=0,O>=1,N>=0,L>=0,H>=0,F>=0,E>=1,D>=1,A>=1,I>=1,O+1=J,O+1=B,R=1,M=1,K=1] 
* CE 117: process_main4(A,B,C,D,E,F,G,H,I) = 9+ case_10(A,J,C,D,E,F,G,H,K,L,M,N,O,P,Q,R,S,T):7+ process_main4(N,O,P,Q,U,V,W,X,I)
     [A+E>=S+1,T>=X,S>=W,T>=V,S>=U,D>=Q,C>=P,A>=N,C>=L,T>=H,E>=G+1,T>=F,S>=E+1,W>=1,U>=1,Q>=0,P>=0,O>=1,N>=0,L>=0,H>=0,G>=1,F>=0,D>=1,I>=1,S+1=E+K,O+1=J,O+1=B,R=1,M=1] 
* CE 118: process_main4(A,B,C,D,E,F,G,H,I) = 9+ case_10(A,J,C,D,E,F,G,H,K,L,M,N,O,P,Q,R,S,T):8+ process_main4(N,O,P,Q,U,V,W,X,I)
     [A+G>=S+1,T>=X,S>=W,T>=V,S>=U,D>=Q,C>=P,A>=N,C>=L,T>=H,S>=G+1,T>=F,G>=E,W>=1,U>=1,Q>=0,P>=0,O>=1,N>=0,L>=0,H>=0,F>=0,E>=1,D>=1,I>=1,S+1=G+K,O+1=J,O+1=B,R=1,M=1] 
* CE 119: process_main4(A,B,C,D,E,F,G,H,I) = 3
     [H>=0,G>=1,F>=0,E>=1,C>=0,I=1,D=0,B=1,A=0] 

### Cost equations --> "Loop" of process_main4/9 
* CEs [119] --> Loop 84 
* CEs [114] --> Loop 85 
* CEs [117] --> Loop 86 
* CEs [118] --> Loop 87 
* CEs [112,115] --> Loop 88 
* CEs [116] --> Loop 89 
* CEs [111,113] --> Loop 90 

#### Loops of process_main4/9 
* Loop 84: process_main4(A,B,C,D,E,F,G,H,I) [H>=0,G>=1,F>=0,E>=1,C>=0,I=1,D=0,B=1,A=0] 
* Loop 85: process_main4(A,B,C,D,E,F,G,H,I)->  process_main4(A',B',C',D',E',F',G',H',I)
                  [G>=G',G>=E',D>=D',C>=C',A>=A',G'>=1,E'>=1,D'>=0,C'>=0,A'>=0,I>=1,H>=0,F>=0,E>=2,D>=1,B>=2,B=B'+1] 
* Loop 86: process_main4(A,B,C,D,E,F,G,H,I)->  process_main4(A',B',C',D',E',F',G',H',I)
                  [A+E>=G'+1,A+E>=E'+1,D>=D',C>=C',A>=A',E>=G+1,G'>=1,E'>=1,D'>=0,C'>=0,A'>=0,I>=1,H>=0,G>=1,F>=0,D>=1,B>=2,A>=2,B=B'+1] 
* Loop 87: process_main4(A,B,C,D,E,F,G,H,I)->  process_main4(A',B',C',D',E',F',G',H',I)
                  [A+G>=G'+1,A+G>=E'+1,D>=D',C>=C',A>=A',G>=E,G'>=1,E'>=1,D'>=0,C'>=0,A'>=0,I>=1,H>=0,F>=0,E>=1,D>=1,B>=2,A>=2,B=B'+1] 
* Loop 88: process_main4(A,B,C,D,E,F,G,H,I)->  process_main4(A',B',C',D',E',F',G',H',I)
                  [E>=G',E>=E',D>=D',C>=C',A>=A',E>=G+1,G'>=1,E'>=1,D'>=0,C'>=0,A'>=0,I>=1,H>=0,G>=1,F>=0,D>=1,B>=2,B=B'+1] 
* Loop 89: process_main4(A,B,C,D,E,F,G,H,I)->  process_main4(A',B',C',D',E',F',G',H',I)
                  [G>=G',G>=E',D>=D',C>=C',A>=A',G>=E,G'>=1,E'>=1,D'>=0,C'>=0,A'>=0,I>=1,H>=0,F>=0,E>=1,D>=1,B>=2,A>=1,B=B'+1] 
* Loop 90: process_main4(A,B,C,D,E,F,G,H,I)->  process_main4(A',B',C',D',E',F',G',H',I)
                  [G>=G',G>=E',D>=D',C>=C',A>=A',G>=E,G'>=1,E'>=1,D'>=0,C'>=0,A'>=0,I>=1,H>=0,F>=0,E>=1,D>=1,B>=2,B=B'+1] 

### Ranking functions of CR process_main4(A,B,C,D,E,F,G,H,I) 
* RF of phase [85,86,87,88,89,90]: [B-1]

#### Partial ranking functions of CR process_main4(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [85,86,87,88,89,90]:
  - RF of loop [85:1,86:1,87:1,88:1,89:1,90:1]:
    B-1

Discarded unfeasible chain [[85,86,87,88,89,90]]...(Non-terminating chain proved terminating)

### Resulting Chains:process_main4(A,B,C,D,E,F,G,H,I) 
* [[85,86,87,88,89,90],84]
* [84]


### Merging Chains  process_main4/9 into  External patterns of execution 
* [[84]] --> 1 
* [[84,[85,86,87,88,89,90]]] --> 2 


### Specialization of cost equations main4/5 
* CE 7 is refined into CE [120,121] 


#### Refined cost equations main4/5 
* CE 120: main4(A,B,C,D,E) = 3+ process_main4(F,G,C,H,I,J,K,L,M):1
     [L>=0,J>=0,C>=0,M=1,K=1,I=1,H=0,G=1,F=0,E=1,D=0,B=1,A=0] 
* CE 121: main4(A,B,C,D,E) = 3+ process_main4(A,B,C,D,F,G,H,I,J):2
     [I>=0,G>=0,D>=1,C>=0,B>=2,A>=0,J=1,H=1,F=1,E=1] 

### Cost equations --> "Loop" of main4/5 
* CEs [121] --> Loop 91 
* CEs [120] --> Loop 92 

#### Loops of main4/5 
* Loop 91: main4(A,B,C,D,E) [D>=1,C>=0,B>=2,A>=0,E=1] 
* Loop 92: main4(A,B,C,D,E) [C>=0,E=1,D=0,B=1,A=0] 

### Ranking functions of CR main4(A,B,C,D,E) 

#### Partial ranking functions of CR main4(A,B,C,D,E) 


### Resulting Chains:main4(A,B,C,D,E) 
* [92]
* [91]


### Merging Chains  main4/5 into  External patterns of execution 
* [[92]] --> 1 
* [[91]] --> 2 


### Specialization of cost equations case_14/22 
* CE 44 is refined into CE [122] 
* CE 43 is refined into CE [123,124] 


#### Refined cost equations case_14/22 
* CE 122: case_14(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,K,L,R,B,S) = 4
     [F>=L,D>=K,G>=Q,F>=P,D>=N,S>=H+1,S>=C,L>=0,K>=1,Q>=0,P>=0,O>=1,N>=0,J>=0,I>=1,H>=0,G>=1,C>=0,B>=1,4>=H,O+1=E,R=1,M=1,A=5] 
* CE 123: case_14(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,K,L,R,S,T) = 7+ send_msg(U,C,V):1
     [F>=L,D>=K,G>=Q,F>=P,D>=N,C>=0,T>=1,L>=0,K>=1,Q>=0,P>=0,O>=1,N>=0,J>=0,I>=1,H>=5,G>=1,O+1=E,V=1,U=1,S=1,R=1,M=1,B=1,A=5] 
* CE 124: case_14(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,K,L,R,S,T) = 7+ send_msg(B,C,U):2
     [F>=L,D>=K,G>=Q,F>=P,D>=N,C>=0,B>=2,T>=1,L>=0,K>=1,Q>=0,P>=0,O>=1,N>=0,J>=0,I>=1,H>=5,G>=1,O+1=E,U=1,S=1,R=1,M=1,A=5] 

### Cost equations --> "Loop" of case_14/22 
* CEs [122] --> Loop 93 
* CEs [124] --> Loop 94 
* CEs [123] --> Loop 95 

#### Loops of case_14/22 
* Loop 93: case_14(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,K,L,R,B,S) [G>=Q,F>=P,D>=N,F>=L,D>=K,S>=H+1,S>=C,Q>=0,P>=0,N>=0,L>=0,K>=1,J>=0,I>=1,H>=0,G>=1,E>=2,C>=0,B>=1,4>=H,E=O+1,R=1,M=1,A=5] 
* Loop 94: case_14(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,K,L,R,S,T) [G>=Q,F>=P,D>=N,F>=L,D>=K,T>=1,Q>=0,P>=0,N>=0,L>=0,K>=1,J>=0,I>=1,H>=5,G>=1,E>=2,C>=0,B>=2,E=O+1,S=1,R=1,M=1,A=5] 
* Loop 95: case_14(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,K,L,R,S,T) [G>=Q,F>=P,D>=N,F>=L,D>=K,T>=1,Q>=0,P>=0,N>=0,L>=0,K>=1,J>=0,I>=1,H>=5,G>=1,E>=2,C>=0,E=O+1,S=1,R=1,M=1,B=1,A=5] 

### Ranking functions of CR case_14(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V) 

#### Partial ranking functions of CR case_14(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V) 


### Resulting Chains:case_14(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V) 
* [95]
* [94]
* [93]


### Merging Chains  case_14/22 into  External patterns of execution 
* [[95]] --> 1 
* [[94]] --> 2 
* [[93]] --> 3 


### Specialization of cost equations case_13/17 
* CE 42 is refined into CE [125,126,127,128,129] 
* CE 39 is refined into CE [130] 
* CE 40 is refined into CE [131] 
* CE 41 is refined into CE [132] 


#### Refined cost equations case_13/17 
* CE 125: case_13(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) = 9+ append(R,I,S,T,U,G,V,W,X,G,V,W):1+ case_14(Y,Z,G,A,A1,C,D,E,B1,G,C1,I,D1,K,L,M,N,E1,I,F1,G1,Q):1
     [C>=I,D>=N,C>=M,A>=K,Q>=1,I>=0,N>=0,M>=0,L>=1,K>=0,E>=5,D>=1,A>=1,G>=0,W>=0,V>=0,L+1=A1,L+1=B,G1=1,F1=1,E1=1,D1=1,C1=1,B1=1,Z=1,Y=5,X=1,U=1,T=0,S=1,R=1,P=1,O=1,J=1,H=1,F=1] 
* CE 126: case_13(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) = 9+ append(R,I,S,T,F,G,U,V,F,G,U,V):1+ case_14(W,F,G,A,X,C,D,E,F,G,Y,I,Z,K,L,M,N,A1,I,B1,C1,Q):2
     [C>=I,D>=N,C>=M,A>=K,Q>=1,I>=0,N>=0,M>=0,L>=1,K>=0,E>=5,D>=1,A>=1,G>=0,F>=2,V>=0,U>=0,L+1=X,L+1=B,C1=1,B1=1,A1=1,Z=1,Y=1,W=5,T=0,S=1,R=1,P=1,O=1,J=1,H=1] 
* CE 127: case_13(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,F,P) = 9+ append(Q,I,R,S,F,G,T,U,F,G,T,U):1+ case_14(V,F,G,A,W,C,D,E,F,G,X,I,Y,K,L,M,N,Z,I,A1,F,P):3
     [C>=I,D>=N,C>=M,A>=K,P>=E+1,P>=G,F>=1,I>=0,N>=0,M>=0,L>=1,K>=0,E>=0,D>=1,A>=1,G>=0,U>=0,T>=0,4>=E,L+1=W,L+1=B,A1=1,Z=1,Y=1,X=1,V=5,S=0,R=1,Q=1,O=1,J=1,H=1] 
* CE 128: case_13(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) = 9+ append(H,I,H,R,S,G,T,U,V,W,X,Y):2+ case_14(Z,V,W,A,A1,C,D,E,B1,G,H,I,C1,K,L,M,N,H,I,D1,E1,Q):2
     [R+U>=Y,C>=I,A>=H,V>=H,X>=H,D>=N,C>=M,A>=K,W>=G,Y>=U,Q>=1,I>=0,H>=2,N>=0,M>=0,L>=1,K>=0,G>=0,E>=5,D>=1,Y>=1,U>=0,R>=1,H+B1=V+1,H+S=V+1,F+H=V+1,H+T=X+1,L+1=A1,L+1=B,E1=1,D1=1,C1=1,Z=5,P=1,O=1,J=1] 
* CE 129: case_13(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) = 9+ append(H,I,H,R,S,G,T,U,P,V,W,X):2+ case_14(Y,P,V,A,Z,C,D,E,A1,G,H,I,B1,K,L,M,N,H,I,C1,P,Q):3
     [R+U>=X,C>=I,P>=H,A>=H,W>=H,D>=N,C>=M,A>=K,V>=G,Q>=E+1,Q>=V,X>=U,I>=0,H>=2,N>=0,M>=0,L>=1,K>=0,G>=0,E>=0,D>=1,X>=1,U>=0,R>=1,4>=E,H+A1=P+1,H+S=P+1,F+H=P+1,H+T=W+1,L+1=Z,L+1=B,C1=1,B1=1,Y=5,O=1,J=1] 
* CE 130: case_13(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,F,P) = 2
     [D>=N,C>=M,A>=K,C>=I,P>=G,P>=E,N>=0,M>=0,L>=1,K>=0,I>=0,G>=0,F>=1,E>=0,D>=1,L+1=B,O=1,J=1,H=0] 
* CE 131: case_13(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,F,P) = 3
     [D>=N,C>=M,A>=K,C>=I,P>=G,P>=E,N>=0,M>=0,L>=1,K>=0,I>=0,G>=0,F>=1,E>=0,D>=1,L+1=B,O=1,J=1,H=0] 
* CE 132: case_13(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,F,P) = 4
     [D>=N,C>=M,A>=K,C>=I,P>=G,P>=E,N>=0,M>=0,L>=1,K>=0,I>=0,G>=0,F>=1,E>=0,D>=1,L+1=B,O=1,J=1,H=0] 

### Cost equations --> "Loop" of case_13/17 
* CEs [129] --> Loop 96 
* CEs [128] --> Loop 97 
* CEs [127] --> Loop 98 
* CEs [126] --> Loop 99 
* CEs [130,131,132] --> Loop 100 
* CEs [125] --> Loop 101 

#### Loops of case_13/17 
* Loop 96: case_13(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) [D>=N,C>=M,A>=K,C>=I,A>=H,Q>=G,Q>=E+1,N>=0,M>=0,K>=0,I>=0,H>=2,G>=0,F>=1,E>=0,D>=1,B>=2,4>=E,F+H=P+1,B=L+1,O=1,J=1] 
* Loop 97: case_13(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) [D>=N,C>=M,A>=K,C>=I,A>=H,Q>=1,N>=0,M>=0,K>=0,I>=0,H>=2,G>=0,F>=1,E>=5,D>=1,B>=2,B=L+1,P=1,O=1,J=1] 
* Loop 98: case_13(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,F,P) [D>=N,C>=M,A>=K,C>=I,P>=G,P>=E+1,N>=0,M>=0,K>=0,I>=0,G>=0,F>=1,E>=0,D>=1,B>=2,A>=1,4>=E,B=L+1,O=1,J=1,H=1] 
* Loop 99: case_13(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) [D>=N,C>=M,A>=K,C>=I,Q>=1,N>=0,M>=0,K>=0,I>=0,G>=0,F>=2,E>=5,D>=1,B>=2,A>=1,B=L+1,P=1,O=1,J=1,H=1] 
* Loop 100: case_13(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,F,P) [D>=N,C>=M,A>=K,C>=I,P>=G,P>=E,N>=0,M>=0,K>=0,I>=0,G>=0,F>=1,E>=0,D>=1,B>=2,B=L+1,O=1,J=1,H=0] 
* Loop 101: case_13(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) [D>=N,C>=M,A>=K,C>=I,Q>=1,N>=0,M>=0,K>=0,I>=0,G>=0,E>=5,D>=1,B>=2,A>=1,B=L+1,P=1,O=1,J=1,H=1,F=1] 

### Ranking functions of CR case_13(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) 

#### Partial ranking functions of CR case_13(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) 


### Resulting Chains:case_13(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) 
* [101]
* [100]
* [99]
* [98]
* [97]
* [96]


### Merging Chains  case_13/17 into  External patterns of execution 
* [[101]] --> 1 
* [[100]] --> 2 
* [[99]] --> 3 
* [[98]] --> 4 
* [[97]] --> 5 
* [[96]] --> 6 


### Specialization of cost equations process_main5/8 
* CE 22 is refined into CE [133,134,135,136,137,138] 
* CE 21 is refined into CE [139] 


#### Refined cost equations process_main5/8 
* CE 133: process_main5(A,B,C,D,E,F,G,H) = 9+ case_13(A,I,C,D,E,J,G,K,L,M,N,O,P,Q,R,S,T):1+ process_main5(N,O,P,Q,U,V,W,H)
     [T>=W,T>=U,D>=Q,C>=P,A>=N,C>=L,T>=1,Q>=0,P>=0,O>=1,N>=0,L>=0,G>=0,E>=5,D>=1,A>=1,H>=1,O+1=I,O+1=B,V=1,S=1,R=1,M=1,K=1,J=1,F=1] 
* CE 134: process_main5(A,B,C,D,E,F,G,H) = 9+ case_13(A,I,C,D,E,F,G,J,K,L,M,N,O,P,Q,F,R):2+ process_main5(M,N,O,P,S,F,T,H)
     [R>=T,R>=S,D>=P,C>=O,A>=M,C>=K,R>=G,R>=E,F>=1,P>=0,O>=0,N>=1,M>=0,K>=0,G>=0,E>=0,D>=1,H>=1,N+1=I,N+1=B,Q=1,L=1,J=0] 
* CE 135: process_main5(A,B,C,D,E,F,G,H) = 9+ case_13(A,I,C,D,E,F,G,J,K,L,M,N,O,P,Q,R,S):3+ process_main5(M,N,O,P,T,U,V,H)
     [S>=V,S>=T,D>=P,C>=O,A>=M,C>=K,S>=1,P>=0,O>=0,N>=1,M>=0,K>=0,G>=0,F>=2,E>=5,D>=1,A>=1,H>=1,N+1=I,N+1=B,U=1,R=1,Q=1,L=1,J=1] 
* CE 136: process_main5(A,B,C,D,E,F,G,H) = 9+ case_13(A,I,C,D,E,F,G,J,K,L,M,N,O,P,Q,F,R):4+ process_main5(M,N,O,P,S,F,T,H)
     [R>=T,R>=S,D>=P,C>=O,A>=M,C>=K,R>=G,R>=E+1,F>=1,P>=0,O>=0,N>=1,M>=0,K>=0,G>=0,E>=0,D>=1,A>=1,H>=1,4>=E,N+1=I,N+1=B,Q=1,L=1,J=1] 
* CE 137: process_main5(A,B,C,D,E,F,G,H) = 9+ case_13(A,I,C,D,E,F,G,J,K,L,M,N,O,P,Q,R,S):5+ process_main5(M,N,O,P,T,U,V,H)
     [S>=V,S>=T,D>=P,C>=O,A>=M,C>=K,A>=J,S>=1,P>=0,O>=0,N>=1,M>=0,K>=0,J>=2,G>=0,F>=1,E>=5,D>=1,H>=1,N+1=I,N+1=B,U=1,R=1,Q=1,L=1] 
* CE 138: process_main5(A,B,C,D,E,F,G,H) = 9+ case_13(A,I,C,D,E,F,G,J,K,L,M,N,O,P,Q,R,S):6+ process_main5(M,N,O,P,T,R,U,H)
     [A+F>=R+1,S>=U,S>=T,D>=P,C>=O,A>=M,C>=K,S>=G,R>=F+1,S>=E+1,P>=0,O>=0,N>=1,M>=0,K>=0,G>=0,F>=1,E>=0,D>=1,H>=1,4>=E,R+1=F+J,N+1=I,N+1=B,Q=1,L=1] 
* CE 139: process_main5(A,B,C,D,E,F,G,H) = 3
     [G>=0,F>=1,E>=0,C>=0,H=1,D=0,B=1,A=0] 

### Cost equations --> "Loop" of process_main5/8 
* CEs [139] --> Loop 102 
* CEs [138] --> Loop 103 
* CEs [136] --> Loop 104 
* CEs [137] --> Loop 105 
* CEs [135] --> Loop 106 
* CEs [133,134] --> Loop 107 

#### Loops of process_main5/8 
* Loop 102: process_main5(A,B,C,D,E,F,G,H) [G>=0,F>=1,E>=0,C>=0,H=1,D=0,B=1,A=0] 
* Loop 103: process_main5(A,B,C,D,E,F,G,H)->  process_main5(A',B',C',D',E',F',G',H)
                  [A+F>=F'+1,D>=D',C>=C',A>=A',F'>=F+1,D'>=0,C'>=0,A'>=0,H>=1,G>=0,F>=1,E>=0,D>=1,B>=2,4>=E,B=B'+1] 
* Loop 104: process_main5(A,B,C,D,E,F,G,H)->  process_main5(A',B',C',D',E',F,F',H)
                  [D>=D',C>=C',A>=A',D'>=0,C'>=0,A'>=0,H>=1,G>=0,F>=1,E>=0,D>=1,B>=2,A>=1,4>=E,B=B'+1] 
* Loop 105: process_main5(A,B,C,D,E,F,G,H)->  process_main5(A',B',C',D',E',F',G',H)
                  [D>=D',C>=C',A>=A',D'>=0,C'>=0,A'>=0,H>=1,G>=0,F>=1,E>=5,D>=1,B>=2,A>=2,B=B'+1,F'=1] 
* Loop 106: process_main5(A,B,C,D,E,F,G,H)->  process_main5(A',B',C',D',E',F',G',H)
                  [D>=D',C>=C',A>=A',D'>=0,C'>=0,A'>=0,H>=1,G>=0,F>=2,E>=5,D>=1,B>=2,A>=1,B=B'+1,F'=1] 
* Loop 107: process_main5(A,B,C,D,E,F,G,H)->  process_main5(A',B',C',D',E',F,F',H)
                  [D>=D',C>=C',A>=A',D'>=0,C'>=0,A'>=0,H>=1,G>=0,F>=1,E>=0,D>=1,B>=2,B=B'+1] 

### Ranking functions of CR process_main5(A,B,C,D,E,F,G,H) 
* RF of phase [103,104,105,106,107]: [B-1]

#### Partial ranking functions of CR process_main5(A,B,C,D,E,F,G,H) 
* Partial RF of phase [103,104,105,106,107]:
  - RF of loop [103:1,104:1,105:1,106:1,107:1]:
    B-1
  - RF of loop [106:1]:
    F-1 depends on loops [103:1] 

Discarded unfeasible chain [[103,104,105,106,107]]...(Non-terminating chain proved terminating)

### Resulting Chains:process_main5(A,B,C,D,E,F,G,H) 
* [[103,104,105,106,107],102]
* [102]


### Merging Chains  process_main5/8 into  External patterns of execution 
* [[102]] --> 1 
* [[102,[103,104,105,106,107]]] --> 2 


### Specialization of cost equations main5/5 
* CE 8 is refined into CE [140,141] 


#### Refined cost equations main5/5 
* CE 140: main5(A,B,C,D,E) = 3+ process_main5(F,G,C,H,I,J,K,L):1
     [K>=0,C>=0,L=1,J=1,I=0,H=0,G=1,F=0,E=1,D=0,B=1,A=0] 
* CE 141: main5(A,B,C,D,E) = 3+ process_main5(A,B,C,D,F,G,H,I):2
     [H>=0,D>=1,C>=0,B>=2,A>=0,I=1,G=1,F=0,E=1] 

### Cost equations --> "Loop" of main5/5 
* CEs [141] --> Loop 108 
* CEs [140] --> Loop 109 

#### Loops of main5/5 
* Loop 108: main5(A,B,C,D,E) [D>=1,C>=0,B>=2,A>=0,E=1] 
* Loop 109: main5(A,B,C,D,E) [C>=0,E=1,D=0,B=1,A=0] 

### Ranking functions of CR main5(A,B,C,D,E) 

#### Partial ranking functions of CR main5(A,B,C,D,E) 


### Resulting Chains:main5(A,B,C,D,E) 
* [109]
* [108]


### Merging Chains  main5/5 into  External patterns of execution 
* [[109]] --> 1 
* [[108]] --> 2 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 46 

#### Simplifying cost structure of CE 45 

#### Cost of chains of maxNorm(A,B,C):
* Chain [37]: 0
  with precondition: [A=C,B>=0,A>=B+1] 

* Chain [36]: 0
  with precondition: [C=B,A>=1,C>=A] 


#### Simplifying cost structure of CE 47 

#### Computing cost of phase [38,39] 

#### Simplifying cost structure of CE 49 

#### Simplifying cost structure of CE 48 

#### Cost of loops [38,39] 

 * loop 38:append(A,B,C,D,E,F,G,H,I,J,K,L) -> [append(A',B',C',D',E',F',G',H',I',J',K',L')] 
5
 * loop 39:append(A,B,C,D,E,F,G,H,I,J,K,L) -> [append(A',B',C',D',E',F',G',H',I',J',K',L')] 
5
##### Pending set append(A,B,C,D,E,F,G,H,I,J,K,L)
* Psum in Loop 38: [it(38)=<1]
* Psum in Loop 39: [it(39)=<1]

###### Computing sum for it(38)=<1  in Loop 38 
   - Applying inductive sum strategy 
     - head Candidate: C-1 
       - Loop 39 is collaborative and bounds [it(39)] 
     - head Candidate: A-1 
       - Loop 39 is collaborative and bounds [it(39)] 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - Loop 39 is collaborative and bounds [it(39)] 
     - tail Candidate: A-1 
       - Loop 39 is collaborative and bounds [it(39)] 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(38)+it(39)=<C-1,it(38)+it(39)=<A-1,it(38)+it(39)=<A-1,it(38)+it(39)=<C-1,it(38)+it(39)=<C-C',it(38)+it(39)=<A-A',it(38)+it(39)=<A-A',it(38)+it(39)=<C-C'] 

##### Pending set A
* Psum in Loop 39: [it(39)=<1]

###### Computing sum for it(39)=<1  in Loop 39 
   - Applying inductive sum strategy 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(38)+it(39)=<C-1,it(38)+it(39)=<A-1,it(38)+it(39)=<A-1,it(38)+it(39)=<C-1,it(38)+it(39)=<C-C',it(38)+it(39)=<A-A',it(38)+it(39)=<A-A',it(38)+it(39)=<C-C'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [38,39] 

#### Simplifying cost structure of phase [38,39] 
 * Joined equivalent variables [it(38),it(39)] into it(38)

#### Cost of phase [38,39]:append(A,B,C,D,E,F,G,H,I,J,K,L) -> [append(A',B',C',D',E',F',G',H',I',J',K',L')] 
10*it(38)+0
  Such that:aux(1) =< A
aux(2) =< A-A'
aux(3) =< C
aux(4) =< C-C'
it(38) =< aux(1)
it(38) =< aux(2)
it(38) =< aux(3)
it(38) =< aux(4)

#### Simplifying cost structure of chain [[38,39],40] 
 * Joined equivalent variables [aux(5),aux(1),aux(2),aux(3),aux(4)] into aux(5)

#### Cost of chains of append(A,B,C,D,E,F,G,H,I,J,K,L):
* Chain [[38,39],40]: 10*it(38)+2
  Such that:aux(5) =< A
it(38) =< aux(5)

  with precondition: [A=C,A+E=I+1,A+G=K+1,A>=2,B>=0,D>=1,E>=1,F>=0,G>=1,H>=0,L>=1,J>=F,L>=H,D+H>=L] 

* Chain [40]: 2
  with precondition: [A=1,C=1,D=0,E=I,F=J,G=K,H=L,B>=0,E>=0,F>=0,G>=0,H>=0] 


#### Simplifying cost structure of CE 50 

#### Computing cost of phase [41] 

#### Simplifying cost structure of CE 51 

#### Cost of loops [41] 

 * loop 41:send(A,B,C) -> [send(A',B',C')] 
8
##### Pending set send(A,B,C)
* Psum in Loop 41: [it(41)=<1]

###### Computing sum for it(41)=<1  in Loop 41 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(41)=<A-1,it(41)=<A-1,it(41)=<A-A',it(41)=<A-A'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [41] 

#### Simplifying cost structure of phase [41] 

#### Cost of phase [41]:send(A,B,C) -> [send(A',B',C')] 
8*it(41)+0
  Such that:it(41) =< A
it(41) =< A-A'

#### Simplifying cost structure of chain [[41],42] 

#### Cost of chains of send(A,B,C):
* Chain [[41],42]: 8*it(41)+3
  Such that:it(41) =< A

  with precondition: [C=1,A>=2,B>=0] 

* Chain [42]: 3
  with precondition: [A=1,C=1,B>=0] 


#### Simplifying cost structure of CE 52 
 * Renamed intermediate variables: 
[ (eq(53,1),it(41))>>s(1)]

#### Simplifying cost structure of CE 53 

#### Cost of chains of send_msg(A,B,C):
* Chain [44]: 4
  with precondition: [A=1,C=1,B>=0] 

* Chain [43]: 8*s(1)+4
  Such that:s(1) =< A

  with precondition: [C=1,A>=2,B>=0] 


#### Simplifying cost structure of CE 56 

#### Simplifying cost structure of CE 57 

#### Simplifying cost structure of CE 58 

#### Simplifying cost structure of CE 54 
 * Renamed intermediate variables: 
[ (eq(55,1),s(1))>>s(2)]

#### Simplifying cost structure of CE 55 

#### Cost of chains of case_2(A,B,C,D,E,F,G,H,I,J,K,L):
* Chain [47]: 4
  with precondition: [E=0,G=1,L=1,I+1=B,D>=1,F>=0,H>=0,I>=1,J>=0,K>=0,C>=F,A>=H,C>=J,D>=K] 

* Chain [46]: 9
  with precondition: [E=1,G=1,L=1,I+1=B,A>=1,D>=1,F>=0,H>=0,I>=1,J>=0,K>=0,C>=F,A>=H,C>=J,D>=K] 

* Chain [45]: 8*s(2)+9
  Such that:s(2) =< E

  with precondition: [G=1,L=1,I+1=B,D>=1,E>=2,F>=0,H>=0,I>=1,J>=0,K>=0,A>=E,C>=F,A>=H,C>=J,D>=K] 


#### Simplifying cost structure of CE 59 

#### Computing cost of phase [48] 

#### Simplifying cost structure of CE 60 

#### Simplifying cost structure of CE 61 
 * Renamed intermediate variables: 
[ (eq(62,1),s(2))>>s(3)]

#### Simplifying cost structure of CE 62 
 * Renamed intermediate variables: 
[ (it(48),s(3))>>s(4)]

#### Cost of loops [48] 

 * loop 48:process_main1(A,B,C,D,E) -> [process_main1(A',B',C',D',E')] 
8*s(4)+16
  Such that:s(4) =< A

##### Pending set process_main1(A,B,C,D,E)
* Psum in Loop 48: [it(48)=<1,s(5)=<A]

###### Computing sum for it(48)=<1  in Loop 48 
   - Applying inductive sum strategy 
     - head Candidate: B-1 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(48)=<B-1,it(48)=<B-1,it(48)=<B-B',it(48)=<B-B'] 

##### Pending set A
* Psum in Loop 48: [s(5)=<A]

###### Computing sum for s(5)=<A  in Loop 48 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(6)=<A] 
 * Adding constraints: [s(5)=<it(48)*aux(6)] 

##### Pending set process_main1(A,B,C,D,E)
* Pmax/min: [aux(6)=<A]

###### Computing max_min for aux(6)=<A  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(6)=<A] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [48] 

#### Simplifying cost structure of phase [48] 

#### Cost of phase [48]:process_main1(A,B,C,D,E) -> [process_main1(A',B',C',D',E')] 
16*it(48)+8*s(5)+0
  Such that:aux(6) =< A
it(48) =< B
it(48) =< B-B'
s(5) =< it(48)*aux(6)

#### Simplifying cost structure of chain [[48],49] 

#### Cost of chains of process_main1(A,B,C,D,E):
* Chain [[48],49]: 16*it(48)+8*s(5)+3
  Such that:aux(6) =< A
it(48) =< B
s(5) =< it(48)*aux(6)

  with precondition: [E=1,A>=0,B>=2,C>=0,D>=1] 

* Chain [49]: 3
  with precondition: [A=0,B=1,D=0,E=1,C>=0] 


#### Simplifying cost structure of CE 63 
 * Renamed intermediate variables: 
[ (eq(64,1),aux(6))>>s(6), (eq(64,1),it(48))>>s(7), (eq(64,1),s(5))>>s(8)]

#### Simplifying cost structure of CE 64 

#### Cost of chains of main1(A,B,C,D,E):
* Chain [51]: 4
  with precondition: [A=0,B=1,D=0,E=1,C>=0] 

* Chain [50]: 16*s(7)+8*s(8)+4
  Such that:s(6) =< A
s(7) =< B
s(8) =< s(7)*s(6)

  with precondition: [E=1,A>=0,B>=2,C>=0,D>=1] 


#### Simplifying cost structure of CE 67 

#### Simplifying cost structure of CE 68 

#### Simplifying cost structure of CE 69 

#### Simplifying cost structure of CE 65 
 * Renamed intermediate variables: 
[ (eq(66,1),aux(5))>>s(9), (eq(66,1),it(38))>>s(10)]

#### Simplifying cost structure of CE 66 

#### Cost of chains of case_5(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O):
* Chain [54]: 10
  with precondition: [E=1,G=0,I=1,N=1,K+1=B,D>=1,F>=0,H>=0,J>=0,K>=1,L>=0,M>=0,O>=0,C>=H,A>=J,C>=L,D>=M] 

* Chain [53]: 7
  with precondition: [E=1,G=1,I=1,N=1,K+1=B,F=O,A>=1,D>=1,F>=0,H>=0,J>=0,K>=1,L>=0,M>=0,C>=H,A>=J,C>=L,D>=M] 

* Chain [52]: 10*s(10)+7
  Such that:s(9) =< G
s(10) =< s(9)

  with precondition: [E=1,I=1,K+1=B,N=G,D>=1,F>=0,H>=0,J>=0,K>=1,L>=0,M>=0,N>=2,O>=F,C>=H,A>=J,C>=L,D>=M,A>=N] 


#### Simplifying cost structure of CE 70 

#### Computing cost of phase [55] 

#### Simplifying cost structure of CE 71 

#### Simplifying cost structure of CE 72 
 * Renamed intermediate variables: 
[ (eq(73,1),s(9))>>s(11), (eq(73,1),s(10))>>s(12)]

#### Simplifying cost structure of CE 73 
 * Renamed intermediate variables: 
[ (it(55),s(11))>>s(13), (it(55),s(12))>>s(14)]

#### Cost of loops [55] 

 * loop 55:process_main2(A,B,C,D,E,F,G) -> [process_main2(A',B',C',D',E',F',G')] 
10*s(14)+17
  Such that:s(13) =< A
s(14) =< s(13)

##### Pending set process_main2(A,B,C,D,E,F,G)
* Psum in Loop 55: [it(55)=<1,s(16)=<A]

###### Computing sum for it(55)=<1  in Loop 55 
   - Applying inductive sum strategy 
     - head Candidate: B-1 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(55)=<B-1,it(55)=<B-1,it(55)=<B-B',it(55)=<B-B'] 

##### Pending set A
* Psum in Loop 55: [s(16)=<A]

###### Computing sum for s(16)=<A  in Loop 55 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(7)=<A] 
 * Adding constraints: [s(16)=<it(55)*aux(7)] 

##### Pending set process_main2(A,B,C,D,E,F,G)
* Pmax/min: [aux(7)=<A]

###### Computing max_min for aux(7)=<A  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(7)=<A] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [55] 

#### Simplifying cost structure of phase [55] 

#### Cost of phase [55]:process_main2(A,B,C,D,E,F,G) -> [process_main2(A',B',C',D',E',F',G')] 
17*it(55)+10*s(15)+0
  Such that:aux(7) =< A
it(55) =< B
it(55) =< B-B'
s(16) =< it(55)*aux(7)
s(15) =< s(16)

#### Simplifying cost structure of chain [[55],56] 

#### Cost of chains of process_main2(A,B,C,D,E,F,G):
* Chain [[55],56]: 17*it(55)+10*s(15)+3
  Such that:aux(7) =< A
it(55) =< B
s(16) =< it(55)*aux(7)
s(15) =< s(16)

  with precondition: [E=1,G=1,A>=0,B>=2,C>=0,D>=1,F>=0] 

* Chain [56]: 3
  with precondition: [A=0,B=1,D=0,E=1,G=1,C>=0,F>=0] 


#### Simplifying cost structure of CE 74 
 * Renamed intermediate variables: 
[ (eq(75,1),aux(7))>>s(17), (eq(75,1),it(55))>>s(18), (eq(75,1),s(16))>>s(19), (eq(75,1),s(15))>>s(20)]

#### Simplifying cost structure of CE 75 

#### Cost of chains of main2(A,B,C,D,E):
* Chain [58]: 5
  with precondition: [A=0,B=1,D=0,E=1,C>=0] 

* Chain [57]: 17*s(18)+10*s(20)+5
  Such that:s(17) =< A
s(18) =< B
s(19) =< s(18)*s(17)
s(20) =< s(19)

  with precondition: [E=1,A>=0,B>=2,C>=0,D>=1] 


#### Simplifying cost structure of CE 82 

#### Simplifying cost structure of CE 84 

#### Simplifying cost structure of CE 81 

#### Simplifying cost structure of CE 85 
 * Renamed intermediate variables: 
[ (eq(87,1),s(1))>>s(21)]

#### Simplifying cost structure of CE 87 

#### Simplifying cost structure of CE 80 
 * Renamed intermediate variables: 
[ (eq(86,1),s(1))>>s(22)]

#### Simplifying cost structure of CE 86 
 * Renamed intermediate variables: 
[ (eq(83,1),s(1))>>s(23)]

#### Simplifying cost structure of CE 83 

#### Simplifying cost structure of CE 77 

#### Simplifying cost structure of CE 76 
 * Renamed intermediate variables: 
[ (eq(79,1),aux(5))>>s(24), (eq(79,1),it(38))>>s(25)]
 * Renamed intermediate variables: 
[ (eq(79,2),aux(5))>>s(26), (eq(79,2),it(38))>>s(27)]

#### Simplifying cost structure of CE 79 
 * Joined equivalent variables [aux(8),s(24),s(26)] into aux(8)
 * Joined equivalent variables [s(25),s(27)] into s(25)
 * Renamed intermediate variables: 
[ (eq(78,1),aux(5))>>s(28), (eq(78,1),it(38))>>s(29)]
 * Renamed intermediate variables: 
[ (eq(78,2),aux(5))>>s(30), (eq(78,2),it(38))>>s(31)]

#### Simplifying cost structure of CE 78 
 * Joined equivalent variables [aux(9),s(28),s(30)] into aux(9)
 * Joined equivalent variables [s(29),s(31)] into s(29)

#### Cost of chains of case_7(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R):
* Chain [66]: 11
  with precondition: [E=1,I=0,K=1,P=1,M+1=B,G=Q,D>=1,F>=0,G>=1,H>=0,J>=0,L>=0,M>=1,N>=0,O>=0,R>=H,C>=J,A>=L,C>=N,D>=O] 

* Chain [65]: 8*s(21)+11
  Such that:s(21) =< G

  with precondition: [I=0,K=1,P=1,M+1=B,E=Q,D>=1,F>=0,G>=1,H>=0,J>=0,L>=0,M>=1,N>=0,O>=0,R>=F,E>=G+1,R>=H,C>=J,A>=L,C>=N,D>=O] 

* Chain [64]: 8*s(22)+11
  Such that:s(22) =< G

  with precondition: [I=0,K=1,P=1,M+1=B,G=Q,D>=1,E>=1,F>=0,H>=0,J>=0,L>=0,M>=1,N>=0,O>=0,G>=E,R>=F,R>=H,C>=J,A>=L,C>=N,D>=O] 

* Chain [63]: 8*s(23)+11
  Such that:s(23) =< E

  with precondition: [I=0,K=1,P=1,M+1=B,G=Q,D>=1,E>=2,F>=0,G>=1,H>=0,J>=0,L>=0,M>=1,N>=0,O>=0,R>=H,C>=J,A>=L,C>=N,D>=O] 

* Chain [62]: 11
  with precondition: [I=1,K=1,P=1,M+1=B,E=Q,A>=1,D>=1,F>=0,G>=1,H>=0,J>=0,L>=0,M>=1,N>=0,O>=0,R>=F,E>=G+1,R>=H,C>=J,A>=L,C>=N,D>=O] 

* Chain [61]: 11
  with precondition: [I=1,K=1,P=1,M+1=B,G=Q,A>=1,D>=1,E>=1,F>=0,H>=0,J>=0,L>=0,M>=1,N>=0,O>=0,G>=E,R>=F,R>=H,C>=J,A>=L,C>=N,D>=O] 

* Chain [60]: 20*s(25)+11
  Such that:aux(8) =< I
s(25) =< aux(8)

  with precondition: [K=1,P=1,M+1=B,E+I=Q+1,D>=1,F>=0,G>=1,H>=0,I>=2,J>=0,L>=0,M>=1,N>=0,O>=0,R>=F,E>=G+1,R>=H,A>=I,C>=J,A>=L,C>=N,D>=O] 

* Chain [59]: 20*s(29)+11
  Such that:aux(9) =< I
s(29) =< aux(9)

  with precondition: [K=1,P=1,M+1=B,G+I=Q+1,D>=1,E>=1,F>=0,H>=0,I>=2,J>=0,L>=0,M>=1,N>=0,O>=0,G>=E,R>=F,R>=H,A>=I,C>=J,A>=L,C>=N,D>=O] 


#### Simplifying cost structure of CE 96 

#### Computing cost of phase [68,69,70,71,72,73] 
 * Renamed intermediate variables: 
[ (eq(91,1),s(23))>>s(32)]

#### Simplifying cost structure of CE 91 
 * Renamed intermediate variables: 
[ (it(68),s(32))>>s(33)]
 * Renamed intermediate variables: 
[ (eq(94,1),aux(8))>>s(34), (eq(94,1),s(25))>>s(35)]

#### Simplifying cost structure of CE 94 
 * Renamed intermediate variables: 
[ (it(69),s(34))>>s(36), (it(69),s(35))>>s(37)]
 * Renamed intermediate variables: 
[ (eq(95,1),aux(9))>>s(38), (eq(95,1),s(29))>>s(39)]

#### Simplifying cost structure of CE 95 
 * Renamed intermediate variables: 
[ (it(70),s(38))>>s(40), (it(70),s(39))>>s(41)]
 * Renamed intermediate variables: 
[ (eq(89,1),s(21))>>s(42)]

#### Simplifying cost structure of CE 89 

#### Simplifying cost structure of CE 92 
 * Renamed intermediate variables: 
[ (it(71),s(42))>>s(43)]

#### Simplifying cost structure of CE 93 

#### Simplifying cost structure of CE 88 
 * Renamed intermediate variables: 
[ (eq(90,1),s(22))>>s(44)]

#### Simplifying cost structure of CE 90 
 * Renamed intermediate variables: 
[ (it(73),s(44))>>s(45)]

#### Cost of loops [68,69,70,71,72,73] 

 * loop 68:process_main3(A,B,C,D,E,F,G,H,I) -> [process_main3(A',B',C',D',E',F',G',H',I')] 
8*s(33)+20
  Such that:s(33) =< E

 * loop 69:process_main3(A,B,C,D,E,F,G,H,I) -> [process_main3(A',B',C',D',E',F',G',H',I')] 
20*s(37)+20
  Such that:s(36) =< A
s(37) =< s(36)

 * loop 70:process_main3(A,B,C,D,E,F,G,H,I) -> [process_main3(A',B',C',D',E',F',G',H',I')] 
20*s(41)+20
  Such that:s(40) =< A
s(41) =< s(40)

 * loop 71:process_main3(A,B,C,D,E,F,G,H,I) -> [process_main3(A',B',C',D',E',F',G',H',I')] 
8*s(43)+20
  Such that:s(43) =< G

 * loop 72:process_main3(A,B,C,D,E,F,G,H,I) -> [process_main3(A',B',C',D',E',F',G',H',I')] 
20
 * loop 73:process_main3(A,B,C,D,E,F,G,H,I) -> [process_main3(A',B',C',D',E',F',G',H',I')] 
8*s(45)+20
  Such that:s(45) =< G

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 68: [it(68)=<1,s(46)=<E]
* Psum in Loop 69: [it(69)=<1,s(48)=<A]
* Psum in Loop 70: [it(70)=<1,s(50)=<A]
* Psum in Loop 71: [it(71)=<1,s(51)=<G]
* Psum in Loop 72: [it(72)=<1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G]

###### Computing sum for it(68)=<1  in Loop 68 
   - Applying inductive sum strategy 
     - head Candidate: B-1 
       - Loop 69 is collaborative and bounds [it(69)] 
       - Loop 70 is collaborative and bounds [it(70)] 
       - Loop 71 is collaborative and bounds [it(71)] 
       - Loop 72 is collaborative and bounds [it(72)] 
       - Loop 73 is collaborative and bounds [it(73)] 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - Loop 69 is collaborative and bounds [it(69)] 
       - Loop 70 is collaborative and bounds [it(70)] 
       - Loop 71 is collaborative and bounds [it(71)] 
       - Loop 72 is collaborative and bounds [it(72)] 
       - Loop 73 is collaborative and bounds [it(73)] 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(68)+it(69)+it(70)+it(71)+it(72)+it(73)=<B-1,it(68)+it(69)+it(70)+it(71)+it(72)+it(73)=<B-1,it(68)+it(69)+it(70)+it(71)+it(72)+it(73)=<B-B',it(68)+it(69)+it(70)+it(71)+it(72)+it(73)=<B-B'] 

##### Pending set A
* Psum in Loop 68: [s(46)=<E]
* Psum in Loop 69: [it(69)=<1,s(48)=<A]
* Psum in Loop 70: [it(70)=<1,s(50)=<A]
* Psum in Loop 71: [it(71)=<1,s(51)=<G]
* Psum in Loop 72: [it(72)=<1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G]

###### Computing sum for s(46)=<E  in Loop 68 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(10)=<E] 
 * Adding constraints: [s(46)=<it(68)*aux(10)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(10)=<E]
* Psum in Loop 69: [it(69)=<1,s(48)=<A]
* Psum in Loop 70: [it(70)=<1,s(50)=<A]
* Psum in Loop 71: [it(71)=<1,s(51)=<G]
* Psum in Loop 72: [it(72)=<1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G]

###### Computing max_min for aux(10)=<E  
   - Applying max/min strategy 
     - Loop 68  increases the expression by [G-2,E'-2] 
     - Loop 69  increases the expression by [A-1,-G+E'-1] 
     - Loop 70  increases the expression by [E'-1,A+G-2] 
     - Loop 71 does not increase the expression
     - Loop 72  increases the expression by [G-1,E'-1] 
     - Loop 73  increases the expression by [G-1,E'-1] 
 * Adding constraints:[aux(10)=<aux(11)+aux(12)+aux(13)+aux(14)+aux(15)+aux(16),aux(11)=<E] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 68: [aux(12)=<G-2,aux(12)=<E'-2]
* Psum in Loop 69: [it(69)=<1,s(48)=<A,aux(13)=<A-1,aux(13)=< -G+E'-1]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1]

###### Computing sum for aux(12)=<G-2  in Loop 68 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(17)=<G-2] 
 * Adding constraints: [aux(12)=<it(68)*aux(17)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(17)=<G-2]
* Psum in Loop 68: [aux(12)=<E'-2]
* Psum in Loop 69: [it(69)=<1,s(48)=<A,aux(13)=<A-1,aux(13)=< -G+E'-1]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1]

###### Computing max_min for aux(17)=<G-2  
   - Applying max/min strategy 
     - Loop 68 does not increase the expression
     - Loop 69  increases the expression by [G'-1,A+E-2] 
     - Loop 70  increases the expression by [-E+G',A-1] 
     - Loop 71  increases the expression by [E-1,G'-1] 
     - Loop 72 does not increase the expression
     - Loop 73 does not increase the expression
 * Adding constraints:[aux(17)=<aux(18)+aux(19)+aux(20)+aux(21),aux(18)=<G-2] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 68: [aux(12)=<E'-2]
* Psum in Loop 69: [it(69)=<1,s(48)=<A,aux(13)=<A-1,aux(13)=< -G+E'-1,aux(19)=<A+E-2,aux(19)=<G'-1]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G']
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(21)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1]

###### Computing sum for aux(12)=<E'-2  in Loop 68 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(22)=<G-2] 
 * Adding constraints: [aux(12)=<it(68)*aux(22)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(22)=<G-2]
* Psum in Loop 69: [it(69)=<1,s(48)=<A,aux(13)=<A-1,aux(13)=< -G+E'-1,aux(19)=<A+E-2,aux(19)=<G'-1]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G']
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(21)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1]

###### Computing max_min for aux(22)=<G-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(22)=<aux(17)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 69: [it(69)=<1,s(48)=<A,aux(13)=<A-1,aux(13)=< -G+E'-1,aux(19)=<A+E-2,aux(19)=<G'-1]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G']
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(21)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1]

###### Computing sum for it(69)=<1  in Loop 69 
   - Applying inductive sum strategy 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(68)+it(69)+it(70)+it(71)+it(72)+it(73)=<B-1,it(68)+it(69)+it(70)+it(71)+it(72)+it(73)=<B-1,it(68)+it(69)+it(70)+it(71)+it(72)+it(73)=<B-B',it(68)+it(69)+it(70)+it(71)+it(72)+it(73)=<B-B'] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 69: [s(48)=<A,aux(13)=<A-1,aux(13)=< -G+E'-1,aux(19)=<A+E-2,aux(19)=<G'-1]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G']
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(21)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1]

###### Computing sum for s(48)=<A  in Loop 69 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(23)=<A] 
 * Adding constraints: [s(48)=<it(69)*aux(23)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(23)=<A]
* Psum in Loop 69: [aux(13)=<A-1,aux(13)=< -G+E'-1,aux(19)=<A+E-2,aux(19)=<G'-1]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G']
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(21)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1]

###### Computing max_min for aux(23)=<A  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(23)=<A] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 69: [aux(13)=<A-1,aux(13)=< -G+E'-1,aux(19)=<A+E-2,aux(19)=<G'-1]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G']
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(21)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1]

###### Computing sum for aux(13)=<A-1  in Loop 69 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(24)=<A-1] 
 * Adding constraints: [aux(13)=<it(69)*aux(24)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(24)=<A-1]
* Psum in Loop 69: [aux(13)=< -G+E'-1,aux(19)=<A+E-2,aux(19)=<G'-1]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G']
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(21)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1]

###### Computing max_min for aux(24)=<A-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(24)=<aux(23)-1] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 69: [aux(13)=< -G+E'-1,aux(19)=<A+E-2,aux(19)=<G'-1]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G']
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(21)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1]

###### Computing sum for aux(13)=< -G+E'-1  in Loop 69 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(25)=<A+E-G-2] 
 * Adding constraints: [aux(13)=<it(69)*aux(25)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(25)=<A+E-G-2]
* Psum in Loop 69: [aux(19)=<A+E-2,aux(19)=<G'-1]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G']
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(21)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1]

###### Computing max_min for aux(25)=<A+E-G-2  
   - Applying max/min strategy 
     - Loop 68  resets the expression to [A+G-3] 
     - Loop 69  increases the expression by [E'-G'-1,A'+E'-G'-3] 
     - Loop 70  resets the expression to [2*A+G-4] 
     - Loop 71  increases the expression by [E'-G'-1] 
     - Loop 72  resets the expression to [A+G-3] 
     - Loop 73  resets the expression to [A+G-3] 
 * Adding constraints:[aux(25)=<max([aux(26),aux(27),aux(29),aux(31),aux(32)])+aux(28)+aux(30),aux(26)=<A+E-G-2] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(27)=<A+G-3,aux(31)=<A+G-3,aux(32)=<A+G-3,aux(29)=<2*A+G-4]
* Psum in Loop 69: [aux(19)=<A+E-2,aux(28)=<A'+E'-G'-3,aux(28)=<E'-G'-1,aux(19)=<G'-1]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G']
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1]

###### Computing max_min for aux(27)=<A+G-3  
   - Applying max/min strategy 
     - Loop 68 does not increase the expression
     - Loop 69  increases the expression by [G'-1,E+A'-2] 
     - Loop 70  increases the expression by [-E+G',A'-1] 
     - Loop 71  increases the expression by [E-1,G'-1] 
     - Loop 72 does not increase the expression
     - Loop 73 does not increase the expression
 * Adding constraints:[aux(27)=<aux(33)+aux(34)+aux(35)+aux(36),aux(33)=<A+G-3] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(31)=<A+G-3,aux(32)=<A+G-3,aux(29)=<2*A+G-4]
* Psum in Loop 69: [aux(19)=<A+E-2,aux(28)=<A'+E'-G'-3,aux(28)=<E'-G'-1,aux(19)=<G'-1,aux(34)=<E+A'-2,aux(34)=<G'-1]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(35)=<A'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(36)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1]

###### Computing max_min for aux(31)=<A+G-3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(31)=<aux(27)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(32)=<A+G-3,aux(29)=<2*A+G-4]
* Psum in Loop 69: [aux(19)=<A+E-2,aux(28)=<A'+E'-G'-3,aux(28)=<E'-G'-1,aux(19)=<G'-1,aux(34)=<E+A'-2,aux(34)=<G'-1]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(35)=<A'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(36)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1]

###### Computing max_min for aux(32)=<A+G-3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(32)=<aux(27)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(29)=<2*A+G-4]
* Psum in Loop 69: [aux(19)=<A+E-2,aux(28)=<A'+E'-G'-3,aux(28)=<E'-G'-1,aux(19)=<G'-1,aux(34)=<E+A'-2,aux(34)=<G'-1]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(35)=<A'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(36)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1]

###### Computing max_min for aux(29)=<2*A+G-4  
   - Applying max/min strategy 
     - Loop 68 does not increase the expression
     - Loop 69  increases the expression by [G'-1,2*A'+G'-5] 
     - Loop 70  increases the expression by [-E+G',A'-1] 
     - Loop 71  increases the expression by [E-1,G'-1] 
     - Loop 72 does not increase the expression
     - Loop 73 does not increase the expression
 * Adding constraints:[aux(29)=<aux(37)+aux(38)+aux(39)+aux(40),aux(37)=<2*A+G-4] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 69: [aux(19)=<A+E-2,aux(28)=<A'+E'-G'-3,aux(28)=<E'-G'-1,aux(19)=<G'-1,aux(34)=<E+A'-2,aux(38)=<2*A'+G'-5,aux(34)=<G'-1,aux(38)=<G'-1]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1]

###### Computing sum for aux(19)=<A+E-2  in Loop 69 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(41)=<A+E-2] 
 * Adding constraints: [aux(19)=<it(69)*aux(41)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(41)=<A+E-2]
* Psum in Loop 69: [aux(28)=<A'+E'-G'-3,aux(28)=<E'-G'-1,aux(19)=<G'-1,aux(34)=<E+A'-2,aux(38)=<2*A'+G'-5,aux(34)=<G'-1,aux(38)=<G'-1]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1]

###### Computing max_min for aux(41)=<A+E-2  
   - Applying max/min strategy 
     - Loop 68  increases the expression by [G-2,E'-2] 
     - Loop 69  increases the expression by [A'-1,-G+E'-1] 
     - Loop 70  increases the expression by [E'-1,G+A'-2] 
     - Loop 71 does not increase the expression
     - Loop 72  increases the expression by [E'-1,A'+E'-2] 
     - Loop 73  increases the expression by [G-1,E'-1] 
 * Adding constraints:[aux(41)=<aux(42)+aux(43)+aux(44)+aux(45)+aux(46)+aux(47),aux(42)=<A+E-2] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 68: [aux(43)=<G-2,aux(43)=<E'-2]
* Psum in Loop 69: [aux(28)=<A'+E'-G'-3,aux(28)=<E'-G'-1,aux(19)=<G'-1,aux(34)=<E+A'-2,aux(38)=<2*A'+G'-5,aux(34)=<G'-1,aux(38)=<G'-1,aux(44)=< -G+E'-1,aux(44)=<A'-1]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(45)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(46)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(47)=<E'-1]

###### Computing sum for aux(43)=<G-2  in Loop 68 
   - Found a solution using cacheing 
 * Adding constraints: [aux(43)=<aux(48),aux(48)=<it(68)*aux(17)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 68: [aux(43)=<E'-2]
* Psum in Loop 69: [aux(28)=<A'+E'-G'-3,aux(28)=<E'-G'-1,aux(19)=<G'-1,aux(34)=<E+A'-2,aux(38)=<2*A'+G'-5,aux(34)=<G'-1,aux(38)=<G'-1,aux(44)=< -G+E'-1,aux(44)=<A'-1]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(45)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(46)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(47)=<E'-1]

###### Computing sum for aux(43)=<E'-2  in Loop 68 
   - Found a solution using cacheing 
 * Adding constraints: [aux(43)=<aux(49),aux(49)=<it(68)*aux(22)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 69: [aux(28)=<A'+E'-G'-3,aux(28)=<E'-G'-1,aux(19)=<G'-1,aux(34)=<E+A'-2,aux(38)=<2*A'+G'-5,aux(34)=<G'-1,aux(38)=<G'-1,aux(44)=< -G+E'-1,aux(44)=<A'-1]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(45)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(46)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(47)=<E'-1]

###### Computing sum for aux(28)=<A'+E'-G'-3  in Loop 69 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(50)=<2*A+E-5] 
 * Adding constraints: [aux(28)=<it(69)*aux(50)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(50)=<2*A+E-5]
* Psum in Loop 69: [aux(28)=<E'-G'-1,aux(19)=<G'-1,aux(34)=<E+A'-2,aux(38)=<2*A'+G'-5,aux(34)=<G'-1,aux(38)=<G'-1,aux(44)=< -G+E'-1,aux(44)=<A'-1]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(45)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(46)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(47)=<E'-1]

###### Computing max_min for aux(50)=<2*A+E-5  
   - Applying max/min strategy 
     - Loop 68  increases the expression by [G-2,E'-2] 
     - Loop 69  increases the expression by [A'-1,2*A'-3] 
     - Loop 70  increases the expression by [E'-1,2*A'+E'-5] 
     - Loop 71 does not increase the expression
     - Loop 72  increases the expression by [E'-1,2*A'+E'-3] 
     - Loop 73  increases the expression by [G-1,E'-1] 
 * Adding constraints:[aux(50)=<aux(51)+aux(52)+aux(53)+aux(54)+aux(55)+aux(56),aux(51)=<2*A+E-5] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 68: [aux(52)=<G-2,aux(52)=<E'-2]
* Psum in Loop 69: [aux(28)=<E'-G'-1,aux(19)=<G'-1,aux(34)=<E+A'-2,aux(38)=<2*A'+G'-5,aux(34)=<G'-1,aux(38)=<G'-1,aux(44)=< -G+E'-1,aux(44)=<A'-1,aux(53)=<A'-1,aux(53)=<2*A'-3]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(54)=<2*A'+E'-5,aux(45)=<E'-1,aux(54)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(46)=<E'-1,aux(55)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(47)=<E'-1,aux(56)=<E'-1]

###### Computing sum for aux(52)=<G-2  in Loop 68 
   - Found a solution using cacheing 
 * Adding constraints: [aux(52)=<aux(57),aux(57)=<it(68)*aux(17)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 68: [aux(52)=<E'-2]
* Psum in Loop 69: [aux(28)=<E'-G'-1,aux(19)=<G'-1,aux(34)=<E+A'-2,aux(38)=<2*A'+G'-5,aux(34)=<G'-1,aux(38)=<G'-1,aux(44)=< -G+E'-1,aux(44)=<A'-1,aux(53)=<A'-1,aux(53)=<2*A'-3]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(54)=<2*A'+E'-5,aux(45)=<E'-1,aux(54)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(46)=<E'-1,aux(55)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(47)=<E'-1,aux(56)=<E'-1]

###### Computing sum for aux(52)=<E'-2  in Loop 68 
   - Found a solution using cacheing 
 * Adding constraints: [aux(52)=<aux(58),aux(58)=<it(68)*aux(22)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 69: [aux(28)=<E'-G'-1,aux(19)=<G'-1,aux(34)=<E+A'-2,aux(38)=<2*A'+G'-5,aux(34)=<G'-1,aux(38)=<G'-1,aux(44)=< -G+E'-1,aux(44)=<A'-1,aux(53)=<A'-1,aux(53)=<2*A'-3]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(54)=<2*A'+E'-5,aux(45)=<E'-1,aux(54)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(46)=<E'-1,aux(55)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(47)=<E'-1,aux(56)=<E'-1]

###### Computing sum for aux(28)=<E'-G'-1  in Loop 69 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(59)=<A+E-3] 
 * Adding constraints: [aux(28)=<it(69)*aux(59)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(59)=<A+E-3]
* Psum in Loop 69: [aux(19)=<G'-1,aux(34)=<E+A'-2,aux(38)=<2*A'+G'-5,aux(34)=<G'-1,aux(38)=<G'-1,aux(44)=< -G+E'-1,aux(44)=<A'-1,aux(53)=<A'-1,aux(53)=<2*A'-3]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(54)=<2*A'+E'-5,aux(45)=<E'-1,aux(54)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(46)=<E'-1,aux(55)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(47)=<E'-1,aux(56)=<E'-1]

###### Computing max_min for aux(59)=<A+E-3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(59)=<aux(41)-1] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 69: [aux(19)=<G'-1,aux(34)=<E+A'-2,aux(38)=<2*A'+G'-5,aux(34)=<G'-1,aux(38)=<G'-1,aux(44)=< -G+E'-1,aux(44)=<A'-1,aux(53)=<A'-1,aux(53)=<2*A'-3]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(54)=<2*A'+E'-5,aux(45)=<E'-1,aux(54)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(46)=<E'-1,aux(55)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(47)=<E'-1,aux(56)=<E'-1]

###### Computing sum for aux(19)=<G'-1  in Loop 69 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(60)=<A+E-2] 
 * Adding constraints: [aux(19)=<it(69)*aux(60)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(60)=<A+E-2]
* Psum in Loop 69: [aux(34)=<E+A'-2,aux(38)=<2*A'+G'-5,aux(34)=<G'-1,aux(38)=<G'-1,aux(44)=< -G+E'-1,aux(44)=<A'-1,aux(53)=<A'-1,aux(53)=<2*A'-3]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(54)=<2*A'+E'-5,aux(45)=<E'-1,aux(54)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(46)=<E'-1,aux(55)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(47)=<E'-1,aux(56)=<E'-1]

###### Computing max_min for aux(60)=<A+E-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(60)=<aux(41)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 69: [aux(34)=<E+A'-2,aux(38)=<2*A'+G'-5,aux(34)=<G'-1,aux(38)=<G'-1,aux(44)=< -G+E'-1,aux(44)=<A'-1,aux(53)=<A'-1,aux(53)=<2*A'-3]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(54)=<2*A'+E'-5,aux(45)=<E'-1,aux(54)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(46)=<E'-1,aux(55)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(47)=<E'-1,aux(56)=<E'-1]

###### Computing sum for aux(34)=<E+A'-2  in Loop 69 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(61)=<A+E-2] 
 * Adding constraints: [aux(34)=<it(69)*aux(61)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(61)=<A+E-2]
* Psum in Loop 69: [aux(38)=<2*A'+G'-5,aux(34)=<G'-1,aux(38)=<G'-1,aux(44)=< -G+E'-1,aux(44)=<A'-1,aux(53)=<A'-1,aux(53)=<2*A'-3]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(54)=<2*A'+E'-5,aux(45)=<E'-1,aux(54)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(46)=<E'-1,aux(55)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(47)=<E'-1,aux(56)=<E'-1]

###### Computing max_min for aux(61)=<A+E-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(61)=<aux(41)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 69: [aux(38)=<2*A'+G'-5,aux(34)=<G'-1,aux(38)=<G'-1,aux(44)=< -G+E'-1,aux(44)=<A'-1,aux(53)=<A'-1,aux(53)=<2*A'-3]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(54)=<2*A'+E'-5,aux(45)=<E'-1,aux(54)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(46)=<E'-1,aux(55)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(47)=<E'-1,aux(56)=<E'-1]

###### Computing sum for aux(38)=<2*A'+G'-5  in Loop 69 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(62)=<3*A+E-6] 
 * Adding constraints: [aux(38)=<it(69)*aux(62)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(62)=<3*A+E-6]
* Psum in Loop 69: [aux(34)=<G'-1,aux(38)=<G'-1,aux(44)=< -G+E'-1,aux(44)=<A'-1,aux(53)=<A'-1,aux(53)=<2*A'-3]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(54)=<2*A'+E'-5,aux(45)=<E'-1,aux(54)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(46)=<E'-1,aux(55)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(47)=<E'-1,aux(56)=<E'-1]

###### Computing max_min for aux(62)=<3*A+E-6  
   - Applying max/min strategy 
     - Loop 68  increases the expression by [G-2,E'-2] 
     - Loop 69  increases the expression by [A'-1,3*A'-5] 
     - Loop 70  increases the expression by [E'-1,3*A'+E'-7] 
     - Loop 71 does not increase the expression
     - Loop 72  increases the expression by [E'-1,3*A'+E'-4] 
     - Loop 73  increases the expression by [G-1,E'-1] 
 * Adding constraints:[aux(62)=<aux(63)+aux(64)+aux(65)+aux(66)+aux(67)+aux(68),aux(63)=<3*A+E-6] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 68: [aux(64)=<G-2,aux(64)=<E'-2]
* Psum in Loop 69: [aux(34)=<G'-1,aux(38)=<G'-1,aux(44)=< -G+E'-1,aux(44)=<A'-1,aux(53)=<A'-1,aux(53)=<2*A'-3,aux(65)=<A'-1,aux(65)=<3*A'-5]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(54)=<2*A'+E'-5,aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(47)=<E'-1,aux(56)=<E'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing sum for aux(64)=<G-2  in Loop 68 
   - Found a solution using cacheing 
 * Adding constraints: [aux(64)=<aux(69),aux(69)=<it(68)*aux(17)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 68: [aux(64)=<E'-2]
* Psum in Loop 69: [aux(34)=<G'-1,aux(38)=<G'-1,aux(44)=< -G+E'-1,aux(44)=<A'-1,aux(53)=<A'-1,aux(53)=<2*A'-3,aux(65)=<A'-1,aux(65)=<3*A'-5]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(54)=<2*A'+E'-5,aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(47)=<E'-1,aux(56)=<E'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing sum for aux(64)=<E'-2  in Loop 68 
   - Found a solution using cacheing 
 * Adding constraints: [aux(64)=<aux(70),aux(70)=<it(68)*aux(22)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 69: [aux(34)=<G'-1,aux(38)=<G'-1,aux(44)=< -G+E'-1,aux(44)=<A'-1,aux(53)=<A'-1,aux(53)=<2*A'-3,aux(65)=<A'-1,aux(65)=<3*A'-5]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(54)=<2*A'+E'-5,aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(47)=<E'-1,aux(56)=<E'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing sum for aux(34)=<G'-1  in Loop 69 
   - Found a solution using cacheing 
 * Adding constraints: [aux(34)=<aux(71),aux(71)=<it(69)*aux(60)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 69: [aux(38)=<G'-1,aux(44)=< -G+E'-1,aux(44)=<A'-1,aux(53)=<A'-1,aux(53)=<2*A'-3,aux(65)=<A'-1,aux(65)=<3*A'-5]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(54)=<2*A'+E'-5,aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(47)=<E'-1,aux(56)=<E'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing sum for aux(38)=<G'-1  in Loop 69 
   - Found a solution using cacheing 
 * Adding constraints: [aux(38)=<aux(72),aux(72)=<it(69)*aux(60)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 69: [aux(44)=< -G+E'-1,aux(44)=<A'-1,aux(53)=<A'-1,aux(53)=<2*A'-3,aux(65)=<A'-1,aux(65)=<3*A'-5]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(54)=<2*A'+E'-5,aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(47)=<E'-1,aux(56)=<E'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing sum for aux(44)=< -G+E'-1  in Loop 69 
   - Found a solution using cacheing 
 * Adding constraints: [aux(44)=<aux(73),aux(73)=<it(69)*aux(25)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 69: [aux(44)=<A'-1,aux(53)=<A'-1,aux(53)=<2*A'-3,aux(65)=<A'-1,aux(65)=<3*A'-5]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(54)=<2*A'+E'-5,aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(47)=<E'-1,aux(56)=<E'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing sum for aux(44)=<A'-1  in Loop 69 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(74)=<A-1] 
 * Adding constraints: [aux(44)=<it(69)*aux(74)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(74)=<A-1]
* Psum in Loop 69: [aux(53)=<A'-1,aux(53)=<2*A'-3,aux(65)=<A'-1,aux(65)=<3*A'-5]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(54)=<2*A'+E'-5,aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(47)=<E'-1,aux(56)=<E'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing max_min for aux(74)=<A-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(74)=<aux(23)-1] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 69: [aux(53)=<A'-1,aux(53)=<2*A'-3,aux(65)=<A'-1,aux(65)=<3*A'-5]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(54)=<2*A'+E'-5,aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(47)=<E'-1,aux(56)=<E'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing sum for aux(53)=<A'-1  in Loop 69 
   - Found a solution using cacheing 
 * Adding constraints: [aux(53)=<aux(75),aux(75)=<it(69)*aux(74)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 69: [aux(53)=<2*A'-3,aux(65)=<A'-1,aux(65)=<3*A'-5]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(54)=<2*A'+E'-5,aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(47)=<E'-1,aux(56)=<E'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing sum for aux(53)=<2*A'-3  in Loop 69 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(76)=<2*A-3] 
 * Adding constraints: [aux(53)=<it(69)*aux(76)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(76)=<2*A-3]
* Psum in Loop 69: [aux(65)=<A'-1,aux(65)=<3*A'-5]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(54)=<2*A'+E'-5,aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(47)=<E'-1,aux(56)=<E'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing max_min for aux(76)=<2*A-3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(76)=<aux(23)*2-3] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 69: [aux(65)=<A'-1,aux(65)=<3*A'-5]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(54)=<2*A'+E'-5,aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(47)=<E'-1,aux(56)=<E'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing sum for aux(65)=<A'-1  in Loop 69 
   - Found a solution using cacheing 
 * Adding constraints: [aux(65)=<aux(77),aux(77)=<it(69)*aux(74)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 69: [aux(65)=<3*A'-5]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(54)=<2*A'+E'-5,aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(47)=<E'-1,aux(56)=<E'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing sum for aux(65)=<3*A'-5  in Loop 69 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(78)=<3*A-5] 
 * Adding constraints: [aux(65)=<it(69)*aux(78)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(78)=<3*A-5]
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(54)=<2*A'+E'-5,aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(47)=<E'-1,aux(56)=<E'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing max_min for aux(78)=<3*A-5  
   - Found a solution using cacheing 
 * Adding constraints:[aux(78)=<aux(23)*3-5] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 70: [it(70)=<1,s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(54)=<2*A'+E'-5,aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(47)=<E'-1,aux(56)=<E'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing sum for it(70)=<1  in Loop 70 
   - Applying inductive sum strategy 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(68)+it(69)+it(70)+it(71)+it(72)+it(73)=<B-1,it(68)+it(69)+it(70)+it(71)+it(72)+it(73)=<B-1,it(68)+it(69)+it(70)+it(71)+it(72)+it(73)=<B-B',it(68)+it(69)+it(70)+it(71)+it(72)+it(73)=<B-B'] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 70: [s(50)=<A,aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(54)=<2*A'+E'-5,aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(47)=<E'-1,aux(56)=<E'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing sum for s(50)=<A  in Loop 70 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(79)=<A] 
 * Adding constraints: [s(50)=<it(70)*aux(79)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(79)=<A]
* Psum in Loop 70: [aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(54)=<2*A'+E'-5,aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(47)=<E'-1,aux(56)=<E'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing max_min for aux(79)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(79)=<aux(23)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 70: [aux(14)=<A+G-2,aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(54)=<2*A'+E'-5,aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(47)=<E'-1,aux(56)=<E'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing sum for aux(14)=<A+G-2  in Loop 70 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(80)=<A+G-2] 
 * Adding constraints: [aux(14)=<it(70)*aux(80)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(80)=<A+G-2]
* Psum in Loop 70: [aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(54)=<2*A'+E'-5,aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(47)=<E'-1,aux(56)=<E'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing max_min for aux(80)=<A+G-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(80)=<aux(27)+1] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 70: [aux(14)=<E'-1,aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(54)=<2*A'+E'-5,aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(47)=<E'-1,aux(56)=<E'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing sum for aux(14)=<E'-1  in Loop 70 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(81)=<A+G-2] 
 * Adding constraints: [aux(14)=<it(70)*aux(81)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(81)=<A+G-2]
* Psum in Loop 70: [aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(54)=<2*A'+E'-5,aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(47)=<E'-1,aux(56)=<E'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing max_min for aux(81)=<A+G-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(81)=<aux(27)+1] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 70: [aux(20)=<A-1,aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(54)=<2*A'+E'-5,aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(47)=<E'-1,aux(56)=<E'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing sum for aux(20)=<A-1  in Loop 70 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(82)=<A-1] 
 * Adding constraints: [aux(20)=<it(70)*aux(82)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(82)=<A-1]
* Psum in Loop 70: [aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(54)=<2*A'+E'-5,aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(47)=<E'-1,aux(56)=<E'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing max_min for aux(82)=<A-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(82)=<aux(23)-1] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 70: [aux(20)=< -E+G',aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(54)=<2*A'+E'-5,aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(47)=<E'-1,aux(56)=<E'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing sum for aux(20)=< -E+G'  in Loop 70 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(83)=<A-E+G-1] 
 * Adding constraints: [aux(20)=<it(70)*aux(83)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(83)=<A-E+G-1]
* Psum in Loop 70: [aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(54)=<2*A'+E'-5,aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(47)=<E'-1,aux(56)=<E'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing max_min for aux(83)=<A-E+G-1  
   - Applying max/min strategy 
     - Loop 68  resets the expression to [A+G-2] 
     - Loop 69  resets the expression to [2*A+E-3] 
     - Loop 70  increases the expression by [-E'+G',A'-E'+G'-2] 
     - Loop 71  resets the expression to [A+E-2] 
     - Loop 72  increases the expression by [-E'+G',A'-E'+G'-1] 
     - Loop 73  increases the expression by [-E'+G',G'-1] 
 * Adding constraints:[aux(83)=<max([aux(84),aux(85),aux(86),aux(88)])+aux(87)+aux(89)+aux(90),aux(84)=<A-E+G-1] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(88)=<A+E-2,aux(85)=<A+G-2,aux(86)=<2*A+E-3]
* Psum in Loop 70: [aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(87)=<A'-E'+G'-2,aux(54)=<2*A'+E'-5,aux(87)=< -E'+G',aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing max_min for aux(88)=<A+E-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(88)=<aux(41)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(85)=<A+G-2,aux(86)=<2*A+E-3]
* Psum in Loop 70: [aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(87)=<A'-E'+G'-2,aux(54)=<2*A'+E'-5,aux(87)=< -E'+G',aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing max_min for aux(85)=<A+G-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(85)=<aux(27)+1] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(86)=<2*A+E-3]
* Psum in Loop 70: [aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(87)=<A'-E'+G'-2,aux(54)=<2*A'+E'-5,aux(87)=< -E'+G',aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing max_min for aux(86)=<2*A+E-3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(86)=<aux(50)+2] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 70: [aux(35)=< -E+G',aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(87)=<A'-E'+G'-2,aux(54)=<2*A'+E'-5,aux(87)=< -E'+G',aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing sum for aux(35)=< -E+G'  in Loop 70 
   - Found a solution using cacheing 
 * Adding constraints: [aux(35)=<aux(91),aux(91)=<it(70)*aux(83)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 70: [aux(39)=< -E+G',aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(87)=<A'-E'+G'-2,aux(54)=<2*A'+E'-5,aux(87)=< -E'+G',aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing sum for aux(39)=< -E+G'  in Loop 70 
   - Found a solution using cacheing 
 * Adding constraints: [aux(39)=<aux(92),aux(92)=<it(70)*aux(83)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 70: [aux(35)=<A'-1,aux(39)=<A'-1,aux(45)=<G+A'-2,aux(87)=<A'-E'+G'-2,aux(54)=<2*A'+E'-5,aux(87)=< -E'+G',aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing sum for aux(35)=<A'-1  in Loop 70 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(93)=<A-1] 
 * Adding constraints: [aux(35)=<it(70)*aux(93)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(93)=<A-1]
* Psum in Loop 70: [aux(39)=<A'-1,aux(45)=<G+A'-2,aux(87)=<A'-E'+G'-2,aux(54)=<2*A'+E'-5,aux(87)=< -E'+G',aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing max_min for aux(93)=<A-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(93)=<aux(23)-1] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 70: [aux(39)=<A'-1,aux(45)=<G+A'-2,aux(87)=<A'-E'+G'-2,aux(54)=<2*A'+E'-5,aux(87)=< -E'+G',aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing sum for aux(39)=<A'-1  in Loop 70 
   - Found a solution using cacheing 
 * Adding constraints: [aux(39)=<aux(94),aux(94)=<it(70)*aux(93)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 70: [aux(45)=<G+A'-2,aux(87)=<A'-E'+G'-2,aux(54)=<2*A'+E'-5,aux(87)=< -E'+G',aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing sum for aux(45)=<G+A'-2  in Loop 70 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(95)=<A+G-2] 
 * Adding constraints: [aux(45)=<it(70)*aux(95)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(95)=<A+G-2]
* Psum in Loop 70: [aux(87)=<A'-E'+G'-2,aux(54)=<2*A'+E'-5,aux(87)=< -E'+G',aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing max_min for aux(95)=<A+G-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(95)=<aux(27)+1] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 70: [aux(87)=<A'-E'+G'-2,aux(54)=<2*A'+E'-5,aux(87)=< -E'+G',aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing sum for aux(87)=<A'-E'+G'-2  in Loop 70 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(96)=<2*A+G-4] 
 * Adding constraints: [aux(87)=<it(70)*aux(96)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(96)=<2*A+G-4]
* Psum in Loop 70: [aux(54)=<2*A'+E'-5,aux(87)=< -E'+G',aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing max_min for aux(96)=<2*A+G-4  
   - Found a solution using cacheing 
 * Adding constraints:[aux(96)=<aux(29)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 70: [aux(54)=<2*A'+E'-5,aux(87)=< -E'+G',aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing sum for aux(54)=<2*A'+E'-5  in Loop 70 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(97)=<3*A+G-6] 
 * Adding constraints: [aux(54)=<it(70)*aux(97)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(97)=<3*A+G-6]
* Psum in Loop 70: [aux(87)=< -E'+G',aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing max_min for aux(97)=<3*A+G-6  
   - Applying max/min strategy 
     - Loop 68 does not increase the expression
     - Loop 69  increases the expression by [G'-1,3*A'+G'-7] 
     - Loop 70  increases the expression by [-E+G',A'-1] 
     - Loop 71  increases the expression by [E-1,G'-1] 
     - Loop 72 does not increase the expression
     - Loop 73 does not increase the expression
 * Adding constraints:[aux(97)=<aux(98)+aux(99)+aux(100)+aux(101),aux(98)=<3*A+G-6] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 69: [aux(99)=<3*A'+G'-7,aux(99)=<G'-1]
* Psum in Loop 70: [aux(87)=< -E'+G',aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1,aux(100)=< -E+G',aux(100)=<A'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing sum for aux(99)=<3*A'+G'-7  in Loop 69 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(102)=<4*A+E-8] 
 * Adding constraints: [aux(99)=<it(69)*aux(102)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(102)=<4*A+E-8]
* Psum in Loop 69: [aux(99)=<G'-1]
* Psum in Loop 70: [aux(87)=< -E'+G',aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1,aux(100)=< -E+G',aux(100)=<A'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1]

###### Computing max_min for aux(102)=<4*A+E-8  
   - Applying max/min strategy 
     - Loop 68  increases the expression by [G-2,E'-2] 
     - Loop 69  increases the expression by [A'-1,4*A'-7] 
     - Loop 70  increases the expression by [E'-1,4*A'+E'-9] 
     - Loop 71 does not increase the expression
     - Loop 72  increases the expression by [E'-1,4*A'+E'-5] 
     - Loop 73  increases the expression by [G-1,E'-1] 
 * Adding constraints:[aux(102)=<aux(103)+aux(104)+aux(105)+aux(106)+aux(107)+aux(108),aux(103)=<4*A+E-8] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 68: [aux(104)=<G-2,aux(104)=<E'-2]
* Psum in Loop 69: [aux(99)=<G'-1,aux(105)=<A'-1,aux(105)=<4*A'-7]
* Psum in Loop 70: [aux(87)=< -E'+G',aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1,aux(100)=< -E+G',aux(100)=<A'-1,aux(106)=<4*A'+E'-9,aux(106)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1]

###### Computing sum for aux(104)=<G-2  in Loop 68 
   - Found a solution using cacheing 
 * Adding constraints: [aux(104)=<aux(109),aux(109)=<it(68)*aux(17)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 68: [aux(104)=<E'-2]
* Psum in Loop 69: [aux(99)=<G'-1,aux(105)=<A'-1,aux(105)=<4*A'-7]
* Psum in Loop 70: [aux(87)=< -E'+G',aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1,aux(100)=< -E+G',aux(100)=<A'-1,aux(106)=<4*A'+E'-9,aux(106)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1]

###### Computing sum for aux(104)=<E'-2  in Loop 68 
   - Found a solution using cacheing 
 * Adding constraints: [aux(104)=<aux(110),aux(110)=<it(68)*aux(22)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 69: [aux(99)=<G'-1,aux(105)=<A'-1,aux(105)=<4*A'-7]
* Psum in Loop 70: [aux(87)=< -E'+G',aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1,aux(100)=< -E+G',aux(100)=<A'-1,aux(106)=<4*A'+E'-9,aux(106)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1]

###### Computing sum for aux(99)=<G'-1  in Loop 69 
   - Found a solution using cacheing 
 * Adding constraints: [aux(99)=<aux(111),aux(111)=<it(69)*aux(60)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 69: [aux(105)=<A'-1,aux(105)=<4*A'-7]
* Psum in Loop 70: [aux(87)=< -E'+G',aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1,aux(100)=< -E+G',aux(100)=<A'-1,aux(106)=<4*A'+E'-9,aux(106)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1]

###### Computing sum for aux(105)=<A'-1  in Loop 69 
   - Found a solution using cacheing 
 * Adding constraints: [aux(105)=<aux(112),aux(112)=<it(69)*aux(74)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 69: [aux(105)=<4*A'-7]
* Psum in Loop 70: [aux(87)=< -E'+G',aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1,aux(100)=< -E+G',aux(100)=<A'-1,aux(106)=<4*A'+E'-9,aux(106)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1]

###### Computing sum for aux(105)=<4*A'-7  in Loop 69 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(113)=<4*A-7] 
 * Adding constraints: [aux(105)=<it(69)*aux(113)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(113)=<4*A-7]
* Psum in Loop 70: [aux(87)=< -E'+G',aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1,aux(100)=< -E+G',aux(100)=<A'-1,aux(106)=<4*A'+E'-9,aux(106)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1]

###### Computing max_min for aux(113)=<4*A-7  
   - Found a solution using cacheing 
 * Adding constraints:[aux(113)=<aux(23)*4-7] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 70: [aux(87)=< -E'+G',aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1,aux(100)=< -E+G',aux(100)=<A'-1,aux(106)=<4*A'+E'-9,aux(106)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1]

###### Computing sum for aux(87)=< -E'+G'  in Loop 70 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(114)=<A+G-2] 
 * Adding constraints: [aux(87)=<it(70)*aux(114)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(114)=<A+G-2]
* Psum in Loop 70: [aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1,aux(100)=< -E+G',aux(100)=<A'-1,aux(106)=<4*A'+E'-9,aux(106)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1]

###### Computing max_min for aux(114)=<A+G-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(114)=<aux(27)+1] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 70: [aux(45)=<E'-1,aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1,aux(100)=< -E+G',aux(100)=<A'-1,aux(106)=<4*A'+E'-9,aux(106)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1]

###### Computing sum for aux(45)=<E'-1  in Loop 70 
   - Found a solution using cacheing 
 * Adding constraints: [aux(45)=<aux(115),aux(115)=<it(70)*aux(81)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 70: [aux(54)=<E'-1,aux(66)=<3*A'+E'-7,aux(66)=<E'-1,aux(100)=< -E+G',aux(100)=<A'-1,aux(106)=<4*A'+E'-9,aux(106)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1]

###### Computing sum for aux(54)=<E'-1  in Loop 70 
   - Found a solution using cacheing 
 * Adding constraints: [aux(54)=<aux(116),aux(116)=<it(70)*aux(81)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 70: [aux(66)=<3*A'+E'-7,aux(66)=<E'-1,aux(100)=< -E+G',aux(100)=<A'-1,aux(106)=<4*A'+E'-9,aux(106)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1]

###### Computing sum for aux(66)=<3*A'+E'-7  in Loop 70 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(117)=<4*A+G-8] 
 * Adding constraints: [aux(66)=<it(70)*aux(117)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(117)=<4*A+G-8]
* Psum in Loop 70: [aux(66)=<E'-1,aux(100)=< -E+G',aux(100)=<A'-1,aux(106)=<4*A'+E'-9,aux(106)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1]

###### Computing max_min for aux(117)=<4*A+G-8  
   - Applying max/min strategy 
     - Loop 68 does not increase the expression
     - Loop 69  increases the expression by [G'-1,4*A'+G'-9] 
     - Loop 70  increases the expression by [-E+G',A'-1] 
     - Loop 71  increases the expression by [E-1,G'-1] 
     - Loop 72 does not increase the expression
     - Loop 73 does not increase the expression
 * Adding constraints:[aux(117)=<aux(118)+aux(119)+aux(120)+aux(121),aux(118)=<4*A+G-8] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 69: [aux(119)=<4*A'+G'-9,aux(119)=<G'-1]
* Psum in Loop 70: [aux(66)=<E'-1,aux(100)=< -E+G',aux(100)=<A'-1,aux(120)=< -E+G',aux(120)=<A'-1,aux(106)=<4*A'+E'-9,aux(106)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1]

###### Computing sum for aux(119)=<4*A'+G'-9  in Loop 69 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(122)=<5*A+E-10] 
 * Adding constraints: [aux(119)=<it(69)*aux(122)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(122)=<5*A+E-10]
* Psum in Loop 69: [aux(119)=<G'-1]
* Psum in Loop 70: [aux(66)=<E'-1,aux(100)=< -E+G',aux(100)=<A'-1,aux(120)=< -E+G',aux(120)=<A'-1,aux(106)=<4*A'+E'-9,aux(106)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1]

###### Computing max_min for aux(122)=<5*A+E-10  
   - Applying max/min strategy 
     - Loop 68  increases the expression by [G-2,E'-2] 
     - Loop 69  increases the expression by [A'-1,5*A'-9] 
     - Loop 70  increases the expression by [E'-1,5*A'+E'-11] 
     - Loop 71 does not increase the expression
     - Loop 72  increases the expression by [E'-1,5*A'+E'-6] 
     - Loop 73  increases the expression by [G-1,E'-1] 
 * Adding constraints:[aux(122)=<aux(123)+aux(124)+aux(125)+aux(126)+aux(127)+aux(128),aux(123)=<5*A+E-10] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 68: [aux(124)=<G-2,aux(124)=<E'-2]
* Psum in Loop 69: [aux(119)=<G'-1,aux(125)=<A'-1,aux(125)=<5*A'-9]
* Psum in Loop 70: [aux(66)=<E'-1,aux(100)=< -E+G',aux(100)=<A'-1,aux(120)=< -E+G',aux(120)=<A'-1,aux(106)=<4*A'+E'-9,aux(106)=<E'-1,aux(126)=<5*A'+E'-11,aux(126)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(124)=<G-2  in Loop 68 
   - Found a solution using cacheing 
 * Adding constraints: [aux(124)=<aux(129),aux(129)=<it(68)*aux(17)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 68: [aux(124)=<E'-2]
* Psum in Loop 69: [aux(119)=<G'-1,aux(125)=<A'-1,aux(125)=<5*A'-9]
* Psum in Loop 70: [aux(66)=<E'-1,aux(100)=< -E+G',aux(100)=<A'-1,aux(120)=< -E+G',aux(120)=<A'-1,aux(106)=<4*A'+E'-9,aux(106)=<E'-1,aux(126)=<5*A'+E'-11,aux(126)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(124)=<E'-2  in Loop 68 
   - Found a solution using cacheing 
 * Adding constraints: [aux(124)=<aux(130),aux(130)=<it(68)*aux(22)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 69: [aux(119)=<G'-1,aux(125)=<A'-1,aux(125)=<5*A'-9]
* Psum in Loop 70: [aux(66)=<E'-1,aux(100)=< -E+G',aux(100)=<A'-1,aux(120)=< -E+G',aux(120)=<A'-1,aux(106)=<4*A'+E'-9,aux(106)=<E'-1,aux(126)=<5*A'+E'-11,aux(126)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(119)=<G'-1  in Loop 69 
   - Found a solution using cacheing 
 * Adding constraints: [aux(119)=<aux(131),aux(131)=<it(69)*aux(60)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 69: [aux(125)=<A'-1,aux(125)=<5*A'-9]
* Psum in Loop 70: [aux(66)=<E'-1,aux(100)=< -E+G',aux(100)=<A'-1,aux(120)=< -E+G',aux(120)=<A'-1,aux(106)=<4*A'+E'-9,aux(106)=<E'-1,aux(126)=<5*A'+E'-11,aux(126)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(125)=<A'-1  in Loop 69 
   - Found a solution using cacheing 
 * Adding constraints: [aux(125)=<aux(132),aux(132)=<it(69)*aux(74)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 69: [aux(125)=<5*A'-9]
* Psum in Loop 70: [aux(66)=<E'-1,aux(100)=< -E+G',aux(100)=<A'-1,aux(120)=< -E+G',aux(120)=<A'-1,aux(106)=<4*A'+E'-9,aux(106)=<E'-1,aux(126)=<5*A'+E'-11,aux(126)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(125)=<5*A'-9  in Loop 69 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(133)=<5*A-9] 
 * Adding constraints: [aux(125)=<it(69)*aux(133)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(133)=<5*A-9]
* Psum in Loop 70: [aux(66)=<E'-1,aux(100)=< -E+G',aux(100)=<A'-1,aux(120)=< -E+G',aux(120)=<A'-1,aux(106)=<4*A'+E'-9,aux(106)=<E'-1,aux(126)=<5*A'+E'-11,aux(126)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing max_min for aux(133)=<5*A-9  
   - Found a solution using cacheing 
 * Adding constraints:[aux(133)=<aux(23)*5-9] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 70: [aux(66)=<E'-1,aux(100)=< -E+G',aux(100)=<A'-1,aux(120)=< -E+G',aux(120)=<A'-1,aux(106)=<4*A'+E'-9,aux(106)=<E'-1,aux(126)=<5*A'+E'-11,aux(126)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(66)=<E'-1  in Loop 70 
   - Found a solution using cacheing 
 * Adding constraints: [aux(66)=<aux(134),aux(134)=<it(70)*aux(81)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 70: [aux(100)=< -E+G',aux(100)=<A'-1,aux(120)=< -E+G',aux(120)=<A'-1,aux(106)=<4*A'+E'-9,aux(106)=<E'-1,aux(126)=<5*A'+E'-11,aux(126)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(100)=< -E+G'  in Loop 70 
   - Found a solution using cacheing 
 * Adding constraints: [aux(100)=<aux(135),aux(135)=<it(70)*aux(83)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 70: [aux(100)=<A'-1,aux(120)=< -E+G',aux(120)=<A'-1,aux(106)=<4*A'+E'-9,aux(106)=<E'-1,aux(126)=<5*A'+E'-11,aux(126)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(100)=<A'-1  in Loop 70 
   - Found a solution using cacheing 
 * Adding constraints: [aux(100)=<aux(136),aux(136)=<it(70)*aux(93)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 70: [aux(120)=< -E+G',aux(120)=<A'-1,aux(106)=<4*A'+E'-9,aux(106)=<E'-1,aux(126)=<5*A'+E'-11,aux(126)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(120)=< -E+G'  in Loop 70 
   - Found a solution using cacheing 
 * Adding constraints: [aux(120)=<aux(137),aux(137)=<it(70)*aux(83)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 70: [aux(120)=<A'-1,aux(106)=<4*A'+E'-9,aux(106)=<E'-1,aux(126)=<5*A'+E'-11,aux(126)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(120)=<A'-1  in Loop 70 
   - Found a solution using cacheing 
 * Adding constraints: [aux(120)=<aux(138),aux(138)=<it(70)*aux(93)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 70: [aux(106)=<4*A'+E'-9,aux(106)=<E'-1,aux(126)=<5*A'+E'-11,aux(126)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(106)=<4*A'+E'-9  in Loop 70 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(139)=<5*A+G-10] 
 * Adding constraints: [aux(106)=<it(70)*aux(139)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(139)=<5*A+G-10]
* Psum in Loop 70: [aux(106)=<E'-1,aux(126)=<5*A'+E'-11,aux(126)=<E'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing max_min for aux(139)=<5*A+G-10  
   - Applying max/min strategy 
     - Loop 68 does not increase the expression
     - Loop 69  increases the expression by [G'-1,5*A'+G'-11] 
     - Loop 70  increases the expression by [-E+G',A'-1] 
     - Loop 71  increases the expression by [E-1,G'-1] 
     - Loop 72 does not increase the expression
     - Loop 73 does not increase the expression
 * Adding constraints:[aux(139)=<aux(140)+aux(141)+aux(142)+aux(143),aux(140)=<5*A+G-10] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 69: [aux(141)=<5*A'+G'-11,aux(141)=<G'-1]
* Psum in Loop 70: [aux(106)=<E'-1,aux(126)=<5*A'+E'-11,aux(126)=<E'-1,aux(142)=< -E+G',aux(142)=<A'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1,aux(143)=<E-1,aux(143)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(141)=<5*A'+G'-11  in Loop 69 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(144)=<6*A+E-12] 
 * Adding constraints: [aux(141)=<it(69)*aux(144)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(144)=<6*A+E-12]
* Psum in Loop 69: [aux(141)=<G'-1]
* Psum in Loop 70: [aux(106)=<E'-1,aux(126)=<5*A'+E'-11,aux(126)=<E'-1,aux(142)=< -E+G',aux(142)=<A'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1,aux(143)=<E-1,aux(143)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing max_min for aux(144)=<6*A+E-12  
   - Applying max/min strategy 
     - Loop 68  increases the expression by [G-2,E'-2] 
     - Loop 69  increases the expression by [A'-1,6*A'-11] 
     - Loop 70  increases the expression by [E'-1,6*A'+E'-13] 
     - Loop 71 does not increase the expression
     - Loop 72  increases the expression by [E'-1,6*A'+E'-7] 
     - Loop 73  increases the expression by [G-1,E'-1] 
 * Adding constraints:[aux(144)=<aux(145)+aux(146)+aux(147)+aux(148)+aux(149)+aux(150),aux(145)=<6*A+E-12] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 69: [aux(141)=<G'-1]
* Psum in Loop 70: [aux(106)=<E'-1,aux(126)=<5*A'+E'-11,aux(126)=<E'-1,aux(142)=< -E+G',aux(142)=<A'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1,aux(143)=<E-1,aux(143)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(141)=<G'-1  in Loop 69 
   - Found a solution using cacheing 
 * Adding constraints: [aux(141)=<aux(151),aux(151)=<it(69)*aux(60)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 70: [aux(106)=<E'-1,aux(126)=<5*A'+E'-11,aux(126)=<E'-1,aux(142)=< -E+G',aux(142)=<A'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1,aux(143)=<E-1,aux(143)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(106)=<E'-1  in Loop 70 
   - Found a solution using cacheing 
 * Adding constraints: [aux(106)=<aux(152),aux(152)=<it(70)*aux(81)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 70: [aux(126)=<5*A'+E'-11,aux(126)=<E'-1,aux(142)=< -E+G',aux(142)=<A'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1,aux(143)=<E-1,aux(143)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(126)=<5*A'+E'-11  in Loop 70 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(153)=<6*A+G-12] 
 * Adding constraints: [aux(126)=<it(70)*aux(153)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(153)=<6*A+G-12]
* Psum in Loop 70: [aux(126)=<E'-1,aux(142)=< -E+G',aux(142)=<A'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1,aux(143)=<E-1,aux(143)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing max_min for aux(153)=<6*A+G-12  
   - Applying max/min strategy 
     - Loop 68 does not increase the expression
     - Loop 69  increases the expression by [G'-1,6*A'+G'-13] 
     - Loop 70  increases the expression by [-E+G',A'-1] 
     - Loop 71  increases the expression by [E-1,G'-1] 
     - Loop 72 does not increase the expression
     - Loop 73 does not increase the expression
 * Adding constraints:[aux(153)=<aux(154)+aux(155)+aux(156)+aux(157),aux(154)=<6*A+G-12] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 69: [aux(155)=<6*A'+G'-13,aux(155)=<G'-1]
* Psum in Loop 70: [aux(126)=<E'-1,aux(142)=< -E+G',aux(142)=<A'-1,aux(156)=< -E+G',aux(156)=<A'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1,aux(143)=<E-1,aux(143)=<G'-1,aux(157)=<E-1,aux(157)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(155)=<6*A'+G'-13  in Loop 69 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(158)=<7*A+E-14] 
 * Adding constraints: [aux(155)=<it(69)*aux(158)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 69: [aux(155)=<G'-1]
* Psum in Loop 70: [aux(126)=<E'-1,aux(142)=< -E+G',aux(142)=<A'-1,aux(156)=< -E+G',aux(156)=<A'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1,aux(143)=<E-1,aux(143)=<G'-1,aux(157)=<E-1,aux(157)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(155)=<G'-1  in Loop 69 
   - Found a solution using cacheing 
 * Adding constraints: [aux(155)=<aux(159),aux(159)=<it(69)*aux(60)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 70: [aux(126)=<E'-1,aux(142)=< -E+G',aux(142)=<A'-1,aux(156)=< -E+G',aux(156)=<A'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1,aux(143)=<E-1,aux(143)=<G'-1,aux(157)=<E-1,aux(157)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(126)=<E'-1  in Loop 70 
   - Found a solution using cacheing 
 * Adding constraints: [aux(126)=<aux(160),aux(160)=<it(70)*aux(81)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 70: [aux(142)=< -E+G',aux(142)=<A'-1,aux(156)=< -E+G',aux(156)=<A'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1,aux(143)=<E-1,aux(143)=<G'-1,aux(157)=<E-1,aux(157)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(142)=< -E+G'  in Loop 70 
   - Found a solution using cacheing 
 * Adding constraints: [aux(142)=<aux(161),aux(161)=<it(70)*aux(83)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 70: [aux(142)=<A'-1,aux(156)=< -E+G',aux(156)=<A'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1,aux(143)=<E-1,aux(143)=<G'-1,aux(157)=<E-1,aux(157)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(142)=<A'-1  in Loop 70 
   - Found a solution using cacheing 
 * Adding constraints: [aux(142)=<aux(162),aux(162)=<it(70)*aux(93)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 70: [aux(156)=< -E+G',aux(156)=<A'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1,aux(143)=<E-1,aux(143)=<G'-1,aux(157)=<E-1,aux(157)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(156)=< -E+G'  in Loop 70 
   - Found a solution using cacheing 
 * Adding constraints: [aux(156)=<aux(163),aux(163)=<it(70)*aux(83)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 70: [aux(156)=<A'-1]
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1,aux(143)=<E-1,aux(143)=<G'-1,aux(157)=<E-1,aux(157)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(156)=<A'-1  in Loop 70 
   - Found a solution using cacheing 
 * Adding constraints: [aux(156)=<aux(164),aux(164)=<it(70)*aux(93)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 71: [it(71)=<1,s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1,aux(143)=<E-1,aux(143)=<G'-1,aux(157)=<E-1,aux(157)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for it(71)=<1  in Loop 71 
   - Applying inductive sum strategy 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(68)+it(69)+it(70)+it(71)+it(72)+it(73)=<B-1,it(68)+it(69)+it(70)+it(71)+it(72)+it(73)=<B-1,it(68)+it(69)+it(70)+it(71)+it(72)+it(73)=<B-B',it(68)+it(69)+it(70)+it(71)+it(72)+it(73)=<B-B'] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 71: [s(51)=<G,aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1,aux(143)=<E-1,aux(143)=<G'-1,aux(157)=<E-1,aux(157)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for s(51)=<G  in Loop 71 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(165)=<G] 
 * Adding constraints: [s(51)=<it(71)*aux(165)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(165)=<G]
* Psum in Loop 71: [aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1,aux(143)=<E-1,aux(143)=<G'-1,aux(157)=<E-1,aux(157)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing max_min for aux(165)=<G  
   - Found a solution using cacheing 
 * Adding constraints:[aux(165)=<aux(17)+2] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 71: [aux(21)=<E-1,aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1,aux(143)=<E-1,aux(143)=<G'-1,aux(157)=<E-1,aux(157)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(21)=<E-1  in Loop 71 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(166)=<E-1] 
 * Adding constraints: [aux(21)=<it(71)*aux(166)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(166)=<E-1]
* Psum in Loop 71: [aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1,aux(143)=<E-1,aux(143)=<G'-1,aux(157)=<E-1,aux(157)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing max_min for aux(166)=<E-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(166)=<aux(10)-1] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 71: [aux(30)=<E'-G'-1,aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1,aux(143)=<E-1,aux(143)=<G'-1,aux(157)=<E-1,aux(157)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(30)=<E'-G'-1  in Loop 71 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(167)=<E-2] 
 * Adding constraints: [aux(30)=<it(71)*aux(167)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(167)=<E-2]
* Psum in Loop 71: [aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1,aux(143)=<E-1,aux(143)=<G'-1,aux(157)=<E-1,aux(157)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing max_min for aux(167)=<E-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(167)=<aux(10)-2] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 71: [aux(21)=<G'-1,aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1,aux(143)=<E-1,aux(143)=<G'-1,aux(157)=<E-1,aux(157)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(21)=<G'-1  in Loop 71 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(168)=<E-1] 
 * Adding constraints: [aux(21)=<it(71)*aux(168)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(168)=<E-1]
* Psum in Loop 71: [aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1,aux(143)=<E-1,aux(143)=<G'-1,aux(157)=<E-1,aux(157)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing max_min for aux(168)=<E-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(168)=<aux(10)-1] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 71: [aux(36)=<E-1,aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1,aux(143)=<E-1,aux(143)=<G'-1,aux(157)=<E-1,aux(157)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(36)=<E-1  in Loop 71 
   - Found a solution using cacheing 
 * Adding constraints: [aux(36)=<aux(169),aux(169)=<it(71)*aux(166)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 71: [aux(40)=<E-1,aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1,aux(143)=<E-1,aux(143)=<G'-1,aux(157)=<E-1,aux(157)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(40)=<E-1  in Loop 71 
   - Found a solution using cacheing 
 * Adding constraints: [aux(40)=<aux(170),aux(170)=<it(71)*aux(166)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 71: [aux(36)=<G'-1,aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1,aux(143)=<E-1,aux(143)=<G'-1,aux(157)=<E-1,aux(157)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(36)=<G'-1  in Loop 71 
   - Found a solution using cacheing 
 * Adding constraints: [aux(36)=<aux(171),aux(171)=<it(71)*aux(168)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 71: [aux(40)=<G'-1,aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1,aux(143)=<E-1,aux(143)=<G'-1,aux(157)=<E-1,aux(157)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(40)=<G'-1  in Loop 71 
   - Found a solution using cacheing 
 * Adding constraints: [aux(40)=<aux(172),aux(172)=<it(71)*aux(168)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 71: [aux(101)=<E-1,aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1,aux(143)=<E-1,aux(143)=<G'-1,aux(157)=<E-1,aux(157)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(101)=<E-1  in Loop 71 
   - Found a solution using cacheing 
 * Adding constraints: [aux(101)=<aux(173),aux(173)=<it(71)*aux(166)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 71: [aux(101)=<G'-1,aux(121)=<E-1,aux(121)=<G'-1,aux(143)=<E-1,aux(143)=<G'-1,aux(157)=<E-1,aux(157)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(101)=<G'-1  in Loop 71 
   - Found a solution using cacheing 
 * Adding constraints: [aux(101)=<aux(174),aux(174)=<it(71)*aux(168)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 71: [aux(121)=<E-1,aux(121)=<G'-1,aux(143)=<E-1,aux(143)=<G'-1,aux(157)=<E-1,aux(157)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(121)=<E-1  in Loop 71 
   - Found a solution using cacheing 
 * Adding constraints: [aux(121)=<aux(175),aux(175)=<it(71)*aux(166)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 71: [aux(121)=<G'-1,aux(143)=<E-1,aux(143)=<G'-1,aux(157)=<E-1,aux(157)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(121)=<G'-1  in Loop 71 
   - Found a solution using cacheing 
 * Adding constraints: [aux(121)=<aux(176),aux(176)=<it(71)*aux(168)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 71: [aux(143)=<E-1,aux(143)=<G'-1,aux(157)=<E-1,aux(157)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(143)=<E-1  in Loop 71 
   - Found a solution using cacheing 
 * Adding constraints: [aux(143)=<aux(177),aux(177)=<it(71)*aux(166)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 71: [aux(143)=<G'-1,aux(157)=<E-1,aux(157)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(143)=<G'-1  in Loop 71 
   - Found a solution using cacheing 
 * Adding constraints: [aux(143)=<aux(178),aux(178)=<it(71)*aux(168)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 71: [aux(157)=<E-1,aux(157)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(157)=<E-1  in Loop 71 
   - Found a solution using cacheing 
 * Adding constraints: [aux(157)=<aux(179),aux(179)=<it(71)*aux(166)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 71: [aux(157)=<G'-1]
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(157)=<G'-1  in Loop 71 
   - Found a solution using cacheing 
 * Adding constraints: [aux(157)=<aux(180),aux(180)=<it(71)*aux(168)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 72: [it(72)=<1,aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for it(72)=<1  in Loop 72 
   - Applying inductive sum strategy 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(68)+it(69)+it(70)+it(71)+it(72)+it(73)=<B-1,it(68)+it(69)+it(70)+it(71)+it(72)+it(73)=<B-1,it(68)+it(69)+it(70)+it(71)+it(72)+it(73)=<B-B',it(68)+it(69)+it(70)+it(71)+it(72)+it(73)=<B-B'] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 72: [aux(15)=<G-1,aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(15)=<G-1  in Loop 72 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(181)=<G-1] 
 * Adding constraints: [aux(15)=<it(72)*aux(181)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(181)=<G-1]
* Psum in Loop 72: [aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing max_min for aux(181)=<G-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(181)=<aux(17)+1] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 72: [aux(15)=<E'-1,aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(15)=<E'-1  in Loop 72 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(182)=<G-1] 
 * Adding constraints: [aux(15)=<it(72)*aux(182)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(182)=<G-1]
* Psum in Loop 72: [aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing max_min for aux(182)=<G-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(182)=<aux(17)+1] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 72: [aux(89)=<A'-E'+G'-1,aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(89)=<A'-E'+G'-1  in Loop 72 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(183)=<A+G-2] 
 * Adding constraints: [aux(89)=<it(72)*aux(183)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(183)=<A+G-2]
* Psum in Loop 72: [aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing max_min for aux(183)=<A+G-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(183)=<aux(27)+1] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 72: [aux(46)=<A'+E'-2,aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(46)=<A'+E'-2  in Loop 72 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(184)=<A+G-2] 
 * Adding constraints: [aux(46)=<it(72)*aux(184)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(184)=<A+G-2]
* Psum in Loop 72: [aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing max_min for aux(184)=<A+G-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(184)=<aux(27)+1] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 72: [aux(55)=<2*A'+E'-3,aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(55)=<2*A'+E'-3  in Loop 72 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(185)=<2*A+G-3] 
 * Adding constraints: [aux(55)=<it(72)*aux(185)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(185)=<2*A+G-3]
* Psum in Loop 72: [aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing max_min for aux(185)=<2*A+G-3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(185)=<aux(29)+1] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 72: [aux(89)=< -E'+G',aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(89)=< -E'+G'  in Loop 72 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(186)=<G-1] 
 * Adding constraints: [aux(89)=<it(72)*aux(186)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(186)=<G-1]
* Psum in Loop 72: [aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing max_min for aux(186)=<G-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(186)=<aux(17)+1] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 72: [aux(46)=<E'-1,aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(46)=<E'-1  in Loop 72 
   - Found a solution using cacheing 
 * Adding constraints: [aux(46)=<aux(187),aux(187)=<it(72)*aux(182)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 72: [aux(55)=<E'-1,aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(55)=<E'-1  in Loop 72 
   - Found a solution using cacheing 
 * Adding constraints: [aux(55)=<aux(188),aux(188)=<it(72)*aux(182)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 72: [aux(67)=<3*A'+E'-4,aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(67)=<3*A'+E'-4  in Loop 72 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(189)=<3*A+G-4] 
 * Adding constraints: [aux(67)=<it(72)*aux(189)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(189)=<3*A+G-4]
* Psum in Loop 72: [aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing max_min for aux(189)=<3*A+G-4  
   - Found a solution using cacheing 
 * Adding constraints:[aux(189)=<aux(97)+2] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 72: [aux(67)=<E'-1,aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(67)=<E'-1  in Loop 72 
   - Found a solution using cacheing 
 * Adding constraints: [aux(67)=<aux(190),aux(190)=<it(72)*aux(182)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 72: [aux(107)=<4*A'+E'-5,aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(107)=<4*A'+E'-5  in Loop 72 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(191)=<4*A+G-5] 
 * Adding constraints: [aux(107)=<it(72)*aux(191)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(191)=<4*A+G-5]
* Psum in Loop 72: [aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing max_min for aux(191)=<4*A+G-5  
   - Found a solution using cacheing 
 * Adding constraints:[aux(191)=<aux(117)+3] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 72: [aux(107)=<E'-1,aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(107)=<E'-1  in Loop 72 
   - Found a solution using cacheing 
 * Adding constraints: [aux(107)=<aux(192),aux(192)=<it(72)*aux(182)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 72: [aux(127)=<5*A'+E'-6,aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(127)=<5*A'+E'-6  in Loop 72 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(193)=<5*A+G-6] 
 * Adding constraints: [aux(127)=<it(72)*aux(193)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(193)=<5*A+G-6]
* Psum in Loop 72: [aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing max_min for aux(193)=<5*A+G-6  
   - Found a solution using cacheing 
 * Adding constraints:[aux(193)=<aux(139)+4] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 72: [aux(127)=<E'-1]
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(127)=<E'-1  in Loop 72 
   - Found a solution using cacheing 
 * Adding constraints: [aux(127)=<aux(194),aux(194)=<it(72)*aux(182)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 73: [it(73)=<1,s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for it(73)=<1  in Loop 73 
   - Applying inductive sum strategy 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(68)+it(69)+it(70)+it(71)+it(72)+it(73)=<B-1,it(68)+it(69)+it(70)+it(71)+it(72)+it(73)=<B-1,it(68)+it(69)+it(70)+it(71)+it(72)+it(73)=<B-B',it(68)+it(69)+it(70)+it(71)+it(72)+it(73)=<B-B'] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 73: [s(52)=<G,aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for s(52)=<G  in Loop 73 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(195)=<G] 
 * Adding constraints: [s(52)=<it(73)*aux(195)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(195)=<G]
* Psum in Loop 73: [aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing max_min for aux(195)=<G  
   - Found a solution using cacheing 
 * Adding constraints:[aux(195)=<aux(17)+2] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 73: [aux(16)=<G-1,aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(16)=<G-1  in Loop 73 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(196)=<G-1] 
 * Adding constraints: [aux(16)=<it(73)*aux(196)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(196)=<G-1]
* Psum in Loop 73: [aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing max_min for aux(196)=<G-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(196)=<aux(17)+1] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 73: [aux(16)=<E'-1,aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(16)=<E'-1  in Loop 73 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(197)=<G-1] 
 * Adding constraints: [aux(16)=<it(73)*aux(197)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(197)=<G-1]
* Psum in Loop 73: [aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing max_min for aux(197)=<G-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(197)=<aux(17)+1] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 73: [aux(47)=<G-1,aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(47)=<G-1  in Loop 73 
   - Found a solution using cacheing 
 * Adding constraints: [aux(47)=<aux(198),aux(198)=<it(73)*aux(196)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 73: [aux(56)=<G-1,aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(56)=<G-1  in Loop 73 
   - Found a solution using cacheing 
 * Adding constraints: [aux(56)=<aux(199),aux(199)=<it(73)*aux(196)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 73: [aux(90)=< -E'+G',aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(90)=< -E'+G'  in Loop 73 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(200)=<G-1] 
 * Adding constraints: [aux(90)=<it(73)*aux(200)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(200)=<G-1]
* Psum in Loop 73: [aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing max_min for aux(200)=<G-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(200)=<aux(17)+1] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 73: [aux(47)=<E'-1,aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(47)=<E'-1  in Loop 73 
   - Found a solution using cacheing 
 * Adding constraints: [aux(47)=<aux(201),aux(201)=<it(73)*aux(197)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 73: [aux(56)=<E'-1,aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(56)=<E'-1  in Loop 73 
   - Found a solution using cacheing 
 * Adding constraints: [aux(56)=<aux(202),aux(202)=<it(73)*aux(197)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 73: [aux(90)=<G'-1,aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(90)=<G'-1  in Loop 73 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(203)=<G-1] 
 * Adding constraints: [aux(90)=<it(73)*aux(203)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(203)=<G-1]
* Psum in Loop 73: [aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing max_min for aux(203)=<G-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(203)=<aux(17)+1] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 73: [aux(68)=<G-1,aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(68)=<G-1  in Loop 73 
   - Found a solution using cacheing 
 * Adding constraints: [aux(68)=<aux(204),aux(204)=<it(73)*aux(196)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 73: [aux(68)=<E'-1,aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(68)=<E'-1  in Loop 73 
   - Found a solution using cacheing 
 * Adding constraints: [aux(68)=<aux(205),aux(205)=<it(73)*aux(197)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 73: [aux(108)=<G-1,aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(108)=<G-1  in Loop 73 
   - Found a solution using cacheing 
 * Adding constraints: [aux(108)=<aux(206),aux(206)=<it(73)*aux(196)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 73: [aux(108)=<E'-1,aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(108)=<E'-1  in Loop 73 
   - Found a solution using cacheing 
 * Adding constraints: [aux(108)=<aux(207),aux(207)=<it(73)*aux(197)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 73: [aux(128)=<G-1,aux(128)=<E'-1]

###### Computing sum for aux(128)=<G-1  in Loop 73 
   - Found a solution using cacheing 
 * Adding constraints: [aux(128)=<aux(208),aux(208)=<it(73)*aux(196)] 

##### Pending set process_main3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 73: [aux(128)=<E'-1]

###### Computing sum for aux(128)=<E'-1  in Loop 73 
   - Found a solution using cacheing 
 * Adding constraints: [aux(128)=<aux(209),aux(209)=<it(73)*aux(197)] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [68,69,70,71,72,73] 
Found a cycle in the non-final constraints
 Removed possibly redundant constraints to solve a cycle in the cost structure 
aux(13)=<it(69)*aux(25)
aux(44)=<aux(73)
aux(20)=<it(70)*aux(83)
aux(35)=<aux(91)
aux(39)=<aux(92)
aux(100)=<aux(135)
aux(120)=<aux(137)
aux(141)=<aux(151)
aux(155)=<aux(159)
aux(142)=<aux(161)
aux(156)=<aux(163)
Found a cycle in the non-final constraints
Could not solve cycle in cost structure.
 Discarded constraints:  
aux(203)=<aux(17)+1
aux(200)=<aux(17)+1
aux(197)=<aux(17)+1
aux(196)=<aux(17)+1
aux(195)=<aux(17)+2
aux(193)=<aux(139)+4
aux(191)=<aux(117)+3
aux(189)=<aux(97)+2
aux(186)=<aux(17)+1
aux(185)=<aux(29)+1
aux(184)=<aux(27)+1
aux(183)=<aux(27)+1
aux(182)=<aux(17)+1
aux(181)=<aux(17)+1
aux(168)=<aux(10)-1
aux(167)=<aux(10)-2
aux(166)=<aux(10)-1
aux(165)=<aux(17)+2
aux(153)=<aux(154)+aux(155)+aux(156)+aux(157)
aux(139)=<aux(140)+aux(141)+aux(142)+aux(143)
aux(122)=<aux(123)+aux(124)+aux(125)+aux(126)+aux(127)+aux(128)
aux(117)=<aux(118)+aux(119)+aux(120)+aux(121)
aux(114)=<aux(27)+1
aux(102)=<aux(103)+aux(104)+aux(105)+aux(106)+aux(107)+aux(108)
aux(97)=<aux(98)+aux(99)+aux(100)+aux(101)
aux(96)=<aux(29)
aux(95)=<aux(27)+1
aux(86)=<aux(50)+2
aux(85)=<aux(27)+1
aux(88)=<aux(41)
aux(83)=<max([aux(84),aux(85),aux(86),aux(88)])+aux(87)+aux(89)+aux(90)
aux(81)=<aux(27)+1
aux(80)=<aux(27)+1
aux(62)=<aux(63)+aux(64)+aux(65)+aux(66)+aux(67)+aux(68)
aux(61)=<aux(41)
aux(60)=<aux(41)
aux(59)=<aux(41)-1
aux(50)=<aux(51)+aux(52)+aux(53)+aux(54)+aux(55)+aux(56)
aux(41)=<aux(42)+aux(43)+aux(44)+aux(45)+aux(46)+aux(47)
aux(29)=<aux(37)+aux(38)+aux(39)+aux(40)
aux(32)=<aux(27)
aux(31)=<aux(27)
aux(27)=<aux(33)+aux(34)+aux(35)+aux(36)
aux(25)=<max([aux(26),aux(27),aux(29),aux(31),aux(32)])+aux(28)+aux(30)
aux(22)=<aux(17)
aux(17)=<aux(18)+aux(19)+aux(20)+aux(21)
aux(10)=<aux(11)+aux(12)+aux(13)+aux(14)+aux(15)+aux(16)
aux(209)=<it(73)*aux(197)
aux(128)=<aux(209)
aux(208)=<it(73)*aux(196)
aux(128)=<aux(208)
aux(207)=<it(73)*aux(197)
aux(108)=<aux(207)
aux(206)=<it(73)*aux(196)
aux(108)=<aux(206)
aux(205)=<it(73)*aux(197)
aux(68)=<aux(205)
aux(204)=<it(73)*aux(196)
aux(68)=<aux(204)
aux(90)=<it(73)*aux(203)
aux(202)=<it(73)*aux(197)
aux(56)=<aux(202)
aux(201)=<it(73)*aux(197)
aux(47)=<aux(201)
aux(90)=<it(73)*aux(200)
aux(199)=<it(73)*aux(196)
aux(56)=<aux(199)
aux(198)=<it(73)*aux(196)
aux(47)=<aux(198)
aux(16)=<it(73)*aux(197)
aux(16)=<it(73)*aux(196)
s(52)=<it(73)*aux(195)
aux(194)=<it(72)*aux(182)
aux(127)=<aux(194)
aux(127)=<it(72)*aux(193)
aux(192)=<it(72)*aux(182)
aux(107)=<aux(192)
aux(107)=<it(72)*aux(191)
aux(190)=<it(72)*aux(182)
aux(67)=<aux(190)
aux(67)=<it(72)*aux(189)
aux(188)=<it(72)*aux(182)
aux(55)=<aux(188)
aux(187)=<it(72)*aux(182)
aux(46)=<aux(187)
aux(89)=<it(72)*aux(186)
aux(55)=<it(72)*aux(185)
aux(46)=<it(72)*aux(184)
aux(89)=<it(72)*aux(183)
aux(15)=<it(72)*aux(182)
aux(15)=<it(72)*aux(181)
aux(180)=<it(71)*aux(168)
aux(157)=<aux(180)
aux(179)=<it(71)*aux(166)
aux(157)=<aux(179)
aux(178)=<it(71)*aux(168)
aux(143)=<aux(178)
aux(177)=<it(71)*aux(166)
aux(143)=<aux(177)
aux(176)=<it(71)*aux(168)
aux(121)=<aux(176)
aux(175)=<it(71)*aux(166)
aux(121)=<aux(175)
aux(174)=<it(71)*aux(168)
aux(101)=<aux(174)
aux(173)=<it(71)*aux(166)
aux(101)=<aux(173)
aux(172)=<it(71)*aux(168)
aux(40)=<aux(172)
aux(171)=<it(71)*aux(168)
aux(36)=<aux(171)
aux(170)=<it(71)*aux(166)
aux(40)=<aux(170)
aux(169)=<it(71)*aux(166)
aux(36)=<aux(169)
aux(21)=<it(71)*aux(168)
aux(30)=<it(71)*aux(167)
aux(21)=<it(71)*aux(166)
s(51)=<it(71)*aux(165)
aux(163)=<it(70)*aux(83)
aux(161)=<it(70)*aux(83)
aux(160)=<it(70)*aux(81)
aux(126)=<aux(160)
aux(159)=<it(69)*aux(60)
aux(126)=<it(70)*aux(153)
aux(152)=<it(70)*aux(81)
aux(106)=<aux(152)
aux(151)=<it(69)*aux(60)
aux(106)=<it(70)*aux(139)
aux(137)=<it(70)*aux(83)
aux(135)=<it(70)*aux(83)
aux(134)=<it(70)*aux(81)
aux(66)=<aux(134)
aux(131)=<it(69)*aux(60)
aux(119)=<aux(131)
aux(130)=<it(68)*aux(22)
aux(124)=<aux(130)
aux(129)=<it(68)*aux(17)
aux(124)=<aux(129)
aux(119)=<it(69)*aux(122)
aux(66)=<it(70)*aux(117)
aux(116)=<it(70)*aux(81)
aux(54)=<aux(116)
aux(115)=<it(70)*aux(81)
aux(45)=<aux(115)
aux(87)=<it(70)*aux(114)
aux(111)=<it(69)*aux(60)
aux(99)=<aux(111)
aux(110)=<it(68)*aux(22)
aux(104)=<aux(110)
aux(109)=<it(68)*aux(17)
aux(104)=<aux(109)
aux(99)=<it(69)*aux(102)
aux(54)=<it(70)*aux(97)
aux(87)=<it(70)*aux(96)
aux(45)=<it(70)*aux(95)
aux(92)=<it(70)*aux(83)
aux(91)=<it(70)*aux(83)
aux(14)=<it(70)*aux(81)
aux(14)=<it(70)*aux(80)
aux(73)=<it(69)*aux(25)
aux(72)=<it(69)*aux(60)
aux(38)=<aux(72)
aux(71)=<it(69)*aux(60)
aux(34)=<aux(71)
aux(70)=<it(68)*aux(22)
aux(64)=<aux(70)
aux(69)=<it(68)*aux(17)
aux(64)=<aux(69)
aux(38)=<it(69)*aux(62)
aux(34)=<it(69)*aux(61)
aux(19)=<it(69)*aux(60)
aux(28)=<it(69)*aux(59)
aux(58)=<it(68)*aux(22)
aux(52)=<aux(58)
aux(57)=<it(68)*aux(17)
aux(52)=<aux(57)
aux(28)=<it(69)*aux(50)
aux(49)=<it(68)*aux(22)
aux(43)=<aux(49)
aux(48)=<it(68)*aux(17)
aux(43)=<aux(48)
aux(19)=<it(69)*aux(41)
aux(12)=<it(68)*aux(22)
aux(12)=<it(68)*aux(17)
s(46)=<it(68)*aux(10)

#### Simplifying cost structure of phase [68,69,70,71,72,73] 
 * Joined equivalent variables [aux(94),aux(39)] into aux(94)
 * Joined equivalent variables [aux(136),aux(100)] into aux(136)
 * Joined equivalent variables [aux(138),aux(120)] into aux(138)
 * Joined equivalent variables [aux(162),aux(142)] into aux(162)
 * Joined equivalent variables [aux(164),aux(156)] into aux(164)
 * Joined equivalent variables [aux(24),aux(74),aux(82),aux(93)] into aux(24)
 * Joined equivalent variables [aux(35),aux(94),aux(136),aux(138),aux(162),aux(164)] into aux(35)
 * Joined equivalent variables [aux(44),aux(75),aux(77),aux(112),aux(132)] into aux(44)
 * Joined equivalent variables [s(46),s(51),s(52)] into s(46)
 * Joined equivalent variables [it(68),it(69),it(70),it(71),it(72),it(73)] into it(68)
 * Joined equivalent variables [aux(13),aux(20)] into aux(13)
 * Joined equivalent variables [aux(35),aux(44)] into aux(35)
 * Joined equivalent variables [aux(13),aux(35)] into aux(13)

#### Cost of phase [68,69,70,71,72,73]:process_main3(A,B,C,D,E,F,G,H,I) -> [process_main3(A',B',C',D',E',F',G',H',I')] 
120*it(68)+24*s(46)+20*s(47)+20*s(49)+0
  Such that:aux(23) =< A
aux(210) =< B
aux(211) =< B-B'
it(68) =< aux(210)
it(68) =< aux(211)
aux(79) =< aux(23)
s(48) =< it(68)*aux(23)
s(50) =< it(68)*aux(79)
s(49) =< s(50)
s(47) =< s(48)

Unbounded itvars
s(46) :  sum(68),s(33)

#### Simplifying cost structure of chain [[68,69,70,71,72,73],67] 
 * Joined equivalent variables [aux(212),aux(210),aux(211)] into aux(212)

#### Cost of chains of process_main3(A,B,C,D,E,F,G,H,I):
* Chain [[68,69,70,71,72,73],67]: 120*it(68)+24*s(46)+20*s(47)+20*s(49)+3
  Such that:aux(23) =< A
aux(212) =< B
it(68) =< aux(212)
aux(79) =< aux(23)
s(48) =< it(68)*aux(23)
s(50) =< it(68)*aux(79)
s(49) =< s(50)
s(47) =< s(48)

Unbounded itvars
s(46) :  sum(68),s(33)

  with precondition: [I=1,A>=0,B>=2,C>=0,D>=1,E>=1,F>=0,G>=1,H>=0] 

* Chain [67]: 3
  with precondition: [A=0,B=1,D=0,I=1,C>=0,E>=1,F>=0,G>=1,H>=0] 


#### Simplifying cost structure of CE 97 
 * Renamed intermediate variables: 
[ (eq(98,1),aux(23))>>s(53), (eq(98,1),aux(212))>>s(54), (eq(98,1),it(68))>>s(55), (eq(98,1),aux(79))>>s(56), (eq(98,1),s(48))>>s(57), (eq(98,1),s(50))>>s(58), (eq(98,1),s(49))>>s(59), (eq(98,1),s(47))>>s(60), (eq(98,1),s(46))>>s(61)]

#### Simplifying cost structure of CE 98 

#### Cost of chains of main3(A,B,C,D,E):
* Chain [75]: 6
  with precondition: [A=0,B=1,D=0,E=1,C>=0] 

* Chain [74]: 120*s(55)+20*s(59)+20*s(60)+24*s(61)+6
  Such that:s(53) =< A
s(54) =< B
s(55) =< s(54)
s(56) =< s(53)
s(57) =< s(55)*s(53)
s(58) =< s(55)*s(56)
s(59) =< s(58)
s(60) =< s(57)

Unbounded itvars
s(61) :  eq(98,1),s(46)

  with precondition: [E=1,A>=0,B>=2,C>=0,D>=1] 


#### Simplifying cost structure of CE 105 

#### Simplifying cost structure of CE 107 

#### Simplifying cost structure of CE 104 

#### Simplifying cost structure of CE 108 
 * Renamed intermediate variables: 
[ (eq(110,1),s(1))>>s(62)]

#### Simplifying cost structure of CE 110 

#### Simplifying cost structure of CE 103 
 * Renamed intermediate variables: 
[ (eq(109,1),s(1))>>s(63)]

#### Simplifying cost structure of CE 109 
 * Renamed intermediate variables: 
[ (eq(106,1),s(1))>>s(64)]

#### Simplifying cost structure of CE 106 

#### Simplifying cost structure of CE 100 

#### Simplifying cost structure of CE 99 
 * Renamed intermediate variables: 
[ (eq(102,1),aux(5))>>s(65), (eq(102,1),it(38))>>s(66)]
 * Renamed intermediate variables: 
[ (eq(102,2),aux(5))>>s(67), (eq(102,2),it(38))>>s(68)]

#### Simplifying cost structure of CE 102 
 * Joined equivalent variables [aux(213),s(65),s(67)] into aux(213)
 * Joined equivalent variables [s(66),s(68)] into s(66)
 * Renamed intermediate variables: 
[ (eq(101,1),aux(5))>>s(69), (eq(101,1),it(38))>>s(70)]
 * Renamed intermediate variables: 
[ (eq(101,2),aux(5))>>s(71), (eq(101,2),it(38))>>s(72)]

#### Simplifying cost structure of CE 101 
 * Joined equivalent variables [aux(214),s(69),s(71)] into aux(214)
 * Joined equivalent variables [s(70),s(72)] into s(70)

#### Cost of chains of case_10(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R):
* Chain [83]: 12
  with precondition: [E=1,I=0,K=1,P=1,M+1=B,G=Q,D>=1,F>=0,G>=1,H>=0,J>=0,L>=0,M>=1,N>=0,O>=0,R>=H,C>=J,A>=L,C>=N,D>=O] 

* Chain [82]: 8*s(62)+12
  Such that:s(62) =< G

  with precondition: [I=0,K=1,P=1,M+1=B,E=Q,D>=1,F>=0,G>=1,H>=0,J>=0,L>=0,M>=1,N>=0,O>=0,R>=F,E>=G+1,R>=H,C>=J,A>=L,C>=N,D>=O] 

* Chain [81]: 8*s(63)+12
  Such that:s(63) =< G

  with precondition: [I=0,K=1,P=1,M+1=B,G=Q,D>=1,E>=1,F>=0,H>=0,J>=0,L>=0,M>=1,N>=0,O>=0,G>=E,R>=F,R>=H,C>=J,A>=L,C>=N,D>=O] 

* Chain [80]: 8*s(64)+11
  Such that:s(64) =< E

  with precondition: [I=0,K=1,P=1,M+1=B,G=Q,D>=1,E>=2,F>=0,G>=1,H>=0,J>=0,L>=0,M>=1,N>=0,O>=0,R>=H,C>=J,A>=L,C>=N,D>=O] 

* Chain [79]: 11
  with precondition: [I=1,K=1,P=1,M+1=B,E=Q,A>=1,D>=1,F>=0,G>=1,H>=0,J>=0,L>=0,M>=1,N>=0,O>=0,R>=F,E>=G+1,R>=H,C>=J,A>=L,C>=N,D>=O] 

* Chain [78]: 11
  with precondition: [I=1,K=1,P=1,M+1=B,G=Q,A>=1,D>=1,E>=1,F>=0,H>=0,J>=0,L>=0,M>=1,N>=0,O>=0,G>=E,R>=F,R>=H,C>=J,A>=L,C>=N,D>=O] 

* Chain [77]: 20*s(66)+11
  Such that:aux(213) =< I
s(66) =< aux(213)

  with precondition: [K=1,P=1,M+1=B,E+I=Q+1,D>=1,F>=0,G>=1,H>=0,I>=2,J>=0,L>=0,M>=1,N>=0,O>=0,R>=F,E>=G+1,R>=H,A>=I,C>=J,A>=L,C>=N,D>=O] 

* Chain [76]: 20*s(70)+11
  Such that:aux(214) =< I
s(70) =< aux(214)

  with precondition: [K=1,P=1,M+1=B,G+I=Q+1,D>=1,E>=1,F>=0,H>=0,I>=2,J>=0,L>=0,M>=1,N>=0,O>=0,G>=E,R>=F,R>=H,A>=I,C>=J,A>=L,C>=N,D>=O] 


#### Simplifying cost structure of CE 119 

#### Computing cost of phase [85,86,87,88,89,90] 
 * Renamed intermediate variables: 
[ (eq(114,1),s(64))>>s(73)]

#### Simplifying cost structure of CE 114 
 * Renamed intermediate variables: 
[ (it(85),s(73))>>s(74)]
 * Renamed intermediate variables: 
[ (eq(117,1),aux(213))>>s(75), (eq(117,1),s(66))>>s(76)]

#### Simplifying cost structure of CE 117 
 * Renamed intermediate variables: 
[ (it(86),s(75))>>s(77), (it(86),s(76))>>s(78)]
 * Renamed intermediate variables: 
[ (eq(118,1),aux(214))>>s(79), (eq(118,1),s(70))>>s(80)]

#### Simplifying cost structure of CE 118 
 * Renamed intermediate variables: 
[ (it(87),s(79))>>s(81), (it(87),s(80))>>s(82)]
 * Renamed intermediate variables: 
[ (eq(112,1),s(62))>>s(83)]

#### Simplifying cost structure of CE 112 

#### Simplifying cost structure of CE 115 
 * Renamed intermediate variables: 
[ (it(88),s(83))>>s(84)]

#### Simplifying cost structure of CE 116 

#### Simplifying cost structure of CE 111 
 * Renamed intermediate variables: 
[ (eq(113,1),s(63))>>s(85)]

#### Simplifying cost structure of CE 113 
 * Renamed intermediate variables: 
[ (it(90),s(85))>>s(86)]

#### Cost of loops [85,86,87,88,89,90] 

 * loop 85:process_main4(A,B,C,D,E,F,G,H,I) -> [process_main4(A',B',C',D',E',F',G',H',I')] 
8*s(74)+20
  Such that:s(74) =< E

 * loop 86:process_main4(A,B,C,D,E,F,G,H,I) -> [process_main4(A',B',C',D',E',F',G',H',I')] 
20*s(78)+20
  Such that:s(77) =< A
s(78) =< s(77)

 * loop 87:process_main4(A,B,C,D,E,F,G,H,I) -> [process_main4(A',B',C',D',E',F',G',H',I')] 
20*s(82)+20
  Such that:s(81) =< A
s(82) =< s(81)

 * loop 88:process_main4(A,B,C,D,E,F,G,H,I) -> [process_main4(A',B',C',D',E',F',G',H',I')] 
8*s(84)+21
  Such that:s(84) =< G

 * loop 89:process_main4(A,B,C,D,E,F,G,H,I) -> [process_main4(A',B',C',D',E',F',G',H',I')] 
20
 * loop 90:process_main4(A,B,C,D,E,F,G,H,I) -> [process_main4(A',B',C',D',E',F',G',H',I')] 
8*s(86)+21
  Such that:s(86) =< G

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 85: [it(85)=<1,s(87)=<E]
* Psum in Loop 86: [it(86)=<1,s(89)=<A]
* Psum in Loop 87: [it(87)=<1,s(91)=<A]
* Psum in Loop 88: [it(88)=<1,s(92)=<G]
* Psum in Loop 89: [it(89)=<1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G]

###### Computing sum for it(85)=<1  in Loop 85 
   - Applying inductive sum strategy 
     - head Candidate: B-1 
       - Loop 86 is collaborative and bounds [it(86)] 
       - Loop 87 is collaborative and bounds [it(87)] 
       - Loop 88 is collaborative and bounds [it(88)] 
       - Loop 89 is collaborative and bounds [it(89)] 
       - Loop 90 is collaborative and bounds [it(90)] 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - Loop 86 is collaborative and bounds [it(86)] 
       - Loop 87 is collaborative and bounds [it(87)] 
       - Loop 88 is collaborative and bounds [it(88)] 
       - Loop 89 is collaborative and bounds [it(89)] 
       - Loop 90 is collaborative and bounds [it(90)] 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(85)+it(86)+it(87)+it(88)+it(89)+it(90)=<B-1,it(85)+it(86)+it(87)+it(88)+it(89)+it(90)=<B-1,it(85)+it(86)+it(87)+it(88)+it(89)+it(90)=<B-B',it(85)+it(86)+it(87)+it(88)+it(89)+it(90)=<B-B'] 

##### Pending set A
* Psum in Loop 85: [s(87)=<E]
* Psum in Loop 86: [it(86)=<1,s(89)=<A]
* Psum in Loop 87: [it(87)=<1,s(91)=<A]
* Psum in Loop 88: [it(88)=<1,s(92)=<G]
* Psum in Loop 89: [it(89)=<1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G]

###### Computing sum for s(87)=<E  in Loop 85 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(215)=<E] 
 * Adding constraints: [s(87)=<it(85)*aux(215)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(215)=<E]
* Psum in Loop 86: [it(86)=<1,s(89)=<A]
* Psum in Loop 87: [it(87)=<1,s(91)=<A]
* Psum in Loop 88: [it(88)=<1,s(92)=<G]
* Psum in Loop 89: [it(89)=<1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G]

###### Computing max_min for aux(215)=<E  
   - Applying max/min strategy 
     - Loop 85  increases the expression by [G-2,E'-2] 
     - Loop 86  increases the expression by [A-1,-G+E'-1] 
     - Loop 87  increases the expression by [E'-1,A+G-2] 
     - Loop 88 does not increase the expression
     - Loop 89  increases the expression by [G-1,E'-1] 
     - Loop 90  increases the expression by [G-1,E'-1] 
 * Adding constraints:[aux(215)=<aux(216)+aux(217)+aux(218)+aux(219)+aux(220)+aux(221),aux(216)=<E] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 85: [aux(217)=<G-2,aux(217)=<E'-2]
* Psum in Loop 86: [it(86)=<1,s(89)=<A,aux(218)=<A-1,aux(218)=< -G+E'-1]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1]

###### Computing sum for aux(217)=<G-2  in Loop 85 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(222)=<G-2] 
 * Adding constraints: [aux(217)=<it(85)*aux(222)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(222)=<G-2]
* Psum in Loop 85: [aux(217)=<E'-2]
* Psum in Loop 86: [it(86)=<1,s(89)=<A,aux(218)=<A-1,aux(218)=< -G+E'-1]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1]

###### Computing max_min for aux(222)=<G-2  
   - Applying max/min strategy 
     - Loop 85 does not increase the expression
     - Loop 86  increases the expression by [G'-1,A+E-2] 
     - Loop 87  increases the expression by [-E+G',A-1] 
     - Loop 88  increases the expression by [E-1,G'-1] 
     - Loop 89 does not increase the expression
     - Loop 90 does not increase the expression
 * Adding constraints:[aux(222)=<aux(223)+aux(224)+aux(225)+aux(226),aux(223)=<G-2] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 85: [aux(217)=<E'-2]
* Psum in Loop 86: [it(86)=<1,s(89)=<A,aux(218)=<A-1,aux(218)=< -G+E'-1,aux(224)=<A+E-2,aux(224)=<G'-1]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G']
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(226)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1]

###### Computing sum for aux(217)=<E'-2  in Loop 85 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(227)=<G-2] 
 * Adding constraints: [aux(217)=<it(85)*aux(227)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(227)=<G-2]
* Psum in Loop 86: [it(86)=<1,s(89)=<A,aux(218)=<A-1,aux(218)=< -G+E'-1,aux(224)=<A+E-2,aux(224)=<G'-1]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G']
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(226)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1]

###### Computing max_min for aux(227)=<G-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(227)=<aux(222)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 86: [it(86)=<1,s(89)=<A,aux(218)=<A-1,aux(218)=< -G+E'-1,aux(224)=<A+E-2,aux(224)=<G'-1]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G']
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(226)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1]

###### Computing sum for it(86)=<1  in Loop 86 
   - Applying inductive sum strategy 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(85)+it(86)+it(87)+it(88)+it(89)+it(90)=<B-1,it(85)+it(86)+it(87)+it(88)+it(89)+it(90)=<B-1,it(85)+it(86)+it(87)+it(88)+it(89)+it(90)=<B-B',it(85)+it(86)+it(87)+it(88)+it(89)+it(90)=<B-B'] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 86: [s(89)=<A,aux(218)=<A-1,aux(218)=< -G+E'-1,aux(224)=<A+E-2,aux(224)=<G'-1]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G']
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(226)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1]

###### Computing sum for s(89)=<A  in Loop 86 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(228)=<A] 
 * Adding constraints: [s(89)=<it(86)*aux(228)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(228)=<A]
* Psum in Loop 86: [aux(218)=<A-1,aux(218)=< -G+E'-1,aux(224)=<A+E-2,aux(224)=<G'-1]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G']
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(226)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1]

###### Computing max_min for aux(228)=<A  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(228)=<A] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 86: [aux(218)=<A-1,aux(218)=< -G+E'-1,aux(224)=<A+E-2,aux(224)=<G'-1]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G']
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(226)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1]

###### Computing sum for aux(218)=<A-1  in Loop 86 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(229)=<A-1] 
 * Adding constraints: [aux(218)=<it(86)*aux(229)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(229)=<A-1]
* Psum in Loop 86: [aux(218)=< -G+E'-1,aux(224)=<A+E-2,aux(224)=<G'-1]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G']
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(226)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1]

###### Computing max_min for aux(229)=<A-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(229)=<aux(228)-1] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 86: [aux(218)=< -G+E'-1,aux(224)=<A+E-2,aux(224)=<G'-1]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G']
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(226)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1]

###### Computing sum for aux(218)=< -G+E'-1  in Loop 86 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(230)=<A+E-G-2] 
 * Adding constraints: [aux(218)=<it(86)*aux(230)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(230)=<A+E-G-2]
* Psum in Loop 86: [aux(224)=<A+E-2,aux(224)=<G'-1]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G']
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(226)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1]

###### Computing max_min for aux(230)=<A+E-G-2  
   - Applying max/min strategy 
     - Loop 85  resets the expression to [A+G-3] 
     - Loop 86  increases the expression by [E'-G'-1,A'+E'-G'-3] 
     - Loop 87  resets the expression to [2*A+G-4] 
     - Loop 88  increases the expression by [E'-G'-1] 
     - Loop 89  resets the expression to [A+G-3] 
     - Loop 90  resets the expression to [A+G-3] 
 * Adding constraints:[aux(230)=<max([aux(231),aux(232),aux(234),aux(236),aux(237)])+aux(233)+aux(235),aux(231)=<A+E-G-2] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(232)=<A+G-3,aux(236)=<A+G-3,aux(237)=<A+G-3,aux(234)=<2*A+G-4]
* Psum in Loop 86: [aux(224)=<A+E-2,aux(233)=<A'+E'-G'-3,aux(233)=<E'-G'-1,aux(224)=<G'-1]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G']
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1]

###### Computing max_min for aux(232)=<A+G-3  
   - Applying max/min strategy 
     - Loop 85 does not increase the expression
     - Loop 86  increases the expression by [G'-1,E+A'-2] 
     - Loop 87  increases the expression by [-E+G',A'-1] 
     - Loop 88  increases the expression by [E-1,G'-1] 
     - Loop 89 does not increase the expression
     - Loop 90 does not increase the expression
 * Adding constraints:[aux(232)=<aux(238)+aux(239)+aux(240)+aux(241),aux(238)=<A+G-3] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(236)=<A+G-3,aux(237)=<A+G-3,aux(234)=<2*A+G-4]
* Psum in Loop 86: [aux(224)=<A+E-2,aux(233)=<A'+E'-G'-3,aux(233)=<E'-G'-1,aux(224)=<G'-1,aux(239)=<E+A'-2,aux(239)=<G'-1]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(240)=<A'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(241)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1]

###### Computing max_min for aux(236)=<A+G-3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(236)=<aux(232)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(237)=<A+G-3,aux(234)=<2*A+G-4]
* Psum in Loop 86: [aux(224)=<A+E-2,aux(233)=<A'+E'-G'-3,aux(233)=<E'-G'-1,aux(224)=<G'-1,aux(239)=<E+A'-2,aux(239)=<G'-1]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(240)=<A'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(241)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1]

###### Computing max_min for aux(237)=<A+G-3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(237)=<aux(232)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(234)=<2*A+G-4]
* Psum in Loop 86: [aux(224)=<A+E-2,aux(233)=<A'+E'-G'-3,aux(233)=<E'-G'-1,aux(224)=<G'-1,aux(239)=<E+A'-2,aux(239)=<G'-1]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(240)=<A'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(241)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1]

###### Computing max_min for aux(234)=<2*A+G-4  
   - Applying max/min strategy 
     - Loop 85 does not increase the expression
     - Loop 86  increases the expression by [G'-1,2*A'+G'-5] 
     - Loop 87  increases the expression by [-E+G',A'-1] 
     - Loop 88  increases the expression by [E-1,G'-1] 
     - Loop 89 does not increase the expression
     - Loop 90 does not increase the expression
 * Adding constraints:[aux(234)=<aux(242)+aux(243)+aux(244)+aux(245),aux(242)=<2*A+G-4] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 86: [aux(224)=<A+E-2,aux(233)=<A'+E'-G'-3,aux(233)=<E'-G'-1,aux(224)=<G'-1,aux(239)=<E+A'-2,aux(243)=<2*A'+G'-5,aux(239)=<G'-1,aux(243)=<G'-1]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1]

###### Computing sum for aux(224)=<A+E-2  in Loop 86 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(246)=<A+E-2] 
 * Adding constraints: [aux(224)=<it(86)*aux(246)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(246)=<A+E-2]
* Psum in Loop 86: [aux(233)=<A'+E'-G'-3,aux(233)=<E'-G'-1,aux(224)=<G'-1,aux(239)=<E+A'-2,aux(243)=<2*A'+G'-5,aux(239)=<G'-1,aux(243)=<G'-1]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1]

###### Computing max_min for aux(246)=<A+E-2  
   - Applying max/min strategy 
     - Loop 85  increases the expression by [G-2,E'-2] 
     - Loop 86  increases the expression by [A'-1,-G+E'-1] 
     - Loop 87  increases the expression by [E'-1,G+A'-2] 
     - Loop 88 does not increase the expression
     - Loop 89  increases the expression by [E'-1,A'+E'-2] 
     - Loop 90  increases the expression by [G-1,E'-1] 
 * Adding constraints:[aux(246)=<aux(247)+aux(248)+aux(249)+aux(250)+aux(251)+aux(252),aux(247)=<A+E-2] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 85: [aux(248)=<G-2,aux(248)=<E'-2]
* Psum in Loop 86: [aux(233)=<A'+E'-G'-3,aux(233)=<E'-G'-1,aux(224)=<G'-1,aux(239)=<E+A'-2,aux(243)=<2*A'+G'-5,aux(239)=<G'-1,aux(243)=<G'-1,aux(249)=< -G+E'-1,aux(249)=<A'-1]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(250)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(251)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(252)=<E'-1]

###### Computing sum for aux(248)=<G-2  in Loop 85 
   - Found a solution using cacheing 
 * Adding constraints: [aux(248)=<aux(253),aux(253)=<it(85)*aux(222)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 85: [aux(248)=<E'-2]
* Psum in Loop 86: [aux(233)=<A'+E'-G'-3,aux(233)=<E'-G'-1,aux(224)=<G'-1,aux(239)=<E+A'-2,aux(243)=<2*A'+G'-5,aux(239)=<G'-1,aux(243)=<G'-1,aux(249)=< -G+E'-1,aux(249)=<A'-1]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(250)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(251)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(252)=<E'-1]

###### Computing sum for aux(248)=<E'-2  in Loop 85 
   - Found a solution using cacheing 
 * Adding constraints: [aux(248)=<aux(254),aux(254)=<it(85)*aux(227)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 86: [aux(233)=<A'+E'-G'-3,aux(233)=<E'-G'-1,aux(224)=<G'-1,aux(239)=<E+A'-2,aux(243)=<2*A'+G'-5,aux(239)=<G'-1,aux(243)=<G'-1,aux(249)=< -G+E'-1,aux(249)=<A'-1]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(250)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(251)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(252)=<E'-1]

###### Computing sum for aux(233)=<A'+E'-G'-3  in Loop 86 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(255)=<2*A+E-5] 
 * Adding constraints: [aux(233)=<it(86)*aux(255)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(255)=<2*A+E-5]
* Psum in Loop 86: [aux(233)=<E'-G'-1,aux(224)=<G'-1,aux(239)=<E+A'-2,aux(243)=<2*A'+G'-5,aux(239)=<G'-1,aux(243)=<G'-1,aux(249)=< -G+E'-1,aux(249)=<A'-1]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(250)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(251)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(252)=<E'-1]

###### Computing max_min for aux(255)=<2*A+E-5  
   - Applying max/min strategy 
     - Loop 85  increases the expression by [G-2,E'-2] 
     - Loop 86  increases the expression by [A'-1,2*A'-3] 
     - Loop 87  increases the expression by [E'-1,2*A'+E'-5] 
     - Loop 88 does not increase the expression
     - Loop 89  increases the expression by [E'-1,2*A'+E'-3] 
     - Loop 90  increases the expression by [G-1,E'-1] 
 * Adding constraints:[aux(255)=<aux(256)+aux(257)+aux(258)+aux(259)+aux(260)+aux(261),aux(256)=<2*A+E-5] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 85: [aux(257)=<G-2,aux(257)=<E'-2]
* Psum in Loop 86: [aux(233)=<E'-G'-1,aux(224)=<G'-1,aux(239)=<E+A'-2,aux(243)=<2*A'+G'-5,aux(239)=<G'-1,aux(243)=<G'-1,aux(249)=< -G+E'-1,aux(249)=<A'-1,aux(258)=<A'-1,aux(258)=<2*A'-3]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(259)=<2*A'+E'-5,aux(250)=<E'-1,aux(259)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(251)=<E'-1,aux(260)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(252)=<E'-1,aux(261)=<E'-1]

###### Computing sum for aux(257)=<G-2  in Loop 85 
   - Found a solution using cacheing 
 * Adding constraints: [aux(257)=<aux(262),aux(262)=<it(85)*aux(222)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 85: [aux(257)=<E'-2]
* Psum in Loop 86: [aux(233)=<E'-G'-1,aux(224)=<G'-1,aux(239)=<E+A'-2,aux(243)=<2*A'+G'-5,aux(239)=<G'-1,aux(243)=<G'-1,aux(249)=< -G+E'-1,aux(249)=<A'-1,aux(258)=<A'-1,aux(258)=<2*A'-3]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(259)=<2*A'+E'-5,aux(250)=<E'-1,aux(259)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(251)=<E'-1,aux(260)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(252)=<E'-1,aux(261)=<E'-1]

###### Computing sum for aux(257)=<E'-2  in Loop 85 
   - Found a solution using cacheing 
 * Adding constraints: [aux(257)=<aux(263),aux(263)=<it(85)*aux(227)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 86: [aux(233)=<E'-G'-1,aux(224)=<G'-1,aux(239)=<E+A'-2,aux(243)=<2*A'+G'-5,aux(239)=<G'-1,aux(243)=<G'-1,aux(249)=< -G+E'-1,aux(249)=<A'-1,aux(258)=<A'-1,aux(258)=<2*A'-3]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(259)=<2*A'+E'-5,aux(250)=<E'-1,aux(259)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(251)=<E'-1,aux(260)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(252)=<E'-1,aux(261)=<E'-1]

###### Computing sum for aux(233)=<E'-G'-1  in Loop 86 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(264)=<A+E-3] 
 * Adding constraints: [aux(233)=<it(86)*aux(264)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(264)=<A+E-3]
* Psum in Loop 86: [aux(224)=<G'-1,aux(239)=<E+A'-2,aux(243)=<2*A'+G'-5,aux(239)=<G'-1,aux(243)=<G'-1,aux(249)=< -G+E'-1,aux(249)=<A'-1,aux(258)=<A'-1,aux(258)=<2*A'-3]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(259)=<2*A'+E'-5,aux(250)=<E'-1,aux(259)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(251)=<E'-1,aux(260)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(252)=<E'-1,aux(261)=<E'-1]

###### Computing max_min for aux(264)=<A+E-3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(264)=<aux(246)-1] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 86: [aux(224)=<G'-1,aux(239)=<E+A'-2,aux(243)=<2*A'+G'-5,aux(239)=<G'-1,aux(243)=<G'-1,aux(249)=< -G+E'-1,aux(249)=<A'-1,aux(258)=<A'-1,aux(258)=<2*A'-3]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(259)=<2*A'+E'-5,aux(250)=<E'-1,aux(259)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(251)=<E'-1,aux(260)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(252)=<E'-1,aux(261)=<E'-1]

###### Computing sum for aux(224)=<G'-1  in Loop 86 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(265)=<A+E-2] 
 * Adding constraints: [aux(224)=<it(86)*aux(265)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(265)=<A+E-2]
* Psum in Loop 86: [aux(239)=<E+A'-2,aux(243)=<2*A'+G'-5,aux(239)=<G'-1,aux(243)=<G'-1,aux(249)=< -G+E'-1,aux(249)=<A'-1,aux(258)=<A'-1,aux(258)=<2*A'-3]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(259)=<2*A'+E'-5,aux(250)=<E'-1,aux(259)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(251)=<E'-1,aux(260)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(252)=<E'-1,aux(261)=<E'-1]

###### Computing max_min for aux(265)=<A+E-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(265)=<aux(246)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 86: [aux(239)=<E+A'-2,aux(243)=<2*A'+G'-5,aux(239)=<G'-1,aux(243)=<G'-1,aux(249)=< -G+E'-1,aux(249)=<A'-1,aux(258)=<A'-1,aux(258)=<2*A'-3]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(259)=<2*A'+E'-5,aux(250)=<E'-1,aux(259)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(251)=<E'-1,aux(260)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(252)=<E'-1,aux(261)=<E'-1]

###### Computing sum for aux(239)=<E+A'-2  in Loop 86 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(266)=<A+E-2] 
 * Adding constraints: [aux(239)=<it(86)*aux(266)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(266)=<A+E-2]
* Psum in Loop 86: [aux(243)=<2*A'+G'-5,aux(239)=<G'-1,aux(243)=<G'-1,aux(249)=< -G+E'-1,aux(249)=<A'-1,aux(258)=<A'-1,aux(258)=<2*A'-3]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(259)=<2*A'+E'-5,aux(250)=<E'-1,aux(259)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(251)=<E'-1,aux(260)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(252)=<E'-1,aux(261)=<E'-1]

###### Computing max_min for aux(266)=<A+E-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(266)=<aux(246)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 86: [aux(243)=<2*A'+G'-5,aux(239)=<G'-1,aux(243)=<G'-1,aux(249)=< -G+E'-1,aux(249)=<A'-1,aux(258)=<A'-1,aux(258)=<2*A'-3]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(259)=<2*A'+E'-5,aux(250)=<E'-1,aux(259)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(251)=<E'-1,aux(260)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(252)=<E'-1,aux(261)=<E'-1]

###### Computing sum for aux(243)=<2*A'+G'-5  in Loop 86 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(267)=<3*A+E-6] 
 * Adding constraints: [aux(243)=<it(86)*aux(267)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(267)=<3*A+E-6]
* Psum in Loop 86: [aux(239)=<G'-1,aux(243)=<G'-1,aux(249)=< -G+E'-1,aux(249)=<A'-1,aux(258)=<A'-1,aux(258)=<2*A'-3]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(259)=<2*A'+E'-5,aux(250)=<E'-1,aux(259)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(251)=<E'-1,aux(260)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(252)=<E'-1,aux(261)=<E'-1]

###### Computing max_min for aux(267)=<3*A+E-6  
   - Applying max/min strategy 
     - Loop 85  increases the expression by [G-2,E'-2] 
     - Loop 86  increases the expression by [A'-1,3*A'-5] 
     - Loop 87  increases the expression by [E'-1,3*A'+E'-7] 
     - Loop 88 does not increase the expression
     - Loop 89  increases the expression by [E'-1,3*A'+E'-4] 
     - Loop 90  increases the expression by [G-1,E'-1] 
 * Adding constraints:[aux(267)=<aux(268)+aux(269)+aux(270)+aux(271)+aux(272)+aux(273),aux(268)=<3*A+E-6] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 85: [aux(269)=<G-2,aux(269)=<E'-2]
* Psum in Loop 86: [aux(239)=<G'-1,aux(243)=<G'-1,aux(249)=< -G+E'-1,aux(249)=<A'-1,aux(258)=<A'-1,aux(258)=<2*A'-3,aux(270)=<A'-1,aux(270)=<3*A'-5]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(259)=<2*A'+E'-5,aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(252)=<E'-1,aux(261)=<E'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing sum for aux(269)=<G-2  in Loop 85 
   - Found a solution using cacheing 
 * Adding constraints: [aux(269)=<aux(274),aux(274)=<it(85)*aux(222)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 85: [aux(269)=<E'-2]
* Psum in Loop 86: [aux(239)=<G'-1,aux(243)=<G'-1,aux(249)=< -G+E'-1,aux(249)=<A'-1,aux(258)=<A'-1,aux(258)=<2*A'-3,aux(270)=<A'-1,aux(270)=<3*A'-5]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(259)=<2*A'+E'-5,aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(252)=<E'-1,aux(261)=<E'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing sum for aux(269)=<E'-2  in Loop 85 
   - Found a solution using cacheing 
 * Adding constraints: [aux(269)=<aux(275),aux(275)=<it(85)*aux(227)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 86: [aux(239)=<G'-1,aux(243)=<G'-1,aux(249)=< -G+E'-1,aux(249)=<A'-1,aux(258)=<A'-1,aux(258)=<2*A'-3,aux(270)=<A'-1,aux(270)=<3*A'-5]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(259)=<2*A'+E'-5,aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(252)=<E'-1,aux(261)=<E'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing sum for aux(239)=<G'-1  in Loop 86 
   - Found a solution using cacheing 
 * Adding constraints: [aux(239)=<aux(276),aux(276)=<it(86)*aux(265)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 86: [aux(243)=<G'-1,aux(249)=< -G+E'-1,aux(249)=<A'-1,aux(258)=<A'-1,aux(258)=<2*A'-3,aux(270)=<A'-1,aux(270)=<3*A'-5]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(259)=<2*A'+E'-5,aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(252)=<E'-1,aux(261)=<E'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing sum for aux(243)=<G'-1  in Loop 86 
   - Found a solution using cacheing 
 * Adding constraints: [aux(243)=<aux(277),aux(277)=<it(86)*aux(265)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 86: [aux(249)=< -G+E'-1,aux(249)=<A'-1,aux(258)=<A'-1,aux(258)=<2*A'-3,aux(270)=<A'-1,aux(270)=<3*A'-5]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(259)=<2*A'+E'-5,aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(252)=<E'-1,aux(261)=<E'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing sum for aux(249)=< -G+E'-1  in Loop 86 
   - Found a solution using cacheing 
 * Adding constraints: [aux(249)=<aux(278),aux(278)=<it(86)*aux(230)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 86: [aux(249)=<A'-1,aux(258)=<A'-1,aux(258)=<2*A'-3,aux(270)=<A'-1,aux(270)=<3*A'-5]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(259)=<2*A'+E'-5,aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(252)=<E'-1,aux(261)=<E'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing sum for aux(249)=<A'-1  in Loop 86 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(279)=<A-1] 
 * Adding constraints: [aux(249)=<it(86)*aux(279)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(279)=<A-1]
* Psum in Loop 86: [aux(258)=<A'-1,aux(258)=<2*A'-3,aux(270)=<A'-1,aux(270)=<3*A'-5]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(259)=<2*A'+E'-5,aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(252)=<E'-1,aux(261)=<E'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing max_min for aux(279)=<A-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(279)=<aux(228)-1] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 86: [aux(258)=<A'-1,aux(258)=<2*A'-3,aux(270)=<A'-1,aux(270)=<3*A'-5]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(259)=<2*A'+E'-5,aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(252)=<E'-1,aux(261)=<E'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing sum for aux(258)=<A'-1  in Loop 86 
   - Found a solution using cacheing 
 * Adding constraints: [aux(258)=<aux(280),aux(280)=<it(86)*aux(279)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 86: [aux(258)=<2*A'-3,aux(270)=<A'-1,aux(270)=<3*A'-5]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(259)=<2*A'+E'-5,aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(252)=<E'-1,aux(261)=<E'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing sum for aux(258)=<2*A'-3  in Loop 86 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(281)=<2*A-3] 
 * Adding constraints: [aux(258)=<it(86)*aux(281)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(281)=<2*A-3]
* Psum in Loop 86: [aux(270)=<A'-1,aux(270)=<3*A'-5]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(259)=<2*A'+E'-5,aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(252)=<E'-1,aux(261)=<E'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing max_min for aux(281)=<2*A-3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(281)=<aux(228)*2-3] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 86: [aux(270)=<A'-1,aux(270)=<3*A'-5]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(259)=<2*A'+E'-5,aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(252)=<E'-1,aux(261)=<E'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing sum for aux(270)=<A'-1  in Loop 86 
   - Found a solution using cacheing 
 * Adding constraints: [aux(270)=<aux(282),aux(282)=<it(86)*aux(279)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 86: [aux(270)=<3*A'-5]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(259)=<2*A'+E'-5,aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(252)=<E'-1,aux(261)=<E'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing sum for aux(270)=<3*A'-5  in Loop 86 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(283)=<3*A-5] 
 * Adding constraints: [aux(270)=<it(86)*aux(283)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(283)=<3*A-5]
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(259)=<2*A'+E'-5,aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(252)=<E'-1,aux(261)=<E'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing max_min for aux(283)=<3*A-5  
   - Found a solution using cacheing 
 * Adding constraints:[aux(283)=<aux(228)*3-5] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 87: [it(87)=<1,s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(259)=<2*A'+E'-5,aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(252)=<E'-1,aux(261)=<E'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing sum for it(87)=<1  in Loop 87 
   - Applying inductive sum strategy 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(85)+it(86)+it(87)+it(88)+it(89)+it(90)=<B-1,it(85)+it(86)+it(87)+it(88)+it(89)+it(90)=<B-1,it(85)+it(86)+it(87)+it(88)+it(89)+it(90)=<B-B',it(85)+it(86)+it(87)+it(88)+it(89)+it(90)=<B-B'] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 87: [s(91)=<A,aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(259)=<2*A'+E'-5,aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(252)=<E'-1,aux(261)=<E'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing sum for s(91)=<A  in Loop 87 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(284)=<A] 
 * Adding constraints: [s(91)=<it(87)*aux(284)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(284)=<A]
* Psum in Loop 87: [aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(259)=<2*A'+E'-5,aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(252)=<E'-1,aux(261)=<E'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing max_min for aux(284)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(284)=<aux(228)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 87: [aux(219)=<A+G-2,aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(259)=<2*A'+E'-5,aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(252)=<E'-1,aux(261)=<E'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing sum for aux(219)=<A+G-2  in Loop 87 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(285)=<A+G-2] 
 * Adding constraints: [aux(219)=<it(87)*aux(285)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(285)=<A+G-2]
* Psum in Loop 87: [aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(259)=<2*A'+E'-5,aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(252)=<E'-1,aux(261)=<E'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing max_min for aux(285)=<A+G-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(285)=<aux(232)+1] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 87: [aux(219)=<E'-1,aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(259)=<2*A'+E'-5,aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(252)=<E'-1,aux(261)=<E'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing sum for aux(219)=<E'-1  in Loop 87 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(286)=<A+G-2] 
 * Adding constraints: [aux(219)=<it(87)*aux(286)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(286)=<A+G-2]
* Psum in Loop 87: [aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(259)=<2*A'+E'-5,aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(252)=<E'-1,aux(261)=<E'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing max_min for aux(286)=<A+G-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(286)=<aux(232)+1] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 87: [aux(225)=<A-1,aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(259)=<2*A'+E'-5,aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(252)=<E'-1,aux(261)=<E'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing sum for aux(225)=<A-1  in Loop 87 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(287)=<A-1] 
 * Adding constraints: [aux(225)=<it(87)*aux(287)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(287)=<A-1]
* Psum in Loop 87: [aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(259)=<2*A'+E'-5,aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(252)=<E'-1,aux(261)=<E'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing max_min for aux(287)=<A-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(287)=<aux(228)-1] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 87: [aux(225)=< -E+G',aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(259)=<2*A'+E'-5,aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(252)=<E'-1,aux(261)=<E'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing sum for aux(225)=< -E+G'  in Loop 87 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(288)=<A-E+G-1] 
 * Adding constraints: [aux(225)=<it(87)*aux(288)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(288)=<A-E+G-1]
* Psum in Loop 87: [aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(259)=<2*A'+E'-5,aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(252)=<E'-1,aux(261)=<E'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing max_min for aux(288)=<A-E+G-1  
   - Applying max/min strategy 
     - Loop 85  resets the expression to [A+G-2] 
     - Loop 86  resets the expression to [2*A+E-3] 
     - Loop 87  increases the expression by [-E'+G',A'-E'+G'-2] 
     - Loop 88  resets the expression to [A+E-2] 
     - Loop 89  increases the expression by [-E'+G',A'-E'+G'-1] 
     - Loop 90  increases the expression by [-E'+G',G'-1] 
 * Adding constraints:[aux(288)=<max([aux(289),aux(290),aux(291),aux(293)])+aux(292)+aux(294)+aux(295),aux(289)=<A-E+G-1] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(293)=<A+E-2,aux(290)=<A+G-2,aux(291)=<2*A+E-3]
* Psum in Loop 87: [aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(292)=<A'-E'+G'-2,aux(259)=<2*A'+E'-5,aux(292)=< -E'+G',aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing max_min for aux(293)=<A+E-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(293)=<aux(246)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(290)=<A+G-2,aux(291)=<2*A+E-3]
* Psum in Loop 87: [aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(292)=<A'-E'+G'-2,aux(259)=<2*A'+E'-5,aux(292)=< -E'+G',aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing max_min for aux(290)=<A+G-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(290)=<aux(232)+1] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(291)=<2*A+E-3]
* Psum in Loop 87: [aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(292)=<A'-E'+G'-2,aux(259)=<2*A'+E'-5,aux(292)=< -E'+G',aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing max_min for aux(291)=<2*A+E-3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(291)=<aux(255)+2] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 87: [aux(240)=< -E+G',aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(292)=<A'-E'+G'-2,aux(259)=<2*A'+E'-5,aux(292)=< -E'+G',aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing sum for aux(240)=< -E+G'  in Loop 87 
   - Found a solution using cacheing 
 * Adding constraints: [aux(240)=<aux(296),aux(296)=<it(87)*aux(288)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 87: [aux(244)=< -E+G',aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(292)=<A'-E'+G'-2,aux(259)=<2*A'+E'-5,aux(292)=< -E'+G',aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing sum for aux(244)=< -E+G'  in Loop 87 
   - Found a solution using cacheing 
 * Adding constraints: [aux(244)=<aux(297),aux(297)=<it(87)*aux(288)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 87: [aux(240)=<A'-1,aux(244)=<A'-1,aux(250)=<G+A'-2,aux(292)=<A'-E'+G'-2,aux(259)=<2*A'+E'-5,aux(292)=< -E'+G',aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing sum for aux(240)=<A'-1  in Loop 87 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(298)=<A-1] 
 * Adding constraints: [aux(240)=<it(87)*aux(298)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(298)=<A-1]
* Psum in Loop 87: [aux(244)=<A'-1,aux(250)=<G+A'-2,aux(292)=<A'-E'+G'-2,aux(259)=<2*A'+E'-5,aux(292)=< -E'+G',aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing max_min for aux(298)=<A-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(298)=<aux(228)-1] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 87: [aux(244)=<A'-1,aux(250)=<G+A'-2,aux(292)=<A'-E'+G'-2,aux(259)=<2*A'+E'-5,aux(292)=< -E'+G',aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing sum for aux(244)=<A'-1  in Loop 87 
   - Found a solution using cacheing 
 * Adding constraints: [aux(244)=<aux(299),aux(299)=<it(87)*aux(298)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 87: [aux(250)=<G+A'-2,aux(292)=<A'-E'+G'-2,aux(259)=<2*A'+E'-5,aux(292)=< -E'+G',aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing sum for aux(250)=<G+A'-2  in Loop 87 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(300)=<A+G-2] 
 * Adding constraints: [aux(250)=<it(87)*aux(300)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(300)=<A+G-2]
* Psum in Loop 87: [aux(292)=<A'-E'+G'-2,aux(259)=<2*A'+E'-5,aux(292)=< -E'+G',aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing max_min for aux(300)=<A+G-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(300)=<aux(232)+1] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 87: [aux(292)=<A'-E'+G'-2,aux(259)=<2*A'+E'-5,aux(292)=< -E'+G',aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing sum for aux(292)=<A'-E'+G'-2  in Loop 87 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(301)=<2*A+G-4] 
 * Adding constraints: [aux(292)=<it(87)*aux(301)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(301)=<2*A+G-4]
* Psum in Loop 87: [aux(259)=<2*A'+E'-5,aux(292)=< -E'+G',aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing max_min for aux(301)=<2*A+G-4  
   - Found a solution using cacheing 
 * Adding constraints:[aux(301)=<aux(234)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 87: [aux(259)=<2*A'+E'-5,aux(292)=< -E'+G',aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing sum for aux(259)=<2*A'+E'-5  in Loop 87 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(302)=<3*A+G-6] 
 * Adding constraints: [aux(259)=<it(87)*aux(302)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(302)=<3*A+G-6]
* Psum in Loop 87: [aux(292)=< -E'+G',aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing max_min for aux(302)=<3*A+G-6  
   - Applying max/min strategy 
     - Loop 85 does not increase the expression
     - Loop 86  increases the expression by [G'-1,3*A'+G'-7] 
     - Loop 87  increases the expression by [-E+G',A'-1] 
     - Loop 88  increases the expression by [E-1,G'-1] 
     - Loop 89 does not increase the expression
     - Loop 90 does not increase the expression
 * Adding constraints:[aux(302)=<aux(303)+aux(304)+aux(305)+aux(306),aux(303)=<3*A+G-6] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 86: [aux(304)=<3*A'+G'-7,aux(304)=<G'-1]
* Psum in Loop 87: [aux(292)=< -E'+G',aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1,aux(305)=< -E+G',aux(305)=<A'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing sum for aux(304)=<3*A'+G'-7  in Loop 86 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(307)=<4*A+E-8] 
 * Adding constraints: [aux(304)=<it(86)*aux(307)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(307)=<4*A+E-8]
* Psum in Loop 86: [aux(304)=<G'-1]
* Psum in Loop 87: [aux(292)=< -E'+G',aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1,aux(305)=< -E+G',aux(305)=<A'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1]

###### Computing max_min for aux(307)=<4*A+E-8  
   - Applying max/min strategy 
     - Loop 85  increases the expression by [G-2,E'-2] 
     - Loop 86  increases the expression by [A'-1,4*A'-7] 
     - Loop 87  increases the expression by [E'-1,4*A'+E'-9] 
     - Loop 88 does not increase the expression
     - Loop 89  increases the expression by [E'-1,4*A'+E'-5] 
     - Loop 90  increases the expression by [G-1,E'-1] 
 * Adding constraints:[aux(307)=<aux(308)+aux(309)+aux(310)+aux(311)+aux(312)+aux(313),aux(308)=<4*A+E-8] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 85: [aux(309)=<G-2,aux(309)=<E'-2]
* Psum in Loop 86: [aux(304)=<G'-1,aux(310)=<A'-1,aux(310)=<4*A'-7]
* Psum in Loop 87: [aux(292)=< -E'+G',aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1,aux(305)=< -E+G',aux(305)=<A'-1,aux(311)=<4*A'+E'-9,aux(311)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1]

###### Computing sum for aux(309)=<G-2  in Loop 85 
   - Found a solution using cacheing 
 * Adding constraints: [aux(309)=<aux(314),aux(314)=<it(85)*aux(222)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 85: [aux(309)=<E'-2]
* Psum in Loop 86: [aux(304)=<G'-1,aux(310)=<A'-1,aux(310)=<4*A'-7]
* Psum in Loop 87: [aux(292)=< -E'+G',aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1,aux(305)=< -E+G',aux(305)=<A'-1,aux(311)=<4*A'+E'-9,aux(311)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1]

###### Computing sum for aux(309)=<E'-2  in Loop 85 
   - Found a solution using cacheing 
 * Adding constraints: [aux(309)=<aux(315),aux(315)=<it(85)*aux(227)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 86: [aux(304)=<G'-1,aux(310)=<A'-1,aux(310)=<4*A'-7]
* Psum in Loop 87: [aux(292)=< -E'+G',aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1,aux(305)=< -E+G',aux(305)=<A'-1,aux(311)=<4*A'+E'-9,aux(311)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1]

###### Computing sum for aux(304)=<G'-1  in Loop 86 
   - Found a solution using cacheing 
 * Adding constraints: [aux(304)=<aux(316),aux(316)=<it(86)*aux(265)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 86: [aux(310)=<A'-1,aux(310)=<4*A'-7]
* Psum in Loop 87: [aux(292)=< -E'+G',aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1,aux(305)=< -E+G',aux(305)=<A'-1,aux(311)=<4*A'+E'-9,aux(311)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1]

###### Computing sum for aux(310)=<A'-1  in Loop 86 
   - Found a solution using cacheing 
 * Adding constraints: [aux(310)=<aux(317),aux(317)=<it(86)*aux(279)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 86: [aux(310)=<4*A'-7]
* Psum in Loop 87: [aux(292)=< -E'+G',aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1,aux(305)=< -E+G',aux(305)=<A'-1,aux(311)=<4*A'+E'-9,aux(311)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1]

###### Computing sum for aux(310)=<4*A'-7  in Loop 86 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(318)=<4*A-7] 
 * Adding constraints: [aux(310)=<it(86)*aux(318)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(318)=<4*A-7]
* Psum in Loop 87: [aux(292)=< -E'+G',aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1,aux(305)=< -E+G',aux(305)=<A'-1,aux(311)=<4*A'+E'-9,aux(311)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1]

###### Computing max_min for aux(318)=<4*A-7  
   - Found a solution using cacheing 
 * Adding constraints:[aux(318)=<aux(228)*4-7] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 87: [aux(292)=< -E'+G',aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1,aux(305)=< -E+G',aux(305)=<A'-1,aux(311)=<4*A'+E'-9,aux(311)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1]

###### Computing sum for aux(292)=< -E'+G'  in Loop 87 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(319)=<A+G-2] 
 * Adding constraints: [aux(292)=<it(87)*aux(319)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(319)=<A+G-2]
* Psum in Loop 87: [aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1,aux(305)=< -E+G',aux(305)=<A'-1,aux(311)=<4*A'+E'-9,aux(311)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1]

###### Computing max_min for aux(319)=<A+G-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(319)=<aux(232)+1] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 87: [aux(250)=<E'-1,aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1,aux(305)=< -E+G',aux(305)=<A'-1,aux(311)=<4*A'+E'-9,aux(311)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1]

###### Computing sum for aux(250)=<E'-1  in Loop 87 
   - Found a solution using cacheing 
 * Adding constraints: [aux(250)=<aux(320),aux(320)=<it(87)*aux(286)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 87: [aux(259)=<E'-1,aux(271)=<3*A'+E'-7,aux(271)=<E'-1,aux(305)=< -E+G',aux(305)=<A'-1,aux(311)=<4*A'+E'-9,aux(311)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1]

###### Computing sum for aux(259)=<E'-1  in Loop 87 
   - Found a solution using cacheing 
 * Adding constraints: [aux(259)=<aux(321),aux(321)=<it(87)*aux(286)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 87: [aux(271)=<3*A'+E'-7,aux(271)=<E'-1,aux(305)=< -E+G',aux(305)=<A'-1,aux(311)=<4*A'+E'-9,aux(311)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1]

###### Computing sum for aux(271)=<3*A'+E'-7  in Loop 87 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(322)=<4*A+G-8] 
 * Adding constraints: [aux(271)=<it(87)*aux(322)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(322)=<4*A+G-8]
* Psum in Loop 87: [aux(271)=<E'-1,aux(305)=< -E+G',aux(305)=<A'-1,aux(311)=<4*A'+E'-9,aux(311)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1]

###### Computing max_min for aux(322)=<4*A+G-8  
   - Applying max/min strategy 
     - Loop 85 does not increase the expression
     - Loop 86  increases the expression by [G'-1,4*A'+G'-9] 
     - Loop 87  increases the expression by [-E+G',A'-1] 
     - Loop 88  increases the expression by [E-1,G'-1] 
     - Loop 89 does not increase the expression
     - Loop 90 does not increase the expression
 * Adding constraints:[aux(322)=<aux(323)+aux(324)+aux(325)+aux(326),aux(323)=<4*A+G-8] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 86: [aux(324)=<4*A'+G'-9,aux(324)=<G'-1]
* Psum in Loop 87: [aux(271)=<E'-1,aux(305)=< -E+G',aux(305)=<A'-1,aux(325)=< -E+G',aux(325)=<A'-1,aux(311)=<4*A'+E'-9,aux(311)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1]

###### Computing sum for aux(324)=<4*A'+G'-9  in Loop 86 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(327)=<5*A+E-10] 
 * Adding constraints: [aux(324)=<it(86)*aux(327)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(327)=<5*A+E-10]
* Psum in Loop 86: [aux(324)=<G'-1]
* Psum in Loop 87: [aux(271)=<E'-1,aux(305)=< -E+G',aux(305)=<A'-1,aux(325)=< -E+G',aux(325)=<A'-1,aux(311)=<4*A'+E'-9,aux(311)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1]

###### Computing max_min for aux(327)=<5*A+E-10  
   - Applying max/min strategy 
     - Loop 85  increases the expression by [G-2,E'-2] 
     - Loop 86  increases the expression by [A'-1,5*A'-9] 
     - Loop 87  increases the expression by [E'-1,5*A'+E'-11] 
     - Loop 88 does not increase the expression
     - Loop 89  increases the expression by [E'-1,5*A'+E'-6] 
     - Loop 90  increases the expression by [G-1,E'-1] 
 * Adding constraints:[aux(327)=<aux(328)+aux(329)+aux(330)+aux(331)+aux(332)+aux(333),aux(328)=<5*A+E-10] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 85: [aux(329)=<G-2,aux(329)=<E'-2]
* Psum in Loop 86: [aux(324)=<G'-1,aux(330)=<A'-1,aux(330)=<5*A'-9]
* Psum in Loop 87: [aux(271)=<E'-1,aux(305)=< -E+G',aux(305)=<A'-1,aux(325)=< -E+G',aux(325)=<A'-1,aux(311)=<4*A'+E'-9,aux(311)=<E'-1,aux(331)=<5*A'+E'-11,aux(331)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(329)=<G-2  in Loop 85 
   - Found a solution using cacheing 
 * Adding constraints: [aux(329)=<aux(334),aux(334)=<it(85)*aux(222)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 85: [aux(329)=<E'-2]
* Psum in Loop 86: [aux(324)=<G'-1,aux(330)=<A'-1,aux(330)=<5*A'-9]
* Psum in Loop 87: [aux(271)=<E'-1,aux(305)=< -E+G',aux(305)=<A'-1,aux(325)=< -E+G',aux(325)=<A'-1,aux(311)=<4*A'+E'-9,aux(311)=<E'-1,aux(331)=<5*A'+E'-11,aux(331)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(329)=<E'-2  in Loop 85 
   - Found a solution using cacheing 
 * Adding constraints: [aux(329)=<aux(335),aux(335)=<it(85)*aux(227)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 86: [aux(324)=<G'-1,aux(330)=<A'-1,aux(330)=<5*A'-9]
* Psum in Loop 87: [aux(271)=<E'-1,aux(305)=< -E+G',aux(305)=<A'-1,aux(325)=< -E+G',aux(325)=<A'-1,aux(311)=<4*A'+E'-9,aux(311)=<E'-1,aux(331)=<5*A'+E'-11,aux(331)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(324)=<G'-1  in Loop 86 
   - Found a solution using cacheing 
 * Adding constraints: [aux(324)=<aux(336),aux(336)=<it(86)*aux(265)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 86: [aux(330)=<A'-1,aux(330)=<5*A'-9]
* Psum in Loop 87: [aux(271)=<E'-1,aux(305)=< -E+G',aux(305)=<A'-1,aux(325)=< -E+G',aux(325)=<A'-1,aux(311)=<4*A'+E'-9,aux(311)=<E'-1,aux(331)=<5*A'+E'-11,aux(331)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(330)=<A'-1  in Loop 86 
   - Found a solution using cacheing 
 * Adding constraints: [aux(330)=<aux(337),aux(337)=<it(86)*aux(279)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 86: [aux(330)=<5*A'-9]
* Psum in Loop 87: [aux(271)=<E'-1,aux(305)=< -E+G',aux(305)=<A'-1,aux(325)=< -E+G',aux(325)=<A'-1,aux(311)=<4*A'+E'-9,aux(311)=<E'-1,aux(331)=<5*A'+E'-11,aux(331)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(330)=<5*A'-9  in Loop 86 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(338)=<5*A-9] 
 * Adding constraints: [aux(330)=<it(86)*aux(338)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(338)=<5*A-9]
* Psum in Loop 87: [aux(271)=<E'-1,aux(305)=< -E+G',aux(305)=<A'-1,aux(325)=< -E+G',aux(325)=<A'-1,aux(311)=<4*A'+E'-9,aux(311)=<E'-1,aux(331)=<5*A'+E'-11,aux(331)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing max_min for aux(338)=<5*A-9  
   - Found a solution using cacheing 
 * Adding constraints:[aux(338)=<aux(228)*5-9] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 87: [aux(271)=<E'-1,aux(305)=< -E+G',aux(305)=<A'-1,aux(325)=< -E+G',aux(325)=<A'-1,aux(311)=<4*A'+E'-9,aux(311)=<E'-1,aux(331)=<5*A'+E'-11,aux(331)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(271)=<E'-1  in Loop 87 
   - Found a solution using cacheing 
 * Adding constraints: [aux(271)=<aux(339),aux(339)=<it(87)*aux(286)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 87: [aux(305)=< -E+G',aux(305)=<A'-1,aux(325)=< -E+G',aux(325)=<A'-1,aux(311)=<4*A'+E'-9,aux(311)=<E'-1,aux(331)=<5*A'+E'-11,aux(331)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(305)=< -E+G'  in Loop 87 
   - Found a solution using cacheing 
 * Adding constraints: [aux(305)=<aux(340),aux(340)=<it(87)*aux(288)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 87: [aux(305)=<A'-1,aux(325)=< -E+G',aux(325)=<A'-1,aux(311)=<4*A'+E'-9,aux(311)=<E'-1,aux(331)=<5*A'+E'-11,aux(331)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(305)=<A'-1  in Loop 87 
   - Found a solution using cacheing 
 * Adding constraints: [aux(305)=<aux(341),aux(341)=<it(87)*aux(298)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 87: [aux(325)=< -E+G',aux(325)=<A'-1,aux(311)=<4*A'+E'-9,aux(311)=<E'-1,aux(331)=<5*A'+E'-11,aux(331)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(325)=< -E+G'  in Loop 87 
   - Found a solution using cacheing 
 * Adding constraints: [aux(325)=<aux(342),aux(342)=<it(87)*aux(288)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 87: [aux(325)=<A'-1,aux(311)=<4*A'+E'-9,aux(311)=<E'-1,aux(331)=<5*A'+E'-11,aux(331)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(325)=<A'-1  in Loop 87 
   - Found a solution using cacheing 
 * Adding constraints: [aux(325)=<aux(343),aux(343)=<it(87)*aux(298)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 87: [aux(311)=<4*A'+E'-9,aux(311)=<E'-1,aux(331)=<5*A'+E'-11,aux(331)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(311)=<4*A'+E'-9  in Loop 87 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(344)=<5*A+G-10] 
 * Adding constraints: [aux(311)=<it(87)*aux(344)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(344)=<5*A+G-10]
* Psum in Loop 87: [aux(311)=<E'-1,aux(331)=<5*A'+E'-11,aux(331)=<E'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing max_min for aux(344)=<5*A+G-10  
   - Applying max/min strategy 
     - Loop 85 does not increase the expression
     - Loop 86  increases the expression by [G'-1,5*A'+G'-11] 
     - Loop 87  increases the expression by [-E+G',A'-1] 
     - Loop 88  increases the expression by [E-1,G'-1] 
     - Loop 89 does not increase the expression
     - Loop 90 does not increase the expression
 * Adding constraints:[aux(344)=<aux(345)+aux(346)+aux(347)+aux(348),aux(345)=<5*A+G-10] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 86: [aux(346)=<5*A'+G'-11,aux(346)=<G'-1]
* Psum in Loop 87: [aux(311)=<E'-1,aux(331)=<5*A'+E'-11,aux(331)=<E'-1,aux(347)=< -E+G',aux(347)=<A'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1,aux(348)=<E-1,aux(348)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(346)=<5*A'+G'-11  in Loop 86 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(349)=<6*A+E-12] 
 * Adding constraints: [aux(346)=<it(86)*aux(349)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(349)=<6*A+E-12]
* Psum in Loop 86: [aux(346)=<G'-1]
* Psum in Loop 87: [aux(311)=<E'-1,aux(331)=<5*A'+E'-11,aux(331)=<E'-1,aux(347)=< -E+G',aux(347)=<A'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1,aux(348)=<E-1,aux(348)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing max_min for aux(349)=<6*A+E-12  
   - Applying max/min strategy 
     - Loop 85  increases the expression by [G-2,E'-2] 
     - Loop 86  increases the expression by [A'-1,6*A'-11] 
     - Loop 87  increases the expression by [E'-1,6*A'+E'-13] 
     - Loop 88 does not increase the expression
     - Loop 89  increases the expression by [E'-1,6*A'+E'-7] 
     - Loop 90  increases the expression by [G-1,E'-1] 
 * Adding constraints:[aux(349)=<aux(350)+aux(351)+aux(352)+aux(353)+aux(354)+aux(355),aux(350)=<6*A+E-12] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 86: [aux(346)=<G'-1]
* Psum in Loop 87: [aux(311)=<E'-1,aux(331)=<5*A'+E'-11,aux(331)=<E'-1,aux(347)=< -E+G',aux(347)=<A'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1,aux(348)=<E-1,aux(348)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(346)=<G'-1  in Loop 86 
   - Found a solution using cacheing 
 * Adding constraints: [aux(346)=<aux(356),aux(356)=<it(86)*aux(265)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 87: [aux(311)=<E'-1,aux(331)=<5*A'+E'-11,aux(331)=<E'-1,aux(347)=< -E+G',aux(347)=<A'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1,aux(348)=<E-1,aux(348)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(311)=<E'-1  in Loop 87 
   - Found a solution using cacheing 
 * Adding constraints: [aux(311)=<aux(357),aux(357)=<it(87)*aux(286)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 87: [aux(331)=<5*A'+E'-11,aux(331)=<E'-1,aux(347)=< -E+G',aux(347)=<A'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1,aux(348)=<E-1,aux(348)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(331)=<5*A'+E'-11  in Loop 87 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(358)=<6*A+G-12] 
 * Adding constraints: [aux(331)=<it(87)*aux(358)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(358)=<6*A+G-12]
* Psum in Loop 87: [aux(331)=<E'-1,aux(347)=< -E+G',aux(347)=<A'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1,aux(348)=<E-1,aux(348)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing max_min for aux(358)=<6*A+G-12  
   - Applying max/min strategy 
     - Loop 85 does not increase the expression
     - Loop 86  increases the expression by [G'-1,6*A'+G'-13] 
     - Loop 87  increases the expression by [-E+G',A'-1] 
     - Loop 88  increases the expression by [E-1,G'-1] 
     - Loop 89 does not increase the expression
     - Loop 90 does not increase the expression
 * Adding constraints:[aux(358)=<aux(359)+aux(360)+aux(361)+aux(362),aux(359)=<6*A+G-12] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 86: [aux(360)=<6*A'+G'-13,aux(360)=<G'-1]
* Psum in Loop 87: [aux(331)=<E'-1,aux(347)=< -E+G',aux(347)=<A'-1,aux(361)=< -E+G',aux(361)=<A'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1,aux(348)=<E-1,aux(348)=<G'-1,aux(362)=<E-1,aux(362)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(360)=<6*A'+G'-13  in Loop 86 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(363)=<7*A+E-14] 
 * Adding constraints: [aux(360)=<it(86)*aux(363)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 86: [aux(360)=<G'-1]
* Psum in Loop 87: [aux(331)=<E'-1,aux(347)=< -E+G',aux(347)=<A'-1,aux(361)=< -E+G',aux(361)=<A'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1,aux(348)=<E-1,aux(348)=<G'-1,aux(362)=<E-1,aux(362)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(360)=<G'-1  in Loop 86 
   - Found a solution using cacheing 
 * Adding constraints: [aux(360)=<aux(364),aux(364)=<it(86)*aux(265)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 87: [aux(331)=<E'-1,aux(347)=< -E+G',aux(347)=<A'-1,aux(361)=< -E+G',aux(361)=<A'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1,aux(348)=<E-1,aux(348)=<G'-1,aux(362)=<E-1,aux(362)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(331)=<E'-1  in Loop 87 
   - Found a solution using cacheing 
 * Adding constraints: [aux(331)=<aux(365),aux(365)=<it(87)*aux(286)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 87: [aux(347)=< -E+G',aux(347)=<A'-1,aux(361)=< -E+G',aux(361)=<A'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1,aux(348)=<E-1,aux(348)=<G'-1,aux(362)=<E-1,aux(362)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(347)=< -E+G'  in Loop 87 
   - Found a solution using cacheing 
 * Adding constraints: [aux(347)=<aux(366),aux(366)=<it(87)*aux(288)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 87: [aux(347)=<A'-1,aux(361)=< -E+G',aux(361)=<A'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1,aux(348)=<E-1,aux(348)=<G'-1,aux(362)=<E-1,aux(362)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(347)=<A'-1  in Loop 87 
   - Found a solution using cacheing 
 * Adding constraints: [aux(347)=<aux(367),aux(367)=<it(87)*aux(298)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 87: [aux(361)=< -E+G',aux(361)=<A'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1,aux(348)=<E-1,aux(348)=<G'-1,aux(362)=<E-1,aux(362)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(361)=< -E+G'  in Loop 87 
   - Found a solution using cacheing 
 * Adding constraints: [aux(361)=<aux(368),aux(368)=<it(87)*aux(288)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 87: [aux(361)=<A'-1]
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1,aux(348)=<E-1,aux(348)=<G'-1,aux(362)=<E-1,aux(362)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(361)=<A'-1  in Loop 87 
   - Found a solution using cacheing 
 * Adding constraints: [aux(361)=<aux(369),aux(369)=<it(87)*aux(298)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 88: [it(88)=<1,s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1,aux(348)=<E-1,aux(348)=<G'-1,aux(362)=<E-1,aux(362)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for it(88)=<1  in Loop 88 
   - Applying inductive sum strategy 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(85)+it(86)+it(87)+it(88)+it(89)+it(90)=<B-1,it(85)+it(86)+it(87)+it(88)+it(89)+it(90)=<B-1,it(85)+it(86)+it(87)+it(88)+it(89)+it(90)=<B-B',it(85)+it(86)+it(87)+it(88)+it(89)+it(90)=<B-B'] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 88: [s(92)=<G,aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1,aux(348)=<E-1,aux(348)=<G'-1,aux(362)=<E-1,aux(362)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for s(92)=<G  in Loop 88 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(370)=<G] 
 * Adding constraints: [s(92)=<it(88)*aux(370)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(370)=<G]
* Psum in Loop 88: [aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1,aux(348)=<E-1,aux(348)=<G'-1,aux(362)=<E-1,aux(362)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing max_min for aux(370)=<G  
   - Found a solution using cacheing 
 * Adding constraints:[aux(370)=<aux(222)+2] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 88: [aux(226)=<E-1,aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1,aux(348)=<E-1,aux(348)=<G'-1,aux(362)=<E-1,aux(362)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(226)=<E-1  in Loop 88 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(371)=<E-1] 
 * Adding constraints: [aux(226)=<it(88)*aux(371)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(371)=<E-1]
* Psum in Loop 88: [aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1,aux(348)=<E-1,aux(348)=<G'-1,aux(362)=<E-1,aux(362)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing max_min for aux(371)=<E-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(371)=<aux(215)-1] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 88: [aux(235)=<E'-G'-1,aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1,aux(348)=<E-1,aux(348)=<G'-1,aux(362)=<E-1,aux(362)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(235)=<E'-G'-1  in Loop 88 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(372)=<E-2] 
 * Adding constraints: [aux(235)=<it(88)*aux(372)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(372)=<E-2]
* Psum in Loop 88: [aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1,aux(348)=<E-1,aux(348)=<G'-1,aux(362)=<E-1,aux(362)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing max_min for aux(372)=<E-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(372)=<aux(215)-2] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 88: [aux(226)=<G'-1,aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1,aux(348)=<E-1,aux(348)=<G'-1,aux(362)=<E-1,aux(362)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(226)=<G'-1  in Loop 88 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(373)=<E-1] 
 * Adding constraints: [aux(226)=<it(88)*aux(373)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(373)=<E-1]
* Psum in Loop 88: [aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1,aux(348)=<E-1,aux(348)=<G'-1,aux(362)=<E-1,aux(362)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing max_min for aux(373)=<E-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(373)=<aux(215)-1] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 88: [aux(241)=<E-1,aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1,aux(348)=<E-1,aux(348)=<G'-1,aux(362)=<E-1,aux(362)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(241)=<E-1  in Loop 88 
   - Found a solution using cacheing 
 * Adding constraints: [aux(241)=<aux(374),aux(374)=<it(88)*aux(371)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 88: [aux(245)=<E-1,aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1,aux(348)=<E-1,aux(348)=<G'-1,aux(362)=<E-1,aux(362)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(245)=<E-1  in Loop 88 
   - Found a solution using cacheing 
 * Adding constraints: [aux(245)=<aux(375),aux(375)=<it(88)*aux(371)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 88: [aux(241)=<G'-1,aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1,aux(348)=<E-1,aux(348)=<G'-1,aux(362)=<E-1,aux(362)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(241)=<G'-1  in Loop 88 
   - Found a solution using cacheing 
 * Adding constraints: [aux(241)=<aux(376),aux(376)=<it(88)*aux(373)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 88: [aux(245)=<G'-1,aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1,aux(348)=<E-1,aux(348)=<G'-1,aux(362)=<E-1,aux(362)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(245)=<G'-1  in Loop 88 
   - Found a solution using cacheing 
 * Adding constraints: [aux(245)=<aux(377),aux(377)=<it(88)*aux(373)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 88: [aux(306)=<E-1,aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1,aux(348)=<E-1,aux(348)=<G'-1,aux(362)=<E-1,aux(362)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(306)=<E-1  in Loop 88 
   - Found a solution using cacheing 
 * Adding constraints: [aux(306)=<aux(378),aux(378)=<it(88)*aux(371)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 88: [aux(306)=<G'-1,aux(326)=<E-1,aux(326)=<G'-1,aux(348)=<E-1,aux(348)=<G'-1,aux(362)=<E-1,aux(362)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(306)=<G'-1  in Loop 88 
   - Found a solution using cacheing 
 * Adding constraints: [aux(306)=<aux(379),aux(379)=<it(88)*aux(373)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 88: [aux(326)=<E-1,aux(326)=<G'-1,aux(348)=<E-1,aux(348)=<G'-1,aux(362)=<E-1,aux(362)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(326)=<E-1  in Loop 88 
   - Found a solution using cacheing 
 * Adding constraints: [aux(326)=<aux(380),aux(380)=<it(88)*aux(371)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 88: [aux(326)=<G'-1,aux(348)=<E-1,aux(348)=<G'-1,aux(362)=<E-1,aux(362)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(326)=<G'-1  in Loop 88 
   - Found a solution using cacheing 
 * Adding constraints: [aux(326)=<aux(381),aux(381)=<it(88)*aux(373)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 88: [aux(348)=<E-1,aux(348)=<G'-1,aux(362)=<E-1,aux(362)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(348)=<E-1  in Loop 88 
   - Found a solution using cacheing 
 * Adding constraints: [aux(348)=<aux(382),aux(382)=<it(88)*aux(371)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 88: [aux(348)=<G'-1,aux(362)=<E-1,aux(362)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(348)=<G'-1  in Loop 88 
   - Found a solution using cacheing 
 * Adding constraints: [aux(348)=<aux(383),aux(383)=<it(88)*aux(373)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 88: [aux(362)=<E-1,aux(362)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(362)=<E-1  in Loop 88 
   - Found a solution using cacheing 
 * Adding constraints: [aux(362)=<aux(384),aux(384)=<it(88)*aux(371)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 88: [aux(362)=<G'-1]
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(362)=<G'-1  in Loop 88 
   - Found a solution using cacheing 
 * Adding constraints: [aux(362)=<aux(385),aux(385)=<it(88)*aux(373)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 89: [it(89)=<1,aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for it(89)=<1  in Loop 89 
   - Applying inductive sum strategy 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(85)+it(86)+it(87)+it(88)+it(89)+it(90)=<B-1,it(85)+it(86)+it(87)+it(88)+it(89)+it(90)=<B-1,it(85)+it(86)+it(87)+it(88)+it(89)+it(90)=<B-B',it(85)+it(86)+it(87)+it(88)+it(89)+it(90)=<B-B'] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 89: [aux(220)=<G-1,aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(220)=<G-1  in Loop 89 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(386)=<G-1] 
 * Adding constraints: [aux(220)=<it(89)*aux(386)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(386)=<G-1]
* Psum in Loop 89: [aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing max_min for aux(386)=<G-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(386)=<aux(222)+1] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 89: [aux(220)=<E'-1,aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(220)=<E'-1  in Loop 89 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(387)=<G-1] 
 * Adding constraints: [aux(220)=<it(89)*aux(387)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(387)=<G-1]
* Psum in Loop 89: [aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing max_min for aux(387)=<G-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(387)=<aux(222)+1] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 89: [aux(294)=<A'-E'+G'-1,aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(294)=<A'-E'+G'-1  in Loop 89 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(388)=<A+G-2] 
 * Adding constraints: [aux(294)=<it(89)*aux(388)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(388)=<A+G-2]
* Psum in Loop 89: [aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing max_min for aux(388)=<A+G-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(388)=<aux(232)+1] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 89: [aux(251)=<A'+E'-2,aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(251)=<A'+E'-2  in Loop 89 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(389)=<A+G-2] 
 * Adding constraints: [aux(251)=<it(89)*aux(389)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(389)=<A+G-2]
* Psum in Loop 89: [aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing max_min for aux(389)=<A+G-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(389)=<aux(232)+1] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 89: [aux(260)=<2*A'+E'-3,aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(260)=<2*A'+E'-3  in Loop 89 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(390)=<2*A+G-3] 
 * Adding constraints: [aux(260)=<it(89)*aux(390)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(390)=<2*A+G-3]
* Psum in Loop 89: [aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing max_min for aux(390)=<2*A+G-3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(390)=<aux(234)+1] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 89: [aux(294)=< -E'+G',aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(294)=< -E'+G'  in Loop 89 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(391)=<G-1] 
 * Adding constraints: [aux(294)=<it(89)*aux(391)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(391)=<G-1]
* Psum in Loop 89: [aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing max_min for aux(391)=<G-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(391)=<aux(222)+1] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 89: [aux(251)=<E'-1,aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(251)=<E'-1  in Loop 89 
   - Found a solution using cacheing 
 * Adding constraints: [aux(251)=<aux(392),aux(392)=<it(89)*aux(387)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 89: [aux(260)=<E'-1,aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(260)=<E'-1  in Loop 89 
   - Found a solution using cacheing 
 * Adding constraints: [aux(260)=<aux(393),aux(393)=<it(89)*aux(387)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 89: [aux(272)=<3*A'+E'-4,aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(272)=<3*A'+E'-4  in Loop 89 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(394)=<3*A+G-4] 
 * Adding constraints: [aux(272)=<it(89)*aux(394)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(394)=<3*A+G-4]
* Psum in Loop 89: [aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing max_min for aux(394)=<3*A+G-4  
   - Found a solution using cacheing 
 * Adding constraints:[aux(394)=<aux(302)+2] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 89: [aux(272)=<E'-1,aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(272)=<E'-1  in Loop 89 
   - Found a solution using cacheing 
 * Adding constraints: [aux(272)=<aux(395),aux(395)=<it(89)*aux(387)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 89: [aux(312)=<4*A'+E'-5,aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(312)=<4*A'+E'-5  in Loop 89 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(396)=<4*A+G-5] 
 * Adding constraints: [aux(312)=<it(89)*aux(396)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(396)=<4*A+G-5]
* Psum in Loop 89: [aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing max_min for aux(396)=<4*A+G-5  
   - Found a solution using cacheing 
 * Adding constraints:[aux(396)=<aux(322)+3] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 89: [aux(312)=<E'-1,aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(312)=<E'-1  in Loop 89 
   - Found a solution using cacheing 
 * Adding constraints: [aux(312)=<aux(397),aux(397)=<it(89)*aux(387)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 89: [aux(332)=<5*A'+E'-6,aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(332)=<5*A'+E'-6  in Loop 89 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(398)=<5*A+G-6] 
 * Adding constraints: [aux(332)=<it(89)*aux(398)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(398)=<5*A+G-6]
* Psum in Loop 89: [aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing max_min for aux(398)=<5*A+G-6  
   - Found a solution using cacheing 
 * Adding constraints:[aux(398)=<aux(344)+4] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 89: [aux(332)=<E'-1]
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(332)=<E'-1  in Loop 89 
   - Found a solution using cacheing 
 * Adding constraints: [aux(332)=<aux(399),aux(399)=<it(89)*aux(387)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 90: [it(90)=<1,s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for it(90)=<1  in Loop 90 
   - Applying inductive sum strategy 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(85)+it(86)+it(87)+it(88)+it(89)+it(90)=<B-1,it(85)+it(86)+it(87)+it(88)+it(89)+it(90)=<B-1,it(85)+it(86)+it(87)+it(88)+it(89)+it(90)=<B-B',it(85)+it(86)+it(87)+it(88)+it(89)+it(90)=<B-B'] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 90: [s(93)=<G,aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for s(93)=<G  in Loop 90 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(400)=<G] 
 * Adding constraints: [s(93)=<it(90)*aux(400)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(400)=<G]
* Psum in Loop 90: [aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing max_min for aux(400)=<G  
   - Found a solution using cacheing 
 * Adding constraints:[aux(400)=<aux(222)+2] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 90: [aux(221)=<G-1,aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(221)=<G-1  in Loop 90 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(401)=<G-1] 
 * Adding constraints: [aux(221)=<it(90)*aux(401)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(401)=<G-1]
* Psum in Loop 90: [aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing max_min for aux(401)=<G-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(401)=<aux(222)+1] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 90: [aux(221)=<E'-1,aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(221)=<E'-1  in Loop 90 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(402)=<G-1] 
 * Adding constraints: [aux(221)=<it(90)*aux(402)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(402)=<G-1]
* Psum in Loop 90: [aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing max_min for aux(402)=<G-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(402)=<aux(222)+1] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 90: [aux(252)=<G-1,aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(252)=<G-1  in Loop 90 
   - Found a solution using cacheing 
 * Adding constraints: [aux(252)=<aux(403),aux(403)=<it(90)*aux(401)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 90: [aux(261)=<G-1,aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(261)=<G-1  in Loop 90 
   - Found a solution using cacheing 
 * Adding constraints: [aux(261)=<aux(404),aux(404)=<it(90)*aux(401)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 90: [aux(295)=< -E'+G',aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(295)=< -E'+G'  in Loop 90 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(405)=<G-1] 
 * Adding constraints: [aux(295)=<it(90)*aux(405)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(405)=<G-1]
* Psum in Loop 90: [aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing max_min for aux(405)=<G-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(405)=<aux(222)+1] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 90: [aux(252)=<E'-1,aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(252)=<E'-1  in Loop 90 
   - Found a solution using cacheing 
 * Adding constraints: [aux(252)=<aux(406),aux(406)=<it(90)*aux(402)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 90: [aux(261)=<E'-1,aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(261)=<E'-1  in Loop 90 
   - Found a solution using cacheing 
 * Adding constraints: [aux(261)=<aux(407),aux(407)=<it(90)*aux(402)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 90: [aux(295)=<G'-1,aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(295)=<G'-1  in Loop 90 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(408)=<G-1] 
 * Adding constraints: [aux(295)=<it(90)*aux(408)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(408)=<G-1]
* Psum in Loop 90: [aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing max_min for aux(408)=<G-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(408)=<aux(222)+1] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 90: [aux(273)=<G-1,aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(273)=<G-1  in Loop 90 
   - Found a solution using cacheing 
 * Adding constraints: [aux(273)=<aux(409),aux(409)=<it(90)*aux(401)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 90: [aux(273)=<E'-1,aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(273)=<E'-1  in Loop 90 
   - Found a solution using cacheing 
 * Adding constraints: [aux(273)=<aux(410),aux(410)=<it(90)*aux(402)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 90: [aux(313)=<G-1,aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(313)=<G-1  in Loop 90 
   - Found a solution using cacheing 
 * Adding constraints: [aux(313)=<aux(411),aux(411)=<it(90)*aux(401)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 90: [aux(313)=<E'-1,aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(313)=<E'-1  in Loop 90 
   - Found a solution using cacheing 
 * Adding constraints: [aux(313)=<aux(412),aux(412)=<it(90)*aux(402)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 90: [aux(333)=<G-1,aux(333)=<E'-1]

###### Computing sum for aux(333)=<G-1  in Loop 90 
   - Found a solution using cacheing 
 * Adding constraints: [aux(333)=<aux(413),aux(413)=<it(90)*aux(401)] 

##### Pending set process_main4(A,B,C,D,E,F,G,H,I)
* Psum in Loop 90: [aux(333)=<E'-1]

###### Computing sum for aux(333)=<E'-1  in Loop 90 
   - Found a solution using cacheing 
 * Adding constraints: [aux(333)=<aux(414),aux(414)=<it(90)*aux(402)] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [85,86,87,88,89,90] 
Found a cycle in the non-final constraints
 Removed possibly redundant constraints to solve a cycle in the cost structure 
aux(218)=<it(86)*aux(230)
aux(249)=<aux(278)
aux(225)=<it(87)*aux(288)
aux(240)=<aux(296)
aux(244)=<aux(297)
aux(305)=<aux(340)
aux(325)=<aux(342)
aux(346)=<aux(356)
aux(360)=<aux(364)
aux(347)=<aux(366)
aux(361)=<aux(368)
Found a cycle in the non-final constraints
Could not solve cycle in cost structure.
 Discarded constraints:  
aux(408)=<aux(222)+1
aux(405)=<aux(222)+1
aux(402)=<aux(222)+1
aux(401)=<aux(222)+1
aux(400)=<aux(222)+2
aux(398)=<aux(344)+4
aux(396)=<aux(322)+3
aux(394)=<aux(302)+2
aux(391)=<aux(222)+1
aux(390)=<aux(234)+1
aux(389)=<aux(232)+1
aux(388)=<aux(232)+1
aux(387)=<aux(222)+1
aux(386)=<aux(222)+1
aux(373)=<aux(215)-1
aux(372)=<aux(215)-2
aux(371)=<aux(215)-1
aux(370)=<aux(222)+2
aux(358)=<aux(359)+aux(360)+aux(361)+aux(362)
aux(344)=<aux(345)+aux(346)+aux(347)+aux(348)
aux(327)=<aux(328)+aux(329)+aux(330)+aux(331)+aux(332)+aux(333)
aux(322)=<aux(323)+aux(324)+aux(325)+aux(326)
aux(319)=<aux(232)+1
aux(307)=<aux(308)+aux(309)+aux(310)+aux(311)+aux(312)+aux(313)
aux(302)=<aux(303)+aux(304)+aux(305)+aux(306)
aux(301)=<aux(234)
aux(300)=<aux(232)+1
aux(291)=<aux(255)+2
aux(290)=<aux(232)+1
aux(293)=<aux(246)
aux(288)=<max([aux(289),aux(290),aux(291),aux(293)])+aux(292)+aux(294)+aux(295)
aux(286)=<aux(232)+1
aux(285)=<aux(232)+1
aux(267)=<aux(268)+aux(269)+aux(270)+aux(271)+aux(272)+aux(273)
aux(266)=<aux(246)
aux(265)=<aux(246)
aux(264)=<aux(246)-1
aux(255)=<aux(256)+aux(257)+aux(258)+aux(259)+aux(260)+aux(261)
aux(246)=<aux(247)+aux(248)+aux(249)+aux(250)+aux(251)+aux(252)
aux(234)=<aux(242)+aux(243)+aux(244)+aux(245)
aux(237)=<aux(232)
aux(236)=<aux(232)
aux(232)=<aux(238)+aux(239)+aux(240)+aux(241)
aux(230)=<max([aux(231),aux(232),aux(234),aux(236),aux(237)])+aux(233)+aux(235)
aux(227)=<aux(222)
aux(222)=<aux(223)+aux(224)+aux(225)+aux(226)
aux(215)=<aux(216)+aux(217)+aux(218)+aux(219)+aux(220)+aux(221)
aux(414)=<it(90)*aux(402)
aux(333)=<aux(414)
aux(413)=<it(90)*aux(401)
aux(333)=<aux(413)
aux(412)=<it(90)*aux(402)
aux(313)=<aux(412)
aux(411)=<it(90)*aux(401)
aux(313)=<aux(411)
aux(410)=<it(90)*aux(402)
aux(273)=<aux(410)
aux(409)=<it(90)*aux(401)
aux(273)=<aux(409)
aux(295)=<it(90)*aux(408)
aux(407)=<it(90)*aux(402)
aux(261)=<aux(407)
aux(406)=<it(90)*aux(402)
aux(252)=<aux(406)
aux(295)=<it(90)*aux(405)
aux(404)=<it(90)*aux(401)
aux(261)=<aux(404)
aux(403)=<it(90)*aux(401)
aux(252)=<aux(403)
aux(221)=<it(90)*aux(402)
aux(221)=<it(90)*aux(401)
s(93)=<it(90)*aux(400)
aux(399)=<it(89)*aux(387)
aux(332)=<aux(399)
aux(332)=<it(89)*aux(398)
aux(397)=<it(89)*aux(387)
aux(312)=<aux(397)
aux(312)=<it(89)*aux(396)
aux(395)=<it(89)*aux(387)
aux(272)=<aux(395)
aux(272)=<it(89)*aux(394)
aux(393)=<it(89)*aux(387)
aux(260)=<aux(393)
aux(392)=<it(89)*aux(387)
aux(251)=<aux(392)
aux(294)=<it(89)*aux(391)
aux(260)=<it(89)*aux(390)
aux(251)=<it(89)*aux(389)
aux(294)=<it(89)*aux(388)
aux(220)=<it(89)*aux(387)
aux(220)=<it(89)*aux(386)
aux(385)=<it(88)*aux(373)
aux(362)=<aux(385)
aux(384)=<it(88)*aux(371)
aux(362)=<aux(384)
aux(383)=<it(88)*aux(373)
aux(348)=<aux(383)
aux(382)=<it(88)*aux(371)
aux(348)=<aux(382)
aux(381)=<it(88)*aux(373)
aux(326)=<aux(381)
aux(380)=<it(88)*aux(371)
aux(326)=<aux(380)
aux(379)=<it(88)*aux(373)
aux(306)=<aux(379)
aux(378)=<it(88)*aux(371)
aux(306)=<aux(378)
aux(377)=<it(88)*aux(373)
aux(245)=<aux(377)
aux(376)=<it(88)*aux(373)
aux(241)=<aux(376)
aux(375)=<it(88)*aux(371)
aux(245)=<aux(375)
aux(374)=<it(88)*aux(371)
aux(241)=<aux(374)
aux(226)=<it(88)*aux(373)
aux(235)=<it(88)*aux(372)
aux(226)=<it(88)*aux(371)
s(92)=<it(88)*aux(370)
aux(368)=<it(87)*aux(288)
aux(366)=<it(87)*aux(288)
aux(365)=<it(87)*aux(286)
aux(331)=<aux(365)
aux(364)=<it(86)*aux(265)
aux(331)=<it(87)*aux(358)
aux(357)=<it(87)*aux(286)
aux(311)=<aux(357)
aux(356)=<it(86)*aux(265)
aux(311)=<it(87)*aux(344)
aux(342)=<it(87)*aux(288)
aux(340)=<it(87)*aux(288)
aux(339)=<it(87)*aux(286)
aux(271)=<aux(339)
aux(336)=<it(86)*aux(265)
aux(324)=<aux(336)
aux(335)=<it(85)*aux(227)
aux(329)=<aux(335)
aux(334)=<it(85)*aux(222)
aux(329)=<aux(334)
aux(324)=<it(86)*aux(327)
aux(271)=<it(87)*aux(322)
aux(321)=<it(87)*aux(286)
aux(259)=<aux(321)
aux(320)=<it(87)*aux(286)
aux(250)=<aux(320)
aux(292)=<it(87)*aux(319)
aux(316)=<it(86)*aux(265)
aux(304)=<aux(316)
aux(315)=<it(85)*aux(227)
aux(309)=<aux(315)
aux(314)=<it(85)*aux(222)
aux(309)=<aux(314)
aux(304)=<it(86)*aux(307)
aux(259)=<it(87)*aux(302)
aux(292)=<it(87)*aux(301)
aux(250)=<it(87)*aux(300)
aux(297)=<it(87)*aux(288)
aux(296)=<it(87)*aux(288)
aux(219)=<it(87)*aux(286)
aux(219)=<it(87)*aux(285)
aux(278)=<it(86)*aux(230)
aux(277)=<it(86)*aux(265)
aux(243)=<aux(277)
aux(276)=<it(86)*aux(265)
aux(239)=<aux(276)
aux(275)=<it(85)*aux(227)
aux(269)=<aux(275)
aux(274)=<it(85)*aux(222)
aux(269)=<aux(274)
aux(243)=<it(86)*aux(267)
aux(239)=<it(86)*aux(266)
aux(224)=<it(86)*aux(265)
aux(233)=<it(86)*aux(264)
aux(263)=<it(85)*aux(227)
aux(257)=<aux(263)
aux(262)=<it(85)*aux(222)
aux(257)=<aux(262)
aux(233)=<it(86)*aux(255)
aux(254)=<it(85)*aux(227)
aux(248)=<aux(254)
aux(253)=<it(85)*aux(222)
aux(248)=<aux(253)
aux(224)=<it(86)*aux(246)
aux(217)=<it(85)*aux(227)
aux(217)=<it(85)*aux(222)
s(87)=<it(85)*aux(215)

#### Simplifying cost structure of phase [85,86,87,88,89,90] 
 * Joined equivalent variables [aux(299),aux(244)] into aux(299)
 * Joined equivalent variables [aux(341),aux(305)] into aux(341)
 * Joined equivalent variables [aux(343),aux(325)] into aux(343)
 * Joined equivalent variables [aux(367),aux(347)] into aux(367)
 * Joined equivalent variables [aux(369),aux(361)] into aux(369)
 * Joined equivalent variables [aux(229),aux(279),aux(287),aux(298)] into aux(229)
 * Joined equivalent variables [aux(240),aux(299),aux(341),aux(343),aux(367),aux(369)] into aux(240)
 * Joined equivalent variables [aux(249),aux(280),aux(282),aux(317),aux(337)] into aux(249)
 * Joined equivalent variables [s(87),s(92),s(93)] into s(87)
 * Joined equivalent variables [it(85),it(86),it(87),it(88),it(89),it(90)] into it(85)
 * Joined equivalent variables [aux(218),aux(225)] into aux(218)
 * Joined equivalent variables [aux(240),aux(249)] into aux(240)
 * Joined equivalent variables [aux(218),aux(240)] into aux(218)

#### Cost of phase [85,86,87,88,89,90]:process_main4(A,B,C,D,E,F,G,H,I) -> [process_main4(A',B',C',D',E',F',G',H',I')] 
122*it(85)+24*s(87)+20*s(88)+20*s(90)+0
  Such that:aux(228) =< A
aux(415) =< B
aux(416) =< B-B'
it(85) =< aux(415)
it(85) =< aux(416)
aux(284) =< aux(228)
s(89) =< it(85)*aux(228)
s(91) =< it(85)*aux(284)
s(90) =< s(91)
s(88) =< s(89)

Unbounded itvars
s(87) :  sum(85),s(74)

#### Simplifying cost structure of chain [[85,86,87,88,89,90],84] 
 * Joined equivalent variables [aux(417),aux(415),aux(416)] into aux(417)

#### Cost of chains of process_main4(A,B,C,D,E,F,G,H,I):
* Chain [[85,86,87,88,89,90],84]: 122*it(85)+24*s(87)+20*s(88)+20*s(90)+3
  Such that:aux(228) =< A
aux(417) =< B
it(85) =< aux(417)
aux(284) =< aux(228)
s(89) =< it(85)*aux(228)
s(91) =< it(85)*aux(284)
s(90) =< s(91)
s(88) =< s(89)

Unbounded itvars
s(87) :  sum(85),s(74)

  with precondition: [I=1,A>=0,B>=2,C>=0,D>=1,E>=1,F>=0,G>=1,H>=0] 

* Chain [84]: 3
  with precondition: [A=0,B=1,D=0,I=1,C>=0,E>=1,F>=0,G>=1,H>=0] 


#### Simplifying cost structure of CE 120 
 * Renamed intermediate variables: 
[ (eq(121,1),aux(228))>>s(94), (eq(121,1),aux(417))>>s(95), (eq(121,1),it(85))>>s(96), (eq(121,1),aux(284))>>s(97), (eq(121,1),s(89))>>s(98), (eq(121,1),s(91))>>s(99), (eq(121,1),s(90))>>s(100), (eq(121,1),s(88))>>s(101), (eq(121,1),s(87))>>s(102)]

#### Simplifying cost structure of CE 121 

#### Cost of chains of main4(A,B,C,D,E):
* Chain [92]: 6
  with precondition: [A=0,B=1,D=0,E=1,C>=0] 

* Chain [91]: 122*s(96)+20*s(100)+20*s(101)+24*s(102)+6
  Such that:s(94) =< A
s(95) =< B
s(96) =< s(95)
s(97) =< s(94)
s(98) =< s(96)*s(94)
s(99) =< s(96)*s(97)
s(100) =< s(99)
s(101) =< s(98)

Unbounded itvars
s(102) :  eq(121,1),s(87)

  with precondition: [E=1,A>=0,B>=2,C>=0,D>=1] 


#### Simplifying cost structure of CE 123 
 * Renamed intermediate variables: 
[ (eq(124,1),s(1))>>s(103)]

#### Simplifying cost structure of CE 124 

#### Simplifying cost structure of CE 122 

#### Cost of chains of case_14(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V):
* Chain [95]: 11
  with precondition: [A=5,B=1,M=1,T=1,U=1,O+1=E,R=K,S=L,C>=0,G>=1,H>=5,I>=1,J>=0,N>=0,O>=1,P>=0,Q>=0,R>=1,S>=0,V>=1,D>=N,F>=P,G>=Q,D>=R,F>=S] 

* Chain [94]: 8*s(103)+11
  Such that:s(103) =< B

  with precondition: [A=5,M=1,T=1,U=1,O+1=E,R=K,S=L,B>=2,C>=0,G>=1,H>=5,I>=1,J>=0,N>=0,O>=1,P>=0,Q>=0,R>=1,S>=0,V>=1,D>=N,F>=P,G>=Q,D>=R,F>=S] 

* Chain [93]: 4
  with precondition: [A=5,M=1,T=1,O+1=E,R=K,S=L,B=U,4>=H,B>=1,C>=0,G>=1,H>=0,I>=1,J>=0,N>=0,O>=1,P>=0,Q>=0,R>=1,S>=0,V>=C,V>=H+1,D>=N,F>=P,G>=Q,D>=R,F>=S] 


#### Simplifying cost structure of CE 125 

#### Simplifying cost structure of CE 130 

#### Simplifying cost structure of CE 131 

#### Simplifying cost structure of CE 132 
 * Renamed intermediate variables: 
[ (eq(126,2),s(103))>>s(104)]

#### Simplifying cost structure of CE 126 

#### Simplifying cost structure of CE 127 
 * Renamed intermediate variables: 
[ (eq(128,1),aux(5))>>s(105), (eq(128,1),it(38))>>s(106)]
 * Renamed intermediate variables: 
[ (eq(128,2),s(103))>>s(107)]

#### Simplifying cost structure of CE 128 
 * Renamed intermediate variables: 
[ (eq(129,1),aux(5))>>s(108), (eq(129,1),it(38))>>s(109)]

#### Simplifying cost structure of CE 129 

#### Cost of chains of case_13(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q):
* Chain [101]: 22
  with precondition: [F=1,H=1,J=1,O=1,P=1,L+1=B,A>=1,D>=1,E>=5,G>=0,I>=0,K>=0,L>=1,M>=0,N>=0,Q>=1,C>=I,A>=K,C>=M,D>=N] 

* Chain [100]: 4
  with precondition: [H=0,J=1,O=1,L+1=B,F=P,D>=1,E>=0,F>=1,G>=0,I>=0,K>=0,L>=1,M>=0,N>=0,Q>=E,Q>=G,C>=I,A>=K,C>=M,D>=N] 

* Chain [99]: 8*s(104)+22
  Such that:s(104) =< F

  with precondition: [H=1,J=1,O=1,P=1,L+1=B,A>=1,D>=1,E>=5,F>=2,G>=0,I>=0,K>=0,L>=1,M>=0,N>=0,Q>=1,C>=I,A>=K,C>=M,D>=N] 

* Chain [98]: 15
  with precondition: [H=1,J=1,O=1,L+1=B,F=P,4>=E,A>=1,D>=1,E>=0,F>=1,G>=0,I>=0,K>=0,L>=1,M>=0,N>=0,Q>=E+1,Q>=G,C>=I,A>=K,C>=M,D>=N] 

* Chain [97]: 10*s(106)+8*s(107)+22
  Such that:s(107) =< F+H
s(105) =< H
s(106) =< s(105)

  with precondition: [J=1,O=1,P=1,L+1=B,D>=1,E>=5,F>=1,G>=0,H>=2,I>=0,K>=0,L>=1,M>=0,N>=0,Q>=1,A>=H,C>=I,A>=K,C>=M,D>=N] 

* Chain [96]: 10*s(109)+15
  Such that:s(108) =< H
s(109) =< s(108)

  with precondition: [J=1,O=1,L+1=B,F+H=P+1,4>=E,D>=1,E>=0,F>=1,G>=0,H>=2,I>=0,K>=0,L>=1,M>=0,N>=0,Q>=E+1,Q>=G,A>=H,C>=I,A>=K,C>=M,D>=N] 


#### Simplifying cost structure of CE 139 

#### Computing cost of phase [103,104,105,106,107] 
 * Renamed intermediate variables: 
[ (eq(138,1),s(108))>>s(110), (eq(138,1),s(109))>>s(111)]

#### Simplifying cost structure of CE 138 
 * Renamed intermediate variables: 
[ (it(103),s(110))>>s(112), (it(103),s(111))>>s(113)]

#### Simplifying cost structure of CE 136 
 * Renamed intermediate variables: 
[ (eq(137,1),s(107))>>s(114), (eq(137,1),s(105))>>s(115), (eq(137,1),s(106))>>s(116)]

#### Simplifying cost structure of CE 137 
 * Renamed intermediate variables: 
[ (it(105),s(115))>>s(117), (it(105),s(114))>>s(118), (it(105),s(116))>>s(119)]
 * Renamed intermediate variables: 
[ (eq(135,1),s(104))>>s(120)]

#### Simplifying cost structure of CE 135 
 * Renamed intermediate variables: 
[ (it(106),s(120))>>s(121)]

#### Simplifying cost structure of CE 133 

#### Simplifying cost structure of CE 134 

#### Cost of loops [103,104,105,106,107] 

 * loop 103:process_main5(A,B,C,D,E,F,G,H) -> [process_main5(A',B',C',D',E',F',G',H')] 
10*s(113)+24
  Such that:s(112) =< -F+F'+1
s(113) =< s(112)

 * loop 104:process_main5(A,B,C,D,E,F,G,H) -> [process_main5(A',B',C',D',E',F',G',H')] 
24
 * loop 105:process_main5(A,B,C,D,E,F,G,H) -> [process_main5(A',B',C',D',E',F',G',H')] 
8*s(118)+10*s(119)+31
  Such that:s(117) =< A
s(118) =< A+F
s(119) =< s(117)

 * loop 106:process_main5(A,B,C,D,E,F,G,H) -> [process_main5(A',B',C',D',E',F',G',H')] 
8*s(121)+31
  Such that:s(121) =< F

 * loop 107:process_main5(A,B,C,D,E,F,G,H) -> [process_main5(A',B',C',D',E',F',G',H')] 
31
##### Pending set process_main5(A,B,C,D,E,F,G,H)
* Psum in Loop 103: [it(103)=<1,s(123)=< -F+F'+1]
* Psum in Loop 104: [it(104)=<1]
* Psum in Loop 105: [it(105)=<1,s(126)=<A,s(124)=<A+F]
* Psum in Loop 106: [it(106)=<1,s(127)=<F]
* Psum in Loop 107: [it(107)=<1]

###### Computing sum for it(103)=<1  in Loop 103 
   - Applying inductive sum strategy 
     - head Candidate: B-1 
       - Loop 104 is collaborative and bounds [it(104)] 
       - Loop 105 is collaborative and bounds [it(105)] 
       - Loop 106 is collaborative and bounds [it(106)] 
       - Loop 107 is collaborative and bounds [it(107)] 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - Loop 104 is collaborative and bounds [it(104)] 
       - Loop 105 is collaborative and bounds [it(105)] 
       - Loop 106 is collaborative and bounds [it(106)] 
       - Loop 107 is collaborative and bounds [it(107)] 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(103)+it(104)+it(105)+it(106)+it(107)=<B-1,it(103)+it(104)+it(105)+it(106)+it(107)=<B-1,it(103)+it(104)+it(105)+it(106)+it(107)=<B-B',it(103)+it(104)+it(105)+it(106)+it(107)=<B-B'] 

##### Pending set A
* Psum in Loop 103: [s(123)=< -F+F'+1]
* Psum in Loop 104: [it(104)=<1]
* Psum in Loop 105: [it(105)=<1,s(126)=<A,s(124)=<A+F]
* Psum in Loop 106: [it(106)=<1,s(127)=<F]
* Psum in Loop 107: [it(107)=<1]

###### Computing sum for s(123)=< -F+F'+1  in Loop 103 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(418)=<A] 
 * Adding constraints: [s(123)=<it(103)*aux(418)] 

##### Pending set process_main5(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(418)=<A]
* Psum in Loop 104: [it(104)=<1]
* Psum in Loop 105: [it(105)=<1,s(126)=<A,s(124)=<A+F]
* Psum in Loop 106: [it(106)=<1,s(127)=<F]
* Psum in Loop 107: [it(107)=<1]

###### Computing max_min for aux(418)=<A  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(418)=<A] 

##### Pending set process_main5(A,B,C,D,E,F,G,H)
* Psum in Loop 104: [it(104)=<1]
* Psum in Loop 105: [it(105)=<1,s(126)=<A,s(124)=<A+F]
* Psum in Loop 106: [it(106)=<1,s(127)=<F]
* Psum in Loop 107: [it(107)=<1]

###### Computing sum for it(104)=<1  in Loop 104 
   - Applying inductive sum strategy 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(103)+it(104)+it(105)+it(106)+it(107)=<B-1,it(103)+it(104)+it(105)+it(106)+it(107)=<B-1,it(103)+it(104)+it(105)+it(106)+it(107)=<B-B',it(103)+it(104)+it(105)+it(106)+it(107)=<B-B'] 

##### Pending set process_main5(A,B,C,D,E,F,G,H)
* Psum in Loop 105: [it(105)=<1,s(126)=<A,s(124)=<A+F]
* Psum in Loop 106: [it(106)=<1,s(127)=<F]
* Psum in Loop 107: [it(107)=<1]

###### Computing sum for it(105)=<1  in Loop 105 
   - Applying inductive sum strategy 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(103)+it(104)+it(105)+it(106)+it(107)=<B-1,it(103)+it(104)+it(105)+it(106)+it(107)=<B-1,it(103)+it(104)+it(105)+it(106)+it(107)=<B-B',it(103)+it(104)+it(105)+it(106)+it(107)=<B-B'] 

##### Pending set process_main5(A,B,C,D,E,F,G,H)
* Psum in Loop 105: [s(126)=<A,s(124)=<A+F]
* Psum in Loop 106: [it(106)=<1,s(127)=<F]
* Psum in Loop 107: [it(107)=<1]

###### Computing sum for s(126)=<A  in Loop 105 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(419)=<A] 
 * Adding constraints: [s(126)=<it(105)*aux(419)] 

##### Pending set process_main5(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(419)=<A]
* Psum in Loop 105: [s(124)=<A+F]
* Psum in Loop 106: [it(106)=<1,s(127)=<F]
* Psum in Loop 107: [it(107)=<1]

###### Computing max_min for aux(419)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(419)=<aux(418)] 

##### Pending set process_main5(A,B,C,D,E,F,G,H)
* Psum in Loop 105: [s(124)=<A+F]
* Psum in Loop 106: [it(106)=<1,s(127)=<F]
* Psum in Loop 107: [it(107)=<1]

###### Computing sum for s(124)=<A+F  in Loop 105 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(420)=<A+F] 
 * Adding constraints: [s(124)=<it(105)*aux(420)] 

##### Pending set process_main5(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(420)=<A+F]
* Psum in Loop 106: [it(106)=<1,s(127)=<F]
* Psum in Loop 107: [it(107)=<1]

###### Computing max_min for aux(420)=<A+F  
   - Applying max/min strategy 
     - Loop 103  increases the expression by [A'-1,F'-1] 
     - Loop 104 does not increase the expression
     - Loop 105 does not increase the expression
     - Loop 106 does not increase the expression
     - Loop 107 does not increase the expression
 * Adding constraints:[aux(420)=<aux(421)+aux(422),aux(421)=<A+F] 

##### Pending set process_main5(A,B,C,D,E,F,G,H)
* Psum in Loop 103: [aux(422)=<A'-1,aux(422)=<F'-1]
* Psum in Loop 106: [it(106)=<1,s(127)=<F]
* Psum in Loop 107: [it(107)=<1]

###### Computing sum for aux(422)=<A'-1  in Loop 103 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(423)=<A-1] 
 * Adding constraints: [aux(422)=<it(103)*aux(423)] 

##### Pending set process_main5(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(423)=<A-1]
* Psum in Loop 103: [aux(422)=<F'-1]
* Psum in Loop 106: [it(106)=<1,s(127)=<F]
* Psum in Loop 107: [it(107)=<1]

###### Computing max_min for aux(423)=<A-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(423)=<aux(418)-1] 

##### Pending set process_main5(A,B,C,D,E,F,G,H)
* Psum in Loop 103: [aux(422)=<F'-1]
* Psum in Loop 106: [it(106)=<1,s(127)=<F]
* Psum in Loop 107: [it(107)=<1]

###### Computing sum for aux(422)=<F'-1  in Loop 103 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(424)=<A+F-2] 
 * Adding constraints: [aux(422)=<it(103)*aux(424)] 

##### Pending set process_main5(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(424)=<A+F-2]
* Psum in Loop 106: [it(106)=<1,s(127)=<F]
* Psum in Loop 107: [it(107)=<1]

###### Computing max_min for aux(424)=<A+F-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(424)=<aux(420)-2] 

##### Pending set process_main5(A,B,C,D,E,F,G,H)
* Psum in Loop 106: [it(106)=<1,s(127)=<F]
* Psum in Loop 107: [it(107)=<1]

###### Computing sum for it(106)=<1  in Loop 106 
   - Applying inductive sum strategy 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: F-1 
       - Loop 103 adds an expression [A-1]
       - Loop 104 is collaborative
       - Loop 105 is collaborative
       - Loop 107 is collaborative
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: F-1 
       - Loop 103 adds an expression [A-1]
       - Loop 104 is collaborative
       - Loop 105 is collaborative
       - Loop 107 is collaborative
 * Adding constraints: [it(106)=<aux(425)+aux(426),it(106)=<aux(427)+aux(428),it(103)+it(104)+it(105)+it(106)+it(107)=<B-1,it(103)+it(104)+it(105)+it(106)+it(107)=<B-1,aux(426)=<F-1,it(103)+it(104)+it(105)+it(106)+it(107)=<B-B',it(103)+it(104)+it(105)+it(106)+it(107)=<B-B',aux(428)=<F-F'] 

##### Pending set process_main5(A,B,C,D,E,F,G,H)
* Psum in Loop 103: [aux(425)=<A-1,aux(427)=<A-1]
* Psum in Loop 106: [s(127)=<F]
* Psum in Loop 107: [it(107)=<1]

###### Computing sum for aux(425)=<A-1  in Loop 103 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(429)=<A-1] 
 * Adding constraints: [aux(425)=<it(103)*aux(429)] 

##### Pending set process_main5(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(429)=<A-1]
* Psum in Loop 103: [aux(427)=<A-1]
* Psum in Loop 106: [s(127)=<F]
* Psum in Loop 107: [it(107)=<1]

###### Computing max_min for aux(429)=<A-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(429)=<aux(418)-1] 

##### Pending set process_main5(A,B,C,D,E,F,G,H)
* Psum in Loop 103: [aux(427)=<A-1]
* Psum in Loop 106: [s(127)=<F]
* Psum in Loop 107: [it(107)=<1]

###### Computing sum for aux(427)=<A-1  in Loop 103 
   - Found a solution using cacheing 
 * Adding constraints: [aux(427)=<aux(430),aux(430)=<it(103)*aux(429)] 

##### Pending set process_main5(A,B,C,D,E,F,G,H)
* Psum in Loop 106: [s(127)=<F]
* Psum in Loop 107: [it(107)=<1]

###### Computing sum for s(127)=<F  in Loop 106 
   - Applying inductive sum strategy 
     - head Candidate: 2*F-2 
       - Loop 103 adds an expression [2*A-2]
       - Loop 104 is collaborative
       - Loop 105 is collaborative
       - Loop 107 is collaborative
     - head Candidate: B+F-2 
       - Loop 103 adds an expression [A-2]
       - Loop 104 is collaborative
       - Loop 105 is collaborative
       - Loop 107 is collaborative and bounds [it(107)] 
     - tail Candidate: 2*F-2 
       - Loop 103 adds an expression [2*A-2]
       - Loop 104 is collaborative
       - Loop 105 is collaborative
       - Loop 107 is collaborative
     - tail Candidate: B+F-2 
       - Loop 103 adds an expression [A-2]
       - Loop 104 is collaborative
       - Loop 105 is collaborative
       - Loop 107 is collaborative and bounds [it(107)] 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(439)=<F] 
 * Adding constraints: [s(127)=<it(106)*aux(439),s(127)=<aux(431)+aux(432),it(107)+s(127)=<aux(433)+aux(434),s(127)=<aux(435)+aux(436),it(107)+s(127)=<aux(437)+aux(438),aux(432)=<2*F-2,aux(434)=<B+F-2,aux(436)=<2*F-2*F',aux(438)=<B+F-B'-F'] 

##### Pending set process_main5(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(439)=<F]
* Psum in Loop 103: [aux(433)=<A-2,aux(437)=<A-2,aux(431)=<2*A-2,aux(435)=<2*A-2]
* Psum in Loop 107: [it(107)=<1]

###### Computing max_min for aux(439)=<F  
   - Applying max/min strategy 
     - Loop 103  increases the expression by [A-1,F'-1] 
     - Loop 104 does not increase the expression
     - Loop 105 does not increase the expression
     - Loop 106 does not increase the expression
     - Loop 107 does not increase the expression
 * Adding constraints:[aux(439)=<aux(440)+aux(441),aux(440)=<F] 

##### Pending set process_main5(A,B,C,D,E,F,G,H)
* Psum in Loop 103: [aux(433)=<A-2,aux(437)=<A-2,aux(431)=<2*A-2,aux(435)=<2*A-2,aux(441)=<A-1,aux(441)=<F'-1]
* Psum in Loop 107: [it(107)=<1]

###### Computing sum for aux(433)=<A-2  in Loop 103 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(442)=<A-2] 
 * Adding constraints: [aux(433)=<it(103)*aux(442)] 

##### Pending set process_main5(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(442)=<A-2]
* Psum in Loop 103: [aux(437)=<A-2,aux(431)=<2*A-2,aux(435)=<2*A-2,aux(441)=<A-1,aux(441)=<F'-1]
* Psum in Loop 107: [it(107)=<1]

###### Computing max_min for aux(442)=<A-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(442)=<aux(418)-2] 

##### Pending set process_main5(A,B,C,D,E,F,G,H)
* Psum in Loop 103: [aux(437)=<A-2,aux(431)=<2*A-2,aux(435)=<2*A-2,aux(441)=<A-1,aux(441)=<F'-1]
* Psum in Loop 107: [it(107)=<1]

###### Computing sum for aux(437)=<A-2  in Loop 103 
   - Found a solution using cacheing 
 * Adding constraints: [aux(437)=<aux(443),aux(443)=<it(103)*aux(442)] 

##### Pending set process_main5(A,B,C,D,E,F,G,H)
* Psum in Loop 103: [aux(431)=<2*A-2,aux(435)=<2*A-2,aux(441)=<A-1,aux(441)=<F'-1]
* Psum in Loop 107: [it(107)=<1]

###### Computing sum for aux(431)=<2*A-2  in Loop 103 
   - Found a solution using cacheing 
 * Adding constraints: [aux(431)=<aux(444)*2,aux(444)=<it(103)*aux(429)] 

##### Pending set process_main5(A,B,C,D,E,F,G,H)
* Psum in Loop 103: [aux(435)=<2*A-2,aux(441)=<A-1,aux(441)=<F'-1]
* Psum in Loop 107: [it(107)=<1]

###### Computing sum for aux(435)=<2*A-2  in Loop 103 
   - Found a solution using cacheing 
 * Adding constraints: [aux(435)=<aux(445)*2,aux(445)=<it(103)*aux(429)] 

##### Pending set process_main5(A,B,C,D,E,F,G,H)
* Psum in Loop 103: [aux(441)=<A-1,aux(441)=<F'-1]
* Psum in Loop 107: [it(107)=<1]

###### Computing sum for aux(441)=<A-1  in Loop 103 
   - Found a solution using cacheing 
 * Adding constraints: [aux(441)=<aux(446),aux(446)=<it(103)*aux(429)] 

##### Pending set process_main5(A,B,C,D,E,F,G,H)
* Psum in Loop 103: [aux(441)=<F'-1]
* Psum in Loop 107: [it(107)=<1]

###### Computing sum for aux(441)=<F'-1  in Loop 103 
   - Found a solution using cacheing 
 * Adding constraints: [aux(441)=<aux(447),aux(447)=<it(103)*aux(424)] 

##### Pending set process_main5(A,B,C,D,E,F,G,H)
* Psum in Loop 107: [it(107)=<1]

###### Computing sum for it(107)=<1  in Loop 107 
   - Applying inductive sum strategy 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(103)+it(104)+it(105)+it(106)+it(107)=<B-1,it(103)+it(104)+it(105)+it(106)+it(107)=<B-1,it(103)+it(104)+it(105)+it(106)+it(107)=<B-B',it(103)+it(104)+it(105)+it(106)+it(107)=<B-B'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [103,104,105,106,107] 
Found a cycle in the non-final constraints
 Removed possibly redundant constraints to solve a cycle in the cost structure 
aux(422)=<it(103)*aux(424)
s(127)=<it(106)*aux(439)
aux(441)=<aux(447)

#### Simplifying cost structure of phase [103,104,105,106,107] 
 * Joined equivalent variables [aux(430),aux(427)] into aux(430)
 * Joined equivalent variables [aux(443),aux(437)] into aux(443)
 * Joined equivalent variables [aux(446),aux(441)] into aux(446)
 * Joined equivalent variables [aux(450),aux(426),aux(440)] into aux(450)
 * Joined equivalent variables [aux(423),aux(429)] into aux(423)
 * Joined equivalent variables [aux(425),aux(430),aux(444),aux(445),aux(446)] into aux(425)
 * Joined equivalent variables [aux(433),aux(443)] into aux(433)
 * Joined equivalent variables [it(103),it(104),it(105)] into it(103)
 * Joined equivalent variables [aux(431),aux(435)] into aux(431)

#### Cost of phase [103,104,105,106,107]:process_main5(A,B,C,D,E,F,G,H) -> [process_main5(A',B',C',D',E',F',G',H')] 
79*it(103)+31*it(106)+31*it(107)+10*s(122)+8*s(124)+10*s(125)+8*s(127)+0
  Such that:aux(418) =< A
aux(421) =< A+F
aux(434) =< B+F
aux(438) =< B+F-B'-F'
aux(428) =< F-F'
aux(432) =< 2*F
aux(436) =< 2*F-2*F'
aux(448) =< B
aux(449) =< B-B'
aux(450) =< F
it(103) =< aux(448)
it(106) =< aux(448)
it(107) =< aux(448)
it(103) =< aux(449)
it(106) =< aux(449)
it(107) =< aux(449)
aux(442) =< aux(418)-2
aux(423) =< aux(418)-1
aux(419) =< aux(418)
s(123) =< it(103)*aux(418)
aux(425) =< it(103)*aux(423)
aux(433) =< it(103)*aux(442)
aux(422) =< it(103)*aux(423)
s(126) =< it(103)*aux(419)
aux(431) =< aux(425)*2
it(107) =< aux(433)+aux(434)
s(127) =< aux(433)+aux(434)
it(106) =< aux(425)+aux(450)
it(107) =< aux(433)+aux(438)
s(127) =< aux(433)+aux(438)
s(127) =< aux(431)+aux(436)
s(127) =< aux(431)+aux(432)
it(106) =< aux(425)+aux(428)
aux(420) =< aux(421)+aux(422)
s(124) =< it(103)*aux(420)
s(125) =< s(126)
s(122) =< s(123)

#### Simplifying cost structure of chain [[103,104,105,106,107],102] 
 * Joined equivalent variables [aux(451),aux(448),aux(449)] into aux(451)
 * Joined equivalent variables [aux(452),aux(434),aux(438)] into aux(452)
 * Joined equivalent variables [aux(453),aux(428),aux(450)] into aux(453)
 * Joined equivalent variables [aux(454),aux(432),aux(436)] into aux(454)
 * Joined equivalent variables [aux(422),aux(425)] into aux(422)

#### Cost of chains of process_main5(A,B,C,D,E,F,G,H):
* Chain [[103,104,105,106,107],102]: 79*it(103)+31*it(106)+31*it(107)+10*s(122)+8*s(124)+10*s(125)+8*s(127)+3
  Such that:aux(418) =< A
aux(421) =< A+F
aux(451) =< B
aux(452) =< B+F
aux(453) =< F
aux(454) =< 2*F
it(103) =< aux(451)
it(106) =< aux(451)
it(107) =< aux(451)
aux(442) =< aux(418)-2
aux(423) =< aux(418)-1
aux(419) =< aux(418)
s(123) =< it(103)*aux(418)
aux(422) =< it(103)*aux(423)
aux(433) =< it(103)*aux(442)
s(126) =< it(103)*aux(419)
aux(431) =< aux(422)*2
it(107) =< aux(433)+aux(452)
s(127) =< aux(433)+aux(452)
it(106) =< aux(422)+aux(453)
s(127) =< aux(431)+aux(454)
aux(420) =< aux(421)+aux(422)
s(124) =< it(103)*aux(420)
s(125) =< s(126)
s(122) =< s(123)

  with precondition: [H=1,A>=0,B>=2,C>=0,D>=1,E>=0,F>=1,G>=0] 

* Chain [102]: 3
  with precondition: [A=0,B=1,D=0,H=1,C>=0,E>=0,F>=1,G>=0] 


#### Simplifying cost structure of CE 140 
 * Renamed intermediate variables: 
[ (eq(141,1),aux(418))>>s(128), (eq(141,1),aux(421))>>s(129), (eq(141,1),aux(451))>>s(130), (eq(141,1),aux(452))>>s(131), (eq(141,1),aux(453))>>s(132), (eq(141,1),aux(454))>>s(133), (eq(141,1),it(103))>>s(134), (eq(141,1),it(106))>>s(135), (eq(141,1),it(107))>>s(136), (eq(141,1),aux(442))>>s(137), (eq(141,1),aux(423))>>s(138), (eq(141,1),aux(419))>>s(139), (eq(141,1),s(123))>>s(140), (eq(141,1),aux(422))>>s(141), (eq(141,1),aux(433))>>s(142), (eq(141,1),s(126))>>s(143), (eq(141,1),aux(431))>>s(144), (eq(141,1),s(127))>>s(145), (eq(141,1),aux(420))>>s(146), (eq(141,1),s(124))>>s(147), (eq(141,1),s(125))>>s(148), (eq(141,1),s(122))>>s(149)]

#### Simplifying cost structure of CE 141 

#### Cost of chains of main5(A,B,C,D,E):
* Chain [109]: 6
  with precondition: [A=0,B=1,D=0,E=1,C>=0] 

* Chain [108]: 79*s(134)+31*s(135)+31*s(136)+8*s(145)+8*s(147)+10*s(148)+10*s(149)+6
  Such that:s(132) =< 1
s(133) =< 2
s(128) =< A
s(129) =< A+1
s(130) =< B
s(131) =< B+1
s(134) =< s(130)
s(135) =< s(130)
s(136) =< s(130)
s(137) =< s(128)-2
s(138) =< s(128)-1
s(139) =< s(128)
s(140) =< s(134)*s(128)
s(141) =< s(134)*s(138)
s(142) =< s(134)*s(137)
s(143) =< s(134)*s(139)
s(144) =< s(141)*2
s(136) =< s(142)+s(131)
s(145) =< s(142)+s(131)
s(135) =< s(141)+s(132)
s(145) =< s(144)+s(133)
s(146) =< s(129)+s(141)
s(147) =< s(134)*s(146)
s(148) =< s(143)
s(149) =< s(140)

  with precondition: [E=1,A>=0,B>=2,C>=0,D>=1] 


Closed-form bounds of send_msg(A,B,C): 
-------------------------------------
* Chain [44] with precondition: [A=1,C=1,B>=0] 
    - Upper bound: 4 
    - Complexity: constant 
* Chain [43] with precondition: [C=1,A>=2,B>=0] 
    - Upper bound: 8*A+4 
    - Complexity: n 

### Maximum cost of send_msg(A,B,C): 8*A+4 
Asymptotic class: n 

Closed-form bounds of main1(A,B,C,D,E): 
-------------------------------------
* Chain [51] with precondition: [A=0,B=1,D=0,E=1,C>=0] 
    - Upper bound: 4 
    - Complexity: constant 
* Chain [50] with precondition: [E=1,A>=0,B>=2,C>=0,D>=1] 
    - Upper bound: 8*A*B+4+16*B 
    - Complexity: n^2 

### Maximum cost of main1(A,B,C,D,E): 8*A*B+16*B+4 
Asymptotic class: n^2 

Closed-form bounds of append(A,B,C,D,E,F,G,H,I,J,K,L): 
-------------------------------------
* Chain [[38,39],40] with precondition: [A=C,A+E=I+1,A+G=K+1,A>=2,B>=0,D>=1,E>=1,F>=0,G>=1,H>=0,L>=1,J>=F,L>=H,D+H>=L] 
    - Upper bound: 10*A+2 
    - Complexity: n 
* Chain [40] with precondition: [A=1,C=1,D=0,E=I,F=J,G=K,H=L,B>=0,E>=0,F>=0,G>=0,H>=0] 
    - Upper bound: 2 
    - Complexity: constant 

### Maximum cost of append(A,B,C,D,E,F,G,H,I,J,K,L): 10*A+2 
Asymptotic class: n 

Closed-form bounds of main2(A,B,C,D,E): 
-------------------------------------
* Chain [58] with precondition: [A=0,B=1,D=0,E=1,C>=0] 
    - Upper bound: 5 
    - Complexity: constant 
* Chain [57] with precondition: [E=1,A>=0,B>=2,C>=0,D>=1] 
    - Upper bound: 10*A*B+5+17*B 
    - Complexity: n^2 

### Maximum cost of main2(A,B,C,D,E): 10*A*B+17*B+5 
Asymptotic class: n^2 

Closed-form bounds of main3(A,B,C,D,E): 
-------------------------------------
* Chain [75] with precondition: [A=0,B=1,D=0,E=1,C>=0] 
    - Upper bound: 6 
    - Complexity: constant 
* Chain [74] with precondition: [E=1,A>=0,B>=2,C>=0,D>=1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of main3(A,B,C,D,E): inf 
Asymptotic class: infinity 

Closed-form bounds of main4(A,B,C,D,E): 
-------------------------------------
* Chain [92] with precondition: [A=0,B=1,D=0,E=1,C>=0] 
    - Upper bound: 6 
    - Complexity: constant 
* Chain [91] with precondition: [E=1,A>=0,B>=2,C>=0,D>=1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of main4(A,B,C,D,E): inf 
Asymptotic class: infinity 

Closed-form bounds of main5(A,B,C,D,E): 
-------------------------------------
* Chain [109] with precondition: [A=0,B=1,D=0,E=1,C>=0] 
    - Upper bound: 6 
    - Complexity: constant 
* Chain [108] with precondition: [E=1,A>=0,B>=2,C>=0,D>=1] 
    - Upper bound: 20*A*B+6+141*B+8*B*nat(A-1)*B+ (A+1)* (8*B)+nat(A-2)*8*B+ (8*B+8) 
    - Complexity: n^3 

### Maximum cost of main5(A,B,C,D,E): 20*A*B+141*B+8*B*nat(A-1)*B+ (A+1)* (8*B)+nat(A-2)*8*B+ (8*B+8)+6 
Asymptotic class: n^3 
* Total analysis performed in 12954 ms.


Cost relation system solved by CoFloCo in 12967 ms.

Method send_msg terminates?: YES

 - msg_1: size of msg wrt. List<Rat>
 - msg_2: size of msg wrt. Rat
UB for send_msg(msg_1,msg_2) = 8*msg_1+4

Method main1 terminates?: YES

 - events_1: size of events wrt. List<Rat>
 - events_2: size of events wrt. List<Event>
 - events_3: size of events wrt. Rat
 - events_4: size of events wrt. Event
UB for main1(events_1,events_2,events_3,events_4) = 8*events_1*events_2+16*events_2+4

Method append terminates?: YES

 - l1_1: size of l1 wrt. List<Rat>
 - l1_2: size of l1 wrt. Rat
 - l1_3: size of l1 wrt. List<A>
 - l1_4: size of l1 wrt. A
 - l2_1: size of l2 wrt. List<Rat>
 - l2_2: size of l2 wrt. Rat
 - l2_3: size of l2 wrt. List<A>
 - l2_4: size of l2 wrt. A
UB for append(l1_1,l1_2,l1_3,l1_4,l2_1,l2_2,l2_3,l2_4) = 10*l1_1+2

Method main2 terminates?: YES

 - events_1: size of events wrt. List<Rat>
 - events_2: size of events wrt. List<Event>
 - events_3: size of events wrt. Rat
 - events_4: size of events wrt. Event
UB for main2(events_1,events_2,events_3,events_4) = 10*events_1*events_2+17*events_2+5

Method main3 terminates?: YES

 - events_1: size of events wrt. List<Rat>
 - events_2: size of events wrt. List<Event>
 - events_3: size of events wrt. Rat
 - events_4: size of events wrt. Event
UB for main3(events_1,events_2,events_3,events_4) = inf

Method main4 terminates?: YES

 - events_1: size of events wrt. List<Rat>
 - events_2: size of events wrt. List<Event>
 - events_3: size of events wrt. Rat
 - events_4: size of events wrt. Event
UB for main4(events_1,events_2,events_3,events_4) = inf

Method main5 terminates?: YES

 - events_1: size of events wrt. List<Rat>
 - events_2: size of events wrt. List<Event>
 - events_3: size of events wrt. Rat
 - events_4: size of events wrt. Event
UB for main5(events_1,events_2,events_3,events_4) = 20*events_1*events_2+141*events_2+8*events_2*nat(events_1-1)*events_2+ (events_1+1)* (8*events_2)+nat(events_1-2)*8*events_2+ (8*events_2+8)+6


Abs program loaded in 13 ms.

Rule based representation generated in 4 ms.

Rule based representation stored in /tmp/costabs/rbr.rbr

RBR properties stored in /tmp/costabs/rbr.properties

Class invariants generated and loaded in 0 ms.

Abstract compilation performed in 36 ms.

Cost relation system stored in /tmp/costabs/crs.crs

Generated 75 equations 
entry('sizeL'(A,B,C,D,E,F,G):[]).
entry('get_elem'(A,B,C,D,E,F,G,H,I,J):[]).
entry('get_2elems'(A,B,C,D,E,F,G,H,I,J,K,L,M,N):[]).
entry('subtract_row_helper'(A,B,C,D,E,F,G):[]).
entry('subtract_row'(A,B,C,D,E,F,G):[]).
entry('subtract_helper'(A,B,C,D,E,F,G,H,I):[]).
entry('concat'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O):[]).
entry('tl'(A,B,C,D,E):[]).
entry('hd_helper'(A,B,C,D,E,F,G):[]).
entry('reverse_helper'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O):[]).
entry('reverseL'(A,B,C,D,E,F,G,H,I,J):[]).
entry('hd'(A,B,C,D,E):[]).
entry('split_helper'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U):[]).
entry('split'(A,B,C,D,E,F,G,H,I,J,K,L,M,N):[]).
entry('subtract'(A,B,C,D,E,F,G):[]).
entry('echelon_helper'(A,B,C,D,E,F,G,H,I,J):[]).
entry('echelon_form'(A,B,C,D,E,F):[]).
entry('echelon_helper_old'(A,B,C,D,E,F,G):[]).
entry('echelon_form_old'(A,B,C,D,E,F):[]).
input_output_vars('and_op'(A,B,C),[A,B],[C]).
input_output_vars('case_0'(A,B,C,D,E,F,G),[A,B,C,D,E],[F,G]).
input_output_vars('case_1'(A,B,C,D,E,F,G,H,I,J),[A,B,C,D,E,F,G],[H,I,J]).
input_output_vars('case_10'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O),[A,B,C,D,E,F,G,H,I,J],[K,L,M,N,O]).
input_output_vars('case_11'(A,B,C,D,E,F),[A,B,C,D],[E,F]).
input_output_vars('case_12'(A,B,C,D,E,F),[A,B,C,D],[E,F]).
input_output_vars('case_13'(A,B,C,D,E,F,G,H),[A,B,C,D,E,F],[G,H]).
input_output_vars('case_14'(A,B,C,D,E,F,G,H),[A,B,C,D,E,F],[G,H]).
input_output_vars('case_15'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O),[A,B,C,D,E,F,G,H,I,J],[K,L,M,N,O]).
input_output_vars('case_16'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U),[A,B,C,D,E,F,G,H,I,J,K,L,M,N],[O,P,Q,R,S,T,U]).
input_output_vars('case_17'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U),[A,B,C,D,E,F,G,H,I,J,K,L,M,N],[O,P,Q,R,S,T,U]).
input_output_vars('case_18'(A,B,C,D,E,F,G,H,I,J,K,L,M),[A,B,C,D,E,F,G,H,I,J],[K,L,M]).
input_output_vars('case_19'(A,B,C,D,E,F,G,H,I,J),[A,B,C,D,E,F,G],[H,I,J]).
input_output_vars('case_2'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T),[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q],[R,S,T]).
input_output_vars('case_20'(A,B,C,D,E,F,G,H),[A,B,C,D,E],[F,G,H]).
input_output_vars('case_3'(A,B,C,D,E,F,G,H,I,J,K,L,M,N),[A,B,C,D,E,F,G,H,I,J],[K,L,M,N]).
input_output_vars('case_4'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T),[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P],[Q,R,S,T]).
input_output_vars('case_5'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1),[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X],[Y,Z,A1,B1]).
input_output_vars('case_6'(A,B,C,D,E,F,G),[A,B,C,D,E],[F,G]).
input_output_vars('case_7'(A,B,C,D,E,F,G,H,I,J),[A,B,C,D,E,F,G,H],[I,J]).
input_output_vars('case_8'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F,G],[H,I]).
input_output_vars('case_9'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F],[G,H,I]).
input_output_vars('concat'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O),[A,B,C,D,E,F,G,H,I,J],[K,L,M,N,O]).
input_output_vars('echelon_form'(A,B,C,D,E,F),[A,B,C],[D,E,F]).
input_output_vars('echelon_form_old'(A,B,C,D,E,F),[A,B,C],[D,E,F]).
input_output_vars('echelon_helper'(A,B,C,D,E,F,G,H,I,J),[A,B,C,D,E,F,G],[H,I,J]).
input_output_vars('echelon_helper_old'(A,B,C,D,E,F,G),[A,B,C,D],[E,F,G]).
input_output_vars('eq'(A,B,C),[A,B],[C]).
input_output_vars('geq'(A,B,C),[A,B],[C]).
input_output_vars('get_2elems'(A,B,C,D,E,F,G,H,I,J,K,L,M,N),[A,B,C,D,E,F,G,H,I,J],[K,L,M,N]).
input_output_vars('get_elem'(A,B,C,D,E,F,G,H,I,J),[A,B,C,D,E,F,G],[H,I,J]).
input_output_vars('gt'(A,B,C),[A,B],[C]).
input_output_vars('hd'(A,B,C,D,E),[A,B,C],[D,E]).
input_output_vars('hd_helper'(A,B,C,D,E,F,G),[A,B,C,D,E],[F,G]).
input_output_vars('leq'(A,B,C),[A,B],[C]).
input_output_vars('lt'(A,B,C),[A,B],[C]).
input_output_vars('maxNorm'(A,B,C),[A,B],[C]).
input_output_vars('neg'(A,B),[A],[B]).
input_output_vars('neq'(A,B,C),[A,B],[C]).
input_output_vars('or'(A,B,C),[A,B],[C]).
input_output_vars('reverseL'(A,B,C,D,E,F,G,H,I,J),[A,B,C,D,E],[F,G,H,I,J]).
input_output_vars('reverse_helper'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O),[A,B,C,D,E,F,G,H,I,J],[K,L,M,N,O]).
input_output_vars('sizeL'(A,B,C,D,E,F,G),[A,B,C,D,E],[F,G]).
input_output_vars('split'(A,B,C,D,E,F,G,H,I,J,K,L,M,N),[A,B,C,D,E,F,G],[H,I,J,K,L,M,N]).
input_output_vars('split_helper'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U),[A,B,C,D,E,F,G,H,I,J,K,L,M,N],[O,P,Q,R,S,T,U]).
input_output_vars('subtract'(A,B,C,D,E,F,G),[A,B,C,D],[E,F,G]).
input_output_vars('subtract_helper'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F],[G,H,I]).
input_output_vars('subtract_row'(A,B,C,D,E,F,G),[A,B,C,D,E],[F,G]).
input_output_vars('subtract_row_helper'(A,B,C,D,E,F,G),[A,B,C,D,E],[F,G]).
input_output_vars('tl'(A,B,C,D,E),[A,B,C],[D,E]).
eq('eq',[A,B,C],0,[],[A=B,C=1,A>=0,B>=0,C>=0]).
eq('eq',[A,B,C],0,[],[A>=B+1,C=0,A>=0,B>=0,C>=0]).
eq('eq',[A,B,C],0,[],[B>=A+1,C=0,A>=0,B>=0,C>=0]).
eq('neq',[A,B,C],0,[],[A=B,C=0,A>=0,B>=0,C>=0]).
eq('neq',[A,B,C],0,[],[A>=B+1,C=1,A>=0,B>=0,C>=0]).
eq('neq',[A,B,C],0,[],[B>=A+1,C=1,A>=0,B>=0,C>=0]).
eq('lt',[A,B,C],0,[],[B-A>=1,C=1,A>=0,B>=0,C>=0]).
eq('lt',[A,B,C],0,[],[B=<A,C=0,A>=0,B>=0,C>=0]).
eq('leq',[A,B,C],0,[],[A=<B,C=1,A>=0,B>=0,C>=0]).
eq('leq',[A,B,C],0,[],[A-B>=1,C=0,A>=0,B>=0,C>=0]).
eq('gt',[A,B,C],0,[],[A-B>=1,C=1,A>=0,B>=0,C>=0]).
eq('gt',[A,B,C],0,[],[A=<B,C=0,A>=0,B>=0,C>=0]).
eq('geq',[A,B,C],0,[],[B=<A,C=1,A>=0,B>=0,C>=0]).
eq('geq',[A,B,C],0,[],[B-A>=1,C=0,A>=0,B>=0,C>=0]).
eq('neg',[A,B],0,[],[A=0,B=1,A>=0,B>=0]).
eq('neg',[A,B],0,[],[A=1,B=0,A>=0,B>=0]).
eq('and_op',[A,B,C],0,[],[A=0,C=0,A>=0,B>=0,C>=0]).
eq('and_op',[A,B,C],0,[],[A=1,C=B,A>=0,B>=0,C>=0]).
eq('or',[A,B,C],0,[],[A=1,C=1,A>=0,B>=0,C>=0]).
eq('or',[A,B,C],0,[],[A=0,C=B,A>=0,B>=0,C>=0]).
eq('maxNorm',[A,B,A],0,[],[A>=1+B,A>=0,B>=0,A>=0]).
eq('maxNorm',[A,B,B],0,[],[A=<B,A>=0,B>=0,B>=0]).
eq('case_0',[A,B,C,D,E,F,G],2,[],[E=0,D=1,B=0,A=1,G=0,F=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_0',[A,B,C,D,E,F,G],5,['sizeL'(H,I,J,K,L,M,N)],[E>=O,E>=L,C>=P,C>=J,B>=Q,B>=I,D=K+1,A=H+1,K>=1,H>=1,O>=1,Q>=1,R=1,S=1,G=R+N,F=S+M,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('sizeL',[A,B,C,D,E,F,G],1,['case_0'(A,B,C,D,E,F,G)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_2',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,J,K,L],1,[],[I=B,H=A,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,J>=0,K>=0,L>=0]).
eq('case_2',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T],4,['get_elem'(M,N,O,P,Q,U,V,R,S,T)],[I>=B+1,H>=A+1,W=1,X=1,V=I-W,U=H-X,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0,S>=0,T>=0]).
eq('case_1',[A,B,C,D,E,F,G,H,I,J],3,['case_2'(K,L,A,B,C,D,E,F,G,M,N,O,P,Q,R,S,T,H,I,J)],[E>=O,E>=T,C>=N,C>=R,B>=M,B>=Q,D=S+1,A=P+1,S>=1,P>=1,O>=1,M>=1,L=0,K=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('get_elem',[A,B,C,D,E,F,G,H,I,J],1,['case_1'(A,B,C,D,E,F,G,H,I,J)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('case_5',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1],2,['maxNorm'(N,T,B1)],[L=B,K=A,Z>=M,Z>=S,A1=1,Y=1,T>=1,N>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0,S>=0,T>=0,U>=0,V>=0,W>=0,X>=0,Y>=0,Z>=0,A1>=0,B1>=0]).
eq('case_5',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,A1,B1],4,['get_2elems'(O,P,Q,R,U,V,W,X,C1,D1,Y,Z,A1,B1)],[L>=B+1,K>=A+1,E1=1,F1=1,D1=L-E1,C1=K-F1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0,S>=0,T>=0,U>=0,V>=0,W>=0,X>=0,Y>=0,Z>=0,A1>=0,B1>=0]).
eq('case_4',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T],3,['case_5'(U,V,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,W,X,Y,Z,A1,B1,Q,R,S,T)],[H>=X,H>=B1,F>=W,F>=Z,G=A1+1,E=Y+1,A1>=1,Y>=1,X>=1,V=0,U=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0,S>=0,T>=0]).
eq('case_3',[A,B,C,D,E,F,G,H,I,J,K,L,M,N],2,['case_4'(A,B,C,D,E,F,G,H,I,J,O,P,Q,R,S,T,K,L,M,N)],[D>=P,D>=T,B>=O,B>=R,C=S+1,A=Q+1,S>=1,Q>=1,P>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0]).
eq('get_2elems',[A,B,C,D,E,F,G,H,I,J,K,L,M,N],1,['case_3'(A,B,C,D,E,F,G,H,I,J,K,L,M,N)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0]).
eq('case_6',[A,B,C,D,E,F,G],2,[],[A=1,F=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_7',[A,B,C,D,E,F,G,H,I,J],2,[],[C=1,I=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('case_7',[A,B,C,D,E,F,G,H,I,J],6,['subtract_row_helper'(G,H,K,L,E,M,N)],[D>=O,D>=L,C=K+1,K>=1,P=Q,R=O-P,J>=R,J>=N,I=M+1,M>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('case_6',[A,B,C,D,E,F,G],3,['case_7'(A,B,C,D,E,H,I,J,F,G)],[B>=H,B>=J,A=I+1,I>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('subtract_row_helper',[A,B,C,D,E,F,G],1,['case_6'(A,B,C,D,E,F,G)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_8',[A,B,C,D,E,F,G,H,I],3,['subtract_row_helper'(C,D,E,F,J,H,I)],[B>=K,B>=L,A=1,J=M,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('subtract_row',[A,B,C,D,E,F,G],4,['get_2elems'(A,B,H,I,C,D,J,K,E,E,L,M,N,O),'case_8'(P,Q,A,B,C,D,E,R,S)],[Q=M,P=L,L>=1,G=S,F=R,R>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_9',[A,B,C,D,E,F,G,H,I],2,[],[B=0,A=1,H=0,G=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('case_9',[A,B,C,D,E,F,G,H,I],5,['subtract_row'(D,E,J,K,F,L,M),'subtract_helper'(N,O,P,D,E,F,Q,R,S),'maxNorm'(L,R,H)],[C>=K,C>=P,B>=J,B>=O,A=N+1,N>=1,J>=1,I>=M,I>=S,G=Q+1,Q>=1,L>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('subtract_helper',[A,B,C,D,E,F,G,H,I],1,['case_9'(A,B,C,D,E,F,G,H,I)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('case_10',[A,B,C,D,E,F,G,H,I,J,F,G,H,I,J],1,[],[E=0,D=1,B=0,A=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('case_10',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O],4,['concat'(P,Q,R,S,T,F,G,H,I,J,U,V,W,X,Y),'maxNorm'(Z,Y,O),'maxNorm'(A1,V,L)],[E>=Z,E>=T,C>=B1,C>=R,B>=A1,B>=Q,D=S+1,A=P+1,S>=1,P>=1,Z>=1,A1>=1,M>=B1,M>=W,N=X+1,K=U+1,X>=1,U>=1,Z>=1,A1>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0]).
eq('concat',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O],1,['case_10'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0]).
eq('case_11',[A,B,C,D,B,C],1,[],[D=A,A>=0,B>=0,C>=0,D>=0,B>=0,C>=0]).
eq('case_12',[A,B,C,D,E,F],4,['tl'(G,H,I,E,F)],[C>=J,C>=H,B=G+1,G>=1,J>=1,K=1,I=D-K,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0]).
eq('case_11',[A,B,C,D,E,F],2,['case_12'(A,B,C,D,E,F)],[D>=A+1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0]).
eq('tl',[A,B,C,D,E],2,['case_11'(F,A,B,C,D,E)],[F=0,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_13',[A,B,C,D,E,F,E,F],1,[],[D=A,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,E>=0,F>=0]).
eq('case_14',[A,B,C,D,E,F,G,H],5,['maxNorm'(I,F,J),'hd_helper'(K,L,M,N,J,G,H)],[C>=I,C>=L,B=K+1,K>=1,I>=1,O=1,M=D-O,N=E+1,E>=1,I>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('case_13',[A,B,C,D,E,F,G,H],2,['case_14'(A,B,C,D,E,F,G,H)],[D>=A+1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('hd_helper',[A,B,C,D,E,F,G],2,['case_13'(H,A,B,C,D,E,F,G)],[H=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_15',[A,B,C,D,E,F,G,H,I,J,F,G,H,I,J],1,[],[E=0,D=1,B=0,A=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('case_15',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O],4,['maxNorm'(P,J,Q),'maxNorm'(R,G,S),'reverse_helper'(T,U,V,W,X,Y,S,Z,A1,Q,K,L,M,N,O)],[E>=P,E>=X,C>=B1,C>=V,B>=R,B>=U,D=W+1,A=T+1,W>=1,T>=1,P>=1,R>=1,Z>=B1,Z>=H,A1=I+1,Y=F+1,I>=1,F>=1,P>=1,R>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0]).
eq('reverse_helper',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O],1,['case_15'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0]).
eq('reverseL',[A,B,C,D,E,F,G,H,I,J],2,['reverse_helper'(A,B,C,D,E,K,L,M,N,O,F,G,H,I,J)],[O=0,N=1,L=0,K=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('hd',[A,B,C,D,E],3,['hd_helper'(A,B,C,F,G,H,I),'reverseL'(J,K,L,H,I,M,N,O,D,E)],[G=0,F=1,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_16',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U],3,['reverseL'(J,K,L,M,N,V,W,X,Y,Z),'maxNorm'(Z,E,U),'maxNorm'(Y,D,T),'maxNorm'(W,B,Q),'maxNorm'(V,A,P)],[G=I,F=H,R>=X,R>=C,S=1,O=1,D>=1,A>=1,Y>=1,V>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0,S>=0,T>=0,U>=0]).
eq('case_17',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U],5,['maxNorm'(V,N,W),'maxNorm'(X,K,Y),'split_helper'(Z,A1,B1,C1,D1,F,G,E1,F1,G1,Y,H1,I1,W,O,P,Q,R,S,T,U)],[E>=V,E>=D1,C>=J1,C>=B1,B>=X,B>=A1,D=C1+1,A=Z+1,C1>=1,Z>=1,V>=1,X>=1,K1=1,L1=1,F1=I+K1,E1=H+L1,H1>=J1,H1>=L,I1=M+1,G1=J+1,M>=1,J>=1,V>=1,X>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0,S>=0,T>=0,U>=0]).
eq('case_16',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U],2,['case_17'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)],[G>=I+1,F>=H+1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0,S>=0,T>=0,U>=0]).
eq('split_helper',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U],1,['case_16'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0,R>=0,S>=0,T>=0,U>=0]).
eq('split',[A,B,C,D,E,F,G,H,I,J,K,L,M,N],3,['split_helper'(A,B,C,D,E,F,G,O,P,Q,R,S,T,U,H,I,J,K,L,M,N)],[P=0,O=0,U=0,T=1,R=0,Q=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0]).
eq('case_18',[A,B,C,D,E,F,G,H,I,J,K,L,M],3,['subtract_helper'(N,O,P,E,F,J,Q,R,S),'concat'(T,U,V,W,X,Q,R,S,Y,Z,K,L,M,A1,B1)],[D>=V,D>=P,C>=U,C>=O,B>=T,B>=N,A=1,N>=1,T>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0]).
eq('subtract',[A,B,C,D,E,F,G],9,['get_elem'(A,B,C,H,I,D,D,J,K,L),'split'(A,B,C,H,I,M,M,N,O,P,Q,R,S,T),'case_18'(U,V,W,X,Y,Z,A,B,C,D,A1,B1,C1)],[Z=K,Y=J,J>=1,D1=1,M=D+D1,X=Q,W=P,V=O,U=N,N>=1,E1=C1,F1=B1,G1=A1,A1>=1,G=E1,F=F1,E=G1,G1>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_19',[A,B,C,D,E,F,G,H,I,J],2,[],[F=0,E=1,I=0,H=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('case_19',[A,B,C,D,E,F,G,H,I,J],6,['subtract'(A,B,C,D,K,L,M),'echelon_helper'(K,L,M,N,O,P,Q,H,I,J)],[G>=R,G>=Q,F>=S,F>=P,E=O+1,O>=1,S>=1,T=1,N=D+T,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('echelon_helper',[A,B,C,D,E,F,G,H,I,J],1,['case_19'(A,B,C,D,E,F,G,H,I,J)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('echelon_form',[A,B,C,D,E,F],2,['echelon_helper'(A,B,C,G,A,B,C,D,E,F)],[G=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0]).
eq('case_20',[A,B,C,D,E,B,C,D],1,[],[E>=A,A>=0,B>=0,C>=0,D>=0,E>=0,B>=0,C>=0,D>=0]).
eq('case_20',[A,B,C,D,E,F,G,H],5,['subtract'(B,C,D,E,I,J,K),'echelon_helper_old'(I,J,K,L,F,G,H)],[A>=E+1,M=1,L=E+M,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('echelon_helper_old',[A,B,C,D,E,F,G],2,['sizeL'(A,B,C,H,I,J,K),'case_20'(K,A,B,C,D,E,F,G)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('echelon_form_old',[A,B,C,D,E,F],2,['echelon_helper_old'(A,B,C,G,D,E,F)],[G=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0]).

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [maxNorm/3]
1. recursive [non_tail] : [case_10/15,concat/15]
2. recursive  : [case_6/7,case_7/10,subtract_row_helper/7]
3. non_recursive  : [case_8/9]
4. recursive  : [case_3/14,case_4/20,case_5/28,get_2elems/14]
5. non_recursive  : [subtract_row/7]
6. recursive [non_tail] : [case_9/9,subtract_helper/9]
7. non_recursive  : [case_18/13]
8. recursive  : [case_1/10,case_2/20,get_elem/10]
9. recursive  : [case_15/15,reverse_helper/15]
10. non_recursive  : [reverseL/10]
11. recursive  : [case_16/21,case_17/21,split_helper/21]
12. non_recursive  : [split/14]
13. non_recursive  : [subtract/7]
14. recursive  : [case_19/10,echelon_helper/10]
15. non_recursive  : [echelon_form/6]
16. recursive  : [case_0/7,sizeL/7]
17. recursive  : [case_20/8,echelon_helper_old/7]
18. non_recursive  : [echelon_form_old/6]
19. recursive  : [case_13/8,case_14/8,hd_helper/7]
20. non_recursive  : [hd/5]
21. recursive  : [case_11/6,case_12/6,tl/5]
Warning: the following predicates are never called:[and_op/3,eq/3,geq/3,gt/3,leq/3,lt/3,neg/2,neq/3,or/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into maxNorm/3
1. SCC is partially evaluated into concat/15
2. SCC is partially evaluated into subtract_row_helper/7
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into get_2elems/14
5. SCC is partially evaluated into subtract_row/7
6. SCC is partially evaluated into subtract_helper/9
7. SCC is partially evaluated into case_18/13
8. SCC is partially evaluated into get_elem/10
9. SCC is partially evaluated into reverse_helper/15
10. SCC is partially evaluated into reverseL/10
11. SCC is partially evaluated into split_helper/21
12. SCC is partially evaluated into split/14
13. SCC is partially evaluated into subtract/7
14. SCC is partially evaluated into echelon_helper/10
15. SCC is partially evaluated into echelon_form/6
16. SCC is partially evaluated into sizeL/7
17. SCC is partially evaluated into echelon_helper_old/7
18. SCC is partially evaluated into echelon_form_old/6
19. SCC is partially evaluated into hd_helper/7
20. SCC is partially evaluated into hd/5
21. SCC is partially evaluated into tl/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations maxNorm/3 
* CE 34 is refined into CE [36] 
* CE 33 is refined into CE [37] 


#### Refined cost equations maxNorm/3 
* CE 36: maxNorm(A,B,B) = 0
     [B>=A,A>=0] 
* CE 37: maxNorm(A,B,A) = 0
     [A>=B+1,B>=0] 

### Cost equations --> "Loop" of maxNorm/3 
* CEs [36] --> Loop 36 
* CEs [37] --> Loop 37 

#### Loops of maxNorm/3 
* Loop 36: maxNorm(A,B,B) [B>=A,A>=0] 
* Loop 37: maxNorm(A,B,A) [A>=B+1,B>=0] 

### Ranking functions of CR maxNorm(A,B,C) 

#### Partial ranking functions of CR maxNorm(A,B,C) 


### Resulting Chains:maxNorm(A,B,C) 
* [37]
* [36]


### Merging Chains  maxNorm/3 into  External patterns of execution 
* [[37]] --> 1 
* [[36]] --> 2 


### Specialization of cost equations concat/15 
* CE 14 is refined into CE [38] 
* CE 13 is refined into CE [39,40,41,42] 


#### Refined cost equations concat/15 
* CE 38: concat(A,B,C,D,E,F,G,H,I,J,F,G,H,I,J) = 2
     [J>=0,I>=0,H>=0,G>=0,F>=0,C>=0,E=0,D=1,B=0,A=1] 
* CE 39: concat(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) = 5+ concat(P,Q,R,S,T,F,G,H,I,J,U,V,W,X,Y)+ maxNorm(O,Y,O):1+ maxNorm(L,V,L):1
     [M>=W,E>=T,C>=R,B>=Q,B>=L,L>=V+1,E>=O,O>=Y+1,X>=1,U>=1,S>=1,P>=1,V>=0,Y>=0,M>=0,J>=0,I>=0,H>=0,G>=0,F>=0,C>=0,X+1=N,U+1=K,S+1=D,P+1=A] 
* CE 40: concat(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) = 5+ concat(P,Q,R,S,T,F,G,H,I,J,U,L,V,W,X)+ maxNorm(O,X,O):1+ maxNorm(Y,L,L):2
     [M>=V,E>=T,C>=R,B>=Q,L>=Y,B>=Y,E>=O,O>=X+1,W>=1,U>=1,S>=1,P>=1,Y>=1,X>=0,M>=0,J>=0,I>=0,H>=0,G>=0,F>=0,C>=0,W+1=N,U+1=K,S+1=D,P+1=A] 
* CE 41: concat(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) = 5+ concat(P,Q,R,S,T,F,G,H,I,J,U,V,W,X,O)+ maxNorm(Y,O,O):2+ maxNorm(L,V,L):1
     [M>=W,E>=T,C>=R,B>=Q,B>=L,L>=V+1,O>=Y,E>=Y,X>=1,U>=1,S>=1,P>=1,V>=0,Y>=1,M>=0,J>=0,I>=0,H>=0,G>=0,F>=0,C>=0,X+1=N,U+1=K,S+1=D,P+1=A] 
* CE 42: concat(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) = 5+ concat(P,Q,R,S,T,F,G,H,I,J,U,L,V,W,O)+ maxNorm(X,O,O):2+ maxNorm(Y,L,L):2
     [M>=V,E>=T,C>=R,B>=Q,L>=Y,B>=Y,O>=X,E>=X,W>=1,U>=1,S>=1,P>=1,Y>=1,X>=1,M>=0,J>=0,I>=0,H>=0,G>=0,F>=0,C>=0,W+1=N,U+1=K,S+1=D,P+1=A] 

### Cost equations --> "Loop" of concat/15 
* CEs [39] --> Loop 38 
* CEs [41] --> Loop 39 
* CEs [40] --> Loop 40 
* CEs [42] --> Loop 41 
* CEs [38] --> Loop 42 

#### Loops of concat/15 
* Loop 38: concat(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)->  concat(A',B',C',D',E',F,G,H,I,J,F',G',H',I',J')
                  [O>=J'+1,M>=H',L>=G'+1,E>=E',C>=C',B>=B',E>=O,B>=L,J'>=0,G'>=0,N>=2,M>=0,K>=2,J>=0,I>=0,H>=0,G>=0,F>=0,D>=2,C>=0,A>=2,N=I'+1,K=F'+1,D=D'+1,A=A'+1] 
* Loop 39: concat(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)->  concat(A',B',C',D',E',F,G,H,I,J,F',G',H',I',O)
                  [M>=H',L>=G'+1,E>=E',C>=C',B>=B',B>=L,G'>=0,O>=1,N>=2,M>=0,K>=2,J>=0,I>=0,H>=0,G>=0,F>=0,E>=1,D>=2,C>=0,A>=2,N=I'+1,K=F'+1,D=D'+1,A=A'+1] 
* Loop 40: concat(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)->  concat(A',B',C',D',E',F,G,H,I,J,F',L,G',H',I')
                  [O>=I'+1,M>=G',E>=E',C>=C',B>=B',E>=O,I'>=0,N>=2,M>=0,L>=1,K>=2,J>=0,I>=0,H>=0,G>=0,F>=0,D>=2,C>=0,B>=1,A>=2,N=H'+1,K=F'+1,D=D'+1,A=A'+1] 
* Loop 41: concat(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)->  concat(A',B',C',D',E',F,G,H,I,J,F',L,G',H',O)
                  [M>=G',E>=E',C>=C',B>=B',O>=1,N>=2,M>=0,L>=1,K>=2,J>=0,I>=0,H>=0,G>=0,F>=0,E>=1,D>=2,C>=0,B>=1,A>=2,N=H'+1,K=F'+1,D=D'+1,A=A'+1] 
* Loop 42: concat(A,B,C,D,E,F,G,H,I,J,F,G,H,I,J) [J>=0,I>=0,H>=0,G>=0,F>=0,C>=0,E=0,D=1,B=0,A=1] 

### Ranking functions of CR concat(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) 
* RF of phase [38,39,40,41]: [A-1,D-1]

#### Partial ranking functions of CR concat(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) 
* Partial RF of phase [38,39,40,41]:
  - RF of loop [38:1,39:1,40:1,41:1]:
    A-1
    D-1

Discarded unfeasible chain [[38,39,40,41]]...(Non-terminating chain proved terminating)

### Resulting Chains:concat(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) 
* [[38,39,40,41],42]
* [42]


### Merging Chains  concat/15 into  External patterns of execution 
* [[42]] --> 1 
* [[42,[38,39,40,41]]] --> 2 


### Specialization of cost equations subtract_row_helper/7 
* CE 9 is refined into CE [43] 
* CE 8 is refined into CE [44] 
* CE 7 is refined into CE [45] 


#### Refined cost equations subtract_row_helper/7 
* CE 43: subtract_row_helper(A,B,C,D,E,F,G) = 10+ subtract_row_helper(H,I,J,K,E,L,M)
     [G>=M,D>=K,B>=I,L>=1,J>=1,I>=0,H>=1,G>=0,E>=0,D>=0,L+1=F,J+1=C,H+1=A] 
* CE 44: subtract_row_helper(A,B,C,D,E,F,G) = 6
     [G>=0,E>=0,D>=0,B>=0,A>=2,F=1,C=1] 
* CE 45: subtract_row_helper(A,B,C,D,E,F,G) = 3
     [G>=0,E>=0,D>=0,C>=0,B>=0,F=1,A=1] 

### Cost equations --> "Loop" of subtract_row_helper/7 
* CEs [44] --> Loop 43 
* CEs [45] --> Loop 44 
* CEs [43] --> Loop 45 

#### Loops of subtract_row_helper/7 
* Loop 43: subtract_row_helper(A,B,C,D,E,F,G) [G>=0,E>=0,D>=0,B>=0,A>=2,F=1,C=1] 
* Loop 44: subtract_row_helper(A,B,C,D,E,F,G) [G>=0,E>=0,D>=0,C>=0,B>=0,F=1,A=1] 
* Loop 45: subtract_row_helper(A,B,C,D,E,F,G)->  subtract_row_helper(A',B',C',D',E,E',F')
                  [G>=F',D>=D',B>=B',E'>=1,C'>=1,B'>=0,A'>=1,G>=0,E>=0,D>=0,E'+1=F,C'+1=C,A'+1=A] 

### Ranking functions of CR subtract_row_helper(A,B,C,D,E,F,G) 
* RF of phase [45]: [A-1,C-1]

#### Partial ranking functions of CR subtract_row_helper(A,B,C,D,E,F,G) 
* Partial RF of phase [45]:
  - RF of loop [45:1]:
    A-1
    C-1

Discarded unfeasible chain [[45]]...(Non-terminating chain proved terminating)

### Resulting Chains:subtract_row_helper(A,B,C,D,E,F,G) 
* [[45],44]
* [[45],43]
* [44]
* [43]


### Merging Chains  subtract_row_helper/7 into  External patterns of execution 
* [[44]] --> 1 
* [[43]] --> 2 
* [[44,[45]]] --> 3 
* [[43,[45]]] --> 4 


### Specialization of cost equations get_2elems/14 
* CE 6 is refined into CE [46,47] 
* CE 5 is refined into CE [48] 


#### Refined cost equations get_2elems/14 
* CE 46: get_2elems(A,B,C,D,E,F,G,H,I,J,K,L,M,N) = 8+ maxNorm(N,O,N):1
     [D>=N,N>=O+1,H>=O,O>=1,L>=0,G>=2,F>=0,E>=2,C>=2,B>=0,A>=2,M=1,K=1,J=0,I=0] 
* CE 47: get_2elems(A,B,C,D,E,F,G,H,I,J,K,L,M,N) = 8+ maxNorm(O,N,N):2
     [H>=N,N>=O,D>=O,O>=1,L>=0,G>=2,F>=0,E>=2,C>=2,B>=0,A>=2,M=1,K=1,J=0,I=0] 
* CE 48: get_2elems(A,B,C,D,E,F,G,H,I,J,K,L,M,N) = 10+ get_2elems(O,P,Q,R,S,T,U,V,W,X,K,L,M,N)
     [H>=V,F>=T,D>=R,B>=P,X>=0,W>=0,V>=0,U>=1,T>=0,S>=1,R>=0,Q>=1,P>=0,O>=1,N>=0,M>=0,L>=0,K>=0,H>=1,D>=1,X+1=J,W+1=I,U+1=G,S+1=E,Q+1=C,O+1=A] 

### Cost equations --> "Loop" of get_2elems/14 
* CEs [48] --> Loop 46 
* CEs [46] --> Loop 47 
* CEs [47] --> Loop 48 

#### Loops of get_2elems/14 
* Loop 46: get_2elems(A,B,C,D,E,F,G,H,I,J,K,L,M,N)->  get_2elems(A',B',C',D',E',F',G',H',I',J',K,L,M,N)
                  [H>=H',F>=F',D>=D',B>=B',J'>=0,I'>=0,H'>=0,G'>=1,F'>=0,E'>=1,D'>=0,C'>=1,B'>=0,A'>=1,N>=0,M>=0,L>=0,K>=0,H>=1,D>=1,J'+1=J,I'+1=I,G'+1=G,E'+1=E,C'+1=C,A'+1=A] 
* Loop 47: get_2elems(A,B,C,D,E,F,G,H,I,J,K,L,M,N) [D>=N,N>=2,L>=0,H>=1,G>=2,F>=0,E>=2,C>=2,B>=0,A>=2,M=1,K=1,J=0,I=0] 
* Loop 48: get_2elems(A,B,C,D,E,F,G,H,I,J,K,L,M,N) [H>=N,N>=1,L>=0,G>=2,F>=0,E>=2,D>=1,C>=2,B>=0,A>=2,M=1,K=1,J=0,I=0] 

### Ranking functions of CR get_2elems(A,B,C,D,E,F,G,H,I,J,K,L,M,N) 
* RF of phase [46]: [A-1,C-1,E-1,G-1,I,J]

#### Partial ranking functions of CR get_2elems(A,B,C,D,E,F,G,H,I,J,K,L,M,N) 
* Partial RF of phase [46]:
  - RF of loop [46:1]:
    A-1
    C-1
    E-1
    G-1
    I
    J

Discarded unfeasible chain [[46]]...(Non-terminating chain proved terminating)

### Resulting Chains:get_2elems(A,B,C,D,E,F,G,H,I,J,K,L,M,N) 
* [[46],48]
* [[46],47]
* [48]
* [47]


### Merging Chains  get_2elems/14 into  External patterns of execution 
* [[48]] --> 1 
* [[47]] --> 2 
* [[48,[46]]] --> 3 
* [[47,[46]]] --> 4 


### Specialization of cost equations subtract_row/7 
* CE 10 is refined into CE [49,50,51,52,53,54,55,56] 


#### Refined cost equations subtract_row/7 
* CE 49: subtract_row(A,B,C,D,E,A,F) = 7+ get_2elems(A,B,G,H,C,D,I,J,K,L,M,N,O,P):1+ subtract_row_helper(A,B,C,D,Q,A,F):3
     [C>=A,J>=P,F>=0,A>=2,Q>=0,D>=0,B>=0,P>=1,N>=0,I>=2,H>=1,G>=2,O=1,M=1,L=0,K=0,E=0] 
* CE 50: subtract_row(A,B,C,D,E,C,F) = 7+ get_2elems(A,B,G,H,C,D,I,J,K,L,M,N,O,P):1+ subtract_row_helper(A,B,C,D,Q,C,F):4
     [A>=C+1,J>=P,F>=0,C>=2,Q>=0,D>=0,B>=0,P>=1,N>=0,I>=2,H>=1,G>=2,O=1,M=1,L=0,K=0,E=0] 
* CE 51: subtract_row(A,B,C,D,E,A,F) = 7+ get_2elems(A,B,G,H,C,D,I,J,K,L,M,N,O,P):2+ subtract_row_helper(A,B,C,D,Q,A,F):3
     [C>=A,H>=P,F>=0,A>=2,Q>=0,D>=0,B>=0,P>=2,N>=0,J>=1,I>=2,G>=2,O=1,M=1,L=0,K=0,E=0] 
* CE 52: subtract_row(A,B,C,D,E,C,F) = 7+ get_2elems(A,B,G,H,C,D,I,J,K,L,M,N,O,P):2+ subtract_row_helper(A,B,C,D,Q,C,F):4
     [A>=C+1,H>=P,F>=0,C>=2,Q>=0,D>=0,B>=0,P>=2,N>=0,J>=1,I>=2,G>=2,O=1,M=1,L=0,K=0,E=0] 
* CE 53: subtract_row(A,B,C,D,E,A,F) = 7+ get_2elems(A,B,G,H,C,D,I,J,E,E,K,L,M,N):3+ subtract_row_helper(A,B,C,D,O,A,F):3
     [C>=A,J>=N,A>=E+2,I>=E+2,G>=E+2,F>=0,O>=0,D>=0,B>=0,N>=1,L>=0,E>=1,H>=1,M=1,K=1] 
* CE 54: subtract_row(A,B,C,D,E,C,F) = 7+ get_2elems(A,B,G,H,C,D,I,J,E,E,K,L,M,N):3+ subtract_row_helper(A,B,C,D,O,C,F):4
     [A>=C+1,J>=N,C>=E+2,I>=E+2,G>=E+2,F>=0,O>=0,D>=0,B>=0,N>=1,L>=0,E>=1,H>=1,M=1,K=1] 
* CE 55: subtract_row(A,B,C,D,E,A,F) = 7+ get_2elems(A,B,G,H,C,D,I,J,E,E,K,L,M,N):4+ subtract_row_helper(A,B,C,D,O,A,F):3
     [C>=A,H>=N,A>=E+2,I>=E+2,G>=E+2,F>=0,O>=0,D>=0,B>=0,N>=2,L>=0,E>=1,J>=1,M=1,K=1] 
* CE 56: subtract_row(A,B,C,D,E,C,F) = 7+ get_2elems(A,B,G,H,C,D,I,J,E,E,K,L,M,N):4+ subtract_row_helper(A,B,C,D,O,C,F):4
     [A>=C+1,H>=N,C>=E+2,I>=E+2,G>=E+2,F>=0,O>=0,D>=0,B>=0,N>=2,L>=0,E>=1,J>=1,M=1,K=1] 

### Cost equations --> "Loop" of subtract_row/7 
* CEs [54,56] --> Loop 49 
* CEs [53,55] --> Loop 50 
* CEs [50,52] --> Loop 51 
* CEs [49,51] --> Loop 52 

#### Loops of subtract_row/7 
* Loop 49: subtract_row(A,B,C,D,E,C,F) [C>=E+2,A>=C+1,F>=0,E>=1,D>=0,B>=0] 
* Loop 50: subtract_row(A,B,C,D,E,A,F) [A>=E+2,C>=A,F>=0,E>=1,D>=0,B>=0] 
* Loop 51: subtract_row(A,B,C,D,E,C,F) [A>=C+1,F>=0,D>=0,C>=2,B>=0,E=0] 
* Loop 52: subtract_row(A,B,C,D,E,A,F) [C>=A,F>=0,D>=0,B>=0,A>=2,E=0] 

### Ranking functions of CR subtract_row(A,B,C,D,E,F,G) 

#### Partial ranking functions of CR subtract_row(A,B,C,D,E,F,G) 


### Resulting Chains:subtract_row(A,B,C,D,E,F,G) 
* [52]
* [51]
* [50]
* [49]


### Merging Chains  subtract_row/7 into  External patterns of execution 
* [[52]] --> 1 
* [[51]] --> 2 
* [[50]] --> 3 
* [[49]] --> 4 


### Specialization of cost equations subtract_helper/9 
* CE 12 is refined into CE [57] 
* CE 11 is refined into CE [58,59,60,61,62,63,64,65] 


#### Refined cost equations subtract_helper/9 
* CE 57: subtract_helper(A,B,C,D,E,F,G,H,I) = 3
     [I>=0,F>=0,E>=0,D>=0,C>=0,H=0,G=1,B=0,A=1] 
* CE 58: subtract_helper(A,B,C,D,E,F,G,D,H) = 6+ subtract_row(D,E,I,J,K,D,L):1+ subtract_helper(M,N,O,D,E,P,Q,R,S)+ maxNorm(D,R,D):1
     [H>=S,C>=O,B>=N,I>=D,D>=R+1,H>=L,C>=J,B>=I,Q>=1,M>=1,D>=2,R>=0,L>=0,J>=0,E>=0,Q+1=G,M+1=A,P=0,K=0,F=0] 
* CE 59: subtract_helper(A,B,C,D,E,F,G,H,I) = 6+ subtract_row(D,E,J,K,L,D,M):1+ subtract_helper(N,O,P,D,E,Q,R,H,S)+ maxNorm(D,H,H):2
     [I>=S,C>=P,B>=O,H>=D,J>=D,I>=M,C>=K,B>=J,R>=1,N>=1,D>=2,M>=0,K>=0,E>=0,R+1=G,N+1=A,Q=0,L=0,F=0] 
* CE 60: subtract_helper(A,B,C,D,E,F,G,H,I) = 6+ subtract_row(D,E,H,J,K,H,L):2+ subtract_helper(M,N,O,D,E,P,Q,R,S)+ maxNorm(H,R,H):1
     [I>=S,C>=O,B>=N,D>=H+1,B>=H,H>=R+1,I>=L,C>=J,Q>=1,M>=1,H>=2,R>=0,L>=0,J>=0,E>=0,Q+1=G,M+1=A,P=0,K=0,F=0] 
* CE 61: subtract_helper(A,B,C,D,E,F,G,H,I) = 6+ subtract_row(D,E,J,K,L,J,M):2+ subtract_helper(N,O,P,D,E,Q,R,H,S)+ maxNorm(J,H,H):2
     [I>=S,C>=P,B>=O,H>=J,D>=J+1,B>=J,I>=M,C>=K,R>=1,N>=1,J>=2,M>=0,K>=0,E>=0,R+1=G,N+1=A,Q=0,L=0,F=0] 
* CE 62: subtract_helper(A,B,C,D,E,F,G,D,H) = 6+ subtract_row(D,E,I,J,F,D,K):3+ subtract_helper(L,M,N,D,E,F,O,P,Q)+ maxNorm(D,P,D):1
     [H>=Q,C>=N,B>=M,I>=D,D>=P+1,H>=K,D>=F+2,C>=J,B>=I,O>=1,L>=1,P>=0,K>=0,F>=1,J>=0,E>=0,O+1=G,L+1=A] 
* CE 63: subtract_helper(A,B,C,D,E,F,G,H,I) = 6+ subtract_row(D,E,J,K,F,D,L):3+ subtract_helper(M,N,O,D,E,F,P,H,Q)+ maxNorm(D,H,H):2
     [I>=Q,C>=O,B>=N,H>=D,J>=D,I>=L,D>=F+2,C>=K,B>=J,P>=1,M>=1,L>=0,F>=1,K>=0,E>=0,P+1=G,M+1=A] 
* CE 64: subtract_helper(A,B,C,D,E,F,G,H,I) = 6+ subtract_row(D,E,H,J,F,H,K):4+ subtract_helper(L,M,N,D,E,F,O,P,Q)+ maxNorm(H,P,H):1
     [I>=Q,C>=N,B>=M,D>=H+1,B>=H,H>=P+1,I>=K,H>=F+2,C>=J,O>=1,L>=1,P>=0,K>=0,F>=1,J>=0,E>=0,O+1=G,L+1=A] 
* CE 65: subtract_helper(A,B,C,D,E,F,G,H,I) = 6+ subtract_row(D,E,J,K,F,J,L):4+ subtract_helper(M,N,O,D,E,F,P,H,Q)+ maxNorm(J,H,H):2
     [I>=Q,C>=O,B>=N,H>=J,D>=J+1,B>=J,I>=L,J>=F+2,C>=K,P>=1,M>=1,L>=0,F>=1,K>=0,E>=0,P+1=G,M+1=A] 

### Cost equations --> "Loop" of subtract_helper/9 
* CEs [64] --> Loop 53 
* CEs [65] --> Loop 54 
* CEs [63] --> Loop 55 
* CEs [62] --> Loop 56 
* CEs [60] --> Loop 57 
* CEs [59] --> Loop 58 
* CEs [61] --> Loop 59 
* CEs [58] --> Loop 60 
* CEs [57] --> Loop 61 

#### Loops of subtract_helper/9 
* Loop 53: subtract_helper(A,B,C,D,E,F,G,H,I)->  subtract_helper(A',B',C',D,E,F,D',E',F')
                  [I>=F',H>=E'+1,C>=C',B>=B',D>=H+1,B>=H,H>=F+2,E'>=0,I>=0,G>=2,F>=1,E>=0,C>=0,A>=2,G=D'+1,A=A'+1] 
* Loop 54: subtract_helper(A,B,C,D,E,F,G,H,I)->  subtract_helper(A',B',C',D,E,F,D',H,E')
                  [I>=E',C>=C',B>=B',H>=F+2,D>=F+3,B>=F+2,I>=0,G>=2,F>=1,E>=0,C>=0,A>=2,G=D'+1,A=A'+1] 
* Loop 55: subtract_helper(A,B,C,D,E,F,G,H,I)->  subtract_helper(A',B',C',D,E,F,D',H,E')
                  [I>=E',C>=C',B>=B',D>=F+2,H>=D,B>=D,I>=0,G>=2,F>=1,E>=0,C>=0,A>=2,G=D'+1,A=A'+1] 
* Loop 56: subtract_helper(A,B,C,D,E,F,G,D,H)->  subtract_helper(A',B',C',D,E,F,D',E',F')
                  [H>=F',D>=E'+1,C>=C',B>=B',D>=F+2,B>=D,E'>=0,H>=0,G>=2,F>=1,E>=0,C>=0,A>=2,G=D'+1,A=A'+1] 
* Loop 57: subtract_helper(A,B,C,D,E,F,G,H,I)->  subtract_helper(A',B',C',D,E,D',E',F',G')
                  [I>=G',H>=F'+1,C>=C',B>=B',D>=H+1,B>=H,F'>=0,I>=0,H>=2,G>=2,E>=0,C>=0,A>=2,G=E'+1,A=A'+1,D'=0,F=0] 
* Loop 58: subtract_helper(A,B,C,D,E,F,G,H,I)->  subtract_helper(A',B',C',D,E,D',E',H,F')
                  [I>=F',C>=C',B>=B',H>=D,B>=D,I>=0,G>=2,E>=0,D>=2,C>=0,A>=2,G=E'+1,A=A'+1,D'=0,F=0] 
* Loop 59: subtract_helper(A,B,C,D,E,F,G,H,I)->  subtract_helper(A',B',C',D,E,D',E',H,F')
                  [I>=F',C>=C',B>=B',I>=0,H>=2,G>=2,E>=0,D>=3,C>=0,B>=2,A>=2,G=E'+1,A=A'+1,D'=0,F=0] 
* Loop 60: subtract_helper(A,B,C,D,E,F,G,D,H)->  subtract_helper(A',B',C',D,E,D',E',F',G')
                  [H>=G',D>=F'+1,C>=C',B>=B',B>=D,F'>=0,H>=0,G>=2,E>=0,D>=2,C>=0,A>=2,G=E'+1,A=A'+1,D'=0,F=0] 
* Loop 61: subtract_helper(A,B,C,D,E,F,G,H,I) [I>=0,F>=0,E>=0,D>=0,C>=0,H=0,G=1,B=0,A=1] 

### Ranking functions of CR subtract_helper(A,B,C,D,E,F,G,H,I) 
* RF of phase [53,54,55,56]: [A-1]
* RF of phase [57,58,59,60]: [A-1]

#### Partial ranking functions of CR subtract_helper(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [53,54,55,56]:
  - RF of loop [53:1,54:1,55:1,56:1]:
    A-1
* Partial RF of phase [57,58,59,60]:
  - RF of loop [57:1,58:1,59:1,60:1]:
    A-1

Discarded unfeasible chain [[57,58,59,60]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [[53,54,55,56]](Non-terminating chain proved terminating)

### Resulting Chains:subtract_helper(A,B,C,D,E,F,G,H,I) 
* [[57,58,59,60],61]
* [[53,54,55,56],61]
* [61]


### Merging Chains  subtract_helper/9 into  External patterns of execution 
* [[61]] --> 1 
* [[61,[57,58,59,60]]] --> 2 
* [[61,[53,54,55,56]]] --> 3 


### Specialization of cost equations case_18/13 
* CE 35 is refined into CE [66,67,68,69,70,71] 


#### Refined cost equations case_18/13 
* CE 66: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 3+ subtract_helper(N,O,P,E,F,J,Q,R,M):1+ concat(S,T,U,V,W,X,Y,M,Z,A1,B1,C1,M,Z,A1):1
     [D>=U,D>=P,A1>=0,Z>=0,M>=0,U>=0,J>=0,F>=0,E>=1,P>=0,I>=0,H>=0,G>=0,C>=0,B>=1,C1=0,B1=1,Y=0,X=1,W=0,V=1,T=0,S=1,R=0,Q=1,O=0,N=1,L=0,K=1,A=1] 
* CE 67: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 3+ subtract_helper(N,O,P,E,F,J,Q,R,S):1+ concat(K,T,U,K,V,W,X,S,Y,Z,K,L,M,A1,B1):2
     [V+Z>=B1,T>=L,B1>=Z,M>=S,A1>=K,B>=K,D>=U,C>=T,D>=P,B1>=1,L>=1,Z>=0,S>=0,V>=1,K>=2,U>=0,J>=0,F>=0,E>=1,P>=0,I>=0,H>=0,G>=0,K+Y=A1+1,X=0,W=1,R=0,Q=1,O=0,N=1,A=1] 
* CE 68: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 3+ subtract_helper(K,N,O,E,F,P,K,L,M):2+ concat(Q,R,S,T,U,K,L,M,V,W,K,L,M,V,W):1
     [E>=L,N>=L,B>=K,D>=S,D>=O,C>=N,W>=0,V>=0,M>=0,L>=2,K>=2,S>=0,F>=0,O>=0,I>=0,H>=0,G>=0,U=0,T=1,R=0,Q=1,P=0,J=0,A=1] 
* CE 69: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 3+ subtract_helper(N,O,P,E,F,Q,R,S,T):2+ concat(U,V,W,U,X,Y,S,T,Z,A1,K,L,M,B1,C1):2
     [X+A1>=C1,S+V>=L,B+U>=K+1,C1>=A1,M>=T,L>=S,E>=S,O>=S,B1>=U,K>=U+1,B>=U,D>=W,C>=V,D>=P,C>=O,C1>=1,A1>=0,T>=0,S>=2,X>=1,U>=2,W>=0,V>=1,F>=0,P>=0,I>=0,H>=0,G>=0,U+Z=B1+1,U+Y=K+1,R+U=K+1,N+U=K+1,Q=0,J=0,A=1] 
* CE 70: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 3+ subtract_helper(K,N,O,E,F,J,K,L,M):3+ concat(P,Q,R,S,T,K,L,M,U,V,K,L,M,U,V):1
     [E>=L,N>=L,B>=K,D>=R,L>=J+2,D>=O,C>=N,V>=0,U>=0,M>=0,K>=2,R>=0,J>=1,F>=0,O>=0,I>=0,H>=0,G>=0,T=0,S=1,Q=0,P=1,A=1] 
* CE 71: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 3+ subtract_helper(N,O,P,E,F,J,Q,R,S):3+ concat(T,U,V,T,W,X,R,S,Y,Z,K,L,M,A1,B1):2
     [W+Z>=B1,R+U>=L,B+T>=K+1,B1>=Z,M>=S,L>=R,E>=R,O>=R,A1>=T,K>=T+1,B>=T,D>=V,C>=U,R>=J+2,D>=P,C>=O,B1>=1,Z>=0,S>=0,W>=1,T>=2,V>=0,U>=1,J>=1,F>=0,P>=0,I>=0,H>=0,G>=0,T+Y=A1+1,T+X=K+1,Q+T=K+1,N+T=K+1,A=1] 

### Cost equations --> "Loop" of case_18/13 
* CEs [71] --> Loop 62 
* CEs [66] --> Loop 63 
* CEs [67,68,70] --> Loop 64 
* CEs [69] --> Loop 65 

#### Loops of case_18/13 
* Loop 62: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) [C+E>=L,2*C>=L,2*B>=K+1,L>=J+2,E>=J+2,C>=J+2,M>=0,K>=3,J>=1,I>=0,H>=0,G>=0,F>=0,D>=0,A=1] 
* Loop 63: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) [M>=0,J>=0,I>=0,H>=0,G>=0,F>=0,E>=1,D>=0,C>=0,B>=1,L=0,K=1,A=1] 
* Loop 64: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) [C>=L,B>=K,M>=0,L>=1,K>=2,J>=0,I>=0,H>=0,G>=0,F>=0,E>=1,D>=0,A=1] 
* Loop 65: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) [C+E>=L,2*C>=L,2*B>=K+1,M>=0,L>=2,K>=3,I>=0,H>=0,G>=0,F>=0,E>=2,D>=0,C>=2,J=0,A=1] 

### Ranking functions of CR case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) 

#### Partial ranking functions of CR case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) 


### Resulting Chains:case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) 
* [65]
* [64]
* [63]
* [62]


### Merging Chains  case_18/13 into  External patterns of execution 
* [[65]] --> 1 
* [[63]] --> 2 
* [[64]] --> 3 
* [[62]] --> 4 


### Specialization of cost equations get_elem/10 
* CE 4 is refined into CE [72] 
* CE 3 is refined into CE [73] 


#### Refined cost equations get_elem/10 
* CE 72: get_elem(A,B,C,D,E,F,G,H,I,J) = 5
     [E>=J,C>=I,B>=H,J>=1,I>=0,H>=1,D>=2,A>=2,G=0,F=0] 
* CE 73: get_elem(A,B,C,D,E,F,G,H,I,J) = 8+ get_elem(K,L,M,N,O,P,Q,H,I,J)
     [E>=O,C>=M,B>=L,Q>=0,P>=0,O>=0,N>=1,M>=0,L>=0,K>=1,J>=0,I>=0,H>=0,E>=1,B>=1,Q+1=G,P+1=F,N+1=D,K+1=A] 

### Cost equations --> "Loop" of get_elem/10 
* CEs [73] --> Loop 66 
* CEs [72] --> Loop 67 

#### Loops of get_elem/10 
* Loop 66: get_elem(A,B,C,D,E,F,G,H,I,J)->  get_elem(A',B',C',D',E',F',G',H,I,J)
                  [E>=E',C>=C',B>=B',G'>=0,F'>=0,E'>=0,D'>=1,C'>=0,B'>=0,A'>=1,J>=0,I>=0,H>=0,E>=1,B>=1,G'+1=G,F'+1=F,D'+1=D,A'+1=A] 
* Loop 67: get_elem(A,B,C,D,E,F,G,H,I,J) [E>=J,C>=I,B>=H,J>=1,I>=0,H>=1,D>=2,A>=2,G=0,F=0] 

### Ranking functions of CR get_elem(A,B,C,D,E,F,G,H,I,J) 
* RF of phase [66]: [A-1,D-1,F,G]

#### Partial ranking functions of CR get_elem(A,B,C,D,E,F,G,H,I,J) 
* Partial RF of phase [66]:
  - RF of loop [66:1]:
    A-1
    D-1
    F
    G

Discarded unfeasible chain [[66]]...(Non-terminating chain proved terminating)

### Resulting Chains:get_elem(A,B,C,D,E,F,G,H,I,J) 
* [[66],67]
* [67]


### Merging Chains  get_elem/10 into  External patterns of execution 
* [[67]] --> 1 
* [[67,[66]]] --> 2 


### Specialization of cost equations reverse_helper/15 
* CE 20 is refined into CE [74] 
* CE 19 is refined into CE [75,76,77,78] 


#### Refined cost equations reverse_helper/15 
* CE 74: reverse_helper(A,B,C,D,E,F,G,H,I,J,F,G,H,I,J) = 2
     [J>=0,I>=0,H>=0,G>=0,F>=0,C>=0,E=0,D=1,B=0,A=1] 
* CE 75: reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) = 5+ maxNorm(P,J,P):1+ maxNorm(Q,G,Q):1+ reverse_helper(R,S,T,U,V,W,Q,X,Y,P,K,L,M,N,O)
     [E>=V,C>=T,B>=S,B>=Q,Q>=G+1,E>=P,P>=J+1,X>=H,U>=1,R>=1,G>=0,J>=0,O>=0,N>=0,M>=0,L>=0,K>=0,I>=1,H>=0,F>=1,C>=0,I+1=Y,F+1=W,U+1=D,R+1=A] 
* CE 76: reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) = 5+ maxNorm(P,J,P):1+ maxNorm(Q,G,G):2+ reverse_helper(R,S,T,U,V,W,G,X,Y,P,K,L,M,N,O)
     [E>=V,C>=T,B>=S,G>=Q,B>=Q,E>=P,P>=J+1,X>=H,U>=1,R>=1,Q>=1,J>=0,O>=0,N>=0,M>=0,L>=0,K>=0,I>=1,H>=0,F>=1,C>=0,I+1=Y,F+1=W,U+1=D,R+1=A] 
* CE 77: reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) = 5+ maxNorm(P,J,J):2+ maxNorm(Q,G,Q):1+ reverse_helper(R,S,T,U,V,W,Q,X,Y,J,K,L,M,N,O)
     [E>=V,C>=T,B>=S,B>=Q,Q>=G+1,J>=P,E>=P,X>=H,U>=1,R>=1,G>=0,P>=1,O>=0,N>=0,M>=0,L>=0,K>=0,I>=1,H>=0,F>=1,C>=0,I+1=Y,F+1=W,U+1=D,R+1=A] 
* CE 78: reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) = 5+ maxNorm(P,J,J):2+ maxNorm(Q,G,G):2+ reverse_helper(R,S,T,U,V,W,G,X,Y,J,K,L,M,N,O)
     [E>=V,C>=T,B>=S,G>=Q,B>=Q,J>=P,E>=P,X>=H,U>=1,R>=1,Q>=1,P>=1,O>=0,N>=0,M>=0,L>=0,K>=0,I>=1,H>=0,F>=1,C>=0,I+1=Y,F+1=W,U+1=D,R+1=A] 

### Cost equations --> "Loop" of reverse_helper/15 
* CEs [75] --> Loop 68 
* CEs [77] --> Loop 69 
* CEs [76] --> Loop 70 
* CEs [78] --> Loop 71 
* CEs [74] --> Loop 72 

#### Loops of reverse_helper/15 
* Loop 68: reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)->  reverse_helper(A',B',C',D',E',F',G',H',I',J',K,L,M,N,O)
                  [E>=J',B>=G',E>=E',C>=C',B>=B',J'>=J+1,H'>=H,G'>=G+1,O>=0,N>=0,M>=0,L>=0,K>=0,J>=0,I>=1,H>=0,G>=0,F>=1,D>=2,C>=0,A>=2,I+1=I',F+1=F',D=D'+1,A=A'+1] 
* Loop 69: reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)->  reverse_helper(A',B',C',D',E',F',G',H',I',J,K,L,M,N,O)
                  [B>=G',E>=E',C>=C',B>=B',H'>=H,G'>=G+1,O>=0,N>=0,M>=0,L>=0,K>=0,J>=1,I>=1,H>=0,G>=0,F>=1,E>=1,D>=2,C>=0,A>=2,I+1=I',F+1=F',D=D'+1,A=A'+1] 
* Loop 70: reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)->  reverse_helper(A',B',C',D',E',F',G,G',H',I',K,L,M,N,O)
                  [E>=I',E>=E',C>=C',B>=B',I'>=J+1,G'>=H,O>=0,N>=0,M>=0,L>=0,K>=0,J>=0,I>=1,H>=0,G>=1,F>=1,D>=2,C>=0,B>=1,A>=2,I+1=H',F+1=F',D=D'+1,A=A'+1] 
* Loop 71: reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)->  reverse_helper(A',B',C',D',E',F',G,G',H',J,K,L,M,N,O)
                  [E>=E',C>=C',B>=B',G'>=H,O>=0,N>=0,M>=0,L>=0,K>=0,J>=1,I>=1,H>=0,G>=1,F>=1,E>=1,D>=2,C>=0,B>=1,A>=2,I+1=H',F+1=F',D=D'+1,A=A'+1] 
* Loop 72: reverse_helper(A,B,C,D,E,F,G,H,I,J,F,G,H,I,J) [J>=0,I>=0,H>=0,G>=0,F>=0,C>=0,E=0,D=1,B=0,A=1] 

### Ranking functions of CR reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) 
* RF of phase [68,69,70,71]: [A-1,D-1]

#### Partial ranking functions of CR reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) 
* Partial RF of phase [68,69,70,71]:
  - RF of loop [68:1,69:1]:
    B-G
  - RF of loop [68:1,69:1,70:1,71:1]:
    A-1
    D-1
  - RF of loop [68:1,70:1]:
    E-J

Discarded unfeasible chain [[68,69,70,71]]...(Non-terminating chain proved terminating)

### Resulting Chains:reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) 
* [[68,69,70,71],72]
* [72]


### Merging Chains  reverse_helper/15 into  External patterns of execution 
* [[72]] --> 1 
* [[72,[68,69,70,71]]] --> 2 


### Specialization of cost equations reverseL/10 
* CE 21 is refined into CE [79,80] 


#### Refined cost equations reverseL/10 
* CE 79: reverseL(A,B,C,D,E,F,G,H,I,J) = 2+ reverse_helper(K,L,C,M,N,O,P,H,Q,R,S,T,H,U,V):1
     [H>=0,C>=0,V=0,U=1,T=0,S=1,R=0,Q=1,P=0,O=1,N=0,M=1,L=0,K=1,J=0,I=1,G=0,F=1,E=0,D=1,B=0,A=1] 
* CE 80: reverseL(A,B,C,A,D,A,E,F,A,G) = 2+ reverse_helper(A,B,C,A,D,H,I,J,K,L,A,E,F,A,G):2
     [F>=J,G>=1,E>=1,J>=0,D>=1,A>=2,C>=0,B>=1,L=0,K=1,I=0,H=1] 

### Cost equations --> "Loop" of reverseL/10 
* CEs [80] --> Loop 73 
* CEs [79] --> Loop 74 

#### Loops of reverseL/10 
* Loop 73: reverseL(A,B,C,A,D,A,E,F,A,G) [G>=1,F>=0,E>=1,D>=1,C>=0,B>=1,A>=2] 
* Loop 74: reverseL(A,B,C,D,E,F,G,H,I,J) [H>=0,C>=0,J=0,I=1,G=0,F=1,E=0,D=1,B=0,A=1] 

### Ranking functions of CR reverseL(A,B,C,D,E,F,G,H,I,J) 

#### Partial ranking functions of CR reverseL(A,B,C,D,E,F,G,H,I,J) 


### Resulting Chains:reverseL(A,B,C,D,E,F,G,H,I,J) 
* [74]
* [73]


### Merging Chains  reverseL/10 into  External patterns of execution 
* [[74]] --> 1 
* [[73]] --> 2 


### Specialization of cost equations split_helper/21 
* CE 24 is refined into CE [81,82,83,84] 
* CE 23 is refined into CE [85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101] 


#### Refined cost equations split_helper/21 
* CE 81: split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) = 8+ maxNorm(V,N,V):1+ maxNorm(W,K,W):1+ split_helper(X,Y,Z,A1,B1,F,G,C1,D1,E1,W,F1,G1,V,O,P,Q,R,S,T,U)
     [E>=B1,C>=Z,B>=Y,B>=W,W>=K+1,E>=V,V>=N+1,F1>=L,G>=I+1,F>=H+1,A1>=1,X>=1,K>=0,N>=0,U>=0,T>=0,S>=0,R>=0,Q>=0,P>=0,O>=0,M>=1,L>=0,J>=1,I>=0,H>=0,C>=0,M+1=G1,J+1=E1,I+1=D1,H+1=C1,A1+1=D,X+1=A] 
* CE 82: split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) = 8+ maxNorm(V,N,V):1+ maxNorm(W,K,K):2+ split_helper(X,Y,Z,A1,B1,F,G,C1,D1,E1,K,F1,G1,V,O,P,Q,R,S,T,U)
     [E>=B1,C>=Z,B>=Y,K>=W,B>=W,E>=V,V>=N+1,F1>=L,G>=I+1,F>=H+1,A1>=1,X>=1,W>=1,N>=0,U>=0,T>=0,S>=0,R>=0,Q>=0,P>=0,O>=0,M>=1,L>=0,J>=1,I>=0,H>=0,C>=0,M+1=G1,J+1=E1,I+1=D1,H+1=C1,A1+1=D,X+1=A] 
* CE 83: split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) = 8+ maxNorm(V,N,N):2+ maxNorm(W,K,W):1+ split_helper(X,Y,Z,A1,B1,F,G,C1,D1,E1,W,F1,G1,N,O,P,Q,R,S,T,U)
     [E>=B1,C>=Z,B>=Y,B>=W,W>=K+1,N>=V,E>=V,F1>=L,G>=I+1,F>=H+1,A1>=1,X>=1,K>=0,V>=1,U>=0,T>=0,S>=0,R>=0,Q>=0,P>=0,O>=0,M>=1,L>=0,J>=1,I>=0,H>=0,C>=0,M+1=G1,J+1=E1,I+1=D1,H+1=C1,A1+1=D,X+1=A] 
* CE 84: split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) = 8+ maxNorm(V,N,N):2+ maxNorm(W,K,K):2+ split_helper(X,Y,Z,A1,B1,F,G,C1,D1,E1,K,F1,G1,N,O,P,Q,R,S,T,U)
     [E>=B1,C>=Z,B>=Y,K>=W,B>=W,N>=V,E>=V,F1>=L,G>=I+1,F>=H+1,A1>=1,X>=1,W>=1,V>=1,U>=0,T>=0,S>=0,R>=0,Q>=0,P>=0,O>=0,M>=1,L>=0,J>=1,I>=0,H>=0,C>=0,M+1=G1,J+1=E1,I+1=D1,H+1=C1,A1+1=D,X+1=A] 
* CE 85: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,K,L,M,A,B,N,O,D,E) = 4+ reverseL(P,Q,J,R,S,T,U,V,W,X):1+ maxNorm(Y,E,E):2+ maxNorm(Z,D,D):2+ maxNorm(A1,B,B):2+ maxNorm(B1,A,A):2
     [N>=V,N>=C,A>=1,B>=0,D>=1,E>=0,V>=0,J>=0,G>=0,F>=0,C>=0,B1=1,A1=0,Z=1,Y=0,X=0,W=1,U=0,T=1,S=0,R=1,Q=0,P=1,O=1,M=1,L=0,K=1,I=0,H=1] 
* CE 86: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,H,K,L,H,M,N,O,H,P) = 4+ reverseL(H,I,J,H,K,H,M,Q,H,P):2+ maxNorm(P,E,P):1+ maxNorm(H,D,H):1+ maxNorm(M,B,M):1+ maxNorm(H,A,H):1
     [H>=A+1,M>=B+1,H>=D+1,P>=E+1,N>=Q,N>=C,A>=1,B>=0,D>=1,E>=0,Q>=0,K>=1,J>=0,I>=1,G>=0,F>=0,C>=0,O=1,L=1] 
* CE 87: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,H,K,L,A,M,N,O,H,P) = 4+ reverseL(H,I,J,H,K,H,M,Q,H,P):2+ maxNorm(P,E,P):1+ maxNorm(H,D,H):1+ maxNorm(M,B,M):1+ maxNorm(H,A,A):2
     [A>=H,M>=B+1,H>=D+1,P>=E+1,N>=Q,N>=C,B>=0,D>=1,E>=0,Q>=0,K>=1,J>=0,I>=1,G>=0,F>=0,C>=0,O=1,L=1] 
* CE 88: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,H,K,L,H,B,M,N,H,O) = 4+ reverseL(H,I,J,H,K,H,P,Q,H,O):2+ maxNorm(O,E,O):1+ maxNorm(H,D,H):1+ maxNorm(P,B,B):2+ maxNorm(H,A,H):1
     [H>=A+1,B>=P,H>=D+1,O>=E+1,M>=Q,M>=C,A>=1,P>=1,D>=1,E>=0,Q>=0,K>=1,J>=0,I>=1,G>=0,F>=0,C>=0,N=1,L=1] 
* CE 89: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,H,K,L,A,B,M,N,H,O) = 4+ reverseL(H,I,J,H,K,H,P,Q,H,O):2+ maxNorm(O,E,O):1+ maxNorm(H,D,H):1+ maxNorm(P,B,B):2+ maxNorm(H,A,A):2
     [A>=H,B>=P,H>=D+1,O>=E+1,M>=Q,M>=C,P>=1,D>=1,E>=0,Q>=0,K>=1,J>=0,I>=1,G>=0,F>=0,C>=0,N=1,L=1] 
* CE 90: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,H,K,L,H,M,N,O,D,P) = 4+ reverseL(H,I,J,H,K,H,M,Q,H,P):2+ maxNorm(P,E,P):1+ maxNorm(H,D,D):2+ maxNorm(M,B,M):1+ maxNorm(H,A,H):1
     [D>=H,H>=A+1,M>=B+1,P>=E+1,N>=Q,N>=C,A>=1,B>=0,E>=0,Q>=0,K>=1,J>=0,I>=1,G>=0,F>=0,C>=0,O=1,L=1] 
* CE 91: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,H,K,L,A,M,N,O,D,P) = 4+ reverseL(H,I,J,H,K,H,M,Q,H,P):2+ maxNorm(P,E,P):1+ maxNorm(H,D,D):2+ maxNorm(M,B,M):1+ maxNorm(H,A,A):2
     [A>=H,D>=H,M>=B+1,P>=E+1,N>=Q,N>=C,H>=2,B>=0,E>=0,Q>=0,K>=1,J>=0,I>=1,G>=0,F>=0,C>=0,O=1,L=1] 
* CE 92: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,H,K,L,H,B,M,N,D,O) = 4+ reverseL(H,I,J,H,K,H,P,Q,H,O):2+ maxNorm(O,E,O):1+ maxNorm(H,D,D):2+ maxNorm(P,B,B):2+ maxNorm(H,A,H):1
     [D>=H,H>=A+1,B>=P,O>=E+1,M>=Q,M>=C,A>=1,P>=1,E>=0,Q>=0,K>=1,J>=0,I>=1,G>=0,F>=0,C>=0,N=1,L=1] 
* CE 93: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,H,K,L,A,B,M,N,D,O) = 4+ reverseL(H,I,J,H,K,H,P,Q,H,O):2+ maxNorm(O,E,O):1+ maxNorm(H,D,D):2+ maxNorm(P,B,B):2+ maxNorm(H,A,A):2
     [A>=H,D>=H,B>=P,O>=E+1,M>=Q,M>=C,H>=2,P>=1,E>=0,Q>=0,K>=1,J>=0,I>=1,G>=0,F>=0,C>=0,N=1,L=1] 
* CE 94: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,H,K,L,H,M,N,O,H,E) = 4+ reverseL(H,I,J,H,K,H,M,P,H,Q):2+ maxNorm(Q,E,E):2+ maxNorm(H,D,H):1+ maxNorm(M,B,M):1+ maxNorm(H,A,H):1
     [H>=A+1,M>=B+1,H>=D+1,E>=Q,N>=P,N>=C,A>=1,B>=0,D>=1,Q>=1,P>=0,K>=1,J>=0,I>=1,G>=0,F>=0,C>=0,O=1,L=1] 
* CE 95: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,H,K,L,A,M,N,O,H,E) = 4+ reverseL(H,I,J,H,K,H,M,P,H,Q):2+ maxNorm(Q,E,E):2+ maxNorm(H,D,H):1+ maxNorm(M,B,M):1+ maxNorm(H,A,A):2
     [A>=H,M>=B+1,H>=D+1,E>=Q,N>=P,N>=C,B>=0,D>=1,Q>=1,P>=0,K>=1,J>=0,I>=1,G>=0,F>=0,C>=0,O=1,L=1] 
* CE 96: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,H,K,L,H,B,M,N,H,E) = 4+ reverseL(H,I,J,H,K,H,O,P,H,Q):2+ maxNorm(Q,E,E):2+ maxNorm(H,D,H):1+ maxNorm(O,B,B):2+ maxNorm(H,A,H):1
     [H>=A+1,B>=O,H>=D+1,E>=Q,M>=P,M>=C,A>=1,O>=1,D>=1,Q>=1,P>=0,K>=1,J>=0,I>=1,G>=0,F>=0,C>=0,N=1,L=1] 
* CE 97: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,H,K,L,A,B,M,N,H,E) = 4+ reverseL(H,I,J,H,K,H,O,P,H,Q):2+ maxNorm(Q,E,E):2+ maxNorm(H,D,H):1+ maxNorm(O,B,B):2+ maxNorm(H,A,A):2
     [A>=H,B>=O,H>=D+1,E>=Q,M>=P,M>=C,O>=1,D>=1,Q>=1,P>=0,K>=1,J>=0,I>=1,G>=0,F>=0,C>=0,N=1,L=1] 
* CE 98: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,H,K,L,H,M,N,O,D,E) = 4+ reverseL(H,I,J,H,K,H,M,P,H,Q):2+ maxNorm(Q,E,E):2+ maxNorm(H,D,D):2+ maxNorm(M,B,M):1+ maxNorm(H,A,H):1
     [D>=H,H>=A+1,M>=B+1,E>=Q,N>=P,N>=C,A>=1,B>=0,Q>=1,P>=0,K>=1,J>=0,I>=1,G>=0,F>=0,C>=0,O=1,L=1] 
* CE 99: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,H,K,L,A,M,N,O,D,E) = 4+ reverseL(H,I,J,H,K,H,M,P,H,Q):2+ maxNorm(Q,E,E):2+ maxNorm(H,D,D):2+ maxNorm(M,B,M):1+ maxNorm(H,A,A):2
     [A>=H,D>=H,M>=B+1,E>=Q,N>=P,N>=C,H>=2,B>=0,Q>=1,P>=0,K>=1,J>=0,I>=1,G>=0,F>=0,C>=0,O=1,L=1] 
* CE 100: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,H,K,L,H,B,M,N,D,E) = 4+ reverseL(H,I,J,H,K,H,O,P,H,Q):2+ maxNorm(Q,E,E):2+ maxNorm(H,D,D):2+ maxNorm(O,B,B):2+ maxNorm(H,A,H):1
     [D>=H,H>=A+1,B>=O,E>=Q,M>=P,M>=C,A>=1,O>=1,Q>=1,P>=0,K>=1,J>=0,I>=1,G>=0,F>=0,C>=0,N=1,L=1] 
* CE 101: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,H,K,L,A,B,M,N,D,E) = 4+ reverseL(H,I,J,H,K,H,O,P,H,Q):2+ maxNorm(Q,E,E):2+ maxNorm(H,D,D):2+ maxNorm(O,B,B):2+ maxNorm(H,A,A):2
     [A>=H,D>=H,B>=O,E>=Q,M>=P,M>=C,H>=2,O>=1,Q>=1,P>=0,K>=1,J>=0,I>=1,G>=0,F>=0,C>=0,N=1,L=1] 

### Cost equations --> "Loop" of split_helper/21 
* CEs [86] --> Loop 75 
* CEs [94] --> Loop 76 
* CEs [90] --> Loop 77 
* CEs [98] --> Loop 78 
* CEs [88] --> Loop 79 
* CEs [96] --> Loop 80 
* CEs [92] --> Loop 81 
* CEs [100] --> Loop 82 
* CEs [87] --> Loop 83 
* CEs [95] --> Loop 84 
* CEs [91] --> Loop 85 
* CEs [99] --> Loop 86 
* CEs [89] --> Loop 87 
* CEs [97] --> Loop 88 
* CEs [93] --> Loop 89 
* CEs [101] --> Loop 90 
* CEs [85] --> Loop 91 
* CEs [81] --> Loop 92 
* CEs [83] --> Loop 93 
* CEs [82] --> Loop 94 
* CEs [84] --> Loop 95 

#### Loops of split_helper/21 
* Loop 75: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,H,K,L,H,M,N,O,H,P) [P>=E+1,H>=D+1,N>=C,M>=B+1,H>=A+1,K>=1,J>=0,I>=1,G>=0,F>=0,E>=0,D>=1,C>=0,B>=0,A>=1,O=1,L=1] 
* Loop 76: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,H,K,L,H,M,N,O,H,E) [H>=D+1,N>=C,M>=B+1,H>=A+1,K>=1,J>=0,I>=1,G>=0,F>=0,E>=1,D>=1,C>=0,B>=0,A>=1,O=1,L=1] 
* Loop 77: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,H,K,L,H,M,N,O,D,P) [D>=H,P>=E+1,N>=C,M>=B+1,H>=A+1,K>=1,J>=0,I>=1,G>=0,F>=0,E>=0,C>=0,B>=0,A>=1,O=1,L=1] 
* Loop 78: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,H,K,L,H,M,N,O,D,E) [D>=H,N>=C,M>=B+1,H>=A+1,K>=1,J>=0,I>=1,G>=0,F>=0,E>=1,C>=0,B>=0,A>=1,O=1,L=1] 
* Loop 79: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,H,K,L,H,B,M,N,H,O) [O>=E+1,H>=D+1,M>=C,H>=A+1,K>=1,J>=0,I>=1,G>=0,F>=0,E>=0,D>=1,C>=0,B>=1,A>=1,N=1,L=1] 
* Loop 80: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,H,K,L,H,B,M,N,H,E) [H>=D+1,M>=C,H>=A+1,K>=1,J>=0,I>=1,G>=0,F>=0,E>=1,D>=1,C>=0,B>=1,A>=1,N=1,L=1] 
* Loop 81: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,H,K,L,H,B,M,N,D,O) [D>=H,O>=E+1,M>=C,H>=A+1,K>=1,J>=0,I>=1,G>=0,F>=0,E>=0,C>=0,B>=1,A>=1,N=1,L=1] 
* Loop 82: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,H,K,L,H,B,M,N,D,E) [D>=H,M>=C,H>=A+1,K>=1,J>=0,I>=1,G>=0,F>=0,E>=1,C>=0,B>=1,A>=1,N=1,L=1] 
* Loop 83: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,H,K,L,A,M,N,O,H,P) [A>=H,P>=E+1,H>=D+1,N>=C,M>=B+1,K>=1,J>=0,I>=1,G>=0,F>=0,E>=0,D>=1,C>=0,B>=0,O=1,L=1] 
* Loop 84: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,H,K,L,A,M,N,O,H,E) [A>=H,H>=D+1,N>=C,M>=B+1,K>=1,J>=0,I>=1,G>=0,F>=0,E>=1,D>=1,C>=0,B>=0,O=1,L=1] 
* Loop 85: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,H,K,L,A,M,N,O,D,P) [D>=H,A>=H,P>=E+1,N>=C,M>=B+1,K>=1,J>=0,I>=1,H>=2,G>=0,F>=0,E>=0,C>=0,B>=0,O=1,L=1] 
* Loop 86: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,H,K,L,A,M,N,O,D,E) [D>=H,A>=H,N>=C,M>=B+1,K>=1,J>=0,I>=1,H>=2,G>=0,F>=0,E>=1,C>=0,B>=0,O=1,L=1] 
* Loop 87: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,H,K,L,A,B,M,N,H,O) [A>=H,O>=E+1,H>=D+1,M>=C,K>=1,J>=0,I>=1,G>=0,F>=0,E>=0,D>=1,C>=0,B>=1,N=1,L=1] 
* Loop 88: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,H,K,L,A,B,M,N,H,E) [A>=H,H>=D+1,M>=C,K>=1,J>=0,I>=1,G>=0,F>=0,E>=1,D>=1,C>=0,B>=1,N=1,L=1] 
* Loop 89: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,H,K,L,A,B,M,N,D,O) [D>=H,A>=H,O>=E+1,M>=C,K>=1,J>=0,I>=1,H>=2,G>=0,F>=0,E>=0,C>=0,B>=1,N=1,L=1] 
* Loop 90: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,H,K,L,A,B,M,N,D,E) [D>=H,A>=H,M>=C,K>=1,J>=0,I>=1,H>=2,G>=0,F>=0,E>=1,C>=0,B>=1,N=1,L=1] 
* Loop 91: split_helper(A,B,C,D,E,F,G,F,G,H,I,J,K,L,M,A,B,N,O,D,E) [N>=C,J>=0,G>=0,F>=0,E>=0,D>=1,C>=0,B>=0,A>=1,O=1,M=1,L=0,K=1,I=0,H=1] 
* Loop 92: split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)->  split_helper(A',B',C',D',E',F,G,F',G',H',I',J',K',L',O,P,Q,R,S,T,U)
                  [E>=L',B>=I',E>=E',C>=C',B>=B',L'>=N+1,J'>=L,I'>=K+1,G>=I+1,F>=H+1,U>=0,T>=0,S>=0,R>=0,Q>=0,P>=0,O>=0,N>=0,M>=1,L>=0,K>=0,J>=1,I>=0,H>=0,D>=2,C>=0,A>=2,M+1=K',J+1=H',I+1=G',H+1=F',D=D'+1,A=A'+1] 
* Loop 93: split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)->  split_helper(A',B',C',D',E',F,G,F',G',H',I',J',K',N,O,P,Q,R,S,T,U)
                  [B>=I',E>=E',C>=C',B>=B',J'>=L,I'>=K+1,G>=I+1,F>=H+1,U>=0,T>=0,S>=0,R>=0,Q>=0,P>=0,O>=0,N>=1,M>=1,L>=0,K>=0,J>=1,I>=0,H>=0,E>=1,D>=2,C>=0,A>=2,M+1=K',J+1=H',I+1=G',H+1=F',D=D'+1,A=A'+1] 
* Loop 94: split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)->  split_helper(A',B',C',D',E',F,G,F',G',H',K,I',J',K',O,P,Q,R,S,T,U)
                  [E>=K',E>=E',C>=C',B>=B',K'>=N+1,I'>=L,G>=I+1,F>=H+1,U>=0,T>=0,S>=0,R>=0,Q>=0,P>=0,O>=0,N>=0,M>=1,L>=0,K>=1,J>=1,I>=0,H>=0,D>=2,C>=0,B>=1,A>=2,M+1=J',J+1=H',I+1=G',H+1=F',D=D'+1,A=A'+1] 
* Loop 95: split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)->  split_helper(A',B',C',D',E',F,G,F',G',H',K,I',J',N,O,P,Q,R,S,T,U)
                  [E>=E',C>=C',B>=B',I'>=L,G>=I+1,F>=H+1,U>=0,T>=0,S>=0,R>=0,Q>=0,P>=0,O>=0,N>=1,M>=1,L>=0,K>=1,J>=1,I>=0,H>=0,E>=1,D>=2,C>=0,B>=1,A>=2,M+1=J',J+1=H',I+1=G',H+1=F',D=D'+1,A=A'+1] 

### Ranking functions of CR split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) 
* RF of phase [92,93,94,95]: [A-1,D-1,F-H,G-I]

#### Partial ranking functions of CR split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) 
* Partial RF of phase [92,93,94,95]:
  - RF of loop [92:1,93:1]:
    B-K
  - RF of loop [92:1,93:1,94:1,95:1]:
    A-1
    D-1
    F-H
    G-I
  - RF of loop [92:1,94:1]:
    E-N

Discarded unfeasible chain [[92,93,94,95]]...(Non-terminating chain proved terminating)

### Resulting Chains:split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) 
* [[92,93,94,95],90]
* [[92,93,94,95],89]
* [[92,93,94,95],88]
* [[92,93,94,95],87]
* [[92,93,94,95],86]
* [[92,93,94,95],85]
* [[92,93,94,95],84]
* [[92,93,94,95],83]
* [[92,93,94,95],82]
* [[92,93,94,95],81]
* [[92,93,94,95],80]
* [[92,93,94,95],79]
* [[92,93,94,95],78]
* [[92,93,94,95],77]
* [[92,93,94,95],76]
* [[92,93,94,95],75]
* [91]
* [90]
* [89]
* [88]
* [87]
* [86]
* [85]
* [84]
* [83]
* [82]
* [81]
* [80]
* [79]
* [78]
* [77]
* [76]
* [75]


### Merging Chains  split_helper/21 into  External patterns of execution 
* [[91]] --> 1 
* [[90]] --> 2 
* [[89]] --> 3 
* [[88]] --> 4 
* [[87]] --> 5 
* [[86]] --> 6 
* [[85]] --> 7 
* [[84]] --> 8 
* [[83]] --> 9 
* [[82]] --> 10 
* [[81]] --> 11 
* [[80]] --> 12 
* [[79]] --> 13 
* [[78]] --> 14 
* [[77]] --> 15 
* [[76]] --> 16 
* [[75]] --> 17 
* [[85,[92,93,94,95]],[86,[92,93,94,95]],[89,[92,93,94,95]],[90,[92,93,94,95]]] --> 18 
* [[83,[92,93,94,95]],[84,[92,93,94,95]],[87,[92,93,94,95]],[88,[92,93,94,95]]] --> 19 
* [[77,[92,93,94,95]],[78,[92,93,94,95]],[81,[92,93,94,95]],[82,[92,93,94,95]]] --> 20 
* [[75,[92,93,94,95]],[76,[92,93,94,95]],[79,[92,93,94,95]],[80,[92,93,94,95]]] --> 21 


### Specialization of cost equations split/14 
* CE 25 is refined into CE [102,103,104,105,106] 


#### Refined cost equations split/14 
* CE 102: split(A,B,C,D,E,F,G,H,A,B,I,J,D,E) = 3+ split_helper(A,B,C,D,E,K,L,M,N,O,P,Q,R,S,T,A,B,I,U,D,E):1
     [I>=C,E>=0,D>=1,B>=0,A>=1,Q>=0,C>=0,U=1,T=1,S=0,R=1,P=0,O=1,N=0,M=0,L=0,K=0,J=1,H=1,G=0,F=0] 
* CE 103: split(A,B,C,D,E,F,F,G,H,I,J,K,L,M) = 3+ split_helper(N,B,C,D,E,F,F,O,P,Q,R,S,T,U,V,H,I,J,W,X,M):18
     [H>=F+1,D>=2*F+1,M>=1,J>=0,I>=1,S>=0,F>=1,E>=1,C>=0,B>=1,D=F+X,F+H=N,D=F+L,F+H=A,W=1,V=1,U=0,T=1,R=0,Q=1,P=0,O=0,K=1,G=1] 
* CE 104: split(A,B,C,D,E,F,F,G,H,I,J,K,L,M) = 3+ split_helper(N,B,C,D,E,F,F,O,P,Q,R,S,T,U,V,H,I,J,W,X,M):19
     [H>=F+1,D>=F+1,2*F>=D,M>=1,J>=0,I>=1,S>=0,E>=1,C>=0,B>=1,F+H=N,F+H=A,F+1=X,F+1=L,W=1,V=1,U=0,T=1,R=0,Q=1,P=0,O=0,K=1,G=1] 
* CE 105: split(A,B,C,D,E,F,F,G,H,I,J,K,L,M) = 3+ split_helper(A,B,C,D,E,F,F,N,O,P,Q,R,S,T,U,V,I,J,W,X,M):20
     [A>=F+1,2*F>=A,D>=2*F+1,M>=1,J>=0,I>=1,R>=0,E>=1,C>=0,B>=1,D=F+X,D=F+L,F+1=V,F+1=H,W=1,U=1,T=0,S=1,Q=0,P=1,O=0,N=0,K=1,G=1] 
* CE 106: split(A,B,C,D,E,F,F,G,H,I,J,K,L,M) = 3+ split_helper(A,B,C,D,E,F,F,N,O,P,Q,R,S,T,U,V,I,J,W,X,M):21
     [D>=F+1,A>=F+1,2*F>=D,2*F>=A,M>=1,J>=0,I>=1,R>=0,E>=1,C>=0,B>=1,F+1=X,F+1=V,F+1=L,F+1=H,W=1,U=1,T=0,S=1,Q=0,P=1,O=0,N=0,K=1,G=1] 

### Cost equations --> "Loop" of split/14 
* CEs [103] --> Loop 96 
* CEs [104] --> Loop 97 
* CEs [105] --> Loop 98 
* CEs [106] --> Loop 99 
* CEs [102] --> Loop 100 

#### Loops of split/14 
* Loop 96: split(A,B,C,D,E,F,F,G,H,I,J,K,L,M) [D>=2*F+1,A>=2*F+1,M>=1,J>=0,I>=1,F>=1,E>=1,C>=0,B>=1,A=F+H,F+L=D,K=1,G=1] 
* Loop 97: split(A,B,C,D,E,F,F,G,H,I,J,K,L,M) [D>=F+1,2*F>=D,A>=2*F+1,M>=1,J>=0,I>=1,E>=1,C>=0,B>=1,A=F+H,F+1=L,K=1,G=1] 
* Loop 98: split(A,B,C,D,E,F,F,G,H,I,J,K,L,M) [A>=F+1,2*F>=A,D>=2*F+1,M>=1,J>=0,I>=1,E>=1,C>=0,B>=1,F+L=D,F+1=H,K=1,G=1] 
* Loop 99: split(A,B,C,D,E,F,F,G,H,I,J,K,L,M) [D>=F+1,A>=F+1,2*F>=D,2*F>=A,M>=1,J>=0,I>=1,E>=1,C>=0,B>=1,F+1=L,F+1=H,K=1,G=1] 
* Loop 100: split(A,B,C,D,E,F,G,H,A,B,I,J,D,E) [I>=C,E>=0,D>=1,C>=0,B>=0,A>=1,J=1,H=1,G=0,F=0] 

### Ranking functions of CR split(A,B,C,D,E,F,G,H,I,J,K,L,M,N) 

#### Partial ranking functions of CR split(A,B,C,D,E,F,G,H,I,J,K,L,M,N) 


### Resulting Chains:split(A,B,C,D,E,F,G,H,I,J,K,L,M,N) 
* [100]
* [99]
* [98]
* [97]
* [96]


### Merging Chains  split/14 into  External patterns of execution 
* [[100]] --> 1 
* [[99]] --> 2 
* [[98]] --> 3 
* [[97]] --> 4 
* [[96]] --> 5 


### Specialization of cost equations subtract/7 
* CE 26 is refined into CE [107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130] 


#### Refined cost equations subtract/7 
* CE 107: subtract(A,B,C,D,E,F,G) = 9+ get_elem(H,B,C,I,J,K,L,M,N,O):1+ split(P,B,C,Q,J,R,S,T,U,V,W,X,Y,Z):2+ case_18(A1,B1,V,W,M,N,C1,B,C,D1,E1,F,G):1
     [M+V>=F,2*V>=F,C>=N,B>=M,J>=O,G>=0,F>=2,N>=0,M>=2,W>=0,V>=2,Z>=1,O>=1,E1=3,D1=0,C1=2,B1=2,A1=1,Y=2,X=1,U=2,T=1,S=1,R=1,Q=2,P=2,L=0,K=0,I=2,H=2,E=3,D=0,A=2] 
* CE 108: subtract(A,B,C,D,E,F,G) = 9+ get_elem(H,B,C,I,J,K,L,M,N,O):1+ split(P,B,C,Q,J,R,S,T,U,V,W,X,Y,Z):2+ case_18(A1,B1,V,W,M,N,C1,B,C,D1,E1,F1,G):2
     [C>=N,B>=M,J>=O,G>=0,N>=0,M>=1,W>=0,V>=1,Z>=1,O>=1,F1=0,E1=1,D1=0,C1=2,B1=2,A1=1,Y=2,X=1,U=2,T=1,S=1,R=1,Q=2,P=2,L=0,K=0,I=2,H=2,F=0,E=1,D=0,A=2] 
* CE 109: subtract(A,B,C,D,E,F,G) = 9+ get_elem(H,B,C,I,J,K,L,M,N,O):1+ split(P,B,C,Q,J,R,S,T,U,V,W,X,Y,Z):2+ case_18(A1,B1,V,W,M,N,C1,B,C,D1,E1,F,G):3
     [V>=F,C>=N,B>=M,J>=O,G>=0,F>=1,N>=0,M>=1,W>=0,Z>=1,O>=1,E1=2,D1=0,C1=2,B1=2,A1=1,Y=2,X=1,U=2,T=1,S=1,R=1,Q=2,P=2,L=0,K=0,I=2,H=2,E=2,D=0,A=2] 
* CE 110: subtract(A,B,C,D,E,F,G) = 9+ get_elem(H,B,C,I,J,K,L,M,N,O):1+ split(P,B,C,I,J,Q,R,S,T,U,V,W,X,Y):3+ case_18(Z,A1,U,V,M,N,B1,B,C,C1,D1,F,G):1
     [M+U>=F,2*U>=F,C>=N,B>=M,J>=O,G>=0,F>=2,N>=0,M>=2,V>=0,U>=2,Y>=1,I>=3,O>=1,I=X+1,D1=3,C1=0,B1=2,A1=2,Z=1,W=1,T=2,S=1,R=1,Q=1,P=2,L=0,K=0,H=2,E=3,D=0,A=2] 
* CE 111: subtract(A,B,C,D,E,F,G) = 9+ get_elem(H,B,C,I,J,K,L,M,N,O):1+ split(P,B,C,I,J,Q,R,S,T,U,V,W,X,Y):3+ case_18(Z,A1,U,V,M,N,B1,B,C,C1,D1,E1,G):2
     [C>=N,B>=M,J>=O,G>=0,N>=0,M>=1,V>=0,U>=1,Y>=1,I>=3,O>=1,I=X+1,E1=0,D1=1,C1=0,B1=2,A1=2,Z=1,W=1,T=2,S=1,R=1,Q=1,P=2,L=0,K=0,H=2,F=0,E=1,D=0,A=2] 
* CE 112: subtract(A,B,C,D,E,F,G) = 9+ get_elem(H,B,C,I,J,K,L,M,N,O):1+ split(P,B,C,I,J,Q,R,S,T,U,V,W,X,Y):3+ case_18(Z,A1,U,V,M,N,B1,B,C,C1,D1,F,G):3
     [U>=F,C>=N,B>=M,J>=O,G>=0,F>=1,N>=0,M>=1,V>=0,Y>=1,I>=3,O>=1,I=X+1,D1=2,C1=0,B1=2,A1=2,Z=1,W=1,T=2,S=1,R=1,Q=1,P=2,L=0,K=0,H=2,E=2,D=0,A=2] 
* CE 113: subtract(A,B,C,D,E,F,G) = 9+ get_elem(A,B,C,H,I,J,K,L,M,N):1+ split(A,B,C,O,I,P,Q,R,S,T,U,V,W,X):4+ case_18(Y,Z,T,U,L,M,A,B,C,A1,E,F,G):1
     [L+T>=F,2*T>=F,2*A>=E+3,C>=M,B>=L,I>=N,G>=0,F>=2,E>=3,M>=0,L>=2,U>=0,T>=2,X>=1,N>=1,A=Z+1,A=S+1,A1=0,Y=1,W=2,V=1,R=1,Q=1,P=1,O=2,K=0,J=0,H=2,D=0] 
* CE 114: subtract(A,B,C,D,E,F,G) = 9+ get_elem(H,B,C,I,J,K,L,M,N,O):1+ split(P,B,C,Q,J,R,S,T,U,V,W,X,Y,Z):4+ case_18(A1,U,V,W,M,N,B1,B,C,C1,D1,E1,G):2
     [C>=N,B>=M,J>=O,G>=0,N>=0,M>=1,W>=0,V>=1,U>=2,Z>=1,O>=1,U+1=B1,U+1=P,U+1=H,U+1=A,E1=0,D1=1,C1=0,A1=1,Y=2,X=1,T=1,S=1,R=1,Q=2,L=0,K=0,I=2,F=0,E=1,D=0] 
* CE 115: subtract(A,B,C,D,E,F,G) = 9+ get_elem(A,B,C,H,I,J,K,L,M,N):1+ split(A,B,C,O,I,P,Q,R,S,T,U,V,W,X):4+ case_18(Y,Z,T,U,L,M,A,B,C,A1,E,F,G):3
     [T>=F,A>=E+1,C>=M,B>=L,I>=N,G>=0,F>=1,E>=2,M>=0,L>=1,U>=0,X>=1,N>=1,A=Z+1,A=S+1,A1=0,Y=1,W=2,V=1,R=1,Q=1,P=1,O=2,K=0,J=0,H=2,D=0] 
* CE 116: subtract(A,B,C,D,E,F,G) = 9+ get_elem(A,B,C,H,I,J,K,L,M,N):1+ split(A,B,C,H,I,O,P,Q,R,S,T,U,V,W):5+ case_18(X,Y,S,T,L,M,A,B,C,Z,E,F,G):1
     [L+S>=F,2*S>=F,2*A>=E+3,C>=M,B>=L,I>=N,G>=0,F>=2,E>=3,M>=0,L>=2,T>=0,S>=2,W>=1,H>=3,N>=1,A=Y+1,H=V+1,A=R+1,Z=0,X=1,U=1,Q=1,P=1,O=1,K=0,J=0,D=0] 
* CE 117: subtract(A,B,C,D,E,F,G) = 9+ get_elem(H,B,C,I,J,K,L,M,N,O):1+ split(P,B,C,I,J,Q,R,S,T,U,V,W,X,Y):5+ case_18(Z,T,U,V,M,N,A1,B,C,B1,C1,D1,G):2
     [C>=N,B>=M,J>=O,G>=0,N>=0,M>=1,V>=0,U>=1,T>=2,Y>=1,I>=3,O>=1,T+1=A1,I=X+1,T+1=P,T+1=H,T+1=A,D1=0,C1=1,B1=0,Z=1,W=1,S=1,R=1,Q=1,L=0,K=0,F=0,E=1,D=0] 
* CE 118: subtract(A,B,C,D,E,F,G) = 9+ get_elem(A,B,C,H,I,J,K,L,M,N):1+ split(A,B,C,H,I,O,P,Q,R,S,T,U,V,W):5+ case_18(X,Y,S,T,L,M,A,B,C,Z,E,F,G):3
     [S>=F,A>=E+1,C>=M,B>=L,I>=N,G>=0,F>=1,E>=2,M>=0,L>=1,T>=0,W>=1,H>=3,N>=1,A=Y+1,H=V+1,A=R+1,Z=0,X=1,U=1,Q=1,P=1,O=1,K=0,J=0,D=0] 
* CE 119: subtract(A,B,C,D,E,F,G) = 9+ get_elem(A,B,C,H,I,J,K,L,M,N):2+ split(A,B,C,H,I,O,P,Q,R,S,T,U,R,V):2+ case_18(W,R,S,T,L,M,A,B,C,X,Y,Z,G):2
     [2*R>=A+2,C>=M,B>=L,A>=R,H>=R,2*R>=H+2,I>=N,G>=0,M>=0,L>=1,T>=0,S>=1,R>=3,V>=1,N>=1,R=X+2,R=P+1,R=O+1,R=K+2,R=J+2,R=D+2,Z=0,Y=1,W=1,U=1,Q=1,F=0,E=1] 
* CE 120: subtract(A,B,C,D,E,F,G) = 9+ get_elem(A,B,C,H,I,D,D,J,K,L):2+ split(A,B,C,H,I,M,N,O,P,Q,R,S,T,U):2+ case_18(V,W,Q,R,J,K,A,B,C,D,E,F,G):3
     [Q>=F,D+2>=E,A>=D+2,H>=D+2,2*D+2>=A,C>=K,B>=J,2*D+2>=H,I>=L,G>=0,F>=1,E>=2,D>=1,K>=0,J>=1,R>=0,U>=1,L>=1,D+2=W,D+2=T,D+2=P,D+1=N,D+1=M,V=1,S=1,O=1] 
* CE 121: subtract(A,B,C,D,E,F,G) = 9+ get_elem(A,B,C,H,I,D,D,J,K,L):2+ split(A,B,C,H,I,M,N,O,P,Q,R,S,T,U):2+ case_18(V,W,Q,R,J,K,A,B,C,D,E,F,G):4
     [J+Q>=F,2*Q>=F,2*D+3>=E,F>=D+2,A>=D+2,J>=D+2,Q>=D+2,H>=D+2,2*D+2>=A,C>=K,B>=J,2*D+2>=H,I>=L,G>=0,E>=3,D>=1,K>=0,R>=0,U>=1,L>=1,D+2=W,D+2=T,D+2=P,D+1=N,D+1=M,V=1,S=1,O=1] 
* CE 122: subtract(A,B,C,D,E,F,G) = 9+ get_elem(A,B,C,H,I,J,K,L,M,N):2+ split(A,B,C,H,I,O,P,Q,R,S,T,U,V,W):3+ case_18(X,R,S,T,L,M,A,B,C,Y,Z,A1,G):2
     [2*R>=A+2,C>=M,B>=L,A>=R,I>=N,H+1>=2*R,G>=0,M>=0,L>=1,T>=0,S>=1,R>=3,W>=1,N>=1,R+V=H+1,R=Y+2,R=P+1,R=O+1,R=K+2,R=J+2,R=D+2,A1=0,Z=1,X=1,U=1,Q=1,F=0,E=1] 
* CE 123: subtract(A,B,C,D,E,F,G) = 9+ get_elem(A,B,C,H,I,D,D,J,K,L):2+ split(A,B,C,H,I,M,N,O,P,Q,R,S,T,U):3+ case_18(V,W,Q,R,J,K,A,B,C,D,E,F,G):3
     [Q>=F,D+2>=E,A>=D+2,2*D+2>=A,C>=K,B>=J,I>=L,H>=2*D+3,G>=0,F>=1,E>=2,D>=1,K>=0,J>=1,R>=0,U>=1,L>=1,D+T+1=H,D+2=W,D+2=P,D+1=N,D+1=M,V=1,S=1,O=1] 
* CE 124: subtract(A,B,C,D,E,F,G) = 9+ get_elem(A,B,C,H,I,D,D,J,K,L):2+ split(A,B,C,H,I,M,N,O,P,Q,R,S,T,U):3+ case_18(V,W,Q,R,J,K,A,B,C,D,E,F,G):4
     [J+Q>=F,2*Q>=F,2*D+3>=E,F>=D+2,A>=D+2,J>=D+2,Q>=D+2,2*D+2>=A,C>=K,B>=J,I>=L,H>=2*D+3,G>=0,E>=3,D>=1,K>=0,R>=0,U>=1,L>=1,D+T+1=H,D+2=W,D+2=P,D+1=N,D+1=M,V=1,S=1,O=1] 
* CE 125: subtract(A,B,C,D,E,F,G) = 9+ get_elem(A,B,C,H,I,J,K,L,M,N):2+ split(A,B,C,H,I,O,P,Q,R,S,T,U,V,W):4+ case_18(X,R,S,T,L,M,A,B,C,Y,Z,A1,G):2
     [H+R>=A+1,2*A>=2*R+H,2*R>=A+1,C>=M,B>=L,A>=R+2,I>=N,G>=0,M>=0,L>=1,T>=0,S>=1,W>=1,N>=1,R+Y+1=A,R+V=A+1,P+R=A,O+R=A,K+R+1=A,J+R+1=A,D+R+1=A,A1=0,Z=1,X=1,U=1,Q=1,F=0,E=1] 
* CE 126: subtract(A,B,C,D,E,F,G) = 9+ get_elem(A,B,C,H,I,D,D,J,K,L):2+ split(A,B,C,H,I,M,N,O,P,Q,R,S,T,U):4+ case_18(V,W,Q,R,J,K,A,B,C,D,E,F,G):3
     [A>=D+E+1,Q>=F,H>=D+2,C>=K,B>=J,2*D+2>=H,I>=L,A>=2*D+3,G>=0,F>=1,E>=2,D>=1,K>=0,J>=1,R>=0,U>=1,L>=1,A=D+W+1,A=D+P+1,D+2=T,D+1=N,D+1=M,V=1,S=1,O=1] 
* CE 127: subtract(A,B,C,D,E,F,G) = 9+ get_elem(A,B,C,H,I,D,D,J,K,L):2+ split(A,B,C,H,I,M,N,O,P,Q,R,S,T,U):4+ case_18(V,W,Q,R,J,K,A,B,C,D,E,F,G):4
     [J+Q>=F,2*A>=2*D+E+3,2*Q>=F,F>=D+2,J>=D+2,Q>=D+2,H>=D+2,C>=K,B>=J,2*D+2>=H,I>=L,A>=2*D+3,G>=0,E>=3,D>=1,K>=0,R>=0,U>=1,L>=1,A=D+W+1,A=D+P+1,D+2=T,D+1=N,D+1=M,V=1,S=1,O=1] 
* CE 128: subtract(A,B,C,D,E,F,G) = 9+ get_elem(A,B,C,H,I,J,K,L,M,N):2+ split(A,B,C,H,I,O,P,Q,R,S,T,U,V,W):5+ case_18(X,R,S,T,L,M,A,B,C,Y,Z,A1,G):2
     [H+2*R>=2*A+1,2*R>=A+1,C>=M,B>=L,A>=R+2,I>=N,G>=0,M>=0,L>=1,T>=0,S>=1,W>=1,N>=1,H+R=A+V,R+Y+1=A,P+R=A,O+R=A,K+R+1=A,J+R+1=A,D+R+1=A,A1=0,Z=1,X=1,U=1,Q=1,F=0,E=1] 
* CE 129: subtract(A,B,C,D,E,F,G) = 9+ get_elem(A,B,C,H,I,D,D,J,K,L):2+ split(A,B,C,H,I,M,N,O,P,Q,R,S,T,U):5+ case_18(V,W,Q,R,J,K,A,B,C,D,E,F,G):3
     [A>=D+E+1,Q>=F,C>=K,B>=J,I>=L,A>=2*D+3,H>=2*D+3,G>=0,F>=1,E>=2,D>=1,K>=0,J>=1,R>=0,U>=1,L>=1,A=D+W+1,A=D+P+1,D+T+1=H,D+1=N,D+1=M,V=1,S=1,O=1] 
* CE 130: subtract(A,B,C,D,E,F,G) = 9+ get_elem(A,B,C,H,I,D,D,J,K,L):2+ split(A,B,C,H,I,M,N,O,P,Q,R,S,T,U):5+ case_18(V,W,Q,R,J,K,A,B,C,D,E,F,G):4
     [J+Q>=F,2*A>=2*D+E+3,2*Q>=F,F>=D+2,J>=D+2,Q>=D+2,C>=K,B>=J,I>=L,A>=2*D+3,H>=2*D+3,G>=0,E>=3,D>=1,K>=0,R>=0,U>=1,L>=1,A=D+W+1,A=D+P+1,D+T+1=H,D+1=N,D+1=M,V=1,S=1,O=1] 

### Cost equations --> "Loop" of subtract/7 
* CEs [121,124] --> Loop 101 
* CEs [127,130] --> Loop 102 
* CEs [120,123] --> Loop 103 
* CEs [126,129] --> Loop 104 
* CEs [119,122] --> Loop 105 
* CEs [125,128] --> Loop 106 
* CEs [113,116] --> Loop 107 
* CEs [115,118] --> Loop 108 
* CEs [114,117] --> Loop 109 
* CEs [107,110] --> Loop 110 
* CEs [109,112] --> Loop 111 
* CEs [108,111] --> Loop 112 

#### Loops of subtract/7 
* Loop 101: subtract(A,B,C,D,E,F,G) [2*D+3>=E,F>=D+2,B>=D+2,A>=D+2,2*D+2>=A,G>=0,E>=3,D>=1,C>=0] 
* Loop 102: subtract(A,B,C,D,E,F,G) [2*A>=2*D+E+3,F>=D+2,B>=D+2,A>=2*D+3,G>=0,E>=3,D>=1,C>=0] 
* Loop 103: subtract(A,B,C,D,E,F,G) [D+2>=E,A>=D+2,2*D+2>=A,G>=0,F>=1,E>=2,D>=1,C>=0,B>=1] 
* Loop 104: subtract(A,B,C,D,E,F,G) [A>=D+E+1,A>=2*D+3,G>=0,F>=1,E>=2,D>=1,C>=0,B>=1] 
* Loop 105: subtract(A,B,C,D,E,F,G) [A>=D+2,2*D+2>=A,G>=0,D>=1,C>=0,B>=1,F=0,E=1] 
* Loop 106: subtract(A,B,C,D,E,F,G) [A>=2*D+3,G>=0,D>=1,C>=0,B>=1,F=0,E=1] 
* Loop 107: subtract(A,B,C,D,E,F,G) [2*A>=E+3,G>=0,F>=2,E>=3,C>=0,B>=2,D=0] 
* Loop 108: subtract(A,B,C,D,E,F,G) [A>=E+1,G>=0,F>=1,E>=2,C>=0,B>=1,D=0] 
* Loop 109: subtract(A,B,C,D,E,F,G) [G>=0,C>=0,B>=1,A>=3,F=0,E=1,D=0] 
* Loop 110: subtract(A,B,C,D,E,F,G) [G>=0,F>=2,C>=0,B>=2,E=3,D=0,A=2] 
* Loop 111: subtract(A,B,C,D,E,F,G) [G>=0,F>=1,C>=0,B>=1,E=2,D=0,A=2] 
* Loop 112: subtract(A,B,C,D,E,F,G) [G>=0,C>=0,B>=1,F=0,E=1,D=0,A=2] 

### Ranking functions of CR subtract(A,B,C,D,E,F,G) 

#### Partial ranking functions of CR subtract(A,B,C,D,E,F,G) 


### Resulting Chains:subtract(A,B,C,D,E,F,G) 
* [112]
* [111]
* [110]
* [109]
* [108]
* [107]
* [106]
* [105]
* [104]
* [103]
* [102]
* [101]


### Merging Chains  subtract/7 into  External patterns of execution 
* [[112]] --> 1 
* [[111]] --> 2 
* [[110]] --> 3 
* [[109]] --> 4 
* [[108]] --> 5 
* [[107]] --> 6 
* [[106]] --> 7 
* [[105]] --> 8 
* [[104]] --> 9 
* [[103]] --> 10 
* [[102]] --> 11 
* [[101]] --> 12 


### Specialization of cost equations echelon_helper/10 
* CE 28 is refined into CE [131] 
* CE 27 is refined into CE [132,133,134,135,136,137,138,139,140,141,142,143] 


#### Refined cost equations echelon_helper/10 
* CE 131: echelon_helper(A,B,C,D,E,F,G,H,I,J) = 3
     [J>=0,G>=0,D>=0,C>=0,B>=0,A>=0,I=0,H=1,F=0,E=1] 
* CE 132: echelon_helper(A,B,C,D,E,F,G,H,I,J) = 7+ subtract(K,B,C,L,M,N,O):1+ echelon_helper(P,Q,O,R,S,T,U,H,I,J)
     [G>=U,F>=T,S>=1,O>=0,C>=0,B>=1,J>=0,I>=0,H>=0,G>=0,F>=1,S+1=E,R=1,Q=0,P=1,N=0,M=1,L=0,K=2,D=0,A=2] 
* CE 133: echelon_helper(A,B,C,D,E,F,G,H,I,J) = 7+ subtract(K,B,C,L,M,N,O):2+ echelon_helper(P,N,O,Q,R,S,T,H,I,J)
     [G>=T,F>=S,R>=1,O>=0,N>=1,C>=0,B>=1,J>=0,I>=0,H>=0,G>=0,F>=1,R+1=E,Q=1,P=2,M=2,L=0,K=2,D=0,A=2] 
* CE 134: echelon_helper(A,B,C,D,E,F,G,H,I,J) = 7+ subtract(K,B,C,L,M,N,O):3+ echelon_helper(P,N,O,Q,R,S,T,H,I,J)
     [G>=T,F>=S,R>=1,O>=0,N>=2,C>=0,B>=2,J>=0,I>=0,H>=0,G>=0,F>=1,R+1=E,Q=1,P=3,M=3,L=0,K=2,D=0,A=2] 
* CE 135: echelon_helper(A,B,C,D,E,F,G,H,I,J) = 7+ subtract(A,B,C,K,L,M,N):4+ echelon_helper(O,P,N,Q,R,S,T,H,I,J)
     [G>=T,F>=S,R>=1,N>=0,C>=0,B>=1,A>=3,J>=0,I>=0,H>=0,G>=0,F>=1,R+1=E,Q=1,P=0,O=1,M=0,L=1,K=0,D=0] 
* CE 136: echelon_helper(A,B,C,D,E,F,G,H,I,J) = 7+ subtract(A,B,C,K,L,M,N):5+ echelon_helper(L,M,N,O,P,Q,R,H,I,J)
     [G>=R,F>=Q,A>=L+1,P>=1,N>=0,M>=1,L>=2,C>=0,B>=1,J>=0,I>=0,H>=0,G>=0,F>=1,P+1=E,O=1,K=0,D=0] 
* CE 137: echelon_helper(A,B,C,D,E,F,G,H,I,J) = 7+ subtract(A,B,C,K,L,M,N):6+ echelon_helper(L,M,N,O,P,Q,R,H,I,J)
     [G>=R,F>=Q,2*A>=L+3,P>=1,N>=0,M>=2,L>=3,C>=0,B>=2,J>=0,I>=0,H>=0,G>=0,F>=1,P+1=E,O=1,K=0,D=0] 
* CE 138: echelon_helper(A,B,C,D,E,F,G,H,I,J) = 7+ subtract(A,B,C,D,K,L,M):7+ echelon_helper(N,O,M,P,Q,R,S,H,I,J)
     [G>=S,F>=R,A>=2*D+3,Q>=1,M>=0,D>=1,C>=0,B>=1,J>=0,I>=0,H>=0,G>=0,F>=1,D+1=P,Q+1=E,O=0,N=1,L=0,K=1] 
* CE 139: echelon_helper(A,B,C,D,E,F,G,H,I,J) = 7+ subtract(A,B,C,D,K,L,M):8+ echelon_helper(N,O,M,P,Q,R,S,H,I,J)
     [G>=S,F>=R,A>=D+2,2*D+2>=A,Q>=1,M>=0,D>=1,C>=0,B>=1,J>=0,I>=0,H>=0,G>=0,F>=1,D+1=P,Q+1=E,O=0,N=1,L=0,K=1] 
* CE 140: echelon_helper(A,B,C,D,E,F,G,H,I,J) = 7+ subtract(A,B,C,D,K,L,M):9+ echelon_helper(K,L,M,N,O,P,Q,H,I,J)
     [A>=D+K+1,G>=Q,F>=P,A>=2*D+3,O>=1,M>=0,L>=1,K>=2,D>=1,C>=0,B>=1,J>=0,I>=0,H>=0,G>=0,F>=1,D+1=N,O+1=E] 
* CE 141: echelon_helper(A,B,C,D,E,F,G,H,I,J) = 7+ subtract(A,B,C,D,K,L,M):10+ echelon_helper(K,L,M,N,O,P,Q,H,I,J)
     [G>=Q,F>=P,D+2>=K,A>=D+2,2*D+2>=A,O>=1,M>=0,L>=1,K>=2,D>=1,C>=0,B>=1,J>=0,I>=0,H>=0,G>=0,F>=1,D+1=N,O+1=E] 
* CE 142: echelon_helper(A,B,C,D,E,F,G,H,I,J) = 7+ subtract(A,B,C,D,K,L,M):11+ echelon_helper(K,L,M,N,O,P,Q,H,I,J)
     [2*A>=2*D+K+3,G>=Q,F>=P,L>=D+2,B>=D+2,A>=2*D+3,O>=1,M>=0,K>=3,D>=1,C>=0,J>=0,I>=0,H>=0,G>=0,F>=1,D+1=N,O+1=E] 
* CE 143: echelon_helper(A,B,C,D,E,F,G,H,I,J) = 7+ subtract(A,B,C,D,K,L,M):12+ echelon_helper(K,L,M,N,O,P,Q,H,I,J)
     [G>=Q,F>=P,2*D+3>=K,L>=D+2,B>=D+2,A>=D+2,2*D+2>=A,O>=1,M>=0,K>=3,D>=1,C>=0,J>=0,I>=0,H>=0,G>=0,F>=1,D+1=N,O+1=E] 

### Cost equations --> "Loop" of echelon_helper/10 
* CEs [143] --> Loop 113 
* CEs [142] --> Loop 114 
* CEs [141] --> Loop 115 
* CEs [140] --> Loop 116 
* CEs [139] --> Loop 117 
* CEs [138] --> Loop 118 
* CEs [137] --> Loop 119 
* CEs [136] --> Loop 120 
* CEs [135] --> Loop 121 
* CEs [134] --> Loop 122 
* CEs [133] --> Loop 123 
* CEs [132] --> Loop 124 
* CEs [131] --> Loop 125 

#### Loops of echelon_helper/10 
* Loop 113: echelon_helper(A,B,C,D,E,F,G,H,I,J)->  echelon_helper(A',B',C',D',E',F',G',H,I,J)
                  [G>=G',F>=F',2*D+3>=A',B'>=D+2,B>=D+2,A>=D+2,2*D+2>=A,C'>=0,A'>=3,J>=0,I>=0,H>=0,G>=0,F>=1,E>=2,D>=1,C>=0,E=E'+1,D+1=D'] 
* Loop 114: echelon_helper(A,B,C,D,E,F,G,H,I,J)->  echelon_helper(A',B',C',D',E',F',G',H,I,J)
                  [2*A>=2*D+A'+3,G>=G',F>=F',B'>=D+2,B>=D+2,A>=2*D+3,C'>=0,A'>=3,J>=0,I>=0,H>=0,G>=0,F>=1,E>=2,D>=1,C>=0,E=E'+1,D+1=D'] 
* Loop 115: echelon_helper(A,B,C,D,E,F,G,H,I,J)->  echelon_helper(A',B',C',D',E',F',G',H,I,J)
                  [G>=G',F>=F',D+2>=A',A>=D+2,2*D+2>=A,C'>=0,B'>=1,A'>=2,J>=0,I>=0,H>=0,G>=0,F>=1,E>=2,D>=1,C>=0,B>=1,E=E'+1,D+1=D'] 
* Loop 116: echelon_helper(A,B,C,D,E,F,G,H,I,J)->  echelon_helper(A',B',C',D',E',F',G',H,I,J)
                  [A>=D+A'+1,G>=G',F>=F',A>=2*D+3,C'>=0,B'>=1,A'>=2,J>=0,I>=0,H>=0,G>=0,F>=1,E>=2,D>=1,C>=0,B>=1,E=E'+1,D+1=D'] 
* Loop 117: echelon_helper(A,B,C,D,E,F,G,H,I,J)->  echelon_helper(A',B',C',D',E',F',G',H,I,J)
                  [G>=G',F>=F',A>=D+2,2*D+2>=A,C'>=0,J>=0,I>=0,H>=0,G>=0,F>=1,E>=2,D>=1,C>=0,B>=1,E=E'+1,D+1=D',B'=0,A'=1] 
* Loop 118: echelon_helper(A,B,C,D,E,F,G,H,I,J)->  echelon_helper(A',B',C',D',E',F',G',H,I,J)
                  [G>=G',F>=F',A>=2*D+3,C'>=0,J>=0,I>=0,H>=0,G>=0,F>=1,E>=2,D>=1,C>=0,B>=1,E=E'+1,D+1=D',B'=0,A'=1] 
* Loop 119: echelon_helper(A,B,C,D,E,F,G,H,I,J)->  echelon_helper(A',B',C',D',E',F',G',H,I,J)
                  [G>=G',F>=F',2*A>=A'+3,C'>=0,B'>=2,A'>=3,J>=0,I>=0,H>=0,G>=0,F>=1,E>=2,C>=0,B>=2,E=E'+1,D'=1,D=0] 
* Loop 120: echelon_helper(A,B,C,D,E,F,G,H,I,J)->  echelon_helper(A',B',C',D',E',F',G',H,I,J)
                  [G>=G',F>=F',A>=A'+1,C'>=0,B'>=1,A'>=2,J>=0,I>=0,H>=0,G>=0,F>=1,E>=2,C>=0,B>=1,E=E'+1,D'=1,D=0] 
* Loop 121: echelon_helper(A,B,C,D,E,F,G,H,I,J)->  echelon_helper(A',B',C',D',E',F',G',H,I,J)
                  [G>=G',F>=F',C'>=0,J>=0,I>=0,H>=0,G>=0,F>=1,E>=2,C>=0,B>=1,A>=3,E=E'+1,D'=1,B'=0,A'=1,D=0] 
* Loop 122: echelon_helper(A,B,C,D,E,F,G,H,I,J)->  echelon_helper(A',B',C',D',E',F',G',H,I,J)
                  [G>=G',F>=F',C'>=0,B'>=2,J>=0,I>=0,H>=0,G>=0,F>=1,E>=2,C>=0,B>=2,E=E'+1,D'=1,A'=3,D=0,A=2] 
* Loop 123: echelon_helper(A,B,C,D,E,F,G,H,I,J)->  echelon_helper(A',B',C',D',E',F',G',H,I,J)
                  [G>=G',F>=F',C'>=0,B'>=1,J>=0,I>=0,H>=0,G>=0,F>=1,E>=2,C>=0,B>=1,E=E'+1,D'=1,A'=2,D=0,A=2] 
* Loop 124: echelon_helper(A,B,C,D,E,F,G,H,I,J)->  echelon_helper(A',B',C',D',E',F',G',H,I,J)
                  [G>=G',F>=F',C'>=0,J>=0,I>=0,H>=0,G>=0,F>=1,E>=2,C>=0,B>=1,E=E'+1,D'=1,B'=0,A'=1,D=0,A=2] 
* Loop 125: echelon_helper(A,B,C,D,E,F,G,H,I,J) [J>=0,G>=0,D>=0,C>=0,B>=0,A>=0,I=0,H=1,F=0,E=1] 

### Ranking functions of CR echelon_helper(A,B,C,D,E,F,G,H,I,J) 
* RF of phase [113]: [E-1]
* RF of phase [114,116]: [E-1]

#### Partial ranking functions of CR echelon_helper(A,B,C,D,E,F,G,H,I,J) 
* Partial RF of phase [113]:
  - RF of loop [113:1]:
    E-1
* Partial RF of phase [114,116]:
  - RF of loop [114:1,116:1]:
    E-1
  - RF of loop [116:1]:
    A/2-2 depends on loops [114:1] 
    A/3-D/3-1 depends on loops [114:1] 
    A/4-D/2-1/2 depends on loops [114:1] 

Discarded unfeasible chain [[114,116]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [[114,116],[113]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [[113]](Non-terminating chain proved terminating)
Discarded unfeasible chain [122,[113]](Non-terminating chain proved terminating)
Discarded unfeasible chain [120,[114,116]](Non-terminating chain proved terminating)
Discarded unfeasible chain [120,[114,116],[113]](Non-terminating chain proved terminating)
Discarded unfeasible chain [120,[113]](Non-terminating chain proved terminating)
Discarded unfeasible chain [119,[114,116]](Non-terminating chain proved terminating)
Discarded unfeasible chain [119,[114,116],[113]](Non-terminating chain proved terminating)
Discarded unfeasible chain [119,[113]](Non-terminating chain proved terminating)

### Resulting Chains:echelon_helper(A,B,C,D,E,F,G,H,I,J) 
* [[114,116],[113],125]
* [[114,116],[113],117,125]
* [[114,116],[113],115,125]
* [[114,116],125]
* [[114,116],118,125]
* [[114,116],117,125]
* [[114,116],115,125]
* [[113],125]
* [[113],117,125]
* [[113],115,125]
* [125]
* [124,125]
* [123,125]
* [122,[113],125]
* [122,[113],117,125]
* [122,[113],115,125]
* [122,125]
* [122,117,125]
* [122,115,125]
* [121,125]
* [120,[114,116],[113],125]
* [120,[114,116],[113],117,125]
* [120,[114,116],[113],115,125]
* [120,[114,116],125]
* [120,[114,116],118,125]
* [120,[114,116],117,125]
* [120,[114,116],115,125]
* [120,[113],125]
* [120,[113],117,125]
* [120,[113],115,125]
* [120,125]
* [120,118,125]
* [120,117,125]
* [120,115,125]
* [119,[114,116],[113],125]
* [119,[114,116],[113],117,125]
* [119,[114,116],[113],115,125]
* [119,[114,116],125]
* [119,[114,116],118,125]
* [119,[114,116],117,125]
* [119,[114,116],115,125]
* [119,[113],125]
* [119,[113],117,125]
* [119,[113],115,125]
* [119,125]
* [119,118,125]
* [119,117,125]
* [119,115,125]
* [118,125]
* [117,125]
* [115,125]


### Merging Chains  echelon_helper/10 into  External patterns of execution 
* [[125,122],[125,123],[125,124]] --> 1 
* [[125,115,122],[125,117,122],[125,115,[113],122],[125,117,[113],122],[125,[113],122]] --> 2 
* [[125,119],[125,120],[125,121]] --> 3 
* [[125,115,119],[125,117,119],[125,118,119],[125,115,[113],119],[125,117,[113],119],[125,[113],119],[125,115,[114,116],119],[125,117,[114,116],119],[125,118,[114,116],119],[125,[114,116],119],[125,115,[113],[114,116],119],[125,117,[113],[114,116],119],[125,[113],[114,116],119]] --> 4 
* [[125,115,120],[125,117,120],[125,118,120],[125,115,[113],120],[125,117,[113],120],[125,[113],120],[125,115,[114,116],120],[125,117,[114,116],120],[125,118,[114,116],120],[125,[114,116],120],[125,115,[113],[114,116],120],[125,117,[113],[114,116],120],[125,[113],[114,116],120]] --> 5 
* [[125]] --> 6 
* [[125,118],[125,115,[114,116]],[125,117,[114,116]],[125,118,[114,116]],[125,[114,116]],[125,115,[113],[114,116]],[125,117,[113],[114,116]],[125,[113],[114,116]]] --> 7 
* [[125,115],[125,117]] --> 8 
* [[125,115,[113]],[125,117,[113]],[125,[113]]] --> 9 


### Specialization of cost equations echelon_form/6 
* CE 29 is refined into CE [144,145,146,147] 


#### Refined cost equations echelon_form/6 
* CE 144: echelon_form(A,B,C,D,E,F) = 2+ echelon_helper(G,B,C,H,I,B,C,J,K,F):1
     [F>=0,C>=0,B>=1,K=0,J=1,I=2,H=0,G=2,E=0,D=1,A=2] 
* CE 145: echelon_form(A,B,C,D,E,F) = 2+ echelon_helper(A,B,C,G,A,B,C,H,I,F):4
     [F>=0,C>=0,B>=2,A>=3,I=0,H=1,G=0,E=0,D=1] 
* CE 146: echelon_form(A,B,C,D,E,F) = 2+ echelon_helper(A,B,C,G,A,B,C,H,I,F):5
     [F>=0,C>=0,B>=1,A>=4,I=0,H=1,G=0,E=0,D=1] 
* CE 147: echelon_form(A,B,C,D,E,F) = 2+ echelon_helper(G,H,C,I,J,K,C,L,M,F):6
     [F>=0,C>=0,M=0,L=1,K=0,J=1,I=0,H=0,G=1,E=0,D=1,B=0,A=1] 

### Cost equations --> "Loop" of echelon_form/6 
* CEs [146] --> Loop 126 
* CEs [145] --> Loop 127 
* CEs [144] --> Loop 128 
* CEs [147] --> Loop 129 

#### Loops of echelon_form/6 
* Loop 126: echelon_form(A,B,C,D,E,F) [F>=0,C>=0,B>=1,A>=4,E=0,D=1] 
* Loop 127: echelon_form(A,B,C,D,E,F) [F>=0,C>=0,B>=2,A>=3,E=0,D=1] 
* Loop 128: echelon_form(A,B,C,D,E,F) [F>=0,C>=0,B>=1,E=0,D=1,A=2] 
* Loop 129: echelon_form(A,B,C,D,E,F) [F>=0,C>=0,E=0,D=1,B=0,A=1] 

### Ranking functions of CR echelon_form(A,B,C,D,E,F) 

#### Partial ranking functions of CR echelon_form(A,B,C,D,E,F) 


### Resulting Chains:echelon_form(A,B,C,D,E,F) 
* [129]
* [128]
* [127]
* [126]


### Merging Chains  echelon_form/6 into  External patterns of execution 
* [[129]] --> 1 
* [[128]] --> 2 
* [[127]] --> 3 
* [[126]] --> 4 


### Specialization of cost equations sizeL/7 
* CE 2 is refined into CE [148] 
* CE 1 is refined into CE [149] 


#### Refined cost equations sizeL/7 
* CE 148: sizeL(A,B,C,D,E,F,G) = 3
     [C>=0,G=0,F=0,E=0,D=1,B=0,A=1] 
* CE 149: sizeL(A,B,C,D,E,F,G) = 6+ sizeL(H,I,J,K,L,M,N)
     [E>=L,C>=J,B>=I,N+1>=0,M+1>=0,K>=1,H>=1,E>=1,C>=0,B>=1,N+1=G,M+1=F,K+1=D,H+1=A] 

### Cost equations --> "Loop" of sizeL/7 
* CEs [149] --> Loop 130 
* CEs [148] --> Loop 131 

#### Loops of sizeL/7 
* Loop 130: sizeL(A,B,C,D,E,F,G)->  sizeL(A',B',C',D',E',F',G')
                  [E>=E',C>=C',B>=B',G'+1>=0,F'+1>=0,D'>=1,A'>=1,E>=1,C>=0,B>=1,G'+1=G,F'+1=F,D'+1=D,A'+1=A] 
* Loop 131: sizeL(A,B,C,D,E,F,G) [C>=0,G=0,F=0,E=0,D=1,B=0,A=1] 

### Ranking functions of CR sizeL(A,B,C,D,E,F,G) 
* RF of phase [130]: [A-1,D-1]

#### Partial ranking functions of CR sizeL(A,B,C,D,E,F,G) 
* Partial RF of phase [130]:
  - RF of loop [130:1]:
    A-1
    D-1

Discarded unfeasible chain [[130]]...(Non-terminating chain proved terminating)

### Resulting Chains:sizeL(A,B,C,D,E,F,G) 
* [[130],131]
* [131]


### Merging Chains  sizeL/7 into  External patterns of execution 
* [[131]] --> 1 
* [[131,[130]]] --> 2 


### Specialization of cost equations echelon_helper_old/7 
* CE 31 is refined into CE [150,151] 
* CE 30 is refined into CE [152,153,154,155,156,157,158,159,160,161,162,163] 


#### Refined cost equations echelon_helper_old/7 
* CE 150: echelon_helper_old(A,B,C,D,E,F,C) = 3+ sizeL(G,H,C,I,J,K,L):1
     [C>=0,D>=0,L=0,K=0,J=0,I=1,H=0,G=1,F=0,E=1,B=0,A=1] 
* CE 151: echelon_helper_old(A,B,C,D,A,B,C) = 3+ sizeL(A,B,C,A,E,F,G):2
     [D+1>=A,E>=1,A>=2,C>=0,B>=1,A=G+1,A=F+1] 
* CE 152: echelon_helper_old(A,B,C,D,E,F,G) = 7+ sizeL(H,B,C,I,J,K,L):2+ subtract(M,B,C,N,O,P,Q):1+ echelon_helper_old(R,S,Q,T,E,F,G)
     [Q>=0,C>=0,B>=1,J>=1,G>=0,F>=0,E>=0,T=1,S=0,R=1,P=0,O=1,N=0,M=2,L=1,K=1,I=2,H=2,D=0,A=2] 
* CE 153: echelon_helper_old(A,B,C,D,E,F,G) = 7+ sizeL(H,B,C,I,J,K,L):2+ subtract(M,B,C,N,O,P,Q):2+ echelon_helper_old(R,P,Q,S,E,F,G)
     [Q>=0,P>=1,C>=0,B>=1,J>=1,G>=0,F>=0,E>=0,S=1,R=2,O=2,N=0,M=2,L=1,K=1,I=2,H=2,D=0,A=2] 
* CE 154: echelon_helper_old(A,B,C,D,E,F,G) = 7+ sizeL(H,B,C,I,J,K,L):2+ subtract(M,B,C,N,O,P,Q):3+ echelon_helper_old(R,P,Q,S,E,F,G)
     [Q>=0,P>=2,C>=0,B>=2,J>=1,G>=0,F>=0,E>=0,S=1,R=3,O=3,N=0,M=2,L=1,K=1,I=2,H=2,D=0,A=2] 
* CE 155: echelon_helper_old(A,B,C,D,E,F,G) = 7+ sizeL(A,B,C,A,H,I,J):2+ subtract(A,B,C,K,L,M,N):4+ echelon_helper_old(O,P,N,Q,E,F,G)
     [N>=0,C>=0,B>=1,A>=3,H>=1,G>=0,F>=0,E>=0,A=J+1,A=I+1,Q=1,P=0,O=1,M=0,L=1,K=0,D=0] 
* CE 156: echelon_helper_old(A,B,C,D,E,F,G) = 7+ sizeL(A,B,C,A,H,I,J):2+ subtract(A,B,C,K,L,M,N):5+ echelon_helper_old(L,M,N,O,E,F,G)
     [A>=L+1,N>=0,M>=1,L>=2,C>=0,B>=1,H>=1,G>=0,F>=0,E>=0,A=J+1,A=I+1,O=1,K=0,D=0] 
* CE 157: echelon_helper_old(A,B,C,D,E,F,G) = 7+ sizeL(A,B,C,A,H,I,J):2+ subtract(A,B,C,K,L,M,N):6+ echelon_helper_old(L,M,N,O,E,F,G)
     [2*A>=L+3,N>=0,M>=2,L>=3,C>=0,B>=2,H>=1,G>=0,F>=0,E>=0,A=J+1,A=I+1,O=1,K=0,D=0] 
* CE 158: echelon_helper_old(A,B,C,D,E,F,G) = 7+ sizeL(A,B,C,A,H,I,J):2+ subtract(A,B,C,D,K,L,M):7+ echelon_helper_old(N,O,M,P,E,F,G)
     [A>=2*D+3,M>=0,D>=1,C>=0,B>=1,H>=1,G>=0,F>=0,E>=0,D+1=P,A=J+1,A=I+1,O=0,N=1,L=0,K=1] 
* CE 159: echelon_helper_old(A,B,C,D,E,F,G) = 7+ sizeL(A,B,C,A,H,I,J):2+ subtract(A,B,C,D,K,L,M):8+ echelon_helper_old(N,O,M,P,E,F,G)
     [A>=D+2,2*D+2>=A,M>=0,D>=1,C>=0,B>=1,H>=1,G>=0,F>=0,E>=0,D+1=P,A=J+1,A=I+1,O=0,N=1,L=0,K=1] 
* CE 160: echelon_helper_old(A,B,C,D,E,F,G) = 7+ sizeL(A,B,C,A,H,I,J):2+ subtract(A,B,C,D,K,L,M):9+ echelon_helper_old(K,L,M,N,E,F,G)
     [A>=D+K+1,A>=2*D+3,M>=0,L>=1,K>=2,D>=1,C>=0,B>=1,H>=1,G>=0,F>=0,E>=0,D+1=N,A=J+1,A=I+1] 
* CE 161: echelon_helper_old(A,B,C,D,E,F,G) = 7+ sizeL(A,B,C,A,H,I,J):2+ subtract(A,B,C,D,K,L,M):10+ echelon_helper_old(K,L,M,N,E,F,G)
     [D+2>=K,A>=D+2,2*D+2>=A,M>=0,L>=1,K>=2,D>=1,C>=0,B>=1,H>=1,G>=0,F>=0,E>=0,D+1=N,A=J+1,A=I+1] 
* CE 162: echelon_helper_old(A,B,C,D,E,F,G) = 7+ sizeL(A,B,C,A,H,I,J):2+ subtract(A,B,C,D,K,L,M):11+ echelon_helper_old(K,L,M,N,E,F,G)
     [2*A>=2*D+K+3,L>=D+2,B>=D+2,A>=2*D+3,M>=0,K>=3,D>=1,C>=0,H>=1,G>=0,F>=0,E>=0,D+1=N,A=J+1,A=I+1] 
* CE 163: echelon_helper_old(A,B,C,D,E,F,G) = 7+ sizeL(A,B,C,A,H,I,J):2+ subtract(A,B,C,D,K,L,M):12+ echelon_helper_old(K,L,M,N,E,F,G)
     [2*D+3>=K,L>=D+2,B>=D+2,A>=D+2,2*D+2>=A,M>=0,K>=3,D>=1,C>=0,H>=1,G>=0,F>=0,E>=0,D+1=N,A=J+1,A=I+1] 

### Cost equations --> "Loop" of echelon_helper_old/7 
* CEs [163] --> Loop 132 
* CEs [162] --> Loop 133 
* CEs [161] --> Loop 134 
* CEs [160] --> Loop 135 
* CEs [159] --> Loop 136 
* CEs [158] --> Loop 137 
* CEs [157] --> Loop 138 
* CEs [156] --> Loop 139 
* CEs [155] --> Loop 140 
* CEs [154] --> Loop 141 
* CEs [153] --> Loop 142 
* CEs [152] --> Loop 143 
* CEs [151] --> Loop 144 
* CEs [150] --> Loop 145 

#### Loops of echelon_helper_old/7 
* Loop 132: echelon_helper_old(A,B,C,D,E,F,G)->  echelon_helper_old(A',B',C',D',E,F,G)
                  [2*D+3>=A',B'>=D+2,B>=D+2,A>=D+2,2*D+2>=A,C'>=0,A'>=3,G>=0,F>=0,E>=0,D>=1,C>=0,D+1=D'] 
* Loop 133: echelon_helper_old(A,B,C,D,E,F,G)->  echelon_helper_old(A',B',C',D',E,F,G)
                  [2*A>=2*D+A'+3,B'>=D+2,B>=D+2,A>=2*D+3,C'>=0,A'>=3,G>=0,F>=0,E>=0,D>=1,C>=0,D+1=D'] 
* Loop 134: echelon_helper_old(A,B,C,D,E,F,G)->  echelon_helper_old(A',B',C',D',E,F,G)
                  [D+2>=A',A>=D+2,2*D+2>=A,C'>=0,B'>=1,A'>=2,G>=0,F>=0,E>=0,D>=1,C>=0,B>=1,D+1=D'] 
* Loop 135: echelon_helper_old(A,B,C,D,E,F,G)->  echelon_helper_old(A',B',C',D',E,F,G)
                  [A>=D+A'+1,A>=2*D+3,C'>=0,B'>=1,A'>=2,G>=0,F>=0,E>=0,D>=1,C>=0,B>=1,D+1=D'] 
* Loop 136: echelon_helper_old(A,B,C,D,E,F,G)->  echelon_helper_old(A',B',C',D',E,F,G)
                  [A>=D+2,2*D+2>=A,C'>=0,G>=0,F>=0,E>=0,D>=1,C>=0,B>=1,D+1=D',B'=0,A'=1] 
* Loop 137: echelon_helper_old(A,B,C,D,E,F,G)->  echelon_helper_old(A',B',C',D',E,F,G)
                  [A>=2*D+3,C'>=0,G>=0,F>=0,E>=0,D>=1,C>=0,B>=1,D+1=D',B'=0,A'=1] 
* Loop 138: echelon_helper_old(A,B,C,D,E,F,G)->  echelon_helper_old(A',B',C',D',E,F,G)
                  [2*A>=A'+3,C'>=0,B'>=2,A'>=3,G>=0,F>=0,E>=0,C>=0,B>=2,D'=1,D=0] 
* Loop 139: echelon_helper_old(A,B,C,D,E,F,G)->  echelon_helper_old(A',B',C',D',E,F,G)
                  [A>=A'+1,C'>=0,B'>=1,A'>=2,G>=0,F>=0,E>=0,C>=0,B>=1,D'=1,D=0] 
* Loop 140: echelon_helper_old(A,B,C,D,E,F,G)->  echelon_helper_old(A',B',C',D',E,F,G)
                  [C'>=0,G>=0,F>=0,E>=0,C>=0,B>=1,A>=3,D'=1,B'=0,A'=1,D=0] 
* Loop 141: echelon_helper_old(A,B,C,D,E,F,G)->  echelon_helper_old(A',B',C',D',E,F,G)
                  [C'>=0,B'>=2,G>=0,F>=0,E>=0,C>=0,B>=2,D'=1,A'=3,D=0,A=2] 
* Loop 142: echelon_helper_old(A,B,C,D,E,F,G)->  echelon_helper_old(A',B',C',D',E,F,G)
                  [C'>=0,B'>=1,G>=0,F>=0,E>=0,C>=0,B>=1,D'=1,A'=2,D=0,A=2] 
* Loop 143: echelon_helper_old(A,B,C,D,E,F,G)->  echelon_helper_old(A',B',C',D',E,F,G)
                  [C'>=0,G>=0,F>=0,E>=0,C>=0,B>=1,D'=1,B'=0,A'=1,D=0,A=2] 
* Loop 144: echelon_helper_old(A,B,C,D,A,B,C) [D+1>=A,C>=0,B>=1,A>=2] 
* Loop 145: echelon_helper_old(A,B,C,D,E,F,C) [D>=0,C>=0,F=0,E=1,B=0,A=1] 

### Ranking functions of CR echelon_helper_old(A,B,C,D,E,F,G) 

#### Partial ranking functions of CR echelon_helper_old(A,B,C,D,E,F,G) 
* Partial RF of phase [133,135]:
  - RF of loop [135:1]:
    A/2-2 depends on loops [133:1] 
    A/3-D/3-1 depends on loops [133:1] 
    A/4-D/2-1/2 depends on loops [133:1] 


### Resulting Chains:echelon_helper_old(A,B,C,D,E,F,G) 
* [[133,135]]...
* [[133,135],[132]]...
* [[133,135],[132],144]
* [[133,135],[132],136,145]
* [[133,135],[132],134,144]
* [[133,135],144]
* [[133,135],137,145]
* [[133,135],136,145]
* [[133,135],134,144]
* [[132]]...
* [[132],144]
* [[132],136,145]
* [[132],134,144]
* [145]
* [144]
* [143,145]
* [142,144]
* [141,[132]]...
* [141,[132],144]
* [141,[132],136,145]
* [141,[132],134,144]
* [141,136,145]
* [141,134,144]
* [140,145]
* [139,[133,135]]...
* [139,[133,135],[132]]...
* [139,[133,135],[132],144]
* [139,[133,135],[132],136,145]
* [139,[133,135],[132],134,144]
* [139,[133,135],144]
* [139,[133,135],137,145]
* [139,[133,135],136,145]
* [139,[133,135],134,144]
* [139,[132]]...
* [139,[132],144]
* [139,[132],136,145]
* [139,[132],134,144]
* [139,144]
* [139,137,145]
* [139,136,145]
* [139,134,144]
* [138,[133,135]]...
* [138,[133,135],[132]]...
* [138,[133,135],[132],144]
* [138,[133,135],[132],136,145]
* [138,[133,135],[132],134,144]
* [138,[133,135],144]
* [138,[133,135],137,145]
* [138,[133,135],136,145]
* [138,[133,135],134,144]
* [138,[132]]...
* [138,[132],144]
* [138,[132],136,145]
* [138,[132],134,144]
* [138,137,145]
* [138,136,145]
* [138,134,144]
* [137,145]
* [136,145]
* [134,144]


### Merging Chains  echelon_helper_old/7 into  External patterns of execution 
* [[145]] --> 1 
* [[145,136,141],[145,136,[132],141],[145,143]] --> 2 
* [[144,142]] --> 3 
* [[144,134,141],[144,134,[132],141],[144,[132],141]] --> 4 
* [[145,136,138],[145,137,138],[145,136,[132],138],[145,136,[133,135],138],[145,137,[133,135],138],[145,136,[132],[133,135],138],[145,136,139],[145,137,139],[145,136,[132],139],[145,136,[133,135],139],[145,137,[133,135],139],[145,136,[132],[133,135],139],[145,140]] --> 5 
* [[144,139]] --> 6 
* [[144,134,138],[144,134,[132],138],[144,[132],138],[144,134,[133,135],138],[144,[133,135],138],[144,134,[132],[133,135],138],[144,[132],[133,135],138]] --> 7 
* [[144,134,139],[144,134,[132],139],[144,[132],139],[144,134,[133,135],139],[144,[133,135],139],[144,134,[132],[133,135],139],[144,[132],[133,135],139]] --> 8 
* [[145,137],[145,136,[133,135]],[145,137,[133,135]],[145,136,[132],[133,135]]] --> 9 
* [[145,136],[145,136,[132]]] --> 10 
* [[144]] --> 11 
* [[144,134,[133,135]],[144,[133,135]],[144,134,[132],[133,135]],[144,[132],[133,135]]] --> 12 
* [[144,134]] --> 13 
* [[144,134,[132]],[144,[132]]] --> 14 
* [[[132],141]] --> 15 
* [[[132],138]] --> 16 
* [[[132],139]] --> 17 
* [[[133,135],138],[[132],[133,135],138]] --> 18 
* [[[133,135],139],[[132],[133,135],139]] --> 19 
* [[[132],[133,135]]] --> 20 
* [[[133,135]]] --> 21 
* [[[132]]] --> 22 


### Specialization of cost equations echelon_form_old/6 
* CE 32 is refined into CE [164,165,166,167,168,169,170,171,172,173,174,175,176] 


#### Refined cost equations echelon_form_old/6 
* CE 164: echelon_form_old(A,B,C,D,E,C) = 2+ echelon_helper_old(F,G,C,H,I,J,C):1
     [C>=0,J=0,I=1,H=0,G=0,F=1,E=0,D=1,B=0,A=1] 
* CE 165: echelon_form_old(A,B,C,D,E,F) = 2+ echelon_helper_old(G,B,C,H,I,J,F):2
     [F>=0,C>=0,B>=1,J=0,I=1,H=0,G=2,E=0,D=1,A=2] 
* CE 166: echelon_form_old(A,B,C,D,E,F) = 2+ echelon_helper_old(G,B,C,H,I,E,F):3
     [F>=0,E>=1,C>=0,B>=1,I=2,H=0,G=2,D=2,A=2] 
* CE 167: echelon_form_old(A,B,C,D,E,F) = 2+ echelon_helper_old(G,B,C,H,D,E,F):4
     [F>=0,E>=1,D>=2,C>=0,B>=2,H=0,G=2,A=2] 
* CE 168: echelon_form_old(A,B,C,D,E,F) = 2+ echelon_helper_old(A,B,C,G,H,I,F):5
     [F>=0,C>=0,B>=1,A>=3,I=0,H=1,G=0,E=0,D=1] 
* CE 169: echelon_form_old(A,B,C,D,E,F) = 2+ echelon_helper_old(A,B,C,G,H,E,F):6
     [F>=0,E>=1,C>=0,B>=1,A>=3,H=2,G=0,D=2] 
* CE 170: echelon_form_old(A,B,C,D,E,F) = 2+ echelon_helper_old(A,B,C,G,D,E,F):7
     [F>=0,E>=1,D>=2,C>=0,B>=2,A>=3,G=0] 
* CE 171: echelon_form_old(A,B,C,D,E,F) = 2+ echelon_helper_old(A,B,C,G,D,E,F):8
     [F>=0,E>=1,D>=2,C>=0,B>=1,A>=4,G=0] 
* CE 172: echelon_form_old(A,B,C,D,E,F) = 2+ echelon_helper_old(G,B,C,H,D,E,F):15
     [F>=0,E>=0,D>=0,C>=0,B>=2,H=0,G=2,A=2] 
* CE 173: echelon_form_old(A,B,C,D,E,F) = 2+ echelon_helper_old(A,B,C,G,D,E,F):16
     [F>=0,E>=0,D>=0,C>=0,B>=2,A>=3,G=0] 
* CE 174: echelon_form_old(A,B,C,D,E,F) = 2+ echelon_helper_old(A,B,C,G,D,E,F):17
     [F>=0,E>=0,D>=0,C>=0,B>=1,A>=4,G=0] 
* CE 175: echelon_form_old(A,B,C,D,E,F) = 2+ echelon_helper_old(A,B,C,G,D,E,F):18
     [F>=0,E>=0,D>=0,C>=0,B>=2,A>=4,G=0] 
* CE 176: echelon_form_old(A,B,C,D,E,F) = 2+ echelon_helper_old(A,B,C,G,D,E,F):19
     [F>=0,E>=0,D>=0,C>=0,B>=1,A>=6,G=0] 

### Cost equations --> "Loop" of echelon_form_old/6 
* CEs [174,176] --> Loop 146 
* CEs [173,175] --> Loop 147 
* CEs [172] --> Loop 148 
* CEs [171] --> Loop 149 
* CEs [170] --> Loop 150 
* CEs [169] --> Loop 151 
* CEs [168] --> Loop 152 
* CEs [167] --> Loop 153 
* CEs [166] --> Loop 154 
* CEs [165] --> Loop 155 
* CEs [164] --> Loop 156 

#### Loops of echelon_form_old/6 
* Loop 146: echelon_form_old(A,B,C,D,E,F) [F>=0,E>=0,D>=0,C>=0,B>=1,A>=4] 
* Loop 147: echelon_form_old(A,B,C,D,E,F) [F>=0,E>=0,D>=0,C>=0,B>=2,A>=3] 
* Loop 148: echelon_form_old(A,B,C,D,E,F) [F>=0,E>=0,D>=0,C>=0,B>=2,A=2] 
* Loop 149: echelon_form_old(A,B,C,D,E,F) [F>=0,E>=1,D>=2,C>=0,B>=1,A>=4] 
* Loop 150: echelon_form_old(A,B,C,D,E,F) [F>=0,E>=1,D>=2,C>=0,B>=2,A>=3] 
* Loop 151: echelon_form_old(A,B,C,D,E,F) [F>=0,E>=1,C>=0,B>=1,A>=3,D=2] 
* Loop 152: echelon_form_old(A,B,C,D,E,F) [F>=0,C>=0,B>=1,A>=3,E=0,D=1] 
* Loop 153: echelon_form_old(A,B,C,D,E,F) [F>=0,E>=1,D>=2,C>=0,B>=2,A=2] 
* Loop 154: echelon_form_old(A,B,C,D,E,F) [F>=0,E>=1,C>=0,B>=1,D=2,A=2] 
* Loop 155: echelon_form_old(A,B,C,D,E,F) [F>=0,C>=0,B>=1,E=0,D=1,A=2] 
* Loop 156: echelon_form_old(A,B,C,D,E,C) [C>=0,E=0,D=1,B=0,A=1] 

### Ranking functions of CR echelon_form_old(A,B,C,D,E,F) 

#### Partial ranking functions of CR echelon_form_old(A,B,C,D,E,F) 


### Resulting Chains:echelon_form_old(A,B,C,D,E,F) 
* [156]
* [155]
* [154]
* [153]
* [152]
* [151]
* [150]
* [149]
* [148]...
* [147]...
* [146]...


### Merging Chains  echelon_form_old/6 into  External patterns of execution 
* [[156]] --> 1 
* [[155]] --> 2 
* [[154]] --> 3 
* [[153]] --> 4 
* [[152]] --> 5 
* [[151]] --> 6 
* [[150]] --> 7 
* [[149]] --> 8 
* [[148]] --> 9 
* [[147]] --> 10 
* [[146]] --> 11 


### Specialization of cost equations hd_helper/7 
* CE 18 is refined into CE [177,178] 
* CE 17 is refined into CE [179] 


#### Refined cost equations hd_helper/7 
* CE 177: hd_helper(A,B,C,D,E,F,G) = 9+ maxNorm(H,E,H):1+ hd_helper(I,J,K,L,H,F,G)
     [B>=J,B>=H,H>=E+1,K>=0,I>=1,E>=0,G>=0,F>=0,D>=1,D+1=L,K+1=C,I+1=A] 
* CE 178: hd_helper(A,B,C,D,E,F,G) = 9+ maxNorm(H,E,E):2+ hd_helper(I,J,K,L,E,F,G)
     [B>=J,E>=H,B>=H,K>=0,I>=1,H>=1,G>=0,F>=0,D>=1,D+1=L,K+1=C,I+1=A] 
* CE 179: hd_helper(A,B,C,D,E,D,E) = 3
     [E>=0,D>=0,B>=0,A>=0,C=0] 

### Cost equations --> "Loop" of hd_helper/7 
* CEs [179] --> Loop 157 
* CEs [177] --> Loop 158 
* CEs [178] --> Loop 159 

#### Loops of hd_helper/7 
* Loop 157: hd_helper(A,B,C,D,E,D,E) [E>=0,D>=0,B>=0,A>=0,C=0] 
* Loop 158: hd_helper(A,B,C,D,E,F,G)->  hd_helper(A',B',C',D',E',F,G)
                  [B>=E',B>=B',E'>=E+1,G>=0,F>=0,E>=0,D>=1,C>=1,A>=2,D+1=D',C=C'+1,A=A'+1] 
* Loop 159: hd_helper(A,B,C,D,E,F,G)->  hd_helper(A',B',C',D',E,F,G)
                  [B>=B',G>=0,F>=0,E>=1,D>=1,C>=1,B>=1,A>=2,D+1=D',C=C'+1,A=A'+1] 

### Ranking functions of CR hd_helper(A,B,C,D,E,F,G) 
* RF of phase [158,159]: [A-1,C]

#### Partial ranking functions of CR hd_helper(A,B,C,D,E,F,G) 
* Partial RF of phase [158,159]:
  - RF of loop [158:1]:
    B-E
  - RF of loop [158:1,159:1]:
    A-1
    C

Discarded unfeasible chain [[158,159]]...(Non-terminating chain proved terminating)

### Resulting Chains:hd_helper(A,B,C,D,E,F,G) 
* [[158,159],157]
* [157]


### Merging Chains  hd_helper/7 into  External patterns of execution 
* [[157]] --> 1 
* [[157,[158,159]]] --> 2 


### Specialization of cost equations hd/5 
* CE 22 is refined into CE [180,181] 


#### Refined cost equations hd/5 
* CE 180: hd(A,B,C,D,E) = 3+ hd_helper(A,B,F,G,H,I,J):1+ reverseL(K,L,M,N,O,P,Q,R,S,T):1
     [R>=0,M>=0,B>=0,A>=0,T=0,S=1,Q=0,P=1,O=0,N=1,L=0,K=1,J=0,I=1,H=0,G=1,F=0,E=0,D=1,C=0] 
* CE 181: hd(A,B,C,D,E) = 3+ hd_helper(A,B,F,G,H,D,I):2+ reverseL(D,J,K,D,I,D,L,M,D,E):2
     [A>=D,E>=1,M>=0,L>=1,I>=1,D>=2,K>=0,J>=1,B>=1,D=F+1,D=C+1,H=0,G=1] 

### Cost equations --> "Loop" of hd/5 
* CEs [181] --> Loop 160 
* CEs [180] --> Loop 161 

#### Loops of hd/5 
* Loop 160: hd(A,B,C,D,E) [A>=C+1,E>=1,C>=1,B>=1,C+1=D] 
* Loop 161: hd(A,B,C,D,E) [B>=0,A>=0,E=0,D=1,C=0] 

### Ranking functions of CR hd(A,B,C,D,E) 

#### Partial ranking functions of CR hd(A,B,C,D,E) 


### Resulting Chains:hd(A,B,C,D,E) 
* [161]
* [160]


### Merging Chains  hd/5 into  External patterns of execution 
* [[161]] --> 1 
* [[160]] --> 2 


### Specialization of cost equations tl/5 
* CE 16 is refined into CE [182] 
* CE 15 is refined into CE [183] 


#### Refined cost equations tl/5 
* CE 182: tl(A,B,C,D,E) = 8+ tl(F,G,H,D,E)
     [B>=G,H>=0,F>=1,E>=0,D>=0,B>=1,H+1=C,F+1=A] 
* CE 183: tl(A,B,C,A,B) = 3
     [B>=0,A>=0,C=0] 

### Cost equations --> "Loop" of tl/5 
* CEs [183] --> Loop 162 
* CEs [182] --> Loop 163 

#### Loops of tl/5 
* Loop 162: tl(A,B,C,A,B) [B>=0,A>=0,C=0] 
* Loop 163: tl(A,B,C,D,E)->  tl(A',B',C',D,E)
                  [B>=B',C'>=0,A'>=1,E>=0,D>=0,B>=1,C'+1=C,A'+1=A] 

### Ranking functions of CR tl(A,B,C,D,E) 
* RF of phase [163]: [A-1,C]

#### Partial ranking functions of CR tl(A,B,C,D,E) 
* Partial RF of phase [163]:
  - RF of loop [163:1]:
    A-1
    C

Discarded unfeasible chain [[163]]...(Non-terminating chain proved terminating)

### Resulting Chains:tl(A,B,C,D,E) 
* [[163],162]
* [162]


### Merging Chains  tl/5 into  External patterns of execution 
* [[162]] --> 1 
* [[162,[163]]] --> 2 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 37 

#### Simplifying cost structure of CE 36 

#### Cost of chains of maxNorm(A,B,C):
* Chain [37]: 0
  with precondition: [A=C,B>=0,A>=B+1] 

* Chain [36]: 0
  with precondition: [B=C,A>=0,B>=A] 


#### Simplifying cost structure of CE 38 

#### Computing cost of phase [38,39,40,41] 

#### Simplifying cost structure of CE 39 

#### Simplifying cost structure of CE 41 

#### Simplifying cost structure of CE 40 

#### Simplifying cost structure of CE 42 

#### Cost of loops [38,39,40,41] 

 * loop 38:concat(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) -> [concat(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O')] 
5
 * loop 39:concat(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) -> [concat(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O')] 
5
 * loop 40:concat(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) -> [concat(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O')] 
5
 * loop 41:concat(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) -> [concat(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O')] 
5
##### Pending set concat(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)
* Psum in Loop 38: [it(38)=<1]
* Psum in Loop 39: [it(39)=<1]
* Psum in Loop 40: [it(40)=<1]
* Psum in Loop 41: [it(41)=<1]

###### Computing sum for it(38)=<1  in Loop 38 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
       - Loop 39 is collaborative and bounds [it(39)] 
       - Loop 40 is collaborative and bounds [it(40)] 
       - Loop 41 is collaborative and bounds [it(41)] 
     - head Candidate: A-1 
       - Loop 39 is collaborative and bounds [it(39)] 
       - Loop 40 is collaborative and bounds [it(40)] 
       - Loop 41 is collaborative and bounds [it(41)] 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - Loop 39 is collaborative and bounds [it(39)] 
       - Loop 40 is collaborative and bounds [it(40)] 
       - Loop 41 is collaborative and bounds [it(41)] 
     - tail Candidate: A-1 
       - Loop 39 is collaborative and bounds [it(39)] 
       - Loop 40 is collaborative and bounds [it(40)] 
       - Loop 41 is collaborative and bounds [it(41)] 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(38)+it(39)+it(40)+it(41)=<D-1,it(38)+it(39)+it(40)+it(41)=<A-1,it(38)+it(39)+it(40)+it(41)=<A-1,it(38)+it(39)+it(40)+it(41)=<D-1,it(38)+it(39)+it(40)+it(41)=<D-D',it(38)+it(39)+it(40)+it(41)=<A-A',it(38)+it(39)+it(40)+it(41)=<A-A',it(38)+it(39)+it(40)+it(41)=<D-D'] 

##### Pending set A
* Psum in Loop 39: [it(39)=<1]
* Psum in Loop 40: [it(40)=<1]
* Psum in Loop 41: [it(41)=<1]

###### Computing sum for it(39)=<1  in Loop 39 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(38)+it(39)+it(40)+it(41)=<D-1,it(38)+it(39)+it(40)+it(41)=<A-1,it(38)+it(39)+it(40)+it(41)=<A-1,it(38)+it(39)+it(40)+it(41)=<D-1,it(38)+it(39)+it(40)+it(41)=<D-D',it(38)+it(39)+it(40)+it(41)=<A-A',it(38)+it(39)+it(40)+it(41)=<A-A',it(38)+it(39)+it(40)+it(41)=<D-D'] 

##### Pending set A
* Psum in Loop 40: [it(40)=<1]
* Psum in Loop 41: [it(41)=<1]

###### Computing sum for it(40)=<1  in Loop 40 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(38)+it(39)+it(40)+it(41)=<D-1,it(38)+it(39)+it(40)+it(41)=<A-1,it(38)+it(39)+it(40)+it(41)=<A-1,it(38)+it(39)+it(40)+it(41)=<D-1,it(38)+it(39)+it(40)+it(41)=<D-D',it(38)+it(39)+it(40)+it(41)=<A-A',it(38)+it(39)+it(40)+it(41)=<A-A',it(38)+it(39)+it(40)+it(41)=<D-D'] 

##### Pending set A
* Psum in Loop 41: [it(41)=<1]

###### Computing sum for it(41)=<1  in Loop 41 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(38)+it(39)+it(40)+it(41)=<D-1,it(38)+it(39)+it(40)+it(41)=<A-1,it(38)+it(39)+it(40)+it(41)=<A-1,it(38)+it(39)+it(40)+it(41)=<D-1,it(38)+it(39)+it(40)+it(41)=<D-D',it(38)+it(39)+it(40)+it(41)=<A-A',it(38)+it(39)+it(40)+it(41)=<A-A',it(38)+it(39)+it(40)+it(41)=<D-D'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [38,39,40,41] 

#### Simplifying cost structure of phase [38,39,40,41] 
 * Joined equivalent variables [it(38),it(39),it(40),it(41)] into it(38)

#### Cost of phase [38,39,40,41]:concat(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) -> [concat(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O')] 
20*it(38)+0
  Such that:aux(1) =< A
aux(2) =< A-A'
aux(3) =< D
aux(4) =< D-D'
it(38) =< aux(1)
it(38) =< aux(2)
it(38) =< aux(3)
it(38) =< aux(4)

#### Simplifying cost structure of chain [[38,39,40,41],42] 
 * Joined equivalent variables [aux(5),aux(1),aux(2),aux(3),aux(4)] into aux(5)

#### Cost of chains of concat(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O):
* Chain [[38,39,40,41],42]: 20*it(38)+2
  Such that:aux(5) =< D
it(38) =< aux(5)

  with precondition: [A=D,A+F=K+1,A+I=N+1,A>=2,B>=1,C>=0,E>=1,F>=1,G>=0,H>=0,I>=1,J>=0,L>=1,O>=1,L>=G,M>=H,O>=J,B+G>=L,E+J>=O] 

* Chain [42]: 2
  with precondition: [A=1,B=0,D=1,E=0,F=K,G=L,H=M,I=N,J=O,C>=0,F>=0,G>=0,H>=0,I>=0,J>=0] 


#### Simplifying cost structure of CE 45 

#### Computing cost of phase [45] 

#### Simplifying cost structure of CE 43 

#### Cost of loops [45] 

 * loop 45:subtract_row_helper(A,B,C,D,E,F,G) -> [subtract_row_helper(A',B',C',D',E',F',G')] 
10
##### Pending set subtract_row_helper(A,B,C,D,E,F,G)
* Psum in Loop 45: [it(45)=<1]

###### Computing sum for it(45)=<1  in Loop 45 
   - Applying inductive sum strategy 
     - head Candidate: C-1 
     - head Candidate: A-1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
     - tail Candidate: A-1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(45)=<C-1,it(45)=<A-1,it(45)=<A-1,it(45)=<C-1,it(45)=<C-C',it(45)=<A-A',it(45)=<A-A',it(45)=<C-C'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [45] 

#### Simplifying cost structure of phase [45] 

#### Cost of phase [45]:subtract_row_helper(A,B,C,D,E,F,G) -> [subtract_row_helper(A',B',C',D',E',F',G')] 
10*it(45)+0
  Such that:it(45) =< A
it(45) =< A-A'
it(45) =< C
it(45) =< C-C'

#### Simplifying cost structure of chain [[45],44] 

#### Simplifying cost structure of CE 44 

#### Found solution for phase  [45] in the cache 

#### Cost of phase [45]:subtract_row_helper(A,B,C,D,E,F,G) -> [subtract_row_helper(A',B',C',D',E',F',G')] 
10*it(45)+0
  Such that:it(45) =< A
it(45) =< A-A'
it(45) =< C
it(45) =< C-C'

#### Simplifying cost structure of chain [[45],43] 

#### Cost of chains of subtract_row_helper(A,B,C,D,E,F,G):
* Chain [[45],44]: 10*it(45)+3
  Such that:it(45) =< F

  with precondition: [A=F,A>=2,B>=0,D>=0,E>=0,G>=0,C>=A] 

* Chain [[45],43]: 10*it(45)+6
  Such that:it(45) =< F

  with precondition: [C=F,B>=0,C>=2,D>=0,E>=0,G>=0,A>=C+1] 

* Chain [44]: 3
  with precondition: [A=1,F=1,B>=0,C>=0,D>=0,E>=0,G>=0] 

* Chain [43]: 6
  with precondition: [C=1,F=1,A>=2,B>=0,D>=0,E>=0,G>=0] 


#### Simplifying cost structure of CE 47 

#### Computing cost of phase [46] 

#### Simplifying cost structure of CE 48 

#### Cost of loops [46] 

 * loop 46:get_2elems(A,B,C,D,E,F,G,H,I,J,K,L,M,N) -> [get_2elems(A',B',C',D',E',F',G',H',I',J',K',L',M',N')] 
10
##### Pending set get_2elems(A,B,C,D,E,F,G,H,I,J,K,L,M,N)
* Psum in Loop 46: [it(46)=<1]

###### Computing sum for it(46)=<1  in Loop 46 
   - Applying inductive sum strategy 
     - head Candidate: J 
     - head Candidate: I 
     - head Candidate: C-1 
     - head Candidate: A-1 
     - head Candidate: E-1 
     - head Candidate: G-1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: G-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: I 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: J 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: J 
     - tail Candidate: I 
     - tail Candidate: C-1 
     - tail Candidate: A-1 
     - tail Candidate: E-1 
     - tail Candidate: G-1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: G-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: I 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: J 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(46)=<J,it(46)=<I,it(46)=<C-1,it(46)=<A-1,it(46)=<E-1,it(46)=<G-1,it(46)=<A-1,it(46)=<C-1,it(46)=<E-1,it(46)=<G-1,it(46)=<I,it(46)=<J,it(46)=<J-J',it(46)=<I-I',it(46)=<C-C',it(46)=<A-A',it(46)=<E-E',it(46)=<G-G',it(46)=<A-A',it(46)=<C-C',it(46)=<E-E',it(46)=<G-G',it(46)=<I-I',it(46)=<J-J'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [46] 

#### Simplifying cost structure of phase [46] 

#### Cost of phase [46]:get_2elems(A,B,C,D,E,F,G,H,I,J,K,L,M,N) -> [get_2elems(A',B',C',D',E',F',G',H',I',J',K',L',M',N')] 
10*it(46)+0
  Such that:it(46) =< A
it(46) =< A-A'
it(46) =< C
it(46) =< C-C'
it(46) =< E
it(46) =< E-E'
it(46) =< G
it(46) =< G-G'
it(46) =< I
it(46) =< I-I'
it(46) =< J
it(46) =< J-J'

#### Simplifying cost structure of chain [[46],48] 

#### Simplifying cost structure of CE 46 

#### Found solution for phase  [46] in the cache 

#### Cost of phase [46]:get_2elems(A,B,C,D,E,F,G,H,I,J,K,L,M,N) -> [get_2elems(A',B',C',D',E',F',G',H',I',J',K',L',M',N')] 
10*it(46)+0
  Such that:it(46) =< A
it(46) =< A-A'
it(46) =< C
it(46) =< C-C'
it(46) =< E
it(46) =< E-E'
it(46) =< G
it(46) =< G-G'
it(46) =< I
it(46) =< I-I'
it(46) =< J
it(46) =< J-J'

#### Simplifying cost structure of chain [[46],47] 

#### Cost of chains of get_2elems(A,B,C,D,E,F,G,H,I,J,K,L,M,N):
* Chain [[46],48]: 10*it(46)+8
  Such that:it(46) =< J

  with precondition: [K=1,M=1,I=J,B>=0,D>=1,F>=0,I>=1,L>=0,N>=1,A>=I+2,C>=I+2,E>=I+2,G>=I+2,H>=N] 

* Chain [[46],47]: 10*it(46)+8
  Such that:it(46) =< I

  with precondition: [K=1,M=1,I=J,B>=0,F>=0,H>=1,I>=1,L>=0,N>=2,A>=I+2,C>=I+2,E>=I+2,G>=I+2,D>=N] 

* Chain [48]: 8
  with precondition: [I=0,J=0,K=1,M=1,A>=2,B>=0,C>=2,D>=1,E>=2,F>=0,G>=2,L>=0,N>=1,H>=N] 

* Chain [47]: 8
  with precondition: [I=0,J=0,K=1,M=1,A>=2,B>=0,C>=2,E>=2,F>=0,G>=2,H>=1,L>=0,N>=2,D>=N] 

 * Renamed intermediate variables: 
[ (eq(49,2),it(45))>>s(1)]

#### Simplifying cost structure of CE 49 
 * Renamed intermediate variables: 
[ (eq(51,2),it(45))>>s(2)]

#### Simplifying cost structure of CE 51 
 * Joined equivalent variables [s(1),s(2)] into s(1)
 * Renamed intermediate variables: 
[ (eq(50,2),it(45))>>s(3)]

#### Simplifying cost structure of CE 50 
 * Renamed intermediate variables: 
[ (eq(52,2),it(45))>>s(4)]

#### Simplifying cost structure of CE 52 
 * Joined equivalent variables [s(3),s(4)] into s(3)
 * Renamed intermediate variables: 
[ (eq(53,1),it(46))>>s(5)]
 * Renamed intermediate variables: 
[ (eq(53,2),it(45))>>s(6)]

#### Simplifying cost structure of CE 53 
 * Renamed intermediate variables: 
[ (eq(55,1),it(46))>>s(7)]
 * Renamed intermediate variables: 
[ (eq(55,2),it(45))>>s(8)]

#### Simplifying cost structure of CE 55 
 * Joined equivalent variables [s(6),s(8)] into s(6)
 * Joined equivalent variables [s(5),s(7)] into s(5)
 * Renamed intermediate variables: 
[ (eq(54,1),it(46))>>s(9)]
 * Renamed intermediate variables: 
[ (eq(54,2),it(45))>>s(10)]

#### Simplifying cost structure of CE 54 
 * Renamed intermediate variables: 
[ (eq(56,1),it(46))>>s(11)]
 * Renamed intermediate variables: 
[ (eq(56,2),it(45))>>s(12)]

#### Simplifying cost structure of CE 56 
 * Joined equivalent variables [s(10),s(12)] into s(10)
 * Joined equivalent variables [s(9),s(11)] into s(9)

#### Cost of chains of subtract_row(A,B,C,D,E,F,G):
* Chain [52]: 20*s(1)+18
  Such that:aux(6) =< A
s(1) =< aux(6)

  with precondition: [E=0,A=F,A>=2,B>=0,D>=0,G>=0,C>=A] 

* Chain [51]: 20*s(3)+21
  Such that:aux(7) =< C
s(3) =< aux(7)

  with precondition: [E=0,C=F,B>=0,C>=2,D>=0,G>=0,A>=C+1] 

* Chain [50]: 20*s(5)+20*s(6)+18
  Such that:aux(8) =< A
aux(9) =< E
s(6) =< aux(8)
s(5) =< aux(9)

  with precondition: [A=F,B>=0,D>=0,E>=1,G>=0,C>=A,A>=E+2] 

* Chain [49]: 20*s(9)+20*s(10)+21
  Such that:aux(10) =< C
aux(11) =< E
s(10) =< aux(10)
s(9) =< aux(11)

  with precondition: [C=F,B>=0,D>=0,E>=1,G>=0,A>=C+1,C>=E+2] 


#### Simplifying cost structure of CE 57 

#### Computing cost of phase [57,58,59,60] 
 * Renamed intermediate variables: 
[ (eq(60,1),aux(7))>>s(13), (eq(60,1),s(3))>>s(14)]

#### Simplifying cost structure of CE 60 
 * Renamed intermediate variables: 
[ (it(57),s(13))>>s(15), (it(57),s(14))>>s(16)]
 * Renamed intermediate variables: 
[ (eq(59,1),aux(6))>>s(17), (eq(59,1),s(1))>>s(18)]

#### Simplifying cost structure of CE 59 
 * Renamed intermediate variables: 
[ (it(58),s(17))>>s(19), (it(58),s(18))>>s(20)]
 * Renamed intermediate variables: 
[ (eq(61,1),aux(7))>>s(21), (eq(61,1),s(3))>>s(22)]

#### Simplifying cost structure of CE 61 
 * Renamed intermediate variables: 
[ (it(59),s(21))>>s(23), (it(59),s(22))>>s(24)]
 * Renamed intermediate variables: 
[ (eq(58,1),aux(6))>>s(25), (eq(58,1),s(1))>>s(26)]

#### Simplifying cost structure of CE 58 
 * Renamed intermediate variables: 
[ (it(60),s(25))>>s(27), (it(60),s(26))>>s(28)]

#### Cost of loops [57,58,59,60] 

 * loop 57:subtract_helper(A,B,C,D,E,F,G,H,I) -> [subtract_helper(A',B',C',D',E',F',G',H',I')] 
20*s(16)+27
  Such that:s(15) =< B
s(15) =< D
s(16) =< s(15)

 * loop 58:subtract_helper(A,B,C,D,E,F,G,H,I) -> [subtract_helper(A',B',C',D',E',F',G',H',I')] 
20*s(20)+24
  Such that:s(19) =< D'
s(20) =< s(19)

 * loop 59:subtract_helper(A,B,C,D,E,F,G,H,I) -> [subtract_helper(A',B',C',D',E',F',G',H',I')] 
20*s(24)+27
  Such that:s(23) =< D
s(23) =< B'
s(24) =< s(23)

 * loop 60:subtract_helper(A,B,C,D,E,F,G,H,I) -> [subtract_helper(A',B',C',D',E',F',G',H',I')] 
20*s(28)+24
  Such that:s(27) =< D'
s(28) =< s(27)

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 57: [it(57)=<1,s(30)=<B,s(30)=<D]
* Psum in Loop 58: [it(58)=<1,s(32)=<D']
* Psum in Loop 59: [it(59)=<1,s(34)=<D,s(34)=<B']
* Psum in Loop 60: [it(60)=<1,s(36)=<D']

###### Computing sum for it(57)=<1  in Loop 57 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - Loop 58 is collaborative and bounds [it(58)] 
       - Loop 59 is collaborative and bounds [it(59)] 
       - Loop 60 is collaborative and bounds [it(60)] 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - Loop 58 is collaborative and bounds [it(58)] 
       - Loop 59 is collaborative and bounds [it(59)] 
       - Loop 60 is collaborative and bounds [it(60)] 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(57)+it(58)+it(59)+it(60)=<A-1,it(57)+it(58)+it(59)+it(60)=<A-1,it(57)+it(58)+it(59)+it(60)=<A-A',it(57)+it(58)+it(59)+it(60)=<A-A'] 

##### Pending set A
* Psum in Loop 57: [s(30)=<B,s(30)=<D]
* Psum in Loop 58: [it(58)=<1,s(32)=<D']
* Psum in Loop 59: [it(59)=<1,s(34)=<D,s(34)=<B']
* Psum in Loop 60: [it(60)=<1,s(36)=<D']

###### Computing sum for s(30)=<B  in Loop 57 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(12)=<B] 
 * Adding constraints: [s(30)=<it(57)*aux(12)] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(12)=<B]
* Psum in Loop 57: [s(30)=<D]
* Psum in Loop 58: [it(58)=<1,s(32)=<D']
* Psum in Loop 59: [it(59)=<1,s(34)=<D,s(34)=<B']
* Psum in Loop 60: [it(60)=<1,s(36)=<D']

###### Computing max_min for aux(12)=<B  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(12)=<B] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 57: [s(30)=<D]
* Psum in Loop 58: [it(58)=<1,s(32)=<D']
* Psum in Loop 59: [it(59)=<1,s(34)=<D,s(34)=<B']
* Psum in Loop 60: [it(60)=<1,s(36)=<D']

###### Computing sum for s(30)=<D  in Loop 57 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(13)=<D] 
 * Adding constraints: [s(30)=<it(57)*aux(13)] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(13)=<D]
* Psum in Loop 58: [it(58)=<1,s(32)=<D']
* Psum in Loop 59: [it(59)=<1,s(34)=<D,s(34)=<B']
* Psum in Loop 60: [it(60)=<1,s(36)=<D']

###### Computing max_min for aux(13)=<D  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(13)=<D] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 58: [it(58)=<1,s(32)=<D']
* Psum in Loop 59: [it(59)=<1,s(34)=<D,s(34)=<B']
* Psum in Loop 60: [it(60)=<1,s(36)=<D']

###### Computing sum for it(58)=<1  in Loop 58 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(57)+it(58)+it(59)+it(60)=<A-1,it(57)+it(58)+it(59)+it(60)=<A-1,it(57)+it(58)+it(59)+it(60)=<A-A',it(57)+it(58)+it(59)+it(60)=<A-A'] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 58: [s(32)=<D']
* Psum in Loop 59: [it(59)=<1,s(34)=<D,s(34)=<B']
* Psum in Loop 60: [it(60)=<1,s(36)=<D']

###### Computing sum for s(32)=<D'  in Loop 58 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(14)=<B,aux(14)=<D] 
 * Adding constraints: [s(32)=<it(58)*aux(14)] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(14)=<B,aux(14)=<D]
* Psum in Loop 59: [it(59)=<1,s(34)=<D,s(34)=<B']
* Psum in Loop 60: [it(60)=<1,s(36)=<D']

###### Computing max_min for aux(14)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(14)=<aux(12)] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(14)=<D]
* Psum in Loop 59: [it(59)=<1,s(34)=<D,s(34)=<B']
* Psum in Loop 60: [it(60)=<1,s(36)=<D']

###### Computing max_min for aux(14)=<D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(14)=<aux(13)] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 59: [it(59)=<1,s(34)=<D,s(34)=<B']
* Psum in Loop 60: [it(60)=<1,s(36)=<D']

###### Computing sum for it(59)=<1  in Loop 59 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(57)+it(58)+it(59)+it(60)=<A-1,it(57)+it(58)+it(59)+it(60)=<A-1,it(57)+it(58)+it(59)+it(60)=<A-A',it(57)+it(58)+it(59)+it(60)=<A-A'] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 59: [s(34)=<D,s(34)=<B']
* Psum in Loop 60: [it(60)=<1,s(36)=<D']

###### Computing sum for s(34)=<D  in Loop 59 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(15)=<D] 
 * Adding constraints: [s(34)=<it(59)*aux(15)] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(15)=<D]
* Psum in Loop 59: [s(34)=<B']
* Psum in Loop 60: [it(60)=<1,s(36)=<D']

###### Computing max_min for aux(15)=<D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(15)=<aux(13)] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 59: [s(34)=<B']
* Psum in Loop 60: [it(60)=<1,s(36)=<D']

###### Computing sum for s(34)=<B'  in Loop 59 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(16)=<B] 
 * Adding constraints: [s(34)=<it(59)*aux(16)] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(16)=<B]
* Psum in Loop 60: [it(60)=<1,s(36)=<D']

###### Computing max_min for aux(16)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(16)=<aux(12)] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 60: [it(60)=<1,s(36)=<D']

###### Computing sum for it(60)=<1  in Loop 60 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(57)+it(58)+it(59)+it(60)=<A-1,it(57)+it(58)+it(59)+it(60)=<A-1,it(57)+it(58)+it(59)+it(60)=<A-A',it(57)+it(58)+it(59)+it(60)=<A-A'] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 60: [s(36)=<D']

###### Computing sum for s(36)=<D'  in Loop 60 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(17)=<B,aux(17)=<D] 
 * Adding constraints: [s(36)=<it(60)*aux(17)] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(17)=<B,aux(17)=<D]

###### Computing max_min for aux(17)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(17)=<aux(12)] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(17)=<D]

###### Computing max_min for aux(17)=<D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(17)=<aux(13)] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [57,58,59,60] 

#### Simplifying cost structure of phase [57,58,59,60] 
 * Joined equivalent variables [aux(14),aux(17)] into aux(14)
 * Joined equivalent variables [it(57),it(58),it(59),it(60)] into it(57)
 * Joined equivalent variables [s(32),s(36)] into s(32)
 * Joined equivalent variables [s(31),s(35)] into s(31)

#### Cost of phase [57,58,59,60]:subtract_helper(A,B,C,D,E,F,G,H,I) -> [subtract_helper(A',B',C',D',E',F',G',H',I')] 
102*it(57)+20*s(29)+40*s(31)+20*s(33)+0
  Such that:aux(12) =< B
aux(13) =< D
aux(18) =< A
aux(19) =< A-A'
it(57) =< aux(18)
it(57) =< aux(19)
aux(14) =< aux(13)
aux(14) =< aux(12)
aux(16) =< aux(12)
aux(15) =< aux(13)
s(30) =< it(57)*aux(13)
s(30) =< it(57)*aux(12)
s(32) =< it(57)*aux(14)
s(34) =< it(57)*aux(16)
s(34) =< it(57)*aux(15)
s(31) =< s(32)
s(33) =< s(34)
s(29) =< s(30)

#### Simplifying cost structure of chain [[57,58,59,60],61] 
 * Joined equivalent variables [aux(20),aux(18),aux(19)] into aux(20)

#### Computing cost of phase [53,54,55,56] 
 * Renamed intermediate variables: 
[ (eq(64,1),aux(10))>>s(37), (eq(64,1),aux(11))>>s(38), (eq(64,1),s(10))>>s(39), (eq(64,1),s(9))>>s(40)]

#### Simplifying cost structure of CE 64 
 * Renamed intermediate variables: 
[ (it(53),s(37))>>s(41), (it(53),s(38))>>s(42), (it(53),s(39))>>s(43), (it(53),s(40))>>s(44)]
 * Renamed intermediate variables: 
[ (eq(65,1),aux(10))>>s(45), (eq(65,1),aux(11))>>s(46), (eq(65,1),s(10))>>s(47), (eq(65,1),s(9))>>s(48)]

#### Simplifying cost structure of CE 65 
 * Renamed intermediate variables: 
[ (it(54),s(45))>>s(49), (it(54),s(46))>>s(50), (it(54),s(47))>>s(51), (it(54),s(48))>>s(52)]
 * Renamed intermediate variables: 
[ (eq(63,1),aux(8))>>s(53), (eq(63,1),aux(9))>>s(54), (eq(63,1),s(6))>>s(55), (eq(63,1),s(5))>>s(56)]

#### Simplifying cost structure of CE 63 
 * Renamed intermediate variables: 
[ (it(55),s(53))>>s(57), (it(55),s(54))>>s(58), (it(55),s(55))>>s(59), (it(55),s(56))>>s(60)]
 * Renamed intermediate variables: 
[ (eq(62,1),aux(8))>>s(61), (eq(62,1),aux(9))>>s(62), (eq(62,1),s(6))>>s(63), (eq(62,1),s(5))>>s(64)]

#### Simplifying cost structure of CE 62 
 * Renamed intermediate variables: 
[ (it(56),s(61))>>s(65), (it(56),s(62))>>s(66), (it(56),s(63))>>s(67), (it(56),s(64))>>s(68)]

#### Cost of loops [53,54,55,56] 

 * loop 53:subtract_helper(A,B,C,D,E,F,G,H,I) -> [subtract_helper(A',B',C',D',E',F',G',H',I')] 
20*s(43)+20*s(44)+27
  Such that:s(41) =< B
s(41) =< D'
s(42) =< F'
s(43) =< s(41)
s(44) =< s(42)

 * loop 54:subtract_helper(A,B,C,D,E,F,G,H,I) -> [subtract_helper(A',B',C',D',E',F',G',H',I')] 
20*s(51)+20*s(52)+27
  Such that:s(49) =< B'
s(49) =< D'
s(50) =< F'
s(51) =< s(49)
s(52) =< s(50)

 * loop 55:subtract_helper(A,B,C,D,E,F,G,H,I) -> [subtract_helper(A',B',C',D',E',F',G',H',I')] 
20*s(59)+20*s(60)+24
  Such that:s(57) =< D'
s(58) =< F'
s(59) =< s(57)
s(60) =< s(58)

 * loop 56:subtract_helper(A,B,C,D,E,F,G,H,I) -> [subtract_helper(A',B',C',D',E',F',G',H',I')] 
20*s(67)+20*s(68)+24
  Such that:s(65) =< D'
s(66) =< F'
s(67) =< s(65)
s(68) =< s(66)

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 53: [it(53)=<1,s(72)=<B,s(72)=<D',s(71)=<F']
* Psum in Loop 54: [it(54)=<1,s(76)=<B',s(76)=<D',s(75)=<F']
* Psum in Loop 55: [it(55)=<1,s(80)=<D',s(79)=<F']
* Psum in Loop 56: [it(56)=<1,s(84)=<D',s(83)=<F']

###### Computing sum for it(53)=<1  in Loop 53 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - Loop 54 is collaborative and bounds [it(54)] 
       - Loop 55 is collaborative and bounds [it(55)] 
       - Loop 56 is collaborative and bounds [it(56)] 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - Loop 54 is collaborative and bounds [it(54)] 
       - Loop 55 is collaborative and bounds [it(55)] 
       - Loop 56 is collaborative and bounds [it(56)] 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(53)+it(54)+it(55)+it(56)=<A-1,it(53)+it(54)+it(55)+it(56)=<A-1,it(53)+it(54)+it(55)+it(56)=<A-A',it(53)+it(54)+it(55)+it(56)=<A-A'] 

##### Pending set A
* Psum in Loop 53: [s(72)=<B,s(72)=<D',s(71)=<F']
* Psum in Loop 54: [it(54)=<1,s(76)=<B',s(76)=<D',s(75)=<F']
* Psum in Loop 55: [it(55)=<1,s(80)=<D',s(79)=<F']
* Psum in Loop 56: [it(56)=<1,s(84)=<D',s(83)=<F']

###### Computing sum for s(72)=<B  in Loop 53 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(21)=<B] 
 * Adding constraints: [s(72)=<it(53)*aux(21)] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(21)=<B]
* Psum in Loop 53: [s(72)=<D',s(71)=<F']
* Psum in Loop 54: [it(54)=<1,s(76)=<B',s(76)=<D',s(75)=<F']
* Psum in Loop 55: [it(55)=<1,s(80)=<D',s(79)=<F']
* Psum in Loop 56: [it(56)=<1,s(84)=<D',s(83)=<F']

###### Computing max_min for aux(21)=<B  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(21)=<B] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 53: [s(72)=<D',s(71)=<F']
* Psum in Loop 54: [it(54)=<1,s(76)=<B',s(76)=<D',s(75)=<F']
* Psum in Loop 55: [it(55)=<1,s(80)=<D',s(79)=<F']
* Psum in Loop 56: [it(56)=<1,s(84)=<D',s(83)=<F']

###### Computing sum for s(72)=<D'  in Loop 53 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(22)=<D] 
 * Adding constraints: [s(72)=<it(53)*aux(22)] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(22)=<D]
* Psum in Loop 53: [s(71)=<F']
* Psum in Loop 54: [it(54)=<1,s(76)=<B',s(76)=<D',s(75)=<F']
* Psum in Loop 55: [it(55)=<1,s(80)=<D',s(79)=<F']
* Psum in Loop 56: [it(56)=<1,s(84)=<D',s(83)=<F']

###### Computing max_min for aux(22)=<D  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(22)=<D] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 53: [s(71)=<F']
* Psum in Loop 54: [it(54)=<1,s(76)=<B',s(76)=<D',s(75)=<F']
* Psum in Loop 55: [it(55)=<1,s(80)=<D',s(79)=<F']
* Psum in Loop 56: [it(56)=<1,s(84)=<D',s(83)=<F']

###### Computing sum for s(71)=<F'  in Loop 53 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(23)=<F,aux(23)=<B-2] 
 * Adding constraints: [s(71)=<it(53)*aux(23)] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(23)=<B-2,aux(23)=<F]
* Psum in Loop 54: [it(54)=<1,s(76)=<B',s(76)=<D',s(75)=<F']
* Psum in Loop 55: [it(55)=<1,s(80)=<D',s(79)=<F']
* Psum in Loop 56: [it(56)=<1,s(84)=<D',s(83)=<F']

###### Computing max_min for aux(23)=<B-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(23)=<aux(21)-2] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(23)=<F]
* Psum in Loop 54: [it(54)=<1,s(76)=<B',s(76)=<D',s(75)=<F']
* Psum in Loop 55: [it(55)=<1,s(80)=<D',s(79)=<F']
* Psum in Loop 56: [it(56)=<1,s(84)=<D',s(83)=<F']

###### Computing max_min for aux(23)=<F  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(23)=<F,aux(23)=<B-2] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 54: [it(54)=<1,s(76)=<B',s(76)=<D',s(75)=<F']
* Psum in Loop 55: [it(55)=<1,s(80)=<D',s(79)=<F']
* Psum in Loop 56: [it(56)=<1,s(84)=<D',s(83)=<F']

###### Computing sum for it(54)=<1  in Loop 54 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(53)+it(54)+it(55)+it(56)=<A-1,it(53)+it(54)+it(55)+it(56)=<A-1,it(53)+it(54)+it(55)+it(56)=<A-A',it(53)+it(54)+it(55)+it(56)=<A-A'] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 54: [s(76)=<B',s(76)=<D',s(75)=<F']
* Psum in Loop 55: [it(55)=<1,s(80)=<D',s(79)=<F']
* Psum in Loop 56: [it(56)=<1,s(84)=<D',s(83)=<F']

###### Computing sum for s(76)=<B'  in Loop 54 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(24)=<B] 
 * Adding constraints: [s(76)=<it(54)*aux(24)] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(24)=<B]
* Psum in Loop 54: [s(76)=<D',s(75)=<F']
* Psum in Loop 55: [it(55)=<1,s(80)=<D',s(79)=<F']
* Psum in Loop 56: [it(56)=<1,s(84)=<D',s(83)=<F']

###### Computing max_min for aux(24)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(24)=<aux(21)] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 54: [s(76)=<D',s(75)=<F']
* Psum in Loop 55: [it(55)=<1,s(80)=<D',s(79)=<F']
* Psum in Loop 56: [it(56)=<1,s(84)=<D',s(83)=<F']

###### Computing sum for s(76)=<D'  in Loop 54 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(25)=<D] 
 * Adding constraints: [s(76)=<it(54)*aux(25)] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(25)=<D]
* Psum in Loop 54: [s(75)=<F']
* Psum in Loop 55: [it(55)=<1,s(80)=<D',s(79)=<F']
* Psum in Loop 56: [it(56)=<1,s(84)=<D',s(83)=<F']

###### Computing max_min for aux(25)=<D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(25)=<aux(22)] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 54: [s(75)=<F']
* Psum in Loop 55: [it(55)=<1,s(80)=<D',s(79)=<F']
* Psum in Loop 56: [it(56)=<1,s(84)=<D',s(83)=<F']

###### Computing sum for s(75)=<F'  in Loop 54 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(26)=<F,aux(26)=<B-2] 
 * Adding constraints: [s(75)=<it(54)*aux(26)] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(26)=<B-2,aux(26)=<F]
* Psum in Loop 55: [it(55)=<1,s(80)=<D',s(79)=<F']
* Psum in Loop 56: [it(56)=<1,s(84)=<D',s(83)=<F']

###### Computing max_min for aux(26)=<B-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(26)=<aux(21)-2] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(26)=<F]
* Psum in Loop 55: [it(55)=<1,s(80)=<D',s(79)=<F']
* Psum in Loop 56: [it(56)=<1,s(84)=<D',s(83)=<F']

###### Computing max_min for aux(26)=<F  
   - Found a solution using cacheing 
 * Adding constraints:[aux(26)=<aux(23)] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 55: [it(55)=<1,s(80)=<D',s(79)=<F']
* Psum in Loop 56: [it(56)=<1,s(84)=<D',s(83)=<F']

###### Computing sum for it(55)=<1  in Loop 55 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(53)+it(54)+it(55)+it(56)=<A-1,it(53)+it(54)+it(55)+it(56)=<A-1,it(53)+it(54)+it(55)+it(56)=<A-A',it(53)+it(54)+it(55)+it(56)=<A-A'] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 55: [s(80)=<D',s(79)=<F']
* Psum in Loop 56: [it(56)=<1,s(84)=<D',s(83)=<F']

###### Computing sum for s(80)=<D'  in Loop 55 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(27)=<B,aux(27)=<D] 
 * Adding constraints: [s(80)=<it(55)*aux(27)] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(27)=<B,aux(27)=<D]
* Psum in Loop 55: [s(79)=<F']
* Psum in Loop 56: [it(56)=<1,s(84)=<D',s(83)=<F']

###### Computing max_min for aux(27)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(27)=<aux(21)] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(27)=<D]
* Psum in Loop 55: [s(79)=<F']
* Psum in Loop 56: [it(56)=<1,s(84)=<D',s(83)=<F']

###### Computing max_min for aux(27)=<D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(27)=<aux(22)] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 55: [s(79)=<F']
* Psum in Loop 56: [it(56)=<1,s(84)=<D',s(83)=<F']

###### Computing sum for s(79)=<F'  in Loop 55 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(28)=<F,aux(28)=<D-2] 
 * Adding constraints: [s(79)=<it(55)*aux(28)] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(28)=<D-2,aux(28)=<F]
* Psum in Loop 56: [it(56)=<1,s(84)=<D',s(83)=<F']

###### Computing max_min for aux(28)=<D-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(28)=<aux(22)-2] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(28)=<F]
* Psum in Loop 56: [it(56)=<1,s(84)=<D',s(83)=<F']

###### Computing max_min for aux(28)=<F  
   - Found a solution using cacheing 
 * Adding constraints:[aux(28)=<aux(23)] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 56: [it(56)=<1,s(84)=<D',s(83)=<F']

###### Computing sum for it(56)=<1  in Loop 56 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(53)+it(54)+it(55)+it(56)=<A-1,it(53)+it(54)+it(55)+it(56)=<A-1,it(53)+it(54)+it(55)+it(56)=<A-A',it(53)+it(54)+it(55)+it(56)=<A-A'] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 56: [s(84)=<D',s(83)=<F']

###### Computing sum for s(84)=<D'  in Loop 56 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(29)=<B,aux(29)=<D] 
 * Adding constraints: [s(84)=<it(56)*aux(29)] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(29)=<B,aux(29)=<D]
* Psum in Loop 56: [s(83)=<F']

###### Computing max_min for aux(29)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(29)=<aux(21)] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(29)=<D]
* Psum in Loop 56: [s(83)=<F']

###### Computing max_min for aux(29)=<D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(29)=<aux(22)] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 56: [s(83)=<F']

###### Computing sum for s(83)=<F'  in Loop 56 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(30)=<F,aux(30)=<D-2] 
 * Adding constraints: [s(83)=<it(56)*aux(30)] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(30)=<D-2,aux(30)=<F]

###### Computing max_min for aux(30)=<D-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(30)=<aux(22)-2] 

##### Pending set subtract_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(30)=<F]

###### Computing max_min for aux(30)=<F  
   - Found a solution using cacheing 
 * Adding constraints:[aux(30)=<aux(23)] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [53,54,55,56] 

#### Simplifying cost structure of phase [53,54,55,56] 
 * Joined equivalent variables [aux(33),aux(21)] into aux(33)
 * Joined equivalent variables [aux(28),aux(30)] into aux(28)
 * Joined equivalent variables [aux(27),aux(29)] into aux(27)
 * Joined equivalent variables [it(53),it(54),it(55),it(56)] into it(53)
 * Joined equivalent variables [s(80),s(84)] into s(80)
 * Joined equivalent variables [s(79),s(83)] into s(79)
 * Joined equivalent variables [s(78),s(82)] into s(78)
 * Joined equivalent variables [s(77),s(81)] into s(77)

#### Cost of phase [53,54,55,56]:subtract_helper(A,B,C,D,E,F,G,H,I) -> [subtract_helper(A',B',C',D',E',F',G',H',I')] 
102*it(53)+20*s(69)+20*s(70)+20*s(73)+20*s(74)+40*s(77)+40*s(78)+0
  Such that:aux(22) =< D
aux(23) =< F
aux(31) =< A
aux(32) =< A-A'
aux(33) =< B
it(53) =< aux(31)
it(53) =< aux(32)
aux(23) =< aux(33)
aux(28) =< aux(22)-2
aux(27) =< aux(22)
aux(27) =< aux(33)
aux(26) =< aux(33)-2
aux(25) =< aux(22)
aux(24) =< aux(33)
aux(23) =< aux(33)-2
s(72) =< it(53)*aux(22)
s(72) =< it(53)*aux(33)
aux(28) =< aux(23)
aux(26) =< aux(23)
s(80) =< it(53)*aux(27)
s(76) =< it(53)*aux(25)
s(76) =< it(53)*aux(24)
s(71) =< it(53)*aux(23)
s(79) =< it(53)*aux(28)
s(75) =< it(53)*aux(26)
s(77) =< s(80)
s(78) =< s(79)
s(73) =< s(76)
s(74) =< s(75)
s(69) =< s(72)
s(70) =< s(71)

#### Simplifying cost structure of chain [[53,54,55,56],61] 
 * Joined equivalent variables [aux(34),aux(31),aux(32)] into aux(34)

#### Cost of chains of subtract_helper(A,B,C,D,E,F,G,H,I):
* Chain [[57,58,59,60],61]: 102*it(57)+20*s(29)+40*s(31)+20*s(33)+3
  Such that:aux(12) =< B
aux(13) =< D
aux(20) =< G
it(57) =< aux(20)
aux(14) =< aux(13)
aux(14) =< aux(12)
aux(16) =< aux(12)
aux(15) =< aux(13)
s(30) =< it(57)*aux(13)
s(30) =< it(57)*aux(12)
s(32) =< it(57)*aux(14)
s(34) =< it(57)*aux(16)
s(34) =< it(57)*aux(15)
s(31) =< s(32)
s(33) =< s(34)
s(29) =< s(30)

  with precondition: [F=0,A=G,A>=2,C>=0,E>=0,H>=2,I>=0,B>=H,D>=H] 

* Chain [[53,54,55,56],61]: 102*it(53)+20*s(69)+20*s(70)+20*s(73)+20*s(74)+40*s(77)+40*s(78)+3
  Such that:aux(33) =< B
aux(22) =< D
aux(23) =< F
aux(34) =< A
it(53) =< aux(34)
aux(23) =< aux(33)
aux(28) =< aux(22)-2
aux(27) =< aux(22)
aux(27) =< aux(33)
aux(26) =< aux(33)-2
aux(25) =< aux(22)
aux(24) =< aux(33)
aux(23) =< aux(33)-2
s(72) =< it(53)*aux(22)
s(72) =< it(53)*aux(33)
aux(28) =< aux(23)
aux(26) =< aux(23)
s(80) =< it(53)*aux(27)
s(76) =< it(53)*aux(25)
s(76) =< it(53)*aux(24)
s(71) =< it(53)*aux(23)
s(79) =< it(53)*aux(28)
s(75) =< it(53)*aux(26)
s(77) =< s(80)
s(78) =< s(79)
s(73) =< s(76)
s(74) =< s(75)
s(69) =< s(72)
s(70) =< s(71)

  with precondition: [A=G,A>=2,C>=0,E>=0,F>=1,I>=0,H>=F+2,B>=H,D>=H] 

* Chain [61]: 3
  with precondition: [A=1,B=0,G=1,H=0,C>=0,D>=0,E>=0,F>=0,I>=0] 

 * Renamed intermediate variables: 
[ (eq(69,1),aux(12))>>s(85), (eq(69,1),aux(13))>>s(86), (eq(69,1),aux(20))>>s(87), (eq(69,1),it(57))>>s(88), (eq(69,1),aux(14))>>s(89), (eq(69,1),aux(16))>>s(90), (eq(69,1),aux(15))>>s(91), (eq(69,1),s(30))>>s(92), (eq(69,1),s(32))>>s(93), (eq(69,1),s(34))>>s(94), (eq(69,1),s(31))>>s(95), (eq(69,1),s(33))>>s(96), (eq(69,1),s(29))>>s(97)]
 * Renamed intermediate variables: 
[ (eq(69,2),aux(5))>>s(98), (eq(69,2),it(38))>>s(99)]

#### Simplifying cost structure of CE 69 
 * Joined equivalent variables [aux(35),s(87),s(98)] into aux(35)
 * Joined equivalent variables [s(88),s(99)] into s(88)
 * Renamed intermediate variables: 
[ (eq(67,2),aux(5))>>s(100), (eq(67,2),it(38))>>s(101)]

#### Simplifying cost structure of CE 67 
 * Renamed intermediate variables: 
[ (eq(68,1),aux(12))>>s(102), (eq(68,1),aux(13))>>s(103), (eq(68,1),aux(20))>>s(104), (eq(68,1),it(57))>>s(105), (eq(68,1),aux(14))>>s(106), (eq(68,1),aux(16))>>s(107), (eq(68,1),aux(15))>>s(108), (eq(68,1),s(30))>>s(109), (eq(68,1),s(32))>>s(110), (eq(68,1),s(34))>>s(111), (eq(68,1),s(31))>>s(112), (eq(68,1),s(33))>>s(113), (eq(68,1),s(29))>>s(114)]

#### Simplifying cost structure of CE 68 
 * Renamed intermediate variables: 
[ (eq(70,1),aux(33))>>s(115), (eq(70,1),aux(22))>>s(116), (eq(70,1),aux(23))>>s(117), (eq(70,1),aux(34))>>s(118), (eq(70,1),it(53))>>s(119), (eq(70,1),aux(28))>>s(120), (eq(70,1),aux(27))>>s(121), (eq(70,1),aux(26))>>s(122), (eq(70,1),aux(25))>>s(123), (eq(70,1),aux(24))>>s(124), (eq(70,1),s(72))>>s(125), (eq(70,1),s(80))>>s(126), (eq(70,1),s(76))>>s(127), (eq(70,1),s(71))>>s(128), (eq(70,1),s(79))>>s(129), (eq(70,1),s(75))>>s(130), (eq(70,1),s(77))>>s(131), (eq(70,1),s(78))>>s(132), (eq(70,1),s(73))>>s(133), (eq(70,1),s(74))>>s(134), (eq(70,1),s(69))>>s(135), (eq(70,1),s(70))>>s(136)]

#### Simplifying cost structure of CE 70 
 * Joined equivalent variables [aux(36),s(100),s(104),s(118)] into aux(36)
 * Joined equivalent variables [aux(37),s(102),s(115)] into aux(37)
 * Joined equivalent variables [aux(38),s(103),s(116)] into aux(38)
 * Joined equivalent variables [s(108),s(123)] into s(108)
 * Joined equivalent variables [s(106),s(121)] into s(106)
 * Joined equivalent variables [s(107),s(124)] into s(107)
 * Joined equivalent variables [s(101),s(105),s(119)] into s(101)
 * Joined equivalent variables [s(109),s(125)] into s(109)
 * Joined equivalent variables [s(110),s(126)] into s(110)
 * Joined equivalent variables [s(111),s(127)] into s(111)
 * Joined equivalent variables [s(114),s(135)] into s(114)
 * Joined equivalent variables [s(112),s(131)] into s(112)
 * Joined equivalent variables [s(113),s(133)] into s(113)

#### Simplifying cost structure of CE 66 
 * Renamed intermediate variables: 
[ (eq(71,1),aux(33))>>s(137), (eq(71,1),aux(22))>>s(138), (eq(71,1),aux(23))>>s(139), (eq(71,1),aux(34))>>s(140), (eq(71,1),it(53))>>s(141), (eq(71,1),aux(28))>>s(142), (eq(71,1),aux(27))>>s(143), (eq(71,1),aux(26))>>s(144), (eq(71,1),aux(25))>>s(145), (eq(71,1),aux(24))>>s(146), (eq(71,1),s(72))>>s(147), (eq(71,1),s(80))>>s(148), (eq(71,1),s(76))>>s(149), (eq(71,1),s(71))>>s(150), (eq(71,1),s(79))>>s(151), (eq(71,1),s(75))>>s(152), (eq(71,1),s(77))>>s(153), (eq(71,1),s(78))>>s(154), (eq(71,1),s(73))>>s(155), (eq(71,1),s(74))>>s(156), (eq(71,1),s(69))>>s(157), (eq(71,1),s(70))>>s(158)]
 * Renamed intermediate variables: 
[ (eq(71,2),aux(5))>>s(159), (eq(71,2),it(38))>>s(160)]

#### Simplifying cost structure of CE 71 
 * Joined equivalent variables [aux(39),s(140),s(159)] into aux(39)
 * Joined equivalent variables [s(141),s(160)] into s(141)

#### Cost of chains of case_18(A,B,C,D,E,F,G,H,I,J,K,L,M):
* Chain [65]: 122*s(88)+40*s(95)+20*s(96)+20*s(97)+8
  Such that:s(85) =< C
s(86) =< E
aux(35) =< B
s(88) =< aux(35)
s(89) =< s(86)
s(89) =< s(85)
s(90) =< s(85)
s(91) =< s(86)
s(92) =< s(88)*s(86)
s(92) =< s(88)*s(85)
s(93) =< s(88)*s(89)
s(94) =< s(88)*s(90)
s(94) =< s(88)*s(91)
s(95) =< s(93)
s(96) =< s(94)
s(97) =< s(92)

  with precondition: [A=1,J=0,C>=2,D>=0,E>=2,F>=0,G>=0,H>=0,I>=0,K>=3,L>=2,M>=0,2*B>=K+1,2*C>=L,C+E>=L] 

* Chain [64]: 224*s(101)+80*s(112)+40*s(113)+40*s(114)+40*s(132)+20*s(134)+20*s(136)+8
  Such that:s(117) =< J
aux(36) =< B
aux(37) =< C
aux(38) =< E
s(101) =< aux(36)
s(106) =< aux(38)
s(106) =< aux(37)
s(107) =< aux(37)
s(108) =< aux(38)
s(109) =< s(101)*aux(38)
s(109) =< s(101)*aux(37)
s(110) =< s(101)*s(106)
s(111) =< s(101)*s(107)
s(111) =< s(101)*s(108)
s(112) =< s(110)
s(113) =< s(111)
s(114) =< s(109)
s(117) =< aux(37)
s(120) =< aux(38)-2
s(122) =< aux(37)-2
s(117) =< aux(37)-2
s(120) =< s(117)
s(122) =< s(117)
s(128) =< s(101)*s(117)
s(129) =< s(101)*s(120)
s(130) =< s(101)*s(122)
s(132) =< s(129)
s(134) =< s(130)
s(136) =< s(128)

  with precondition: [A=1,D>=0,E>=1,F>=0,G>=0,H>=0,I>=0,J>=0,K>=2,L>=1,M>=0,B>=K,C>=L] 

* Chain [63]: 8
  with precondition: [A=1,K=1,L=0,B>=1,C>=0,D>=0,E>=1,F>=0,G>=0,H>=0,I>=0,J>=0,M>=0] 

* Chain [62]: 122*s(141)+40*s(153)+40*s(154)+20*s(155)+20*s(156)+20*s(157)+20*s(158)+8
  Such that:s(137) =< C
s(138) =< E
s(139) =< J
aux(39) =< B
s(141) =< aux(39)
s(139) =< s(137)
s(142) =< s(138)-2
s(143) =< s(138)
s(143) =< s(137)
s(144) =< s(137)-2
s(145) =< s(138)
s(146) =< s(137)
s(139) =< s(137)-2
s(147) =< s(141)*s(138)
s(147) =< s(141)*s(137)
s(142) =< s(139)
s(144) =< s(139)
s(148) =< s(141)*s(143)
s(149) =< s(141)*s(145)
s(149) =< s(141)*s(146)
s(150) =< s(141)*s(139)
s(151) =< s(141)*s(142)
s(152) =< s(141)*s(144)
s(153) =< s(148)
s(154) =< s(151)
s(155) =< s(149)
s(156) =< s(152)
s(157) =< s(147)
s(158) =< s(150)

  with precondition: [A=1,D>=0,F>=0,G>=0,H>=0,I>=0,J>=1,K>=3,M>=0,C>=J+2,E>=J+2,L>=J+2,2*B>=K+1,2*C>=L,C+E>=L] 


#### Simplifying cost structure of CE 72 

#### Computing cost of phase [66] 

#### Simplifying cost structure of CE 73 

#### Cost of loops [66] 

 * loop 66:get_elem(A,B,C,D,E,F,G,H,I,J) -> [get_elem(A',B',C',D',E',F',G',H',I',J')] 
8
##### Pending set get_elem(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 66: [it(66)=<1]

###### Computing sum for it(66)=<1  in Loop 66 
   - Applying inductive sum strategy 
     - head Candidate: G 
     - head Candidate: F 
     - head Candidate: D-1 
     - head Candidate: A-1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: F 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: G 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: G 
     - tail Candidate: F 
     - tail Candidate: D-1 
     - tail Candidate: A-1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: F 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: G 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(66)=<G,it(66)=<F,it(66)=<D-1,it(66)=<A-1,it(66)=<A-1,it(66)=<D-1,it(66)=<F,it(66)=<G,it(66)=<G-G',it(66)=<F-F',it(66)=<D-D',it(66)=<A-A',it(66)=<A-A',it(66)=<D-D',it(66)=<F-F',it(66)=<G-G'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [66] 

#### Simplifying cost structure of phase [66] 

#### Cost of phase [66]:get_elem(A,B,C,D,E,F,G,H,I,J) -> [get_elem(A',B',C',D',E',F',G',H',I',J')] 
8*it(66)+0
  Such that:it(66) =< A
it(66) =< A-A'
it(66) =< D
it(66) =< D-D'
it(66) =< F
it(66) =< F-F'
it(66) =< G
it(66) =< G-G'

#### Simplifying cost structure of chain [[66],67] 

#### Cost of chains of get_elem(A,B,C,D,E,F,G,H,I,J):
* Chain [[66],67]: 8*it(66)+5
  Such that:it(66) =< F

  with precondition: [F=G,F>=1,H>=1,I>=0,J>=1,A>=F+2,D>=F+2,B>=H,C>=I,E>=J] 

* Chain [67]: 5
  with precondition: [F=0,G=0,A>=2,D>=2,H>=1,I>=0,J>=1,B>=H,C>=I,E>=J] 


#### Simplifying cost structure of CE 74 

#### Computing cost of phase [68,69,70,71] 

#### Simplifying cost structure of CE 75 

#### Simplifying cost structure of CE 77 

#### Simplifying cost structure of CE 76 

#### Simplifying cost structure of CE 78 

#### Cost of loops [68,69,70,71] 

 * loop 68:reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) -> [reverse_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O')] 
5
 * loop 69:reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) -> [reverse_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O')] 
5
 * loop 70:reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) -> [reverse_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O')] 
5
 * loop 71:reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) -> [reverse_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O')] 
5
##### Pending set reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)
* Psum in Loop 68: [it(68)=<1]
* Psum in Loop 69: [it(69)=<1]
* Psum in Loop 70: [it(70)=<1]
* Psum in Loop 71: [it(71)=<1]

###### Computing sum for it(68)=<1  in Loop 68 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
       - Loop 69 is collaborative and bounds [it(69)] 
       - Loop 70 is collaborative and bounds [it(70)] 
       - Loop 71 is collaborative and bounds [it(71)] 
     - head Candidate: A-1 
       - Loop 69 is collaborative and bounds [it(69)] 
       - Loop 70 is collaborative and bounds [it(70)] 
       - Loop 71 is collaborative and bounds [it(71)] 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-G 
       - Loop 69 is collaborative and bounds [it(69)] 
       - Loop 70 is collaborative
       - Loop 71 is collaborative
     - head Candidate: E-J 
       - Loop 69 is collaborative
       - Loop 70 is collaborative and bounds [it(70)] 
       - Loop 71 is collaborative
     - tail Candidate: D-1 
       - Loop 69 is collaborative and bounds [it(69)] 
       - Loop 70 is collaborative and bounds [it(70)] 
       - Loop 71 is collaborative and bounds [it(71)] 
     - tail Candidate: A-1 
       - Loop 69 is collaborative and bounds [it(69)] 
       - Loop 70 is collaborative and bounds [it(70)] 
       - Loop 71 is collaborative and bounds [it(71)] 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-G 
       - Loop 69 is collaborative and bounds [it(69)] 
       - Loop 70 is collaborative
       - Loop 71 is collaborative
     - tail Candidate: E-J 
       - Loop 69 is collaborative
       - Loop 70 is collaborative and bounds [it(70)] 
       - Loop 71 is collaborative
 * Adding constraints: [it(68)+it(69)+it(70)+it(71)=<D-1,it(68)+it(69)+it(70)+it(71)=<A-1,it(68)+it(69)+it(70)+it(71)=<A-1,it(68)+it(69)+it(70)+it(71)=<D-1,it(68)+it(69)=<B-G,it(68)+it(70)=<E-J,it(68)+it(69)+it(70)+it(71)=<D-D',it(68)+it(69)+it(70)+it(71)=<A-A',it(68)+it(69)+it(70)+it(71)=<A-A',it(68)+it(69)+it(70)+it(71)=<D-D',it(68)+it(69)=<B-G-B'+G',it(68)+it(70)=<E-J-E'+J'] 

##### Pending set A
* Psum in Loop 69: [it(69)=<1]
* Psum in Loop 70: [it(70)=<1]
* Psum in Loop 71: [it(71)=<1]

###### Computing sum for it(69)=<1  in Loop 69 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-G 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-G 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(68)+it(69)+it(70)+it(71)=<D-1,it(68)+it(69)+it(70)+it(71)=<A-1,it(68)+it(69)+it(70)+it(71)=<A-1,it(68)+it(69)+it(70)+it(71)=<D-1,it(68)+it(69)=<B-G,it(68)+it(69)+it(70)+it(71)=<D-D',it(68)+it(69)+it(70)+it(71)=<A-A',it(68)+it(69)+it(70)+it(71)=<A-A',it(68)+it(69)+it(70)+it(71)=<D-D',it(68)+it(69)=<B-G-B'+G'] 

##### Pending set A
* Psum in Loop 70: [it(70)=<1]
* Psum in Loop 71: [it(71)=<1]

###### Computing sum for it(70)=<1  in Loop 70 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: E-J 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E-J 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(68)+it(69)+it(70)+it(71)=<D-1,it(68)+it(69)+it(70)+it(71)=<A-1,it(68)+it(69)+it(70)+it(71)=<A-1,it(68)+it(69)+it(70)+it(71)=<D-1,it(68)+it(70)=<E-J,it(68)+it(69)+it(70)+it(71)=<D-D',it(68)+it(69)+it(70)+it(71)=<A-A',it(68)+it(69)+it(70)+it(71)=<A-A',it(68)+it(69)+it(70)+it(71)=<D-D',it(68)+it(70)=<E-J-E'+J'] 

##### Pending set A
* Psum in Loop 71: [it(71)=<1]

###### Computing sum for it(71)=<1  in Loop 71 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(68)+it(69)+it(70)+it(71)=<D-1,it(68)+it(69)+it(70)+it(71)=<A-1,it(68)+it(69)+it(70)+it(71)=<A-1,it(68)+it(69)+it(70)+it(71)=<D-1,it(68)+it(69)+it(70)+it(71)=<D-D',it(68)+it(69)+it(70)+it(71)=<A-A',it(68)+it(69)+it(70)+it(71)=<A-A',it(68)+it(69)+it(70)+it(71)=<D-D'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [68,69,70,71] 

#### Simplifying cost structure of phase [68,69,70,71] 

#### Cost of phase [68,69,70,71]:reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) -> [reverse_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O')] 
5*it(68)+5*it(69)+5*it(70)+5*it(71)+0
  Such that:aux(40) =< A
aux(41) =< A-A'
aux(42) =< B-G
aux(43) =< B-G-B'+G'
aux(44) =< D
aux(45) =< D-D'
aux(46) =< E-J
aux(47) =< E-J-E'+J'
it(68) =< aux(40)
it(69) =< aux(40)
it(70) =< aux(40)
it(71) =< aux(40)
it(68) =< aux(41)
it(69) =< aux(41)
it(70) =< aux(41)
it(71) =< aux(41)
it(68) =< aux(42)
it(69) =< aux(42)
it(68) =< aux(43)
it(69) =< aux(43)
it(68) =< aux(44)
it(69) =< aux(44)
it(70) =< aux(44)
it(71) =< aux(44)
it(68) =< aux(45)
it(69) =< aux(45)
it(70) =< aux(45)
it(71) =< aux(45)
it(68) =< aux(46)
it(70) =< aux(46)
it(68) =< aux(47)
it(70) =< aux(47)

#### Simplifying cost structure of chain [[68,69,70,71],72] 
 * Joined equivalent variables [aux(48),aux(40),aux(41),aux(44),aux(45)] into aux(48)

#### Cost of chains of reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O):
* Chain [[68,69,70,71],72]: 5*it(68)+5*it(69)+5*it(70)+5*it(71)+2
  Such that:aux(42) =< B-G
aux(43) =< B-G+L
aux(46) =< E-J
aux(47) =< E-J+O
aux(48) =< A
it(68) =< aux(48)
it(69) =< aux(48)
it(70) =< aux(48)
it(71) =< aux(48)
it(68) =< aux(42)
it(69) =< aux(42)
it(68) =< aux(43)
it(69) =< aux(43)
it(68) =< aux(46)
it(70) =< aux(46)
it(68) =< aux(47)
it(70) =< aux(47)

  with precondition: [A=D,A+F=K+1,A+I=N+1,A>=2,B>=1,C>=0,E>=1,F>=1,G>=0,H>=0,I>=1,J>=0,L>=1,O>=1,L>=G,M>=H,O>=J] 

* Chain [72]: 2
  with precondition: [A=1,B=0,D=1,E=0,F=K,G=L,H=M,I=N,J=O,C>=0,F>=0,G>=0,H>=0,I>=0,J>=0] 


#### Simplifying cost structure of CE 79 
 * Renamed intermediate variables: 
[ (eq(80,1),aux(42))>>s(161), (eq(80,1),aux(43))>>s(162), (eq(80,1),aux(46))>>s(163), (eq(80,1),aux(47))>>s(164), (eq(80,1),aux(48))>>s(165), (eq(80,1),it(68))>>s(166), (eq(80,1),it(69))>>s(167), (eq(80,1),it(70))>>s(168), (eq(80,1),it(71))>>s(169)]

#### Simplifying cost structure of CE 80 

#### Cost of chains of reverseL(A,B,C,D,E,F,G,H,I,J):
* Chain [74]: 4
  with precondition: [A=1,B=0,D=1,E=0,F=1,G=0,I=1,J=0,C>=0,H>=0] 

* Chain [73]: 5*s(166)+5*s(167)+5*s(168)+5*s(169)+4
  Such that:s(161) =< B
s(165) =< D
s(163) =< E
s(166) =< s(165)
s(167) =< s(165)
s(168) =< s(165)
s(169) =< s(165)
s(166) =< s(161)
s(167) =< s(161)
s(166) =< s(163)
s(168) =< s(163)

  with precondition: [A=D,A=F,A=I,A>=2,B>=1,C>=0,E>=1,G>=1,H>=0,J>=1] 

 * Renamed intermediate variables: 
[ (eq(101,1),s(161))>>s(170), (eq(101,1),s(165))>>s(171), (eq(101,1),s(163))>>s(172), (eq(101,1),s(166))>>s(173), (eq(101,1),s(167))>>s(174), (eq(101,1),s(168))>>s(175), (eq(101,1),s(169))>>s(176)]

#### Simplifying cost structure of CE 101 

#### Computing cost of phase [92,93,94,95] 

#### Simplifying cost structure of CE 81 

#### Simplifying cost structure of CE 83 

#### Simplifying cost structure of CE 82 

#### Simplifying cost structure of CE 84 

#### Cost of loops [92,93,94,95] 

 * loop 92:split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) -> [split_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T',U')] 
8
 * loop 93:split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) -> [split_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T',U')] 
8
 * loop 94:split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) -> [split_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T',U')] 
8
 * loop 95:split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) -> [split_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T',U')] 
8
##### Pending set split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U)
* Psum in Loop 92: [it(92)=<1]
* Psum in Loop 93: [it(93)=<1]
* Psum in Loop 94: [it(94)=<1]
* Psum in Loop 95: [it(95)=<1]

###### Computing sum for it(92)=<1  in Loop 92 
   - Applying inductive sum strategy 
     - head Candidate: G-I 
       - Loop 93 is collaborative and bounds [it(93)] 
       - Loop 94 is collaborative and bounds [it(94)] 
       - Loop 95 is collaborative and bounds [it(95)] 
     - head Candidate: F-H 
       - Loop 93 is collaborative and bounds [it(93)] 
       - Loop 94 is collaborative and bounds [it(94)] 
       - Loop 95 is collaborative and bounds [it(95)] 
     - head Candidate: A-1 
       - Loop 93 is collaborative and bounds [it(93)] 
       - Loop 94 is collaborative and bounds [it(94)] 
       - Loop 95 is collaborative and bounds [it(95)] 
     - head Candidate: D-1 
       - Loop 93 is collaborative and bounds [it(93)] 
       - Loop 94 is collaborative and bounds [it(94)] 
       - Loop 95 is collaborative and bounds [it(95)] 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-K 
       - Loop 93 is collaborative and bounds [it(93)] 
       - Loop 94 is collaborative
       - Loop 95 is collaborative
     - head Candidate: E-N 
       - Loop 93 is collaborative
       - Loop 94 is collaborative and bounds [it(94)] 
       - Loop 95 is collaborative
     - head Candidate: F-H 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: G-I 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: G-I 
       - Loop 93 is collaborative and bounds [it(93)] 
       - Loop 94 is collaborative and bounds [it(94)] 
       - Loop 95 is collaborative and bounds [it(95)] 
     - tail Candidate: F-H 
       - Loop 93 is collaborative and bounds [it(93)] 
       - Loop 94 is collaborative and bounds [it(94)] 
       - Loop 95 is collaborative and bounds [it(95)] 
     - tail Candidate: A-1 
       - Loop 93 is collaborative and bounds [it(93)] 
       - Loop 94 is collaborative and bounds [it(94)] 
       - Loop 95 is collaborative and bounds [it(95)] 
     - tail Candidate: D-1 
       - Loop 93 is collaborative and bounds [it(93)] 
       - Loop 94 is collaborative and bounds [it(94)] 
       - Loop 95 is collaborative and bounds [it(95)] 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-K 
       - Loop 93 is collaborative and bounds [it(93)] 
       - Loop 94 is collaborative
       - Loop 95 is collaborative
     - tail Candidate: E-N 
       - Loop 93 is collaborative
       - Loop 94 is collaborative and bounds [it(94)] 
       - Loop 95 is collaborative
     - tail Candidate: F-H 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: G-I 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(92)+it(93)+it(94)+it(95)=<G-I,it(92)+it(93)+it(94)+it(95)=<F-H,it(92)+it(93)+it(94)+it(95)=<A-1,it(92)+it(93)+it(94)+it(95)=<D-1,it(92)+it(93)+it(94)+it(95)=<A-1,it(92)+it(93)+it(94)+it(95)=<D-1,it(92)+it(93)=<B-K,it(92)+it(94)=<E-N,it(92)+it(93)+it(94)+it(95)=<F-H,it(92)+it(93)+it(94)+it(95)=<G-I,it(92)+it(93)+it(94)+it(95)=<G-I-G'+I',it(92)+it(93)+it(94)+it(95)=<F-H-F'+H',it(92)+it(93)+it(94)+it(95)=<A-A',it(92)+it(93)+it(94)+it(95)=<D-D',it(92)+it(93)+it(94)+it(95)=<A-A',it(92)+it(93)+it(94)+it(95)=<D-D',it(92)+it(93)=<B-K-B'+K',it(92)+it(94)=<E-N-E'+N',it(92)+it(93)+it(94)+it(95)=<F-H-F'+H',it(92)+it(93)+it(94)+it(95)=<G-I-G'+I'] 

##### Pending set A
* Psum in Loop 93: [it(93)=<1]
* Psum in Loop 94: [it(94)=<1]
* Psum in Loop 95: [it(95)=<1]

###### Computing sum for it(93)=<1  in Loop 93 
   - Applying inductive sum strategy 
     - head Candidate: G-I 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: F-H 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-K 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: F-H 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: G-I 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: G-I 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: F-H 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-K 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: F-H 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: G-I 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(92)+it(93)+it(94)+it(95)=<G-I,it(92)+it(93)+it(94)+it(95)=<F-H,it(92)+it(93)+it(94)+it(95)=<A-1,it(92)+it(93)+it(94)+it(95)=<D-1,it(92)+it(93)+it(94)+it(95)=<A-1,it(92)+it(93)+it(94)+it(95)=<D-1,it(92)+it(93)=<B-K,it(92)+it(93)+it(94)+it(95)=<F-H,it(92)+it(93)+it(94)+it(95)=<G-I,it(92)+it(93)+it(94)+it(95)=<G-I-G'+I',it(92)+it(93)+it(94)+it(95)=<F-H-F'+H',it(92)+it(93)+it(94)+it(95)=<A-A',it(92)+it(93)+it(94)+it(95)=<D-D',it(92)+it(93)+it(94)+it(95)=<A-A',it(92)+it(93)+it(94)+it(95)=<D-D',it(92)+it(93)=<B-K-B'+K',it(92)+it(93)+it(94)+it(95)=<F-H-F'+H',it(92)+it(93)+it(94)+it(95)=<G-I-G'+I'] 

##### Pending set A
* Psum in Loop 94: [it(94)=<1]
* Psum in Loop 95: [it(95)=<1]

###### Computing sum for it(94)=<1  in Loop 94 
   - Applying inductive sum strategy 
     - head Candidate: G-I 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: F-H 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: E-N 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: F-H 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: G-I 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: G-I 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: F-H 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E-N 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: F-H 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: G-I 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(92)+it(93)+it(94)+it(95)=<G-I,it(92)+it(93)+it(94)+it(95)=<F-H,it(92)+it(93)+it(94)+it(95)=<A-1,it(92)+it(93)+it(94)+it(95)=<D-1,it(92)+it(93)+it(94)+it(95)=<A-1,it(92)+it(93)+it(94)+it(95)=<D-1,it(92)+it(94)=<E-N,it(92)+it(93)+it(94)+it(95)=<F-H,it(92)+it(93)+it(94)+it(95)=<G-I,it(92)+it(93)+it(94)+it(95)=<G-I-G'+I',it(92)+it(93)+it(94)+it(95)=<F-H-F'+H',it(92)+it(93)+it(94)+it(95)=<A-A',it(92)+it(93)+it(94)+it(95)=<D-D',it(92)+it(93)+it(94)+it(95)=<A-A',it(92)+it(93)+it(94)+it(95)=<D-D',it(92)+it(94)=<E-N-E'+N',it(92)+it(93)+it(94)+it(95)=<F-H-F'+H',it(92)+it(93)+it(94)+it(95)=<G-I-G'+I'] 

##### Pending set A
* Psum in Loop 95: [it(95)=<1]

###### Computing sum for it(95)=<1  in Loop 95 
   - Applying inductive sum strategy 
     - head Candidate: G-I 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: F-H 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: F-H 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: G-I 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: G-I 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: F-H 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: F-H 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: G-I 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(92)+it(93)+it(94)+it(95)=<G-I,it(92)+it(93)+it(94)+it(95)=<F-H,it(92)+it(93)+it(94)+it(95)=<A-1,it(92)+it(93)+it(94)+it(95)=<D-1,it(92)+it(93)+it(94)+it(95)=<A-1,it(92)+it(93)+it(94)+it(95)=<D-1,it(92)+it(93)+it(94)+it(95)=<F-H,it(92)+it(93)+it(94)+it(95)=<G-I,it(92)+it(93)+it(94)+it(95)=<G-I-G'+I',it(92)+it(93)+it(94)+it(95)=<F-H-F'+H',it(92)+it(93)+it(94)+it(95)=<A-A',it(92)+it(93)+it(94)+it(95)=<D-D',it(92)+it(93)+it(94)+it(95)=<A-A',it(92)+it(93)+it(94)+it(95)=<D-D',it(92)+it(93)+it(94)+it(95)=<F-H-F'+H',it(92)+it(93)+it(94)+it(95)=<G-I-G'+I'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [92,93,94,95] 

#### Simplifying cost structure of phase [92,93,94,95] 

#### Cost of phase [92,93,94,95]:split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) -> [split_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T',U')] 
8*it(92)+8*it(93)+8*it(94)+8*it(95)+0
  Such that:aux(49) =< A
aux(50) =< A-A'
aux(51) =< B-K
aux(52) =< B-K-B'+K'
aux(53) =< D
aux(54) =< D-D'
aux(55) =< E-N
aux(56) =< E-N-E'+N'
aux(57) =< F-H
aux(58) =< F-H-F'+H'
aux(59) =< G-I
aux(60) =< G-I-G'+I'
it(92) =< aux(49)
it(93) =< aux(49)
it(94) =< aux(49)
it(95) =< aux(49)
it(92) =< aux(50)
it(93) =< aux(50)
it(94) =< aux(50)
it(95) =< aux(50)
it(92) =< aux(51)
it(93) =< aux(51)
it(92) =< aux(52)
it(93) =< aux(52)
it(92) =< aux(53)
it(93) =< aux(53)
it(94) =< aux(53)
it(95) =< aux(53)
it(92) =< aux(54)
it(93) =< aux(54)
it(94) =< aux(54)
it(95) =< aux(54)
it(92) =< aux(55)
it(94) =< aux(55)
it(92) =< aux(56)
it(94) =< aux(56)
it(92) =< aux(57)
it(93) =< aux(57)
it(94) =< aux(57)
it(95) =< aux(57)
it(92) =< aux(58)
it(93) =< aux(58)
it(94) =< aux(58)
it(95) =< aux(58)
it(92) =< aux(59)
it(93) =< aux(59)
it(94) =< aux(59)
it(95) =< aux(59)
it(92) =< aux(60)
it(93) =< aux(60)
it(94) =< aux(60)
it(95) =< aux(60)

#### Simplifying cost structure of chain [[92,93,94,95],90] 
 * Joined equivalent variables [aux(61),aux(50),aux(54),aux(57),aux(58),aux(59),aux(60)] into aux(61)
 * Renamed intermediate variables: 
[ (eq(93,1),s(161))>>s(177), (eq(93,1),s(165))>>s(178), (eq(93,1),s(163))>>s(179), (eq(93,1),s(166))>>s(180), (eq(93,1),s(167))>>s(181), (eq(93,1),s(168))>>s(182), (eq(93,1),s(169))>>s(183)]

#### Simplifying cost structure of CE 93 

#### Found solution for phase  [92,93,94,95] in the cache 

#### Cost of phase [92,93,94,95]:split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) -> [split_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T',U')] 
8*it(92)+8*it(93)+8*it(94)+8*it(95)+0
  Such that:aux(49) =< A
aux(50) =< A-A'
aux(51) =< B-K
aux(52) =< B-K-B'+K'
aux(53) =< D
aux(54) =< D-D'
aux(55) =< E-N
aux(56) =< E-N-E'+N'
aux(57) =< F-H
aux(58) =< F-H-F'+H'
aux(59) =< G-I
aux(60) =< G-I-G'+I'
it(92) =< aux(49)
it(93) =< aux(49)
it(94) =< aux(49)
it(95) =< aux(49)
it(92) =< aux(50)
it(93) =< aux(50)
it(94) =< aux(50)
it(95) =< aux(50)
it(92) =< aux(51)
it(93) =< aux(51)
it(92) =< aux(52)
it(93) =< aux(52)
it(92) =< aux(53)
it(93) =< aux(53)
it(94) =< aux(53)
it(95) =< aux(53)
it(92) =< aux(54)
it(93) =< aux(54)
it(94) =< aux(54)
it(95) =< aux(54)
it(92) =< aux(55)
it(94) =< aux(55)
it(92) =< aux(56)
it(94) =< aux(56)
it(92) =< aux(57)
it(93) =< aux(57)
it(94) =< aux(57)
it(95) =< aux(57)
it(92) =< aux(58)
it(93) =< aux(58)
it(94) =< aux(58)
it(95) =< aux(58)
it(92) =< aux(59)
it(93) =< aux(59)
it(94) =< aux(59)
it(95) =< aux(59)
it(92) =< aux(60)
it(93) =< aux(60)
it(94) =< aux(60)
it(95) =< aux(60)

#### Simplifying cost structure of chain [[92,93,94,95],89] 
 * Joined equivalent variables [aux(62),aux(50),aux(54),aux(57),aux(58),aux(59),aux(60)] into aux(62)
 * Renamed intermediate variables: 
[ (eq(97,1),s(161))>>s(184), (eq(97,1),s(165))>>s(185), (eq(97,1),s(163))>>s(186), (eq(97,1),s(166))>>s(187), (eq(97,1),s(167))>>s(188), (eq(97,1),s(168))>>s(189), (eq(97,1),s(169))>>s(190)]

#### Simplifying cost structure of CE 97 

#### Found solution for phase  [92,93,94,95] in the cache 

#### Cost of phase [92,93,94,95]:split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) -> [split_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T',U')] 
8*it(92)+8*it(93)+8*it(94)+8*it(95)+0
  Such that:aux(49) =< A
aux(50) =< A-A'
aux(51) =< B-K
aux(52) =< B-K-B'+K'
aux(53) =< D
aux(54) =< D-D'
aux(55) =< E-N
aux(56) =< E-N-E'+N'
aux(57) =< F-H
aux(58) =< F-H-F'+H'
aux(59) =< G-I
aux(60) =< G-I-G'+I'
it(92) =< aux(49)
it(93) =< aux(49)
it(94) =< aux(49)
it(95) =< aux(49)
it(92) =< aux(50)
it(93) =< aux(50)
it(94) =< aux(50)
it(95) =< aux(50)
it(92) =< aux(51)
it(93) =< aux(51)
it(92) =< aux(52)
it(93) =< aux(52)
it(92) =< aux(53)
it(93) =< aux(53)
it(94) =< aux(53)
it(95) =< aux(53)
it(92) =< aux(54)
it(93) =< aux(54)
it(94) =< aux(54)
it(95) =< aux(54)
it(92) =< aux(55)
it(94) =< aux(55)
it(92) =< aux(56)
it(94) =< aux(56)
it(92) =< aux(57)
it(93) =< aux(57)
it(94) =< aux(57)
it(95) =< aux(57)
it(92) =< aux(58)
it(93) =< aux(58)
it(94) =< aux(58)
it(95) =< aux(58)
it(92) =< aux(59)
it(93) =< aux(59)
it(94) =< aux(59)
it(95) =< aux(59)
it(92) =< aux(60)
it(93) =< aux(60)
it(94) =< aux(60)
it(95) =< aux(60)

#### Simplifying cost structure of chain [[92,93,94,95],88] 
 * Joined equivalent variables [aux(63),aux(50),aux(54),aux(57),aux(58),aux(59),aux(60)] into aux(63)
 * Renamed intermediate variables: 
[ (eq(89,1),s(161))>>s(191), (eq(89,1),s(165))>>s(192), (eq(89,1),s(163))>>s(193), (eq(89,1),s(166))>>s(194), (eq(89,1),s(167))>>s(195), (eq(89,1),s(168))>>s(196), (eq(89,1),s(169))>>s(197)]

#### Simplifying cost structure of CE 89 

#### Found solution for phase  [92,93,94,95] in the cache 

#### Cost of phase [92,93,94,95]:split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) -> [split_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T',U')] 
8*it(92)+8*it(93)+8*it(94)+8*it(95)+0
  Such that:aux(49) =< A
aux(50) =< A-A'
aux(51) =< B-K
aux(52) =< B-K-B'+K'
aux(53) =< D
aux(54) =< D-D'
aux(55) =< E-N
aux(56) =< E-N-E'+N'
aux(57) =< F-H
aux(58) =< F-H-F'+H'
aux(59) =< G-I
aux(60) =< G-I-G'+I'
it(92) =< aux(49)
it(93) =< aux(49)
it(94) =< aux(49)
it(95) =< aux(49)
it(92) =< aux(50)
it(93) =< aux(50)
it(94) =< aux(50)
it(95) =< aux(50)
it(92) =< aux(51)
it(93) =< aux(51)
it(92) =< aux(52)
it(93) =< aux(52)
it(92) =< aux(53)
it(93) =< aux(53)
it(94) =< aux(53)
it(95) =< aux(53)
it(92) =< aux(54)
it(93) =< aux(54)
it(94) =< aux(54)
it(95) =< aux(54)
it(92) =< aux(55)
it(94) =< aux(55)
it(92) =< aux(56)
it(94) =< aux(56)
it(92) =< aux(57)
it(93) =< aux(57)
it(94) =< aux(57)
it(95) =< aux(57)
it(92) =< aux(58)
it(93) =< aux(58)
it(94) =< aux(58)
it(95) =< aux(58)
it(92) =< aux(59)
it(93) =< aux(59)
it(94) =< aux(59)
it(95) =< aux(59)
it(92) =< aux(60)
it(93) =< aux(60)
it(94) =< aux(60)
it(95) =< aux(60)

#### Simplifying cost structure of chain [[92,93,94,95],87] 
 * Joined equivalent variables [aux(64),aux(50),aux(54),aux(57),aux(58),aux(59),aux(60)] into aux(64)
 * Renamed intermediate variables: 
[ (eq(99,1),s(161))>>s(198), (eq(99,1),s(165))>>s(199), (eq(99,1),s(163))>>s(200), (eq(99,1),s(166))>>s(201), (eq(99,1),s(167))>>s(202), (eq(99,1),s(168))>>s(203), (eq(99,1),s(169))>>s(204)]

#### Simplifying cost structure of CE 99 

#### Found solution for phase  [92,93,94,95] in the cache 

#### Cost of phase [92,93,94,95]:split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) -> [split_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T',U')] 
8*it(92)+8*it(93)+8*it(94)+8*it(95)+0
  Such that:aux(49) =< A
aux(50) =< A-A'
aux(51) =< B-K
aux(52) =< B-K-B'+K'
aux(53) =< D
aux(54) =< D-D'
aux(55) =< E-N
aux(56) =< E-N-E'+N'
aux(57) =< F-H
aux(58) =< F-H-F'+H'
aux(59) =< G-I
aux(60) =< G-I-G'+I'
it(92) =< aux(49)
it(93) =< aux(49)
it(94) =< aux(49)
it(95) =< aux(49)
it(92) =< aux(50)
it(93) =< aux(50)
it(94) =< aux(50)
it(95) =< aux(50)
it(92) =< aux(51)
it(93) =< aux(51)
it(92) =< aux(52)
it(93) =< aux(52)
it(92) =< aux(53)
it(93) =< aux(53)
it(94) =< aux(53)
it(95) =< aux(53)
it(92) =< aux(54)
it(93) =< aux(54)
it(94) =< aux(54)
it(95) =< aux(54)
it(92) =< aux(55)
it(94) =< aux(55)
it(92) =< aux(56)
it(94) =< aux(56)
it(92) =< aux(57)
it(93) =< aux(57)
it(94) =< aux(57)
it(95) =< aux(57)
it(92) =< aux(58)
it(93) =< aux(58)
it(94) =< aux(58)
it(95) =< aux(58)
it(92) =< aux(59)
it(93) =< aux(59)
it(94) =< aux(59)
it(95) =< aux(59)
it(92) =< aux(60)
it(93) =< aux(60)
it(94) =< aux(60)
it(95) =< aux(60)

#### Simplifying cost structure of chain [[92,93,94,95],86] 
 * Joined equivalent variables [aux(65),aux(50),aux(54),aux(57),aux(58),aux(59),aux(60)] into aux(65)
 * Renamed intermediate variables: 
[ (eq(91,1),s(161))>>s(205), (eq(91,1),s(165))>>s(206), (eq(91,1),s(163))>>s(207), (eq(91,1),s(166))>>s(208), (eq(91,1),s(167))>>s(209), (eq(91,1),s(168))>>s(210), (eq(91,1),s(169))>>s(211)]

#### Simplifying cost structure of CE 91 

#### Found solution for phase  [92,93,94,95] in the cache 

#### Cost of phase [92,93,94,95]:split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) -> [split_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T',U')] 
8*it(92)+8*it(93)+8*it(94)+8*it(95)+0
  Such that:aux(49) =< A
aux(50) =< A-A'
aux(51) =< B-K
aux(52) =< B-K-B'+K'
aux(53) =< D
aux(54) =< D-D'
aux(55) =< E-N
aux(56) =< E-N-E'+N'
aux(57) =< F-H
aux(58) =< F-H-F'+H'
aux(59) =< G-I
aux(60) =< G-I-G'+I'
it(92) =< aux(49)
it(93) =< aux(49)
it(94) =< aux(49)
it(95) =< aux(49)
it(92) =< aux(50)
it(93) =< aux(50)
it(94) =< aux(50)
it(95) =< aux(50)
it(92) =< aux(51)
it(93) =< aux(51)
it(92) =< aux(52)
it(93) =< aux(52)
it(92) =< aux(53)
it(93) =< aux(53)
it(94) =< aux(53)
it(95) =< aux(53)
it(92) =< aux(54)
it(93) =< aux(54)
it(94) =< aux(54)
it(95) =< aux(54)
it(92) =< aux(55)
it(94) =< aux(55)
it(92) =< aux(56)
it(94) =< aux(56)
it(92) =< aux(57)
it(93) =< aux(57)
it(94) =< aux(57)
it(95) =< aux(57)
it(92) =< aux(58)
it(93) =< aux(58)
it(94) =< aux(58)
it(95) =< aux(58)
it(92) =< aux(59)
it(93) =< aux(59)
it(94) =< aux(59)
it(95) =< aux(59)
it(92) =< aux(60)
it(93) =< aux(60)
it(94) =< aux(60)
it(95) =< aux(60)

#### Simplifying cost structure of chain [[92,93,94,95],85] 
 * Joined equivalent variables [aux(66),aux(50),aux(54),aux(57),aux(58),aux(59),aux(60)] into aux(66)
 * Renamed intermediate variables: 
[ (eq(95,1),s(161))>>s(212), (eq(95,1),s(165))>>s(213), (eq(95,1),s(163))>>s(214), (eq(95,1),s(166))>>s(215), (eq(95,1),s(167))>>s(216), (eq(95,1),s(168))>>s(217), (eq(95,1),s(169))>>s(218)]

#### Simplifying cost structure of CE 95 

#### Found solution for phase  [92,93,94,95] in the cache 

#### Cost of phase [92,93,94,95]:split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) -> [split_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T',U')] 
8*it(92)+8*it(93)+8*it(94)+8*it(95)+0
  Such that:aux(49) =< A
aux(50) =< A-A'
aux(51) =< B-K
aux(52) =< B-K-B'+K'
aux(53) =< D
aux(54) =< D-D'
aux(55) =< E-N
aux(56) =< E-N-E'+N'
aux(57) =< F-H
aux(58) =< F-H-F'+H'
aux(59) =< G-I
aux(60) =< G-I-G'+I'
it(92) =< aux(49)
it(93) =< aux(49)
it(94) =< aux(49)
it(95) =< aux(49)
it(92) =< aux(50)
it(93) =< aux(50)
it(94) =< aux(50)
it(95) =< aux(50)
it(92) =< aux(51)
it(93) =< aux(51)
it(92) =< aux(52)
it(93) =< aux(52)
it(92) =< aux(53)
it(93) =< aux(53)
it(94) =< aux(53)
it(95) =< aux(53)
it(92) =< aux(54)
it(93) =< aux(54)
it(94) =< aux(54)
it(95) =< aux(54)
it(92) =< aux(55)
it(94) =< aux(55)
it(92) =< aux(56)
it(94) =< aux(56)
it(92) =< aux(57)
it(93) =< aux(57)
it(94) =< aux(57)
it(95) =< aux(57)
it(92) =< aux(58)
it(93) =< aux(58)
it(94) =< aux(58)
it(95) =< aux(58)
it(92) =< aux(59)
it(93) =< aux(59)
it(94) =< aux(59)
it(95) =< aux(59)
it(92) =< aux(60)
it(93) =< aux(60)
it(94) =< aux(60)
it(95) =< aux(60)

#### Simplifying cost structure of chain [[92,93,94,95],84] 
 * Joined equivalent variables [aux(67),aux(50),aux(54),aux(57),aux(58),aux(59),aux(60)] into aux(67)
 * Renamed intermediate variables: 
[ (eq(87,1),s(161))>>s(219), (eq(87,1),s(165))>>s(220), (eq(87,1),s(163))>>s(221), (eq(87,1),s(166))>>s(222), (eq(87,1),s(167))>>s(223), (eq(87,1),s(168))>>s(224), (eq(87,1),s(169))>>s(225)]

#### Simplifying cost structure of CE 87 

#### Found solution for phase  [92,93,94,95] in the cache 

#### Cost of phase [92,93,94,95]:split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) -> [split_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T',U')] 
8*it(92)+8*it(93)+8*it(94)+8*it(95)+0
  Such that:aux(49) =< A
aux(50) =< A-A'
aux(51) =< B-K
aux(52) =< B-K-B'+K'
aux(53) =< D
aux(54) =< D-D'
aux(55) =< E-N
aux(56) =< E-N-E'+N'
aux(57) =< F-H
aux(58) =< F-H-F'+H'
aux(59) =< G-I
aux(60) =< G-I-G'+I'
it(92) =< aux(49)
it(93) =< aux(49)
it(94) =< aux(49)
it(95) =< aux(49)
it(92) =< aux(50)
it(93) =< aux(50)
it(94) =< aux(50)
it(95) =< aux(50)
it(92) =< aux(51)
it(93) =< aux(51)
it(92) =< aux(52)
it(93) =< aux(52)
it(92) =< aux(53)
it(93) =< aux(53)
it(94) =< aux(53)
it(95) =< aux(53)
it(92) =< aux(54)
it(93) =< aux(54)
it(94) =< aux(54)
it(95) =< aux(54)
it(92) =< aux(55)
it(94) =< aux(55)
it(92) =< aux(56)
it(94) =< aux(56)
it(92) =< aux(57)
it(93) =< aux(57)
it(94) =< aux(57)
it(95) =< aux(57)
it(92) =< aux(58)
it(93) =< aux(58)
it(94) =< aux(58)
it(95) =< aux(58)
it(92) =< aux(59)
it(93) =< aux(59)
it(94) =< aux(59)
it(95) =< aux(59)
it(92) =< aux(60)
it(93) =< aux(60)
it(94) =< aux(60)
it(95) =< aux(60)

#### Simplifying cost structure of chain [[92,93,94,95],83] 
 * Joined equivalent variables [aux(68),aux(50),aux(54),aux(57),aux(58),aux(59),aux(60)] into aux(68)
 * Renamed intermediate variables: 
[ (eq(100,1),s(161))>>s(226), (eq(100,1),s(165))>>s(227), (eq(100,1),s(163))>>s(228), (eq(100,1),s(166))>>s(229), (eq(100,1),s(167))>>s(230), (eq(100,1),s(168))>>s(231), (eq(100,1),s(169))>>s(232)]

#### Simplifying cost structure of CE 100 

#### Found solution for phase  [92,93,94,95] in the cache 

#### Cost of phase [92,93,94,95]:split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) -> [split_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T',U')] 
8*it(92)+8*it(93)+8*it(94)+8*it(95)+0
  Such that:aux(49) =< A
aux(50) =< A-A'
aux(51) =< B-K
aux(52) =< B-K-B'+K'
aux(53) =< D
aux(54) =< D-D'
aux(55) =< E-N
aux(56) =< E-N-E'+N'
aux(57) =< F-H
aux(58) =< F-H-F'+H'
aux(59) =< G-I
aux(60) =< G-I-G'+I'
it(92) =< aux(49)
it(93) =< aux(49)
it(94) =< aux(49)
it(95) =< aux(49)
it(92) =< aux(50)
it(93) =< aux(50)
it(94) =< aux(50)
it(95) =< aux(50)
it(92) =< aux(51)
it(93) =< aux(51)
it(92) =< aux(52)
it(93) =< aux(52)
it(92) =< aux(53)
it(93) =< aux(53)
it(94) =< aux(53)
it(95) =< aux(53)
it(92) =< aux(54)
it(93) =< aux(54)
it(94) =< aux(54)
it(95) =< aux(54)
it(92) =< aux(55)
it(94) =< aux(55)
it(92) =< aux(56)
it(94) =< aux(56)
it(92) =< aux(57)
it(93) =< aux(57)
it(94) =< aux(57)
it(95) =< aux(57)
it(92) =< aux(58)
it(93) =< aux(58)
it(94) =< aux(58)
it(95) =< aux(58)
it(92) =< aux(59)
it(93) =< aux(59)
it(94) =< aux(59)
it(95) =< aux(59)
it(92) =< aux(60)
it(93) =< aux(60)
it(94) =< aux(60)
it(95) =< aux(60)

#### Simplifying cost structure of chain [[92,93,94,95],82] 
 * Joined equivalent variables [aux(69),aux(50),aux(54),aux(57),aux(58),aux(59),aux(60)] into aux(69)
 * Renamed intermediate variables: 
[ (eq(92,1),s(161))>>s(233), (eq(92,1),s(165))>>s(234), (eq(92,1),s(163))>>s(235), (eq(92,1),s(166))>>s(236), (eq(92,1),s(167))>>s(237), (eq(92,1),s(168))>>s(238), (eq(92,1),s(169))>>s(239)]

#### Simplifying cost structure of CE 92 

#### Found solution for phase  [92,93,94,95] in the cache 

#### Cost of phase [92,93,94,95]:split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) -> [split_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T',U')] 
8*it(92)+8*it(93)+8*it(94)+8*it(95)+0
  Such that:aux(49) =< A
aux(50) =< A-A'
aux(51) =< B-K
aux(52) =< B-K-B'+K'
aux(53) =< D
aux(54) =< D-D'
aux(55) =< E-N
aux(56) =< E-N-E'+N'
aux(57) =< F-H
aux(58) =< F-H-F'+H'
aux(59) =< G-I
aux(60) =< G-I-G'+I'
it(92) =< aux(49)
it(93) =< aux(49)
it(94) =< aux(49)
it(95) =< aux(49)
it(92) =< aux(50)
it(93) =< aux(50)
it(94) =< aux(50)
it(95) =< aux(50)
it(92) =< aux(51)
it(93) =< aux(51)
it(92) =< aux(52)
it(93) =< aux(52)
it(92) =< aux(53)
it(93) =< aux(53)
it(94) =< aux(53)
it(95) =< aux(53)
it(92) =< aux(54)
it(93) =< aux(54)
it(94) =< aux(54)
it(95) =< aux(54)
it(92) =< aux(55)
it(94) =< aux(55)
it(92) =< aux(56)
it(94) =< aux(56)
it(92) =< aux(57)
it(93) =< aux(57)
it(94) =< aux(57)
it(95) =< aux(57)
it(92) =< aux(58)
it(93) =< aux(58)
it(94) =< aux(58)
it(95) =< aux(58)
it(92) =< aux(59)
it(93) =< aux(59)
it(94) =< aux(59)
it(95) =< aux(59)
it(92) =< aux(60)
it(93) =< aux(60)
it(94) =< aux(60)
it(95) =< aux(60)

#### Simplifying cost structure of chain [[92,93,94,95],81] 
 * Joined equivalent variables [aux(70),aux(50),aux(54),aux(57),aux(58),aux(59),aux(60)] into aux(70)
 * Renamed intermediate variables: 
[ (eq(96,1),s(161))>>s(240), (eq(96,1),s(165))>>s(241), (eq(96,1),s(163))>>s(242), (eq(96,1),s(166))>>s(243), (eq(96,1),s(167))>>s(244), (eq(96,1),s(168))>>s(245), (eq(96,1),s(169))>>s(246)]

#### Simplifying cost structure of CE 96 

#### Found solution for phase  [92,93,94,95] in the cache 

#### Cost of phase [92,93,94,95]:split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) -> [split_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T',U')] 
8*it(92)+8*it(93)+8*it(94)+8*it(95)+0
  Such that:aux(49) =< A
aux(50) =< A-A'
aux(51) =< B-K
aux(52) =< B-K-B'+K'
aux(53) =< D
aux(54) =< D-D'
aux(55) =< E-N
aux(56) =< E-N-E'+N'
aux(57) =< F-H
aux(58) =< F-H-F'+H'
aux(59) =< G-I
aux(60) =< G-I-G'+I'
it(92) =< aux(49)
it(93) =< aux(49)
it(94) =< aux(49)
it(95) =< aux(49)
it(92) =< aux(50)
it(93) =< aux(50)
it(94) =< aux(50)
it(95) =< aux(50)
it(92) =< aux(51)
it(93) =< aux(51)
it(92) =< aux(52)
it(93) =< aux(52)
it(92) =< aux(53)
it(93) =< aux(53)
it(94) =< aux(53)
it(95) =< aux(53)
it(92) =< aux(54)
it(93) =< aux(54)
it(94) =< aux(54)
it(95) =< aux(54)
it(92) =< aux(55)
it(94) =< aux(55)
it(92) =< aux(56)
it(94) =< aux(56)
it(92) =< aux(57)
it(93) =< aux(57)
it(94) =< aux(57)
it(95) =< aux(57)
it(92) =< aux(58)
it(93) =< aux(58)
it(94) =< aux(58)
it(95) =< aux(58)
it(92) =< aux(59)
it(93) =< aux(59)
it(94) =< aux(59)
it(95) =< aux(59)
it(92) =< aux(60)
it(93) =< aux(60)
it(94) =< aux(60)
it(95) =< aux(60)

#### Simplifying cost structure of chain [[92,93,94,95],80] 
 * Joined equivalent variables [aux(71),aux(50),aux(54),aux(57),aux(58),aux(59),aux(60)] into aux(71)
 * Renamed intermediate variables: 
[ (eq(88,1),s(161))>>s(247), (eq(88,1),s(165))>>s(248), (eq(88,1),s(163))>>s(249), (eq(88,1),s(166))>>s(250), (eq(88,1),s(167))>>s(251), (eq(88,1),s(168))>>s(252), (eq(88,1),s(169))>>s(253)]

#### Simplifying cost structure of CE 88 

#### Found solution for phase  [92,93,94,95] in the cache 

#### Cost of phase [92,93,94,95]:split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) -> [split_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T',U')] 
8*it(92)+8*it(93)+8*it(94)+8*it(95)+0
  Such that:aux(49) =< A
aux(50) =< A-A'
aux(51) =< B-K
aux(52) =< B-K-B'+K'
aux(53) =< D
aux(54) =< D-D'
aux(55) =< E-N
aux(56) =< E-N-E'+N'
aux(57) =< F-H
aux(58) =< F-H-F'+H'
aux(59) =< G-I
aux(60) =< G-I-G'+I'
it(92) =< aux(49)
it(93) =< aux(49)
it(94) =< aux(49)
it(95) =< aux(49)
it(92) =< aux(50)
it(93) =< aux(50)
it(94) =< aux(50)
it(95) =< aux(50)
it(92) =< aux(51)
it(93) =< aux(51)
it(92) =< aux(52)
it(93) =< aux(52)
it(92) =< aux(53)
it(93) =< aux(53)
it(94) =< aux(53)
it(95) =< aux(53)
it(92) =< aux(54)
it(93) =< aux(54)
it(94) =< aux(54)
it(95) =< aux(54)
it(92) =< aux(55)
it(94) =< aux(55)
it(92) =< aux(56)
it(94) =< aux(56)
it(92) =< aux(57)
it(93) =< aux(57)
it(94) =< aux(57)
it(95) =< aux(57)
it(92) =< aux(58)
it(93) =< aux(58)
it(94) =< aux(58)
it(95) =< aux(58)
it(92) =< aux(59)
it(93) =< aux(59)
it(94) =< aux(59)
it(95) =< aux(59)
it(92) =< aux(60)
it(93) =< aux(60)
it(94) =< aux(60)
it(95) =< aux(60)

#### Simplifying cost structure of chain [[92,93,94,95],79] 
 * Joined equivalent variables [aux(72),aux(50),aux(54),aux(57),aux(58),aux(59),aux(60)] into aux(72)
 * Renamed intermediate variables: 
[ (eq(98,1),s(161))>>s(254), (eq(98,1),s(165))>>s(255), (eq(98,1),s(163))>>s(256), (eq(98,1),s(166))>>s(257), (eq(98,1),s(167))>>s(258), (eq(98,1),s(168))>>s(259), (eq(98,1),s(169))>>s(260)]

#### Simplifying cost structure of CE 98 

#### Found solution for phase  [92,93,94,95] in the cache 

#### Cost of phase [92,93,94,95]:split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) -> [split_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T',U')] 
8*it(92)+8*it(93)+8*it(94)+8*it(95)+0
  Such that:aux(49) =< A
aux(50) =< A-A'
aux(51) =< B-K
aux(52) =< B-K-B'+K'
aux(53) =< D
aux(54) =< D-D'
aux(55) =< E-N
aux(56) =< E-N-E'+N'
aux(57) =< F-H
aux(58) =< F-H-F'+H'
aux(59) =< G-I
aux(60) =< G-I-G'+I'
it(92) =< aux(49)
it(93) =< aux(49)
it(94) =< aux(49)
it(95) =< aux(49)
it(92) =< aux(50)
it(93) =< aux(50)
it(94) =< aux(50)
it(95) =< aux(50)
it(92) =< aux(51)
it(93) =< aux(51)
it(92) =< aux(52)
it(93) =< aux(52)
it(92) =< aux(53)
it(93) =< aux(53)
it(94) =< aux(53)
it(95) =< aux(53)
it(92) =< aux(54)
it(93) =< aux(54)
it(94) =< aux(54)
it(95) =< aux(54)
it(92) =< aux(55)
it(94) =< aux(55)
it(92) =< aux(56)
it(94) =< aux(56)
it(92) =< aux(57)
it(93) =< aux(57)
it(94) =< aux(57)
it(95) =< aux(57)
it(92) =< aux(58)
it(93) =< aux(58)
it(94) =< aux(58)
it(95) =< aux(58)
it(92) =< aux(59)
it(93) =< aux(59)
it(94) =< aux(59)
it(95) =< aux(59)
it(92) =< aux(60)
it(93) =< aux(60)
it(94) =< aux(60)
it(95) =< aux(60)

#### Simplifying cost structure of chain [[92,93,94,95],78] 
 * Joined equivalent variables [aux(73),aux(50),aux(54),aux(57),aux(58),aux(59),aux(60)] into aux(73)
 * Renamed intermediate variables: 
[ (eq(90,1),s(161))>>s(261), (eq(90,1),s(165))>>s(262), (eq(90,1),s(163))>>s(263), (eq(90,1),s(166))>>s(264), (eq(90,1),s(167))>>s(265), (eq(90,1),s(168))>>s(266), (eq(90,1),s(169))>>s(267)]

#### Simplifying cost structure of CE 90 

#### Found solution for phase  [92,93,94,95] in the cache 

#### Cost of phase [92,93,94,95]:split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) -> [split_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T',U')] 
8*it(92)+8*it(93)+8*it(94)+8*it(95)+0
  Such that:aux(49) =< A
aux(50) =< A-A'
aux(51) =< B-K
aux(52) =< B-K-B'+K'
aux(53) =< D
aux(54) =< D-D'
aux(55) =< E-N
aux(56) =< E-N-E'+N'
aux(57) =< F-H
aux(58) =< F-H-F'+H'
aux(59) =< G-I
aux(60) =< G-I-G'+I'
it(92) =< aux(49)
it(93) =< aux(49)
it(94) =< aux(49)
it(95) =< aux(49)
it(92) =< aux(50)
it(93) =< aux(50)
it(94) =< aux(50)
it(95) =< aux(50)
it(92) =< aux(51)
it(93) =< aux(51)
it(92) =< aux(52)
it(93) =< aux(52)
it(92) =< aux(53)
it(93) =< aux(53)
it(94) =< aux(53)
it(95) =< aux(53)
it(92) =< aux(54)
it(93) =< aux(54)
it(94) =< aux(54)
it(95) =< aux(54)
it(92) =< aux(55)
it(94) =< aux(55)
it(92) =< aux(56)
it(94) =< aux(56)
it(92) =< aux(57)
it(93) =< aux(57)
it(94) =< aux(57)
it(95) =< aux(57)
it(92) =< aux(58)
it(93) =< aux(58)
it(94) =< aux(58)
it(95) =< aux(58)
it(92) =< aux(59)
it(93) =< aux(59)
it(94) =< aux(59)
it(95) =< aux(59)
it(92) =< aux(60)
it(93) =< aux(60)
it(94) =< aux(60)
it(95) =< aux(60)

#### Simplifying cost structure of chain [[92,93,94,95],77] 
 * Joined equivalent variables [aux(74),aux(50),aux(54),aux(57),aux(58),aux(59),aux(60)] into aux(74)
 * Renamed intermediate variables: 
[ (eq(94,1),s(161))>>s(268), (eq(94,1),s(165))>>s(269), (eq(94,1),s(163))>>s(270), (eq(94,1),s(166))>>s(271), (eq(94,1),s(167))>>s(272), (eq(94,1),s(168))>>s(273), (eq(94,1),s(169))>>s(274)]

#### Simplifying cost structure of CE 94 

#### Found solution for phase  [92,93,94,95] in the cache 

#### Cost of phase [92,93,94,95]:split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) -> [split_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T',U')] 
8*it(92)+8*it(93)+8*it(94)+8*it(95)+0
  Such that:aux(49) =< A
aux(50) =< A-A'
aux(51) =< B-K
aux(52) =< B-K-B'+K'
aux(53) =< D
aux(54) =< D-D'
aux(55) =< E-N
aux(56) =< E-N-E'+N'
aux(57) =< F-H
aux(58) =< F-H-F'+H'
aux(59) =< G-I
aux(60) =< G-I-G'+I'
it(92) =< aux(49)
it(93) =< aux(49)
it(94) =< aux(49)
it(95) =< aux(49)
it(92) =< aux(50)
it(93) =< aux(50)
it(94) =< aux(50)
it(95) =< aux(50)
it(92) =< aux(51)
it(93) =< aux(51)
it(92) =< aux(52)
it(93) =< aux(52)
it(92) =< aux(53)
it(93) =< aux(53)
it(94) =< aux(53)
it(95) =< aux(53)
it(92) =< aux(54)
it(93) =< aux(54)
it(94) =< aux(54)
it(95) =< aux(54)
it(92) =< aux(55)
it(94) =< aux(55)
it(92) =< aux(56)
it(94) =< aux(56)
it(92) =< aux(57)
it(93) =< aux(57)
it(94) =< aux(57)
it(95) =< aux(57)
it(92) =< aux(58)
it(93) =< aux(58)
it(94) =< aux(58)
it(95) =< aux(58)
it(92) =< aux(59)
it(93) =< aux(59)
it(94) =< aux(59)
it(95) =< aux(59)
it(92) =< aux(60)
it(93) =< aux(60)
it(94) =< aux(60)
it(95) =< aux(60)

#### Simplifying cost structure of chain [[92,93,94,95],76] 
 * Joined equivalent variables [aux(75),aux(50),aux(54),aux(57),aux(58),aux(59),aux(60)] into aux(75)
 * Renamed intermediate variables: 
[ (eq(86,1),s(161))>>s(275), (eq(86,1),s(165))>>s(276), (eq(86,1),s(163))>>s(277), (eq(86,1),s(166))>>s(278), (eq(86,1),s(167))>>s(279), (eq(86,1),s(168))>>s(280), (eq(86,1),s(169))>>s(281)]

#### Simplifying cost structure of CE 86 

#### Found solution for phase  [92,93,94,95] in the cache 

#### Cost of phase [92,93,94,95]:split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U) -> [split_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O',P',Q',R',S',T',U')] 
8*it(92)+8*it(93)+8*it(94)+8*it(95)+0
  Such that:aux(49) =< A
aux(50) =< A-A'
aux(51) =< B-K
aux(52) =< B-K-B'+K'
aux(53) =< D
aux(54) =< D-D'
aux(55) =< E-N
aux(56) =< E-N-E'+N'
aux(57) =< F-H
aux(58) =< F-H-F'+H'
aux(59) =< G-I
aux(60) =< G-I-G'+I'
it(92) =< aux(49)
it(93) =< aux(49)
it(94) =< aux(49)
it(95) =< aux(49)
it(92) =< aux(50)
it(93) =< aux(50)
it(94) =< aux(50)
it(95) =< aux(50)
it(92) =< aux(51)
it(93) =< aux(51)
it(92) =< aux(52)
it(93) =< aux(52)
it(92) =< aux(53)
it(93) =< aux(53)
it(94) =< aux(53)
it(95) =< aux(53)
it(92) =< aux(54)
it(93) =< aux(54)
it(94) =< aux(54)
it(95) =< aux(54)
it(92) =< aux(55)
it(94) =< aux(55)
it(92) =< aux(56)
it(94) =< aux(56)
it(92) =< aux(57)
it(93) =< aux(57)
it(94) =< aux(57)
it(95) =< aux(57)
it(92) =< aux(58)
it(93) =< aux(58)
it(94) =< aux(58)
it(95) =< aux(58)
it(92) =< aux(59)
it(93) =< aux(59)
it(94) =< aux(59)
it(95) =< aux(59)
it(92) =< aux(60)
it(93) =< aux(60)
it(94) =< aux(60)
it(95) =< aux(60)

#### Simplifying cost structure of chain [[92,93,94,95],75] 
 * Joined equivalent variables [aux(76),aux(50),aux(54),aux(57),aux(58),aux(59),aux(60)] into aux(76)

#### Simplifying cost structure of CE 85 
 * Renamed intermediate variables: 
[ (ch([[92,93,94,95],85]),aux(51))>>s(282), (ch([[92,93,94,95],85]),s(205))>>s(283), (ch([[92,93,94,95],85]),aux(52))>>s(284), (ch([[92,93,94,95],85]),aux(55))>>s(285), (ch([[92,93,94,95],85]),s(207))>>s(286), (ch([[92,93,94,95],85]),aux(56))>>s(287), (ch([[92,93,94,95],85]),s(206))>>s(288), (ch([[92,93,94,95],85]),aux(49))>>s(289), (ch([[92,93,94,95],85]),aux(53))>>s(290), (ch([[92,93,94,95],85]),aux(66))>>s(291), (ch([[92,93,94,95],85]),s(208))>>s(292), (ch([[92,93,94,95],85]),s(209))>>s(293), (ch([[92,93,94,95],85]),s(210))>>s(294), (ch([[92,93,94,95],85]),s(211))>>s(295), (ch([[92,93,94,95],85]),it(92))>>s(296), (ch([[92,93,94,95],85]),it(93))>>s(297), (ch([[92,93,94,95],85]),it(94))>>s(298), (ch([[92,93,94,95],85]),it(95))>>s(299)]
 * Renamed intermediate variables: 
[ (ch([[92,93,94,95],86]),aux(49))>>s(300), (ch([[92,93,94,95],86]),aux(51))>>s(301), (ch([[92,93,94,95],86]),s(198))>>s(302), (ch([[92,93,94,95],86]),aux(52))>>s(303), (ch([[92,93,94,95],86]),aux(55))>>s(304), (ch([[92,93,94,95],86]),s(200))>>s(305), (ch([[92,93,94,95],86]),aux(56))>>s(306), (ch([[92,93,94,95],86]),s(199))>>s(307), (ch([[92,93,94,95],86]),aux(53))>>s(308), (ch([[92,93,94,95],86]),aux(65))>>s(309), (ch([[92,93,94,95],86]),s(201))>>s(310), (ch([[92,93,94,95],86]),s(202))>>s(311), (ch([[92,93,94,95],86]),s(203))>>s(312), (ch([[92,93,94,95],86]),s(204))>>s(313), (ch([[92,93,94,95],86]),it(92))>>s(314), (ch([[92,93,94,95],86]),it(93))>>s(315), (ch([[92,93,94,95],86]),it(94))>>s(316), (ch([[92,93,94,95],86]),it(95))>>s(317)]
 * Renamed intermediate variables: 
[ (ch([[92,93,94,95],89]),aux(49))>>s(318), (ch([[92,93,94,95],89]),aux(51))>>s(319), (ch([[92,93,94,95],89]),s(177))>>s(320), (ch([[92,93,94,95],89]),aux(52))>>s(321), (ch([[92,93,94,95],89]),aux(55))>>s(322), (ch([[92,93,94,95],89]),s(179))>>s(323), (ch([[92,93,94,95],89]),aux(56))>>s(324), (ch([[92,93,94,95],89]),s(178))>>s(325), (ch([[92,93,94,95],89]),aux(53))>>s(326), (ch([[92,93,94,95],89]),aux(62))>>s(327), (ch([[92,93,94,95],89]),s(180))>>s(328), (ch([[92,93,94,95],89]),s(181))>>s(329), (ch([[92,93,94,95],89]),s(182))>>s(330), (ch([[92,93,94,95],89]),s(183))>>s(331), (ch([[92,93,94,95],89]),it(92))>>s(332), (ch([[92,93,94,95],89]),it(93))>>s(333), (ch([[92,93,94,95],89]),it(94))>>s(334), (ch([[92,93,94,95],89]),it(95))>>s(335)]
 * Renamed intermediate variables: 
[ (ch([[92,93,94,95],90]),aux(49))>>s(336), (ch([[92,93,94,95],90]),aux(51))>>s(337), (ch([[92,93,94,95],90]),s(170))>>s(338), (ch([[92,93,94,95],90]),aux(52))>>s(339), (ch([[92,93,94,95],90]),aux(55))>>s(340), (ch([[92,93,94,95],90]),s(172))>>s(341), (ch([[92,93,94,95],90]),aux(56))>>s(342), (ch([[92,93,94,95],90]),s(171))>>s(343), (ch([[92,93,94,95],90]),aux(53))>>s(344), (ch([[92,93,94,95],90]),aux(61))>>s(345), (ch([[92,93,94,95],90]),s(173))>>s(346), (ch([[92,93,94,95],90]),s(174))>>s(347), (ch([[92,93,94,95],90]),s(175))>>s(348), (ch([[92,93,94,95],90]),s(176))>>s(349), (ch([[92,93,94,95],90]),it(92))>>s(350), (ch([[92,93,94,95],90]),it(93))>>s(351), (ch([[92,93,94,95],90]),it(94))>>s(352), (ch([[92,93,94,95],90]),it(95))>>s(353)]
 * Joined equivalent variables [aux(77),s(300),s(318),s(336)] into aux(77)
 * Joined equivalent variables [aux(78),s(282),s(301),s(319),s(337)] into aux(78)
 * Joined equivalent variables [aux(79),s(283),s(302),s(320),s(338)] into aux(79)
 * Joined equivalent variables [aux(80),s(284),s(303)] into aux(80)
 * Joined equivalent variables [aux(81),s(321),s(339)] into aux(81)
 * Joined equivalent variables [aux(82),s(285),s(304),s(322),s(340)] into aux(82)
 * Joined equivalent variables [aux(83),s(286),s(305),s(323),s(341)] into aux(83)
 * Joined equivalent variables [aux(84),s(287),s(324)] into aux(84)
 * Joined equivalent variables [aux(85),s(306),s(342)] into aux(85)
 * Joined equivalent variables [aux(86),s(309),s(345)] into aux(86)
 * Joined equivalent variables [aux(87),s(307),s(343)] into aux(87)
 * Joined equivalent variables [aux(88),s(308),s(344)] into aux(88)
 * Joined equivalent variables [aux(89),s(291),s(327)] into aux(89)
 * Joined equivalent variables [aux(90),s(288),s(325)] into aux(90)
 * Joined equivalent variables [aux(91),s(290),s(326)] into aux(91)
 * Joined equivalent variables [s(316),s(352)] into s(316)
 * Joined equivalent variables [s(317),s(353)] into s(317)
 * Joined equivalent variables [s(310),s(346)] into s(310)
 * Joined equivalent variables [s(292),s(328)] into s(292)
 * Joined equivalent variables [s(311),s(347)] into s(311)
 * Joined equivalent variables [s(293),s(329)] into s(293)
 * Joined equivalent variables [s(312),s(348)] into s(312)
 * Joined equivalent variables [s(294),s(330)] into s(294)
 * Joined equivalent variables [s(313),s(349)] into s(313)
 * Joined equivalent variables [s(295),s(331)] into s(295)
 * Renamed intermediate variables: 
[ (ch([[92,93,94,95],83]),aux(51))>>s(354), (ch([[92,93,94,95],83]),s(219))>>s(355), (ch([[92,93,94,95],83]),aux(52))>>s(356), (ch([[92,93,94,95],83]),aux(53))>>s(357), (ch([[92,93,94,95],83]),aux(55))>>s(358), (ch([[92,93,94,95],83]),s(221))>>s(359), (ch([[92,93,94,95],83]),aux(56))>>s(360), (ch([[92,93,94,95],83]),aux(49))>>s(361), (ch([[92,93,94,95],83]),s(220))>>s(362), (ch([[92,93,94,95],83]),aux(68))>>s(363), (ch([[92,93,94,95],83]),s(222))>>s(364), (ch([[92,93,94,95],83]),s(223))>>s(365), (ch([[92,93,94,95],83]),s(224))>>s(366), (ch([[92,93,94,95],83]),s(225))>>s(367), (ch([[92,93,94,95],83]),it(92))>>s(368), (ch([[92,93,94,95],83]),it(93))>>s(369), (ch([[92,93,94,95],83]),it(94))>>s(370), (ch([[92,93,94,95],83]),it(95))>>s(371)]
 * Renamed intermediate variables: 
[ (ch([[92,93,94,95],84]),aux(49))>>s(372), (ch([[92,93,94,95],84]),aux(51))>>s(373), (ch([[92,93,94,95],84]),s(212))>>s(374), (ch([[92,93,94,95],84]),aux(52))>>s(375), (ch([[92,93,94,95],84]),aux(53))>>s(376), (ch([[92,93,94,95],84]),aux(55))>>s(377), (ch([[92,93,94,95],84]),s(214))>>s(378), (ch([[92,93,94,95],84]),aux(56))>>s(379), (ch([[92,93,94,95],84]),s(213))>>s(380), (ch([[92,93,94,95],84]),aux(67))>>s(381), (ch([[92,93,94,95],84]),s(215))>>s(382), (ch([[92,93,94,95],84]),s(216))>>s(383), (ch([[92,93,94,95],84]),s(217))>>s(384), (ch([[92,93,94,95],84]),s(218))>>s(385), (ch([[92,93,94,95],84]),it(92))>>s(386), (ch([[92,93,94,95],84]),it(93))>>s(387), (ch([[92,93,94,95],84]),it(94))>>s(388), (ch([[92,93,94,95],84]),it(95))>>s(389)]
 * Renamed intermediate variables: 
[ (ch([[92,93,94,95],87]),aux(49))>>s(390), (ch([[92,93,94,95],87]),aux(51))>>s(391), (ch([[92,93,94,95],87]),s(191))>>s(392), (ch([[92,93,94,95],87]),aux(52))>>s(393), (ch([[92,93,94,95],87]),aux(53))>>s(394), (ch([[92,93,94,95],87]),aux(55))>>s(395), (ch([[92,93,94,95],87]),s(193))>>s(396), (ch([[92,93,94,95],87]),aux(56))>>s(397), (ch([[92,93,94,95],87]),s(192))>>s(398), (ch([[92,93,94,95],87]),aux(64))>>s(399), (ch([[92,93,94,95],87]),s(194))>>s(400), (ch([[92,93,94,95],87]),s(195))>>s(401), (ch([[92,93,94,95],87]),s(196))>>s(402), (ch([[92,93,94,95],87]),s(197))>>s(403), (ch([[92,93,94,95],87]),it(92))>>s(404), (ch([[92,93,94,95],87]),it(93))>>s(405), (ch([[92,93,94,95],87]),it(94))>>s(406), (ch([[92,93,94,95],87]),it(95))>>s(407)]
 * Renamed intermediate variables: 
[ (ch([[92,93,94,95],88]),aux(49))>>s(408), (ch([[92,93,94,95],88]),aux(51))>>s(409), (ch([[92,93,94,95],88]),s(184))>>s(410), (ch([[92,93,94,95],88]),aux(52))>>s(411), (ch([[92,93,94,95],88]),aux(53))>>s(412), (ch([[92,93,94,95],88]),aux(55))>>s(413), (ch([[92,93,94,95],88]),s(186))>>s(414), (ch([[92,93,94,95],88]),aux(56))>>s(415), (ch([[92,93,94,95],88]),s(185))>>s(416), (ch([[92,93,94,95],88]),aux(63))>>s(417), (ch([[92,93,94,95],88]),s(187))>>s(418), (ch([[92,93,94,95],88]),s(188))>>s(419), (ch([[92,93,94,95],88]),s(189))>>s(420), (ch([[92,93,94,95],88]),s(190))>>s(421), (ch([[92,93,94,95],88]),it(92))>>s(422), (ch([[92,93,94,95],88]),it(93))>>s(423), (ch([[92,93,94,95],88]),it(94))>>s(424), (ch([[92,93,94,95],88]),it(95))>>s(425)]
 * Joined equivalent variables [aux(92),s(372),s(390),s(408)] into aux(92)
 * Joined equivalent variables [aux(93),s(354),s(373),s(391),s(409)] into aux(93)
 * Joined equivalent variables [aux(94),s(355),s(374),s(392),s(410)] into aux(94)
 * Joined equivalent variables [aux(95),s(356),s(375)] into aux(95)
 * Joined equivalent variables [aux(96),s(393),s(411)] into aux(96)
 * Joined equivalent variables [aux(97),s(357),s(376),s(394),s(412)] into aux(97)
 * Joined equivalent variables [aux(98),s(358),s(377),s(395),s(413)] into aux(98)
 * Joined equivalent variables [aux(99),s(359),s(378),s(396),s(414)] into aux(99)
 * Joined equivalent variables [aux(100),s(360),s(397)] into aux(100)
 * Joined equivalent variables [aux(101),s(379),s(415)] into aux(101)
 * Joined equivalent variables [aux(102),s(363),s(399)] into aux(102)
 * Joined equivalent variables [aux(103),s(362),s(380),s(398),s(416)] into aux(103)
 * Joined equivalent variables [s(364),s(382),s(400),s(418)] into s(364)
 * Joined equivalent variables [s(365),s(383),s(401),s(419)] into s(365)
 * Joined equivalent variables [s(366),s(384),s(402),s(420)] into s(366)
 * Joined equivalent variables [s(367),s(385),s(403),s(421)] into s(367)
 * Renamed intermediate variables: 
[ (ch([[92,93,94,95],77]),aux(49))>>s(426), (ch([[92,93,94,95],77]),aux(51))>>s(427), (ch([[92,93,94,95],77]),s(261))>>s(428), (ch([[92,93,94,95],77]),aux(52))>>s(429), (ch([[92,93,94,95],77]),aux(55))>>s(430), (ch([[92,93,94,95],77]),s(263))>>s(431), (ch([[92,93,94,95],77]),aux(56))>>s(432), (ch([[92,93,94,95],77]),aux(53))>>s(433), (ch([[92,93,94,95],77]),s(262))>>s(434), (ch([[92,93,94,95],77]),aux(74))>>s(435), (ch([[92,93,94,95],77]),s(264))>>s(436), (ch([[92,93,94,95],77]),s(265))>>s(437), (ch([[92,93,94,95],77]),s(266))>>s(438), (ch([[92,93,94,95],77]),s(267))>>s(439), (ch([[92,93,94,95],77]),it(92))>>s(440), (ch([[92,93,94,95],77]),it(93))>>s(441), (ch([[92,93,94,95],77]),it(94))>>s(442), (ch([[92,93,94,95],77]),it(95))>>s(443)]
 * Renamed intermediate variables: 
[ (ch([[92,93,94,95],78]),aux(49))>>s(444), (ch([[92,93,94,95],78]),aux(51))>>s(445), (ch([[92,93,94,95],78]),s(254))>>s(446), (ch([[92,93,94,95],78]),aux(52))>>s(447), (ch([[92,93,94,95],78]),aux(55))>>s(448), (ch([[92,93,94,95],78]),s(256))>>s(449), (ch([[92,93,94,95],78]),aux(56))>>s(450), (ch([[92,93,94,95],78]),aux(53))>>s(451), (ch([[92,93,94,95],78]),s(255))>>s(452), (ch([[92,93,94,95],78]),aux(73))>>s(453), (ch([[92,93,94,95],78]),s(257))>>s(454), (ch([[92,93,94,95],78]),s(258))>>s(455), (ch([[92,93,94,95],78]),s(259))>>s(456), (ch([[92,93,94,95],78]),s(260))>>s(457), (ch([[92,93,94,95],78]),it(92))>>s(458), (ch([[92,93,94,95],78]),it(93))>>s(459), (ch([[92,93,94,95],78]),it(94))>>s(460), (ch([[92,93,94,95],78]),it(95))>>s(461)]
 * Renamed intermediate variables: 
[ (ch([[92,93,94,95],81]),aux(49))>>s(462), (ch([[92,93,94,95],81]),aux(51))>>s(463), (ch([[92,93,94,95],81]),s(233))>>s(464), (ch([[92,93,94,95],81]),aux(52))>>s(465), (ch([[92,93,94,95],81]),aux(55))>>s(466), (ch([[92,93,94,95],81]),s(235))>>s(467), (ch([[92,93,94,95],81]),aux(56))>>s(468), (ch([[92,93,94,95],81]),s(234))>>s(469), (ch([[92,93,94,95],81]),aux(53))>>s(470), (ch([[92,93,94,95],81]),aux(70))>>s(471), (ch([[92,93,94,95],81]),s(236))>>s(472), (ch([[92,93,94,95],81]),s(237))>>s(473), (ch([[92,93,94,95],81]),s(238))>>s(474), (ch([[92,93,94,95],81]),s(239))>>s(475), (ch([[92,93,94,95],81]),it(92))>>s(476), (ch([[92,93,94,95],81]),it(93))>>s(477), (ch([[92,93,94,95],81]),it(94))>>s(478), (ch([[92,93,94,95],81]),it(95))>>s(479)]
 * Renamed intermediate variables: 
[ (ch([[92,93,94,95],82]),aux(49))>>s(480), (ch([[92,93,94,95],82]),aux(51))>>s(481), (ch([[92,93,94,95],82]),s(226))>>s(482), (ch([[92,93,94,95],82]),aux(52))>>s(483), (ch([[92,93,94,95],82]),aux(55))>>s(484), (ch([[92,93,94,95],82]),s(228))>>s(485), (ch([[92,93,94,95],82]),aux(56))>>s(486), (ch([[92,93,94,95],82]),aux(53))>>s(487), (ch([[92,93,94,95],82]),s(227))>>s(488), (ch([[92,93,94,95],82]),aux(69))>>s(489), (ch([[92,93,94,95],82]),s(229))>>s(490), (ch([[92,93,94,95],82]),s(230))>>s(491), (ch([[92,93,94,95],82]),s(231))>>s(492), (ch([[92,93,94,95],82]),s(232))>>s(493), (ch([[92,93,94,95],82]),it(92))>>s(494), (ch([[92,93,94,95],82]),it(93))>>s(495), (ch([[92,93,94,95],82]),it(94))>>s(496), (ch([[92,93,94,95],82]),it(95))>>s(497)]
 * Joined equivalent variables [aux(104),s(426),s(444),s(462),s(480)] into aux(104)
 * Joined equivalent variables [aux(105),s(427),s(445),s(463),s(481)] into aux(105)
 * Joined equivalent variables [aux(106),s(428),s(446),s(464),s(482)] into aux(106)
 * Joined equivalent variables [aux(107),s(429),s(447)] into aux(107)
 * Joined equivalent variables [aux(108),s(465),s(483)] into aux(108)
 * Joined equivalent variables [aux(109),s(430),s(448),s(466),s(484)] into aux(109)
 * Joined equivalent variables [aux(110),s(431),s(449),s(467),s(485)] into aux(110)
 * Joined equivalent variables [aux(111),s(432),s(468)] into aux(111)
 * Joined equivalent variables [aux(112),s(450),s(486)] into aux(112)
 * Joined equivalent variables [aux(113),s(453),s(489)] into aux(113)
 * Joined equivalent variables [aux(114),s(451),s(487)] into aux(114)
 * Joined equivalent variables [aux(115),s(435),s(471)] into aux(115)
 * Joined equivalent variables [aux(116),s(433),s(470)] into aux(116)
 * Joined equivalent variables [aux(117),s(434),s(452),s(488)] into aux(117)
 * Joined equivalent variables [s(442),s(478)] into s(442)
 * Joined equivalent variables [s(460),s(496)] into s(460)
 * Joined equivalent variables [s(461),s(497)] into s(461)
 * Joined equivalent variables [s(443),s(479)] into s(443)
 * Joined equivalent variables [s(436),s(454),s(490)] into s(436)
 * Joined equivalent variables [s(437),s(455),s(491)] into s(437)
 * Joined equivalent variables [s(438),s(456),s(492)] into s(438)
 * Joined equivalent variables [s(439),s(457),s(493)] into s(439)
 * Renamed intermediate variables: 
[ (ch([[92,93,94,95],75]),aux(49))>>s(498), (ch([[92,93,94,95],75]),aux(51))>>s(499), (ch([[92,93,94,95],75]),s(275))>>s(500), (ch([[92,93,94,95],75]),aux(52))>>s(501), (ch([[92,93,94,95],75]),aux(53))>>s(502), (ch([[92,93,94,95],75]),aux(55))>>s(503), (ch([[92,93,94,95],75]),s(277))>>s(504), (ch([[92,93,94,95],75]),aux(56))>>s(505), (ch([[92,93,94,95],75]),s(276))>>s(506), (ch([[92,93,94,95],75]),aux(76))>>s(507), (ch([[92,93,94,95],75]),s(278))>>s(508), (ch([[92,93,94,95],75]),s(279))>>s(509), (ch([[92,93,94,95],75]),s(280))>>s(510), (ch([[92,93,94,95],75]),s(281))>>s(511), (ch([[92,93,94,95],75]),it(92))>>s(512), (ch([[92,93,94,95],75]),it(93))>>s(513), (ch([[92,93,94,95],75]),it(94))>>s(514), (ch([[92,93,94,95],75]),it(95))>>s(515)]
 * Renamed intermediate variables: 
[ (ch([[92,93,94,95],76]),aux(49))>>s(516), (ch([[92,93,94,95],76]),aux(51))>>s(517), (ch([[92,93,94,95],76]),s(268))>>s(518), (ch([[92,93,94,95],76]),aux(52))>>s(519), (ch([[92,93,94,95],76]),aux(53))>>s(520), (ch([[92,93,94,95],76]),aux(55))>>s(521), (ch([[92,93,94,95],76]),s(270))>>s(522), (ch([[92,93,94,95],76]),aux(56))>>s(523), (ch([[92,93,94,95],76]),s(269))>>s(524), (ch([[92,93,94,95],76]),aux(75))>>s(525), (ch([[92,93,94,95],76]),s(271))>>s(526), (ch([[92,93,94,95],76]),s(272))>>s(527), (ch([[92,93,94,95],76]),s(273))>>s(528), (ch([[92,93,94,95],76]),s(274))>>s(529), (ch([[92,93,94,95],76]),it(92))>>s(530), (ch([[92,93,94,95],76]),it(93))>>s(531), (ch([[92,93,94,95],76]),it(94))>>s(532), (ch([[92,93,94,95],76]),it(95))>>s(533)]
 * Renamed intermediate variables: 
[ (ch([[92,93,94,95],79]),aux(49))>>s(534), (ch([[92,93,94,95],79]),aux(51))>>s(535), (ch([[92,93,94,95],79]),s(247))>>s(536), (ch([[92,93,94,95],79]),aux(52))>>s(537), (ch([[92,93,94,95],79]),aux(53))>>s(538), (ch([[92,93,94,95],79]),aux(55))>>s(539), (ch([[92,93,94,95],79]),s(249))>>s(540), (ch([[92,93,94,95],79]),aux(56))>>s(541), (ch([[92,93,94,95],79]),s(248))>>s(542), (ch([[92,93,94,95],79]),aux(72))>>s(543), (ch([[92,93,94,95],79]),s(250))>>s(544), (ch([[92,93,94,95],79]),s(251))>>s(545), (ch([[92,93,94,95],79]),s(252))>>s(546), (ch([[92,93,94,95],79]),s(253))>>s(547), (ch([[92,93,94,95],79]),it(92))>>s(548), (ch([[92,93,94,95],79]),it(93))>>s(549), (ch([[92,93,94,95],79]),it(94))>>s(550), (ch([[92,93,94,95],79]),it(95))>>s(551)]
 * Renamed intermediate variables: 
[ (ch([[92,93,94,95],80]),aux(49))>>s(552), (ch([[92,93,94,95],80]),aux(51))>>s(553), (ch([[92,93,94,95],80]),s(240))>>s(554), (ch([[92,93,94,95],80]),aux(52))>>s(555), (ch([[92,93,94,95],80]),aux(53))>>s(556), (ch([[92,93,94,95],80]),aux(55))>>s(557), (ch([[92,93,94,95],80]),s(242))>>s(558), (ch([[92,93,94,95],80]),aux(56))>>s(559), (ch([[92,93,94,95],80]),s(241))>>s(560), (ch([[92,93,94,95],80]),aux(71))>>s(561), (ch([[92,93,94,95],80]),s(243))>>s(562), (ch([[92,93,94,95],80]),s(244))>>s(563), (ch([[92,93,94,95],80]),s(245))>>s(564), (ch([[92,93,94,95],80]),s(246))>>s(565), (ch([[92,93,94,95],80]),it(92))>>s(566), (ch([[92,93,94,95],80]),it(93))>>s(567), (ch([[92,93,94,95],80]),it(94))>>s(568), (ch([[92,93,94,95],80]),it(95))>>s(569)]
 * Joined equivalent variables [aux(118),s(498),s(516),s(534),s(552)] into aux(118)
 * Joined equivalent variables [aux(119),s(499),s(517),s(535),s(553)] into aux(119)
 * Joined equivalent variables [aux(120),s(500),s(518),s(536),s(554)] into aux(120)
 * Joined equivalent variables [aux(121),s(501),s(519)] into aux(121)
 * Joined equivalent variables [aux(122),s(537),s(555)] into aux(122)
 * Joined equivalent variables [aux(123),s(502),s(520),s(538),s(556)] into aux(123)
 * Joined equivalent variables [aux(124),s(503),s(521),s(539),s(557)] into aux(124)
 * Joined equivalent variables [aux(125),s(504),s(522),s(540),s(558)] into aux(125)
 * Joined equivalent variables [aux(126),s(505),s(541)] into aux(126)
 * Joined equivalent variables [aux(127),s(523),s(559)] into aux(127)
 * Joined equivalent variables [aux(128),s(525),s(561)] into aux(128)
 * Joined equivalent variables [aux(129),s(507),s(543)] into aux(129)
 * Joined equivalent variables [aux(130),s(506),s(524),s(542),s(560)] into aux(130)
 * Joined equivalent variables [s(514),s(550)] into s(514)
 * Joined equivalent variables [s(532),s(568)] into s(532)
 * Joined equivalent variables [s(533),s(569)] into s(533)
 * Joined equivalent variables [s(515),s(551)] into s(515)
 * Joined equivalent variables [s(508),s(526),s(544),s(562)] into s(508)
 * Joined equivalent variables [s(509),s(527),s(545),s(563)] into s(509)
 * Joined equivalent variables [s(510),s(528),s(546),s(564)] into s(510)
 * Joined equivalent variables [s(511),s(529),s(547),s(565)] into s(511)

#### Cost of chains of split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U):
* Chain [[92,93,94,95],90]: 8*it(92)+8*it(93)+8*it(94)+8*it(95)+5*s(173)+5*s(174)+5*s(175)+5*s(176)+8
  Such that:aux(49) =< A
aux(51) =< B-K
s(170) =< B+K
aux(52) =< 2*B-Q
aux(55) =< E-N
s(172) =< E+N
aux(56) =< 2*E-U
s(171) =< F-H+M
aux(53) =< F-H+T
aux(61) =< F-H
s(173) =< s(171)
s(174) =< s(171)
s(175) =< s(171)
s(176) =< s(171)
s(173) =< s(170)
s(174) =< s(170)
s(173) =< s(172)
s(175) =< s(172)
it(92) =< aux(49)
it(93) =< aux(49)
it(94) =< aux(49)
it(95) =< aux(49)
it(92) =< aux(61)
it(93) =< aux(61)
it(94) =< aux(61)
it(95) =< aux(61)
it(92) =< aux(51)
it(93) =< aux(51)
it(92) =< aux(52)
it(93) =< aux(52)
it(92) =< aux(53)
it(93) =< aux(53)
it(94) =< aux(53)
it(95) =< aux(53)
it(92) =< aux(55)
it(94) =< aux(55)
it(92) =< aux(56)
it(94) =< aux(56)

  with precondition: [O=1,S=1,J=M,F+P=A+H,D+H=F+T,F+I=G+H,C>=0,H>=0,J>=1,K>=0,L>=0,N>=0,Q>=1,R>=0,U>=1,F>=H+1,B>=Q,E>=U,G+H>=F,A+2*H>=2*F+J,D+2*H>=2*F+J] 

* Chain [[92,93,94,95],89]: 8*it(92)+8*it(93)+8*it(94)+8*it(95)+5*s(180)+5*s(181)+5*s(182)+5*s(183)+8
  Such that:aux(49) =< A
aux(51) =< B-K
s(177) =< B+K
aux(52) =< 2*B-Q
aux(55) =< E-N
s(179) =< E+N
aux(56) =< 2*E
s(178) =< G-I+M
aux(53) =< G-I+T
aux(62) =< G-I
s(180) =< s(178)
s(181) =< s(178)
s(182) =< s(178)
s(183) =< s(178)
s(180) =< s(177)
s(181) =< s(177)
s(180) =< s(179)
s(182) =< s(179)
it(92) =< aux(49)
it(93) =< aux(49)
it(94) =< aux(49)
it(95) =< aux(49)
it(92) =< aux(62)
it(93) =< aux(62)
it(94) =< aux(62)
it(95) =< aux(62)
it(92) =< aux(51)
it(93) =< aux(51)
it(92) =< aux(52)
it(93) =< aux(52)
it(92) =< aux(53)
it(93) =< aux(53)
it(94) =< aux(53)
it(95) =< aux(53)
it(92) =< aux(55)
it(94) =< aux(55)
it(92) =< aux(56)
it(94) =< aux(56)

  with precondition: [O=1,S=1,J=M,F+P=A+H,D+H=F+T,F+I=G+H,C>=0,E>=1,H>=0,J>=1,K>=0,L>=0,N>=0,Q>=1,R>=0,U>=1,F>=H+1,B>=Q,G+H>=F,A+2*H>=2*F+J,D+2*H>=2*F+J] 

* Chain [[92,93,94,95],88]: 8*it(92)+8*it(93)+8*it(94)+8*it(95)+5*s(187)+5*s(188)+5*s(189)+5*s(190)+8
  Such that:aux(49) =< A
aux(51) =< B-K
s(184) =< B+K
aux(52) =< 2*B-Q
aux(53) =< D
aux(55) =< E-N
s(186) =< E+N
aux(56) =< 2*E-U
s(185) =< T
aux(63) =< -J+T
s(187) =< s(185)
s(188) =< s(185)
s(189) =< s(185)
s(190) =< s(185)
s(187) =< s(184)
s(188) =< s(184)
s(187) =< s(186)
s(189) =< s(186)
it(92) =< aux(49)
it(93) =< aux(49)
it(94) =< aux(49)
it(95) =< aux(49)
it(92) =< aux(63)
it(93) =< aux(63)
it(94) =< aux(63)
it(95) =< aux(63)
it(92) =< aux(51)
it(93) =< aux(51)
it(92) =< aux(52)
it(93) =< aux(52)
it(92) =< aux(53)
it(93) =< aux(53)
it(94) =< aux(53)
it(95) =< aux(53)
it(92) =< aux(55)
it(94) =< aux(55)
it(92) =< aux(56)
it(94) =< aux(56)

  with precondition: [O=1,S=1,J=M,F+P=A+H,F+I=G+H,F+J=H+T,C>=0,H>=0,J>=1,K>=0,L>=0,N>=0,Q>=1,R>=0,U>=1,F>=H+1,B>=Q,E>=U,D+H>=F+1,G+H>=F,A+2*H>=2*F+J,J+2*F>=2*H+D+1] 

* Chain [[92,93,94,95],87]: 8*it(92)+8*it(93)+8*it(94)+8*it(95)+5*s(194)+5*s(195)+5*s(196)+5*s(197)+8
  Such that:aux(49) =< A
aux(51) =< B-K
s(191) =< B+K
aux(52) =< 2*B-Q
aux(53) =< D
aux(55) =< E-N
s(193) =< E+N
aux(56) =< 2*E
s(192) =< T
aux(64) =< G-I
s(194) =< s(192)
s(195) =< s(192)
s(196) =< s(192)
s(197) =< s(192)
s(194) =< s(191)
s(195) =< s(191)
s(194) =< s(193)
s(196) =< s(193)
it(92) =< aux(49)
it(93) =< aux(49)
it(94) =< aux(49)
it(95) =< aux(49)
it(92) =< aux(64)
it(93) =< aux(64)
it(94) =< aux(64)
it(95) =< aux(64)
it(92) =< aux(51)
it(93) =< aux(51)
it(92) =< aux(52)
it(93) =< aux(52)
it(92) =< aux(53)
it(93) =< aux(53)
it(94) =< aux(53)
it(95) =< aux(53)
it(92) =< aux(55)
it(94) =< aux(55)
it(92) =< aux(56)
it(94) =< aux(56)

  with precondition: [O=1,S=1,J=M,F+P=A+H,F+I=G+H,F+J=H+T,C>=0,E>=1,H>=0,J>=1,K>=0,L>=0,N>=0,Q>=1,R>=0,U>=1,F>=H+1,B>=Q,D+H>=F+1,G+H>=F,A+2*H>=2*F+J,J+2*F>=2*H+D+1] 

* Chain [[92,93,94,95],86]: 8*it(92)+8*it(93)+8*it(94)+8*it(95)+5*s(201)+5*s(202)+5*s(203)+5*s(204)+8
  Such that:aux(49) =< A
aux(51) =< B-K
s(198) =< B+K
aux(52) =< 2*B
aux(55) =< E-N
s(200) =< E+N
aux(56) =< 2*E-U
s(199) =< F-H+M
aux(53) =< F-H+T
aux(65) =< F-H
s(201) =< s(199)
s(202) =< s(199)
s(203) =< s(199)
s(204) =< s(199)
s(201) =< s(198)
s(202) =< s(198)
s(201) =< s(200)
s(203) =< s(200)
it(92) =< aux(49)
it(93) =< aux(49)
it(94) =< aux(49)
it(95) =< aux(49)
it(92) =< aux(65)
it(93) =< aux(65)
it(94) =< aux(65)
it(95) =< aux(65)
it(92) =< aux(51)
it(93) =< aux(51)
it(92) =< aux(52)
it(93) =< aux(52)
it(92) =< aux(53)
it(93) =< aux(53)
it(94) =< aux(53)
it(95) =< aux(53)
it(92) =< aux(55)
it(94) =< aux(55)
it(92) =< aux(56)
it(94) =< aux(56)

  with precondition: [O=1,S=1,J=M,F+P=A+H,D+H=F+T,F+I=G+H,B>=1,C>=0,H>=0,J>=1,K>=0,L>=0,N>=0,Q>=1,R>=0,U>=1,F>=H+1,E>=U,G+H>=F,A+2*H>=2*F+J,D+2*H>=2*F+J] 

* Chain [[92,93,94,95],85]: 8*it(92)+8*it(93)+8*it(94)+8*it(95)+5*s(208)+5*s(209)+5*s(210)+5*s(211)+8
  Such that:aux(51) =< B-K
s(205) =< B+K
aux(52) =< 2*B
aux(55) =< E-N
s(207) =< E+N
aux(56) =< 2*E
s(206) =< G-I+M
aux(49) =< G-I+P
aux(53) =< G-I+T
aux(66) =< G-I
s(208) =< s(206)
s(209) =< s(206)
s(210) =< s(206)
s(211) =< s(206)
s(208) =< s(205)
s(209) =< s(205)
s(208) =< s(207)
s(210) =< s(207)
it(92) =< aux(49)
it(93) =< aux(49)
it(94) =< aux(49)
it(95) =< aux(49)
it(92) =< aux(66)
it(93) =< aux(66)
it(94) =< aux(66)
it(95) =< aux(66)
it(92) =< aux(51)
it(93) =< aux(51)
it(92) =< aux(52)
it(93) =< aux(52)
it(92) =< aux(53)
it(93) =< aux(53)
it(94) =< aux(53)
it(95) =< aux(53)
it(92) =< aux(55)
it(94) =< aux(55)
it(92) =< aux(56)
it(94) =< aux(56)

  with precondition: [O=1,S=1,J=M,F+P=A+H,D+H=F+T,F+I=G+H,B>=1,C>=0,E>=1,H>=0,J>=1,K>=0,L>=0,N>=0,Q>=1,R>=0,U>=1,F>=H+1,G+H>=F,A+2*H>=2*F+J,D+2*H>=2*F+J] 

* Chain [[92,93,94,95],84]: 8*it(92)+8*it(93)+8*it(94)+8*it(95)+5*s(215)+5*s(216)+5*s(217)+5*s(218)+8
  Such that:aux(49) =< A
aux(51) =< B-K
s(212) =< B+K
aux(52) =< 2*B
aux(53) =< D
aux(55) =< E-N
s(214) =< E+N
aux(56) =< 2*E-U
s(213) =< T
aux(67) =< F-H
s(215) =< s(213)
s(216) =< s(213)
s(217) =< s(213)
s(218) =< s(213)
s(215) =< s(212)
s(216) =< s(212)
s(215) =< s(214)
s(217) =< s(214)
it(92) =< aux(49)
it(93) =< aux(49)
it(94) =< aux(49)
it(95) =< aux(49)
it(92) =< aux(67)
it(93) =< aux(67)
it(94) =< aux(67)
it(95) =< aux(67)
it(92) =< aux(51)
it(93) =< aux(51)
it(92) =< aux(52)
it(93) =< aux(52)
it(92) =< aux(53)
it(93) =< aux(53)
it(94) =< aux(53)
it(95) =< aux(53)
it(92) =< aux(55)
it(94) =< aux(55)
it(92) =< aux(56)
it(94) =< aux(56)

  with precondition: [O=1,S=1,J=M,F+P=A+H,F+I=G+H,F+J=H+T,B>=1,C>=0,H>=0,J>=1,K>=0,L>=0,N>=0,Q>=1,R>=0,U>=1,F>=H+1,E>=U,D+H>=F+1,G+H>=F,A+2*H>=2*F+J,J+2*F>=2*H+D+1] 

* Chain [[92,93,94,95],83]: 8*it(92)+8*it(93)+8*it(94)+8*it(95)+5*s(222)+5*s(223)+5*s(224)+5*s(225)+8
  Such that:aux(51) =< B-K
s(219) =< B+K
aux(52) =< 2*B
aux(53) =< D
aux(55) =< E-N
s(221) =< E+N
aux(56) =< 2*E
aux(49) =< G-I+P
s(220) =< T
aux(68) =< G-I
s(222) =< s(220)
s(223) =< s(220)
s(224) =< s(220)
s(225) =< s(220)
s(222) =< s(219)
s(223) =< s(219)
s(222) =< s(221)
s(224) =< s(221)
it(92) =< aux(49)
it(93) =< aux(49)
it(94) =< aux(49)
it(95) =< aux(49)
it(92) =< aux(68)
it(93) =< aux(68)
it(94) =< aux(68)
it(95) =< aux(68)
it(92) =< aux(51)
it(93) =< aux(51)
it(92) =< aux(52)
it(93) =< aux(52)
it(92) =< aux(53)
it(93) =< aux(53)
it(94) =< aux(53)
it(95) =< aux(53)
it(92) =< aux(55)
it(94) =< aux(55)
it(92) =< aux(56)
it(94) =< aux(56)

  with precondition: [O=1,S=1,J=M,F+P=A+H,F+I=G+H,F+J=H+T,B>=1,C>=0,E>=1,H>=0,J>=1,K>=0,L>=0,N>=0,Q>=1,R>=0,U>=1,F>=H+1,D+H>=F+1,G+H>=F,A+2*H>=2*F+J,J+2*F>=2*H+D+1] 

* Chain [[92,93,94,95],82]: 8*it(92)+8*it(93)+8*it(94)+8*it(95)+5*s(229)+5*s(230)+5*s(231)+5*s(232)+8
  Such that:aux(49) =< A
aux(51) =< B-K
s(226) =< B+K
aux(52) =< 2*B-Q
aux(55) =< E-N
s(228) =< E+N
aux(56) =< 2*E-U
aux(53) =< F-H+T
s(227) =< P
aux(69) =< F-H
s(229) =< s(227)
s(230) =< s(227)
s(231) =< s(227)
s(232) =< s(227)
s(229) =< s(226)
s(230) =< s(226)
s(229) =< s(228)
s(231) =< s(228)
it(92) =< aux(49)
it(93) =< aux(49)
it(94) =< aux(49)
it(95) =< aux(49)
it(92) =< aux(69)
it(93) =< aux(69)
it(94) =< aux(69)
it(95) =< aux(69)
it(92) =< aux(51)
it(93) =< aux(51)
it(92) =< aux(52)
it(93) =< aux(52)
it(92) =< aux(53)
it(93) =< aux(53)
it(94) =< aux(53)
it(95) =< aux(53)
it(92) =< aux(55)
it(94) =< aux(55)
it(92) =< aux(56)
it(94) =< aux(56)

  with precondition: [O=1,S=1,J=M,D+H=F+T,F+I=G+H,F+J=H+P,C>=0,H>=0,J>=1,K>=0,L>=0,N>=0,Q>=1,R>=0,U>=1,F>=H+1,B>=Q,E>=U,A+H>=F+1,G+H>=F,D+2*H>=2*F+J,J+2*F>=2*H+A+1] 

* Chain [[92,93,94,95],81]: 8*it(92)+8*it(93)+8*it(94)+8*it(95)+5*s(236)+5*s(237)+5*s(238)+5*s(239)+8
  Such that:aux(49) =< A
aux(51) =< B-K
s(233) =< B+K
aux(52) =< 2*B-Q
aux(55) =< E-N
s(235) =< E+N
aux(56) =< 2*E
s(234) =< G-I+J
aux(53) =< G-I+T
aux(70) =< G-I
s(236) =< s(234)
s(237) =< s(234)
s(238) =< s(234)
s(239) =< s(234)
s(236) =< s(233)
s(237) =< s(233)
s(236) =< s(235)
s(238) =< s(235)
it(92) =< aux(49)
it(93) =< aux(49)
it(94) =< aux(49)
it(95) =< aux(49)
it(92) =< aux(70)
it(93) =< aux(70)
it(94) =< aux(70)
it(95) =< aux(70)
it(92) =< aux(51)
it(93) =< aux(51)
it(92) =< aux(52)
it(93) =< aux(52)
it(92) =< aux(53)
it(93) =< aux(53)
it(94) =< aux(53)
it(95) =< aux(53)
it(92) =< aux(55)
it(94) =< aux(55)
it(92) =< aux(56)
it(94) =< aux(56)

  with precondition: [O=1,S=1,J=M,D+H=F+T,F+I=G+H,F+J=H+P,C>=0,E>=1,H>=0,J>=1,K>=0,L>=0,N>=0,Q>=1,R>=0,U>=1,F>=H+1,B>=Q,A+H>=F+1,G+H>=F,D+2*H>=2*F+J,J+2*F>=2*H+A+1] 

* Chain [[92,93,94,95],80]: 8*it(92)+8*it(93)+8*it(94)+8*it(95)+5*s(243)+5*s(244)+5*s(245)+5*s(246)+8
  Such that:aux(49) =< A
aux(51) =< B-K
s(240) =< B+K
aux(52) =< 2*B-Q
aux(53) =< D
aux(55) =< E-N
s(242) =< E+N
aux(56) =< 2*E-U
s(241) =< T
aux(71) =< F-H
s(243) =< s(241)
s(244) =< s(241)
s(245) =< s(241)
s(246) =< s(241)
s(243) =< s(240)
s(244) =< s(240)
s(243) =< s(242)
s(245) =< s(242)
it(92) =< aux(49)
it(93) =< aux(49)
it(94) =< aux(49)
it(95) =< aux(49)
it(92) =< aux(71)
it(93) =< aux(71)
it(94) =< aux(71)
it(95) =< aux(71)
it(92) =< aux(51)
it(93) =< aux(51)
it(92) =< aux(52)
it(93) =< aux(52)
it(92) =< aux(53)
it(93) =< aux(53)
it(94) =< aux(53)
it(95) =< aux(53)
it(92) =< aux(55)
it(94) =< aux(55)
it(92) =< aux(56)
it(94) =< aux(56)

  with precondition: [O=1,S=1,J=M,F+I=G+H,F+J=H+P,F+J=H+T,C>=0,H>=0,J>=1,K>=0,L>=0,N>=0,Q>=1,R>=0,U>=1,F>=H+1,B>=Q,E>=U,A+H>=F+1,D+H>=F+1,G+H>=F,J+2*F>=2*H+A+1,J+2*F>=2*H+D+1] 

* Chain [[92,93,94,95],79]: 8*it(92)+8*it(93)+8*it(94)+8*it(95)+5*s(250)+5*s(251)+5*s(252)+5*s(253)+8
  Such that:aux(49) =< A
aux(51) =< B-K
s(247) =< B+K
aux(52) =< 2*B-Q
aux(53) =< D
aux(55) =< E-N
s(249) =< E+N
aux(56) =< 2*E
s(248) =< T
aux(72) =< G-I
s(250) =< s(248)
s(251) =< s(248)
s(252) =< s(248)
s(253) =< s(248)
s(250) =< s(247)
s(251) =< s(247)
s(250) =< s(249)
s(252) =< s(249)
it(92) =< aux(49)
it(93) =< aux(49)
it(94) =< aux(49)
it(95) =< aux(49)
it(92) =< aux(72)
it(93) =< aux(72)
it(94) =< aux(72)
it(95) =< aux(72)
it(92) =< aux(51)
it(93) =< aux(51)
it(92) =< aux(52)
it(93) =< aux(52)
it(92) =< aux(53)
it(93) =< aux(53)
it(94) =< aux(53)
it(95) =< aux(53)
it(92) =< aux(55)
it(94) =< aux(55)
it(92) =< aux(56)
it(94) =< aux(56)

  with precondition: [O=1,S=1,J=M,F+I=G+H,F+J=H+P,F+J=H+T,C>=0,E>=1,H>=0,J>=1,K>=0,L>=0,N>=0,Q>=1,R>=0,U>=1,F>=H+1,B>=Q,A+H>=F+1,D+H>=F+1,G+H>=F,J+2*F>=2*H+A+1,J+2*F>=2*H+D+1] 

* Chain [[92,93,94,95],78]: 8*it(92)+8*it(93)+8*it(94)+8*it(95)+5*s(257)+5*s(258)+5*s(259)+5*s(260)+8
  Such that:aux(49) =< A
aux(51) =< B-K
s(254) =< B+K
aux(52) =< 2*B
aux(55) =< E-N
s(256) =< E+N
aux(56) =< 2*E-U
aux(53) =< F-H+T
s(255) =< P
aux(73) =< F-H
s(257) =< s(255)
s(258) =< s(255)
s(259) =< s(255)
s(260) =< s(255)
s(257) =< s(254)
s(258) =< s(254)
s(257) =< s(256)
s(259) =< s(256)
it(92) =< aux(49)
it(93) =< aux(49)
it(94) =< aux(49)
it(95) =< aux(49)
it(92) =< aux(73)
it(93) =< aux(73)
it(94) =< aux(73)
it(95) =< aux(73)
it(92) =< aux(51)
it(93) =< aux(51)
it(92) =< aux(52)
it(93) =< aux(52)
it(92) =< aux(53)
it(93) =< aux(53)
it(94) =< aux(53)
it(95) =< aux(53)
it(92) =< aux(55)
it(94) =< aux(55)
it(92) =< aux(56)
it(94) =< aux(56)

  with precondition: [O=1,S=1,J=M,D+H=F+T,F+I=G+H,F+J=H+P,B>=1,C>=0,H>=0,J>=1,K>=0,L>=0,N>=0,Q>=1,R>=0,U>=1,F>=H+1,E>=U,A+H>=F+1,G+H>=F,D+2*H>=2*F+J,J+2*F>=2*H+A+1] 

* Chain [[92,93,94,95],77]: 8*it(92)+8*it(93)+8*it(94)+8*it(95)+5*s(264)+5*s(265)+5*s(266)+5*s(267)+8
  Such that:aux(49) =< A
aux(51) =< B-K
s(261) =< B+K
aux(52) =< 2*B
aux(55) =< E-N
s(263) =< E+N
aux(56) =< 2*E
aux(53) =< G-I+T
s(262) =< P
aux(74) =< G-I
s(264) =< s(262)
s(265) =< s(262)
s(266) =< s(262)
s(267) =< s(262)
s(264) =< s(261)
s(265) =< s(261)
s(264) =< s(263)
s(266) =< s(263)
it(92) =< aux(49)
it(93) =< aux(49)
it(94) =< aux(49)
it(95) =< aux(49)
it(92) =< aux(74)
it(93) =< aux(74)
it(94) =< aux(74)
it(95) =< aux(74)
it(92) =< aux(51)
it(93) =< aux(51)
it(92) =< aux(52)
it(93) =< aux(52)
it(92) =< aux(53)
it(93) =< aux(53)
it(94) =< aux(53)
it(95) =< aux(53)
it(92) =< aux(55)
it(94) =< aux(55)
it(92) =< aux(56)
it(94) =< aux(56)

  with precondition: [O=1,S=1,J=M,D+H=F+T,F+I=G+H,F+J=H+P,B>=1,C>=0,E>=1,H>=0,J>=1,K>=0,L>=0,N>=0,Q>=1,R>=0,U>=1,F>=H+1,A+H>=F+1,G+H>=F,D+2*H>=2*F+J,J+2*F>=2*H+A+1] 

* Chain [[92,93,94,95],76]: 8*it(92)+8*it(93)+8*it(94)+8*it(95)+5*s(271)+5*s(272)+5*s(273)+5*s(274)+8
  Such that:aux(49) =< A
aux(51) =< B-K
s(268) =< B+K
aux(52) =< 2*B
aux(53) =< D
aux(55) =< E-N
s(270) =< E+N
aux(56) =< 2*E-U
s(269) =< T
aux(75) =< F-H
s(271) =< s(269)
s(272) =< s(269)
s(273) =< s(269)
s(274) =< s(269)
s(271) =< s(268)
s(272) =< s(268)
s(271) =< s(270)
s(273) =< s(270)
it(92) =< aux(49)
it(93) =< aux(49)
it(94) =< aux(49)
it(95) =< aux(49)
it(92) =< aux(75)
it(93) =< aux(75)
it(94) =< aux(75)
it(95) =< aux(75)
it(92) =< aux(51)
it(93) =< aux(51)
it(92) =< aux(52)
it(93) =< aux(52)
it(92) =< aux(53)
it(93) =< aux(53)
it(94) =< aux(53)
it(95) =< aux(53)
it(92) =< aux(55)
it(94) =< aux(55)
it(92) =< aux(56)
it(94) =< aux(56)

  with precondition: [O=1,S=1,J=M,F+I=G+H,F+J=H+P,F+J=H+T,B>=1,C>=0,H>=0,J>=1,K>=0,L>=0,N>=0,Q>=1,R>=0,U>=1,F>=H+1,E>=U,A+H>=F+1,D+H>=F+1,G+H>=F,J+2*F>=2*H+A+1,J+2*F>=2*H+D+1] 

* Chain [[92,93,94,95],75]: 8*it(92)+8*it(93)+8*it(94)+8*it(95)+5*s(278)+5*s(279)+5*s(280)+5*s(281)+8
  Such that:aux(49) =< A
aux(51) =< B-K
s(275) =< B+K
aux(52) =< 2*B
aux(53) =< D
aux(55) =< E-N
s(277) =< E+N
aux(56) =< 2*E
s(276) =< T
aux(76) =< G-I
s(278) =< s(276)
s(279) =< s(276)
s(280) =< s(276)
s(281) =< s(276)
s(278) =< s(275)
s(279) =< s(275)
s(278) =< s(277)
s(280) =< s(277)
it(92) =< aux(49)
it(93) =< aux(49)
it(94) =< aux(49)
it(95) =< aux(49)
it(92) =< aux(76)
it(93) =< aux(76)
it(94) =< aux(76)
it(95) =< aux(76)
it(92) =< aux(51)
it(93) =< aux(51)
it(92) =< aux(52)
it(93) =< aux(52)
it(92) =< aux(53)
it(93) =< aux(53)
it(94) =< aux(53)
it(95) =< aux(53)
it(92) =< aux(55)
it(94) =< aux(55)
it(92) =< aux(56)
it(94) =< aux(56)

  with precondition: [O=1,S=1,J=M,F+I=G+H,F+J=H+P,F+J=H+T,B>=1,C>=0,E>=1,H>=0,J>=1,K>=0,L>=0,N>=0,Q>=1,R>=0,U>=1,F>=H+1,A+H>=F+1,D+H>=F+1,G+H>=F,J+2*F>=2*H+A+1,J+2*F>=2*H+D+1] 

* Chain [91]: 8
  with precondition: [J=1,K=0,M=1,N=0,O=1,S=1,F=H,G=I,A=P,B=Q,D=T,E=U,A>=1,B>=0,C>=0,D>=1,E>=0,F>=0,G>=0,L>=0,R>=C] 

* Chain [90]: 5*s(173)+5*s(174)+5*s(175)+5*s(176)+8
  Such that:s(170) =< K
s(171) =< M
s(172) =< N
s(173) =< s(171)
s(174) =< s(171)
s(175) =< s(171)
s(176) =< s(171)
s(173) =< s(170)
s(174) =< s(170)
s(173) =< s(172)
s(175) =< s(172)

  with precondition: [O=1,S=1,F=H,G=I,J=M,A=P,B=Q,D=T,E=U,B>=1,C>=0,E>=1,F>=0,G>=0,J>=2,K>=1,L>=0,N>=1,R>=C,A>=J,D>=J] 

* Chain [89]: 5*s(180)+5*s(181)+5*s(182)+5*s(183)+8
  Such that:s(177) =< K
s(178) =< M
s(179) =< N
s(180) =< s(178)
s(181) =< s(178)
s(182) =< s(178)
s(183) =< s(178)
s(180) =< s(177)
s(181) =< s(177)
s(180) =< s(179)
s(182) =< s(179)

  with precondition: [O=1,S=1,F=H,G=I,J=M,A=P,B=Q,D=T,B>=1,C>=0,E>=0,F>=0,G>=0,J>=2,K>=1,L>=0,N>=1,R>=C,U>=E+1,A>=J,D>=J] 

* Chain [88]: 5*s(187)+5*s(188)+5*s(189)+5*s(190)+8
  Such that:s(184) =< K
s(185) =< M
s(186) =< N
s(187) =< s(185)
s(188) =< s(185)
s(189) =< s(185)
s(190) =< s(185)
s(187) =< s(184)
s(188) =< s(184)
s(187) =< s(186)
s(189) =< s(186)

  with precondition: [O=1,S=1,F=H,G=I,J=M,A=P,B=Q,J=T,E=U,B>=1,C>=0,D>=1,E>=1,F>=0,G>=0,K>=1,L>=0,N>=1,R>=C,J>=D+1,A>=J] 

* Chain [87]: 5*s(194)+5*s(195)+5*s(196)+5*s(197)+8
  Such that:s(191) =< K
s(192) =< M
s(193) =< N
s(194) =< s(192)
s(195) =< s(192)
s(196) =< s(192)
s(197) =< s(192)
s(194) =< s(191)
s(195) =< s(191)
s(194) =< s(193)
s(196) =< s(193)

  with precondition: [O=1,S=1,F=H,G=I,J=M,A=P,B=Q,J=T,B>=1,C>=0,D>=1,E>=0,F>=0,G>=0,K>=1,L>=0,N>=1,R>=C,J>=D+1,U>=E+1,A>=J] 

* Chain [86]: 5*s(201)+5*s(202)+5*s(203)+5*s(204)+8
  Such that:s(198) =< K
s(199) =< M
s(200) =< N
s(201) =< s(199)
s(202) =< s(199)
s(203) =< s(199)
s(204) =< s(199)
s(201) =< s(198)
s(202) =< s(198)
s(201) =< s(200)
s(203) =< s(200)

  with precondition: [O=1,S=1,F=H,G=I,J=M,A=P,D=T,E=U,B>=0,C>=0,E>=1,F>=0,G>=0,J>=2,K>=1,L>=0,N>=1,Q>=B+1,R>=C,A>=J,D>=J] 

* Chain [85]: 5*s(208)+5*s(209)+5*s(210)+5*s(211)+8
  Such that:s(205) =< K
s(206) =< M
s(207) =< N
s(208) =< s(206)
s(209) =< s(206)
s(210) =< s(206)
s(211) =< s(206)
s(208) =< s(205)
s(209) =< s(205)
s(208) =< s(207)
s(210) =< s(207)

  with precondition: [O=1,S=1,F=H,G=I,J=M,A=P,D=T,B>=0,C>=0,E>=0,F>=0,G>=0,J>=2,K>=1,L>=0,N>=1,Q>=B+1,R>=C,U>=E+1,A>=J,D>=J] 

* Chain [84]: 5*s(215)+5*s(216)+5*s(217)+5*s(218)+8
  Such that:s(212) =< K
s(213) =< M
s(214) =< N
s(215) =< s(213)
s(216) =< s(213)
s(217) =< s(213)
s(218) =< s(213)
s(215) =< s(212)
s(216) =< s(212)
s(215) =< s(214)
s(217) =< s(214)

  with precondition: [O=1,S=1,F=H,G=I,J=M,A=P,J=T,E=U,B>=0,C>=0,D>=1,E>=1,F>=0,G>=0,K>=1,L>=0,N>=1,Q>=B+1,R>=C,J>=D+1,A>=J] 

* Chain [83]: 5*s(222)+5*s(223)+5*s(224)+5*s(225)+8
  Such that:s(219) =< K
s(220) =< M
s(221) =< N
s(222) =< s(220)
s(223) =< s(220)
s(224) =< s(220)
s(225) =< s(220)
s(222) =< s(219)
s(223) =< s(219)
s(222) =< s(221)
s(224) =< s(221)

  with precondition: [O=1,S=1,F=H,G=I,J=M,A=P,J=T,B>=0,C>=0,D>=1,E>=0,F>=0,G>=0,K>=1,L>=0,N>=1,Q>=B+1,R>=C,J>=D+1,U>=E+1,A>=J] 

* Chain [82]: 5*s(229)+5*s(230)+5*s(231)+5*s(232)+8
  Such that:s(227) =< J
s(226) =< K
s(228) =< N
s(229) =< s(227)
s(230) =< s(227)
s(231) =< s(227)
s(232) =< s(227)
s(229) =< s(226)
s(230) =< s(226)
s(229) =< s(228)
s(231) =< s(228)

  with precondition: [O=1,S=1,F=H,G=I,J=M,J=P,B=Q,D=T,E=U,A>=1,B>=1,C>=0,E>=1,F>=0,G>=0,K>=1,L>=0,N>=1,J>=A+1,R>=C,D>=J] 

* Chain [81]: 5*s(236)+5*s(237)+5*s(238)+5*s(239)+8
  Such that:s(234) =< J
s(233) =< K
s(235) =< N
s(236) =< s(234)
s(237) =< s(234)
s(238) =< s(234)
s(239) =< s(234)
s(236) =< s(233)
s(237) =< s(233)
s(236) =< s(235)
s(238) =< s(235)

  with precondition: [O=1,S=1,F=H,G=I,J=M,J=P,B=Q,D=T,A>=1,B>=1,C>=0,E>=0,F>=0,G>=0,K>=1,L>=0,N>=1,J>=A+1,R>=C,U>=E+1,D>=J] 

* Chain [80]: 5*s(243)+5*s(244)+5*s(245)+5*s(246)+8
  Such that:s(240) =< K
s(241) =< M
s(242) =< N
s(243) =< s(241)
s(244) =< s(241)
s(245) =< s(241)
s(246) =< s(241)
s(243) =< s(240)
s(244) =< s(240)
s(243) =< s(242)
s(245) =< s(242)

  with precondition: [O=1,S=1,F=H,G=I,J=M,J=P,B=Q,J=T,E=U,A>=1,B>=1,C>=0,D>=1,E>=1,F>=0,G>=0,K>=1,L>=0,N>=1,J>=A+1,R>=C,J>=D+1] 

* Chain [79]: 5*s(250)+5*s(251)+5*s(252)+5*s(253)+8
  Such that:s(247) =< K
s(248) =< M
s(249) =< N
s(250) =< s(248)
s(251) =< s(248)
s(252) =< s(248)
s(253) =< s(248)
s(250) =< s(247)
s(251) =< s(247)
s(250) =< s(249)
s(252) =< s(249)

  with precondition: [O=1,S=1,F=H,G=I,J=M,J=P,B=Q,J=T,A>=1,B>=1,C>=0,D>=1,E>=0,F>=0,G>=0,K>=1,L>=0,N>=1,J>=A+1,R>=C,J>=D+1,U>=E+1] 

* Chain [78]: 5*s(257)+5*s(258)+5*s(259)+5*s(260)+8
  Such that:s(255) =< J
s(254) =< K
s(256) =< N
s(257) =< s(255)
s(258) =< s(255)
s(259) =< s(255)
s(260) =< s(255)
s(257) =< s(254)
s(258) =< s(254)
s(257) =< s(256)
s(259) =< s(256)

  with precondition: [O=1,S=1,F=H,G=I,J=M,J=P,D=T,E=U,A>=1,B>=0,C>=0,E>=1,F>=0,G>=0,K>=1,L>=0,N>=1,J>=A+1,Q>=B+1,R>=C,D>=J] 

* Chain [77]: 5*s(264)+5*s(265)+5*s(266)+5*s(267)+8
  Such that:s(262) =< J
s(261) =< K
s(263) =< N
s(264) =< s(262)
s(265) =< s(262)
s(266) =< s(262)
s(267) =< s(262)
s(264) =< s(261)
s(265) =< s(261)
s(264) =< s(263)
s(266) =< s(263)

  with precondition: [O=1,S=1,F=H,G=I,J=M,J=P,D=T,A>=1,B>=0,C>=0,E>=0,F>=0,G>=0,K>=1,L>=0,N>=1,J>=A+1,Q>=B+1,R>=C,U>=E+1,D>=J] 

* Chain [76]: 5*s(271)+5*s(272)+5*s(273)+5*s(274)+8
  Such that:s(268) =< K
s(269) =< M
s(270) =< N
s(271) =< s(269)
s(272) =< s(269)
s(273) =< s(269)
s(274) =< s(269)
s(271) =< s(268)
s(272) =< s(268)
s(271) =< s(270)
s(273) =< s(270)

  with precondition: [O=1,S=1,F=H,G=I,J=M,J=P,J=T,E=U,A>=1,B>=0,C>=0,D>=1,E>=1,F>=0,G>=0,K>=1,L>=0,N>=1,J>=A+1,Q>=B+1,R>=C,J>=D+1] 

* Chain [75]: 5*s(278)+5*s(279)+5*s(280)+5*s(281)+8
  Such that:s(275) =< K
s(276) =< M
s(277) =< N
s(278) =< s(276)
s(279) =< s(276)
s(280) =< s(276)
s(281) =< s(276)
s(278) =< s(275)
s(279) =< s(275)
s(278) =< s(277)
s(280) =< s(277)

  with precondition: [O=1,S=1,F=H,G=I,J=M,J=P,J=T,A>=1,B>=0,C>=0,D>=1,E>=0,F>=0,G>=0,K>=1,L>=0,N>=1,J>=A+1,Q>=B+1,R>=C,J>=D+1,U>=E+1] 


#### Simplifying cost structure of CE 102 
 * Renamed intermediate variables: 
[ (eq(106,1),aux(118))>>s(570), (eq(106,1),aux(119))>>s(571), (eq(106,1),aux(120))>>s(572), (eq(106,1),aux(121))>>s(573), (eq(106,1),aux(122))>>s(574), (eq(106,1),aux(123))>>s(575), (eq(106,1),aux(124))>>s(576), (eq(106,1),aux(125))>>s(577), (eq(106,1),aux(126))>>s(578), (eq(106,1),aux(127))>>s(579), (eq(106,1),aux(128))>>s(580), (eq(106,1),aux(129))>>s(581), (eq(106,1),aux(130))>>s(582), (eq(106,1),s(508))>>s(583), (eq(106,1),s(509))>>s(584), (eq(106,1),s(510))>>s(585), (eq(106,1),s(511))>>s(586), (eq(106,1),s(512))>>s(587), (eq(106,1),s(513))>>s(588), (eq(106,1),s(514))>>s(589), (eq(106,1),s(515))>>s(590), (eq(106,1),s(530))>>s(591), (eq(106,1),s(531))>>s(592), (eq(106,1),s(532))>>s(593), (eq(106,1),s(533))>>s(594), (eq(106,1),s(548))>>s(595), (eq(106,1),s(549))>>s(596), (eq(106,1),s(566))>>s(597), (eq(106,1),s(567))>>s(598)]

#### Simplifying cost structure of CE 106 
 * Joined equivalent variables [aux(131),s(571),s(572)] into aux(131)
 * Joined equivalent variables [aux(132),s(573),s(574)] into aux(132)
 * Joined equivalent variables [aux(133),s(576),s(577)] into aux(133)
 * Joined equivalent variables [aux(134),s(578),s(579)] into aux(134)
 * Joined equivalent variables [aux(135),s(580),s(581)] into aux(135)
 * Joined equivalent variables [s(587),s(591),s(595),s(597)] into s(587)
 * Joined equivalent variables [s(588),s(592),s(596),s(598)] into s(588)
 * Joined equivalent variables [s(589),s(593)] into s(589)
 * Joined equivalent variables [s(590),s(594)] into s(590)
 * Renamed intermediate variables: 
[ (eq(105,1),s(469))>>s(599), (eq(105,1),aux(104))>>s(600), (eq(105,1),aux(105))>>s(601), (eq(105,1),aux(106))>>s(602), (eq(105,1),aux(107))>>s(603), (eq(105,1),aux(108))>>s(604), (eq(105,1),aux(109))>>s(605), (eq(105,1),aux(110))>>s(606), (eq(105,1),aux(111))>>s(607), (eq(105,1),aux(112))>>s(608), (eq(105,1),aux(113))>>s(609), (eq(105,1),aux(114))>>s(610), (eq(105,1),aux(115))>>s(611), (eq(105,1),aux(116))>>s(612), (eq(105,1),aux(117))>>s(613), (eq(105,1),s(436))>>s(614), (eq(105,1),s(437))>>s(615), (eq(105,1),s(438))>>s(616), (eq(105,1),s(439))>>s(617), (eq(105,1),s(440))>>s(618), (eq(105,1),s(441))>>s(619), (eq(105,1),s(442))>>s(620), (eq(105,1),s(443))>>s(621), (eq(105,1),s(458))>>s(622), (eq(105,1),s(459))>>s(623), (eq(105,1),s(460))>>s(624), (eq(105,1),s(461))>>s(625), (eq(105,1),s(472))>>s(626), (eq(105,1),s(473))>>s(627), (eq(105,1),s(474))>>s(628), (eq(105,1),s(475))>>s(629), (eq(105,1),s(476))>>s(630), (eq(105,1),s(477))>>s(631), (eq(105,1),s(494))>>s(632), (eq(105,1),s(495))>>s(633)]

#### Simplifying cost structure of CE 105 
 * Joined equivalent variables [aux(136),s(601),s(602)] into aux(136)
 * Joined equivalent variables [aux(137),s(603),s(604)] into aux(137)
 * Joined equivalent variables [aux(138),s(610),s(612)] into aux(138)
 * Joined equivalent variables [aux(139),s(605),s(606)] into aux(139)
 * Joined equivalent variables [aux(140),s(607),s(608)] into aux(140)
 * Joined equivalent variables [aux(141),s(609),s(611)] into aux(141)
 * Joined equivalent variables [aux(142),s(599),s(613)] into aux(142)
 * Joined equivalent variables [s(618),s(622),s(630),s(632)] into s(618)
 * Joined equivalent variables [s(619),s(623),s(631),s(633)] into s(619)
 * Joined equivalent variables [s(614),s(626)] into s(614)
 * Joined equivalent variables [s(615),s(627)] into s(615)
 * Joined equivalent variables [s(620),s(624)] into s(620)
 * Joined equivalent variables [s(621),s(625)] into s(621)
 * Joined equivalent variables [s(616),s(628)] into s(616)
 * Joined equivalent variables [s(617),s(629)] into s(617)
 * Renamed intermediate variables: 
[ (eq(104,1),s(381))>>s(634), (eq(104,1),s(361))>>s(635), (eq(104,1),s(417))>>s(636), (eq(104,1),aux(92))>>s(637), (eq(104,1),aux(93))>>s(638), (eq(104,1),aux(94))>>s(639), (eq(104,1),aux(95))>>s(640), (eq(104,1),aux(96))>>s(641), (eq(104,1),aux(97))>>s(642), (eq(104,1),aux(98))>>s(643), (eq(104,1),aux(99))>>s(644), (eq(104,1),aux(100))>>s(645), (eq(104,1),aux(101))>>s(646), (eq(104,1),aux(102))>>s(647), (eq(104,1),aux(103))>>s(648), (eq(104,1),s(364))>>s(649), (eq(104,1),s(365))>>s(650), (eq(104,1),s(366))>>s(651), (eq(104,1),s(367))>>s(652), (eq(104,1),s(386))>>s(653), (eq(104,1),s(387))>>s(654), (eq(104,1),s(388))>>s(655), (eq(104,1),s(389))>>s(656), (eq(104,1),s(404))>>s(657), (eq(104,1),s(405))>>s(658), (eq(104,1),s(406))>>s(659), (eq(104,1),s(407))>>s(660), (eq(104,1),s(422))>>s(661), (eq(104,1),s(423))>>s(662), (eq(104,1),s(424))>>s(663), (eq(104,1),s(425))>>s(664), (eq(104,1),s(368))>>s(665), (eq(104,1),s(369))>>s(666), (eq(104,1),s(370))>>s(667), (eq(104,1),s(371))>>s(668)]

#### Simplifying cost structure of CE 104 
 * Joined equivalent variables [aux(143),s(635),s(637)] into aux(143)
 * Joined equivalent variables [aux(144),s(638),s(639)] into aux(144)
 * Joined equivalent variables [aux(145),s(640),s(641)] into aux(145)
 * Joined equivalent variables [aux(146),s(643),s(644)] into aux(146)
 * Joined equivalent variables [aux(147),s(645),s(646)] into aux(147)
 * Joined equivalent variables [aux(148),s(634),s(636),s(647)] into aux(148)
 * Joined equivalent variables [s(653),s(657),s(661),s(665)] into s(653)
 * Joined equivalent variables [s(654),s(658),s(662),s(666)] into s(654)
 * Joined equivalent variables [s(655),s(659),s(663),s(667)] into s(655)
 * Joined equivalent variables [s(656),s(660),s(664),s(668)] into s(656)
 * Renamed intermediate variables: 
[ (eq(103,1),s(289))>>s(669), (eq(103,1),aux(77))>>s(670), (eq(103,1),aux(78))>>s(671), (eq(103,1),aux(79))>>s(672), (eq(103,1),aux(80))>>s(673), (eq(103,1),aux(81))>>s(674), (eq(103,1),aux(82))>>s(675), (eq(103,1),aux(83))>>s(676), (eq(103,1),aux(84))>>s(677), (eq(103,1),aux(85))>>s(678), (eq(103,1),aux(86))>>s(679), (eq(103,1),aux(87))>>s(680), (eq(103,1),aux(88))>>s(681), (eq(103,1),aux(89))>>s(682), (eq(103,1),aux(90))>>s(683), (eq(103,1),aux(91))>>s(684), (eq(103,1),s(310))>>s(685), (eq(103,1),s(311))>>s(686), (eq(103,1),s(312))>>s(687), (eq(103,1),s(313))>>s(688), (eq(103,1),s(314))>>s(689), (eq(103,1),s(315))>>s(690), (eq(103,1),s(316))>>s(691), (eq(103,1),s(317))>>s(692), (eq(103,1),s(292))>>s(693), (eq(103,1),s(293))>>s(694), (eq(103,1),s(294))>>s(695), (eq(103,1),s(295))>>s(696), (eq(103,1),s(332))>>s(697), (eq(103,1),s(333))>>s(698), (eq(103,1),s(334))>>s(699), (eq(103,1),s(335))>>s(700), (eq(103,1),s(350))>>s(701), (eq(103,1),s(351))>>s(702), (eq(103,1),s(296))>>s(703), (eq(103,1),s(297))>>s(704), (eq(103,1),s(298))>>s(705), (eq(103,1),s(299))>>s(706)]

#### Simplifying cost structure of CE 103 
 * Joined equivalent variables [aux(149),s(669),s(670)] into aux(149)
 * Joined equivalent variables [aux(150),s(671),s(672)] into aux(150)
 * Joined equivalent variables [aux(151),s(673),s(674)] into aux(151)
 * Joined equivalent variables [aux(152),s(681),s(684)] into aux(152)
 * Joined equivalent variables [aux(153),s(675),s(676)] into aux(153)
 * Joined equivalent variables [aux(154),s(677),s(678)] into aux(154)
 * Joined equivalent variables [aux(155),s(679),s(682)] into aux(155)
 * Joined equivalent variables [aux(156),s(680),s(683)] into aux(156)
 * Joined equivalent variables [s(689),s(697),s(701),s(703)] into s(689)
 * Joined equivalent variables [s(690),s(698),s(702),s(704)] into s(690)
 * Joined equivalent variables [s(691),s(699),s(705)] into s(691)
 * Joined equivalent variables [s(692),s(700),s(706)] into s(692)
 * Joined equivalent variables [s(685),s(693)] into s(685)
 * Joined equivalent variables [s(686),s(694)] into s(686)
 * Joined equivalent variables [s(687),s(695)] into s(687)
 * Joined equivalent variables [s(688),s(696)] into s(688)

#### Cost of chains of split(A,B,C,D,E,F,G,H,I,J,K,L,M,N):
* Chain [100]: 11
  with precondition: [F=0,G=0,H=1,L=1,A=I,B=J,D=M,E=N,A>=1,B>=0,C>=0,D>=1,E>=0,K>=C] 

* Chain [99]: 20*s(583)+20*s(584)+20*s(585)+20*s(586)+32*s(587)+32*s(588)+32*s(589)+32*s(590)+11
  Such that:s(570) =< A
s(575) =< D
s(582) =< F+1
aux(131) =< B
aux(132) =< 2*B
aux(133) =< E
aux(134) =< 2*E
aux(135) =< F
s(583) =< s(582)
s(584) =< s(582)
s(585) =< s(582)
s(586) =< s(582)
s(583) =< aux(131)
s(584) =< aux(131)
s(583) =< aux(133)
s(585) =< aux(133)
s(587) =< s(570)
s(588) =< s(570)
s(589) =< s(570)
s(590) =< s(570)
s(587) =< aux(135)
s(588) =< aux(135)
s(589) =< aux(135)
s(590) =< aux(135)
s(587) =< aux(131)
s(588) =< aux(131)
s(587) =< aux(132)
s(588) =< aux(132)
s(587) =< s(575)
s(588) =< s(575)
s(589) =< s(575)
s(590) =< s(575)
s(587) =< aux(133)
s(589) =< aux(133)
s(587) =< aux(134)
s(589) =< aux(134)

  with precondition: [H=1,L=1,F=G,F+1=I,F+1=M,B>=1,C>=0,E>=1,J>=1,K>=0,N>=1,2*F>=A,2*F>=D,A>=F+1,D>=F+1] 

* Chain [98]: 20*s(614)+20*s(615)+20*s(616)+20*s(617)+32*s(618)+32*s(619)+32*s(620)+32*s(621)+11
  Such that:s(600) =< A
aux(136) =< B
aux(137) =< 2*B
aux(138) =< D
aux(139) =< E
aux(140) =< 2*E
aux(141) =< G
aux(142) =< G+1
s(614) =< aux(142)
s(615) =< aux(142)
s(616) =< aux(142)
s(617) =< aux(142)
s(614) =< aux(136)
s(615) =< aux(136)
s(614) =< aux(139)
s(616) =< aux(139)
s(618) =< s(600)
s(619) =< s(600)
s(620) =< s(600)
s(621) =< s(600)
s(618) =< aux(141)
s(619) =< aux(141)
s(620) =< aux(141)
s(621) =< aux(141)
s(618) =< aux(136)
s(619) =< aux(136)
s(618) =< aux(137)
s(619) =< aux(137)
s(618) =< aux(138)
s(619) =< aux(138)
s(620) =< aux(138)
s(621) =< aux(138)
s(618) =< aux(139)
s(620) =< aux(139)
s(618) =< aux(140)
s(620) =< aux(140)

  with precondition: [H=1,L=1,F=G,F+1=I,F+M=D,B>=1,C>=0,E>=1,J>=1,K>=0,N>=1,D>=2*F+1,2*F>=A,A>=F+1] 

* Chain [97]: 20*s(649)+20*s(650)+20*s(651)+20*s(652)+32*s(653)+32*s(654)+32*s(655)+32*s(656)+11
  Such that:s(642) =< D
s(648) =< F+1
aux(143) =< A
aux(144) =< B
aux(145) =< 2*B
aux(146) =< E
aux(147) =< 2*E
aux(148) =< F
s(649) =< s(648)
s(650) =< s(648)
s(651) =< s(648)
s(652) =< s(648)
s(649) =< aux(144)
s(650) =< aux(144)
s(649) =< aux(146)
s(651) =< aux(146)
s(653) =< aux(143)
s(654) =< aux(143)
s(655) =< aux(143)
s(656) =< aux(143)
s(653) =< aux(148)
s(654) =< aux(148)
s(655) =< aux(148)
s(656) =< aux(148)
s(653) =< aux(144)
s(654) =< aux(144)
s(653) =< aux(145)
s(654) =< aux(145)
s(653) =< s(642)
s(654) =< s(642)
s(655) =< s(642)
s(656) =< s(642)
s(653) =< aux(146)
s(655) =< aux(146)
s(653) =< aux(147)
s(655) =< aux(147)

  with precondition: [H=1,L=1,F=G,F+1=M,F+I=A,B>=1,C>=0,E>=1,J>=1,K>=0,N>=1,A>=2*F+1,2*F>=D,D>=F+1] 

* Chain [96]: 20*s(685)+20*s(686)+20*s(687)+20*s(688)+32*s(689)+32*s(690)+32*s(691)+32*s(692)+11
  Such that:aux(149) =< A
aux(150) =< B
aux(151) =< 2*B
aux(152) =< D
aux(153) =< E
aux(154) =< 2*E
aux(155) =< G
aux(156) =< G+1
s(685) =< aux(156)
s(686) =< aux(156)
s(687) =< aux(156)
s(688) =< aux(156)
s(685) =< aux(150)
s(686) =< aux(150)
s(685) =< aux(153)
s(687) =< aux(153)
s(689) =< aux(149)
s(690) =< aux(149)
s(691) =< aux(149)
s(692) =< aux(149)
s(689) =< aux(155)
s(690) =< aux(155)
s(691) =< aux(155)
s(692) =< aux(155)
s(689) =< aux(150)
s(690) =< aux(150)
s(689) =< aux(151)
s(690) =< aux(151)
s(689) =< aux(152)
s(690) =< aux(152)
s(691) =< aux(152)
s(692) =< aux(152)
s(689) =< aux(153)
s(691) =< aux(153)
s(689) =< aux(154)
s(691) =< aux(154)

  with precondition: [H=1,L=1,F=G,F+I=A,F+M=D,B>=1,C>=0,E>=1,F>=1,J>=1,K>=0,N>=1,A>=2*F+1,D>=2*F+1] 

 * Renamed intermediate variables: 
[ (eq(108,2),s(570))>>s(707), (eq(108,2),s(575))>>s(708), (eq(108,2),s(582))>>s(709), (eq(108,2),aux(131))>>s(710), (eq(108,2),aux(132))>>s(711), (eq(108,2),aux(133))>>s(712), (eq(108,2),aux(134))>>s(713), (eq(108,2),aux(135))>>s(714), (eq(108,2),s(583))>>s(715), (eq(108,2),s(584))>>s(716), (eq(108,2),s(585))>>s(717), (eq(108,2),s(586))>>s(718), (eq(108,2),s(587))>>s(719), (eq(108,2),s(588))>>s(720), (eq(108,2),s(589))>>s(721), (eq(108,2),s(590))>>s(722)]

#### Simplifying cost structure of CE 108 
 * Joined equivalent variables [aux(157),s(707),s(708),s(709)] into aux(157)
 * Renamed intermediate variables: 
[ (eq(111,2),s(600))>>s(723), (eq(111,2),aux(136))>>s(724), (eq(111,2),aux(137))>>s(725), (eq(111,2),aux(138))>>s(726), (eq(111,2),aux(139))>>s(727), (eq(111,2),aux(140))>>s(728), (eq(111,2),aux(141))>>s(729), (eq(111,2),aux(142))>>s(730), (eq(111,2),s(614))>>s(731), (eq(111,2),s(615))>>s(732), (eq(111,2),s(616))>>s(733), (eq(111,2),s(617))>>s(734), (eq(111,2),s(618))>>s(735), (eq(111,2),s(619))>>s(736), (eq(111,2),s(620))>>s(737), (eq(111,2),s(621))>>s(738)]

#### Simplifying cost structure of CE 111 
 * Joined equivalent variables [aux(158),s(723),s(730)] into aux(158)
 * Joined equivalent variables [aux(159),s(714),s(729)] into aux(159)
 * Joined equivalent variables [aux(160),aux(157),aux(158)] into aux(160)
 * Joined equivalent variables [aux(161),s(710),s(724)] into aux(161)
 * Joined equivalent variables [aux(162),s(711),s(725)] into aux(162)
 * Joined equivalent variables [s(717),s(718)] into s(717)
 * Joined equivalent variables [s(715),s(716)] into s(715)
 * Joined equivalent variables [s(719),s(720)] into s(719)
 * Joined equivalent variables [s(721),s(722)] into s(721)
 * Joined equivalent variables [s(733),s(734)] into s(733)
 * Joined equivalent variables [s(731),s(732)] into s(731)
 * Joined equivalent variables [s(735),s(736)] into s(735)
 * Joined equivalent variables [s(737),s(738)] into s(737)
 * Joined equivalent variables [s(721),s(737)] into s(721)
 * Joined equivalent variables [s(719),s(735)] into s(719)
 * Joined equivalent variables [s(717),s(733)] into s(717)
 * Joined equivalent variables [s(715),s(731)] into s(715)
 * Renamed intermediate variables: 
[ (eq(109,2),s(570))>>s(739), (eq(109,2),s(575))>>s(740), (eq(109,2),s(582))>>s(741), (eq(109,2),aux(131))>>s(742), (eq(109,2),aux(132))>>s(743), (eq(109,2),aux(133))>>s(744), (eq(109,2),aux(134))>>s(745), (eq(109,2),aux(135))>>s(746), (eq(109,2),s(583))>>s(747), (eq(109,2),s(584))>>s(748), (eq(109,2),s(585))>>s(749), (eq(109,2),s(586))>>s(750), (eq(109,2),s(587))>>s(751), (eq(109,2),s(588))>>s(752), (eq(109,2),s(589))>>s(753), (eq(109,2),s(590))>>s(754)]
 * Renamed intermediate variables: 
[ (eq(109,3),s(117))>>s(755), (eq(109,3),aux(36))>>s(756), (eq(109,3),aux(37))>>s(757), (eq(109,3),aux(38))>>s(758), (eq(109,3),s(101))>>s(759), (eq(109,3),s(106))>>s(760), (eq(109,3),s(107))>>s(761), (eq(109,3),s(108))>>s(762), (eq(109,3),s(109))>>s(763), (eq(109,3),s(110))>>s(764), (eq(109,3),s(111))>>s(765), (eq(109,3),s(112))>>s(766), (eq(109,3),s(113))>>s(767), (eq(109,3),s(114))>>s(768), (eq(109,3),s(120))>>s(769), (eq(109,3),s(122))>>s(770), (eq(109,3),s(128))>>s(771), (eq(109,3),s(129))>>s(772), (eq(109,3),s(130))>>s(773), (eq(109,3),s(132))>>s(774), (eq(109,3),s(134))>>s(775), (eq(109,3),s(136))>>s(776)]

#### Simplifying cost structure of CE 109 
 * Joined equivalent variables [aux(163),s(739),s(740),s(741),s(756)] into aux(163)
 * Joined equivalent variables [aux(164),s(742),s(758)] into aux(164)
 * Joined equivalent variables [s(750),s(759)] into s(750)
 * Renamed intermediate variables: 
[ (eq(112,2),s(600))>>s(777), (eq(112,2),aux(136))>>s(778), (eq(112,2),aux(137))>>s(779), (eq(112,2),aux(138))>>s(780), (eq(112,2),aux(139))>>s(781), (eq(112,2),aux(140))>>s(782), (eq(112,2),aux(141))>>s(783), (eq(112,2),aux(142))>>s(784), (eq(112,2),s(614))>>s(785), (eq(112,2),s(615))>>s(786), (eq(112,2),s(616))>>s(787), (eq(112,2),s(617))>>s(788), (eq(112,2),s(618))>>s(789), (eq(112,2),s(619))>>s(790), (eq(112,2),s(620))>>s(791), (eq(112,2),s(621))>>s(792)]
 * Renamed intermediate variables: 
[ (eq(112,3),s(117))>>s(793), (eq(112,3),aux(36))>>s(794), (eq(112,3),aux(37))>>s(795), (eq(112,3),aux(38))>>s(796), (eq(112,3),s(101))>>s(797), (eq(112,3),s(106))>>s(798), (eq(112,3),s(107))>>s(799), (eq(112,3),s(108))>>s(800), (eq(112,3),s(109))>>s(801), (eq(112,3),s(110))>>s(802), (eq(112,3),s(111))>>s(803), (eq(112,3),s(112))>>s(804), (eq(112,3),s(113))>>s(805), (eq(112,3),s(114))>>s(806), (eq(112,3),s(120))>>s(807), (eq(112,3),s(122))>>s(808), (eq(112,3),s(128))>>s(809), (eq(112,3),s(129))>>s(810), (eq(112,3),s(130))>>s(811), (eq(112,3),s(132))>>s(812), (eq(112,3),s(134))>>s(813), (eq(112,3),s(136))>>s(814)]

#### Simplifying cost structure of CE 112 
 * Joined equivalent variables [aux(165),s(777),s(784),s(794)] into aux(165)
 * Joined equivalent variables [aux(166),s(778),s(796)] into aux(166)
 * Joined equivalent variables [s(788),s(797)] into s(788)
 * Joined equivalent variables [aux(167),s(746),s(783)] into aux(167)
 * Joined equivalent variables [aux(168),aux(163),aux(165)] into aux(168)
 * Joined equivalent variables [aux(169),aux(164),aux(166)] into aux(169)
 * Joined equivalent variables [aux(170),s(743),s(779)] into aux(170)
 * Joined equivalent variables [s(760),s(762)] into s(760)
 * Joined equivalent variables [s(798),s(800)] into s(798)
 * Joined equivalent variables [s(749),s(750)] into s(749)
 * Joined equivalent variables [s(747),s(748)] into s(747)
 * Joined equivalent variables [s(751),s(752)] into s(751)
 * Joined equivalent variables [s(753),s(754)] into s(753)
 * Joined equivalent variables [s(787),s(788)] into s(787)
 * Joined equivalent variables [s(785),s(786)] into s(785)
 * Joined equivalent variables [s(789),s(790)] into s(789)
 * Joined equivalent variables [s(791),s(792)] into s(791)
 * Joined equivalent variables [s(760),s(798)] into s(760)
 * Joined equivalent variables [s(764),s(765)] into s(764)
 * Joined equivalent variables [s(802),s(803)] into s(802)
 * Joined equivalent variables [s(753),s(791)] into s(753)
 * Joined equivalent variables [s(751),s(789)] into s(751)
 * Joined equivalent variables [s(749),s(787)] into s(749)
 * Joined equivalent variables [s(747),s(785)] into s(747)
 * Joined equivalent variables [s(763),s(801)] into s(763)
 * Joined equivalent variables [s(764),s(802)] into s(764)
 * Joined equivalent variables [s(766),s(767)] into s(766)
 * Joined equivalent variables [s(804),s(805)] into s(804)
 * Joined equivalent variables [s(768),s(806)] into s(768)
 * Joined equivalent variables [s(766),s(804)] into s(766)
 * Renamed intermediate variables: 
[ (eq(107,2),s(570))>>s(815), (eq(107,2),s(575))>>s(816), (eq(107,2),s(582))>>s(817), (eq(107,2),aux(131))>>s(818), (eq(107,2),aux(132))>>s(819), (eq(107,2),aux(133))>>s(820), (eq(107,2),aux(134))>>s(821), (eq(107,2),aux(135))>>s(822), (eq(107,2),s(583))>>s(823), (eq(107,2),s(584))>>s(824), (eq(107,2),s(585))>>s(825), (eq(107,2),s(586))>>s(826), (eq(107,2),s(587))>>s(827), (eq(107,2),s(588))>>s(828), (eq(107,2),s(589))>>s(829), (eq(107,2),s(590))>>s(830)]
 * Renamed intermediate variables: 
[ (eq(107,3),s(85))>>s(831), (eq(107,3),s(86))>>s(832), (eq(107,3),aux(35))>>s(833), (eq(107,3),s(88))>>s(834), (eq(107,3),s(89))>>s(835), (eq(107,3),s(90))>>s(836), (eq(107,3),s(91))>>s(837), (eq(107,3),s(92))>>s(838), (eq(107,3),s(93))>>s(839), (eq(107,3),s(94))>>s(840), (eq(107,3),s(95))>>s(841), (eq(107,3),s(96))>>s(842), (eq(107,3),s(97))>>s(843)]

#### Simplifying cost structure of CE 107 
 * Joined equivalent variables [aux(171),s(815),s(816),s(817),s(833)] into aux(171)
 * Joined equivalent variables [aux(172),s(818),s(832)] into aux(172)
 * Joined equivalent variables [s(826),s(834)] into s(826)
 * Renamed intermediate variables: 
[ (eq(110,2),s(600))>>s(844), (eq(110,2),aux(136))>>s(845), (eq(110,2),aux(137))>>s(846), (eq(110,2),aux(138))>>s(847), (eq(110,2),aux(139))>>s(848), (eq(110,2),aux(140))>>s(849), (eq(110,2),aux(141))>>s(850), (eq(110,2),aux(142))>>s(851), (eq(110,2),s(614))>>s(852), (eq(110,2),s(615))>>s(853), (eq(110,2),s(616))>>s(854), (eq(110,2),s(617))>>s(855), (eq(110,2),s(618))>>s(856), (eq(110,2),s(619))>>s(857), (eq(110,2),s(620))>>s(858), (eq(110,2),s(621))>>s(859)]
 * Renamed intermediate variables: 
[ (eq(110,3),s(85))>>s(860), (eq(110,3),s(86))>>s(861), (eq(110,3),aux(35))>>s(862), (eq(110,3),s(88))>>s(863), (eq(110,3),s(89))>>s(864), (eq(110,3),s(90))>>s(865), (eq(110,3),s(91))>>s(866), (eq(110,3),s(92))>>s(867), (eq(110,3),s(93))>>s(868), (eq(110,3),s(94))>>s(869), (eq(110,3),s(95))>>s(870), (eq(110,3),s(96))>>s(871), (eq(110,3),s(97))>>s(872)]

#### Simplifying cost structure of CE 110 
 * Joined equivalent variables [aux(173),s(844),s(851),s(862)] into aux(173)
 * Joined equivalent variables [aux(174),s(845),s(861)] into aux(174)
 * Joined equivalent variables [s(855),s(863)] into s(855)
 * Joined equivalent variables [aux(175),s(822),s(850)] into aux(175)
 * Joined equivalent variables [aux(176),aux(171),aux(173)] into aux(176)
 * Joined equivalent variables [aux(177),aux(172),aux(174)] into aux(177)
 * Joined equivalent variables [aux(178),s(819),s(846)] into aux(178)
 * Joined equivalent variables [s(835),s(837)] into s(835)
 * Joined equivalent variables [s(864),s(866)] into s(864)
 * Joined equivalent variables [s(825),s(826)] into s(825)
 * Joined equivalent variables [s(823),s(824)] into s(823)
 * Joined equivalent variables [s(827),s(828)] into s(827)
 * Joined equivalent variables [s(829),s(830)] into s(829)
 * Joined equivalent variables [s(854),s(855)] into s(854)
 * Joined equivalent variables [s(852),s(853)] into s(852)
 * Joined equivalent variables [s(856),s(857)] into s(856)
 * Joined equivalent variables [s(858),s(859)] into s(858)
 * Joined equivalent variables [s(835),s(864)] into s(835)
 * Joined equivalent variables [s(839),s(840)] into s(839)
 * Joined equivalent variables [s(868),s(869)] into s(868)
 * Joined equivalent variables [s(829),s(858)] into s(829)
 * Joined equivalent variables [s(827),s(856)] into s(827)
 * Joined equivalent variables [s(825),s(854)] into s(825)
 * Joined equivalent variables [s(823),s(852)] into s(823)
 * Joined equivalent variables [s(838),s(867)] into s(838)
 * Joined equivalent variables [s(839),s(868)] into s(839)
 * Joined equivalent variables [s(841),s(842)] into s(841)
 * Joined equivalent variables [s(870),s(871)] into s(870)
 * Joined equivalent variables [s(843),s(872)] into s(843)
 * Joined equivalent variables [s(841),s(870)] into s(841)
 * Renamed intermediate variables: 
[ (eq(114,2),s(642))>>s(873), (eq(114,2),s(648))>>s(874), (eq(114,2),aux(143))>>s(875), (eq(114,2),aux(144))>>s(876), (eq(114,2),aux(145))>>s(877), (eq(114,2),aux(146))>>s(878), (eq(114,2),aux(147))>>s(879), (eq(114,2),aux(148))>>s(880), (eq(114,2),s(649))>>s(881), (eq(114,2),s(650))>>s(882), (eq(114,2),s(651))>>s(883), (eq(114,2),s(652))>>s(884), (eq(114,2),s(653))>>s(885), (eq(114,2),s(654))>>s(886), (eq(114,2),s(655))>>s(887), (eq(114,2),s(656))>>s(888)]

#### Simplifying cost structure of CE 114 
 * Joined equivalent variables [aux(179),s(873),s(874)] into aux(179)
 * Renamed intermediate variables: 
[ (eq(117,2),aux(149))>>s(889), (eq(117,2),aux(150))>>s(890), (eq(117,2),aux(151))>>s(891), (eq(117,2),aux(152))>>s(892), (eq(117,2),aux(153))>>s(893), (eq(117,2),aux(154))>>s(894), (eq(117,2),aux(155))>>s(895), (eq(117,2),aux(156))>>s(896), (eq(117,2),s(685))>>s(897), (eq(117,2),s(686))>>s(898), (eq(117,2),s(687))>>s(899), (eq(117,2),s(688))>>s(900), (eq(117,2),s(689))>>s(901), (eq(117,2),s(690))>>s(902), (eq(117,2),s(691))>>s(903), (eq(117,2),s(692))>>s(904)]

#### Simplifying cost structure of CE 117 
 * Joined equivalent variables [aux(180),s(880),s(895)] into aux(180)
 * Joined equivalent variables [aux(181),aux(179),s(896)] into aux(181)
 * Joined equivalent variables [aux(182),s(875),s(889)] into aux(182)
 * Joined equivalent variables [aux(183),s(876),s(890)] into aux(183)
 * Joined equivalent variables [aux(184),s(877),s(891)] into aux(184)
 * Joined equivalent variables [s(883),s(884)] into s(883)
 * Joined equivalent variables [s(885),s(886)] into s(885)
 * Joined equivalent variables [s(887),s(888)] into s(887)
 * Joined equivalent variables [s(881),s(882)] into s(881)
 * Joined equivalent variables [s(901),s(902)] into s(901)
 * Joined equivalent variables [s(903),s(904)] into s(903)
 * Joined equivalent variables [s(897),s(898)] into s(897)
 * Joined equivalent variables [s(899),s(900)] into s(899)
 * Joined equivalent variables [s(883),s(899)] into s(883)
 * Joined equivalent variables [s(881),s(897)] into s(881)
 * Renamed intermediate variables: 
[ (eq(115,2),s(642))>>s(905), (eq(115,2),s(648))>>s(906), (eq(115,2),aux(143))>>s(907), (eq(115,2),aux(144))>>s(908), (eq(115,2),aux(145))>>s(909), (eq(115,2),aux(146))>>s(910), (eq(115,2),aux(147))>>s(911), (eq(115,2),aux(148))>>s(912), (eq(115,2),s(649))>>s(913), (eq(115,2),s(650))>>s(914), (eq(115,2),s(651))>>s(915), (eq(115,2),s(652))>>s(916), (eq(115,2),s(653))>>s(917), (eq(115,2),s(654))>>s(918), (eq(115,2),s(655))>>s(919), (eq(115,2),s(656))>>s(920)]
 * Renamed intermediate variables: 
[ (eq(115,3),s(117))>>s(921), (eq(115,3),aux(36))>>s(922), (eq(115,3),aux(37))>>s(923), (eq(115,3),aux(38))>>s(924), (eq(115,3),s(101))>>s(925), (eq(115,3),s(106))>>s(926), (eq(115,3),s(107))>>s(927), (eq(115,3),s(108))>>s(928), (eq(115,3),s(109))>>s(929), (eq(115,3),s(110))>>s(930), (eq(115,3),s(111))>>s(931), (eq(115,3),s(112))>>s(932), (eq(115,3),s(113))>>s(933), (eq(115,3),s(114))>>s(934), (eq(115,3),s(120))>>s(935), (eq(115,3),s(122))>>s(936), (eq(115,3),s(128))>>s(937), (eq(115,3),s(129))>>s(938), (eq(115,3),s(130))>>s(939), (eq(115,3),s(132))>>s(940), (eq(115,3),s(134))>>s(941), (eq(115,3),s(136))>>s(942)]

#### Simplifying cost structure of CE 115 
 * Joined equivalent variables [aux(185),s(905),s(906)] into aux(185)
 * Joined equivalent variables [aux(186),s(907),s(922)] into aux(186)
 * Joined equivalent variables [aux(187),s(908),s(924)] into aux(187)
 * Renamed intermediate variables: 
[ (eq(118,2),aux(149))>>s(943), (eq(118,2),aux(150))>>s(944), (eq(118,2),aux(151))>>s(945), (eq(118,2),aux(152))>>s(946), (eq(118,2),aux(153))>>s(947), (eq(118,2),aux(154))>>s(948), (eq(118,2),aux(155))>>s(949), (eq(118,2),aux(156))>>s(950), (eq(118,2),s(685))>>s(951), (eq(118,2),s(686))>>s(952), (eq(118,2),s(687))>>s(953), (eq(118,2),s(688))>>s(954), (eq(118,2),s(689))>>s(955), (eq(118,2),s(690))>>s(956), (eq(118,2),s(691))>>s(957), (eq(118,2),s(692))>>s(958)]
 * Renamed intermediate variables: 
[ (eq(118,3),s(117))>>s(959), (eq(118,3),aux(36))>>s(960), (eq(118,3),aux(37))>>s(961), (eq(118,3),aux(38))>>s(962), (eq(118,3),s(101))>>s(963), (eq(118,3),s(106))>>s(964), (eq(118,3),s(107))>>s(965), (eq(118,3),s(108))>>s(966), (eq(118,3),s(109))>>s(967), (eq(118,3),s(110))>>s(968), (eq(118,3),s(111))>>s(969), (eq(118,3),s(112))>>s(970), (eq(118,3),s(113))>>s(971), (eq(118,3),s(114))>>s(972), (eq(118,3),s(120))>>s(973), (eq(118,3),s(122))>>s(974), (eq(118,3),s(128))>>s(975), (eq(118,3),s(129))>>s(976), (eq(118,3),s(130))>>s(977), (eq(118,3),s(132))>>s(978), (eq(118,3),s(134))>>s(979), (eq(118,3),s(136))>>s(980)]

#### Simplifying cost structure of CE 118 
 * Joined equivalent variables [aux(188),s(943),s(960)] into aux(188)
 * Joined equivalent variables [aux(189),s(944),s(962)] into aux(189)
 * Joined equivalent variables [aux(190),s(912),s(949)] into aux(190)
 * Joined equivalent variables [aux(191),aux(185),s(950)] into aux(191)
 * Joined equivalent variables [aux(192),aux(186),aux(188)] into aux(192)
 * Joined equivalent variables [aux(193),aux(187),aux(189)] into aux(193)
 * Joined equivalent variables [aux(194),s(909),s(945)] into aux(194)
 * Joined equivalent variables [s(926),s(928)] into s(926)
 * Joined equivalent variables [s(964),s(966)] into s(964)
 * Joined equivalent variables [s(915),s(916)] into s(915)
 * Joined equivalent variables [s(917),s(918)] into s(917)
 * Joined equivalent variables [s(919),s(920)] into s(919)
 * Joined equivalent variables [s(913),s(914)] into s(913)
 * Joined equivalent variables [s(955),s(956)] into s(955)
 * Joined equivalent variables [s(957),s(958)] into s(957)
 * Joined equivalent variables [s(951),s(952)] into s(951)
 * Joined equivalent variables [s(953),s(954)] into s(953)
 * Joined equivalent variables [s(930),s(931)] into s(930)
 * Joined equivalent variables [s(968),s(969)] into s(968)
 * Joined equivalent variables [s(926),s(964)] into s(926)
 * Joined equivalent variables [s(915),s(953)] into s(915)
 * Joined equivalent variables [s(913),s(951)] into s(913)
 * Joined equivalent variables [s(925),s(963)] into s(925)
 * Joined equivalent variables [s(930),s(968)] into s(930)
 * Joined equivalent variables [s(929),s(967)] into s(929)
 * Joined equivalent variables [s(932),s(933)] into s(932)
 * Joined equivalent variables [s(970),s(971)] into s(970)
 * Joined equivalent variables [s(934),s(972)] into s(934)
 * Joined equivalent variables [s(932),s(970)] into s(932)
 * Renamed intermediate variables: 
[ (eq(113,2),s(642))>>s(981), (eq(113,2),s(648))>>s(982), (eq(113,2),aux(143))>>s(983), (eq(113,2),aux(144))>>s(984), (eq(113,2),aux(145))>>s(985), (eq(113,2),aux(146))>>s(986), (eq(113,2),aux(147))>>s(987), (eq(113,2),aux(148))>>s(988), (eq(113,2),s(649))>>s(989), (eq(113,2),s(650))>>s(990), (eq(113,2),s(651))>>s(991), (eq(113,2),s(652))>>s(992), (eq(113,2),s(653))>>s(993), (eq(113,2),s(654))>>s(994), (eq(113,2),s(655))>>s(995), (eq(113,2),s(656))>>s(996)]
 * Renamed intermediate variables: 
[ (eq(113,3),s(85))>>s(997), (eq(113,3),s(86))>>s(998), (eq(113,3),aux(35))>>s(999), (eq(113,3),s(88))>>s(1000), (eq(113,3),s(89))>>s(1001), (eq(113,3),s(90))>>s(1002), (eq(113,3),s(91))>>s(1003), (eq(113,3),s(92))>>s(1004), (eq(113,3),s(93))>>s(1005), (eq(113,3),s(94))>>s(1006), (eq(113,3),s(95))>>s(1007), (eq(113,3),s(96))>>s(1008), (eq(113,3),s(97))>>s(1009)]

#### Simplifying cost structure of CE 113 
 * Joined equivalent variables [aux(195),s(981),s(982)] into aux(195)
 * Joined equivalent variables [aux(196),s(983),s(999)] into aux(196)
 * Joined equivalent variables [aux(197),s(984),s(998)] into aux(197)
 * Renamed intermediate variables: 
[ (eq(116,2),aux(149))>>s(1010), (eq(116,2),aux(150))>>s(1011), (eq(116,2),aux(151))>>s(1012), (eq(116,2),aux(152))>>s(1013), (eq(116,2),aux(153))>>s(1014), (eq(116,2),aux(154))>>s(1015), (eq(116,2),aux(155))>>s(1016), (eq(116,2),aux(156))>>s(1017), (eq(116,2),s(685))>>s(1018), (eq(116,2),s(686))>>s(1019), (eq(116,2),s(687))>>s(1020), (eq(116,2),s(688))>>s(1021), (eq(116,2),s(689))>>s(1022), (eq(116,2),s(690))>>s(1023), (eq(116,2),s(691))>>s(1024), (eq(116,2),s(692))>>s(1025)]
 * Renamed intermediate variables: 
[ (eq(116,3),s(85))>>s(1026), (eq(116,3),s(86))>>s(1027), (eq(116,3),aux(35))>>s(1028), (eq(116,3),s(88))>>s(1029), (eq(116,3),s(89))>>s(1030), (eq(116,3),s(90))>>s(1031), (eq(116,3),s(91))>>s(1032), (eq(116,3),s(92))>>s(1033), (eq(116,3),s(93))>>s(1034), (eq(116,3),s(94))>>s(1035), (eq(116,3),s(95))>>s(1036), (eq(116,3),s(96))>>s(1037), (eq(116,3),s(97))>>s(1038)]

#### Simplifying cost structure of CE 116 
 * Joined equivalent variables [aux(198),s(1010),s(1028)] into aux(198)
 * Joined equivalent variables [aux(199),s(1011),s(1027)] into aux(199)
 * Joined equivalent variables [aux(200),s(988),s(1016)] into aux(200)
 * Joined equivalent variables [aux(201),aux(195),s(1017)] into aux(201)
 * Joined equivalent variables [aux(202),aux(196),aux(198)] into aux(202)
 * Joined equivalent variables [aux(203),aux(197),aux(199)] into aux(203)
 * Joined equivalent variables [aux(204),s(985),s(1012)] into aux(204)
 * Joined equivalent variables [s(1001),s(1003)] into s(1001)
 * Joined equivalent variables [s(1030),s(1032)] into s(1030)
 * Joined equivalent variables [s(991),s(992)] into s(991)
 * Joined equivalent variables [s(993),s(994)] into s(993)
 * Joined equivalent variables [s(995),s(996)] into s(995)
 * Joined equivalent variables [s(989),s(990)] into s(989)
 * Joined equivalent variables [s(1022),s(1023)] into s(1022)
 * Joined equivalent variables [s(1024),s(1025)] into s(1024)
 * Joined equivalent variables [s(1018),s(1019)] into s(1018)
 * Joined equivalent variables [s(1020),s(1021)] into s(1020)
 * Joined equivalent variables [s(1005),s(1006)] into s(1005)
 * Joined equivalent variables [s(1034),s(1035)] into s(1034)
 * Joined equivalent variables [s(1001),s(1030)] into s(1001)
 * Joined equivalent variables [s(991),s(1020)] into s(991)
 * Joined equivalent variables [s(989),s(1018)] into s(989)
 * Joined equivalent variables [s(1000),s(1029)] into s(1000)
 * Joined equivalent variables [s(1005),s(1034)] into s(1005)
 * Joined equivalent variables [s(1004),s(1033)] into s(1004)
 * Joined equivalent variables [s(1007),s(1008)] into s(1007)
 * Joined equivalent variables [s(1036),s(1037)] into s(1036)
 * Joined equivalent variables [s(1009),s(1038)] into s(1009)
 * Joined equivalent variables [s(1007),s(1036)] into s(1007)
 * Renamed intermediate variables: 
[ (eq(125,1),it(66))>>s(1039)]
 * Renamed intermediate variables: 
[ (eq(125,2),s(642))>>s(1040), (eq(125,2),s(648))>>s(1041), (eq(125,2),aux(143))>>s(1042), (eq(125,2),aux(144))>>s(1043), (eq(125,2),aux(145))>>s(1044), (eq(125,2),aux(146))>>s(1045), (eq(125,2),aux(147))>>s(1046), (eq(125,2),aux(148))>>s(1047), (eq(125,2),s(649))>>s(1048), (eq(125,2),s(650))>>s(1049), (eq(125,2),s(651))>>s(1050), (eq(125,2),s(652))>>s(1051), (eq(125,2),s(653))>>s(1052), (eq(125,2),s(654))>>s(1053), (eq(125,2),s(655))>>s(1054), (eq(125,2),s(656))>>s(1055)]

#### Simplifying cost structure of CE 125 
 * Renamed intermediate variables: 
[ (eq(128,1),it(66))>>s(1056)]
 * Renamed intermediate variables: 
[ (eq(128,2),aux(149))>>s(1057), (eq(128,2),aux(150))>>s(1058), (eq(128,2),aux(151))>>s(1059), (eq(128,2),aux(152))>>s(1060), (eq(128,2),aux(153))>>s(1061), (eq(128,2),aux(154))>>s(1062), (eq(128,2),aux(155))>>s(1063), (eq(128,2),aux(156))>>s(1064), (eq(128,2),s(685))>>s(1065), (eq(128,2),s(686))>>s(1066), (eq(128,2),s(687))>>s(1067), (eq(128,2),s(688))>>s(1068), (eq(128,2),s(689))>>s(1069), (eq(128,2),s(690))>>s(1070), (eq(128,2),s(691))>>s(1071), (eq(128,2),s(692))>>s(1072)]

#### Simplifying cost structure of CE 128 
 * Joined equivalent variables [aux(205),s(1042),s(1057)] into aux(205)
 * Joined equivalent variables [aux(206),s(1043),s(1058)] into aux(206)
 * Joined equivalent variables [aux(207),s(1044),s(1059)] into aux(207)
 * Joined equivalent variables [aux(209),s(1047),s(1063)] into aux(209)
 * Joined equivalent variables [aux(210),s(1041),s(1064)] into aux(210)
 * Joined equivalent variables [s(1039),s(1056)] into s(1039)
 * Joined equivalent variables [s(1052),s(1053)] into s(1052)
 * Joined equivalent variables [s(1054),s(1055)] into s(1054)
 * Joined equivalent variables [s(1050),s(1051)] into s(1050)
 * Joined equivalent variables [s(1048),s(1049)] into s(1048)
 * Joined equivalent variables [s(1069),s(1070)] into s(1069)
 * Joined equivalent variables [s(1071),s(1072)] into s(1071)
 * Joined equivalent variables [s(1065),s(1066)] into s(1065)
 * Joined equivalent variables [s(1067),s(1068)] into s(1067)
 * Joined equivalent variables [s(1048),s(1065)] into s(1048)
 * Joined equivalent variables [s(1050),s(1067)] into s(1050)
 * Renamed intermediate variables: 
[ (eq(119,1),it(66))>>s(1073)]
 * Renamed intermediate variables: 
[ (eq(119,2),s(570))>>s(1074), (eq(119,2),s(575))>>s(1075), (eq(119,2),s(582))>>s(1076), (eq(119,2),aux(131))>>s(1077), (eq(119,2),aux(132))>>s(1078), (eq(119,2),aux(133))>>s(1079), (eq(119,2),aux(134))>>s(1080), (eq(119,2),aux(135))>>s(1081), (eq(119,2),s(583))>>s(1082), (eq(119,2),s(584))>>s(1083), (eq(119,2),s(585))>>s(1084), (eq(119,2),s(586))>>s(1085), (eq(119,2),s(587))>>s(1086), (eq(119,2),s(588))>>s(1087), (eq(119,2),s(589))>>s(1088), (eq(119,2),s(590))>>s(1089)]

#### Simplifying cost structure of CE 119 
 * Renamed intermediate variables: 
[ (eq(122,1),it(66))>>s(1090)]
 * Renamed intermediate variables: 
[ (eq(122,2),s(600))>>s(1091), (eq(122,2),aux(136))>>s(1092), (eq(122,2),aux(137))>>s(1093), (eq(122,2),aux(138))>>s(1094), (eq(122,2),aux(139))>>s(1095), (eq(122,2),aux(140))>>s(1096), (eq(122,2),aux(141))>>s(1097), (eq(122,2),aux(142))>>s(1098), (eq(122,2),s(614))>>s(1099), (eq(122,2),s(615))>>s(1100), (eq(122,2),s(616))>>s(1101), (eq(122,2),s(617))>>s(1102), (eq(122,2),s(618))>>s(1103), (eq(122,2),s(619))>>s(1104), (eq(122,2),s(620))>>s(1105), (eq(122,2),s(621))>>s(1106)]

#### Simplifying cost structure of CE 122 
 * Joined equivalent variables [aux(211),s(1074),s(1091)] into aux(211)
 * Joined equivalent variables [aux(212),s(1077),s(1092)] into aux(212)
 * Joined equivalent variables [aux(213),s(1078),s(1093)] into aux(213)
 * Joined equivalent variables [aux(215),s(1081),s(1097)] into aux(215)
 * Joined equivalent variables [aux(216),s(1076),s(1098)] into aux(216)
 * Joined equivalent variables [s(1073),s(1090)] into s(1073)
 * Joined equivalent variables [s(1086),s(1087)] into s(1086)
 * Joined equivalent variables [s(1088),s(1089)] into s(1088)
 * Joined equivalent variables [s(1084),s(1085)] into s(1084)
 * Joined equivalent variables [s(1082),s(1083)] into s(1082)
 * Joined equivalent variables [s(1103),s(1104)] into s(1103)
 * Joined equivalent variables [s(1105),s(1106)] into s(1105)
 * Joined equivalent variables [s(1099),s(1100)] into s(1099)
 * Joined equivalent variables [s(1101),s(1102)] into s(1101)
 * Joined equivalent variables [s(1082),s(1099)] into s(1082)
 * Joined equivalent variables [s(1084),s(1101)] into s(1084)
 * Renamed intermediate variables: 
[ (eq(126,1),it(66))>>s(1107)]
 * Renamed intermediate variables: 
[ (eq(126,2),s(642))>>s(1108), (eq(126,2),s(648))>>s(1109), (eq(126,2),aux(143))>>s(1110), (eq(126,2),aux(144))>>s(1111), (eq(126,2),aux(145))>>s(1112), (eq(126,2),aux(146))>>s(1113), (eq(126,2),aux(147))>>s(1114), (eq(126,2),aux(148))>>s(1115), (eq(126,2),s(649))>>s(1116), (eq(126,2),s(650))>>s(1117), (eq(126,2),s(651))>>s(1118), (eq(126,2),s(652))>>s(1119), (eq(126,2),s(653))>>s(1120), (eq(126,2),s(654))>>s(1121), (eq(126,2),s(655))>>s(1122), (eq(126,2),s(656))>>s(1123)]
 * Renamed intermediate variables: 
[ (eq(126,3),s(117))>>s(1124), (eq(126,3),aux(36))>>s(1125), (eq(126,3),aux(37))>>s(1126), (eq(126,3),aux(38))>>s(1127), (eq(126,3),s(101))>>s(1128), (eq(126,3),s(106))>>s(1129), (eq(126,3),s(107))>>s(1130), (eq(126,3),s(108))>>s(1131), (eq(126,3),s(109))>>s(1132), (eq(126,3),s(110))>>s(1133), (eq(126,3),s(111))>>s(1134), (eq(126,3),s(112))>>s(1135), (eq(126,3),s(113))>>s(1136), (eq(126,3),s(114))>>s(1137), (eq(126,3),s(120))>>s(1138), (eq(126,3),s(122))>>s(1139), (eq(126,3),s(128))>>s(1140), (eq(126,3),s(129))>>s(1141), (eq(126,3),s(130))>>s(1142), (eq(126,3),s(132))>>s(1143), (eq(126,3),s(134))>>s(1144), (eq(126,3),s(136))>>s(1145)]

#### Simplifying cost structure of CE 126 
 * Joined equivalent variables [aux(217),s(1111),s(1127)] into aux(217)
 * Renamed intermediate variables: 
[ (eq(129,1),it(66))>>s(1146)]
 * Renamed intermediate variables: 
[ (eq(129,2),aux(149))>>s(1147), (eq(129,2),aux(150))>>s(1148), (eq(129,2),aux(151))>>s(1149), (eq(129,2),aux(152))>>s(1150), (eq(129,2),aux(153))>>s(1151), (eq(129,2),aux(154))>>s(1152), (eq(129,2),aux(155))>>s(1153), (eq(129,2),aux(156))>>s(1154), (eq(129,2),s(685))>>s(1155), (eq(129,2),s(686))>>s(1156), (eq(129,2),s(687))>>s(1157), (eq(129,2),s(688))>>s(1158), (eq(129,2),s(689))>>s(1159), (eq(129,2),s(690))>>s(1160), (eq(129,2),s(691))>>s(1161), (eq(129,2),s(692))>>s(1162)]
 * Renamed intermediate variables: 
[ (eq(129,3),s(117))>>s(1163), (eq(129,3),aux(36))>>s(1164), (eq(129,3),aux(37))>>s(1165), (eq(129,3),aux(38))>>s(1166), (eq(129,3),s(101))>>s(1167), (eq(129,3),s(106))>>s(1168), (eq(129,3),s(107))>>s(1169), (eq(129,3),s(108))>>s(1170), (eq(129,3),s(109))>>s(1171), (eq(129,3),s(110))>>s(1172), (eq(129,3),s(111))>>s(1173), (eq(129,3),s(112))>>s(1174), (eq(129,3),s(113))>>s(1175), (eq(129,3),s(114))>>s(1176), (eq(129,3),s(120))>>s(1177), (eq(129,3),s(122))>>s(1178), (eq(129,3),s(128))>>s(1179), (eq(129,3),s(129))>>s(1180), (eq(129,3),s(130))>>s(1181), (eq(129,3),s(132))>>s(1182), (eq(129,3),s(134))>>s(1183), (eq(129,3),s(136))>>s(1184)]

#### Simplifying cost structure of CE 129 
 * Joined equivalent variables [aux(219),s(1148),s(1166)] into aux(219)
 * Joined equivalent variables [aux(218),s(1124)] into aux(218)
 * Joined equivalent variables [aux(220),s(1163)] into aux(220)
 * Joined equivalent variables [aux(221),s(1110),s(1147)] into aux(221)
 * Joined equivalent variables [aux(222),s(1125),s(1164)] into aux(222)
 * Joined equivalent variables [aux(223),aux(217),aux(219)] into aux(223)
 * Joined equivalent variables [aux(224),s(1112),s(1149)] into aux(224)
 * Joined equivalent variables [aux(225),aux(218),aux(220)] into aux(225)
 * Joined equivalent variables [aux(226),s(1115),s(1153)] into aux(226)
 * Joined equivalent variables [aux(227),s(1109),s(1154)] into aux(227)
 * Joined equivalent variables [s(1129),s(1131)] into s(1129)
 * Joined equivalent variables [s(1168),s(1170)] into s(1168)
 * Joined equivalent variables [s(1120),s(1121)] into s(1120)
 * Joined equivalent variables [s(1116),s(1117)] into s(1116)
 * Joined equivalent variables [s(1159),s(1160)] into s(1159)
 * Joined equivalent variables [s(1155),s(1156)] into s(1155)
 * Joined equivalent variables [s(1122),s(1123)] into s(1122)
 * Joined equivalent variables [s(1118),s(1119)] into s(1118)
 * Joined equivalent variables [s(1161),s(1162)] into s(1161)
 * Joined equivalent variables [s(1157),s(1158)] into s(1157)
 * Joined equivalent variables [s(1133),s(1134)] into s(1133)
 * Joined equivalent variables [s(1172),s(1173)] into s(1172)
 * Joined equivalent variables [s(1129),s(1168)] into s(1129)
 * Joined equivalent variables [s(1138),s(1177)] into s(1138)
 * Joined equivalent variables [s(1139),s(1178)] into s(1139)
 * Joined equivalent variables [s(1128),s(1167)] into s(1128)
 * Joined equivalent variables [s(1116),s(1155)] into s(1116)
 * Joined equivalent variables [s(1107),s(1146)] into s(1107)
 * Joined equivalent variables [s(1118),s(1157)] into s(1118)
 * Joined equivalent variables [s(1133),s(1172)] into s(1133)
 * Joined equivalent variables [s(1141),s(1180)] into s(1141)
 * Joined equivalent variables [s(1142),s(1181)] into s(1142)
 * Joined equivalent variables [s(1132),s(1171)] into s(1132)
 * Joined equivalent variables [s(1140),s(1179)] into s(1140)
 * Joined equivalent variables [s(1135),s(1136)] into s(1135)
 * Joined equivalent variables [s(1174),s(1175)] into s(1174)
 * Joined equivalent variables [s(1137),s(1176)] into s(1137)
 * Joined equivalent variables [s(1135),s(1174)] into s(1135)
 * Joined equivalent variables [s(1145),s(1184)] into s(1145)
 * Joined equivalent variables [s(1143),s(1182)] into s(1143)
 * Joined equivalent variables [s(1144),s(1183)] into s(1144)
 * Renamed intermediate variables: 
[ (eq(120,1),it(66))>>s(1185)]
 * Renamed intermediate variables: 
[ (eq(120,2),s(570))>>s(1186), (eq(120,2),s(575))>>s(1187), (eq(120,2),s(582))>>s(1188), (eq(120,2),aux(131))>>s(1189), (eq(120,2),aux(132))>>s(1190), (eq(120,2),aux(133))>>s(1191), (eq(120,2),aux(134))>>s(1192), (eq(120,2),aux(135))>>s(1193), (eq(120,2),s(583))>>s(1194), (eq(120,2),s(584))>>s(1195), (eq(120,2),s(585))>>s(1196), (eq(120,2),s(586))>>s(1197), (eq(120,2),s(587))>>s(1198), (eq(120,2),s(588))>>s(1199), (eq(120,2),s(589))>>s(1200), (eq(120,2),s(590))>>s(1201)]
 * Renamed intermediate variables: 
[ (eq(120,3),s(117))>>s(1202), (eq(120,3),aux(36))>>s(1203), (eq(120,3),aux(37))>>s(1204), (eq(120,3),aux(38))>>s(1205), (eq(120,3),s(101))>>s(1206), (eq(120,3),s(106))>>s(1207), (eq(120,3),s(107))>>s(1208), (eq(120,3),s(108))>>s(1209), (eq(120,3),s(109))>>s(1210), (eq(120,3),s(110))>>s(1211), (eq(120,3),s(111))>>s(1212), (eq(120,3),s(112))>>s(1213), (eq(120,3),s(113))>>s(1214), (eq(120,3),s(114))>>s(1215), (eq(120,3),s(120))>>s(1216), (eq(120,3),s(122))>>s(1217), (eq(120,3),s(128))>>s(1218), (eq(120,3),s(129))>>s(1219), (eq(120,3),s(130))>>s(1220), (eq(120,3),s(132))>>s(1221), (eq(120,3),s(134))>>s(1222), (eq(120,3),s(136))>>s(1223)]

#### Simplifying cost structure of CE 120 
 * Joined equivalent variables [aux(228),s(1189),s(1205)] into aux(228)
 * Joined equivalent variables [aux(230),s(1188),s(1203)] into aux(230)
 * Joined equivalent variables [s(1197),s(1206)] into s(1197)
 * Renamed intermediate variables: 
[ (eq(123,1),it(66))>>s(1224)]
 * Renamed intermediate variables: 
[ (eq(123,2),s(600))>>s(1225), (eq(123,2),aux(136))>>s(1226), (eq(123,2),aux(137))>>s(1227), (eq(123,2),aux(138))>>s(1228), (eq(123,2),aux(139))>>s(1229), (eq(123,2),aux(140))>>s(1230), (eq(123,2),aux(141))>>s(1231), (eq(123,2),aux(142))>>s(1232), (eq(123,2),s(614))>>s(1233), (eq(123,2),s(615))>>s(1234), (eq(123,2),s(616))>>s(1235), (eq(123,2),s(617))>>s(1236), (eq(123,2),s(618))>>s(1237), (eq(123,2),s(619))>>s(1238), (eq(123,2),s(620))>>s(1239), (eq(123,2),s(621))>>s(1240)]
 * Renamed intermediate variables: 
[ (eq(123,3),s(117))>>s(1241), (eq(123,3),aux(36))>>s(1242), (eq(123,3),aux(37))>>s(1243), (eq(123,3),aux(38))>>s(1244), (eq(123,3),s(101))>>s(1245), (eq(123,3),s(106))>>s(1246), (eq(123,3),s(107))>>s(1247), (eq(123,3),s(108))>>s(1248), (eq(123,3),s(109))>>s(1249), (eq(123,3),s(110))>>s(1250), (eq(123,3),s(111))>>s(1251), (eq(123,3),s(112))>>s(1252), (eq(123,3),s(113))>>s(1253), (eq(123,3),s(114))>>s(1254), (eq(123,3),s(120))>>s(1255), (eq(123,3),s(122))>>s(1256), (eq(123,3),s(128))>>s(1257), (eq(123,3),s(129))>>s(1258), (eq(123,3),s(130))>>s(1259), (eq(123,3),s(132))>>s(1260), (eq(123,3),s(134))>>s(1261), (eq(123,3),s(136))>>s(1262)]

#### Simplifying cost structure of CE 123 
 * Joined equivalent variables [aux(231),s(1226),s(1244)] into aux(231)
 * Joined equivalent variables [aux(233),s(1232),s(1242)] into aux(233)
 * Joined equivalent variables [s(1236),s(1245)] into s(1236)
 * Joined equivalent variables [aux(229),s(1202)] into aux(229)
 * Joined equivalent variables [aux(232),s(1241)] into aux(232)
 * Joined equivalent variables [aux(234),s(1186),s(1225)] into aux(234)
 * Joined equivalent variables [aux(235),aux(228),aux(231)] into aux(235)
 * Joined equivalent variables [aux(236),s(1190),s(1227)] into aux(236)
 * Joined equivalent variables [aux(237),aux(229),aux(232)] into aux(237)
 * Joined equivalent variables [aux(238),s(1193),s(1231)] into aux(238)
 * Joined equivalent variables [aux(239),aux(230),aux(233)] into aux(239)
 * Joined equivalent variables [s(1207),s(1209)] into s(1207)
 * Joined equivalent variables [s(1246),s(1248)] into s(1246)
 * Joined equivalent variables [s(1194),s(1195)] into s(1194)
 * Joined equivalent variables [s(1198),s(1199)] into s(1198)
 * Joined equivalent variables [s(1196),s(1197)] into s(1196)
 * Joined equivalent variables [s(1233),s(1234)] into s(1233)
 * Joined equivalent variables [s(1237),s(1238)] into s(1237)
 * Joined equivalent variables [s(1235),s(1236)] into s(1235)
 * Joined equivalent variables [s(1200),s(1201)] into s(1200)
 * Joined equivalent variables [s(1239),s(1240)] into s(1239)
 * Joined equivalent variables [s(1207),s(1246)] into s(1207)
 * Joined equivalent variables [s(1211),s(1212)] into s(1211)
 * Joined equivalent variables [s(1216),s(1255)] into s(1216)
 * Joined equivalent variables [s(1217),s(1256)] into s(1217)
 * Joined equivalent variables [s(1250),s(1251)] into s(1250)
 * Joined equivalent variables [s(1194),s(1233)] into s(1194)
 * Joined equivalent variables [s(1185),s(1224)] into s(1185)
 * Joined equivalent variables [s(1196),s(1235)] into s(1196)
 * Joined equivalent variables [s(1210),s(1249)] into s(1210)
 * Joined equivalent variables [s(1211),s(1250)] into s(1211)
 * Joined equivalent variables [s(1218),s(1257)] into s(1218)
 * Joined equivalent variables [s(1219),s(1258)] into s(1219)
 * Joined equivalent variables [s(1220),s(1259)] into s(1220)
 * Joined equivalent variables [s(1213),s(1214)] into s(1213)
 * Joined equivalent variables [s(1252),s(1253)] into s(1252)
 * Joined equivalent variables [s(1215),s(1254)] into s(1215)
 * Joined equivalent variables [s(1213),s(1252)] into s(1213)
 * Joined equivalent variables [s(1223),s(1262)] into s(1223)
 * Joined equivalent variables [s(1221),s(1260)] into s(1221)
 * Joined equivalent variables [s(1222),s(1261)] into s(1222)
 * Renamed intermediate variables: 
[ (eq(127,1),it(66))>>s(1263)]
 * Renamed intermediate variables: 
[ (eq(127,2),s(642))>>s(1264), (eq(127,2),s(648))>>s(1265), (eq(127,2),aux(143))>>s(1266), (eq(127,2),aux(144))>>s(1267), (eq(127,2),aux(145))>>s(1268), (eq(127,2),aux(146))>>s(1269), (eq(127,2),aux(147))>>s(1270), (eq(127,2),aux(148))>>s(1271), (eq(127,2),s(649))>>s(1272), (eq(127,2),s(650))>>s(1273), (eq(127,2),s(651))>>s(1274), (eq(127,2),s(652))>>s(1275), (eq(127,2),s(653))>>s(1276), (eq(127,2),s(654))>>s(1277), (eq(127,2),s(655))>>s(1278), (eq(127,2),s(656))>>s(1279)]
 * Renamed intermediate variables: 
[ (eq(127,3),s(137))>>s(1280), (eq(127,3),s(138))>>s(1281), (eq(127,3),s(139))>>s(1282), (eq(127,3),aux(39))>>s(1283), (eq(127,3),s(141))>>s(1284), (eq(127,3),s(142))>>s(1285), (eq(127,3),s(143))>>s(1286), (eq(127,3),s(144))>>s(1287), (eq(127,3),s(145))>>s(1288), (eq(127,3),s(146))>>s(1289), (eq(127,3),s(147))>>s(1290), (eq(127,3),s(148))>>s(1291), (eq(127,3),s(149))>>s(1292), (eq(127,3),s(150))>>s(1293), (eq(127,3),s(151))>>s(1294), (eq(127,3),s(152))>>s(1295), (eq(127,3),s(153))>>s(1296), (eq(127,3),s(154))>>s(1297), (eq(127,3),s(155))>>s(1298), (eq(127,3),s(156))>>s(1299), (eq(127,3),s(157))>>s(1300), (eq(127,3),s(158))>>s(1301)]

#### Simplifying cost structure of CE 127 
 * Joined equivalent variables [aux(240),s(1267),s(1281)] into aux(240)
 * Renamed intermediate variables: 
[ (eq(130,1),it(66))>>s(1302)]
 * Renamed intermediate variables: 
[ (eq(130,2),aux(149))>>s(1303), (eq(130,2),aux(150))>>s(1304), (eq(130,2),aux(151))>>s(1305), (eq(130,2),aux(152))>>s(1306), (eq(130,2),aux(153))>>s(1307), (eq(130,2),aux(154))>>s(1308), (eq(130,2),aux(155))>>s(1309), (eq(130,2),aux(156))>>s(1310), (eq(130,2),s(685))>>s(1311), (eq(130,2),s(686))>>s(1312), (eq(130,2),s(687))>>s(1313), (eq(130,2),s(688))>>s(1314), (eq(130,2),s(689))>>s(1315), (eq(130,2),s(690))>>s(1316), (eq(130,2),s(691))>>s(1317), (eq(130,2),s(692))>>s(1318)]
 * Renamed intermediate variables: 
[ (eq(130,3),s(137))>>s(1319), (eq(130,3),s(138))>>s(1320), (eq(130,3),s(139))>>s(1321), (eq(130,3),aux(39))>>s(1322), (eq(130,3),s(141))>>s(1323), (eq(130,3),s(142))>>s(1324), (eq(130,3),s(143))>>s(1325), (eq(130,3),s(144))>>s(1326), (eq(130,3),s(145))>>s(1327), (eq(130,3),s(146))>>s(1328), (eq(130,3),s(147))>>s(1329), (eq(130,3),s(148))>>s(1330), (eq(130,3),s(149))>>s(1331), (eq(130,3),s(150))>>s(1332), (eq(130,3),s(151))>>s(1333), (eq(130,3),s(152))>>s(1334), (eq(130,3),s(153))>>s(1335), (eq(130,3),s(154))>>s(1336), (eq(130,3),s(155))>>s(1337), (eq(130,3),s(156))>>s(1338), (eq(130,3),s(157))>>s(1339), (eq(130,3),s(158))>>s(1340)]

#### Simplifying cost structure of CE 130 
 * Joined equivalent variables [aux(242),s(1304),s(1320)] into aux(242)
 * Joined equivalent variables [aux(241),s(1282)] into aux(241)
 * Joined equivalent variables [aux(243),s(1321)] into aux(243)
 * Joined equivalent variables [aux(244),s(1266),s(1303)] into aux(244)
 * Joined equivalent variables [aux(245),s(1283),s(1322)] into aux(245)
 * Joined equivalent variables [aux(246),aux(240),aux(242)] into aux(246)
 * Joined equivalent variables [aux(247),s(1268),s(1305)] into aux(247)
 * Joined equivalent variables [aux(248),aux(241),aux(243)] into aux(248)
 * Joined equivalent variables [aux(249),s(1271),s(1309)] into aux(249)
 * Joined equivalent variables [aux(250),s(1265),s(1310)] into aux(250)
 * Joined equivalent variables [s(1286),s(1288)] into s(1286)
 * Joined equivalent variables [s(1325),s(1327)] into s(1325)
 * Joined equivalent variables [s(1276),s(1277)] into s(1276)
 * Joined equivalent variables [s(1272),s(1273)] into s(1272)
 * Joined equivalent variables [s(1315),s(1316)] into s(1315)
 * Joined equivalent variables [s(1311),s(1312)] into s(1311)
 * Joined equivalent variables [s(1278),s(1279)] into s(1278)
 * Joined equivalent variables [s(1274),s(1275)] into s(1274)
 * Joined equivalent variables [s(1317),s(1318)] into s(1317)
 * Joined equivalent variables [s(1313),s(1314)] into s(1313)
 * Joined equivalent variables [s(1291),s(1292)] into s(1291)
 * Joined equivalent variables [s(1330),s(1331)] into s(1330)
 * Joined equivalent variables [s(1285),s(1324)] into s(1285)
 * Joined equivalent variables [s(1286),s(1325)] into s(1286)
 * Joined equivalent variables [s(1287),s(1326)] into s(1287)
 * Joined equivalent variables [s(1284),s(1323)] into s(1284)
 * Joined equivalent variables [s(1272),s(1311)] into s(1272)
 * Joined equivalent variables [s(1263),s(1302)] into s(1263)
 * Joined equivalent variables [s(1274),s(1313)] into s(1274)
 * Joined equivalent variables [s(1291),s(1330)] into s(1291)
 * Joined equivalent variables [s(1294),s(1333)] into s(1294)
 * Joined equivalent variables [s(1295),s(1334)] into s(1295)
 * Joined equivalent variables [s(1290),s(1329)] into s(1290)
 * Joined equivalent variables [s(1293),s(1332)] into s(1293)
 * Joined equivalent variables [s(1296),s(1298)] into s(1296)
 * Joined equivalent variables [s(1335),s(1337)] into s(1335)
 * Joined equivalent variables [s(1300),s(1339)] into s(1300)
 * Joined equivalent variables [s(1296),s(1335)] into s(1296)
 * Joined equivalent variables [s(1301),s(1340)] into s(1301)
 * Joined equivalent variables [s(1297),s(1336)] into s(1297)
 * Joined equivalent variables [s(1299),s(1338)] into s(1299)
 * Renamed intermediate variables: 
[ (eq(121,1),it(66))>>s(1341)]
 * Renamed intermediate variables: 
[ (eq(121,2),s(570))>>s(1342), (eq(121,2),s(575))>>s(1343), (eq(121,2),s(582))>>s(1344), (eq(121,2),aux(131))>>s(1345), (eq(121,2),aux(132))>>s(1346), (eq(121,2),aux(133))>>s(1347), (eq(121,2),aux(134))>>s(1348), (eq(121,2),aux(135))>>s(1349), (eq(121,2),s(583))>>s(1350), (eq(121,2),s(584))>>s(1351), (eq(121,2),s(585))>>s(1352), (eq(121,2),s(586))>>s(1353), (eq(121,2),s(587))>>s(1354), (eq(121,2),s(588))>>s(1355), (eq(121,2),s(589))>>s(1356), (eq(121,2),s(590))>>s(1357)]
 * Renamed intermediate variables: 
[ (eq(121,3),s(137))>>s(1358), (eq(121,3),s(138))>>s(1359), (eq(121,3),s(139))>>s(1360), (eq(121,3),aux(39))>>s(1361), (eq(121,3),s(141))>>s(1362), (eq(121,3),s(142))>>s(1363), (eq(121,3),s(143))>>s(1364), (eq(121,3),s(144))>>s(1365), (eq(121,3),s(145))>>s(1366), (eq(121,3),s(146))>>s(1367), (eq(121,3),s(147))>>s(1368), (eq(121,3),s(148))>>s(1369), (eq(121,3),s(149))>>s(1370), (eq(121,3),s(150))>>s(1371), (eq(121,3),s(151))>>s(1372), (eq(121,3),s(152))>>s(1373), (eq(121,3),s(153))>>s(1374), (eq(121,3),s(154))>>s(1375), (eq(121,3),s(155))>>s(1376), (eq(121,3),s(156))>>s(1377), (eq(121,3),s(157))>>s(1378), (eq(121,3),s(158))>>s(1379)]

#### Simplifying cost structure of CE 121 
 * Joined equivalent variables [aux(251),s(1345),s(1359)] into aux(251)
 * Joined equivalent variables [aux(253),s(1344),s(1361)] into aux(253)
 * Joined equivalent variables [s(1353),s(1362)] into s(1353)
 * Renamed intermediate variables: 
[ (eq(124,1),it(66))>>s(1380)]
 * Renamed intermediate variables: 
[ (eq(124,2),s(600))>>s(1381), (eq(124,2),aux(136))>>s(1382), (eq(124,2),aux(137))>>s(1383), (eq(124,2),aux(138))>>s(1384), (eq(124,2),aux(139))>>s(1385), (eq(124,2),aux(140))>>s(1386), (eq(124,2),aux(141))>>s(1387), (eq(124,2),aux(142))>>s(1388), (eq(124,2),s(614))>>s(1389), (eq(124,2),s(615))>>s(1390), (eq(124,2),s(616))>>s(1391), (eq(124,2),s(617))>>s(1392), (eq(124,2),s(618))>>s(1393), (eq(124,2),s(619))>>s(1394), (eq(124,2),s(620))>>s(1395), (eq(124,2),s(621))>>s(1396)]
 * Renamed intermediate variables: 
[ (eq(124,3),s(137))>>s(1397), (eq(124,3),s(138))>>s(1398), (eq(124,3),s(139))>>s(1399), (eq(124,3),aux(39))>>s(1400), (eq(124,3),s(141))>>s(1401), (eq(124,3),s(142))>>s(1402), (eq(124,3),s(143))>>s(1403), (eq(124,3),s(144))>>s(1404), (eq(124,3),s(145))>>s(1405), (eq(124,3),s(146))>>s(1406), (eq(124,3),s(147))>>s(1407), (eq(124,3),s(148))>>s(1408), (eq(124,3),s(149))>>s(1409), (eq(124,3),s(150))>>s(1410), (eq(124,3),s(151))>>s(1411), (eq(124,3),s(152))>>s(1412), (eq(124,3),s(153))>>s(1413), (eq(124,3),s(154))>>s(1414), (eq(124,3),s(155))>>s(1415), (eq(124,3),s(156))>>s(1416), (eq(124,3),s(157))>>s(1417), (eq(124,3),s(158))>>s(1418)]

#### Simplifying cost structure of CE 124 
 * Joined equivalent variables [aux(254),s(1382),s(1398)] into aux(254)
 * Joined equivalent variables [aux(256),s(1388),s(1400)] into aux(256)
 * Joined equivalent variables [s(1392),s(1401)] into s(1392)
 * Joined equivalent variables [aux(252),s(1360)] into aux(252)
 * Joined equivalent variables [aux(255),s(1399)] into aux(255)
 * Joined equivalent variables [aux(257),s(1342),s(1381)] into aux(257)
 * Joined equivalent variables [aux(258),aux(251),aux(254)] into aux(258)
 * Joined equivalent variables [aux(259),s(1346),s(1383)] into aux(259)
 * Joined equivalent variables [aux(260),aux(252),aux(255)] into aux(260)
 * Joined equivalent variables [aux(261),s(1349),s(1387)] into aux(261)
 * Joined equivalent variables [aux(262),aux(253),aux(256)] into aux(262)
 * Joined equivalent variables [s(1364),s(1366)] into s(1364)
 * Joined equivalent variables [s(1403),s(1405)] into s(1403)
 * Joined equivalent variables [s(1350),s(1351)] into s(1350)
 * Joined equivalent variables [s(1354),s(1355)] into s(1354)
 * Joined equivalent variables [s(1352),s(1353)] into s(1352)
 * Joined equivalent variables [s(1389),s(1390)] into s(1389)
 * Joined equivalent variables [s(1393),s(1394)] into s(1393)
 * Joined equivalent variables [s(1391),s(1392)] into s(1391)
 * Joined equivalent variables [s(1356),s(1357)] into s(1356)
 * Joined equivalent variables [s(1395),s(1396)] into s(1395)
 * Joined equivalent variables [s(1363),s(1402)] into s(1363)
 * Joined equivalent variables [s(1364),s(1403)] into s(1364)
 * Joined equivalent variables [s(1365),s(1404)] into s(1365)
 * Joined equivalent variables [s(1369),s(1370)] into s(1369)
 * Joined equivalent variables [s(1408),s(1409)] into s(1408)
 * Joined equivalent variables [s(1350),s(1389)] into s(1350)
 * Joined equivalent variables [s(1341),s(1380)] into s(1341)
 * Joined equivalent variables [s(1352),s(1391)] into s(1352)
 * Joined equivalent variables [s(1368),s(1407)] into s(1368)
 * Joined equivalent variables [s(1369),s(1408)] into s(1369)
 * Joined equivalent variables [s(1371),s(1410)] into s(1371)
 * Joined equivalent variables [s(1372),s(1411)] into s(1372)
 * Joined equivalent variables [s(1373),s(1412)] into s(1373)
 * Joined equivalent variables [s(1374),s(1376)] into s(1374)
 * Joined equivalent variables [s(1413),s(1415)] into s(1413)
 * Joined equivalent variables [s(1378),s(1417)] into s(1378)
 * Joined equivalent variables [s(1374),s(1413)] into s(1374)
 * Joined equivalent variables [s(1379),s(1418)] into s(1379)
 * Joined equivalent variables [s(1375),s(1414)] into s(1375)
 * Joined equivalent variables [s(1377),s(1416)] into s(1377)

#### Cost of chains of subtract(A,B,C,D,E,F,G):
* Chain [112]: 80*s(715)+80*s(717)+128*s(719)+128*s(721)+33
  Such that:aux(159) =< 1
aux(160) =< 2
aux(161) =< B
aux(162) =< 2*B
s(715) =< aux(160)
s(717) =< aux(160)
s(715) =< aux(161)
s(719) =< aux(160)
s(721) =< aux(160)
s(719) =< aux(159)
s(721) =< aux(159)
s(719) =< aux(161)
s(719) =< aux(162)

  with precondition: [A=2,D=0,E=1,F=0,B>=1,C>=0,G>=0] 

* Chain [111]: 80*s(747)+528*s(749)+128*s(751)+128*s(753)+240*s(766)+80*s(768)+33
  Such that:aux(167) =< 1
aux(168) =< 2
aux(169) =< B
aux(170) =< 2*B
s(749) =< aux(168)
s(760) =< aux(169)
s(763) =< s(749)*aux(169)
s(764) =< s(749)*s(760)
s(766) =< s(764)
s(768) =< s(763)
s(747) =< aux(168)
s(747) =< aux(169)
s(751) =< aux(168)
s(753) =< aux(168)
s(751) =< aux(167)
s(753) =< aux(167)
s(751) =< aux(169)
s(751) =< aux(170)

  with precondition: [A=2,D=0,E=2,B>=1,C>=0,F>=1,G>=0] 

* Chain [110]: 80*s(823)+324*s(825)+128*s(827)+128*s(829)+120*s(841)+40*s(843)+33
  Such that:aux(175) =< 1
aux(176) =< 2
aux(177) =< B
aux(178) =< 2*B
s(825) =< aux(176)
s(835) =< aux(177)
s(838) =< s(825)*aux(177)
s(839) =< s(825)*s(835)
s(841) =< s(839)
s(843) =< s(838)
s(823) =< aux(176)
s(823) =< aux(177)
s(827) =< aux(176)
s(829) =< aux(176)
s(827) =< aux(175)
s(829) =< aux(175)
s(827) =< aux(177)
s(827) =< aux(178)

  with precondition: [A=2,D=0,E=3,B>=2,C>=0,F>=2,G>=0] 

* Chain [109]: 80*s(881)+80*s(883)+64*s(885)+64*s(887)+64*s(901)+64*s(903)+33
  Such that:aux(180) =< 1
aux(181) =< 2
aux(182) =< A
aux(183) =< B
aux(184) =< 2*B
s(881) =< aux(181)
s(883) =< aux(181)
s(881) =< aux(183)
s(885) =< aux(182)
s(887) =< aux(182)
s(885) =< aux(180)
s(887) =< aux(180)
s(885) =< aux(183)
s(885) =< aux(184)
s(885) =< aux(181)
s(887) =< aux(181)
s(901) =< aux(182)
s(903) =< aux(182)
s(901) =< aux(180)
s(903) =< aux(180)
s(901) =< aux(183)
s(901) =< aux(184)

  with precondition: [D=0,E=1,F=0,A>=3,B>=1,C>=0,G>=0] 

* Chain [108]: 80*s(913)+80*s(915)+64*s(917)+64*s(919)+448*s(925)+240*s(932)+80*s(934)+64*s(955)+64*s(957)+33
  Such that:aux(190) =< 1
aux(191) =< 2
aux(192) =< A
aux(193) =< B
aux(194) =< 2*B
s(925) =< aux(192)
s(926) =< aux(193)
s(929) =< s(925)*aux(193)
s(930) =< s(925)*s(926)
s(932) =< s(930)
s(934) =< s(929)
s(913) =< aux(191)
s(915) =< aux(191)
s(913) =< aux(193)
s(917) =< aux(192)
s(919) =< aux(192)
s(917) =< aux(190)
s(919) =< aux(190)
s(917) =< aux(193)
s(917) =< aux(194)
s(917) =< aux(191)
s(919) =< aux(191)
s(955) =< aux(192)
s(957) =< aux(192)
s(955) =< aux(190)
s(957) =< aux(190)
s(955) =< aux(193)
s(955) =< aux(194)

  with precondition: [D=0,B>=1,C>=0,E>=2,F>=1,G>=0,A>=E+1] 

* Chain [107]: 80*s(989)+80*s(991)+64*s(993)+64*s(995)+244*s(1000)+120*s(1007)+40*s(1009)+64*s(1022)+64*s(1024)+33
  Such that:aux(200) =< 1
aux(201) =< 2
aux(202) =< A
aux(203) =< B
aux(204) =< 2*B
s(1000) =< aux(202)
s(1001) =< aux(203)
s(1004) =< s(1000)*aux(203)
s(1005) =< s(1000)*s(1001)
s(1007) =< s(1005)
s(1009) =< s(1004)
s(989) =< aux(201)
s(991) =< aux(201)
s(989) =< aux(203)
s(993) =< aux(202)
s(995) =< aux(202)
s(993) =< aux(200)
s(995) =< aux(200)
s(993) =< aux(203)
s(993) =< aux(204)
s(993) =< aux(201)
s(995) =< aux(201)
s(1022) =< aux(202)
s(1024) =< aux(202)
s(1022) =< aux(200)
s(1024) =< aux(200)
s(1022) =< aux(203)
s(1022) =< aux(204)

  with precondition: [D=0,B>=2,C>=0,E>=3,F>=2,G>=0,2*A>=E+3] 

* Chain [106]: 16*s(1039)+80*s(1048)+80*s(1050)+64*s(1052)+64*s(1054)+64*s(1069)+64*s(1071)+33
  Such that:s(1040) =< 2*D+2
aux(205) =< A
aux(206) =< B
aux(207) =< 2*B
aux(208) =< D
aux(209) =< D+1
aux(210) =< D+2
s(1039) =< aux(208)
s(1048) =< aux(210)
s(1050) =< aux(210)
s(1048) =< aux(206)
s(1052) =< aux(205)
s(1054) =< aux(205)
s(1052) =< aux(209)
s(1054) =< aux(209)
s(1052) =< aux(206)
s(1052) =< aux(207)
s(1052) =< s(1040)
s(1054) =< s(1040)
s(1069) =< aux(205)
s(1071) =< aux(205)
s(1069) =< aux(209)
s(1071) =< aux(209)
s(1069) =< aux(206)
s(1069) =< aux(207)

  with precondition: [E=1,F=0,B>=1,C>=0,D>=1,G>=0,A>=2*D+3] 

* Chain [105]: 16*s(1073)+80*s(1082)+80*s(1084)+64*s(1086)+64*s(1088)+64*s(1103)+64*s(1105)+33
  Such that:s(1075) =< 2*D+2
aux(211) =< A
aux(212) =< B
aux(213) =< 2*B
aux(214) =< D
aux(215) =< D+1
aux(216) =< D+2
s(1073) =< aux(214)
s(1082) =< aux(216)
s(1084) =< aux(216)
s(1082) =< aux(212)
s(1086) =< aux(211)
s(1088) =< aux(211)
s(1086) =< aux(215)
s(1088) =< aux(215)
s(1086) =< aux(212)
s(1086) =< aux(213)
s(1086) =< s(1075)
s(1088) =< s(1075)
s(1103) =< aux(211)
s(1105) =< aux(211)
s(1103) =< aux(215)
s(1105) =< aux(215)
s(1103) =< aux(212)
s(1103) =< aux(213)

  with precondition: [E=1,F=0,B>=1,C>=0,D>=1,G>=0,2*D+2>=A,A>=D+2] 

* Chain [104]: 16*s(1107)+80*s(1116)+80*s(1118)+64*s(1120)+64*s(1122)+448*s(1128)+240*s(1135)+80*s(1137)+80*s(1143)+40*s(1144)+40*s(1145)+64*s(1159)+64*s(1161)+33
  Such that:s(1108) =< 2*D+2
aux(221) =< A
aux(222) =< A-D
aux(223) =< B
aux(224) =< 2*B
aux(225) =< D
aux(226) =< D+1
aux(227) =< D+2
s(1107) =< aux(225)
s(1128) =< aux(222)
s(1129) =< aux(223)
s(1132) =< s(1128)*aux(223)
s(1133) =< s(1128)*s(1129)
s(1135) =< s(1133)
s(1137) =< s(1132)
s(1138) =< aux(223)-2
s(1138) =< aux(225)
s(1139) =< aux(225)
s(1140) =< s(1128)*aux(225)
s(1141) =< s(1128)*s(1138)
s(1142) =< s(1128)*s(1139)
s(1143) =< s(1141)
s(1144) =< s(1142)
s(1145) =< s(1140)
s(1116) =< aux(227)
s(1118) =< aux(227)
s(1116) =< aux(223)
s(1120) =< aux(221)
s(1122) =< aux(221)
s(1120) =< aux(226)
s(1122) =< aux(226)
s(1120) =< aux(223)
s(1120) =< aux(224)
s(1120) =< s(1108)
s(1122) =< s(1108)
s(1159) =< aux(221)
s(1161) =< aux(221)
s(1159) =< aux(226)
s(1161) =< aux(226)
s(1159) =< aux(223)
s(1159) =< aux(224)

  with precondition: [B>=1,C>=0,D>=1,E>=2,F>=1,G>=0,A>=2*D+3,A>=D+E+1] 

* Chain [103]: 16*s(1185)+80*s(1194)+528*s(1196)+64*s(1198)+64*s(1200)+240*s(1213)+80*s(1215)+80*s(1221)+40*s(1222)+40*s(1223)+64*s(1237)+64*s(1239)+33
  Such that:s(1187) =< 2*D+2
aux(234) =< A
aux(235) =< B
aux(236) =< 2*B
aux(237) =< D
aux(238) =< D+1
aux(239) =< D+2
s(1185) =< aux(237)
s(1196) =< aux(239)
s(1207) =< aux(235)
s(1210) =< s(1196)*aux(235)
s(1211) =< s(1196)*s(1207)
s(1213) =< s(1211)
s(1215) =< s(1210)
s(1216) =< aux(235)-2
s(1216) =< aux(237)
s(1217) =< aux(237)
s(1218) =< s(1196)*aux(237)
s(1219) =< s(1196)*s(1216)
s(1220) =< s(1196)*s(1217)
s(1221) =< s(1219)
s(1222) =< s(1220)
s(1223) =< s(1218)
s(1194) =< aux(239)
s(1194) =< aux(235)
s(1198) =< aux(234)
s(1200) =< aux(234)
s(1198) =< aux(238)
s(1200) =< aux(238)
s(1198) =< aux(235)
s(1198) =< aux(236)
s(1198) =< s(1187)
s(1200) =< s(1187)
s(1237) =< aux(234)
s(1239) =< aux(234)
s(1237) =< aux(238)
s(1239) =< aux(238)
s(1237) =< aux(235)
s(1237) =< aux(236)

  with precondition: [B>=1,C>=0,D>=1,E>=2,F>=1,G>=0,2*D+2>=A,A>=D+2,D+2>=E] 

* Chain [102]: 16*s(1263)+80*s(1272)+80*s(1274)+64*s(1276)+64*s(1278)+244*s(1284)+120*s(1296)+80*s(1297)+40*s(1299)+40*s(1300)+40*s(1301)+64*s(1315)+64*s(1317)+33
  Such that:s(1264) =< 2*D+2
aux(244) =< A
aux(245) =< A-D
aux(246) =< B
aux(247) =< 2*B
aux(248) =< D
aux(249) =< D+1
aux(250) =< D+2
s(1263) =< aux(248)
s(1284) =< aux(245)
s(1285) =< aux(246)-2
s(1286) =< aux(246)
s(1290) =< s(1284)*aux(246)
s(1285) =< aux(248)
s(1287) =< aux(248)
s(1291) =< s(1284)*s(1286)
s(1293) =< s(1284)*aux(248)
s(1294) =< s(1284)*s(1285)
s(1295) =< s(1284)*s(1287)
s(1296) =< s(1291)
s(1297) =< s(1294)
s(1299) =< s(1295)
s(1300) =< s(1290)
s(1301) =< s(1293)
s(1272) =< aux(250)
s(1274) =< aux(250)
s(1272) =< aux(246)
s(1276) =< aux(244)
s(1278) =< aux(244)
s(1276) =< aux(249)
s(1278) =< aux(249)
s(1276) =< aux(246)
s(1276) =< aux(247)
s(1276) =< s(1264)
s(1278) =< s(1264)
s(1315) =< aux(244)
s(1317) =< aux(244)
s(1315) =< aux(249)
s(1317) =< aux(249)
s(1315) =< aux(246)
s(1315) =< aux(247)

  with precondition: [C>=0,D>=1,E>=3,G>=0,A>=2*D+3,B>=D+2,F>=D+2,2*A>=2*D+E+3] 

* Chain [101]: 16*s(1341)+80*s(1350)+324*s(1352)+64*s(1354)+64*s(1356)+120*s(1374)+80*s(1375)+40*s(1377)+40*s(1378)+40*s(1379)+64*s(1393)+64*s(1395)+33
  Such that:s(1343) =< 2*D+2
aux(257) =< A
aux(258) =< B
aux(259) =< 2*B
aux(260) =< D
aux(261) =< D+1
aux(262) =< D+2
s(1341) =< aux(260)
s(1352) =< aux(262)
s(1363) =< aux(258)-2
s(1364) =< aux(258)
s(1368) =< s(1352)*aux(258)
s(1363) =< aux(260)
s(1365) =< aux(260)
s(1369) =< s(1352)*s(1364)
s(1371) =< s(1352)*aux(260)
s(1372) =< s(1352)*s(1363)
s(1373) =< s(1352)*s(1365)
s(1374) =< s(1369)
s(1375) =< s(1372)
s(1377) =< s(1373)
s(1378) =< s(1368)
s(1379) =< s(1371)
s(1350) =< aux(262)
s(1350) =< aux(258)
s(1354) =< aux(257)
s(1356) =< aux(257)
s(1354) =< aux(261)
s(1356) =< aux(261)
s(1354) =< aux(258)
s(1354) =< aux(259)
s(1354) =< s(1343)
s(1356) =< s(1343)
s(1393) =< aux(257)
s(1395) =< aux(257)
s(1393) =< aux(261)
s(1395) =< aux(261)
s(1393) =< aux(258)
s(1393) =< aux(259)

  with precondition: [C>=0,D>=1,E>=3,G>=0,2*D+2>=A,A>=D+2,B>=D+2,F>=D+2,2*D+3>=E] 


#### Simplifying cost structure of CE 131 

#### Computing cost of phase [113] 
 * Renamed intermediate variables: 
[ (eq(143,1),s(1343))>>s(1419), (eq(143,1),aux(257))>>s(1420), (eq(143,1),aux(258))>>s(1421), (eq(143,1),aux(259))>>s(1422), (eq(143,1),aux(260))>>s(1423), (eq(143,1),aux(261))>>s(1424), (eq(143,1),aux(262))>>s(1425), (eq(143,1),s(1341))>>s(1426), (eq(143,1),s(1352))>>s(1427), (eq(143,1),s(1363))>>s(1428), (eq(143,1),s(1364))>>s(1429), (eq(143,1),s(1368))>>s(1430), (eq(143,1),s(1365))>>s(1431), (eq(143,1),s(1369))>>s(1432), (eq(143,1),s(1371))>>s(1433), (eq(143,1),s(1372))>>s(1434), (eq(143,1),s(1373))>>s(1435), (eq(143,1),s(1374))>>s(1436), (eq(143,1),s(1375))>>s(1437), (eq(143,1),s(1377))>>s(1438), (eq(143,1),s(1378))>>s(1439), (eq(143,1),s(1379))>>s(1440), (eq(143,1),s(1350))>>s(1441), (eq(143,1),s(1354))>>s(1442), (eq(143,1),s(1356))>>s(1443), (eq(143,1),s(1393))>>s(1444), (eq(143,1),s(1395))>>s(1445)]

#### Simplifying cost structure of CE 143 
 * Renamed intermediate variables: 
[ (it(113),s(1420))>>s(1446), (it(113),s(1421))>>s(1447), (it(113),s(1422))>>s(1448), (it(113),s(1423))>>s(1449), (it(113),s(1424))>>s(1450), (it(113),s(1425))>>s(1451), (it(113),s(1419))>>s(1452), (it(113),s(1426))>>s(1453), (it(113),s(1427))>>s(1454), (it(113),s(1428))>>s(1455), (it(113),s(1429))>>s(1456), (it(113),s(1430))>>s(1457), (it(113),s(1431))>>s(1458), (it(113),s(1432))>>s(1459), (it(113),s(1433))>>s(1460), (it(113),s(1434))>>s(1461), (it(113),s(1435))>>s(1462), (it(113),s(1436))>>s(1463), (it(113),s(1437))>>s(1464), (it(113),s(1438))>>s(1465), (it(113),s(1439))>>s(1466), (it(113),s(1440))>>s(1467), (it(113),s(1441))>>s(1468), (it(113),s(1442))>>s(1469), (it(113),s(1443))>>s(1470), (it(113),s(1444))>>s(1471), (it(113),s(1445))>>s(1472)]

#### Cost of loops [113] 

 * loop 113:echelon_helper(A,B,C,D,E,F,G,H,I,J) -> [echelon_helper(A',B',C',D',E',F',G',H',I',J')] 
16*s(1453)+324*s(1454)+120*s(1463)+80*s(1464)+40*s(1465)+40*s(1466)+40*s(1467)+80*s(1468)+64*s(1469)+64*s(1470)+64*s(1471)+64*s(1472)+40
  Such that:s(1446) =< A
s(1447) =< B
s(1448) =< 2*B
s(1449) =< D
s(1450) =< D+1
s(1451) =< D+2
s(1452) =< 2*D+2
s(1453) =< s(1449)
s(1454) =< s(1451)
s(1455) =< s(1447)-2
s(1456) =< s(1447)
s(1457) =< s(1454)*s(1447)
s(1455) =< s(1449)
s(1458) =< s(1449)
s(1459) =< s(1454)*s(1456)
s(1460) =< s(1454)*s(1449)
s(1461) =< s(1454)*s(1455)
s(1462) =< s(1454)*s(1458)
s(1463) =< s(1459)
s(1464) =< s(1461)
s(1465) =< s(1462)
s(1466) =< s(1457)
s(1467) =< s(1460)
s(1468) =< s(1451)
s(1468) =< s(1447)
s(1469) =< s(1446)
s(1470) =< s(1446)
s(1469) =< s(1450)
s(1470) =< s(1450)
s(1469) =< s(1447)
s(1469) =< s(1448)
s(1469) =< s(1452)
s(1470) =< s(1452)
s(1471) =< s(1446)
s(1472) =< s(1446)
s(1471) =< s(1450)
s(1472) =< s(1450)
s(1471) =< s(1447)
s(1471) =< s(1448)

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [s(1447)=<B,s(1449)=<D]
* Psum in Loop 113: [it(113)=<1,s(1488)=<A,s(1486)=<B,s(1485)=<2*B,s(1496)=<D,s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2]

###### Computing max_min for s(1447)=<B  
   - Applying max/min strategy 
     - Loop 113  increases the expression by [-D+B'-2,B'-D'-1] 
 * Adding constraints:[s(1447)=<aux(263)+aux(264),aux(263)=<B] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [s(1449)=<D]
* Psum in Loop 113: [it(113)=<1,s(1488)=<A,s(1486)=<B,s(1485)=<2*B,s(1496)=<D,s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2,aux(264)=< -D+B'-2,aux(264)=<B'-D'-1]

###### Computing max_min for s(1449)=<D  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(1449)=<A+E-4,s(1449)=<D+E-2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 113: [it(113)=<1,s(1488)=<A,s(1486)=<B,s(1485)=<2*B,s(1496)=<D,s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2,aux(264)=< -D+B'-2,aux(264)=<B'-D'-1]

###### Computing sum for it(113)=<1  in Loop 113 
   - Applying inductive sum strategy 
     - head Candidate: E-1 
     - head Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E-1 
     - tail Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(113)=<E-1,it(113)=<E-1,it(113)=<E-E',it(113)=<E-E'] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 113: [s(1488)=<A,s(1486)=<B,s(1485)=<2*B,s(1496)=<D,s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2,aux(264)=< -D+B'-2,aux(264)=<B'-D'-1]

###### Computing sum for s(1488)=<A  in Loop 113 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(265)=<A] 
 * Adding constraints: [s(1488)=<it(113)*aux(265)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(265)=<A]
* Psum in Loop 113: [s(1486)=<B,s(1485)=<2*B,s(1496)=<D,s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2,aux(264)=< -D+B'-2,aux(264)=<B'-D'-1]

###### Computing max_min for aux(265)=<A  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(265)=<2*D+2*E-2,aux(265)=<A+D+2*E-5] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 113: [s(1486)=<B,s(1485)=<2*B,s(1496)=<D,s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2,aux(264)=< -D+B'-2,aux(264)=<B'-D'-1]

###### Computing sum for s(1486)=<B  in Loop 113 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(266)=<B] 
 * Adding constraints: [s(1486)=<it(113)*aux(266)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(266)=<B]
* Psum in Loop 113: [s(1485)=<2*B,s(1496)=<D,s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2,aux(264)=< -D+B'-2,aux(264)=<B'-D'-1]

###### Computing max_min for aux(266)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(266)=<s(1447)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 113: [s(1485)=<2*B,s(1496)=<D,s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2,aux(264)=< -D+B'-2,aux(264)=<B'-D'-1]

###### Computing sum for s(1485)=<2*B  in Loop 113 
   - Found a solution using cacheing 
 * Adding constraints: [s(1485)=<aux(267)*2,aux(267)=<it(113)*aux(266)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 113: [s(1496)=<D,s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2,aux(264)=< -D+B'-2,aux(264)=<B'-D'-1]

###### Computing sum for s(1496)=<D  in Loop 113 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(268)=<D] 
 * Adding constraints: [s(1496)=<it(113)*aux(268)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(268)=<D]
* Psum in Loop 113: [s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2,aux(264)=< -D+B'-2,aux(264)=<B'-D'-1]

###### Computing max_min for aux(268)=<D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(268)=<s(1449)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 113: [s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2,aux(264)=< -D+B'-2,aux(264)=<B'-D'-1]

###### Computing sum for s(1487)=<D+1  in Loop 113 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(269)=<D+1] 
 * Adding constraints: [s(1487)=<it(113)*aux(269)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(269)=<D+1]
* Psum in Loop 113: [s(1490)=<D+2,s(1489)=<2*D+2,aux(264)=< -D+B'-2,aux(264)=<B'-D'-1]

###### Computing max_min for aux(269)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(269)=<s(1449)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 113: [s(1490)=<D+2,s(1489)=<2*D+2,aux(264)=< -D+B'-2,aux(264)=<B'-D'-1]

###### Computing sum for s(1490)=<D+2  in Loop 113 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(270)=<D+2] 
 * Adding constraints: [s(1490)=<it(113)*aux(270)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(270)=<D+2]
* Psum in Loop 113: [s(1489)=<2*D+2,aux(264)=< -D+B'-2,aux(264)=<B'-D'-1]

###### Computing max_min for aux(270)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(270)=<s(1449)+2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 113: [s(1489)=<2*D+2,aux(264)=< -D+B'-2,aux(264)=<B'-D'-1]

###### Computing sum for s(1489)=<2*D+2  in Loop 113 
   - Found a solution using cacheing 
 * Adding constraints: [s(1489)=<aux(271)*2,aux(271)=<it(113)*aux(269)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 113: [aux(264)=< -D+B'-2,aux(264)=<B'-D'-1]

###### Computing sum for aux(264)=< -D+B'-2  in Loop 113 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [] 
 * Adding constraints: [aux(264)=<it(113)*aux(272)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 113: [aux(264)=<B'-D'-1]

###### Computing sum for aux(264)=<B'-D'-1  in Loop 113 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [] 
 * Adding constraints: [aux(264)=<it(113)*aux(273)] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [113] 

#### Simplifying cost structure of phase [113] 
 * Joined equivalent variables [aux(268),s(1458)] into aux(268)
 * Joined equivalent variables [aux(271),s(1487)] into aux(271)
 * Joined equivalent variables [aux(266),s(1456)] into aux(266)
 * Joined equivalent variables [aux(267),s(1486)] into aux(267)

#### Cost of phase [113]:echelon_helper(A,B,C,D,E,F,G,H,I,J) -> [echelon_helper(A',B',C',D',E',F',G',H',I',J')] 
40*it(113)+16*s(1473)+324*s(1474)+120*s(1475)+80*s(1476)+40*s(1477)+40*s(1478)+40*s(1479)+80*s(1480)+64*s(1481)+64*s(1482)+64*s(1483)+64*s(1484)+0
  Such that:aux(265) =< A+D+2*E
s(1449) =< A+E
s(1449) =< D+E
aux(265) =< 2*D+2*E
it(113) =< E
it(113) =< E-E'
aux(270) =< s(1449)+2
aux(269) =< s(1449)+1
aux(268) =< s(1449)
s(1488) =< it(113)*aux(265)
aux(271) =< it(113)*aux(269)
s(1490) =< it(113)*aux(270)
s(1496) =< it(113)*aux(268)
s(1489) =< aux(271)*2
s(1473) =< s(1496)
s(1474) =< s(1490)
s(1455) =< s(1449)
s(1491) =< s(1474)*s(1449)
s(1494) =< s(1474)*s(1455)
s(1493) =< s(1474)*aux(268)
s(1476) =< s(1494)
s(1477) =< s(1493)
s(1479) =< s(1491)
s(1480) =< s(1490)
s(1481) =< s(1488)
s(1482) =< s(1488)
s(1481) =< aux(271)
s(1482) =< aux(271)
s(1481) =< s(1489)
s(1482) =< s(1489)
s(1483) =< s(1488)
s(1484) =< s(1488)
s(1483) =< aux(271)
s(1484) =< aux(271)

Unbounded itvars
s(1475) :  sum(113),s(1463)
s(1478) :  sum(113),s(1466)

#### Simplifying cost structure of chain [[113],125] 
 * Joined equivalent variables [aux(268),s(1455)] into aux(268)
 * Joined equivalent variables [s(1475),s(1478)] into s(1475)
 * Joined equivalent variables [s(1483),s(1484)] into s(1483)
 * Joined equivalent variables [s(1481),s(1482)] into s(1481)
 * Joined equivalent variables [s(1474),s(1480)] into s(1474)
 * Joined equivalent variables [s(1493),s(1494)] into s(1493)
 * Joined equivalent variables [s(1476),s(1477)] into s(1476)

#### Computing cost of phase [114,116] 
 * Renamed intermediate variables: 
[ (eq(142,1),s(1264))>>s(1497), (eq(142,1),aux(244))>>s(1498), (eq(142,1),aux(245))>>s(1499), (eq(142,1),aux(246))>>s(1500), (eq(142,1),aux(247))>>s(1501), (eq(142,1),aux(248))>>s(1502), (eq(142,1),aux(249))>>s(1503), (eq(142,1),aux(250))>>s(1504), (eq(142,1),s(1263))>>s(1505), (eq(142,1),s(1284))>>s(1506), (eq(142,1),s(1285))>>s(1507), (eq(142,1),s(1286))>>s(1508), (eq(142,1),s(1290))>>s(1509), (eq(142,1),s(1287))>>s(1510), (eq(142,1),s(1291))>>s(1511), (eq(142,1),s(1293))>>s(1512), (eq(142,1),s(1294))>>s(1513), (eq(142,1),s(1295))>>s(1514), (eq(142,1),s(1296))>>s(1515), (eq(142,1),s(1297))>>s(1516), (eq(142,1),s(1299))>>s(1517), (eq(142,1),s(1300))>>s(1518), (eq(142,1),s(1301))>>s(1519), (eq(142,1),s(1272))>>s(1520), (eq(142,1),s(1274))>>s(1521), (eq(142,1),s(1276))>>s(1522), (eq(142,1),s(1278))>>s(1523), (eq(142,1),s(1315))>>s(1524), (eq(142,1),s(1317))>>s(1525)]

#### Simplifying cost structure of CE 142 
 * Joined equivalent variables [aux(274),s(1502),s(1503)] into aux(274)
 * Renamed intermediate variables: 
[ (it(114),s(1498))>>s(1526), (it(114),s(1499))>>s(1527), (it(114),s(1500))>>s(1528), (it(114),s(1501))>>s(1529), (it(114),s(1504))>>s(1530), (it(114),s(1497))>>s(1531), (it(114),aux(274))>>s(1532), (it(114),s(1505))>>s(1533), (it(114),s(1506))>>s(1534), (it(114),s(1507))>>s(1535), (it(114),s(1508))>>s(1536), (it(114),s(1509))>>s(1537), (it(114),s(1510))>>s(1538), (it(114),s(1511))>>s(1539), (it(114),s(1512))>>s(1540), (it(114),s(1513))>>s(1541), (it(114),s(1514))>>s(1542), (it(114),s(1515))>>s(1543), (it(114),s(1516))>>s(1544), (it(114),s(1517))>>s(1545), (it(114),s(1518))>>s(1546), (it(114),s(1519))>>s(1547), (it(114),s(1520))>>s(1548), (it(114),s(1521))>>s(1549), (it(114),s(1522))>>s(1550), (it(114),s(1523))>>s(1551), (it(114),s(1524))>>s(1552), (it(114),s(1525))>>s(1553)]
 * Renamed intermediate variables: 
[ (eq(140,1),s(1108))>>s(1554), (eq(140,1),aux(221))>>s(1555), (eq(140,1),aux(222))>>s(1556), (eq(140,1),aux(223))>>s(1557), (eq(140,1),aux(224))>>s(1558), (eq(140,1),aux(225))>>s(1559), (eq(140,1),aux(226))>>s(1560), (eq(140,1),aux(227))>>s(1561), (eq(140,1),s(1107))>>s(1562), (eq(140,1),s(1128))>>s(1563), (eq(140,1),s(1129))>>s(1564), (eq(140,1),s(1132))>>s(1565), (eq(140,1),s(1133))>>s(1566), (eq(140,1),s(1135))>>s(1567), (eq(140,1),s(1137))>>s(1568), (eq(140,1),s(1138))>>s(1569), (eq(140,1),s(1139))>>s(1570), (eq(140,1),s(1140))>>s(1571), (eq(140,1),s(1141))>>s(1572), (eq(140,1),s(1142))>>s(1573), (eq(140,1),s(1143))>>s(1574), (eq(140,1),s(1144))>>s(1575), (eq(140,1),s(1145))>>s(1576), (eq(140,1),s(1116))>>s(1577), (eq(140,1),s(1118))>>s(1578), (eq(140,1),s(1120))>>s(1579), (eq(140,1),s(1122))>>s(1580), (eq(140,1),s(1159))>>s(1581), (eq(140,1),s(1161))>>s(1582)]

#### Simplifying cost structure of CE 140 
 * Joined equivalent variables [aux(275),s(1559),s(1560)] into aux(275)
 * Renamed intermediate variables: 
[ (it(116),s(1555))>>s(1583), (it(116),s(1556))>>s(1584), (it(116),s(1557))>>s(1585), (it(116),s(1558))>>s(1586), (it(116),s(1561))>>s(1587), (it(116),s(1554))>>s(1588), (it(116),aux(275))>>s(1589), (it(116),s(1562))>>s(1590), (it(116),s(1563))>>s(1591), (it(116),s(1564))>>s(1592), (it(116),s(1565))>>s(1593), (it(116),s(1566))>>s(1594), (it(116),s(1567))>>s(1595), (it(116),s(1568))>>s(1596), (it(116),s(1569))>>s(1597), (it(116),s(1570))>>s(1598), (it(116),s(1571))>>s(1599), (it(116),s(1572))>>s(1600), (it(116),s(1573))>>s(1601), (it(116),s(1574))>>s(1602), (it(116),s(1575))>>s(1603), (it(116),s(1576))>>s(1604), (it(116),s(1577))>>s(1605), (it(116),s(1578))>>s(1606), (it(116),s(1579))>>s(1607), (it(116),s(1580))>>s(1608), (it(116),s(1581))>>s(1609), (it(116),s(1582))>>s(1610)]

#### Cost of loops [114,116] 

 * loop 114:echelon_helper(A,B,C,D,E,F,G,H,I,J) -> [echelon_helper(A',B',C',D',E',F',G',H',I',J')] 
16*s(1533)+244*s(1534)+120*s(1543)+80*s(1544)+40*s(1545)+40*s(1546)+40*s(1547)+80*s(1548)+80*s(1549)+64*s(1550)+64*s(1551)+64*s(1552)+64*s(1553)+40
  Such that:s(1526) =< A
s(1527) =< A-D'+1
s(1528) =< B
s(1529) =< 2*B
s(1530) =< D'+1
s(1531) =< 2*D'
s(1532) =< D'
s(1533) =< s(1532)
s(1534) =< s(1527)
s(1535) =< s(1528)-2
s(1536) =< s(1528)
s(1537) =< s(1534)*s(1528)
s(1535) =< s(1532)
s(1538) =< s(1532)
s(1539) =< s(1534)*s(1536)
s(1540) =< s(1534)*s(1532)
s(1541) =< s(1534)*s(1535)
s(1542) =< s(1534)*s(1538)
s(1543) =< s(1539)
s(1544) =< s(1541)
s(1545) =< s(1542)
s(1546) =< s(1537)
s(1547) =< s(1540)
s(1548) =< s(1530)
s(1549) =< s(1530)
s(1548) =< s(1528)
s(1550) =< s(1526)
s(1551) =< s(1526)
s(1550) =< s(1532)
s(1551) =< s(1532)
s(1550) =< s(1528)
s(1550) =< s(1529)
s(1550) =< s(1531)
s(1551) =< s(1531)
s(1552) =< s(1526)
s(1553) =< s(1526)
s(1552) =< s(1532)
s(1553) =< s(1532)
s(1552) =< s(1528)
s(1552) =< s(1529)

 * loop 116:echelon_helper(A,B,C,D,E,F,G,H,I,J) -> [echelon_helper(A',B',C',D',E',F',G',H',I',J')] 
16*s(1590)+448*s(1591)+240*s(1595)+80*s(1596)+80*s(1602)+40*s(1603)+40*s(1604)+80*s(1605)+80*s(1606)+64*s(1607)+64*s(1608)+64*s(1609)+64*s(1610)+40
  Such that:s(1583) =< A
s(1584) =< A-D'+1
s(1585) =< B
s(1586) =< 2*B
s(1587) =< D'+1
s(1588) =< 2*D'
s(1589) =< D'
s(1590) =< s(1589)
s(1591) =< s(1584)
s(1592) =< s(1585)
s(1593) =< s(1591)*s(1585)
s(1594) =< s(1591)*s(1592)
s(1595) =< s(1594)
s(1596) =< s(1593)
s(1597) =< s(1585)-2
s(1597) =< s(1589)
s(1598) =< s(1589)
s(1599) =< s(1591)*s(1589)
s(1600) =< s(1591)*s(1597)
s(1601) =< s(1591)*s(1598)
s(1602) =< s(1600)
s(1603) =< s(1601)
s(1604) =< s(1599)
s(1605) =< s(1587)
s(1606) =< s(1587)
s(1605) =< s(1585)
s(1607) =< s(1583)
s(1608) =< s(1583)
s(1607) =< s(1589)
s(1608) =< s(1589)
s(1607) =< s(1585)
s(1607) =< s(1586)
s(1607) =< s(1588)
s(1608) =< s(1588)
s(1609) =< s(1583)
s(1610) =< s(1583)
s(1609) =< s(1589)
s(1610) =< s(1589)
s(1609) =< s(1585)
s(1609) =< s(1586)

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [s(1532)=<B-1,s(1528)=<B,s(1585)=<B,s(1589)=<D+1]
* Psum in Loop 114: [it(114)=<1,s(1627)=<A,s(1635)=<A-D'+1,s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D']
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D']

###### Computing max_min for s(1532)=<B-1  
   - Applying max/min strategy 
     - Loop 114  increases the expression by [-D+B'-2,B'-D'-1] 
     - Loop 116  increases the expression by [B'-1] 
 * Adding constraints:[s(1532)=<aux(276)+aux(277)+aux(278),aux(276)=<B-1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [s(1528)=<B,s(1585)=<B,s(1589)=<D+1]
* Psum in Loop 114: [it(114)=<1,s(1627)=<A,s(1635)=<A-D'+1,s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(277)=< -D+B'-2,aux(277)=<B'-D'-1]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing max_min for s(1528)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[s(1528)=<s(1532)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [s(1585)=<B,s(1589)=<D+1]
* Psum in Loop 114: [it(114)=<1,s(1627)=<A,s(1635)=<A-D'+1,s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(277)=< -D+B'-2,aux(277)=<B'-D'-1]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing max_min for s(1585)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[s(1585)=<s(1532)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [s(1589)=<D+1]
* Psum in Loop 114: [it(114)=<1,s(1627)=<A,s(1635)=<A-D'+1,s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(277)=< -D+B'-2,aux(277)=<B'-D'-1]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing max_min for s(1589)=<D+1  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(1589)=<D+E-1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [it(114)=<1,s(1627)=<A,s(1635)=<A-D'+1,s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(277)=< -D+B'-2,aux(277)=<B'-D'-1]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for it(114)=<1  in Loop 114 
   - Applying inductive sum strategy 
     - head Candidate: E-1 
       - Loop 116 is collaborative and bounds [it(116)] 
     - head Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E-1 
       - Loop 116 is collaborative and bounds [it(116)] 
     - tail Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(114)+it(116)=<E-1,it(114)+it(116)=<E-1,it(114)+it(116)=<E-E',it(114)+it(116)=<E-E'] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [s(1627)=<A,s(1635)=<A-D'+1,s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(277)=< -D+B'-2,aux(277)=<B'-D'-1]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for s(1627)=<A  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(279)=<A] 
 * Adding constraints: [s(1627)=<it(114)*aux(279)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(279)=<A]
* Psum in Loop 114: [s(1635)=<A-D'+1,s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(277)=< -D+B'-2,aux(277)=<B'-D'-1]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing max_min for aux(279)=<A  
   - Applying max/min strategy 
     - Loop 114  increases the expression by [A'-2*D'-1,A'/2-D'-1/2] 
     - Loop 116 does not increase the expression
 * Adding constraints:[aux(279)=<aux(280)+aux(281),aux(280)=<A] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [s(1635)=<A-D'+1,s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(277)=< -D+B'-2,aux(277)=<B'-D'-1,aux(281)=<A'-2*D'-1,aux(281)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for s(1635)=<A-D'+1  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(282)=<A-D] 
 * Adding constraints: [s(1635)=<it(114)*aux(282)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(282)=<A-D]
* Psum in Loop 114: [s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(277)=< -D+B'-2,aux(277)=<B'-D'-1,aux(281)=<A'-2*D'-1,aux(281)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing max_min for aux(282)=<A-D  
   - Applying max/min strategy 
     - Loop 114  increases the expression by [A'-2*D'-2,A'/2-D'-3/2] 
     - Loop 116 does not increase the expression
 * Adding constraints:[aux(282)=<aux(283)+aux(284),aux(283)=<A-D] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(277)=< -D+B'-2,aux(277)=<B'-D'-1,aux(284)=<A'-2*D'-2,aux(281)=<A'-2*D'-1,aux(284)=<A'/2-D'-3/2,aux(281)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for s(1625)=<B  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(285)=<B] 
 * Adding constraints: [s(1625)=<it(114)*aux(285)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(285)=<B]
* Psum in Loop 114: [s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(277)=< -D+B'-2,aux(277)=<B'-D'-1,aux(284)=<A'-2*D'-2,aux(281)=<A'-2*D'-1,aux(284)=<A'/2-D'-3/2,aux(281)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing max_min for aux(285)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(285)=<s(1532)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(277)=< -D+B'-2,aux(277)=<B'-D'-1,aux(284)=<A'-2*D'-2,aux(281)=<A'-2*D'-1,aux(284)=<A'/2-D'-3/2,aux(281)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for s(1624)=<2*B  in Loop 114 
   - Found a solution using cacheing 
 * Adding constraints: [s(1624)=<aux(286)*2,aux(286)=<it(114)*aux(285)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(277)=< -D+B'-2,aux(277)=<B'-D'-1,aux(284)=<A'-2*D'-2,aux(281)=<A'-2*D'-1,aux(284)=<A'/2-D'-3/2,aux(281)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for s(1626)=<D'  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(287)=<B-1,aux(287)=<D+1] 
 * Adding constraints: [s(1626)=<it(114)*aux(287)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(287)=<B-1,aux(287)=<D+1]
* Psum in Loop 114: [s(1629)=<D'+1,s(1628)=<2*D',aux(277)=< -D+B'-2,aux(277)=<B'-D'-1,aux(284)=<A'-2*D'-2,aux(281)=<A'-2*D'-1,aux(284)=<A'/2-D'-3/2,aux(281)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing max_min for aux(287)=<B-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(287)=<s(1532)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(287)=<D+1]
* Psum in Loop 114: [s(1629)=<D'+1,s(1628)=<2*D',aux(277)=< -D+B'-2,aux(277)=<B'-D'-1,aux(284)=<A'-2*D'-2,aux(281)=<A'-2*D'-1,aux(284)=<A'/2-D'-3/2,aux(281)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing max_min for aux(287)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(287)=<s(1589)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [s(1629)=<D'+1,s(1628)=<2*D',aux(277)=< -D+B'-2,aux(277)=<B'-D'-1,aux(284)=<A'-2*D'-2,aux(281)=<A'-2*D'-1,aux(284)=<A'/2-D'-3/2,aux(281)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for s(1629)=<D'+1  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(288)=<B,aux(288)=<D+2] 
 * Adding constraints: [s(1629)=<it(114)*aux(288)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(288)=<B,aux(288)=<D+2]
* Psum in Loop 114: [s(1628)=<2*D',aux(277)=< -D+B'-2,aux(277)=<B'-D'-1,aux(284)=<A'-2*D'-2,aux(281)=<A'-2*D'-1,aux(284)=<A'/2-D'-3/2,aux(281)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing max_min for aux(288)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(288)=<s(1532)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(288)=<D+2]
* Psum in Loop 114: [s(1628)=<2*D',aux(277)=< -D+B'-2,aux(277)=<B'-D'-1,aux(284)=<A'-2*D'-2,aux(281)=<A'-2*D'-1,aux(284)=<A'/2-D'-3/2,aux(281)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing max_min for aux(288)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(288)=<s(1589)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [s(1628)=<2*D',aux(277)=< -D+B'-2,aux(277)=<B'-D'-1,aux(284)=<A'-2*D'-2,aux(281)=<A'-2*D'-1,aux(284)=<A'/2-D'-3/2,aux(281)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for s(1628)=<2*D'  in Loop 114 
   - Found a solution using cacheing 
 * Adding constraints: [s(1628)=<aux(289)*2,aux(289)=<it(114)*aux(287)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(277)=< -D+B'-2,aux(277)=<B'-D'-1,aux(284)=<A'-2*D'-2,aux(281)=<A'-2*D'-1,aux(284)=<A'/2-D'-3/2,aux(281)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for aux(277)=< -D+B'-2  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [] 
 * Adding constraints: [aux(277)=<it(114)*aux(290)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(277)=<B'-D'-1,aux(284)=<A'-2*D'-2,aux(281)=<A'-2*D'-1,aux(284)=<A'/2-D'-3/2,aux(281)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for aux(277)=<B'-D'-1  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [] 
 * Adding constraints: [aux(277)=<it(114)*aux(291)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(284)=<A'-2*D'-2,aux(281)=<A'-2*D'-1,aux(284)=<A'/2-D'-3/2,aux(281)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for aux(284)=<A'-2*D'-2  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(292)=<2*A-4*D-7] 
 * Adding constraints: [aux(284)=<it(114)*aux(292)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(292)=<2*A-4*D-7]
* Psum in Loop 114: [aux(281)=<A'-2*D'-1,aux(284)=<A'/2-D'-3/2,aux(281)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing max_min for aux(292)=<2*A-4*D-7  
   - Applying max/min strategy 
     - Loop 114  increases the expression by [2*A'-4*D'-6,A'-2*D'-5] 
     - Loop 116 does not increase the expression
 * Adding constraints:[aux(292)=<aux(293)+aux(294),aux(293)=<2*A-4*D-7] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(281)=<A'-2*D'-1,aux(284)=<A'/2-D'-3/2,aux(281)=<A'/2-D'-1/2,aux(294)=<A'-2*D'-5,aux(294)=<2*A'-4*D'-6]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for aux(281)=<A'-2*D'-1  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(295)=<2*A-4*D-6] 
 * Adding constraints: [aux(281)=<it(114)*aux(295)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(295)=<2*A-4*D-6]
* Psum in Loop 114: [aux(284)=<A'/2-D'-3/2,aux(281)=<A'/2-D'-1/2,aux(294)=<A'-2*D'-5,aux(294)=<2*A'-4*D'-6]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing max_min for aux(295)=<2*A-4*D-6  
   - Found a solution using cacheing 
 * Adding constraints:[aux(295)=<aux(292)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(284)=<A'/2-D'-3/2,aux(281)=<A'/2-D'-1/2,aux(294)=<A'-2*D'-5,aux(294)=<2*A'-4*D'-6]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for aux(284)=<A'/2-D'-3/2  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(296)=<A-2*D-4] 
 * Adding constraints: [aux(284)=<it(114)*aux(296)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(296)=<A-2*D-4]
* Psum in Loop 114: [aux(281)=<A'/2-D'-1/2,aux(294)=<A'-2*D'-5,aux(294)=<2*A'-4*D'-6]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing max_min for aux(296)=<A-2*D-4  
   - Found a solution using cacheing 
 * Adding constraints:[aux(296)=<aux(292)* (1/2)-1/2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(281)=<A'/2-D'-1/2,aux(294)=<A'-2*D'-5,aux(294)=<2*A'-4*D'-6]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for aux(281)=<A'/2-D'-1/2  in Loop 114 
   - Found a solution using cacheing 
 * Adding constraints: [aux(281)=<aux(297)* (1/2),aux(297)=<it(114)*aux(295)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(294)=<A'-2*D'-5,aux(294)=<2*A'-4*D'-6]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for aux(294)=<A'-2*D'-5  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(298)=<2*A-4*D-10] 
 * Adding constraints: [aux(294)=<it(114)*aux(298)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(298)=<2*A-4*D-10]
* Psum in Loop 114: [aux(294)=<2*A'-4*D'-6]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing max_min for aux(298)=<2*A-4*D-10  
   - Found a solution using cacheing 
 * Adding constraints:[aux(298)=<aux(292)-3] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(294)=<2*A'-4*D'-6]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for aux(294)=<2*A'-4*D'-6  in Loop 114 
   - Found a solution using cacheing 
 * Adding constraints: [aux(294)=<aux(299)*4,aux(299)=<it(114)*aux(296)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for it(116)=<1  in Loop 116 
   - Applying inductive sum strategy 
     - head Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A/2-2 
       - Loop 114 has a reset to  [A-D-7/2]
     - head Candidate: A/3-D/3-1 
       - Loop 114 has a reset to  [2/3*A-D-7/3]
     - head Candidate: A/4-D/2-1/2 
       - Loop 114 has a reset to  [A/2-D-7/4]
     - tail Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A/2-2 
       - Loop 114 has undefined behavior 
     - tail Candidate: A/3-D/3-1 
       - Loop 114 has undefined behavior 
     - tail Candidate: A/4-D/2-1/2 
       - Loop 114 has undefined behavior 
 * Adding constraints: [it(116)=<aux(300)+aux(301),it(116)=<aux(302)+aux(303),it(116)=<aux(304)+aux(305),it(114)+it(116)=<E-1,it(114)+it(116)=<E-1,aux(301)=<A/2-2,aux(303)=<A/3-D/3-1,aux(305)=<A/4-D/2-1/2,it(114)+it(116)=<E-E',it(114)+it(116)=<E-E'] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(300)=<A-D-7/2,aux(304)=<A/2-D-7/4,aux(302)=<2/3*A-D-7/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for aux(300)=<A-D-7/2  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(306)=<A-D-7/2] 
 * Adding constraints: [aux(300)=<it(114)*aux(306)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(306)=<A-D-7/2]
* Psum in Loop 114: [aux(304)=<A/2-D-7/4,aux(302)=<2/3*A-D-7/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing max_min for aux(306)=<A-D-7/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(306)=<aux(282)-7/2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(304)=<A/2-D-7/4,aux(302)=<2/3*A-D-7/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for aux(304)=<A/2-D-7/4  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(307)=<A/2-D-7/4] 
 * Adding constraints: [aux(304)=<it(114)*aux(307)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(307)=<A/2-D-7/4]
* Psum in Loop 114: [aux(302)=<2/3*A-D-7/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing max_min for aux(307)=<A/2-D-7/4  
   - Found a solution using cacheing 
 * Adding constraints:[aux(307)=<aux(292)* (1/4)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(302)=<2/3*A-D-7/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for aux(302)=<2/3*A-D-7/3  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(308)=<2/3*A-D-7/3] 
 * Adding constraints: [aux(302)=<it(114)*aux(308)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(308)=<2/3*A-D-7/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing max_min for aux(308)=<2/3*A-D-7/3  
   - Applying max/min strategy 
     - Loop 114  increases the expression by [2/3*A'-4/3*D'-5/3,A'/3-2/3*D'-4/3] 
     - Loop 116 does not increase the expression
 * Adding constraints:[aux(308)=<aux(309)+aux(310),aux(309)=<2/3*A-D-7/3] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(310)=<A'/3-2/3*D'-4/3,aux(310)=<2/3*A'-4/3*D'-5/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for aux(310)=<A'/3-2/3*D'-4/3  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(311)=<2/3*A-4/3*D-3] 
 * Adding constraints: [aux(310)=<it(114)*aux(311)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(311)=<2/3*A-4/3*D-3]
* Psum in Loop 114: [aux(310)=<2/3*A'-4/3*D'-5/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing max_min for aux(311)=<2/3*A-4/3*D-3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(311)=<aux(292)* (1/3)-2/3] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(310)=<2/3*A'-4/3*D'-5/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for aux(310)=<2/3*A'-4/3*D'-5/3  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(312)=<4/3*A-8/3*D-5] 
 * Adding constraints: [aux(310)=<it(114)*aux(312)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(312)=<4/3*A-8/3*D-5]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing max_min for aux(312)=<4/3*A-8/3*D-5  
   - Found a solution using cacheing 
 * Adding constraints:[aux(312)=<aux(292)* (2/3)-1/3] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for s(1652)=<A  in Loop 116 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(313)=<A] 
 * Adding constraints: [s(1652)=<it(116)*aux(313)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(313)=<A]
* Psum in Loop 116: [s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing max_min for aux(313)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(313)=<aux(279)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for s(1660)=<A-D'+1  in Loop 116 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(314)=<A-D] 
 * Adding constraints: [s(1660)=<it(116)*aux(314)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(314)=<A-D]
* Psum in Loop 116: [s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing max_min for aux(314)=<A-D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(314)=<aux(282)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for s(1650)=<B  in Loop 116 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(315)=<B] 
 * Adding constraints: [s(1650)=<it(116)*aux(315)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(315)=<B]
* Psum in Loop 116: [s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing max_min for aux(315)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(315)=<s(1532)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for s(1649)=<2*B  in Loop 116 
   - Found a solution using cacheing 
 * Adding constraints: [s(1649)=<aux(316)*2,aux(316)=<it(116)*aux(315)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for s(1651)=<D'  in Loop 116 
   - Applying inductive sum strategy 
     - head Candidate: A-D-2 
       - Loop 114 has a reset to  [2*A-3*D-6]
     - head Candidate: A-3 
       - Loop 114 has a reset to  [2*A-2*D-6]
     - tail Candidate: A-D-2 
       - Loop 114 has undefined behavior 
     - tail Candidate: A-3 
       - Loop 114 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(321)=<D+1,aux(321)=<A/2-1/2] 
 * Adding constraints: [s(1651)=<it(116)*aux(321),s(1651)=<aux(317)+aux(318),s(1651)=<aux(319)+aux(320),aux(318)=<A-D-2,aux(320)=<A-3] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(321)=<A/2-1/2,aux(321)=<D+1]
* Psum in Loop 114: [aux(317)=<2*A-3*D-6,aux(319)=<2*A-2*D-6]
* Psum in Loop 116: [s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing max_min for aux(321)=<A/2-1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(321)=<aux(279)* (1/2)-1/2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(321)=<D+1]
* Psum in Loop 114: [aux(317)=<2*A-3*D-6,aux(319)=<2*A-2*D-6]
* Psum in Loop 116: [s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing max_min for aux(321)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(321)=<s(1589)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(317)=<2*A-3*D-6,aux(319)=<2*A-2*D-6]
* Psum in Loop 116: [s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for aux(317)=<2*A-3*D-6  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(322)=<2*A-3*D-6] 
 * Adding constraints: [aux(317)=<it(114)*aux(322)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(322)=<2*A-3*D-6]
* Psum in Loop 114: [aux(319)=<2*A-2*D-6]
* Psum in Loop 116: [s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing max_min for aux(322)=<2*A-3*D-6  
   - Found a solution using cacheing 
 * Adding constraints:[aux(322)=<aux(308)*3+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(319)=<2*A-2*D-6]
* Psum in Loop 116: [s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for aux(319)=<2*A-2*D-6  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(323)=<2*A-2*D-6] 
 * Adding constraints: [aux(319)=<it(114)*aux(323)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(323)=<2*A-2*D-6]
* Psum in Loop 116: [s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing max_min for aux(323)=<2*A-2*D-6  
   - Found a solution using cacheing 
 * Adding constraints:[aux(323)=<aux(282)*2-6] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [s(1654)=<D'+1,s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for s(1654)=<D'+1  in Loop 116 
   - Applying inductive sum strategy 
     - head Candidate: 3/2*A-9/2 
       - Loop 114 has a reset to  [3*A-3*D-9]
     - head Candidate: A+E-3 
       - Loop 114 has a reset to  [2*A-2*D+E-7]
     - tail Candidate: 3/2*A-9/2 
       - Loop 114 has undefined behavior 
     - tail Candidate: A+E-3 
       - Loop 114 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(328)=<D+2,aux(328)=<A/2+1/2] 
 * Adding constraints: [s(1654)=<it(116)*aux(328),s(1654)=<aux(324)+aux(325),s(1654)=<aux(326)+aux(327),aux(325)=<3/2*A-9/2,aux(327)=<A+E-3] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(328)=<A/2+1/2,aux(328)=<D+2]
* Psum in Loop 114: [aux(326)=<2*A-2*D+E-7,aux(324)=<3*A-3*D-9]
* Psum in Loop 116: [s(1653)=<2*D',aux(278)=<B'-1]

###### Computing max_min for aux(328)=<A/2+1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(328)=<aux(279)* (1/2)+1/2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(328)=<D+2]
* Psum in Loop 114: [aux(326)=<2*A-2*D+E-7,aux(324)=<3*A-3*D-9]
* Psum in Loop 116: [s(1653)=<2*D',aux(278)=<B'-1]

###### Computing max_min for aux(328)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(328)=<s(1589)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(326)=<2*A-2*D+E-7,aux(324)=<3*A-3*D-9]
* Psum in Loop 116: [s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for aux(326)=<2*A-2*D+E-7  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(329)=<2*A-2*D+E-7] 
 * Adding constraints: [aux(326)=<it(114)*aux(329)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(329)=<2*A-2*D+E-7]
* Psum in Loop 114: [aux(324)=<3*A-3*D-9]
* Psum in Loop 116: [s(1653)=<2*D',aux(278)=<B'-1]

###### Computing max_min for aux(329)=<2*A-2*D+E-7  
   - Applying max/min strategy 
     - Loop 114  increases the expression by [2*A'-4*D'-5,A'-2*D'-4] 
     - Loop 116 does not increase the expression
 * Adding constraints:[aux(329)=<aux(330)+aux(331),aux(330)=<2*A-2*D+E-7] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(324)=<3*A-3*D-9,aux(331)=<A'-2*D'-4,aux(331)=<2*A'-4*D'-5]
* Psum in Loop 116: [s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for aux(324)=<3*A-3*D-9  in Loop 114 
   - Found a solution using cacheing 
 * Adding constraints: [aux(324)=<aux(332)* (3/2),aux(332)=<it(114)*aux(323)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(331)=<A'-2*D'-4,aux(331)=<2*A'-4*D'-5]
* Psum in Loop 116: [s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for aux(331)=<A'-2*D'-4  in Loop 114 
   - Found a solution using cacheing 
 * Adding constraints: [aux(331)=<aux(333)*3,aux(333)=<it(114)*aux(311)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(331)=<2*A'-4*D'-5]
* Psum in Loop 116: [s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for aux(331)=<2*A'-4*D'-5  in Loop 114 
   - Found a solution using cacheing 
 * Adding constraints: [aux(331)=<aux(334)*3,aux(334)=<it(114)*aux(312)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [s(1653)=<2*D',aux(278)=<B'-1]

###### Computing sum for s(1653)=<2*D'  in Loop 116 
   - Found a solution using cacheing 
 * Adding constraints: [s(1653)=<aux(335)*2,aux(335)=<it(116)*aux(321),aux(335)=<aux(317)+aux(318),aux(335)=<aux(319)+aux(320)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [aux(278)=<B'-1]

###### Computing sum for aux(278)=<B'-1  in Loop 116 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [] 
 * Adding constraints: [aux(278)=<it(116)*aux(336)] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [114,116] 
Found a cycle in the non-final constraints
 Removed possibly redundant constraints to solve a cycle in the cost structure 
it(116)=<aux(300)+aux(301)
it(116)=<aux(302)+aux(303)
it(116)=<aux(304)+aux(305)
Found a cycle in the non-final constraints
 Removed possibly redundant constraints to solve a cycle in the cost structure 
aux(321)=<aux(279)* (1/2)-1/2
aux(328)=<aux(279)* (1/2)+1/2
Found a cycle in the non-final constraints
 Removed possibly redundant constraints to solve a cycle in the cost structure 
s(1651)=<aux(317)+aux(318)
s(1651)=<aux(319)+aux(320)
s(1654)=<aux(324)+aux(325)
s(1654)=<aux(326)+aux(327)
aux(335)=<aux(317)+aux(318)
aux(335)=<aux(319)+aux(320)
Found a cycle in the non-final constraints
Could not solve cycle in cost structure.
 Discarded constraints:  
aux(329)=<aux(330)+aux(331)
aux(323)=<aux(282)*2-6
aux(322)=<aux(308)*3+1
aux(314)=<aux(282)
aux(313)=<aux(279)
aux(312)=<aux(292)* (2/3)-1/3
aux(311)=<aux(292)* (1/3)-2/3
aux(308)=<aux(309)+aux(310)
aux(307)=<aux(292)* (1/4)
aux(306)=<aux(282)-7/2
aux(298)=<aux(292)-3
aux(296)=<aux(292)* (1/2)-1/2
aux(295)=<aux(292)+1
aux(292)=<aux(293)+aux(294)
aux(282)=<aux(283)+aux(284)
aux(279)=<aux(280)+aux(281)
aux(334)=<it(114)*aux(312)
aux(331)=<aux(334)*3
aux(333)=<it(114)*aux(311)
aux(331)=<aux(333)*3
aux(332)=<it(114)*aux(323)
aux(324)=<aux(332)* (3/2)
aux(326)=<it(114)*aux(329)
aux(319)=<it(114)*aux(323)
aux(317)=<it(114)*aux(322)
s(1660)=<it(116)*aux(314)
s(1652)=<it(116)*aux(313)
aux(310)=<it(114)*aux(312)
aux(310)=<it(114)*aux(311)
aux(302)=<it(114)*aux(308)
aux(304)=<it(114)*aux(307)
aux(300)=<it(114)*aux(306)
aux(299)=<it(114)*aux(296)
aux(294)=<aux(299)*4
aux(294)=<it(114)*aux(298)
aux(297)=<it(114)*aux(295)
aux(281)=<aux(297)* (1/2)
aux(284)=<it(114)*aux(296)
aux(281)=<it(114)*aux(295)
aux(284)=<it(114)*aux(292)
s(1635)=<it(114)*aux(282)
s(1627)=<it(114)*aux(279)

#### Simplifying cost structure of phase [114,116] 
 * Joined equivalent variables [aux(337),aux(280),aux(320)] into aux(337)
 * Joined equivalent variables [aux(338),aux(283),aux(318)] into aux(338)
 * Joined equivalent variables [aux(321),s(1598)] into aux(321)
 * Joined equivalent variables [aux(285),aux(315),s(1528),s(1585)] into aux(285)
 * Joined equivalent variables [aux(316),s(1650)] into aux(316)
 * Joined equivalent variables [aux(289),s(1626)] into aux(289)
 * Joined equivalent variables [aux(286),s(1625)] into aux(286)
 * Joined equivalent variables [aux(335),s(1651)] into aux(335)
 * Joined equivalent variables [it(114),it(116)] into it(114)
 * Joined equivalent variables [aux(286),aux(316)] into aux(286)
 * Joined equivalent variables [s(1536),s(1592)] into s(1536)
 * Joined equivalent variables [s(1624),s(1649)] into s(1624)

#### Cost of phase [114,116]:echelon_helper(A,B,C,D,E,F,G,H,I,J) -> [echelon_helper(A',B',C',D',E',F',G',H',I',J')] 
80*it(114)+16*s(1611)+244*s(1612)+120*s(1613)+80*s(1614)+40*s(1615)+40*s(1616)+40*s(1617)+80*s(1618)+80*s(1619)+64*s(1620)+64*s(1621)+64*s(1622)+64*s(1623)+16*s(1636)+448*s(1637)+240*s(1638)+80*s(1639)+80*s(1640)+40*s(1641)+40*s(1642)+80*s(1643)+80*s(1644)+64*s(1645)+64*s(1646)+64*s(1647)+64*s(1648)+0
  Such that:s(1589) =< D+E
aux(339) =< E
aux(340) =< E-E'
it(114) =< aux(339)
it(114) =< aux(340)
aux(328) =< s(1589)+1
aux(321) =< s(1589)
aux(288) =< s(1589)+1
aux(287) =< s(1589)
aux(289) =< it(114)*aux(287)
s(1629) =< it(114)*aux(288)
s(1628) =< aux(289)*2
aux(335) =< it(114)*aux(321)
s(1654) =< it(114)*aux(328)
s(1653) =< aux(335)*2
s(1636) =< aux(335)
s(1643) =< s(1654)
s(1644) =< s(1654)
s(1645) =< aux(335)
s(1646) =< aux(335)
s(1645) =< s(1653)
s(1646) =< s(1653)
s(1647) =< aux(335)
s(1648) =< aux(335)
s(1611) =< aux(289)
s(1618) =< s(1629)
s(1619) =< s(1629)
s(1620) =< aux(289)
s(1621) =< aux(289)
s(1620) =< s(1628)
s(1621) =< s(1628)
s(1622) =< aux(289)
s(1623) =< aux(289)

Unbounded itvars
s(1612) :  sum(114),s(1534)
s(1613) :  sum(114),s(1543)
s(1614) :  sum(114),s(1544)
s(1615) :  sum(114),s(1545)
s(1616) :  sum(114),s(1546)
s(1617) :  sum(114),s(1547)
s(1637) :  sum(116),s(1591)
s(1638) :  sum(116),s(1595)
s(1639) :  sum(116),s(1596)
s(1640) :  sum(116),s(1602)
s(1641) :  sum(116),s(1603)
s(1642) :  sum(116),s(1604)

#### Simplifying cost structure of chain [[114,116],[113],125] 
 * Joined equivalent variables [aux(341),s(1449),s(1589)] into aux(341)
 * Joined equivalent variables [aux(342),aux(339),aux(340)] into aux(342)
 * Joined equivalent variables [aux(288),aux(328)] into aux(288)
 * Joined equivalent variables [aux(287),aux(321)] into aux(287)
 * Joined equivalent variables [s(1475),s(1612),s(1613),s(1614),s(1615),s(1616),s(1617),s(1637),s(1638),s(1639),s(1640),s(1641),s(1642)] into s(1475)
 * Joined equivalent variables [s(1611),s(1622),s(1623)] into s(1611)
 * Joined equivalent variables [s(1620),s(1621)] into s(1620)
 * Joined equivalent variables [s(1636),s(1647),s(1648)] into s(1636)
 * Joined equivalent variables [s(1645),s(1646)] into s(1645)
 * Joined equivalent variables [s(1618),s(1619)] into s(1618)
 * Joined equivalent variables [s(1643),s(1644)] into s(1643)
 * Joined equivalent variables [aux(289),aux(335)] into aux(289)
 * Joined equivalent variables [s(1629),s(1654)] into s(1629)
 * Joined equivalent variables [it(113),it(114)] into it(113)
 * Joined equivalent variables [s(1628),s(1653)] into s(1628)
 * Joined equivalent variables [s(1611),s(1636)] into s(1611)
 * Joined equivalent variables [s(1618),s(1643)] into s(1618)
 * Joined equivalent variables [s(1620),s(1645)] into s(1620)
 * Renamed intermediate variables: 
[ (eq(139,1),s(1075))>>s(1661), (eq(139,1),aux(211))>>s(1662), (eq(139,1),aux(212))>>s(1663), (eq(139,1),aux(213))>>s(1664), (eq(139,1),aux(214))>>s(1665), (eq(139,1),aux(215))>>s(1666), (eq(139,1),aux(216))>>s(1667), (eq(139,1),s(1073))>>s(1668), (eq(139,1),s(1082))>>s(1669), (eq(139,1),s(1084))>>s(1670), (eq(139,1),s(1086))>>s(1671), (eq(139,1),s(1088))>>s(1672), (eq(139,1),s(1103))>>s(1673), (eq(139,1),s(1105))>>s(1674)]

#### Simplifying cost structure of CE 139 

#### Simplifying cost structure of chain [117,125] 

#### Found solution for phase  [113] in the cache 

#### Cost of phase [113]:echelon_helper(A,B,C,D,E,F,G,H,I,J) -> [echelon_helper(A',B',C',D',E',F',G',H',I',J')] 
40*it(113)+16*s(1473)+324*s(1474)+120*s(1475)+80*s(1476)+40*s(1477)+40*s(1478)+40*s(1479)+80*s(1480)+64*s(1481)+64*s(1482)+64*s(1483)+64*s(1484)+0
  Such that:aux(265) =< A+D+2*E
s(1449) =< A+E
s(1449) =< D+E
aux(265) =< 2*D+2*E
it(113) =< E
it(113) =< E-E'
aux(270) =< s(1449)+2
aux(269) =< s(1449)+1
aux(268) =< s(1449)
s(1488) =< it(113)*aux(265)
aux(271) =< it(113)*aux(269)
s(1490) =< it(113)*aux(270)
s(1496) =< it(113)*aux(268)
s(1489) =< aux(271)*2
s(1473) =< s(1496)
s(1474) =< s(1490)
s(1455) =< s(1449)
s(1491) =< s(1474)*s(1449)
s(1494) =< s(1474)*s(1455)
s(1493) =< s(1474)*aux(268)
s(1476) =< s(1494)
s(1477) =< s(1493)
s(1479) =< s(1491)
s(1480) =< s(1490)
s(1481) =< s(1488)
s(1482) =< s(1488)
s(1481) =< aux(271)
s(1482) =< aux(271)
s(1481) =< s(1489)
s(1482) =< s(1489)
s(1483) =< s(1488)
s(1484) =< s(1488)
s(1483) =< aux(271)
s(1484) =< aux(271)

Unbounded itvars
s(1475) :  sum(113),s(1463)
s(1478) :  sum(113),s(1466)
Some Itvars are unbounded [s(1663),s(1664)] 
Changing solving method to compute the cost of the chain directly 

#### Computing cost of phase 117 

#### Computing cost of chain [117,125] with linear recursion

#### Computing cost of chain [[113],117,125] with linear recursion
 * Renamed intermediate variables: 
[ (it(113),s(1420))>>s(1446), (it(113),s(1421))>>s(1447), (it(113),s(1422))>>s(1448), (it(113),s(1423))>>s(1449), (it(113),s(1424))>>s(1450), (it(113),s(1425))>>s(1451), (it(113),s(1419))>>s(1452), (it(113),s(1426))>>s(1453), (it(113),s(1427))>>s(1454), (it(113),s(1428))>>s(1455), (it(113),s(1429))>>s(1456), (it(113),s(1430))>>s(1457), (it(113),s(1431))>>s(1458), (it(113),s(1432))>>s(1459), (it(113),s(1433))>>s(1460), (it(113),s(1434))>>s(1461), (it(113),s(1435))>>s(1462), (it(113),s(1436))>>s(1463), (it(113),s(1437))>>s(1464), (it(113),s(1438))>>s(1465), (it(113),s(1439))>>s(1466), (it(113),s(1440))>>s(1467), (it(113),s(1441))>>s(1468), (it(113),s(1442))>>s(1469), (it(113),s(1443))>>s(1470), (it(113),s(1444))>>s(1471), (it(113),s(1445))>>s(1472)]

#### Cost of loops [113] 

 * loop 113:echelon_helper(A,B,C,D,E,F,G,H,I,J) -> [echelon_helper(A',B',C',D',E',F',G',H',I',J')] 
16*s(1453)+324*s(1454)+120*s(1463)+80*s(1464)+40*s(1465)+40*s(1466)+40*s(1467)+80*s(1468)+64*s(1469)+64*s(1470)+64*s(1471)+64*s(1472)+40
  Such that:s(1446) =< A
s(1447) =< B
s(1448) =< 2*B
s(1449) =< D
s(1450) =< D+1
s(1451) =< D+2
s(1452) =< 2*D+2
s(1453) =< s(1449)
s(1454) =< s(1451)
s(1455) =< s(1447)-2
s(1456) =< s(1447)
s(1457) =< s(1454)*s(1447)
s(1455) =< s(1449)
s(1458) =< s(1449)
s(1459) =< s(1454)*s(1456)
s(1460) =< s(1454)*s(1449)
s(1461) =< s(1454)*s(1455)
s(1462) =< s(1454)*s(1458)
s(1463) =< s(1459)
s(1464) =< s(1461)
s(1465) =< s(1462)
s(1466) =< s(1457)
s(1467) =< s(1460)
s(1468) =< s(1451)
s(1468) =< s(1447)
s(1469) =< s(1446)
s(1470) =< s(1446)
s(1469) =< s(1450)
s(1470) =< s(1450)
s(1469) =< s(1447)
s(1469) =< s(1448)
s(1469) =< s(1452)
s(1470) =< s(1452)
s(1471) =< s(1446)
s(1472) =< s(1446)
s(1471) =< s(1450)
s(1472) =< s(1450)
s(1471) =< s(1447)
s(1471) =< s(1448)

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [s(1447)=<B,s(1449)=<D]
* Psum in Loop 113: [it(113)=<1,s(1488)=<A,s(1486)=<B,s(1485)=<2*B,s(1496)=<D,s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for s(1447)=<B  
   - Applying max/min strategy 
     - Loop 113  increases the expression by [-D+B'-2,B'-D'-1] 
 * Adding constraints:[s(1447)=<aux(343)+aux(344),aux(343)=<B] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [s(1449)=<D]
* Psum in Loop 113: [it(113)=<1,s(1488)=<A,s(1486)=<B,s(1485)=<2*B,s(1496)=<D,s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2,aux(344)=< -D+B'-2,aux(344)=<B'-D'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for s(1449)=<D  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(1449)=<A+E-4,s(1449)=<D+E-2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 113: [it(113)=<1,s(1488)=<A,s(1486)=<B,s(1485)=<2*B,s(1496)=<D,s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2,aux(344)=< -D+B'-2,aux(344)=<B'-D'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for it(113)=<1  in Loop 113 
   - Applying inductive sum strategy 
     - head Candidate: E-1 
       - Chain-Tail [117,125] is collaborative and bounds [it([117,125])] 
     - head Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E-1 
       - Chain-Tail [117,125] is collaborative and bounds [it([117,125])] 
     - tail Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(113)+it([117,125])=<E-1,it(113)+it([117,125])=<E-1,it(113)+it([117,125])=<E-1,it(113)+it([117,125])=<E-1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 113: [s(1488)=<A,s(1486)=<B,s(1485)=<2*B,s(1496)=<D,s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2,aux(344)=< -D+B'-2,aux(344)=<B'-D'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for s(1488)=<A  in Loop 113 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(345)=<A] 
 * Adding constraints: [s(1488)=<it(113)*aux(345)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(345)=<A]
* Psum in Loop 113: [s(1486)=<B,s(1485)=<2*B,s(1496)=<D,s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2,aux(344)=< -D+B'-2,aux(344)=<B'-D'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for aux(345)=<A  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(345)=<2*D+2*E-2,aux(345)=<A+D+2*E-5] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 113: [s(1486)=<B,s(1485)=<2*B,s(1496)=<D,s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2,aux(344)=< -D+B'-2,aux(344)=<B'-D'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for s(1486)=<B  in Loop 113 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(346)=<B] 
 * Adding constraints: [s(1486)=<it(113)*aux(346)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(346)=<B]
* Psum in Loop 113: [s(1485)=<2*B,s(1496)=<D,s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2,aux(344)=< -D+B'-2,aux(344)=<B'-D'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for aux(346)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(346)=<s(1447)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 113: [s(1485)=<2*B,s(1496)=<D,s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2,aux(344)=< -D+B'-2,aux(344)=<B'-D'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for s(1485)=<2*B  in Loop 113 
   - Found a solution using cacheing 
 * Adding constraints: [s(1485)=<aux(347)*2,aux(347)=<it(113)*aux(346)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 113: [s(1496)=<D,s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2,aux(344)=< -D+B'-2,aux(344)=<B'-D'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for s(1496)=<D  in Loop 113 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(348)=<D] 
 * Adding constraints: [s(1496)=<it(113)*aux(348)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(348)=<D]
* Psum in Loop 113: [s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2,aux(344)=< -D+B'-2,aux(344)=<B'-D'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for aux(348)=<D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(348)=<s(1449)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 113: [s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2,aux(344)=< -D+B'-2,aux(344)=<B'-D'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for s(1487)=<D+1  in Loop 113 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(349)=<D+1] 
 * Adding constraints: [s(1487)=<it(113)*aux(349)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(349)=<D+1]
* Psum in Loop 113: [s(1490)=<D+2,s(1489)=<2*D+2,aux(344)=< -D+B'-2,aux(344)=<B'-D'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for aux(349)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(349)=<s(1449)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 113: [s(1490)=<D+2,s(1489)=<2*D+2,aux(344)=< -D+B'-2,aux(344)=<B'-D'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for s(1490)=<D+2  in Loop 113 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(350)=<D+2] 
 * Adding constraints: [s(1490)=<it(113)*aux(350)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(350)=<D+2]
* Psum in Loop 113: [s(1489)=<2*D+2,aux(344)=< -D+B'-2,aux(344)=<B'-D'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for aux(350)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(350)=<s(1449)+2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 113: [s(1489)=<2*D+2,aux(344)=< -D+B'-2,aux(344)=<B'-D'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for s(1489)=<2*D+2  in Loop 113 
   - Found a solution using cacheing 
 * Adding constraints: [s(1489)=<aux(351)*2,aux(351)=<it(113)*aux(349)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 113: [aux(344)=< -D+B'-2,aux(344)=<B'-D'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for aux(344)=< -D+B'-2  in Loop 113 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [] 
 * Adding constraints: [aux(344)=<it(113)*aux(352)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 113: [aux(344)=<B'-D'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for aux(344)=<B'-D'-1  in Loop 113 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [] 
 * Adding constraints: [aux(344)=<it(113)*aux(353)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for it([117,125])=<1  in Chain-Tail [117,125] 
   - Applying inductive sum strategy 
     - head Candidate: 1 
       - Loop 113 is collaborative
     - tail Candidate: 1 
       - Loop 113 is collaborative
 * Adding constraints: [it([117,125])=<1,it([117,125])=<1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [117,125]: [s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for s(1685)=<A  in Chain-Tail [117,125] 
   - Applying inductive sum strategy 
     - head Candidate: 2*D+2*E-3 
       - Loop 113 is collaborative
     - tail Candidate: 2*D+2*E-3 
       - Loop 113 is collaborative
 * Adding constraints: [s(1685)=<2*D+2*E-3,s(1685)=<2*D+2*E-3] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [117,125]: [s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for s(1683)=<B  in Chain-Tail [117,125] 
   - Applying inductive sum strategy 
     - head Candidate: B 
       - Loop 113 has undefined behavior 
     - tail Candidate: B 
       - Loop 113 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(354)=<B] 
 * Adding constraints: [s(1683)=<it([117,125])*aux(354)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(354)=<B]
* Psum in Chain-Tail [117,125]: [s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for aux(354)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(354)=<s(1447)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [117,125]: [s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for s(1682)=<2*B  in Chain-Tail [117,125] 
   - Found a solution using cacheing 
 * Adding constraints: [s(1682)=<aux(355)*2,aux(355)=<it([117,125])*aux(354)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [117,125]: [s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for s(1688)=<D  in Chain-Tail [117,125] 
   - Applying inductive sum strategy 
     - head Candidate: D+E-2 
       - Loop 113 is collaborative
     - tail Candidate: D+E-2 
       - Loop 113 is collaborative
 * Adding constraints: [s(1688)=<D+E-2,s(1688)=<D+E-2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [117,125]: [s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for s(1684)=<D+1  in Chain-Tail [117,125] 
   - Applying inductive sum strategy 
     - head Candidate: D+E-1 
       - Loop 113 is collaborative
     - tail Candidate: D+E-1 
       - Loop 113 is collaborative
 * Adding constraints: [s(1684)=<D+E-1,s(1684)=<D+E-1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [117,125]: [s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for s(1687)=<D+2  in Chain-Tail [117,125] 
   - Applying inductive sum strategy 
     - head Candidate: D+E 
       - Loop 113 is collaborative
     - tail Candidate: D+E 
       - Loop 113 is collaborative
 * Adding constraints: [s(1687)=<D+E,s(1687)=<D+E] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [117,125]: [s(1686)=<2*D+2]

###### Computing sum for s(1686)=<2*D+2  in Chain-Tail [117,125] 
   - Found a solution using cacheing 
 * Adding constraints: [s(1686)=<aux(356)*2,aux(356)=<D+E-1,aux(356)=<D+E-1] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [113,[117,125]] 

#### Simplifying cost structure of phase [113,[117,125]] 
 * Joined equivalent variables [aux(357),aux(356),s(1684),s(1687),s(1688)] into aux(357)
 * Joined equivalent variables [aux(358),s(1685)] into aux(358)
 * Joined equivalent variables [aux(348),s(1458)] into aux(348)
 * Joined equivalent variables [aux(351),s(1487)] into aux(351)
 * Joined equivalent variables [aux(346),aux(354),s(1456)] into aux(346)
 * Joined equivalent variables [aux(355),s(1683)] into aux(355)
 * Joined equivalent variables [aux(347),s(1486)] into aux(347)
 * Joined equivalent variables [s(1675),s(1677)] into s(1675)

#### Cost of phase [113]:echelon_helper(A,B,C,D,E,F,G,H,I,J) -> [] 
40*it(113)+43*it([117,125])+16*s(1473)+324*s(1474)+120*s(1475)+80*s(1476)+40*s(1477)+40*s(1478)+40*s(1479)+80*s(1480)+64*s(1481)+64*s(1482)+64*s(1483)+64*s(1484)+96*s(1675)+80*s(1676)+64*s(1678)+64*s(1679)+64*s(1680)+64*s(1681)+0
  Such that:it([117,125]) =< 1
aux(345) =< A+D+2*E
s(1449) =< A+E
aux(357) =< D+E
aux(358) =< 2*D+2*E
aux(359) =< E
s(1449) =< aux(357)
aux(345) =< aux(358)
it(113) =< aux(359)
it([117,125]) =< aux(359)
aux(350) =< s(1449)+2
aux(349) =< s(1449)+1
aux(348) =< s(1449)
s(1686) =< aux(357)*2
s(1488) =< it(113)*aux(345)
aux(351) =< it(113)*aux(349)
s(1490) =< it(113)*aux(350)
s(1496) =< it(113)*aux(348)
s(1489) =< aux(351)*2
s(1675) =< aux(357)
s(1676) =< aux(357)
s(1678) =< aux(358)
s(1679) =< aux(358)
s(1678) =< aux(357)
s(1679) =< aux(357)
s(1678) =< s(1686)
s(1679) =< s(1686)
s(1680) =< aux(358)
s(1681) =< aux(358)
s(1680) =< aux(357)
s(1681) =< aux(357)
s(1473) =< s(1496)
s(1474) =< s(1490)
s(1455) =< s(1449)
s(1491) =< s(1474)*s(1449)
s(1494) =< s(1474)*s(1455)
s(1493) =< s(1474)*aux(348)
s(1476) =< s(1494)
s(1477) =< s(1493)
s(1479) =< s(1491)
s(1480) =< s(1490)
s(1481) =< s(1488)
s(1482) =< s(1488)
s(1481) =< aux(351)
s(1482) =< aux(351)
s(1481) =< s(1489)
s(1482) =< s(1489)
s(1483) =< s(1488)
s(1484) =< s(1488)
s(1483) =< aux(351)
s(1484) =< aux(351)

Unbounded itvars
s(1475) :  sum(113),s(1463)
s(1478) :  sum(113),s(1466)

#### Found solution for phase  [114,116] in the cache 

#### Cost of phase [114,116]:echelon_helper(A,B,C,D,E,F,G,H,I,J) -> [echelon_helper(A',B',C',D',E',F',G',H',I',J')] 
80*it(114)+16*s(1611)+244*s(1612)+120*s(1613)+80*s(1614)+40*s(1615)+40*s(1616)+40*s(1617)+80*s(1618)+80*s(1619)+64*s(1620)+64*s(1621)+64*s(1622)+64*s(1623)+16*s(1636)+448*s(1637)+240*s(1638)+80*s(1639)+80*s(1640)+40*s(1641)+40*s(1642)+80*s(1643)+80*s(1644)+64*s(1645)+64*s(1646)+64*s(1647)+64*s(1648)+0
  Such that:s(1589) =< D+E
aux(339) =< E
aux(340) =< E-E'
it(114) =< aux(339)
it(114) =< aux(340)
aux(328) =< s(1589)+1
aux(321) =< s(1589)
aux(288) =< s(1589)+1
aux(287) =< s(1589)
aux(289) =< it(114)*aux(287)
s(1629) =< it(114)*aux(288)
s(1628) =< aux(289)*2
aux(335) =< it(114)*aux(321)
s(1654) =< it(114)*aux(328)
s(1653) =< aux(335)*2
s(1636) =< aux(335)
s(1643) =< s(1654)
s(1644) =< s(1654)
s(1645) =< aux(335)
s(1646) =< aux(335)
s(1645) =< s(1653)
s(1646) =< s(1653)
s(1647) =< aux(335)
s(1648) =< aux(335)
s(1611) =< aux(289)
s(1618) =< s(1629)
s(1619) =< s(1629)
s(1620) =< aux(289)
s(1621) =< aux(289)
s(1620) =< s(1628)
s(1621) =< s(1628)
s(1622) =< aux(289)
s(1623) =< aux(289)

Unbounded itvars
s(1612) :  sum(114),s(1534)
s(1613) :  sum(114),s(1543)
s(1614) :  sum(114),s(1544)
s(1615) :  sum(114),s(1545)
s(1616) :  sum(114),s(1546)
s(1617) :  sum(114),s(1547)
s(1637) :  sum(116),s(1591)
s(1638) :  sum(116),s(1595)
s(1639) :  sum(116),s(1596)
s(1640) :  sum(116),s(1602)
s(1641) :  sum(116),s(1603)
s(1642) :  sum(116),s(1604)

#### Simplifying cost structure of chain [[114,116],[113],117,125] 
 * Joined equivalent variables [aux(360),aux(357),s(1589)] into aux(360)
 * Joined equivalent variables [aux(361),aux(358)] into aux(361)
 * Joined equivalent variables [aux(363),aux(339),aux(340)] into aux(363)
 * Joined equivalent variables [aux(348),s(1455)] into aux(348)
 * Joined equivalent variables [aux(288),aux(328)] into aux(288)
 * Joined equivalent variables [aux(287),aux(321)] into aux(287)
 * Joined equivalent variables [s(1475),s(1478),s(1612),s(1613),s(1614),s(1615),s(1616),s(1617),s(1637),s(1638),s(1639),s(1640),s(1641),s(1642)] into s(1475)
 * Joined equivalent variables [s(1611),s(1622),s(1623)] into s(1611)
 * Joined equivalent variables [s(1620),s(1621)] into s(1620)
 * Joined equivalent variables [s(1636),s(1647),s(1648)] into s(1636)
 * Joined equivalent variables [s(1645),s(1646)] into s(1645)
 * Joined equivalent variables [s(1483),s(1484)] into s(1483)
 * Joined equivalent variables [s(1481),s(1482)] into s(1481)
 * Joined equivalent variables [s(1675),s(1676)] into s(1675)
 * Joined equivalent variables [s(1680),s(1681)] into s(1680)
 * Joined equivalent variables [s(1678),s(1679)] into s(1678)
 * Joined equivalent variables [s(1474),s(1480)] into s(1474)
 * Joined equivalent variables [s(1618),s(1619)] into s(1618)
 * Joined equivalent variables [s(1643),s(1644)] into s(1643)
 * Joined equivalent variables [s(1493),s(1494)] into s(1493)
 * Joined equivalent variables [aux(289),aux(335)] into aux(289)
 * Joined equivalent variables [s(1629),s(1654)] into s(1629)
 * Joined equivalent variables [s(1628),s(1653)] into s(1628)
 * Joined equivalent variables [s(1611),s(1636)] into s(1611)
 * Joined equivalent variables [s(1476),s(1477)] into s(1476)
 * Joined equivalent variables [s(1618),s(1643)] into s(1618)
 * Joined equivalent variables [s(1620),s(1645)] into s(1620)
 * Renamed intermediate variables: 
[ (eq(141,1),s(1187))>>s(1689), (eq(141,1),aux(234))>>s(1690), (eq(141,1),aux(235))>>s(1691), (eq(141,1),aux(236))>>s(1692), (eq(141,1),aux(237))>>s(1693), (eq(141,1),aux(238))>>s(1694), (eq(141,1),aux(239))>>s(1695), (eq(141,1),s(1185))>>s(1696), (eq(141,1),s(1196))>>s(1697), (eq(141,1),s(1207))>>s(1698), (eq(141,1),s(1210))>>s(1699), (eq(141,1),s(1211))>>s(1700), (eq(141,1),s(1213))>>s(1701), (eq(141,1),s(1215))>>s(1702), (eq(141,1),s(1216))>>s(1703), (eq(141,1),s(1217))>>s(1704), (eq(141,1),s(1218))>>s(1705), (eq(141,1),s(1219))>>s(1706), (eq(141,1),s(1220))>>s(1707), (eq(141,1),s(1221))>>s(1708), (eq(141,1),s(1222))>>s(1709), (eq(141,1),s(1223))>>s(1710), (eq(141,1),s(1194))>>s(1711), (eq(141,1),s(1198))>>s(1712), (eq(141,1),s(1200))>>s(1713), (eq(141,1),s(1237))>>s(1714), (eq(141,1),s(1239))>>s(1715)]

#### Simplifying cost structure of CE 141 

#### Simplifying cost structure of chain [115,125] 

#### Found solution for phase  [113] in the cache 

#### Cost of phase [113]:echelon_helper(A,B,C,D,E,F,G,H,I,J) -> [echelon_helper(A',B',C',D',E',F',G',H',I',J')] 
40*it(113)+16*s(1473)+324*s(1474)+120*s(1475)+80*s(1476)+40*s(1477)+40*s(1478)+40*s(1479)+80*s(1480)+64*s(1481)+64*s(1482)+64*s(1483)+64*s(1484)+0
  Such that:aux(265) =< A+D+2*E
s(1449) =< A+E
s(1449) =< D+E
aux(265) =< 2*D+2*E
it(113) =< E
it(113) =< E-E'
aux(270) =< s(1449)+2
aux(269) =< s(1449)+1
aux(268) =< s(1449)
s(1488) =< it(113)*aux(265)
aux(271) =< it(113)*aux(269)
s(1490) =< it(113)*aux(270)
s(1496) =< it(113)*aux(268)
s(1489) =< aux(271)*2
s(1473) =< s(1496)
s(1474) =< s(1490)
s(1455) =< s(1449)
s(1491) =< s(1474)*s(1449)
s(1494) =< s(1474)*s(1455)
s(1493) =< s(1474)*aux(268)
s(1476) =< s(1494)
s(1477) =< s(1493)
s(1479) =< s(1491)
s(1480) =< s(1490)
s(1481) =< s(1488)
s(1482) =< s(1488)
s(1481) =< aux(271)
s(1482) =< aux(271)
s(1481) =< s(1489)
s(1482) =< s(1489)
s(1483) =< s(1488)
s(1484) =< s(1488)
s(1483) =< aux(271)
s(1484) =< aux(271)

Unbounded itvars
s(1475) :  sum(113),s(1463)
s(1478) :  sum(113),s(1466)
Some Itvars are unbounded [s(1691),s(1692)] 
Changing solving method to compute the cost of the chain directly 

#### Computing cost of phase 115 

#### Computing cost of chain [115,125] with linear recursion

#### Computing cost of chain [[113],115,125] with linear recursion
 * Renamed intermediate variables: 
[ (it(113),s(1420))>>s(1446), (it(113),s(1421))>>s(1447), (it(113),s(1422))>>s(1448), (it(113),s(1423))>>s(1449), (it(113),s(1424))>>s(1450), (it(113),s(1425))>>s(1451), (it(113),s(1419))>>s(1452), (it(113),s(1426))>>s(1453), (it(113),s(1427))>>s(1454), (it(113),s(1428))>>s(1455), (it(113),s(1429))>>s(1456), (it(113),s(1430))>>s(1457), (it(113),s(1431))>>s(1458), (it(113),s(1432))>>s(1459), (it(113),s(1433))>>s(1460), (it(113),s(1434))>>s(1461), (it(113),s(1435))>>s(1462), (it(113),s(1436))>>s(1463), (it(113),s(1437))>>s(1464), (it(113),s(1438))>>s(1465), (it(113),s(1439))>>s(1466), (it(113),s(1440))>>s(1467), (it(113),s(1441))>>s(1468), (it(113),s(1442))>>s(1469), (it(113),s(1443))>>s(1470), (it(113),s(1444))>>s(1471), (it(113),s(1445))>>s(1472)]

#### Cost of loops [113] 

 * loop 113:echelon_helper(A,B,C,D,E,F,G,H,I,J) -> [echelon_helper(A',B',C',D',E',F',G',H',I',J')] 
16*s(1453)+324*s(1454)+120*s(1463)+80*s(1464)+40*s(1465)+40*s(1466)+40*s(1467)+80*s(1468)+64*s(1469)+64*s(1470)+64*s(1471)+64*s(1472)+40
  Such that:s(1446) =< A
s(1447) =< B
s(1448) =< 2*B
s(1449) =< D
s(1450) =< D+1
s(1451) =< D+2
s(1452) =< 2*D+2
s(1453) =< s(1449)
s(1454) =< s(1451)
s(1455) =< s(1447)-2
s(1456) =< s(1447)
s(1457) =< s(1454)*s(1447)
s(1455) =< s(1449)
s(1458) =< s(1449)
s(1459) =< s(1454)*s(1456)
s(1460) =< s(1454)*s(1449)
s(1461) =< s(1454)*s(1455)
s(1462) =< s(1454)*s(1458)
s(1463) =< s(1459)
s(1464) =< s(1461)
s(1465) =< s(1462)
s(1466) =< s(1457)
s(1467) =< s(1460)
s(1468) =< s(1451)
s(1468) =< s(1447)
s(1469) =< s(1446)
s(1470) =< s(1446)
s(1469) =< s(1450)
s(1470) =< s(1450)
s(1469) =< s(1447)
s(1469) =< s(1448)
s(1469) =< s(1452)
s(1470) =< s(1452)
s(1471) =< s(1446)
s(1472) =< s(1446)
s(1471) =< s(1450)
s(1472) =< s(1450)
s(1471) =< s(1447)
s(1471) =< s(1448)

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [s(1447)=<B,s(1691)=<B,s(1449)=<D,s(1693)=<D]
* Psum in Loop 113: [it(113)=<1,s(1488)=<A,s(1486)=<B,s(1485)=<2*B,s(1496)=<D,s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for s(1447)=<B  
   - Applying max/min strategy 
     - Loop 113  increases the expression by [-D+B'-2,B'-D'-1] 
 * Adding constraints:[s(1447)=<aux(364)+aux(365),aux(364)=<B] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [s(1691)=<B,s(1449)=<D,s(1693)=<D]
* Psum in Loop 113: [it(113)=<1,s(1488)=<A,s(1486)=<B,s(1485)=<2*B,s(1496)=<D,s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2,aux(365)=< -D+B'-2,aux(365)=<B'-D'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for s(1691)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[s(1691)=<s(1447)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [s(1449)=<D,s(1693)=<D]
* Psum in Loop 113: [it(113)=<1,s(1488)=<A,s(1486)=<B,s(1485)=<2*B,s(1496)=<D,s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2,aux(365)=< -D+B'-2,aux(365)=<B'-D'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for s(1449)=<D  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(1449)=<A+E-4,s(1449)=<D+E-2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [s(1693)=<D]
* Psum in Loop 113: [it(113)=<1,s(1488)=<A,s(1486)=<B,s(1485)=<2*B,s(1496)=<D,s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2,aux(365)=< -D+B'-2,aux(365)=<B'-D'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for s(1693)=<D  
   - Found a solution using cacheing 
 * Adding constraints:[s(1693)=<s(1449)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 113: [it(113)=<1,s(1488)=<A,s(1486)=<B,s(1485)=<2*B,s(1496)=<D,s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2,aux(365)=< -D+B'-2,aux(365)=<B'-D'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for it(113)=<1  in Loop 113 
   - Applying inductive sum strategy 
     - head Candidate: E-1 
       - Chain-Tail [115,125] is collaborative and bounds [it([115,125])] 
     - head Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E-1 
       - Chain-Tail [115,125] is collaborative and bounds [it([115,125])] 
     - tail Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(113)+it([115,125])=<E-1,it(113)+it([115,125])=<E-1,it(113)+it([115,125])=<E-1,it(113)+it([115,125])=<E-1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 113: [s(1488)=<A,s(1486)=<B,s(1485)=<2*B,s(1496)=<D,s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2,aux(365)=< -D+B'-2,aux(365)=<B'-D'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for s(1488)=<A  in Loop 113 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(366)=<A] 
 * Adding constraints: [s(1488)=<it(113)*aux(366)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(366)=<A]
* Psum in Loop 113: [s(1486)=<B,s(1485)=<2*B,s(1496)=<D,s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2,aux(365)=< -D+B'-2,aux(365)=<B'-D'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for aux(366)=<A  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(366)=<2*D+2*E-2,aux(366)=<A+D+2*E-5] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 113: [s(1486)=<B,s(1485)=<2*B,s(1496)=<D,s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2,aux(365)=< -D+B'-2,aux(365)=<B'-D'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for s(1486)=<B  in Loop 113 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(367)=<B] 
 * Adding constraints: [s(1486)=<it(113)*aux(367)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(367)=<B]
* Psum in Loop 113: [s(1485)=<2*B,s(1496)=<D,s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2,aux(365)=< -D+B'-2,aux(365)=<B'-D'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for aux(367)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(367)=<s(1447)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 113: [s(1485)=<2*B,s(1496)=<D,s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2,aux(365)=< -D+B'-2,aux(365)=<B'-D'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for s(1485)=<2*B  in Loop 113 
   - Found a solution using cacheing 
 * Adding constraints: [s(1485)=<aux(368)*2,aux(368)=<it(113)*aux(367)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 113: [s(1496)=<D,s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2,aux(365)=< -D+B'-2,aux(365)=<B'-D'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for s(1496)=<D  in Loop 113 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(369)=<D] 
 * Adding constraints: [s(1496)=<it(113)*aux(369)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(369)=<D]
* Psum in Loop 113: [s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2,aux(365)=< -D+B'-2,aux(365)=<B'-D'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for aux(369)=<D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(369)=<s(1449)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 113: [s(1487)=<D+1,s(1490)=<D+2,s(1489)=<2*D+2,aux(365)=< -D+B'-2,aux(365)=<B'-D'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for s(1487)=<D+1  in Loop 113 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(370)=<D+1] 
 * Adding constraints: [s(1487)=<it(113)*aux(370)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(370)=<D+1]
* Psum in Loop 113: [s(1490)=<D+2,s(1489)=<2*D+2,aux(365)=< -D+B'-2,aux(365)=<B'-D'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for aux(370)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(370)=<s(1449)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 113: [s(1490)=<D+2,s(1489)=<2*D+2,aux(365)=< -D+B'-2,aux(365)=<B'-D'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for s(1490)=<D+2  in Loop 113 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(371)=<D+2] 
 * Adding constraints: [s(1490)=<it(113)*aux(371)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(371)=<D+2]
* Psum in Loop 113: [s(1489)=<2*D+2,aux(365)=< -D+B'-2,aux(365)=<B'-D'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for aux(371)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(371)=<s(1449)+2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 113: [s(1489)=<2*D+2,aux(365)=< -D+B'-2,aux(365)=<B'-D'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for s(1489)=<2*D+2  in Loop 113 
   - Found a solution using cacheing 
 * Adding constraints: [s(1489)=<aux(372)*2,aux(372)=<it(113)*aux(370)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 113: [aux(365)=< -D+B'-2,aux(365)=<B'-D'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for aux(365)=< -D+B'-2  in Loop 113 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [] 
 * Adding constraints: [aux(365)=<it(113)*aux(373)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 113: [aux(365)=<B'-D'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for aux(365)=<B'-D'-1  in Loop 113 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [] 
 * Adding constraints: [aux(365)=<it(113)*aux(374)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for it([115,125])=<1  in Chain-Tail [115,125] 
   - Applying inductive sum strategy 
     - head Candidate: 1 
       - Loop 113 is collaborative
     - tail Candidate: 1 
       - Loop 113 is collaborative
 * Adding constraints: [it([115,125])=<1,it([115,125])=<1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [115,125]: [s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for s(1731)=<A  in Chain-Tail [115,125] 
   - Applying inductive sum strategy 
     - head Candidate: 2*D+2*E-3 
       - Loop 113 is collaborative
     - tail Candidate: 2*D+2*E-3 
       - Loop 113 is collaborative
 * Adding constraints: [s(1731)=<2*D+2*E-3,s(1731)=<2*D+2*E-3] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [115,125]: [s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for s(1729)=<B  in Chain-Tail [115,125] 
   - Applying inductive sum strategy 
     - head Candidate: B 
       - Loop 113 has undefined behavior 
     - tail Candidate: B 
       - Loop 113 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(375)=<B] 
 * Adding constraints: [s(1729)=<it([115,125])*aux(375)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(375)=<B]
* Psum in Chain-Tail [115,125]: [s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for aux(375)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(375)=<s(1447)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [115,125]: [s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for s(1728)=<2*B  in Chain-Tail [115,125] 
   - Found a solution using cacheing 
 * Adding constraints: [s(1728)=<aux(376)*2,aux(376)=<it([115,125])*aux(375)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [115,125]: [s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for s(1739)=<D  in Chain-Tail [115,125] 
   - Applying inductive sum strategy 
     - head Candidate: D+E-2 
       - Loop 113 is collaborative
     - tail Candidate: D+E-2 
       - Loop 113 is collaborative
 * Adding constraints: [s(1739)=<D+E-2,s(1739)=<D+E-2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [115,125]: [s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for s(1730)=<D+1  in Chain-Tail [115,125] 
   - Applying inductive sum strategy 
     - head Candidate: D+E-1 
       - Loop 113 is collaborative
     - tail Candidate: D+E-1 
       - Loop 113 is collaborative
 * Adding constraints: [s(1730)=<D+E-1,s(1730)=<D+E-1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [115,125]: [s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for s(1733)=<D+2  in Chain-Tail [115,125] 
   - Applying inductive sum strategy 
     - head Candidate: D+E 
       - Loop 113 is collaborative
     - tail Candidate: D+E 
       - Loop 113 is collaborative
 * Adding constraints: [s(1733)=<D+E,s(1733)=<D+E] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [115,125]: [s(1732)=<2*D+2]

###### Computing sum for s(1732)=<2*D+2  in Chain-Tail [115,125] 
   - Found a solution using cacheing 
 * Adding constraints: [s(1732)=<aux(377)*2,aux(377)=<D+E-1,aux(377)=<D+E-1] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [113,[115,125]] 

#### Simplifying cost structure of phase [113,[115,125]] 
 * Joined equivalent variables [aux(378),aux(377),s(1730),s(1733),s(1739)] into aux(378)
 * Joined equivalent variables [aux(379),s(1731)] into aux(379)
 * Joined equivalent variables [aux(369),s(1458),s(1693)] into aux(369)
 * Joined equivalent variables [aux(372),s(1487)] into aux(372)
 * Joined equivalent variables [aux(367),aux(375),s(1456),s(1691)] into aux(367)
 * Joined equivalent variables [aux(376),s(1729)] into aux(376)
 * Joined equivalent variables [aux(368),s(1486)] into aux(368)
 * Joined equivalent variables [s(1716),s(1717)] into s(1716)

#### Cost of phase [113]:echelon_helper(A,B,C,D,E,F,G,H,I,J) -> [] 
40*it(113)+43*it([115,125])+16*s(1473)+324*s(1474)+120*s(1475)+80*s(1476)+40*s(1477)+40*s(1478)+40*s(1479)+80*s(1480)+64*s(1481)+64*s(1482)+64*s(1483)+64*s(1484)+544*s(1716)+240*s(1718)+80*s(1719)+80*s(1720)+40*s(1721)+40*s(1722)+80*s(1723)+64*s(1724)+64*s(1725)+64*s(1726)+64*s(1727)+0
  Such that:it([115,125]) =< 1
aux(366) =< A+D+2*E
s(1449) =< A+E
aux(378) =< D+E
aux(379) =< 2*D+2*E
aux(380) =< E
s(1449) =< aux(378)
aux(366) =< aux(379)
it(113) =< aux(380)
it([115,125]) =< aux(380)
aux(371) =< s(1449)+2
aux(370) =< s(1449)+1
aux(369) =< s(1449)
s(1732) =< aux(378)*2
s(1488) =< it(113)*aux(366)
aux(372) =< it(113)*aux(370)
s(1490) =< it(113)*aux(371)
s(1496) =< it(113)*aux(369)
s(1489) =< aux(372)*2
s(1716) =< aux(378)
s(1703) =< aux(369)
s(1704) =< aux(369)
s(1734) =< s(1716)*aux(369)
s(1736) =< s(1716)*s(1703)
s(1735) =< s(1716)*s(1704)
s(1720) =< s(1736)
s(1721) =< s(1735)
s(1722) =< s(1734)
s(1723) =< aux(378)
s(1724) =< aux(379)
s(1725) =< aux(379)
s(1724) =< aux(378)
s(1725) =< aux(378)
s(1724) =< s(1732)
s(1725) =< s(1732)
s(1726) =< aux(379)
s(1727) =< aux(379)
s(1726) =< aux(378)
s(1727) =< aux(378)
s(1473) =< s(1496)
s(1474) =< s(1490)
s(1455) =< s(1449)
s(1491) =< s(1474)*s(1449)
s(1494) =< s(1474)*s(1455)
s(1493) =< s(1474)*aux(369)
s(1476) =< s(1494)
s(1477) =< s(1493)
s(1479) =< s(1491)
s(1480) =< s(1490)
s(1481) =< s(1488)
s(1482) =< s(1488)
s(1481) =< aux(372)
s(1482) =< aux(372)
s(1481) =< s(1489)
s(1482) =< s(1489)
s(1483) =< s(1488)
s(1484) =< s(1488)
s(1483) =< aux(372)
s(1484) =< aux(372)

Unbounded itvars
s(1475) :  sum(113),s(1463)
s(1478) :  sum(113),s(1466)
s(1718) :  sum([115,125]),s(1701)
s(1719) :  sum([115,125]),s(1702)

#### Found solution for phase  [114,116] in the cache 

#### Cost of phase [114,116]:echelon_helper(A,B,C,D,E,F,G,H,I,J) -> [echelon_helper(A',B',C',D',E',F',G',H',I',J')] 
80*it(114)+16*s(1611)+244*s(1612)+120*s(1613)+80*s(1614)+40*s(1615)+40*s(1616)+40*s(1617)+80*s(1618)+80*s(1619)+64*s(1620)+64*s(1621)+64*s(1622)+64*s(1623)+16*s(1636)+448*s(1637)+240*s(1638)+80*s(1639)+80*s(1640)+40*s(1641)+40*s(1642)+80*s(1643)+80*s(1644)+64*s(1645)+64*s(1646)+64*s(1647)+64*s(1648)+0
  Such that:s(1589) =< D+E
aux(339) =< E
aux(340) =< E-E'
it(114) =< aux(339)
it(114) =< aux(340)
aux(328) =< s(1589)+1
aux(321) =< s(1589)
aux(288) =< s(1589)+1
aux(287) =< s(1589)
aux(289) =< it(114)*aux(287)
s(1629) =< it(114)*aux(288)
s(1628) =< aux(289)*2
aux(335) =< it(114)*aux(321)
s(1654) =< it(114)*aux(328)
s(1653) =< aux(335)*2
s(1636) =< aux(335)
s(1643) =< s(1654)
s(1644) =< s(1654)
s(1645) =< aux(335)
s(1646) =< aux(335)
s(1645) =< s(1653)
s(1646) =< s(1653)
s(1647) =< aux(335)
s(1648) =< aux(335)
s(1611) =< aux(289)
s(1618) =< s(1629)
s(1619) =< s(1629)
s(1620) =< aux(289)
s(1621) =< aux(289)
s(1620) =< s(1628)
s(1621) =< s(1628)
s(1622) =< aux(289)
s(1623) =< aux(289)

Unbounded itvars
s(1612) :  sum(114),s(1534)
s(1613) :  sum(114),s(1543)
s(1614) :  sum(114),s(1544)
s(1615) :  sum(114),s(1545)
s(1616) :  sum(114),s(1546)
s(1617) :  sum(114),s(1547)
s(1637) :  sum(116),s(1591)
s(1638) :  sum(116),s(1595)
s(1639) :  sum(116),s(1596)
s(1640) :  sum(116),s(1602)
s(1641) :  sum(116),s(1603)
s(1642) :  sum(116),s(1604)

#### Simplifying cost structure of chain [[114,116],[113],115,125] 
 * Joined equivalent variables [aux(381),aux(378),s(1589)] into aux(381)
 * Joined equivalent variables [aux(382),aux(379)] into aux(382)
 * Joined equivalent variables [aux(384),aux(339),aux(340)] into aux(384)
 * Joined equivalent variables [aux(369),s(1455)] into aux(369)
 * Joined equivalent variables [s(1703),s(1704)] into s(1703)
 * Joined equivalent variables [aux(288),aux(328)] into aux(288)
 * Joined equivalent variables [aux(287),aux(321)] into aux(287)
 * Joined equivalent variables [s(1475),s(1478),s(1612),s(1613),s(1614),s(1615),s(1616),s(1617),s(1637),s(1638),s(1639),s(1640),s(1641),s(1642),s(1718),s(1719)] into s(1475)
 * Joined equivalent variables [s(1611),s(1622),s(1623)] into s(1611)
 * Joined equivalent variables [s(1620),s(1621)] into s(1620)
 * Joined equivalent variables [s(1636),s(1647),s(1648)] into s(1636)
 * Joined equivalent variables [s(1645),s(1646)] into s(1645)
 * Joined equivalent variables [s(1483),s(1484)] into s(1483)
 * Joined equivalent variables [s(1481),s(1482)] into s(1481)
 * Joined equivalent variables [s(1716),s(1723)] into s(1716)
 * Joined equivalent variables [s(1726),s(1727)] into s(1726)
 * Joined equivalent variables [s(1724),s(1725)] into s(1724)
 * Joined equivalent variables [s(1474),s(1480)] into s(1474)
 * Joined equivalent variables [s(1618),s(1619)] into s(1618)
 * Joined equivalent variables [s(1643),s(1644)] into s(1643)
 * Joined equivalent variables [s(1735),s(1736)] into s(1735)
 * Joined equivalent variables [s(1493),s(1494)] into s(1493)
 * Joined equivalent variables [aux(289),aux(335)] into aux(289)
 * Joined equivalent variables [s(1629),s(1654)] into s(1629)
 * Joined equivalent variables [s(1628),s(1653)] into s(1628)
 * Joined equivalent variables [s(1611),s(1636)] into s(1611)
 * Joined equivalent variables [s(1476),s(1477)] into s(1476)
 * Joined equivalent variables [s(1618),s(1643)] into s(1618)
 * Joined equivalent variables [s(1720),s(1721)] into s(1720)
 * Joined equivalent variables [s(1620),s(1645)] into s(1620)

#### Found solution for phase  [114,116] in the cache 

#### Cost of phase [114,116]:echelon_helper(A,B,C,D,E,F,G,H,I,J) -> [echelon_helper(A',B',C',D',E',F',G',H',I',J')] 
80*it(114)+16*s(1611)+244*s(1612)+120*s(1613)+80*s(1614)+40*s(1615)+40*s(1616)+40*s(1617)+80*s(1618)+80*s(1619)+64*s(1620)+64*s(1621)+64*s(1622)+64*s(1623)+16*s(1636)+448*s(1637)+240*s(1638)+80*s(1639)+80*s(1640)+40*s(1641)+40*s(1642)+80*s(1643)+80*s(1644)+64*s(1645)+64*s(1646)+64*s(1647)+64*s(1648)+0
  Such that:s(1589) =< D+E
aux(339) =< E
aux(340) =< E-E'
it(114) =< aux(339)
it(114) =< aux(340)
aux(328) =< s(1589)+1
aux(321) =< s(1589)
aux(288) =< s(1589)+1
aux(287) =< s(1589)
aux(289) =< it(114)*aux(287)
s(1629) =< it(114)*aux(288)
s(1628) =< aux(289)*2
aux(335) =< it(114)*aux(321)
s(1654) =< it(114)*aux(328)
s(1653) =< aux(335)*2
s(1636) =< aux(335)
s(1643) =< s(1654)
s(1644) =< s(1654)
s(1645) =< aux(335)
s(1646) =< aux(335)
s(1645) =< s(1653)
s(1646) =< s(1653)
s(1647) =< aux(335)
s(1648) =< aux(335)
s(1611) =< aux(289)
s(1618) =< s(1629)
s(1619) =< s(1629)
s(1620) =< aux(289)
s(1621) =< aux(289)
s(1620) =< s(1628)
s(1621) =< s(1628)
s(1622) =< aux(289)
s(1623) =< aux(289)

Unbounded itvars
s(1612) :  sum(114),s(1534)
s(1613) :  sum(114),s(1543)
s(1614) :  sum(114),s(1544)
s(1615) :  sum(114),s(1545)
s(1616) :  sum(114),s(1546)
s(1617) :  sum(114),s(1547)
s(1637) :  sum(116),s(1591)
s(1638) :  sum(116),s(1595)
s(1639) :  sum(116),s(1596)
s(1640) :  sum(116),s(1602)
s(1641) :  sum(116),s(1603)
s(1642) :  sum(116),s(1604)

#### Simplifying cost structure of chain [[114,116],125] 
 * Joined equivalent variables [aux(385),aux(339),aux(340)] into aux(385)
 * Joined equivalent variables [aux(288),aux(328)] into aux(288)
 * Joined equivalent variables [aux(287),aux(321)] into aux(287)
 * Joined equivalent variables [s(1612),s(1613),s(1614),s(1615),s(1616),s(1617),s(1637),s(1638),s(1639),s(1640),s(1641),s(1642)] into s(1612)
 * Joined equivalent variables [s(1611),s(1622),s(1623)] into s(1611)
 * Joined equivalent variables [s(1620),s(1621)] into s(1620)
 * Joined equivalent variables [s(1636),s(1647),s(1648)] into s(1636)
 * Joined equivalent variables [s(1645),s(1646)] into s(1645)
 * Joined equivalent variables [s(1618),s(1619)] into s(1618)
 * Joined equivalent variables [s(1643),s(1644)] into s(1643)
 * Joined equivalent variables [aux(289),aux(335)] into aux(289)
 * Joined equivalent variables [s(1629),s(1654)] into s(1629)
 * Joined equivalent variables [s(1628),s(1653)] into s(1628)
 * Joined equivalent variables [s(1611),s(1636)] into s(1611)
 * Joined equivalent variables [s(1618),s(1643)] into s(1618)
 * Joined equivalent variables [s(1620),s(1645)] into s(1620)
 * Renamed intermediate variables: 
[ (eq(138,1),s(1040))>>s(1740), (eq(138,1),aux(205))>>s(1741), (eq(138,1),aux(206))>>s(1742), (eq(138,1),aux(207))>>s(1743), (eq(138,1),aux(208))>>s(1744), (eq(138,1),aux(209))>>s(1745), (eq(138,1),aux(210))>>s(1746), (eq(138,1),s(1039))>>s(1747), (eq(138,1),s(1048))>>s(1748), (eq(138,1),s(1050))>>s(1749), (eq(138,1),s(1052))>>s(1750), (eq(138,1),s(1054))>>s(1751), (eq(138,1),s(1069))>>s(1752), (eq(138,1),s(1071))>>s(1753)]

#### Simplifying cost structure of CE 138 

#### Simplifying cost structure of chain [118,125] 

#### Found solution for phase  [114,116] in the cache 

#### Cost of phase [114,116]:echelon_helper(A,B,C,D,E,F,G,H,I,J) -> [echelon_helper(A',B',C',D',E',F',G',H',I',J')] 
80*it(114)+16*s(1611)+244*s(1612)+120*s(1613)+80*s(1614)+40*s(1615)+40*s(1616)+40*s(1617)+80*s(1618)+80*s(1619)+64*s(1620)+64*s(1621)+64*s(1622)+64*s(1623)+16*s(1636)+448*s(1637)+240*s(1638)+80*s(1639)+80*s(1640)+40*s(1641)+40*s(1642)+80*s(1643)+80*s(1644)+64*s(1645)+64*s(1646)+64*s(1647)+64*s(1648)+0
  Such that:s(1589) =< D+E
aux(339) =< E
aux(340) =< E-E'
it(114) =< aux(339)
it(114) =< aux(340)
aux(328) =< s(1589)+1
aux(321) =< s(1589)
aux(288) =< s(1589)+1
aux(287) =< s(1589)
aux(289) =< it(114)*aux(287)
s(1629) =< it(114)*aux(288)
s(1628) =< aux(289)*2
aux(335) =< it(114)*aux(321)
s(1654) =< it(114)*aux(328)
s(1653) =< aux(335)*2
s(1636) =< aux(335)
s(1643) =< s(1654)
s(1644) =< s(1654)
s(1645) =< aux(335)
s(1646) =< aux(335)
s(1645) =< s(1653)
s(1646) =< s(1653)
s(1647) =< aux(335)
s(1648) =< aux(335)
s(1611) =< aux(289)
s(1618) =< s(1629)
s(1619) =< s(1629)
s(1620) =< aux(289)
s(1621) =< aux(289)
s(1620) =< s(1628)
s(1621) =< s(1628)
s(1622) =< aux(289)
s(1623) =< aux(289)

Unbounded itvars
s(1612) :  sum(114),s(1534)
s(1613) :  sum(114),s(1543)
s(1614) :  sum(114),s(1544)
s(1615) :  sum(114),s(1545)
s(1616) :  sum(114),s(1546)
s(1617) :  sum(114),s(1547)
s(1637) :  sum(116),s(1591)
s(1638) :  sum(116),s(1595)
s(1639) :  sum(116),s(1596)
s(1640) :  sum(116),s(1602)
s(1641) :  sum(116),s(1603)
s(1642) :  sum(116),s(1604)
Some Itvars are unbounded [s(1741),s(1742),s(1743)] 
Changing solving method to compute the cost of the chain directly 

#### Computing cost of phase 118 

#### Computing cost of chain [118,125] with linear recursion

#### Computing cost of chain [[114,116],118,125] with linear recursion
 * Renamed intermediate variables: 
[ (it(114),s(1498))>>s(1526), (it(114),s(1499))>>s(1527), (it(114),s(1500))>>s(1528), (it(114),s(1501))>>s(1529), (it(114),s(1504))>>s(1530), (it(114),s(1497))>>s(1531), (it(114),aux(274))>>s(1532), (it(114),s(1505))>>s(1533), (it(114),s(1506))>>s(1534), (it(114),s(1507))>>s(1535), (it(114),s(1508))>>s(1536), (it(114),s(1509))>>s(1537), (it(114),s(1510))>>s(1538), (it(114),s(1511))>>s(1539), (it(114),s(1512))>>s(1540), (it(114),s(1513))>>s(1541), (it(114),s(1514))>>s(1542), (it(114),s(1515))>>s(1543), (it(114),s(1516))>>s(1544), (it(114),s(1517))>>s(1545), (it(114),s(1518))>>s(1546), (it(114),s(1519))>>s(1547), (it(114),s(1520))>>s(1548), (it(114),s(1521))>>s(1549), (it(114),s(1522))>>s(1550), (it(114),s(1523))>>s(1551), (it(114),s(1524))>>s(1552), (it(114),s(1525))>>s(1553)]
 * Renamed intermediate variables: 
[ (it(116),s(1555))>>s(1583), (it(116),s(1556))>>s(1584), (it(116),s(1557))>>s(1585), (it(116),s(1558))>>s(1586), (it(116),s(1561))>>s(1587), (it(116),s(1554))>>s(1588), (it(116),aux(275))>>s(1589), (it(116),s(1562))>>s(1590), (it(116),s(1563))>>s(1591), (it(116),s(1564))>>s(1592), (it(116),s(1565))>>s(1593), (it(116),s(1566))>>s(1594), (it(116),s(1567))>>s(1595), (it(116),s(1568))>>s(1596), (it(116),s(1569))>>s(1597), (it(116),s(1570))>>s(1598), (it(116),s(1571))>>s(1599), (it(116),s(1572))>>s(1600), (it(116),s(1573))>>s(1601), (it(116),s(1574))>>s(1602), (it(116),s(1575))>>s(1603), (it(116),s(1576))>>s(1604), (it(116),s(1577))>>s(1605), (it(116),s(1578))>>s(1606), (it(116),s(1579))>>s(1607), (it(116),s(1580))>>s(1608), (it(116),s(1581))>>s(1609), (it(116),s(1582))>>s(1610)]

#### Cost of loops [114,116] 

 * loop 114:echelon_helper(A,B,C,D,E,F,G,H,I,J) -> [echelon_helper(A',B',C',D',E',F',G',H',I',J')] 
16*s(1533)+244*s(1534)+120*s(1543)+80*s(1544)+40*s(1545)+40*s(1546)+40*s(1547)+80*s(1548)+80*s(1549)+64*s(1550)+64*s(1551)+64*s(1552)+64*s(1553)+40
  Such that:s(1526) =< A
s(1527) =< A-D'+1
s(1528) =< B
s(1529) =< 2*B
s(1530) =< D'+1
s(1531) =< 2*D'
s(1532) =< D'
s(1533) =< s(1532)
s(1534) =< s(1527)
s(1535) =< s(1528)-2
s(1536) =< s(1528)
s(1537) =< s(1534)*s(1528)
s(1535) =< s(1532)
s(1538) =< s(1532)
s(1539) =< s(1534)*s(1536)
s(1540) =< s(1534)*s(1532)
s(1541) =< s(1534)*s(1535)
s(1542) =< s(1534)*s(1538)
s(1543) =< s(1539)
s(1544) =< s(1541)
s(1545) =< s(1542)
s(1546) =< s(1537)
s(1547) =< s(1540)
s(1548) =< s(1530)
s(1549) =< s(1530)
s(1548) =< s(1528)
s(1550) =< s(1526)
s(1551) =< s(1526)
s(1550) =< s(1532)
s(1551) =< s(1532)
s(1550) =< s(1528)
s(1550) =< s(1529)
s(1550) =< s(1531)
s(1551) =< s(1531)
s(1552) =< s(1526)
s(1553) =< s(1526)
s(1552) =< s(1532)
s(1553) =< s(1532)
s(1552) =< s(1528)
s(1552) =< s(1529)

 * loop 116:echelon_helper(A,B,C,D,E,F,G,H,I,J) -> [echelon_helper(A',B',C',D',E',F',G',H',I',J')] 
16*s(1590)+448*s(1591)+240*s(1595)+80*s(1596)+80*s(1602)+40*s(1603)+40*s(1604)+80*s(1605)+80*s(1606)+64*s(1607)+64*s(1608)+64*s(1609)+64*s(1610)+40
  Such that:s(1583) =< A
s(1584) =< A-D'+1
s(1585) =< B
s(1586) =< 2*B
s(1587) =< D'+1
s(1588) =< 2*D'
s(1589) =< D'
s(1590) =< s(1589)
s(1591) =< s(1584)
s(1592) =< s(1585)
s(1593) =< s(1591)*s(1585)
s(1594) =< s(1591)*s(1592)
s(1595) =< s(1594)
s(1596) =< s(1593)
s(1597) =< s(1585)-2
s(1597) =< s(1589)
s(1598) =< s(1589)
s(1599) =< s(1591)*s(1589)
s(1600) =< s(1591)*s(1597)
s(1601) =< s(1591)*s(1598)
s(1602) =< s(1600)
s(1603) =< s(1601)
s(1604) =< s(1599)
s(1605) =< s(1587)
s(1606) =< s(1587)
s(1605) =< s(1585)
s(1607) =< s(1583)
s(1608) =< s(1583)
s(1607) =< s(1589)
s(1608) =< s(1589)
s(1607) =< s(1585)
s(1607) =< s(1586)
s(1607) =< s(1588)
s(1608) =< s(1588)
s(1609) =< s(1583)
s(1610) =< s(1583)
s(1609) =< s(1589)
s(1610) =< s(1589)
s(1609) =< s(1585)
s(1609) =< s(1586)

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [s(1532)=<B-1,s(1528)=<B,s(1585)=<B,s(1589)=<D+1]
* Psum in Loop 114: [it(114)=<1,s(1627)=<A,s(1635)=<A-D'+1,s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D']
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D']
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing max_min for s(1532)=<B-1  
   - Applying max/min strategy 
     - Loop 114  increases the expression by [-D+B'-2,B'-D'-1] 
     - Loop 116  increases the expression by [B'-1] 
 * Adding constraints:[s(1532)=<aux(386)+aux(387)+aux(388),aux(386)=<B-1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [s(1528)=<B,s(1585)=<B,s(1589)=<D+1]
* Psum in Loop 114: [it(114)=<1,s(1627)=<A,s(1635)=<A-D'+1,s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(387)=< -D+B'-2,aux(387)=<B'-D'-1]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing max_min for s(1528)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[s(1528)=<s(1532)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [s(1585)=<B,s(1589)=<D+1]
* Psum in Loop 114: [it(114)=<1,s(1627)=<A,s(1635)=<A-D'+1,s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(387)=< -D+B'-2,aux(387)=<B'-D'-1]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing max_min for s(1585)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[s(1585)=<s(1532)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [s(1589)=<D+1]
* Psum in Loop 114: [it(114)=<1,s(1627)=<A,s(1635)=<A-D'+1,s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(387)=< -D+B'-2,aux(387)=<B'-D'-1]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing max_min for s(1589)=<D+1  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(1589)=<D+E-1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [it(114)=<1,s(1627)=<A,s(1635)=<A-D'+1,s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(387)=< -D+B'-2,aux(387)=<B'-D'-1]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for it(114)=<1  in Loop 114 
   - Applying inductive sum strategy 
     - head Candidate: E-1 
       - Loop 116 is collaborative and bounds [it(116)] 
       - Chain-Tail [118,125] is collaborative and bounds [it([118,125])] 
     - head Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E-1 
       - Loop 116 is collaborative and bounds [it(116)] 
       - Chain-Tail [118,125] is collaborative and bounds [it([118,125])] 
     - tail Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(114)+it(116)+it([118,125])=<E-1,it(114)+it(116)+it([118,125])=<E-1,it(114)+it(116)+it([118,125])=<E-1,it(114)+it(116)+it([118,125])=<E-1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [s(1627)=<A,s(1635)=<A-D'+1,s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(387)=< -D+B'-2,aux(387)=<B'-D'-1]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for s(1627)=<A  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(389)=<A] 
 * Adding constraints: [s(1627)=<it(114)*aux(389)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(389)=<A]
* Psum in Loop 114: [s(1635)=<A-D'+1,s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(387)=< -D+B'-2,aux(387)=<B'-D'-1]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing max_min for aux(389)=<A  
   - Applying max/min strategy 
     - Loop 114  increases the expression by [A'-2*D'-1,A'/2-D'-1/2] 
     - Loop 116 does not increase the expression
 * Adding constraints:[aux(389)=<aux(390)+aux(391),aux(390)=<A] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [s(1635)=<A-D'+1,s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(387)=< -D+B'-2,aux(387)=<B'-D'-1,aux(391)=<A'-2*D'-1,aux(391)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for s(1635)=<A-D'+1  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(392)=<A-D] 
 * Adding constraints: [s(1635)=<it(114)*aux(392)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(392)=<A-D]
* Psum in Loop 114: [s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(387)=< -D+B'-2,aux(387)=<B'-D'-1,aux(391)=<A'-2*D'-1,aux(391)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing max_min for aux(392)=<A-D  
   - Applying max/min strategy 
     - Loop 114  increases the expression by [A'-2*D'-2,A'/2-D'-3/2] 
     - Loop 116 does not increase the expression
 * Adding constraints:[aux(392)=<aux(393)+aux(394),aux(393)=<A-D] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(387)=< -D+B'-2,aux(387)=<B'-D'-1,aux(394)=<A'-2*D'-2,aux(391)=<A'-2*D'-1,aux(394)=<A'/2-D'-3/2,aux(391)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for s(1625)=<B  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(395)=<B] 
 * Adding constraints: [s(1625)=<it(114)*aux(395)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(395)=<B]
* Psum in Loop 114: [s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(387)=< -D+B'-2,aux(387)=<B'-D'-1,aux(394)=<A'-2*D'-2,aux(391)=<A'-2*D'-1,aux(394)=<A'/2-D'-3/2,aux(391)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing max_min for aux(395)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(395)=<s(1532)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(387)=< -D+B'-2,aux(387)=<B'-D'-1,aux(394)=<A'-2*D'-2,aux(391)=<A'-2*D'-1,aux(394)=<A'/2-D'-3/2,aux(391)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for s(1624)=<2*B  in Loop 114 
   - Found a solution using cacheing 
 * Adding constraints: [s(1624)=<aux(396)*2,aux(396)=<it(114)*aux(395)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(387)=< -D+B'-2,aux(387)=<B'-D'-1,aux(394)=<A'-2*D'-2,aux(391)=<A'-2*D'-1,aux(394)=<A'/2-D'-3/2,aux(391)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for s(1626)=<D'  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(397)=<B-1,aux(397)=<D+1] 
 * Adding constraints: [s(1626)=<it(114)*aux(397)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(397)=<B-1,aux(397)=<D+1]
* Psum in Loop 114: [s(1629)=<D'+1,s(1628)=<2*D',aux(387)=< -D+B'-2,aux(387)=<B'-D'-1,aux(394)=<A'-2*D'-2,aux(391)=<A'-2*D'-1,aux(394)=<A'/2-D'-3/2,aux(391)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing max_min for aux(397)=<B-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(397)=<s(1532)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(397)=<D+1]
* Psum in Loop 114: [s(1629)=<D'+1,s(1628)=<2*D',aux(387)=< -D+B'-2,aux(387)=<B'-D'-1,aux(394)=<A'-2*D'-2,aux(391)=<A'-2*D'-1,aux(394)=<A'/2-D'-3/2,aux(391)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing max_min for aux(397)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(397)=<s(1589)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [s(1629)=<D'+1,s(1628)=<2*D',aux(387)=< -D+B'-2,aux(387)=<B'-D'-1,aux(394)=<A'-2*D'-2,aux(391)=<A'-2*D'-1,aux(394)=<A'/2-D'-3/2,aux(391)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for s(1629)=<D'+1  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(398)=<B,aux(398)=<D+2] 
 * Adding constraints: [s(1629)=<it(114)*aux(398)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(398)=<B,aux(398)=<D+2]
* Psum in Loop 114: [s(1628)=<2*D',aux(387)=< -D+B'-2,aux(387)=<B'-D'-1,aux(394)=<A'-2*D'-2,aux(391)=<A'-2*D'-1,aux(394)=<A'/2-D'-3/2,aux(391)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing max_min for aux(398)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(398)=<s(1532)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(398)=<D+2]
* Psum in Loop 114: [s(1628)=<2*D',aux(387)=< -D+B'-2,aux(387)=<B'-D'-1,aux(394)=<A'-2*D'-2,aux(391)=<A'-2*D'-1,aux(394)=<A'/2-D'-3/2,aux(391)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing max_min for aux(398)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(398)=<s(1589)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [s(1628)=<2*D',aux(387)=< -D+B'-2,aux(387)=<B'-D'-1,aux(394)=<A'-2*D'-2,aux(391)=<A'-2*D'-1,aux(394)=<A'/2-D'-3/2,aux(391)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for s(1628)=<2*D'  in Loop 114 
   - Found a solution using cacheing 
 * Adding constraints: [s(1628)=<aux(399)*2,aux(399)=<it(114)*aux(397)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(387)=< -D+B'-2,aux(387)=<B'-D'-1,aux(394)=<A'-2*D'-2,aux(391)=<A'-2*D'-1,aux(394)=<A'/2-D'-3/2,aux(391)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for aux(387)=< -D+B'-2  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [] 
 * Adding constraints: [aux(387)=<it(114)*aux(400)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(387)=<B'-D'-1,aux(394)=<A'-2*D'-2,aux(391)=<A'-2*D'-1,aux(394)=<A'/2-D'-3/2,aux(391)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for aux(387)=<B'-D'-1  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [] 
 * Adding constraints: [aux(387)=<it(114)*aux(401)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(394)=<A'-2*D'-2,aux(391)=<A'-2*D'-1,aux(394)=<A'/2-D'-3/2,aux(391)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for aux(394)=<A'-2*D'-2  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(402)=<2*A-4*D-7] 
 * Adding constraints: [aux(394)=<it(114)*aux(402)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(402)=<2*A-4*D-7]
* Psum in Loop 114: [aux(391)=<A'-2*D'-1,aux(394)=<A'/2-D'-3/2,aux(391)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing max_min for aux(402)=<2*A-4*D-7  
   - Applying max/min strategy 
     - Loop 114  increases the expression by [2*A'-4*D'-6,A'-2*D'-5] 
     - Loop 116 does not increase the expression
 * Adding constraints:[aux(402)=<aux(403)+aux(404),aux(403)=<2*A-4*D-7] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(391)=<A'-2*D'-1,aux(394)=<A'/2-D'-3/2,aux(391)=<A'/2-D'-1/2,aux(404)=<A'-2*D'-5,aux(404)=<2*A'-4*D'-6]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for aux(391)=<A'-2*D'-1  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(405)=<2*A-4*D-6] 
 * Adding constraints: [aux(391)=<it(114)*aux(405)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(405)=<2*A-4*D-6]
* Psum in Loop 114: [aux(394)=<A'/2-D'-3/2,aux(391)=<A'/2-D'-1/2,aux(404)=<A'-2*D'-5,aux(404)=<2*A'-4*D'-6]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing max_min for aux(405)=<2*A-4*D-6  
   - Found a solution using cacheing 
 * Adding constraints:[aux(405)=<aux(402)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(394)=<A'/2-D'-3/2,aux(391)=<A'/2-D'-1/2,aux(404)=<A'-2*D'-5,aux(404)=<2*A'-4*D'-6]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for aux(394)=<A'/2-D'-3/2  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(406)=<A-2*D-4] 
 * Adding constraints: [aux(394)=<it(114)*aux(406)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(406)=<A-2*D-4]
* Psum in Loop 114: [aux(391)=<A'/2-D'-1/2,aux(404)=<A'-2*D'-5,aux(404)=<2*A'-4*D'-6]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing max_min for aux(406)=<A-2*D-4  
   - Found a solution using cacheing 
 * Adding constraints:[aux(406)=<aux(402)* (1/2)-1/2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(391)=<A'/2-D'-1/2,aux(404)=<A'-2*D'-5,aux(404)=<2*A'-4*D'-6]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for aux(391)=<A'/2-D'-1/2  in Loop 114 
   - Found a solution using cacheing 
 * Adding constraints: [aux(391)=<aux(407)* (1/2),aux(407)=<it(114)*aux(405)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(404)=<A'-2*D'-5,aux(404)=<2*A'-4*D'-6]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for aux(404)=<A'-2*D'-5  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(408)=<2*A-4*D-10] 
 * Adding constraints: [aux(404)=<it(114)*aux(408)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(408)=<2*A-4*D-10]
* Psum in Loop 114: [aux(404)=<2*A'-4*D'-6]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing max_min for aux(408)=<2*A-4*D-10  
   - Found a solution using cacheing 
 * Adding constraints:[aux(408)=<aux(402)-3] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(404)=<2*A'-4*D'-6]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for aux(404)=<2*A'-4*D'-6  in Loop 114 
   - Found a solution using cacheing 
 * Adding constraints: [aux(404)=<aux(409)*4,aux(409)=<it(114)*aux(406)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for it(116)=<1  in Loop 116 
   - Applying inductive sum strategy 
     - head Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A/2-2 
       - Loop 114 has a reset to  [A-D-7/2]
       - Chain-Tail [118,125] is collaborative and bounds [it([118,125])] 
     - head Candidate: A/3-D/3-1 
       - Loop 114 has a reset to  [2/3*A-D-7/3]
       - Chain-Tail [118,125] is collaborative
     - head Candidate: A/4-D/2-1/2 
       - Loop 114 has a reset to  [A/2-D-7/4]
       - Chain-Tail [118,125] is collaborative
     - tail Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A/2-2 
       - Loop 114 has undefined behavior 
     - tail Candidate: A/3-D/3-1 
       - Loop 114 has undefined behavior 
     - tail Candidate: A/4-D/2-1/2 
       - Loop 114 has undefined behavior 
 * Adding constraints: [it(116)+it([118,125])=<aux(410)+aux(411),it(116)=<aux(412)+aux(413),it(116)=<aux(414)+aux(415),it(114)+it(116)+it([118,125])=<E-1,it(114)+it(116)+it([118,125])=<E-1,aux(411)=<A/2-2,aux(413)=<A/3-D/3-1,aux(415)=<A/4-D/2-1/2,it(114)+it(116)+it([118,125])=<E-1,it(114)+it(116)+it([118,125])=<E-1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(410)=<A-D-7/2,aux(414)=<A/2-D-7/4,aux(412)=<2/3*A-D-7/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for aux(410)=<A-D-7/2  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(416)=<A-D-7/2] 
 * Adding constraints: [aux(410)=<it(114)*aux(416)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(416)=<A-D-7/2]
* Psum in Loop 114: [aux(414)=<A/2-D-7/4,aux(412)=<2/3*A-D-7/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing max_min for aux(416)=<A-D-7/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(416)=<aux(392)-7/2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(414)=<A/2-D-7/4,aux(412)=<2/3*A-D-7/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for aux(414)=<A/2-D-7/4  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(417)=<A/2-D-7/4] 
 * Adding constraints: [aux(414)=<it(114)*aux(417)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(417)=<A/2-D-7/4]
* Psum in Loop 114: [aux(412)=<2/3*A-D-7/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing max_min for aux(417)=<A/2-D-7/4  
   - Found a solution using cacheing 
 * Adding constraints:[aux(417)=<aux(402)* (1/4)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(412)=<2/3*A-D-7/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for aux(412)=<2/3*A-D-7/3  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(418)=<2/3*A-D-7/3] 
 * Adding constraints: [aux(412)=<it(114)*aux(418)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(418)=<2/3*A-D-7/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing max_min for aux(418)=<2/3*A-D-7/3  
   - Applying max/min strategy 
     - Loop 114  increases the expression by [2/3*A'-4/3*D'-5/3,A'/3-2/3*D'-4/3] 
     - Loop 116 does not increase the expression
 * Adding constraints:[aux(418)=<aux(419)+aux(420),aux(419)=<2/3*A-D-7/3] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(420)=<A'/3-2/3*D'-4/3,aux(420)=<2/3*A'-4/3*D'-5/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for aux(420)=<A'/3-2/3*D'-4/3  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(421)=<2/3*A-4/3*D-3] 
 * Adding constraints: [aux(420)=<it(114)*aux(421)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(421)=<2/3*A-4/3*D-3]
* Psum in Loop 114: [aux(420)=<2/3*A'-4/3*D'-5/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing max_min for aux(421)=<2/3*A-4/3*D-3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(421)=<aux(402)* (1/3)-2/3] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(420)=<2/3*A'-4/3*D'-5/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for aux(420)=<2/3*A'-4/3*D'-5/3  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(422)=<4/3*A-8/3*D-5] 
 * Adding constraints: [aux(420)=<it(114)*aux(422)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(422)=<4/3*A-8/3*D-5]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing max_min for aux(422)=<4/3*A-8/3*D-5  
   - Found a solution using cacheing 
 * Adding constraints:[aux(422)=<aux(402)* (2/3)-1/3] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for s(1652)=<A  in Loop 116 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(423)=<A] 
 * Adding constraints: [s(1652)=<it(116)*aux(423)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(423)=<A]
* Psum in Loop 116: [s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing max_min for aux(423)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(423)=<aux(389)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for s(1660)=<A-D'+1  in Loop 116 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(424)=<A-D] 
 * Adding constraints: [s(1660)=<it(116)*aux(424)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(424)=<A-D]
* Psum in Loop 116: [s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing max_min for aux(424)=<A-D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(424)=<aux(392)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for s(1650)=<B  in Loop 116 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(425)=<B] 
 * Adding constraints: [s(1650)=<it(116)*aux(425)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(425)=<B]
* Psum in Loop 116: [s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing max_min for aux(425)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(425)=<s(1532)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for s(1649)=<2*B  in Loop 116 
   - Found a solution using cacheing 
 * Adding constraints: [s(1649)=<aux(426)*2,aux(426)=<it(116)*aux(425)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [it([118,125])=<1,s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for s(1651)=<D'  in Loop 116 
   - Applying inductive sum strategy 
     - head Candidate: A-D-2 
       - Loop 114 has a reset to  [2*A-3*D-6]
       - Chain-Tail [118,125] is collaborative and bounds [it([118,125])] 
     - head Candidate: A-3 
       - Loop 114 has a reset to  [2*A-2*D-6]
       - Chain-Tail [118,125] is collaborative and bounds [it([118,125])] 
     - tail Candidate: A-D-2 
       - Loop 114 has undefined behavior 
     - tail Candidate: A-3 
       - Loop 114 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(431)=<D+1,aux(431)=<A/2-1/2] 
 * Adding constraints: [s(1651)=<it(116)*aux(431),it([118,125])+s(1651)=<aux(427)+aux(428),it([118,125])+s(1651)=<aux(429)+aux(430),aux(428)=<A-D-2,aux(430)=<A-3] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(431)=<A/2-1/2,aux(431)=<D+1]
* Psum in Loop 114: [aux(427)=<2*A-3*D-6,aux(429)=<2*A-2*D-6]
* Psum in Loop 116: [s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing max_min for aux(431)=<A/2-1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(431)=<aux(389)* (1/2)-1/2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(431)=<D+1]
* Psum in Loop 114: [aux(427)=<2*A-3*D-6,aux(429)=<2*A-2*D-6]
* Psum in Loop 116: [s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing max_min for aux(431)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(431)=<s(1589)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(427)=<2*A-3*D-6,aux(429)=<2*A-2*D-6]
* Psum in Loop 116: [s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for aux(427)=<2*A-3*D-6  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(432)=<2*A-3*D-6] 
 * Adding constraints: [aux(427)=<it(114)*aux(432)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(432)=<2*A-3*D-6]
* Psum in Loop 114: [aux(429)=<2*A-2*D-6]
* Psum in Loop 116: [s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing max_min for aux(432)=<2*A-3*D-6  
   - Found a solution using cacheing 
 * Adding constraints:[aux(432)=<aux(418)*3+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(429)=<2*A-2*D-6]
* Psum in Loop 116: [s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for aux(429)=<2*A-2*D-6  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(433)=<2*A-2*D-6] 
 * Adding constraints: [aux(429)=<it(114)*aux(433)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(433)=<2*A-2*D-6]
* Psum in Loop 116: [s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing max_min for aux(433)=<2*A-2*D-6  
   - Found a solution using cacheing 
 * Adding constraints:[aux(433)=<aux(392)*2-6] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [s(1654)=<D'+1,s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1767)=<D,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for s(1654)=<D'+1  in Loop 116 
   - Applying inductive sum strategy 
     - head Candidate: 3/2*A-9/2 
       - Loop 114 has a reset to  [3*A-3*D-9]
       - Chain-Tail [118,125] is collaborative and bounds [s(1767)] 
     - head Candidate: A+E-3 
       - Loop 114 has a reset to  [2*A-2*D+E-7]
       - Chain-Tail [118,125] is collaborative and bounds [s(1767)] 
     - tail Candidate: 3/2*A-9/2 
       - Loop 114 has undefined behavior 
     - tail Candidate: A+E-3 
       - Loop 114 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(438)=<D+2,aux(438)=<A/2+1/2] 
 * Adding constraints: [s(1654)=<it(116)*aux(438),s(1654)+s(1767)=<aux(434)+aux(435),s(1654)+s(1767)=<aux(436)+aux(437),aux(435)=<3/2*A-9/2,aux(437)=<A+E-3] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(438)=<A/2+1/2,aux(438)=<D+2]
* Psum in Loop 114: [aux(436)=<2*A-2*D+E-7,aux(434)=<3*A-3*D-9]
* Psum in Loop 116: [s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing max_min for aux(438)=<A/2+1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(438)=<aux(389)* (1/2)+1/2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(438)=<D+2]
* Psum in Loop 114: [aux(436)=<2*A-2*D+E-7,aux(434)=<3*A-3*D-9]
* Psum in Loop 116: [s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing max_min for aux(438)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(438)=<s(1589)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(436)=<2*A-2*D+E-7,aux(434)=<3*A-3*D-9]
* Psum in Loop 116: [s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for aux(436)=<2*A-2*D+E-7  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(439)=<2*A-2*D+E-7] 
 * Adding constraints: [aux(436)=<it(114)*aux(439)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(439)=<2*A-2*D+E-7]
* Psum in Loop 114: [aux(434)=<3*A-3*D-9]
* Psum in Loop 116: [s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing max_min for aux(439)=<2*A-2*D+E-7  
   - Applying max/min strategy 
     - Loop 114  increases the expression by [2*A'-4*D'-5,A'-2*D'-4] 
     - Loop 116 does not increase the expression
 * Adding constraints:[aux(439)=<aux(440)+aux(441),aux(440)=<2*A-2*D+E-7] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(434)=<3*A-3*D-9,aux(441)=<A'-2*D'-4,aux(441)=<2*A'-4*D'-5]
* Psum in Loop 116: [s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for aux(434)=<3*A-3*D-9  in Loop 114 
   - Found a solution using cacheing 
 * Adding constraints: [aux(434)=<aux(442)* (3/2),aux(442)=<it(114)*aux(433)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(441)=<A'-2*D'-4,aux(441)=<2*A'-4*D'-5]
* Psum in Loop 116: [s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for aux(441)=<A'-2*D'-4  in Loop 114 
   - Found a solution using cacheing 
 * Adding constraints: [aux(441)=<aux(443)*3,aux(443)=<it(114)*aux(421)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(441)=<2*A'-4*D'-5]
* Psum in Loop 116: [s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for aux(441)=<2*A'-4*D'-5  in Loop 114 
   - Found a solution using cacheing 
 * Adding constraints: [aux(441)=<aux(444)*3,aux(444)=<it(114)*aux(422)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [s(1653)=<2*D',aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for s(1653)=<2*D'  in Loop 116 
   - Found a solution using cacheing 
 * Adding constraints: [s(1653)=<aux(445)*2,aux(445)=<it(116)*aux(431),aux(445)+it([118,125])=<aux(427)+aux(428),aux(445)+it([118,125])=<aux(429)+aux(430)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [aux(388)=<B'-1]
* Psum in Chain-Tail [118,125]: [s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for aux(388)=<B'-1  in Loop 116 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [] 
 * Adding constraints: [aux(388)=<it(116)*aux(446)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [118,125]: [s(1764)=<A,s(1762)=<B,s(1761)=<2*B,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for s(1764)=<A  in Chain-Tail [118,125] 
   - Applying inductive sum strategy 
     - head Candidate: A 
       - Loop 114 has a reset to  [2*A-2*D-3]
       - Loop 116 is collaborative
     - tail Candidate: A 
       - Loop 114 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(449)=<A] 
 * Adding constraints: [s(1764)=<it([118,125])*aux(449),s(1764)=<aux(447)+aux(448),aux(448)=<A] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(449)=<A]
* Psum in Loop 114: [aux(447)=<2*A-2*D-3]
* Psum in Chain-Tail [118,125]: [s(1762)=<B,s(1761)=<2*B,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing max_min for aux(449)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(449)=<aux(389)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(447)=<2*A-2*D-3]
* Psum in Chain-Tail [118,125]: [s(1762)=<B,s(1761)=<2*B,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for aux(447)=<2*A-2*D-3  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(450)=<2*A-2*D-3] 
 * Adding constraints: [aux(447)=<it(114)*aux(450)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(450)=<2*A-2*D-3]
* Psum in Chain-Tail [118,125]: [s(1762)=<B,s(1761)=<2*B,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing max_min for aux(450)=<2*A-2*D-3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(450)=<aux(392)*2-3] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [118,125]: [s(1762)=<B,s(1761)=<2*B,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for s(1762)=<B  in Chain-Tail [118,125] 
   - Applying inductive sum strategy 
     - head Candidate: B 
       - Loop 114 has undefined behavior 
     - tail Candidate: B 
       - Loop 114 has undefined behavior 
     - head Candidate: B 
       - We failed to classify this candidate before 
     - tail Candidate: B 
       - We failed to classify this candidate before 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(451)=<B] 
 * Adding constraints: [s(1762)=<it([118,125])*aux(451)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(451)=<B]
* Psum in Chain-Tail [118,125]: [s(1761)=<2*B,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing max_min for aux(451)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(451)=<s(1532)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [118,125]: [s(1761)=<2*B,s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for s(1761)=<2*B  in Chain-Tail [118,125] 
   - Found a solution using cacheing 
 * Adding constraints: [s(1761)=<aux(452)*2,aux(452)=<it([118,125])*aux(451)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [118,125]: [s(1763)=<D+1,s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for s(1763)=<D+1  in Chain-Tail [118,125] 
   - Applying inductive sum strategy 
     - head Candidate: D+E-1 
       - Loop 114 is collaborative
       - Loop 116 is collaborative
     - tail Candidate: D+E-1 
       - Loop 114 is collaborative
       - Loop 116 is collaborative
 * Adding constraints: [s(1763)=<D+E-1,s(1763)=<D+E-1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [118,125]: [s(1766)=<D+2,s(1765)=<2*D+2]

###### Computing sum for s(1766)=<D+2  in Chain-Tail [118,125] 
   - Applying inductive sum strategy 
     - head Candidate: D+E 
       - Loop 114 is collaborative
       - Loop 116 is collaborative
     - tail Candidate: D+E 
       - Loop 114 is collaborative
       - Loop 116 is collaborative
 * Adding constraints: [s(1766)=<D+E,s(1766)=<D+E] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [118,125]: [s(1765)=<2*D+2]

###### Computing sum for s(1765)=<2*D+2  in Chain-Tail [118,125] 
   - Found a solution using cacheing 
 * Adding constraints: [s(1765)=<aux(453)*2,aux(453)=<D+E-1,aux(453)=<D+E-1] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [114,116,[118,125]] 
Found a cycle in the non-final constraints
 Removed possibly redundant constraints to solve a cycle in the cost structure 
it(116)+it([118,125])=<aux(410)+aux(411)
it(116)=<aux(412)+aux(413)
it(116)=<aux(414)+aux(415)
Found a cycle in the non-final constraints
 Removed possibly redundant constraints to solve a cycle in the cost structure 
aux(431)=<aux(389)* (1/2)-1/2
aux(438)=<aux(389)* (1/2)+1/2
Found a cycle in the non-final constraints
 Removed possibly redundant constraints to solve a cycle in the cost structure 
it([118,125])+s(1651)=<aux(427)+aux(428)
it([118,125])+s(1651)=<aux(429)+aux(430)
aux(445)+it([118,125])=<aux(427)+aux(428)
aux(445)+it([118,125])=<aux(429)+aux(430)
Found a cycle in the non-final constraints
Could not solve cycle in cost structure.
 Discarded constraints:  
aux(450)=<aux(392)*2-3
aux(449)=<aux(389)
aux(439)=<aux(440)+aux(441)
aux(433)=<aux(392)*2-6
aux(432)=<aux(418)*3+1
aux(424)=<aux(392)
aux(423)=<aux(389)
aux(422)=<aux(402)* (2/3)-1/3
aux(421)=<aux(402)* (1/3)-2/3
aux(418)=<aux(419)+aux(420)
aux(417)=<aux(402)* (1/4)
aux(416)=<aux(392)-7/2
aux(408)=<aux(402)-3
aux(406)=<aux(402)* (1/2)-1/2
aux(405)=<aux(402)+1
aux(402)=<aux(403)+aux(404)
aux(392)=<aux(393)+aux(394)
aux(389)=<aux(390)+aux(391)
aux(447)=<it(114)*aux(450)
s(1764)=<aux(447)+aux(448)
s(1764)=<it([118,125])*aux(449)
aux(444)=<it(114)*aux(422)
aux(441)=<aux(444)*3
aux(443)=<it(114)*aux(421)
aux(441)=<aux(443)*3
aux(442)=<it(114)*aux(433)
aux(434)=<aux(442)* (3/2)
aux(436)=<it(114)*aux(439)
s(1654)+s(1767)=<aux(436)+aux(437)
s(1654)+s(1767)=<aux(434)+aux(435)
aux(429)=<it(114)*aux(433)
aux(427)=<it(114)*aux(432)
s(1660)=<it(116)*aux(424)
s(1652)=<it(116)*aux(423)
aux(420)=<it(114)*aux(422)
aux(420)=<it(114)*aux(421)
aux(412)=<it(114)*aux(418)
aux(414)=<it(114)*aux(417)
aux(410)=<it(114)*aux(416)
aux(409)=<it(114)*aux(406)
aux(404)=<aux(409)*4
aux(404)=<it(114)*aux(408)
aux(407)=<it(114)*aux(405)
aux(391)=<aux(407)* (1/2)
aux(394)=<it(114)*aux(406)
aux(391)=<it(114)*aux(405)
aux(394)=<it(114)*aux(402)
s(1635)=<it(114)*aux(392)
s(1627)=<it(114)*aux(389)

#### Simplifying cost structure of phase [114,116,[118,125]] 
 * Joined equivalent variables [aux(454),aux(390),aux(430),aux(448)] into aux(454)
 * Joined equivalent variables [aux(455),aux(393),aux(428)] into aux(455)
 * Joined equivalent variables [aux(456),aux(453),s(1589),s(1763),s(1766)] into aux(456)
 * Joined equivalent variables [aux(431),s(1598)] into aux(431)
 * Joined equivalent variables [aux(395),aux(425),aux(451),s(1528),s(1585)] into aux(395)
 * Joined equivalent variables [aux(426),s(1650)] into aux(426)
 * Joined equivalent variables [aux(399),s(1626)] into aux(399)
 * Joined equivalent variables [aux(396),s(1625)] into aux(396)
 * Joined equivalent variables [aux(445),s(1651)] into aux(445)
 * Joined equivalent variables [aux(452),s(1762)] into aux(452)
 * Joined equivalent variables [it(114),it(116),it([118,125])] into it(114)
 * Joined equivalent variables [aux(396),aux(426),aux(452)] into aux(396)
 * Joined equivalent variables [s(1536),s(1592)] into s(1536)
 * Joined equivalent variables [s(1624),s(1649),s(1761)] into s(1624)

#### Cost of phase [114,116]:echelon_helper(A,B,C,D,E,F,G,H,I,J) -> [] 
123*it(114)+16*s(1611)+244*s(1612)+120*s(1613)+80*s(1614)+40*s(1615)+40*s(1616)+40*s(1617)+80*s(1618)+80*s(1619)+64*s(1620)+64*s(1621)+64*s(1622)+64*s(1623)+16*s(1636)+448*s(1637)+240*s(1638)+80*s(1639)+80*s(1640)+40*s(1641)+40*s(1642)+80*s(1643)+80*s(1644)+64*s(1645)+64*s(1646)+64*s(1647)+64*s(1648)+16*s(1754)+80*s(1755)+80*s(1756)+64*s(1757)+64*s(1758)+64*s(1759)+64*s(1760)+0
  Such that:aux(456) =< D+E
aux(457) =< E
it(114) =< aux(457)
aux(438) =< aux(456)+1
aux(431) =< aux(456)
aux(398) =< aux(456)+1
aux(397) =< aux(456)
s(1765) =< aux(456)*2
aux(399) =< it(114)*aux(397)
s(1629) =< it(114)*aux(398)
s(1628) =< aux(399)*2
aux(445) =< it(114)*aux(431)
s(1654) =< it(114)*aux(438)
s(1653) =< aux(445)*2
s(1755) =< aux(456)
s(1756) =< aux(456)
s(1757) =< aux(456)
s(1758) =< aux(456)
s(1757) =< s(1765)
s(1758) =< s(1765)
s(1759) =< aux(456)
s(1760) =< aux(456)
s(1636) =< aux(445)
s(1643) =< s(1654)
s(1644) =< s(1654)
s(1645) =< aux(445)
s(1646) =< aux(445)
s(1645) =< s(1653)
s(1646) =< s(1653)
s(1647) =< aux(445)
s(1648) =< aux(445)
s(1611) =< aux(399)
s(1618) =< s(1629)
s(1619) =< s(1629)
s(1620) =< aux(399)
s(1621) =< aux(399)
s(1620) =< s(1628)
s(1621) =< s(1628)
s(1622) =< aux(399)
s(1623) =< aux(399)

Unbounded itvars
s(1612) :  sum(114),s(1534)
s(1613) :  sum(114),s(1543)
s(1614) :  sum(114),s(1544)
s(1615) :  sum(114),s(1545)
s(1616) :  sum(114),s(1546)
s(1617) :  sum(114),s(1547)
s(1637) :  sum(116),s(1591)
s(1638) :  sum(116),s(1595)
s(1639) :  sum(116),s(1596)
s(1640) :  sum(116),s(1602)
s(1641) :  sum(116),s(1603)
s(1642) :  sum(116),s(1604)
s(1754) :  sum([118,125]),s(1747)

#### Found solution for phase  [114,116] in the cache 

#### Cost of phase [114,116]:echelon_helper(A,B,C,D,E,F,G,H,I,J) -> [echelon_helper(A',B',C',D',E',F',G',H',I',J')] 
80*it(114)+16*s(1611)+244*s(1612)+120*s(1613)+80*s(1614)+40*s(1615)+40*s(1616)+40*s(1617)+80*s(1618)+80*s(1619)+64*s(1620)+64*s(1621)+64*s(1622)+64*s(1623)+16*s(1636)+448*s(1637)+240*s(1638)+80*s(1639)+80*s(1640)+40*s(1641)+40*s(1642)+80*s(1643)+80*s(1644)+64*s(1645)+64*s(1646)+64*s(1647)+64*s(1648)+0
  Such that:s(1589) =< D+E
aux(339) =< E
aux(340) =< E-E'
it(114) =< aux(339)
it(114) =< aux(340)
aux(328) =< s(1589)+1
aux(321) =< s(1589)
aux(288) =< s(1589)+1
aux(287) =< s(1589)
aux(289) =< it(114)*aux(287)
s(1629) =< it(114)*aux(288)
s(1628) =< aux(289)*2
aux(335) =< it(114)*aux(321)
s(1654) =< it(114)*aux(328)
s(1653) =< aux(335)*2
s(1636) =< aux(335)
s(1643) =< s(1654)
s(1644) =< s(1654)
s(1645) =< aux(335)
s(1646) =< aux(335)
s(1645) =< s(1653)
s(1646) =< s(1653)
s(1647) =< aux(335)
s(1648) =< aux(335)
s(1611) =< aux(289)
s(1618) =< s(1629)
s(1619) =< s(1629)
s(1620) =< aux(289)
s(1621) =< aux(289)
s(1620) =< s(1628)
s(1621) =< s(1628)
s(1622) =< aux(289)
s(1623) =< aux(289)

Unbounded itvars
s(1612) :  sum(114),s(1534)
s(1613) :  sum(114),s(1543)
s(1614) :  sum(114),s(1544)
s(1615) :  sum(114),s(1545)
s(1616) :  sum(114),s(1546)
s(1617) :  sum(114),s(1547)
s(1637) :  sum(116),s(1591)
s(1638) :  sum(116),s(1595)
s(1639) :  sum(116),s(1596)
s(1640) :  sum(116),s(1602)
s(1641) :  sum(116),s(1603)
s(1642) :  sum(116),s(1604)
Some Itvars are unbounded [s(1663),s(1664)] 
Changing solving method to compute the cost of the chain directly 

#### Computing cost of chain [[114,116],117,125] with linear recursion
 * Renamed intermediate variables: 
[ (it(114),s(1498))>>s(1526), (it(114),s(1499))>>s(1527), (it(114),s(1500))>>s(1528), (it(114),s(1501))>>s(1529), (it(114),s(1504))>>s(1530), (it(114),s(1497))>>s(1531), (it(114),aux(274))>>s(1532), (it(114),s(1505))>>s(1533), (it(114),s(1506))>>s(1534), (it(114),s(1507))>>s(1535), (it(114),s(1508))>>s(1536), (it(114),s(1509))>>s(1537), (it(114),s(1510))>>s(1538), (it(114),s(1511))>>s(1539), (it(114),s(1512))>>s(1540), (it(114),s(1513))>>s(1541), (it(114),s(1514))>>s(1542), (it(114),s(1515))>>s(1543), (it(114),s(1516))>>s(1544), (it(114),s(1517))>>s(1545), (it(114),s(1518))>>s(1546), (it(114),s(1519))>>s(1547), (it(114),s(1520))>>s(1548), (it(114),s(1521))>>s(1549), (it(114),s(1522))>>s(1550), (it(114),s(1523))>>s(1551), (it(114),s(1524))>>s(1552), (it(114),s(1525))>>s(1553)]
 * Renamed intermediate variables: 
[ (it(116),s(1555))>>s(1583), (it(116),s(1556))>>s(1584), (it(116),s(1557))>>s(1585), (it(116),s(1558))>>s(1586), (it(116),s(1561))>>s(1587), (it(116),s(1554))>>s(1588), (it(116),aux(275))>>s(1589), (it(116),s(1562))>>s(1590), (it(116),s(1563))>>s(1591), (it(116),s(1564))>>s(1592), (it(116),s(1565))>>s(1593), (it(116),s(1566))>>s(1594), (it(116),s(1567))>>s(1595), (it(116),s(1568))>>s(1596), (it(116),s(1569))>>s(1597), (it(116),s(1570))>>s(1598), (it(116),s(1571))>>s(1599), (it(116),s(1572))>>s(1600), (it(116),s(1573))>>s(1601), (it(116),s(1574))>>s(1602), (it(116),s(1575))>>s(1603), (it(116),s(1576))>>s(1604), (it(116),s(1577))>>s(1605), (it(116),s(1578))>>s(1606), (it(116),s(1579))>>s(1607), (it(116),s(1580))>>s(1608), (it(116),s(1581))>>s(1609), (it(116),s(1582))>>s(1610)]

#### Cost of loops [114,116] 

 * loop 114:echelon_helper(A,B,C,D,E,F,G,H,I,J) -> [echelon_helper(A',B',C',D',E',F',G',H',I',J')] 
16*s(1533)+244*s(1534)+120*s(1543)+80*s(1544)+40*s(1545)+40*s(1546)+40*s(1547)+80*s(1548)+80*s(1549)+64*s(1550)+64*s(1551)+64*s(1552)+64*s(1553)+40
  Such that:s(1526) =< A
s(1527) =< A-D'+1
s(1528) =< B
s(1529) =< 2*B
s(1530) =< D'+1
s(1531) =< 2*D'
s(1532) =< D'
s(1533) =< s(1532)
s(1534) =< s(1527)
s(1535) =< s(1528)-2
s(1536) =< s(1528)
s(1537) =< s(1534)*s(1528)
s(1535) =< s(1532)
s(1538) =< s(1532)
s(1539) =< s(1534)*s(1536)
s(1540) =< s(1534)*s(1532)
s(1541) =< s(1534)*s(1535)
s(1542) =< s(1534)*s(1538)
s(1543) =< s(1539)
s(1544) =< s(1541)
s(1545) =< s(1542)
s(1546) =< s(1537)
s(1547) =< s(1540)
s(1548) =< s(1530)
s(1549) =< s(1530)
s(1548) =< s(1528)
s(1550) =< s(1526)
s(1551) =< s(1526)
s(1550) =< s(1532)
s(1551) =< s(1532)
s(1550) =< s(1528)
s(1550) =< s(1529)
s(1550) =< s(1531)
s(1551) =< s(1531)
s(1552) =< s(1526)
s(1553) =< s(1526)
s(1552) =< s(1532)
s(1553) =< s(1532)
s(1552) =< s(1528)
s(1552) =< s(1529)

 * loop 116:echelon_helper(A,B,C,D,E,F,G,H,I,J) -> [echelon_helper(A',B',C',D',E',F',G',H',I',J')] 
16*s(1590)+448*s(1591)+240*s(1595)+80*s(1596)+80*s(1602)+40*s(1603)+40*s(1604)+80*s(1605)+80*s(1606)+64*s(1607)+64*s(1608)+64*s(1609)+64*s(1610)+40
  Such that:s(1583) =< A
s(1584) =< A-D'+1
s(1585) =< B
s(1586) =< 2*B
s(1587) =< D'+1
s(1588) =< 2*D'
s(1589) =< D'
s(1590) =< s(1589)
s(1591) =< s(1584)
s(1592) =< s(1585)
s(1593) =< s(1591)*s(1585)
s(1594) =< s(1591)*s(1592)
s(1595) =< s(1594)
s(1596) =< s(1593)
s(1597) =< s(1585)-2
s(1597) =< s(1589)
s(1598) =< s(1589)
s(1599) =< s(1591)*s(1589)
s(1600) =< s(1591)*s(1597)
s(1601) =< s(1591)*s(1598)
s(1602) =< s(1600)
s(1603) =< s(1601)
s(1604) =< s(1599)
s(1605) =< s(1587)
s(1606) =< s(1587)
s(1605) =< s(1585)
s(1607) =< s(1583)
s(1608) =< s(1583)
s(1607) =< s(1589)
s(1608) =< s(1589)
s(1607) =< s(1585)
s(1607) =< s(1586)
s(1607) =< s(1588)
s(1608) =< s(1588)
s(1609) =< s(1583)
s(1610) =< s(1583)
s(1609) =< s(1589)
s(1610) =< s(1589)
s(1609) =< s(1585)
s(1609) =< s(1586)

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [s(1532)=<B-1,s(1528)=<B,s(1585)=<B,s(1589)=<D+1]
* Psum in Loop 114: [it(114)=<1,s(1627)=<A,s(1635)=<A-D'+1,s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D']
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D']
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for s(1532)=<B-1  
   - Applying max/min strategy 
     - Loop 114  increases the expression by [-D+B'-2,B'-D'-1] 
     - Loop 116  increases the expression by [B'-1] 
 * Adding constraints:[s(1532)=<aux(458)+aux(459)+aux(460),aux(458)=<B-1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [s(1528)=<B,s(1585)=<B,s(1589)=<D+1]
* Psum in Loop 114: [it(114)=<1,s(1627)=<A,s(1635)=<A-D'+1,s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(459)=< -D+B'-2,aux(459)=<B'-D'-1]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for s(1528)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[s(1528)=<s(1532)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [s(1585)=<B,s(1589)=<D+1]
* Psum in Loop 114: [it(114)=<1,s(1627)=<A,s(1635)=<A-D'+1,s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(459)=< -D+B'-2,aux(459)=<B'-D'-1]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for s(1585)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[s(1585)=<s(1532)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [s(1589)=<D+1]
* Psum in Loop 114: [it(114)=<1,s(1627)=<A,s(1635)=<A-D'+1,s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(459)=< -D+B'-2,aux(459)=<B'-D'-1]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for s(1589)=<D+1  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(1589)=<D+E-1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [it(114)=<1,s(1627)=<A,s(1635)=<A-D'+1,s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(459)=< -D+B'-2,aux(459)=<B'-D'-1]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for it(114)=<1  in Loop 114 
   - Applying inductive sum strategy 
     - head Candidate: E-1 
       - Loop 116 is collaborative and bounds [it(116)] 
       - Chain-Tail [117,125] is collaborative and bounds [it([117,125])] 
     - head Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E-1 
       - Loop 116 is collaborative and bounds [it(116)] 
       - Chain-Tail [117,125] is collaborative and bounds [it([117,125])] 
     - tail Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(114)+it(116)+it([117,125])=<E-1,it(114)+it(116)+it([117,125])=<E-1,it(114)+it(116)+it([117,125])=<E-1,it(114)+it(116)+it([117,125])=<E-1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [s(1627)=<A,s(1635)=<A-D'+1,s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(459)=< -D+B'-2,aux(459)=<B'-D'-1]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for s(1627)=<A  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(461)=<A] 
 * Adding constraints: [s(1627)=<it(114)*aux(461)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(461)=<A]
* Psum in Loop 114: [s(1635)=<A-D'+1,s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(459)=< -D+B'-2,aux(459)=<B'-D'-1]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for aux(461)=<A  
   - Applying max/min strategy 
     - Loop 114  increases the expression by [A'-2*D'-1,A'/2-D'-1/2] 
     - Loop 116 does not increase the expression
 * Adding constraints:[aux(461)=<aux(462)+aux(463),aux(462)=<A] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [s(1635)=<A-D'+1,s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(459)=< -D+B'-2,aux(459)=<B'-D'-1,aux(463)=<A'-2*D'-1,aux(463)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for s(1635)=<A-D'+1  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(464)=<A-D] 
 * Adding constraints: [s(1635)=<it(114)*aux(464)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(464)=<A-D]
* Psum in Loop 114: [s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(459)=< -D+B'-2,aux(459)=<B'-D'-1,aux(463)=<A'-2*D'-1,aux(463)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for aux(464)=<A-D  
   - Applying max/min strategy 
     - Loop 114  increases the expression by [A'-2*D'-2,A'/2-D'-3/2] 
     - Loop 116 does not increase the expression
 * Adding constraints:[aux(464)=<aux(465)+aux(466),aux(465)=<A-D] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(459)=< -D+B'-2,aux(459)=<B'-D'-1,aux(466)=<A'-2*D'-2,aux(463)=<A'-2*D'-1,aux(466)=<A'/2-D'-3/2,aux(463)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for s(1625)=<B  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(467)=<B] 
 * Adding constraints: [s(1625)=<it(114)*aux(467)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(467)=<B]
* Psum in Loop 114: [s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(459)=< -D+B'-2,aux(459)=<B'-D'-1,aux(466)=<A'-2*D'-2,aux(463)=<A'-2*D'-1,aux(466)=<A'/2-D'-3/2,aux(463)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for aux(467)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(467)=<s(1532)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(459)=< -D+B'-2,aux(459)=<B'-D'-1,aux(466)=<A'-2*D'-2,aux(463)=<A'-2*D'-1,aux(466)=<A'/2-D'-3/2,aux(463)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for s(1624)=<2*B  in Loop 114 
   - Found a solution using cacheing 
 * Adding constraints: [s(1624)=<aux(468)*2,aux(468)=<it(114)*aux(467)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(459)=< -D+B'-2,aux(459)=<B'-D'-1,aux(466)=<A'-2*D'-2,aux(463)=<A'-2*D'-1,aux(466)=<A'/2-D'-3/2,aux(463)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for s(1626)=<D'  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(469)=<B-1,aux(469)=<D+1] 
 * Adding constraints: [s(1626)=<it(114)*aux(469)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(469)=<B-1,aux(469)=<D+1]
* Psum in Loop 114: [s(1629)=<D'+1,s(1628)=<2*D',aux(459)=< -D+B'-2,aux(459)=<B'-D'-1,aux(466)=<A'-2*D'-2,aux(463)=<A'-2*D'-1,aux(466)=<A'/2-D'-3/2,aux(463)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for aux(469)=<B-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(469)=<s(1532)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(469)=<D+1]
* Psum in Loop 114: [s(1629)=<D'+1,s(1628)=<2*D',aux(459)=< -D+B'-2,aux(459)=<B'-D'-1,aux(466)=<A'-2*D'-2,aux(463)=<A'-2*D'-1,aux(466)=<A'/2-D'-3/2,aux(463)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for aux(469)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(469)=<s(1589)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [s(1629)=<D'+1,s(1628)=<2*D',aux(459)=< -D+B'-2,aux(459)=<B'-D'-1,aux(466)=<A'-2*D'-2,aux(463)=<A'-2*D'-1,aux(466)=<A'/2-D'-3/2,aux(463)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for s(1629)=<D'+1  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(470)=<B,aux(470)=<D+2] 
 * Adding constraints: [s(1629)=<it(114)*aux(470)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(470)=<B,aux(470)=<D+2]
* Psum in Loop 114: [s(1628)=<2*D',aux(459)=< -D+B'-2,aux(459)=<B'-D'-1,aux(466)=<A'-2*D'-2,aux(463)=<A'-2*D'-1,aux(466)=<A'/2-D'-3/2,aux(463)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for aux(470)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(470)=<s(1532)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(470)=<D+2]
* Psum in Loop 114: [s(1628)=<2*D',aux(459)=< -D+B'-2,aux(459)=<B'-D'-1,aux(466)=<A'-2*D'-2,aux(463)=<A'-2*D'-1,aux(466)=<A'/2-D'-3/2,aux(463)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for aux(470)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(470)=<s(1589)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [s(1628)=<2*D',aux(459)=< -D+B'-2,aux(459)=<B'-D'-1,aux(466)=<A'-2*D'-2,aux(463)=<A'-2*D'-1,aux(466)=<A'/2-D'-3/2,aux(463)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for s(1628)=<2*D'  in Loop 114 
   - Found a solution using cacheing 
 * Adding constraints: [s(1628)=<aux(471)*2,aux(471)=<it(114)*aux(469)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(459)=< -D+B'-2,aux(459)=<B'-D'-1,aux(466)=<A'-2*D'-2,aux(463)=<A'-2*D'-1,aux(466)=<A'/2-D'-3/2,aux(463)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for aux(459)=< -D+B'-2  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [] 
 * Adding constraints: [aux(459)=<it(114)*aux(472)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(459)=<B'-D'-1,aux(466)=<A'-2*D'-2,aux(463)=<A'-2*D'-1,aux(466)=<A'/2-D'-3/2,aux(463)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for aux(459)=<B'-D'-1  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [] 
 * Adding constraints: [aux(459)=<it(114)*aux(473)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(466)=<A'-2*D'-2,aux(463)=<A'-2*D'-1,aux(466)=<A'/2-D'-3/2,aux(463)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for aux(466)=<A'-2*D'-2  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(474)=<2*A-4*D-7] 
 * Adding constraints: [aux(466)=<it(114)*aux(474)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(474)=<2*A-4*D-7]
* Psum in Loop 114: [aux(463)=<A'-2*D'-1,aux(466)=<A'/2-D'-3/2,aux(463)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for aux(474)=<2*A-4*D-7  
   - Applying max/min strategy 
     - Loop 114  increases the expression by [2*A'-4*D'-6,A'-2*D'-5] 
     - Loop 116 does not increase the expression
 * Adding constraints:[aux(474)=<aux(475)+aux(476),aux(475)=<2*A-4*D-7] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(463)=<A'-2*D'-1,aux(466)=<A'/2-D'-3/2,aux(463)=<A'/2-D'-1/2,aux(476)=<A'-2*D'-5,aux(476)=<2*A'-4*D'-6]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for aux(463)=<A'-2*D'-1  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(477)=<2*A-4*D-6] 
 * Adding constraints: [aux(463)=<it(114)*aux(477)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(477)=<2*A-4*D-6]
* Psum in Loop 114: [aux(466)=<A'/2-D'-3/2,aux(463)=<A'/2-D'-1/2,aux(476)=<A'-2*D'-5,aux(476)=<2*A'-4*D'-6]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for aux(477)=<2*A-4*D-6  
   - Found a solution using cacheing 
 * Adding constraints:[aux(477)=<aux(474)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(466)=<A'/2-D'-3/2,aux(463)=<A'/2-D'-1/2,aux(476)=<A'-2*D'-5,aux(476)=<2*A'-4*D'-6]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for aux(466)=<A'/2-D'-3/2  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(478)=<A-2*D-4] 
 * Adding constraints: [aux(466)=<it(114)*aux(478)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(478)=<A-2*D-4]
* Psum in Loop 114: [aux(463)=<A'/2-D'-1/2,aux(476)=<A'-2*D'-5,aux(476)=<2*A'-4*D'-6]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for aux(478)=<A-2*D-4  
   - Found a solution using cacheing 
 * Adding constraints:[aux(478)=<aux(474)* (1/2)-1/2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(463)=<A'/2-D'-1/2,aux(476)=<A'-2*D'-5,aux(476)=<2*A'-4*D'-6]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for aux(463)=<A'/2-D'-1/2  in Loop 114 
   - Found a solution using cacheing 
 * Adding constraints: [aux(463)=<aux(479)* (1/2),aux(479)=<it(114)*aux(477)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(476)=<A'-2*D'-5,aux(476)=<2*A'-4*D'-6]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for aux(476)=<A'-2*D'-5  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(480)=<2*A-4*D-10] 
 * Adding constraints: [aux(476)=<it(114)*aux(480)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(480)=<2*A-4*D-10]
* Psum in Loop 114: [aux(476)=<2*A'-4*D'-6]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for aux(480)=<2*A-4*D-10  
   - Found a solution using cacheing 
 * Adding constraints:[aux(480)=<aux(474)-3] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(476)=<2*A'-4*D'-6]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for aux(476)=<2*A'-4*D'-6  in Loop 114 
   - Found a solution using cacheing 
 * Adding constraints: [aux(476)=<aux(481)*4,aux(481)=<it(114)*aux(478)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for it(116)=<1  in Loop 116 
   - Applying inductive sum strategy 
     - head Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A/2-2 
       - Loop 114 has a reset to  [A-D-7/2]
       - Chain-Tail [117,125] is collaborative
     - head Candidate: A/3-D/3-1 
       - Loop 114 has a reset to  [2/3*A-D-7/3]
       - Chain [117,125] is ignored
     - head Candidate: A/4-D/2-1/2 
       - Loop 114 has a reset to  [A/2-D-7/4]
       - Chain [117,125] is ignored
     - tail Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A/2-2 
       - Loop 114 has undefined behavior 
     - tail Candidate: A/3-D/3-1 
       - Loop 114 has undefined behavior 
     - tail Candidate: A/4-D/2-1/2 
       - Loop 114 has undefined behavior 
 * Adding constraints: [it(116)=<aux(482)+aux(483),it(116)=<aux(484)+aux(485),it(116)=<aux(486)+aux(487),it(114)+it(116)+it([117,125])=<E-1,it(114)+it(116)+it([117,125])=<E-1,aux(483)=<A/2-2,aux(485)=<A/3-D/3-1,aux(487)=<A/4-D/2-1/2,it(114)+it(116)+it([117,125])=<E-1,it(114)+it(116)+it([117,125])=<E-1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(482)=<A-D-7/2,aux(486)=<A/2-D-7/4,aux(484)=<2/3*A-D-7/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for aux(482)=<A-D-7/2  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(488)=<A-D-7/2] 
 * Adding constraints: [aux(482)=<it(114)*aux(488)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(488)=<A-D-7/2]
* Psum in Loop 114: [aux(486)=<A/2-D-7/4,aux(484)=<2/3*A-D-7/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for aux(488)=<A-D-7/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(488)=<aux(464)-7/2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(486)=<A/2-D-7/4,aux(484)=<2/3*A-D-7/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for aux(486)=<A/2-D-7/4  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(489)=<A/2-D-7/4] 
 * Adding constraints: [aux(486)=<it(114)*aux(489)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(489)=<A/2-D-7/4]
* Psum in Loop 114: [aux(484)=<2/3*A-D-7/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for aux(489)=<A/2-D-7/4  
   - Found a solution using cacheing 
 * Adding constraints:[aux(489)=<aux(474)* (1/4)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(484)=<2/3*A-D-7/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for aux(484)=<2/3*A-D-7/3  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(490)=<2/3*A-D-7/3] 
 * Adding constraints: [aux(484)=<it(114)*aux(490)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(490)=<2/3*A-D-7/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for aux(490)=<2/3*A-D-7/3  
   - Applying max/min strategy 
     - Loop 114  increases the expression by [2/3*A'-4/3*D'-5/3,A'/3-2/3*D'-4/3] 
     - Loop 116 does not increase the expression
 * Adding constraints:[aux(490)=<aux(491)+aux(492),aux(491)=<2/3*A-D-7/3] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(492)=<A'/3-2/3*D'-4/3,aux(492)=<2/3*A'-4/3*D'-5/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for aux(492)=<A'/3-2/3*D'-4/3  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(493)=<2/3*A-4/3*D-3] 
 * Adding constraints: [aux(492)=<it(114)*aux(493)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(493)=<2/3*A-4/3*D-3]
* Psum in Loop 114: [aux(492)=<2/3*A'-4/3*D'-5/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for aux(493)=<2/3*A-4/3*D-3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(493)=<aux(474)* (1/3)-2/3] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(492)=<2/3*A'-4/3*D'-5/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for aux(492)=<2/3*A'-4/3*D'-5/3  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(494)=<4/3*A-8/3*D-5] 
 * Adding constraints: [aux(492)=<it(114)*aux(494)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(494)=<4/3*A-8/3*D-5]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for aux(494)=<4/3*A-8/3*D-5  
   - Found a solution using cacheing 
 * Adding constraints:[aux(494)=<aux(474)* (2/3)-1/3] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for s(1652)=<A  in Loop 116 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(495)=<A] 
 * Adding constraints: [s(1652)=<it(116)*aux(495)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(495)=<A]
* Psum in Loop 116: [s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for aux(495)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(495)=<aux(461)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for s(1660)=<A-D'+1  in Loop 116 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(496)=<A-D] 
 * Adding constraints: [s(1660)=<it(116)*aux(496)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(496)=<A-D]
* Psum in Loop 116: [s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for aux(496)=<A-D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(496)=<aux(464)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for s(1650)=<B  in Loop 116 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(497)=<B] 
 * Adding constraints: [s(1650)=<it(116)*aux(497)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(497)=<B]
* Psum in Loop 116: [s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for aux(497)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(497)=<s(1532)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for s(1649)=<2*B  in Loop 116 
   - Found a solution using cacheing 
 * Adding constraints: [s(1649)=<aux(498)*2,aux(498)=<it(116)*aux(497)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for s(1651)=<D'  in Loop 116 
   - Applying inductive sum strategy 
     - head Candidate: A-D-2 
       - Loop 114 has a reset to  [2*A-3*D-6]
       - Chain-Tail [117,125] is collaborative
     - head Candidate: A-3 
       - Loop 114 has a reset to  [2*A-2*D-6]
       - Chain-Tail [117,125] is collaborative and bounds [it([117,125])] 
     - tail Candidate: A-D-2 
       - Loop 114 has undefined behavior 
     - tail Candidate: A-3 
       - Loop 114 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(503)=<D+1,aux(503)=<A/2-1/2] 
 * Adding constraints: [s(1651)=<it(116)*aux(503),s(1651)=<aux(499)+aux(500),it([117,125])+s(1651)=<aux(501)+aux(502),aux(500)=<A-D-2,aux(502)=<A-3] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(503)=<A/2-1/2,aux(503)=<D+1]
* Psum in Loop 114: [aux(499)=<2*A-3*D-6,aux(501)=<2*A-2*D-6]
* Psum in Loop 116: [s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for aux(503)=<A/2-1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(503)=<aux(461)* (1/2)-1/2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(503)=<D+1]
* Psum in Loop 114: [aux(499)=<2*A-3*D-6,aux(501)=<2*A-2*D-6]
* Psum in Loop 116: [s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for aux(503)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(503)=<s(1589)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(499)=<2*A-3*D-6,aux(501)=<2*A-2*D-6]
* Psum in Loop 116: [s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for aux(499)=<2*A-3*D-6  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(504)=<2*A-3*D-6] 
 * Adding constraints: [aux(499)=<it(114)*aux(504)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(504)=<2*A-3*D-6]
* Psum in Loop 114: [aux(501)=<2*A-2*D-6]
* Psum in Loop 116: [s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for aux(504)=<2*A-3*D-6  
   - Found a solution using cacheing 
 * Adding constraints:[aux(504)=<aux(490)*3+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(501)=<2*A-2*D-6]
* Psum in Loop 116: [s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for aux(501)=<2*A-2*D-6  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(505)=<2*A-2*D-6] 
 * Adding constraints: [aux(501)=<it(114)*aux(505)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(505)=<2*A-2*D-6]
* Psum in Loop 116: [s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for aux(505)=<2*A-2*D-6  
   - Found a solution using cacheing 
 * Adding constraints:[aux(505)=<aux(464)*2-6] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [s(1654)=<D'+1,s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [it([117,125])=<1,s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for s(1654)=<D'+1  in Loop 116 
   - Applying inductive sum strategy 
     - head Candidate: 3/2*A-9/2 
       - Loop 114 has a reset to  [3*A-3*D-9]
       - Chain-Tail [117,125] is collaborative and bounds [it([117,125])] 
     - head Candidate: A+E-3 
       - Loop 114 has a reset to  [2*A-2*D+E-7]
       - Chain-Tail [117,125] is collaborative and bounds [it([117,125])] 
     - tail Candidate: 3/2*A-9/2 
       - Loop 114 has undefined behavior 
     - tail Candidate: A+E-3 
       - Loop 114 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(510)=<D+2,aux(510)=<A/2+1/2] 
 * Adding constraints: [s(1654)=<it(116)*aux(510),it([117,125])+s(1654)=<aux(506)+aux(507),it([117,125])+s(1654)=<aux(508)+aux(509),aux(507)=<3/2*A-9/2,aux(509)=<A+E-3] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(510)=<A/2+1/2,aux(510)=<D+2]
* Psum in Loop 114: [aux(508)=<2*A-2*D+E-7,aux(506)=<3*A-3*D-9]
* Psum in Loop 116: [s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for aux(510)=<A/2+1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(510)=<aux(461)* (1/2)+1/2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(510)=<D+2]
* Psum in Loop 114: [aux(508)=<2*A-2*D+E-7,aux(506)=<3*A-3*D-9]
* Psum in Loop 116: [s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for aux(510)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(510)=<s(1589)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(508)=<2*A-2*D+E-7,aux(506)=<3*A-3*D-9]
* Psum in Loop 116: [s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for aux(508)=<2*A-2*D+E-7  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(511)=<2*A-2*D+E-7] 
 * Adding constraints: [aux(508)=<it(114)*aux(511)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(511)=<2*A-2*D+E-7]
* Psum in Loop 114: [aux(506)=<3*A-3*D-9]
* Psum in Loop 116: [s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for aux(511)=<2*A-2*D+E-7  
   - Applying max/min strategy 
     - Loop 114  increases the expression by [2*A'-4*D'-5,A'-2*D'-4] 
     - Loop 116 does not increase the expression
 * Adding constraints:[aux(511)=<aux(512)+aux(513),aux(512)=<2*A-2*D+E-7] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(506)=<3*A-3*D-9,aux(513)=<A'-2*D'-4,aux(513)=<2*A'-4*D'-5]
* Psum in Loop 116: [s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for aux(506)=<3*A-3*D-9  in Loop 114 
   - Found a solution using cacheing 
 * Adding constraints: [aux(506)=<aux(514)* (3/2),aux(514)=<it(114)*aux(505)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(513)=<A'-2*D'-4,aux(513)=<2*A'-4*D'-5]
* Psum in Loop 116: [s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for aux(513)=<A'-2*D'-4  in Loop 114 
   - Found a solution using cacheing 
 * Adding constraints: [aux(513)=<aux(515)*3,aux(515)=<it(114)*aux(493)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(513)=<2*A'-4*D'-5]
* Psum in Loop 116: [s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for aux(513)=<2*A'-4*D'-5  in Loop 114 
   - Found a solution using cacheing 
 * Adding constraints: [aux(513)=<aux(516)*3,aux(516)=<it(114)*aux(494)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [s(1653)=<2*D',aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for s(1653)=<2*D'  in Loop 116 
   - Found a solution using cacheing 
 * Adding constraints: [s(1653)=<aux(517)*2,aux(517)=<it(116)*aux(503),aux(517)=<aux(499)+aux(500),aux(517)+it([117,125])=<aux(501)+aux(502)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [aux(460)=<B'-1]
* Psum in Chain-Tail [117,125]: [s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for aux(460)=<B'-1  in Loop 116 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [] 
 * Adding constraints: [aux(460)=<it(116)*aux(518)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [117,125]: [s(1685)=<A,s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for s(1685)=<A  in Chain-Tail [117,125] 
   - Applying inductive sum strategy 
     - head Candidate: 2*D+2*E-2 
       - Loop 114 is collaborative
       - Loop 116 is collaborative
     - tail Candidate: 2*D+2*E-2 
       - Loop 114 is collaborative
       - Loop 116 is collaborative
 * Adding constraints: [s(1685)=<2*D+2*E-2,s(1685)=<2*D+2*E-2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [117,125]: [s(1683)=<B,s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for s(1683)=<B  in Chain-Tail [117,125] 
   - Applying inductive sum strategy 
     - head Candidate: B 
       - Loop 114 has undefined behavior 
     - tail Candidate: B 
       - Loop 114 has undefined behavior 
     - head Candidate: B 
       - We failed to classify this candidate before 
     - tail Candidate: B 
       - We failed to classify this candidate before 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(519)=<B] 
 * Adding constraints: [s(1683)=<it([117,125])*aux(519)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(519)=<B]
* Psum in Chain-Tail [117,125]: [s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing max_min for aux(519)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(519)=<s(1532)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [117,125]: [s(1682)=<2*B,s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for s(1682)=<2*B  in Chain-Tail [117,125] 
   - Found a solution using cacheing 
 * Adding constraints: [s(1682)=<aux(520)*2,aux(520)=<it([117,125])*aux(519)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [117,125]: [s(1688)=<D,s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for s(1688)=<D  in Chain-Tail [117,125] 
   - Applying inductive sum strategy 
     - head Candidate: D+E-2 
       - Loop 114 is collaborative
       - Loop 116 is collaborative
     - tail Candidate: D+E-2 
       - Loop 114 is collaborative
       - Loop 116 is collaborative
 * Adding constraints: [s(1688)=<D+E-2,s(1688)=<D+E-2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [117,125]: [s(1684)=<D+1,s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for s(1684)=<D+1  in Chain-Tail [117,125] 
   - Applying inductive sum strategy 
     - head Candidate: D+E-1 
       - Loop 114 is collaborative
       - Loop 116 is collaborative
     - tail Candidate: D+E-1 
       - Loop 114 is collaborative
       - Loop 116 is collaborative
 * Adding constraints: [s(1684)=<D+E-1,s(1684)=<D+E-1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [117,125]: [s(1687)=<D+2,s(1686)=<2*D+2]

###### Computing sum for s(1687)=<D+2  in Chain-Tail [117,125] 
   - Applying inductive sum strategy 
     - head Candidate: D+E 
       - Loop 114 is collaborative
       - Loop 116 is collaborative
     - tail Candidate: D+E 
       - Loop 114 is collaborative
       - Loop 116 is collaborative
 * Adding constraints: [s(1687)=<D+E,s(1687)=<D+E] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [117,125]: [s(1686)=<2*D+2]

###### Computing sum for s(1686)=<2*D+2  in Chain-Tail [117,125] 
   - Found a solution using cacheing 
 * Adding constraints: [s(1686)=<aux(521)*2,aux(521)=<D+E-1,aux(521)=<D+E-1] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [114,116,[117,125]] 
Found a cycle in the non-final constraints
 Removed possibly redundant constraints to solve a cycle in the cost structure 
it(116)=<aux(482)+aux(483)
it(116)=<aux(484)+aux(485)
it(116)=<aux(486)+aux(487)
Found a cycle in the non-final constraints
 Removed possibly redundant constraints to solve a cycle in the cost structure 
aux(503)=<aux(461)* (1/2)-1/2
aux(510)=<aux(461)* (1/2)+1/2
Found a cycle in the non-final constraints
 Removed possibly redundant constraints to solve a cycle in the cost structure 
s(1651)=<aux(499)+aux(500)
it([117,125])+s(1651)=<aux(501)+aux(502)
it([117,125])+s(1654)=<aux(506)+aux(507)
it([117,125])+s(1654)=<aux(508)+aux(509)
aux(517)=<aux(499)+aux(500)
aux(517)+it([117,125])=<aux(501)+aux(502)
Found a cycle in the non-final constraints
Could not solve cycle in cost structure.
 Discarded constraints:  
aux(511)=<aux(512)+aux(513)
aux(505)=<aux(464)*2-6
aux(504)=<aux(490)*3+1
aux(496)=<aux(464)
aux(495)=<aux(461)
aux(494)=<aux(474)* (2/3)-1/3
aux(493)=<aux(474)* (1/3)-2/3
aux(490)=<aux(491)+aux(492)
aux(489)=<aux(474)* (1/4)
aux(488)=<aux(464)-7/2
aux(480)=<aux(474)-3
aux(478)=<aux(474)* (1/2)-1/2
aux(477)=<aux(474)+1
aux(474)=<aux(475)+aux(476)
aux(464)=<aux(465)+aux(466)
aux(461)=<aux(462)+aux(463)
aux(516)=<it(114)*aux(494)
aux(513)=<aux(516)*3
aux(515)=<it(114)*aux(493)
aux(513)=<aux(515)*3
aux(514)=<it(114)*aux(505)
aux(506)=<aux(514)* (3/2)
aux(508)=<it(114)*aux(511)
aux(501)=<it(114)*aux(505)
aux(499)=<it(114)*aux(504)
s(1660)=<it(116)*aux(496)
s(1652)=<it(116)*aux(495)
aux(492)=<it(114)*aux(494)
aux(492)=<it(114)*aux(493)
aux(484)=<it(114)*aux(490)
aux(486)=<it(114)*aux(489)
aux(482)=<it(114)*aux(488)
aux(481)=<it(114)*aux(478)
aux(476)=<aux(481)*4
aux(476)=<it(114)*aux(480)
aux(479)=<it(114)*aux(477)
aux(463)=<aux(479)* (1/2)
aux(466)=<it(114)*aux(478)
aux(463)=<it(114)*aux(477)
aux(466)=<it(114)*aux(474)
s(1635)=<it(114)*aux(464)
s(1627)=<it(114)*aux(461)

#### Simplifying cost structure of phase [114,116,[117,125]] 
 * Joined equivalent variables [aux(522),aux(462),aux(502)] into aux(522)
 * Joined equivalent variables [aux(523),aux(465),aux(500)] into aux(523)
 * Joined equivalent variables [aux(524),aux(521),s(1589),s(1684),s(1687),s(1688)] into aux(524)
 * Joined equivalent variables [aux(503),s(1598)] into aux(503)
 * Joined equivalent variables [aux(467),aux(497),aux(519),s(1528),s(1585)] into aux(467)
 * Joined equivalent variables [aux(498),s(1650)] into aux(498)
 * Joined equivalent variables [aux(471),s(1626)] into aux(471)
 * Joined equivalent variables [aux(468),s(1625)] into aux(468)
 * Joined equivalent variables [aux(517),s(1651)] into aux(517)
 * Joined equivalent variables [aux(520),s(1683)] into aux(520)
 * Joined equivalent variables [it(114),it(116),it([117,125])] into it(114)
 * Joined equivalent variables [aux(468),aux(498),aux(520)] into aux(468)
 * Joined equivalent variables [s(1536),s(1592)] into s(1536)
 * Joined equivalent variables [s(1675),s(1677)] into s(1675)
 * Joined equivalent variables [s(1624),s(1649),s(1682)] into s(1624)

#### Cost of phase [114,116]:echelon_helper(A,B,C,D,E,F,G,H,I,J) -> [] 
123*it(114)+16*s(1611)+244*s(1612)+120*s(1613)+80*s(1614)+40*s(1615)+40*s(1616)+40*s(1617)+80*s(1618)+80*s(1619)+64*s(1620)+64*s(1621)+64*s(1622)+64*s(1623)+16*s(1636)+448*s(1637)+240*s(1638)+80*s(1639)+80*s(1640)+40*s(1641)+40*s(1642)+80*s(1643)+80*s(1644)+64*s(1645)+64*s(1646)+64*s(1647)+64*s(1648)+96*s(1675)+80*s(1676)+64*s(1678)+64*s(1679)+64*s(1680)+64*s(1681)+0
  Such that:s(1685) =< 2*D+2*E
aux(524) =< D+E
aux(525) =< E
it(114) =< aux(525)
aux(510) =< aux(524)+1
aux(503) =< aux(524)
aux(470) =< aux(524)+1
aux(469) =< aux(524)
s(1686) =< aux(524)*2
aux(471) =< it(114)*aux(469)
s(1629) =< it(114)*aux(470)
s(1628) =< aux(471)*2
aux(517) =< it(114)*aux(503)
s(1654) =< it(114)*aux(510)
s(1653) =< aux(517)*2
s(1675) =< aux(524)
s(1676) =< aux(524)
s(1678) =< s(1685)
s(1679) =< s(1685)
s(1678) =< aux(524)
s(1679) =< aux(524)
s(1678) =< s(1686)
s(1679) =< s(1686)
s(1680) =< s(1685)
s(1681) =< s(1685)
s(1680) =< aux(524)
s(1681) =< aux(524)
s(1636) =< aux(517)
s(1643) =< s(1654)
s(1644) =< s(1654)
s(1645) =< aux(517)
s(1646) =< aux(517)
s(1645) =< s(1653)
s(1646) =< s(1653)
s(1647) =< aux(517)
s(1648) =< aux(517)
s(1611) =< aux(471)
s(1618) =< s(1629)
s(1619) =< s(1629)
s(1620) =< aux(471)
s(1621) =< aux(471)
s(1620) =< s(1628)
s(1621) =< s(1628)
s(1622) =< aux(471)
s(1623) =< aux(471)

Unbounded itvars
s(1612) :  sum(114),s(1534)
s(1613) :  sum(114),s(1543)
s(1614) :  sum(114),s(1544)
s(1615) :  sum(114),s(1545)
s(1616) :  sum(114),s(1546)
s(1617) :  sum(114),s(1547)
s(1637) :  sum(116),s(1591)
s(1638) :  sum(116),s(1595)
s(1639) :  sum(116),s(1596)
s(1640) :  sum(116),s(1602)
s(1641) :  sum(116),s(1603)
s(1642) :  sum(116),s(1604)

#### Found solution for phase  [114,116] in the cache 

#### Cost of phase [114,116]:echelon_helper(A,B,C,D,E,F,G,H,I,J) -> [echelon_helper(A',B',C',D',E',F',G',H',I',J')] 
80*it(114)+16*s(1611)+244*s(1612)+120*s(1613)+80*s(1614)+40*s(1615)+40*s(1616)+40*s(1617)+80*s(1618)+80*s(1619)+64*s(1620)+64*s(1621)+64*s(1622)+64*s(1623)+16*s(1636)+448*s(1637)+240*s(1638)+80*s(1639)+80*s(1640)+40*s(1641)+40*s(1642)+80*s(1643)+80*s(1644)+64*s(1645)+64*s(1646)+64*s(1647)+64*s(1648)+0
  Such that:s(1589) =< D+E
aux(339) =< E
aux(340) =< E-E'
it(114) =< aux(339)
it(114) =< aux(340)
aux(328) =< s(1589)+1
aux(321) =< s(1589)
aux(288) =< s(1589)+1
aux(287) =< s(1589)
aux(289) =< it(114)*aux(287)
s(1629) =< it(114)*aux(288)
s(1628) =< aux(289)*2
aux(335) =< it(114)*aux(321)
s(1654) =< it(114)*aux(328)
s(1653) =< aux(335)*2
s(1636) =< aux(335)
s(1643) =< s(1654)
s(1644) =< s(1654)
s(1645) =< aux(335)
s(1646) =< aux(335)
s(1645) =< s(1653)
s(1646) =< s(1653)
s(1647) =< aux(335)
s(1648) =< aux(335)
s(1611) =< aux(289)
s(1618) =< s(1629)
s(1619) =< s(1629)
s(1620) =< aux(289)
s(1621) =< aux(289)
s(1620) =< s(1628)
s(1621) =< s(1628)
s(1622) =< aux(289)
s(1623) =< aux(289)

Unbounded itvars
s(1612) :  sum(114),s(1534)
s(1613) :  sum(114),s(1543)
s(1614) :  sum(114),s(1544)
s(1615) :  sum(114),s(1545)
s(1616) :  sum(114),s(1546)
s(1617) :  sum(114),s(1547)
s(1637) :  sum(116),s(1591)
s(1638) :  sum(116),s(1595)
s(1639) :  sum(116),s(1596)
s(1640) :  sum(116),s(1602)
s(1641) :  sum(116),s(1603)
s(1642) :  sum(116),s(1604)
Some Itvars are unbounded [s(1691),s(1692)] 
Changing solving method to compute the cost of the chain directly 

#### Computing cost of chain [[114,116],115,125] with linear recursion
 * Renamed intermediate variables: 
[ (it(114),s(1498))>>s(1526), (it(114),s(1499))>>s(1527), (it(114),s(1500))>>s(1528), (it(114),s(1501))>>s(1529), (it(114),s(1504))>>s(1530), (it(114),s(1497))>>s(1531), (it(114),aux(274))>>s(1532), (it(114),s(1505))>>s(1533), (it(114),s(1506))>>s(1534), (it(114),s(1507))>>s(1535), (it(114),s(1508))>>s(1536), (it(114),s(1509))>>s(1537), (it(114),s(1510))>>s(1538), (it(114),s(1511))>>s(1539), (it(114),s(1512))>>s(1540), (it(114),s(1513))>>s(1541), (it(114),s(1514))>>s(1542), (it(114),s(1515))>>s(1543), (it(114),s(1516))>>s(1544), (it(114),s(1517))>>s(1545), (it(114),s(1518))>>s(1546), (it(114),s(1519))>>s(1547), (it(114),s(1520))>>s(1548), (it(114),s(1521))>>s(1549), (it(114),s(1522))>>s(1550), (it(114),s(1523))>>s(1551), (it(114),s(1524))>>s(1552), (it(114),s(1525))>>s(1553)]
 * Renamed intermediate variables: 
[ (it(116),s(1555))>>s(1583), (it(116),s(1556))>>s(1584), (it(116),s(1557))>>s(1585), (it(116),s(1558))>>s(1586), (it(116),s(1561))>>s(1587), (it(116),s(1554))>>s(1588), (it(116),aux(275))>>s(1589), (it(116),s(1562))>>s(1590), (it(116),s(1563))>>s(1591), (it(116),s(1564))>>s(1592), (it(116),s(1565))>>s(1593), (it(116),s(1566))>>s(1594), (it(116),s(1567))>>s(1595), (it(116),s(1568))>>s(1596), (it(116),s(1569))>>s(1597), (it(116),s(1570))>>s(1598), (it(116),s(1571))>>s(1599), (it(116),s(1572))>>s(1600), (it(116),s(1573))>>s(1601), (it(116),s(1574))>>s(1602), (it(116),s(1575))>>s(1603), (it(116),s(1576))>>s(1604), (it(116),s(1577))>>s(1605), (it(116),s(1578))>>s(1606), (it(116),s(1579))>>s(1607), (it(116),s(1580))>>s(1608), (it(116),s(1581))>>s(1609), (it(116),s(1582))>>s(1610)]

#### Cost of loops [114,116] 

 * loop 114:echelon_helper(A,B,C,D,E,F,G,H,I,J) -> [echelon_helper(A',B',C',D',E',F',G',H',I',J')] 
16*s(1533)+244*s(1534)+120*s(1543)+80*s(1544)+40*s(1545)+40*s(1546)+40*s(1547)+80*s(1548)+80*s(1549)+64*s(1550)+64*s(1551)+64*s(1552)+64*s(1553)+40
  Such that:s(1526) =< A
s(1527) =< A-D'+1
s(1528) =< B
s(1529) =< 2*B
s(1530) =< D'+1
s(1531) =< 2*D'
s(1532) =< D'
s(1533) =< s(1532)
s(1534) =< s(1527)
s(1535) =< s(1528)-2
s(1536) =< s(1528)
s(1537) =< s(1534)*s(1528)
s(1535) =< s(1532)
s(1538) =< s(1532)
s(1539) =< s(1534)*s(1536)
s(1540) =< s(1534)*s(1532)
s(1541) =< s(1534)*s(1535)
s(1542) =< s(1534)*s(1538)
s(1543) =< s(1539)
s(1544) =< s(1541)
s(1545) =< s(1542)
s(1546) =< s(1537)
s(1547) =< s(1540)
s(1548) =< s(1530)
s(1549) =< s(1530)
s(1548) =< s(1528)
s(1550) =< s(1526)
s(1551) =< s(1526)
s(1550) =< s(1532)
s(1551) =< s(1532)
s(1550) =< s(1528)
s(1550) =< s(1529)
s(1550) =< s(1531)
s(1551) =< s(1531)
s(1552) =< s(1526)
s(1553) =< s(1526)
s(1552) =< s(1532)
s(1553) =< s(1532)
s(1552) =< s(1528)
s(1552) =< s(1529)

 * loop 116:echelon_helper(A,B,C,D,E,F,G,H,I,J) -> [echelon_helper(A',B',C',D',E',F',G',H',I',J')] 
16*s(1590)+448*s(1591)+240*s(1595)+80*s(1596)+80*s(1602)+40*s(1603)+40*s(1604)+80*s(1605)+80*s(1606)+64*s(1607)+64*s(1608)+64*s(1609)+64*s(1610)+40
  Such that:s(1583) =< A
s(1584) =< A-D'+1
s(1585) =< B
s(1586) =< 2*B
s(1587) =< D'+1
s(1588) =< 2*D'
s(1589) =< D'
s(1590) =< s(1589)
s(1591) =< s(1584)
s(1592) =< s(1585)
s(1593) =< s(1591)*s(1585)
s(1594) =< s(1591)*s(1592)
s(1595) =< s(1594)
s(1596) =< s(1593)
s(1597) =< s(1585)-2
s(1597) =< s(1589)
s(1598) =< s(1589)
s(1599) =< s(1591)*s(1589)
s(1600) =< s(1591)*s(1597)
s(1601) =< s(1591)*s(1598)
s(1602) =< s(1600)
s(1603) =< s(1601)
s(1604) =< s(1599)
s(1605) =< s(1587)
s(1606) =< s(1587)
s(1605) =< s(1585)
s(1607) =< s(1583)
s(1608) =< s(1583)
s(1607) =< s(1589)
s(1608) =< s(1589)
s(1607) =< s(1585)
s(1607) =< s(1586)
s(1607) =< s(1588)
s(1608) =< s(1588)
s(1609) =< s(1583)
s(1610) =< s(1583)
s(1609) =< s(1589)
s(1610) =< s(1589)
s(1609) =< s(1585)
s(1609) =< s(1586)

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [s(1532)=<B-1,s(1528)=<B,s(1585)=<B,s(1691)=<B,s(1693)=<D,s(1589)=<D+1]
* Psum in Loop 114: [it(114)=<1,s(1627)=<A,s(1635)=<A-D'+1,s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D']
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D']
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for s(1532)=<B-1  
   - Applying max/min strategy 
     - Loop 114  increases the expression by [-D+B'-2,B'-D'-1] 
     - Loop 116  increases the expression by [B'-1] 
 * Adding constraints:[s(1532)=<aux(526)+aux(527)+aux(528),aux(526)=<B-1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [s(1528)=<B,s(1585)=<B,s(1691)=<B,s(1693)=<D,s(1589)=<D+1]
* Psum in Loop 114: [it(114)=<1,s(1627)=<A,s(1635)=<A-D'+1,s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(527)=< -D+B'-2,aux(527)=<B'-D'-1]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for s(1528)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[s(1528)=<s(1532)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [s(1585)=<B,s(1691)=<B,s(1693)=<D,s(1589)=<D+1]
* Psum in Loop 114: [it(114)=<1,s(1627)=<A,s(1635)=<A-D'+1,s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(527)=< -D+B'-2,aux(527)=<B'-D'-1]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for s(1585)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[s(1585)=<s(1532)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [s(1691)=<B,s(1693)=<D,s(1589)=<D+1]
* Psum in Loop 114: [it(114)=<1,s(1627)=<A,s(1635)=<A-D'+1,s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(527)=< -D+B'-2,aux(527)=<B'-D'-1]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for s(1691)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[s(1691)=<s(1532)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [s(1693)=<D,s(1589)=<D+1]
* Psum in Loop 114: [it(114)=<1,s(1627)=<A,s(1635)=<A-D'+1,s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(527)=< -D+B'-2,aux(527)=<B'-D'-1]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for s(1693)=<D  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(1693)=<D+E-2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [s(1589)=<D+1]
* Psum in Loop 114: [it(114)=<1,s(1627)=<A,s(1635)=<A-D'+1,s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(527)=< -D+B'-2,aux(527)=<B'-D'-1]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for s(1589)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[s(1589)=<s(1693)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [it(114)=<1,s(1627)=<A,s(1635)=<A-D'+1,s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(527)=< -D+B'-2,aux(527)=<B'-D'-1]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for it(114)=<1  in Loop 114 
   - Applying inductive sum strategy 
     - head Candidate: E-1 
       - Loop 116 is collaborative and bounds [it(116)] 
       - Chain-Tail [115,125] is collaborative and bounds [it([115,125])] 
     - head Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E-1 
       - Loop 116 is collaborative and bounds [it(116)] 
       - Chain-Tail [115,125] is collaborative and bounds [it([115,125])] 
     - tail Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(114)+it(116)+it([115,125])=<E-1,it(114)+it(116)+it([115,125])=<E-1,it(114)+it(116)+it([115,125])=<E-1,it(114)+it(116)+it([115,125])=<E-1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [s(1627)=<A,s(1635)=<A-D'+1,s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(527)=< -D+B'-2,aux(527)=<B'-D'-1]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for s(1627)=<A  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(529)=<A] 
 * Adding constraints: [s(1627)=<it(114)*aux(529)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(529)=<A]
* Psum in Loop 114: [s(1635)=<A-D'+1,s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(527)=< -D+B'-2,aux(527)=<B'-D'-1]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for aux(529)=<A  
   - Applying max/min strategy 
     - Loop 114  increases the expression by [A'-2*D'-1,A'/2-D'-1/2] 
     - Loop 116 does not increase the expression
 * Adding constraints:[aux(529)=<aux(530)+aux(531),aux(530)=<A] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [s(1635)=<A-D'+1,s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(527)=< -D+B'-2,aux(527)=<B'-D'-1,aux(531)=<A'-2*D'-1,aux(531)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for s(1635)=<A-D'+1  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(532)=<A-D] 
 * Adding constraints: [s(1635)=<it(114)*aux(532)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(532)=<A-D]
* Psum in Loop 114: [s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(527)=< -D+B'-2,aux(527)=<B'-D'-1,aux(531)=<A'-2*D'-1,aux(531)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for aux(532)=<A-D  
   - Applying max/min strategy 
     - Loop 114  increases the expression by [A'-2*D'-2,A'/2-D'-3/2] 
     - Loop 116 does not increase the expression
 * Adding constraints:[aux(532)=<aux(533)+aux(534),aux(533)=<A-D] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [s(1625)=<B,s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(527)=< -D+B'-2,aux(527)=<B'-D'-1,aux(534)=<A'-2*D'-2,aux(531)=<A'-2*D'-1,aux(534)=<A'/2-D'-3/2,aux(531)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for s(1625)=<B  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(535)=<B] 
 * Adding constraints: [s(1625)=<it(114)*aux(535)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(535)=<B]
* Psum in Loop 114: [s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(527)=< -D+B'-2,aux(527)=<B'-D'-1,aux(534)=<A'-2*D'-2,aux(531)=<A'-2*D'-1,aux(534)=<A'/2-D'-3/2,aux(531)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for aux(535)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(535)=<s(1532)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [s(1624)=<2*B,s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(527)=< -D+B'-2,aux(527)=<B'-D'-1,aux(534)=<A'-2*D'-2,aux(531)=<A'-2*D'-1,aux(534)=<A'/2-D'-3/2,aux(531)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for s(1624)=<2*B  in Loop 114 
   - Found a solution using cacheing 
 * Adding constraints: [s(1624)=<aux(536)*2,aux(536)=<it(114)*aux(535)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [s(1626)=<D',s(1629)=<D'+1,s(1628)=<2*D',aux(527)=< -D+B'-2,aux(527)=<B'-D'-1,aux(534)=<A'-2*D'-2,aux(531)=<A'-2*D'-1,aux(534)=<A'/2-D'-3/2,aux(531)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for s(1626)=<D'  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(537)=<B-1,aux(537)=<D+1] 
 * Adding constraints: [s(1626)=<it(114)*aux(537)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(537)=<B-1,aux(537)=<D+1]
* Psum in Loop 114: [s(1629)=<D'+1,s(1628)=<2*D',aux(527)=< -D+B'-2,aux(527)=<B'-D'-1,aux(534)=<A'-2*D'-2,aux(531)=<A'-2*D'-1,aux(534)=<A'/2-D'-3/2,aux(531)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for aux(537)=<B-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(537)=<s(1532)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(537)=<D+1]
* Psum in Loop 114: [s(1629)=<D'+1,s(1628)=<2*D',aux(527)=< -D+B'-2,aux(527)=<B'-D'-1,aux(534)=<A'-2*D'-2,aux(531)=<A'-2*D'-1,aux(534)=<A'/2-D'-3/2,aux(531)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for aux(537)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(537)=<s(1693)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [s(1629)=<D'+1,s(1628)=<2*D',aux(527)=< -D+B'-2,aux(527)=<B'-D'-1,aux(534)=<A'-2*D'-2,aux(531)=<A'-2*D'-1,aux(534)=<A'/2-D'-3/2,aux(531)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for s(1629)=<D'+1  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(538)=<B,aux(538)=<D+2] 
 * Adding constraints: [s(1629)=<it(114)*aux(538)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(538)=<B,aux(538)=<D+2]
* Psum in Loop 114: [s(1628)=<2*D',aux(527)=< -D+B'-2,aux(527)=<B'-D'-1,aux(534)=<A'-2*D'-2,aux(531)=<A'-2*D'-1,aux(534)=<A'/2-D'-3/2,aux(531)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for aux(538)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(538)=<s(1532)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(538)=<D+2]
* Psum in Loop 114: [s(1628)=<2*D',aux(527)=< -D+B'-2,aux(527)=<B'-D'-1,aux(534)=<A'-2*D'-2,aux(531)=<A'-2*D'-1,aux(534)=<A'/2-D'-3/2,aux(531)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for aux(538)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(538)=<s(1693)+2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [s(1628)=<2*D',aux(527)=< -D+B'-2,aux(527)=<B'-D'-1,aux(534)=<A'-2*D'-2,aux(531)=<A'-2*D'-1,aux(534)=<A'/2-D'-3/2,aux(531)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for s(1628)=<2*D'  in Loop 114 
   - Found a solution using cacheing 
 * Adding constraints: [s(1628)=<aux(539)*2,aux(539)=<it(114)*aux(537)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(527)=< -D+B'-2,aux(527)=<B'-D'-1,aux(534)=<A'-2*D'-2,aux(531)=<A'-2*D'-1,aux(534)=<A'/2-D'-3/2,aux(531)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for aux(527)=< -D+B'-2  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [] 
 * Adding constraints: [aux(527)=<it(114)*aux(540)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(527)=<B'-D'-1,aux(534)=<A'-2*D'-2,aux(531)=<A'-2*D'-1,aux(534)=<A'/2-D'-3/2,aux(531)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for aux(527)=<B'-D'-1  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [] 
 * Adding constraints: [aux(527)=<it(114)*aux(541)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(534)=<A'-2*D'-2,aux(531)=<A'-2*D'-1,aux(534)=<A'/2-D'-3/2,aux(531)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for aux(534)=<A'-2*D'-2  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(542)=<2*A-4*D-7] 
 * Adding constraints: [aux(534)=<it(114)*aux(542)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(542)=<2*A-4*D-7]
* Psum in Loop 114: [aux(531)=<A'-2*D'-1,aux(534)=<A'/2-D'-3/2,aux(531)=<A'/2-D'-1/2]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for aux(542)=<2*A-4*D-7  
   - Applying max/min strategy 
     - Loop 114  increases the expression by [2*A'-4*D'-6,A'-2*D'-5] 
     - Loop 116 does not increase the expression
 * Adding constraints:[aux(542)=<aux(543)+aux(544),aux(543)=<2*A-4*D-7] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(531)=<A'-2*D'-1,aux(534)=<A'/2-D'-3/2,aux(531)=<A'/2-D'-1/2,aux(544)=<A'-2*D'-5,aux(544)=<2*A'-4*D'-6]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for aux(531)=<A'-2*D'-1  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(545)=<2*A-4*D-6] 
 * Adding constraints: [aux(531)=<it(114)*aux(545)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(545)=<2*A-4*D-6]
* Psum in Loop 114: [aux(534)=<A'/2-D'-3/2,aux(531)=<A'/2-D'-1/2,aux(544)=<A'-2*D'-5,aux(544)=<2*A'-4*D'-6]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for aux(545)=<2*A-4*D-6  
   - Found a solution using cacheing 
 * Adding constraints:[aux(545)=<aux(542)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(534)=<A'/2-D'-3/2,aux(531)=<A'/2-D'-1/2,aux(544)=<A'-2*D'-5,aux(544)=<2*A'-4*D'-6]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for aux(534)=<A'/2-D'-3/2  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(546)=<A-2*D-4] 
 * Adding constraints: [aux(534)=<it(114)*aux(546)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(546)=<A-2*D-4]
* Psum in Loop 114: [aux(531)=<A'/2-D'-1/2,aux(544)=<A'-2*D'-5,aux(544)=<2*A'-4*D'-6]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for aux(546)=<A-2*D-4  
   - Found a solution using cacheing 
 * Adding constraints:[aux(546)=<aux(542)* (1/2)-1/2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(531)=<A'/2-D'-1/2,aux(544)=<A'-2*D'-5,aux(544)=<2*A'-4*D'-6]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for aux(531)=<A'/2-D'-1/2  in Loop 114 
   - Found a solution using cacheing 
 * Adding constraints: [aux(531)=<aux(547)* (1/2),aux(547)=<it(114)*aux(545)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(544)=<A'-2*D'-5,aux(544)=<2*A'-4*D'-6]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for aux(544)=<A'-2*D'-5  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(548)=<2*A-4*D-10] 
 * Adding constraints: [aux(544)=<it(114)*aux(548)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(548)=<2*A-4*D-10]
* Psum in Loop 114: [aux(544)=<2*A'-4*D'-6]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for aux(548)=<2*A-4*D-10  
   - Found a solution using cacheing 
 * Adding constraints:[aux(548)=<aux(542)-3] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(544)=<2*A'-4*D'-6]
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for aux(544)=<2*A'-4*D'-6  in Loop 114 
   - Found a solution using cacheing 
 * Adding constraints: [aux(544)=<aux(549)*4,aux(549)=<it(114)*aux(546)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [it(116)=<1,s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for it(116)=<1  in Loop 116 
   - Applying inductive sum strategy 
     - head Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A/2-2 
       - Loop 114 has a reset to  [A-D-7/2]
       - Chain-Tail [115,125] is collaborative
     - head Candidate: A/3-D/3-1 
       - Loop 114 has a reset to  [2/3*A-D-7/3]
       - Chain [115,125] is ignored
     - head Candidate: A/4-D/2-1/2 
       - Loop 114 has a reset to  [A/2-D-7/4]
       - Chain [115,125] is ignored
     - tail Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A/2-2 
       - Loop 114 has undefined behavior 
     - tail Candidate: A/3-D/3-1 
       - Loop 114 has undefined behavior 
     - tail Candidate: A/4-D/2-1/2 
       - Loop 114 has undefined behavior 
 * Adding constraints: [it(116)=<aux(550)+aux(551),it(116)=<aux(552)+aux(553),it(116)=<aux(554)+aux(555),it(114)+it(116)+it([115,125])=<E-1,it(114)+it(116)+it([115,125])=<E-1,aux(551)=<A/2-2,aux(553)=<A/3-D/3-1,aux(555)=<A/4-D/2-1/2,it(114)+it(116)+it([115,125])=<E-1,it(114)+it(116)+it([115,125])=<E-1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(550)=<A-D-7/2,aux(554)=<A/2-D-7/4,aux(552)=<2/3*A-D-7/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for aux(550)=<A-D-7/2  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(556)=<A-D-7/2] 
 * Adding constraints: [aux(550)=<it(114)*aux(556)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(556)=<A-D-7/2]
* Psum in Loop 114: [aux(554)=<A/2-D-7/4,aux(552)=<2/3*A-D-7/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for aux(556)=<A-D-7/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(556)=<aux(532)-7/2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(554)=<A/2-D-7/4,aux(552)=<2/3*A-D-7/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for aux(554)=<A/2-D-7/4  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(557)=<A/2-D-7/4] 
 * Adding constraints: [aux(554)=<it(114)*aux(557)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(557)=<A/2-D-7/4]
* Psum in Loop 114: [aux(552)=<2/3*A-D-7/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for aux(557)=<A/2-D-7/4  
   - Found a solution using cacheing 
 * Adding constraints:[aux(557)=<aux(542)* (1/4)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(552)=<2/3*A-D-7/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for aux(552)=<2/3*A-D-7/3  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(558)=<2/3*A-D-7/3] 
 * Adding constraints: [aux(552)=<it(114)*aux(558)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(558)=<2/3*A-D-7/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for aux(558)=<2/3*A-D-7/3  
   - Applying max/min strategy 
     - Loop 114  increases the expression by [2/3*A'-4/3*D'-5/3,A'/3-2/3*D'-4/3] 
     - Loop 116 does not increase the expression
 * Adding constraints:[aux(558)=<aux(559)+aux(560),aux(559)=<2/3*A-D-7/3] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(560)=<A'/3-2/3*D'-4/3,aux(560)=<2/3*A'-4/3*D'-5/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for aux(560)=<A'/3-2/3*D'-4/3  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(561)=<2/3*A-4/3*D-3] 
 * Adding constraints: [aux(560)=<it(114)*aux(561)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(561)=<2/3*A-4/3*D-3]
* Psum in Loop 114: [aux(560)=<2/3*A'-4/3*D'-5/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for aux(561)=<2/3*A-4/3*D-3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(561)=<aux(542)* (1/3)-2/3] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(560)=<2/3*A'-4/3*D'-5/3]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for aux(560)=<2/3*A'-4/3*D'-5/3  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(562)=<4/3*A-8/3*D-5] 
 * Adding constraints: [aux(560)=<it(114)*aux(562)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(562)=<4/3*A-8/3*D-5]
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for aux(562)=<4/3*A-8/3*D-5  
   - Found a solution using cacheing 
 * Adding constraints:[aux(562)=<aux(542)* (2/3)-1/3] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [s(1652)=<A,s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for s(1652)=<A  in Loop 116 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(563)=<A] 
 * Adding constraints: [s(1652)=<it(116)*aux(563)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(563)=<A]
* Psum in Loop 116: [s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for aux(563)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(563)=<aux(529)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [s(1660)=<A-D'+1,s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for s(1660)=<A-D'+1  in Loop 116 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(564)=<A-D] 
 * Adding constraints: [s(1660)=<it(116)*aux(564)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(564)=<A-D]
* Psum in Loop 116: [s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for aux(564)=<A-D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(564)=<aux(532)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [s(1650)=<B,s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for s(1650)=<B  in Loop 116 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(565)=<B] 
 * Adding constraints: [s(1650)=<it(116)*aux(565)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(565)=<B]
* Psum in Loop 116: [s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for aux(565)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(565)=<s(1532)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [s(1649)=<2*B,s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for s(1649)=<2*B  in Loop 116 
   - Found a solution using cacheing 
 * Adding constraints: [s(1649)=<aux(566)*2,aux(566)=<it(116)*aux(565)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [s(1651)=<D',s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for s(1651)=<D'  in Loop 116 
   - Applying inductive sum strategy 
     - head Candidate: A-D-2 
       - Loop 114 has a reset to  [2*A-3*D-6]
       - Chain-Tail [115,125] is collaborative
     - head Candidate: A-3 
       - Loop 114 has a reset to  [2*A-2*D-6]
       - Chain-Tail [115,125] is collaborative and bounds [it([115,125])] 
     - tail Candidate: A-D-2 
       - Loop 114 has undefined behavior 
     - tail Candidate: A-3 
       - Loop 114 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(571)=<D+1,aux(571)=<A/2-1/2] 
 * Adding constraints: [s(1651)=<it(116)*aux(571),s(1651)=<aux(567)+aux(568),it([115,125])+s(1651)=<aux(569)+aux(570),aux(568)=<A-D-2,aux(570)=<A-3] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(571)=<A/2-1/2,aux(571)=<D+1]
* Psum in Loop 114: [aux(567)=<2*A-3*D-6,aux(569)=<2*A-2*D-6]
* Psum in Loop 116: [s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for aux(571)=<A/2-1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(571)=<aux(529)* (1/2)-1/2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(571)=<D+1]
* Psum in Loop 114: [aux(567)=<2*A-3*D-6,aux(569)=<2*A-2*D-6]
* Psum in Loop 116: [s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for aux(571)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(571)=<s(1693)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(567)=<2*A-3*D-6,aux(569)=<2*A-2*D-6]
* Psum in Loop 116: [s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for aux(567)=<2*A-3*D-6  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(572)=<2*A-3*D-6] 
 * Adding constraints: [aux(567)=<it(114)*aux(572)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(572)=<2*A-3*D-6]
* Psum in Loop 114: [aux(569)=<2*A-2*D-6]
* Psum in Loop 116: [s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for aux(572)=<2*A-3*D-6  
   - Found a solution using cacheing 
 * Adding constraints:[aux(572)=<aux(558)*3+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(569)=<2*A-2*D-6]
* Psum in Loop 116: [s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for aux(569)=<2*A-2*D-6  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(573)=<2*A-2*D-6] 
 * Adding constraints: [aux(569)=<it(114)*aux(573)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(573)=<2*A-2*D-6]
* Psum in Loop 116: [s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for aux(573)=<2*A-2*D-6  
   - Found a solution using cacheing 
 * Adding constraints:[aux(573)=<aux(532)*2-6] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [s(1654)=<D'+1,s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [it([115,125])=<1,s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for s(1654)=<D'+1  in Loop 116 
   - Applying inductive sum strategy 
     - head Candidate: 3/2*A-9/2 
       - Loop 114 has a reset to  [3*A-3*D-9]
       - Chain-Tail [115,125] is collaborative and bounds [it([115,125])] 
     - head Candidate: A+E-3 
       - Loop 114 has a reset to  [2*A-2*D+E-7]
       - Chain-Tail [115,125] is collaborative and bounds [it([115,125])] 
     - tail Candidate: 3/2*A-9/2 
       - Loop 114 has undefined behavior 
     - tail Candidate: A+E-3 
       - Loop 114 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(578)=<D+2,aux(578)=<A/2+1/2] 
 * Adding constraints: [s(1654)=<it(116)*aux(578),it([115,125])+s(1654)=<aux(574)+aux(575),it([115,125])+s(1654)=<aux(576)+aux(577),aux(575)=<3/2*A-9/2,aux(577)=<A+E-3] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(578)=<A/2+1/2,aux(578)=<D+2]
* Psum in Loop 114: [aux(576)=<2*A-2*D+E-7,aux(574)=<3*A-3*D-9]
* Psum in Loop 116: [s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for aux(578)=<A/2+1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(578)=<aux(529)* (1/2)+1/2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(578)=<D+2]
* Psum in Loop 114: [aux(576)=<2*A-2*D+E-7,aux(574)=<3*A-3*D-9]
* Psum in Loop 116: [s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for aux(578)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(578)=<s(1693)+2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(576)=<2*A-2*D+E-7,aux(574)=<3*A-3*D-9]
* Psum in Loop 116: [s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for aux(576)=<2*A-2*D+E-7  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(579)=<2*A-2*D+E-7] 
 * Adding constraints: [aux(576)=<it(114)*aux(579)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(579)=<2*A-2*D+E-7]
* Psum in Loop 114: [aux(574)=<3*A-3*D-9]
* Psum in Loop 116: [s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for aux(579)=<2*A-2*D+E-7  
   - Applying max/min strategy 
     - Loop 114  increases the expression by [2*A'-4*D'-5,A'-2*D'-4] 
     - Loop 116 does not increase the expression
 * Adding constraints:[aux(579)=<aux(580)+aux(581),aux(580)=<2*A-2*D+E-7] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(574)=<3*A-3*D-9,aux(581)=<A'-2*D'-4,aux(581)=<2*A'-4*D'-5]
* Psum in Loop 116: [s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for aux(574)=<3*A-3*D-9  in Loop 114 
   - Found a solution using cacheing 
 * Adding constraints: [aux(574)=<aux(582)* (3/2),aux(582)=<it(114)*aux(573)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(581)=<A'-2*D'-4,aux(581)=<2*A'-4*D'-5]
* Psum in Loop 116: [s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for aux(581)=<A'-2*D'-4  in Loop 114 
   - Found a solution using cacheing 
 * Adding constraints: [aux(581)=<aux(583)*3,aux(583)=<it(114)*aux(561)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 114: [aux(581)=<2*A'-4*D'-5]
* Psum in Loop 116: [s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for aux(581)=<2*A'-4*D'-5  in Loop 114 
   - Found a solution using cacheing 
 * Adding constraints: [aux(581)=<aux(584)*3,aux(584)=<it(114)*aux(562)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [s(1653)=<2*D',aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for s(1653)=<2*D'  in Loop 116 
   - Found a solution using cacheing 
 * Adding constraints: [s(1653)=<aux(585)*2,aux(585)=<it(116)*aux(571),aux(585)=<aux(567)+aux(568),aux(585)+it([115,125])=<aux(569)+aux(570)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 116: [aux(528)=<B'-1]
* Psum in Chain-Tail [115,125]: [s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for aux(528)=<B'-1  in Loop 116 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [] 
 * Adding constraints: [aux(528)=<it(116)*aux(586)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [115,125]: [s(1731)=<A,s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for s(1731)=<A  in Chain-Tail [115,125] 
   - Applying inductive sum strategy 
     - head Candidate: 2*D+2*E-2 
       - Loop 114 is collaborative
       - Loop 116 is collaborative
     - tail Candidate: 2*D+2*E-2 
       - Loop 114 is collaborative
       - Loop 116 is collaborative
 * Adding constraints: [s(1731)=<2*D+2*E-2,s(1731)=<2*D+2*E-2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [115,125]: [s(1729)=<B,s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for s(1729)=<B  in Chain-Tail [115,125] 
   - Applying inductive sum strategy 
     - head Candidate: B 
       - Loop 114 has undefined behavior 
     - tail Candidate: B 
       - Loop 114 has undefined behavior 
     - head Candidate: B 
       - We failed to classify this candidate before 
     - tail Candidate: B 
       - We failed to classify this candidate before 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(587)=<B] 
 * Adding constraints: [s(1729)=<it([115,125])*aux(587)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(587)=<B]
* Psum in Chain-Tail [115,125]: [s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing max_min for aux(587)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(587)=<s(1532)+1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [115,125]: [s(1728)=<2*B,s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for s(1728)=<2*B  in Chain-Tail [115,125] 
   - Found a solution using cacheing 
 * Adding constraints: [s(1728)=<aux(588)*2,aux(588)=<it([115,125])*aux(587)] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [115,125]: [s(1739)=<D,s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for s(1739)=<D  in Chain-Tail [115,125] 
   - Applying inductive sum strategy 
     - head Candidate: D+E-2 
       - Loop 114 is collaborative
       - Loop 116 is collaborative
     - tail Candidate: D+E-2 
       - Loop 114 is collaborative
       - Loop 116 is collaborative
 * Adding constraints: [s(1739)=<D+E-2,s(1739)=<D+E-2] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [115,125]: [s(1730)=<D+1,s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for s(1730)=<D+1  in Chain-Tail [115,125] 
   - Applying inductive sum strategy 
     - head Candidate: D+E-1 
       - Loop 114 is collaborative
       - Loop 116 is collaborative
     - tail Candidate: D+E-1 
       - Loop 114 is collaborative
       - Loop 116 is collaborative
 * Adding constraints: [s(1730)=<D+E-1,s(1730)=<D+E-1] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [115,125]: [s(1733)=<D+2,s(1732)=<2*D+2]

###### Computing sum for s(1733)=<D+2  in Chain-Tail [115,125] 
   - Applying inductive sum strategy 
     - head Candidate: D+E 
       - Loop 114 is collaborative
       - Loop 116 is collaborative
     - tail Candidate: D+E 
       - Loop 114 is collaborative
       - Loop 116 is collaborative
 * Adding constraints: [s(1733)=<D+E,s(1733)=<D+E] 

##### Pending set echelon_helper(A,B,C,D,E,F,G,H,I,J)
* Psum in Chain-Tail [115,125]: [s(1732)=<2*D+2]

###### Computing sum for s(1732)=<2*D+2  in Chain-Tail [115,125] 
   - Found a solution using cacheing 
 * Adding constraints: [s(1732)=<aux(589)*2,aux(589)=<D+E-1,aux(589)=<D+E-1] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [114,116,[115,125]] 
Found a cycle in the non-final constraints
 Removed possibly redundant constraints to solve a cycle in the cost structure 
it(116)=<aux(550)+aux(551)
it(116)=<aux(552)+aux(553)
it(116)=<aux(554)+aux(555)
Found a cycle in the non-final constraints
 Removed possibly redundant constraints to solve a cycle in the cost structure 
aux(571)=<aux(529)* (1/2)-1/2
aux(578)=<aux(529)* (1/2)+1/2
Found a cycle in the non-final constraints
 Removed possibly redundant constraints to solve a cycle in the cost structure 
s(1651)=<aux(567)+aux(568)
it([115,125])+s(1651)=<aux(569)+aux(570)
it([115,125])+s(1654)=<aux(574)+aux(575)
it([115,125])+s(1654)=<aux(576)+aux(577)
aux(585)=<aux(567)+aux(568)
aux(585)+it([115,125])=<aux(569)+aux(570)
Found a cycle in the non-final constraints
Could not solve cycle in cost structure.
 Discarded constraints:  
aux(579)=<aux(580)+aux(581)
aux(573)=<aux(532)*2-6
aux(572)=<aux(558)*3+1
aux(564)=<aux(532)
aux(563)=<aux(529)
aux(562)=<aux(542)* (2/3)-1/3
aux(561)=<aux(542)* (1/3)-2/3
aux(558)=<aux(559)+aux(560)
aux(557)=<aux(542)* (1/4)
aux(556)=<aux(532)-7/2
aux(548)=<aux(542)-3
aux(546)=<aux(542)* (1/2)-1/2
aux(545)=<aux(542)+1
aux(542)=<aux(543)+aux(544)
aux(532)=<aux(533)+aux(534)
aux(529)=<aux(530)+aux(531)
aux(584)=<it(114)*aux(562)
aux(581)=<aux(584)*3
aux(583)=<it(114)*aux(561)
aux(581)=<aux(583)*3
aux(582)=<it(114)*aux(573)
aux(574)=<aux(582)* (3/2)
aux(576)=<it(114)*aux(579)
aux(569)=<it(114)*aux(573)
aux(567)=<it(114)*aux(572)
s(1660)=<it(116)*aux(564)
s(1652)=<it(116)*aux(563)
aux(560)=<it(114)*aux(562)
aux(560)=<it(114)*aux(561)
aux(552)=<it(114)*aux(558)
aux(554)=<it(114)*aux(557)
aux(550)=<it(114)*aux(556)
aux(549)=<it(114)*aux(546)
aux(544)=<aux(549)*4
aux(544)=<it(114)*aux(548)
aux(547)=<it(114)*aux(545)
aux(531)=<aux(547)* (1/2)
aux(534)=<it(114)*aux(546)
aux(531)=<it(114)*aux(545)
aux(534)=<it(114)*aux(542)
s(1635)=<it(114)*aux(532)
s(1627)=<it(114)*aux(529)

#### Simplifying cost structure of phase [114,116,[115,125]] 
 * Joined equivalent variables [aux(590),aux(530),aux(570)] into aux(590)
 * Joined equivalent variables [aux(591),aux(533),aux(568)] into aux(591)
 * Joined equivalent variables [aux(592),aux(589),s(1693),s(1730),s(1733),s(1739)] into aux(592)
 * Joined equivalent variables [aux(571),s(1589)] into aux(571)
 * Joined equivalent variables [aux(535),aux(565),aux(587),s(1528),s(1585),s(1691)] into aux(535)
 * Joined equivalent variables [aux(566),s(1650)] into aux(566)
 * Joined equivalent variables [aux(539),s(1626)] into aux(539)
 * Joined equivalent variables [aux(536),s(1625)] into aux(536)
 * Joined equivalent variables [aux(585),s(1651)] into aux(585)
 * Joined equivalent variables [aux(588),s(1729)] into aux(588)
 * Joined equivalent variables [it(114),it(116),it([115,125])] into it(114)
 * Joined equivalent variables [aux(536),aux(566),aux(588)] into aux(536)
 * Joined equivalent variables [s(1536),s(1592),s(1698)] into s(1536)
 * Joined equivalent variables [s(1716),s(1717)] into s(1716)
 * Joined equivalent variables [s(1624),s(1649),s(1728)] into s(1624)

#### Cost of phase [114,116]:echelon_helper(A,B,C,D,E,F,G,H,I,J) -> [] 
123*it(114)+16*s(1611)+244*s(1612)+120*s(1613)+80*s(1614)+40*s(1615)+40*s(1616)+40*s(1617)+80*s(1618)+80*s(1619)+64*s(1620)+64*s(1621)+64*s(1622)+64*s(1623)+16*s(1636)+448*s(1637)+240*s(1638)+80*s(1639)+80*s(1640)+40*s(1641)+40*s(1642)+80*s(1643)+80*s(1644)+64*s(1645)+64*s(1646)+64*s(1647)+64*s(1648)+544*s(1716)+240*s(1718)+80*s(1719)+80*s(1720)+40*s(1721)+40*s(1722)+80*s(1723)+64*s(1724)+64*s(1725)+64*s(1726)+64*s(1727)+0
  Such that:s(1731) =< 2*D+2*E
aux(592) =< D+E
aux(593) =< E
it(114) =< aux(593)
aux(578) =< aux(592)+2
aux(571) =< aux(592)+1
aux(538) =< aux(592)+2
aux(537) =< aux(592)+1
s(1732) =< aux(592)*2
aux(539) =< it(114)*aux(537)
s(1629) =< it(114)*aux(538)
s(1628) =< aux(539)*2
aux(585) =< it(114)*aux(571)
s(1654) =< it(114)*aux(578)
s(1653) =< aux(585)*2
s(1716) =< aux(592)
s(1703) =< aux(592)
s(1704) =< aux(592)
s(1734) =< s(1716)*aux(592)
s(1736) =< s(1716)*s(1703)
s(1735) =< s(1716)*s(1704)
s(1720) =< s(1736)
s(1721) =< s(1735)
s(1722) =< s(1734)
s(1723) =< aux(592)
s(1724) =< s(1731)
s(1725) =< s(1731)
s(1724) =< aux(592)
s(1725) =< aux(592)
s(1724) =< s(1732)
s(1725) =< s(1732)
s(1726) =< s(1731)
s(1727) =< s(1731)
s(1726) =< aux(592)
s(1727) =< aux(592)
s(1636) =< aux(585)
s(1643) =< s(1654)
s(1644) =< s(1654)
s(1645) =< aux(585)
s(1646) =< aux(585)
s(1645) =< s(1653)
s(1646) =< s(1653)
s(1647) =< aux(585)
s(1648) =< aux(585)
s(1611) =< aux(539)
s(1618) =< s(1629)
s(1619) =< s(1629)
s(1620) =< aux(539)
s(1621) =< aux(539)
s(1620) =< s(1628)
s(1621) =< s(1628)
s(1622) =< aux(539)
s(1623) =< aux(539)

Unbounded itvars
s(1612) :  sum(114),s(1534)
s(1613) :  sum(114),s(1543)
s(1614) :  sum(114),s(1544)
s(1615) :  sum(114),s(1545)
s(1616) :  sum(114),s(1546)
s(1617) :  sum(114),s(1547)
s(1637) :  sum(116),s(1591)
s(1638) :  sum(116),s(1595)
s(1639) :  sum(116),s(1596)
s(1640) :  sum(116),s(1602)
s(1641) :  sum(116),s(1603)
s(1642) :  sum(116),s(1604)
s(1718) :  sum([115,125]),s(1701)
s(1719) :  sum([115,125]),s(1702)
 * Renamed intermediate variables: 
[ (eq(132,1),aux(159))>>s(1768), (eq(132,1),aux(160))>>s(1769), (eq(132,1),aux(161))>>s(1770), (eq(132,1),aux(162))>>s(1771), (eq(132,1),s(715))>>s(1772), (eq(132,1),s(717))>>s(1773), (eq(132,1),s(719))>>s(1774), (eq(132,1),s(721))>>s(1775)]

#### Simplifying cost structure of CE 132 

#### Simplifying cost structure of chain [124,125] 
 * Renamed intermediate variables: 
[ (eq(133,1),aux(167))>>s(1776), (eq(133,1),aux(168))>>s(1777), (eq(133,1),aux(169))>>s(1778), (eq(133,1),aux(170))>>s(1779), (eq(133,1),s(749))>>s(1780), (eq(133,1),s(760))>>s(1781), (eq(133,1),s(763))>>s(1782), (eq(133,1),s(764))>>s(1783), (eq(133,1),s(766))>>s(1784), (eq(133,1),s(768))>>s(1785), (eq(133,1),s(747))>>s(1786), (eq(133,1),s(751))>>s(1787), (eq(133,1),s(753))>>s(1788)]

#### Simplifying cost structure of CE 133 

#### Simplifying cost structure of chain [123,125] 
 * Renamed intermediate variables: 
[ (eq(134,1),aux(175))>>s(1789), (eq(134,1),aux(176))>>s(1790), (eq(134,1),aux(177))>>s(1791), (eq(134,1),aux(178))>>s(1792), (eq(134,1),s(825))>>s(1793), (eq(134,1),s(835))>>s(1794), (eq(134,1),s(838))>>s(1795), (eq(134,1),s(839))>>s(1796), (eq(134,1),s(841))>>s(1797), (eq(134,1),s(843))>>s(1798), (eq(134,1),s(823))>>s(1799), (eq(134,1),s(827))>>s(1800), (eq(134,1),s(829))>>s(1801)]

#### Simplifying cost structure of CE 134 

#### Simplifying cost structure of chain [122,[113],125] 
 * Joined equivalent variables [aux(594),s(1449)] into aux(594)

#### Simplifying cost structure of chain [122,[113],117,125] 
 * Joined equivalent variables [aux(595),s(1789)] into aux(595)
 * Joined equivalent variables [aux(596),aux(357),aux(359)] into aux(596)
 * Joined equivalent variables [aux(348),s(1455)] into aux(348)
 * Joined equivalent variables [s(1475),s(1478)] into s(1475)
 * Joined equivalent variables [s(1483),s(1484)] into s(1483)
 * Joined equivalent variables [s(1481),s(1482)] into s(1481)
 * Joined equivalent variables [s(1675),s(1676)] into s(1675)
 * Joined equivalent variables [s(1680),s(1681)] into s(1680)
 * Joined equivalent variables [s(1678),s(1679)] into s(1678)
 * Joined equivalent variables [s(1474),s(1480)] into s(1474)
 * Joined equivalent variables [s(1493),s(1494)] into s(1493)
 * Joined equivalent variables [it(113),s(1675)] into it(113)
 * Joined equivalent variables [s(1476),s(1477)] into s(1476)

#### Simplifying cost structure of chain [122,[113],115,125] 
 * Joined equivalent variables [aux(597),s(1789)] into aux(597)
 * Joined equivalent variables [aux(598),aux(378),aux(380)] into aux(598)
 * Joined equivalent variables [aux(369),s(1455)] into aux(369)
 * Joined equivalent variables [s(1703),s(1704)] into s(1703)
 * Joined equivalent variables [s(1475),s(1478),s(1718),s(1719)] into s(1475)
 * Joined equivalent variables [s(1483),s(1484)] into s(1483)
 * Joined equivalent variables [s(1481),s(1482)] into s(1481)
 * Joined equivalent variables [s(1716),s(1723)] into s(1716)
 * Joined equivalent variables [s(1726),s(1727)] into s(1726)
 * Joined equivalent variables [s(1724),s(1725)] into s(1724)
 * Joined equivalent variables [s(1474),s(1480)] into s(1474)
 * Joined equivalent variables [s(1735),s(1736)] into s(1735)
 * Joined equivalent variables [s(1493),s(1494)] into s(1493)
 * Joined equivalent variables [it(113),s(1716)] into it(113)
 * Joined equivalent variables [s(1496),s(1734)] into s(1496)
 * Joined equivalent variables [s(1476),s(1477)] into s(1476)
 * Joined equivalent variables [s(1720),s(1721)] into s(1720)
 * Joined equivalent variables [s(1473),s(1722)] into s(1473)

#### Simplifying cost structure of chain [122,125] 

#### Simplifying cost structure of chain [122,117,125] 
 * Joined equivalent variables [aux(599),s(1665),s(1789)] into aux(599)
 * Joined equivalent variables [aux(600),s(1666),s(1790)] into aux(600)
 * Joined equivalent variables [aux(601),s(1662),s(1667)] into aux(601)

#### Simplifying cost structure of chain [122,115,125] 
 * Joined equivalent variables [aux(602),s(1693),s(1789)] into aux(602)
 * Joined equivalent variables [aux(603),s(1694),s(1790)] into aux(603)
 * Joined equivalent variables [aux(604),s(1690),s(1695)] into aux(604)
 * Renamed intermediate variables: 
[ (eq(135,1),aux(180))>>s(1802), (eq(135,1),aux(181))>>s(1803), (eq(135,1),aux(182))>>s(1804), (eq(135,1),aux(183))>>s(1805), (eq(135,1),aux(184))>>s(1806), (eq(135,1),s(881))>>s(1807), (eq(135,1),s(883))>>s(1808), (eq(135,1),s(885))>>s(1809), (eq(135,1),s(887))>>s(1810), (eq(135,1),s(901))>>s(1811), (eq(135,1),s(903))>>s(1812)]

#### Simplifying cost structure of CE 135 

#### Simplifying cost structure of chain [121,125] 
 * Renamed intermediate variables: 
[ (eq(136,1),aux(190))>>s(1813), (eq(136,1),aux(191))>>s(1814), (eq(136,1),aux(192))>>s(1815), (eq(136,1),aux(193))>>s(1816), (eq(136,1),aux(194))>>s(1817), (eq(136,1),s(925))>>s(1818), (eq(136,1),s(926))>>s(1819), (eq(136,1),s(929))>>s(1820), (eq(136,1),s(930))>>s(1821), (eq(136,1),s(932))>>s(1822), (eq(136,1),s(934))>>s(1823), (eq(136,1),s(913))>>s(1824), (eq(136,1),s(915))>>s(1825), (eq(136,1),s(917))>>s(1826), (eq(136,1),s(919))>>s(1827), (eq(136,1),s(955))>>s(1828), (eq(136,1),s(957))>>s(1829)]

#### Simplifying cost structure of CE 136 

#### Simplifying cost structure of chain [120,[114,116],[113],125] 
 * Joined equivalent variables [aux(605),aux(341),aux(342)] into aux(605)
 * Joined equivalent variables [aux(269),aux(288)] into aux(269)
 * Joined equivalent variables [aux(268),aux(287)] into aux(268)
 * Joined equivalent variables [aux(271),s(1629)] into aux(271)
 * Joined equivalent variables [aux(289),s(1496)] into aux(289)
 * Joined equivalent variables [s(1473),s(1611)] into s(1473)

#### Simplifying cost structure of chain [120,[114,116],[113],117,125] 
 * Joined equivalent variables [aux(606),s(1813)] into aux(606)
 * Joined equivalent variables [aux(607),aux(360),aux(363)] into aux(607)
 * Joined equivalent variables [it(114),s(1675)] into it(114)

#### Simplifying cost structure of chain [120,[114,116],[113],115,125] 
 * Joined equivalent variables [aux(608),s(1813)] into aux(608)
 * Joined equivalent variables [aux(609),aux(381),aux(384)] into aux(609)
 * Joined equivalent variables [it(114),s(1716)] into it(114)

#### Simplifying cost structure of chain [120,[114,116],125] 
 * Joined equivalent variables [aux(610),aux(385),s(1589)] into aux(610)

#### Simplifying cost structure of chain [120,[114,116],118,125] 
 * Joined equivalent variables [aux(611),aux(456),aux(457)] into aux(611)
 * Joined equivalent variables [aux(398),aux(438)] into aux(398)
 * Joined equivalent variables [aux(397),aux(431)] into aux(397)
 * Joined equivalent variables [s(1612),s(1613),s(1614),s(1615),s(1616),s(1617),s(1637),s(1638),s(1639),s(1640),s(1641),s(1642),s(1754)] into s(1612)
 * Joined equivalent variables [s(1611),s(1622),s(1623)] into s(1611)
 * Joined equivalent variables [s(1620),s(1621)] into s(1620)
 * Joined equivalent variables [s(1636),s(1647),s(1648)] into s(1636)
 * Joined equivalent variables [s(1645),s(1646)] into s(1645)
 * Joined equivalent variables [s(1755),s(1756),s(1759),s(1760)] into s(1755)
 * Joined equivalent variables [s(1757),s(1758)] into s(1757)
 * Joined equivalent variables [s(1618),s(1619)] into s(1618)
 * Joined equivalent variables [s(1643),s(1644)] into s(1643)
 * Joined equivalent variables [aux(399),aux(445)] into aux(399)
 * Joined equivalent variables [s(1629),s(1654)] into s(1629)
 * Joined equivalent variables [it(114),s(1755)] into it(114)
 * Joined equivalent variables [s(1628),s(1653)] into s(1628)
 * Joined equivalent variables [s(1611),s(1636)] into s(1611)
 * Joined equivalent variables [s(1618),s(1643)] into s(1618)
 * Joined equivalent variables [s(1620),s(1645)] into s(1620)

#### Simplifying cost structure of chain [120,[114,116],117,125] 
 * Joined equivalent variables [aux(612),aux(524),aux(525)] into aux(612)
 * Joined equivalent variables [aux(470),aux(510)] into aux(470)
 * Joined equivalent variables [aux(469),aux(503)] into aux(469)
 * Joined equivalent variables [s(1612),s(1613),s(1614),s(1615),s(1616),s(1617),s(1637),s(1638),s(1639),s(1640),s(1641),s(1642)] into s(1612)
 * Joined equivalent variables [s(1611),s(1622),s(1623)] into s(1611)
 * Joined equivalent variables [s(1620),s(1621)] into s(1620)
 * Joined equivalent variables [s(1636),s(1647),s(1648)] into s(1636)
 * Joined equivalent variables [s(1645),s(1646)] into s(1645)
 * Joined equivalent variables [s(1675),s(1676)] into s(1675)
 * Joined equivalent variables [s(1680),s(1681)] into s(1680)
 * Joined equivalent variables [s(1678),s(1679)] into s(1678)
 * Joined equivalent variables [s(1618),s(1619)] into s(1618)
 * Joined equivalent variables [s(1643),s(1644)] into s(1643)
 * Joined equivalent variables [aux(471),aux(517)] into aux(471)
 * Joined equivalent variables [s(1629),s(1654)] into s(1629)
 * Joined equivalent variables [it(114),s(1675)] into it(114)
 * Joined equivalent variables [s(1628),s(1653)] into s(1628)
 * Joined equivalent variables [s(1611),s(1636)] into s(1611)
 * Joined equivalent variables [s(1618),s(1643)] into s(1618)
 * Joined equivalent variables [s(1620),s(1645)] into s(1620)

#### Simplifying cost structure of chain [120,[114,116],115,125] 
 * Joined equivalent variables [aux(613),aux(592),aux(593)] into aux(613)
 * Joined equivalent variables [aux(538),aux(578)] into aux(538)
 * Joined equivalent variables [aux(537),aux(571)] into aux(537)
 * Joined equivalent variables [s(1703),s(1704)] into s(1703)
 * Joined equivalent variables [s(1612),s(1613),s(1614),s(1615),s(1616),s(1617),s(1637),s(1638),s(1639),s(1640),s(1641),s(1642),s(1718),s(1719)] into s(1612)
 * Joined equivalent variables [s(1611),s(1622),s(1623)] into s(1611)
 * Joined equivalent variables [s(1620),s(1621)] into s(1620)
 * Joined equivalent variables [s(1636),s(1647),s(1648)] into s(1636)
 * Joined equivalent variables [s(1645),s(1646)] into s(1645)
 * Joined equivalent variables [s(1716),s(1723)] into s(1716)
 * Joined equivalent variables [s(1726),s(1727)] into s(1726)
 * Joined equivalent variables [s(1724),s(1725)] into s(1724)
 * Joined equivalent variables [s(1618),s(1619)] into s(1618)
 * Joined equivalent variables [s(1643),s(1644)] into s(1643)
 * Joined equivalent variables [aux(539),aux(585)] into aux(539)
 * Joined equivalent variables [s(1629),s(1654)] into s(1629)
 * Joined equivalent variables [s(1735),s(1736)] into s(1735)
 * Joined equivalent variables [it(114),s(1716)] into it(114)
 * Joined equivalent variables [s(1628),s(1653)] into s(1628)
 * Joined equivalent variables [s(1611),s(1636)] into s(1611)
 * Joined equivalent variables [s(1618),s(1643)] into s(1618)
 * Joined equivalent variables [s(1720),s(1721)] into s(1720)
 * Joined equivalent variables [s(1620),s(1645)] into s(1620)

#### Simplifying cost structure of chain [120,[113],125] 
 * Joined equivalent variables [aux(614),s(1449)] into aux(614)

#### Simplifying cost structure of chain [120,[113],117,125] 
 * Joined equivalent variables [aux(615),s(1813)] into aux(615)
 * Joined equivalent variables [aux(616),aux(357),aux(359)] into aux(616)
 * Joined equivalent variables [aux(348),s(1455)] into aux(348)
 * Joined equivalent variables [s(1475),s(1478)] into s(1475)
 * Joined equivalent variables [s(1483),s(1484)] into s(1483)
 * Joined equivalent variables [s(1481),s(1482)] into s(1481)
 * Joined equivalent variables [s(1675),s(1676)] into s(1675)
 * Joined equivalent variables [s(1680),s(1681)] into s(1680)
 * Joined equivalent variables [s(1678),s(1679)] into s(1678)
 * Joined equivalent variables [s(1474),s(1480)] into s(1474)
 * Joined equivalent variables [s(1493),s(1494)] into s(1493)
 * Joined equivalent variables [it(113),s(1675)] into it(113)
 * Joined equivalent variables [s(1476),s(1477)] into s(1476)

#### Simplifying cost structure of chain [120,[113],115,125] 
 * Joined equivalent variables [aux(617),s(1813)] into aux(617)
 * Joined equivalent variables [aux(618),aux(378),aux(380)] into aux(618)
 * Joined equivalent variables [aux(369),s(1455)] into aux(369)
 * Joined equivalent variables [s(1703),s(1704)] into s(1703)
 * Joined equivalent variables [s(1475),s(1478),s(1718),s(1719)] into s(1475)
 * Joined equivalent variables [s(1483),s(1484)] into s(1483)
 * Joined equivalent variables [s(1481),s(1482)] into s(1481)
 * Joined equivalent variables [s(1716),s(1723)] into s(1716)
 * Joined equivalent variables [s(1726),s(1727)] into s(1726)
 * Joined equivalent variables [s(1724),s(1725)] into s(1724)
 * Joined equivalent variables [s(1474),s(1480)] into s(1474)
 * Joined equivalent variables [s(1735),s(1736)] into s(1735)
 * Joined equivalent variables [s(1493),s(1494)] into s(1493)
 * Joined equivalent variables [it(113),s(1716)] into it(113)
 * Joined equivalent variables [s(1496),s(1734)] into s(1496)
 * Joined equivalent variables [s(1476),s(1477)] into s(1476)
 * Joined equivalent variables [s(1720),s(1721)] into s(1720)
 * Joined equivalent variables [s(1473),s(1722)] into s(1473)

#### Simplifying cost structure of chain [120,125] 

#### Simplifying cost structure of chain [120,118,125] 
 * Joined equivalent variables [aux(619),s(1744),s(1813)] into aux(619)
 * Joined equivalent variables [aux(620),s(1745),s(1814)] into aux(620)
 * Joined equivalent variables [aux(621),s(1741),s(1815)] into aux(621)

#### Simplifying cost structure of chain [120,117,125] 
 * Joined equivalent variables [aux(622),s(1665),s(1813)] into aux(622)
 * Joined equivalent variables [aux(623),s(1666),s(1814)] into aux(623)
 * Joined equivalent variables [aux(624),s(1661)] into aux(624)
 * Joined equivalent variables [aux(625),s(1815)] into aux(625)

#### Simplifying cost structure of chain [120,115,125] 
 * Joined equivalent variables [aux(626),s(1693),s(1813)] into aux(626)
 * Joined equivalent variables [aux(627),s(1694),s(1814)] into aux(627)
 * Joined equivalent variables [aux(628),s(1689)] into aux(628)
 * Joined equivalent variables [aux(629),s(1815)] into aux(629)
 * Renamed intermediate variables: 
[ (eq(137,1),aux(200))>>s(1830), (eq(137,1),aux(201))>>s(1831), (eq(137,1),aux(202))>>s(1832), (eq(137,1),aux(203))>>s(1833), (eq(137,1),aux(204))>>s(1834), (eq(137,1),s(1000))>>s(1835), (eq(137,1),s(1001))>>s(1836), (eq(137,1),s(1004))>>s(1837), (eq(137,1),s(1005))>>s(1838), (eq(137,1),s(1007))>>s(1839), (eq(137,1),s(1009))>>s(1840), (eq(137,1),s(989))>>s(1841), (eq(137,1),s(991))>>s(1842), (eq(137,1),s(993))>>s(1843), (eq(137,1),s(995))>>s(1844), (eq(137,1),s(1022))>>s(1845), (eq(137,1),s(1024))>>s(1846)]

#### Simplifying cost structure of CE 137 

#### Simplifying cost structure of chain [119,[114,116],[113],125] 
 * Joined equivalent variables [aux(630),aux(341),aux(342)] into aux(630)
 * Joined equivalent variables [aux(269),aux(288)] into aux(269)
 * Joined equivalent variables [aux(268),aux(287)] into aux(268)
 * Joined equivalent variables [aux(271),s(1629)] into aux(271)
 * Joined equivalent variables [aux(289),s(1496)] into aux(289)
 * Joined equivalent variables [s(1473),s(1611)] into s(1473)

#### Simplifying cost structure of chain [119,[114,116],[113],117,125] 
 * Joined equivalent variables [aux(631),s(1830)] into aux(631)
 * Joined equivalent variables [aux(632),aux(360),aux(363)] into aux(632)
 * Joined equivalent variables [it(114),s(1675)] into it(114)

#### Simplifying cost structure of chain [119,[114,116],[113],115,125] 
 * Joined equivalent variables [aux(633),s(1830)] into aux(633)
 * Joined equivalent variables [aux(634),aux(381),aux(384)] into aux(634)
 * Joined equivalent variables [it(114),s(1716)] into it(114)

#### Simplifying cost structure of chain [119,[114,116],125] 
 * Joined equivalent variables [aux(635),aux(385),s(1589)] into aux(635)

#### Simplifying cost structure of chain [119,[114,116],118,125] 
 * Joined equivalent variables [aux(636),aux(456),aux(457)] into aux(636)
 * Joined equivalent variables [aux(398),aux(438)] into aux(398)
 * Joined equivalent variables [aux(397),aux(431)] into aux(397)
 * Joined equivalent variables [s(1612),s(1613),s(1614),s(1615),s(1616),s(1617),s(1637),s(1638),s(1639),s(1640),s(1641),s(1642),s(1754)] into s(1612)
 * Joined equivalent variables [s(1611),s(1622),s(1623)] into s(1611)
 * Joined equivalent variables [s(1620),s(1621)] into s(1620)
 * Joined equivalent variables [s(1636),s(1647),s(1648)] into s(1636)
 * Joined equivalent variables [s(1645),s(1646)] into s(1645)
 * Joined equivalent variables [s(1755),s(1756),s(1759),s(1760)] into s(1755)
 * Joined equivalent variables [s(1757),s(1758)] into s(1757)
 * Joined equivalent variables [s(1618),s(1619)] into s(1618)
 * Joined equivalent variables [s(1643),s(1644)] into s(1643)
 * Joined equivalent variables [aux(399),aux(445)] into aux(399)
 * Joined equivalent variables [s(1629),s(1654)] into s(1629)
 * Joined equivalent variables [it(114),s(1755)] into it(114)
 * Joined equivalent variables [s(1628),s(1653)] into s(1628)
 * Joined equivalent variables [s(1611),s(1636)] into s(1611)
 * Joined equivalent variables [s(1618),s(1643)] into s(1618)
 * Joined equivalent variables [s(1620),s(1645)] into s(1620)

#### Simplifying cost structure of chain [119,[114,116],117,125] 
 * Joined equivalent variables [aux(637),aux(524),aux(525)] into aux(637)
 * Joined equivalent variables [aux(470),aux(510)] into aux(470)
 * Joined equivalent variables [aux(469),aux(503)] into aux(469)
 * Joined equivalent variables [s(1612),s(1613),s(1614),s(1615),s(1616),s(1617),s(1637),s(1638),s(1639),s(1640),s(1641),s(1642)] into s(1612)
 * Joined equivalent variables [s(1611),s(1622),s(1623)] into s(1611)
 * Joined equivalent variables [s(1620),s(1621)] into s(1620)
 * Joined equivalent variables [s(1636),s(1647),s(1648)] into s(1636)
 * Joined equivalent variables [s(1645),s(1646)] into s(1645)
 * Joined equivalent variables [s(1675),s(1676)] into s(1675)
 * Joined equivalent variables [s(1680),s(1681)] into s(1680)
 * Joined equivalent variables [s(1678),s(1679)] into s(1678)
 * Joined equivalent variables [s(1618),s(1619)] into s(1618)
 * Joined equivalent variables [s(1643),s(1644)] into s(1643)
 * Joined equivalent variables [aux(471),aux(517)] into aux(471)
 * Joined equivalent variables [s(1629),s(1654)] into s(1629)
 * Joined equivalent variables [it(114),s(1675)] into it(114)
 * Joined equivalent variables [s(1628),s(1653)] into s(1628)
 * Joined equivalent variables [s(1611),s(1636)] into s(1611)
 * Joined equivalent variables [s(1618),s(1643)] into s(1618)
 * Joined equivalent variables [s(1620),s(1645)] into s(1620)

#### Simplifying cost structure of chain [119,[114,116],115,125] 
 * Joined equivalent variables [aux(638),aux(592),aux(593)] into aux(638)
 * Joined equivalent variables [aux(538),aux(578)] into aux(538)
 * Joined equivalent variables [aux(537),aux(571)] into aux(537)
 * Joined equivalent variables [s(1703),s(1704)] into s(1703)
 * Joined equivalent variables [s(1612),s(1613),s(1614),s(1615),s(1616),s(1617),s(1637),s(1638),s(1639),s(1640),s(1641),s(1642),s(1718),s(1719)] into s(1612)
 * Joined equivalent variables [s(1611),s(1622),s(1623)] into s(1611)
 * Joined equivalent variables [s(1620),s(1621)] into s(1620)
 * Joined equivalent variables [s(1636),s(1647),s(1648)] into s(1636)
 * Joined equivalent variables [s(1645),s(1646)] into s(1645)
 * Joined equivalent variables [s(1716),s(1723)] into s(1716)
 * Joined equivalent variables [s(1726),s(1727)] into s(1726)
 * Joined equivalent variables [s(1724),s(1725)] into s(1724)
 * Joined equivalent variables [s(1618),s(1619)] into s(1618)
 * Joined equivalent variables [s(1643),s(1644)] into s(1643)
 * Joined equivalent variables [aux(539),aux(585)] into aux(539)
 * Joined equivalent variables [s(1629),s(1654)] into s(1629)
 * Joined equivalent variables [s(1735),s(1736)] into s(1735)
 * Joined equivalent variables [it(114),s(1716)] into it(114)
 * Joined equivalent variables [s(1628),s(1653)] into s(1628)
 * Joined equivalent variables [s(1611),s(1636)] into s(1611)
 * Joined equivalent variables [s(1618),s(1643)] into s(1618)
 * Joined equivalent variables [s(1720),s(1721)] into s(1720)
 * Joined equivalent variables [s(1620),s(1645)] into s(1620)

#### Simplifying cost structure of chain [119,[113],125] 
 * Joined equivalent variables [aux(639),s(1449)] into aux(639)

#### Simplifying cost structure of chain [119,[113],117,125] 
 * Joined equivalent variables [aux(640),s(1830)] into aux(640)
 * Joined equivalent variables [aux(641),aux(357),aux(359)] into aux(641)
 * Joined equivalent variables [aux(348),s(1455)] into aux(348)
 * Joined equivalent variables [s(1475),s(1478)] into s(1475)
 * Joined equivalent variables [s(1483),s(1484)] into s(1483)
 * Joined equivalent variables [s(1481),s(1482)] into s(1481)
 * Joined equivalent variables [s(1675),s(1676)] into s(1675)
 * Joined equivalent variables [s(1680),s(1681)] into s(1680)
 * Joined equivalent variables [s(1678),s(1679)] into s(1678)
 * Joined equivalent variables [s(1474),s(1480)] into s(1474)
 * Joined equivalent variables [s(1493),s(1494)] into s(1493)
 * Joined equivalent variables [it(113),s(1675)] into it(113)
 * Joined equivalent variables [s(1476),s(1477)] into s(1476)

#### Simplifying cost structure of chain [119,[113],115,125] 
 * Joined equivalent variables [aux(642),s(1830)] into aux(642)
 * Joined equivalent variables [aux(643),aux(378),aux(380)] into aux(643)
 * Joined equivalent variables [aux(369),s(1455)] into aux(369)
 * Joined equivalent variables [s(1703),s(1704)] into s(1703)
 * Joined equivalent variables [s(1475),s(1478),s(1718),s(1719)] into s(1475)
 * Joined equivalent variables [s(1483),s(1484)] into s(1483)
 * Joined equivalent variables [s(1481),s(1482)] into s(1481)
 * Joined equivalent variables [s(1716),s(1723)] into s(1716)
 * Joined equivalent variables [s(1726),s(1727)] into s(1726)
 * Joined equivalent variables [s(1724),s(1725)] into s(1724)
 * Joined equivalent variables [s(1474),s(1480)] into s(1474)
 * Joined equivalent variables [s(1735),s(1736)] into s(1735)
 * Joined equivalent variables [s(1493),s(1494)] into s(1493)
 * Joined equivalent variables [it(113),s(1716)] into it(113)
 * Joined equivalent variables [s(1496),s(1734)] into s(1496)
 * Joined equivalent variables [s(1476),s(1477)] into s(1476)
 * Joined equivalent variables [s(1720),s(1721)] into s(1720)
 * Joined equivalent variables [s(1473),s(1722)] into s(1473)

#### Simplifying cost structure of chain [119,125] 

#### Simplifying cost structure of chain [119,118,125] 
 * Joined equivalent variables [aux(644),s(1744),s(1830)] into aux(644)
 * Joined equivalent variables [aux(645),s(1745),s(1831)] into aux(645)

#### Simplifying cost structure of chain [119,117,125] 
 * Joined equivalent variables [aux(646),s(1665),s(1830)] into aux(646)
 * Joined equivalent variables [aux(647),s(1666),s(1831)] into aux(647)
 * Joined equivalent variables [aux(648),s(1661)] into aux(648)

#### Simplifying cost structure of chain [119,115,125] 
 * Joined equivalent variables [aux(649),s(1693),s(1830)] into aux(649)
 * Joined equivalent variables [aux(650),s(1694),s(1831)] into aux(650)
 * Joined equivalent variables [aux(651),s(1689)] into aux(651)
 * Renamed intermediate variables: 
[ (ch([122,125]),s(1789))>>s(1847), (ch([122,125]),s(1790))>>s(1848), (ch([122,125]),s(1791))>>s(1849), (ch([122,125]),s(1792))>>s(1850), (ch([122,125]),s(1793))>>s(1851), (ch([122,125]),s(1794))>>s(1852), (ch([122,125]),s(1795))>>s(1853), (ch([122,125]),s(1796))>>s(1854), (ch([122,125]),s(1797))>>s(1855), (ch([122,125]),s(1798))>>s(1856), (ch([122,125]),s(1799))>>s(1857), (ch([122,125]),s(1800))>>s(1858), (ch([122,125]),s(1801))>>s(1859)]
 * Renamed intermediate variables: 
[ (ch([123,125]),s(1776))>>s(1860), (ch([123,125]),s(1777))>>s(1861), (ch([123,125]),s(1778))>>s(1862), (ch([123,125]),s(1779))>>s(1863), (ch([123,125]),s(1780))>>s(1864), (ch([123,125]),s(1781))>>s(1865), (ch([123,125]),s(1782))>>s(1866), (ch([123,125]),s(1783))>>s(1867), (ch([123,125]),s(1784))>>s(1868), (ch([123,125]),s(1785))>>s(1869), (ch([123,125]),s(1786))>>s(1870), (ch([123,125]),s(1787))>>s(1871), (ch([123,125]),s(1788))>>s(1872)]
 * Renamed intermediate variables: 
[ (ch([124,125]),s(1768))>>s(1873), (ch([124,125]),s(1769))>>s(1874), (ch([124,125]),s(1770))>>s(1875), (ch([124,125]),s(1771))>>s(1876), (ch([124,125]),s(1772))>>s(1877), (ch([124,125]),s(1773))>>s(1878), (ch([124,125]),s(1774))>>s(1879), (ch([124,125]),s(1775))>>s(1880)]
 * Joined equivalent variables [aux(652),s(1847),s(1860),s(1873)] into aux(652)
 * Joined equivalent variables [aux(653),s(1848),s(1861),s(1874)] into aux(653)
 * Joined equivalent variables [aux(654),s(1849),s(1862),s(1875)] into aux(654)
 * Joined equivalent variables [aux(655),s(1850),s(1863),s(1876)] into aux(655)
 * Joined equivalent variables [s(1852),s(1865)] into s(1852)
 * Joined equivalent variables [s(1859),s(1872),s(1880)] into s(1859)
 * Joined equivalent variables [s(1858),s(1871),s(1879)] into s(1858)
 * Joined equivalent variables [s(1851),s(1864),s(1878)] into s(1851)
 * Joined equivalent variables [s(1857),s(1870),s(1877)] into s(1857)
 * Joined equivalent variables [s(1854),s(1867)] into s(1854)
 * Joined equivalent variables [s(1853),s(1866)] into s(1853)
 * Joined equivalent variables [s(1856),s(1869)] into s(1856)
 * Joined equivalent variables [s(1855),s(1868)] into s(1855)
 * Renamed intermediate variables: 
[ (ch([122,115,125]),s(1689))>>s(1881), (ch([122,115,125]),s(1791))>>s(1882), (ch([122,115,125]),s(1792))>>s(1883), (ch([122,115,125]),aux(602))>>s(1884), (ch([122,115,125]),aux(603))>>s(1885), (ch([122,115,125]),aux(604))>>s(1886), (ch([122,115,125]),s(1696))>>s(1887), (ch([122,115,125]),s(1697))>>s(1888), (ch([122,115,125]),s(1703))>>s(1889), (ch([122,115,125]),s(1704))>>s(1890), (ch([122,115,125]),s(1705))>>s(1891), (ch([122,115,125]),s(1706))>>s(1892), (ch([122,115,125]),s(1707))>>s(1893), (ch([122,115,125]),s(1708))>>s(1894), (ch([122,115,125]),s(1709))>>s(1895), (ch([122,115,125]),s(1710))>>s(1896), (ch([122,115,125]),s(1711))>>s(1897), (ch([122,115,125]),s(1712))>>s(1898), (ch([122,115,125]),s(1713))>>s(1899), (ch([122,115,125]),s(1714))>>s(1900), (ch([122,115,125]),s(1715))>>s(1901), (ch([122,115,125]),s(1793))>>s(1902), (ch([122,115,125]),s(1794))>>s(1903), (ch([122,115,125]),s(1795))>>s(1904), (ch([122,115,125]),s(1796))>>s(1905), (ch([122,115,125]),s(1797))>>s(1906), (ch([122,115,125]),s(1798))>>s(1907), (ch([122,115,125]),s(1799))>>s(1908), (ch([122,115,125]),s(1800))>>s(1909), (ch([122,115,125]),s(1801))>>s(1910), (ch([122,115,125]),s(1701))>>s(1911), (ch([122,115,125]),s(1702))>>s(1912)]
 * Renamed intermediate variables: 
[ (ch([122,117,125]),s(1661))>>s(1913), (ch([122,117,125]),s(1791))>>s(1914), (ch([122,117,125]),s(1792))>>s(1915), (ch([122,117,125]),aux(599))>>s(1916), (ch([122,117,125]),aux(600))>>s(1917), (ch([122,117,125]),aux(601))>>s(1918), (ch([122,117,125]),s(1668))>>s(1919), (ch([122,117,125]),s(1669))>>s(1920), (ch([122,117,125]),s(1670))>>s(1921), (ch([122,117,125]),s(1671))>>s(1922), (ch([122,117,125]),s(1672))>>s(1923), (ch([122,117,125]),s(1673))>>s(1924), (ch([122,117,125]),s(1674))>>s(1925), (ch([122,117,125]),s(1793))>>s(1926), (ch([122,117,125]),s(1794))>>s(1927), (ch([122,117,125]),s(1795))>>s(1928), (ch([122,117,125]),s(1796))>>s(1929), (ch([122,117,125]),s(1797))>>s(1930), (ch([122,117,125]),s(1798))>>s(1931), (ch([122,117,125]),s(1799))>>s(1932), (ch([122,117,125]),s(1800))>>s(1933), (ch([122,117,125]),s(1801))>>s(1934)]
 * Renamed intermediate variables: 
[ (ch([122,[113],115,125]),s(1790))>>s(1935), (ch([122,[113],115,125]),s(1791))>>s(1936), (ch([122,[113],115,125]),s(1792))>>s(1937), (ch([122,[113],115,125]),s(1449))>>s(1938), (ch([122,[113],115,125]),aux(379))>>s(1939), (ch([122,[113],115,125]),aux(366))>>s(1940), (ch([122,[113],115,125]),aux(597))>>s(1941), (ch([122,[113],115,125]),aux(598))>>s(1942), (ch([122,[113],115,125]),it([115,125]))>>s(1943), (ch([122,[113],115,125]),it(113))>>s(1944), (ch([122,[113],115,125]),aux(371))>>s(1945), (ch([122,[113],115,125]),aux(370))>>s(1946), (ch([122,[113],115,125]),aux(369))>>s(1947), (ch([122,[113],115,125]),s(1732))>>s(1948), (ch([122,[113],115,125]),s(1488))>>s(1949), (ch([122,[113],115,125]),aux(372))>>s(1950), (ch([122,[113],115,125]),s(1490))>>s(1951), (ch([122,[113],115,125]),s(1496))>>s(1952), (ch([122,[113],115,125]),s(1489))>>s(1953), (ch([122,[113],115,125]),s(1703))>>s(1954), (ch([122,[113],115,125]),s(1735))>>s(1955), (ch([122,[113],115,125]),s(1720))>>s(1956), (ch([122,[113],115,125]),s(1473))>>s(1957), (ch([122,[113],115,125]),s(1724))>>s(1958), (ch([122,[113],115,125]),s(1726))>>s(1959), (ch([122,[113],115,125]),s(1474))>>s(1960), (ch([122,[113],115,125]),s(1491))>>s(1961), (ch([122,[113],115,125]),s(1493))>>s(1962), (ch([122,[113],115,125]),s(1476))>>s(1963), (ch([122,[113],115,125]),s(1479))>>s(1964), (ch([122,[113],115,125]),s(1481))>>s(1965), (ch([122,[113],115,125]),s(1483))>>s(1966), (ch([122,[113],115,125]),s(1793))>>s(1967), (ch([122,[113],115,125]),s(1794))>>s(1968), (ch([122,[113],115,125]),s(1795))>>s(1969), (ch([122,[113],115,125]),s(1796))>>s(1970), (ch([122,[113],115,125]),s(1797))>>s(1971), (ch([122,[113],115,125]),s(1798))>>s(1972), (ch([122,[113],115,125]),s(1799))>>s(1973), (ch([122,[113],115,125]),s(1800))>>s(1974), (ch([122,[113],115,125]),s(1801))>>s(1975), (ch([122,[113],115,125]),s(1475))>>s(1976)]
 * Renamed intermediate variables: 
[ (ch([122,[113],117,125]),s(1790))>>s(1977), (ch([122,[113],117,125]),s(1791))>>s(1978), (ch([122,[113],117,125]),s(1792))>>s(1979), (ch([122,[113],117,125]),s(1449))>>s(1980), (ch([122,[113],117,125]),aux(358))>>s(1981), (ch([122,[113],117,125]),aux(345))>>s(1982), (ch([122,[113],117,125]),aux(595))>>s(1983), (ch([122,[113],117,125]),aux(596))>>s(1984), (ch([122,[113],117,125]),it([117,125]))>>s(1985), (ch([122,[113],117,125]),it(113))>>s(1986), (ch([122,[113],117,125]),aux(350))>>s(1987), (ch([122,[113],117,125]),aux(349))>>s(1988), (ch([122,[113],117,125]),aux(348))>>s(1989), (ch([122,[113],117,125]),s(1686))>>s(1990), (ch([122,[113],117,125]),s(1488))>>s(1991), (ch([122,[113],117,125]),aux(351))>>s(1992), (ch([122,[113],117,125]),s(1490))>>s(1993), (ch([122,[113],117,125]),s(1496))>>s(1994), (ch([122,[113],117,125]),s(1489))>>s(1995), (ch([122,[113],117,125]),s(1678))>>s(1996), (ch([122,[113],117,125]),s(1680))>>s(1997), (ch([122,[113],117,125]),s(1473))>>s(1998), (ch([122,[113],117,125]),s(1474))>>s(1999), (ch([122,[113],117,125]),s(1491))>>s(2000), (ch([122,[113],117,125]),s(1493))>>s(2001), (ch([122,[113],117,125]),s(1476))>>s(2002), (ch([122,[113],117,125]),s(1479))>>s(2003), (ch([122,[113],117,125]),s(1481))>>s(2004), (ch([122,[113],117,125]),s(1483))>>s(2005), (ch([122,[113],117,125]),s(1793))>>s(2006), (ch([122,[113],117,125]),s(1794))>>s(2007), (ch([122,[113],117,125]),s(1795))>>s(2008), (ch([122,[113],117,125]),s(1796))>>s(2009), (ch([122,[113],117,125]),s(1797))>>s(2010), (ch([122,[113],117,125]),s(1798))>>s(2011), (ch([122,[113],117,125]),s(1799))>>s(2012), (ch([122,[113],117,125]),s(1800))>>s(2013), (ch([122,[113],117,125]),s(1801))>>s(2014), (ch([122,[113],117,125]),s(1475))>>s(2015)]
 * Renamed intermediate variables: 
[ (ch([122,[113],125]),s(1789))>>s(2016), (ch([122,[113],125]),s(1790))>>s(2017), (ch([122,[113],125]),s(1791))>>s(2018), (ch([122,[113],125]),s(1792))>>s(2019), (ch([122,[113],125]),aux(265))>>s(2020), (ch([122,[113],125]),aux(594))>>s(2021), (ch([122,[113],125]),it(113))>>s(2022), (ch([122,[113],125]),aux(270))>>s(2023), (ch([122,[113],125]),aux(269))>>s(2024), (ch([122,[113],125]),aux(268))>>s(2025), (ch([122,[113],125]),s(1488))>>s(2026), (ch([122,[113],125]),aux(271))>>s(2027), (ch([122,[113],125]),s(1490))>>s(2028), (ch([122,[113],125]),s(1496))>>s(2029), (ch([122,[113],125]),s(1489))>>s(2030), (ch([122,[113],125]),s(1473))>>s(2031), (ch([122,[113],125]),s(1474))>>s(2032), (ch([122,[113],125]),s(1491))>>s(2033), (ch([122,[113],125]),s(1493))>>s(2034), (ch([122,[113],125]),s(1476))>>s(2035), (ch([122,[113],125]),s(1479))>>s(2036), (ch([122,[113],125]),s(1481))>>s(2037), (ch([122,[113],125]),s(1483))>>s(2038), (ch([122,[113],125]),s(1793))>>s(2039), (ch([122,[113],125]),s(1794))>>s(2040), (ch([122,[113],125]),s(1795))>>s(2041), (ch([122,[113],125]),s(1796))>>s(2042), (ch([122,[113],125]),s(1797))>>s(2043), (ch([122,[113],125]),s(1798))>>s(2044), (ch([122,[113],125]),s(1799))>>s(2045), (ch([122,[113],125]),s(1800))>>s(2046), (ch([122,[113],125]),s(1801))>>s(2047), (ch([122,[113],125]),s(1475))>>s(2048)]
 * Joined equivalent variables [aux(656),s(1884),s(1916),s(1941),s(1983),s(2016)] into aux(656)
 * Joined equivalent variables [aux(657),s(1885),s(1917),s(1935),s(1977),s(2017)] into aux(657)
 * Joined equivalent variables [aux(658),s(1886),s(1918)] into aux(658)
 * Joined equivalent variables [aux(659),s(1881),s(1913)] into aux(659)
 * Joined equivalent variables [aux(660),s(1882),s(1914),s(1936),s(1978),s(2018)] into aux(660)
 * Joined equivalent variables [aux(661),s(1883),s(1915),s(1937),s(1979),s(2019)] into aux(661)
 * Joined equivalent variables [aux(662),s(1942),s(1984),s(2021)] into aux(662)
 * Joined equivalent variables [aux(664),s(1939),s(1981),s(2020)] into aux(664)
 * Joined equivalent variables [s(1889),s(1890)] into s(1889)
 * Joined equivalent variables [s(1911),s(1912),s(1976),s(2015),s(2048)] into s(1911)
 * Joined equivalent variables [s(1898),s(1899)] into s(1898)
 * Joined equivalent variables [s(1900),s(1901)] into s(1900)
 * Joined equivalent variables [s(1888),s(1897)] into s(1888)
 * Joined equivalent variables [s(1922),s(1923)] into s(1922)
 * Joined equivalent variables [s(1924),s(1925)] into s(1924)
 * Joined equivalent variables [s(1920),s(1921)] into s(1920)
 * Joined equivalent variables [s(1892),s(1893)] into s(1892)
 * Joined equivalent variables [s(1903),s(1927),s(1968),s(2007),s(2040)] into s(1903)
 * Joined equivalent variables [s(1948),s(1990)] into s(1948)
 * Joined equivalent variables [s(1887),s(1919)] into s(1887)
 * Joined equivalent variables [s(1910),s(1934),s(1975),s(2014),s(2047)] into s(1910)
 * Joined equivalent variables [s(1909),s(1933),s(1974),s(2013),s(2046)] into s(1909)
 * Joined equivalent variables [s(1943),s(1985)] into s(1943)
 * Joined equivalent variables [s(1902),s(1926),s(1967),s(2006),s(2039)] into s(1902)
 * Joined equivalent variables [s(1900),s(1924)] into s(1900)
 * Joined equivalent variables [s(1898),s(1922)] into s(1898)
 * Joined equivalent variables [s(1908),s(1932),s(1973),s(2012),s(2045)] into s(1908)
 * Joined equivalent variables [s(1888),s(1920)] into s(1888)
 * Joined equivalent variables [s(1944),s(1986),s(2022)] into s(1944)
 * Joined equivalent variables [s(1959),s(1997)] into s(1959)
 * Joined equivalent variables [s(1938),s(1980)] into s(1938)
 * Joined equivalent variables [s(1940),s(1982)] into s(1940)
 * Joined equivalent variables [s(1945),s(1987)] into s(1945)
 * Joined equivalent variables [s(1946),s(1988)] into s(1946)
 * Joined equivalent variables [s(1947),s(1989)] into s(1947)
 * Joined equivalent variables [s(1949),s(1991)] into s(1949)
 * Joined equivalent variables [s(1905),s(1929),s(1970),s(2009),s(2042)] into s(1905)
 * Joined equivalent variables [s(1904),s(1928),s(1969),s(2008),s(2041)] into s(1904)
 * Joined equivalent variables [s(1958),s(1996)] into s(1958)
 * Joined equivalent variables [s(1894),s(1895)] into s(1894)
 * Joined equivalent variables [s(1950),s(1992)] into s(1950)
 * Joined equivalent variables [s(1951),s(1993)] into s(1951)
 * Joined equivalent variables [s(1952),s(1994)] into s(1952)
 * Joined equivalent variables [s(1907),s(1931),s(1972),s(2011),s(2044)] into s(1907)
 * Joined equivalent variables [s(1906),s(1930),s(1971),s(2010),s(2043)] into s(1906)
 * Joined equivalent variables [s(1953),s(1995)] into s(1953)
 * Joined equivalent variables [s(1966),s(2005)] into s(1966)
 * Joined equivalent variables [s(1960),s(1999)] into s(1960)
 * Joined equivalent variables [s(1957),s(1998)] into s(1957)
 * Joined equivalent variables [s(1961),s(2000)] into s(1961)
 * Joined equivalent variables [s(1962),s(2001)] into s(1962)
 * Joined equivalent variables [s(1965),s(2004)] into s(1965)
 * Joined equivalent variables [s(1964),s(2003)] into s(1964)
 * Joined equivalent variables [s(1963),s(2002)] into s(1963)
 * Renamed intermediate variables: 
[ (ch([119,125]),s(1830))>>s(2049), (ch([119,125]),s(1831))>>s(2050), (ch([119,125]),s(1832))>>s(2051), (ch([119,125]),s(1833))>>s(2052), (ch([119,125]),s(1834))>>s(2053), (ch([119,125]),s(1835))>>s(2054), (ch([119,125]),s(1836))>>s(2055), (ch([119,125]),s(1837))>>s(2056), (ch([119,125]),s(1838))>>s(2057), (ch([119,125]),s(1839))>>s(2058), (ch([119,125]),s(1840))>>s(2059), (ch([119,125]),s(1841))>>s(2060), (ch([119,125]),s(1842))>>s(2061), (ch([119,125]),s(1843))>>s(2062), (ch([119,125]),s(1844))>>s(2063), (ch([119,125]),s(1845))>>s(2064), (ch([119,125]),s(1846))>>s(2065)]
 * Renamed intermediate variables: 
[ (ch([120,125]),s(1813))>>s(2066), (ch([120,125]),s(1814))>>s(2067), (ch([120,125]),s(1815))>>s(2068), (ch([120,125]),s(1816))>>s(2069), (ch([120,125]),s(1817))>>s(2070), (ch([120,125]),s(1818))>>s(2071), (ch([120,125]),s(1819))>>s(2072), (ch([120,125]),s(1820))>>s(2073), (ch([120,125]),s(1821))>>s(2074), (ch([120,125]),s(1822))>>s(2075), (ch([120,125]),s(1823))>>s(2076), (ch([120,125]),s(1824))>>s(2077), (ch([120,125]),s(1825))>>s(2078), (ch([120,125]),s(1826))>>s(2079), (ch([120,125]),s(1827))>>s(2080), (ch([120,125]),s(1828))>>s(2081), (ch([120,125]),s(1829))>>s(2082)]
 * Renamed intermediate variables: 
[ (ch([121,125]),s(1802))>>s(2083), (ch([121,125]),s(1803))>>s(2084), (ch([121,125]),s(1804))>>s(2085), (ch([121,125]),s(1805))>>s(2086), (ch([121,125]),s(1806))>>s(2087), (ch([121,125]),s(1807))>>s(2088), (ch([121,125]),s(1808))>>s(2089), (ch([121,125]),s(1809))>>s(2090), (ch([121,125]),s(1810))>>s(2091), (ch([121,125]),s(1811))>>s(2092), (ch([121,125]),s(1812))>>s(2093)]
 * Joined equivalent variables [aux(666),s(2049),s(2066),s(2083)] into aux(666)
 * Joined equivalent variables [aux(667),s(2050),s(2067),s(2084)] into aux(667)
 * Joined equivalent variables [aux(668),s(2051),s(2068),s(2085)] into aux(668)
 * Joined equivalent variables [aux(669),s(2052),s(2069),s(2086)] into aux(669)
 * Joined equivalent variables [aux(670),s(2053),s(2070),s(2087)] into aux(670)
 * Joined equivalent variables [s(2055),s(2072)] into s(2055)
 * Joined equivalent variables [s(2063),s(2080),s(2091)] into s(2063)
 * Joined equivalent variables [s(2062),s(2079),s(2090)] into s(2062)
 * Joined equivalent variables [s(2065),s(2082),s(2093)] into s(2065)
 * Joined equivalent variables [s(2064),s(2081),s(2092)] into s(2064)
 * Joined equivalent variables [s(2061),s(2078),s(2089)] into s(2061)
 * Joined equivalent variables [s(2060),s(2077),s(2088)] into s(2060)
 * Joined equivalent variables [s(2054),s(2071)] into s(2054)
 * Joined equivalent variables [s(2057),s(2074)] into s(2057)
 * Joined equivalent variables [s(2056),s(2073)] into s(2056)
 * Joined equivalent variables [s(2059),s(2076)] into s(2059)
 * Joined equivalent variables [s(2058),s(2075)] into s(2058)
 * Renamed intermediate variables: 
[ (ch([119,115,125]),s(1695))>>s(2094), (ch([119,115,125]),s(1832))>>s(2095), (ch([119,115,125]),s(1690))>>s(2096), (ch([119,115,125]),s(1833))>>s(2097), (ch([119,115,125]),s(1834))>>s(2098), (ch([119,115,125]),aux(649))>>s(2099), (ch([119,115,125]),aux(650))>>s(2100), (ch([119,115,125]),aux(651))>>s(2101), (ch([119,115,125]),s(1696))>>s(2102), (ch([119,115,125]),s(1697))>>s(2103), (ch([119,115,125]),s(1703))>>s(2104), (ch([119,115,125]),s(1704))>>s(2105), (ch([119,115,125]),s(1705))>>s(2106), (ch([119,115,125]),s(1706))>>s(2107), (ch([119,115,125]),s(1707))>>s(2108), (ch([119,115,125]),s(1708))>>s(2109), (ch([119,115,125]),s(1709))>>s(2110), (ch([119,115,125]),s(1710))>>s(2111), (ch([119,115,125]),s(1711))>>s(2112), (ch([119,115,125]),s(1712))>>s(2113), (ch([119,115,125]),s(1713))>>s(2114), (ch([119,115,125]),s(1714))>>s(2115), (ch([119,115,125]),s(1715))>>s(2116), (ch([119,115,125]),s(1835))>>s(2117), (ch([119,115,125]),s(1836))>>s(2118), (ch([119,115,125]),s(1837))>>s(2119), (ch([119,115,125]),s(1838))>>s(2120), (ch([119,115,125]),s(1839))>>s(2121), (ch([119,115,125]),s(1840))>>s(2122), (ch([119,115,125]),s(1841))>>s(2123), (ch([119,115,125]),s(1842))>>s(2124), (ch([119,115,125]),s(1843))>>s(2125), (ch([119,115,125]),s(1844))>>s(2126), (ch([119,115,125]),s(1845))>>s(2127), (ch([119,115,125]),s(1846))>>s(2128), (ch([119,115,125]),s(1701))>>s(2129), (ch([119,115,125]),s(1702))>>s(2130)]
 * Renamed intermediate variables: 
[ (ch([119,117,125]),s(1667))>>s(2131), (ch([119,117,125]),s(1832))>>s(2132), (ch([119,117,125]),s(1662))>>s(2133), (ch([119,117,125]),s(1833))>>s(2134), (ch([119,117,125]),s(1834))>>s(2135), (ch([119,117,125]),aux(646))>>s(2136), (ch([119,117,125]),aux(647))>>s(2137), (ch([119,117,125]),aux(648))>>s(2138), (ch([119,117,125]),s(1668))>>s(2139), (ch([119,117,125]),s(1669))>>s(2140), (ch([119,117,125]),s(1670))>>s(2141), (ch([119,117,125]),s(1671))>>s(2142), (ch([119,117,125]),s(1672))>>s(2143), (ch([119,117,125]),s(1673))>>s(2144), (ch([119,117,125]),s(1674))>>s(2145), (ch([119,117,125]),s(1835))>>s(2146), (ch([119,117,125]),s(1836))>>s(2147), (ch([119,117,125]),s(1837))>>s(2148), (ch([119,117,125]),s(1838))>>s(2149), (ch([119,117,125]),s(1839))>>s(2150), (ch([119,117,125]),s(1840))>>s(2151), (ch([119,117,125]),s(1841))>>s(2152), (ch([119,117,125]),s(1842))>>s(2153), (ch([119,117,125]),s(1843))>>s(2154), (ch([119,117,125]),s(1844))>>s(2155), (ch([119,117,125]),s(1845))>>s(2156), (ch([119,117,125]),s(1846))>>s(2157)]
 * Renamed intermediate variables: 
[ (ch([119,118,125]),s(1746))>>s(2158), (ch([119,118,125]),s(1740))>>s(2159), (ch([119,118,125]),s(1832))>>s(2160), (ch([119,118,125]),s(1741))>>s(2161), (ch([119,118,125]),s(1833))>>s(2162), (ch([119,118,125]),s(1834))>>s(2163), (ch([119,118,125]),aux(644))>>s(2164), (ch([119,118,125]),aux(645))>>s(2165), (ch([119,118,125]),s(1747))>>s(2166), (ch([119,118,125]),s(1748))>>s(2167), (ch([119,118,125]),s(1749))>>s(2168), (ch([119,118,125]),s(1750))>>s(2169), (ch([119,118,125]),s(1751))>>s(2170), (ch([119,118,125]),s(1752))>>s(2171), (ch([119,118,125]),s(1753))>>s(2172), (ch([119,118,125]),s(1835))>>s(2173), (ch([119,118,125]),s(1836))>>s(2174), (ch([119,118,125]),s(1837))>>s(2175), (ch([119,118,125]),s(1838))>>s(2176), (ch([119,118,125]),s(1839))>>s(2177), (ch([119,118,125]),s(1840))>>s(2178), (ch([119,118,125]),s(1841))>>s(2179), (ch([119,118,125]),s(1842))>>s(2180), (ch([119,118,125]),s(1843))>>s(2181), (ch([119,118,125]),s(1844))>>s(2182), (ch([119,118,125]),s(1845))>>s(2183), (ch([119,118,125]),s(1846))>>s(2184)]
 * Renamed intermediate variables: 
[ (ch([119,[113],115,125]),s(1831))>>s(2185), (ch([119,[113],115,125]),s(1832))>>s(2186), (ch([119,[113],115,125]),s(1449))>>s(2187), (ch([119,[113],115,125]),aux(366))>>s(2188), (ch([119,[113],115,125]),s(1833))>>s(2189), (ch([119,[113],115,125]),s(1834))>>s(2190), (ch([119,[113],115,125]),aux(379))>>s(2191), (ch([119,[113],115,125]),aux(642))>>s(2192), (ch([119,[113],115,125]),aux(643))>>s(2193), (ch([119,[113],115,125]),it([115,125]))>>s(2194), (ch([119,[113],115,125]),it(113))>>s(2195), (ch([119,[113],115,125]),aux(371))>>s(2196), (ch([119,[113],115,125]),aux(370))>>s(2197), (ch([119,[113],115,125]),aux(369))>>s(2198), (ch([119,[113],115,125]),s(1732))>>s(2199), (ch([119,[113],115,125]),s(1488))>>s(2200), (ch([119,[113],115,125]),aux(372))>>s(2201), (ch([119,[113],115,125]),s(1490))>>s(2202), (ch([119,[113],115,125]),s(1496))>>s(2203), (ch([119,[113],115,125]),s(1489))>>s(2204), (ch([119,[113],115,125]),s(1703))>>s(2205), (ch([119,[113],115,125]),s(1735))>>s(2206), (ch([119,[113],115,125]),s(1720))>>s(2207), (ch([119,[113],115,125]),s(1473))>>s(2208), (ch([119,[113],115,125]),s(1724))>>s(2209), (ch([119,[113],115,125]),s(1726))>>s(2210), (ch([119,[113],115,125]),s(1474))>>s(2211), (ch([119,[113],115,125]),s(1491))>>s(2212), (ch([119,[113],115,125]),s(1493))>>s(2213), (ch([119,[113],115,125]),s(1476))>>s(2214), (ch([119,[113],115,125]),s(1479))>>s(2215), (ch([119,[113],115,125]),s(1481))>>s(2216), (ch([119,[113],115,125]),s(1483))>>s(2217), (ch([119,[113],115,125]),s(1835))>>s(2218), (ch([119,[113],115,125]),s(1836))>>s(2219), (ch([119,[113],115,125]),s(1837))>>s(2220), (ch([119,[113],115,125]),s(1838))>>s(2221), (ch([119,[113],115,125]),s(1839))>>s(2222), (ch([119,[113],115,125]),s(1840))>>s(2223), (ch([119,[113],115,125]),s(1841))>>s(2224), (ch([119,[113],115,125]),s(1842))>>s(2225), (ch([119,[113],115,125]),s(1843))>>s(2226), (ch([119,[113],115,125]),s(1844))>>s(2227), (ch([119,[113],115,125]),s(1845))>>s(2228), (ch([119,[113],115,125]),s(1846))>>s(2229), (ch([119,[113],115,125]),s(1475))>>s(2230)]
 * Renamed intermediate variables: 
[ (ch([119,[113],117,125]),s(1831))>>s(2231), (ch([119,[113],117,125]),s(1832))>>s(2232), (ch([119,[113],117,125]),s(1449))>>s(2233), (ch([119,[113],117,125]),aux(345))>>s(2234), (ch([119,[113],117,125]),s(1833))>>s(2235), (ch([119,[113],117,125]),s(1834))>>s(2236), (ch([119,[113],117,125]),aux(358))>>s(2237), (ch([119,[113],117,125]),aux(640))>>s(2238), (ch([119,[113],117,125]),aux(641))>>s(2239), (ch([119,[113],117,125]),it([117,125]))>>s(2240), (ch([119,[113],117,125]),it(113))>>s(2241), (ch([119,[113],117,125]),aux(350))>>s(2242), (ch([119,[113],117,125]),aux(349))>>s(2243), (ch([119,[113],117,125]),aux(348))>>s(2244), (ch([119,[113],117,125]),s(1686))>>s(2245), (ch([119,[113],117,125]),s(1488))>>s(2246), (ch([119,[113],117,125]),aux(351))>>s(2247), (ch([119,[113],117,125]),s(1490))>>s(2248), (ch([119,[113],117,125]),s(1496))>>s(2249), (ch([119,[113],117,125]),s(1489))>>s(2250), (ch([119,[113],117,125]),s(1678))>>s(2251), (ch([119,[113],117,125]),s(1680))>>s(2252), (ch([119,[113],117,125]),s(1473))>>s(2253), (ch([119,[113],117,125]),s(1474))>>s(2254), (ch([119,[113],117,125]),s(1491))>>s(2255), (ch([119,[113],117,125]),s(1493))>>s(2256), (ch([119,[113],117,125]),s(1476))>>s(2257), (ch([119,[113],117,125]),s(1479))>>s(2258), (ch([119,[113],117,125]),s(1481))>>s(2259), (ch([119,[113],117,125]),s(1483))>>s(2260), (ch([119,[113],117,125]),s(1835))>>s(2261), (ch([119,[113],117,125]),s(1836))>>s(2262), (ch([119,[113],117,125]),s(1837))>>s(2263), (ch([119,[113],117,125]),s(1838))>>s(2264), (ch([119,[113],117,125]),s(1839))>>s(2265), (ch([119,[113],117,125]),s(1840))>>s(2266), (ch([119,[113],117,125]),s(1841))>>s(2267), (ch([119,[113],117,125]),s(1842))>>s(2268), (ch([119,[113],117,125]),s(1843))>>s(2269), (ch([119,[113],117,125]),s(1844))>>s(2270), (ch([119,[113],117,125]),s(1845))>>s(2271), (ch([119,[113],117,125]),s(1846))>>s(2272), (ch([119,[113],117,125]),s(1475))>>s(2273)]
 * Renamed intermediate variables: 
[ (ch([119,[113],125]),s(1830))>>s(2274), (ch([119,[113],125]),s(1831))>>s(2275), (ch([119,[113],125]),s(1832))>>s(2276), (ch([119,[113],125]),s(1833))>>s(2277), (ch([119,[113],125]),s(1834))>>s(2278), (ch([119,[113],125]),aux(265))>>s(2279), (ch([119,[113],125]),aux(639))>>s(2280), (ch([119,[113],125]),it(113))>>s(2281), (ch([119,[113],125]),aux(270))>>s(2282), (ch([119,[113],125]),aux(269))>>s(2283), (ch([119,[113],125]),aux(268))>>s(2284), (ch([119,[113],125]),s(1488))>>s(2285), (ch([119,[113],125]),aux(271))>>s(2286), (ch([119,[113],125]),s(1490))>>s(2287), (ch([119,[113],125]),s(1496))>>s(2288), (ch([119,[113],125]),s(1489))>>s(2289), (ch([119,[113],125]),s(1473))>>s(2290), (ch([119,[113],125]),s(1474))>>s(2291), (ch([119,[113],125]),s(1491))>>s(2292), (ch([119,[113],125]),s(1493))>>s(2293), (ch([119,[113],125]),s(1476))>>s(2294), (ch([119,[113],125]),s(1479))>>s(2295), (ch([119,[113],125]),s(1481))>>s(2296), (ch([119,[113],125]),s(1483))>>s(2297), (ch([119,[113],125]),s(1835))>>s(2298), (ch([119,[113],125]),s(1836))>>s(2299), (ch([119,[113],125]),s(1837))>>s(2300), (ch([119,[113],125]),s(1838))>>s(2301), (ch([119,[113],125]),s(1839))>>s(2302), (ch([119,[113],125]),s(1840))>>s(2303), (ch([119,[113],125]),s(1841))>>s(2304), (ch([119,[113],125]),s(1842))>>s(2305), (ch([119,[113],125]),s(1843))>>s(2306), (ch([119,[113],125]),s(1844))>>s(2307), (ch([119,[113],125]),s(1845))>>s(2308), (ch([119,[113],125]),s(1846))>>s(2309), (ch([119,[113],125]),s(1475))>>s(2310)]
 * Renamed intermediate variables: 
[ (ch([119,[114,116],115,125]),s(1830))>>s(2311), (ch([119,[114,116],115,125]),s(1831))>>s(2312), (ch([119,[114,116],115,125]),s(1832))>>s(2313), (ch([119,[114,116],115,125]),s(1833))>>s(2314), (ch([119,[114,116],115,125]),s(1834))>>s(2315), (ch([119,[114,116],115,125]),s(1731))>>s(2316), (ch([119,[114,116],115,125]),aux(638))>>s(2317), (ch([119,[114,116],115,125]),it(114))>>s(2318), (ch([119,[114,116],115,125]),aux(538))>>s(2319), (ch([119,[114,116],115,125]),aux(537))>>s(2320), (ch([119,[114,116],115,125]),s(1732))>>s(2321), (ch([119,[114,116],115,125]),aux(539))>>s(2322), (ch([119,[114,116],115,125]),s(1629))>>s(2323), (ch([119,[114,116],115,125]),s(1628))>>s(2324), (ch([119,[114,116],115,125]),s(1703))>>s(2325), (ch([119,[114,116],115,125]),s(1734))>>s(2326), (ch([119,[114,116],115,125]),s(1735))>>s(2327), (ch([119,[114,116],115,125]),s(1720))>>s(2328), (ch([119,[114,116],115,125]),s(1722))>>s(2329), (ch([119,[114,116],115,125]),s(1724))>>s(2330), (ch([119,[114,116],115,125]),s(1726))>>s(2331), (ch([119,[114,116],115,125]),s(1611))>>s(2332), (ch([119,[114,116],115,125]),s(1618))>>s(2333), (ch([119,[114,116],115,125]),s(1620))>>s(2334), (ch([119,[114,116],115,125]),s(1835))>>s(2335), (ch([119,[114,116],115,125]),s(1836))>>s(2336), (ch([119,[114,116],115,125]),s(1837))>>s(2337), (ch([119,[114,116],115,125]),s(1838))>>s(2338), (ch([119,[114,116],115,125]),s(1839))>>s(2339), (ch([119,[114,116],115,125]),s(1840))>>s(2340), (ch([119,[114,116],115,125]),s(1841))>>s(2341), (ch([119,[114,116],115,125]),s(1842))>>s(2342), (ch([119,[114,116],115,125]),s(1843))>>s(2343), (ch([119,[114,116],115,125]),s(1844))>>s(2344), (ch([119,[114,116],115,125]),s(1845))>>s(2345), (ch([119,[114,116],115,125]),s(1846))>>s(2346), (ch([119,[114,116],115,125]),s(1612))>>s(2347)]
 * Renamed intermediate variables: 
[ (ch([119,[114,116],117,125]),s(1830))>>s(2348), (ch([119,[114,116],117,125]),s(1831))>>s(2349), (ch([119,[114,116],117,125]),s(1832))>>s(2350), (ch([119,[114,116],117,125]),s(1833))>>s(2351), (ch([119,[114,116],117,125]),s(1834))>>s(2352), (ch([119,[114,116],117,125]),s(1685))>>s(2353), (ch([119,[114,116],117,125]),aux(637))>>s(2354), (ch([119,[114,116],117,125]),it(114))>>s(2355), (ch([119,[114,116],117,125]),aux(470))>>s(2356), (ch([119,[114,116],117,125]),aux(469))>>s(2357), (ch([119,[114,116],117,125]),s(1686))>>s(2358), (ch([119,[114,116],117,125]),aux(471))>>s(2359), (ch([119,[114,116],117,125]),s(1629))>>s(2360), (ch([119,[114,116],117,125]),s(1628))>>s(2361), (ch([119,[114,116],117,125]),s(1678))>>s(2362), (ch([119,[114,116],117,125]),s(1680))>>s(2363), (ch([119,[114,116],117,125]),s(1611))>>s(2364), (ch([119,[114,116],117,125]),s(1618))>>s(2365), (ch([119,[114,116],117,125]),s(1620))>>s(2366), (ch([119,[114,116],117,125]),s(1835))>>s(2367), (ch([119,[114,116],117,125]),s(1836))>>s(2368), (ch([119,[114,116],117,125]),s(1837))>>s(2369), (ch([119,[114,116],117,125]),s(1838))>>s(2370), (ch([119,[114,116],117,125]),s(1839))>>s(2371), (ch([119,[114,116],117,125]),s(1840))>>s(2372), (ch([119,[114,116],117,125]),s(1841))>>s(2373), (ch([119,[114,116],117,125]),s(1842))>>s(2374), (ch([119,[114,116],117,125]),s(1843))>>s(2375), (ch([119,[114,116],117,125]),s(1844))>>s(2376), (ch([119,[114,116],117,125]),s(1845))>>s(2377), (ch([119,[114,116],117,125]),s(1846))>>s(2378), (ch([119,[114,116],117,125]),s(1612))>>s(2379)]
 * Renamed intermediate variables: 
[ (ch([119,[114,116],118,125]),s(1830))>>s(2380), (ch([119,[114,116],118,125]),s(1831))>>s(2381), (ch([119,[114,116],118,125]),s(1832))>>s(2382), (ch([119,[114,116],118,125]),s(1833))>>s(2383), (ch([119,[114,116],118,125]),s(1834))>>s(2384), (ch([119,[114,116],118,125]),aux(636))>>s(2385), (ch([119,[114,116],118,125]),it(114))>>s(2386), (ch([119,[114,116],118,125]),aux(398))>>s(2387), (ch([119,[114,116],118,125]),aux(397))>>s(2388), (ch([119,[114,116],118,125]),s(1765))>>s(2389), (ch([119,[114,116],118,125]),aux(399))>>s(2390), (ch([119,[114,116],118,125]),s(1629))>>s(2391), (ch([119,[114,116],118,125]),s(1628))>>s(2392), (ch([119,[114,116],118,125]),s(1757))>>s(2393), (ch([119,[114,116],118,125]),s(1611))>>s(2394), (ch([119,[114,116],118,125]),s(1618))>>s(2395), (ch([119,[114,116],118,125]),s(1620))>>s(2396), (ch([119,[114,116],118,125]),s(1835))>>s(2397), (ch([119,[114,116],118,125]),s(1836))>>s(2398), (ch([119,[114,116],118,125]),s(1837))>>s(2399), (ch([119,[114,116],118,125]),s(1838))>>s(2400), (ch([119,[114,116],118,125]),s(1839))>>s(2401), (ch([119,[114,116],118,125]),s(1840))>>s(2402), (ch([119,[114,116],118,125]),s(1841))>>s(2403), (ch([119,[114,116],118,125]),s(1842))>>s(2404), (ch([119,[114,116],118,125]),s(1843))>>s(2405), (ch([119,[114,116],118,125]),s(1844))>>s(2406), (ch([119,[114,116],118,125]),s(1845))>>s(2407), (ch([119,[114,116],118,125]),s(1846))>>s(2408), (ch([119,[114,116],118,125]),s(1612))>>s(2409)]
 * Renamed intermediate variables: 
[ (ch([119,[114,116],125]),s(1830))>>s(2410), (ch([119,[114,116],125]),s(1831))>>s(2411), (ch([119,[114,116],125]),s(1832))>>s(2412), (ch([119,[114,116],125]),s(1833))>>s(2413), (ch([119,[114,116],125]),s(1834))>>s(2414), (ch([119,[114,116],125]),aux(635))>>s(2415), (ch([119,[114,116],125]),it(114))>>s(2416), (ch([119,[114,116],125]),aux(288))>>s(2417), (ch([119,[114,116],125]),aux(287))>>s(2418), (ch([119,[114,116],125]),aux(289))>>s(2419), (ch([119,[114,116],125]),s(1629))>>s(2420), (ch([119,[114,116],125]),s(1628))>>s(2421), (ch([119,[114,116],125]),s(1611))>>s(2422), (ch([119,[114,116],125]),s(1618))>>s(2423), (ch([119,[114,116],125]),s(1620))>>s(2424), (ch([119,[114,116],125]),s(1835))>>s(2425), (ch([119,[114,116],125]),s(1836))>>s(2426), (ch([119,[114,116],125]),s(1837))>>s(2427), (ch([119,[114,116],125]),s(1838))>>s(2428), (ch([119,[114,116],125]),s(1839))>>s(2429), (ch([119,[114,116],125]),s(1840))>>s(2430), (ch([119,[114,116],125]),s(1841))>>s(2431), (ch([119,[114,116],125]),s(1842))>>s(2432), (ch([119,[114,116],125]),s(1843))>>s(2433), (ch([119,[114,116],125]),s(1844))>>s(2434), (ch([119,[114,116],125]),s(1845))>>s(2435), (ch([119,[114,116],125]),s(1846))>>s(2436), (ch([119,[114,116],125]),s(1612))>>s(2437)]
 * Renamed intermediate variables: 
[ (ch([119,[114,116],[113],115,125]),s(1831))>>s(2438), (ch([119,[114,116],[113],115,125]),s(1832))>>s(2439), (ch([119,[114,116],[113],115,125]),s(1833))>>s(2440), (ch([119,[114,116],[113],115,125]),s(1834))>>s(2441), (ch([119,[114,116],[113],115,125]),aux(382))>>s(2442), (ch([119,[114,116],[113],115,125]),s(1449))>>s(2443), (ch([119,[114,116],[113],115,125]),aux(366))>>s(2444), (ch([119,[114,116],[113],115,125]),aux(383))>>s(2445), (ch([119,[114,116],[113],115,125]),aux(633))>>s(2446), (ch([119,[114,116],[113],115,125]),aux(634))>>s(2447), (ch([119,[114,116],[113],115,125]),it([115,125]))>>s(2448), (ch([119,[114,116],[113],115,125]),aux(380))>>s(2449), (ch([119,[114,116],[113],115,125]),it(113))>>s(2450), (ch([119,[114,116],[113],115,125]),aux(371))>>s(2451), (ch([119,[114,116],[113],115,125]),aux(370))>>s(2452), (ch([119,[114,116],[113],115,125]),aux(369))>>s(2453), (ch([119,[114,116],[113],115,125]),s(1732))>>s(2454), (ch([119,[114,116],[113],115,125]),s(1488))>>s(2455), (ch([119,[114,116],[113],115,125]),aux(372))>>s(2456), (ch([119,[114,116],[113],115,125]),s(1490))>>s(2457), (ch([119,[114,116],[113],115,125]),s(1496))>>s(2458), (ch([119,[114,116],[113],115,125]),s(1489))>>s(2459), (ch([119,[114,116],[113],115,125]),it(114))>>s(2460), (ch([119,[114,116],[113],115,125]),s(1703))>>s(2461), (ch([119,[114,116],[113],115,125]),s(1734))>>s(2462), (ch([119,[114,116],[113],115,125]),s(1735))>>s(2463), (ch([119,[114,116],[113],115,125]),s(1720))>>s(2464), (ch([119,[114,116],[113],115,125]),s(1722))>>s(2465), (ch([119,[114,116],[113],115,125]),s(1724))>>s(2466), (ch([119,[114,116],[113],115,125]),s(1726))>>s(2467), (ch([119,[114,116],[113],115,125]),s(1473))>>s(2468), (ch([119,[114,116],[113],115,125]),s(1474))>>s(2469), (ch([119,[114,116],[113],115,125]),s(1491))>>s(2470), (ch([119,[114,116],[113],115,125]),s(1493))>>s(2471), (ch([119,[114,116],[113],115,125]),s(1476))>>s(2472), (ch([119,[114,116],[113],115,125]),s(1479))>>s(2473), (ch([119,[114,116],[113],115,125]),s(1481))>>s(2474), (ch([119,[114,116],[113],115,125]),s(1483))>>s(2475), (ch([119,[114,116],[113],115,125]),aux(288))>>s(2476), (ch([119,[114,116],[113],115,125]),aux(287))>>s(2477), (ch([119,[114,116],[113],115,125]),aux(289))>>s(2478), (ch([119,[114,116],[113],115,125]),s(1629))>>s(2479), (ch([119,[114,116],[113],115,125]),s(1628))>>s(2480), (ch([119,[114,116],[113],115,125]),s(1611))>>s(2481), (ch([119,[114,116],[113],115,125]),s(1618))>>s(2482), (ch([119,[114,116],[113],115,125]),s(1620))>>s(2483), (ch([119,[114,116],[113],115,125]),s(1835))>>s(2484), (ch([119,[114,116],[113],115,125]),s(1836))>>s(2485), (ch([119,[114,116],[113],115,125]),s(1837))>>s(2486), (ch([119,[114,116],[113],115,125]),s(1838))>>s(2487), (ch([119,[114,116],[113],115,125]),s(1839))>>s(2488), (ch([119,[114,116],[113],115,125]),s(1840))>>s(2489), (ch([119,[114,116],[113],115,125]),s(1841))>>s(2490), (ch([119,[114,116],[113],115,125]),s(1842))>>s(2491), (ch([119,[114,116],[113],115,125]),s(1843))>>s(2492), (ch([119,[114,116],[113],115,125]),s(1844))>>s(2493), (ch([119,[114,116],[113],115,125]),s(1845))>>s(2494), (ch([119,[114,116],[113],115,125]),s(1846))>>s(2495), (ch([119,[114,116],[113],115,125]),s(1475))>>s(2496)]
 * Renamed intermediate variables: 
[ (ch([119,[114,116],[113],117,125]),s(1831))>>s(2497), (ch([119,[114,116],[113],117,125]),s(1832))>>s(2498), (ch([119,[114,116],[113],117,125]),s(1833))>>s(2499), (ch([119,[114,116],[113],117,125]),s(1834))>>s(2500), (ch([119,[114,116],[113],117,125]),aux(361))>>s(2501), (ch([119,[114,116],[113],117,125]),s(1449))>>s(2502), (ch([119,[114,116],[113],117,125]),aux(345))>>s(2503), (ch([119,[114,116],[113],117,125]),aux(362))>>s(2504), (ch([119,[114,116],[113],117,125]),aux(631))>>s(2505), (ch([119,[114,116],[113],117,125]),aux(632))>>s(2506), (ch([119,[114,116],[113],117,125]),it([117,125]))>>s(2507), (ch([119,[114,116],[113],117,125]),aux(359))>>s(2508), (ch([119,[114,116],[113],117,125]),it(113))>>s(2509), (ch([119,[114,116],[113],117,125]),aux(350))>>s(2510), (ch([119,[114,116],[113],117,125]),aux(349))>>s(2511), (ch([119,[114,116],[113],117,125]),aux(348))>>s(2512), (ch([119,[114,116],[113],117,125]),s(1686))>>s(2513), (ch([119,[114,116],[113],117,125]),s(1488))>>s(2514), (ch([119,[114,116],[113],117,125]),aux(351))>>s(2515), (ch([119,[114,116],[113],117,125]),s(1490))>>s(2516), (ch([119,[114,116],[113],117,125]),s(1496))>>s(2517), (ch([119,[114,116],[113],117,125]),s(1489))>>s(2518), (ch([119,[114,116],[113],117,125]),it(114))>>s(2519), (ch([119,[114,116],[113],117,125]),s(1678))>>s(2520), (ch([119,[114,116],[113],117,125]),s(1680))>>s(2521), (ch([119,[114,116],[113],117,125]),s(1473))>>s(2522), (ch([119,[114,116],[113],117,125]),s(1474))>>s(2523), (ch([119,[114,116],[113],117,125]),s(1491))>>s(2524), (ch([119,[114,116],[113],117,125]),s(1493))>>s(2525), (ch([119,[114,116],[113],117,125]),s(1476))>>s(2526), (ch([119,[114,116],[113],117,125]),s(1479))>>s(2527), (ch([119,[114,116],[113],117,125]),s(1481))>>s(2528), (ch([119,[114,116],[113],117,125]),s(1483))>>s(2529), (ch([119,[114,116],[113],117,125]),aux(288))>>s(2530), (ch([119,[114,116],[113],117,125]),aux(287))>>s(2531), (ch([119,[114,116],[113],117,125]),aux(289))>>s(2532), (ch([119,[114,116],[113],117,125]),s(1629))>>s(2533), (ch([119,[114,116],[113],117,125]),s(1628))>>s(2534), (ch([119,[114,116],[113],117,125]),s(1611))>>s(2535), (ch([119,[114,116],[113],117,125]),s(1618))>>s(2536), (ch([119,[114,116],[113],117,125]),s(1620))>>s(2537), (ch([119,[114,116],[113],117,125]),s(1835))>>s(2538), (ch([119,[114,116],[113],117,125]),s(1836))>>s(2539), (ch([119,[114,116],[113],117,125]),s(1837))>>s(2540), (ch([119,[114,116],[113],117,125]),s(1838))>>s(2541), (ch([119,[114,116],[113],117,125]),s(1839))>>s(2542), (ch([119,[114,116],[113],117,125]),s(1840))>>s(2543), (ch([119,[114,116],[113],117,125]),s(1841))>>s(2544), (ch([119,[114,116],[113],117,125]),s(1842))>>s(2545), (ch([119,[114,116],[113],117,125]),s(1843))>>s(2546), (ch([119,[114,116],[113],117,125]),s(1844))>>s(2547), (ch([119,[114,116],[113],117,125]),s(1845))>>s(2548), (ch([119,[114,116],[113],117,125]),s(1846))>>s(2549), (ch([119,[114,116],[113],117,125]),s(1475))>>s(2550)]
 * Renamed intermediate variables: 
[ (ch([119,[114,116],[113],125]),s(1830))>>s(2551), (ch([119,[114,116],[113],125]),s(1831))>>s(2552), (ch([119,[114,116],[113],125]),s(1832))>>s(2553), (ch([119,[114,116],[113],125]),s(1833))>>s(2554), (ch([119,[114,116],[113],125]),s(1834))>>s(2555), (ch([119,[114,116],[113],125]),aux(265))>>s(2556), (ch([119,[114,116],[113],125]),aux(630))>>s(2557), (ch([119,[114,116],[113],125]),it(113))>>s(2558), (ch([119,[114,116],[113],125]),aux(270))>>s(2559), (ch([119,[114,116],[113],125]),aux(269))>>s(2560), (ch([119,[114,116],[113],125]),aux(268))>>s(2561), (ch([119,[114,116],[113],125]),s(1488))>>s(2562), (ch([119,[114,116],[113],125]),aux(271))>>s(2563), (ch([119,[114,116],[113],125]),s(1490))>>s(2564), (ch([119,[114,116],[113],125]),aux(289))>>s(2565), (ch([119,[114,116],[113],125]),s(1489))>>s(2566), (ch([119,[114,116],[113],125]),s(1473))>>s(2567), (ch([119,[114,116],[113],125]),s(1474))>>s(2568), (ch([119,[114,116],[113],125]),s(1491))>>s(2569), (ch([119,[114,116],[113],125]),s(1493))>>s(2570), (ch([119,[114,116],[113],125]),s(1476))>>s(2571), (ch([119,[114,116],[113],125]),s(1479))>>s(2572), (ch([119,[114,116],[113],125]),s(1481))>>s(2573), (ch([119,[114,116],[113],125]),s(1483))>>s(2574), (ch([119,[114,116],[113],125]),s(1628))>>s(2575), (ch([119,[114,116],[113],125]),s(1618))>>s(2576), (ch([119,[114,116],[113],125]),s(1620))>>s(2577), (ch([119,[114,116],[113],125]),s(1835))>>s(2578), (ch([119,[114,116],[113],125]),s(1836))>>s(2579), (ch([119,[114,116],[113],125]),s(1837))>>s(2580), (ch([119,[114,116],[113],125]),s(1838))>>s(2581), (ch([119,[114,116],[113],125]),s(1839))>>s(2582), (ch([119,[114,116],[113],125]),s(1840))>>s(2583), (ch([119,[114,116],[113],125]),s(1841))>>s(2584), (ch([119,[114,116],[113],125]),s(1842))>>s(2585), (ch([119,[114,116],[113],125]),s(1843))>>s(2586), (ch([119,[114,116],[113],125]),s(1844))>>s(2587), (ch([119,[114,116],[113],125]),s(1845))>>s(2588), (ch([119,[114,116],[113],125]),s(1846))>>s(2589), (ch([119,[114,116],[113],125]),s(1475))>>s(2590)]
 * Joined equivalent variables [aux(671),s(2099),s(2136),s(2164),s(2192),s(2238),s(2274),s(2311),s(2348),s(2380),s(2410),s(2446),s(2505),s(2551)] into aux(671)
 * Joined equivalent variables [aux(672),s(2100),s(2137),s(2165),s(2185),s(2231),s(2275),s(2312),s(2349),s(2381),s(2411),s(2438),s(2497),s(2552)] into aux(672)
 * Joined equivalent variables [aux(673),s(2094),s(2131),s(2158)] into aux(673)
 * Joined equivalent variables [aux(674),s(2101),s(2138),s(2159)] into aux(674)
 * Joined equivalent variables [aux(675),s(2095),s(2132),s(2160),s(2186),s(2232),s(2276),s(2313),s(2350),s(2382),s(2412),s(2439),s(2498),s(2553)] into aux(675)
 * Joined equivalent variables [aux(676),s(2161)] into aux(676)
 * Joined equivalent variables [aux(679),s(2097),s(2134),s(2162),s(2189),s(2235),s(2277),s(2314),s(2351),s(2383),s(2413),s(2440),s(2499),s(2554)] into aux(679)
 * Joined equivalent variables [aux(680),s(2098),s(2135),s(2163),s(2190),s(2236),s(2278),s(2315),s(2352),s(2384),s(2414),s(2441),s(2500),s(2555)] into aux(680)
 * Joined equivalent variables [aux(681),s(2193),s(2239),s(2280),s(2317),s(2354),s(2385),s(2415),s(2447),s(2506),s(2557)] into aux(681)
 * Joined equivalent variables [aux(683),s(2191),s(2237),s(2279),s(2316),s(2353),s(2442),s(2501),s(2556)] into aux(683)
 * Joined equivalent variables [aux(687),s(2445),s(2504)] into aux(687)
 * Joined equivalent variables [s(2104),s(2105)] into s(2104)
 * Joined equivalent variables [s(2129),s(2130),s(2230),s(2273),s(2310),s(2347),s(2379),s(2409),s(2437),s(2496),s(2550),s(2590)] into s(2129)
 * Joined equivalent variables [s(2103),s(2112)] into s(2103)
 * Joined equivalent variables [s(2115),s(2116)] into s(2115)
 * Joined equivalent variables [s(2113),s(2114)] into s(2113)
 * Joined equivalent variables [s(2140),s(2141)] into s(2140)
 * Joined equivalent variables [s(2144),s(2145)] into s(2144)
 * Joined equivalent variables [s(2142),s(2143)] into s(2142)
 * Joined equivalent variables [s(2167),s(2168)] into s(2167)
 * Joined equivalent variables [s(2169),s(2170)] into s(2169)
 * Joined equivalent variables [s(2171),s(2172)] into s(2171)
 * Joined equivalent variables [s(2107),s(2108)] into s(2107)
 * Joined equivalent variables [s(2282),s(2319),s(2559)] into s(2282)
 * Joined equivalent variables [s(2283),s(2320),s(2356),s(2387),s(2417),s(2476),s(2530),s(2560)] into s(2283)
 * Joined equivalent variables [s(2284),s(2325),s(2357),s(2388),s(2418),s(2477),s(2531),s(2561)] into s(2284)
 * Joined equivalent variables [s(2118),s(2147),s(2174),s(2219),s(2262),s(2299),s(2336),s(2368),s(2398),s(2426),s(2485),s(2539),s(2579)] into s(2118)
 * Joined equivalent variables [s(2199),s(2245),s(2321),s(2358),s(2389),s(2454),s(2513)] into s(2199)
 * Joined equivalent variables [s(2102),s(2139),s(2166)] into s(2102)
 * Joined equivalent variables [s(2126),s(2155),s(2182),s(2227),s(2270),s(2307),s(2344),s(2376),s(2406),s(2434),s(2493),s(2547),s(2587)] into s(2126)
 * Joined equivalent variables [s(2125),s(2154),s(2181),s(2226),s(2269),s(2306),s(2343),s(2375),s(2405),s(2433),s(2492),s(2546),s(2586)] into s(2125)
 * Joined equivalent variables [s(2128),s(2157),s(2184),s(2229),s(2272),s(2309),s(2346),s(2378),s(2408),s(2436),s(2495),s(2549),s(2589)] into s(2128)
 * Joined equivalent variables [s(2127),s(2156),s(2183),s(2228),s(2271),s(2308),s(2345),s(2377),s(2407),s(2435),s(2494),s(2548),s(2588)] into s(2127)
 * Joined equivalent variables [s(2194),s(2240)] into s(2194)
 * Joined equivalent variables [s(2124),s(2153),s(2180),s(2225),s(2268),s(2305),s(2342),s(2374),s(2404),s(2432),s(2491),s(2545),s(2585)] into s(2124)
 * Joined equivalent variables [s(2123),s(2152),s(2179),s(2224),s(2267),s(2304),s(2341),s(2373),s(2403),s(2431),s(2490),s(2544),s(2584)] into s(2123)
 * Joined equivalent variables [s(2103),s(2140),s(2167)] into s(2103)
 * Joined equivalent variables [s(2117),s(2146),s(2173),s(2218),s(2261),s(2298),s(2335),s(2367),s(2397),s(2425),s(2484),s(2538),s(2578)] into s(2117)
 * Joined equivalent variables [s(2195),s(2241),s(2281),s(2318),s(2355),s(2386),s(2416),s(2460),s(2519),s(2558)] into s(2195)
 * Joined equivalent variables [s(2210),s(2252),s(2331),s(2363),s(2467),s(2521)] into s(2210)
 * Joined equivalent variables [s(2096),s(2133)] into s(2096)
 * Joined equivalent variables [s(2187),s(2233)] into s(2187)
 * Joined equivalent variables [s(2188),s(2234)] into s(2188)
 * Joined equivalent variables [s(2443),s(2502)] into s(2443)
 * Joined equivalent variables [s(2449),s(2508)] into s(2449)
 * Joined equivalent variables [s(2444),s(2503)] into s(2444)
 * Joined equivalent variables [s(2196),s(2242)] into s(2196)
 * Joined equivalent variables [s(2197),s(2243)] into s(2197)
 * Joined equivalent variables [s(2198),s(2244)] into s(2198)
 * Joined equivalent variables [s(2200),s(2246)] into s(2200)
 * Joined equivalent variables [s(2451),s(2510)] into s(2451)
 * Joined equivalent variables [s(2452),s(2511)] into s(2452)
 * Joined equivalent variables [s(2453),s(2512)] into s(2453)
 * Joined equivalent variables [s(2120),s(2149),s(2176),s(2221),s(2264),s(2301),s(2338),s(2370),s(2400),s(2428),s(2487),s(2541),s(2581)] into s(2120)
 * Joined equivalent variables [s(2119),s(2148),s(2175),s(2220),s(2263),s(2300),s(2337),s(2369),s(2399),s(2427),s(2486),s(2540),s(2580)] into s(2119)
 * Joined equivalent variables [s(2285),s(2562)] into s(2285)
 * Joined equivalent variables [s(2286),s(2322),s(2360),s(2391),s(2420),s(2479),s(2533),s(2563)] into s(2286)
 * Joined equivalent variables [s(2287),s(2323),s(2564)] into s(2287)
 * Joined equivalent variables [s(2288),s(2327),s(2359),s(2390),s(2419),s(2478),s(2532),s(2565)] into s(2288)
 * Joined equivalent variables [s(2448),s(2507)] into s(2448)
 * Joined equivalent variables [s(2113),s(2142)] into s(2113)
 * Joined equivalent variables [s(2115),s(2144)] into s(2115)
 * Joined equivalent variables [s(2209),s(2251),s(2330),s(2362),s(2466),s(2520)] into s(2209)
 * Joined equivalent variables [s(2109),s(2110)] into s(2109)
 * Joined equivalent variables [s(2450),s(2509)] into s(2450)
 * Joined equivalent variables [s(2289),s(2324),s(2566)] into s(2289)
 * Joined equivalent variables [s(2201),s(2247)] into s(2201)
 * Joined equivalent variables [s(2202),s(2248)] into s(2202)
 * Joined equivalent variables [s(2203),s(2249)] into s(2203)
 * Joined equivalent variables [s(2455),s(2514)] into s(2455)
 * Joined equivalent variables [s(2456),s(2515)] into s(2456)
 * Joined equivalent variables [s(2457),s(2516)] into s(2457)
 * Joined equivalent variables [s(2458),s(2517)] into s(2458)
 * Joined equivalent variables [s(2361),s(2392),s(2421),s(2480),s(2534),s(2575)] into s(2361)
 * Joined equivalent variables [s(2122),s(2151),s(2178),s(2223),s(2266),s(2303),s(2340),s(2372),s(2402),s(2430),s(2489),s(2543),s(2583)] into s(2122)
 * Joined equivalent variables [s(2121),s(2150),s(2177),s(2222),s(2265),s(2302),s(2339),s(2371),s(2401),s(2429),s(2488),s(2542),s(2582)] into s(2121)
 * Joined equivalent variables [s(2297),s(2574)] into s(2297)
 * Joined equivalent variables [s(2332),s(2365),s(2395),s(2423),s(2482),s(2536),s(2576)] into s(2332)
 * Joined equivalent variables [s(2291),s(2333),s(2568)] into s(2291)
 * Joined equivalent variables [s(2290),s(2328),s(2364),s(2394),s(2422),s(2481),s(2535),s(2567)] into s(2290)
 * Joined equivalent variables [s(2293),s(2570)] into s(2293)
 * Joined equivalent variables [s(2204),s(2250)] into s(2204)
 * Joined equivalent variables [s(2459),s(2518)] into s(2459)
 * Joined equivalent variables [s(2292),s(2569)] into s(2292)
 * Joined equivalent variables [s(2217),s(2260)] into s(2217)
 * Joined equivalent variables [s(2211),s(2254)] into s(2211)
 * Joined equivalent variables [s(2208),s(2253)] into s(2208)
 * Joined equivalent variables [s(2296),s(2573)] into s(2296)
 * Joined equivalent variables [s(2366),s(2396),s(2424),s(2483),s(2537),s(2577)] into s(2366)
 * Joined equivalent variables [s(2475),s(2529)] into s(2475)
 * Joined equivalent variables [s(2469),s(2523)] into s(2469)
 * Joined equivalent variables [s(2468),s(2522)] into s(2468)
 * Joined equivalent variables [s(2212),s(2255)] into s(2212)
 * Joined equivalent variables [s(2213),s(2256)] into s(2213)
 * Joined equivalent variables [s(2470),s(2524)] into s(2470)
 * Joined equivalent variables [s(2471),s(2525)] into s(2471)
 * Joined equivalent variables [s(2216),s(2259)] into s(2216)
 * Joined equivalent variables [s(2295),s(2572)] into s(2295)
 * Joined equivalent variables [s(2294),s(2571)] into s(2294)
 * Joined equivalent variables [s(2474),s(2528)] into s(2474)
 * Joined equivalent variables [s(2215),s(2258)] into s(2215)
 * Joined equivalent variables [s(2214),s(2257)] into s(2214)
 * Joined equivalent variables [s(2473),s(2527)] into s(2473)
 * Joined equivalent variables [s(2472),s(2526)] into s(2472)
 * Renamed intermediate variables: 
[ (ch([120,115,125]),s(1695))>>s(2591), (ch([120,115,125]),s(1816))>>s(2592), (ch([120,115,125]),s(1817))>>s(2593), (ch([120,115,125]),aux(626))>>s(2594), (ch([120,115,125]),aux(627))>>s(2595), (ch([120,115,125]),aux(628))>>s(2596), (ch([120,115,125]),aux(629))>>s(2597), (ch([120,115,125]),s(1690))>>s(2598), (ch([120,115,125]),s(1696))>>s(2599), (ch([120,115,125]),s(1697))>>s(2600), (ch([120,115,125]),s(1703))>>s(2601), (ch([120,115,125]),s(1704))>>s(2602), (ch([120,115,125]),s(1705))>>s(2603), (ch([120,115,125]),s(1706))>>s(2604), (ch([120,115,125]),s(1707))>>s(2605), (ch([120,115,125]),s(1708))>>s(2606), (ch([120,115,125]),s(1709))>>s(2607), (ch([120,115,125]),s(1710))>>s(2608), (ch([120,115,125]),s(1711))>>s(2609), (ch([120,115,125]),s(1712))>>s(2610), (ch([120,115,125]),s(1713))>>s(2611), (ch([120,115,125]),s(1714))>>s(2612), (ch([120,115,125]),s(1715))>>s(2613), (ch([120,115,125]),s(1818))>>s(2614), (ch([120,115,125]),s(1819))>>s(2615), (ch([120,115,125]),s(1820))>>s(2616), (ch([120,115,125]),s(1821))>>s(2617), (ch([120,115,125]),s(1822))>>s(2618), (ch([120,115,125]),s(1823))>>s(2619), (ch([120,115,125]),s(1824))>>s(2620), (ch([120,115,125]),s(1825))>>s(2621), (ch([120,115,125]),s(1826))>>s(2622), (ch([120,115,125]),s(1827))>>s(2623), (ch([120,115,125]),s(1828))>>s(2624), (ch([120,115,125]),s(1829))>>s(2625), (ch([120,115,125]),s(1701))>>s(2626), (ch([120,115,125]),s(1702))>>s(2627)]
 * Renamed intermediate variables: 
[ (ch([120,117,125]),s(1667))>>s(2628), (ch([120,117,125]),s(1816))>>s(2629), (ch([120,117,125]),s(1817))>>s(2630), (ch([120,117,125]),aux(622))>>s(2631), (ch([120,117,125]),aux(623))>>s(2632), (ch([120,117,125]),aux(624))>>s(2633), (ch([120,117,125]),aux(625))>>s(2634), (ch([120,117,125]),s(1662))>>s(2635), (ch([120,117,125]),s(1668))>>s(2636), (ch([120,117,125]),s(1669))>>s(2637), (ch([120,117,125]),s(1670))>>s(2638), (ch([120,117,125]),s(1671))>>s(2639), (ch([120,117,125]),s(1672))>>s(2640), (ch([120,117,125]),s(1673))>>s(2641), (ch([120,117,125]),s(1674))>>s(2642), (ch([120,117,125]),s(1818))>>s(2643), (ch([120,117,125]),s(1819))>>s(2644), (ch([120,117,125]),s(1820))>>s(2645), (ch([120,117,125]),s(1821))>>s(2646), (ch([120,117,125]),s(1822))>>s(2647), (ch([120,117,125]),s(1823))>>s(2648), (ch([120,117,125]),s(1824))>>s(2649), (ch([120,117,125]),s(1825))>>s(2650), (ch([120,117,125]),s(1826))>>s(2651), (ch([120,117,125]),s(1827))>>s(2652), (ch([120,117,125]),s(1828))>>s(2653), (ch([120,117,125]),s(1829))>>s(2654)]
 * Renamed intermediate variables: 
[ (ch([120,118,125]),s(1746))>>s(2655), (ch([120,118,125]),s(1740))>>s(2656), (ch([120,118,125]),s(1816))>>s(2657), (ch([120,118,125]),s(1817))>>s(2658), (ch([120,118,125]),aux(619))>>s(2659), (ch([120,118,125]),aux(620))>>s(2660), (ch([120,118,125]),aux(621))>>s(2661), (ch([120,118,125]),s(1747))>>s(2662), (ch([120,118,125]),s(1748))>>s(2663), (ch([120,118,125]),s(1749))>>s(2664), (ch([120,118,125]),s(1750))>>s(2665), (ch([120,118,125]),s(1751))>>s(2666), (ch([120,118,125]),s(1752))>>s(2667), (ch([120,118,125]),s(1753))>>s(2668), (ch([120,118,125]),s(1818))>>s(2669), (ch([120,118,125]),s(1819))>>s(2670), (ch([120,118,125]),s(1820))>>s(2671), (ch([120,118,125]),s(1821))>>s(2672), (ch([120,118,125]),s(1822))>>s(2673), (ch([120,118,125]),s(1823))>>s(2674), (ch([120,118,125]),s(1824))>>s(2675), (ch([120,118,125]),s(1825))>>s(2676), (ch([120,118,125]),s(1826))>>s(2677), (ch([120,118,125]),s(1827))>>s(2678), (ch([120,118,125]),s(1828))>>s(2679), (ch([120,118,125]),s(1829))>>s(2680)]
 * Renamed intermediate variables: 
[ (ch([120,[113],115,125]),s(1814))>>s(2681), (ch([120,[113],115,125]),s(1815))>>s(2682), (ch([120,[113],115,125]),s(1449))>>s(2683), (ch([120,[113],115,125]),aux(366))>>s(2684), (ch([120,[113],115,125]),s(1816))>>s(2685), (ch([120,[113],115,125]),s(1817))>>s(2686), (ch([120,[113],115,125]),aux(379))>>s(2687), (ch([120,[113],115,125]),aux(617))>>s(2688), (ch([120,[113],115,125]),aux(618))>>s(2689), (ch([120,[113],115,125]),it([115,125]))>>s(2690), (ch([120,[113],115,125]),it(113))>>s(2691), (ch([120,[113],115,125]),aux(371))>>s(2692), (ch([120,[113],115,125]),aux(370))>>s(2693), (ch([120,[113],115,125]),aux(369))>>s(2694), (ch([120,[113],115,125]),s(1732))>>s(2695), (ch([120,[113],115,125]),s(1488))>>s(2696), (ch([120,[113],115,125]),aux(372))>>s(2697), (ch([120,[113],115,125]),s(1490))>>s(2698), (ch([120,[113],115,125]),s(1496))>>s(2699), (ch([120,[113],115,125]),s(1489))>>s(2700), (ch([120,[113],115,125]),s(1703))>>s(2701), (ch([120,[113],115,125]),s(1735))>>s(2702), (ch([120,[113],115,125]),s(1720))>>s(2703), (ch([120,[113],115,125]),s(1473))>>s(2704), (ch([120,[113],115,125]),s(1724))>>s(2705), (ch([120,[113],115,125]),s(1726))>>s(2706), (ch([120,[113],115,125]),s(1474))>>s(2707), (ch([120,[113],115,125]),s(1491))>>s(2708), (ch([120,[113],115,125]),s(1493))>>s(2709), (ch([120,[113],115,125]),s(1476))>>s(2710), (ch([120,[113],115,125]),s(1479))>>s(2711), (ch([120,[113],115,125]),s(1481))>>s(2712), (ch([120,[113],115,125]),s(1483))>>s(2713), (ch([120,[113],115,125]),s(1818))>>s(2714), (ch([120,[113],115,125]),s(1819))>>s(2715), (ch([120,[113],115,125]),s(1820))>>s(2716), (ch([120,[113],115,125]),s(1821))>>s(2717), (ch([120,[113],115,125]),s(1822))>>s(2718), (ch([120,[113],115,125]),s(1823))>>s(2719), (ch([120,[113],115,125]),s(1824))>>s(2720), (ch([120,[113],115,125]),s(1825))>>s(2721), (ch([120,[113],115,125]),s(1826))>>s(2722), (ch([120,[113],115,125]),s(1827))>>s(2723), (ch([120,[113],115,125]),s(1828))>>s(2724), (ch([120,[113],115,125]),s(1829))>>s(2725), (ch([120,[113],115,125]),s(1475))>>s(2726)]
 * Renamed intermediate variables: 
[ (ch([120,[113],117,125]),s(1814))>>s(2727), (ch([120,[113],117,125]),s(1815))>>s(2728), (ch([120,[113],117,125]),s(1449))>>s(2729), (ch([120,[113],117,125]),aux(345))>>s(2730), (ch([120,[113],117,125]),s(1816))>>s(2731), (ch([120,[113],117,125]),s(1817))>>s(2732), (ch([120,[113],117,125]),aux(358))>>s(2733), (ch([120,[113],117,125]),aux(615))>>s(2734), (ch([120,[113],117,125]),aux(616))>>s(2735), (ch([120,[113],117,125]),it([117,125]))>>s(2736), (ch([120,[113],117,125]),it(113))>>s(2737), (ch([120,[113],117,125]),aux(350))>>s(2738), (ch([120,[113],117,125]),aux(349))>>s(2739), (ch([120,[113],117,125]),aux(348))>>s(2740), (ch([120,[113],117,125]),s(1686))>>s(2741), (ch([120,[113],117,125]),s(1488))>>s(2742), (ch([120,[113],117,125]),aux(351))>>s(2743), (ch([120,[113],117,125]),s(1490))>>s(2744), (ch([120,[113],117,125]),s(1496))>>s(2745), (ch([120,[113],117,125]),s(1489))>>s(2746), (ch([120,[113],117,125]),s(1678))>>s(2747), (ch([120,[113],117,125]),s(1680))>>s(2748), (ch([120,[113],117,125]),s(1473))>>s(2749), (ch([120,[113],117,125]),s(1474))>>s(2750), (ch([120,[113],117,125]),s(1491))>>s(2751), (ch([120,[113],117,125]),s(1493))>>s(2752), (ch([120,[113],117,125]),s(1476))>>s(2753), (ch([120,[113],117,125]),s(1479))>>s(2754), (ch([120,[113],117,125]),s(1481))>>s(2755), (ch([120,[113],117,125]),s(1483))>>s(2756), (ch([120,[113],117,125]),s(1818))>>s(2757), (ch([120,[113],117,125]),s(1819))>>s(2758), (ch([120,[113],117,125]),s(1820))>>s(2759), (ch([120,[113],117,125]),s(1821))>>s(2760), (ch([120,[113],117,125]),s(1822))>>s(2761), (ch([120,[113],117,125]),s(1823))>>s(2762), (ch([120,[113],117,125]),s(1824))>>s(2763), (ch([120,[113],117,125]),s(1825))>>s(2764), (ch([120,[113],117,125]),s(1826))>>s(2765), (ch([120,[113],117,125]),s(1827))>>s(2766), (ch([120,[113],117,125]),s(1828))>>s(2767), (ch([120,[113],117,125]),s(1829))>>s(2768), (ch([120,[113],117,125]),s(1475))>>s(2769)]
 * Renamed intermediate variables: 
[ (ch([120,[113],125]),s(1813))>>s(2770), (ch([120,[113],125]),s(1814))>>s(2771), (ch([120,[113],125]),s(1815))>>s(2772), (ch([120,[113],125]),s(1816))>>s(2773), (ch([120,[113],125]),s(1817))>>s(2774), (ch([120,[113],125]),aux(265))>>s(2775), (ch([120,[113],125]),aux(614))>>s(2776), (ch([120,[113],125]),it(113))>>s(2777), (ch([120,[113],125]),aux(270))>>s(2778), (ch([120,[113],125]),aux(269))>>s(2779), (ch([120,[113],125]),aux(268))>>s(2780), (ch([120,[113],125]),s(1488))>>s(2781), (ch([120,[113],125]),aux(271))>>s(2782), (ch([120,[113],125]),s(1490))>>s(2783), (ch([120,[113],125]),s(1496))>>s(2784), (ch([120,[113],125]),s(1489))>>s(2785), (ch([120,[113],125]),s(1473))>>s(2786), (ch([120,[113],125]),s(1474))>>s(2787), (ch([120,[113],125]),s(1491))>>s(2788), (ch([120,[113],125]),s(1493))>>s(2789), (ch([120,[113],125]),s(1476))>>s(2790), (ch([120,[113],125]),s(1479))>>s(2791), (ch([120,[113],125]),s(1481))>>s(2792), (ch([120,[113],125]),s(1483))>>s(2793), (ch([120,[113],125]),s(1818))>>s(2794), (ch([120,[113],125]),s(1819))>>s(2795), (ch([120,[113],125]),s(1820))>>s(2796), (ch([120,[113],125]),s(1821))>>s(2797), (ch([120,[113],125]),s(1822))>>s(2798), (ch([120,[113],125]),s(1823))>>s(2799), (ch([120,[113],125]),s(1824))>>s(2800), (ch([120,[113],125]),s(1825))>>s(2801), (ch([120,[113],125]),s(1826))>>s(2802), (ch([120,[113],125]),s(1827))>>s(2803), (ch([120,[113],125]),s(1828))>>s(2804), (ch([120,[113],125]),s(1829))>>s(2805), (ch([120,[113],125]),s(1475))>>s(2806)]
 * Renamed intermediate variables: 
[ (ch([120,[114,116],115,125]),s(1813))>>s(2807), (ch([120,[114,116],115,125]),s(1814))>>s(2808), (ch([120,[114,116],115,125]),s(1815))>>s(2809), (ch([120,[114,116],115,125]),s(1816))>>s(2810), (ch([120,[114,116],115,125]),s(1817))>>s(2811), (ch([120,[114,116],115,125]),s(1731))>>s(2812), (ch([120,[114,116],115,125]),aux(613))>>s(2813), (ch([120,[114,116],115,125]),it(114))>>s(2814), (ch([120,[114,116],115,125]),aux(538))>>s(2815), (ch([120,[114,116],115,125]),aux(537))>>s(2816), (ch([120,[114,116],115,125]),s(1732))>>s(2817), (ch([120,[114,116],115,125]),aux(539))>>s(2818), (ch([120,[114,116],115,125]),s(1629))>>s(2819), (ch([120,[114,116],115,125]),s(1628))>>s(2820), (ch([120,[114,116],115,125]),s(1703))>>s(2821), (ch([120,[114,116],115,125]),s(1734))>>s(2822), (ch([120,[114,116],115,125]),s(1735))>>s(2823), (ch([120,[114,116],115,125]),s(1720))>>s(2824), (ch([120,[114,116],115,125]),s(1722))>>s(2825), (ch([120,[114,116],115,125]),s(1724))>>s(2826), (ch([120,[114,116],115,125]),s(1726))>>s(2827), (ch([120,[114,116],115,125]),s(1611))>>s(2828), (ch([120,[114,116],115,125]),s(1618))>>s(2829), (ch([120,[114,116],115,125]),s(1620))>>s(2830), (ch([120,[114,116],115,125]),s(1818))>>s(2831), (ch([120,[114,116],115,125]),s(1819))>>s(2832), (ch([120,[114,116],115,125]),s(1820))>>s(2833), (ch([120,[114,116],115,125]),s(1821))>>s(2834), (ch([120,[114,116],115,125]),s(1822))>>s(2835), (ch([120,[114,116],115,125]),s(1823))>>s(2836), (ch([120,[114,116],115,125]),s(1824))>>s(2837), (ch([120,[114,116],115,125]),s(1825))>>s(2838), (ch([120,[114,116],115,125]),s(1826))>>s(2839), (ch([120,[114,116],115,125]),s(1827))>>s(2840), (ch([120,[114,116],115,125]),s(1828))>>s(2841), (ch([120,[114,116],115,125]),s(1829))>>s(2842), (ch([120,[114,116],115,125]),s(1612))>>s(2843)]
 * Renamed intermediate variables: 
[ (ch([120,[114,116],117,125]),s(1813))>>s(2844), (ch([120,[114,116],117,125]),s(1814))>>s(2845), (ch([120,[114,116],117,125]),s(1815))>>s(2846), (ch([120,[114,116],117,125]),s(1816))>>s(2847), (ch([120,[114,116],117,125]),s(1817))>>s(2848), (ch([120,[114,116],117,125]),s(1685))>>s(2849), (ch([120,[114,116],117,125]),aux(612))>>s(2850), (ch([120,[114,116],117,125]),it(114))>>s(2851), (ch([120,[114,116],117,125]),aux(470))>>s(2852), (ch([120,[114,116],117,125]),aux(469))>>s(2853), (ch([120,[114,116],117,125]),s(1686))>>s(2854), (ch([120,[114,116],117,125]),aux(471))>>s(2855), (ch([120,[114,116],117,125]),s(1629))>>s(2856), (ch([120,[114,116],117,125]),s(1628))>>s(2857), (ch([120,[114,116],117,125]),s(1678))>>s(2858), (ch([120,[114,116],117,125]),s(1680))>>s(2859), (ch([120,[114,116],117,125]),s(1611))>>s(2860), (ch([120,[114,116],117,125]),s(1618))>>s(2861), (ch([120,[114,116],117,125]),s(1620))>>s(2862), (ch([120,[114,116],117,125]),s(1818))>>s(2863), (ch([120,[114,116],117,125]),s(1819))>>s(2864), (ch([120,[114,116],117,125]),s(1820))>>s(2865), (ch([120,[114,116],117,125]),s(1821))>>s(2866), (ch([120,[114,116],117,125]),s(1822))>>s(2867), (ch([120,[114,116],117,125]),s(1823))>>s(2868), (ch([120,[114,116],117,125]),s(1824))>>s(2869), (ch([120,[114,116],117,125]),s(1825))>>s(2870), (ch([120,[114,116],117,125]),s(1826))>>s(2871), (ch([120,[114,116],117,125]),s(1827))>>s(2872), (ch([120,[114,116],117,125]),s(1828))>>s(2873), (ch([120,[114,116],117,125]),s(1829))>>s(2874), (ch([120,[114,116],117,125]),s(1612))>>s(2875)]
 * Renamed intermediate variables: 
[ (ch([120,[114,116],118,125]),s(1813))>>s(2876), (ch([120,[114,116],118,125]),s(1814))>>s(2877), (ch([120,[114,116],118,125]),s(1815))>>s(2878), (ch([120,[114,116],118,125]),s(1816))>>s(2879), (ch([120,[114,116],118,125]),s(1817))>>s(2880), (ch([120,[114,116],118,125]),aux(611))>>s(2881), (ch([120,[114,116],118,125]),it(114))>>s(2882), (ch([120,[114,116],118,125]),aux(398))>>s(2883), (ch([120,[114,116],118,125]),aux(397))>>s(2884), (ch([120,[114,116],118,125]),s(1765))>>s(2885), (ch([120,[114,116],118,125]),aux(399))>>s(2886), (ch([120,[114,116],118,125]),s(1629))>>s(2887), (ch([120,[114,116],118,125]),s(1628))>>s(2888), (ch([120,[114,116],118,125]),s(1757))>>s(2889), (ch([120,[114,116],118,125]),s(1611))>>s(2890), (ch([120,[114,116],118,125]),s(1618))>>s(2891), (ch([120,[114,116],118,125]),s(1620))>>s(2892), (ch([120,[114,116],118,125]),s(1818))>>s(2893), (ch([120,[114,116],118,125]),s(1819))>>s(2894), (ch([120,[114,116],118,125]),s(1820))>>s(2895), (ch([120,[114,116],118,125]),s(1821))>>s(2896), (ch([120,[114,116],118,125]),s(1822))>>s(2897), (ch([120,[114,116],118,125]),s(1823))>>s(2898), (ch([120,[114,116],118,125]),s(1824))>>s(2899), (ch([120,[114,116],118,125]),s(1825))>>s(2900), (ch([120,[114,116],118,125]),s(1826))>>s(2901), (ch([120,[114,116],118,125]),s(1827))>>s(2902), (ch([120,[114,116],118,125]),s(1828))>>s(2903), (ch([120,[114,116],118,125]),s(1829))>>s(2904), (ch([120,[114,116],118,125]),s(1612))>>s(2905)]
 * Renamed intermediate variables: 
[ (ch([120,[114,116],125]),s(1813))>>s(2906), (ch([120,[114,116],125]),s(1814))>>s(2907), (ch([120,[114,116],125]),s(1815))>>s(2908), (ch([120,[114,116],125]),s(1816))>>s(2909), (ch([120,[114,116],125]),s(1817))>>s(2910), (ch([120,[114,116],125]),aux(610))>>s(2911), (ch([120,[114,116],125]),it(114))>>s(2912), (ch([120,[114,116],125]),aux(288))>>s(2913), (ch([120,[114,116],125]),aux(287))>>s(2914), (ch([120,[114,116],125]),aux(289))>>s(2915), (ch([120,[114,116],125]),s(1629))>>s(2916), (ch([120,[114,116],125]),s(1628))>>s(2917), (ch([120,[114,116],125]),s(1611))>>s(2918), (ch([120,[114,116],125]),s(1618))>>s(2919), (ch([120,[114,116],125]),s(1620))>>s(2920), (ch([120,[114,116],125]),s(1818))>>s(2921), (ch([120,[114,116],125]),s(1819))>>s(2922), (ch([120,[114,116],125]),s(1820))>>s(2923), (ch([120,[114,116],125]),s(1821))>>s(2924), (ch([120,[114,116],125]),s(1822))>>s(2925), (ch([120,[114,116],125]),s(1823))>>s(2926), (ch([120,[114,116],125]),s(1824))>>s(2927), (ch([120,[114,116],125]),s(1825))>>s(2928), (ch([120,[114,116],125]),s(1826))>>s(2929), (ch([120,[114,116],125]),s(1827))>>s(2930), (ch([120,[114,116],125]),s(1828))>>s(2931), (ch([120,[114,116],125]),s(1829))>>s(2932), (ch([120,[114,116],125]),s(1612))>>s(2933)]
 * Renamed intermediate variables: 
[ (ch([120,[114,116],[113],115,125]),s(1814))>>s(2934), (ch([120,[114,116],[113],115,125]),s(1815))>>s(2935), (ch([120,[114,116],[113],115,125]),s(1816))>>s(2936), (ch([120,[114,116],[113],115,125]),s(1817))>>s(2937), (ch([120,[114,116],[113],115,125]),aux(382))>>s(2938), (ch([120,[114,116],[113],115,125]),s(1449))>>s(2939), (ch([120,[114,116],[113],115,125]),aux(366))>>s(2940), (ch([120,[114,116],[113],115,125]),aux(383))>>s(2941), (ch([120,[114,116],[113],115,125]),aux(608))>>s(2942), (ch([120,[114,116],[113],115,125]),aux(609))>>s(2943), (ch([120,[114,116],[113],115,125]),it([115,125]))>>s(2944), (ch([120,[114,116],[113],115,125]),aux(380))>>s(2945), (ch([120,[114,116],[113],115,125]),it(113))>>s(2946), (ch([120,[114,116],[113],115,125]),aux(371))>>s(2947), (ch([120,[114,116],[113],115,125]),aux(370))>>s(2948), (ch([120,[114,116],[113],115,125]),aux(369))>>s(2949), (ch([120,[114,116],[113],115,125]),s(1732))>>s(2950), (ch([120,[114,116],[113],115,125]),s(1488))>>s(2951), (ch([120,[114,116],[113],115,125]),aux(372))>>s(2952), (ch([120,[114,116],[113],115,125]),s(1490))>>s(2953), (ch([120,[114,116],[113],115,125]),s(1496))>>s(2954), (ch([120,[114,116],[113],115,125]),s(1489))>>s(2955), (ch([120,[114,116],[113],115,125]),it(114))>>s(2956), (ch([120,[114,116],[113],115,125]),s(1703))>>s(2957), (ch([120,[114,116],[113],115,125]),s(1734))>>s(2958), (ch([120,[114,116],[113],115,125]),s(1735))>>s(2959), (ch([120,[114,116],[113],115,125]),s(1720))>>s(2960), (ch([120,[114,116],[113],115,125]),s(1722))>>s(2961), (ch([120,[114,116],[113],115,125]),s(1724))>>s(2962), (ch([120,[114,116],[113],115,125]),s(1726))>>s(2963), (ch([120,[114,116],[113],115,125]),s(1473))>>s(2964), (ch([120,[114,116],[113],115,125]),s(1474))>>s(2965), (ch([120,[114,116],[113],115,125]),s(1491))>>s(2966), (ch([120,[114,116],[113],115,125]),s(1493))>>s(2967), (ch([120,[114,116],[113],115,125]),s(1476))>>s(2968), (ch([120,[114,116],[113],115,125]),s(1479))>>s(2969), (ch([120,[114,116],[113],115,125]),s(1481))>>s(2970), (ch([120,[114,116],[113],115,125]),s(1483))>>s(2971), (ch([120,[114,116],[113],115,125]),aux(288))>>s(2972), (ch([120,[114,116],[113],115,125]),aux(287))>>s(2973), (ch([120,[114,116],[113],115,125]),aux(289))>>s(2974), (ch([120,[114,116],[113],115,125]),s(1629))>>s(2975), (ch([120,[114,116],[113],115,125]),s(1628))>>s(2976), (ch([120,[114,116],[113],115,125]),s(1611))>>s(2977), (ch([120,[114,116],[113],115,125]),s(1618))>>s(2978), (ch([120,[114,116],[113],115,125]),s(1620))>>s(2979), (ch([120,[114,116],[113],115,125]),s(1818))>>s(2980), (ch([120,[114,116],[113],115,125]),s(1819))>>s(2981), (ch([120,[114,116],[113],115,125]),s(1820))>>s(2982), (ch([120,[114,116],[113],115,125]),s(1821))>>s(2983), (ch([120,[114,116],[113],115,125]),s(1822))>>s(2984), (ch([120,[114,116],[113],115,125]),s(1823))>>s(2985), (ch([120,[114,116],[113],115,125]),s(1824))>>s(2986), (ch([120,[114,116],[113],115,125]),s(1825))>>s(2987), (ch([120,[114,116],[113],115,125]),s(1826))>>s(2988), (ch([120,[114,116],[113],115,125]),s(1827))>>s(2989), (ch([120,[114,116],[113],115,125]),s(1828))>>s(2990), (ch([120,[114,116],[113],115,125]),s(1829))>>s(2991), (ch([120,[114,116],[113],115,125]),s(1475))>>s(2992)]
 * Renamed intermediate variables: 
[ (ch([120,[114,116],[113],117,125]),s(1814))>>s(2993), (ch([120,[114,116],[113],117,125]),s(1815))>>s(2994), (ch([120,[114,116],[113],117,125]),s(1816))>>s(2995), (ch([120,[114,116],[113],117,125]),s(1817))>>s(2996), (ch([120,[114,116],[113],117,125]),aux(361))>>s(2997), (ch([120,[114,116],[113],117,125]),s(1449))>>s(2998), (ch([120,[114,116],[113],117,125]),aux(345))>>s(2999), (ch([120,[114,116],[113],117,125]),aux(362))>>s(3000), (ch([120,[114,116],[113],117,125]),aux(606))>>s(3001), (ch([120,[114,116],[113],117,125]),aux(607))>>s(3002), (ch([120,[114,116],[113],117,125]),it([117,125]))>>s(3003), (ch([120,[114,116],[113],117,125]),aux(359))>>s(3004), (ch([120,[114,116],[113],117,125]),it(113))>>s(3005), (ch([120,[114,116],[113],117,125]),aux(350))>>s(3006), (ch([120,[114,116],[113],117,125]),aux(349))>>s(3007), (ch([120,[114,116],[113],117,125]),aux(348))>>s(3008), (ch([120,[114,116],[113],117,125]),s(1686))>>s(3009), (ch([120,[114,116],[113],117,125]),s(1488))>>s(3010), (ch([120,[114,116],[113],117,125]),aux(351))>>s(3011), (ch([120,[114,116],[113],117,125]),s(1490))>>s(3012), (ch([120,[114,116],[113],117,125]),s(1496))>>s(3013), (ch([120,[114,116],[113],117,125]),s(1489))>>s(3014), (ch([120,[114,116],[113],117,125]),it(114))>>s(3015), (ch([120,[114,116],[113],117,125]),s(1678))>>s(3016), (ch([120,[114,116],[113],117,125]),s(1680))>>s(3017), (ch([120,[114,116],[113],117,125]),s(1473))>>s(3018), (ch([120,[114,116],[113],117,125]),s(1474))>>s(3019), (ch([120,[114,116],[113],117,125]),s(1491))>>s(3020), (ch([120,[114,116],[113],117,125]),s(1493))>>s(3021), (ch([120,[114,116],[113],117,125]),s(1476))>>s(3022), (ch([120,[114,116],[113],117,125]),s(1479))>>s(3023), (ch([120,[114,116],[113],117,125]),s(1481))>>s(3024), (ch([120,[114,116],[113],117,125]),s(1483))>>s(3025), (ch([120,[114,116],[113],117,125]),aux(288))>>s(3026), (ch([120,[114,116],[113],117,125]),aux(287))>>s(3027), (ch([120,[114,116],[113],117,125]),aux(289))>>s(3028), (ch([120,[114,116],[113],117,125]),s(1629))>>s(3029), (ch([120,[114,116],[113],117,125]),s(1628))>>s(3030), (ch([120,[114,116],[113],117,125]),s(1611))>>s(3031), (ch([120,[114,116],[113],117,125]),s(1618))>>s(3032), (ch([120,[114,116],[113],117,125]),s(1620))>>s(3033), (ch([120,[114,116],[113],117,125]),s(1818))>>s(3034), (ch([120,[114,116],[113],117,125]),s(1819))>>s(3035), (ch([120,[114,116],[113],117,125]),s(1820))>>s(3036), (ch([120,[114,116],[113],117,125]),s(1821))>>s(3037), (ch([120,[114,116],[113],117,125]),s(1822))>>s(3038), (ch([120,[114,116],[113],117,125]),s(1823))>>s(3039), (ch([120,[114,116],[113],117,125]),s(1824))>>s(3040), (ch([120,[114,116],[113],117,125]),s(1825))>>s(3041), (ch([120,[114,116],[113],117,125]),s(1826))>>s(3042), (ch([120,[114,116],[113],117,125]),s(1827))>>s(3043), (ch([120,[114,116],[113],117,125]),s(1828))>>s(3044), (ch([120,[114,116],[113],117,125]),s(1829))>>s(3045), (ch([120,[114,116],[113],117,125]),s(1475))>>s(3046)]
 * Renamed intermediate variables: 
[ (ch([120,[114,116],[113],125]),s(1813))>>s(3047), (ch([120,[114,116],[113],125]),s(1814))>>s(3048), (ch([120,[114,116],[113],125]),s(1815))>>s(3049), (ch([120,[114,116],[113],125]),s(1816))>>s(3050), (ch([120,[114,116],[113],125]),s(1817))>>s(3051), (ch([120,[114,116],[113],125]),aux(265))>>s(3052), (ch([120,[114,116],[113],125]),aux(605))>>s(3053), (ch([120,[114,116],[113],125]),it(113))>>s(3054), (ch([120,[114,116],[113],125]),aux(270))>>s(3055), (ch([120,[114,116],[113],125]),aux(269))>>s(3056), (ch([120,[114,116],[113],125]),aux(268))>>s(3057), (ch([120,[114,116],[113],125]),s(1488))>>s(3058), (ch([120,[114,116],[113],125]),aux(271))>>s(3059), (ch([120,[114,116],[113],125]),s(1490))>>s(3060), (ch([120,[114,116],[113],125]),aux(289))>>s(3061), (ch([120,[114,116],[113],125]),s(1489))>>s(3062), (ch([120,[114,116],[113],125]),s(1473))>>s(3063), (ch([120,[114,116],[113],125]),s(1474))>>s(3064), (ch([120,[114,116],[113],125]),s(1491))>>s(3065), (ch([120,[114,116],[113],125]),s(1493))>>s(3066), (ch([120,[114,116],[113],125]),s(1476))>>s(3067), (ch([120,[114,116],[113],125]),s(1479))>>s(3068), (ch([120,[114,116],[113],125]),s(1481))>>s(3069), (ch([120,[114,116],[113],125]),s(1483))>>s(3070), (ch([120,[114,116],[113],125]),s(1628))>>s(3071), (ch([120,[114,116],[113],125]),s(1618))>>s(3072), (ch([120,[114,116],[113],125]),s(1620))>>s(3073), (ch([120,[114,116],[113],125]),s(1818))>>s(3074), (ch([120,[114,116],[113],125]),s(1819))>>s(3075), (ch([120,[114,116],[113],125]),s(1820))>>s(3076), (ch([120,[114,116],[113],125]),s(1821))>>s(3077), (ch([120,[114,116],[113],125]),s(1822))>>s(3078), (ch([120,[114,116],[113],125]),s(1823))>>s(3079), (ch([120,[114,116],[113],125]),s(1824))>>s(3080), (ch([120,[114,116],[113],125]),s(1825))>>s(3081), (ch([120,[114,116],[113],125]),s(1826))>>s(3082), (ch([120,[114,116],[113],125]),s(1827))>>s(3083), (ch([120,[114,116],[113],125]),s(1828))>>s(3084), (ch([120,[114,116],[113],125]),s(1829))>>s(3085), (ch([120,[114,116],[113],125]),s(1475))>>s(3086)]
 * Joined equivalent variables [aux(688),s(2594),s(2631),s(2659),s(2688),s(2734),s(2770),s(2807),s(2844),s(2876),s(2906),s(2942),s(3001),s(3047)] into aux(688)
 * Joined equivalent variables [aux(689),s(2595),s(2632),s(2660),s(2681),s(2727),s(2771),s(2808),s(2845),s(2877),s(2907),s(2934),s(2993),s(3048)] into aux(689)
 * Joined equivalent variables [aux(690),s(2591),s(2628),s(2655)] into aux(690)
 * Joined equivalent variables [aux(691),s(2596),s(2633),s(2656)] into aux(691)
 * Joined equivalent variables [aux(692),s(2597),s(2634),s(2661),s(2682),s(2728),s(2772),s(2809),s(2846),s(2878),s(2908),s(2935),s(2994),s(3049)] into aux(692)
 * Joined equivalent variables [aux(695),s(2592),s(2629),s(2657),s(2685),s(2731),s(2773),s(2810),s(2847),s(2879),s(2909),s(2936),s(2995),s(3050)] into aux(695)
 * Joined equivalent variables [aux(696),s(2593),s(2630),s(2658),s(2686),s(2732),s(2774),s(2811),s(2848),s(2880),s(2910),s(2937),s(2996),s(3051)] into aux(696)
 * Joined equivalent variables [aux(697),s(2689),s(2735),s(2776),s(2813),s(2850),s(2881),s(2911),s(2943),s(3002),s(3053)] into aux(697)
 * Joined equivalent variables [aux(699),s(2687),s(2733),s(2775),s(2812),s(2849),s(2938),s(2997),s(3052)] into aux(699)
 * Joined equivalent variables [aux(703),s(2941),s(3000)] into aux(703)
 * Joined equivalent variables [s(2601),s(2602)] into s(2601)
 * Joined equivalent variables [s(2626),s(2627),s(2726),s(2769),s(2806),s(2843),s(2875),s(2905),s(2933),s(2992),s(3046),s(3086)] into s(2626)
 * Joined equivalent variables [s(2600),s(2609)] into s(2600)
 * Joined equivalent variables [s(2610),s(2611)] into s(2610)
 * Joined equivalent variables [s(2612),s(2613)] into s(2612)
 * Joined equivalent variables [s(2637),s(2638)] into s(2637)
 * Joined equivalent variables [s(2639),s(2640)] into s(2639)
 * Joined equivalent variables [s(2641),s(2642)] into s(2641)
 * Joined equivalent variables [s(2663),s(2664)] into s(2663)
 * Joined equivalent variables [s(2665),s(2666)] into s(2665)
 * Joined equivalent variables [s(2667),s(2668)] into s(2667)
 * Joined equivalent variables [s(2604),s(2605)] into s(2604)
 * Joined equivalent variables [s(2778),s(2815),s(3055)] into s(2778)
 * Joined equivalent variables [s(2779),s(2816),s(2852),s(2883),s(2913),s(2972),s(3026),s(3056)] into s(2779)
 * Joined equivalent variables [s(2780),s(2821),s(2853),s(2884),s(2914),s(2973),s(3027),s(3057)] into s(2780)
 * Joined equivalent variables [s(2615),s(2644),s(2670),s(2715),s(2758),s(2795),s(2832),s(2864),s(2894),s(2922),s(2981),s(3035),s(3075)] into s(2615)
 * Joined equivalent variables [s(2695),s(2741),s(2817),s(2854),s(2885),s(2950),s(3009)] into s(2695)
 * Joined equivalent variables [s(2599),s(2636),s(2662)] into s(2599)
 * Joined equivalent variables [s(2623),s(2652),s(2678),s(2723),s(2766),s(2803),s(2840),s(2872),s(2902),s(2930),s(2989),s(3043),s(3083)] into s(2623)
 * Joined equivalent variables [s(2622),s(2651),s(2677),s(2722),s(2765),s(2802),s(2839),s(2871),s(2901),s(2929),s(2988),s(3042),s(3082)] into s(2622)
 * Joined equivalent variables [s(2625),s(2654),s(2680),s(2725),s(2768),s(2805),s(2842),s(2874),s(2904),s(2932),s(2991),s(3045),s(3085)] into s(2625)
 * Joined equivalent variables [s(2624),s(2653),s(2679),s(2724),s(2767),s(2804),s(2841),s(2873),s(2903),s(2931),s(2990),s(3044),s(3084)] into s(2624)
 * Joined equivalent variables [s(2690),s(2736)] into s(2690)
 * Joined equivalent variables [s(2621),s(2650),s(2676),s(2721),s(2764),s(2801),s(2838),s(2870),s(2900),s(2928),s(2987),s(3041),s(3081)] into s(2621)
 * Joined equivalent variables [s(2620),s(2649),s(2675),s(2720),s(2763),s(2800),s(2837),s(2869),s(2899),s(2927),s(2986),s(3040),s(3080)] into s(2620)
 * Joined equivalent variables [s(2600),s(2637),s(2663)] into s(2600)
 * Joined equivalent variables [s(2614),s(2643),s(2669),s(2714),s(2757),s(2794),s(2831),s(2863),s(2893),s(2921),s(2980),s(3034),s(3074)] into s(2614)
 * Joined equivalent variables [s(2691),s(2737),s(2777),s(2814),s(2851),s(2882),s(2912),s(2956),s(3015),s(3054)] into s(2691)
 * Joined equivalent variables [s(2706),s(2748),s(2827),s(2859),s(2963),s(3017)] into s(2706)
 * Joined equivalent variables [s(2598),s(2635)] into s(2598)
 * Joined equivalent variables [s(2683),s(2729)] into s(2683)
 * Joined equivalent variables [s(2684),s(2730)] into s(2684)
 * Joined equivalent variables [s(2939),s(2998)] into s(2939)
 * Joined equivalent variables [s(2945),s(3004)] into s(2945)
 * Joined equivalent variables [s(2940),s(2999)] into s(2940)
 * Joined equivalent variables [s(2692),s(2738)] into s(2692)
 * Joined equivalent variables [s(2693),s(2739)] into s(2693)
 * Joined equivalent variables [s(2694),s(2740)] into s(2694)
 * Joined equivalent variables [s(2696),s(2742)] into s(2696)
 * Joined equivalent variables [s(2947),s(3006)] into s(2947)
 * Joined equivalent variables [s(2948),s(3007)] into s(2948)
 * Joined equivalent variables [s(2949),s(3008)] into s(2949)
 * Joined equivalent variables [s(2617),s(2646),s(2672),s(2717),s(2760),s(2797),s(2834),s(2866),s(2896),s(2924),s(2983),s(3037),s(3077)] into s(2617)
 * Joined equivalent variables [s(2616),s(2645),s(2671),s(2716),s(2759),s(2796),s(2833),s(2865),s(2895),s(2923),s(2982),s(3036),s(3076)] into s(2616)
 * Joined equivalent variables [s(2781),s(3058)] into s(2781)
 * Joined equivalent variables [s(2782),s(2818),s(2856),s(2887),s(2916),s(2975),s(3029),s(3059)] into s(2782)
 * Joined equivalent variables [s(2783),s(2819),s(3060)] into s(2783)
 * Joined equivalent variables [s(2784),s(2823),s(2855),s(2886),s(2915),s(2974),s(3028),s(3061)] into s(2784)
 * Joined equivalent variables [s(2944),s(3003)] into s(2944)
 * Joined equivalent variables [s(2610),s(2639)] into s(2610)
 * Joined equivalent variables [s(2612),s(2641)] into s(2612)
 * Joined equivalent variables [s(2705),s(2747),s(2826),s(2858),s(2962),s(3016)] into s(2705)
 * Joined equivalent variables [s(2606),s(2607)] into s(2606)
 * Joined equivalent variables [s(2946),s(3005)] into s(2946)
 * Joined equivalent variables [s(2785),s(2820),s(3062)] into s(2785)
 * Joined equivalent variables [s(2697),s(2743)] into s(2697)
 * Joined equivalent variables [s(2698),s(2744)] into s(2698)
 * Joined equivalent variables [s(2699),s(2745)] into s(2699)
 * Joined equivalent variables [s(2951),s(3010)] into s(2951)
 * Joined equivalent variables [s(2952),s(3011)] into s(2952)
 * Joined equivalent variables [s(2953),s(3012)] into s(2953)
 * Joined equivalent variables [s(2954),s(3013)] into s(2954)
 * Joined equivalent variables [s(2857),s(2888),s(2917),s(2976),s(3030),s(3071)] into s(2857)
 * Joined equivalent variables [s(2619),s(2648),s(2674),s(2719),s(2762),s(2799),s(2836),s(2868),s(2898),s(2926),s(2985),s(3039),s(3079)] into s(2619)
 * Joined equivalent variables [s(2618),s(2647),s(2673),s(2718),s(2761),s(2798),s(2835),s(2867),s(2897),s(2925),s(2984),s(3038),s(3078)] into s(2618)
 * Joined equivalent variables [s(2793),s(3070)] into s(2793)
 * Joined equivalent variables [s(2828),s(2861),s(2891),s(2919),s(2978),s(3032),s(3072)] into s(2828)
 * Joined equivalent variables [s(2787),s(2829),s(3064)] into s(2787)
 * Joined equivalent variables [s(2786),s(2824),s(2860),s(2890),s(2918),s(2977),s(3031),s(3063)] into s(2786)
 * Joined equivalent variables [s(2789),s(3066)] into s(2789)
 * Joined equivalent variables [s(2700),s(2746)] into s(2700)
 * Joined equivalent variables [s(2955),s(3014)] into s(2955)
 * Joined equivalent variables [s(2788),s(3065)] into s(2788)
 * Joined equivalent variables [s(2713),s(2756)] into s(2713)
 * Joined equivalent variables [s(2707),s(2750)] into s(2707)
 * Joined equivalent variables [s(2704),s(2749)] into s(2704)
 * Joined equivalent variables [s(2792),s(3069)] into s(2792)
 * Joined equivalent variables [s(2862),s(2892),s(2920),s(2979),s(3033),s(3073)] into s(2862)
 * Joined equivalent variables [s(2971),s(3025)] into s(2971)
 * Joined equivalent variables [s(2965),s(3019)] into s(2965)
 * Joined equivalent variables [s(2964),s(3018)] into s(2964)
 * Joined equivalent variables [s(2708),s(2751)] into s(2708)
 * Joined equivalent variables [s(2709),s(2752)] into s(2709)
 * Joined equivalent variables [s(2966),s(3020)] into s(2966)
 * Joined equivalent variables [s(2967),s(3021)] into s(2967)
 * Joined equivalent variables [s(2712),s(2755)] into s(2712)
 * Joined equivalent variables [s(2791),s(3068)] into s(2791)
 * Joined equivalent variables [s(2790),s(3067)] into s(2790)
 * Joined equivalent variables [s(2970),s(3024)] into s(2970)
 * Joined equivalent variables [s(2711),s(2754)] into s(2711)
 * Joined equivalent variables [s(2710),s(2753)] into s(2710)
 * Joined equivalent variables [s(2969),s(3023)] into s(2969)
 * Joined equivalent variables [s(2968),s(3022)] into s(2968)
 * Renamed intermediate variables: 
[ (ch([118,125]),s(1741))>>s(3087), (ch([118,125]),s(1742))>>s(3088), (ch([118,125]),s(1743))>>s(3089), (ch([118,125]),s(1744))>>s(3090), (ch([118,125]),s(1745))>>s(3091), (ch([118,125]),s(1746))>>s(3092), (ch([118,125]),s(1740))>>s(3093), (ch([118,125]),s(1747))>>s(3094), (ch([118,125]),s(1748))>>s(3095), (ch([118,125]),s(1749))>>s(3096), (ch([118,125]),s(1750))>>s(3097), (ch([118,125]),s(1751))>>s(3098), (ch([118,125]),s(1752))>>s(3099), (ch([118,125]),s(1753))>>s(3100)]
 * Renamed intermediate variables: 
[ (ch([[114,116],115,125]),s(1731))>>s(3101), (ch([[114,116],115,125]),aux(592))>>s(3102), (ch([[114,116],115,125]),aux(593))>>s(3103), (ch([[114,116],115,125]),it(114))>>s(3104), (ch([[114,116],115,125]),aux(578))>>s(3105), (ch([[114,116],115,125]),aux(571))>>s(3106), (ch([[114,116],115,125]),aux(538))>>s(3107), (ch([[114,116],115,125]),aux(537))>>s(3108), (ch([[114,116],115,125]),s(1732))>>s(3109), (ch([[114,116],115,125]),aux(539))>>s(3110), (ch([[114,116],115,125]),s(1629))>>s(3111), (ch([[114,116],115,125]),s(1628))>>s(3112), (ch([[114,116],115,125]),aux(585))>>s(3113), (ch([[114,116],115,125]),s(1654))>>s(3114), (ch([[114,116],115,125]),s(1653))>>s(3115), (ch([[114,116],115,125]),s(1716))>>s(3116), (ch([[114,116],115,125]),s(1703))>>s(3117), (ch([[114,116],115,125]),s(1704))>>s(3118), (ch([[114,116],115,125]),s(1734))>>s(3119), (ch([[114,116],115,125]),s(1736))>>s(3120), (ch([[114,116],115,125]),s(1735))>>s(3121), (ch([[114,116],115,125]),s(1720))>>s(3122), (ch([[114,116],115,125]),s(1721))>>s(3123), (ch([[114,116],115,125]),s(1722))>>s(3124), (ch([[114,116],115,125]),s(1723))>>s(3125), (ch([[114,116],115,125]),s(1724))>>s(3126), (ch([[114,116],115,125]),s(1725))>>s(3127), (ch([[114,116],115,125]),s(1726))>>s(3128), (ch([[114,116],115,125]),s(1727))>>s(3129), (ch([[114,116],115,125]),s(1636))>>s(3130), (ch([[114,116],115,125]),s(1643))>>s(3131), (ch([[114,116],115,125]),s(1644))>>s(3132), (ch([[114,116],115,125]),s(1645))>>s(3133), (ch([[114,116],115,125]),s(1646))>>s(3134), (ch([[114,116],115,125]),s(1647))>>s(3135), (ch([[114,116],115,125]),s(1648))>>s(3136), (ch([[114,116],115,125]),s(1611))>>s(3137), (ch([[114,116],115,125]),s(1618))>>s(3138), (ch([[114,116],115,125]),s(1619))>>s(3139), (ch([[114,116],115,125]),s(1620))>>s(3140), (ch([[114,116],115,125]),s(1621))>>s(3141), (ch([[114,116],115,125]),s(1622))>>s(3142), (ch([[114,116],115,125]),s(1623))>>s(3143), (ch([[114,116],115,125]),s(1612))>>s(3144), (ch([[114,116],115,125]),s(1613))>>s(3145), (ch([[114,116],115,125]),s(1614))>>s(3146), (ch([[114,116],115,125]),s(1615))>>s(3147), (ch([[114,116],115,125]),s(1616))>>s(3148), (ch([[114,116],115,125]),s(1617))>>s(3149), (ch([[114,116],115,125]),s(1637))>>s(3150), (ch([[114,116],115,125]),s(1638))>>s(3151), (ch([[114,116],115,125]),s(1639))>>s(3152), (ch([[114,116],115,125]),s(1640))>>s(3153), (ch([[114,116],115,125]),s(1641))>>s(3154), (ch([[114,116],115,125]),s(1642))>>s(3155), (ch([[114,116],115,125]),s(1718))>>s(3156), (ch([[114,116],115,125]),s(1719))>>s(3157)]
 * Renamed intermediate variables: 
[ (ch([[114,116],117,125]),s(1685))>>s(3158), (ch([[114,116],117,125]),aux(524))>>s(3159), (ch([[114,116],117,125]),aux(525))>>s(3160), (ch([[114,116],117,125]),it(114))>>s(3161), (ch([[114,116],117,125]),aux(510))>>s(3162), (ch([[114,116],117,125]),aux(503))>>s(3163), (ch([[114,116],117,125]),aux(470))>>s(3164), (ch([[114,116],117,125]),aux(469))>>s(3165), (ch([[114,116],117,125]),s(1686))>>s(3166), (ch([[114,116],117,125]),aux(471))>>s(3167), (ch([[114,116],117,125]),s(1629))>>s(3168), (ch([[114,116],117,125]),s(1628))>>s(3169), (ch([[114,116],117,125]),aux(517))>>s(3170), (ch([[114,116],117,125]),s(1654))>>s(3171), (ch([[114,116],117,125]),s(1653))>>s(3172), (ch([[114,116],117,125]),s(1675))>>s(3173), (ch([[114,116],117,125]),s(1676))>>s(3174), (ch([[114,116],117,125]),s(1678))>>s(3175), (ch([[114,116],117,125]),s(1679))>>s(3176), (ch([[114,116],117,125]),s(1680))>>s(3177), (ch([[114,116],117,125]),s(1681))>>s(3178), (ch([[114,116],117,125]),s(1636))>>s(3179), (ch([[114,116],117,125]),s(1643))>>s(3180), (ch([[114,116],117,125]),s(1644))>>s(3181), (ch([[114,116],117,125]),s(1645))>>s(3182), (ch([[114,116],117,125]),s(1646))>>s(3183), (ch([[114,116],117,125]),s(1647))>>s(3184), (ch([[114,116],117,125]),s(1648))>>s(3185), (ch([[114,116],117,125]),s(1611))>>s(3186), (ch([[114,116],117,125]),s(1618))>>s(3187), (ch([[114,116],117,125]),s(1619))>>s(3188), (ch([[114,116],117,125]),s(1620))>>s(3189), (ch([[114,116],117,125]),s(1621))>>s(3190), (ch([[114,116],117,125]),s(1622))>>s(3191), (ch([[114,116],117,125]),s(1623))>>s(3192), (ch([[114,116],117,125]),s(1612))>>s(3193), (ch([[114,116],117,125]),s(1613))>>s(3194), (ch([[114,116],117,125]),s(1614))>>s(3195), (ch([[114,116],117,125]),s(1615))>>s(3196), (ch([[114,116],117,125]),s(1616))>>s(3197), (ch([[114,116],117,125]),s(1617))>>s(3198), (ch([[114,116],117,125]),s(1637))>>s(3199), (ch([[114,116],117,125]),s(1638))>>s(3200), (ch([[114,116],117,125]),s(1639))>>s(3201), (ch([[114,116],117,125]),s(1640))>>s(3202), (ch([[114,116],117,125]),s(1641))>>s(3203), (ch([[114,116],117,125]),s(1642))>>s(3204)]
 * Renamed intermediate variables: 
[ (ch([[114,116],118,125]),aux(456))>>s(3205), (ch([[114,116],118,125]),aux(457))>>s(3206), (ch([[114,116],118,125]),it(114))>>s(3207), (ch([[114,116],118,125]),aux(438))>>s(3208), (ch([[114,116],118,125]),aux(431))>>s(3209), (ch([[114,116],118,125]),aux(398))>>s(3210), (ch([[114,116],118,125]),aux(397))>>s(3211), (ch([[114,116],118,125]),s(1765))>>s(3212), (ch([[114,116],118,125]),aux(399))>>s(3213), (ch([[114,116],118,125]),s(1629))>>s(3214), (ch([[114,116],118,125]),s(1628))>>s(3215), (ch([[114,116],118,125]),aux(445))>>s(3216), (ch([[114,116],118,125]),s(1654))>>s(3217), (ch([[114,116],118,125]),s(1653))>>s(3218), (ch([[114,116],118,125]),s(1755))>>s(3219), (ch([[114,116],118,125]),s(1756))>>s(3220), (ch([[114,116],118,125]),s(1757))>>s(3221), (ch([[114,116],118,125]),s(1758))>>s(3222), (ch([[114,116],118,125]),s(1759))>>s(3223), (ch([[114,116],118,125]),s(1760))>>s(3224), (ch([[114,116],118,125]),s(1636))>>s(3225), (ch([[114,116],118,125]),s(1643))>>s(3226), (ch([[114,116],118,125]),s(1644))>>s(3227), (ch([[114,116],118,125]),s(1645))>>s(3228), (ch([[114,116],118,125]),s(1646))>>s(3229), (ch([[114,116],118,125]),s(1647))>>s(3230), (ch([[114,116],118,125]),s(1648))>>s(3231), (ch([[114,116],118,125]),s(1611))>>s(3232), (ch([[114,116],118,125]),s(1618))>>s(3233), (ch([[114,116],118,125]),s(1619))>>s(3234), (ch([[114,116],118,125]),s(1620))>>s(3235), (ch([[114,116],118,125]),s(1621))>>s(3236), (ch([[114,116],118,125]),s(1622))>>s(3237), (ch([[114,116],118,125]),s(1623))>>s(3238), (ch([[114,116],118,125]),s(1612))>>s(3239), (ch([[114,116],118,125]),s(1613))>>s(3240), (ch([[114,116],118,125]),s(1614))>>s(3241), (ch([[114,116],118,125]),s(1615))>>s(3242), (ch([[114,116],118,125]),s(1616))>>s(3243), (ch([[114,116],118,125]),s(1617))>>s(3244), (ch([[114,116],118,125]),s(1637))>>s(3245), (ch([[114,116],118,125]),s(1638))>>s(3246), (ch([[114,116],118,125]),s(1639))>>s(3247), (ch([[114,116],118,125]),s(1640))>>s(3248), (ch([[114,116],118,125]),s(1641))>>s(3249), (ch([[114,116],118,125]),s(1642))>>s(3250), (ch([[114,116],118,125]),s(1754))>>s(3251)]
 * Renamed intermediate variables: 
[ (ch([[114,116],125]),s(1589))>>s(3252), (ch([[114,116],125]),aux(385))>>s(3253), (ch([[114,116],125]),it(114))>>s(3254), (ch([[114,116],125]),aux(288))>>s(3255), (ch([[114,116],125]),aux(287))>>s(3256), (ch([[114,116],125]),aux(289))>>s(3257), (ch([[114,116],125]),s(1629))>>s(3258), (ch([[114,116],125]),s(1628))>>s(3259), (ch([[114,116],125]),s(1611))>>s(3260), (ch([[114,116],125]),s(1618))>>s(3261), (ch([[114,116],125]),s(1620))>>s(3262), (ch([[114,116],125]),s(1612))>>s(3263)]
 * Renamed intermediate variables: 
[ (ch([[114,116],[113],115,125]),it([115,125]))>>s(3264), (ch([[114,116],[113],115,125]),s(1449))>>s(3265), (ch([[114,116],[113],115,125]),aux(366))>>s(3266), (ch([[114,116],[113],115,125]),aux(381))>>s(3267), (ch([[114,116],[113],115,125]),aux(382))>>s(3268), (ch([[114,116],[113],115,125]),aux(383))>>s(3269), (ch([[114,116],[113],115,125]),aux(384))>>s(3270), (ch([[114,116],[113],115,125]),aux(380))>>s(3271), (ch([[114,116],[113],115,125]),it(113))>>s(3272), (ch([[114,116],[113],115,125]),aux(371))>>s(3273), (ch([[114,116],[113],115,125]),aux(370))>>s(3274), (ch([[114,116],[113],115,125]),aux(369))>>s(3275), (ch([[114,116],[113],115,125]),s(1732))>>s(3276), (ch([[114,116],[113],115,125]),s(1488))>>s(3277), (ch([[114,116],[113],115,125]),aux(372))>>s(3278), (ch([[114,116],[113],115,125]),s(1490))>>s(3279), (ch([[114,116],[113],115,125]),s(1496))>>s(3280), (ch([[114,116],[113],115,125]),s(1489))>>s(3281), (ch([[114,116],[113],115,125]),s(1716))>>s(3282), (ch([[114,116],[113],115,125]),s(1703))>>s(3283), (ch([[114,116],[113],115,125]),s(1734))>>s(3284), (ch([[114,116],[113],115,125]),s(1735))>>s(3285), (ch([[114,116],[113],115,125]),s(1720))>>s(3286), (ch([[114,116],[113],115,125]),s(1722))>>s(3287), (ch([[114,116],[113],115,125]),s(1724))>>s(3288), (ch([[114,116],[113],115,125]),s(1726))>>s(3289), (ch([[114,116],[113],115,125]),s(1473))>>s(3290), (ch([[114,116],[113],115,125]),s(1474))>>s(3291), (ch([[114,116],[113],115,125]),s(1491))>>s(3292), (ch([[114,116],[113],115,125]),s(1493))>>s(3293), (ch([[114,116],[113],115,125]),s(1476))>>s(3294), (ch([[114,116],[113],115,125]),s(1479))>>s(3295), (ch([[114,116],[113],115,125]),s(1481))>>s(3296), (ch([[114,116],[113],115,125]),s(1483))>>s(3297), (ch([[114,116],[113],115,125]),it(114))>>s(3298), (ch([[114,116],[113],115,125]),aux(288))>>s(3299), (ch([[114,116],[113],115,125]),aux(287))>>s(3300), (ch([[114,116],[113],115,125]),aux(289))>>s(3301), (ch([[114,116],[113],115,125]),s(1629))>>s(3302), (ch([[114,116],[113],115,125]),s(1628))>>s(3303), (ch([[114,116],[113],115,125]),s(1611))>>s(3304), (ch([[114,116],[113],115,125]),s(1618))>>s(3305), (ch([[114,116],[113],115,125]),s(1620))>>s(3306), (ch([[114,116],[113],115,125]),s(1475))>>s(3307)]
 * Renamed intermediate variables: 
[ (ch([[114,116],[113],117,125]),it([117,125]))>>s(3308), (ch([[114,116],[113],117,125]),s(1449))>>s(3309), (ch([[114,116],[113],117,125]),aux(345))>>s(3310), (ch([[114,116],[113],117,125]),aux(360))>>s(3311), (ch([[114,116],[113],117,125]),aux(361))>>s(3312), (ch([[114,116],[113],117,125]),aux(362))>>s(3313), (ch([[114,116],[113],117,125]),aux(363))>>s(3314), (ch([[114,116],[113],117,125]),aux(359))>>s(3315), (ch([[114,116],[113],117,125]),it(113))>>s(3316), (ch([[114,116],[113],117,125]),aux(350))>>s(3317), (ch([[114,116],[113],117,125]),aux(349))>>s(3318), (ch([[114,116],[113],117,125]),aux(348))>>s(3319), (ch([[114,116],[113],117,125]),s(1686))>>s(3320), (ch([[114,116],[113],117,125]),s(1488))>>s(3321), (ch([[114,116],[113],117,125]),aux(351))>>s(3322), (ch([[114,116],[113],117,125]),s(1490))>>s(3323), (ch([[114,116],[113],117,125]),s(1496))>>s(3324), (ch([[114,116],[113],117,125]),s(1489))>>s(3325), (ch([[114,116],[113],117,125]),s(1675))>>s(3326), (ch([[114,116],[113],117,125]),s(1678))>>s(3327), (ch([[114,116],[113],117,125]),s(1680))>>s(3328), (ch([[114,116],[113],117,125]),s(1473))>>s(3329), (ch([[114,116],[113],117,125]),s(1474))>>s(3330), (ch([[114,116],[113],117,125]),s(1491))>>s(3331), (ch([[114,116],[113],117,125]),s(1493))>>s(3332), (ch([[114,116],[113],117,125]),s(1476))>>s(3333), (ch([[114,116],[113],117,125]),s(1479))>>s(3334), (ch([[114,116],[113],117,125]),s(1481))>>s(3335), (ch([[114,116],[113],117,125]),s(1483))>>s(3336), (ch([[114,116],[113],117,125]),it(114))>>s(3337), (ch([[114,116],[113],117,125]),aux(288))>>s(3338), (ch([[114,116],[113],117,125]),aux(287))>>s(3339), (ch([[114,116],[113],117,125]),aux(289))>>s(3340), (ch([[114,116],[113],117,125]),s(1629))>>s(3341), (ch([[114,116],[113],117,125]),s(1628))>>s(3342), (ch([[114,116],[113],117,125]),s(1611))>>s(3343), (ch([[114,116],[113],117,125]),s(1618))>>s(3344), (ch([[114,116],[113],117,125]),s(1620))>>s(3345), (ch([[114,116],[113],117,125]),s(1475))>>s(3346)]
 * Renamed intermediate variables: 
[ (ch([[114,116],[113],125]),aux(265))>>s(3347), (ch([[114,116],[113],125]),aux(341))>>s(3348), (ch([[114,116],[113],125]),aux(342))>>s(3349), (ch([[114,116],[113],125]),it(113))>>s(3350), (ch([[114,116],[113],125]),aux(270))>>s(3351), (ch([[114,116],[113],125]),aux(269))>>s(3352), (ch([[114,116],[113],125]),aux(268))>>s(3353), (ch([[114,116],[113],125]),s(1488))>>s(3354), (ch([[114,116],[113],125]),aux(271))>>s(3355), (ch([[114,116],[113],125]),s(1490))>>s(3356), (ch([[114,116],[113],125]),s(1496))>>s(3357), (ch([[114,116],[113],125]),s(1489))>>s(3358), (ch([[114,116],[113],125]),s(1473))>>s(3359), (ch([[114,116],[113],125]),s(1474))>>s(3360), (ch([[114,116],[113],125]),s(1491))>>s(3361), (ch([[114,116],[113],125]),s(1493))>>s(3362), (ch([[114,116],[113],125]),s(1476))>>s(3363), (ch([[114,116],[113],125]),s(1479))>>s(3364), (ch([[114,116],[113],125]),s(1481))>>s(3365), (ch([[114,116],[113],125]),s(1483))>>s(3366), (ch([[114,116],[113],125]),aux(288))>>s(3367), (ch([[114,116],[113],125]),aux(287))>>s(3368), (ch([[114,116],[113],125]),aux(289))>>s(3369), (ch([[114,116],[113],125]),s(1629))>>s(3370), (ch([[114,116],[113],125]),s(1628))>>s(3371), (ch([[114,116],[113],125]),s(1611))>>s(3372), (ch([[114,116],[113],125]),s(1618))>>s(3373), (ch([[114,116],[113],125]),s(1620))>>s(3374), (ch([[114,116],[113],125]),s(1475))>>s(3375)]
 * Joined equivalent variables [aux(705),s(3102),s(3159),s(3205),s(3252),s(3267),s(3311),s(3348)] into aux(705)
 * Joined equivalent variables [aux(706),s(3101),s(3158),s(3268),s(3312),s(3347)] into aux(706)
 * Joined equivalent variables [aux(709),s(3269),s(3313)] into aux(709)
 * Joined equivalent variables [aux(710),s(3103),s(3160),s(3206),s(3253),s(3270),s(3314),s(3349)] into aux(710)
 * Joined equivalent variables [s(3208),s(3210)] into s(3208)
 * Joined equivalent variables [s(3209),s(3211)] into s(3209)
 * Joined equivalent variables [s(3105),s(3107)] into s(3105)
 * Joined equivalent variables [s(3106),s(3108)] into s(3106)
 * Joined equivalent variables [s(3117),s(3118)] into s(3117)
 * Joined equivalent variables [s(3162),s(3164)] into s(3162)
 * Joined equivalent variables [s(3163),s(3165)] into s(3163)
 * Joined equivalent variables [s(3352),s(3367)] into s(3352)
 * Joined equivalent variables [s(3353),s(3368)] into s(3353)
 * Joined equivalent variables [s(3144),s(3145),s(3146),s(3147),s(3148),s(3149),s(3150),s(3151),s(3152),s(3153),s(3154),s(3155),s(3156),s(3157),s(3193),s(3194),s(3195),s(3196),s(3197),s(3198),s(3199),s(3200),s(3201),s(3202),s(3203),s(3204),s(3239),s(3240),s(3241),s(3242),s(3243),s(3244),s(3245),s(3246),s(3247),s(3248),s(3249),s(3250),s(3251),s(3263),s(3307),s(3346),s(3375)] into s(3144)
 * Joined equivalent variables [s(3128),s(3129)] into s(3128)
 * Joined equivalent variables [s(3126),s(3127)] into s(3126)
 * Joined equivalent variables [s(3116),s(3125)] into s(3116)
 * Joined equivalent variables [s(3137),s(3142),s(3143)] into s(3137)
 * Joined equivalent variables [s(3140),s(3141)] into s(3140)
 * Joined equivalent variables [s(3138),s(3139)] into s(3138)
 * Joined equivalent variables [s(3130),s(3135),s(3136)] into s(3130)
 * Joined equivalent variables [s(3133),s(3134)] into s(3133)
 * Joined equivalent variables [s(3131),s(3132)] into s(3131)
 * Joined equivalent variables [s(3177),s(3178)] into s(3177)
 * Joined equivalent variables [s(3175),s(3176)] into s(3175)
 * Joined equivalent variables [s(3173),s(3174)] into s(3173)
 * Joined equivalent variables [s(3186),s(3191),s(3192)] into s(3186)
 * Joined equivalent variables [s(3189),s(3190)] into s(3189)
 * Joined equivalent variables [s(3187),s(3188)] into s(3187)
 * Joined equivalent variables [s(3179),s(3184),s(3185)] into s(3179)
 * Joined equivalent variables [s(3182),s(3183)] into s(3182)
 * Joined equivalent variables [s(3180),s(3181)] into s(3180)
 * Joined equivalent variables [s(3219),s(3220),s(3223),s(3224)] into s(3219)
 * Joined equivalent variables [s(3221),s(3222)] into s(3221)
 * Joined equivalent variables [s(3232),s(3237),s(3238)] into s(3232)
 * Joined equivalent variables [s(3235),s(3236)] into s(3235)
 * Joined equivalent variables [s(3233),s(3234)] into s(3233)
 * Joined equivalent variables [s(3225),s(3230),s(3231)] into s(3225)
 * Joined equivalent variables [s(3228),s(3229)] into s(3228)
 * Joined equivalent variables [s(3226),s(3227)] into s(3226)
 * Joined equivalent variables [s(3213),s(3216)] into s(3213)
 * Joined equivalent variables [s(3214),s(3217)] into s(3214)
 * Joined equivalent variables [s(3110),s(3113)] into s(3110)
 * Joined equivalent variables [s(3111),s(3114)] into s(3111)
 * Joined equivalent variables [s(3120),s(3121)] into s(3120)
 * Joined equivalent variables [s(3167),s(3170)] into s(3167)
 * Joined equivalent variables [s(3168),s(3171)] into s(3168)
 * Joined equivalent variables [s(3355),s(3370)] into s(3355)
 * Joined equivalent variables [s(3357),s(3369)] into s(3357)
 * Joined equivalent variables [s(3109),s(3166),s(3212),s(3276),s(3320)] into s(3109)
 * Joined equivalent variables [s(3255),s(3299),s(3338)] into s(3255)
 * Joined equivalent variables [s(3106),s(3162),s(3208),s(3352)] into s(3106)
 * Joined equivalent variables [s(3256),s(3300),s(3339)] into s(3256)
 * Joined equivalent variables [s(3117),s(3163),s(3209),s(3353)] into s(3117)
 * Joined equivalent variables [s(3116),s(3173),s(3219),s(3282),s(3326)] into s(3116)
 * Joined equivalent variables [s(3128),s(3177),s(3289),s(3328)] into s(3128)
 * Joined equivalent variables [s(3104),s(3161),s(3207),s(3254),s(3298),s(3337),s(3350)] into s(3104)
 * Joined equivalent variables [s(3265),s(3309)] into s(3265)
 * Joined equivalent variables [s(3266),s(3310)] into s(3266)
 * Joined equivalent variables [s(3271),s(3315)] into s(3271)
 * Joined equivalent variables [s(3273),s(3317)] into s(3273)
 * Joined equivalent variables [s(3274),s(3318)] into s(3274)
 * Joined equivalent variables [s(3275),s(3319)] into s(3275)
 * Joined equivalent variables [s(3215),s(3218)] into s(3215)
 * Joined equivalent variables [s(3112),s(3115)] into s(3112)
 * Joined equivalent variables [s(3110),s(3168),s(3214),s(3355)] into s(3110)
 * Joined equivalent variables [s(3169),s(3172)] into s(3169)
 * Joined equivalent variables [s(3106),s(3255)] into s(3106)
 * Joined equivalent variables [s(3117),s(3256)] into s(3117)
 * Joined equivalent variables [s(3257),s(3301),s(3340)] into s(3257)
 * Joined equivalent variables [s(3258),s(3302),s(3341)] into s(3258)
 * Joined equivalent variables [s(3167),s(3213),s(3357)] into s(3167)
 * Joined equivalent variables [s(3264),s(3308)] into s(3264)
 * Joined equivalent variables [s(3126),s(3175),s(3288),s(3327)] into s(3126)
 * Joined equivalent variables [s(3130),s(3137)] into s(3130)
 * Joined equivalent variables [s(3131),s(3138)] into s(3131)
 * Joined equivalent variables [s(3122),s(3123)] into s(3122)
 * Joined equivalent variables [s(3179),s(3186)] into s(3179)
 * Joined equivalent variables [s(3180),s(3187)] into s(3180)
 * Joined equivalent variables [s(3225),s(3232)] into s(3225)
 * Joined equivalent variables [s(3226),s(3233)] into s(3226)
 * Joined equivalent variables [s(3272),s(3316)] into s(3272)
 * Joined equivalent variables [s(3359),s(3372)] into s(3359)
 * Joined equivalent variables [s(3277),s(3321)] into s(3277)
 * Joined equivalent variables [s(3278),s(3322)] into s(3278)
 * Joined equivalent variables [s(3279),s(3323)] into s(3279)
 * Joined equivalent variables [s(3280),s(3324)] into s(3280)
 * Joined equivalent variables [s(3259),s(3303),s(3342)] into s(3259)
 * Joined equivalent variables [s(3110),s(3258)] into s(3110)
 * Joined equivalent variables [s(3169),s(3215)] into s(3169)
 * Joined equivalent variables [s(3167),s(3257)] into s(3167)
 * Joined equivalent variables [s(3130),s(3180),s(3226),s(3373)] into s(3130)
 * Joined equivalent variables [s(3133),s(3140)] into s(3133)
 * Joined equivalent variables [s(3179),s(3225),s(3359)] into s(3179)
 * Joined equivalent variables [s(3182),s(3189)] into s(3182)
 * Joined equivalent variables [s(3228),s(3235)] into s(3228)
 * Joined equivalent variables [s(3260),s(3304),s(3343)] into s(3260)
 * Joined equivalent variables [s(3261),s(3305),s(3344)] into s(3261)
 * Joined equivalent variables [s(3281),s(3325)] into s(3281)
 * Joined equivalent variables [s(3169),s(3259)] into s(3169)
 * Joined equivalent variables [s(3130),s(3261)] into s(3130)
 * Joined equivalent variables [s(3179),s(3260)] into s(3179)
 * Joined equivalent variables [s(3182),s(3228)] into s(3182)
 * Joined equivalent variables [s(3262),s(3306),s(3345)] into s(3262)
 * Joined equivalent variables [s(3297),s(3336)] into s(3297)
 * Joined equivalent variables [s(3291),s(3330)] into s(3291)
 * Joined equivalent variables [s(3290),s(3329)] into s(3290)
 * Joined equivalent variables [s(3292),s(3331)] into s(3292)
 * Joined equivalent variables [s(3293),s(3332)] into s(3293)
 * Joined equivalent variables [s(3182),s(3262)] into s(3182)
 * Joined equivalent variables [s(3296),s(3335)] into s(3296)
 * Joined equivalent variables [s(3295),s(3334)] into s(3295)
 * Joined equivalent variables [s(3294),s(3333)] into s(3294)
 * Renamed intermediate variables: 
[ (ch([115,125]),s(1690))>>s(3376), (ch([115,125]),s(1691))>>s(3377), (ch([115,125]),s(1692))>>s(3378), (ch([115,125]),s(1693))>>s(3379), (ch([115,125]),s(1694))>>s(3380), (ch([115,125]),s(1695))>>s(3381), (ch([115,125]),s(1689))>>s(3382), (ch([115,125]),s(1696))>>s(3383), (ch([115,125]),s(1697))>>s(3384), (ch([115,125]),s(1698))>>s(3385), (ch([115,125]),s(1699))>>s(3386), (ch([115,125]),s(1700))>>s(3387), (ch([115,125]),s(1701))>>s(3388), (ch([115,125]),s(1702))>>s(3389), (ch([115,125]),s(1703))>>s(3390), (ch([115,125]),s(1704))>>s(3391), (ch([115,125]),s(1705))>>s(3392), (ch([115,125]),s(1706))>>s(3393), (ch([115,125]),s(1707))>>s(3394), (ch([115,125]),s(1708))>>s(3395), (ch([115,125]),s(1709))>>s(3396), (ch([115,125]),s(1710))>>s(3397), (ch([115,125]),s(1711))>>s(3398), (ch([115,125]),s(1712))>>s(3399), (ch([115,125]),s(1713))>>s(3400), (ch([115,125]),s(1714))>>s(3401), (ch([115,125]),s(1715))>>s(3402)]
 * Renamed intermediate variables: 
[ (ch([117,125]),s(1662))>>s(3403), (ch([117,125]),s(1663))>>s(3404), (ch([117,125]),s(1664))>>s(3405), (ch([117,125]),s(1665))>>s(3406), (ch([117,125]),s(1666))>>s(3407), (ch([117,125]),s(1667))>>s(3408), (ch([117,125]),s(1661))>>s(3409), (ch([117,125]),s(1668))>>s(3410), (ch([117,125]),s(1669))>>s(3411), (ch([117,125]),s(1670))>>s(3412), (ch([117,125]),s(1671))>>s(3413), (ch([117,125]),s(1672))>>s(3414), (ch([117,125]),s(1673))>>s(3415), (ch([117,125]),s(1674))>>s(3416)]
 * Joined equivalent variables [aux(711),s(3376),s(3403)] into aux(711)
 * Joined equivalent variables [aux(712),s(3377),s(3404)] into aux(712)
 * Joined equivalent variables [aux(713),s(3378),s(3405)] into aux(713)
 * Joined equivalent variables [aux(714),s(3379),s(3406)] into aux(714)
 * Joined equivalent variables [aux(715),s(3380),s(3407)] into aux(715)
 * Joined equivalent variables [aux(716),s(3381),s(3408)] into aux(716)
 * Joined equivalent variables [aux(717),s(3382),s(3409)] into aux(717)
 * Joined equivalent variables [s(3401),s(3415)] into s(3401)
 * Joined equivalent variables [s(3399),s(3413)] into s(3399)
 * Joined equivalent variables [s(3402),s(3416)] into s(3402)
 * Joined equivalent variables [s(3400),s(3414)] into s(3400)
 * Joined equivalent variables [s(3398),s(3411)] into s(3398)
 * Joined equivalent variables [s(3383),s(3410)] into s(3383)
 * Joined equivalent variables [s(3384),s(3412)] into s(3384)
 * Renamed intermediate variables: 
[ (ch([[113],115,125]),it([115,125]))>>s(3417), (ch([[113],115,125]),aux(366))>>s(3418), (ch([[113],115,125]),s(1449))>>s(3419), (ch([[113],115,125]),aux(378))>>s(3420), (ch([[113],115,125]),aux(379))>>s(3421), (ch([[113],115,125]),aux(380))>>s(3422), (ch([[113],115,125]),it(113))>>s(3423), (ch([[113],115,125]),aux(371))>>s(3424), (ch([[113],115,125]),aux(370))>>s(3425), (ch([[113],115,125]),aux(369))>>s(3426), (ch([[113],115,125]),s(1732))>>s(3427), (ch([[113],115,125]),s(1488))>>s(3428), (ch([[113],115,125]),aux(372))>>s(3429), (ch([[113],115,125]),s(1490))>>s(3430), (ch([[113],115,125]),s(1496))>>s(3431), (ch([[113],115,125]),s(1489))>>s(3432), (ch([[113],115,125]),s(1716))>>s(3433), (ch([[113],115,125]),s(1703))>>s(3434), (ch([[113],115,125]),s(1704))>>s(3435), (ch([[113],115,125]),s(1734))>>s(3436), (ch([[113],115,125]),s(1736))>>s(3437), (ch([[113],115,125]),s(1735))>>s(3438), (ch([[113],115,125]),s(1720))>>s(3439), (ch([[113],115,125]),s(1721))>>s(3440), (ch([[113],115,125]),s(1722))>>s(3441), (ch([[113],115,125]),s(1723))>>s(3442), (ch([[113],115,125]),s(1724))>>s(3443), (ch([[113],115,125]),s(1725))>>s(3444), (ch([[113],115,125]),s(1726))>>s(3445), (ch([[113],115,125]),s(1727))>>s(3446), (ch([[113],115,125]),s(1473))>>s(3447), (ch([[113],115,125]),s(1474))>>s(3448), (ch([[113],115,125]),s(1455))>>s(3449), (ch([[113],115,125]),s(1491))>>s(3450), (ch([[113],115,125]),s(1494))>>s(3451), (ch([[113],115,125]),s(1493))>>s(3452), (ch([[113],115,125]),s(1476))>>s(3453), (ch([[113],115,125]),s(1477))>>s(3454), (ch([[113],115,125]),s(1479))>>s(3455), (ch([[113],115,125]),s(1480))>>s(3456), (ch([[113],115,125]),s(1481))>>s(3457), (ch([[113],115,125]),s(1482))>>s(3458), (ch([[113],115,125]),s(1483))>>s(3459), (ch([[113],115,125]),s(1484))>>s(3460), (ch([[113],115,125]),s(1475))>>s(3461), (ch([[113],115,125]),s(1478))>>s(3462), (ch([[113],115,125]),s(1718))>>s(3463), (ch([[113],115,125]),s(1719))>>s(3464)]
 * Renamed intermediate variables: 
[ (ch([[113],117,125]),it([117,125]))>>s(3465), (ch([[113],117,125]),aux(345))>>s(3466), (ch([[113],117,125]),s(1449))>>s(3467), (ch([[113],117,125]),aux(357))>>s(3468), (ch([[113],117,125]),aux(358))>>s(3469), (ch([[113],117,125]),aux(359))>>s(3470), (ch([[113],117,125]),it(113))>>s(3471), (ch([[113],117,125]),aux(350))>>s(3472), (ch([[113],117,125]),aux(349))>>s(3473), (ch([[113],117,125]),aux(348))>>s(3474), (ch([[113],117,125]),s(1686))>>s(3475), (ch([[113],117,125]),s(1488))>>s(3476), (ch([[113],117,125]),aux(351))>>s(3477), (ch([[113],117,125]),s(1490))>>s(3478), (ch([[113],117,125]),s(1496))>>s(3479), (ch([[113],117,125]),s(1489))>>s(3480), (ch([[113],117,125]),s(1675))>>s(3481), (ch([[113],117,125]),s(1676))>>s(3482), (ch([[113],117,125]),s(1678))>>s(3483), (ch([[113],117,125]),s(1679))>>s(3484), (ch([[113],117,125]),s(1680))>>s(3485), (ch([[113],117,125]),s(1681))>>s(3486), (ch([[113],117,125]),s(1473))>>s(3487), (ch([[113],117,125]),s(1474))>>s(3488), (ch([[113],117,125]),s(1455))>>s(3489), (ch([[113],117,125]),s(1491))>>s(3490), (ch([[113],117,125]),s(1494))>>s(3491), (ch([[113],117,125]),s(1493))>>s(3492), (ch([[113],117,125]),s(1476))>>s(3493), (ch([[113],117,125]),s(1477))>>s(3494), (ch([[113],117,125]),s(1479))>>s(3495), (ch([[113],117,125]),s(1480))>>s(3496), (ch([[113],117,125]),s(1481))>>s(3497), (ch([[113],117,125]),s(1482))>>s(3498), (ch([[113],117,125]),s(1483))>>s(3499), (ch([[113],117,125]),s(1484))>>s(3500), (ch([[113],117,125]),s(1475))>>s(3501), (ch([[113],117,125]),s(1478))>>s(3502)]
 * Renamed intermediate variables: 
[ (ch([[113],125]),s(1449))>>s(3503), (ch([[113],125]),aux(265))>>s(3504), (ch([[113],125]),it(113))>>s(3505), (ch([[113],125]),aux(270))>>s(3506), (ch([[113],125]),aux(269))>>s(3507), (ch([[113],125]),aux(268))>>s(3508), (ch([[113],125]),s(1488))>>s(3509), (ch([[113],125]),aux(271))>>s(3510), (ch([[113],125]),s(1490))>>s(3511), (ch([[113],125]),s(1496))>>s(3512), (ch([[113],125]),s(1489))>>s(3513), (ch([[113],125]),s(1473))>>s(3514), (ch([[113],125]),s(1474))>>s(3515), (ch([[113],125]),s(1491))>>s(3516), (ch([[113],125]),s(1493))>>s(3517), (ch([[113],125]),s(1476))>>s(3518), (ch([[113],125]),s(1479))>>s(3519), (ch([[113],125]),s(1481))>>s(3520), (ch([[113],125]),s(1483))>>s(3521), (ch([[113],125]),s(1475))>>s(3522)]
 * Joined equivalent variables [aux(721),s(3420),s(3468),s(3503)] into aux(721)
 * Joined equivalent variables [aux(722),s(3421),s(3469),s(3504)] into aux(722)
 * Joined equivalent variables [aux(723),s(3422),s(3470)] into aux(723)
 * Joined equivalent variables [s(3426),s(3449)] into s(3426)
 * Joined equivalent variables [s(3434),s(3435)] into s(3434)
 * Joined equivalent variables [s(3474),s(3489)] into s(3474)
 * Joined equivalent variables [s(3461),s(3462),s(3463),s(3464),s(3501),s(3502),s(3522)] into s(3461)
 * Joined equivalent variables [s(3433),s(3442)] into s(3433)
 * Joined equivalent variables [s(3445),s(3446)] into s(3445)
 * Joined equivalent variables [s(3443),s(3444)] into s(3443)
 * Joined equivalent variables [s(3459),s(3460)] into s(3459)
 * Joined equivalent variables [s(3457),s(3458)] into s(3457)
 * Joined equivalent variables [s(3448),s(3456)] into s(3448)
 * Joined equivalent variables [s(3481),s(3482)] into s(3481)
 * Joined equivalent variables [s(3485),s(3486)] into s(3485)
 * Joined equivalent variables [s(3483),s(3484)] into s(3483)
 * Joined equivalent variables [s(3499),s(3500)] into s(3499)
 * Joined equivalent variables [s(3497),s(3498)] into s(3497)
 * Joined equivalent variables [s(3488),s(3496)] into s(3488)
 * Joined equivalent variables [s(3437),s(3438)] into s(3437)
 * Joined equivalent variables [s(3451),s(3452)] into s(3451)
 * Joined equivalent variables [s(3491),s(3492)] into s(3491)
 * Joined equivalent variables [s(3427),s(3475)] into s(3427)
 * Joined equivalent variables [s(3417),s(3465)] into s(3417)
 * Joined equivalent variables [s(3433),s(3481)] into s(3433)
 * Joined equivalent variables [s(3445),s(3485)] into s(3445)
 * Joined equivalent variables [s(3423),s(3471),s(3505)] into s(3423)
 * Joined equivalent variables [s(3418),s(3466)] into s(3418)
 * Joined equivalent variables [s(3419),s(3467)] into s(3419)
 * Joined equivalent variables [s(3424),s(3472)] into s(3424)
 * Joined equivalent variables [s(3425),s(3473)] into s(3425)
 * Joined equivalent variables [s(3426),s(3474)] into s(3426)
 * Joined equivalent variables [s(3428),s(3476)] into s(3428)
 * Joined equivalent variables [s(3443),s(3483)] into s(3443)
 * Joined equivalent variables [s(3439),s(3440)] into s(3439)
 * Joined equivalent variables [s(3453),s(3454)] into s(3453)
 * Joined equivalent variables [s(3493),s(3494)] into s(3493)
 * Joined equivalent variables [s(3429),s(3477)] into s(3429)
 * Joined equivalent variables [s(3430),s(3478)] into s(3430)
 * Joined equivalent variables [s(3431),s(3479)] into s(3431)
 * Joined equivalent variables [s(3432),s(3480)] into s(3432)
 * Joined equivalent variables [s(3459),s(3499)] into s(3459)
 * Joined equivalent variables [s(3448),s(3488)] into s(3448)
 * Joined equivalent variables [s(3447),s(3487)] into s(3447)
 * Joined equivalent variables [s(3450),s(3490)] into s(3450)
 * Joined equivalent variables [s(3451),s(3491)] into s(3451)
 * Joined equivalent variables [s(3457),s(3497)] into s(3457)
 * Joined equivalent variables [s(3455),s(3495)] into s(3455)
 * Joined equivalent variables [s(3453),s(3493)] into s(3453)

#### Cost of chains of echelon_helper(A,B,C,D,E,F,G,H,I,J):
* Chain [[114,116],[113],125]: 120*it(113)+16*s(1473)+404*s(1474)+1652*s(1475)+120*s(1476)+40*s(1479)+128*s(1481)+128*s(1483)+288*s(1611)+320*s(1618)+256*s(1620)+3
  Such that:aux(265) =< 2*D+2*E
aux(341) =< D+E
aux(342) =< E
it(113) =< aux(342)
aux(270) =< aux(341)+2
aux(269) =< aux(341)+1
aux(268) =< aux(341)
s(1488) =< it(113)*aux(265)
aux(271) =< it(113)*aux(269)
s(1490) =< it(113)*aux(270)
s(1496) =< it(113)*aux(268)
s(1489) =< aux(271)*2
s(1473) =< s(1496)
s(1474) =< s(1490)
s(1491) =< s(1474)*aux(341)
s(1493) =< s(1474)*aux(268)
s(1476) =< s(1493)
s(1479) =< s(1491)
s(1481) =< s(1488)
s(1481) =< aux(271)
s(1481) =< s(1489)
s(1483) =< s(1488)
s(1483) =< aux(271)
aux(288) =< aux(341)+1
aux(287) =< aux(341)
aux(289) =< it(113)*aux(287)
s(1629) =< it(113)*aux(288)
s(1628) =< aux(289)*2
s(1611) =< aux(289)
s(1618) =< s(1629)
s(1620) =< aux(289)
s(1620) =< s(1628)

Unbounded itvars
s(1475) :  sum(113),s(1463)

  with precondition: [H=1,I=0,B>=1,C>=0,D>=1,E>=3,F>=1,G>=0,J>=0,A>=2*D+3,B+2*A>=4*D+9] 

* Chain [[114,116],[113],117,125]: 40*it(113)+80*it(114)+43*it([117,125])+16*s(1473)+404*s(1474)+1652*s(1475)+120*s(1476)+40*s(1479)+128*s(1481)+128*s(1483)+288*s(1611)+320*s(1618)+256*s(1620)+176*s(1675)+128*s(1678)+128*s(1680)+0
  Such that:it([117,125]) =< 1
s(1449) =< 2*D+2*E+2
aux(345) =< 3*D+3*E
aux(360) =< D+E
aux(361) =< 2*D+2*E
aux(362) =< 3*D+3*E+2
aux(363) =< E
s(1449) =< aux(361)
aux(345) =< aux(362)
aux(359) =< aux(362)
aux(359) =< aux(363)
s(1449) =< aux(360)
aux(345) =< aux(361)
it(113) =< aux(359)
it([117,125]) =< aux(359)
aux(350) =< s(1449)+2
aux(349) =< s(1449)+1
aux(348) =< s(1449)
s(1686) =< aux(360)*2
s(1488) =< it(113)*aux(345)
aux(351) =< it(113)*aux(349)
s(1490) =< it(113)*aux(350)
s(1496) =< it(113)*aux(348)
s(1489) =< aux(351)*2
s(1675) =< aux(360)
s(1678) =< aux(361)
s(1678) =< aux(360)
s(1678) =< s(1686)
s(1680) =< aux(361)
s(1680) =< aux(360)
s(1473) =< s(1496)
s(1474) =< s(1490)
s(1491) =< s(1474)*s(1449)
s(1493) =< s(1474)*aux(348)
s(1476) =< s(1493)
s(1479) =< s(1491)
s(1481) =< s(1488)
s(1481) =< aux(351)
s(1481) =< s(1489)
s(1483) =< s(1488)
s(1483) =< aux(351)
it(114) =< aux(363)
aux(288) =< aux(360)+1
aux(287) =< aux(360)
aux(289) =< it(114)*aux(287)
s(1629) =< it(114)*aux(288)
s(1628) =< aux(289)*2
s(1611) =< aux(289)
s(1618) =< s(1629)
s(1620) =< aux(289)
s(1620) =< s(1628)

Unbounded itvars
s(1475) :  sum(113),s(1463)

  with precondition: [H=1,I=0,B>=1,C>=0,D>=1,E>=4,F>=1,G>=0,J>=0,A>=2*D+3,B+2*A>=4*D+9] 

* Chain [[114,116],[113],115,125]: 40*it(113)+80*it(114)+43*it([115,125])+16*s(1473)+404*s(1474)+1972*s(1475)+120*s(1476)+40*s(1479)+128*s(1481)+128*s(1483)+288*s(1611)+320*s(1618)+256*s(1620)+624*s(1716)+120*s(1720)+40*s(1722)+128*s(1724)+128*s(1726)+0
  Such that:it([115,125]) =< 1
s(1449) =< 2*D+2*E+2
aux(366) =< 3*D+3*E
aux(381) =< D+E
aux(382) =< 2*D+2*E
aux(383) =< 3*D+3*E+2
aux(384) =< E
s(1449) =< aux(382)
aux(366) =< aux(383)
aux(380) =< aux(383)
aux(380) =< aux(384)
s(1449) =< aux(381)
aux(366) =< aux(382)
it(113) =< aux(380)
it([115,125]) =< aux(380)
aux(371) =< s(1449)+2
aux(370) =< s(1449)+1
aux(369) =< s(1449)
s(1732) =< aux(381)*2
s(1488) =< it(113)*aux(366)
aux(372) =< it(113)*aux(370)
s(1490) =< it(113)*aux(371)
s(1496) =< it(113)*aux(369)
s(1489) =< aux(372)*2
s(1716) =< aux(381)
s(1703) =< aux(369)
s(1734) =< s(1716)*aux(369)
s(1735) =< s(1716)*s(1703)
s(1720) =< s(1735)
s(1722) =< s(1734)
s(1724) =< aux(382)
s(1724) =< aux(381)
s(1724) =< s(1732)
s(1726) =< aux(382)
s(1726) =< aux(381)
s(1473) =< s(1496)
s(1474) =< s(1490)
s(1491) =< s(1474)*s(1449)
s(1493) =< s(1474)*aux(369)
s(1476) =< s(1493)
s(1479) =< s(1491)
s(1481) =< s(1488)
s(1481) =< aux(372)
s(1481) =< s(1489)
s(1483) =< s(1488)
s(1483) =< aux(372)
it(114) =< aux(384)
aux(288) =< aux(381)+1
aux(287) =< aux(381)
aux(289) =< it(114)*aux(287)
s(1629) =< it(114)*aux(288)
s(1628) =< aux(289)*2
s(1611) =< aux(289)
s(1618) =< s(1629)
s(1620) =< aux(289)
s(1620) =< s(1628)

Unbounded itvars
s(1475) :  sum(113),s(1463)

  with precondition: [H=1,I=0,B>=1,C>=0,D>=1,E>=4,F>=1,G>=0,J>=0,A>=2*D+3,B+2*A>=4*D+9] 

* Chain [[114,116],125]: 80*it(114)+288*s(1611)+1492*s(1612)+320*s(1618)+256*s(1620)+3
  Such that:s(1589) =< D+E
aux(385) =< E
it(114) =< aux(385)
aux(288) =< s(1589)+1
aux(287) =< s(1589)
aux(289) =< it(114)*aux(287)
s(1629) =< it(114)*aux(288)
s(1628) =< aux(289)*2
s(1611) =< aux(289)
s(1618) =< s(1629)
s(1620) =< aux(289)
s(1620) =< s(1628)

Unbounded itvars
s(1612) :  sum(114),s(1534)

  with precondition: [H=1,I=0,B>=1,C>=0,D>=1,E>=2,F>=1,G>=0,J>=0,A>=2*D+3] 

* Chain [[114,116],118,125]: 123*it(114)+16*s(1611)+244*s(1612)+120*s(1613)+80*s(1614)+40*s(1615)+40*s(1616)+40*s(1617)+80*s(1618)+80*s(1619)+64*s(1620)+64*s(1621)+64*s(1622)+64*s(1623)+16*s(1636)+448*s(1637)+240*s(1638)+80*s(1639)+80*s(1640)+40*s(1641)+40*s(1642)+80*s(1643)+80*s(1644)+64*s(1645)+64*s(1646)+64*s(1647)+64*s(1648)+16*s(1754)+80*s(1755)+80*s(1756)+64*s(1757)+64*s(1758)+64*s(1759)+64*s(1760)+0
  Such that:aux(456) =< D+E
aux(457) =< E
it(114) =< aux(457)
aux(438) =< aux(456)+1
aux(431) =< aux(456)
aux(398) =< aux(456)+1
aux(397) =< aux(456)
s(1765) =< aux(456)*2
aux(399) =< it(114)*aux(397)
s(1629) =< it(114)*aux(398)
s(1628) =< aux(399)*2
aux(445) =< it(114)*aux(431)
s(1654) =< it(114)*aux(438)
s(1653) =< aux(445)*2
s(1755) =< aux(456)
s(1756) =< aux(456)
s(1757) =< aux(456)
s(1758) =< aux(456)
s(1757) =< s(1765)
s(1758) =< s(1765)
s(1759) =< aux(456)
s(1760) =< aux(456)
s(1636) =< aux(445)
s(1643) =< s(1654)
s(1644) =< s(1654)
s(1645) =< aux(445)
s(1646) =< aux(445)
s(1645) =< s(1653)
s(1646) =< s(1653)
s(1647) =< aux(445)
s(1648) =< aux(445)
s(1611) =< aux(399)
s(1618) =< s(1629)
s(1619) =< s(1629)
s(1620) =< aux(399)
s(1621) =< aux(399)
s(1620) =< s(1628)
s(1621) =< s(1628)
s(1622) =< aux(399)
s(1623) =< aux(399)

Unbounded itvars
s(1612) :  sum(114),s(1534)
s(1613) :  sum(114),s(1543)
s(1614) :  sum(114),s(1544)
s(1615) :  sum(114),s(1545)
s(1616) :  sum(114),s(1546)
s(1617) :  sum(114),s(1547)
s(1637) :  sum(116),s(1591)
s(1638) :  sum(116),s(1595)
s(1639) :  sum(116),s(1596)
s(1640) :  sum(116),s(1602)
s(1641) :  sum(116),s(1603)
s(1642) :  sum(116),s(1604)
s(1754) :  sum([118,125]),s(1747)

  with precondition: [H=1,I=0,B>=1,C>=0,D>=1,E>=3,F>=1,G>=0,J>=0,A>=2*D+3] 

* Chain [[114,116],117,125]: 123*it(114)+16*s(1611)+244*s(1612)+120*s(1613)+80*s(1614)+40*s(1615)+40*s(1616)+40*s(1617)+80*s(1618)+80*s(1619)+64*s(1620)+64*s(1621)+64*s(1622)+64*s(1623)+16*s(1636)+448*s(1637)+240*s(1638)+80*s(1639)+80*s(1640)+40*s(1641)+40*s(1642)+80*s(1643)+80*s(1644)+64*s(1645)+64*s(1646)+64*s(1647)+64*s(1648)+96*s(1675)+80*s(1676)+64*s(1678)+64*s(1679)+64*s(1680)+64*s(1681)+0
  Such that:s(1685) =< 2*D+2*E
aux(524) =< D+E
aux(525) =< E
it(114) =< aux(525)
aux(510) =< aux(524)+1
aux(503) =< aux(524)
aux(470) =< aux(524)+1
aux(469) =< aux(524)
s(1686) =< aux(524)*2
aux(471) =< it(114)*aux(469)
s(1629) =< it(114)*aux(470)
s(1628) =< aux(471)*2
aux(517) =< it(114)*aux(503)
s(1654) =< it(114)*aux(510)
s(1653) =< aux(517)*2
s(1675) =< aux(524)
s(1676) =< aux(524)
s(1678) =< s(1685)
s(1679) =< s(1685)
s(1678) =< aux(524)
s(1679) =< aux(524)
s(1678) =< s(1686)
s(1679) =< s(1686)
s(1680) =< s(1685)
s(1681) =< s(1685)
s(1680) =< aux(524)
s(1681) =< aux(524)
s(1636) =< aux(517)
s(1643) =< s(1654)
s(1644) =< s(1654)
s(1645) =< aux(517)
s(1646) =< aux(517)
s(1645) =< s(1653)
s(1646) =< s(1653)
s(1647) =< aux(517)
s(1648) =< aux(517)
s(1611) =< aux(471)
s(1618) =< s(1629)
s(1619) =< s(1629)
s(1620) =< aux(471)
s(1621) =< aux(471)
s(1620) =< s(1628)
s(1621) =< s(1628)
s(1622) =< aux(471)
s(1623) =< aux(471)

Unbounded itvars
s(1612) :  sum(114),s(1534)
s(1613) :  sum(114),s(1543)
s(1614) :  sum(114),s(1544)
s(1615) :  sum(114),s(1545)
s(1616) :  sum(114),s(1546)
s(1617) :  sum(114),s(1547)
s(1637) :  sum(116),s(1591)
s(1638) :  sum(116),s(1595)
s(1639) :  sum(116),s(1596)
s(1640) :  sum(116),s(1602)
s(1641) :  sum(116),s(1603)
s(1642) :  sum(116),s(1604)

  with precondition: [H=1,I=0,B>=1,C>=0,D>=1,E>=3,F>=1,G>=0,J>=0,A>=2*D+3] 

* Chain [[114,116],115,125]: 123*it(114)+16*s(1611)+244*s(1612)+120*s(1613)+80*s(1614)+40*s(1615)+40*s(1616)+40*s(1617)+80*s(1618)+80*s(1619)+64*s(1620)+64*s(1621)+64*s(1622)+64*s(1623)+16*s(1636)+448*s(1637)+240*s(1638)+80*s(1639)+80*s(1640)+40*s(1641)+40*s(1642)+80*s(1643)+80*s(1644)+64*s(1645)+64*s(1646)+64*s(1647)+64*s(1648)+544*s(1716)+240*s(1718)+80*s(1719)+80*s(1720)+40*s(1721)+40*s(1722)+80*s(1723)+64*s(1724)+64*s(1725)+64*s(1726)+64*s(1727)+0
  Such that:s(1731) =< 2*D+2*E
aux(592) =< D+E
aux(593) =< E
it(114) =< aux(593)
aux(578) =< aux(592)+2
aux(571) =< aux(592)+1
aux(538) =< aux(592)+2
aux(537) =< aux(592)+1
s(1732) =< aux(592)*2
aux(539) =< it(114)*aux(537)
s(1629) =< it(114)*aux(538)
s(1628) =< aux(539)*2
aux(585) =< it(114)*aux(571)
s(1654) =< it(114)*aux(578)
s(1653) =< aux(585)*2
s(1716) =< aux(592)
s(1703) =< aux(592)
s(1704) =< aux(592)
s(1734) =< s(1716)*aux(592)
s(1736) =< s(1716)*s(1703)
s(1735) =< s(1716)*s(1704)
s(1720) =< s(1736)
s(1721) =< s(1735)
s(1722) =< s(1734)
s(1723) =< aux(592)
s(1724) =< s(1731)
s(1725) =< s(1731)
s(1724) =< aux(592)
s(1725) =< aux(592)
s(1724) =< s(1732)
s(1725) =< s(1732)
s(1726) =< s(1731)
s(1727) =< s(1731)
s(1726) =< aux(592)
s(1727) =< aux(592)
s(1636) =< aux(585)
s(1643) =< s(1654)
s(1644) =< s(1654)
s(1645) =< aux(585)
s(1646) =< aux(585)
s(1645) =< s(1653)
s(1646) =< s(1653)
s(1647) =< aux(585)
s(1648) =< aux(585)
s(1611) =< aux(539)
s(1618) =< s(1629)
s(1619) =< s(1629)
s(1620) =< aux(539)
s(1621) =< aux(539)
s(1620) =< s(1628)
s(1621) =< s(1628)
s(1622) =< aux(539)
s(1623) =< aux(539)

Unbounded itvars
s(1612) :  sum(114),s(1534)
s(1613) :  sum(114),s(1543)
s(1614) :  sum(114),s(1544)
s(1615) :  sum(114),s(1545)
s(1616) :  sum(114),s(1546)
s(1617) :  sum(114),s(1547)
s(1637) :  sum(116),s(1591)
s(1638) :  sum(116),s(1595)
s(1639) :  sum(116),s(1596)
s(1640) :  sum(116),s(1602)
s(1641) :  sum(116),s(1603)
s(1642) :  sum(116),s(1604)
s(1718) :  sum([115,125]),s(1701)
s(1719) :  sum([115,125]),s(1702)

  with precondition: [H=1,I=0,B>=1,C>=0,D>=1,E>=3,F>=1,G>=0,J>=0,A>=2*D+3] 

* Chain [[113],125]: 40*it(113)+16*s(1473)+404*s(1474)+160*s(1475)+120*s(1476)+40*s(1479)+128*s(1481)+128*s(1483)+3
  Such that:s(1449) =< D+E
aux(265) =< 2*D+2*E
it(113) =< E
aux(270) =< s(1449)+2
aux(269) =< s(1449)+1
aux(268) =< s(1449)
s(1488) =< it(113)*aux(265)
aux(271) =< it(113)*aux(269)
s(1490) =< it(113)*aux(270)
s(1496) =< it(113)*aux(268)
s(1489) =< aux(271)*2
s(1473) =< s(1496)
s(1474) =< s(1490)
s(1491) =< s(1474)*s(1449)
s(1493) =< s(1474)*aux(268)
s(1476) =< s(1493)
s(1479) =< s(1491)
s(1481) =< s(1488)
s(1481) =< aux(271)
s(1481) =< s(1489)
s(1483) =< s(1488)
s(1483) =< aux(271)

Unbounded itvars
s(1475) :  sum(113),s(1463)

  with precondition: [H=1,I=0,C>=0,D>=1,E>=2,F>=1,G>=0,J>=0,2*D+2>=A,A>=D+2,B>=D+2] 

* Chain [[113],117,125]: 40*it(113)+43*it([117,125])+16*s(1473)+324*s(1474)+120*s(1475)+80*s(1476)+40*s(1477)+40*s(1478)+40*s(1479)+80*s(1480)+64*s(1481)+64*s(1482)+64*s(1483)+64*s(1484)+96*s(1675)+80*s(1676)+64*s(1678)+64*s(1679)+64*s(1680)+64*s(1681)+0
  Such that:it([117,125]) =< 1
aux(345) =< A+D+2*E
s(1449) =< A+E
aux(357) =< D+E
aux(358) =< 2*D+2*E
aux(359) =< E
s(1449) =< aux(357)
aux(345) =< aux(358)
it(113) =< aux(359)
it([117,125]) =< aux(359)
aux(350) =< s(1449)+2
aux(349) =< s(1449)+1
aux(348) =< s(1449)
s(1686) =< aux(357)*2
s(1488) =< it(113)*aux(345)
aux(351) =< it(113)*aux(349)
s(1490) =< it(113)*aux(350)
s(1496) =< it(113)*aux(348)
s(1489) =< aux(351)*2
s(1675) =< aux(357)
s(1676) =< aux(357)
s(1678) =< aux(358)
s(1679) =< aux(358)
s(1678) =< aux(357)
s(1679) =< aux(357)
s(1678) =< s(1686)
s(1679) =< s(1686)
s(1680) =< aux(358)
s(1681) =< aux(358)
s(1680) =< aux(357)
s(1681) =< aux(357)
s(1473) =< s(1496)
s(1474) =< s(1490)
s(1455) =< s(1449)
s(1491) =< s(1474)*s(1449)
s(1494) =< s(1474)*s(1455)
s(1493) =< s(1474)*aux(348)
s(1476) =< s(1494)
s(1477) =< s(1493)
s(1479) =< s(1491)
s(1480) =< s(1490)
s(1481) =< s(1488)
s(1482) =< s(1488)
s(1481) =< aux(351)
s(1482) =< aux(351)
s(1481) =< s(1489)
s(1482) =< s(1489)
s(1483) =< s(1488)
s(1484) =< s(1488)
s(1483) =< aux(351)
s(1484) =< aux(351)

Unbounded itvars
s(1475) :  sum(113),s(1463)
s(1478) :  sum(113),s(1466)

  with precondition: [H=1,I=0,C>=0,D>=1,E>=3,F>=1,G>=0,J>=0,2*D+2>=A,A>=D+2,B>=D+2] 

* Chain [[113],115,125]: 40*it(113)+43*it([115,125])+16*s(1473)+324*s(1474)+120*s(1475)+80*s(1476)+40*s(1477)+40*s(1478)+40*s(1479)+80*s(1480)+64*s(1481)+64*s(1482)+64*s(1483)+64*s(1484)+544*s(1716)+240*s(1718)+80*s(1719)+80*s(1720)+40*s(1721)+40*s(1722)+80*s(1723)+64*s(1724)+64*s(1725)+64*s(1726)+64*s(1727)+0
  Such that:it([115,125]) =< 1
aux(366) =< A+D+2*E
s(1449) =< A+E
aux(378) =< D+E
aux(379) =< 2*D+2*E
aux(380) =< E
s(1449) =< aux(378)
aux(366) =< aux(379)
it(113) =< aux(380)
it([115,125]) =< aux(380)
aux(371) =< s(1449)+2
aux(370) =< s(1449)+1
aux(369) =< s(1449)
s(1732) =< aux(378)*2
s(1488) =< it(113)*aux(366)
aux(372) =< it(113)*aux(370)
s(1490) =< it(113)*aux(371)
s(1496) =< it(113)*aux(369)
s(1489) =< aux(372)*2
s(1716) =< aux(378)
s(1703) =< aux(369)
s(1704) =< aux(369)
s(1734) =< s(1716)*aux(369)
s(1736) =< s(1716)*s(1703)
s(1735) =< s(1716)*s(1704)
s(1720) =< s(1736)
s(1721) =< s(1735)
s(1722) =< s(1734)
s(1723) =< aux(378)
s(1724) =< aux(379)
s(1725) =< aux(379)
s(1724) =< aux(378)
s(1725) =< aux(378)
s(1724) =< s(1732)
s(1725) =< s(1732)
s(1726) =< aux(379)
s(1727) =< aux(379)
s(1726) =< aux(378)
s(1727) =< aux(378)
s(1473) =< s(1496)
s(1474) =< s(1490)
s(1455) =< s(1449)
s(1491) =< s(1474)*s(1449)
s(1494) =< s(1474)*s(1455)
s(1493) =< s(1474)*aux(369)
s(1476) =< s(1494)
s(1477) =< s(1493)
s(1479) =< s(1491)
s(1480) =< s(1490)
s(1481) =< s(1488)
s(1482) =< s(1488)
s(1481) =< aux(372)
s(1482) =< aux(372)
s(1481) =< s(1489)
s(1482) =< s(1489)
s(1483) =< s(1488)
s(1484) =< s(1488)
s(1483) =< aux(372)
s(1484) =< aux(372)

Unbounded itvars
s(1475) :  sum(113),s(1463)
s(1478) :  sum(113),s(1466)
s(1718) :  sum([115,125]),s(1701)
s(1719) :  sum([115,125]),s(1702)

  with precondition: [H=1,I=0,C>=0,D>=1,E>=3,F>=1,G>=0,J>=0,2*D+2>=A,A>=D+2,B>=D+2] 

* Chain [125]: 3
  with precondition: [E=1,F=0,H=1,I=0,A>=0,B>=0,C>=0,D>=0,G>=0,J>=0] 

* Chain [124,125]: 80*s(1772)+80*s(1773)+128*s(1774)+128*s(1775)+43
  Such that:s(1768) =< 1
s(1769) =< 2
s(1770) =< B
s(1771) =< 2*B
s(1772) =< s(1769)
s(1773) =< s(1769)
s(1772) =< s(1770)
s(1774) =< s(1769)
s(1775) =< s(1769)
s(1774) =< s(1768)
s(1775) =< s(1768)
s(1774) =< s(1770)
s(1774) =< s(1771)

  with precondition: [A=2,D=0,E=2,H=1,I=0,B>=1,C>=0,F>=1,G>=0,J>=0] 

* Chain [123,125]: 528*s(1780)+240*s(1784)+80*s(1785)+80*s(1786)+128*s(1787)+128*s(1788)+43
  Such that:s(1776) =< 1
s(1777) =< 2
s(1778) =< B
s(1779) =< 2*B
s(1780) =< s(1777)
s(1781) =< s(1778)
s(1782) =< s(1780)*s(1778)
s(1783) =< s(1780)*s(1781)
s(1784) =< s(1783)
s(1785) =< s(1782)
s(1786) =< s(1777)
s(1786) =< s(1778)
s(1787) =< s(1777)
s(1788) =< s(1777)
s(1787) =< s(1776)
s(1788) =< s(1776)
s(1787) =< s(1778)
s(1787) =< s(1779)

  with precondition: [A=2,D=0,E=2,H=1,I=0,B>=1,C>=0,F>=1,G>=0,J>=0] 

* Chain [122,[113],125]: 40*it(113)+16*s(1473)+404*s(1474)+160*s(1475)+120*s(1476)+40*s(1479)+128*s(1481)+128*s(1483)+324*s(1793)+120*s(1797)+40*s(1798)+80*s(1799)+128*s(1800)+128*s(1801)+43
  Such that:s(1789) =< 1
s(1790) =< 2
s(1791) =< B
s(1792) =< 2*B
aux(265) =< 2*E
aux(594) =< E
it(113) =< aux(594)
aux(270) =< aux(594)+2
aux(269) =< aux(594)+1
aux(268) =< aux(594)
s(1488) =< it(113)*aux(265)
aux(271) =< it(113)*aux(269)
s(1490) =< it(113)*aux(270)
s(1496) =< it(113)*aux(268)
s(1489) =< aux(271)*2
s(1473) =< s(1496)
s(1474) =< s(1490)
s(1491) =< s(1474)*aux(594)
s(1493) =< s(1474)*aux(268)
s(1476) =< s(1493)
s(1479) =< s(1491)
s(1481) =< s(1488)
s(1481) =< aux(271)
s(1481) =< s(1489)
s(1483) =< s(1488)
s(1483) =< aux(271)
s(1793) =< s(1790)
s(1794) =< s(1791)
s(1795) =< s(1793)*s(1791)
s(1796) =< s(1793)*s(1794)
s(1797) =< s(1796)
s(1798) =< s(1795)
s(1799) =< s(1790)
s(1799) =< s(1791)
s(1800) =< s(1790)
s(1801) =< s(1790)
s(1800) =< s(1789)
s(1801) =< s(1789)
s(1800) =< s(1791)
s(1800) =< s(1792)

Unbounded itvars
s(1475) :  sum(113),s(1463)

  with precondition: [A=2,D=0,H=1,I=0,B>=2,C>=0,E>=3,F>=1,G>=0,J>=0] 

* Chain [122,[113],117,125]: 216*it(113)+43*it([117,125])+16*s(1473)+404*s(1474)+160*s(1475)+120*s(1476)+40*s(1479)+128*s(1481)+128*s(1483)+128*s(1678)+128*s(1680)+324*s(1793)+120*s(1797)+40*s(1798)+80*s(1799)+128*s(1800)+128*s(1801)+40
  Such that:s(1790) =< 2
s(1791) =< B
s(1792) =< 2*B
s(1449) =< E+2
aux(358) =< 2*E
aux(345) =< 2*E+2
aux(595) =< 1
aux(596) =< E
it([117,125]) =< aux(595)
s(1449) =< aux(596)
aux(345) =< aux(358)
it(113) =< aux(596)
it([117,125]) =< aux(596)
aux(350) =< s(1449)+2
aux(349) =< s(1449)+1
aux(348) =< s(1449)
s(1686) =< aux(596)*2
s(1488) =< it(113)*aux(345)
aux(351) =< it(113)*aux(349)
s(1490) =< it(113)*aux(350)
s(1496) =< it(113)*aux(348)
s(1489) =< aux(351)*2
s(1678) =< aux(358)
s(1678) =< aux(596)
s(1678) =< s(1686)
s(1680) =< aux(358)
s(1680) =< aux(596)
s(1473) =< s(1496)
s(1474) =< s(1490)
s(1491) =< s(1474)*s(1449)
s(1493) =< s(1474)*aux(348)
s(1476) =< s(1493)
s(1479) =< s(1491)
s(1481) =< s(1488)
s(1481) =< aux(351)
s(1481) =< s(1489)
s(1483) =< s(1488)
s(1483) =< aux(351)
s(1793) =< s(1790)
s(1794) =< s(1791)
s(1795) =< s(1793)*s(1791)
s(1796) =< s(1793)*s(1794)
s(1797) =< s(1796)
s(1798) =< s(1795)
s(1799) =< s(1790)
s(1799) =< s(1791)
s(1800) =< s(1790)
s(1801) =< s(1790)
s(1800) =< aux(595)
s(1801) =< aux(595)
s(1800) =< s(1791)
s(1800) =< s(1792)

Unbounded itvars
s(1475) :  sum(113),s(1463)

  with precondition: [A=2,D=0,H=1,I=0,B>=2,C>=0,E>=4,F>=1,G>=0,J>=0] 

* Chain [122,[113],115,125]: 664*it(113)+43*it([115,125])+56*s(1473)+404*s(1474)+480*s(1475)+120*s(1476)+40*s(1479)+128*s(1481)+128*s(1483)+120*s(1720)+128*s(1724)+128*s(1726)+324*s(1793)+120*s(1797)+40*s(1798)+80*s(1799)+128*s(1800)+128*s(1801)+40
  Such that:s(1790) =< 2
s(1791) =< B
s(1792) =< 2*B
s(1449) =< E+2
aux(379) =< 2*E
aux(366) =< 2*E+2
aux(597) =< 1
aux(598) =< E
it([115,125]) =< aux(597)
s(1449) =< aux(598)
aux(366) =< aux(379)
it(113) =< aux(598)
it([115,125]) =< aux(598)
aux(371) =< s(1449)+2
aux(370) =< s(1449)+1
aux(369) =< s(1449)
s(1732) =< aux(598)*2
s(1488) =< it(113)*aux(366)
aux(372) =< it(113)*aux(370)
s(1490) =< it(113)*aux(371)
s(1496) =< it(113)*aux(369)
s(1489) =< aux(372)*2
s(1703) =< aux(369)
s(1735) =< it(113)*s(1703)
s(1720) =< s(1735)
s(1473) =< s(1496)
s(1724) =< aux(379)
s(1724) =< aux(598)
s(1724) =< s(1732)
s(1726) =< aux(379)
s(1726) =< aux(598)
s(1474) =< s(1490)
s(1491) =< s(1474)*s(1449)
s(1493) =< s(1474)*aux(369)
s(1476) =< s(1493)
s(1479) =< s(1491)
s(1481) =< s(1488)
s(1481) =< aux(372)
s(1481) =< s(1489)
s(1483) =< s(1488)
s(1483) =< aux(372)
s(1793) =< s(1790)
s(1794) =< s(1791)
s(1795) =< s(1793)*s(1791)
s(1796) =< s(1793)*s(1794)
s(1797) =< s(1796)
s(1798) =< s(1795)
s(1799) =< s(1790)
s(1799) =< s(1791)
s(1800) =< s(1790)
s(1801) =< s(1790)
s(1800) =< aux(597)
s(1801) =< aux(597)
s(1800) =< s(1791)
s(1800) =< s(1792)

Unbounded itvars
s(1475) :  sum(113),s(1463)

  with precondition: [A=2,D=0,H=1,I=0,B>=2,C>=0,E>=4,F>=1,G>=0,J>=0] 

* Chain [122,125]: 324*s(1793)+120*s(1797)+40*s(1798)+80*s(1799)+128*s(1800)+128*s(1801)+43
  Such that:s(1789) =< 1
s(1790) =< 2
s(1791) =< B
s(1792) =< 2*B
s(1793) =< s(1790)
s(1794) =< s(1791)
s(1795) =< s(1793)*s(1791)
s(1796) =< s(1793)*s(1794)
s(1797) =< s(1796)
s(1798) =< s(1795)
s(1799) =< s(1790)
s(1799) =< s(1791)
s(1800) =< s(1790)
s(1801) =< s(1790)
s(1800) =< s(1789)
s(1801) =< s(1789)
s(1800) =< s(1791)
s(1800) =< s(1792)

  with precondition: [A=2,D=0,E=2,H=1,I=0,B>=2,C>=0,F>=1,G>=0,J>=0] 

* Chain [122,117,125]: 16*s(1668)+80*s(1669)+80*s(1670)+64*s(1671)+64*s(1672)+64*s(1673)+64*s(1674)+324*s(1793)+120*s(1797)+40*s(1798)+80*s(1799)+128*s(1800)+128*s(1801)+83
  Such that:s(1661) =< 4
s(1791) =< B
s(1792) =< 2*B
aux(599) =< 1
aux(600) =< 2
aux(601) =< 3
s(1668) =< aux(599)
s(1669) =< aux(601)
s(1670) =< aux(601)
s(1671) =< aux(601)
s(1672) =< aux(601)
s(1671) =< aux(600)
s(1672) =< aux(600)
s(1671) =< s(1661)
s(1672) =< s(1661)
s(1673) =< aux(601)
s(1674) =< aux(601)
s(1673) =< aux(600)
s(1674) =< aux(600)
s(1793) =< aux(600)
s(1794) =< s(1791)
s(1795) =< s(1793)*s(1791)
s(1796) =< s(1793)*s(1794)
s(1797) =< s(1796)
s(1798) =< s(1795)
s(1799) =< aux(600)
s(1799) =< s(1791)
s(1800) =< aux(600)
s(1801) =< aux(600)
s(1800) =< aux(599)
s(1801) =< aux(599)
s(1800) =< s(1791)
s(1800) =< s(1792)

  with precondition: [A=2,D=0,E=3,H=1,I=0,B>=2,C>=0,F>=1,G>=0,J>=0] 

* Chain [122,115,125]: 16*s(1696)+528*s(1697)+240*s(1701)+80*s(1702)+80*s(1708)+40*s(1709)+40*s(1710)+80*s(1711)+64*s(1712)+64*s(1713)+64*s(1714)+64*s(1715)+324*s(1793)+120*s(1797)+40*s(1798)+80*s(1799)+128*s(1800)+128*s(1801)+83
  Such that:s(1689) =< 4
s(1791) =< B
s(1792) =< 2*B
aux(602) =< 1
aux(603) =< 2
aux(604) =< 3
s(1696) =< aux(602)
s(1697) =< aux(604)
s(1703) =< aux(602)
s(1704) =< aux(602)
s(1705) =< s(1697)*aux(602)
s(1706) =< s(1697)*s(1703)
s(1707) =< s(1697)*s(1704)
s(1708) =< s(1706)
s(1709) =< s(1707)
s(1710) =< s(1705)
s(1711) =< aux(604)
s(1712) =< aux(604)
s(1713) =< aux(604)
s(1712) =< aux(603)
s(1713) =< aux(603)
s(1712) =< s(1689)
s(1713) =< s(1689)
s(1714) =< aux(604)
s(1715) =< aux(604)
s(1714) =< aux(603)
s(1715) =< aux(603)
s(1793) =< aux(603)
s(1794) =< s(1791)
s(1795) =< s(1793)*s(1791)
s(1796) =< s(1793)*s(1794)
s(1797) =< s(1796)
s(1798) =< s(1795)
s(1799) =< aux(603)
s(1799) =< s(1791)
s(1800) =< aux(603)
s(1801) =< aux(603)
s(1800) =< aux(602)
s(1801) =< aux(602)
s(1800) =< s(1791)
s(1800) =< s(1792)

Unbounded itvars
s(1701) :  eq(141,1),s(1213)
s(1702) :  eq(141,1),s(1215)

  with precondition: [A=2,D=0,E=3,H=1,I=0,B>=2,C>=0,F>=1,G>=0,J>=0] 

* Chain [121,125]: 80*s(1807)+80*s(1808)+64*s(1809)+64*s(1810)+64*s(1811)+64*s(1812)+43
  Such that:s(1802) =< 1
s(1803) =< 2
s(1804) =< A
s(1805) =< B
s(1806) =< 2*B
s(1807) =< s(1803)
s(1808) =< s(1803)
s(1807) =< s(1805)
s(1809) =< s(1804)
s(1810) =< s(1804)
s(1809) =< s(1802)
s(1810) =< s(1802)
s(1809) =< s(1805)
s(1809) =< s(1806)
s(1809) =< s(1803)
s(1810) =< s(1803)
s(1811) =< s(1804)
s(1812) =< s(1804)
s(1811) =< s(1802)
s(1812) =< s(1802)
s(1811) =< s(1805)
s(1811) =< s(1806)

  with precondition: [D=0,E=2,H=1,I=0,A>=3,B>=1,C>=0,F>=1,G>=0,J>=0] 

* Chain [120,[114,116],[113],125]: 120*it(113)+304*s(1473)+404*s(1474)+1652*s(1475)+120*s(1476)+40*s(1479)+128*s(1481)+128*s(1483)+320*s(1618)+256*s(1620)+448*s(1818)+240*s(1822)+80*s(1823)+80*s(1824)+80*s(1825)+64*s(1826)+64*s(1827)+64*s(1828)+64*s(1829)+43
  Such that:s(1813) =< 1
s(1814) =< 2
s(1815) =< A
s(1816) =< B
s(1817) =< 2*B
aux(265) =< 2*E
aux(605) =< E
it(113) =< aux(605)
aux(270) =< aux(605)+2
aux(269) =< aux(605)+1
aux(268) =< aux(605)
s(1488) =< it(113)*aux(265)
aux(271) =< it(113)*aux(269)
s(1490) =< it(113)*aux(270)
aux(289) =< it(113)*aux(268)
s(1489) =< aux(271)*2
s(1473) =< aux(289)
s(1474) =< s(1490)
s(1491) =< s(1474)*aux(605)
s(1493) =< s(1474)*aux(268)
s(1476) =< s(1493)
s(1479) =< s(1491)
s(1481) =< s(1488)
s(1481) =< aux(271)
s(1481) =< s(1489)
s(1483) =< s(1488)
s(1483) =< aux(271)
s(1628) =< aux(289)*2
s(1618) =< aux(271)
s(1620) =< aux(289)
s(1620) =< s(1628)
s(1818) =< s(1815)
s(1819) =< s(1816)
s(1820) =< s(1818)*s(1816)
s(1821) =< s(1818)*s(1819)
s(1822) =< s(1821)
s(1823) =< s(1820)
s(1824) =< s(1814)
s(1825) =< s(1814)
s(1824) =< s(1816)
s(1826) =< s(1815)
s(1827) =< s(1815)
s(1826) =< s(1813)
s(1827) =< s(1813)
s(1826) =< s(1816)
s(1826) =< s(1817)
s(1826) =< s(1814)
s(1827) =< s(1814)
s(1828) =< s(1815)
s(1829) =< s(1815)
s(1828) =< s(1813)
s(1829) =< s(1813)
s(1828) =< s(1816)
s(1828) =< s(1817)

Unbounded itvars
s(1475) :  sum(113),s(1463)

  with precondition: [D=0,H=1,I=0,A>=6,B>=1,C>=0,E>=4,F>=1,G>=0,J>=0] 

* Chain [120,[114,116],[113],117,125]: 40*it(113)+256*it(114)+43*it([117,125])+16*s(1473)+404*s(1474)+1652*s(1475)+120*s(1476)+40*s(1479)+128*s(1481)+128*s(1483)+288*s(1611)+320*s(1618)+256*s(1620)+128*s(1678)+128*s(1680)+448*s(1818)+240*s(1822)+80*s(1823)+80*s(1824)+80*s(1825)+64*s(1826)+64*s(1827)+64*s(1828)+64*s(1829)+40
  Such that:s(1814) =< 2
s(1815) =< A
s(1816) =< B
s(1817) =< 2*B
aux(361) =< 2*E
s(1449) =< 2*E+2
aux(345) =< 3*E
aux(362) =< 3*E+2
aux(606) =< 1
aux(607) =< E
it([117,125]) =< aux(606)
s(1449) =< aux(361)
aux(345) =< aux(362)
aux(359) =< aux(362)
aux(359) =< aux(607)
s(1449) =< aux(607)
aux(345) =< aux(361)
it(113) =< aux(359)
it([117,125]) =< aux(359)
aux(350) =< s(1449)+2
aux(349) =< s(1449)+1
aux(348) =< s(1449)
s(1686) =< aux(607)*2
s(1488) =< it(113)*aux(345)
aux(351) =< it(113)*aux(349)
s(1490) =< it(113)*aux(350)
s(1496) =< it(113)*aux(348)
s(1489) =< aux(351)*2
it(114) =< aux(607)
s(1678) =< aux(361)
s(1678) =< aux(607)
s(1678) =< s(1686)
s(1680) =< aux(361)
s(1680) =< aux(607)
s(1473) =< s(1496)
s(1474) =< s(1490)
s(1491) =< s(1474)*s(1449)
s(1493) =< s(1474)*aux(348)
s(1476) =< s(1493)
s(1479) =< s(1491)
s(1481) =< s(1488)
s(1481) =< aux(351)
s(1481) =< s(1489)
s(1483) =< s(1488)
s(1483) =< aux(351)
aux(288) =< aux(607)+1
aux(287) =< aux(607)
aux(289) =< it(114)*aux(287)
s(1629) =< it(114)*aux(288)
s(1628) =< aux(289)*2
s(1611) =< aux(289)
s(1618) =< s(1629)
s(1620) =< aux(289)
s(1620) =< s(1628)
s(1818) =< s(1815)
s(1819) =< s(1816)
s(1820) =< s(1818)*s(1816)
s(1821) =< s(1818)*s(1819)
s(1822) =< s(1821)
s(1823) =< s(1820)
s(1824) =< s(1814)
s(1825) =< s(1814)
s(1824) =< s(1816)
s(1826) =< s(1815)
s(1827) =< s(1815)
s(1826) =< aux(606)
s(1827) =< aux(606)
s(1826) =< s(1816)
s(1826) =< s(1817)
s(1826) =< s(1814)
s(1827) =< s(1814)
s(1828) =< s(1815)
s(1829) =< s(1815)
s(1828) =< aux(606)
s(1829) =< aux(606)
s(1828) =< s(1816)
s(1828) =< s(1817)

Unbounded itvars
s(1475) :  sum(113),s(1463)

  with precondition: [D=0,H=1,I=0,A>=6,B>=1,C>=0,E>=5,F>=1,G>=0,J>=0] 

* Chain [120,[114,116],[113],115,125]: 40*it(113)+704*it(114)+43*it([115,125])+16*s(1473)+404*s(1474)+1972*s(1475)+120*s(1476)+40*s(1479)+128*s(1481)+128*s(1483)+288*s(1611)+320*s(1618)+256*s(1620)+120*s(1720)+40*s(1722)+128*s(1724)+128*s(1726)+448*s(1818)+240*s(1822)+80*s(1823)+80*s(1824)+80*s(1825)+64*s(1826)+64*s(1827)+64*s(1828)+64*s(1829)+40
  Such that:s(1814) =< 2
s(1815) =< A
s(1816) =< B
s(1817) =< 2*B
aux(382) =< 2*E
s(1449) =< 2*E+2
aux(366) =< 3*E
aux(383) =< 3*E+2
aux(608) =< 1
aux(609) =< E
it([115,125]) =< aux(608)
s(1449) =< aux(382)
aux(366) =< aux(383)
aux(380) =< aux(383)
aux(380) =< aux(609)
s(1449) =< aux(609)
aux(366) =< aux(382)
it(113) =< aux(380)
it([115,125]) =< aux(380)
aux(371) =< s(1449)+2
aux(370) =< s(1449)+1
aux(369) =< s(1449)
s(1732) =< aux(609)*2
s(1488) =< it(113)*aux(366)
aux(372) =< it(113)*aux(370)
s(1490) =< it(113)*aux(371)
s(1496) =< it(113)*aux(369)
s(1489) =< aux(372)*2
it(114) =< aux(609)
s(1703) =< aux(369)
s(1734) =< it(114)*aux(369)
s(1735) =< it(114)*s(1703)
s(1720) =< s(1735)
s(1722) =< s(1734)
s(1724) =< aux(382)
s(1724) =< aux(609)
s(1724) =< s(1732)
s(1726) =< aux(382)
s(1726) =< aux(609)
s(1473) =< s(1496)
s(1474) =< s(1490)
s(1491) =< s(1474)*s(1449)
s(1493) =< s(1474)*aux(369)
s(1476) =< s(1493)
s(1479) =< s(1491)
s(1481) =< s(1488)
s(1481) =< aux(372)
s(1481) =< s(1489)
s(1483) =< s(1488)
s(1483) =< aux(372)
aux(288) =< aux(609)+1
aux(287) =< aux(609)
aux(289) =< it(114)*aux(287)
s(1629) =< it(114)*aux(288)
s(1628) =< aux(289)*2
s(1611) =< aux(289)
s(1618) =< s(1629)
s(1620) =< aux(289)
s(1620) =< s(1628)
s(1818) =< s(1815)
s(1819) =< s(1816)
s(1820) =< s(1818)*s(1816)
s(1821) =< s(1818)*s(1819)
s(1822) =< s(1821)
s(1823) =< s(1820)
s(1824) =< s(1814)
s(1825) =< s(1814)
s(1824) =< s(1816)
s(1826) =< s(1815)
s(1827) =< s(1815)
s(1826) =< aux(608)
s(1827) =< aux(608)
s(1826) =< s(1816)
s(1826) =< s(1817)
s(1826) =< s(1814)
s(1827) =< s(1814)
s(1828) =< s(1815)
s(1829) =< s(1815)
s(1828) =< aux(608)
s(1829) =< aux(608)
s(1828) =< s(1816)
s(1828) =< s(1817)

Unbounded itvars
s(1475) :  sum(113),s(1463)

  with precondition: [D=0,H=1,I=0,A>=6,B>=1,C>=0,E>=5,F>=1,G>=0,J>=0] 

* Chain [120,[114,116],125]: 80*it(114)+288*s(1611)+1492*s(1612)+320*s(1618)+256*s(1620)+448*s(1818)+240*s(1822)+80*s(1823)+80*s(1824)+80*s(1825)+64*s(1826)+64*s(1827)+64*s(1828)+64*s(1829)+43
  Such that:s(1813) =< 1
s(1814) =< 2
s(1815) =< A
s(1816) =< B
s(1817) =< 2*B
aux(610) =< E
it(114) =< aux(610)
aux(288) =< aux(610)+1
aux(287) =< aux(610)
aux(289) =< it(114)*aux(287)
s(1629) =< it(114)*aux(288)
s(1628) =< aux(289)*2
s(1611) =< aux(289)
s(1618) =< s(1629)
s(1620) =< aux(289)
s(1620) =< s(1628)
s(1818) =< s(1815)
s(1819) =< s(1816)
s(1820) =< s(1818)*s(1816)
s(1821) =< s(1818)*s(1819)
s(1822) =< s(1821)
s(1823) =< s(1820)
s(1824) =< s(1814)
s(1825) =< s(1814)
s(1824) =< s(1816)
s(1826) =< s(1815)
s(1827) =< s(1815)
s(1826) =< s(1813)
s(1827) =< s(1813)
s(1826) =< s(1816)
s(1826) =< s(1817)
s(1826) =< s(1814)
s(1827) =< s(1814)
s(1828) =< s(1815)
s(1829) =< s(1815)
s(1828) =< s(1813)
s(1829) =< s(1813)
s(1828) =< s(1816)
s(1828) =< s(1817)

Unbounded itvars
s(1612) :  sum(114),s(1534)

  with precondition: [D=0,H=1,I=0,A>=6,B>=1,C>=0,E>=3,F>=1,G>=0,J>=0] 

* Chain [120,[114,116],118,125]: 411*it(114)+288*s(1611)+1508*s(1612)+320*s(1618)+256*s(1620)+128*s(1757)+448*s(1818)+240*s(1822)+80*s(1823)+80*s(1824)+80*s(1825)+64*s(1826)+64*s(1827)+64*s(1828)+64*s(1829)+40
  Such that:s(1813) =< 1
s(1814) =< 2
s(1815) =< A
s(1816) =< B
s(1817) =< 2*B
aux(611) =< E
it(114) =< aux(611)
aux(398) =< aux(611)+1
aux(397) =< aux(611)
s(1765) =< aux(611)*2
aux(399) =< it(114)*aux(397)
s(1629) =< it(114)*aux(398)
s(1628) =< aux(399)*2
s(1757) =< aux(611)
s(1757) =< s(1765)
s(1611) =< aux(399)
s(1618) =< s(1629)
s(1620) =< aux(399)
s(1620) =< s(1628)
s(1818) =< s(1815)
s(1819) =< s(1816)
s(1820) =< s(1818)*s(1816)
s(1821) =< s(1818)*s(1819)
s(1822) =< s(1821)
s(1823) =< s(1820)
s(1824) =< s(1814)
s(1825) =< s(1814)
s(1824) =< s(1816)
s(1826) =< s(1815)
s(1827) =< s(1815)
s(1826) =< s(1813)
s(1827) =< s(1813)
s(1826) =< s(1816)
s(1826) =< s(1817)
s(1826) =< s(1814)
s(1827) =< s(1814)
s(1828) =< s(1815)
s(1829) =< s(1815)
s(1828) =< s(1813)
s(1829) =< s(1813)
s(1828) =< s(1816)
s(1828) =< s(1817)

Unbounded itvars
s(1612) :  sum(114),s(1534)

  with precondition: [D=0,H=1,I=0,A>=6,B>=1,C>=0,E>=4,F>=1,G>=0,J>=0] 

* Chain [120,[114,116],117,125]: 299*it(114)+288*s(1611)+1492*s(1612)+320*s(1618)+256*s(1620)+128*s(1678)+128*s(1680)+448*s(1818)+240*s(1822)+80*s(1823)+80*s(1824)+80*s(1825)+64*s(1826)+64*s(1827)+64*s(1828)+64*s(1829)+40
  Such that:s(1813) =< 1
s(1814) =< 2
s(1815) =< A
s(1816) =< B
s(1817) =< 2*B
s(1685) =< 2*E
aux(612) =< E
it(114) =< aux(612)
aux(470) =< aux(612)+1
aux(469) =< aux(612)
s(1686) =< aux(612)*2
aux(471) =< it(114)*aux(469)
s(1629) =< it(114)*aux(470)
s(1628) =< aux(471)*2
s(1678) =< s(1685)
s(1678) =< aux(612)
s(1678) =< s(1686)
s(1680) =< s(1685)
s(1680) =< aux(612)
s(1611) =< aux(471)
s(1618) =< s(1629)
s(1620) =< aux(471)
s(1620) =< s(1628)
s(1818) =< s(1815)
s(1819) =< s(1816)
s(1820) =< s(1818)*s(1816)
s(1821) =< s(1818)*s(1819)
s(1822) =< s(1821)
s(1823) =< s(1820)
s(1824) =< s(1814)
s(1825) =< s(1814)
s(1824) =< s(1816)
s(1826) =< s(1815)
s(1827) =< s(1815)
s(1826) =< s(1813)
s(1827) =< s(1813)
s(1826) =< s(1816)
s(1826) =< s(1817)
s(1826) =< s(1814)
s(1827) =< s(1814)
s(1828) =< s(1815)
s(1829) =< s(1815)
s(1828) =< s(1813)
s(1829) =< s(1813)
s(1828) =< s(1816)
s(1828) =< s(1817)

Unbounded itvars
s(1612) :  sum(114),s(1534)

  with precondition: [D=0,H=1,I=0,A>=6,B>=1,C>=0,E>=4,F>=1,G>=0,J>=0] 

* Chain [120,[114,116],115,125]: 747*it(114)+288*s(1611)+1812*s(1612)+320*s(1618)+256*s(1620)+120*s(1720)+40*s(1722)+128*s(1724)+128*s(1726)+448*s(1818)+240*s(1822)+80*s(1823)+80*s(1824)+80*s(1825)+64*s(1826)+64*s(1827)+64*s(1828)+64*s(1829)+40
  Such that:s(1813) =< 1
s(1814) =< 2
s(1815) =< A
s(1816) =< B
s(1817) =< 2*B
s(1731) =< 2*E
aux(613) =< E
it(114) =< aux(613)
aux(538) =< aux(613)+2
aux(537) =< aux(613)+1
s(1732) =< aux(613)*2
aux(539) =< it(114)*aux(537)
s(1629) =< it(114)*aux(538)
s(1628) =< aux(539)*2
s(1703) =< aux(613)
s(1734) =< it(114)*aux(613)
s(1735) =< it(114)*s(1703)
s(1720) =< s(1735)
s(1722) =< s(1734)
s(1724) =< s(1731)
s(1724) =< aux(613)
s(1724) =< s(1732)
s(1726) =< s(1731)
s(1726) =< aux(613)
s(1611) =< aux(539)
s(1618) =< s(1629)
s(1620) =< aux(539)
s(1620) =< s(1628)
s(1818) =< s(1815)
s(1819) =< s(1816)
s(1820) =< s(1818)*s(1816)
s(1821) =< s(1818)*s(1819)
s(1822) =< s(1821)
s(1823) =< s(1820)
s(1824) =< s(1814)
s(1825) =< s(1814)
s(1824) =< s(1816)
s(1826) =< s(1815)
s(1827) =< s(1815)
s(1826) =< s(1813)
s(1827) =< s(1813)
s(1826) =< s(1816)
s(1826) =< s(1817)
s(1826) =< s(1814)
s(1827) =< s(1814)
s(1828) =< s(1815)
s(1829) =< s(1815)
s(1828) =< s(1813)
s(1829) =< s(1813)
s(1828) =< s(1816)
s(1828) =< s(1817)

Unbounded itvars
s(1612) :  sum(114),s(1534)

  with precondition: [D=0,H=1,I=0,A>=6,B>=1,C>=0,E>=4,F>=1,G>=0,J>=0] 

* Chain [120,[113],125]: 40*it(113)+16*s(1473)+404*s(1474)+160*s(1475)+120*s(1476)+40*s(1479)+128*s(1481)+128*s(1483)+448*s(1818)+240*s(1822)+80*s(1823)+80*s(1824)+80*s(1825)+64*s(1826)+64*s(1827)+64*s(1828)+64*s(1829)+43
  Such that:s(1813) =< 1
s(1814) =< 2
s(1815) =< A
s(1816) =< B
s(1817) =< 2*B
aux(265) =< 2*E
aux(614) =< E
it(113) =< aux(614)
aux(270) =< aux(614)+2
aux(269) =< aux(614)+1
aux(268) =< aux(614)
s(1488) =< it(113)*aux(265)
aux(271) =< it(113)*aux(269)
s(1490) =< it(113)*aux(270)
s(1496) =< it(113)*aux(268)
s(1489) =< aux(271)*2
s(1473) =< s(1496)
s(1474) =< s(1490)
s(1491) =< s(1474)*aux(614)
s(1493) =< s(1474)*aux(268)
s(1476) =< s(1493)
s(1479) =< s(1491)
s(1481) =< s(1488)
s(1481) =< aux(271)
s(1481) =< s(1489)
s(1483) =< s(1488)
s(1483) =< aux(271)
s(1818) =< s(1815)
s(1819) =< s(1816)
s(1820) =< s(1818)*s(1816)
s(1821) =< s(1818)*s(1819)
s(1822) =< s(1821)
s(1823) =< s(1820)
s(1824) =< s(1814)
s(1825) =< s(1814)
s(1824) =< s(1816)
s(1826) =< s(1815)
s(1827) =< s(1815)
s(1826) =< s(1813)
s(1827) =< s(1813)
s(1826) =< s(1816)
s(1826) =< s(1817)
s(1826) =< s(1814)
s(1827) =< s(1814)
s(1828) =< s(1815)
s(1829) =< s(1815)
s(1828) =< s(1813)
s(1829) =< s(1813)
s(1828) =< s(1816)
s(1828) =< s(1817)

Unbounded itvars
s(1475) :  sum(113),s(1463)

  with precondition: [D=0,H=1,I=0,A>=4,B>=1,C>=0,E>=3,F>=1,G>=0,J>=0] 

* Chain [120,[113],117,125]: 216*it(113)+43*it([117,125])+16*s(1473)+404*s(1474)+160*s(1475)+120*s(1476)+40*s(1479)+128*s(1481)+128*s(1483)+128*s(1678)+128*s(1680)+448*s(1818)+240*s(1822)+80*s(1823)+80*s(1824)+80*s(1825)+64*s(1826)+64*s(1827)+64*s(1828)+64*s(1829)+40
  Such that:s(1814) =< 2
s(1815) =< A
s(1449) =< A+E
aux(345) =< A+2*E
s(1816) =< B
s(1817) =< 2*B
s(1449) =< E+3
aux(358) =< 2*E
aux(345) =< 2*E+3
aux(615) =< 1
aux(616) =< E
it([117,125]) =< aux(615)
s(1449) =< aux(616)
aux(345) =< aux(358)
it(113) =< aux(616)
it([117,125]) =< aux(616)
aux(350) =< s(1449)+2
aux(349) =< s(1449)+1
aux(348) =< s(1449)
s(1686) =< aux(616)*2
s(1488) =< it(113)*aux(345)
aux(351) =< it(113)*aux(349)
s(1490) =< it(113)*aux(350)
s(1496) =< it(113)*aux(348)
s(1489) =< aux(351)*2
s(1678) =< aux(358)
s(1678) =< aux(616)
s(1678) =< s(1686)
s(1680) =< aux(358)
s(1680) =< aux(616)
s(1473) =< s(1496)
s(1474) =< s(1490)
s(1491) =< s(1474)*s(1449)
s(1493) =< s(1474)*aux(348)
s(1476) =< s(1493)
s(1479) =< s(1491)
s(1481) =< s(1488)
s(1481) =< aux(351)
s(1481) =< s(1489)
s(1483) =< s(1488)
s(1483) =< aux(351)
s(1818) =< s(1815)
s(1819) =< s(1816)
s(1820) =< s(1818)*s(1816)
s(1821) =< s(1818)*s(1819)
s(1822) =< s(1821)
s(1823) =< s(1820)
s(1824) =< s(1814)
s(1825) =< s(1814)
s(1824) =< s(1816)
s(1826) =< s(1815)
s(1827) =< s(1815)
s(1826) =< aux(615)
s(1827) =< aux(615)
s(1826) =< s(1816)
s(1826) =< s(1817)
s(1826) =< s(1814)
s(1827) =< s(1814)
s(1828) =< s(1815)
s(1829) =< s(1815)
s(1828) =< aux(615)
s(1829) =< aux(615)
s(1828) =< s(1816)
s(1828) =< s(1817)

Unbounded itvars
s(1475) :  sum(113),s(1463)

  with precondition: [D=0,H=1,I=0,A>=4,B>=1,C>=0,E>=4,F>=1,G>=0,J>=0] 

* Chain [120,[113],115,125]: 664*it(113)+43*it([115,125])+56*s(1473)+404*s(1474)+480*s(1475)+120*s(1476)+40*s(1479)+128*s(1481)+128*s(1483)+120*s(1720)+128*s(1724)+128*s(1726)+448*s(1818)+240*s(1822)+80*s(1823)+80*s(1824)+80*s(1825)+64*s(1826)+64*s(1827)+64*s(1828)+64*s(1829)+40
  Such that:s(1814) =< 2
s(1815) =< A
s(1449) =< A+E
aux(366) =< A+2*E
s(1816) =< B
s(1817) =< 2*B
s(1449) =< E+3
aux(379) =< 2*E
aux(366) =< 2*E+3
aux(617) =< 1
aux(618) =< E
it([115,125]) =< aux(617)
s(1449) =< aux(618)
aux(366) =< aux(379)
it(113) =< aux(618)
it([115,125]) =< aux(618)
aux(371) =< s(1449)+2
aux(370) =< s(1449)+1
aux(369) =< s(1449)
s(1732) =< aux(618)*2
s(1488) =< it(113)*aux(366)
aux(372) =< it(113)*aux(370)
s(1490) =< it(113)*aux(371)
s(1496) =< it(113)*aux(369)
s(1489) =< aux(372)*2
s(1703) =< aux(369)
s(1735) =< it(113)*s(1703)
s(1720) =< s(1735)
s(1473) =< s(1496)
s(1724) =< aux(379)
s(1724) =< aux(618)
s(1724) =< s(1732)
s(1726) =< aux(379)
s(1726) =< aux(618)
s(1474) =< s(1490)
s(1491) =< s(1474)*s(1449)
s(1493) =< s(1474)*aux(369)
s(1476) =< s(1493)
s(1479) =< s(1491)
s(1481) =< s(1488)
s(1481) =< aux(372)
s(1481) =< s(1489)
s(1483) =< s(1488)
s(1483) =< aux(372)
s(1818) =< s(1815)
s(1819) =< s(1816)
s(1820) =< s(1818)*s(1816)
s(1821) =< s(1818)*s(1819)
s(1822) =< s(1821)
s(1823) =< s(1820)
s(1824) =< s(1814)
s(1825) =< s(1814)
s(1824) =< s(1816)
s(1826) =< s(1815)
s(1827) =< s(1815)
s(1826) =< aux(617)
s(1827) =< aux(617)
s(1826) =< s(1816)
s(1826) =< s(1817)
s(1826) =< s(1814)
s(1827) =< s(1814)
s(1828) =< s(1815)
s(1829) =< s(1815)
s(1828) =< aux(617)
s(1829) =< aux(617)
s(1828) =< s(1816)
s(1828) =< s(1817)

Unbounded itvars
s(1475) :  sum(113),s(1463)

  with precondition: [D=0,H=1,I=0,A>=4,B>=1,C>=0,E>=4,F>=1,G>=0,J>=0] 

* Chain [120,125]: 448*s(1818)+240*s(1822)+80*s(1823)+80*s(1824)+80*s(1825)+64*s(1826)+64*s(1827)+64*s(1828)+64*s(1829)+43
  Such that:s(1813) =< 1
s(1814) =< 2
s(1815) =< A
s(1816) =< B
s(1817) =< 2*B
s(1818) =< s(1815)
s(1819) =< s(1816)
s(1820) =< s(1818)*s(1816)
s(1821) =< s(1818)*s(1819)
s(1822) =< s(1821)
s(1823) =< s(1820)
s(1824) =< s(1814)
s(1825) =< s(1814)
s(1824) =< s(1816)
s(1826) =< s(1815)
s(1827) =< s(1815)
s(1826) =< s(1813)
s(1827) =< s(1813)
s(1826) =< s(1816)
s(1826) =< s(1817)
s(1826) =< s(1814)
s(1827) =< s(1814)
s(1828) =< s(1815)
s(1829) =< s(1815)
s(1828) =< s(1813)
s(1829) =< s(1813)
s(1828) =< s(1816)
s(1828) =< s(1817)

  with precondition: [D=0,E=2,H=1,I=0,A>=3,B>=1,C>=0,F>=1,G>=0,J>=0] 

* Chain [120,118,125]: 16*s(1747)+80*s(1748)+80*s(1749)+64*s(1750)+64*s(1751)+64*s(1752)+64*s(1753)+448*s(1818)+240*s(1822)+80*s(1823)+80*s(1824)+80*s(1825)+64*s(1826)+64*s(1827)+64*s(1828)+64*s(1829)+83
  Such that:s(1746) =< 3
s(1740) =< 4
s(1816) =< B
s(1817) =< 2*B
aux(619) =< 1
aux(620) =< 2
aux(621) =< A
s(1747) =< aux(619)
s(1748) =< s(1746)
s(1749) =< s(1746)
s(1750) =< aux(621)
s(1751) =< aux(621)
s(1750) =< aux(620)
s(1751) =< aux(620)
s(1750) =< s(1740)
s(1751) =< s(1740)
s(1752) =< aux(621)
s(1753) =< aux(621)
s(1752) =< aux(620)
s(1753) =< aux(620)
s(1818) =< aux(621)
s(1819) =< s(1816)
s(1820) =< s(1818)*s(1816)
s(1821) =< s(1818)*s(1819)
s(1822) =< s(1821)
s(1823) =< s(1820)
s(1824) =< aux(620)
s(1825) =< aux(620)
s(1824) =< s(1816)
s(1826) =< aux(621)
s(1827) =< aux(621)
s(1826) =< aux(619)
s(1827) =< aux(619)
s(1826) =< s(1816)
s(1826) =< s(1817)
s(1826) =< aux(620)
s(1827) =< aux(620)
s(1828) =< aux(621)
s(1829) =< aux(621)
s(1828) =< aux(619)
s(1829) =< aux(619)
s(1828) =< s(1816)
s(1828) =< s(1817)

  with precondition: [D=0,E=3,H=1,I=0,A>=6,B>=1,C>=0,F>=1,G>=0,J>=0] 

* Chain [120,117,125]: 16*s(1668)+80*s(1669)+80*s(1670)+64*s(1671)+64*s(1672)+64*s(1673)+64*s(1674)+448*s(1818)+240*s(1822)+80*s(1823)+80*s(1824)+80*s(1825)+64*s(1826)+64*s(1827)+64*s(1828)+64*s(1829)+83
  Such that:s(1667) =< 3
s(1816) =< B
s(1817) =< 2*B
aux(622) =< 1
aux(623) =< 2
aux(624) =< 4
aux(625) =< A
s(1662) =< aux(624)
s(1662) =< aux(625)
s(1668) =< aux(622)
s(1669) =< s(1667)
s(1670) =< s(1667)
s(1671) =< s(1662)
s(1672) =< s(1662)
s(1671) =< aux(623)
s(1672) =< aux(623)
s(1671) =< aux(624)
s(1672) =< aux(624)
s(1673) =< s(1662)
s(1674) =< s(1662)
s(1673) =< aux(623)
s(1674) =< aux(623)
s(1818) =< aux(625)
s(1819) =< s(1816)
s(1820) =< s(1818)*s(1816)
s(1821) =< s(1818)*s(1819)
s(1822) =< s(1821)
s(1823) =< s(1820)
s(1824) =< aux(623)
s(1825) =< aux(623)
s(1824) =< s(1816)
s(1826) =< aux(625)
s(1827) =< aux(625)
s(1826) =< aux(622)
s(1827) =< aux(622)
s(1826) =< s(1816)
s(1826) =< s(1817)
s(1826) =< aux(623)
s(1827) =< aux(623)
s(1828) =< aux(625)
s(1829) =< aux(625)
s(1828) =< aux(622)
s(1829) =< aux(622)
s(1828) =< s(1816)
s(1828) =< s(1817)

  with precondition: [D=0,E=3,H=1,I=0,A>=4,B>=1,C>=0,F>=1,G>=0,J>=0] 

* Chain [120,115,125]: 16*s(1696)+528*s(1697)+240*s(1701)+80*s(1702)+80*s(1708)+40*s(1709)+40*s(1710)+80*s(1711)+64*s(1712)+64*s(1713)+64*s(1714)+64*s(1715)+448*s(1818)+240*s(1822)+80*s(1823)+80*s(1824)+80*s(1825)+64*s(1826)+64*s(1827)+64*s(1828)+64*s(1829)+83
  Such that:s(1695) =< 3
s(1816) =< B
s(1817) =< 2*B
aux(626) =< 1
aux(627) =< 2
aux(628) =< 4
aux(629) =< A
s(1690) =< aux(628)
s(1690) =< aux(629)
s(1696) =< aux(626)
s(1697) =< s(1695)
s(1703) =< aux(626)
s(1704) =< aux(626)
s(1705) =< s(1697)*aux(626)
s(1706) =< s(1697)*s(1703)
s(1707) =< s(1697)*s(1704)
s(1708) =< s(1706)
s(1709) =< s(1707)
s(1710) =< s(1705)
s(1711) =< s(1695)
s(1712) =< s(1690)
s(1713) =< s(1690)
s(1712) =< aux(627)
s(1713) =< aux(627)
s(1712) =< aux(628)
s(1713) =< aux(628)
s(1714) =< s(1690)
s(1715) =< s(1690)
s(1714) =< aux(627)
s(1715) =< aux(627)
s(1818) =< aux(629)
s(1819) =< s(1816)
s(1820) =< s(1818)*s(1816)
s(1821) =< s(1818)*s(1819)
s(1822) =< s(1821)
s(1823) =< s(1820)
s(1824) =< aux(627)
s(1825) =< aux(627)
s(1824) =< s(1816)
s(1826) =< aux(629)
s(1827) =< aux(629)
s(1826) =< aux(626)
s(1827) =< aux(626)
s(1826) =< s(1816)
s(1826) =< s(1817)
s(1826) =< aux(627)
s(1827) =< aux(627)
s(1828) =< aux(629)
s(1829) =< aux(629)
s(1828) =< aux(626)
s(1829) =< aux(626)
s(1828) =< s(1816)
s(1828) =< s(1817)

Unbounded itvars
s(1701) :  eq(141,1),s(1213)
s(1702) :  eq(141,1),s(1215)

  with precondition: [D=0,E=3,H=1,I=0,A>=4,B>=1,C>=0,F>=1,G>=0,J>=0] 

* Chain [119,[114,116],[113],125]: 120*it(113)+304*s(1473)+404*s(1474)+1652*s(1475)+120*s(1476)+40*s(1479)+128*s(1481)+128*s(1483)+320*s(1618)+256*s(1620)+244*s(1835)+120*s(1839)+40*s(1840)+80*s(1841)+80*s(1842)+64*s(1843)+64*s(1844)+64*s(1845)+64*s(1846)+43
  Such that:s(1830) =< 1
s(1831) =< 2
s(1832) =< A
s(1833) =< B
s(1834) =< 2*B
aux(265) =< 2*E
aux(630) =< E
it(113) =< aux(630)
aux(270) =< aux(630)+2
aux(269) =< aux(630)+1
aux(268) =< aux(630)
s(1488) =< it(113)*aux(265)
aux(271) =< it(113)*aux(269)
s(1490) =< it(113)*aux(270)
aux(289) =< it(113)*aux(268)
s(1489) =< aux(271)*2
s(1473) =< aux(289)
s(1474) =< s(1490)
s(1491) =< s(1474)*aux(630)
s(1493) =< s(1474)*aux(268)
s(1476) =< s(1493)
s(1479) =< s(1491)
s(1481) =< s(1488)
s(1481) =< aux(271)
s(1481) =< s(1489)
s(1483) =< s(1488)
s(1483) =< aux(271)
s(1628) =< aux(289)*2
s(1618) =< aux(271)
s(1620) =< aux(289)
s(1620) =< s(1628)
s(1835) =< s(1832)
s(1836) =< s(1833)
s(1837) =< s(1835)*s(1833)
s(1838) =< s(1835)*s(1836)
s(1839) =< s(1838)
s(1840) =< s(1837)
s(1841) =< s(1831)
s(1842) =< s(1831)
s(1841) =< s(1833)
s(1843) =< s(1832)
s(1844) =< s(1832)
s(1843) =< s(1830)
s(1844) =< s(1830)
s(1843) =< s(1833)
s(1843) =< s(1834)
s(1843) =< s(1831)
s(1844) =< s(1831)
s(1845) =< s(1832)
s(1846) =< s(1832)
s(1845) =< s(1830)
s(1846) =< s(1830)
s(1845) =< s(1833)
s(1845) =< s(1834)

Unbounded itvars
s(1475) :  sum(113),s(1463)

  with precondition: [D=0,H=1,I=0,A>=4,B>=2,C>=0,E>=4,F>=1,G>=0,J>=0] 

* Chain [119,[114,116],[113],117,125]: 40*it(113)+256*it(114)+43*it([117,125])+16*s(1473)+404*s(1474)+1652*s(1475)+120*s(1476)+40*s(1479)+128*s(1481)+128*s(1483)+288*s(1611)+320*s(1618)+256*s(1620)+128*s(1678)+128*s(1680)+244*s(1835)+120*s(1839)+40*s(1840)+80*s(1841)+80*s(1842)+64*s(1843)+64*s(1844)+64*s(1845)+64*s(1846)+40
  Such that:s(1831) =< 2
s(1832) =< A
s(1833) =< B
s(1834) =< 2*B
aux(361) =< 2*E
s(1449) =< 2*E+2
aux(345) =< 3*E
aux(362) =< 3*E+2
aux(631) =< 1
aux(632) =< E
it([117,125]) =< aux(631)
s(1449) =< aux(361)
aux(345) =< aux(362)
aux(359) =< aux(362)
aux(359) =< aux(632)
s(1449) =< aux(632)
aux(345) =< aux(361)
it(113) =< aux(359)
it([117,125]) =< aux(359)
aux(350) =< s(1449)+2
aux(349) =< s(1449)+1
aux(348) =< s(1449)
s(1686) =< aux(632)*2
s(1488) =< it(113)*aux(345)
aux(351) =< it(113)*aux(349)
s(1490) =< it(113)*aux(350)
s(1496) =< it(113)*aux(348)
s(1489) =< aux(351)*2
it(114) =< aux(632)
s(1678) =< aux(361)
s(1678) =< aux(632)
s(1678) =< s(1686)
s(1680) =< aux(361)
s(1680) =< aux(632)
s(1473) =< s(1496)
s(1474) =< s(1490)
s(1491) =< s(1474)*s(1449)
s(1493) =< s(1474)*aux(348)
s(1476) =< s(1493)
s(1479) =< s(1491)
s(1481) =< s(1488)
s(1481) =< aux(351)
s(1481) =< s(1489)
s(1483) =< s(1488)
s(1483) =< aux(351)
aux(288) =< aux(632)+1
aux(287) =< aux(632)
aux(289) =< it(114)*aux(287)
s(1629) =< it(114)*aux(288)
s(1628) =< aux(289)*2
s(1611) =< aux(289)
s(1618) =< s(1629)
s(1620) =< aux(289)
s(1620) =< s(1628)
s(1835) =< s(1832)
s(1836) =< s(1833)
s(1837) =< s(1835)*s(1833)
s(1838) =< s(1835)*s(1836)
s(1839) =< s(1838)
s(1840) =< s(1837)
s(1841) =< s(1831)
s(1842) =< s(1831)
s(1841) =< s(1833)
s(1843) =< s(1832)
s(1844) =< s(1832)
s(1843) =< aux(631)
s(1844) =< aux(631)
s(1843) =< s(1833)
s(1843) =< s(1834)
s(1843) =< s(1831)
s(1844) =< s(1831)
s(1845) =< s(1832)
s(1846) =< s(1832)
s(1845) =< aux(631)
s(1846) =< aux(631)
s(1845) =< s(1833)
s(1845) =< s(1834)

Unbounded itvars
s(1475) :  sum(113),s(1463)

  with precondition: [D=0,H=1,I=0,A>=4,B>=2,C>=0,E>=5,F>=1,G>=0,J>=0] 

* Chain [119,[114,116],[113],115,125]: 40*it(113)+704*it(114)+43*it([115,125])+16*s(1473)+404*s(1474)+1972*s(1475)+120*s(1476)+40*s(1479)+128*s(1481)+128*s(1483)+288*s(1611)+320*s(1618)+256*s(1620)+120*s(1720)+40*s(1722)+128*s(1724)+128*s(1726)+244*s(1835)+120*s(1839)+40*s(1840)+80*s(1841)+80*s(1842)+64*s(1843)+64*s(1844)+64*s(1845)+64*s(1846)+40
  Such that:s(1831) =< 2
s(1832) =< A
s(1833) =< B
s(1834) =< 2*B
aux(382) =< 2*E
s(1449) =< 2*E+2
aux(366) =< 3*E
aux(383) =< 3*E+2
aux(633) =< 1
aux(634) =< E
it([115,125]) =< aux(633)
s(1449) =< aux(382)
aux(366) =< aux(383)
aux(380) =< aux(383)
aux(380) =< aux(634)
s(1449) =< aux(634)
aux(366) =< aux(382)
it(113) =< aux(380)
it([115,125]) =< aux(380)
aux(371) =< s(1449)+2
aux(370) =< s(1449)+1
aux(369) =< s(1449)
s(1732) =< aux(634)*2
s(1488) =< it(113)*aux(366)
aux(372) =< it(113)*aux(370)
s(1490) =< it(113)*aux(371)
s(1496) =< it(113)*aux(369)
s(1489) =< aux(372)*2
it(114) =< aux(634)
s(1703) =< aux(369)
s(1734) =< it(114)*aux(369)
s(1735) =< it(114)*s(1703)
s(1720) =< s(1735)
s(1722) =< s(1734)
s(1724) =< aux(382)
s(1724) =< aux(634)
s(1724) =< s(1732)
s(1726) =< aux(382)
s(1726) =< aux(634)
s(1473) =< s(1496)
s(1474) =< s(1490)
s(1491) =< s(1474)*s(1449)
s(1493) =< s(1474)*aux(369)
s(1476) =< s(1493)
s(1479) =< s(1491)
s(1481) =< s(1488)
s(1481) =< aux(372)
s(1481) =< s(1489)
s(1483) =< s(1488)
s(1483) =< aux(372)
aux(288) =< aux(634)+1
aux(287) =< aux(634)
aux(289) =< it(114)*aux(287)
s(1629) =< it(114)*aux(288)
s(1628) =< aux(289)*2
s(1611) =< aux(289)
s(1618) =< s(1629)
s(1620) =< aux(289)
s(1620) =< s(1628)
s(1835) =< s(1832)
s(1836) =< s(1833)
s(1837) =< s(1835)*s(1833)
s(1838) =< s(1835)*s(1836)
s(1839) =< s(1838)
s(1840) =< s(1837)
s(1841) =< s(1831)
s(1842) =< s(1831)
s(1841) =< s(1833)
s(1843) =< s(1832)
s(1844) =< s(1832)
s(1843) =< aux(633)
s(1844) =< aux(633)
s(1843) =< s(1833)
s(1843) =< s(1834)
s(1843) =< s(1831)
s(1844) =< s(1831)
s(1845) =< s(1832)
s(1846) =< s(1832)
s(1845) =< aux(633)
s(1846) =< aux(633)
s(1845) =< s(1833)
s(1845) =< s(1834)

Unbounded itvars
s(1475) :  sum(113),s(1463)

  with precondition: [D=0,H=1,I=0,A>=4,B>=2,C>=0,E>=5,F>=1,G>=0,J>=0] 

* Chain [119,[114,116],125]: 80*it(114)+288*s(1611)+1492*s(1612)+320*s(1618)+256*s(1620)+244*s(1835)+120*s(1839)+40*s(1840)+80*s(1841)+80*s(1842)+64*s(1843)+64*s(1844)+64*s(1845)+64*s(1846)+43
  Such that:s(1830) =< 1
s(1831) =< 2
s(1832) =< A
s(1833) =< B
s(1834) =< 2*B
aux(635) =< E
it(114) =< aux(635)
aux(288) =< aux(635)+1
aux(287) =< aux(635)
aux(289) =< it(114)*aux(287)
s(1629) =< it(114)*aux(288)
s(1628) =< aux(289)*2
s(1611) =< aux(289)
s(1618) =< s(1629)
s(1620) =< aux(289)
s(1620) =< s(1628)
s(1835) =< s(1832)
s(1836) =< s(1833)
s(1837) =< s(1835)*s(1833)
s(1838) =< s(1835)*s(1836)
s(1839) =< s(1838)
s(1840) =< s(1837)
s(1841) =< s(1831)
s(1842) =< s(1831)
s(1841) =< s(1833)
s(1843) =< s(1832)
s(1844) =< s(1832)
s(1843) =< s(1830)
s(1844) =< s(1830)
s(1843) =< s(1833)
s(1843) =< s(1834)
s(1843) =< s(1831)
s(1844) =< s(1831)
s(1845) =< s(1832)
s(1846) =< s(1832)
s(1845) =< s(1830)
s(1846) =< s(1830)
s(1845) =< s(1833)
s(1845) =< s(1834)

Unbounded itvars
s(1612) :  sum(114),s(1534)

  with precondition: [D=0,H=1,I=0,A>=4,B>=2,C>=0,E>=3,F>=1,G>=0,J>=0] 

* Chain [119,[114,116],118,125]: 411*it(114)+288*s(1611)+1508*s(1612)+320*s(1618)+256*s(1620)+128*s(1757)+244*s(1835)+120*s(1839)+40*s(1840)+80*s(1841)+80*s(1842)+64*s(1843)+64*s(1844)+64*s(1845)+64*s(1846)+40
  Such that:s(1830) =< 1
s(1831) =< 2
s(1832) =< A
s(1833) =< B
s(1834) =< 2*B
aux(636) =< E
it(114) =< aux(636)
aux(398) =< aux(636)+1
aux(397) =< aux(636)
s(1765) =< aux(636)*2
aux(399) =< it(114)*aux(397)
s(1629) =< it(114)*aux(398)
s(1628) =< aux(399)*2
s(1757) =< aux(636)
s(1757) =< s(1765)
s(1611) =< aux(399)
s(1618) =< s(1629)
s(1620) =< aux(399)
s(1620) =< s(1628)
s(1835) =< s(1832)
s(1836) =< s(1833)
s(1837) =< s(1835)*s(1833)
s(1838) =< s(1835)*s(1836)
s(1839) =< s(1838)
s(1840) =< s(1837)
s(1841) =< s(1831)
s(1842) =< s(1831)
s(1841) =< s(1833)
s(1843) =< s(1832)
s(1844) =< s(1832)
s(1843) =< s(1830)
s(1844) =< s(1830)
s(1843) =< s(1833)
s(1843) =< s(1834)
s(1843) =< s(1831)
s(1844) =< s(1831)
s(1845) =< s(1832)
s(1846) =< s(1832)
s(1845) =< s(1830)
s(1846) =< s(1830)
s(1845) =< s(1833)
s(1845) =< s(1834)

Unbounded itvars
s(1612) :  sum(114),s(1534)

  with precondition: [D=0,H=1,I=0,A>=4,B>=2,C>=0,E>=4,F>=1,G>=0,J>=0] 

* Chain [119,[114,116],117,125]: 299*it(114)+288*s(1611)+1492*s(1612)+320*s(1618)+256*s(1620)+128*s(1678)+128*s(1680)+244*s(1835)+120*s(1839)+40*s(1840)+80*s(1841)+80*s(1842)+64*s(1843)+64*s(1844)+64*s(1845)+64*s(1846)+40
  Such that:s(1830) =< 1
s(1831) =< 2
s(1832) =< A
s(1833) =< B
s(1834) =< 2*B
s(1685) =< 2*E
aux(637) =< E
it(114) =< aux(637)
aux(470) =< aux(637)+1
aux(469) =< aux(637)
s(1686) =< aux(637)*2
aux(471) =< it(114)*aux(469)
s(1629) =< it(114)*aux(470)
s(1628) =< aux(471)*2
s(1678) =< s(1685)
s(1678) =< aux(637)
s(1678) =< s(1686)
s(1680) =< s(1685)
s(1680) =< aux(637)
s(1611) =< aux(471)
s(1618) =< s(1629)
s(1620) =< aux(471)
s(1620) =< s(1628)
s(1835) =< s(1832)
s(1836) =< s(1833)
s(1837) =< s(1835)*s(1833)
s(1838) =< s(1835)*s(1836)
s(1839) =< s(1838)
s(1840) =< s(1837)
s(1841) =< s(1831)
s(1842) =< s(1831)
s(1841) =< s(1833)
s(1843) =< s(1832)
s(1844) =< s(1832)
s(1843) =< s(1830)
s(1844) =< s(1830)
s(1843) =< s(1833)
s(1843) =< s(1834)
s(1843) =< s(1831)
s(1844) =< s(1831)
s(1845) =< s(1832)
s(1846) =< s(1832)
s(1845) =< s(1830)
s(1846) =< s(1830)
s(1845) =< s(1833)
s(1845) =< s(1834)

Unbounded itvars
s(1612) :  sum(114),s(1534)

  with precondition: [D=0,H=1,I=0,A>=4,B>=2,C>=0,E>=4,F>=1,G>=0,J>=0] 

* Chain [119,[114,116],115,125]: 747*it(114)+288*s(1611)+1812*s(1612)+320*s(1618)+256*s(1620)+120*s(1720)+40*s(1722)+128*s(1724)+128*s(1726)+244*s(1835)+120*s(1839)+40*s(1840)+80*s(1841)+80*s(1842)+64*s(1843)+64*s(1844)+64*s(1845)+64*s(1846)+40
  Such that:s(1830) =< 1
s(1831) =< 2
s(1832) =< A
s(1833) =< B
s(1834) =< 2*B
s(1731) =< 2*E
aux(638) =< E
it(114) =< aux(638)
aux(538) =< aux(638)+2
aux(537) =< aux(638)+1
s(1732) =< aux(638)*2
aux(539) =< it(114)*aux(537)
s(1629) =< it(114)*aux(538)
s(1628) =< aux(539)*2
s(1703) =< aux(638)
s(1734) =< it(114)*aux(638)
s(1735) =< it(114)*s(1703)
s(1720) =< s(1735)
s(1722) =< s(1734)
s(1724) =< s(1731)
s(1724) =< aux(638)
s(1724) =< s(1732)
s(1726) =< s(1731)
s(1726) =< aux(638)
s(1611) =< aux(539)
s(1618) =< s(1629)
s(1620) =< aux(539)
s(1620) =< s(1628)
s(1835) =< s(1832)
s(1836) =< s(1833)
s(1837) =< s(1835)*s(1833)
s(1838) =< s(1835)*s(1836)
s(1839) =< s(1838)
s(1840) =< s(1837)
s(1841) =< s(1831)
s(1842) =< s(1831)
s(1841) =< s(1833)
s(1843) =< s(1832)
s(1844) =< s(1832)
s(1843) =< s(1830)
s(1844) =< s(1830)
s(1843) =< s(1833)
s(1843) =< s(1834)
s(1843) =< s(1831)
s(1844) =< s(1831)
s(1845) =< s(1832)
s(1846) =< s(1832)
s(1845) =< s(1830)
s(1846) =< s(1830)
s(1845) =< s(1833)
s(1845) =< s(1834)

Unbounded itvars
s(1612) :  sum(114),s(1534)

  with precondition: [D=0,H=1,I=0,A>=4,B>=2,C>=0,E>=4,F>=1,G>=0,J>=0] 

* Chain [119,[113],125]: 40*it(113)+16*s(1473)+404*s(1474)+160*s(1475)+120*s(1476)+40*s(1479)+128*s(1481)+128*s(1483)+244*s(1835)+120*s(1839)+40*s(1840)+80*s(1841)+80*s(1842)+64*s(1843)+64*s(1844)+64*s(1845)+64*s(1846)+43
  Such that:s(1830) =< 1
s(1831) =< 2
s(1832) =< A
s(1833) =< B
s(1834) =< 2*B
aux(265) =< 2*E
aux(639) =< E
it(113) =< aux(639)
aux(270) =< aux(639)+2
aux(269) =< aux(639)+1
aux(268) =< aux(639)
s(1488) =< it(113)*aux(265)
aux(271) =< it(113)*aux(269)
s(1490) =< it(113)*aux(270)
s(1496) =< it(113)*aux(268)
s(1489) =< aux(271)*2
s(1473) =< s(1496)
s(1474) =< s(1490)
s(1491) =< s(1474)*aux(639)
s(1493) =< s(1474)*aux(268)
s(1476) =< s(1493)
s(1479) =< s(1491)
s(1481) =< s(1488)
s(1481) =< aux(271)
s(1481) =< s(1489)
s(1483) =< s(1488)
s(1483) =< aux(271)
s(1835) =< s(1832)
s(1836) =< s(1833)
s(1837) =< s(1835)*s(1833)
s(1838) =< s(1835)*s(1836)
s(1839) =< s(1838)
s(1840) =< s(1837)
s(1841) =< s(1831)
s(1842) =< s(1831)
s(1841) =< s(1833)
s(1843) =< s(1832)
s(1844) =< s(1832)
s(1843) =< s(1830)
s(1844) =< s(1830)
s(1843) =< s(1833)
s(1843) =< s(1834)
s(1843) =< s(1831)
s(1844) =< s(1831)
s(1845) =< s(1832)
s(1846) =< s(1832)
s(1845) =< s(1830)
s(1846) =< s(1830)
s(1845) =< s(1833)
s(1845) =< s(1834)

Unbounded itvars
s(1475) :  sum(113),s(1463)

  with precondition: [D=0,H=1,I=0,A>=3,B>=2,C>=0,E>=3,F>=1,G>=0,J>=0] 

* Chain [119,[113],117,125]: 216*it(113)+43*it([117,125])+16*s(1473)+404*s(1474)+160*s(1475)+120*s(1476)+40*s(1479)+128*s(1481)+128*s(1483)+128*s(1678)+128*s(1680)+244*s(1835)+120*s(1839)+40*s(1840)+80*s(1841)+80*s(1842)+64*s(1843)+64*s(1844)+64*s(1845)+64*s(1846)+40
  Such that:s(1831) =< 2
s(1832) =< A
s(1449) =< 2*A+E
aux(345) =< 2*A+2*E
s(1833) =< B
s(1834) =< 2*B
s(1449) =< E+3
aux(358) =< 2*E
aux(345) =< 2*E+3
aux(640) =< 1
aux(641) =< E
it([117,125]) =< aux(640)
s(1449) =< aux(641)
aux(345) =< aux(358)
it(113) =< aux(641)
it([117,125]) =< aux(641)
aux(350) =< s(1449)+2
aux(349) =< s(1449)+1
aux(348) =< s(1449)
s(1686) =< aux(641)*2
s(1488) =< it(113)*aux(345)
aux(351) =< it(113)*aux(349)
s(1490) =< it(113)*aux(350)
s(1496) =< it(113)*aux(348)
s(1489) =< aux(351)*2
s(1678) =< aux(358)
s(1678) =< aux(641)
s(1678) =< s(1686)
s(1680) =< aux(358)
s(1680) =< aux(641)
s(1473) =< s(1496)
s(1474) =< s(1490)
s(1491) =< s(1474)*s(1449)
s(1493) =< s(1474)*aux(348)
s(1476) =< s(1493)
s(1479) =< s(1491)
s(1481) =< s(1488)
s(1481) =< aux(351)
s(1481) =< s(1489)
s(1483) =< s(1488)
s(1483) =< aux(351)
s(1835) =< s(1832)
s(1836) =< s(1833)
s(1837) =< s(1835)*s(1833)
s(1838) =< s(1835)*s(1836)
s(1839) =< s(1838)
s(1840) =< s(1837)
s(1841) =< s(1831)
s(1842) =< s(1831)
s(1841) =< s(1833)
s(1843) =< s(1832)
s(1844) =< s(1832)
s(1843) =< aux(640)
s(1844) =< aux(640)
s(1843) =< s(1833)
s(1843) =< s(1834)
s(1843) =< s(1831)
s(1844) =< s(1831)
s(1845) =< s(1832)
s(1846) =< s(1832)
s(1845) =< aux(640)
s(1846) =< aux(640)
s(1845) =< s(1833)
s(1845) =< s(1834)

Unbounded itvars
s(1475) :  sum(113),s(1463)

  with precondition: [D=0,H=1,I=0,A>=3,B>=2,C>=0,E>=4,F>=1,G>=0,J>=0] 

* Chain [119,[113],115,125]: 664*it(113)+43*it([115,125])+56*s(1473)+404*s(1474)+480*s(1475)+120*s(1476)+40*s(1479)+128*s(1481)+128*s(1483)+120*s(1720)+128*s(1724)+128*s(1726)+244*s(1835)+120*s(1839)+40*s(1840)+80*s(1841)+80*s(1842)+64*s(1843)+64*s(1844)+64*s(1845)+64*s(1846)+40
  Such that:s(1831) =< 2
s(1832) =< A
s(1449) =< 2*A+E
aux(366) =< 2*A+2*E
s(1833) =< B
s(1834) =< 2*B
s(1449) =< E+3
aux(379) =< 2*E
aux(366) =< 2*E+3
aux(642) =< 1
aux(643) =< E
it([115,125]) =< aux(642)
s(1449) =< aux(643)
aux(366) =< aux(379)
it(113) =< aux(643)
it([115,125]) =< aux(643)
aux(371) =< s(1449)+2
aux(370) =< s(1449)+1
aux(369) =< s(1449)
s(1732) =< aux(643)*2
s(1488) =< it(113)*aux(366)
aux(372) =< it(113)*aux(370)
s(1490) =< it(113)*aux(371)
s(1496) =< it(113)*aux(369)
s(1489) =< aux(372)*2
s(1703) =< aux(369)
s(1735) =< it(113)*s(1703)
s(1720) =< s(1735)
s(1473) =< s(1496)
s(1724) =< aux(379)
s(1724) =< aux(643)
s(1724) =< s(1732)
s(1726) =< aux(379)
s(1726) =< aux(643)
s(1474) =< s(1490)
s(1491) =< s(1474)*s(1449)
s(1493) =< s(1474)*aux(369)
s(1476) =< s(1493)
s(1479) =< s(1491)
s(1481) =< s(1488)
s(1481) =< aux(372)
s(1481) =< s(1489)
s(1483) =< s(1488)
s(1483) =< aux(372)
s(1835) =< s(1832)
s(1836) =< s(1833)
s(1837) =< s(1835)*s(1833)
s(1838) =< s(1835)*s(1836)
s(1839) =< s(1838)
s(1840) =< s(1837)
s(1841) =< s(1831)
s(1842) =< s(1831)
s(1841) =< s(1833)
s(1843) =< s(1832)
s(1844) =< s(1832)
s(1843) =< aux(642)
s(1844) =< aux(642)
s(1843) =< s(1833)
s(1843) =< s(1834)
s(1843) =< s(1831)
s(1844) =< s(1831)
s(1845) =< s(1832)
s(1846) =< s(1832)
s(1845) =< aux(642)
s(1846) =< aux(642)
s(1845) =< s(1833)
s(1845) =< s(1834)

Unbounded itvars
s(1475) :  sum(113),s(1463)

  with precondition: [D=0,H=1,I=0,A>=3,B>=2,C>=0,E>=4,F>=1,G>=0,J>=0] 

* Chain [119,125]: 244*s(1835)+120*s(1839)+40*s(1840)+80*s(1841)+80*s(1842)+64*s(1843)+64*s(1844)+64*s(1845)+64*s(1846)+43
  Such that:s(1830) =< 1
s(1831) =< 2
s(1832) =< A
s(1833) =< B
s(1834) =< 2*B
s(1835) =< s(1832)
s(1836) =< s(1833)
s(1837) =< s(1835)*s(1833)
s(1838) =< s(1835)*s(1836)
s(1839) =< s(1838)
s(1840) =< s(1837)
s(1841) =< s(1831)
s(1842) =< s(1831)
s(1841) =< s(1833)
s(1843) =< s(1832)
s(1844) =< s(1832)
s(1843) =< s(1830)
s(1844) =< s(1830)
s(1843) =< s(1833)
s(1843) =< s(1834)
s(1843) =< s(1831)
s(1844) =< s(1831)
s(1845) =< s(1832)
s(1846) =< s(1832)
s(1845) =< s(1830)
s(1846) =< s(1830)
s(1845) =< s(1833)
s(1845) =< s(1834)

  with precondition: [D=0,E=2,H=1,I=0,A>=3,B>=2,C>=0,F>=1,G>=0,J>=0] 

* Chain [119,118,125]: 16*s(1747)+80*s(1748)+80*s(1749)+64*s(1750)+64*s(1751)+64*s(1752)+64*s(1753)+244*s(1835)+120*s(1839)+40*s(1840)+80*s(1841)+80*s(1842)+64*s(1843)+64*s(1844)+64*s(1845)+64*s(1846)+83
  Such that:s(1746) =< 3
s(1740) =< 4
s(1832) =< A
s(1741) =< 2*A
s(1833) =< B
s(1834) =< 2*B
aux(644) =< 1
aux(645) =< 2
s(1747) =< aux(644)
s(1748) =< s(1746)
s(1749) =< s(1746)
s(1750) =< s(1741)
s(1751) =< s(1741)
s(1750) =< aux(645)
s(1751) =< aux(645)
s(1750) =< s(1740)
s(1751) =< s(1740)
s(1752) =< s(1741)
s(1753) =< s(1741)
s(1752) =< aux(645)
s(1753) =< aux(645)
s(1835) =< s(1832)
s(1836) =< s(1833)
s(1837) =< s(1835)*s(1833)
s(1838) =< s(1835)*s(1836)
s(1839) =< s(1838)
s(1840) =< s(1837)
s(1841) =< aux(645)
s(1842) =< aux(645)
s(1841) =< s(1833)
s(1843) =< s(1832)
s(1844) =< s(1832)
s(1843) =< aux(644)
s(1844) =< aux(644)
s(1843) =< s(1833)
s(1843) =< s(1834)
s(1843) =< aux(645)
s(1844) =< aux(645)
s(1845) =< s(1832)
s(1846) =< s(1832)
s(1845) =< aux(644)
s(1846) =< aux(644)
s(1845) =< s(1833)
s(1845) =< s(1834)

  with precondition: [D=0,E=3,H=1,I=0,A>=4,B>=2,C>=0,F>=1,G>=0,J>=0] 

* Chain [119,117,125]: 16*s(1668)+80*s(1669)+80*s(1670)+64*s(1671)+64*s(1672)+64*s(1673)+64*s(1674)+244*s(1835)+120*s(1839)+40*s(1840)+80*s(1841)+80*s(1842)+64*s(1843)+64*s(1844)+64*s(1845)+64*s(1846)+83
  Such that:s(1667) =< 3
s(1832) =< A
s(1662) =< 2*A
s(1833) =< B
s(1834) =< 2*B
aux(646) =< 1
aux(647) =< 2
aux(648) =< 4
s(1662) =< aux(648)
s(1668) =< aux(646)
s(1669) =< s(1667)
s(1670) =< s(1667)
s(1671) =< s(1662)
s(1672) =< s(1662)
s(1671) =< aux(647)
s(1672) =< aux(647)
s(1671) =< aux(648)
s(1672) =< aux(648)
s(1673) =< s(1662)
s(1674) =< s(1662)
s(1673) =< aux(647)
s(1674) =< aux(647)
s(1835) =< s(1832)
s(1836) =< s(1833)
s(1837) =< s(1835)*s(1833)
s(1838) =< s(1835)*s(1836)
s(1839) =< s(1838)
s(1840) =< s(1837)
s(1841) =< aux(647)
s(1842) =< aux(647)
s(1841) =< s(1833)
s(1843) =< s(1832)
s(1844) =< s(1832)
s(1843) =< aux(646)
s(1844) =< aux(646)
s(1843) =< s(1833)
s(1843) =< s(1834)
s(1843) =< aux(647)
s(1844) =< aux(647)
s(1845) =< s(1832)
s(1846) =< s(1832)
s(1845) =< aux(646)
s(1846) =< aux(646)
s(1845) =< s(1833)
s(1845) =< s(1834)

  with precondition: [D=0,E=3,H=1,I=0,A>=3,B>=2,C>=0,F>=1,G>=0,J>=0] 

* Chain [119,115,125]: 16*s(1696)+528*s(1697)+240*s(1701)+80*s(1702)+80*s(1708)+40*s(1709)+40*s(1710)+80*s(1711)+64*s(1712)+64*s(1713)+64*s(1714)+64*s(1715)+244*s(1835)+120*s(1839)+40*s(1840)+80*s(1841)+80*s(1842)+64*s(1843)+64*s(1844)+64*s(1845)+64*s(1846)+83
  Such that:s(1695) =< 3
s(1832) =< A
s(1690) =< 2*A
s(1833) =< B
s(1834) =< 2*B
aux(649) =< 1
aux(650) =< 2
aux(651) =< 4
s(1690) =< aux(651)
s(1696) =< aux(649)
s(1697) =< s(1695)
s(1703) =< aux(649)
s(1704) =< aux(649)
s(1705) =< s(1697)*aux(649)
s(1706) =< s(1697)*s(1703)
s(1707) =< s(1697)*s(1704)
s(1708) =< s(1706)
s(1709) =< s(1707)
s(1710) =< s(1705)
s(1711) =< s(1695)
s(1712) =< s(1690)
s(1713) =< s(1690)
s(1712) =< aux(650)
s(1713) =< aux(650)
s(1712) =< aux(651)
s(1713) =< aux(651)
s(1714) =< s(1690)
s(1715) =< s(1690)
s(1714) =< aux(650)
s(1715) =< aux(650)
s(1835) =< s(1832)
s(1836) =< s(1833)
s(1837) =< s(1835)*s(1833)
s(1838) =< s(1835)*s(1836)
s(1839) =< s(1838)
s(1840) =< s(1837)
s(1841) =< aux(650)
s(1842) =< aux(650)
s(1841) =< s(1833)
s(1843) =< s(1832)
s(1844) =< s(1832)
s(1843) =< aux(649)
s(1844) =< aux(649)
s(1843) =< s(1833)
s(1843) =< s(1834)
s(1843) =< aux(650)
s(1844) =< aux(650)
s(1845) =< s(1832)
s(1846) =< s(1832)
s(1845) =< aux(649)
s(1846) =< aux(649)
s(1845) =< s(1833)
s(1845) =< s(1834)

Unbounded itvars
s(1701) :  eq(141,1),s(1213)
s(1702) :  eq(141,1),s(1215)

  with precondition: [D=0,E=3,H=1,I=0,A>=3,B>=2,C>=0,F>=1,G>=0,J>=0] 

* Chain [118,125]: 16*s(1747)+80*s(1748)+80*s(1749)+64*s(1750)+64*s(1751)+64*s(1752)+64*s(1753)+43
  Such that:s(1741) =< A
s(1742) =< B
s(1743) =< 2*B
s(1744) =< D
s(1745) =< D+1
s(1746) =< D+2
s(1740) =< 2*D+2
s(1747) =< s(1744)
s(1748) =< s(1746)
s(1749) =< s(1746)
s(1748) =< s(1742)
s(1750) =< s(1741)
s(1751) =< s(1741)
s(1750) =< s(1745)
s(1751) =< s(1745)
s(1750) =< s(1742)
s(1750) =< s(1743)
s(1750) =< s(1740)
s(1751) =< s(1740)
s(1752) =< s(1741)
s(1753) =< s(1741)
s(1752) =< s(1745)
s(1753) =< s(1745)
s(1752) =< s(1742)
s(1752) =< s(1743)

  with precondition: [E=2,H=1,I=0,B>=1,C>=0,D>=1,F>=1,G>=0,J>=0,A>=2*D+3] 

* Chain [117,125]: 16*s(1668)+80*s(1669)+80*s(1670)+64*s(1671)+64*s(1672)+64*s(1673)+64*s(1674)+43
  Such that:s(1662) =< A
s(1663) =< B
s(1664) =< 2*B
s(1665) =< D
s(1666) =< D+1
s(1667) =< D+2
s(1661) =< 2*D+2
s(1668) =< s(1665)
s(1669) =< s(1667)
s(1670) =< s(1667)
s(1669) =< s(1663)
s(1671) =< s(1662)
s(1672) =< s(1662)
s(1671) =< s(1666)
s(1672) =< s(1666)
s(1671) =< s(1663)
s(1671) =< s(1664)
s(1671) =< s(1661)
s(1672) =< s(1661)
s(1673) =< s(1662)
s(1674) =< s(1662)
s(1673) =< s(1666)
s(1674) =< s(1666)
s(1673) =< s(1663)
s(1673) =< s(1664)

  with precondition: [E=2,H=1,I=0,B>=1,C>=0,D>=1,F>=1,G>=0,J>=0,2*D+2>=A,A>=D+2] 

* Chain [115,125]: 16*s(1696)+528*s(1697)+240*s(1701)+80*s(1702)+80*s(1708)+40*s(1709)+40*s(1710)+80*s(1711)+64*s(1712)+64*s(1713)+64*s(1714)+64*s(1715)+43
  Such that:s(1690) =< A
s(1691) =< B
s(1692) =< 2*B
s(1693) =< D
s(1694) =< D+1
s(1695) =< D+2
s(1689) =< 2*D+2
s(1696) =< s(1693)
s(1697) =< s(1695)
s(1698) =< s(1691)
s(1699) =< s(1697)*s(1691)
s(1700) =< s(1697)*s(1698)
s(1701) =< s(1700)
s(1702) =< s(1699)
s(1703) =< s(1691)-2
s(1703) =< s(1693)
s(1704) =< s(1693)
s(1705) =< s(1697)*s(1693)
s(1706) =< s(1697)*s(1703)
s(1707) =< s(1697)*s(1704)
s(1708) =< s(1706)
s(1709) =< s(1707)
s(1710) =< s(1705)
s(1711) =< s(1695)
s(1711) =< s(1691)
s(1712) =< s(1690)
s(1713) =< s(1690)
s(1712) =< s(1694)
s(1713) =< s(1694)
s(1712) =< s(1691)
s(1712) =< s(1692)
s(1712) =< s(1689)
s(1713) =< s(1689)
s(1714) =< s(1690)
s(1715) =< s(1690)
s(1714) =< s(1694)
s(1715) =< s(1694)
s(1714) =< s(1691)
s(1714) =< s(1692)

  with precondition: [E=2,H=1,I=0,B>=1,C>=0,D>=1,F>=1,G>=0,J>=0,2*D+2>=A,A>=D+2] 


#### Simplifying cost structure of CE 147 
 * Renamed intermediate variables: 
[ (eq(144,1),aux(652))>>s(3523), (eq(144,1),aux(653))>>s(3524), (eq(144,1),aux(654))>>s(3525), (eq(144,1),aux(655))>>s(3526), (eq(144,1),s(1851))>>s(3527), (eq(144,1),s(1852))>>s(3528), (eq(144,1),s(1853))>>s(3529), (eq(144,1),s(1854))>>s(3530), (eq(144,1),s(1855))>>s(3531), (eq(144,1),s(1856))>>s(3532), (eq(144,1),s(1857))>>s(3533), (eq(144,1),s(1858))>>s(3534), (eq(144,1),s(1859))>>s(3535)]

#### Simplifying cost structure of CE 144 
 * Renamed intermediate variables: 
[ (eq(145,1),aux(671))>>s(3536), (eq(145,1),aux(672))>>s(3537), (eq(145,1),aux(673))>>s(3538), (eq(145,1),aux(674))>>s(3539), (eq(145,1),aux(675))>>s(3540), (eq(145,1),aux(676))>>s(3541), (eq(145,1),aux(677))>>s(3542), (eq(145,1),aux(678))>>s(3543), (eq(145,1),aux(679))>>s(3544), (eq(145,1),aux(680))>>s(3545), (eq(145,1),aux(681))>>s(3546), (eq(145,1),aux(682))>>s(3547), (eq(145,1),aux(683))>>s(3548), (eq(145,1),aux(684))>>s(3549), (eq(145,1),aux(685))>>s(3550), (eq(145,1),aux(686))>>s(3551), (eq(145,1),aux(687))>>s(3552), (eq(145,1),s(2096))>>s(3553), (eq(145,1),s(2187))>>s(3554), (eq(145,1),s(2188))>>s(3555), (eq(145,1),s(2443))>>s(3556), (eq(145,1),s(2444))>>s(3557), (eq(145,1),s(2195))>>s(3558), (eq(145,1),s(2282))>>s(3559), (eq(145,1),s(2283))>>s(3560), (eq(145,1),s(2284))>>s(3561), (eq(145,1),s(2285))>>s(3562), (eq(145,1),s(2286))>>s(3563), (eq(145,1),s(2287))>>s(3564), (eq(145,1),s(2288))>>s(3565), (eq(145,1),s(2289))>>s(3566), (eq(145,1),s(2290))>>s(3567), (eq(145,1),s(2291))>>s(3568), (eq(145,1),s(2292))>>s(3569), (eq(145,1),s(2293))>>s(3570), (eq(145,1),s(2294))>>s(3571), (eq(145,1),s(2295))>>s(3572), (eq(145,1),s(2296))>>s(3573), (eq(145,1),s(2297))>>s(3574), (eq(145,1),s(2117))>>s(3575), (eq(145,1),s(2118))>>s(3576), (eq(145,1),s(2119))>>s(3577), (eq(145,1),s(2120))>>s(3578), (eq(145,1),s(2121))>>s(3579), (eq(145,1),s(2122))>>s(3580), (eq(145,1),s(2123))>>s(3581), (eq(145,1),s(2124))>>s(3582), (eq(145,1),s(2125))>>s(3583), (eq(145,1),s(2126))>>s(3584), (eq(145,1),s(2127))>>s(3585), (eq(145,1),s(2128))>>s(3586), (eq(145,1),s(2199))>>s(3587), (eq(145,1),s(2326))>>s(3588), (eq(145,1),s(2329))>>s(3589), (eq(145,1),s(2209))>>s(3590), (eq(145,1),s(2210))>>s(3591), (eq(145,1),s(2332))>>s(3592), (eq(145,1),s(2334))>>s(3593), (eq(145,1),s(2361))>>s(3594), (eq(145,1),s(2366))>>s(3595), (eq(145,1),s(2393))>>s(3596), (eq(145,1),s(2194))>>s(3597), (eq(145,1),s(2196))>>s(3598), (eq(145,1),s(2197))>>s(3599), (eq(145,1),s(2198))>>s(3600), (eq(145,1),s(2200))>>s(3601), (eq(145,1),s(2201))>>s(3602), (eq(145,1),s(2202))>>s(3603), (eq(145,1),s(2203))>>s(3604), (eq(145,1),s(2204))>>s(3605), (eq(145,1),s(2205))>>s(3606), (eq(145,1),s(2206))>>s(3607), (eq(145,1),s(2207))>>s(3608), (eq(145,1),s(2208))>>s(3609), (eq(145,1),s(2211))>>s(3610), (eq(145,1),s(2212))>>s(3611), (eq(145,1),s(2213))>>s(3612), (eq(145,1),s(2214))>>s(3613), (eq(145,1),s(2215))>>s(3614), (eq(145,1),s(2216))>>s(3615), (eq(145,1),s(2217))>>s(3616), (eq(145,1),s(2448))>>s(3617), (eq(145,1),s(2449))>>s(3618), (eq(145,1),s(2450))>>s(3619), (eq(145,1),s(2451))>>s(3620), (eq(145,1),s(2452))>>s(3621), (eq(145,1),s(2453))>>s(3622), (eq(145,1),s(2455))>>s(3623), (eq(145,1),s(2456))>>s(3624), (eq(145,1),s(2457))>>s(3625), (eq(145,1),s(2458))>>s(3626), (eq(145,1),s(2459))>>s(3627), (eq(145,1),s(2461))>>s(3628), (eq(145,1),s(2462))>>s(3629), (eq(145,1),s(2463))>>s(3630), (eq(145,1),s(2464))>>s(3631), (eq(145,1),s(2465))>>s(3632), (eq(145,1),s(2468))>>s(3633), (eq(145,1),s(2469))>>s(3634), (eq(145,1),s(2470))>>s(3635), (eq(145,1),s(2471))>>s(3636), (eq(145,1),s(2472))>>s(3637), (eq(145,1),s(2473))>>s(3638), (eq(145,1),s(2474))>>s(3639), (eq(145,1),s(2475))>>s(3640), (eq(145,1),s(2102))>>s(3641), (eq(145,1),s(2103))>>s(3642), (eq(145,1),s(2104))>>s(3643), (eq(145,1),s(2106))>>s(3644), (eq(145,1),s(2107))>>s(3645), (eq(145,1),s(2109))>>s(3646), (eq(145,1),s(2111))>>s(3647), (eq(145,1),s(2113))>>s(3648), (eq(145,1),s(2115))>>s(3649), (eq(145,1),s(2169))>>s(3650), (eq(145,1),s(2171))>>s(3651), (eq(145,1),s(2129))>>s(3652)]

#### Simplifying cost structure of CE 145 
 * Joined equivalent variables [aux(724),s(3540),s(3546)] into aux(724)
 * Joined equivalent variables [aux(725),s(3541),s(3548)] into aux(725)
 * Joined equivalent variables [aux(726),s(3542),s(3551)] into aux(726)
 * Joined equivalent variables [s(3558),s(3575)] into s(3558)
 * Joined equivalent variables [s(3586),s(3597)] into s(3586)
 * Renamed intermediate variables: 
[ (eq(146,1),aux(688))>>s(3653), (eq(146,1),aux(689))>>s(3654), (eq(146,1),aux(690))>>s(3655), (eq(146,1),aux(691))>>s(3656), (eq(146,1),aux(692))>>s(3657), (eq(146,1),aux(693))>>s(3658), (eq(146,1),aux(694))>>s(3659), (eq(146,1),aux(695))>>s(3660), (eq(146,1),aux(696))>>s(3661), (eq(146,1),aux(697))>>s(3662), (eq(146,1),aux(698))>>s(3663), (eq(146,1),aux(699))>>s(3664), (eq(146,1),aux(700))>>s(3665), (eq(146,1),aux(701))>>s(3666), (eq(146,1),aux(702))>>s(3667), (eq(146,1),aux(703))>>s(3668), (eq(146,1),s(2683))>>s(3669), (eq(146,1),s(2684))>>s(3670), (eq(146,1),s(2939))>>s(3671), (eq(146,1),s(2940))>>s(3672), (eq(146,1),s(2691))>>s(3673), (eq(146,1),s(2778))>>s(3674), (eq(146,1),s(2779))>>s(3675), (eq(146,1),s(2780))>>s(3676), (eq(146,1),s(2781))>>s(3677), (eq(146,1),s(2782))>>s(3678), (eq(146,1),s(2783))>>s(3679), (eq(146,1),s(2784))>>s(3680), (eq(146,1),s(2785))>>s(3681), (eq(146,1),s(2786))>>s(3682), (eq(146,1),s(2787))>>s(3683), (eq(146,1),s(2788))>>s(3684), (eq(146,1),s(2789))>>s(3685), (eq(146,1),s(2790))>>s(3686), (eq(146,1),s(2791))>>s(3687), (eq(146,1),s(2792))>>s(3688), (eq(146,1),s(2793))>>s(3689), (eq(146,1),s(2614))>>s(3690), (eq(146,1),s(2615))>>s(3691), (eq(146,1),s(2616))>>s(3692), (eq(146,1),s(2617))>>s(3693), (eq(146,1),s(2618))>>s(3694), (eq(146,1),s(2619))>>s(3695), (eq(146,1),s(2620))>>s(3696), (eq(146,1),s(2621))>>s(3697), (eq(146,1),s(2622))>>s(3698), (eq(146,1),s(2623))>>s(3699), (eq(146,1),s(2624))>>s(3700), (eq(146,1),s(2625))>>s(3701), (eq(146,1),s(2695))>>s(3702), (eq(146,1),s(2822))>>s(3703), (eq(146,1),s(2825))>>s(3704), (eq(146,1),s(2705))>>s(3705), (eq(146,1),s(2706))>>s(3706), (eq(146,1),s(2828))>>s(3707), (eq(146,1),s(2830))>>s(3708), (eq(146,1),s(2857))>>s(3709), (eq(146,1),s(2862))>>s(3710), (eq(146,1),s(2889))>>s(3711), (eq(146,1),s(2690))>>s(3712), (eq(146,1),s(2692))>>s(3713), (eq(146,1),s(2693))>>s(3714), (eq(146,1),s(2694))>>s(3715), (eq(146,1),s(2696))>>s(3716), (eq(146,1),s(2697))>>s(3717), (eq(146,1),s(2698))>>s(3718), (eq(146,1),s(2699))>>s(3719), (eq(146,1),s(2700))>>s(3720), (eq(146,1),s(2701))>>s(3721), (eq(146,1),s(2702))>>s(3722), (eq(146,1),s(2703))>>s(3723), (eq(146,1),s(2704))>>s(3724), (eq(146,1),s(2707))>>s(3725), (eq(146,1),s(2708))>>s(3726), (eq(146,1),s(2709))>>s(3727), (eq(146,1),s(2710))>>s(3728), (eq(146,1),s(2711))>>s(3729), (eq(146,1),s(2712))>>s(3730), (eq(146,1),s(2713))>>s(3731), (eq(146,1),s(2944))>>s(3732), (eq(146,1),s(2945))>>s(3733), (eq(146,1),s(2946))>>s(3734), (eq(146,1),s(2947))>>s(3735), (eq(146,1),s(2948))>>s(3736), (eq(146,1),s(2949))>>s(3737), (eq(146,1),s(2951))>>s(3738), (eq(146,1),s(2952))>>s(3739), (eq(146,1),s(2953))>>s(3740), (eq(146,1),s(2954))>>s(3741), (eq(146,1),s(2955))>>s(3742), (eq(146,1),s(2957))>>s(3743), (eq(146,1),s(2958))>>s(3744), (eq(146,1),s(2959))>>s(3745), (eq(146,1),s(2960))>>s(3746), (eq(146,1),s(2961))>>s(3747), (eq(146,1),s(2964))>>s(3748), (eq(146,1),s(2965))>>s(3749), (eq(146,1),s(2966))>>s(3750), (eq(146,1),s(2967))>>s(3751), (eq(146,1),s(2968))>>s(3752), (eq(146,1),s(2969))>>s(3753), (eq(146,1),s(2970))>>s(3754), (eq(146,1),s(2971))>>s(3755), (eq(146,1),s(2598))>>s(3756), (eq(146,1),s(2599))>>s(3757), (eq(146,1),s(2600))>>s(3758), (eq(146,1),s(2601))>>s(3759), (eq(146,1),s(2603))>>s(3760), (eq(146,1),s(2604))>>s(3761), (eq(146,1),s(2606))>>s(3762), (eq(146,1),s(2608))>>s(3763), (eq(146,1),s(2610))>>s(3764), (eq(146,1),s(2612))>>s(3765), (eq(146,1),s(2665))>>s(3766), (eq(146,1),s(2667))>>s(3767), (eq(146,1),s(2626))>>s(3768)]

#### Simplifying cost structure of CE 146 
 * Joined equivalent variables [aux(727),s(3657),s(3662)] into aux(727)
 * Joined equivalent variables [aux(728),s(3658),s(3664)] into aux(728)
 * Joined equivalent variables [aux(729),s(3659),s(3667)] into aux(729)
 * Joined equivalent variables [s(3673),s(3690)] into s(3673)
 * Joined equivalent variables [s(3701),s(3712)] into s(3701)

#### Cost of chains of echelon_form(A,B,C,D,E,F):
* Chain [129]: 5
  with precondition: [A=1,B=0,D=1,E=0,C>=0,F>=0] 

* Chain [128]: 932*s(3527)+360*s(3531)+120*s(3532)+240*s(3533)+384*s(3534)+384*s(3535)+45
  Such that:s(3523) =< 1
s(3524) =< 2
s(3525) =< B
s(3526) =< 2*B
s(3527) =< s(3524)
s(3528) =< s(3525)
s(3529) =< s(3527)*s(3525)
s(3530) =< s(3527)*s(3528)
s(3531) =< s(3530)
s(3532) =< s(3529)
s(3533) =< s(3524)
s(3533) =< s(3525)
s(3534) =< s(3524)
s(3535) =< s(3524)
s(3534) =< s(3523)
s(3535) =< s(3523)
s(3534) =< s(3525)
s(3534) =< s(3526)

  with precondition: [A=2,D=1,E=0,B>=1,C>=0,F>=0] 

* Chain [127]: 6709*s(3558)+1880*s(3567)+1128*s(3568)+240*s(3571)+80*s(3572)+256*s(3573)+256*s(3574)+1560*s(3579)+520*s(3580)+1040*s(3581)+1040*s(3582)+832*s(3583)+832*s(3584)+832*s(3585)+918*s(3586)+40*s(3589)+768*s(3590)+768*s(3591)+2208*s(3592)+256*s(3593)+1536*s(3595)+128*s(3596)+120*s(3608)+72*s(3609)+808*s(3610)+240*s(3613)+80*s(3614)+256*s(3615)+256*s(3616)+86*s(3617)+80*s(3619)+120*s(3631)+40*s(3632)+32*s(3633)+808*s(3634)+240*s(3637)+80*s(3638)+256*s(3639)+256*s(3640)+48*s(3641)+928*s(3642)+120*s(3646)+40*s(3647)+256*s(3648)+256*s(3649)+128*s(3650)+128*s(3651)+12700*s(3652)+85
  Such that:s(3536) =< 1
s(3537) =< 2
s(3538) =< 3
s(3539) =< 4
s(3547) =< A+3
s(3549) =< 2*A+2
s(3550) =< 2*A+3
s(3552) =< 3*A+2
s(3543) =< 4*A
s(3544) =< B
s(3545) =< 2*B
aux(724) =< A
aux(725) =< 2*A
aux(726) =< 3*A
s(3553) =< aux(725)
s(3554) =< aux(726)
s(3555) =< s(3543)
s(3554) =< s(3547)
s(3556) =< s(3549)
s(3555) =< s(3550)
s(3557) =< aux(726)
s(3558) =< aux(724)
s(3559) =< aux(724)+2
s(3560) =< aux(724)+1
s(3561) =< aux(724)
s(3562) =< s(3558)*aux(725)
s(3563) =< s(3558)*s(3560)
s(3564) =< s(3558)*s(3559)
s(3565) =< s(3558)*s(3561)
s(3566) =< s(3563)*2
s(3567) =< s(3565)
s(3568) =< s(3564)
s(3569) =< s(3568)*aux(724)
s(3570) =< s(3568)*s(3561)
s(3571) =< s(3570)
s(3572) =< s(3569)
s(3573) =< s(3562)
s(3573) =< s(3563)
s(3573) =< s(3566)
s(3574) =< s(3562)
s(3574) =< s(3563)
s(3576) =< s(3544)
s(3577) =< s(3558)*s(3544)
s(3578) =< s(3558)*s(3576)
s(3579) =< s(3578)
s(3580) =< s(3577)
s(3581) =< s(3537)
s(3582) =< s(3537)
s(3581) =< s(3544)
s(3583) =< aux(724)
s(3584) =< aux(724)
s(3583) =< s(3536)
s(3584) =< s(3536)
s(3583) =< s(3544)
s(3583) =< s(3545)
s(3583) =< s(3537)
s(3584) =< s(3537)
s(3585) =< aux(724)
s(3586) =< aux(724)
s(3585) =< s(3536)
s(3586) =< s(3536)
s(3585) =< s(3544)
s(3585) =< s(3545)
s(3587) =< aux(724)*2
s(3588) =< s(3558)*aux(724)
s(3589) =< s(3588)
s(3590) =< aux(725)
s(3590) =< aux(724)
s(3590) =< s(3587)
s(3591) =< aux(725)
s(3591) =< aux(724)
s(3592) =< s(3563)
s(3593) =< s(3563)
s(3593) =< s(3566)
s(3594) =< s(3565)*2
s(3595) =< s(3565)
s(3595) =< s(3594)
s(3596) =< aux(724)
s(3596) =< s(3587)
s(3554) =< aux(724)
s(3555) =< aux(725)
s(3598) =< s(3554)+2
s(3599) =< s(3554)+1
s(3600) =< s(3554)
s(3601) =< s(3558)*s(3555)
s(3602) =< s(3558)*s(3599)
s(3603) =< s(3558)*s(3598)
s(3604) =< s(3558)*s(3600)
s(3605) =< s(3602)*2
s(3606) =< s(3600)
s(3607) =< s(3558)*s(3606)
s(3608) =< s(3607)
s(3609) =< s(3604)
s(3610) =< s(3603)
s(3611) =< s(3610)*s(3554)
s(3612) =< s(3610)*s(3600)
s(3613) =< s(3612)
s(3614) =< s(3611)
s(3615) =< s(3601)
s(3615) =< s(3602)
s(3615) =< s(3605)
s(3616) =< s(3601)
s(3616) =< s(3602)
s(3617) =< s(3536)
s(3556) =< aux(725)
s(3557) =< s(3552)
s(3618) =< s(3552)
s(3618) =< aux(724)
s(3556) =< aux(724)
s(3557) =< aux(725)
s(3619) =< s(3618)
s(3617) =< s(3618)
s(3620) =< s(3556)+2
s(3621) =< s(3556)+1
s(3622) =< s(3556)
s(3623) =< s(3619)*s(3557)
s(3624) =< s(3619)*s(3621)
s(3625) =< s(3619)*s(3620)
s(3626) =< s(3619)*s(3622)
s(3627) =< s(3624)*2
s(3628) =< s(3622)
s(3629) =< s(3558)*s(3622)
s(3630) =< s(3558)*s(3628)
s(3631) =< s(3630)
s(3632) =< s(3629)
s(3633) =< s(3626)
s(3634) =< s(3625)
s(3635) =< s(3634)*s(3556)
s(3636) =< s(3634)*s(3622)
s(3637) =< s(3636)
s(3638) =< s(3635)
s(3639) =< s(3623)
s(3639) =< s(3624)
s(3639) =< s(3627)
s(3640) =< s(3623)
s(3640) =< s(3624)
s(3553) =< s(3539)
s(3641) =< s(3536)
s(3642) =< s(3538)
s(3643) =< s(3536)
s(3644) =< s(3642)*s(3536)
s(3645) =< s(3642)*s(3643)
s(3646) =< s(3645)
s(3647) =< s(3644)
s(3648) =< s(3553)
s(3648) =< s(3537)
s(3648) =< s(3539)
s(3649) =< s(3553)
s(3649) =< s(3537)
s(3650) =< aux(725)
s(3650) =< s(3537)
s(3650) =< s(3539)
s(3651) =< aux(725)
s(3651) =< s(3537)

Unbounded itvars
s(3652) :  eq(145,1),s(2129)

  with precondition: [D=1,E=0,A>=3,B>=2,C>=0,F>=0] 

* Chain [126]: 9361*s(3673)+1880*s(3682)+1128*s(3683)+240*s(3686)+80*s(3687)+256*s(3688)+256*s(3689)+3120*s(3694)+1040*s(3695)+1040*s(3696)+1040*s(3697)+832*s(3698)+832*s(3699)+832*s(3700)+918*s(3701)+40*s(3704)+768*s(3705)+768*s(3706)+2208*s(3707)+256*s(3708)+1536*s(3710)+128*s(3711)+120*s(3723)+72*s(3724)+808*s(3725)+240*s(3728)+80*s(3729)+256*s(3730)+256*s(3731)+86*s(3732)+80*s(3734)+120*s(3746)+40*s(3747)+32*s(3748)+808*s(3749)+240*s(3752)+80*s(3753)+256*s(3754)+256*s(3755)+48*s(3757)+928*s(3758)+120*s(3762)+40*s(3763)+256*s(3764)+256*s(3765)+128*s(3766)+128*s(3767)+12700*s(3768)+85
  Such that:s(3653) =< 1
s(3654) =< 2
s(3655) =< 3
s(3656) =< 4
s(3663) =< A+3
s(3665) =< 2*A+2
s(3666) =< 2*A+3
s(3668) =< 3*A+2
s(3660) =< B
s(3661) =< 2*B
aux(727) =< A
aux(728) =< 2*A
aux(729) =< 3*A
s(3669) =< aux(728)
s(3670) =< aux(729)
s(3669) =< s(3663)
s(3671) =< s(3665)
s(3670) =< s(3666)
s(3672) =< aux(729)
s(3673) =< aux(727)
s(3674) =< aux(727)+2
s(3675) =< aux(727)+1
s(3676) =< aux(727)
s(3677) =< s(3673)*aux(728)
s(3678) =< s(3673)*s(3675)
s(3679) =< s(3673)*s(3674)
s(3680) =< s(3673)*s(3676)
s(3681) =< s(3678)*2
s(3682) =< s(3680)
s(3683) =< s(3679)
s(3684) =< s(3683)*aux(727)
s(3685) =< s(3683)*s(3676)
s(3686) =< s(3685)
s(3687) =< s(3684)
s(3688) =< s(3677)
s(3688) =< s(3678)
s(3688) =< s(3681)
s(3689) =< s(3677)
s(3689) =< s(3678)
s(3691) =< s(3660)
s(3692) =< s(3673)*s(3660)
s(3693) =< s(3673)*s(3691)
s(3694) =< s(3693)
s(3695) =< s(3692)
s(3696) =< s(3654)
s(3697) =< s(3654)
s(3696) =< s(3660)
s(3698) =< aux(727)
s(3699) =< aux(727)
s(3698) =< s(3653)
s(3699) =< s(3653)
s(3698) =< s(3660)
s(3698) =< s(3661)
s(3698) =< s(3654)
s(3699) =< s(3654)
s(3700) =< aux(727)
s(3701) =< aux(727)
s(3700) =< s(3653)
s(3701) =< s(3653)
s(3700) =< s(3660)
s(3700) =< s(3661)
s(3702) =< aux(727)*2
s(3703) =< s(3673)*aux(727)
s(3704) =< s(3703)
s(3705) =< aux(728)
s(3705) =< aux(727)
s(3705) =< s(3702)
s(3706) =< aux(728)
s(3706) =< aux(727)
s(3707) =< s(3678)
s(3708) =< s(3678)
s(3708) =< s(3681)
s(3709) =< s(3680)*2
s(3710) =< s(3680)
s(3710) =< s(3709)
s(3711) =< aux(727)
s(3711) =< s(3702)
s(3669) =< aux(727)
s(3670) =< aux(728)
s(3713) =< s(3669)+2
s(3714) =< s(3669)+1
s(3715) =< s(3669)
s(3716) =< s(3673)*s(3670)
s(3717) =< s(3673)*s(3714)
s(3718) =< s(3673)*s(3713)
s(3719) =< s(3673)*s(3715)
s(3720) =< s(3717)*2
s(3721) =< s(3715)
s(3722) =< s(3673)*s(3721)
s(3723) =< s(3722)
s(3724) =< s(3719)
s(3725) =< s(3718)
s(3726) =< s(3725)*s(3669)
s(3727) =< s(3725)*s(3715)
s(3728) =< s(3727)
s(3729) =< s(3726)
s(3730) =< s(3716)
s(3730) =< s(3717)
s(3730) =< s(3720)
s(3731) =< s(3716)
s(3731) =< s(3717)
s(3732) =< s(3653)
s(3671) =< aux(728)
s(3672) =< s(3668)
s(3733) =< s(3668)
s(3733) =< aux(727)
s(3671) =< aux(727)
s(3672) =< aux(728)
s(3734) =< s(3733)
s(3732) =< s(3733)
s(3735) =< s(3671)+2
s(3736) =< s(3671)+1
s(3737) =< s(3671)
s(3738) =< s(3734)*s(3672)
s(3739) =< s(3734)*s(3736)
s(3740) =< s(3734)*s(3735)
s(3741) =< s(3734)*s(3737)
s(3742) =< s(3739)*2
s(3743) =< s(3737)
s(3744) =< s(3673)*s(3737)
s(3745) =< s(3673)*s(3743)
s(3746) =< s(3745)
s(3747) =< s(3744)
s(3748) =< s(3741)
s(3749) =< s(3740)
s(3750) =< s(3749)*s(3671)
s(3751) =< s(3749)*s(3737)
s(3752) =< s(3751)
s(3753) =< s(3750)
s(3754) =< s(3738)
s(3754) =< s(3739)
s(3754) =< s(3742)
s(3755) =< s(3738)
s(3755) =< s(3739)
s(3756) =< s(3656)
s(3756) =< aux(727)
s(3757) =< s(3653)
s(3758) =< s(3655)
s(3759) =< s(3653)
s(3760) =< s(3758)*s(3653)
s(3761) =< s(3758)*s(3759)
s(3762) =< s(3761)
s(3763) =< s(3760)
s(3764) =< s(3756)
s(3764) =< s(3654)
s(3764) =< s(3656)
s(3765) =< s(3756)
s(3765) =< s(3654)
s(3766) =< aux(727)
s(3766) =< s(3654)
s(3766) =< s(3656)
s(3767) =< aux(727)
s(3767) =< s(3654)

Unbounded itvars
s(3768) :  eq(146,1),s(2626)

  with precondition: [D=1,E=0,A>=4,B>=1,C>=0,F>=0] 


#### Simplifying cost structure of CE 148 

#### Computing cost of phase [130] 

#### Simplifying cost structure of CE 149 

#### Cost of loops [130] 

 * loop 130:sizeL(A,B,C,D,E,F,G) -> [sizeL(A',B',C',D',E',F',G')] 
6
##### Pending set sizeL(A,B,C,D,E,F,G)
* Psum in Loop 130: [it(130)=<1]

###### Computing sum for it(130)=<1  in Loop 130 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
     - head Candidate: A-1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
     - tail Candidate: A-1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(130)=<D-1,it(130)=<A-1,it(130)=<A-1,it(130)=<D-1,it(130)=<D-D',it(130)=<A-A',it(130)=<A-A',it(130)=<D-D'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [130] 

#### Simplifying cost structure of phase [130] 

#### Cost of phase [130]:sizeL(A,B,C,D,E,F,G) -> [sizeL(A',B',C',D',E',F',G')] 
6*it(130)+0
  Such that:it(130) =< A
it(130) =< A-A'
it(130) =< D
it(130) =< D-D'

#### Simplifying cost structure of chain [[130],131] 

#### Cost of chains of sizeL(A,B,C,D,E,F,G):
* Chain [[130],131]: 6*it(130)+3
  Such that:it(130) =< G

  with precondition: [A=D,A=F+1,A=G+1,A>=2,B>=1,C>=0,E>=1] 

* Chain [131]: 3
  with precondition: [A=1,B=0,D=1,E=0,F=0,G=0,C>=0] 


#### Computing cost of phase [133,135] 
 * Renamed intermediate variables: 
[ (eq(162,1),it(130))>>s(3769)]
 * Renamed intermediate variables: 
[ (eq(162,2),s(1264))>>s(3770), (eq(162,2),aux(244))>>s(3771), (eq(162,2),aux(245))>>s(3772), (eq(162,2),aux(246))>>s(3773), (eq(162,2),aux(247))>>s(3774), (eq(162,2),aux(248))>>s(3775), (eq(162,2),aux(249))>>s(3776), (eq(162,2),aux(250))>>s(3777), (eq(162,2),s(1263))>>s(3778), (eq(162,2),s(1284))>>s(3779), (eq(162,2),s(1285))>>s(3780), (eq(162,2),s(1286))>>s(3781), (eq(162,2),s(1290))>>s(3782), (eq(162,2),s(1287))>>s(3783), (eq(162,2),s(1291))>>s(3784), (eq(162,2),s(1293))>>s(3785), (eq(162,2),s(1294))>>s(3786), (eq(162,2),s(1295))>>s(3787), (eq(162,2),s(1296))>>s(3788), (eq(162,2),s(1297))>>s(3789), (eq(162,2),s(1299))>>s(3790), (eq(162,2),s(1300))>>s(3791), (eq(162,2),s(1301))>>s(3792), (eq(162,2),s(1272))>>s(3793), (eq(162,2),s(1274))>>s(3794), (eq(162,2),s(1276))>>s(3795), (eq(162,2),s(1278))>>s(3796), (eq(162,2),s(1315))>>s(3797), (eq(162,2),s(1317))>>s(3798)]

#### Simplifying cost structure of CE 162 
 * Joined equivalent variables [aux(730),s(3771)] into aux(730)
 * Joined equivalent variables [aux(731),s(3775),s(3776)] into aux(731)
 * Renamed intermediate variables: 
[ (it(133),s(3772))>>s(3799), (it(133),s(3773))>>s(3800), (it(133),s(3774))>>s(3801), (it(133),s(3777))>>s(3802), (it(133),s(3770))>>s(3803), (it(133),aux(730))>>s(3804), (it(133),aux(731))>>s(3805), (it(133),s(3769))>>s(3806), (it(133),s(3778))>>s(3807), (it(133),s(3779))>>s(3808), (it(133),s(3780))>>s(3809), (it(133),s(3781))>>s(3810), (it(133),s(3782))>>s(3811), (it(133),s(3783))>>s(3812), (it(133),s(3784))>>s(3813), (it(133),s(3785))>>s(3814), (it(133),s(3786))>>s(3815), (it(133),s(3787))>>s(3816), (it(133),s(3788))>>s(3817), (it(133),s(3789))>>s(3818), (it(133),s(3790))>>s(3819), (it(133),s(3791))>>s(3820), (it(133),s(3792))>>s(3821), (it(133),s(3793))>>s(3822), (it(133),s(3794))>>s(3823), (it(133),s(3795))>>s(3824), (it(133),s(3796))>>s(3825), (it(133),s(3797))>>s(3826), (it(133),s(3798))>>s(3827)]
 * Renamed intermediate variables: 
[ (eq(160,1),it(130))>>s(3828)]
 * Renamed intermediate variables: 
[ (eq(160,2),s(1108))>>s(3829), (eq(160,2),aux(221))>>s(3830), (eq(160,2),aux(222))>>s(3831), (eq(160,2),aux(223))>>s(3832), (eq(160,2),aux(224))>>s(3833), (eq(160,2),aux(225))>>s(3834), (eq(160,2),aux(226))>>s(3835), (eq(160,2),aux(227))>>s(3836), (eq(160,2),s(1107))>>s(3837), (eq(160,2),s(1128))>>s(3838), (eq(160,2),s(1129))>>s(3839), (eq(160,2),s(1132))>>s(3840), (eq(160,2),s(1133))>>s(3841), (eq(160,2),s(1135))>>s(3842), (eq(160,2),s(1137))>>s(3843), (eq(160,2),s(1138))>>s(3844), (eq(160,2),s(1139))>>s(3845), (eq(160,2),s(1140))>>s(3846), (eq(160,2),s(1141))>>s(3847), (eq(160,2),s(1142))>>s(3848), (eq(160,2),s(1143))>>s(3849), (eq(160,2),s(1144))>>s(3850), (eq(160,2),s(1145))>>s(3851), (eq(160,2),s(1116))>>s(3852), (eq(160,2),s(1118))>>s(3853), (eq(160,2),s(1120))>>s(3854), (eq(160,2),s(1122))>>s(3855), (eq(160,2),s(1159))>>s(3856), (eq(160,2),s(1161))>>s(3857)]

#### Simplifying cost structure of CE 160 
 * Joined equivalent variables [aux(732),s(3830)] into aux(732)
 * Joined equivalent variables [aux(733),s(3834),s(3835)] into aux(733)
 * Renamed intermediate variables: 
[ (it(135),s(3831))>>s(3858), (it(135),s(3832))>>s(3859), (it(135),s(3833))>>s(3860), (it(135),s(3836))>>s(3861), (it(135),s(3829))>>s(3862), (it(135),aux(732))>>s(3863), (it(135),aux(733))>>s(3864), (it(135),s(3828))>>s(3865), (it(135),s(3837))>>s(3866), (it(135),s(3838))>>s(3867), (it(135),s(3839))>>s(3868), (it(135),s(3840))>>s(3869), (it(135),s(3841))>>s(3870), (it(135),s(3842))>>s(3871), (it(135),s(3843))>>s(3872), (it(135),s(3844))>>s(3873), (it(135),s(3845))>>s(3874), (it(135),s(3846))>>s(3875), (it(135),s(3847))>>s(3876), (it(135),s(3848))>>s(3877), (it(135),s(3849))>>s(3878), (it(135),s(3850))>>s(3879), (it(135),s(3851))>>s(3880), (it(135),s(3852))>>s(3881), (it(135),s(3853))>>s(3882), (it(135),s(3854))>>s(3883), (it(135),s(3855))>>s(3884), (it(135),s(3856))>>s(3885), (it(135),s(3857))>>s(3886)]

#### Cost of loops [133,135] 

 * loop 133:echelon_helper_old(A,B,C,D,E,F,G) -> [echelon_helper_old(A',B',C',D',E',F',G')] 
6*s(3806)+16*s(3807)+244*s(3808)+120*s(3817)+80*s(3818)+40*s(3819)+40*s(3820)+40*s(3821)+80*s(3822)+80*s(3823)+64*s(3824)+64*s(3825)+64*s(3826)+64*s(3827)+43
  Such that:s(3799) =< A-D'+1
s(3800) =< B
s(3801) =< 2*B
s(3802) =< D'+1
s(3803) =< 2*D'
s(3804) =< A
s(3805) =< D'
s(3806) =< s(3804)
s(3807) =< s(3805)
s(3808) =< s(3799)
s(3809) =< s(3800)-2
s(3810) =< s(3800)
s(3811) =< s(3808)*s(3800)
s(3809) =< s(3805)
s(3812) =< s(3805)
s(3813) =< s(3808)*s(3810)
s(3814) =< s(3808)*s(3805)
s(3815) =< s(3808)*s(3809)
s(3816) =< s(3808)*s(3812)
s(3817) =< s(3813)
s(3818) =< s(3815)
s(3819) =< s(3816)
s(3820) =< s(3811)
s(3821) =< s(3814)
s(3822) =< s(3802)
s(3823) =< s(3802)
s(3822) =< s(3800)
s(3824) =< s(3804)
s(3825) =< s(3804)
s(3824) =< s(3805)
s(3825) =< s(3805)
s(3824) =< s(3800)
s(3824) =< s(3801)
s(3824) =< s(3803)
s(3825) =< s(3803)
s(3826) =< s(3804)
s(3827) =< s(3804)
s(3826) =< s(3805)
s(3827) =< s(3805)
s(3826) =< s(3800)
s(3826) =< s(3801)

 * loop 135:echelon_helper_old(A,B,C,D,E,F,G) -> [echelon_helper_old(A',B',C',D',E',F',G')] 
6*s(3865)+16*s(3866)+448*s(3867)+240*s(3871)+80*s(3872)+80*s(3878)+40*s(3879)+40*s(3880)+80*s(3881)+80*s(3882)+64*s(3883)+64*s(3884)+64*s(3885)+64*s(3886)+43
  Such that:s(3858) =< A-D'+1
s(3859) =< B
s(3860) =< 2*B
s(3861) =< D'+1
s(3862) =< 2*D'
s(3863) =< A
s(3864) =< D'
s(3865) =< s(3863)
s(3866) =< s(3864)
s(3867) =< s(3858)
s(3868) =< s(3859)
s(3869) =< s(3867)*s(3859)
s(3870) =< s(3867)*s(3868)
s(3871) =< s(3870)
s(3872) =< s(3869)
s(3873) =< s(3859)-2
s(3873) =< s(3864)
s(3874) =< s(3864)
s(3875) =< s(3867)*s(3864)
s(3876) =< s(3867)*s(3873)
s(3877) =< s(3867)*s(3874)
s(3878) =< s(3876)
s(3879) =< s(3877)
s(3880) =< s(3875)
s(3881) =< s(3861)
s(3882) =< s(3861)
s(3881) =< s(3859)
s(3883) =< s(3863)
s(3884) =< s(3863)
s(3883) =< s(3864)
s(3884) =< s(3864)
s(3883) =< s(3859)
s(3883) =< s(3860)
s(3883) =< s(3862)
s(3884) =< s(3862)
s(3885) =< s(3863)
s(3886) =< s(3863)
s(3885) =< s(3864)
s(3886) =< s(3864)
s(3885) =< s(3859)
s(3885) =< s(3860)

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [s(3805)=<B-1,s(3800)=<B,s(3859)=<B,s(3864)=<D+1]
* Psum in Loop 133: [it(133)=<1,s(3904)=<A,s(3912)=<A-D'+1,s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D']
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D']

###### Computing max_min for s(3805)=<B-1  
   - Applying max/min strategy 
     - Loop 133  increases the expression by [B'-D'-1] 
     - Loop 135  increases the expression by [B'-1] 
 * Adding constraints:[s(3805)=<aux(734)+aux(735)+aux(736),aux(734)=<B-1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [s(3800)=<B,s(3859)=<B,s(3864)=<D+1]
* Psum in Loop 133: [it(133)=<1,s(3904)=<A,s(3912)=<A-D'+1,s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(735)=<B'-D'-1]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing max_min for s(3800)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[s(3800)=<s(3805)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [s(3859)=<B,s(3864)=<D+1]
* Psum in Loop 133: [it(133)=<1,s(3904)=<A,s(3912)=<A-D'+1,s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(735)=<B'-D'-1]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing max_min for s(3859)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[s(3859)=<s(3805)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [s(3864)=<D+1]
* Psum in Loop 133: [it(133)=<1,s(3904)=<A,s(3912)=<A-D'+1,s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(735)=<B'-D'-1]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing max_min for s(3864)=<D+1  
   - Applying max/min strategy 
     - Loop 133  increases the expression by 1/1 
     - Loop 135  increases the expression by 1/1 
 * Adding constraints:[s(3864)=<aux(737)+it(133)+it(135),aux(737)=<D+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [it(133)=<1,s(3904)=<A,s(3912)=<A-D'+1,s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(735)=<B'-D'-1]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing sum for it(133)=<1  in Loop 133 
   - Applying inductive sum strategy 
   - No strategy succeeded 
 * Adding constraints: [] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [s(3904)=<A,s(3912)=<A-D'+1,s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(735)=<B'-D'-1]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing sum for s(3904)=<A  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(738)=<A] 
 * Adding constraints: [s(3904)=<it(133)*aux(738)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(738)=<A]
* Psum in Loop 133: [s(3912)=<A-D'+1,s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(735)=<B'-D'-1]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing max_min for aux(738)=<A  
   - Applying max/min strategy 
     - Loop 133  increases the expression by [A'-2*D'-1,A'/2-D'-1/2] 
     - Loop 135 does not increase the expression
 * Adding constraints:[aux(738)=<aux(739)+aux(740),aux(739)=<A] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [s(3912)=<A-D'+1,s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(735)=<B'-D'-1,aux(740)=<A'-2*D'-1,aux(740)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing sum for s(3912)=<A-D'+1  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(741)=<A-D] 
 * Adding constraints: [s(3912)=<it(133)*aux(741)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(741)=<A-D]
* Psum in Loop 133: [s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(735)=<B'-D'-1,aux(740)=<A'-2*D'-1,aux(740)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing max_min for aux(741)=<A-D  
   - Applying max/min strategy 
     - Loop 133  increases the expression by [A'-2*D'-2,A'/2-D'-3/2] 
     - Loop 135 does not increase the expression
 * Adding constraints:[aux(741)=<aux(742)+aux(743),aux(742)=<A-D] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(735)=<B'-D'-1,aux(743)=<A'-2*D'-2,aux(740)=<A'-2*D'-1,aux(743)=<A'/2-D'-3/2,aux(740)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing sum for s(3902)=<B  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(744)=<B] 
 * Adding constraints: [s(3902)=<it(133)*aux(744)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(744)=<B]
* Psum in Loop 133: [s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(735)=<B'-D'-1,aux(743)=<A'-2*D'-2,aux(740)=<A'-2*D'-1,aux(743)=<A'/2-D'-3/2,aux(740)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing max_min for aux(744)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(744)=<s(3805)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(735)=<B'-D'-1,aux(743)=<A'-2*D'-2,aux(740)=<A'-2*D'-1,aux(743)=<A'/2-D'-3/2,aux(740)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing sum for s(3901)=<2*B  in Loop 133 
   - Found a solution using cacheing 
 * Adding constraints: [s(3901)=<aux(745)*2,aux(745)=<it(133)*aux(744)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(735)=<B'-D'-1,aux(743)=<A'-2*D'-2,aux(740)=<A'-2*D'-1,aux(743)=<A'/2-D'-3/2,aux(740)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing sum for s(3903)=<D'  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(746)=<B-1,aux(746)=<D+1] 
 * Adding constraints: [s(3903)=<it(133)*aux(746)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(746)=<B-1,aux(746)=<D+1]
* Psum in Loop 133: [s(3906)=<D'+1,s(3905)=<2*D',aux(735)=<B'-D'-1,aux(743)=<A'-2*D'-2,aux(740)=<A'-2*D'-1,aux(743)=<A'/2-D'-3/2,aux(740)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing max_min for aux(746)=<B-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(746)=<s(3805)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(746)=<D+1]
* Psum in Loop 133: [s(3906)=<D'+1,s(3905)=<2*D',aux(735)=<B'-D'-1,aux(743)=<A'-2*D'-2,aux(740)=<A'-2*D'-1,aux(743)=<A'/2-D'-3/2,aux(740)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing max_min for aux(746)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(746)=<s(3864)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [s(3906)=<D'+1,s(3905)=<2*D',aux(735)=<B'-D'-1,aux(743)=<A'-2*D'-2,aux(740)=<A'-2*D'-1,aux(743)=<A'/2-D'-3/2,aux(740)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing sum for s(3906)=<D'+1  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(747)=<B,aux(747)=<D+2] 
 * Adding constraints: [s(3906)=<it(133)*aux(747)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(747)=<B,aux(747)=<D+2]
* Psum in Loop 133: [s(3905)=<2*D',aux(735)=<B'-D'-1,aux(743)=<A'-2*D'-2,aux(740)=<A'-2*D'-1,aux(743)=<A'/2-D'-3/2,aux(740)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing max_min for aux(747)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(747)=<s(3805)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(747)=<D+2]
* Psum in Loop 133: [s(3905)=<2*D',aux(735)=<B'-D'-1,aux(743)=<A'-2*D'-2,aux(740)=<A'-2*D'-1,aux(743)=<A'/2-D'-3/2,aux(740)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing max_min for aux(747)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(747)=<s(3864)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [s(3905)=<2*D',aux(735)=<B'-D'-1,aux(743)=<A'-2*D'-2,aux(740)=<A'-2*D'-1,aux(743)=<A'/2-D'-3/2,aux(740)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing sum for s(3905)=<2*D'  in Loop 133 
   - Found a solution using cacheing 
 * Adding constraints: [s(3905)=<aux(748)*2,aux(748)=<it(133)*aux(746)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(735)=<B'-D'-1,aux(743)=<A'-2*D'-2,aux(740)=<A'-2*D'-1,aux(743)=<A'/2-D'-3/2,aux(740)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing sum for aux(735)=<B'-D'-1  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [] 
 * Adding constraints: [aux(735)=<it(133)*aux(749)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(743)=<A'-2*D'-2,aux(740)=<A'-2*D'-1,aux(743)=<A'/2-D'-3/2,aux(740)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing sum for aux(743)=<A'-2*D'-2  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(750)=<2*A-4*D-7] 
 * Adding constraints: [aux(743)=<it(133)*aux(750)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(750)=<2*A-4*D-7]
* Psum in Loop 133: [aux(740)=<A'-2*D'-1,aux(743)=<A'/2-D'-3/2,aux(740)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing max_min for aux(750)=<2*A-4*D-7  
   - Applying max/min strategy 
     - Loop 133  increases the expression by [2*A'-4*D'-6,A'-2*D'-5] 
     - Loop 135 does not increase the expression
 * Adding constraints:[aux(750)=<aux(751)+aux(752),aux(751)=<2*A-4*D-7] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(740)=<A'-2*D'-1,aux(743)=<A'/2-D'-3/2,aux(740)=<A'/2-D'-1/2,aux(752)=<A'-2*D'-5,aux(752)=<2*A'-4*D'-6]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing sum for aux(740)=<A'-2*D'-1  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(753)=<2*A-4*D-6] 
 * Adding constraints: [aux(740)=<it(133)*aux(753)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(753)=<2*A-4*D-6]
* Psum in Loop 133: [aux(743)=<A'/2-D'-3/2,aux(740)=<A'/2-D'-1/2,aux(752)=<A'-2*D'-5,aux(752)=<2*A'-4*D'-6]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing max_min for aux(753)=<2*A-4*D-6  
   - Found a solution using cacheing 
 * Adding constraints:[aux(753)=<aux(750)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(743)=<A'/2-D'-3/2,aux(740)=<A'/2-D'-1/2,aux(752)=<A'-2*D'-5,aux(752)=<2*A'-4*D'-6]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing sum for aux(743)=<A'/2-D'-3/2  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(754)=<A-2*D-4] 
 * Adding constraints: [aux(743)=<it(133)*aux(754)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(754)=<A-2*D-4]
* Psum in Loop 133: [aux(740)=<A'/2-D'-1/2,aux(752)=<A'-2*D'-5,aux(752)=<2*A'-4*D'-6]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing max_min for aux(754)=<A-2*D-4  
   - Found a solution using cacheing 
 * Adding constraints:[aux(754)=<aux(750)* (1/2)-1/2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(740)=<A'/2-D'-1/2,aux(752)=<A'-2*D'-5,aux(752)=<2*A'-4*D'-6]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing sum for aux(740)=<A'/2-D'-1/2  in Loop 133 
   - Found a solution using cacheing 
 * Adding constraints: [aux(740)=<aux(755)* (1/2),aux(755)=<it(133)*aux(753)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(752)=<A'-2*D'-5,aux(752)=<2*A'-4*D'-6]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing sum for aux(752)=<A'-2*D'-5  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(756)=<2*A-4*D-10] 
 * Adding constraints: [aux(752)=<it(133)*aux(756)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(756)=<2*A-4*D-10]
* Psum in Loop 133: [aux(752)=<2*A'-4*D'-6]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing max_min for aux(756)=<2*A-4*D-10  
   - Found a solution using cacheing 
 * Adding constraints:[aux(756)=<aux(750)-3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(752)=<2*A'-4*D'-6]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing sum for aux(752)=<2*A'-4*D'-6  in Loop 133 
   - Found a solution using cacheing 
 * Adding constraints: [aux(752)=<aux(757)*4,aux(757)=<it(133)*aux(754)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing sum for it(135)=<1  in Loop 135 
   - Applying inductive sum strategy 
     - head Candidate: A/2-2 
       - Loop 133 has a reset to  [A-D-7/2]
     - head Candidate: A/3-D/3-1 
       - Loop 133 has a reset to  [2/3*A-D-7/3]
     - head Candidate: A/4-D/2-1/2 
       - Loop 133 has a reset to  [A/2-D-7/4]
     - tail Candidate: A/2-2 
       - Loop 133 has undefined behavior 
     - tail Candidate: A/3-D/3-1 
       - Loop 133 has undefined behavior 
     - tail Candidate: A/4-D/2-1/2 
       - Loop 133 has undefined behavior 
 * Adding constraints: [it(135)=<aux(758)+aux(759),it(135)=<aux(760)+aux(761),it(135)=<aux(762)+aux(763),aux(759)=<A/2-2,aux(761)=<A/3-D/3-1,aux(763)=<A/4-D/2-1/2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(758)=<A-D-7/2,aux(762)=<A/2-D-7/4,aux(760)=<2/3*A-D-7/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing sum for aux(758)=<A-D-7/2  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(764)=<A-D-7/2] 
 * Adding constraints: [aux(758)=<it(133)*aux(764)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(764)=<A-D-7/2]
* Psum in Loop 133: [aux(762)=<A/2-D-7/4,aux(760)=<2/3*A-D-7/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing max_min for aux(764)=<A-D-7/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(764)=<aux(741)-7/2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(762)=<A/2-D-7/4,aux(760)=<2/3*A-D-7/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing sum for aux(762)=<A/2-D-7/4  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(765)=<A/2-D-7/4] 
 * Adding constraints: [aux(762)=<it(133)*aux(765)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(765)=<A/2-D-7/4]
* Psum in Loop 133: [aux(760)=<2/3*A-D-7/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing max_min for aux(765)=<A/2-D-7/4  
   - Found a solution using cacheing 
 * Adding constraints:[aux(765)=<aux(750)* (1/4)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(760)=<2/3*A-D-7/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing sum for aux(760)=<2/3*A-D-7/3  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(766)=<2/3*A-D-7/3] 
 * Adding constraints: [aux(760)=<it(133)*aux(766)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(766)=<2/3*A-D-7/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing max_min for aux(766)=<2/3*A-D-7/3  
   - Applying max/min strategy 
     - Loop 133  increases the expression by [2/3*A'-4/3*D'-5/3,A'/3-2/3*D'-4/3] 
     - Loop 135 does not increase the expression
 * Adding constraints:[aux(766)=<aux(767)+aux(768),aux(767)=<2/3*A-D-7/3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(768)=<A'/3-2/3*D'-4/3,aux(768)=<2/3*A'-4/3*D'-5/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing sum for aux(768)=<A'/3-2/3*D'-4/3  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(769)=<2/3*A-4/3*D-3] 
 * Adding constraints: [aux(768)=<it(133)*aux(769)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(769)=<2/3*A-4/3*D-3]
* Psum in Loop 133: [aux(768)=<2/3*A'-4/3*D'-5/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing max_min for aux(769)=<2/3*A-4/3*D-3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(769)=<aux(750)* (1/3)-2/3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(768)=<2/3*A'-4/3*D'-5/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing sum for aux(768)=<2/3*A'-4/3*D'-5/3  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(770)=<4/3*A-8/3*D-5] 
 * Adding constraints: [aux(768)=<it(133)*aux(770)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(770)=<4/3*A-8/3*D-5]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing max_min for aux(770)=<4/3*A-8/3*D-5  
   - Found a solution using cacheing 
 * Adding constraints:[aux(770)=<aux(750)* (2/3)-1/3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing sum for s(3930)=<A  in Loop 135 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(771)=<A] 
 * Adding constraints: [s(3930)=<it(135)*aux(771)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(771)=<A]
* Psum in Loop 135: [s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing max_min for aux(771)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(771)=<aux(738)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing sum for s(3938)=<A-D'+1  in Loop 135 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(772)=<A-D] 
 * Adding constraints: [s(3938)=<it(135)*aux(772)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(772)=<A-D]
* Psum in Loop 135: [s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing max_min for aux(772)=<A-D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(772)=<aux(741)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing sum for s(3928)=<B  in Loop 135 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(773)=<B] 
 * Adding constraints: [s(3928)=<it(135)*aux(773)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(773)=<B]
* Psum in Loop 135: [s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing max_min for aux(773)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(773)=<s(3805)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing sum for s(3927)=<2*B  in Loop 135 
   - Found a solution using cacheing 
 * Adding constraints: [s(3927)=<aux(774)*2,aux(774)=<it(135)*aux(773)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing sum for s(3929)=<D'  in Loop 135 
   - Applying inductive sum strategy 
     - head Candidate: A-D-2 
       - Loop 133 has a reset to  [2*A-3*D-6]
     - head Candidate: A-3 
       - Loop 133 has a reset to  [2*A-2*D-6]
     - tail Candidate: A-D-2 
       - Loop 133 has undefined behavior 
     - tail Candidate: A-3 
       - Loop 133 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(779)=<D+1,aux(779)=<A/2-1/2] 
 * Adding constraints: [s(3929)=<it(135)*aux(779),s(3929)=<aux(775)+aux(776),s(3929)=<aux(777)+aux(778),aux(776)=<A-D-2,aux(778)=<A-3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(779)=<A/2-1/2,aux(779)=<D+1]
* Psum in Loop 133: [aux(775)=<2*A-3*D-6,aux(777)=<2*A-2*D-6]
* Psum in Loop 135: [s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing max_min for aux(779)=<A/2-1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(779)=<aux(738)* (1/2)-1/2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(779)=<D+1]
* Psum in Loop 133: [aux(775)=<2*A-3*D-6,aux(777)=<2*A-2*D-6]
* Psum in Loop 135: [s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing max_min for aux(779)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(779)=<s(3864)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(775)=<2*A-3*D-6,aux(777)=<2*A-2*D-6]
* Psum in Loop 135: [s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing sum for aux(775)=<2*A-3*D-6  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(780)=<2*A-3*D-6] 
 * Adding constraints: [aux(775)=<it(133)*aux(780)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(780)=<2*A-3*D-6]
* Psum in Loop 133: [aux(777)=<2*A-2*D-6]
* Psum in Loop 135: [s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing max_min for aux(780)=<2*A-3*D-6  
   - Found a solution using cacheing 
 * Adding constraints:[aux(780)=<aux(766)*3+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(777)=<2*A-2*D-6]
* Psum in Loop 135: [s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing sum for aux(777)=<2*A-2*D-6  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(781)=<2*A-2*D-6] 
 * Adding constraints: [aux(777)=<it(133)*aux(781)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(781)=<2*A-2*D-6]
* Psum in Loop 135: [s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing max_min for aux(781)=<2*A-2*D-6  
   - Found a solution using cacheing 
 * Adding constraints:[aux(781)=<aux(741)*2-6] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [s(3932)=<D'+1,s(3931)=<2*D',aux(736)=<B'-1]

###### Computing sum for s(3932)=<D'+1  in Loop 135 
   - Applying inductive sum strategy 
     - head Candidate: 3/2*A-3 
       - Loop 133 has a reset to  [3*A-3*D-15/2]
     - head Candidate: 4/3*A-D/3-2 
       - Loop 133 has a reset to  [8/3*A-3*D-19/3]
     - tail Candidate: 3/2*A-3 
       - Loop 133 has undefined behavior 
     - tail Candidate: 4/3*A-D/3-2 
       - Loop 133 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(786)=<D+2,aux(786)=<A/2+1/2] 
 * Adding constraints: [s(3932)=<it(135)*aux(786),s(3932)=<aux(782)+aux(783),s(3932)=<aux(784)+aux(785),aux(783)=<3/2*A-3,aux(785)=<4/3*A-D/3-2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(786)=<A/2+1/2,aux(786)=<D+2]
* Psum in Loop 133: [aux(782)=<3*A-3*D-15/2,aux(784)=<8/3*A-3*D-19/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(736)=<B'-1]

###### Computing max_min for aux(786)=<A/2+1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(786)=<aux(738)* (1/2)+1/2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(786)=<D+2]
* Psum in Loop 133: [aux(782)=<3*A-3*D-15/2,aux(784)=<8/3*A-3*D-19/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(736)=<B'-1]

###### Computing max_min for aux(786)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(786)=<s(3864)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(782)=<3*A-3*D-15/2,aux(784)=<8/3*A-3*D-19/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(736)=<B'-1]

###### Computing sum for aux(782)=<3*A-3*D-15/2  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(787)=<3*A-3*D-15/2] 
 * Adding constraints: [aux(782)=<it(133)*aux(787)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(787)=<3*A-3*D-15/2]
* Psum in Loop 133: [aux(784)=<8/3*A-3*D-19/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(736)=<B'-1]

###### Computing max_min for aux(787)=<3*A-3*D-15/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(787)=<aux(741)*3-15/2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(784)=<8/3*A-3*D-19/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(736)=<B'-1]

###### Computing sum for aux(784)=<8/3*A-3*D-19/3  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(788)=<8/3*A-3*D-19/3] 
 * Adding constraints: [aux(784)=<it(133)*aux(788)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(788)=<8/3*A-3*D-19/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(736)=<B'-1]

###### Computing max_min for aux(788)=<8/3*A-3*D-19/3  
   - Applying max/min strategy 
     - Loop 133  increases the expression by [8/3*A'-16/3*D'-17/3,4/3*A'-8/3*D'-13/3] 
     - Loop 135 does not increase the expression
 * Adding constraints:[aux(788)=<aux(789)+aux(790),aux(789)=<8/3*A-3*D-19/3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(790)=<4/3*A'-8/3*D'-13/3,aux(790)=<8/3*A'-16/3*D'-17/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(736)=<B'-1]

###### Computing sum for aux(790)=<4/3*A'-8/3*D'-13/3  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(791)=<8/3*A-16/3*D-11] 
 * Adding constraints: [aux(790)=<it(133)*aux(791)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(791)=<8/3*A-16/3*D-11]
* Psum in Loop 133: [aux(790)=<8/3*A'-16/3*D'-17/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(736)=<B'-1]

###### Computing max_min for aux(791)=<8/3*A-16/3*D-11  
   - Found a solution using cacheing 
 * Adding constraints:[aux(791)=<aux(750)* (4/3)-5/3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(790)=<8/3*A'-16/3*D'-17/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(736)=<B'-1]

###### Computing sum for aux(790)=<8/3*A'-16/3*D'-17/3  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(792)=<16/3*A-32/3*D-19] 
 * Adding constraints: [aux(790)=<it(133)*aux(792)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(792)=<16/3*A-32/3*D-19]
* Psum in Loop 135: [s(3931)=<2*D',aux(736)=<B'-1]

###### Computing max_min for aux(792)=<16/3*A-32/3*D-19  
   - Found a solution using cacheing 
 * Adding constraints:[aux(792)=<aux(750)* (8/3)-1/3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [s(3931)=<2*D',aux(736)=<B'-1]

###### Computing sum for s(3931)=<2*D'  in Loop 135 
   - Found a solution using cacheing 
 * Adding constraints: [s(3931)=<aux(793)*2,aux(793)=<it(135)*aux(779),aux(793)=<aux(775)+aux(776),aux(793)=<aux(777)+aux(778)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [aux(736)=<B'-1]

###### Computing sum for aux(736)=<B'-1  in Loop 135 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [] 
 * Adding constraints: [aux(736)=<it(135)*aux(794)] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [133,135] 
Found a cycle in the non-final constraints
Could not solve cycle in cost structure.
 Discarded constraints:  
aux(792)=<aux(750)* (8/3)-1/3
aux(791)=<aux(750)* (4/3)-5/3
aux(788)=<aux(789)+aux(790)
aux(787)=<aux(741)*3-15/2
aux(786)=<s(3864)+1
aux(786)=<aux(738)* (1/2)+1/2
aux(781)=<aux(741)*2-6
aux(780)=<aux(766)*3+1
aux(779)=<s(3864)
aux(779)=<aux(738)* (1/2)-1/2
aux(773)=<s(3805)+1
aux(772)=<aux(741)
aux(771)=<aux(738)
aux(770)=<aux(750)* (2/3)-1/3
aux(769)=<aux(750)* (1/3)-2/3
aux(766)=<aux(767)+aux(768)
aux(765)=<aux(750)* (1/4)
aux(764)=<aux(741)-7/2
aux(756)=<aux(750)-3
aux(754)=<aux(750)* (1/2)-1/2
aux(753)=<aux(750)+1
aux(750)=<aux(751)+aux(752)
aux(747)=<s(3864)+1
aux(747)=<s(3805)+1
aux(746)=<s(3864)
aux(746)=<s(3805)
aux(744)=<s(3805)+1
aux(741)=<aux(742)+aux(743)
aux(738)=<aux(739)+aux(740)
s(3864)=<aux(737)+it(133)+it(135)
s(3859)=<s(3805)+1
s(3800)=<s(3805)+1
s(3805)=<aux(734)+aux(735)+aux(736)
aux(736)=<it(135)*aux(794)
aux(793)=<aux(777)+aux(778)
aux(793)=<aux(775)+aux(776)
aux(793)=<it(135)*aux(779)
s(3931)=<aux(793)*2
aux(790)=<it(133)*aux(792)
aux(790)=<it(133)*aux(791)
aux(784)=<it(133)*aux(788)
aux(782)=<it(133)*aux(787)
s(3932)=<aux(784)+aux(785)
s(3932)=<aux(782)+aux(783)
s(3932)=<it(135)*aux(786)
aux(777)=<it(133)*aux(781)
aux(775)=<it(133)*aux(780)
s(3929)=<aux(777)+aux(778)
s(3929)=<aux(775)+aux(776)
s(3929)=<it(135)*aux(779)
aux(774)=<it(135)*aux(773)
s(3927)=<aux(774)*2
s(3928)=<it(135)*aux(773)
s(3938)=<it(135)*aux(772)
s(3930)=<it(135)*aux(771)
aux(768)=<it(133)*aux(770)
aux(768)=<it(133)*aux(769)
aux(760)=<it(133)*aux(766)
aux(762)=<it(133)*aux(765)
aux(758)=<it(133)*aux(764)
it(135)=<aux(762)+aux(763)
it(135)=<aux(760)+aux(761)
it(135)=<aux(758)+aux(759)
aux(757)=<it(133)*aux(754)
aux(752)=<aux(757)*4
aux(752)=<it(133)*aux(756)
aux(755)=<it(133)*aux(753)
aux(740)=<aux(755)* (1/2)
aux(743)=<it(133)*aux(754)
aux(740)=<it(133)*aux(753)
aux(743)=<it(133)*aux(750)
aux(748)=<it(133)*aux(746)
s(3905)=<aux(748)*2
s(3906)=<it(133)*aux(747)
s(3903)=<it(133)*aux(746)
aux(745)=<it(133)*aux(744)
s(3901)=<aux(745)*2
s(3902)=<it(133)*aux(744)
s(3912)=<it(133)*aux(741)
s(3904)=<it(133)*aux(738)

#### Simplifying cost structure of phase [133,135] 
 * Joined equivalent variables [aux(795),aux(739),aux(778)] into aux(795)
 * Joined equivalent variables [aux(796),aux(742),aux(776)] into aux(796)
 * Joined equivalent variables [it(133),it(135)] into it(133)

#### Cost of phase [133,135]:echelon_helper_old(A,B,C,D,E,F,G) -> [echelon_helper_old(A',B',C',D',E',F',G')] 
86*it(133)+6*s(3887)+16*s(3888)+244*s(3889)+120*s(3890)+80*s(3891)+40*s(3892)+40*s(3893)+40*s(3894)+80*s(3895)+80*s(3896)+64*s(3897)+64*s(3898)+64*s(3899)+64*s(3900)+6*s(3913)+16*s(3914)+448*s(3915)+240*s(3916)+80*s(3917)+80*s(3918)+40*s(3919)+40*s(3920)+80*s(3921)+80*s(3922)+64*s(3923)+64*s(3924)+64*s(3925)+64*s(3926)+0
Unbounded itvars
it(133) :  it(133)
s(3887) :  sum(133),s(3806)
s(3888) :  sum(133),s(3807)
s(3889) :  sum(133),s(3808)
s(3890) :  sum(133),s(3817)
s(3891) :  sum(133),s(3818)
s(3892) :  sum(133),s(3819)
s(3893) :  sum(133),s(3820)
s(3894) :  sum(133),s(3821)
s(3895) :  sum(133),s(3822)
s(3896) :  sum(133),s(3823)
s(3897) :  sum(133),s(3824)
s(3898) :  sum(133),s(3825)
s(3899) :  sum(133),s(3826)
s(3900) :  sum(133),s(3827)
s(3913) :  sum(135),s(3865)
s(3914) :  sum(135),s(3866)
s(3915) :  sum(135),s(3867)
s(3916) :  sum(135),s(3871)
s(3917) :  sum(135),s(3872)
s(3918) :  sum(135),s(3878)
s(3919) :  sum(135),s(3879)
s(3920) :  sum(135),s(3880)
s(3921) :  sum(135),s(3881)
s(3922) :  sum(135),s(3882)
s(3923) :  sum(135),s(3883)
s(3924) :  sum(135),s(3884)
s(3925) :  sum(135),s(3885)
s(3926) :  sum(135),s(3886)

#### Simplifying cost structure of chain [[133,135]] 
 * Joined equivalent variables [it(133),s(3887),s(3888),s(3889),s(3890),s(3891),s(3892),s(3893),s(3894),s(3895),s(3896),s(3897),s(3898),s(3899),s(3900),s(3913),s(3914),s(3915),s(3916),s(3917),s(3918),s(3919),s(3920),s(3921),s(3922),s(3923),s(3924),s(3925),s(3926)] into it(133)

#### Computing cost of phase [132] 
 * Renamed intermediate variables: 
[ (eq(163,1),it(130))>>s(3939)]
 * Renamed intermediate variables: 
[ (eq(163,2),s(1343))>>s(3940), (eq(163,2),aux(257))>>s(3941), (eq(163,2),aux(258))>>s(3942), (eq(163,2),aux(259))>>s(3943), (eq(163,2),aux(260))>>s(3944), (eq(163,2),aux(261))>>s(3945), (eq(163,2),aux(262))>>s(3946), (eq(163,2),s(1341))>>s(3947), (eq(163,2),s(1352))>>s(3948), (eq(163,2),s(1363))>>s(3949), (eq(163,2),s(1364))>>s(3950), (eq(163,2),s(1368))>>s(3951), (eq(163,2),s(1365))>>s(3952), (eq(163,2),s(1369))>>s(3953), (eq(163,2),s(1371))>>s(3954), (eq(163,2),s(1372))>>s(3955), (eq(163,2),s(1373))>>s(3956), (eq(163,2),s(1374))>>s(3957), (eq(163,2),s(1375))>>s(3958), (eq(163,2),s(1377))>>s(3959), (eq(163,2),s(1378))>>s(3960), (eq(163,2),s(1379))>>s(3961), (eq(163,2),s(1350))>>s(3962), (eq(163,2),s(1354))>>s(3963), (eq(163,2),s(1356))>>s(3964), (eq(163,2),s(1393))>>s(3965), (eq(163,2),s(1395))>>s(3966)]

#### Simplifying cost structure of CE 163 
 * Joined equivalent variables [aux(797),s(3941)] into aux(797)
 * Joined equivalent variables [aux(798),s(3944),s(3945)] into aux(798)
 * Renamed intermediate variables: 
[ (it(132),s(3942))>>s(3967), (it(132),s(3943))>>s(3968), (it(132),s(3946))>>s(3969), (it(132),s(3940))>>s(3970), (it(132),aux(797))>>s(3971), (it(132),aux(798))>>s(3972), (it(132),s(3939))>>s(3973), (it(132),s(3947))>>s(3974), (it(132),s(3948))>>s(3975), (it(132),s(3949))>>s(3976), (it(132),s(3950))>>s(3977), (it(132),s(3951))>>s(3978), (it(132),s(3952))>>s(3979), (it(132),s(3953))>>s(3980), (it(132),s(3954))>>s(3981), (it(132),s(3955))>>s(3982), (it(132),s(3956))>>s(3983), (it(132),s(3957))>>s(3984), (it(132),s(3958))>>s(3985), (it(132),s(3959))>>s(3986), (it(132),s(3960))>>s(3987), (it(132),s(3961))>>s(3988), (it(132),s(3962))>>s(3989), (it(132),s(3963))>>s(3990), (it(132),s(3964))>>s(3991), (it(132),s(3965))>>s(3992), (it(132),s(3966))>>s(3993)]

#### Cost of loops [132] 

 * loop 132:echelon_helper_old(A,B,C,D,E,F,G) -> [echelon_helper_old(A',B',C',D',E',F',G')] 
6*s(3973)+16*s(3974)+324*s(3975)+120*s(3984)+80*s(3985)+40*s(3986)+40*s(3987)+40*s(3988)+80*s(3989)+64*s(3990)+64*s(3991)+64*s(3992)+64*s(3993)+43
  Such that:s(3967) =< B
s(3968) =< 2*B
s(3969) =< D'+1
s(3970) =< 2*D'
s(3971) =< A
s(3972) =< D'
s(3973) =< s(3971)
s(3974) =< s(3972)
s(3975) =< s(3969)
s(3976) =< s(3967)-2
s(3977) =< s(3967)
s(3978) =< s(3975)*s(3967)
s(3976) =< s(3972)
s(3979) =< s(3972)
s(3980) =< s(3975)*s(3977)
s(3981) =< s(3975)*s(3972)
s(3982) =< s(3975)*s(3976)
s(3983) =< s(3975)*s(3979)
s(3984) =< s(3980)
s(3985) =< s(3982)
s(3986) =< s(3983)
s(3987) =< s(3978)
s(3988) =< s(3981)
s(3989) =< s(3969)
s(3989) =< s(3967)
s(3990) =< s(3971)
s(3991) =< s(3971)
s(3990) =< s(3972)
s(3991) =< s(3972)
s(3990) =< s(3967)
s(3990) =< s(3968)
s(3990) =< s(3970)
s(3991) =< s(3970)
s(3992) =< s(3971)
s(3993) =< s(3971)
s(3992) =< s(3972)
s(3993) =< s(3972)
s(3992) =< s(3967)
s(3992) =< s(3968)

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [s(3972)=<A-1,s(3967)=<B]
* Psum in Loop 132: [it(132)=<1,s(4010)=<A,s(4008)=<B,s(4007)=<2*B,s(4009)=<D',s(4012)=<D'+1,s(4011)=<2*D']

###### Computing max_min for s(3972)=<A-1  
   - Applying max/min strategy 
     - Loop 132  increases the expression by [D',A'-D'-1] 
 * Adding constraints:[s(3972)=<aux(799)+aux(800),aux(799)=<A-1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [s(3967)=<B]
* Psum in Loop 132: [it(132)=<1,s(4010)=<A,s(4008)=<B,s(4007)=<2*B,s(4009)=<D',s(4012)=<D'+1,s(4011)=<2*D',aux(800)=<A'-D'-1,aux(800)=<D']

###### Computing max_min for s(3967)=<B  
   - Applying max/min strategy 
     - Loop 132  increases the expression by [B'-D'-1] 
 * Adding constraints:[s(3967)=<aux(801)+aux(802),aux(801)=<B] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [it(132)=<1,s(4010)=<A,s(4008)=<B,s(4007)=<2*B,s(4009)=<D',s(4012)=<D'+1,s(4011)=<2*D',aux(800)=<A'-D'-1,aux(802)=<B'-D'-1,aux(800)=<D']

###### Computing sum for it(132)=<1  in Loop 132 
   - Applying inductive sum strategy 
   - No strategy succeeded 
 * Adding constraints: [] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [s(4010)=<A,s(4008)=<B,s(4007)=<2*B,s(4009)=<D',s(4012)=<D'+1,s(4011)=<2*D',aux(800)=<A'-D'-1,aux(802)=<B'-D'-1,aux(800)=<D']

###### Computing sum for s(4010)=<A  in Loop 132 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(803)=<A] 
 * Adding constraints: [s(4010)=<it(132)*aux(803)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(803)=<A]
* Psum in Loop 132: [s(4008)=<B,s(4007)=<2*B,s(4009)=<D',s(4012)=<D'+1,s(4011)=<2*D',aux(800)=<A'-D'-1,aux(802)=<B'-D'-1,aux(800)=<D']

###### Computing max_min for aux(803)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(803)=<s(3972)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [s(4008)=<B,s(4007)=<2*B,s(4009)=<D',s(4012)=<D'+1,s(4011)=<2*D',aux(800)=<A'-D'-1,aux(802)=<B'-D'-1,aux(800)=<D']

###### Computing sum for s(4008)=<B  in Loop 132 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(804)=<B] 
 * Adding constraints: [s(4008)=<it(132)*aux(804)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(804)=<B]
* Psum in Loop 132: [s(4007)=<2*B,s(4009)=<D',s(4012)=<D'+1,s(4011)=<2*D',aux(800)=<A'-D'-1,aux(802)=<B'-D'-1,aux(800)=<D']

###### Computing max_min for aux(804)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(804)=<s(3967)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [s(4007)=<2*B,s(4009)=<D',s(4012)=<D'+1,s(4011)=<2*D',aux(800)=<A'-D'-1,aux(802)=<B'-D'-1,aux(800)=<D']

###### Computing sum for s(4007)=<2*B  in Loop 132 
   - Found a solution using cacheing 
 * Adding constraints: [s(4007)=<aux(805)*2,aux(805)=<it(132)*aux(804)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [s(4009)=<D',s(4012)=<D'+1,s(4011)=<2*D',aux(800)=<A'-D'-1,aux(802)=<B'-D'-1,aux(800)=<D']

###### Computing sum for s(4009)=<D'  in Loop 132 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(806)=<A-1,aux(806)=<D+1] 
 * Adding constraints: [s(4009)=<it(132)*aux(806)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(806)=<A-1,aux(806)=<D+1]
* Psum in Loop 132: [s(4012)=<D'+1,s(4011)=<2*D',aux(800)=<A'-D'-1,aux(802)=<B'-D'-1,aux(800)=<D']

###### Computing max_min for aux(806)=<A-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(806)=<s(3972)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(806)=<D+1]
* Psum in Loop 132: [s(4012)=<D'+1,s(4011)=<2*D',aux(800)=<A'-D'-1,aux(802)=<B'-D'-1,aux(800)=<D']

###### Computing max_min for aux(806)=<D+1  
   - Applying max/min strategy 
     - Loop 132  increases the expression by 1/1 
 * Adding constraints:[aux(806)=<aux(807)+it(132),aux(807)=<D+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [s(4012)=<D'+1,s(4011)=<2*D',aux(800)=<A'-D'-1,aux(802)=<B'-D'-1,aux(800)=<D']

###### Computing sum for s(4012)=<D'+1  in Loop 132 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(808)=<A,aux(808)=<D+2] 
 * Adding constraints: [s(4012)=<it(132)*aux(808)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(808)=<A,aux(808)=<D+2]
* Psum in Loop 132: [s(4011)=<2*D',aux(800)=<A'-D'-1,aux(802)=<B'-D'-1,aux(800)=<D']

###### Computing max_min for aux(808)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(808)=<s(3972)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(808)=<D+2]
* Psum in Loop 132: [s(4011)=<2*D',aux(800)=<A'-D'-1,aux(802)=<B'-D'-1,aux(800)=<D']

###### Computing max_min for aux(808)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(808)=<aux(806)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [s(4011)=<2*D',aux(800)=<A'-D'-1,aux(802)=<B'-D'-1,aux(800)=<D']

###### Computing sum for s(4011)=<2*D'  in Loop 132 
   - Found a solution using cacheing 
 * Adding constraints: [s(4011)=<aux(809)*2,aux(809)=<it(132)*aux(806)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [aux(800)=<A'-D'-1,aux(802)=<B'-D'-1,aux(800)=<D']

###### Computing sum for aux(800)=<A'-D'-1  in Loop 132 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(810)=<A-1,aux(810)=<D+1] 
 * Adding constraints: [aux(800)=<it(132)*aux(810)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(810)=<A-1,aux(810)=<D+1]
* Psum in Loop 132: [aux(802)=<B'-D'-1,aux(800)=<D']

###### Computing max_min for aux(810)=<A-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(810)=<s(3972)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(810)=<D+1]
* Psum in Loop 132: [aux(802)=<B'-D'-1,aux(800)=<D']

###### Computing max_min for aux(810)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(810)=<aux(806)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [aux(802)=<B'-D'-1,aux(800)=<D']

###### Computing sum for aux(802)=<B'-D'-1  in Loop 132 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [] 
 * Adding constraints: [aux(802)=<it(132)*aux(811)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [aux(800)=<D']

###### Computing sum for aux(800)=<D'  in Loop 132 
   - Found a solution using cacheing 
 * Adding constraints: [aux(800)=<aux(812),aux(812)=<it(132)*aux(806)] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [132] 
Found a cycle in the non-final constraints
 Removed possibly redundant constraints to solve a cycle in the cost structure 
aux(806)=<s(3972)
Found a cycle in the non-final constraints
 Removed possibly redundant constraints to solve a cycle in the cost structure 
aux(800)=<it(132)*aux(810)
aux(808)=<s(3972)+1
aux(810)=<s(3972)

#### Simplifying cost structure of phase [132] 
 * Joined equivalent variables [aux(812),aux(800)] into aux(812)
 * Joined equivalent variables [aux(804),s(3977)] into aux(804)
 * Joined equivalent variables [aux(805),s(4008)] into aux(805)
 * Joined equivalent variables [aux(809),aux(812),s(4009)] into aux(809)

#### Cost of phase [132]:echelon_helper_old(A,B,C,D,E,F,G) -> [echelon_helper_old(A',B',C',D',E',F',G')] 
43*it(132)+6*s(3994)+16*s(3995)+324*s(3996)+120*s(3997)+80*s(3998)+40*s(3999)+40*s(4000)+40*s(4001)+80*s(4002)+64*s(4003)+64*s(4004)+64*s(4005)+64*s(4006)+0
Unbounded itvars
it(132) :  it(132)
s(3994) :  sum(132),s(3973)
s(3995) :  sum(132),s(3974)
s(3996) :  sum(132),s(3975)
s(3997) :  sum(132),s(3984)
s(3998) :  sum(132),s(3985)
s(3999) :  sum(132),s(3986)
s(4000) :  sum(132),s(3987)
s(4001) :  sum(132),s(3988)
s(4002) :  sum(132),s(3989)
s(4003) :  sum(132),s(3990)
s(4004) :  sum(132),s(3991)
s(4005) :  sum(132),s(3992)
s(4006) :  sum(132),s(3993)

#### Simplifying cost structure of chain [[132]] 
 * Joined equivalent variables [it(132),s(3994),s(3995),s(3996),s(3997),s(3998),s(3999),s(4000),s(4001),s(4002),s(4003),s(4004),s(4005),s(4006)] into it(132)

#### Found solution for phase  [133,135] in the cache 

#### Cost of phase [133,135]:echelon_helper_old(A,B,C,D,E,F,G) -> [echelon_helper_old(A',B',C',D',E',F',G')] 
86*it(133)+6*s(3887)+16*s(3888)+244*s(3889)+120*s(3890)+80*s(3891)+40*s(3892)+40*s(3893)+40*s(3894)+80*s(3895)+80*s(3896)+64*s(3897)+64*s(3898)+64*s(3899)+64*s(3900)+6*s(3913)+16*s(3914)+448*s(3915)+240*s(3916)+80*s(3917)+80*s(3918)+40*s(3919)+40*s(3920)+80*s(3921)+80*s(3922)+64*s(3923)+64*s(3924)+64*s(3925)+64*s(3926)+0
Unbounded itvars
it(133) :  it(133)
s(3887) :  sum(133),s(3806)
s(3888) :  sum(133),s(3807)
s(3889) :  sum(133),s(3808)
s(3890) :  sum(133),s(3817)
s(3891) :  sum(133),s(3818)
s(3892) :  sum(133),s(3819)
s(3893) :  sum(133),s(3820)
s(3894) :  sum(133),s(3821)
s(3895) :  sum(133),s(3822)
s(3896) :  sum(133),s(3823)
s(3897) :  sum(133),s(3824)
s(3898) :  sum(133),s(3825)
s(3899) :  sum(133),s(3826)
s(3900) :  sum(133),s(3827)
s(3913) :  sum(135),s(3865)
s(3914) :  sum(135),s(3866)
s(3915) :  sum(135),s(3867)
s(3916) :  sum(135),s(3871)
s(3917) :  sum(135),s(3872)
s(3918) :  sum(135),s(3878)
s(3919) :  sum(135),s(3879)
s(3920) :  sum(135),s(3880)
s(3921) :  sum(135),s(3881)
s(3922) :  sum(135),s(3882)
s(3923) :  sum(135),s(3883)
s(3924) :  sum(135),s(3884)
s(3925) :  sum(135),s(3885)
s(3926) :  sum(135),s(3886)

#### Simplifying cost structure of chain [[133,135],[132]] 
 * Joined equivalent variables [it(132),it(133),s(3887),s(3888),s(3889),s(3890),s(3891),s(3892),s(3893),s(3894),s(3895),s(3896),s(3897),s(3898),s(3899),s(3900),s(3913),s(3914),s(3915),s(3916),s(3917),s(3918),s(3919),s(3920),s(3921),s(3922),s(3923),s(3924),s(3925),s(3926)] into it(132)
 * Renamed intermediate variables: 
[ (eq(151,1),it(130))>>s(4018)]

#### Simplifying cost structure of CE 151 

#### Found solution for phase  [132] in the cache 

#### Cost of phase [132]:echelon_helper_old(A,B,C,D,E,F,G) -> [echelon_helper_old(A',B',C',D',E',F',G')] 
43*it(132)+6*s(3994)+16*s(3995)+324*s(3996)+120*s(3997)+80*s(3998)+40*s(3999)+40*s(4000)+40*s(4001)+80*s(4002)+64*s(4003)+64*s(4004)+64*s(4005)+64*s(4006)+0
Unbounded itvars
it(132) :  it(132)
s(3994) :  sum(132),s(3973)
s(3995) :  sum(132),s(3974)
s(3996) :  sum(132),s(3975)
s(3997) :  sum(132),s(3984)
s(3998) :  sum(132),s(3985)
s(3999) :  sum(132),s(3986)
s(4000) :  sum(132),s(3987)
s(4001) :  sum(132),s(3988)
s(4002) :  sum(132),s(3989)
s(4003) :  sum(132),s(3990)
s(4004) :  sum(132),s(3991)
s(4005) :  sum(132),s(3992)
s(4006) :  sum(132),s(3993)

#### Simplifying cost structure of chain [[132],144] 
 * Joined equivalent variables [it(132),s(3994),s(3995),s(3996),s(3997),s(3998),s(3999),s(4000),s(4001),s(4002),s(4003),s(4004),s(4005),s(4006)] into it(132)

#### Found solution for phase  [133,135] in the cache 

#### Cost of phase [133,135]:echelon_helper_old(A,B,C,D,E,F,G) -> [echelon_helper_old(A',B',C',D',E',F',G')] 
86*it(133)+6*s(3887)+16*s(3888)+244*s(3889)+120*s(3890)+80*s(3891)+40*s(3892)+40*s(3893)+40*s(3894)+80*s(3895)+80*s(3896)+64*s(3897)+64*s(3898)+64*s(3899)+64*s(3900)+6*s(3913)+16*s(3914)+448*s(3915)+240*s(3916)+80*s(3917)+80*s(3918)+40*s(3919)+40*s(3920)+80*s(3921)+80*s(3922)+64*s(3923)+64*s(3924)+64*s(3925)+64*s(3926)+0
Unbounded itvars
it(133) :  it(133)
s(3887) :  sum(133),s(3806)
s(3888) :  sum(133),s(3807)
s(3889) :  sum(133),s(3808)
s(3890) :  sum(133),s(3817)
s(3891) :  sum(133),s(3818)
s(3892) :  sum(133),s(3819)
s(3893) :  sum(133),s(3820)
s(3894) :  sum(133),s(3821)
s(3895) :  sum(133),s(3822)
s(3896) :  sum(133),s(3823)
s(3897) :  sum(133),s(3824)
s(3898) :  sum(133),s(3825)
s(3899) :  sum(133),s(3826)
s(3900) :  sum(133),s(3827)
s(3913) :  sum(135),s(3865)
s(3914) :  sum(135),s(3866)
s(3915) :  sum(135),s(3867)
s(3916) :  sum(135),s(3871)
s(3917) :  sum(135),s(3872)
s(3918) :  sum(135),s(3878)
s(3919) :  sum(135),s(3879)
s(3920) :  sum(135),s(3880)
s(3921) :  sum(135),s(3881)
s(3922) :  sum(135),s(3882)
s(3923) :  sum(135),s(3883)
s(3924) :  sum(135),s(3884)
s(3925) :  sum(135),s(3885)
s(3926) :  sum(135),s(3886)

#### Simplifying cost structure of chain [[133,135],[132],144] 
 * Joined equivalent variables [it(132),it(133),s(3887),s(3888),s(3889),s(3890),s(3891),s(3892),s(3893),s(3894),s(3895),s(3896),s(3897),s(3898),s(3899),s(3900),s(3913),s(3914),s(3915),s(3916),s(3917),s(3918),s(3919),s(3920),s(3921),s(3922),s(3923),s(3924),s(3925),s(3926)] into it(132)

#### Simplifying cost structure of CE 150 
 * Renamed intermediate variables: 
[ (eq(159,1),it(130))>>s(4019)]
 * Renamed intermediate variables: 
[ (eq(159,2),s(1075))>>s(4020), (eq(159,2),aux(211))>>s(4021), (eq(159,2),aux(212))>>s(4022), (eq(159,2),aux(213))>>s(4023), (eq(159,2),aux(214))>>s(4024), (eq(159,2),aux(215))>>s(4025), (eq(159,2),aux(216))>>s(4026), (eq(159,2),s(1073))>>s(4027), (eq(159,2),s(1082))>>s(4028), (eq(159,2),s(1084))>>s(4029), (eq(159,2),s(1086))>>s(4030), (eq(159,2),s(1088))>>s(4031), (eq(159,2),s(1103))>>s(4032), (eq(159,2),s(1105))>>s(4033)]

#### Simplifying cost structure of CE 159 
 * Joined equivalent variables [aux(813),s(4021)] into aux(813)
 * Joined equivalent variables [aux(814),s(4024),s(4025)] into aux(814)

#### Simplifying cost structure of chain [136,145] 

#### Found solution for phase  [132] in the cache 

#### Cost of phase [132]:echelon_helper_old(A,B,C,D,E,F,G) -> [echelon_helper_old(A',B',C',D',E',F',G')] 
43*it(132)+6*s(3994)+16*s(3995)+324*s(3996)+120*s(3997)+80*s(3998)+40*s(3999)+40*s(4000)+40*s(4001)+80*s(4002)+64*s(4003)+64*s(4004)+64*s(4005)+64*s(4006)+0
Unbounded itvars
it(132) :  it(132)
s(3994) :  sum(132),s(3973)
s(3995) :  sum(132),s(3974)
s(3996) :  sum(132),s(3975)
s(3997) :  sum(132),s(3984)
s(3998) :  sum(132),s(3985)
s(3999) :  sum(132),s(3986)
s(4000) :  sum(132),s(3987)
s(4001) :  sum(132),s(3988)
s(4002) :  sum(132),s(3989)
s(4003) :  sum(132),s(3990)
s(4004) :  sum(132),s(3991)
s(4005) :  sum(132),s(3992)
s(4006) :  sum(132),s(3993)
Some Itvars are unbounded [aux(813),aux(814),s(4020),s(4022),s(4023),s(4026)] 
Changing solving method to compute the cost of the chain directly 

#### Computing cost of phase 136 

#### Computing cost of chain [136,145] with linear recursion

#### Computing cost of chain [[132],136,145] with linear recursion
 * Renamed intermediate variables: 
[ (it(132),s(3942))>>s(3967), (it(132),s(3943))>>s(3968), (it(132),s(3946))>>s(3969), (it(132),s(3940))>>s(3970), (it(132),aux(797))>>s(3971), (it(132),aux(798))>>s(3972), (it(132),s(3939))>>s(3973), (it(132),s(3947))>>s(3974), (it(132),s(3948))>>s(3975), (it(132),s(3949))>>s(3976), (it(132),s(3950))>>s(3977), (it(132),s(3951))>>s(3978), (it(132),s(3952))>>s(3979), (it(132),s(3953))>>s(3980), (it(132),s(3954))>>s(3981), (it(132),s(3955))>>s(3982), (it(132),s(3956))>>s(3983), (it(132),s(3957))>>s(3984), (it(132),s(3958))>>s(3985), (it(132),s(3959))>>s(3986), (it(132),s(3960))>>s(3987), (it(132),s(3961))>>s(3988), (it(132),s(3962))>>s(3989), (it(132),s(3963))>>s(3990), (it(132),s(3964))>>s(3991), (it(132),s(3965))>>s(3992), (it(132),s(3966))>>s(3993)]

#### Cost of loops [132] 

 * loop 132:echelon_helper_old(A,B,C,D,E,F,G) -> [echelon_helper_old(A',B',C',D',E',F',G')] 
6*s(3973)+16*s(3974)+324*s(3975)+120*s(3984)+80*s(3985)+40*s(3986)+40*s(3987)+40*s(3988)+80*s(3989)+64*s(3990)+64*s(3991)+64*s(3992)+64*s(3993)+43
  Such that:s(3967) =< B
s(3968) =< 2*B
s(3969) =< D'+1
s(3970) =< 2*D'
s(3971) =< A
s(3972) =< D'
s(3973) =< s(3971)
s(3974) =< s(3972)
s(3975) =< s(3969)
s(3976) =< s(3967)-2
s(3977) =< s(3967)
s(3978) =< s(3975)*s(3967)
s(3976) =< s(3972)
s(3979) =< s(3972)
s(3980) =< s(3975)*s(3977)
s(3981) =< s(3975)*s(3972)
s(3982) =< s(3975)*s(3976)
s(3983) =< s(3975)*s(3979)
s(3984) =< s(3980)
s(3985) =< s(3982)
s(3986) =< s(3983)
s(3987) =< s(3978)
s(3988) =< s(3981)
s(3989) =< s(3969)
s(3989) =< s(3967)
s(3990) =< s(3971)
s(3991) =< s(3971)
s(3990) =< s(3972)
s(3991) =< s(3972)
s(3990) =< s(3967)
s(3990) =< s(3968)
s(3990) =< s(3970)
s(3991) =< s(3970)
s(3992) =< s(3971)
s(3993) =< s(3971)
s(3992) =< s(3972)
s(3993) =< s(3972)
s(3992) =< s(3967)
s(3992) =< s(3968)

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [s(3972)=<A-1,s(3967)=<B]
* Psum in Loop 132: [it(132)=<1,s(4010)=<A,s(4008)=<B,s(4007)=<2*B,s(4009)=<D',s(4012)=<D'+1,s(4011)=<2*D']
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for s(3972)=<A-1  
   - Applying max/min strategy 
     - Loop 132  increases the expression by [D',A'-D'-1] 
 * Adding constraints:[s(3972)=<aux(815)+aux(816),aux(815)=<A-1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [s(3967)=<B]
* Psum in Loop 132: [it(132)=<1,s(4010)=<A,s(4008)=<B,s(4007)=<2*B,s(4009)=<D',s(4012)=<D'+1,s(4011)=<2*D',aux(816)=<A'-D'-1,aux(816)=<D']
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for s(3967)=<B  
   - Applying max/min strategy 
     - Loop 132  increases the expression by [B'-D'-1] 
 * Adding constraints:[s(3967)=<aux(817)+aux(818),aux(817)=<B] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [it(132)=<1,s(4010)=<A,s(4008)=<B,s(4007)=<2*B,s(4009)=<D',s(4012)=<D'+1,s(4011)=<2*D',aux(816)=<A'-D'-1,aux(818)=<B'-D'-1,aux(816)=<D']
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for it(132)=<1  in Loop 132 
   - Applying inductive sum strategy 
   - No strategy succeeded 
 * Adding constraints: [] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [s(4010)=<A,s(4008)=<B,s(4007)=<2*B,s(4009)=<D',s(4012)=<D'+1,s(4011)=<2*D',aux(816)=<A'-D'-1,aux(818)=<B'-D'-1,aux(816)=<D']
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for s(4010)=<A  in Loop 132 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(819)=<A] 
 * Adding constraints: [s(4010)=<it(132)*aux(819)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(819)=<A]
* Psum in Loop 132: [s(4008)=<B,s(4007)=<2*B,s(4009)=<D',s(4012)=<D'+1,s(4011)=<2*D',aux(816)=<A'-D'-1,aux(818)=<B'-D'-1,aux(816)=<D']
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(819)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(819)=<s(3972)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [s(4008)=<B,s(4007)=<2*B,s(4009)=<D',s(4012)=<D'+1,s(4011)=<2*D',aux(816)=<A'-D'-1,aux(818)=<B'-D'-1,aux(816)=<D']
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for s(4008)=<B  in Loop 132 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(820)=<B] 
 * Adding constraints: [s(4008)=<it(132)*aux(820)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(820)=<B]
* Psum in Loop 132: [s(4007)=<2*B,s(4009)=<D',s(4012)=<D'+1,s(4011)=<2*D',aux(816)=<A'-D'-1,aux(818)=<B'-D'-1,aux(816)=<D']
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(820)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(820)=<s(3967)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [s(4007)=<2*B,s(4009)=<D',s(4012)=<D'+1,s(4011)=<2*D',aux(816)=<A'-D'-1,aux(818)=<B'-D'-1,aux(816)=<D']
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for s(4007)=<2*B  in Loop 132 
   - Found a solution using cacheing 
 * Adding constraints: [s(4007)=<aux(821)*2,aux(821)=<it(132)*aux(820)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [s(4009)=<D',s(4012)=<D'+1,s(4011)=<2*D',aux(816)=<A'-D'-1,aux(818)=<B'-D'-1,aux(816)=<D']
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for s(4009)=<D'  in Loop 132 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(822)=<A-1,aux(822)=<D+1] 
 * Adding constraints: [s(4009)=<it(132)*aux(822)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(822)=<A-1,aux(822)=<D+1]
* Psum in Loop 132: [s(4012)=<D'+1,s(4011)=<2*D',aux(816)=<A'-D'-1,aux(818)=<B'-D'-1,aux(816)=<D']
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(822)=<A-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(822)=<s(3972)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(822)=<D+1]
* Psum in Loop 132: [s(4012)=<D'+1,s(4011)=<2*D',aux(816)=<A'-D'-1,aux(818)=<B'-D'-1,aux(816)=<D']
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(822)=<D+1  
   - Applying max/min strategy 
     - Loop 132  increases the expression by 1/1 
 * Adding constraints:[aux(822)=<aux(823)+it(132),aux(823)=<D+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [s(4012)=<D'+1,s(4011)=<2*D',aux(816)=<A'-D'-1,aux(818)=<B'-D'-1,aux(816)=<D']
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for s(4012)=<D'+1  in Loop 132 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(824)=<A,aux(824)=<D+2] 
 * Adding constraints: [s(4012)=<it(132)*aux(824)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(824)=<A,aux(824)=<D+2]
* Psum in Loop 132: [s(4011)=<2*D',aux(816)=<A'-D'-1,aux(818)=<B'-D'-1,aux(816)=<D']
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(824)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(824)=<s(3972)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(824)=<D+2]
* Psum in Loop 132: [s(4011)=<2*D',aux(816)=<A'-D'-1,aux(818)=<B'-D'-1,aux(816)=<D']
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(824)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(824)=<aux(822)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [s(4011)=<2*D',aux(816)=<A'-D'-1,aux(818)=<B'-D'-1,aux(816)=<D']
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for s(4011)=<2*D'  in Loop 132 
   - Found a solution using cacheing 
 * Adding constraints: [s(4011)=<aux(825)*2,aux(825)=<it(132)*aux(822)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [aux(816)=<A'-D'-1,aux(818)=<B'-D'-1,aux(816)=<D']
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for aux(816)=<A'-D'-1  in Loop 132 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(826)=<A-1,aux(826)=<D+1] 
 * Adding constraints: [aux(816)=<it(132)*aux(826)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(826)=<A-1,aux(826)=<D+1]
* Psum in Loop 132: [aux(818)=<B'-D'-1,aux(816)=<D']
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(826)=<A-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(826)=<s(3972)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(826)=<D+1]
* Psum in Loop 132: [aux(818)=<B'-D'-1,aux(816)=<D']
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(826)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(826)=<aux(822)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [aux(818)=<B'-D'-1,aux(816)=<D']
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for aux(818)=<B'-D'-1  in Loop 132 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [] 
 * Adding constraints: [aux(818)=<it(132)*aux(827)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [aux(816)=<D']
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for aux(816)=<D'  in Loop 132 
   - Found a solution using cacheing 
 * Adding constraints: [aux(816)=<aux(828),aux(828)=<it(132)*aux(822)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for it([136,145])=<1  in Chain-Tail [136,145] 
   - Applying inductive sum strategy 
     - head Candidate: 1 
       - Loop 132 is collaborative
     - tail Candidate: 1 
       - Loop 132 is collaborative
 * Adding constraints: [it([136,145])=<1,it([136,145])=<1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Chain-Tail [136,145]: [s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for s(4045)=<A  in Chain-Tail [136,145] 
   - Applying inductive sum strategy 
     - head Candidate: A 
       - Loop 132 adds an expression [D',D+1]
     - tail Candidate: A 
       - Loop 132 adds an expression [D',D+1]
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(833)=<A] 
 * Adding constraints: [s(4045)=<it([136,145])*aux(833),s(4045)=<aux(829)+aux(830),s(4045)=<aux(831)+aux(832),aux(830)=<A,aux(832)=<A] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(833)=<A]
* Psum in Loop 132: [aux(829)=<D+1,aux(831)=<D+1,aux(829)=<D',aux(831)=<D']
* Psum in Chain-Tail [136,145]: [s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(833)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(833)=<s(3972)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [aux(829)=<D+1,aux(831)=<D+1,aux(829)=<D',aux(831)=<D']
* Psum in Chain-Tail [136,145]: [s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for aux(829)=<D+1  in Loop 132 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(834)=<D+1] 
 * Adding constraints: [aux(829)=<it(132)*aux(834)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(834)=<D+1]
* Psum in Loop 132: [aux(831)=<D+1,aux(829)=<D',aux(831)=<D']
* Psum in Chain-Tail [136,145]: [s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(834)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(834)=<aux(822)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [aux(831)=<D+1,aux(829)=<D',aux(831)=<D']
* Psum in Chain-Tail [136,145]: [s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for aux(831)=<D+1  in Loop 132 
   - Found a solution using cacheing 
 * Adding constraints: [aux(831)=<aux(835),aux(835)=<it(132)*aux(834)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [aux(829)=<D',aux(831)=<D']
* Psum in Chain-Tail [136,145]: [s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for aux(829)=<D'  in Loop 132 
   - Found a solution using cacheing 
 * Adding constraints: [aux(829)=<aux(836),aux(836)=<it(132)*aux(822)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [aux(831)=<D']
* Psum in Chain-Tail [136,145]: [s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for aux(831)=<D'  in Loop 132 
   - Found a solution using cacheing 
 * Adding constraints: [aux(831)=<aux(837),aux(837)=<it(132)*aux(822)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Chain-Tail [136,145]: [s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for s(4043)=<B  in Chain-Tail [136,145] 
   - Applying inductive sum strategy 
     - head Candidate: B 
       - Loop 132 has undefined behavior 
     - tail Candidate: B 
       - Loop 132 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(838)=<B] 
 * Adding constraints: [s(4043)=<it([136,145])*aux(838)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(838)=<B]
* Psum in Chain-Tail [136,145]: [s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(838)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(838)=<s(3967)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Chain-Tail [136,145]: [s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for s(4042)=<2*B  in Chain-Tail [136,145] 
   - Found a solution using cacheing 
 * Adding constraints: [s(4042)=<aux(839)*2,aux(839)=<it([136,145])*aux(838)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Chain-Tail [136,145]: [s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for s(4044)=<D+1  in Chain-Tail [136,145] 
   - Applying inductive sum strategy 
     - head Candidate: D+1 
       - Loop 132 adds a constant 1/1 
     - tail Candidate: D+1 
       - Loop 132 adds a constant 1/1 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(842)=<D+1] 
 * Adding constraints: [s(4044)=<it([136,145])*aux(842),s(4044)=<it(132)+aux(840),s(4044)=<it(132)+aux(841),aux(840)=<D+1,aux(841)=<D+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(842)=<D+1]
* Psum in Chain-Tail [136,145]: [s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(842)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(842)=<aux(822)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Chain-Tail [136,145]: [s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for s(4047)=<D+2  in Chain-Tail [136,145] 
   - Applying inductive sum strategy 
     - head Candidate: D+2 
       - Loop 132 adds a constant 1/1 
     - tail Candidate: D+2 
       - Loop 132 adds a constant 1/1 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(845)=<D+2] 
 * Adding constraints: [s(4047)=<it([136,145])*aux(845),s(4047)=<it(132)+aux(843),s(4047)=<it(132)+aux(844),aux(843)=<D+2,aux(844)=<D+2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(845)=<D+2]
* Psum in Chain-Tail [136,145]: [s(4046)=<2*D+2]

###### Computing max_min for aux(845)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(845)=<aux(822)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Chain-Tail [136,145]: [s(4046)=<2*D+2]

###### Computing sum for s(4046)=<2*D+2  in Chain-Tail [136,145] 
   - Found a solution using cacheing 
 * Adding constraints: [s(4046)=<aux(846)*2,aux(846)=<it([136,145])*aux(842),aux(846)=<it(132)+aux(840),aux(846)=<it(132)+aux(841)] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [132,[136,145]] 
Found a cycle in the non-final constraints
 Removed possibly redundant constraints to solve a cycle in the cost structure 
s(4044)=<it([136,145])*aux(842)
s(4047)=<it([136,145])*aux(845)
aux(846)=<it([136,145])*aux(842)
aux(822)=<s(3972)
Found a cycle in the non-final constraints
 Removed possibly redundant constraints to solve a cycle in the cost structure 
aux(816)=<it(132)*aux(826)
s(4045)=<it([136,145])*aux(833)
aux(824)=<s(3972)+1
aux(826)=<s(3972)

#### Simplifying cost structure of phase [132,[136,145]] 
 * Joined equivalent variables [aux(828),aux(816)] into aux(828)
 * Joined equivalent variables [aux(847),aux(815),aux(830),aux(832)] into aux(847)
 * Joined equivalent variables [aux(848),aux(823),aux(840),aux(841)] into aux(848)
 * Joined equivalent variables [aux(849),aux(843),aux(844)] into aux(849)
 * Joined equivalent variables [aux(846),s(4044)] into aux(846)
 * Joined equivalent variables [aux(820),aux(838),s(3977)] into aux(820)
 * Joined equivalent variables [aux(839),s(4043)] into aux(839)
 * Joined equivalent variables [aux(821),s(4008)] into aux(821)
 * Joined equivalent variables [aux(824),aux(845)] into aux(824)
 * Joined equivalent variables [aux(826),aux(834),aux(842)] into aux(826)
 * Joined equivalent variables [aux(825),aux(828),aux(836),aux(837),s(4009)] into aux(825)
 * Joined equivalent variables [aux(819),aux(833)] into aux(819)

#### Cost of phase [132]:echelon_helper_old(A,B,C,D,E,F,G) -> [] 
43*it(132)+49*it([136,145])+6*s(3994)+16*s(3995)+324*s(3996)+120*s(3997)+80*s(3998)+40*s(3999)+40*s(4000)+40*s(4001)+80*s(4002)+64*s(4003)+64*s(4004)+64*s(4005)+64*s(4006)+6*s(4034)+16*s(4035)+80*s(4036)+80*s(4037)+64*s(4038)+64*s(4039)+64*s(4040)+64*s(4041)+0
  Such that:it([136,145]) =< 1

Unbounded itvars
it(132) :  it(132)
s(3994) :  sum(132),s(3973)
s(3995) :  sum(132),s(3974)
s(3996) :  sum(132),s(3975)
s(3997) :  sum(132),s(3984)
s(3998) :  sum(132),s(3985)
s(3999) :  sum(132),s(3986)
s(4000) :  sum(132),s(3987)
s(4001) :  sum(132),s(3988)
s(4002) :  sum(132),s(3989)
s(4003) :  sum(132),s(3990)
s(4004) :  sum(132),s(3991)
s(4005) :  sum(132),s(3992)
s(4006) :  sum(132),s(3993)
s(4034) :  sum([136,145]),s(4019)
s(4035) :  sum([136,145]),s(4027)
s(4036) :  sum([136,145]),s(4028)
s(4037) :  sum([136,145]),s(4029)
s(4038) :  sum([136,145]),s(4030)
s(4039) :  sum([136,145]),s(4031)
s(4040) :  sum([136,145]),s(4032)
s(4041) :  sum([136,145]),s(4033)

#### Found solution for phase  [133,135] in the cache 

#### Cost of phase [133,135]:echelon_helper_old(A,B,C,D,E,F,G) -> [echelon_helper_old(A',B',C',D',E',F',G')] 
86*it(133)+6*s(3887)+16*s(3888)+244*s(3889)+120*s(3890)+80*s(3891)+40*s(3892)+40*s(3893)+40*s(3894)+80*s(3895)+80*s(3896)+64*s(3897)+64*s(3898)+64*s(3899)+64*s(3900)+6*s(3913)+16*s(3914)+448*s(3915)+240*s(3916)+80*s(3917)+80*s(3918)+40*s(3919)+40*s(3920)+80*s(3921)+80*s(3922)+64*s(3923)+64*s(3924)+64*s(3925)+64*s(3926)+0
Unbounded itvars
it(133) :  it(133)
s(3887) :  sum(133),s(3806)
s(3888) :  sum(133),s(3807)
s(3889) :  sum(133),s(3808)
s(3890) :  sum(133),s(3817)
s(3891) :  sum(133),s(3818)
s(3892) :  sum(133),s(3819)
s(3893) :  sum(133),s(3820)
s(3894) :  sum(133),s(3821)
s(3895) :  sum(133),s(3822)
s(3896) :  sum(133),s(3823)
s(3897) :  sum(133),s(3824)
s(3898) :  sum(133),s(3825)
s(3899) :  sum(133),s(3826)
s(3900) :  sum(133),s(3827)
s(3913) :  sum(135),s(3865)
s(3914) :  sum(135),s(3866)
s(3915) :  sum(135),s(3867)
s(3916) :  sum(135),s(3871)
s(3917) :  sum(135),s(3872)
s(3918) :  sum(135),s(3878)
s(3919) :  sum(135),s(3879)
s(3920) :  sum(135),s(3880)
s(3921) :  sum(135),s(3881)
s(3922) :  sum(135),s(3882)
s(3923) :  sum(135),s(3883)
s(3924) :  sum(135),s(3884)
s(3925) :  sum(135),s(3885)
s(3926) :  sum(135),s(3886)

#### Simplifying cost structure of chain [[133,135],[132],136,145] 
 * Joined equivalent variables [it(132),it(133),s(3887),s(3888),s(3889),s(3890),s(3891),s(3892),s(3893),s(3894),s(3895),s(3896),s(3897),s(3898),s(3899),s(3900),s(3913),s(3914),s(3915),s(3916),s(3917),s(3918),s(3919),s(3920),s(3921),s(3922),s(3923),s(3924),s(3925),s(3926),s(3994),s(3995),s(3996),s(3997),s(3998),s(3999),s(4000),s(4001),s(4002),s(4003),s(4004),s(4005),s(4006),s(4034),s(4035),s(4036),s(4037),s(4038),s(4039),s(4040),s(4041)] into it(132)
 * Renamed intermediate variables: 
[ (eq(161,1),it(130))>>s(4048)]
 * Renamed intermediate variables: 
[ (eq(161,2),s(1187))>>s(4049), (eq(161,2),aux(234))>>s(4050), (eq(161,2),aux(235))>>s(4051), (eq(161,2),aux(236))>>s(4052), (eq(161,2),aux(237))>>s(4053), (eq(161,2),aux(238))>>s(4054), (eq(161,2),aux(239))>>s(4055), (eq(161,2),s(1185))>>s(4056), (eq(161,2),s(1196))>>s(4057), (eq(161,2),s(1207))>>s(4058), (eq(161,2),s(1210))>>s(4059), (eq(161,2),s(1211))>>s(4060), (eq(161,2),s(1213))>>s(4061), (eq(161,2),s(1215))>>s(4062), (eq(161,2),s(1216))>>s(4063), (eq(161,2),s(1217))>>s(4064), (eq(161,2),s(1218))>>s(4065), (eq(161,2),s(1219))>>s(4066), (eq(161,2),s(1220))>>s(4067), (eq(161,2),s(1221))>>s(4068), (eq(161,2),s(1222))>>s(4069), (eq(161,2),s(1223))>>s(4070), (eq(161,2),s(1194))>>s(4071), (eq(161,2),s(1198))>>s(4072), (eq(161,2),s(1200))>>s(4073), (eq(161,2),s(1237))>>s(4074), (eq(161,2),s(1239))>>s(4075)]

#### Simplifying cost structure of CE 161 
 * Joined equivalent variables [aux(850),s(4050)] into aux(850)
 * Joined equivalent variables [aux(851),s(4053),s(4054)] into aux(851)

#### Simplifying cost structure of chain [134,144] 

#### Found solution for phase  [132] in the cache 

#### Cost of phase [132]:echelon_helper_old(A,B,C,D,E,F,G) -> [echelon_helper_old(A',B',C',D',E',F',G')] 
43*it(132)+6*s(3994)+16*s(3995)+324*s(3996)+120*s(3997)+80*s(3998)+40*s(3999)+40*s(4000)+40*s(4001)+80*s(4002)+64*s(4003)+64*s(4004)+64*s(4005)+64*s(4006)+0
Unbounded itvars
it(132) :  it(132)
s(3994) :  sum(132),s(3973)
s(3995) :  sum(132),s(3974)
s(3996) :  sum(132),s(3975)
s(3997) :  sum(132),s(3984)
s(3998) :  sum(132),s(3985)
s(3999) :  sum(132),s(3986)
s(4000) :  sum(132),s(3987)
s(4001) :  sum(132),s(3988)
s(4002) :  sum(132),s(3989)
s(4003) :  sum(132),s(3990)
s(4004) :  sum(132),s(3991)
s(4005) :  sum(132),s(3992)
s(4006) :  sum(132),s(3993)
Some Itvars are unbounded [aux(850),aux(851),s(4049),s(4051),s(4052),s(4055)] 
Changing solving method to compute the cost of the chain directly 

#### Computing cost of phase 134 

#### Computing cost of chain [134,144] with linear recursion

#### Computing cost of chain [[132],134,144] with linear recursion
 * Renamed intermediate variables: 
[ (it(132),s(3942))>>s(3967), (it(132),s(3943))>>s(3968), (it(132),s(3946))>>s(3969), (it(132),s(3940))>>s(3970), (it(132),aux(797))>>s(3971), (it(132),aux(798))>>s(3972), (it(132),s(3939))>>s(3973), (it(132),s(3947))>>s(3974), (it(132),s(3948))>>s(3975), (it(132),s(3949))>>s(3976), (it(132),s(3950))>>s(3977), (it(132),s(3951))>>s(3978), (it(132),s(3952))>>s(3979), (it(132),s(3953))>>s(3980), (it(132),s(3954))>>s(3981), (it(132),s(3955))>>s(3982), (it(132),s(3956))>>s(3983), (it(132),s(3957))>>s(3984), (it(132),s(3958))>>s(3985), (it(132),s(3959))>>s(3986), (it(132),s(3960))>>s(3987), (it(132),s(3961))>>s(3988), (it(132),s(3962))>>s(3989), (it(132),s(3963))>>s(3990), (it(132),s(3964))>>s(3991), (it(132),s(3965))>>s(3992), (it(132),s(3966))>>s(3993)]

#### Cost of loops [132] 

 * loop 132:echelon_helper_old(A,B,C,D,E,F,G) -> [echelon_helper_old(A',B',C',D',E',F',G')] 
6*s(3973)+16*s(3974)+324*s(3975)+120*s(3984)+80*s(3985)+40*s(3986)+40*s(3987)+40*s(3988)+80*s(3989)+64*s(3990)+64*s(3991)+64*s(3992)+64*s(3993)+43
  Such that:s(3967) =< B
s(3968) =< 2*B
s(3969) =< D'+1
s(3970) =< 2*D'
s(3971) =< A
s(3972) =< D'
s(3973) =< s(3971)
s(3974) =< s(3972)
s(3975) =< s(3969)
s(3976) =< s(3967)-2
s(3977) =< s(3967)
s(3978) =< s(3975)*s(3967)
s(3976) =< s(3972)
s(3979) =< s(3972)
s(3980) =< s(3975)*s(3977)
s(3981) =< s(3975)*s(3972)
s(3982) =< s(3975)*s(3976)
s(3983) =< s(3975)*s(3979)
s(3984) =< s(3980)
s(3985) =< s(3982)
s(3986) =< s(3983)
s(3987) =< s(3978)
s(3988) =< s(3981)
s(3989) =< s(3969)
s(3989) =< s(3967)
s(3990) =< s(3971)
s(3991) =< s(3971)
s(3990) =< s(3972)
s(3991) =< s(3972)
s(3990) =< s(3967)
s(3990) =< s(3968)
s(3990) =< s(3970)
s(3991) =< s(3970)
s(3992) =< s(3971)
s(3993) =< s(3971)
s(3992) =< s(3972)
s(3993) =< s(3972)
s(3992) =< s(3967)
s(3992) =< s(3968)

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [s(3972)=<A-1,s(3967)=<B,s(4051)=<B,aux(851)=<D+1]
* Psum in Loop 132: [it(132)=<1,s(4010)=<A,s(4008)=<B,s(4007)=<2*B,s(4009)=<D',s(4012)=<D'+1,s(4011)=<2*D']
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for s(3972)=<A-1  
   - Applying max/min strategy 
     - Loop 132  increases the expression by [D',A'-D'-1] 
 * Adding constraints:[s(3972)=<aux(852)+aux(853),aux(852)=<A-1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [s(3967)=<B,s(4051)=<B,aux(851)=<D+1]
* Psum in Loop 132: [it(132)=<1,s(4010)=<A,s(4008)=<B,s(4007)=<2*B,s(4009)=<D',s(4012)=<D'+1,s(4011)=<2*D',aux(853)=<A'-D'-1,aux(853)=<D']
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for s(3967)=<B  
   - Applying max/min strategy 
     - Loop 132  increases the expression by [B'-D'-1] 
 * Adding constraints:[s(3967)=<aux(854)+aux(855),aux(854)=<B] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [s(4051)=<B,aux(851)=<D+1]
* Psum in Loop 132: [it(132)=<1,s(4010)=<A,s(4008)=<B,s(4007)=<2*B,s(4009)=<D',s(4012)=<D'+1,s(4011)=<2*D',aux(853)=<A'-D'-1,aux(855)=<B'-D'-1,aux(853)=<D']
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for s(4051)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[s(4051)=<s(3967)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(851)=<D+1]
* Psum in Loop 132: [it(132)=<1,s(4010)=<A,s(4008)=<B,s(4007)=<2*B,s(4009)=<D',s(4012)=<D'+1,s(4011)=<2*D',aux(853)=<A'-D'-1,aux(855)=<B'-D'-1,aux(853)=<D']
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(851)=<D+1  
   - Applying max/min strategy 
     - Loop 132  increases the expression by 1/1 
 * Adding constraints:[aux(851)=<aux(856)+it(132),aux(856)=<D+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [it(132)=<1,s(4010)=<A,s(4008)=<B,s(4007)=<2*B,s(4009)=<D',s(4012)=<D'+1,s(4011)=<2*D',aux(853)=<A'-D'-1,aux(855)=<B'-D'-1,aux(853)=<D']
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for it(132)=<1  in Loop 132 
   - Applying inductive sum strategy 
   - No strategy succeeded 
 * Adding constraints: [] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [s(4010)=<A,s(4008)=<B,s(4007)=<2*B,s(4009)=<D',s(4012)=<D'+1,s(4011)=<2*D',aux(853)=<A'-D'-1,aux(855)=<B'-D'-1,aux(853)=<D']
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for s(4010)=<A  in Loop 132 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(857)=<A] 
 * Adding constraints: [s(4010)=<it(132)*aux(857)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(857)=<A]
* Psum in Loop 132: [s(4008)=<B,s(4007)=<2*B,s(4009)=<D',s(4012)=<D'+1,s(4011)=<2*D',aux(853)=<A'-D'-1,aux(855)=<B'-D'-1,aux(853)=<D']
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(857)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(857)=<s(3972)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [s(4008)=<B,s(4007)=<2*B,s(4009)=<D',s(4012)=<D'+1,s(4011)=<2*D',aux(853)=<A'-D'-1,aux(855)=<B'-D'-1,aux(853)=<D']
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for s(4008)=<B  in Loop 132 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(858)=<B] 
 * Adding constraints: [s(4008)=<it(132)*aux(858)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(858)=<B]
* Psum in Loop 132: [s(4007)=<2*B,s(4009)=<D',s(4012)=<D'+1,s(4011)=<2*D',aux(853)=<A'-D'-1,aux(855)=<B'-D'-1,aux(853)=<D']
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(858)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(858)=<s(3967)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [s(4007)=<2*B,s(4009)=<D',s(4012)=<D'+1,s(4011)=<2*D',aux(853)=<A'-D'-1,aux(855)=<B'-D'-1,aux(853)=<D']
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for s(4007)=<2*B  in Loop 132 
   - Found a solution using cacheing 
 * Adding constraints: [s(4007)=<aux(859)*2,aux(859)=<it(132)*aux(858)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [s(4009)=<D',s(4012)=<D'+1,s(4011)=<2*D',aux(853)=<A'-D'-1,aux(855)=<B'-D'-1,aux(853)=<D']
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for s(4009)=<D'  in Loop 132 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(860)=<A-1,aux(860)=<D+1] 
 * Adding constraints: [s(4009)=<it(132)*aux(860)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(860)=<A-1,aux(860)=<D+1]
* Psum in Loop 132: [s(4012)=<D'+1,s(4011)=<2*D',aux(853)=<A'-D'-1,aux(855)=<B'-D'-1,aux(853)=<D']
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(860)=<A-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(860)=<s(3972)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(860)=<D+1]
* Psum in Loop 132: [s(4012)=<D'+1,s(4011)=<2*D',aux(853)=<A'-D'-1,aux(855)=<B'-D'-1,aux(853)=<D']
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(860)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(860)=<aux(851)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [s(4012)=<D'+1,s(4011)=<2*D',aux(853)=<A'-D'-1,aux(855)=<B'-D'-1,aux(853)=<D']
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for s(4012)=<D'+1  in Loop 132 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(861)=<A,aux(861)=<D+2] 
 * Adding constraints: [s(4012)=<it(132)*aux(861)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(861)=<A,aux(861)=<D+2]
* Psum in Loop 132: [s(4011)=<2*D',aux(853)=<A'-D'-1,aux(855)=<B'-D'-1,aux(853)=<D']
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(861)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(861)=<s(3972)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(861)=<D+2]
* Psum in Loop 132: [s(4011)=<2*D',aux(853)=<A'-D'-1,aux(855)=<B'-D'-1,aux(853)=<D']
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(861)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(861)=<aux(851)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [s(4011)=<2*D',aux(853)=<A'-D'-1,aux(855)=<B'-D'-1,aux(853)=<D']
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for s(4011)=<2*D'  in Loop 132 
   - Found a solution using cacheing 
 * Adding constraints: [s(4011)=<aux(862)*2,aux(862)=<it(132)*aux(860)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [aux(853)=<A'-D'-1,aux(855)=<B'-D'-1,aux(853)=<D']
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for aux(853)=<A'-D'-1  in Loop 132 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(863)=<A-1,aux(863)=<D+1] 
 * Adding constraints: [aux(853)=<it(132)*aux(863)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(863)=<A-1,aux(863)=<D+1]
* Psum in Loop 132: [aux(855)=<B'-D'-1,aux(853)=<D']
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(863)=<A-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(863)=<s(3972)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(863)=<D+1]
* Psum in Loop 132: [aux(855)=<B'-D'-1,aux(853)=<D']
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(863)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(863)=<aux(851)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [aux(855)=<B'-D'-1,aux(853)=<D']
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for aux(855)=<B'-D'-1  in Loop 132 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [] 
 * Adding constraints: [aux(855)=<it(132)*aux(864)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [aux(853)=<D']
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for aux(853)=<D'  in Loop 132 
   - Found a solution using cacheing 
 * Adding constraints: [aux(853)=<aux(865),aux(865)=<it(132)*aux(860)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for it([134,144])=<1  in Chain-Tail [134,144] 
   - Applying inductive sum strategy 
     - head Candidate: 1 
       - Loop 132 is collaborative
     - tail Candidate: 1 
       - Loop 132 is collaborative
 * Adding constraints: [it([134,144])=<1,it([134,144])=<1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Chain-Tail [134,144]: [s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for s(4093)=<A  in Chain-Tail [134,144] 
   - Applying inductive sum strategy 
     - head Candidate: A 
       - Loop 132 adds an expression [D',D+1]
     - tail Candidate: A 
       - Loop 132 adds an expression [D',D+1]
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(870)=<A] 
 * Adding constraints: [s(4093)=<it([134,144])*aux(870),s(4093)=<aux(866)+aux(867),s(4093)=<aux(868)+aux(869),aux(867)=<A,aux(869)=<A] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(870)=<A]
* Psum in Loop 132: [aux(866)=<D+1,aux(868)=<D+1,aux(866)=<D',aux(868)=<D']
* Psum in Chain-Tail [134,144]: [s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(870)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(870)=<s(3972)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [aux(866)=<D+1,aux(868)=<D+1,aux(866)=<D',aux(868)=<D']
* Psum in Chain-Tail [134,144]: [s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for aux(866)=<D+1  in Loop 132 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(871)=<D+1] 
 * Adding constraints: [aux(866)=<it(132)*aux(871)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(871)=<D+1]
* Psum in Loop 132: [aux(868)=<D+1,aux(866)=<D',aux(868)=<D']
* Psum in Chain-Tail [134,144]: [s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(871)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(871)=<aux(851)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [aux(868)=<D+1,aux(866)=<D',aux(868)=<D']
* Psum in Chain-Tail [134,144]: [s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for aux(868)=<D+1  in Loop 132 
   - Found a solution using cacheing 
 * Adding constraints: [aux(868)=<aux(872),aux(872)=<it(132)*aux(871)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [aux(866)=<D',aux(868)=<D']
* Psum in Chain-Tail [134,144]: [s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for aux(866)=<D'  in Loop 132 
   - Found a solution using cacheing 
 * Adding constraints: [aux(866)=<aux(873),aux(873)=<it(132)*aux(860)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 132: [aux(868)=<D']
* Psum in Chain-Tail [134,144]: [s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for aux(868)=<D'  in Loop 132 
   - Found a solution using cacheing 
 * Adding constraints: [aux(868)=<aux(874),aux(874)=<it(132)*aux(860)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Chain-Tail [134,144]: [s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for s(4091)=<B  in Chain-Tail [134,144] 
   - Applying inductive sum strategy 
     - head Candidate: B 
       - Loop 132 has undefined behavior 
     - tail Candidate: B 
       - Loop 132 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(875)=<B] 
 * Adding constraints: [s(4091)=<it([134,144])*aux(875)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(875)=<B]
* Psum in Chain-Tail [134,144]: [s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(875)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(875)=<s(3967)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Chain-Tail [134,144]: [s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for s(4090)=<2*B  in Chain-Tail [134,144] 
   - Found a solution using cacheing 
 * Adding constraints: [s(4090)=<aux(876)*2,aux(876)=<it([134,144])*aux(875)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Chain-Tail [134,144]: [s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for s(4092)=<D+1  in Chain-Tail [134,144] 
   - Applying inductive sum strategy 
     - head Candidate: D+1 
       - Loop 132 adds a constant 1/1 
     - tail Candidate: D+1 
       - Loop 132 adds a constant 1/1 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(879)=<D+1] 
 * Adding constraints: [s(4092)=<it([134,144])*aux(879),s(4092)=<it(132)+aux(877),s(4092)=<it(132)+aux(878),aux(877)=<D+1,aux(878)=<D+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(879)=<D+1]
* Psum in Chain-Tail [134,144]: [s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(879)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(879)=<aux(851)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Chain-Tail [134,144]: [s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for s(4095)=<D+2  in Chain-Tail [134,144] 
   - Applying inductive sum strategy 
     - head Candidate: D+2 
       - Loop 132 adds a constant 1/1 
     - tail Candidate: D+2 
       - Loop 132 adds a constant 1/1 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(882)=<D+2] 
 * Adding constraints: [s(4095)=<it([134,144])*aux(882),s(4095)=<it(132)+aux(880),s(4095)=<it(132)+aux(881),aux(880)=<D+2,aux(881)=<D+2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(882)=<D+2]
* Psum in Chain-Tail [134,144]: [s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(882)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(882)=<aux(851)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Chain-Tail [134,144]: [s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for s(4094)=<2*D+2  in Chain-Tail [134,144] 
   - Found a solution using cacheing 
 * Adding constraints: [s(4094)=<aux(883)*2,aux(883)=<it([134,144])*aux(879),aux(883)=<it(132)+aux(877),aux(883)=<it(132)+aux(878)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Chain-Tail [134,144]: [s(4076)=<E]

###### Computing sum for s(4076)=<E  in Chain-Tail [134,144] 
   - Applying inductive sum strategy 
     - head Candidate: D+2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D+2 
       - The candidate was classified before. We reuse its previous classification 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(886)=<A,aux(886)=<D+2] 
 * Adding constraints: [s(4076)=<it([134,144])*aux(886),s(4076)=<it(132)+aux(884),s(4076)=<it(132)+aux(885),aux(884)=<D+2,aux(885)=<D+2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(886)=<A,aux(886)=<D+2]

###### Computing max_min for aux(886)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(886)=<s(3972)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(886)=<D+2]

###### Computing max_min for aux(886)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(886)=<aux(851)+1] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [132,[134,144]] 
Found a cycle in the non-final constraints
 Removed possibly redundant constraints to solve a cycle in the cost structure 
aux(866)=<aux(873)
aux(868)=<aux(874)
s(4076)=<it([134,144])*aux(886)
aux(860)=<s(3972)
aux(861)=<s(3972)+1
aux(863)=<s(3972)
aux(886)=<s(3972)+1

#### Simplifying cost structure of phase [132,[134,144]] 
 * Joined equivalent variables [aux(872),aux(868)] into aux(872)
 * Joined equivalent variables [aux(887),aux(852),aux(867),aux(869)] into aux(887)
 * Joined equivalent variables [aux(888),aux(856),aux(877),aux(878)] into aux(888)
 * Joined equivalent variables [aux(889),aux(880),aux(881),aux(884),aux(885)] into aux(889)
 * Joined equivalent variables [aux(883),s(4092)] into aux(883)
 * Joined equivalent variables [aux(861),aux(882),aux(886)] into aux(861)
 * Joined equivalent variables [aux(860),aux(863),aux(871),aux(879),s(4064)] into aux(860)
 * Joined equivalent variables [aux(858),aux(875),s(3977),s(4051)] into aux(858)
 * Joined equivalent variables [aux(866),aux(872)] into aux(866)
 * Joined equivalent variables [aux(876),s(4091)] into aux(876)
 * Joined equivalent variables [aux(859),s(4008)] into aux(859)
 * Joined equivalent variables [aux(862),aux(865),aux(873),aux(874),s(4009)] into aux(862)
 * Joined equivalent variables [aux(857),aux(870)] into aux(857)
 * Joined equivalent variables [aux(862),aux(866)] into aux(862)

#### Cost of phase [132]:echelon_helper_old(A,B,C,D,E,F,G) -> [] 
43*it(132)+49*it([134,144])+6*s(3994)+16*s(3995)+324*s(3996)+120*s(3997)+80*s(3998)+40*s(3999)+40*s(4000)+40*s(4001)+80*s(4002)+64*s(4003)+64*s(4004)+64*s(4005)+64*s(4006)+6*s(4076)+6*s(4077)+16*s(4078)+528*s(4079)+240*s(4080)+80*s(4081)+80*s(4082)+40*s(4083)+40*s(4084)+80*s(4085)+64*s(4086)+64*s(4087)+64*s(4088)+64*s(4089)+0
  Such that:it([134,144]) =< 1

Unbounded itvars
it(132) :  it(132)
s(3994) :  sum(132),s(3973)
s(3995) :  sum(132),s(3974)
s(3996) :  sum(132),s(3975)
s(3997) :  sum(132),s(3984)
s(3998) :  sum(132),s(3985)
s(3999) :  sum(132),s(3986)
s(4000) :  sum(132),s(3987)
s(4001) :  sum(132),s(3988)
s(4002) :  sum(132),s(3989)
s(4003) :  sum(132),s(3990)
s(4004) :  sum(132),s(3991)
s(4005) :  sum(132),s(3992)
s(4006) :  sum(132),s(3993)
s(4076) :  sum([134,144]),s(4018)
s(4077) :  sum([134,144]),s(4048)
s(4078) :  sum([134,144]),s(4056)
s(4079) :  sum([134,144]),s(4057)
s(4080) :  sum([134,144]),s(4061)
s(4081) :  sum([134,144]),s(4062)
s(4082) :  sum([134,144]),s(4068)
s(4083) :  sum([134,144]),s(4069)
s(4084) :  sum([134,144]),s(4070)
s(4085) :  sum([134,144]),s(4071)
s(4086) :  sum([134,144]),s(4072)
s(4087) :  sum([134,144]),s(4073)
s(4088) :  sum([134,144]),s(4074)
s(4089) :  sum([134,144]),s(4075)

#### Found solution for phase  [133,135] in the cache 

#### Cost of phase [133,135]:echelon_helper_old(A,B,C,D,E,F,G) -> [echelon_helper_old(A',B',C',D',E',F',G')] 
86*it(133)+6*s(3887)+16*s(3888)+244*s(3889)+120*s(3890)+80*s(3891)+40*s(3892)+40*s(3893)+40*s(3894)+80*s(3895)+80*s(3896)+64*s(3897)+64*s(3898)+64*s(3899)+64*s(3900)+6*s(3913)+16*s(3914)+448*s(3915)+240*s(3916)+80*s(3917)+80*s(3918)+40*s(3919)+40*s(3920)+80*s(3921)+80*s(3922)+64*s(3923)+64*s(3924)+64*s(3925)+64*s(3926)+0
Unbounded itvars
it(133) :  it(133)
s(3887) :  sum(133),s(3806)
s(3888) :  sum(133),s(3807)
s(3889) :  sum(133),s(3808)
s(3890) :  sum(133),s(3817)
s(3891) :  sum(133),s(3818)
s(3892) :  sum(133),s(3819)
s(3893) :  sum(133),s(3820)
s(3894) :  sum(133),s(3821)
s(3895) :  sum(133),s(3822)
s(3896) :  sum(133),s(3823)
s(3897) :  sum(133),s(3824)
s(3898) :  sum(133),s(3825)
s(3899) :  sum(133),s(3826)
s(3900) :  sum(133),s(3827)
s(3913) :  sum(135),s(3865)
s(3914) :  sum(135),s(3866)
s(3915) :  sum(135),s(3867)
s(3916) :  sum(135),s(3871)
s(3917) :  sum(135),s(3872)
s(3918) :  sum(135),s(3878)
s(3919) :  sum(135),s(3879)
s(3920) :  sum(135),s(3880)
s(3921) :  sum(135),s(3881)
s(3922) :  sum(135),s(3882)
s(3923) :  sum(135),s(3883)
s(3924) :  sum(135),s(3884)
s(3925) :  sum(135),s(3885)
s(3926) :  sum(135),s(3886)

#### Simplifying cost structure of chain [[133,135],[132],134,144] 
 * Joined equivalent variables [it(132),it(133),s(3887),s(3888),s(3889),s(3890),s(3891),s(3892),s(3893),s(3894),s(3895),s(3896),s(3897),s(3898),s(3899),s(3900),s(3913),s(3914),s(3915),s(3916),s(3917),s(3918),s(3919),s(3920),s(3921),s(3922),s(3923),s(3924),s(3925),s(3926),s(3994),s(3995),s(3996),s(3997),s(3998),s(3999),s(4000),s(4001),s(4002),s(4003),s(4004),s(4005),s(4006),s(4076),s(4077),s(4078),s(4079),s(4080),s(4081),s(4082),s(4083),s(4084),s(4085),s(4086),s(4087),s(4088),s(4089)] into it(132)

#### Found solution for phase  [133,135] in the cache 

#### Cost of phase [133,135]:echelon_helper_old(A,B,C,D,E,F,G) -> [echelon_helper_old(A',B',C',D',E',F',G')] 
86*it(133)+6*s(3887)+16*s(3888)+244*s(3889)+120*s(3890)+80*s(3891)+40*s(3892)+40*s(3893)+40*s(3894)+80*s(3895)+80*s(3896)+64*s(3897)+64*s(3898)+64*s(3899)+64*s(3900)+6*s(3913)+16*s(3914)+448*s(3915)+240*s(3916)+80*s(3917)+80*s(3918)+40*s(3919)+40*s(3920)+80*s(3921)+80*s(3922)+64*s(3923)+64*s(3924)+64*s(3925)+64*s(3926)+0
Unbounded itvars
it(133) :  it(133)
s(3887) :  sum(133),s(3806)
s(3888) :  sum(133),s(3807)
s(3889) :  sum(133),s(3808)
s(3890) :  sum(133),s(3817)
s(3891) :  sum(133),s(3818)
s(3892) :  sum(133),s(3819)
s(3893) :  sum(133),s(3820)
s(3894) :  sum(133),s(3821)
s(3895) :  sum(133),s(3822)
s(3896) :  sum(133),s(3823)
s(3897) :  sum(133),s(3824)
s(3898) :  sum(133),s(3825)
s(3899) :  sum(133),s(3826)
s(3900) :  sum(133),s(3827)
s(3913) :  sum(135),s(3865)
s(3914) :  sum(135),s(3866)
s(3915) :  sum(135),s(3867)
s(3916) :  sum(135),s(3871)
s(3917) :  sum(135),s(3872)
s(3918) :  sum(135),s(3878)
s(3919) :  sum(135),s(3879)
s(3920) :  sum(135),s(3880)
s(3921) :  sum(135),s(3881)
s(3922) :  sum(135),s(3882)
s(3923) :  sum(135),s(3883)
s(3924) :  sum(135),s(3884)
s(3925) :  sum(135),s(3885)
s(3926) :  sum(135),s(3886)

#### Simplifying cost structure of chain [[133,135],144] 
 * Joined equivalent variables [it(133),s(3887),s(3888),s(3889),s(3890),s(3891),s(3892),s(3893),s(3894),s(3895),s(3896),s(3897),s(3898),s(3899),s(3900),s(3913),s(3914),s(3915),s(3916),s(3917),s(3918),s(3919),s(3920),s(3921),s(3922),s(3923),s(3924),s(3925),s(3926)] into it(133)
 * Renamed intermediate variables: 
[ (eq(158,1),it(130))>>s(4101)]
 * Renamed intermediate variables: 
[ (eq(158,2),s(1040))>>s(4102), (eq(158,2),aux(205))>>s(4103), (eq(158,2),aux(206))>>s(4104), (eq(158,2),aux(207))>>s(4105), (eq(158,2),aux(208))>>s(4106), (eq(158,2),aux(209))>>s(4107), (eq(158,2),aux(210))>>s(4108), (eq(158,2),s(1039))>>s(4109), (eq(158,2),s(1048))>>s(4110), (eq(158,2),s(1050))>>s(4111), (eq(158,2),s(1052))>>s(4112), (eq(158,2),s(1054))>>s(4113), (eq(158,2),s(1069))>>s(4114), (eq(158,2),s(1071))>>s(4115)]

#### Simplifying cost structure of CE 158 
 * Joined equivalent variables [aux(890),s(4103)] into aux(890)
 * Joined equivalent variables [aux(891),s(4106),s(4107)] into aux(891)

#### Simplifying cost structure of chain [137,145] 

#### Found solution for phase  [133,135] in the cache 

#### Cost of phase [133,135]:echelon_helper_old(A,B,C,D,E,F,G) -> [echelon_helper_old(A',B',C',D',E',F',G')] 
86*it(133)+6*s(3887)+16*s(3888)+244*s(3889)+120*s(3890)+80*s(3891)+40*s(3892)+40*s(3893)+40*s(3894)+80*s(3895)+80*s(3896)+64*s(3897)+64*s(3898)+64*s(3899)+64*s(3900)+6*s(3913)+16*s(3914)+448*s(3915)+240*s(3916)+80*s(3917)+80*s(3918)+40*s(3919)+40*s(3920)+80*s(3921)+80*s(3922)+64*s(3923)+64*s(3924)+64*s(3925)+64*s(3926)+0
Unbounded itvars
it(133) :  it(133)
s(3887) :  sum(133),s(3806)
s(3888) :  sum(133),s(3807)
s(3889) :  sum(133),s(3808)
s(3890) :  sum(133),s(3817)
s(3891) :  sum(133),s(3818)
s(3892) :  sum(133),s(3819)
s(3893) :  sum(133),s(3820)
s(3894) :  sum(133),s(3821)
s(3895) :  sum(133),s(3822)
s(3896) :  sum(133),s(3823)
s(3897) :  sum(133),s(3824)
s(3898) :  sum(133),s(3825)
s(3899) :  sum(133),s(3826)
s(3900) :  sum(133),s(3827)
s(3913) :  sum(135),s(3865)
s(3914) :  sum(135),s(3866)
s(3915) :  sum(135),s(3867)
s(3916) :  sum(135),s(3871)
s(3917) :  sum(135),s(3872)
s(3918) :  sum(135),s(3878)
s(3919) :  sum(135),s(3879)
s(3920) :  sum(135),s(3880)
s(3921) :  sum(135),s(3881)
s(3922) :  sum(135),s(3882)
s(3923) :  sum(135),s(3883)
s(3924) :  sum(135),s(3884)
s(3925) :  sum(135),s(3885)
s(3926) :  sum(135),s(3886)
Some Itvars are unbounded [aux(890),aux(891),s(4102),s(4104),s(4105),s(4108)] 
Changing solving method to compute the cost of the chain directly 

#### Computing cost of phase 137 

#### Computing cost of chain [137,145] with linear recursion

#### Computing cost of chain [[133,135],137,145] with linear recursion
 * Renamed intermediate variables: 
[ (it(133),s(3772))>>s(3799), (it(133),s(3773))>>s(3800), (it(133),s(3774))>>s(3801), (it(133),s(3777))>>s(3802), (it(133),s(3770))>>s(3803), (it(133),aux(730))>>s(3804), (it(133),aux(731))>>s(3805), (it(133),s(3769))>>s(3806), (it(133),s(3778))>>s(3807), (it(133),s(3779))>>s(3808), (it(133),s(3780))>>s(3809), (it(133),s(3781))>>s(3810), (it(133),s(3782))>>s(3811), (it(133),s(3783))>>s(3812), (it(133),s(3784))>>s(3813), (it(133),s(3785))>>s(3814), (it(133),s(3786))>>s(3815), (it(133),s(3787))>>s(3816), (it(133),s(3788))>>s(3817), (it(133),s(3789))>>s(3818), (it(133),s(3790))>>s(3819), (it(133),s(3791))>>s(3820), (it(133),s(3792))>>s(3821), (it(133),s(3793))>>s(3822), (it(133),s(3794))>>s(3823), (it(133),s(3795))>>s(3824), (it(133),s(3796))>>s(3825), (it(133),s(3797))>>s(3826), (it(133),s(3798))>>s(3827)]
 * Renamed intermediate variables: 
[ (it(135),s(3831))>>s(3858), (it(135),s(3832))>>s(3859), (it(135),s(3833))>>s(3860), (it(135),s(3836))>>s(3861), (it(135),s(3829))>>s(3862), (it(135),aux(732))>>s(3863), (it(135),aux(733))>>s(3864), (it(135),s(3828))>>s(3865), (it(135),s(3837))>>s(3866), (it(135),s(3838))>>s(3867), (it(135),s(3839))>>s(3868), (it(135),s(3840))>>s(3869), (it(135),s(3841))>>s(3870), (it(135),s(3842))>>s(3871), (it(135),s(3843))>>s(3872), (it(135),s(3844))>>s(3873), (it(135),s(3845))>>s(3874), (it(135),s(3846))>>s(3875), (it(135),s(3847))>>s(3876), (it(135),s(3848))>>s(3877), (it(135),s(3849))>>s(3878), (it(135),s(3850))>>s(3879), (it(135),s(3851))>>s(3880), (it(135),s(3852))>>s(3881), (it(135),s(3853))>>s(3882), (it(135),s(3854))>>s(3883), (it(135),s(3855))>>s(3884), (it(135),s(3856))>>s(3885), (it(135),s(3857))>>s(3886)]

#### Cost of loops [133,135] 

 * loop 133:echelon_helper_old(A,B,C,D,E,F,G) -> [echelon_helper_old(A',B',C',D',E',F',G')] 
6*s(3806)+16*s(3807)+244*s(3808)+120*s(3817)+80*s(3818)+40*s(3819)+40*s(3820)+40*s(3821)+80*s(3822)+80*s(3823)+64*s(3824)+64*s(3825)+64*s(3826)+64*s(3827)+43
  Such that:s(3799) =< A-D'+1
s(3800) =< B
s(3801) =< 2*B
s(3802) =< D'+1
s(3803) =< 2*D'
s(3804) =< A
s(3805) =< D'
s(3806) =< s(3804)
s(3807) =< s(3805)
s(3808) =< s(3799)
s(3809) =< s(3800)-2
s(3810) =< s(3800)
s(3811) =< s(3808)*s(3800)
s(3809) =< s(3805)
s(3812) =< s(3805)
s(3813) =< s(3808)*s(3810)
s(3814) =< s(3808)*s(3805)
s(3815) =< s(3808)*s(3809)
s(3816) =< s(3808)*s(3812)
s(3817) =< s(3813)
s(3818) =< s(3815)
s(3819) =< s(3816)
s(3820) =< s(3811)
s(3821) =< s(3814)
s(3822) =< s(3802)
s(3823) =< s(3802)
s(3822) =< s(3800)
s(3824) =< s(3804)
s(3825) =< s(3804)
s(3824) =< s(3805)
s(3825) =< s(3805)
s(3824) =< s(3800)
s(3824) =< s(3801)
s(3824) =< s(3803)
s(3825) =< s(3803)
s(3826) =< s(3804)
s(3827) =< s(3804)
s(3826) =< s(3805)
s(3827) =< s(3805)
s(3826) =< s(3800)
s(3826) =< s(3801)

 * loop 135:echelon_helper_old(A,B,C,D,E,F,G) -> [echelon_helper_old(A',B',C',D',E',F',G')] 
6*s(3865)+16*s(3866)+448*s(3867)+240*s(3871)+80*s(3872)+80*s(3878)+40*s(3879)+40*s(3880)+80*s(3881)+80*s(3882)+64*s(3883)+64*s(3884)+64*s(3885)+64*s(3886)+43
  Such that:s(3858) =< A-D'+1
s(3859) =< B
s(3860) =< 2*B
s(3861) =< D'+1
s(3862) =< 2*D'
s(3863) =< A
s(3864) =< D'
s(3865) =< s(3863)
s(3866) =< s(3864)
s(3867) =< s(3858)
s(3868) =< s(3859)
s(3869) =< s(3867)*s(3859)
s(3870) =< s(3867)*s(3868)
s(3871) =< s(3870)
s(3872) =< s(3869)
s(3873) =< s(3859)-2
s(3873) =< s(3864)
s(3874) =< s(3864)
s(3875) =< s(3867)*s(3864)
s(3876) =< s(3867)*s(3873)
s(3877) =< s(3867)*s(3874)
s(3878) =< s(3876)
s(3879) =< s(3877)
s(3880) =< s(3875)
s(3881) =< s(3861)
s(3882) =< s(3861)
s(3881) =< s(3859)
s(3883) =< s(3863)
s(3884) =< s(3863)
s(3883) =< s(3864)
s(3884) =< s(3864)
s(3883) =< s(3859)
s(3883) =< s(3860)
s(3883) =< s(3862)
s(3884) =< s(3862)
s(3885) =< s(3863)
s(3886) =< s(3863)
s(3885) =< s(3864)
s(3886) =< s(3864)
s(3885) =< s(3859)
s(3885) =< s(3860)

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [s(3805)=<B-1,s(3800)=<B,s(3859)=<B,s(3864)=<D+1]
* Psum in Loop 133: [it(133)=<1,s(3904)=<A,s(3912)=<A-D'+1,s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D']
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D']
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for s(3805)=<B-1  
   - Applying max/min strategy 
     - Loop 133  increases the expression by [B'-D'-1] 
     - Loop 135  increases the expression by [B'-1] 
 * Adding constraints:[s(3805)=<aux(892)+aux(893)+aux(894),aux(892)=<B-1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [s(3800)=<B,s(3859)=<B,s(3864)=<D+1]
* Psum in Loop 133: [it(133)=<1,s(3904)=<A,s(3912)=<A-D'+1,s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(893)=<B'-D'-1]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for s(3800)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[s(3800)=<s(3805)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [s(3859)=<B,s(3864)=<D+1]
* Psum in Loop 133: [it(133)=<1,s(3904)=<A,s(3912)=<A-D'+1,s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(893)=<B'-D'-1]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for s(3859)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[s(3859)=<s(3805)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [s(3864)=<D+1]
* Psum in Loop 133: [it(133)=<1,s(3904)=<A,s(3912)=<A-D'+1,s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(893)=<B'-D'-1]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for s(3864)=<D+1  
   - Applying max/min strategy 
     - Loop 133  increases the expression by 1/1 
     - Loop 135  increases the expression by 1/1 
 * Adding constraints:[s(3864)=<aux(895)+it(133)+it(135),aux(895)=<D+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [it(133)=<1,s(3904)=<A,s(3912)=<A-D'+1,s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(893)=<B'-D'-1]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for it(133)=<1  in Loop 133 
   - Applying inductive sum strategy 
   - No strategy succeeded 
 * Adding constraints: [] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [s(3904)=<A,s(3912)=<A-D'+1,s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(893)=<B'-D'-1]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for s(3904)=<A  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(896)=<A] 
 * Adding constraints: [s(3904)=<it(133)*aux(896)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(896)=<A]
* Psum in Loop 133: [s(3912)=<A-D'+1,s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(893)=<B'-D'-1]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for aux(896)=<A  
   - Applying max/min strategy 
     - Loop 133  increases the expression by [A'-2*D'-1,A'/2-D'-1/2] 
     - Loop 135 does not increase the expression
 * Adding constraints:[aux(896)=<aux(897)+aux(898),aux(897)=<A] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [s(3912)=<A-D'+1,s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(893)=<B'-D'-1,aux(898)=<A'-2*D'-1,aux(898)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for s(3912)=<A-D'+1  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(899)=<A-D] 
 * Adding constraints: [s(3912)=<it(133)*aux(899)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(899)=<A-D]
* Psum in Loop 133: [s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(893)=<B'-D'-1,aux(898)=<A'-2*D'-1,aux(898)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for aux(899)=<A-D  
   - Applying max/min strategy 
     - Loop 133  increases the expression by [A'-2*D'-2,A'/2-D'-3/2] 
     - Loop 135 does not increase the expression
 * Adding constraints:[aux(899)=<aux(900)+aux(901),aux(900)=<A-D] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(893)=<B'-D'-1,aux(901)=<A'-2*D'-2,aux(898)=<A'-2*D'-1,aux(901)=<A'/2-D'-3/2,aux(898)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for s(3902)=<B  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(902)=<B] 
 * Adding constraints: [s(3902)=<it(133)*aux(902)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(902)=<B]
* Psum in Loop 133: [s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(893)=<B'-D'-1,aux(901)=<A'-2*D'-2,aux(898)=<A'-2*D'-1,aux(901)=<A'/2-D'-3/2,aux(898)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for aux(902)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(902)=<s(3805)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(893)=<B'-D'-1,aux(901)=<A'-2*D'-2,aux(898)=<A'-2*D'-1,aux(901)=<A'/2-D'-3/2,aux(898)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for s(3901)=<2*B  in Loop 133 
   - Found a solution using cacheing 
 * Adding constraints: [s(3901)=<aux(903)*2,aux(903)=<it(133)*aux(902)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(893)=<B'-D'-1,aux(901)=<A'-2*D'-2,aux(898)=<A'-2*D'-1,aux(901)=<A'/2-D'-3/2,aux(898)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for s(3903)=<D'  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(904)=<B-1,aux(904)=<D+1] 
 * Adding constraints: [s(3903)=<it(133)*aux(904)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(904)=<B-1,aux(904)=<D+1]
* Psum in Loop 133: [s(3906)=<D'+1,s(3905)=<2*D',aux(893)=<B'-D'-1,aux(901)=<A'-2*D'-2,aux(898)=<A'-2*D'-1,aux(901)=<A'/2-D'-3/2,aux(898)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for aux(904)=<B-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(904)=<s(3805)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(904)=<D+1]
* Psum in Loop 133: [s(3906)=<D'+1,s(3905)=<2*D',aux(893)=<B'-D'-1,aux(901)=<A'-2*D'-2,aux(898)=<A'-2*D'-1,aux(901)=<A'/2-D'-3/2,aux(898)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for aux(904)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(904)=<s(3864)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [s(3906)=<D'+1,s(3905)=<2*D',aux(893)=<B'-D'-1,aux(901)=<A'-2*D'-2,aux(898)=<A'-2*D'-1,aux(901)=<A'/2-D'-3/2,aux(898)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for s(3906)=<D'+1  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(905)=<B,aux(905)=<D+2] 
 * Adding constraints: [s(3906)=<it(133)*aux(905)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(905)=<B,aux(905)=<D+2]
* Psum in Loop 133: [s(3905)=<2*D',aux(893)=<B'-D'-1,aux(901)=<A'-2*D'-2,aux(898)=<A'-2*D'-1,aux(901)=<A'/2-D'-3/2,aux(898)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for aux(905)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(905)=<s(3805)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(905)=<D+2]
* Psum in Loop 133: [s(3905)=<2*D',aux(893)=<B'-D'-1,aux(901)=<A'-2*D'-2,aux(898)=<A'-2*D'-1,aux(901)=<A'/2-D'-3/2,aux(898)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for aux(905)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(905)=<s(3864)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [s(3905)=<2*D',aux(893)=<B'-D'-1,aux(901)=<A'-2*D'-2,aux(898)=<A'-2*D'-1,aux(901)=<A'/2-D'-3/2,aux(898)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for s(3905)=<2*D'  in Loop 133 
   - Found a solution using cacheing 
 * Adding constraints: [s(3905)=<aux(906)*2,aux(906)=<it(133)*aux(904)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(893)=<B'-D'-1,aux(901)=<A'-2*D'-2,aux(898)=<A'-2*D'-1,aux(901)=<A'/2-D'-3/2,aux(898)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for aux(893)=<B'-D'-1  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [] 
 * Adding constraints: [aux(893)=<it(133)*aux(907)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(901)=<A'-2*D'-2,aux(898)=<A'-2*D'-1,aux(901)=<A'/2-D'-3/2,aux(898)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for aux(901)=<A'-2*D'-2  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(908)=<2*A-4*D-7] 
 * Adding constraints: [aux(901)=<it(133)*aux(908)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(908)=<2*A-4*D-7]
* Psum in Loop 133: [aux(898)=<A'-2*D'-1,aux(901)=<A'/2-D'-3/2,aux(898)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for aux(908)=<2*A-4*D-7  
   - Applying max/min strategy 
     - Loop 133  increases the expression by [2*A'-4*D'-6,A'-2*D'-5] 
     - Loop 135 does not increase the expression
 * Adding constraints:[aux(908)=<aux(909)+aux(910),aux(909)=<2*A-4*D-7] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(898)=<A'-2*D'-1,aux(901)=<A'/2-D'-3/2,aux(898)=<A'/2-D'-1/2,aux(910)=<A'-2*D'-5,aux(910)=<2*A'-4*D'-6]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for aux(898)=<A'-2*D'-1  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(911)=<2*A-4*D-6] 
 * Adding constraints: [aux(898)=<it(133)*aux(911)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(911)=<2*A-4*D-6]
* Psum in Loop 133: [aux(901)=<A'/2-D'-3/2,aux(898)=<A'/2-D'-1/2,aux(910)=<A'-2*D'-5,aux(910)=<2*A'-4*D'-6]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for aux(911)=<2*A-4*D-6  
   - Found a solution using cacheing 
 * Adding constraints:[aux(911)=<aux(908)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(901)=<A'/2-D'-3/2,aux(898)=<A'/2-D'-1/2,aux(910)=<A'-2*D'-5,aux(910)=<2*A'-4*D'-6]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for aux(901)=<A'/2-D'-3/2  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(912)=<A-2*D-4] 
 * Adding constraints: [aux(901)=<it(133)*aux(912)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(912)=<A-2*D-4]
* Psum in Loop 133: [aux(898)=<A'/2-D'-1/2,aux(910)=<A'-2*D'-5,aux(910)=<2*A'-4*D'-6]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for aux(912)=<A-2*D-4  
   - Found a solution using cacheing 
 * Adding constraints:[aux(912)=<aux(908)* (1/2)-1/2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(898)=<A'/2-D'-1/2,aux(910)=<A'-2*D'-5,aux(910)=<2*A'-4*D'-6]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for aux(898)=<A'/2-D'-1/2  in Loop 133 
   - Found a solution using cacheing 
 * Adding constraints: [aux(898)=<aux(913)* (1/2),aux(913)=<it(133)*aux(911)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(910)=<A'-2*D'-5,aux(910)=<2*A'-4*D'-6]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for aux(910)=<A'-2*D'-5  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(914)=<2*A-4*D-10] 
 * Adding constraints: [aux(910)=<it(133)*aux(914)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(914)=<2*A-4*D-10]
* Psum in Loop 133: [aux(910)=<2*A'-4*D'-6]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for aux(914)=<2*A-4*D-10  
   - Found a solution using cacheing 
 * Adding constraints:[aux(914)=<aux(908)-3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(910)=<2*A'-4*D'-6]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for aux(910)=<2*A'-4*D'-6  in Loop 133 
   - Found a solution using cacheing 
 * Adding constraints: [aux(910)=<aux(915)*4,aux(915)=<it(133)*aux(912)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for it(135)=<1  in Loop 135 
   - Applying inductive sum strategy 
     - head Candidate: A/2-2 
       - Loop 133 has a reset to  [A-D-7/2]
       - Chain-Tail [137,145] is collaborative and bounds [it([137,145])] 
     - head Candidate: A/3-D/3-1 
       - Loop 133 has a reset to  [2/3*A-D-7/3]
       - Chain-Tail [137,145] is collaborative
     - head Candidate: A/4-D/2-1/2 
       - Loop 133 has a reset to  [A/2-D-7/4]
       - Chain-Tail [137,145] is collaborative
     - tail Candidate: A/2-2 
       - Loop 133 has undefined behavior 
     - tail Candidate: A/3-D/3-1 
       - Loop 133 has undefined behavior 
     - tail Candidate: A/4-D/2-1/2 
       - Loop 133 has undefined behavior 
 * Adding constraints: [it(135)+it([137,145])=<aux(916)+aux(917),it(135)=<aux(918)+aux(919),it(135)=<aux(920)+aux(921),aux(917)=<A/2-2,aux(919)=<A/3-D/3-1,aux(921)=<A/4-D/2-1/2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(916)=<A-D-7/2,aux(920)=<A/2-D-7/4,aux(918)=<2/3*A-D-7/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for aux(916)=<A-D-7/2  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(922)=<A-D-7/2] 
 * Adding constraints: [aux(916)=<it(133)*aux(922)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(922)=<A-D-7/2]
* Psum in Loop 133: [aux(920)=<A/2-D-7/4,aux(918)=<2/3*A-D-7/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for aux(922)=<A-D-7/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(922)=<aux(899)-7/2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(920)=<A/2-D-7/4,aux(918)=<2/3*A-D-7/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for aux(920)=<A/2-D-7/4  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(923)=<A/2-D-7/4] 
 * Adding constraints: [aux(920)=<it(133)*aux(923)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(923)=<A/2-D-7/4]
* Psum in Loop 133: [aux(918)=<2/3*A-D-7/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for aux(923)=<A/2-D-7/4  
   - Found a solution using cacheing 
 * Adding constraints:[aux(923)=<aux(908)* (1/4)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(918)=<2/3*A-D-7/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for aux(918)=<2/3*A-D-7/3  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(924)=<2/3*A-D-7/3] 
 * Adding constraints: [aux(918)=<it(133)*aux(924)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(924)=<2/3*A-D-7/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for aux(924)=<2/3*A-D-7/3  
   - Applying max/min strategy 
     - Loop 133  increases the expression by [2/3*A'-4/3*D'-5/3,A'/3-2/3*D'-4/3] 
     - Loop 135 does not increase the expression
 * Adding constraints:[aux(924)=<aux(925)+aux(926),aux(925)=<2/3*A-D-7/3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(926)=<A'/3-2/3*D'-4/3,aux(926)=<2/3*A'-4/3*D'-5/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for aux(926)=<A'/3-2/3*D'-4/3  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(927)=<2/3*A-4/3*D-3] 
 * Adding constraints: [aux(926)=<it(133)*aux(927)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(927)=<2/3*A-4/3*D-3]
* Psum in Loop 133: [aux(926)=<2/3*A'-4/3*D'-5/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for aux(927)=<2/3*A-4/3*D-3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(927)=<aux(908)* (1/3)-2/3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(926)=<2/3*A'-4/3*D'-5/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for aux(926)=<2/3*A'-4/3*D'-5/3  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(928)=<4/3*A-8/3*D-5] 
 * Adding constraints: [aux(926)=<it(133)*aux(928)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(928)=<4/3*A-8/3*D-5]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for aux(928)=<4/3*A-8/3*D-5  
   - Found a solution using cacheing 
 * Adding constraints:[aux(928)=<aux(908)* (2/3)-1/3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for s(3930)=<A  in Loop 135 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(929)=<A] 
 * Adding constraints: [s(3930)=<it(135)*aux(929)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(929)=<A]
* Psum in Loop 135: [s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for aux(929)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(929)=<aux(896)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for s(3938)=<A-D'+1  in Loop 135 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(930)=<A-D] 
 * Adding constraints: [s(3938)=<it(135)*aux(930)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(930)=<A-D]
* Psum in Loop 135: [s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for aux(930)=<A-D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(930)=<aux(899)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for s(3928)=<B  in Loop 135 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(931)=<B] 
 * Adding constraints: [s(3928)=<it(135)*aux(931)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(931)=<B]
* Psum in Loop 135: [s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for aux(931)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(931)=<s(3805)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for s(3927)=<2*B  in Loop 135 
   - Found a solution using cacheing 
 * Adding constraints: [s(3927)=<aux(932)*2,aux(932)=<it(135)*aux(931)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [it([137,145])=<1,s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for s(3929)=<D'  in Loop 135 
   - Applying inductive sum strategy 
     - head Candidate: A-D-2 
       - Loop 133 has a reset to  [2*A-3*D-6]
       - Chain-Tail [137,145] is collaborative and bounds [it([137,145])] 
     - head Candidate: A-3 
       - Loop 133 has a reset to  [2*A-2*D-6]
       - Chain-Tail [137,145] is collaborative and bounds [it([137,145])] 
     - tail Candidate: A-D-2 
       - Loop 133 has undefined behavior 
     - tail Candidate: A-3 
       - Loop 133 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(937)=<D+1,aux(937)=<A/2-1/2] 
 * Adding constraints: [s(3929)=<it(135)*aux(937),it([137,145])+s(3929)=<aux(933)+aux(934),it([137,145])+s(3929)=<aux(935)+aux(936),aux(934)=<A-D-2,aux(936)=<A-3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(937)=<A/2-1/2,aux(937)=<D+1]
* Psum in Loop 133: [aux(933)=<2*A-3*D-6,aux(935)=<2*A-2*D-6]
* Psum in Loop 135: [s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for aux(937)=<A/2-1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(937)=<aux(896)* (1/2)-1/2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(937)=<D+1]
* Psum in Loop 133: [aux(933)=<2*A-3*D-6,aux(935)=<2*A-2*D-6]
* Psum in Loop 135: [s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for aux(937)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(937)=<s(3864)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(933)=<2*A-3*D-6,aux(935)=<2*A-2*D-6]
* Psum in Loop 135: [s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for aux(933)=<2*A-3*D-6  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(938)=<2*A-3*D-6] 
 * Adding constraints: [aux(933)=<it(133)*aux(938)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(938)=<2*A-3*D-6]
* Psum in Loop 133: [aux(935)=<2*A-2*D-6]
* Psum in Loop 135: [s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for aux(938)=<2*A-3*D-6  
   - Found a solution using cacheing 
 * Adding constraints:[aux(938)=<aux(924)*3+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(935)=<2*A-2*D-6]
* Psum in Loop 135: [s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for aux(935)=<2*A-2*D-6  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(939)=<2*A-2*D-6] 
 * Adding constraints: [aux(935)=<it(133)*aux(939)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(939)=<2*A-2*D-6]
* Psum in Loop 135: [s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for aux(939)=<2*A-2*D-6  
   - Found a solution using cacheing 
 * Adding constraints:[aux(939)=<aux(899)*2-6] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [s(3932)=<D'+1,s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for s(3932)=<D'+1  in Loop 135 
   - Applying inductive sum strategy 
     - head Candidate: 3/2*A-3 
       - Loop 133 has a reset to  [3*A-3*D-15/2]
       - Chain-Tail [137,145] is collaborative and bounds [s(4127)] 
     - head Candidate: 4/3*A-D/3-2 
       - Loop 133 has a reset to  [8/3*A-3*D-19/3]
       - Chain-Tail [137,145] is collaborative and bounds [s(4126)] 
     - tail Candidate: 3/2*A-3 
       - Loop 133 has undefined behavior 
     - tail Candidate: 4/3*A-D/3-2 
       - Loop 133 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(944)=<D+2,aux(944)=<A/2+1/2] 
 * Adding constraints: [s(3932)=<it(135)*aux(944),s(3932)+s(4127)=<aux(940)+aux(941),s(3932)+s(4126)=<aux(942)+aux(943),aux(941)=<3/2*A-3,aux(943)=<4/3*A-D/3-2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(944)=<A/2+1/2,aux(944)=<D+2]
* Psum in Loop 133: [aux(940)=<3*A-3*D-15/2,aux(942)=<8/3*A-3*D-19/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for aux(944)=<A/2+1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(944)=<aux(896)* (1/2)+1/2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(944)=<D+2]
* Psum in Loop 133: [aux(940)=<3*A-3*D-15/2,aux(942)=<8/3*A-3*D-19/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for aux(944)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(944)=<s(3864)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(940)=<3*A-3*D-15/2,aux(942)=<8/3*A-3*D-19/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for aux(940)=<3*A-3*D-15/2  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(945)=<3*A-3*D-15/2] 
 * Adding constraints: [aux(940)=<it(133)*aux(945)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(945)=<3*A-3*D-15/2]
* Psum in Loop 133: [aux(942)=<8/3*A-3*D-19/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for aux(945)=<3*A-3*D-15/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(945)=<aux(899)*3-15/2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(942)=<8/3*A-3*D-19/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for aux(942)=<8/3*A-3*D-19/3  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(946)=<8/3*A-3*D-19/3] 
 * Adding constraints: [aux(942)=<it(133)*aux(946)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(946)=<8/3*A-3*D-19/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for aux(946)=<8/3*A-3*D-19/3  
   - Applying max/min strategy 
     - Loop 133  increases the expression by [8/3*A'-16/3*D'-17/3,4/3*A'-8/3*D'-13/3] 
     - Loop 135 does not increase the expression
 * Adding constraints:[aux(946)=<aux(947)+aux(948),aux(947)=<8/3*A-3*D-19/3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(948)=<4/3*A'-8/3*D'-13/3,aux(948)=<8/3*A'-16/3*D'-17/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for aux(948)=<4/3*A'-8/3*D'-13/3  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(949)=<8/3*A-16/3*D-11] 
 * Adding constraints: [aux(948)=<it(133)*aux(949)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(949)=<8/3*A-16/3*D-11]
* Psum in Loop 133: [aux(948)=<8/3*A'-16/3*D'-17/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for aux(949)=<8/3*A-16/3*D-11  
   - Found a solution using cacheing 
 * Adding constraints:[aux(949)=<aux(908)* (4/3)-5/3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(948)=<8/3*A'-16/3*D'-17/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for aux(948)=<8/3*A'-16/3*D'-17/3  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(950)=<16/3*A-32/3*D-19] 
 * Adding constraints: [aux(948)=<it(133)*aux(950)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(950)=<16/3*A-32/3*D-19]
* Psum in Loop 135: [s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for aux(950)=<16/3*A-32/3*D-19  
   - Found a solution using cacheing 
 * Adding constraints:[aux(950)=<aux(908)* (8/3)-1/3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [s(3931)=<2*D',aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for s(3931)=<2*D'  in Loop 135 
   - Found a solution using cacheing 
 * Adding constraints: [s(3931)=<aux(951)*2,aux(951)=<it(135)*aux(937),aux(951)+it([137,145])=<aux(933)+aux(934),aux(951)+it([137,145])=<aux(935)+aux(936)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [aux(894)=<B'-1]
* Psum in Chain-Tail [137,145]: [s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for aux(894)=<B'-1  in Loop 135 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [] 
 * Adding constraints: [aux(894)=<it(135)*aux(952)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Chain-Tail [137,145]: [s(4127)=<A,s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for s(4127)=<A  in Chain-Tail [137,145] 
   - Applying inductive sum strategy 
     - head Candidate: A 
       - Loop 133 has a reset to  [2*A-2*D-3]
       - Loop 135 is collaborative
     - tail Candidate: A 
       - Loop 133 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(955)=<A] 
 * Adding constraints: [s(4127)=<it([137,145])*aux(955),s(4127)=<aux(953)+aux(954),aux(954)=<A] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(955)=<A]
* Psum in Loop 133: [aux(953)=<2*A-2*D-3]
* Psum in Chain-Tail [137,145]: [s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for aux(955)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(955)=<aux(896)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(953)=<2*A-2*D-3]
* Psum in Chain-Tail [137,145]: [s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for aux(953)=<2*A-2*D-3  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(956)=<2*A-2*D-3] 
 * Adding constraints: [aux(953)=<it(133)*aux(956)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(956)=<2*A-2*D-3]
* Psum in Chain-Tail [137,145]: [s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for aux(956)=<2*A-2*D-3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(956)=<aux(899)*2-3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Chain-Tail [137,145]: [s(4125)=<B,s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for s(4125)=<B  in Chain-Tail [137,145] 
   - Applying inductive sum strategy 
     - head Candidate: B 
       - Loop 133 has undefined behavior 
     - tail Candidate: B 
       - Loop 133 has undefined behavior 
     - head Candidate: B 
       - We failed to classify this candidate before 
     - tail Candidate: B 
       - We failed to classify this candidate before 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(957)=<B] 
 * Adding constraints: [s(4125)=<it([137,145])*aux(957)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(957)=<B]
* Psum in Chain-Tail [137,145]: [s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for aux(957)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(957)=<s(3805)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Chain-Tail [137,145]: [s(4124)=<2*B,s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for s(4124)=<2*B  in Chain-Tail [137,145] 
   - Found a solution using cacheing 
 * Adding constraints: [s(4124)=<aux(958)*2,aux(958)=<it([137,145])*aux(957)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Chain-Tail [137,145]: [s(4126)=<D+1,s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for s(4126)=<D+1  in Chain-Tail [137,145] 
   - Applying inductive sum strategy 
     - head Candidate: D+1 
       - Loop 133 adds a constant 1/1 
       - Loop 135 adds a constant 1/1 
     - tail Candidate: D+1 
       - Loop 133 adds a constant 1/1 
       - Loop 135 adds a constant 1/1 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(961)=<D+1] 
 * Adding constraints: [s(4126)=<it([137,145])*aux(961),s(4126)=<it(135)+it(133)+aux(959),s(4126)=<it(135)+it(133)+aux(960),aux(959)=<D+1,aux(960)=<D+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(961)=<D+1]
* Psum in Chain-Tail [137,145]: [s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing max_min for aux(961)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(961)=<s(3864)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Chain-Tail [137,145]: [s(4129)=<D+2,s(4128)=<2*D+2]

###### Computing sum for s(4129)=<D+2  in Chain-Tail [137,145] 
   - Applying inductive sum strategy 
     - head Candidate: D+2 
       - Loop 133 adds a constant 1/1 
       - Loop 135 adds a constant 1/1 
     - tail Candidate: D+2 
       - Loop 133 adds a constant 1/1 
       - Loop 135 adds a constant 1/1 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(964)=<D+2] 
 * Adding constraints: [s(4129)=<it([137,145])*aux(964),s(4129)=<it(135)+it(133)+aux(962),s(4129)=<it(135)+it(133)+aux(963),aux(962)=<D+2,aux(963)=<D+2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(964)=<D+2]
* Psum in Chain-Tail [137,145]: [s(4128)=<2*D+2]

###### Computing max_min for aux(964)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(964)=<s(3864)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Chain-Tail [137,145]: [s(4128)=<2*D+2]

###### Computing sum for s(4128)=<2*D+2  in Chain-Tail [137,145] 
   - Found a solution using cacheing 
 * Adding constraints: [s(4128)=<aux(965)*2,aux(965)=<it([137,145])*aux(961),aux(965)=<it(135)+it(133)+aux(959),aux(965)=<it(135)+it(133)+aux(960)] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [133,135,[137,145]] 
Found a cycle in the non-final constraints
Could not solve cycle in cost structure.
 Discarded constraints:  
aux(964)=<s(3864)+1
aux(961)=<s(3864)
aux(957)=<s(3805)+1
aux(956)=<aux(899)*2-3
aux(955)=<aux(896)
aux(950)=<aux(908)* (8/3)-1/3
aux(949)=<aux(908)* (4/3)-5/3
aux(946)=<aux(947)+aux(948)
aux(945)=<aux(899)*3-15/2
aux(944)=<s(3864)+1
aux(944)=<aux(896)* (1/2)+1/2
aux(939)=<aux(899)*2-6
aux(938)=<aux(924)*3+1
aux(937)=<s(3864)
aux(937)=<aux(896)* (1/2)-1/2
aux(931)=<s(3805)+1
aux(930)=<aux(899)
aux(929)=<aux(896)
aux(928)=<aux(908)* (2/3)-1/3
aux(927)=<aux(908)* (1/3)-2/3
aux(924)=<aux(925)+aux(926)
aux(923)=<aux(908)* (1/4)
aux(922)=<aux(899)-7/2
aux(914)=<aux(908)-3
aux(912)=<aux(908)* (1/2)-1/2
aux(911)=<aux(908)+1
aux(908)=<aux(909)+aux(910)
aux(905)=<s(3864)+1
aux(905)=<s(3805)+1
aux(904)=<s(3864)
aux(904)=<s(3805)
aux(902)=<s(3805)+1
aux(899)=<aux(900)+aux(901)
aux(896)=<aux(897)+aux(898)
s(3864)=<aux(895)+it(133)+it(135)
s(3859)=<s(3805)+1
s(3800)=<s(3805)+1
s(3805)=<aux(892)+aux(893)+aux(894)
aux(965)=<it(135)+it(133)+aux(960)
aux(965)=<it(135)+it(133)+aux(959)
aux(965)=<it([137,145])*aux(961)
s(4128)=<aux(965)*2
s(4129)=<it(135)+it(133)+aux(963)
s(4129)=<it(135)+it(133)+aux(962)
s(4129)=<it([137,145])*aux(964)
s(4126)=<it(135)+it(133)+aux(960)
s(4126)=<it(135)+it(133)+aux(959)
s(4126)=<it([137,145])*aux(961)
aux(958)=<it([137,145])*aux(957)
s(4124)=<aux(958)*2
s(4125)=<it([137,145])*aux(957)
aux(953)=<it(133)*aux(956)
s(4127)=<aux(953)+aux(954)
s(4127)=<it([137,145])*aux(955)
aux(894)=<it(135)*aux(952)
aux(951)+it([137,145])=<aux(935)+aux(936)
aux(951)+it([137,145])=<aux(933)+aux(934)
aux(951)=<it(135)*aux(937)
s(3931)=<aux(951)*2
aux(948)=<it(133)*aux(950)
aux(948)=<it(133)*aux(949)
aux(942)=<it(133)*aux(946)
aux(940)=<it(133)*aux(945)
s(3932)+s(4126)=<aux(942)+aux(943)
s(3932)+s(4127)=<aux(940)+aux(941)
s(3932)=<it(135)*aux(944)
aux(935)=<it(133)*aux(939)
aux(933)=<it(133)*aux(938)
it([137,145])+s(3929)=<aux(935)+aux(936)
it([137,145])+s(3929)=<aux(933)+aux(934)
s(3929)=<it(135)*aux(937)
aux(932)=<it(135)*aux(931)
s(3927)=<aux(932)*2
s(3928)=<it(135)*aux(931)
s(3938)=<it(135)*aux(930)
s(3930)=<it(135)*aux(929)
aux(926)=<it(133)*aux(928)
aux(926)=<it(133)*aux(927)
aux(918)=<it(133)*aux(924)
aux(920)=<it(133)*aux(923)
aux(916)=<it(133)*aux(922)
it(135)=<aux(920)+aux(921)
it(135)=<aux(918)+aux(919)
it(135)+it([137,145])=<aux(916)+aux(917)
aux(915)=<it(133)*aux(912)
aux(910)=<aux(915)*4
aux(910)=<it(133)*aux(914)
aux(913)=<it(133)*aux(911)
aux(898)=<aux(913)* (1/2)
aux(901)=<it(133)*aux(912)
aux(898)=<it(133)*aux(911)
aux(901)=<it(133)*aux(908)
aux(906)=<it(133)*aux(904)
s(3905)=<aux(906)*2
s(3906)=<it(133)*aux(905)
s(3903)=<it(133)*aux(904)
aux(903)=<it(133)*aux(902)
s(3901)=<aux(903)*2
s(3902)=<it(133)*aux(902)
s(3912)=<it(133)*aux(899)
s(3904)=<it(133)*aux(896)

#### Simplifying cost structure of phase [133,135,[137,145]] 
 * Joined equivalent variables [aux(966),aux(897),aux(936),aux(954)] into aux(966)
 * Joined equivalent variables [aux(967),aux(900),aux(934)] into aux(967)
 * Joined equivalent variables [aux(968),aux(895),aux(959),aux(960)] into aux(968)
 * Joined equivalent variables [aux(969),aux(962),aux(963)] into aux(969)
 * Joined equivalent variables [it(133),it(135),it([137,145])] into it(133)

#### Cost of phase [133,135]:echelon_helper_old(A,B,C,D,E,F,G) -> [] 
135*it(133)+6*s(3887)+16*s(3888)+244*s(3889)+120*s(3890)+80*s(3891)+40*s(3892)+40*s(3893)+40*s(3894)+80*s(3895)+80*s(3896)+64*s(3897)+64*s(3898)+64*s(3899)+64*s(3900)+6*s(3913)+16*s(3914)+448*s(3915)+240*s(3916)+80*s(3917)+80*s(3918)+40*s(3919)+40*s(3920)+80*s(3921)+80*s(3922)+64*s(3923)+64*s(3924)+64*s(3925)+64*s(3926)+6*s(4116)+16*s(4117)+80*s(4118)+80*s(4119)+64*s(4120)+64*s(4121)+64*s(4122)+64*s(4123)+0
Unbounded itvars
it(133) :  it(133)
s(3887) :  sum(133),s(3806)
s(3888) :  sum(133),s(3807)
s(3889) :  sum(133),s(3808)
s(3890) :  sum(133),s(3817)
s(3891) :  sum(133),s(3818)
s(3892) :  sum(133),s(3819)
s(3893) :  sum(133),s(3820)
s(3894) :  sum(133),s(3821)
s(3895) :  sum(133),s(3822)
s(3896) :  sum(133),s(3823)
s(3897) :  sum(133),s(3824)
s(3898) :  sum(133),s(3825)
s(3899) :  sum(133),s(3826)
s(3900) :  sum(133),s(3827)
s(3913) :  sum(135),s(3865)
s(3914) :  sum(135),s(3866)
s(3915) :  sum(135),s(3867)
s(3916) :  sum(135),s(3871)
s(3917) :  sum(135),s(3872)
s(3918) :  sum(135),s(3878)
s(3919) :  sum(135),s(3879)
s(3920) :  sum(135),s(3880)
s(3921) :  sum(135),s(3881)
s(3922) :  sum(135),s(3882)
s(3923) :  sum(135),s(3883)
s(3924) :  sum(135),s(3884)
s(3925) :  sum(135),s(3885)
s(3926) :  sum(135),s(3886)
s(4116) :  sum([137,145]),s(4101)
s(4117) :  sum([137,145]),s(4109)
s(4118) :  sum([137,145]),s(4110)
s(4119) :  sum([137,145]),s(4111)
s(4120) :  sum([137,145]),s(4112)
s(4121) :  sum([137,145]),s(4113)
s(4122) :  sum([137,145]),s(4114)
s(4123) :  sum([137,145]),s(4115)

#### Found solution for phase  [133,135] in the cache 

#### Cost of phase [133,135]:echelon_helper_old(A,B,C,D,E,F,G) -> [echelon_helper_old(A',B',C',D',E',F',G')] 
86*it(133)+6*s(3887)+16*s(3888)+244*s(3889)+120*s(3890)+80*s(3891)+40*s(3892)+40*s(3893)+40*s(3894)+80*s(3895)+80*s(3896)+64*s(3897)+64*s(3898)+64*s(3899)+64*s(3900)+6*s(3913)+16*s(3914)+448*s(3915)+240*s(3916)+80*s(3917)+80*s(3918)+40*s(3919)+40*s(3920)+80*s(3921)+80*s(3922)+64*s(3923)+64*s(3924)+64*s(3925)+64*s(3926)+0
Unbounded itvars
it(133) :  it(133)
s(3887) :  sum(133),s(3806)
s(3888) :  sum(133),s(3807)
s(3889) :  sum(133),s(3808)
s(3890) :  sum(133),s(3817)
s(3891) :  sum(133),s(3818)
s(3892) :  sum(133),s(3819)
s(3893) :  sum(133),s(3820)
s(3894) :  sum(133),s(3821)
s(3895) :  sum(133),s(3822)
s(3896) :  sum(133),s(3823)
s(3897) :  sum(133),s(3824)
s(3898) :  sum(133),s(3825)
s(3899) :  sum(133),s(3826)
s(3900) :  sum(133),s(3827)
s(3913) :  sum(135),s(3865)
s(3914) :  sum(135),s(3866)
s(3915) :  sum(135),s(3867)
s(3916) :  sum(135),s(3871)
s(3917) :  sum(135),s(3872)
s(3918) :  sum(135),s(3878)
s(3919) :  sum(135),s(3879)
s(3920) :  sum(135),s(3880)
s(3921) :  sum(135),s(3881)
s(3922) :  sum(135),s(3882)
s(3923) :  sum(135),s(3883)
s(3924) :  sum(135),s(3884)
s(3925) :  sum(135),s(3885)
s(3926) :  sum(135),s(3886)
Some Itvars are unbounded [aux(813),aux(814),s(4020),s(4022),s(4023),s(4026)] 
Changing solving method to compute the cost of the chain directly 

#### Computing cost of chain [[133,135],136,145] with linear recursion
 * Renamed intermediate variables: 
[ (it(133),s(3772))>>s(3799), (it(133),s(3773))>>s(3800), (it(133),s(3774))>>s(3801), (it(133),s(3777))>>s(3802), (it(133),s(3770))>>s(3803), (it(133),aux(730))>>s(3804), (it(133),aux(731))>>s(3805), (it(133),s(3769))>>s(3806), (it(133),s(3778))>>s(3807), (it(133),s(3779))>>s(3808), (it(133),s(3780))>>s(3809), (it(133),s(3781))>>s(3810), (it(133),s(3782))>>s(3811), (it(133),s(3783))>>s(3812), (it(133),s(3784))>>s(3813), (it(133),s(3785))>>s(3814), (it(133),s(3786))>>s(3815), (it(133),s(3787))>>s(3816), (it(133),s(3788))>>s(3817), (it(133),s(3789))>>s(3818), (it(133),s(3790))>>s(3819), (it(133),s(3791))>>s(3820), (it(133),s(3792))>>s(3821), (it(133),s(3793))>>s(3822), (it(133),s(3794))>>s(3823), (it(133),s(3795))>>s(3824), (it(133),s(3796))>>s(3825), (it(133),s(3797))>>s(3826), (it(133),s(3798))>>s(3827)]
 * Renamed intermediate variables: 
[ (it(135),s(3831))>>s(3858), (it(135),s(3832))>>s(3859), (it(135),s(3833))>>s(3860), (it(135),s(3836))>>s(3861), (it(135),s(3829))>>s(3862), (it(135),aux(732))>>s(3863), (it(135),aux(733))>>s(3864), (it(135),s(3828))>>s(3865), (it(135),s(3837))>>s(3866), (it(135),s(3838))>>s(3867), (it(135),s(3839))>>s(3868), (it(135),s(3840))>>s(3869), (it(135),s(3841))>>s(3870), (it(135),s(3842))>>s(3871), (it(135),s(3843))>>s(3872), (it(135),s(3844))>>s(3873), (it(135),s(3845))>>s(3874), (it(135),s(3846))>>s(3875), (it(135),s(3847))>>s(3876), (it(135),s(3848))>>s(3877), (it(135),s(3849))>>s(3878), (it(135),s(3850))>>s(3879), (it(135),s(3851))>>s(3880), (it(135),s(3852))>>s(3881), (it(135),s(3853))>>s(3882), (it(135),s(3854))>>s(3883), (it(135),s(3855))>>s(3884), (it(135),s(3856))>>s(3885), (it(135),s(3857))>>s(3886)]

#### Cost of loops [133,135] 

 * loop 133:echelon_helper_old(A,B,C,D,E,F,G) -> [echelon_helper_old(A',B',C',D',E',F',G')] 
6*s(3806)+16*s(3807)+244*s(3808)+120*s(3817)+80*s(3818)+40*s(3819)+40*s(3820)+40*s(3821)+80*s(3822)+80*s(3823)+64*s(3824)+64*s(3825)+64*s(3826)+64*s(3827)+43
  Such that:s(3799) =< A-D'+1
s(3800) =< B
s(3801) =< 2*B
s(3802) =< D'+1
s(3803) =< 2*D'
s(3804) =< A
s(3805) =< D'
s(3806) =< s(3804)
s(3807) =< s(3805)
s(3808) =< s(3799)
s(3809) =< s(3800)-2
s(3810) =< s(3800)
s(3811) =< s(3808)*s(3800)
s(3809) =< s(3805)
s(3812) =< s(3805)
s(3813) =< s(3808)*s(3810)
s(3814) =< s(3808)*s(3805)
s(3815) =< s(3808)*s(3809)
s(3816) =< s(3808)*s(3812)
s(3817) =< s(3813)
s(3818) =< s(3815)
s(3819) =< s(3816)
s(3820) =< s(3811)
s(3821) =< s(3814)
s(3822) =< s(3802)
s(3823) =< s(3802)
s(3822) =< s(3800)
s(3824) =< s(3804)
s(3825) =< s(3804)
s(3824) =< s(3805)
s(3825) =< s(3805)
s(3824) =< s(3800)
s(3824) =< s(3801)
s(3824) =< s(3803)
s(3825) =< s(3803)
s(3826) =< s(3804)
s(3827) =< s(3804)
s(3826) =< s(3805)
s(3827) =< s(3805)
s(3826) =< s(3800)
s(3826) =< s(3801)

 * loop 135:echelon_helper_old(A,B,C,D,E,F,G) -> [echelon_helper_old(A',B',C',D',E',F',G')] 
6*s(3865)+16*s(3866)+448*s(3867)+240*s(3871)+80*s(3872)+80*s(3878)+40*s(3879)+40*s(3880)+80*s(3881)+80*s(3882)+64*s(3883)+64*s(3884)+64*s(3885)+64*s(3886)+43
  Such that:s(3858) =< A-D'+1
s(3859) =< B
s(3860) =< 2*B
s(3861) =< D'+1
s(3862) =< 2*D'
s(3863) =< A
s(3864) =< D'
s(3865) =< s(3863)
s(3866) =< s(3864)
s(3867) =< s(3858)
s(3868) =< s(3859)
s(3869) =< s(3867)*s(3859)
s(3870) =< s(3867)*s(3868)
s(3871) =< s(3870)
s(3872) =< s(3869)
s(3873) =< s(3859)-2
s(3873) =< s(3864)
s(3874) =< s(3864)
s(3875) =< s(3867)*s(3864)
s(3876) =< s(3867)*s(3873)
s(3877) =< s(3867)*s(3874)
s(3878) =< s(3876)
s(3879) =< s(3877)
s(3880) =< s(3875)
s(3881) =< s(3861)
s(3882) =< s(3861)
s(3881) =< s(3859)
s(3883) =< s(3863)
s(3884) =< s(3863)
s(3883) =< s(3864)
s(3884) =< s(3864)
s(3883) =< s(3859)
s(3883) =< s(3860)
s(3883) =< s(3862)
s(3884) =< s(3862)
s(3885) =< s(3863)
s(3886) =< s(3863)
s(3885) =< s(3864)
s(3886) =< s(3864)
s(3885) =< s(3859)
s(3885) =< s(3860)

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [s(3805)=<B-1,s(3800)=<B,s(3859)=<B,s(3864)=<D+1]
* Psum in Loop 133: [it(133)=<1,s(3904)=<A,s(3912)=<A-D'+1,s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D']
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D']
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for s(3805)=<B-1  
   - Applying max/min strategy 
     - Loop 133  increases the expression by [B'-D'-1] 
     - Loop 135  increases the expression by [B'-1] 
 * Adding constraints:[s(3805)=<aux(970)+aux(971)+aux(972),aux(970)=<B-1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [s(3800)=<B,s(3859)=<B,s(3864)=<D+1]
* Psum in Loop 133: [it(133)=<1,s(3904)=<A,s(3912)=<A-D'+1,s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(971)=<B'-D'-1]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for s(3800)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[s(3800)=<s(3805)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [s(3859)=<B,s(3864)=<D+1]
* Psum in Loop 133: [it(133)=<1,s(3904)=<A,s(3912)=<A-D'+1,s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(971)=<B'-D'-1]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for s(3859)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[s(3859)=<s(3805)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [s(3864)=<D+1]
* Psum in Loop 133: [it(133)=<1,s(3904)=<A,s(3912)=<A-D'+1,s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(971)=<B'-D'-1]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for s(3864)=<D+1  
   - Applying max/min strategy 
     - Loop 133  increases the expression by 1/1 
     - Loop 135  increases the expression by 1/1 
 * Adding constraints:[s(3864)=<aux(973)+it(133)+it(135),aux(973)=<D+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [it(133)=<1,s(3904)=<A,s(3912)=<A-D'+1,s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(971)=<B'-D'-1]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for it(133)=<1  in Loop 133 
   - Applying inductive sum strategy 
   - No strategy succeeded 
 * Adding constraints: [] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [s(3904)=<A,s(3912)=<A-D'+1,s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(971)=<B'-D'-1]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for s(3904)=<A  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(974)=<A] 
 * Adding constraints: [s(3904)=<it(133)*aux(974)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(974)=<A]
* Psum in Loop 133: [s(3912)=<A-D'+1,s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(971)=<B'-D'-1]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(974)=<A  
   - Applying max/min strategy 
     - Loop 133  increases the expression by [A'-2*D'-1,A'/2-D'-1/2] 
     - Loop 135 does not increase the expression
 * Adding constraints:[aux(974)=<aux(975)+aux(976),aux(975)=<A] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [s(3912)=<A-D'+1,s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(971)=<B'-D'-1,aux(976)=<A'-2*D'-1,aux(976)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for s(3912)=<A-D'+1  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(977)=<A-D] 
 * Adding constraints: [s(3912)=<it(133)*aux(977)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(977)=<A-D]
* Psum in Loop 133: [s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(971)=<B'-D'-1,aux(976)=<A'-2*D'-1,aux(976)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(977)=<A-D  
   - Applying max/min strategy 
     - Loop 133  increases the expression by [A'-2*D'-2,A'/2-D'-3/2] 
     - Loop 135 does not increase the expression
 * Adding constraints:[aux(977)=<aux(978)+aux(979),aux(978)=<A-D] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(971)=<B'-D'-1,aux(979)=<A'-2*D'-2,aux(976)=<A'-2*D'-1,aux(979)=<A'/2-D'-3/2,aux(976)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for s(3902)=<B  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(980)=<B] 
 * Adding constraints: [s(3902)=<it(133)*aux(980)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(980)=<B]
* Psum in Loop 133: [s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(971)=<B'-D'-1,aux(979)=<A'-2*D'-2,aux(976)=<A'-2*D'-1,aux(979)=<A'/2-D'-3/2,aux(976)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(980)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(980)=<s(3805)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(971)=<B'-D'-1,aux(979)=<A'-2*D'-2,aux(976)=<A'-2*D'-1,aux(979)=<A'/2-D'-3/2,aux(976)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for s(3901)=<2*B  in Loop 133 
   - Found a solution using cacheing 
 * Adding constraints: [s(3901)=<aux(981)*2,aux(981)=<it(133)*aux(980)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(971)=<B'-D'-1,aux(979)=<A'-2*D'-2,aux(976)=<A'-2*D'-1,aux(979)=<A'/2-D'-3/2,aux(976)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for s(3903)=<D'  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(982)=<B-1,aux(982)=<D+1] 
 * Adding constraints: [s(3903)=<it(133)*aux(982)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(982)=<B-1,aux(982)=<D+1]
* Psum in Loop 133: [s(3906)=<D'+1,s(3905)=<2*D',aux(971)=<B'-D'-1,aux(979)=<A'-2*D'-2,aux(976)=<A'-2*D'-1,aux(979)=<A'/2-D'-3/2,aux(976)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(982)=<B-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(982)=<s(3805)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(982)=<D+1]
* Psum in Loop 133: [s(3906)=<D'+1,s(3905)=<2*D',aux(971)=<B'-D'-1,aux(979)=<A'-2*D'-2,aux(976)=<A'-2*D'-1,aux(979)=<A'/2-D'-3/2,aux(976)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(982)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(982)=<s(3864)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [s(3906)=<D'+1,s(3905)=<2*D',aux(971)=<B'-D'-1,aux(979)=<A'-2*D'-2,aux(976)=<A'-2*D'-1,aux(979)=<A'/2-D'-3/2,aux(976)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for s(3906)=<D'+1  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(983)=<B,aux(983)=<D+2] 
 * Adding constraints: [s(3906)=<it(133)*aux(983)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(983)=<B,aux(983)=<D+2]
* Psum in Loop 133: [s(3905)=<2*D',aux(971)=<B'-D'-1,aux(979)=<A'-2*D'-2,aux(976)=<A'-2*D'-1,aux(979)=<A'/2-D'-3/2,aux(976)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(983)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(983)=<s(3805)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(983)=<D+2]
* Psum in Loop 133: [s(3905)=<2*D',aux(971)=<B'-D'-1,aux(979)=<A'-2*D'-2,aux(976)=<A'-2*D'-1,aux(979)=<A'/2-D'-3/2,aux(976)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(983)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(983)=<s(3864)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [s(3905)=<2*D',aux(971)=<B'-D'-1,aux(979)=<A'-2*D'-2,aux(976)=<A'-2*D'-1,aux(979)=<A'/2-D'-3/2,aux(976)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for s(3905)=<2*D'  in Loop 133 
   - Found a solution using cacheing 
 * Adding constraints: [s(3905)=<aux(984)*2,aux(984)=<it(133)*aux(982)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(971)=<B'-D'-1,aux(979)=<A'-2*D'-2,aux(976)=<A'-2*D'-1,aux(979)=<A'/2-D'-3/2,aux(976)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for aux(971)=<B'-D'-1  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [] 
 * Adding constraints: [aux(971)=<it(133)*aux(985)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(979)=<A'-2*D'-2,aux(976)=<A'-2*D'-1,aux(979)=<A'/2-D'-3/2,aux(976)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for aux(979)=<A'-2*D'-2  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(986)=<2*A-4*D-7] 
 * Adding constraints: [aux(979)=<it(133)*aux(986)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(986)=<2*A-4*D-7]
* Psum in Loop 133: [aux(976)=<A'-2*D'-1,aux(979)=<A'/2-D'-3/2,aux(976)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(986)=<2*A-4*D-7  
   - Applying max/min strategy 
     - Loop 133  increases the expression by [2*A'-4*D'-6,A'-2*D'-5] 
     - Loop 135 does not increase the expression
 * Adding constraints:[aux(986)=<aux(987)+aux(988),aux(987)=<2*A-4*D-7] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(976)=<A'-2*D'-1,aux(979)=<A'/2-D'-3/2,aux(976)=<A'/2-D'-1/2,aux(988)=<A'-2*D'-5,aux(988)=<2*A'-4*D'-6]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for aux(976)=<A'-2*D'-1  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(989)=<2*A-4*D-6] 
 * Adding constraints: [aux(976)=<it(133)*aux(989)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(989)=<2*A-4*D-6]
* Psum in Loop 133: [aux(979)=<A'/2-D'-3/2,aux(976)=<A'/2-D'-1/2,aux(988)=<A'-2*D'-5,aux(988)=<2*A'-4*D'-6]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(989)=<2*A-4*D-6  
   - Found a solution using cacheing 
 * Adding constraints:[aux(989)=<aux(986)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(979)=<A'/2-D'-3/2,aux(976)=<A'/2-D'-1/2,aux(988)=<A'-2*D'-5,aux(988)=<2*A'-4*D'-6]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for aux(979)=<A'/2-D'-3/2  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(990)=<A-2*D-4] 
 * Adding constraints: [aux(979)=<it(133)*aux(990)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(990)=<A-2*D-4]
* Psum in Loop 133: [aux(976)=<A'/2-D'-1/2,aux(988)=<A'-2*D'-5,aux(988)=<2*A'-4*D'-6]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(990)=<A-2*D-4  
   - Found a solution using cacheing 
 * Adding constraints:[aux(990)=<aux(986)* (1/2)-1/2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(976)=<A'/2-D'-1/2,aux(988)=<A'-2*D'-5,aux(988)=<2*A'-4*D'-6]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for aux(976)=<A'/2-D'-1/2  in Loop 133 
   - Found a solution using cacheing 
 * Adding constraints: [aux(976)=<aux(991)* (1/2),aux(991)=<it(133)*aux(989)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(988)=<A'-2*D'-5,aux(988)=<2*A'-4*D'-6]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for aux(988)=<A'-2*D'-5  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(992)=<2*A-4*D-10] 
 * Adding constraints: [aux(988)=<it(133)*aux(992)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(992)=<2*A-4*D-10]
* Psum in Loop 133: [aux(988)=<2*A'-4*D'-6]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(992)=<2*A-4*D-10  
   - Found a solution using cacheing 
 * Adding constraints:[aux(992)=<aux(986)-3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(988)=<2*A'-4*D'-6]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for aux(988)=<2*A'-4*D'-6  in Loop 133 
   - Found a solution using cacheing 
 * Adding constraints: [aux(988)=<aux(993)*4,aux(993)=<it(133)*aux(990)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for it(135)=<1  in Loop 135 
   - Applying inductive sum strategy 
     - head Candidate: A/2-2 
       - Loop 133 has a reset to  [A-D-7/2]
       - Chain-Tail [136,145] is collaborative
     - head Candidate: A/3-D/3-1 
       - Loop 133 has a reset to  [2/3*A-D-7/3]
       - Chain [136,145] is ignored
     - head Candidate: A/4-D/2-1/2 
       - Loop 133 has a reset to  [A/2-D-7/4]
       - Chain [136,145] is ignored
     - tail Candidate: A/2-2 
       - Loop 133 has undefined behavior 
     - tail Candidate: A/3-D/3-1 
       - Loop 133 has undefined behavior 
     - tail Candidate: A/4-D/2-1/2 
       - Loop 133 has undefined behavior 
 * Adding constraints: [it(135)=<aux(994)+aux(995),it(135)=<aux(996)+aux(997),it(135)=<aux(998)+aux(999),aux(995)=<A/2-2,aux(997)=<A/3-D/3-1,aux(999)=<A/4-D/2-1/2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(994)=<A-D-7/2,aux(998)=<A/2-D-7/4,aux(996)=<2/3*A-D-7/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for aux(994)=<A-D-7/2  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1000)=<A-D-7/2] 
 * Adding constraints: [aux(994)=<it(133)*aux(1000)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1000)=<A-D-7/2]
* Psum in Loop 133: [aux(998)=<A/2-D-7/4,aux(996)=<2/3*A-D-7/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(1000)=<A-D-7/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1000)=<aux(977)-7/2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(998)=<A/2-D-7/4,aux(996)=<2/3*A-D-7/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for aux(998)=<A/2-D-7/4  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1001)=<A/2-D-7/4] 
 * Adding constraints: [aux(998)=<it(133)*aux(1001)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1001)=<A/2-D-7/4]
* Psum in Loop 133: [aux(996)=<2/3*A-D-7/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(1001)=<A/2-D-7/4  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1001)=<aux(986)* (1/4)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(996)=<2/3*A-D-7/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for aux(996)=<2/3*A-D-7/3  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1002)=<2/3*A-D-7/3] 
 * Adding constraints: [aux(996)=<it(133)*aux(1002)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1002)=<2/3*A-D-7/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(1002)=<2/3*A-D-7/3  
   - Applying max/min strategy 
     - Loop 133  increases the expression by [2/3*A'-4/3*D'-5/3,A'/3-2/3*D'-4/3] 
     - Loop 135 does not increase the expression
 * Adding constraints:[aux(1002)=<aux(1003)+aux(1004),aux(1003)=<2/3*A-D-7/3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(1004)=<A'/3-2/3*D'-4/3,aux(1004)=<2/3*A'-4/3*D'-5/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for aux(1004)=<A'/3-2/3*D'-4/3  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1005)=<2/3*A-4/3*D-3] 
 * Adding constraints: [aux(1004)=<it(133)*aux(1005)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1005)=<2/3*A-4/3*D-3]
* Psum in Loop 133: [aux(1004)=<2/3*A'-4/3*D'-5/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(1005)=<2/3*A-4/3*D-3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1005)=<aux(986)* (1/3)-2/3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(1004)=<2/3*A'-4/3*D'-5/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for aux(1004)=<2/3*A'-4/3*D'-5/3  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1006)=<4/3*A-8/3*D-5] 
 * Adding constraints: [aux(1004)=<it(133)*aux(1006)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1006)=<4/3*A-8/3*D-5]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(1006)=<4/3*A-8/3*D-5  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1006)=<aux(986)* (2/3)-1/3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for s(3930)=<A  in Loop 135 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1007)=<A] 
 * Adding constraints: [s(3930)=<it(135)*aux(1007)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1007)=<A]
* Psum in Loop 135: [s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(1007)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1007)=<aux(974)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for s(3938)=<A-D'+1  in Loop 135 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1008)=<A-D] 
 * Adding constraints: [s(3938)=<it(135)*aux(1008)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1008)=<A-D]
* Psum in Loop 135: [s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(1008)=<A-D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1008)=<aux(977)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for s(3928)=<B  in Loop 135 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1009)=<B] 
 * Adding constraints: [s(3928)=<it(135)*aux(1009)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1009)=<B]
* Psum in Loop 135: [s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(1009)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1009)=<s(3805)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for s(3927)=<2*B  in Loop 135 
   - Found a solution using cacheing 
 * Adding constraints: [s(3927)=<aux(1010)*2,aux(1010)=<it(135)*aux(1009)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for s(3929)=<D'  in Loop 135 
   - Applying inductive sum strategy 
     - head Candidate: A-D-2 
       - Loop 133 has a reset to  [2*A-3*D-6]
       - Chain-Tail [136,145] is collaborative
     - head Candidate: A-3 
       - Loop 133 has a reset to  [2*A-2*D-6]
       - Chain-Tail [136,145] is collaborative and bounds [it([136,145])] 
     - tail Candidate: A-D-2 
       - Loop 133 has undefined behavior 
     - tail Candidate: A-3 
       - Loop 133 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1015)=<D+1,aux(1015)=<A/2-1/2] 
 * Adding constraints: [s(3929)=<it(135)*aux(1015),s(3929)=<aux(1011)+aux(1012),it([136,145])+s(3929)=<aux(1013)+aux(1014),aux(1012)=<A-D-2,aux(1014)=<A-3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1015)=<A/2-1/2,aux(1015)=<D+1]
* Psum in Loop 133: [aux(1011)=<2*A-3*D-6,aux(1013)=<2*A-2*D-6]
* Psum in Loop 135: [s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(1015)=<A/2-1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1015)=<aux(974)* (1/2)-1/2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1015)=<D+1]
* Psum in Loop 133: [aux(1011)=<2*A-3*D-6,aux(1013)=<2*A-2*D-6]
* Psum in Loop 135: [s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(1015)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1015)=<s(3864)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(1011)=<2*A-3*D-6,aux(1013)=<2*A-2*D-6]
* Psum in Loop 135: [s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for aux(1011)=<2*A-3*D-6  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1016)=<2*A-3*D-6] 
 * Adding constraints: [aux(1011)=<it(133)*aux(1016)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1016)=<2*A-3*D-6]
* Psum in Loop 133: [aux(1013)=<2*A-2*D-6]
* Psum in Loop 135: [s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(1016)=<2*A-3*D-6  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1016)=<aux(1002)*3+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(1013)=<2*A-2*D-6]
* Psum in Loop 135: [s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for aux(1013)=<2*A-2*D-6  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1017)=<2*A-2*D-6] 
 * Adding constraints: [aux(1013)=<it(133)*aux(1017)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1017)=<2*A-2*D-6]
* Psum in Loop 135: [s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(1017)=<2*A-2*D-6  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1017)=<aux(977)*2-6] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [s(3932)=<D'+1,s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [it([136,145])=<1,s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for s(3932)=<D'+1  in Loop 135 
   - Applying inductive sum strategy 
     - head Candidate: 3/2*A-3 
       - Loop 133 has a reset to  [3*A-3*D-15/2]
       - Chain-Tail [136,145] is collaborative and bounds [it([136,145])] 
     - head Candidate: 4/3*A-D/3-2 
       - Loop 133 has a reset to  [8/3*A-3*D-19/3]
       - Chain-Tail [136,145] is collaborative and bounds [it([136,145])] 
     - tail Candidate: 3/2*A-3 
       - Loop 133 has undefined behavior 
     - tail Candidate: 4/3*A-D/3-2 
       - Loop 133 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1022)=<D+2,aux(1022)=<A/2+1/2] 
 * Adding constraints: [s(3932)=<it(135)*aux(1022),it([136,145])+s(3932)=<aux(1018)+aux(1019),it([136,145])+s(3932)=<aux(1020)+aux(1021),aux(1019)=<3/2*A-3,aux(1021)=<4/3*A-D/3-2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1022)=<A/2+1/2,aux(1022)=<D+2]
* Psum in Loop 133: [aux(1018)=<3*A-3*D-15/2,aux(1020)=<8/3*A-3*D-19/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(1022)=<A/2+1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1022)=<aux(974)* (1/2)+1/2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1022)=<D+2]
* Psum in Loop 133: [aux(1018)=<3*A-3*D-15/2,aux(1020)=<8/3*A-3*D-19/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(1022)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1022)=<s(3864)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(1018)=<3*A-3*D-15/2,aux(1020)=<8/3*A-3*D-19/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for aux(1018)=<3*A-3*D-15/2  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1023)=<3*A-3*D-15/2] 
 * Adding constraints: [aux(1018)=<it(133)*aux(1023)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1023)=<3*A-3*D-15/2]
* Psum in Loop 133: [aux(1020)=<8/3*A-3*D-19/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(1023)=<3*A-3*D-15/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1023)=<aux(977)*3-15/2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(1020)=<8/3*A-3*D-19/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for aux(1020)=<8/3*A-3*D-19/3  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1024)=<8/3*A-3*D-19/3] 
 * Adding constraints: [aux(1020)=<it(133)*aux(1024)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1024)=<8/3*A-3*D-19/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(1024)=<8/3*A-3*D-19/3  
   - Applying max/min strategy 
     - Loop 133  increases the expression by [8/3*A'-16/3*D'-17/3,4/3*A'-8/3*D'-13/3] 
     - Loop 135 does not increase the expression
 * Adding constraints:[aux(1024)=<aux(1025)+aux(1026),aux(1025)=<8/3*A-3*D-19/3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(1026)=<4/3*A'-8/3*D'-13/3,aux(1026)=<8/3*A'-16/3*D'-17/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for aux(1026)=<4/3*A'-8/3*D'-13/3  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1027)=<8/3*A-16/3*D-11] 
 * Adding constraints: [aux(1026)=<it(133)*aux(1027)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1027)=<8/3*A-16/3*D-11]
* Psum in Loop 133: [aux(1026)=<8/3*A'-16/3*D'-17/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(1027)=<8/3*A-16/3*D-11  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1027)=<aux(986)* (4/3)-5/3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(1026)=<8/3*A'-16/3*D'-17/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for aux(1026)=<8/3*A'-16/3*D'-17/3  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1028)=<16/3*A-32/3*D-19] 
 * Adding constraints: [aux(1026)=<it(133)*aux(1028)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1028)=<16/3*A-32/3*D-19]
* Psum in Loop 135: [s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(1028)=<16/3*A-32/3*D-19  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1028)=<aux(986)* (8/3)-1/3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [s(3931)=<2*D',aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for s(3931)=<2*D'  in Loop 135 
   - Found a solution using cacheing 
 * Adding constraints: [s(3931)=<aux(1029)*2,aux(1029)=<it(135)*aux(1015),aux(1029)=<aux(1011)+aux(1012),aux(1029)+it([136,145])=<aux(1013)+aux(1014)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [aux(972)=<B'-1]
* Psum in Chain-Tail [136,145]: [s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for aux(972)=<B'-1  in Loop 135 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [] 
 * Adding constraints: [aux(972)=<it(135)*aux(1030)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Chain-Tail [136,145]: [s(4045)=<A,s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for s(4045)=<A  in Chain-Tail [136,145] 
   - Applying inductive sum strategy 
     - head Candidate: A 
       - Loop 133 has a reset to  [2*A-2*D-3]
       - Loop 135 is collaborative
     - tail Candidate: A 
       - Loop 133 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1033)=<A] 
 * Adding constraints: [s(4045)=<it([136,145])*aux(1033),s(4045)=<aux(1031)+aux(1032),aux(1032)=<A] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1033)=<A]
* Psum in Loop 133: [aux(1031)=<2*A-2*D-3]
* Psum in Chain-Tail [136,145]: [s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(1033)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1033)=<aux(974)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(1031)=<2*A-2*D-3]
* Psum in Chain-Tail [136,145]: [s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for aux(1031)=<2*A-2*D-3  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1034)=<2*A-2*D-3] 
 * Adding constraints: [aux(1031)=<it(133)*aux(1034)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1034)=<2*A-2*D-3]
* Psum in Chain-Tail [136,145]: [s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(1034)=<2*A-2*D-3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1034)=<aux(977)*2-3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Chain-Tail [136,145]: [s(4043)=<B,s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for s(4043)=<B  in Chain-Tail [136,145] 
   - Applying inductive sum strategy 
     - head Candidate: B 
       - Loop 133 has undefined behavior 
     - tail Candidate: B 
       - Loop 133 has undefined behavior 
     - head Candidate: B 
       - We failed to classify this candidate before 
     - tail Candidate: B 
       - We failed to classify this candidate before 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1035)=<B] 
 * Adding constraints: [s(4043)=<it([136,145])*aux(1035)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1035)=<B]
* Psum in Chain-Tail [136,145]: [s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(1035)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1035)=<s(3805)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Chain-Tail [136,145]: [s(4042)=<2*B,s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for s(4042)=<2*B  in Chain-Tail [136,145] 
   - Found a solution using cacheing 
 * Adding constraints: [s(4042)=<aux(1036)*2,aux(1036)=<it([136,145])*aux(1035)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Chain-Tail [136,145]: [s(4044)=<D+1,s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for s(4044)=<D+1  in Chain-Tail [136,145] 
   - Applying inductive sum strategy 
     - head Candidate: D+1 
       - Loop 133 adds a constant 1/1 
       - Loop 135 adds a constant 1/1 
     - tail Candidate: D+1 
       - Loop 133 adds a constant 1/1 
       - Loop 135 adds a constant 1/1 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1039)=<D+1] 
 * Adding constraints: [s(4044)=<it([136,145])*aux(1039),s(4044)=<it(135)+it(133)+aux(1037),s(4044)=<it(135)+it(133)+aux(1038),aux(1037)=<D+1,aux(1038)=<D+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1039)=<D+1]
* Psum in Chain-Tail [136,145]: [s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing max_min for aux(1039)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1039)=<s(3864)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Chain-Tail [136,145]: [s(4047)=<D+2,s(4046)=<2*D+2]

###### Computing sum for s(4047)=<D+2  in Chain-Tail [136,145] 
   - Applying inductive sum strategy 
     - head Candidate: D+2 
       - Loop 133 adds a constant 1/1 
       - Loop 135 adds a constant 1/1 
     - tail Candidate: D+2 
       - Loop 133 adds a constant 1/1 
       - Loop 135 adds a constant 1/1 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1042)=<D+2] 
 * Adding constraints: [s(4047)=<it([136,145])*aux(1042),s(4047)=<it(135)+it(133)+aux(1040),s(4047)=<it(135)+it(133)+aux(1041),aux(1040)=<D+2,aux(1041)=<D+2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1042)=<D+2]
* Psum in Chain-Tail [136,145]: [s(4046)=<2*D+2]

###### Computing max_min for aux(1042)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1042)=<s(3864)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Chain-Tail [136,145]: [s(4046)=<2*D+2]

###### Computing sum for s(4046)=<2*D+2  in Chain-Tail [136,145] 
   - Found a solution using cacheing 
 * Adding constraints: [s(4046)=<aux(1043)*2,aux(1043)=<it([136,145])*aux(1039),aux(1043)=<it(135)+it(133)+aux(1037),aux(1043)=<it(135)+it(133)+aux(1038)] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [133,135,[136,145]] 
Found a cycle in the non-final constraints
Could not solve cycle in cost structure.
 Discarded constraints:  
aux(1042)=<s(3864)+1
aux(1039)=<s(3864)
aux(1035)=<s(3805)+1
aux(1034)=<aux(977)*2-3
aux(1033)=<aux(974)
aux(1028)=<aux(986)* (8/3)-1/3
aux(1027)=<aux(986)* (4/3)-5/3
aux(1024)=<aux(1025)+aux(1026)
aux(1023)=<aux(977)*3-15/2
aux(1022)=<s(3864)+1
aux(1022)=<aux(974)* (1/2)+1/2
aux(1017)=<aux(977)*2-6
aux(1016)=<aux(1002)*3+1
aux(1015)=<s(3864)
aux(1015)=<aux(974)* (1/2)-1/2
aux(1009)=<s(3805)+1
aux(1008)=<aux(977)
aux(1007)=<aux(974)
aux(1006)=<aux(986)* (2/3)-1/3
aux(1005)=<aux(986)* (1/3)-2/3
aux(1002)=<aux(1003)+aux(1004)
aux(1001)=<aux(986)* (1/4)
aux(1000)=<aux(977)-7/2
aux(992)=<aux(986)-3
aux(990)=<aux(986)* (1/2)-1/2
aux(989)=<aux(986)+1
aux(986)=<aux(987)+aux(988)
aux(983)=<s(3864)+1
aux(983)=<s(3805)+1
aux(982)=<s(3864)
aux(982)=<s(3805)
aux(980)=<s(3805)+1
aux(977)=<aux(978)+aux(979)
aux(974)=<aux(975)+aux(976)
s(3864)=<aux(973)+it(133)+it(135)
s(3859)=<s(3805)+1
s(3800)=<s(3805)+1
s(3805)=<aux(970)+aux(971)+aux(972)
aux(1043)=<it(135)+it(133)+aux(1038)
aux(1043)=<it(135)+it(133)+aux(1037)
aux(1043)=<it([136,145])*aux(1039)
s(4046)=<aux(1043)*2
s(4047)=<it(135)+it(133)+aux(1041)
s(4047)=<it(135)+it(133)+aux(1040)
s(4047)=<it([136,145])*aux(1042)
s(4044)=<it(135)+it(133)+aux(1038)
s(4044)=<it(135)+it(133)+aux(1037)
s(4044)=<it([136,145])*aux(1039)
aux(1036)=<it([136,145])*aux(1035)
s(4042)=<aux(1036)*2
s(4043)=<it([136,145])*aux(1035)
aux(1031)=<it(133)*aux(1034)
s(4045)=<aux(1031)+aux(1032)
s(4045)=<it([136,145])*aux(1033)
aux(972)=<it(135)*aux(1030)
aux(1029)+it([136,145])=<aux(1013)+aux(1014)
aux(1029)=<aux(1011)+aux(1012)
aux(1029)=<it(135)*aux(1015)
s(3931)=<aux(1029)*2
aux(1026)=<it(133)*aux(1028)
aux(1026)=<it(133)*aux(1027)
aux(1020)=<it(133)*aux(1024)
aux(1018)=<it(133)*aux(1023)
it([136,145])+s(3932)=<aux(1020)+aux(1021)
it([136,145])+s(3932)=<aux(1018)+aux(1019)
s(3932)=<it(135)*aux(1022)
aux(1013)=<it(133)*aux(1017)
aux(1011)=<it(133)*aux(1016)
it([136,145])+s(3929)=<aux(1013)+aux(1014)
s(3929)=<aux(1011)+aux(1012)
s(3929)=<it(135)*aux(1015)
aux(1010)=<it(135)*aux(1009)
s(3927)=<aux(1010)*2
s(3928)=<it(135)*aux(1009)
s(3938)=<it(135)*aux(1008)
s(3930)=<it(135)*aux(1007)
aux(1004)=<it(133)*aux(1006)
aux(1004)=<it(133)*aux(1005)
aux(996)=<it(133)*aux(1002)
aux(998)=<it(133)*aux(1001)
aux(994)=<it(133)*aux(1000)
it(135)=<aux(998)+aux(999)
it(135)=<aux(996)+aux(997)
it(135)=<aux(994)+aux(995)
aux(993)=<it(133)*aux(990)
aux(988)=<aux(993)*4
aux(988)=<it(133)*aux(992)
aux(991)=<it(133)*aux(989)
aux(976)=<aux(991)* (1/2)
aux(979)=<it(133)*aux(990)
aux(976)=<it(133)*aux(989)
aux(979)=<it(133)*aux(986)
aux(984)=<it(133)*aux(982)
s(3905)=<aux(984)*2
s(3906)=<it(133)*aux(983)
s(3903)=<it(133)*aux(982)
aux(981)=<it(133)*aux(980)
s(3901)=<aux(981)*2
s(3902)=<it(133)*aux(980)
s(3912)=<it(133)*aux(977)
s(3904)=<it(133)*aux(974)

#### Simplifying cost structure of phase [133,135,[136,145]] 
 * Joined equivalent variables [aux(1044),aux(975),aux(1014),aux(1032)] into aux(1044)
 * Joined equivalent variables [aux(1045),aux(978),aux(1012)] into aux(1045)
 * Joined equivalent variables [aux(1046),aux(973),aux(1037),aux(1038)] into aux(1046)
 * Joined equivalent variables [aux(1047),aux(1040),aux(1041)] into aux(1047)
 * Joined equivalent variables [it(133),it(135),it([136,145])] into it(133)

#### Cost of phase [133,135]:echelon_helper_old(A,B,C,D,E,F,G) -> [] 
135*it(133)+6*s(3887)+16*s(3888)+244*s(3889)+120*s(3890)+80*s(3891)+40*s(3892)+40*s(3893)+40*s(3894)+80*s(3895)+80*s(3896)+64*s(3897)+64*s(3898)+64*s(3899)+64*s(3900)+6*s(3913)+16*s(3914)+448*s(3915)+240*s(3916)+80*s(3917)+80*s(3918)+40*s(3919)+40*s(3920)+80*s(3921)+80*s(3922)+64*s(3923)+64*s(3924)+64*s(3925)+64*s(3926)+6*s(4034)+16*s(4035)+80*s(4036)+80*s(4037)+64*s(4038)+64*s(4039)+64*s(4040)+64*s(4041)+0
Unbounded itvars
it(133) :  it(133)
s(3887) :  sum(133),s(3806)
s(3888) :  sum(133),s(3807)
s(3889) :  sum(133),s(3808)
s(3890) :  sum(133),s(3817)
s(3891) :  sum(133),s(3818)
s(3892) :  sum(133),s(3819)
s(3893) :  sum(133),s(3820)
s(3894) :  sum(133),s(3821)
s(3895) :  sum(133),s(3822)
s(3896) :  sum(133),s(3823)
s(3897) :  sum(133),s(3824)
s(3898) :  sum(133),s(3825)
s(3899) :  sum(133),s(3826)
s(3900) :  sum(133),s(3827)
s(3913) :  sum(135),s(3865)
s(3914) :  sum(135),s(3866)
s(3915) :  sum(135),s(3867)
s(3916) :  sum(135),s(3871)
s(3917) :  sum(135),s(3872)
s(3918) :  sum(135),s(3878)
s(3919) :  sum(135),s(3879)
s(3920) :  sum(135),s(3880)
s(3921) :  sum(135),s(3881)
s(3922) :  sum(135),s(3882)
s(3923) :  sum(135),s(3883)
s(3924) :  sum(135),s(3884)
s(3925) :  sum(135),s(3885)
s(3926) :  sum(135),s(3886)
s(4034) :  sum([136,145]),s(4019)
s(4035) :  sum([136,145]),s(4027)
s(4036) :  sum([136,145]),s(4028)
s(4037) :  sum([136,145]),s(4029)
s(4038) :  sum([136,145]),s(4030)
s(4039) :  sum([136,145]),s(4031)
s(4040) :  sum([136,145]),s(4032)
s(4041) :  sum([136,145]),s(4033)

#### Found solution for phase  [133,135] in the cache 

#### Cost of phase [133,135]:echelon_helper_old(A,B,C,D,E,F,G) -> [echelon_helper_old(A',B',C',D',E',F',G')] 
86*it(133)+6*s(3887)+16*s(3888)+244*s(3889)+120*s(3890)+80*s(3891)+40*s(3892)+40*s(3893)+40*s(3894)+80*s(3895)+80*s(3896)+64*s(3897)+64*s(3898)+64*s(3899)+64*s(3900)+6*s(3913)+16*s(3914)+448*s(3915)+240*s(3916)+80*s(3917)+80*s(3918)+40*s(3919)+40*s(3920)+80*s(3921)+80*s(3922)+64*s(3923)+64*s(3924)+64*s(3925)+64*s(3926)+0
Unbounded itvars
it(133) :  it(133)
s(3887) :  sum(133),s(3806)
s(3888) :  sum(133),s(3807)
s(3889) :  sum(133),s(3808)
s(3890) :  sum(133),s(3817)
s(3891) :  sum(133),s(3818)
s(3892) :  sum(133),s(3819)
s(3893) :  sum(133),s(3820)
s(3894) :  sum(133),s(3821)
s(3895) :  sum(133),s(3822)
s(3896) :  sum(133),s(3823)
s(3897) :  sum(133),s(3824)
s(3898) :  sum(133),s(3825)
s(3899) :  sum(133),s(3826)
s(3900) :  sum(133),s(3827)
s(3913) :  sum(135),s(3865)
s(3914) :  sum(135),s(3866)
s(3915) :  sum(135),s(3867)
s(3916) :  sum(135),s(3871)
s(3917) :  sum(135),s(3872)
s(3918) :  sum(135),s(3878)
s(3919) :  sum(135),s(3879)
s(3920) :  sum(135),s(3880)
s(3921) :  sum(135),s(3881)
s(3922) :  sum(135),s(3882)
s(3923) :  sum(135),s(3883)
s(3924) :  sum(135),s(3884)
s(3925) :  sum(135),s(3885)
s(3926) :  sum(135),s(3886)
Some Itvars are unbounded [aux(850),aux(851),s(4049),s(4051),s(4052),s(4055)] 
Changing solving method to compute the cost of the chain directly 

#### Computing cost of chain [[133,135],134,144] with linear recursion
 * Renamed intermediate variables: 
[ (it(133),s(3772))>>s(3799), (it(133),s(3773))>>s(3800), (it(133),s(3774))>>s(3801), (it(133),s(3777))>>s(3802), (it(133),s(3770))>>s(3803), (it(133),aux(730))>>s(3804), (it(133),aux(731))>>s(3805), (it(133),s(3769))>>s(3806), (it(133),s(3778))>>s(3807), (it(133),s(3779))>>s(3808), (it(133),s(3780))>>s(3809), (it(133),s(3781))>>s(3810), (it(133),s(3782))>>s(3811), (it(133),s(3783))>>s(3812), (it(133),s(3784))>>s(3813), (it(133),s(3785))>>s(3814), (it(133),s(3786))>>s(3815), (it(133),s(3787))>>s(3816), (it(133),s(3788))>>s(3817), (it(133),s(3789))>>s(3818), (it(133),s(3790))>>s(3819), (it(133),s(3791))>>s(3820), (it(133),s(3792))>>s(3821), (it(133),s(3793))>>s(3822), (it(133),s(3794))>>s(3823), (it(133),s(3795))>>s(3824), (it(133),s(3796))>>s(3825), (it(133),s(3797))>>s(3826), (it(133),s(3798))>>s(3827)]
 * Renamed intermediate variables: 
[ (it(135),s(3831))>>s(3858), (it(135),s(3832))>>s(3859), (it(135),s(3833))>>s(3860), (it(135),s(3836))>>s(3861), (it(135),s(3829))>>s(3862), (it(135),aux(732))>>s(3863), (it(135),aux(733))>>s(3864), (it(135),s(3828))>>s(3865), (it(135),s(3837))>>s(3866), (it(135),s(3838))>>s(3867), (it(135),s(3839))>>s(3868), (it(135),s(3840))>>s(3869), (it(135),s(3841))>>s(3870), (it(135),s(3842))>>s(3871), (it(135),s(3843))>>s(3872), (it(135),s(3844))>>s(3873), (it(135),s(3845))>>s(3874), (it(135),s(3846))>>s(3875), (it(135),s(3847))>>s(3876), (it(135),s(3848))>>s(3877), (it(135),s(3849))>>s(3878), (it(135),s(3850))>>s(3879), (it(135),s(3851))>>s(3880), (it(135),s(3852))>>s(3881), (it(135),s(3853))>>s(3882), (it(135),s(3854))>>s(3883), (it(135),s(3855))>>s(3884), (it(135),s(3856))>>s(3885), (it(135),s(3857))>>s(3886)]

#### Cost of loops [133,135] 

 * loop 133:echelon_helper_old(A,B,C,D,E,F,G) -> [echelon_helper_old(A',B',C',D',E',F',G')] 
6*s(3806)+16*s(3807)+244*s(3808)+120*s(3817)+80*s(3818)+40*s(3819)+40*s(3820)+40*s(3821)+80*s(3822)+80*s(3823)+64*s(3824)+64*s(3825)+64*s(3826)+64*s(3827)+43
  Such that:s(3799) =< A-D'+1
s(3800) =< B
s(3801) =< 2*B
s(3802) =< D'+1
s(3803) =< 2*D'
s(3804) =< A
s(3805) =< D'
s(3806) =< s(3804)
s(3807) =< s(3805)
s(3808) =< s(3799)
s(3809) =< s(3800)-2
s(3810) =< s(3800)
s(3811) =< s(3808)*s(3800)
s(3809) =< s(3805)
s(3812) =< s(3805)
s(3813) =< s(3808)*s(3810)
s(3814) =< s(3808)*s(3805)
s(3815) =< s(3808)*s(3809)
s(3816) =< s(3808)*s(3812)
s(3817) =< s(3813)
s(3818) =< s(3815)
s(3819) =< s(3816)
s(3820) =< s(3811)
s(3821) =< s(3814)
s(3822) =< s(3802)
s(3823) =< s(3802)
s(3822) =< s(3800)
s(3824) =< s(3804)
s(3825) =< s(3804)
s(3824) =< s(3805)
s(3825) =< s(3805)
s(3824) =< s(3800)
s(3824) =< s(3801)
s(3824) =< s(3803)
s(3825) =< s(3803)
s(3826) =< s(3804)
s(3827) =< s(3804)
s(3826) =< s(3805)
s(3827) =< s(3805)
s(3826) =< s(3800)
s(3826) =< s(3801)

 * loop 135:echelon_helper_old(A,B,C,D,E,F,G) -> [echelon_helper_old(A',B',C',D',E',F',G')] 
6*s(3865)+16*s(3866)+448*s(3867)+240*s(3871)+80*s(3872)+80*s(3878)+40*s(3879)+40*s(3880)+80*s(3881)+80*s(3882)+64*s(3883)+64*s(3884)+64*s(3885)+64*s(3886)+43
  Such that:s(3858) =< A-D'+1
s(3859) =< B
s(3860) =< 2*B
s(3861) =< D'+1
s(3862) =< 2*D'
s(3863) =< A
s(3864) =< D'
s(3865) =< s(3863)
s(3866) =< s(3864)
s(3867) =< s(3858)
s(3868) =< s(3859)
s(3869) =< s(3867)*s(3859)
s(3870) =< s(3867)*s(3868)
s(3871) =< s(3870)
s(3872) =< s(3869)
s(3873) =< s(3859)-2
s(3873) =< s(3864)
s(3874) =< s(3864)
s(3875) =< s(3867)*s(3864)
s(3876) =< s(3867)*s(3873)
s(3877) =< s(3867)*s(3874)
s(3878) =< s(3876)
s(3879) =< s(3877)
s(3880) =< s(3875)
s(3881) =< s(3861)
s(3882) =< s(3861)
s(3881) =< s(3859)
s(3883) =< s(3863)
s(3884) =< s(3863)
s(3883) =< s(3864)
s(3884) =< s(3864)
s(3883) =< s(3859)
s(3883) =< s(3860)
s(3883) =< s(3862)
s(3884) =< s(3862)
s(3885) =< s(3863)
s(3886) =< s(3863)
s(3885) =< s(3864)
s(3886) =< s(3864)
s(3885) =< s(3859)
s(3885) =< s(3860)

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [s(3805)=<B-1,s(3800)=<B,s(3859)=<B,s(4051)=<B,aux(851)=<D+1,s(3864)=<D+1]
* Psum in Loop 133: [it(133)=<1,s(3904)=<A,s(3912)=<A-D'+1,s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D']
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D']
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for s(3805)=<B-1  
   - Applying max/min strategy 
     - Loop 133  increases the expression by [B'-D'-1] 
     - Loop 135  increases the expression by [B'-1] 
 * Adding constraints:[s(3805)=<aux(1048)+aux(1049)+aux(1050),aux(1048)=<B-1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [s(3800)=<B,s(3859)=<B,s(4051)=<B,aux(851)=<D+1,s(3864)=<D+1]
* Psum in Loop 133: [it(133)=<1,s(3904)=<A,s(3912)=<A-D'+1,s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(1049)=<B'-D'-1]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for s(3800)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[s(3800)=<s(3805)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [s(3859)=<B,s(4051)=<B,aux(851)=<D+1,s(3864)=<D+1]
* Psum in Loop 133: [it(133)=<1,s(3904)=<A,s(3912)=<A-D'+1,s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(1049)=<B'-D'-1]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for s(3859)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[s(3859)=<s(3805)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [s(4051)=<B,aux(851)=<D+1,s(3864)=<D+1]
* Psum in Loop 133: [it(133)=<1,s(3904)=<A,s(3912)=<A-D'+1,s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(1049)=<B'-D'-1]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for s(4051)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[s(4051)=<s(3805)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(851)=<D+1,s(3864)=<D+1]
* Psum in Loop 133: [it(133)=<1,s(3904)=<A,s(3912)=<A-D'+1,s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(1049)=<B'-D'-1]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(851)=<D+1  
   - Applying max/min strategy 
     - Loop 133  increases the expression by 1/1 
     - Loop 135  increases the expression by 1/1 
 * Adding constraints:[aux(851)=<aux(1051)+it(133)+it(135),aux(1051)=<D+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [s(3864)=<D+1]
* Psum in Loop 133: [it(133)=<1,s(3904)=<A,s(3912)=<A-D'+1,s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(1049)=<B'-D'-1]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for s(3864)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[s(3864)=<aux(851)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [it(133)=<1,s(3904)=<A,s(3912)=<A-D'+1,s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(1049)=<B'-D'-1]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for it(133)=<1  in Loop 133 
   - Applying inductive sum strategy 
   - No strategy succeeded 
 * Adding constraints: [] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [s(3904)=<A,s(3912)=<A-D'+1,s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(1049)=<B'-D'-1]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for s(3904)=<A  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1052)=<A] 
 * Adding constraints: [s(3904)=<it(133)*aux(1052)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1052)=<A]
* Psum in Loop 133: [s(3912)=<A-D'+1,s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(1049)=<B'-D'-1]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(1052)=<A  
   - Applying max/min strategy 
     - Loop 133  increases the expression by [A'-2*D'-1,A'/2-D'-1/2] 
     - Loop 135 does not increase the expression
 * Adding constraints:[aux(1052)=<aux(1053)+aux(1054),aux(1053)=<A] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [s(3912)=<A-D'+1,s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(1049)=<B'-D'-1,aux(1054)=<A'-2*D'-1,aux(1054)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for s(3912)=<A-D'+1  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1055)=<A-D] 
 * Adding constraints: [s(3912)=<it(133)*aux(1055)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1055)=<A-D]
* Psum in Loop 133: [s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(1049)=<B'-D'-1,aux(1054)=<A'-2*D'-1,aux(1054)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(1055)=<A-D  
   - Applying max/min strategy 
     - Loop 133  increases the expression by [A'-2*D'-2,A'/2-D'-3/2] 
     - Loop 135 does not increase the expression
 * Adding constraints:[aux(1055)=<aux(1056)+aux(1057),aux(1056)=<A-D] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [s(3902)=<B,s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(1049)=<B'-D'-1,aux(1057)=<A'-2*D'-2,aux(1054)=<A'-2*D'-1,aux(1057)=<A'/2-D'-3/2,aux(1054)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for s(3902)=<B  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1058)=<B] 
 * Adding constraints: [s(3902)=<it(133)*aux(1058)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1058)=<B]
* Psum in Loop 133: [s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(1049)=<B'-D'-1,aux(1057)=<A'-2*D'-2,aux(1054)=<A'-2*D'-1,aux(1057)=<A'/2-D'-3/2,aux(1054)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(1058)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1058)=<s(3805)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [s(3901)=<2*B,s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(1049)=<B'-D'-1,aux(1057)=<A'-2*D'-2,aux(1054)=<A'-2*D'-1,aux(1057)=<A'/2-D'-3/2,aux(1054)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for s(3901)=<2*B  in Loop 133 
   - Found a solution using cacheing 
 * Adding constraints: [s(3901)=<aux(1059)*2,aux(1059)=<it(133)*aux(1058)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [s(3903)=<D',s(3906)=<D'+1,s(3905)=<2*D',aux(1049)=<B'-D'-1,aux(1057)=<A'-2*D'-2,aux(1054)=<A'-2*D'-1,aux(1057)=<A'/2-D'-3/2,aux(1054)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for s(3903)=<D'  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1060)=<B-1,aux(1060)=<D+1] 
 * Adding constraints: [s(3903)=<it(133)*aux(1060)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1060)=<B-1,aux(1060)=<D+1]
* Psum in Loop 133: [s(3906)=<D'+1,s(3905)=<2*D',aux(1049)=<B'-D'-1,aux(1057)=<A'-2*D'-2,aux(1054)=<A'-2*D'-1,aux(1057)=<A'/2-D'-3/2,aux(1054)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(1060)=<B-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1060)=<s(3805)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1060)=<D+1]
* Psum in Loop 133: [s(3906)=<D'+1,s(3905)=<2*D',aux(1049)=<B'-D'-1,aux(1057)=<A'-2*D'-2,aux(1054)=<A'-2*D'-1,aux(1057)=<A'/2-D'-3/2,aux(1054)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(1060)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1060)=<aux(851)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [s(3906)=<D'+1,s(3905)=<2*D',aux(1049)=<B'-D'-1,aux(1057)=<A'-2*D'-2,aux(1054)=<A'-2*D'-1,aux(1057)=<A'/2-D'-3/2,aux(1054)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for s(3906)=<D'+1  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1061)=<B,aux(1061)=<D+2] 
 * Adding constraints: [s(3906)=<it(133)*aux(1061)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1061)=<B,aux(1061)=<D+2]
* Psum in Loop 133: [s(3905)=<2*D',aux(1049)=<B'-D'-1,aux(1057)=<A'-2*D'-2,aux(1054)=<A'-2*D'-1,aux(1057)=<A'/2-D'-3/2,aux(1054)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(1061)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1061)=<s(3805)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1061)=<D+2]
* Psum in Loop 133: [s(3905)=<2*D',aux(1049)=<B'-D'-1,aux(1057)=<A'-2*D'-2,aux(1054)=<A'-2*D'-1,aux(1057)=<A'/2-D'-3/2,aux(1054)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(1061)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1061)=<aux(851)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [s(3905)=<2*D',aux(1049)=<B'-D'-1,aux(1057)=<A'-2*D'-2,aux(1054)=<A'-2*D'-1,aux(1057)=<A'/2-D'-3/2,aux(1054)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for s(3905)=<2*D'  in Loop 133 
   - Found a solution using cacheing 
 * Adding constraints: [s(3905)=<aux(1062)*2,aux(1062)=<it(133)*aux(1060)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(1049)=<B'-D'-1,aux(1057)=<A'-2*D'-2,aux(1054)=<A'-2*D'-1,aux(1057)=<A'/2-D'-3/2,aux(1054)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for aux(1049)=<B'-D'-1  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [] 
 * Adding constraints: [aux(1049)=<it(133)*aux(1063)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(1057)=<A'-2*D'-2,aux(1054)=<A'-2*D'-1,aux(1057)=<A'/2-D'-3/2,aux(1054)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for aux(1057)=<A'-2*D'-2  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1064)=<2*A-4*D-7] 
 * Adding constraints: [aux(1057)=<it(133)*aux(1064)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1064)=<2*A-4*D-7]
* Psum in Loop 133: [aux(1054)=<A'-2*D'-1,aux(1057)=<A'/2-D'-3/2,aux(1054)=<A'/2-D'-1/2]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(1064)=<2*A-4*D-7  
   - Applying max/min strategy 
     - Loop 133  increases the expression by [2*A'-4*D'-6,A'-2*D'-5] 
     - Loop 135 does not increase the expression
 * Adding constraints:[aux(1064)=<aux(1065)+aux(1066),aux(1065)=<2*A-4*D-7] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(1054)=<A'-2*D'-1,aux(1057)=<A'/2-D'-3/2,aux(1054)=<A'/2-D'-1/2,aux(1066)=<A'-2*D'-5,aux(1066)=<2*A'-4*D'-6]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for aux(1054)=<A'-2*D'-1  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1067)=<2*A-4*D-6] 
 * Adding constraints: [aux(1054)=<it(133)*aux(1067)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1067)=<2*A-4*D-6]
* Psum in Loop 133: [aux(1057)=<A'/2-D'-3/2,aux(1054)=<A'/2-D'-1/2,aux(1066)=<A'-2*D'-5,aux(1066)=<2*A'-4*D'-6]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(1067)=<2*A-4*D-6  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1067)=<aux(1064)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(1057)=<A'/2-D'-3/2,aux(1054)=<A'/2-D'-1/2,aux(1066)=<A'-2*D'-5,aux(1066)=<2*A'-4*D'-6]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for aux(1057)=<A'/2-D'-3/2  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1068)=<A-2*D-4] 
 * Adding constraints: [aux(1057)=<it(133)*aux(1068)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1068)=<A-2*D-4]
* Psum in Loop 133: [aux(1054)=<A'/2-D'-1/2,aux(1066)=<A'-2*D'-5,aux(1066)=<2*A'-4*D'-6]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(1068)=<A-2*D-4  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1068)=<aux(1064)* (1/2)-1/2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(1054)=<A'/2-D'-1/2,aux(1066)=<A'-2*D'-5,aux(1066)=<2*A'-4*D'-6]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for aux(1054)=<A'/2-D'-1/2  in Loop 133 
   - Found a solution using cacheing 
 * Adding constraints: [aux(1054)=<aux(1069)* (1/2),aux(1069)=<it(133)*aux(1067)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(1066)=<A'-2*D'-5,aux(1066)=<2*A'-4*D'-6]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for aux(1066)=<A'-2*D'-5  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1070)=<2*A-4*D-10] 
 * Adding constraints: [aux(1066)=<it(133)*aux(1070)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1070)=<2*A-4*D-10]
* Psum in Loop 133: [aux(1066)=<2*A'-4*D'-6]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(1070)=<2*A-4*D-10  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1070)=<aux(1064)-3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(1066)=<2*A'-4*D'-6]
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for aux(1066)=<2*A'-4*D'-6  in Loop 133 
   - Found a solution using cacheing 
 * Adding constraints: [aux(1066)=<aux(1071)*4,aux(1071)=<it(133)*aux(1068)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [it(135)=<1,s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for it(135)=<1  in Loop 135 
   - Applying inductive sum strategy 
     - head Candidate: A/2-2 
       - Loop 133 has a reset to  [A-D-7/2]
       - Chain-Tail [134,144] is collaborative
     - head Candidate: A/3-D/3-1 
       - Loop 133 has a reset to  [2/3*A-D-7/3]
       - Chain [134,144] is ignored
     - head Candidate: A/4-D/2-1/2 
       - Loop 133 has a reset to  [A/2-D-7/4]
       - Chain [134,144] is ignored
     - tail Candidate: A/2-2 
       - Loop 133 has undefined behavior 
     - tail Candidate: A/3-D/3-1 
       - Loop 133 has undefined behavior 
     - tail Candidate: A/4-D/2-1/2 
       - Loop 133 has undefined behavior 
 * Adding constraints: [it(135)=<aux(1072)+aux(1073),it(135)=<aux(1074)+aux(1075),it(135)=<aux(1076)+aux(1077),aux(1073)=<A/2-2,aux(1075)=<A/3-D/3-1,aux(1077)=<A/4-D/2-1/2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(1072)=<A-D-7/2,aux(1076)=<A/2-D-7/4,aux(1074)=<2/3*A-D-7/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for aux(1072)=<A-D-7/2  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1078)=<A-D-7/2] 
 * Adding constraints: [aux(1072)=<it(133)*aux(1078)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1078)=<A-D-7/2]
* Psum in Loop 133: [aux(1076)=<A/2-D-7/4,aux(1074)=<2/3*A-D-7/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(1078)=<A-D-7/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1078)=<aux(1055)-7/2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(1076)=<A/2-D-7/4,aux(1074)=<2/3*A-D-7/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for aux(1076)=<A/2-D-7/4  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1079)=<A/2-D-7/4] 
 * Adding constraints: [aux(1076)=<it(133)*aux(1079)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1079)=<A/2-D-7/4]
* Psum in Loop 133: [aux(1074)=<2/3*A-D-7/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(1079)=<A/2-D-7/4  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1079)=<aux(1064)* (1/4)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(1074)=<2/3*A-D-7/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for aux(1074)=<2/3*A-D-7/3  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1080)=<2/3*A-D-7/3] 
 * Adding constraints: [aux(1074)=<it(133)*aux(1080)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1080)=<2/3*A-D-7/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(1080)=<2/3*A-D-7/3  
   - Applying max/min strategy 
     - Loop 133  increases the expression by [2/3*A'-4/3*D'-5/3,A'/3-2/3*D'-4/3] 
     - Loop 135 does not increase the expression
 * Adding constraints:[aux(1080)=<aux(1081)+aux(1082),aux(1081)=<2/3*A-D-7/3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(1082)=<A'/3-2/3*D'-4/3,aux(1082)=<2/3*A'-4/3*D'-5/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for aux(1082)=<A'/3-2/3*D'-4/3  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1083)=<2/3*A-4/3*D-3] 
 * Adding constraints: [aux(1082)=<it(133)*aux(1083)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1083)=<2/3*A-4/3*D-3]
* Psum in Loop 133: [aux(1082)=<2/3*A'-4/3*D'-5/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(1083)=<2/3*A-4/3*D-3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1083)=<aux(1064)* (1/3)-2/3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(1082)=<2/3*A'-4/3*D'-5/3]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for aux(1082)=<2/3*A'-4/3*D'-5/3  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1084)=<4/3*A-8/3*D-5] 
 * Adding constraints: [aux(1082)=<it(133)*aux(1084)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1084)=<4/3*A-8/3*D-5]
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(1084)=<4/3*A-8/3*D-5  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1084)=<aux(1064)* (2/3)-1/3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [s(3930)=<A,s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for s(3930)=<A  in Loop 135 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1085)=<A] 
 * Adding constraints: [s(3930)=<it(135)*aux(1085)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1085)=<A]
* Psum in Loop 135: [s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(1085)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1085)=<aux(1052)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [s(3938)=<A-D'+1,s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for s(3938)=<A-D'+1  in Loop 135 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1086)=<A-D] 
 * Adding constraints: [s(3938)=<it(135)*aux(1086)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1086)=<A-D]
* Psum in Loop 135: [s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(1086)=<A-D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1086)=<aux(1055)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [s(3928)=<B,s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for s(3928)=<B  in Loop 135 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1087)=<B] 
 * Adding constraints: [s(3928)=<it(135)*aux(1087)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1087)=<B]
* Psum in Loop 135: [s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(1087)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1087)=<s(3805)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [s(3927)=<2*B,s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for s(3927)=<2*B  in Loop 135 
   - Found a solution using cacheing 
 * Adding constraints: [s(3927)=<aux(1088)*2,aux(1088)=<it(135)*aux(1087)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [s(3929)=<D',s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for s(3929)=<D'  in Loop 135 
   - Applying inductive sum strategy 
     - head Candidate: A-D-2 
       - Loop 133 has a reset to  [2*A-3*D-6]
       - Chain-Tail [134,144] is collaborative
     - head Candidate: A-3 
       - Loop 133 has a reset to  [2*A-2*D-6]
       - Chain-Tail [134,144] is collaborative and bounds [it([134,144])] 
     - tail Candidate: A-D-2 
       - Loop 133 has undefined behavior 
     - tail Candidate: A-3 
       - Loop 133 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1093)=<D+1,aux(1093)=<A/2-1/2] 
 * Adding constraints: [s(3929)=<it(135)*aux(1093),s(3929)=<aux(1089)+aux(1090),it([134,144])+s(3929)=<aux(1091)+aux(1092),aux(1090)=<A-D-2,aux(1092)=<A-3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1093)=<A/2-1/2,aux(1093)=<D+1]
* Psum in Loop 133: [aux(1089)=<2*A-3*D-6,aux(1091)=<2*A-2*D-6]
* Psum in Loop 135: [s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(1093)=<A/2-1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1093)=<aux(1052)* (1/2)-1/2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1093)=<D+1]
* Psum in Loop 133: [aux(1089)=<2*A-3*D-6,aux(1091)=<2*A-2*D-6]
* Psum in Loop 135: [s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(1093)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1093)=<aux(851)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(1089)=<2*A-3*D-6,aux(1091)=<2*A-2*D-6]
* Psum in Loop 135: [s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for aux(1089)=<2*A-3*D-6  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1094)=<2*A-3*D-6] 
 * Adding constraints: [aux(1089)=<it(133)*aux(1094)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1094)=<2*A-3*D-6]
* Psum in Loop 133: [aux(1091)=<2*A-2*D-6]
* Psum in Loop 135: [s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(1094)=<2*A-3*D-6  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1094)=<aux(1080)*3+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(1091)=<2*A-2*D-6]
* Psum in Loop 135: [s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for aux(1091)=<2*A-2*D-6  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1095)=<2*A-2*D-6] 
 * Adding constraints: [aux(1091)=<it(133)*aux(1095)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1095)=<2*A-2*D-6]
* Psum in Loop 135: [s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(1095)=<2*A-2*D-6  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1095)=<aux(1055)*2-6] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [s(3932)=<D'+1,s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [it([134,144])=<1,s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for s(3932)=<D'+1  in Loop 135 
   - Applying inductive sum strategy 
     - head Candidate: 3/2*A-3 
       - Loop 133 has a reset to  [3*A-3*D-15/2]
       - Chain-Tail [134,144] is collaborative and bounds [it([134,144])] 
     - head Candidate: 4/3*A-D/3-2 
       - Loop 133 has a reset to  [8/3*A-3*D-19/3]
       - Chain-Tail [134,144] is collaborative and bounds [it([134,144])] 
     - tail Candidate: 3/2*A-3 
       - Loop 133 has undefined behavior 
     - tail Candidate: 4/3*A-D/3-2 
       - Loop 133 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1100)=<D+2,aux(1100)=<A/2+1/2] 
 * Adding constraints: [s(3932)=<it(135)*aux(1100),it([134,144])+s(3932)=<aux(1096)+aux(1097),it([134,144])+s(3932)=<aux(1098)+aux(1099),aux(1097)=<3/2*A-3,aux(1099)=<4/3*A-D/3-2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1100)=<A/2+1/2,aux(1100)=<D+2]
* Psum in Loop 133: [aux(1096)=<3*A-3*D-15/2,aux(1098)=<8/3*A-3*D-19/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(1100)=<A/2+1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1100)=<aux(1052)* (1/2)+1/2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1100)=<D+2]
* Psum in Loop 133: [aux(1096)=<3*A-3*D-15/2,aux(1098)=<8/3*A-3*D-19/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(1100)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1100)=<aux(851)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(1096)=<3*A-3*D-15/2,aux(1098)=<8/3*A-3*D-19/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for aux(1096)=<3*A-3*D-15/2  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1101)=<3*A-3*D-15/2] 
 * Adding constraints: [aux(1096)=<it(133)*aux(1101)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1101)=<3*A-3*D-15/2]
* Psum in Loop 133: [aux(1098)=<8/3*A-3*D-19/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(1101)=<3*A-3*D-15/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1101)=<aux(1055)*3-15/2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(1098)=<8/3*A-3*D-19/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for aux(1098)=<8/3*A-3*D-19/3  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1102)=<8/3*A-3*D-19/3] 
 * Adding constraints: [aux(1098)=<it(133)*aux(1102)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1102)=<8/3*A-3*D-19/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(1102)=<8/3*A-3*D-19/3  
   - Applying max/min strategy 
     - Loop 133  increases the expression by [8/3*A'-16/3*D'-17/3,4/3*A'-8/3*D'-13/3] 
     - Loop 135 does not increase the expression
 * Adding constraints:[aux(1102)=<aux(1103)+aux(1104),aux(1103)=<8/3*A-3*D-19/3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(1104)=<4/3*A'-8/3*D'-13/3,aux(1104)=<8/3*A'-16/3*D'-17/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for aux(1104)=<4/3*A'-8/3*D'-13/3  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1105)=<8/3*A-16/3*D-11] 
 * Adding constraints: [aux(1104)=<it(133)*aux(1105)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1105)=<8/3*A-16/3*D-11]
* Psum in Loop 133: [aux(1104)=<8/3*A'-16/3*D'-17/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(1105)=<8/3*A-16/3*D-11  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1105)=<aux(1064)* (4/3)-5/3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(1104)=<8/3*A'-16/3*D'-17/3]
* Psum in Loop 135: [s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for aux(1104)=<8/3*A'-16/3*D'-17/3  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1106)=<16/3*A-32/3*D-19] 
 * Adding constraints: [aux(1104)=<it(133)*aux(1106)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1106)=<16/3*A-32/3*D-19]
* Psum in Loop 135: [s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(1106)=<16/3*A-32/3*D-19  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1106)=<aux(1064)* (8/3)-1/3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [s(3931)=<2*D',aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for s(3931)=<2*D'  in Loop 135 
   - Found a solution using cacheing 
 * Adding constraints: [s(3931)=<aux(1107)*2,aux(1107)=<it(135)*aux(1093),aux(1107)=<aux(1089)+aux(1090),aux(1107)+it([134,144])=<aux(1091)+aux(1092)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 135: [aux(1050)=<B'-1]
* Psum in Chain-Tail [134,144]: [s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for aux(1050)=<B'-1  in Loop 135 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [] 
 * Adding constraints: [aux(1050)=<it(135)*aux(1108)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Chain-Tail [134,144]: [s(4093)=<A,s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for s(4093)=<A  in Chain-Tail [134,144] 
   - Applying inductive sum strategy 
     - head Candidate: A 
       - Loop 133 has a reset to  [2*A-2*D-3]
       - Loop 135 is collaborative
     - tail Candidate: A 
       - Loop 133 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1111)=<A] 
 * Adding constraints: [s(4093)=<it([134,144])*aux(1111),s(4093)=<aux(1109)+aux(1110),aux(1110)=<A] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1111)=<A]
* Psum in Loop 133: [aux(1109)=<2*A-2*D-3]
* Psum in Chain-Tail [134,144]: [s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(1111)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1111)=<aux(1052)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Loop 133: [aux(1109)=<2*A-2*D-3]
* Psum in Chain-Tail [134,144]: [s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for aux(1109)=<2*A-2*D-3  in Loop 133 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1112)=<2*A-2*D-3] 
 * Adding constraints: [aux(1109)=<it(133)*aux(1112)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1112)=<2*A-2*D-3]
* Psum in Chain-Tail [134,144]: [s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(1112)=<2*A-2*D-3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1112)=<aux(1055)*2-3] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Chain-Tail [134,144]: [s(4091)=<B,s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for s(4091)=<B  in Chain-Tail [134,144] 
   - Applying inductive sum strategy 
     - head Candidate: B 
       - Loop 133 has undefined behavior 
     - tail Candidate: B 
       - Loop 133 has undefined behavior 
     - head Candidate: B 
       - We failed to classify this candidate before 
     - tail Candidate: B 
       - We failed to classify this candidate before 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1113)=<B] 
 * Adding constraints: [s(4091)=<it([134,144])*aux(1113)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1113)=<B]
* Psum in Chain-Tail [134,144]: [s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(1113)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1113)=<s(3805)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Chain-Tail [134,144]: [s(4090)=<2*B,s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for s(4090)=<2*B  in Chain-Tail [134,144] 
   - Found a solution using cacheing 
 * Adding constraints: [s(4090)=<aux(1114)*2,aux(1114)=<it([134,144])*aux(1113)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Chain-Tail [134,144]: [s(4092)=<D+1,s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for s(4092)=<D+1  in Chain-Tail [134,144] 
   - Applying inductive sum strategy 
     - head Candidate: D+1 
       - Loop 133 adds a constant 1/1 
       - Loop 135 adds a constant 1/1 
     - tail Candidate: D+1 
       - Loop 133 adds a constant 1/1 
       - Loop 135 adds a constant 1/1 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1117)=<D+1] 
 * Adding constraints: [s(4092)=<it([134,144])*aux(1117),s(4092)=<it(135)+it(133)+aux(1115),s(4092)=<it(135)+it(133)+aux(1116),aux(1115)=<D+1,aux(1116)=<D+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1117)=<D+1]
* Psum in Chain-Tail [134,144]: [s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(1117)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1117)=<aux(851)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Chain-Tail [134,144]: [s(4095)=<D+2,s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for s(4095)=<D+2  in Chain-Tail [134,144] 
   - Applying inductive sum strategy 
     - head Candidate: D+2 
       - Loop 133 adds a constant 1/1 
       - Loop 135 adds a constant 1/1 
     - tail Candidate: D+2 
       - Loop 133 adds a constant 1/1 
       - Loop 135 adds a constant 1/1 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1120)=<D+2] 
 * Adding constraints: [s(4095)=<it([134,144])*aux(1120),s(4095)=<it(135)+it(133)+aux(1118),s(4095)=<it(135)+it(133)+aux(1119),aux(1118)=<D+2,aux(1119)=<D+2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1120)=<D+2]
* Psum in Chain-Tail [134,144]: [s(4094)=<2*D+2,s(4076)=<E]

###### Computing max_min for aux(1120)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1120)=<aux(851)+1] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Chain-Tail [134,144]: [s(4094)=<2*D+2,s(4076)=<E]

###### Computing sum for s(4094)=<2*D+2  in Chain-Tail [134,144] 
   - Found a solution using cacheing 
 * Adding constraints: [s(4094)=<aux(1121)*2,aux(1121)=<it([134,144])*aux(1117),aux(1121)=<it(135)+it(133)+aux(1115),aux(1121)=<it(135)+it(133)+aux(1116)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Psum in Chain-Tail [134,144]: [s(4076)=<E]

###### Computing sum for s(4076)=<E  in Chain-Tail [134,144] 
   - Applying inductive sum strategy 
     - head Candidate: D+2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D+2 
       - The candidate was classified before. We reuse its previous classification 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1124)=<A,aux(1124)=<D+2] 
 * Adding constraints: [s(4076)=<it([134,144])*aux(1124),s(4076)=<it(135)+it(133)+aux(1122),s(4076)=<it(135)+it(133)+aux(1123),aux(1122)=<D+2,aux(1123)=<D+2] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1124)=<A,aux(1124)=<D+2]

###### Computing max_min for aux(1124)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1124)=<aux(1052)] 

##### Pending set echelon_helper_old(A,B,C,D,E,F,G)
* Pmax/min: [aux(1124)=<D+2]

###### Computing max_min for aux(1124)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(1124)=<aux(851)+1] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [133,135,[134,144]] 
Found a cycle in the non-final constraints
Could not solve cycle in cost structure.
 Discarded constraints:  
aux(1124)=<aux(851)+1
aux(1124)=<aux(1052)
aux(1120)=<aux(851)+1
aux(1117)=<aux(851)
aux(1113)=<s(3805)+1
aux(1112)=<aux(1055)*2-3
aux(1111)=<aux(1052)
aux(1106)=<aux(1064)* (8/3)-1/3
aux(1105)=<aux(1064)* (4/3)-5/3
aux(1102)=<aux(1103)+aux(1104)
aux(1101)=<aux(1055)*3-15/2
aux(1100)=<aux(851)+1
aux(1100)=<aux(1052)* (1/2)+1/2
aux(1095)=<aux(1055)*2-6
aux(1094)=<aux(1080)*3+1
aux(1093)=<aux(851)
aux(1093)=<aux(1052)* (1/2)-1/2
aux(1087)=<s(3805)+1
aux(1086)=<aux(1055)
aux(1085)=<aux(1052)
aux(1084)=<aux(1064)* (2/3)-1/3
aux(1083)=<aux(1064)* (1/3)-2/3
aux(1080)=<aux(1081)+aux(1082)
aux(1079)=<aux(1064)* (1/4)
aux(1078)=<aux(1055)-7/2
aux(1070)=<aux(1064)-3
aux(1068)=<aux(1064)* (1/2)-1/2
aux(1067)=<aux(1064)+1
aux(1064)=<aux(1065)+aux(1066)
aux(1061)=<aux(851)+1
aux(1061)=<s(3805)+1
aux(1060)=<aux(851)
aux(1060)=<s(3805)
aux(1058)=<s(3805)+1
aux(1055)=<aux(1056)+aux(1057)
aux(1052)=<aux(1053)+aux(1054)
s(3864)=<aux(851)
aux(851)=<aux(1051)+it(133)+it(135)
s(4051)=<s(3805)+1
s(3859)=<s(3805)+1
s(3800)=<s(3805)+1
s(3805)=<aux(1048)+aux(1049)+aux(1050)
s(4076)=<it(135)+it(133)+aux(1123)
s(4076)=<it(135)+it(133)+aux(1122)
s(4076)=<it([134,144])*aux(1124)
aux(1121)=<it(135)+it(133)+aux(1116)
aux(1121)=<it(135)+it(133)+aux(1115)
aux(1121)=<it([134,144])*aux(1117)
s(4094)=<aux(1121)*2
s(4095)=<it(135)+it(133)+aux(1119)
s(4095)=<it(135)+it(133)+aux(1118)
s(4095)=<it([134,144])*aux(1120)
s(4092)=<it(135)+it(133)+aux(1116)
s(4092)=<it(135)+it(133)+aux(1115)
s(4092)=<it([134,144])*aux(1117)
aux(1114)=<it([134,144])*aux(1113)
s(4090)=<aux(1114)*2
s(4091)=<it([134,144])*aux(1113)
aux(1109)=<it(133)*aux(1112)
s(4093)=<aux(1109)+aux(1110)
s(4093)=<it([134,144])*aux(1111)
aux(1050)=<it(135)*aux(1108)
aux(1107)+it([134,144])=<aux(1091)+aux(1092)
aux(1107)=<aux(1089)+aux(1090)
aux(1107)=<it(135)*aux(1093)
s(3931)=<aux(1107)*2
aux(1104)=<it(133)*aux(1106)
aux(1104)=<it(133)*aux(1105)
aux(1098)=<it(133)*aux(1102)
aux(1096)=<it(133)*aux(1101)
it([134,144])+s(3932)=<aux(1098)+aux(1099)
it([134,144])+s(3932)=<aux(1096)+aux(1097)
s(3932)=<it(135)*aux(1100)
aux(1091)=<it(133)*aux(1095)
aux(1089)=<it(133)*aux(1094)
it([134,144])+s(3929)=<aux(1091)+aux(1092)
s(3929)=<aux(1089)+aux(1090)
s(3929)=<it(135)*aux(1093)
aux(1088)=<it(135)*aux(1087)
s(3927)=<aux(1088)*2
s(3928)=<it(135)*aux(1087)
s(3938)=<it(135)*aux(1086)
s(3930)=<it(135)*aux(1085)
aux(1082)=<it(133)*aux(1084)
aux(1082)=<it(133)*aux(1083)
aux(1074)=<it(133)*aux(1080)
aux(1076)=<it(133)*aux(1079)
aux(1072)=<it(133)*aux(1078)
it(135)=<aux(1076)+aux(1077)
it(135)=<aux(1074)+aux(1075)
it(135)=<aux(1072)+aux(1073)
aux(1071)=<it(133)*aux(1068)
aux(1066)=<aux(1071)*4
aux(1066)=<it(133)*aux(1070)
aux(1069)=<it(133)*aux(1067)
aux(1054)=<aux(1069)* (1/2)
aux(1057)=<it(133)*aux(1068)
aux(1054)=<it(133)*aux(1067)
aux(1057)=<it(133)*aux(1064)
aux(1062)=<it(133)*aux(1060)
s(3905)=<aux(1062)*2
s(3906)=<it(133)*aux(1061)
s(3903)=<it(133)*aux(1060)
aux(1059)=<it(133)*aux(1058)
s(3901)=<aux(1059)*2
s(3902)=<it(133)*aux(1058)
s(3912)=<it(133)*aux(1055)
s(3904)=<it(133)*aux(1052)

#### Simplifying cost structure of phase [133,135,[134,144]] 
 * Joined equivalent variables [aux(1125),aux(1053),aux(1092),aux(1110)] into aux(1125)
 * Joined equivalent variables [aux(1126),aux(1056),aux(1090)] into aux(1126)
 * Joined equivalent variables [aux(1127),aux(1051),aux(1115),aux(1116)] into aux(1127)
 * Joined equivalent variables [aux(1128),aux(1118),aux(1119),aux(1122),aux(1123)] into aux(1128)
 * Joined equivalent variables [it(133),it(135),it([134,144]),s(4076)] into it(133)

#### Cost of phase [133,135]:echelon_helper_old(A,B,C,D,E,F,G) -> [] 
141*it(133)+6*s(3887)+16*s(3888)+244*s(3889)+120*s(3890)+80*s(3891)+40*s(3892)+40*s(3893)+40*s(3894)+80*s(3895)+80*s(3896)+64*s(3897)+64*s(3898)+64*s(3899)+64*s(3900)+6*s(3913)+16*s(3914)+448*s(3915)+240*s(3916)+80*s(3917)+80*s(3918)+40*s(3919)+40*s(3920)+80*s(3921)+80*s(3922)+64*s(3923)+64*s(3924)+64*s(3925)+64*s(3926)+6*s(4077)+16*s(4078)+528*s(4079)+240*s(4080)+80*s(4081)+80*s(4082)+40*s(4083)+40*s(4084)+80*s(4085)+64*s(4086)+64*s(4087)+64*s(4088)+64*s(4089)+0
Unbounded itvars
it(133) :  it(133)
s(3887) :  sum(133),s(3806)
s(3888) :  sum(133),s(3807)
s(3889) :  sum(133),s(3808)
s(3890) :  sum(133),s(3817)
s(3891) :  sum(133),s(3818)
s(3892) :  sum(133),s(3819)
s(3893) :  sum(133),s(3820)
s(3894) :  sum(133),s(3821)
s(3895) :  sum(133),s(3822)
s(3896) :  sum(133),s(3823)
s(3897) :  sum(133),s(3824)
s(3898) :  sum(133),s(3825)
s(3899) :  sum(133),s(3826)
s(3900) :  sum(133),s(3827)
s(3913) :  sum(135),s(3865)
s(3914) :  sum(135),s(3866)
s(3915) :  sum(135),s(3867)
s(3916) :  sum(135),s(3871)
s(3917) :  sum(135),s(3872)
s(3918) :  sum(135),s(3878)
s(3919) :  sum(135),s(3879)
s(3920) :  sum(135),s(3880)
s(3921) :  sum(135),s(3881)
s(3922) :  sum(135),s(3882)
s(3923) :  sum(135),s(3883)
s(3924) :  sum(135),s(3884)
s(3925) :  sum(135),s(3885)
s(3926) :  sum(135),s(3886)
s(4077) :  sum([134,144]),s(4048)
s(4078) :  sum([134,144]),s(4056)
s(4079) :  sum([134,144]),s(4057)
s(4080) :  sum([134,144]),s(4061)
s(4081) :  sum([134,144]),s(4062)
s(4082) :  sum([134,144]),s(4068)
s(4083) :  sum([134,144]),s(4069)
s(4084) :  sum([134,144]),s(4070)
s(4085) :  sum([134,144]),s(4071)
s(4086) :  sum([134,144]),s(4072)
s(4087) :  sum([134,144]),s(4073)
s(4088) :  sum([134,144]),s(4074)
s(4089) :  sum([134,144]),s(4075)
 * Renamed intermediate variables: 
[ (eq(152,1),it(130))>>s(4130)]
 * Renamed intermediate variables: 
[ (eq(152,2),aux(159))>>s(4131), (eq(152,2),aux(160))>>s(4132), (eq(152,2),aux(161))>>s(4133), (eq(152,2),aux(162))>>s(4134), (eq(152,2),s(715))>>s(4135), (eq(152,2),s(717))>>s(4136), (eq(152,2),s(719))>>s(4137), (eq(152,2),s(721))>>s(4138)]

#### Simplifying cost structure of CE 152 
 * Joined equivalent variables [aux(1129),s(4131)] into aux(1129)

#### Simplifying cost structure of chain [143,145] 
 * Renamed intermediate variables: 
[ (eq(153,1),it(130))>>s(4139)]
 * Renamed intermediate variables: 
[ (eq(153,2),aux(167))>>s(4140), (eq(153,2),aux(168))>>s(4141), (eq(153,2),aux(169))>>s(4142), (eq(153,2),aux(170))>>s(4143), (eq(153,2),s(749))>>s(4144), (eq(153,2),s(760))>>s(4145), (eq(153,2),s(763))>>s(4146), (eq(153,2),s(764))>>s(4147), (eq(153,2),s(766))>>s(4148), (eq(153,2),s(768))>>s(4149), (eq(153,2),s(747))>>s(4150), (eq(153,2),s(751))>>s(4151), (eq(153,2),s(753))>>s(4152)]

#### Simplifying cost structure of CE 153 
 * Joined equivalent variables [aux(1130),s(4140)] into aux(1130)

#### Simplifying cost structure of chain [142,144] 
 * Joined equivalent variables [aux(1131),s(4141)] into aux(1131)
 * Joined equivalent variables [s(4018),s(4144)] into s(4018)
 * Renamed intermediate variables: 
[ (eq(154,1),it(130))>>s(4153)]
 * Renamed intermediate variables: 
[ (eq(154,2),aux(175))>>s(4154), (eq(154,2),aux(176))>>s(4155), (eq(154,2),aux(177))>>s(4156), (eq(154,2),aux(178))>>s(4157), (eq(154,2),s(825))>>s(4158), (eq(154,2),s(835))>>s(4159), (eq(154,2),s(838))>>s(4160), (eq(154,2),s(839))>>s(4161), (eq(154,2),s(841))>>s(4162), (eq(154,2),s(843))>>s(4163), (eq(154,2),s(823))>>s(4164), (eq(154,2),s(827))>>s(4165), (eq(154,2),s(829))>>s(4166)]

#### Simplifying cost structure of CE 154 
 * Joined equivalent variables [aux(1132),s(4154)] into aux(1132)

#### Simplifying cost structure of chain [141,[132]] 

#### Simplifying cost structure of chain [141,[132],144] 

#### Simplifying cost structure of chain [141,[132],136,145] 
 * Joined equivalent variables [aux(1133),aux(1132)] into aux(1133)
 * Joined equivalent variables [it(132),s(3994),s(3995),s(3996),s(3997),s(3998),s(3999),s(4000),s(4001),s(4002),s(4003),s(4004),s(4005),s(4006),s(4034),s(4035),s(4036),s(4037),s(4038),s(4039),s(4040),s(4041)] into it(132)
 * Joined equivalent variables [it([136,145]),s(4153)] into it([136,145])

#### Simplifying cost structure of chain [141,[132],134,144] 
 * Joined equivalent variables [aux(1134),aux(1132)] into aux(1134)
 * Joined equivalent variables [it(132),s(3994),s(3995),s(3996),s(3997),s(3998),s(3999),s(4000),s(4001),s(4002),s(4003),s(4004),s(4005),s(4006),s(4076),s(4077),s(4078),s(4079),s(4080),s(4081),s(4082),s(4083),s(4084),s(4085),s(4086),s(4087),s(4088),s(4089)] into it(132)
 * Joined equivalent variables [it([134,144]),s(4153)] into it([134,144])

#### Simplifying cost structure of chain [141,136,145] 
 * Joined equivalent variables [aux(1135),aux(814),s(4155)] into aux(1135)
 * Joined equivalent variables [aux(1136),aux(813),s(4026)] into aux(1136)
 * Joined equivalent variables [s(4027),s(4158)] into s(4027)
 * Joined equivalent variables [s(4019),s(4029)] into s(4019)

#### Simplifying cost structure of chain [141,134,144] 
 * Joined equivalent variables [aux(1137),aux(851),s(4155)] into aux(1137)
 * Joined equivalent variables [aux(1138),aux(850),s(4055)] into aux(1138)
 * Joined equivalent variables [s(4056),s(4158)] into s(4056)
 * Joined equivalent variables [s(4048),s(4057)] into s(4048)
 * Renamed intermediate variables: 
[ (eq(155,1),it(130))>>s(4167)]
 * Renamed intermediate variables: 
[ (eq(155,2),aux(180))>>s(4168), (eq(155,2),aux(181))>>s(4169), (eq(155,2),aux(182))>>s(4170), (eq(155,2),aux(183))>>s(4171), (eq(155,2),aux(184))>>s(4172), (eq(155,2),s(881))>>s(4173), (eq(155,2),s(883))>>s(4174), (eq(155,2),s(885))>>s(4175), (eq(155,2),s(887))>>s(4176), (eq(155,2),s(901))>>s(4177), (eq(155,2),s(903))>>s(4178)]

#### Simplifying cost structure of CE 155 
 * Joined equivalent variables [aux(1139),s(4170)] into aux(1139)

#### Simplifying cost structure of chain [140,145] 
 * Renamed intermediate variables: 
[ (eq(156,1),it(130))>>s(4179)]
 * Renamed intermediate variables: 
[ (eq(156,2),aux(190))>>s(4180), (eq(156,2),aux(191))>>s(4181), (eq(156,2),aux(192))>>s(4182), (eq(156,2),aux(193))>>s(4183), (eq(156,2),aux(194))>>s(4184), (eq(156,2),s(925))>>s(4185), (eq(156,2),s(926))>>s(4186), (eq(156,2),s(929))>>s(4187), (eq(156,2),s(930))>>s(4188), (eq(156,2),s(932))>>s(4189), (eq(156,2),s(934))>>s(4190), (eq(156,2),s(913))>>s(4191), (eq(156,2),s(915))>>s(4192), (eq(156,2),s(917))>>s(4193), (eq(156,2),s(919))>>s(4194), (eq(156,2),s(955))>>s(4195), (eq(156,2),s(957))>>s(4196)]

#### Simplifying cost structure of CE 156 
 * Joined equivalent variables [aux(1140),s(4182)] into aux(1140)
 * Joined equivalent variables [s(4179),s(4185)] into s(4179)

#### Simplifying cost structure of chain [139,[133,135]] 

#### Simplifying cost structure of chain [139,[133,135],[132]] 

#### Simplifying cost structure of chain [139,[133,135],[132],144] 

#### Simplifying cost structure of chain [139,[133,135],[132],136,145] 
 * Joined equivalent variables [aux(1141),s(4180)] into aux(1141)

#### Simplifying cost structure of chain [139,[133,135],[132],134,144] 
 * Joined equivalent variables [aux(1142),s(4180)] into aux(1142)

#### Simplifying cost structure of chain [139,[133,135],144] 

#### Simplifying cost structure of chain [139,[133,135],137,145] 
 * Joined equivalent variables [it(133),s(3887),s(3888),s(3889),s(3890),s(3891),s(3892),s(3893),s(3894),s(3895),s(3896),s(3897),s(3898),s(3899),s(3900),s(3913),s(3914),s(3915),s(3916),s(3917),s(3918),s(3919),s(3920),s(3921),s(3922),s(3923),s(3924),s(3925),s(3926),s(4116),s(4117),s(4118),s(4119),s(4120),s(4121),s(4122),s(4123)] into it(133)

#### Simplifying cost structure of chain [139,[133,135],136,145] 
 * Joined equivalent variables [it(133),s(3887),s(3888),s(3889),s(3890),s(3891),s(3892),s(3893),s(3894),s(3895),s(3896),s(3897),s(3898),s(3899),s(3900),s(3913),s(3914),s(3915),s(3916),s(3917),s(3918),s(3919),s(3920),s(3921),s(3922),s(3923),s(3924),s(3925),s(3926),s(4034),s(4035),s(4036),s(4037),s(4038),s(4039),s(4040),s(4041)] into it(133)

#### Simplifying cost structure of chain [139,[133,135],134,144] 
 * Joined equivalent variables [it(133),s(3887),s(3888),s(3889),s(3890),s(3891),s(3892),s(3893),s(3894),s(3895),s(3896),s(3897),s(3898),s(3899),s(3900),s(3913),s(3914),s(3915),s(3916),s(3917),s(3918),s(3919),s(3920),s(3921),s(3922),s(3923),s(3924),s(3925),s(3926),s(4077),s(4078),s(4079),s(4080),s(4081),s(4082),s(4083),s(4084),s(4085),s(4086),s(4087),s(4088),s(4089)] into it(133)

#### Simplifying cost structure of chain [139,[132]] 

#### Simplifying cost structure of chain [139,[132],144] 

#### Simplifying cost structure of chain [139,[132],136,145] 
 * Joined equivalent variables [aux(1143),s(4180)] into aux(1143)
 * Joined equivalent variables [it(132),s(3994),s(3995),s(3996),s(3997),s(3998),s(3999),s(4000),s(4001),s(4002),s(4003),s(4004),s(4005),s(4006),s(4034),s(4035),s(4036),s(4037),s(4038),s(4039),s(4040),s(4041)] into it(132)

#### Simplifying cost structure of chain [139,[132],134,144] 
 * Joined equivalent variables [aux(1144),s(4180)] into aux(1144)
 * Joined equivalent variables [it(132),s(3994),s(3995),s(3996),s(3997),s(3998),s(3999),s(4000),s(4001),s(4002),s(4003),s(4004),s(4005),s(4006),s(4076),s(4077),s(4078),s(4079),s(4080),s(4081),s(4082),s(4083),s(4084),s(4085),s(4086),s(4087),s(4088),s(4089)] into it(132)

#### Simplifying cost structure of chain [139,144] 
 * Joined equivalent variables [aux(1145),s(4181)] into aux(1145)
 * Joined equivalent variables [s(4018),s(4192)] into s(4018)

#### Simplifying cost structure of chain [139,137,145] 
 * Joined equivalent variables [aux(1146),aux(891),s(4181)] into aux(1146)
 * Joined equivalent variables [aux(1147),aux(890),aux(1140)] into aux(1147)
 * Joined equivalent variables [s(4109),s(4192)] into s(4109)
 * Joined equivalent variables [s(4101),s(4179)] into s(4101)

#### Simplifying cost structure of chain [139,136,145] 
 * Joined equivalent variables [aux(1148),aux(814),s(4181)] into aux(1148)
 * Joined equivalent variables [aux(1149),s(4020)] into aux(1149)
 * Joined equivalent variables [aux(1150),aux(1140)] into aux(1150)
 * Joined equivalent variables [s(4027),s(4192)] into s(4027)

#### Simplifying cost structure of chain [139,134,144] 
 * Joined equivalent variables [aux(1151),aux(851),s(4181)] into aux(1151)
 * Joined equivalent variables [aux(1152),s(4049)] into aux(1152)
 * Joined equivalent variables [aux(1153),aux(1140)] into aux(1153)
 * Joined equivalent variables [s(4056),s(4192)] into s(4056)
 * Renamed intermediate variables: 
[ (eq(157,1),it(130))>>s(4197)]
 * Renamed intermediate variables: 
[ (eq(157,2),aux(200))>>s(4198), (eq(157,2),aux(201))>>s(4199), (eq(157,2),aux(202))>>s(4200), (eq(157,2),aux(203))>>s(4201), (eq(157,2),aux(204))>>s(4202), (eq(157,2),s(1000))>>s(4203), (eq(157,2),s(1001))>>s(4204), (eq(157,2),s(1004))>>s(4205), (eq(157,2),s(1005))>>s(4206), (eq(157,2),s(1007))>>s(4207), (eq(157,2),s(1009))>>s(4208), (eq(157,2),s(989))>>s(4209), (eq(157,2),s(991))>>s(4210), (eq(157,2),s(993))>>s(4211), (eq(157,2),s(995))>>s(4212), (eq(157,2),s(1022))>>s(4213), (eq(157,2),s(1024))>>s(4214)]

#### Simplifying cost structure of CE 157 
 * Joined equivalent variables [aux(1154),s(4200)] into aux(1154)
 * Joined equivalent variables [s(4197),s(4203)] into s(4197)

#### Simplifying cost structure of chain [138,[133,135]] 

#### Simplifying cost structure of chain [138,[133,135],[132]] 

#### Simplifying cost structure of chain [138,[133,135],[132],144] 

#### Simplifying cost structure of chain [138,[133,135],[132],136,145] 
 * Joined equivalent variables [aux(1155),s(4198)] into aux(1155)

#### Simplifying cost structure of chain [138,[133,135],[132],134,144] 
 * Joined equivalent variables [aux(1156),s(4198)] into aux(1156)

#### Simplifying cost structure of chain [138,[133,135],144] 

#### Simplifying cost structure of chain [138,[133,135],137,145] 
 * Joined equivalent variables [it(133),s(3887),s(3888),s(3889),s(3890),s(3891),s(3892),s(3893),s(3894),s(3895),s(3896),s(3897),s(3898),s(3899),s(3900),s(3913),s(3914),s(3915),s(3916),s(3917),s(3918),s(3919),s(3920),s(3921),s(3922),s(3923),s(3924),s(3925),s(3926),s(4116),s(4117),s(4118),s(4119),s(4120),s(4121),s(4122),s(4123)] into it(133)

#### Simplifying cost structure of chain [138,[133,135],136,145] 
 * Joined equivalent variables [it(133),s(3887),s(3888),s(3889),s(3890),s(3891),s(3892),s(3893),s(3894),s(3895),s(3896),s(3897),s(3898),s(3899),s(3900),s(3913),s(3914),s(3915),s(3916),s(3917),s(3918),s(3919),s(3920),s(3921),s(3922),s(3923),s(3924),s(3925),s(3926),s(4034),s(4035),s(4036),s(4037),s(4038),s(4039),s(4040),s(4041)] into it(133)

#### Simplifying cost structure of chain [138,[133,135],134,144] 
 * Joined equivalent variables [it(133),s(3887),s(3888),s(3889),s(3890),s(3891),s(3892),s(3893),s(3894),s(3895),s(3896),s(3897),s(3898),s(3899),s(3900),s(3913),s(3914),s(3915),s(3916),s(3917),s(3918),s(3919),s(3920),s(3921),s(3922),s(3923),s(3924),s(3925),s(3926),s(4077),s(4078),s(4079),s(4080),s(4081),s(4082),s(4083),s(4084),s(4085),s(4086),s(4087),s(4088),s(4089)] into it(133)

#### Simplifying cost structure of chain [138,[132]] 

#### Simplifying cost structure of chain [138,[132],144] 

#### Simplifying cost structure of chain [138,[132],136,145] 
 * Joined equivalent variables [aux(1157),s(4198)] into aux(1157)
 * Joined equivalent variables [it(132),s(3994),s(3995),s(3996),s(3997),s(3998),s(3999),s(4000),s(4001),s(4002),s(4003),s(4004),s(4005),s(4006),s(4034),s(4035),s(4036),s(4037),s(4038),s(4039),s(4040),s(4041)] into it(132)

#### Simplifying cost structure of chain [138,[132],134,144] 
 * Joined equivalent variables [aux(1158),s(4198)] into aux(1158)
 * Joined equivalent variables [it(132),s(3994),s(3995),s(3996),s(3997),s(3998),s(3999),s(4000),s(4001),s(4002),s(4003),s(4004),s(4005),s(4006),s(4076),s(4077),s(4078),s(4079),s(4080),s(4081),s(4082),s(4083),s(4084),s(4085),s(4086),s(4087),s(4088),s(4089)] into it(132)

#### Simplifying cost structure of chain [138,137,145] 
 * Joined equivalent variables [aux(1159),aux(891),s(4199)] into aux(1159)
 * Joined equivalent variables [s(4109),s(4210)] into s(4109)

#### Simplifying cost structure of chain [138,136,145] 
 * Joined equivalent variables [aux(1160),aux(814),s(4199)] into aux(1160)
 * Joined equivalent variables [aux(1161),s(4020)] into aux(1161)
 * Joined equivalent variables [s(4027),s(4210)] into s(4027)

#### Simplifying cost structure of chain [138,134,144] 
 * Joined equivalent variables [aux(1162),aux(851),s(4199)] into aux(1162)
 * Joined equivalent variables [aux(1163),s(4049)] into aux(1163)
 * Joined equivalent variables [s(4056),s(4210)] into s(4056)
 * Renamed intermediate variables: 
[ (ch([141,136,145]),aux(1132))>>s(4215), (ch([141,136,145]),s(4020))>>s(4216), (ch([141,136,145]),s(4156))>>s(4217), (ch([141,136,145]),s(4157))>>s(4218), (ch([141,136,145]),aux(1135))>>s(4219), (ch([141,136,145]),aux(1136))>>s(4220), (ch([141,136,145]),s(4019))>>s(4221), (ch([141,136,145]),s(4027))>>s(4222), (ch([141,136,145]),s(4028))>>s(4223), (ch([141,136,145]),s(4030))>>s(4224), (ch([141,136,145]),s(4031))>>s(4225), (ch([141,136,145]),s(4032))>>s(4226), (ch([141,136,145]),s(4033))>>s(4227), (ch([141,136,145]),s(4153))>>s(4228), (ch([141,136,145]),s(4159))>>s(4229), (ch([141,136,145]),s(4160))>>s(4230), (ch([141,136,145]),s(4161))>>s(4231), (ch([141,136,145]),s(4162))>>s(4232), (ch([141,136,145]),s(4163))>>s(4233), (ch([141,136,145]),s(4164))>>s(4234), (ch([141,136,145]),s(4165))>>s(4235), (ch([141,136,145]),s(4166))>>s(4236)]
 * Renamed intermediate variables: 
[ (ch([141,[132],136,145]),s(4155))>>s(4237), (ch([141,[132],136,145]),s(4156))>>s(4238), (ch([141,[132],136,145]),s(4157))>>s(4239), (ch([141,[132],136,145]),aux(1133))>>s(4240), (ch([141,[132],136,145]),it([136,145]))>>s(4241), (ch([141,[132],136,145]),s(4158))>>s(4242), (ch([141,[132],136,145]),s(4159))>>s(4243), (ch([141,[132],136,145]),s(4160))>>s(4244), (ch([141,[132],136,145]),s(4161))>>s(4245), (ch([141,[132],136,145]),s(4162))>>s(4246), (ch([141,[132],136,145]),s(4163))>>s(4247), (ch([141,[132],136,145]),s(4164))>>s(4248), (ch([141,[132],136,145]),s(4165))>>s(4249), (ch([141,[132],136,145]),s(4166))>>s(4250), (ch([141,[132],136,145]),it(132))>>s(4251)]
 * Renamed intermediate variables: 
[ (ch([143,145]),aux(1129))>>s(4252), (ch([143,145]),s(4132))>>s(4253), (ch([143,145]),s(4133))>>s(4254), (ch([143,145]),s(4134))>>s(4255), (ch([143,145]),s(4130))>>s(4256), (ch([143,145]),s(4135))>>s(4257), (ch([143,145]),s(4136))>>s(4258), (ch([143,145]),s(4137))>>s(4259), (ch([143,145]),s(4138))>>s(4260)]
 * Joined equivalent variables [aux(1164),s(4215),s(4240),s(4252)] into aux(1164)
 * Joined equivalent variables [aux(1165),s(4219),s(4237),s(4253)] into aux(1165)
 * Joined equivalent variables [aux(1166),s(4217),s(4238),s(4254)] into aux(1166)
 * Joined equivalent variables [aux(1167),s(4218),s(4239),s(4255)] into aux(1167)
 * Joined equivalent variables [s(4224),s(4225)] into s(4224)
 * Joined equivalent variables [s(4226),s(4227)] into s(4226)
 * Joined equivalent variables [s(4221),s(4223)] into s(4221)
 * Joined equivalent variables [s(4229),s(4243)] into s(4229)
 * Joined equivalent variables [s(4228),s(4241),s(4256)] into s(4228)
 * Joined equivalent variables [s(4236),s(4250),s(4260)] into s(4236)
 * Joined equivalent variables [s(4235),s(4249),s(4259)] into s(4235)
 * Joined equivalent variables [s(4222),s(4242),s(4258)] into s(4222)
 * Joined equivalent variables [s(4234),s(4248),s(4257)] into s(4234)
 * Joined equivalent variables [s(4231),s(4245)] into s(4231)
 * Joined equivalent variables [s(4230),s(4244)] into s(4230)
 * Joined equivalent variables [s(4233),s(4247)] into s(4233)
 * Joined equivalent variables [s(4232),s(4246)] into s(4232)
 * Renamed intermediate variables: 
[ (ch([141,134,144]),aux(1132))>>s(4261), (ch([141,134,144]),s(4049))>>s(4262), (ch([141,134,144]),s(4156))>>s(4263), (ch([141,134,144]),s(4157))>>s(4264), (ch([141,134,144]),s(4018))>>s(4265), (ch([141,134,144]),aux(1137))>>s(4266), (ch([141,134,144]),aux(1138))>>s(4267), (ch([141,134,144]),s(4048))>>s(4268), (ch([141,134,144]),s(4056))>>s(4269), (ch([141,134,144]),s(4063))>>s(4270), (ch([141,134,144]),s(4064))>>s(4271), (ch([141,134,144]),s(4065))>>s(4272), (ch([141,134,144]),s(4066))>>s(4273), (ch([141,134,144]),s(4067))>>s(4274), (ch([141,134,144]),s(4068))>>s(4275), (ch([141,134,144]),s(4069))>>s(4276), (ch([141,134,144]),s(4070))>>s(4277), (ch([141,134,144]),s(4071))>>s(4278), (ch([141,134,144]),s(4072))>>s(4279), (ch([141,134,144]),s(4073))>>s(4280), (ch([141,134,144]),s(4074))>>s(4281), (ch([141,134,144]),s(4075))>>s(4282), (ch([141,134,144]),s(4153))>>s(4283), (ch([141,134,144]),s(4159))>>s(4284), (ch([141,134,144]),s(4160))>>s(4285), (ch([141,134,144]),s(4161))>>s(4286), (ch([141,134,144]),s(4162))>>s(4287), (ch([141,134,144]),s(4163))>>s(4288), (ch([141,134,144]),s(4164))>>s(4289), (ch([141,134,144]),s(4165))>>s(4290), (ch([141,134,144]),s(4166))>>s(4291), (ch([141,134,144]),s(4061))>>s(4292), (ch([141,134,144]),s(4062))>>s(4293)]
 * Renamed intermediate variables: 
[ (ch([141,[132],134,144]),s(4155))>>s(4294), (ch([141,[132],134,144]),s(4156))>>s(4295), (ch([141,[132],134,144]),s(4157))>>s(4296), (ch([141,[132],134,144]),aux(1134))>>s(4297), (ch([141,[132],134,144]),it([134,144]))>>s(4298), (ch([141,[132],134,144]),s(4158))>>s(4299), (ch([141,[132],134,144]),s(4159))>>s(4300), (ch([141,[132],134,144]),s(4160))>>s(4301), (ch([141,[132],134,144]),s(4161))>>s(4302), (ch([141,[132],134,144]),s(4162))>>s(4303), (ch([141,[132],134,144]),s(4163))>>s(4304), (ch([141,[132],134,144]),s(4164))>>s(4305), (ch([141,[132],134,144]),s(4165))>>s(4306), (ch([141,[132],134,144]),s(4166))>>s(4307), (ch([141,[132],134,144]),it(132))>>s(4308)]
 * Renamed intermediate variables: 
[ (ch([141,[132],144]),aux(1132))>>s(4309), (ch([141,[132],144]),s(4155))>>s(4310), (ch([141,[132],144]),s(4156))>>s(4311), (ch([141,[132],144]),s(4157))>>s(4312), (ch([141,[132],144]),s(4018))>>s(4313), (ch([141,[132],144]),s(4153))>>s(4314), (ch([141,[132],144]),s(4158))>>s(4315), (ch([141,[132],144]),s(4159))>>s(4316), (ch([141,[132],144]),s(4160))>>s(4317), (ch([141,[132],144]),s(4161))>>s(4318), (ch([141,[132],144]),s(4162))>>s(4319), (ch([141,[132],144]),s(4163))>>s(4320), (ch([141,[132],144]),s(4164))>>s(4321), (ch([141,[132],144]),s(4165))>>s(4322), (ch([141,[132],144]),s(4166))>>s(4323), (ch([141,[132],144]),it(132))>>s(4324)]
 * Joined equivalent variables [aux(1168),s(4261),s(4297),s(4309)] into aux(1168)
 * Joined equivalent variables [aux(1169),s(4266),s(4294),s(4310)] into aux(1169)
 * Joined equivalent variables [aux(1170),s(4263),s(4295),s(4311)] into aux(1170)
 * Joined equivalent variables [aux(1171),s(4264),s(4296),s(4312)] into aux(1171)
 * Joined equivalent variables [s(4270),s(4271)] into s(4270)
 * Joined equivalent variables [s(4292),s(4293),s(4308),s(4324)] into s(4292)
 * Joined equivalent variables [s(4265),s(4313)] into s(4265)
 * Joined equivalent variables [s(4279),s(4280)] into s(4279)
 * Joined equivalent variables [s(4281),s(4282)] into s(4281)
 * Joined equivalent variables [s(4268),s(4278)] into s(4268)
 * Joined equivalent variables [s(4273),s(4274)] into s(4273)
 * Joined equivalent variables [s(4284),s(4300),s(4316)] into s(4284)
 * Joined equivalent variables [s(4283),s(4298),s(4314)] into s(4283)
 * Joined equivalent variables [s(4291),s(4307),s(4323)] into s(4291)
 * Joined equivalent variables [s(4290),s(4306),s(4322)] into s(4290)
 * Joined equivalent variables [s(4269),s(4299),s(4315)] into s(4269)
 * Joined equivalent variables [s(4289),s(4305),s(4321)] into s(4289)
 * Joined equivalent variables [s(4286),s(4302),s(4318)] into s(4286)
 * Joined equivalent variables [s(4285),s(4301),s(4317)] into s(4285)
 * Joined equivalent variables [s(4275),s(4276)] into s(4275)
 * Joined equivalent variables [s(4288),s(4304),s(4320)] into s(4288)
 * Joined equivalent variables [s(4287),s(4303),s(4319)] into s(4287)
 * Renamed intermediate variables: 
[ (ch([138,136,145]),s(4198))>>s(4325), (ch([138,136,145]),s(4026))>>s(4326), (ch([138,136,145]),aux(1154))>>s(4327), (ch([138,136,145]),aux(813))>>s(4328), (ch([138,136,145]),s(4201))>>s(4329), (ch([138,136,145]),s(4202))>>s(4330), (ch([138,136,145]),aux(1160))>>s(4331), (ch([138,136,145]),aux(1161))>>s(4332), (ch([138,136,145]),s(4019))>>s(4333), (ch([138,136,145]),s(4027))>>s(4334), (ch([138,136,145]),s(4028))>>s(4335), (ch([138,136,145]),s(4029))>>s(4336), (ch([138,136,145]),s(4030))>>s(4337), (ch([138,136,145]),s(4031))>>s(4338), (ch([138,136,145]),s(4032))>>s(4339), (ch([138,136,145]),s(4033))>>s(4340), (ch([138,136,145]),s(4197))>>s(4341), (ch([138,136,145]),s(4204))>>s(4342), (ch([138,136,145]),s(4205))>>s(4343), (ch([138,136,145]),s(4206))>>s(4344), (ch([138,136,145]),s(4207))>>s(4345), (ch([138,136,145]),s(4208))>>s(4346), (ch([138,136,145]),s(4209))>>s(4347), (ch([138,136,145]),s(4211))>>s(4348), (ch([138,136,145]),s(4212))>>s(4349), (ch([138,136,145]),s(4213))>>s(4350), (ch([138,136,145]),s(4214))>>s(4351)]
 * Renamed intermediate variables: 
[ (ch([138,137,145]),s(4198))>>s(4352), (ch([138,137,145]),s(4108))>>s(4353), (ch([138,137,145]),s(4102))>>s(4354), (ch([138,137,145]),aux(1154))>>s(4355), (ch([138,137,145]),aux(890))>>s(4356), (ch([138,137,145]),s(4201))>>s(4357), (ch([138,137,145]),s(4202))>>s(4358), (ch([138,137,145]),aux(1159))>>s(4359), (ch([138,137,145]),s(4101))>>s(4360), (ch([138,137,145]),s(4109))>>s(4361), (ch([138,137,145]),s(4110))>>s(4362), (ch([138,137,145]),s(4111))>>s(4363), (ch([138,137,145]),s(4112))>>s(4364), (ch([138,137,145]),s(4113))>>s(4365), (ch([138,137,145]),s(4114))>>s(4366), (ch([138,137,145]),s(4115))>>s(4367), (ch([138,137,145]),s(4197))>>s(4368), (ch([138,137,145]),s(4204))>>s(4369), (ch([138,137,145]),s(4205))>>s(4370), (ch([138,137,145]),s(4206))>>s(4371), (ch([138,137,145]),s(4207))>>s(4372), (ch([138,137,145]),s(4208))>>s(4373), (ch([138,137,145]),s(4209))>>s(4374), (ch([138,137,145]),s(4211))>>s(4375), (ch([138,137,145]),s(4212))>>s(4376), (ch([138,137,145]),s(4213))>>s(4377), (ch([138,137,145]),s(4214))>>s(4378)]
 * Renamed intermediate variables: 
[ (ch([138,[132],136,145]),s(4199))>>s(4379), (ch([138,[132],136,145]),aux(1154))>>s(4380), (ch([138,[132],136,145]),s(4201))>>s(4381), (ch([138,[132],136,145]),s(4202))>>s(4382), (ch([138,[132],136,145]),aux(1157))>>s(4383), (ch([138,[132],136,145]),it([136,145]))>>s(4384), (ch([138,[132],136,145]),s(4197))>>s(4385), (ch([138,[132],136,145]),s(4204))>>s(4386), (ch([138,[132],136,145]),s(4205))>>s(4387), (ch([138,[132],136,145]),s(4206))>>s(4388), (ch([138,[132],136,145]),s(4207))>>s(4389), (ch([138,[132],136,145]),s(4208))>>s(4390), (ch([138,[132],136,145]),s(4209))>>s(4391), (ch([138,[132],136,145]),s(4210))>>s(4392), (ch([138,[132],136,145]),s(4211))>>s(4393), (ch([138,[132],136,145]),s(4212))>>s(4394), (ch([138,[132],136,145]),s(4213))>>s(4395), (ch([138,[132],136,145]),s(4214))>>s(4396), (ch([138,[132],136,145]),it(132))>>s(4397)]
 * Renamed intermediate variables: 
[ (ch([138,[133,135],136,145]),s(4198))>>s(4398), (ch([138,[133,135],136,145]),s(4199))>>s(4399), (ch([138,[133,135],136,145]),aux(1154))>>s(4400), (ch([138,[133,135],136,145]),s(4201))>>s(4401), (ch([138,[133,135],136,145]),s(4202))>>s(4402), (ch([138,[133,135],136,145]),s(4197))>>s(4403), (ch([138,[133,135],136,145]),s(4204))>>s(4404), (ch([138,[133,135],136,145]),s(4205))>>s(4405), (ch([138,[133,135],136,145]),s(4206))>>s(4406), (ch([138,[133,135],136,145]),s(4207))>>s(4407), (ch([138,[133,135],136,145]),s(4208))>>s(4408), (ch([138,[133,135],136,145]),s(4209))>>s(4409), (ch([138,[133,135],136,145]),s(4210))>>s(4410), (ch([138,[133,135],136,145]),s(4211))>>s(4411), (ch([138,[133,135],136,145]),s(4212))>>s(4412), (ch([138,[133,135],136,145]),s(4213))>>s(4413), (ch([138,[133,135],136,145]),s(4214))>>s(4414), (ch([138,[133,135],136,145]),it(133))>>s(4415)]
 * Renamed intermediate variables: 
[ (ch([138,[133,135],137,145]),s(4198))>>s(4416), (ch([138,[133,135],137,145]),s(4199))>>s(4417), (ch([138,[133,135],137,145]),aux(1154))>>s(4418), (ch([138,[133,135],137,145]),s(4201))>>s(4419), (ch([138,[133,135],137,145]),s(4202))>>s(4420), (ch([138,[133,135],137,145]),s(4197))>>s(4421), (ch([138,[133,135],137,145]),s(4204))>>s(4422), (ch([138,[133,135],137,145]),s(4205))>>s(4423), (ch([138,[133,135],137,145]),s(4206))>>s(4424), (ch([138,[133,135],137,145]),s(4207))>>s(4425), (ch([138,[133,135],137,145]),s(4208))>>s(4426), (ch([138,[133,135],137,145]),s(4209))>>s(4427), (ch([138,[133,135],137,145]),s(4210))>>s(4428), (ch([138,[133,135],137,145]),s(4211))>>s(4429), (ch([138,[133,135],137,145]),s(4212))>>s(4430), (ch([138,[133,135],137,145]),s(4213))>>s(4431), (ch([138,[133,135],137,145]),s(4214))>>s(4432), (ch([138,[133,135],137,145]),it(133))>>s(4433)]
 * Renamed intermediate variables: 
[ (ch([138,[133,135],[132],136,145]),s(4199))>>s(4434), (ch([138,[133,135],[132],136,145]),aux(1154))>>s(4435), (ch([138,[133,135],[132],136,145]),s(4201))>>s(4436), (ch([138,[133,135],[132],136,145]),s(4202))>>s(4437), (ch([138,[133,135],[132],136,145]),aux(1155))>>s(4438), (ch([138,[133,135],[132],136,145]),it([136,145]))>>s(4439), (ch([138,[133,135],[132],136,145]),s(4197))>>s(4440), (ch([138,[133,135],[132],136,145]),s(4204))>>s(4441), (ch([138,[133,135],[132],136,145]),s(4205))>>s(4442), (ch([138,[133,135],[132],136,145]),s(4206))>>s(4443), (ch([138,[133,135],[132],136,145]),s(4207))>>s(4444), (ch([138,[133,135],[132],136,145]),s(4208))>>s(4445), (ch([138,[133,135],[132],136,145]),s(4209))>>s(4446), (ch([138,[133,135],[132],136,145]),s(4210))>>s(4447), (ch([138,[133,135],[132],136,145]),s(4211))>>s(4448), (ch([138,[133,135],[132],136,145]),s(4212))>>s(4449), (ch([138,[133,135],[132],136,145]),s(4213))>>s(4450), (ch([138,[133,135],[132],136,145]),s(4214))>>s(4451), (ch([138,[133,135],[132],136,145]),it(132))>>s(4452)]
 * Renamed intermediate variables: 
[ (ch([139,136,145]),s(4180))>>s(4453), (ch([139,136,145]),s(4026))>>s(4454), (ch([139,136,145]),s(4183))>>s(4455), (ch([139,136,145]),s(4184))>>s(4456), (ch([139,136,145]),aux(1148))>>s(4457), (ch([139,136,145]),aux(1149))>>s(4458), (ch([139,136,145]),aux(1150))>>s(4459), (ch([139,136,145]),aux(813))>>s(4460), (ch([139,136,145]),s(4019))>>s(4461), (ch([139,136,145]),s(4027))>>s(4462), (ch([139,136,145]),s(4028))>>s(4463), (ch([139,136,145]),s(4029))>>s(4464), (ch([139,136,145]),s(4030))>>s(4465), (ch([139,136,145]),s(4031))>>s(4466), (ch([139,136,145]),s(4032))>>s(4467), (ch([139,136,145]),s(4033))>>s(4468), (ch([139,136,145]),s(4179))>>s(4469), (ch([139,136,145]),s(4186))>>s(4470), (ch([139,136,145]),s(4187))>>s(4471), (ch([139,136,145]),s(4188))>>s(4472), (ch([139,136,145]),s(4189))>>s(4473), (ch([139,136,145]),s(4190))>>s(4474), (ch([139,136,145]),s(4191))>>s(4475), (ch([139,136,145]),s(4193))>>s(4476), (ch([139,136,145]),s(4194))>>s(4477), (ch([139,136,145]),s(4195))>>s(4478), (ch([139,136,145]),s(4196))>>s(4479)]
 * Renamed intermediate variables: 
[ (ch([139,137,145]),s(4180))>>s(4480), (ch([139,137,145]),s(4108))>>s(4481), (ch([139,137,145]),s(4102))>>s(4482), (ch([139,137,145]),s(4183))>>s(4483), (ch([139,137,145]),s(4184))>>s(4484), (ch([139,137,145]),aux(1146))>>s(4485), (ch([139,137,145]),aux(1147))>>s(4486), (ch([139,137,145]),s(4101))>>s(4487), (ch([139,137,145]),s(4109))>>s(4488), (ch([139,137,145]),s(4110))>>s(4489), (ch([139,137,145]),s(4111))>>s(4490), (ch([139,137,145]),s(4112))>>s(4491), (ch([139,137,145]),s(4113))>>s(4492), (ch([139,137,145]),s(4114))>>s(4493), (ch([139,137,145]),s(4115))>>s(4494), (ch([139,137,145]),s(4186))>>s(4495), (ch([139,137,145]),s(4187))>>s(4496), (ch([139,137,145]),s(4188))>>s(4497), (ch([139,137,145]),s(4189))>>s(4498), (ch([139,137,145]),s(4190))>>s(4499), (ch([139,137,145]),s(4191))>>s(4500), (ch([139,137,145]),s(4193))>>s(4501), (ch([139,137,145]),s(4194))>>s(4502), (ch([139,137,145]),s(4195))>>s(4503), (ch([139,137,145]),s(4196))>>s(4504)]
 * Renamed intermediate variables: 
[ (ch([139,[132],136,145]),s(4181))>>s(4505), (ch([139,[132],136,145]),aux(1140))>>s(4506), (ch([139,[132],136,145]),s(4183))>>s(4507), (ch([139,[132],136,145]),s(4184))>>s(4508), (ch([139,[132],136,145]),aux(1143))>>s(4509), (ch([139,[132],136,145]),it([136,145]))>>s(4510), (ch([139,[132],136,145]),s(4179))>>s(4511), (ch([139,[132],136,145]),s(4186))>>s(4512), (ch([139,[132],136,145]),s(4187))>>s(4513), (ch([139,[132],136,145]),s(4188))>>s(4514), (ch([139,[132],136,145]),s(4189))>>s(4515), (ch([139,[132],136,145]),s(4190))>>s(4516), (ch([139,[132],136,145]),s(4191))>>s(4517), (ch([139,[132],136,145]),s(4192))>>s(4518), (ch([139,[132],136,145]),s(4193))>>s(4519), (ch([139,[132],136,145]),s(4194))>>s(4520), (ch([139,[132],136,145]),s(4195))>>s(4521), (ch([139,[132],136,145]),s(4196))>>s(4522), (ch([139,[132],136,145]),it(132))>>s(4523)]
 * Renamed intermediate variables: 
[ (ch([139,[133,135],136,145]),s(4180))>>s(4524), (ch([139,[133,135],136,145]),s(4181))>>s(4525), (ch([139,[133,135],136,145]),aux(1140))>>s(4526), (ch([139,[133,135],136,145]),s(4183))>>s(4527), (ch([139,[133,135],136,145]),s(4184))>>s(4528), (ch([139,[133,135],136,145]),s(4179))>>s(4529), (ch([139,[133,135],136,145]),s(4186))>>s(4530), (ch([139,[133,135],136,145]),s(4187))>>s(4531), (ch([139,[133,135],136,145]),s(4188))>>s(4532), (ch([139,[133,135],136,145]),s(4189))>>s(4533), (ch([139,[133,135],136,145]),s(4190))>>s(4534), (ch([139,[133,135],136,145]),s(4191))>>s(4535), (ch([139,[133,135],136,145]),s(4192))>>s(4536), (ch([139,[133,135],136,145]),s(4193))>>s(4537), (ch([139,[133,135],136,145]),s(4194))>>s(4538), (ch([139,[133,135],136,145]),s(4195))>>s(4539), (ch([139,[133,135],136,145]),s(4196))>>s(4540), (ch([139,[133,135],136,145]),it(133))>>s(4541)]
 * Renamed intermediate variables: 
[ (ch([139,[133,135],137,145]),s(4180))>>s(4542), (ch([139,[133,135],137,145]),s(4181))>>s(4543), (ch([139,[133,135],137,145]),aux(1140))>>s(4544), (ch([139,[133,135],137,145]),s(4183))>>s(4545), (ch([139,[133,135],137,145]),s(4184))>>s(4546), (ch([139,[133,135],137,145]),s(4179))>>s(4547), (ch([139,[133,135],137,145]),s(4186))>>s(4548), (ch([139,[133,135],137,145]),s(4187))>>s(4549), (ch([139,[133,135],137,145]),s(4188))>>s(4550), (ch([139,[133,135],137,145]),s(4189))>>s(4551), (ch([139,[133,135],137,145]),s(4190))>>s(4552), (ch([139,[133,135],137,145]),s(4191))>>s(4553), (ch([139,[133,135],137,145]),s(4192))>>s(4554), (ch([139,[133,135],137,145]),s(4193))>>s(4555), (ch([139,[133,135],137,145]),s(4194))>>s(4556), (ch([139,[133,135],137,145]),s(4195))>>s(4557), (ch([139,[133,135],137,145]),s(4196))>>s(4558), (ch([139,[133,135],137,145]),it(133))>>s(4559)]
 * Renamed intermediate variables: 
[ (ch([139,[133,135],[132],136,145]),s(4181))>>s(4560), (ch([139,[133,135],[132],136,145]),aux(1140))>>s(4561), (ch([139,[133,135],[132],136,145]),s(4183))>>s(4562), (ch([139,[133,135],[132],136,145]),s(4184))>>s(4563), (ch([139,[133,135],[132],136,145]),aux(1141))>>s(4564), (ch([139,[133,135],[132],136,145]),it([136,145]))>>s(4565), (ch([139,[133,135],[132],136,145]),s(4179))>>s(4566), (ch([139,[133,135],[132],136,145]),s(4186))>>s(4567), (ch([139,[133,135],[132],136,145]),s(4187))>>s(4568), (ch([139,[133,135],[132],136,145]),s(4188))>>s(4569), (ch([139,[133,135],[132],136,145]),s(4189))>>s(4570), (ch([139,[133,135],[132],136,145]),s(4190))>>s(4571), (ch([139,[133,135],[132],136,145]),s(4191))>>s(4572), (ch([139,[133,135],[132],136,145]),s(4192))>>s(4573), (ch([139,[133,135],[132],136,145]),s(4193))>>s(4574), (ch([139,[133,135],[132],136,145]),s(4194))>>s(4575), (ch([139,[133,135],[132],136,145]),s(4195))>>s(4576), (ch([139,[133,135],[132],136,145]),s(4196))>>s(4577), (ch([139,[133,135],[132],136,145]),it(132))>>s(4578)]
 * Renamed intermediate variables: 
[ (ch([140,145]),s(4168))>>s(4579), (ch([140,145]),s(4169))>>s(4580), (ch([140,145]),aux(1139))>>s(4581), (ch([140,145]),s(4171))>>s(4582), (ch([140,145]),s(4172))>>s(4583), (ch([140,145]),s(4167))>>s(4584), (ch([140,145]),s(4173))>>s(4585), (ch([140,145]),s(4174))>>s(4586), (ch([140,145]),s(4175))>>s(4587), (ch([140,145]),s(4176))>>s(4588), (ch([140,145]),s(4177))>>s(4589), (ch([140,145]),s(4178))>>s(4590)]
 * Joined equivalent variables [aux(1173),s(4325),s(4352),s(4383),s(4398),s(4416),s(4438),s(4453),s(4480),s(4509),s(4524),s(4542),s(4564),s(4579)] into aux(1173)
 * Joined equivalent variables [aux(1174),s(4331),s(4359),s(4379),s(4399),s(4417),s(4434),s(4457),s(4485),s(4505),s(4525),s(4543),s(4560),s(4580)] into aux(1174)
 * Joined equivalent variables [aux(1175),s(4326),s(4353),s(4454),s(4481)] into aux(1175)
 * Joined equivalent variables [aux(1176),s(4332),s(4354),s(4458),s(4482)] into aux(1176)
 * Joined equivalent variables [aux(1177),s(4327),s(4355),s(4380),s(4400),s(4418),s(4435),s(4459),s(4486),s(4506),s(4526),s(4544),s(4561),s(4581)] into aux(1177)
 * Joined equivalent variables [aux(1178),s(4356)] into aux(1178)
 * Joined equivalent variables [aux(1179),s(4329),s(4357),s(4381),s(4401),s(4419),s(4436),s(4455),s(4483),s(4507),s(4527),s(4545),s(4562),s(4582)] into aux(1179)
 * Joined equivalent variables [aux(1180),s(4330),s(4358),s(4382),s(4402),s(4420),s(4437),s(4456),s(4484),s(4508),s(4528),s(4546),s(4563),s(4583)] into aux(1180)
 * Joined equivalent variables [s(4397),s(4415),s(4433),s(4452),s(4523),s(4541),s(4559),s(4578)] into s(4397)
 * Joined equivalent variables [s(4335),s(4336)] into s(4335)
 * Joined equivalent variables [s(4339),s(4340)] into s(4339)
 * Joined equivalent variables [s(4337),s(4338)] into s(4337)
 * Joined equivalent variables [s(4362),s(4363)] into s(4362)
 * Joined equivalent variables [s(4364),s(4365)] into s(4364)
 * Joined equivalent variables [s(4366),s(4367)] into s(4366)
 * Joined equivalent variables [s(4463),s(4464)] into s(4463)
 * Joined equivalent variables [s(4465),s(4466)] into s(4465)
 * Joined equivalent variables [s(4467),s(4468)] into s(4467)
 * Joined equivalent variables [s(4489),s(4490)] into s(4489)
 * Joined equivalent variables [s(4491),s(4492)] into s(4491)
 * Joined equivalent variables [s(4493),s(4494)] into s(4493)
 * Joined equivalent variables [s(4342),s(4369),s(4386),s(4404),s(4422),s(4441),s(4470),s(4495),s(4512),s(4530),s(4548),s(4567)] into s(4342)
 * Joined equivalent variables [s(4384),s(4439),s(4510),s(4565)] into s(4384)
 * Joined equivalent variables [s(4349),s(4376),s(4394),s(4412),s(4430),s(4449),s(4477),s(4502),s(4520),s(4538),s(4556),s(4575),s(4588)] into s(4349)
 * Joined equivalent variables [s(4348),s(4375),s(4393),s(4411),s(4429),s(4448),s(4476),s(4501),s(4519),s(4537),s(4555),s(4574),s(4587)] into s(4348)
 * Joined equivalent variables [s(4351),s(4378),s(4396),s(4414),s(4432),s(4451),s(4479),s(4504),s(4522),s(4540),s(4558),s(4577),s(4590)] into s(4351)
 * Joined equivalent variables [s(4350),s(4377),s(4395),s(4413),s(4431),s(4450),s(4478),s(4503),s(4521),s(4539),s(4557),s(4576),s(4589)] into s(4350)
 * Joined equivalent variables [s(4334),s(4361),s(4392),s(4410),s(4428),s(4447),s(4462),s(4488),s(4518),s(4536),s(4554),s(4573),s(4586)] into s(4334)
 * Joined equivalent variables [s(4347),s(4374),s(4391),s(4409),s(4427),s(4446),s(4475),s(4500),s(4517),s(4535),s(4553),s(4572),s(4585)] into s(4347)
 * Joined equivalent variables [s(4335),s(4362),s(4463),s(4489)] into s(4335)
 * Joined equivalent variables [s(4341),s(4368),s(4385),s(4403),s(4421),s(4440),s(4469),s(4487),s(4511),s(4529),s(4547),s(4566),s(4584)] into s(4341)
 * Joined equivalent variables [s(4344),s(4371),s(4388),s(4406),s(4424),s(4443),s(4472),s(4497),s(4514),s(4532),s(4550),s(4569)] into s(4344)
 * Joined equivalent variables [s(4343),s(4370),s(4387),s(4405),s(4423),s(4442),s(4471),s(4496),s(4513),s(4531),s(4549),s(4568)] into s(4343)
 * Joined equivalent variables [s(4346),s(4373),s(4390),s(4408),s(4426),s(4445),s(4474),s(4499),s(4516),s(4534),s(4552),s(4571)] into s(4346)
 * Joined equivalent variables [s(4345),s(4372),s(4389),s(4407),s(4425),s(4444),s(4473),s(4498),s(4515),s(4533),s(4551),s(4570)] into s(4345)
 * Renamed intermediate variables: 
[ (ch([138,134,144]),s(4198))>>s(4591), (ch([138,134,144]),s(4055))>>s(4592), (ch([138,134,144]),aux(1154))>>s(4593), (ch([138,134,144]),aux(850))>>s(4594), (ch([138,134,144]),s(4201))>>s(4595), (ch([138,134,144]),s(4202))>>s(4596), (ch([138,134,144]),s(4018))>>s(4597), (ch([138,134,144]),aux(1162))>>s(4598), (ch([138,134,144]),aux(1163))>>s(4599), (ch([138,134,144]),s(4048))>>s(4600), (ch([138,134,144]),s(4056))>>s(4601), (ch([138,134,144]),s(4057))>>s(4602), (ch([138,134,144]),s(4063))>>s(4603), (ch([138,134,144]),s(4064))>>s(4604), (ch([138,134,144]),s(4065))>>s(4605), (ch([138,134,144]),s(4066))>>s(4606), (ch([138,134,144]),s(4067))>>s(4607), (ch([138,134,144]),s(4068))>>s(4608), (ch([138,134,144]),s(4069))>>s(4609), (ch([138,134,144]),s(4070))>>s(4610), (ch([138,134,144]),s(4071))>>s(4611), (ch([138,134,144]),s(4072))>>s(4612), (ch([138,134,144]),s(4073))>>s(4613), (ch([138,134,144]),s(4074))>>s(4614), (ch([138,134,144]),s(4075))>>s(4615), (ch([138,134,144]),s(4197))>>s(4616), (ch([138,134,144]),s(4204))>>s(4617), (ch([138,134,144]),s(4205))>>s(4618), (ch([138,134,144]),s(4206))>>s(4619), (ch([138,134,144]),s(4207))>>s(4620), (ch([138,134,144]),s(4208))>>s(4621), (ch([138,134,144]),s(4209))>>s(4622), (ch([138,134,144]),s(4211))>>s(4623), (ch([138,134,144]),s(4212))>>s(4624), (ch([138,134,144]),s(4213))>>s(4625), (ch([138,134,144]),s(4214))>>s(4626), (ch([138,134,144]),s(4061))>>s(4627), (ch([138,134,144]),s(4062))>>s(4628)]
 * Renamed intermediate variables: 
[ (ch([138,[132],134,144]),s(4199))>>s(4629), (ch([138,[132],134,144]),aux(1154))>>s(4630), (ch([138,[132],134,144]),s(4201))>>s(4631), (ch([138,[132],134,144]),s(4202))>>s(4632), (ch([138,[132],134,144]),aux(1158))>>s(4633), (ch([138,[132],134,144]),it([134,144]))>>s(4634), (ch([138,[132],134,144]),s(4197))>>s(4635), (ch([138,[132],134,144]),s(4204))>>s(4636), (ch([138,[132],134,144]),s(4205))>>s(4637), (ch([138,[132],134,144]),s(4206))>>s(4638), (ch([138,[132],134,144]),s(4207))>>s(4639), (ch([138,[132],134,144]),s(4208))>>s(4640), (ch([138,[132],134,144]),s(4209))>>s(4641), (ch([138,[132],134,144]),s(4210))>>s(4642), (ch([138,[132],134,144]),s(4211))>>s(4643), (ch([138,[132],134,144]),s(4212))>>s(4644), (ch([138,[132],134,144]),s(4213))>>s(4645), (ch([138,[132],134,144]),s(4214))>>s(4646), (ch([138,[132],134,144]),it(132))>>s(4647)]
 * Renamed intermediate variables: 
[ (ch([138,[132],144]),s(4198))>>s(4648), (ch([138,[132],144]),s(4199))>>s(4649), (ch([138,[132],144]),aux(1154))>>s(4650), (ch([138,[132],144]),s(4201))>>s(4651), (ch([138,[132],144]),s(4202))>>s(4652), (ch([138,[132],144]),s(4018))>>s(4653), (ch([138,[132],144]),s(4197))>>s(4654), (ch([138,[132],144]),s(4204))>>s(4655), (ch([138,[132],144]),s(4205))>>s(4656), (ch([138,[132],144]),s(4206))>>s(4657), (ch([138,[132],144]),s(4207))>>s(4658), (ch([138,[132],144]),s(4208))>>s(4659), (ch([138,[132],144]),s(4209))>>s(4660), (ch([138,[132],144]),s(4210))>>s(4661), (ch([138,[132],144]),s(4211))>>s(4662), (ch([138,[132],144]),s(4212))>>s(4663), (ch([138,[132],144]),s(4213))>>s(4664), (ch([138,[132],144]),s(4214))>>s(4665), (ch([138,[132],144]),it(132))>>s(4666)]
 * Renamed intermediate variables: 
[ (ch([138,[133,135],134,144]),s(4198))>>s(4667), (ch([138,[133,135],134,144]),s(4199))>>s(4668), (ch([138,[133,135],134,144]),aux(1154))>>s(4669), (ch([138,[133,135],134,144]),s(4201))>>s(4670), (ch([138,[133,135],134,144]),s(4202))>>s(4671), (ch([138,[133,135],134,144]),s(4197))>>s(4672), (ch([138,[133,135],134,144]),s(4204))>>s(4673), (ch([138,[133,135],134,144]),s(4205))>>s(4674), (ch([138,[133,135],134,144]),s(4206))>>s(4675), (ch([138,[133,135],134,144]),s(4207))>>s(4676), (ch([138,[133,135],134,144]),s(4208))>>s(4677), (ch([138,[133,135],134,144]),s(4209))>>s(4678), (ch([138,[133,135],134,144]),s(4210))>>s(4679), (ch([138,[133,135],134,144]),s(4211))>>s(4680), (ch([138,[133,135],134,144]),s(4212))>>s(4681), (ch([138,[133,135],134,144]),s(4213))>>s(4682), (ch([138,[133,135],134,144]),s(4214))>>s(4683), (ch([138,[133,135],134,144]),it(133))>>s(4684)]
 * Renamed intermediate variables: 
[ (ch([138,[133,135],144]),s(4198))>>s(4685), (ch([138,[133,135],144]),s(4199))>>s(4686), (ch([138,[133,135],144]),aux(1154))>>s(4687), (ch([138,[133,135],144]),s(4201))>>s(4688), (ch([138,[133,135],144]),s(4202))>>s(4689), (ch([138,[133,135],144]),s(4018))>>s(4690), (ch([138,[133,135],144]),s(4197))>>s(4691), (ch([138,[133,135],144]),s(4204))>>s(4692), (ch([138,[133,135],144]),s(4205))>>s(4693), (ch([138,[133,135],144]),s(4206))>>s(4694), (ch([138,[133,135],144]),s(4207))>>s(4695), (ch([138,[133,135],144]),s(4208))>>s(4696), (ch([138,[133,135],144]),s(4209))>>s(4697), (ch([138,[133,135],144]),s(4210))>>s(4698), (ch([138,[133,135],144]),s(4211))>>s(4699), (ch([138,[133,135],144]),s(4212))>>s(4700), (ch([138,[133,135],144]),s(4213))>>s(4701), (ch([138,[133,135],144]),s(4214))>>s(4702), (ch([138,[133,135],144]),it(133))>>s(4703)]
 * Renamed intermediate variables: 
[ (ch([138,[133,135],[132],134,144]),s(4199))>>s(4704), (ch([138,[133,135],[132],134,144]),aux(1154))>>s(4705), (ch([138,[133,135],[132],134,144]),s(4201))>>s(4706), (ch([138,[133,135],[132],134,144]),s(4202))>>s(4707), (ch([138,[133,135],[132],134,144]),aux(1156))>>s(4708), (ch([138,[133,135],[132],134,144]),it([134,144]))>>s(4709), (ch([138,[133,135],[132],134,144]),s(4197))>>s(4710), (ch([138,[133,135],[132],134,144]),s(4204))>>s(4711), (ch([138,[133,135],[132],134,144]),s(4205))>>s(4712), (ch([138,[133,135],[132],134,144]),s(4206))>>s(4713), (ch([138,[133,135],[132],134,144]),s(4207))>>s(4714), (ch([138,[133,135],[132],134,144]),s(4208))>>s(4715), (ch([138,[133,135],[132],134,144]),s(4209))>>s(4716), (ch([138,[133,135],[132],134,144]),s(4210))>>s(4717), (ch([138,[133,135],[132],134,144]),s(4211))>>s(4718), (ch([138,[133,135],[132],134,144]),s(4212))>>s(4719), (ch([138,[133,135],[132],134,144]),s(4213))>>s(4720), (ch([138,[133,135],[132],134,144]),s(4214))>>s(4721), (ch([138,[133,135],[132],134,144]),it(132))>>s(4722)]
 * Renamed intermediate variables: 
[ (ch([138,[133,135],[132],144]),s(4198))>>s(4723), (ch([138,[133,135],[132],144]),s(4199))>>s(4724), (ch([138,[133,135],[132],144]),aux(1154))>>s(4725), (ch([138,[133,135],[132],144]),s(4201))>>s(4726), (ch([138,[133,135],[132],144]),s(4202))>>s(4727), (ch([138,[133,135],[132],144]),s(4018))>>s(4728), (ch([138,[133,135],[132],144]),s(4197))>>s(4729), (ch([138,[133,135],[132],144]),s(4204))>>s(4730), (ch([138,[133,135],[132],144]),s(4205))>>s(4731), (ch([138,[133,135],[132],144]),s(4206))>>s(4732), (ch([138,[133,135],[132],144]),s(4207))>>s(4733), (ch([138,[133,135],[132],144]),s(4208))>>s(4734), (ch([138,[133,135],[132],144]),s(4209))>>s(4735), (ch([138,[133,135],[132],144]),s(4210))>>s(4736), (ch([138,[133,135],[132],144]),s(4211))>>s(4737), (ch([138,[133,135],[132],144]),s(4212))>>s(4738), (ch([138,[133,135],[132],144]),s(4213))>>s(4739), (ch([138,[133,135],[132],144]),s(4214))>>s(4740), (ch([138,[133,135],[132],144]),it(132))>>s(4741)]
 * Joined equivalent variables [aux(1181),s(4591),s(4633),s(4648),s(4667),s(4685),s(4708),s(4723)] into aux(1181)
 * Joined equivalent variables [aux(1182),s(4598),s(4629),s(4649),s(4668),s(4686),s(4704),s(4724)] into aux(1182)
 * Joined equivalent variables [aux(1183),s(4593),s(4630),s(4650),s(4669),s(4687),s(4705),s(4725)] into aux(1183)
 * Joined equivalent variables [aux(1184),s(4595),s(4631),s(4651),s(4670),s(4688),s(4706),s(4726)] into aux(1184)
 * Joined equivalent variables [aux(1185),s(4596),s(4632),s(4652),s(4671),s(4689),s(4707),s(4727)] into aux(1185)
 * Joined equivalent variables [s(4603),s(4604)] into s(4603)
 * Joined equivalent variables [s(4627),s(4628),s(4647),s(4666),s(4684),s(4703),s(4722),s(4741)] into s(4627)
 * Joined equivalent variables [s(4597),s(4653),s(4690),s(4728)] into s(4597)
 * Joined equivalent variables [s(4602),s(4611)] into s(4602)
 * Joined equivalent variables [s(4614),s(4615)] into s(4614)
 * Joined equivalent variables [s(4612),s(4613)] into s(4612)
 * Joined equivalent variables [s(4606),s(4607)] into s(4606)
 * Joined equivalent variables [s(4617),s(4636),s(4655),s(4673),s(4692),s(4711),s(4730)] into s(4617)
 * Joined equivalent variables [s(4634),s(4709)] into s(4634)
 * Joined equivalent variables [s(4624),s(4644),s(4663),s(4681),s(4700),s(4719),s(4738)] into s(4624)
 * Joined equivalent variables [s(4623),s(4643),s(4662),s(4680),s(4699),s(4718),s(4737)] into s(4623)
 * Joined equivalent variables [s(4626),s(4646),s(4665),s(4683),s(4702),s(4721),s(4740)] into s(4626)
 * Joined equivalent variables [s(4625),s(4645),s(4664),s(4682),s(4701),s(4720),s(4739)] into s(4625)
 * Joined equivalent variables [s(4601),s(4642),s(4661),s(4679),s(4698),s(4717),s(4736)] into s(4601)
 * Joined equivalent variables [s(4622),s(4641),s(4660),s(4678),s(4697),s(4716),s(4735)] into s(4622)
 * Joined equivalent variables [s(4616),s(4635),s(4654),s(4672),s(4691),s(4710),s(4729)] into s(4616)
 * Joined equivalent variables [s(4619),s(4638),s(4657),s(4675),s(4694),s(4713),s(4732)] into s(4619)
 * Joined equivalent variables [s(4618),s(4637),s(4656),s(4674),s(4693),s(4712),s(4731)] into s(4618)
 * Joined equivalent variables [s(4608),s(4609)] into s(4608)
 * Joined equivalent variables [s(4621),s(4640),s(4659),s(4677),s(4696),s(4715),s(4734)] into s(4621)
 * Joined equivalent variables [s(4620),s(4639),s(4658),s(4676),s(4695),s(4714),s(4733)] into s(4620)
 * Renamed intermediate variables: 
[ (ch([139,134,144]),s(4180))>>s(4742), (ch([139,134,144]),s(4055))>>s(4743), (ch([139,134,144]),s(4183))>>s(4744), (ch([139,134,144]),s(4184))>>s(4745), (ch([139,134,144]),s(4018))>>s(4746), (ch([139,134,144]),aux(1151))>>s(4747), (ch([139,134,144]),aux(1152))>>s(4748), (ch([139,134,144]),aux(1153))>>s(4749), (ch([139,134,144]),aux(850))>>s(4750), (ch([139,134,144]),s(4048))>>s(4751), (ch([139,134,144]),s(4056))>>s(4752), (ch([139,134,144]),s(4057))>>s(4753), (ch([139,134,144]),s(4063))>>s(4754), (ch([139,134,144]),s(4064))>>s(4755), (ch([139,134,144]),s(4065))>>s(4756), (ch([139,134,144]),s(4066))>>s(4757), (ch([139,134,144]),s(4067))>>s(4758), (ch([139,134,144]),s(4068))>>s(4759), (ch([139,134,144]),s(4069))>>s(4760), (ch([139,134,144]),s(4070))>>s(4761), (ch([139,134,144]),s(4071))>>s(4762), (ch([139,134,144]),s(4072))>>s(4763), (ch([139,134,144]),s(4073))>>s(4764), (ch([139,134,144]),s(4074))>>s(4765), (ch([139,134,144]),s(4075))>>s(4766), (ch([139,134,144]),s(4179))>>s(4767), (ch([139,134,144]),s(4186))>>s(4768), (ch([139,134,144]),s(4187))>>s(4769), (ch([139,134,144]),s(4188))>>s(4770), (ch([139,134,144]),s(4189))>>s(4771), (ch([139,134,144]),s(4190))>>s(4772), (ch([139,134,144]),s(4191))>>s(4773), (ch([139,134,144]),s(4193))>>s(4774), (ch([139,134,144]),s(4194))>>s(4775), (ch([139,134,144]),s(4195))>>s(4776), (ch([139,134,144]),s(4196))>>s(4777), (ch([139,134,144]),s(4061))>>s(4778), (ch([139,134,144]),s(4062))>>s(4779)]
 * Renamed intermediate variables: 
[ (ch([139,[132],134,144]),s(4181))>>s(4780), (ch([139,[132],134,144]),aux(1140))>>s(4781), (ch([139,[132],134,144]),s(4183))>>s(4782), (ch([139,[132],134,144]),s(4184))>>s(4783), (ch([139,[132],134,144]),aux(1144))>>s(4784), (ch([139,[132],134,144]),it([134,144]))>>s(4785), (ch([139,[132],134,144]),s(4179))>>s(4786), (ch([139,[132],134,144]),s(4186))>>s(4787), (ch([139,[132],134,144]),s(4187))>>s(4788), (ch([139,[132],134,144]),s(4188))>>s(4789), (ch([139,[132],134,144]),s(4189))>>s(4790), (ch([139,[132],134,144]),s(4190))>>s(4791), (ch([139,[132],134,144]),s(4191))>>s(4792), (ch([139,[132],134,144]),s(4192))>>s(4793), (ch([139,[132],134,144]),s(4193))>>s(4794), (ch([139,[132],134,144]),s(4194))>>s(4795), (ch([139,[132],134,144]),s(4195))>>s(4796), (ch([139,[132],134,144]),s(4196))>>s(4797), (ch([139,[132],134,144]),it(132))>>s(4798)]
 * Renamed intermediate variables: 
[ (ch([139,[132],144]),s(4180))>>s(4799), (ch([139,[132],144]),s(4181))>>s(4800), (ch([139,[132],144]),aux(1140))>>s(4801), (ch([139,[132],144]),s(4183))>>s(4802), (ch([139,[132],144]),s(4184))>>s(4803), (ch([139,[132],144]),s(4018))>>s(4804), (ch([139,[132],144]),s(4179))>>s(4805), (ch([139,[132],144]),s(4186))>>s(4806), (ch([139,[132],144]),s(4187))>>s(4807), (ch([139,[132],144]),s(4188))>>s(4808), (ch([139,[132],144]),s(4189))>>s(4809), (ch([139,[132],144]),s(4190))>>s(4810), (ch([139,[132],144]),s(4191))>>s(4811), (ch([139,[132],144]),s(4192))>>s(4812), (ch([139,[132],144]),s(4193))>>s(4813), (ch([139,[132],144]),s(4194))>>s(4814), (ch([139,[132],144]),s(4195))>>s(4815), (ch([139,[132],144]),s(4196))>>s(4816), (ch([139,[132],144]),it(132))>>s(4817)]
 * Renamed intermediate variables: 
[ (ch([139,[133,135],134,144]),s(4180))>>s(4818), (ch([139,[133,135],134,144]),s(4181))>>s(4819), (ch([139,[133,135],134,144]),aux(1140))>>s(4820), (ch([139,[133,135],134,144]),s(4183))>>s(4821), (ch([139,[133,135],134,144]),s(4184))>>s(4822), (ch([139,[133,135],134,144]),s(4179))>>s(4823), (ch([139,[133,135],134,144]),s(4186))>>s(4824), (ch([139,[133,135],134,144]),s(4187))>>s(4825), (ch([139,[133,135],134,144]),s(4188))>>s(4826), (ch([139,[133,135],134,144]),s(4189))>>s(4827), (ch([139,[133,135],134,144]),s(4190))>>s(4828), (ch([139,[133,135],134,144]),s(4191))>>s(4829), (ch([139,[133,135],134,144]),s(4192))>>s(4830), (ch([139,[133,135],134,144]),s(4193))>>s(4831), (ch([139,[133,135],134,144]),s(4194))>>s(4832), (ch([139,[133,135],134,144]),s(4195))>>s(4833), (ch([139,[133,135],134,144]),s(4196))>>s(4834), (ch([139,[133,135],134,144]),it(133))>>s(4835)]
 * Renamed intermediate variables: 
[ (ch([139,[133,135],144]),s(4180))>>s(4836), (ch([139,[133,135],144]),s(4181))>>s(4837), (ch([139,[133,135],144]),aux(1140))>>s(4838), (ch([139,[133,135],144]),s(4183))>>s(4839), (ch([139,[133,135],144]),s(4184))>>s(4840), (ch([139,[133,135],144]),s(4018))>>s(4841), (ch([139,[133,135],144]),s(4179))>>s(4842), (ch([139,[133,135],144]),s(4186))>>s(4843), (ch([139,[133,135],144]),s(4187))>>s(4844), (ch([139,[133,135],144]),s(4188))>>s(4845), (ch([139,[133,135],144]),s(4189))>>s(4846), (ch([139,[133,135],144]),s(4190))>>s(4847), (ch([139,[133,135],144]),s(4191))>>s(4848), (ch([139,[133,135],144]),s(4192))>>s(4849), (ch([139,[133,135],144]),s(4193))>>s(4850), (ch([139,[133,135],144]),s(4194))>>s(4851), (ch([139,[133,135],144]),s(4195))>>s(4852), (ch([139,[133,135],144]),s(4196))>>s(4853), (ch([139,[133,135],144]),it(133))>>s(4854)]
 * Renamed intermediate variables: 
[ (ch([139,[133,135],[132],134,144]),s(4181))>>s(4855), (ch([139,[133,135],[132],134,144]),aux(1140))>>s(4856), (ch([139,[133,135],[132],134,144]),s(4183))>>s(4857), (ch([139,[133,135],[132],134,144]),s(4184))>>s(4858), (ch([139,[133,135],[132],134,144]),aux(1142))>>s(4859), (ch([139,[133,135],[132],134,144]),it([134,144]))>>s(4860), (ch([139,[133,135],[132],134,144]),s(4179))>>s(4861), (ch([139,[133,135],[132],134,144]),s(4186))>>s(4862), (ch([139,[133,135],[132],134,144]),s(4187))>>s(4863), (ch([139,[133,135],[132],134,144]),s(4188))>>s(4864), (ch([139,[133,135],[132],134,144]),s(4189))>>s(4865), (ch([139,[133,135],[132],134,144]),s(4190))>>s(4866), (ch([139,[133,135],[132],134,144]),s(4191))>>s(4867), (ch([139,[133,135],[132],134,144]),s(4192))>>s(4868), (ch([139,[133,135],[132],134,144]),s(4193))>>s(4869), (ch([139,[133,135],[132],134,144]),s(4194))>>s(4870), (ch([139,[133,135],[132],134,144]),s(4195))>>s(4871), (ch([139,[133,135],[132],134,144]),s(4196))>>s(4872), (ch([139,[133,135],[132],134,144]),it(132))>>s(4873)]
 * Renamed intermediate variables: 
[ (ch([139,[133,135],[132],144]),s(4180))>>s(4874), (ch([139,[133,135],[132],144]),s(4181))>>s(4875), (ch([139,[133,135],[132],144]),aux(1140))>>s(4876), (ch([139,[133,135],[132],144]),s(4183))>>s(4877), (ch([139,[133,135],[132],144]),s(4184))>>s(4878), (ch([139,[133,135],[132],144]),s(4018))>>s(4879), (ch([139,[133,135],[132],144]),s(4179))>>s(4880), (ch([139,[133,135],[132],144]),s(4186))>>s(4881), (ch([139,[133,135],[132],144]),s(4187))>>s(4882), (ch([139,[133,135],[132],144]),s(4188))>>s(4883), (ch([139,[133,135],[132],144]),s(4189))>>s(4884), (ch([139,[133,135],[132],144]),s(4190))>>s(4885), (ch([139,[133,135],[132],144]),s(4191))>>s(4886), (ch([139,[133,135],[132],144]),s(4192))>>s(4887), (ch([139,[133,135],[132],144]),s(4193))>>s(4888), (ch([139,[133,135],[132],144]),s(4194))>>s(4889), (ch([139,[133,135],[132],144]),s(4195))>>s(4890), (ch([139,[133,135],[132],144]),s(4196))>>s(4891), (ch([139,[133,135],[132],144]),it(132))>>s(4892)]
 * Joined equivalent variables [aux(1187),s(4742),s(4784),s(4799),s(4818),s(4836),s(4859),s(4874)] into aux(1187)
 * Joined equivalent variables [aux(1188),s(4747),s(4780),s(4800),s(4819),s(4837),s(4855),s(4875)] into aux(1188)
 * Joined equivalent variables [aux(1189),s(4749),s(4781),s(4801),s(4820),s(4838),s(4856),s(4876)] into aux(1189)
 * Joined equivalent variables [aux(1190),s(4744),s(4782),s(4802),s(4821),s(4839),s(4857),s(4877)] into aux(1190)
 * Joined equivalent variables [aux(1191),s(4745),s(4783),s(4803),s(4822),s(4840),s(4858),s(4878)] into aux(1191)
 * Joined equivalent variables [s(4754),s(4755)] into s(4754)
 * Joined equivalent variables [s(4778),s(4779),s(4798),s(4817),s(4835),s(4854),s(4873),s(4892)] into s(4778)
 * Joined equivalent variables [s(4746),s(4804),s(4841),s(4879)] into s(4746)
 * Joined equivalent variables [s(4753),s(4762)] into s(4753)
 * Joined equivalent variables [s(4763),s(4764)] into s(4763)
 * Joined equivalent variables [s(4765),s(4766)] into s(4765)
 * Joined equivalent variables [s(4757),s(4758)] into s(4757)
 * Joined equivalent variables [s(4768),s(4787),s(4806),s(4824),s(4843),s(4862),s(4881)] into s(4768)
 * Joined equivalent variables [s(4785),s(4860)] into s(4785)
 * Joined equivalent variables [s(4775),s(4795),s(4814),s(4832),s(4851),s(4870),s(4889)] into s(4775)
 * Joined equivalent variables [s(4774),s(4794),s(4813),s(4831),s(4850),s(4869),s(4888)] into s(4774)
 * Joined equivalent variables [s(4777),s(4797),s(4816),s(4834),s(4853),s(4872),s(4891)] into s(4777)
 * Joined equivalent variables [s(4776),s(4796),s(4815),s(4833),s(4852),s(4871),s(4890)] into s(4776)
 * Joined equivalent variables [s(4752),s(4793),s(4812),s(4830),s(4849),s(4868),s(4887)] into s(4752)
 * Joined equivalent variables [s(4773),s(4792),s(4811),s(4829),s(4848),s(4867),s(4886)] into s(4773)
 * Joined equivalent variables [s(4767),s(4786),s(4805),s(4823),s(4842),s(4861),s(4880)] into s(4767)
 * Joined equivalent variables [s(4770),s(4789),s(4808),s(4826),s(4845),s(4864),s(4883)] into s(4770)
 * Joined equivalent variables [s(4769),s(4788),s(4807),s(4825),s(4844),s(4863),s(4882)] into s(4769)
 * Joined equivalent variables [s(4759),s(4760)] into s(4759)
 * Joined equivalent variables [s(4772),s(4791),s(4810),s(4828),s(4847),s(4866),s(4885)] into s(4772)
 * Joined equivalent variables [s(4771),s(4790),s(4809),s(4827),s(4846),s(4865),s(4884)] into s(4771)
 * Renamed intermediate variables: 
[ (ch([137,145]),aux(890))>>s(4893), (ch([137,145]),s(4104))>>s(4894), (ch([137,145]),s(4105))>>s(4895), (ch([137,145]),aux(891))>>s(4896), (ch([137,145]),s(4108))>>s(4897), (ch([137,145]),s(4102))>>s(4898), (ch([137,145]),s(4101))>>s(4899), (ch([137,145]),s(4109))>>s(4900), (ch([137,145]),s(4110))>>s(4901), (ch([137,145]),s(4111))>>s(4902), (ch([137,145]),s(4112))>>s(4903), (ch([137,145]),s(4113))>>s(4904), (ch([137,145]),s(4114))>>s(4905), (ch([137,145]),s(4115))>>s(4906)]
 * Renamed intermediate variables: 
[ (ch([[133,135],136,145]),it(133))>>s(4907), (ch([[133,135],136,145]),s(3887))>>s(4908), (ch([[133,135],136,145]),s(3888))>>s(4909), (ch([[133,135],136,145]),s(3889))>>s(4910), (ch([[133,135],136,145]),s(3890))>>s(4911), (ch([[133,135],136,145]),s(3891))>>s(4912), (ch([[133,135],136,145]),s(3892))>>s(4913), (ch([[133,135],136,145]),s(3893))>>s(4914), (ch([[133,135],136,145]),s(3894))>>s(4915), (ch([[133,135],136,145]),s(3895))>>s(4916), (ch([[133,135],136,145]),s(3896))>>s(4917), (ch([[133,135],136,145]),s(3897))>>s(4918), (ch([[133,135],136,145]),s(3898))>>s(4919), (ch([[133,135],136,145]),s(3899))>>s(4920), (ch([[133,135],136,145]),s(3900))>>s(4921), (ch([[133,135],136,145]),s(3913))>>s(4922), (ch([[133,135],136,145]),s(3914))>>s(4923), (ch([[133,135],136,145]),s(3915))>>s(4924), (ch([[133,135],136,145]),s(3916))>>s(4925), (ch([[133,135],136,145]),s(3917))>>s(4926), (ch([[133,135],136,145]),s(3918))>>s(4927), (ch([[133,135],136,145]),s(3919))>>s(4928), (ch([[133,135],136,145]),s(3920))>>s(4929), (ch([[133,135],136,145]),s(3921))>>s(4930), (ch([[133,135],136,145]),s(3922))>>s(4931), (ch([[133,135],136,145]),s(3923))>>s(4932), (ch([[133,135],136,145]),s(3924))>>s(4933), (ch([[133,135],136,145]),s(3925))>>s(4934), (ch([[133,135],136,145]),s(3926))>>s(4935), (ch([[133,135],136,145]),s(4034))>>s(4936), (ch([[133,135],136,145]),s(4035))>>s(4937), (ch([[133,135],136,145]),s(4036))>>s(4938), (ch([[133,135],136,145]),s(4037))>>s(4939), (ch([[133,135],136,145]),s(4038))>>s(4940), (ch([[133,135],136,145]),s(4039))>>s(4941), (ch([[133,135],136,145]),s(4040))>>s(4942), (ch([[133,135],136,145]),s(4041))>>s(4943)]
 * Renamed intermediate variables: 
[ (ch([[133,135],137,145]),it(133))>>s(4944), (ch([[133,135],137,145]),s(3887))>>s(4945), (ch([[133,135],137,145]),s(3888))>>s(4946), (ch([[133,135],137,145]),s(3889))>>s(4947), (ch([[133,135],137,145]),s(3890))>>s(4948), (ch([[133,135],137,145]),s(3891))>>s(4949), (ch([[133,135],137,145]),s(3892))>>s(4950), (ch([[133,135],137,145]),s(3893))>>s(4951), (ch([[133,135],137,145]),s(3894))>>s(4952), (ch([[133,135],137,145]),s(3895))>>s(4953), (ch([[133,135],137,145]),s(3896))>>s(4954), (ch([[133,135],137,145]),s(3897))>>s(4955), (ch([[133,135],137,145]),s(3898))>>s(4956), (ch([[133,135],137,145]),s(3899))>>s(4957), (ch([[133,135],137,145]),s(3900))>>s(4958), (ch([[133,135],137,145]),s(3913))>>s(4959), (ch([[133,135],137,145]),s(3914))>>s(4960), (ch([[133,135],137,145]),s(3915))>>s(4961), (ch([[133,135],137,145]),s(3916))>>s(4962), (ch([[133,135],137,145]),s(3917))>>s(4963), (ch([[133,135],137,145]),s(3918))>>s(4964), (ch([[133,135],137,145]),s(3919))>>s(4965), (ch([[133,135],137,145]),s(3920))>>s(4966), (ch([[133,135],137,145]),s(3921))>>s(4967), (ch([[133,135],137,145]),s(3922))>>s(4968), (ch([[133,135],137,145]),s(3923))>>s(4969), (ch([[133,135],137,145]),s(3924))>>s(4970), (ch([[133,135],137,145]),s(3925))>>s(4971), (ch([[133,135],137,145]),s(3926))>>s(4972), (ch([[133,135],137,145]),s(4116))>>s(4973), (ch([[133,135],137,145]),s(4117))>>s(4974), (ch([[133,135],137,145]),s(4118))>>s(4975), (ch([[133,135],137,145]),s(4119))>>s(4976), (ch([[133,135],137,145]),s(4120))>>s(4977), (ch([[133,135],137,145]),s(4121))>>s(4978), (ch([[133,135],137,145]),s(4122))>>s(4979), (ch([[133,135],137,145]),s(4123))>>s(4980)]
 * Renamed intermediate variables: 
[ (ch([[133,135],[132],136,145]),it([136,145]))>>s(4981), (ch([[133,135],[132],136,145]),it(132))>>s(4982)]
 * Joined equivalent variables [s(4907),s(4908),s(4909),s(4910),s(4911),s(4912),s(4913),s(4914),s(4915),s(4916),s(4917),s(4918),s(4919),s(4920),s(4921),s(4922),s(4923),s(4924),s(4925),s(4926),s(4927),s(4928),s(4929),s(4930),s(4931),s(4932),s(4933),s(4934),s(4935),s(4936),s(4937),s(4938),s(4939),s(4940),s(4941),s(4942),s(4943),s(4944),s(4945),s(4946),s(4947),s(4948),s(4949),s(4950),s(4951),s(4952),s(4953),s(4954),s(4955),s(4956),s(4957),s(4958),s(4959),s(4960),s(4961),s(4962),s(4963),s(4964),s(4965),s(4966),s(4967),s(4968),s(4969),s(4970),s(4971),s(4972),s(4973),s(4974),s(4975),s(4976),s(4977),s(4978),s(4979),s(4980),s(4982)] into s(4907)
 * Renamed intermediate variables: 
[ (ch([136,145]),aux(813))>>s(4983), (ch([136,145]),s(4022))>>s(4984), (ch([136,145]),s(4023))>>s(4985), (ch([136,145]),aux(814))>>s(4986), (ch([136,145]),s(4026))>>s(4987), (ch([136,145]),s(4020))>>s(4988), (ch([136,145]),s(4019))>>s(4989), (ch([136,145]),s(4027))>>s(4990), (ch([136,145]),s(4028))>>s(4991), (ch([136,145]),s(4029))>>s(4992), (ch([136,145]),s(4030))>>s(4993), (ch([136,145]),s(4031))>>s(4994), (ch([136,145]),s(4032))>>s(4995), (ch([136,145]),s(4033))>>s(4996)]
 * Renamed intermediate variables: 
[ (ch([[132],136,145]),it([136,145]))>>s(4997), (ch([[132],136,145]),it(132))>>s(4998), (ch([[132],136,145]),s(3994))>>s(4999), (ch([[132],136,145]),s(3995))>>s(5000), (ch([[132],136,145]),s(3996))>>s(5001), (ch([[132],136,145]),s(3997))>>s(5002), (ch([[132],136,145]),s(3998))>>s(5003), (ch([[132],136,145]),s(3999))>>s(5004), (ch([[132],136,145]),s(4000))>>s(5005), (ch([[132],136,145]),s(4001))>>s(5006), (ch([[132],136,145]),s(4002))>>s(5007), (ch([[132],136,145]),s(4003))>>s(5008), (ch([[132],136,145]),s(4004))>>s(5009), (ch([[132],136,145]),s(4005))>>s(5010), (ch([[132],136,145]),s(4006))>>s(5011), (ch([[132],136,145]),s(4034))>>s(5012), (ch([[132],136,145]),s(4035))>>s(5013), (ch([[132],136,145]),s(4036))>>s(5014), (ch([[132],136,145]),s(4037))>>s(5015), (ch([[132],136,145]),s(4038))>>s(5016), (ch([[132],136,145]),s(4039))>>s(5017), (ch([[132],136,145]),s(4040))>>s(5018), (ch([[132],136,145]),s(4041))>>s(5019)]
 * Joined equivalent variables [s(4998),s(4999),s(5000),s(5001),s(5002),s(5003),s(5004),s(5005),s(5006),s(5007),s(5008),s(5009),s(5010),s(5011),s(5012),s(5013),s(5014),s(5015),s(5016),s(5017),s(5018),s(5019)] into s(4998)
 * Renamed intermediate variables: 
[ (ch([[133,135],134,144]),it(133))>>s(5020), (ch([[133,135],134,144]),s(3887))>>s(5021), (ch([[133,135],134,144]),s(3888))>>s(5022), (ch([[133,135],134,144]),s(3889))>>s(5023), (ch([[133,135],134,144]),s(3890))>>s(5024), (ch([[133,135],134,144]),s(3891))>>s(5025), (ch([[133,135],134,144]),s(3892))>>s(5026), (ch([[133,135],134,144]),s(3893))>>s(5027), (ch([[133,135],134,144]),s(3894))>>s(5028), (ch([[133,135],134,144]),s(3895))>>s(5029), (ch([[133,135],134,144]),s(3896))>>s(5030), (ch([[133,135],134,144]),s(3897))>>s(5031), (ch([[133,135],134,144]),s(3898))>>s(5032), (ch([[133,135],134,144]),s(3899))>>s(5033), (ch([[133,135],134,144]),s(3900))>>s(5034), (ch([[133,135],134,144]),s(3913))>>s(5035), (ch([[133,135],134,144]),s(3914))>>s(5036), (ch([[133,135],134,144]),s(3915))>>s(5037), (ch([[133,135],134,144]),s(3916))>>s(5038), (ch([[133,135],134,144]),s(3917))>>s(5039), (ch([[133,135],134,144]),s(3918))>>s(5040), (ch([[133,135],134,144]),s(3919))>>s(5041), (ch([[133,135],134,144]),s(3920))>>s(5042), (ch([[133,135],134,144]),s(3921))>>s(5043), (ch([[133,135],134,144]),s(3922))>>s(5044), (ch([[133,135],134,144]),s(3923))>>s(5045), (ch([[133,135],134,144]),s(3924))>>s(5046), (ch([[133,135],134,144]),s(3925))>>s(5047), (ch([[133,135],134,144]),s(3926))>>s(5048), (ch([[133,135],134,144]),s(4077))>>s(5049), (ch([[133,135],134,144]),s(4078))>>s(5050), (ch([[133,135],134,144]),s(4079))>>s(5051), (ch([[133,135],134,144]),s(4080))>>s(5052), (ch([[133,135],134,144]),s(4081))>>s(5053), (ch([[133,135],134,144]),s(4082))>>s(5054), (ch([[133,135],134,144]),s(4083))>>s(5055), (ch([[133,135],134,144]),s(4084))>>s(5056), (ch([[133,135],134,144]),s(4085))>>s(5057), (ch([[133,135],134,144]),s(4086))>>s(5058), (ch([[133,135],134,144]),s(4087))>>s(5059), (ch([[133,135],134,144]),s(4088))>>s(5060), (ch([[133,135],134,144]),s(4089))>>s(5061)]
 * Renamed intermediate variables: 
[ (ch([[133,135],144]),s(4018))>>s(5062), (ch([[133,135],144]),it(133))>>s(5063)]
 * Renamed intermediate variables: 
[ (ch([[133,135],[132],134,144]),it([134,144]))>>s(5064), (ch([[133,135],[132],134,144]),it(132))>>s(5065)]
 * Renamed intermediate variables: 
[ (ch([[133,135],[132],144]),s(4018))>>s(5066), (ch([[133,135],[132],144]),it(132))>>s(5067)]
 * Joined equivalent variables [s(5020),s(5021),s(5022),s(5023),s(5024),s(5025),s(5026),s(5027),s(5028),s(5029),s(5030),s(5031),s(5032),s(5033),s(5034),s(5035),s(5036),s(5037),s(5038),s(5039),s(5040),s(5041),s(5042),s(5043),s(5044),s(5045),s(5046),s(5047),s(5048),s(5049),s(5050),s(5051),s(5052),s(5053),s(5054),s(5055),s(5056),s(5057),s(5058),s(5059),s(5060),s(5061),s(5063),s(5065),s(5067)] into s(5020)
 * Joined equivalent variables [s(5062),s(5066)] into s(5062)
 * Renamed intermediate variables: 
[ (ch([[132],134,144]),it([134,144]))>>s(5068), (ch([[132],134,144]),it(132))>>s(5069), (ch([[132],134,144]),s(3994))>>s(5070), (ch([[132],134,144]),s(3995))>>s(5071), (ch([[132],134,144]),s(3996))>>s(5072), (ch([[132],134,144]),s(3997))>>s(5073), (ch([[132],134,144]),s(3998))>>s(5074), (ch([[132],134,144]),s(3999))>>s(5075), (ch([[132],134,144]),s(4000))>>s(5076), (ch([[132],134,144]),s(4001))>>s(5077), (ch([[132],134,144]),s(4002))>>s(5078), (ch([[132],134,144]),s(4003))>>s(5079), (ch([[132],134,144]),s(4004))>>s(5080), (ch([[132],134,144]),s(4005))>>s(5081), (ch([[132],134,144]),s(4006))>>s(5082), (ch([[132],134,144]),s(4076))>>s(5083), (ch([[132],134,144]),s(4077))>>s(5084), (ch([[132],134,144]),s(4078))>>s(5085), (ch([[132],134,144]),s(4079))>>s(5086), (ch([[132],134,144]),s(4080))>>s(5087), (ch([[132],134,144]),s(4081))>>s(5088), (ch([[132],134,144]),s(4082))>>s(5089), (ch([[132],134,144]),s(4083))>>s(5090), (ch([[132],134,144]),s(4084))>>s(5091), (ch([[132],134,144]),s(4085))>>s(5092), (ch([[132],134,144]),s(4086))>>s(5093), (ch([[132],134,144]),s(4087))>>s(5094), (ch([[132],134,144]),s(4088))>>s(5095), (ch([[132],134,144]),s(4089))>>s(5096)]
 * Renamed intermediate variables: 
[ (ch([[132],144]),s(4018))>>s(5097), (ch([[132],144]),it(132))>>s(5098)]
 * Joined equivalent variables [s(5069),s(5070),s(5071),s(5072),s(5073),s(5074),s(5075),s(5076),s(5077),s(5078),s(5079),s(5080),s(5081),s(5082),s(5083),s(5084),s(5085),s(5086),s(5087),s(5088),s(5089),s(5090),s(5091),s(5092),s(5093),s(5094),s(5095),s(5096),s(5098)] into s(5069)
 * Renamed intermediate variables: 
[ (ch([138,[133,135]]),s(4198))>>s(5099), (ch([138,[133,135]]),s(4199))>>s(5100), (ch([138,[133,135]]),aux(1154))>>s(5101), (ch([138,[133,135]]),s(4201))>>s(5102), (ch([138,[133,135]]),s(4202))>>s(5103), (ch([138,[133,135]]),s(4197))>>s(5104), (ch([138,[133,135]]),s(4204))>>s(5105), (ch([138,[133,135]]),s(4205))>>s(5106), (ch([138,[133,135]]),s(4206))>>s(5107), (ch([138,[133,135]]),s(4207))>>s(5108), (ch([138,[133,135]]),s(4208))>>s(5109), (ch([138,[133,135]]),s(4209))>>s(5110), (ch([138,[133,135]]),s(4210))>>s(5111), (ch([138,[133,135]]),s(4211))>>s(5112), (ch([138,[133,135]]),s(4212))>>s(5113), (ch([138,[133,135]]),s(4213))>>s(5114), (ch([138,[133,135]]),s(4214))>>s(5115), (ch([138,[133,135]]),it(133))>>s(5116)]
 * Renamed intermediate variables: 
[ (ch([138,[133,135],[132]]),s(4198))>>s(5117), (ch([138,[133,135],[132]]),s(4199))>>s(5118), (ch([138,[133,135],[132]]),aux(1154))>>s(5119), (ch([138,[133,135],[132]]),s(4201))>>s(5120), (ch([138,[133,135],[132]]),s(4202))>>s(5121), (ch([138,[133,135],[132]]),s(4197))>>s(5122), (ch([138,[133,135],[132]]),s(4204))>>s(5123), (ch([138,[133,135],[132]]),s(4205))>>s(5124), (ch([138,[133,135],[132]]),s(4206))>>s(5125), (ch([138,[133,135],[132]]),s(4207))>>s(5126), (ch([138,[133,135],[132]]),s(4208))>>s(5127), (ch([138,[133,135],[132]]),s(4209))>>s(5128), (ch([138,[133,135],[132]]),s(4210))>>s(5129), (ch([138,[133,135],[132]]),s(4211))>>s(5130), (ch([138,[133,135],[132]]),s(4212))>>s(5131), (ch([138,[133,135],[132]]),s(4213))>>s(5132), (ch([138,[133,135],[132]]),s(4214))>>s(5133), (ch([138,[133,135],[132]]),it(132))>>s(5134)]
 * Joined equivalent variables [aux(1194),s(5099),s(5117)] into aux(1194)
 * Joined equivalent variables [aux(1195),s(5100),s(5118)] into aux(1195)
 * Joined equivalent variables [aux(1196),s(5101),s(5119)] into aux(1196)
 * Joined equivalent variables [aux(1197),s(5102),s(5120)] into aux(1197)
 * Joined equivalent variables [aux(1198),s(5103),s(5121)] into aux(1198)
 * Joined equivalent variables [s(5116),s(5134)] into s(5116)
 * Joined equivalent variables [s(5105),s(5123)] into s(5105)
 * Joined equivalent variables [s(5113),s(5131)] into s(5113)
 * Joined equivalent variables [s(5112),s(5130)] into s(5112)
 * Joined equivalent variables [s(5115),s(5133)] into s(5115)
 * Joined equivalent variables [s(5114),s(5132)] into s(5114)
 * Joined equivalent variables [s(5111),s(5129)] into s(5111)
 * Joined equivalent variables [s(5110),s(5128)] into s(5110)
 * Joined equivalent variables [s(5104),s(5122)] into s(5104)
 * Joined equivalent variables [s(5107),s(5125)] into s(5107)
 * Joined equivalent variables [s(5106),s(5124)] into s(5106)
 * Joined equivalent variables [s(5109),s(5127)] into s(5109)
 * Joined equivalent variables [s(5108),s(5126)] into s(5108)
 * Renamed intermediate variables: 
[ (ch([139,[133,135]]),s(4180))>>s(5135), (ch([139,[133,135]]),s(4181))>>s(5136), (ch([139,[133,135]]),aux(1140))>>s(5137), (ch([139,[133,135]]),s(4183))>>s(5138), (ch([139,[133,135]]),s(4184))>>s(5139), (ch([139,[133,135]]),s(4179))>>s(5140), (ch([139,[133,135]]),s(4186))>>s(5141), (ch([139,[133,135]]),s(4187))>>s(5142), (ch([139,[133,135]]),s(4188))>>s(5143), (ch([139,[133,135]]),s(4189))>>s(5144), (ch([139,[133,135]]),s(4190))>>s(5145), (ch([139,[133,135]]),s(4191))>>s(5146), (ch([139,[133,135]]),s(4192))>>s(5147), (ch([139,[133,135]]),s(4193))>>s(5148), (ch([139,[133,135]]),s(4194))>>s(5149), (ch([139,[133,135]]),s(4195))>>s(5150), (ch([139,[133,135]]),s(4196))>>s(5151), (ch([139,[133,135]]),it(133))>>s(5152)]
 * Renamed intermediate variables: 
[ (ch([139,[133,135],[132]]),s(4180))>>s(5153), (ch([139,[133,135],[132]]),s(4181))>>s(5154), (ch([139,[133,135],[132]]),aux(1140))>>s(5155), (ch([139,[133,135],[132]]),s(4183))>>s(5156), (ch([139,[133,135],[132]]),s(4184))>>s(5157), (ch([139,[133,135],[132]]),s(4179))>>s(5158), (ch([139,[133,135],[132]]),s(4186))>>s(5159), (ch([139,[133,135],[132]]),s(4187))>>s(5160), (ch([139,[133,135],[132]]),s(4188))>>s(5161), (ch([139,[133,135],[132]]),s(4189))>>s(5162), (ch([139,[133,135],[132]]),s(4190))>>s(5163), (ch([139,[133,135],[132]]),s(4191))>>s(5164), (ch([139,[133,135],[132]]),s(4192))>>s(5165), (ch([139,[133,135],[132]]),s(4193))>>s(5166), (ch([139,[133,135],[132]]),s(4194))>>s(5167), (ch([139,[133,135],[132]]),s(4195))>>s(5168), (ch([139,[133,135],[132]]),s(4196))>>s(5169), (ch([139,[133,135],[132]]),it(132))>>s(5170)]
 * Joined equivalent variables [aux(1199),s(5135),s(5153)] into aux(1199)
 * Joined equivalent variables [aux(1200),s(5136),s(5154)] into aux(1200)
 * Joined equivalent variables [aux(1201),s(5137),s(5155)] into aux(1201)
 * Joined equivalent variables [aux(1202),s(5138),s(5156)] into aux(1202)
 * Joined equivalent variables [aux(1203),s(5139),s(5157)] into aux(1203)
 * Joined equivalent variables [s(5152),s(5170)] into s(5152)
 * Joined equivalent variables [s(5141),s(5159)] into s(5141)
 * Joined equivalent variables [s(5149),s(5167)] into s(5149)
 * Joined equivalent variables [s(5148),s(5166)] into s(5148)
 * Joined equivalent variables [s(5151),s(5169)] into s(5151)
 * Joined equivalent variables [s(5150),s(5168)] into s(5150)
 * Joined equivalent variables [s(5147),s(5165)] into s(5147)
 * Joined equivalent variables [s(5146),s(5164)] into s(5146)
 * Joined equivalent variables [s(5140),s(5158)] into s(5140)
 * Joined equivalent variables [s(5143),s(5161)] into s(5143)
 * Joined equivalent variables [s(5142),s(5160)] into s(5142)
 * Joined equivalent variables [s(5145),s(5163)] into s(5145)
 * Joined equivalent variables [s(5144),s(5162)] into s(5144)

#### Cost of chains of echelon_helper_old(A,B,C,D,E,F,G):
* Chain [[133,135]]...: 2454*it(133)+0
Unbounded itvars
it(133) :  it(133)

  with precondition: [B>=1,D>=1,A>=2*D+3,C>=0,E>=0,F>=0,G>=0] 

* Chain [[133,135],[132]]...: 3499*it(132)+0
Unbounded itvars
it(132) :  it(132)

  with precondition: [B>=1,C>=0,D>=1,E>=0,F>=0,G>=0,A>=2*D+3,B+2*A>=4*D+9] 

* Chain [[133,135],[132],144]: 3499*it(132)+6*s(4018)+6
  Such that:s(4018) =< E

Unbounded itvars
it(132) :  it(132)

  with precondition: [B>=1,C>=0,D>=1,E>=3,G>=0,A>=2*D+3,F>=D+3,F>=E,B+2*A>=4*D+9] 

* Chain [[133,135],[132],136,145]: 3937*it(132)+49*it([136,145])+0
  Such that:it([136,145]) =< 1

Unbounded itvars
it(132) :  it(132)

  with precondition: [E=1,F=0,B>=1,C>=0,D>=1,G>=0,A>=2*D+3,B+2*A>=4*D+9] 

* Chain [[133,135],[132],134,144]: 4871*it(132)+49*it([134,144])+0
  Such that:it([134,144]) =< 1

Unbounded itvars
it(132) :  it(132)

  with precondition: [B>=1,C>=0,D>=1,E>=2,F>=1,G>=0,A>=2*D+3,B+2*A>=4*D+9] 

* Chain [[133,135],144]: 2454*it(133)+6*s(4018)+6
  Such that:s(4018) =< E

Unbounded itvars
it(133) :  it(133)

  with precondition: [B>=1,C>=0,D>=1,E>=2,F>=1,G>=0,A>=2*D+3] 

* Chain [[133,135],137,145]: 135*it(133)+6*s(3887)+16*s(3888)+244*s(3889)+120*s(3890)+80*s(3891)+40*s(3892)+40*s(3893)+40*s(3894)+80*s(3895)+80*s(3896)+64*s(3897)+64*s(3898)+64*s(3899)+64*s(3900)+6*s(3913)+16*s(3914)+448*s(3915)+240*s(3916)+80*s(3917)+80*s(3918)+40*s(3919)+40*s(3920)+80*s(3921)+80*s(3922)+64*s(3923)+64*s(3924)+64*s(3925)+64*s(3926)+6*s(4116)+16*s(4117)+80*s(4118)+80*s(4119)+64*s(4120)+64*s(4121)+64*s(4122)+64*s(4123)+0
Unbounded itvars
it(133) :  it(133)
s(3887) :  sum(133),s(3806)
s(3888) :  sum(133),s(3807)
s(3889) :  sum(133),s(3808)
s(3890) :  sum(133),s(3817)
s(3891) :  sum(133),s(3818)
s(3892) :  sum(133),s(3819)
s(3893) :  sum(133),s(3820)
s(3894) :  sum(133),s(3821)
s(3895) :  sum(133),s(3822)
s(3896) :  sum(133),s(3823)
s(3897) :  sum(133),s(3824)
s(3898) :  sum(133),s(3825)
s(3899) :  sum(133),s(3826)
s(3900) :  sum(133),s(3827)
s(3913) :  sum(135),s(3865)
s(3914) :  sum(135),s(3866)
s(3915) :  sum(135),s(3867)
s(3916) :  sum(135),s(3871)
s(3917) :  sum(135),s(3872)
s(3918) :  sum(135),s(3878)
s(3919) :  sum(135),s(3879)
s(3920) :  sum(135),s(3880)
s(3921) :  sum(135),s(3881)
s(3922) :  sum(135),s(3882)
s(3923) :  sum(135),s(3883)
s(3924) :  sum(135),s(3884)
s(3925) :  sum(135),s(3885)
s(3926) :  sum(135),s(3886)
s(4116) :  sum([137,145]),s(4101)
s(4117) :  sum([137,145]),s(4109)
s(4118) :  sum([137,145]),s(4110)
s(4119) :  sum([137,145]),s(4111)
s(4120) :  sum([137,145]),s(4112)
s(4121) :  sum([137,145]),s(4113)
s(4122) :  sum([137,145]),s(4114)
s(4123) :  sum([137,145]),s(4115)

  with precondition: [E=1,F=0,B>=1,C>=0,D>=1,G>=0,A>=2*D+4,2*A+3*B>=6*D+15,A+B>=3*D+6] 

* Chain [[133,135],136,145]: 135*it(133)+6*s(3887)+16*s(3888)+244*s(3889)+120*s(3890)+80*s(3891)+40*s(3892)+40*s(3893)+40*s(3894)+80*s(3895)+80*s(3896)+64*s(3897)+64*s(3898)+64*s(3899)+64*s(3900)+6*s(3913)+16*s(3914)+448*s(3915)+240*s(3916)+80*s(3917)+80*s(3918)+40*s(3919)+40*s(3920)+80*s(3921)+80*s(3922)+64*s(3923)+64*s(3924)+64*s(3925)+64*s(3926)+6*s(4034)+16*s(4035)+80*s(4036)+80*s(4037)+64*s(4038)+64*s(4039)+64*s(4040)+64*s(4041)+0
Unbounded itvars
it(133) :  it(133)
s(3887) :  sum(133),s(3806)
s(3888) :  sum(133),s(3807)
s(3889) :  sum(133),s(3808)
s(3890) :  sum(133),s(3817)
s(3891) :  sum(133),s(3818)
s(3892) :  sum(133),s(3819)
s(3893) :  sum(133),s(3820)
s(3894) :  sum(133),s(3821)
s(3895) :  sum(133),s(3822)
s(3896) :  sum(133),s(3823)
s(3897) :  sum(133),s(3824)
s(3898) :  sum(133),s(3825)
s(3899) :  sum(133),s(3826)
s(3900) :  sum(133),s(3827)
s(3913) :  sum(135),s(3865)
s(3914) :  sum(135),s(3866)
s(3915) :  sum(135),s(3867)
s(3916) :  sum(135),s(3871)
s(3917) :  sum(135),s(3872)
s(3918) :  sum(135),s(3878)
s(3919) :  sum(135),s(3879)
s(3920) :  sum(135),s(3880)
s(3921) :  sum(135),s(3881)
s(3922) :  sum(135),s(3882)
s(3923) :  sum(135),s(3883)
s(3924) :  sum(135),s(3884)
s(3925) :  sum(135),s(3885)
s(3926) :  sum(135),s(3886)
s(4034) :  sum([136,145]),s(4019)
s(4035) :  sum([136,145]),s(4027)
s(4036) :  sum([136,145]),s(4028)
s(4037) :  sum([136,145]),s(4029)
s(4038) :  sum([136,145]),s(4030)
s(4039) :  sum([136,145]),s(4031)
s(4040) :  sum([136,145]),s(4032)
s(4041) :  sum([136,145]),s(4033)

  with precondition: [E=1,F=0,B>=1,C>=0,D>=1,G>=0,A>=2*D+3,B+2*A>=4*D+9] 

* Chain [[133,135],134,144]: 141*it(133)+6*s(3887)+16*s(3888)+244*s(3889)+120*s(3890)+80*s(3891)+40*s(3892)+40*s(3893)+40*s(3894)+80*s(3895)+80*s(3896)+64*s(3897)+64*s(3898)+64*s(3899)+64*s(3900)+6*s(3913)+16*s(3914)+448*s(3915)+240*s(3916)+80*s(3917)+80*s(3918)+40*s(3919)+40*s(3920)+80*s(3921)+80*s(3922)+64*s(3923)+64*s(3924)+64*s(3925)+64*s(3926)+6*s(4077)+16*s(4078)+528*s(4079)+240*s(4080)+80*s(4081)+80*s(4082)+40*s(4083)+40*s(4084)+80*s(4085)+64*s(4086)+64*s(4087)+64*s(4088)+64*s(4089)+0
Unbounded itvars
it(133) :  it(133)
s(3887) :  sum(133),s(3806)
s(3888) :  sum(133),s(3807)
s(3889) :  sum(133),s(3808)
s(3890) :  sum(133),s(3817)
s(3891) :  sum(133),s(3818)
s(3892) :  sum(133),s(3819)
s(3893) :  sum(133),s(3820)
s(3894) :  sum(133),s(3821)
s(3895) :  sum(133),s(3822)
s(3896) :  sum(133),s(3823)
s(3897) :  sum(133),s(3824)
s(3898) :  sum(133),s(3825)
s(3899) :  sum(133),s(3826)
s(3900) :  sum(133),s(3827)
s(3913) :  sum(135),s(3865)
s(3914) :  sum(135),s(3866)
s(3915) :  sum(135),s(3867)
s(3916) :  sum(135),s(3871)
s(3917) :  sum(135),s(3872)
s(3918) :  sum(135),s(3878)
s(3919) :  sum(135),s(3879)
s(3920) :  sum(135),s(3880)
s(3921) :  sum(135),s(3881)
s(3922) :  sum(135),s(3882)
s(3923) :  sum(135),s(3883)
s(3924) :  sum(135),s(3884)
s(3925) :  sum(135),s(3885)
s(3926) :  sum(135),s(3886)
s(4077) :  sum([134,144]),s(4048)
s(4078) :  sum([134,144]),s(4056)
s(4079) :  sum([134,144]),s(4057)
s(4080) :  sum([134,144]),s(4061)
s(4081) :  sum([134,144]),s(4062)
s(4082) :  sum([134,144]),s(4068)
s(4083) :  sum([134,144]),s(4069)
s(4084) :  sum([134,144]),s(4070)
s(4085) :  sum([134,144]),s(4071)
s(4086) :  sum([134,144]),s(4072)
s(4087) :  sum([134,144]),s(4073)
s(4088) :  sum([134,144]),s(4074)
s(4089) :  sum([134,144]),s(4075)

  with precondition: [B>=1,C>=0,D>=1,E>=2,F>=1,G>=0,A>=2*D+3,B+2*A>=4*D+9] 

* Chain [[132]]...: 1045*it(132)+0
Unbounded itvars
it(132) :  it(132)

  with precondition: [D>=1,2*D+2>=A,A>=D+2,B>=D+2,C>=0,E>=0,F>=0,G>=0] 

* Chain [[132],144]: 1045*it(132)+6*s(4018)+6
  Such that:s(4018) =< E

Unbounded itvars
it(132) :  it(132)

  with precondition: [C>=0,D>=1,E>=3,G>=0,2*D+2>=A,A>=D+2,B>=D+2,F>=D+2,F>=E] 

* Chain [[132],136,145]: 43*it(132)+49*it([136,145])+6*s(3994)+16*s(3995)+324*s(3996)+120*s(3997)+80*s(3998)+40*s(3999)+40*s(4000)+40*s(4001)+80*s(4002)+64*s(4003)+64*s(4004)+64*s(4005)+64*s(4006)+6*s(4034)+16*s(4035)+80*s(4036)+80*s(4037)+64*s(4038)+64*s(4039)+64*s(4040)+64*s(4041)+0
  Such that:it([136,145]) =< 1

Unbounded itvars
it(132) :  it(132)
s(3994) :  sum(132),s(3973)
s(3995) :  sum(132),s(3974)
s(3996) :  sum(132),s(3975)
s(3997) :  sum(132),s(3984)
s(3998) :  sum(132),s(3985)
s(3999) :  sum(132),s(3986)
s(4000) :  sum(132),s(3987)
s(4001) :  sum(132),s(3988)
s(4002) :  sum(132),s(3989)
s(4003) :  sum(132),s(3990)
s(4004) :  sum(132),s(3991)
s(4005) :  sum(132),s(3992)
s(4006) :  sum(132),s(3993)
s(4034) :  sum([136,145]),s(4019)
s(4035) :  sum([136,145]),s(4027)
s(4036) :  sum([136,145]),s(4028)
s(4037) :  sum([136,145]),s(4029)
s(4038) :  sum([136,145]),s(4030)
s(4039) :  sum([136,145]),s(4031)
s(4040) :  sum([136,145]),s(4032)
s(4041) :  sum([136,145]),s(4033)

  with precondition: [E=1,F=0,C>=0,D>=1,G>=0,2*D+2>=A,A>=D+2,B>=D+2] 

* Chain [[132],134,144]: 43*it(132)+49*it([134,144])+6*s(3994)+16*s(3995)+324*s(3996)+120*s(3997)+80*s(3998)+40*s(3999)+40*s(4000)+40*s(4001)+80*s(4002)+64*s(4003)+64*s(4004)+64*s(4005)+64*s(4006)+6*s(4076)+6*s(4077)+16*s(4078)+528*s(4079)+240*s(4080)+80*s(4081)+80*s(4082)+40*s(4083)+40*s(4084)+80*s(4085)+64*s(4086)+64*s(4087)+64*s(4088)+64*s(4089)+0
  Such that:it([134,144]) =< 1

Unbounded itvars
it(132) :  it(132)
s(3994) :  sum(132),s(3973)
s(3995) :  sum(132),s(3974)
s(3996) :  sum(132),s(3975)
s(3997) :  sum(132),s(3984)
s(3998) :  sum(132),s(3985)
s(3999) :  sum(132),s(3986)
s(4000) :  sum(132),s(3987)
s(4001) :  sum(132),s(3988)
s(4002) :  sum(132),s(3989)
s(4003) :  sum(132),s(3990)
s(4004) :  sum(132),s(3991)
s(4005) :  sum(132),s(3992)
s(4006) :  sum(132),s(3993)
s(4076) :  sum([134,144]),s(4018)
s(4077) :  sum([134,144]),s(4048)
s(4078) :  sum([134,144]),s(4056)
s(4079) :  sum([134,144]),s(4057)
s(4080) :  sum([134,144]),s(4061)
s(4081) :  sum([134,144]),s(4062)
s(4082) :  sum([134,144]),s(4068)
s(4083) :  sum([134,144]),s(4069)
s(4084) :  sum([134,144]),s(4070)
s(4085) :  sum([134,144]),s(4071)
s(4086) :  sum([134,144]),s(4072)
s(4087) :  sum([134,144]),s(4073)
s(4088) :  sum([134,144]),s(4074)
s(4089) :  sum([134,144]),s(4075)

  with precondition: [C>=0,D>=1,E>=2,F>=1,G>=0,2*D+2>=A,A>=D+2,B>=D+2] 

* Chain [145]: 6
  with precondition: [A=1,B=0,E=1,F=0,C=G,C>=0,D>=0] 

* Chain [144]: 6*s(4018)+6
  Such that:s(4018) =< A

  with precondition: [A=E,B=F,C=G,A>=2,B>=1,C>=0,D+1>=A] 

* Chain [143,145]: 6*s(4130)+80*s(4135)+80*s(4136)+128*s(4137)+128*s(4138)+49
  Such that:aux(1129) =< 1
s(4132) =< 2
s(4133) =< B
s(4134) =< 2*B
s(4130) =< aux(1129)
s(4135) =< s(4132)
s(4136) =< s(4132)
s(4135) =< s(4133)
s(4137) =< s(4132)
s(4138) =< s(4132)
s(4137) =< aux(1129)
s(4138) =< aux(1129)
s(4137) =< s(4133)
s(4137) =< s(4134)

  with precondition: [A=2,D=0,E=1,F=0,B>=1,C>=0,G>=0] 

* Chain [142,144]: 534*s(4018)+6*s(4139)+240*s(4148)+80*s(4149)+80*s(4150)+128*s(4151)+128*s(4152)+49
  Such that:aux(1130) =< 1
s(4142) =< B
s(4143) =< 2*B
aux(1131) =< 2
s(4018) =< aux(1131)
s(4139) =< aux(1130)
s(4145) =< s(4142)
s(4146) =< s(4018)*s(4142)
s(4147) =< s(4018)*s(4145)
s(4148) =< s(4147)
s(4149) =< s(4146)
s(4150) =< aux(1131)
s(4150) =< s(4142)
s(4151) =< aux(1131)
s(4152) =< aux(1131)
s(4151) =< aux(1130)
s(4152) =< aux(1130)
s(4151) =< s(4142)
s(4151) =< s(4143)

  with precondition: [A=2,D=0,E=2,B>=1,C>=0,F>=1,G>=0] 

* Chain [141,[132]]...: 1045*it(132)+6*s(4153)+324*s(4158)+120*s(4162)+40*s(4163)+80*s(4164)+128*s(4165)+128*s(4166)+43
  Such that:aux(1132) =< 1
s(4155) =< 2
s(4156) =< B
s(4157) =< 2*B
s(4153) =< aux(1132)
s(4158) =< s(4155)
s(4159) =< s(4156)
s(4160) =< s(4158)*s(4156)
s(4161) =< s(4158)*s(4159)
s(4162) =< s(4161)
s(4163) =< s(4160)
s(4164) =< s(4155)
s(4164) =< s(4156)
s(4165) =< s(4155)
s(4166) =< s(4155)
s(4165) =< aux(1132)
s(4166) =< aux(1132)
s(4165) =< s(4156)
s(4165) =< s(4157)

Unbounded itvars
it(132) :  it(132)

  with precondition: [A=2,D=0,B>=2,C>=0,E>=0,F>=0,G>=0] 

* Chain [141,[132],144]: 1045*it(132)+6*s(4018)+6*s(4153)+324*s(4158)+120*s(4162)+40*s(4163)+80*s(4164)+128*s(4165)+128*s(4166)+49
  Such that:aux(1132) =< 1
s(4155) =< 2
s(4156) =< B
s(4157) =< 2*B
s(4018) =< E
s(4153) =< aux(1132)
s(4158) =< s(4155)
s(4159) =< s(4156)
s(4160) =< s(4158)*s(4156)
s(4161) =< s(4158)*s(4159)
s(4162) =< s(4161)
s(4163) =< s(4160)
s(4164) =< s(4155)
s(4164) =< s(4156)
s(4165) =< s(4155)
s(4166) =< s(4155)
s(4165) =< aux(1132)
s(4166) =< aux(1132)
s(4165) =< s(4156)
s(4165) =< s(4157)

Unbounded itvars
it(132) :  it(132)

  with precondition: [A=2,D=0,B>=2,C>=0,E>=3,G>=0,F>=E] 

* Chain [141,[132],136,145]: 1483*it(132)+55*it([136,145])+324*s(4158)+120*s(4162)+40*s(4163)+80*s(4164)+128*s(4165)+128*s(4166)+43
  Such that:s(4155) =< 2
s(4156) =< B
s(4157) =< 2*B
aux(1133) =< 1
it([136,145]) =< aux(1133)
s(4158) =< s(4155)
s(4159) =< s(4156)
s(4160) =< s(4158)*s(4156)
s(4161) =< s(4158)*s(4159)
s(4162) =< s(4161)
s(4163) =< s(4160)
s(4164) =< s(4155)
s(4164) =< s(4156)
s(4165) =< s(4155)
s(4166) =< s(4155)
s(4165) =< aux(1133)
s(4166) =< aux(1133)
s(4165) =< s(4156)
s(4165) =< s(4157)

Unbounded itvars
it(132) :  it(132)

  with precondition: [A=2,D=0,E=1,F=0,B>=2,C>=0,G>=0] 

* Chain [141,[132],134,144]: 2417*it(132)+55*it([134,144])+324*s(4158)+120*s(4162)+40*s(4163)+80*s(4164)+128*s(4165)+128*s(4166)+43
  Such that:s(4155) =< 2
s(4156) =< B
s(4157) =< 2*B
aux(1134) =< 1
it([134,144]) =< aux(1134)
s(4158) =< s(4155)
s(4159) =< s(4156)
s(4160) =< s(4158)*s(4156)
s(4161) =< s(4158)*s(4159)
s(4162) =< s(4161)
s(4163) =< s(4160)
s(4164) =< s(4155)
s(4164) =< s(4156)
s(4165) =< s(4155)
s(4166) =< s(4155)
s(4165) =< aux(1134)
s(4166) =< aux(1134)
s(4165) =< s(4156)
s(4165) =< s(4157)

Unbounded itvars
it(132) :  it(132)

  with precondition: [A=2,D=0,B>=2,C>=0,E>=2,F>=1,G>=0] 

* Chain [141,136,145]: 86*s(4019)+340*s(4027)+80*s(4028)+64*s(4030)+64*s(4031)+64*s(4032)+64*s(4033)+6*s(4153)+120*s(4162)+40*s(4163)+80*s(4164)+128*s(4165)+128*s(4166)+92
  Such that:aux(1132) =< 1
s(4020) =< 4
s(4156) =< B
s(4157) =< 2*B
aux(1135) =< 2
aux(1136) =< 3
s(4019) =< aux(1136)
s(4027) =< aux(1135)
s(4028) =< aux(1136)
s(4030) =< aux(1136)
s(4031) =< aux(1136)
s(4030) =< aux(1135)
s(4031) =< aux(1135)
s(4030) =< s(4020)
s(4031) =< s(4020)
s(4032) =< aux(1136)
s(4033) =< aux(1136)
s(4032) =< aux(1135)
s(4033) =< aux(1135)
s(4153) =< aux(1132)
s(4159) =< s(4156)
s(4160) =< s(4027)*s(4156)
s(4161) =< s(4027)*s(4159)
s(4162) =< s(4161)
s(4163) =< s(4160)
s(4164) =< aux(1135)
s(4164) =< s(4156)
s(4165) =< aux(1135)
s(4166) =< aux(1135)
s(4165) =< aux(1132)
s(4166) =< aux(1132)
s(4165) =< s(4156)
s(4165) =< s(4157)

  with precondition: [A=2,D=0,E=1,F=0,B>=2,C>=0,G>=0] 

* Chain [141,134,144]: 6*s(4018)+534*s(4048)+340*s(4056)+240*s(4061)+80*s(4062)+80*s(4068)+40*s(4069)+40*s(4070)+80*s(4071)+64*s(4072)+64*s(4073)+64*s(4074)+64*s(4075)+6*s(4153)+120*s(4162)+40*s(4163)+80*s(4164)+128*s(4165)+128*s(4166)+92
  Such that:aux(1132) =< 1
s(4049) =< 4
s(4156) =< B
s(4157) =< 2*B
s(4018) =< E
aux(1137) =< 2
aux(1138) =< 3
s(4048) =< aux(1138)
s(4056) =< aux(1137)
s(4063) =< aux(1137)
s(4064) =< aux(1137)
s(4065) =< s(4048)*aux(1137)
s(4066) =< s(4048)*s(4063)
s(4067) =< s(4048)*s(4064)
s(4068) =< s(4066)
s(4069) =< s(4067)
s(4070) =< s(4065)
s(4071) =< aux(1138)
s(4072) =< aux(1138)
s(4073) =< aux(1138)
s(4072) =< aux(1137)
s(4073) =< aux(1137)
s(4072) =< s(4049)
s(4073) =< s(4049)
s(4074) =< aux(1138)
s(4075) =< aux(1138)
s(4074) =< aux(1137)
s(4075) =< aux(1137)
s(4153) =< aux(1132)
s(4159) =< s(4156)
s(4160) =< s(4056)*s(4156)
s(4161) =< s(4056)*s(4159)
s(4162) =< s(4161)
s(4163) =< s(4160)
s(4164) =< aux(1137)
s(4164) =< s(4156)
s(4165) =< aux(1137)
s(4166) =< aux(1137)
s(4165) =< aux(1132)
s(4166) =< aux(1132)
s(4165) =< s(4156)
s(4165) =< s(4157)

Unbounded itvars
s(4061) :  eq(161,2),s(1213)
s(4062) :  eq(161,2),s(1215)

  with precondition: [A=2,D=0,3>=E,B>=2,C>=0,E>=2,F>=1,G>=0] 

* Chain [140,145]: 6*s(4167)+80*s(4173)+80*s(4174)+64*s(4175)+64*s(4176)+64*s(4177)+64*s(4178)+49
  Such that:s(4168) =< 1
s(4169) =< 2
aux(1139) =< A
s(4171) =< B
s(4172) =< 2*B
s(4167) =< aux(1139)
s(4173) =< s(4169)
s(4174) =< s(4169)
s(4173) =< s(4171)
s(4175) =< aux(1139)
s(4176) =< aux(1139)
s(4175) =< s(4168)
s(4176) =< s(4168)
s(4175) =< s(4171)
s(4175) =< s(4172)
s(4175) =< s(4169)
s(4176) =< s(4169)
s(4177) =< aux(1139)
s(4178) =< aux(1139)
s(4177) =< s(4168)
s(4178) =< s(4168)
s(4177) =< s(4171)
s(4177) =< s(4172)

  with precondition: [D=0,E=1,F=0,A>=3,B>=1,C>=0,G>=0] 

* Chain [139,[133,135]]...: 2454*it(133)+454*s(4179)+240*s(4189)+80*s(4190)+80*s(4191)+80*s(4192)+64*s(4193)+64*s(4194)+64*s(4195)+64*s(4196)+43
  Such that:s(4180) =< 1
s(4181) =< 2
aux(1140) =< A
s(4183) =< B
s(4184) =< 2*B
s(4179) =< aux(1140)
s(4186) =< s(4183)
s(4187) =< s(4179)*s(4183)
s(4188) =< s(4179)*s(4186)
s(4189) =< s(4188)
s(4190) =< s(4187)
s(4191) =< s(4181)
s(4192) =< s(4181)
s(4191) =< s(4183)
s(4193) =< aux(1140)
s(4194) =< aux(1140)
s(4193) =< s(4180)
s(4194) =< s(4180)
s(4193) =< s(4183)
s(4193) =< s(4184)
s(4193) =< s(4181)
s(4194) =< s(4181)
s(4195) =< aux(1140)
s(4196) =< aux(1140)
s(4195) =< s(4180)
s(4196) =< s(4180)
s(4195) =< s(4183)
s(4195) =< s(4184)

Unbounded itvars
it(133) :  it(133)

  with precondition: [D=0,A>=6,B>=1,C>=0,E>=0,F>=0,G>=0] 

* Chain [139,[133,135],[132]]...: 3499*it(132)+454*s(4179)+240*s(4189)+80*s(4190)+80*s(4191)+80*s(4192)+64*s(4193)+64*s(4194)+64*s(4195)+64*s(4196)+43
  Such that:s(4180) =< 1
s(4181) =< 2
aux(1140) =< A
s(4183) =< B
s(4184) =< 2*B
s(4179) =< aux(1140)
s(4186) =< s(4183)
s(4187) =< s(4179)*s(4183)
s(4188) =< s(4179)*s(4186)
s(4189) =< s(4188)
s(4190) =< s(4187)
s(4191) =< s(4181)
s(4192) =< s(4181)
s(4191) =< s(4183)
s(4193) =< aux(1140)
s(4194) =< aux(1140)
s(4193) =< s(4180)
s(4194) =< s(4180)
s(4193) =< s(4183)
s(4193) =< s(4184)
s(4193) =< s(4181)
s(4194) =< s(4181)
s(4195) =< aux(1140)
s(4196) =< aux(1140)
s(4195) =< s(4180)
s(4196) =< s(4180)
s(4195) =< s(4183)
s(4195) =< s(4184)

Unbounded itvars
it(132) :  it(132)

  with precondition: [D=0,A>=6,B>=1,C>=0,E>=0,F>=0,G>=0] 

* Chain [139,[133,135],[132],144]: 3499*it(132)+6*s(4018)+454*s(4179)+240*s(4189)+80*s(4190)+80*s(4191)+80*s(4192)+64*s(4193)+64*s(4194)+64*s(4195)+64*s(4196)+49
  Such that:s(4180) =< 1
s(4181) =< 2
aux(1140) =< A
s(4183) =< B
s(4184) =< 2*B
s(4018) =< E
s(4179) =< aux(1140)
s(4186) =< s(4183)
s(4187) =< s(4179)*s(4183)
s(4188) =< s(4179)*s(4186)
s(4189) =< s(4188)
s(4190) =< s(4187)
s(4191) =< s(4181)
s(4192) =< s(4181)
s(4191) =< s(4183)
s(4193) =< aux(1140)
s(4194) =< aux(1140)
s(4193) =< s(4180)
s(4194) =< s(4180)
s(4193) =< s(4183)
s(4193) =< s(4184)
s(4193) =< s(4181)
s(4194) =< s(4181)
s(4195) =< aux(1140)
s(4196) =< aux(1140)
s(4195) =< s(4180)
s(4196) =< s(4180)
s(4195) =< s(4183)
s(4195) =< s(4184)

Unbounded itvars
it(132) :  it(132)

  with precondition: [D=0,A>=6,B>=1,C>=0,E>=3,F>=4,G>=0,F>=E] 

* Chain [139,[133,135],[132],136,145]: 3937*it(132)+49*it([136,145])+454*s(4179)+240*s(4189)+80*s(4190)+80*s(4191)+80*s(4192)+64*s(4193)+64*s(4194)+64*s(4195)+64*s(4196)+43
  Such that:s(4181) =< 2
aux(1140) =< A
s(4183) =< B
s(4184) =< 2*B
aux(1141) =< 1
it([136,145]) =< aux(1141)
s(4179) =< aux(1140)
s(4186) =< s(4183)
s(4187) =< s(4179)*s(4183)
s(4188) =< s(4179)*s(4186)
s(4189) =< s(4188)
s(4190) =< s(4187)
s(4191) =< s(4181)
s(4192) =< s(4181)
s(4191) =< s(4183)
s(4193) =< aux(1140)
s(4194) =< aux(1140)
s(4193) =< aux(1141)
s(4194) =< aux(1141)
s(4193) =< s(4183)
s(4193) =< s(4184)
s(4193) =< s(4181)
s(4194) =< s(4181)
s(4195) =< aux(1140)
s(4196) =< aux(1140)
s(4195) =< aux(1141)
s(4196) =< aux(1141)
s(4195) =< s(4183)
s(4195) =< s(4184)

Unbounded itvars
it(132) :  it(132)

  with precondition: [D=0,E=1,F=0,A>=6,B>=1,C>=0,G>=0] 

* Chain [139,[133,135],[132],134,144]: 4871*it(132)+49*it([134,144])+454*s(4179)+240*s(4189)+80*s(4190)+80*s(4191)+80*s(4192)+64*s(4193)+64*s(4194)+64*s(4195)+64*s(4196)+43
  Such that:s(4181) =< 2
aux(1140) =< A
s(4183) =< B
s(4184) =< 2*B
aux(1142) =< 1
it([134,144]) =< aux(1142)
s(4179) =< aux(1140)
s(4186) =< s(4183)
s(4187) =< s(4179)*s(4183)
s(4188) =< s(4179)*s(4186)
s(4189) =< s(4188)
s(4190) =< s(4187)
s(4191) =< s(4181)
s(4192) =< s(4181)
s(4191) =< s(4183)
s(4193) =< aux(1140)
s(4194) =< aux(1140)
s(4193) =< aux(1142)
s(4194) =< aux(1142)
s(4193) =< s(4183)
s(4193) =< s(4184)
s(4193) =< s(4181)
s(4194) =< s(4181)
s(4195) =< aux(1140)
s(4196) =< aux(1140)
s(4195) =< aux(1142)
s(4196) =< aux(1142)
s(4195) =< s(4183)
s(4195) =< s(4184)

Unbounded itvars
it(132) :  it(132)

  with precondition: [D=0,A>=6,B>=1,C>=0,E>=2,F>=1,G>=0] 

* Chain [139,[133,135],144]: 2454*it(133)+6*s(4018)+454*s(4179)+240*s(4189)+80*s(4190)+80*s(4191)+80*s(4192)+64*s(4193)+64*s(4194)+64*s(4195)+64*s(4196)+49
  Such that:s(4180) =< 1
s(4181) =< 2
aux(1140) =< A
s(4183) =< B
s(4184) =< 2*B
s(4018) =< E
s(4179) =< aux(1140)
s(4186) =< s(4183)
s(4187) =< s(4179)*s(4183)
s(4188) =< s(4179)*s(4186)
s(4189) =< s(4188)
s(4190) =< s(4187)
s(4191) =< s(4181)
s(4192) =< s(4181)
s(4191) =< s(4183)
s(4193) =< aux(1140)
s(4194) =< aux(1140)
s(4193) =< s(4180)
s(4194) =< s(4180)
s(4193) =< s(4183)
s(4193) =< s(4184)
s(4193) =< s(4181)
s(4194) =< s(4181)
s(4195) =< aux(1140)
s(4196) =< aux(1140)
s(4195) =< s(4180)
s(4196) =< s(4180)
s(4195) =< s(4183)
s(4195) =< s(4184)

Unbounded itvars
it(133) :  it(133)

  with precondition: [D=0,A>=6,B>=1,C>=0,E>=2,F>=1,G>=0] 

* Chain [139,[133,135],137,145]: 2941*it(133)+454*s(4179)+240*s(4189)+80*s(4190)+80*s(4191)+80*s(4192)+64*s(4193)+64*s(4194)+64*s(4195)+64*s(4196)+43
  Such that:s(4180) =< 1
s(4181) =< 2
aux(1140) =< A
s(4183) =< B
s(4184) =< 2*B
s(4179) =< aux(1140)
s(4186) =< s(4183)
s(4187) =< s(4179)*s(4183)
s(4188) =< s(4179)*s(4186)
s(4189) =< s(4188)
s(4190) =< s(4187)
s(4191) =< s(4181)
s(4192) =< s(4181)
s(4191) =< s(4183)
s(4193) =< aux(1140)
s(4194) =< aux(1140)
s(4193) =< s(4180)
s(4194) =< s(4180)
s(4193) =< s(4183)
s(4193) =< s(4184)
s(4193) =< s(4181)
s(4194) =< s(4181)
s(4195) =< aux(1140)
s(4196) =< aux(1140)
s(4195) =< s(4180)
s(4196) =< s(4180)
s(4195) =< s(4183)
s(4195) =< s(4184)

Unbounded itvars
it(133) :  it(133)

  with precondition: [D=0,E=1,F=0,A>=7,B>=1,C>=0,G>=0] 

* Chain [139,[133,135],136,145]: 2941*it(133)+454*s(4179)+240*s(4189)+80*s(4190)+80*s(4191)+80*s(4192)+64*s(4193)+64*s(4194)+64*s(4195)+64*s(4196)+43
  Such that:s(4180) =< 1
s(4181) =< 2
aux(1140) =< A
s(4183) =< B
s(4184) =< 2*B
s(4179) =< aux(1140)
s(4186) =< s(4183)
s(4187) =< s(4179)*s(4183)
s(4188) =< s(4179)*s(4186)
s(4189) =< s(4188)
s(4190) =< s(4187)
s(4191) =< s(4181)
s(4192) =< s(4181)
s(4191) =< s(4183)
s(4193) =< aux(1140)
s(4194) =< aux(1140)
s(4193) =< s(4180)
s(4194) =< s(4180)
s(4193) =< s(4183)
s(4193) =< s(4184)
s(4193) =< s(4181)
s(4194) =< s(4181)
s(4195) =< aux(1140)
s(4196) =< aux(1140)
s(4195) =< s(4180)
s(4196) =< s(4180)
s(4195) =< s(4183)
s(4195) =< s(4184)

Unbounded itvars
it(133) :  it(133)

  with precondition: [D=0,E=1,F=0,A>=6,B>=1,C>=0,G>=0] 

* Chain [139,[133,135],134,144]: 3875*it(133)+454*s(4179)+240*s(4189)+80*s(4190)+80*s(4191)+80*s(4192)+64*s(4193)+64*s(4194)+64*s(4195)+64*s(4196)+43
  Such that:s(4180) =< 1
s(4181) =< 2
aux(1140) =< A
s(4183) =< B
s(4184) =< 2*B
s(4179) =< aux(1140)
s(4186) =< s(4183)
s(4187) =< s(4179)*s(4183)
s(4188) =< s(4179)*s(4186)
s(4189) =< s(4188)
s(4190) =< s(4187)
s(4191) =< s(4181)
s(4192) =< s(4181)
s(4191) =< s(4183)
s(4193) =< aux(1140)
s(4194) =< aux(1140)
s(4193) =< s(4180)
s(4194) =< s(4180)
s(4193) =< s(4183)
s(4193) =< s(4184)
s(4193) =< s(4181)
s(4194) =< s(4181)
s(4195) =< aux(1140)
s(4196) =< aux(1140)
s(4195) =< s(4180)
s(4196) =< s(4180)
s(4195) =< s(4183)
s(4195) =< s(4184)

Unbounded itvars
it(133) :  it(133)

  with precondition: [D=0,A>=6,B>=1,C>=0,E>=2,F>=1,G>=0] 

* Chain [139,[132]]...: 1045*it(132)+454*s(4179)+240*s(4189)+80*s(4190)+80*s(4191)+80*s(4192)+64*s(4193)+64*s(4194)+64*s(4195)+64*s(4196)+43
  Such that:s(4180) =< 1
s(4181) =< 2
aux(1140) =< A
s(4183) =< B
s(4184) =< 2*B
s(4179) =< aux(1140)
s(4186) =< s(4183)
s(4187) =< s(4179)*s(4183)
s(4188) =< s(4179)*s(4186)
s(4189) =< s(4188)
s(4190) =< s(4187)
s(4191) =< s(4181)
s(4192) =< s(4181)
s(4191) =< s(4183)
s(4193) =< aux(1140)
s(4194) =< aux(1140)
s(4193) =< s(4180)
s(4194) =< s(4180)
s(4193) =< s(4183)
s(4193) =< s(4184)
s(4193) =< s(4181)
s(4194) =< s(4181)
s(4195) =< aux(1140)
s(4196) =< aux(1140)
s(4195) =< s(4180)
s(4196) =< s(4180)
s(4195) =< s(4183)
s(4195) =< s(4184)

Unbounded itvars
it(132) :  it(132)

  with precondition: [D=0,A>=4,B>=1,C>=0,E>=0,F>=0,G>=0] 

* Chain [139,[132],144]: 1045*it(132)+6*s(4018)+454*s(4179)+240*s(4189)+80*s(4190)+80*s(4191)+80*s(4192)+64*s(4193)+64*s(4194)+64*s(4195)+64*s(4196)+49
  Such that:s(4180) =< 1
s(4181) =< 2
aux(1140) =< A
s(4183) =< B
s(4184) =< 2*B
s(4018) =< E
s(4179) =< aux(1140)
s(4186) =< s(4183)
s(4187) =< s(4179)*s(4183)
s(4188) =< s(4179)*s(4186)
s(4189) =< s(4188)
s(4190) =< s(4187)
s(4191) =< s(4181)
s(4192) =< s(4181)
s(4191) =< s(4183)
s(4193) =< aux(1140)
s(4194) =< aux(1140)
s(4193) =< s(4180)
s(4194) =< s(4180)
s(4193) =< s(4183)
s(4193) =< s(4184)
s(4193) =< s(4181)
s(4194) =< s(4181)
s(4195) =< aux(1140)
s(4196) =< aux(1140)
s(4195) =< s(4180)
s(4196) =< s(4180)
s(4195) =< s(4183)
s(4195) =< s(4184)

Unbounded itvars
it(132) :  it(132)

  with precondition: [D=0,A>=4,B>=1,C>=0,E>=3,G>=0,F>=E] 

* Chain [139,[132],136,145]: 1483*it(132)+49*it([136,145])+454*s(4179)+240*s(4189)+80*s(4190)+80*s(4191)+80*s(4192)+64*s(4193)+64*s(4194)+64*s(4195)+64*s(4196)+43
  Such that:s(4181) =< 2
aux(1140) =< A
s(4183) =< B
s(4184) =< 2*B
aux(1143) =< 1
it([136,145]) =< aux(1143)
s(4179) =< aux(1140)
s(4186) =< s(4183)
s(4187) =< s(4179)*s(4183)
s(4188) =< s(4179)*s(4186)
s(4189) =< s(4188)
s(4190) =< s(4187)
s(4191) =< s(4181)
s(4192) =< s(4181)
s(4191) =< s(4183)
s(4193) =< aux(1140)
s(4194) =< aux(1140)
s(4193) =< aux(1143)
s(4194) =< aux(1143)
s(4193) =< s(4183)
s(4193) =< s(4184)
s(4193) =< s(4181)
s(4194) =< s(4181)
s(4195) =< aux(1140)
s(4196) =< aux(1140)
s(4195) =< aux(1143)
s(4196) =< aux(1143)
s(4195) =< s(4183)
s(4195) =< s(4184)

Unbounded itvars
it(132) :  it(132)

  with precondition: [D=0,E=1,F=0,A>=4,B>=1,C>=0,G>=0] 

* Chain [139,[132],134,144]: 2417*it(132)+49*it([134,144])+454*s(4179)+240*s(4189)+80*s(4190)+80*s(4191)+80*s(4192)+64*s(4193)+64*s(4194)+64*s(4195)+64*s(4196)+43
  Such that:s(4181) =< 2
aux(1140) =< A
s(4183) =< B
s(4184) =< 2*B
aux(1144) =< 1
it([134,144]) =< aux(1144)
s(4179) =< aux(1140)
s(4186) =< s(4183)
s(4187) =< s(4179)*s(4183)
s(4188) =< s(4179)*s(4186)
s(4189) =< s(4188)
s(4190) =< s(4187)
s(4191) =< s(4181)
s(4192) =< s(4181)
s(4191) =< s(4183)
s(4193) =< aux(1140)
s(4194) =< aux(1140)
s(4193) =< aux(1144)
s(4194) =< aux(1144)
s(4193) =< s(4183)
s(4193) =< s(4184)
s(4193) =< s(4181)
s(4194) =< s(4181)
s(4195) =< aux(1140)
s(4196) =< aux(1140)
s(4195) =< aux(1144)
s(4196) =< aux(1144)
s(4195) =< s(4183)
s(4195) =< s(4184)

Unbounded itvars
it(132) :  it(132)

  with precondition: [D=0,A>=4,B>=1,C>=0,E>=2,F>=1,G>=0] 

* Chain [139,144]: 86*s(4018)+454*s(4179)+240*s(4189)+80*s(4190)+80*s(4191)+64*s(4193)+64*s(4194)+64*s(4195)+64*s(4196)+49
  Such that:s(4180) =< 1
aux(1140) =< A
s(4183) =< B
s(4184) =< 2*B
aux(1145) =< 2
s(4018) =< aux(1145)
s(4179) =< aux(1140)
s(4186) =< s(4183)
s(4187) =< s(4179)*s(4183)
s(4188) =< s(4179)*s(4186)
s(4189) =< s(4188)
s(4190) =< s(4187)
s(4191) =< aux(1145)
s(4191) =< s(4183)
s(4193) =< aux(1140)
s(4194) =< aux(1140)
s(4193) =< s(4180)
s(4194) =< s(4180)
s(4193) =< s(4183)
s(4193) =< s(4184)
s(4193) =< aux(1145)
s(4194) =< aux(1145)
s(4195) =< aux(1140)
s(4196) =< aux(1140)
s(4195) =< s(4180)
s(4196) =< s(4180)
s(4195) =< s(4183)
s(4195) =< s(4184)

  with precondition: [D=0,E=2,A>=3,B>=1,C>=0,F>=1,G>=0] 

* Chain [139,137,145]: 460*s(4101)+96*s(4109)+80*s(4110)+80*s(4111)+64*s(4112)+64*s(4113)+64*s(4114)+64*s(4115)+240*s(4189)+80*s(4190)+80*s(4191)+64*s(4193)+64*s(4194)+64*s(4195)+64*s(4196)+92
  Such that:s(4180) =< 1
s(4108) =< 3
s(4102) =< 4
s(4183) =< B
s(4184) =< 2*B
aux(1146) =< 2
aux(1147) =< A
s(4101) =< aux(1147)
s(4109) =< aux(1146)
s(4110) =< s(4108)
s(4111) =< s(4108)
s(4112) =< aux(1147)
s(4113) =< aux(1147)
s(4112) =< aux(1146)
s(4113) =< aux(1146)
s(4112) =< s(4102)
s(4113) =< s(4102)
s(4114) =< aux(1147)
s(4115) =< aux(1147)
s(4114) =< aux(1146)
s(4115) =< aux(1146)
s(4186) =< s(4183)
s(4187) =< s(4101)*s(4183)
s(4188) =< s(4101)*s(4186)
s(4189) =< s(4188)
s(4190) =< s(4187)
s(4191) =< aux(1146)
s(4191) =< s(4183)
s(4193) =< aux(1147)
s(4194) =< aux(1147)
s(4193) =< s(4180)
s(4194) =< s(4180)
s(4193) =< s(4183)
s(4193) =< s(4184)
s(4193) =< aux(1146)
s(4194) =< aux(1146)
s(4195) =< aux(1147)
s(4196) =< aux(1147)
s(4195) =< s(4180)
s(4196) =< s(4180)
s(4195) =< s(4183)
s(4195) =< s(4184)

  with precondition: [D=0,E=1,F=0,A>=6,B>=1,C>=0,G>=0] 

* Chain [139,136,145]: 6*s(4019)+96*s(4027)+80*s(4028)+80*s(4029)+64*s(4030)+64*s(4031)+64*s(4032)+64*s(4033)+454*s(4179)+240*s(4189)+80*s(4190)+80*s(4191)+64*s(4193)+64*s(4194)+64*s(4195)+64*s(4196)+92
  Such that:s(4180) =< 1
s(4026) =< 3
s(4183) =< B
s(4184) =< 2*B
aux(1148) =< 2
aux(1149) =< 4
aux(1150) =< A
aux(813) =< aux(1149)
aux(813) =< aux(1150)
s(4019) =< aux(813)
s(4027) =< aux(1148)
s(4028) =< s(4026)
s(4029) =< s(4026)
s(4030) =< aux(813)
s(4031) =< aux(813)
s(4030) =< aux(1148)
s(4031) =< aux(1148)
s(4030) =< aux(1149)
s(4031) =< aux(1149)
s(4032) =< aux(813)
s(4033) =< aux(813)
s(4032) =< aux(1148)
s(4033) =< aux(1148)
s(4179) =< aux(1150)
s(4186) =< s(4183)
s(4187) =< s(4179)*s(4183)
s(4188) =< s(4179)*s(4186)
s(4189) =< s(4188)
s(4190) =< s(4187)
s(4191) =< aux(1148)
s(4191) =< s(4183)
s(4193) =< aux(1150)
s(4194) =< aux(1150)
s(4193) =< s(4180)
s(4194) =< s(4180)
s(4193) =< s(4183)
s(4193) =< s(4184)
s(4193) =< aux(1148)
s(4194) =< aux(1148)
s(4195) =< aux(1150)
s(4196) =< aux(1150)
s(4195) =< s(4180)
s(4196) =< s(4180)
s(4195) =< s(4183)
s(4195) =< s(4184)

  with precondition: [D=0,E=1,F=0,A>=4,B>=1,C>=0,G>=0] 

* Chain [139,134,144]: 6*s(4018)+6*s(4048)+96*s(4056)+528*s(4057)+240*s(4061)+80*s(4062)+80*s(4068)+40*s(4069)+40*s(4070)+80*s(4071)+64*s(4072)+64*s(4073)+64*s(4074)+64*s(4075)+454*s(4179)+240*s(4189)+80*s(4190)+80*s(4191)+64*s(4193)+64*s(4194)+64*s(4195)+64*s(4196)+92
  Such that:s(4180) =< 1
s(4055) =< 3
s(4183) =< B
s(4184) =< 2*B
s(4018) =< E
aux(1151) =< 2
aux(1152) =< 4
aux(1153) =< A
aux(850) =< aux(1152)
aux(850) =< aux(1153)
s(4048) =< aux(850)
s(4056) =< aux(1151)
s(4057) =< s(4055)
s(4063) =< aux(1151)
s(4064) =< aux(1151)
s(4065) =< s(4057)*aux(1151)
s(4066) =< s(4057)*s(4063)
s(4067) =< s(4057)*s(4064)
s(4068) =< s(4066)
s(4069) =< s(4067)
s(4070) =< s(4065)
s(4071) =< s(4055)
s(4072) =< aux(850)
s(4073) =< aux(850)
s(4072) =< aux(1151)
s(4073) =< aux(1151)
s(4072) =< aux(1152)
s(4073) =< aux(1152)
s(4074) =< aux(850)
s(4075) =< aux(850)
s(4074) =< aux(1151)
s(4075) =< aux(1151)
s(4179) =< aux(1153)
s(4186) =< s(4183)
s(4187) =< s(4179)*s(4183)
s(4188) =< s(4179)*s(4186)
s(4189) =< s(4188)
s(4190) =< s(4187)
s(4191) =< aux(1151)
s(4191) =< s(4183)
s(4193) =< aux(1153)
s(4194) =< aux(1153)
s(4193) =< s(4180)
s(4194) =< s(4180)
s(4193) =< s(4183)
s(4193) =< s(4184)
s(4193) =< aux(1151)
s(4194) =< aux(1151)
s(4195) =< aux(1153)
s(4196) =< aux(1153)
s(4195) =< s(4180)
s(4196) =< s(4180)
s(4195) =< s(4183)
s(4195) =< s(4184)

Unbounded itvars
s(4061) :  eq(161,2),s(1213)
s(4062) :  eq(161,2),s(1215)

  with precondition: [D=0,3>=E,A>=4,B>=1,C>=0,E>=2,F>=1,G>=0] 

* Chain [138,[133,135]]...: 2454*it(133)+250*s(4197)+120*s(4207)+40*s(4208)+80*s(4209)+80*s(4210)+64*s(4211)+64*s(4212)+64*s(4213)+64*s(4214)+43
  Such that:s(4198) =< 1
s(4199) =< 2
aux(1154) =< A
s(4201) =< B
s(4202) =< 2*B
s(4197) =< aux(1154)
s(4204) =< s(4201)
s(4205) =< s(4197)*s(4201)
s(4206) =< s(4197)*s(4204)
s(4207) =< s(4206)
s(4208) =< s(4205)
s(4209) =< s(4199)
s(4210) =< s(4199)
s(4209) =< s(4201)
s(4211) =< aux(1154)
s(4212) =< aux(1154)
s(4211) =< s(4198)
s(4212) =< s(4198)
s(4211) =< s(4201)
s(4211) =< s(4202)
s(4211) =< s(4199)
s(4212) =< s(4199)
s(4213) =< aux(1154)
s(4214) =< aux(1154)
s(4213) =< s(4198)
s(4214) =< s(4198)
s(4213) =< s(4201)
s(4213) =< s(4202)

Unbounded itvars
it(133) :  it(133)

  with precondition: [D=0,A>=4,B>=2,C>=0,E>=0,F>=0,G>=0] 

* Chain [138,[133,135],[132]]...: 3499*it(132)+250*s(4197)+120*s(4207)+40*s(4208)+80*s(4209)+80*s(4210)+64*s(4211)+64*s(4212)+64*s(4213)+64*s(4214)+43
  Such that:s(4198) =< 1
s(4199) =< 2
aux(1154) =< A
s(4201) =< B
s(4202) =< 2*B
s(4197) =< aux(1154)
s(4204) =< s(4201)
s(4205) =< s(4197)*s(4201)
s(4206) =< s(4197)*s(4204)
s(4207) =< s(4206)
s(4208) =< s(4205)
s(4209) =< s(4199)
s(4210) =< s(4199)
s(4209) =< s(4201)
s(4211) =< aux(1154)
s(4212) =< aux(1154)
s(4211) =< s(4198)
s(4212) =< s(4198)
s(4211) =< s(4201)
s(4211) =< s(4202)
s(4211) =< s(4199)
s(4212) =< s(4199)
s(4213) =< aux(1154)
s(4214) =< aux(1154)
s(4213) =< s(4198)
s(4214) =< s(4198)
s(4213) =< s(4201)
s(4213) =< s(4202)

Unbounded itvars
it(132) :  it(132)

  with precondition: [D=0,A>=4,B>=2,C>=0,E>=0,F>=0,G>=0] 

* Chain [138,[133,135],[132],144]: 3499*it(132)+6*s(4018)+250*s(4197)+120*s(4207)+40*s(4208)+80*s(4209)+80*s(4210)+64*s(4211)+64*s(4212)+64*s(4213)+64*s(4214)+49
  Such that:s(4198) =< 1
s(4199) =< 2
aux(1154) =< A
s(4201) =< B
s(4202) =< 2*B
s(4018) =< E
s(4197) =< aux(1154)
s(4204) =< s(4201)
s(4205) =< s(4197)*s(4201)
s(4206) =< s(4197)*s(4204)
s(4207) =< s(4206)
s(4208) =< s(4205)
s(4209) =< s(4199)
s(4210) =< s(4199)
s(4209) =< s(4201)
s(4211) =< aux(1154)
s(4212) =< aux(1154)
s(4211) =< s(4198)
s(4212) =< s(4198)
s(4211) =< s(4201)
s(4211) =< s(4202)
s(4211) =< s(4199)
s(4212) =< s(4199)
s(4213) =< aux(1154)
s(4214) =< aux(1154)
s(4213) =< s(4198)
s(4214) =< s(4198)
s(4213) =< s(4201)
s(4213) =< s(4202)

Unbounded itvars
it(132) :  it(132)

  with precondition: [D=0,A>=4,B>=2,C>=0,E>=3,F>=4,G>=0,F>=E] 

* Chain [138,[133,135],[132],136,145]: 3937*it(132)+49*it([136,145])+250*s(4197)+120*s(4207)+40*s(4208)+80*s(4209)+80*s(4210)+64*s(4211)+64*s(4212)+64*s(4213)+64*s(4214)+43
  Such that:s(4199) =< 2
aux(1154) =< A
s(4201) =< B
s(4202) =< 2*B
aux(1155) =< 1
it([136,145]) =< aux(1155)
s(4197) =< aux(1154)
s(4204) =< s(4201)
s(4205) =< s(4197)*s(4201)
s(4206) =< s(4197)*s(4204)
s(4207) =< s(4206)
s(4208) =< s(4205)
s(4209) =< s(4199)
s(4210) =< s(4199)
s(4209) =< s(4201)
s(4211) =< aux(1154)
s(4212) =< aux(1154)
s(4211) =< aux(1155)
s(4212) =< aux(1155)
s(4211) =< s(4201)
s(4211) =< s(4202)
s(4211) =< s(4199)
s(4212) =< s(4199)
s(4213) =< aux(1154)
s(4214) =< aux(1154)
s(4213) =< aux(1155)
s(4214) =< aux(1155)
s(4213) =< s(4201)
s(4213) =< s(4202)

Unbounded itvars
it(132) :  it(132)

  with precondition: [D=0,E=1,F=0,A>=4,B>=2,C>=0,G>=0] 

* Chain [138,[133,135],[132],134,144]: 4871*it(132)+49*it([134,144])+250*s(4197)+120*s(4207)+40*s(4208)+80*s(4209)+80*s(4210)+64*s(4211)+64*s(4212)+64*s(4213)+64*s(4214)+43
  Such that:s(4199) =< 2
aux(1154) =< A
s(4201) =< B
s(4202) =< 2*B
aux(1156) =< 1
it([134,144]) =< aux(1156)
s(4197) =< aux(1154)
s(4204) =< s(4201)
s(4205) =< s(4197)*s(4201)
s(4206) =< s(4197)*s(4204)
s(4207) =< s(4206)
s(4208) =< s(4205)
s(4209) =< s(4199)
s(4210) =< s(4199)
s(4209) =< s(4201)
s(4211) =< aux(1154)
s(4212) =< aux(1154)
s(4211) =< aux(1156)
s(4212) =< aux(1156)
s(4211) =< s(4201)
s(4211) =< s(4202)
s(4211) =< s(4199)
s(4212) =< s(4199)
s(4213) =< aux(1154)
s(4214) =< aux(1154)
s(4213) =< aux(1156)
s(4214) =< aux(1156)
s(4213) =< s(4201)
s(4213) =< s(4202)

Unbounded itvars
it(132) :  it(132)

  with precondition: [D=0,A>=4,B>=2,C>=0,E>=2,F>=1,G>=0] 

* Chain [138,[133,135],144]: 2454*it(133)+6*s(4018)+250*s(4197)+120*s(4207)+40*s(4208)+80*s(4209)+80*s(4210)+64*s(4211)+64*s(4212)+64*s(4213)+64*s(4214)+49
  Such that:s(4198) =< 1
s(4199) =< 2
aux(1154) =< A
s(4201) =< B
s(4202) =< 2*B
s(4018) =< E
s(4197) =< aux(1154)
s(4204) =< s(4201)
s(4205) =< s(4197)*s(4201)
s(4206) =< s(4197)*s(4204)
s(4207) =< s(4206)
s(4208) =< s(4205)
s(4209) =< s(4199)
s(4210) =< s(4199)
s(4209) =< s(4201)
s(4211) =< aux(1154)
s(4212) =< aux(1154)
s(4211) =< s(4198)
s(4212) =< s(4198)
s(4211) =< s(4201)
s(4211) =< s(4202)
s(4211) =< s(4199)
s(4212) =< s(4199)
s(4213) =< aux(1154)
s(4214) =< aux(1154)
s(4213) =< s(4198)
s(4214) =< s(4198)
s(4213) =< s(4201)
s(4213) =< s(4202)

Unbounded itvars
it(133) :  it(133)

  with precondition: [D=0,A>=4,B>=2,C>=0,E>=2,F>=1,G>=0] 

* Chain [138,[133,135],137,145]: 2941*it(133)+250*s(4197)+120*s(4207)+40*s(4208)+80*s(4209)+80*s(4210)+64*s(4211)+64*s(4212)+64*s(4213)+64*s(4214)+43
  Such that:s(4198) =< 1
s(4199) =< 2
aux(1154) =< A
s(4201) =< B
s(4202) =< 2*B
s(4197) =< aux(1154)
s(4204) =< s(4201)
s(4205) =< s(4197)*s(4201)
s(4206) =< s(4197)*s(4204)
s(4207) =< s(4206)
s(4208) =< s(4205)
s(4209) =< s(4199)
s(4210) =< s(4199)
s(4209) =< s(4201)
s(4211) =< aux(1154)
s(4212) =< aux(1154)
s(4211) =< s(4198)
s(4212) =< s(4198)
s(4211) =< s(4201)
s(4211) =< s(4202)
s(4211) =< s(4199)
s(4212) =< s(4199)
s(4213) =< aux(1154)
s(4214) =< aux(1154)
s(4213) =< s(4198)
s(4214) =< s(4198)
s(4213) =< s(4201)
s(4213) =< s(4202)

Unbounded itvars
it(133) :  it(133)

  with precondition: [D=0,E=1,F=0,B>=2,C>=0,G>=0,2*A>=9] 

* Chain [138,[133,135],136,145]: 2941*it(133)+250*s(4197)+120*s(4207)+40*s(4208)+80*s(4209)+80*s(4210)+64*s(4211)+64*s(4212)+64*s(4213)+64*s(4214)+43
  Such that:s(4198) =< 1
s(4199) =< 2
aux(1154) =< A
s(4201) =< B
s(4202) =< 2*B
s(4197) =< aux(1154)
s(4204) =< s(4201)
s(4205) =< s(4197)*s(4201)
s(4206) =< s(4197)*s(4204)
s(4207) =< s(4206)
s(4208) =< s(4205)
s(4209) =< s(4199)
s(4210) =< s(4199)
s(4209) =< s(4201)
s(4211) =< aux(1154)
s(4212) =< aux(1154)
s(4211) =< s(4198)
s(4212) =< s(4198)
s(4211) =< s(4201)
s(4211) =< s(4202)
s(4211) =< s(4199)
s(4212) =< s(4199)
s(4213) =< aux(1154)
s(4214) =< aux(1154)
s(4213) =< s(4198)
s(4214) =< s(4198)
s(4213) =< s(4201)
s(4213) =< s(4202)

Unbounded itvars
it(133) :  it(133)

  with precondition: [D=0,E=1,F=0,A>=4,B>=2,C>=0,G>=0] 

* Chain [138,[133,135],134,144]: 3875*it(133)+250*s(4197)+120*s(4207)+40*s(4208)+80*s(4209)+80*s(4210)+64*s(4211)+64*s(4212)+64*s(4213)+64*s(4214)+43
  Such that:s(4198) =< 1
s(4199) =< 2
aux(1154) =< A
s(4201) =< B
s(4202) =< 2*B
s(4197) =< aux(1154)
s(4204) =< s(4201)
s(4205) =< s(4197)*s(4201)
s(4206) =< s(4197)*s(4204)
s(4207) =< s(4206)
s(4208) =< s(4205)
s(4209) =< s(4199)
s(4210) =< s(4199)
s(4209) =< s(4201)
s(4211) =< aux(1154)
s(4212) =< aux(1154)
s(4211) =< s(4198)
s(4212) =< s(4198)
s(4211) =< s(4201)
s(4211) =< s(4202)
s(4211) =< s(4199)
s(4212) =< s(4199)
s(4213) =< aux(1154)
s(4214) =< aux(1154)
s(4213) =< s(4198)
s(4214) =< s(4198)
s(4213) =< s(4201)
s(4213) =< s(4202)

Unbounded itvars
it(133) :  it(133)

  with precondition: [D=0,A>=4,B>=2,C>=0,E>=2,F>=1,G>=0] 

* Chain [138,[132]]...: 1045*it(132)+250*s(4197)+120*s(4207)+40*s(4208)+80*s(4209)+80*s(4210)+64*s(4211)+64*s(4212)+64*s(4213)+64*s(4214)+43
  Such that:s(4198) =< 1
s(4199) =< 2
aux(1154) =< A
s(4201) =< B
s(4202) =< 2*B
s(4197) =< aux(1154)
s(4204) =< s(4201)
s(4205) =< s(4197)*s(4201)
s(4206) =< s(4197)*s(4204)
s(4207) =< s(4206)
s(4208) =< s(4205)
s(4209) =< s(4199)
s(4210) =< s(4199)
s(4209) =< s(4201)
s(4211) =< aux(1154)
s(4212) =< aux(1154)
s(4211) =< s(4198)
s(4212) =< s(4198)
s(4211) =< s(4201)
s(4211) =< s(4202)
s(4211) =< s(4199)
s(4212) =< s(4199)
s(4213) =< aux(1154)
s(4214) =< aux(1154)
s(4213) =< s(4198)
s(4214) =< s(4198)
s(4213) =< s(4201)
s(4213) =< s(4202)

Unbounded itvars
it(132) :  it(132)

  with precondition: [D=0,A>=3,B>=2,C>=0,E>=0,F>=0,G>=0] 

* Chain [138,[132],144]: 1045*it(132)+6*s(4018)+250*s(4197)+120*s(4207)+40*s(4208)+80*s(4209)+80*s(4210)+64*s(4211)+64*s(4212)+64*s(4213)+64*s(4214)+49
  Such that:s(4198) =< 1
s(4199) =< 2
aux(1154) =< A
s(4201) =< B
s(4202) =< 2*B
s(4018) =< E
s(4197) =< aux(1154)
s(4204) =< s(4201)
s(4205) =< s(4197)*s(4201)
s(4206) =< s(4197)*s(4204)
s(4207) =< s(4206)
s(4208) =< s(4205)
s(4209) =< s(4199)
s(4210) =< s(4199)
s(4209) =< s(4201)
s(4211) =< aux(1154)
s(4212) =< aux(1154)
s(4211) =< s(4198)
s(4212) =< s(4198)
s(4211) =< s(4201)
s(4211) =< s(4202)
s(4211) =< s(4199)
s(4212) =< s(4199)
s(4213) =< aux(1154)
s(4214) =< aux(1154)
s(4213) =< s(4198)
s(4214) =< s(4198)
s(4213) =< s(4201)
s(4213) =< s(4202)

Unbounded itvars
it(132) :  it(132)

  with precondition: [D=0,A>=3,B>=2,C>=0,E>=3,G>=0,F>=E] 

* Chain [138,[132],136,145]: 1483*it(132)+49*it([136,145])+250*s(4197)+120*s(4207)+40*s(4208)+80*s(4209)+80*s(4210)+64*s(4211)+64*s(4212)+64*s(4213)+64*s(4214)+43
  Such that:s(4199) =< 2
aux(1154) =< A
s(4201) =< B
s(4202) =< 2*B
aux(1157) =< 1
it([136,145]) =< aux(1157)
s(4197) =< aux(1154)
s(4204) =< s(4201)
s(4205) =< s(4197)*s(4201)
s(4206) =< s(4197)*s(4204)
s(4207) =< s(4206)
s(4208) =< s(4205)
s(4209) =< s(4199)
s(4210) =< s(4199)
s(4209) =< s(4201)
s(4211) =< aux(1154)
s(4212) =< aux(1154)
s(4211) =< aux(1157)
s(4212) =< aux(1157)
s(4211) =< s(4201)
s(4211) =< s(4202)
s(4211) =< s(4199)
s(4212) =< s(4199)
s(4213) =< aux(1154)
s(4214) =< aux(1154)
s(4213) =< aux(1157)
s(4214) =< aux(1157)
s(4213) =< s(4201)
s(4213) =< s(4202)

Unbounded itvars
it(132) :  it(132)

  with precondition: [D=0,E=1,F=0,A>=3,B>=2,C>=0,G>=0] 

* Chain [138,[132],134,144]: 2417*it(132)+49*it([134,144])+250*s(4197)+120*s(4207)+40*s(4208)+80*s(4209)+80*s(4210)+64*s(4211)+64*s(4212)+64*s(4213)+64*s(4214)+43
  Such that:s(4199) =< 2
aux(1154) =< A
s(4201) =< B
s(4202) =< 2*B
aux(1158) =< 1
it([134,144]) =< aux(1158)
s(4197) =< aux(1154)
s(4204) =< s(4201)
s(4205) =< s(4197)*s(4201)
s(4206) =< s(4197)*s(4204)
s(4207) =< s(4206)
s(4208) =< s(4205)
s(4209) =< s(4199)
s(4210) =< s(4199)
s(4209) =< s(4201)
s(4211) =< aux(1154)
s(4212) =< aux(1154)
s(4211) =< aux(1158)
s(4212) =< aux(1158)
s(4211) =< s(4201)
s(4211) =< s(4202)
s(4211) =< s(4199)
s(4212) =< s(4199)
s(4213) =< aux(1154)
s(4214) =< aux(1154)
s(4213) =< aux(1158)
s(4214) =< aux(1158)
s(4213) =< s(4201)
s(4213) =< s(4202)

Unbounded itvars
it(132) :  it(132)

  with precondition: [D=0,A>=3,B>=2,C>=0,E>=2,F>=1,G>=0] 

* Chain [138,137,145]: 6*s(4101)+96*s(4109)+80*s(4110)+80*s(4111)+64*s(4112)+64*s(4113)+64*s(4114)+64*s(4115)+250*s(4197)+120*s(4207)+40*s(4208)+80*s(4209)+64*s(4211)+64*s(4212)+64*s(4213)+64*s(4214)+92
  Such that:s(4198) =< 1
s(4108) =< 3
s(4102) =< 4
aux(1154) =< A
aux(890) =< 2*A
s(4201) =< B
s(4202) =< 2*B
aux(1159) =< 2
s(4101) =< aux(890)
s(4109) =< aux(1159)
s(4110) =< s(4108)
s(4111) =< s(4108)
s(4112) =< aux(890)
s(4113) =< aux(890)
s(4112) =< aux(1159)
s(4113) =< aux(1159)
s(4112) =< s(4102)
s(4113) =< s(4102)
s(4114) =< aux(890)
s(4115) =< aux(890)
s(4114) =< aux(1159)
s(4115) =< aux(1159)
s(4197) =< aux(1154)
s(4204) =< s(4201)
s(4205) =< s(4197)*s(4201)
s(4206) =< s(4197)*s(4204)
s(4207) =< s(4206)
s(4208) =< s(4205)
s(4209) =< aux(1159)
s(4209) =< s(4201)
s(4211) =< aux(1154)
s(4212) =< aux(1154)
s(4211) =< s(4198)
s(4212) =< s(4198)
s(4211) =< s(4201)
s(4211) =< s(4202)
s(4211) =< aux(1159)
s(4212) =< aux(1159)
s(4213) =< aux(1154)
s(4214) =< aux(1154)
s(4213) =< s(4198)
s(4214) =< s(4198)
s(4213) =< s(4201)
s(4213) =< s(4202)

  with precondition: [D=0,E=1,F=0,A>=4,B>=2,C>=0,G>=0] 

* Chain [138,136,145]: 6*s(4019)+96*s(4027)+80*s(4028)+80*s(4029)+64*s(4030)+64*s(4031)+64*s(4032)+64*s(4033)+250*s(4197)+120*s(4207)+40*s(4208)+80*s(4209)+64*s(4211)+64*s(4212)+64*s(4213)+64*s(4214)+92
  Such that:s(4198) =< 1
s(4026) =< 3
aux(1154) =< A
aux(813) =< 2*A
s(4201) =< B
s(4202) =< 2*B
aux(1160) =< 2
aux(1161) =< 4
aux(813) =< aux(1161)
s(4019) =< aux(813)
s(4027) =< aux(1160)
s(4028) =< s(4026)
s(4029) =< s(4026)
s(4030) =< aux(813)
s(4031) =< aux(813)
s(4030) =< aux(1160)
s(4031) =< aux(1160)
s(4030) =< aux(1161)
s(4031) =< aux(1161)
s(4032) =< aux(813)
s(4033) =< aux(813)
s(4032) =< aux(1160)
s(4033) =< aux(1160)
s(4197) =< aux(1154)
s(4204) =< s(4201)
s(4205) =< s(4197)*s(4201)
s(4206) =< s(4197)*s(4204)
s(4207) =< s(4206)
s(4208) =< s(4205)
s(4209) =< aux(1160)
s(4209) =< s(4201)
s(4211) =< aux(1154)
s(4212) =< aux(1154)
s(4211) =< s(4198)
s(4212) =< s(4198)
s(4211) =< s(4201)
s(4211) =< s(4202)
s(4211) =< aux(1160)
s(4212) =< aux(1160)
s(4213) =< aux(1154)
s(4214) =< aux(1154)
s(4213) =< s(4198)
s(4214) =< s(4198)
s(4213) =< s(4201)
s(4213) =< s(4202)

  with precondition: [D=0,E=1,F=0,A>=3,B>=2,C>=0,G>=0] 

* Chain [138,134,144]: 6*s(4018)+6*s(4048)+96*s(4056)+528*s(4057)+240*s(4061)+80*s(4062)+80*s(4068)+40*s(4069)+40*s(4070)+80*s(4071)+64*s(4072)+64*s(4073)+64*s(4074)+64*s(4075)+250*s(4197)+120*s(4207)+40*s(4208)+80*s(4209)+64*s(4211)+64*s(4212)+64*s(4213)+64*s(4214)+92
  Such that:s(4198) =< 1
s(4055) =< 3
aux(1154) =< A
aux(850) =< 2*A
s(4201) =< B
s(4202) =< 2*B
s(4018) =< E
aux(1162) =< 2
aux(1163) =< 4
aux(850) =< aux(1163)
s(4048) =< aux(850)
s(4056) =< aux(1162)
s(4057) =< s(4055)
s(4063) =< aux(1162)
s(4064) =< aux(1162)
s(4065) =< s(4057)*aux(1162)
s(4066) =< s(4057)*s(4063)
s(4067) =< s(4057)*s(4064)
s(4068) =< s(4066)
s(4069) =< s(4067)
s(4070) =< s(4065)
s(4071) =< s(4055)
s(4072) =< aux(850)
s(4073) =< aux(850)
s(4072) =< aux(1162)
s(4073) =< aux(1162)
s(4072) =< aux(1163)
s(4073) =< aux(1163)
s(4074) =< aux(850)
s(4075) =< aux(850)
s(4074) =< aux(1162)
s(4075) =< aux(1162)
s(4197) =< aux(1154)
s(4204) =< s(4201)
s(4205) =< s(4197)*s(4201)
s(4206) =< s(4197)*s(4204)
s(4207) =< s(4206)
s(4208) =< s(4205)
s(4209) =< aux(1162)
s(4209) =< s(4201)
s(4211) =< aux(1154)
s(4212) =< aux(1154)
s(4211) =< s(4198)
s(4212) =< s(4198)
s(4211) =< s(4201)
s(4211) =< s(4202)
s(4211) =< aux(1162)
s(4212) =< aux(1162)
s(4213) =< aux(1154)
s(4214) =< aux(1154)
s(4213) =< s(4198)
s(4214) =< s(4198)
s(4213) =< s(4201)
s(4213) =< s(4202)

Unbounded itvars
s(4061) :  eq(161,2),s(1213)
s(4062) :  eq(161,2),s(1215)

  with precondition: [D=0,3>=E,A>=3,B>=2,C>=0,E>=2,F>=1,G>=0] 

* Chain [137,145]: 6*s(4101)+16*s(4109)+80*s(4110)+80*s(4111)+64*s(4112)+64*s(4113)+64*s(4114)+64*s(4115)+49
  Such that:aux(890) =< A
s(4104) =< B
s(4105) =< 2*B
aux(891) =< D+1
s(4108) =< D+2
s(4102) =< 2*D+2
s(4101) =< aux(890)
s(4109) =< aux(891)
s(4110) =< s(4108)
s(4111) =< s(4108)
s(4110) =< s(4104)
s(4112) =< aux(890)
s(4113) =< aux(890)
s(4112) =< aux(891)
s(4113) =< aux(891)
s(4112) =< s(4104)
s(4112) =< s(4105)
s(4112) =< s(4102)
s(4113) =< s(4102)
s(4114) =< aux(890)
s(4115) =< aux(890)
s(4114) =< aux(891)
s(4115) =< aux(891)
s(4114) =< s(4104)
s(4114) =< s(4105)

  with precondition: [E=1,F=0,B>=1,C>=0,D>=1,G>=0,A>=2*D+3] 

* Chain [136,145]: 6*s(4019)+16*s(4027)+80*s(4028)+80*s(4029)+64*s(4030)+64*s(4031)+64*s(4032)+64*s(4033)+49
  Such that:aux(813) =< A
s(4022) =< B
s(4023) =< 2*B
aux(814) =< D+1
s(4026) =< D+2
s(4020) =< 2*D+2
s(4019) =< aux(813)
s(4027) =< aux(814)
s(4028) =< s(4026)
s(4029) =< s(4026)
s(4028) =< s(4022)
s(4030) =< aux(813)
s(4031) =< aux(813)
s(4030) =< aux(814)
s(4031) =< aux(814)
s(4030) =< s(4022)
s(4030) =< s(4023)
s(4030) =< s(4020)
s(4031) =< s(4020)
s(4032) =< aux(813)
s(4033) =< aux(813)
s(4032) =< aux(814)
s(4033) =< aux(814)
s(4032) =< s(4022)
s(4032) =< s(4023)

  with precondition: [E=1,F=0,B>=1,C>=0,D>=1,G>=0,2*D+2>=A,A>=D+2] 

* Chain [134,144]: 6*s(4018)+6*s(4048)+16*s(4056)+528*s(4057)+240*s(4061)+80*s(4062)+80*s(4068)+40*s(4069)+40*s(4070)+80*s(4071)+64*s(4072)+64*s(4073)+64*s(4074)+64*s(4075)+49
  Such that:aux(850) =< A
s(4051) =< B
s(4052) =< 2*B
aux(851) =< D+1
s(4055) =< D+2
s(4049) =< 2*D+2
s(4018) =< E
s(4048) =< aux(850)
s(4056) =< aux(851)
s(4057) =< s(4055)
s(4058) =< s(4051)
s(4059) =< s(4057)*s(4051)
s(4060) =< s(4057)*s(4058)
s(4061) =< s(4060)
s(4062) =< s(4059)
s(4063) =< s(4051)-2
s(4063) =< aux(851)
s(4064) =< aux(851)
s(4065) =< s(4057)*aux(851)
s(4066) =< s(4057)*s(4063)
s(4067) =< s(4057)*s(4064)
s(4068) =< s(4066)
s(4069) =< s(4067)
s(4070) =< s(4065)
s(4071) =< s(4055)
s(4071) =< s(4051)
s(4072) =< aux(850)
s(4073) =< aux(850)
s(4072) =< aux(851)
s(4073) =< aux(851)
s(4072) =< s(4051)
s(4072) =< s(4052)
s(4072) =< s(4049)
s(4073) =< s(4049)
s(4074) =< aux(850)
s(4075) =< aux(850)
s(4074) =< aux(851)
s(4075) =< aux(851)
s(4074) =< s(4051)
s(4074) =< s(4052)

  with precondition: [B>=1,C>=0,D>=1,E>=2,F>=1,G>=0,2*D+2>=A,A>=D+2,D+2>=E] 


#### Simplifying cost structure of CE 164 
 * Renamed intermediate variables: 
[ (eq(165,1),s(4220))>>s(5171), (eq(165,1),s(4216))>>s(5172), (eq(165,1),aux(1164))>>s(5173), (eq(165,1),aux(1165))>>s(5174), (eq(165,1),aux(1166))>>s(5175), (eq(165,1),aux(1167))>>s(5176), (eq(165,1),s(4221))>>s(5177), (eq(165,1),s(4222))>>s(5178), (eq(165,1),s(4224))>>s(5179), (eq(165,1),s(4226))>>s(5180), (eq(165,1),s(4228))>>s(5181), (eq(165,1),s(4229))>>s(5182), (eq(165,1),s(4230))>>s(5183), (eq(165,1),s(4231))>>s(5184), (eq(165,1),s(4232))>>s(5185), (eq(165,1),s(4233))>>s(5186), (eq(165,1),s(4234))>>s(5187), (eq(165,1),s(4235))>>s(5188), (eq(165,1),s(4236))>>s(5189), (eq(165,1),s(4251))>>s(5190)]

#### Simplifying cost structure of CE 165 
 * Renamed intermediate variables: 
[ (eq(166,1),aux(1130))>>s(5191), (eq(166,1),s(4142))>>s(5192), (eq(166,1),s(4143))>>s(5193), (eq(166,1),aux(1131))>>s(5194), (eq(166,1),s(4018))>>s(5195), (eq(166,1),s(4139))>>s(5196), (eq(166,1),s(4145))>>s(5197), (eq(166,1),s(4146))>>s(5198), (eq(166,1),s(4147))>>s(5199), (eq(166,1),s(4148))>>s(5200), (eq(166,1),s(4149))>>s(5201), (eq(166,1),s(4150))>>s(5202), (eq(166,1),s(4151))>>s(5203), (eq(166,1),s(4152))>>s(5204)]

#### Simplifying cost structure of CE 166 
 * Renamed intermediate variables: 
[ (eq(167,1),s(4267))>>s(5205), (eq(167,1),s(4262))>>s(5206), (eq(167,1),aux(1168))>>s(5207), (eq(167,1),aux(1169))>>s(5208), (eq(167,1),aux(1170))>>s(5209), (eq(167,1),aux(1171))>>s(5210), (eq(167,1),aux(1172))>>s(5211), (eq(167,1),s(4265))>>s(5212), (eq(167,1),s(4268))>>s(5213), (eq(167,1),s(4269))>>s(5214), (eq(167,1),s(4270))>>s(5215), (eq(167,1),s(4272))>>s(5216), (eq(167,1),s(4273))>>s(5217), (eq(167,1),s(4275))>>s(5218), (eq(167,1),s(4277))>>s(5219), (eq(167,1),s(4279))>>s(5220), (eq(167,1),s(4281))>>s(5221), (eq(167,1),s(4283))>>s(5222), (eq(167,1),s(4284))>>s(5223), (eq(167,1),s(4285))>>s(5224), (eq(167,1),s(4286))>>s(5225), (eq(167,1),s(4287))>>s(5226), (eq(167,1),s(4288))>>s(5227), (eq(167,1),s(4289))>>s(5228), (eq(167,1),s(4290))>>s(5229), (eq(167,1),s(4291))>>s(5230), (eq(167,1),s(4292))>>s(5231)]

#### Simplifying cost structure of CE 167 
 * Renamed intermediate variables: 
[ (eq(168,1),aux(1173))>>s(5232), (eq(168,1),aux(1174))>>s(5233), (eq(168,1),aux(1175))>>s(5234), (eq(168,1),aux(1176))>>s(5235), (eq(168,1),aux(1177))>>s(5236), (eq(168,1),aux(1178))>>s(5237), (eq(168,1),aux(1179))>>s(5238), (eq(168,1),aux(1180))>>s(5239), (eq(168,1),s(4328))>>s(5240), (eq(168,1),s(4333))>>s(5241), (eq(168,1),s(4334))>>s(5242), (eq(168,1),s(4335))>>s(5243), (eq(168,1),s(4337))>>s(5244), (eq(168,1),s(4339))>>s(5245), (eq(168,1),s(4341))>>s(5246), (eq(168,1),s(4342))>>s(5247), (eq(168,1),s(4343))>>s(5248), (eq(168,1),s(4344))>>s(5249), (eq(168,1),s(4345))>>s(5250), (eq(168,1),s(4346))>>s(5251), (eq(168,1),s(4347))>>s(5252), (eq(168,1),s(4348))>>s(5253), (eq(168,1),s(4349))>>s(5254), (eq(168,1),s(4350))>>s(5255), (eq(168,1),s(4351))>>s(5256), (eq(168,1),s(4360))>>s(5257), (eq(168,1),s(4364))>>s(5258), (eq(168,1),s(4366))>>s(5259), (eq(168,1),s(4460))>>s(5260), (eq(168,1),s(4461))>>s(5261), (eq(168,1),s(4465))>>s(5262), (eq(168,1),s(4467))>>s(5263), (eq(168,1),s(4491))>>s(5264), (eq(168,1),s(4493))>>s(5265), (eq(168,1),s(4384))>>s(5266), (eq(168,1),s(4397))>>s(5267)]

#### Simplifying cost structure of CE 168 
 * Renamed intermediate variables: 
[ (eq(169,1),s(4180))>>s(5268), (eq(169,1),aux(1140))>>s(5269), (eq(169,1),s(4183))>>s(5270), (eq(169,1),s(4184))>>s(5271), (eq(169,1),aux(1145))>>s(5272), (eq(169,1),s(4018))>>s(5273), (eq(169,1),s(4179))>>s(5274), (eq(169,1),s(4186))>>s(5275), (eq(169,1),s(4187))>>s(5276), (eq(169,1),s(4188))>>s(5277), (eq(169,1),s(4189))>>s(5278), (eq(169,1),s(4190))>>s(5279), (eq(169,1),s(4191))>>s(5280), (eq(169,1),s(4193))>>s(5281), (eq(169,1),s(4194))>>s(5282), (eq(169,1),s(4195))>>s(5283), (eq(169,1),s(4196))>>s(5284)]

#### Simplifying cost structure of CE 169 
 * Renamed intermediate variables: 
[ (eq(170,1),s(4592))>>s(5285), (eq(170,1),s(4599))>>s(5286), (eq(170,1),s(4594))>>s(5287), (eq(170,1),aux(1181))>>s(5288), (eq(170,1),aux(1182))>>s(5289), (eq(170,1),aux(1183))>>s(5290), (eq(170,1),aux(1184))>>s(5291), (eq(170,1),aux(1185))>>s(5292), (eq(170,1),aux(1186))>>s(5293), (eq(170,1),s(4597))>>s(5294), (eq(170,1),s(4600))>>s(5295), (eq(170,1),s(4601))>>s(5296), (eq(170,1),s(4602))>>s(5297), (eq(170,1),s(4603))>>s(5298), (eq(170,1),s(4605))>>s(5299), (eq(170,1),s(4606))>>s(5300), (eq(170,1),s(4608))>>s(5301), (eq(170,1),s(4610))>>s(5302), (eq(170,1),s(4612))>>s(5303), (eq(170,1),s(4614))>>s(5304), (eq(170,1),s(4616))>>s(5305), (eq(170,1),s(4617))>>s(5306), (eq(170,1),s(4618))>>s(5307), (eq(170,1),s(4619))>>s(5308), (eq(170,1),s(4620))>>s(5309), (eq(170,1),s(4621))>>s(5310), (eq(170,1),s(4622))>>s(5311), (eq(170,1),s(4623))>>s(5312), (eq(170,1),s(4624))>>s(5313), (eq(170,1),s(4625))>>s(5314), (eq(170,1),s(4626))>>s(5315), (eq(170,1),s(4634))>>s(5316), (eq(170,1),s(4627))>>s(5317)]

#### Simplifying cost structure of CE 170 
 * Renamed intermediate variables: 
[ (eq(171,1),s(4743))>>s(5318), (eq(171,1),s(4748))>>s(5319), (eq(171,1),aux(1187))>>s(5320), (eq(171,1),aux(1188))>>s(5321), (eq(171,1),aux(1189))>>s(5322), (eq(171,1),aux(1190))>>s(5323), (eq(171,1),aux(1191))>>s(5324), (eq(171,1),aux(1192))>>s(5325), (eq(171,1),s(4746))>>s(5326), (eq(171,1),s(4750))>>s(5327), (eq(171,1),s(4751))>>s(5328), (eq(171,1),s(4752))>>s(5329), (eq(171,1),s(4753))>>s(5330), (eq(171,1),s(4754))>>s(5331), (eq(171,1),s(4756))>>s(5332), (eq(171,1),s(4757))>>s(5333), (eq(171,1),s(4759))>>s(5334), (eq(171,1),s(4761))>>s(5335), (eq(171,1),s(4763))>>s(5336), (eq(171,1),s(4765))>>s(5337), (eq(171,1),s(4767))>>s(5338), (eq(171,1),s(4768))>>s(5339), (eq(171,1),s(4769))>>s(5340), (eq(171,1),s(4770))>>s(5341), (eq(171,1),s(4771))>>s(5342), (eq(171,1),s(4772))>>s(5343), (eq(171,1),s(4773))>>s(5344), (eq(171,1),s(4774))>>s(5345), (eq(171,1),s(4775))>>s(5346), (eq(171,1),s(4776))>>s(5347), (eq(171,1),s(4777))>>s(5348), (eq(171,1),s(4785))>>s(5349), (eq(171,1),s(4778))>>s(5350)]

#### Simplifying cost structure of CE 171 
 * Renamed intermediate variables: 
[ (eq(172,1),aux(1132))>>s(5351), (eq(172,1),s(4155))>>s(5352), (eq(172,1),s(4156))>>s(5353), (eq(172,1),s(4157))>>s(5354), (eq(172,1),s(4153))>>s(5355), (eq(172,1),s(4158))>>s(5356), (eq(172,1),s(4159))>>s(5357), (eq(172,1),s(4160))>>s(5358), (eq(172,1),s(4161))>>s(5359), (eq(172,1),s(4162))>>s(5360), (eq(172,1),s(4163))>>s(5361), (eq(172,1),s(4164))>>s(5362), (eq(172,1),s(4165))>>s(5363), (eq(172,1),s(4166))>>s(5364), (eq(172,1),it(132))>>s(5365)]

#### Simplifying cost structure of CE 172 
 * Renamed intermediate variables: 
[ (eq(173,1),s(4198))>>s(5366), (eq(173,1),s(4199))>>s(5367), (eq(173,1),aux(1154))>>s(5368), (eq(173,1),s(4201))>>s(5369), (eq(173,1),s(4202))>>s(5370), (eq(173,1),s(4197))>>s(5371), (eq(173,1),s(4204))>>s(5372), (eq(173,1),s(4205))>>s(5373), (eq(173,1),s(4206))>>s(5374), (eq(173,1),s(4207))>>s(5375), (eq(173,1),s(4208))>>s(5376), (eq(173,1),s(4209))>>s(5377), (eq(173,1),s(4210))>>s(5378), (eq(173,1),s(4211))>>s(5379), (eq(173,1),s(4212))>>s(5380), (eq(173,1),s(4213))>>s(5381), (eq(173,1),s(4214))>>s(5382), (eq(173,1),it(132))>>s(5383)]

#### Simplifying cost structure of CE 173 
 * Renamed intermediate variables: 
[ (eq(175,1),aux(1194))>>s(5384), (eq(175,1),aux(1195))>>s(5385), (eq(175,1),aux(1196))>>s(5386), (eq(175,1),aux(1197))>>s(5387), (eq(175,1),aux(1198))>>s(5388), (eq(175,1),s(5104))>>s(5389), (eq(175,1),s(5105))>>s(5390), (eq(175,1),s(5106))>>s(5391), (eq(175,1),s(5107))>>s(5392), (eq(175,1),s(5108))>>s(5393), (eq(175,1),s(5109))>>s(5394), (eq(175,1),s(5110))>>s(5395), (eq(175,1),s(5111))>>s(5396), (eq(175,1),s(5112))>>s(5397), (eq(175,1),s(5113))>>s(5398), (eq(175,1),s(5114))>>s(5399), (eq(175,1),s(5115))>>s(5400), (eq(175,1),s(5116))>>s(5401)]

#### Simplifying cost structure of CE 175 
 * Joined equivalent variables [aux(1204),s(5366),s(5384)] into aux(1204)
 * Joined equivalent variables [aux(1205),s(5367),s(5385)] into aux(1205)
 * Joined equivalent variables [aux(1206),s(5368),s(5386)] into aux(1206)
 * Joined equivalent variables [aux(1207),s(5369),s(5387)] into aux(1207)
 * Joined equivalent variables [aux(1208),s(5370),s(5388)] into aux(1208)
 * Joined equivalent variables [s(5383),s(5401)] into s(5383)
 * Joined equivalent variables [s(5372),s(5390)] into s(5372)
 * Joined equivalent variables [s(5380),s(5398)] into s(5380)
 * Joined equivalent variables [s(5379),s(5397)] into s(5379)
 * Joined equivalent variables [s(5382),s(5400)] into s(5382)
 * Joined equivalent variables [s(5381),s(5399)] into s(5381)
 * Joined equivalent variables [s(5378),s(5396)] into s(5378)
 * Joined equivalent variables [s(5377),s(5395)] into s(5377)
 * Joined equivalent variables [s(5371),s(5389)] into s(5371)
 * Joined equivalent variables [s(5374),s(5392)] into s(5374)
 * Joined equivalent variables [s(5373),s(5391)] into s(5373)
 * Joined equivalent variables [s(5376),s(5394)] into s(5376)
 * Joined equivalent variables [s(5375),s(5393)] into s(5375)
 * Renamed intermediate variables: 
[ (eq(174,1),s(4180))>>s(5402), (eq(174,1),s(4181))>>s(5403), (eq(174,1),aux(1140))>>s(5404), (eq(174,1),s(4183))>>s(5405), (eq(174,1),s(4184))>>s(5406), (eq(174,1),s(4179))>>s(5407), (eq(174,1),s(4186))>>s(5408), (eq(174,1),s(4187))>>s(5409), (eq(174,1),s(4188))>>s(5410), (eq(174,1),s(4189))>>s(5411), (eq(174,1),s(4190))>>s(5412), (eq(174,1),s(4191))>>s(5413), (eq(174,1),s(4192))>>s(5414), (eq(174,1),s(4193))>>s(5415), (eq(174,1),s(4194))>>s(5416), (eq(174,1),s(4195))>>s(5417), (eq(174,1),s(4196))>>s(5418), (eq(174,1),it(132))>>s(5419)]

#### Simplifying cost structure of CE 174 
 * Renamed intermediate variables: 
[ (eq(176,1),aux(1199))>>s(5420), (eq(176,1),aux(1200))>>s(5421), (eq(176,1),aux(1201))>>s(5422), (eq(176,1),aux(1202))>>s(5423), (eq(176,1),aux(1203))>>s(5424), (eq(176,1),s(5140))>>s(5425), (eq(176,1),s(5141))>>s(5426), (eq(176,1),s(5142))>>s(5427), (eq(176,1),s(5143))>>s(5428), (eq(176,1),s(5144))>>s(5429), (eq(176,1),s(5145))>>s(5430), (eq(176,1),s(5146))>>s(5431), (eq(176,1),s(5147))>>s(5432), (eq(176,1),s(5148))>>s(5433), (eq(176,1),s(5149))>>s(5434), (eq(176,1),s(5150))>>s(5435), (eq(176,1),s(5151))>>s(5436), (eq(176,1),s(5152))>>s(5437)]

#### Simplifying cost structure of CE 176 
 * Joined equivalent variables [aux(1209),s(5402),s(5420)] into aux(1209)
 * Joined equivalent variables [aux(1210),s(5403),s(5421)] into aux(1210)
 * Joined equivalent variables [aux(1211),s(5404),s(5422)] into aux(1211)
 * Joined equivalent variables [aux(1212),s(5405),s(5423)] into aux(1212)
 * Joined equivalent variables [aux(1213),s(5406),s(5424)] into aux(1213)
 * Joined equivalent variables [s(5419),s(5437)] into s(5419)
 * Joined equivalent variables [s(5408),s(5426)] into s(5408)
 * Joined equivalent variables [s(5416),s(5434)] into s(5416)
 * Joined equivalent variables [s(5415),s(5433)] into s(5415)
 * Joined equivalent variables [s(5418),s(5436)] into s(5418)
 * Joined equivalent variables [s(5417),s(5435)] into s(5417)
 * Joined equivalent variables [s(5414),s(5432)] into s(5414)
 * Joined equivalent variables [s(5413),s(5431)] into s(5413)
 * Joined equivalent variables [s(5407),s(5425)] into s(5407)
 * Joined equivalent variables [s(5410),s(5428)] into s(5410)
 * Joined equivalent variables [s(5409),s(5427)] into s(5409)
 * Joined equivalent variables [s(5412),s(5430)] into s(5412)
 * Joined equivalent variables [s(5411),s(5429)] into s(5411)

#### Cost of chains of echelon_form_old(A,B,C,D,E,F):
* Chain [156]: 8
  with precondition: [A=1,B=0,D=1,E=0,C=F,C>=0] 

* Chain [155]: 166*s(5177)+744*s(5178)+128*s(5179)+128*s(5180)+67*s(5181)+240*s(5185)+80*s(5186)+240*s(5187)+384*s(5188)+384*s(5189)+1483*s(5190)+94
  Such that:s(5173) =< 1
s(5174) =< 2
s(5171) =< 3
s(5172) =< 4
s(5175) =< B
s(5176) =< 2*B
s(5177) =< s(5171)
s(5178) =< s(5174)
s(5179) =< s(5171)
s(5179) =< s(5174)
s(5179) =< s(5172)
s(5180) =< s(5171)
s(5180) =< s(5174)
s(5181) =< s(5173)
s(5182) =< s(5175)
s(5183) =< s(5178)*s(5175)
s(5184) =< s(5178)*s(5182)
s(5185) =< s(5184)
s(5186) =< s(5183)
s(5187) =< s(5174)
s(5187) =< s(5175)
s(5188) =< s(5174)
s(5189) =< s(5174)
s(5188) =< s(5173)
s(5189) =< s(5173)
s(5188) =< s(5175)
s(5188) =< s(5176)

Unbounded itvars
s(5190) :  eq(165,1),s(4251)

  with precondition: [A=2,D=1,E=0,B>=1,C>=0,F>=0] 

* Chain [154]: 534*s(5195)+6*s(5196)+240*s(5200)+80*s(5201)+80*s(5202)+128*s(5203)+128*s(5204)+51
  Such that:s(5191) =< 1
s(5194) =< 2
s(5192) =< B
s(5193) =< 2*B
s(5195) =< s(5194)
s(5196) =< s(5191)
s(5197) =< s(5192)
s(5198) =< s(5195)*s(5192)
s(5199) =< s(5195)*s(5197)
s(5200) =< s(5199)
s(5201) =< s(5198)
s(5202) =< s(5194)
s(5202) =< s(5192)
s(5203) =< s(5194)
s(5204) =< s(5194)
s(5203) =< s(5191)
s(5204) =< s(5191)
s(5203) =< s(5192)
s(5203) =< s(5193)

  with precondition: [A=2,D=2,B>=1,C>=0,E>=1,F>=0] 

* Chain [153]: 12*s(5212)+614*s(5213)+988*s(5214)+120*s(5218)+40*s(5219)+128*s(5220)+128*s(5221)+67*s(5222)+360*s(5226)+120*s(5227)+240*s(5228)+384*s(5229)+384*s(5230)+3782*s(5231)+94
  Such that:s(5207) =< 1
s(5208) =< 2
s(5205) =< 3
s(5206) =< 4
s(5209) =< B
s(5210) =< 2*B
s(5213) =< s(5205)
s(5214) =< s(5208)
s(5215) =< s(5208)
s(5216) =< s(5213)*s(5208)
s(5217) =< s(5213)*s(5215)
s(5218) =< s(5217)
s(5219) =< s(5216)
s(5220) =< s(5205)
s(5220) =< s(5208)
s(5220) =< s(5206)
s(5221) =< s(5205)
s(5221) =< s(5208)
s(5222) =< s(5207)
s(5223) =< s(5209)
s(5224) =< s(5214)*s(5209)
s(5225) =< s(5214)*s(5223)
s(5226) =< s(5225)
s(5227) =< s(5224)
s(5228) =< s(5208)
s(5228) =< s(5209)
s(5229) =< s(5208)
s(5230) =< s(5208)
s(5229) =< s(5207)
s(5230) =< s(5207)
s(5229) =< s(5209)
s(5229) =< s(5210)

Unbounded itvars
s(5212) :  eq(167,1),s(4265)
s(5231) :  eq(167,1),s(4292)

  with precondition: [A=2,B>=2,C>=0,D>=2,E>=1,F>=0] 

* Chain [152]: 6*s(5241)+1104*s(5242)+640*s(5243)+128*s(5244)+128*s(5245)+4236*s(5246)+2160*s(5250)+720*s(5251)+1040*s(5252)+832*s(5253)+832*s(5254)+832*s(5255)+832*s(5256)+6*s(5257)+128*s(5258)+128*s(5259)+6*s(5261)+128*s(5262)+128*s(5263)+128*s(5264)+128*s(5265)+196*s(5266)+22604*s(5267)+94
  Such that:s(5232) =< 1
s(5233) =< 2
s(5234) =< 3
s(5235) =< 4
s(5236) =< A
s(5237) =< 2*A
s(5238) =< B
s(5239) =< 2*B
s(5240) =< s(5237)
s(5240) =< s(5235)
s(5241) =< s(5240)
s(5242) =< s(5233)
s(5243) =< s(5234)
s(5244) =< s(5240)
s(5244) =< s(5233)
s(5244) =< s(5235)
s(5245) =< s(5240)
s(5245) =< s(5233)
s(5246) =< s(5236)
s(5247) =< s(5238)
s(5248) =< s(5246)*s(5238)
s(5249) =< s(5246)*s(5247)
s(5250) =< s(5249)
s(5251) =< s(5248)
s(5252) =< s(5233)
s(5252) =< s(5238)
s(5253) =< s(5236)
s(5254) =< s(5236)
s(5253) =< s(5232)
s(5254) =< s(5232)
s(5253) =< s(5238)
s(5253) =< s(5239)
s(5253) =< s(5233)
s(5254) =< s(5233)
s(5255) =< s(5236)
s(5256) =< s(5236)
s(5255) =< s(5232)
s(5256) =< s(5232)
s(5255) =< s(5238)
s(5255) =< s(5239)
s(5257) =< s(5237)
s(5258) =< s(5237)
s(5258) =< s(5233)
s(5258) =< s(5235)
s(5259) =< s(5237)
s(5259) =< s(5233)
s(5260) =< s(5235)
s(5260) =< s(5236)
s(5261) =< s(5260)
s(5262) =< s(5260)
s(5262) =< s(5233)
s(5262) =< s(5235)
s(5263) =< s(5260)
s(5263) =< s(5233)
s(5264) =< s(5236)
s(5264) =< s(5233)
s(5264) =< s(5235)
s(5265) =< s(5236)
s(5265) =< s(5233)
s(5266) =< s(5232)

Unbounded itvars
s(5267) :  eq(168,1),s(4397)

  with precondition: [D=1,E=0,A>=3,B>=1,C>=0,F>=0] 

* Chain [151]: 86*s(5273)+454*s(5274)+240*s(5278)+80*s(5279)+80*s(5280)+64*s(5281)+64*s(5282)+64*s(5283)+64*s(5284)+51
  Such that:s(5268) =< 1
s(5272) =< 2
s(5269) =< A
s(5270) =< B
s(5271) =< 2*B
s(5273) =< s(5272)
s(5274) =< s(5269)
s(5275) =< s(5270)
s(5276) =< s(5274)*s(5270)
s(5277) =< s(5274)*s(5275)
s(5278) =< s(5277)
s(5279) =< s(5276)
s(5280) =< s(5272)
s(5280) =< s(5270)
s(5281) =< s(5269)
s(5282) =< s(5269)
s(5281) =< s(5268)
s(5282) =< s(5268)
s(5281) =< s(5270)
s(5281) =< s(5271)
s(5281) =< s(5272)
s(5282) =< s(5272)
s(5283) =< s(5269)
s(5284) =< s(5269)
s(5283) =< s(5268)
s(5284) =< s(5268)
s(5283) =< s(5270)
s(5283) =< s(5271)

  with precondition: [D=2,A>=3,B>=1,C>=0,E>=1,F>=0] 

* Chain [150]: 24*s(5294)+6*s(5295)+576*s(5296)+608*s(5297)+120*s(5301)+40*s(5302)+128*s(5303)+128*s(5304)+1750*s(5305)+840*s(5309)+280*s(5310)+560*s(5311)+448*s(5312)+448*s(5313)+448*s(5314)+448*s(5315)+98*s(5316)+18481*s(5317)+94
  Such that:s(5288) =< 1
s(5289) =< 2
s(5285) =< 3
s(5286) =< 4
s(5290) =< A
s(5287) =< 2*A
s(5291) =< B
s(5292) =< 2*B
s(5287) =< s(5286)
s(5295) =< s(5287)
s(5296) =< s(5289)
s(5297) =< s(5285)
s(5298) =< s(5289)
s(5299) =< s(5297)*s(5289)
s(5300) =< s(5297)*s(5298)
s(5301) =< s(5300)
s(5302) =< s(5299)
s(5303) =< s(5287)
s(5303) =< s(5289)
s(5303) =< s(5286)
s(5304) =< s(5287)
s(5304) =< s(5289)
s(5305) =< s(5290)
s(5306) =< s(5291)
s(5307) =< s(5305)*s(5291)
s(5308) =< s(5305)*s(5306)
s(5309) =< s(5308)
s(5310) =< s(5307)
s(5311) =< s(5289)
s(5311) =< s(5291)
s(5312) =< s(5290)
s(5313) =< s(5290)
s(5312) =< s(5288)
s(5313) =< s(5288)
s(5312) =< s(5291)
s(5312) =< s(5292)
s(5312) =< s(5289)
s(5313) =< s(5289)
s(5314) =< s(5290)
s(5315) =< s(5290)
s(5314) =< s(5288)
s(5315) =< s(5288)
s(5314) =< s(5291)
s(5314) =< s(5292)
s(5316) =< s(5288)

Unbounded itvars
s(5294) :  eq(170,1),s(4597)
s(5317) :  eq(170,1),s(4627)

  with precondition: [A>=3,B>=2,C>=0,D>=2,E>=1,F>=0] 

* Chain [149]: 24*s(5326)+6*s(5328)+576*s(5329)+608*s(5330)+120*s(5334)+40*s(5335)+128*s(5336)+128*s(5337)+3178*s(5338)+1680*s(5342)+560*s(5343)+560*s(5344)+448*s(5345)+448*s(5346)+448*s(5347)+448*s(5348)+98*s(5349)+18481*s(5350)+94
  Such that:s(5320) =< 1
s(5321) =< 2
s(5318) =< 3
s(5319) =< 4
s(5322) =< A
s(5323) =< B
s(5324) =< 2*B
s(5327) =< s(5319)
s(5327) =< s(5322)
s(5328) =< s(5327)
s(5329) =< s(5321)
s(5330) =< s(5318)
s(5331) =< s(5321)
s(5332) =< s(5330)*s(5321)
s(5333) =< s(5330)*s(5331)
s(5334) =< s(5333)
s(5335) =< s(5332)
s(5336) =< s(5327)
s(5336) =< s(5321)
s(5336) =< s(5319)
s(5337) =< s(5327)
s(5337) =< s(5321)
s(5338) =< s(5322)
s(5339) =< s(5323)
s(5340) =< s(5338)*s(5323)
s(5341) =< s(5338)*s(5339)
s(5342) =< s(5341)
s(5343) =< s(5340)
s(5344) =< s(5321)
s(5344) =< s(5323)
s(5345) =< s(5322)
s(5346) =< s(5322)
s(5345) =< s(5320)
s(5346) =< s(5320)
s(5345) =< s(5323)
s(5345) =< s(5324)
s(5345) =< s(5321)
s(5346) =< s(5321)
s(5347) =< s(5322)
s(5348) =< s(5322)
s(5347) =< s(5320)
s(5348) =< s(5320)
s(5347) =< s(5323)
s(5347) =< s(5324)
s(5349) =< s(5320)

Unbounded itvars
s(5326) :  eq(171,1),s(4746)
s(5350) :  eq(171,1),s(4778)

  with precondition: [A>=4,B>=1,C>=0,D>=2,E>=1,F>=0] 

* Chain [148]...: 6*s(5355)+324*s(5356)+120*s(5360)+40*s(5361)+80*s(5362)+128*s(5363)+128*s(5364)+1045*s(5365)+45
  Such that:s(5351) =< 1
s(5352) =< 2
s(5353) =< B
s(5354) =< 2*B
s(5355) =< s(5351)
s(5356) =< s(5352)
s(5357) =< s(5353)
s(5358) =< s(5356)*s(5353)
s(5359) =< s(5356)*s(5357)
s(5360) =< s(5359)
s(5361) =< s(5358)
s(5362) =< s(5352)
s(5362) =< s(5353)
s(5363) =< s(5352)
s(5364) =< s(5352)
s(5363) =< s(5351)
s(5364) =< s(5351)
s(5363) =< s(5353)
s(5363) =< s(5354)

Unbounded itvars
s(5365) :  eq(172,1),it(132)

  with precondition: [A=2,B>=2,C>=0,D>=0,E>=0,F>=0] 

* Chain [147]...: 750*s(5371)+360*s(5375)+120*s(5376)+240*s(5377)+240*s(5378)+192*s(5379)+192*s(5380)+192*s(5381)+192*s(5382)+6998*s(5383)+45
  Such that:aux(1204) =< 1
aux(1205) =< 2
aux(1206) =< A
aux(1207) =< B
aux(1208) =< 2*B
s(5371) =< aux(1206)
s(5372) =< aux(1207)
s(5373) =< s(5371)*aux(1207)
s(5374) =< s(5371)*s(5372)
s(5375) =< s(5374)
s(5376) =< s(5373)
s(5377) =< aux(1205)
s(5378) =< aux(1205)
s(5377) =< aux(1207)
s(5379) =< aux(1206)
s(5380) =< aux(1206)
s(5379) =< aux(1204)
s(5380) =< aux(1204)
s(5379) =< aux(1207)
s(5379) =< aux(1208)
s(5379) =< aux(1205)
s(5380) =< aux(1205)
s(5381) =< aux(1206)
s(5382) =< aux(1206)
s(5381) =< aux(1204)
s(5382) =< aux(1204)
s(5381) =< aux(1207)
s(5381) =< aux(1208)

Unbounded itvars
s(5383) :  eq(173,1),it(132)

  with precondition: [A>=3,B>=2,C>=0,D>=0,E>=0,F>=0] 

* Chain [146]...: 1362*s(5407)+720*s(5411)+240*s(5412)+240*s(5413)+240*s(5414)+192*s(5415)+192*s(5416)+192*s(5417)+192*s(5418)+6998*s(5419)+45
  Such that:aux(1209) =< 1
aux(1210) =< 2
aux(1211) =< A
aux(1212) =< B
aux(1213) =< 2*B
s(5407) =< aux(1211)
s(5408) =< aux(1212)
s(5409) =< s(5407)*aux(1212)
s(5410) =< s(5407)*s(5408)
s(5411) =< s(5410)
s(5412) =< s(5409)
s(5413) =< aux(1210)
s(5414) =< aux(1210)
s(5413) =< aux(1212)
s(5415) =< aux(1211)
s(5416) =< aux(1211)
s(5415) =< aux(1209)
s(5416) =< aux(1209)
s(5415) =< aux(1212)
s(5415) =< aux(1213)
s(5415) =< aux(1210)
s(5416) =< aux(1210)
s(5417) =< aux(1211)
s(5418) =< aux(1211)
s(5417) =< aux(1209)
s(5418) =< aux(1209)
s(5417) =< aux(1212)
s(5417) =< aux(1213)

Unbounded itvars
s(5419) :  eq(174,1),it(132)

  with precondition: [A>=4,B>=1,C>=0,D>=0,E>=0,F>=0] 


#### Simplifying cost structure of CE 179 

#### Computing cost of phase [158,159] 

#### Simplifying cost structure of CE 177 

#### Simplifying cost structure of CE 178 

#### Cost of loops [158,159] 

 * loop 158:hd_helper(A,B,C,D,E,F,G) -> [hd_helper(A',B',C',D',E',F',G')] 
9
 * loop 159:hd_helper(A,B,C,D,E,F,G) -> [hd_helper(A',B',C',D',E',F',G')] 
9
##### Pending set hd_helper(A,B,C,D,E,F,G)
* Psum in Loop 158: [it(158)=<1]
* Psum in Loop 159: [it(159)=<1]

###### Computing sum for it(158)=<1  in Loop 158 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - Loop 159 is collaborative and bounds [it(159)] 
     - head Candidate: C 
       - Loop 159 is collaborative and bounds [it(159)] 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-E 
       - Loop 159 is collaborative
     - tail Candidate: A-1 
       - Loop 159 is collaborative and bounds [it(159)] 
     - tail Candidate: C 
       - Loop 159 is collaborative and bounds [it(159)] 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-E 
       - Loop 159 is collaborative
 * Adding constraints: [it(158)+it(159)=<A-1,it(158)+it(159)=<C,it(158)+it(159)=<A-1,it(158)+it(159)=<C,it(158)=<B-E,it(158)+it(159)=<A-A',it(158)+it(159)=<C-C',it(158)+it(159)=<A-A',it(158)+it(159)=<C-C',it(158)=<B-E-B'+E'] 

##### Pending set A
* Psum in Loop 159: [it(159)=<1]

###### Computing sum for it(159)=<1  in Loop 159 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(158)+it(159)=<A-1,it(158)+it(159)=<C,it(158)+it(159)=<A-1,it(158)+it(159)=<C,it(158)+it(159)=<A-A',it(158)+it(159)=<C-C',it(158)+it(159)=<A-A',it(158)+it(159)=<C-C'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [158,159] 

#### Simplifying cost structure of phase [158,159] 

#### Cost of phase [158,159]:hd_helper(A,B,C,D,E,F,G) -> [hd_helper(A',B',C',D',E',F',G')] 
9*it(158)+9*it(159)+0
  Such that:it(158) =< B-E
it(158) =< B-E-B'+E'
aux(1214) =< A
aux(1215) =< A-A'
aux(1216) =< C
aux(1217) =< C-C'
it(158) =< aux(1214)
it(159) =< aux(1214)
it(158) =< aux(1215)
it(159) =< aux(1215)
it(158) =< aux(1216)
it(159) =< aux(1216)
it(158) =< aux(1217)
it(159) =< aux(1217)

#### Simplifying cost structure of chain [[158,159],157] 
 * Joined equivalent variables [aux(1218),aux(1215),aux(1216),aux(1217)] into aux(1218)

#### Cost of chains of hd_helper(A,B,C,D,E,F,G):
* Chain [[158,159],157]: 9*it(158)+9*it(159)+3
  Such that:aux(1214) =< A
it(158) =< B-E
it(158) =< B-E+G
aux(1218) =< C
it(158) =< aux(1214)
it(159) =< aux(1214)
it(158) =< aux(1218)
it(159) =< aux(1218)

  with precondition: [C+D=F,B>=1,C>=1,D>=1,E>=0,G>=1,A>=C+1,G>=E] 

* Chain [157]: 3
  with precondition: [C=0,D=F,E=G,A>=0,B>=0,D>=0,E>=0] 


#### Simplifying cost structure of CE 180 
 * Renamed intermediate variables: 
[ (eq(181,1),aux(1214))>>s(5438), (eq(181,1),it(158))>>s(5439), (eq(181,1),aux(1218))>>s(5440), (eq(181,1),it(159))>>s(5441)]
 * Renamed intermediate variables: 
[ (eq(181,2),s(161))>>s(5442), (eq(181,2),s(165))>>s(5443), (eq(181,2),s(163))>>s(5444), (eq(181,2),s(166))>>s(5445), (eq(181,2),s(167))>>s(5446), (eq(181,2),s(168))>>s(5447), (eq(181,2),s(169))>>s(5448)]

#### Simplifying cost structure of CE 181 

#### Cost of chains of hd(A,B,C,D,E):
* Chain [161]: 10
  with precondition: [C=0,D=1,E=0,A>=0,B>=0] 

* Chain [160]: 9*s(5439)+9*s(5441)+5*s(5445)+5*s(5446)+5*s(5447)+5*s(5448)+10
  Such that:s(5438) =< A
s(5439) =< B
s(5440) =< C
s(5443) =< C+1
s(5445) =< s(5443)
s(5446) =< s(5443)
s(5447) =< s(5443)
s(5448) =< s(5443)
s(5439) =< s(5438)
s(5441) =< s(5438)
s(5439) =< s(5440)
s(5441) =< s(5440)

  with precondition: [C+1=D,B>=1,C>=1,E>=1,A>=C+1] 


#### Simplifying cost structure of CE 183 

#### Computing cost of phase [163] 

#### Simplifying cost structure of CE 182 

#### Cost of loops [163] 

 * loop 163:tl(A,B,C,D,E) -> [tl(A',B',C',D',E')] 
8
##### Pending set tl(A,B,C,D,E)
* Psum in Loop 163: [it(163)=<1]

###### Computing sum for it(163)=<1  in Loop 163 
   - Applying inductive sum strategy 
     - head Candidate: C 
     - head Candidate: A-1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C 
     - tail Candidate: A-1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(163)=<C,it(163)=<A-1,it(163)=<A-1,it(163)=<C,it(163)=<C-C',it(163)=<A-A',it(163)=<A-A',it(163)=<C-C'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [163] 

#### Simplifying cost structure of phase [163] 

#### Cost of phase [163]:tl(A,B,C,D,E) -> [tl(A',B',C',D',E')] 
8*it(163)+0
  Such that:it(163) =< A
it(163) =< A-A'
it(163) =< C
it(163) =< C-C'

#### Simplifying cost structure of chain [[163],162] 

#### Cost of chains of tl(A,B,C,D,E):
* Chain [[163],162]: 8*it(163)+3
  Such that:it(163) =< C

  with precondition: [A=C+D,B>=1,C>=1,E>=0,A>=C+1,B>=E] 

* Chain [162]: 3
  with precondition: [C=0,A=D,B=E,A>=0,B>=0] 


Closed-form bounds of sizeL(A,B,C,D,E,F,G): 
-------------------------------------
* Chain [[130],131] with precondition: [A=D,A=F+1,A=G+1,A>=2,B>=1,C>=0,E>=1] 
    - Upper bound: 6*A+3 
    - Complexity: n 
* Chain [131] with precondition: [A=1,B=0,D=1,E=0,F=0,G=0,C>=0] 
    - Upper bound: 3 
    - Complexity: constant 

### Maximum cost of sizeL(A,B,C,D,E,F,G): 6*A+3 
Asymptotic class: n 

Closed-form bounds of get_elem(A,B,C,D,E,F,G,H,I,J): 
-------------------------------------
* Chain [[66],67] with precondition: [F=G,F>=1,H>=1,I>=0,J>=1,A>=F+2,D>=F+2,B>=H,C>=I,E>=J] 
    - Upper bound: 8*F+5 
    - Complexity: n 
* Chain [67] with precondition: [F=0,G=0,A>=2,D>=2,H>=1,I>=0,J>=1,B>=H,C>=I,E>=J] 
    - Upper bound: 5 
    - Complexity: constant 

### Maximum cost of get_elem(A,B,C,D,E,F,G,H,I,J): 8*F+5 
Asymptotic class: n 

Closed-form bounds of get_2elems(A,B,C,D,E,F,G,H,I,J,K,L,M,N): 
-------------------------------------
* Chain [[46],48] with precondition: [K=1,M=1,I=J,B>=0,D>=1,F>=0,I>=1,L>=0,N>=1,A>=I+2,C>=I+2,E>=I+2,G>=I+2,H>=N] 
    - Upper bound: 10*J+8 
    - Complexity: n 
* Chain [[46],47] with precondition: [K=1,M=1,I=J,B>=0,F>=0,H>=1,I>=1,L>=0,N>=2,A>=I+2,C>=I+2,E>=I+2,G>=I+2,D>=N] 
    - Upper bound: 10*I+8 
    - Complexity: n 
* Chain [48] with precondition: [I=0,J=0,K=1,M=1,A>=2,B>=0,C>=2,D>=1,E>=2,F>=0,G>=2,L>=0,N>=1,H>=N] 
    - Upper bound: 8 
    - Complexity: constant 
* Chain [47] with precondition: [I=0,J=0,K=1,M=1,A>=2,B>=0,C>=2,E>=2,F>=0,G>=2,H>=1,L>=0,N>=2,D>=N] 
    - Upper bound: 8 
    - Complexity: constant 

### Maximum cost of get_2elems(A,B,C,D,E,F,G,H,I,J,K,L,M,N): 10*I+8 
Asymptotic class: n 

Closed-form bounds of subtract_row_helper(A,B,C,D,E,F,G): 
-------------------------------------
* Chain [[45],44] with precondition: [A=F,A>=2,B>=0,D>=0,E>=0,G>=0,C>=A] 
    - Upper bound: 10*A+3 
    - Complexity: n 
* Chain [[45],43] with precondition: [C=F,B>=0,C>=2,D>=0,E>=0,G>=0,A>=C+1] 
    - Upper bound: 10*C+6 
    - Complexity: n 
* Chain [44] with precondition: [A=1,F=1,B>=0,C>=0,D>=0,E>=0,G>=0] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [43] with precondition: [C=1,F=1,A>=2,B>=0,D>=0,E>=0,G>=0] 
    - Upper bound: 6 
    - Complexity: constant 

### Maximum cost of subtract_row_helper(A,B,C,D,E,F,G): max([10*C+3,10*A])+3 
Asymptotic class: n 

Closed-form bounds of subtract_row(A,B,C,D,E,F,G): 
-------------------------------------
* Chain [52] with precondition: [E=0,A=F,A>=2,B>=0,D>=0,G>=0,C>=A] 
    - Upper bound: 20*A+18 
    - Complexity: n 
* Chain [51] with precondition: [E=0,C=F,B>=0,C>=2,D>=0,G>=0,A>=C+1] 
    - Upper bound: 20*C+21 
    - Complexity: n 
* Chain [50] with precondition: [A=F,B>=0,D>=0,E>=1,G>=0,C>=A,A>=E+2] 
    - Upper bound: 20*A+20*E+18 
    - Complexity: n 
* Chain [49] with precondition: [C=F,B>=0,D>=0,E>=1,G>=0,A>=C+1,C>=E+2] 
    - Upper bound: 20*C+20*E+21 
    - Complexity: n 

### Maximum cost of subtract_row(A,B,C,D,E,F,G): 20*E+18+max([20*C+3,20*A]) 
Asymptotic class: n 

Closed-form bounds of subtract_helper(A,B,C,D,E,F,G,H,I): 
-------------------------------------
* Chain [[57,58,59,60],61] with precondition: [F=0,A=G,A>=2,C>=0,E>=0,H>=2,I>=0,B>=H,D>=H] 
    - Upper bound: 102*A+3+20*B*A+60*D*A 
    - Complexity: n^2 
* Chain [[53,54,55,56],61] with precondition: [A=G,A>=2,C>=0,E>=0,F>=1,I>=0,H>=F+2,B>=H,D>=H] 
    - Upper bound: 102*A+3+80*D*A+20*F*A+ (20*B-40)*A+ (40*D-80)*A 
    - Complexity: n^2 
* Chain [61] with precondition: [A=1,B=0,G=1,H=0,C>=0,D>=0,E>=0,F>=0,I>=0] 
    - Upper bound: 3 
    - Complexity: constant 

### Maximum cost of subtract_helper(A,B,C,D,E,F,G,H,I): 60*D*A+102*A+max([20*B*A,20*F*A+20*D*A+nat(B-2)*20*A+nat(D-2)*40*A])+3 
Asymptotic class: n^2 

Closed-form bounds of concat(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O): 
-------------------------------------
* Chain [[38,39,40,41],42] with precondition: [A=D,A+F=K+1,A+I=N+1,A>=2,B>=1,C>=0,E>=1,F>=1,G>=0,H>=0,I>=1,J>=0,L>=1,O>=1,L>=G,M>=H,O>=J,B+G>=L,E+J>=O] 
    - Upper bound: 20*D+2 
    - Complexity: n 
* Chain [42] with precondition: [A=1,B=0,D=1,E=0,F=K,G=L,H=M,I=N,J=O,C>=0,F>=0,G>=0,H>=0,I>=0,J>=0] 
    - Upper bound: 2 
    - Complexity: constant 

### Maximum cost of concat(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O): 20*D+2 
Asymptotic class: n 

Closed-form bounds of tl(A,B,C,D,E): 
-------------------------------------
* Chain [[163],162] with precondition: [A=C+D,B>=1,C>=1,E>=0,A>=C+1,B>=E] 
    - Upper bound: 8*C+3 
    - Complexity: n 
* Chain [162] with precondition: [C=0,A=D,B=E,A>=0,B>=0] 
    - Upper bound: 3 
    - Complexity: constant 

### Maximum cost of tl(A,B,C,D,E): 8*C+3 
Asymptotic class: n 

Closed-form bounds of hd_helper(A,B,C,D,E,F,G): 
-------------------------------------
* Chain [[158,159],157] with precondition: [C+D=F,B>=1,C>=1,D>=1,E>=0,G>=1,A>=C+1,G>=E] 
    - Upper bound: 9*A+3+nat(B-E)*9 
    - Complexity: n 
* Chain [157] with precondition: [C=0,D=F,E=G,A>=0,B>=0,D>=0,E>=0] 
    - Upper bound: 3 
    - Complexity: constant 

### Maximum cost of hd_helper(A,B,C,D,E,F,G): nat(B-E)*9+9*A+3 
Asymptotic class: n 

Closed-form bounds of reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O): 
-------------------------------------
* Chain [[68,69,70,71],72] with precondition: [A=D,A+F=K+1,A+I=N+1,A>=2,B>=1,C>=0,E>=1,F>=1,G>=0,H>=0,I>=1,J>=0,L>=1,O>=1,L>=G,M>=H,O>=J] 
    - Upper bound: 20*A+2 
    - Complexity: n 
* Chain [72] with precondition: [A=1,B=0,D=1,E=0,F=K,G=L,H=M,I=N,J=O,C>=0,F>=0,G>=0,H>=0,I>=0,J>=0] 
    - Upper bound: 2 
    - Complexity: constant 

### Maximum cost of reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O): 20*A+2 
Asymptotic class: n 

Closed-form bounds of reverseL(A,B,C,D,E,F,G,H,I,J): 
-------------------------------------
* Chain [74] with precondition: [A=1,B=0,D=1,E=0,F=1,G=0,I=1,J=0,C>=0,H>=0] 
    - Upper bound: 4 
    - Complexity: constant 
* Chain [73] with precondition: [A=D,A=F,A=I,A>=2,B>=1,C>=0,E>=1,G>=1,H>=0,J>=1] 
    - Upper bound: 20*D+4 
    - Complexity: n 

### Maximum cost of reverseL(A,B,C,D,E,F,G,H,I,J): 20*D+4 
Asymptotic class: n 
 * Joined equivalent variables [s(5445),s(5446),s(5447),s(5448)] into s(5445)

Closed-form bounds of hd(A,B,C,D,E): 
-------------------------------------
* Chain [161] with precondition: [C=0,D=1,E=0,A>=0,B>=0] 
    - Upper bound: 10 
    - Complexity: constant 
* Chain [160] with precondition: [C+1=D,B>=1,C>=1,E>=1,A>=C+1] 
    - Upper bound: 9*A+9*B+20*C+30 
    - Complexity: n 

### Maximum cost of hd(A,B,C,D,E): 9*A+9*B+20*C+30 
Asymptotic class: n 

Closed-form bounds of split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U): 
-------------------------------------
* Chain [[92,93,94,95],90] with precondition: [O=1,S=1,J=M,F+P=A+H,D+H=F+T,F+I=G+H,C>=0,H>=0,J>=1,K>=0,L>=0,N>=0,Q>=1,R>=0,U>=1,F>=H+1,B>=Q,E>=U,G+H>=F,A+2*H>=2*F+J,D+2*H>=2*F+J] 
    - Upper bound: 32*A+20*F-20*H+20*M+8 
    - Complexity: n 
* Chain [[92,93,94,95],89] with precondition: [O=1,S=1,J=M,F+P=A+H,D+H=F+T,F+I=G+H,C>=0,E>=1,H>=0,J>=1,K>=0,L>=0,N>=0,Q>=1,R>=0,U>=1,F>=H+1,B>=Q,G+H>=F,A+2*H>=2*F+J,D+2*H>=2*F+J] 
    - Upper bound: 32*A+20*G-20*I+20*M+8 
    - Complexity: n 
* Chain [[92,93,94,95],88] with precondition: [O=1,S=1,J=M,F+P=A+H,F+I=G+H,F+J=H+T,C>=0,H>=0,J>=1,K>=0,L>=0,N>=0,Q>=1,R>=0,U>=1,F>=H+1,B>=Q,E>=U,D+H>=F+1,G+H>=F,A+2*H>=2*F+J,J+2*F>=2*H+D+1] 
    - Upper bound: 32*A+20*F-20*H+20*J+8 
    - Complexity: n 
* Chain [[92,93,94,95],87] with precondition: [O=1,S=1,J=M,F+P=A+H,F+I=G+H,F+J=H+T,C>=0,E>=1,H>=0,J>=1,K>=0,L>=0,N>=0,Q>=1,R>=0,U>=1,F>=H+1,B>=Q,D+H>=F+1,G+H>=F,A+2*H>=2*F+J,J+2*F>=2*H+D+1] 
    - Upper bound: 32*A+20*F-20*H+20*J+8 
    - Complexity: n 
* Chain [[92,93,94,95],86] with precondition: [O=1,S=1,J=M,F+P=A+H,D+H=F+T,F+I=G+H,B>=1,C>=0,H>=0,J>=1,K>=0,L>=0,N>=0,Q>=1,R>=0,U>=1,F>=H+1,E>=U,G+H>=F,A+2*H>=2*F+J,D+2*H>=2*F+J] 
    - Upper bound: 32*A+20*F-20*H+20*M+8 
    - Complexity: n 
* Chain [[92,93,94,95],85] with precondition: [O=1,S=1,J=M,F+P=A+H,D+H=F+T,F+I=G+H,B>=1,C>=0,E>=1,H>=0,J>=1,K>=0,L>=0,N>=0,Q>=1,R>=0,U>=1,F>=H+1,G+H>=F,A+2*H>=2*F+J,D+2*H>=2*F+J] 
    - Upper bound: 32*A+20*G-20*I+20*M+8 
    - Complexity: n 
* Chain [[92,93,94,95],84] with precondition: [O=1,S=1,J=M,F+P=A+H,F+I=G+H,F+J=H+T,B>=1,C>=0,H>=0,J>=1,K>=0,L>=0,N>=0,Q>=1,R>=0,U>=1,F>=H+1,E>=U,D+H>=F+1,G+H>=F,A+2*H>=2*F+J,J+2*F>=2*H+D+1] 
    - Upper bound: 32*A+20*F-20*H+20*J+8 
    - Complexity: n 
* Chain [[92,93,94,95],83] with precondition: [O=1,S=1,J=M,F+P=A+H,F+I=G+H,F+J=H+T,B>=1,C>=0,E>=1,H>=0,J>=1,K>=0,L>=0,N>=0,Q>=1,R>=0,U>=1,F>=H+1,D+H>=F+1,G+H>=F,A+2*H>=2*F+J,J+2*F>=2*H+D+1] 
    - Upper bound: 32*A+20*F-20*H+20*J+8 
    - Complexity: n 
* Chain [[92,93,94,95],82] with precondition: [O=1,S=1,J=M,D+H=F+T,F+I=G+H,F+J=H+P,C>=0,H>=0,J>=1,K>=0,L>=0,N>=0,Q>=1,R>=0,U>=1,F>=H+1,B>=Q,E>=U,A+H>=F+1,G+H>=F,D+2*H>=2*F+J,J+2*F>=2*H+A+1] 
    - Upper bound: 32*A+20*F-20*H+20*M+8 
    - Complexity: n 
* Chain [[92,93,94,95],81] with precondition: [O=1,S=1,J=M,D+H=F+T,F+I=G+H,F+J=H+P,C>=0,E>=1,H>=0,J>=1,K>=0,L>=0,N>=0,Q>=1,R>=0,U>=1,F>=H+1,B>=Q,A+H>=F+1,G+H>=F,D+2*H>=2*F+J,J+2*F>=2*H+A+1] 
    - Upper bound: 32*A+20*G-20*I+20*J+8 
    - Complexity: n 
* Chain [[92,93,94,95],80] with precondition: [O=1,S=1,J=M,F+I=G+H,F+J=H+P,F+J=H+T,C>=0,H>=0,J>=1,K>=0,L>=0,N>=0,Q>=1,R>=0,U>=1,F>=H+1,B>=Q,E>=U,A+H>=F+1,D+H>=F+1,G+H>=F,J+2*F>=2*H+A+1,J+2*F>=2*H+D+1] 
    - Upper bound: 32*A+20*F-20*H+20*M+8 
    - Complexity: n 
* Chain [[92,93,94,95],79] with precondition: [O=1,S=1,J=M,F+I=G+H,F+J=H+P,F+J=H+T,C>=0,E>=1,H>=0,J>=1,K>=0,L>=0,N>=0,Q>=1,R>=0,U>=1,F>=H+1,B>=Q,A+H>=F+1,D+H>=F+1,G+H>=F,J+2*F>=2*H+A+1,J+2*F>=2*H+D+1] 
    - Upper bound: 32*A+20*F-20*H+20*M+8 
    - Complexity: n 
* Chain [[92,93,94,95],78] with precondition: [O=1,S=1,J=M,D+H=F+T,F+I=G+H,F+J=H+P,B>=1,C>=0,H>=0,J>=1,K>=0,L>=0,N>=0,Q>=1,R>=0,U>=1,F>=H+1,E>=U,A+H>=F+1,G+H>=F,D+2*H>=2*F+J,J+2*F>=2*H+A+1] 
    - Upper bound: 32*A+20*F-20*H+20*M+8 
    - Complexity: n 
* Chain [[92,93,94,95],77] with precondition: [O=1,S=1,J=M,D+H=F+T,F+I=G+H,F+J=H+P,B>=1,C>=0,E>=1,H>=0,J>=1,K>=0,L>=0,N>=0,Q>=1,R>=0,U>=1,F>=H+1,A+H>=F+1,G+H>=F,D+2*H>=2*F+J,J+2*F>=2*H+A+1] 
    - Upper bound: 32*A+20*F-20*H+20*M+8 
    - Complexity: n 
* Chain [[92,93,94,95],76] with precondition: [O=1,S=1,J=M,F+I=G+H,F+J=H+P,F+J=H+T,B>=1,C>=0,H>=0,J>=1,K>=0,L>=0,N>=0,Q>=1,R>=0,U>=1,F>=H+1,E>=U,A+H>=F+1,D+H>=F+1,G+H>=F,J+2*F>=2*H+A+1,J+2*F>=2*H+D+1] 
    - Upper bound: 32*A+20*F-20*H+20*M+8 
    - Complexity: n 
* Chain [[92,93,94,95],75] with precondition: [O=1,S=1,J=M,F+I=G+H,F+J=H+P,F+J=H+T,B>=1,C>=0,E>=1,H>=0,J>=1,K>=0,L>=0,N>=0,Q>=1,R>=0,U>=1,F>=H+1,A+H>=F+1,D+H>=F+1,G+H>=F,J+2*F>=2*H+A+1,J+2*F>=2*H+D+1] 
    - Upper bound: 32*A+20*F-20*H+20*M+8 
    - Complexity: n 
* Chain [91] with precondition: [J=1,K=0,M=1,N=0,O=1,S=1,F=H,G=I,A=P,B=Q,D=T,E=U,A>=1,B>=0,C>=0,D>=1,E>=0,F>=0,G>=0,L>=0,R>=C] 
    - Upper bound: 8 
    - Complexity: constant 
* Chain [90] with precondition: [O=1,S=1,F=H,G=I,J=M,A=P,B=Q,D=T,E=U,B>=1,C>=0,E>=1,F>=0,G>=0,J>=2,K>=1,L>=0,N>=1,R>=C,A>=J,D>=J] 
    - Upper bound: 20*M+8 
    - Complexity: n 
* Chain [89] with precondition: [O=1,S=1,F=H,G=I,J=M,A=P,B=Q,D=T,B>=1,C>=0,E>=0,F>=0,G>=0,J>=2,K>=1,L>=0,N>=1,R>=C,U>=E+1,A>=J,D>=J] 
    - Upper bound: 20*M+8 
    - Complexity: n 
* Chain [88] with precondition: [O=1,S=1,F=H,G=I,J=M,A=P,B=Q,J=T,E=U,B>=1,C>=0,D>=1,E>=1,F>=0,G>=0,K>=1,L>=0,N>=1,R>=C,J>=D+1,A>=J] 
    - Upper bound: 20*M+8 
    - Complexity: n 
* Chain [87] with precondition: [O=1,S=1,F=H,G=I,J=M,A=P,B=Q,J=T,B>=1,C>=0,D>=1,E>=0,F>=0,G>=0,K>=1,L>=0,N>=1,R>=C,J>=D+1,U>=E+1,A>=J] 
    - Upper bound: 20*M+8 
    - Complexity: n 
* Chain [86] with precondition: [O=1,S=1,F=H,G=I,J=M,A=P,D=T,E=U,B>=0,C>=0,E>=1,F>=0,G>=0,J>=2,K>=1,L>=0,N>=1,Q>=B+1,R>=C,A>=J,D>=J] 
    - Upper bound: 20*M+8 
    - Complexity: n 
* Chain [85] with precondition: [O=1,S=1,F=H,G=I,J=M,A=P,D=T,B>=0,C>=0,E>=0,F>=0,G>=0,J>=2,K>=1,L>=0,N>=1,Q>=B+1,R>=C,U>=E+1,A>=J,D>=J] 
    - Upper bound: 20*M+8 
    - Complexity: n 
* Chain [84] with precondition: [O=1,S=1,F=H,G=I,J=M,A=P,J=T,E=U,B>=0,C>=0,D>=1,E>=1,F>=0,G>=0,K>=1,L>=0,N>=1,Q>=B+1,R>=C,J>=D+1,A>=J] 
    - Upper bound: 20*M+8 
    - Complexity: n 
* Chain [83] with precondition: [O=1,S=1,F=H,G=I,J=M,A=P,J=T,B>=0,C>=0,D>=1,E>=0,F>=0,G>=0,K>=1,L>=0,N>=1,Q>=B+1,R>=C,J>=D+1,U>=E+1,A>=J] 
    - Upper bound: 20*M+8 
    - Complexity: n 
* Chain [82] with precondition: [O=1,S=1,F=H,G=I,J=M,J=P,B=Q,D=T,E=U,A>=1,B>=1,C>=0,E>=1,F>=0,G>=0,K>=1,L>=0,N>=1,J>=A+1,R>=C,D>=J] 
    - Upper bound: 20*J+8 
    - Complexity: n 
* Chain [81] with precondition: [O=1,S=1,F=H,G=I,J=M,J=P,B=Q,D=T,A>=1,B>=1,C>=0,E>=0,F>=0,G>=0,K>=1,L>=0,N>=1,J>=A+1,R>=C,U>=E+1,D>=J] 
    - Upper bound: 20*J+8 
    - Complexity: n 
* Chain [80] with precondition: [O=1,S=1,F=H,G=I,J=M,J=P,B=Q,J=T,E=U,A>=1,B>=1,C>=0,D>=1,E>=1,F>=0,G>=0,K>=1,L>=0,N>=1,J>=A+1,R>=C,J>=D+1] 
    - Upper bound: 20*M+8 
    - Complexity: n 
* Chain [79] with precondition: [O=1,S=1,F=H,G=I,J=M,J=P,B=Q,J=T,A>=1,B>=1,C>=0,D>=1,E>=0,F>=0,G>=0,K>=1,L>=0,N>=1,J>=A+1,R>=C,J>=D+1,U>=E+1] 
    - Upper bound: 20*M+8 
    - Complexity: n 
* Chain [78] with precondition: [O=1,S=1,F=H,G=I,J=M,J=P,D=T,E=U,A>=1,B>=0,C>=0,E>=1,F>=0,G>=0,K>=1,L>=0,N>=1,J>=A+1,Q>=B+1,R>=C,D>=J] 
    - Upper bound: 20*J+8 
    - Complexity: n 
* Chain [77] with precondition: [O=1,S=1,F=H,G=I,J=M,J=P,D=T,A>=1,B>=0,C>=0,E>=0,F>=0,G>=0,K>=1,L>=0,N>=1,J>=A+1,Q>=B+1,R>=C,U>=E+1,D>=J] 
    - Upper bound: 20*J+8 
    - Complexity: n 
* Chain [76] with precondition: [O=1,S=1,F=H,G=I,J=M,J=P,J=T,E=U,A>=1,B>=0,C>=0,D>=1,E>=1,F>=0,G>=0,K>=1,L>=0,N>=1,J>=A+1,Q>=B+1,R>=C,J>=D+1] 
    - Upper bound: 20*M+8 
    - Complexity: n 
* Chain [75] with precondition: [O=1,S=1,F=H,G=I,J=M,J=P,J=T,A>=1,B>=0,C>=0,D>=1,E>=0,F>=0,G>=0,K>=1,L>=0,N>=1,J>=A+1,Q>=B+1,R>=C,J>=D+1,U>=E+1] 
    - Upper bound: 20*M+8 
    - Complexity: n 

### Maximum cost of split_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U): 32*A+20*F-20*H+20*J+8 
Asymptotic class: n 

Closed-form bounds of split(A,B,C,D,E,F,G,H,I,J,K,L,M,N): 
-------------------------------------
* Chain [100] with precondition: [F=0,G=0,H=1,L=1,A=I,B=J,D=M,E=N,A>=1,B>=0,C>=0,D>=1,E>=0,K>=C] 
    - Upper bound: 11 
    - Complexity: constant 
* Chain [99] with precondition: [H=1,L=1,F=G,F+1=I,F+1=M,B>=1,C>=0,E>=1,J>=1,K>=0,N>=1,2*F>=A,2*F>=D,A>=F+1,D>=F+1] 
    - Upper bound: 128*A+80*F+91 
    - Complexity: n 
* Chain [98] with precondition: [H=1,L=1,F=G,F+1=I,F+M=D,B>=1,C>=0,E>=1,J>=1,K>=0,N>=1,D>=2*F+1,2*F>=A,A>=F+1] 
    - Upper bound: 128*A+80*G+91 
    - Complexity: n 
* Chain [97] with precondition: [H=1,L=1,F=G,F+1=M,F+I=A,B>=1,C>=0,E>=1,J>=1,K>=0,N>=1,A>=2*F+1,2*F>=D,D>=F+1] 
    - Upper bound: 128*A+80*F+91 
    - Complexity: n 
* Chain [96] with precondition: [H=1,L=1,F=G,F+I=A,F+M=D,B>=1,C>=0,E>=1,F>=1,J>=1,K>=0,N>=1,A>=2*F+1,D>=2*F+1] 
    - Upper bound: 128*A+80*G+91 
    - Complexity: n 

### Maximum cost of split(A,B,C,D,E,F,G,H,I,J,K,L,M,N): 128*A+80*F+91 
Asymptotic class: n 

Closed-form bounds of subtract(A,B,C,D,E,F,G): 
-------------------------------------
* Chain [112] with precondition: [A=2,D=0,E=1,F=0,B>=1,C>=0,G>=0] 
    - Upper bound: 865 
    - Complexity: constant 
* Chain [111] with precondition: [A=2,D=0,E=2,B>=1,C>=0,F>=1,G>=0] 
    - Upper bound: 640*B+1761 
    - Complexity: n 
* Chain [110] with precondition: [A=2,D=0,E=3,B>=2,C>=0,F>=2,G>=0] 
    - Upper bound: 320*B+1353 
    - Complexity: n 
* Chain [109] with precondition: [D=0,E=1,F=0,A>=3,B>=1,C>=0,G>=0] 
    - Upper bound: 609 
    - Complexity: constant 
* Chain [108] with precondition: [D=0,B>=1,C>=0,E>=2,F>=1,G>=0,A>=E+1] 
    - Upper bound: 448*A+609+320*B*A 
    - Complexity: n^2 
* Chain [107] with precondition: [D=0,B>=2,C>=0,E>=3,F>=2,G>=0,2*A>=E+3] 
    - Upper bound: 244*A+609+160*B*A 
    - Complexity: n^2 
* Chain [106] with precondition: [E=1,F=0,B>=1,C>=0,D>=1,G>=0,A>=2*D+3] 
    - Upper bound: 256*A+176*D+353 
    - Complexity: n 
* Chain [105] with precondition: [E=1,F=0,B>=1,C>=0,D>=1,G>=0,2*D+2>=A,A>=D+2] 
    - Upper bound: 256*A+176*D+353 
    - Complexity: n 
* Chain [104] with precondition: [B>=1,C>=0,D>=1,E>=2,F>=1,G>=0,A>=2*D+3,A>=D+E+1] 
    - Upper bound: 448*A-448*D+ (256*A+33+ (A-D)* (320*B)+16*D+ (A-D)* (80*D)+ (A-D)* (nat(B-2)*80)+ (160*D+320)) 
    - Complexity: n^2 
* Chain [103] with precondition: [B>=1,C>=0,D>=1,E>=2,F>=1,G>=0,2*D+2>=A,A>=D+2,D+2>=E] 
    - Upper bound: 256*A+33+ (D+2)* (320*B)+16*D+ (D+2)* (80*D)+ (D+2)* (nat(B-2)*80)+ (608*D+1216) 
    - Complexity: n^2 
* Chain [102] with precondition: [C>=0,D>=1,E>=3,G>=0,A>=2*D+3,B>=D+2,F>=D+2,2*A>=2*D+E+3] 
    - Upper bound: 244*A-244*D+ (256*A+33+ (A-D)* (160*B)+16*D+ (A-D)* (80*D)+ (80*B-160)* (A-D)+ (160*D+320)) 
    - Complexity: n^2 
* Chain [101] with precondition: [C>=0,D>=1,E>=3,G>=0,2*D+2>=A,A>=D+2,B>=D+2,F>=D+2,2*D+3>=E] 
    - Upper bound: 256*A+33+ (D+2)* (160*B)+16*D+ (D+2)* (80*D)+ (80*B-160)* (D+2)+ (404*D+808) 
    - Complexity: n^2 

### Maximum cost of subtract(A,B,C,D,E,F,G): max([640*B+1728,244*A+max([12*A+max([176*D+320+max([ (D+2)* (160*B)+ (D+2)* (80*D)+ (D+2)* (nat(B-2)*80)+ (244*D+488)+ (204*D+408+ (D+2)* (160*B)),244*A-244*D+ ((A-D)* (160*B)+ (A-D)* (80*D)+ (A-D)* (nat(B-2)*80))+ (204*A-204*D+ (A-D)* (160*B))]),192*A+576+320*B*A]),160*B*A+576])])+33 
Asymptotic class: n^2 
 * Joined equivalent variables [aux(269),aux(288)] into aux(269)
 * Joined equivalent variables [aux(268),aux(287)] into aux(268)
 * Joined equivalent variables [aux(271),s(1629)] into aux(271)
 * Joined equivalent variables [aux(289),s(1496)] into aux(289)
 * Joined equivalent variables [s(1473),s(1611)] into s(1473)
 * Joined equivalent variables [aux(398),aux(438)] into aux(398)
 * Joined equivalent variables [aux(397),aux(431)] into aux(397)
 * Joined equivalent variables [s(1612),s(1613),s(1614),s(1615),s(1616),s(1617),s(1637),s(1638),s(1639),s(1640),s(1641),s(1642),s(1754)] into s(1612)
 * Joined equivalent variables [s(1611),s(1622),s(1623)] into s(1611)
 * Joined equivalent variables [s(1620),s(1621)] into s(1620)
 * Joined equivalent variables [s(1636),s(1647),s(1648)] into s(1636)
 * Joined equivalent variables [s(1645),s(1646)] into s(1645)
 * Joined equivalent variables [s(1755),s(1756),s(1759),s(1760)] into s(1755)
 * Joined equivalent variables [s(1757),s(1758)] into s(1757)
 * Joined equivalent variables [s(1618),s(1619)] into s(1618)
 * Joined equivalent variables [s(1643),s(1644)] into s(1643)
 * Joined equivalent variables [aux(399),aux(445)] into aux(399)
 * Joined equivalent variables [s(1629),s(1654)] into s(1629)
 * Joined equivalent variables [s(1628),s(1653)] into s(1628)
 * Joined equivalent variables [s(1611),s(1636)] into s(1611)
 * Joined equivalent variables [s(1618),s(1643)] into s(1618)
 * Joined equivalent variables [s(1620),s(1645)] into s(1620)
 * Joined equivalent variables [aux(470),aux(510)] into aux(470)
 * Joined equivalent variables [aux(469),aux(503)] into aux(469)
 * Joined equivalent variables [s(1612),s(1613),s(1614),s(1615),s(1616),s(1617),s(1637),s(1638),s(1639),s(1640),s(1641),s(1642)] into s(1612)
 * Joined equivalent variables [s(1611),s(1622),s(1623)] into s(1611)
 * Joined equivalent variables [s(1620),s(1621)] into s(1620)
 * Joined equivalent variables [s(1636),s(1647),s(1648)] into s(1636)
 * Joined equivalent variables [s(1645),s(1646)] into s(1645)
 * Joined equivalent variables [s(1675),s(1676)] into s(1675)
 * Joined equivalent variables [s(1680),s(1681)] into s(1680)
 * Joined equivalent variables [s(1678),s(1679)] into s(1678)
 * Joined equivalent variables [s(1618),s(1619)] into s(1618)
 * Joined equivalent variables [s(1643),s(1644)] into s(1643)
 * Joined equivalent variables [aux(471),aux(517)] into aux(471)
 * Joined equivalent variables [s(1629),s(1654)] into s(1629)
 * Joined equivalent variables [s(1628),s(1653)] into s(1628)
 * Joined equivalent variables [s(1611),s(1636)] into s(1611)
 * Joined equivalent variables [s(1618),s(1643)] into s(1618)
 * Joined equivalent variables [s(1620),s(1645)] into s(1620)
 * Joined equivalent variables [aux(538),aux(578)] into aux(538)
 * Joined equivalent variables [aux(537),aux(571)] into aux(537)
 * Joined equivalent variables [s(1703),s(1704)] into s(1703)
 * Joined equivalent variables [s(1612),s(1613),s(1614),s(1615),s(1616),s(1617),s(1637),s(1638),s(1639),s(1640),s(1641),s(1642),s(1718),s(1719)] into s(1612)
 * Joined equivalent variables [s(1611),s(1622),s(1623)] into s(1611)
 * Joined equivalent variables [s(1620),s(1621)] into s(1620)
 * Joined equivalent variables [s(1636),s(1647),s(1648)] into s(1636)
 * Joined equivalent variables [s(1645),s(1646)] into s(1645)
 * Joined equivalent variables [s(1716),s(1723)] into s(1716)
 * Joined equivalent variables [s(1726),s(1727)] into s(1726)
 * Joined equivalent variables [s(1724),s(1725)] into s(1724)
 * Joined equivalent variables [s(1618),s(1619)] into s(1618)
 * Joined equivalent variables [s(1643),s(1644)] into s(1643)
 * Joined equivalent variables [aux(539),aux(585)] into aux(539)
 * Joined equivalent variables [s(1629),s(1654)] into s(1629)
 * Joined equivalent variables [s(1735),s(1736)] into s(1735)
 * Joined equivalent variables [s(1628),s(1653)] into s(1628)
 * Joined equivalent variables [s(1611),s(1636)] into s(1611)
 * Joined equivalent variables [s(1618),s(1643)] into s(1618)
 * Joined equivalent variables [s(1720),s(1721)] into s(1720)
 * Joined equivalent variables [s(1620),s(1645)] into s(1620)
 * Joined equivalent variables [aux(348),s(1455)] into aux(348)
 * Joined equivalent variables [s(1475),s(1478)] into s(1475)
 * Joined equivalent variables [s(1483),s(1484)] into s(1483)
 * Joined equivalent variables [s(1481),s(1482)] into s(1481)
 * Joined equivalent variables [s(1675),s(1676)] into s(1675)
 * Joined equivalent variables [s(1680),s(1681)] into s(1680)
 * Joined equivalent variables [s(1678),s(1679)] into s(1678)
 * Joined equivalent variables [s(1474),s(1480)] into s(1474)
 * Joined equivalent variables [s(1493),s(1494)] into s(1493)
 * Joined equivalent variables [s(1476),s(1477)] into s(1476)
 * Joined equivalent variables [aux(369),s(1455)] into aux(369)
 * Joined equivalent variables [s(1703),s(1704)] into s(1703)
 * Joined equivalent variables [s(1475),s(1478),s(1718),s(1719)] into s(1475)
 * Joined equivalent variables [s(1483),s(1484)] into s(1483)
 * Joined equivalent variables [s(1481),s(1482)] into s(1481)
 * Joined equivalent variables [s(1716),s(1723)] into s(1716)
 * Joined equivalent variables [s(1726),s(1727)] into s(1726)
 * Joined equivalent variables [s(1724),s(1725)] into s(1724)
 * Joined equivalent variables [s(1474),s(1480)] into s(1474)
 * Joined equivalent variables [s(1735),s(1736)] into s(1735)
 * Joined equivalent variables [s(1493),s(1494)] into s(1493)
 * Joined equivalent variables [s(1476),s(1477)] into s(1476)
 * Joined equivalent variables [s(1720),s(1721)] into s(1720)
 * Joined equivalent variables [s(1673),s(1674)] into s(1673)
 * Joined equivalent variables [s(1671),s(1672)] into s(1671)
 * Joined equivalent variables [s(1669),s(1670)] into s(1669)
 * Joined equivalent variables [s(1703),s(1704)] into s(1703)
 * Joined equivalent variables [s(1701),s(1702)] into s(1701)
 * Joined equivalent variables [s(1714),s(1715)] into s(1714)
 * Joined equivalent variables [s(1712),s(1713)] into s(1712)
 * Joined equivalent variables [s(1697),s(1711)] into s(1697)
 * Joined equivalent variables [s(1706),s(1707)] into s(1706)
 * Joined equivalent variables [s(1708),s(1709)] into s(1708)
 * Joined equivalent variables [s(1752),s(1753)] into s(1752)
 * Joined equivalent variables [s(1750),s(1751)] into s(1750)
 * Joined equivalent variables [s(1748),s(1749)] into s(1748)
 * Joined equivalent variables [s(1671),s(1672)] into s(1671)
 * Joined equivalent variables [s(1673),s(1674)] into s(1673)
 * Joined equivalent variables [s(1669),s(1670)] into s(1669)
 * Joined equivalent variables [s(1703),s(1704)] into s(1703)
 * Joined equivalent variables [s(1701),s(1702)] into s(1701)
 * Joined equivalent variables [s(1712),s(1713)] into s(1712)
 * Joined equivalent variables [s(1714),s(1715)] into s(1714)
 * Joined equivalent variables [s(1697),s(1711)] into s(1697)
 * Joined equivalent variables [s(1706),s(1707)] into s(1706)
 * Joined equivalent variables [s(1708),s(1709)] into s(1708)
 * Joined equivalent variables [s(1750),s(1751)] into s(1750)
 * Joined equivalent variables [s(1752),s(1753)] into s(1752)
 * Joined equivalent variables [s(1748),s(1749)] into s(1748)
 * Joined equivalent variables [s(1671),s(1672)] into s(1671)
 * Joined equivalent variables [s(1673),s(1674)] into s(1673)
 * Joined equivalent variables [s(1669),s(1670)] into s(1669)
 * Joined equivalent variables [s(1703),s(1704)] into s(1703)
 * Joined equivalent variables [s(1701),s(1702)] into s(1701)
 * Joined equivalent variables [s(1712),s(1713)] into s(1712)
 * Joined equivalent variables [s(1714),s(1715)] into s(1714)
 * Joined equivalent variables [s(1697),s(1711)] into s(1697)
 * Joined equivalent variables [s(1706),s(1707)] into s(1706)
 * Joined equivalent variables [s(1708),s(1709)] into s(1708)

Closed-form bounds of echelon_helper(A,B,C,D,E,F,G,H,I,J): 
-------------------------------------
* Chain [[114,116],[113],125] with precondition: [H=1,I=0,B>=1,C>=0,D>=1,E>=3,F>=1,G>=0,J>=0,A>=2*D+3,B+2*A>=4*D+9] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [[114,116],[113],117,125] with precondition: [H=1,I=0,B>=1,C>=0,D>=1,E>=4,F>=1,G>=0,J>=0,A>=2*D+3,B+2*A>=4*D+9] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [[114,116],[113],115,125] with precondition: [H=1,I=0,B>=1,C>=0,D>=1,E>=4,F>=1,G>=0,J>=0,A>=2*D+3,B+2*A>=4*D+9] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [[114,116],125] with precondition: [H=1,I=0,B>=1,C>=0,D>=1,E>=2,F>=1,G>=0,J>=0,A>=2*D+3] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [[114,116],118,125] with precondition: [H=1,I=0,B>=1,C>=0,D>=1,E>=3,F>=1,G>=0,J>=0,A>=2*D+3] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [[114,116],117,125] with precondition: [H=1,I=0,B>=1,C>=0,D>=1,E>=3,F>=1,G>=0,J>=0,A>=2*D+3] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [[114,116],115,125] with precondition: [H=1,I=0,B>=1,C>=0,D>=1,E>=3,F>=1,G>=0,J>=0,A>=2*D+3] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [[113],125] with precondition: [H=1,I=0,C>=0,D>=1,E>=2,F>=1,G>=0,J>=0,2*D+2>=A,A>=D+2,B>=D+2] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [[113],117,125] with precondition: [H=1,I=0,C>=0,D>=1,E>=3,F>=1,G>=0,J>=0,2*D+2>=A,A>=D+2,B>=D+2] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [[113],115,125] with precondition: [H=1,I=0,C>=0,D>=1,E>=3,F>=1,G>=0,J>=0,2*D+2>=A,A>=D+2,B>=D+2] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [125] with precondition: [E=1,F=0,H=1,I=0,A>=0,B>=0,C>=0,D>=0,G>=0,J>=0] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [124,125] with precondition: [A=2,D=0,E=2,H=1,I=0,B>=1,C>=0,F>=1,G>=0,J>=0] 
    - Upper bound: 875 
    - Complexity: constant 
* Chain [123,125] with precondition: [A=2,D=0,E=2,H=1,I=0,B>=1,C>=0,F>=1,G>=0,J>=0] 
    - Upper bound: 640*B+1771 
    - Complexity: n 
* Chain [122,[113],125] with precondition: [A=2,D=0,H=1,I=0,B>=2,C>=0,E>=3,F>=1,G>=0,J>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [122,[113],117,125] with precondition: [A=2,D=0,H=1,I=0,B>=2,C>=0,E>=4,F>=1,G>=0,J>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [122,[113],115,125] with precondition: [A=2,D=0,H=1,I=0,B>=2,C>=0,E>=4,F>=1,G>=0,J>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [122,125] with precondition: [A=2,D=0,E=2,H=1,I=0,B>=2,C>=0,F>=1,G>=0,J>=0] 
    - Upper bound: 320*B+1363 
    - Complexity: n 
* Chain [122,117,125] with precondition: [A=2,D=0,E=3,H=1,I=0,B>=2,C>=0,F>=1,G>=0,J>=0] 
    - Upper bound: 320*B+2667 
    - Complexity: n 
* Chain [122,115,125] with precondition: [A=2,D=0,E=3,H=1,I=0,B>=2,C>=0,F>=1,G>=0,J>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [121,125] with precondition: [D=0,E=2,H=1,I=0,A>=3,B>=1,C>=0,F>=1,G>=0,J>=0] 
    - Upper bound: 619 
    - Complexity: constant 
* Chain [120,[114,116],[113],125] with precondition: [D=0,H=1,I=0,A>=6,B>=1,C>=0,E>=4,F>=1,G>=0,J>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [120,[114,116],[113],117,125] with precondition: [D=0,H=1,I=0,A>=6,B>=1,C>=0,E>=5,F>=1,G>=0,J>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [120,[114,116],[113],115,125] with precondition: [D=0,H=1,I=0,A>=6,B>=1,C>=0,E>=5,F>=1,G>=0,J>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [120,[114,116],125] with precondition: [D=0,H=1,I=0,A>=6,B>=1,C>=0,E>=3,F>=1,G>=0,J>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [120,[114,116],118,125] with precondition: [D=0,H=1,I=0,A>=6,B>=1,C>=0,E>=4,F>=1,G>=0,J>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [120,[114,116],117,125] with precondition: [D=0,H=1,I=0,A>=6,B>=1,C>=0,E>=4,F>=1,G>=0,J>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [120,[114,116],115,125] with precondition: [D=0,H=1,I=0,A>=6,B>=1,C>=0,E>=4,F>=1,G>=0,J>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [120,[113],125] with precondition: [D=0,H=1,I=0,A>=4,B>=1,C>=0,E>=3,F>=1,G>=0,J>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [120,[113],117,125] with precondition: [D=0,H=1,I=0,A>=4,B>=1,C>=0,E>=4,F>=1,G>=0,J>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [120,[113],115,125] with precondition: [D=0,H=1,I=0,A>=4,B>=1,C>=0,E>=4,F>=1,G>=0,J>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [120,125] with precondition: [D=0,E=2,H=1,I=0,A>=3,B>=1,C>=0,F>=1,G>=0,J>=0] 
    - Upper bound: 448*A+619+320*B*A 
    - Complexity: n^2 
* Chain [120,118,125] with precondition: [D=0,E=3,H=1,I=0,A>=6,B>=1,C>=0,F>=1,G>=0,J>=0] 
    - Upper bound: 448*A+1667+320*B*A 
    - Complexity: n^2 
* Chain [120,117,125] with precondition: [D=0,E=3,H=1,I=0,A>=4,B>=1,C>=0,F>=1,G>=0,J>=0] 
    - Upper bound: 448*A+2179+320*B*A 
    - Complexity: n^2 
* Chain [120,115,125] with precondition: [D=0,E=3,H=1,I=0,A>=4,B>=1,C>=0,F>=1,G>=0,J>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [119,[114,116],[113],125] with precondition: [D=0,H=1,I=0,A>=4,B>=2,C>=0,E>=4,F>=1,G>=0,J>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [119,[114,116],[113],117,125] with precondition: [D=0,H=1,I=0,A>=4,B>=2,C>=0,E>=5,F>=1,G>=0,J>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [119,[114,116],[113],115,125] with precondition: [D=0,H=1,I=0,A>=4,B>=2,C>=0,E>=5,F>=1,G>=0,J>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [119,[114,116],125] with precondition: [D=0,H=1,I=0,A>=4,B>=2,C>=0,E>=3,F>=1,G>=0,J>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [119,[114,116],118,125] with precondition: [D=0,H=1,I=0,A>=4,B>=2,C>=0,E>=4,F>=1,G>=0,J>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [119,[114,116],117,125] with precondition: [D=0,H=1,I=0,A>=4,B>=2,C>=0,E>=4,F>=1,G>=0,J>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [119,[114,116],115,125] with precondition: [D=0,H=1,I=0,A>=4,B>=2,C>=0,E>=4,F>=1,G>=0,J>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [119,[113],125] with precondition: [D=0,H=1,I=0,A>=3,B>=2,C>=0,E>=3,F>=1,G>=0,J>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [119,[113],117,125] with precondition: [D=0,H=1,I=0,A>=3,B>=2,C>=0,E>=4,F>=1,G>=0,J>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [119,[113],115,125] with precondition: [D=0,H=1,I=0,A>=3,B>=2,C>=0,E>=4,F>=1,G>=0,J>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [119,125] with precondition: [D=0,E=2,H=1,I=0,A>=3,B>=2,C>=0,F>=1,G>=0,J>=0] 
    - Upper bound: 244*A+619+160*B*A 
    - Complexity: n^2 
* Chain [119,118,125] with precondition: [D=0,E=3,H=1,I=0,A>=4,B>=2,C>=0,F>=1,G>=0,J>=0] 
    - Upper bound: 244*A+1667+160*B*A 
    - Complexity: n^2 
* Chain [119,117,125] with precondition: [D=0,E=3,H=1,I=0,A>=3,B>=2,C>=0,F>=1,G>=0,J>=0] 
    - Upper bound: 244*A+2179+160*B*A 
    - Complexity: n^2 
* Chain [119,115,125] with precondition: [D=0,E=3,H=1,I=0,A>=3,B>=2,C>=0,F>=1,G>=0,J>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [118,125] with precondition: [E=2,H=1,I=0,B>=1,C>=0,D>=1,F>=1,G>=0,J>=0,A>=2*D+3] 
    - Upper bound: 256*A+176*D+363 
    - Complexity: n 
* Chain [117,125] with precondition: [E=2,H=1,I=0,B>=1,C>=0,D>=1,F>=1,G>=0,J>=0,2*D+2>=A,A>=D+2] 
    - Upper bound: 256*A+176*D+363 
    - Complexity: n 
* Chain [115,125] with precondition: [E=2,H=1,I=0,B>=1,C>=0,D>=1,F>=1,G>=0,J>=0,2*D+2>=A,A>=D+2] 
    - Upper bound: 256*A+43+ (D+2)* (320*B)+16*D+ (D+2)* (80*D)+ (D+2)* (nat(B-2)*80)+ (608*D+1216) 
    - Complexity: n^2 

### Maximum cost of echelon_helper(A,B,C,D,E,F,G,H,I,J): inf 
Asymptotic class: infinity 

Closed-form bounds of echelon_form(A,B,C,D,E,F): 
-------------------------------------
* Chain [129] with precondition: [A=1,B=0,D=1,E=0,C>=0,F>=0] 
    - Upper bound: 5 
    - Complexity: constant 
* Chain [128] with precondition: [A=2,D=1,E=0,B>=1,C>=0,F>=0] 
    - Upper bound: 960*B+3925 
    - Complexity: n 
* Chain [127] with precondition: [D=1,E=0,A>=3,B>=2,C>=0,F>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [126] with precondition: [D=1,E=0,A>=4,B>=1,C>=0,F>=0] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of echelon_form(A,B,C,D,E,F): inf 
Asymptotic class: infinity 
 * Joined equivalent variables [it(132),s(4018)] into it(132)
 * Joined equivalent variables [it(133),s(4018)] into it(133)
 * Joined equivalent variables [it(133),s(3887),s(3888),s(3889),s(3890),s(3891),s(3892),s(3893),s(3894),s(3895),s(3896),s(3897),s(3898),s(3899),s(3900),s(3913),s(3914),s(3915),s(3916),s(3917),s(3918),s(3919),s(3920),s(3921),s(3922),s(3923),s(3924),s(3925),s(3926),s(4116),s(4117),s(4118),s(4119),s(4120),s(4121),s(4122),s(4123)] into it(133)
 * Joined equivalent variables [it(133),s(3887),s(3888),s(3889),s(3890),s(3891),s(3892),s(3893),s(3894),s(3895),s(3896),s(3897),s(3898),s(3899),s(3900),s(3913),s(3914),s(3915),s(3916),s(3917),s(3918),s(3919),s(3920),s(3921),s(3922),s(3923),s(3924),s(3925),s(3926),s(4034),s(4035),s(4036),s(4037),s(4038),s(4039),s(4040),s(4041)] into it(133)
 * Joined equivalent variables [it(133),s(3887),s(3888),s(3889),s(3890),s(3891),s(3892),s(3893),s(3894),s(3895),s(3896),s(3897),s(3898),s(3899),s(3900),s(3913),s(3914),s(3915),s(3916),s(3917),s(3918),s(3919),s(3920),s(3921),s(3922),s(3923),s(3924),s(3925),s(3926),s(4077),s(4078),s(4079),s(4080),s(4081),s(4082),s(4083),s(4084),s(4085),s(4086),s(4087),s(4088),s(4089)] into it(133)
 * Joined equivalent variables [it(132),s(4018)] into it(132)
 * Joined equivalent variables [it(132),s(3994),s(3995),s(3996),s(3997),s(3998),s(3999),s(4000),s(4001),s(4002),s(4003),s(4004),s(4005),s(4006),s(4034),s(4035),s(4036),s(4037),s(4038),s(4039),s(4040),s(4041)] into it(132)
 * Joined equivalent variables [it(132),s(3994),s(3995),s(3996),s(3997),s(3998),s(3999),s(4000),s(4001),s(4002),s(4003),s(4004),s(4005),s(4006),s(4076),s(4077),s(4078),s(4079),s(4080),s(4081),s(4082),s(4083),s(4084),s(4085),s(4086),s(4087),s(4088),s(4089)] into it(132)
 * Joined equivalent variables [it(132),s(4018)] into it(132)
 * Joined equivalent variables [s(4032),s(4033)] into s(4032)
 * Joined equivalent variables [s(4030),s(4031)] into s(4030)
 * Joined equivalent variables [s(4019),s(4028)] into s(4019)
 * Joined equivalent variables [aux(1219),aux(1138)] into aux(1219)
 * Joined equivalent variables [s(4063),s(4064)] into s(4063)
 * Joined equivalent variables [s(4061),s(4062)] into s(4061)
 * Joined equivalent variables [s(4074),s(4075)] into s(4074)
 * Joined equivalent variables [s(4072),s(4073)] into s(4072)
 * Joined equivalent variables [s(4048),s(4071)] into s(4048)
 * Joined equivalent variables [s(4066),s(4067)] into s(4066)
 * Joined equivalent variables [s(4018),s(4048)] into s(4018)
 * Joined equivalent variables [s(4068),s(4069)] into s(4068)
 * Joined equivalent variables [it(132),s(4018)] into it(132)
 * Joined equivalent variables [it(133),s(4018)] into it(133)
 * Joined equivalent variables [it(132),s(4018)] into it(132)
 * Joined equivalent variables [s(4114),s(4115)] into s(4114)
 * Joined equivalent variables [s(4112),s(4113)] into s(4112)
 * Joined equivalent variables [s(4110),s(4111)] into s(4110)
 * Joined equivalent variables [s(4032),s(4033)] into s(4032)
 * Joined equivalent variables [s(4030),s(4031)] into s(4030)
 * Joined equivalent variables [s(4028),s(4029)] into s(4028)
 * Joined equivalent variables [aux(1220),s(4055)] into aux(1220)
 * Joined equivalent variables [s(4063),s(4064)] into s(4063)
 * Joined equivalent variables [s(4061),s(4062)] into s(4061)
 * Joined equivalent variables [s(4074),s(4075)] into s(4074)
 * Joined equivalent variables [s(4072),s(4073)] into s(4072)
 * Joined equivalent variables [s(4057),s(4071)] into s(4057)
 * Joined equivalent variables [s(4066),s(4067)] into s(4066)
 * Joined equivalent variables [s(4018),s(4057)] into s(4018)
 * Joined equivalent variables [s(4068),s(4069)] into s(4068)
 * Joined equivalent variables [it(132),s(4018)] into it(132)
 * Joined equivalent variables [it(133),s(4018)] into it(133)
 * Joined equivalent variables [it(132),s(4018)] into it(132)
 * Joined equivalent variables [s(4114),s(4115)] into s(4114)
 * Joined equivalent variables [s(4112),s(4113)] into s(4112)
 * Joined equivalent variables [s(4110),s(4111)] into s(4110)
 * Joined equivalent variables [s(4032),s(4033)] into s(4032)
 * Joined equivalent variables [s(4030),s(4031)] into s(4030)
 * Joined equivalent variables [s(4028),s(4029)] into s(4028)
 * Joined equivalent variables [aux(1221),s(4055)] into aux(1221)
 * Joined equivalent variables [s(4063),s(4064)] into s(4063)
 * Joined equivalent variables [s(4061),s(4062)] into s(4061)
 * Joined equivalent variables [s(4074),s(4075)] into s(4074)
 * Joined equivalent variables [s(4072),s(4073)] into s(4072)
 * Joined equivalent variables [s(4057),s(4071)] into s(4057)
 * Joined equivalent variables [s(4066),s(4067)] into s(4066)
 * Joined equivalent variables [s(4018),s(4057)] into s(4018)
 * Joined equivalent variables [s(4068),s(4069)] into s(4068)
 * Joined equivalent variables [aux(1222),aux(850)] into aux(1222)
 * Joined equivalent variables [s(4018),s(4048)] into s(4018)

Closed-form bounds of echelon_helper_old(A,B,C,D,E,F,G): 
-------------------------------------
* Chain [[133,135]]... with precondition: [B>=1,D>=1,A>=2*D+3,C>=0,E>=0,F>=0,G>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [[133,135],[132]]... with precondition: [B>=1,C>=0,D>=1,E>=0,F>=0,G>=0,A>=2*D+3,B+2*A>=4*D+9] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [[133,135],[132],144] with precondition: [B>=1,C>=0,D>=1,E>=3,G>=0,A>=2*D+3,F>=D+3,F>=E,B+2*A>=4*D+9] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [[133,135],[132],136,145] with precondition: [E=1,F=0,B>=1,C>=0,D>=1,G>=0,A>=2*D+3,B+2*A>=4*D+9] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [[133,135],[132],134,144] with precondition: [B>=1,C>=0,D>=1,E>=2,F>=1,G>=0,A>=2*D+3,B+2*A>=4*D+9] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [[133,135],144] with precondition: [B>=1,C>=0,D>=1,E>=2,F>=1,G>=0,A>=2*D+3] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [[133,135],137,145] with precondition: [E=1,F=0,B>=1,C>=0,D>=1,G>=0,A>=2*D+4,2*A+3*B>=6*D+15,A+B>=3*D+6] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [[133,135],136,145] with precondition: [E=1,F=0,B>=1,C>=0,D>=1,G>=0,A>=2*D+3,B+2*A>=4*D+9] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [[133,135],134,144] with precondition: [B>=1,C>=0,D>=1,E>=2,F>=1,G>=0,A>=2*D+3,B+2*A>=4*D+9] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [[132]]... with precondition: [D>=1,2*D+2>=A,A>=D+2,B>=D+2,C>=0,E>=0,F>=0,G>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [[132],144] with precondition: [C>=0,D>=1,E>=3,G>=0,2*D+2>=A,A>=D+2,B>=D+2,F>=D+2,F>=E] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [[132],136,145] with precondition: [E=1,F=0,C>=0,D>=1,G>=0,2*D+2>=A,A>=D+2,B>=D+2] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [[132],134,144] with precondition: [C>=0,D>=1,E>=2,F>=1,G>=0,2*D+2>=A,A>=D+2,B>=D+2] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [145] with precondition: [A=1,B=0,E=1,F=0,C=G,C>=0,D>=0] 
    - Upper bound: 6 
    - Complexity: constant 
* Chain [144] with precondition: [A=E,B=F,C=G,A>=2,B>=1,C>=0,D+1>=A] 
    - Upper bound: 6*A+6 
    - Complexity: n 
* Chain [143,145] with precondition: [A=2,D=0,E=1,F=0,B>=1,C>=0,G>=0] 
    - Upper bound: 887 
    - Complexity: constant 
* Chain [142,144] with precondition: [A=2,D=0,E=2,B>=1,C>=0,F>=1,G>=0] 
    - Upper bound: 640*B+1795 
    - Complexity: n 
* Chain [141,[132]]... with precondition: [A=2,D=0,B>=2,C>=0,E>=0,F>=0,G>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [141,[132],144] with precondition: [A=2,D=0,B>=2,C>=0,E>=3,G>=0,F>=E] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [141,[132],136,145] with precondition: [A=2,D=0,E=1,F=0,B>=2,C>=0,G>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [141,[132],134,144] with precondition: [A=2,D=0,B>=2,C>=0,E>=2,F>=1,G>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [141,136,145] with precondition: [A=2,D=0,E=1,F=0,B>=2,C>=0,G>=0] 
    - Upper bound: 320*B+2716 
    - Complexity: n 
* Chain [141,134,144] with precondition: [A=2,D=0,3>=E,B>=2,C>=0,E>=2,F>=1,G>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [140,145] with precondition: [D=0,E=1,F=0,A>=3,B>=1,C>=0,G>=0] 
    - Upper bound: 6*A+625 
    - Complexity: n 
* Chain [139,[133,135]]... with precondition: [D=0,A>=6,B>=1,C>=0,E>=0,F>=0,G>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [139,[133,135],[132]]... with precondition: [D=0,A>=6,B>=1,C>=0,E>=0,F>=0,G>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [139,[133,135],[132],144] with precondition: [D=0,A>=6,B>=1,C>=0,E>=3,F>=4,G>=0,F>=E] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [139,[133,135],[132],136,145] with precondition: [D=0,E=1,F=0,A>=6,B>=1,C>=0,G>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [139,[133,135],[132],134,144] with precondition: [D=0,A>=6,B>=1,C>=0,E>=2,F>=1,G>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [139,[133,135],144] with precondition: [D=0,A>=6,B>=1,C>=0,E>=2,F>=1,G>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [139,[133,135],137,145] with precondition: [D=0,E=1,F=0,A>=7,B>=1,C>=0,G>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [139,[133,135],136,145] with precondition: [D=0,E=1,F=0,A>=6,B>=1,C>=0,G>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [139,[133,135],134,144] with precondition: [D=0,A>=6,B>=1,C>=0,E>=2,F>=1,G>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [139,[132]]... with precondition: [D=0,A>=4,B>=1,C>=0,E>=0,F>=0,G>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [139,[132],144] with precondition: [D=0,A>=4,B>=1,C>=0,E>=3,G>=0,F>=E] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [139,[132],136,145] with precondition: [D=0,E=1,F=0,A>=4,B>=1,C>=0,G>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [139,[132],134,144] with precondition: [D=0,A>=4,B>=1,C>=0,E>=2,F>=1,G>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [139,144] with precondition: [D=0,E=2,A>=3,B>=1,C>=0,F>=1,G>=0] 
    - Upper bound: 454*A+637+320*B*A 
    - Complexity: n^2 
* Chain [139,137,145] with precondition: [D=0,E=1,F=0,A>=6,B>=1,C>=0,G>=0] 
    - Upper bound: 460*A+1692+320*B*A 
    - Complexity: n^2 
* Chain [139,136,145] with precondition: [D=0,E=1,F=0,A>=4,B>=1,C>=0,G>=0] 
    - Upper bound: 454*A+2228+320*B*A 
    - Complexity: n^2 
* Chain [139,134,144] with precondition: [D=0,3>=E,A>=4,B>=1,C>=0,E>=2,F>=1,G>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [138,[133,135]]... with precondition: [D=0,A>=4,B>=2,C>=0,E>=0,F>=0,G>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [138,[133,135],[132]]... with precondition: [D=0,A>=4,B>=2,C>=0,E>=0,F>=0,G>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [138,[133,135],[132],144] with precondition: [D=0,A>=4,B>=2,C>=0,E>=3,F>=4,G>=0,F>=E] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [138,[133,135],[132],136,145] with precondition: [D=0,E=1,F=0,A>=4,B>=2,C>=0,G>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [138,[133,135],[132],134,144] with precondition: [D=0,A>=4,B>=2,C>=0,E>=2,F>=1,G>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [138,[133,135],144] with precondition: [D=0,A>=4,B>=2,C>=0,E>=2,F>=1,G>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [138,[133,135],137,145] with precondition: [D=0,E=1,F=0,B>=2,C>=0,G>=0,2*A>=9] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [138,[133,135],136,145] with precondition: [D=0,E=1,F=0,A>=4,B>=2,C>=0,G>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [138,[133,135],134,144] with precondition: [D=0,A>=4,B>=2,C>=0,E>=2,F>=1,G>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [138,[132]]... with precondition: [D=0,A>=3,B>=2,C>=0,E>=0,F>=0,G>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [138,[132],144] with precondition: [D=0,A>=3,B>=2,C>=0,E>=3,G>=0,F>=E] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [138,[132],136,145] with precondition: [D=0,E=1,F=0,A>=3,B>=2,C>=0,G>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [138,[132],134,144] with precondition: [D=0,A>=3,B>=2,C>=0,E>=2,F>=1,G>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [138,137,145] with precondition: [D=0,E=1,F=0,A>=4,B>=2,C>=0,G>=0] 
    - Upper bound: 250*A+1692+160*B*A+12*A 
    - Complexity: n^2 
* Chain [138,136,145] with precondition: [D=0,E=1,F=0,A>=3,B>=2,C>=0,G>=0] 
    - Upper bound: 250*A+2228+160*B*A 
    - Complexity: n^2 
* Chain [138,134,144] with precondition: [D=0,3>=E,A>=3,B>=2,C>=0,E>=2,F>=1,G>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [137,145] with precondition: [E=1,F=0,B>=1,C>=0,D>=1,G>=0,A>=2*D+3] 
    - Upper bound: 262*A+176*D+385 
    - Complexity: n 
* Chain [136,145] with precondition: [E=1,F=0,B>=1,C>=0,D>=1,G>=0,2*D+2>=A,A>=D+2] 
    - Upper bound: 262*A+176*D+385 
    - Complexity: n 
* Chain [134,144] with precondition: [B>=1,C>=0,D>=1,E>=2,F>=1,G>=0,2*D+2>=A,A>=D+2,D+2>=E] 
    - Upper bound: 268*A+49+ (D+2)* (320*B)+ (D+2)* (nat(B-2)*80)+ (16*D+16)+ (80*D+80)* (D+2)+ (608*D+1216) 
    - Complexity: n^2 

### Maximum cost of echelon_helper_old(A,B,C,D,E,F,G): inf 
Asymptotic class: infinity 
 * Joined equivalent variables [s(5212),s(5231)] into s(5212)
 * Joined equivalent variables [s(5294),s(5317)] into s(5294)
 * Joined equivalent variables [s(5326),s(5350)] into s(5326)

Closed-form bounds of echelon_form_old(A,B,C,D,E,F): 
-------------------------------------
* Chain [156] with precondition: [A=1,B=0,D=1,E=0,C=F,C>=0] 
    - Upper bound: 8 
    - Complexity: constant 
* Chain [155] with precondition: [A=2,D=1,E=0,B>=1,C>=0,F>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [154] with precondition: [A=2,D=2,B>=1,C>=0,E>=1,F>=0] 
    - Upper bound: 640*B+1797 
    - Complexity: n 
* Chain [153] with precondition: [A=2,B>=2,C>=0,D>=2,E>=1,F>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [152] with precondition: [D=1,E=0,A>=3,B>=1,C>=0,F>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [151] with precondition: [D=2,A>=3,B>=1,C>=0,E>=1,F>=0] 
    - Upper bound: 454*A+639+320*B*A 
    - Complexity: n^2 
* Chain [150] with precondition: [A>=3,B>=2,C>=0,D>=2,E>=1,F>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [149] with precondition: [A>=4,B>=1,C>=0,D>=2,E>=1,F>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [148]... with precondition: [A=2,B>=2,C>=0,D>=0,E>=0,F>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [147]... with precondition: [A>=3,B>=2,C>=0,D>=0,E>=0,F>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [146]... with precondition: [A>=4,B>=1,C>=0,D>=0,E>=0,F>=0] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of echelon_form_old(A,B,C,D,E,F): inf 
Asymptotic class: infinity 
* Total analysis performed in 36046 ms.


Cost relation system solved by CoFloCo in 36052 ms.

Method sizeL terminates?: YES

 - l_1: size of l wrt. List<List<Rat>>
 - l_2: size of l wrt. List<Rat>
 - l_3: size of l wrt. Rat
 - l_4: size of l wrt. List<A>
 - l_5: size of l wrt. A
UB for sizeL(l_1,l_2,l_3,l_4,l_5) = 6*l_1+3

Method get_elem terminates?: YES

 - l_1: size of l wrt. List<List<Rat>>
 - l_2: size of l wrt. List<Rat>
 - l_3: size of l wrt. Rat
 - l_4: size of l wrt. List<A>
 - l_5: size of l wrt. A
 - i_1: size of i wrt. Rat
 - i_2: size of i wrt. Rat
UB for get_elem(l_1,l_2,l_3,l_4,l_5,i_1,i_2) = 8*i_1+5

Method get_2elems terminates?: YES

 - l1_1: size of l1 wrt. List<Rat>
 - l1_2: size of l1 wrt. Rat
 - l1_3: size of l1 wrt. List<A>
 - l1_4: size of l1 wrt. A
 - l2_1: size of l2 wrt. List<Rat>
 - l2_2: size of l2 wrt. Rat
 - l2_3: size of l2 wrt. List<A>
 - l2_4: size of l2 wrt. A
 - i_1: size of i wrt. Rat
 - i_2: size of i wrt. Rat
UB for get_2elems(l1_1,l1_2,l1_3,l1_4,l2_1,l2_2,l2_3,l2_4,i_1,i_2) = 10*i_1+8

Method subtract_row_helper terminates?: YES

 - r1_1: size of r1 wrt. List<Rat>
 - r1_2: size of r1 wrt. Rat
 - r2_1: size of r2 wrt. List<Rat>
 - r2_2: size of r2 wrt. Rat
 - q_1: size of q wrt. Rat
UB for subtract_row_helper(r1_1,r1_2,r2_1,r2_2,q_1) = max([10*r2_1+3,10*r1_1])+3

Method subtract_row terminates?: YES

 - r1_1: size of r1 wrt. List<Rat>
 - r1_2: size of r1 wrt. Rat
 - r2_1: size of r2 wrt. List<Rat>
 - r2_2: size of r2 wrt. Rat
 - i_1: size of i wrt. Rat
UB for subtract_row(r1_1,r1_2,r2_1,r2_2,i_1) = 20*i_1+18+max([20*r2_1+3,20*r1_1])

Method subtract_helper terminates?: YES

 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
 - row_1: size of row wrt. List<Rat>
 - row_2: size of row wrt. Rat
 - i_1: size of i wrt. Rat
UB for subtract_helper(m_1,m_2,m_3,row_1,row_2,i_1) = 60*row_1*m_1+102*m_1+max([20*m_2*m_1,20*i_1*m_1+20*row_1*m_1+nat(m_2-2)*20*m_1+nat(row_1-2)*40*m_1])+3

Method concat terminates?: YES

 - l1_1: size of l1 wrt. List<List<Rat>>
 - l1_2: size of l1 wrt. List<Rat>
 - l1_3: size of l1 wrt. Rat
 - l1_4: size of l1 wrt. List<A>
 - l1_5: size of l1 wrt. A
 - l2_1: size of l2 wrt. List<List<Rat>>
 - l2_2: size of l2 wrt. List<Rat>
 - l2_3: size of l2 wrt. Rat
 - l2_4: size of l2 wrt. List<A>
 - l2_5: size of l2 wrt. A
UB for concat(l1_1,l1_2,l1_3,l1_4,l1_5,l2_1,l2_2,l2_3,l2_4,l2_5) = 20*l1_4+2

Method tl terminates?: YES

 - l_1: size of l wrt. List<A>
 - l_2: size of l wrt. A
 - i_1: size of i wrt. Rat
UB for tl(l_1,l_2,i_1) = 8*i_1+3

Method hd_helper terminates?: YES

 - l_1: size of l wrt. List<A>
 - l_2: size of l wrt. A
 - i_1: size of i wrt. Rat
 - acc_1: size of acc wrt. List<A>
 - acc_2: size of acc wrt. A
UB for hd_helper(l_1,l_2,i_1,acc_1,acc_2) = nat(l_2-acc_2)*9+9*l_1+3

Method reverse_helper terminates?: YES

 - l_1: size of l wrt. List<List<Rat>>
 - l_2: size of l wrt. List<Rat>
 - l_3: size of l wrt. Rat
 - l_4: size of l wrt. List<A>
 - l_5: size of l wrt. A
 - acc_1: size of acc wrt. List<List<Rat>>
 - acc_2: size of acc wrt. List<Rat>
 - acc_3: size of acc wrt. Rat
 - acc_4: size of acc wrt. List<A>
 - acc_5: size of acc wrt. A
UB for reverse_helper(l_1,l_2,l_3,l_4,l_5,acc_1,acc_2,acc_3,acc_4,acc_5) = 20*l_1+2

Method reverseL terminates?: YES

 - l_1: size of l wrt. List<List<Rat>>
 - l_2: size of l wrt. List<Rat>
 - l_3: size of l wrt. Rat
 - l_4: size of l wrt. List<A>
 - l_5: size of l wrt. A
UB for reverseL(l_1,l_2,l_3,l_4,l_5) = 20*l_4+4

Method hd terminates?: YES

 - l_1: size of l wrt. List<A>
 - l_2: size of l wrt. A
 - i_1: size of i wrt. Rat
UB for hd(l_1,l_2,i_1) = 9*l_1+9*l_2+20*i_1+30

Method split_helper terminates?: YES

 - l_1: size of l wrt. List<List<Rat>>
 - l_2: size of l wrt. List<Rat>
 - l_3: size of l wrt. Rat
 - l_4: size of l wrt. List<A>
 - l_5: size of l wrt. A
 - i_1: size of i wrt. Rat
 - i_2: size of i wrt. Rat
 - j_1: size of j wrt. Rat
 - j_2: size of j wrt. Rat
 - hd_1: size of hd wrt. List<List<Rat>>
 - hd_2: size of hd wrt. List<Rat>
 - hd_3: size of hd wrt. Rat
 - hd_4: size of hd wrt. List<A>
 - hd_5: size of hd wrt. A
UB for split_helper(l_1,l_2,l_3,l_4,l_5,i_1,i_2,j_1,j_2,hd_1,hd_2,hd_3,hd_4,hd_5) = 32*l_1+20*i_1-20*j_1+20*hd_1+8

Method split terminates?: YES

 - l_1: size of l wrt. List<List<Rat>>
 - l_2: size of l wrt. List<Rat>
 - l_3: size of l wrt. Rat
 - l_4: size of l wrt. List<A>
 - l_5: size of l wrt. A
 - i_1: size of i wrt. Rat
 - i_2: size of i wrt. Rat
UB for split(l_1,l_2,l_3,l_4,l_5,i_1,i_2) = 128*l_1+80*i_1+91

Method subtract terminates?: YES

 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
 - i_1: size of i wrt. Rat
UB for subtract(m_1,m_2,m_3,i_1) = max([640*m_2+1728,244*m_1+max([12*m_1+max([176*i_1+320+max([ (i_1+2)* (160*m_2)+ (i_1+2)* (80*i_1)+ (i_1+2)* (nat(m_2-2)*80)+ (244*i_1+488)+ (204*i_1+408+ (i_1+2)* (160*m_2)),244*m_1-244*i_1+ ((m_1-i_1)* (160*m_2)+ (m_1-i_1)* (80*i_1)+ (m_1-i_1)* (nat(m_2-2)*80))+ (204*m_1-204*i_1+ (m_1-i_1)* (160*m_2))]),192*m_1+576+320*m_2*m_1]),160*m_2*m_1+576])])+33

Method echelon_helper terminates?: YES

 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
 - i_1: size of i wrt. Rat
 - sizem_1: size of sizem wrt. List<List<Rat>>
 - sizem_2: size of sizem wrt. List<Rat>
 - sizem_3: size of sizem wrt. Rat
UB for echelon_helper(m_1,m_2,m_3,i_1,sizem_1,sizem_2,sizem_3) = inf

Method echelon_form terminates?: YES

 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
UB for echelon_form(m_1,m_2,m_3) = inf

Method echelon_helper_old terminates?: YES

 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
 - i_1: size of i wrt. Rat
UB for echelon_helper_old(m_1,m_2,m_3,i_1) = inf

Method echelon_form_old terminates?: YES

 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
UB for echelon_form_old(m_1,m_2,m_3) = inf


Abs program loaded in 14 ms.

Rule based representation generated in 2 ms.

Rule based representation stored in /tmp/costabs/rbr.rbr

RBR properties stored in /tmp/costabs/rbr.properties

Class invariants generated and loaded in 0 ms.

Abstract compilation performed in 7 ms.

Cost relation system stored in /tmp/costabs/crs.crs

Generated 36 equations 
entry('zip3'(A,B,C,D,E,F,G,H,I):[]).
entry('group3'(A,B,C,D,E):[]).
input_output_vars('and_op'(A,B,C),[A,B],[C]).
input_output_vars('case_0'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F],[G,H,I]).
input_output_vars('case_1'(A,B,C,D,E,F,G,H,I,J,K,L),[A,B,C,D,E,F,G,H,I],[J,K,L]).
input_output_vars('case_2'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O),[A,B,C,D,E,F,G,H,I,J,K,L],[M,N,O]).
input_output_vars('case_3'(A,B,C,D,E),[A,B],[C,D,E]).
input_output_vars('case_4'(A,B,C,D,E,F,G,H),[A,B,C,D,E],[F,G,H]).
input_output_vars('case_5'(A,B,C,D,E,F,G,H,I,J,K),[A,B,C,D,E,F,G,H],[I,J,K]).
input_output_vars('eq'(A,B,C),[A,B],[C]).
input_output_vars('geq'(A,B,C),[A,B],[C]).
input_output_vars('group3'(A,B,C,D,E),[A,B],[C,D,E]).
input_output_vars('gt'(A,B,C),[A,B],[C]).
input_output_vars('leq'(A,B,C),[A,B],[C]).
input_output_vars('lt'(A,B,C),[A,B],[C]).
input_output_vars('maxNorm'(A,B,C),[A,B],[C]).
input_output_vars('neg'(A,B),[A],[B]).
input_output_vars('neq'(A,B,C),[A,B],[C]).
input_output_vars('or'(A,B,C),[A,B],[C]).
input_output_vars('zip3'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F],[G,H,I]).
eq('eq',[A,B,C],0,[],[A=B,C=1,A>=0,B>=0,C>=0]).
eq('eq',[A,B,C],0,[],[A>=B+1,C=0,A>=0,B>=0,C>=0]).
eq('eq',[A,B,C],0,[],[B>=A+1,C=0,A>=0,B>=0,C>=0]).
eq('neq',[A,B,C],0,[],[A=B,C=0,A>=0,B>=0,C>=0]).
eq('neq',[A,B,C],0,[],[A>=B+1,C=1,A>=0,B>=0,C>=0]).
eq('neq',[A,B,C],0,[],[B>=A+1,C=1,A>=0,B>=0,C>=0]).
eq('lt',[A,B,C],0,[],[B-A>=1,C=1,A>=0,B>=0,C>=0]).
eq('lt',[A,B,C],0,[],[B=<A,C=0,A>=0,B>=0,C>=0]).
eq('leq',[A,B,C],0,[],[A=<B,C=1,A>=0,B>=0,C>=0]).
eq('leq',[A,B,C],0,[],[A-B>=1,C=0,A>=0,B>=0,C>=0]).
eq('gt',[A,B,C],0,[],[A-B>=1,C=1,A>=0,B>=0,C>=0]).
eq('gt',[A,B,C],0,[],[A=<B,C=0,A>=0,B>=0,C>=0]).
eq('geq',[A,B,C],0,[],[B=<A,C=1,A>=0,B>=0,C>=0]).
eq('geq',[A,B,C],0,[],[B-A>=1,C=0,A>=0,B>=0,C>=0]).
eq('neg',[A,B],0,[],[A=0,B=1,A>=0,B>=0]).
eq('neg',[A,B],0,[],[A=1,B=0,A>=0,B>=0]).
eq('and_op',[A,B,C],0,[],[A=0,C=0,A>=0,B>=0,C>=0]).
eq('and_op',[A,B,C],0,[],[A=1,C=B,A>=0,B>=0,C>=0]).
eq('or',[A,B,C],0,[],[A=1,C=1,A>=0,B>=0,C>=0]).
eq('or',[A,B,C],0,[],[A=0,C=B,A>=0,B>=0,C>=0]).
eq('maxNorm',[A,B,A],0,[],[A>=1+B,A>=0,B>=0,A>=0]).
eq('maxNorm',[A,B,B],0,[],[A=<B,A>=0,B>=0,B>=0]).
eq('case_0',[A,B,C,D,E,F,G,H,I],2,[],[B=0,A=1,I=0,H=1,G=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('case_1',[A,B,C,D,E,F,G,H,I,J,K,L],2,[],[D=0,C=1,L=0,K=1,J=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0]).
eq('case_2',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O],2,[],[F=0,E=1,O=0,N=1,M=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0]).
eq('case_2',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O],5,['maxNorm'(G,J,P,Q),'zip3'(H,I,K,L,R,S,T,U,V),'maxNorm'(Q,V,O),'maxNorm'(W,T,M)],[F>=P,F>=S,E=R+1,R>=1,P>=1,W=1,P>=1,J>=1,G>=1,N=U+1,U>=1,W>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0]).
eq('case_1',[A,B,C,D,E,F,G,H,I,J,K,L],3,['case_2'(A,B,C,D,E,F,G,H,I,M,N,O,J,K,L)],[D>=M,D>=O,C=N+1,N>=1,M>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0]).
eq('case_0',[A,B,C,D,E,F,G,H,I],3,['case_1'(A,B,C,D,E,F,J,K,L,G,H,I)],[B>=J,B>=L,A=K+1,K>=1,J>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('zip3',[A,B,C,D,E,F,G,H,I],1,['case_0'(A,B,C,D,E,F,G,H,I)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('case_3',[A,B,C,D,E],2,[],[B=0,A=1,E=0,D=1,C=0,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_4',[A,B,C,D,E,F,G,H],2,[],[E=0,D=1,H=0,G=1,F=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('case_5',[A,B,C,D,E,F,G,H,I,J,K],2,[],[H=0,G=1,K=0,J=1,I=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0]).
eq('case_5',[A,B,C,D,E,F,G,H,I,J,K],5,['maxNorm'(C,F,L,M),'group3'(N,O,P,Q,R),'maxNorm'(M,R,K),'maxNorm'(S,P,I)],[H>=L,H>=O,G=N+1,N>=1,L>=1,S=1,L>=1,F>=1,C>=1,J=Q+1,Q>=1,S>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0]).
eq('case_4',[A,B,C,D,E,F,G,H],3,['case_5'(A,B,C,D,E,I,J,K,F,G,H)],[E>=I,E>=K,D=J+1,J>=1,I>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('case_3',[A,B,C,D,E],3,['case_4'(A,B,F,G,H,C,D,E)],[B>=F,B>=H,A=G+1,G>=1,F>=1,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('group3',[A,B,C,D,E],1,['case_3'(A,B,C,D,E)],[A>=0,B>=0,C>=0,D>=0,E>=0]).
Warning: Ignored call to maxNorm/4 in equation case_2/15 
Warning: Ignored call to maxNorm/4 in equation case_5/11 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [maxNorm/3]
1. recursive [non_tail] : [case_3/5,case_4/8,case_5/11,group3/5]
2. recursive [non_tail] : [case_0/9,case_1/12,case_2/15,zip3/9]
Warning: the following predicates are never called:[and_op/3,eq/3,geq/3,gt/3,leq/3,lt/3,neg/2,neq/3,or/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into maxNorm/3
1. SCC is partially evaluated into group3/5
2. SCC is partially evaluated into zip3/9

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations maxNorm/3 
* CE 10 is refined into CE [11] 
* CE 9 is refined into CE [12] 


#### Refined cost equations maxNorm/3 
* CE 11: maxNorm(A,B,B) = 0
     [B>=A,A>=0] 
* CE 12: maxNorm(A,B,A) = 0
     [A>=B+1,B>=0] 

### Cost equations --> "Loop" of maxNorm/3 
* CEs [11] --> Loop 11 
* CEs [12] --> Loop 12 

#### Loops of maxNorm/3 
* Loop 11: maxNorm(A,B,B) [B>=A,A>=0] 
* Loop 12: maxNorm(A,B,A) [A>=B+1,B>=0] 

### Ranking functions of CR maxNorm(A,B,C) 

#### Partial ranking functions of CR maxNorm(A,B,C) 


### Resulting Chains:maxNorm(A,B,C) 
* [12]
* [11]


### Merging Chains  maxNorm/3 into  External patterns of execution 
* [[12]] --> 1 
* [[11]] --> 2 


### Specialization of cost equations group3/5 
* CE 6 is refined into CE [13] 
* CE 5 is refined into CE [14] 
* CE 8 is refined into CE [15] 
* CE 7 is refined into CE [16,17,18,19] 


#### Refined cost equations group3/5 
* CE 13: group3(A,B,C,D,E) = 9
     [B>=1,E=0,D=1,C=0,A=3] 
* CE 14: group3(A,B,C,D,E) = 6
     [B>=1,E=0,D=1,C=0,A=2] 
* CE 15: group3(A,B,C,D,E) = 3
     [E=0,D=1,C=0,B=0,A=1] 
* CE 16: group3(A,B,C,D,E) = 12+ group3(F,G,H,I,J)+ maxNorm(E,J,E):1+ maxNorm(K,L,M):1
     [B>=G,E>=J+1,I>=1,J>=0,B>=1,A>=4,A=F+3,I+1=D,H=0,M=1,L=0,K=1,C=1] 
* CE 17: group3(A,B,C,D,E) = 12+ group3(F,G,C,H,I)+ maxNorm(E,I,E):1+ maxNorm(J,C,C):2
     [B>=G,E>=I+1,H>=1,C>=1,I>=0,B>=1,A>=4,A=F+3,H+1=D,J=1] 
* CE 18: group3(A,B,C,D,E) = 12+ group3(F,G,H,I,E)+ maxNorm(J,E,E):2+ maxNorm(K,L,M):1
     [B>=G,E>=J,I>=1,J>=0,B>=1,A>=4,A=F+3,I+1=D,H=0,M=1,L=0,K=1,C=1] 
* CE 19: group3(A,B,C,D,E) = 12+ group3(F,G,C,H,E)+ maxNorm(I,E,E):2+ maxNorm(J,C,C):2
     [B>=G,E>=I,H>=1,C>=1,I>=0,B>=1,A>=4,A=F+3,H+1=D,J=1] 

### Cost equations --> "Loop" of group3/5 
* CEs [17] --> Loop 13 
* CEs [19] --> Loop 14 
* CEs [16] --> Loop 15 
* CEs [18] --> Loop 16 
* CEs [13] --> Loop 17 
* CEs [14] --> Loop 18 
* CEs [15] --> Loop 19 

#### Loops of group3/5 
* Loop 13: group3(A,B,C,D,E)->  group3(A',B',C,C',D')
                  [E>=D'+1,B>=B',D'>=0,D>=2,C>=1,B>=1,A>=4,D=C'+1,A=A'+3] 
* Loop 14: group3(A,B,C,D,E)->  group3(A',B',C,C',E)
                  [B>=B',E>=0,D>=2,C>=1,B>=1,A>=4,D=C'+1,A=A'+3] 
* Loop 15: group3(A,B,C,D,E)->  group3(A',B',C',D',E')
                  [E>=E'+1,B>=B',E'>=0,D>=2,B>=1,A>=4,D=D'+1,A=A'+3,C'=0,C=1] 
* Loop 16: group3(A,B,C,D,E)->  group3(A',B',C',D',E)
                  [B>=B',E>=0,D>=2,B>=1,A>=4,D=D'+1,A=A'+3,C'=0,C=1] 
* Loop 17: group3(A,B,C,D,E) [B>=1,E=0,D=1,C=0,A=3] 
* Loop 18: group3(A,B,C,D,E) [B>=1,E=0,D=1,C=0,A=2] 
* Loop 19: group3(A,B,C,D,E) [E=0,D=1,C=0,B=0,A=1] 

### Ranking functions of CR group3(A,B,C,D,E) 
* RF of phase [13,14]: [A/3-1]

#### Partial ranking functions of CR group3(A,B,C,D,E) 
* Partial RF of phase [13,14]:
  - RF of loop [13:1,14:1]:
    A/3-1

Discarded unfeasible chain [[13,14]]...(Non-terminating chain proved terminating)

### Resulting Chains:group3(A,B,C,D,E) 
* [[13,14],16,19]
* [[13,14],16,18]
* [[13,14],16,17]
* [[13,14],15,19]
* [[13,14],15,18]
* [[13,14],15,17]
* [19]
* [18]
* [17]
* [16,19]
* [16,18]
* [16,17]
* [15,19]
* [15,18]
* [15,17]


### Merging Chains  group3/5 into  External patterns of execution 
* [[19]] --> 1 
* [[18]] --> 2 
* [[17]] --> 3 
* [[19,16]] --> 4 
* [[19,15]] --> 5 
* [[18,16]] --> 6 
* [[18,15]] --> 7 
* [[17,16]] --> 8 
* [[17,15]] --> 9 
* [[19,15,[13,14]],[19,16,[13,14]]] --> 10 
* [[18,15,[13,14]],[18,16,[13,14]]] --> 11 
* [[17,15,[13,14]],[17,16,[13,14]]] --> 12 


### Specialization of cost equations zip3/9 
* CE 2 is refined into CE [20] 
* CE 1 is refined into CE [21] 
* CE 4 is refined into CE [22] 
* CE 3 is refined into CE [23,24,25,26] 


#### Refined cost equations zip3/9 
* CE 20: zip3(A,B,C,D,E,F,G,H,I) = 9
     [D>=1,C>=2,B>=1,A>=2,I=0,H=1,G=0,F=0,E=1] 
* CE 21: zip3(A,B,C,D,E,F,G,H,I) = 6
     [F>=0,E>=0,B>=1,A>=2,I=0,H=1,G=0,D=0,C=1] 
* CE 22: zip3(A,B,C,D,E,F,G,H,I) = 3
     [F>=0,E>=0,D>=0,C>=0,I=0,H=1,G=0,B=0,A=1] 
* CE 23: zip3(A,B,C,D,E,F,G,H,I) = 12+ zip3(J,K,L,M,N,O,P,Q,R)+ maxNorm(I,R,I):1+ maxNorm(S,T,U):1
     [F>=O,D>=M,B>=K,I>=R+1,Q>=1,N>=1,M>=0,L>=1,K>=0,J>=1,R>=0,F>=1,D>=1,B>=1,Q+1=H,N+1=E,L+1=C,J+1=A,P=0,U=1,T=0,S=1,G=1] 
* CE 24: zip3(A,B,C,D,E,F,G,H,I) = 12+ zip3(J,K,L,M,N,O,G,P,Q)+ maxNorm(I,Q,I):1+ maxNorm(R,G,G):2
     [F>=O,D>=M,B>=K,I>=Q+1,P>=1,N>=1,M>=0,L>=1,K>=0,J>=1,G>=1,Q>=0,F>=1,D>=1,B>=1,P+1=H,N+1=E,L+1=C,J+1=A,R=1] 
* CE 25: zip3(A,B,C,D,E,F,G,H,I) = 12+ zip3(J,K,L,M,N,O,P,Q,I)+ maxNorm(R,I,I):2+ maxNorm(S,T,U):1
     [F>=O,D>=M,B>=K,I>=R,Q>=1,N>=1,M>=0,L>=1,K>=0,J>=1,R>=0,F>=1,D>=1,B>=1,Q+1=H,N+1=E,L+1=C,J+1=A,P=0,U=1,T=0,S=1,G=1] 
* CE 26: zip3(A,B,C,D,E,F,G,H,I) = 12+ zip3(J,K,L,M,N,O,G,P,I)+ maxNorm(Q,I,I):2+ maxNorm(R,G,G):2
     [F>=O,D>=M,B>=K,I>=Q,P>=1,N>=1,M>=0,L>=1,K>=0,J>=1,G>=1,Q>=0,F>=1,D>=1,B>=1,P+1=H,N+1=E,L+1=C,J+1=A,R=1] 

### Cost equations --> "Loop" of zip3/9 
* CEs [24] --> Loop 20 
* CEs [26] --> Loop 21 
* CEs [23] --> Loop 22 
* CEs [25] --> Loop 23 
* CEs [20] --> Loop 24 
* CEs [21] --> Loop 25 
* CEs [22] --> Loop 26 

#### Loops of zip3/9 
* Loop 20: zip3(A,B,C,D,E,F,G,H,I)->  zip3(A',B',C',D',E',F',G,G',H')
                  [I>=H'+1,F>=F',D>=D',B>=B',H'>=0,D'>=0,B'>=0,H>=2,G>=1,F>=1,E>=2,D>=1,C>=2,B>=1,A>=2,H=G'+1,E=E'+1,C=C'+1,A=A'+1] 
* Loop 21: zip3(A,B,C,D,E,F,G,H,I)->  zip3(A',B',C',D',E',F',G,G',I)
                  [F>=F',D>=D',B>=B',D'>=0,B'>=0,I>=0,H>=2,G>=1,F>=1,E>=2,D>=1,C>=2,B>=1,A>=2,H=G'+1,E=E'+1,C=C'+1,A=A'+1] 
* Loop 22: zip3(A,B,C,D,E,F,G,H,I)->  zip3(A',B',C',D',E',F',G',H',I')
                  [I>=I'+1,F>=F',D>=D',B>=B',I'>=0,D'>=0,B'>=0,H>=2,F>=1,E>=2,D>=1,C>=2,B>=1,A>=2,H=H'+1,E=E'+1,C=C'+1,A=A'+1,G'=0,G=1] 
* Loop 23: zip3(A,B,C,D,E,F,G,H,I)->  zip3(A',B',C',D',E',F',G',H',I)
                  [F>=F',D>=D',B>=B',D'>=0,B'>=0,I>=0,H>=2,F>=1,E>=2,D>=1,C>=2,B>=1,A>=2,H=H'+1,E=E'+1,C=C'+1,A=A'+1,G'=0,G=1] 
* Loop 24: zip3(A,B,C,D,E,F,G,H,I) [D>=1,C>=2,B>=1,A>=2,I=0,H=1,G=0,F=0,E=1] 
* Loop 25: zip3(A,B,C,D,E,F,G,H,I) [F>=0,E>=0,B>=1,A>=2,I=0,H=1,G=0,D=0,C=1] 
* Loop 26: zip3(A,B,C,D,E,F,G,H,I) [F>=0,E>=0,D>=0,C>=0,I=0,H=1,G=0,B=0,A=1] 

### Ranking functions of CR zip3(A,B,C,D,E,F,G,H,I) 
* RF of phase [20,21]: [A-1,C-1,E-1]

#### Partial ranking functions of CR zip3(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [20,21]:
  - RF of loop [20:1,21:1]:
    A-1
    C-1
    E-1

Discarded unfeasible chain [[20,21]]...(Non-terminating chain proved terminating)

### Resulting Chains:zip3(A,B,C,D,E,F,G,H,I) 
* [[20,21],23,26]
* [[20,21],23,25]
* [[20,21],23,24]
* [[20,21],22,26]
* [[20,21],22,25]
* [[20,21],22,24]
* [26]
* [25]
* [24]
* [23,26]
* [23,25]
* [23,24]
* [22,26]
* [22,25]
* [22,24]


### Merging Chains  zip3/9 into  External patterns of execution 
* [[26]] --> 1 
* [[26,23]] --> 2 
* [[26,22]] --> 3 
* [[25]] --> 4 
* [[25,23]] --> 5 
* [[25,22]] --> 6 
* [[24]] --> 7 
* [[24,23]] --> 8 
* [[24,22]] --> 9 
* [[26,22,[20,21]],[26,23,[20,21]]] --> 10 
* [[25,22,[20,21]],[25,23,[20,21]]] --> 11 
* [[24,22,[20,21]],[24,23,[20,21]]] --> 12 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 12 

#### Simplifying cost structure of CE 11 

#### Cost of chains of maxNorm(A,B,C):
* Chain [12]: 0
  with precondition: [C=A,B>=0,C>=B+1] 

* Chain [11]: 0
  with precondition: [C=B,A>=0,C>=A] 


#### Simplifying cost structure of CE 15 

#### Simplifying cost structure of CE 18 

#### Simplifying cost structure of chain [16,19] 

#### Computing cost of phase [13,14] 

#### Simplifying cost structure of CE 17 

#### Simplifying cost structure of CE 19 

#### Cost of loops [13,14] 

 * loop 13:group3(A,B,C,D,E) -> [group3(A',B',C',D',E')] 
12
 * loop 14:group3(A,B,C,D,E) -> [group3(A',B',C',D',E')] 
12
##### Pending set group3(A,B,C,D,E)
* Psum in Loop 13: [it(13)=<1]
* Psum in Loop 14: [it(14)=<1]

###### Computing sum for it(13)=<1  in Loop 13 
   - Applying inductive sum strategy 
     - head Candidate: A/3-1 
       - Loop 14 is collaborative and bounds [it(14)] 
     - head Candidate: A/3-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A/3-1 
       - Loop 14 is collaborative and bounds [it(14)] 
     - tail Candidate: A/3-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(13)+it(14)=<A/3-1,it(13)+it(14)=<A/3-1,it(13)+it(14)=<A/3-A'/3,it(13)+it(14)=<A/3-A'/3] 

##### Pending set A
* Psum in Loop 14: [it(14)=<1]

###### Computing sum for it(14)=<1  in Loop 14 
   - Applying inductive sum strategy 
     - head Candidate: A/3-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A/3-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A/3-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A/3-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(13)+it(14)=<A/3-1,it(13)+it(14)=<A/3-1,it(13)+it(14)=<A/3-A'/3,it(13)+it(14)=<A/3-A'/3] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [13,14] 

#### Simplifying cost structure of phase [13,14] 
 * Joined equivalent variables [it(13),it(14)] into it(13)

#### Cost of phase [13,14]:group3(A,B,C,D,E) -> [group3(A',B',C',D',E')] 
24*it(13)+0
  Such that:aux(1) =< A/3
aux(2) =< A/3-A'/3
it(13) =< aux(1)
it(13) =< aux(2)

#### Simplifying cost structure of chain [[13,14],16,19] 
 * Joined equivalent variables [aux(3),aux(1),aux(2)] into aux(3)

#### Simplifying cost structure of CE 14 

#### Simplifying cost structure of chain [16,18] 

#### Found solution for phase  [13,14] in the cache 

#### Cost of phase [13,14]:group3(A,B,C,D,E) -> [group3(A',B',C',D',E')] 
24*it(13)+0
  Such that:aux(1) =< A/3
aux(2) =< A/3-A'/3
it(13) =< aux(1)
it(13) =< aux(2)

#### Simplifying cost structure of chain [[13,14],16,18] 
 * Joined equivalent variables [aux(4),aux(1),aux(2)] into aux(4)

#### Simplifying cost structure of CE 13 

#### Simplifying cost structure of chain [16,17] 

#### Found solution for phase  [13,14] in the cache 

#### Cost of phase [13,14]:group3(A,B,C,D,E) -> [group3(A',B',C',D',E')] 
24*it(13)+0
  Such that:aux(1) =< A/3
aux(2) =< A/3-A'/3
it(13) =< aux(1)
it(13) =< aux(2)

#### Simplifying cost structure of chain [[13,14],16,17] 
 * Joined equivalent variables [aux(5),aux(1),aux(2)] into aux(5)

#### Simplifying cost structure of CE 16 

#### Simplifying cost structure of chain [15,19] 

#### Found solution for phase  [13,14] in the cache 

#### Cost of phase [13,14]:group3(A,B,C,D,E) -> [group3(A',B',C',D',E')] 
24*it(13)+0
  Such that:aux(1) =< A/3
aux(2) =< A/3-A'/3
it(13) =< aux(1)
it(13) =< aux(2)

#### Simplifying cost structure of chain [[13,14],15,19] 
 * Joined equivalent variables [aux(6),aux(1),aux(2)] into aux(6)

#### Simplifying cost structure of chain [15,18] 

#### Found solution for phase  [13,14] in the cache 

#### Cost of phase [13,14]:group3(A,B,C,D,E) -> [group3(A',B',C',D',E')] 
24*it(13)+0
  Such that:aux(1) =< A/3
aux(2) =< A/3-A'/3
it(13) =< aux(1)
it(13) =< aux(2)

#### Simplifying cost structure of chain [[13,14],15,18] 
 * Joined equivalent variables [aux(7),aux(1),aux(2)] into aux(7)

#### Simplifying cost structure of chain [15,17] 

#### Found solution for phase  [13,14] in the cache 

#### Cost of phase [13,14]:group3(A,B,C,D,E) -> [group3(A',B',C',D',E')] 
24*it(13)+0
  Such that:aux(1) =< A/3
aux(2) =< A/3-A'/3
it(13) =< aux(1)
it(13) =< aux(2)

#### Simplifying cost structure of chain [[13,14],15,17] 
 * Joined equivalent variables [aux(8),aux(1),aux(2)] into aux(8)
 * Renamed intermediate variables: 
[ (ch([[13,14],15,19]),aux(6))>>s(1), (ch([[13,14],15,19]),it(13))>>s(2)]
 * Renamed intermediate variables: 
[ (ch([[13,14],16,19]),aux(3))>>s(3), (ch([[13,14],16,19]),it(13))>>s(4)]
 * Joined equivalent variables [aux(9),s(1),s(3)] into aux(9)
 * Joined equivalent variables [s(2),s(4)] into s(2)
 * Renamed intermediate variables: 
[ (ch([[13,14],15,18]),aux(7))>>s(5), (ch([[13,14],15,18]),it(13))>>s(6)]
 * Renamed intermediate variables: 
[ (ch([[13,14],16,18]),aux(4))>>s(7), (ch([[13,14],16,18]),it(13))>>s(8)]
 * Joined equivalent variables [aux(10),s(5),s(7)] into aux(10)
 * Joined equivalent variables [s(6),s(8)] into s(6)
 * Renamed intermediate variables: 
[ (ch([[13,14],15,17]),aux(8))>>s(9), (ch([[13,14],15,17]),it(13))>>s(10)]
 * Renamed intermediate variables: 
[ (ch([[13,14],16,17]),aux(5))>>s(11), (ch([[13,14],16,17]),it(13))>>s(12)]
 * Joined equivalent variables [aux(11),s(9),s(11)] into aux(11)
 * Joined equivalent variables [s(10),s(12)] into s(10)

#### Cost of chains of group3(A,B,C,D,E):
* Chain [[13,14],16,19]: 24*it(13)+15
  Such that:aux(3) =< D
it(13) =< aux(3)

  with precondition: [C=1,A+2=3*D,A>=7,B>=1,E>=0] 

* Chain [[13,14],16,18]: 24*it(13)+18
  Such that:aux(4) =< D
it(13) =< aux(4)

  with precondition: [C=1,A+1=3*D,A>=8,B>=1,E>=0] 

* Chain [[13,14],16,17]: 24*it(13)+21
  Such that:aux(5) =< D
it(13) =< aux(5)

  with precondition: [C=1,A=3*D,A>=9,B>=1,E>=0] 

* Chain [[13,14],15,19]: 24*it(13)+15
  Such that:aux(6) =< D
it(13) =< aux(6)

  with precondition: [C=1,A+2=3*D,A>=7,B>=1,E>=1] 

* Chain [[13,14],15,18]: 24*it(13)+18
  Such that:aux(7) =< D
it(13) =< aux(7)

  with precondition: [C=1,A+1=3*D,A>=8,B>=1,E>=1] 

* Chain [[13,14],15,17]: 24*it(13)+21
  Such that:aux(8) =< D
it(13) =< aux(8)

  with precondition: [C=1,A=3*D,A>=9,B>=1,E>=1] 

* Chain [19]: 3
  with precondition: [A=1,B=0,C=0,D=1,E=0] 

* Chain [18]: 6
  with precondition: [A=2,C=0,D=1,E=0,B>=1] 

* Chain [17]: 9
  with precondition: [A=3,C=0,D=1,E=0,B>=1] 

* Chain [16,19]: 15
  with precondition: [A=4,C=1,D=2,E=0,B>=1] 

* Chain [16,18]: 18
  with precondition: [A=5,C=1,D=2,E=0,B>=1] 

* Chain [16,17]: 21
  with precondition: [A=6,C=1,D=2,E=0,B>=1] 

* Chain [15,19]: 15
  with precondition: [A=4,C=1,D=2,B>=1,E>=1] 

* Chain [15,18]: 18
  with precondition: [A=5,C=1,D=2,B>=1,E>=1] 

* Chain [15,17]: 21
  with precondition: [A=6,C=1,D=2,B>=1,E>=1] 


#### Simplifying cost structure of CE 22 

#### Simplifying cost structure of CE 25 

#### Simplifying cost structure of chain [23,26] 

#### Computing cost of phase [20,21] 

#### Simplifying cost structure of CE 24 

#### Simplifying cost structure of CE 26 

#### Cost of loops [20,21] 

 * loop 20:zip3(A,B,C,D,E,F,G,H,I) -> [zip3(A',B',C',D',E',F',G',H',I')] 
12
 * loop 21:zip3(A,B,C,D,E,F,G,H,I) -> [zip3(A',B',C',D',E',F',G',H',I')] 
12
##### Pending set zip3(A,B,C,D,E,F,G,H,I)
* Psum in Loop 20: [it(20)=<1]
* Psum in Loop 21: [it(21)=<1]

###### Computing sum for it(20)=<1  in Loop 20 
   - Applying inductive sum strategy 
     - head Candidate: E-1 
       - Loop 21 is collaborative and bounds [it(21)] 
     - head Candidate: C-1 
       - Loop 21 is collaborative and bounds [it(21)] 
     - head Candidate: A-1 
       - Loop 21 is collaborative and bounds [it(21)] 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E-1 
       - Loop 21 is collaborative and bounds [it(21)] 
     - tail Candidate: C-1 
       - Loop 21 is collaborative and bounds [it(21)] 
     - tail Candidate: A-1 
       - Loop 21 is collaborative and bounds [it(21)] 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(20)+it(21)=<E-1,it(20)+it(21)=<C-1,it(20)+it(21)=<A-1,it(20)+it(21)=<A-1,it(20)+it(21)=<C-1,it(20)+it(21)=<E-1,it(20)+it(21)=<E-E',it(20)+it(21)=<C-C',it(20)+it(21)=<A-A',it(20)+it(21)=<A-A',it(20)+it(21)=<C-C',it(20)+it(21)=<E-E'] 

##### Pending set A
* Psum in Loop 21: [it(21)=<1]

###### Computing sum for it(21)=<1  in Loop 21 
   - Applying inductive sum strategy 
     - head Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(20)+it(21)=<E-1,it(20)+it(21)=<C-1,it(20)+it(21)=<A-1,it(20)+it(21)=<A-1,it(20)+it(21)=<C-1,it(20)+it(21)=<E-1,it(20)+it(21)=<E-E',it(20)+it(21)=<C-C',it(20)+it(21)=<A-A',it(20)+it(21)=<A-A',it(20)+it(21)=<C-C',it(20)+it(21)=<E-E'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [20,21] 

#### Simplifying cost structure of phase [20,21] 
 * Joined equivalent variables [it(20),it(21)] into it(20)

#### Cost of phase [20,21]:zip3(A,B,C,D,E,F,G,H,I) -> [zip3(A',B',C',D',E',F',G',H',I')] 
24*it(20)+0
  Such that:aux(12) =< A
aux(13) =< A-A'
aux(14) =< C
aux(15) =< C-C'
aux(16) =< E
aux(17) =< E-E'
it(20) =< aux(12)
it(20) =< aux(13)
it(20) =< aux(14)
it(20) =< aux(15)
it(20) =< aux(16)
it(20) =< aux(17)

#### Simplifying cost structure of chain [[20,21],23,26] 
 * Joined equivalent variables [aux(18),aux(12),aux(13),aux(15),aux(17)] into aux(18)

#### Simplifying cost structure of CE 21 

#### Simplifying cost structure of chain [23,25] 

#### Found solution for phase  [20,21] in the cache 

#### Cost of phase [20,21]:zip3(A,B,C,D,E,F,G,H,I) -> [zip3(A',B',C',D',E',F',G',H',I')] 
24*it(20)+0
  Such that:aux(12) =< A
aux(13) =< A-A'
aux(14) =< C
aux(15) =< C-C'
aux(16) =< E
aux(17) =< E-E'
it(20) =< aux(12)
it(20) =< aux(13)
it(20) =< aux(14)
it(20) =< aux(15)
it(20) =< aux(16)
it(20) =< aux(17)

#### Simplifying cost structure of chain [[20,21],23,25] 
 * Joined equivalent variables [aux(19),aux(13),aux(14),aux(15),aux(17)] into aux(19)

#### Simplifying cost structure of CE 20 

#### Simplifying cost structure of chain [23,24] 

#### Found solution for phase  [20,21] in the cache 

#### Cost of phase [20,21]:zip3(A,B,C,D,E,F,G,H,I) -> [zip3(A',B',C',D',E',F',G',H',I')] 
24*it(20)+0
  Such that:aux(12) =< A
aux(13) =< A-A'
aux(14) =< C
aux(15) =< C-C'
aux(16) =< E
aux(17) =< E-E'
it(20) =< aux(12)
it(20) =< aux(13)
it(20) =< aux(14)
it(20) =< aux(15)
it(20) =< aux(16)
it(20) =< aux(17)

#### Simplifying cost structure of chain [[20,21],23,24] 
 * Joined equivalent variables [aux(20),aux(13),aux(15),aux(16),aux(17)] into aux(20)

#### Simplifying cost structure of CE 23 

#### Simplifying cost structure of chain [22,26] 

#### Found solution for phase  [20,21] in the cache 

#### Cost of phase [20,21]:zip3(A,B,C,D,E,F,G,H,I) -> [zip3(A',B',C',D',E',F',G',H',I')] 
24*it(20)+0
  Such that:aux(12) =< A
aux(13) =< A-A'
aux(14) =< C
aux(15) =< C-C'
aux(16) =< E
aux(17) =< E-E'
it(20) =< aux(12)
it(20) =< aux(13)
it(20) =< aux(14)
it(20) =< aux(15)
it(20) =< aux(16)
it(20) =< aux(17)

#### Simplifying cost structure of chain [[20,21],22,26] 
 * Joined equivalent variables [aux(21),aux(12),aux(13),aux(15),aux(17)] into aux(21)

#### Simplifying cost structure of chain [22,25] 

#### Found solution for phase  [20,21] in the cache 

#### Cost of phase [20,21]:zip3(A,B,C,D,E,F,G,H,I) -> [zip3(A',B',C',D',E',F',G',H',I')] 
24*it(20)+0
  Such that:aux(12) =< A
aux(13) =< A-A'
aux(14) =< C
aux(15) =< C-C'
aux(16) =< E
aux(17) =< E-E'
it(20) =< aux(12)
it(20) =< aux(13)
it(20) =< aux(14)
it(20) =< aux(15)
it(20) =< aux(16)
it(20) =< aux(17)

#### Simplifying cost structure of chain [[20,21],22,25] 
 * Joined equivalent variables [aux(22),aux(13),aux(14),aux(15),aux(17)] into aux(22)

#### Simplifying cost structure of chain [22,24] 

#### Found solution for phase  [20,21] in the cache 

#### Cost of phase [20,21]:zip3(A,B,C,D,E,F,G,H,I) -> [zip3(A',B',C',D',E',F',G',H',I')] 
24*it(20)+0
  Such that:aux(12) =< A
aux(13) =< A-A'
aux(14) =< C
aux(15) =< C-C'
aux(16) =< E
aux(17) =< E-E'
it(20) =< aux(12)
it(20) =< aux(13)
it(20) =< aux(14)
it(20) =< aux(15)
it(20) =< aux(16)
it(20) =< aux(17)

#### Simplifying cost structure of chain [[20,21],22,24] 
 * Joined equivalent variables [aux(23),aux(13),aux(15),aux(16),aux(17)] into aux(23)

#### Cost of chains of zip3(A,B,C,D,E,F,G,H,I):
* Chain [[20,21],23,26]: 24*it(20)+15
  Such that:aux(14) =< C
aux(16) =< E
aux(18) =< A
it(20) =< aux(18)
it(20) =< aux(14)
it(20) =< aux(16)

  with precondition: [G=1,A=H,A>=3,B>=1,D>=1,F>=1,I>=0,C>=A,E>=A] 

* Chain [[20,21],23,25]: 24*it(20)+18
  Such that:aux(12) =< A
aux(16) =< E
aux(19) =< C
it(20) =< aux(12)
it(20) =< aux(19)
it(20) =< aux(16)

  with precondition: [G=1,C=H,B>=1,C>=3,D>=1,F>=1,I>=0,A>=C+1,E>=C] 

* Chain [[20,21],23,24]: 24*it(20)+21
  Such that:aux(12) =< A
aux(14) =< C
aux(20) =< E
it(20) =< aux(12)
it(20) =< aux(20)
it(20) =< aux(14)

  with precondition: [G=1,E=H,B>=1,D>=1,E>=3,F>=1,I>=0,A>=E+1,C>=E+1] 

* Chain [[20,21],22,26]: 24*it(20)+15
  Such that:aux(14) =< C
aux(16) =< E
aux(21) =< A
it(20) =< aux(21)
it(20) =< aux(14)
it(20) =< aux(16)

  with precondition: [G=1,A=H,A>=3,B>=1,D>=1,F>=1,I>=1,C>=A,E>=A] 

* Chain [[20,21],22,25]: 24*it(20)+18
  Such that:aux(12) =< A
aux(16) =< E
aux(22) =< C
it(20) =< aux(12)
it(20) =< aux(22)
it(20) =< aux(16)

  with precondition: [G=1,C=H,B>=1,C>=3,D>=1,F>=1,I>=1,A>=C+1,E>=C] 

* Chain [[20,21],22,24]: 24*it(20)+21
  Such that:aux(12) =< A
aux(14) =< C
aux(23) =< E
it(20) =< aux(12)
it(20) =< aux(23)
it(20) =< aux(14)

  with precondition: [G=1,E=H,B>=1,D>=1,E>=3,F>=1,I>=1,A>=E+1,C>=E+1] 

* Chain [26]: 3
  with precondition: [A=1,B=0,G=0,H=1,I=0,C>=0,D>=0,E>=0,F>=0] 

* Chain [25]: 6
  with precondition: [C=1,D=0,G=0,H=1,I=0,A>=2,B>=1,E>=0,F>=0] 

* Chain [24]: 9
  with precondition: [E=1,F=0,G=0,H=1,I=0,A>=2,B>=1,C>=2,D>=1] 

* Chain [23,26]: 15
  with precondition: [A=2,G=1,H=2,I=0,B>=1,C>=2,D>=1,E>=2,F>=1] 

* Chain [23,25]: 18
  with precondition: [C=2,G=1,H=2,I=0,A>=3,B>=1,D>=1,E>=2,F>=1] 

* Chain [23,24]: 21
  with precondition: [E=2,G=1,H=2,I=0,A>=3,B>=1,C>=3,D>=1,F>=1] 

* Chain [22,26]: 15
  with precondition: [A=2,G=1,H=2,B>=1,C>=2,D>=1,E>=2,F>=1,I>=1] 

* Chain [22,25]: 18
  with precondition: [C=2,G=1,H=2,A>=3,B>=1,D>=1,E>=2,F>=1,I>=1] 

* Chain [22,24]: 21
  with precondition: [E=2,G=1,H=2,A>=3,B>=1,C>=3,D>=1,F>=1,I>=1] 


Closed-form bounds of zip3(A,B,C,D,E,F,G,H,I): 
-------------------------------------
* Chain [[20,21],23,26] with precondition: [G=1,A=H,A>=3,B>=1,D>=1,F>=1,I>=0,C>=A,E>=A] 
    - Upper bound: 24*A+15 
    - Complexity: n 
* Chain [[20,21],23,25] with precondition: [G=1,C=H,B>=1,C>=3,D>=1,F>=1,I>=0,A>=C+1,E>=C] 
    - Upper bound: 24*A+18 
    - Complexity: n 
* Chain [[20,21],23,24] with precondition: [G=1,E=H,B>=1,D>=1,E>=3,F>=1,I>=0,A>=E+1,C>=E+1] 
    - Upper bound: 24*A+21 
    - Complexity: n 
* Chain [[20,21],22,26] with precondition: [G=1,A=H,A>=3,B>=1,D>=1,F>=1,I>=1,C>=A,E>=A] 
    - Upper bound: 24*A+15 
    - Complexity: n 
* Chain [[20,21],22,25] with precondition: [G=1,C=H,B>=1,C>=3,D>=1,F>=1,I>=1,A>=C+1,E>=C] 
    - Upper bound: 24*A+18 
    - Complexity: n 
* Chain [[20,21],22,24] with precondition: [G=1,E=H,B>=1,D>=1,E>=3,F>=1,I>=1,A>=E+1,C>=E+1] 
    - Upper bound: 24*A+21 
    - Complexity: n 
* Chain [26] with precondition: [A=1,B=0,G=0,H=1,I=0,C>=0,D>=0,E>=0,F>=0] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [25] with precondition: [C=1,D=0,G=0,H=1,I=0,A>=2,B>=1,E>=0,F>=0] 
    - Upper bound: 6 
    - Complexity: constant 
* Chain [24] with precondition: [E=1,F=0,G=0,H=1,I=0,A>=2,B>=1,C>=2,D>=1] 
    - Upper bound: 9 
    - Complexity: constant 
* Chain [23,26] with precondition: [A=2,G=1,H=2,I=0,B>=1,C>=2,D>=1,E>=2,F>=1] 
    - Upper bound: 15 
    - Complexity: constant 
* Chain [23,25] with precondition: [C=2,G=1,H=2,I=0,A>=3,B>=1,D>=1,E>=2,F>=1] 
    - Upper bound: 18 
    - Complexity: constant 
* Chain [23,24] with precondition: [E=2,G=1,H=2,I=0,A>=3,B>=1,C>=3,D>=1,F>=1] 
    - Upper bound: 21 
    - Complexity: constant 
* Chain [22,26] with precondition: [A=2,G=1,H=2,B>=1,C>=2,D>=1,E>=2,F>=1,I>=1] 
    - Upper bound: 15 
    - Complexity: constant 
* Chain [22,25] with precondition: [C=2,G=1,H=2,A>=3,B>=1,D>=1,E>=2,F>=1,I>=1] 
    - Upper bound: 18 
    - Complexity: constant 
* Chain [22,24] with precondition: [E=2,G=1,H=2,A>=3,B>=1,C>=3,D>=1,F>=1,I>=1] 
    - Upper bound: 21 
    - Complexity: constant 

### Maximum cost of zip3(A,B,C,D,E,F,G,H,I): 24*A+21 
Asymptotic class: n 

Closed-form bounds of group3(A,B,C,D,E): 
-------------------------------------
* Chain [[13,14],16,19] with precondition: [C=1,A+2=3*D,A>=7,B>=1,E>=0] 
    - Upper bound: 8*A+31 
    - Complexity: n 
* Chain [[13,14],16,18] with precondition: [C=1,A+1=3*D,A>=8,B>=1,E>=0] 
    - Upper bound: 8*A+26 
    - Complexity: n 
* Chain [[13,14],16,17] with precondition: [C=1,A=3*D,A>=9,B>=1,E>=0] 
    - Upper bound: 8*A+21 
    - Complexity: n 
* Chain [[13,14],15,19] with precondition: [C=1,A+2=3*D,A>=7,B>=1,E>=1] 
    - Upper bound: 8*A+31 
    - Complexity: n 
* Chain [[13,14],15,18] with precondition: [C=1,A+1=3*D,A>=8,B>=1,E>=1] 
    - Upper bound: 8*A+26 
    - Complexity: n 
* Chain [[13,14],15,17] with precondition: [C=1,A=3*D,A>=9,B>=1,E>=1] 
    - Upper bound: 8*A+21 
    - Complexity: n 
* Chain [19] with precondition: [A=1,B=0,C=0,D=1,E=0] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [18] with precondition: [A=2,C=0,D=1,E=0,B>=1] 
    - Upper bound: 6 
    - Complexity: constant 
* Chain [17] with precondition: [A=3,C=0,D=1,E=0,B>=1] 
    - Upper bound: 9 
    - Complexity: constant 
* Chain [16,19] with precondition: [A=4,C=1,D=2,E=0,B>=1] 
    - Upper bound: 15 
    - Complexity: constant 
* Chain [16,18] with precondition: [A=5,C=1,D=2,E=0,B>=1] 
    - Upper bound: 18 
    - Complexity: constant 
* Chain [16,17] with precondition: [A=6,C=1,D=2,E=0,B>=1] 
    - Upper bound: 21 
    - Complexity: constant 
* Chain [15,19] with precondition: [A=4,C=1,D=2,B>=1,E>=1] 
    - Upper bound: 15 
    - Complexity: constant 
* Chain [15,18] with precondition: [A=5,C=1,D=2,B>=1,E>=1] 
    - Upper bound: 18 
    - Complexity: constant 
* Chain [15,17] with precondition: [A=6,C=1,D=2,B>=1,E>=1] 
    - Upper bound: 21 
    - Complexity: constant 

### Maximum cost of group3(A,B,C,D,E): 8*A+31 
Asymptotic class: n 
* Total analysis performed in 2427 ms.


Cost relation system solved by CoFloCo in 2429 ms.

Method zip3 terminates?: YES

 - l1_1: size of l1 wrt. List<A>
 - l1_2: size of l1 wrt. A
 - l2_1: size of l2 wrt. List<A>
 - l2_2: size of l2 wrt. A
 - l3_1: size of l3 wrt. List<A>
 - l3_2: size of l3 wrt. A
UB for zip3(l1_1,l1_2,l2_1,l2_2,l3_1,l3_2) = 24*l1_1+21

Method group3 terminates?: YES

 - l_1: size of l wrt. List<A>
 - l_2: size of l wrt. A
UB for group3(l_1,l_2) = 8*l_1+31

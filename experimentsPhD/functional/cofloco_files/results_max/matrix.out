
Abs program loaded in 8 ms.

Rule based representation generated in 10 ms.

Rule based representation stored in /tmp/costabs/rbr.rbr

RBR properties stored in /tmp/costabs/rbr.properties

Class invariants generated and loaded in 0 ms.

Abstract compilation performed in 88 ms.

Cost relation system stored in /tmp/costabs/crs.crs

Generated 155 equations 
entry('size'(A,B,C):[]).
entry('check_lists'(A,B,C,D,E):[]).
entry('check_mat'(A,B,C,D,E,F):[]).
entry('check_matrix'(A,B,C,D,E):[]).
entry('construct_matrix'(A,B,C,D,E,F,G,H,I):[]).
entry('get_elemL'(A,B,C,D,E,F):[]).
entry('get_elemMat'(A,B,C,D,E,F,G):[]).
entry('op'(A,B,C,D):[]).
entry('rec_list'(A,B,C,D,E,F,G):[]).
entry('rec_mat'(A,B,C,D,E,F,G,H,I,J):[]).
entry('check_sanity'(A,B,C,D,E,F,G,H,I):[]).
entry('plus'(A,B,C,D,E,F,G,H,I,J,K,L):[]).
entry('minus'(A,B,C,D,E,F,G,H,I,J,K,L):[]).
entry('append'(A,B,C,D,E):[]).
entry('append_row'(A,B,C,D,E,F,G,H):[]).
entry('transpose_helper'(A,B,C,D,E,F,G,H,I):[]).
entry('transpose'(A,B,C,D,E,F):[]).
entry('reverse_helper'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O):[]).
entry('reverseL'(A,B,C,D,E,F,G,H,I,J):[]).
entry('reverse_rows_helper'(A,B,C,D,E,F,G,H,I):[]).
entry('reverse_rows'(A,B,C,D,E,F):[]).
entry('append_start'(A,B,C,D,E,F,G,H):[]).
entry('new_transpose_helper'(A,B,C,D,E,F,G,H,I):[]).
entry('new_transpose'(A,B,C,D,E,F):[]).
entry('prod'(A,B,C,D,E):[]).
entry('prod_mat'(A,B,C,D,E,F,G):[]).
entry('mat_mult'(A,B,C,D,E,F,G,H,I):[]).
entry('lineMult'(A,B,C,D,E,F,G):[]).
entry('computeLine'(A,B,C,D,E,F,G,H,I):[]).
entry('mat_mult_jan'(A,B,C,D,E,F,G,H,I):[]).
entry('check_mult_sanity'(A,B,C,D,E,F,G,H,I):[]).
entry('mult'(A,B,C,D,E,F,G,H,I,J,K,L):[]).
entry('evaluate'(A,B,C,D,E,F,G,H):[]).
entry('del'(A,B,C,D,E):[]).
entry('submat'(A,B,C,D,E,F,G,H):[]).
entry('remFirstRow'(A,B,C,D,E,F):[]).
input_output_vars('and_op'(A,B,C),[A,B],[C]).
input_output_vars('append'(A,B,C,D,E),[A,B,C],[D,E]).
input_output_vars('append_row'(A,B,C,D,E,F,G,H),[A,B,C,D,E],[F,G,H]).
input_output_vars('append_start'(A,B,C,D,E,F,G,H),[A,B,C,D,E],[F,G,H]).
input_output_vars('case_0'(A,B,C,D,E,F,G),[A,B,C,D,E],[F,G]).
input_output_vars('case_1'(A,B,C,D,E),[A,B,C,D],[E]).
input_output_vars('case_10'(A,B,C,D,E,F,G),[A,B,C,D,E,F],[G]).
input_output_vars('case_11'(A,B,C,D,E),[A,B,C,D],[E]).
input_output_vars('case_12'(A,B,C,D,E,F,G),[A,B,C,D,E],[F,G]).
input_output_vars('case_13'(A,B,C,D,E,F,G,H,I,J),[A,B,C,D,E,F,G,H],[I,J]).
input_output_vars('case_14'(A,B,C,D,E,F,G,H,I,J),[A,B,C,D,E,F,G],[H,I,J]).
input_output_vars('case_15'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O),[A,B,C,D,E,F,G,H,I,J,K,L],[M,N,O]).
input_output_vars('case_16'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F,G,H],[I]).
input_output_vars('case_17'(A,B,C,D,E,F,G,H,I,J,K),[A,B,C,D,E,F,G,H,I,J],[K]).
input_output_vars('case_18'(A,B,C,D,E,F,G,H,I,J,K,L,M),[A,B,C,D,E,F,G,H,I],[J,K,L,M]).
input_output_vars('case_19'(A,B,C,D,E,F,G,H,I,J,K,L),[A,B,C,D,E,F,G,H],[I,J,K,L]).
input_output_vars('case_2'(A,B,C,D,E,F,G,H,I,J,K),[A,B,C,D,E,F,G,H,I,J],[K]).
input_output_vars('case_20'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q),[A,B,C,D,E,F,G,H,I,J,K,L,M],[N,O,P,Q]).
input_output_vars('case_21'(A,B,C,D,E,F,G,H,I,J,K,L,M),[A,B,C,D,E,F,G,H,I],[J,K,L,M]).
input_output_vars('case_22'(A,B,C,D,E,F,G,H,I,J,K,L),[A,B,C,D,E,F,G,H],[I,J,K,L]).
input_output_vars('case_23'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q),[A,B,C,D,E,F,G,H,I,J,K,L,M],[N,O,P,Q]).
input_output_vars('case_24'(A,B,C,D,E),[A,B,C],[D,E]).
input_output_vars('case_25'(A,B,C,D,E,F,G,H),[A,B,C,D,E],[F,G,H]).
input_output_vars('case_26'(A,B,C,D,E,F,G,H,I,J,K),[A,B,C,D,E,F,G,H],[I,J,K]).
input_output_vars('case_27'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F],[G,H,I]).
input_output_vars('case_28'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O),[A,B,C,D,E,F,G,H,I,J],[K,L,M,N,O]).
input_output_vars('case_29'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F],[G,H,I]).
input_output_vars('case_3'(A,B,C,D,E,F,G),[A,B,C,D,E,F],[G]).
input_output_vars('case_30'(A,B,C,D,E,F,G,H),[A,B,C,D,E],[F,G,H]).
input_output_vars('case_31'(A,B,C,D,E,F,G,H,I,J,K),[A,B,C,D,E,F,G,H],[I,J,K]).
input_output_vars('case_32'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F],[G,H,I]).
input_output_vars('case_33'(A,B,C,D,E),[A,B,C,D],[E]).
input_output_vars('case_34'(A,B,C,D,E,F,G,H),[A,B,C,D,E,F,G],[H]).
input_output_vars('case_35'(A,B,C,D,E,F,G),[A,B,C,D,E],[F,G]).
input_output_vars('case_36'(A,B,C,D,E,F,G,H,I,J,K,L),[A,B,C,D,E,F,G,H,I],[J,K,L]).
input_output_vars('case_37'(A,B,C,D,E,F,G),[A,B,C,D,E],[F,G]).
input_output_vars('case_38'(A,B,C,D,E,F,G,H,I,J),[A,B,C,D,E,F,G,H],[I,J]).
input_output_vars('case_39'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F,G],[H,I]).
input_output_vars('case_4'(A,B,C,D,E),[A,B,C,D],[E]).
input_output_vars('case_40'(A,B,C,D,E,F,G,H,I,J,K,L),[A,B,C,D,E,F,G,H,I,J],[K,L]).
input_output_vars('case_41'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F],[G,H,I]).
input_output_vars('case_42'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F,G,H],[I]).
input_output_vars('case_43'(A,B,C,D,E,F,G,H,I,J),[A,B,C,D,E,F,G,H,I],[J]).
input_output_vars('case_44'(A,B,C,D,E,F,G,H,I,J,K,L,M),[A,B,C,D,E,F,G,H,I],[J,K,L,M]).
input_output_vars('case_45'(A,B,C,D,E,F,G,H,I,J,K,L),[A,B,C,D,E,F,G,H],[I,J,K,L]).
input_output_vars('case_46'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q),[A,B,C,D,E,F,G,H,I,J,K,L,M],[N,O,P,Q]).
input_output_vars('case_47'(A,B,C,D,E,F,G,H),[A,B,C,D],[E,F,G,H]).
input_output_vars('case_48'(A,B,C,D,E),[A,B,C],[D,E]).
input_output_vars('case_49'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F,G],[H,I]).
input_output_vars('case_5'(A,B,C,D,E,F,G,H,I,J),[A,B,C,D,E,F],[G,H,I,J]).
input_output_vars('case_50'(A,B,C,D,E,F,G,H),[A,B,C,D,E],[F,G,H]).
input_output_vars('case_51'(A,B,C,D,E,F,G,H,I,J,K,L,M,N),[A,B,C,D,E,F,G,H,I,J,K],[L,M,N]).
input_output_vars('case_52'(A,B,C,D,E,F),[A,B,C],[D,E,F]).
input_output_vars('case_53'(A,B,C),[A,B],[C]).
input_output_vars('case_6'(A,B,C,D),[A,B,C],[D]).
input_output_vars('case_7'(A,B,C,D,E,F,G,H),[A,B,C,D,E,F,G],[H]).
input_output_vars('case_8'(A,B,C,D,E,F),[A,B,C,D],[E,F]).
input_output_vars('case_9'(A,B,C,D,E,F,G,H,I,J,K,L),[A,B,C,D,E,F,G,H,I,J],[K,L]).
input_output_vars('check_lists'(A,B,C,D,E),[A,B,C,D],[E]).
input_output_vars('check_mat'(A,B,C,D,E,F),[A,B,C,D,E],[F]).
input_output_vars('check_matrix'(A,B,C,D,E),[A,B,C,D],[E]).
input_output_vars('check_mult_sanity'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F,G,H],[I]).
input_output_vars('check_sanity'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F,G,H],[I]).
input_output_vars('computeLine'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F,G],[H,I]).
input_output_vars('construct_matrix'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E],[F,G,H,I]).
input_output_vars('del'(A,B,C,D,E),[A,B,C],[D,E]).
input_output_vars('eq'(A,B,C),[A,B],[C]).
input_output_vars('evaluate'(A,B,C,D,E,F,G,H),[A,B,C,D],[E,F,G,H]).
input_output_vars('geq'(A,B,C),[A,B],[C]).
input_output_vars('get_elem'(A,B,C,D),[A,B,C],[D]).
input_output_vars('get_elemL'(A,B,C,D,E,F),[A,B,C,D],[E,F]).
input_output_vars('get_elemMat'(A,B,C,D,E,F,G),[A,B,C,D,E,F],[G]).
input_output_vars('gt'(A,B,C),[A,B],[C]).
input_output_vars('leq'(A,B,C),[A,B],[C]).
input_output_vars('lineMult'(A,B,C,D,E,F,G),[A,B,C,D,E],[F,G]).
input_output_vars('lt'(A,B,C),[A,B],[C]).
input_output_vars('mat_mult'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F],[G,H,I]).
input_output_vars('mat_mult_jan'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F],[G,H,I]).
input_output_vars('maxNorm'(A,B,C),[A,B],[C]).
input_output_vars('minus'(A,B,C,D,E,F,G,H,I,J,K,L),[A,B,C,D,E,F,G,H],[I,J,K,L]).
input_output_vars('mult'(A,B,C,D,E,F,G,H,I,J,K,L),[A,B,C,D,E,F,G,H],[I,J,K,L]).
input_output_vars('neg'(A,B),[A],[B]).
input_output_vars('neq'(A,B,C),[A,B],[C]).
input_output_vars('new_transpose'(A,B,C,D,E,F),[A,B,C],[D,E,F]).
input_output_vars('new_transpose_helper'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F],[G,H,I]).
input_output_vars('op'(A,B,C,D),[A,B,C],[D]).
input_output_vars('or'(A,B,C),[A,B],[C]).
input_output_vars('plus'(A,B,C,D,E,F,G,H,I,J,K,L),[A,B,C,D,E,F,G,H],[I,J,K,L]).
input_output_vars('prod'(A,B,C,D,E),[A,B,C,D],[E]).
input_output_vars('prod_mat'(A,B,C,D,E,F,G),[A,B,C,D,E],[F,G]).
input_output_vars('rec_list'(A,B,C,D,E,F,G),[A,B,C,D,E],[F,G]).
input_output_vars('rec_mat'(A,B,C,D,E,F,G,H,I,J),[A,B,C,D,E,F,G],[H,I,J]).
input_output_vars('remFirstRow'(A,B,C,D,E,F),[A,B,C],[D,E,F]).
input_output_vars('reverseL'(A,B,C,D,E,F,G,H,I,J),[A,B,C,D,E],[F,G,H,I,J]).
input_output_vars('reverse_helper'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O),[A,B,C,D,E,F,G,H,I,J],[K,L,M,N,O]).
input_output_vars('reverse_rows'(A,B,C,D,E,F),[A,B,C],[D,E,F]).
input_output_vars('reverse_rows_helper'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F],[G,H,I]).
input_output_vars('size'(A,B,C),[A,B],[C]).
input_output_vars('sizeL'(A,B,C,D,E,F,G),[A,B,C,D,E],[F,G]).
input_output_vars('submat'(A,B,C,D,E,F,G,H),[A,B,C,D,E],[F,G,H]).
input_output_vars('transpose'(A,B,C,D,E,F),[A,B,C],[D,E,F]).
input_output_vars('transpose_helper'(A,B,C,D,E,F,G,H,I),[A,B,C,D,E,F],[G,H,I]).
eq('eq',[A,B,C],0,[],[A=B,C=1,A>=0,B>=0,C>=0]).
eq('eq',[A,B,C],0,[],[A>=B+1,C=0,A>=0,B>=0,C>=0]).
eq('eq',[A,B,C],0,[],[B>=A+1,C=0,A>=0,B>=0,C>=0]).
eq('neq',[A,B,C],0,[],[A=B,C=0,A>=0,B>=0,C>=0]).
eq('neq',[A,B,C],0,[],[A>=B+1,C=1,A>=0,B>=0,C>=0]).
eq('neq',[A,B,C],0,[],[B>=A+1,C=1,A>=0,B>=0,C>=0]).
eq('lt',[A,B,C],0,[],[B-A>=1,C=1,A>=0,B>=0,C>=0]).
eq('lt',[A,B,C],0,[],[B=<A,C=0,A>=0,B>=0,C>=0]).
eq('leq',[A,B,C],0,[],[A=<B,C=1,A>=0,B>=0,C>=0]).
eq('leq',[A,B,C],0,[],[A-B>=1,C=0,A>=0,B>=0,C>=0]).
eq('gt',[A,B,C],0,[],[A-B>=1,C=1,A>=0,B>=0,C>=0]).
eq('gt',[A,B,C],0,[],[A=<B,C=0,A>=0,B>=0,C>=0]).
eq('geq',[A,B,C],0,[],[B=<A,C=1,A>=0,B>=0,C>=0]).
eq('geq',[A,B,C],0,[],[B-A>=1,C=0,A>=0,B>=0,C>=0]).
eq('neg',[A,B],0,[],[A=0,B=1,A>=0,B>=0]).
eq('neg',[A,B],0,[],[A=1,B=0,A>=0,B>=0]).
eq('and_op',[A,B,C],0,[],[A=0,C=0,A>=0,B>=0,C>=0]).
eq('and_op',[A,B,C],0,[],[A=1,C=B,A>=0,B>=0,C>=0]).
eq('or',[A,B,C],0,[],[A=1,C=1,A>=0,B>=0,C>=0]).
eq('or',[A,B,C],0,[],[A=0,C=B,A>=0,B>=0,C>=0]).
eq('maxNorm',[A,B,A],0,[],[A>=1+B,A>=0,B>=0,A>=0]).
eq('maxNorm',[A,B,B],0,[],[A=<B,A>=0,B>=0,B>=0]).
eq('case_0',[A,B,C,D,E,F,G],2,[],[D=0,C=1,A=1,G=0,F=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_0',[A,B,C,D,E,F,G],5,['sizeL'(H,I,J,K,L,M,N)],[E>=O,E>=L,D>=P,D>=K,B>=Q,B>=I,C=J+1,A=H+1,J>=1,H>=1,P>=1,R=1,S=1,G=R+N,F=S+M,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('sizeL',[A,B,C,D,E,F,G],1,['case_0'(A,B,C,D,E,F,G)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_1',[A,B,C,D,E],2,[],[B=0,A=1,E=1,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_2',[A,B,C,D,E,F,G,H,I,J,K],2,['check_lists'(H,I,J,E,K)],[A=E,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0]).
eq('case_2',[A,B,C,D,E,F,G,H,I,J,K],2,[],[A>=E+1,K=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0]).
eq('case_1',[A,B,C,D,E],4,['sizeL'(F,G,H,I,J,K,L),'case_2'(K,A,B,C,D,F,G,M,N,O,E)],[C>=G,C>=O,B>=F,B>=N,A=M+1,M>=1,F>=1,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('check_lists',[A,B,C,D,E],1,['case_1'(A,B,C,D,E)],[A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_3',[A,B,C,D,E,F,G],2,['check_lists'(D,E,F,C,G)],[A=B,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_3',[A,B,C,D,E,F,G],2,[],[A>=B+1,G=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('check_mat',[A,B,C,D,E,F],2,['sizeL'(G,H,C,D,E,I,J),'case_3'(J,A,B,C,D,E,F)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0]).
eq('case_4',[A,B,C,D,E],2,['check_mat'(F,G,H,I,J,E)],[C>=F,C>=G,C>=J,D=1,B=I,A=H,H>=1,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('check_matrix',[A,B,C,D,E],1,['case_4'(A,B,C,D,E)],[A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_5',[A,B,C,D,E,F,G,H,I,J],2,[],[A=1,I>=B,I>=C,I>=F,J=1,H=E,G=D,D>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('case_5',[A,B,C,D,E,F,G,H,I,J],6,[],[A=0,K=0,L=0,M=0,N=1,I>=K,I>=L,I>=O,J=1,H=M,G=N,N>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('construct_matrix',[A,B,C,D,E,F,G,H,I],2,['check_mat'(A,B,C,D,E,J),'case_5'(J,A,B,C,D,E,F,G,H,I)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('case_7',[A,B,C,D,E,F,G,E],1,[],[D=A,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,E>=0]).
eq('case_7',[A,B,C,D,E,F,G,H],4,['get_elem'(F,G,I,H)],[D>=A+1,J=1,I=D-J,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('case_6',[A,B,C,D],3,['case_7'(E,A,B,C,F,G,H,D)],[B>=F,B>=H,A=G+1,G>=1,E=0,A>=0,B>=0,C>=0,D>=0]).
eq('get_elem',[A,B,C,D],1,['case_6'(A,B,C,D)],[A>=0,B>=0,C>=0,D>=0]).
eq('case_9',[A,B,C,D,E,F,G,H,I,J,F,G],1,[],[E=A,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,F>=0,G>=0]).
eq('case_9',[A,B,C,D,E,F,G,H,I,J,K,L],4,['get_elemL'(H,I,J,M,K,L)],[E>=A+1,N=1,M=E-N,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0]).
eq('case_8',[A,B,C,D,E,F],3,['case_9'(G,A,B,C,D,H,I,J,K,L,E,F)],[C>=I,C>=L,B>=H,B>=K,A=J+1,J>=1,H>=1,G=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0]).
eq('get_elemL',[A,B,C,D,E,F],1,['case_8'(A,B,C,D,E,F)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0]).
eq('case_10',[A,B,C,D,E,F,G],3,['get_elemL'(H,I,J,E,K,L),'get_elem'(K,L,F,G)],[C>=M,C>=M,C>=J,D=1,B=I,A=H,H>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('get_elemMat',[A,B,C,D,E,F,G],1,['case_10'(A,B,C,D,E,F,G)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_11',[A,B,C,D,E],2,[],[B>=A+1,E=C+D,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_11',[A,B,C,D,E],2,[],[A>=B,E=C-D,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('op',[A,B,C,D],2,['case_11'(E,A,B,C,D)],[E=0,A>=0,B>=0,C>=0,D>=0]).
eq('case_12',[A,B,C,D,E,F,G],2,[],[A=1,F=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_13',[A,B,C,D,E,F,G,H,I,J],2,[],[C=1,I=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('case_13',[A,B,C,D,E,F,G,H,I,J],5,['op'(E,F,K,L),'rec_list'(G,H,M,N,E,O,P)],[D>=K,D>=N,C=M+1,M>=1,J>=L,J>=P,I=O+1,O>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('case_12',[A,B,C,D,E,F,G],3,['case_13'(A,B,C,D,E,H,I,J,F,G)],[B>=H,B>=J,A=I+1,I>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('rec_list',[A,B,C,D,E,F,G],1,['case_12'(A,B,C,D,E,F,G)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_14',[A,B,C,D,E,F,G,H,I,J],2,[],[B=0,A=1,I=0,H=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('case_15',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O],2,[],[E=0,D=1,N=0,M=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0]).
eq('case_15',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O],5,['rec_list'(H,I,P,Q,G,R,S),'rec_mat'(J,K,L,T,U,V,G,W,X,Y),'maxNorm'(R,X,N)],[F>=Q,F>=V,E>=P,E>=U,D=T+1,T>=1,P>=1,O>=S,O>=Y,M=W+1,W>=1,R>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0]).
eq('case_14',[A,B,C,D,E,F,G,H,I,J],3,['case_15'(A,B,C,D,E,F,G,K,L,M,N,O,H,I,J)],[C>=L,C>=O,B>=K,B>=N,A=M+1,M>=1,K>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('rec_mat',[A,B,C,D,E,F,G,H,I,J],1,['case_14'(A,B,C,D,E,F,G,H,I,J)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('case_17',[A,B,C,D,E,F,G,H,I,J,K],8,['check_matrix'(A,B,C,D,L),'check_matrix'(E,F,G,H,M),'and_op'(L,M,N),'eq'(I,O,P),'and_op'(N,P,Q),'eq'(J,R,S),'and_op'(Q,S,K)],[G>=O,G>=R,G>=T,H=1,F=U,U>=1,E=V,V>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0]).
eq('case_16',[A,B,C,D,E,F,G,H,I],2,['case_17'(A,B,C,D,E,F,G,H,J,K,I)],[C>=J,C>=K,C>=L,D=1,B=M,M>=1,A=N,N>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('check_sanity',[A,B,C,D,E,F,G,H,I],1,['case_16'(A,B,C,D,E,F,G,H,I)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('case_20',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q],4,['rec_mat'(K,L,M,R,S,T,U,V,W,X),'construct_matrix'(I,J,V,W,X,N,O,P,Q)],[G>=Y,G>=Y,G>=T,H=1,F=S,E=R,R>=1,U=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0]).
eq('case_19',[A,B,C,D,E,F,G,H,I,J,K,L],2,['case_20'(A,B,C,D,E,F,G,H,M,N,O,P,Q,I,J,K,L)],[C>=M,C>=N,C>=Q,D=1,B=P,A=O,O>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0]).
eq('case_18',[A,B,C,D,E,F,G,H,I,J,K,L,M],2,['case_19'(B,C,D,E,F,G,H,I,J,K,L,M)],[A=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0]).
eq('case_18',[A,B,C,D,E,F,G,H,I,J,K,L,M],6,[],[A=0,N=0,O=0,P=0,Q=1,L>=N,L>=O,L>=R,M=1,K=P,J=Q,Q>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0]).
eq('plus',[A,B,C,D,E,F,G,H,I,J,K,L],2,['check_sanity'(A,B,C,D,E,F,G,H,M),'case_18'(M,A,B,C,D,E,F,G,H,I,J,K,L)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0]).
eq('case_23',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q],6,['rec_mat'(K,L,M,R,S,T,U,V,W,X),'construct_matrix'(I,J,Y,Z,A1,B1,C1,D1,E1)],[G>=F1,G>=F1,G>=T,H=1,F=S,E=R,R>=1,U= -1,A1=X,Z=W,Y=V,V>=1,Q=E1,P=D1,O=C1,N=B1,E1>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0]).
eq('case_22',[A,B,C,D,E,F,G,H,I,J,K,L],2,['case_23'(A,B,C,D,E,F,G,H,M,N,O,P,Q,I,J,K,L)],[C>=M,C>=N,C>=Q,D=1,B=P,A=O,O>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0]).
eq('case_21',[A,B,C,D,E,F,G,H,I,J,K,L,M],2,['case_22'(B,C,D,E,F,G,H,I,J,K,L,M)],[A=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0]).
eq('case_21',[A,B,C,D,E,F,G,H,I,J,K,L,M],6,[],[A=0,N=0,O=0,P=0,Q=1,L>=N,L>=O,L>=R,M=1,K=P,J=Q,Q>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0]).
eq('minus',[A,B,C,D,E,F,G,H,I,J,K,L],2,['check_sanity'(A,B,C,D,E,F,G,H,M),'case_21'(M,A,B,C,D,E,F,G,H,I,J,K,L)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0]).
eq('case_24',[A,B,C,D,E],3,[],[A=1,F=1,E>=C,E>=G,D=F+1,F>=1,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_24',[A,B,C,D,E],4,['append'(F,G,C,H,I)],[B>=J,B>=G,A=F+1,F>=1,E>=J,E>=I,D=H+1,H>=1,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('append',[A,B,C,D,E],1,['case_24'(A,B,C,D,E)],[A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_25',[A,B,C,D,E,A,B,C],1,[],[D=1,A>=0,B>=0,C>=0,D>=0,E>=0,A>=0,B>=0,C>=0]).
eq('case_26',[A,B,C,D,E,F,G,H,I,J,K],6,['append_row'(L,M,N,G,H,O,P,Q),'maxNorm'(R,P,J)],[B=0,A=1,S=1,T>=F,T>=U,R=S+1,S>=1,M=0,L=1,K>=T,K>=Q,I=O+1,O>=1,R>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0]).
eq('case_26',[A,B,C,D,E,F,G,H,I,J,K],5,['append'(L,M,F,N,O),'append_row'(P,Q,R,G,H,S,T,U),'maxNorm'(N,T,J)],[C>=M,C>=R,B>=L,B>=Q,A=P+1,P>=1,L>=1,K>=O,K>=U,I=S+1,S>=1,N>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0]).
eq('case_25',[A,B,C,D,E,F,G,H],3,['case_26'(A,B,C,D,E,I,J,K,F,G,H)],[E>=I,E>=K,D=J+1,J>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('append_row',[A,B,C,D,E,F,G,H],1,['case_25'(A,B,C,D,E,F,G,H)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('case_27',[A,B,C,D,E,F,D,E,F],1,[],[B=0,A=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,D>=0,E>=0,F>=0]).
eq('case_27',[A,B,C,D,E,F,G,H,I],4,['append_row'(D,E,F,J,K,L,M,N),'transpose_helper'(O,P,Q,L,M,N,G,H,I)],[C>=K,C>=Q,B>=J,B>=P,A=O+1,O>=1,J>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('transpose_helper',[A,B,C,D,E,F,G,H,I],1,['case_27'(A,B,C,D,E,F,G,H,I)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('transpose',[A,B,C,D,E,F],2,['transpose_helper'(A,B,C,G,H,I,D,E,F)],[H=0,G=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0]).
eq('case_28',[A,B,C,D,E,F,G,H,I,J,F,G,H,I,J],1,[],[E=0,D=1,B=0,A=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('case_28',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O],4,['maxNorm'(P,J,Q),'maxNorm'(R,G,S),'reverse_helper'(T,U,V,W,X,Y,S,Z,A1,Q,K,L,M,N,O)],[E>=P,E>=X,C>=B1,C>=V,B>=R,B>=U,D=W+1,A=T+1,W>=1,T>=1,P>=1,R>=1,Z>=B1,Z>=H,A1=I+1,Y=F+1,I>=1,F>=1,P>=1,R>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0]).
eq('reverse_helper',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O],1,['case_28'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0]).
eq('reverseL',[A,B,C,D,E,F,G,H,I,J],2,['reverse_helper'(A,B,C,D,E,K,L,M,N,O,F,G,H,I,J)],[O=0,N=1,L=0,K=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('case_29',[A,B,C,D,E,F,D,E,F],1,[],[B=0,A=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,D>=0,E>=0,F>=0]).
eq('case_29',[A,B,C,D,E,F,G,H,I],5,['maxNorm'(J,E,K),'reverseL'(L,K,M,N,O,P,Q,R,S,T),'reverse_rows_helper'(U,V,W,P,Q,R,G,H,I)],[C>=X,C>=W,B>=J,B>=V,A=U+1,U>=1,J>=1,M>=X,M>=F,L=D+1,D>=1,J>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('reverse_rows_helper',[A,B,C,D,E,F,G,H,I],1,['case_29'(A,B,C,D,E,F,G,H,I)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('reverse_rows',[A,B,C,D,E,F],3,['reverse_rows_helper'(A,B,C,G,H,I,J,K,L),'reverseL'(J,K,L,M,N,D,E,F,O,P)],[H=0,G=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0]).
eq('case_30',[A,B,C,D,E,F,G,H],2,['reverse_rows'(A,B,C,F,G,H)],[D=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('case_31',[A,B,C,D,E,F,G,H,I,J,K],6,['append_start'(L,M,N,G,H,O,P,Q),'maxNorm'(R,P,J)],[B=0,A=1,S=1,T>=F,T>=U,R=S+1,S>=1,M=0,L=1,K>=T,K>=Q,I=O+1,O>=1,R>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0]).
eq('case_31',[A,B,C,D,E,F,G,H,I,J,K],5,['append_start'(L,M,N,G,H,O,P,Q),'maxNorm'(R,P,J)],[C>=S,C>=N,B>=T,B>=M,A=L+1,L>=1,T>=1,U>=F,U>=S,R=T+1,T>=1,K>=U,K>=Q,I=O+1,O>=1,R>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0]).
eq('case_30',[A,B,C,D,E,F,G,H],3,['case_31'(A,B,C,D,E,I,J,K,F,G,H)],[E>=I,E>=K,D=J+1,J>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('append_start',[A,B,C,D,E,F,G,H],1,['case_30'(A,B,C,D,E,F,G,H)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('case_32',[A,B,C,D,E,F,D,E,F],1,[],[B=0,A=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,D>=0,E>=0,F>=0]).
eq('case_32',[A,B,C,D,E,F,G,H,I],4,['append_start'(D,E,F,J,K,L,M,N),'new_transpose_helper'(O,P,Q,L,M,N,G,H,I)],[C>=K,C>=Q,B>=J,B>=P,A=O+1,O>=1,J>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('new_transpose_helper',[A,B,C,D,E,F,G,H,I],1,['case_32'(A,B,C,D,E,F,G,H,I)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('new_transpose',[A,B,C,D,E,F],3,['new_transpose_helper'(A,B,C,G,H,I,J,K,L),'reverse_rows'(J,K,L,D,E,F)],[H=0,G=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0]).
eq('case_33',[A,B,C,D,E],2,[],[A=1,E=0,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_34',[A,B,C,D,E,F,G,H],2,[],[C=1,H=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('case_34',[A,B,C,D,E,F,G,H],5,['prod'(F,G,I,J,K)],[D>=L,D>=J,C=I+1,I>=1,M=N,H=M+K,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('case_33',[A,B,C,D,E],3,['case_34'(A,B,C,D,F,G,H,E)],[B>=F,B>=H,A=G+1,G>=1,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('prod',[A,B,C,D,E],1,['case_33'(A,B,C,D,E)],[A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_35',[A,B,C,D,E,F,G],2,[],[D=0,C=1,F=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_35',[A,B,C,D,E,F,G],5,['prod'(A,B,H,I,J),'prod_mat'(A,B,K,L,M,N,O)],[E>=I,E>=M,D>=H,D>=L,C=K+1,K>=1,H>=1,G>=J,G>=O,F=N+1,N>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('prod_mat',[A,B,C,D,E,F,G],1,['case_35'(A,B,C,D,E,F,G)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_36',[A,B,C,D,E,F,G,H,I,J,K,L],2,[],[E=0,D=1,K=0,J=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0]).
eq('case_36',[A,B,C,D,E,F,G,H,I,J,K,L],5,['prod_mat'(M,N,A,B,C,O,P),'mat_mult'(Q,R,S,G,H,I,T,U,V),'maxNorm'(O,U,K)],[F>=N,F>=S,E>=M,E>=R,D=Q+1,Q>=1,M>=1,L>=P,L>=V,J=T+1,T>=1,O>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0]).
eq('mat_mult',[A,B,C,D,E,F,G,H,I],4,['transpose'(D,E,F,J,K,L),'case_36'(M,N,O,A,B,C,D,E,F,P,Q,R)],[O=L,N=K,M=J,J>=1,I=R,H=Q,G=P,P>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('case_37',[A,B,C,D,E,F,G],2,[],[B=1,F=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_38',[A,B,C,D,E,F,G,H,I,J],5,['lineMult'(A,G,H,K,L,M,N)],[D=1,O=P,K=1,J>=O,J>=N,I=M+1,M>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('case_38',[A,B,C,D,E,F,G,H,I,J],6,['lineMult'(A,G,H,K,L,M,N)],[E>=O,E>=L,D=K+1,K>=1,P=Q,R=P+O,J>=R,J>=N,I=M+1,M>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('case_37',[A,B,C,D,E,F,G],3,['case_38'(A,B,C,D,E,H,I,J,F,G)],[C>=H,C>=J,B=I+1,I>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('lineMult',[A,B,C,D,E,F,G],1,['case_37'(A,B,C,D,E,F,G)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_39',[A,B,C,D,E,F,G,F,G],1,[],[A=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,F>=0,G>=0]).
eq('case_40',[A,B,C,D,E,F,G,H,I,J,K,L],2,[],[D=0,C=1,K=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0]).
eq('case_40',[A,B,C,D,E,F,G,H,I,J,K,L],4,['lineMult'(H,M,N,F,G,O,P),'computeLine'(I,J,Q,R,S,O,P,K,L)],[E>=N,E>=S,D>=M,D>=R,C=Q+1,Q>=1,M>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0]).
eq('case_39',[A,B,C,D,E,F,G,H,I],3,['case_40'(A,B,C,D,E,F,G,J,K,L,H,I)],[B>=J,B>=L,A=K+1,K>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('computeLine',[A,B,C,D,E,F,G,H,I],1,['case_39'(A,B,C,D,E,F,G,H,I)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('case_41',[A,B,C,D,E,F,G,H,I],2,[],[B=0,A=1,H=0,G=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('case_41',[A,B,C,D,E,F,G,H,I],6,['computeLine'(J,K,D,E,F,L,M,N,O),'mat_mult_jan'(P,Q,R,D,E,F,S,T,U),'maxNorm'(N,T,H)],[C>=K,C>=R,B>=J,B>=Q,A=P+1,P>=1,J>=1,L=1,I>=O,I>=U,G=S+1,S>=1,N>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('mat_mult_jan',[A,B,C,D,E,F,G,H,I],1,['case_41'(A,B,C,D,E,F,G,H,I)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('case_43',[A,B,C,D,E,F,G,H,I,J],2,['eq'(I,K,J)],[G>=L,G>=K,G>=L,H=1,F=M,M>=1,E=N,N>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('case_42',[A,B,C,D,E,F,G,H,I],2,['case_43'(A,B,C,D,E,F,G,H,J,I)],[C>=K,C>=J,C>=K,D=1,B=L,L>=1,A=M,M>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('check_mult_sanity',[A,B,C,D,E,F,G,H,I],5,['check_matrix'(A,B,C,D,J),'check_matrix'(E,F,G,H,K),'and_op'(J,K,L),'case_42'(A,B,C,D,E,F,G,H,M),'and_op'(L,M,I)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('case_46',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q],5,['mat_mult_jan'(K,L,M,R,S,T,U,V,W),'construct_matrix'(I,J,X,Y,Z,A1,B1,C1,D1)],[G>=E1,G>=F1,G>=T,H=1,F=S,E=R,R>=1,Z=W,Y=V,X=U,U>=1,Q=D1,P=C1,O=B1,N=A1,D1>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0,Q>=0]).
eq('case_45',[A,B,C,D,E,F,G,H,I,J,K,L],2,['case_46'(A,B,C,D,E,F,G,H,M,N,O,P,Q,I,J,K,L)],[C>=M,C>=N,C>=Q,D=1,B=P,A=O,O>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0]).
eq('case_44',[A,B,C,D,E,F,G,H,I,J,K,L,M],2,['case_45'(B,C,D,E,F,G,H,I,J,K,L,M)],[A=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0]).
eq('case_44',[A,B,C,D,E,F,G,H,I,J,K,L,M],6,[],[A=0,N=0,O=0,P=0,Q=1,L>=N,L>=O,L>=R,M=1,K=P,J=Q,Q>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0]).
eq('mult',[A,B,C,D,E,F,G,H,I,J,K,L],2,['check_mult_sanity'(A,B,C,D,E,F,G,H,M),'case_44'(M,A,B,C,D,E,F,G,H,I,J,K,L)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0]).
eq('case_47',[A,B,C,D,E,F,G,H],2,['construct_matrix'(I,J,K,L,M,E,F,G,H)],[C>=I,C>=J,C>=M,D=1,B=L,A=K,K>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('case_47',[A,B,C,D,E,F,G,H],5,['evaluate'(I,J,K,L,M,N,O,P),'evaluate'(Q,R,S,T,U,V,W,X),'plus'(M,N,O,P,U,V,W,X,E,F,G,H)],[C>=K,C>=S,B>=J,B>=R,A>=I,A>=Q,D=T+L+1,T>=1,L>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('case_47',[A,B,C,D,E,F,G,H],6,['evaluate'(I,J,K,L,M,N,O,P),'evaluate'(Q,R,S,T,U,V,W,X),'minus'(M,N,O,P,U,V,W,X,E,F,G,H)],[C>=K,C>=S,B>=J,B>=R,A>=I,A>=Q,D=T+L+1,T>=1,L>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('case_47',[A,B,C,D,E,F,G,H],7,['evaluate'(I,J,K,L,M,N,O,P),'evaluate'(Q,R,S,T,U,V,W,X),'mult'(M,N,O,P,U,V,W,X,E,F,G,H)],[C>=K,C>=S,B>=J,B>=R,A>=I,A>=Q,D=T+L+1,T>=1,L>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('evaluate',[A,B,C,D,E,F,G,H],1,['case_47'(A,B,C,D,E,F,G,H)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('case_48',[A,B,C,D,E],2,[],[A=1,D=1,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_49',[A,B,C,D,E,F,G,F,G],1,[],[D=A,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,F>=0,G>=0]).
eq('case_49',[A,B,C,D,E,F,G,H,I],5,['del'(F,G,J,K,L)],[D>=A+1,M=1,J=D-M,I>=E,I>=L,H=K+1,K>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0]).
eq('case_48',[A,B,C,D,E],4,['case_49'(F,A,B,C,G,H,I,D,E)],[B>=G,B>=I,A=H+1,H>=1,F=0,A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('del',[A,B,C,D,E],1,['case_48'(A,B,C,D,E)],[A>=0,B>=0,C>=0,D>=0,E>=0]).
eq('case_50',[A,B,C,D,E,F,G,H],2,[],[B=0,A=1,G=0,F=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('case_51',[A,B,C,D,E,F,G,H,I,J,K,L,M,N],4,['submat'(I,J,K,O,F,L,M,N)],[E=A,P=1,O=E-P,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0]).
eq('case_51',[A,B,C,D,E,F,G,H,I,J,K,L,M,N],6,['del'(G,H,F,O,P),'submat'(I,J,K,Q,F,R,S,T),'maxNorm'(O,S,M)],[E>=A+1,U=1,Q=E-U,N>=P,N>=T,L=R+1,R>=1,O>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0]).
eq('case_50',[A,B,C,D,E,F,G,H],4,['case_51'(I,A,B,C,D,E,J,K,L,M,N,F,G,H)],[C>=K,C>=N,B>=J,B>=M,A=L+1,L>=1,J>=1,I=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('submat',[A,B,C,D,E,F,G,H],1,['case_50'(A,B,C,D,E,F,G,H)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('case_52',[A,B,C,D,E,F],1,[],[C>=G,C>=F,B>=H,B>=E,A=D+1,D>=1,H>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0]).
eq('remFirstRow',[A,B,C,D,E,F],1,['case_52'(A,B,C,D,E,F)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0]).
eq('case_53',[A,B,C],2,[],[B=0,A=1,C=0,A>=0,B>=0,C>=0]).
eq('case_53',[A,B,C],5,['size'(D,E,F)],[B>=G,B>=E,A=D+1,D>=1,G>=1,H=1,C=H+F,A>=0,B>=0,C>=0]).
eq('size',[A,B,C],1,['case_53'(A,B,C)],[A>=0,B>=0,C>=0]).

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [append/5,case_24/5]
1. non_recursive  : [maxNorm/3]
2. recursive [non_tail] : [append_row/8,case_25/8,case_26/11]
3. recursive  : [case_28/15,reverse_helper/15]
4. non_recursive  : [reverseL/10]
5. recursive  : [case_29/9,reverse_rows_helper/9]
6. non_recursive  : [reverse_rows/6]
7. recursive [non_tail] : [append_start/8,case_30/8,case_31/11]
8. recursive  : [case_0/7,sizeL/7]
9. recursive  : [case_1/5,case_2/11,check_lists/5]
10. non_recursive  : [case_3/7]
11. non_recursive  : [check_mat/6]
12. non_recursive  : [case_4/5]
13. non_recursive  : [check_matrix/5]
14. non_recursive  : [and_op/3]
15. non_recursive  : [eq/3]
16. non_recursive  : [case_43/10]
17. non_recursive  : [case_42/9]
18. non_recursive  : [check_mult_sanity/9]
19. non_recursive  : [case_17/11]
20. non_recursive  : [case_16/9]
21. non_recursive  : [check_sanity/9]
22. recursive  : [case_37/7,case_38/10,lineMult/7]
23. recursive  : [case_39/9,case_40/12,computeLine/9]
24. non_recursive  : [case_5/10]
25. non_recursive  : [construct_matrix/9]
26. recursive  : [case_48/5,case_49/9,del/5]
27. non_recursive  : [case_11/5]
28. non_recursive  : [op/4]
29. recursive  : [case_12/7,case_13/10,rec_list/7]
30. recursive [non_tail] : [case_14/10,case_15/15,rec_mat/10]
31. non_recursive  : [case_23/17]
32. non_recursive  : [case_22/12]
33. non_recursive  : [case_21/13]
34. non_recursive  : [minus/12]
35. recursive [non_tail] : [case_41/9,mat_mult_jan/9]
36. non_recursive  : [case_46/17]
37. non_recursive  : [case_45/12]
38. non_recursive  : [case_44/13]
39. non_recursive  : [mult/12]
40. non_recursive  : [case_20/17]
41. non_recursive  : [case_19/12]
42. non_recursive  : [case_18/13]
43. non_recursive  : [plus/12]
44. recursive [non_tail,multiple] : [case_47/8,evaluate/8]
45. recursive  : [case_8/6,case_9/12,get_elemL/6]
46. recursive  : [case_6/4,case_7/8,get_elem/4]
47. non_recursive  : [case_10/7]
48. non_recursive  : [get_elemMat/7]
49. recursive  : [case_33/5,case_34/8,prod/5]
50. recursive  : [case_35/7,prod_mat/7]
51. recursive  : [case_27/9,transpose_helper/9]
52. non_recursive  : [transpose/6]
53. recursive [non_tail] : [case_36/12,mat_mult/9]
54. recursive  : [case_32/9,new_transpose_helper/9]
55. non_recursive  : [new_transpose/6]
56. non_recursive  : [case_52/6]
57. non_recursive  : [remFirstRow/6]
58. recursive  : [case_53/3,size/3]
59. recursive [non_tail] : [case_50/8,case_51/14,submat/8]
Warning: the following predicates are never called:[geq/3,gt/3,leq/3,lt/3,neg/2,neq/3,or/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into append/5
1. SCC is partially evaluated into maxNorm/3
2. SCC is partially evaluated into append_row/8
3. SCC is partially evaluated into reverse_helper/15
4. SCC is partially evaluated into reverseL/10
5. SCC is partially evaluated into reverse_rows_helper/9
6. SCC is partially evaluated into reverse_rows/6
7. SCC is partially evaluated into append_start/8
8. SCC is partially evaluated into sizeL/7
9. SCC is partially evaluated into check_lists/5
10. SCC is partially evaluated into case_3/7
11. SCC is partially evaluated into check_mat/6
12. SCC is completely evaluated into other SCCs
13. SCC is partially evaluated into check_matrix/5
14. SCC is partially evaluated into and_op/3
15. SCC is partially evaluated into eq/3
16. SCC is completely evaluated into other SCCs
17. SCC is completely evaluated into other SCCs
18. SCC is partially evaluated into check_mult_sanity/9
19. SCC is partially evaluated into case_17/11
20. SCC is completely evaluated into other SCCs
21. SCC is partially evaluated into check_sanity/9
22. SCC is partially evaluated into lineMult/7
23. SCC is partially evaluated into computeLine/9
24. SCC is partially evaluated into case_5/10
25. SCC is partially evaluated into construct_matrix/9
26. SCC is partially evaluated into del/5
27. SCC is partially evaluated into case_11/5
28. SCC is partially evaluated into op/4
29. SCC is partially evaluated into rec_list/7
30. SCC is partially evaluated into rec_mat/10
31. SCC is partially evaluated into case_23/17
32. SCC is completely evaluated into other SCCs
33. SCC is partially evaluated into case_21/13
34. SCC is partially evaluated into minus/12
35. SCC is partially evaluated into mat_mult_jan/9
36. SCC is partially evaluated into case_46/17
37. SCC is completely evaluated into other SCCs
38. SCC is partially evaluated into case_44/13
39. SCC is partially evaluated into mult/12
40. SCC is partially evaluated into case_20/17
41. SCC is completely evaluated into other SCCs
42. SCC is partially evaluated into case_18/13
43. SCC is partially evaluated into plus/12
44. SCC is partially evaluated into evaluate/8
45. SCC is partially evaluated into get_elemL/6
46. SCC is partially evaluated into get_elem/4
47. SCC is partially evaluated into case_10/7
48. SCC is partially evaluated into get_elemMat/7
49. SCC is partially evaluated into prod/5
50. SCC is partially evaluated into prod_mat/7
51. SCC is partially evaluated into transpose_helper/9
52. SCC is partially evaluated into transpose/6
53. SCC is partially evaluated into mat_mult/9
54. SCC is partially evaluated into new_transpose_helper/9
55. SCC is partially evaluated into new_transpose/6
56. SCC is completely evaluated into other SCCs
57. SCC is partially evaluated into remFirstRow/6
58. SCC is partially evaluated into size/3
59. SCC is partially evaluated into submat/8

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations append/5 
* CE 23 is refined into CE [98] 
* CE 22 is refined into CE [99] 


#### Refined cost equations append/5 
* CE 98: append(A,B,C,D,E) = 4
     [E>=C,C>=0,B>=0,D=2,A=1] 
* CE 99: append(A,B,C,D,E) = 5+ append(F,G,C,H,I)
     [E>=I,B>=G,H>=1,F>=1,E>=0,C>=0,B>=0,H+1=D,F+1=A] 

### Cost equations --> "Loop" of append/5 
* CEs [99] --> Loop 96 
* CEs [98] --> Loop 97 

#### Loops of append/5 
* Loop 96: append(A,B,C,D,E)->  append(A',B',C,C',D')
                  [E>=D',B>=B',C'>=1,A'>=1,E>=0,C>=0,B>=0,C'+1=D,A'+1=A] 
* Loop 97: append(A,B,C,D,E) [E>=C,C>=0,B>=0,D=2,A=1] 

### Ranking functions of CR append(A,B,C,D,E) 
* RF of phase [96]: [A-1]

#### Partial ranking functions of CR append(A,B,C,D,E) 
* Partial RF of phase [96]:
  - RF of loop [96:1]:
    A-1

Discarded unfeasible chain [[96]]...(Non-terminating chain proved terminating)

### Resulting Chains:append(A,B,C,D,E) 
* [[96],97]
* [97]


### Merging Chains  append/5 into  External patterns of execution 
* [[97]] --> 1 
* [[97,[96]]] --> 2 


### Specialization of cost equations maxNorm/3 
* CE 80 is refined into CE [100] 
* CE 79 is refined into CE [101] 


#### Refined cost equations maxNorm/3 
* CE 100: maxNorm(A,B,B) = 0
     [B>=A,A>=1] 
* CE 101: maxNorm(A,B,A) = 0
     [A>=B+1,B>=0] 

### Cost equations --> "Loop" of maxNorm/3 
* CEs [100] --> Loop 98 
* CEs [101] --> Loop 99 

#### Loops of maxNorm/3 
* Loop 98: maxNorm(A,B,B) [B>=A,A>=1] 
* Loop 99: maxNorm(A,B,A) [A>=B+1,B>=0] 

### Ranking functions of CR maxNorm(A,B,C) 

#### Partial ranking functions of CR maxNorm(A,B,C) 


### Resulting Chains:maxNorm(A,B,C) 
* [99]
* [98]


### Merging Chains  maxNorm/3 into  External patterns of execution 
* [[99]] --> 1 
* [[98]] --> 2 


### Specialization of cost equations append_row/8 
* CE 26 is refined into CE [102,103,104,105] 
* CE 25 is refined into CE [106,107] 
* CE 24 is refined into CE [108] 


#### Refined cost equations append_row/8 
* CE 102: append_row(A,B,C,D,E,F,G,H) = 9+ append(I,J,K,L,M):1+ append_row(N,O,P,Q,R,S,T,U)+ maxNorm(V,T,W):1
     [H>=U,E>=R,C>=P,B>=O,H>=M,M>=K,E>=K,C>=J,S>=1,R>=0,Q>=1,N>=1,T>=0,K>=0,J>=0,B>=1,1>=T,S+1=F,Q+1=D,N+1=A,W=2,V=2,L=2,I=1,G=2] 
* CE 103: append_row(A,B,C,D,E,F,G,H) = 9+ append(I,J,K,L,M):1+ append_row(N,O,P,Q,R,S,G,T)+ maxNorm(U,G,G):2
     [H>=T,E>=R,C>=P,B>=O,H>=M,M>=K,E>=K,C>=J,S>=1,R>=0,Q>=1,N>=1,G>=2,K>=0,J>=0,B>=1,S+1=F,Q+1=D,N+1=A,U=2,L=2,I=1] 
* CE 104: append_row(A,B,C,D,E,F,G,H) = 9+ append(I,J,K,G,L):2+ append_row(M,N,O,P,Q,R,S,T)+ maxNorm(G,S,G):1
     [H>=T,E>=Q,C>=O,B>=N,B+1>=G,G>=S+1,H>=L,L>=K,E>=K,C>=J,R>=1,Q>=0,P>=1,M>=1,G>=3,S>=0,K>=0,J>=0,G=I+1,R+1=F,P+1=D,M+1=A] 
* CE 105: append_row(A,B,C,D,E,F,G,H) = 9+ append(I,J,K,L,M):2+ append_row(N,O,P,Q,R,S,G,T)+ maxNorm(L,G,G):2
     [H>=T,E>=R,C>=P,B>=O,G>=L,B+1>=L,H>=M,M>=K,E>=K,C>=J,S>=1,R>=0,Q>=1,N>=1,L>=3,K>=0,J>=0,L=I+1,S+1=F,Q+1=D,N+1=A] 
* CE 106: append_row(A,B,C,D,E,F,G,H) = 10+ append_row(I,J,K,L,M,N,O,P)+ maxNorm(Q,O,R):1
     [H>=P,E>=M,N>=1,M>=0,L>=1,O>=0,H>=0,C>=0,1>=O,N+1=F,L+1=D,J=0,I=1,R=2,Q=2,G=2,B=0,A=1] 
* CE 107: append_row(A,B,C,D,E,F,G,H) = 10+ append_row(I,J,K,L,M,N,G,O)+ maxNorm(P,G,G):2
     [H>=O,E>=M,N>=1,M>=0,L>=1,G>=2,H>=0,C>=0,N+1=F,L+1=D,J=0,I=1,P=2,B=0,A=1] 
* CE 108: append_row(A,B,C,D,E,A,B,C) = 2
     [E>=0,C>=0,B>=0,A>=0,D=1] 

### Cost equations --> "Loop" of append_row/8 
* CEs [108] --> Loop 100 
* CEs [104] --> Loop 101 
* CEs [103,105] --> Loop 102 
* CEs [102] --> Loop 103 
* CEs [107] --> Loop 104 
* CEs [106] --> Loop 105 

#### Loops of append_row/8 
* Loop 100: append_row(A,B,C,D,E,A,B,C) [E>=0,C>=0,B>=0,A>=0,D=1] 
* Loop 101: append_row(A,B,C,D,E,F,G,H)->  append_row(A',B',C',D',E',F',G',H')
                  [H>=H',G>=G'+1,E>=E',C>=C',B>=B',B+1>=G,G'>=0,E'>=0,H>=0,G>=3,F>=2,D>=2,C>=0,A>=2,F=F'+1,D=D'+1,A=A'+1] 
* Loop 102: append_row(A,B,C,D,E,F,G,H)->  append_row(A',B',C',D',E',F',G,G')
                  [H>=G',E>=E',C>=C',B>=B',E'>=0,H>=0,G>=2,F>=2,D>=2,C>=0,B>=1,A>=2,F=F'+1,D=D'+1,A=A'+1] 
* Loop 103: append_row(A,B,C,D,E,F,G,H)->  append_row(A',B',C',D',E',F',G',H')
                  [H>=H',E>=E',C>=C',B>=B',G'>=0,E'>=0,H>=0,F>=2,D>=2,C>=0,B>=1,A>=2,1>=G',F=F'+1,D=D'+1,A=A'+1,G=2] 
* Loop 104: append_row(A,B,C,D,E,F,G,H)->  append_row(A',B',C',D',E',F',G,G')
                  [H>=G',E>=E',E'>=0,H>=0,G>=2,F>=2,D>=2,C>=0,F=F'+1,D=D'+1,B'=0,A'=1,B=0,A=1] 
* Loop 105: append_row(A,B,C,D,E,F,G,H)->  append_row(A',B',C',D',E',F',G',H')
                  [H>=H',E>=E',G'>=0,E'>=0,H>=0,F>=2,D>=2,C>=0,1>=G',F=F'+1,D=D'+1,B'=0,A'=1,G=2,B=0,A=1] 

### Ranking functions of CR append_row(A,B,C,D,E,F,G,H) 
* RF of phase [101,102]: [A-1,D-1]
* RF of phase [104]: [D-1]

#### Partial ranking functions of CR append_row(A,B,C,D,E,F,G,H) 
* Partial RF of phase [101,102]:
  - RF of loop [101:1,102:1]:
    A-1
    D-1
* Partial RF of phase [104]:
  - RF of loop [104:1]:
    D-1

Discarded unfeasible chain [[104]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [[101,102]](Non-terminating chain proved terminating)
Discarded unfeasible chain [[101,102],[104]](Non-terminating chain proved terminating)

### Resulting Chains:append_row(A,B,C,D,E,F,G,H) 
* [[104],105,100]
* [[101,102],[104],105,100]
* [[101,102],105,100]
* [[101,102],103,100]
* [[101,102],100]
* [105,100]
* [103,100]
* [100]


### Merging Chains  append_row/8 into  External patterns of execution 
* [[100,105]] --> 1 
* [[100,105,[104]]] --> 2 
* [[100]] --> 3 
* [[100,103]] --> 4 
* [[100,105,[101,102]]] --> 5 
* [[100,[101,102]]] --> 6 
* [[100,103,[101,102]]] --> 7 
* [[100,105,[104],[101,102]]] --> 8 


### Specialization of cost equations reverse_helper/15 
* CE 31 is refined into CE [109] 
* CE 30 is refined into CE [110,111,112,113] 


#### Refined cost equations reverse_helper/15 
* CE 109: reverse_helper(A,B,C,D,E,F,G,H,I,J,F,G,H,I,J) = 2
     [J>=0,I>=0,H>=0,G>=0,F>=0,C>=0,E=0,D=1,B=0,A=1] 
* CE 110: reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) = 5+ maxNorm(P,J,P):1+ maxNorm(Q,G,Q):1+ reverse_helper(R,S,T,U,V,W,Q,X,Y,P,K,L,M,N,O)
     [E>=V,C>=T,B>=S,B>=Q,Q>=G+1,E>=P,P>=J+1,X>=H,U>=1,R>=1,G>=0,J>=0,O>=0,N>=0,M>=0,L>=0,K>=0,I>=1,H>=0,F>=1,C>=0,I+1=Y,F+1=W,U+1=D,R+1=A] 
* CE 111: reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) = 5+ maxNorm(P,J,P):1+ maxNorm(Q,G,G):2+ reverse_helper(R,S,T,U,V,W,G,X,Y,P,K,L,M,N,O)
     [E>=V,C>=T,B>=S,G>=Q,B>=Q,E>=P,P>=J+1,X>=H,U>=1,R>=1,Q>=1,J>=0,O>=0,N>=0,M>=0,L>=0,K>=0,I>=1,H>=0,F>=1,C>=0,I+1=Y,F+1=W,U+1=D,R+1=A] 
* CE 112: reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) = 5+ maxNorm(P,J,J):2+ maxNorm(Q,G,Q):1+ reverse_helper(R,S,T,U,V,W,Q,X,Y,J,K,L,M,N,O)
     [E>=V,C>=T,B>=S,B>=Q,Q>=G+1,J>=P,E>=P,X>=H,U>=1,R>=1,G>=0,P>=1,O>=0,N>=0,M>=0,L>=0,K>=0,I>=1,H>=0,F>=1,C>=0,I+1=Y,F+1=W,U+1=D,R+1=A] 
* CE 113: reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) = 5+ maxNorm(P,J,J):2+ maxNorm(Q,G,G):2+ reverse_helper(R,S,T,U,V,W,G,X,Y,J,K,L,M,N,O)
     [E>=V,C>=T,B>=S,G>=Q,B>=Q,J>=P,E>=P,X>=H,U>=1,R>=1,Q>=1,P>=1,O>=0,N>=0,M>=0,L>=0,K>=0,I>=1,H>=0,F>=1,C>=0,I+1=Y,F+1=W,U+1=D,R+1=A] 

### Cost equations --> "Loop" of reverse_helper/15 
* CEs [110] --> Loop 106 
* CEs [112] --> Loop 107 
* CEs [111] --> Loop 108 
* CEs [113] --> Loop 109 
* CEs [109] --> Loop 110 

#### Loops of reverse_helper/15 
* Loop 106: reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)->  reverse_helper(A',B',C',D',E',F',G',H',I',J',K,L,M,N,O)
                  [E>=J',B>=G',E>=E',C>=C',B>=B',J'>=J+1,H'>=H,G'>=G+1,O>=0,N>=0,M>=0,L>=0,K>=0,J>=0,I>=1,H>=0,G>=0,F>=1,D>=2,C>=0,A>=2,I+1=I',F+1=F',D=D'+1,A=A'+1] 
* Loop 107: reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)->  reverse_helper(A',B',C',D',E',F',G',H',I',J,K,L,M,N,O)
                  [B>=G',E>=E',C>=C',B>=B',H'>=H,G'>=G+1,O>=0,N>=0,M>=0,L>=0,K>=0,J>=1,I>=1,H>=0,G>=0,F>=1,E>=1,D>=2,C>=0,A>=2,I+1=I',F+1=F',D=D'+1,A=A'+1] 
* Loop 108: reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)->  reverse_helper(A',B',C',D',E',F',G,G',H',I',K,L,M,N,O)
                  [E>=I',E>=E',C>=C',B>=B',I'>=J+1,G'>=H,O>=0,N>=0,M>=0,L>=0,K>=0,J>=0,I>=1,H>=0,G>=1,F>=1,D>=2,C>=0,B>=1,A>=2,I+1=H',F+1=F',D=D'+1,A=A'+1] 
* Loop 109: reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)->  reverse_helper(A',B',C',D',E',F',G,G',H',J,K,L,M,N,O)
                  [E>=E',C>=C',B>=B',G'>=H,O>=0,N>=0,M>=0,L>=0,K>=0,J>=1,I>=1,H>=0,G>=1,F>=1,E>=1,D>=2,C>=0,B>=1,A>=2,I+1=H',F+1=F',D=D'+1,A=A'+1] 
* Loop 110: reverse_helper(A,B,C,D,E,F,G,H,I,J,F,G,H,I,J) [J>=0,I>=0,H>=0,G>=0,F>=0,C>=0,E=0,D=1,B=0,A=1] 

### Ranking functions of CR reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) 
* RF of phase [106,107,108,109]: [A-1,D-1]

#### Partial ranking functions of CR reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) 
* Partial RF of phase [106,107,108,109]:
  - RF of loop [106:1,107:1]:
    B-G
  - RF of loop [106:1,107:1,108:1,109:1]:
    A-1
    D-1
  - RF of loop [106:1,108:1]:
    E-J

Discarded unfeasible chain [[106,107,108,109]]...(Non-terminating chain proved terminating)

### Resulting Chains:reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) 
* [[106,107,108,109],110]
* [110]


### Merging Chains  reverse_helper/15 into  External patterns of execution 
* [[110]] --> 1 
* [[110,[106,107,108,109]]] --> 2 


### Specialization of cost equations reverseL/10 
* CE 32 is refined into CE [114,115] 


#### Refined cost equations reverseL/10 
* CE 114: reverseL(A,B,C,D,E,F,G,H,I,J) = 2+ reverse_helper(K,L,C,M,N,O,P,H,Q,R,S,T,H,U,V):1
     [H>=0,C>=0,V=0,U=1,T=0,S=1,R=0,Q=1,P=0,O=1,N=0,M=1,L=0,K=1,J=0,I=1,G=0,F=1,E=0,D=1,B=0,A=1] 
* CE 115: reverseL(A,B,C,A,D,A,E,F,A,G) = 2+ reverse_helper(A,B,C,A,D,H,I,J,K,L,A,E,F,A,G):2
     [F>=J,G>=1,E>=1,J>=0,D>=1,A>=2,C>=0,B>=1,L=0,K=1,I=0,H=1] 

### Cost equations --> "Loop" of reverseL/10 
* CEs [115] --> Loop 111 
* CEs [114] --> Loop 112 

#### Loops of reverseL/10 
* Loop 111: reverseL(A,B,C,A,D,A,E,F,A,G) [G>=1,F>=0,E>=1,D>=1,C>=0,B>=1,A>=2] 
* Loop 112: reverseL(A,B,C,D,E,F,G,H,I,J) [H>=0,C>=0,J=0,I=1,G=0,F=1,E=0,D=1,B=0,A=1] 

### Ranking functions of CR reverseL(A,B,C,D,E,F,G,H,I,J) 

#### Partial ranking functions of CR reverseL(A,B,C,D,E,F,G,H,I,J) 


### Resulting Chains:reverseL(A,B,C,D,E,F,G,H,I,J) 
* [112]
* [111]


### Merging Chains  reverseL/10 into  External patterns of execution 
* [[112]] --> 1 
* [[111]] --> 2 


### Specialization of cost equations reverse_rows_helper/9 
* CE 34 is refined into CE [116] 
* CE 33 is refined into CE [117,118] 


#### Refined cost equations reverse_rows_helper/9 
* CE 116: reverse_rows_helper(A,B,C,D,E,F,D,E,F) = 2
     [F>=0,E>=0,D>=0,C>=0,B=0,A=1] 
* CE 117: reverse_rows_helper(A,B,C,D,E,F,G,H,I) = 6+ maxNorm(J,E,J):1+ reverseL(K,J,L,K,M,K,N,O,K,P):2+ reverse_rows_helper(Q,R,S,K,N,O,G,H,I)
     [C>=S,B>=R,B>=J,J>=E+1,L>=F,Q>=1,P>=1,O>=0,N>=1,M>=1,K>=2,E>=0,I>=0,H>=0,G>=0,F>=0,C>=0,K=D+1,Q+1=A] 
* CE 118: reverse_rows_helper(A,B,C,D,E,F,G,H,I) = 6+ maxNorm(J,E,E):2+ reverseL(K,E,L,K,M,K,N,O,K,P):2+ reverse_rows_helper(Q,R,S,K,N,O,G,H,I)
     [C>=S,B>=R,E>=J,B>=J,L>=F,Q>=1,P>=1,O>=0,N>=1,M>=1,K>=2,J>=1,I>=0,H>=0,G>=0,F>=0,C>=0,K=D+1,Q+1=A] 

### Cost equations --> "Loop" of reverse_rows_helper/9 
* CEs [117] --> Loop 113 
* CEs [118] --> Loop 114 
* CEs [116] --> Loop 115 

#### Loops of reverse_rows_helper/9 
* Loop 113: reverse_rows_helper(A,B,C,D,E,F,G,H,I)->  reverse_rows_helper(A',B',C',D',E',F',G,H,I)
                  [C>=C',B>=B',B>=E+1,F'>=0,E'>=1,I>=0,H>=0,G>=0,F>=0,E>=0,D>=1,C>=0,A>=2,D+1=D',A=A'+1] 
* Loop 114: reverse_rows_helper(A,B,C,D,E,F,G,H,I)->  reverse_rows_helper(A',B',C',D',E',F',G,H,I)
                  [C>=C',B>=B',F'>=0,E'>=1,I>=0,H>=0,G>=0,F>=0,E>=1,D>=1,C>=0,B>=1,A>=2,D+1=D',A=A'+1] 
* Loop 115: reverse_rows_helper(A,B,C,D,E,F,D,E,F) [F>=0,E>=0,D>=0,C>=0,B=0,A=1] 

### Ranking functions of CR reverse_rows_helper(A,B,C,D,E,F,G,H,I) 
* RF of phase [113,114]: [A-1]

#### Partial ranking functions of CR reverse_rows_helper(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [113,114]:
  - RF of loop [113:1,114:1]:
    A-1

Discarded unfeasible chain [[113,114]]...(Non-terminating chain proved terminating)

### Resulting Chains:reverse_rows_helper(A,B,C,D,E,F,G,H,I) 
* [[113,114],115]
* [115]


### Merging Chains  reverse_rows_helper/9 into  External patterns of execution 
* [[115]] --> 1 
* [[115,[113,114]]] --> 2 


### Specialization of cost equations reverse_rows/6 
* CE 35 is refined into CE [119,120] 


#### Refined cost equations reverse_rows/6 
* CE 119: reverse_rows(A,B,C,D,E,F) = 3+ reverse_rows_helper(G,H,C,I,J,K,L,M,K):1+ reverseL(N,O,K,P,Q,R,S,F,T,U):1
     [F>=0,K>=0,C>=0,U=0,T=1,S=0,R=1,Q=0,P=1,O=0,N=1,M=0,L=1,J=0,I=1,H=0,G=1,E=0,D=1,B=0,A=1] 
* CE 120: reverse_rows(A,B,C,A,D,E) = 3+ reverse_rows_helper(A,B,C,F,G,H,A,I,J):2+ reverseL(A,I,J,A,K,A,D,E,A,L):2
     [L>=1,E>=0,D>=1,K>=1,A>=2,J>=0,I>=1,H>=0,C>=0,B>=1,G=0,F=1] 

### Cost equations --> "Loop" of reverse_rows/6 
* CEs [120] --> Loop 116 
* CEs [119] --> Loop 117 

#### Loops of reverse_rows/6 
* Loop 116: reverse_rows(A,B,C,A,D,E) [E>=0,D>=1,C>=0,B>=1,A>=2] 
* Loop 117: reverse_rows(A,B,C,D,E,F) [F>=0,C>=0,E=0,D=1,B=0,A=1] 

### Ranking functions of CR reverse_rows(A,B,C,D,E,F) 

#### Partial ranking functions of CR reverse_rows(A,B,C,D,E,F) 


### Resulting Chains:reverse_rows(A,B,C,D,E,F) 
* [117]
* [116]


### Merging Chains  reverse_rows/6 into  External patterns of execution 
* [[117]] --> 1 
* [[116]] --> 2 


### Specialization of cost equations append_start/8 
* CE 38 is refined into CE [121,122] 
* CE 37 is refined into CE [123,124] 
* CE 36 is refined into CE [125,126] 


#### Refined cost equations append_start/8 
* CE 121: append_start(A,B,C,D,E,F,G,H) = 9+ append_start(I,J,K,L,M,N,O,P)+ maxNorm(G,O,G):1
     [H>=P,E>=M,C>=K,B>=J,B+1>=G,G>=O+1,N>=1,M>=0,L>=1,I>=1,G>=2,O>=0,H>=0,C>=0,N+1=F,L+1=D,I+1=A] 
* CE 122: append_start(A,B,C,D,E,F,G,H) = 9+ append_start(I,J,K,L,M,N,G,O)+ maxNorm(P,G,G):2
     [H>=O,E>=M,C>=K,B>=J,G>=P,B+1>=P,N>=1,M>=0,L>=1,I>=1,P>=2,H>=0,C>=0,N+1=F,L+1=D,I+1=A] 
* CE 123: append_start(A,B,C,D,E,F,G,H) = 10+ append_start(I,J,K,L,M,N,O,P)+ maxNorm(Q,O,R):1
     [H>=P,E>=M,N>=1,M>=0,L>=1,O>=0,H>=0,C>=0,1>=O,N+1=F,L+1=D,J=0,I=1,R=2,Q=2,G=2,B=0,A=1] 
* CE 124: append_start(A,B,C,D,E,F,G,H) = 10+ append_start(I,J,K,L,M,N,G,O)+ maxNorm(P,G,G):2
     [H>=O,E>=M,N>=1,M>=0,L>=1,G>=2,H>=0,C>=0,N+1=F,L+1=D,J=0,I=1,P=2,B=0,A=1] 
* CE 125: append_start(A,B,C,D,E,F,G,H) = 3+ reverse_rows(I,J,C,K,L,H):1
     [H>=0,C>=0,E>=0,L=0,K=1,J=0,I=1,G=0,F=1,D=1,B=0,A=1] 
* CE 126: append_start(A,B,C,D,E,A,F,G) = 3+ reverse_rows(A,B,C,A,F,G):2
     [G>=0,F>=1,A>=2,C>=0,B>=1,E>=0,D=1] 

### Cost equations --> "Loop" of append_start/8 
* CEs [126] --> Loop 118 
* CEs [125] --> Loop 119 
* CEs [121] --> Loop 120 
* CEs [122] --> Loop 121 
* CEs [124] --> Loop 122 
* CEs [123] --> Loop 123 

#### Loops of append_start/8 
* Loop 118: append_start(A,B,C,D,E,A,F,G) [G>=0,F>=1,E>=0,C>=0,B>=1,A>=2,D=1] 
* Loop 119: append_start(A,B,C,D,E,F,G,H) [H>=0,E>=0,C>=0,G=0,F=1,D=1,B=0,A=1] 
* Loop 120: append_start(A,B,C,D,E,F,G,H)->  append_start(A',B',C',D',E',F',G',H')
                  [H>=H',G>=G'+1,E>=E',C>=C',B>=B',B+1>=G,G'>=0,E'>=0,H>=0,G>=2,F>=2,D>=2,C>=0,A>=2,F=F'+1,D=D'+1,A=A'+1] 
* Loop 121: append_start(A,B,C,D,E,F,G,H)->  append_start(A',B',C',D',E',F',G,G')
                  [H>=G',E>=E',C>=C',B>=B',E'>=0,H>=0,G>=2,F>=2,D>=2,C>=0,B>=1,A>=2,F=F'+1,D=D'+1,A=A'+1] 
* Loop 122: append_start(A,B,C,D,E,F,G,H)->  append_start(A',B',C',D',E',F',G,G')
                  [H>=G',E>=E',E'>=0,H>=0,G>=2,F>=2,D>=2,C>=0,F=F'+1,D=D'+1,B'=0,A'=1,B=0,A=1] 
* Loop 123: append_start(A,B,C,D,E,F,G,H)->  append_start(A',B',C',D',E',F',G',H')
                  [H>=H',E>=E',G'>=0,E'>=0,H>=0,F>=2,D>=2,C>=0,1>=G',F=F'+1,D=D'+1,B'=0,A'=1,G=2,B=0,A=1] 

### Ranking functions of CR append_start(A,B,C,D,E,F,G,H) 
* RF of phase [120,121]: [A-1,D-1]
* RF of phase [122]: [D-1]

#### Partial ranking functions of CR append_start(A,B,C,D,E,F,G,H) 
* Partial RF of phase [120,121]:
  - RF of loop [120:1,121:1]:
    A-1
    D-1
* Partial RF of phase [122]:
  - RF of loop [122:1]:
    D-1

Discarded unfeasible chain [[122]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [[120,121]](Non-terminating chain proved terminating)
Discarded unfeasible chain [[120,121],[122]](Non-terminating chain proved terminating)

### Resulting Chains:append_start(A,B,C,D,E,F,G,H) 
* [[122],123,119]
* [[120,121],[122],123,119]
* [[120,121],123,119]
* [[120,121],119]
* [[120,121],118]
* [123,119]
* [119]
* [118]


### Merging Chains  append_start/8 into  External patterns of execution 
* [[119]] --> 1 
* [[119,123]] --> 2 
* [[119,123,[122]]] --> 3 
* [[118]] --> 4 
* [[119,123,[120,121]]] --> 5 
* [[119,[120,121]]] --> 6 
* [[118,[120,121]]] --> 7 
* [[119,123,[122],[120,121]]] --> 8 


### Specialization of cost equations sizeL/7 
* CE 71 is refined into CE [127] 
* CE 70 is refined into CE [128] 


#### Refined cost equations sizeL/7 
* CE 127: sizeL(A,B,C,D,E,F,G) = 3
     [E>=0,B>=0,G=0,F=0,D=0,C=1,A=1] 
* CE 128: sizeL(A,B,C,D,E,F,G) = 6+ sizeL(H,I,J,K,L,M,N)
     [E>=L,D>=K,B>=I,N+1>=0,M+1>=0,J>=1,H>=1,E>=0,D>=1,B>=0,N+1=G,M+1=F,J+1=C,H+1=A] 

### Cost equations --> "Loop" of sizeL/7 
* CEs [128] --> Loop 124 
* CEs [127] --> Loop 125 

#### Loops of sizeL/7 
* Loop 124: sizeL(A,B,C,D,E,F,G)->  sizeL(A',B',C',D',E',F',G')
                  [E>=E',D>=D',B>=B',G'+1>=0,F'+1>=0,C'>=1,A'>=1,E>=0,D>=1,B>=0,G'+1=G,F'+1=F,C'+1=C,A'+1=A] 
* Loop 125: sizeL(A,B,C,D,E,F,G) [E>=0,B>=0,G=0,F=0,D=0,C=1,A=1] 

### Ranking functions of CR sizeL(A,B,C,D,E,F,G) 
* RF of phase [124]: [A-1,C-1]

#### Partial ranking functions of CR sizeL(A,B,C,D,E,F,G) 
* Partial RF of phase [124]:
  - RF of loop [124:1]:
    A-1
    C-1

Discarded unfeasible chain [[124]]...(Non-terminating chain proved terminating)

### Resulting Chains:sizeL(A,B,C,D,E,F,G) 
* [[124],125]
* [125]


### Merging Chains  sizeL/7 into  External patterns of execution 
* [[125]] --> 1 
* [[125,[124]]] --> 2 


### Specialization of cost equations check_lists/5 
* CE 5 is refined into CE [129] 
* CE 3 is refined into CE [130] 
* CE 4 is refined into CE [131,132] 


#### Refined cost equations check_lists/5 
* CE 129: check_lists(A,B,C,D,E) = 7+ sizeL(F,G,F,H,I,J,K):2
     [B>=F,C>=G,F>=D+2,I>=0,H>=1,G>=0,D>=0,A>=2,F=K+1,F=J+1,E=0] 
* CE 130: check_lists(A,B,C,D,E) = 3
     [D>=0,C>=0,E=1,B=0,A=1] 
* CE 131: check_lists(A,B,C,D,E) = 7+ sizeL(F,G,H,I,J,K,L):1+ check_lists(M,N,O,P,E)
     [C>=O,B>=N,C>=G,O>=0,N>=0,M>=1,J>=0,G>=0,E>=0,B>=1,M+1=A,P=0,L=0,K=0,I=0,H=1,F=1,D=0] 
* CE 132: check_lists(A,B,C,D,E) = 7+ sizeL(F,G,F,H,I,J,K):2+ check_lists(L,M,N,O,E)
     [C>=N,B>=M,B>=F,C>=G,N>=0,M>=0,L>=1,I>=0,H>=1,F>=2,G>=0,E>=0,F=O+1,F=K+1,F=J+1,F=D+1,L+1=A] 

### Cost equations --> "Loop" of check_lists/5 
* CEs [132] --> Loop 126 
* CEs [131] --> Loop 127 
* CEs [129] --> Loop 128 
* CEs [130] --> Loop 129 

#### Loops of check_lists/5 
* Loop 126: check_lists(A,B,C,D,E)->  check_lists(A',B',C',D,E)
                  [C>=C',B>=B',B>=D+1,C'>=0,B'>=0,E>=0,D>=1,A>=2,A=A'+1] 
* Loop 127: check_lists(A,B,C,D,E)->  check_lists(A',B',C',D',E)
                  [C>=C',B>=B',C'>=0,B'>=0,E>=0,B>=1,A>=2,A=A'+1,D'=0,D=0] 
* Loop 128: check_lists(A,B,C,D,E) [B>=D+2,D>=0,C>=0,A>=2,E=0] 
* Loop 129: check_lists(A,B,C,D,E) [D>=0,C>=0,E=1,B=0,A=1] 

### Ranking functions of CR check_lists(A,B,C,D,E) 
* RF of phase [126]: [A-1]
* RF of phase [127]: [A-1]

#### Partial ranking functions of CR check_lists(A,B,C,D,E) 
* Partial RF of phase [126]:
  - RF of loop [126:1]:
    A-1
* Partial RF of phase [127]:
  - RF of loop [127:1]:
    A-1

Discarded unfeasible chain [[127]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [[126]](Non-terminating chain proved terminating)

### Resulting Chains:check_lists(A,B,C,D,E) 
* [[127],129]
* [[127],128]
* [[126],129]
* [[126],128]
* [129]
* [128]


### Merging Chains  check_lists/5 into  External patterns of execution 
* [[129]] --> 1 
* [[128],[128,[126]],[128,[127]]] --> 2 
* [[129,[127]]] --> 3 
* [[129,[126]]] --> 4 


### Specialization of cost equations case_3/7 
* CE 72 is refined into CE [133,134,135,136] 
* CE 73 is refined into CE [137] 


#### Refined cost equations case_3/7 
* CE 133: case_3(A,A,B,C,D,E,F) = 2+ check_lists(G,H,E,B,I):1
     [B>=0,E>=0,A>=0,I=1,H=0,G=1,F=1,D=0,C=1] 
* CE 134: case_3(A,A,B,C,D,E,F) = 2+ check_lists(C,D,E,B,G):2
     [D>=B+2,B>=0,E>=0,C>=2,A>=0,G=0,F=0] 
* CE 135: case_3(A,A,B,C,D,E,F) = 2+ check_lists(C,D,E,G,H):3
     [E>=0,D>=1,C>=2,A>=0,H=1,G=0,F=1,B=0] 
* CE 136: case_3(A,A,B,C,D,E,F) = 2+ check_lists(C,D,E,B,G):4
     [D>=B+1,B>=1,E>=0,C>=2,A>=0,G=1,F=1] 
* CE 137: case_3(A,B,C,D,E,F,G) = 2
     [A>=B+1,F>=0,E>=0,D>=0,C>=0,B>=0,G=0] 

### Cost equations --> "Loop" of case_3/7 
* CEs [136] --> Loop 130 
* CEs [137] --> Loop 131 
* CEs [134] --> Loop 132 
* CEs [133] --> Loop 133 
* CEs [135] --> Loop 134 

#### Loops of case_3/7 
* Loop 130: case_3(A,A,B,C,D,E,F) [D>=B+1,E>=0,C>=2,B>=1,A>=0,F=1] 
* Loop 131: case_3(A,B,C,D,E,F,G) [A>=B+1,F>=0,E>=0,D>=0,C>=0,B>=0,G=0] 
* Loop 132: case_3(A,A,B,C,D,E,F) [D>=B+2,E>=0,C>=2,B>=0,A>=0,F=0] 
* Loop 133: case_3(A,A,B,C,D,E,F) [E>=0,B>=0,A>=0,F=1,D=0,C=1] 
* Loop 134: case_3(A,A,B,C,D,E,F) [E>=0,D>=1,C>=2,A>=0,F=1,B=0] 

### Ranking functions of CR case_3(A,B,C,D,E,F,G) 

#### Partial ranking functions of CR case_3(A,B,C,D,E,F,G) 


### Resulting Chains:case_3(A,B,C,D,E,F,G) 
* [134]
* [133]
* [132]
* [131]
* [130]


### Merging Chains  case_3/7 into  External patterns of execution 
* [[134]] --> 1 
* [[133]] --> 2 
* [[132]] --> 3 
* [[131]] --> 4 
* [[130]] --> 5 


### Specialization of cost equations check_mat/6 
* CE 6 is refined into CE [138,139,140,141,142] 


#### Refined cost equations check_mat/6 
* CE 138: check_mat(A,B,C,D,E,F) = 2+ sizeL(G,H,I,J,E,K,L):1+ case_3(M,N,B,O,P,E,Q):2
     [E>=0,B>=0,H>=0,Q=1,P=0,O=1,N=0,M=0,L=0,K=0,J=0,I=1,G=1,F=1,D=0,C=1,A=0] 
* CE 139: check_mat(A,B,C,D,E,F) = 2+ sizeL(G,H,I,D,E,A,A):2+ case_3(A,A,J,K,D,E,L):1
     [E>=0,D>=1,A>=1,H>=0,A+1=K,A+1=I,A+1=G,A+1=C,L=1,J=0,F=1,B=0] 
* CE 140: check_mat(A,B,C,D,E,F) = 2+ sizeL(G,H,I,D,E,A,A):2+ case_3(A,A,B,J,D,E,K):3
     [D>=B+2,E>=0,B>=0,A>=1,H>=0,A+1=J,A+1=I,A+1=G,A+1=C,K=0,F=0] 
* CE 141: check_mat(A,B,C,D,E,F) = 2+ sizeL(C,G,C,D,E,H,I):2+ case_3(J,A,B,C,D,E,K):4
     [C>=A+2,E>=0,D>=1,B>=0,A>=0,G>=0,C=J+1,C=I+1,C=H+1,K=0,F=0] 
* CE 142: check_mat(A,B,C,D,E,F) = 2+ sizeL(G,H,I,D,E,A,A):2+ case_3(A,A,B,J,D,E,K):5
     [D>=B+1,E>=0,B>=1,A>=1,H>=0,A+1=J,A+1=I,A+1=G,A+1=C,K=1,F=1] 

### Cost equations --> "Loop" of check_mat/6 
* CEs [142] --> Loop 135 
* CEs [141] --> Loop 136 
* CEs [140] --> Loop 137 
* CEs [139] --> Loop 138 
* CEs [138] --> Loop 139 

#### Loops of check_mat/6 
* Loop 135: check_mat(A,B,C,D,E,F) [D>=B+1,E>=0,B>=1,A>=1,A+1=C,F=1] 
* Loop 136: check_mat(A,B,C,D,E,F) [C>=A+2,E>=0,D>=1,B>=0,A>=0,F=0] 
* Loop 137: check_mat(A,B,C,D,E,F) [D>=B+2,E>=0,B>=0,A>=1,A+1=C,F=0] 
* Loop 138: check_mat(A,B,C,D,E,F) [E>=0,D>=1,A>=1,A+1=C,F=1,B=0] 
* Loop 139: check_mat(A,B,C,D,E,F) [E>=0,B>=0,F=1,D=0,C=1,A=0] 

### Ranking functions of CR check_mat(A,B,C,D,E,F) 

#### Partial ranking functions of CR check_mat(A,B,C,D,E,F) 


### Resulting Chains:check_mat(A,B,C,D,E,F) 
* [139]
* [138]
* [137]
* [136]
* [135]


### Merging Chains  check_mat/6 into  External patterns of execution 
* [[139]] --> 1 
* [[138]] --> 2 
* [[137]] --> 3 
* [[136]] --> 4 
* [[135]] --> 5 


### Specialization of cost equations check_matrix/5 
* CE 7 is refined into CE [143,144,145,146,147] 


#### Refined cost equations check_matrix/5 
* CE 143: check_matrix(A,B,C,D,E) = 3+ check_mat(F,G,H,I,J,K):1
     [C>=J,C>=G,J>=0,G>=0,K=1,I=0,H=1,F=0,E=1,D=1,B=0,A=1] 
* CE 144: check_matrix(A,B,C,D,E) = 3+ check_mat(F,G,A,B,H,I):2
     [C>=H,C+1>=A,H>=0,B>=1,A>=2,A=F+1,I=1,G=0,E=1,D=1] 
* CE 145: check_matrix(A,B,C,D,E) = 3+ check_mat(F,G,A,B,H,I):3
     [C>=H,C+1>=A,B>=G+2,C>=G,H>=0,A>=2,G>=0,A=F+1,I=0,E=0,D=1] 
* CE 146: check_matrix(A,B,C,D,E) = 3+ check_mat(F,G,A,B,H,I):4
     [C>=H,C>=G,A>=F+2,C>=F,H>=0,B>=1,G>=0,F>=0,I=0,E=0,D=1] 
* CE 147: check_matrix(A,B,C,D,E) = 3+ check_mat(F,G,A,B,H,I):5
     [C>=H,C+1>=A,B>=G+1,C>=G,H>=0,A>=2,G>=1,A=F+1,I=1,E=1,D=1] 

### Cost equations --> "Loop" of check_matrix/5 
* CEs [144,147] --> Loop 140 
* CEs [145,146] --> Loop 141 
* CEs [143] --> Loop 142 

#### Loops of check_matrix/5 
* Loop 140: check_matrix(A,B,C,D,E) [C+1>=A,B>=1,A>=2,E=1,D=1] 
* Loop 141: check_matrix(A,B,C,D,E) [C>=0,B>=1,A>=2,E=0,D=1] 
* Loop 142: check_matrix(A,B,C,D,E) [C>=0,E=1,D=1,B=0,A=1] 

### Ranking functions of CR check_matrix(A,B,C,D,E) 

#### Partial ranking functions of CR check_matrix(A,B,C,D,E) 


### Resulting Chains:check_matrix(A,B,C,D,E) 
* [142]
* [141]
* [140]


### Merging Chains  check_matrix/5 into  External patterns of execution 
* [[142]] --> 1 
* [[141]] --> 2 
* [[140]] --> 3 


### Specialization of cost equations and_op/3 
* CE 87 is refined into CE [148] 
* CE 86 is refined into CE [149] 


#### Refined cost equations and_op/3 
* CE 148: and_op(A,B,B) = 0
     [B>=0,A=1] 
* CE 149: and_op(A,B,C) = 0
     [B>=0,C=0,A=0] 

### Cost equations --> "Loop" of and_op/3 
* CEs [148] --> Loop 143 
* CEs [149] --> Loop 144 

#### Loops of and_op/3 
* Loop 143: and_op(A,B,B) [B>=0,A=1] 
* Loop 144: and_op(A,B,C) [B>=0,C=0,A=0] 

### Ranking functions of CR and_op(A,B,C) 

#### Partial ranking functions of CR and_op(A,B,C) 


### Resulting Chains:and_op(A,B,C) 
* [144]
* [143]


### Merging Chains  and_op/3 into  External patterns of execution 
* [[144]] --> 1 
* [[143]] --> 2 


### Specialization of cost equations eq/3 
* CE 88 is refined into CE [150] 
* CE 89 is refined into CE [151] 
* CE 90 is refined into CE [152] 


#### Refined cost equations eq/3 
* CE 150: eq(A,A,B) = 0
     [A>=0,B=1] 
* CE 151: eq(A,B,C) = 0
     [A>=B+1,B>=0,C=0] 
* CE 152: eq(A,B,C) = 0
     [B>=A+1,A>=0,C=0] 

### Cost equations --> "Loop" of eq/3 
* CEs [150] --> Loop 145 
* CEs [151] --> Loop 146 
* CEs [152] --> Loop 147 

#### Loops of eq/3 
* Loop 145: eq(A,A,B) [A>=0,B=1] 
* Loop 146: eq(A,B,C) [A>=B+1,B>=0,C=0] 
* Loop 147: eq(A,B,C) [B>=A+1,A>=0,C=0] 

### Ranking functions of CR eq(A,B,C) 

#### Partial ranking functions of CR eq(A,B,C) 


### Resulting Chains:eq(A,B,C) 
* [147]
* [146]
* [145]


### Merging Chains  eq/3 into  External patterns of execution 
* [[147]] --> 1 
* [[146]] --> 2 
* [[145]] --> 3 


### Specialization of cost equations check_mult_sanity/9 
* CE 57 is refined into CE [153,154,155,156,157,158,159,160,161,162,163,164] 


#### Refined cost equations check_mult_sanity/9 
* CE 153: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(A,B,C,J,K):2+ check_matrix(E,F,G,L,M):2+ and_op(N,O,P):1+ eq(Q,R,S):1+ and_op(T,U,V):1
     [G>=R,R>=Q+1,C>=Q,Q>=0,F>=1,E>=2,B>=1,A>=2,V=0,U=0,T=0,S=0,P=0,O=0,N=0,M=0,L=1,K=0,J=1,I=0,H=1,D=1] 
* CE 154: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(A,B,C,J,K):2+ check_matrix(E,F,G,L,M):2+ and_op(N,O,P):1+ eq(Q,R,S):2+ and_op(T,U,V):1
     [Q>=R+1,G>=R,C>=Q,R>=0,F>=1,E>=2,B>=1,A>=2,V=0,U=0,T=0,S=0,P=0,O=0,N=0,M=0,L=1,K=0,J=1,I=0,H=1,D=1] 
* CE 155: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(A,B,C,J,K):2+ check_matrix(E,F,G,L,M):2+ and_op(N,O,P):1+ eq(Q,Q,R):3+ and_op(S,T,U):1
     [G>=Q,C>=Q,Q>=0,F>=1,E>=2,B>=1,A>=2,U=0,T=1,S=0,R=1,P=0,O=0,N=0,M=0,L=1,K=0,J=1,I=0,H=1,D=1] 
* CE 156: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(A,B,C,J,K):2+ check_matrix(E,F,G,L,M):3+ and_op(N,O,P):1+ eq(Q,R,S):1+ and_op(T,U,V):1
     [G>=R,R>=Q+1,C>=Q,G+1>=E,Q>=0,F>=1,E>=2,B>=1,A>=2,V=0,U=0,T=0,S=0,P=0,O=1,N=0,M=1,L=1,K=0,J=1,I=0,H=1,D=1] 
* CE 157: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(A,B,C,J,K):2+ check_matrix(E,F,G,L,M):3+ and_op(N,O,P):1+ eq(Q,R,S):2+ and_op(T,U,V):1
     [Q>=R+1,G>=R,C>=Q,G+1>=E,R>=0,F>=1,E>=2,B>=1,A>=2,V=0,U=0,T=0,S=0,P=0,O=1,N=0,M=1,L=1,K=0,J=1,I=0,H=1,D=1] 
* CE 158: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(A,B,C,J,K):2+ check_matrix(E,F,G,L,M):3+ and_op(N,O,P):1+ eq(Q,Q,R):3+ and_op(S,T,U):1
     [G>=Q,C>=Q,G+1>=E,Q>=0,F>=1,E>=2,B>=1,A>=2,U=0,T=1,S=0,R=1,P=0,O=1,N=0,M=1,L=1,K=0,J=1,I=0,H=1,D=1] 
* CE 159: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(A,B,C,J,K):3+ check_matrix(E,F,G,L,M):2+ and_op(N,O,P):2+ eq(Q,R,S):1+ and_op(T,U,V):1
     [G>=R,R>=Q+1,C>=Q,C+1>=A,Q>=0,F>=1,E>=2,B>=1,A>=2,V=0,U=0,T=0,S=0,P=0,O=0,N=1,M=0,L=1,K=1,J=1,I=0,H=1,D=1] 
* CE 160: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(A,B,C,J,K):3+ check_matrix(E,F,G,L,M):2+ and_op(N,O,P):2+ eq(Q,R,S):2+ and_op(T,U,V):1
     [Q>=R+1,G>=R,C>=Q,C+1>=A,R>=0,F>=1,E>=2,B>=1,A>=2,V=0,U=0,T=0,S=0,P=0,O=0,N=1,M=0,L=1,K=1,J=1,I=0,H=1,D=1] 
* CE 161: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(A,B,C,J,K):3+ check_matrix(E,F,G,L,M):2+ and_op(N,O,P):2+ eq(Q,Q,R):3+ and_op(S,T,U):1
     [G>=Q,C>=Q,C+1>=A,Q>=0,F>=1,E>=2,B>=1,A>=2,U=0,T=1,S=0,R=1,P=0,O=0,N=1,M=0,L=1,K=1,J=1,I=0,H=1,D=1] 
* CE 162: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(A,B,C,J,K):3+ check_matrix(E,F,G,L,M):3+ and_op(N,O,P):2+ eq(Q,R,S):1+ and_op(T,U,V):2
     [G>=R,R>=Q+1,C>=Q,G+1>=E,C+1>=A,Q>=0,F>=1,E>=2,B>=1,A>=2,V=0,U=0,T=1,S=0,P=1,O=1,N=1,M=1,L=1,K=1,J=1,I=0,H=1,D=1] 
* CE 163: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(A,B,C,J,K):3+ check_matrix(E,F,G,L,M):3+ and_op(N,O,P):2+ eq(Q,R,S):2+ and_op(T,U,V):2
     [Q>=R+1,G>=R,C>=Q,G+1>=E,C+1>=A,R>=0,F>=1,E>=2,B>=1,A>=2,V=0,U=0,T=1,S=0,P=1,O=1,N=1,M=1,L=1,K=1,J=1,I=0,H=1,D=1] 
* CE 164: check_mult_sanity(A,B,C,D,E,F,G,H,I) = 9+ check_matrix(A,B,C,J,K):3+ check_matrix(E,F,G,L,M):3+ and_op(N,O,P):2+ eq(Q,Q,R):3+ and_op(S,T,U):2
     [G>=Q,C>=Q,G+1>=E,C+1>=A,Q>=0,F>=1,E>=2,B>=1,A>=2,U=1,T=1,S=1,R=1,P=1,O=1,N=1,M=1,L=1,K=1,J=1,I=1,H=1,D=1] 

### Cost equations --> "Loop" of check_mult_sanity/9 
* CEs [164] --> Loop 148 
* CEs [153,154,155,156,157,158,159,160,161,162,163] --> Loop 149 

#### Loops of check_mult_sanity/9 
* Loop 148: check_mult_sanity(A,B,C,D,E,F,G,H,I) [G+1>=E,C+1>=A,F>=1,E>=2,B>=1,A>=2,I=1,H=1,D=1] 
* Loop 149: check_mult_sanity(A,B,C,D,E,F,G,H,I) [G>=0,F>=1,E>=2,C>=0,B>=1,A>=2,I=0,H=1,D=1] 

### Ranking functions of CR check_mult_sanity(A,B,C,D,E,F,G,H,I) 

#### Partial ranking functions of CR check_mult_sanity(A,B,C,D,E,F,G,H,I) 


### Resulting Chains:check_mult_sanity(A,B,C,D,E,F,G,H,I) 
* [149]
* [148]


### Merging Chains  check_mult_sanity/9 into  External patterns of execution 
* [[149]] --> 1 
* [[148]] --> 2 


### Specialization of cost equations case_17/11 
* CE 81 is refined into CE [165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200] 


#### Refined cost equations case_17/11 
* CE 165: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):1+ eq(I,S,T):1+ and_op(U,V,W):1+ eq(J,X,Y):1+ and_op(Z,A1,B1):1
     [G>=X,X>=J+1,C>=J,G>=S,S>=I+1,C>=I,J>=0,I>=0,F>=1,E>=2,B>=1,A>=2,B1=0,A1=0,Z=0,Y=0,W=0,V=0,U=0,T=0,R=0,Q=0,P=0,O=0,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 166: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):1+ eq(I,S,T):1+ and_op(U,V,W):1+ eq(J,X,Y):2+ and_op(Z,A1,B1):1
     [J>=X+1,G>=X,C>=J,G>=S,S>=I+1,C>=I,X>=0,I>=0,F>=1,E>=2,B>=1,A>=2,B1=0,A1=0,Z=0,Y=0,W=0,V=0,U=0,T=0,R=0,Q=0,P=0,O=0,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 167: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):1+ eq(I,S,T):1+ and_op(U,V,W):1+ eq(J,J,X):3+ and_op(Y,Z,A1):1
     [G>=J,C>=J,G>=S,S>=I+1,C>=I,J>=0,I>=0,F>=1,E>=2,B>=1,A>=2,A1=0,Z=1,Y=0,X=1,W=0,V=0,U=0,T=0,R=0,Q=0,P=0,O=0,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 168: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):1+ eq(I,S,T):2+ and_op(U,V,W):1+ eq(J,X,Y):1+ and_op(Z,A1,B1):1
     [G>=X,X>=J+1,C>=J,I>=S+1,G>=S,C>=I,J>=0,S>=0,F>=1,E>=2,B>=1,A>=2,B1=0,A1=0,Z=0,Y=0,W=0,V=0,U=0,T=0,R=0,Q=0,P=0,O=0,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 169: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):1+ eq(I,S,T):2+ and_op(U,V,W):1+ eq(J,X,Y):2+ and_op(Z,A1,B1):1
     [J>=X+1,G>=X,C>=J,I>=S+1,G>=S,C>=I,X>=0,S>=0,F>=1,E>=2,B>=1,A>=2,B1=0,A1=0,Z=0,Y=0,W=0,V=0,U=0,T=0,R=0,Q=0,P=0,O=0,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 170: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):1+ eq(I,S,T):2+ and_op(U,V,W):1+ eq(J,J,X):3+ and_op(Y,Z,A1):1
     [G>=J,C>=J,I>=S+1,G>=S,C>=I,J>=0,S>=0,F>=1,E>=2,B>=1,A>=2,A1=0,Z=1,Y=0,X=1,W=0,V=0,U=0,T=0,R=0,Q=0,P=0,O=0,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 171: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):1+ eq(I,I,S):3+ and_op(T,U,V):1+ eq(J,W,X):1+ and_op(Y,Z,A1):1
     [G>=W,W>=J+1,C>=J,G>=I,C>=I,J>=0,I>=0,F>=1,E>=2,B>=1,A>=2,A1=0,Z=0,Y=0,X=0,V=0,U=1,T=0,S=1,R=0,Q=0,P=0,O=0,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 172: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):1+ eq(I,I,S):3+ and_op(T,U,V):1+ eq(J,W,X):2+ and_op(Y,Z,A1):1
     [J>=W+1,G>=W,C>=J,G>=I,C>=I,W>=0,I>=0,F>=1,E>=2,B>=1,A>=2,A1=0,Z=0,Y=0,X=0,V=0,U=1,T=0,S=1,R=0,Q=0,P=0,O=0,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 173: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):1+ eq(I,I,S):3+ and_op(T,U,V):1+ eq(J,J,W):3+ and_op(X,Y,Z):1
     [G>=J,C>=J,G>=I,C>=I,J>=0,I>=0,F>=1,E>=2,B>=1,A>=2,Z=0,Y=1,X=0,W=1,V=0,U=1,T=0,S=1,R=0,Q=0,P=0,O=0,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 174: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):3+ and_op(P,Q,R):1+ eq(I,S,T):1+ and_op(U,V,W):1+ eq(J,X,Y):1+ and_op(Z,A1,B1):1
     [G>=X,X>=J+1,C>=J,G>=S,S>=I+1,C>=I,G+1>=E,J>=0,I>=0,F>=1,E>=2,B>=1,A>=2,B1=0,A1=0,Z=0,Y=0,W=0,V=0,U=0,T=0,R=0,Q=1,P=0,O=1,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 175: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):3+ and_op(P,Q,R):1+ eq(I,S,T):1+ and_op(U,V,W):1+ eq(J,X,Y):2+ and_op(Z,A1,B1):1
     [J>=X+1,G>=X,C>=J,G>=S,S>=I+1,C>=I,G+1>=E,X>=0,I>=0,F>=1,E>=2,B>=1,A>=2,B1=0,A1=0,Z=0,Y=0,W=0,V=0,U=0,T=0,R=0,Q=1,P=0,O=1,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 176: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):3+ and_op(P,Q,R):1+ eq(I,S,T):1+ and_op(U,V,W):1+ eq(J,J,X):3+ and_op(Y,Z,A1):1
     [G>=J,C>=J,G>=S,S>=I+1,C>=I,G+1>=E,J>=0,I>=0,F>=1,E>=2,B>=1,A>=2,A1=0,Z=1,Y=0,X=1,W=0,V=0,U=0,T=0,R=0,Q=1,P=0,O=1,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 177: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):3+ and_op(P,Q,R):1+ eq(I,S,T):2+ and_op(U,V,W):1+ eq(J,X,Y):1+ and_op(Z,A1,B1):1
     [G>=X,X>=J+1,C>=J,I>=S+1,G>=S,C>=I,G+1>=E,J>=0,S>=0,F>=1,E>=2,B>=1,A>=2,B1=0,A1=0,Z=0,Y=0,W=0,V=0,U=0,T=0,R=0,Q=1,P=0,O=1,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 178: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):3+ and_op(P,Q,R):1+ eq(I,S,T):2+ and_op(U,V,W):1+ eq(J,X,Y):2+ and_op(Z,A1,B1):1
     [J>=X+1,G>=X,C>=J,I>=S+1,G>=S,C>=I,G+1>=E,X>=0,S>=0,F>=1,E>=2,B>=1,A>=2,B1=0,A1=0,Z=0,Y=0,W=0,V=0,U=0,T=0,R=0,Q=1,P=0,O=1,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 179: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):3+ and_op(P,Q,R):1+ eq(I,S,T):2+ and_op(U,V,W):1+ eq(J,J,X):3+ and_op(Y,Z,A1):1
     [G>=J,C>=J,I>=S+1,G>=S,C>=I,G+1>=E,J>=0,S>=0,F>=1,E>=2,B>=1,A>=2,A1=0,Z=1,Y=0,X=1,W=0,V=0,U=0,T=0,R=0,Q=1,P=0,O=1,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 180: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):3+ and_op(P,Q,R):1+ eq(I,I,S):3+ and_op(T,U,V):1+ eq(J,W,X):1+ and_op(Y,Z,A1):1
     [G>=W,W>=J+1,C>=J,G>=I,C>=I,G+1>=E,J>=0,I>=0,F>=1,E>=2,B>=1,A>=2,A1=0,Z=0,Y=0,X=0,V=0,U=1,T=0,S=1,R=0,Q=1,P=0,O=1,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 181: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):3+ and_op(P,Q,R):1+ eq(I,I,S):3+ and_op(T,U,V):1+ eq(J,W,X):2+ and_op(Y,Z,A1):1
     [J>=W+1,G>=W,C>=J,G>=I,C>=I,G+1>=E,W>=0,I>=0,F>=1,E>=2,B>=1,A>=2,A1=0,Z=0,Y=0,X=0,V=0,U=1,T=0,S=1,R=0,Q=1,P=0,O=1,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 182: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):2+ check_matrix(E,F,G,N,O):3+ and_op(P,Q,R):1+ eq(I,I,S):3+ and_op(T,U,V):1+ eq(J,J,W):3+ and_op(X,Y,Z):1
     [G>=J,C>=J,G>=I,C>=I,G+1>=E,J>=0,I>=0,F>=1,E>=2,B>=1,A>=2,Z=0,Y=1,X=0,W=1,V=0,U=1,T=0,S=1,R=0,Q=1,P=0,O=1,N=1,M=0,L=1,K=0,H=1,D=1] 
* CE 183: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):3+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):2+ eq(I,S,T):1+ and_op(U,V,W):1+ eq(J,X,Y):1+ and_op(Z,A1,B1):1
     [G>=X,X>=J+1,C>=J,G>=S,S>=I+1,C>=I,C+1>=A,J>=0,I>=0,F>=1,E>=2,B>=1,A>=2,B1=0,A1=0,Z=0,Y=0,W=0,V=0,U=0,T=0,R=0,Q=0,P=1,O=0,N=1,M=1,L=1,K=0,H=1,D=1] 
* CE 184: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):3+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):2+ eq(I,S,T):1+ and_op(U,V,W):1+ eq(J,X,Y):2+ and_op(Z,A1,B1):1
     [J>=X+1,G>=X,C>=J,G>=S,S>=I+1,C>=I,C+1>=A,X>=0,I>=0,F>=1,E>=2,B>=1,A>=2,B1=0,A1=0,Z=0,Y=0,W=0,V=0,U=0,T=0,R=0,Q=0,P=1,O=0,N=1,M=1,L=1,K=0,H=1,D=1] 
* CE 185: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):3+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):2+ eq(I,S,T):1+ and_op(U,V,W):1+ eq(J,J,X):3+ and_op(Y,Z,A1):1
     [G>=J,C>=J,G>=S,S>=I+1,C>=I,C+1>=A,J>=0,I>=0,F>=1,E>=2,B>=1,A>=2,A1=0,Z=1,Y=0,X=1,W=0,V=0,U=0,T=0,R=0,Q=0,P=1,O=0,N=1,M=1,L=1,K=0,H=1,D=1] 
* CE 186: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):3+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):2+ eq(I,S,T):2+ and_op(U,V,W):1+ eq(J,X,Y):1+ and_op(Z,A1,B1):1
     [G>=X,X>=J+1,C>=J,I>=S+1,G>=S,C>=I,C+1>=A,J>=0,S>=0,F>=1,E>=2,B>=1,A>=2,B1=0,A1=0,Z=0,Y=0,W=0,V=0,U=0,T=0,R=0,Q=0,P=1,O=0,N=1,M=1,L=1,K=0,H=1,D=1] 
* CE 187: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):3+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):2+ eq(I,S,T):2+ and_op(U,V,W):1+ eq(J,X,Y):2+ and_op(Z,A1,B1):1
     [J>=X+1,G>=X,C>=J,I>=S+1,G>=S,C>=I,C+1>=A,X>=0,S>=0,F>=1,E>=2,B>=1,A>=2,B1=0,A1=0,Z=0,Y=0,W=0,V=0,U=0,T=0,R=0,Q=0,P=1,O=0,N=1,M=1,L=1,K=0,H=1,D=1] 
* CE 188: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):3+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):2+ eq(I,S,T):2+ and_op(U,V,W):1+ eq(J,J,X):3+ and_op(Y,Z,A1):1
     [G>=J,C>=J,I>=S+1,G>=S,C>=I,C+1>=A,J>=0,S>=0,F>=1,E>=2,B>=1,A>=2,A1=0,Z=1,Y=0,X=1,W=0,V=0,U=0,T=0,R=0,Q=0,P=1,O=0,N=1,M=1,L=1,K=0,H=1,D=1] 
* CE 189: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):3+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):2+ eq(I,I,S):3+ and_op(T,U,V):1+ eq(J,W,X):1+ and_op(Y,Z,A1):1
     [G>=W,W>=J+1,C>=J,G>=I,C>=I,C+1>=A,J>=0,I>=0,F>=1,E>=2,B>=1,A>=2,A1=0,Z=0,Y=0,X=0,V=0,U=1,T=0,S=1,R=0,Q=0,P=1,O=0,N=1,M=1,L=1,K=0,H=1,D=1] 
* CE 190: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):3+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):2+ eq(I,I,S):3+ and_op(T,U,V):1+ eq(J,W,X):2+ and_op(Y,Z,A1):1
     [J>=W+1,G>=W,C>=J,G>=I,C>=I,C+1>=A,W>=0,I>=0,F>=1,E>=2,B>=1,A>=2,A1=0,Z=0,Y=0,X=0,V=0,U=1,T=0,S=1,R=0,Q=0,P=1,O=0,N=1,M=1,L=1,K=0,H=1,D=1] 
* CE 191: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):3+ check_matrix(E,F,G,N,O):2+ and_op(P,Q,R):2+ eq(I,I,S):3+ and_op(T,U,V):1+ eq(J,J,W):3+ and_op(X,Y,Z):1
     [G>=J,C>=J,G>=I,C>=I,C+1>=A,J>=0,I>=0,F>=1,E>=2,B>=1,A>=2,Z=0,Y=1,X=0,W=1,V=0,U=1,T=0,S=1,R=0,Q=0,P=1,O=0,N=1,M=1,L=1,K=0,H=1,D=1] 
* CE 192: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):3+ check_matrix(E,F,G,N,O):3+ and_op(P,Q,R):2+ eq(I,S,T):1+ and_op(U,V,W):2+ eq(J,X,Y):1+ and_op(Z,A1,B1):1
     [G>=X,X>=J+1,C>=J,G>=S,S>=I+1,C>=I,G+1>=E,C+1>=A,J>=0,I>=0,F>=1,E>=2,B>=1,A>=2,B1=0,A1=0,Z=0,Y=0,W=0,V=0,U=1,T=0,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,K=0,H=1,D=1] 
* CE 193: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):3+ check_matrix(E,F,G,N,O):3+ and_op(P,Q,R):2+ eq(I,S,T):1+ and_op(U,V,W):2+ eq(J,X,Y):2+ and_op(Z,A1,B1):1
     [J>=X+1,G>=X,C>=J,G>=S,S>=I+1,C>=I,G+1>=E,C+1>=A,X>=0,I>=0,F>=1,E>=2,B>=1,A>=2,B1=0,A1=0,Z=0,Y=0,W=0,V=0,U=1,T=0,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,K=0,H=1,D=1] 
* CE 194: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):3+ check_matrix(E,F,G,N,O):3+ and_op(P,Q,R):2+ eq(I,S,T):1+ and_op(U,V,W):2+ eq(J,J,X):3+ and_op(Y,Z,A1):1
     [G>=J,C>=J,G>=S,S>=I+1,C>=I,G+1>=E,C+1>=A,J>=0,I>=0,F>=1,E>=2,B>=1,A>=2,A1=0,Z=1,Y=0,X=1,W=0,V=0,U=1,T=0,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,K=0,H=1,D=1] 
* CE 195: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):3+ check_matrix(E,F,G,N,O):3+ and_op(P,Q,R):2+ eq(I,S,T):2+ and_op(U,V,W):2+ eq(J,X,Y):1+ and_op(Z,A1,B1):1
     [G>=X,X>=J+1,C>=J,I>=S+1,G>=S,C>=I,G+1>=E,C+1>=A,J>=0,S>=0,F>=1,E>=2,B>=1,A>=2,B1=0,A1=0,Z=0,Y=0,W=0,V=0,U=1,T=0,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,K=0,H=1,D=1] 
* CE 196: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):3+ check_matrix(E,F,G,N,O):3+ and_op(P,Q,R):2+ eq(I,S,T):2+ and_op(U,V,W):2+ eq(J,X,Y):2+ and_op(Z,A1,B1):1
     [J>=X+1,G>=X,C>=J,I>=S+1,G>=S,C>=I,G+1>=E,C+1>=A,X>=0,S>=0,F>=1,E>=2,B>=1,A>=2,B1=0,A1=0,Z=0,Y=0,W=0,V=0,U=1,T=0,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,K=0,H=1,D=1] 
* CE 197: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):3+ check_matrix(E,F,G,N,O):3+ and_op(P,Q,R):2+ eq(I,S,T):2+ and_op(U,V,W):2+ eq(J,J,X):3+ and_op(Y,Z,A1):1
     [G>=J,C>=J,I>=S+1,G>=S,C>=I,G+1>=E,C+1>=A,J>=0,S>=0,F>=1,E>=2,B>=1,A>=2,A1=0,Z=1,Y=0,X=1,W=0,V=0,U=1,T=0,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,K=0,H=1,D=1] 
* CE 198: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):3+ check_matrix(E,F,G,N,O):3+ and_op(P,Q,R):2+ eq(I,I,S):3+ and_op(T,U,V):2+ eq(J,W,X):1+ and_op(Y,Z,A1):2
     [G>=W,W>=J+1,C>=J,G>=I,C>=I,G+1>=E,C+1>=A,J>=0,I>=0,F>=1,E>=2,B>=1,A>=2,A1=0,Z=0,Y=1,X=0,V=1,U=1,T=1,S=1,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,K=0,H=1,D=1] 
* CE 199: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):3+ check_matrix(E,F,G,N,O):3+ and_op(P,Q,R):2+ eq(I,I,S):3+ and_op(T,U,V):2+ eq(J,W,X):2+ and_op(Y,Z,A1):2
     [J>=W+1,G>=W,C>=J,G>=I,C>=I,G+1>=E,C+1>=A,W>=0,I>=0,F>=1,E>=2,B>=1,A>=2,A1=0,Z=0,Y=1,X=0,V=1,U=1,T=1,S=1,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,K=0,H=1,D=1] 
* CE 200: case_17(A,B,C,D,E,F,G,H,I,J,K) = 8+ check_matrix(A,B,C,L,M):3+ check_matrix(E,F,G,N,O):3+ and_op(P,Q,R):2+ eq(I,I,S):3+ and_op(T,U,V):2+ eq(J,J,W):3+ and_op(X,Y,Z):2
     [G>=J,C>=J,G>=I,C>=I,G+1>=E,C+1>=A,J>=0,I>=0,F>=1,E>=2,B>=1,A>=2,Z=1,Y=1,X=1,W=1,V=1,U=1,T=1,S=1,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,K=1,H=1,D=1] 

### Cost equations --> "Loop" of case_17/11 
* CEs [200] --> Loop 150 
* CEs [177,179] --> Loop 151 
* CEs [168,170,186,188,195,197] --> Loop 152 
* CEs [175,181] --> Loop 153 
* CEs [166,172,184,190,193,199] --> Loop 154 
* CEs [174,176,180,182,194] --> Loop 155 
* CEs [165,167,171,173,183,185,189,191,192,198] --> Loop 156 
* CEs [169,178,187,196] --> Loop 157 

#### Loops of case_17/11 
* Loop 150: case_17(A,B,C,D,E,F,G,H,I,J,K) [G>=J,C>=J,G>=I,C>=I,G+1>=E,C+1>=A,J>=0,I>=0,F>=1,E>=2,B>=1,A>=2,K=1,H=1,D=1] 
* Loop 151: case_17(A,B,C,D,E,F,G,H,I,J,K) [G>=J,C>=J,C>=I,G+1>=E,J>=0,I>=1,F>=1,E>=2,B>=1,A>=2,K=0,H=1,D=1] 
* Loop 152: case_17(A,B,C,D,E,F,G,H,I,J,K) [G>=J,C>=J,C>=I,J>=0,I>=1,F>=1,E>=2,B>=1,A>=2,K=0,H=1,D=1] 
* Loop 153: case_17(A,B,C,D,E,F,G,H,I,J,K) [C>=J,G>=I,C>=I,G+1>=E,J>=1,I>=0,F>=1,E>=2,B>=1,A>=2,K=0,H=1,D=1] 
* Loop 154: case_17(A,B,C,D,E,F,G,H,I,J,K) [C>=J,G>=I,C>=I,J>=1,I>=0,F>=1,E>=2,B>=1,A>=2,K=0,H=1,D=1] 
* Loop 155: case_17(A,B,C,D,E,F,G,H,I,J,K) [G>=J,C>=J,G>=I,C>=I,G+1>=E,J>=0,I>=0,F>=1,E>=2,B>=1,A>=2,K=0,H=1,D=1] 
* Loop 156: case_17(A,B,C,D,E,F,G,H,I,J,K) [G>=J,C>=J,G>=I,C>=I,J>=0,I>=0,F>=1,E>=2,B>=1,A>=2,K=0,H=1,D=1] 
* Loop 157: case_17(A,B,C,D,E,F,G,H,I,J,K) [C>=J,C>=I,J>=1,I>=1,G>=0,F>=1,E>=2,B>=1,A>=2,K=0,H=1,D=1] 

### Ranking functions of CR case_17(A,B,C,D,E,F,G,H,I,J,K) 

#### Partial ranking functions of CR case_17(A,B,C,D,E,F,G,H,I,J,K) 


### Resulting Chains:case_17(A,B,C,D,E,F,G,H,I,J,K) 
* [157]
* [156]
* [155]
* [154]
* [153]
* [152]
* [151]
* [150]


### Merging Chains  case_17/11 into  External patterns of execution 
* [[157]] --> 1 
* [[155],[156]] --> 2 
* [[153],[154]] --> 3 
* [[151],[152]] --> 4 
* [[150]] --> 5 


### Specialization of cost equations check_sanity/9 
* CE 19 is refined into CE [201,202,203,204,205] 


#### Refined cost equations check_sanity/9 
* CE 201: check_sanity(A,B,C,D,E,F,G,H,I) = 3+ case_17(A,B,C,J,E,F,G,K,L,M,N):1
     [C>=M,C>=L,M>=1,L>=1,G>=0,F>=1,E>=2,B>=1,A>=2,N=0,K=1,J=1,I=0,H=1,D=1] 
* CE 202: check_sanity(A,B,C,D,E,F,G,H,I) = 3+ case_17(A,B,C,J,E,F,G,K,L,M,N):2
     [G>=M,C>=M,G>=L,C>=L,M>=0,L>=0,F>=1,E>=2,B>=1,A>=2,N=0,K=1,J=1,I=0,H=1,D=1] 
* CE 203: check_sanity(A,B,C,D,E,F,G,H,I) = 3+ case_17(A,B,C,J,E,F,G,K,L,M,N):3
     [C>=M,G>=L,C>=L,M>=1,L>=0,F>=1,E>=2,B>=1,A>=2,N=0,K=1,J=1,I=0,H=1,D=1] 
* CE 204: check_sanity(A,B,C,D,E,F,G,H,I) = 3+ case_17(A,B,C,J,E,F,G,K,L,M,N):4
     [G>=M,C>=M,C>=L,M>=0,L>=1,F>=1,E>=2,B>=1,A>=2,N=0,K=1,J=1,I=0,H=1,D=1] 
* CE 205: check_sanity(A,B,C,D,E,F,G,H,I) = 3+ case_17(A,B,C,J,E,F,G,K,L,M,N):5
     [G>=M,C>=M,G>=L,C>=L,G+1>=E,C+1>=A,M>=0,L>=0,F>=1,E>=2,B>=1,A>=2,N=1,K=1,J=1,I=1,H=1,D=1] 

### Cost equations --> "Loop" of check_sanity/9 
* CEs [205] --> Loop 158 
* CEs [201,202,203,204] --> Loop 159 

#### Loops of check_sanity/9 
* Loop 158: check_sanity(A,B,C,D,E,F,G,H,I) [G+1>=E,C+1>=A,F>=1,E>=2,B>=1,A>=2,I=1,H=1,D=1] 
* Loop 159: check_sanity(A,B,C,D,E,F,G,H,I) [G>=0,F>=1,E>=2,C>=0,B>=1,A>=2,I=0,H=1,D=1] 

### Ranking functions of CR check_sanity(A,B,C,D,E,F,G,H,I) 

#### Partial ranking functions of CR check_sanity(A,B,C,D,E,F,G,H,I) 


### Resulting Chains:check_sanity(A,B,C,D,E,F,G,H,I) 
* [159]
* [158]


### Merging Chains  check_sanity/9 into  External patterns of execution 
* [[159]] --> 1 
* [[158]] --> 2 


### Specialization of cost equations lineMult/7 
* CE 51 is refined into CE [206] 
* CE 50 is refined into CE [207] 
* CE 49 is refined into CE [208] 


#### Refined cost equations lineMult/7 
* CE 206: lineMult(A,B,C,D,E,F,G) = 10+ lineMult(A,H,I,J,K,L,M)
     [G>=M,E>=K,C>=I,L>=1,J>=1,I>=0,H>=1,G>=0,E>=0,A>=0,L+1=F,J+1=D,H+1=B] 
* CE 207: lineMult(A,B,C,D,E,F,G) = 9+ lineMult(A,H,I,J,K,L,M)
     [G>=M,C>=I,L>=1,I>=0,H>=1,G>=0,E>=0,A>=0,L+1=F,H+1=B,J=1,D=1] 
* CE 208: lineMult(A,B,C,D,E,F,G) = 3
     [G>=0,E>=0,D>=0,C>=0,A>=0,F=1,B=1] 

### Cost equations --> "Loop" of lineMult/7 
* CEs [208] --> Loop 160 
* CEs [206] --> Loop 161 
* CEs [207] --> Loop 162 

#### Loops of lineMult/7 
* Loop 160: lineMult(A,B,C,D,E,F,G) [G>=0,E>=0,D>=0,C>=0,A>=0,F=1,B=1] 
* Loop 161: lineMult(A,B,C,D,E,F,G)->  lineMult(A,A',B',C',D',E',F')
                  [G>=F',E>=D',C>=B',B'>=0,G>=0,F>=2,E>=0,D>=2,B>=2,A>=0,F=E'+1,D=C'+1,B=A'+1] 
* Loop 162: lineMult(A,B,C,D,E,F,G)->  lineMult(A,A',B',C',D',E',F')
                  [G>=F',C>=B',B'>=0,G>=0,F>=2,E>=0,B>=2,A>=0,F=E'+1,B=A'+1,C'=1,D=1] 

### Ranking functions of CR lineMult(A,B,C,D,E,F,G) 
* RF of phase [161]: [B-1,D-1]
* RF of phase [162]: [B-1]

#### Partial ranking functions of CR lineMult(A,B,C,D,E,F,G) 
* Partial RF of phase [161]:
  - RF of loop [161:1]:
    B-1
    D-1
* Partial RF of phase [162]:
  - RF of loop [162:1]:
    B-1

Discarded unfeasible chain [[162]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [[161]](Non-terminating chain proved terminating)
Discarded unfeasible chain [[161],[162]](Non-terminating chain proved terminating)

### Resulting Chains:lineMult(A,B,C,D,E,F,G) 
* [[162],160]
* [[161],[162],160]
* [[161],160]
* [160]


### Merging Chains  lineMult/7 into  External patterns of execution 
* [[160]] --> 1 
* [[160,[162]]] --> 2 
* [[160,[161]]] --> 3 
* [[160,[162],[161]]] --> 4 


### Specialization of cost equations computeLine/9 
* CE 54 is refined into CE [209,210,211,212] 
* CE 53 is refined into CE [213] 
* CE 52 is refined into CE [214] 


#### Refined cost equations computeLine/9 
* CE 209: computeLine(A,B,C,D,E,F,G,H,I) = 8+ lineMult(J,K,L,F,G,M,N):1+ computeLine(O,P,Q,R,S,T,N,H,I)
     [E>=S,D>=R,B>=P,E>=L,B>=J,Q>=1,P>=0,O>=1,N>=0,G>=0,F>=0,L>=0,J>=0,I>=0,H>=0,D>=1,Q+1=C,O+1=A,T=1,M=1,K=1] 
* CE 210: computeLine(A,B,C,D,E,F,G,H,I) = 8+ lineMult(J,K,L,M,G,K,N):2+ computeLine(O,P,Q,R,S,K,N,H,I)
     [E>=S,D>=R,B>=P,D>=K,E>=L,B>=J,Q>=1,P>=0,O>=1,N>=0,K>=2,G>=0,L>=0,J>=0,I>=0,H>=0,Q+1=C,O+1=A,M=1,F=1] 
* CE 211: computeLine(A,B,C,D,E,F,G,H,I) = 8+ lineMult(J,K,L,F,G,K,M):3+ computeLine(N,O,P,Q,R,K,M,H,I)
     [E>=R,D>=Q,B>=O,F>=K,D>=K,E>=L,B>=J,P>=1,O>=0,N>=1,M>=0,K>=2,G>=0,L>=0,J>=0,I>=0,H>=0,P+1=C,N+1=A] 
* CE 212: computeLine(A,B,C,D,E,F,G,H,I) = 8+ lineMult(J,K,L,F,G,K,M):4+ computeLine(N,O,P,Q,R,K,M,H,I)
     [E>=R,D>=Q,B>=O,D>=K,K>=F+1,E>=L,B>=J,P>=1,O>=0,N>=1,M>=0,G>=0,F>=2,L>=0,J>=0,I>=0,H>=0,P+1=C,N+1=A] 
* CE 213: computeLine(A,B,C,D,E,F,G,H,I) = 6
     [I>=0,G>=0,F>=0,E>=0,B>=0,A>=2,H=1,D=0,C=1] 
* CE 214: computeLine(A,B,C,D,E,F,G,F,G) = 2
     [G>=0,F>=0,E>=0,D>=0,C>=0,B>=0,A=1] 

### Cost equations --> "Loop" of computeLine/9 
* CEs [213] --> Loop 163 
* CEs [214] --> Loop 164 
* CEs [211] --> Loop 165 
* CEs [212] --> Loop 166 
* CEs [209] --> Loop 167 
* CEs [210] --> Loop 168 

#### Loops of computeLine/9 
* Loop 163: computeLine(A,B,C,D,E,F,G,H,I) [I>=0,G>=0,F>=0,E>=0,B>=0,A>=2,H=1,D=0,C=1] 
* Loop 164: computeLine(A,B,C,D,E,F,G,F,G) [G>=0,F>=0,E>=0,D>=0,C>=0,B>=0,A=1] 
* Loop 165: computeLine(A,B,C,D,E,F,G,H,I)->  computeLine(A',B',C',D',E',F',G',H,I)
                  [F>=F',D>=F',E>=E',D>=D',B>=B',G'>=0,F'>=2,B'>=0,I>=0,H>=0,G>=0,E>=0,C>=2,A>=2,C=C'+1,A=A'+1] 
* Loop 166: computeLine(A,B,C,D,E,F,G,H,I)->  computeLine(A',B',C',D',E',F',G',H,I)
                  [D>=F',E>=E',D>=D',B>=B',F'>=F+1,G'>=0,B'>=0,I>=0,H>=0,G>=0,F>=2,E>=0,C>=2,A>=2,C=C'+1,A=A'+1] 
* Loop 167: computeLine(A,B,C,D,E,F,G,H,I)->  computeLine(A',B',C',D',E',F',G',H,I)
                  [E>=E',D>=D',B>=B',G'>=0,B'>=0,I>=0,H>=0,G>=0,F>=0,E>=0,D>=1,C>=2,A>=2,C=C'+1,A=A'+1,F'=1] 
* Loop 168: computeLine(A,B,C,D,E,F,G,H,I)->  computeLine(A',B',C',D',E',F',G',H,I)
                  [D>=F',E>=E',D>=D',B>=B',G'>=0,F'>=2,B'>=0,I>=0,H>=0,G>=0,E>=0,C>=2,A>=2,C=C'+1,A=A'+1,F=1] 

### Ranking functions of CR computeLine(A,B,C,D,E,F,G,H,I) 
* RF of phase [165,166,167,168]: [A-1,C-1]

#### Partial ranking functions of CR computeLine(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [165,166,167,168]:
  - RF of loop [165:1,166:1,167:1,168:1]:
    A-1
    C-1
  - RF of loop [166:1]:
    D-F depends on loops [165:1,167:1] 
  - RF of loop [168:1]:
    -F+2 depends on loops [165:1,167:1] 

Discarded unfeasible chain [[165,166,167,168]]...(Non-terminating chain proved terminating)

### Resulting Chains:computeLine(A,B,C,D,E,F,G,H,I) 
* [[165,166,167,168],164]
* [[165,166,167,168],163]
* [164]
* [163]


### Merging Chains  computeLine/9 into  External patterns of execution 
* [[164]] --> 1 
* [[163]] --> 2 
* [[163,[165,166,167,168]]] --> 3 
* [[164,[165,166,167,168]]] --> 4 


### Specialization of cost equations case_5/10 
* CE 74 is refined into CE [215] 
* CE 75 is refined into CE [216] 


#### Refined cost equations case_5/10 
* CE 215: case_5(A,B,C,D,E,F,D,E,G,H) = 2
     [G>=F,G>=C,G>=B,F>=0,E>=0,D>=1,C>=0,B>=0,H=1,A=1] 
* CE 216: case_5(A,B,C,D,E,F,G,H,I,J) = 6
     [I>=0,F>=0,E>=0,D>=0,C>=0,B>=0,J=1,H=0,G=1,A=0] 

### Cost equations --> "Loop" of case_5/10 
* CEs [215] --> Loop 169 
* CEs [216] --> Loop 170 

#### Loops of case_5/10 
* Loop 169: case_5(A,B,C,D,E,F,D,E,G,H) [G>=F,G>=C,G>=B,F>=0,E>=0,D>=1,C>=0,B>=0,H=1,A=1] 
* Loop 170: case_5(A,B,C,D,E,F,G,H,I,J) [I>=0,F>=0,E>=0,D>=0,C>=0,B>=0,J=1,H=0,G=1,A=0] 

### Ranking functions of CR case_5(A,B,C,D,E,F,G,H,I,J) 

#### Partial ranking functions of CR case_5(A,B,C,D,E,F,G,H,I,J) 


### Resulting Chains:case_5(A,B,C,D,E,F,G,H,I,J) 
* [170]
* [169]


### Merging Chains  case_5/10 into  External patterns of execution 
* [[170]] --> 1 
* [[169]] --> 2 


### Specialization of cost equations construct_matrix/9 
* CE 8 is refined into CE [217,218,219,220,221] 


#### Refined cost equations construct_matrix/9 
* CE 217: construct_matrix(A,B,C,D,E,F,G,H,I) = 2+ check_mat(J,B,K,L,E,M):1+ case_5(N,O,B,P,Q,E,R,S,H,T):2
     [H>=E,H>=B,E>=0,B>=0,T=1,S=0,R=1,Q=0,P=1,O=0,N=1,M=1,L=0,K=1,J=0,I=1,G=0,F=1,D=0,C=1,A=0] 
* CE 218: construct_matrix(A,B,C,D,E,C,D,F,G) = 2+ check_mat(H,I,C,D,E,J):2+ case_5(K,L,M,C,D,E,C,D,F,N):2
     [F+1>=C,F>=E,D>=1,C>=2,E>=0,C=L+1,C=H+1,C=A+1,N=1,M=0,K=1,J=1,I=0,G=1,B=0] 
* CE 219: construct_matrix(A,B,C,D,E,F,G,H,I) = 2+ check_mat(A,B,J,D,E,K):3+ case_5(L,A,B,M,D,E,N,O,H,P):1
     [D>=B+2,H>=0,E>=0,B>=0,A>=1,A+1=M,A+1=J,A+1=C,P=1,O=0,N=1,L=0,K=0,I=1,G=0,F=1] 
* CE 220: construct_matrix(A,B,C,D,E,F,G,H,I) = 2+ check_mat(A,B,C,D,E,J):4+ case_5(K,A,B,C,D,E,L,M,H,N):1
     [C>=A+2,H>=0,E>=0,D>=1,B>=0,A>=0,N=1,M=0,L=1,K=0,J=0,I=1,G=0,F=1] 
* CE 221: construct_matrix(A,B,C,D,E,C,D,F,G) = 2+ check_mat(H,B,C,D,E,I):5+ case_5(J,K,B,C,D,E,C,D,F,L):2
     [F+1>=C,F>=E,F>=B,D>=B+1,C>=2,E>=0,B>=1,C=K+1,C=H+1,C=A+1,L=1,J=1,I=1,G=1] 

### Cost equations --> "Loop" of construct_matrix/9 
* CEs [221] --> Loop 171 
* CEs [220] --> Loop 172 
* CEs [219] --> Loop 173 
* CEs [218] --> Loop 174 
* CEs [217] --> Loop 175 

#### Loops of construct_matrix/9 
* Loop 171: construct_matrix(A,B,C,D,E,F,D,G,H) [G>=E,G>=B,D>=B+1,G>=A,E>=0,B>=1,A>=1,A+1=F,A+1=C,H=1] 
* Loop 172: construct_matrix(A,B,C,D,E,F,G,H,I) [C>=A+2,H>=0,E>=0,D>=1,B>=0,A>=0,I=1,G=0,F=1] 
* Loop 173: construct_matrix(A,B,C,D,E,F,G,H,I) [D>=B+2,H>=0,E>=0,B>=0,A>=1,A+1=C,I=1,G=0,F=1] 
* Loop 174: construct_matrix(A,B,C,D,E,F,D,G,H) [G>=E,G>=A,E>=0,D>=1,A>=1,A+1=F,A+1=C,H=1,B=0] 
* Loop 175: construct_matrix(A,B,C,D,E,F,G,H,I) [H>=E,H>=B,E>=0,B>=0,I=1,G=0,F=1,D=0,C=1,A=0] 

### Ranking functions of CR construct_matrix(A,B,C,D,E,F,G,H,I) 

#### Partial ranking functions of CR construct_matrix(A,B,C,D,E,F,G,H,I) 


### Resulting Chains:construct_matrix(A,B,C,D,E,F,G,H,I) 
* [175]
* [174]
* [173]
* [172]
* [171]


### Merging Chains  construct_matrix/9 into  External patterns of execution 
* [[175]] --> 1 
* [[174]] --> 2 
* [[173]] --> 3 
* [[172]] --> 4 
* [[171]] --> 5 


### Specialization of cost equations del/5 
* CE 65 is refined into CE [222] 
* CE 64 is refined into CE [223] 
* CE 63 is refined into CE [224] 


#### Refined cost equations del/5 
* CE 222: del(A,B,C,D,E) = 10+ del(F,G,H,I,J)
     [E>=J,B>=G,I>=1,H>=0,G>=0,F>=1,E>=0,I+1=D,H+1=C,F+1=A] 
* CE 223: del(A,B,C,D,E) = 6
     [B>=E,E>=0,D>=1,D+1=A,C=0] 
* CE 224: del(A,B,C,D,E) = 3
     [E>=0,C>=0,B>=0,D=1,A=1] 

### Cost equations --> "Loop" of del/5 
* CEs [223] --> Loop 176 
* CEs [224] --> Loop 177 
* CEs [222] --> Loop 178 

#### Loops of del/5 
* Loop 176: del(A,B,C,D,E) [B>=E,E>=0,A>=2,A=D+1,C=0] 
* Loop 177: del(A,B,C,D,E) [E>=0,C>=0,B>=0,D=1,A=1] 
* Loop 178: del(A,B,C,D,E)->  del(A',B',C',D',E')
                  [E>=E',B>=B',D'>=1,C'>=0,B'>=0,A'>=1,E>=0,D'+1=D,C'+1=C,A'+1=A] 

### Ranking functions of CR del(A,B,C,D,E) 
* RF of phase [178]: [A-1,C]

#### Partial ranking functions of CR del(A,B,C,D,E) 
* Partial RF of phase [178]:
  - RF of loop [178:1]:
    A-1
    C

Discarded unfeasible chain [[178]]...(Non-terminating chain proved terminating)

### Resulting Chains:del(A,B,C,D,E) 
* [[178],177]
* [[178],176]
* [177]
* [176]


### Merging Chains  del/5 into  External patterns of execution 
* [[177]] --> 1 
* [[176]] --> 2 
* [[177,[178]]] --> 3 
* [[176,[178]]] --> 4 


### Specialization of cost equations case_11/5 
* CE 77 is refined into CE [225] 
* CE 78 is refined into CE [226] 


#### Refined cost equations case_11/5 
* CE 225: case_11(A,B,C,D,E) = 2
     [D>=0,C>=0,B>=1,C+D=E,A=0] 
* CE 226: case_11(A,B,C,D,E) = 2
     [C>=D,D>=0,D+E=C,B=0,A=0] 

### Cost equations --> "Loop" of case_11/5 
* CEs [225] --> Loop 179 
* CEs [226] --> Loop 180 

#### Loops of case_11/5 
* Loop 179: case_11(A,B,C,D,E) [D>=0,C>=0,B>=1,C+D=E,A=0] 
* Loop 180: case_11(A,B,C,D,E) [C>=D,D>=0,C=D+E,B=0,A=0] 

### Ranking functions of CR case_11(A,B,C,D,E) 

#### Partial ranking functions of CR case_11(A,B,C,D,E) 


### Resulting Chains:case_11(A,B,C,D,E) 
* [180]
* [179]


### Merging Chains  case_11/5 into  External patterns of execution 
* [[180]] --> 1 
* [[179]] --> 2 


### Specialization of cost equations op/4 
* CE 12 is refined into CE [227,228] 


#### Refined cost equations op/4 
* CE 227: op(A,B,C,D) = 2+ case_11(E,F,G,C,D):1
     [D>=0,C>=0,C+D=G,C+D=B,F=0,E=0,A=0] 
* CE 228: op(A,B,C,D) = 2+ case_11(E,A,B,F,D):2
     [D>=B,B>=0,A>=1,D=B+F,D=B+C,E=0] 

### Cost equations --> "Loop" of op/4 
* CEs [228] --> Loop 181 
* CEs [227] --> Loop 182 

#### Loops of op/4 
* Loop 181: op(A,B,C,D) [C>=0,B>=0,A>=1,B+C=D] 
* Loop 182: op(A,B,C,D) [B>=C,C>=0,C+D=B,A=0] 

### Ranking functions of CR op(A,B,C,D) 

#### Partial ranking functions of CR op(A,B,C,D) 


### Resulting Chains:op(A,B,C,D) 
* [182]
* [181]


### Merging Chains  op/4 into  External patterns of execution 
* [[182]] --> 1 
* [[181]] --> 2 


### Specialization of cost equations rec_list/7 
* CE 15 is refined into CE [229,230] 
* CE 14 is refined into CE [231] 
* CE 13 is refined into CE [232] 


#### Refined cost equations rec_list/7 
* CE 229: rec_list(A,B,C,D,E,F,G) = 9+ op(H,I,J,K):1+ rec_list(L,M,N,O,P,Q,R)
     [B>=J+K,G>=R,D>=O,B>=M,G>=K,D>=J,Q>=1,N>=1,M>=0,L>=1,K>=0,J>=0,J+K=I,Q+1=F,N+1=C,L+1=A,P=0,H=0,E=0] 
* CE 230: rec_list(A,B,C,D,E,F,G) = 9+ op(E,H,I,J):2+ rec_list(K,L,M,N,E,O,P)
     [D+H>=J,G>=P,D>=N,B>=L,G>=J,J>=H,B>=H,O>=1,M>=1,L>=0,K>=1,H>=0,E>=1,J=H+I,O+1=F,M+1=C,K+1=A] 
* CE 231: rec_list(A,B,C,D,E,F,G) = 6
     [G>=0,E>=0,D>=0,B>=0,A>=2,F=1,C=1] 
* CE 232: rec_list(A,B,C,D,E,F,G) = 3
     [G>=0,E>=0,D>=0,C>=0,B>=0,F=1,A=1] 

### Cost equations --> "Loop" of rec_list/7 
* CEs [231] --> Loop 183 
* CEs [232] --> Loop 184 
* CEs [230] --> Loop 185 
* CEs [229] --> Loop 186 

#### Loops of rec_list/7 
* Loop 183: rec_list(A,B,C,D,E,F,G) [G>=0,E>=0,D>=0,B>=0,A>=2,F=1,C=1] 
* Loop 184: rec_list(A,B,C,D,E,F,G) [G>=0,E>=0,D>=0,C>=0,B>=0,F=1,A=1] 
* Loop 185: rec_list(A,B,C,D,E,F,G)->  rec_list(A',B',C',D',E,E',F')
                  [G>=F',D>=D',B>=B',B'>=0,G>=0,F>=2,E>=1,D>=0,C>=2,A>=2,F=E'+1,C=C'+1,A=A'+1] 
* Loop 186: rec_list(A,B,C,D,E,F,G)->  rec_list(A',B',C',D',E',F',G')
                  [G>=G',D>=D',B>=B',B'>=0,G>=0,F>=2,D>=0,C>=2,A>=2,F=F'+1,C=C'+1,A=A'+1,E'=0,E=0] 

### Ranking functions of CR rec_list(A,B,C,D,E,F,G) 
* RF of phase [185]: [A-1,C-1]
* RF of phase [186]: [A-1,C-1]

#### Partial ranking functions of CR rec_list(A,B,C,D,E,F,G) 
* Partial RF of phase [185]:
  - RF of loop [185:1]:
    A-1
    C-1
* Partial RF of phase [186]:
  - RF of loop [186:1]:
    A-1
    C-1

Discarded unfeasible chain [[186]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [[185]](Non-terminating chain proved terminating)

### Resulting Chains:rec_list(A,B,C,D,E,F,G) 
* [[186],184]
* [[186],183]
* [[185],184]
* [[185],183]
* [184]
* [183]


### Merging Chains  rec_list/7 into  External patterns of execution 
* [[184]] --> 1 
* [[183]] --> 2 
* [[184,[186]]] --> 3 
* [[183,[186]]] --> 4 
* [[184,[185]]] --> 5 
* [[183,[185]]] --> 6 


### Specialization of cost equations rec_mat/10 
* CE 18 is refined into CE [233,234,235,236,237,238,239,240,241,242,243,244] 
* CE 17 is refined into CE [245] 
* CE 16 is refined into CE [246] 


#### Refined cost equations rec_mat/10 
* CE 233: rec_mat(A,B,C,D,E,F,G,H,I,J) = 9+ rec_list(K,L,M,N,G,O,P):1+ rec_mat(Q,R,S,T,U,V,G,W,X,Y)+ maxNorm(Z,A1,B1):1
     [J>=Y,F>=V,E>=U,C>=S,B>=R,J>=P,F>=N,E>=M,C>=L,W>=1,T>=1,S>=0,R>=0,Q>=1,P>=0,G>=0,N>=0,M>=1,L>=0,B>=1,W+1=H,T+1=D,Q+1=A,X=0,B1=1,A1=0,Z=1,O=1,K=1,I=1] 
* CE 234: rec_mat(A,B,C,D,E,F,G,H,I,J) = 9+ rec_list(K,L,M,N,G,O,P):1+ rec_mat(Q,R,S,T,U,V,G,W,I,X)+ maxNorm(Y,I,I):2
     [J>=X,F>=V,E>=U,C>=S,B>=R,J>=P,F>=N,E>=M,C>=L,W>=1,T>=1,S>=0,R>=0,Q>=1,I>=1,P>=0,G>=0,N>=0,M>=1,L>=0,B>=1,W+1=H,T+1=D,Q+1=A,Y=1,O=1,K=1] 
* CE 235: rec_mat(A,B,C,D,E,F,G,H,I,J) = 9+ rec_list(K,L,M,N,G,O,P):2+ rec_mat(Q,R,S,T,U,V,G,W,X,Y)+ maxNorm(Z,A1,B1):1
     [J>=Y,F>=V,E>=U,C>=S,B>=R,J>=P,F>=N,C>=L,B>=K,W>=1,T>=1,S>=0,R>=0,Q>=1,P>=0,G>=0,N>=0,L>=0,K>=2,E>=1,W+1=H,T+1=D,Q+1=A,X=0,B1=1,A1=0,Z=1,O=1,M=1,I=1] 
* CE 236: rec_mat(A,B,C,D,E,F,G,H,I,J) = 9+ rec_list(K,L,M,N,G,O,P):2+ rec_mat(Q,R,S,T,U,V,G,W,I,X)+ maxNorm(Y,I,I):2
     [J>=X,F>=V,E>=U,C>=S,B>=R,J>=P,F>=N,C>=L,B>=K,W>=1,T>=1,S>=0,R>=0,Q>=1,I>=1,P>=0,G>=0,N>=0,L>=0,K>=2,E>=1,W+1=H,T+1=D,Q+1=A,Y=1,O=1,M=1] 
* CE 237: rec_mat(A,B,C,D,E,F,G,H,I,J) = 9+ rec_list(I,K,L,M,N,I,O):3+ rec_mat(P,Q,R,S,T,U,V,W,X,Y)+ maxNorm(I,X,I):1
     [J>=Y,F>=U,E>=T,C>=R,B>=Q,L>=I,B>=I,I>=X+1,J>=O,F>=M,E>=L,C>=K,W>=1,S>=1,R>=0,Q>=0,P>=1,I>=2,X>=0,O>=0,M>=0,K>=0,W+1=H,S+1=D,P+1=A,V=0,N=0,G=0] 
* CE 238: rec_mat(A,B,C,D,E,F,G,H,I,J) = 9+ rec_list(K,L,M,N,O,K,P):3+ rec_mat(Q,R,S,T,U,V,W,X,I,Y)+ maxNorm(K,I,I):2
     [J>=Y,F>=V,E>=U,C>=S,B>=R,I>=K,M>=K,B>=K,J>=P,F>=N,E>=M,C>=L,X>=1,T>=1,S>=0,R>=0,Q>=1,K>=2,P>=0,N>=0,L>=0,X+1=H,T+1=D,Q+1=A,W=0,O=0,G=0] 
* CE 239: rec_mat(A,B,C,D,E,F,G,H,I,J) = 9+ rec_list(K,L,I,M,N,I,O):4+ rec_mat(P,Q,R,S,T,U,V,W,X,Y)+ maxNorm(I,X,I):1
     [J>=Y,F>=U,E>=T,C>=R,B>=Q,K>=I+1,E>=I,I>=X+1,J>=O,F>=M,C>=L,B>=K,W>=1,S>=1,R>=0,Q>=0,P>=1,I>=2,X>=0,O>=0,M>=0,L>=0,W+1=H,S+1=D,P+1=A,V=0,N=0,G=0] 
* CE 240: rec_mat(A,B,C,D,E,F,G,H,I,J) = 9+ rec_list(K,L,M,N,O,M,P):4+ rec_mat(Q,R,S,T,U,V,W,X,I,Y)+ maxNorm(M,I,I):2
     [J>=Y,F>=V,E>=U,C>=S,B>=R,I>=M,K>=M+1,E>=M,J>=P,F>=N,C>=L,B>=K,X>=1,T>=1,S>=0,R>=0,Q>=1,M>=2,P>=0,N>=0,L>=0,X+1=H,T+1=D,Q+1=A,W=0,O=0,G=0] 
* CE 241: rec_mat(A,B,C,D,E,F,G,H,I,J) = 9+ rec_list(I,K,L,M,G,I,N):5+ rec_mat(O,P,Q,R,S,T,G,U,V,W)+ maxNorm(I,V,I):1
     [J>=W,F>=T,E>=S,C>=Q,B>=P,L>=I,B>=I,I>=V+1,J>=N,F>=M,E>=L,C>=K,U>=1,R>=1,Q>=0,P>=0,O>=1,I>=2,V>=0,N>=0,G>=1,M>=0,K>=0,U+1=H,R+1=D,O+1=A] 
* CE 242: rec_mat(A,B,C,D,E,F,G,H,I,J) = 9+ rec_list(K,L,M,N,G,K,O):5+ rec_mat(P,Q,R,S,T,U,G,V,I,W)+ maxNorm(K,I,I):2
     [J>=W,F>=U,E>=T,C>=R,B>=Q,I>=K,M>=K,B>=K,J>=O,F>=N,E>=M,C>=L,V>=1,S>=1,R>=0,Q>=0,P>=1,K>=2,O>=0,G>=1,N>=0,L>=0,V+1=H,S+1=D,P+1=A] 
* CE 243: rec_mat(A,B,C,D,E,F,G,H,I,J) = 9+ rec_list(K,L,I,M,G,I,N):6+ rec_mat(O,P,Q,R,S,T,G,U,V,W)+ maxNorm(I,V,I):1
     [J>=W,F>=T,E>=S,C>=Q,B>=P,K>=I+1,E>=I,I>=V+1,J>=N,F>=M,C>=L,B>=K,U>=1,R>=1,Q>=0,P>=0,O>=1,I>=2,V>=0,N>=0,G>=1,M>=0,L>=0,U+1=H,R+1=D,O+1=A] 
* CE 244: rec_mat(A,B,C,D,E,F,G,H,I,J) = 9+ rec_list(K,L,M,N,G,M,O):6+ rec_mat(P,Q,R,S,T,U,G,V,I,W)+ maxNorm(M,I,I):2
     [J>=W,F>=U,E>=T,C>=R,B>=Q,I>=M,K>=M+1,E>=M,J>=O,F>=N,C>=L,B>=K,V>=1,S>=1,R>=0,Q>=0,P>=1,M>=2,O>=0,G>=1,N>=0,L>=0,V+1=H,S+1=D,P+1=A] 
* CE 245: rec_mat(A,B,C,D,E,F,G,H,I,J) = 6
     [J>=0,G>=0,F>=0,C>=0,B>=1,A>=2,I=0,H=1,E=0,D=1] 
* CE 246: rec_mat(A,B,C,D,E,F,G,H,I,J) = 3
     [J>=0,G>=0,F>=0,E>=0,D>=0,C>=0,I=0,H=1,B=0,A=1] 

### Cost equations --> "Loop" of rec_mat/10 
* CEs [245] --> Loop 187 
* CEs [246] --> Loop 188 
* CEs [241,243] --> Loop 189 
* CEs [233,235] --> Loop 190 
* CEs [237,239] --> Loop 191 
* CEs [234,236,238,240,242,244] --> Loop 192 

#### Loops of rec_mat/10 
* Loop 187: rec_mat(A,B,C,D,E,F,G,H,I,J) [J>=0,G>=0,F>=0,C>=0,B>=1,A>=2,I=0,H=1,E=0,D=1] 
* Loop 188: rec_mat(A,B,C,D,E,F,G,H,I,J) [J>=0,G>=0,F>=0,E>=0,D>=0,C>=0,I=0,H=1,B=0,A=1] 
* Loop 189: rec_mat(A,B,C,D,E,F,G,H,I,J)->  rec_mat(A',B',C',D',E',F',G,G',H',I')
                  [J>=I',I>=H'+1,F>=F',E>=E',C>=C',B>=B',E>=I,B>=I,H'>=0,C'>=0,B'>=0,J>=0,I>=2,H>=2,G>=1,F>=0,D>=2,A>=2,H=G'+1,D=D'+1,A=A'+1] 
* Loop 190: rec_mat(A,B,C,D,E,F,G,H,I,J)->  rec_mat(A',B',C',D',E',F',G,G',H',I')
                  [J>=I',F>=F',E>=E',C>=C',B>=B',C'>=0,B'>=0,J>=0,H>=2,G>=0,F>=0,E>=1,D>=2,B>=1,A>=2,H=G'+1,D=D'+1,A=A'+1,H'=0,I=1] 
* Loop 191: rec_mat(A,B,C,D,E,F,G,H,I,J)->  rec_mat(A',B',C',D',E',F',G',H',I',J')
                  [J>=J',I>=I'+1,F>=F',E>=E',C>=C',B>=B',E>=I,B>=I,I'>=0,C'>=0,B'>=0,J>=0,I>=2,H>=2,F>=0,D>=2,A>=2,H=H'+1,D=D'+1,A=A'+1,G'=0,G=0] 
* Loop 192: rec_mat(A,B,C,D,E,F,G,H,I,J)->  rec_mat(A',B',C',D',E',F',G,G',I,H')
                  [J>=H',F>=F',E>=E',C>=C',B>=B',C'>=0,B'>=0,J>=0,I>=1,H>=2,G>=0,F>=0,E>=1,D>=2,B>=1,A>=2,H=G'+1,D=D'+1,A=A'+1] 

### Ranking functions of CR rec_mat(A,B,C,D,E,F,G,H,I,J) 
* RF of phase [189,191,192]: [A-1,D-1]

#### Partial ranking functions of CR rec_mat(A,B,C,D,E,F,G,H,I,J) 
* Partial RF of phase [189,191,192]:
  - RF of loop [189:1,191:1,192:1]:
    A-1
    D-1

Discarded unfeasible chain [[189,191,192]]...(Non-terminating chain proved terminating)

### Resulting Chains:rec_mat(A,B,C,D,E,F,G,H,I,J) 
* [[189,191,192],190,188]
* [[189,191,192],190,187]
* [[189,191,192],188]
* [[189,191,192],187]
* [190,188]
* [190,187]
* [188]
* [187]


### Merging Chains  rec_mat/10 into  External patterns of execution 
* [[188]] --> 1 
* [[188,190]] --> 2 
* [[187]] --> 3 
* [[187,190]] --> 4 
* [[188,[189,191,192]]] --> 5 
* [[188,190,[189,191,192]]] --> 6 
* [[187,[189,191,192]]] --> 7 
* [[187,190,[189,191,192]]] --> 8 


### Specialization of cost equations case_23/17 
* CE 96 is discarded (unfeasible) 


#### Refined cost equations case_23/17 

### Cost equations --> "Loop" of case_23/17 

#### Loops of case_23/17 

### Ranking functions of CR case_23(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) 

#### Partial ranking functions of CR case_23(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) 

Warning: no base case found for predicate

### Resulting Chains:case_23(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) 


### Merging Chains  case_23/17 into  External patterns of execution 


### Specialization of cost equations case_21/13 
* CE 84 is discarded (unfeasible) 
* CE 85 is refined into CE [247] 


#### Refined cost equations case_21/13 
* CE 247: case_21(A,B,C,D,E,F,G,H,I,J,K,L,M) = 6
     [L>=0,I>=0,H>=0,G>=0,F>=0,E>=0,D>=0,C>=0,B>=0,M=1,K=0,J=1,A=0] 

### Cost equations --> "Loop" of case_21/13 
* CEs [247] --> Loop 193 

#### Loops of case_21/13 
* Loop 193: case_21(A,B,C,D,E,F,G,H,I,J,K,L,M) [L>=0,I>=0,H>=0,G>=0,F>=0,E>=0,D>=0,C>=0,B>=0,M=1,K=0,J=1,A=0] 

### Ranking functions of CR case_21(A,B,C,D,E,F,G,H,I,J,K,L,M) 

#### Partial ranking functions of CR case_21(A,B,C,D,E,F,G,H,I,J,K,L,M) 


### Resulting Chains:case_21(A,B,C,D,E,F,G,H,I,J,K,L,M) 
* [193]


### Merging Chains  case_21/13 into  External patterns of execution 
* [[193]] --> 1 


### Specialization of cost equations minus/12 
* CE 21 is refined into CE [248] 


#### Refined cost equations minus/12 
* CE 248: minus(A,B,C,D,E,F,G,H,I,J,K,L) = 2+ check_sanity(A,B,C,M,E,F,G,N,O):1+ case_21(P,A,B,C,Q,E,F,G,R,S,T,K,U):1
     [K>=0,G>=0,F>=1,E>=2,C>=0,B>=1,A>=2,U=1,T=0,S=1,R=1,Q=1,P=0,O=0,N=1,M=1,L=1,J=0,I=1,H=1,D=1] 

### Cost equations --> "Loop" of minus/12 
* CEs [248] --> Loop 194 

#### Loops of minus/12 
* Loop 194: minus(A,B,C,D,E,F,G,H,I,J,K,L) [K>=0,G>=0,F>=1,E>=2,C>=0,B>=1,A>=2,L=1,J=0,I=1,H=1,D=1] 

### Ranking functions of CR minus(A,B,C,D,E,F,G,H,I,J,K,L) 

#### Partial ranking functions of CR minus(A,B,C,D,E,F,G,H,I,J,K,L) 


### Resulting Chains:minus(A,B,C,D,E,F,G,H,I,J,K,L) 
* [194]


### Merging Chains  minus/12 into  External patterns of execution 
* [[194]] --> 1 


### Specialization of cost equations mat_mult_jan/9 
* CE 56 is refined into CE [249] 
* CE 55 is refined into CE [250,251,252,253,254,255,256,257] 


#### Refined cost equations mat_mult_jan/9 
* CE 249: mat_mult_jan(A,B,C,D,E,F,G,H,I) = 3
     [I>=0,F>=0,E>=0,D>=0,C>=0,H=0,G=1,B=0,A=1] 
* CE 250: mat_mult_jan(A,B,C,D,E,F,G,H,I) = 7+ computeLine(J,K,D,E,F,L,M,N,M):1+ mat_mult_jan(O,P,Q,D,E,F,R,S,T)+ maxNorm(U,V,W):1
     [I>=T,C>=Q,B>=P,I>=M,C>=K,R>=1,O>=1,M>=0,F>=0,E>=0,D>=0,K>=0,B>=1,R+1=G,O+1=A,S=0,W=1,V=0,U=1,N=1,L=1,J=1,H=1] 
* CE 251: mat_mult_jan(A,B,C,D,E,F,G,H,I) = 7+ computeLine(J,K,D,E,F,L,M,N,M):1+ mat_mult_jan(O,P,Q,D,E,F,R,H,S)+ maxNorm(T,H,H):2
     [I>=S,C>=Q,B>=P,I>=M,C>=K,R>=1,O>=1,H>=1,M>=0,F>=0,E>=0,D>=0,K>=0,B>=1,R+1=G,O+1=A,T=1,N=1,L=1,J=1] 
* CE 252: mat_mult_jan(A,B,C,D,E,F,G,H,I) = 7+ computeLine(J,K,L,M,F,N,O,P,Q):2+ mat_mult_jan(R,S,T,U,V,F,W,X,Y)+ maxNorm(Z,A1,B1):1
     [I>=Y,C>=T,B>=S,I>=Q,C>=K,B>=J,W>=1,R>=1,Q>=0,O>=0,F>=0,K>=0,J>=2,W+1=G,R+1=A,X=0,V=0,U=1,B1=1,A1=0,Z=1,P=1,N=1,M=0,L=1,H=1,E=0,D=1] 
* CE 253: mat_mult_jan(A,B,C,D,E,F,G,H,I) = 7+ computeLine(J,K,L,M,F,N,O,P,Q):2+ mat_mult_jan(R,S,T,U,V,F,W,H,X)+ maxNorm(Y,H,H):2
     [I>=X,C>=T,B>=S,I>=Q,C>=K,B>=J,W>=1,R>=1,H>=1,Q>=0,O>=0,F>=0,K>=0,J>=2,W+1=G,R+1=A,V=0,U=1,Y=1,P=1,N=1,M=0,L=1,E=0,D=1] 
* CE 254: mat_mult_jan(A,B,C,D,E,F,G,H,I) = 7+ computeLine(J,K,D,E,F,L,M,N,O):3+ mat_mult_jan(P,Q,R,D,E,F,S,T,U)+ maxNorm(V,W,X):1
     [I>=U,C>=R,B>=Q,I>=O,J>=D+1,C>=K,B>=J,S>=1,P>=1,O>=0,M>=0,F>=0,E>=1,D>=2,K>=0,S+1=G,P+1=A,T=0,X=1,W=0,V=1,N=1,L=1,H=1] 
* CE 255: mat_mult_jan(A,B,C,D,E,F,G,H,I) = 7+ computeLine(J,K,D,E,F,L,M,N,O):3+ mat_mult_jan(P,Q,R,D,E,F,S,H,T)+ maxNorm(U,H,H):2
     [I>=T,C>=R,B>=Q,I>=O,J>=D+1,C>=K,B>=J,S>=1,P>=1,H>=1,O>=0,M>=0,F>=0,E>=1,D>=2,K>=0,S+1=G,P+1=A,U=1,N=1,L=1] 
* CE 256: mat_mult_jan(A,B,C,D,E,F,G,H,I) = 7+ computeLine(J,K,D,E,F,L,M,H,N):4+ mat_mult_jan(O,P,Q,D,E,F,R,S,T)+ maxNorm(H,S,H):1
     [I>=T,C>=Q,B>=P,E>=H,H>=S+1,I>=N,C>=K,D>=J,B>=J,R>=1,O>=1,S>=0,N>=0,M>=0,F>=0,K>=0,J>=2,R+1=G,O+1=A,L=1] 
* CE 257: mat_mult_jan(A,B,C,D,E,F,G,H,I) = 7+ computeLine(J,K,D,E,F,L,M,N,O):4+ mat_mult_jan(P,Q,R,D,E,F,S,H,T)+ maxNorm(N,H,H):2
     [I>=T,C>=R,B>=Q,H>=N,E>=N,I>=O,C>=K,D>=J,B>=J,S>=1,P>=1,N>=1,O>=0,M>=0,F>=0,K>=0,J>=2,S+1=G,P+1=A,L=1] 

### Cost equations --> "Loop" of mat_mult_jan/9 
* CEs [256] --> Loop 195 
* CEs [251,253,255,257] --> Loop 196 
* CEs [250,252,254] --> Loop 197 
* CEs [249] --> Loop 198 

#### Loops of mat_mult_jan/9 
* Loop 195: mat_mult_jan(A,B,C,D,E,F,G,H,I)->  mat_mult_jan(A',B',C',D,E,F,D',E',F')
                  [I>=F',H>=E'+1,C>=C',B>=B',E>=H,E'>=0,I>=0,G>=2,F>=0,D>=2,C>=0,B>=2,A>=2,G=D'+1,A=A'+1] 
* Loop 196: mat_mult_jan(A,B,C,D,E,F,G,H,I)->  mat_mult_jan(A',B',C',D,E,F,D',H,E')
                  [I>=E',C>=C',B>=B',I>=0,H>=1,G>=2,F>=0,E>=0,D>=0,C>=0,B>=1,A>=2,G=D'+1,A=A'+1] 
* Loop 197: mat_mult_jan(A,B,C,D,E,F,G,H,I)->  mat_mult_jan(A',B',C',D,E,F,D',E',F')
                  [I>=F',C>=C',B>=B',I>=0,G>=2,F>=0,E>=0,D>=0,C>=0,B>=1,A>=2,G=D'+1,A=A'+1,E'=0,H=1] 
* Loop 198: mat_mult_jan(A,B,C,D,E,F,G,H,I) [I>=0,F>=0,E>=0,D>=0,C>=0,H=0,G=1,B=0,A=1] 

### Ranking functions of CR mat_mult_jan(A,B,C,D,E,F,G,H,I) 
* RF of phase [195,196]: [A-1]

#### Partial ranking functions of CR mat_mult_jan(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [195,196]:
  - RF of loop [195:1,196:1]:
    A-1

Discarded unfeasible chain [[195,196]]...(Non-terminating chain proved terminating)

### Resulting Chains:mat_mult_jan(A,B,C,D,E,F,G,H,I) 
* [[195,196],198]
* [[195,196],197,198]
* [198]
* [197,198]


### Merging Chains  mat_mult_jan/9 into  External patterns of execution 
* [[198]] --> 1 
* [[198,197]] --> 2 
* [[198,[195,196]]] --> 3 
* [[198,197,[195,196]]] --> 4 


### Specialization of cost equations case_46/17 
* CE 97 is refined into CE [258,259,260,261,262,263,264,265,266,267,268] 


#### Refined cost equations case_46/17 
* CE 258: case_46(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) = 5+ mat_mult_jan(R,S,M,E,F,T,U,V,W):1+ construct_matrix(X,J,Y,Z,W,A1,B1,P,C1):1
     [P>=W,P>=J,C>=J,G>=T,C>=M,W>=0,J>=0,T>=0,F>=0,E>=1,M>=0,C1=1,B1=0,A1=1,Z=0,Y=1,X=0,V=0,U=1,S=0,R=1,Q=1,O=0,N=1,L=0,K=1,I=0,H=1,D=1,B=0,A=1] 
* CE 259: case_46(A,B,C,D,E,F,G,H,I,J,K,B,L,M,N,O,P) = 5+ mat_mult_jan(Q,B,L,E,F,R,S,T,U):2+ construct_matrix(V,W,X,Y,U,Z,A1,O,B1):2
     [O>=U,G>=R,C>=L,O>=1,U>=0,R>=0,F>=0,E>=1,L>=0,B>=1,C>=1,B1=1,A1=1,Z=2,Y=1,X=2,W=0,V=1,T=1,S=2,Q=2,P=1,N=1,M=2,K=2,J=0,I=1,H=1,D=1,A=2] 
* CE 260: case_46(A,B,C,D,E,F,G,H,I,J,K,B,L,M,N,O,P) = 5+ mat_mult_jan(Q,B,L,E,F,R,S,T,U):2+ construct_matrix(V,J,W,X,U,Y,Z,O,A1):4
     [C>=J,G>=R,C>=L,O>=0,U>=0,J>=0,R>=0,F>=0,E>=1,L>=0,B>=1,A1=1,Z=0,Y=1,X=1,W=2,V=0,T=1,S=2,Q=2,P=1,N=0,M=1,K=2,I=0,H=1,D=1,A=2] 
* CE 261: case_46(A,B,C,D,E,F,G,H,I,J,A,B,K,A,L,M,N) = 5+ mat_mult_jan(A,B,K,E,F,O,A,L,P):3+ construct_matrix(Q,R,A,L,P,A,L,M,S):2
     [F>=L,M>=P,M+1>=A,C+1>=A,G>=O,C>=K,L>=1,P>=0,A>=2,O>=0,E>=2,K>=0,B>=2,A=Q+1,A=I+1,S=1,R=0,N=1,J=0,H=1,D=1] 
* CE 262: case_46(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) = 5+ mat_mult_jan(A,B,K,E,F,P,A,Q,R):3+ construct_matrix(S,J,A,Q,R,T,U,N,V):3
     [F>=Q,C+1>=A,Q>=J+2,C>=J,G>=P,C>=K,N>=0,R>=0,A>=2,J>=0,P>=0,E>=2,K>=0,B>=2,A=S+1,A=I+1,V=1,U=0,T=1,O=1,M=0,L=1,H=1,D=1] 
* CE 263: case_46(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) = 5+ mat_mult_jan(A,B,K,E,F,P,A,Q,R):3+ construct_matrix(I,J,A,Q,R,S,T,N,U):4
     [F>=Q,C>=J,A>=I+2,C>=I,G>=P,C>=K,N>=0,R>=0,Q>=1,J>=0,I>=0,P>=0,E>=2,K>=0,B>=2,U=1,T=0,S=1,O=1,M=0,L=1,H=1,D=1] 
* CE 264: case_46(A,B,C,D,E,F,G,H,I,J,A,B,K,A,L,M,N) = 5+ mat_mult_jan(A,B,K,E,F,O,A,L,P):3+ construct_matrix(Q,J,A,L,P,A,L,M,R):5
     [F>=L,M>=P,M+1>=A,C+1>=A,M>=J,L>=J+1,C>=J,G>=O,C>=K,P>=0,A>=2,J>=1,O>=0,E>=2,K>=0,B>=2,A=Q+1,A=I+1,R=1,N=1,H=1,D=1] 
* CE 265: case_46(A,B,C,D,E,F,G,H,I,J,A,B,K,A,L,M,N) = 5+ mat_mult_jan(A,B,K,E,F,O,A,L,P):4+ construct_matrix(Q,R,A,L,P,A,L,M,S):2
     [F+1>=L,M>=P,M+1>=A,C+1>=A,G>=O,C>=K,L>=1,P>=0,A>=3,O>=0,E>=1,K>=0,B>=1,A=Q+1,A=I+1,S=1,R=0,N=1,J=0,H=1,D=1] 
* CE 266: case_46(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) = 5+ mat_mult_jan(A,B,K,E,F,P,A,Q,R):4+ construct_matrix(S,J,A,Q,R,T,U,N,V):3
     [F+1>=Q,C+1>=A,Q>=J+2,C>=J,G>=P,C>=K,N>=0,R>=0,A>=3,J>=0,P>=0,E>=1,K>=0,B>=1,A=S+1,A=I+1,V=1,U=0,T=1,O=1,M=0,L=1,H=1,D=1] 
* CE 267: case_46(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) = 5+ mat_mult_jan(A,B,K,E,F,P,A,Q,R):4+ construct_matrix(I,J,A,Q,R,S,T,N,U):4
     [F+1>=Q,C>=J,A>=I+2,C>=I,G>=P,C>=K,N>=0,R>=0,Q>=1,A>=3,J>=0,I>=0,P>=0,E>=1,K>=0,B>=1,U=1,T=0,S=1,O=1,M=0,L=1,H=1,D=1] 
* CE 268: case_46(A,B,C,D,E,F,G,H,I,J,A,B,K,A,L,M,N) = 5+ mat_mult_jan(A,B,K,E,F,O,A,L,P):4+ construct_matrix(Q,J,A,L,P,A,L,M,R):5
     [F+1>=L,M>=P,M+1>=A,C+1>=A,M>=J,L>=J+1,C>=J,G>=O,C>=K,P>=0,A>=3,J>=1,O>=0,E>=1,K>=0,B>=1,A=Q+1,A=I+1,R=1,N=1,H=1,D=1] 

### Cost equations --> "Loop" of case_46/17 
* CEs [268] --> Loop 199 
* CEs [264] --> Loop 200 
* CEs [263] --> Loop 201 
* CEs [267] --> Loop 202 
* CEs [266] --> Loop 203 
* CEs [262] --> Loop 204 
* CEs [265] --> Loop 205 
* CEs [261] --> Loop 206 
* CEs [259] --> Loop 207 
* CEs [260] --> Loop 208 
* CEs [258] --> Loop 209 

#### Loops of case_46/17 
* Loop 199: case_46(A,B,C,D,E,F,G,H,I,J,A,B,K,A,L,M,N) [F+1>=L,C>=K,M>=J,L>=J+1,C>=J,M+1>=A,C+1>=A,K>=0,J>=1,G>=0,E>=1,B>=1,A>=3,A=I+1,N=1,H=1,D=1] 
* Loop 200: case_46(A,B,C,D,E,F,G,H,I,J,A,B,K,A,L,M,N) [F>=L,C>=K,M>=J,L>=J+1,C>=J,M+1>=A,C+1>=A,K>=0,J>=1,G>=0,E>=2,B>=2,A>=2,A=I+1,N=1,H=1,D=1] 
* Loop 201: case_46(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) [C>=K,C>=J,C>=I,A>=I+2,N>=0,K>=0,J>=0,I>=0,G>=0,F>=1,E>=2,B>=2,O=1,M=0,L=1,H=1,D=1] 
* Loop 202: case_46(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) [C>=K,C>=J,C>=I,A>=I+2,N>=0,K>=0,J>=0,I>=0,G>=0,F>=0,E>=1,B>=1,A>=3,O=1,M=0,L=1,H=1,D=1] 
* Loop 203: case_46(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) [C>=K,F>=J+1,C>=J,C+1>=A,N>=0,K>=0,J>=0,G>=0,E>=1,B>=1,A>=3,A=I+1,O=1,M=0,L=1,H=1,D=1] 
* Loop 204: case_46(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) [C>=K,F>=J+2,C>=J,C+1>=A,N>=0,K>=0,J>=0,G>=0,E>=2,B>=2,A>=2,A=I+1,O=1,M=0,L=1,H=1,D=1] 
* Loop 205: case_46(A,B,C,D,E,F,G,H,I,J,A,B,K,A,L,M,N) [F+1>=L,C>=K,M+1>=A,C+1>=A,L>=1,K>=0,G>=0,E>=1,B>=1,A>=3,A=I+1,N=1,J=0,H=1,D=1] 
* Loop 206: case_46(A,B,C,D,E,F,G,H,I,J,A,B,K,A,L,M,N) [F>=L,C>=K,M+1>=A,C+1>=A,L>=1,K>=0,G>=0,E>=2,B>=2,A>=2,A=I+1,N=1,J=0,H=1,D=1] 
* Loop 207: case_46(A,B,C,D,E,F,G,H,I,J,K,B,L,M,N,O,P) [C>=L,O>=1,L>=0,G>=0,F>=0,E>=1,C>=1,B>=1,P=1,N=1,M=2,K=2,J=0,I=1,H=1,D=1,A=2] 
* Loop 208: case_46(A,B,C,D,E,F,G,H,I,J,K,B,L,M,N,O,P) [C>=L,C>=J,O>=0,L>=0,J>=0,G>=0,F>=0,E>=1,B>=1,P=1,N=0,M=1,K=2,I=0,H=1,D=1,A=2] 
* Loop 209: case_46(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) [C>=M,P>=J,C>=J,M>=0,J>=0,G>=0,F>=0,E>=1,Q=1,O=0,N=1,L=0,K=1,I=0,H=1,D=1,B=0,A=1] 

### Ranking functions of CR case_46(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) 

#### Partial ranking functions of CR case_46(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) 


### Resulting Chains:case_46(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) 
* [209]
* [208]
* [207]
* [206]
* [205]
* [204]
* [203]
* [202]
* [201]
* [200]
* [199]


### Merging Chains  case_46/17 into  External patterns of execution 
* [[209]] --> 1 
* [[208]] --> 2 
* [[207]] --> 3 
* [[206]] --> 4 
* [[205]] --> 5 
* [[202]] --> 6 
* [[201]] --> 7 
* [[204]] --> 8 
* [[203]] --> 9 
* [[200]] --> 10 
* [[199]] --> 11 


### Specialization of cost equations case_44/13 
* CE 91 is refined into CE [269,270,271,272,273,274,275,276,277,278,279] 
* CE 92 is refined into CE [280] 


#### Refined cost equations case_44/13 
* CE 269: case_44(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_46(N,O,D,P,F,G,H,Q,R,S,T,U,V,W,X,L,Y):1
     [D>=V,L>=S,D>=S,V>=0,S>=0,H>=0,G>=0,F>=1,Y=1,X=0,W=1,U=0,T=1,R=0,Q=1,P=1,O=0,N=1,M=1,K=0,J=1,I=1,E=1,C=0,B=1,A=1] 
* CE 270: case_44(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_46(N,C,D,O,F,G,H,P,Q,R,S,C,T,U,V,L,W):2
     [D>=T,D>=R,L>=0,T>=0,C>=1,R>=0,H>=0,G>=0,F>=1,W=1,V=0,U=1,S=2,Q=0,P=1,O=1,N=2,M=1,K=0,J=1,I=1,E=1,B=2,A=1] 
* CE 271: case_44(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_46(N,C,D,O,F,G,H,P,Q,R,S,C,T,U,V,L,W):3
     [D>=T,L>=1,T>=0,C>=1,H>=0,G>=0,F>=1,D>=1,W=1,V=1,U=2,S=2,R=0,Q=1,P=1,O=1,N=2,M=1,K=1,J=2,I=1,E=1,B=2,A=1] 
* CE 272: case_44(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_46(N,C,D,O,F,G,H,P,Q,R,S,C,T,U,K,L,V):4
     [G>=K,D>=T,L>=Q,D>=Q,K>=1,T>=0,C>=2,Q>=1,H>=0,F>=2,Q+1=U,Q+1=S,Q+1=N,Q+1=J,Q+1=B,V=1,R=0,P=1,O=1,M=1,I=1,E=1,A=1] 
* CE 273: case_44(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_46(N,C,D,O,F,G,H,P,Q,R,S,C,T,U,K,L,V):5
     [G+1>=K,D>=T,L>=Q,D>=Q,K>=1,T>=0,C>=1,Q>=2,H>=0,F>=1,Q+1=U,Q+1=S,Q+1=N,Q+1=J,Q+1=B,V=1,R=0,P=1,O=1,M=1,I=1,E=1,A=1] 
* CE 274: case_44(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_46(B,C,D,N,F,G,H,O,P,Q,B,C,R,S,T,L,U):6
     [D>=R,D>=Q,B>=P+2,D>=P,L>=0,R>=0,C>=1,B>=3,Q>=0,P>=0,H>=0,G>=0,F>=1,U=1,T=0,S=1,O=1,N=1,M=1,K=0,J=1,I=1,E=1,A=1] 
* CE 275: case_44(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_46(B,C,D,N,F,G,H,O,P,Q,B,C,R,S,T,L,U):7
     [D>=R,D>=Q,B>=P+2,D>=P,L>=0,R>=0,C>=2,Q>=0,P>=0,H>=0,G>=1,F>=2,U=1,T=0,S=1,O=1,N=1,M=1,K=0,J=1,I=1,E=1,A=1] 
* CE 276: case_44(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_46(N,C,D,O,F,G,H,P,Q,R,S,C,T,U,V,L,W):8
     [D>=T,G>=R+2,D>=R,D>=Q,L>=0,T>=0,C>=2,R>=0,Q>=1,H>=0,F>=2,Q+1=S,Q+1=N,Q+1=B,W=1,V=0,U=1,P=1,O=1,M=1,K=0,J=1,I=1,E=1,A=1] 
* CE 277: case_44(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_46(N,C,D,O,F,G,H,P,Q,R,S,C,T,U,V,L,W):9
     [D>=T,G>=R+1,D>=R,D>=Q,L>=0,T>=0,C>=1,R>=0,Q>=2,H>=0,F>=1,Q+1=S,Q+1=N,Q+1=B,W=1,V=0,U=1,P=1,O=1,M=1,K=0,J=1,I=1,E=1,A=1] 
* CE 278: case_44(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_46(N,C,D,O,F,G,H,P,Q,R,S,C,T,U,K,L,V):10
     [G>=K,D>=T,L>=R,K>=R+1,D>=R,L>=Q,D>=Q,T>=0,C>=2,R>=1,Q>=1,H>=0,F>=2,Q+1=U,Q+1=S,Q+1=N,Q+1=J,Q+1=B,V=1,P=1,O=1,M=1,I=1,E=1,A=1] 
* CE 279: case_44(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_46(N,C,D,O,F,G,H,P,Q,R,S,C,T,U,K,L,V):11
     [G+1>=K,D>=T,L>=R,K>=R+1,D>=R,L>=Q,D>=Q,T>=0,C>=1,R>=1,Q>=2,H>=0,F>=1,Q+1=U,Q+1=S,Q+1=N,Q+1=J,Q+1=B,V=1,P=1,O=1,M=1,I=1,E=1,A=1] 
* CE 280: case_44(A,B,C,D,E,F,G,H,I,J,K,L,M) = 6
     [L>=0,I>=0,H>=0,G>=0,F>=0,E>=0,D>=0,C>=0,B>=0,M=1,K=0,J=1,A=0] 

### Cost equations --> "Loop" of case_44/13 
* CEs [273,279] --> Loop 210 
* CEs [272,278] --> Loop 211 
* CEs [274,277] --> Loop 212 
* CEs [275,276] --> Loop 213 
* CEs [271] --> Loop 214 
* CEs [270] --> Loop 215 
* CEs [269] --> Loop 216 
* CEs [280] --> Loop 217 

#### Loops of case_44/13 
* Loop 210: case_44(A,B,C,D,E,F,G,H,I,B,J,K,L) [G+1>=J,K+1>=B,D+1>=B,J>=1,H>=0,F>=1,C>=1,B>=3,L=1,I=1,E=1,A=1] 
* Loop 211: case_44(A,B,C,D,E,F,G,H,I,B,J,K,L) [G>=J,K+1>=B,D+1>=B,J>=1,H>=0,F>=2,C>=2,B>=2,L=1,I=1,E=1,A=1] 
* Loop 212: case_44(A,B,C,D,E,F,G,H,I,J,K,L,M) [L>=0,H>=0,G>=0,F>=1,D>=0,C>=1,B>=3,M=1,K=0,J=1,I=1,E=1,A=1] 
* Loop 213: case_44(A,B,C,D,E,F,G,H,I,J,K,L,M) [L>=0,H>=0,G>=1,F>=2,D>=0,C>=2,B>=2,M=1,K=0,J=1,I=1,E=1,A=1] 
* Loop 214: case_44(A,B,C,D,E,F,G,H,I,J,K,L,M) [L>=1,H>=0,G>=0,F>=1,D>=1,C>=1,M=1,K=1,J=2,I=1,E=1,B=2,A=1] 
* Loop 215: case_44(A,B,C,D,E,F,G,H,I,J,K,L,M) [L>=0,H>=0,G>=0,F>=1,D>=0,C>=1,M=1,K=0,J=1,I=1,E=1,B=2,A=1] 
* Loop 216: case_44(A,B,C,D,E,F,G,H,I,J,K,L,M) [L>=0,H>=0,G>=0,F>=1,D>=0,M=1,K=0,J=1,I=1,E=1,C=0,B=1,A=1] 
* Loop 217: case_44(A,B,C,D,E,F,G,H,I,J,K,L,M) [L>=0,I>=0,H>=0,G>=0,F>=0,E>=0,D>=0,C>=0,B>=0,M=1,K=0,J=1,A=0] 

### Ranking functions of CR case_44(A,B,C,D,E,F,G,H,I,J,K,L,M) 

#### Partial ranking functions of CR case_44(A,B,C,D,E,F,G,H,I,J,K,L,M) 


### Resulting Chains:case_44(A,B,C,D,E,F,G,H,I,J,K,L,M) 
* [217]
* [216]
* [215]
* [214]
* [213]
* [212]
* [211]
* [210]


### Merging Chains  case_44/13 into  External patterns of execution 
* [[217]] --> 1 
* [[216]] --> 2 
* [[215]] --> 3 
* [[214]] --> 4 
* [[213]] --> 5 
* [[212]] --> 6 
* [[211]] --> 7 
* [[210]] --> 8 


### Specialization of cost equations mult/12 
* CE 58 is refined into CE [281,282,283,284,285,286,287] 


#### Refined cost equations mult/12 
* CE 281: mult(A,B,C,D,E,F,G,H,I,J,K,L) = 2+ check_mult_sanity(A,B,C,M,E,F,G,N,O):1+ case_44(P,A,B,C,Q,E,F,G,R,S,T,K,U):1
     [K>=0,G>=0,F>=1,E>=2,C>=0,B>=1,A>=2,U=1,T=0,S=1,R=1,Q=1,P=0,O=0,N=1,M=1,L=1,J=0,I=1,H=1,D=1] 
* CE 282: mult(A,B,C,D,E,F,G,H,I,J,K,L) = 2+ check_mult_sanity(M,B,C,N,E,F,G,O,P):2+ case_44(Q,R,B,C,S,E,F,G,T,U,V,K,W):3
     [G+1>=E,K>=0,F>=1,E>=2,C>=1,B>=1,W=1,V=0,U=1,T=1,S=1,R=2,Q=1,P=1,O=1,N=1,M=2,L=1,J=0,I=1,H=1,D=1,A=2] 
* CE 283: mult(A,B,C,D,E,F,G,H,I,J,K,L) = 2+ check_mult_sanity(M,B,C,N,E,F,G,O,P):2+ case_44(Q,R,B,C,S,E,F,G,T,U,V,K,W):4
     [G+1>=E,K>=1,F>=1,E>=2,C>=1,B>=1,W=1,V=1,U=2,T=1,S=1,R=2,Q=1,P=1,O=1,N=1,M=2,L=1,J=1,I=2,H=1,D=1,A=2] 
* CE 284: mult(A,B,C,D,E,F,G,H,I,J,K,L) = 2+ check_mult_sanity(A,B,C,M,E,F,G,N,O):2+ case_44(P,A,B,C,Q,E,F,G,R,S,T,K,U):5
     [G+1>=E,C+1>=A,K>=0,F>=1,E>=2,B>=2,A>=2,U=1,T=0,S=1,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,J=0,I=1,H=1,D=1] 
* CE 285: mult(A,B,C,D,E,F,G,H,I,J,K,L) = 2+ check_mult_sanity(A,B,C,M,E,F,G,N,O):2+ case_44(P,A,B,C,Q,E,F,G,R,S,T,K,U):6
     [G+1>=E,C+1>=A,K>=0,F>=1,E>=2,B>=1,A>=3,U=1,T=0,S=1,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,J=0,I=1,H=1,D=1] 
* CE 286: mult(A,B,C,D,E,F,G,H,A,I,J,K) = 2+ check_mult_sanity(A,B,C,L,E,F,G,M,N):2+ case_44(O,A,B,C,P,E,F,G,Q,A,I,J,R):7
     [F>=I,J+1>=A,C+1>=A,G+1>=E,I>=1,A>=2,E>=2,B>=2,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,K=1,H=1,D=1] 
* CE 287: mult(A,B,C,D,E,F,G,H,A,I,J,K) = 2+ check_mult_sanity(A,B,C,L,E,F,G,M,N):2+ case_44(O,A,B,C,P,E,F,G,Q,A,I,J,R):8
     [F+1>=I,J+1>=A,C+1>=A,G+1>=E,I>=1,A>=3,F>=1,E>=2,B>=1,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,K=1,H=1,D=1] 

### Cost equations --> "Loop" of mult/12 
* CEs [287] --> Loop 218 
* CEs [286] --> Loop 219 
* CEs [283] --> Loop 220 
* CEs [281,282,284,285] --> Loop 221 

#### Loops of mult/12 
* Loop 218: mult(A,B,C,D,E,F,G,H,A,I,J,K) [F+1>=I,G+1>=E,J+1>=A,C+1>=A,I>=1,F>=1,E>=2,B>=1,A>=3,K=1,H=1,D=1] 
* Loop 219: mult(A,B,C,D,E,F,G,H,A,I,J,K) [F>=I,G+1>=E,J+1>=A,C+1>=A,I>=1,E>=2,B>=2,A>=2,K=1,H=1,D=1] 
* Loop 220: mult(A,B,C,D,E,F,G,H,I,J,K,L) [G+1>=E,K>=1,F>=1,E>=2,C>=1,B>=1,L=1,J=1,I=2,H=1,D=1,A=2] 
* Loop 221: mult(A,B,C,D,E,F,G,H,I,J,K,L) [K>=0,G>=0,F>=1,E>=2,C>=0,B>=1,A>=2,L=1,J=0,I=1,H=1,D=1] 

### Ranking functions of CR mult(A,B,C,D,E,F,G,H,I,J,K,L) 

#### Partial ranking functions of CR mult(A,B,C,D,E,F,G,H,I,J,K,L) 


### Resulting Chains:mult(A,B,C,D,E,F,G,H,I,J,K,L) 
* [221]
* [220]
* [219]
* [218]


### Merging Chains  mult/12 into  External patterns of execution 
* [[220]] --> 1 
* [[221]] --> 2 
* [[219]] --> 3 
* [[218]] --> 4 


### Specialization of cost equations case_20/17 
* CE 95 is refined into CE [288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309] 


#### Refined cost equations case_20/17 
* CE 288: case_20(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) = 4+ rec_mat(R,S,M,E,F,T,U,V,W,X):1+ construct_matrix(Y,J,Z,A1,X,B1,C1,P,D1):1
     [P>=X,P>=J,C>=J,G>=T,C>=M,X>=0,J>=0,T>=0,F>=0,E>=1,M>=0,D1=1,C1=0,B1=1,A1=0,Z=1,Y=0,W=0,V=1,U=1,S=0,R=1,Q=1,O=0,N=1,L=0,K=1,I=0,H=1,D=1,B=0,A=1] 
* CE 289: case_20(A,B,C,D,E,F,G,H,I,J,K,B,L,M,N,O,P) = 4+ rec_mat(Q,B,L,E,F,R,S,T,U,V):2+ construct_matrix(W,X,Y,Z,V,A1,B1,O,C1):2
     [O>=V,G>=R,C>=L,O>=1,V>=0,R>=0,F>=1,E>=2,L>=0,B>=1,C>=1,C1=1,B1=1,A1=2,Z=1,Y=2,X=0,W=1,U=1,T=2,S=1,Q=2,P=1,N=1,M=2,K=2,J=0,I=1,H=1,D=1,A=2] 
* CE 290: case_20(A,B,C,D,E,F,G,H,I,J,K,B,L,M,N,O,P) = 4+ rec_mat(Q,B,L,E,F,R,S,T,U,V):2+ construct_matrix(W,J,X,Y,V,Z,A1,O,B1):4
     [C>=J,G>=R,C>=L,O>=0,V>=0,J>=0,R>=0,F>=1,E>=2,L>=0,B>=1,B1=1,A1=0,Z=1,Y=1,X=2,W=0,U=1,T=2,S=1,Q=2,P=1,N=0,M=1,K=2,I=0,H=1,D=1,A=2] 
* CE 291: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) = 4+ rec_mat(A,B,K,P,Q,R,S,T,U,V):3+ construct_matrix(W,J,X,Y,V,Z,A1,N,B1):1
     [N>=V,N>=J,C>=J,G>=R,C>=K,V>=0,J>=0,R>=0,K>=0,B>=1,A>=2,B1=1,A1=0,Z=1,Y=0,X=1,W=0,U=0,T=1,S=1,Q=0,P=1,O=1,M=0,L=1,I=0,H=1,F=0,E=1,D=1] 
* CE 292: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) = 4+ rec_mat(A,B,K,P,F,Q,R,S,T,U):4+ construct_matrix(V,W,X,Y,U,Z,A1,N,B1):2
     [N>=U,G>=Q,C>=K,N>=1,U>=0,Q>=0,F>=1,K>=0,B>=1,A>=3,C>=1,B1=1,A1=1,Z=2,Y=1,X=2,W=0,V=1,T=1,S=2,R=1,P=2,O=1,M=1,L=2,J=0,I=1,H=1,E=2,D=1] 
* CE 293: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) = 4+ rec_mat(A,B,K,P,F,Q,R,S,T,U):4+ construct_matrix(V,J,W,X,U,Y,Z,N,A1):4
     [C>=J,G>=Q,C>=K,N>=0,U>=0,J>=0,Q>=0,F>=1,K>=0,B>=1,A>=3,A1=1,Z=0,Y=1,X=1,W=2,V=0,T=1,S=2,R=1,P=2,O=1,M=0,L=1,I=0,H=1,E=2,D=1] 
* CE 294: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,A,L,M,N) = 4+ rec_mat(A,B,K,E,F,O,P,A,L,Q):5+ construct_matrix(R,S,A,L,Q,A,L,M,T):2
     [F>=L,B>=L,M>=Q,M+1>=A,E>=A,C+1>=A,G>=O,C>=K,L>=2,Q>=0,A>=2,O>=0,K>=0,A=R+1,A=I+1,T=1,S=0,P=1,N=1,J=0,H=1,D=1] 
* CE 295: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) = 4+ rec_mat(A,B,K,E,F,P,Q,A,R,S):5+ construct_matrix(T,J,A,R,S,U,V,N,W):3
     [F>=R,B>=R,E>=A,C+1>=A,R>=J+2,C>=J,G>=P,C>=K,N>=0,S>=0,A>=2,J>=0,P>=0,K>=0,A=T+1,A=I+1,W=1,V=0,U=1,Q=1,O=1,M=0,L=1,H=1,D=1] 
* CE 296: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) = 4+ rec_mat(A,B,K,E,F,P,Q,A,R,S):5+ construct_matrix(I,J,A,R,S,T,U,N,V):4
     [F>=R,B>=R,E>=A,C>=J,A>=I+2,C>=I,G>=P,C>=K,N>=0,S>=0,R>=2,J>=0,I>=0,P>=0,K>=0,V=1,U=0,T=1,Q=1,O=1,M=0,L=1,H=1,D=1] 
* CE 297: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,A,L,M,N) = 4+ rec_mat(A,B,K,E,F,O,P,A,L,Q):5+ construct_matrix(R,J,A,L,Q,A,L,M,S):5
     [F>=L,B>=L,M>=Q,M+1>=A,E>=A,C+1>=A,M>=J,L>=J+1,C>=J,G>=O,C>=K,Q>=0,A>=2,J>=1,O>=0,K>=0,A=R+1,A=I+1,S=1,P=1,N=1,H=1,D=1] 
* CE 298: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,A,L,M,N) = 4+ rec_mat(A,B,K,E,F,O,P,A,L,Q):6+ construct_matrix(R,S,A,L,Q,A,L,M,T):2
     [F>=L,B>=L,M>=Q,M+1>=A,E>=A,C+1>=A,G>=O,C>=K,L>=1,Q>=0,A>=3,O>=0,K>=0,A=R+1,A=I+1,T=1,S=0,P=1,N=1,J=0,H=1,D=1] 
* CE 299: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) = 4+ rec_mat(A,B,K,E,F,P,Q,A,R,S):6+ construct_matrix(T,J,A,R,S,U,V,N,W):3
     [F>=R,B>=R,E>=A,C+1>=A,R>=J+2,C>=J,G>=P,C>=K,N>=0,S>=0,A>=3,J>=0,P>=0,K>=0,A=T+1,A=I+1,W=1,V=0,U=1,Q=1,O=1,M=0,L=1,H=1,D=1] 
* CE 300: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) = 4+ rec_mat(A,B,K,E,F,P,Q,A,R,S):6+ construct_matrix(I,J,A,R,S,T,U,N,V):4
     [F>=R,B>=R,E>=A,C>=J,A>=I+2,C>=I,G>=P,C>=K,N>=0,S>=0,R>=1,A>=3,J>=0,I>=0,P>=0,K>=0,V=1,U=0,T=1,Q=1,O=1,M=0,L=1,H=1,D=1] 
* CE 301: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,A,L,M,N) = 4+ rec_mat(A,B,K,E,F,O,P,A,L,Q):6+ construct_matrix(R,J,A,L,Q,A,L,M,S):5
     [F>=L,B>=L,M>=Q,M+1>=A,E>=A,C+1>=A,M>=J,L>=J+1,C>=J,G>=O,C>=K,Q>=0,A>=3,J>=1,O>=0,K>=0,A=R+1,A=I+1,S=1,P=1,N=1,H=1,D=1] 
* CE 302: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,E,L,M,N) = 4+ rec_mat(A,B,K,E,F,O,P,E,L,Q):7+ construct_matrix(R,S,E,L,Q,E,L,M,T):2
     [F>=L,B>=L,M>=Q,M+1>=E,A>=E+1,C+1>=E,G>=O,C>=K,L>=2,Q>=0,E>=2,O>=0,K>=0,E=R+1,E=I+1,T=1,S=0,P=1,N=1,J=0,H=1,D=1] 
* CE 303: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) = 4+ rec_mat(A,B,K,E,F,P,Q,E,R,S):7+ construct_matrix(T,J,E,R,S,U,V,N,W):3
     [F>=R,B>=R,A>=E+1,C+1>=E,R>=J+2,C>=J,G>=P,C>=K,N>=0,S>=0,E>=2,J>=0,P>=0,K>=0,E=T+1,E=I+1,W=1,V=0,U=1,Q=1,O=1,M=0,L=1,H=1,D=1] 
* CE 304: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) = 4+ rec_mat(A,B,K,E,F,P,Q,E,R,S):7+ construct_matrix(I,J,E,R,S,T,U,N,V):4
     [F>=R,B>=R,A>=E+1,C>=J,E>=I+2,C>=I,G>=P,C>=K,N>=0,S>=0,R>=2,J>=0,I>=0,P>=0,K>=0,V=1,U=0,T=1,Q=1,O=1,M=0,L=1,H=1,D=1] 
* CE 305: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,E,L,M,N) = 4+ rec_mat(A,B,K,E,F,O,P,E,L,Q):7+ construct_matrix(R,J,E,L,Q,E,L,M,S):5
     [F>=L,B>=L,M>=Q,M+1>=E,A>=E+1,C+1>=E,M>=J,L>=J+1,C>=J,G>=O,C>=K,Q>=0,E>=2,J>=1,O>=0,K>=0,E=R+1,E=I+1,S=1,P=1,N=1,H=1,D=1] 
* CE 306: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,E,L,M,N) = 4+ rec_mat(A,B,K,E,F,O,P,E,L,Q):8+ construct_matrix(R,S,E,L,Q,E,L,M,T):2
     [F>=L,B>=L,M>=Q,M+1>=E,A>=E+1,C+1>=E,G>=O,C>=K,L>=1,Q>=0,E>=3,O>=0,K>=0,E=R+1,E=I+1,T=1,S=0,P=1,N=1,J=0,H=1,D=1] 
* CE 307: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) = 4+ rec_mat(A,B,K,E,F,P,Q,E,R,S):8+ construct_matrix(T,J,E,R,S,U,V,N,W):3
     [F>=R,B>=R,A>=E+1,C+1>=E,R>=J+2,C>=J,G>=P,C>=K,N>=0,S>=0,E>=3,J>=0,P>=0,K>=0,E=T+1,E=I+1,W=1,V=0,U=1,Q=1,O=1,M=0,L=1,H=1,D=1] 
* CE 308: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) = 4+ rec_mat(A,B,K,E,F,P,Q,E,R,S):8+ construct_matrix(I,J,E,R,S,T,U,N,V):4
     [F>=R,B>=R,A>=E+1,C>=J,E>=I+2,C>=I,G>=P,C>=K,N>=0,S>=0,R>=1,E>=3,J>=0,I>=0,P>=0,K>=0,V=1,U=0,T=1,Q=1,O=1,M=0,L=1,H=1,D=1] 
* CE 309: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,E,L,M,N) = 4+ rec_mat(A,B,K,E,F,O,P,E,L,Q):8+ construct_matrix(R,J,E,L,Q,E,L,M,S):5
     [F>=L,B>=L,M>=Q,M+1>=E,A>=E+1,C+1>=E,M>=J,L>=J+1,C>=J,G>=O,C>=K,Q>=0,E>=3,J>=1,O>=0,K>=0,E=R+1,E=I+1,S=1,P=1,N=1,H=1,D=1] 

### Cost equations --> "Loop" of case_20/17 
* CEs [305,309] --> Loop 222 
* CEs [297,301] --> Loop 223 
* CEs [304] --> Loop 224 
* CEs [296] --> Loop 225 
* CEs [308] --> Loop 226 
* CEs [300] --> Loop 227 
* CEs [303,307] --> Loop 228 
* CEs [295,299] --> Loop 229 
* CEs [306] --> Loop 230 
* CEs [302] --> Loop 231 
* CEs [298] --> Loop 232 
* CEs [294] --> Loop 233 
* CEs [292] --> Loop 234 
* CEs [293] --> Loop 235 
* CEs [291] --> Loop 236 
* CEs [289] --> Loop 237 
* CEs [290] --> Loop 238 
* CEs [288] --> Loop 239 

#### Loops of case_20/17 
* Loop 222: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,E,L,M,N) [F>=L,B>=L,C>=K,M>=J,L>=J+1,C>=J,M+1>=E,C+1>=E,A>=E+1,K>=0,J>=1,G>=0,E>=2,E=I+1,N=1,H=1,D=1] 
* Loop 223: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,A,L,M,N) [F>=L,B>=L,C>=K,M>=J,L>=J+1,C>=J,M+1>=A,E>=A,C+1>=A,K>=0,J>=1,G>=0,A>=2,A=I+1,N=1,H=1,D=1] 
* Loop 224: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) [C>=K,C>=J,E>=I+2,C>=I,A>=E+1,N>=0,K>=0,J>=0,I>=0,G>=0,F>=2,B>=2,O=1,M=0,L=1,H=1,D=1] 
* Loop 225: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) [C>=K,C>=J,C>=I,A>=I+2,E>=A,N>=0,K>=0,J>=0,I>=0,G>=0,F>=2,B>=2,O=1,M=0,L=1,H=1,D=1] 
* Loop 226: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) [C>=K,C>=J,E>=I+2,C>=I,A>=E+1,N>=0,K>=0,J>=0,I>=0,G>=0,F>=1,E>=3,B>=1,O=1,M=0,L=1,H=1,D=1] 
* Loop 227: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) [C>=K,C>=J,C>=I,A>=I+2,E>=A,N>=0,K>=0,J>=0,I>=0,G>=0,F>=1,B>=1,A>=3,O=1,M=0,L=1,H=1,D=1] 
* Loop 228: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) [C>=K,F>=J+2,C>=J,B>=J+2,C+1>=E,A>=E+1,N>=0,K>=0,J>=0,G>=0,E>=2,E=I+1,O=1,M=0,L=1,H=1,D=1] 
* Loop 229: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) [C>=K,F>=J+2,C>=J,B>=J+2,E>=A,C+1>=A,N>=0,K>=0,J>=0,G>=0,A>=2,A=I+1,O=1,M=0,L=1,H=1,D=1] 
* Loop 230: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,E,L,M,N) [F>=L,B>=L,C>=K,M+1>=E,C+1>=E,A>=E+1,L>=1,K>=0,G>=0,E>=3,E=I+1,N=1,J=0,H=1,D=1] 
* Loop 231: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,E,L,M,N) [F>=L,B>=L,C>=K,M+1>=E,C+1>=E,A>=E+1,L>=2,K>=0,G>=0,E>=2,E=I+1,N=1,J=0,H=1,D=1] 
* Loop 232: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,A,L,M,N) [F>=L,B>=L,C>=K,M+1>=A,E>=A,C+1>=A,L>=1,K>=0,G>=0,A>=3,A=I+1,N=1,J=0,H=1,D=1] 
* Loop 233: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,A,L,M,N) [F>=L,B>=L,C>=K,M+1>=A,E>=A,C+1>=A,L>=2,K>=0,G>=0,A>=2,A=I+1,N=1,J=0,H=1,D=1] 
* Loop 234: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) [C>=K,N>=1,K>=0,G>=0,F>=1,C>=1,B>=1,A>=3,O=1,M=1,L=2,J=0,I=1,H=1,E=2,D=1] 
* Loop 235: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) [C>=K,C>=J,N>=0,K>=0,J>=0,G>=0,F>=1,B>=1,A>=3,O=1,M=0,L=1,I=0,H=1,E=2,D=1] 
* Loop 236: case_20(A,B,C,D,E,F,G,H,I,J,A,B,K,L,M,N,O) [C>=K,N>=J,C>=J,K>=0,J>=0,G>=0,B>=1,A>=2,O=1,M=0,L=1,I=0,H=1,F=0,E=1,D=1] 
* Loop 237: case_20(A,B,C,D,E,F,G,H,I,J,K,B,L,M,N,O,P) [C>=L,O>=1,L>=0,G>=0,F>=1,E>=2,C>=1,B>=1,P=1,N=1,M=2,K=2,J=0,I=1,H=1,D=1,A=2] 
* Loop 238: case_20(A,B,C,D,E,F,G,H,I,J,K,B,L,M,N,O,P) [C>=L,C>=J,O>=0,L>=0,J>=0,G>=0,F>=1,E>=2,B>=1,P=1,N=0,M=1,K=2,I=0,H=1,D=1,A=2] 
* Loop 239: case_20(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) [C>=M,P>=J,C>=J,M>=0,J>=0,G>=0,F>=0,E>=1,Q=1,O=0,N=1,L=0,K=1,I=0,H=1,D=1,B=0,A=1] 

### Ranking functions of CR case_20(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) 

#### Partial ranking functions of CR case_20(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) 


### Resulting Chains:case_20(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q) 
* [239]
* [238]
* [237]
* [236]
* [235]
* [234]
* [233]
* [232]
* [231]
* [230]
* [229]
* [228]
* [227]
* [226]
* [225]
* [224]
* [223]
* [222]


### Merging Chains  case_20/17 into  External patterns of execution 
* [[239]] --> 1 
* [[238]] --> 2 
* [[237]] --> 3 
* [[236]] --> 4 
* [[235]] --> 5 
* [[234]] --> 6 
* [[231]] --> 7 
* [[230]] --> 8 
* [[233]] --> 9 
* [[232]] --> 10 
* [[228]] --> 11 
* [[226]] --> 12 
* [[227]] --> 13 
* [[224]] --> 14 
* [[225]] --> 15 
* [[229]] --> 16 
* [[222]] --> 17 
* [[223]] --> 18 


### Specialization of cost equations case_18/13 
* CE 82 is refined into CE [310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327] 
* CE 83 is refined into CE [328] 


#### Refined cost equations case_18/13 
* CE 310: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_20(N,O,D,P,F,G,H,Q,R,S,T,U,V,W,X,L,Y):1
     [D>=V,L>=S,D>=S,V>=0,S>=0,H>=0,G>=0,F>=1,Y=1,X=0,W=1,U=0,T=1,R=0,Q=1,P=1,O=0,N=1,M=1,K=0,J=1,I=1,E=1,C=0,B=1,A=1] 
* CE 311: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_20(N,C,D,O,F,G,H,P,Q,R,S,C,T,U,V,L,W):2
     [D>=T,D>=R,L>=0,T>=0,C>=1,R>=0,H>=0,G>=1,F>=2,W=1,V=0,U=1,S=2,Q=0,P=1,O=1,N=2,M=1,K=0,J=1,I=1,E=1,B=2,A=1] 
* CE 312: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_20(N,C,D,O,F,G,H,P,Q,R,S,C,T,U,V,L,W):3
     [D>=T,L>=1,T>=0,C>=1,H>=0,G>=1,F>=2,D>=1,W=1,V=1,U=2,S=2,R=0,Q=1,P=1,O=1,N=2,M=1,K=1,J=2,I=1,E=1,B=2,A=1] 
* CE 313: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_20(B,C,D,N,O,P,H,Q,R,S,B,C,T,U,V,L,W):4
     [D>=T,L>=S,D>=S,T>=0,C>=1,B>=2,S>=0,H>=0,W=1,V=0,U=1,R=0,Q=1,P=0,O=1,N=1,M=1,K=0,J=1,I=1,G=0,F=1,E=1,A=1] 
* CE 314: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_20(B,C,D,N,O,G,H,P,Q,R,B,C,S,T,U,L,V):5
     [D>=S,D>=R,L>=0,S>=0,C>=1,B>=3,R>=0,H>=0,G>=1,V=1,U=0,T=1,Q=0,P=1,O=2,N=1,M=1,K=0,J=1,I=1,F=2,E=1,A=1] 
* CE 315: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_20(B,C,D,N,O,G,H,P,Q,R,B,C,S,T,U,L,V):6
     [D>=S,L>=1,S>=0,C>=1,B>=3,H>=0,G>=1,D>=1,V=1,U=1,T=2,R=0,Q=1,P=1,O=2,N=1,M=1,K=1,J=2,I=1,F=2,E=1,A=1] 
* CE 316: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_20(B,C,D,N,O,G,H,P,Q,R,B,C,S,T,K,L,U):7
     [C>=K,G>=K,D>=S,L>=Q,B>=Q+2,D>=Q,K>=2,S>=0,Q>=1,H>=0,Q+1=T,Q+1=O,Q+1=J,Q+1=F,U=1,R=0,P=1,N=1,M=1,I=1,E=1,A=1] 
* CE 317: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_20(B,C,D,N,O,G,H,P,Q,R,B,C,S,T,K,L,U):8
     [C>=K,G>=K,D>=S,L>=Q,B>=Q+2,D>=Q,K>=1,S>=0,Q>=2,H>=0,Q+1=T,Q+1=O,Q+1=J,Q+1=F,U=1,R=0,P=1,N=1,M=1,I=1,E=1,A=1] 
* CE 318: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_20(N,C,D,O,F,G,H,P,Q,R,S,C,T,U,K,L,V):9
     [C>=K,G>=K,D>=T,L>=Q,F>=Q+1,D>=Q,K>=2,T>=0,Q>=1,H>=0,Q+1=U,Q+1=S,Q+1=N,Q+1=J,Q+1=B,V=1,R=0,P=1,O=1,M=1,I=1,E=1,A=1] 
* CE 319: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_20(N,C,D,O,F,G,H,P,Q,R,S,C,T,U,K,L,V):10
     [C>=K,G>=K,D>=T,L>=Q,F>=Q+1,D>=Q,K>=1,T>=0,Q>=2,H>=0,Q+1=U,Q+1=S,Q+1=N,Q+1=J,Q+1=B,V=1,R=0,P=1,O=1,M=1,I=1,E=1,A=1] 
* CE 320: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_20(B,C,D,N,O,G,H,P,Q,R,B,C,S,T,U,L,V):11
     [D>=S,C>=R+2,G>=R+2,D>=R,B>=Q+2,D>=Q,L>=0,S>=0,R>=0,Q>=1,H>=0,Q+1=O,Q+1=F,V=1,U=0,T=1,P=1,N=1,M=1,K=0,J=1,I=1,E=1,A=1] 
* CE 321: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_20(B,C,D,N,F,G,H,O,P,Q,B,C,R,S,T,L,U):12
     [D>=R,D>=Q,F>=P+2,D>=P,B>=F+1,L>=0,R>=0,C>=1,Q>=0,P>=0,H>=0,G>=1,F>=3,U=1,T=0,S=1,O=1,N=1,M=1,K=0,J=1,I=1,E=1,A=1] 
* CE 322: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_20(B,C,D,N,F,G,H,O,P,Q,B,C,R,S,T,L,U):13
     [D>=R,F>=B,D>=Q,B>=P+2,D>=P,L>=0,R>=0,C>=1,B>=3,Q>=0,P>=0,H>=0,G>=1,U=1,T=0,S=1,O=1,N=1,M=1,K=0,J=1,I=1,E=1,A=1] 
* CE 323: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_20(B,C,D,N,F,G,H,O,P,Q,B,C,R,S,T,L,U):14
     [D>=R,D>=Q,F>=P+2,D>=P,B>=F+1,L>=0,R>=0,C>=2,Q>=0,P>=0,H>=0,G>=2,U=1,T=0,S=1,O=1,N=1,M=1,K=0,J=1,I=1,E=1,A=1] 
* CE 324: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_20(B,C,D,N,F,G,H,O,P,Q,B,C,R,S,T,L,U):15
     [D>=R,F>=B,D>=Q,B>=P+2,D>=P,L>=0,R>=0,C>=2,Q>=0,P>=0,H>=0,G>=2,U=1,T=0,S=1,O=1,N=1,M=1,K=0,J=1,I=1,E=1,A=1] 
* CE 325: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_20(N,C,D,O,F,G,H,P,Q,R,S,C,T,U,V,L,W):16
     [D>=T,C>=R+2,G>=R+2,D>=R,F>=Q+1,D>=Q,L>=0,T>=0,R>=0,Q>=1,H>=0,Q+1=S,Q+1=N,Q+1=B,W=1,V=0,U=1,P=1,O=1,M=1,K=0,J=1,I=1,E=1,A=1] 
* CE 326: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_20(B,C,D,N,O,G,H,P,Q,R,B,C,S,T,K,L,U):17
     [C>=K,G>=K,D>=S,L>=R,K>=R+1,D>=R,L>=Q,B>=Q+2,D>=Q,S>=0,R>=1,Q>=1,H>=0,Q+1=T,Q+1=O,Q+1=J,Q+1=F,U=1,P=1,N=1,M=1,I=1,E=1,A=1] 
* CE 327: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 4+ case_20(N,C,D,O,F,G,H,P,Q,R,S,C,T,U,K,L,V):18
     [C>=K,G>=K,D>=T,L>=R,K>=R+1,D>=R,L>=Q,F>=Q+1,D>=Q,T>=0,R>=1,Q>=1,H>=0,Q+1=U,Q+1=S,Q+1=N,Q+1=J,Q+1=B,V=1,P=1,O=1,M=1,I=1,E=1,A=1] 
* CE 328: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) = 6
     [L>=0,I>=0,H>=0,G>=0,F>=0,E>=0,D>=0,C>=0,B>=0,M=1,K=0,J=1,A=0] 

### Cost equations --> "Loop" of case_18/13 
* CEs [317] --> Loop 240 
* CEs [319] --> Loop 241 
* CEs [318,327] --> Loop 242 
* CEs [316,326] --> Loop 243 
* CEs [320,323] --> Loop 244 
* CEs [321] --> Loop 245 
* CEs [322] --> Loop 246 
* CEs [324,325] --> Loop 247 
* CEs [315] --> Loop 248 
* CEs [314] --> Loop 249 
* CEs [313] --> Loop 250 
* CEs [312] --> Loop 251 
* CEs [311] --> Loop 252 
* CEs [310] --> Loop 253 
* CEs [328] --> Loop 254 

#### Loops of case_18/13 
* Loop 240: case_18(A,B,C,D,E,F,G,H,I,F,J,K,L) [G>=J,C>=J,K+1>=F,D+1>=F,B>=F+1,J>=1,H>=0,F>=3,L=1,I=1,E=1,A=1] 
* Loop 241: case_18(A,B,C,D,E,F,G,H,I,B,J,K,L) [G>=J,C>=J,K+1>=B,F>=B,D+1>=B,J>=1,H>=0,B>=3,L=1,I=1,E=1,A=1] 
* Loop 242: case_18(A,B,C,D,E,F,G,H,I,B,J,K,L) [G>=J,C>=J,K+1>=B,F>=B,D+1>=B,J>=2,H>=0,B>=2,L=1,I=1,E=1,A=1] 
* Loop 243: case_18(A,B,C,D,E,F,G,H,I,F,J,K,L) [G>=J,C>=J,K+1>=F,D+1>=F,B>=F+1,J>=2,H>=0,F>=2,L=1,I=1,E=1,A=1] 
* Loop 244: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) [B>=F+1,L>=0,H>=0,G>=2,F>=2,D>=0,C>=2,M=1,K=0,J=1,I=1,E=1,A=1] 
* Loop 245: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) [B>=F+1,L>=0,H>=0,G>=1,F>=3,D>=0,C>=1,M=1,K=0,J=1,I=1,E=1,A=1] 
* Loop 246: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) [F>=B,L>=0,H>=0,G>=1,D>=0,C>=1,B>=3,M=1,K=0,J=1,I=1,E=1,A=1] 
* Loop 247: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) [F>=B,L>=0,H>=0,G>=2,D>=0,C>=2,B>=2,M=1,K=0,J=1,I=1,E=1,A=1] 
* Loop 248: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) [L>=1,H>=0,G>=1,D>=1,C>=1,B>=3,M=1,K=1,J=2,I=1,F=2,E=1,A=1] 
* Loop 249: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) [L>=0,H>=0,G>=1,D>=0,C>=1,B>=3,M=1,K=0,J=1,I=1,F=2,E=1,A=1] 
* Loop 250: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) [L>=0,H>=0,D>=0,C>=1,B>=2,M=1,K=0,J=1,I=1,G=0,F=1,E=1,A=1] 
* Loop 251: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) [L>=1,H>=0,G>=1,F>=2,D>=1,C>=1,M=1,K=1,J=2,I=1,E=1,B=2,A=1] 
* Loop 252: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) [L>=0,H>=0,G>=1,F>=2,D>=0,C>=1,M=1,K=0,J=1,I=1,E=1,B=2,A=1] 
* Loop 253: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) [L>=0,H>=0,G>=0,F>=1,D>=0,M=1,K=0,J=1,I=1,E=1,C=0,B=1,A=1] 
* Loop 254: case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) [L>=0,I>=0,H>=0,G>=0,F>=0,E>=0,D>=0,C>=0,B>=0,M=1,K=0,J=1,A=0] 

### Ranking functions of CR case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) 

#### Partial ranking functions of CR case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) 


### Resulting Chains:case_18(A,B,C,D,E,F,G,H,I,J,K,L,M) 
* [254]
* [253]
* [252]
* [251]
* [250]
* [249]
* [248]
* [247]
* [246]
* [245]
* [244]
* [243]
* [242]
* [241]
* [240]


### Merging Chains  case_18/13 into  External patterns of execution 
* [[254]] --> 1 
* [[253]] --> 2 
* [[252]] --> 3 
* [[251]] --> 4 
* [[250]] --> 5 
* [[249]] --> 6 
* [[248]] --> 7 
* [[247]] --> 8 
* [[246]] --> 9 
* [[245]] --> 10 
* [[244]] --> 11 
* [[242]] --> 12 
* [[241]] --> 13 
* [[243]] --> 14 
* [[240]] --> 15 


### Specialization of cost equations plus/12 
* CE 20 is refined into CE [329,330,331,332,333,334,335,336,337,338,339,340,341] 


#### Refined cost equations plus/12 
* CE 329: plus(A,B,C,D,E,F,G,H,I,J,K,L) = 2+ check_sanity(A,B,C,M,E,F,G,N,O):1+ case_18(P,A,B,C,Q,E,F,G,R,S,T,K,U):1
     [K>=0,G>=0,F>=1,E>=2,C>=0,B>=1,A>=2,U=1,T=0,S=1,R=1,Q=1,P=0,O=0,N=1,M=1,L=1,J=0,I=1,H=1,D=1] 
* CE 330: plus(A,B,C,D,E,F,G,H,I,J,K,L) = 2+ check_sanity(M,B,C,N,E,F,G,O,P):2+ case_18(Q,R,B,C,S,E,F,G,T,U,V,K,W):3
     [G+1>=E,K>=0,F>=1,E>=2,C>=1,B>=1,W=1,V=0,U=1,T=1,S=1,R=2,Q=1,P=1,O=1,N=1,M=2,L=1,J=0,I=1,H=1,D=1,A=2] 
* CE 331: plus(A,B,C,D,E,F,G,H,I,J,K,L) = 2+ check_sanity(M,B,C,N,E,F,G,O,P):2+ case_18(Q,R,B,C,S,E,F,G,T,U,V,K,W):4
     [G+1>=E,K>=1,F>=1,E>=2,C>=1,B>=1,W=1,V=1,U=2,T=1,S=1,R=2,Q=1,P=1,O=1,N=1,M=2,L=1,J=1,I=2,H=1,D=1,A=2] 
* CE 332: plus(A,B,C,D,E,F,G,H,I,J,K,L) = 2+ check_sanity(A,B,C,M,N,F,G,O,P):2+ case_18(Q,A,B,C,R,S,F,G,T,U,V,K,W):6
     [C+1>=A,K>=0,G>=1,F>=1,B>=1,A>=3,W=1,V=0,U=1,T=1,S=2,R=1,Q=1,P=1,O=1,N=2,M=1,L=1,J=0,I=1,H=1,E=2,D=1] 
* CE 333: plus(A,B,C,D,E,F,G,H,I,J,K,L) = 2+ check_sanity(A,B,C,M,N,F,G,O,P):2+ case_18(Q,A,B,C,R,S,F,G,T,U,V,K,W):7
     [C+1>=A,K>=1,G>=1,F>=1,B>=1,A>=3,W=1,V=1,U=2,T=1,S=2,R=1,Q=1,P=1,O=1,N=2,M=1,L=1,J=1,I=2,H=1,E=2,D=1] 
* CE 334: plus(A,B,C,D,E,F,G,H,I,J,K,L) = 2+ check_sanity(A,B,C,M,E,F,G,N,O):2+ case_18(P,A,B,C,Q,E,F,G,R,S,T,K,U):8
     [G+1>=E,E>=A,C+1>=A,K>=0,F>=2,B>=2,A>=2,U=1,T=0,S=1,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,J=0,I=1,H=1,D=1] 
* CE 335: plus(A,B,C,D,E,F,G,H,I,J,K,L) = 2+ check_sanity(A,B,C,M,E,F,G,N,O):2+ case_18(P,A,B,C,Q,E,F,G,R,S,T,K,U):9
     [G+1>=E,E>=A,C+1>=A,K>=0,F>=1,B>=1,A>=3,U=1,T=0,S=1,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,J=0,I=1,H=1,D=1] 
* CE 336: plus(A,B,C,D,E,F,G,H,I,J,K,L) = 2+ check_sanity(A,B,C,M,E,F,G,N,O):2+ case_18(P,A,B,C,Q,E,F,G,R,S,T,K,U):10
     [G+1>=E,A>=E+1,C+1>=A,K>=0,F>=1,E>=3,B>=1,U=1,T=0,S=1,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,J=0,I=1,H=1,D=1] 
* CE 337: plus(A,B,C,D,E,F,G,H,I,J,K,L) = 2+ check_sanity(A,B,C,M,E,F,G,N,O):2+ case_18(P,A,B,C,Q,E,F,G,R,S,T,K,U):11
     [G+1>=E,A>=E+1,C+1>=A,K>=0,F>=2,E>=2,B>=2,U=1,T=0,S=1,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,J=0,I=1,H=1,D=1] 
* CE 338: plus(A,B,C,D,E,F,G,H,A,I,J,K) = 2+ check_sanity(A,B,C,L,E,F,G,M,N):2+ case_18(O,A,B,C,P,E,F,G,Q,A,I,J,R):12
     [F>=I,B>=I,J+1>=A,E>=A,C+1>=A,G+1>=E,I>=2,A>=2,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,K=1,H=1,D=1] 
* CE 339: plus(A,B,C,D,E,F,G,H,A,I,J,K) = 2+ check_sanity(A,B,C,L,E,F,G,M,N):2+ case_18(O,A,B,C,P,E,F,G,Q,A,I,J,R):13
     [F>=I,B>=I,J+1>=A,E>=A,C+1>=A,G+1>=E,I>=1,A>=3,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,K=1,H=1,D=1] 
* CE 340: plus(A,B,C,D,E,F,G,H,E,I,J,K) = 2+ check_sanity(A,B,C,L,E,F,G,M,N):2+ case_18(O,A,B,C,P,E,F,G,Q,E,I,J,R):14
     [F>=I,B>=I,J+1>=E,G+1>=E,A>=E+1,C+1>=A,I>=2,E>=2,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,K=1,H=1,D=1] 
* CE 341: plus(A,B,C,D,E,F,G,H,E,I,J,K) = 2+ check_sanity(A,B,C,L,E,F,G,M,N):2+ case_18(O,A,B,C,P,E,F,G,Q,E,I,J,R):15
     [F>=I,B>=I,J+1>=E,G+1>=E,A>=E+1,C+1>=A,I>=1,E>=3,R=1,Q=1,P=1,O=1,N=1,M=1,L=1,K=1,H=1,D=1] 

### Cost equations --> "Loop" of plus/12 
* CEs [341] --> Loop 255 
* CEs [340] --> Loop 256 
* CEs [339] --> Loop 257 
* CEs [338] --> Loop 258 
* CEs [333] --> Loop 259 
* CEs [332] --> Loop 260 
* CEs [331] --> Loop 261 
* CEs [329,330,334,335,336,337] --> Loop 262 

#### Loops of plus/12 
* Loop 255: plus(A,B,C,D,E,F,G,H,E,I,J,K) [F>=I,B>=I,J+1>=E,G+1>=E,A>=E+1,C+1>=A,I>=1,E>=3,K=1,H=1,D=1] 
* Loop 256: plus(A,B,C,D,E,F,G,H,E,I,J,K) [F>=I,B>=I,J+1>=E,G+1>=E,A>=E+1,C+1>=A,I>=2,E>=2,K=1,H=1,D=1] 
* Loop 257: plus(A,B,C,D,E,F,G,H,A,I,J,K) [F>=I,B>=I,G+1>=E,J+1>=A,E>=A,C+1>=A,I>=1,A>=3,K=1,H=1,D=1] 
* Loop 258: plus(A,B,C,D,E,F,G,H,A,I,J,K) [F>=I,B>=I,G+1>=E,J+1>=A,E>=A,C+1>=A,I>=2,A>=2,K=1,H=1,D=1] 
* Loop 259: plus(A,B,C,D,E,F,G,H,I,J,K,L) [C+1>=A,K>=1,G>=1,F>=1,B>=1,A>=3,L=1,J=1,I=2,H=1,E=2,D=1] 
* Loop 260: plus(A,B,C,D,E,F,G,H,I,J,K,L) [C+1>=A,K>=0,G>=1,F>=1,B>=1,A>=3,L=1,J=0,I=1,H=1,E=2,D=1] 
* Loop 261: plus(A,B,C,D,E,F,G,H,I,J,K,L) [G+1>=E,K>=1,F>=1,E>=2,C>=1,B>=1,L=1,J=1,I=2,H=1,D=1,A=2] 
* Loop 262: plus(A,B,C,D,E,F,G,H,I,J,K,L) [K>=0,G>=0,F>=1,E>=2,C>=0,B>=1,A>=2,L=1,J=0,I=1,H=1,D=1] 

### Ranking functions of CR plus(A,B,C,D,E,F,G,H,I,J,K,L) 

#### Partial ranking functions of CR plus(A,B,C,D,E,F,G,H,I,J,K,L) 


### Resulting Chains:plus(A,B,C,D,E,F,G,H,I,J,K,L) 
* [262]
* [261]
* [260]
* [259]
* [258]
* [257]
* [256]
* [255]


### Merging Chains  plus/12 into  External patterns of execution 
* [[261]] --> 1 
* [[260],[262]] --> 2 
* [[259]] --> 3 
* [[258]] --> 4 
* [[257]] --> 5 
* [[256]] --> 6 
* [[255]] --> 7 


### Specialization of cost equations evaluate/8 
* CE 62 is refined into CE [342,343,344,345,346] 
* CE 59 is refined into CE [347,348,349,350] 
* CE 60 is refined into CE [351] 
* CE 61 is refined into CE [352,353,354,355,356,357,358] 


#### Refined cost equations evaluate/8 
* CE 342: evaluate(A,B,C,D,E,F,G,H) = 3+ construct_matrix(I,J,K,L,M,N,O,G,P):1
     [G>=M,C>=M,G>=J,C>=J,M>=0,J>=0,P=1,O=0,N=1,L=0,K=1,I=0,H=1,F=0,E=1,D=1,B=0,A=1] 
* CE 343: evaluate(A,B,C,D,A,B,E,F) = 3+ construct_matrix(G,H,A,B,I,A,B,E,J):2
     [E>=I,C>=I,E+1>=A,C+1>=A,B>=1,I>=0,A>=2,A=G+1,J=1,H=0,F=1,D=1] 
* CE 344: evaluate(A,B,C,D,E,F,G,H) = 3+ construct_matrix(I,J,A,B,K,L,M,G,N):3
     [C>=K,C+1>=A,B>=J+2,C>=J,G>=0,K>=0,A>=2,J>=0,A=I+1,N=1,M=0,L=1,H=1,F=0,E=1,D=1] 
* CE 345: evaluate(A,B,C,D,E,F,G,H) = 3+ construct_matrix(I,J,A,B,K,L,M,G,N):4
     [C>=K,C>=J,A>=I+2,C>=I,G>=0,K>=0,B>=1,J>=0,I>=0,N=1,M=0,L=1,H=1,F=0,E=1,D=1] 
* CE 346: evaluate(A,B,C,D,A,B,E,F) = 3+ construct_matrix(G,H,A,B,I,A,B,E,J):5
     [E>=I,C>=I,E+1>=A,C+1>=A,E>=H,B>=H+1,C>=H,I>=0,A>=2,H>=1,A=G+1,J=1,F=1,D=1] 
* CE 347: evaluate(A,B,C,D,E,F,G,H) = 8+ evaluate(I,J,K,L,M,N,O,P)+ evaluate(Q,R,S,T,U,V,W,X)+ mult(Y,N,O,Z,U,V,W,A1,B1,C1,G,D1):1
     [C>=S,B>=R,A>=Q,C>=K,B>=J,A>=I,W+1>=U,T>=1,L>=1,G>=1,V>=1,U>=2,O>=1,N>=1,C>=0,B>=0,A>=0,L+T+1=D,X=1,P=1,M=2,D1=1,C1=1,B1=2,A1=1,Z=1,Y=2,H=1,F=1,E=2] 
* CE 348: evaluate(A,B,C,D,E,F,G,H) = 8+ evaluate(I,J,K,L,M,N,O,P)+ evaluate(Q,R,S,T,U,V,W,X)+ mult(M,N,O,Y,U,V,W,Z,A1,B1,G,C1):2
     [C>=S,B>=R,A>=Q,C>=K,B>=J,A>=I,T>=1,L>=1,G>=0,W>=0,V>=1,U>=2,O>=0,N>=1,M>=2,C>=0,B>=0,A>=0,L+T+1=D,X=1,P=1,C1=1,B1=0,A1=1,Z=1,Y=1,H=1,F=0,E=1] 
* CE 349: evaluate(A,B,C,D,E,F,G,H) = 8+ evaluate(I,J,K,L,E,M,N,O)+ evaluate(P,Q,R,S,T,U,V,W)+ mult(E,M,N,X,T,U,V,Y,E,F,G,Z):3
     [C>=R,B>=Q,A>=P,C>=K,B>=J,A>=I,U>=F,G+1>=E,N+1>=E,V+1>=T,S>=1,L>=1,F>=1,E>=2,T>=2,M>=2,C>=0,B>=0,A>=0,L+S+1=D,W=1,O=1,Z=1,Y=1,X=1,H=1] 
* CE 350: evaluate(A,B,C,D,E,F,G,H) = 8+ evaluate(I,J,K,L,E,M,N,O)+ evaluate(P,Q,R,S,T,U,V,W)+ mult(E,M,N,X,T,U,V,Y,E,F,G,Z):4
     [C>=R,B>=Q,A>=P,C>=K,B>=J,A>=I,U+1>=F,G+1>=E,N+1>=E,V+1>=T,S>=1,L>=1,F>=1,E>=3,U>=1,T>=2,M>=1,C>=0,B>=0,A>=0,L+S+1=D,W=1,O=1,Z=1,Y=1,X=1,H=1] 
* CE 351: evaluate(A,B,C,D,E,F,G,H) = 7+ evaluate(I,J,K,L,M,N,O,P)+ evaluate(Q,R,S,T,U,V,W,X)+ minus(M,N,O,Y,U,V,W,Z,A1,B1,G,C1):1
     [C>=S,B>=R,A>=Q,C>=K,B>=J,A>=I,T>=1,L>=1,G>=0,W>=0,V>=1,U>=2,O>=0,N>=1,M>=2,C>=0,B>=0,A>=0,L+T+1=D,X=1,P=1,C1=1,B1=0,A1=1,Z=1,Y=1,H=1,F=0,E=1] 
* CE 352: evaluate(A,B,C,D,E,F,G,H) = 6+ evaluate(I,J,K,L,M,N,O,P)+ evaluate(Q,R,S,T,U,V,W,X)+ plus(Y,N,O,Z,U,V,W,A1,B1,C1,G,D1):1
     [C>=S,B>=R,A>=Q,C>=K,B>=J,A>=I,W+1>=U,T>=1,L>=1,G>=1,V>=1,U>=2,O>=1,N>=1,C>=0,B>=0,A>=0,L+T+1=D,X=1,P=1,M=2,D1=1,C1=1,B1=2,A1=1,Z=1,Y=2,H=1,F=1,E=2] 
* CE 353: evaluate(A,B,C,D,E,F,G,H) = 6+ evaluate(I,J,K,L,M,N,O,P)+ evaluate(Q,R,S,T,U,V,W,X)+ plus(M,N,O,Y,U,V,W,Z,A1,B1,G,C1):2
     [C>=S,B>=R,A>=Q,C>=K,B>=J,A>=I,T>=1,L>=1,G>=0,W>=0,V>=1,U>=2,O>=0,N>=1,M>=2,C>=0,B>=0,A>=0,L+T+1=D,X=1,P=1,C1=1,B1=0,A1=1,Z=1,Y=1,H=1,F=0,E=1] 
* CE 354: evaluate(A,B,C,D,E,F,G,H) = 6+ evaluate(I,J,K,L,M,N,O,P)+ evaluate(Q,R,S,T,U,V,W,X)+ plus(M,N,O,Y,Z,V,W,A1,B1,C1,G,D1):3
     [C>=S,B>=R,A>=Q,C>=K,B>=J,A>=I,O+1>=M,T>=1,L>=1,G>=1,W>=1,V>=1,N>=1,M>=3,C>=0,B>=0,A>=0,L+T+1=D,X=1,U=2,P=1,D1=1,C1=1,B1=2,A1=1,Z=2,Y=1,H=1,F=1,E=2] 
* CE 355: evaluate(A,B,C,D,E,F,G,H) = 6+ evaluate(I,J,K,L,E,M,N,O)+ evaluate(P,Q,R,S,T,U,V,W)+ plus(E,M,N,X,T,U,V,Y,E,F,G,Z):4
     [C>=R,B>=Q,A>=P,C>=K,B>=J,A>=I,U>=F,M>=F,G+1>=E,T>=E,N+1>=E,V+1>=T,S>=1,L>=1,F>=2,E>=2,C>=0,B>=0,A>=0,L+S+1=D,W=1,O=1,Z=1,Y=1,X=1,H=1] 
* CE 356: evaluate(A,B,C,D,E,F,G,H) = 6+ evaluate(I,J,K,L,E,M,N,O)+ evaluate(P,Q,R,S,T,U,V,W)+ plus(E,M,N,X,T,U,V,Y,E,F,G,Z):5
     [C>=R,B>=Q,A>=P,C>=K,B>=J,A>=I,U>=F,M>=F,G+1>=E,T>=E,N+1>=E,V+1>=T,S>=1,L>=1,F>=1,E>=3,C>=0,B>=0,A>=0,L+S+1=D,W=1,O=1,Z=1,Y=1,X=1,H=1] 
* CE 357: evaluate(A,B,C,D,E,F,G,H) = 6+ evaluate(I,J,K,L,M,N,O,P)+ evaluate(Q,R,S,T,E,U,V,W)+ plus(M,N,O,X,E,U,V,Y,E,F,G,Z):6
     [C>=S,B>=R,A>=Q,C>=K,B>=J,A>=I,U>=F,N>=F,G+1>=E,V+1>=E,M>=E+1,O+1>=M,T>=1,L>=1,F>=2,E>=2,C>=0,B>=0,A>=0,L+T+1=D,W=1,P=1,Z=1,Y=1,X=1,H=1] 
* CE 358: evaluate(A,B,C,D,E,F,G,H) = 6+ evaluate(I,J,K,L,M,N,O,P)+ evaluate(Q,R,S,T,E,U,V,W)+ plus(M,N,O,X,E,U,V,Y,E,F,G,Z):7
     [C>=S,B>=R,A>=Q,C>=K,B>=J,A>=I,U>=F,N>=F,G+1>=E,V+1>=E,M>=E+1,O+1>=M,T>=1,L>=1,F>=1,E>=3,C>=0,B>=0,A>=0,L+T+1=D,W=1,P=1,Z=1,Y=1,X=1,H=1] 

### Cost equations --> "Loop" of evaluate/8 
* CEs [358] --> Loop 263 
* CEs [357] --> Loop 264 
* CEs [350,356] --> Loop 265 
* CEs [349,355] --> Loop 266 
* CEs [354] --> Loop 267 
* CEs [347,352] --> Loop 268 
* CEs [348,351,353] --> Loop 269 
* CEs [343,346] --> Loop 270 
* CEs [344,345] --> Loop 271 
* CEs [342] --> Loop 272 

#### Loops of evaluate/8 
* Loop 263: evaluate(A,B,C,D,E,F,G,H)->  evaluate(A',B',C',D',E',F',G',H')  evaluate(A'2,B'2,C'2,D'2,E,E'2,F'2,G'2)
                  [C>=C'2,B>=B'2,A>=A'2,G'+1>=E',D>=D'+2,C>=C',B>=B',A>=A',E'2>=F,F'>=F,F'2+1>=E,E'>=E+1,G+1>=E,D'>=1,F>=1,E>=3,C>=0,B>=0,A>=0,D'+D'2+1=D,G'2=1,H'=1,H=1] 
* Loop 264: evaluate(A,B,C,D,E,F,G,H)->  evaluate(A',B',C',D',E',F',G',H')  evaluate(A'2,B'2,C'2,D'2,E,E'2,F'2,G'2)
                  [C>=C'2,B>=B'2,A>=A'2,G'+1>=E',D>=D'+2,C>=C',B>=B',A>=A',E'2>=F,F'>=F,F'2+1>=E,E'>=E+1,G+1>=E,D'>=1,F>=2,E>=2,C>=0,B>=0,A>=0,D'+D'2+1=D,G'2=1,H'=1,H=1] 
* Loop 265: evaluate(A,B,C,D,E,F,G,H)->  evaluate(A',B',C',D',E,E',F',G')  evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)
                  [G'2+1>=E'2,C>=C'2,B>=B'2,A>=A'2,D>=D'+2,C>=C',B>=B',A>=A',F'2+1>=F,F'+1>=E,G+1>=E,F'2>=1,E'2>=2,E'>=1,D'>=1,F>=1,E>=3,C>=0,B>=0,A>=0,D'+D'2+1=D,H'2=1,G'=1,H=1] 
* Loop 266: evaluate(A,B,C,D,E,F,G,H)->  evaluate(A',B',C',D',E,E',F',G')  evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)
                  [G'2+1>=E'2,C>=C'2,B>=B'2,A>=A'2,D>=D'+2,C>=C',B>=B',A>=A',F'2>=F,F'+1>=E,G+1>=E,E'2>=2,E'>=2,D'>=1,F>=1,E>=2,C>=0,B>=0,A>=0,D'+D'2+1=D,H'2=1,G'=1,H=1] 
* Loop 267: evaluate(A,B,C,D,E,F,G,H)->  evaluate(A',B',C',D',E',F',G',H')  evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)
                  [C>=C'2,B>=B'2,A>=A'2,G'+1>=E',D>=D'+2,C>=C',B>=B',A>=A',G'2>=1,F'2>=1,F'>=1,E'>=3,D'>=1,G>=1,C>=0,B>=0,A>=0,D'+D'2+1=D,H'2=1,E'2=2,H'=1,H=1,F=1,E=2] 
* Loop 268: evaluate(A,B,C,D,E,F,G,H)->  evaluate(A',B',C',D',E',F',G',H')  evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)
                  [G'2+1>=E'2,C>=C'2,B>=B'2,A>=A'2,D>=D'+2,C>=C',B>=B',A>=A',F'2>=1,E'2>=2,G'>=1,F'>=1,D'>=1,G>=1,C>=0,B>=0,A>=0,D'+D'2+1=D,H'2=1,H'=1,E'=2,H=1,F=1,E=2] 
* Loop 269: evaluate(A,B,C,D,E,F,G,H)->  evaluate(A',B',C',D',E',F',G',H')  evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)
                  [C>=C'2,B>=B'2,A>=A'2,D>=D'+2,C>=C',B>=B',A>=A',G'2>=0,F'2>=1,E'2>=2,G'>=0,F'>=1,E'>=2,D'>=1,G>=0,C>=0,B>=0,A>=0,D'+D'2+1=D,H'2=1,H'=1,H=1,F=0,E=1] 
* Loop 270: evaluate(A,B,C,D,A,B,E,F) [E+1>=A,C+1>=A,B>=1,A>=2,F=1,D=1] 
* Loop 271: evaluate(A,B,C,D,E,F,G,H) [G>=0,C>=0,B>=1,A>=2,H=1,F=0,E=1,D=1] 
* Loop 272: evaluate(A,B,C,D,E,F,G,H) [G>=0,C>=0,H=1,F=0,E=1,D=1,B=0,A=1] 

### Ranking functions of CR evaluate(A,B,C,D,E,F,G,H) 
* RF of phase [263,264,265,266,267,268]: [D/2-1]

#### Partial ranking functions of CR evaluate(A,B,C,D,E,F,G,H) 
* Partial RF of phase [263,264,265,266,267,268]:
  - RF of loop [263:1,263:2,264:1,264:2,265:1,265:2,266:1,266:2,267:1,267:2,268:1,268:2]:
    D/2-1

Discarded unfeasible chain [multiple([263,264,265,266,267,268],[[],[270]])]...(Non-terminating chain proved terminating)
Remaining chain: [multiple([263,264,265,266,267,268],[[270]])]
Discarded unfeasible chain [multiple(269,[[multiple([263,264,265,266,267,268],[[],[270]])],[270]])](Non-terminating chain proved terminating)
Remaining chain: [multiple(269,[[multiple([263,264,265,266,267,268],[[270]])],[270]])]

### Resulting Chains:evaluate(A,B,C,D,E,F,G,H) 
* [272]
* [271]
* [270]
* [multiple([263,264,265,266,267,268],[[270]])]
* [multiple(269,[[multiple([263,264,265,266,267,268],[[270]])],[270]])]


### Merging Chains  evaluate/8 into  External patterns of execution 
* [[272]] --> 1 
* [[271]] --> 2 
* [[270]] --> 3 
* [[multiple(269,[[multiple([263,264,265,266,267,268],[[270]])],[270]])]] --> 4 
* [[multiple([263,264,265,266,267,268],[[270]])]] --> 5 


### Specialization of cost equations get_elemL/6 
* CE 10 is refined into CE [359] 
* CE 9 is refined into CE [360] 


#### Refined cost equations get_elemL/6 
* CE 359: get_elemL(A,B,C,D,E,F) = 5
     [C>=F,B>=E,F>=0,E>=1,A>=2,D=0] 
* CE 360: get_elemL(A,B,C,D,E,F) = 8+ get_elemL(G,H,I,J,E,F)
     [C>=I,B>=H,J>=0,I>=0,H>=0,G>=1,F>=0,E>=0,B>=1,J+1=D,G+1=A] 

### Cost equations --> "Loop" of get_elemL/6 
* CEs [360] --> Loop 273 
* CEs [359] --> Loop 274 

#### Loops of get_elemL/6 
* Loop 273: get_elemL(A,B,C,D,E,F)->  get_elemL(A',B',C',D',E,F)
                  [C>=C',B>=B',D'>=0,C'>=0,B'>=0,A'>=1,F>=0,E>=0,B>=1,D'+1=D,A'+1=A] 
* Loop 274: get_elemL(A,B,C,D,E,F) [C>=F,B>=E,F>=0,E>=1,A>=2,D=0] 

### Ranking functions of CR get_elemL(A,B,C,D,E,F) 
* RF of phase [273]: [A-1,D]

#### Partial ranking functions of CR get_elemL(A,B,C,D,E,F) 
* Partial RF of phase [273]:
  - RF of loop [273:1]:
    A-1
    D

Discarded unfeasible chain [[273]]...(Non-terminating chain proved terminating)

### Resulting Chains:get_elemL(A,B,C,D,E,F) 
* [[273],274]
* [274]


### Merging Chains  get_elemL/6 into  External patterns of execution 
* [[274]] --> 1 
* [[274,[273]]] --> 2 


### Specialization of cost equations get_elem/4 
* CE 94 is refined into CE [361] 
* CE 93 is refined into CE [362] 


#### Refined cost equations get_elem/4 
* CE 361: get_elem(A,B,C,D) = 5
     [B>=D,D>=0,A>=2,C=0] 
* CE 362: get_elem(A,B,C,D) = 8+ get_elem(E,F,G,D)
     [B>=F,G>=0,F>=0,E>=1,D>=0,G+1=C,E+1=A] 

### Cost equations --> "Loop" of get_elem/4 
* CEs [362] --> Loop 275 
* CEs [361] --> Loop 276 

#### Loops of get_elem/4 
* Loop 275: get_elem(A,B,C,D)->  get_elem(A',B',C',D)
                  [B>=B',C'>=0,B'>=0,A'>=1,D>=0,C'+1=C,A'+1=A] 
* Loop 276: get_elem(A,B,C,D) [B>=D,D>=0,A>=2,C=0] 

### Ranking functions of CR get_elem(A,B,C,D) 
* RF of phase [275]: [A-1,C]

#### Partial ranking functions of CR get_elem(A,B,C,D) 
* Partial RF of phase [275]:
  - RF of loop [275:1]:
    A-1
    C

Discarded unfeasible chain [[275]]...(Non-terminating chain proved terminating)

### Resulting Chains:get_elem(A,B,C,D) 
* [[275],276]
* [276]


### Merging Chains  get_elem/4 into  External patterns of execution 
* [[276]] --> 1 
* [[276,[275]]] --> 2 


### Specialization of cost equations case_10/7 
* CE 76 is refined into CE [363,364,365,366] 


#### Refined cost equations case_10/7 
* CE 363: case_10(A,B,C,D,E,F,G) = 3+ get_elemL(A,B,H,I,J,K):1+ get_elem(J,K,L,G):1
     [K>=G,H>=K,B>=J,C>=H,G>=0,J>=2,A>=2,L=0,I=0,F=0,E=0,D=1] 
* CE 364: case_10(A,B,C,D,E,F,G) = 3+ get_elemL(A,B,H,I,J,K):1+ get_elem(J,K,F,G):2
     [K>=G,J>=F+2,H>=K,B>=J,C>=H,G>=0,F>=1,A>=2,I=0,E=0,D=1] 
* CE 365: case_10(A,B,C,D,E,F,G) = 3+ get_elemL(A,B,H,E,I,J):2+ get_elem(I,J,K,G):1
     [J>=G,H>=J,B>=I,A>=E+2,C>=H,G>=0,I>=2,E>=1,K=0,F=0,D=1] 
* CE 366: case_10(A,B,C,D,E,F,G) = 3+ get_elemL(A,B,H,E,I,J):2+ get_elem(I,J,F,G):2
     [J>=G,I>=F+2,H>=J,B>=I,A>=E+2,C>=H,G>=0,F>=1,E>=1,D=1] 

### Cost equations --> "Loop" of case_10/7 
* CEs [366] --> Loop 277 
* CEs [365] --> Loop 278 
* CEs [364] --> Loop 279 
* CEs [363] --> Loop 280 

#### Loops of case_10/7 
* Loop 277: case_10(A,B,C,D,E,F,G) [C>=G,B>=F+2,A>=E+2,G>=0,F>=1,E>=1,D=1] 
* Loop 278: case_10(A,B,C,D,E,F,G) [C>=G,A>=E+2,G>=0,E>=1,B>=2,F=0,D=1] 
* Loop 279: case_10(A,B,C,D,E,F,G) [C>=G,B>=F+2,G>=0,F>=1,A>=2,E=0,D=1] 
* Loop 280: case_10(A,B,C,D,E,F,G) [C>=G,G>=0,B>=2,A>=2,F=0,E=0,D=1] 

### Ranking functions of CR case_10(A,B,C,D,E,F,G) 

#### Partial ranking functions of CR case_10(A,B,C,D,E,F,G) 


### Resulting Chains:case_10(A,B,C,D,E,F,G) 
* [280]
* [279]
* [278]
* [277]


### Merging Chains  case_10/7 into  External patterns of execution 
* [[280]] --> 1 
* [[279]] --> 2 
* [[278]] --> 3 
* [[277]] --> 4 


### Specialization of cost equations get_elemMat/7 
* CE 11 is refined into CE [367,368,369,370] 


#### Refined cost equations get_elemMat/7 
* CE 367: get_elemMat(A,B,C,D,E,F,G) = 1+ case_10(A,B,C,H,I,J,G):1
     [C>=G,G>=0,B>=2,A>=2,J=0,I=0,H=1,F=0,E=0,D=1] 
* CE 368: get_elemMat(A,B,C,D,E,F,G) = 1+ case_10(A,B,C,H,I,F,G):2
     [C>=G,B>=F+2,G>=0,F>=1,A>=2,I=0,H=1,E=0,D=1] 
* CE 369: get_elemMat(A,B,C,D,E,F,G) = 1+ case_10(A,B,C,H,E,I,G):3
     [C>=G,A>=E+2,G>=0,E>=1,B>=2,I=0,H=1,F=0,D=1] 
* CE 370: get_elemMat(A,B,C,D,E,F,G) = 1+ case_10(A,B,C,H,E,F,G):4
     [C>=G,B>=F+2,A>=E+2,G>=0,F>=1,E>=1,H=1,D=1] 

### Cost equations --> "Loop" of get_elemMat/7 
* CEs [370] --> Loop 281 
* CEs [369] --> Loop 282 
* CEs [368] --> Loop 283 
* CEs [367] --> Loop 284 

#### Loops of get_elemMat/7 
* Loop 281: get_elemMat(A,B,C,D,E,F,G) [C>=G,B>=F+2,A>=E+2,G>=0,F>=1,E>=1,D=1] 
* Loop 282: get_elemMat(A,B,C,D,E,F,G) [C>=G,A>=E+2,G>=0,E>=1,B>=2,F=0,D=1] 
* Loop 283: get_elemMat(A,B,C,D,E,F,G) [C>=G,B>=F+2,G>=0,F>=1,A>=2,E=0,D=1] 
* Loop 284: get_elemMat(A,B,C,D,E,F,G) [C>=G,G>=0,B>=2,A>=2,F=0,E=0,D=1] 

### Ranking functions of CR get_elemMat(A,B,C,D,E,F,G) 

#### Partial ranking functions of CR get_elemMat(A,B,C,D,E,F,G) 


### Resulting Chains:get_elemMat(A,B,C,D,E,F,G) 
* [284]
* [283]
* [282]
* [281]


### Merging Chains  get_elemMat/7 into  External patterns of execution 
* [[284]] --> 1 
* [[283]] --> 2 
* [[282]] --> 3 
* [[281]] --> 4 


### Specialization of cost equations prod/5 
* CE 44 is refined into CE [371] 
* CE 43 is refined into CE [372] 
* CE 42 is refined into CE [373] 


#### Refined cost equations prod/5 
* CE 371: prod(A,B,C,D,E) = 9+ prod(F,G,H,I,J)
     [D>=I,B>=G,H>=1,G>=0,F>=1,E>=0,D>=0,H+1=C,F+1=A] 
* CE 372: prod(A,B,C,D,E) = 6
     [D>=0,B>=0,A>=2,E=0,C=1] 
* CE 373: prod(A,B,C,D,E) = 3
     [D>=0,C>=0,B>=0,E=0,A=1] 

### Cost equations --> "Loop" of prod/5 
* CEs [372] --> Loop 285 
* CEs [373] --> Loop 286 
* CEs [371] --> Loop 287 

#### Loops of prod/5 
* Loop 285: prod(A,B,C,D,E) [D>=0,B>=0,A>=2,E=0,C=1] 
* Loop 286: prod(A,B,C,D,E) [D>=0,C>=0,B>=0,E=0,A=1] 
* Loop 287: prod(A,B,C,D,E)->  prod(A',B',C',D',E')
                  [D>=D',B>=B',C'>=1,B'>=0,A'>=1,E>=0,D>=0,C'+1=C,A'+1=A] 

### Ranking functions of CR prod(A,B,C,D,E) 
* RF of phase [287]: [A-1,C-1]

#### Partial ranking functions of CR prod(A,B,C,D,E) 
* Partial RF of phase [287]:
  - RF of loop [287:1]:
    A-1
    C-1

Discarded unfeasible chain [[287]]...(Non-terminating chain proved terminating)

### Resulting Chains:prod(A,B,C,D,E) 
* [[287],286]
* [[287],285]
* [286]
* [285]


### Merging Chains  prod/5 into  External patterns of execution 
* [[286]] --> 1 
* [[285]] --> 2 
* [[286,[287]]] --> 3 
* [[285,[287]]] --> 4 


### Specialization of cost equations prod_mat/7 
* CE 46 is refined into CE [374] 
* CE 45 is refined into CE [375,376,377,378] 


#### Refined cost equations prod_mat/7 
* CE 374: prod_mat(A,B,C,D,E,F,G) = 3
     [G>=0,E>=0,B>=0,A>=0,F=1,D=0,C=1] 
* CE 375: prod_mat(A,B,C,D,E,F,G) = 6+ prod(H,B,I,J,K):1+ prod_mat(L,B,M,N,O,P,Q)
     [G>=Q,E>=O,D>=N,E>=J,D>=I,P>=1,M>=1,J>=0,I>=1,B>=0,G>=0,P+1=F,M+1=C,L=1,K=0,H=1,A=1] 
* CE 376: prod_mat(A,B,C,D,E,F,G) = 6+ prod(A,B,H,I,J):2+ prod_mat(A,B,K,L,M,N,O)
     [G>=O,E>=M,D>=L,E>=I,N>=1,K>=1,I>=0,B>=0,A>=2,G>=0,D>=1,N+1=F,K+1=C,J=0,H=1] 
* CE 377: prod_mat(A,B,C,D,E,F,G) = 6+ prod(A,B,H,I,J):3+ prod_mat(A,B,K,L,M,N,O)
     [G>=O,E>=M,D>=L,G>=J,E>=I,D>=H,H>=A,N>=1,K>=1,J>=0,I>=0,B>=0,A>=2,N+1=F,K+1=C] 
* CE 378: prod_mat(A,B,C,D,E,F,G) = 6+ prod(A,B,H,I,J):4+ prod_mat(A,B,K,L,M,N,O)
     [G>=O,E>=M,D>=L,G>=J,E>=I,A>=H+1,D>=H,N>=1,K>=1,J>=0,I>=0,H>=2,B>=0,N+1=F,K+1=C] 

### Cost equations --> "Loop" of prod_mat/7 
* CEs [376,377,378] --> Loop 288 
* CEs [375] --> Loop 289 
* CEs [374] --> Loop 290 

#### Loops of prod_mat/7 
* Loop 288: prod_mat(A,B,C,D,E,F,G)->  prod_mat(A,B,A',B',C',D',E')
                  [G>=E',E>=C',D>=B',G>=0,F>=2,E>=0,D>=1,C>=2,B>=0,A>=2,F=D'+1,C=A'+1] 
* Loop 289: prod_mat(A,B,C,D,E,F,G)->  prod_mat(A',B,B',C',D',E',F')
                  [G>=F',E>=D',D>=C',G>=0,F>=2,E>=0,D>=1,C>=2,B>=0,F=E'+1,C=B'+1,A'=1,A=1] 
* Loop 290: prod_mat(A,B,C,D,E,F,G) [G>=0,E>=0,B>=0,A>=0,F=1,D=0,C=1] 

### Ranking functions of CR prod_mat(A,B,C,D,E,F,G) 
* RF of phase [288]: [C-1]
* RF of phase [289]: [C-1]

#### Partial ranking functions of CR prod_mat(A,B,C,D,E,F,G) 
* Partial RF of phase [288]:
  - RF of loop [288:1]:
    C-1
* Partial RF of phase [289]:
  - RF of loop [289:1]:
    C-1

Discarded unfeasible chain [[289]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [[288]](Non-terminating chain proved terminating)

### Resulting Chains:prod_mat(A,B,C,D,E,F,G) 
* [[289],290]
* [[288],290]
* [290]


### Merging Chains  prod_mat/7 into  External patterns of execution 
* [[290,[289]]] --> 1 
* [[290]] --> 2 
* [[290,[288]]] --> 3 


### Specialization of cost equations transpose_helper/9 
* CE 28 is refined into CE [379] 
* CE 27 is refined into CE [380,381,382,383,384,385,386,387] 


#### Refined cost equations transpose_helper/9 
* CE 379: transpose_helper(A,B,C,D,E,F,D,E,F) = 2
     [F>=0,E>=0,D>=0,C>=0,B=0,A=1] 
* CE 380: transpose_helper(A,B,C,D,E,F,G,H,I) = 5+ append_row(J,K,F,L,M,N,O,P):1+ transpose_helper(Q,R,S,T,U,P,G,H,I)
     [C>=S,B>=R,C>=M,Q>=1,P>=0,M>=0,F>=0,I>=0,H>=0,G>=0,B>=2,Q+1=A,U=2,T=2,O=2,N=2,L=2,K=0,J=1,E=0,D=1] 
* CE 381: transpose_helper(A,B,C,D,E,F,G,H,I) = 5+ append_row(J,K,F,L,M,L,N,O):2+ transpose_helper(P,Q,R,L,S,O,G,H,I)
     [C>=R,B>=Q,B>=L,C>=M,P>=1,O>=0,L>=3,M>=0,F>=0,I>=0,H>=0,G>=0,P+1=A,S=2,N=2,K=0,J=1,E=0,D=1] 
* CE 382: transpose_helper(A,B,C,D,E,F,G,H,I) = 5+ append_row(D,E,F,J,K,D,E,F):3+ transpose_helper(L,M,N,D,E,F,G,H,I)
     [C>=N,B>=M,C>=K,L>=1,F>=0,E>=0,D>=0,K>=0,I>=0,H>=0,G>=0,B>=1,L+1=A,J=1] 
* CE 383: transpose_helper(A,B,C,D,E,F,G,H,I) = 5+ append_row(D,E,F,J,K,D,L,M):4+ transpose_helper(N,O,P,D,Q,M,G,H,I)
     [C>=P,B>=O,C>=K,N>=1,M>=0,D>=2,K>=0,F>=0,E>=1,I>=0,H>=0,G>=0,B>=2,N+1=A,Q=2,L=2,J=2] 
* CE 384: transpose_helper(A,B,C,D,E,F,G,H,I) = 5+ append_row(J,E,F,K,L,K,M,N):5+ transpose_helper(O,P,Q,K,M,N,G,H,I)
     [C>=Q,B>=P,E+1>=M,C>=L,B>=K,O>=1,N>=0,M>=2,L>=0,K>=3,F>=0,I>=0,H>=0,G>=0,K=J+1,K=D+1,O+1=A] 
* CE 385: transpose_helper(A,B,C,D,E,F,G,H,I) = 5+ append_row(D,E,F,J,K,D,L,M):6+ transpose_helper(N,O,P,D,L,M,G,H,I)
     [C>=P,B>=O,E+1>=L,C>=K,D>=J,B>=J,N>=1,M>=0,L>=2,K>=0,J>=2,F>=0,E>=2,I>=0,H>=0,G>=0,N+1=A] 
* CE 386: transpose_helper(A,B,C,D,E,F,G,H,I) = 5+ append_row(D,E,F,J,K,D,L,M):7+ transpose_helper(N,O,P,D,L,M,G,H,I)
     [C>=P,B>=O,E+1>=L,C>=K,D>=J,B>=J,N>=1,M>=0,L>=2,K>=0,J>=3,F>=0,I>=0,H>=0,G>=0,N+1=A] 
* CE 387: transpose_helper(A,B,C,D,E,F,G,H,I) = 5+ append_row(D,E,F,J,K,J,L,M):8+ transpose_helper(N,O,P,J,L,M,G,H,I)
     [C>=P,B>=O,E+1>=L,B>=J,C>=K,J>=D+2,N>=1,M>=0,L>=2,K>=0,F>=0,D>=2,I>=0,H>=0,G>=0,N+1=A] 

### Cost equations --> "Loop" of transpose_helper/9 
* CEs [387] --> Loop 291 
* CEs [386] --> Loop 292 
* CEs [385] --> Loop 293 
* CEs [382] --> Loop 294 
* CEs [384] --> Loop 295 
* CEs [383] --> Loop 296 
* CEs [381] --> Loop 297 
* CEs [380] --> Loop 298 
* CEs [379] --> Loop 299 

#### Loops of transpose_helper/9 
* Loop 291: transpose_helper(A,B,C,D,E,F,G,H,I)->  transpose_helper(A',B',C',D',E',F',G,H,I)
                  [E+1>=E',B>=D',C>=C',B>=B',D'>=D+2,F'>=0,E'>=2,I>=0,H>=0,G>=0,F>=0,D>=2,C>=0,A>=2,A=A'+1] 
* Loop 292: transpose_helper(A,B,C,D,E,F,G,H,I)->  transpose_helper(A',B',C',D,D',E',G,H,I)
                  [E+1>=D',C>=C',B>=B',E'>=0,D'>=2,I>=0,H>=0,G>=0,F>=0,D>=3,C>=0,B>=3,A>=2,A=A'+1] 
* Loop 293: transpose_helper(A,B,C,D,E,F,G,H,I)->  transpose_helper(A',B',C',D,D',E',G,H,I)
                  [E+1>=D',C>=C',B>=B',E'>=0,D'>=2,I>=0,H>=0,G>=0,F>=0,E>=2,D>=2,C>=0,B>=2,A>=2,A=A'+1] 
* Loop 294: transpose_helper(A,B,C,D,E,F,G,H,I)->  transpose_helper(A',B',C',D,E,F,G,H,I)
                  [C>=C',B>=B',I>=0,H>=0,G>=0,F>=0,E>=0,D>=0,C>=0,B>=1,A>=2,A=A'+1] 
* Loop 295: transpose_helper(A,B,C,D,E,F,G,H,I)->  transpose_helper(A',B',C',D',E',F',G,H,I)
                  [E+1>=E',C>=C',B>=B',B>=D+1,F'>=0,E'>=2,I>=0,H>=0,G>=0,F>=0,D>=2,C>=0,A>=2,D+1=D',A=A'+1] 
* Loop 296: transpose_helper(A,B,C,D,E,F,G,H,I)->  transpose_helper(A',B',C',D,D',E',G,H,I)
                  [C>=C',B>=B',E'>=0,I>=0,H>=0,G>=0,F>=0,E>=1,D>=2,C>=0,B>=2,A>=2,A=A'+1,D'=2] 
* Loop 297: transpose_helper(A,B,C,D,E,F,G,H,I)->  transpose_helper(A',B',C',D',E',F',G,H,I)
                  [B>=D',C>=C',B>=B',F'>=0,D'>=3,I>=0,H>=0,G>=0,F>=0,C>=0,A>=2,A=A'+1,E'=2,E=0,D=1] 
* Loop 298: transpose_helper(A,B,C,D,E,F,G,H,I)->  transpose_helper(A',B',C',D',E',F',G,H,I)
                  [C>=C',B>=B',F'>=0,I>=0,H>=0,G>=0,F>=0,C>=0,B>=2,A>=2,A=A'+1,E'=2,D'=2,E=0,D=1] 
* Loop 299: transpose_helper(A,B,C,D,E,F,D,E,F) [F>=0,E>=0,D>=0,C>=0,B=0,A=1] 

### Ranking functions of CR transpose_helper(A,B,C,D,E,F,G,H,I) 
* RF of phase [291,292,293,294,295,296,297,298]: [A-1]

#### Partial ranking functions of CR transpose_helper(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [291,292,293,294,295,296,297,298]:
  - RF of loop [291:1]:
    B/2-D/2-1/2
  - RF of loop [291:1,292:1,293:1,294:1,295:1,296:1,297:1,298:1]:
    A-1
  - RF of loop [295:1]:
    B-D
  - RF of loop [297:1]:
    -D/2+1
  - RF of loop [297:1,298:1]:
    -E/2+1/2 depends on loops [291:1,292:1,293:1,295:1,296:1] 
  - RF of loop [298:1]:
    -D+2

Discarded unfeasible chain [[291,292,293,294,295,296,297,298]]...(Non-terminating chain proved terminating)

### Resulting Chains:transpose_helper(A,B,C,D,E,F,G,H,I) 
* [[291,292,293,294,295,296,297,298],299]
* [299]


### Merging Chains  transpose_helper/9 into  External patterns of execution 
* [[299]] --> 1 
* [[299,[291,292,293,294,295,296,297,298]]] --> 2 


### Specialization of cost equations transpose/6 
* CE 29 is refined into CE [388,389] 


#### Refined cost equations transpose/6 
* CE 388: transpose(A,B,C,D,E,F) = 2+ transpose_helper(G,H,C,I,J,F,K,L,F):1
     [F>=0,C>=0,L=0,K=1,J=0,I=1,H=0,G=1,E=0,D=1,B=0,A=1] 
* CE 389: transpose(A,B,C,D,E,F) = 2+ transpose_helper(A,B,C,G,H,I,D,E,F):2
     [A+B+D>=E+4,A+2*D>=E+4,A+D>=E+2,2*A>=E+2,F>=0,E>=0,D>=1,I>=0,C>=0,B>=1,A>=2,H=0,G=1] 

### Cost equations --> "Loop" of transpose/6 
* CEs [389] --> Loop 300 
* CEs [388] --> Loop 301 

#### Loops of transpose/6 
* Loop 300: transpose(A,B,C,D,E,F) [A+B+D>=E+4,A+2*D>=E+4,A+D>=E+2,2*A>=E+2,F>=0,E>=0,D>=1,C>=0,B>=1,A>=2] 
* Loop 301: transpose(A,B,C,D,E,F) [F>=0,C>=0,E=0,D=1,B=0,A=1] 

### Ranking functions of CR transpose(A,B,C,D,E,F) 

#### Partial ranking functions of CR transpose(A,B,C,D,E,F) 


### Resulting Chains:transpose(A,B,C,D,E,F) 
* [301]
* [300]


### Merging Chains  transpose/6 into  External patterns of execution 
* [[301]] --> 1 
* [[300]] --> 2 


### Specialization of cost equations mat_mult/9 
* CE 48 is refined into CE [390,391] 
* CE 47 is refined into CE [392,393,394,395,396,397,398,399] 


#### Refined cost equations mat_mult/9 
* CE 390: mat_mult(A,B,C,D,E,F,G,H,I) = 6+ transpose(J,K,F,L,M,N):1
     [N>=0,F>=0,I>=0,C>=0,M=0,L=1,K=0,J=1,H=0,G=1,E=0,D=1,B=0,A=1] 
* CE 391: mat_mult(A,B,C,D,E,F,G,H,I) = 6+ transpose(D,E,F,J,K,L):2
     [D+E+J>=K+4,D+2*J>=K+4,D+J>=K+2,2*D>=K+2,L>=0,K>=0,J>=1,F>=0,E>=1,D>=2,I>=0,C>=0,H=0,G=1,B=0,A=1] 
* CE 392: mat_mult(A,B,C,D,E,F,G,H,I) = 9+ transpose(J,K,F,L,M,N):1+ prod_mat(O,P,Q,R,N,S,T):2+ mat_mult(U,V,W,X,Y,F,Z,A1,B1)+ maxNorm(C1,D1,E1):1
     [I>=B1,C>=W,B>=V,I>=T,C>=P,B>=O,Z>=1,U>=1,T>=0,N>=0,P>=0,O>=1,F>=0,Z+1=G,U+1=A,A1=0,Y=0,X=1,E1=1,D1=0,C1=1,S=1,R=0,Q=1,M=0,L=1,K=0,J=1,H=1,E=0,D=1] 
* CE 393: mat_mult(A,B,C,D,E,F,G,H,I) = 9+ transpose(J,K,F,L,M,N):1+ prod_mat(O,P,Q,R,N,S,T):2+ mat_mult(U,V,W,X,Y,F,Z,H,A1)+ maxNorm(B1,H,H):2
     [I>=A1,C>=W,B>=V,I>=T,C>=P,B>=O,Z>=1,U>=1,H>=1,T>=0,N>=0,P>=0,O>=1,F>=0,Z+1=G,U+1=A,Y=0,X=1,B1=1,S=1,R=0,Q=1,M=0,L=1,K=0,J=1,E=0,D=1] 
* CE 394: mat_mult(A,B,C,D,E,F,G,H,I) = 9+ transpose(D,E,F,H,J,K):2+ prod_mat(L,M,H,J,K,H,N):1+ mat_mult(O,P,Q,D,E,F,R,S,T)+ maxNorm(H,S,H):1
     [D+E+H>=J+4,D+H>=J+2,I>=T,C>=Q,B>=P,H>=S+1,I>=N,2*D>=J+2,C>=M,R>=1,O>=1,H>=2,S>=0,N>=0,K>=0,J>=1,M>=0,F>=0,E>=1,D>=2,B>=1,R+1=G,O+1=A,L=1] 
* CE 395: mat_mult(A,B,C,D,E,F,G,H,I) = 9+ transpose(D,E,F,J,K,L):2+ prod_mat(M,N,J,K,L,J,O):1+ mat_mult(P,Q,R,D,E,F,S,H,T)+ maxNorm(J,H,H):2
     [D+E+J>=K+4,D+J>=K+2,I>=T,C>=R,B>=Q,H>=J,I>=O,2*D>=K+2,C>=N,S>=1,P>=1,J>=2,O>=0,L>=0,K>=1,N>=0,F>=0,E>=1,D>=2,B>=1,S+1=G,P+1=A,M=1] 
* CE 396: mat_mult(A,B,C,D,E,F,G,H,I) = 9+ transpose(D,E,F,J,K,L):2+ prod_mat(M,N,O,P,L,Q,R):2+ mat_mult(S,T,U,D,E,F,V,W,X)+ maxNorm(Y,Z,A1):1
     [I>=X,C>=U,B>=T,I>=R,C>=N,B>=M,V>=1,S>=1,R>=0,L>=0,N>=0,M>=1,F>=0,E>=1,D>=2,V+1=G,S+1=A,W=0,A1=1,Z=0,Y=1,Q=1,P=0,O=1,K=0,J=1,H=1] 
* CE 397: mat_mult(A,B,C,D,E,F,G,H,I) = 9+ transpose(D,E,F,J,K,L):2+ prod_mat(M,N,O,P,L,Q,R):2+ mat_mult(S,T,U,D,E,F,V,H,W)+ maxNorm(X,H,H):2
     [I>=W,C>=U,B>=T,I>=R,C>=N,B>=M,V>=1,S>=1,H>=1,R>=0,L>=0,N>=0,M>=1,F>=0,E>=1,D>=2,V+1=G,S+1=A,X=1,Q=1,P=0,O=1,K=0,J=1] 
* CE 398: mat_mult(A,B,C,D,E,F,G,H,I) = 9+ transpose(D,E,F,H,J,K):2+ prod_mat(L,M,H,J,K,H,N):3+ mat_mult(O,P,Q,D,E,F,R,S,T)+ maxNorm(H,S,H):1
     [D+E+H>=J+4,D+H>=J+2,I>=T,C>=Q,B>=P,H>=S+1,I>=N,2*D>=J+2,C>=M,B>=L,R>=1,O>=1,H>=2,S>=0,N>=0,K>=0,J>=1,M>=0,L>=2,F>=0,E>=1,D>=2,R+1=G,O+1=A] 
* CE 399: mat_mult(A,B,C,D,E,F,G,H,I) = 9+ transpose(D,E,F,J,K,L):2+ prod_mat(M,N,J,K,L,J,O):3+ mat_mult(P,Q,R,D,E,F,S,H,T)+ maxNorm(J,H,H):2
     [D+E+J>=K+4,D+J>=K+2,I>=T,C>=R,B>=Q,H>=J,I>=O,2*D>=K+2,C>=N,B>=M,S>=1,P>=1,J>=2,O>=0,L>=0,K>=1,N>=0,M>=2,F>=0,E>=1,D>=2,S+1=G,P+1=A] 

### Cost equations --> "Loop" of mat_mult/9 
* CEs [394,398] --> Loop 302 
* CEs [395,397,399] --> Loop 303 
* CEs [396] --> Loop 304 
* CEs [393] --> Loop 305 
* CEs [392] --> Loop 306 
* CEs [391] --> Loop 307 
* CEs [390] --> Loop 308 

#### Loops of mat_mult/9 
* Loop 302: mat_mult(A,B,C,D,E,F,G,H,I)->  mat_mult(A',B',C',D,E,F,D',E',F')
                  [I>=F',H>=E'+1,C>=C',B>=B',E'>=0,I>=0,H>=2,G>=2,F>=0,E>=1,D>=2,C>=0,B>=1,A>=2,G=D'+1,A=A'+1] 
* Loop 303: mat_mult(A,B,C,D,E,F,G,H,I)->  mat_mult(A',B',C',D,E,F,D',H,E')
                  [I>=E',C>=C',B>=B',I>=0,H>=1,G>=2,F>=0,E>=1,D>=2,C>=0,B>=1,A>=2,G=D'+1,A=A'+1] 
* Loop 304: mat_mult(A,B,C,D,E,F,G,H,I)->  mat_mult(A',B',C',D,E,F,D',E',F')
                  [I>=F',C>=C',B>=B',I>=0,G>=2,F>=0,E>=1,D>=2,C>=0,B>=1,A>=2,G=D'+1,A=A'+1,E'=0,H=1] 
* Loop 305: mat_mult(A,B,C,D,E,F,G,H,I)->  mat_mult(A',B',C',D',E',F,F',H,G')
                  [I>=G',C>=C',B>=B',I>=0,H>=1,G>=2,F>=0,C>=0,B>=1,A>=2,G=F'+1,A=A'+1,E'=0,D'=1,E=0,D=1] 
* Loop 306: mat_mult(A,B,C,D,E,F,G,H,I)->  mat_mult(A',B',C',D',E',F,F',G',H')
                  [I>=H',C>=C',B>=B',I>=0,G>=2,F>=0,C>=0,B>=1,A>=2,G=F'+1,A=A'+1,G'=0,E'=0,D'=1,H=1,E=0,D=1] 
* Loop 307: mat_mult(A,B,C,D,E,F,G,H,I) [I>=0,F>=0,E>=1,D>=2,C>=0,H=0,G=1,B=0,A=1] 
* Loop 308: mat_mult(A,B,C,D,E,F,G,H,I) [I>=0,F>=0,C>=0,H=0,G=1,E=0,D=1,B=0,A=1] 

### Ranking functions of CR mat_mult(A,B,C,D,E,F,G,H,I) 
* RF of phase [302,303]: [A-1]
* RF of phase [305]: [A-1]

#### Partial ranking functions of CR mat_mult(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [302,303]:
  - RF of loop [302:1,303:1]:
    A-1
* Partial RF of phase [305]:
  - RF of loop [305:1]:
    A-1

Discarded unfeasible chain [[305]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [[302,303]](Non-terminating chain proved terminating)

### Resulting Chains:mat_mult(A,B,C,D,E,F,G,H,I) 
* [[305],306,308]
* [[302,303],307]
* [[302,303],304,307]
* [308]
* [307]
* [306,308]
* [304,307]


### Merging Chains  mat_mult/9 into  External patterns of execution 
* [[308]] --> 1 
* [[307]] --> 2 
* [[308,306]] --> 3 
* [[307,304]] --> 4 
* [[308,306,[305]]] --> 5 
* [[307,[302,303]]] --> 6 
* [[307,304,[302,303]]] --> 7 


### Specialization of cost equations new_transpose_helper/9 
* CE 40 is refined into CE [400] 
* CE 39 is refined into CE [401,402,403,404,405,406,407,408] 


#### Refined cost equations new_transpose_helper/9 
* CE 400: new_transpose_helper(A,B,C,D,E,F,D,E,F) = 2
     [F>=0,E>=0,D>=0,C>=0,B=0,A=1] 
* CE 401: new_transpose_helper(A,B,C,D,E,F,G,H,I) = 5+ append_start(J,K,F,L,M,N,O,P):1+ new_transpose_helper(Q,R,S,T,U,P,G,H,I)
     [C>=S,B>=R,C>=M,Q>=1,P>=0,M>=0,F>=0,I>=0,H>=0,G>=0,B>=1,Q+1=A,U=0,T=1,O=0,N=1,L=1,K=0,J=1,E=0,D=1] 
* CE 402: new_transpose_helper(A,B,C,D,E,F,G,H,I) = 5+ append_start(J,K,F,L,M,N,O,P):2+ new_transpose_helper(Q,R,S,T,U,P,G,H,I)
     [C>=S,B>=R,C>=M,Q>=1,P>=0,M>=0,F>=0,I>=0,H>=0,G>=0,B>=2,Q+1=A,U=2,T=2,O=2,N=2,L=2,K=0,J=1,E=0,D=1] 
* CE 403: new_transpose_helper(A,B,C,D,E,F,G,H,I) = 5+ append_start(J,K,F,L,M,L,N,O):3+ new_transpose_helper(P,Q,R,L,S,O,G,H,I)
     [C>=R,B>=Q,B>=L,C>=M,P>=1,O>=0,L>=3,M>=0,F>=0,I>=0,H>=0,G>=0,P+1=A,S=2,N=2,K=0,J=1,E=0,D=1] 
* CE 404: new_transpose_helper(A,B,C,D,E,F,G,H,I) = 5+ append_start(D,E,F,J,K,D,L,M):4+ new_transpose_helper(N,O,P,D,L,M,G,H,I)
     [C>=P,B>=O,C>=K,N>=1,M>=0,L>=1,D>=2,K>=0,F>=0,E>=1,I>=0,H>=0,G>=0,B>=1,N+1=A,J=1] 
* CE 405: new_transpose_helper(A,B,C,D,E,F,G,H,I) = 5+ append_start(J,E,F,K,L,K,M,N):5+ new_transpose_helper(O,P,Q,K,M,N,G,H,I)
     [C>=Q,B>=P,E+1>=M,C>=L,B>=K,O>=1,N>=0,M>=2,L>=0,K>=3,F>=0,I>=0,H>=0,G>=0,K=J+1,K=D+1,O+1=A] 
* CE 406: new_transpose_helper(A,B,C,D,E,F,G,H,I) = 5+ append_start(D,E,F,D,J,D,K,L):6+ new_transpose_helper(M,N,O,D,K,L,G,H,I)
     [C>=O,B>=N,E+1>=K,C>=J,B>=D,M>=1,L>=0,K>=2,J>=0,D>=2,F>=0,I>=0,H>=0,G>=0,M+1=A] 
* CE 407: new_transpose_helper(A,B,C,D,E,F,G,H,I) = 5+ append_start(D,E,F,J,K,D,L,M):7+ new_transpose_helper(N,O,P,D,L,M,G,H,I)
     [C>=P,B>=O,C>=K,D>=J+1,B>=J,N>=1,M>=0,L>=2,K>=0,J>=2,F>=0,E>=1,I>=0,H>=0,G>=0,N+1=A] 
* CE 408: new_transpose_helper(A,B,C,D,E,F,G,H,I) = 5+ append_start(D,E,F,J,K,J,L,M):8+ new_transpose_helper(N,O,P,J,L,M,G,H,I)
     [C>=P,B>=O,E+1>=L,B>=J,C>=K,J>=D+2,N>=1,M>=0,L>=2,K>=0,F>=0,D>=2,I>=0,H>=0,G>=0,N+1=A] 

### Cost equations --> "Loop" of new_transpose_helper/9 
* CEs [408] --> Loop 309 
* CEs [404,406,407] --> Loop 310 
* CEs [405] --> Loop 311 
* CEs [403] --> Loop 312 
* CEs [402] --> Loop 313 
* CEs [401] --> Loop 314 
* CEs [400] --> Loop 315 

#### Loops of new_transpose_helper/9 
* Loop 309: new_transpose_helper(A,B,C,D,E,F,G,H,I)->  new_transpose_helper(A',B',C',D',E',F',G,H,I)
                  [E+1>=E',B>=D',C>=C',B>=B',D'>=D+2,F'>=0,E'>=2,I>=0,H>=0,G>=0,F>=0,D>=2,C>=0,A>=2,A=A'+1] 
* Loop 310: new_transpose_helper(A,B,C,D,E,F,G,H,I)->  new_transpose_helper(A',B',C',D,D',E',G,H,I)
                  [C>=C',B>=B',E'>=0,D'>=1,I>=0,H>=0,G>=0,F>=0,E>=1,D>=2,C>=0,B>=1,A>=2,A=A'+1] 
* Loop 311: new_transpose_helper(A,B,C,D,E,F,G,H,I)->  new_transpose_helper(A',B',C',D',E',F',G,H,I)
                  [E+1>=E',C>=C',B>=B',B>=D+1,F'>=0,E'>=2,I>=0,H>=0,G>=0,F>=0,D>=2,C>=0,A>=2,D+1=D',A=A'+1] 
* Loop 312: new_transpose_helper(A,B,C,D,E,F,G,H,I)->  new_transpose_helper(A',B',C',D',E',F',G,H,I)
                  [B>=D',C>=C',B>=B',F'>=0,D'>=3,I>=0,H>=0,G>=0,F>=0,C>=0,A>=2,A=A'+1,E'=2,E=0,D=1] 
* Loop 313: new_transpose_helper(A,B,C,D,E,F,G,H,I)->  new_transpose_helper(A',B',C',D',E',F',G,H,I)
                  [C>=C',B>=B',F'>=0,I>=0,H>=0,G>=0,F>=0,C>=0,B>=2,A>=2,A=A'+1,E'=2,D'=2,E=0,D=1] 
* Loop 314: new_transpose_helper(A,B,C,D,E,F,G,H,I)->  new_transpose_helper(A',B',C',D',E',F',G,H,I)
                  [C>=C',B>=B',F'>=0,I>=0,H>=0,G>=0,F>=0,C>=0,B>=1,A>=2,A=A'+1,E'=0,D'=1,E=0,D=1] 
* Loop 315: new_transpose_helper(A,B,C,D,E,F,D,E,F) [F>=0,E>=0,D>=0,C>=0,B=0,A=1] 

### Ranking functions of CR new_transpose_helper(A,B,C,D,E,F,G,H,I) 
* RF of phase [309,310,311]: [A-1]
* RF of phase [314]: [A-1]

#### Partial ranking functions of CR new_transpose_helper(A,B,C,D,E,F,G,H,I) 
* Partial RF of phase [309,310,311]:
  - RF of loop [309:1]:
    B/2-D/2-1/2
  - RF of loop [309:1,310:1,311:1]:
    A-1
  - RF of loop [311:1]:
    B-D
* Partial RF of phase [314]:
  - RF of loop [314:1]:
    A-1

Discarded unfeasible chain [[314]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [[314],313,[309,310,311]](Non-terminating chain proved terminating)
Discarded unfeasible chain [[314],312,[309,310,311]](Non-terminating chain proved terminating)
Discarded unfeasible chain [[309,310,311]](Non-terminating chain proved terminating)
Discarded unfeasible chain [313,[309,310,311]](Non-terminating chain proved terminating)
Discarded unfeasible chain [312,[309,310,311]](Non-terminating chain proved terminating)

### Resulting Chains:new_transpose_helper(A,B,C,D,E,F,G,H,I) 
* [[314],315]
* [[314],313,[309,310,311],315]
* [[314],313,315]
* [[314],312,[309,310,311],315]
* [[314],312,315]
* [[309,310,311],315]
* [315]
* [313,[309,310,311],315]
* [313,315]
* [312,[309,310,311],315]
* [312,315]


### Merging Chains  new_transpose_helper/9 into  External patterns of execution 
* [[315]] --> 1 
* [[315,313]] --> 2 
* [[315,312]] --> 3 
* [[315,[314]]] --> 4 
* [[315,[309,310,311],312],[315,[309,310,311],313],[315,[309,310,311],312,[314]],[315,313,[314]],[315,[309,310,311],313,[314]]] --> 5 
* [[315,312,[314]]] --> 6 
* [[315,[309,310,311]]] --> 7 


### Specialization of cost equations new_transpose/6 
* CE 41 is refined into CE [409,410,411,412,413,414] 


#### Refined cost equations new_transpose/6 
* CE 409: new_transpose(A,B,C,D,E,F) = 3+ new_transpose_helper(G,H,C,I,J,K,L,M,K):1+ reverse_rows(N,O,K,P,Q,F):1
     [F>=0,K>=0,C>=0,Q=0,P=1,O=0,N=1,M=0,L=1,J=0,I=1,H=0,G=1,E=0,D=1,B=0,A=1] 
* CE 410: new_transpose(A,B,C,D,E,F) = 3+ new_transpose_helper(G,B,C,H,I,J,K,L,M):2+ reverse_rows(N,O,M,P,E,F):2
     [F>=0,E>=1,M>=0,J>=0,C>=0,B>=2,P=2,O=2,N=2,L=2,K=2,I=0,H=1,G=2,D=2,A=2] 
* CE 411: new_transpose(A,B,C,D,E,F) = 3+ new_transpose_helper(G,B,C,H,I,J,D,K,L):3+ reverse_rows(D,M,L,D,E,F):2
     [B>=D,F>=0,E>=1,D>=3,L>=0,J>=0,C>=0,M=2,K=2,I=0,H=1,G=2,A=2] 
* CE 412: new_transpose(A,B,C,D,E,F) = 3+ new_transpose_helper(A,B,C,G,H,I,J,K,L):4+ reverse_rows(M,N,L,O,P,F):1
     [F>=0,L>=0,I>=0,C>=0,B>=1,A>=2,P=0,O=1,N=0,M=1,K=0,J=1,H=0,G=1,E=0,D=1] 
* CE 413: new_transpose(A,B,C,D,E,F) = 3+ new_transpose_helper(A,B,C,G,H,I,D,J,K):5+ reverse_rows(D,J,K,D,E,F):2
     [F>=0,E>=1,D>=2,K>=0,J>=1,I>=0,C>=0,B>=2,A>=3,H=0,G=1] 
* CE 414: new_transpose(A,B,C,D,E,F) = 3+ new_transpose_helper(A,B,C,G,H,I,D,J,K):6+ reverse_rows(D,L,K,D,E,F):2
     [B>=D,F>=0,E>=1,D>=3,K>=0,I>=0,C>=0,A>=3,L=2,J=2,H=0,G=1] 

### Cost equations --> "Loop" of new_transpose/6 
* CEs [413,414] --> Loop 316 
* CEs [412] --> Loop 317 
* CEs [411] --> Loop 318 
* CEs [410] --> Loop 319 
* CEs [409] --> Loop 320 

#### Loops of new_transpose/6 
* Loop 316: new_transpose(A,B,C,D,E,F) [F>=0,E>=1,D>=2,C>=0,B>=2,A>=3] 
* Loop 317: new_transpose(A,B,C,D,E,F) [F>=0,C>=0,B>=1,A>=2,E=0,D=1] 
* Loop 318: new_transpose(A,B,C,D,E,F) [B>=D,F>=0,E>=1,D>=3,C>=0,A=2] 
* Loop 319: new_transpose(A,B,C,D,E,F) [F>=0,E>=1,C>=0,B>=2,D=2,A=2] 
* Loop 320: new_transpose(A,B,C,D,E,F) [F>=0,C>=0,E=0,D=1,B=0,A=1] 

### Ranking functions of CR new_transpose(A,B,C,D,E,F) 

#### Partial ranking functions of CR new_transpose(A,B,C,D,E,F) 


### Resulting Chains:new_transpose(A,B,C,D,E,F) 
* [320]
* [319]
* [318]
* [317]
* [316]


### Merging Chains  new_transpose/6 into  External patterns of execution 
* [[320]] --> 1 
* [[319]] --> 2 
* [[318]] --> 3 
* [[317]] --> 4 
* [[316]] --> 5 


### Specialization of cost equations remFirstRow/6 
* CE 69 is refined into CE [415] 


#### Refined cost equations remFirstRow/6 
* CE 415: remFirstRow(A,B,C,D,E,F) = 2
     [C>=F,B>=E,F>=0,E>=0,D>=1,B>=1,D+1=A] 

### Cost equations --> "Loop" of remFirstRow/6 
* CEs [415] --> Loop 321 

#### Loops of remFirstRow/6 
* Loop 321: remFirstRow(A,B,C,D,E,F) [C>=F,B>=E,F>=0,E>=0,D>=1,B>=1,D+1=A] 

### Ranking functions of CR remFirstRow(A,B,C,D,E,F) 

#### Partial ranking functions of CR remFirstRow(A,B,C,D,E,F) 


### Resulting Chains:remFirstRow(A,B,C,D,E,F) 
* [321]


### Merging Chains  remFirstRow/6 into  External patterns of execution 
* [[321]] --> 1 


### Specialization of cost equations size/3 
* CE 2 is refined into CE [416] 
* CE 1 is refined into CE [417] 


#### Refined cost equations size/3 
* CE 416: size(A,B,C) = 3
     [C=0,B=0,A=1] 
* CE 417: size(A,B,C) = 6+ size(D,E,F)
     [B>=E,F+1>=0,D>=1,B>=1,F+1=C,D+1=A] 

### Cost equations --> "Loop" of size/3 
* CEs [417] --> Loop 322 
* CEs [416] --> Loop 323 

#### Loops of size/3 
* Loop 322: size(A,B,C)->  size(A',B',C')
                  [B>=B',C'+1>=0,A'>=1,B>=1,C'+1=C,A'+1=A] 
* Loop 323: size(A,B,C) [C=0,B=0,A=1] 

### Ranking functions of CR size(A,B,C) 
* RF of phase [322]: [A-1]

#### Partial ranking functions of CR size(A,B,C) 
* Partial RF of phase [322]:
  - RF of loop [322:1]:
    A-1

Discarded unfeasible chain [[322]]...(Non-terminating chain proved terminating)

### Resulting Chains:size(A,B,C) 
* [[322],323]
* [323]


### Merging Chains  size/3 into  External patterns of execution 
* [[323]] --> 1 
* [[323,[322]]] --> 2 


### Specialization of cost equations submat/8 
* CE 68 is refined into CE [418,419,420,421,422,423,424,425] 
* CE 67 is discarded (unfeasible) 
* CE 66 is refined into CE [426] 


#### Refined cost equations submat/8 
* CE 418: submat(A,B,C,D,E,F,G,H) = 11+ del(I,J,E,K,L):1+ submat(M,N,O,P,E,Q,R,S)+ maxNorm(T,U,V):1
     [H>=S,C>=O,B>=N,H>=L,C>=J,Q>=1,P>=0,O>=0,N>=0,M>=1,L>=0,E>=0,J>=0,B>=1,Q+1=F,P+1=D,M+1=A,R=0,V=1,U=0,T=1,K=1,I=1,G=1] 
* CE 419: submat(A,B,C,D,E,F,G,H) = 11+ del(I,J,E,K,L):1+ submat(M,N,O,P,E,Q,G,R)+ maxNorm(S,G,G):2
     [H>=R,C>=O,B>=N,H>=L,C>=J,Q>=1,P>=0,O>=0,N>=0,M>=1,G>=1,L>=0,E>=0,J>=0,B>=1,Q+1=F,P+1=D,M+1=A,S=1,K=1,I=1] 
* CE 420: submat(A,B,C,D,E,F,G,H) = 11+ del(I,J,K,G,L):2+ submat(M,N,O,P,Q,R,S,T)+ maxNorm(G,S,G):1
     [H>=T,C>=O,B>=N,B>=G+1,G>=S+1,J>=L,H>=L,C>=J,R>=1,P>=0,O>=0,N>=0,M>=1,S>=0,L>=0,G+1=I,R+1=F,P+1=D,M+1=A,Q=0,K=0,E=0] 
* CE 421: submat(A,B,C,D,E,F,G,H) = 11+ del(I,J,K,L,M):2+ submat(N,O,P,Q,R,S,G,T)+ maxNorm(L,G,G):2
     [H>=T,C>=P,B>=O,G>=L,B>=L+1,J>=M,H>=M,C>=J,S>=1,Q>=0,P>=0,O>=0,N>=1,L>=1,M>=0,L+1=I,S+1=F,Q+1=D,N+1=A,R=0,K=0,E=0] 
* CE 422: submat(A,B,C,D,E,F,G,H) = 11+ del(G,I,E,G,J):3+ submat(K,L,M,N,E,O,P,Q)+ maxNorm(G,P,G):1
     [H>=Q,C>=M,B>=L,E+1>=G,B>=G,G>=P+1,H>=J,C>=I,O>=1,N>=0,M>=0,L>=0,K>=1,G>=2,P>=0,J>=0,I>=0,O+1=F,N+1=D,K+1=A] 
* CE 423: submat(A,B,C,D,E,F,G,H) = 11+ del(I,J,E,I,K):3+ submat(L,M,N,O,E,P,G,Q)+ maxNorm(I,G,G):2
     [H>=Q,C>=N,B>=M,G>=I,E+1>=I,B>=I,H>=K,C>=J,P>=1,O>=0,N>=0,M>=0,L>=1,I>=2,K>=0,J>=0,P+1=F,O+1=D,L+1=A] 
* CE 424: submat(A,B,C,D,E,F,G,H) = 11+ del(I,J,E,G,K):4+ submat(L,M,N,O,E,P,Q,R)+ maxNorm(G,Q,G):1
     [H>=R,C>=N,B>=M,B>=G+1,G>=Q+1,H>=K,G>=E+1,C>=J,P>=1,O>=0,N>=0,M>=0,L>=1,Q>=0,K>=0,E>=1,J>=0,G+1=I,P+1=F,O+1=D,L+1=A] 
* CE 425: submat(A,B,C,D,E,F,G,H) = 11+ del(I,J,E,K,L):4+ submat(M,N,O,P,E,Q,G,R)+ maxNorm(K,G,G):2
     [H>=R,C>=O,B>=N,G>=K,B>=K+1,H>=L,K>=E+1,C>=J,Q>=1,P>=0,O>=0,N>=0,M>=1,L>=0,E>=1,J>=0,K+1=I,Q+1=F,P+1=D,M+1=A] 
* CE 426: submat(A,B,C,D,E,F,G,H) = 3
     [H>=0,E>=0,D>=0,C>=0,G=0,F=1,B=0,A=1] 

### Cost equations --> "Loop" of submat/8 
* CEs [426] --> Loop 324 
* CEs [422] --> Loop 325 
* CEs [424] --> Loop 326 
* CEs [418] --> Loop 327 
* CEs [420] --> Loop 328 
* CEs [419,421,423,425] --> Loop 329 

#### Loops of submat/8 
* Loop 324: submat(A,B,C,D,E,F,G,H) [H>=0,E>=0,D>=0,C>=0,G=0,F=1,B=0,A=1] 
* Loop 325: submat(A,B,C,D,E,F,G,H)->  submat(A',B',C',D',E,E',F',G')
                  [H>=G',G>=F'+1,C>=C',B>=B',E+1>=G,B>=G,F'>=0,C'>=0,B'>=0,H>=0,G>=2,F>=2,D>=1,A>=2,F=E'+1,D=D'+1,A=A'+1] 
* Loop 326: submat(A,B,C,D,E,F,G,H)->  submat(A',B',C',D',E,E',F',G')
                  [H>=G',G>=F'+1,C>=C',B>=B',B>=G+1,G>=E+1,F'>=0,C'>=0,B'>=0,H>=0,F>=2,E>=1,D>=1,A>=2,F=E'+1,D=D'+1,A=A'+1] 
* Loop 327: submat(A,B,C,D,E,F,G,H)->  submat(A',B',C',D',E,E',F',G')
                  [H>=G',C>=C',B>=B',C'>=0,B'>=0,H>=0,F>=2,E>=0,D>=1,B>=1,A>=2,F=E'+1,D=D'+1,A=A'+1,F'=0,G=1] 
* Loop 328: submat(A,B,C,D,E,F,G,H)->  submat(A',B',C',D',E',F',G',H')
                  [H>=H',G>=G'+1,C>=C',B>=B',B>=G+1,G'>=0,C'>=0,B'>=0,H>=0,F>=2,D>=1,A>=2,F=F'+1,D=D'+1,A=A'+1,E'=0,E=0] 
* Loop 329: submat(A,B,C,D,E,F,G,H)->  submat(A',B',C',D',E,E',G,F')
                  [H>=F',C>=C',B>=B',C'>=0,B'>=0,H>=0,G>=1,F>=2,E>=0,D>=1,B>=1,A>=2,F=E'+1,D=D'+1,A=A'+1] 

### Ranking functions of CR submat(A,B,C,D,E,F,G,H) 
* RF of phase [325,326,328,329]: [A-1,D]

#### Partial ranking functions of CR submat(A,B,C,D,E,F,G,H) 
* Partial RF of phase [325,326,328,329]:
  - RF of loop [325:1,326:1,328:1,329:1]:
    A-1
    D

Discarded unfeasible chain [[325,326,328,329]]...(Non-terminating chain proved terminating)

### Resulting Chains:submat(A,B,C,D,E,F,G,H) 
* [[325,326,328,329],327,324]
* [[325,326,328,329],324]
* [327,324]
* [324]


### Merging Chains  submat/8 into  External patterns of execution 
* [[324]] --> 1 
* [[324,327]] --> 2 
* [[324,[325,326,328,329]]] --> 3 
* [[324,327,[325,326,328,329]]] --> 4 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 98 

#### Computing cost of phase [96] 

#### Simplifying cost structure of CE 99 

#### Cost of loops [96] 

 * loop 96:append(A,B,C,D,E) -> [append(A',B',C',D',E')] 
5
##### Pending set append(A,B,C,D,E)
* Psum in Loop 96: [it(96)=<1]

###### Computing sum for it(96)=<1  in Loop 96 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(96)=<A-1,it(96)=<A-1,it(96)=<A-A',it(96)=<A-A'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [96] 

#### Simplifying cost structure of phase [96] 

#### Cost of phase [96]:append(A,B,C,D,E) -> [append(A',B',C',D',E')] 
5*it(96)+0
  Such that:it(96) =< A
it(96) =< A-A'

#### Simplifying cost structure of chain [[96],97] 

#### Cost of chains of append(A,B,C,D,E):
* Chain [[96],97]: 5*it(96)+4
  Such that:it(96) =< D

  with precondition: [A+1=D,A>=2,B>=0,C>=0,E>=C] 

* Chain [97]: 4
  with precondition: [A=1,D=2,B>=0,C>=0,E>=C] 


#### Simplifying cost structure of CE 101 

#### Simplifying cost structure of CE 100 

#### Cost of chains of maxNorm(A,B,C):
* Chain [99]: 0
  with precondition: [A=C,B>=0,A>=B+1] 

* Chain [98]: 0
  with precondition: [B=C,A>=1,B>=A] 


#### Simplifying cost structure of CE 108 

#### Simplifying cost structure of CE 106 

#### Simplifying cost structure of chain [105,100] 

#### Computing cost of phase [104] 

#### Simplifying cost structure of CE 107 

#### Cost of loops [104] 

 * loop 104:append_row(A,B,C,D,E,F,G,H) -> [append_row(A',B',C',D',E',F',G',H')] 
10
##### Pending set append_row(A,B,C,D,E,F,G,H)
* Psum in Loop 104: [it(104)=<1]

###### Computing sum for it(104)=<1  in Loop 104 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(104)=<D-1,it(104)=<D-1,it(104)=<D-D',it(104)=<D-D'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [104] 

#### Simplifying cost structure of phase [104] 

#### Cost of phase [104]:append_row(A,B,C,D,E,F,G,H) -> [append_row(A',B',C',D',E',F',G',H')] 
10*it(104)+0
  Such that:it(104) =< D
it(104) =< D-D'

#### Simplifying cost structure of chain [[104],105,100] 

#### Computing cost of phase [101,102] 
 * Renamed intermediate variables: 
[ (eq(104,1),it(96))>>s(1)]

#### Simplifying cost structure of CE 104 
 * Renamed intermediate variables: 
[ (it(101),s(1))>>s(2)]

#### Simplifying cost structure of CE 103 
 * Renamed intermediate variables: 
[ (eq(105,1),it(96))>>s(3)]

#### Simplifying cost structure of CE 105 
 * Renamed intermediate variables: 
[ (it(102),s(3))>>s(4)]

#### Cost of loops [101,102] 

 * loop 101:append_row(A,B,C,D,E,F,G,H) -> [append_row(A',B',C',D',E',F',G',H')] 
5*s(2)+13
  Such that:s(2) =< B+1

 * loop 102:append_row(A,B,C,D,E,F,G,H) -> [append_row(A',B',C',D',E',F',G',H')] 
5*s(4)+13
  Such that:s(4) =< B+1
s(4) =< 2*D+B'

##### Pending set append_row(A,B,C,D,E,F,G,H)
* Psum in Loop 101: [it(101)=<1,s(5)=<B+1]
* Psum in Loop 102: [it(102)=<1,s(6)=<B+1,s(6)=<2*D+B']

###### Computing sum for it(101)=<1  in Loop 101 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
       - Loop 102 is collaborative and bounds [it(102)] 
     - head Candidate: A-1 
       - Loop 102 is collaborative and bounds [it(102)] 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - Loop 102 is collaborative and bounds [it(102)] 
     - tail Candidate: A-1 
       - Loop 102 is collaborative and bounds [it(102)] 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(101)+it(102)=<D-1,it(101)+it(102)=<A-1,it(101)+it(102)=<A-1,it(101)+it(102)=<D-1,it(101)+it(102)=<D-D',it(101)+it(102)=<A-A',it(101)+it(102)=<A-A',it(101)+it(102)=<D-D'] 

##### Pending set A
* Psum in Loop 101: [s(5)=<B+1]
* Psum in Loop 102: [it(102)=<1,s(6)=<B+1,s(6)=<2*D+B']

###### Computing sum for s(5)=<B+1  in Loop 101 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1)=<B+1] 
 * Adding constraints: [s(5)=<it(101)*aux(1)] 

##### Pending set append_row(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(1)=<B+1]
* Psum in Loop 102: [it(102)=<1,s(6)=<B+1,s(6)=<2*D+B']

###### Computing max_min for aux(1)=<B+1  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(1)=<B+1] 

##### Pending set append_row(A,B,C,D,E,F,G,H)
* Psum in Loop 102: [it(102)=<1,s(6)=<B+1,s(6)=<2*D+B']

###### Computing sum for it(102)=<1  in Loop 102 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(101)+it(102)=<D-1,it(101)+it(102)=<A-1,it(101)+it(102)=<A-1,it(101)+it(102)=<D-1,it(101)+it(102)=<D-D',it(101)+it(102)=<A-A',it(101)+it(102)=<A-A',it(101)+it(102)=<D-D'] 

##### Pending set append_row(A,B,C,D,E,F,G,H)
* Psum in Loop 102: [s(6)=<B+1,s(6)=<2*D+B']

###### Computing sum for s(6)=<B+1  in Loop 102 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(2)=<B+1] 
 * Adding constraints: [s(6)=<it(102)*aux(2)] 

##### Pending set append_row(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(2)=<B+1]
* Psum in Loop 102: [s(6)=<2*D+B']

###### Computing max_min for aux(2)=<B+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(2)=<aux(1)] 

##### Pending set append_row(A,B,C,D,E,F,G,H)
* Psum in Loop 102: [s(6)=<2*D+B']

###### Computing sum for s(6)=<2*D+B'  in Loop 102 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(3)=<B+2*D] 
 * Adding constraints: [s(6)=<it(102)*aux(3)] 

##### Pending set append_row(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(3)=<B+2*D]

###### Computing max_min for aux(3)=<B+2*D  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(3)=<B+2*D] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [101,102] 

#### Simplifying cost structure of phase [101,102] 
 * Joined equivalent variables [it(101),it(102)] into it(101)

#### Cost of phase [101,102]:append_row(A,B,C,D,E,F,G,H) -> [append_row(A',B',C',D',E',F',G',H')] 
26*it(101)+5*s(5)+5*s(6)+0
  Such that:aux(1) =< B+1
aux(3) =< B+2*D
aux(4) =< A
aux(5) =< A-A'
aux(6) =< D
aux(7) =< D-D'
it(101) =< aux(4)
it(101) =< aux(5)
it(101) =< aux(6)
it(101) =< aux(7)
aux(2) =< aux(1)
s(6) =< it(101)*aux(3)
s(5) =< it(101)*aux(1)
s(6) =< it(101)*aux(2)

#### Simplifying cost structure of chain [[101,102],[104],105,100] 
 * Joined equivalent variables [aux(8),aux(4),aux(5),aux(7)] into aux(8)

#### Found solution for phase  [101,102] in the cache 

#### Cost of phase [101,102]:append_row(A,B,C,D,E,F,G,H) -> [append_row(A',B',C',D',E',F',G',H')] 
26*it(101)+5*s(5)+5*s(6)+0
  Such that:aux(1) =< B+1
aux(3) =< B+2*D
aux(4) =< A
aux(5) =< A-A'
aux(6) =< D
aux(7) =< D-D'
it(101) =< aux(4)
it(101) =< aux(5)
it(101) =< aux(6)
it(101) =< aux(7)
aux(2) =< aux(1)
s(6) =< it(101)*aux(3)
s(5) =< it(101)*aux(1)
s(6) =< it(101)*aux(2)

#### Simplifying cost structure of chain [[101,102],105,100] 
 * Joined equivalent variables [aux(9),aux(4),aux(5),aux(7)] into aux(9)

#### Simplifying cost structure of CE 102 

#### Simplifying cost structure of chain [103,100] 

#### Found solution for phase  [101,102] in the cache 

#### Cost of phase [101,102]:append_row(A,B,C,D,E,F,G,H) -> [append_row(A',B',C',D',E',F',G',H')] 
26*it(101)+5*s(5)+5*s(6)+0
  Such that:aux(1) =< B+1
aux(3) =< B+2*D
aux(4) =< A
aux(5) =< A-A'
aux(6) =< D
aux(7) =< D-D'
it(101) =< aux(4)
it(101) =< aux(5)
it(101) =< aux(6)
it(101) =< aux(7)
aux(2) =< aux(1)
s(6) =< it(101)*aux(3)
s(5) =< it(101)*aux(1)
s(6) =< it(101)*aux(2)

#### Simplifying cost structure of chain [[101,102],103,100] 
 * Joined equivalent variables [aux(10),aux(5),aux(6),aux(7)] into aux(10)

#### Found solution for phase  [101,102] in the cache 

#### Cost of phase [101,102]:append_row(A,B,C,D,E,F,G,H) -> [append_row(A',B',C',D',E',F',G',H')] 
26*it(101)+5*s(5)+5*s(6)+0
  Such that:aux(1) =< B+1
aux(3) =< B+2*D
aux(4) =< A
aux(5) =< A-A'
aux(6) =< D
aux(7) =< D-D'
it(101) =< aux(4)
it(101) =< aux(5)
it(101) =< aux(6)
it(101) =< aux(7)
aux(2) =< aux(1)
s(6) =< it(101)*aux(3)
s(5) =< it(101)*aux(1)
s(6) =< it(101)*aux(2)

#### Simplifying cost structure of chain [[101,102],100] 
 * Joined equivalent variables [aux(11),aux(5),aux(6),aux(7)] into aux(11)

#### Cost of chains of append_row(A,B,C,D,E,F,G,H):
* Chain [[104],105,100]: 10*it(104)+12
  Such that:it(104) =< F

  with precondition: [A=1,B=0,G=2,D=F,C>=0,D>=3,E>=0,H>=0] 

* Chain [[101,102],[104],105,100]: 26*it(101)+10*it(104)+5*s(5)+5*s(6)+12
  Such that:it(104) =< -A+F+1
aux(1) =< B+1
aux(3) =< B+2*F
aux(6) =< F
aux(8) =< A
it(101) =< aux(8)
it(101) =< aux(6)
aux(2) =< aux(1)
s(6) =< it(101)*aux(3)
s(5) =< it(101)*aux(1)
s(6) =< it(101)*aux(2)

  with precondition: [D=F,A>=2,C>=0,E>=0,G>=2,H>=0,D>=A+2,B+1>=G] 

* Chain [[101,102],105,100]: 26*it(101)+5*s(5)+5*s(6)+12
  Such that:aux(6) =< A+1
aux(3) =< 2*A+B+2
aux(1) =< B+1
aux(9) =< A
it(101) =< aux(9)
it(101) =< aux(6)
aux(2) =< aux(1)
s(6) =< it(101)*aux(3)
s(5) =< it(101)*aux(1)
s(6) =< it(101)*aux(2)

  with precondition: [A+1=D,A+1=F,A>=2,C>=0,E>=0,G>=2,H>=0,B+1>=G] 

* Chain [[101,102],103,100]: 26*it(101)+5*s(5)+5*s(6)+15
  Such that:aux(4) =< A
aux(1) =< B+1
aux(3) =< B+2*D
aux(10) =< D
it(101) =< aux(4)
it(101) =< aux(10)
aux(2) =< aux(1)
s(6) =< it(101)*aux(3)
s(5) =< it(101)*aux(1)
s(6) =< it(101)*aux(2)

  with precondition: [A=F,C>=0,D>=3,E>=0,G>=2,H>=0,A>=D,B+1>=G] 

* Chain [[101,102],100]: 26*it(101)+5*s(5)+5*s(6)+2
  Such that:aux(4) =< A
aux(1) =< B+1
aux(3) =< B+2*D
aux(11) =< D
it(101) =< aux(4)
it(101) =< aux(11)
aux(2) =< aux(1)
s(6) =< it(101)*aux(3)
s(5) =< it(101)*aux(1)
s(6) =< it(101)*aux(2)

  with precondition: [A=F,B>=2,C>=0,D>=2,E>=0,G>=2,H>=0,A>=D,B+1>=G] 

* Chain [105,100]: 12
  with precondition: [A=1,B=0,D=2,F=2,G=2,C>=0,E>=0,H>=0] 

* Chain [103,100]: 15
  with precondition: [D=2,G=2,A=F,A>=2,B>=1,C>=0,E>=0,H>=0] 

* Chain [100]: 2
  with precondition: [D=1,A=F,B=G,C=H,A>=0,B>=0,C>=0,E>=0] 


#### Simplifying cost structure of CE 109 

#### Computing cost of phase [106,107,108,109] 

#### Simplifying cost structure of CE 110 

#### Simplifying cost structure of CE 112 

#### Simplifying cost structure of CE 111 

#### Simplifying cost structure of CE 113 

#### Cost of loops [106,107,108,109] 

 * loop 106:reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) -> [reverse_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O')] 
5
 * loop 107:reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) -> [reverse_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O')] 
5
 * loop 108:reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) -> [reverse_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O')] 
5
 * loop 109:reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) -> [reverse_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O')] 
5
##### Pending set reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O)
* Psum in Loop 106: [it(106)=<1]
* Psum in Loop 107: [it(107)=<1]
* Psum in Loop 108: [it(108)=<1]
* Psum in Loop 109: [it(109)=<1]

###### Computing sum for it(106)=<1  in Loop 106 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
       - Loop 107 is collaborative and bounds [it(107)] 
       - Loop 108 is collaborative and bounds [it(108)] 
       - Loop 109 is collaborative and bounds [it(109)] 
     - head Candidate: A-1 
       - Loop 107 is collaborative and bounds [it(107)] 
       - Loop 108 is collaborative and bounds [it(108)] 
       - Loop 109 is collaborative and bounds [it(109)] 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-G 
       - Loop 107 is collaborative and bounds [it(107)] 
       - Loop 108 is collaborative
       - Loop 109 is collaborative
     - head Candidate: E-J 
       - Loop 107 is collaborative
       - Loop 108 is collaborative and bounds [it(108)] 
       - Loop 109 is collaborative
     - tail Candidate: D-1 
       - Loop 107 is collaborative and bounds [it(107)] 
       - Loop 108 is collaborative and bounds [it(108)] 
       - Loop 109 is collaborative and bounds [it(109)] 
     - tail Candidate: A-1 
       - Loop 107 is collaborative and bounds [it(107)] 
       - Loop 108 is collaborative and bounds [it(108)] 
       - Loop 109 is collaborative and bounds [it(109)] 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-G 
       - Loop 107 is collaborative and bounds [it(107)] 
       - Loop 108 is collaborative
       - Loop 109 is collaborative
     - tail Candidate: E-J 
       - Loop 107 is collaborative
       - Loop 108 is collaborative and bounds [it(108)] 
       - Loop 109 is collaborative
 * Adding constraints: [it(106)+it(107)+it(108)+it(109)=<D-1,it(106)+it(107)+it(108)+it(109)=<A-1,it(106)+it(107)+it(108)+it(109)=<A-1,it(106)+it(107)+it(108)+it(109)=<D-1,it(106)+it(107)=<B-G,it(106)+it(108)=<E-J,it(106)+it(107)+it(108)+it(109)=<D-D',it(106)+it(107)+it(108)+it(109)=<A-A',it(106)+it(107)+it(108)+it(109)=<A-A',it(106)+it(107)+it(108)+it(109)=<D-D',it(106)+it(107)=<B-G-B'+G',it(106)+it(108)=<E-J-E'+J'] 

##### Pending set A
* Psum in Loop 107: [it(107)=<1]
* Psum in Loop 108: [it(108)=<1]
* Psum in Loop 109: [it(109)=<1]

###### Computing sum for it(107)=<1  in Loop 107 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-G 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-G 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(106)+it(107)+it(108)+it(109)=<D-1,it(106)+it(107)+it(108)+it(109)=<A-1,it(106)+it(107)+it(108)+it(109)=<A-1,it(106)+it(107)+it(108)+it(109)=<D-1,it(106)+it(107)=<B-G,it(106)+it(107)+it(108)+it(109)=<D-D',it(106)+it(107)+it(108)+it(109)=<A-A',it(106)+it(107)+it(108)+it(109)=<A-A',it(106)+it(107)+it(108)+it(109)=<D-D',it(106)+it(107)=<B-G-B'+G'] 

##### Pending set A
* Psum in Loop 108: [it(108)=<1]
* Psum in Loop 109: [it(109)=<1]

###### Computing sum for it(108)=<1  in Loop 108 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: E-J 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: E-J 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(106)+it(107)+it(108)+it(109)=<D-1,it(106)+it(107)+it(108)+it(109)=<A-1,it(106)+it(107)+it(108)+it(109)=<A-1,it(106)+it(107)+it(108)+it(109)=<D-1,it(106)+it(108)=<E-J,it(106)+it(107)+it(108)+it(109)=<D-D',it(106)+it(107)+it(108)+it(109)=<A-A',it(106)+it(107)+it(108)+it(109)=<A-A',it(106)+it(107)+it(108)+it(109)=<D-D',it(106)+it(108)=<E-J-E'+J'] 

##### Pending set A
* Psum in Loop 109: [it(109)=<1]

###### Computing sum for it(109)=<1  in Loop 109 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(106)+it(107)+it(108)+it(109)=<D-1,it(106)+it(107)+it(108)+it(109)=<A-1,it(106)+it(107)+it(108)+it(109)=<A-1,it(106)+it(107)+it(108)+it(109)=<D-1,it(106)+it(107)+it(108)+it(109)=<D-D',it(106)+it(107)+it(108)+it(109)=<A-A',it(106)+it(107)+it(108)+it(109)=<A-A',it(106)+it(107)+it(108)+it(109)=<D-D'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [106,107,108,109] 

#### Simplifying cost structure of phase [106,107,108,109] 

#### Cost of phase [106,107,108,109]:reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O) -> [reverse_helper(A',B',C',D',E',F',G',H',I',J',K',L',M',N',O')] 
5*it(106)+5*it(107)+5*it(108)+5*it(109)+0
  Such that:aux(12) =< A
aux(13) =< A-A'
aux(14) =< B-G
aux(15) =< B-G-B'+G'
aux(16) =< D
aux(17) =< D-D'
aux(18) =< E-J
aux(19) =< E-J-E'+J'
it(106) =< aux(12)
it(107) =< aux(12)
it(108) =< aux(12)
it(109) =< aux(12)
it(106) =< aux(13)
it(107) =< aux(13)
it(108) =< aux(13)
it(109) =< aux(13)
it(106) =< aux(14)
it(107) =< aux(14)
it(106) =< aux(15)
it(107) =< aux(15)
it(106) =< aux(16)
it(107) =< aux(16)
it(108) =< aux(16)
it(109) =< aux(16)
it(106) =< aux(17)
it(107) =< aux(17)
it(108) =< aux(17)
it(109) =< aux(17)
it(106) =< aux(18)
it(108) =< aux(18)
it(106) =< aux(19)
it(108) =< aux(19)

#### Simplifying cost structure of chain [[106,107,108,109],110] 
 * Joined equivalent variables [aux(20),aux(12),aux(13),aux(16),aux(17)] into aux(20)

#### Cost of chains of reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O):
* Chain [[106,107,108,109],110]: 5*it(106)+5*it(107)+5*it(108)+5*it(109)+2
  Such that:aux(14) =< B-G
aux(15) =< B-G+L
aux(18) =< E-J
aux(19) =< E-J+O
aux(20) =< A
it(106) =< aux(20)
it(107) =< aux(20)
it(108) =< aux(20)
it(109) =< aux(20)
it(106) =< aux(14)
it(107) =< aux(14)
it(106) =< aux(15)
it(107) =< aux(15)
it(106) =< aux(18)
it(108) =< aux(18)
it(106) =< aux(19)
it(108) =< aux(19)

  with precondition: [A=D,A+F=K+1,A+I=N+1,A>=2,B>=1,C>=0,E>=1,F>=1,G>=0,H>=0,I>=1,J>=0,L>=1,O>=1,L>=G,M>=H,O>=J] 

* Chain [110]: 2
  with precondition: [A=1,B=0,D=1,E=0,F=K,G=L,H=M,I=N,J=O,C>=0,F>=0,G>=0,H>=0,I>=0,J>=0] 


#### Simplifying cost structure of CE 114 
 * Renamed intermediate variables: 
[ (eq(115,1),aux(14))>>s(7), (eq(115,1),aux(15))>>s(8), (eq(115,1),aux(18))>>s(9), (eq(115,1),aux(19))>>s(10), (eq(115,1),aux(20))>>s(11), (eq(115,1),it(106))>>s(12), (eq(115,1),it(107))>>s(13), (eq(115,1),it(108))>>s(14), (eq(115,1),it(109))>>s(15)]

#### Simplifying cost structure of CE 115 

#### Cost of chains of reverseL(A,B,C,D,E,F,G,H,I,J):
* Chain [112]: 4
  with precondition: [A=1,B=0,D=1,E=0,F=1,G=0,I=1,J=0,C>=0,H>=0] 

* Chain [111]: 5*s(12)+5*s(13)+5*s(14)+5*s(15)+4
  Such that:s(7) =< B
s(11) =< D
s(9) =< E
s(12) =< s(11)
s(13) =< s(11)
s(14) =< s(11)
s(15) =< s(11)
s(12) =< s(7)
s(13) =< s(7)
s(12) =< s(9)
s(14) =< s(9)

  with precondition: [A=D,A=F,A=I,A>=2,B>=1,C>=0,E>=1,G>=1,H>=0,J>=1] 


#### Simplifying cost structure of CE 116 

#### Computing cost of phase [113,114] 
 * Renamed intermediate variables: 
[ (eq(117,2),s(7))>>s(16), (eq(117,2),s(11))>>s(17), (eq(117,2),s(9))>>s(18), (eq(117,2),s(12))>>s(19), (eq(117,2),s(13))>>s(20), (eq(117,2),s(14))>>s(21), (eq(117,2),s(15))>>s(22)]

#### Simplifying cost structure of CE 117 
 * Renamed intermediate variables: 
[ (it(113),s(16))>>s(23), (it(113),s(17))>>s(24), (it(113),s(19))>>s(25), (it(113),s(20))>>s(26), (it(113),s(21))>>s(27), (it(113),s(22))>>s(28)]
 * Renamed intermediate variables: 
[ (eq(118,2),s(7))>>s(29), (eq(118,2),s(11))>>s(30), (eq(118,2),s(9))>>s(31), (eq(118,2),s(12))>>s(32), (eq(118,2),s(13))>>s(33), (eq(118,2),s(14))>>s(34), (eq(118,2),s(15))>>s(35)]

#### Simplifying cost structure of CE 118 
 * Renamed intermediate variables: 
[ (it(114),s(30))>>s(36), (it(114),s(29))>>s(37), (it(114),s(32))>>s(38), (it(114),s(33))>>s(39), (it(114),s(34))>>s(40), (it(114),s(35))>>s(41)]

#### Cost of loops [113,114] 

 * loop 113:reverse_rows_helper(A,B,C,D,E,F,G,H,I) -> [reverse_rows_helper(A',B',C',D',E',F',G',H',I')] 
5*s(25)+5*s(26)+5*s(27)+5*s(28)+10
  Such that:s(23) =< B
s(24) =< D+1
s(25) =< s(24)
s(26) =< s(24)
s(27) =< s(24)
s(28) =< s(24)
s(25) =< s(23)
s(26) =< s(23)

 * loop 114:reverse_rows_helper(A,B,C,D,E,F,G,H,I) -> [reverse_rows_helper(A',B',C',D',E',F',G',H',I')] 
5*s(38)+5*s(39)+5*s(40)+5*s(41)+10
  Such that:s(36) =< D+1
s(37) =< E
s(38) =< s(36)
s(39) =< s(36)
s(40) =< s(36)
s(41) =< s(36)
s(38) =< s(37)
s(39) =< s(37)

##### Pending set reverse_rows_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 113: [it(113)=<1,s(46)=<B,s(47)=<D+1]
* Psum in Loop 114: [it(114)=<1,s(53)=<D+1,s(52)=<E]

###### Computing sum for it(113)=<1  in Loop 113 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - Loop 114 is collaborative and bounds [it(114)] 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - Loop 114 is collaborative and bounds [it(114)] 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(113)+it(114)=<A-1,it(113)+it(114)=<A-1,it(113)+it(114)=<A-A',it(113)+it(114)=<A-A'] 

##### Pending set A
* Psum in Loop 113: [s(46)=<B,s(47)=<D+1]
* Psum in Loop 114: [it(114)=<1,s(53)=<D+1,s(52)=<E]

###### Computing sum for s(46)=<B  in Loop 113 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(21)=<B] 
 * Adding constraints: [s(46)=<it(113)*aux(21)] 

##### Pending set reverse_rows_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(21)=<B]
* Psum in Loop 113: [s(47)=<D+1]
* Psum in Loop 114: [it(114)=<1,s(53)=<D+1,s(52)=<E]

###### Computing max_min for aux(21)=<B  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(21)=<B] 

##### Pending set reverse_rows_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 113: [s(47)=<D+1]
* Psum in Loop 114: [it(114)=<1,s(53)=<D+1,s(52)=<E]

###### Computing sum for s(47)=<D+1  in Loop 113 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(22)=<D+1] 
 * Adding constraints: [s(47)=<it(113)*aux(22)] 

##### Pending set reverse_rows_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(22)=<D+1]
* Psum in Loop 114: [it(114)=<1,s(53)=<D+1,s(52)=<E]

###### Computing max_min for aux(22)=<D+1  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(22)=<A+D-1] 

##### Pending set reverse_rows_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 114: [it(114)=<1,s(53)=<D+1,s(52)=<E]

###### Computing sum for it(114)=<1  in Loop 114 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(113)+it(114)=<A-1,it(113)+it(114)=<A-1,it(113)+it(114)=<A-A',it(113)+it(114)=<A-A'] 

##### Pending set reverse_rows_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 114: [s(53)=<D+1,s(52)=<E]

###### Computing sum for s(53)=<D+1  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(23)=<D+1] 
 * Adding constraints: [s(53)=<it(114)*aux(23)] 

##### Pending set reverse_rows_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(23)=<D+1]
* Psum in Loop 114: [s(52)=<E]

###### Computing max_min for aux(23)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(23)=<aux(22)] 

##### Pending set reverse_rows_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 114: [s(52)=<E]

###### Computing sum for s(52)=<E  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(24)=<E] 
 * Adding constraints: [s(52)=<it(114)*aux(24)] 

##### Pending set reverse_rows_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(24)=<E]

###### Computing max_min for aux(24)=<E  
   - Applying max/min strategy 
     - Loop 113  increases the expression by [E'] 
     - Loop 114  increases the expression by [E'-1] 
 * Adding constraints:[aux(24)=<aux(25)+aux(26)+aux(27),aux(25)=<E] 

##### Pending set reverse_rows_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 113: [aux(26)=<E']
* Psum in Loop 114: [aux(27)=<E'-1]

###### Computing sum for aux(26)=<E'  in Loop 113 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [] 
 * Adding constraints: [aux(26)=<it(113)*aux(28)] 

##### Pending set reverse_rows_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 114: [aux(27)=<E'-1]

###### Computing sum for aux(27)=<E'-1  in Loop 114 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [] 
 * Adding constraints: [aux(27)=<it(114)*aux(29)] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [113,114] 

#### Simplifying cost structure of phase [113,114] 
 * Joined equivalent variables [it(113),it(114)] into it(113)
 * Joined equivalent variables [s(42),s(43)] into s(42)
 * Joined equivalent variables [s(44),s(45)] into s(44)
 * Joined equivalent variables [s(48),s(49)] into s(48)
 * Joined equivalent variables [s(50),s(51)] into s(50)

#### Cost of phase [113,114]:reverse_rows_helper(A,B,C,D,E,F,G,H,I) -> [reverse_rows_helper(A',B',C',D',E',F',G',H',I')] 
20*it(113)+10*s(42)+10*s(44)+10*s(48)+10*s(50)+0
  Such that:aux(22) =< A+D
aux(21) =< B
aux(30) =< A
aux(31) =< A-A'
it(113) =< aux(30)
it(113) =< aux(31)
aux(23) =< aux(22)
s(47) =< it(113)*aux(22)
s(46) =< it(113)*aux(21)
s(53) =< it(113)*aux(23)
s(48) =< s(53)
s(50) =< s(53)
s(42) =< s(47)
s(44) =< s(47)
s(42) =< s(46)

#### Simplifying cost structure of chain [[113,114],115] 
 * Joined equivalent variables [aux(32),aux(30),aux(31)] into aux(32)
 * Joined equivalent variables [s(48),s(50)] into s(48)

#### Cost of chains of reverse_rows_helper(A,B,C,D,E,F,G,H,I):
* Chain [[113,114],115]: 20*it(113)+10*s(42)+10*s(44)+20*s(48)+2
  Such that:aux(22) =< A+D
aux(21) =< B
aux(32) =< A
it(113) =< aux(32)
aux(23) =< aux(22)
s(47) =< it(113)*aux(22)
s(46) =< it(113)*aux(21)
s(53) =< it(113)*aux(23)
s(48) =< s(53)
s(42) =< s(47)
s(44) =< s(47)
s(42) =< s(46)

  with precondition: [A+D=G+1,A>=2,B>=1,C>=0,D>=1,E>=0,F>=0,H>=1,I>=0] 

* Chain [115]: 2
  with precondition: [A=1,B=0,D=G,E=H,F=I,C>=0,D>=0,E>=0,F>=0] 


#### Simplifying cost structure of CE 119 
 * Renamed intermediate variables: 
[ (eq(120,1),aux(22))>>s(54), (eq(120,1),aux(21))>>s(55), (eq(120,1),aux(32))>>s(56), (eq(120,1),it(113))>>s(57), (eq(120,1),aux(23))>>s(58), (eq(120,1),s(47))>>s(59), (eq(120,1),s(46))>>s(60), (eq(120,1),s(53))>>s(61), (eq(120,1),s(48))>>s(62), (eq(120,1),s(42))>>s(63), (eq(120,1),s(44))>>s(64)]
 * Renamed intermediate variables: 
[ (eq(120,2),s(7))>>s(65), (eq(120,2),s(11))>>s(66), (eq(120,2),s(9))>>s(67), (eq(120,2),s(12))>>s(68), (eq(120,2),s(13))>>s(69), (eq(120,2),s(14))>>s(70), (eq(120,2),s(15))>>s(71)]

#### Simplifying cost structure of CE 120 
 * Joined equivalent variables [aux(33),s(56),s(66)] into aux(33)
 * Joined equivalent variables [s(57),s(71)] into s(57)

#### Cost of chains of reverse_rows(A,B,C,D,E,F):
* Chain [117]: 9
  with precondition: [A=1,B=0,D=1,E=0,C>=0,F>=0] 

* Chain [116]: 25*s(57)+20*s(62)+10*s(63)+10*s(64)+5*s(68)+5*s(69)+5*s(70)+9
  Such that:s(54) =< A+1
s(55) =< B
aux(33) =< A
s(68) =< aux(33)
s(69) =< aux(33)
s(70) =< aux(33)
s(57) =< aux(33)
s(58) =< s(54)
s(59) =< s(57)*s(54)
s(60) =< s(57)*s(55)
s(61) =< s(57)*s(58)
s(62) =< s(61)
s(63) =< s(59)
s(64) =< s(59)
s(63) =< s(60)

  with precondition: [A=D,A>=2,B>=1,C>=0,E>=1,F>=0] 


#### Simplifying cost structure of CE 125 

#### Simplifying cost structure of CE 123 

#### Simplifying cost structure of chain [123,119] 

#### Computing cost of phase [122] 

#### Simplifying cost structure of CE 124 

#### Cost of loops [122] 

 * loop 122:append_start(A,B,C,D,E,F,G,H) -> [append_start(A',B',C',D',E',F',G',H')] 
10
##### Pending set append_start(A,B,C,D,E,F,G,H)
* Psum in Loop 122: [it(122)=<1]

###### Computing sum for it(122)=<1  in Loop 122 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(122)=<D-1,it(122)=<D-1,it(122)=<D-D',it(122)=<D-D'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [122] 

#### Simplifying cost structure of phase [122] 

#### Cost of phase [122]:append_start(A,B,C,D,E,F,G,H) -> [append_start(A',B',C',D',E',F',G',H')] 
10*it(122)+0
  Such that:it(122) =< D
it(122) =< D-D'

#### Simplifying cost structure of chain [[122],123,119] 

#### Computing cost of phase [120,121] 

#### Simplifying cost structure of CE 121 

#### Simplifying cost structure of CE 122 

#### Cost of loops [120,121] 

 * loop 120:append_start(A,B,C,D,E,F,G,H) -> [append_start(A',B',C',D',E',F',G',H')] 
9
 * loop 121:append_start(A,B,C,D,E,F,G,H) -> [append_start(A',B',C',D',E',F',G',H')] 
9
##### Pending set append_start(A,B,C,D,E,F,G,H)
* Psum in Loop 120: [it(120)=<1]
* Psum in Loop 121: [it(121)=<1]

###### Computing sum for it(120)=<1  in Loop 120 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
       - Loop 121 is collaborative and bounds [it(121)] 
     - head Candidate: A-1 
       - Loop 121 is collaborative and bounds [it(121)] 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - Loop 121 is collaborative and bounds [it(121)] 
     - tail Candidate: A-1 
       - Loop 121 is collaborative and bounds [it(121)] 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(120)+it(121)=<D-1,it(120)+it(121)=<A-1,it(120)+it(121)=<A-1,it(120)+it(121)=<D-1,it(120)+it(121)=<D-D',it(120)+it(121)=<A-A',it(120)+it(121)=<A-A',it(120)+it(121)=<D-D'] 

##### Pending set A
* Psum in Loop 121: [it(121)=<1]

###### Computing sum for it(121)=<1  in Loop 121 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(120)+it(121)=<D-1,it(120)+it(121)=<A-1,it(120)+it(121)=<A-1,it(120)+it(121)=<D-1,it(120)+it(121)=<D-D',it(120)+it(121)=<A-A',it(120)+it(121)=<A-A',it(120)+it(121)=<D-D'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [120,121] 

#### Simplifying cost structure of phase [120,121] 
 * Joined equivalent variables [it(120),it(121)] into it(120)

#### Cost of phase [120,121]:append_start(A,B,C,D,E,F,G,H) -> [append_start(A',B',C',D',E',F',G',H')] 
18*it(120)+0
  Such that:aux(34) =< A
aux(35) =< A-A'
aux(36) =< D
aux(37) =< D-D'
it(120) =< aux(34)
it(120) =< aux(35)
it(120) =< aux(36)
it(120) =< aux(37)

#### Simplifying cost structure of chain [[120,121],[122],123,119] 
 * Joined equivalent variables [aux(38),aux(34),aux(35),aux(37)] into aux(38)

#### Found solution for phase  [120,121] in the cache 

#### Cost of phase [120,121]:append_start(A,B,C,D,E,F,G,H) -> [append_start(A',B',C',D',E',F',G',H')] 
18*it(120)+0
  Such that:aux(34) =< A
aux(35) =< A-A'
aux(36) =< D
aux(37) =< D-D'
it(120) =< aux(34)
it(120) =< aux(35)
it(120) =< aux(36)
it(120) =< aux(37)

#### Simplifying cost structure of chain [[120,121],123,119] 
 * Joined equivalent variables [aux(39),aux(34),aux(35),aux(36),aux(37)] into aux(39)

#### Found solution for phase  [120,121] in the cache 

#### Cost of phase [120,121]:append_start(A,B,C,D,E,F,G,H) -> [append_start(A',B',C',D',E',F',G',H')] 
18*it(120)+0
  Such that:aux(34) =< A
aux(35) =< A-A'
aux(36) =< D
aux(37) =< D-D'
it(120) =< aux(34)
it(120) =< aux(35)
it(120) =< aux(36)
it(120) =< aux(37)

#### Simplifying cost structure of chain [[120,121],119] 
 * Joined equivalent variables [aux(40),aux(34),aux(35),aux(36),aux(37)] into aux(40)
 * Renamed intermediate variables: 
[ (eq(126,1),s(54))>>s(72), (eq(126,1),s(55))>>s(73), (eq(126,1),aux(33))>>s(74), (eq(126,1),s(68))>>s(75), (eq(126,1),s(69))>>s(76), (eq(126,1),s(70))>>s(77), (eq(126,1),s(57))>>s(78), (eq(126,1),s(58))>>s(79), (eq(126,1),s(59))>>s(80), (eq(126,1),s(60))>>s(81), (eq(126,1),s(61))>>s(82), (eq(126,1),s(62))>>s(83), (eq(126,1),s(63))>>s(84), (eq(126,1),s(64))>>s(85)]

#### Simplifying cost structure of CE 126 
 * Joined equivalent variables [s(75),s(76),s(77),s(78)] into s(75)

#### Found solution for phase  [120,121] in the cache 

#### Cost of phase [120,121]:append_start(A,B,C,D,E,F,G,H) -> [append_start(A',B',C',D',E',F',G',H')] 
18*it(120)+0
  Such that:aux(34) =< A
aux(35) =< A-A'
aux(36) =< D
aux(37) =< D-D'
it(120) =< aux(34)
it(120) =< aux(35)
it(120) =< aux(36)
it(120) =< aux(37)

#### Simplifying cost structure of chain [[120,121],118] 
 * Joined equivalent variables [aux(41),aux(35),aux(36),aux(37)] into aux(41)

#### Cost of chains of append_start(A,B,C,D,E,F,G,H):
* Chain [[122],123,119]: 10*it(122)+22
  Such that:it(122) =< F

  with precondition: [A=1,B=0,G=2,D=F,C>=0,D>=3,E>=0,H>=0] 

* Chain [[120,121],[122],123,119]: 18*it(120)+10*it(122)+22
  Such that:it(122) =< -A+D+1
aux(36) =< D
aux(38) =< A
it(120) =< aux(38)
it(120) =< aux(36)

  with precondition: [D=F,A>=2,C>=0,E>=0,G>=2,H>=0,D>=A+2,B+1>=G] 

* Chain [[120,121],123,119]: 18*it(120)+22
  Such that:aux(39) =< D
it(120) =< aux(39)

  with precondition: [A+1=D,A+1=F,A>=2,C>=0,E>=0,G>=2,H>=0,B+1>=G] 

* Chain [[120,121],119]: 18*it(120)+12
  Such that:aux(40) =< D
it(120) =< aux(40)

  with precondition: [A=D,A=F,A>=2,C>=0,E>=0,G>=2,H>=0,B+1>=G] 

* Chain [[120,121],118]: 18*it(120)+40*s(75)+20*s(83)+10*s(84)+10*s(85)+12
  Such that:aux(34) =< A
s(74) =< A-D+1
s(72) =< A-D+2
s(73) =< B
aux(41) =< D
s(75) =< s(74)
s(79) =< s(72)
s(80) =< s(75)*s(72)
s(81) =< s(75)*s(73)
s(82) =< s(75)*s(79)
s(83) =< s(82)
s(84) =< s(80)
s(85) =< s(80)
s(84) =< s(81)
it(120) =< aux(34)
it(120) =< aux(41)

  with precondition: [A=F,B>=1,C>=0,D>=2,E>=0,G>=2,H>=0,A>=D+1] 

* Chain [123,119]: 22
  with precondition: [A=1,B=0,D=2,F=2,G=2,C>=0,E>=0,H>=0] 

* Chain [119]: 12
  with precondition: [A=1,B=0,D=1,F=1,G=0,C>=0,E>=0,H>=0] 

* Chain [118]: 40*s(75)+20*s(83)+10*s(84)+10*s(85)+12
  Such that:s(74) =< A
s(72) =< A+1
s(73) =< B
s(75) =< s(74)
s(79) =< s(72)
s(80) =< s(75)*s(72)
s(81) =< s(75)*s(73)
s(82) =< s(75)*s(79)
s(83) =< s(82)
s(84) =< s(80)
s(85) =< s(80)
s(84) =< s(81)

  with precondition: [D=1,A=F,A>=2,B>=1,C>=0,E>=0,G>=1,H>=0] 


#### Simplifying cost structure of CE 127 

#### Computing cost of phase [124] 

#### Simplifying cost structure of CE 128 

#### Cost of loops [124] 

 * loop 124:sizeL(A,B,C,D,E,F,G) -> [sizeL(A',B',C',D',E',F',G')] 
6
##### Pending set sizeL(A,B,C,D,E,F,G)
* Psum in Loop 124: [it(124)=<1]

###### Computing sum for it(124)=<1  in Loop 124 
   - Applying inductive sum strategy 
     - head Candidate: C-1 
     - head Candidate: A-1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
     - tail Candidate: A-1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(124)=<C-1,it(124)=<A-1,it(124)=<A-1,it(124)=<C-1,it(124)=<C-C',it(124)=<A-A',it(124)=<A-A',it(124)=<C-C'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [124] 

#### Simplifying cost structure of phase [124] 

#### Cost of phase [124]:sizeL(A,B,C,D,E,F,G) -> [sizeL(A',B',C',D',E',F',G')] 
6*it(124)+0
  Such that:it(124) =< A
it(124) =< A-A'
it(124) =< C
it(124) =< C-C'

#### Simplifying cost structure of chain [[124],125] 

#### Cost of chains of sizeL(A,B,C,D,E,F,G):
* Chain [[124],125]: 6*it(124)+3
  Such that:it(124) =< G

  with precondition: [A=C,A=F+1,A=G+1,A>=2,B>=0,D>=1,E>=0] 

* Chain [125]: 3
  with precondition: [A=1,C=1,D=0,F=0,G=0,B>=0,E>=0] 


#### Simplifying cost structure of CE 130 

#### Computing cost of phase [127] 

#### Simplifying cost structure of CE 131 

#### Cost of loops [127] 

 * loop 127:check_lists(A,B,C,D,E) -> [check_lists(A',B',C',D',E')] 
10
##### Pending set check_lists(A,B,C,D,E)
* Psum in Loop 127: [it(127)=<1]

###### Computing sum for it(127)=<1  in Loop 127 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(127)=<A-1,it(127)=<A-1,it(127)=<A-A',it(127)=<A-A'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [127] 

#### Simplifying cost structure of phase [127] 

#### Cost of phase [127]:check_lists(A,B,C,D,E) -> [check_lists(A',B',C',D',E')] 
10*it(127)+0
  Such that:it(127) =< A
it(127) =< A-A'

#### Simplifying cost structure of chain [[127],129] 
 * Renamed intermediate variables: 
[ (eq(129,1),it(124))>>s(86)]

#### Simplifying cost structure of CE 129 

#### Found solution for phase  [127] in the cache 

#### Cost of phase [127]:check_lists(A,B,C,D,E) -> [check_lists(A',B',C',D',E')] 
10*it(127)+0
  Such that:it(127) =< A
it(127) =< A-A'

#### Simplifying cost structure of chain [[127],128] 

#### Computing cost of phase [126] 
 * Renamed intermediate variables: 
[ (eq(132,1),it(124))>>s(87)]

#### Simplifying cost structure of CE 132 
 * Renamed intermediate variables: 
[ (it(126),s(87))>>s(88)]

#### Cost of loops [126] 

 * loop 126:check_lists(A,B,C,D,E) -> [check_lists(A',B',C',D',E')] 
6*s(88)+10
  Such that:s(88) =< D'

##### Pending set check_lists(A,B,C,D,E)
* Psum in Loop 126: [it(126)=<1,s(89)=<D']

###### Computing sum for it(126)=<1  in Loop 126 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(126)=<A-1,it(126)=<A-1,it(126)=<A-A',it(126)=<A-A'] 

##### Pending set A
* Psum in Loop 126: [s(89)=<D']

###### Computing sum for s(89)=<D'  in Loop 126 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(42)=<D,aux(42)=<B-1] 
 * Adding constraints: [s(89)=<it(126)*aux(42)] 

##### Pending set check_lists(A,B,C,D,E)
* Pmax/min: [aux(42)=<B-1,aux(42)=<D]

###### Computing max_min for aux(42)=<B-1  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(42)=<B-1] 

##### Pending set check_lists(A,B,C,D,E)
* Pmax/min: [aux(42)=<D]

###### Computing max_min for aux(42)=<D  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(42)=<D,aux(42)=<B-1] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [126] 

#### Simplifying cost structure of phase [126] 

#### Cost of phase [126]:check_lists(A,B,C,D,E) -> [check_lists(A',B',C',D',E')] 
10*it(126)+6*s(89)+0
  Such that:it(126) =< A
it(126) =< A-A'
aux(42) =< B
aux(42) =< D
s(89) =< it(126)*aux(42)

#### Simplifying cost structure of chain [[126],129] 

#### Found solution for phase  [126] in the cache 

#### Cost of phase [126]:check_lists(A,B,C,D,E) -> [check_lists(A',B',C',D',E')] 
10*it(126)+6*s(89)+0
  Such that:it(126) =< A
it(126) =< A-A'
aux(42) =< B
aux(42) =< D
s(89) =< it(126)*aux(42)

#### Simplifying cost structure of chain [[126],128] 
 * Renamed intermediate variables: 
[ (ch([128]),s(86))>>s(90)]
 * Renamed intermediate variables: 
[ (ch([[126],128]),it(126))>>s(91), (ch([[126],128]),s(86))>>s(92), (ch([[126],128]),aux(42))>>s(93), (ch([[126],128]),s(89))>>s(94)]
 * Renamed intermediate variables: 
[ (ch([[127],128]),it(127))>>s(95), (ch([[127],128]),s(86))>>s(96)]
 * Joined equivalent variables [s(91),s(95)] into s(91)
 * Joined equivalent variables [s(90),s(92),s(96)] into s(90)

#### Cost of chains of check_lists(A,B,C,D,E):
* Chain [[127],129]: 10*it(127)+3
  Such that:it(127) =< A

  with precondition: [D=0,E=1,A>=2,B>=1,C>=0] 

* Chain [[127],128]: 10*it(127)+6*s(86)+10
  Such that:it(127) =< A
s(86) =< B

  with precondition: [D=0,E=0,A>=3,B>=2,C>=0] 

* Chain [[126],129]: 10*it(126)+6*s(89)+3
  Such that:it(126) =< A
aux(42) =< D
s(89) =< it(126)*aux(42)

  with precondition: [E=1,A>=2,C>=0,D>=1,B>=D+1] 

* Chain [[126],128]: 10*it(126)+6*s(86)+6*s(89)+10
  Such that:it(126) =< A
s(86) =< B
aux(42) =< D
s(89) =< it(126)*aux(42)

  with precondition: [E=0,A>=3,C>=0,D>=1,B>=D+2] 

* Chain [129]: 3
  with precondition: [A=1,B=0,E=1,C>=0,D>=0] 

* Chain [128]: 6*s(86)+10
  Such that:s(86) =< B

  with precondition: [E=0,A>=2,C>=0,D>=0,B>=D+2] 

 * Renamed intermediate variables: 
[ (eq(135,1),it(127))>>s(97)]

#### Simplifying cost structure of CE 135 

#### Simplifying cost structure of CE 133 
 * Renamed intermediate variables: 
[ (eq(134,1),s(93))>>s(98), (eq(134,1),aux(43))>>s(99), (eq(134,1),aux(44))>>s(100), (eq(134,1),s(91))>>s(101), (eq(134,1),s(90))>>s(102), (eq(134,1),s(94))>>s(103)]

#### Simplifying cost structure of CE 134 

#### Simplifying cost structure of CE 137 
 * Renamed intermediate variables: 
[ (eq(136,1),it(126))>>s(104), (eq(136,1),aux(42))>>s(105), (eq(136,1),s(89))>>s(106)]

#### Simplifying cost structure of CE 136 

#### Cost of chains of case_3(A,B,C,D,E,F,G):
* Chain [134]: 10*s(97)+5
  Such that:s(97) =< D

  with precondition: [C=0,G=1,B=A,B>=0,D>=2,E>=1,F>=0] 

* Chain [133]: 5
  with precondition: [D=1,E=0,G=1,B=A,B>=0,C>=0,F>=0] 

* Chain [132]: 20*s(101)+18*s(102)+6*s(103)+12
  Such that:s(98) =< C
s(99) =< D
s(100) =< E
s(101) =< s(99)
s(102) =< s(100)
s(103) =< s(101)*s(98)

  with precondition: [G=0,B=A,B>=0,C>=0,D>=2,F>=0,E>=C+2] 

* Chain [131]: 2
  with precondition: [G=0,B>=0,C>=0,D>=0,E>=0,F>=0,A>=B+1] 

* Chain [130]: 10*s(104)+6*s(106)+5
  Such that:s(105) =< C
s(104) =< D
s(106) =< s(104)*s(105)

  with precondition: [G=1,B=A,B>=0,C>=1,D>=2,F>=0,E>=C+1] 


#### Simplifying cost structure of CE 138 
 * Renamed intermediate variables: 
[ (eq(139,1),it(124))>>s(107)]
 * Renamed intermediate variables: 
[ (eq(139,2),s(97))>>s(108)]

#### Simplifying cost structure of CE 139 
 * Joined equivalent variables [s(107),s(108)] into s(107)
 * Renamed intermediate variables: 
[ (eq(140,1),it(124))>>s(109)]
 * Renamed intermediate variables: 
[ (eq(140,2),s(98))>>s(110), (eq(140,2),s(99))>>s(111), (eq(140,2),s(100))>>s(112), (eq(140,2),s(101))>>s(113), (eq(140,2),s(102))>>s(114), (eq(140,2),s(103))>>s(115)]

#### Simplifying cost structure of CE 140 
 * Renamed intermediate variables: 
[ (eq(141,1),it(124))>>s(116)]

#### Simplifying cost structure of CE 141 
 * Renamed intermediate variables: 
[ (eq(142,1),it(124))>>s(117)]
 * Renamed intermediate variables: 
[ (eq(142,2),s(105))>>s(118), (eq(142,2),s(104))>>s(119), (eq(142,2),s(106))>>s(120)]

#### Simplifying cost structure of CE 142 
 * Joined equivalent variables [s(117),s(119)] into s(117)

#### Cost of chains of check_mat(A,B,C,D,E,F):
* Chain [139]: 10
  with precondition: [A=0,C=1,D=0,F=1,B>=0,E>=0] 

* Chain [138]: 16*s(107)+10
  Such that:aux(45) =< C
s(107) =< aux(45)

  with precondition: [B=0,F=1,A+1=C,A>=1,D>=1,E>=0] 

* Chain [137]: 6*s(109)+20*s(113)+18*s(114)+6*s(115)+17
  Such that:s(109) =< A
s(111) =< A+1
s(110) =< B
s(112) =< D
s(113) =< s(111)
s(114) =< s(112)
s(115) =< s(113)*s(110)

  with precondition: [F=0,A+1=C,A>=1,B>=0,E>=0,D>=B+2] 

* Chain [136]: 6*s(116)+7
  Such that:s(116) =< C

  with precondition: [F=0,A>=0,B>=0,D>=1,E>=0,C>=A+2] 

* Chain [135]: 16*s(117)+6*s(120)+10
  Such that:s(118) =< B
aux(46) =< C
s(117) =< aux(46)
s(120) =< s(117)*s(118)

  with precondition: [F=1,A+1=C,A>=1,B>=1,E>=0,D>=B+1] 


#### Simplifying cost structure of CE 143 
 * Renamed intermediate variables: 
[ (eq(145,1),s(109))>>s(121), (eq(145,1),s(111))>>s(122), (eq(145,1),s(110))>>s(123), (eq(145,1),s(112))>>s(124), (eq(145,1),s(113))>>s(125), (eq(145,1),s(114))>>s(126), (eq(145,1),s(115))>>s(127)]

#### Simplifying cost structure of CE 145 
 * Joined equivalent variables [aux(47),s(122)] into aux(47)
 * Joined equivalent variables [aux(48),s(124)] into aux(48)
 * Joined equivalent variables [s(121),s(125)] into s(121)
 * Renamed intermediate variables: 
[ (eq(146,1),s(116))>>s(128)]

#### Simplifying cost structure of CE 146 
 * Joined equivalent variables [aux(49),aux(47)] into aux(49)
 * Joined equivalent variables [s(121),s(128)] into s(121)
 * Renamed intermediate variables: 
[ (eq(144,1),aux(45))>>s(129), (eq(144,1),s(107))>>s(130)]

#### Simplifying cost structure of CE 144 
 * Renamed intermediate variables: 
[ (eq(147,1),s(118))>>s(131), (eq(147,1),aux(46))>>s(132), (eq(147,1),s(117))>>s(133), (eq(147,1),s(120))>>s(134)]

#### Simplifying cost structure of CE 147 
 * Joined equivalent variables [aux(50),s(129),s(132)] into aux(50)
 * Joined equivalent variables [s(130),s(133)] into s(130)

#### Cost of chains of check_matrix(A,B,C,D,E):
* Chain [142]: 13
  with precondition: [A=1,B=0,D=1,E=1,C>=0] 

* Chain [141]: 32*s(121)+18*s(126)+6*s(127)+20
  Such that:aux(48) =< B
s(123) =< C
aux(49) =< A
s(121) =< aux(49)
s(123) =< aux(48)
s(126) =< aux(48)
s(127) =< s(121)*s(123)

  with precondition: [D=1,E=0,A>=2,B>=1,C>=0] 

* Chain [140]: 32*s(130)+6*s(134)+13
  Such that:s(131) =< B
s(131) =< C
aux(50) =< A
s(130) =< aux(50)
s(134) =< s(130)*s(131)

  with precondition: [D=1,E=1,A>=2,B>=1,C+1>=A] 


#### Simplifying cost structure of CE 149 

#### Simplifying cost structure of CE 148 

#### Cost of chains of and_op(A,B,C):
* Chain [144]: 0
  with precondition: [A=0,C=0,B>=0] 

* Chain [143]: 0
  with precondition: [A=1,B=C,B>=0] 


#### Simplifying cost structure of CE 152 

#### Simplifying cost structure of CE 151 

#### Simplifying cost structure of CE 150 

#### Cost of chains of eq(A,B,C):
* Chain [147]: 0
  with precondition: [C=0,A>=0,B>=A+1] 

* Chain [146]: 0
  with precondition: [C=0,B>=0,A>=B+1] 

* Chain [145]: 0
  with precondition: [C=1,A=B,A>=0] 

 * Renamed intermediate variables: 
[ (eq(153,1),aux(48))>>s(135), (eq(153,1),s(123))>>s(136), (eq(153,1),aux(49))>>s(137), (eq(153,1),s(121))>>s(138), (eq(153,1),s(126))>>s(139), (eq(153,1),s(127))>>s(140)]
 * Renamed intermediate variables: 
[ (eq(153,2),aux(48))>>s(141), (eq(153,2),s(123))>>s(142), (eq(153,2),aux(49))>>s(143), (eq(153,2),s(121))>>s(144), (eq(153,2),s(126))>>s(145), (eq(153,2),s(127))>>s(146)]

#### Simplifying cost structure of CE 153 
 * Renamed intermediate variables: 
[ (eq(154,1),aux(48))>>s(147), (eq(154,1),s(123))>>s(148), (eq(154,1),aux(49))>>s(149), (eq(154,1),s(121))>>s(150), (eq(154,1),s(126))>>s(151), (eq(154,1),s(127))>>s(152)]
 * Renamed intermediate variables: 
[ (eq(154,2),aux(48))>>s(153), (eq(154,2),s(123))>>s(154), (eq(154,2),aux(49))>>s(155), (eq(154,2),s(121))>>s(156), (eq(154,2),s(126))>>s(157), (eq(154,2),s(127))>>s(158)]

#### Simplifying cost structure of CE 154 
 * Renamed intermediate variables: 
[ (eq(155,1),aux(48))>>s(159), (eq(155,1),s(123))>>s(160), (eq(155,1),aux(49))>>s(161), (eq(155,1),s(121))>>s(162), (eq(155,1),s(126))>>s(163), (eq(155,1),s(127))>>s(164)]
 * Renamed intermediate variables: 
[ (eq(155,2),aux(48))>>s(165), (eq(155,2),s(123))>>s(166), (eq(155,2),aux(49))>>s(167), (eq(155,2),s(121))>>s(168), (eq(155,2),s(126))>>s(169), (eq(155,2),s(127))>>s(170)]

#### Simplifying cost structure of CE 155 
 * Renamed intermediate variables: 
[ (eq(156,1),aux(48))>>s(171), (eq(156,1),s(123))>>s(172), (eq(156,1),aux(49))>>s(173), (eq(156,1),s(121))>>s(174), (eq(156,1),s(126))>>s(175), (eq(156,1),s(127))>>s(176)]
 * Renamed intermediate variables: 
[ (eq(156,2),s(131))>>s(177), (eq(156,2),aux(50))>>s(178), (eq(156,2),s(130))>>s(179), (eq(156,2),s(134))>>s(180)]

#### Simplifying cost structure of CE 156 
 * Renamed intermediate variables: 
[ (eq(157,1),aux(48))>>s(181), (eq(157,1),s(123))>>s(182), (eq(157,1),aux(49))>>s(183), (eq(157,1),s(121))>>s(184), (eq(157,1),s(126))>>s(185), (eq(157,1),s(127))>>s(186)]
 * Renamed intermediate variables: 
[ (eq(157,2),s(131))>>s(187), (eq(157,2),aux(50))>>s(188), (eq(157,2),s(130))>>s(189), (eq(157,2),s(134))>>s(190)]

#### Simplifying cost structure of CE 157 
 * Renamed intermediate variables: 
[ (eq(158,1),aux(48))>>s(191), (eq(158,1),s(123))>>s(192), (eq(158,1),aux(49))>>s(193), (eq(158,1),s(121))>>s(194), (eq(158,1),s(126))>>s(195), (eq(158,1),s(127))>>s(196)]
 * Renamed intermediate variables: 
[ (eq(158,2),s(131))>>s(197), (eq(158,2),aux(50))>>s(198), (eq(158,2),s(130))>>s(199), (eq(158,2),s(134))>>s(200)]

#### Simplifying cost structure of CE 158 
 * Renamed intermediate variables: 
[ (eq(159,1),s(131))>>s(201), (eq(159,1),aux(50))>>s(202), (eq(159,1),s(130))>>s(203), (eq(159,1),s(134))>>s(204)]
 * Renamed intermediate variables: 
[ (eq(159,2),aux(48))>>s(205), (eq(159,2),s(123))>>s(206), (eq(159,2),aux(49))>>s(207), (eq(159,2),s(121))>>s(208), (eq(159,2),s(126))>>s(209), (eq(159,2),s(127))>>s(210)]

#### Simplifying cost structure of CE 159 
 * Renamed intermediate variables: 
[ (eq(160,1),s(131))>>s(211), (eq(160,1),aux(50))>>s(212), (eq(160,1),s(130))>>s(213), (eq(160,1),s(134))>>s(214)]
 * Renamed intermediate variables: 
[ (eq(160,2),aux(48))>>s(215), (eq(160,2),s(123))>>s(216), (eq(160,2),aux(49))>>s(217), (eq(160,2),s(121))>>s(218), (eq(160,2),s(126))>>s(219), (eq(160,2),s(127))>>s(220)]

#### Simplifying cost structure of CE 160 
 * Renamed intermediate variables: 
[ (eq(161,1),s(131))>>s(221), (eq(161,1),aux(50))>>s(222), (eq(161,1),s(130))>>s(223), (eq(161,1),s(134))>>s(224)]
 * Renamed intermediate variables: 
[ (eq(161,2),aux(48))>>s(225), (eq(161,2),s(123))>>s(226), (eq(161,2),aux(49))>>s(227), (eq(161,2),s(121))>>s(228), (eq(161,2),s(126))>>s(229), (eq(161,2),s(127))>>s(230)]

#### Simplifying cost structure of CE 161 
 * Renamed intermediate variables: 
[ (eq(162,1),s(131))>>s(231), (eq(162,1),aux(50))>>s(232), (eq(162,1),s(130))>>s(233), (eq(162,1),s(134))>>s(234)]
 * Renamed intermediate variables: 
[ (eq(162,2),s(131))>>s(235), (eq(162,2),aux(50))>>s(236), (eq(162,2),s(130))>>s(237), (eq(162,2),s(134))>>s(238)]

#### Simplifying cost structure of CE 162 
 * Renamed intermediate variables: 
[ (eq(163,1),s(131))>>s(239), (eq(163,1),aux(50))>>s(240), (eq(163,1),s(130))>>s(241), (eq(163,1),s(134))>>s(242)]
 * Renamed intermediate variables: 
[ (eq(163,2),s(131))>>s(243), (eq(163,2),aux(50))>>s(244), (eq(163,2),s(130))>>s(245), (eq(163,2),s(134))>>s(246)]

#### Simplifying cost structure of CE 163 
 * Joined equivalent variables [aux(51),s(137),s(149),s(161),s(173),s(183),s(193),s(202),s(212),s(222),s(232),s(240)] into aux(51)
 * Joined equivalent variables [aux(52),s(135),s(147),s(159),s(171),s(181),s(191)] into aux(52)
 * Joined equivalent variables [aux(54),s(143),s(155),s(167),s(178),s(188),s(198),s(207),s(217),s(227),s(236),s(244)] into aux(54)
 * Joined equivalent variables [aux(55),s(141),s(153),s(165),s(205),s(215),s(225)] into aux(55)
 * Joined equivalent variables [s(201),s(211),s(221),s(231),s(239)] into s(201)
 * Joined equivalent variables [s(177),s(187),s(197),s(235),s(243)] into s(177)
 * Joined equivalent variables [s(138),s(150),s(162),s(174),s(184),s(194),s(203),s(213),s(223),s(233),s(241)] into s(138)
 * Joined equivalent variables [s(139),s(151),s(163),s(175),s(185),s(195)] into s(139)
 * Joined equivalent variables [s(144),s(156),s(168),s(179),s(189),s(199),s(208),s(218),s(228),s(237),s(245)] into s(144)
 * Joined equivalent variables [s(145),s(157),s(169),s(209),s(219),s(229)] into s(145)
 * Joined equivalent variables [s(136),s(148),s(160),s(172),s(182),s(192)] into s(136)
 * Joined equivalent variables [s(142),s(154),s(166),s(206),s(216),s(226)] into s(142)
 * Joined equivalent variables [s(146),s(158),s(170),s(210),s(220),s(230)] into s(146)
 * Joined equivalent variables [s(140),s(152),s(164),s(176),s(186),s(196)] into s(140)
 * Joined equivalent variables [s(180),s(190),s(200),s(238),s(246)] into s(180)
 * Joined equivalent variables [s(204),s(214),s(224),s(234),s(242)] into s(204)
 * Joined equivalent variables [s(136),s(201)] into s(136)
 * Joined equivalent variables [s(142),s(177)] into s(142)
 * Joined equivalent variables [s(146),s(180)] into s(146)
 * Joined equivalent variables [s(140),s(204)] into s(140)
 * Renamed intermediate variables: 
[ (eq(164,1),s(131))>>s(247), (eq(164,1),aux(50))>>s(248), (eq(164,1),s(130))>>s(249), (eq(164,1),s(134))>>s(250)]
 * Renamed intermediate variables: 
[ (eq(164,2),s(131))>>s(251), (eq(164,2),aux(50))>>s(252), (eq(164,2),s(130))>>s(253), (eq(164,2),s(134))>>s(254)]

#### Simplifying cost structure of CE 164 

#### Cost of chains of check_mult_sanity(A,B,C,D,E,F,G,H,I):
* Chain [149]: 352*s(138)+108*s(139)+66*s(140)+352*s(144)+108*s(145)+66*s(146)+49
  Such that:aux(51) =< A
aux(52) =< B
aux(53) =< C
aux(54) =< E
aux(55) =< F
aux(56) =< G
s(136) =< aux(52)
s(136) =< aux(53)
s(142) =< aux(55)
s(142) =< aux(56)
s(144) =< aux(54)
s(145) =< aux(55)
s(146) =< s(144)*s(142)
s(138) =< aux(51)
s(139) =< aux(52)
s(140) =< s(138)*s(136)

  with precondition: [D=1,H=1,I=0,A>=2,B>=1,C>=0,E>=2,F>=1,G>=0] 

* Chain [148]: 32*s(249)+6*s(250)+32*s(253)+6*s(254)+35
  Such that:s(248) =< A
s(247) =< B
s(247) =< C
s(252) =< E
s(251) =< F
s(251) =< G
s(253) =< s(252)
s(254) =< s(253)*s(251)
s(249) =< s(248)
s(250) =< s(249)*s(247)

  with precondition: [D=1,H=1,I=1,A>=2,B>=1,E>=2,F>=1,C+1>=A,G+1>=E] 

 * Renamed intermediate variables: 
[ (eq(169,1),aux(48))>>s(255), (eq(169,1),s(123))>>s(256), (eq(169,1),aux(49))>>s(257), (eq(169,1),s(121))>>s(258), (eq(169,1),s(126))>>s(259), (eq(169,1),s(127))>>s(260)]
 * Renamed intermediate variables: 
[ (eq(169,2),aux(48))>>s(261), (eq(169,2),s(123))>>s(262), (eq(169,2),aux(49))>>s(263), (eq(169,2),s(121))>>s(264), (eq(169,2),s(126))>>s(265), (eq(169,2),s(127))>>s(266)]

#### Simplifying cost structure of CE 169 
 * Renamed intermediate variables: 
[ (eq(178,1),aux(48))>>s(267), (eq(178,1),s(123))>>s(268), (eq(178,1),aux(49))>>s(269), (eq(178,1),s(121))>>s(270), (eq(178,1),s(126))>>s(271), (eq(178,1),s(127))>>s(272)]
 * Renamed intermediate variables: 
[ (eq(178,2),s(131))>>s(273), (eq(178,2),aux(50))>>s(274), (eq(178,2),s(130))>>s(275), (eq(178,2),s(134))>>s(276)]

#### Simplifying cost structure of CE 178 
 * Renamed intermediate variables: 
[ (eq(187,1),s(131))>>s(277), (eq(187,1),aux(50))>>s(278), (eq(187,1),s(130))>>s(279), (eq(187,1),s(134))>>s(280)]
 * Renamed intermediate variables: 
[ (eq(187,2),aux(48))>>s(281), (eq(187,2),s(123))>>s(282), (eq(187,2),aux(49))>>s(283), (eq(187,2),s(121))>>s(284), (eq(187,2),s(126))>>s(285), (eq(187,2),s(127))>>s(286)]

#### Simplifying cost structure of CE 187 
 * Renamed intermediate variables: 
[ (eq(196,1),s(131))>>s(287), (eq(196,1),aux(50))>>s(288), (eq(196,1),s(130))>>s(289), (eq(196,1),s(134))>>s(290)]
 * Renamed intermediate variables: 
[ (eq(196,2),s(131))>>s(291), (eq(196,2),aux(50))>>s(292), (eq(196,2),s(130))>>s(293), (eq(196,2),s(134))>>s(294)]

#### Simplifying cost structure of CE 196 
 * Joined equivalent variables [aux(57),s(257),s(269),s(278),s(288)] into aux(57)
 * Joined equivalent variables [aux(58),s(255),s(267)] into aux(58)
 * Joined equivalent variables [aux(60),s(263),s(274),s(283),s(292)] into aux(60)
 * Joined equivalent variables [aux(61),s(261),s(281)] into aux(61)
 * Joined equivalent variables [s(277),s(287)] into s(277)
 * Joined equivalent variables [s(273),s(291)] into s(273)
 * Joined equivalent variables [s(258),s(270),s(279),s(289)] into s(258)
 * Joined equivalent variables [s(259),s(271)] into s(259)
 * Joined equivalent variables [s(264),s(275),s(284),s(293)] into s(264)
 * Joined equivalent variables [s(265),s(285)] into s(265)
 * Joined equivalent variables [s(256),s(268)] into s(256)
 * Joined equivalent variables [s(262),s(282)] into s(262)
 * Joined equivalent variables [s(266),s(286)] into s(266)
 * Joined equivalent variables [s(260),s(272)] into s(260)
 * Joined equivalent variables [s(276),s(294)] into s(276)
 * Joined equivalent variables [s(280),s(290)] into s(280)
 * Joined equivalent variables [s(256),s(277)] into s(256)
 * Joined equivalent variables [s(262),s(273)] into s(262)
 * Joined equivalent variables [s(266),s(276)] into s(266)
 * Joined equivalent variables [s(260),s(280)] into s(260)
 * Renamed intermediate variables: 
[ (eq(165,1),aux(48))>>s(295), (eq(165,1),s(123))>>s(296), (eq(165,1),aux(49))>>s(297), (eq(165,1),s(121))>>s(298), (eq(165,1),s(126))>>s(299), (eq(165,1),s(127))>>s(300)]
 * Renamed intermediate variables: 
[ (eq(165,2),aux(48))>>s(301), (eq(165,2),s(123))>>s(302), (eq(165,2),aux(49))>>s(303), (eq(165,2),s(121))>>s(304), (eq(165,2),s(126))>>s(305), (eq(165,2),s(127))>>s(306)]

#### Simplifying cost structure of CE 165 
 * Renamed intermediate variables: 
[ (eq(167,1),aux(48))>>s(307), (eq(167,1),s(123))>>s(308), (eq(167,1),aux(49))>>s(309), (eq(167,1),s(121))>>s(310), (eq(167,1),s(126))>>s(311), (eq(167,1),s(127))>>s(312)]
 * Renamed intermediate variables: 
[ (eq(167,2),aux(48))>>s(313), (eq(167,2),s(123))>>s(314), (eq(167,2),aux(49))>>s(315), (eq(167,2),s(121))>>s(316), (eq(167,2),s(126))>>s(317), (eq(167,2),s(127))>>s(318)]

#### Simplifying cost structure of CE 167 
 * Renamed intermediate variables: 
[ (eq(171,1),aux(48))>>s(319), (eq(171,1),s(123))>>s(320), (eq(171,1),aux(49))>>s(321), (eq(171,1),s(121))>>s(322), (eq(171,1),s(126))>>s(323), (eq(171,1),s(127))>>s(324)]
 * Renamed intermediate variables: 
[ (eq(171,2),aux(48))>>s(325), (eq(171,2),s(123))>>s(326), (eq(171,2),aux(49))>>s(327), (eq(171,2),s(121))>>s(328), (eq(171,2),s(126))>>s(329), (eq(171,2),s(127))>>s(330)]

#### Simplifying cost structure of CE 171 
 * Renamed intermediate variables: 
[ (eq(173,1),aux(48))>>s(331), (eq(173,1),s(123))>>s(332), (eq(173,1),aux(49))>>s(333), (eq(173,1),s(121))>>s(334), (eq(173,1),s(126))>>s(335), (eq(173,1),s(127))>>s(336)]
 * Renamed intermediate variables: 
[ (eq(173,2),aux(48))>>s(337), (eq(173,2),s(123))>>s(338), (eq(173,2),aux(49))>>s(339), (eq(173,2),s(121))>>s(340), (eq(173,2),s(126))>>s(341), (eq(173,2),s(127))>>s(342)]

#### Simplifying cost structure of CE 173 
 * Renamed intermediate variables: 
[ (eq(183,1),s(131))>>s(343), (eq(183,1),aux(50))>>s(344), (eq(183,1),s(130))>>s(345), (eq(183,1),s(134))>>s(346)]
 * Renamed intermediate variables: 
[ (eq(183,2),aux(48))>>s(347), (eq(183,2),s(123))>>s(348), (eq(183,2),aux(49))>>s(349), (eq(183,2),s(121))>>s(350), (eq(183,2),s(126))>>s(351), (eq(183,2),s(127))>>s(352)]

#### Simplifying cost structure of CE 183 
 * Renamed intermediate variables: 
[ (eq(185,1),s(131))>>s(353), (eq(185,1),aux(50))>>s(354), (eq(185,1),s(130))>>s(355), (eq(185,1),s(134))>>s(356)]
 * Renamed intermediate variables: 
[ (eq(185,2),aux(48))>>s(357), (eq(185,2),s(123))>>s(358), (eq(185,2),aux(49))>>s(359), (eq(185,2),s(121))>>s(360), (eq(185,2),s(126))>>s(361), (eq(185,2),s(127))>>s(362)]

#### Simplifying cost structure of CE 185 
 * Renamed intermediate variables: 
[ (eq(189,1),s(131))>>s(363), (eq(189,1),aux(50))>>s(364), (eq(189,1),s(130))>>s(365), (eq(189,1),s(134))>>s(366)]
 * Renamed intermediate variables: 
[ (eq(189,2),aux(48))>>s(367), (eq(189,2),s(123))>>s(368), (eq(189,2),aux(49))>>s(369), (eq(189,2),s(121))>>s(370), (eq(189,2),s(126))>>s(371), (eq(189,2),s(127))>>s(372)]

#### Simplifying cost structure of CE 189 
 * Renamed intermediate variables: 
[ (eq(191,1),s(131))>>s(373), (eq(191,1),aux(50))>>s(374), (eq(191,1),s(130))>>s(375), (eq(191,1),s(134))>>s(376)]
 * Renamed intermediate variables: 
[ (eq(191,2),aux(48))>>s(377), (eq(191,2),s(123))>>s(378), (eq(191,2),aux(49))>>s(379), (eq(191,2),s(121))>>s(380), (eq(191,2),s(126))>>s(381), (eq(191,2),s(127))>>s(382)]

#### Simplifying cost structure of CE 191 
 * Renamed intermediate variables: 
[ (eq(192,1),s(131))>>s(383), (eq(192,1),aux(50))>>s(384), (eq(192,1),s(130))>>s(385), (eq(192,1),s(134))>>s(386)]
 * Renamed intermediate variables: 
[ (eq(192,2),s(131))>>s(387), (eq(192,2),aux(50))>>s(388), (eq(192,2),s(130))>>s(389), (eq(192,2),s(134))>>s(390)]

#### Simplifying cost structure of CE 192 
 * Renamed intermediate variables: 
[ (eq(198,1),s(131))>>s(391), (eq(198,1),aux(50))>>s(392), (eq(198,1),s(130))>>s(393), (eq(198,1),s(134))>>s(394)]
 * Renamed intermediate variables: 
[ (eq(198,2),s(131))>>s(395), (eq(198,2),aux(50))>>s(396), (eq(198,2),s(130))>>s(397), (eq(198,2),s(134))>>s(398)]

#### Simplifying cost structure of CE 198 
 * Joined equivalent variables [aux(63),s(297),s(309),s(321),s(333),s(344),s(354),s(364),s(374),s(384),s(392)] into aux(63)
 * Joined equivalent variables [aux(64),s(295),s(307),s(319),s(331)] into aux(64)
 * Joined equivalent variables [aux(66),s(303),s(315),s(327),s(339),s(349),s(359),s(369),s(379),s(388),s(396)] into aux(66)
 * Joined equivalent variables [aux(67),s(301),s(313),s(325),s(337),s(347),s(357),s(367),s(377)] into aux(67)
 * Joined equivalent variables [s(343),s(353),s(363),s(373),s(383),s(391)] into s(343)
 * Joined equivalent variables [s(387),s(395)] into s(387)
 * Joined equivalent variables [s(298),s(310),s(322),s(334),s(345),s(355),s(365),s(375),s(385),s(393)] into s(298)
 * Joined equivalent variables [s(299),s(311),s(323),s(335)] into s(299)
 * Joined equivalent variables [s(304),s(316),s(328),s(340),s(350),s(360),s(370),s(380),s(389),s(397)] into s(304)
 * Joined equivalent variables [s(305),s(317),s(329),s(341),s(351),s(361),s(371),s(381)] into s(305)
 * Joined equivalent variables [s(296),s(308),s(320),s(332)] into s(296)
 * Joined equivalent variables [s(302),s(314),s(326),s(338),s(348),s(358),s(368),s(378)] into s(302)
 * Joined equivalent variables [s(306),s(318),s(330),s(342),s(352),s(362),s(372),s(382)] into s(306)
 * Joined equivalent variables [s(300),s(312),s(324),s(336)] into s(300)
 * Joined equivalent variables [s(346),s(356),s(366),s(376),s(386),s(394)] into s(346)
 * Joined equivalent variables [s(390),s(398)] into s(390)
 * Joined equivalent variables [s(296),s(343)] into s(296)
 * Joined equivalent variables [s(302),s(387)] into s(302)
 * Joined equivalent variables [s(306),s(390)] into s(306)
 * Joined equivalent variables [s(300),s(346)] into s(300)
 * Renamed intermediate variables: 
[ (eq(174,1),aux(48))>>s(399), (eq(174,1),s(123))>>s(400), (eq(174,1),aux(49))>>s(401), (eq(174,1),s(121))>>s(402), (eq(174,1),s(126))>>s(403), (eq(174,1),s(127))>>s(404)]
 * Renamed intermediate variables: 
[ (eq(174,2),s(131))>>s(405), (eq(174,2),aux(50))>>s(406), (eq(174,2),s(130))>>s(407), (eq(174,2),s(134))>>s(408)]

#### Simplifying cost structure of CE 174 
 * Renamed intermediate variables: 
[ (eq(176,1),aux(48))>>s(409), (eq(176,1),s(123))>>s(410), (eq(176,1),aux(49))>>s(411), (eq(176,1),s(121))>>s(412), (eq(176,1),s(126))>>s(413), (eq(176,1),s(127))>>s(414)]
 * Renamed intermediate variables: 
[ (eq(176,2),s(131))>>s(415), (eq(176,2),aux(50))>>s(416), (eq(176,2),s(130))>>s(417), (eq(176,2),s(134))>>s(418)]

#### Simplifying cost structure of CE 176 
 * Renamed intermediate variables: 
[ (eq(180,1),aux(48))>>s(419), (eq(180,1),s(123))>>s(420), (eq(180,1),aux(49))>>s(421), (eq(180,1),s(121))>>s(422), (eq(180,1),s(126))>>s(423), (eq(180,1),s(127))>>s(424)]
 * Renamed intermediate variables: 
[ (eq(180,2),s(131))>>s(425), (eq(180,2),aux(50))>>s(426), (eq(180,2),s(130))>>s(427), (eq(180,2),s(134))>>s(428)]

#### Simplifying cost structure of CE 180 
 * Renamed intermediate variables: 
[ (eq(182,1),aux(48))>>s(429), (eq(182,1),s(123))>>s(430), (eq(182,1),aux(49))>>s(431), (eq(182,1),s(121))>>s(432), (eq(182,1),s(126))>>s(433), (eq(182,1),s(127))>>s(434)]
 * Renamed intermediate variables: 
[ (eq(182,2),s(131))>>s(435), (eq(182,2),aux(50))>>s(436), (eq(182,2),s(130))>>s(437), (eq(182,2),s(134))>>s(438)]

#### Simplifying cost structure of CE 182 
 * Renamed intermediate variables: 
[ (eq(194,1),s(131))>>s(439), (eq(194,1),aux(50))>>s(440), (eq(194,1),s(130))>>s(441), (eq(194,1),s(134))>>s(442)]
 * Renamed intermediate variables: 
[ (eq(194,2),s(131))>>s(443), (eq(194,2),aux(50))>>s(444), (eq(194,2),s(130))>>s(445), (eq(194,2),s(134))>>s(446)]

#### Simplifying cost structure of CE 194 
 * Joined equivalent variables [aux(69),s(401),s(411),s(421),s(431),s(440)] into aux(69)
 * Joined equivalent variables [aux(70),s(399),s(409),s(419),s(429)] into aux(70)
 * Joined equivalent variables [aux(72),s(406),s(416),s(426),s(436),s(444)] into aux(72)
 * Joined equivalent variables [s(405),s(415),s(425),s(435),s(443)] into s(405)
 * Joined equivalent variables [s(402),s(412),s(422),s(432),s(441)] into s(402)
 * Joined equivalent variables [s(403),s(413),s(423),s(433)] into s(403)
 * Joined equivalent variables [s(407),s(417),s(427),s(437),s(445)] into s(407)
 * Joined equivalent variables [s(400),s(410),s(420),s(430),s(439)] into s(400)
 * Joined equivalent variables [s(408),s(418),s(428),s(438),s(446)] into s(408)
 * Joined equivalent variables [s(404),s(414),s(424),s(434),s(442)] into s(404)
 * Renamed intermediate variables: 
[ (eq(166,1),aux(48))>>s(447), (eq(166,1),s(123))>>s(448), (eq(166,1),aux(49))>>s(449), (eq(166,1),s(121))>>s(450), (eq(166,1),s(126))>>s(451), (eq(166,1),s(127))>>s(452)]
 * Renamed intermediate variables: 
[ (eq(166,2),aux(48))>>s(453), (eq(166,2),s(123))>>s(454), (eq(166,2),aux(49))>>s(455), (eq(166,2),s(121))>>s(456), (eq(166,2),s(126))>>s(457), (eq(166,2),s(127))>>s(458)]

#### Simplifying cost structure of CE 166 
 * Renamed intermediate variables: 
[ (eq(172,1),aux(48))>>s(459), (eq(172,1),s(123))>>s(460), (eq(172,1),aux(49))>>s(461), (eq(172,1),s(121))>>s(462), (eq(172,1),s(126))>>s(463), (eq(172,1),s(127))>>s(464)]
 * Renamed intermediate variables: 
[ (eq(172,2),aux(48))>>s(465), (eq(172,2),s(123))>>s(466), (eq(172,2),aux(49))>>s(467), (eq(172,2),s(121))>>s(468), (eq(172,2),s(126))>>s(469), (eq(172,2),s(127))>>s(470)]

#### Simplifying cost structure of CE 172 
 * Renamed intermediate variables: 
[ (eq(184,1),s(131))>>s(471), (eq(184,1),aux(50))>>s(472), (eq(184,1),s(130))>>s(473), (eq(184,1),s(134))>>s(474)]
 * Renamed intermediate variables: 
[ (eq(184,2),aux(48))>>s(475), (eq(184,2),s(123))>>s(476), (eq(184,2),aux(49))>>s(477), (eq(184,2),s(121))>>s(478), (eq(184,2),s(126))>>s(479), (eq(184,2),s(127))>>s(480)]

#### Simplifying cost structure of CE 184 
 * Renamed intermediate variables: 
[ (eq(190,1),s(131))>>s(481), (eq(190,1),aux(50))>>s(482), (eq(190,1),s(130))>>s(483), (eq(190,1),s(134))>>s(484)]
 * Renamed intermediate variables: 
[ (eq(190,2),aux(48))>>s(485), (eq(190,2),s(123))>>s(486), (eq(190,2),aux(49))>>s(487), (eq(190,2),s(121))>>s(488), (eq(190,2),s(126))>>s(489), (eq(190,2),s(127))>>s(490)]

#### Simplifying cost structure of CE 190 
 * Renamed intermediate variables: 
[ (eq(193,1),s(131))>>s(491), (eq(193,1),aux(50))>>s(492), (eq(193,1),s(130))>>s(493), (eq(193,1),s(134))>>s(494)]
 * Renamed intermediate variables: 
[ (eq(193,2),s(131))>>s(495), (eq(193,2),aux(50))>>s(496), (eq(193,2),s(130))>>s(497), (eq(193,2),s(134))>>s(498)]

#### Simplifying cost structure of CE 193 
 * Renamed intermediate variables: 
[ (eq(199,1),s(131))>>s(499), (eq(199,1),aux(50))>>s(500), (eq(199,1),s(130))>>s(501), (eq(199,1),s(134))>>s(502)]
 * Renamed intermediate variables: 
[ (eq(199,2),s(131))>>s(503), (eq(199,2),aux(50))>>s(504), (eq(199,2),s(130))>>s(505), (eq(199,2),s(134))>>s(506)]

#### Simplifying cost structure of CE 199 
 * Joined equivalent variables [aux(75),s(449),s(461),s(472),s(482),s(492),s(500)] into aux(75)
 * Joined equivalent variables [aux(76),s(447),s(459)] into aux(76)
 * Joined equivalent variables [aux(78),s(455),s(467),s(477),s(487),s(496),s(504)] into aux(78)
 * Joined equivalent variables [aux(79),s(453),s(465),s(475),s(485)] into aux(79)
 * Joined equivalent variables [s(471),s(481),s(491),s(499)] into s(471)
 * Joined equivalent variables [s(495),s(503)] into s(495)
 * Joined equivalent variables [s(450),s(462),s(473),s(483),s(493),s(501)] into s(450)
 * Joined equivalent variables [s(451),s(463)] into s(451)
 * Joined equivalent variables [s(456),s(468),s(478),s(488),s(497),s(505)] into s(456)
 * Joined equivalent variables [s(457),s(469),s(479),s(489)] into s(457)
 * Joined equivalent variables [s(448),s(460)] into s(448)
 * Joined equivalent variables [s(454),s(466),s(476),s(486)] into s(454)
 * Joined equivalent variables [s(458),s(470),s(480),s(490)] into s(458)
 * Joined equivalent variables [s(452),s(464)] into s(452)
 * Joined equivalent variables [s(474),s(484),s(494),s(502)] into s(474)
 * Joined equivalent variables [s(498),s(506)] into s(498)
 * Joined equivalent variables [s(448),s(471)] into s(448)
 * Joined equivalent variables [s(454),s(495)] into s(454)
 * Joined equivalent variables [s(458),s(498)] into s(458)
 * Joined equivalent variables [s(452),s(474)] into s(452)
 * Renamed intermediate variables: 
[ (eq(175,1),aux(48))>>s(507), (eq(175,1),s(123))>>s(508), (eq(175,1),aux(49))>>s(509), (eq(175,1),s(121))>>s(510), (eq(175,1),s(126))>>s(511), (eq(175,1),s(127))>>s(512)]
 * Renamed intermediate variables: 
[ (eq(175,2),s(131))>>s(513), (eq(175,2),aux(50))>>s(514), (eq(175,2),s(130))>>s(515), (eq(175,2),s(134))>>s(516)]

#### Simplifying cost structure of CE 175 
 * Renamed intermediate variables: 
[ (eq(181,1),aux(48))>>s(517), (eq(181,1),s(123))>>s(518), (eq(181,1),aux(49))>>s(519), (eq(181,1),s(121))>>s(520), (eq(181,1),s(126))>>s(521), (eq(181,1),s(127))>>s(522)]
 * Renamed intermediate variables: 
[ (eq(181,2),s(131))>>s(523), (eq(181,2),aux(50))>>s(524), (eq(181,2),s(130))>>s(525), (eq(181,2),s(134))>>s(526)]

#### Simplifying cost structure of CE 181 
 * Joined equivalent variables [aux(81),s(509),s(519)] into aux(81)
 * Joined equivalent variables [aux(82),s(507),s(517)] into aux(82)
 * Joined equivalent variables [aux(84),s(514),s(524)] into aux(84)
 * Joined equivalent variables [s(513),s(523)] into s(513)
 * Joined equivalent variables [s(510),s(520)] into s(510)
 * Joined equivalent variables [s(511),s(521)] into s(511)
 * Joined equivalent variables [s(515),s(525)] into s(515)
 * Joined equivalent variables [s(508),s(518)] into s(508)
 * Joined equivalent variables [s(516),s(526)] into s(516)
 * Joined equivalent variables [s(512),s(522)] into s(512)
 * Renamed intermediate variables: 
[ (eq(168,1),aux(48))>>s(527), (eq(168,1),s(123))>>s(528), (eq(168,1),aux(49))>>s(529), (eq(168,1),s(121))>>s(530), (eq(168,1),s(126))>>s(531), (eq(168,1),s(127))>>s(532)]
 * Renamed intermediate variables: 
[ (eq(168,2),aux(48))>>s(533), (eq(168,2),s(123))>>s(534), (eq(168,2),aux(49))>>s(535), (eq(168,2),s(121))>>s(536), (eq(168,2),s(126))>>s(537), (eq(168,2),s(127))>>s(538)]

#### Simplifying cost structure of CE 168 
 * Renamed intermediate variables: 
[ (eq(170,1),aux(48))>>s(539), (eq(170,1),s(123))>>s(540), (eq(170,1),aux(49))>>s(541), (eq(170,1),s(121))>>s(542), (eq(170,1),s(126))>>s(543), (eq(170,1),s(127))>>s(544)]
 * Renamed intermediate variables: 
[ (eq(170,2),aux(48))>>s(545), (eq(170,2),s(123))>>s(546), (eq(170,2),aux(49))>>s(547), (eq(170,2),s(121))>>s(548), (eq(170,2),s(126))>>s(549), (eq(170,2),s(127))>>s(550)]

#### Simplifying cost structure of CE 170 
 * Renamed intermediate variables: 
[ (eq(186,1),s(131))>>s(551), (eq(186,1),aux(50))>>s(552), (eq(186,1),s(130))>>s(553), (eq(186,1),s(134))>>s(554)]
 * Renamed intermediate variables: 
[ (eq(186,2),aux(48))>>s(555), (eq(186,2),s(123))>>s(556), (eq(186,2),aux(49))>>s(557), (eq(186,2),s(121))>>s(558), (eq(186,2),s(126))>>s(559), (eq(186,2),s(127))>>s(560)]

#### Simplifying cost structure of CE 186 
 * Renamed intermediate variables: 
[ (eq(188,1),s(131))>>s(561), (eq(188,1),aux(50))>>s(562), (eq(188,1),s(130))>>s(563), (eq(188,1),s(134))>>s(564)]
 * Renamed intermediate variables: 
[ (eq(188,2),aux(48))>>s(565), (eq(188,2),s(123))>>s(566), (eq(188,2),aux(49))>>s(567), (eq(188,2),s(121))>>s(568), (eq(188,2),s(126))>>s(569), (eq(188,2),s(127))>>s(570)]

#### Simplifying cost structure of CE 188 
 * Renamed intermediate variables: 
[ (eq(195,1),s(131))>>s(571), (eq(195,1),aux(50))>>s(572), (eq(195,1),s(130))>>s(573), (eq(195,1),s(134))>>s(574)]
 * Renamed intermediate variables: 
[ (eq(195,2),s(131))>>s(575), (eq(195,2),aux(50))>>s(576), (eq(195,2),s(130))>>s(577), (eq(195,2),s(134))>>s(578)]

#### Simplifying cost structure of CE 195 
 * Renamed intermediate variables: 
[ (eq(197,1),s(131))>>s(579), (eq(197,1),aux(50))>>s(580), (eq(197,1),s(130))>>s(581), (eq(197,1),s(134))>>s(582)]
 * Renamed intermediate variables: 
[ (eq(197,2),s(131))>>s(583), (eq(197,2),aux(50))>>s(584), (eq(197,2),s(130))>>s(585), (eq(197,2),s(134))>>s(586)]

#### Simplifying cost structure of CE 197 
 * Joined equivalent variables [aux(87),s(529),s(541),s(552),s(562),s(572),s(580)] into aux(87)
 * Joined equivalent variables [aux(88),s(527),s(539)] into aux(88)
 * Joined equivalent variables [aux(90),s(535),s(547),s(557),s(567),s(576),s(584)] into aux(90)
 * Joined equivalent variables [aux(91),s(533),s(545),s(555),s(565)] into aux(91)
 * Joined equivalent variables [s(551),s(561),s(571),s(579)] into s(551)
 * Joined equivalent variables [s(575),s(583)] into s(575)
 * Joined equivalent variables [s(530),s(542),s(553),s(563),s(573),s(581)] into s(530)
 * Joined equivalent variables [s(531),s(543)] into s(531)
 * Joined equivalent variables [s(536),s(548),s(558),s(568),s(577),s(585)] into s(536)
 * Joined equivalent variables [s(537),s(549),s(559),s(569)] into s(537)
 * Joined equivalent variables [s(528),s(540)] into s(528)
 * Joined equivalent variables [s(534),s(546),s(556),s(566)] into s(534)
 * Joined equivalent variables [s(538),s(550),s(560),s(570)] into s(538)
 * Joined equivalent variables [s(532),s(544)] into s(532)
 * Joined equivalent variables [s(554),s(564),s(574),s(582)] into s(554)
 * Joined equivalent variables [s(578),s(586)] into s(578)
 * Joined equivalent variables [s(528),s(551)] into s(528)
 * Joined equivalent variables [s(534),s(575)] into s(534)
 * Joined equivalent variables [s(538),s(578)] into s(538)
 * Joined equivalent variables [s(532),s(554)] into s(532)
 * Renamed intermediate variables: 
[ (eq(177,1),aux(48))>>s(587), (eq(177,1),s(123))>>s(588), (eq(177,1),aux(49))>>s(589), (eq(177,1),s(121))>>s(590), (eq(177,1),s(126))>>s(591), (eq(177,1),s(127))>>s(592)]
 * Renamed intermediate variables: 
[ (eq(177,2),s(131))>>s(593), (eq(177,2),aux(50))>>s(594), (eq(177,2),s(130))>>s(595), (eq(177,2),s(134))>>s(596)]

#### Simplifying cost structure of CE 177 
 * Renamed intermediate variables: 
[ (eq(179,1),aux(48))>>s(597), (eq(179,1),s(123))>>s(598), (eq(179,1),aux(49))>>s(599), (eq(179,1),s(121))>>s(600), (eq(179,1),s(126))>>s(601), (eq(179,1),s(127))>>s(602)]
 * Renamed intermediate variables: 
[ (eq(179,2),s(131))>>s(603), (eq(179,2),aux(50))>>s(604), (eq(179,2),s(130))>>s(605), (eq(179,2),s(134))>>s(606)]

#### Simplifying cost structure of CE 179 
 * Joined equivalent variables [aux(93),s(589),s(599)] into aux(93)
 * Joined equivalent variables [aux(94),s(587),s(597)] into aux(94)
 * Joined equivalent variables [aux(96),s(594),s(604)] into aux(96)
 * Joined equivalent variables [s(593),s(603)] into s(593)
 * Joined equivalent variables [s(590),s(600)] into s(590)
 * Joined equivalent variables [s(591),s(601)] into s(591)
 * Joined equivalent variables [s(595),s(605)] into s(595)
 * Joined equivalent variables [s(588),s(598)] into s(588)
 * Joined equivalent variables [s(596),s(606)] into s(596)
 * Joined equivalent variables [s(592),s(602)] into s(592)
 * Renamed intermediate variables: 
[ (eq(200,1),s(131))>>s(607), (eq(200,1),aux(50))>>s(608), (eq(200,1),s(130))>>s(609), (eq(200,1),s(134))>>s(610)]
 * Renamed intermediate variables: 
[ (eq(200,2),s(131))>>s(611), (eq(200,2),aux(50))>>s(612), (eq(200,2),s(130))>>s(613), (eq(200,2),s(134))>>s(614)]

#### Simplifying cost structure of CE 200 
 * Renamed intermediate variables: 
[ (ch([155]),aux(69))>>s(615), (ch([155]),aux(70))>>s(616), (ch([155]),aux(71))>>s(617), (ch([155]),aux(72))>>s(618), (ch([155]),aux(73))>>s(619), (ch([155]),aux(74))>>s(620), (ch([155]),s(400))>>s(621), (ch([155]),s(405))>>s(622), (ch([155]),s(407))>>s(623), (ch([155]),s(408))>>s(624), (ch([155]),s(402))>>s(625), (ch([155]),s(403))>>s(626), (ch([155]),s(404))>>s(627)]
 * Renamed intermediate variables: 
[ (ch([156]),aux(63))>>s(628), (ch([156]),aux(64))>>s(629), (ch([156]),aux(65))>>s(630), (ch([156]),aux(66))>>s(631), (ch([156]),aux(67))>>s(632), (ch([156]),aux(68))>>s(633), (ch([156]),s(296))>>s(634), (ch([156]),s(302))>>s(635), (ch([156]),s(304))>>s(636), (ch([156]),s(305))>>s(637), (ch([156]),s(306))>>s(638), (ch([156]),s(298))>>s(639), (ch([156]),s(299))>>s(640), (ch([156]),s(300))>>s(641)]
 * Joined equivalent variables [aux(99),s(615),s(628)] into aux(99)
 * Joined equivalent variables [aux(100),s(616),s(629)] into aux(100)
 * Joined equivalent variables [aux(101),s(617),s(630)] into aux(101)
 * Joined equivalent variables [aux(102),s(618),s(631)] into aux(102)
 * Joined equivalent variables [aux(103),s(619),s(632)] into aux(103)
 * Joined equivalent variables [aux(104),s(620),s(633)] into aux(104)
 * Joined equivalent variables [s(625),s(639)] into s(625)
 * Joined equivalent variables [s(626),s(640)] into s(626)
 * Joined equivalent variables [s(623),s(636)] into s(623)
 * Joined equivalent variables [s(621),s(634)] into s(621)
 * Joined equivalent variables [s(622),s(635)] into s(622)
 * Joined equivalent variables [s(624),s(638)] into s(624)
 * Joined equivalent variables [s(627),s(641)] into s(627)
 * Renamed intermediate variables: 
[ (ch([153]),aux(81))>>s(642), (ch([153]),aux(82))>>s(643), (ch([153]),aux(83))>>s(644), (ch([153]),aux(84))>>s(645), (ch([153]),aux(85))>>s(646), (ch([153]),aux(86))>>s(647), (ch([153]),s(508))>>s(648), (ch([153]),s(513))>>s(649), (ch([153]),s(515))>>s(650), (ch([153]),s(516))>>s(651), (ch([153]),s(510))>>s(652), (ch([153]),s(511))>>s(653), (ch([153]),s(512))>>s(654)]
 * Renamed intermediate variables: 
[ (ch([154]),aux(75))>>s(655), (ch([154]),aux(76))>>s(656), (ch([154]),aux(77))>>s(657), (ch([154]),aux(78))>>s(658), (ch([154]),aux(79))>>s(659), (ch([154]),aux(80))>>s(660), (ch([154]),s(448))>>s(661), (ch([154]),s(454))>>s(662), (ch([154]),s(456))>>s(663), (ch([154]),s(457))>>s(664), (ch([154]),s(458))>>s(665), (ch([154]),s(450))>>s(666), (ch([154]),s(451))>>s(667), (ch([154]),s(452))>>s(668)]
 * Joined equivalent variables [aux(105),s(642),s(655)] into aux(105)
 * Joined equivalent variables [aux(106),s(643),s(656)] into aux(106)
 * Joined equivalent variables [aux(107),s(644),s(657)] into aux(107)
 * Joined equivalent variables [aux(108),s(645),s(658)] into aux(108)
 * Joined equivalent variables [aux(109),s(646),s(659)] into aux(109)
 * Joined equivalent variables [aux(110),s(647),s(660)] into aux(110)
 * Joined equivalent variables [s(652),s(666)] into s(652)
 * Joined equivalent variables [s(653),s(667)] into s(653)
 * Joined equivalent variables [s(650),s(663)] into s(650)
 * Joined equivalent variables [s(648),s(661)] into s(648)
 * Joined equivalent variables [s(649),s(662)] into s(649)
 * Joined equivalent variables [s(651),s(665)] into s(651)
 * Joined equivalent variables [s(654),s(668)] into s(654)
 * Renamed intermediate variables: 
[ (ch([151]),aux(93))>>s(669), (ch([151]),aux(94))>>s(670), (ch([151]),aux(95))>>s(671), (ch([151]),aux(96))>>s(672), (ch([151]),aux(97))>>s(673), (ch([151]),aux(98))>>s(674), (ch([151]),s(588))>>s(675), (ch([151]),s(593))>>s(676), (ch([151]),s(595))>>s(677), (ch([151]),s(596))>>s(678), (ch([151]),s(590))>>s(679), (ch([151]),s(591))>>s(680), (ch([151]),s(592))>>s(681)]
 * Renamed intermediate variables: 
[ (ch([152]),aux(87))>>s(682), (ch([152]),aux(88))>>s(683), (ch([152]),aux(89))>>s(684), (ch([152]),aux(90))>>s(685), (ch([152]),aux(91))>>s(686), (ch([152]),aux(92))>>s(687), (ch([152]),s(528))>>s(688), (ch([152]),s(534))>>s(689), (ch([152]),s(536))>>s(690), (ch([152]),s(537))>>s(691), (ch([152]),s(538))>>s(692), (ch([152]),s(530))>>s(693), (ch([152]),s(531))>>s(694), (ch([152]),s(532))>>s(695)]
 * Joined equivalent variables [aux(111),s(669),s(682)] into aux(111)
 * Joined equivalent variables [aux(112),s(670),s(683)] into aux(112)
 * Joined equivalent variables [aux(113),s(671),s(684)] into aux(113)
 * Joined equivalent variables [aux(114),s(672),s(685)] into aux(114)
 * Joined equivalent variables [aux(115),s(673),s(686)] into aux(115)
 * Joined equivalent variables [aux(116),s(674),s(687)] into aux(116)
 * Joined equivalent variables [s(679),s(693)] into s(679)
 * Joined equivalent variables [s(680),s(694)] into s(680)
 * Joined equivalent variables [s(677),s(690)] into s(677)
 * Joined equivalent variables [s(675),s(688)] into s(675)
 * Joined equivalent variables [s(676),s(689)] into s(676)
 * Joined equivalent variables [s(678),s(692)] into s(678)
 * Joined equivalent variables [s(681),s(695)] into s(681)

#### Cost of chains of case_17(A,B,C,D,E,F,G,H,I,J,K):
* Chain [157]: 128*s(258)+36*s(259)+24*s(260)+128*s(264)+36*s(265)+24*s(266)+48
  Such that:aux(57) =< A
aux(58) =< B
aux(59) =< C
aux(60) =< E
aux(61) =< F
aux(62) =< G
s(256) =< aux(58)
s(256) =< aux(59)
s(262) =< aux(61)
s(262) =< aux(62)
s(264) =< aux(60)
s(265) =< aux(61)
s(266) =< s(264)*s(262)
s(258) =< aux(57)
s(259) =< aux(58)
s(260) =< s(258)*s(256)

  with precondition: [D=1,H=1,K=0,A>=2,B>=1,E>=2,F>=1,G>=0,I>=1,J>=1,C>=I,C>=J] 

* Chain [156]: 320*s(298)+72*s(299)+60*s(300)+320*s(304)+144*s(305)+60*s(306)+48
  Such that:aux(63) =< A
aux(64) =< B
aux(65) =< C
aux(66) =< E
aux(67) =< F
aux(68) =< G
s(296) =< aux(64)
s(296) =< aux(65)
s(302) =< aux(67)
s(302) =< aux(68)
s(304) =< aux(66)
s(305) =< aux(67)
s(306) =< s(304)*s(302)
s(298) =< aux(63)
s(299) =< aux(64)
s(300) =< s(298)*s(296)

  with precondition: [D=1,H=1,K=0,A>=2,B>=1,E>=2,F>=1,I>=0,J>=0,C>=I,G>=I,C>=J,G>=J] 

* Chain [155]: 160*s(402)+72*s(403)+30*s(404)+160*s(407)+30*s(408)+41
  Such that:aux(69) =< A
aux(70) =< B
aux(71) =< C
aux(72) =< E
aux(73) =< F
aux(74) =< G
s(400) =< aux(70)
s(400) =< aux(71)
s(405) =< aux(73)
s(405) =< aux(74)
s(407) =< aux(72)
s(408) =< s(407)*s(405)
s(402) =< aux(69)
s(403) =< aux(70)
s(404) =< s(402)*s(400)

  with precondition: [D=1,H=1,K=0,A>=2,B>=1,E>=2,F>=1,I>=0,J>=0,G+1>=E,C>=I,G>=I,C>=J,G>=J] 

* Chain [154]: 192*s(450)+36*s(451)+36*s(452)+192*s(456)+72*s(457)+36*s(458)+48
  Such that:aux(75) =< A
aux(76) =< B
aux(77) =< C
aux(78) =< E
aux(79) =< F
aux(80) =< G
s(448) =< aux(76)
s(448) =< aux(77)
s(454) =< aux(79)
s(454) =< aux(80)
s(456) =< aux(78)
s(457) =< aux(79)
s(458) =< s(456)*s(454)
s(450) =< aux(75)
s(451) =< aux(76)
s(452) =< s(450)*s(448)

  with precondition: [D=1,H=1,K=0,A>=2,B>=1,E>=2,F>=1,I>=0,J>=1,C>=I,G>=I,C>=J] 

* Chain [153]: 64*s(510)+36*s(511)+12*s(512)+64*s(515)+12*s(516)+41
  Such that:aux(81) =< A
aux(82) =< B
aux(83) =< C
aux(84) =< E
aux(85) =< F
aux(86) =< G
s(508) =< aux(83)
s(513) =< aux(85)
s(513) =< aux(86)
s(515) =< aux(84)
s(516) =< s(515)*s(513)
s(510) =< aux(81)
s(508) =< aux(82)
s(511) =< aux(82)
s(512) =< s(510)*s(508)

  with precondition: [D=1,H=1,K=0,A>=2,B>=1,E>=2,F>=1,I>=0,J>=1,G+1>=E,C>=I,G>=I,C>=J] 

* Chain [152]: 192*s(530)+36*s(531)+36*s(532)+192*s(536)+72*s(537)+36*s(538)+48
  Such that:aux(87) =< A
aux(88) =< B
aux(89) =< C
aux(90) =< E
aux(91) =< F
aux(92) =< G
s(528) =< aux(88)
s(528) =< aux(89)
s(534) =< aux(91)
s(534) =< aux(92)
s(536) =< aux(90)
s(537) =< aux(91)
s(538) =< s(536)*s(534)
s(530) =< aux(87)
s(531) =< aux(88)
s(532) =< s(530)*s(528)

  with precondition: [D=1,H=1,K=0,A>=2,B>=1,E>=2,F>=1,I>=1,J>=0,C>=I,C>=J,G>=J] 

* Chain [151]: 64*s(590)+36*s(591)+12*s(592)+64*s(595)+12*s(596)+41
  Such that:aux(93) =< A
aux(94) =< B
aux(95) =< C
aux(96) =< E
aux(97) =< F
aux(98) =< G
s(588) =< aux(95)
s(593) =< aux(97)
s(593) =< aux(98)
s(595) =< aux(96)
s(596) =< s(595)*s(593)
s(590) =< aux(93)
s(588) =< aux(94)
s(591) =< aux(94)
s(592) =< s(590)*s(588)

  with precondition: [D=1,H=1,K=0,A>=2,B>=1,E>=2,F>=1,I>=1,J>=0,G+1>=E,C>=I,C>=J,G>=J] 

* Chain [150]: 32*s(609)+6*s(610)+32*s(613)+6*s(614)+34
  Such that:s(608) =< A
s(607) =< B
s(607) =< C
s(612) =< E
s(611) =< F
s(611) =< G
s(613) =< s(612)
s(614) =< s(613)*s(611)
s(609) =< s(608)
s(610) =< s(609)*s(607)

  with precondition: [D=1,H=1,K=1,A>=2,B>=1,E>=2,F>=1,I>=0,J>=0,C+1>=A,G+1>=E,C>=I,G>=I,C>=J,G>=J] 

 * Renamed intermediate variables: 
[ (eq(201,1),aux(57))>>s(696), (eq(201,1),aux(58))>>s(697), (eq(201,1),aux(59))>>s(698), (eq(201,1),aux(60))>>s(699), (eq(201,1),aux(61))>>s(700), (eq(201,1),aux(62))>>s(701), (eq(201,1),s(256))>>s(702), (eq(201,1),s(262))>>s(703), (eq(201,1),s(264))>>s(704), (eq(201,1),s(265))>>s(705), (eq(201,1),s(266))>>s(706), (eq(201,1),s(258))>>s(707), (eq(201,1),s(259))>>s(708), (eq(201,1),s(260))>>s(709)]

#### Simplifying cost structure of CE 201 
 * Renamed intermediate variables: 
[ (eq(202,1),aux(99))>>s(710), (eq(202,1),aux(100))>>s(711), (eq(202,1),aux(101))>>s(712), (eq(202,1),aux(102))>>s(713), (eq(202,1),aux(103))>>s(714), (eq(202,1),aux(104))>>s(715), (eq(202,1),s(621))>>s(716), (eq(202,1),s(622))>>s(717), (eq(202,1),s(623))>>s(718), (eq(202,1),s(624))>>s(719), (eq(202,1),s(625))>>s(720), (eq(202,1),s(626))>>s(721), (eq(202,1),s(627))>>s(722), (eq(202,1),s(637))>>s(723)]

#### Simplifying cost structure of CE 202 
 * Renamed intermediate variables: 
[ (eq(203,1),aux(105))>>s(724), (eq(203,1),aux(106))>>s(725), (eq(203,1),aux(107))>>s(726), (eq(203,1),aux(108))>>s(727), (eq(203,1),aux(109))>>s(728), (eq(203,1),aux(110))>>s(729), (eq(203,1),s(648))>>s(730), (eq(203,1),s(649))>>s(731), (eq(203,1),s(650))>>s(732), (eq(203,1),s(651))>>s(733), (eq(203,1),s(652))>>s(734), (eq(203,1),s(653))>>s(735), (eq(203,1),s(654))>>s(736), (eq(203,1),s(664))>>s(737)]

#### Simplifying cost structure of CE 203 
 * Renamed intermediate variables: 
[ (eq(204,1),aux(111))>>s(738), (eq(204,1),aux(112))>>s(739), (eq(204,1),aux(113))>>s(740), (eq(204,1),aux(114))>>s(741), (eq(204,1),aux(115))>>s(742), (eq(204,1),aux(116))>>s(743), (eq(204,1),s(675))>>s(744), (eq(204,1),s(676))>>s(745), (eq(204,1),s(677))>>s(746), (eq(204,1),s(678))>>s(747), (eq(204,1),s(679))>>s(748), (eq(204,1),s(680))>>s(749), (eq(204,1),s(681))>>s(750), (eq(204,1),s(691))>>s(751)]

#### Simplifying cost structure of CE 204 
 * Joined equivalent variables [aux(117),s(696),s(710),s(724),s(738)] into aux(117)
 * Joined equivalent variables [aux(118),s(697),s(711),s(725),s(739)] into aux(118)
 * Joined equivalent variables [aux(119),s(698),s(712),s(726),s(740)] into aux(119)
 * Joined equivalent variables [aux(120),s(699),s(713),s(727),s(741)] into aux(120)
 * Joined equivalent variables [aux(121),s(700),s(714),s(728),s(742)] into aux(121)
 * Joined equivalent variables [aux(122),s(701),s(715),s(729),s(743)] into aux(122)
 * Joined equivalent variables [s(707),s(720),s(734),s(748)] into s(707)
 * Joined equivalent variables [s(708),s(721),s(735),s(749)] into s(708)
 * Joined equivalent variables [s(704),s(718),s(732),s(746)] into s(704)
 * Joined equivalent variables [s(705),s(723),s(737),s(751)] into s(705)
 * Joined equivalent variables [s(702),s(716),s(730),s(744)] into s(702)
 * Joined equivalent variables [s(703),s(717),s(731),s(745)] into s(703)
 * Joined equivalent variables [s(706),s(719),s(733),s(747)] into s(706)
 * Joined equivalent variables [s(709),s(722),s(736),s(750)] into s(709)
 * Renamed intermediate variables: 
[ (eq(205,1),s(608))>>s(752), (eq(205,1),s(607))>>s(753), (eq(205,1),s(612))>>s(754), (eq(205,1),s(611))>>s(755), (eq(205,1),s(613))>>s(756), (eq(205,1),s(614))>>s(757), (eq(205,1),s(609))>>s(758), (eq(205,1),s(610))>>s(759)]

#### Simplifying cost structure of CE 205 

#### Cost of chains of check_sanity(A,B,C,D,E,F,G,H,I):
* Chain [159]: 1120*s(704)+324*s(705)+210*s(706)+1120*s(707)+324*s(708)+210*s(709)+51
  Such that:aux(117) =< A
aux(118) =< B
aux(119) =< C
aux(120) =< E
aux(121) =< F
aux(122) =< G
s(702) =< aux(118)
s(702) =< aux(119)
s(703) =< aux(121)
s(703) =< aux(122)
s(704) =< aux(120)
s(705) =< aux(121)
s(706) =< s(704)*s(703)
s(707) =< aux(117)
s(708) =< aux(118)
s(709) =< s(707)*s(702)

  with precondition: [D=1,H=1,I=0,A>=2,B>=1,C>=0,E>=2,F>=1,G>=0] 

* Chain [158]: 32*s(756)+6*s(757)+32*s(758)+6*s(759)+37
  Such that:s(752) =< A
s(753) =< B
s(753) =< C
s(754) =< E
s(755) =< F
s(755) =< G
s(756) =< s(754)
s(757) =< s(756)*s(755)
s(758) =< s(752)
s(759) =< s(758)*s(753)

  with precondition: [D=1,H=1,I=1,A>=2,B>=1,E>=2,F>=1,C+1>=A,G+1>=E] 


#### Simplifying cost structure of CE 208 

#### Computing cost of phase [162] 

#### Simplifying cost structure of CE 207 

#### Cost of loops [162] 

 * loop 162:lineMult(A,B,C,D,E,F,G) -> [lineMult(A',B',C',D',E',F',G')] 
9
##### Pending set lineMult(A,B,C,D,E,F,G)
* Psum in Loop 162: [it(162)=<1]

###### Computing sum for it(162)=<1  in Loop 162 
   - Applying inductive sum strategy 
     - head Candidate: B-1 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-1 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(162)=<B-1,it(162)=<B-1,it(162)=<B-B',it(162)=<B-B'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [162] 

#### Simplifying cost structure of phase [162] 

#### Cost of phase [162]:lineMult(A,B,C,D,E,F,G) -> [lineMult(A',B',C',D',E',F',G')] 
9*it(162)+0
  Such that:it(162) =< B
it(162) =< B-B'

#### Simplifying cost structure of chain [[162],160] 

#### Computing cost of phase [161] 

#### Simplifying cost structure of CE 206 

#### Cost of loops [161] 

 * loop 161:lineMult(A,B,C,D,E,F,G) -> [lineMult(A',B',C',D',E',F',G')] 
10
##### Pending set lineMult(A,B,C,D,E,F,G)
* Psum in Loop 161: [it(161)=<1]

###### Computing sum for it(161)=<1  in Loop 161 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
     - head Candidate: B-1 
     - head Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
     - tail Candidate: B-1 
     - tail Candidate: B-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(161)=<D-1,it(161)=<B-1,it(161)=<B-1,it(161)=<D-1,it(161)=<D-D',it(161)=<B-B',it(161)=<B-B',it(161)=<D-D'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [161] 

#### Simplifying cost structure of phase [161] 

#### Cost of phase [161]:lineMult(A,B,C,D,E,F,G) -> [lineMult(A',B',C',D',E',F',G')] 
10*it(161)+0
  Such that:it(161) =< B
it(161) =< B-B'
it(161) =< D
it(161) =< D-D'

#### Simplifying cost structure of chain [[161],[162],160] 

#### Found solution for phase  [161] in the cache 

#### Cost of phase [161]:lineMult(A,B,C,D,E,F,G) -> [lineMult(A',B',C',D',E',F',G')] 
10*it(161)+0
  Such that:it(161) =< B
it(161) =< B-B'
it(161) =< D
it(161) =< D-D'

#### Simplifying cost structure of chain [[161],160] 

#### Cost of chains of lineMult(A,B,C,D,E,F,G):
* Chain [[162],160]: 9*it(162)+3
  Such that:it(162) =< F

  with precondition: [D=1,B=F,A>=0,B>=2,C>=0,E>=0,G>=0] 

* Chain [[161],[162],160]: 10*it(161)+9*it(162)+3
  Such that:it(162) =< -D+F+1
it(161) =< D

  with precondition: [B=F,A>=0,C>=0,D>=2,E>=0,G>=0,B>=D+1] 

* Chain [[161],160]: 10*it(161)+3
  Such that:it(161) =< F

  with precondition: [B=F,A>=0,B>=2,C>=0,E>=0,G>=0,D>=B] 

* Chain [160]: 3
  with precondition: [B=1,F=1,A>=0,C>=0,D>=0,E>=0,G>=0] 


#### Simplifying cost structure of CE 214 

#### Computing cost of phase [165,166,167,168] 
 * Renamed intermediate variables: 
[ (eq(211,1),it(161))>>s(760)]

#### Simplifying cost structure of CE 211 
 * Renamed intermediate variables: 
[ (it(165),s(760))>>s(761)]
 * Renamed intermediate variables: 
[ (eq(212,1),it(162))>>s(762), (eq(212,1),it(161))>>s(763)]

#### Simplifying cost structure of CE 212 
 * Renamed intermediate variables: 
[ (it(166),s(762))>>s(764), (it(166),s(763))>>s(765)]

#### Simplifying cost structure of CE 209 
 * Renamed intermediate variables: 
[ (eq(210,1),it(162))>>s(766)]

#### Simplifying cost structure of CE 210 
 * Renamed intermediate variables: 
[ (it(168),s(766))>>s(767)]

#### Cost of loops [165,166,167,168] 

 * loop 165:computeLine(A,B,C,D,E,F,G,H,I) -> [computeLine(A',B',C',D',E',F',G',H',I')] 
10*s(761)+11
  Such that:s(761) =< F'

 * loop 166:computeLine(A,B,C,D,E,F,G,H,I) -> [computeLine(A',B',C',D',E',F',G',H',I')] 
9*s(764)+10*s(765)+11
  Such that:s(764) =< -F+F'+1
s(765) =< F

 * loop 167:computeLine(A,B,C,D,E,F,G,H,I) -> [computeLine(A',B',C',D',E',F',G',H',I')] 
11
 * loop 168:computeLine(A,B,C,D,E,F,G,H,I) -> [computeLine(A',B',C',D',E',F',G',H',I')] 
9*s(767)+11
  Such that:s(767) =< F'

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Psum in Loop 165: [it(165)=<1,s(768)=<F']
* Psum in Loop 166: [it(166)=<1,s(769)=< -F+F'+1,s(770)=<F]
* Psum in Loop 167: [it(167)=<1]
* Psum in Loop 168: [it(168)=<1,s(771)=<F']

###### Computing sum for it(165)=<1  in Loop 165 
   - Applying inductive sum strategy 
     - head Candidate: C-1 
       - Loop 166 is collaborative and bounds [it(166)] 
       - Loop 167 is collaborative and bounds [it(167)] 
       - Loop 168 is collaborative and bounds [it(168)] 
     - head Candidate: A-1 
       - Loop 166 is collaborative and bounds [it(166)] 
       - Loop 167 is collaborative and bounds [it(167)] 
       - Loop 168 is collaborative and bounds [it(168)] 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - Loop 166 is collaborative and bounds [it(166)] 
       - Loop 167 is collaborative and bounds [it(167)] 
       - Loop 168 is collaborative and bounds [it(168)] 
     - tail Candidate: A-1 
       - Loop 166 is collaborative and bounds [it(166)] 
       - Loop 167 is collaborative and bounds [it(167)] 
       - Loop 168 is collaborative and bounds [it(168)] 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(165)+it(166)+it(167)+it(168)=<C-1,it(165)+it(166)+it(167)+it(168)=<A-1,it(165)+it(166)+it(167)+it(168)=<A-1,it(165)+it(166)+it(167)+it(168)=<C-1,it(165)+it(166)+it(167)+it(168)=<C-C',it(165)+it(166)+it(167)+it(168)=<A-A',it(165)+it(166)+it(167)+it(168)=<A-A',it(165)+it(166)+it(167)+it(168)=<C-C'] 

##### Pending set A
* Psum in Loop 165: [s(768)=<F']
* Psum in Loop 166: [it(166)=<1,s(769)=< -F+F'+1,s(770)=<F]
* Psum in Loop 167: [it(167)=<1]
* Psum in Loop 168: [it(168)=<1,s(771)=<F']

###### Computing sum for s(768)=<F'  in Loop 165 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(123)=<D,aux(123)=<F] 
 * Adding constraints: [s(768)=<it(165)*aux(123)] 

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(123)=<D,aux(123)=<F]
* Psum in Loop 166: [it(166)=<1,s(769)=< -F+F'+1,s(770)=<F]
* Psum in Loop 167: [it(167)=<1]
* Psum in Loop 168: [it(168)=<1,s(771)=<F']

###### Computing max_min for aux(123)=<D  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(123)=<D] 

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(123)=<F]
* Psum in Loop 166: [it(166)=<1,s(769)=< -F+F'+1,s(770)=<F]
* Psum in Loop 167: [it(167)=<1]
* Psum in Loop 168: [it(168)=<1,s(771)=<F']

###### Computing max_min for aux(123)=<F  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(123)=<D+F,aux(123)=<A+D+F-3] 

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Psum in Loop 166: [it(166)=<1,s(769)=< -F+F'+1,s(770)=<F]
* Psum in Loop 167: [it(167)=<1]
* Psum in Loop 168: [it(168)=<1,s(771)=<F']

###### Computing sum for it(166)=<1  in Loop 166 
   - Applying inductive sum strategy 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-F 
       - Loop 165 has a reset to  [D-2]
       - Loop 167 has a reset to  [D-1]
       - Loop 168 is collaborative and bounds [it(168)] 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-F 
       - Loop 165 has undefined behavior 
 * Adding constraints: [it(166)+it(168)=<aux(125)+aux(124)+aux(126),it(165)+it(166)+it(167)+it(168)=<C-1,it(165)+it(166)+it(167)+it(168)=<A-1,it(165)+it(166)+it(167)+it(168)=<A-1,it(165)+it(166)+it(167)+it(168)=<C-1,aux(126)=<D-F,it(165)+it(166)+it(167)+it(168)=<C-C',it(165)+it(166)+it(167)+it(168)=<A-A',it(165)+it(166)+it(167)+it(168)=<A-A',it(165)+it(166)+it(167)+it(168)=<C-C'] 

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Psum in Loop 165: [aux(124)=<D-2]
* Psum in Loop 166: [s(769)=< -F+F'+1,s(770)=<F]
* Psum in Loop 167: [it(167)=<1,aux(125)=<D-1]
* Psum in Loop 168: [it(168)=<1,s(771)=<F']

###### Computing sum for aux(124)=<D-2  in Loop 165 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(127)=<D-2] 
 * Adding constraints: [aux(124)=<it(165)*aux(127)] 

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(127)=<D-2]
* Psum in Loop 166: [s(769)=< -F+F'+1,s(770)=<F]
* Psum in Loop 167: [it(167)=<1,aux(125)=<D-1]
* Psum in Loop 168: [it(168)=<1,s(771)=<F']

###### Computing max_min for aux(127)=<D-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(127)=<aux(123)-2] 

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Psum in Loop 166: [s(769)=< -F+F'+1,s(770)=<F]
* Psum in Loop 167: [it(167)=<1,aux(125)=<D-1]
* Psum in Loop 168: [it(168)=<1,s(771)=<F']

###### Computing sum for s(769)=< -F+F'+1  in Loop 166 
   - Applying inductive sum strategy 
     - head Candidate: A+3*D-F-1 
       - Loop 165 has a reset to  [A+3*D-4]
       - Loop 167 has a reset to  [A+3*D-3]
       - Loop 168 is collaborative and bounds [it(168)] 
     - head Candidate: A+D-F-1 
       - Loop 165 has a reset to  [A+D-4]
       - Loop 167 has a reset to  [A+D-3]
       - Loop 168 is collaborative and bounds [it(168)] 
     - tail Candidate: A+3*D-F-1 
       - Loop 165 has undefined behavior 
     - tail Candidate: A+D-F-1 
       - Loop 165 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(134)=<D-F+1] 
 * Adding constraints: [s(769)=<it(166)*aux(134),it(168)+s(769)=<aux(129)+aux(128)+aux(130),it(168)+s(769)=<aux(132)+aux(131)+aux(133),aux(130)=<A+3*D-F-1,aux(133)=<A+D-F-1] 

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(134)=<D-F+1]
* Psum in Loop 165: [aux(131)=<A+D-4,aux(128)=<A+3*D-4]
* Psum in Loop 166: [s(770)=<F]
* Psum in Loop 167: [it(167)=<1,aux(132)=<A+D-3,aux(129)=<A+3*D-3,aux(125)=<D-1]
* Psum in Loop 168: [s(771)=<F']

###### Computing max_min for aux(134)=<D-F+1  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(134)=<D+1] 

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Psum in Loop 165: [aux(131)=<A+D-4,aux(128)=<A+3*D-4]
* Psum in Loop 166: [s(770)=<F]
* Psum in Loop 167: [it(167)=<1,aux(132)=<A+D-3,aux(129)=<A+3*D-3,aux(125)=<D-1]
* Psum in Loop 168: [s(771)=<F']

###### Computing sum for aux(131)=<A+D-4  in Loop 165 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(135)=<A+D-4] 
 * Adding constraints: [aux(131)=<it(165)*aux(135)] 

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(135)=<A+D-4]
* Psum in Loop 165: [aux(128)=<A+3*D-4]
* Psum in Loop 166: [s(770)=<F]
* Psum in Loop 167: [it(167)=<1,aux(132)=<A+D-3,aux(129)=<A+3*D-3,aux(125)=<D-1]
* Psum in Loop 168: [s(771)=<F']

###### Computing max_min for aux(135)=<A+D-4  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(135)=<A+D-4] 

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Psum in Loop 165: [aux(128)=<A+3*D-4]
* Psum in Loop 166: [s(770)=<F]
* Psum in Loop 167: [it(167)=<1,aux(132)=<A+D-3,aux(129)=<A+3*D-3,aux(125)=<D-1]
* Psum in Loop 168: [s(771)=<F']

###### Computing sum for aux(128)=<A+3*D-4  in Loop 165 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(136)=<A+3*D-4] 
 * Adding constraints: [aux(128)=<it(165)*aux(136)] 

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(136)=<A+3*D-4]
* Psum in Loop 166: [s(770)=<F]
* Psum in Loop 167: [it(167)=<1,aux(132)=<A+D-3,aux(129)=<A+3*D-3,aux(125)=<D-1]
* Psum in Loop 168: [s(771)=<F']

###### Computing max_min for aux(136)=<A+3*D-4  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(136)=<A+3*D-4] 

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Psum in Loop 166: [s(770)=<F]
* Psum in Loop 167: [it(167)=<1,aux(132)=<A+D-3,aux(129)=<A+3*D-3,aux(125)=<D-1]
* Psum in Loop 168: [s(771)=<F']

###### Computing sum for s(770)=<F  in Loop 166 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(137)=<F] 
 * Adding constraints: [s(770)=<it(166)*aux(137)] 

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(137)=<F]
* Psum in Loop 167: [it(167)=<1,aux(132)=<A+D-3,aux(129)=<A+3*D-3,aux(125)=<D-1]
* Psum in Loop 168: [s(771)=<F']

###### Computing max_min for aux(137)=<F  
   - Found a solution using cacheing 
 * Adding constraints:[aux(137)=<aux(123)] 

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Psum in Loop 167: [it(167)=<1,aux(132)=<A+D-3,aux(129)=<A+3*D-3,aux(125)=<D-1]
* Psum in Loop 168: [s(771)=<F']

###### Computing sum for it(167)=<1  in Loop 167 
   - Applying inductive sum strategy 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(165)+it(166)+it(167)+it(168)=<C-1,it(165)+it(166)+it(167)+it(168)=<A-1,it(165)+it(166)+it(167)+it(168)=<A-1,it(165)+it(166)+it(167)+it(168)=<C-1,it(165)+it(166)+it(167)+it(168)=<C-C',it(165)+it(166)+it(167)+it(168)=<A-A',it(165)+it(166)+it(167)+it(168)=<A-A',it(165)+it(166)+it(167)+it(168)=<C-C'] 

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Psum in Loop 167: [aux(132)=<A+D-3,aux(129)=<A+3*D-3,aux(125)=<D-1]
* Psum in Loop 168: [s(771)=<F']

###### Computing sum for aux(132)=<A+D-3  in Loop 167 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(138)=<A+D-3] 
 * Adding constraints: [aux(132)=<it(167)*aux(138)] 

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(138)=<A+D-3]
* Psum in Loop 167: [aux(129)=<A+3*D-3,aux(125)=<D-1]
* Psum in Loop 168: [s(771)=<F']

###### Computing max_min for aux(138)=<A+D-3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(138)=<aux(135)+1] 

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Psum in Loop 167: [aux(129)=<A+3*D-3,aux(125)=<D-1]
* Psum in Loop 168: [s(771)=<F']

###### Computing sum for aux(129)=<A+3*D-3  in Loop 167 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(139)=<A+3*D-3] 
 * Adding constraints: [aux(129)=<it(167)*aux(139)] 

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(139)=<A+3*D-3]
* Psum in Loop 167: [aux(125)=<D-1]
* Psum in Loop 168: [s(771)=<F']

###### Computing max_min for aux(139)=<A+3*D-3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(139)=<aux(136)+1] 

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Psum in Loop 167: [aux(125)=<D-1]
* Psum in Loop 168: [s(771)=<F']

###### Computing sum for aux(125)=<D-1  in Loop 167 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(140)=<D-1] 
 * Adding constraints: [aux(125)=<it(167)*aux(140)] 

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(140)=<D-1]
* Psum in Loop 168: [s(771)=<F']

###### Computing max_min for aux(140)=<D-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(140)=<aux(123)-1] 

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Psum in Loop 168: [s(771)=<F']

###### Computing sum for s(771)=<F'  in Loop 168 
   - Applying inductive sum strategy 
     - head Candidate: A+D-F-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A+3*D-F-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A+D-F-1 
       - We failed to classify this candidate before 
     - tail Candidate: A+3*D-F-1 
       - We failed to classify this candidate before 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(143)=<D] 
 * Adding constraints: [s(771)=<it(168)*aux(143),s(769)+s(771)=<aux(132)+aux(131)+aux(141),s(769)+s(771)=<aux(129)+aux(128)+aux(142),aux(141)=<A+D-F-1,aux(142)=<A+3*D-F-1] 

##### Pending set computeLine(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(143)=<D]

###### Computing max_min for aux(143)=<D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(143)=<aux(123)] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [165,166,167,168] 

#### Simplifying cost structure of phase [165,166,167,168] 
 * Joined equivalent variables [aux(145),aux(133),aux(141)] into aux(145)
 * Joined equivalent variables [aux(146),aux(130),aux(142)] into aux(146)
 * Joined equivalent variables [aux(137),aux(143)] into aux(137)
 * Joined equivalent variables [it(165),it(167)] into it(165)

#### Cost of phase [165,166,167,168]:computeLine(A,B,C,D,E,F,G,H,I) -> [computeLine(A',B',C',D',E',F',G',H',I')] 
22*it(165)+11*it(166)+11*it(168)+10*s(768)+9*s(769)+10*s(770)+9*s(771)+0
  Such that:aux(135) =< A+D
aux(123) =< A+D+F
aux(136) =< A+3*D
aux(123) =< D
aux(134) =< D+1
aux(126) =< D-F
aux(123) =< D+F
aux(144) =< A
aux(145) =< A+D-F
aux(146) =< A+3*D-F
aux(147) =< A-A'
aux(148) =< C
aux(149) =< C-C'
it(165) =< aux(144)
it(166) =< aux(144)
it(168) =< aux(144)
it(165) =< aux(147)
it(166) =< aux(147)
it(168) =< aux(147)
it(165) =< aux(148)
it(166) =< aux(148)
it(168) =< aux(148)
it(165) =< aux(149)
it(166) =< aux(149)
it(168) =< aux(149)
aux(137) =< aux(123)
aux(140) =< aux(123)-1
aux(139) =< aux(136)+1
aux(138) =< aux(135)+1
aux(127) =< aux(123)-2
aux(128) =< it(165)*aux(136)
aux(131) =< it(165)*aux(135)
s(768) =< it(165)*aux(123)
aux(125) =< it(165)*aux(140)
aux(129) =< it(165)*aux(139)
aux(132) =< it(165)*aux(138)
aux(124) =< it(165)*aux(127)
s(769) =< aux(129)+aux(128)+aux(146)
s(771) =< aux(129)+aux(128)+aux(146)
s(769) =< aux(132)+aux(131)+aux(145)
s(771) =< aux(132)+aux(131)+aux(145)
it(168) =< aux(132)+aux(131)+aux(145)
it(168) =< aux(129)+aux(128)+aux(146)
it(166) =< aux(125)+aux(124)+aux(126)
it(168) =< aux(125)+aux(124)+aux(126)
s(771) =< it(168)*aux(137)
s(770) =< it(166)*aux(137)
s(769) =< it(166)*aux(134)

#### Simplifying cost structure of chain [[165,166,167,168],164] 
 * Joined equivalent variables [aux(150),aux(144),aux(147),aux(149)] into aux(150)

#### Simplifying cost structure of CE 213 

#### Found solution for phase  [165,166,167,168] in the cache 

#### Cost of phase [165,166,167,168]:computeLine(A,B,C,D,E,F,G,H,I) -> [computeLine(A',B',C',D',E',F',G',H',I')] 
22*it(165)+11*it(166)+11*it(168)+10*s(768)+9*s(769)+10*s(770)+9*s(771)+0
  Such that:aux(135) =< A+D
aux(123) =< A+D+F
aux(136) =< A+3*D
aux(123) =< D
aux(134) =< D+1
aux(126) =< D-F
aux(123) =< D+F
aux(144) =< A
aux(145) =< A+D-F
aux(146) =< A+3*D-F
aux(147) =< A-A'
aux(148) =< C
aux(149) =< C-C'
it(165) =< aux(144)
it(166) =< aux(144)
it(168) =< aux(144)
it(165) =< aux(147)
it(166) =< aux(147)
it(168) =< aux(147)
it(165) =< aux(148)
it(166) =< aux(148)
it(168) =< aux(148)
it(165) =< aux(149)
it(166) =< aux(149)
it(168) =< aux(149)
aux(137) =< aux(123)
aux(140) =< aux(123)-1
aux(139) =< aux(136)+1
aux(138) =< aux(135)+1
aux(127) =< aux(123)-2
aux(128) =< it(165)*aux(136)
aux(131) =< it(165)*aux(135)
s(768) =< it(165)*aux(123)
aux(125) =< it(165)*aux(140)
aux(129) =< it(165)*aux(139)
aux(132) =< it(165)*aux(138)
aux(124) =< it(165)*aux(127)
s(769) =< aux(129)+aux(128)+aux(146)
s(771) =< aux(129)+aux(128)+aux(146)
s(769) =< aux(132)+aux(131)+aux(145)
s(771) =< aux(132)+aux(131)+aux(145)
it(168) =< aux(132)+aux(131)+aux(145)
it(168) =< aux(129)+aux(128)+aux(146)
it(166) =< aux(125)+aux(124)+aux(126)
it(168) =< aux(125)+aux(124)+aux(126)
s(771) =< it(168)*aux(137)
s(770) =< it(166)*aux(137)
s(769) =< it(166)*aux(134)

#### Simplifying cost structure of chain [[165,166,167,168],163] 
 * Joined equivalent variables [aux(151),aux(147),aux(148),aux(149)] into aux(151)

#### Cost of chains of computeLine(A,B,C,D,E,F,G,H,I):
* Chain [[165,166,167,168],164]: 22*it(165)+11*it(166)+11*it(168)+10*s(768)+9*s(769)+10*s(770)+9*s(771)+2
  Such that:aux(135) =< A+D
aux(145) =< A+D-F
aux(136) =< A+3*D
aux(146) =< A+3*D-F
aux(148) =< C
aux(123) =< D
aux(134) =< D+1
aux(126) =< D-F
aux(150) =< A
it(165) =< aux(150)
it(166) =< aux(150)
it(168) =< aux(150)
it(165) =< aux(148)
it(166) =< aux(148)
it(168) =< aux(148)
aux(137) =< aux(123)
aux(140) =< aux(123)-1
aux(139) =< aux(136)+1
aux(138) =< aux(135)+1
aux(127) =< aux(123)-2
aux(128) =< it(165)*aux(136)
aux(131) =< it(165)*aux(135)
s(768) =< it(165)*aux(123)
aux(125) =< it(165)*aux(140)
aux(129) =< it(165)*aux(139)
aux(132) =< it(165)*aux(138)
aux(124) =< it(165)*aux(127)
s(769) =< aux(129)+aux(128)+aux(146)
s(771) =< aux(129)+aux(128)+aux(146)
s(769) =< aux(132)+aux(131)+aux(145)
s(771) =< aux(132)+aux(131)+aux(145)
it(168) =< aux(132)+aux(131)+aux(145)
it(168) =< aux(129)+aux(128)+aux(146)
it(166) =< aux(125)+aux(124)+aux(126)
it(168) =< aux(125)+aux(124)+aux(126)
s(771) =< it(168)*aux(137)
s(770) =< it(166)*aux(137)
s(769) =< it(166)*aux(134)

  with precondition: [A>=2,B>=0,E>=0,F>=0,G>=0,H>=1,I>=0,C>=A,D>=H] 

* Chain [[165,166,167,168],163]: 22*it(165)+11*it(166)+11*it(168)+10*s(768)+9*s(769)+10*s(770)+9*s(771)+6
  Such that:aux(144) =< A
aux(135) =< A+D
aux(145) =< A+D-F
aux(136) =< A+3*D
aux(146) =< A+3*D-F
aux(123) =< D
aux(134) =< D+1
aux(126) =< D-F
aux(151) =< C
it(165) =< aux(144)
it(166) =< aux(144)
it(168) =< aux(144)
it(165) =< aux(151)
it(166) =< aux(151)
it(168) =< aux(151)
aux(137) =< aux(123)
aux(140) =< aux(123)-1
aux(139) =< aux(136)+1
aux(138) =< aux(135)+1
aux(127) =< aux(123)-2
aux(128) =< it(165)*aux(136)
aux(131) =< it(165)*aux(135)
s(768) =< it(165)*aux(123)
aux(125) =< it(165)*aux(140)
aux(129) =< it(165)*aux(139)
aux(132) =< it(165)*aux(138)
aux(124) =< it(165)*aux(127)
s(769) =< aux(129)+aux(128)+aux(146)
s(771) =< aux(129)+aux(128)+aux(146)
s(769) =< aux(132)+aux(131)+aux(145)
s(771) =< aux(132)+aux(131)+aux(145)
it(168) =< aux(132)+aux(131)+aux(145)
it(168) =< aux(129)+aux(128)+aux(146)
it(166) =< aux(125)+aux(124)+aux(126)
it(168) =< aux(125)+aux(124)+aux(126)
s(771) =< it(168)*aux(137)
s(770) =< it(166)*aux(137)
s(769) =< it(166)*aux(134)

  with precondition: [H=1,B>=0,C>=2,D>=1,E>=0,F>=0,G>=0,I>=0,A>=C+1] 

* Chain [164]: 2
  with precondition: [A=1,F=H,G=I,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0] 

* Chain [163]: 6
  with precondition: [C=1,D=0,H=1,A>=2,B>=0,E>=0,F>=0,G>=0,I>=0] 


#### Simplifying cost structure of CE 216 

#### Simplifying cost structure of CE 215 

#### Cost of chains of case_5(A,B,C,D,E,F,G,H,I,J):
* Chain [170]: 6
  with precondition: [A=0,G=1,H=0,J=1,B>=0,C>=0,D>=0,E>=0,F>=0,I>=0] 

* Chain [169]: 2
  with precondition: [A=1,J=1,D=G,E=H,B>=0,C>=0,D>=1,E>=0,F>=0,I>=B,I>=C,I>=F] 


#### Simplifying cost structure of CE 217 
 * Renamed intermediate variables: 
[ (eq(218,1),aux(45))>>s(772), (eq(218,1),s(107))>>s(773)]

#### Simplifying cost structure of CE 218 
 * Renamed intermediate variables: 
[ (eq(219,1),s(109))>>s(774), (eq(219,1),s(111))>>s(775), (eq(219,1),s(110))>>s(776), (eq(219,1),s(112))>>s(777), (eq(219,1),s(113))>>s(778), (eq(219,1),s(114))>>s(779), (eq(219,1),s(115))>>s(780)]

#### Simplifying cost structure of CE 219 
 * Renamed intermediate variables: 
[ (eq(220,1),s(116))>>s(781)]

#### Simplifying cost structure of CE 220 
 * Renamed intermediate variables: 
[ (eq(221,1),s(118))>>s(782), (eq(221,1),aux(46))>>s(783), (eq(221,1),s(117))>>s(784), (eq(221,1),s(120))>>s(785)]

#### Simplifying cost structure of CE 221 

#### Cost of chains of construct_matrix(A,B,C,D,E,F,G,H,I):
* Chain [175]: 14
  with precondition: [A=0,C=1,D=0,F=1,G=0,I=1,B>=0,E>=0,H>=B,H>=E] 

* Chain [174]: 16*s(773)+14
  Such that:s(772) =< C
s(773) =< s(772)

  with precondition: [B=0,I=1,A+1=C,A+1=F,D=G,A>=1,D>=1,E>=0,H>=A,H>=E] 

* Chain [173]: 6*s(774)+20*s(778)+18*s(779)+6*s(780)+25
  Such that:s(774) =< A
s(775) =< A+1
s(776) =< B
s(777) =< D
s(778) =< s(775)
s(779) =< s(777)
s(780) =< s(778)*s(776)

  with precondition: [F=1,G=0,I=1,A+1=C,A>=1,B>=0,E>=0,H>=0,D>=B+2] 

* Chain [172]: 6*s(781)+15
  Such that:s(781) =< C

  with precondition: [F=1,G=0,I=1,A>=0,B>=0,D>=1,E>=0,H>=0,C>=A+2] 

* Chain [171]: 16*s(784)+6*s(785)+14
  Such that:s(782) =< B
s(783) =< C
s(784) =< s(783)
s(785) =< s(784)*s(782)

  with precondition: [I=1,A+1=C,A+1=F,D=G,A>=1,B>=1,E>=0,H>=A,D>=B+1,H>=B,H>=E] 


#### Simplifying cost structure of CE 224 

#### Computing cost of phase [178] 

#### Simplifying cost structure of CE 222 

#### Cost of loops [178] 

 * loop 178:del(A,B,C,D,E) -> [del(A',B',C',D',E')] 
10
##### Pending set del(A,B,C,D,E)
* Psum in Loop 178: [it(178)=<1]

###### Computing sum for it(178)=<1  in Loop 178 
   - Applying inductive sum strategy 
     - head Candidate: C 
     - head Candidate: A-1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C 
     - tail Candidate: A-1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(178)=<C,it(178)=<A-1,it(178)=<A-1,it(178)=<C,it(178)=<C-C',it(178)=<A-A',it(178)=<A-A',it(178)=<C-C'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [178] 

#### Simplifying cost structure of phase [178] 

#### Cost of phase [178]:del(A,B,C,D,E) -> [del(A',B',C',D',E')] 
10*it(178)+0
  Such that:it(178) =< A
it(178) =< A-A'
it(178) =< C
it(178) =< C-C'

#### Simplifying cost structure of chain [[178],177] 

#### Simplifying cost structure of CE 223 

#### Found solution for phase  [178] in the cache 

#### Cost of phase [178]:del(A,B,C,D,E) -> [del(A',B',C',D',E')] 
10*it(178)+0
  Such that:it(178) =< A
it(178) =< A-A'
it(178) =< C
it(178) =< C-C'

#### Simplifying cost structure of chain [[178],176] 

#### Cost of chains of del(A,B,C,D,E):
* Chain [[178],177]: 10*it(178)+3
  Such that:it(178) =< D

  with precondition: [A=D,A>=2,B>=0,E>=0,C+1>=A] 

* Chain [[178],176]: 10*it(178)+6
  Such that:it(178) =< C

  with precondition: [A=D+1,B>=0,C>=1,E>=0,A>=C+2] 

* Chain [177]: 3
  with precondition: [A=1,D=1,B>=0,C>=0,E>=0] 

* Chain [176]: 6
  with precondition: [C=0,A=D+1,A>=2,E>=0,B>=E] 


#### Simplifying cost structure of CE 226 

#### Simplifying cost structure of CE 225 

#### Cost of chains of case_11(A,B,C,D,E):
* Chain [180]: 2
  with precondition: [A=0,B=0,C=D+E,D>=0,C>=D] 

* Chain [179]: 2
  with precondition: [A=0,C+D=E,B>=1,C>=0,D>=0] 


#### Simplifying cost structure of CE 227 

#### Simplifying cost structure of CE 228 

#### Cost of chains of op(A,B,C,D):
* Chain [182]: 4
  with precondition: [A=0,B=C+D,C>=0,B>=C] 

* Chain [181]: 4
  with precondition: [B+C=D,A>=1,B>=0,C>=0] 


#### Simplifying cost structure of CE 232 

#### Computing cost of phase [186] 

#### Simplifying cost structure of CE 229 

#### Cost of loops [186] 

 * loop 186:rec_list(A,B,C,D,E,F,G) -> [rec_list(A',B',C',D',E',F',G')] 
13
##### Pending set rec_list(A,B,C,D,E,F,G)
* Psum in Loop 186: [it(186)=<1]

###### Computing sum for it(186)=<1  in Loop 186 
   - Applying inductive sum strategy 
     - head Candidate: C-1 
     - head Candidate: A-1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
     - tail Candidate: A-1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(186)=<C-1,it(186)=<A-1,it(186)=<A-1,it(186)=<C-1,it(186)=<C-C',it(186)=<A-A',it(186)=<A-A',it(186)=<C-C'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [186] 

#### Simplifying cost structure of phase [186] 

#### Cost of phase [186]:rec_list(A,B,C,D,E,F,G) -> [rec_list(A',B',C',D',E',F',G')] 
13*it(186)+0
  Such that:it(186) =< A
it(186) =< A-A'
it(186) =< C
it(186) =< C-C'

#### Simplifying cost structure of chain [[186],184] 

#### Simplifying cost structure of CE 231 

#### Found solution for phase  [186] in the cache 

#### Cost of phase [186]:rec_list(A,B,C,D,E,F,G) -> [rec_list(A',B',C',D',E',F',G')] 
13*it(186)+0
  Such that:it(186) =< A
it(186) =< A-A'
it(186) =< C
it(186) =< C-C'

#### Simplifying cost structure of chain [[186],183] 

#### Computing cost of phase [185] 

#### Simplifying cost structure of CE 230 

#### Cost of loops [185] 

 * loop 185:rec_list(A,B,C,D,E,F,G) -> [rec_list(A',B',C',D',E',F',G')] 
13
##### Pending set rec_list(A,B,C,D,E,F,G)
* Psum in Loop 185: [it(185)=<1]

###### Computing sum for it(185)=<1  in Loop 185 
   - Applying inductive sum strategy 
     - head Candidate: C-1 
     - head Candidate: A-1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
     - tail Candidate: A-1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(185)=<C-1,it(185)=<A-1,it(185)=<A-1,it(185)=<C-1,it(185)=<C-C',it(185)=<A-A',it(185)=<A-A',it(185)=<C-C'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [185] 

#### Simplifying cost structure of phase [185] 

#### Cost of phase [185]:rec_list(A,B,C,D,E,F,G) -> [rec_list(A',B',C',D',E',F',G')] 
13*it(185)+0
  Such that:it(185) =< A
it(185) =< A-A'
it(185) =< C
it(185) =< C-C'

#### Simplifying cost structure of chain [[185],184] 

#### Found solution for phase  [185] in the cache 

#### Cost of phase [185]:rec_list(A,B,C,D,E,F,G) -> [rec_list(A',B',C',D',E',F',G')] 
13*it(185)+0
  Such that:it(185) =< A
it(185) =< A-A'
it(185) =< C
it(185) =< C-C'

#### Simplifying cost structure of chain [[185],183] 

#### Cost of chains of rec_list(A,B,C,D,E,F,G):
* Chain [[186],184]: 13*it(186)+3
  Such that:it(186) =< F

  with precondition: [E=0,A=F,A>=2,B>=0,D>=0,G>=0,C>=A] 

* Chain [[186],183]: 13*it(186)+6
  Such that:it(186) =< F

  with precondition: [E=0,C=F,B>=0,C>=2,D>=0,G>=0,A>=C+1] 

* Chain [[185],184]: 13*it(185)+3
  Such that:it(185) =< F

  with precondition: [A=F,A>=2,B>=0,D>=0,E>=1,G>=0,C>=A] 

* Chain [[185],183]: 13*it(185)+6
  Such that:it(185) =< F

  with precondition: [C=F,B>=0,C>=2,D>=0,E>=1,G>=0,A>=C+1] 

* Chain [184]: 3
  with precondition: [A=1,F=1,B>=0,C>=0,D>=0,E>=0,G>=0] 

* Chain [183]: 6
  with precondition: [C=1,F=1,A>=2,B>=0,D>=0,E>=0,G>=0] 


#### Simplifying cost structure of CE 246 

#### Simplifying cost structure of CE 233 

#### Simplifying cost structure of CE 235 

#### Simplifying cost structure of chain [190,188] 

#### Computing cost of phase [189,191,192] 
 * Renamed intermediate variables: 
[ (eq(241,1),it(185))>>s(786)]

#### Simplifying cost structure of CE 241 
 * Renamed intermediate variables: 
[ (eq(243,1),it(185))>>s(787)]

#### Simplifying cost structure of CE 243 
 * Joined equivalent variables [s(786),s(787)] into s(786)
 * Renamed intermediate variables: 
[ (it(189),aux(152))>>s(788), (it(189),aux(153))>>s(789), (it(189),s(786))>>s(790)]
 * Renamed intermediate variables: 
[ (eq(237,1),it(186))>>s(791)]

#### Simplifying cost structure of CE 237 
 * Renamed intermediate variables: 
[ (eq(239,1),it(186))>>s(792)]

#### Simplifying cost structure of CE 239 
 * Joined equivalent variables [s(791),s(792)] into s(791)
 * Renamed intermediate variables: 
[ (it(191),aux(154))>>s(793), (it(191),aux(155))>>s(794), (it(191),s(791))>>s(795)]

#### Simplifying cost structure of CE 234 

#### Simplifying cost structure of CE 236 
 * Renamed intermediate variables: 
[ (eq(238,1),it(186))>>s(796)]

#### Simplifying cost structure of CE 238 
 * Renamed intermediate variables: 
[ (eq(240,1),it(186))>>s(797)]

#### Simplifying cost structure of CE 240 
 * Renamed intermediate variables: 
[ (eq(242,1),it(185))>>s(798)]

#### Simplifying cost structure of CE 242 
 * Renamed intermediate variables: 
[ (eq(244,1),it(185))>>s(799)]

#### Simplifying cost structure of CE 244 
 * Joined equivalent variables [s(797),s(799)] into s(797)
 * Joined equivalent variables [s(796),s(798)] into s(796)
 * Renamed intermediate variables: 
[ (it(192),aux(156))>>s(800), (it(192),aux(157))>>s(801), (it(192),aux(158))>>s(802), (it(192),s(797))>>s(803), (it(192),s(796))>>s(804)]

#### Cost of loops [189,191,192] 

 * loop 189:rec_mat(A,B,C,D,E,F,G,H,I,J) -> [rec_mat(A',B',C',D',E',F',G',H',I',J')] 
26*s(790)+15
  Such that:s(788) =< B
s(789) =< E
s(790) =< s(788)
s(790) =< s(789)

 * loop 191:rec_mat(A,B,C,D,E,F,G,H,I,J) -> [rec_mat(A',B',C',D',E',F',G',H',I',J')] 
26*s(795)+15
  Such that:s(793) =< B
s(794) =< E
s(795) =< s(793)
s(795) =< s(794)

 * loop 192:rec_mat(A,B,C,D,E,F,G,H,I,J) -> [rec_mat(A',B',C',D',E',F',G',H',I',J')] 
26*s(804)+26*s(803)+15
  Such that:s(800) =< B
s(801) =< B'
s(802) =< E'
s(803) =< s(800)
s(804) =< s(801)
s(804) =< s(802)
s(803) =< s(802)

##### Pending set rec_mat(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 189: [it(189)=<1,s(807)=<B,s(806)=<E]
* Psum in Loop 191: [it(191)=<1,s(810)=<B,s(809)=<E]
* Psum in Loop 192: [it(192)=<1,s(815)=<B,s(814)=<B',s(813)=<E']

###### Computing sum for it(189)=<1  in Loop 189 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
       - Loop 191 is collaborative and bounds [it(191)] 
       - Loop 192 is collaborative and bounds [it(192)] 
     - head Candidate: A-1 
       - Loop 191 is collaborative and bounds [it(191)] 
       - Loop 192 is collaborative and bounds [it(192)] 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - Loop 191 is collaborative and bounds [it(191)] 
       - Loop 192 is collaborative and bounds [it(192)] 
     - tail Candidate: A-1 
       - Loop 191 is collaborative and bounds [it(191)] 
       - Loop 192 is collaborative and bounds [it(192)] 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(189)+it(191)+it(192)=<D-1,it(189)+it(191)+it(192)=<A-1,it(189)+it(191)+it(192)=<A-1,it(189)+it(191)+it(192)=<D-1,it(189)+it(191)+it(192)=<D-D',it(189)+it(191)+it(192)=<A-A',it(189)+it(191)+it(192)=<A-A',it(189)+it(191)+it(192)=<D-D'] 

##### Pending set A
* Psum in Loop 189: [s(807)=<B,s(806)=<E]
* Psum in Loop 191: [it(191)=<1,s(810)=<B,s(809)=<E]
* Psum in Loop 192: [it(192)=<1,s(815)=<B,s(814)=<B',s(813)=<E']

###### Computing sum for s(807)=<B  in Loop 189 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(159)=<B] 
 * Adding constraints: [s(807)=<it(189)*aux(159)] 

##### Pending set rec_mat(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(159)=<B]
* Psum in Loop 189: [s(806)=<E]
* Psum in Loop 191: [it(191)=<1,s(810)=<B,s(809)=<E]
* Psum in Loop 192: [it(192)=<1,s(815)=<B,s(814)=<B',s(813)=<E']

###### Computing max_min for aux(159)=<B  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(159)=<B] 

##### Pending set rec_mat(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 189: [s(806)=<E]
* Psum in Loop 191: [it(191)=<1,s(810)=<B,s(809)=<E]
* Psum in Loop 192: [it(192)=<1,s(815)=<B,s(814)=<B',s(813)=<E']

###### Computing sum for s(806)=<E  in Loop 189 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(160)=<E] 
 * Adding constraints: [s(806)=<it(189)*aux(160)] 

##### Pending set rec_mat(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(160)=<E]
* Psum in Loop 191: [it(191)=<1,s(810)=<B,s(809)=<E]
* Psum in Loop 192: [it(192)=<1,s(815)=<B,s(814)=<B',s(813)=<E']

###### Computing max_min for aux(160)=<E  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(160)=<E] 

##### Pending set rec_mat(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 191: [it(191)=<1,s(810)=<B,s(809)=<E]
* Psum in Loop 192: [it(192)=<1,s(815)=<B,s(814)=<B',s(813)=<E']

###### Computing sum for it(191)=<1  in Loop 191 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(189)+it(191)+it(192)=<D-1,it(189)+it(191)+it(192)=<A-1,it(189)+it(191)+it(192)=<A-1,it(189)+it(191)+it(192)=<D-1,it(189)+it(191)+it(192)=<D-D',it(189)+it(191)+it(192)=<A-A',it(189)+it(191)+it(192)=<A-A',it(189)+it(191)+it(192)=<D-D'] 

##### Pending set rec_mat(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 191: [s(810)=<B,s(809)=<E]
* Psum in Loop 192: [it(192)=<1,s(815)=<B,s(814)=<B',s(813)=<E']

###### Computing sum for s(810)=<B  in Loop 191 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(161)=<B] 
 * Adding constraints: [s(810)=<it(191)*aux(161)] 

##### Pending set rec_mat(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(161)=<B]
* Psum in Loop 191: [s(809)=<E]
* Psum in Loop 192: [it(192)=<1,s(815)=<B,s(814)=<B',s(813)=<E']

###### Computing max_min for aux(161)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(161)=<aux(159)] 

##### Pending set rec_mat(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 191: [s(809)=<E]
* Psum in Loop 192: [it(192)=<1,s(815)=<B,s(814)=<B',s(813)=<E']

###### Computing sum for s(809)=<E  in Loop 191 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(162)=<E] 
 * Adding constraints: [s(809)=<it(191)*aux(162)] 

##### Pending set rec_mat(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(162)=<E]
* Psum in Loop 192: [it(192)=<1,s(815)=<B,s(814)=<B',s(813)=<E']

###### Computing max_min for aux(162)=<E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(162)=<aux(160)] 

##### Pending set rec_mat(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 192: [it(192)=<1,s(815)=<B,s(814)=<B',s(813)=<E']

###### Computing sum for it(192)=<1  in Loop 192 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(189)+it(191)+it(192)=<D-1,it(189)+it(191)+it(192)=<A-1,it(189)+it(191)+it(192)=<A-1,it(189)+it(191)+it(192)=<D-1,it(189)+it(191)+it(192)=<D-D',it(189)+it(191)+it(192)=<A-A',it(189)+it(191)+it(192)=<A-A',it(189)+it(191)+it(192)=<D-D'] 

##### Pending set rec_mat(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 192: [s(815)=<B,s(814)=<B',s(813)=<E']

###### Computing sum for s(815)=<B  in Loop 192 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(163)=<B] 
 * Adding constraints: [s(815)=<it(192)*aux(163)] 

##### Pending set rec_mat(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(163)=<B]
* Psum in Loop 192: [s(814)=<B',s(813)=<E']

###### Computing max_min for aux(163)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(163)=<aux(159)] 

##### Pending set rec_mat(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 192: [s(814)=<B',s(813)=<E']

###### Computing sum for s(814)=<B'  in Loop 192 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(164)=<B] 
 * Adding constraints: [s(814)=<it(192)*aux(164)] 

##### Pending set rec_mat(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(164)=<B]
* Psum in Loop 192: [s(813)=<E']

###### Computing max_min for aux(164)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(164)=<aux(159)] 

##### Pending set rec_mat(A,B,C,D,E,F,G,H,I,J)
* Psum in Loop 192: [s(813)=<E']

###### Computing sum for s(813)=<E'  in Loop 192 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(165)=<E] 
 * Adding constraints: [s(813)=<it(192)*aux(165)] 

##### Pending set rec_mat(A,B,C,D,E,F,G,H,I,J)
* Pmax/min: [aux(165)=<E]

###### Computing max_min for aux(165)=<E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(165)=<aux(160)] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [189,191,192] 

#### Simplifying cost structure of phase [189,191,192] 
 * Joined equivalent variables [aux(162),aux(165)] into aux(162)
 * Joined equivalent variables [aux(161),aux(163),aux(164)] into aux(161)
 * Joined equivalent variables [it(189),it(191),it(192)] into it(189)
 * Joined equivalent variables [s(809),s(813)] into s(809)
 * Joined equivalent variables [s(810),s(814),s(815)] into s(810)
 * Joined equivalent variables [s(808),s(811),s(812)] into s(808)

#### Cost of phase [189,191,192]:rec_mat(A,B,C,D,E,F,G,H,I,J) -> [rec_mat(A',B',C',D',E',F',G',H',I',J')] 
45*it(189)+26*s(805)+78*s(808)+0
  Such that:aux(159) =< B
aux(160) =< E
aux(166) =< A
aux(167) =< A-A'
aux(168) =< D
aux(169) =< D-D'
it(189) =< aux(166)
it(189) =< aux(167)
it(189) =< aux(168)
it(189) =< aux(169)
aux(162) =< aux(160)
aux(161) =< aux(159)
s(806) =< it(189)*aux(160)
s(807) =< it(189)*aux(159)
s(809) =< it(189)*aux(162)
s(810) =< it(189)*aux(161)
s(808) =< s(810)
s(808) =< s(809)
s(805) =< s(807)
s(805) =< s(806)

#### Simplifying cost structure of chain [[189,191,192],190,188] 
 * Joined equivalent variables [aux(170),aux(166),aux(167),aux(169)] into aux(170)

#### Simplifying cost structure of CE 245 

#### Simplifying cost structure of chain [190,187] 

#### Found solution for phase  [189,191,192] in the cache 

#### Cost of phase [189,191,192]:rec_mat(A,B,C,D,E,F,G,H,I,J) -> [rec_mat(A',B',C',D',E',F',G',H',I',J')] 
45*it(189)+26*s(805)+78*s(808)+0
  Such that:aux(159) =< B
aux(160) =< E
aux(166) =< A
aux(167) =< A-A'
aux(168) =< D
aux(169) =< D-D'
it(189) =< aux(166)
it(189) =< aux(167)
it(189) =< aux(168)
it(189) =< aux(169)
aux(162) =< aux(160)
aux(161) =< aux(159)
s(806) =< it(189)*aux(160)
s(807) =< it(189)*aux(159)
s(809) =< it(189)*aux(162)
s(810) =< it(189)*aux(161)
s(808) =< s(810)
s(808) =< s(809)
s(805) =< s(807)
s(805) =< s(806)

#### Simplifying cost structure of chain [[189,191,192],190,187] 
 * Joined equivalent variables [aux(171),aux(167),aux(168),aux(169)] into aux(171)

#### Found solution for phase  [189,191,192] in the cache 

#### Cost of phase [189,191,192]:rec_mat(A,B,C,D,E,F,G,H,I,J) -> [rec_mat(A',B',C',D',E',F',G',H',I',J')] 
45*it(189)+26*s(805)+78*s(808)+0
  Such that:aux(159) =< B
aux(160) =< E
aux(166) =< A
aux(167) =< A-A'
aux(168) =< D
aux(169) =< D-D'
it(189) =< aux(166)
it(189) =< aux(167)
it(189) =< aux(168)
it(189) =< aux(169)
aux(162) =< aux(160)
aux(161) =< aux(159)
s(806) =< it(189)*aux(160)
s(807) =< it(189)*aux(159)
s(809) =< it(189)*aux(162)
s(810) =< it(189)*aux(161)
s(808) =< s(810)
s(808) =< s(809)
s(805) =< s(807)
s(805) =< s(806)

#### Simplifying cost structure of chain [[189,191,192],188] 
 * Joined equivalent variables [aux(172),aux(166),aux(167),aux(169)] into aux(172)

#### Found solution for phase  [189,191,192] in the cache 

#### Cost of phase [189,191,192]:rec_mat(A,B,C,D,E,F,G,H,I,J) -> [rec_mat(A',B',C',D',E',F',G',H',I',J')] 
45*it(189)+26*s(805)+78*s(808)+0
  Such that:aux(159) =< B
aux(160) =< E
aux(166) =< A
aux(167) =< A-A'
aux(168) =< D
aux(169) =< D-D'
it(189) =< aux(166)
it(189) =< aux(167)
it(189) =< aux(168)
it(189) =< aux(169)
aux(162) =< aux(160)
aux(161) =< aux(159)
s(806) =< it(189)*aux(160)
s(807) =< it(189)*aux(159)
s(809) =< it(189)*aux(162)
s(810) =< it(189)*aux(161)
s(808) =< s(810)
s(808) =< s(809)
s(805) =< s(807)
s(805) =< s(806)

#### Simplifying cost structure of chain [[189,191,192],187] 
 * Joined equivalent variables [aux(173),aux(167),aux(168),aux(169)] into aux(173)

#### Cost of chains of rec_mat(A,B,C,D,E,F,G,H,I,J):
* Chain [[189,191,192],190,188]: 45*it(189)+26*s(805)+78*s(808)+18
  Such that:aux(159) =< B
aux(168) =< D
aux(160) =< E
aux(170) =< A
it(189) =< aux(170)
it(189) =< aux(168)
aux(162) =< aux(160)
aux(161) =< aux(159)
s(806) =< it(189)*aux(160)
s(807) =< it(189)*aux(159)
s(809) =< it(189)*aux(162)
s(810) =< it(189)*aux(161)
s(808) =< s(810)
s(808) =< s(809)
s(805) =< s(807)
s(805) =< s(806)

  with precondition: [A=H,A>=3,C>=0,F>=0,G>=0,I>=1,J>=0,D>=A,B>=I,E>=I] 

* Chain [[189,191,192],190,187]: 45*it(189)+26*s(805)+78*s(808)+21
  Such that:aux(166) =< A
aux(159) =< B
aux(160) =< E
aux(171) =< D
it(189) =< aux(166)
it(189) =< aux(171)
aux(162) =< aux(160)
aux(161) =< aux(159)
s(806) =< it(189)*aux(160)
s(807) =< it(189)*aux(159)
s(809) =< it(189)*aux(162)
s(810) =< it(189)*aux(161)
s(808) =< s(810)
s(808) =< s(809)
s(805) =< s(807)
s(805) =< s(806)

  with precondition: [D=H,C>=0,D>=3,F>=0,G>=0,I>=1,J>=0,A>=D+1,B>=I,E>=I] 

* Chain [[189,191,192],188]: 45*it(189)+26*s(805)+78*s(808)+3
  Such that:aux(159) =< B
aux(168) =< D
aux(160) =< E
aux(172) =< A
it(189) =< aux(172)
it(189) =< aux(168)
aux(162) =< aux(160)
aux(161) =< aux(159)
s(806) =< it(189)*aux(160)
s(807) =< it(189)*aux(159)
s(809) =< it(189)*aux(162)
s(810) =< it(189)*aux(161)
s(808) =< s(810)
s(808) =< s(809)
s(805) =< s(807)
s(805) =< s(806)

  with precondition: [A=H,A>=2,C>=0,F>=0,G>=0,I>=2,J>=0,D>=A,B>=I,E>=I] 

* Chain [[189,191,192],187]: 45*it(189)+26*s(805)+78*s(808)+6
  Such that:aux(166) =< A
aux(159) =< B
aux(160) =< E
aux(173) =< D
it(189) =< aux(166)
it(189) =< aux(173)
aux(162) =< aux(160)
aux(161) =< aux(159)
s(806) =< it(189)*aux(160)
s(807) =< it(189)*aux(159)
s(809) =< it(189)*aux(162)
s(810) =< it(189)*aux(161)
s(808) =< s(810)
s(808) =< s(809)
s(805) =< s(807)
s(805) =< s(806)

  with precondition: [D=H,C>=0,D>=2,F>=0,G>=0,I>=2,J>=0,A>=D+1,B>=I,E>=I] 

* Chain [190,188]: 18
  with precondition: [A=2,H=2,I=1,B>=1,C>=0,D>=2,E>=1,F>=0,G>=0,J>=0] 

* Chain [190,187]: 21
  with precondition: [D=2,H=2,I=1,A>=3,B>=1,C>=0,E>=1,F>=0,G>=0,J>=0] 

* Chain [188]: 3
  with precondition: [A=1,B=0,H=1,I=0,C>=0,D>=0,E>=0,F>=0,G>=0,J>=0] 

* Chain [187]: 6
  with precondition: [D=1,E=0,H=1,I=0,A>=2,B>=1,C>=0,F>=0,G>=0,J>=0] 


#### Cost of chains of case_23(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q):

#### Simplifying cost structure of CE 247 

#### Cost of chains of case_21(A,B,C,D,E,F,G,H,I,J,K,L,M):
* Chain [193]: 6
  with precondition: [A=0,J=1,K=0,M=1,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,L>=0] 

 * Renamed intermediate variables: 
[ (eq(248,1),aux(117))>>s(816), (eq(248,1),aux(118))>>s(817), (eq(248,1),aux(119))>>s(818), (eq(248,1),aux(120))>>s(819), (eq(248,1),aux(121))>>s(820), (eq(248,1),aux(122))>>s(821), (eq(248,1),s(702))>>s(822), (eq(248,1),s(703))>>s(823), (eq(248,1),s(704))>>s(824), (eq(248,1),s(705))>>s(825), (eq(248,1),s(706))>>s(826), (eq(248,1),s(707))>>s(827), (eq(248,1),s(708))>>s(828), (eq(248,1),s(709))>>s(829)]

#### Simplifying cost structure of CE 248 

#### Cost of chains of minus(A,B,C,D,E,F,G,H,I,J,K,L):
* Chain [194]: 1120*s(824)+324*s(825)+210*s(826)+1120*s(827)+324*s(828)+210*s(829)+59
  Such that:s(816) =< A
s(817) =< B
s(818) =< C
s(819) =< E
s(820) =< F
s(821) =< G
s(822) =< s(817)
s(822) =< s(818)
s(823) =< s(820)
s(823) =< s(821)
s(824) =< s(819)
s(825) =< s(820)
s(826) =< s(824)*s(823)
s(827) =< s(816)
s(828) =< s(817)
s(829) =< s(827)*s(822)

  with precondition: [D=1,H=1,I=1,J=0,L=1,A>=2,B>=1,C>=0,E>=2,F>=1,G>=0,K>=0] 


#### Simplifying cost structure of CE 249 

#### Computing cost of phase [195,196] 
 * Renamed intermediate variables: 
[ (eq(256,1),aux(135))>>s(830), (eq(256,1),aux(145))>>s(831), (eq(256,1),aux(136))>>s(832), (eq(256,1),aux(146))>>s(833), (eq(256,1),aux(148))>>s(834), (eq(256,1),aux(123))>>s(835), (eq(256,1),aux(134))>>s(836), (eq(256,1),aux(126))>>s(837), (eq(256,1),aux(150))>>s(838), (eq(256,1),it(165))>>s(839), (eq(256,1),it(166))>>s(840), (eq(256,1),it(168))>>s(841), (eq(256,1),aux(137))>>s(842), (eq(256,1),aux(140))>>s(843), (eq(256,1),aux(139))>>s(844), (eq(256,1),aux(138))>>s(845), (eq(256,1),aux(127))>>s(846), (eq(256,1),aux(128))>>s(847), (eq(256,1),aux(131))>>s(848), (eq(256,1),s(768))>>s(849), (eq(256,1),aux(125))>>s(850), (eq(256,1),aux(129))>>s(851), (eq(256,1),aux(132))>>s(852), (eq(256,1),aux(124))>>s(853), (eq(256,1),s(769))>>s(854), (eq(256,1),s(771))>>s(855), (eq(256,1),s(770))>>s(856)]

#### Simplifying cost structure of CE 256 
 * Joined equivalent variables [aux(176),s(834)] into aux(176)
 * Joined equivalent variables [aux(179),s(835),s(837)] into aux(179)
 * Joined equivalent variables [s(830),s(831)] into s(830)
 * Joined equivalent variables [s(832),s(833)] into s(832)
 * Renamed intermediate variables: 
[ (it(195),s(838))>>s(857), (it(195),s(836))>>s(858), (it(195),aux(174))>>s(859), (it(195),aux(175))>>s(860), (it(195),aux(176))>>s(861), (it(195),aux(177))>>s(862), (it(195),aux(178))>>s(863), (it(195),aux(179))>>s(864), (it(195),s(830))>>s(865), (it(195),s(832))>>s(866), (it(195),s(839))>>s(867), (it(195),s(840))>>s(868), (it(195),s(841))>>s(869), (it(195),s(842))>>s(870), (it(195),s(843))>>s(871), (it(195),s(844))>>s(872), (it(195),s(845))>>s(873), (it(195),s(846))>>s(874), (it(195),s(847))>>s(875), (it(195),s(848))>>s(876), (it(195),s(849))>>s(877), (it(195),s(850))>>s(878), (it(195),s(851))>>s(879), (it(195),s(852))>>s(880), (it(195),s(853))>>s(881), (it(195),s(854))>>s(882), (it(195),s(855))>>s(883), (it(195),s(856))>>s(884)]

#### Simplifying cost structure of CE 251 

#### Simplifying cost structure of CE 253 
 * Renamed intermediate variables: 
[ (eq(255,1),aux(144))>>s(885), (eq(255,1),aux(135))>>s(886), (eq(255,1),aux(145))>>s(887), (eq(255,1),aux(136))>>s(888), (eq(255,1),aux(146))>>s(889), (eq(255,1),aux(123))>>s(890), (eq(255,1),aux(134))>>s(891), (eq(255,1),aux(126))>>s(892), (eq(255,1),aux(151))>>s(893), (eq(255,1),it(165))>>s(894), (eq(255,1),it(166))>>s(895), (eq(255,1),it(168))>>s(896), (eq(255,1),aux(137))>>s(897), (eq(255,1),aux(140))>>s(898), (eq(255,1),aux(139))>>s(899), (eq(255,1),aux(138))>>s(900), (eq(255,1),aux(127))>>s(901), (eq(255,1),aux(128))>>s(902), (eq(255,1),aux(131))>>s(903), (eq(255,1),s(768))>>s(904), (eq(255,1),aux(125))>>s(905), (eq(255,1),aux(129))>>s(906), (eq(255,1),aux(132))>>s(907), (eq(255,1),aux(124))>>s(908), (eq(255,1),s(769))>>s(909), (eq(255,1),s(771))>>s(910), (eq(255,1),s(770))>>s(911)]

#### Simplifying cost structure of CE 255 
 * Joined equivalent variables [aux(180),s(886),s(887)] into aux(180)
 * Joined equivalent variables [aux(181),s(888),s(889)] into aux(181)
 * Joined equivalent variables [aux(182),s(890),s(892)] into aux(182)
 * Renamed intermediate variables: 
[ (eq(257,1),aux(135))>>s(912), (eq(257,1),aux(145))>>s(913), (eq(257,1),aux(136))>>s(914), (eq(257,1),aux(146))>>s(915), (eq(257,1),aux(148))>>s(916), (eq(257,1),aux(123))>>s(917), (eq(257,1),aux(134))>>s(918), (eq(257,1),aux(126))>>s(919), (eq(257,1),aux(150))>>s(920), (eq(257,1),it(165))>>s(921), (eq(257,1),it(166))>>s(922), (eq(257,1),it(168))>>s(923), (eq(257,1),aux(137))>>s(924), (eq(257,1),aux(140))>>s(925), (eq(257,1),aux(139))>>s(926), (eq(257,1),aux(138))>>s(927), (eq(257,1),aux(127))>>s(928), (eq(257,1),aux(128))>>s(929), (eq(257,1),aux(131))>>s(930), (eq(257,1),s(768))>>s(931), (eq(257,1),aux(125))>>s(932), (eq(257,1),aux(129))>>s(933), (eq(257,1),aux(132))>>s(934), (eq(257,1),aux(124))>>s(935), (eq(257,1),s(769))>>s(936), (eq(257,1),s(771))>>s(937), (eq(257,1),s(770))>>s(938)]

#### Simplifying cost structure of CE 257 
 * Joined equivalent variables [aux(185),s(916)] into aux(185)
 * Joined equivalent variables [aux(188),s(917),s(919)] into aux(188)
 * Joined equivalent variables [s(912),s(913)] into s(912)
 * Joined equivalent variables [s(914),s(915)] into s(914)
 * Joined equivalent variables [aux(189),s(885)] into aux(189)
 * Joined equivalent variables [aux(190),aux(180),aux(183)] into aux(190)
 * Joined equivalent variables [aux(191),aux(181),aux(184)] into aux(191)
 * Joined equivalent variables [aux(192),aux(185),s(893)] into aux(192)
 * Joined equivalent variables [aux(193),aux(182),aux(188)] into aux(193)
 * Joined equivalent variables [aux(194),s(891),s(918)] into aux(194)
 * Joined equivalent variables [s(897),s(924)] into s(897)
 * Joined equivalent variables [s(898),s(925)] into s(898)
 * Joined equivalent variables [s(901),s(928)] into s(901)
 * Renamed intermediate variables: 
[ (it(196),aux(186))>>s(939), (it(196),aux(187))>>s(940), (it(196),aux(189))>>s(941), (it(196),aux(190))>>s(942), (it(196),aux(191))>>s(943), (it(196),aux(192))>>s(944), (it(196),aux(193))>>s(945), (it(196),aux(194))>>s(946), (it(196),s(920))>>s(947), (it(196),s(894))>>s(948), (it(196),s(895))>>s(949), (it(196),s(896))>>s(950), (it(196),s(897))>>s(951), (it(196),s(898))>>s(952), (it(196),s(899))>>s(953), (it(196),s(900))>>s(954), (it(196),s(901))>>s(955), (it(196),s(902))>>s(956), (it(196),s(903))>>s(957), (it(196),s(904))>>s(958), (it(196),s(905))>>s(959), (it(196),s(906))>>s(960), (it(196),s(907))>>s(961), (it(196),s(908))>>s(962), (it(196),s(909))>>s(963), (it(196),s(910))>>s(964), (it(196),s(911))>>s(965), (it(196),s(912))>>s(966), (it(196),s(914))>>s(967), (it(196),s(921))>>s(968), (it(196),s(922))>>s(969), (it(196),s(923))>>s(970), (it(196),s(926))>>s(971), (it(196),s(927))>>s(972), (it(196),s(929))>>s(973), (it(196),s(930))>>s(974), (it(196),s(931))>>s(975), (it(196),s(932))>>s(976), (it(196),s(933))>>s(977), (it(196),s(934))>>s(978), (it(196),s(935))>>s(979), (it(196),s(936))>>s(980), (it(196),s(937))>>s(981), (it(196),s(938))>>s(982)]

#### Cost of loops [195,196] 

 * loop 195:mat_mult_jan(A,B,C,D,E,F,G,H,I) -> [mat_mult_jan(A',B',C',D',E',F',G',H',I')] 
22*s(867)+11*s(868)+11*s(869)+10*s(877)+9*s(882)+9*s(883)+10*s(884)+9
  Such that:s(857) =< B
s(858) =< E'+1
s(859) =< B+E'
s(860) =< B+3*E'
s(861) =< D
s(862) =< D+E'
s(863) =< D+3*E'
s(864) =< E'
s(865) =< s(859)
s(866) =< s(860)
s(857) =< s(861)
s(865) =< s(862)
s(866) =< s(863)
s(867) =< s(857)
s(868) =< s(857)
s(869) =< s(857)
s(867) =< s(861)
s(868) =< s(861)
s(869) =< s(861)
s(870) =< s(864)
s(871) =< s(864)-1
s(872) =< s(866)+1
s(873) =< s(865)+1
s(874) =< s(864)-2
s(875) =< s(867)*s(866)
s(876) =< s(867)*s(865)
s(877) =< s(867)*s(864)
s(878) =< s(867)*s(871)
s(879) =< s(867)*s(872)
s(880) =< s(867)*s(873)
s(881) =< s(867)*s(874)
s(882) =< s(879)+s(875)+s(866)
s(883) =< s(879)+s(875)+s(866)
s(882) =< s(880)+s(876)+s(865)
s(883) =< s(880)+s(876)+s(865)
s(869) =< s(880)+s(876)+s(865)
s(869) =< s(879)+s(875)+s(866)
s(868) =< s(878)+s(881)+s(864)
s(869) =< s(878)+s(881)+s(864)
s(883) =< s(869)*s(870)
s(884) =< s(868)*s(870)
s(882) =< s(868)*s(858)

 * loop 196:mat_mult_jan(A,B,C,D,E,F,G,H,I) -> [mat_mult_jan(A',B',C',D',E',F',G',H',I')] 
22*s(948)+11*s(949)+11*s(950)+10*s(958)+9*s(963)+9*s(964)+10*s(965)+22*s(968)+11*s(969)+11*s(970)+10*s(975)+9*s(980)+9*s(981)+10*s(982)+13
  Such that:s(939) =< D+E'
s(940) =< D+3*E'
s(941) =< B
s(942) =< B+E'
s(943) =< B+3*E'
s(944) =< D
s(945) =< E'
s(946) =< E'+1
s(947) =< s(941)
s(948) =< s(941)
s(949) =< s(941)
s(950) =< s(941)
s(948) =< s(944)
s(949) =< s(944)
s(950) =< s(944)
s(951) =< s(945)
s(952) =< s(945)-1
s(953) =< s(943)+1
s(954) =< s(942)+1
s(955) =< s(945)-2
s(956) =< s(948)*s(943)
s(957) =< s(948)*s(942)
s(958) =< s(948)*s(945)
s(959) =< s(948)*s(952)
s(960) =< s(948)*s(953)
s(961) =< s(948)*s(954)
s(962) =< s(948)*s(955)
s(963) =< s(960)+s(956)+s(943)
s(964) =< s(960)+s(956)+s(943)
s(963) =< s(961)+s(957)+s(942)
s(964) =< s(961)+s(957)+s(942)
s(950) =< s(961)+s(957)+s(942)
s(950) =< s(960)+s(956)+s(943)
s(949) =< s(959)+s(962)+s(945)
s(950) =< s(959)+s(962)+s(945)
s(964) =< s(950)*s(951)
s(965) =< s(949)*s(951)
s(963) =< s(949)*s(946)
s(966) =< s(942)
s(967) =< s(943)
s(947) =< s(944)
s(966) =< s(939)
s(967) =< s(940)
s(968) =< s(947)
s(969) =< s(947)
s(970) =< s(947)
s(968) =< s(944)
s(969) =< s(944)
s(970) =< s(944)
s(971) =< s(967)+1
s(972) =< s(966)+1
s(973) =< s(968)*s(967)
s(974) =< s(968)*s(966)
s(975) =< s(968)*s(945)
s(976) =< s(968)*s(952)
s(977) =< s(968)*s(971)
s(978) =< s(968)*s(972)
s(979) =< s(968)*s(955)
s(980) =< s(977)+s(973)+s(967)
s(981) =< s(977)+s(973)+s(967)
s(980) =< s(978)+s(974)+s(966)
s(981) =< s(978)+s(974)+s(966)
s(970) =< s(978)+s(974)+s(966)
s(970) =< s(977)+s(973)+s(967)
s(969) =< s(976)+s(979)+s(945)
s(970) =< s(976)+s(979)+s(945)
s(981) =< s(970)*s(951)
s(982) =< s(969)*s(951)
s(980) =< s(969)*s(946)

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(859)=<B+E,s(942)=<B+E,s(860)=<B+3*E,s(943)=<B+3*E,s(862)=<D+E,s(939)=<D+E,s(863)=<D+3*E,s(940)=<D+3*E,s(864)=<E,s(945)=<E,s(858)=<E+1,s(946)=<E+1]
* Psum in Loop 195: [it(195)=<1,s(1000)=<B,s(1004)=<B+E',s(1003)=<B+3*E',s(999)=<D,s(1002)=<D+E',s(1001)=<D+3*E',s(990)=<E']
* Psum in Loop 196: [it(196)=<1,s(1040)=<B,s(1033)=<B+E',s(1032)=<B+3*E',s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing max_min for s(859)=<B+E  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(859)=<B+E] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(942)=<B+E,s(860)=<B+3*E,s(943)=<B+3*E,s(862)=<D+E,s(939)=<D+E,s(863)=<D+3*E,s(940)=<D+3*E,s(864)=<E,s(945)=<E,s(858)=<E+1,s(946)=<E+1]
* Psum in Loop 195: [it(195)=<1,s(1000)=<B,s(1004)=<B+E',s(1003)=<B+3*E',s(999)=<D,s(1002)=<D+E',s(1001)=<D+3*E',s(990)=<E']
* Psum in Loop 196: [it(196)=<1,s(1040)=<B,s(1033)=<B+E',s(1032)=<B+3*E',s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing max_min for s(942)=<B+E  
   - Found a solution using cacheing 
 * Adding constraints:[s(942)=<s(859)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(860)=<B+3*E,s(943)=<B+3*E,s(862)=<D+E,s(939)=<D+E,s(863)=<D+3*E,s(940)=<D+3*E,s(864)=<E,s(945)=<E,s(858)=<E+1,s(946)=<E+1]
* Psum in Loop 195: [it(195)=<1,s(1000)=<B,s(1004)=<B+E',s(1003)=<B+3*E',s(999)=<D,s(1002)=<D+E',s(1001)=<D+3*E',s(990)=<E']
* Psum in Loop 196: [it(196)=<1,s(1040)=<B,s(1033)=<B+E',s(1032)=<B+3*E',s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing max_min for s(860)=<B+3*E  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(860)=<B+3*E] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(943)=<B+3*E,s(862)=<D+E,s(939)=<D+E,s(863)=<D+3*E,s(940)=<D+3*E,s(864)=<E,s(945)=<E,s(858)=<E+1,s(946)=<E+1]
* Psum in Loop 195: [it(195)=<1,s(1000)=<B,s(1004)=<B+E',s(1003)=<B+3*E',s(999)=<D,s(1002)=<D+E',s(1001)=<D+3*E',s(990)=<E']
* Psum in Loop 196: [it(196)=<1,s(1040)=<B,s(1033)=<B+E',s(1032)=<B+3*E',s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing max_min for s(943)=<B+3*E  
   - Found a solution using cacheing 
 * Adding constraints:[s(943)=<s(860)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(862)=<D+E,s(939)=<D+E,s(863)=<D+3*E,s(940)=<D+3*E,s(864)=<E,s(945)=<E,s(858)=<E+1,s(946)=<E+1]
* Psum in Loop 195: [it(195)=<1,s(1000)=<B,s(1004)=<B+E',s(1003)=<B+3*E',s(999)=<D,s(1002)=<D+E',s(1001)=<D+3*E',s(990)=<E']
* Psum in Loop 196: [it(196)=<1,s(1040)=<B,s(1033)=<B+E',s(1032)=<B+3*E',s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing max_min for s(862)=<D+E  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(862)=<D+E] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(939)=<D+E,s(863)=<D+3*E,s(940)=<D+3*E,s(864)=<E,s(945)=<E,s(858)=<E+1,s(946)=<E+1]
* Psum in Loop 195: [it(195)=<1,s(1000)=<B,s(1004)=<B+E',s(1003)=<B+3*E',s(999)=<D,s(1002)=<D+E',s(1001)=<D+3*E',s(990)=<E']
* Psum in Loop 196: [it(196)=<1,s(1040)=<B,s(1033)=<B+E',s(1032)=<B+3*E',s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing max_min for s(939)=<D+E  
   - Found a solution using cacheing 
 * Adding constraints:[s(939)=<s(862)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(863)=<D+3*E,s(940)=<D+3*E,s(864)=<E,s(945)=<E,s(858)=<E+1,s(946)=<E+1]
* Psum in Loop 195: [it(195)=<1,s(1000)=<B,s(1004)=<B+E',s(1003)=<B+3*E',s(999)=<D,s(1002)=<D+E',s(1001)=<D+3*E',s(990)=<E']
* Psum in Loop 196: [it(196)=<1,s(1040)=<B,s(1033)=<B+E',s(1032)=<B+3*E',s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing max_min for s(863)=<D+3*E  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(863)=<D+3*E] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(940)=<D+3*E,s(864)=<E,s(945)=<E,s(858)=<E+1,s(946)=<E+1]
* Psum in Loop 195: [it(195)=<1,s(1000)=<B,s(1004)=<B+E',s(1003)=<B+3*E',s(999)=<D,s(1002)=<D+E',s(1001)=<D+3*E',s(990)=<E']
* Psum in Loop 196: [it(196)=<1,s(1040)=<B,s(1033)=<B+E',s(1032)=<B+3*E',s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing max_min for s(940)=<D+3*E  
   - Found a solution using cacheing 
 * Adding constraints:[s(940)=<s(863)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(864)=<E,s(945)=<E,s(858)=<E+1,s(946)=<E+1]
* Psum in Loop 195: [it(195)=<1,s(1000)=<B,s(1004)=<B+E',s(1003)=<B+3*E',s(999)=<D,s(1002)=<D+E',s(1001)=<D+3*E',s(990)=<E']
* Psum in Loop 196: [it(196)=<1,s(1040)=<B,s(1033)=<B+E',s(1032)=<B+3*E',s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing max_min for s(864)=<E  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(864)=<E] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(945)=<E,s(858)=<E+1,s(946)=<E+1]
* Psum in Loop 195: [it(195)=<1,s(1000)=<B,s(1004)=<B+E',s(1003)=<B+3*E',s(999)=<D,s(1002)=<D+E',s(1001)=<D+3*E',s(990)=<E']
* Psum in Loop 196: [it(196)=<1,s(1040)=<B,s(1033)=<B+E',s(1032)=<B+3*E',s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing max_min for s(945)=<E  
   - Found a solution using cacheing 
 * Adding constraints:[s(945)=<s(864)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(858)=<E+1,s(946)=<E+1]
* Psum in Loop 195: [it(195)=<1,s(1000)=<B,s(1004)=<B+E',s(1003)=<B+3*E',s(999)=<D,s(1002)=<D+E',s(1001)=<D+3*E',s(990)=<E']
* Psum in Loop 196: [it(196)=<1,s(1040)=<B,s(1033)=<B+E',s(1032)=<B+3*E',s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing max_min for s(858)=<E+1  
   - Found a solution using cacheing 
 * Adding constraints:[s(858)=<s(864)+1] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(946)=<E+1]
* Psum in Loop 195: [it(195)=<1,s(1000)=<B,s(1004)=<B+E',s(1003)=<B+3*E',s(999)=<D,s(1002)=<D+E',s(1001)=<D+3*E',s(990)=<E']
* Psum in Loop 196: [it(196)=<1,s(1040)=<B,s(1033)=<B+E',s(1032)=<B+3*E',s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing max_min for s(946)=<E+1  
   - Found a solution using cacheing 
 * Adding constraints:[s(946)=<s(864)+1] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 195: [it(195)=<1,s(1000)=<B,s(1004)=<B+E',s(1003)=<B+3*E',s(999)=<D,s(1002)=<D+E',s(1001)=<D+3*E',s(990)=<E']
* Psum in Loop 196: [it(196)=<1,s(1040)=<B,s(1033)=<B+E',s(1032)=<B+3*E',s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing sum for it(195)=<1  in Loop 195 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - Loop 196 is collaborative and bounds [it(196)] 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - Loop 196 is collaborative and bounds [it(196)] 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(195)+it(196)=<A-1,it(195)+it(196)=<A-1,it(195)+it(196)=<A-A',it(195)+it(196)=<A-A'] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 195: [s(1000)=<B,s(1004)=<B+E',s(1003)=<B+3*E',s(999)=<D,s(1002)=<D+E',s(1001)=<D+3*E',s(990)=<E']
* Psum in Loop 196: [it(196)=<1,s(1040)=<B,s(1033)=<B+E',s(1032)=<B+3*E',s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing sum for s(1000)=<B  in Loop 195 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(195)=<B] 
 * Adding constraints: [s(1000)=<it(195)*aux(195)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(195)=<B]
* Psum in Loop 195: [s(1004)=<B+E',s(1003)=<B+3*E',s(999)=<D,s(1002)=<D+E',s(1001)=<D+3*E',s(990)=<E']
* Psum in Loop 196: [it(196)=<1,s(1040)=<B,s(1033)=<B+E',s(1032)=<B+3*E',s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing max_min for aux(195)=<B  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(195)=<B] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 195: [s(1004)=<B+E',s(1003)=<B+3*E',s(999)=<D,s(1002)=<D+E',s(1001)=<D+3*E',s(990)=<E']
* Psum in Loop 196: [it(196)=<1,s(1040)=<B,s(1033)=<B+E',s(1032)=<B+3*E',s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing sum for s(1004)=<B+E'  in Loop 195 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(196)=<B+E] 
 * Adding constraints: [s(1004)=<it(195)*aux(196)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(196)=<B+E]
* Psum in Loop 195: [s(1003)=<B+3*E',s(999)=<D,s(1002)=<D+E',s(1001)=<D+3*E',s(990)=<E']
* Psum in Loop 196: [it(196)=<1,s(1040)=<B,s(1033)=<B+E',s(1032)=<B+3*E',s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing max_min for aux(196)=<B+E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(196)=<s(859)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 195: [s(1003)=<B+3*E',s(999)=<D,s(1002)=<D+E',s(1001)=<D+3*E',s(990)=<E']
* Psum in Loop 196: [it(196)=<1,s(1040)=<B,s(1033)=<B+E',s(1032)=<B+3*E',s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing sum for s(1003)=<B+3*E'  in Loop 195 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(197)=<B+3*E] 
 * Adding constraints: [s(1003)=<it(195)*aux(197)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(197)=<B+3*E]
* Psum in Loop 195: [s(999)=<D,s(1002)=<D+E',s(1001)=<D+3*E',s(990)=<E']
* Psum in Loop 196: [it(196)=<1,s(1040)=<B,s(1033)=<B+E',s(1032)=<B+3*E',s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing max_min for aux(197)=<B+3*E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(197)=<s(860)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 195: [s(999)=<D,s(1002)=<D+E',s(1001)=<D+3*E',s(990)=<E']
* Psum in Loop 196: [it(196)=<1,s(1040)=<B,s(1033)=<B+E',s(1032)=<B+3*E',s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing sum for s(999)=<D  in Loop 195 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(198)=<D] 
 * Adding constraints: [s(999)=<it(195)*aux(198)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(198)=<D]
* Psum in Loop 195: [s(1002)=<D+E',s(1001)=<D+3*E',s(990)=<E']
* Psum in Loop 196: [it(196)=<1,s(1040)=<B,s(1033)=<B+E',s(1032)=<B+3*E',s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing max_min for aux(198)=<D  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(198)=<D] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 195: [s(1002)=<D+E',s(1001)=<D+3*E',s(990)=<E']
* Psum in Loop 196: [it(196)=<1,s(1040)=<B,s(1033)=<B+E',s(1032)=<B+3*E',s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing sum for s(1002)=<D+E'  in Loop 195 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(199)=<D+E] 
 * Adding constraints: [s(1002)=<it(195)*aux(199)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(199)=<D+E]
* Psum in Loop 195: [s(1001)=<D+3*E',s(990)=<E']
* Psum in Loop 196: [it(196)=<1,s(1040)=<B,s(1033)=<B+E',s(1032)=<B+3*E',s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing max_min for aux(199)=<D+E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(199)=<s(862)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 195: [s(1001)=<D+3*E',s(990)=<E']
* Psum in Loop 196: [it(196)=<1,s(1040)=<B,s(1033)=<B+E',s(1032)=<B+3*E',s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing sum for s(1001)=<D+3*E'  in Loop 195 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(200)=<D+3*E] 
 * Adding constraints: [s(1001)=<it(195)*aux(200)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(200)=<D+3*E]
* Psum in Loop 195: [s(990)=<E']
* Psum in Loop 196: [it(196)=<1,s(1040)=<B,s(1033)=<B+E',s(1032)=<B+3*E',s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing max_min for aux(200)=<D+3*E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(200)=<s(863)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 195: [s(990)=<E']
* Psum in Loop 196: [it(196)=<1,s(1040)=<B,s(1033)=<B+E',s(1032)=<B+3*E',s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing sum for s(990)=<E'  in Loop 195 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(201)=<E] 
 * Adding constraints: [s(990)=<it(195)*aux(201)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(201)=<E]
* Psum in Loop 196: [it(196)=<1,s(1040)=<B,s(1033)=<B+E',s(1032)=<B+3*E',s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing max_min for aux(201)=<E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(201)=<s(864)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 196: [it(196)=<1,s(1040)=<B,s(1033)=<B+E',s(1032)=<B+3*E',s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing sum for it(196)=<1  in Loop 196 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(195)+it(196)=<A-1,it(195)+it(196)=<A-1,it(195)+it(196)=<A-A',it(195)+it(196)=<A-A'] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 196: [s(1040)=<B,s(1033)=<B+E',s(1032)=<B+3*E',s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing sum for s(1040)=<B  in Loop 196 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(202)=<B] 
 * Adding constraints: [s(1040)=<it(196)*aux(202)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(202)=<B]
* Psum in Loop 196: [s(1033)=<B+E',s(1032)=<B+3*E',s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing max_min for aux(202)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(202)=<aux(195)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 196: [s(1033)=<B+E',s(1032)=<B+3*E',s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing sum for s(1033)=<B+E'  in Loop 196 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(203)=<B+E] 
 * Adding constraints: [s(1033)=<it(196)*aux(203)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(203)=<B+E]
* Psum in Loop 196: [s(1032)=<B+3*E',s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing max_min for aux(203)=<B+E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(203)=<s(859)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 196: [s(1032)=<B+3*E',s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing sum for s(1032)=<B+3*E'  in Loop 196 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(204)=<B+3*E] 
 * Adding constraints: [s(1032)=<it(196)*aux(204)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(204)=<B+3*E]
* Psum in Loop 196: [s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing max_min for aux(204)=<B+3*E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(204)=<s(860)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 196: [s(1028)=<D,s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing sum for s(1028)=<D  in Loop 196 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(205)=<D] 
 * Adding constraints: [s(1028)=<it(196)*aux(205)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(205)=<D]
* Psum in Loop 196: [s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing max_min for aux(205)=<D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(205)=<aux(198)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 196: [s(1031)=<D+E',s(1030)=<D+3*E',s(1019)=<E']

###### Computing sum for s(1031)=<D+E'  in Loop 196 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(206)=<D+E] 
 * Adding constraints: [s(1031)=<it(196)*aux(206)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(206)=<D+E]
* Psum in Loop 196: [s(1030)=<D+3*E',s(1019)=<E']

###### Computing max_min for aux(206)=<D+E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(206)=<s(862)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 196: [s(1030)=<D+3*E',s(1019)=<E']

###### Computing sum for s(1030)=<D+3*E'  in Loop 196 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(207)=<D+3*E] 
 * Adding constraints: [s(1030)=<it(196)*aux(207)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(207)=<D+3*E]
* Psum in Loop 196: [s(1019)=<E']

###### Computing max_min for aux(207)=<D+3*E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(207)=<s(863)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Psum in Loop 196: [s(1019)=<E']

###### Computing sum for s(1019)=<E'  in Loop 196 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(208)=<E] 
 * Adding constraints: [s(1019)=<it(196)*aux(208)] 

##### Pending set mat_mult_jan(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(208)=<E]

###### Computing max_min for aux(208)=<E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(208)=<s(864)] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [195,196] 

#### Simplifying cost structure of phase [195,196] 
 * Joined equivalent variables [aux(201),aux(208),s(870),s(945)] into aux(201)
 * Joined equivalent variables [aux(200),aux(207),s(940)] into aux(200)
 * Joined equivalent variables [aux(199),aux(206),s(939)] into aux(199)
 * Joined equivalent variables [aux(197),aux(204),s(943)] into aux(197)
 * Joined equivalent variables [aux(196),aux(203),s(942)] into aux(196)
 * Joined equivalent variables [s(858),s(946)] into s(858)
 * Joined equivalent variables [it(195),it(196)] into it(195)
 * Joined equivalent variables [s(990),s(1019)] into s(990)
 * Joined equivalent variables [s(1001),s(1030)] into s(1001)
 * Joined equivalent variables [s(1002),s(1031)] into s(1002)
 * Joined equivalent variables [s(1003),s(1032)] into s(1003)
 * Joined equivalent variables [s(1004),s(1033)] into s(1004)
 * Joined equivalent variables [s(993),s(1022)] into s(993)
 * Joined equivalent variables [s(996),s(1025)] into s(996)

#### Cost of phase [195,196]:mat_mult_jan(A,B,C,D,E,F,G,H,I) -> [mat_mult_jan(A',B',C',D',E',F',G',H',I')] 
22*it(195)+22*s(983)+11*s(984)+11*s(985)+10*s(986)+9*s(987)+9*s(988)+10*s(989)+22*s(1005)+11*s(1006)+11*s(1007)+10*s(1008)+9*s(1009)+9*s(1010)+10*s(1011)+22*s(1012)+11*s(1013)+11*s(1014)+10*s(1015)+9*s(1016)+9*s(1017)+10*s(1018)+0
  Such that:aux(195) =< B
s(859) =< B+E
s(860) =< B+3*E
aux(198) =< D
s(862) =< D+E
s(863) =< D+3*E
s(864) =< E
aux(209) =< A
aux(210) =< A-A'
it(195) =< aux(209)
it(195) =< aux(210)
aux(201) =< s(864)
aux(200) =< s(863)
aux(199) =< s(862)
aux(205) =< aux(198)
aux(197) =< s(860)
aux(196) =< s(859)
aux(202) =< aux(195)
s(858) =< s(864)+1
s(999) =< it(195)*aux(198)
s(1000) =< it(195)*aux(195)
s(990) =< it(195)*aux(201)
s(1001) =< it(195)*aux(200)
s(1002) =< it(195)*aux(199)
s(1028) =< it(195)*aux(205)
s(1003) =< it(195)*aux(197)
s(1004) =< it(195)*aux(196)
s(1040) =< it(195)*aux(202)
s(1029) =< s(1040)
s(1005) =< s(1040)
s(1006) =< s(1040)
s(1007) =< s(1040)
s(1005) =< s(1028)
s(1006) =< s(1028)
s(1007) =< s(1028)
s(951) =< aux(201)
s(952) =< aux(201)-1
s(953) =< aux(197)+1
s(954) =< aux(196)+1
s(955) =< aux(201)-2
s(1036) =< s(1005)*aux(197)
s(1038) =< s(1005)*aux(196)
s(1008) =< s(1005)*aux(201)
s(1035) =< s(1005)*s(952)
s(1037) =< s(1005)*s(953)
s(1039) =< s(1005)*s(954)
s(1034) =< s(1005)*s(955)
s(1009) =< s(1037)+s(1036)+s(1003)
s(1010) =< s(1037)+s(1036)+s(1003)
s(1009) =< s(1039)+s(1038)+s(1004)
s(1010) =< s(1039)+s(1038)+s(1004)
s(1007) =< s(1039)+s(1038)+s(1004)
s(1007) =< s(1037)+s(1036)+s(1003)
s(1006) =< s(1035)+s(1034)+s(990)
s(1007) =< s(1035)+s(1034)+s(990)
s(1010) =< s(1007)*s(951)
s(1011) =< s(1006)*s(951)
s(1009) =< s(1006)*s(858)
s(996) =< s(1004)
s(966) =< aux(196)
s(993) =< s(1003)
s(967) =< aux(197)
s(1029) =< s(1028)
s(996) =< s(1002)
s(966) =< aux(199)
s(993) =< s(1001)
s(967) =< aux(200)
s(1012) =< s(1029)
s(1013) =< s(1029)
s(1014) =< s(1029)
s(1012) =< s(1028)
s(1013) =< s(1028)
s(1014) =< s(1028)
s(971) =< s(967)+1
s(972) =< s(966)+1
s(1023) =< s(1012)*s(967)
s(1026) =< s(1012)*s(966)
s(1015) =< s(1012)*aux(201)
s(1021) =< s(1012)*s(952)
s(1024) =< s(1012)*s(971)
s(1027) =< s(1012)*s(972)
s(1020) =< s(1012)*s(955)
s(1016) =< s(1024)+s(1023)+s(993)
s(1017) =< s(1024)+s(1023)+s(993)
s(1016) =< s(1027)+s(1026)+s(996)
s(1017) =< s(1027)+s(1026)+s(996)
s(1014) =< s(1027)+s(1026)+s(996)
s(1014) =< s(1024)+s(1023)+s(993)
s(1013) =< s(1021)+s(1020)+s(990)
s(1014) =< s(1021)+s(1020)+s(990)
s(1017) =< s(1014)*s(951)
s(1018) =< s(1013)*s(951)
s(1016) =< s(1013)*s(858)
s(865) =< s(859)
s(866) =< s(860)
s(1000) =< s(999)
s(865) =< s(862)
s(866) =< s(863)
s(983) =< s(1000)
s(984) =< s(1000)
s(985) =< s(1000)
s(983) =< s(999)
s(984) =< s(999)
s(985) =< s(999)
s(871) =< s(864)-1
s(872) =< s(866)+1
s(873) =< s(865)+1
s(874) =< s(864)-2
s(994) =< s(983)*s(866)
s(997) =< s(983)*s(865)
s(986) =< s(983)*s(864)
s(992) =< s(983)*s(871)
s(995) =< s(983)*s(872)
s(998) =< s(983)*s(873)
s(991) =< s(983)*s(874)
s(987) =< s(995)+s(994)+s(993)
s(988) =< s(995)+s(994)+s(993)
s(987) =< s(998)+s(997)+s(996)
s(988) =< s(998)+s(997)+s(996)
s(985) =< s(998)+s(997)+s(996)
s(985) =< s(995)+s(994)+s(993)
s(984) =< s(992)+s(991)+s(990)
s(985) =< s(992)+s(991)+s(990)
s(988) =< s(985)*aux(201)
s(989) =< s(984)*aux(201)
s(987) =< s(984)*s(858)

#### Simplifying cost structure of chain [[195,196],198] 
 * Joined equivalent variables [aux(211),aux(209),aux(210)] into aux(211)

#### Simplifying cost structure of CE 250 

#### Simplifying cost structure of CE 252 
 * Renamed intermediate variables: 
[ (eq(254,1),aux(144))>>s(1041), (eq(254,1),aux(135))>>s(1042), (eq(254,1),aux(145))>>s(1043), (eq(254,1),aux(136))>>s(1044), (eq(254,1),aux(146))>>s(1045), (eq(254,1),aux(123))>>s(1046), (eq(254,1),aux(134))>>s(1047), (eq(254,1),aux(126))>>s(1048), (eq(254,1),aux(151))>>s(1049), (eq(254,1),it(165))>>s(1050), (eq(254,1),it(166))>>s(1051), (eq(254,1),it(168))>>s(1052), (eq(254,1),aux(137))>>s(1053), (eq(254,1),aux(140))>>s(1054), (eq(254,1),aux(139))>>s(1055), (eq(254,1),aux(138))>>s(1056), (eq(254,1),aux(127))>>s(1057), (eq(254,1),aux(128))>>s(1058), (eq(254,1),aux(131))>>s(1059), (eq(254,1),s(768))>>s(1060), (eq(254,1),aux(125))>>s(1061), (eq(254,1),aux(129))>>s(1062), (eq(254,1),aux(132))>>s(1063), (eq(254,1),aux(124))>>s(1064), (eq(254,1),s(769))>>s(1065), (eq(254,1),s(771))>>s(1066), (eq(254,1),s(770))>>s(1067)]

#### Simplifying cost structure of CE 254 
 * Joined equivalent variables [aux(212),s(1042),s(1043)] into aux(212)
 * Joined equivalent variables [aux(213),s(1044),s(1045)] into aux(213)
 * Joined equivalent variables [aux(214),s(1046),s(1048)] into aux(214)

#### Simplifying cost structure of chain [197,198] 

#### Found solution for phase  [195,196] in the cache 

#### Cost of phase [195,196]:mat_mult_jan(A,B,C,D,E,F,G,H,I) -> [mat_mult_jan(A',B',C',D',E',F',G',H',I')] 
22*it(195)+22*s(983)+11*s(984)+11*s(985)+10*s(986)+9*s(987)+9*s(988)+10*s(989)+22*s(1005)+11*s(1006)+11*s(1007)+10*s(1008)+9*s(1009)+9*s(1010)+10*s(1011)+22*s(1012)+11*s(1013)+11*s(1014)+10*s(1015)+9*s(1016)+9*s(1017)+10*s(1018)+0
  Such that:aux(195) =< B
s(859) =< B+E
s(860) =< B+3*E
aux(198) =< D
s(862) =< D+E
s(863) =< D+3*E
s(864) =< E
aux(209) =< A
aux(210) =< A-A'
it(195) =< aux(209)
it(195) =< aux(210)
aux(201) =< s(864)
aux(200) =< s(863)
aux(199) =< s(862)
aux(205) =< aux(198)
aux(197) =< s(860)
aux(196) =< s(859)
aux(202) =< aux(195)
s(858) =< s(864)+1
s(999) =< it(195)*aux(198)
s(1000) =< it(195)*aux(195)
s(990) =< it(195)*aux(201)
s(1001) =< it(195)*aux(200)
s(1002) =< it(195)*aux(199)
s(1028) =< it(195)*aux(205)
s(1003) =< it(195)*aux(197)
s(1004) =< it(195)*aux(196)
s(1040) =< it(195)*aux(202)
s(1029) =< s(1040)
s(1005) =< s(1040)
s(1006) =< s(1040)
s(1007) =< s(1040)
s(1005) =< s(1028)
s(1006) =< s(1028)
s(1007) =< s(1028)
s(951) =< aux(201)
s(952) =< aux(201)-1
s(953) =< aux(197)+1
s(954) =< aux(196)+1
s(955) =< aux(201)-2
s(1036) =< s(1005)*aux(197)
s(1038) =< s(1005)*aux(196)
s(1008) =< s(1005)*aux(201)
s(1035) =< s(1005)*s(952)
s(1037) =< s(1005)*s(953)
s(1039) =< s(1005)*s(954)
s(1034) =< s(1005)*s(955)
s(1009) =< s(1037)+s(1036)+s(1003)
s(1010) =< s(1037)+s(1036)+s(1003)
s(1009) =< s(1039)+s(1038)+s(1004)
s(1010) =< s(1039)+s(1038)+s(1004)
s(1007) =< s(1039)+s(1038)+s(1004)
s(1007) =< s(1037)+s(1036)+s(1003)
s(1006) =< s(1035)+s(1034)+s(990)
s(1007) =< s(1035)+s(1034)+s(990)
s(1010) =< s(1007)*s(951)
s(1011) =< s(1006)*s(951)
s(1009) =< s(1006)*s(858)
s(996) =< s(1004)
s(966) =< aux(196)
s(993) =< s(1003)
s(967) =< aux(197)
s(1029) =< s(1028)
s(996) =< s(1002)
s(966) =< aux(199)
s(993) =< s(1001)
s(967) =< aux(200)
s(1012) =< s(1029)
s(1013) =< s(1029)
s(1014) =< s(1029)
s(1012) =< s(1028)
s(1013) =< s(1028)
s(1014) =< s(1028)
s(971) =< s(967)+1
s(972) =< s(966)+1
s(1023) =< s(1012)*s(967)
s(1026) =< s(1012)*s(966)
s(1015) =< s(1012)*aux(201)
s(1021) =< s(1012)*s(952)
s(1024) =< s(1012)*s(971)
s(1027) =< s(1012)*s(972)
s(1020) =< s(1012)*s(955)
s(1016) =< s(1024)+s(1023)+s(993)
s(1017) =< s(1024)+s(1023)+s(993)
s(1016) =< s(1027)+s(1026)+s(996)
s(1017) =< s(1027)+s(1026)+s(996)
s(1014) =< s(1027)+s(1026)+s(996)
s(1014) =< s(1024)+s(1023)+s(993)
s(1013) =< s(1021)+s(1020)+s(990)
s(1014) =< s(1021)+s(1020)+s(990)
s(1017) =< s(1014)*s(951)
s(1018) =< s(1013)*s(951)
s(1016) =< s(1013)*s(858)
s(865) =< s(859)
s(866) =< s(860)
s(1000) =< s(999)
s(865) =< s(862)
s(866) =< s(863)
s(983) =< s(1000)
s(984) =< s(1000)
s(985) =< s(1000)
s(983) =< s(999)
s(984) =< s(999)
s(985) =< s(999)
s(871) =< s(864)-1
s(872) =< s(866)+1
s(873) =< s(865)+1
s(874) =< s(864)-2
s(994) =< s(983)*s(866)
s(997) =< s(983)*s(865)
s(986) =< s(983)*s(864)
s(992) =< s(983)*s(871)
s(995) =< s(983)*s(872)
s(998) =< s(983)*s(873)
s(991) =< s(983)*s(874)
s(987) =< s(995)+s(994)+s(993)
s(988) =< s(995)+s(994)+s(993)
s(987) =< s(998)+s(997)+s(996)
s(988) =< s(998)+s(997)+s(996)
s(985) =< s(998)+s(997)+s(996)
s(985) =< s(995)+s(994)+s(993)
s(984) =< s(992)+s(991)+s(990)
s(985) =< s(992)+s(991)+s(990)
s(988) =< s(985)*aux(201)
s(989) =< s(984)*aux(201)
s(987) =< s(984)*s(858)

#### Simplifying cost structure of chain [[195,196],197,198] 
 * Joined equivalent variables [aux(215),aux(209),aux(210)] into aux(215)
 * Joined equivalent variables [aux(216),aux(195),s(1041)] into aux(216)
 * Joined equivalent variables [aux(217),aux(212),s(859)] into aux(217)
 * Joined equivalent variables [aux(218),aux(213),s(860)] into aux(218)
 * Joined equivalent variables [aux(219),aux(198),s(1049)] into aux(219)
 * Joined equivalent variables [aux(220),aux(214),s(864)] into aux(220)
 * Joined equivalent variables [aux(201),s(1053)] into aux(201)
 * Joined equivalent variables [s(871),s(1054)] into s(871)
 * Joined equivalent variables [s(874),s(1057)] into s(874)

#### Cost of chains of mat_mult_jan(A,B,C,D,E,F,G,H,I):
* Chain [[195,196],198]: 22*it(195)+22*s(983)+11*s(984)+11*s(985)+10*s(986)+9*s(987)+9*s(988)+10*s(989)+22*s(1005)+11*s(1006)+11*s(1007)+10*s(1008)+9*s(1009)+9*s(1010)+10*s(1011)+22*s(1012)+11*s(1013)+11*s(1014)+10*s(1015)+9*s(1016)+9*s(1017)+10*s(1018)+3
  Such that:aux(195) =< B
s(859) =< B+E
s(860) =< B+3*E
aux(198) =< D
s(862) =< D+E
s(863) =< D+3*E
s(864) =< E
aux(211) =< A
it(195) =< aux(211)
aux(201) =< s(864)
aux(200) =< s(863)
aux(199) =< s(862)
aux(205) =< aux(198)
aux(197) =< s(860)
aux(196) =< s(859)
aux(202) =< aux(195)
s(858) =< s(864)+1
s(999) =< it(195)*aux(198)
s(1000) =< it(195)*aux(195)
s(990) =< it(195)*aux(201)
s(1001) =< it(195)*aux(200)
s(1002) =< it(195)*aux(199)
s(1028) =< it(195)*aux(205)
s(1003) =< it(195)*aux(197)
s(1004) =< it(195)*aux(196)
s(1040) =< it(195)*aux(202)
s(1029) =< s(1040)
s(1005) =< s(1040)
s(1006) =< s(1040)
s(1007) =< s(1040)
s(1005) =< s(1028)
s(1006) =< s(1028)
s(1007) =< s(1028)
s(951) =< aux(201)
s(952) =< aux(201)-1
s(953) =< aux(197)+1
s(954) =< aux(196)+1
s(955) =< aux(201)-2
s(1036) =< s(1005)*aux(197)
s(1038) =< s(1005)*aux(196)
s(1008) =< s(1005)*aux(201)
s(1035) =< s(1005)*s(952)
s(1037) =< s(1005)*s(953)
s(1039) =< s(1005)*s(954)
s(1034) =< s(1005)*s(955)
s(1009) =< s(1037)+s(1036)+s(1003)
s(1010) =< s(1037)+s(1036)+s(1003)
s(1009) =< s(1039)+s(1038)+s(1004)
s(1010) =< s(1039)+s(1038)+s(1004)
s(1007) =< s(1039)+s(1038)+s(1004)
s(1007) =< s(1037)+s(1036)+s(1003)
s(1006) =< s(1035)+s(1034)+s(990)
s(1007) =< s(1035)+s(1034)+s(990)
s(1010) =< s(1007)*s(951)
s(1011) =< s(1006)*s(951)
s(1009) =< s(1006)*s(858)
s(996) =< s(1004)
s(966) =< aux(196)
s(993) =< s(1003)
s(967) =< aux(197)
s(1029) =< s(1028)
s(996) =< s(1002)
s(966) =< aux(199)
s(993) =< s(1001)
s(967) =< aux(200)
s(1012) =< s(1029)
s(1013) =< s(1029)
s(1014) =< s(1029)
s(1012) =< s(1028)
s(1013) =< s(1028)
s(1014) =< s(1028)
s(971) =< s(967)+1
s(972) =< s(966)+1
s(1023) =< s(1012)*s(967)
s(1026) =< s(1012)*s(966)
s(1015) =< s(1012)*aux(201)
s(1021) =< s(1012)*s(952)
s(1024) =< s(1012)*s(971)
s(1027) =< s(1012)*s(972)
s(1020) =< s(1012)*s(955)
s(1016) =< s(1024)+s(1023)+s(993)
s(1017) =< s(1024)+s(1023)+s(993)
s(1016) =< s(1027)+s(1026)+s(996)
s(1017) =< s(1027)+s(1026)+s(996)
s(1014) =< s(1027)+s(1026)+s(996)
s(1014) =< s(1024)+s(1023)+s(993)
s(1013) =< s(1021)+s(1020)+s(990)
s(1014) =< s(1021)+s(1020)+s(990)
s(1017) =< s(1014)*s(951)
s(1018) =< s(1013)*s(951)
s(1016) =< s(1013)*s(858)
s(865) =< s(859)
s(866) =< s(860)
s(1000) =< s(999)
s(865) =< s(862)
s(866) =< s(863)
s(983) =< s(1000)
s(984) =< s(1000)
s(985) =< s(1000)
s(983) =< s(999)
s(984) =< s(999)
s(985) =< s(999)
s(871) =< s(864)-1
s(872) =< s(866)+1
s(873) =< s(865)+1
s(874) =< s(864)-2
s(994) =< s(983)*s(866)
s(997) =< s(983)*s(865)
s(986) =< s(983)*s(864)
s(992) =< s(983)*s(871)
s(995) =< s(983)*s(872)
s(998) =< s(983)*s(873)
s(991) =< s(983)*s(874)
s(987) =< s(995)+s(994)+s(993)
s(988) =< s(995)+s(994)+s(993)
s(987) =< s(998)+s(997)+s(996)
s(988) =< s(998)+s(997)+s(996)
s(985) =< s(998)+s(997)+s(996)
s(985) =< s(995)+s(994)+s(993)
s(984) =< s(992)+s(991)+s(990)
s(985) =< s(992)+s(991)+s(990)
s(988) =< s(985)*aux(201)
s(989) =< s(984)*aux(201)
s(987) =< s(984)*s(858)

  with precondition: [A=G,A>=2,B>=2,C>=0,D>=2,F>=0,H>=1,I>=0,E>=H] 

* Chain [[195,196],197,198]: 22*it(195)+22*s(983)+11*s(984)+11*s(985)+10*s(986)+9*s(987)+9*s(988)+10*s(989)+22*s(1005)+11*s(1006)+11*s(1007)+10*s(1008)+9*s(1009)+9*s(1010)+10*s(1011)+22*s(1012)+11*s(1013)+11*s(1014)+10*s(1015)+9*s(1016)+9*s(1017)+10*s(1018)+22*s(1050)+11*s(1051)+11*s(1052)+10*s(1060)+9*s(1065)+9*s(1066)+10*s(1067)+16
  Such that:s(862) =< D+E
s(863) =< D+3*E
s(1047) =< E+1
aux(215) =< A
aux(216) =< B
aux(217) =< B+E
aux(218) =< B+3*E
aux(219) =< D
aux(220) =< E
s(1050) =< aux(216)
s(1051) =< aux(216)
s(1052) =< aux(216)
s(1050) =< aux(219)
s(1051) =< aux(219)
s(1052) =< aux(219)
aux(201) =< aux(220)
s(871) =< aux(220)-1
s(1055) =< aux(218)+1
s(1056) =< aux(217)+1
s(874) =< aux(220)-2
s(1058) =< s(1050)*aux(218)
s(1059) =< s(1050)*aux(217)
s(1060) =< s(1050)*aux(220)
s(1061) =< s(1050)*s(871)
s(1062) =< s(1050)*s(1055)
s(1063) =< s(1050)*s(1056)
s(1064) =< s(1050)*s(874)
s(1065) =< s(1062)+s(1058)+aux(218)
s(1066) =< s(1062)+s(1058)+aux(218)
s(1065) =< s(1063)+s(1059)+aux(217)
s(1066) =< s(1063)+s(1059)+aux(217)
s(1052) =< s(1063)+s(1059)+aux(217)
s(1052) =< s(1062)+s(1058)+aux(218)
s(1051) =< s(1061)+s(1064)+aux(220)
s(1052) =< s(1061)+s(1064)+aux(220)
s(1066) =< s(1052)*aux(201)
s(1067) =< s(1051)*aux(201)
s(1065) =< s(1051)*s(1047)
it(195) =< aux(215)
aux(200) =< s(863)
aux(199) =< s(862)
aux(205) =< aux(219)
aux(197) =< aux(218)
aux(196) =< aux(217)
aux(202) =< aux(216)
s(858) =< aux(220)+1
s(999) =< it(195)*aux(219)
s(1000) =< it(195)*aux(216)
s(990) =< it(195)*aux(201)
s(1001) =< it(195)*aux(200)
s(1002) =< it(195)*aux(199)
s(1028) =< it(195)*aux(205)
s(1003) =< it(195)*aux(197)
s(1004) =< it(195)*aux(196)
s(1040) =< it(195)*aux(202)
s(1029) =< s(1040)
s(1005) =< s(1040)
s(1006) =< s(1040)
s(1007) =< s(1040)
s(1005) =< s(1028)
s(1006) =< s(1028)
s(1007) =< s(1028)
s(951) =< aux(201)
s(952) =< aux(201)-1
s(953) =< aux(197)+1
s(954) =< aux(196)+1
s(955) =< aux(201)-2
s(1036) =< s(1005)*aux(197)
s(1038) =< s(1005)*aux(196)
s(1008) =< s(1005)*aux(201)
s(1035) =< s(1005)*s(952)
s(1037) =< s(1005)*s(953)
s(1039) =< s(1005)*s(954)
s(1034) =< s(1005)*s(955)
s(1009) =< s(1037)+s(1036)+s(1003)
s(1010) =< s(1037)+s(1036)+s(1003)
s(1009) =< s(1039)+s(1038)+s(1004)
s(1010) =< s(1039)+s(1038)+s(1004)
s(1007) =< s(1039)+s(1038)+s(1004)
s(1007) =< s(1037)+s(1036)+s(1003)
s(1006) =< s(1035)+s(1034)+s(990)
s(1007) =< s(1035)+s(1034)+s(990)
s(1010) =< s(1007)*s(951)
s(1011) =< s(1006)*s(951)
s(1009) =< s(1006)*s(858)
s(996) =< s(1004)
s(966) =< aux(196)
s(993) =< s(1003)
s(967) =< aux(197)
s(1029) =< s(1028)
s(996) =< s(1002)
s(966) =< aux(199)
s(993) =< s(1001)
s(967) =< aux(200)
s(1012) =< s(1029)
s(1013) =< s(1029)
s(1014) =< s(1029)
s(1012) =< s(1028)
s(1013) =< s(1028)
s(1014) =< s(1028)
s(971) =< s(967)+1
s(972) =< s(966)+1
s(1023) =< s(1012)*s(967)
s(1026) =< s(1012)*s(966)
s(1015) =< s(1012)*aux(201)
s(1021) =< s(1012)*s(952)
s(1024) =< s(1012)*s(971)
s(1027) =< s(1012)*s(972)
s(1020) =< s(1012)*s(955)
s(1016) =< s(1024)+s(1023)+s(993)
s(1017) =< s(1024)+s(1023)+s(993)
s(1016) =< s(1027)+s(1026)+s(996)
s(1017) =< s(1027)+s(1026)+s(996)
s(1014) =< s(1027)+s(1026)+s(996)
s(1014) =< s(1024)+s(1023)+s(993)
s(1013) =< s(1021)+s(1020)+s(990)
s(1014) =< s(1021)+s(1020)+s(990)
s(1017) =< s(1014)*s(951)
s(1018) =< s(1013)*s(951)
s(1016) =< s(1013)*s(858)
s(865) =< aux(217)
s(866) =< aux(218)
s(1000) =< s(999)
s(865) =< s(862)
s(866) =< s(863)
s(983) =< s(1000)
s(984) =< s(1000)
s(985) =< s(1000)
s(983) =< s(999)
s(984) =< s(999)
s(985) =< s(999)
s(872) =< s(866)+1
s(873) =< s(865)+1
s(994) =< s(983)*s(866)
s(997) =< s(983)*s(865)
s(986) =< s(983)*aux(220)
s(992) =< s(983)*s(871)
s(995) =< s(983)*s(872)
s(998) =< s(983)*s(873)
s(991) =< s(983)*s(874)
s(987) =< s(995)+s(994)+s(993)
s(988) =< s(995)+s(994)+s(993)
s(987) =< s(998)+s(997)+s(996)
s(988) =< s(998)+s(997)+s(996)
s(985) =< s(998)+s(997)+s(996)
s(985) =< s(995)+s(994)+s(993)
s(984) =< s(992)+s(991)+s(990)
s(985) =< s(992)+s(991)+s(990)
s(988) =< s(985)*aux(201)
s(989) =< s(984)*aux(201)
s(987) =< s(984)*s(858)

  with precondition: [A=G,A>=3,B>=1,C>=0,D>=0,F>=0,H>=1,I>=0,E+1>=H] 

* Chain [198]: 3
  with precondition: [A=1,B=0,G=1,H=0,C>=0,D>=0,E>=0,F>=0,I>=0] 

* Chain [197,198]: 22*s(1050)+11*s(1051)+11*s(1052)+10*s(1060)+9*s(1065)+9*s(1066)+10*s(1067)+16
  Such that:s(1041) =< B
aux(212) =< B+E
aux(213) =< B+3*E
s(1049) =< D
aux(214) =< E
s(1047) =< E+1
s(1050) =< s(1041)
s(1051) =< s(1041)
s(1052) =< s(1041)
s(1050) =< s(1049)
s(1051) =< s(1049)
s(1052) =< s(1049)
s(1053) =< aux(214)
s(1054) =< aux(214)-1
s(1055) =< aux(213)+1
s(1056) =< aux(212)+1
s(1057) =< aux(214)-2
s(1058) =< s(1050)*aux(213)
s(1059) =< s(1050)*aux(212)
s(1060) =< s(1050)*aux(214)
s(1061) =< s(1050)*s(1054)
s(1062) =< s(1050)*s(1055)
s(1063) =< s(1050)*s(1056)
s(1064) =< s(1050)*s(1057)
s(1065) =< s(1062)+s(1058)+aux(213)
s(1066) =< s(1062)+s(1058)+aux(213)
s(1065) =< s(1063)+s(1059)+aux(212)
s(1066) =< s(1063)+s(1059)+aux(212)
s(1052) =< s(1063)+s(1059)+aux(212)
s(1052) =< s(1062)+s(1058)+aux(213)
s(1051) =< s(1061)+s(1064)+aux(214)
s(1052) =< s(1061)+s(1064)+aux(214)
s(1066) =< s(1052)*s(1053)
s(1067) =< s(1051)*s(1053)
s(1065) =< s(1051)*s(1047)

  with precondition: [A=2,G=2,H=1,B>=1,C>=0,D>=0,E>=0,F>=0,I>=0] 


#### Simplifying cost structure of CE 258 
 * Renamed intermediate variables: 
[ (eq(260,1),s(1041))>>s(1068), (eq(260,1),aux(212))>>s(1069), (eq(260,1),aux(213))>>s(1070), (eq(260,1),s(1049))>>s(1071), (eq(260,1),aux(214))>>s(1072), (eq(260,1),s(1047))>>s(1073), (eq(260,1),s(1050))>>s(1074), (eq(260,1),s(1051))>>s(1075), (eq(260,1),s(1052))>>s(1076), (eq(260,1),s(1053))>>s(1077), (eq(260,1),s(1054))>>s(1078), (eq(260,1),s(1055))>>s(1079), (eq(260,1),s(1056))>>s(1080), (eq(260,1),s(1057))>>s(1081), (eq(260,1),s(1058))>>s(1082), (eq(260,1),s(1059))>>s(1083), (eq(260,1),s(1060))>>s(1084), (eq(260,1),s(1061))>>s(1085), (eq(260,1),s(1062))>>s(1086), (eq(260,1),s(1063))>>s(1087), (eq(260,1),s(1064))>>s(1088), (eq(260,1),s(1065))>>s(1089), (eq(260,1),s(1066))>>s(1090), (eq(260,1),s(1067))>>s(1091)]
 * Renamed intermediate variables: 
[ (eq(260,2),s(781))>>s(1092)]

#### Simplifying cost structure of CE 260 
 * Renamed intermediate variables: 
[ (eq(259,1),s(1041))>>s(1093), (eq(259,1),aux(212))>>s(1094), (eq(259,1),aux(213))>>s(1095), (eq(259,1),s(1049))>>s(1096), (eq(259,1),aux(214))>>s(1097), (eq(259,1),s(1047))>>s(1098), (eq(259,1),s(1050))>>s(1099), (eq(259,1),s(1051))>>s(1100), (eq(259,1),s(1052))>>s(1101), (eq(259,1),s(1053))>>s(1102), (eq(259,1),s(1054))>>s(1103), (eq(259,1),s(1055))>>s(1104), (eq(259,1),s(1056))>>s(1105), (eq(259,1),s(1057))>>s(1106), (eq(259,1),s(1058))>>s(1107), (eq(259,1),s(1059))>>s(1108), (eq(259,1),s(1060))>>s(1109), (eq(259,1),s(1061))>>s(1110), (eq(259,1),s(1062))>>s(1111), (eq(259,1),s(1063))>>s(1112), (eq(259,1),s(1064))>>s(1113), (eq(259,1),s(1065))>>s(1114), (eq(259,1),s(1066))>>s(1115), (eq(259,1),s(1067))>>s(1116)]
 * Renamed intermediate variables: 
[ (eq(259,2),s(772))>>s(1117), (eq(259,2),s(773))>>s(1118)]

#### Simplifying cost structure of CE 259 
 * Renamed intermediate variables: 
[ (eq(261,1),aux(195))>>s(1119), (eq(261,1),s(859))>>s(1120), (eq(261,1),s(860))>>s(1121), (eq(261,1),aux(198))>>s(1122), (eq(261,1),s(862))>>s(1123), (eq(261,1),s(863))>>s(1124), (eq(261,1),s(864))>>s(1125), (eq(261,1),aux(211))>>s(1126), (eq(261,1),it(195))>>s(1127), (eq(261,1),aux(201))>>s(1128), (eq(261,1),aux(200))>>s(1129), (eq(261,1),aux(199))>>s(1130), (eq(261,1),aux(205))>>s(1131), (eq(261,1),aux(197))>>s(1132), (eq(261,1),aux(196))>>s(1133), (eq(261,1),aux(202))>>s(1134), (eq(261,1),s(858))>>s(1135), (eq(261,1),s(999))>>s(1136), (eq(261,1),s(1000))>>s(1137), (eq(261,1),s(990))>>s(1138), (eq(261,1),s(1001))>>s(1139), (eq(261,1),s(1002))>>s(1140), (eq(261,1),s(1028))>>s(1141), (eq(261,1),s(1003))>>s(1142), (eq(261,1),s(1004))>>s(1143), (eq(261,1),s(1040))>>s(1144), (eq(261,1),s(1029))>>s(1145), (eq(261,1),s(1005))>>s(1146), (eq(261,1),s(1006))>>s(1147), (eq(261,1),s(1007))>>s(1148), (eq(261,1),s(951))>>s(1149), (eq(261,1),s(952))>>s(1150), (eq(261,1),s(953))>>s(1151), (eq(261,1),s(954))>>s(1152), (eq(261,1),s(955))>>s(1153), (eq(261,1),s(1036))>>s(1154), (eq(261,1),s(1038))>>s(1155), (eq(261,1),s(1008))>>s(1156), (eq(261,1),s(1035))>>s(1157), (eq(261,1),s(1037))>>s(1158), (eq(261,1),s(1039))>>s(1159), (eq(261,1),s(1034))>>s(1160), (eq(261,1),s(1009))>>s(1161), (eq(261,1),s(1010))>>s(1162), (eq(261,1),s(1011))>>s(1163), (eq(261,1),s(996))>>s(1164), (eq(261,1),s(966))>>s(1165), (eq(261,1),s(993))>>s(1166), (eq(261,1),s(967))>>s(1167), (eq(261,1),s(1012))>>s(1168), (eq(261,1),s(1013))>>s(1169), (eq(261,1),s(1014))>>s(1170), (eq(261,1),s(971))>>s(1171), (eq(261,1),s(972))>>s(1172), (eq(261,1),s(1023))>>s(1173), (eq(261,1),s(1026))>>s(1174), (eq(261,1),s(1015))>>s(1175), (eq(261,1),s(1021))>>s(1176), (eq(261,1),s(1024))>>s(1177), (eq(261,1),s(1027))>>s(1178), (eq(261,1),s(1020))>>s(1179), (eq(261,1),s(1016))>>s(1180), (eq(261,1),s(1017))>>s(1181), (eq(261,1),s(1018))>>s(1182), (eq(261,1),s(865))>>s(1183), (eq(261,1),s(866))>>s(1184), (eq(261,1),s(983))>>s(1185), (eq(261,1),s(984))>>s(1186), (eq(261,1),s(985))>>s(1187), (eq(261,1),s(871))>>s(1188), (eq(261,1),s(872))>>s(1189), (eq(261,1),s(873))>>s(1190), (eq(261,1),s(874))>>s(1191), (eq(261,1),s(994))>>s(1192), (eq(261,1),s(997))>>s(1193), (eq(261,1),s(986))>>s(1194), (eq(261,1),s(992))>>s(1195), (eq(261,1),s(995))>>s(1196), (eq(261,1),s(998))>>s(1197), (eq(261,1),s(991))>>s(1198), (eq(261,1),s(987))>>s(1199), (eq(261,1),s(988))>>s(1200), (eq(261,1),s(989))>>s(1201)]
 * Renamed intermediate variables: 
[ (eq(261,2),s(772))>>s(1202), (eq(261,2),s(773))>>s(1203)]

#### Simplifying cost structure of CE 261 
 * Joined equivalent variables [aux(221),s(1126),s(1202)] into aux(221)
 * Joined equivalent variables [s(1127),s(1203)] into s(1127)
 * Renamed intermediate variables: 
[ (eq(265,1),s(862))>>s(1204), (eq(265,1),s(863))>>s(1205), (eq(265,1),s(1047))>>s(1206), (eq(265,1),aux(215))>>s(1207), (eq(265,1),aux(216))>>s(1208), (eq(265,1),aux(217))>>s(1209), (eq(265,1),aux(218))>>s(1210), (eq(265,1),aux(219))>>s(1211), (eq(265,1),aux(220))>>s(1212), (eq(265,1),s(1050))>>s(1213), (eq(265,1),s(1051))>>s(1214), (eq(265,1),s(1052))>>s(1215), (eq(265,1),aux(201))>>s(1216), (eq(265,1),s(871))>>s(1217), (eq(265,1),s(1055))>>s(1218), (eq(265,1),s(1056))>>s(1219), (eq(265,1),s(874))>>s(1220), (eq(265,1),s(1058))>>s(1221), (eq(265,1),s(1059))>>s(1222), (eq(265,1),s(1060))>>s(1223), (eq(265,1),s(1061))>>s(1224), (eq(265,1),s(1062))>>s(1225), (eq(265,1),s(1063))>>s(1226), (eq(265,1),s(1064))>>s(1227), (eq(265,1),s(1065))>>s(1228), (eq(265,1),s(1066))>>s(1229), (eq(265,1),s(1067))>>s(1230), (eq(265,1),it(195))>>s(1231), (eq(265,1),aux(200))>>s(1232), (eq(265,1),aux(199))>>s(1233), (eq(265,1),aux(205))>>s(1234), (eq(265,1),aux(197))>>s(1235), (eq(265,1),aux(196))>>s(1236), (eq(265,1),aux(202))>>s(1237), (eq(265,1),s(858))>>s(1238), (eq(265,1),s(999))>>s(1239), (eq(265,1),s(1000))>>s(1240), (eq(265,1),s(990))>>s(1241), (eq(265,1),s(1001))>>s(1242), (eq(265,1),s(1002))>>s(1243), (eq(265,1),s(1028))>>s(1244), (eq(265,1),s(1003))>>s(1245), (eq(265,1),s(1004))>>s(1246), (eq(265,1),s(1040))>>s(1247), (eq(265,1),s(1029))>>s(1248), (eq(265,1),s(1005))>>s(1249), (eq(265,1),s(1006))>>s(1250), (eq(265,1),s(1007))>>s(1251), (eq(265,1),s(951))>>s(1252), (eq(265,1),s(952))>>s(1253), (eq(265,1),s(953))>>s(1254), (eq(265,1),s(954))>>s(1255), (eq(265,1),s(955))>>s(1256), (eq(265,1),s(1036))>>s(1257), (eq(265,1),s(1038))>>s(1258), (eq(265,1),s(1008))>>s(1259), (eq(265,1),s(1035))>>s(1260), (eq(265,1),s(1037))>>s(1261), (eq(265,1),s(1039))>>s(1262), (eq(265,1),s(1034))>>s(1263), (eq(265,1),s(1009))>>s(1264), (eq(265,1),s(1010))>>s(1265), (eq(265,1),s(1011))>>s(1266), (eq(265,1),s(996))>>s(1267), (eq(265,1),s(966))>>s(1268), (eq(265,1),s(993))>>s(1269), (eq(265,1),s(967))>>s(1270), (eq(265,1),s(1012))>>s(1271), (eq(265,1),s(1013))>>s(1272), (eq(265,1),s(1014))>>s(1273), (eq(265,1),s(971))>>s(1274), (eq(265,1),s(972))>>s(1275), (eq(265,1),s(1023))>>s(1276), (eq(265,1),s(1026))>>s(1277), (eq(265,1),s(1015))>>s(1278), (eq(265,1),s(1021))>>s(1279), (eq(265,1),s(1024))>>s(1280), (eq(265,1),s(1027))>>s(1281), (eq(265,1),s(1020))>>s(1282), (eq(265,1),s(1016))>>s(1283), (eq(265,1),s(1017))>>s(1284), (eq(265,1),s(1018))>>s(1285), (eq(265,1),s(865))>>s(1286), (eq(265,1),s(866))>>s(1287), (eq(265,1),s(983))>>s(1288), (eq(265,1),s(984))>>s(1289), (eq(265,1),s(985))>>s(1290), (eq(265,1),s(872))>>s(1291), (eq(265,1),s(873))>>s(1292), (eq(265,1),s(994))>>s(1293), (eq(265,1),s(997))>>s(1294), (eq(265,1),s(986))>>s(1295), (eq(265,1),s(992))>>s(1296), (eq(265,1),s(995))>>s(1297), (eq(265,1),s(998))>>s(1298), (eq(265,1),s(991))>>s(1299), (eq(265,1),s(987))>>s(1300), (eq(265,1),s(988))>>s(1301), (eq(265,1),s(989))>>s(1302)]
 * Renamed intermediate variables: 
[ (eq(265,2),s(772))>>s(1303), (eq(265,2),s(773))>>s(1304)]

#### Simplifying cost structure of CE 265 
 * Joined equivalent variables [aux(222),s(1207),s(1303)] into aux(222)
 * Joined equivalent variables [s(1231),s(1304)] into s(1231)
 * Renamed intermediate variables: 
[ (eq(262,1),aux(195))>>s(1305), (eq(262,1),s(859))>>s(1306), (eq(262,1),s(860))>>s(1307), (eq(262,1),aux(198))>>s(1308), (eq(262,1),s(862))>>s(1309), (eq(262,1),s(863))>>s(1310), (eq(262,1),s(864))>>s(1311), (eq(262,1),aux(211))>>s(1312), (eq(262,1),it(195))>>s(1313), (eq(262,1),aux(201))>>s(1314), (eq(262,1),aux(200))>>s(1315), (eq(262,1),aux(199))>>s(1316), (eq(262,1),aux(205))>>s(1317), (eq(262,1),aux(197))>>s(1318), (eq(262,1),aux(196))>>s(1319), (eq(262,1),aux(202))>>s(1320), (eq(262,1),s(858))>>s(1321), (eq(262,1),s(999))>>s(1322), (eq(262,1),s(1000))>>s(1323), (eq(262,1),s(990))>>s(1324), (eq(262,1),s(1001))>>s(1325), (eq(262,1),s(1002))>>s(1326), (eq(262,1),s(1028))>>s(1327), (eq(262,1),s(1003))>>s(1328), (eq(262,1),s(1004))>>s(1329), (eq(262,1),s(1040))>>s(1330), (eq(262,1),s(1029))>>s(1331), (eq(262,1),s(1005))>>s(1332), (eq(262,1),s(1006))>>s(1333), (eq(262,1),s(1007))>>s(1334), (eq(262,1),s(951))>>s(1335), (eq(262,1),s(952))>>s(1336), (eq(262,1),s(953))>>s(1337), (eq(262,1),s(954))>>s(1338), (eq(262,1),s(955))>>s(1339), (eq(262,1),s(1036))>>s(1340), (eq(262,1),s(1038))>>s(1341), (eq(262,1),s(1008))>>s(1342), (eq(262,1),s(1035))>>s(1343), (eq(262,1),s(1037))>>s(1344), (eq(262,1),s(1039))>>s(1345), (eq(262,1),s(1034))>>s(1346), (eq(262,1),s(1009))>>s(1347), (eq(262,1),s(1010))>>s(1348), (eq(262,1),s(1011))>>s(1349), (eq(262,1),s(996))>>s(1350), (eq(262,1),s(966))>>s(1351), (eq(262,1),s(993))>>s(1352), (eq(262,1),s(967))>>s(1353), (eq(262,1),s(1012))>>s(1354), (eq(262,1),s(1013))>>s(1355), (eq(262,1),s(1014))>>s(1356), (eq(262,1),s(971))>>s(1357), (eq(262,1),s(972))>>s(1358), (eq(262,1),s(1023))>>s(1359), (eq(262,1),s(1026))>>s(1360), (eq(262,1),s(1015))>>s(1361), (eq(262,1),s(1021))>>s(1362), (eq(262,1),s(1024))>>s(1363), (eq(262,1),s(1027))>>s(1364), (eq(262,1),s(1020))>>s(1365), (eq(262,1),s(1016))>>s(1366), (eq(262,1),s(1017))>>s(1367), (eq(262,1),s(1018))>>s(1368), (eq(262,1),s(865))>>s(1369), (eq(262,1),s(866))>>s(1370), (eq(262,1),s(983))>>s(1371), (eq(262,1),s(984))>>s(1372), (eq(262,1),s(985))>>s(1373), (eq(262,1),s(871))>>s(1374), (eq(262,1),s(872))>>s(1375), (eq(262,1),s(873))>>s(1376), (eq(262,1),s(874))>>s(1377), (eq(262,1),s(994))>>s(1378), (eq(262,1),s(997))>>s(1379), (eq(262,1),s(986))>>s(1380), (eq(262,1),s(992))>>s(1381), (eq(262,1),s(995))>>s(1382), (eq(262,1),s(998))>>s(1383), (eq(262,1),s(991))>>s(1384), (eq(262,1),s(987))>>s(1385), (eq(262,1),s(988))>>s(1386), (eq(262,1),s(989))>>s(1387)]
 * Renamed intermediate variables: 
[ (eq(262,2),s(774))>>s(1388), (eq(262,2),s(775))>>s(1389), (eq(262,2),s(776))>>s(1390), (eq(262,2),s(777))>>s(1391), (eq(262,2),s(778))>>s(1392), (eq(262,2),s(779))>>s(1393), (eq(262,2),s(780))>>s(1394)]

#### Simplifying cost structure of CE 262 
 * Joined equivalent variables [aux(223),s(1311),s(1391)] into aux(223)
 * Joined equivalent variables [aux(224),s(1312),s(1389)] into aux(224)
 * Joined equivalent variables [s(1313),s(1388),s(1392)] into s(1313)
 * Renamed intermediate variables: 
[ (eq(266,1),s(862))>>s(1395), (eq(266,1),s(863))>>s(1396), (eq(266,1),s(1047))>>s(1397), (eq(266,1),aux(215))>>s(1398), (eq(266,1),aux(216))>>s(1399), (eq(266,1),aux(217))>>s(1400), (eq(266,1),aux(218))>>s(1401), (eq(266,1),aux(219))>>s(1402), (eq(266,1),aux(220))>>s(1403), (eq(266,1),s(1050))>>s(1404), (eq(266,1),s(1051))>>s(1405), (eq(266,1),s(1052))>>s(1406), (eq(266,1),aux(201))>>s(1407), (eq(266,1),s(871))>>s(1408), (eq(266,1),s(1055))>>s(1409), (eq(266,1),s(1056))>>s(1410), (eq(266,1),s(874))>>s(1411), (eq(266,1),s(1058))>>s(1412), (eq(266,1),s(1059))>>s(1413), (eq(266,1),s(1060))>>s(1414), (eq(266,1),s(1061))>>s(1415), (eq(266,1),s(1062))>>s(1416), (eq(266,1),s(1063))>>s(1417), (eq(266,1),s(1064))>>s(1418), (eq(266,1),s(1065))>>s(1419), (eq(266,1),s(1066))>>s(1420), (eq(266,1),s(1067))>>s(1421), (eq(266,1),it(195))>>s(1422), (eq(266,1),aux(200))>>s(1423), (eq(266,1),aux(199))>>s(1424), (eq(266,1),aux(205))>>s(1425), (eq(266,1),aux(197))>>s(1426), (eq(266,1),aux(196))>>s(1427), (eq(266,1),aux(202))>>s(1428), (eq(266,1),s(858))>>s(1429), (eq(266,1),s(999))>>s(1430), (eq(266,1),s(1000))>>s(1431), (eq(266,1),s(990))>>s(1432), (eq(266,1),s(1001))>>s(1433), (eq(266,1),s(1002))>>s(1434), (eq(266,1),s(1028))>>s(1435), (eq(266,1),s(1003))>>s(1436), (eq(266,1),s(1004))>>s(1437), (eq(266,1),s(1040))>>s(1438), (eq(266,1),s(1029))>>s(1439), (eq(266,1),s(1005))>>s(1440), (eq(266,1),s(1006))>>s(1441), (eq(266,1),s(1007))>>s(1442), (eq(266,1),s(951))>>s(1443), (eq(266,1),s(952))>>s(1444), (eq(266,1),s(953))>>s(1445), (eq(266,1),s(954))>>s(1446), (eq(266,1),s(955))>>s(1447), (eq(266,1),s(1036))>>s(1448), (eq(266,1),s(1038))>>s(1449), (eq(266,1),s(1008))>>s(1450), (eq(266,1),s(1035))>>s(1451), (eq(266,1),s(1037))>>s(1452), (eq(266,1),s(1039))>>s(1453), (eq(266,1),s(1034))>>s(1454), (eq(266,1),s(1009))>>s(1455), (eq(266,1),s(1010))>>s(1456), (eq(266,1),s(1011))>>s(1457), (eq(266,1),s(996))>>s(1458), (eq(266,1),s(966))>>s(1459), (eq(266,1),s(993))>>s(1460), (eq(266,1),s(967))>>s(1461), (eq(266,1),s(1012))>>s(1462), (eq(266,1),s(1013))>>s(1463), (eq(266,1),s(1014))>>s(1464), (eq(266,1),s(971))>>s(1465), (eq(266,1),s(972))>>s(1466), (eq(266,1),s(1023))>>s(1467), (eq(266,1),s(1026))>>s(1468), (eq(266,1),s(1015))>>s(1469), (eq(266,1),s(1021))>>s(1470), (eq(266,1),s(1024))>>s(1471), (eq(266,1),s(1027))>>s(1472), (eq(266,1),s(1020))>>s(1473), (eq(266,1),s(1016))>>s(1474), (eq(266,1),s(1017))>>s(1475), (eq(266,1),s(1018))>>s(1476), (eq(266,1),s(865))>>s(1477), (eq(266,1),s(866))>>s(1478), (eq(266,1),s(983))>>s(1479), (eq(266,1),s(984))>>s(1480), (eq(266,1),s(985))>>s(1481), (eq(266,1),s(872))>>s(1482), (eq(266,1),s(873))>>s(1483), (eq(266,1),s(994))>>s(1484), (eq(266,1),s(997))>>s(1485), (eq(266,1),s(986))>>s(1486), (eq(266,1),s(992))>>s(1487), (eq(266,1),s(995))>>s(1488), (eq(266,1),s(998))>>s(1489), (eq(266,1),s(991))>>s(1490), (eq(266,1),s(987))>>s(1491), (eq(266,1),s(988))>>s(1492), (eq(266,1),s(989))>>s(1493)]
 * Renamed intermediate variables: 
[ (eq(266,2),s(774))>>s(1494), (eq(266,2),s(775))>>s(1495), (eq(266,2),s(776))>>s(1496), (eq(266,2),s(777))>>s(1497), (eq(266,2),s(778))>>s(1498), (eq(266,2),s(779))>>s(1499), (eq(266,2),s(780))>>s(1500)]

#### Simplifying cost structure of CE 266 
 * Joined equivalent variables [aux(225),s(1397),s(1497)] into aux(225)
 * Joined equivalent variables [aux(226),s(1398),s(1495)] into aux(226)
 * Joined equivalent variables [s(1422),s(1494),s(1498)] into s(1422)
 * Renamed intermediate variables: 
[ (eq(267,1),s(862))>>s(1501), (eq(267,1),s(863))>>s(1502), (eq(267,1),s(1047))>>s(1503), (eq(267,1),aux(215))>>s(1504), (eq(267,1),aux(216))>>s(1505), (eq(267,1),aux(217))>>s(1506), (eq(267,1),aux(218))>>s(1507), (eq(267,1),aux(219))>>s(1508), (eq(267,1),aux(220))>>s(1509), (eq(267,1),s(1050))>>s(1510), (eq(267,1),s(1051))>>s(1511), (eq(267,1),s(1052))>>s(1512), (eq(267,1),aux(201))>>s(1513), (eq(267,1),s(871))>>s(1514), (eq(267,1),s(1055))>>s(1515), (eq(267,1),s(1056))>>s(1516), (eq(267,1),s(874))>>s(1517), (eq(267,1),s(1058))>>s(1518), (eq(267,1),s(1059))>>s(1519), (eq(267,1),s(1060))>>s(1520), (eq(267,1),s(1061))>>s(1521), (eq(267,1),s(1062))>>s(1522), (eq(267,1),s(1063))>>s(1523), (eq(267,1),s(1064))>>s(1524), (eq(267,1),s(1065))>>s(1525), (eq(267,1),s(1066))>>s(1526), (eq(267,1),s(1067))>>s(1527), (eq(267,1),it(195))>>s(1528), (eq(267,1),aux(200))>>s(1529), (eq(267,1),aux(199))>>s(1530), (eq(267,1),aux(205))>>s(1531), (eq(267,1),aux(197))>>s(1532), (eq(267,1),aux(196))>>s(1533), (eq(267,1),aux(202))>>s(1534), (eq(267,1),s(858))>>s(1535), (eq(267,1),s(999))>>s(1536), (eq(267,1),s(1000))>>s(1537), (eq(267,1),s(990))>>s(1538), (eq(267,1),s(1001))>>s(1539), (eq(267,1),s(1002))>>s(1540), (eq(267,1),s(1028))>>s(1541), (eq(267,1),s(1003))>>s(1542), (eq(267,1),s(1004))>>s(1543), (eq(267,1),s(1040))>>s(1544), (eq(267,1),s(1029))>>s(1545), (eq(267,1),s(1005))>>s(1546), (eq(267,1),s(1006))>>s(1547), (eq(267,1),s(1007))>>s(1548), (eq(267,1),s(951))>>s(1549), (eq(267,1),s(952))>>s(1550), (eq(267,1),s(953))>>s(1551), (eq(267,1),s(954))>>s(1552), (eq(267,1),s(955))>>s(1553), (eq(267,1),s(1036))>>s(1554), (eq(267,1),s(1038))>>s(1555), (eq(267,1),s(1008))>>s(1556), (eq(267,1),s(1035))>>s(1557), (eq(267,1),s(1037))>>s(1558), (eq(267,1),s(1039))>>s(1559), (eq(267,1),s(1034))>>s(1560), (eq(267,1),s(1009))>>s(1561), (eq(267,1),s(1010))>>s(1562), (eq(267,1),s(1011))>>s(1563), (eq(267,1),s(996))>>s(1564), (eq(267,1),s(966))>>s(1565), (eq(267,1),s(993))>>s(1566), (eq(267,1),s(967))>>s(1567), (eq(267,1),s(1012))>>s(1568), (eq(267,1),s(1013))>>s(1569), (eq(267,1),s(1014))>>s(1570), (eq(267,1),s(971))>>s(1571), (eq(267,1),s(972))>>s(1572), (eq(267,1),s(1023))>>s(1573), (eq(267,1),s(1026))>>s(1574), (eq(267,1),s(1015))>>s(1575), (eq(267,1),s(1021))>>s(1576), (eq(267,1),s(1024))>>s(1577), (eq(267,1),s(1027))>>s(1578), (eq(267,1),s(1020))>>s(1579), (eq(267,1),s(1016))>>s(1580), (eq(267,1),s(1017))>>s(1581), (eq(267,1),s(1018))>>s(1582), (eq(267,1),s(865))>>s(1583), (eq(267,1),s(866))>>s(1584), (eq(267,1),s(983))>>s(1585), (eq(267,1),s(984))>>s(1586), (eq(267,1),s(985))>>s(1587), (eq(267,1),s(872))>>s(1588), (eq(267,1),s(873))>>s(1589), (eq(267,1),s(994))>>s(1590), (eq(267,1),s(997))>>s(1591), (eq(267,1),s(986))>>s(1592), (eq(267,1),s(992))>>s(1593), (eq(267,1),s(995))>>s(1594), (eq(267,1),s(998))>>s(1595), (eq(267,1),s(991))>>s(1596), (eq(267,1),s(987))>>s(1597), (eq(267,1),s(988))>>s(1598), (eq(267,1),s(989))>>s(1599)]
 * Renamed intermediate variables: 
[ (eq(267,2),s(781))>>s(1600)]

#### Simplifying cost structure of CE 267 
 * Joined equivalent variables [aux(227),s(1504)] into aux(227)
 * Joined equivalent variables [s(1528),s(1600)] into s(1528)
 * Renamed intermediate variables: 
[ (eq(263,1),aux(195))>>s(1601), (eq(263,1),s(859))>>s(1602), (eq(263,1),s(860))>>s(1603), (eq(263,1),aux(198))>>s(1604), (eq(263,1),s(862))>>s(1605), (eq(263,1),s(863))>>s(1606), (eq(263,1),s(864))>>s(1607), (eq(263,1),aux(211))>>s(1608), (eq(263,1),it(195))>>s(1609), (eq(263,1),aux(201))>>s(1610), (eq(263,1),aux(200))>>s(1611), (eq(263,1),aux(199))>>s(1612), (eq(263,1),aux(205))>>s(1613), (eq(263,1),aux(197))>>s(1614), (eq(263,1),aux(196))>>s(1615), (eq(263,1),aux(202))>>s(1616), (eq(263,1),s(858))>>s(1617), (eq(263,1),s(999))>>s(1618), (eq(263,1),s(1000))>>s(1619), (eq(263,1),s(990))>>s(1620), (eq(263,1),s(1001))>>s(1621), (eq(263,1),s(1002))>>s(1622), (eq(263,1),s(1028))>>s(1623), (eq(263,1),s(1003))>>s(1624), (eq(263,1),s(1004))>>s(1625), (eq(263,1),s(1040))>>s(1626), (eq(263,1),s(1029))>>s(1627), (eq(263,1),s(1005))>>s(1628), (eq(263,1),s(1006))>>s(1629), (eq(263,1),s(1007))>>s(1630), (eq(263,1),s(951))>>s(1631), (eq(263,1),s(952))>>s(1632), (eq(263,1),s(953))>>s(1633), (eq(263,1),s(954))>>s(1634), (eq(263,1),s(955))>>s(1635), (eq(263,1),s(1036))>>s(1636), (eq(263,1),s(1038))>>s(1637), (eq(263,1),s(1008))>>s(1638), (eq(263,1),s(1035))>>s(1639), (eq(263,1),s(1037))>>s(1640), (eq(263,1),s(1039))>>s(1641), (eq(263,1),s(1034))>>s(1642), (eq(263,1),s(1009))>>s(1643), (eq(263,1),s(1010))>>s(1644), (eq(263,1),s(1011))>>s(1645), (eq(263,1),s(996))>>s(1646), (eq(263,1),s(966))>>s(1647), (eq(263,1),s(993))>>s(1648), (eq(263,1),s(967))>>s(1649), (eq(263,1),s(1012))>>s(1650), (eq(263,1),s(1013))>>s(1651), (eq(263,1),s(1014))>>s(1652), (eq(263,1),s(971))>>s(1653), (eq(263,1),s(972))>>s(1654), (eq(263,1),s(1023))>>s(1655), (eq(263,1),s(1026))>>s(1656), (eq(263,1),s(1015))>>s(1657), (eq(263,1),s(1021))>>s(1658), (eq(263,1),s(1024))>>s(1659), (eq(263,1),s(1027))>>s(1660), (eq(263,1),s(1020))>>s(1661), (eq(263,1),s(1016))>>s(1662), (eq(263,1),s(1017))>>s(1663), (eq(263,1),s(1018))>>s(1664), (eq(263,1),s(865))>>s(1665), (eq(263,1),s(866))>>s(1666), (eq(263,1),s(983))>>s(1667), (eq(263,1),s(984))>>s(1668), (eq(263,1),s(985))>>s(1669), (eq(263,1),s(871))>>s(1670), (eq(263,1),s(872))>>s(1671), (eq(263,1),s(873))>>s(1672), (eq(263,1),s(874))>>s(1673), (eq(263,1),s(994))>>s(1674), (eq(263,1),s(997))>>s(1675), (eq(263,1),s(986))>>s(1676), (eq(263,1),s(992))>>s(1677), (eq(263,1),s(995))>>s(1678), (eq(263,1),s(998))>>s(1679), (eq(263,1),s(991))>>s(1680), (eq(263,1),s(987))>>s(1681), (eq(263,1),s(988))>>s(1682), (eq(263,1),s(989))>>s(1683)]
 * Renamed intermediate variables: 
[ (eq(263,2),s(781))>>s(1684)]

#### Simplifying cost structure of CE 263 
 * Joined equivalent variables [aux(228),s(1608)] into aux(228)
 * Joined equivalent variables [s(1609),s(1684)] into s(1609)
 * Renamed intermediate variables: 
[ (eq(264,1),aux(195))>>s(1685), (eq(264,1),s(859))>>s(1686), (eq(264,1),s(860))>>s(1687), (eq(264,1),aux(198))>>s(1688), (eq(264,1),s(862))>>s(1689), (eq(264,1),s(863))>>s(1690), (eq(264,1),s(864))>>s(1691), (eq(264,1),aux(211))>>s(1692), (eq(264,1),it(195))>>s(1693), (eq(264,1),aux(201))>>s(1694), (eq(264,1),aux(200))>>s(1695), (eq(264,1),aux(199))>>s(1696), (eq(264,1),aux(205))>>s(1697), (eq(264,1),aux(197))>>s(1698), (eq(264,1),aux(196))>>s(1699), (eq(264,1),aux(202))>>s(1700), (eq(264,1),s(858))>>s(1701), (eq(264,1),s(999))>>s(1702), (eq(264,1),s(1000))>>s(1703), (eq(264,1),s(990))>>s(1704), (eq(264,1),s(1001))>>s(1705), (eq(264,1),s(1002))>>s(1706), (eq(264,1),s(1028))>>s(1707), (eq(264,1),s(1003))>>s(1708), (eq(264,1),s(1004))>>s(1709), (eq(264,1),s(1040))>>s(1710), (eq(264,1),s(1029))>>s(1711), (eq(264,1),s(1005))>>s(1712), (eq(264,1),s(1006))>>s(1713), (eq(264,1),s(1007))>>s(1714), (eq(264,1),s(951))>>s(1715), (eq(264,1),s(952))>>s(1716), (eq(264,1),s(953))>>s(1717), (eq(264,1),s(954))>>s(1718), (eq(264,1),s(955))>>s(1719), (eq(264,1),s(1036))>>s(1720), (eq(264,1),s(1038))>>s(1721), (eq(264,1),s(1008))>>s(1722), (eq(264,1),s(1035))>>s(1723), (eq(264,1),s(1037))>>s(1724), (eq(264,1),s(1039))>>s(1725), (eq(264,1),s(1034))>>s(1726), (eq(264,1),s(1009))>>s(1727), (eq(264,1),s(1010))>>s(1728), (eq(264,1),s(1011))>>s(1729), (eq(264,1),s(996))>>s(1730), (eq(264,1),s(966))>>s(1731), (eq(264,1),s(993))>>s(1732), (eq(264,1),s(967))>>s(1733), (eq(264,1),s(1012))>>s(1734), (eq(264,1),s(1013))>>s(1735), (eq(264,1),s(1014))>>s(1736), (eq(264,1),s(971))>>s(1737), (eq(264,1),s(972))>>s(1738), (eq(264,1),s(1023))>>s(1739), (eq(264,1),s(1026))>>s(1740), (eq(264,1),s(1015))>>s(1741), (eq(264,1),s(1021))>>s(1742), (eq(264,1),s(1024))>>s(1743), (eq(264,1),s(1027))>>s(1744), (eq(264,1),s(1020))>>s(1745), (eq(264,1),s(1016))>>s(1746), (eq(264,1),s(1017))>>s(1747), (eq(264,1),s(1018))>>s(1748), (eq(264,1),s(865))>>s(1749), (eq(264,1),s(866))>>s(1750), (eq(264,1),s(983))>>s(1751), (eq(264,1),s(984))>>s(1752), (eq(264,1),s(985))>>s(1753), (eq(264,1),s(871))>>s(1754), (eq(264,1),s(872))>>s(1755), (eq(264,1),s(873))>>s(1756), (eq(264,1),s(874))>>s(1757), (eq(264,1),s(994))>>s(1758), (eq(264,1),s(997))>>s(1759), (eq(264,1),s(986))>>s(1760), (eq(264,1),s(992))>>s(1761), (eq(264,1),s(995))>>s(1762), (eq(264,1),s(998))>>s(1763), (eq(264,1),s(991))>>s(1764), (eq(264,1),s(987))>>s(1765), (eq(264,1),s(988))>>s(1766), (eq(264,1),s(989))>>s(1767)]
 * Renamed intermediate variables: 
[ (eq(264,2),s(782))>>s(1768), (eq(264,2),s(783))>>s(1769), (eq(264,2),s(784))>>s(1770), (eq(264,2),s(785))>>s(1771)]

#### Simplifying cost structure of CE 264 
 * Joined equivalent variables [aux(229),s(1692),s(1769)] into aux(229)
 * Joined equivalent variables [s(1693),s(1770)] into s(1693)
 * Renamed intermediate variables: 
[ (eq(268,1),s(862))>>s(1772), (eq(268,1),s(863))>>s(1773), (eq(268,1),s(1047))>>s(1774), (eq(268,1),aux(215))>>s(1775), (eq(268,1),aux(216))>>s(1776), (eq(268,1),aux(217))>>s(1777), (eq(268,1),aux(218))>>s(1778), (eq(268,1),aux(219))>>s(1779), (eq(268,1),aux(220))>>s(1780), (eq(268,1),s(1050))>>s(1781), (eq(268,1),s(1051))>>s(1782), (eq(268,1),s(1052))>>s(1783), (eq(268,1),aux(201))>>s(1784), (eq(268,1),s(871))>>s(1785), (eq(268,1),s(1055))>>s(1786), (eq(268,1),s(1056))>>s(1787), (eq(268,1),s(874))>>s(1788), (eq(268,1),s(1058))>>s(1789), (eq(268,1),s(1059))>>s(1790), (eq(268,1),s(1060))>>s(1791), (eq(268,1),s(1061))>>s(1792), (eq(268,1),s(1062))>>s(1793), (eq(268,1),s(1063))>>s(1794), (eq(268,1),s(1064))>>s(1795), (eq(268,1),s(1065))>>s(1796), (eq(268,1),s(1066))>>s(1797), (eq(268,1),s(1067))>>s(1798), (eq(268,1),it(195))>>s(1799), (eq(268,1),aux(200))>>s(1800), (eq(268,1),aux(199))>>s(1801), (eq(268,1),aux(205))>>s(1802), (eq(268,1),aux(197))>>s(1803), (eq(268,1),aux(196))>>s(1804), (eq(268,1),aux(202))>>s(1805), (eq(268,1),s(858))>>s(1806), (eq(268,1),s(999))>>s(1807), (eq(268,1),s(1000))>>s(1808), (eq(268,1),s(990))>>s(1809), (eq(268,1),s(1001))>>s(1810), (eq(268,1),s(1002))>>s(1811), (eq(268,1),s(1028))>>s(1812), (eq(268,1),s(1003))>>s(1813), (eq(268,1),s(1004))>>s(1814), (eq(268,1),s(1040))>>s(1815), (eq(268,1),s(1029))>>s(1816), (eq(268,1),s(1005))>>s(1817), (eq(268,1),s(1006))>>s(1818), (eq(268,1),s(1007))>>s(1819), (eq(268,1),s(951))>>s(1820), (eq(268,1),s(952))>>s(1821), (eq(268,1),s(953))>>s(1822), (eq(268,1),s(954))>>s(1823), (eq(268,1),s(955))>>s(1824), (eq(268,1),s(1036))>>s(1825), (eq(268,1),s(1038))>>s(1826), (eq(268,1),s(1008))>>s(1827), (eq(268,1),s(1035))>>s(1828), (eq(268,1),s(1037))>>s(1829), (eq(268,1),s(1039))>>s(1830), (eq(268,1),s(1034))>>s(1831), (eq(268,1),s(1009))>>s(1832), (eq(268,1),s(1010))>>s(1833), (eq(268,1),s(1011))>>s(1834), (eq(268,1),s(996))>>s(1835), (eq(268,1),s(966))>>s(1836), (eq(268,1),s(993))>>s(1837), (eq(268,1),s(967))>>s(1838), (eq(268,1),s(1012))>>s(1839), (eq(268,1),s(1013))>>s(1840), (eq(268,1),s(1014))>>s(1841), (eq(268,1),s(971))>>s(1842), (eq(268,1),s(972))>>s(1843), (eq(268,1),s(1023))>>s(1844), (eq(268,1),s(1026))>>s(1845), (eq(268,1),s(1015))>>s(1846), (eq(268,1),s(1021))>>s(1847), (eq(268,1),s(1024))>>s(1848), (eq(268,1),s(1027))>>s(1849), (eq(268,1),s(1020))>>s(1850), (eq(268,1),s(1016))>>s(1851), (eq(268,1),s(1017))>>s(1852), (eq(268,1),s(1018))>>s(1853), (eq(268,1),s(865))>>s(1854), (eq(268,1),s(866))>>s(1855), (eq(268,1),s(983))>>s(1856), (eq(268,1),s(984))>>s(1857), (eq(268,1),s(985))>>s(1858), (eq(268,1),s(872))>>s(1859), (eq(268,1),s(873))>>s(1860), (eq(268,1),s(994))>>s(1861), (eq(268,1),s(997))>>s(1862), (eq(268,1),s(986))>>s(1863), (eq(268,1),s(992))>>s(1864), (eq(268,1),s(995))>>s(1865), (eq(268,1),s(998))>>s(1866), (eq(268,1),s(991))>>s(1867), (eq(268,1),s(987))>>s(1868), (eq(268,1),s(988))>>s(1869), (eq(268,1),s(989))>>s(1870)]
 * Renamed intermediate variables: 
[ (eq(268,2),s(782))>>s(1871), (eq(268,2),s(783))>>s(1872), (eq(268,2),s(784))>>s(1873), (eq(268,2),s(785))>>s(1874)]

#### Simplifying cost structure of CE 268 
 * Joined equivalent variables [aux(230),s(1775),s(1872)] into aux(230)
 * Joined equivalent variables [s(1799),s(1873)] into s(1799)

#### Cost of chains of case_46(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q):
* Chain [209]: 22
  with precondition: [A=1,B=0,D=1,H=1,I=0,K=1,L=0,N=1,O=0,Q=1,E>=1,F>=0,G>=0,J>=0,M>=0,C>=J,P>=J,C>=M] 

* Chain [208]: 22*s(1074)+11*s(1075)+11*s(1076)+10*s(1084)+9*s(1089)+9*s(1090)+10*s(1091)+6*s(1092)+36
  Such that:s(1092) =< 2
s(1071) =< E
s(1072) =< F
s(1073) =< F+1
s(1069) =< F+L
s(1070) =< 3*F+L
s(1068) =< L
s(1074) =< s(1068)
s(1075) =< s(1068)
s(1076) =< s(1068)
s(1074) =< s(1071)
s(1075) =< s(1071)
s(1076) =< s(1071)
s(1077) =< s(1072)
s(1078) =< s(1072)-1
s(1079) =< s(1070)+1
s(1080) =< s(1069)+1
s(1081) =< s(1072)-2
s(1082) =< s(1074)*s(1070)
s(1083) =< s(1074)*s(1069)
s(1084) =< s(1074)*s(1072)
s(1085) =< s(1074)*s(1078)
s(1086) =< s(1074)*s(1079)
s(1087) =< s(1074)*s(1080)
s(1088) =< s(1074)*s(1081)
s(1089) =< s(1086)+s(1082)+s(1070)
s(1090) =< s(1086)+s(1082)+s(1070)
s(1089) =< s(1087)+s(1083)+s(1069)
s(1090) =< s(1087)+s(1083)+s(1069)
s(1076) =< s(1087)+s(1083)+s(1069)
s(1076) =< s(1086)+s(1082)+s(1070)
s(1075) =< s(1085)+s(1088)+s(1072)
s(1076) =< s(1085)+s(1088)+s(1072)
s(1090) =< s(1076)*s(1077)
s(1091) =< s(1075)*s(1077)
s(1089) =< s(1075)*s(1073)

  with precondition: [A=2,D=1,H=1,I=0,K=2,N=1,O=0,Q=1,L=B,E>=1,F>=0,G>=0,J>=0,L>=1,M>=0,P>=0,C>=J,C>=M] 

* Chain [207]: 22*s(1099)+11*s(1100)+11*s(1101)+10*s(1109)+9*s(1114)+9*s(1115)+10*s(1116)+16*s(1118)+35
  Such that:s(1117) =< 2
s(1096) =< E
s(1097) =< F
s(1098) =< F+1
s(1094) =< F+L
s(1095) =< 3*F+L
s(1093) =< L
s(1118) =< s(1117)
s(1099) =< s(1093)
s(1100) =< s(1093)
s(1101) =< s(1093)
s(1099) =< s(1096)
s(1100) =< s(1096)
s(1101) =< s(1096)
s(1102) =< s(1097)
s(1103) =< s(1097)-1
s(1104) =< s(1095)+1
s(1105) =< s(1094)+1
s(1106) =< s(1097)-2
s(1107) =< s(1099)*s(1095)
s(1108) =< s(1099)*s(1094)
s(1109) =< s(1099)*s(1097)
s(1110) =< s(1099)*s(1103)
s(1111) =< s(1099)*s(1104)
s(1112) =< s(1099)*s(1105)
s(1113) =< s(1099)*s(1106)
s(1114) =< s(1111)+s(1107)+s(1095)
s(1115) =< s(1111)+s(1107)+s(1095)
s(1114) =< s(1112)+s(1108)+s(1094)
s(1115) =< s(1112)+s(1108)+s(1094)
s(1101) =< s(1112)+s(1108)+s(1094)
s(1101) =< s(1111)+s(1107)+s(1095)
s(1100) =< s(1110)+s(1113)+s(1097)
s(1101) =< s(1110)+s(1113)+s(1097)
s(1115) =< s(1101)*s(1102)
s(1116) =< s(1100)*s(1102)
s(1114) =< s(1100)*s(1098)

  with precondition: [A=2,D=1,H=1,I=1,J=0,K=2,N=2,O=1,Q=1,L=B,C>=1,E>=1,F>=0,G>=0,L>=1,M>=0,P>=1,C>=M] 

* Chain [206]: 38*s(1127)+22*s(1146)+11*s(1147)+11*s(1148)+10*s(1156)+9*s(1161)+9*s(1162)+10*s(1163)+22*s(1168)+11*s(1169)+11*s(1170)+10*s(1175)+9*s(1180)+9*s(1181)+10*s(1182)+22*s(1185)+11*s(1186)+11*s(1187)+10*s(1194)+9*s(1199)+9*s(1200)+10*s(1201)+22
  Such that:s(1119) =< B
s(1120) =< B+F
s(1121) =< B+3*F
s(1122) =< E
s(1123) =< E+F
s(1124) =< E+3*F
s(1125) =< F
aux(221) =< K
s(1127) =< aux(221)
s(1128) =< s(1125)
s(1129) =< s(1124)
s(1130) =< s(1123)
s(1131) =< s(1122)
s(1132) =< s(1121)
s(1133) =< s(1120)
s(1134) =< s(1119)
s(1135) =< s(1125)+1
s(1136) =< s(1127)*s(1122)
s(1137) =< s(1127)*s(1119)
s(1138) =< s(1127)*s(1128)
s(1139) =< s(1127)*s(1129)
s(1140) =< s(1127)*s(1130)
s(1141) =< s(1127)*s(1131)
s(1142) =< s(1127)*s(1132)
s(1143) =< s(1127)*s(1133)
s(1144) =< s(1127)*s(1134)
s(1145) =< s(1144)
s(1146) =< s(1144)
s(1147) =< s(1144)
s(1148) =< s(1144)
s(1146) =< s(1141)
s(1147) =< s(1141)
s(1148) =< s(1141)
s(1149) =< s(1128)
s(1150) =< s(1128)-1
s(1151) =< s(1132)+1
s(1152) =< s(1133)+1
s(1153) =< s(1128)-2
s(1154) =< s(1146)*s(1132)
s(1155) =< s(1146)*s(1133)
s(1156) =< s(1146)*s(1128)
s(1157) =< s(1146)*s(1150)
s(1158) =< s(1146)*s(1151)
s(1159) =< s(1146)*s(1152)
s(1160) =< s(1146)*s(1153)
s(1161) =< s(1158)+s(1154)+s(1142)
s(1162) =< s(1158)+s(1154)+s(1142)
s(1161) =< s(1159)+s(1155)+s(1143)
s(1162) =< s(1159)+s(1155)+s(1143)
s(1148) =< s(1159)+s(1155)+s(1143)
s(1148) =< s(1158)+s(1154)+s(1142)
s(1147) =< s(1157)+s(1160)+s(1138)
s(1148) =< s(1157)+s(1160)+s(1138)
s(1162) =< s(1148)*s(1149)
s(1163) =< s(1147)*s(1149)
s(1161) =< s(1147)*s(1135)
s(1164) =< s(1143)
s(1165) =< s(1133)
s(1166) =< s(1142)
s(1167) =< s(1132)
s(1145) =< s(1141)
s(1164) =< s(1140)
s(1165) =< s(1130)
s(1166) =< s(1139)
s(1167) =< s(1129)
s(1168) =< s(1145)
s(1169) =< s(1145)
s(1170) =< s(1145)
s(1168) =< s(1141)
s(1169) =< s(1141)
s(1170) =< s(1141)
s(1171) =< s(1167)+1
s(1172) =< s(1165)+1
s(1173) =< s(1168)*s(1167)
s(1174) =< s(1168)*s(1165)
s(1175) =< s(1168)*s(1128)
s(1176) =< s(1168)*s(1150)
s(1177) =< s(1168)*s(1171)
s(1178) =< s(1168)*s(1172)
s(1179) =< s(1168)*s(1153)
s(1180) =< s(1177)+s(1173)+s(1166)
s(1181) =< s(1177)+s(1173)+s(1166)
s(1180) =< s(1178)+s(1174)+s(1164)
s(1181) =< s(1178)+s(1174)+s(1164)
s(1170) =< s(1178)+s(1174)+s(1164)
s(1170) =< s(1177)+s(1173)+s(1166)
s(1169) =< s(1176)+s(1179)+s(1138)
s(1170) =< s(1176)+s(1179)+s(1138)
s(1181) =< s(1170)*s(1149)
s(1182) =< s(1169)*s(1149)
s(1180) =< s(1169)*s(1135)
s(1183) =< s(1120)
s(1184) =< s(1121)
s(1137) =< s(1136)
s(1183) =< s(1123)
s(1184) =< s(1124)
s(1185) =< s(1137)
s(1186) =< s(1137)
s(1187) =< s(1137)
s(1185) =< s(1136)
s(1186) =< s(1136)
s(1187) =< s(1136)
s(1188) =< s(1125)-1
s(1189) =< s(1184)+1
s(1190) =< s(1183)+1
s(1191) =< s(1125)-2
s(1192) =< s(1185)*s(1184)
s(1193) =< s(1185)*s(1183)
s(1194) =< s(1185)*s(1125)
s(1195) =< s(1185)*s(1188)
s(1196) =< s(1185)*s(1189)
s(1197) =< s(1185)*s(1190)
s(1198) =< s(1185)*s(1191)
s(1199) =< s(1196)+s(1192)+s(1166)
s(1200) =< s(1196)+s(1192)+s(1166)
s(1199) =< s(1197)+s(1193)+s(1164)
s(1200) =< s(1197)+s(1193)+s(1164)
s(1187) =< s(1197)+s(1193)+s(1164)
s(1187) =< s(1196)+s(1192)+s(1166)
s(1186) =< s(1195)+s(1198)+s(1138)
s(1187) =< s(1195)+s(1198)+s(1138)
s(1200) =< s(1187)*s(1128)
s(1201) =< s(1186)*s(1128)
s(1199) =< s(1186)*s(1135)

  with precondition: [D=1,H=1,J=0,Q=1,L=B,A=I+1,A=K,A=N,A>=2,E>=2,G>=0,L>=2,M>=0,O>=1,C+1>=A,P+1>=A,C>=M,F>=O] 

* Chain [205]: 22*s(1213)+11*s(1214)+11*s(1215)+10*s(1223)+9*s(1228)+9*s(1229)+10*s(1230)+38*s(1231)+22*s(1249)+11*s(1250)+11*s(1251)+10*s(1259)+9*s(1264)+9*s(1265)+10*s(1266)+22*s(1271)+11*s(1272)+11*s(1273)+10*s(1278)+9*s(1283)+9*s(1284)+10*s(1285)+22*s(1288)+11*s(1289)+11*s(1290)+10*s(1295)+9*s(1300)+9*s(1301)+10*s(1302)+35
  Such that:s(1211) =< E
s(1204) =< E+F
s(1205) =< E+3*F
s(1212) =< F
s(1206) =< F+1
s(1209) =< F+L
s(1210) =< 3*F+L
s(1208) =< L
aux(222) =< A
s(1231) =< aux(222)
s(1213) =< s(1208)
s(1214) =< s(1208)
s(1215) =< s(1208)
s(1213) =< s(1211)
s(1214) =< s(1211)
s(1215) =< s(1211)
s(1216) =< s(1212)
s(1217) =< s(1212)-1
s(1218) =< s(1210)+1
s(1219) =< s(1209)+1
s(1220) =< s(1212)-2
s(1221) =< s(1213)*s(1210)
s(1222) =< s(1213)*s(1209)
s(1223) =< s(1213)*s(1212)
s(1224) =< s(1213)*s(1217)
s(1225) =< s(1213)*s(1218)
s(1226) =< s(1213)*s(1219)
s(1227) =< s(1213)*s(1220)
s(1228) =< s(1225)+s(1221)+s(1210)
s(1229) =< s(1225)+s(1221)+s(1210)
s(1228) =< s(1226)+s(1222)+s(1209)
s(1229) =< s(1226)+s(1222)+s(1209)
s(1215) =< s(1226)+s(1222)+s(1209)
s(1215) =< s(1225)+s(1221)+s(1210)
s(1214) =< s(1224)+s(1227)+s(1212)
s(1215) =< s(1224)+s(1227)+s(1212)
s(1229) =< s(1215)*s(1216)
s(1230) =< s(1214)*s(1216)
s(1228) =< s(1214)*s(1206)
s(1232) =< s(1205)
s(1233) =< s(1204)
s(1234) =< s(1211)
s(1235) =< s(1210)
s(1236) =< s(1209)
s(1237) =< s(1208)
s(1238) =< s(1212)+1
s(1239) =< s(1231)*s(1211)
s(1240) =< s(1231)*s(1208)
s(1241) =< s(1231)*s(1216)
s(1242) =< s(1231)*s(1232)
s(1243) =< s(1231)*s(1233)
s(1244) =< s(1231)*s(1234)
s(1245) =< s(1231)*s(1235)
s(1246) =< s(1231)*s(1236)
s(1247) =< s(1231)*s(1237)
s(1248) =< s(1247)
s(1249) =< s(1247)
s(1250) =< s(1247)
s(1251) =< s(1247)
s(1249) =< s(1244)
s(1250) =< s(1244)
s(1251) =< s(1244)
s(1252) =< s(1216)
s(1253) =< s(1216)-1
s(1254) =< s(1235)+1
s(1255) =< s(1236)+1
s(1256) =< s(1216)-2
s(1257) =< s(1249)*s(1235)
s(1258) =< s(1249)*s(1236)
s(1259) =< s(1249)*s(1216)
s(1260) =< s(1249)*s(1253)
s(1261) =< s(1249)*s(1254)
s(1262) =< s(1249)*s(1255)
s(1263) =< s(1249)*s(1256)
s(1264) =< s(1261)+s(1257)+s(1245)
s(1265) =< s(1261)+s(1257)+s(1245)
s(1264) =< s(1262)+s(1258)+s(1246)
s(1265) =< s(1262)+s(1258)+s(1246)
s(1251) =< s(1262)+s(1258)+s(1246)
s(1251) =< s(1261)+s(1257)+s(1245)
s(1250) =< s(1260)+s(1263)+s(1241)
s(1251) =< s(1260)+s(1263)+s(1241)
s(1265) =< s(1251)*s(1252)
s(1266) =< s(1250)*s(1252)
s(1264) =< s(1250)*s(1238)
s(1267) =< s(1246)
s(1268) =< s(1236)
s(1269) =< s(1245)
s(1270) =< s(1235)
s(1248) =< s(1244)
s(1267) =< s(1243)
s(1268) =< s(1233)
s(1269) =< s(1242)
s(1270) =< s(1232)
s(1271) =< s(1248)
s(1272) =< s(1248)
s(1273) =< s(1248)
s(1271) =< s(1244)
s(1272) =< s(1244)
s(1273) =< s(1244)
s(1274) =< s(1270)+1
s(1275) =< s(1268)+1
s(1276) =< s(1271)*s(1270)
s(1277) =< s(1271)*s(1268)
s(1278) =< s(1271)*s(1216)
s(1279) =< s(1271)*s(1253)
s(1280) =< s(1271)*s(1274)
s(1281) =< s(1271)*s(1275)
s(1282) =< s(1271)*s(1256)
s(1283) =< s(1280)+s(1276)+s(1269)
s(1284) =< s(1280)+s(1276)+s(1269)
s(1283) =< s(1281)+s(1277)+s(1267)
s(1284) =< s(1281)+s(1277)+s(1267)
s(1273) =< s(1281)+s(1277)+s(1267)
s(1273) =< s(1280)+s(1276)+s(1269)
s(1272) =< s(1279)+s(1282)+s(1241)
s(1273) =< s(1279)+s(1282)+s(1241)
s(1284) =< s(1273)*s(1252)
s(1285) =< s(1272)*s(1252)
s(1283) =< s(1272)*s(1238)
s(1286) =< s(1209)
s(1287) =< s(1210)
s(1240) =< s(1239)
s(1286) =< s(1204)
s(1287) =< s(1205)
s(1288) =< s(1240)
s(1289) =< s(1240)
s(1290) =< s(1240)
s(1288) =< s(1239)
s(1289) =< s(1239)
s(1290) =< s(1239)
s(1291) =< s(1287)+1
s(1292) =< s(1286)+1
s(1293) =< s(1288)*s(1287)
s(1294) =< s(1288)*s(1286)
s(1295) =< s(1288)*s(1212)
s(1296) =< s(1288)*s(1217)
s(1297) =< s(1288)*s(1291)
s(1298) =< s(1288)*s(1292)
s(1299) =< s(1288)*s(1220)
s(1300) =< s(1297)+s(1293)+s(1269)
s(1301) =< s(1297)+s(1293)+s(1269)
s(1300) =< s(1298)+s(1294)+s(1267)
s(1301) =< s(1298)+s(1294)+s(1267)
s(1290) =< s(1298)+s(1294)+s(1267)
s(1290) =< s(1297)+s(1293)+s(1269)
s(1289) =< s(1296)+s(1299)+s(1241)
s(1290) =< s(1296)+s(1299)+s(1241)
s(1301) =< s(1290)*s(1216)
s(1302) =< s(1289)*s(1216)
s(1300) =< s(1289)*s(1238)

  with precondition: [D=1,H=1,J=0,Q=1,L=B,A=I+1,A=K,A=N,A>=3,E>=1,G>=0,L>=1,M>=0,O>=1,C+1>=A,P+1>=A,C>=M,F+1>=O] 

* Chain [204]: 48*s(1313)+22*s(1332)+11*s(1333)+11*s(1334)+10*s(1342)+9*s(1347)+9*s(1348)+10*s(1349)+22*s(1354)+11*s(1355)+11*s(1356)+10*s(1361)+9*s(1366)+9*s(1367)+10*s(1368)+22*s(1371)+11*s(1372)+11*s(1373)+10*s(1380)+9*s(1385)+9*s(1386)+10*s(1387)+18*s(1393)+6*s(1394)+33
  Such that:s(1305) =< B
s(1306) =< B+F
s(1307) =< B+3*F
s(1308) =< E
s(1309) =< E+F
s(1310) =< E+3*F
s(1390) =< J
aux(223) =< F
aux(224) =< K
s(1313) =< aux(224)
s(1393) =< aux(223)
s(1394) =< s(1313)*s(1390)
s(1314) =< aux(223)
s(1315) =< s(1310)
s(1316) =< s(1309)
s(1317) =< s(1308)
s(1318) =< s(1307)
s(1319) =< s(1306)
s(1320) =< s(1305)
s(1321) =< aux(223)+1
s(1322) =< s(1313)*s(1308)
s(1323) =< s(1313)*s(1305)
s(1324) =< s(1313)*s(1314)
s(1325) =< s(1313)*s(1315)
s(1326) =< s(1313)*s(1316)
s(1327) =< s(1313)*s(1317)
s(1328) =< s(1313)*s(1318)
s(1329) =< s(1313)*s(1319)
s(1330) =< s(1313)*s(1320)
s(1331) =< s(1330)
s(1332) =< s(1330)
s(1333) =< s(1330)
s(1334) =< s(1330)
s(1332) =< s(1327)
s(1333) =< s(1327)
s(1334) =< s(1327)
s(1335) =< s(1314)
s(1336) =< s(1314)-1
s(1337) =< s(1318)+1
s(1338) =< s(1319)+1
s(1339) =< s(1314)-2
s(1340) =< s(1332)*s(1318)
s(1341) =< s(1332)*s(1319)
s(1342) =< s(1332)*s(1314)
s(1343) =< s(1332)*s(1336)
s(1344) =< s(1332)*s(1337)
s(1345) =< s(1332)*s(1338)
s(1346) =< s(1332)*s(1339)
s(1347) =< s(1344)+s(1340)+s(1328)
s(1348) =< s(1344)+s(1340)+s(1328)
s(1347) =< s(1345)+s(1341)+s(1329)
s(1348) =< s(1345)+s(1341)+s(1329)
s(1334) =< s(1345)+s(1341)+s(1329)
s(1334) =< s(1344)+s(1340)+s(1328)
s(1333) =< s(1343)+s(1346)+s(1324)
s(1334) =< s(1343)+s(1346)+s(1324)
s(1348) =< s(1334)*s(1335)
s(1349) =< s(1333)*s(1335)
s(1347) =< s(1333)*s(1321)
s(1350) =< s(1329)
s(1351) =< s(1319)
s(1352) =< s(1328)
s(1353) =< s(1318)
s(1331) =< s(1327)
s(1350) =< s(1326)
s(1351) =< s(1316)
s(1352) =< s(1325)
s(1353) =< s(1315)
s(1354) =< s(1331)
s(1355) =< s(1331)
s(1356) =< s(1331)
s(1354) =< s(1327)
s(1355) =< s(1327)
s(1356) =< s(1327)
s(1357) =< s(1353)+1
s(1358) =< s(1351)+1
s(1359) =< s(1354)*s(1353)
s(1360) =< s(1354)*s(1351)
s(1361) =< s(1354)*s(1314)
s(1362) =< s(1354)*s(1336)
s(1363) =< s(1354)*s(1357)
s(1364) =< s(1354)*s(1358)
s(1365) =< s(1354)*s(1339)
s(1366) =< s(1363)+s(1359)+s(1352)
s(1367) =< s(1363)+s(1359)+s(1352)
s(1366) =< s(1364)+s(1360)+s(1350)
s(1367) =< s(1364)+s(1360)+s(1350)
s(1356) =< s(1364)+s(1360)+s(1350)
s(1356) =< s(1363)+s(1359)+s(1352)
s(1355) =< s(1362)+s(1365)+s(1324)
s(1356) =< s(1362)+s(1365)+s(1324)
s(1367) =< s(1356)*s(1335)
s(1368) =< s(1355)*s(1335)
s(1366) =< s(1355)*s(1321)
s(1369) =< s(1306)
s(1370) =< s(1307)
s(1323) =< s(1322)
s(1369) =< s(1309)
s(1370) =< s(1310)
s(1371) =< s(1323)
s(1372) =< s(1323)
s(1373) =< s(1323)
s(1371) =< s(1322)
s(1372) =< s(1322)
s(1373) =< s(1322)
s(1374) =< aux(223)-1
s(1375) =< s(1370)+1
s(1376) =< s(1369)+1
s(1377) =< aux(223)-2
s(1378) =< s(1371)*s(1370)
s(1379) =< s(1371)*s(1369)
s(1380) =< s(1371)*aux(223)
s(1381) =< s(1371)*s(1374)
s(1382) =< s(1371)*s(1375)
s(1383) =< s(1371)*s(1376)
s(1384) =< s(1371)*s(1377)
s(1385) =< s(1382)+s(1378)+s(1352)
s(1386) =< s(1382)+s(1378)+s(1352)
s(1385) =< s(1383)+s(1379)+s(1350)
s(1386) =< s(1383)+s(1379)+s(1350)
s(1373) =< s(1383)+s(1379)+s(1350)
s(1373) =< s(1382)+s(1378)+s(1352)
s(1372) =< s(1381)+s(1384)+s(1324)
s(1373) =< s(1381)+s(1384)+s(1324)
s(1386) =< s(1373)*s(1314)
s(1387) =< s(1372)*s(1314)
s(1385) =< s(1372)*s(1321)

  with precondition: [D=1,H=1,N=1,O=0,Q=1,L=B,A=I+1,A=K,A>=2,E>=2,G>=0,J>=0,L>=2,M>=0,P>=0,C+1>=A,C>=J,F>=J+2,C>=M] 

* Chain [203]: 22*s(1404)+11*s(1405)+11*s(1406)+10*s(1414)+9*s(1419)+9*s(1420)+10*s(1421)+48*s(1422)+22*s(1440)+11*s(1441)+11*s(1442)+10*s(1450)+9*s(1455)+9*s(1456)+10*s(1457)+22*s(1462)+11*s(1463)+11*s(1464)+10*s(1469)+9*s(1474)+9*s(1475)+10*s(1476)+22*s(1479)+11*s(1480)+11*s(1481)+10*s(1486)+9*s(1491)+9*s(1492)+10*s(1493)+18*s(1499)+6*s(1500)+46
  Such that:s(1399) =< B
s(1400) =< B+F
s(1401) =< B+3*F
s(1402) =< E
s(1395) =< E+F
s(1396) =< E+3*F
s(1403) =< F
s(1496) =< J
aux(225) =< F+1
aux(226) =< K
s(1422) =< aux(226)
s(1499) =< aux(225)
s(1500) =< s(1422)*s(1496)
s(1404) =< s(1399)
s(1405) =< s(1399)
s(1406) =< s(1399)
s(1404) =< s(1402)
s(1405) =< s(1402)
s(1406) =< s(1402)
s(1407) =< s(1403)
s(1408) =< s(1403)-1
s(1409) =< s(1401)+1
s(1410) =< s(1400)+1
s(1411) =< s(1403)-2
s(1412) =< s(1404)*s(1401)
s(1413) =< s(1404)*s(1400)
s(1414) =< s(1404)*s(1403)
s(1415) =< s(1404)*s(1408)
s(1416) =< s(1404)*s(1409)
s(1417) =< s(1404)*s(1410)
s(1418) =< s(1404)*s(1411)
s(1419) =< s(1416)+s(1412)+s(1401)
s(1420) =< s(1416)+s(1412)+s(1401)
s(1419) =< s(1417)+s(1413)+s(1400)
s(1420) =< s(1417)+s(1413)+s(1400)
s(1406) =< s(1417)+s(1413)+s(1400)
s(1406) =< s(1416)+s(1412)+s(1401)
s(1405) =< s(1415)+s(1418)+s(1403)
s(1406) =< s(1415)+s(1418)+s(1403)
s(1420) =< s(1406)*s(1407)
s(1421) =< s(1405)*s(1407)
s(1419) =< s(1405)*aux(225)
s(1423) =< s(1396)
s(1424) =< s(1395)
s(1425) =< s(1402)
s(1426) =< s(1401)
s(1427) =< s(1400)
s(1428) =< s(1399)
s(1429) =< s(1403)+1
s(1430) =< s(1422)*s(1402)
s(1431) =< s(1422)*s(1399)
s(1432) =< s(1422)*s(1407)
s(1433) =< s(1422)*s(1423)
s(1434) =< s(1422)*s(1424)
s(1435) =< s(1422)*s(1425)
s(1436) =< s(1422)*s(1426)
s(1437) =< s(1422)*s(1427)
s(1438) =< s(1422)*s(1428)
s(1439) =< s(1438)
s(1440) =< s(1438)
s(1441) =< s(1438)
s(1442) =< s(1438)
s(1440) =< s(1435)
s(1441) =< s(1435)
s(1442) =< s(1435)
s(1443) =< s(1407)
s(1444) =< s(1407)-1
s(1445) =< s(1426)+1
s(1446) =< s(1427)+1
s(1447) =< s(1407)-2
s(1448) =< s(1440)*s(1426)
s(1449) =< s(1440)*s(1427)
s(1450) =< s(1440)*s(1407)
s(1451) =< s(1440)*s(1444)
s(1452) =< s(1440)*s(1445)
s(1453) =< s(1440)*s(1446)
s(1454) =< s(1440)*s(1447)
s(1455) =< s(1452)+s(1448)+s(1436)
s(1456) =< s(1452)+s(1448)+s(1436)
s(1455) =< s(1453)+s(1449)+s(1437)
s(1456) =< s(1453)+s(1449)+s(1437)
s(1442) =< s(1453)+s(1449)+s(1437)
s(1442) =< s(1452)+s(1448)+s(1436)
s(1441) =< s(1451)+s(1454)+s(1432)
s(1442) =< s(1451)+s(1454)+s(1432)
s(1456) =< s(1442)*s(1443)
s(1457) =< s(1441)*s(1443)
s(1455) =< s(1441)*s(1429)
s(1458) =< s(1437)
s(1459) =< s(1427)
s(1460) =< s(1436)
s(1461) =< s(1426)
s(1439) =< s(1435)
s(1458) =< s(1434)
s(1459) =< s(1424)
s(1460) =< s(1433)
s(1461) =< s(1423)
s(1462) =< s(1439)
s(1463) =< s(1439)
s(1464) =< s(1439)
s(1462) =< s(1435)
s(1463) =< s(1435)
s(1464) =< s(1435)
s(1465) =< s(1461)+1
s(1466) =< s(1459)+1
s(1467) =< s(1462)*s(1461)
s(1468) =< s(1462)*s(1459)
s(1469) =< s(1462)*s(1407)
s(1470) =< s(1462)*s(1444)
s(1471) =< s(1462)*s(1465)
s(1472) =< s(1462)*s(1466)
s(1473) =< s(1462)*s(1447)
s(1474) =< s(1471)+s(1467)+s(1460)
s(1475) =< s(1471)+s(1467)+s(1460)
s(1474) =< s(1472)+s(1468)+s(1458)
s(1475) =< s(1472)+s(1468)+s(1458)
s(1464) =< s(1472)+s(1468)+s(1458)
s(1464) =< s(1471)+s(1467)+s(1460)
s(1463) =< s(1470)+s(1473)+s(1432)
s(1464) =< s(1470)+s(1473)+s(1432)
s(1475) =< s(1464)*s(1443)
s(1476) =< s(1463)*s(1443)
s(1474) =< s(1463)*s(1429)
s(1477) =< s(1400)
s(1478) =< s(1401)
s(1431) =< s(1430)
s(1477) =< s(1395)
s(1478) =< s(1396)
s(1479) =< s(1431)
s(1480) =< s(1431)
s(1481) =< s(1431)
s(1479) =< s(1430)
s(1480) =< s(1430)
s(1481) =< s(1430)
s(1482) =< s(1478)+1
s(1483) =< s(1477)+1
s(1484) =< s(1479)*s(1478)
s(1485) =< s(1479)*s(1477)
s(1486) =< s(1479)*s(1403)
s(1487) =< s(1479)*s(1408)
s(1488) =< s(1479)*s(1482)
s(1489) =< s(1479)*s(1483)
s(1490) =< s(1479)*s(1411)
s(1491) =< s(1488)+s(1484)+s(1460)
s(1492) =< s(1488)+s(1484)+s(1460)
s(1491) =< s(1489)+s(1485)+s(1458)
s(1492) =< s(1489)+s(1485)+s(1458)
s(1481) =< s(1489)+s(1485)+s(1458)
s(1481) =< s(1488)+s(1484)+s(1460)
s(1480) =< s(1487)+s(1490)+s(1432)
s(1481) =< s(1487)+s(1490)+s(1432)
s(1492) =< s(1481)*s(1407)
s(1493) =< s(1480)*s(1407)
s(1491) =< s(1480)*s(1429)

  with precondition: [D=1,H=1,N=1,O=0,Q=1,L=B,A=I+1,A=K,A>=3,E>=1,G>=0,J>=0,L>=1,M>=0,P>=0,C+1>=A,C>=J,F>=J+1,C>=M] 

* Chain [202]: 22*s(1510)+11*s(1511)+11*s(1512)+10*s(1520)+9*s(1525)+9*s(1526)+10*s(1527)+28*s(1528)+22*s(1546)+11*s(1547)+11*s(1548)+10*s(1556)+9*s(1561)+9*s(1562)+10*s(1563)+22*s(1568)+11*s(1569)+11*s(1570)+10*s(1575)+9*s(1580)+9*s(1581)+10*s(1582)+22*s(1585)+11*s(1586)+11*s(1587)+10*s(1592)+9*s(1597)+9*s(1598)+10*s(1599)+36
  Such that:s(1508) =< E
s(1501) =< E+F
s(1502) =< E+3*F
s(1509) =< F
s(1503) =< F+1
s(1506) =< F+L
s(1507) =< 3*F+L
s(1505) =< L
aux(227) =< A
s(1528) =< aux(227)
s(1510) =< s(1505)
s(1511) =< s(1505)
s(1512) =< s(1505)
s(1510) =< s(1508)
s(1511) =< s(1508)
s(1512) =< s(1508)
s(1513) =< s(1509)
s(1514) =< s(1509)-1
s(1515) =< s(1507)+1
s(1516) =< s(1506)+1
s(1517) =< s(1509)-2
s(1518) =< s(1510)*s(1507)
s(1519) =< s(1510)*s(1506)
s(1520) =< s(1510)*s(1509)
s(1521) =< s(1510)*s(1514)
s(1522) =< s(1510)*s(1515)
s(1523) =< s(1510)*s(1516)
s(1524) =< s(1510)*s(1517)
s(1525) =< s(1522)+s(1518)+s(1507)
s(1526) =< s(1522)+s(1518)+s(1507)
s(1525) =< s(1523)+s(1519)+s(1506)
s(1526) =< s(1523)+s(1519)+s(1506)
s(1512) =< s(1523)+s(1519)+s(1506)
s(1512) =< s(1522)+s(1518)+s(1507)
s(1511) =< s(1521)+s(1524)+s(1509)
s(1512) =< s(1521)+s(1524)+s(1509)
s(1526) =< s(1512)*s(1513)
s(1527) =< s(1511)*s(1513)
s(1525) =< s(1511)*s(1503)
s(1529) =< s(1502)
s(1530) =< s(1501)
s(1531) =< s(1508)
s(1532) =< s(1507)
s(1533) =< s(1506)
s(1534) =< s(1505)
s(1535) =< s(1509)+1
s(1536) =< s(1528)*s(1508)
s(1537) =< s(1528)*s(1505)
s(1538) =< s(1528)*s(1513)
s(1539) =< s(1528)*s(1529)
s(1540) =< s(1528)*s(1530)
s(1541) =< s(1528)*s(1531)
s(1542) =< s(1528)*s(1532)
s(1543) =< s(1528)*s(1533)
s(1544) =< s(1528)*s(1534)
s(1545) =< s(1544)
s(1546) =< s(1544)
s(1547) =< s(1544)
s(1548) =< s(1544)
s(1546) =< s(1541)
s(1547) =< s(1541)
s(1548) =< s(1541)
s(1549) =< s(1513)
s(1550) =< s(1513)-1
s(1551) =< s(1532)+1
s(1552) =< s(1533)+1
s(1553) =< s(1513)-2
s(1554) =< s(1546)*s(1532)
s(1555) =< s(1546)*s(1533)
s(1556) =< s(1546)*s(1513)
s(1557) =< s(1546)*s(1550)
s(1558) =< s(1546)*s(1551)
s(1559) =< s(1546)*s(1552)
s(1560) =< s(1546)*s(1553)
s(1561) =< s(1558)+s(1554)+s(1542)
s(1562) =< s(1558)+s(1554)+s(1542)
s(1561) =< s(1559)+s(1555)+s(1543)
s(1562) =< s(1559)+s(1555)+s(1543)
s(1548) =< s(1559)+s(1555)+s(1543)
s(1548) =< s(1558)+s(1554)+s(1542)
s(1547) =< s(1557)+s(1560)+s(1538)
s(1548) =< s(1557)+s(1560)+s(1538)
s(1562) =< s(1548)*s(1549)
s(1563) =< s(1547)*s(1549)
s(1561) =< s(1547)*s(1535)
s(1564) =< s(1543)
s(1565) =< s(1533)
s(1566) =< s(1542)
s(1567) =< s(1532)
s(1545) =< s(1541)
s(1564) =< s(1540)
s(1565) =< s(1530)
s(1566) =< s(1539)
s(1567) =< s(1529)
s(1568) =< s(1545)
s(1569) =< s(1545)
s(1570) =< s(1545)
s(1568) =< s(1541)
s(1569) =< s(1541)
s(1570) =< s(1541)
s(1571) =< s(1567)+1
s(1572) =< s(1565)+1
s(1573) =< s(1568)*s(1567)
s(1574) =< s(1568)*s(1565)
s(1575) =< s(1568)*s(1513)
s(1576) =< s(1568)*s(1550)
s(1577) =< s(1568)*s(1571)
s(1578) =< s(1568)*s(1572)
s(1579) =< s(1568)*s(1553)
s(1580) =< s(1577)+s(1573)+s(1566)
s(1581) =< s(1577)+s(1573)+s(1566)
s(1580) =< s(1578)+s(1574)+s(1564)
s(1581) =< s(1578)+s(1574)+s(1564)
s(1570) =< s(1578)+s(1574)+s(1564)
s(1570) =< s(1577)+s(1573)+s(1566)
s(1569) =< s(1576)+s(1579)+s(1538)
s(1570) =< s(1576)+s(1579)+s(1538)
s(1581) =< s(1570)*s(1549)
s(1582) =< s(1569)*s(1549)
s(1580) =< s(1569)*s(1535)
s(1583) =< s(1506)
s(1584) =< s(1507)
s(1537) =< s(1536)
s(1583) =< s(1501)
s(1584) =< s(1502)
s(1585) =< s(1537)
s(1586) =< s(1537)
s(1587) =< s(1537)
s(1585) =< s(1536)
s(1586) =< s(1536)
s(1587) =< s(1536)
s(1588) =< s(1584)+1
s(1589) =< s(1583)+1
s(1590) =< s(1585)*s(1584)
s(1591) =< s(1585)*s(1583)
s(1592) =< s(1585)*s(1509)
s(1593) =< s(1585)*s(1514)
s(1594) =< s(1585)*s(1588)
s(1595) =< s(1585)*s(1589)
s(1596) =< s(1585)*s(1517)
s(1597) =< s(1594)+s(1590)+s(1566)
s(1598) =< s(1594)+s(1590)+s(1566)
s(1597) =< s(1595)+s(1591)+s(1564)
s(1598) =< s(1595)+s(1591)+s(1564)
s(1587) =< s(1595)+s(1591)+s(1564)
s(1587) =< s(1594)+s(1590)+s(1566)
s(1586) =< s(1593)+s(1596)+s(1538)
s(1587) =< s(1593)+s(1596)+s(1538)
s(1598) =< s(1587)*s(1513)
s(1599) =< s(1586)*s(1513)
s(1597) =< s(1586)*s(1535)

  with precondition: [D=1,H=1,N=1,O=0,Q=1,K=A,L=B,E>=1,F>=0,G>=0,I>=0,J>=0,K>=3,L>=1,M>=0,P>=0,C>=I,K>=I+2,C>=J,C>=M] 

* Chain [201]: 28*s(1609)+22*s(1628)+11*s(1629)+11*s(1630)+10*s(1638)+9*s(1643)+9*s(1644)+10*s(1645)+22*s(1650)+11*s(1651)+11*s(1652)+10*s(1657)+9*s(1662)+9*s(1663)+10*s(1664)+22*s(1667)+11*s(1668)+11*s(1669)+10*s(1676)+9*s(1681)+9*s(1682)+10*s(1683)+23
  Such that:s(1601) =< B
s(1602) =< B+F
s(1603) =< B+3*F
s(1604) =< E
s(1605) =< E+F
s(1606) =< E+3*F
s(1607) =< F
aux(228) =< K
s(1609) =< aux(228)
s(1610) =< s(1607)
s(1611) =< s(1606)
s(1612) =< s(1605)
s(1613) =< s(1604)
s(1614) =< s(1603)
s(1615) =< s(1602)
s(1616) =< s(1601)
s(1617) =< s(1607)+1
s(1618) =< s(1609)*s(1604)
s(1619) =< s(1609)*s(1601)
s(1620) =< s(1609)*s(1610)
s(1621) =< s(1609)*s(1611)
s(1622) =< s(1609)*s(1612)
s(1623) =< s(1609)*s(1613)
s(1624) =< s(1609)*s(1614)
s(1625) =< s(1609)*s(1615)
s(1626) =< s(1609)*s(1616)
s(1627) =< s(1626)
s(1628) =< s(1626)
s(1629) =< s(1626)
s(1630) =< s(1626)
s(1628) =< s(1623)
s(1629) =< s(1623)
s(1630) =< s(1623)
s(1631) =< s(1610)
s(1632) =< s(1610)-1
s(1633) =< s(1614)+1
s(1634) =< s(1615)+1
s(1635) =< s(1610)-2
s(1636) =< s(1628)*s(1614)
s(1637) =< s(1628)*s(1615)
s(1638) =< s(1628)*s(1610)
s(1639) =< s(1628)*s(1632)
s(1640) =< s(1628)*s(1633)
s(1641) =< s(1628)*s(1634)
s(1642) =< s(1628)*s(1635)
s(1643) =< s(1640)+s(1636)+s(1624)
s(1644) =< s(1640)+s(1636)+s(1624)
s(1643) =< s(1641)+s(1637)+s(1625)
s(1644) =< s(1641)+s(1637)+s(1625)
s(1630) =< s(1641)+s(1637)+s(1625)
s(1630) =< s(1640)+s(1636)+s(1624)
s(1629) =< s(1639)+s(1642)+s(1620)
s(1630) =< s(1639)+s(1642)+s(1620)
s(1644) =< s(1630)*s(1631)
s(1645) =< s(1629)*s(1631)
s(1643) =< s(1629)*s(1617)
s(1646) =< s(1625)
s(1647) =< s(1615)
s(1648) =< s(1624)
s(1649) =< s(1614)
s(1627) =< s(1623)
s(1646) =< s(1622)
s(1647) =< s(1612)
s(1648) =< s(1621)
s(1649) =< s(1611)
s(1650) =< s(1627)
s(1651) =< s(1627)
s(1652) =< s(1627)
s(1650) =< s(1623)
s(1651) =< s(1623)
s(1652) =< s(1623)
s(1653) =< s(1649)+1
s(1654) =< s(1647)+1
s(1655) =< s(1650)*s(1649)
s(1656) =< s(1650)*s(1647)
s(1657) =< s(1650)*s(1610)
s(1658) =< s(1650)*s(1632)
s(1659) =< s(1650)*s(1653)
s(1660) =< s(1650)*s(1654)
s(1661) =< s(1650)*s(1635)
s(1662) =< s(1659)+s(1655)+s(1648)
s(1663) =< s(1659)+s(1655)+s(1648)
s(1662) =< s(1660)+s(1656)+s(1646)
s(1663) =< s(1660)+s(1656)+s(1646)
s(1652) =< s(1660)+s(1656)+s(1646)
s(1652) =< s(1659)+s(1655)+s(1648)
s(1651) =< s(1658)+s(1661)+s(1620)
s(1652) =< s(1658)+s(1661)+s(1620)
s(1663) =< s(1652)*s(1631)
s(1664) =< s(1651)*s(1631)
s(1662) =< s(1651)*s(1617)
s(1665) =< s(1602)
s(1666) =< s(1603)
s(1619) =< s(1618)
s(1665) =< s(1605)
s(1666) =< s(1606)
s(1667) =< s(1619)
s(1668) =< s(1619)
s(1669) =< s(1619)
s(1667) =< s(1618)
s(1668) =< s(1618)
s(1669) =< s(1618)
s(1670) =< s(1607)-1
s(1671) =< s(1666)+1
s(1672) =< s(1665)+1
s(1673) =< s(1607)-2
s(1674) =< s(1667)*s(1666)
s(1675) =< s(1667)*s(1665)
s(1676) =< s(1667)*s(1607)
s(1677) =< s(1667)*s(1670)
s(1678) =< s(1667)*s(1671)
s(1679) =< s(1667)*s(1672)
s(1680) =< s(1667)*s(1673)
s(1681) =< s(1678)+s(1674)+s(1648)
s(1682) =< s(1678)+s(1674)+s(1648)
s(1681) =< s(1679)+s(1675)+s(1646)
s(1682) =< s(1679)+s(1675)+s(1646)
s(1669) =< s(1679)+s(1675)+s(1646)
s(1669) =< s(1678)+s(1674)+s(1648)
s(1668) =< s(1677)+s(1680)+s(1620)
s(1669) =< s(1677)+s(1680)+s(1620)
s(1682) =< s(1669)*s(1610)
s(1683) =< s(1668)*s(1610)
s(1681) =< s(1668)*s(1617)

  with precondition: [D=1,H=1,N=1,O=0,Q=1,K=A,L=B,E>=2,F>=1,G>=0,I>=0,J>=0,L>=2,M>=0,P>=0,C>=I,K>=I+2,C>=J,C>=M] 

* Chain [200]: 38*s(1693)+22*s(1712)+11*s(1713)+11*s(1714)+10*s(1722)+9*s(1727)+9*s(1728)+10*s(1729)+22*s(1734)+11*s(1735)+11*s(1736)+10*s(1741)+9*s(1746)+9*s(1747)+10*s(1748)+22*s(1751)+11*s(1752)+11*s(1753)+10*s(1760)+9*s(1765)+9*s(1766)+10*s(1767)+6*s(1771)+22
  Such that:s(1688) =< E
s(1689) =< E+F
s(1690) =< E+3*F
s(1691) =< F
s(1686) =< F+L
s(1687) =< 3*F+L
s(1768) =< J
s(1685) =< L
aux(229) =< A
s(1693) =< aux(229)
s(1771) =< s(1693)*s(1768)
s(1694) =< s(1691)
s(1695) =< s(1690)
s(1696) =< s(1689)
s(1697) =< s(1688)
s(1698) =< s(1687)
s(1699) =< s(1686)
s(1700) =< s(1685)
s(1701) =< s(1691)+1
s(1702) =< s(1693)*s(1688)
s(1703) =< s(1693)*s(1685)
s(1704) =< s(1693)*s(1694)
s(1705) =< s(1693)*s(1695)
s(1706) =< s(1693)*s(1696)
s(1707) =< s(1693)*s(1697)
s(1708) =< s(1693)*s(1698)
s(1709) =< s(1693)*s(1699)
s(1710) =< s(1693)*s(1700)
s(1711) =< s(1710)
s(1712) =< s(1710)
s(1713) =< s(1710)
s(1714) =< s(1710)
s(1712) =< s(1707)
s(1713) =< s(1707)
s(1714) =< s(1707)
s(1715) =< s(1694)
s(1716) =< s(1694)-1
s(1717) =< s(1698)+1
s(1718) =< s(1699)+1
s(1719) =< s(1694)-2
s(1720) =< s(1712)*s(1698)
s(1721) =< s(1712)*s(1699)
s(1722) =< s(1712)*s(1694)
s(1723) =< s(1712)*s(1716)
s(1724) =< s(1712)*s(1717)
s(1725) =< s(1712)*s(1718)
s(1726) =< s(1712)*s(1719)
s(1727) =< s(1724)+s(1720)+s(1708)
s(1728) =< s(1724)+s(1720)+s(1708)
s(1727) =< s(1725)+s(1721)+s(1709)
s(1728) =< s(1725)+s(1721)+s(1709)
s(1714) =< s(1725)+s(1721)+s(1709)
s(1714) =< s(1724)+s(1720)+s(1708)
s(1713) =< s(1723)+s(1726)+s(1704)
s(1714) =< s(1723)+s(1726)+s(1704)
s(1728) =< s(1714)*s(1715)
s(1729) =< s(1713)*s(1715)
s(1727) =< s(1713)*s(1701)
s(1730) =< s(1709)
s(1731) =< s(1699)
s(1732) =< s(1708)
s(1733) =< s(1698)
s(1711) =< s(1707)
s(1730) =< s(1706)
s(1731) =< s(1696)
s(1732) =< s(1705)
s(1733) =< s(1695)
s(1734) =< s(1711)
s(1735) =< s(1711)
s(1736) =< s(1711)
s(1734) =< s(1707)
s(1735) =< s(1707)
s(1736) =< s(1707)
s(1737) =< s(1733)+1
s(1738) =< s(1731)+1
s(1739) =< s(1734)*s(1733)
s(1740) =< s(1734)*s(1731)
s(1741) =< s(1734)*s(1694)
s(1742) =< s(1734)*s(1716)
s(1743) =< s(1734)*s(1737)
s(1744) =< s(1734)*s(1738)
s(1745) =< s(1734)*s(1719)
s(1746) =< s(1743)+s(1739)+s(1732)
s(1747) =< s(1743)+s(1739)+s(1732)
s(1746) =< s(1744)+s(1740)+s(1730)
s(1747) =< s(1744)+s(1740)+s(1730)
s(1736) =< s(1744)+s(1740)+s(1730)
s(1736) =< s(1743)+s(1739)+s(1732)
s(1735) =< s(1742)+s(1745)+s(1704)
s(1736) =< s(1742)+s(1745)+s(1704)
s(1747) =< s(1736)*s(1715)
s(1748) =< s(1735)*s(1715)
s(1746) =< s(1735)*s(1701)
s(1749) =< s(1686)
s(1750) =< s(1687)
s(1703) =< s(1702)
s(1749) =< s(1689)
s(1750) =< s(1690)
s(1751) =< s(1703)
s(1752) =< s(1703)
s(1753) =< s(1703)
s(1751) =< s(1702)
s(1752) =< s(1702)
s(1753) =< s(1702)
s(1754) =< s(1691)-1
s(1755) =< s(1750)+1
s(1756) =< s(1749)+1
s(1757) =< s(1691)-2
s(1758) =< s(1751)*s(1750)
s(1759) =< s(1751)*s(1749)
s(1760) =< s(1751)*s(1691)
s(1761) =< s(1751)*s(1754)
s(1762) =< s(1751)*s(1755)
s(1763) =< s(1751)*s(1756)
s(1764) =< s(1751)*s(1757)
s(1765) =< s(1762)+s(1758)+s(1732)
s(1766) =< s(1762)+s(1758)+s(1732)
s(1765) =< s(1763)+s(1759)+s(1730)
s(1766) =< s(1763)+s(1759)+s(1730)
s(1753) =< s(1763)+s(1759)+s(1730)
s(1753) =< s(1762)+s(1758)+s(1732)
s(1752) =< s(1761)+s(1764)+s(1704)
s(1753) =< s(1761)+s(1764)+s(1704)
s(1766) =< s(1753)*s(1694)
s(1767) =< s(1752)*s(1694)
s(1765) =< s(1752)*s(1701)

  with precondition: [D=1,H=1,Q=1,L=B,A=I+1,A=K,A=N,A>=2,E>=2,G>=0,J>=1,L>=2,M>=0,C+1>=A,P+1>=A,C>=J,O>=J+1,P>=J,C>=M,F>=O] 

* Chain [199]: 22*s(1781)+11*s(1782)+11*s(1783)+10*s(1791)+9*s(1796)+9*s(1797)+10*s(1798)+38*s(1799)+22*s(1817)+11*s(1818)+11*s(1819)+10*s(1827)+9*s(1832)+9*s(1833)+10*s(1834)+22*s(1839)+11*s(1840)+11*s(1841)+10*s(1846)+9*s(1851)+9*s(1852)+10*s(1853)+22*s(1856)+11*s(1857)+11*s(1858)+10*s(1863)+9*s(1868)+9*s(1869)+10*s(1870)+6*s(1874)+35
  Such that:s(1779) =< E
s(1772) =< E+F
s(1773) =< E+3*F
s(1780) =< F
s(1774) =< F+1
s(1777) =< F+L
s(1778) =< 3*F+L
s(1871) =< J
s(1776) =< L
aux(230) =< A
s(1799) =< aux(230)
s(1874) =< s(1799)*s(1871)
s(1781) =< s(1776)
s(1782) =< s(1776)
s(1783) =< s(1776)
s(1781) =< s(1779)
s(1782) =< s(1779)
s(1783) =< s(1779)
s(1784) =< s(1780)
s(1785) =< s(1780)-1
s(1786) =< s(1778)+1
s(1787) =< s(1777)+1
s(1788) =< s(1780)-2
s(1789) =< s(1781)*s(1778)
s(1790) =< s(1781)*s(1777)
s(1791) =< s(1781)*s(1780)
s(1792) =< s(1781)*s(1785)
s(1793) =< s(1781)*s(1786)
s(1794) =< s(1781)*s(1787)
s(1795) =< s(1781)*s(1788)
s(1796) =< s(1793)+s(1789)+s(1778)
s(1797) =< s(1793)+s(1789)+s(1778)
s(1796) =< s(1794)+s(1790)+s(1777)
s(1797) =< s(1794)+s(1790)+s(1777)
s(1783) =< s(1794)+s(1790)+s(1777)
s(1783) =< s(1793)+s(1789)+s(1778)
s(1782) =< s(1792)+s(1795)+s(1780)
s(1783) =< s(1792)+s(1795)+s(1780)
s(1797) =< s(1783)*s(1784)
s(1798) =< s(1782)*s(1784)
s(1796) =< s(1782)*s(1774)
s(1800) =< s(1773)
s(1801) =< s(1772)
s(1802) =< s(1779)
s(1803) =< s(1778)
s(1804) =< s(1777)
s(1805) =< s(1776)
s(1806) =< s(1780)+1
s(1807) =< s(1799)*s(1779)
s(1808) =< s(1799)*s(1776)
s(1809) =< s(1799)*s(1784)
s(1810) =< s(1799)*s(1800)
s(1811) =< s(1799)*s(1801)
s(1812) =< s(1799)*s(1802)
s(1813) =< s(1799)*s(1803)
s(1814) =< s(1799)*s(1804)
s(1815) =< s(1799)*s(1805)
s(1816) =< s(1815)
s(1817) =< s(1815)
s(1818) =< s(1815)
s(1819) =< s(1815)
s(1817) =< s(1812)
s(1818) =< s(1812)
s(1819) =< s(1812)
s(1820) =< s(1784)
s(1821) =< s(1784)-1
s(1822) =< s(1803)+1
s(1823) =< s(1804)+1
s(1824) =< s(1784)-2
s(1825) =< s(1817)*s(1803)
s(1826) =< s(1817)*s(1804)
s(1827) =< s(1817)*s(1784)
s(1828) =< s(1817)*s(1821)
s(1829) =< s(1817)*s(1822)
s(1830) =< s(1817)*s(1823)
s(1831) =< s(1817)*s(1824)
s(1832) =< s(1829)+s(1825)+s(1813)
s(1833) =< s(1829)+s(1825)+s(1813)
s(1832) =< s(1830)+s(1826)+s(1814)
s(1833) =< s(1830)+s(1826)+s(1814)
s(1819) =< s(1830)+s(1826)+s(1814)
s(1819) =< s(1829)+s(1825)+s(1813)
s(1818) =< s(1828)+s(1831)+s(1809)
s(1819) =< s(1828)+s(1831)+s(1809)
s(1833) =< s(1819)*s(1820)
s(1834) =< s(1818)*s(1820)
s(1832) =< s(1818)*s(1806)
s(1835) =< s(1814)
s(1836) =< s(1804)
s(1837) =< s(1813)
s(1838) =< s(1803)
s(1816) =< s(1812)
s(1835) =< s(1811)
s(1836) =< s(1801)
s(1837) =< s(1810)
s(1838) =< s(1800)
s(1839) =< s(1816)
s(1840) =< s(1816)
s(1841) =< s(1816)
s(1839) =< s(1812)
s(1840) =< s(1812)
s(1841) =< s(1812)
s(1842) =< s(1838)+1
s(1843) =< s(1836)+1
s(1844) =< s(1839)*s(1838)
s(1845) =< s(1839)*s(1836)
s(1846) =< s(1839)*s(1784)
s(1847) =< s(1839)*s(1821)
s(1848) =< s(1839)*s(1842)
s(1849) =< s(1839)*s(1843)
s(1850) =< s(1839)*s(1824)
s(1851) =< s(1848)+s(1844)+s(1837)
s(1852) =< s(1848)+s(1844)+s(1837)
s(1851) =< s(1849)+s(1845)+s(1835)
s(1852) =< s(1849)+s(1845)+s(1835)
s(1841) =< s(1849)+s(1845)+s(1835)
s(1841) =< s(1848)+s(1844)+s(1837)
s(1840) =< s(1847)+s(1850)+s(1809)
s(1841) =< s(1847)+s(1850)+s(1809)
s(1852) =< s(1841)*s(1820)
s(1853) =< s(1840)*s(1820)
s(1851) =< s(1840)*s(1806)
s(1854) =< s(1777)
s(1855) =< s(1778)
s(1808) =< s(1807)
s(1854) =< s(1772)
s(1855) =< s(1773)
s(1856) =< s(1808)
s(1857) =< s(1808)
s(1858) =< s(1808)
s(1856) =< s(1807)
s(1857) =< s(1807)
s(1858) =< s(1807)
s(1859) =< s(1855)+1
s(1860) =< s(1854)+1
s(1861) =< s(1856)*s(1855)
s(1862) =< s(1856)*s(1854)
s(1863) =< s(1856)*s(1780)
s(1864) =< s(1856)*s(1785)
s(1865) =< s(1856)*s(1859)
s(1866) =< s(1856)*s(1860)
s(1867) =< s(1856)*s(1788)
s(1868) =< s(1865)+s(1861)+s(1837)
s(1869) =< s(1865)+s(1861)+s(1837)
s(1868) =< s(1866)+s(1862)+s(1835)
s(1869) =< s(1866)+s(1862)+s(1835)
s(1858) =< s(1866)+s(1862)+s(1835)
s(1858) =< s(1865)+s(1861)+s(1837)
s(1857) =< s(1864)+s(1867)+s(1809)
s(1858) =< s(1864)+s(1867)+s(1809)
s(1869) =< s(1858)*s(1784)
s(1870) =< s(1857)*s(1784)
s(1868) =< s(1857)*s(1806)

  with precondition: [D=1,H=1,Q=1,L=B,A=I+1,A=K,A=N,A>=3,E>=1,G>=0,J>=1,L>=1,M>=0,C+1>=A,P+1>=A,C>=J,O>=J+1,P>=J,C>=M,F+1>=O] 


#### Simplifying cost structure of CE 280 

#### Simplifying cost structure of CE 269 
 * Renamed intermediate variables: 
[ (eq(270,1),s(1092))>>s(1875), (eq(270,1),s(1071))>>s(1876), (eq(270,1),s(1072))>>s(1877), (eq(270,1),s(1073))>>s(1878), (eq(270,1),s(1069))>>s(1879), (eq(270,1),s(1070))>>s(1880), (eq(270,1),s(1068))>>s(1881), (eq(270,1),s(1074))>>s(1882), (eq(270,1),s(1075))>>s(1883), (eq(270,1),s(1076))>>s(1884), (eq(270,1),s(1077))>>s(1885), (eq(270,1),s(1078))>>s(1886), (eq(270,1),s(1079))>>s(1887), (eq(270,1),s(1080))>>s(1888), (eq(270,1),s(1081))>>s(1889), (eq(270,1),s(1082))>>s(1890), (eq(270,1),s(1083))>>s(1891), (eq(270,1),s(1084))>>s(1892), (eq(270,1),s(1085))>>s(1893), (eq(270,1),s(1086))>>s(1894), (eq(270,1),s(1087))>>s(1895), (eq(270,1),s(1088))>>s(1896), (eq(270,1),s(1089))>>s(1897), (eq(270,1),s(1090))>>s(1898), (eq(270,1),s(1091))>>s(1899)]

#### Simplifying cost structure of CE 270 
 * Renamed intermediate variables: 
[ (eq(271,1),s(1117))>>s(1900), (eq(271,1),s(1096))>>s(1901), (eq(271,1),s(1097))>>s(1902), (eq(271,1),s(1098))>>s(1903), (eq(271,1),s(1094))>>s(1904), (eq(271,1),s(1095))>>s(1905), (eq(271,1),s(1093))>>s(1906), (eq(271,1),s(1118))>>s(1907), (eq(271,1),s(1099))>>s(1908), (eq(271,1),s(1100))>>s(1909), (eq(271,1),s(1101))>>s(1910), (eq(271,1),s(1102))>>s(1911), (eq(271,1),s(1103))>>s(1912), (eq(271,1),s(1104))>>s(1913), (eq(271,1),s(1105))>>s(1914), (eq(271,1),s(1106))>>s(1915), (eq(271,1),s(1107))>>s(1916), (eq(271,1),s(1108))>>s(1917), (eq(271,1),s(1109))>>s(1918), (eq(271,1),s(1110))>>s(1919), (eq(271,1),s(1111))>>s(1920), (eq(271,1),s(1112))>>s(1921), (eq(271,1),s(1113))>>s(1922), (eq(271,1),s(1114))>>s(1923), (eq(271,1),s(1115))>>s(1924), (eq(271,1),s(1116))>>s(1925)]

#### Simplifying cost structure of CE 271 
 * Renamed intermediate variables: 
[ (eq(275,1),s(1601))>>s(1926), (eq(275,1),s(1602))>>s(1927), (eq(275,1),s(1603))>>s(1928), (eq(275,1),s(1604))>>s(1929), (eq(275,1),s(1605))>>s(1930), (eq(275,1),s(1606))>>s(1931), (eq(275,1),s(1607))>>s(1932), (eq(275,1),aux(228))>>s(1933), (eq(275,1),s(1609))>>s(1934), (eq(275,1),s(1610))>>s(1935), (eq(275,1),s(1611))>>s(1936), (eq(275,1),s(1612))>>s(1937), (eq(275,1),s(1613))>>s(1938), (eq(275,1),s(1614))>>s(1939), (eq(275,1),s(1615))>>s(1940), (eq(275,1),s(1616))>>s(1941), (eq(275,1),s(1617))>>s(1942), (eq(275,1),s(1618))>>s(1943), (eq(275,1),s(1619))>>s(1944), (eq(275,1),s(1620))>>s(1945), (eq(275,1),s(1621))>>s(1946), (eq(275,1),s(1622))>>s(1947), (eq(275,1),s(1623))>>s(1948), (eq(275,1),s(1624))>>s(1949), (eq(275,1),s(1625))>>s(1950), (eq(275,1),s(1626))>>s(1951), (eq(275,1),s(1627))>>s(1952), (eq(275,1),s(1628))>>s(1953), (eq(275,1),s(1629))>>s(1954), (eq(275,1),s(1630))>>s(1955), (eq(275,1),s(1631))>>s(1956), (eq(275,1),s(1632))>>s(1957), (eq(275,1),s(1633))>>s(1958), (eq(275,1),s(1634))>>s(1959), (eq(275,1),s(1635))>>s(1960), (eq(275,1),s(1636))>>s(1961), (eq(275,1),s(1637))>>s(1962), (eq(275,1),s(1638))>>s(1963), (eq(275,1),s(1639))>>s(1964), (eq(275,1),s(1640))>>s(1965), (eq(275,1),s(1641))>>s(1966), (eq(275,1),s(1642))>>s(1967), (eq(275,1),s(1643))>>s(1968), (eq(275,1),s(1644))>>s(1969), (eq(275,1),s(1645))>>s(1970), (eq(275,1),s(1646))>>s(1971), (eq(275,1),s(1647))>>s(1972), (eq(275,1),s(1648))>>s(1973), (eq(275,1),s(1649))>>s(1974), (eq(275,1),s(1650))>>s(1975), (eq(275,1),s(1651))>>s(1976), (eq(275,1),s(1652))>>s(1977), (eq(275,1),s(1653))>>s(1978), (eq(275,1),s(1654))>>s(1979), (eq(275,1),s(1655))>>s(1980), (eq(275,1),s(1656))>>s(1981), (eq(275,1),s(1657))>>s(1982), (eq(275,1),s(1658))>>s(1983), (eq(275,1),s(1659))>>s(1984), (eq(275,1),s(1660))>>s(1985), (eq(275,1),s(1661))>>s(1986), (eq(275,1),s(1662))>>s(1987), (eq(275,1),s(1663))>>s(1988), (eq(275,1),s(1664))>>s(1989), (eq(275,1),s(1665))>>s(1990), (eq(275,1),s(1666))>>s(1991), (eq(275,1),s(1667))>>s(1992), (eq(275,1),s(1668))>>s(1993), (eq(275,1),s(1669))>>s(1994), (eq(275,1),s(1670))>>s(1995), (eq(275,1),s(1671))>>s(1996), (eq(275,1),s(1672))>>s(1997), (eq(275,1),s(1673))>>s(1998), (eq(275,1),s(1674))>>s(1999), (eq(275,1),s(1675))>>s(2000), (eq(275,1),s(1676))>>s(2001), (eq(275,1),s(1677))>>s(2002), (eq(275,1),s(1678))>>s(2003), (eq(275,1),s(1679))>>s(2004), (eq(275,1),s(1680))>>s(2005), (eq(275,1),s(1681))>>s(2006), (eq(275,1),s(1682))>>s(2007), (eq(275,1),s(1683))>>s(2008)]

#### Simplifying cost structure of CE 275 
 * Renamed intermediate variables: 
[ (eq(276,1),s(1305))>>s(2009), (eq(276,1),s(1306))>>s(2010), (eq(276,1),s(1307))>>s(2011), (eq(276,1),s(1308))>>s(2012), (eq(276,1),s(1309))>>s(2013), (eq(276,1),s(1310))>>s(2014), (eq(276,1),s(1390))>>s(2015), (eq(276,1),aux(223))>>s(2016), (eq(276,1),aux(224))>>s(2017), (eq(276,1),s(1313))>>s(2018), (eq(276,1),s(1393))>>s(2019), (eq(276,1),s(1394))>>s(2020), (eq(276,1),s(1314))>>s(2021), (eq(276,1),s(1315))>>s(2022), (eq(276,1),s(1316))>>s(2023), (eq(276,1),s(1317))>>s(2024), (eq(276,1),s(1318))>>s(2025), (eq(276,1),s(1319))>>s(2026), (eq(276,1),s(1320))>>s(2027), (eq(276,1),s(1321))>>s(2028), (eq(276,1),s(1322))>>s(2029), (eq(276,1),s(1323))>>s(2030), (eq(276,1),s(1324))>>s(2031), (eq(276,1),s(1325))>>s(2032), (eq(276,1),s(1326))>>s(2033), (eq(276,1),s(1327))>>s(2034), (eq(276,1),s(1328))>>s(2035), (eq(276,1),s(1329))>>s(2036), (eq(276,1),s(1330))>>s(2037), (eq(276,1),s(1331))>>s(2038), (eq(276,1),s(1332))>>s(2039), (eq(276,1),s(1333))>>s(2040), (eq(276,1),s(1334))>>s(2041), (eq(276,1),s(1335))>>s(2042), (eq(276,1),s(1336))>>s(2043), (eq(276,1),s(1337))>>s(2044), (eq(276,1),s(1338))>>s(2045), (eq(276,1),s(1339))>>s(2046), (eq(276,1),s(1340))>>s(2047), (eq(276,1),s(1341))>>s(2048), (eq(276,1),s(1342))>>s(2049), (eq(276,1),s(1343))>>s(2050), (eq(276,1),s(1344))>>s(2051), (eq(276,1),s(1345))>>s(2052), (eq(276,1),s(1346))>>s(2053), (eq(276,1),s(1347))>>s(2054), (eq(276,1),s(1348))>>s(2055), (eq(276,1),s(1349))>>s(2056), (eq(276,1),s(1350))>>s(2057), (eq(276,1),s(1351))>>s(2058), (eq(276,1),s(1352))>>s(2059), (eq(276,1),s(1353))>>s(2060), (eq(276,1),s(1354))>>s(2061), (eq(276,1),s(1355))>>s(2062), (eq(276,1),s(1356))>>s(2063), (eq(276,1),s(1357))>>s(2064), (eq(276,1),s(1358))>>s(2065), (eq(276,1),s(1359))>>s(2066), (eq(276,1),s(1360))>>s(2067), (eq(276,1),s(1361))>>s(2068), (eq(276,1),s(1362))>>s(2069), (eq(276,1),s(1363))>>s(2070), (eq(276,1),s(1364))>>s(2071), (eq(276,1),s(1365))>>s(2072), (eq(276,1),s(1366))>>s(2073), (eq(276,1),s(1367))>>s(2074), (eq(276,1),s(1368))>>s(2075), (eq(276,1),s(1369))>>s(2076), (eq(276,1),s(1370))>>s(2077), (eq(276,1),s(1371))>>s(2078), (eq(276,1),s(1372))>>s(2079), (eq(276,1),s(1373))>>s(2080), (eq(276,1),s(1374))>>s(2081), (eq(276,1),s(1375))>>s(2082), (eq(276,1),s(1376))>>s(2083), (eq(276,1),s(1377))>>s(2084), (eq(276,1),s(1378))>>s(2085), (eq(276,1),s(1379))>>s(2086), (eq(276,1),s(1380))>>s(2087), (eq(276,1),s(1381))>>s(2088), (eq(276,1),s(1382))>>s(2089), (eq(276,1),s(1383))>>s(2090), (eq(276,1),s(1384))>>s(2091), (eq(276,1),s(1385))>>s(2092), (eq(276,1),s(1386))>>s(2093), (eq(276,1),s(1387))>>s(2094)]

#### Simplifying cost structure of CE 276 
 * Joined equivalent variables [aux(231),s(2016)] into aux(231)
 * Joined equivalent variables [aux(232),s(1933),s(2017)] into aux(232)
 * Joined equivalent variables [aux(233),s(1926),s(2009)] into aux(233)
 * Joined equivalent variables [aux(234),s(1927),s(2010)] into aux(234)
 * Joined equivalent variables [aux(235),s(1928),s(2011)] into aux(235)
 * Joined equivalent variables [aux(236),s(1929),s(2012)] into aux(236)
 * Joined equivalent variables [aux(237),s(1930),s(2013)] into aux(237)
 * Joined equivalent variables [aux(238),s(1931),s(2014)] into aux(238)
 * Joined equivalent variables [aux(239),aux(231),s(1932)] into aux(239)
 * Joined equivalent variables [s(1935),s(2021)] into s(1935)
 * Joined equivalent variables [s(1936),s(2022)] into s(1936)
 * Joined equivalent variables [s(1937),s(2023)] into s(1937)
 * Joined equivalent variables [s(1938),s(2024)] into s(1938)
 * Joined equivalent variables [s(1939),s(2025)] into s(1939)
 * Joined equivalent variables [s(1940),s(2026)] into s(1940)
 * Joined equivalent variables [s(1941),s(2027)] into s(1941)
 * Joined equivalent variables [s(1942),s(2028)] into s(1942)
 * Joined equivalent variables [s(1995),s(2081)] into s(1995)
 * Joined equivalent variables [s(1998),s(2084)] into s(1998)
 * Joined equivalent variables [s(1934),s(2018)] into s(1934)
 * Joined equivalent variables [s(1990),s(2076)] into s(1990)
 * Joined equivalent variables [s(1991),s(2077)] into s(1991)
 * Joined equivalent variables [s(1945),s(2031)] into s(1945)
 * Joined equivalent variables [s(1946),s(2032)] into s(1946)
 * Joined equivalent variables [s(1947),s(2033)] into s(1947)
 * Joined equivalent variables [s(1948),s(2034)] into s(1948)
 * Joined equivalent variables [s(1949),s(2035)] into s(1949)
 * Joined equivalent variables [s(1950),s(2036)] into s(1950)
 * Joined equivalent variables [s(1951),s(2037)] into s(1951)
 * Joined equivalent variables [s(1956),s(2042)] into s(1956)
 * Joined equivalent variables [s(1957),s(2043)] into s(1957)
 * Joined equivalent variables [s(1958),s(2044)] into s(1958)
 * Joined equivalent variables [s(1959),s(2045)] into s(1959)
 * Joined equivalent variables [s(1960),s(2046)] into s(1960)
 * Joined equivalent variables [s(1996),s(2082)] into s(1996)
 * Joined equivalent variables [s(1997),s(2083)] into s(1997)
 * Joined equivalent variables [s(1943),s(2029)] into s(1943)
 * Joined equivalent variables [s(1974),s(2060)] into s(1974)
 * Joined equivalent variables [s(1972),s(2058)] into s(1972)
 * Joined equivalent variables [s(1978),s(2064)] into s(1978)
 * Joined equivalent variables [s(1979),s(2065)] into s(1979)
 * Joined equivalent variables [s(1944),s(2030)] into s(1944)
 * Joined equivalent variables [s(1953),s(2039)] into s(1953)
 * Joined equivalent variables [s(1973),s(2059)] into s(1973)
 * Joined equivalent variables [s(1971),s(2057)] into s(1971)
 * Joined equivalent variables [s(1952),s(2038)] into s(1952)
 * Joined equivalent variables [s(1961),s(2047)] into s(1961)
 * Joined equivalent variables [s(1962),s(2048)] into s(1962)
 * Joined equivalent variables [s(1963),s(2049)] into s(1963)
 * Joined equivalent variables [s(1964),s(2050)] into s(1964)
 * Joined equivalent variables [s(1965),s(2051)] into s(1965)
 * Joined equivalent variables [s(1966),s(2052)] into s(1966)
 * Joined equivalent variables [s(1967),s(2053)] into s(1967)
 * Joined equivalent variables [s(1992),s(2078)] into s(1992)
 * Joined equivalent variables [s(1975),s(2061)] into s(1975)
 * Joined equivalent variables [s(1955),s(2041)] into s(1955)
 * Joined equivalent variables [s(1954),s(2040)] into s(1954)
 * Joined equivalent variables [s(1980),s(2066)] into s(1980)
 * Joined equivalent variables [s(1981),s(2067)] into s(1981)
 * Joined equivalent variables [s(1982),s(2068)] into s(1982)
 * Joined equivalent variables [s(1983),s(2069)] into s(1983)
 * Joined equivalent variables [s(1984),s(2070)] into s(1984)
 * Joined equivalent variables [s(1985),s(2071)] into s(1985)
 * Joined equivalent variables [s(1986),s(2072)] into s(1986)
 * Joined equivalent variables [s(1999),s(2085)] into s(1999)
 * Joined equivalent variables [s(2000),s(2086)] into s(2000)
 * Joined equivalent variables [s(2002),s(2088)] into s(2002)
 * Joined equivalent variables [s(2003),s(2089)] into s(2003)
 * Joined equivalent variables [s(2004),s(2090)] into s(2004)
 * Joined equivalent variables [s(2005),s(2091)] into s(2005)
 * Joined equivalent variables [s(2001),s(2087)] into s(2001)
 * Joined equivalent variables [s(1969),s(2055)] into s(1969)
 * Joined equivalent variables [s(1968),s(2054)] into s(1968)
 * Joined equivalent variables [s(1970),s(2056)] into s(1970)
 * Joined equivalent variables [s(1977),s(2063)] into s(1977)
 * Joined equivalent variables [s(1976),s(2062)] into s(1976)
 * Joined equivalent variables [s(1994),s(2080)] into s(1994)
 * Joined equivalent variables [s(1993),s(2079)] into s(1993)
 * Joined equivalent variables [s(1988),s(2074)] into s(1988)
 * Joined equivalent variables [s(1987),s(2073)] into s(1987)
 * Joined equivalent variables [s(1989),s(2075)] into s(1989)
 * Joined equivalent variables [s(2007),s(2093)] into s(2007)
 * Joined equivalent variables [s(2006),s(2092)] into s(2006)
 * Joined equivalent variables [s(2008),s(2094)] into s(2008)
 * Renamed intermediate variables: 
[ (eq(274,1),s(1508))>>s(2095), (eq(274,1),s(1501))>>s(2096), (eq(274,1),s(1502))>>s(2097), (eq(274,1),s(1509))>>s(2098), (eq(274,1),s(1503))>>s(2099), (eq(274,1),s(1506))>>s(2100), (eq(274,1),s(1507))>>s(2101), (eq(274,1),s(1505))>>s(2102), (eq(274,1),aux(227))>>s(2103), (eq(274,1),s(1528))>>s(2104), (eq(274,1),s(1510))>>s(2105), (eq(274,1),s(1511))>>s(2106), (eq(274,1),s(1512))>>s(2107), (eq(274,1),s(1513))>>s(2108), (eq(274,1),s(1514))>>s(2109), (eq(274,1),s(1515))>>s(2110), (eq(274,1),s(1516))>>s(2111), (eq(274,1),s(1517))>>s(2112), (eq(274,1),s(1518))>>s(2113), (eq(274,1),s(1519))>>s(2114), (eq(274,1),s(1520))>>s(2115), (eq(274,1),s(1521))>>s(2116), (eq(274,1),s(1522))>>s(2117), (eq(274,1),s(1523))>>s(2118), (eq(274,1),s(1524))>>s(2119), (eq(274,1),s(1525))>>s(2120), (eq(274,1),s(1526))>>s(2121), (eq(274,1),s(1527))>>s(2122), (eq(274,1),s(1529))>>s(2123), (eq(274,1),s(1530))>>s(2124), (eq(274,1),s(1531))>>s(2125), (eq(274,1),s(1532))>>s(2126), (eq(274,1),s(1533))>>s(2127), (eq(274,1),s(1534))>>s(2128), (eq(274,1),s(1535))>>s(2129), (eq(274,1),s(1536))>>s(2130), (eq(274,1),s(1537))>>s(2131), (eq(274,1),s(1538))>>s(2132), (eq(274,1),s(1539))>>s(2133), (eq(274,1),s(1540))>>s(2134), (eq(274,1),s(1541))>>s(2135), (eq(274,1),s(1542))>>s(2136), (eq(274,1),s(1543))>>s(2137), (eq(274,1),s(1544))>>s(2138), (eq(274,1),s(1545))>>s(2139), (eq(274,1),s(1546))>>s(2140), (eq(274,1),s(1547))>>s(2141), (eq(274,1),s(1548))>>s(2142), (eq(274,1),s(1549))>>s(2143), (eq(274,1),s(1550))>>s(2144), (eq(274,1),s(1551))>>s(2145), (eq(274,1),s(1552))>>s(2146), (eq(274,1),s(1553))>>s(2147), (eq(274,1),s(1554))>>s(2148), (eq(274,1),s(1555))>>s(2149), (eq(274,1),s(1556))>>s(2150), (eq(274,1),s(1557))>>s(2151), (eq(274,1),s(1558))>>s(2152), (eq(274,1),s(1559))>>s(2153), (eq(274,1),s(1560))>>s(2154), (eq(274,1),s(1561))>>s(2155), (eq(274,1),s(1562))>>s(2156), (eq(274,1),s(1563))>>s(2157), (eq(274,1),s(1564))>>s(2158), (eq(274,1),s(1565))>>s(2159), (eq(274,1),s(1566))>>s(2160), (eq(274,1),s(1567))>>s(2161), (eq(274,1),s(1568))>>s(2162), (eq(274,1),s(1569))>>s(2163), (eq(274,1),s(1570))>>s(2164), (eq(274,1),s(1571))>>s(2165), (eq(274,1),s(1572))>>s(2166), (eq(274,1),s(1573))>>s(2167), (eq(274,1),s(1574))>>s(2168), (eq(274,1),s(1575))>>s(2169), (eq(274,1),s(1576))>>s(2170), (eq(274,1),s(1577))>>s(2171), (eq(274,1),s(1578))>>s(2172), (eq(274,1),s(1579))>>s(2173), (eq(274,1),s(1580))>>s(2174), (eq(274,1),s(1581))>>s(2175), (eq(274,1),s(1582))>>s(2176), (eq(274,1),s(1583))>>s(2177), (eq(274,1),s(1584))>>s(2178), (eq(274,1),s(1585))>>s(2179), (eq(274,1),s(1586))>>s(2180), (eq(274,1),s(1587))>>s(2181), (eq(274,1),s(1588))>>s(2182), (eq(274,1),s(1589))>>s(2183), (eq(274,1),s(1590))>>s(2184), (eq(274,1),s(1591))>>s(2185), (eq(274,1),s(1592))>>s(2186), (eq(274,1),s(1593))>>s(2187), (eq(274,1),s(1594))>>s(2188), (eq(274,1),s(1595))>>s(2189), (eq(274,1),s(1596))>>s(2190), (eq(274,1),s(1597))>>s(2191), (eq(274,1),s(1598))>>s(2192), (eq(274,1),s(1599))>>s(2193)]

#### Simplifying cost structure of CE 274 
 * Renamed intermediate variables: 
[ (eq(277,1),s(1399))>>s(2194), (eq(277,1),s(1400))>>s(2195), (eq(277,1),s(1401))>>s(2196), (eq(277,1),s(1402))>>s(2197), (eq(277,1),s(1395))>>s(2198), (eq(277,1),s(1396))>>s(2199), (eq(277,1),s(1403))>>s(2200), (eq(277,1),s(1496))>>s(2201), (eq(277,1),aux(225))>>s(2202), (eq(277,1),aux(226))>>s(2203), (eq(277,1),s(1422))>>s(2204), (eq(277,1),s(1499))>>s(2205), (eq(277,1),s(1500))>>s(2206), (eq(277,1),s(1404))>>s(2207), (eq(277,1),s(1405))>>s(2208), (eq(277,1),s(1406))>>s(2209), (eq(277,1),s(1407))>>s(2210), (eq(277,1),s(1408))>>s(2211), (eq(277,1),s(1409))>>s(2212), (eq(277,1),s(1410))>>s(2213), (eq(277,1),s(1411))>>s(2214), (eq(277,1),s(1412))>>s(2215), (eq(277,1),s(1413))>>s(2216), (eq(277,1),s(1414))>>s(2217), (eq(277,1),s(1415))>>s(2218), (eq(277,1),s(1416))>>s(2219), (eq(277,1),s(1417))>>s(2220), (eq(277,1),s(1418))>>s(2221), (eq(277,1),s(1419))>>s(2222), (eq(277,1),s(1420))>>s(2223), (eq(277,1),s(1421))>>s(2224), (eq(277,1),s(1423))>>s(2225), (eq(277,1),s(1424))>>s(2226), (eq(277,1),s(1425))>>s(2227), (eq(277,1),s(1426))>>s(2228), (eq(277,1),s(1427))>>s(2229), (eq(277,1),s(1428))>>s(2230), (eq(277,1),s(1429))>>s(2231), (eq(277,1),s(1430))>>s(2232), (eq(277,1),s(1431))>>s(2233), (eq(277,1),s(1432))>>s(2234), (eq(277,1),s(1433))>>s(2235), (eq(277,1),s(1434))>>s(2236), (eq(277,1),s(1435))>>s(2237), (eq(277,1),s(1436))>>s(2238), (eq(277,1),s(1437))>>s(2239), (eq(277,1),s(1438))>>s(2240), (eq(277,1),s(1439))>>s(2241), (eq(277,1),s(1440))>>s(2242), (eq(277,1),s(1441))>>s(2243), (eq(277,1),s(1442))>>s(2244), (eq(277,1),s(1443))>>s(2245), (eq(277,1),s(1444))>>s(2246), (eq(277,1),s(1445))>>s(2247), (eq(277,1),s(1446))>>s(2248), (eq(277,1),s(1447))>>s(2249), (eq(277,1),s(1448))>>s(2250), (eq(277,1),s(1449))>>s(2251), (eq(277,1),s(1450))>>s(2252), (eq(277,1),s(1451))>>s(2253), (eq(277,1),s(1452))>>s(2254), (eq(277,1),s(1453))>>s(2255), (eq(277,1),s(1454))>>s(2256), (eq(277,1),s(1455))>>s(2257), (eq(277,1),s(1456))>>s(2258), (eq(277,1),s(1457))>>s(2259), (eq(277,1),s(1458))>>s(2260), (eq(277,1),s(1459))>>s(2261), (eq(277,1),s(1460))>>s(2262), (eq(277,1),s(1461))>>s(2263), (eq(277,1),s(1462))>>s(2264), (eq(277,1),s(1463))>>s(2265), (eq(277,1),s(1464))>>s(2266), (eq(277,1),s(1465))>>s(2267), (eq(277,1),s(1466))>>s(2268), (eq(277,1),s(1467))>>s(2269), (eq(277,1),s(1468))>>s(2270), (eq(277,1),s(1469))>>s(2271), (eq(277,1),s(1470))>>s(2272), (eq(277,1),s(1471))>>s(2273), (eq(277,1),s(1472))>>s(2274), (eq(277,1),s(1473))>>s(2275), (eq(277,1),s(1474))>>s(2276), (eq(277,1),s(1475))>>s(2277), (eq(277,1),s(1476))>>s(2278), (eq(277,1),s(1477))>>s(2279), (eq(277,1),s(1478))>>s(2280), (eq(277,1),s(1479))>>s(2281), (eq(277,1),s(1480))>>s(2282), (eq(277,1),s(1481))>>s(2283), (eq(277,1),s(1482))>>s(2284), (eq(277,1),s(1483))>>s(2285), (eq(277,1),s(1484))>>s(2286), (eq(277,1),s(1485))>>s(2287), (eq(277,1),s(1486))>>s(2288), (eq(277,1),s(1487))>>s(2289), (eq(277,1),s(1488))>>s(2290), (eq(277,1),s(1489))>>s(2291), (eq(277,1),s(1490))>>s(2292), (eq(277,1),s(1491))>>s(2293), (eq(277,1),s(1492))>>s(2294), (eq(277,1),s(1493))>>s(2295)]

#### Simplifying cost structure of CE 277 
 * Joined equivalent variables [aux(240),s(2200)] into aux(240)
 * Joined equivalent variables [aux(241),s(2103),s(2203)] into aux(241)
 * Joined equivalent variables [aux(242),s(2102),s(2194)] into aux(242)
 * Joined equivalent variables [aux(243),s(2100),s(2195)] into aux(243)
 * Joined equivalent variables [aux(244),s(2101),s(2196)] into aux(244)
 * Joined equivalent variables [aux(245),s(2095),s(2197)] into aux(245)
 * Joined equivalent variables [aux(246),s(2096),s(2198)] into aux(246)
 * Joined equivalent variables [aux(247),s(2097),s(2199)] into aux(247)
 * Joined equivalent variables [aux(248),aux(240),s(2098)] into aux(248)
 * Joined equivalent variables [aux(249),s(2099),s(2202)] into aux(249)
 * Joined equivalent variables [s(2108),s(2210)] into s(2108)
 * Joined equivalent variables [s(2109),s(2211)] into s(2109)
 * Joined equivalent variables [s(2110),s(2212)] into s(2110)
 * Joined equivalent variables [s(2111),s(2213)] into s(2111)
 * Joined equivalent variables [s(2112),s(2214)] into s(2112)
 * Joined equivalent variables [s(2123),s(2225)] into s(2123)
 * Joined equivalent variables [s(2124),s(2226)] into s(2124)
 * Joined equivalent variables [s(2125),s(2227)] into s(2125)
 * Joined equivalent variables [s(2126),s(2228)] into s(2126)
 * Joined equivalent variables [s(2127),s(2229)] into s(2127)
 * Joined equivalent variables [s(2128),s(2230)] into s(2128)
 * Joined equivalent variables [s(2129),s(2231)] into s(2129)
 * Joined equivalent variables [s(2104),s(2204)] into s(2104)
 * Joined equivalent variables [s(2105),s(2207)] into s(2105)
 * Joined equivalent variables [s(2177),s(2279)] into s(2177)
 * Joined equivalent variables [s(2178),s(2280)] into s(2178)
 * Joined equivalent variables [s(2116),s(2218)] into s(2116)
 * Joined equivalent variables [s(2117),s(2219)] into s(2117)
 * Joined equivalent variables [s(2118),s(2220)] into s(2118)
 * Joined equivalent variables [s(2119),s(2221)] into s(2119)
 * Joined equivalent variables [s(2132),s(2234)] into s(2132)
 * Joined equivalent variables [s(2133),s(2235)] into s(2133)
 * Joined equivalent variables [s(2134),s(2236)] into s(2134)
 * Joined equivalent variables [s(2135),s(2237)] into s(2135)
 * Joined equivalent variables [s(2136),s(2238)] into s(2136)
 * Joined equivalent variables [s(2137),s(2239)] into s(2137)
 * Joined equivalent variables [s(2138),s(2240)] into s(2138)
 * Joined equivalent variables [s(2143),s(2245)] into s(2143)
 * Joined equivalent variables [s(2144),s(2246)] into s(2144)
 * Joined equivalent variables [s(2145),s(2247)] into s(2145)
 * Joined equivalent variables [s(2146),s(2248)] into s(2146)
 * Joined equivalent variables [s(2147),s(2249)] into s(2147)
 * Joined equivalent variables [s(2182),s(2284)] into s(2182)
 * Joined equivalent variables [s(2183),s(2285)] into s(2183)
 * Joined equivalent variables [s(2113),s(2215)] into s(2113)
 * Joined equivalent variables [s(2114),s(2216)] into s(2114)
 * Joined equivalent variables [s(2115),s(2217)] into s(2115)
 * Joined equivalent variables [s(2130),s(2232)] into s(2130)
 * Joined equivalent variables [s(2161),s(2263)] into s(2161)
 * Joined equivalent variables [s(2159),s(2261)] into s(2159)
 * Joined equivalent variables [s(2165),s(2267)] into s(2165)
 * Joined equivalent variables [s(2166),s(2268)] into s(2166)
 * Joined equivalent variables [s(2107),s(2209)] into s(2107)
 * Joined equivalent variables [s(2106),s(2208)] into s(2106)
 * Joined equivalent variables [s(2131),s(2233)] into s(2131)
 * Joined equivalent variables [s(2140),s(2242)] into s(2140)
 * Joined equivalent variables [s(2160),s(2262)] into s(2160)
 * Joined equivalent variables [s(2158),s(2260)] into s(2158)
 * Joined equivalent variables [s(2139),s(2241)] into s(2139)
 * Joined equivalent variables [s(2121),s(2223)] into s(2121)
 * Joined equivalent variables [s(2122),s(2224)] into s(2122)
 * Joined equivalent variables [s(2148),s(2250)] into s(2148)
 * Joined equivalent variables [s(2149),s(2251)] into s(2149)
 * Joined equivalent variables [s(2150),s(2252)] into s(2150)
 * Joined equivalent variables [s(2151),s(2253)] into s(2151)
 * Joined equivalent variables [s(2152),s(2254)] into s(2152)
 * Joined equivalent variables [s(2153),s(2255)] into s(2153)
 * Joined equivalent variables [s(2154),s(2256)] into s(2154)
 * Joined equivalent variables [s(2120),s(2222)] into s(2120)
 * Joined equivalent variables [s(2179),s(2281)] into s(2179)
 * Joined equivalent variables [s(2162),s(2264)] into s(2162)
 * Joined equivalent variables [s(2142),s(2244)] into s(2142)
 * Joined equivalent variables [s(2141),s(2243)] into s(2141)
 * Joined equivalent variables [s(2167),s(2269)] into s(2167)
 * Joined equivalent variables [s(2168),s(2270)] into s(2168)
 * Joined equivalent variables [s(2169),s(2271)] into s(2169)
 * Joined equivalent variables [s(2170),s(2272)] into s(2170)
 * Joined equivalent variables [s(2171),s(2273)] into s(2171)
 * Joined equivalent variables [s(2172),s(2274)] into s(2172)
 * Joined equivalent variables [s(2173),s(2275)] into s(2173)
 * Joined equivalent variables [s(2184),s(2286)] into s(2184)
 * Joined equivalent variables [s(2185),s(2287)] into s(2185)
 * Joined equivalent variables [s(2187),s(2289)] into s(2187)
 * Joined equivalent variables [s(2188),s(2290)] into s(2188)
 * Joined equivalent variables [s(2189),s(2291)] into s(2189)
 * Joined equivalent variables [s(2190),s(2292)] into s(2190)
 * Joined equivalent variables [s(2186),s(2288)] into s(2186)
 * Joined equivalent variables [s(2156),s(2258)] into s(2156)
 * Joined equivalent variables [s(2155),s(2257)] into s(2155)
 * Joined equivalent variables [s(2157),s(2259)] into s(2157)
 * Joined equivalent variables [s(2164),s(2266)] into s(2164)
 * Joined equivalent variables [s(2163),s(2265)] into s(2163)
 * Joined equivalent variables [s(2181),s(2283)] into s(2181)
 * Joined equivalent variables [s(2180),s(2282)] into s(2180)
 * Joined equivalent variables [s(2175),s(2277)] into s(2175)
 * Joined equivalent variables [s(2174),s(2276)] into s(2174)
 * Joined equivalent variables [s(2176),s(2278)] into s(2176)
 * Joined equivalent variables [s(2192),s(2294)] into s(2192)
 * Joined equivalent variables [s(2191),s(2293)] into s(2191)
 * Joined equivalent variables [s(2193),s(2295)] into s(2193)
 * Renamed intermediate variables: 
[ (eq(272,1),s(1119))>>s(2296), (eq(272,1),s(1120))>>s(2297), (eq(272,1),s(1121))>>s(2298), (eq(272,1),s(1122))>>s(2299), (eq(272,1),s(1123))>>s(2300), (eq(272,1),s(1124))>>s(2301), (eq(272,1),s(1125))>>s(2302), (eq(272,1),aux(221))>>s(2303), (eq(272,1),s(1127))>>s(2304), (eq(272,1),s(1128))>>s(2305), (eq(272,1),s(1129))>>s(2306), (eq(272,1),s(1130))>>s(2307), (eq(272,1),s(1131))>>s(2308), (eq(272,1),s(1132))>>s(2309), (eq(272,1),s(1133))>>s(2310), (eq(272,1),s(1134))>>s(2311), (eq(272,1),s(1135))>>s(2312), (eq(272,1),s(1136))>>s(2313), (eq(272,1),s(1137))>>s(2314), (eq(272,1),s(1138))>>s(2315), (eq(272,1),s(1139))>>s(2316), (eq(272,1),s(1140))>>s(2317), (eq(272,1),s(1141))>>s(2318), (eq(272,1),s(1142))>>s(2319), (eq(272,1),s(1143))>>s(2320), (eq(272,1),s(1144))>>s(2321), (eq(272,1),s(1145))>>s(2322), (eq(272,1),s(1146))>>s(2323), (eq(272,1),s(1147))>>s(2324), (eq(272,1),s(1148))>>s(2325), (eq(272,1),s(1149))>>s(2326), (eq(272,1),s(1150))>>s(2327), (eq(272,1),s(1151))>>s(2328), (eq(272,1),s(1152))>>s(2329), (eq(272,1),s(1153))>>s(2330), (eq(272,1),s(1154))>>s(2331), (eq(272,1),s(1155))>>s(2332), (eq(272,1),s(1156))>>s(2333), (eq(272,1),s(1157))>>s(2334), (eq(272,1),s(1158))>>s(2335), (eq(272,1),s(1159))>>s(2336), (eq(272,1),s(1160))>>s(2337), (eq(272,1),s(1161))>>s(2338), (eq(272,1),s(1162))>>s(2339), (eq(272,1),s(1163))>>s(2340), (eq(272,1),s(1164))>>s(2341), (eq(272,1),s(1165))>>s(2342), (eq(272,1),s(1166))>>s(2343), (eq(272,1),s(1167))>>s(2344), (eq(272,1),s(1168))>>s(2345), (eq(272,1),s(1169))>>s(2346), (eq(272,1),s(1170))>>s(2347), (eq(272,1),s(1171))>>s(2348), (eq(272,1),s(1172))>>s(2349), (eq(272,1),s(1173))>>s(2350), (eq(272,1),s(1174))>>s(2351), (eq(272,1),s(1175))>>s(2352), (eq(272,1),s(1176))>>s(2353), (eq(272,1),s(1177))>>s(2354), (eq(272,1),s(1178))>>s(2355), (eq(272,1),s(1179))>>s(2356), (eq(272,1),s(1180))>>s(2357), (eq(272,1),s(1181))>>s(2358), (eq(272,1),s(1182))>>s(2359), (eq(272,1),s(1183))>>s(2360), (eq(272,1),s(1184))>>s(2361), (eq(272,1),s(1185))>>s(2362), (eq(272,1),s(1186))>>s(2363), (eq(272,1),s(1187))>>s(2364), (eq(272,1),s(1188))>>s(2365), (eq(272,1),s(1189))>>s(2366), (eq(272,1),s(1190))>>s(2367), (eq(272,1),s(1191))>>s(2368), (eq(272,1),s(1192))>>s(2369), (eq(272,1),s(1193))>>s(2370), (eq(272,1),s(1194))>>s(2371), (eq(272,1),s(1195))>>s(2372), (eq(272,1),s(1196))>>s(2373), (eq(272,1),s(1197))>>s(2374), (eq(272,1),s(1198))>>s(2375), (eq(272,1),s(1199))>>s(2376), (eq(272,1),s(1200))>>s(2377), (eq(272,1),s(1201))>>s(2378)]

#### Simplifying cost structure of CE 272 
 * Renamed intermediate variables: 
[ (eq(278,1),s(1688))>>s(2379), (eq(278,1),s(1689))>>s(2380), (eq(278,1),s(1690))>>s(2381), (eq(278,1),s(1691))>>s(2382), (eq(278,1),s(1686))>>s(2383), (eq(278,1),s(1687))>>s(2384), (eq(278,1),s(1768))>>s(2385), (eq(278,1),s(1685))>>s(2386), (eq(278,1),aux(229))>>s(2387), (eq(278,1),s(1693))>>s(2388), (eq(278,1),s(1771))>>s(2389), (eq(278,1),s(1694))>>s(2390), (eq(278,1),s(1695))>>s(2391), (eq(278,1),s(1696))>>s(2392), (eq(278,1),s(1697))>>s(2393), (eq(278,1),s(1698))>>s(2394), (eq(278,1),s(1699))>>s(2395), (eq(278,1),s(1700))>>s(2396), (eq(278,1),s(1701))>>s(2397), (eq(278,1),s(1702))>>s(2398), (eq(278,1),s(1703))>>s(2399), (eq(278,1),s(1704))>>s(2400), (eq(278,1),s(1705))>>s(2401), (eq(278,1),s(1706))>>s(2402), (eq(278,1),s(1707))>>s(2403), (eq(278,1),s(1708))>>s(2404), (eq(278,1),s(1709))>>s(2405), (eq(278,1),s(1710))>>s(2406), (eq(278,1),s(1711))>>s(2407), (eq(278,1),s(1712))>>s(2408), (eq(278,1),s(1713))>>s(2409), (eq(278,1),s(1714))>>s(2410), (eq(278,1),s(1715))>>s(2411), (eq(278,1),s(1716))>>s(2412), (eq(278,1),s(1717))>>s(2413), (eq(278,1),s(1718))>>s(2414), (eq(278,1),s(1719))>>s(2415), (eq(278,1),s(1720))>>s(2416), (eq(278,1),s(1721))>>s(2417), (eq(278,1),s(1722))>>s(2418), (eq(278,1),s(1723))>>s(2419), (eq(278,1),s(1724))>>s(2420), (eq(278,1),s(1725))>>s(2421), (eq(278,1),s(1726))>>s(2422), (eq(278,1),s(1727))>>s(2423), (eq(278,1),s(1728))>>s(2424), (eq(278,1),s(1729))>>s(2425), (eq(278,1),s(1730))>>s(2426), (eq(278,1),s(1731))>>s(2427), (eq(278,1),s(1732))>>s(2428), (eq(278,1),s(1733))>>s(2429), (eq(278,1),s(1734))>>s(2430), (eq(278,1),s(1735))>>s(2431), (eq(278,1),s(1736))>>s(2432), (eq(278,1),s(1737))>>s(2433), (eq(278,1),s(1738))>>s(2434), (eq(278,1),s(1739))>>s(2435), (eq(278,1),s(1740))>>s(2436), (eq(278,1),s(1741))>>s(2437), (eq(278,1),s(1742))>>s(2438), (eq(278,1),s(1743))>>s(2439), (eq(278,1),s(1744))>>s(2440), (eq(278,1),s(1745))>>s(2441), (eq(278,1),s(1746))>>s(2442), (eq(278,1),s(1747))>>s(2443), (eq(278,1),s(1748))>>s(2444), (eq(278,1),s(1749))>>s(2445), (eq(278,1),s(1750))>>s(2446), (eq(278,1),s(1751))>>s(2447), (eq(278,1),s(1752))>>s(2448), (eq(278,1),s(1753))>>s(2449), (eq(278,1),s(1754))>>s(2450), (eq(278,1),s(1755))>>s(2451), (eq(278,1),s(1756))>>s(2452), (eq(278,1),s(1757))>>s(2453), (eq(278,1),s(1758))>>s(2454), (eq(278,1),s(1759))>>s(2455), (eq(278,1),s(1760))>>s(2456), (eq(278,1),s(1761))>>s(2457), (eq(278,1),s(1762))>>s(2458), (eq(278,1),s(1763))>>s(2459), (eq(278,1),s(1764))>>s(2460), (eq(278,1),s(1765))>>s(2461), (eq(278,1),s(1766))>>s(2462), (eq(278,1),s(1767))>>s(2463)]

#### Simplifying cost structure of CE 278 
 * Joined equivalent variables [aux(250),s(2382)] into aux(250)
 * Joined equivalent variables [aux(251),s(2303),s(2387)] into aux(251)
 * Joined equivalent variables [aux(252),s(2296),s(2386)] into aux(252)
 * Joined equivalent variables [aux(253),s(2297),s(2383)] into aux(253)
 * Joined equivalent variables [aux(254),s(2298),s(2384)] into aux(254)
 * Joined equivalent variables [aux(255),s(2299),s(2379)] into aux(255)
 * Joined equivalent variables [aux(256),s(2300),s(2380)] into aux(256)
 * Joined equivalent variables [aux(257),s(2301),s(2381)] into aux(257)
 * Joined equivalent variables [aux(258),aux(250),s(2302)] into aux(258)
 * Joined equivalent variables [s(2305),s(2390)] into s(2305)
 * Joined equivalent variables [s(2306),s(2391)] into s(2306)
 * Joined equivalent variables [s(2307),s(2392)] into s(2307)
 * Joined equivalent variables [s(2308),s(2393)] into s(2308)
 * Joined equivalent variables [s(2309),s(2394)] into s(2309)
 * Joined equivalent variables [s(2310),s(2395)] into s(2310)
 * Joined equivalent variables [s(2311),s(2396)] into s(2311)
 * Joined equivalent variables [s(2312),s(2397)] into s(2312)
 * Joined equivalent variables [s(2365),s(2450)] into s(2365)
 * Joined equivalent variables [s(2368),s(2453)] into s(2368)
 * Joined equivalent variables [s(2304),s(2388)] into s(2304)
 * Joined equivalent variables [s(2360),s(2445)] into s(2360)
 * Joined equivalent variables [s(2361),s(2446)] into s(2361)
 * Joined equivalent variables [s(2315),s(2400)] into s(2315)
 * Joined equivalent variables [s(2316),s(2401)] into s(2316)
 * Joined equivalent variables [s(2317),s(2402)] into s(2317)
 * Joined equivalent variables [s(2318),s(2403)] into s(2318)
 * Joined equivalent variables [s(2319),s(2404)] into s(2319)
 * Joined equivalent variables [s(2320),s(2405)] into s(2320)
 * Joined equivalent variables [s(2321),s(2406)] into s(2321)
 * Joined equivalent variables [s(2326),s(2411)] into s(2326)
 * Joined equivalent variables [s(2327),s(2412)] into s(2327)
 * Joined equivalent variables [s(2328),s(2413)] into s(2328)
 * Joined equivalent variables [s(2329),s(2414)] into s(2329)
 * Joined equivalent variables [s(2330),s(2415)] into s(2330)
 * Joined equivalent variables [s(2366),s(2451)] into s(2366)
 * Joined equivalent variables [s(2367),s(2452)] into s(2367)
 * Joined equivalent variables [s(2313),s(2398)] into s(2313)
 * Joined equivalent variables [s(2344),s(2429)] into s(2344)
 * Joined equivalent variables [s(2342),s(2427)] into s(2342)
 * Joined equivalent variables [s(2348),s(2433)] into s(2348)
 * Joined equivalent variables [s(2349),s(2434)] into s(2349)
 * Joined equivalent variables [s(2314),s(2399)] into s(2314)
 * Joined equivalent variables [s(2323),s(2408)] into s(2323)
 * Joined equivalent variables [s(2343),s(2428)] into s(2343)
 * Joined equivalent variables [s(2341),s(2426)] into s(2341)
 * Joined equivalent variables [s(2322),s(2407)] into s(2322)
 * Joined equivalent variables [s(2331),s(2416)] into s(2331)
 * Joined equivalent variables [s(2332),s(2417)] into s(2332)
 * Joined equivalent variables [s(2333),s(2418)] into s(2333)
 * Joined equivalent variables [s(2334),s(2419)] into s(2334)
 * Joined equivalent variables [s(2335),s(2420)] into s(2335)
 * Joined equivalent variables [s(2336),s(2421)] into s(2336)
 * Joined equivalent variables [s(2337),s(2422)] into s(2337)
 * Joined equivalent variables [s(2362),s(2447)] into s(2362)
 * Joined equivalent variables [s(2345),s(2430)] into s(2345)
 * Joined equivalent variables [s(2325),s(2410)] into s(2325)
 * Joined equivalent variables [s(2324),s(2409)] into s(2324)
 * Joined equivalent variables [s(2350),s(2435)] into s(2350)
 * Joined equivalent variables [s(2351),s(2436)] into s(2351)
 * Joined equivalent variables [s(2352),s(2437)] into s(2352)
 * Joined equivalent variables [s(2353),s(2438)] into s(2353)
 * Joined equivalent variables [s(2354),s(2439)] into s(2354)
 * Joined equivalent variables [s(2355),s(2440)] into s(2355)
 * Joined equivalent variables [s(2356),s(2441)] into s(2356)
 * Joined equivalent variables [s(2369),s(2454)] into s(2369)
 * Joined equivalent variables [s(2370),s(2455)] into s(2370)
 * Joined equivalent variables [s(2372),s(2457)] into s(2372)
 * Joined equivalent variables [s(2373),s(2458)] into s(2373)
 * Joined equivalent variables [s(2374),s(2459)] into s(2374)
 * Joined equivalent variables [s(2375),s(2460)] into s(2375)
 * Joined equivalent variables [s(2371),s(2456)] into s(2371)
 * Joined equivalent variables [s(2339),s(2424)] into s(2339)
 * Joined equivalent variables [s(2338),s(2423)] into s(2338)
 * Joined equivalent variables [s(2340),s(2425)] into s(2340)
 * Joined equivalent variables [s(2347),s(2432)] into s(2347)
 * Joined equivalent variables [s(2346),s(2431)] into s(2346)
 * Joined equivalent variables [s(2364),s(2449)] into s(2364)
 * Joined equivalent variables [s(2363),s(2448)] into s(2363)
 * Joined equivalent variables [s(2358),s(2443)] into s(2358)
 * Joined equivalent variables [s(2357),s(2442)] into s(2357)
 * Joined equivalent variables [s(2359),s(2444)] into s(2359)
 * Joined equivalent variables [s(2377),s(2462)] into s(2377)
 * Joined equivalent variables [s(2376),s(2461)] into s(2376)
 * Joined equivalent variables [s(2378),s(2463)] into s(2378)
 * Renamed intermediate variables: 
[ (eq(273,1),s(1211))>>s(2464), (eq(273,1),s(1204))>>s(2465), (eq(273,1),s(1205))>>s(2466), (eq(273,1),s(1212))>>s(2467), (eq(273,1),s(1206))>>s(2468), (eq(273,1),s(1209))>>s(2469), (eq(273,1),s(1210))>>s(2470), (eq(273,1),s(1208))>>s(2471), (eq(273,1),aux(222))>>s(2472), (eq(273,1),s(1231))>>s(2473), (eq(273,1),s(1213))>>s(2474), (eq(273,1),s(1214))>>s(2475), (eq(273,1),s(1215))>>s(2476), (eq(273,1),s(1216))>>s(2477), (eq(273,1),s(1217))>>s(2478), (eq(273,1),s(1218))>>s(2479), (eq(273,1),s(1219))>>s(2480), (eq(273,1),s(1220))>>s(2481), (eq(273,1),s(1221))>>s(2482), (eq(273,1),s(1222))>>s(2483), (eq(273,1),s(1223))>>s(2484), (eq(273,1),s(1224))>>s(2485), (eq(273,1),s(1225))>>s(2486), (eq(273,1),s(1226))>>s(2487), (eq(273,1),s(1227))>>s(2488), (eq(273,1),s(1228))>>s(2489), (eq(273,1),s(1229))>>s(2490), (eq(273,1),s(1230))>>s(2491), (eq(273,1),s(1232))>>s(2492), (eq(273,1),s(1233))>>s(2493), (eq(273,1),s(1234))>>s(2494), (eq(273,1),s(1235))>>s(2495), (eq(273,1),s(1236))>>s(2496), (eq(273,1),s(1237))>>s(2497), (eq(273,1),s(1238))>>s(2498), (eq(273,1),s(1239))>>s(2499), (eq(273,1),s(1240))>>s(2500), (eq(273,1),s(1241))>>s(2501), (eq(273,1),s(1242))>>s(2502), (eq(273,1),s(1243))>>s(2503), (eq(273,1),s(1244))>>s(2504), (eq(273,1),s(1245))>>s(2505), (eq(273,1),s(1246))>>s(2506), (eq(273,1),s(1247))>>s(2507), (eq(273,1),s(1248))>>s(2508), (eq(273,1),s(1249))>>s(2509), (eq(273,1),s(1250))>>s(2510), (eq(273,1),s(1251))>>s(2511), (eq(273,1),s(1252))>>s(2512), (eq(273,1),s(1253))>>s(2513), (eq(273,1),s(1254))>>s(2514), (eq(273,1),s(1255))>>s(2515), (eq(273,1),s(1256))>>s(2516), (eq(273,1),s(1257))>>s(2517), (eq(273,1),s(1258))>>s(2518), (eq(273,1),s(1259))>>s(2519), (eq(273,1),s(1260))>>s(2520), (eq(273,1),s(1261))>>s(2521), (eq(273,1),s(1262))>>s(2522), (eq(273,1),s(1263))>>s(2523), (eq(273,1),s(1264))>>s(2524), (eq(273,1),s(1265))>>s(2525), (eq(273,1),s(1266))>>s(2526), (eq(273,1),s(1267))>>s(2527), (eq(273,1),s(1268))>>s(2528), (eq(273,1),s(1269))>>s(2529), (eq(273,1),s(1270))>>s(2530), (eq(273,1),s(1271))>>s(2531), (eq(273,1),s(1272))>>s(2532), (eq(273,1),s(1273))>>s(2533), (eq(273,1),s(1274))>>s(2534), (eq(273,1),s(1275))>>s(2535), (eq(273,1),s(1276))>>s(2536), (eq(273,1),s(1277))>>s(2537), (eq(273,1),s(1278))>>s(2538), (eq(273,1),s(1279))>>s(2539), (eq(273,1),s(1280))>>s(2540), (eq(273,1),s(1281))>>s(2541), (eq(273,1),s(1282))>>s(2542), (eq(273,1),s(1283))>>s(2543), (eq(273,1),s(1284))>>s(2544), (eq(273,1),s(1285))>>s(2545), (eq(273,1),s(1286))>>s(2546), (eq(273,1),s(1287))>>s(2547), (eq(273,1),s(1288))>>s(2548), (eq(273,1),s(1289))>>s(2549), (eq(273,1),s(1290))>>s(2550), (eq(273,1),s(1291))>>s(2551), (eq(273,1),s(1292))>>s(2552), (eq(273,1),s(1293))>>s(2553), (eq(273,1),s(1294))>>s(2554), (eq(273,1),s(1295))>>s(2555), (eq(273,1),s(1296))>>s(2556), (eq(273,1),s(1297))>>s(2557), (eq(273,1),s(1298))>>s(2558), (eq(273,1),s(1299))>>s(2559), (eq(273,1),s(1300))>>s(2560), (eq(273,1),s(1301))>>s(2561), (eq(273,1),s(1302))>>s(2562)]

#### Simplifying cost structure of CE 273 
 * Renamed intermediate variables: 
[ (eq(279,1),s(1779))>>s(2563), (eq(279,1),s(1772))>>s(2564), (eq(279,1),s(1773))>>s(2565), (eq(279,1),s(1780))>>s(2566), (eq(279,1),s(1774))>>s(2567), (eq(279,1),s(1777))>>s(2568), (eq(279,1),s(1778))>>s(2569), (eq(279,1),s(1871))>>s(2570), (eq(279,1),s(1776))>>s(2571), (eq(279,1),aux(230))>>s(2572), (eq(279,1),s(1799))>>s(2573), (eq(279,1),s(1874))>>s(2574), (eq(279,1),s(1781))>>s(2575), (eq(279,1),s(1782))>>s(2576), (eq(279,1),s(1783))>>s(2577), (eq(279,1),s(1784))>>s(2578), (eq(279,1),s(1785))>>s(2579), (eq(279,1),s(1786))>>s(2580), (eq(279,1),s(1787))>>s(2581), (eq(279,1),s(1788))>>s(2582), (eq(279,1),s(1789))>>s(2583), (eq(279,1),s(1790))>>s(2584), (eq(279,1),s(1791))>>s(2585), (eq(279,1),s(1792))>>s(2586), (eq(279,1),s(1793))>>s(2587), (eq(279,1),s(1794))>>s(2588), (eq(279,1),s(1795))>>s(2589), (eq(279,1),s(1796))>>s(2590), (eq(279,1),s(1797))>>s(2591), (eq(279,1),s(1798))>>s(2592), (eq(279,1),s(1800))>>s(2593), (eq(279,1),s(1801))>>s(2594), (eq(279,1),s(1802))>>s(2595), (eq(279,1),s(1803))>>s(2596), (eq(279,1),s(1804))>>s(2597), (eq(279,1),s(1805))>>s(2598), (eq(279,1),s(1806))>>s(2599), (eq(279,1),s(1807))>>s(2600), (eq(279,1),s(1808))>>s(2601), (eq(279,1),s(1809))>>s(2602), (eq(279,1),s(1810))>>s(2603), (eq(279,1),s(1811))>>s(2604), (eq(279,1),s(1812))>>s(2605), (eq(279,1),s(1813))>>s(2606), (eq(279,1),s(1814))>>s(2607), (eq(279,1),s(1815))>>s(2608), (eq(279,1),s(1816))>>s(2609), (eq(279,1),s(1817))>>s(2610), (eq(279,1),s(1818))>>s(2611), (eq(279,1),s(1819))>>s(2612), (eq(279,1),s(1820))>>s(2613), (eq(279,1),s(1821))>>s(2614), (eq(279,1),s(1822))>>s(2615), (eq(279,1),s(1823))>>s(2616), (eq(279,1),s(1824))>>s(2617), (eq(279,1),s(1825))>>s(2618), (eq(279,1),s(1826))>>s(2619), (eq(279,1),s(1827))>>s(2620), (eq(279,1),s(1828))>>s(2621), (eq(279,1),s(1829))>>s(2622), (eq(279,1),s(1830))>>s(2623), (eq(279,1),s(1831))>>s(2624), (eq(279,1),s(1832))>>s(2625), (eq(279,1),s(1833))>>s(2626), (eq(279,1),s(1834))>>s(2627), (eq(279,1),s(1835))>>s(2628), (eq(279,1),s(1836))>>s(2629), (eq(279,1),s(1837))>>s(2630), (eq(279,1),s(1838))>>s(2631), (eq(279,1),s(1839))>>s(2632), (eq(279,1),s(1840))>>s(2633), (eq(279,1),s(1841))>>s(2634), (eq(279,1),s(1842))>>s(2635), (eq(279,1),s(1843))>>s(2636), (eq(279,1),s(1844))>>s(2637), (eq(279,1),s(1845))>>s(2638), (eq(279,1),s(1846))>>s(2639), (eq(279,1),s(1847))>>s(2640), (eq(279,1),s(1848))>>s(2641), (eq(279,1),s(1849))>>s(2642), (eq(279,1),s(1850))>>s(2643), (eq(279,1),s(1851))>>s(2644), (eq(279,1),s(1852))>>s(2645), (eq(279,1),s(1853))>>s(2646), (eq(279,1),s(1854))>>s(2647), (eq(279,1),s(1855))>>s(2648), (eq(279,1),s(1856))>>s(2649), (eq(279,1),s(1857))>>s(2650), (eq(279,1),s(1858))>>s(2651), (eq(279,1),s(1859))>>s(2652), (eq(279,1),s(1860))>>s(2653), (eq(279,1),s(1861))>>s(2654), (eq(279,1),s(1862))>>s(2655), (eq(279,1),s(1863))>>s(2656), (eq(279,1),s(1864))>>s(2657), (eq(279,1),s(1865))>>s(2658), (eq(279,1),s(1866))>>s(2659), (eq(279,1),s(1867))>>s(2660), (eq(279,1),s(1868))>>s(2661), (eq(279,1),s(1869))>>s(2662), (eq(279,1),s(1870))>>s(2663)]

#### Simplifying cost structure of CE 279 
 * Joined equivalent variables [aux(259),s(2566)] into aux(259)
 * Joined equivalent variables [aux(260),s(2472),s(2572)] into aux(260)
 * Joined equivalent variables [aux(261),s(2471),s(2571)] into aux(261)
 * Joined equivalent variables [aux(262),s(2469),s(2568)] into aux(262)
 * Joined equivalent variables [aux(263),s(2470),s(2569)] into aux(263)
 * Joined equivalent variables [aux(264),s(2464),s(2563)] into aux(264)
 * Joined equivalent variables [aux(265),s(2465),s(2564)] into aux(265)
 * Joined equivalent variables [aux(266),s(2466),s(2565)] into aux(266)
 * Joined equivalent variables [aux(267),aux(259),s(2467)] into aux(267)
 * Joined equivalent variables [aux(268),s(2468),s(2567)] into aux(268)
 * Joined equivalent variables [s(2477),s(2578)] into s(2477)
 * Joined equivalent variables [s(2478),s(2579)] into s(2478)
 * Joined equivalent variables [s(2479),s(2580)] into s(2479)
 * Joined equivalent variables [s(2480),s(2581)] into s(2480)
 * Joined equivalent variables [s(2481),s(2582)] into s(2481)
 * Joined equivalent variables [s(2492),s(2593)] into s(2492)
 * Joined equivalent variables [s(2493),s(2594)] into s(2493)
 * Joined equivalent variables [s(2494),s(2595)] into s(2494)
 * Joined equivalent variables [s(2495),s(2596)] into s(2495)
 * Joined equivalent variables [s(2496),s(2597)] into s(2496)
 * Joined equivalent variables [s(2497),s(2598)] into s(2497)
 * Joined equivalent variables [s(2498),s(2599)] into s(2498)
 * Joined equivalent variables [s(2473),s(2573)] into s(2473)
 * Joined equivalent variables [s(2474),s(2575)] into s(2474)
 * Joined equivalent variables [s(2546),s(2647)] into s(2546)
 * Joined equivalent variables [s(2547),s(2648)] into s(2547)
 * Joined equivalent variables [s(2485),s(2586)] into s(2485)
 * Joined equivalent variables [s(2486),s(2587)] into s(2486)
 * Joined equivalent variables [s(2487),s(2588)] into s(2487)
 * Joined equivalent variables [s(2488),s(2589)] into s(2488)
 * Joined equivalent variables [s(2501),s(2602)] into s(2501)
 * Joined equivalent variables [s(2502),s(2603)] into s(2502)
 * Joined equivalent variables [s(2503),s(2604)] into s(2503)
 * Joined equivalent variables [s(2504),s(2605)] into s(2504)
 * Joined equivalent variables [s(2505),s(2606)] into s(2505)
 * Joined equivalent variables [s(2506),s(2607)] into s(2506)
 * Joined equivalent variables [s(2507),s(2608)] into s(2507)
 * Joined equivalent variables [s(2512),s(2613)] into s(2512)
 * Joined equivalent variables [s(2513),s(2614)] into s(2513)
 * Joined equivalent variables [s(2514),s(2615)] into s(2514)
 * Joined equivalent variables [s(2515),s(2616)] into s(2515)
 * Joined equivalent variables [s(2516),s(2617)] into s(2516)
 * Joined equivalent variables [s(2551),s(2652)] into s(2551)
 * Joined equivalent variables [s(2552),s(2653)] into s(2552)
 * Joined equivalent variables [s(2482),s(2583)] into s(2482)
 * Joined equivalent variables [s(2483),s(2584)] into s(2483)
 * Joined equivalent variables [s(2484),s(2585)] into s(2484)
 * Joined equivalent variables [s(2499),s(2600)] into s(2499)
 * Joined equivalent variables [s(2530),s(2631)] into s(2530)
 * Joined equivalent variables [s(2528),s(2629)] into s(2528)
 * Joined equivalent variables [s(2534),s(2635)] into s(2534)
 * Joined equivalent variables [s(2535),s(2636)] into s(2535)
 * Joined equivalent variables [s(2476),s(2577)] into s(2476)
 * Joined equivalent variables [s(2475),s(2576)] into s(2475)
 * Joined equivalent variables [s(2500),s(2601)] into s(2500)
 * Joined equivalent variables [s(2509),s(2610)] into s(2509)
 * Joined equivalent variables [s(2529),s(2630)] into s(2529)
 * Joined equivalent variables [s(2527),s(2628)] into s(2527)
 * Joined equivalent variables [s(2508),s(2609)] into s(2508)
 * Joined equivalent variables [s(2490),s(2591)] into s(2490)
 * Joined equivalent variables [s(2491),s(2592)] into s(2491)
 * Joined equivalent variables [s(2517),s(2618)] into s(2517)
 * Joined equivalent variables [s(2518),s(2619)] into s(2518)
 * Joined equivalent variables [s(2519),s(2620)] into s(2519)
 * Joined equivalent variables [s(2520),s(2621)] into s(2520)
 * Joined equivalent variables [s(2521),s(2622)] into s(2521)
 * Joined equivalent variables [s(2522),s(2623)] into s(2522)
 * Joined equivalent variables [s(2523),s(2624)] into s(2523)
 * Joined equivalent variables [s(2489),s(2590)] into s(2489)
 * Joined equivalent variables [s(2548),s(2649)] into s(2548)
 * Joined equivalent variables [s(2531),s(2632)] into s(2531)
 * Joined equivalent variables [s(2511),s(2612)] into s(2511)
 * Joined equivalent variables [s(2510),s(2611)] into s(2510)
 * Joined equivalent variables [s(2536),s(2637)] into s(2536)
 * Joined equivalent variables [s(2537),s(2638)] into s(2537)
 * Joined equivalent variables [s(2538),s(2639)] into s(2538)
 * Joined equivalent variables [s(2539),s(2640)] into s(2539)
 * Joined equivalent variables [s(2540),s(2641)] into s(2540)
 * Joined equivalent variables [s(2541),s(2642)] into s(2541)
 * Joined equivalent variables [s(2542),s(2643)] into s(2542)
 * Joined equivalent variables [s(2553),s(2654)] into s(2553)
 * Joined equivalent variables [s(2554),s(2655)] into s(2554)
 * Joined equivalent variables [s(2556),s(2657)] into s(2556)
 * Joined equivalent variables [s(2557),s(2658)] into s(2557)
 * Joined equivalent variables [s(2558),s(2659)] into s(2558)
 * Joined equivalent variables [s(2559),s(2660)] into s(2559)
 * Joined equivalent variables [s(2555),s(2656)] into s(2555)
 * Joined equivalent variables [s(2525),s(2626)] into s(2525)
 * Joined equivalent variables [s(2524),s(2625)] into s(2524)
 * Joined equivalent variables [s(2526),s(2627)] into s(2526)
 * Joined equivalent variables [s(2533),s(2634)] into s(2533)
 * Joined equivalent variables [s(2532),s(2633)] into s(2532)
 * Joined equivalent variables [s(2550),s(2651)] into s(2550)
 * Joined equivalent variables [s(2549),s(2650)] into s(2549)
 * Joined equivalent variables [s(2544),s(2645)] into s(2544)
 * Joined equivalent variables [s(2543),s(2644)] into s(2543)
 * Joined equivalent variables [s(2545),s(2646)] into s(2545)
 * Joined equivalent variables [s(2561),s(2662)] into s(2561)
 * Joined equivalent variables [s(2560),s(2661)] into s(2560)
 * Joined equivalent variables [s(2562),s(2663)] into s(2562)

#### Cost of chains of case_44(A,B,C,D,E,F,G,H,I,J,K,L,M):
* Chain [217]: 6
  with precondition: [A=0,J=1,K=0,M=1,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,L>=0] 

* Chain [216]: 26
  with precondition: [A=1,B=1,C=0,E=1,I=1,J=1,K=0,M=1,D>=0,F>=1,G>=0,H>=0,L>=0] 

* Chain [215]: 6*s(1875)+22*s(1882)+11*s(1883)+11*s(1884)+10*s(1892)+9*s(1897)+9*s(1898)+10*s(1899)+40
  Such that:s(1875) =< 2
s(1881) =< C
s(1879) =< C+G
s(1880) =< C+3*G
s(1876) =< F
s(1877) =< G
s(1878) =< G+1
s(1882) =< s(1881)
s(1883) =< s(1881)
s(1884) =< s(1881)
s(1882) =< s(1876)
s(1883) =< s(1876)
s(1884) =< s(1876)
s(1885) =< s(1877)
s(1886) =< s(1877)-1
s(1887) =< s(1880)+1
s(1888) =< s(1879)+1
s(1889) =< s(1877)-2
s(1890) =< s(1882)*s(1880)
s(1891) =< s(1882)*s(1879)
s(1892) =< s(1882)*s(1877)
s(1893) =< s(1882)*s(1886)
s(1894) =< s(1882)*s(1887)
s(1895) =< s(1882)*s(1888)
s(1896) =< s(1882)*s(1889)
s(1897) =< s(1894)+s(1890)+s(1880)
s(1898) =< s(1894)+s(1890)+s(1880)
s(1897) =< s(1895)+s(1891)+s(1879)
s(1898) =< s(1895)+s(1891)+s(1879)
s(1884) =< s(1895)+s(1891)+s(1879)
s(1884) =< s(1894)+s(1890)+s(1880)
s(1883) =< s(1893)+s(1896)+s(1877)
s(1884) =< s(1893)+s(1896)+s(1877)
s(1898) =< s(1884)*s(1885)
s(1899) =< s(1883)*s(1885)
s(1897) =< s(1883)*s(1878)

  with precondition: [A=1,B=2,E=1,I=1,J=1,K=0,M=1,C>=1,D>=0,F>=1,G>=0,H>=0,L>=0] 

* Chain [214]: 16*s(1907)+22*s(1908)+11*s(1909)+11*s(1910)+10*s(1918)+9*s(1923)+9*s(1924)+10*s(1925)+39
  Such that:s(1900) =< 2
s(1906) =< C
s(1904) =< C+G
s(1905) =< C+3*G
s(1901) =< F
s(1902) =< G
s(1903) =< G+1
s(1907) =< s(1900)
s(1908) =< s(1906)
s(1909) =< s(1906)
s(1910) =< s(1906)
s(1908) =< s(1901)
s(1909) =< s(1901)
s(1910) =< s(1901)
s(1911) =< s(1902)
s(1912) =< s(1902)-1
s(1913) =< s(1905)+1
s(1914) =< s(1904)+1
s(1915) =< s(1902)-2
s(1916) =< s(1908)*s(1905)
s(1917) =< s(1908)*s(1904)
s(1918) =< s(1908)*s(1902)
s(1919) =< s(1908)*s(1912)
s(1920) =< s(1908)*s(1913)
s(1921) =< s(1908)*s(1914)
s(1922) =< s(1908)*s(1915)
s(1923) =< s(1920)+s(1916)+s(1905)
s(1924) =< s(1920)+s(1916)+s(1905)
s(1923) =< s(1921)+s(1917)+s(1904)
s(1924) =< s(1921)+s(1917)+s(1904)
s(1910) =< s(1921)+s(1917)+s(1904)
s(1910) =< s(1920)+s(1916)+s(1905)
s(1909) =< s(1919)+s(1922)+s(1902)
s(1910) =< s(1919)+s(1922)+s(1902)
s(1924) =< s(1910)*s(1911)
s(1925) =< s(1909)*s(1911)
s(1923) =< s(1909)*s(1903)

  with precondition: [A=1,B=2,E=1,I=1,J=2,K=1,M=1,C>=1,D>=1,F>=1,G>=0,H>=0,L>=1] 

* Chain [213]: 76*s(1934)+44*s(1953)+22*s(1954)+22*s(1955)+20*s(1963)+18*s(1968)+18*s(1969)+20*s(1970)+44*s(1975)+22*s(1976)+22*s(1977)+20*s(1982)+18*s(1987)+18*s(1988)+20*s(1989)+44*s(1992)+22*s(1993)+22*s(1994)+20*s(2001)+18*s(2006)+18*s(2007)+20*s(2008)+18*s(2019)+6*s(2020)+37
  Such that:s(2015) =< D
aux(232) =< B
aux(233) =< C
aux(234) =< C+G
aux(235) =< C+3*G
aux(236) =< F
aux(237) =< F+G
aux(238) =< F+3*G
aux(239) =< G
s(1934) =< aux(232)
s(1935) =< aux(239)
s(1936) =< aux(238)
s(1937) =< aux(237)
s(1938) =< aux(236)
s(1939) =< aux(235)
s(1940) =< aux(234)
s(1941) =< aux(233)
s(1942) =< aux(239)+1
s(1943) =< s(1934)*aux(236)
s(1944) =< s(1934)*aux(233)
s(1945) =< s(1934)*s(1935)
s(1946) =< s(1934)*s(1936)
s(1947) =< s(1934)*s(1937)
s(1948) =< s(1934)*s(1938)
s(1949) =< s(1934)*s(1939)
s(1950) =< s(1934)*s(1940)
s(1951) =< s(1934)*s(1941)
s(1952) =< s(1951)
s(1953) =< s(1951)
s(1954) =< s(1951)
s(1955) =< s(1951)
s(1953) =< s(1948)
s(1954) =< s(1948)
s(1955) =< s(1948)
s(1956) =< s(1935)
s(1957) =< s(1935)-1
s(1958) =< s(1939)+1
s(1959) =< s(1940)+1
s(1960) =< s(1935)-2
s(1961) =< s(1953)*s(1939)
s(1962) =< s(1953)*s(1940)
s(1963) =< s(1953)*s(1935)
s(1964) =< s(1953)*s(1957)
s(1965) =< s(1953)*s(1958)
s(1966) =< s(1953)*s(1959)
s(1967) =< s(1953)*s(1960)
s(1968) =< s(1965)+s(1961)+s(1949)
s(1969) =< s(1965)+s(1961)+s(1949)
s(1968) =< s(1966)+s(1962)+s(1950)
s(1969) =< s(1966)+s(1962)+s(1950)
s(1955) =< s(1966)+s(1962)+s(1950)
s(1955) =< s(1965)+s(1961)+s(1949)
s(1954) =< s(1964)+s(1967)+s(1945)
s(1955) =< s(1964)+s(1967)+s(1945)
s(1969) =< s(1955)*s(1956)
s(1970) =< s(1954)*s(1956)
s(1968) =< s(1954)*s(1942)
s(1971) =< s(1950)
s(1972) =< s(1940)
s(1973) =< s(1949)
s(1974) =< s(1939)
s(1952) =< s(1948)
s(1971) =< s(1947)
s(1972) =< s(1937)
s(1973) =< s(1946)
s(1974) =< s(1936)
s(1975) =< s(1952)
s(1976) =< s(1952)
s(1977) =< s(1952)
s(1975) =< s(1948)
s(1976) =< s(1948)
s(1977) =< s(1948)
s(1978) =< s(1974)+1
s(1979) =< s(1972)+1
s(1980) =< s(1975)*s(1974)
s(1981) =< s(1975)*s(1972)
s(1982) =< s(1975)*s(1935)
s(1983) =< s(1975)*s(1957)
s(1984) =< s(1975)*s(1978)
s(1985) =< s(1975)*s(1979)
s(1986) =< s(1975)*s(1960)
s(1987) =< s(1984)+s(1980)+s(1973)
s(1988) =< s(1984)+s(1980)+s(1973)
s(1987) =< s(1985)+s(1981)+s(1971)
s(1988) =< s(1985)+s(1981)+s(1971)
s(1977) =< s(1985)+s(1981)+s(1971)
s(1977) =< s(1984)+s(1980)+s(1973)
s(1976) =< s(1983)+s(1986)+s(1945)
s(1977) =< s(1983)+s(1986)+s(1945)
s(1988) =< s(1977)*s(1956)
s(1989) =< s(1976)*s(1956)
s(1987) =< s(1976)*s(1942)
s(1990) =< aux(234)
s(1991) =< aux(235)
s(1944) =< s(1943)
s(1990) =< aux(237)
s(1991) =< aux(238)
s(1992) =< s(1944)
s(1993) =< s(1944)
s(1994) =< s(1944)
s(1992) =< s(1943)
s(1993) =< s(1943)
s(1994) =< s(1943)
s(1995) =< aux(239)-1
s(1996) =< s(1991)+1
s(1997) =< s(1990)+1
s(1998) =< aux(239)-2
s(1999) =< s(1992)*s(1991)
s(2000) =< s(1992)*s(1990)
s(2001) =< s(1992)*aux(239)
s(2002) =< s(1992)*s(1995)
s(2003) =< s(1992)*s(1996)
s(2004) =< s(1992)*s(1997)
s(2005) =< s(1992)*s(1998)
s(2006) =< s(2003)+s(1999)+s(1973)
s(2007) =< s(2003)+s(1999)+s(1973)
s(2006) =< s(2004)+s(2000)+s(1971)
s(2007) =< s(2004)+s(2000)+s(1971)
s(1994) =< s(2004)+s(2000)+s(1971)
s(1994) =< s(2003)+s(1999)+s(1973)
s(1993) =< s(2002)+s(2005)+s(1945)
s(1994) =< s(2002)+s(2005)+s(1945)
s(2007) =< s(1994)*s(1935)
s(2008) =< s(1993)*s(1935)
s(2006) =< s(1993)*s(1942)
s(2015) =< aux(239)
s(2019) =< aux(239)
s(2020) =< s(1934)*s(2015)

  with precondition: [A=1,E=1,I=1,J=1,K=0,M=1,B>=2,C>=2,D>=0,F>=2,G>=1,H>=0,L>=0] 

* Chain [212]: 76*s(2104)+44*s(2105)+22*s(2106)+22*s(2107)+20*s(2115)+18*s(2120)+18*s(2121)+20*s(2122)+44*s(2140)+22*s(2141)+22*s(2142)+20*s(2150)+18*s(2155)+18*s(2156)+20*s(2157)+44*s(2162)+22*s(2163)+22*s(2164)+20*s(2169)+18*s(2174)+18*s(2175)+20*s(2176)+44*s(2179)+22*s(2180)+22*s(2181)+20*s(2186)+18*s(2191)+18*s(2192)+20*s(2193)+18*s(2205)+6*s(2206)+50
  Such that:s(2201) =< D
aux(241) =< B
aux(242) =< C
aux(243) =< C+G
aux(244) =< C+3*G
aux(245) =< F
aux(246) =< F+G
aux(247) =< F+3*G
aux(248) =< G
aux(249) =< G+1
s(2104) =< aux(241)
s(2105) =< aux(242)
s(2106) =< aux(242)
s(2107) =< aux(242)
s(2105) =< aux(245)
s(2106) =< aux(245)
s(2107) =< aux(245)
s(2108) =< aux(248)
s(2109) =< aux(248)-1
s(2110) =< aux(244)+1
s(2111) =< aux(243)+1
s(2112) =< aux(248)-2
s(2113) =< s(2105)*aux(244)
s(2114) =< s(2105)*aux(243)
s(2115) =< s(2105)*aux(248)
s(2116) =< s(2105)*s(2109)
s(2117) =< s(2105)*s(2110)
s(2118) =< s(2105)*s(2111)
s(2119) =< s(2105)*s(2112)
s(2120) =< s(2117)+s(2113)+aux(244)
s(2121) =< s(2117)+s(2113)+aux(244)
s(2120) =< s(2118)+s(2114)+aux(243)
s(2121) =< s(2118)+s(2114)+aux(243)
s(2107) =< s(2118)+s(2114)+aux(243)
s(2107) =< s(2117)+s(2113)+aux(244)
s(2106) =< s(2116)+s(2119)+aux(248)
s(2107) =< s(2116)+s(2119)+aux(248)
s(2121) =< s(2107)*s(2108)
s(2122) =< s(2106)*s(2108)
s(2120) =< s(2106)*aux(249)
s(2123) =< aux(247)
s(2124) =< aux(246)
s(2125) =< aux(245)
s(2126) =< aux(244)
s(2127) =< aux(243)
s(2128) =< aux(242)
s(2129) =< aux(248)+1
s(2130) =< s(2104)*aux(245)
s(2131) =< s(2104)*aux(242)
s(2132) =< s(2104)*s(2108)
s(2133) =< s(2104)*s(2123)
s(2134) =< s(2104)*s(2124)
s(2135) =< s(2104)*s(2125)
s(2136) =< s(2104)*s(2126)
s(2137) =< s(2104)*s(2127)
s(2138) =< s(2104)*s(2128)
s(2139) =< s(2138)
s(2140) =< s(2138)
s(2141) =< s(2138)
s(2142) =< s(2138)
s(2140) =< s(2135)
s(2141) =< s(2135)
s(2142) =< s(2135)
s(2143) =< s(2108)
s(2144) =< s(2108)-1
s(2145) =< s(2126)+1
s(2146) =< s(2127)+1
s(2147) =< s(2108)-2
s(2148) =< s(2140)*s(2126)
s(2149) =< s(2140)*s(2127)
s(2150) =< s(2140)*s(2108)
s(2151) =< s(2140)*s(2144)
s(2152) =< s(2140)*s(2145)
s(2153) =< s(2140)*s(2146)
s(2154) =< s(2140)*s(2147)
s(2155) =< s(2152)+s(2148)+s(2136)
s(2156) =< s(2152)+s(2148)+s(2136)
s(2155) =< s(2153)+s(2149)+s(2137)
s(2156) =< s(2153)+s(2149)+s(2137)
s(2142) =< s(2153)+s(2149)+s(2137)
s(2142) =< s(2152)+s(2148)+s(2136)
s(2141) =< s(2151)+s(2154)+s(2132)
s(2142) =< s(2151)+s(2154)+s(2132)
s(2156) =< s(2142)*s(2143)
s(2157) =< s(2141)*s(2143)
s(2155) =< s(2141)*s(2129)
s(2158) =< s(2137)
s(2159) =< s(2127)
s(2160) =< s(2136)
s(2161) =< s(2126)
s(2139) =< s(2135)
s(2158) =< s(2134)
s(2159) =< s(2124)
s(2160) =< s(2133)
s(2161) =< s(2123)
s(2162) =< s(2139)
s(2163) =< s(2139)
s(2164) =< s(2139)
s(2162) =< s(2135)
s(2163) =< s(2135)
s(2164) =< s(2135)
s(2165) =< s(2161)+1
s(2166) =< s(2159)+1
s(2167) =< s(2162)*s(2161)
s(2168) =< s(2162)*s(2159)
s(2169) =< s(2162)*s(2108)
s(2170) =< s(2162)*s(2144)
s(2171) =< s(2162)*s(2165)
s(2172) =< s(2162)*s(2166)
s(2173) =< s(2162)*s(2147)
s(2174) =< s(2171)+s(2167)+s(2160)
s(2175) =< s(2171)+s(2167)+s(2160)
s(2174) =< s(2172)+s(2168)+s(2158)
s(2175) =< s(2172)+s(2168)+s(2158)
s(2164) =< s(2172)+s(2168)+s(2158)
s(2164) =< s(2171)+s(2167)+s(2160)
s(2163) =< s(2170)+s(2173)+s(2132)
s(2164) =< s(2170)+s(2173)+s(2132)
s(2175) =< s(2164)*s(2143)
s(2176) =< s(2163)*s(2143)
s(2174) =< s(2163)*s(2129)
s(2177) =< aux(243)
s(2178) =< aux(244)
s(2131) =< s(2130)
s(2177) =< aux(246)
s(2178) =< aux(247)
s(2179) =< s(2131)
s(2180) =< s(2131)
s(2181) =< s(2131)
s(2179) =< s(2130)
s(2180) =< s(2130)
s(2181) =< s(2130)
s(2182) =< s(2178)+1
s(2183) =< s(2177)+1
s(2184) =< s(2179)*s(2178)
s(2185) =< s(2179)*s(2177)
s(2186) =< s(2179)*aux(248)
s(2187) =< s(2179)*s(2109)
s(2188) =< s(2179)*s(2182)
s(2189) =< s(2179)*s(2183)
s(2190) =< s(2179)*s(2112)
s(2191) =< s(2188)+s(2184)+s(2160)
s(2192) =< s(2188)+s(2184)+s(2160)
s(2191) =< s(2189)+s(2185)+s(2158)
s(2192) =< s(2189)+s(2185)+s(2158)
s(2181) =< s(2189)+s(2185)+s(2158)
s(2181) =< s(2188)+s(2184)+s(2160)
s(2180) =< s(2187)+s(2190)+s(2132)
s(2181) =< s(2187)+s(2190)+s(2132)
s(2192) =< s(2181)*s(2108)
s(2193) =< s(2180)*s(2108)
s(2191) =< s(2180)*s(2129)
s(2201) =< aux(248)
s(2205) =< aux(249)
s(2206) =< s(2104)*s(2201)

  with precondition: [A=1,E=1,I=1,J=1,K=0,M=1,B>=3,C>=1,D>=0,F>=1,G>=0,H>=0,L>=0] 

* Chain [211]: 76*s(2304)+44*s(2323)+22*s(2324)+22*s(2325)+20*s(2333)+18*s(2338)+18*s(2339)+20*s(2340)+44*s(2345)+22*s(2346)+22*s(2347)+20*s(2352)+18*s(2357)+18*s(2358)+20*s(2359)+44*s(2362)+22*s(2363)+22*s(2364)+20*s(2371)+18*s(2376)+18*s(2377)+20*s(2378)+6*s(2389)+26
  Such that:s(2385) =< D
aux(251) =< B
aux(252) =< C
aux(253) =< C+G
aux(254) =< C+3*G
aux(255) =< F
aux(256) =< F+G
aux(257) =< F+3*G
aux(258) =< G
s(2304) =< aux(251)
s(2305) =< aux(258)
s(2306) =< aux(257)
s(2307) =< aux(256)
s(2308) =< aux(255)
s(2309) =< aux(254)
s(2310) =< aux(253)
s(2311) =< aux(252)
s(2312) =< aux(258)+1
s(2313) =< s(2304)*aux(255)
s(2314) =< s(2304)*aux(252)
s(2315) =< s(2304)*s(2305)
s(2316) =< s(2304)*s(2306)
s(2317) =< s(2304)*s(2307)
s(2318) =< s(2304)*s(2308)
s(2319) =< s(2304)*s(2309)
s(2320) =< s(2304)*s(2310)
s(2321) =< s(2304)*s(2311)
s(2322) =< s(2321)
s(2323) =< s(2321)
s(2324) =< s(2321)
s(2325) =< s(2321)
s(2323) =< s(2318)
s(2324) =< s(2318)
s(2325) =< s(2318)
s(2326) =< s(2305)
s(2327) =< s(2305)-1
s(2328) =< s(2309)+1
s(2329) =< s(2310)+1
s(2330) =< s(2305)-2
s(2331) =< s(2323)*s(2309)
s(2332) =< s(2323)*s(2310)
s(2333) =< s(2323)*s(2305)
s(2334) =< s(2323)*s(2327)
s(2335) =< s(2323)*s(2328)
s(2336) =< s(2323)*s(2329)
s(2337) =< s(2323)*s(2330)
s(2338) =< s(2335)+s(2331)+s(2319)
s(2339) =< s(2335)+s(2331)+s(2319)
s(2338) =< s(2336)+s(2332)+s(2320)
s(2339) =< s(2336)+s(2332)+s(2320)
s(2325) =< s(2336)+s(2332)+s(2320)
s(2325) =< s(2335)+s(2331)+s(2319)
s(2324) =< s(2334)+s(2337)+s(2315)
s(2325) =< s(2334)+s(2337)+s(2315)
s(2339) =< s(2325)*s(2326)
s(2340) =< s(2324)*s(2326)
s(2338) =< s(2324)*s(2312)
s(2341) =< s(2320)
s(2342) =< s(2310)
s(2343) =< s(2319)
s(2344) =< s(2309)
s(2322) =< s(2318)
s(2341) =< s(2317)
s(2342) =< s(2307)
s(2343) =< s(2316)
s(2344) =< s(2306)
s(2345) =< s(2322)
s(2346) =< s(2322)
s(2347) =< s(2322)
s(2345) =< s(2318)
s(2346) =< s(2318)
s(2347) =< s(2318)
s(2348) =< s(2344)+1
s(2349) =< s(2342)+1
s(2350) =< s(2345)*s(2344)
s(2351) =< s(2345)*s(2342)
s(2352) =< s(2345)*s(2305)
s(2353) =< s(2345)*s(2327)
s(2354) =< s(2345)*s(2348)
s(2355) =< s(2345)*s(2349)
s(2356) =< s(2345)*s(2330)
s(2357) =< s(2354)+s(2350)+s(2343)
s(2358) =< s(2354)+s(2350)+s(2343)
s(2357) =< s(2355)+s(2351)+s(2341)
s(2358) =< s(2355)+s(2351)+s(2341)
s(2347) =< s(2355)+s(2351)+s(2341)
s(2347) =< s(2354)+s(2350)+s(2343)
s(2346) =< s(2353)+s(2356)+s(2315)
s(2347) =< s(2353)+s(2356)+s(2315)
s(2358) =< s(2347)*s(2326)
s(2359) =< s(2346)*s(2326)
s(2357) =< s(2346)*s(2312)
s(2360) =< aux(253)
s(2361) =< aux(254)
s(2314) =< s(2313)
s(2360) =< aux(256)
s(2361) =< aux(257)
s(2362) =< s(2314)
s(2363) =< s(2314)
s(2364) =< s(2314)
s(2362) =< s(2313)
s(2363) =< s(2313)
s(2364) =< s(2313)
s(2365) =< aux(258)-1
s(2366) =< s(2361)+1
s(2367) =< s(2360)+1
s(2368) =< aux(258)-2
s(2369) =< s(2362)*s(2361)
s(2370) =< s(2362)*s(2360)
s(2371) =< s(2362)*aux(258)
s(2372) =< s(2362)*s(2365)
s(2373) =< s(2362)*s(2366)
s(2374) =< s(2362)*s(2367)
s(2375) =< s(2362)*s(2368)
s(2376) =< s(2373)+s(2369)+s(2343)
s(2377) =< s(2373)+s(2369)+s(2343)
s(2376) =< s(2374)+s(2370)+s(2341)
s(2377) =< s(2374)+s(2370)+s(2341)
s(2364) =< s(2374)+s(2370)+s(2341)
s(2364) =< s(2373)+s(2369)+s(2343)
s(2363) =< s(2372)+s(2375)+s(2315)
s(2364) =< s(2372)+s(2375)+s(2315)
s(2377) =< s(2364)*s(2305)
s(2378) =< s(2363)*s(2305)
s(2376) =< s(2363)*s(2312)
s(2385) =< aux(258)
s(2389) =< s(2304)*s(2385)

  with precondition: [A=1,E=1,I=1,M=1,B=J,B>=2,C>=2,F>=2,H>=0,K>=1,D+1>=B,L+1>=B,G>=K] 

* Chain [210]: 76*s(2473)+44*s(2474)+22*s(2475)+22*s(2476)+20*s(2484)+18*s(2489)+18*s(2490)+20*s(2491)+44*s(2509)+22*s(2510)+22*s(2511)+20*s(2519)+18*s(2524)+18*s(2525)+20*s(2526)+44*s(2531)+22*s(2532)+22*s(2533)+20*s(2538)+18*s(2543)+18*s(2544)+20*s(2545)+44*s(2548)+22*s(2549)+22*s(2550)+20*s(2555)+18*s(2560)+18*s(2561)+20*s(2562)+6*s(2574)+39
  Such that:s(2570) =< D
aux(260) =< B
aux(261) =< C
aux(262) =< C+G
aux(263) =< C+3*G
aux(264) =< F
aux(265) =< F+G
aux(266) =< F+3*G
aux(267) =< G
aux(268) =< G+1
s(2473) =< aux(260)
s(2474) =< aux(261)
s(2475) =< aux(261)
s(2476) =< aux(261)
s(2474) =< aux(264)
s(2475) =< aux(264)
s(2476) =< aux(264)
s(2477) =< aux(267)
s(2478) =< aux(267)-1
s(2479) =< aux(263)+1
s(2480) =< aux(262)+1
s(2481) =< aux(267)-2
s(2482) =< s(2474)*aux(263)
s(2483) =< s(2474)*aux(262)
s(2484) =< s(2474)*aux(267)
s(2485) =< s(2474)*s(2478)
s(2486) =< s(2474)*s(2479)
s(2487) =< s(2474)*s(2480)
s(2488) =< s(2474)*s(2481)
s(2489) =< s(2486)+s(2482)+aux(263)
s(2490) =< s(2486)+s(2482)+aux(263)
s(2489) =< s(2487)+s(2483)+aux(262)
s(2490) =< s(2487)+s(2483)+aux(262)
s(2476) =< s(2487)+s(2483)+aux(262)
s(2476) =< s(2486)+s(2482)+aux(263)
s(2475) =< s(2485)+s(2488)+aux(267)
s(2476) =< s(2485)+s(2488)+aux(267)
s(2490) =< s(2476)*s(2477)
s(2491) =< s(2475)*s(2477)
s(2489) =< s(2475)*aux(268)
s(2492) =< aux(266)
s(2493) =< aux(265)
s(2494) =< aux(264)
s(2495) =< aux(263)
s(2496) =< aux(262)
s(2497) =< aux(261)
s(2498) =< aux(267)+1
s(2499) =< s(2473)*aux(264)
s(2500) =< s(2473)*aux(261)
s(2501) =< s(2473)*s(2477)
s(2502) =< s(2473)*s(2492)
s(2503) =< s(2473)*s(2493)
s(2504) =< s(2473)*s(2494)
s(2505) =< s(2473)*s(2495)
s(2506) =< s(2473)*s(2496)
s(2507) =< s(2473)*s(2497)
s(2508) =< s(2507)
s(2509) =< s(2507)
s(2510) =< s(2507)
s(2511) =< s(2507)
s(2509) =< s(2504)
s(2510) =< s(2504)
s(2511) =< s(2504)
s(2512) =< s(2477)
s(2513) =< s(2477)-1
s(2514) =< s(2495)+1
s(2515) =< s(2496)+1
s(2516) =< s(2477)-2
s(2517) =< s(2509)*s(2495)
s(2518) =< s(2509)*s(2496)
s(2519) =< s(2509)*s(2477)
s(2520) =< s(2509)*s(2513)
s(2521) =< s(2509)*s(2514)
s(2522) =< s(2509)*s(2515)
s(2523) =< s(2509)*s(2516)
s(2524) =< s(2521)+s(2517)+s(2505)
s(2525) =< s(2521)+s(2517)+s(2505)
s(2524) =< s(2522)+s(2518)+s(2506)
s(2525) =< s(2522)+s(2518)+s(2506)
s(2511) =< s(2522)+s(2518)+s(2506)
s(2511) =< s(2521)+s(2517)+s(2505)
s(2510) =< s(2520)+s(2523)+s(2501)
s(2511) =< s(2520)+s(2523)+s(2501)
s(2525) =< s(2511)*s(2512)
s(2526) =< s(2510)*s(2512)
s(2524) =< s(2510)*s(2498)
s(2527) =< s(2506)
s(2528) =< s(2496)
s(2529) =< s(2505)
s(2530) =< s(2495)
s(2508) =< s(2504)
s(2527) =< s(2503)
s(2528) =< s(2493)
s(2529) =< s(2502)
s(2530) =< s(2492)
s(2531) =< s(2508)
s(2532) =< s(2508)
s(2533) =< s(2508)
s(2531) =< s(2504)
s(2532) =< s(2504)
s(2533) =< s(2504)
s(2534) =< s(2530)+1
s(2535) =< s(2528)+1
s(2536) =< s(2531)*s(2530)
s(2537) =< s(2531)*s(2528)
s(2538) =< s(2531)*s(2477)
s(2539) =< s(2531)*s(2513)
s(2540) =< s(2531)*s(2534)
s(2541) =< s(2531)*s(2535)
s(2542) =< s(2531)*s(2516)
s(2543) =< s(2540)+s(2536)+s(2529)
s(2544) =< s(2540)+s(2536)+s(2529)
s(2543) =< s(2541)+s(2537)+s(2527)
s(2544) =< s(2541)+s(2537)+s(2527)
s(2533) =< s(2541)+s(2537)+s(2527)
s(2533) =< s(2540)+s(2536)+s(2529)
s(2532) =< s(2539)+s(2542)+s(2501)
s(2533) =< s(2539)+s(2542)+s(2501)
s(2544) =< s(2533)*s(2512)
s(2545) =< s(2532)*s(2512)
s(2543) =< s(2532)*s(2498)
s(2546) =< aux(262)
s(2547) =< aux(263)
s(2500) =< s(2499)
s(2546) =< aux(265)
s(2547) =< aux(266)
s(2548) =< s(2500)
s(2549) =< s(2500)
s(2550) =< s(2500)
s(2548) =< s(2499)
s(2549) =< s(2499)
s(2550) =< s(2499)
s(2551) =< s(2547)+1
s(2552) =< s(2546)+1
s(2553) =< s(2548)*s(2547)
s(2554) =< s(2548)*s(2546)
s(2555) =< s(2548)*aux(267)
s(2556) =< s(2548)*s(2478)
s(2557) =< s(2548)*s(2551)
s(2558) =< s(2548)*s(2552)
s(2559) =< s(2548)*s(2481)
s(2560) =< s(2557)+s(2553)+s(2529)
s(2561) =< s(2557)+s(2553)+s(2529)
s(2560) =< s(2558)+s(2554)+s(2527)
s(2561) =< s(2558)+s(2554)+s(2527)
s(2550) =< s(2558)+s(2554)+s(2527)
s(2550) =< s(2557)+s(2553)+s(2529)
s(2549) =< s(2556)+s(2559)+s(2501)
s(2550) =< s(2556)+s(2559)+s(2501)
s(2561) =< s(2550)*s(2477)
s(2562) =< s(2549)*s(2477)
s(2560) =< s(2549)*s(2498)
s(2570) =< aux(267)
s(2574) =< s(2473)*s(2570)

  with precondition: [A=1,E=1,I=1,M=1,B=J,B>=3,C>=1,F>=1,H>=0,K>=1,D+1>=B,L+1>=B,G+1>=K] 

 * Renamed intermediate variables: 
[ (eq(281,1),aux(51))>>s(2664), (eq(281,1),aux(52))>>s(2665), (eq(281,1),aux(53))>>s(2666), (eq(281,1),aux(54))>>s(2667), (eq(281,1),aux(55))>>s(2668), (eq(281,1),aux(56))>>s(2669), (eq(281,1),s(136))>>s(2670), (eq(281,1),s(142))>>s(2671), (eq(281,1),s(144))>>s(2672), (eq(281,1),s(145))>>s(2673), (eq(281,1),s(146))>>s(2674), (eq(281,1),s(138))>>s(2675), (eq(281,1),s(139))>>s(2676), (eq(281,1),s(140))>>s(2677)]

#### Simplifying cost structure of CE 281 
 * Renamed intermediate variables: 
[ (eq(282,1),s(248))>>s(2678), (eq(282,1),s(247))>>s(2679), (eq(282,1),s(252))>>s(2680), (eq(282,1),s(251))>>s(2681), (eq(282,1),s(253))>>s(2682), (eq(282,1),s(254))>>s(2683), (eq(282,1),s(249))>>s(2684), (eq(282,1),s(250))>>s(2685)]
 * Renamed intermediate variables: 
[ (eq(282,2),s(1875))>>s(2686), (eq(282,2),s(1881))>>s(2687), (eq(282,2),s(1879))>>s(2688), (eq(282,2),s(1880))>>s(2689), (eq(282,2),s(1876))>>s(2690), (eq(282,2),s(1877))>>s(2691), (eq(282,2),s(1878))>>s(2692), (eq(282,2),s(1882))>>s(2693), (eq(282,2),s(1883))>>s(2694), (eq(282,2),s(1884))>>s(2695), (eq(282,2),s(1885))>>s(2696), (eq(282,2),s(1886))>>s(2697), (eq(282,2),s(1887))>>s(2698), (eq(282,2),s(1888))>>s(2699), (eq(282,2),s(1889))>>s(2700), (eq(282,2),s(1890))>>s(2701), (eq(282,2),s(1891))>>s(2702), (eq(282,2),s(1892))>>s(2703), (eq(282,2),s(1893))>>s(2704), (eq(282,2),s(1894))>>s(2705), (eq(282,2),s(1895))>>s(2706), (eq(282,2),s(1896))>>s(2707), (eq(282,2),s(1897))>>s(2708), (eq(282,2),s(1898))>>s(2709), (eq(282,2),s(1899))>>s(2710)]

#### Simplifying cost structure of CE 282 
 * Joined equivalent variables [aux(269),s(2678)] into aux(269)
 * Joined equivalent variables [aux(270),s(2687)] into aux(270)
 * Joined equivalent variables [aux(271),s(2680),s(2690)] into aux(271)
 * Joined equivalent variables [aux(272),s(2691)] into aux(272)
 * Joined equivalent variables [s(2684),s(2686)] into s(2684)
 * Renamed intermediate variables: 
[ (eq(284,1),s(248))>>s(2711), (eq(284,1),s(247))>>s(2712), (eq(284,1),s(252))>>s(2713), (eq(284,1),s(251))>>s(2714), (eq(284,1),s(253))>>s(2715), (eq(284,1),s(254))>>s(2716), (eq(284,1),s(249))>>s(2717), (eq(284,1),s(250))>>s(2718)]
 * Renamed intermediate variables: 
[ (eq(284,2),s(2015))>>s(2719), (eq(284,2),aux(232))>>s(2720), (eq(284,2),aux(233))>>s(2721), (eq(284,2),aux(234))>>s(2722), (eq(284,2),aux(235))>>s(2723), (eq(284,2),aux(236))>>s(2724), (eq(284,2),aux(237))>>s(2725), (eq(284,2),aux(238))>>s(2726), (eq(284,2),aux(239))>>s(2727), (eq(284,2),s(1934))>>s(2728), (eq(284,2),s(1935))>>s(2729), (eq(284,2),s(1936))>>s(2730), (eq(284,2),s(1937))>>s(2731), (eq(284,2),s(1938))>>s(2732), (eq(284,2),s(1939))>>s(2733), (eq(284,2),s(1940))>>s(2734), (eq(284,2),s(1941))>>s(2735), (eq(284,2),s(1942))>>s(2736), (eq(284,2),s(1943))>>s(2737), (eq(284,2),s(1944))>>s(2738), (eq(284,2),s(1945))>>s(2739), (eq(284,2),s(1946))>>s(2740), (eq(284,2),s(1947))>>s(2741), (eq(284,2),s(1948))>>s(2742), (eq(284,2),s(1949))>>s(2743), (eq(284,2),s(1950))>>s(2744), (eq(284,2),s(1951))>>s(2745), (eq(284,2),s(1952))>>s(2746), (eq(284,2),s(1953))>>s(2747), (eq(284,2),s(1954))>>s(2748), (eq(284,2),s(1955))>>s(2749), (eq(284,2),s(1956))>>s(2750), (eq(284,2),s(1957))>>s(2751), (eq(284,2),s(1958))>>s(2752), (eq(284,2),s(1959))>>s(2753), (eq(284,2),s(1960))>>s(2754), (eq(284,2),s(1961))>>s(2755), (eq(284,2),s(1962))>>s(2756), (eq(284,2),s(1963))>>s(2757), (eq(284,2),s(1964))>>s(2758), (eq(284,2),s(1965))>>s(2759), (eq(284,2),s(1966))>>s(2760), (eq(284,2),s(1967))>>s(2761), (eq(284,2),s(1968))>>s(2762), (eq(284,2),s(1969))>>s(2763), (eq(284,2),s(1970))>>s(2764), (eq(284,2),s(1971))>>s(2765), (eq(284,2),s(1972))>>s(2766), (eq(284,2),s(1973))>>s(2767), (eq(284,2),s(1974))>>s(2768), (eq(284,2),s(1975))>>s(2769), (eq(284,2),s(1976))>>s(2770), (eq(284,2),s(1977))>>s(2771), (eq(284,2),s(1978))>>s(2772), (eq(284,2),s(1979))>>s(2773), (eq(284,2),s(1980))>>s(2774), (eq(284,2),s(1981))>>s(2775), (eq(284,2),s(1982))>>s(2776), (eq(284,2),s(1983))>>s(2777), (eq(284,2),s(1984))>>s(2778), (eq(284,2),s(1985))>>s(2779), (eq(284,2),s(1986))>>s(2780), (eq(284,2),s(1987))>>s(2781), (eq(284,2),s(1988))>>s(2782), (eq(284,2),s(1989))>>s(2783), (eq(284,2),s(1990))>>s(2784), (eq(284,2),s(1991))>>s(2785), (eq(284,2),s(1992))>>s(2786), (eq(284,2),s(1993))>>s(2787), (eq(284,2),s(1994))>>s(2788), (eq(284,2),s(1995))>>s(2789), (eq(284,2),s(1996))>>s(2790), (eq(284,2),s(1997))>>s(2791), (eq(284,2),s(1998))>>s(2792), (eq(284,2),s(1999))>>s(2793), (eq(284,2),s(2000))>>s(2794), (eq(284,2),s(2001))>>s(2795), (eq(284,2),s(2002))>>s(2796), (eq(284,2),s(2003))>>s(2797), (eq(284,2),s(2004))>>s(2798), (eq(284,2),s(2005))>>s(2799), (eq(284,2),s(2006))>>s(2800), (eq(284,2),s(2007))>>s(2801), (eq(284,2),s(2008))>>s(2802), (eq(284,2),s(2019))>>s(2803), (eq(284,2),s(2020))>>s(2804)]

#### Simplifying cost structure of CE 284 
 * Joined equivalent variables [aux(273),s(2711),s(2720)] into aux(273)
 * Joined equivalent variables [aux(274),s(2721)] into aux(274)
 * Joined equivalent variables [aux(276),s(2713),s(2724)] into aux(276)
 * Joined equivalent variables [aux(277),s(2727)] into aux(277)
 * Joined equivalent variables [s(2717),s(2728)] into s(2717)
 * Renamed intermediate variables: 
[ (eq(285,1),s(248))>>s(2805), (eq(285,1),s(247))>>s(2806), (eq(285,1),s(252))>>s(2807), (eq(285,1),s(251))>>s(2808), (eq(285,1),s(253))>>s(2809), (eq(285,1),s(254))>>s(2810), (eq(285,1),s(249))>>s(2811), (eq(285,1),s(250))>>s(2812)]
 * Renamed intermediate variables: 
[ (eq(285,2),s(2201))>>s(2813), (eq(285,2),aux(241))>>s(2814), (eq(285,2),aux(242))>>s(2815), (eq(285,2),aux(243))>>s(2816), (eq(285,2),aux(244))>>s(2817), (eq(285,2),aux(245))>>s(2818), (eq(285,2),aux(246))>>s(2819), (eq(285,2),aux(247))>>s(2820), (eq(285,2),aux(248))>>s(2821), (eq(285,2),aux(249))>>s(2822), (eq(285,2),s(2104))>>s(2823), (eq(285,2),s(2105))>>s(2824), (eq(285,2),s(2106))>>s(2825), (eq(285,2),s(2107))>>s(2826), (eq(285,2),s(2108))>>s(2827), (eq(285,2),s(2109))>>s(2828), (eq(285,2),s(2110))>>s(2829), (eq(285,2),s(2111))>>s(2830), (eq(285,2),s(2112))>>s(2831), (eq(285,2),s(2113))>>s(2832), (eq(285,2),s(2114))>>s(2833), (eq(285,2),s(2115))>>s(2834), (eq(285,2),s(2116))>>s(2835), (eq(285,2),s(2117))>>s(2836), (eq(285,2),s(2118))>>s(2837), (eq(285,2),s(2119))>>s(2838), (eq(285,2),s(2120))>>s(2839), (eq(285,2),s(2121))>>s(2840), (eq(285,2),s(2122))>>s(2841), (eq(285,2),s(2123))>>s(2842), (eq(285,2),s(2124))>>s(2843), (eq(285,2),s(2125))>>s(2844), (eq(285,2),s(2126))>>s(2845), (eq(285,2),s(2127))>>s(2846), (eq(285,2),s(2128))>>s(2847), (eq(285,2),s(2129))>>s(2848), (eq(285,2),s(2130))>>s(2849), (eq(285,2),s(2131))>>s(2850), (eq(285,2),s(2132))>>s(2851), (eq(285,2),s(2133))>>s(2852), (eq(285,2),s(2134))>>s(2853), (eq(285,2),s(2135))>>s(2854), (eq(285,2),s(2136))>>s(2855), (eq(285,2),s(2137))>>s(2856), (eq(285,2),s(2138))>>s(2857), (eq(285,2),s(2139))>>s(2858), (eq(285,2),s(2140))>>s(2859), (eq(285,2),s(2141))>>s(2860), (eq(285,2),s(2142))>>s(2861), (eq(285,2),s(2143))>>s(2862), (eq(285,2),s(2144))>>s(2863), (eq(285,2),s(2145))>>s(2864), (eq(285,2),s(2146))>>s(2865), (eq(285,2),s(2147))>>s(2866), (eq(285,2),s(2148))>>s(2867), (eq(285,2),s(2149))>>s(2868), (eq(285,2),s(2150))>>s(2869), (eq(285,2),s(2151))>>s(2870), (eq(285,2),s(2152))>>s(2871), (eq(285,2),s(2153))>>s(2872), (eq(285,2),s(2154))>>s(2873), (eq(285,2),s(2155))>>s(2874), (eq(285,2),s(2156))>>s(2875), (eq(285,2),s(2157))>>s(2876), (eq(285,2),s(2158))>>s(2877), (eq(285,2),s(2159))>>s(2878), (eq(285,2),s(2160))>>s(2879), (eq(285,2),s(2161))>>s(2880), (eq(285,2),s(2162))>>s(2881), (eq(285,2),s(2163))>>s(2882), (eq(285,2),s(2164))>>s(2883), (eq(285,2),s(2165))>>s(2884), (eq(285,2),s(2166))>>s(2885), (eq(285,2),s(2167))>>s(2886), (eq(285,2),s(2168))>>s(2887), (eq(285,2),s(2169))>>s(2888), (eq(285,2),s(2170))>>s(2889), (eq(285,2),s(2171))>>s(2890), (eq(285,2),s(2172))>>s(2891), (eq(285,2),s(2173))>>s(2892), (eq(285,2),s(2174))>>s(2893), (eq(285,2),s(2175))>>s(2894), (eq(285,2),s(2176))>>s(2895), (eq(285,2),s(2177))>>s(2896), (eq(285,2),s(2178))>>s(2897), (eq(285,2),s(2179))>>s(2898), (eq(285,2),s(2180))>>s(2899), (eq(285,2),s(2181))>>s(2900), (eq(285,2),s(2182))>>s(2901), (eq(285,2),s(2183))>>s(2902), (eq(285,2),s(2184))>>s(2903), (eq(285,2),s(2185))>>s(2904), (eq(285,2),s(2186))>>s(2905), (eq(285,2),s(2187))>>s(2906), (eq(285,2),s(2188))>>s(2907), (eq(285,2),s(2189))>>s(2908), (eq(285,2),s(2190))>>s(2909), (eq(285,2),s(2191))>>s(2910), (eq(285,2),s(2192))>>s(2911), (eq(285,2),s(2193))>>s(2912), (eq(285,2),s(2205))>>s(2913), (eq(285,2),s(2206))>>s(2914)]

#### Simplifying cost structure of CE 285 
 * Joined equivalent variables [aux(278),s(2805),s(2814)] into aux(278)
 * Joined equivalent variables [aux(279),s(2815)] into aux(279)
 * Joined equivalent variables [aux(281),s(2807),s(2818)] into aux(281)
 * Joined equivalent variables [aux(282),s(2821)] into aux(282)
 * Joined equivalent variables [s(2811),s(2823)] into s(2811)
 * Joined equivalent variables [aux(283),aux(273),aux(278),s(2664)] into aux(283)
 * Joined equivalent variables [aux(284),aux(270),aux(274),aux(279),s(2665)] into aux(284)
 * Joined equivalent variables [aux(285),s(2688),s(2722),s(2816)] into aux(285)
 * Joined equivalent variables [aux(286),s(2689),s(2723),s(2817)] into aux(286)
 * Joined equivalent variables [aux(287),aux(275),aux(280),s(2666)] into aux(287)
 * Joined equivalent variables [aux(288),aux(271),aux(276),aux(281),s(2667)] into aux(288)
 * Joined equivalent variables [aux(289),s(2725),s(2819)] into aux(289)
 * Joined equivalent variables [aux(290),s(2726),s(2820)] into aux(290)
 * Joined equivalent variables [aux(291),aux(272),aux(277),aux(282),s(2668)] into aux(291)
 * Joined equivalent variables [aux(292),s(2692),s(2822)] into aux(292)
 * Joined equivalent variables [aux(293),s(2669)] into aux(293)
 * Joined equivalent variables [s(2696),s(2729),s(2827)] into s(2696)
 * Joined equivalent variables [s(2697),s(2789),s(2828)] into s(2697)
 * Joined equivalent variables [s(2698),s(2829)] into s(2698)
 * Joined equivalent variables [s(2699),s(2830)] into s(2699)
 * Joined equivalent variables [s(2700),s(2792),s(2831)] into s(2700)
 * Joined equivalent variables [s(2730),s(2842)] into s(2730)
 * Joined equivalent variables [s(2731),s(2843)] into s(2731)
 * Joined equivalent variables [s(2732),s(2844)] into s(2732)
 * Joined equivalent variables [s(2733),s(2845)] into s(2733)
 * Joined equivalent variables [s(2734),s(2846)] into s(2734)
 * Joined equivalent variables [s(2735),s(2847)] into s(2735)
 * Joined equivalent variables [s(2736),s(2848)] into s(2736)
 * Joined equivalent variables [s(2675),s(2717),s(2811)] into s(2675)
 * Joined equivalent variables [s(2693),s(2824)] into s(2693)
 * Joined equivalent variables [s(2672),s(2682),s(2715),s(2809)] into s(2672)
 * Joined equivalent variables [s(2673),s(2803)] into s(2673)
 * Joined equivalent variables [s(2670),s(2679),s(2712),s(2806)] into s(2670)
 * Joined equivalent variables [s(2784),s(2896)] into s(2784)
 * Joined equivalent variables [s(2785),s(2897)] into s(2785)
 * Joined equivalent variables [s(2719),s(2813)] into s(2719)
 * Joined equivalent variables [s(2671),s(2681),s(2714),s(2808)] into s(2671)
 * Joined equivalent variables [s(2674),s(2683),s(2716),s(2810)] into s(2674)
 * Joined equivalent variables [s(2677),s(2718),s(2812)] into s(2677)
 * Joined equivalent variables [s(2704),s(2835)] into s(2704)
 * Joined equivalent variables [s(2705),s(2836)] into s(2705)
 * Joined equivalent variables [s(2706),s(2837)] into s(2706)
 * Joined equivalent variables [s(2707),s(2838)] into s(2707)
 * Joined equivalent variables [s(2752),s(2864)] into s(2752)
 * Joined equivalent variables [s(2753),s(2865)] into s(2753)
 * Joined equivalent variables [s(2790),s(2901)] into s(2790)
 * Joined equivalent variables [s(2791),s(2902)] into s(2791)
 * Joined equivalent variables [s(2701),s(2832)] into s(2701)
 * Joined equivalent variables [s(2702),s(2833)] into s(2702)
 * Joined equivalent variables [s(2703),s(2834)] into s(2703)
 * Joined equivalent variables [s(2737),s(2849)] into s(2737)
 * Joined equivalent variables [s(2739),s(2851)] into s(2739)
 * Joined equivalent variables [s(2740),s(2852)] into s(2740)
 * Joined equivalent variables [s(2741),s(2853)] into s(2741)
 * Joined equivalent variables [s(2742),s(2854)] into s(2742)
 * Joined equivalent variables [s(2743),s(2855)] into s(2743)
 * Joined equivalent variables [s(2744),s(2856)] into s(2744)
 * Joined equivalent variables [s(2745),s(2857)] into s(2745)
 * Joined equivalent variables [s(2750),s(2862)] into s(2750)
 * Joined equivalent variables [s(2751),s(2863)] into s(2751)
 * Joined equivalent variables [s(2754),s(2866)] into s(2754)
 * Joined equivalent variables [s(2804),s(2914)] into s(2804)
 * Joined equivalent variables [s(2768),s(2880)] into s(2768)
 * Joined equivalent variables [s(2766),s(2878)] into s(2766)
 * Joined equivalent variables [s(2772),s(2884)] into s(2772)
 * Joined equivalent variables [s(2773),s(2885)] into s(2773)
 * Joined equivalent variables [s(2695),s(2826)] into s(2695)
 * Joined equivalent variables [s(2694),s(2825)] into s(2694)
 * Joined equivalent variables [s(2738),s(2850)] into s(2738)
 * Joined equivalent variables [s(2747),s(2859)] into s(2747)
 * Joined equivalent variables [s(2767),s(2879)] into s(2767)
 * Joined equivalent variables [s(2765),s(2877)] into s(2765)
 * Joined equivalent variables [s(2746),s(2858)] into s(2746)
 * Joined equivalent variables [s(2709),s(2840)] into s(2709)
 * Joined equivalent variables [s(2710),s(2841)] into s(2710)
 * Joined equivalent variables [s(2755),s(2867)] into s(2755)
 * Joined equivalent variables [s(2756),s(2868)] into s(2756)
 * Joined equivalent variables [s(2758),s(2870)] into s(2758)
 * Joined equivalent variables [s(2759),s(2871)] into s(2759)
 * Joined equivalent variables [s(2760),s(2872)] into s(2760)
 * Joined equivalent variables [s(2761),s(2873)] into s(2761)
 * Joined equivalent variables [s(2708),s(2839)] into s(2708)
 * Joined equivalent variables [s(2757),s(2869)] into s(2757)
 * Joined equivalent variables [s(2786),s(2898)] into s(2786)
 * Joined equivalent variables [s(2769),s(2881)] into s(2769)
 * Joined equivalent variables [s(2749),s(2861)] into s(2749)
 * Joined equivalent variables [s(2748),s(2860)] into s(2748)
 * Joined equivalent variables [s(2774),s(2886)] into s(2774)
 * Joined equivalent variables [s(2775),s(2887)] into s(2775)
 * Joined equivalent variables [s(2777),s(2889)] into s(2777)
 * Joined equivalent variables [s(2778),s(2890)] into s(2778)
 * Joined equivalent variables [s(2779),s(2891)] into s(2779)
 * Joined equivalent variables [s(2780),s(2892)] into s(2780)
 * Joined equivalent variables [s(2793),s(2903)] into s(2793)
 * Joined equivalent variables [s(2794),s(2904)] into s(2794)
 * Joined equivalent variables [s(2797),s(2907)] into s(2797)
 * Joined equivalent variables [s(2798),s(2908)] into s(2798)
 * Joined equivalent variables [s(2795),s(2905)] into s(2795)
 * Joined equivalent variables [s(2776),s(2888)] into s(2776)
 * Joined equivalent variables [s(2796),s(2906)] into s(2796)
 * Joined equivalent variables [s(2799),s(2909)] into s(2799)
 * Joined equivalent variables [s(2763),s(2875)] into s(2763)
 * Joined equivalent variables [s(2762),s(2874)] into s(2762)
 * Joined equivalent variables [s(2764),s(2876)] into s(2764)
 * Joined equivalent variables [s(2771),s(2883)] into s(2771)
 * Joined equivalent variables [s(2770),s(2882)] into s(2770)
 * Joined equivalent variables [s(2788),s(2900)] into s(2788)
 * Joined equivalent variables [s(2787),s(2899)] into s(2787)
 * Joined equivalent variables [s(2782),s(2894)] into s(2782)
 * Joined equivalent variables [s(2781),s(2893)] into s(2781)
 * Joined equivalent variables [s(2783),s(2895)] into s(2783)
 * Joined equivalent variables [s(2800),s(2910)] into s(2800)
 * Joined equivalent variables [s(2801),s(2911)] into s(2801)
 * Joined equivalent variables [s(2802),s(2912)] into s(2802)
 * Renamed intermediate variables: 
[ (eq(283,1),s(248))>>s(2915), (eq(283,1),s(247))>>s(2916), (eq(283,1),s(252))>>s(2917), (eq(283,1),s(251))>>s(2918), (eq(283,1),s(253))>>s(2919), (eq(283,1),s(254))>>s(2920), (eq(283,1),s(249))>>s(2921), (eq(283,1),s(250))>>s(2922)]
 * Renamed intermediate variables: 
[ (eq(283,2),s(1900))>>s(2923), (eq(283,2),s(1906))>>s(2924), (eq(283,2),s(1904))>>s(2925), (eq(283,2),s(1905))>>s(2926), (eq(283,2),s(1901))>>s(2927), (eq(283,2),s(1902))>>s(2928), (eq(283,2),s(1903))>>s(2929), (eq(283,2),s(1907))>>s(2930), (eq(283,2),s(1908))>>s(2931), (eq(283,2),s(1909))>>s(2932), (eq(283,2),s(1910))>>s(2933), (eq(283,2),s(1911))>>s(2934), (eq(283,2),s(1912))>>s(2935), (eq(283,2),s(1913))>>s(2936), (eq(283,2),s(1914))>>s(2937), (eq(283,2),s(1915))>>s(2938), (eq(283,2),s(1916))>>s(2939), (eq(283,2),s(1917))>>s(2940), (eq(283,2),s(1918))>>s(2941), (eq(283,2),s(1919))>>s(2942), (eq(283,2),s(1920))>>s(2943), (eq(283,2),s(1921))>>s(2944), (eq(283,2),s(1922))>>s(2945), (eq(283,2),s(1923))>>s(2946), (eq(283,2),s(1924))>>s(2947), (eq(283,2),s(1925))>>s(2948)]

#### Simplifying cost structure of CE 283 
 * Joined equivalent variables [aux(294),s(2915),s(2923)] into aux(294)
 * Joined equivalent variables [aux(295),s(2924)] into aux(295)
 * Joined equivalent variables [aux(296),s(2917),s(2927)] into aux(296)
 * Joined equivalent variables [aux(297),s(2928)] into aux(297)
 * Joined equivalent variables [s(2921),s(2930)] into s(2921)
 * Renamed intermediate variables: 
[ (eq(286,1),s(248))>>s(2949), (eq(286,1),s(247))>>s(2950), (eq(286,1),s(252))>>s(2951), (eq(286,1),s(251))>>s(2952), (eq(286,1),s(253))>>s(2953), (eq(286,1),s(254))>>s(2954), (eq(286,1),s(249))>>s(2955), (eq(286,1),s(250))>>s(2956)]
 * Renamed intermediate variables: 
[ (eq(286,2),s(2385))>>s(2957), (eq(286,2),aux(251))>>s(2958), (eq(286,2),aux(252))>>s(2959), (eq(286,2),aux(253))>>s(2960), (eq(286,2),aux(254))>>s(2961), (eq(286,2),aux(255))>>s(2962), (eq(286,2),aux(256))>>s(2963), (eq(286,2),aux(257))>>s(2964), (eq(286,2),aux(258))>>s(2965), (eq(286,2),s(2304))>>s(2966), (eq(286,2),s(2305))>>s(2967), (eq(286,2),s(2306))>>s(2968), (eq(286,2),s(2307))>>s(2969), (eq(286,2),s(2308))>>s(2970), (eq(286,2),s(2309))>>s(2971), (eq(286,2),s(2310))>>s(2972), (eq(286,2),s(2311))>>s(2973), (eq(286,2),s(2312))>>s(2974), (eq(286,2),s(2313))>>s(2975), (eq(286,2),s(2314))>>s(2976), (eq(286,2),s(2315))>>s(2977), (eq(286,2),s(2316))>>s(2978), (eq(286,2),s(2317))>>s(2979), (eq(286,2),s(2318))>>s(2980), (eq(286,2),s(2319))>>s(2981), (eq(286,2),s(2320))>>s(2982), (eq(286,2),s(2321))>>s(2983), (eq(286,2),s(2322))>>s(2984), (eq(286,2),s(2323))>>s(2985), (eq(286,2),s(2324))>>s(2986), (eq(286,2),s(2325))>>s(2987), (eq(286,2),s(2326))>>s(2988), (eq(286,2),s(2327))>>s(2989), (eq(286,2),s(2328))>>s(2990), (eq(286,2),s(2329))>>s(2991), (eq(286,2),s(2330))>>s(2992), (eq(286,2),s(2331))>>s(2993), (eq(286,2),s(2332))>>s(2994), (eq(286,2),s(2333))>>s(2995), (eq(286,2),s(2334))>>s(2996), (eq(286,2),s(2335))>>s(2997), (eq(286,2),s(2336))>>s(2998), (eq(286,2),s(2337))>>s(2999), (eq(286,2),s(2338))>>s(3000), (eq(286,2),s(2339))>>s(3001), (eq(286,2),s(2340))>>s(3002), (eq(286,2),s(2341))>>s(3003), (eq(286,2),s(2342))>>s(3004), (eq(286,2),s(2343))>>s(3005), (eq(286,2),s(2344))>>s(3006), (eq(286,2),s(2345))>>s(3007), (eq(286,2),s(2346))>>s(3008), (eq(286,2),s(2347))>>s(3009), (eq(286,2),s(2348))>>s(3010), (eq(286,2),s(2349))>>s(3011), (eq(286,2),s(2350))>>s(3012), (eq(286,2),s(2351))>>s(3013), (eq(286,2),s(2352))>>s(3014), (eq(286,2),s(2353))>>s(3015), (eq(286,2),s(2354))>>s(3016), (eq(286,2),s(2355))>>s(3017), (eq(286,2),s(2356))>>s(3018), (eq(286,2),s(2357))>>s(3019), (eq(286,2),s(2358))>>s(3020), (eq(286,2),s(2359))>>s(3021), (eq(286,2),s(2360))>>s(3022), (eq(286,2),s(2361))>>s(3023), (eq(286,2),s(2362))>>s(3024), (eq(286,2),s(2363))>>s(3025), (eq(286,2),s(2364))>>s(3026), (eq(286,2),s(2365))>>s(3027), (eq(286,2),s(2366))>>s(3028), (eq(286,2),s(2367))>>s(3029), (eq(286,2),s(2368))>>s(3030), (eq(286,2),s(2369))>>s(3031), (eq(286,2),s(2370))>>s(3032), (eq(286,2),s(2371))>>s(3033), (eq(286,2),s(2372))>>s(3034), (eq(286,2),s(2373))>>s(3035), (eq(286,2),s(2374))>>s(3036), (eq(286,2),s(2375))>>s(3037), (eq(286,2),s(2376))>>s(3038), (eq(286,2),s(2377))>>s(3039), (eq(286,2),s(2378))>>s(3040), (eq(286,2),s(2389))>>s(3041)]

#### Simplifying cost structure of CE 286 
 * Joined equivalent variables [aux(298),s(2949),s(2958)] into aux(298)
 * Joined equivalent variables [aux(299),s(2959)] into aux(299)
 * Joined equivalent variables [aux(301),s(2951),s(2962)] into aux(301)
 * Joined equivalent variables [aux(302),s(2965)] into aux(302)
 * Joined equivalent variables [s(2955),s(2966)] into s(2955)
 * Renamed intermediate variables: 
[ (eq(287,1),s(248))>>s(3042), (eq(287,1),s(247))>>s(3043), (eq(287,1),s(252))>>s(3044), (eq(287,1),s(251))>>s(3045), (eq(287,1),s(253))>>s(3046), (eq(287,1),s(254))>>s(3047), (eq(287,1),s(249))>>s(3048), (eq(287,1),s(250))>>s(3049)]
 * Renamed intermediate variables: 
[ (eq(287,2),s(2570))>>s(3050), (eq(287,2),aux(260))>>s(3051), (eq(287,2),aux(261))>>s(3052), (eq(287,2),aux(262))>>s(3053), (eq(287,2),aux(263))>>s(3054), (eq(287,2),aux(264))>>s(3055), (eq(287,2),aux(265))>>s(3056), (eq(287,2),aux(266))>>s(3057), (eq(287,2),aux(267))>>s(3058), (eq(287,2),aux(268))>>s(3059), (eq(287,2),s(2473))>>s(3060), (eq(287,2),s(2474))>>s(3061), (eq(287,2),s(2475))>>s(3062), (eq(287,2),s(2476))>>s(3063), (eq(287,2),s(2477))>>s(3064), (eq(287,2),s(2478))>>s(3065), (eq(287,2),s(2479))>>s(3066), (eq(287,2),s(2480))>>s(3067), (eq(287,2),s(2481))>>s(3068), (eq(287,2),s(2482))>>s(3069), (eq(287,2),s(2483))>>s(3070), (eq(287,2),s(2484))>>s(3071), (eq(287,2),s(2485))>>s(3072), (eq(287,2),s(2486))>>s(3073), (eq(287,2),s(2487))>>s(3074), (eq(287,2),s(2488))>>s(3075), (eq(287,2),s(2489))>>s(3076), (eq(287,2),s(2490))>>s(3077), (eq(287,2),s(2491))>>s(3078), (eq(287,2),s(2492))>>s(3079), (eq(287,2),s(2493))>>s(3080), (eq(287,2),s(2494))>>s(3081), (eq(287,2),s(2495))>>s(3082), (eq(287,2),s(2496))>>s(3083), (eq(287,2),s(2497))>>s(3084), (eq(287,2),s(2498))>>s(3085), (eq(287,2),s(2499))>>s(3086), (eq(287,2),s(2500))>>s(3087), (eq(287,2),s(2501))>>s(3088), (eq(287,2),s(2502))>>s(3089), (eq(287,2),s(2503))>>s(3090), (eq(287,2),s(2504))>>s(3091), (eq(287,2),s(2505))>>s(3092), (eq(287,2),s(2506))>>s(3093), (eq(287,2),s(2507))>>s(3094), (eq(287,2),s(2508))>>s(3095), (eq(287,2),s(2509))>>s(3096), (eq(287,2),s(2510))>>s(3097), (eq(287,2),s(2511))>>s(3098), (eq(287,2),s(2512))>>s(3099), (eq(287,2),s(2513))>>s(3100), (eq(287,2),s(2514))>>s(3101), (eq(287,2),s(2515))>>s(3102), (eq(287,2),s(2516))>>s(3103), (eq(287,2),s(2517))>>s(3104), (eq(287,2),s(2518))>>s(3105), (eq(287,2),s(2519))>>s(3106), (eq(287,2),s(2520))>>s(3107), (eq(287,2),s(2521))>>s(3108), (eq(287,2),s(2522))>>s(3109), (eq(287,2),s(2523))>>s(3110), (eq(287,2),s(2524))>>s(3111), (eq(287,2),s(2525))>>s(3112), (eq(287,2),s(2526))>>s(3113), (eq(287,2),s(2527))>>s(3114), (eq(287,2),s(2528))>>s(3115), (eq(287,2),s(2529))>>s(3116), (eq(287,2),s(2530))>>s(3117), (eq(287,2),s(2531))>>s(3118), (eq(287,2),s(2532))>>s(3119), (eq(287,2),s(2533))>>s(3120), (eq(287,2),s(2534))>>s(3121), (eq(287,2),s(2535))>>s(3122), (eq(287,2),s(2536))>>s(3123), (eq(287,2),s(2537))>>s(3124), (eq(287,2),s(2538))>>s(3125), (eq(287,2),s(2539))>>s(3126), (eq(287,2),s(2540))>>s(3127), (eq(287,2),s(2541))>>s(3128), (eq(287,2),s(2542))>>s(3129), (eq(287,2),s(2543))>>s(3130), (eq(287,2),s(2544))>>s(3131), (eq(287,2),s(2545))>>s(3132), (eq(287,2),s(2546))>>s(3133), (eq(287,2),s(2547))>>s(3134), (eq(287,2),s(2548))>>s(3135), (eq(287,2),s(2549))>>s(3136), (eq(287,2),s(2550))>>s(3137), (eq(287,2),s(2551))>>s(3138), (eq(287,2),s(2552))>>s(3139), (eq(287,2),s(2553))>>s(3140), (eq(287,2),s(2554))>>s(3141), (eq(287,2),s(2555))>>s(3142), (eq(287,2),s(2556))>>s(3143), (eq(287,2),s(2557))>>s(3144), (eq(287,2),s(2558))>>s(3145), (eq(287,2),s(2559))>>s(3146), (eq(287,2),s(2560))>>s(3147), (eq(287,2),s(2561))>>s(3148), (eq(287,2),s(2562))>>s(3149), (eq(287,2),s(2574))>>s(3150)]

#### Simplifying cost structure of CE 287 
 * Joined equivalent variables [aux(303),s(3042),s(3051)] into aux(303)
 * Joined equivalent variables [aux(304),s(3052)] into aux(304)
 * Joined equivalent variables [aux(306),s(3044),s(3055)] into aux(306)
 * Joined equivalent variables [aux(307),s(3058)] into aux(307)
 * Joined equivalent variables [s(3048),s(3060)] into s(3048)

#### Cost of chains of mult(A,B,C,D,E,F,G,H,I,J,K,L):
* Chain [221]: 448*s(2672)+126*s(2673)+84*s(2674)+568*s(2675)+108*s(2676)+78*s(2677)+38*s(2684)+6*s(2685)+66*s(2693)+33*s(2694)+33*s(2695)+30*s(2703)+27*s(2708)+27*s(2709)+30*s(2710)+88*s(2747)+44*s(2748)+44*s(2749)+40*s(2757)+36*s(2762)+36*s(2763)+40*s(2764)+88*s(2769)+44*s(2770)+44*s(2771)+40*s(2776)+36*s(2781)+36*s(2782)+40*s(2783)+88*s(2786)+44*s(2787)+44*s(2788)+40*s(2795)+36*s(2800)+36*s(2801)+40*s(2802)+12*s(2804)+18*s(2913)+87
  Such that:aux(269) =< 2
aux(283) =< A
aux(284) =< B
aux(285) =< B+F
aux(286) =< B+3*F
aux(287) =< C
aux(288) =< E
aux(289) =< E+F
aux(290) =< E+3*F
aux(291) =< F
aux(292) =< F+1
aux(293) =< G
s(2670) =< aux(287)
s(2671) =< aux(293)
s(2670) =< aux(284)
s(2671) =< aux(291)
s(2672) =< aux(288)
s(2673) =< aux(291)
s(2674) =< s(2672)*s(2671)
s(2675) =< aux(283)
s(2676) =< aux(284)
s(2677) =< s(2675)*s(2670)
s(2684) =< aux(269)
s(2693) =< aux(284)
s(2694) =< aux(284)
s(2695) =< aux(284)
s(2693) =< aux(288)
s(2694) =< aux(288)
s(2695) =< aux(288)
s(2696) =< aux(291)
s(2697) =< aux(291)-1
s(2698) =< aux(286)+1
s(2699) =< aux(285)+1
s(2700) =< aux(291)-2
s(2701) =< s(2693)*aux(286)
s(2702) =< s(2693)*aux(285)
s(2703) =< s(2693)*aux(291)
s(2704) =< s(2693)*s(2697)
s(2705) =< s(2693)*s(2698)
s(2706) =< s(2693)*s(2699)
s(2707) =< s(2693)*s(2700)
s(2708) =< s(2705)+s(2701)+aux(286)
s(2709) =< s(2705)+s(2701)+aux(286)
s(2708) =< s(2706)+s(2702)+aux(285)
s(2709) =< s(2706)+s(2702)+aux(285)
s(2695) =< s(2706)+s(2702)+aux(285)
s(2695) =< s(2705)+s(2701)+aux(286)
s(2694) =< s(2704)+s(2707)+aux(291)
s(2695) =< s(2704)+s(2707)+aux(291)
s(2709) =< s(2695)*s(2696)
s(2710) =< s(2694)*s(2696)
s(2708) =< s(2694)*aux(292)
s(2685) =< s(2684)*s(2670)
s(2719) =< aux(287)
s(2730) =< aux(290)
s(2731) =< aux(289)
s(2732) =< aux(288)
s(2733) =< aux(286)
s(2734) =< aux(285)
s(2735) =< aux(284)
s(2736) =< aux(291)+1
s(2737) =< s(2675)*aux(288)
s(2738) =< s(2675)*aux(284)
s(2739) =< s(2675)*s(2696)
s(2740) =< s(2675)*s(2730)
s(2741) =< s(2675)*s(2731)
s(2742) =< s(2675)*s(2732)
s(2743) =< s(2675)*s(2733)
s(2744) =< s(2675)*s(2734)
s(2745) =< s(2675)*s(2735)
s(2746) =< s(2745)
s(2747) =< s(2745)
s(2748) =< s(2745)
s(2749) =< s(2745)
s(2747) =< s(2742)
s(2748) =< s(2742)
s(2749) =< s(2742)
s(2750) =< s(2696)
s(2751) =< s(2696)-1
s(2752) =< s(2733)+1
s(2753) =< s(2734)+1
s(2754) =< s(2696)-2
s(2755) =< s(2747)*s(2733)
s(2756) =< s(2747)*s(2734)
s(2757) =< s(2747)*s(2696)
s(2758) =< s(2747)*s(2751)
s(2759) =< s(2747)*s(2752)
s(2760) =< s(2747)*s(2753)
s(2761) =< s(2747)*s(2754)
s(2762) =< s(2759)+s(2755)+s(2743)
s(2763) =< s(2759)+s(2755)+s(2743)
s(2762) =< s(2760)+s(2756)+s(2744)
s(2763) =< s(2760)+s(2756)+s(2744)
s(2749) =< s(2760)+s(2756)+s(2744)
s(2749) =< s(2759)+s(2755)+s(2743)
s(2748) =< s(2758)+s(2761)+s(2739)
s(2749) =< s(2758)+s(2761)+s(2739)
s(2763) =< s(2749)*s(2750)
s(2764) =< s(2748)*s(2750)
s(2762) =< s(2748)*s(2736)
s(2765) =< s(2744)
s(2766) =< s(2734)
s(2767) =< s(2743)
s(2768) =< s(2733)
s(2746) =< s(2742)
s(2765) =< s(2741)
s(2766) =< s(2731)
s(2767) =< s(2740)
s(2768) =< s(2730)
s(2769) =< s(2746)
s(2770) =< s(2746)
s(2771) =< s(2746)
s(2769) =< s(2742)
s(2770) =< s(2742)
s(2771) =< s(2742)
s(2772) =< s(2768)+1
s(2773) =< s(2766)+1
s(2774) =< s(2769)*s(2768)
s(2775) =< s(2769)*s(2766)
s(2776) =< s(2769)*s(2696)
s(2777) =< s(2769)*s(2751)
s(2778) =< s(2769)*s(2772)
s(2779) =< s(2769)*s(2773)
s(2780) =< s(2769)*s(2754)
s(2781) =< s(2778)+s(2774)+s(2767)
s(2782) =< s(2778)+s(2774)+s(2767)
s(2781) =< s(2779)+s(2775)+s(2765)
s(2782) =< s(2779)+s(2775)+s(2765)
s(2771) =< s(2779)+s(2775)+s(2765)
s(2771) =< s(2778)+s(2774)+s(2767)
s(2770) =< s(2777)+s(2780)+s(2739)
s(2771) =< s(2777)+s(2780)+s(2739)
s(2782) =< s(2771)*s(2750)
s(2783) =< s(2770)*s(2750)
s(2781) =< s(2770)*s(2736)
s(2784) =< aux(285)
s(2785) =< aux(286)
s(2738) =< s(2737)
s(2784) =< aux(289)
s(2785) =< aux(290)
s(2786) =< s(2738)
s(2787) =< s(2738)
s(2788) =< s(2738)
s(2786) =< s(2737)
s(2787) =< s(2737)
s(2788) =< s(2737)
s(2790) =< s(2785)+1
s(2791) =< s(2784)+1
s(2793) =< s(2786)*s(2785)
s(2794) =< s(2786)*s(2784)
s(2795) =< s(2786)*aux(291)
s(2796) =< s(2786)*s(2697)
s(2797) =< s(2786)*s(2790)
s(2798) =< s(2786)*s(2791)
s(2799) =< s(2786)*s(2700)
s(2800) =< s(2797)+s(2793)+s(2767)
s(2801) =< s(2797)+s(2793)+s(2767)
s(2800) =< s(2798)+s(2794)+s(2765)
s(2801) =< s(2798)+s(2794)+s(2765)
s(2788) =< s(2798)+s(2794)+s(2765)
s(2788) =< s(2797)+s(2793)+s(2767)
s(2787) =< s(2796)+s(2799)+s(2739)
s(2788) =< s(2796)+s(2799)+s(2739)
s(2801) =< s(2788)*s(2696)
s(2802) =< s(2787)*s(2696)
s(2800) =< s(2787)*s(2736)
s(2719) =< aux(291)
s(2804) =< s(2675)*s(2719)
s(2913) =< aux(292)

  with precondition: [D=1,H=1,I=1,J=0,L=1,A>=2,B>=1,C>=0,E>=2,F>=1,G>=0,K>=0] 

* Chain [220]: 32*s(2919)+6*s(2920)+48*s(2921)+6*s(2922)+22*s(2931)+11*s(2932)+11*s(2933)+10*s(2941)+9*s(2946)+9*s(2947)+10*s(2948)+76
  Such that:s(2925) =< B+F
s(2926) =< B+3*F
s(2916) =< C
s(2929) =< F+1
s(2918) =< G
aux(294) =< 2
aux(295) =< B
aux(296) =< E
aux(297) =< F
s(2916) =< aux(295)
s(2918) =< aux(297)
s(2921) =< aux(294)
s(2931) =< aux(295)
s(2932) =< aux(295)
s(2933) =< aux(295)
s(2931) =< aux(296)
s(2932) =< aux(296)
s(2933) =< aux(296)
s(2934) =< aux(297)
s(2935) =< aux(297)-1
s(2936) =< s(2926)+1
s(2937) =< s(2925)+1
s(2938) =< aux(297)-2
s(2939) =< s(2931)*s(2926)
s(2940) =< s(2931)*s(2925)
s(2941) =< s(2931)*aux(297)
s(2942) =< s(2931)*s(2935)
s(2943) =< s(2931)*s(2936)
s(2944) =< s(2931)*s(2937)
s(2945) =< s(2931)*s(2938)
s(2946) =< s(2943)+s(2939)+s(2926)
s(2947) =< s(2943)+s(2939)+s(2926)
s(2946) =< s(2944)+s(2940)+s(2925)
s(2947) =< s(2944)+s(2940)+s(2925)
s(2933) =< s(2944)+s(2940)+s(2925)
s(2933) =< s(2943)+s(2939)+s(2926)
s(2932) =< s(2942)+s(2945)+aux(297)
s(2933) =< s(2942)+s(2945)+aux(297)
s(2947) =< s(2933)*s(2934)
s(2948) =< s(2932)*s(2934)
s(2946) =< s(2932)*s(2929)
s(2919) =< aux(296)
s(2920) =< s(2919)*s(2918)
s(2922) =< s(2921)*s(2916)

  with precondition: [A=2,D=1,H=1,I=2,J=1,L=1,B>=1,C>=1,E>=2,F>=1,K>=1,G+1>=E] 

* Chain [219]: 32*s(2953)+6*s(2954)+108*s(2955)+6*s(2956)+44*s(2985)+22*s(2986)+22*s(2987)+20*s(2995)+18*s(3000)+18*s(3001)+20*s(3002)+44*s(3007)+22*s(3008)+22*s(3009)+20*s(3014)+18*s(3019)+18*s(3020)+20*s(3021)+44*s(3024)+22*s(3025)+22*s(3026)+20*s(3033)+18*s(3038)+18*s(3039)+20*s(3040)+6*s(3041)+63
  Such that:s(2960) =< B+F
s(2961) =< B+3*F
s(2963) =< E+F
s(2964) =< E+3*F
s(2952) =< G
aux(298) =< A
aux(299) =< B
aux(300) =< C
aux(301) =< E
aux(302) =< F
s(2950) =< aux(299)
s(2950) =< aux(300)
s(2957) =< aux(300)
s(2952) =< aux(302)
s(2955) =< aux(298)
s(2967) =< aux(302)
s(2968) =< s(2964)
s(2969) =< s(2963)
s(2970) =< aux(301)
s(2971) =< s(2961)
s(2972) =< s(2960)
s(2973) =< aux(299)
s(2974) =< aux(302)+1
s(2975) =< s(2955)*aux(301)
s(2976) =< s(2955)*aux(299)
s(2977) =< s(2955)*s(2967)
s(2978) =< s(2955)*s(2968)
s(2979) =< s(2955)*s(2969)
s(2980) =< s(2955)*s(2970)
s(2981) =< s(2955)*s(2971)
s(2982) =< s(2955)*s(2972)
s(2983) =< s(2955)*s(2973)
s(2984) =< s(2983)
s(2985) =< s(2983)
s(2986) =< s(2983)
s(2987) =< s(2983)
s(2985) =< s(2980)
s(2986) =< s(2980)
s(2987) =< s(2980)
s(2988) =< s(2967)
s(2989) =< s(2967)-1
s(2990) =< s(2971)+1
s(2991) =< s(2972)+1
s(2992) =< s(2967)-2
s(2993) =< s(2985)*s(2971)
s(2994) =< s(2985)*s(2972)
s(2995) =< s(2985)*s(2967)
s(2996) =< s(2985)*s(2989)
s(2997) =< s(2985)*s(2990)
s(2998) =< s(2985)*s(2991)
s(2999) =< s(2985)*s(2992)
s(3000) =< s(2997)+s(2993)+s(2981)
s(3001) =< s(2997)+s(2993)+s(2981)
s(3000) =< s(2998)+s(2994)+s(2982)
s(3001) =< s(2998)+s(2994)+s(2982)
s(2987) =< s(2998)+s(2994)+s(2982)
s(2987) =< s(2997)+s(2993)+s(2981)
s(2986) =< s(2996)+s(2999)+s(2977)
s(2987) =< s(2996)+s(2999)+s(2977)
s(3001) =< s(2987)*s(2988)
s(3002) =< s(2986)*s(2988)
s(3000) =< s(2986)*s(2974)
s(3003) =< s(2982)
s(3004) =< s(2972)
s(3005) =< s(2981)
s(3006) =< s(2971)
s(2984) =< s(2980)
s(3003) =< s(2979)
s(3004) =< s(2969)
s(3005) =< s(2978)
s(3006) =< s(2968)
s(3007) =< s(2984)
s(3008) =< s(2984)
s(3009) =< s(2984)
s(3007) =< s(2980)
s(3008) =< s(2980)
s(3009) =< s(2980)
s(3010) =< s(3006)+1
s(3011) =< s(3004)+1
s(3012) =< s(3007)*s(3006)
s(3013) =< s(3007)*s(3004)
s(3014) =< s(3007)*s(2967)
s(3015) =< s(3007)*s(2989)
s(3016) =< s(3007)*s(3010)
s(3017) =< s(3007)*s(3011)
s(3018) =< s(3007)*s(2992)
s(3019) =< s(3016)+s(3012)+s(3005)
s(3020) =< s(3016)+s(3012)+s(3005)
s(3019) =< s(3017)+s(3013)+s(3003)
s(3020) =< s(3017)+s(3013)+s(3003)
s(3009) =< s(3017)+s(3013)+s(3003)
s(3009) =< s(3016)+s(3012)+s(3005)
s(3008) =< s(3015)+s(3018)+s(2977)
s(3009) =< s(3015)+s(3018)+s(2977)
s(3020) =< s(3009)*s(2988)
s(3021) =< s(3008)*s(2988)
s(3019) =< s(3008)*s(2974)
s(3022) =< s(2960)
s(3023) =< s(2961)
s(2976) =< s(2975)
s(3022) =< s(2963)
s(3023) =< s(2964)
s(3024) =< s(2976)
s(3025) =< s(2976)
s(3026) =< s(2976)
s(3024) =< s(2975)
s(3025) =< s(2975)
s(3026) =< s(2975)
s(3027) =< aux(302)-1
s(3028) =< s(3023)+1
s(3029) =< s(3022)+1
s(3030) =< aux(302)-2
s(3031) =< s(3024)*s(3023)
s(3032) =< s(3024)*s(3022)
s(3033) =< s(3024)*aux(302)
s(3034) =< s(3024)*s(3027)
s(3035) =< s(3024)*s(3028)
s(3036) =< s(3024)*s(3029)
s(3037) =< s(3024)*s(3030)
s(3038) =< s(3035)+s(3031)+s(3005)
s(3039) =< s(3035)+s(3031)+s(3005)
s(3038) =< s(3036)+s(3032)+s(3003)
s(3039) =< s(3036)+s(3032)+s(3003)
s(3026) =< s(3036)+s(3032)+s(3003)
s(3026) =< s(3035)+s(3031)+s(3005)
s(3025) =< s(3034)+s(3037)+s(2977)
s(3026) =< s(3034)+s(3037)+s(2977)
s(3039) =< s(3026)*s(2967)
s(3040) =< s(3025)*s(2967)
s(3038) =< s(3025)*s(2974)
s(2957) =< aux(302)
s(3041) =< s(2955)*s(2957)
s(2953) =< aux(301)
s(2954) =< s(2953)*s(2952)
s(2956) =< s(2955)*s(2950)

  with precondition: [D=1,H=1,L=1,A=I,A>=2,B>=2,E>=2,J>=1,C+1>=A,K+1>=A,G+1>=E,F>=J] 

* Chain [218]: 32*s(3046)+6*s(3047)+108*s(3048)+6*s(3049)+44*s(3061)+22*s(3062)+22*s(3063)+20*s(3071)+18*s(3076)+18*s(3077)+20*s(3078)+44*s(3096)+22*s(3097)+22*s(3098)+20*s(3106)+18*s(3111)+18*s(3112)+20*s(3113)+44*s(3118)+22*s(3119)+22*s(3120)+20*s(3125)+18*s(3130)+18*s(3131)+20*s(3132)+44*s(3135)+22*s(3136)+22*s(3137)+20*s(3142)+18*s(3147)+18*s(3148)+20*s(3149)+6*s(3150)+76
  Such that:s(3053) =< B+F
s(3054) =< B+3*F
s(3056) =< E+F
s(3057) =< E+3*F
s(3059) =< F+1
s(3045) =< G
aux(303) =< A
aux(304) =< B
aux(305) =< C
aux(306) =< E
aux(307) =< F
s(3043) =< aux(304)
s(3043) =< aux(305)
s(3050) =< aux(305)
s(3045) =< aux(307)
s(3048) =< aux(303)
s(3061) =< aux(304)
s(3062) =< aux(304)
s(3063) =< aux(304)
s(3061) =< aux(306)
s(3062) =< aux(306)
s(3063) =< aux(306)
s(3064) =< aux(307)
s(3065) =< aux(307)-1
s(3066) =< s(3054)+1
s(3067) =< s(3053)+1
s(3068) =< aux(307)-2
s(3069) =< s(3061)*s(3054)
s(3070) =< s(3061)*s(3053)
s(3071) =< s(3061)*aux(307)
s(3072) =< s(3061)*s(3065)
s(3073) =< s(3061)*s(3066)
s(3074) =< s(3061)*s(3067)
s(3075) =< s(3061)*s(3068)
s(3076) =< s(3073)+s(3069)+s(3054)
s(3077) =< s(3073)+s(3069)+s(3054)
s(3076) =< s(3074)+s(3070)+s(3053)
s(3077) =< s(3074)+s(3070)+s(3053)
s(3063) =< s(3074)+s(3070)+s(3053)
s(3063) =< s(3073)+s(3069)+s(3054)
s(3062) =< s(3072)+s(3075)+aux(307)
s(3063) =< s(3072)+s(3075)+aux(307)
s(3077) =< s(3063)*s(3064)
s(3078) =< s(3062)*s(3064)
s(3076) =< s(3062)*s(3059)
s(3079) =< s(3057)
s(3080) =< s(3056)
s(3081) =< aux(306)
s(3082) =< s(3054)
s(3083) =< s(3053)
s(3084) =< aux(304)
s(3085) =< aux(307)+1
s(3086) =< s(3048)*aux(306)
s(3087) =< s(3048)*aux(304)
s(3088) =< s(3048)*s(3064)
s(3089) =< s(3048)*s(3079)
s(3090) =< s(3048)*s(3080)
s(3091) =< s(3048)*s(3081)
s(3092) =< s(3048)*s(3082)
s(3093) =< s(3048)*s(3083)
s(3094) =< s(3048)*s(3084)
s(3095) =< s(3094)
s(3096) =< s(3094)
s(3097) =< s(3094)
s(3098) =< s(3094)
s(3096) =< s(3091)
s(3097) =< s(3091)
s(3098) =< s(3091)
s(3099) =< s(3064)
s(3100) =< s(3064)-1
s(3101) =< s(3082)+1
s(3102) =< s(3083)+1
s(3103) =< s(3064)-2
s(3104) =< s(3096)*s(3082)
s(3105) =< s(3096)*s(3083)
s(3106) =< s(3096)*s(3064)
s(3107) =< s(3096)*s(3100)
s(3108) =< s(3096)*s(3101)
s(3109) =< s(3096)*s(3102)
s(3110) =< s(3096)*s(3103)
s(3111) =< s(3108)+s(3104)+s(3092)
s(3112) =< s(3108)+s(3104)+s(3092)
s(3111) =< s(3109)+s(3105)+s(3093)
s(3112) =< s(3109)+s(3105)+s(3093)
s(3098) =< s(3109)+s(3105)+s(3093)
s(3098) =< s(3108)+s(3104)+s(3092)
s(3097) =< s(3107)+s(3110)+s(3088)
s(3098) =< s(3107)+s(3110)+s(3088)
s(3112) =< s(3098)*s(3099)
s(3113) =< s(3097)*s(3099)
s(3111) =< s(3097)*s(3085)
s(3114) =< s(3093)
s(3115) =< s(3083)
s(3116) =< s(3092)
s(3117) =< s(3082)
s(3095) =< s(3091)
s(3114) =< s(3090)
s(3115) =< s(3080)
s(3116) =< s(3089)
s(3117) =< s(3079)
s(3118) =< s(3095)
s(3119) =< s(3095)
s(3120) =< s(3095)
s(3118) =< s(3091)
s(3119) =< s(3091)
s(3120) =< s(3091)
s(3121) =< s(3117)+1
s(3122) =< s(3115)+1
s(3123) =< s(3118)*s(3117)
s(3124) =< s(3118)*s(3115)
s(3125) =< s(3118)*s(3064)
s(3126) =< s(3118)*s(3100)
s(3127) =< s(3118)*s(3121)
s(3128) =< s(3118)*s(3122)
s(3129) =< s(3118)*s(3103)
s(3130) =< s(3127)+s(3123)+s(3116)
s(3131) =< s(3127)+s(3123)+s(3116)
s(3130) =< s(3128)+s(3124)+s(3114)
s(3131) =< s(3128)+s(3124)+s(3114)
s(3120) =< s(3128)+s(3124)+s(3114)
s(3120) =< s(3127)+s(3123)+s(3116)
s(3119) =< s(3126)+s(3129)+s(3088)
s(3120) =< s(3126)+s(3129)+s(3088)
s(3131) =< s(3120)*s(3099)
s(3132) =< s(3119)*s(3099)
s(3130) =< s(3119)*s(3085)
s(3133) =< s(3053)
s(3134) =< s(3054)
s(3087) =< s(3086)
s(3133) =< s(3056)
s(3134) =< s(3057)
s(3135) =< s(3087)
s(3136) =< s(3087)
s(3137) =< s(3087)
s(3135) =< s(3086)
s(3136) =< s(3086)
s(3137) =< s(3086)
s(3138) =< s(3134)+1
s(3139) =< s(3133)+1
s(3140) =< s(3135)*s(3134)
s(3141) =< s(3135)*s(3133)
s(3142) =< s(3135)*aux(307)
s(3143) =< s(3135)*s(3065)
s(3144) =< s(3135)*s(3138)
s(3145) =< s(3135)*s(3139)
s(3146) =< s(3135)*s(3068)
s(3147) =< s(3144)+s(3140)+s(3116)
s(3148) =< s(3144)+s(3140)+s(3116)
s(3147) =< s(3145)+s(3141)+s(3114)
s(3148) =< s(3145)+s(3141)+s(3114)
s(3137) =< s(3145)+s(3141)+s(3114)
s(3137) =< s(3144)+s(3140)+s(3116)
s(3136) =< s(3143)+s(3146)+s(3088)
s(3137) =< s(3143)+s(3146)+s(3088)
s(3148) =< s(3137)*s(3064)
s(3149) =< s(3136)*s(3064)
s(3147) =< s(3136)*s(3085)
s(3050) =< aux(307)
s(3150) =< s(3048)*s(3050)
s(3046) =< aux(306)
s(3047) =< s(3046)*s(3045)
s(3049) =< s(3048)*s(3043)

  with precondition: [D=1,H=1,L=1,A=I,A>=3,B>=1,E>=2,F>=1,J>=1,C+1>=A,K+1>=A,G+1>=E,F+1>=J] 


#### Simplifying cost structure of CE 288 
 * Renamed intermediate variables: 
[ (eq(290,2),s(781))>>s(3151)]

#### Simplifying cost structure of CE 290 
 * Renamed intermediate variables: 
[ (eq(289,2),s(772))>>s(3152), (eq(289,2),s(773))>>s(3153)]

#### Simplifying cost structure of CE 289 

#### Simplifying cost structure of CE 291 
 * Renamed intermediate variables: 
[ (eq(293,2),s(781))>>s(3154)]

#### Simplifying cost structure of CE 293 
 * Renamed intermediate variables: 
[ (eq(292,2),s(772))>>s(3155), (eq(292,2),s(773))>>s(3156)]

#### Simplifying cost structure of CE 292 
 * Renamed intermediate variables: 
[ (eq(294,1),aux(159))>>s(3157), (eq(294,1),aux(168))>>s(3158), (eq(294,1),aux(160))>>s(3159), (eq(294,1),aux(172))>>s(3160), (eq(294,1),it(189))>>s(3161), (eq(294,1),aux(162))>>s(3162), (eq(294,1),aux(161))>>s(3163), (eq(294,1),s(806))>>s(3164), (eq(294,1),s(807))>>s(3165), (eq(294,1),s(809))>>s(3166), (eq(294,1),s(810))>>s(3167), (eq(294,1),s(808))>>s(3168), (eq(294,1),s(805))>>s(3169)]
 * Renamed intermediate variables: 
[ (eq(294,2),s(772))>>s(3170), (eq(294,2),s(773))>>s(3171)]

#### Simplifying cost structure of CE 294 
 * Joined equivalent variables [aux(308),s(3160),s(3170)] into aux(308)
 * Renamed intermediate variables: 
[ (eq(298,1),aux(159))>>s(3172), (eq(298,1),aux(168))>>s(3173), (eq(298,1),aux(160))>>s(3174), (eq(298,1),aux(170))>>s(3175), (eq(298,1),it(189))>>s(3176), (eq(298,1),aux(162))>>s(3177), (eq(298,1),aux(161))>>s(3178), (eq(298,1),s(806))>>s(3179), (eq(298,1),s(807))>>s(3180), (eq(298,1),s(809))>>s(3181), (eq(298,1),s(810))>>s(3182), (eq(298,1),s(808))>>s(3183), (eq(298,1),s(805))>>s(3184)]
 * Renamed intermediate variables: 
[ (eq(298,2),s(772))>>s(3185), (eq(298,2),s(773))>>s(3186)]

#### Simplifying cost structure of CE 298 
 * Joined equivalent variables [aux(309),s(3175),s(3185)] into aux(309)
 * Renamed intermediate variables: 
[ (eq(302,1),aux(166))>>s(3187), (eq(302,1),aux(159))>>s(3188), (eq(302,1),aux(160))>>s(3189), (eq(302,1),aux(173))>>s(3190), (eq(302,1),it(189))>>s(3191), (eq(302,1),aux(162))>>s(3192), (eq(302,1),aux(161))>>s(3193), (eq(302,1),s(806))>>s(3194), (eq(302,1),s(807))>>s(3195), (eq(302,1),s(809))>>s(3196), (eq(302,1),s(810))>>s(3197), (eq(302,1),s(808))>>s(3198), (eq(302,1),s(805))>>s(3199)]
 * Renamed intermediate variables: 
[ (eq(302,2),s(772))>>s(3200), (eq(302,2),s(773))>>s(3201)]

#### Simplifying cost structure of CE 302 
 * Joined equivalent variables [aux(310),s(3190),s(3200)] into aux(310)
 * Renamed intermediate variables: 
[ (eq(306,1),aux(166))>>s(3202), (eq(306,1),aux(159))>>s(3203), (eq(306,1),aux(160))>>s(3204), (eq(306,1),aux(171))>>s(3205), (eq(306,1),it(189))>>s(3206), (eq(306,1),aux(162))>>s(3207), (eq(306,1),aux(161))>>s(3208), (eq(306,1),s(806))>>s(3209), (eq(306,1),s(807))>>s(3210), (eq(306,1),s(809))>>s(3211), (eq(306,1),s(810))>>s(3212), (eq(306,1),s(808))>>s(3213), (eq(306,1),s(805))>>s(3214)]
 * Renamed intermediate variables: 
[ (eq(306,2),s(772))>>s(3215), (eq(306,2),s(773))>>s(3216)]

#### Simplifying cost structure of CE 306 
 * Joined equivalent variables [aux(311),s(3205),s(3215)] into aux(311)
 * Renamed intermediate variables: 
[ (eq(295,1),aux(159))>>s(3217), (eq(295,1),aux(168))>>s(3218), (eq(295,1),aux(160))>>s(3219), (eq(295,1),aux(172))>>s(3220), (eq(295,1),it(189))>>s(3221), (eq(295,1),aux(162))>>s(3222), (eq(295,1),aux(161))>>s(3223), (eq(295,1),s(806))>>s(3224), (eq(295,1),s(807))>>s(3225), (eq(295,1),s(809))>>s(3226), (eq(295,1),s(810))>>s(3227), (eq(295,1),s(808))>>s(3228), (eq(295,1),s(805))>>s(3229)]
 * Renamed intermediate variables: 
[ (eq(295,2),s(774))>>s(3230), (eq(295,2),s(775))>>s(3231), (eq(295,2),s(776))>>s(3232), (eq(295,2),s(777))>>s(3233), (eq(295,2),s(778))>>s(3234), (eq(295,2),s(779))>>s(3235), (eq(295,2),s(780))>>s(3236)]

#### Simplifying cost structure of CE 295 
 * Joined equivalent variables [aux(312),s(3219)] into aux(312)
 * Joined equivalent variables [aux(313),s(3220),s(3231)] into aux(313)
 * Joined equivalent variables [aux(314),s(3217)] into aux(314)
 * Joined equivalent variables [s(3230),s(3234)] into s(3230)
 * Renamed intermediate variables: 
[ (eq(299,1),aux(159))>>s(3237), (eq(299,1),aux(168))>>s(3238), (eq(299,1),aux(160))>>s(3239), (eq(299,1),aux(170))>>s(3240), (eq(299,1),it(189))>>s(3241), (eq(299,1),aux(162))>>s(3242), (eq(299,1),aux(161))>>s(3243), (eq(299,1),s(806))>>s(3244), (eq(299,1),s(807))>>s(3245), (eq(299,1),s(809))>>s(3246), (eq(299,1),s(810))>>s(3247), (eq(299,1),s(808))>>s(3248), (eq(299,1),s(805))>>s(3249)]
 * Renamed intermediate variables: 
[ (eq(299,2),s(774))>>s(3250), (eq(299,2),s(775))>>s(3251), (eq(299,2),s(776))>>s(3252), (eq(299,2),s(777))>>s(3253), (eq(299,2),s(778))>>s(3254), (eq(299,2),s(779))>>s(3255), (eq(299,2),s(780))>>s(3256)]

#### Simplifying cost structure of CE 299 
 * Joined equivalent variables [aux(315),s(3239)] into aux(315)
 * Joined equivalent variables [aux(316),s(3240),s(3251)] into aux(316)
 * Joined equivalent variables [aux(317),s(3237)] into aux(317)
 * Joined equivalent variables [s(3250),s(3254)] into s(3250)
 * Joined equivalent variables [aux(318),s(3218),s(3238)] into aux(318)
 * Joined equivalent variables [aux(319),aux(312),aux(315)] into aux(319)
 * Joined equivalent variables [aux(320),s(3232),s(3252)] into aux(320)
 * Joined equivalent variables [aux(321),aux(313),aux(316)] into aux(321)
 * Joined equivalent variables [aux(322),aux(314),aux(317)] into aux(322)
 * Joined equivalent variables [s(3222),s(3242)] into s(3222)
 * Joined equivalent variables [s(3223),s(3243)] into s(3223)
 * Joined equivalent variables [s(3221),s(3241)] into s(3221)
 * Joined equivalent variables [s(3230),s(3250)] into s(3230)
 * Joined equivalent variables [s(3233),s(3253)] into s(3233)
 * Joined equivalent variables [s(3226),s(3246)] into s(3226)
 * Joined equivalent variables [s(3227),s(3247)] into s(3227)
 * Joined equivalent variables [s(3236),s(3256)] into s(3236)
 * Joined equivalent variables [s(3224),s(3244)] into s(3224)
 * Joined equivalent variables [s(3225),s(3245)] into s(3225)
 * Joined equivalent variables [s(3235),s(3255)] into s(3235)
 * Joined equivalent variables [s(3229),s(3249)] into s(3229)
 * Joined equivalent variables [s(3228),s(3248)] into s(3228)
 * Renamed intermediate variables: 
[ (eq(303,1),aux(166))>>s(3257), (eq(303,1),aux(159))>>s(3258), (eq(303,1),aux(160))>>s(3259), (eq(303,1),aux(173))>>s(3260), (eq(303,1),it(189))>>s(3261), (eq(303,1),aux(162))>>s(3262), (eq(303,1),aux(161))>>s(3263), (eq(303,1),s(806))>>s(3264), (eq(303,1),s(807))>>s(3265), (eq(303,1),s(809))>>s(3266), (eq(303,1),s(810))>>s(3267), (eq(303,1),s(808))>>s(3268), (eq(303,1),s(805))>>s(3269)]
 * Renamed intermediate variables: 
[ (eq(303,2),s(774))>>s(3270), (eq(303,2),s(775))>>s(3271), (eq(303,2),s(776))>>s(3272), (eq(303,2),s(777))>>s(3273), (eq(303,2),s(778))>>s(3274), (eq(303,2),s(779))>>s(3275), (eq(303,2),s(780))>>s(3276)]

#### Simplifying cost structure of CE 303 
 * Joined equivalent variables [aux(323),s(3260),s(3271)] into aux(323)
 * Joined equivalent variables [aux(324),s(3259)] into aux(324)
 * Joined equivalent variables [aux(325),s(3258)] into aux(325)
 * Joined equivalent variables [s(3270),s(3274)] into s(3270)
 * Renamed intermediate variables: 
[ (eq(307,1),aux(166))>>s(3277), (eq(307,1),aux(159))>>s(3278), (eq(307,1),aux(160))>>s(3279), (eq(307,1),aux(171))>>s(3280), (eq(307,1),it(189))>>s(3281), (eq(307,1),aux(162))>>s(3282), (eq(307,1),aux(161))>>s(3283), (eq(307,1),s(806))>>s(3284), (eq(307,1),s(807))>>s(3285), (eq(307,1),s(809))>>s(3286), (eq(307,1),s(810))>>s(3287), (eq(307,1),s(808))>>s(3288), (eq(307,1),s(805))>>s(3289)]
 * Renamed intermediate variables: 
[ (eq(307,2),s(774))>>s(3290), (eq(307,2),s(775))>>s(3291), (eq(307,2),s(776))>>s(3292), (eq(307,2),s(777))>>s(3293), (eq(307,2),s(778))>>s(3294), (eq(307,2),s(779))>>s(3295), (eq(307,2),s(780))>>s(3296)]

#### Simplifying cost structure of CE 307 
 * Joined equivalent variables [aux(326),s(3280),s(3291)] into aux(326)
 * Joined equivalent variables [aux(327),s(3279)] into aux(327)
 * Joined equivalent variables [aux(328),s(3278)] into aux(328)
 * Joined equivalent variables [s(3290),s(3294)] into s(3290)
 * Joined equivalent variables [aux(329),s(3257),s(3277)] into aux(329)
 * Joined equivalent variables [aux(330),aux(323),aux(326)] into aux(330)
 * Joined equivalent variables [aux(331),aux(324),aux(327)] into aux(331)
 * Joined equivalent variables [aux(332),s(3272),s(3292)] into aux(332)
 * Joined equivalent variables [aux(333),aux(325),aux(328)] into aux(333)
 * Joined equivalent variables [s(3262),s(3282)] into s(3262)
 * Joined equivalent variables [s(3263),s(3283)] into s(3263)
 * Joined equivalent variables [s(3261),s(3281)] into s(3261)
 * Joined equivalent variables [s(3270),s(3290)] into s(3270)
 * Joined equivalent variables [s(3273),s(3293)] into s(3273)
 * Joined equivalent variables [s(3266),s(3286)] into s(3266)
 * Joined equivalent variables [s(3267),s(3287)] into s(3267)
 * Joined equivalent variables [s(3276),s(3296)] into s(3276)
 * Joined equivalent variables [s(3264),s(3284)] into s(3264)
 * Joined equivalent variables [s(3265),s(3285)] into s(3265)
 * Joined equivalent variables [s(3275),s(3295)] into s(3275)
 * Joined equivalent variables [s(3269),s(3289)] into s(3269)
 * Joined equivalent variables [s(3268),s(3288)] into s(3268)
 * Renamed intermediate variables: 
[ (eq(300,1),aux(159))>>s(3297), (eq(300,1),aux(168))>>s(3298), (eq(300,1),aux(160))>>s(3299), (eq(300,1),aux(170))>>s(3300), (eq(300,1),it(189))>>s(3301), (eq(300,1),aux(162))>>s(3302), (eq(300,1),aux(161))>>s(3303), (eq(300,1),s(806))>>s(3304), (eq(300,1),s(807))>>s(3305), (eq(300,1),s(809))>>s(3306), (eq(300,1),s(810))>>s(3307), (eq(300,1),s(808))>>s(3308), (eq(300,1),s(805))>>s(3309)]
 * Renamed intermediate variables: 
[ (eq(300,2),s(781))>>s(3310)]

#### Simplifying cost structure of CE 300 
 * Joined equivalent variables [aux(334),s(3300)] into aux(334)
 * Renamed intermediate variables: 
[ (eq(308,1),aux(166))>>s(3311), (eq(308,1),aux(159))>>s(3312), (eq(308,1),aux(160))>>s(3313), (eq(308,1),aux(171))>>s(3314), (eq(308,1),it(189))>>s(3315), (eq(308,1),aux(162))>>s(3316), (eq(308,1),aux(161))>>s(3317), (eq(308,1),s(806))>>s(3318), (eq(308,1),s(807))>>s(3319), (eq(308,1),s(809))>>s(3320), (eq(308,1),s(810))>>s(3321), (eq(308,1),s(808))>>s(3322), (eq(308,1),s(805))>>s(3323)]
 * Renamed intermediate variables: 
[ (eq(308,2),s(781))>>s(3324)]

#### Simplifying cost structure of CE 308 
 * Joined equivalent variables [aux(335),s(3314)] into aux(335)
 * Renamed intermediate variables: 
[ (eq(296,1),aux(159))>>s(3325), (eq(296,1),aux(168))>>s(3326), (eq(296,1),aux(160))>>s(3327), (eq(296,1),aux(172))>>s(3328), (eq(296,1),it(189))>>s(3329), (eq(296,1),aux(162))>>s(3330), (eq(296,1),aux(161))>>s(3331), (eq(296,1),s(806))>>s(3332), (eq(296,1),s(807))>>s(3333), (eq(296,1),s(809))>>s(3334), (eq(296,1),s(810))>>s(3335), (eq(296,1),s(808))>>s(3336), (eq(296,1),s(805))>>s(3337)]
 * Renamed intermediate variables: 
[ (eq(296,2),s(781))>>s(3338)]

#### Simplifying cost structure of CE 296 
 * Joined equivalent variables [aux(336),s(3328)] into aux(336)
 * Renamed intermediate variables: 
[ (eq(304,1),aux(166))>>s(3339), (eq(304,1),aux(159))>>s(3340), (eq(304,1),aux(160))>>s(3341), (eq(304,1),aux(173))>>s(3342), (eq(304,1),it(189))>>s(3343), (eq(304,1),aux(162))>>s(3344), (eq(304,1),aux(161))>>s(3345), (eq(304,1),s(806))>>s(3346), (eq(304,1),s(807))>>s(3347), (eq(304,1),s(809))>>s(3348), (eq(304,1),s(810))>>s(3349), (eq(304,1),s(808))>>s(3350), (eq(304,1),s(805))>>s(3351)]
 * Renamed intermediate variables: 
[ (eq(304,2),s(781))>>s(3352)]

#### Simplifying cost structure of CE 304 
 * Joined equivalent variables [aux(337),s(3342)] into aux(337)
 * Renamed intermediate variables: 
[ (eq(297,1),aux(159))>>s(3353), (eq(297,1),aux(168))>>s(3354), (eq(297,1),aux(160))>>s(3355), (eq(297,1),aux(172))>>s(3356), (eq(297,1),it(189))>>s(3357), (eq(297,1),aux(162))>>s(3358), (eq(297,1),aux(161))>>s(3359), (eq(297,1),s(806))>>s(3360), (eq(297,1),s(807))>>s(3361), (eq(297,1),s(809))>>s(3362), (eq(297,1),s(810))>>s(3363), (eq(297,1),s(808))>>s(3364), (eq(297,1),s(805))>>s(3365)]
 * Renamed intermediate variables: 
[ (eq(297,2),s(782))>>s(3366), (eq(297,2),s(783))>>s(3367), (eq(297,2),s(784))>>s(3368), (eq(297,2),s(785))>>s(3369)]

#### Simplifying cost structure of CE 297 
 * Joined equivalent variables [aux(338),s(3356),s(3367)] into aux(338)
 * Renamed intermediate variables: 
[ (eq(301,1),aux(159))>>s(3370), (eq(301,1),aux(168))>>s(3371), (eq(301,1),aux(160))>>s(3372), (eq(301,1),aux(170))>>s(3373), (eq(301,1),it(189))>>s(3374), (eq(301,1),aux(162))>>s(3375), (eq(301,1),aux(161))>>s(3376), (eq(301,1),s(806))>>s(3377), (eq(301,1),s(807))>>s(3378), (eq(301,1),s(809))>>s(3379), (eq(301,1),s(810))>>s(3380), (eq(301,1),s(808))>>s(3381), (eq(301,1),s(805))>>s(3382)]
 * Renamed intermediate variables: 
[ (eq(301,2),s(782))>>s(3383), (eq(301,2),s(783))>>s(3384), (eq(301,2),s(784))>>s(3385), (eq(301,2),s(785))>>s(3386)]

#### Simplifying cost structure of CE 301 
 * Joined equivalent variables [aux(339),s(3373),s(3384)] into aux(339)
 * Joined equivalent variables [aux(340),s(3354),s(3371)] into aux(340)
 * Joined equivalent variables [aux(341),s(3355),s(3372)] into aux(341)
 * Joined equivalent variables [aux(342),s(3366),s(3383)] into aux(342)
 * Joined equivalent variables [aux(343),aux(338),aux(339)] into aux(343)
 * Joined equivalent variables [aux(344),s(3353),s(3370)] into aux(344)
 * Joined equivalent variables [s(3358),s(3375)] into s(3358)
 * Joined equivalent variables [s(3359),s(3376)] into s(3359)
 * Joined equivalent variables [s(3357),s(3374)] into s(3357)
 * Joined equivalent variables [s(3368),s(3385)] into s(3368)
 * Joined equivalent variables [s(3362),s(3379)] into s(3362)
 * Joined equivalent variables [s(3363),s(3380)] into s(3363)
 * Joined equivalent variables [s(3369),s(3386)] into s(3369)
 * Joined equivalent variables [s(3360),s(3377)] into s(3360)
 * Joined equivalent variables [s(3361),s(3378)] into s(3361)
 * Joined equivalent variables [s(3365),s(3382)] into s(3365)
 * Joined equivalent variables [s(3364),s(3381)] into s(3364)
 * Renamed intermediate variables: 
[ (eq(305,1),aux(166))>>s(3387), (eq(305,1),aux(159))>>s(3388), (eq(305,1),aux(160))>>s(3389), (eq(305,1),aux(173))>>s(3390), (eq(305,1),it(189))>>s(3391), (eq(305,1),aux(162))>>s(3392), (eq(305,1),aux(161))>>s(3393), (eq(305,1),s(806))>>s(3394), (eq(305,1),s(807))>>s(3395), (eq(305,1),s(809))>>s(3396), (eq(305,1),s(810))>>s(3397), (eq(305,1),s(808))>>s(3398), (eq(305,1),s(805))>>s(3399)]
 * Renamed intermediate variables: 
[ (eq(305,2),s(782))>>s(3400), (eq(305,2),s(783))>>s(3401), (eq(305,2),s(784))>>s(3402), (eq(305,2),s(785))>>s(3403)]

#### Simplifying cost structure of CE 305 
 * Joined equivalent variables [aux(345),s(3390),s(3401)] into aux(345)
 * Renamed intermediate variables: 
[ (eq(309,1),aux(166))>>s(3404), (eq(309,1),aux(159))>>s(3405), (eq(309,1),aux(160))>>s(3406), (eq(309,1),aux(171))>>s(3407), (eq(309,1),it(189))>>s(3408), (eq(309,1),aux(162))>>s(3409), (eq(309,1),aux(161))>>s(3410), (eq(309,1),s(806))>>s(3411), (eq(309,1),s(807))>>s(3412), (eq(309,1),s(809))>>s(3413), (eq(309,1),s(810))>>s(3414), (eq(309,1),s(808))>>s(3415), (eq(309,1),s(805))>>s(3416)]
 * Renamed intermediate variables: 
[ (eq(309,2),s(782))>>s(3417), (eq(309,2),s(783))>>s(3418), (eq(309,2),s(784))>>s(3419), (eq(309,2),s(785))>>s(3420)]

#### Simplifying cost structure of CE 309 
 * Joined equivalent variables [aux(346),s(3407),s(3418)] into aux(346)
 * Joined equivalent variables [aux(347),aux(345),aux(346)] into aux(347)
 * Joined equivalent variables [aux(348),s(3389),s(3406)] into aux(348)
 * Joined equivalent variables [aux(349),s(3400),s(3417)] into aux(349)
 * Joined equivalent variables [aux(350),s(3387),s(3404)] into aux(350)
 * Joined equivalent variables [aux(351),s(3388),s(3405)] into aux(351)
 * Joined equivalent variables [s(3392),s(3409)] into s(3392)
 * Joined equivalent variables [s(3393),s(3410)] into s(3393)
 * Joined equivalent variables [s(3402),s(3419)] into s(3402)
 * Joined equivalent variables [s(3391),s(3408)] into s(3391)
 * Joined equivalent variables [s(3396),s(3413)] into s(3396)
 * Joined equivalent variables [s(3397),s(3414)] into s(3397)
 * Joined equivalent variables [s(3403),s(3420)] into s(3403)
 * Joined equivalent variables [s(3394),s(3411)] into s(3394)
 * Joined equivalent variables [s(3395),s(3412)] into s(3395)
 * Joined equivalent variables [s(3399),s(3416)] into s(3399)
 * Joined equivalent variables [s(3398),s(3415)] into s(3398)

#### Cost of chains of case_20(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q):
* Chain [239]: 21
  with precondition: [A=1,B=0,D=1,H=1,I=0,K=1,L=0,N=1,O=0,Q=1,E>=1,F>=0,G>=0,J>=0,M>=0,C>=J,P>=J,C>=M] 

* Chain [238]: 6*s(3151)+37
  Such that:s(3151) =< 2

  with precondition: [A=2,D=1,H=1,I=0,K=2,N=1,O=0,Q=1,L=B,E>=2,F>=1,G>=0,J>=0,L>=1,M>=0,P>=0,C>=J,C>=M] 

* Chain [237]: 16*s(3153)+36
  Such that:s(3152) =< 2
s(3153) =< s(3152)

  with precondition: [A=2,D=1,H=1,I=1,J=0,K=2,N=2,O=1,Q=1,L=B,C>=1,E>=2,F>=1,G>=0,L>=1,M>=0,P>=1,C>=M] 

* Chain [236]: 24
  with precondition: [D=1,E=1,F=0,H=1,I=0,N=1,O=0,Q=1,K=A,L=B,G>=0,J>=0,K>=2,L>=1,M>=0,C>=J,P>=J,C>=M] 

* Chain [235]: 6*s(3154)+40
  Such that:s(3154) =< 2

  with precondition: [D=1,E=2,H=1,I=0,N=1,O=0,Q=1,K=A,L=B,F>=1,G>=0,J>=0,K>=3,L>=1,M>=0,P>=0,C>=J,C>=M] 

* Chain [234]: 16*s(3156)+39
  Such that:s(3155) =< 2
s(3156) =< s(3155)

  with precondition: [D=1,E=2,H=1,I=1,J=0,N=2,O=1,Q=1,K=A,L=B,C>=1,F>=1,G>=0,K>=3,L>=1,M>=0,P>=1,C>=M] 

* Chain [233]: 45*s(3161)+78*s(3168)+26*s(3169)+16*s(3171)+21
  Such that:s(3158) =< E
s(3159) =< F
s(3157) =< L
aux(308) =< K
s(3171) =< aux(308)
s(3161) =< aux(308)
s(3161) =< s(3158)
s(3162) =< s(3159)
s(3163) =< s(3157)
s(3164) =< s(3161)*s(3159)
s(3165) =< s(3161)*s(3157)
s(3166) =< s(3161)*s(3162)
s(3167) =< s(3161)*s(3163)
s(3168) =< s(3167)
s(3168) =< s(3166)
s(3169) =< s(3165)
s(3169) =< s(3164)

  with precondition: [D=1,H=1,J=0,Q=1,L=B,A=I+1,A=K,A=N,A>=2,G>=0,M>=0,O>=2,C+1>=A,E>=A,P+1>=A,C>=M,F>=O,L>=O] 

* Chain [232]: 45*s(3176)+78*s(3183)+26*s(3184)+16*s(3186)+36
  Such that:s(3173) =< E
s(3174) =< F
s(3172) =< L
aux(309) =< K
s(3186) =< aux(309)
s(3176) =< aux(309)
s(3176) =< s(3173)
s(3177) =< s(3174)
s(3178) =< s(3172)
s(3179) =< s(3176)*s(3174)
s(3180) =< s(3176)*s(3172)
s(3181) =< s(3176)*s(3177)
s(3182) =< s(3176)*s(3178)
s(3183) =< s(3182)
s(3183) =< s(3181)
s(3184) =< s(3180)
s(3184) =< s(3179)

  with precondition: [D=1,H=1,J=0,Q=1,L=B,A=I+1,A=K,A=N,A>=3,G>=0,M>=0,O>=1,C+1>=A,E>=A,P+1>=A,C>=M,F>=O,L>=O] 

* Chain [231]: 45*s(3191)+78*s(3198)+26*s(3199)+16*s(3201)+24
  Such that:s(3189) =< F
s(3187) =< K
s(3188) =< L
aux(310) =< E
s(3201) =< aux(310)
s(3191) =< s(3187)
s(3191) =< aux(310)
s(3192) =< s(3189)
s(3193) =< s(3188)
s(3194) =< s(3191)*s(3189)
s(3195) =< s(3191)*s(3188)
s(3196) =< s(3191)*s(3192)
s(3197) =< s(3191)*s(3193)
s(3198) =< s(3197)
s(3198) =< s(3196)
s(3199) =< s(3195)
s(3199) =< s(3194)

  with precondition: [D=1,H=1,J=0,Q=1,K=A,L=B,E=I+1,E=N,E>=2,G>=0,M>=0,O>=2,C+1>=E,K>=E+1,P+1>=E,C>=M,F>=O,L>=O] 

* Chain [230]: 45*s(3206)+78*s(3213)+26*s(3214)+16*s(3216)+39
  Such that:s(3204) =< F
s(3202) =< K
s(3203) =< L
aux(311) =< E
s(3216) =< aux(311)
s(3206) =< s(3202)
s(3206) =< aux(311)
s(3207) =< s(3204)
s(3208) =< s(3203)
s(3209) =< s(3206)*s(3204)
s(3210) =< s(3206)*s(3203)
s(3211) =< s(3206)*s(3207)
s(3212) =< s(3206)*s(3208)
s(3213) =< s(3212)
s(3213) =< s(3211)
s(3214) =< s(3210)
s(3214) =< s(3209)

  with precondition: [D=1,H=1,J=0,Q=1,K=A,L=B,E=I+1,E=N,E>=3,G>=0,M>=0,O>=1,C+1>=E,K>=E+1,P+1>=E,C>=M,F>=O,L>=O] 

* Chain [229]: 90*s(3221)+156*s(3228)+52*s(3229)+52*s(3230)+36*s(3235)+12*s(3236)+47
  Such that:aux(318) =< E
aux(319) =< F
aux(320) =< J
aux(321) =< K
aux(322) =< L
s(3233) =< aux(319)
s(3230) =< aux(321)
s(3233) =< aux(322)
s(3235) =< s(3233)
s(3236) =< s(3230)*aux(320)
s(3221) =< aux(321)
s(3221) =< aux(318)
s(3222) =< aux(319)
s(3223) =< aux(322)
s(3224) =< s(3221)*aux(319)
s(3225) =< s(3221)*aux(322)
s(3226) =< s(3221)*s(3222)
s(3227) =< s(3221)*s(3223)
s(3228) =< s(3227)
s(3228) =< s(3226)
s(3229) =< s(3225)
s(3229) =< s(3224)

  with precondition: [D=1,H=1,N=1,O=0,Q=1,L=B,A=I+1,A=K,A>=2,G>=0,J>=0,M>=0,P>=0,C+1>=A,E>=A,C>=J,F>=J+2,L>=J+2,C>=M] 

* Chain [228]: 90*s(3261)+156*s(3268)+52*s(3269)+52*s(3270)+36*s(3275)+12*s(3276)+50
  Such that:aux(329) =< A
aux(330) =< E
aux(331) =< F
aux(332) =< J
aux(333) =< L
s(3270) =< aux(330)
s(3273) =< aux(331)
s(3273) =< aux(333)
s(3275) =< s(3273)
s(3276) =< s(3270)*aux(332)
s(3261) =< aux(329)
s(3261) =< aux(330)
s(3262) =< aux(331)
s(3263) =< aux(333)
s(3264) =< s(3261)*aux(331)
s(3265) =< s(3261)*aux(333)
s(3266) =< s(3261)*s(3262)
s(3267) =< s(3261)*s(3263)
s(3268) =< s(3267)
s(3268) =< s(3266)
s(3269) =< s(3265)
s(3269) =< s(3264)

  with precondition: [D=1,H=1,N=1,O=0,Q=1,K=A,L=B,E=I+1,E>=2,G>=0,J>=0,M>=0,P>=0,C+1>=E,K>=E+1,C>=J,F>=J+2,L>=J+2,C>=M] 

* Chain [227]: 45*s(3301)+78*s(3308)+26*s(3309)+6*s(3310)+37
  Such that:s(3298) =< E
s(3299) =< F
s(3297) =< L
aux(334) =< K
s(3310) =< aux(334)
s(3301) =< aux(334)
s(3301) =< s(3298)
s(3302) =< s(3299)
s(3303) =< s(3297)
s(3304) =< s(3301)*s(3299)
s(3305) =< s(3301)*s(3297)
s(3306) =< s(3301)*s(3302)
s(3307) =< s(3301)*s(3303)
s(3308) =< s(3307)
s(3308) =< s(3306)
s(3309) =< s(3305)
s(3309) =< s(3304)

  with precondition: [D=1,H=1,N=1,O=0,Q=1,K=A,L=B,F>=1,G>=0,I>=0,J>=0,K>=3,L>=1,M>=0,P>=0,C>=I,K>=I+2,C>=J,E>=K,C>=M] 

* Chain [226]: 45*s(3315)+78*s(3322)+26*s(3323)+6*s(3324)+40
  Such that:s(3313) =< F
s(3311) =< K
s(3312) =< L
aux(335) =< E
s(3324) =< aux(335)
s(3315) =< s(3311)
s(3315) =< aux(335)
s(3316) =< s(3313)
s(3317) =< s(3312)
s(3318) =< s(3315)*s(3313)
s(3319) =< s(3315)*s(3312)
s(3320) =< s(3315)*s(3316)
s(3321) =< s(3315)*s(3317)
s(3322) =< s(3321)
s(3322) =< s(3320)
s(3323) =< s(3319)
s(3323) =< s(3318)

  with precondition: [D=1,H=1,N=1,O=0,Q=1,K=A,L=B,E>=3,F>=1,G>=0,I>=0,J>=0,L>=1,M>=0,P>=0,K>=E+1,C>=I,E>=I+2,C>=J,C>=M] 

* Chain [225]: 45*s(3329)+78*s(3336)+26*s(3337)+6*s(3338)+22
  Such that:s(3326) =< E
s(3327) =< F
s(3325) =< L
aux(336) =< K
s(3338) =< aux(336)
s(3329) =< aux(336)
s(3329) =< s(3326)
s(3330) =< s(3327)
s(3331) =< s(3325)
s(3332) =< s(3329)*s(3327)
s(3333) =< s(3329)*s(3325)
s(3334) =< s(3329)*s(3330)
s(3335) =< s(3329)*s(3331)
s(3336) =< s(3335)
s(3336) =< s(3334)
s(3337) =< s(3333)
s(3337) =< s(3332)

  with precondition: [D=1,H=1,N=1,O=0,Q=1,K=A,L=B,F>=2,G>=0,I>=0,J>=0,L>=2,M>=0,P>=0,C>=I,K>=I+2,C>=J,E>=K,C>=M] 

* Chain [224]: 45*s(3343)+78*s(3350)+26*s(3351)+6*s(3352)+25
  Such that:s(3341) =< F
s(3339) =< K
s(3340) =< L
aux(337) =< E
s(3352) =< aux(337)
s(3343) =< s(3339)
s(3343) =< aux(337)
s(3344) =< s(3341)
s(3345) =< s(3340)
s(3346) =< s(3343)*s(3341)
s(3347) =< s(3343)*s(3340)
s(3348) =< s(3343)*s(3344)
s(3349) =< s(3343)*s(3345)
s(3350) =< s(3349)
s(3350) =< s(3348)
s(3351) =< s(3347)
s(3351) =< s(3346)

  with precondition: [D=1,H=1,N=1,O=0,Q=1,K=A,L=B,F>=2,G>=0,I>=0,J>=0,L>=2,M>=0,P>=0,K>=E+1,C>=I,E>=I+2,C>=J,C>=M] 

* Chain [223]: 90*s(3357)+156*s(3364)+52*s(3365)+32*s(3368)+12*s(3369)+36
  Such that:aux(340) =< E
aux(341) =< F
aux(342) =< J
aux(343) =< K
aux(344) =< L
s(3368) =< aux(343)
s(3369) =< s(3368)*aux(342)
s(3357) =< aux(343)
s(3357) =< aux(340)
s(3358) =< aux(341)
s(3359) =< aux(344)
s(3360) =< s(3357)*aux(341)
s(3361) =< s(3357)*aux(344)
s(3362) =< s(3357)*s(3358)
s(3363) =< s(3357)*s(3359)
s(3364) =< s(3363)
s(3364) =< s(3362)
s(3365) =< s(3361)
s(3365) =< s(3360)

  with precondition: [D=1,H=1,Q=1,L=B,A=I+1,A=K,A=N,A>=2,G>=0,J>=1,M>=0,C+1>=A,E>=A,P+1>=A,C>=J,O>=J+1,P>=J,C>=M,F>=O,L>=O] 

* Chain [222]: 90*s(3391)+156*s(3398)+52*s(3399)+32*s(3402)+12*s(3403)+39
  Such that:aux(347) =< E
aux(348) =< F
aux(349) =< J
aux(350) =< K
aux(351) =< L
s(3402) =< aux(347)
s(3403) =< s(3402)*aux(349)
s(3391) =< aux(350)
s(3391) =< aux(347)
s(3392) =< aux(348)
s(3393) =< aux(351)
s(3394) =< s(3391)*aux(348)
s(3395) =< s(3391)*aux(351)
s(3396) =< s(3391)*s(3392)
s(3397) =< s(3391)*s(3393)
s(3398) =< s(3397)
s(3398) =< s(3396)
s(3399) =< s(3395)
s(3399) =< s(3394)

  with precondition: [D=1,H=1,Q=1,K=A,L=B,E=I+1,E=N,E>=2,G>=0,J>=1,M>=0,C+1>=E,K>=E+1,P+1>=E,C>=J,O>=J+1,P>=J,C>=M,F>=O,L>=O] 


#### Simplifying cost structure of CE 328 

#### Simplifying cost structure of CE 310 
 * Renamed intermediate variables: 
[ (eq(311,1),s(3151))>>s(3421)]

#### Simplifying cost structure of CE 311 
 * Renamed intermediate variables: 
[ (eq(312,1),s(3152))>>s(3422), (eq(312,1),s(3153))>>s(3423)]

#### Simplifying cost structure of CE 312 

#### Simplifying cost structure of CE 313 
 * Renamed intermediate variables: 
[ (eq(314,1),s(3154))>>s(3424)]

#### Simplifying cost structure of CE 314 
 * Renamed intermediate variables: 
[ (eq(315,1),s(3155))>>s(3425), (eq(315,1),s(3156))>>s(3426)]

#### Simplifying cost structure of CE 315 
 * Renamed intermediate variables: 
[ (eq(324,1),s(3326))>>s(3427), (eq(324,1),s(3327))>>s(3428), (eq(324,1),s(3325))>>s(3429), (eq(324,1),aux(336))>>s(3430), (eq(324,1),s(3338))>>s(3431), (eq(324,1),s(3329))>>s(3432), (eq(324,1),s(3330))>>s(3433), (eq(324,1),s(3331))>>s(3434), (eq(324,1),s(3332))>>s(3435), (eq(324,1),s(3333))>>s(3436), (eq(324,1),s(3334))>>s(3437), (eq(324,1),s(3335))>>s(3438), (eq(324,1),s(3336))>>s(3439), (eq(324,1),s(3337))>>s(3440)]

#### Simplifying cost structure of CE 324 
 * Renamed intermediate variables: 
[ (eq(325,1),aux(318))>>s(3441), (eq(325,1),aux(319))>>s(3442), (eq(325,1),aux(320))>>s(3443), (eq(325,1),aux(321))>>s(3444), (eq(325,1),aux(322))>>s(3445), (eq(325,1),s(3233))>>s(3446), (eq(325,1),s(3230))>>s(3447), (eq(325,1),s(3235))>>s(3448), (eq(325,1),s(3236))>>s(3449), (eq(325,1),s(3221))>>s(3450), (eq(325,1),s(3222))>>s(3451), (eq(325,1),s(3223))>>s(3452), (eq(325,1),s(3224))>>s(3453), (eq(325,1),s(3225))>>s(3454), (eq(325,1),s(3226))>>s(3455), (eq(325,1),s(3227))>>s(3456), (eq(325,1),s(3228))>>s(3457), (eq(325,1),s(3229))>>s(3458)]

#### Simplifying cost structure of CE 325 
 * Joined equivalent variables [aux(352),s(3445)] into aux(352)
 * Joined equivalent variables [aux(353),s(3442)] into aux(353)
 * Joined equivalent variables [s(3443),s(3446)] into s(3443)
 * Joined equivalent variables [aux(354),s(3430),s(3444)] into aux(354)
 * Joined equivalent variables [aux(355),aux(352),s(3429)] into aux(355)
 * Joined equivalent variables [aux(356),s(3427),s(3441)] into aux(356)
 * Joined equivalent variables [aux(357),aux(353),s(3428)] into aux(357)
 * Joined equivalent variables [s(3433),s(3451)] into s(3433)
 * Joined equivalent variables [s(3434),s(3452)] into s(3434)
 * Joined equivalent variables [s(3431),s(3447)] into s(3431)
 * Joined equivalent variables [s(3432),s(3450)] into s(3432)
 * Joined equivalent variables [s(3437),s(3455)] into s(3437)
 * Joined equivalent variables [s(3438),s(3456)] into s(3438)
 * Joined equivalent variables [s(3435),s(3453)] into s(3435)
 * Joined equivalent variables [s(3436),s(3454)] into s(3436)
 * Joined equivalent variables [s(3440),s(3458)] into s(3440)
 * Joined equivalent variables [s(3439),s(3457)] into s(3439)
 * Renamed intermediate variables: 
[ (eq(322,1),s(3298))>>s(3459), (eq(322,1),s(3299))>>s(3460), (eq(322,1),s(3297))>>s(3461), (eq(322,1),aux(334))>>s(3462), (eq(322,1),s(3310))>>s(3463), (eq(322,1),s(3301))>>s(3464), (eq(322,1),s(3302))>>s(3465), (eq(322,1),s(3303))>>s(3466), (eq(322,1),s(3304))>>s(3467), (eq(322,1),s(3305))>>s(3468), (eq(322,1),s(3306))>>s(3469), (eq(322,1),s(3307))>>s(3470), (eq(322,1),s(3308))>>s(3471), (eq(322,1),s(3309))>>s(3472)]

#### Simplifying cost structure of CE 322 
 * Renamed intermediate variables: 
[ (eq(321,1),s(3313))>>s(3473), (eq(321,1),s(3311))>>s(3474), (eq(321,1),s(3312))>>s(3475), (eq(321,1),aux(335))>>s(3476), (eq(321,1),s(3324))>>s(3477), (eq(321,1),s(3315))>>s(3478), (eq(321,1),s(3316))>>s(3479), (eq(321,1),s(3317))>>s(3480), (eq(321,1),s(3318))>>s(3481), (eq(321,1),s(3319))>>s(3482), (eq(321,1),s(3320))>>s(3483), (eq(321,1),s(3321))>>s(3484), (eq(321,1),s(3322))>>s(3485), (eq(321,1),s(3323))>>s(3486)]

#### Simplifying cost structure of CE 321 
 * Renamed intermediate variables: 
[ (eq(320,1),aux(329))>>s(3487), (eq(320,1),aux(330))>>s(3488), (eq(320,1),aux(331))>>s(3489), (eq(320,1),aux(332))>>s(3490), (eq(320,1),aux(333))>>s(3491), (eq(320,1),s(3270))>>s(3492), (eq(320,1),s(3273))>>s(3493), (eq(320,1),s(3275))>>s(3494), (eq(320,1),s(3276))>>s(3495), (eq(320,1),s(3261))>>s(3496), (eq(320,1),s(3262))>>s(3497), (eq(320,1),s(3263))>>s(3498), (eq(320,1),s(3264))>>s(3499), (eq(320,1),s(3265))>>s(3500), (eq(320,1),s(3266))>>s(3501), (eq(320,1),s(3267))>>s(3502), (eq(320,1),s(3268))>>s(3503), (eq(320,1),s(3269))>>s(3504)]

#### Simplifying cost structure of CE 320 
 * Joined equivalent variables [aux(358),s(3491)] into aux(358)
 * Joined equivalent variables [aux(359),s(3489)] into aux(359)
 * Joined equivalent variables [s(3490),s(3493)] into s(3490)
 * Renamed intermediate variables: 
[ (eq(323,1),s(3341))>>s(3505), (eq(323,1),s(3339))>>s(3506), (eq(323,1),s(3340))>>s(3507), (eq(323,1),aux(337))>>s(3508), (eq(323,1),s(3352))>>s(3509), (eq(323,1),s(3343))>>s(3510), (eq(323,1),s(3344))>>s(3511), (eq(323,1),s(3345))>>s(3512), (eq(323,1),s(3346))>>s(3513), (eq(323,1),s(3347))>>s(3514), (eq(323,1),s(3348))>>s(3515), (eq(323,1),s(3349))>>s(3516), (eq(323,1),s(3350))>>s(3517), (eq(323,1),s(3351))>>s(3518)]

#### Simplifying cost structure of CE 323 
 * Joined equivalent variables [aux(360),s(3487),s(3506)] into aux(360)
 * Joined equivalent variables [aux(361),aux(358),s(3507)] into aux(361)
 * Joined equivalent variables [aux(362),s(3488),s(3508)] into aux(362)
 * Joined equivalent variables [aux(363),aux(359),s(3505)] into aux(363)
 * Joined equivalent variables [s(3497),s(3511)] into s(3497)
 * Joined equivalent variables [s(3498),s(3512)] into s(3498)
 * Joined equivalent variables [s(3496),s(3510)] into s(3496)
 * Joined equivalent variables [s(3492),s(3509)] into s(3492)
 * Joined equivalent variables [s(3501),s(3515)] into s(3501)
 * Joined equivalent variables [s(3502),s(3516)] into s(3502)
 * Joined equivalent variables [s(3499),s(3513)] into s(3499)
 * Joined equivalent variables [s(3500),s(3514)] into s(3500)
 * Joined equivalent variables [s(3504),s(3518)] into s(3504)
 * Joined equivalent variables [s(3503),s(3517)] into s(3503)
 * Renamed intermediate variables: 
[ (eq(316,1),s(3189))>>s(3519), (eq(316,1),s(3187))>>s(3520), (eq(316,1),s(3188))>>s(3521), (eq(316,1),aux(310))>>s(3522), (eq(316,1),s(3201))>>s(3523), (eq(316,1),s(3191))>>s(3524), (eq(316,1),s(3192))>>s(3525), (eq(316,1),s(3193))>>s(3526), (eq(316,1),s(3194))>>s(3527), (eq(316,1),s(3195))>>s(3528), (eq(316,1),s(3196))>>s(3529), (eq(316,1),s(3197))>>s(3530), (eq(316,1),s(3198))>>s(3531), (eq(316,1),s(3199))>>s(3532)]

#### Simplifying cost structure of CE 316 
 * Renamed intermediate variables: 
[ (eq(326,1),aux(347))>>s(3533), (eq(326,1),aux(348))>>s(3534), (eq(326,1),aux(349))>>s(3535), (eq(326,1),aux(350))>>s(3536), (eq(326,1),aux(351))>>s(3537), (eq(326,1),s(3402))>>s(3538), (eq(326,1),s(3403))>>s(3539), (eq(326,1),s(3391))>>s(3540), (eq(326,1),s(3392))>>s(3541), (eq(326,1),s(3393))>>s(3542), (eq(326,1),s(3394))>>s(3543), (eq(326,1),s(3395))>>s(3544), (eq(326,1),s(3396))>>s(3545), (eq(326,1),s(3397))>>s(3546), (eq(326,1),s(3398))>>s(3547), (eq(326,1),s(3399))>>s(3548)]

#### Simplifying cost structure of CE 326 
 * Joined equivalent variables [aux(364),s(3537)] into aux(364)
 * Joined equivalent variables [aux(365),s(3534)] into aux(365)
 * Joined equivalent variables [aux(366),s(3520),s(3536)] into aux(366)
 * Joined equivalent variables [aux(367),aux(364),s(3521)] into aux(367)
 * Joined equivalent variables [aux(368),s(3522),s(3533)] into aux(368)
 * Joined equivalent variables [aux(369),aux(365),s(3519)] into aux(369)
 * Joined equivalent variables [s(3525),s(3541)] into s(3525)
 * Joined equivalent variables [s(3526),s(3542)] into s(3526)
 * Joined equivalent variables [s(3524),s(3540)] into s(3524)
 * Joined equivalent variables [s(3523),s(3538)] into s(3523)
 * Joined equivalent variables [s(3529),s(3545)] into s(3529)
 * Joined equivalent variables [s(3530),s(3546)] into s(3530)
 * Joined equivalent variables [s(3527),s(3543)] into s(3527)
 * Joined equivalent variables [s(3528),s(3544)] into s(3528)
 * Joined equivalent variables [s(3532),s(3548)] into s(3532)
 * Joined equivalent variables [s(3531),s(3547)] into s(3531)
 * Renamed intermediate variables: 
[ (eq(318,1),s(3158))>>s(3549), (eq(318,1),s(3159))>>s(3550), (eq(318,1),s(3157))>>s(3551), (eq(318,1),aux(308))>>s(3552), (eq(318,1),s(3171))>>s(3553), (eq(318,1),s(3161))>>s(3554), (eq(318,1),s(3162))>>s(3555), (eq(318,1),s(3163))>>s(3556), (eq(318,1),s(3164))>>s(3557), (eq(318,1),s(3165))>>s(3558), (eq(318,1),s(3166))>>s(3559), (eq(318,1),s(3167))>>s(3560), (eq(318,1),s(3168))>>s(3561), (eq(318,1),s(3169))>>s(3562)]

#### Simplifying cost structure of CE 318 
 * Renamed intermediate variables: 
[ (eq(327,1),aux(340))>>s(3563), (eq(327,1),aux(341))>>s(3564), (eq(327,1),aux(342))>>s(3565), (eq(327,1),aux(343))>>s(3566), (eq(327,1),aux(344))>>s(3567), (eq(327,1),s(3368))>>s(3568), (eq(327,1),s(3369))>>s(3569), (eq(327,1),s(3357))>>s(3570), (eq(327,1),s(3358))>>s(3571), (eq(327,1),s(3359))>>s(3572), (eq(327,1),s(3360))>>s(3573), (eq(327,1),s(3361))>>s(3574), (eq(327,1),s(3362))>>s(3575), (eq(327,1),s(3363))>>s(3576), (eq(327,1),s(3364))>>s(3577), (eq(327,1),s(3365))>>s(3578)]

#### Simplifying cost structure of CE 327 
 * Joined equivalent variables [aux(370),s(3567)] into aux(370)
 * Joined equivalent variables [aux(371),s(3564)] into aux(371)
 * Joined equivalent variables [aux(372),s(3552),s(3566)] into aux(372)
 * Joined equivalent variables [aux(373),aux(370),s(3551)] into aux(373)
 * Joined equivalent variables [aux(374),s(3549),s(3563)] into aux(374)
 * Joined equivalent variables [aux(375),aux(371),s(3550)] into aux(375)
 * Joined equivalent variables [s(3555),s(3571)] into s(3555)
 * Joined equivalent variables [s(3556),s(3572)] into s(3556)
 * Joined equivalent variables [s(3553),s(3568)] into s(3553)
 * Joined equivalent variables [s(3554),s(3570)] into s(3554)
 * Joined equivalent variables [s(3559),s(3575)] into s(3559)
 * Joined equivalent variables [s(3560),s(3576)] into s(3560)
 * Joined equivalent variables [s(3557),s(3573)] into s(3557)
 * Joined equivalent variables [s(3558),s(3574)] into s(3558)
 * Joined equivalent variables [s(3562),s(3578)] into s(3562)
 * Joined equivalent variables [s(3561),s(3577)] into s(3561)
 * Renamed intermediate variables: 
[ (eq(319,1),s(3173))>>s(3579), (eq(319,1),s(3174))>>s(3580), (eq(319,1),s(3172))>>s(3581), (eq(319,1),aux(309))>>s(3582), (eq(319,1),s(3186))>>s(3583), (eq(319,1),s(3176))>>s(3584), (eq(319,1),s(3177))>>s(3585), (eq(319,1),s(3178))>>s(3586), (eq(319,1),s(3179))>>s(3587), (eq(319,1),s(3180))>>s(3588), (eq(319,1),s(3181))>>s(3589), (eq(319,1),s(3182))>>s(3590), (eq(319,1),s(3183))>>s(3591), (eq(319,1),s(3184))>>s(3592)]

#### Simplifying cost structure of CE 319 
 * Renamed intermediate variables: 
[ (eq(317,1),s(3204))>>s(3593), (eq(317,1),s(3202))>>s(3594), (eq(317,1),s(3203))>>s(3595), (eq(317,1),aux(311))>>s(3596), (eq(317,1),s(3216))>>s(3597), (eq(317,1),s(3206))>>s(3598), (eq(317,1),s(3207))>>s(3599), (eq(317,1),s(3208))>>s(3600), (eq(317,1),s(3209))>>s(3601), (eq(317,1),s(3210))>>s(3602), (eq(317,1),s(3211))>>s(3603), (eq(317,1),s(3212))>>s(3604), (eq(317,1),s(3213))>>s(3605), (eq(317,1),s(3214))>>s(3606)]

#### Simplifying cost structure of CE 317 

#### Cost of chains of case_18(A,B,C,D,E,F,G,H,I,J,K,L,M):
* Chain [254]: 6
  with precondition: [A=0,J=1,K=0,M=1,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,L>=0] 

* Chain [253]: 25
  with precondition: [A=1,B=1,C=0,E=1,I=1,J=1,K=0,M=1,D>=0,F>=1,G>=0,H>=0,L>=0] 

* Chain [252]: 6*s(3421)+41
  Such that:s(3421) =< 2

  with precondition: [A=1,B=2,E=1,I=1,J=1,K=0,M=1,C>=1,D>=0,F>=2,G>=1,H>=0,L>=0] 

* Chain [251]: 16*s(3423)+40
  Such that:s(3422) =< 2
s(3423) =< s(3422)

  with precondition: [A=1,B=2,E=1,I=1,J=2,K=1,M=1,C>=1,D>=1,F>=2,G>=1,H>=0,L>=1] 

* Chain [250]: 28
  with precondition: [A=1,E=1,F=1,G=0,I=1,J=1,K=0,M=1,B>=2,C>=1,D>=0,H>=0,L>=0] 

* Chain [249]: 6*s(3424)+44
  Such that:s(3424) =< 2

  with precondition: [A=1,E=1,F=2,I=1,J=1,K=0,M=1,B>=3,C>=1,D>=0,G>=1,H>=0,L>=0] 

* Chain [248]: 16*s(3426)+43
  Such that:s(3425) =< 2
s(3426) =< s(3425)

  with precondition: [A=1,E=1,F=2,I=1,J=2,K=1,M=1,B>=3,C>=1,D>=1,G>=1,H>=0,L>=1] 

* Chain [247]: 58*s(3431)+135*s(3432)+234*s(3439)+78*s(3440)+36*s(3448)+12*s(3449)+51
  Such that:aux(354) =< B
aux(355) =< C
aux(356) =< F
aux(357) =< G
s(3431) =< aux(354)
s(3432) =< aux(354)
s(3432) =< aux(356)
s(3433) =< aux(357)
s(3434) =< aux(355)
s(3435) =< s(3432)*aux(357)
s(3436) =< s(3432)*aux(355)
s(3437) =< s(3432)*s(3433)
s(3438) =< s(3432)*s(3434)
s(3439) =< s(3438)
s(3439) =< s(3437)
s(3440) =< s(3436)
s(3440) =< s(3435)
s(3443) =< aux(355)
s(3443) =< aux(357)
s(3448) =< s(3443)
s(3449) =< s(3431)*s(3443)

  with precondition: [A=1,E=1,I=1,J=1,K=0,M=1,B>=2,C>=2,D>=0,G>=2,H>=0,L>=0,F>=B] 

* Chain [246]: 6*s(3463)+45*s(3464)+78*s(3471)+26*s(3472)+41
  Such that:s(3462) =< B
s(3461) =< C
s(3459) =< F
s(3460) =< G
s(3463) =< s(3462)
s(3464) =< s(3462)
s(3464) =< s(3459)
s(3465) =< s(3460)
s(3466) =< s(3461)
s(3467) =< s(3464)*s(3460)
s(3468) =< s(3464)*s(3461)
s(3469) =< s(3464)*s(3465)
s(3470) =< s(3464)*s(3466)
s(3471) =< s(3470)
s(3471) =< s(3469)
s(3472) =< s(3468)
s(3472) =< s(3467)

  with precondition: [A=1,E=1,I=1,J=1,K=0,M=1,B>=3,C>=1,D>=0,G>=1,H>=0,L>=0,F>=B] 

* Chain [245]: 6*s(3477)+45*s(3478)+78*s(3485)+26*s(3486)+44
  Such that:s(3474) =< B
s(3475) =< C
s(3476) =< F
s(3473) =< G
s(3477) =< s(3476)
s(3478) =< s(3474)
s(3478) =< s(3476)
s(3479) =< s(3473)
s(3480) =< s(3475)
s(3481) =< s(3478)*s(3473)
s(3482) =< s(3478)*s(3475)
s(3483) =< s(3478)*s(3479)
s(3484) =< s(3478)*s(3480)
s(3485) =< s(3484)
s(3485) =< s(3483)
s(3486) =< s(3482)
s(3486) =< s(3481)

  with precondition: [A=1,E=1,I=1,J=1,K=0,M=1,C>=1,D>=0,F>=3,G>=1,H>=0,L>=0,B>=F+1] 

* Chain [244]: 58*s(3492)+36*s(3494)+12*s(3495)+135*s(3496)+234*s(3503)+78*s(3504)+54
  Such that:aux(360) =< B
aux(361) =< C
aux(362) =< F
aux(363) =< G
s(3490) =< aux(361)
s(3490) =< aux(363)
s(3492) =< aux(362)
s(3494) =< s(3490)
s(3495) =< s(3492)*s(3490)
s(3496) =< aux(360)
s(3496) =< aux(362)
s(3497) =< aux(363)
s(3498) =< aux(361)
s(3499) =< s(3496)*aux(363)
s(3500) =< s(3496)*aux(361)
s(3501) =< s(3496)*s(3497)
s(3502) =< s(3496)*s(3498)
s(3503) =< s(3502)
s(3503) =< s(3501)
s(3504) =< s(3500)
s(3504) =< s(3499)

  with precondition: [A=1,E=1,I=1,J=1,K=0,M=1,C>=2,D>=0,F>=2,G>=2,H>=0,L>=0,B>=F+1] 

* Chain [243]: 48*s(3523)+135*s(3524)+234*s(3531)+78*s(3532)+12*s(3539)+43
  Such that:aux(366) =< B
aux(367) =< C
aux(368) =< F
aux(369) =< G
s(3523) =< aux(368)
s(3524) =< aux(366)
s(3524) =< aux(368)
s(3525) =< aux(369)
s(3526) =< aux(367)
s(3527) =< s(3524)*aux(369)
s(3528) =< s(3524)*aux(367)
s(3529) =< s(3524)*s(3525)
s(3530) =< s(3524)*s(3526)
s(3531) =< s(3530)
s(3531) =< s(3529)
s(3532) =< s(3528)
s(3532) =< s(3527)
s(3535) =< aux(367)
s(3535) =< aux(369)
s(3539) =< s(3523)*s(3535)

  with precondition: [A=1,E=1,I=1,M=1,F=J,F>=2,H>=0,K>=2,B>=F+1,D+1>=F,L+1>=F,C>=K,G>=K] 

* Chain [242]: 48*s(3553)+135*s(3554)+234*s(3561)+78*s(3562)+12*s(3569)+40
  Such that:aux(372) =< B
aux(373) =< C
aux(374) =< F
aux(375) =< G
s(3553) =< aux(372)
s(3554) =< aux(372)
s(3554) =< aux(374)
s(3555) =< aux(375)
s(3556) =< aux(373)
s(3557) =< s(3554)*aux(375)
s(3558) =< s(3554)*aux(373)
s(3559) =< s(3554)*s(3555)
s(3560) =< s(3554)*s(3556)
s(3561) =< s(3560)
s(3561) =< s(3559)
s(3562) =< s(3558)
s(3562) =< s(3557)
s(3565) =< aux(373)
s(3565) =< aux(375)
s(3569) =< s(3553)*s(3565)

  with precondition: [A=1,E=1,I=1,M=1,B=J,B>=2,H>=0,K>=2,D+1>=B,F>=B,L+1>=B,C>=K,G>=K] 

* Chain [241]: 16*s(3583)+45*s(3584)+78*s(3591)+26*s(3592)+40
  Such that:s(3582) =< B
s(3581) =< C
s(3579) =< F
s(3580) =< G
s(3583) =< s(3582)
s(3584) =< s(3582)
s(3584) =< s(3579)
s(3585) =< s(3580)
s(3586) =< s(3581)
s(3587) =< s(3584)*s(3580)
s(3588) =< s(3584)*s(3581)
s(3589) =< s(3584)*s(3585)
s(3590) =< s(3584)*s(3586)
s(3591) =< s(3590)
s(3591) =< s(3589)
s(3592) =< s(3588)
s(3592) =< s(3587)

  with precondition: [A=1,E=1,I=1,M=1,B=J,B>=3,H>=0,K>=1,D+1>=B,F>=B,L+1>=B,C>=K,G>=K] 

* Chain [240]: 16*s(3597)+45*s(3598)+78*s(3605)+26*s(3606)+43
  Such that:s(3594) =< B
s(3595) =< C
s(3596) =< F
s(3593) =< G
s(3597) =< s(3596)
s(3598) =< s(3594)
s(3598) =< s(3596)
s(3599) =< s(3593)
s(3600) =< s(3595)
s(3601) =< s(3598)*s(3593)
s(3602) =< s(3598)*s(3595)
s(3603) =< s(3598)*s(3599)
s(3604) =< s(3598)*s(3600)
s(3605) =< s(3604)
s(3605) =< s(3603)
s(3606) =< s(3602)
s(3606) =< s(3601)

  with precondition: [A=1,E=1,I=1,M=1,F=J,F>=3,H>=0,K>=1,B>=F+1,D+1>=F,L+1>=F,C>=K,G>=K] 

 * Renamed intermediate variables: 
[ (eq(329,1),aux(117))>>s(3607), (eq(329,1),aux(118))>>s(3608), (eq(329,1),aux(119))>>s(3609), (eq(329,1),aux(120))>>s(3610), (eq(329,1),aux(121))>>s(3611), (eq(329,1),aux(122))>>s(3612), (eq(329,1),s(702))>>s(3613), (eq(329,1),s(703))>>s(3614), (eq(329,1),s(704))>>s(3615), (eq(329,1),s(705))>>s(3616), (eq(329,1),s(706))>>s(3617), (eq(329,1),s(707))>>s(3618), (eq(329,1),s(708))>>s(3619), (eq(329,1),s(709))>>s(3620)]

#### Simplifying cost structure of CE 329 
 * Renamed intermediate variables: 
[ (eq(330,1),s(752))>>s(3621), (eq(330,1),s(753))>>s(3622), (eq(330,1),s(754))>>s(3623), (eq(330,1),s(755))>>s(3624), (eq(330,1),s(756))>>s(3625), (eq(330,1),s(757))>>s(3626), (eq(330,1),s(758))>>s(3627), (eq(330,1),s(759))>>s(3628)]
 * Renamed intermediate variables: 
[ (eq(330,2),s(3421))>>s(3629)]

#### Simplifying cost structure of CE 330 
 * Joined equivalent variables [aux(376),s(3621)] into aux(376)
 * Joined equivalent variables [s(3627),s(3629)] into s(3627)
 * Renamed intermediate variables: 
[ (eq(334,1),s(752))>>s(3630), (eq(334,1),s(753))>>s(3631), (eq(334,1),s(754))>>s(3632), (eq(334,1),s(755))>>s(3633), (eq(334,1),s(756))>>s(3634), (eq(334,1),s(757))>>s(3635), (eq(334,1),s(758))>>s(3636), (eq(334,1),s(759))>>s(3637)]
 * Renamed intermediate variables: 
[ (eq(334,2),aux(354))>>s(3638), (eq(334,2),aux(355))>>s(3639), (eq(334,2),aux(356))>>s(3640), (eq(334,2),aux(357))>>s(3641), (eq(334,2),s(3431))>>s(3642), (eq(334,2),s(3432))>>s(3643), (eq(334,2),s(3433))>>s(3644), (eq(334,2),s(3434))>>s(3645), (eq(334,2),s(3435))>>s(3646), (eq(334,2),s(3436))>>s(3647), (eq(334,2),s(3437))>>s(3648), (eq(334,2),s(3438))>>s(3649), (eq(334,2),s(3439))>>s(3650), (eq(334,2),s(3440))>>s(3651), (eq(334,2),s(3443))>>s(3652), (eq(334,2),s(3448))>>s(3653), (eq(334,2),s(3449))>>s(3654)]

#### Simplifying cost structure of CE 334 
 * Joined equivalent variables [aux(377),s(3630),s(3638)] into aux(377)
 * Joined equivalent variables [aux(378),s(3639)] into aux(378)
 * Joined equivalent variables [aux(379),s(3632),s(3640)] into aux(379)
 * Joined equivalent variables [aux(380),s(3641)] into aux(380)
 * Joined equivalent variables [s(3636),s(3642)] into s(3636)
 * Renamed intermediate variables: 
[ (eq(335,1),s(752))>>s(3655), (eq(335,1),s(753))>>s(3656), (eq(335,1),s(754))>>s(3657), (eq(335,1),s(755))>>s(3658), (eq(335,1),s(756))>>s(3659), (eq(335,1),s(757))>>s(3660), (eq(335,1),s(758))>>s(3661), (eq(335,1),s(759))>>s(3662)]
 * Renamed intermediate variables: 
[ (eq(335,2),s(3462))>>s(3663), (eq(335,2),s(3461))>>s(3664), (eq(335,2),s(3459))>>s(3665), (eq(335,2),s(3460))>>s(3666), (eq(335,2),s(3463))>>s(3667), (eq(335,2),s(3464))>>s(3668), (eq(335,2),s(3465))>>s(3669), (eq(335,2),s(3466))>>s(3670), (eq(335,2),s(3467))>>s(3671), (eq(335,2),s(3468))>>s(3672), (eq(335,2),s(3469))>>s(3673), (eq(335,2),s(3470))>>s(3674), (eq(335,2),s(3471))>>s(3675), (eq(335,2),s(3472))>>s(3676)]

#### Simplifying cost structure of CE 335 
 * Joined equivalent variables [aux(381),s(3655),s(3663)] into aux(381)
 * Joined equivalent variables [aux(382),s(3664)] into aux(382)
 * Joined equivalent variables [aux(383),s(3657),s(3665)] into aux(383)
 * Joined equivalent variables [aux(384),s(3666)] into aux(384)
 * Joined equivalent variables [s(3661),s(3667)] into s(3661)
 * Renamed intermediate variables: 
[ (eq(336,1),s(752))>>s(3677), (eq(336,1),s(753))>>s(3678), (eq(336,1),s(754))>>s(3679), (eq(336,1),s(755))>>s(3680), (eq(336,1),s(756))>>s(3681), (eq(336,1),s(757))>>s(3682), (eq(336,1),s(758))>>s(3683), (eq(336,1),s(759))>>s(3684)]
 * Renamed intermediate variables: 
[ (eq(336,2),s(3474))>>s(3685), (eq(336,2),s(3475))>>s(3686), (eq(336,2),s(3476))>>s(3687), (eq(336,2),s(3473))>>s(3688), (eq(336,2),s(3477))>>s(3689), (eq(336,2),s(3478))>>s(3690), (eq(336,2),s(3479))>>s(3691), (eq(336,2),s(3480))>>s(3692), (eq(336,2),s(3481))>>s(3693), (eq(336,2),s(3482))>>s(3694), (eq(336,2),s(3483))>>s(3695), (eq(336,2),s(3484))>>s(3696), (eq(336,2),s(3485))>>s(3697), (eq(336,2),s(3486))>>s(3698)]

#### Simplifying cost structure of CE 336 
 * Joined equivalent variables [aux(385),s(3677),s(3685)] into aux(385)
 * Joined equivalent variables [aux(386),s(3686)] into aux(386)
 * Joined equivalent variables [aux(387),s(3679),s(3687)] into aux(387)
 * Joined equivalent variables [aux(388),s(3688)] into aux(388)
 * Joined equivalent variables [s(3681),s(3689)] into s(3681)
 * Renamed intermediate variables: 
[ (eq(337,1),s(752))>>s(3699), (eq(337,1),s(753))>>s(3700), (eq(337,1),s(754))>>s(3701), (eq(337,1),s(755))>>s(3702), (eq(337,1),s(756))>>s(3703), (eq(337,1),s(757))>>s(3704), (eq(337,1),s(758))>>s(3705), (eq(337,1),s(759))>>s(3706)]
 * Renamed intermediate variables: 
[ (eq(337,2),aux(360))>>s(3707), (eq(337,2),aux(361))>>s(3708), (eq(337,2),aux(362))>>s(3709), (eq(337,2),aux(363))>>s(3710), (eq(337,2),s(3490))>>s(3711), (eq(337,2),s(3492))>>s(3712), (eq(337,2),s(3494))>>s(3713), (eq(337,2),s(3495))>>s(3714), (eq(337,2),s(3496))>>s(3715), (eq(337,2),s(3497))>>s(3716), (eq(337,2),s(3498))>>s(3717), (eq(337,2),s(3499))>>s(3718), (eq(337,2),s(3500))>>s(3719), (eq(337,2),s(3501))>>s(3720), (eq(337,2),s(3502))>>s(3721), (eq(337,2),s(3503))>>s(3722), (eq(337,2),s(3504))>>s(3723)]

#### Simplifying cost structure of CE 337 
 * Joined equivalent variables [aux(389),s(3699),s(3707)] into aux(389)
 * Joined equivalent variables [aux(390),s(3708)] into aux(390)
 * Joined equivalent variables [aux(391),s(3701),s(3709)] into aux(391)
 * Joined equivalent variables [aux(392),s(3710)] into aux(392)
 * Joined equivalent variables [s(3703),s(3712)] into s(3703)
 * Joined equivalent variables [aux(393),aux(377),aux(381),aux(385),aux(389),s(3607)] into aux(393)
 * Joined equivalent variables [aux(394),aux(378),aux(382),aux(386),aux(390),s(3608)] into aux(394)
 * Joined equivalent variables [aux(395),s(3609)] into aux(395)
 * Joined equivalent variables [aux(396),aux(379),aux(383),aux(387),aux(391),s(3610),s(3623)] into aux(396)
 * Joined equivalent variables [aux(397),aux(380),aux(384),aux(388),aux(392),s(3611)] into aux(397)
 * Joined equivalent variables [aux(398),s(3612)] into aux(398)
 * Joined equivalent variables [s(3644),s(3669),s(3691),s(3716)] into s(3644)
 * Joined equivalent variables [s(3645),s(3670),s(3692),s(3717)] into s(3645)
 * Joined equivalent variables [s(3618),s(3636),s(3661),s(3683),s(3705)] into s(3618)
 * Joined equivalent variables [s(3643),s(3668),s(3690),s(3715)] into s(3643)
 * Joined equivalent variables [s(3615),s(3625),s(3634),s(3659),s(3681),s(3703)] into s(3615)
 * Joined equivalent variables [s(3613),s(3622),s(3631),s(3656),s(3678),s(3700)] into s(3613)
 * Joined equivalent variables [s(3652),s(3711)] into s(3652)
 * Joined equivalent variables [s(3614),s(3624),s(3633),s(3658),s(3680),s(3702)] into s(3614)
 * Joined equivalent variables [s(3617),s(3626),s(3635),s(3660),s(3682),s(3704)] into s(3617)
 * Joined equivalent variables [s(3620),s(3637),s(3662),s(3684),s(3706)] into s(3620)
 * Joined equivalent variables [s(3648),s(3673),s(3695),s(3720)] into s(3648)
 * Joined equivalent variables [s(3649),s(3674),s(3696),s(3721)] into s(3649)
 * Joined equivalent variables [s(3646),s(3671),s(3693),s(3718)] into s(3646)
 * Joined equivalent variables [s(3647),s(3672),s(3694),s(3719)] into s(3647)
 * Joined equivalent variables [s(3653),s(3713)] into s(3653)
 * Joined equivalent variables [s(3651),s(3676),s(3698),s(3723)] into s(3651)
 * Joined equivalent variables [s(3650),s(3675),s(3697),s(3722)] into s(3650)
 * Renamed intermediate variables: 
[ (eq(331,1),s(752))>>s(3724), (eq(331,1),s(753))>>s(3725), (eq(331,1),s(754))>>s(3726), (eq(331,1),s(755))>>s(3727), (eq(331,1),s(756))>>s(3728), (eq(331,1),s(757))>>s(3729), (eq(331,1),s(758))>>s(3730), (eq(331,1),s(759))>>s(3731)]
 * Renamed intermediate variables: 
[ (eq(331,2),s(3422))>>s(3732), (eq(331,2),s(3423))>>s(3733)]

#### Simplifying cost structure of CE 331 
 * Joined equivalent variables [aux(399),s(3724),s(3732)] into aux(399)
 * Joined equivalent variables [s(3730),s(3733)] into s(3730)
 * Renamed intermediate variables: 
[ (eq(332,1),s(752))>>s(3734), (eq(332,1),s(753))>>s(3735), (eq(332,1),s(754))>>s(3736), (eq(332,1),s(755))>>s(3737), (eq(332,1),s(756))>>s(3738), (eq(332,1),s(757))>>s(3739), (eq(332,1),s(758))>>s(3740), (eq(332,1),s(759))>>s(3741)]
 * Renamed intermediate variables: 
[ (eq(332,2),s(3424))>>s(3742)]

#### Simplifying cost structure of CE 332 
 * Joined equivalent variables [aux(400),s(3736)] into aux(400)
 * Joined equivalent variables [s(3738),s(3742)] into s(3738)
 * Renamed intermediate variables: 
[ (eq(333,1),s(752))>>s(3743), (eq(333,1),s(753))>>s(3744), (eq(333,1),s(754))>>s(3745), (eq(333,1),s(755))>>s(3746), (eq(333,1),s(756))>>s(3747), (eq(333,1),s(757))>>s(3748), (eq(333,1),s(758))>>s(3749), (eq(333,1),s(759))>>s(3750)]
 * Renamed intermediate variables: 
[ (eq(333,2),s(3425))>>s(3751), (eq(333,2),s(3426))>>s(3752)]

#### Simplifying cost structure of CE 333 
 * Joined equivalent variables [aux(401),s(3745),s(3751)] into aux(401)
 * Joined equivalent variables [s(3747),s(3752)] into s(3747)
 * Renamed intermediate variables: 
[ (eq(338,1),s(752))>>s(3753), (eq(338,1),s(753))>>s(3754), (eq(338,1),s(754))>>s(3755), (eq(338,1),s(755))>>s(3756), (eq(338,1),s(756))>>s(3757), (eq(338,1),s(757))>>s(3758), (eq(338,1),s(758))>>s(3759), (eq(338,1),s(759))>>s(3760)]
 * Renamed intermediate variables: 
[ (eq(338,2),aux(372))>>s(3761), (eq(338,2),aux(373))>>s(3762), (eq(338,2),aux(374))>>s(3763), (eq(338,2),aux(375))>>s(3764), (eq(338,2),s(3553))>>s(3765), (eq(338,2),s(3554))>>s(3766), (eq(338,2),s(3555))>>s(3767), (eq(338,2),s(3556))>>s(3768), (eq(338,2),s(3557))>>s(3769), (eq(338,2),s(3558))>>s(3770), (eq(338,2),s(3559))>>s(3771), (eq(338,2),s(3560))>>s(3772), (eq(338,2),s(3561))>>s(3773), (eq(338,2),s(3562))>>s(3774), (eq(338,2),s(3565))>>s(3775), (eq(338,2),s(3569))>>s(3776)]

#### Simplifying cost structure of CE 338 
 * Joined equivalent variables [aux(402),s(3753),s(3761)] into aux(402)
 * Joined equivalent variables [aux(403),s(3762)] into aux(403)
 * Joined equivalent variables [aux(404),s(3755),s(3763)] into aux(404)
 * Joined equivalent variables [aux(405),s(3764)] into aux(405)
 * Joined equivalent variables [s(3759),s(3765)] into s(3759)
 * Renamed intermediate variables: 
[ (eq(339,1),s(752))>>s(3777), (eq(339,1),s(753))>>s(3778), (eq(339,1),s(754))>>s(3779), (eq(339,1),s(755))>>s(3780), (eq(339,1),s(756))>>s(3781), (eq(339,1),s(757))>>s(3782), (eq(339,1),s(758))>>s(3783), (eq(339,1),s(759))>>s(3784)]
 * Renamed intermediate variables: 
[ (eq(339,2),s(3582))>>s(3785), (eq(339,2),s(3581))>>s(3786), (eq(339,2),s(3579))>>s(3787), (eq(339,2),s(3580))>>s(3788), (eq(339,2),s(3583))>>s(3789), (eq(339,2),s(3584))>>s(3790), (eq(339,2),s(3585))>>s(3791), (eq(339,2),s(3586))>>s(3792), (eq(339,2),s(3587))>>s(3793), (eq(339,2),s(3588))>>s(3794), (eq(339,2),s(3589))>>s(3795), (eq(339,2),s(3590))>>s(3796), (eq(339,2),s(3591))>>s(3797), (eq(339,2),s(3592))>>s(3798)]

#### Simplifying cost structure of CE 339 
 * Joined equivalent variables [aux(406),s(3777),s(3785)] into aux(406)
 * Joined equivalent variables [aux(407),s(3786)] into aux(407)
 * Joined equivalent variables [aux(408),s(3779),s(3787)] into aux(408)
 * Joined equivalent variables [aux(409),s(3788)] into aux(409)
 * Joined equivalent variables [s(3783),s(3789)] into s(3783)
 * Renamed intermediate variables: 
[ (eq(340,1),s(752))>>s(3799), (eq(340,1),s(753))>>s(3800), (eq(340,1),s(754))>>s(3801), (eq(340,1),s(755))>>s(3802), (eq(340,1),s(756))>>s(3803), (eq(340,1),s(757))>>s(3804), (eq(340,1),s(758))>>s(3805), (eq(340,1),s(759))>>s(3806)]
 * Renamed intermediate variables: 
[ (eq(340,2),aux(366))>>s(3807), (eq(340,2),aux(367))>>s(3808), (eq(340,2),aux(368))>>s(3809), (eq(340,2),aux(369))>>s(3810), (eq(340,2),s(3523))>>s(3811), (eq(340,2),s(3524))>>s(3812), (eq(340,2),s(3525))>>s(3813), (eq(340,2),s(3526))>>s(3814), (eq(340,2),s(3527))>>s(3815), (eq(340,2),s(3528))>>s(3816), (eq(340,2),s(3529))>>s(3817), (eq(340,2),s(3530))>>s(3818), (eq(340,2),s(3531))>>s(3819), (eq(340,2),s(3532))>>s(3820), (eq(340,2),s(3535))>>s(3821), (eq(340,2),s(3539))>>s(3822)]

#### Simplifying cost structure of CE 340 
 * Joined equivalent variables [aux(410),s(3799),s(3807)] into aux(410)
 * Joined equivalent variables [aux(411),s(3808)] into aux(411)
 * Joined equivalent variables [aux(412),s(3801),s(3809)] into aux(412)
 * Joined equivalent variables [aux(413),s(3810)] into aux(413)
 * Joined equivalent variables [s(3803),s(3811)] into s(3803)
 * Renamed intermediate variables: 
[ (eq(341,1),s(752))>>s(3823), (eq(341,1),s(753))>>s(3824), (eq(341,1),s(754))>>s(3825), (eq(341,1),s(755))>>s(3826), (eq(341,1),s(756))>>s(3827), (eq(341,1),s(757))>>s(3828), (eq(341,1),s(758))>>s(3829), (eq(341,1),s(759))>>s(3830)]
 * Renamed intermediate variables: 
[ (eq(341,2),s(3594))>>s(3831), (eq(341,2),s(3595))>>s(3832), (eq(341,2),s(3596))>>s(3833), (eq(341,2),s(3593))>>s(3834), (eq(341,2),s(3597))>>s(3835), (eq(341,2),s(3598))>>s(3836), (eq(341,2),s(3599))>>s(3837), (eq(341,2),s(3600))>>s(3838), (eq(341,2),s(3601))>>s(3839), (eq(341,2),s(3602))>>s(3840), (eq(341,2),s(3603))>>s(3841), (eq(341,2),s(3604))>>s(3842), (eq(341,2),s(3605))>>s(3843), (eq(341,2),s(3606))>>s(3844)]

#### Simplifying cost structure of CE 341 
 * Joined equivalent variables [aux(414),s(3823),s(3831)] into aux(414)
 * Joined equivalent variables [aux(415),s(3832)] into aux(415)
 * Joined equivalent variables [aux(416),s(3825),s(3833)] into aux(416)
 * Joined equivalent variables [aux(417),s(3834)] into aux(417)
 * Joined equivalent variables [s(3827),s(3835)] into s(3827)
 * Renamed intermediate variables: 
[ (ch([260]),s(3734))>>s(3845), (ch([260]),s(3735))>>s(3846), (ch([260]),s(3737))>>s(3847), (ch([260]),aux(400))>>s(3848), (ch([260]),s(3738))>>s(3849), (ch([260]),s(3739))>>s(3850), (ch([260]),s(3740))>>s(3851), (ch([260]),s(3741))>>s(3852)]
 * Renamed intermediate variables: 
[ (ch([262]),aux(376))>>s(3853), (ch([262]),aux(393))>>s(3854), (ch([262]),aux(394))>>s(3855), (ch([262]),aux(395))>>s(3856), (ch([262]),aux(396))>>s(3857), (ch([262]),aux(397))>>s(3858), (ch([262]),aux(398))>>s(3859), (ch([262]),s(3613))>>s(3860), (ch([262]),s(3614))>>s(3861), (ch([262]),s(3615))>>s(3862), (ch([262]),s(3616))>>s(3863), (ch([262]),s(3617))>>s(3864), (ch([262]),s(3618))>>s(3865), (ch([262]),s(3619))>>s(3866), (ch([262]),s(3620))>>s(3867), (ch([262]),s(3627))>>s(3868), (ch([262]),s(3628))>>s(3869), (ch([262]),s(3643))>>s(3870), (ch([262]),s(3644))>>s(3871), (ch([262]),s(3645))>>s(3872), (ch([262]),s(3646))>>s(3873), (ch([262]),s(3647))>>s(3874), (ch([262]),s(3648))>>s(3875), (ch([262]),s(3649))>>s(3876), (ch([262]),s(3650))>>s(3877), (ch([262]),s(3651))>>s(3878), (ch([262]),s(3652))>>s(3879), (ch([262]),s(3653))>>s(3880), (ch([262]),s(3654))>>s(3881), (ch([262]),s(3714))>>s(3882)]
 * Joined equivalent variables [aux(418),s(3848),s(3853)] into aux(418)
 * Joined equivalent variables [aux(419),s(3845),s(3854)] into aux(419)
 * Joined equivalent variables [aux(420),s(3855)] into aux(420)
 * Joined equivalent variables [aux(421),s(3856)] into aux(421)
 * Joined equivalent variables [aux(422),s(3858)] into aux(422)
 * Joined equivalent variables [aux(423),s(3859)] into aux(423)
 * Joined equivalent variables [s(3849),s(3868)] into s(3849)
 * Joined equivalent variables [s(3851),s(3865)] into s(3851)
 * Joined equivalent variables [s(3846),s(3860)] into s(3846)
 * Joined equivalent variables [s(3847),s(3861)] into s(3847)
 * Joined equivalent variables [s(3852),s(3867)] into s(3852)

#### Cost of chains of plus(A,B,C,D,E,F,G,H,I,J,K,L):
* Chain [262]: 1344*s(3615)+324*s(3616)+240*s(3617)+1312*s(3618)+324*s(3619)+234*s(3620)+38*s(3627)+6*s(3628)+360*s(3643)+624*s(3650)+208*s(3651)+72*s(3653)+12*s(3654)+12*s(3714)+93
  Such that:aux(376) =< 2
aux(393) =< A
aux(394) =< B
aux(395) =< C
aux(396) =< E
aux(397) =< F
aux(398) =< G
s(3613) =< aux(394)
s(3613) =< aux(395)
s(3614) =< aux(397)
s(3614) =< aux(398)
s(3615) =< aux(396)
s(3616) =< aux(397)
s(3617) =< s(3615)*s(3614)
s(3618) =< aux(393)
s(3619) =< aux(394)
s(3620) =< s(3618)*s(3613)
s(3627) =< aux(376)
s(3628) =< s(3627)*s(3613)
s(3643) =< aux(393)
s(3643) =< aux(396)
s(3644) =< aux(397)
s(3645) =< aux(394)
s(3646) =< s(3643)*aux(397)
s(3647) =< s(3643)*aux(394)
s(3648) =< s(3643)*s(3644)
s(3649) =< s(3643)*s(3645)
s(3650) =< s(3649)
s(3650) =< s(3648)
s(3651) =< s(3647)
s(3651) =< s(3646)
s(3652) =< aux(394)
s(3652) =< aux(397)
s(3653) =< s(3652)
s(3654) =< s(3618)*s(3652)
s(3714) =< s(3615)*s(3652)

  with precondition: [D=1,H=1,I=1,J=0,L=1,A>=2,B>=1,C>=0,E>=2,F>=1,G>=0,K>=0] 

* Chain [261]: 32*s(3728)+6*s(3729)+48*s(3730)+6*s(3731)+79
  Such that:s(3725) =< B
s(3725) =< C
s(3726) =< E
s(3727) =< F
s(3727) =< G
aux(399) =< 2
s(3730) =< aux(399)
s(3728) =< s(3726)
s(3729) =< s(3728)*s(3727)
s(3731) =< s(3730)*s(3725)

  with precondition: [A=2,D=1,H=1,I=2,J=1,L=1,B>=1,C>=1,E>=2,F>=1,K>=1,G+1>=E] 

* Chain [260]: 38*s(3738)+6*s(3739)+32*s(3740)+6*s(3741)+83
  Such that:s(3734) =< A
s(3735) =< B
s(3735) =< C
s(3737) =< F
s(3737) =< G
aux(400) =< 2
s(3738) =< aux(400)
s(3739) =< s(3738)*s(3737)
s(3740) =< s(3734)
s(3741) =< s(3740)*s(3735)

  with precondition: [D=1,E=2,H=1,I=1,J=0,L=1,A>=3,B>=1,F>=1,G>=1,K>=0,C+1>=A] 

* Chain [259]: 48*s(3747)+6*s(3748)+32*s(3749)+6*s(3750)+82
  Such that:s(3743) =< A
s(3744) =< B
s(3744) =< C
s(3746) =< F
s(3746) =< G
aux(401) =< 2
s(3747) =< aux(401)
s(3748) =< s(3747)*s(3746)
s(3749) =< s(3743)
s(3750) =< s(3749)*s(3744)

  with precondition: [D=1,E=2,H=1,I=2,J=1,L=1,A>=3,B>=1,F>=1,G>=1,K>=1,C+1>=A] 

* Chain [258]: 32*s(3757)+6*s(3758)+80*s(3759)+6*s(3760)+135*s(3766)+234*s(3773)+78*s(3774)+12*s(3776)+79
  Such that:s(3754) =< C
s(3756) =< G
aux(402) =< A
aux(403) =< B
aux(404) =< E
aux(405) =< F
s(3754) =< aux(403)
s(3756) =< aux(405)
s(3759) =< aux(402)
s(3766) =< aux(402)
s(3766) =< aux(404)
s(3767) =< aux(405)
s(3768) =< aux(403)
s(3769) =< s(3766)*aux(405)
s(3770) =< s(3766)*aux(403)
s(3771) =< s(3766)*s(3767)
s(3772) =< s(3766)*s(3768)
s(3773) =< s(3772)
s(3773) =< s(3771)
s(3774) =< s(3770)
s(3774) =< s(3769)
s(3775) =< aux(403)
s(3775) =< aux(405)
s(3776) =< s(3759)*s(3775)
s(3757) =< aux(404)
s(3758) =< s(3757)*s(3756)
s(3760) =< s(3759)*s(3754)

  with precondition: [D=1,H=1,L=1,A=I,A>=2,J>=2,C+1>=A,E>=A,K+1>=A,G+1>=E,B>=J,F>=J] 

* Chain [257]: 32*s(3781)+6*s(3782)+48*s(3783)+6*s(3784)+45*s(3790)+78*s(3797)+26*s(3798)+79
  Such that:s(3778) =< C
s(3780) =< G
aux(406) =< A
aux(407) =< B
aux(408) =< E
aux(409) =< F
s(3778) =< aux(407)
s(3780) =< aux(409)
s(3783) =< aux(406)
s(3790) =< aux(406)
s(3790) =< aux(408)
s(3791) =< aux(409)
s(3792) =< aux(407)
s(3793) =< s(3790)*aux(409)
s(3794) =< s(3790)*aux(407)
s(3795) =< s(3790)*s(3791)
s(3796) =< s(3790)*s(3792)
s(3797) =< s(3796)
s(3797) =< s(3795)
s(3798) =< s(3794)
s(3798) =< s(3793)
s(3781) =< aux(408)
s(3782) =< s(3781)*s(3780)
s(3784) =< s(3783)*s(3778)

  with precondition: [D=1,H=1,L=1,A=I,A>=3,J>=1,C+1>=A,E>=A,K+1>=A,G+1>=E,B>=J,F>=J] 

* Chain [256]: 80*s(3803)+6*s(3804)+32*s(3805)+6*s(3806)+135*s(3812)+234*s(3819)+78*s(3820)+12*s(3822)+82
  Such that:s(3800) =< C
s(3802) =< G
aux(410) =< A
aux(411) =< B
aux(412) =< E
aux(413) =< F
s(3800) =< aux(411)
s(3802) =< aux(413)
s(3803) =< aux(412)
s(3812) =< aux(410)
s(3812) =< aux(412)
s(3813) =< aux(413)
s(3814) =< aux(411)
s(3815) =< s(3812)*aux(413)
s(3816) =< s(3812)*aux(411)
s(3817) =< s(3812)*s(3813)
s(3818) =< s(3812)*s(3814)
s(3819) =< s(3818)
s(3819) =< s(3817)
s(3820) =< s(3816)
s(3820) =< s(3815)
s(3821) =< aux(411)
s(3821) =< aux(413)
s(3822) =< s(3803)*s(3821)
s(3804) =< s(3803)*s(3802)
s(3805) =< aux(410)
s(3806) =< s(3805)*s(3800)

  with precondition: [D=1,H=1,L=1,E=I,E>=2,J>=2,C+1>=A,A>=E+1,G+1>=E,K+1>=E,B>=J,F>=J] 

* Chain [255]: 48*s(3827)+6*s(3828)+32*s(3829)+6*s(3830)+45*s(3836)+78*s(3843)+26*s(3844)+82
  Such that:s(3824) =< C
s(3826) =< G
aux(414) =< A
aux(415) =< B
aux(416) =< E
aux(417) =< F
s(3824) =< aux(415)
s(3826) =< aux(417)
s(3827) =< aux(416)
s(3836) =< aux(414)
s(3836) =< aux(416)
s(3837) =< aux(417)
s(3838) =< aux(415)
s(3839) =< s(3836)*aux(417)
s(3840) =< s(3836)*aux(415)
s(3841) =< s(3836)*s(3837)
s(3842) =< s(3836)*s(3838)
s(3843) =< s(3842)
s(3843) =< s(3841)
s(3844) =< s(3840)
s(3844) =< s(3839)
s(3828) =< s(3827)*s(3826)
s(3829) =< aux(414)
s(3830) =< s(3829)*s(3824)

  with precondition: [D=1,H=1,L=1,E=I,E>=3,J>=1,C+1>=A,A>=E+1,G+1>=E,K+1>=E,B>=J,F>=J] 


#### Simplifying cost structure of CE 342 
 * Renamed intermediate variables: 
[ (eq(344,1),s(774))>>s(3883), (eq(344,1),s(775))>>s(3884), (eq(344,1),s(776))>>s(3885), (eq(344,1),s(777))>>s(3886), (eq(344,1),s(778))>>s(3887), (eq(344,1),s(779))>>s(3888), (eq(344,1),s(780))>>s(3889)]

#### Simplifying cost structure of CE 344 
 * Joined equivalent variables [aux(424),s(3884)] into aux(424)
 * Joined equivalent variables [aux(425),s(3886)] into aux(425)
 * Joined equivalent variables [s(3883),s(3887)] into s(3883)
 * Renamed intermediate variables: 
[ (eq(345,1),s(781))>>s(3890)]

#### Simplifying cost structure of CE 345 
 * Joined equivalent variables [aux(426),aux(424)] into aux(426)
 * Joined equivalent variables [s(3883),s(3890)] into s(3883)
 * Renamed intermediate variables: 
[ (eq(343,1),s(772))>>s(3891), (eq(343,1),s(773))>>s(3892)]

#### Simplifying cost structure of CE 343 
 * Renamed intermediate variables: 
[ (eq(346,1),s(782))>>s(3893), (eq(346,1),s(783))>>s(3894), (eq(346,1),s(784))>>s(3895), (eq(346,1),s(785))>>s(3896)]

#### Simplifying cost structure of CE 346 
 * Joined equivalent variables [aux(427),s(3891),s(3894)] into aux(427)
 * Joined equivalent variables [s(3892),s(3895)] into s(3892)

#### Computing cost of chain [multiple([263,264,265,266,267,268],[[270]])] with multiple recursion
 * Renamed intermediate variables: 
[ (eq(358,1),s(3824))>>s(3897), (eq(358,1),s(3826))>>s(3898), (eq(358,1),aux(414))>>s(3899), (eq(358,1),aux(415))>>s(3900), (eq(358,1),aux(416))>>s(3901), (eq(358,1),aux(417))>>s(3902), (eq(358,1),s(3827))>>s(3903), (eq(358,1),s(3836))>>s(3904), (eq(358,1),s(3837))>>s(3905), (eq(358,1),s(3838))>>s(3906), (eq(358,1),s(3839))>>s(3907), (eq(358,1),s(3840))>>s(3908), (eq(358,1),s(3841))>>s(3909), (eq(358,1),s(3842))>>s(3910), (eq(358,1),s(3843))>>s(3911), (eq(358,1),s(3844))>>s(3912), (eq(358,1),s(3828))>>s(3913), (eq(358,1),s(3829))>>s(3914), (eq(358,1),s(3830))>>s(3915)]

#### Simplifying cost structure of CE 358 
 * Joined equivalent variables [s(3900),s(3897)] into s(3900)
 * Joined equivalent variables [s(3902),s(3898)] into s(3902)
 * Renamed intermediate variables: 
[ (it(263),s(3900))>>s(3916), (it(263),s(3901))>>s(3917), (it(263),s(3899))>>s(3918), (it(263),s(3902))>>s(3919), (it(263),aux(428))>>s(3920), (it(263),s(3903))>>s(3921), (it(263),s(3904))>>s(3922), (it(263),s(3905))>>s(3923), (it(263),s(3906))>>s(3924), (it(263),s(3907))>>s(3925), (it(263),s(3908))>>s(3926), (it(263),s(3909))>>s(3927), (it(263),s(3910))>>s(3928), (it(263),s(3911))>>s(3929), (it(263),s(3912))>>s(3930), (it(263),s(3913))>>s(3931), (it(263),s(3914))>>s(3932), (it(263),s(3915))>>s(3933)]
 * Renamed intermediate variables: 
[ (eq(357,1),s(3800))>>s(3934), (eq(357,1),s(3802))>>s(3935), (eq(357,1),aux(410))>>s(3936), (eq(357,1),aux(411))>>s(3937), (eq(357,1),aux(412))>>s(3938), (eq(357,1),aux(413))>>s(3939), (eq(357,1),s(3803))>>s(3940), (eq(357,1),s(3812))>>s(3941), (eq(357,1),s(3813))>>s(3942), (eq(357,1),s(3814))>>s(3943), (eq(357,1),s(3815))>>s(3944), (eq(357,1),s(3816))>>s(3945), (eq(357,1),s(3817))>>s(3946), (eq(357,1),s(3818))>>s(3947), (eq(357,1),s(3819))>>s(3948), (eq(357,1),s(3820))>>s(3949), (eq(357,1),s(3821))>>s(3950), (eq(357,1),s(3822))>>s(3951), (eq(357,1),s(3804))>>s(3952), (eq(357,1),s(3805))>>s(3953), (eq(357,1),s(3806))>>s(3954)]

#### Simplifying cost structure of CE 357 
 * Joined equivalent variables [s(3937),s(3934)] into s(3937)
 * Joined equivalent variables [s(3939),s(3935)] into s(3939)
 * Renamed intermediate variables: 
[ (it(264),s(3937))>>s(3955), (it(264),s(3938))>>s(3956), (it(264),s(3936))>>s(3957), (it(264),s(3939))>>s(3958), (it(264),aux(429))>>s(3959), (it(264),s(3940))>>s(3960), (it(264),s(3941))>>s(3961), (it(264),s(3942))>>s(3962), (it(264),s(3943))>>s(3963), (it(264),s(3944))>>s(3964), (it(264),s(3945))>>s(3965), (it(264),s(3946))>>s(3966), (it(264),s(3947))>>s(3967), (it(264),s(3948))>>s(3968), (it(264),s(3949))>>s(3969), (it(264),s(3950))>>s(3970), (it(264),s(3951))>>s(3971), (it(264),s(3952))>>s(3972), (it(264),s(3953))>>s(3973), (it(264),s(3954))>>s(3974)]
 * Renamed intermediate variables: 
[ (eq(350,1),s(3053))>>s(3975), (eq(350,1),s(3054))>>s(3976), (eq(350,1),s(3056))>>s(3977), (eq(350,1),s(3057))>>s(3978), (eq(350,1),s(3059))>>s(3979), (eq(350,1),s(3045))>>s(3980), (eq(350,1),aux(303))>>s(3981), (eq(350,1),aux(304))>>s(3982), (eq(350,1),aux(305))>>s(3983), (eq(350,1),aux(306))>>s(3984), (eq(350,1),aux(307))>>s(3985), (eq(350,1),s(3043))>>s(3986), (eq(350,1),s(3050))>>s(3987), (eq(350,1),s(3048))>>s(3988), (eq(350,1),s(3061))>>s(3989), (eq(350,1),s(3062))>>s(3990), (eq(350,1),s(3063))>>s(3991), (eq(350,1),s(3064))>>s(3992), (eq(350,1),s(3065))>>s(3993), (eq(350,1),s(3066))>>s(3994), (eq(350,1),s(3067))>>s(3995), (eq(350,1),s(3068))>>s(3996), (eq(350,1),s(3069))>>s(3997), (eq(350,1),s(3070))>>s(3998), (eq(350,1),s(3071))>>s(3999), (eq(350,1),s(3072))>>s(4000), (eq(350,1),s(3073))>>s(4001), (eq(350,1),s(3074))>>s(4002), (eq(350,1),s(3075))>>s(4003), (eq(350,1),s(3076))>>s(4004), (eq(350,1),s(3077))>>s(4005), (eq(350,1),s(3078))>>s(4006), (eq(350,1),s(3079))>>s(4007), (eq(350,1),s(3080))>>s(4008), (eq(350,1),s(3081))>>s(4009), (eq(350,1),s(3082))>>s(4010), (eq(350,1),s(3083))>>s(4011), (eq(350,1),s(3084))>>s(4012), (eq(350,1),s(3085))>>s(4013), (eq(350,1),s(3086))>>s(4014), (eq(350,1),s(3087))>>s(4015), (eq(350,1),s(3088))>>s(4016), (eq(350,1),s(3089))>>s(4017), (eq(350,1),s(3090))>>s(4018), (eq(350,1),s(3091))>>s(4019), (eq(350,1),s(3092))>>s(4020), (eq(350,1),s(3093))>>s(4021), (eq(350,1),s(3094))>>s(4022), (eq(350,1),s(3095))>>s(4023), (eq(350,1),s(3096))>>s(4024), (eq(350,1),s(3097))>>s(4025), (eq(350,1),s(3098))>>s(4026), (eq(350,1),s(3099))>>s(4027), (eq(350,1),s(3100))>>s(4028), (eq(350,1),s(3101))>>s(4029), (eq(350,1),s(3102))>>s(4030), (eq(350,1),s(3103))>>s(4031), (eq(350,1),s(3104))>>s(4032), (eq(350,1),s(3105))>>s(4033), (eq(350,1),s(3106))>>s(4034), (eq(350,1),s(3107))>>s(4035), (eq(350,1),s(3108))>>s(4036), (eq(350,1),s(3109))>>s(4037), (eq(350,1),s(3110))>>s(4038), (eq(350,1),s(3111))>>s(4039), (eq(350,1),s(3112))>>s(4040), (eq(350,1),s(3113))>>s(4041), (eq(350,1),s(3114))>>s(4042), (eq(350,1),s(3115))>>s(4043), (eq(350,1),s(3116))>>s(4044), (eq(350,1),s(3117))>>s(4045), (eq(350,1),s(3118))>>s(4046), (eq(350,1),s(3119))>>s(4047), (eq(350,1),s(3120))>>s(4048), (eq(350,1),s(3121))>>s(4049), (eq(350,1),s(3122))>>s(4050), (eq(350,1),s(3123))>>s(4051), (eq(350,1),s(3124))>>s(4052), (eq(350,1),s(3125))>>s(4053), (eq(350,1),s(3126))>>s(4054), (eq(350,1),s(3127))>>s(4055), (eq(350,1),s(3128))>>s(4056), (eq(350,1),s(3129))>>s(4057), (eq(350,1),s(3130))>>s(4058), (eq(350,1),s(3131))>>s(4059), (eq(350,1),s(3132))>>s(4060), (eq(350,1),s(3133))>>s(4061), (eq(350,1),s(3134))>>s(4062), (eq(350,1),s(3135))>>s(4063), (eq(350,1),s(3136))>>s(4064), (eq(350,1),s(3137))>>s(4065), (eq(350,1),s(3138))>>s(4066), (eq(350,1),s(3139))>>s(4067), (eq(350,1),s(3140))>>s(4068), (eq(350,1),s(3141))>>s(4069), (eq(350,1),s(3142))>>s(4070), (eq(350,1),s(3143))>>s(4071), (eq(350,1),s(3144))>>s(4072), (eq(350,1),s(3145))>>s(4073), (eq(350,1),s(3146))>>s(4074), (eq(350,1),s(3147))>>s(4075), (eq(350,1),s(3148))>>s(4076), (eq(350,1),s(3149))>>s(4077), (eq(350,1),s(3150))>>s(4078), (eq(350,1),s(3046))>>s(4079), (eq(350,1),s(3047))>>s(4080), (eq(350,1),s(3049))>>s(4081)]

#### Simplifying cost structure of CE 350 
 * Joined equivalent variables [s(3985),s(3980)] into s(3985)
 * Renamed intermediate variables: 
[ (eq(356,1),s(3778))>>s(4082), (eq(356,1),s(3780))>>s(4083), (eq(356,1),aux(406))>>s(4084), (eq(356,1),aux(407))>>s(4085), (eq(356,1),aux(408))>>s(4086), (eq(356,1),aux(409))>>s(4087), (eq(356,1),s(3783))>>s(4088), (eq(356,1),s(3790))>>s(4089), (eq(356,1),s(3791))>>s(4090), (eq(356,1),s(3792))>>s(4091), (eq(356,1),s(3793))>>s(4092), (eq(356,1),s(3794))>>s(4093), (eq(356,1),s(3795))>>s(4094), (eq(356,1),s(3796))>>s(4095), (eq(356,1),s(3797))>>s(4096), (eq(356,1),s(3798))>>s(4097), (eq(356,1),s(3781))>>s(4098), (eq(356,1),s(3782))>>s(4099), (eq(356,1),s(3784))>>s(4100)]

#### Simplifying cost structure of CE 356 
 * Joined equivalent variables [s(4085),s(4082)] into s(4085)
 * Joined equivalent variables [s(4087),s(4083)] into s(4087)
 * Joined equivalent variables [s(4084),s(4086)] into s(4084)
 * Joined equivalent variables [s(4088),s(4089),s(4098)] into s(4088)
 * Joined equivalent variables [aux(432),s(3982),s(4085)] into aux(432)
 * Joined equivalent variables [aux(433),aux(430)] into aux(433)
 * Joined equivalent variables [aux(434),s(3985),s(4087)] into aux(434)
 * Joined equivalent variables [aux(435),aux(431)] into aux(435)
 * Joined equivalent variables [s(3982),s(3986)] into s(3982)
 * Joined equivalent variables [s(3985),s(3987)] into s(3985)
 * Joined equivalent variables [s(3992),s(4090)] into s(3992)
 * Joined equivalent variables [s(4012),s(4091)] into s(4012)
 * Joined equivalent variables [s(3984),s(4084)] into s(3984)
 * Joined equivalent variables [s(4079),s(4088)] into s(4079)
 * Joined equivalent variables [s(4080),s(4099)] into s(4080)
 * Renamed intermediate variables: 
[ (it(265),s(3981))>>s(4101), (it(265),s(3975))>>s(4102), (it(265),s(3976))>>s(4103), (it(265),s(3977))>>s(4104), (it(265),s(3978))>>s(4105), (it(265),s(3979))>>s(4106), (it(265),aux(432))>>s(4107), (it(265),aux(433))>>s(4108), (it(265),aux(434))>>s(4109), (it(265),aux(435))>>s(4110), (it(265),s(3984))>>s(4111), (it(265),s(3988))>>s(4112), (it(265),s(3989))>>s(4113), (it(265),s(3990))>>s(4114), (it(265),s(3991))>>s(4115), (it(265),s(3992))>>s(4116), (it(265),s(3993))>>s(4117), (it(265),s(3994))>>s(4118), (it(265),s(3995))>>s(4119), (it(265),s(3996))>>s(4120), (it(265),s(3997))>>s(4121), (it(265),s(3998))>>s(4122), (it(265),s(3999))>>s(4123), (it(265),s(4000))>>s(4124), (it(265),s(4001))>>s(4125), (it(265),s(4002))>>s(4126), (it(265),s(4003))>>s(4127), (it(265),s(4004))>>s(4128), (it(265),s(4005))>>s(4129), (it(265),s(4006))>>s(4130), (it(265),s(4007))>>s(4131), (it(265),s(4008))>>s(4132), (it(265),s(4009))>>s(4133), (it(265),s(4010))>>s(4134), (it(265),s(4011))>>s(4135), (it(265),s(4012))>>s(4136), (it(265),s(4013))>>s(4137), (it(265),s(4014))>>s(4138), (it(265),s(4015))>>s(4139), (it(265),s(4016))>>s(4140), (it(265),s(4017))>>s(4141), (it(265),s(4018))>>s(4142), (it(265),s(4019))>>s(4143), (it(265),s(4020))>>s(4144), (it(265),s(4021))>>s(4145), (it(265),s(4022))>>s(4146), (it(265),s(4023))>>s(4147), (it(265),s(4024))>>s(4148), (it(265),s(4025))>>s(4149), (it(265),s(4026))>>s(4150), (it(265),s(4027))>>s(4151), (it(265),s(4028))>>s(4152), (it(265),s(4029))>>s(4153), (it(265),s(4030))>>s(4154), (it(265),s(4031))>>s(4155), (it(265),s(4032))>>s(4156), (it(265),s(4033))>>s(4157), (it(265),s(4034))>>s(4158), (it(265),s(4035))>>s(4159), (it(265),s(4036))>>s(4160), (it(265),s(4037))>>s(4161), (it(265),s(4038))>>s(4162), (it(265),s(4039))>>s(4163), (it(265),s(4040))>>s(4164), (it(265),s(4041))>>s(4165), (it(265),s(4042))>>s(4166), (it(265),s(4043))>>s(4167), (it(265),s(4044))>>s(4168), (it(265),s(4045))>>s(4169), (it(265),s(4046))>>s(4170), (it(265),s(4047))>>s(4171), (it(265),s(4048))>>s(4172), (it(265),s(4049))>>s(4173), (it(265),s(4050))>>s(4174), (it(265),s(4051))>>s(4175), (it(265),s(4052))>>s(4176), (it(265),s(4053))>>s(4177), (it(265),s(4054))>>s(4178), (it(265),s(4055))>>s(4179), (it(265),s(4056))>>s(4180), (it(265),s(4057))>>s(4181), (it(265),s(4058))>>s(4182), (it(265),s(4059))>>s(4183), (it(265),s(4060))>>s(4184), (it(265),s(4061))>>s(4185), (it(265),s(4062))>>s(4186), (it(265),s(4063))>>s(4187), (it(265),s(4064))>>s(4188), (it(265),s(4065))>>s(4189), (it(265),s(4066))>>s(4190), (it(265),s(4067))>>s(4191), (it(265),s(4068))>>s(4192), (it(265),s(4069))>>s(4193), (it(265),s(4070))>>s(4194), (it(265),s(4071))>>s(4195), (it(265),s(4072))>>s(4196), (it(265),s(4073))>>s(4197), (it(265),s(4074))>>s(4198), (it(265),s(4075))>>s(4199), (it(265),s(4076))>>s(4200), (it(265),s(4077))>>s(4201), (it(265),s(4078))>>s(4202), (it(265),s(4079))>>s(4203), (it(265),s(4080))>>s(4204), (it(265),s(4081))>>s(4205), (it(265),s(4092))>>s(4206), (it(265),s(4093))>>s(4207), (it(265),s(4094))>>s(4208), (it(265),s(4095))>>s(4209), (it(265),s(4096))>>s(4210), (it(265),s(4097))>>s(4211), (it(265),s(4100))>>s(4212)]
 * Renamed intermediate variables: 
[ (eq(349,1),s(2960))>>s(4213), (eq(349,1),s(2961))>>s(4214), (eq(349,1),s(2963))>>s(4215), (eq(349,1),s(2964))>>s(4216), (eq(349,1),s(2952))>>s(4217), (eq(349,1),aux(298))>>s(4218), (eq(349,1),aux(299))>>s(4219), (eq(349,1),aux(300))>>s(4220), (eq(349,1),aux(301))>>s(4221), (eq(349,1),aux(302))>>s(4222), (eq(349,1),s(2950))>>s(4223), (eq(349,1),s(2957))>>s(4224), (eq(349,1),s(2955))>>s(4225), (eq(349,1),s(2967))>>s(4226), (eq(349,1),s(2968))>>s(4227), (eq(349,1),s(2969))>>s(4228), (eq(349,1),s(2970))>>s(4229), (eq(349,1),s(2971))>>s(4230), (eq(349,1),s(2972))>>s(4231), (eq(349,1),s(2973))>>s(4232), (eq(349,1),s(2974))>>s(4233), (eq(349,1),s(2975))>>s(4234), (eq(349,1),s(2976))>>s(4235), (eq(349,1),s(2977))>>s(4236), (eq(349,1),s(2978))>>s(4237), (eq(349,1),s(2979))>>s(4238), (eq(349,1),s(2980))>>s(4239), (eq(349,1),s(2981))>>s(4240), (eq(349,1),s(2982))>>s(4241), (eq(349,1),s(2983))>>s(4242), (eq(349,1),s(2984))>>s(4243), (eq(349,1),s(2985))>>s(4244), (eq(349,1),s(2986))>>s(4245), (eq(349,1),s(2987))>>s(4246), (eq(349,1),s(2988))>>s(4247), (eq(349,1),s(2989))>>s(4248), (eq(349,1),s(2990))>>s(4249), (eq(349,1),s(2991))>>s(4250), (eq(349,1),s(2992))>>s(4251), (eq(349,1),s(2993))>>s(4252), (eq(349,1),s(2994))>>s(4253), (eq(349,1),s(2995))>>s(4254), (eq(349,1),s(2996))>>s(4255), (eq(349,1),s(2997))>>s(4256), (eq(349,1),s(2998))>>s(4257), (eq(349,1),s(2999))>>s(4258), (eq(349,1),s(3000))>>s(4259), (eq(349,1),s(3001))>>s(4260), (eq(349,1),s(3002))>>s(4261), (eq(349,1),s(3003))>>s(4262), (eq(349,1),s(3004))>>s(4263), (eq(349,1),s(3005))>>s(4264), (eq(349,1),s(3006))>>s(4265), (eq(349,1),s(3007))>>s(4266), (eq(349,1),s(3008))>>s(4267), (eq(349,1),s(3009))>>s(4268), (eq(349,1),s(3010))>>s(4269), (eq(349,1),s(3011))>>s(4270), (eq(349,1),s(3012))>>s(4271), (eq(349,1),s(3013))>>s(4272), (eq(349,1),s(3014))>>s(4273), (eq(349,1),s(3015))>>s(4274), (eq(349,1),s(3016))>>s(4275), (eq(349,1),s(3017))>>s(4276), (eq(349,1),s(3018))>>s(4277), (eq(349,1),s(3019))>>s(4278), (eq(349,1),s(3020))>>s(4279), (eq(349,1),s(3021))>>s(4280), (eq(349,1),s(3022))>>s(4281), (eq(349,1),s(3023))>>s(4282), (eq(349,1),s(3024))>>s(4283), (eq(349,1),s(3025))>>s(4284), (eq(349,1),s(3026))>>s(4285), (eq(349,1),s(3027))>>s(4286), (eq(349,1),s(3028))>>s(4287), (eq(349,1),s(3029))>>s(4288), (eq(349,1),s(3030))>>s(4289), (eq(349,1),s(3031))>>s(4290), (eq(349,1),s(3032))>>s(4291), (eq(349,1),s(3033))>>s(4292), (eq(349,1),s(3034))>>s(4293), (eq(349,1),s(3035))>>s(4294), (eq(349,1),s(3036))>>s(4295), (eq(349,1),s(3037))>>s(4296), (eq(349,1),s(3038))>>s(4297), (eq(349,1),s(3039))>>s(4298), (eq(349,1),s(3040))>>s(4299), (eq(349,1),s(3041))>>s(4300), (eq(349,1),s(2953))>>s(4301), (eq(349,1),s(2954))>>s(4302), (eq(349,1),s(2956))>>s(4303)]

#### Simplifying cost structure of CE 349 
 * Joined equivalent variables [s(4222),s(4217)] into s(4222)
 * Renamed intermediate variables: 
[ (eq(355,1),s(3754))>>s(4304), (eq(355,1),s(3756))>>s(4305), (eq(355,1),aux(402))>>s(4306), (eq(355,1),aux(403))>>s(4307), (eq(355,1),aux(404))>>s(4308), (eq(355,1),aux(405))>>s(4309), (eq(355,1),s(3759))>>s(4310), (eq(355,1),s(3766))>>s(4311), (eq(355,1),s(3767))>>s(4312), (eq(355,1),s(3768))>>s(4313), (eq(355,1),s(3769))>>s(4314), (eq(355,1),s(3770))>>s(4315), (eq(355,1),s(3771))>>s(4316), (eq(355,1),s(3772))>>s(4317), (eq(355,1),s(3773))>>s(4318), (eq(355,1),s(3774))>>s(4319), (eq(355,1),s(3775))>>s(4320), (eq(355,1),s(3776))>>s(4321), (eq(355,1),s(3757))>>s(4322), (eq(355,1),s(3758))>>s(4323), (eq(355,1),s(3760))>>s(4324)]

#### Simplifying cost structure of CE 355 
 * Joined equivalent variables [s(4307),s(4304)] into s(4307)
 * Joined equivalent variables [s(4309),s(4305)] into s(4309)
 * Joined equivalent variables [aux(437),s(4219),s(4307)] into aux(437)
 * Joined equivalent variables [aux(440),s(4222),s(4309)] into aux(440)
 * Joined equivalent variables [s(4219),s(4223)] into s(4219)
 * Joined equivalent variables [s(4222),s(4224)] into s(4222)
 * Joined equivalent variables [s(4218),s(4306)] into s(4218)
 * Joined equivalent variables [s(4221),s(4308)] into s(4221)
 * Joined equivalent variables [s(4226),s(4312)] into s(4226)
 * Joined equivalent variables [s(4232),s(4313)] into s(4232)
 * Joined equivalent variables [s(4225),s(4310)] into s(4225)
 * Joined equivalent variables [s(4301),s(4322)] into s(4301)
 * Joined equivalent variables [s(4303),s(4324)] into s(4303)
 * Joined equivalent variables [s(4302),s(4323)] into s(4302)
 * Renamed intermediate variables: 
[ (it(266),s(4213))>>s(4325), (it(266),s(4214))>>s(4326), (it(266),s(4215))>>s(4327), (it(266),s(4216))>>s(4328), (it(266),aux(436))>>s(4329), (it(266),aux(437))>>s(4330), (it(266),aux(438))>>s(4331), (it(266),aux(439))>>s(4332), (it(266),aux(440))>>s(4333), (it(266),aux(441))>>s(4334), (it(266),s(4218))>>s(4335), (it(266),s(4221))>>s(4336), (it(266),s(4225))>>s(4337), (it(266),s(4226))>>s(4338), (it(266),s(4227))>>s(4339), (it(266),s(4228))>>s(4340), (it(266),s(4229))>>s(4341), (it(266),s(4230))>>s(4342), (it(266),s(4231))>>s(4343), (it(266),s(4232))>>s(4344), (it(266),s(4233))>>s(4345), (it(266),s(4234))>>s(4346), (it(266),s(4235))>>s(4347), (it(266),s(4236))>>s(4348), (it(266),s(4237))>>s(4349), (it(266),s(4238))>>s(4350), (it(266),s(4239))>>s(4351), (it(266),s(4240))>>s(4352), (it(266),s(4241))>>s(4353), (it(266),s(4242))>>s(4354), (it(266),s(4243))>>s(4355), (it(266),s(4244))>>s(4356), (it(266),s(4245))>>s(4357), (it(266),s(4246))>>s(4358), (it(266),s(4247))>>s(4359), (it(266),s(4248))>>s(4360), (it(266),s(4249))>>s(4361), (it(266),s(4250))>>s(4362), (it(266),s(4251))>>s(4363), (it(266),s(4252))>>s(4364), (it(266),s(4253))>>s(4365), (it(266),s(4254))>>s(4366), (it(266),s(4255))>>s(4367), (it(266),s(4256))>>s(4368), (it(266),s(4257))>>s(4369), (it(266),s(4258))>>s(4370), (it(266),s(4259))>>s(4371), (it(266),s(4260))>>s(4372), (it(266),s(4261))>>s(4373), (it(266),s(4262))>>s(4374), (it(266),s(4263))>>s(4375), (it(266),s(4264))>>s(4376), (it(266),s(4265))>>s(4377), (it(266),s(4266))>>s(4378), (it(266),s(4267))>>s(4379), (it(266),s(4268))>>s(4380), (it(266),s(4269))>>s(4381), (it(266),s(4270))>>s(4382), (it(266),s(4271))>>s(4383), (it(266),s(4272))>>s(4384), (it(266),s(4273))>>s(4385), (it(266),s(4274))>>s(4386), (it(266),s(4275))>>s(4387), (it(266),s(4276))>>s(4388), (it(266),s(4277))>>s(4389), (it(266),s(4278))>>s(4390), (it(266),s(4279))>>s(4391), (it(266),s(4280))>>s(4392), (it(266),s(4281))>>s(4393), (it(266),s(4282))>>s(4394), (it(266),s(4283))>>s(4395), (it(266),s(4284))>>s(4396), (it(266),s(4285))>>s(4397), (it(266),s(4286))>>s(4398), (it(266),s(4287))>>s(4399), (it(266),s(4288))>>s(4400), (it(266),s(4289))>>s(4401), (it(266),s(4290))>>s(4402), (it(266),s(4291))>>s(4403), (it(266),s(4292))>>s(4404), (it(266),s(4293))>>s(4405), (it(266),s(4294))>>s(4406), (it(266),s(4295))>>s(4407), (it(266),s(4296))>>s(4408), (it(266),s(4297))>>s(4409), (it(266),s(4298))>>s(4410), (it(266),s(4299))>>s(4411), (it(266),s(4300))>>s(4412), (it(266),s(4301))>>s(4413), (it(266),s(4302))>>s(4414), (it(266),s(4303))>>s(4415), (it(266),s(4311))>>s(4416), (it(266),s(4314))>>s(4417), (it(266),s(4315))>>s(4418), (it(266),s(4316))>>s(4419), (it(266),s(4317))>>s(4420), (it(266),s(4318))>>s(4421), (it(266),s(4319))>>s(4422), (it(266),s(4320))>>s(4423), (it(266),s(4321))>>s(4424)]
 * Renamed intermediate variables: 
[ (eq(354,1),s(3743))>>s(4425), (eq(354,1),s(3744))>>s(4426), (eq(354,1),s(3746))>>s(4427), (eq(354,1),aux(401))>>s(4428), (eq(354,1),s(3747))>>s(4429), (eq(354,1),s(3748))>>s(4430), (eq(354,1),s(3749))>>s(4431), (eq(354,1),s(3750))>>s(4432)]

#### Simplifying cost structure of CE 354 
 * Renamed intermediate variables: 
[ (it(267),s(4428))>>s(4433), (it(267),s(4425))>>s(4434), (it(267),s(4426))>>s(4435), (it(267),s(4427))>>s(4436), (it(267),s(4429))>>s(4437), (it(267),s(4430))>>s(4438), (it(267),s(4431))>>s(4439), (it(267),s(4432))>>s(4440)]
 * Renamed intermediate variables: 
[ (eq(347,1),s(2925))>>s(4441), (eq(347,1),s(2926))>>s(4442), (eq(347,1),s(2916))>>s(4443), (eq(347,1),s(2929))>>s(4444), (eq(347,1),s(2918))>>s(4445), (eq(347,1),aux(294))>>s(4446), (eq(347,1),aux(295))>>s(4447), (eq(347,1),aux(296))>>s(4448), (eq(347,1),aux(297))>>s(4449), (eq(347,1),s(2921))>>s(4450), (eq(347,1),s(2931))>>s(4451), (eq(347,1),s(2932))>>s(4452), (eq(347,1),s(2933))>>s(4453), (eq(347,1),s(2934))>>s(4454), (eq(347,1),s(2935))>>s(4455), (eq(347,1),s(2936))>>s(4456), (eq(347,1),s(2937))>>s(4457), (eq(347,1),s(2938))>>s(4458), (eq(347,1),s(2939))>>s(4459), (eq(347,1),s(2940))>>s(4460), (eq(347,1),s(2941))>>s(4461), (eq(347,1),s(2942))>>s(4462), (eq(347,1),s(2943))>>s(4463), (eq(347,1),s(2944))>>s(4464), (eq(347,1),s(2945))>>s(4465), (eq(347,1),s(2946))>>s(4466), (eq(347,1),s(2947))>>s(4467), (eq(347,1),s(2948))>>s(4468), (eq(347,1),s(2919))>>s(4469), (eq(347,1),s(2920))>>s(4470), (eq(347,1),s(2922))>>s(4471)]

#### Simplifying cost structure of CE 347 
 * Joined equivalent variables [s(4447),s(4443)] into s(4447)
 * Joined equivalent variables [s(4449),s(4445)] into s(4449)
 * Renamed intermediate variables: 
[ (eq(352,1),s(3725))>>s(4472), (eq(352,1),s(3726))>>s(4473), (eq(352,1),s(3727))>>s(4474), (eq(352,1),aux(399))>>s(4475), (eq(352,1),s(3730))>>s(4476), (eq(352,1),s(3728))>>s(4477), (eq(352,1),s(3729))>>s(4478), (eq(352,1),s(3731))>>s(4479)]

#### Simplifying cost structure of CE 352 
 * Joined equivalent variables [aux(442),s(4446),s(4475)] into aux(442)
 * Joined equivalent variables [aux(443),s(4447),s(4472)] into aux(443)
 * Joined equivalent variables [aux(445),s(4449),s(4474)] into aux(445)
 * Joined equivalent variables [s(4448),s(4473)] into s(4448)
 * Joined equivalent variables [s(4450),s(4476)] into s(4450)
 * Joined equivalent variables [s(4469),s(4477)] into s(4469)
 * Joined equivalent variables [s(4470),s(4478)] into s(4470)
 * Joined equivalent variables [s(4471),s(4479)] into s(4471)
 * Renamed intermediate variables: 
[ (it(268),s(4441))>>s(4480), (it(268),s(4442))>>s(4481), (it(268),s(4444))>>s(4482), (it(268),aux(442))>>s(4483), (it(268),aux(443))>>s(4484), (it(268),aux(444))>>s(4485), (it(268),aux(445))>>s(4486), (it(268),aux(446))>>s(4487), (it(268),s(4448))>>s(4488), (it(268),s(4450))>>s(4489), (it(268),s(4451))>>s(4490), (it(268),s(4452))>>s(4491), (it(268),s(4453))>>s(4492), (it(268),s(4454))>>s(4493), (it(268),s(4455))>>s(4494), (it(268),s(4456))>>s(4495), (it(268),s(4457))>>s(4496), (it(268),s(4458))>>s(4497), (it(268),s(4459))>>s(4498), (it(268),s(4460))>>s(4499), (it(268),s(4461))>>s(4500), (it(268),s(4462))>>s(4501), (it(268),s(4463))>>s(4502), (it(268),s(4464))>>s(4503), (it(268),s(4465))>>s(4504), (it(268),s(4466))>>s(4505), (it(268),s(4467))>>s(4506), (it(268),s(4468))>>s(4507), (it(268),s(4469))>>s(4508), (it(268),s(4470))>>s(4509), (it(268),s(4471))>>s(4510)]

#### Cost of loops [263,264,265,266,267,268] 

 * loop 263:evaluate(A,B,C,D,E,F,G,H) -> [evaluate(A',B',C',D',E',F',G',H'),evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)] 
48*s(3921)+45*s(3922)+78*s(3929)+26*s(3930)+6*s(3931)+32*s(3932)+6*s(3933)+88
  Such that:s(3916) =< B'+D'/2
s(3917) =< C'
s(3918) =< C'+1
s(3919) =< B'2+D'2/2
s(3920) =< A'
s(3918) =< s(3920)
s(3917) =< s(3920)
s(3921) =< s(3917)
s(3922) =< s(3918)
s(3922) =< s(3917)
s(3923) =< s(3919)
s(3924) =< s(3916)
s(3925) =< s(3922)*s(3919)
s(3926) =< s(3922)*s(3916)
s(3927) =< s(3922)*s(3923)
s(3928) =< s(3922)*s(3924)
s(3929) =< s(3928)
s(3929) =< s(3927)
s(3930) =< s(3926)
s(3930) =< s(3925)
s(3931) =< s(3921)*s(3919)
s(3932) =< s(3918)
s(3933) =< s(3932)*s(3916)

 * loop 264:evaluate(A,B,C,D,E,F,G,H) -> [evaluate(A',B',C',D',E',F',G',H'),evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)] 
80*s(3960)+135*s(3961)+234*s(3968)+78*s(3969)+12*s(3971)+6*s(3972)+32*s(3973)+6*s(3974)+88
  Such that:s(3955) =< B'+D'/2
s(3956) =< C'
s(3957) =< C'+1
s(3958) =< B'2+D'2/2
s(3959) =< A'
s(3957) =< s(3959)
s(3956) =< s(3959)
s(3960) =< s(3956)
s(3961) =< s(3957)
s(3961) =< s(3956)
s(3962) =< s(3958)
s(3963) =< s(3955)
s(3964) =< s(3961)*s(3958)
s(3965) =< s(3961)*s(3955)
s(3966) =< s(3961)*s(3962)
s(3967) =< s(3961)*s(3963)
s(3968) =< s(3967)
s(3968) =< s(3966)
s(3969) =< s(3965)
s(3969) =< s(3964)
s(3970) =< s(3955)
s(3970) =< s(3958)
s(3971) =< s(3960)*s(3970)
s(3972) =< s(3960)*s(3958)
s(3973) =< s(3957)
s(3974) =< s(3973)*s(3955)

 * loop 265:evaluate(A,B,C,D,E,F,G,H) -> [evaluate(A',B',C',D',E',F',G',H'),evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)] 
108*s(4112)+44*s(4113)+22*s(4114)+22*s(4115)+20*s(4123)+18*s(4128)+18*s(4129)+20*s(4130)+44*s(4148)+22*s(4149)+22*s(4150)+20*s(4158)+18*s(4163)+18*s(4164)+20*s(4165)+44*s(4170)+22*s(4171)+22*s(4172)+20*s(4177)+18*s(4182)+18*s(4183)+20*s(4184)+44*s(4187)+22*s(4188)+22*s(4189)+20*s(4194)+18*s(4199)+18*s(4200)+20*s(4201)+6*s(4202)+157*s(4203)+12*s(4204)+6*s(4205)+78*s(4210)+26*s(4211)+6*s(4212)+85
  Such that:s(4101) =< A'
s(4102) =< B'+D'/2+B'2+D'2/2
s(4103) =< B'+D'/2+3*B'2+3/2*D'2
s(4101) =< C'+1
s(4104) =< A'2+B'2+D'2/2
s(4105) =< A'2+3*B'2+3/2*D'2
s(4104) =< B'2+C'2+D'2/2+1/2
s(4106) =< B'2+D'2/2+1/2
s(4105) =< 3*B'2+C'2+3/2*D'2
s(4107) =< B'+D'/2
s(4108) =< A'2
s(4109) =< B'2+D'2/2
s(4110) =< C'2+1
s(4111) =< s(4108)
s(4111) =< s(4110)
s(4112) =< s(4101)
s(4113) =< s(4107)
s(4114) =< s(4107)
s(4115) =< s(4107)
s(4113) =< s(4111)
s(4114) =< s(4111)
s(4115) =< s(4111)
s(4116) =< s(4109)
s(4117) =< s(4109)-1
s(4118) =< s(4103)+1
s(4119) =< s(4102)+1
s(4120) =< s(4109)-2
s(4121) =< s(4113)*s(4103)
s(4122) =< s(4113)*s(4102)
s(4123) =< s(4113)*s(4109)
s(4124) =< s(4113)*s(4117)
s(4125) =< s(4113)*s(4118)
s(4126) =< s(4113)*s(4119)
s(4127) =< s(4113)*s(4120)
s(4128) =< s(4125)+s(4121)+s(4103)
s(4129) =< s(4125)+s(4121)+s(4103)
s(4128) =< s(4126)+s(4122)+s(4102)
s(4129) =< s(4126)+s(4122)+s(4102)
s(4115) =< s(4126)+s(4122)+s(4102)
s(4115) =< s(4125)+s(4121)+s(4103)
s(4114) =< s(4124)+s(4127)+s(4109)
s(4115) =< s(4124)+s(4127)+s(4109)
s(4129) =< s(4115)*s(4116)
s(4130) =< s(4114)*s(4116)
s(4128) =< s(4114)*s(4106)
s(4131) =< s(4105)
s(4132) =< s(4104)
s(4133) =< s(4111)
s(4134) =< s(4103)
s(4135) =< s(4102)
s(4136) =< s(4107)
s(4137) =< s(4109)+1
s(4138) =< s(4112)*s(4111)
s(4139) =< s(4112)*s(4107)
s(4140) =< s(4112)*s(4116)
s(4141) =< s(4112)*s(4131)
s(4142) =< s(4112)*s(4132)
s(4143) =< s(4112)*s(4133)
s(4144) =< s(4112)*s(4134)
s(4145) =< s(4112)*s(4135)
s(4146) =< s(4112)*s(4136)
s(4147) =< s(4146)
s(4148) =< s(4146)
s(4149) =< s(4146)
s(4150) =< s(4146)
s(4148) =< s(4143)
s(4149) =< s(4143)
s(4150) =< s(4143)
s(4151) =< s(4116)
s(4152) =< s(4116)-1
s(4153) =< s(4134)+1
s(4154) =< s(4135)+1
s(4155) =< s(4116)-2
s(4156) =< s(4148)*s(4134)
s(4157) =< s(4148)*s(4135)
s(4158) =< s(4148)*s(4116)
s(4159) =< s(4148)*s(4152)
s(4160) =< s(4148)*s(4153)
s(4161) =< s(4148)*s(4154)
s(4162) =< s(4148)*s(4155)
s(4163) =< s(4160)+s(4156)+s(4144)
s(4164) =< s(4160)+s(4156)+s(4144)
s(4163) =< s(4161)+s(4157)+s(4145)
s(4164) =< s(4161)+s(4157)+s(4145)
s(4150) =< s(4161)+s(4157)+s(4145)
s(4150) =< s(4160)+s(4156)+s(4144)
s(4149) =< s(4159)+s(4162)+s(4140)
s(4150) =< s(4159)+s(4162)+s(4140)
s(4164) =< s(4150)*s(4151)
s(4165) =< s(4149)*s(4151)
s(4163) =< s(4149)*s(4137)
s(4166) =< s(4145)
s(4167) =< s(4135)
s(4168) =< s(4144)
s(4169) =< s(4134)
s(4147) =< s(4143)
s(4166) =< s(4142)
s(4167) =< s(4132)
s(4168) =< s(4141)
s(4169) =< s(4131)
s(4170) =< s(4147)
s(4171) =< s(4147)
s(4172) =< s(4147)
s(4170) =< s(4143)
s(4171) =< s(4143)
s(4172) =< s(4143)
s(4173) =< s(4169)+1
s(4174) =< s(4167)+1
s(4175) =< s(4170)*s(4169)
s(4176) =< s(4170)*s(4167)
s(4177) =< s(4170)*s(4116)
s(4178) =< s(4170)*s(4152)
s(4179) =< s(4170)*s(4173)
s(4180) =< s(4170)*s(4174)
s(4181) =< s(4170)*s(4155)
s(4182) =< s(4179)+s(4175)+s(4168)
s(4183) =< s(4179)+s(4175)+s(4168)
s(4182) =< s(4180)+s(4176)+s(4166)
s(4183) =< s(4180)+s(4176)+s(4166)
s(4172) =< s(4180)+s(4176)+s(4166)
s(4172) =< s(4179)+s(4175)+s(4168)
s(4171) =< s(4178)+s(4181)+s(4140)
s(4172) =< s(4178)+s(4181)+s(4140)
s(4183) =< s(4172)*s(4151)
s(4184) =< s(4171)*s(4151)
s(4182) =< s(4171)*s(4137)
s(4185) =< s(4102)
s(4186) =< s(4103)
s(4139) =< s(4138)
s(4185) =< s(4104)
s(4186) =< s(4105)
s(4187) =< s(4139)
s(4188) =< s(4139)
s(4189) =< s(4139)
s(4187) =< s(4138)
s(4188) =< s(4138)
s(4189) =< s(4138)
s(4190) =< s(4186)+1
s(4191) =< s(4185)+1
s(4192) =< s(4187)*s(4186)
s(4193) =< s(4187)*s(4185)
s(4194) =< s(4187)*s(4109)
s(4195) =< s(4187)*s(4117)
s(4196) =< s(4187)*s(4190)
s(4197) =< s(4187)*s(4191)
s(4198) =< s(4187)*s(4120)
s(4199) =< s(4196)+s(4192)+s(4168)
s(4200) =< s(4196)+s(4192)+s(4168)
s(4199) =< s(4197)+s(4193)+s(4166)
s(4200) =< s(4197)+s(4193)+s(4166)
s(4189) =< s(4197)+s(4193)+s(4166)
s(4189) =< s(4196)+s(4192)+s(4168)
s(4188) =< s(4195)+s(4198)+s(4140)
s(4189) =< s(4195)+s(4198)+s(4140)
s(4200) =< s(4189)*s(4116)
s(4201) =< s(4188)*s(4116)
s(4199) =< s(4188)*s(4137)
s(4202) =< s(4112)*s(4109)
s(4203) =< s(4111)
s(4204) =< s(4203)*s(4109)
s(4205) =< s(4112)*s(4107)
s(4206) =< s(4203)*s(4109)
s(4207) =< s(4203)*s(4107)
s(4208) =< s(4203)*s(4116)
s(4209) =< s(4203)*s(4136)
s(4210) =< s(4209)
s(4210) =< s(4208)
s(4211) =< s(4207)
s(4211) =< s(4206)
s(4212) =< s(4203)*s(4107)

 * loop 266:evaluate(A,B,C,D,E,F,G,H) -> [evaluate(A',B',C',D',E',F',G',H'),evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)] 
188*s(4337)+44*s(4356)+22*s(4357)+22*s(4358)+20*s(4366)+18*s(4371)+18*s(4372)+20*s(4373)+44*s(4378)+22*s(4379)+22*s(4380)+20*s(4385)+18*s(4390)+18*s(4391)+20*s(4392)+44*s(4395)+22*s(4396)+22*s(4397)+20*s(4404)+18*s(4409)+18*s(4410)+20*s(4411)+6*s(4412)+64*s(4413)+12*s(4414)+12*s(4415)+135*s(4416)+234*s(4421)+78*s(4422)+12*s(4424)+85
  Such that:s(4325) =< B'+D'/2+B'2+D'2/2
s(4326) =< B'+D'/2+3*B'2+3/2*D'2
s(4327) =< A'2+B'2+D'2/2
s(4328) =< A'2+3*B'2+3/2*D'2
s(4327) =< B'2+C'2+D'2/2+1/2
s(4328) =< 3*B'2+C'2+3/2*D'2
s(4329) =< A'
s(4330) =< B'+D'/2
s(4331) =< C'+1
s(4332) =< A'2
s(4333) =< B'2+D'2/2
s(4334) =< C'2+1
s(4335) =< s(4329)
s(4335) =< s(4331)
s(4336) =< s(4332)
s(4336) =< s(4334)
s(4337) =< s(4335)
s(4338) =< s(4333)
s(4339) =< s(4328)
s(4340) =< s(4327)
s(4341) =< s(4336)
s(4342) =< s(4326)
s(4343) =< s(4325)
s(4344) =< s(4330)
s(4345) =< s(4333)+1
s(4346) =< s(4337)*s(4336)
s(4347) =< s(4337)*s(4330)
s(4348) =< s(4337)*s(4338)
s(4349) =< s(4337)*s(4339)
s(4350) =< s(4337)*s(4340)
s(4351) =< s(4337)*s(4341)
s(4352) =< s(4337)*s(4342)
s(4353) =< s(4337)*s(4343)
s(4354) =< s(4337)*s(4344)
s(4355) =< s(4354)
s(4356) =< s(4354)
s(4357) =< s(4354)
s(4358) =< s(4354)
s(4356) =< s(4351)
s(4357) =< s(4351)
s(4358) =< s(4351)
s(4359) =< s(4338)
s(4360) =< s(4338)-1
s(4361) =< s(4342)+1
s(4362) =< s(4343)+1
s(4363) =< s(4338)-2
s(4364) =< s(4356)*s(4342)
s(4365) =< s(4356)*s(4343)
s(4366) =< s(4356)*s(4338)
s(4367) =< s(4356)*s(4360)
s(4368) =< s(4356)*s(4361)
s(4369) =< s(4356)*s(4362)
s(4370) =< s(4356)*s(4363)
s(4371) =< s(4368)+s(4364)+s(4352)
s(4372) =< s(4368)+s(4364)+s(4352)
s(4371) =< s(4369)+s(4365)+s(4353)
s(4372) =< s(4369)+s(4365)+s(4353)
s(4358) =< s(4369)+s(4365)+s(4353)
s(4358) =< s(4368)+s(4364)+s(4352)
s(4357) =< s(4367)+s(4370)+s(4348)
s(4358) =< s(4367)+s(4370)+s(4348)
s(4372) =< s(4358)*s(4359)
s(4373) =< s(4357)*s(4359)
s(4371) =< s(4357)*s(4345)
s(4374) =< s(4353)
s(4375) =< s(4343)
s(4376) =< s(4352)
s(4377) =< s(4342)
s(4355) =< s(4351)
s(4374) =< s(4350)
s(4375) =< s(4340)
s(4376) =< s(4349)
s(4377) =< s(4339)
s(4378) =< s(4355)
s(4379) =< s(4355)
s(4380) =< s(4355)
s(4378) =< s(4351)
s(4379) =< s(4351)
s(4380) =< s(4351)
s(4381) =< s(4377)+1
s(4382) =< s(4375)+1
s(4383) =< s(4378)*s(4377)
s(4384) =< s(4378)*s(4375)
s(4385) =< s(4378)*s(4338)
s(4386) =< s(4378)*s(4360)
s(4387) =< s(4378)*s(4381)
s(4388) =< s(4378)*s(4382)
s(4389) =< s(4378)*s(4363)
s(4390) =< s(4387)+s(4383)+s(4376)
s(4391) =< s(4387)+s(4383)+s(4376)
s(4390) =< s(4388)+s(4384)+s(4374)
s(4391) =< s(4388)+s(4384)+s(4374)
s(4380) =< s(4388)+s(4384)+s(4374)
s(4380) =< s(4387)+s(4383)+s(4376)
s(4379) =< s(4386)+s(4389)+s(4348)
s(4380) =< s(4386)+s(4389)+s(4348)
s(4391) =< s(4380)*s(4359)
s(4392) =< s(4379)*s(4359)
s(4390) =< s(4379)*s(4345)
s(4393) =< s(4325)
s(4394) =< s(4326)
s(4347) =< s(4346)
s(4393) =< s(4327)
s(4394) =< s(4328)
s(4395) =< s(4347)
s(4396) =< s(4347)
s(4397) =< s(4347)
s(4395) =< s(4346)
s(4396) =< s(4346)
s(4397) =< s(4346)
s(4398) =< s(4333)-1
s(4399) =< s(4394)+1
s(4400) =< s(4393)+1
s(4401) =< s(4333)-2
s(4402) =< s(4395)*s(4394)
s(4403) =< s(4395)*s(4393)
s(4404) =< s(4395)*s(4333)
s(4405) =< s(4395)*s(4398)
s(4406) =< s(4395)*s(4399)
s(4407) =< s(4395)*s(4400)
s(4408) =< s(4395)*s(4401)
s(4409) =< s(4406)+s(4402)+s(4376)
s(4410) =< s(4406)+s(4402)+s(4376)
s(4409) =< s(4407)+s(4403)+s(4374)
s(4410) =< s(4407)+s(4403)+s(4374)
s(4397) =< s(4407)+s(4403)+s(4374)
s(4397) =< s(4406)+s(4402)+s(4376)
s(4396) =< s(4405)+s(4408)+s(4348)
s(4397) =< s(4405)+s(4408)+s(4348)
s(4410) =< s(4397)*s(4338)
s(4411) =< s(4396)*s(4338)
s(4409) =< s(4396)*s(4345)
s(4412) =< s(4337)*s(4333)
s(4413) =< s(4336)
s(4414) =< s(4413)*s(4333)
s(4415) =< s(4337)*s(4330)
s(4416) =< s(4335)
s(4416) =< s(4336)
s(4417) =< s(4416)*s(4333)
s(4418) =< s(4416)*s(4330)
s(4419) =< s(4416)*s(4338)
s(4420) =< s(4416)*s(4344)
s(4421) =< s(4420)
s(4421) =< s(4419)
s(4422) =< s(4418)
s(4422) =< s(4417)
s(4423) =< s(4330)
s(4423) =< s(4333)
s(4424) =< s(4337)*s(4423)

 * loop 267:evaluate(A,B,C,D,E,F,G,H) -> [evaluate(A',B',C',D',E',F',G',H'),evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)] 
48*s(4437)+6*s(4438)+32*s(4439)+6*s(4440)+88
  Such that:s(4433) =< 2
s(4434) =< A'
s(4435) =< B'+D'/2
s(4434) =< C'+1
s(4436) =< B'2+D'2/2
s(4437) =< s(4433)
s(4438) =< s(4437)*s(4436)
s(4439) =< s(4434)
s(4440) =< s(4439)*s(4435)

 * loop 268:evaluate(A,B,C,D,E,F,G,H) -> [evaluate(A',B',C',D',E',F',G',H'),evaluate(A'2,B'2,C'2,D'2,E'2,F'2,G'2,H'2)] 
96*s(4489)+22*s(4490)+11*s(4491)+11*s(4492)+10*s(4500)+9*s(4505)+9*s(4506)+10*s(4507)+64*s(4508)+12*s(4509)+12*s(4510)+85
  Such that:s(4480) =< B'+D'/2+B'2+D'2/2
s(4481) =< B'+D'/2+3*B'2+3/2*D'2
s(4482) =< B'2+D'2/2+1/2
s(4483) =< 2
s(4484) =< B'+D'/2
s(4485) =< A'2
s(4486) =< B'2+D'2/2
s(4487) =< C'2+1
s(4488) =< s(4485)
s(4488) =< s(4487)
s(4489) =< s(4483)
s(4490) =< s(4484)
s(4491) =< s(4484)
s(4492) =< s(4484)
s(4490) =< s(4488)
s(4491) =< s(4488)
s(4492) =< s(4488)
s(4493) =< s(4486)
s(4494) =< s(4486)-1
s(4495) =< s(4481)+1
s(4496) =< s(4480)+1
s(4497) =< s(4486)-2
s(4498) =< s(4490)*s(4481)
s(4499) =< s(4490)*s(4480)
s(4500) =< s(4490)*s(4486)
s(4501) =< s(4490)*s(4494)
s(4502) =< s(4490)*s(4495)
s(4503) =< s(4490)*s(4496)
s(4504) =< s(4490)*s(4497)
s(4505) =< s(4502)+s(4498)+s(4481)
s(4506) =< s(4502)+s(4498)+s(4481)
s(4505) =< s(4503)+s(4499)+s(4480)
s(4506) =< s(4503)+s(4499)+s(4480)
s(4492) =< s(4503)+s(4499)+s(4480)
s(4492) =< s(4502)+s(4498)+s(4481)
s(4491) =< s(4501)+s(4504)+s(4486)
s(4492) =< s(4501)+s(4504)+s(4486)
s(4506) =< s(4492)*s(4493)
s(4507) =< s(4491)*s(4493)
s(4505) =< s(4491)*s(4482)
s(4508) =< s(4488)
s(4509) =< s(4508)*s(4486)
s(4510) =< s(4489)*s(4484)

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4108)=<A,s(4332)=<A,s(4104)=<A+B+D/2-1,s(4327)=<A+B+D/2-1,s(4105)=<A+3*B+3/2*D-3,s(4328)=<A+3*B+3/2*D-3,s(3893)=<B,s(4104)=<B+C+D/2-1/2,s(4327)=<B+C+D/2-1/2,s(3916)=<B+D/2-1,s(3919)=<B+D/2-1,s(3955)=<B+D/2-1,s(3958)=<B+D/2-1,s(4107)=<B+D/2-1,s(4109)=<B+D/2-1,s(4330)=<B+D/2-1,s(4333)=<B+D/2-1,s(4435)=<B+D/2-1,s(4436)=<B+D/2-1,s(4484)=<B+D/2-1,s(4486)=<B+D/2-1,s(4106)=<B+D/2-1/2,s(4482)=<B+D/2-1/2,s(4102)=<2*B+D/2-1/2,s(4325)=<2*B+D/2-1/2,s(4480)=<2*B+D/2-1/2,s(4105)=<3*B+C+3/2*D-3,s(4328)=<3*B+C+3/2*D-3,s(4103)=<4*B+3/2*D-5/2,s(4326)=<4*B+3/2*D-5/2,s(4481)=<4*B+3/2*D-5/2,s(3893)=<C,s(4110)=<C+1,s(4334)=<C+1]
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for s(4108)=<A  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(4108)=<A] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4332)=<A,s(4104)=<A+B+D/2-1,s(4327)=<A+B+D/2-1,s(4105)=<A+3*B+3/2*D-3,s(4328)=<A+3*B+3/2*D-3,s(3893)=<B,s(4104)=<B+C+D/2-1/2,s(4327)=<B+C+D/2-1/2,s(3916)=<B+D/2-1,s(3919)=<B+D/2-1,s(3955)=<B+D/2-1,s(3958)=<B+D/2-1,s(4107)=<B+D/2-1,s(4109)=<B+D/2-1,s(4330)=<B+D/2-1,s(4333)=<B+D/2-1,s(4435)=<B+D/2-1,s(4436)=<B+D/2-1,s(4484)=<B+D/2-1,s(4486)=<B+D/2-1,s(4106)=<B+D/2-1/2,s(4482)=<B+D/2-1/2,s(4102)=<2*B+D/2-1/2,s(4325)=<2*B+D/2-1/2,s(4480)=<2*B+D/2-1/2,s(4105)=<3*B+C+3/2*D-3,s(4328)=<3*B+C+3/2*D-3,s(4103)=<4*B+3/2*D-5/2,s(4326)=<4*B+3/2*D-5/2,s(4481)=<4*B+3/2*D-5/2,s(3893)=<C,s(4110)=<C+1,s(4334)=<C+1]
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for s(4332)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[s(4332)=<s(4108)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4104)=<A+B+D/2-1,s(4327)=<A+B+D/2-1,s(4105)=<A+3*B+3/2*D-3,s(4328)=<A+3*B+3/2*D-3,s(3893)=<B,s(4104)=<B+C+D/2-1/2,s(4327)=<B+C+D/2-1/2,s(3916)=<B+D/2-1,s(3919)=<B+D/2-1,s(3955)=<B+D/2-1,s(3958)=<B+D/2-1,s(4107)=<B+D/2-1,s(4109)=<B+D/2-1,s(4330)=<B+D/2-1,s(4333)=<B+D/2-1,s(4435)=<B+D/2-1,s(4436)=<B+D/2-1,s(4484)=<B+D/2-1,s(4486)=<B+D/2-1,s(4106)=<B+D/2-1/2,s(4482)=<B+D/2-1/2,s(4102)=<2*B+D/2-1/2,s(4325)=<2*B+D/2-1/2,s(4480)=<2*B+D/2-1/2,s(4105)=<3*B+C+3/2*D-3,s(4328)=<3*B+C+3/2*D-3,s(4103)=<4*B+3/2*D-5/2,s(4326)=<4*B+3/2*D-5/2,s(4481)=<4*B+3/2*D-5/2,s(3893)=<C,s(4110)=<C+1,s(4334)=<C+1]
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for s(4104)=<A+B+D/2-1  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(4104)=<A+B+D/2-1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4327)=<A+B+D/2-1,s(4105)=<A+3*B+3/2*D-3,s(4328)=<A+3*B+3/2*D-3,s(3893)=<B,s(4104)=<B+C+D/2-1/2,s(4327)=<B+C+D/2-1/2,s(3916)=<B+D/2-1,s(3919)=<B+D/2-1,s(3955)=<B+D/2-1,s(3958)=<B+D/2-1,s(4107)=<B+D/2-1,s(4109)=<B+D/2-1,s(4330)=<B+D/2-1,s(4333)=<B+D/2-1,s(4435)=<B+D/2-1,s(4436)=<B+D/2-1,s(4484)=<B+D/2-1,s(4486)=<B+D/2-1,s(4106)=<B+D/2-1/2,s(4482)=<B+D/2-1/2,s(4102)=<2*B+D/2-1/2,s(4325)=<2*B+D/2-1/2,s(4480)=<2*B+D/2-1/2,s(4105)=<3*B+C+3/2*D-3,s(4328)=<3*B+C+3/2*D-3,s(4103)=<4*B+3/2*D-5/2,s(4326)=<4*B+3/2*D-5/2,s(4481)=<4*B+3/2*D-5/2,s(3893)=<C,s(4110)=<C+1,s(4334)=<C+1]
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for s(4327)=<A+B+D/2-1  
   - Found a solution using cacheing 
 * Adding constraints:[s(4327)=<s(4104)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4105)=<A+3*B+3/2*D-3,s(4328)=<A+3*B+3/2*D-3,s(3893)=<B,s(4104)=<B+C+D/2-1/2,s(4327)=<B+C+D/2-1/2,s(3916)=<B+D/2-1,s(3919)=<B+D/2-1,s(3955)=<B+D/2-1,s(3958)=<B+D/2-1,s(4107)=<B+D/2-1,s(4109)=<B+D/2-1,s(4330)=<B+D/2-1,s(4333)=<B+D/2-1,s(4435)=<B+D/2-1,s(4436)=<B+D/2-1,s(4484)=<B+D/2-1,s(4486)=<B+D/2-1,s(4106)=<B+D/2-1/2,s(4482)=<B+D/2-1/2,s(4102)=<2*B+D/2-1/2,s(4325)=<2*B+D/2-1/2,s(4480)=<2*B+D/2-1/2,s(4105)=<3*B+C+3/2*D-3,s(4328)=<3*B+C+3/2*D-3,s(4103)=<4*B+3/2*D-5/2,s(4326)=<4*B+3/2*D-5/2,s(4481)=<4*B+3/2*D-5/2,s(3893)=<C,s(4110)=<C+1,s(4334)=<C+1]
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for s(4105)=<A+3*B+3/2*D-3  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(4105)=<A+3*B+3/2*D-3] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4328)=<A+3*B+3/2*D-3,s(3893)=<B,s(4104)=<B+C+D/2-1/2,s(4327)=<B+C+D/2-1/2,s(3916)=<B+D/2-1,s(3919)=<B+D/2-1,s(3955)=<B+D/2-1,s(3958)=<B+D/2-1,s(4107)=<B+D/2-1,s(4109)=<B+D/2-1,s(4330)=<B+D/2-1,s(4333)=<B+D/2-1,s(4435)=<B+D/2-1,s(4436)=<B+D/2-1,s(4484)=<B+D/2-1,s(4486)=<B+D/2-1,s(4106)=<B+D/2-1/2,s(4482)=<B+D/2-1/2,s(4102)=<2*B+D/2-1/2,s(4325)=<2*B+D/2-1/2,s(4480)=<2*B+D/2-1/2,s(4105)=<3*B+C+3/2*D-3,s(4328)=<3*B+C+3/2*D-3,s(4103)=<4*B+3/2*D-5/2,s(4326)=<4*B+3/2*D-5/2,s(4481)=<4*B+3/2*D-5/2,s(3893)=<C,s(4110)=<C+1,s(4334)=<C+1]
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for s(4328)=<A+3*B+3/2*D-3  
   - Found a solution using cacheing 
 * Adding constraints:[s(4328)=<s(4105)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(3893)=<B,s(4104)=<B+C+D/2-1/2,s(4327)=<B+C+D/2-1/2,s(3916)=<B+D/2-1,s(3919)=<B+D/2-1,s(3955)=<B+D/2-1,s(3958)=<B+D/2-1,s(4107)=<B+D/2-1,s(4109)=<B+D/2-1,s(4330)=<B+D/2-1,s(4333)=<B+D/2-1,s(4435)=<B+D/2-1,s(4436)=<B+D/2-1,s(4484)=<B+D/2-1,s(4486)=<B+D/2-1,s(4106)=<B+D/2-1/2,s(4482)=<B+D/2-1/2,s(4102)=<2*B+D/2-1/2,s(4325)=<2*B+D/2-1/2,s(4480)=<2*B+D/2-1/2,s(4105)=<3*B+C+3/2*D-3,s(4328)=<3*B+C+3/2*D-3,s(4103)=<4*B+3/2*D-5/2,s(4326)=<4*B+3/2*D-5/2,s(4481)=<4*B+3/2*D-5/2,s(3893)=<C,s(4110)=<C+1,s(4334)=<C+1]
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for s(3893)=<B  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(3893)=<B] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4104)=<B+C+D/2-1/2,s(4327)=<B+C+D/2-1/2,s(3916)=<B+D/2-1,s(3919)=<B+D/2-1,s(3955)=<B+D/2-1,s(3958)=<B+D/2-1,s(4107)=<B+D/2-1,s(4109)=<B+D/2-1,s(4330)=<B+D/2-1,s(4333)=<B+D/2-1,s(4435)=<B+D/2-1,s(4436)=<B+D/2-1,s(4484)=<B+D/2-1,s(4486)=<B+D/2-1,s(4106)=<B+D/2-1/2,s(4482)=<B+D/2-1/2,s(4102)=<2*B+D/2-1/2,s(4325)=<2*B+D/2-1/2,s(4480)=<2*B+D/2-1/2,s(4105)=<3*B+C+3/2*D-3,s(4328)=<3*B+C+3/2*D-3,s(4103)=<4*B+3/2*D-5/2,s(4326)=<4*B+3/2*D-5/2,s(4481)=<4*B+3/2*D-5/2,s(3893)=<C,s(4110)=<C+1,s(4334)=<C+1]
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for s(4104)=<B+C+D/2-1/2  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(4104)=<B+C+D/2-1/2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4327)=<B+C+D/2-1/2,s(3916)=<B+D/2-1,s(3919)=<B+D/2-1,s(3955)=<B+D/2-1,s(3958)=<B+D/2-1,s(4107)=<B+D/2-1,s(4109)=<B+D/2-1,s(4330)=<B+D/2-1,s(4333)=<B+D/2-1,s(4435)=<B+D/2-1,s(4436)=<B+D/2-1,s(4484)=<B+D/2-1,s(4486)=<B+D/2-1,s(4106)=<B+D/2-1/2,s(4482)=<B+D/2-1/2,s(4102)=<2*B+D/2-1/2,s(4325)=<2*B+D/2-1/2,s(4480)=<2*B+D/2-1/2,s(4105)=<3*B+C+3/2*D-3,s(4328)=<3*B+C+3/2*D-3,s(4103)=<4*B+3/2*D-5/2,s(4326)=<4*B+3/2*D-5/2,s(4481)=<4*B+3/2*D-5/2,s(3893)=<C,s(4110)=<C+1,s(4334)=<C+1]
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for s(4327)=<B+C+D/2-1/2  
   - Found a solution using cacheing 
 * Adding constraints:[s(4327)=<s(4104)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(3916)=<B+D/2-1,s(3919)=<B+D/2-1,s(3955)=<B+D/2-1,s(3958)=<B+D/2-1,s(4107)=<B+D/2-1,s(4109)=<B+D/2-1,s(4330)=<B+D/2-1,s(4333)=<B+D/2-1,s(4435)=<B+D/2-1,s(4436)=<B+D/2-1,s(4484)=<B+D/2-1,s(4486)=<B+D/2-1,s(4106)=<B+D/2-1/2,s(4482)=<B+D/2-1/2,s(4102)=<2*B+D/2-1/2,s(4325)=<2*B+D/2-1/2,s(4480)=<2*B+D/2-1/2,s(4105)=<3*B+C+3/2*D-3,s(4328)=<3*B+C+3/2*D-3,s(4103)=<4*B+3/2*D-5/2,s(4326)=<4*B+3/2*D-5/2,s(4481)=<4*B+3/2*D-5/2,s(3893)=<C,s(4110)=<C+1,s(4334)=<C+1]
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for s(3916)=<B+D/2-1  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(3916)=<B+D/2-1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(3919)=<B+D/2-1,s(3955)=<B+D/2-1,s(3958)=<B+D/2-1,s(4107)=<B+D/2-1,s(4109)=<B+D/2-1,s(4330)=<B+D/2-1,s(4333)=<B+D/2-1,s(4435)=<B+D/2-1,s(4436)=<B+D/2-1,s(4484)=<B+D/2-1,s(4486)=<B+D/2-1,s(4106)=<B+D/2-1/2,s(4482)=<B+D/2-1/2,s(4102)=<2*B+D/2-1/2,s(4325)=<2*B+D/2-1/2,s(4480)=<2*B+D/2-1/2,s(4105)=<3*B+C+3/2*D-3,s(4328)=<3*B+C+3/2*D-3,s(4103)=<4*B+3/2*D-5/2,s(4326)=<4*B+3/2*D-5/2,s(4481)=<4*B+3/2*D-5/2,s(3893)=<C,s(4110)=<C+1,s(4334)=<C+1]
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for s(3919)=<B+D/2-1  
   - Found a solution using cacheing 
 * Adding constraints:[s(3919)=<s(3916)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(3955)=<B+D/2-1,s(3958)=<B+D/2-1,s(4107)=<B+D/2-1,s(4109)=<B+D/2-1,s(4330)=<B+D/2-1,s(4333)=<B+D/2-1,s(4435)=<B+D/2-1,s(4436)=<B+D/2-1,s(4484)=<B+D/2-1,s(4486)=<B+D/2-1,s(4106)=<B+D/2-1/2,s(4482)=<B+D/2-1/2,s(4102)=<2*B+D/2-1/2,s(4325)=<2*B+D/2-1/2,s(4480)=<2*B+D/2-1/2,s(4105)=<3*B+C+3/2*D-3,s(4328)=<3*B+C+3/2*D-3,s(4103)=<4*B+3/2*D-5/2,s(4326)=<4*B+3/2*D-5/2,s(4481)=<4*B+3/2*D-5/2,s(3893)=<C,s(4110)=<C+1,s(4334)=<C+1]
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for s(3955)=<B+D/2-1  
   - Found a solution using cacheing 
 * Adding constraints:[s(3955)=<s(3916)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(3958)=<B+D/2-1,s(4107)=<B+D/2-1,s(4109)=<B+D/2-1,s(4330)=<B+D/2-1,s(4333)=<B+D/2-1,s(4435)=<B+D/2-1,s(4436)=<B+D/2-1,s(4484)=<B+D/2-1,s(4486)=<B+D/2-1,s(4106)=<B+D/2-1/2,s(4482)=<B+D/2-1/2,s(4102)=<2*B+D/2-1/2,s(4325)=<2*B+D/2-1/2,s(4480)=<2*B+D/2-1/2,s(4105)=<3*B+C+3/2*D-3,s(4328)=<3*B+C+3/2*D-3,s(4103)=<4*B+3/2*D-5/2,s(4326)=<4*B+3/2*D-5/2,s(4481)=<4*B+3/2*D-5/2,s(3893)=<C,s(4110)=<C+1,s(4334)=<C+1]
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for s(3958)=<B+D/2-1  
   - Found a solution using cacheing 
 * Adding constraints:[s(3958)=<s(3916)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4107)=<B+D/2-1,s(4109)=<B+D/2-1,s(4330)=<B+D/2-1,s(4333)=<B+D/2-1,s(4435)=<B+D/2-1,s(4436)=<B+D/2-1,s(4484)=<B+D/2-1,s(4486)=<B+D/2-1,s(4106)=<B+D/2-1/2,s(4482)=<B+D/2-1/2,s(4102)=<2*B+D/2-1/2,s(4325)=<2*B+D/2-1/2,s(4480)=<2*B+D/2-1/2,s(4105)=<3*B+C+3/2*D-3,s(4328)=<3*B+C+3/2*D-3,s(4103)=<4*B+3/2*D-5/2,s(4326)=<4*B+3/2*D-5/2,s(4481)=<4*B+3/2*D-5/2,s(3893)=<C,s(4110)=<C+1,s(4334)=<C+1]
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for s(4107)=<B+D/2-1  
   - Found a solution using cacheing 
 * Adding constraints:[s(4107)=<s(3916)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4109)=<B+D/2-1,s(4330)=<B+D/2-1,s(4333)=<B+D/2-1,s(4435)=<B+D/2-1,s(4436)=<B+D/2-1,s(4484)=<B+D/2-1,s(4486)=<B+D/2-1,s(4106)=<B+D/2-1/2,s(4482)=<B+D/2-1/2,s(4102)=<2*B+D/2-1/2,s(4325)=<2*B+D/2-1/2,s(4480)=<2*B+D/2-1/2,s(4105)=<3*B+C+3/2*D-3,s(4328)=<3*B+C+3/2*D-3,s(4103)=<4*B+3/2*D-5/2,s(4326)=<4*B+3/2*D-5/2,s(4481)=<4*B+3/2*D-5/2,s(3893)=<C,s(4110)=<C+1,s(4334)=<C+1]
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for s(4109)=<B+D/2-1  
   - Found a solution using cacheing 
 * Adding constraints:[s(4109)=<s(3916)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4330)=<B+D/2-1,s(4333)=<B+D/2-1,s(4435)=<B+D/2-1,s(4436)=<B+D/2-1,s(4484)=<B+D/2-1,s(4486)=<B+D/2-1,s(4106)=<B+D/2-1/2,s(4482)=<B+D/2-1/2,s(4102)=<2*B+D/2-1/2,s(4325)=<2*B+D/2-1/2,s(4480)=<2*B+D/2-1/2,s(4105)=<3*B+C+3/2*D-3,s(4328)=<3*B+C+3/2*D-3,s(4103)=<4*B+3/2*D-5/2,s(4326)=<4*B+3/2*D-5/2,s(4481)=<4*B+3/2*D-5/2,s(3893)=<C,s(4110)=<C+1,s(4334)=<C+1]
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for s(4330)=<B+D/2-1  
   - Found a solution using cacheing 
 * Adding constraints:[s(4330)=<s(3916)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4333)=<B+D/2-1,s(4435)=<B+D/2-1,s(4436)=<B+D/2-1,s(4484)=<B+D/2-1,s(4486)=<B+D/2-1,s(4106)=<B+D/2-1/2,s(4482)=<B+D/2-1/2,s(4102)=<2*B+D/2-1/2,s(4325)=<2*B+D/2-1/2,s(4480)=<2*B+D/2-1/2,s(4105)=<3*B+C+3/2*D-3,s(4328)=<3*B+C+3/2*D-3,s(4103)=<4*B+3/2*D-5/2,s(4326)=<4*B+3/2*D-5/2,s(4481)=<4*B+3/2*D-5/2,s(3893)=<C,s(4110)=<C+1,s(4334)=<C+1]
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for s(4333)=<B+D/2-1  
   - Found a solution using cacheing 
 * Adding constraints:[s(4333)=<s(3916)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4435)=<B+D/2-1,s(4436)=<B+D/2-1,s(4484)=<B+D/2-1,s(4486)=<B+D/2-1,s(4106)=<B+D/2-1/2,s(4482)=<B+D/2-1/2,s(4102)=<2*B+D/2-1/2,s(4325)=<2*B+D/2-1/2,s(4480)=<2*B+D/2-1/2,s(4105)=<3*B+C+3/2*D-3,s(4328)=<3*B+C+3/2*D-3,s(4103)=<4*B+3/2*D-5/2,s(4326)=<4*B+3/2*D-5/2,s(4481)=<4*B+3/2*D-5/2,s(3893)=<C,s(4110)=<C+1,s(4334)=<C+1]
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for s(4435)=<B+D/2-1  
   - Found a solution using cacheing 
 * Adding constraints:[s(4435)=<s(3916)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4436)=<B+D/2-1,s(4484)=<B+D/2-1,s(4486)=<B+D/2-1,s(4106)=<B+D/2-1/2,s(4482)=<B+D/2-1/2,s(4102)=<2*B+D/2-1/2,s(4325)=<2*B+D/2-1/2,s(4480)=<2*B+D/2-1/2,s(4105)=<3*B+C+3/2*D-3,s(4328)=<3*B+C+3/2*D-3,s(4103)=<4*B+3/2*D-5/2,s(4326)=<4*B+3/2*D-5/2,s(4481)=<4*B+3/2*D-5/2,s(3893)=<C,s(4110)=<C+1,s(4334)=<C+1]
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for s(4436)=<B+D/2-1  
   - Found a solution using cacheing 
 * Adding constraints:[s(4436)=<s(3916)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4484)=<B+D/2-1,s(4486)=<B+D/2-1,s(4106)=<B+D/2-1/2,s(4482)=<B+D/2-1/2,s(4102)=<2*B+D/2-1/2,s(4325)=<2*B+D/2-1/2,s(4480)=<2*B+D/2-1/2,s(4105)=<3*B+C+3/2*D-3,s(4328)=<3*B+C+3/2*D-3,s(4103)=<4*B+3/2*D-5/2,s(4326)=<4*B+3/2*D-5/2,s(4481)=<4*B+3/2*D-5/2,s(3893)=<C,s(4110)=<C+1,s(4334)=<C+1]
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for s(4484)=<B+D/2-1  
   - Found a solution using cacheing 
 * Adding constraints:[s(4484)=<s(3916)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4486)=<B+D/2-1,s(4106)=<B+D/2-1/2,s(4482)=<B+D/2-1/2,s(4102)=<2*B+D/2-1/2,s(4325)=<2*B+D/2-1/2,s(4480)=<2*B+D/2-1/2,s(4105)=<3*B+C+3/2*D-3,s(4328)=<3*B+C+3/2*D-3,s(4103)=<4*B+3/2*D-5/2,s(4326)=<4*B+3/2*D-5/2,s(4481)=<4*B+3/2*D-5/2,s(3893)=<C,s(4110)=<C+1,s(4334)=<C+1]
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for s(4486)=<B+D/2-1  
   - Found a solution using cacheing 
 * Adding constraints:[s(4486)=<s(3916)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4106)=<B+D/2-1/2,s(4482)=<B+D/2-1/2,s(4102)=<2*B+D/2-1/2,s(4325)=<2*B+D/2-1/2,s(4480)=<2*B+D/2-1/2,s(4105)=<3*B+C+3/2*D-3,s(4328)=<3*B+C+3/2*D-3,s(4103)=<4*B+3/2*D-5/2,s(4326)=<4*B+3/2*D-5/2,s(4481)=<4*B+3/2*D-5/2,s(3893)=<C,s(4110)=<C+1,s(4334)=<C+1]
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for s(4106)=<B+D/2-1/2  
   - Found a solution using cacheing 
 * Adding constraints:[s(4106)=<s(3916)+1/2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4482)=<B+D/2-1/2,s(4102)=<2*B+D/2-1/2,s(4325)=<2*B+D/2-1/2,s(4480)=<2*B+D/2-1/2,s(4105)=<3*B+C+3/2*D-3,s(4328)=<3*B+C+3/2*D-3,s(4103)=<4*B+3/2*D-5/2,s(4326)=<4*B+3/2*D-5/2,s(4481)=<4*B+3/2*D-5/2,s(3893)=<C,s(4110)=<C+1,s(4334)=<C+1]
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for s(4482)=<B+D/2-1/2  
   - Found a solution using cacheing 
 * Adding constraints:[s(4482)=<s(3916)+1/2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4102)=<2*B+D/2-1/2,s(4325)=<2*B+D/2-1/2,s(4480)=<2*B+D/2-1/2,s(4105)=<3*B+C+3/2*D-3,s(4328)=<3*B+C+3/2*D-3,s(4103)=<4*B+3/2*D-5/2,s(4326)=<4*B+3/2*D-5/2,s(4481)=<4*B+3/2*D-5/2,s(3893)=<C,s(4110)=<C+1,s(4334)=<C+1]
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for s(4102)=<2*B+D/2-1/2  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(4102)=<2*B+D/2-1/2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4325)=<2*B+D/2-1/2,s(4480)=<2*B+D/2-1/2,s(4105)=<3*B+C+3/2*D-3,s(4328)=<3*B+C+3/2*D-3,s(4103)=<4*B+3/2*D-5/2,s(4326)=<4*B+3/2*D-5/2,s(4481)=<4*B+3/2*D-5/2,s(3893)=<C,s(4110)=<C+1,s(4334)=<C+1]
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for s(4325)=<2*B+D/2-1/2  
   - Found a solution using cacheing 
 * Adding constraints:[s(4325)=<s(4102)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4480)=<2*B+D/2-1/2,s(4105)=<3*B+C+3/2*D-3,s(4328)=<3*B+C+3/2*D-3,s(4103)=<4*B+3/2*D-5/2,s(4326)=<4*B+3/2*D-5/2,s(4481)=<4*B+3/2*D-5/2,s(3893)=<C,s(4110)=<C+1,s(4334)=<C+1]
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for s(4480)=<2*B+D/2-1/2  
   - Found a solution using cacheing 
 * Adding constraints:[s(4480)=<s(4102)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4105)=<3*B+C+3/2*D-3,s(4328)=<3*B+C+3/2*D-3,s(4103)=<4*B+3/2*D-5/2,s(4326)=<4*B+3/2*D-5/2,s(4481)=<4*B+3/2*D-5/2,s(3893)=<C,s(4110)=<C+1,s(4334)=<C+1]
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for s(4105)=<3*B+C+3/2*D-3  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(4105)=<3*B+C+3/2*D-3] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4328)=<3*B+C+3/2*D-3,s(4103)=<4*B+3/2*D-5/2,s(4326)=<4*B+3/2*D-5/2,s(4481)=<4*B+3/2*D-5/2,s(3893)=<C,s(4110)=<C+1,s(4334)=<C+1]
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for s(4328)=<3*B+C+3/2*D-3  
   - Found a solution using cacheing 
 * Adding constraints:[s(4328)=<s(4105)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4103)=<4*B+3/2*D-5/2,s(4326)=<4*B+3/2*D-5/2,s(4481)=<4*B+3/2*D-5/2,s(3893)=<C,s(4110)=<C+1,s(4334)=<C+1]
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for s(4103)=<4*B+3/2*D-5/2  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(4103)=<4*B+3/2*D-5/2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4326)=<4*B+3/2*D-5/2,s(4481)=<4*B+3/2*D-5/2,s(3893)=<C,s(4110)=<C+1,s(4334)=<C+1]
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for s(4326)=<4*B+3/2*D-5/2  
   - Found a solution using cacheing 
 * Adding constraints:[s(4326)=<s(4103)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4481)=<4*B+3/2*D-5/2,s(3893)=<C,s(4110)=<C+1,s(4334)=<C+1]
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for s(4481)=<4*B+3/2*D-5/2  
   - Found a solution using cacheing 
 * Adding constraints:[s(4481)=<s(4103)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(3893)=<C,s(4110)=<C+1,s(4334)=<C+1]
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for s(3893)=<C  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(3893)=<C] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4110)=<C+1,s(4334)=<C+1]
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for s(4110)=<C+1  
   - Found a solution using cacheing 
 * Adding constraints:[s(4110)=<s(3893)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [s(4334)=<C+1]
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for s(4334)=<C+1  
   - Found a solution using cacheing 
 * Adding constraints:[s(4334)=<s(3893)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 263: [it(263)=<1,s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for it(263)=<1  in Loop 263 
   - Applying inductive sum strategy 
     - head Candidate: D/2-1/2 
       - Loop 264 is collaborative and bounds [it(264)] 
       - Loop 265 is collaborative and bounds [it(265)] 
       - Loop 266 is collaborative and bounds [it(266)] 
       - Loop 267 is collaborative and bounds [it(267)] 
       - Loop 268 is collaborative and bounds [it(268)] 
       - Chain-Tail [270] is collaborative
     - tail Candidate: D/2-1/2 
       - Loop 264 is collaborative and bounds [it(264)] 
       - Loop 265 is collaborative and bounds [it(265)] 
       - Loop 266 is collaborative and bounds [it(266)] 
       - Loop 267 is collaborative and bounds [it(267)] 
       - Loop 268 is collaborative and bounds [it(268)] 
       - Chain-Tail [270] is collaborative
 * Adding constraints: [it(263)+it(264)+it(265)+it(266)+it(267)+it(268)=<D/2-1/2,it(263)+it(264)+it(265)+it(266)+it(267)+it(268)=<D/2-1/2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 263: [s(4524)=<A',s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for s(4524)=<A'  in Loop 263 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(447)=<A] 
 * Adding constraints: [s(4524)=<it(263)*aux(447)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(447)=<A]
* Psum in Loop 263: [s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for aux(447)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(447)=<s(4108)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 263: [s(4523)=<C',s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for s(4523)=<C'  in Loop 263 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(448)=<C] 
 * Adding constraints: [s(4523)=<it(263)*aux(448)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(448)=<C]
* Psum in Loop 263: [s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for aux(448)=<C  
   - Found a solution using cacheing 
 * Adding constraints:[aux(448)=<s(3893)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 263: [s(4518)=<C'+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for s(4518)=<C'+1  in Loop 263 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(449)=<C+1] 
 * Adding constraints: [s(4518)=<it(263)*aux(449)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(449)=<C+1]
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for aux(449)=<C+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(449)=<s(3893)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 264: [it(264)=<1,s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for it(264)=<1  in Loop 264 
   - Applying inductive sum strategy 
     - head Candidate: D/2-1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D/2-1/2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(263)+it(264)+it(265)+it(266)+it(267)+it(268)=<D/2-1/2,it(263)+it(264)+it(265)+it(266)+it(267)+it(268)=<D/2-1/2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 264: [s(4539)=<A',s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for s(4539)=<A'  in Loop 264 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(450)=<A] 
 * Adding constraints: [s(4539)=<it(264)*aux(450)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(450)=<A]
* Psum in Loop 264: [s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for aux(450)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(450)=<s(4108)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 264: [s(4538)=<C',s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for s(4538)=<C'  in Loop 264 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(451)=<C] 
 * Adding constraints: [s(4538)=<it(264)*aux(451)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(451)=<C]
* Psum in Loop 264: [s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for aux(451)=<C  
   - Found a solution using cacheing 
 * Adding constraints:[aux(451)=<s(3893)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 264: [s(4533)=<C'+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for s(4533)=<C'+1  in Loop 264 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(452)=<C+1] 
 * Adding constraints: [s(4533)=<it(264)*aux(452)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(452)=<C+1]
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for aux(452)=<C+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(452)=<s(3893)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 265: [it(265)=<1,s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for it(265)=<1  in Loop 265 
   - Applying inductive sum strategy 
     - head Candidate: D/2-1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D/2-1/2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(263)+it(264)+it(265)+it(266)+it(267)+it(268)=<D/2-1/2,it(263)+it(264)+it(265)+it(266)+it(267)+it(268)=<D/2-1/2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 265: [s(4621)=<A',s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for s(4621)=<A'  in Loop 265 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(453)=<A] 
 * Adding constraints: [s(4621)=<it(265)*aux(453)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(453)=<A]
* Psum in Loop 265: [s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for aux(453)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(453)=<s(4108)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 265: [s(4620)=<B'+D'/2,s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for s(4620)=<B'+D'/2  in Loop 265 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(454)=<B+D/2-1] 
 * Adding constraints: [s(4620)=<it(265)*aux(454)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(454)=<B+D/2-1]
* Psum in Loop 265: [s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for aux(454)=<B+D/2-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(454)=<s(3916)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 265: [s(4617)=<B'+D'/2+B'2+D'2/2,s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for s(4617)=<B'+D'/2+B'2+D'2/2  in Loop 265 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(455)=<2*B+D/2-1/2] 
 * Adding constraints: [s(4617)=<it(265)*aux(455)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(455)=<2*B+D/2-1/2]
* Psum in Loop 265: [s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for aux(455)=<2*B+D/2-1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(455)=<s(4102)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 265: [s(4614)=<B'+D'/2+3*B'2+3/2*D'2,s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for s(4614)=<B'+D'/2+3*B'2+3/2*D'2  in Loop 265 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(456)=<4*B+3/2*D-5/2] 
 * Adding constraints: [s(4614)=<it(265)*aux(456)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(456)=<4*B+3/2*D-5/2]
* Psum in Loop 265: [s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for aux(456)=<4*B+3/2*D-5/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(456)=<s(4103)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 265: [s(4621)=<C'+1,s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for s(4621)=<C'+1  in Loop 265 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(457)=<C+1] 
 * Adding constraints: [s(4621)=<it(265)*aux(457)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(457)=<C+1]
* Psum in Loop 265: [s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for aux(457)=<C+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(457)=<s(3893)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 265: [s(4623)=<A'2,s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for s(4623)=<A'2  in Loop 265 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(458)=<A] 
 * Adding constraints: [s(4623)=<it(265)*aux(458)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(458)=<A]
* Psum in Loop 265: [s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for aux(458)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(458)=<s(4108)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 265: [s(4611)=<B'2+D'2/2,s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for s(4611)=<B'2+D'2/2  in Loop 265 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(459)=<B+D/2-1] 
 * Adding constraints: [s(4611)=<it(265)*aux(459)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(459)=<B+D/2-1]
* Psum in Loop 265: [s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for aux(459)=<B+D/2-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(459)=<s(3916)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 265: [s(4622)=<C'2+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for s(4622)=<C'2+1  in Loop 265 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(460)=<C+1] 
 * Adding constraints: [s(4622)=<it(265)*aux(460)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(460)=<C+1]
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for aux(460)=<C+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(460)=<s(3893)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 266: [it(266)=<1,s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for it(266)=<1  in Loop 266 
   - Applying inductive sum strategy 
     - head Candidate: D/2-1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D/2-1/2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(263)+it(264)+it(265)+it(266)+it(267)+it(268)=<D/2-1/2,it(263)+it(264)+it(265)+it(266)+it(267)+it(268)=<D/2-1/2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 266: [s(4693)=<A',s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for s(4693)=<A'  in Loop 266 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(461)=<A] 
 * Adding constraints: [s(4693)=<it(266)*aux(461)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(461)=<A]
* Psum in Loop 266: [s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for aux(461)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(461)=<s(4108)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 266: [s(4692)=<C'+1,s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for s(4692)=<C'+1  in Loop 266 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(462)=<C+1] 
 * Adding constraints: [s(4692)=<it(266)*aux(462)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(462)=<C+1]
* Psum in Loop 266: [s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for aux(462)=<C+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(462)=<s(3893)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 266: [s(4691)=<A'2,s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for s(4691)=<A'2  in Loop 266 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(463)=<A] 
 * Adding constraints: [s(4691)=<it(266)*aux(463)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(463)=<A]
* Psum in Loop 266: [s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for aux(463)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(463)=<s(4108)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 266: [s(4690)=<C'2+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for s(4690)=<C'2+1  in Loop 266 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(464)=<C+1] 
 * Adding constraints: [s(4690)=<it(266)*aux(464)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(464)=<C+1]
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for aux(464)=<C+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(464)=<s(3893)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 267: [it(267)=<1,s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for it(267)=<1  in Loop 267 
   - Applying inductive sum strategy 
     - head Candidate: D/2-1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D/2-1/2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(263)+it(264)+it(265)+it(266)+it(267)+it(268)=<D/2-1/2,it(263)+it(264)+it(265)+it(266)+it(267)+it(268)=<D/2-1/2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 267: [s(4699)=<2,s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for s(4699)=<2  in Loop 267 
   - Found a solution using cacheing 
 * Adding constraints: [s(4699)=<aux(465)*2,aux(465)+it(263)+it(264)+it(265)+it(266)+it(268)=<D/2-1/2,aux(465)+it(263)+it(264)+it(265)+it(266)+it(268)=<D/2-1/2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 267: [s(4698)=<A',s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for s(4698)=<A'  in Loop 267 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(466)=<A] 
 * Adding constraints: [s(4698)=<it(267)*aux(466)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(466)=<A]
* Psum in Loop 267: [s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for aux(466)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(466)=<s(4108)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 267: [s(4698)=<C'+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for s(4698)=<C'+1  in Loop 267 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(467)=<C+1] 
 * Adding constraints: [s(4698)=<it(267)*aux(467)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(467)=<C+1]
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for aux(467)=<C+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(467)=<s(3893)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 268: [it(268)=<1,s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for it(268)=<1  in Loop 268 
   - Applying inductive sum strategy 
     - head Candidate: D/2-1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D/2-1/2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(263)+it(264)+it(265)+it(266)+it(267)+it(268)=<D/2-1/2,it(263)+it(264)+it(265)+it(266)+it(267)+it(268)=<D/2-1/2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 268: [s(4722)=<2,s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for s(4722)=<2  in Loop 268 
   - Found a solution using cacheing 
 * Adding constraints: [s(4722)=<aux(468)*2,aux(468)+it(263)+it(264)+it(265)+it(266)+it(267)=<D/2-1/2,aux(468)+it(263)+it(264)+it(265)+it(266)+it(267)=<D/2-1/2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 268: [s(4721)=<B'+D'/2,s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for s(4721)=<B'+D'/2  in Loop 268 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(469)=<B+D/2-1] 
 * Adding constraints: [s(4721)=<it(268)*aux(469)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(469)=<B+D/2-1]
* Psum in Loop 268: [s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for aux(469)=<B+D/2-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(469)=<s(3916)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 268: [s(4718)=<B'+D'/2+B'2+D'2/2,s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for s(4718)=<B'+D'/2+B'2+D'2/2  in Loop 268 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(470)=<2*B+D/2-1/2] 
 * Adding constraints: [s(4718)=<it(268)*aux(470)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(470)=<2*B+D/2-1/2]
* Psum in Loop 268: [s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for aux(470)=<2*B+D/2-1/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(470)=<s(4102)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 268: [s(4715)=<B'+D'/2+3*B'2+3/2*D'2,s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for s(4715)=<B'+D'/2+3*B'2+3/2*D'2  in Loop 268 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(471)=<4*B+3/2*D-5/2] 
 * Adding constraints: [s(4715)=<it(268)*aux(471)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(471)=<4*B+3/2*D-5/2]
* Psum in Loop 268: [s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for aux(471)=<4*B+3/2*D-5/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(471)=<s(4103)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 268: [s(4724)=<A'2,s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for s(4724)=<A'2  in Loop 268 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(472)=<A] 
 * Adding constraints: [s(4724)=<it(268)*aux(472)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(472)=<A]
* Psum in Loop 268: [s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for aux(472)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(472)=<s(4108)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 268: [s(4712)=<B'2+D'2/2,s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for s(4712)=<B'2+D'2/2  in Loop 268 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(473)=<B+D/2-1] 
 * Adding constraints: [s(4712)=<it(268)*aux(473)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(473)=<B+D/2-1]
* Psum in Loop 268: [s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for aux(473)=<B+D/2-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(473)=<s(3916)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 268: [s(4723)=<C'2+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for s(4723)=<C'2+1  in Loop 268 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(474)=<C+1] 
 * Adding constraints: [s(4723)=<it(268)*aux(474)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(474)=<C+1]
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing max_min for aux(474)=<C+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(474)=<s(3893)+1] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Chain-Tail [270]: [it([270])=<1,s(4727)=<A]

###### Computing sum for it([270])=<1  in Chain-Tail [270] 
   - Applying inductive sum strategy 
     - head Candidate: D/2+1/2 
       - Loop 263 is collaborative
       - Loop 264 is collaborative
       - Loop 265 is collaborative
       - Loop 266 is collaborative
       - Loop 267 is collaborative
       - Loop 268 is collaborative
     - tail Candidate: D/2+1/2 
       - Loop 263 is collaborative
       - Loop 264 is collaborative
       - Loop 265 is collaborative
       - Loop 266 is collaborative
       - Loop 267 is collaborative
       - Loop 268 is collaborative
 * Adding constraints: [it([270])=<D/2+1/2,it([270])=<D/2+1/2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Chain-Tail [270]: [s(4727)=<A]

###### Computing sum for s(4727)=<A  in Chain-Tail [270] 
   - Applying inductive sum strategy 
     - head Candidate: A 
       - Loop 263 has a reset to  [2*A]
       - Loop 264 has a reset to  [2*A]
       - Loop 265 has a reset to  [2*A]
       - Loop 266 has a reset to  [2*A]
       - Loop 267 has a reset to  [2*A]
       - Loop 268 has a reset to  [2*A]
     - tail Candidate: A 
       - Loop 263 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(482)=<A] 
 * Adding constraints: [s(4727)=<it([270])*aux(482),s(4727)=<aux(480)+aux(479)+aux(478)+aux(477)+aux(476)+aux(475)+aux(481),aux(481)=<A] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(482)=<A]
* Psum in Loop 263: [aux(475)=<2*A]
* Psum in Loop 264: [aux(476)=<2*A]
* Psum in Loop 265: [aux(477)=<2*A]
* Psum in Loop 266: [aux(478)=<2*A]
* Psum in Loop 267: [aux(479)=<2*A]
* Psum in Loop 268: [aux(480)=<2*A]

###### Computing max_min for aux(482)=<A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(482)=<s(4108)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 263: [aux(475)=<2*A]
* Psum in Loop 264: [aux(476)=<2*A]
* Psum in Loop 265: [aux(477)=<2*A]
* Psum in Loop 266: [aux(478)=<2*A]
* Psum in Loop 267: [aux(479)=<2*A]
* Psum in Loop 268: [aux(480)=<2*A]

###### Computing sum for aux(475)=<2*A  in Loop 263 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(483)=<2*A] 
 * Adding constraints: [aux(475)=<it(263)*aux(483)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(483)=<2*A]
* Psum in Loop 264: [aux(476)=<2*A]
* Psum in Loop 265: [aux(477)=<2*A]
* Psum in Loop 266: [aux(478)=<2*A]
* Psum in Loop 267: [aux(479)=<2*A]
* Psum in Loop 268: [aux(480)=<2*A]

###### Computing max_min for aux(483)=<2*A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(483)=<s(4108)*2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 264: [aux(476)=<2*A]
* Psum in Loop 265: [aux(477)=<2*A]
* Psum in Loop 266: [aux(478)=<2*A]
* Psum in Loop 267: [aux(479)=<2*A]
* Psum in Loop 268: [aux(480)=<2*A]

###### Computing sum for aux(476)=<2*A  in Loop 264 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(484)=<2*A] 
 * Adding constraints: [aux(476)=<it(264)*aux(484)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(484)=<2*A]
* Psum in Loop 265: [aux(477)=<2*A]
* Psum in Loop 266: [aux(478)=<2*A]
* Psum in Loop 267: [aux(479)=<2*A]
* Psum in Loop 268: [aux(480)=<2*A]

###### Computing max_min for aux(484)=<2*A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(484)=<s(4108)*2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 265: [aux(477)=<2*A]
* Psum in Loop 266: [aux(478)=<2*A]
* Psum in Loop 267: [aux(479)=<2*A]
* Psum in Loop 268: [aux(480)=<2*A]

###### Computing sum for aux(477)=<2*A  in Loop 265 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(485)=<2*A] 
 * Adding constraints: [aux(477)=<it(265)*aux(485)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(485)=<2*A]
* Psum in Loop 266: [aux(478)=<2*A]
* Psum in Loop 267: [aux(479)=<2*A]
* Psum in Loop 268: [aux(480)=<2*A]

###### Computing max_min for aux(485)=<2*A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(485)=<s(4108)*2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 266: [aux(478)=<2*A]
* Psum in Loop 267: [aux(479)=<2*A]
* Psum in Loop 268: [aux(480)=<2*A]

###### Computing sum for aux(478)=<2*A  in Loop 266 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(486)=<2*A] 
 * Adding constraints: [aux(478)=<it(266)*aux(486)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(486)=<2*A]
* Psum in Loop 267: [aux(479)=<2*A]
* Psum in Loop 268: [aux(480)=<2*A]

###### Computing max_min for aux(486)=<2*A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(486)=<s(4108)*2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 267: [aux(479)=<2*A]
* Psum in Loop 268: [aux(480)=<2*A]

###### Computing sum for aux(479)=<2*A  in Loop 267 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(487)=<2*A] 
 * Adding constraints: [aux(479)=<it(267)*aux(487)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(487)=<2*A]
* Psum in Loop 268: [aux(480)=<2*A]

###### Computing max_min for aux(487)=<2*A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(487)=<s(4108)*2] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Psum in Loop 268: [aux(480)=<2*A]

###### Computing sum for aux(480)=<2*A  in Loop 268 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(488)=<2*A] 
 * Adding constraints: [aux(480)=<it(268)*aux(488)] 

##### Pending set evaluate(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(488)=<2*A]

###### Computing max_min for aux(488)=<2*A  
   - Found a solution using cacheing 
 * Adding constraints:[aux(488)=<s(4108)*2] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [263,264,265,266,267,268,[270]] 

#### Simplifying cost structure of phase [263,264,265,266,267,268,[270]] 
 * Joined equivalent variables [aux(489),aux(481),s(4108)] into aux(489)
 * Joined equivalent variables [aux(490),aux(465),aux(468)] into aux(490)
 * Joined equivalent variables [aux(483),aux(484),aux(485),aux(486),aux(487),aux(488)] into aux(483)
 * Joined equivalent variables [aux(447),aux(450),aux(453),aux(458),aux(461),aux(463),aux(466),aux(472),aux(482),s(4332)] into aux(447)
 * Joined equivalent variables [aux(449),aux(452),aux(457),aux(460),aux(462),aux(464),aux(467),aux(474),s(4110),s(4334)] into aux(449)
 * Joined equivalent variables [aux(454),aux(459),aux(469),aux(473),s(3919),s(3924),s(3955),s(3958),s(4107),s(4109),s(4330),s(4333),s(4435),s(4436),s(4484),s(4486)] into aux(454)
 * Joined equivalent variables [aux(456),aux(471),s(4134),s(4326),s(4481)] into aux(456)
 * Joined equivalent variables [aux(455),aux(470),s(4135),s(4325),s(4480)] into aux(455)
 * Joined equivalent variables [aux(448),aux(451)] into aux(448)
 * Joined equivalent variables [s(4131),s(4328)] into s(4131)
 * Joined equivalent variables [s(4106),s(4482)] into s(4106)
 * Joined equivalent variables [s(4132),s(4327)] into s(4132)
 * Joined equivalent variables [it(263),it(264),it(265),it(266),it(267),it(268)] into it(263)
 * Joined equivalent variables [aux(454),s(3970),s(4423)] into aux(454)
 * Joined equivalent variables [aux(475),aux(476),aux(477),aux(478),aux(479),aux(480)] into aux(475)
 * Joined equivalent variables [s(4622),s(4690),s(4692),s(4723)] into s(4622)
 * Joined equivalent variables [s(4621),s(4698)] into s(4621)
 * Joined equivalent variables [s(4524),s(4539),s(4623),s(4691),s(4693),s(4724)] into s(4524)
 * Joined equivalent variables [s(4699),s(4722)] into s(4699)
 * Joined equivalent variables [s(4611),s(4620),s(4712),s(4721)] into s(4611)
 * Joined equivalent variables [s(4614),s(4715)] into s(4614)
 * Joined equivalent variables [s(4617),s(4718)] into s(4617)
 * Joined equivalent variables [s(3923),s(3962),s(3963),s(4116),s(4136),s(4338),s(4344),s(4493)] into s(3923)
 * Joined equivalent variables [s(4117),s(4398),s(4494)] into s(4117)
 * Joined equivalent variables [s(4153),s(4495)] into s(4153)
 * Joined equivalent variables [s(4154),s(4496)] into s(4154)
 * Joined equivalent variables [s(4120),s(4401),s(4497)] into s(4120)
 * Joined equivalent variables [s(4137),s(4345)] into s(4137)
 * Joined equivalent variables [s(4646),s(4649)] into s(4646)
 * Joined equivalent variables [s(4654),s(4655)] into s(4654)
 * Joined equivalent variables [s(4569),s(4572)] into s(4569)
 * Joined equivalent variables [s(4576),s(4577)] into s(4576)
 * Joined equivalent variables [s(4571),s(4575)] into s(4571)
 * Joined equivalent variables [s(4534),s(4535)] into s(4534)
 * Joined equivalent variables [s(4519),s(4522)] into s(4519)
 * Joined equivalent variables [s(4167),s(4393)] into s(4167)
 * Joined equivalent variables [s(4169),s(4394)] into s(4169)
 * Joined equivalent variables [s(4518),s(4533)] into s(4518)
 * Joined equivalent variables [s(4523),s(4538)] into s(4523)
 * Joined equivalent variables [s(4173),s(4399)] into s(4173)
 * Joined equivalent variables [s(4174),s(4400)] into s(4174)
 * Joined equivalent variables [s(4646),s(4653)] into s(4646)
 * Joined equivalent variables [s(4529),s(4530)] into s(4529)
 * Joined equivalent variables [s(4660),s(4689)] into s(4660)
 * Joined equivalent variables [s(4151),s(4359)] into s(4151)
 * Joined equivalent variables [s(4152),s(4360)] into s(4152)
 * Joined equivalent variables [s(4155),s(4363)] into s(4155)
 * Joined equivalent variables [s(4656),s(4657)] into s(4656)
 * Joined equivalent variables [s(4581),s(4610)] into s(4581)
 * Joined equivalent variables [s(4578),s(4579)] into s(4578)
 * Joined equivalent variables [s(4536),s(4537)] into s(4536)
 * Joined equivalent variables [s(4540),s(4696)] into s(4540)
 * Joined equivalent variables [s(4694),s(4700)] into s(4694)
 * Joined equivalent variables [s(4580),s(4658),s(4659),s(4711)] into s(4580)
 * Joined equivalent variables [s(4695),s(4710)] into s(4695)
 * Joined equivalent variables [s(4569),s(4697)] into s(4569)
 * Joined equivalent variables [s(4516),s(4531)] into s(4516)
 * Joined equivalent variables [s(4512),s(4526)] into s(4512)
 * Joined equivalent variables [s(4511),s(4525)] into s(4511)
 * Joined equivalent variables [s(4570),s(4624),s(4647),s(4650),s(4708)] into s(4570)
 * Joined equivalent variables [s(4541),s(4701)] into s(4541)
 * Joined equivalent variables [s(4613),s(4714)] into s(4613)
 * Joined equivalent variables [s(4612),s(4713)] into s(4612)
 * Joined equivalent variables [s(4544),s(4704)] into s(4544)
 * Joined equivalent variables [s(4576),s(4654)] into s(4576)
 * Joined equivalent variables [s(4571),s(4646),s(4648),s(4709)] into s(4571)
 * Joined equivalent variables [s(4519),s(4534)] into s(4519)
 * Joined equivalent variables [s(4515),s(4529)] into s(4515)
 * Joined equivalent variables [s(4578),s(4656),s(4660)] into s(4578)
 * Joined equivalent variables [s(4542),s(4702)] into s(4542)
 * Joined equivalent variables [s(4574),s(4652)] into s(4574)
 * Joined equivalent variables [s(4573),s(4651)] into s(4573)
 * Joined equivalent variables [s(4547),s(4707)] into s(4547)

#### Cost of phase [263,264,265,266,267,268]:evaluate(A,B,C,D,E,F,G,H) -> [] 
519*it(263)+17*it([270])+128*s(4511)+180*s(4512)+78*s(4513)+26*s(4514)+24*s(4515)+64*s(4516)+6*s(4517)+234*s(4527)+78*s(4528)+6*s(4532)+140*s(4540)+66*s(4541)+33*s(4542)+22*s(4543)+30*s(4544)+18*s(4545)+18*s(4546)+30*s(4547)+44*s(4548)+22*s(4549)+22*s(4550)+20*s(4551)+18*s(4552)+18*s(4553)+20*s(4554)+44*s(4555)+22*s(4556)+22*s(4557)+20*s(4558)+18*s(4559)+18*s(4560)+20*s(4561)+44*s(4562)+22*s(4563)+22*s(4564)+20*s(4565)+18*s(4566)+18*s(4567)+20*s(4568)+18*s(4569)+608*s(4570)+72*s(4571)+312*s(4573)+104*s(4574)+44*s(4625)+22*s(4626)+22*s(4627)+20*s(4628)+18*s(4629)+18*s(4630)+20*s(4631)+44*s(4632)+22*s(4633)+22*s(4634)+20*s(4635)+18*s(4636)+18*s(4637)+20*s(4638)+44*s(4639)+22*s(4640)+22*s(4641)+20*s(4642)+18*s(4643)+18*s(4644)+20*s(4645)+144*s(4694)+18*s(4695)+11*s(4703)+9*s(4705)+9*s(4706)+32*s(4725)+6*s(4726)+0
  Such that:s(4104) =< A+B+D/2
s(4105) =< A+3*B+3/2*D
s(3893) =< B
s(4104) =< B+C+D/2
s(3916) =< B+D/2
s(4102) =< 2*B+D/2
s(4105) =< 3*B+C+3/2*D
s(4103) =< 4*B+3/2*D
s(3893) =< C
it([270]) =< D/2+1/2
aux(489) =< A
aux(490) =< D/2
it(263) =< aux(490)
aux(483) =< aux(489)*2
aux(447) =< aux(489)
aux(449) =< s(3893)+1
aux(454) =< s(3916)
aux(456) =< s(4103)
aux(455) =< s(4102)
aux(448) =< s(3893)
s(4131) =< s(4105)
s(4106) =< s(3916)+1/2
s(4132) =< s(4104)
s(4699) =< aux(490)*2
aux(475) =< it(263)*aux(483)
s(4727) =< it([270])*aux(447)
s(4622) =< it(263)*aux(449)
s(4611) =< it(263)*aux(454)
s(4524) =< it(263)*aux(447)
s(4614) =< it(263)*aux(456)
s(4617) =< it(263)*aux(455)
s(4621) =< it(263)*aux(449)
s(4621) =< it(263)*aux(447)
s(4518) =< it(263)*aux(449)
s(4523) =< it(263)*aux(448)
s(4727) =< aux(475)+aux(475)+aux(475)+aux(475)+aux(475)+aux(475)+aux(489)
s(4725) =< s(4727)
s(4726) =< s(4725)*s(3893)
s(4580) =< s(4524)
s(4580) =< s(4622)
s(4694) =< s(4699)
s(4541) =< s(4611)
s(4542) =< s(4611)
s(4703) =< s(4611)
s(4541) =< s(4580)
s(4542) =< s(4580)
s(4703) =< s(4580)
s(3923) =< aux(454)
s(4117) =< aux(454)-1
s(4153) =< aux(456)+1
s(4154) =< aux(455)+1
s(4120) =< aux(454)-2
s(4716) =< s(4541)*aux(456)
s(4719) =< s(4541)*aux(455)
s(4544) =< s(4541)*aux(454)
s(4613) =< s(4541)*s(4117)
s(4717) =< s(4541)*s(4153)
s(4720) =< s(4541)*s(4154)
s(4612) =< s(4541)*s(4120)
s(4705) =< s(4717)+s(4716)+s(4614)
s(4706) =< s(4717)+s(4716)+s(4614)
s(4705) =< s(4720)+s(4719)+s(4617)
s(4706) =< s(4720)+s(4719)+s(4617)
s(4703) =< s(4720)+s(4719)+s(4617)
s(4703) =< s(4717)+s(4716)+s(4614)
s(4542) =< s(4613)+s(4612)+s(4611)
s(4703) =< s(4613)+s(4612)+s(4611)
s(4706) =< s(4703)*s(3923)
s(4547) =< s(4542)*s(3923)
s(4705) =< s(4542)*s(4106)
s(4570) =< s(4580)
s(4571) =< s(4570)*aux(454)
s(4695) =< s(4694)*aux(454)
s(4540) =< s(4621)
s(4569) =< s(4540)*aux(454)
s(4336) =< aux(447)
s(4336) =< aux(449)
s(4339) =< s(4131)
s(4340) =< s(4132)
s(4341) =< s(4336)
s(4342) =< aux(456)
s(4343) =< aux(455)
s(4137) =< aux(454)+1
s(4669) =< s(4570)*s(4336)
s(4670) =< s(4570)*aux(454)
s(4578) =< s(4570)*s(3923)
s(4679) =< s(4570)*s(4339)
s(4680) =< s(4570)*s(4340)
s(4677) =< s(4570)*s(4341)
s(4681) =< s(4570)*s(4342)
s(4682) =< s(4570)*s(4343)
s(4678) =< s(4578)
s(4625) =< s(4578)
s(4626) =< s(4578)
s(4627) =< s(4578)
s(4625) =< s(4677)
s(4626) =< s(4677)
s(4627) =< s(4677)
s(4151) =< s(3923)
s(4152) =< s(3923)-1
s(4361) =< s(4342)+1
s(4362) =< s(4343)+1
s(4155) =< s(3923)-2
s(4685) =< s(4625)*s(4342)
s(4687) =< s(4625)*s(4343)
s(4628) =< s(4625)*s(3923)
s(4684) =< s(4625)*s(4152)
s(4686) =< s(4625)*s(4361)
s(4688) =< s(4625)*s(4362)
s(4683) =< s(4625)*s(4155)
s(4629) =< s(4686)+s(4685)+s(4681)
s(4630) =< s(4686)+s(4685)+s(4681)
s(4629) =< s(4688)+s(4687)+s(4682)
s(4630) =< s(4688)+s(4687)+s(4682)
s(4627) =< s(4688)+s(4687)+s(4682)
s(4627) =< s(4686)+s(4685)+s(4681)
s(4626) =< s(4684)+s(4683)+s(4578)
s(4627) =< s(4684)+s(4683)+s(4578)
s(4630) =< s(4627)*s(4151)
s(4631) =< s(4626)*s(4151)
s(4629) =< s(4626)*s(4137)
s(4666) =< s(4682)
s(4375) =< s(4343)
s(4663) =< s(4681)
s(4377) =< s(4342)
s(4678) =< s(4677)
s(4666) =< s(4680)
s(4375) =< s(4340)
s(4663) =< s(4679)
s(4377) =< s(4339)
s(4632) =< s(4678)
s(4633) =< s(4678)
s(4634) =< s(4678)
s(4632) =< s(4677)
s(4633) =< s(4677)
s(4634) =< s(4677)
s(4381) =< s(4377)+1
s(4382) =< s(4375)+1
s(4673) =< s(4632)*s(4377)
s(4675) =< s(4632)*s(4375)
s(4635) =< s(4632)*s(3923)
s(4672) =< s(4632)*s(4152)
s(4674) =< s(4632)*s(4381)
s(4676) =< s(4632)*s(4382)
s(4671) =< s(4632)*s(4155)
s(4636) =< s(4674)+s(4673)+s(4663)
s(4637) =< s(4674)+s(4673)+s(4663)
s(4636) =< s(4676)+s(4675)+s(4666)
s(4637) =< s(4676)+s(4675)+s(4666)
s(4634) =< s(4676)+s(4675)+s(4666)
s(4634) =< s(4674)+s(4673)+s(4663)
s(4633) =< s(4672)+s(4671)+s(4578)
s(4634) =< s(4672)+s(4671)+s(4578)
s(4637) =< s(4634)*s(4151)
s(4638) =< s(4633)*s(4151)
s(4636) =< s(4633)*s(4137)
s(4167) =< aux(455)
s(4169) =< aux(456)
s(4670) =< s(4669)
s(4167) =< s(4132)
s(4169) =< s(4131)
s(4639) =< s(4670)
s(4640) =< s(4670)
s(4641) =< s(4670)
s(4639) =< s(4669)
s(4640) =< s(4669)
s(4641) =< s(4669)
s(4173) =< s(4169)+1
s(4174) =< s(4167)+1
s(4664) =< s(4639)*s(4169)
s(4667) =< s(4639)*s(4167)
s(4642) =< s(4639)*aux(454)
s(4662) =< s(4639)*s(4117)
s(4665) =< s(4639)*s(4173)
s(4668) =< s(4639)*s(4174)
s(4661) =< s(4639)*s(4120)
s(4643) =< s(4665)+s(4664)+s(4663)
s(4644) =< s(4665)+s(4664)+s(4663)
s(4643) =< s(4668)+s(4667)+s(4666)
s(4644) =< s(4668)+s(4667)+s(4666)
s(4641) =< s(4668)+s(4667)+s(4666)
s(4641) =< s(4665)+s(4664)+s(4663)
s(4640) =< s(4662)+s(4661)+s(4578)
s(4641) =< s(4662)+s(4661)+s(4578)
s(4644) =< s(4641)*s(3923)
s(4645) =< s(4640)*s(3923)
s(4643) =< s(4640)*s(4137)
s(4576) =< s(4570)*aux(454)
s(4573) =< s(4578)
s(4574) =< s(4576)
s(4111) =< aux(489)
s(4111) =< aux(449)
s(4543) =< s(4611)
s(4543) =< s(4580)
s(4118) =< s(4103)+1
s(4119) =< s(4102)+1
s(4615) =< s(4541)*s(4103)
s(4618) =< s(4541)*s(4102)
s(4616) =< s(4541)*s(4118)
s(4619) =< s(4541)*s(4119)
s(4545) =< s(4616)+s(4615)+s(4614)
s(4546) =< s(4616)+s(4615)+s(4614)
s(4545) =< s(4619)+s(4618)+s(4617)
s(4546) =< s(4619)+s(4618)+s(4617)
s(4543) =< s(4619)+s(4618)+s(4617)
s(4543) =< s(4616)+s(4615)+s(4614)
s(4543) =< s(4613)+s(4612)+s(4611)
s(4546) =< s(4543)*s(3923)
s(4545) =< s(4542)*s(4106)
s(4133) =< s(4111)
s(4590) =< s(4540)*s(4111)
s(4591) =< s(4540)*aux(454)
s(4581) =< s(4540)*s(3923)
s(4600) =< s(4540)*s(4131)
s(4601) =< s(4540)*s(4132)
s(4598) =< s(4540)*s(4133)
s(4602) =< s(4540)*aux(456)
s(4603) =< s(4540)*aux(455)
s(4599) =< s(4581)
s(4548) =< s(4581)
s(4549) =< s(4581)
s(4550) =< s(4581)
s(4548) =< s(4598)
s(4549) =< s(4598)
s(4550) =< s(4598)
s(4606) =< s(4548)*aux(456)
s(4608) =< s(4548)*aux(455)
s(4551) =< s(4548)*s(3923)
s(4605) =< s(4548)*s(4152)
s(4607) =< s(4548)*s(4153)
s(4609) =< s(4548)*s(4154)
s(4604) =< s(4548)*s(4155)
s(4552) =< s(4607)+s(4606)+s(4602)
s(4553) =< s(4607)+s(4606)+s(4602)
s(4552) =< s(4609)+s(4608)+s(4603)
s(4553) =< s(4609)+s(4608)+s(4603)
s(4550) =< s(4609)+s(4608)+s(4603)
s(4550) =< s(4607)+s(4606)+s(4602)
s(4549) =< s(4605)+s(4604)+s(4581)
s(4550) =< s(4605)+s(4604)+s(4581)
s(4553) =< s(4550)*s(4151)
s(4554) =< s(4549)*s(4151)
s(4552) =< s(4549)*s(4137)
s(4587) =< s(4603)
s(4584) =< s(4602)
s(4599) =< s(4598)
s(4587) =< s(4601)
s(4584) =< s(4600)
s(4555) =< s(4599)
s(4556) =< s(4599)
s(4557) =< s(4599)
s(4555) =< s(4598)
s(4556) =< s(4598)
s(4557) =< s(4598)
s(4594) =< s(4555)*s(4169)
s(4596) =< s(4555)*s(4167)
s(4558) =< s(4555)*s(3923)
s(4593) =< s(4555)*s(4152)
s(4595) =< s(4555)*s(4173)
s(4597) =< s(4555)*s(4174)
s(4592) =< s(4555)*s(4155)
s(4559) =< s(4595)+s(4594)+s(4584)
s(4560) =< s(4595)+s(4594)+s(4584)
s(4559) =< s(4597)+s(4596)+s(4587)
s(4560) =< s(4597)+s(4596)+s(4587)
s(4557) =< s(4597)+s(4596)+s(4587)
s(4557) =< s(4595)+s(4594)+s(4584)
s(4556) =< s(4593)+s(4592)+s(4581)
s(4557) =< s(4593)+s(4592)+s(4581)
s(4560) =< s(4557)*s(4151)
s(4561) =< s(4556)*s(4151)
s(4559) =< s(4556)*s(4137)
s(4185) =< s(4102)
s(4186) =< s(4103)
s(4591) =< s(4590)
s(4185) =< s(4104)
s(4186) =< s(4105)
s(4562) =< s(4591)
s(4563) =< s(4591)
s(4564) =< s(4591)
s(4562) =< s(4590)
s(4563) =< s(4590)
s(4564) =< s(4590)
s(4190) =< s(4186)+1
s(4191) =< s(4185)+1
s(4585) =< s(4562)*s(4186)
s(4588) =< s(4562)*s(4185)
s(4565) =< s(4562)*aux(454)
s(4583) =< s(4562)*s(4117)
s(4586) =< s(4562)*s(4190)
s(4589) =< s(4562)*s(4191)
s(4582) =< s(4562)*s(4120)
s(4566) =< s(4586)+s(4585)+s(4584)
s(4567) =< s(4586)+s(4585)+s(4584)
s(4566) =< s(4589)+s(4588)+s(4587)
s(4567) =< s(4589)+s(4588)+s(4587)
s(4564) =< s(4589)+s(4588)+s(4587)
s(4564) =< s(4586)+s(4585)+s(4584)
s(4563) =< s(4583)+s(4582)+s(4581)
s(4564) =< s(4583)+s(4582)+s(4581)
s(4567) =< s(4564)*s(3923)
s(4568) =< s(4563)*s(3923)
s(4566) =< s(4563)*s(4137)
s(4518) =< s(4524)
s(4523) =< s(4524)
s(4511) =< s(4523)
s(4512) =< s(4518)
s(4512) =< s(4523)
s(4519) =< s(4512)*aux(454)
s(4536) =< s(4512)*s(3923)
s(4527) =< s(4536)
s(4528) =< s(4519)
s(4515) =< s(4511)*aux(454)
s(4516) =< s(4518)
s(4532) =< s(4516)*aux(454)
s(4520) =< s(4512)*s(3916)
s(4521) =< s(4512)*s(3923)
s(4513) =< s(4519)
s(4513) =< s(4521)
s(4514) =< s(4520)
s(4514) =< s(4519)
s(4517) =< s(4516)*s(3916)
 * Joined equivalent variables [aux(491),aux(427),aux(489)] into aux(491)
 * Joined equivalent variables [s(4521),s(4536)] into s(4521)
 * Renamed intermediate variables: 
[ (eq(348,1),aux(269))>>s(4728), (eq(348,1),aux(283))>>s(4729), (eq(348,1),aux(284))>>s(4730), (eq(348,1),aux(285))>>s(4731), (eq(348,1),aux(286))>>s(4732), (eq(348,1),aux(287))>>s(4733), (eq(348,1),aux(288))>>s(4734), (eq(348,1),aux(289))>>s(4735), (eq(348,1),aux(290))>>s(4736), (eq(348,1),aux(291))>>s(4737), (eq(348,1),aux(292))>>s(4738), (eq(348,1),aux(293))>>s(4739), (eq(348,1),s(2670))>>s(4740), (eq(348,1),s(2671))>>s(4741), (eq(348,1),s(2672))>>s(4742), (eq(348,1),s(2673))>>s(4743), (eq(348,1),s(2674))>>s(4744), (eq(348,1),s(2675))>>s(4745), (eq(348,1),s(2676))>>s(4746), (eq(348,1),s(2677))>>s(4747), (eq(348,1),s(2684))>>s(4748), (eq(348,1),s(2693))>>s(4749), (eq(348,1),s(2694))>>s(4750), (eq(348,1),s(2695))>>s(4751), (eq(348,1),s(2696))>>s(4752), (eq(348,1),s(2697))>>s(4753), (eq(348,1),s(2698))>>s(4754), (eq(348,1),s(2699))>>s(4755), (eq(348,1),s(2700))>>s(4756), (eq(348,1),s(2701))>>s(4757), (eq(348,1),s(2702))>>s(4758), (eq(348,1),s(2703))>>s(4759), (eq(348,1),s(2704))>>s(4760), (eq(348,1),s(2705))>>s(4761), (eq(348,1),s(2706))>>s(4762), (eq(348,1),s(2707))>>s(4763), (eq(348,1),s(2708))>>s(4764), (eq(348,1),s(2709))>>s(4765), (eq(348,1),s(2710))>>s(4766), (eq(348,1),s(2685))>>s(4767), (eq(348,1),s(2719))>>s(4768), (eq(348,1),s(2730))>>s(4769), (eq(348,1),s(2731))>>s(4770), (eq(348,1),s(2732))>>s(4771), (eq(348,1),s(2733))>>s(4772), (eq(348,1),s(2734))>>s(4773), (eq(348,1),s(2735))>>s(4774), (eq(348,1),s(2736))>>s(4775), (eq(348,1),s(2737))>>s(4776), (eq(348,1),s(2738))>>s(4777), (eq(348,1),s(2739))>>s(4778), (eq(348,1),s(2740))>>s(4779), (eq(348,1),s(2741))>>s(4780), (eq(348,1),s(2742))>>s(4781), (eq(348,1),s(2743))>>s(4782), (eq(348,1),s(2744))>>s(4783), (eq(348,1),s(2745))>>s(4784), (eq(348,1),s(2746))>>s(4785), (eq(348,1),s(2747))>>s(4786), (eq(348,1),s(2748))>>s(4787), (eq(348,1),s(2749))>>s(4788), (eq(348,1),s(2750))>>s(4789), (eq(348,1),s(2751))>>s(4790), (eq(348,1),s(2752))>>s(4791), (eq(348,1),s(2753))>>s(4792), (eq(348,1),s(2754))>>s(4793), (eq(348,1),s(2755))>>s(4794), (eq(348,1),s(2756))>>s(4795), (eq(348,1),s(2757))>>s(4796), (eq(348,1),s(2758))>>s(4797), (eq(348,1),s(2759))>>s(4798), (eq(348,1),s(2760))>>s(4799), (eq(348,1),s(2761))>>s(4800), (eq(348,1),s(2762))>>s(4801), (eq(348,1),s(2763))>>s(4802), (eq(348,1),s(2764))>>s(4803), (eq(348,1),s(2765))>>s(4804), (eq(348,1),s(2766))>>s(4805), (eq(348,1),s(2767))>>s(4806), (eq(348,1),s(2768))>>s(4807), (eq(348,1),s(2769))>>s(4808), (eq(348,1),s(2770))>>s(4809), (eq(348,1),s(2771))>>s(4810), (eq(348,1),s(2772))>>s(4811), (eq(348,1),s(2773))>>s(4812), (eq(348,1),s(2774))>>s(4813), (eq(348,1),s(2775))>>s(4814), (eq(348,1),s(2776))>>s(4815), (eq(348,1),s(2777))>>s(4816), (eq(348,1),s(2778))>>s(4817), (eq(348,1),s(2779))>>s(4818), (eq(348,1),s(2780))>>s(4819), (eq(348,1),s(2781))>>s(4820), (eq(348,1),s(2782))>>s(4821), (eq(348,1),s(2783))>>s(4822), (eq(348,1),s(2784))>>s(4823), (eq(348,1),s(2785))>>s(4824), (eq(348,1),s(2786))>>s(4825), (eq(348,1),s(2787))>>s(4826), (eq(348,1),s(2788))>>s(4827), (eq(348,1),s(2790))>>s(4828), (eq(348,1),s(2791))>>s(4829), (eq(348,1),s(2793))>>s(4830), (eq(348,1),s(2794))>>s(4831), (eq(348,1),s(2795))>>s(4832), (eq(348,1),s(2796))>>s(4833), (eq(348,1),s(2797))>>s(4834), (eq(348,1),s(2798))>>s(4835), (eq(348,1),s(2799))>>s(4836), (eq(348,1),s(2800))>>s(4837), (eq(348,1),s(2801))>>s(4838), (eq(348,1),s(2802))>>s(4839), (eq(348,1),s(2804))>>s(4840), (eq(348,1),s(2913))>>s(4841)]

#### Simplifying cost structure of CE 348 
 * Renamed intermediate variables: 
[ (eq(351,1),s(816))>>s(4842), (eq(351,1),s(817))>>s(4843), (eq(351,1),s(818))>>s(4844), (eq(351,1),s(819))>>s(4845), (eq(351,1),s(820))>>s(4846), (eq(351,1),s(821))>>s(4847), (eq(351,1),s(822))>>s(4848), (eq(351,1),s(823))>>s(4849), (eq(351,1),s(824))>>s(4850), (eq(351,1),s(825))>>s(4851), (eq(351,1),s(826))>>s(4852), (eq(351,1),s(827))>>s(4853), (eq(351,1),s(828))>>s(4854), (eq(351,1),s(829))>>s(4855)]

#### Simplifying cost structure of CE 351 
 * Renamed intermediate variables: 
[ (eq(353,1),s(3857))>>s(4856), (eq(353,1),aux(418))>>s(4857), (eq(353,1),aux(419))>>s(4858), (eq(353,1),aux(420))>>s(4859), (eq(353,1),aux(421))>>s(4860), (eq(353,1),aux(422))>>s(4861), (eq(353,1),aux(423))>>s(4862), (eq(353,1),s(3846))>>s(4863), (eq(353,1),s(3847))>>s(4864), (eq(353,1),s(3862))>>s(4865), (eq(353,1),s(3863))>>s(4866), (eq(353,1),s(3864))>>s(4867), (eq(353,1),s(3851))>>s(4868), (eq(353,1),s(3866))>>s(4869), (eq(353,1),s(3852))>>s(4870), (eq(353,1),s(3849))>>s(4871), (eq(353,1),s(3869))>>s(4872), (eq(353,1),s(3870))>>s(4873), (eq(353,1),s(3871))>>s(4874), (eq(353,1),s(3872))>>s(4875), (eq(353,1),s(3873))>>s(4876), (eq(353,1),s(3874))>>s(4877), (eq(353,1),s(3875))>>s(4878), (eq(353,1),s(3876))>>s(4879), (eq(353,1),s(3877))>>s(4880), (eq(353,1),s(3878))>>s(4881), (eq(353,1),s(3879))>>s(4882), (eq(353,1),s(3880))>>s(4883), (eq(353,1),s(3881))>>s(4884), (eq(353,1),s(3882))>>s(4885), (eq(353,1),s(3850))>>s(4886)]

#### Simplifying cost structure of CE 353 
 * Joined equivalent variables [aux(492),s(4728),s(4857)] into aux(492)
 * Joined equivalent variables [s(4742),s(4743),s(4744),s(4745),s(4746),s(4747),s(4749),s(4750),s(4751),s(4759),s(4764),s(4765),s(4766),s(4767),s(4786),s(4787),s(4788),s(4796),s(4801),s(4802),s(4803),s(4808),s(4809),s(4810),s(4815),s(4820),s(4821),s(4822),s(4825),s(4826),s(4827),s(4832),s(4837),s(4838),s(4839),s(4840),s(4841),s(4850),s(4851),s(4852),s(4853),s(4854),s(4855),s(4865),s(4866),s(4867),s(4868),s(4869),s(4870),s(4872),s(4873),s(4880),s(4881),s(4883),s(4884),s(4885),s(4886)] into s(4742)
 * Joined equivalent variables [s(4748),s(4871)] into s(4748)

#### Simplifying cost structure of chain [multiple(269,[[multiple([263,264,265,266,267,268],[[270]])],[270]])] 

#### Cost of chains of evaluate(A,B,C,D,E,F,G,H):
* Chain [272]: 17
  with precondition: [A=1,B=0,D=1,E=1,F=0,H=1,C>=0,G>=0] 

* Chain [271]: 32*s(3883)+18*s(3888)+6*s(3889)+28
  Such that:aux(425) =< B
s(3885) =< C
aux(426) =< A
s(3883) =< aux(426)
s(3885) =< aux(425)
s(3888) =< aux(425)
s(3889) =< s(3883)*s(3885)

  with precondition: [D=1,E=1,F=0,H=1,A>=2,B>=1,C>=0,G>=0] 

* Chain [270]: 32*s(3892)+6*s(3896)+17
  Such that:s(3893) =< B
s(3893) =< C
aux(427) =< A
s(3892) =< aux(427)
s(3896) =< s(3892)*s(3893)

  with precondition: [D=1,H=1,A=E,B=F,A>=2,B>=1,C+1>=A,G+1>=A] 

* Chain [multiple([263,264,265,266,267,268],[[270]])]: 519*it(263)+17*it([270])+128*s(4511)+180*s(4512)+78*s(4513)+26*s(4514)+24*s(4515)+64*s(4516)+6*s(4517)+234*s(4527)+78*s(4528)+6*s(4532)+140*s(4540)+66*s(4541)+33*s(4542)+22*s(4543)+30*s(4544)+18*s(4545)+18*s(4546)+30*s(4547)+44*s(4548)+22*s(4549)+22*s(4550)+20*s(4551)+18*s(4552)+18*s(4553)+20*s(4554)+44*s(4555)+22*s(4556)+22*s(4557)+20*s(4558)+18*s(4559)+18*s(4560)+20*s(4561)+44*s(4562)+22*s(4563)+22*s(4564)+20*s(4565)+18*s(4566)+18*s(4567)+20*s(4568)+18*s(4569)+608*s(4570)+72*s(4571)+312*s(4573)+104*s(4574)+44*s(4625)+22*s(4626)+22*s(4627)+20*s(4628)+18*s(4629)+18*s(4630)+20*s(4631)+44*s(4632)+22*s(4633)+22*s(4634)+20*s(4635)+18*s(4636)+18*s(4637)+20*s(4638)+44*s(4639)+22*s(4640)+22*s(4641)+20*s(4642)+18*s(4643)+18*s(4644)+20*s(4645)+144*s(4694)+18*s(4695)+11*s(4703)+9*s(4705)+9*s(4706)+32*s(4725)+6*s(4726)+0
  Such that:s(4104) =< A+B+D/2
s(4105) =< A+3*B+3/2*D
s(3893) =< B
s(4104) =< B+C+D/2
s(3916) =< B+D/2
s(4102) =< 2*B+D/2
s(4105) =< 3*B+C+3/2*D
s(4103) =< 4*B+3/2*D
s(3893) =< C
it([270]) =< D/2+1/2
aux(489) =< A
aux(490) =< D/2
it(263) =< aux(490)
aux(483) =< aux(489)*2
aux(447) =< aux(489)
aux(449) =< s(3893)+1
aux(454) =< s(3916)
aux(456) =< s(4103)
aux(455) =< s(4102)
aux(448) =< s(3893)
s(4131) =< s(4105)
s(4106) =< s(3916)+1/2
s(4132) =< s(4104)
s(4699) =< aux(490)*2
aux(475) =< it(263)*aux(483)
s(4727) =< it([270])*aux(447)
s(4622) =< it(263)*aux(449)
s(4611) =< it(263)*aux(454)
s(4524) =< it(263)*aux(447)
s(4614) =< it(263)*aux(456)
s(4617) =< it(263)*aux(455)
s(4621) =< it(263)*aux(449)
s(4621) =< it(263)*aux(447)
s(4518) =< it(263)*aux(449)
s(4523) =< it(263)*aux(448)
s(4727) =< aux(475)+aux(475)+aux(475)+aux(475)+aux(475)+aux(475)+aux(489)
s(4725) =< s(4727)
s(4726) =< s(4725)*s(3893)
s(4580) =< s(4524)
s(4580) =< s(4622)
s(4694) =< s(4699)
s(4541) =< s(4611)
s(4542) =< s(4611)
s(4703) =< s(4611)
s(4541) =< s(4580)
s(4542) =< s(4580)
s(4703) =< s(4580)
s(3923) =< aux(454)
s(4117) =< aux(454)-1
s(4153) =< aux(456)+1
s(4154) =< aux(455)+1
s(4120) =< aux(454)-2
s(4716) =< s(4541)*aux(456)
s(4719) =< s(4541)*aux(455)
s(4544) =< s(4541)*aux(454)
s(4613) =< s(4541)*s(4117)
s(4717) =< s(4541)*s(4153)
s(4720) =< s(4541)*s(4154)
s(4612) =< s(4541)*s(4120)
s(4705) =< s(4717)+s(4716)+s(4614)
s(4706) =< s(4717)+s(4716)+s(4614)
s(4705) =< s(4720)+s(4719)+s(4617)
s(4706) =< s(4720)+s(4719)+s(4617)
s(4703) =< s(4720)+s(4719)+s(4617)
s(4703) =< s(4717)+s(4716)+s(4614)
s(4542) =< s(4613)+s(4612)+s(4611)
s(4703) =< s(4613)+s(4612)+s(4611)
s(4706) =< s(4703)*s(3923)
s(4547) =< s(4542)*s(3923)
s(4705) =< s(4542)*s(4106)
s(4570) =< s(4580)
s(4571) =< s(4570)*aux(454)
s(4695) =< s(4694)*aux(454)
s(4540) =< s(4621)
s(4569) =< s(4540)*aux(454)
s(4336) =< aux(447)
s(4336) =< aux(449)
s(4339) =< s(4131)
s(4340) =< s(4132)
s(4341) =< s(4336)
s(4342) =< aux(456)
s(4343) =< aux(455)
s(4137) =< aux(454)+1
s(4669) =< s(4570)*s(4336)
s(4670) =< s(4570)*aux(454)
s(4578) =< s(4570)*s(3923)
s(4679) =< s(4570)*s(4339)
s(4680) =< s(4570)*s(4340)
s(4677) =< s(4570)*s(4341)
s(4681) =< s(4570)*s(4342)
s(4682) =< s(4570)*s(4343)
s(4678) =< s(4578)
s(4625) =< s(4578)
s(4626) =< s(4578)
s(4627) =< s(4578)
s(4625) =< s(4677)
s(4626) =< s(4677)
s(4627) =< s(4677)
s(4151) =< s(3923)
s(4152) =< s(3923)-1
s(4361) =< s(4342)+1
s(4362) =< s(4343)+1
s(4155) =< s(3923)-2
s(4685) =< s(4625)*s(4342)
s(4687) =< s(4625)*s(4343)
s(4628) =< s(4625)*s(3923)
s(4684) =< s(4625)*s(4152)
s(4686) =< s(4625)*s(4361)
s(4688) =< s(4625)*s(4362)
s(4683) =< s(4625)*s(4155)
s(4629) =< s(4686)+s(4685)+s(4681)
s(4630) =< s(4686)+s(4685)+s(4681)
s(4629) =< s(4688)+s(4687)+s(4682)
s(4630) =< s(4688)+s(4687)+s(4682)
s(4627) =< s(4688)+s(4687)+s(4682)
s(4627) =< s(4686)+s(4685)+s(4681)
s(4626) =< s(4684)+s(4683)+s(4578)
s(4627) =< s(4684)+s(4683)+s(4578)
s(4630) =< s(4627)*s(4151)
s(4631) =< s(4626)*s(4151)
s(4629) =< s(4626)*s(4137)
s(4666) =< s(4682)
s(4375) =< s(4343)
s(4663) =< s(4681)
s(4377) =< s(4342)
s(4678) =< s(4677)
s(4666) =< s(4680)
s(4375) =< s(4340)
s(4663) =< s(4679)
s(4377) =< s(4339)
s(4632) =< s(4678)
s(4633) =< s(4678)
s(4634) =< s(4678)
s(4632) =< s(4677)
s(4633) =< s(4677)
s(4634) =< s(4677)
s(4381) =< s(4377)+1
s(4382) =< s(4375)+1
s(4673) =< s(4632)*s(4377)
s(4675) =< s(4632)*s(4375)
s(4635) =< s(4632)*s(3923)
s(4672) =< s(4632)*s(4152)
s(4674) =< s(4632)*s(4381)
s(4676) =< s(4632)*s(4382)
s(4671) =< s(4632)*s(4155)
s(4636) =< s(4674)+s(4673)+s(4663)
s(4637) =< s(4674)+s(4673)+s(4663)
s(4636) =< s(4676)+s(4675)+s(4666)
s(4637) =< s(4676)+s(4675)+s(4666)
s(4634) =< s(4676)+s(4675)+s(4666)
s(4634) =< s(4674)+s(4673)+s(4663)
s(4633) =< s(4672)+s(4671)+s(4578)
s(4634) =< s(4672)+s(4671)+s(4578)
s(4637) =< s(4634)*s(4151)
s(4638) =< s(4633)*s(4151)
s(4636) =< s(4633)*s(4137)
s(4167) =< aux(455)
s(4169) =< aux(456)
s(4670) =< s(4669)
s(4167) =< s(4132)
s(4169) =< s(4131)
s(4639) =< s(4670)
s(4640) =< s(4670)
s(4641) =< s(4670)
s(4639) =< s(4669)
s(4640) =< s(4669)
s(4641) =< s(4669)
s(4173) =< s(4169)+1
s(4174) =< s(4167)+1
s(4664) =< s(4639)*s(4169)
s(4667) =< s(4639)*s(4167)
s(4642) =< s(4639)*aux(454)
s(4662) =< s(4639)*s(4117)
s(4665) =< s(4639)*s(4173)
s(4668) =< s(4639)*s(4174)
s(4661) =< s(4639)*s(4120)
s(4643) =< s(4665)+s(4664)+s(4663)
s(4644) =< s(4665)+s(4664)+s(4663)
s(4643) =< s(4668)+s(4667)+s(4666)
s(4644) =< s(4668)+s(4667)+s(4666)
s(4641) =< s(4668)+s(4667)+s(4666)
s(4641) =< s(4665)+s(4664)+s(4663)
s(4640) =< s(4662)+s(4661)+s(4578)
s(4641) =< s(4662)+s(4661)+s(4578)
s(4644) =< s(4641)*s(3923)
s(4645) =< s(4640)*s(3923)
s(4643) =< s(4640)*s(4137)
s(4576) =< s(4570)*aux(454)
s(4573) =< s(4578)
s(4574) =< s(4576)
s(4111) =< aux(489)
s(4111) =< aux(449)
s(4543) =< s(4611)
s(4543) =< s(4580)
s(4118) =< s(4103)+1
s(4119) =< s(4102)+1
s(4615) =< s(4541)*s(4103)
s(4618) =< s(4541)*s(4102)
s(4616) =< s(4541)*s(4118)
s(4619) =< s(4541)*s(4119)
s(4545) =< s(4616)+s(4615)+s(4614)
s(4546) =< s(4616)+s(4615)+s(4614)
s(4545) =< s(4619)+s(4618)+s(4617)
s(4546) =< s(4619)+s(4618)+s(4617)
s(4543) =< s(4619)+s(4618)+s(4617)
s(4543) =< s(4616)+s(4615)+s(4614)
s(4543) =< s(4613)+s(4612)+s(4611)
s(4546) =< s(4543)*s(3923)
s(4545) =< s(4542)*s(4106)
s(4133) =< s(4111)
s(4590) =< s(4540)*s(4111)
s(4591) =< s(4540)*aux(454)
s(4581) =< s(4540)*s(3923)
s(4600) =< s(4540)*s(4131)
s(4601) =< s(4540)*s(4132)
s(4598) =< s(4540)*s(4133)
s(4602) =< s(4540)*aux(456)
s(4603) =< s(4540)*aux(455)
s(4599) =< s(4581)
s(4548) =< s(4581)
s(4549) =< s(4581)
s(4550) =< s(4581)
s(4548) =< s(4598)
s(4549) =< s(4598)
s(4550) =< s(4598)
s(4606) =< s(4548)*aux(456)
s(4608) =< s(4548)*aux(455)
s(4551) =< s(4548)*s(3923)
s(4605) =< s(4548)*s(4152)
s(4607) =< s(4548)*s(4153)
s(4609) =< s(4548)*s(4154)
s(4604) =< s(4548)*s(4155)
s(4552) =< s(4607)+s(4606)+s(4602)
s(4553) =< s(4607)+s(4606)+s(4602)
s(4552) =< s(4609)+s(4608)+s(4603)
s(4553) =< s(4609)+s(4608)+s(4603)
s(4550) =< s(4609)+s(4608)+s(4603)
s(4550) =< s(4607)+s(4606)+s(4602)
s(4549) =< s(4605)+s(4604)+s(4581)
s(4550) =< s(4605)+s(4604)+s(4581)
s(4553) =< s(4550)*s(4151)
s(4554) =< s(4549)*s(4151)
s(4552) =< s(4549)*s(4137)
s(4587) =< s(4603)
s(4584) =< s(4602)
s(4599) =< s(4598)
s(4587) =< s(4601)
s(4584) =< s(4600)
s(4555) =< s(4599)
s(4556) =< s(4599)
s(4557) =< s(4599)
s(4555) =< s(4598)
s(4556) =< s(4598)
s(4557) =< s(4598)
s(4594) =< s(4555)*s(4169)
s(4596) =< s(4555)*s(4167)
s(4558) =< s(4555)*s(3923)
s(4593) =< s(4555)*s(4152)
s(4595) =< s(4555)*s(4173)
s(4597) =< s(4555)*s(4174)
s(4592) =< s(4555)*s(4155)
s(4559) =< s(4595)+s(4594)+s(4584)
s(4560) =< s(4595)+s(4594)+s(4584)
s(4559) =< s(4597)+s(4596)+s(4587)
s(4560) =< s(4597)+s(4596)+s(4587)
s(4557) =< s(4597)+s(4596)+s(4587)
s(4557) =< s(4595)+s(4594)+s(4584)
s(4556) =< s(4593)+s(4592)+s(4581)
s(4557) =< s(4593)+s(4592)+s(4581)
s(4560) =< s(4557)*s(4151)
s(4561) =< s(4556)*s(4151)
s(4559) =< s(4556)*s(4137)
s(4185) =< s(4102)
s(4186) =< s(4103)
s(4591) =< s(4590)
s(4185) =< s(4104)
s(4186) =< s(4105)
s(4562) =< s(4591)
s(4563) =< s(4591)
s(4564) =< s(4591)
s(4562) =< s(4590)
s(4563) =< s(4590)
s(4564) =< s(4590)
s(4190) =< s(4186)+1
s(4191) =< s(4185)+1
s(4585) =< s(4562)*s(4186)
s(4588) =< s(4562)*s(4185)
s(4565) =< s(4562)*aux(454)
s(4583) =< s(4562)*s(4117)
s(4586) =< s(4562)*s(4190)
s(4589) =< s(4562)*s(4191)
s(4582) =< s(4562)*s(4120)
s(4566) =< s(4586)+s(4585)+s(4584)
s(4567) =< s(4586)+s(4585)+s(4584)
s(4566) =< s(4589)+s(4588)+s(4587)
s(4567) =< s(4589)+s(4588)+s(4587)
s(4564) =< s(4589)+s(4588)+s(4587)
s(4564) =< s(4586)+s(4585)+s(4584)
s(4563) =< s(4583)+s(4582)+s(4581)
s(4564) =< s(4583)+s(4582)+s(4581)
s(4567) =< s(4564)*s(3923)
s(4568) =< s(4563)*s(3923)
s(4566) =< s(4563)*s(4137)
s(4518) =< s(4524)
s(4523) =< s(4524)
s(4511) =< s(4523)
s(4512) =< s(4518)
s(4512) =< s(4523)
s(4519) =< s(4512)*aux(454)
s(4536) =< s(4512)*s(3923)
s(4527) =< s(4536)
s(4528) =< s(4519)
s(4515) =< s(4511)*aux(454)
s(4516) =< s(4518)
s(4532) =< s(4516)*aux(454)
s(4520) =< s(4512)*s(3916)
s(4521) =< s(4512)*s(3923)
s(4513) =< s(4519)
s(4513) =< s(4521)
s(4514) =< s(4520)
s(4514) =< s(4519)
s(4517) =< s(4516)*s(3916)

  with precondition: [H=1,B>=1,D>=3,E>=2,F>=1,A>=E,C+1>=E,G+1>=E,D+2*B>=2*F+1,D+2*B+2*E>=2*F+7] 

* Chain [multiple(269,[[multiple([263,264,265,266,267,268],[[270]])],[270]])]: 1*aux(493)+519*it(263)+17*it([270])+32*s(3892)+6*s(3896)+128*s(4511)+180*s(4512)+78*s(4513)+26*s(4514)+24*s(4515)+64*s(4516)+6*s(4517)+234*s(4527)+78*s(4528)+6*s(4532)+140*s(4540)+66*s(4541)+33*s(4542)+22*s(4543)+30*s(4544)+18*s(4545)+18*s(4546)+30*s(4547)+44*s(4548)+22*s(4549)+22*s(4550)+20*s(4551)+18*s(4552)+18*s(4553)+20*s(4554)+44*s(4555)+22*s(4556)+22*s(4557)+20*s(4558)+18*s(4559)+18*s(4560)+20*s(4561)+44*s(4562)+22*s(4563)+22*s(4564)+20*s(4565)+18*s(4566)+18*s(4567)+20*s(4568)+18*s(4569)+608*s(4570)+72*s(4571)+312*s(4573)+104*s(4574)+44*s(4625)+22*s(4626)+22*s(4627)+20*s(4628)+18*s(4629)+18*s(4630)+20*s(4631)+44*s(4632)+22*s(4633)+22*s(4634)+20*s(4635)+18*s(4636)+18*s(4637)+20*s(4638)+44*s(4639)+22*s(4640)+22*s(4641)+20*s(4642)+18*s(4643)+18*s(4644)+20*s(4645)+144*s(4694)+18*s(4695)+11*s(4703)+9*s(4705)+9*s(4706)+32*s(4725)+6*s(4726)+34
  Such that:aux(491) =< A
s(4104) =< A+B+D/4
s(4105) =< A+3*B+3/4*D
s(3893) =< B
s(4104) =< B+C+D/4
s(3916) =< B+D/4
s(4102) =< 2*B+D/4
s(4105) =< 3*B+C+3/4*D
s(4103) =< 4*B+3/4*D
s(3893) =< C
aux(490) =< D/4
it([270]) =< D/4+1/4
it(263) =< aux(490)
aux(483) =< aux(491)*2
aux(447) =< aux(491)
aux(449) =< s(3893)+1
aux(454) =< s(3916)
aux(456) =< s(4103)
aux(455) =< s(4102)
aux(448) =< s(3893)
s(4131) =< s(4105)
s(4106) =< s(3916)+1/2
s(4132) =< s(4104)
s(4699) =< aux(490)*2
aux(475) =< it(263)*aux(483)
s(4727) =< it([270])*aux(447)
s(4622) =< it(263)*aux(449)
s(4611) =< it(263)*aux(454)
s(4524) =< it(263)*aux(447)
s(4614) =< it(263)*aux(456)
s(4617) =< it(263)*aux(455)
s(4621) =< it(263)*aux(449)
s(4621) =< it(263)*aux(447)
s(4518) =< it(263)*aux(449)
s(4523) =< it(263)*aux(448)
s(4727) =< aux(475)+aux(475)+aux(475)+aux(475)+aux(475)+aux(475)+aux(491)
s(4725) =< s(4727)
s(4726) =< s(4725)*s(3893)
s(4580) =< s(4524)
s(4580) =< s(4622)
s(4694) =< s(4699)
s(4541) =< s(4611)
s(4542) =< s(4611)
s(4703) =< s(4611)
s(4541) =< s(4580)
s(4542) =< s(4580)
s(4703) =< s(4580)
s(3923) =< aux(454)
s(4117) =< aux(454)-1
s(4153) =< aux(456)+1
s(4154) =< aux(455)+1
s(4120) =< aux(454)-2
s(4716) =< s(4541)*aux(456)
s(4719) =< s(4541)*aux(455)
s(4544) =< s(4541)*aux(454)
s(4613) =< s(4541)*s(4117)
s(4717) =< s(4541)*s(4153)
s(4720) =< s(4541)*s(4154)
s(4612) =< s(4541)*s(4120)
s(4705) =< s(4717)+s(4716)+s(4614)
s(4706) =< s(4717)+s(4716)+s(4614)
s(4705) =< s(4720)+s(4719)+s(4617)
s(4706) =< s(4720)+s(4719)+s(4617)
s(4703) =< s(4720)+s(4719)+s(4617)
s(4703) =< s(4717)+s(4716)+s(4614)
s(4542) =< s(4613)+s(4612)+s(4611)
s(4703) =< s(4613)+s(4612)+s(4611)
s(4706) =< s(4703)*s(3923)
s(4547) =< s(4542)*s(3923)
s(4705) =< s(4542)*s(4106)
s(4570) =< s(4580)
s(4571) =< s(4570)*aux(454)
s(4695) =< s(4694)*aux(454)
s(4540) =< s(4621)
s(4569) =< s(4540)*aux(454)
s(4336) =< aux(447)
s(4336) =< aux(449)
s(4339) =< s(4131)
s(4340) =< s(4132)
s(4341) =< s(4336)
s(4342) =< aux(456)
s(4343) =< aux(455)
s(4137) =< aux(454)+1
s(4669) =< s(4570)*s(4336)
s(4670) =< s(4570)*aux(454)
s(4578) =< s(4570)*s(3923)
s(4679) =< s(4570)*s(4339)
s(4680) =< s(4570)*s(4340)
s(4677) =< s(4570)*s(4341)
s(4681) =< s(4570)*s(4342)
s(4682) =< s(4570)*s(4343)
s(4678) =< s(4578)
s(4625) =< s(4578)
s(4626) =< s(4578)
s(4627) =< s(4578)
s(4625) =< s(4677)
s(4626) =< s(4677)
s(4627) =< s(4677)
s(4151) =< s(3923)
s(4152) =< s(3923)-1
s(4361) =< s(4342)+1
s(4362) =< s(4343)+1
s(4155) =< s(3923)-2
s(4685) =< s(4625)*s(4342)
s(4687) =< s(4625)*s(4343)
s(4628) =< s(4625)*s(3923)
s(4684) =< s(4625)*s(4152)
s(4686) =< s(4625)*s(4361)
s(4688) =< s(4625)*s(4362)
s(4683) =< s(4625)*s(4155)
s(4629) =< s(4686)+s(4685)+s(4681)
s(4630) =< s(4686)+s(4685)+s(4681)
s(4629) =< s(4688)+s(4687)+s(4682)
s(4630) =< s(4688)+s(4687)+s(4682)
s(4627) =< s(4688)+s(4687)+s(4682)
s(4627) =< s(4686)+s(4685)+s(4681)
s(4626) =< s(4684)+s(4683)+s(4578)
s(4627) =< s(4684)+s(4683)+s(4578)
s(4630) =< s(4627)*s(4151)
s(4631) =< s(4626)*s(4151)
s(4629) =< s(4626)*s(4137)
s(4666) =< s(4682)
s(4375) =< s(4343)
s(4663) =< s(4681)
s(4377) =< s(4342)
s(4678) =< s(4677)
s(4666) =< s(4680)
s(4375) =< s(4340)
s(4663) =< s(4679)
s(4377) =< s(4339)
s(4632) =< s(4678)
s(4633) =< s(4678)
s(4634) =< s(4678)
s(4632) =< s(4677)
s(4633) =< s(4677)
s(4634) =< s(4677)
s(4381) =< s(4377)+1
s(4382) =< s(4375)+1
s(4673) =< s(4632)*s(4377)
s(4675) =< s(4632)*s(4375)
s(4635) =< s(4632)*s(3923)
s(4672) =< s(4632)*s(4152)
s(4674) =< s(4632)*s(4381)
s(4676) =< s(4632)*s(4382)
s(4671) =< s(4632)*s(4155)
s(4636) =< s(4674)+s(4673)+s(4663)
s(4637) =< s(4674)+s(4673)+s(4663)
s(4636) =< s(4676)+s(4675)+s(4666)
s(4637) =< s(4676)+s(4675)+s(4666)
s(4634) =< s(4676)+s(4675)+s(4666)
s(4634) =< s(4674)+s(4673)+s(4663)
s(4633) =< s(4672)+s(4671)+s(4578)
s(4634) =< s(4672)+s(4671)+s(4578)
s(4637) =< s(4634)*s(4151)
s(4638) =< s(4633)*s(4151)
s(4636) =< s(4633)*s(4137)
s(4167) =< aux(455)
s(4169) =< aux(456)
s(4670) =< s(4669)
s(4167) =< s(4132)
s(4169) =< s(4131)
s(4639) =< s(4670)
s(4640) =< s(4670)
s(4641) =< s(4670)
s(4639) =< s(4669)
s(4640) =< s(4669)
s(4641) =< s(4669)
s(4173) =< s(4169)+1
s(4174) =< s(4167)+1
s(4664) =< s(4639)*s(4169)
s(4667) =< s(4639)*s(4167)
s(4642) =< s(4639)*aux(454)
s(4662) =< s(4639)*s(4117)
s(4665) =< s(4639)*s(4173)
s(4668) =< s(4639)*s(4174)
s(4661) =< s(4639)*s(4120)
s(4643) =< s(4665)+s(4664)+s(4663)
s(4644) =< s(4665)+s(4664)+s(4663)
s(4643) =< s(4668)+s(4667)+s(4666)
s(4644) =< s(4668)+s(4667)+s(4666)
s(4641) =< s(4668)+s(4667)+s(4666)
s(4641) =< s(4665)+s(4664)+s(4663)
s(4640) =< s(4662)+s(4661)+s(4578)
s(4641) =< s(4662)+s(4661)+s(4578)
s(4644) =< s(4641)*s(3923)
s(4645) =< s(4640)*s(3923)
s(4643) =< s(4640)*s(4137)
s(4576) =< s(4570)*aux(454)
s(4573) =< s(4578)
s(4574) =< s(4576)
s(4111) =< aux(491)
s(4111) =< aux(449)
s(4543) =< s(4611)
s(4543) =< s(4580)
s(4118) =< s(4103)+1
s(4119) =< s(4102)+1
s(4615) =< s(4541)*s(4103)
s(4618) =< s(4541)*s(4102)
s(4616) =< s(4541)*s(4118)
s(4619) =< s(4541)*s(4119)
s(4545) =< s(4616)+s(4615)+s(4614)
s(4546) =< s(4616)+s(4615)+s(4614)
s(4545) =< s(4619)+s(4618)+s(4617)
s(4546) =< s(4619)+s(4618)+s(4617)
s(4543) =< s(4619)+s(4618)+s(4617)
s(4543) =< s(4616)+s(4615)+s(4614)
s(4543) =< s(4613)+s(4612)+s(4611)
s(4546) =< s(4543)*s(3923)
s(4545) =< s(4542)*s(4106)
s(4133) =< s(4111)
s(4590) =< s(4540)*s(4111)
s(4591) =< s(4540)*aux(454)
s(4581) =< s(4540)*s(3923)
s(4600) =< s(4540)*s(4131)
s(4601) =< s(4540)*s(4132)
s(4598) =< s(4540)*s(4133)
s(4602) =< s(4540)*aux(456)
s(4603) =< s(4540)*aux(455)
s(4599) =< s(4581)
s(4548) =< s(4581)
s(4549) =< s(4581)
s(4550) =< s(4581)
s(4548) =< s(4598)
s(4549) =< s(4598)
s(4550) =< s(4598)
s(4606) =< s(4548)*aux(456)
s(4608) =< s(4548)*aux(455)
s(4551) =< s(4548)*s(3923)
s(4605) =< s(4548)*s(4152)
s(4607) =< s(4548)*s(4153)
s(4609) =< s(4548)*s(4154)
s(4604) =< s(4548)*s(4155)
s(4552) =< s(4607)+s(4606)+s(4602)
s(4553) =< s(4607)+s(4606)+s(4602)
s(4552) =< s(4609)+s(4608)+s(4603)
s(4553) =< s(4609)+s(4608)+s(4603)
s(4550) =< s(4609)+s(4608)+s(4603)
s(4550) =< s(4607)+s(4606)+s(4602)
s(4549) =< s(4605)+s(4604)+s(4581)
s(4550) =< s(4605)+s(4604)+s(4581)
s(4553) =< s(4550)*s(4151)
s(4554) =< s(4549)*s(4151)
s(4552) =< s(4549)*s(4137)
s(4587) =< s(4603)
s(4584) =< s(4602)
s(4599) =< s(4598)
s(4587) =< s(4601)
s(4584) =< s(4600)
s(4555) =< s(4599)
s(4556) =< s(4599)
s(4557) =< s(4599)
s(4555) =< s(4598)
s(4556) =< s(4598)
s(4557) =< s(4598)
s(4594) =< s(4555)*s(4169)
s(4596) =< s(4555)*s(4167)
s(4558) =< s(4555)*s(3923)
s(4593) =< s(4555)*s(4152)
s(4595) =< s(4555)*s(4173)
s(4597) =< s(4555)*s(4174)
s(4592) =< s(4555)*s(4155)
s(4559) =< s(4595)+s(4594)+s(4584)
s(4560) =< s(4595)+s(4594)+s(4584)
s(4559) =< s(4597)+s(4596)+s(4587)
s(4560) =< s(4597)+s(4596)+s(4587)
s(4557) =< s(4597)+s(4596)+s(4587)
s(4557) =< s(4595)+s(4594)+s(4584)
s(4556) =< s(4593)+s(4592)+s(4581)
s(4557) =< s(4593)+s(4592)+s(4581)
s(4560) =< s(4557)*s(4151)
s(4561) =< s(4556)*s(4151)
s(4559) =< s(4556)*s(4137)
s(4185) =< s(4102)
s(4186) =< s(4103)
s(4591) =< s(4590)
s(4185) =< s(4104)
s(4186) =< s(4105)
s(4562) =< s(4591)
s(4563) =< s(4591)
s(4564) =< s(4591)
s(4562) =< s(4590)
s(4563) =< s(4590)
s(4564) =< s(4590)
s(4190) =< s(4186)+1
s(4191) =< s(4185)+1
s(4585) =< s(4562)*s(4186)
s(4588) =< s(4562)*s(4185)
s(4565) =< s(4562)*aux(454)
s(4583) =< s(4562)*s(4117)
s(4586) =< s(4562)*s(4190)
s(4589) =< s(4562)*s(4191)
s(4582) =< s(4562)*s(4120)
s(4566) =< s(4586)+s(4585)+s(4584)
s(4567) =< s(4586)+s(4585)+s(4584)
s(4566) =< s(4589)+s(4588)+s(4587)
s(4567) =< s(4589)+s(4588)+s(4587)
s(4564) =< s(4589)+s(4588)+s(4587)
s(4564) =< s(4586)+s(4585)+s(4584)
s(4563) =< s(4583)+s(4582)+s(4581)
s(4564) =< s(4583)+s(4582)+s(4581)
s(4567) =< s(4564)*s(3923)
s(4568) =< s(4563)*s(3923)
s(4566) =< s(4563)*s(4137)
s(4518) =< s(4524)
s(4523) =< s(4524)
s(4511) =< s(4523)
s(4512) =< s(4518)
s(4512) =< s(4523)
s(4519) =< s(4512)*aux(454)
s(4521) =< s(4512)*s(3923)
s(4527) =< s(4521)
s(4528) =< s(4519)
s(4515) =< s(4511)*aux(454)
s(4516) =< s(4518)
s(4532) =< s(4516)*aux(454)
s(4520) =< s(4512)*s(3916)
s(4513) =< s(4519)
s(4513) =< s(4521)
s(4514) =< s(4520)
s(4514) =< s(4519)
s(4517) =< s(4516)*s(3916)
s(3892) =< aux(491)
s(3896) =< s(3892)*s(3893)
it(263) =< aux(490)
aux(483) =< aux(491)*2
aux(447) =< aux(491)
aux(449) =< s(3893)+1
aux(454) =< s(3916)
aux(456) =< s(4103)
aux(455) =< s(4102)
aux(448) =< s(3893)
s(4131) =< s(4105)
s(4106) =< s(3916)+1/2
s(4132) =< s(4104)
s(4699) =< aux(490)*2
aux(475) =< it(263)*aux(483)
s(4727) =< it([270])*aux(447)
s(4622) =< it(263)*aux(449)
s(4611) =< it(263)*aux(454)
s(4524) =< it(263)*aux(447)
s(4614) =< it(263)*aux(456)
s(4617) =< it(263)*aux(455)
s(4621) =< it(263)*aux(449)
s(4621) =< it(263)*aux(447)
s(4518) =< it(263)*aux(449)
s(4523) =< it(263)*aux(448)
s(4727) =< aux(475)+aux(475)+aux(475)+aux(475)+aux(475)+aux(475)+aux(491)
s(4725) =< s(4727)
s(4726) =< s(4725)*s(3893)
s(4580) =< s(4524)
s(4580) =< s(4622)
s(4694) =< s(4699)
s(4541) =< s(4611)
s(4542) =< s(4611)
s(4703) =< s(4611)
s(4541) =< s(4580)
s(4542) =< s(4580)
s(4703) =< s(4580)
s(3923) =< aux(454)
s(4117) =< aux(454)-1
s(4153) =< aux(456)+1
s(4154) =< aux(455)+1
s(4120) =< aux(454)-2
s(4716) =< s(4541)*aux(456)
s(4719) =< s(4541)*aux(455)
s(4544) =< s(4541)*aux(454)
s(4613) =< s(4541)*s(4117)
s(4717) =< s(4541)*s(4153)
s(4720) =< s(4541)*s(4154)
s(4612) =< s(4541)*s(4120)
s(4705) =< s(4717)+s(4716)+s(4614)
s(4706) =< s(4717)+s(4716)+s(4614)
s(4705) =< s(4720)+s(4719)+s(4617)
s(4706) =< s(4720)+s(4719)+s(4617)
s(4703) =< s(4720)+s(4719)+s(4617)
s(4703) =< s(4717)+s(4716)+s(4614)
s(4542) =< s(4613)+s(4612)+s(4611)
s(4703) =< s(4613)+s(4612)+s(4611)
s(4706) =< s(4703)*s(3923)
s(4547) =< s(4542)*s(3923)
s(4705) =< s(4542)*s(4106)
s(4570) =< s(4580)
s(4571) =< s(4570)*aux(454)
s(4695) =< s(4694)*aux(454)
s(4540) =< s(4621)
s(4569) =< s(4540)*aux(454)
s(4336) =< aux(447)
s(4336) =< aux(449)
s(4339) =< s(4131)
s(4340) =< s(4132)
s(4341) =< s(4336)
s(4342) =< aux(456)
s(4343) =< aux(455)
s(4137) =< aux(454)+1
s(4669) =< s(4570)*s(4336)
s(4670) =< s(4570)*aux(454)
s(4578) =< s(4570)*s(3923)
s(4679) =< s(4570)*s(4339)
s(4680) =< s(4570)*s(4340)
s(4677) =< s(4570)*s(4341)
s(4681) =< s(4570)*s(4342)
s(4682) =< s(4570)*s(4343)
s(4678) =< s(4578)
s(4625) =< s(4578)
s(4626) =< s(4578)
s(4627) =< s(4578)
s(4625) =< s(4677)
s(4626) =< s(4677)
s(4627) =< s(4677)
s(4151) =< s(3923)
s(4152) =< s(3923)-1
s(4361) =< s(4342)+1
s(4362) =< s(4343)+1
s(4155) =< s(3923)-2
s(4685) =< s(4625)*s(4342)
s(4687) =< s(4625)*s(4343)
s(4628) =< s(4625)*s(3923)
s(4684) =< s(4625)*s(4152)
s(4686) =< s(4625)*s(4361)
s(4688) =< s(4625)*s(4362)
s(4683) =< s(4625)*s(4155)
s(4629) =< s(4686)+s(4685)+s(4681)
s(4630) =< s(4686)+s(4685)+s(4681)
s(4629) =< s(4688)+s(4687)+s(4682)
s(4630) =< s(4688)+s(4687)+s(4682)
s(4627) =< s(4688)+s(4687)+s(4682)
s(4627) =< s(4686)+s(4685)+s(4681)
s(4626) =< s(4684)+s(4683)+s(4578)
s(4627) =< s(4684)+s(4683)+s(4578)
s(4630) =< s(4627)*s(4151)
s(4631) =< s(4626)*s(4151)
s(4629) =< s(4626)*s(4137)
s(4666) =< s(4682)
s(4375) =< s(4343)
s(4663) =< s(4681)
s(4377) =< s(4342)
s(4678) =< s(4677)
s(4666) =< s(4680)
s(4375) =< s(4340)
s(4663) =< s(4679)
s(4377) =< s(4339)
s(4632) =< s(4678)
s(4633) =< s(4678)
s(4634) =< s(4678)
s(4632) =< s(4677)
s(4633) =< s(4677)
s(4634) =< s(4677)
s(4381) =< s(4377)+1
s(4382) =< s(4375)+1
s(4673) =< s(4632)*s(4377)
s(4675) =< s(4632)*s(4375)
s(4635) =< s(4632)*s(3923)
s(4672) =< s(4632)*s(4152)
s(4674) =< s(4632)*s(4381)
s(4676) =< s(4632)*s(4382)
s(4671) =< s(4632)*s(4155)
s(4636) =< s(4674)+s(4673)+s(4663)
s(4637) =< s(4674)+s(4673)+s(4663)
s(4636) =< s(4676)+s(4675)+s(4666)
s(4637) =< s(4676)+s(4675)+s(4666)
s(4634) =< s(4676)+s(4675)+s(4666)
s(4634) =< s(4674)+s(4673)+s(4663)
s(4633) =< s(4672)+s(4671)+s(4578)
s(4634) =< s(4672)+s(4671)+s(4578)
s(4637) =< s(4634)*s(4151)
s(4638) =< s(4633)*s(4151)
s(4636) =< s(4633)*s(4137)
s(4167) =< aux(455)
s(4169) =< aux(456)
s(4670) =< s(4669)
s(4167) =< s(4132)
s(4169) =< s(4131)
s(4639) =< s(4670)
s(4640) =< s(4670)
s(4641) =< s(4670)
s(4639) =< s(4669)
s(4640) =< s(4669)
s(4641) =< s(4669)
s(4173) =< s(4169)+1
s(4174) =< s(4167)+1
s(4664) =< s(4639)*s(4169)
s(4667) =< s(4639)*s(4167)
s(4642) =< s(4639)*aux(454)
s(4662) =< s(4639)*s(4117)
s(4665) =< s(4639)*s(4173)
s(4668) =< s(4639)*s(4174)
s(4661) =< s(4639)*s(4120)
s(4643) =< s(4665)+s(4664)+s(4663)
s(4644) =< s(4665)+s(4664)+s(4663)
s(4643) =< s(4668)+s(4667)+s(4666)
s(4644) =< s(4668)+s(4667)+s(4666)
s(4641) =< s(4668)+s(4667)+s(4666)
s(4641) =< s(4665)+s(4664)+s(4663)
s(4640) =< s(4662)+s(4661)+s(4578)
s(4641) =< s(4662)+s(4661)+s(4578)
s(4644) =< s(4641)*s(3923)
s(4645) =< s(4640)*s(3923)
s(4643) =< s(4640)*s(4137)
s(4576) =< s(4570)*aux(454)
s(4573) =< s(4578)
s(4574) =< s(4576)
s(4111) =< aux(491)
s(4111) =< aux(449)
s(4543) =< s(4611)
s(4543) =< s(4580)
s(4118) =< s(4103)+1
s(4119) =< s(4102)+1
s(4615) =< s(4541)*s(4103)
s(4618) =< s(4541)*s(4102)
s(4616) =< s(4541)*s(4118)
s(4619) =< s(4541)*s(4119)
s(4545) =< s(4616)+s(4615)+s(4614)
s(4546) =< s(4616)+s(4615)+s(4614)
s(4545) =< s(4619)+s(4618)+s(4617)
s(4546) =< s(4619)+s(4618)+s(4617)
s(4543) =< s(4619)+s(4618)+s(4617)
s(4543) =< s(4616)+s(4615)+s(4614)
s(4543) =< s(4613)+s(4612)+s(4611)
s(4546) =< s(4543)*s(3923)
s(4545) =< s(4542)*s(4106)
s(4133) =< s(4111)
s(4590) =< s(4540)*s(4111)
s(4591) =< s(4540)*aux(454)
s(4581) =< s(4540)*s(3923)
s(4600) =< s(4540)*s(4131)
s(4601) =< s(4540)*s(4132)
s(4598) =< s(4540)*s(4133)
s(4602) =< s(4540)*aux(456)
s(4603) =< s(4540)*aux(455)
s(4599) =< s(4581)
s(4548) =< s(4581)
s(4549) =< s(4581)
s(4550) =< s(4581)
s(4548) =< s(4598)
s(4549) =< s(4598)
s(4550) =< s(4598)
s(4606) =< s(4548)*aux(456)
s(4608) =< s(4548)*aux(455)
s(4551) =< s(4548)*s(3923)
s(4605) =< s(4548)*s(4152)
s(4607) =< s(4548)*s(4153)
s(4609) =< s(4548)*s(4154)
s(4604) =< s(4548)*s(4155)
s(4552) =< s(4607)+s(4606)+s(4602)
s(4553) =< s(4607)+s(4606)+s(4602)
s(4552) =< s(4609)+s(4608)+s(4603)
s(4553) =< s(4609)+s(4608)+s(4603)
s(4550) =< s(4609)+s(4608)+s(4603)
s(4550) =< s(4607)+s(4606)+s(4602)
s(4549) =< s(4605)+s(4604)+s(4581)
s(4550) =< s(4605)+s(4604)+s(4581)
s(4553) =< s(4550)*s(4151)
s(4554) =< s(4549)*s(4151)
s(4552) =< s(4549)*s(4137)
s(4587) =< s(4603)
s(4584) =< s(4602)
s(4599) =< s(4598)
s(4587) =< s(4601)
s(4584) =< s(4600)
s(4555) =< s(4599)
s(4556) =< s(4599)
s(4557) =< s(4599)
s(4555) =< s(4598)
s(4556) =< s(4598)
s(4557) =< s(4598)
s(4594) =< s(4555)*s(4169)
s(4596) =< s(4555)*s(4167)
s(4558) =< s(4555)*s(3923)
s(4593) =< s(4555)*s(4152)
s(4595) =< s(4555)*s(4173)
s(4597) =< s(4555)*s(4174)
s(4592) =< s(4555)*s(4155)
s(4559) =< s(4595)+s(4594)+s(4584)
s(4560) =< s(4595)+s(4594)+s(4584)
s(4559) =< s(4597)+s(4596)+s(4587)
s(4560) =< s(4597)+s(4596)+s(4587)
s(4557) =< s(4597)+s(4596)+s(4587)
s(4557) =< s(4595)+s(4594)+s(4584)
s(4556) =< s(4593)+s(4592)+s(4581)
s(4557) =< s(4593)+s(4592)+s(4581)
s(4560) =< s(4557)*s(4151)
s(4561) =< s(4556)*s(4151)
s(4559) =< s(4556)*s(4137)
s(4185) =< s(4102)
s(4186) =< s(4103)
s(4591) =< s(4590)
s(4185) =< s(4104)
s(4186) =< s(4105)
s(4562) =< s(4591)
s(4563) =< s(4591)
s(4564) =< s(4591)
s(4562) =< s(4590)
s(4563) =< s(4590)
s(4564) =< s(4590)
s(4190) =< s(4186)+1
s(4191) =< s(4185)+1
s(4585) =< s(4562)*s(4186)
s(4588) =< s(4562)*s(4185)
s(4565) =< s(4562)*aux(454)
s(4583) =< s(4562)*s(4117)
s(4586) =< s(4562)*s(4190)
s(4589) =< s(4562)*s(4191)
s(4582) =< s(4562)*s(4120)
s(4566) =< s(4586)+s(4585)+s(4584)
s(4567) =< s(4586)+s(4585)+s(4584)
s(4566) =< s(4589)+s(4588)+s(4587)
s(4567) =< s(4589)+s(4588)+s(4587)
s(4564) =< s(4589)+s(4588)+s(4587)
s(4564) =< s(4586)+s(4585)+s(4584)
s(4563) =< s(4583)+s(4582)+s(4581)
s(4564) =< s(4583)+s(4582)+s(4581)
s(4567) =< s(4564)*s(3923)
s(4568) =< s(4563)*s(3923)
s(4566) =< s(4563)*s(4137)
s(4518) =< s(4524)
s(4523) =< s(4524)
s(4511) =< s(4523)
s(4512) =< s(4518)
s(4512) =< s(4523)
s(4519) =< s(4512)*aux(454)
s(4521) =< s(4512)*s(3923)
s(4527) =< s(4521)
s(4528) =< s(4519)
s(4515) =< s(4511)*aux(454)
s(4516) =< s(4518)
s(4532) =< s(4516)*aux(454)
s(4520) =< s(4512)*s(3916)
s(4513) =< s(4519)
s(4513) =< s(4521)
s(4514) =< s(4520)
s(4514) =< s(4519)
s(4517) =< s(4516)*s(3916)
s(3892) =< aux(491)
s(3896) =< s(3892)*s(3893)

Unbounded itvars
aux(493) :  aux(493)

  with precondition: [E=1,F=0,H=1,A>=2,B>=1,C>=1,D>=3,G>=0] 


#### Simplifying cost structure of CE 359 

#### Computing cost of phase [273] 

#### Simplifying cost structure of CE 360 

#### Cost of loops [273] 

 * loop 273:get_elemL(A,B,C,D,E,F) -> [get_elemL(A',B',C',D',E',F')] 
8
##### Pending set get_elemL(A,B,C,D,E,F)
* Psum in Loop 273: [it(273)=<1]

###### Computing sum for it(273)=<1  in Loop 273 
   - Applying inductive sum strategy 
     - head Candidate: D 
     - head Candidate: A-1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D 
     - tail Candidate: A-1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(273)=<D,it(273)=<A-1,it(273)=<A-1,it(273)=<D,it(273)=<D-D',it(273)=<A-A',it(273)=<A-A',it(273)=<D-D'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [273] 

#### Simplifying cost structure of phase [273] 

#### Cost of phase [273]:get_elemL(A,B,C,D,E,F) -> [get_elemL(A',B',C',D',E',F')] 
8*it(273)+0
  Such that:it(273) =< A
it(273) =< A-A'
it(273) =< D
it(273) =< D-D'

#### Simplifying cost structure of chain [[273],274] 

#### Cost of chains of get_elemL(A,B,C,D,E,F):
* Chain [[273],274]: 8*it(273)+5
  Such that:it(273) =< D

  with precondition: [D>=1,E>=1,F>=0,A>=D+2,B>=E,C>=F] 

* Chain [274]: 5
  with precondition: [D=0,A>=2,E>=1,F>=0,B>=E,C>=F] 


#### Simplifying cost structure of CE 361 

#### Computing cost of phase [275] 

#### Simplifying cost structure of CE 362 

#### Cost of loops [275] 

 * loop 275:get_elem(A,B,C,D) -> [get_elem(A',B',C',D')] 
8
##### Pending set get_elem(A,B,C,D)
* Psum in Loop 275: [it(275)=<1]

###### Computing sum for it(275)=<1  in Loop 275 
   - Applying inductive sum strategy 
     - head Candidate: C 
     - head Candidate: A-1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C 
     - tail Candidate: A-1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(275)=<C,it(275)=<A-1,it(275)=<A-1,it(275)=<C,it(275)=<C-C',it(275)=<A-A',it(275)=<A-A',it(275)=<C-C'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [275] 

#### Simplifying cost structure of phase [275] 

#### Cost of phase [275]:get_elem(A,B,C,D) -> [get_elem(A',B',C',D')] 
8*it(275)+0
  Such that:it(275) =< A
it(275) =< A-A'
it(275) =< C
it(275) =< C-C'

#### Simplifying cost structure of chain [[275],276] 

#### Cost of chains of get_elem(A,B,C,D):
* Chain [[275],276]: 8*it(275)+5
  Such that:it(275) =< C

  with precondition: [C>=1,D>=0,A>=C+2,B>=D] 

* Chain [276]: 5
  with precondition: [C=0,A>=2,D>=0,B>=D] 


#### Simplifying cost structure of CE 363 
 * Renamed intermediate variables: 
[ (eq(364,2),it(275))>>s(4887)]

#### Simplifying cost structure of CE 364 
 * Renamed intermediate variables: 
[ (eq(365,1),it(273))>>s(4888)]

#### Simplifying cost structure of CE 365 
 * Renamed intermediate variables: 
[ (eq(366,1),it(273))>>s(4889)]
 * Renamed intermediate variables: 
[ (eq(366,2),it(275))>>s(4890)]

#### Simplifying cost structure of CE 366 

#### Cost of chains of case_10(A,B,C,D,E,F,G):
* Chain [280]: 13
  with precondition: [D=1,E=0,F=0,A>=2,B>=2,G>=0,C>=G] 

* Chain [279]: 8*s(4887)+13
  Such that:s(4887) =< F

  with precondition: [D=1,E=0,A>=2,F>=1,G>=0,B>=F+2,C>=G] 

* Chain [278]: 8*s(4888)+13
  Such that:s(4888) =< E

  with precondition: [D=1,F=0,B>=2,E>=1,G>=0,A>=E+2,C>=G] 

* Chain [277]: 8*s(4889)+8*s(4890)+13
  Such that:s(4889) =< E
s(4890) =< F

  with precondition: [D=1,E>=1,F>=1,G>=0,A>=E+2,B>=F+2,C>=G] 


#### Simplifying cost structure of CE 367 
 * Renamed intermediate variables: 
[ (eq(368,1),s(4887))>>s(4891)]

#### Simplifying cost structure of CE 368 
 * Renamed intermediate variables: 
[ (eq(369,1),s(4888))>>s(4892)]

#### Simplifying cost structure of CE 369 
 * Renamed intermediate variables: 
[ (eq(370,1),s(4889))>>s(4893), (eq(370,1),s(4890))>>s(4894)]

#### Simplifying cost structure of CE 370 

#### Cost of chains of get_elemMat(A,B,C,D,E,F,G):
* Chain [284]: 14
  with precondition: [D=1,E=0,F=0,A>=2,B>=2,G>=0,C>=G] 

* Chain [283]: 8*s(4891)+14
  Such that:s(4891) =< F

  with precondition: [D=1,E=0,A>=2,F>=1,G>=0,B>=F+2,C>=G] 

* Chain [282]: 8*s(4892)+14
  Such that:s(4892) =< E

  with precondition: [D=1,F=0,B>=2,E>=1,G>=0,A>=E+2,C>=G] 

* Chain [281]: 8*s(4893)+8*s(4894)+14
  Such that:s(4893) =< E
s(4894) =< F

  with precondition: [D=1,E>=1,F>=1,G>=0,A>=E+2,B>=F+2,C>=G] 


#### Simplifying cost structure of CE 373 

#### Computing cost of phase [287] 

#### Simplifying cost structure of CE 371 

#### Cost of loops [287] 

 * loop 287:prod(A,B,C,D,E) -> [prod(A',B',C',D',E')] 
9
##### Pending set prod(A,B,C,D,E)
* Psum in Loop 287: [it(287)=<1]

###### Computing sum for it(287)=<1  in Loop 287 
   - Applying inductive sum strategy 
     - head Candidate: C-1 
     - head Candidate: A-1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
     - tail Candidate: A-1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(287)=<C-1,it(287)=<A-1,it(287)=<A-1,it(287)=<C-1,it(287)=<C-C',it(287)=<A-A',it(287)=<A-A',it(287)=<C-C'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [287] 

#### Simplifying cost structure of phase [287] 

#### Cost of phase [287]:prod(A,B,C,D,E) -> [prod(A',B',C',D',E')] 
9*it(287)+0
  Such that:it(287) =< A
it(287) =< A-A'
it(287) =< C
it(287) =< C-C'

#### Simplifying cost structure of chain [[287],286] 

#### Simplifying cost structure of CE 372 

#### Found solution for phase  [287] in the cache 

#### Cost of phase [287]:prod(A,B,C,D,E) -> [prod(A',B',C',D',E')] 
9*it(287)+0
  Such that:it(287) =< A
it(287) =< A-A'
it(287) =< C
it(287) =< C-C'

#### Simplifying cost structure of chain [[287],285] 

#### Cost of chains of prod(A,B,C,D,E):
* Chain [[287],286]: 9*it(287)+3
  Such that:it(287) =< A

  with precondition: [A>=2,B>=0,D>=0,E>=0,C>=A] 

* Chain [[287],285]: 9*it(287)+6
  Such that:it(287) =< C

  with precondition: [B>=0,C>=2,D>=0,E>=0,A>=C+1] 

* Chain [286]: 3
  with precondition: [A=1,E=0,B>=0,C>=0,D>=0] 

* Chain [285]: 6
  with precondition: [C=1,E=0,A>=2,B>=0,D>=0] 


#### Simplifying cost structure of CE 374 

#### Computing cost of phase [289] 

#### Simplifying cost structure of CE 375 

#### Cost of loops [289] 

 * loop 289:prod_mat(A,B,C,D,E,F,G) -> [prod_mat(A',B',C',D',E',F',G')] 
9
##### Pending set prod_mat(A,B,C,D,E,F,G)
* Psum in Loop 289: [it(289)=<1]

###### Computing sum for it(289)=<1  in Loop 289 
   - Applying inductive sum strategy 
     - head Candidate: C-1 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(289)=<C-1,it(289)=<C-1,it(289)=<C-C',it(289)=<C-C'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [289] 

#### Simplifying cost structure of phase [289] 

#### Cost of phase [289]:prod_mat(A,B,C,D,E,F,G) -> [prod_mat(A',B',C',D',E',F',G')] 
9*it(289)+0
  Such that:it(289) =< C
it(289) =< C-C'

#### Simplifying cost structure of chain [[289],290] 

#### Computing cost of phase [288] 

#### Simplifying cost structure of CE 376 
 * Renamed intermediate variables: 
[ (eq(377,1),it(287))>>s(4895)]

#### Simplifying cost structure of CE 377 
 * Renamed intermediate variables: 
[ (eq(378,1),it(287))>>s(4896)]

#### Simplifying cost structure of CE 378 
 * Renamed intermediate variables: 
[ (it(288),s(4896))>>s(4897), (it(288),aux(494))>>s(4898), (it(288),s(4895))>>s(4899)]

#### Cost of loops [288] 

 * loop 288:prod_mat(A,B,C,D,E,F,G) -> [prod_mat(A',B',C',D',E',F',G')] 
9*s(4899)+9*s(4897)+12
  Such that:s(4897) =< D
s(4898) =< A'
s(4899) =< s(4898)
s(4897) =< s(4898)

##### Pending set prod_mat(A,B,C,D,E,F,G)
* Psum in Loop 288: [it(288)=<1,s(4901)=<D,s(4902)=<A']

###### Computing sum for it(288)=<1  in Loop 288 
   - Applying inductive sum strategy 
     - head Candidate: C-1 
     - head Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: C-1 
     - tail Candidate: C-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(288)=<C-1,it(288)=<C-1,it(288)=<C-C',it(288)=<C-C'] 

##### Pending set A
* Psum in Loop 288: [s(4901)=<D,s(4902)=<A']

###### Computing sum for s(4901)=<D  in Loop 288 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(495)=<D] 
 * Adding constraints: [s(4901)=<it(288)*aux(495)] 

##### Pending set prod_mat(A,B,C,D,E,F,G)
* Pmax/min: [aux(495)=<D]
* Psum in Loop 288: [s(4902)=<A']

###### Computing max_min for aux(495)=<D  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(495)=<D] 

##### Pending set prod_mat(A,B,C,D,E,F,G)
* Psum in Loop 288: [s(4902)=<A']

###### Computing sum for s(4902)=<A'  in Loop 288 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(496)=<A] 
 * Adding constraints: [s(4902)=<it(288)*aux(496)] 

##### Pending set prod_mat(A,B,C,D,E,F,G)
* Pmax/min: [aux(496)=<A]

###### Computing max_min for aux(496)=<A  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(496)=<A] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [288] 

#### Simplifying cost structure of phase [288] 

#### Cost of phase [288]:prod_mat(A,B,C,D,E,F,G) -> [prod_mat(A',B',C',D',E',F',G')] 
12*it(288)+9*s(4900)+9*s(4901)+0
  Such that:aux(496) =< A
it(288) =< C
it(288) =< C-C'
aux(495) =< D
s(4902) =< it(288)*aux(496)
s(4901) =< it(288)*aux(495)
s(4900) =< s(4902)
s(4901) =< s(4902)

#### Simplifying cost structure of chain [[288],290] 

#### Cost of chains of prod_mat(A,B,C,D,E,F,G):
* Chain [[289],290]: 9*it(289)+3
  Such that:it(289) =< F

  with precondition: [A=1,C=F,B>=0,C>=2,D>=1,E>=0,G>=0] 

* Chain [[288],290]: 12*it(288)+9*s(4900)+9*s(4901)+3
  Such that:aux(496) =< A
aux(495) =< D
it(288) =< F
s(4902) =< it(288)*aux(496)
s(4901) =< it(288)*aux(495)
s(4900) =< s(4902)
s(4901) =< s(4902)

  with precondition: [C=F,A>=2,B>=0,C>=2,D>=1,E>=0,G>=0] 

* Chain [290]: 3
  with precondition: [C=1,D=0,F=1,A>=0,B>=0,E>=0,G>=0] 


#### Simplifying cost structure of CE 379 

#### Computing cost of phase [291,292,293,294,295,296,297,298] 
 * Renamed intermediate variables: 
[ (eq(387,1),it(104))>>s(4903), (eq(387,1),aux(1))>>s(4904), (eq(387,1),aux(3))>>s(4905), (eq(387,1),aux(6))>>s(4906), (eq(387,1),aux(8))>>s(4907), (eq(387,1),it(101))>>s(4908), (eq(387,1),aux(2))>>s(4909), (eq(387,1),s(6))>>s(4910), (eq(387,1),s(5))>>s(4911)]

#### Simplifying cost structure of CE 387 
 * Renamed intermediate variables: 
[ (it(291),s(4903))>>s(4912), (it(291),s(4907))>>s(4913), (it(291),s(4904))>>s(4914), (it(291),s(4905))>>s(4915), (it(291),s(4906))>>s(4916), (it(291),s(4908))>>s(4917), (it(291),s(4909))>>s(4918), (it(291),s(4910))>>s(4919), (it(291),s(4911))>>s(4920)]
 * Renamed intermediate variables: 
[ (eq(386,1),aux(4))>>s(4921), (eq(386,1),aux(1))>>s(4922), (eq(386,1),aux(3))>>s(4923), (eq(386,1),aux(10))>>s(4924), (eq(386,1),it(101))>>s(4925), (eq(386,1),aux(2))>>s(4926), (eq(386,1),s(6))>>s(4927), (eq(386,1),s(5))>>s(4928)]

#### Simplifying cost structure of CE 386 
 * Joined equivalent variables [aux(497),s(4921)] into aux(497)
 * Renamed intermediate variables: 
[ (it(292),s(4924))>>s(4929), (it(292),s(4923))>>s(4930), (it(292),s(4922))>>s(4931), (it(292),aux(497))>>s(4932), (it(292),s(4925))>>s(4933), (it(292),s(4926))>>s(4934), (it(292),s(4927))>>s(4935), (it(292),s(4928))>>s(4936)]
 * Renamed intermediate variables: 
[ (eq(385,1),aux(4))>>s(4937), (eq(385,1),aux(1))>>s(4938), (eq(385,1),aux(3))>>s(4939), (eq(385,1),aux(11))>>s(4940), (eq(385,1),it(101))>>s(4941), (eq(385,1),aux(2))>>s(4942), (eq(385,1),s(6))>>s(4943), (eq(385,1),s(5))>>s(4944)]

#### Simplifying cost structure of CE 385 
 * Joined equivalent variables [aux(498),s(4937)] into aux(498)
 * Renamed intermediate variables: 
[ (it(293),s(4940))>>s(4945), (it(293),s(4939))>>s(4946), (it(293),s(4938))>>s(4947), (it(293),aux(498))>>s(4948), (it(293),s(4941))>>s(4949), (it(293),s(4942))>>s(4950), (it(293),s(4943))>>s(4951), (it(293),s(4944))>>s(4952)]

#### Simplifying cost structure of CE 382 
 * Renamed intermediate variables: 
[ (eq(384,1),aux(6))>>s(4953), (eq(384,1),aux(3))>>s(4954), (eq(384,1),aux(1))>>s(4955), (eq(384,1),aux(9))>>s(4956), (eq(384,1),it(101))>>s(4957), (eq(384,1),aux(2))>>s(4958), (eq(384,1),s(6))>>s(4959), (eq(384,1),s(5))>>s(4960)]

#### Simplifying cost structure of CE 384 
 * Renamed intermediate variables: 
[ (it(295),s(4956))>>s(4961), (it(295),s(4953))>>s(4962), (it(295),s(4954))>>s(4963), (it(295),s(4955))>>s(4964), (it(295),s(4957))>>s(4965), (it(295),s(4958))>>s(4966), (it(295),s(4959))>>s(4967), (it(295),s(4960))>>s(4968)]

#### Simplifying cost structure of CE 383 
 * Renamed intermediate variables: 
[ (eq(381,1),it(104))>>s(4969)]

#### Simplifying cost structure of CE 381 
 * Renamed intermediate variables: 
[ (it(297),s(4969))>>s(4970)]

#### Simplifying cost structure of CE 380 

#### Cost of loops [291,292,293,294,295,296,297,298] 

 * loop 291:transpose_helper(A,B,C,D,E,F,G,H,I) -> [transpose_helper(A',B',C',D',E',F',G',H',I')] 
10*s(4912)+26*s(4917)+5*s(4919)+5*s(4920)+17
  Such that:s(4912) =< -D+D'+1
s(4913) =< D
s(4914) =< E+1
s(4915) =< E+2*D'
s(4916) =< D'
s(4917) =< s(4913)
s(4917) =< s(4916)
s(4918) =< s(4914)
s(4919) =< s(4917)*s(4915)
s(4920) =< s(4917)*s(4914)
s(4919) =< s(4917)*s(4918)

 * loop 292:transpose_helper(A,B,C,D,E,F,G,H,I) -> [transpose_helper(A',B',C',D',E',F',G',H',I')] 
26*s(4933)+5*s(4935)+5*s(4936)+20
  Such that:s(4929) =< B
s(4930) =< 2*B+E
s(4930) =< 2*D+E
s(4931) =< E+1
s(4932) =< D
s(4929) =< s(4932)
s(4933) =< s(4932)
s(4933) =< s(4929)
s(4934) =< s(4931)
s(4935) =< s(4933)*s(4930)
s(4936) =< s(4933)*s(4931)
s(4935) =< s(4933)*s(4934)

 * loop 293:transpose_helper(A,B,C,D,E,F,G,H,I) -> [transpose_helper(A',B',C',D',E',F',G',H',I')] 
26*s(4949)+5*s(4951)+5*s(4952)+7
  Such that:s(4945) =< B
s(4946) =< 2*B+E
s(4946) =< 2*D+E
s(4947) =< E+1
s(4948) =< D
s(4945) =< s(4948)
s(4949) =< s(4948)
s(4949) =< s(4945)
s(4950) =< s(4947)
s(4951) =< s(4949)*s(4946)
s(4952) =< s(4949)*s(4947)
s(4951) =< s(4949)*s(4950)

 * loop 294:transpose_helper(A,B,C,D,E,F,G,H,I) -> [transpose_helper(A',B',C',D',E',F',G',H',I')] 
7
 * loop 295:transpose_helper(A,B,C,D,E,F,G,H,I) -> [transpose_helper(A',B',C',D',E',F',G',H',I')] 
26*s(4965)+5*s(4967)+5*s(4968)+17
  Such that:s(4961) =< D
s(4962) =< D+1
s(4963) =< 2*D+E+2
s(4964) =< E+1
s(4965) =< s(4961)
s(4965) =< s(4962)
s(4966) =< s(4964)
s(4967) =< s(4965)*s(4963)
s(4968) =< s(4965)*s(4964)
s(4967) =< s(4965)*s(4966)

 * loop 296:transpose_helper(A,B,C,D,E,F,G,H,I) -> [transpose_helper(A',B',C',D',E',F',G',H',I')] 
20
 * loop 297:transpose_helper(A,B,C,D,E,F,G,H,I) -> [transpose_helper(A',B',C',D',E',F',G',H',I')] 
10*s(4970)+17
  Such that:s(4970) =< D'

 * loop 298:transpose_helper(A,B,C,D,E,F,G,H,I) -> [transpose_helper(A',B',C',D',E',F',G',H',I')] 
17
##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(4915)=<2*B+E,s(4930)=<2*B+E,s(4946)=<2*B+E,s(4930)=<2*D+E,s(4946)=<2*D+E,s(4963)=<2*D+E+2,s(4914)=<E+1,s(4931)=<E+1,s(4947)=<E+1,s(4964)=<E+1]
* Psum in Loop 291: [it(291)=<1,s(4971)=< -D+D'+1,s(4976)=<D,s(4975)=<D']
* Psum in Loop 292: [it(292)=<1,s(4980)=<B,s(4981)=<D]
* Psum in Loop 293: [it(293)=<1,s(4985)=<B,s(4986)=<D]
* Psum in Loop 294: [it(294)=<1]
* Psum in Loop 295: [it(295)=<1,s(4991)=<D,s(4990)=<D+1]
* Psum in Loop 296: [it(296)=<1]
* Psum in Loop 297: [it(297)=<1,s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing max_min for s(4915)=<2*B+E  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(4915)=<A+2*B+E-1,s(4915)=<A+3*B+E-3] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(4930)=<2*B+E,s(4946)=<2*B+E,s(4930)=<2*D+E,s(4946)=<2*D+E,s(4963)=<2*D+E+2,s(4914)=<E+1,s(4931)=<E+1,s(4947)=<E+1,s(4964)=<E+1]
* Psum in Loop 291: [it(291)=<1,s(4971)=< -D+D'+1,s(4976)=<D,s(4975)=<D']
* Psum in Loop 292: [it(292)=<1,s(4980)=<B,s(4981)=<D]
* Psum in Loop 293: [it(293)=<1,s(4985)=<B,s(4986)=<D]
* Psum in Loop 294: [it(294)=<1]
* Psum in Loop 295: [it(295)=<1,s(4991)=<D,s(4990)=<D+1]
* Psum in Loop 296: [it(296)=<1]
* Psum in Loop 297: [it(297)=<1,s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing max_min for s(4930)=<2*B+E  
   - Found a solution using cacheing 
 * Adding constraints:[s(4930)=<s(4915)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(4946)=<2*B+E,s(4930)=<2*D+E,s(4946)=<2*D+E,s(4963)=<2*D+E+2,s(4914)=<E+1,s(4931)=<E+1,s(4947)=<E+1,s(4964)=<E+1]
* Psum in Loop 291: [it(291)=<1,s(4971)=< -D+D'+1,s(4976)=<D,s(4975)=<D']
* Psum in Loop 292: [it(292)=<1,s(4980)=<B,s(4981)=<D]
* Psum in Loop 293: [it(293)=<1,s(4985)=<B,s(4986)=<D]
* Psum in Loop 294: [it(294)=<1]
* Psum in Loop 295: [it(295)=<1,s(4991)=<D,s(4990)=<D+1]
* Psum in Loop 296: [it(296)=<1]
* Psum in Loop 297: [it(297)=<1,s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing max_min for s(4946)=<2*B+E  
   - Found a solution using cacheing 
 * Adding constraints:[s(4946)=<s(4915)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(4930)=<2*D+E,s(4946)=<2*D+E,s(4963)=<2*D+E+2,s(4914)=<E+1,s(4931)=<E+1,s(4947)=<E+1,s(4964)=<E+1]
* Psum in Loop 291: [it(291)=<1,s(4971)=< -D+D'+1,s(4976)=<D,s(4975)=<D']
* Psum in Loop 292: [it(292)=<1,s(4980)=<B,s(4981)=<D]
* Psum in Loop 293: [it(293)=<1,s(4985)=<B,s(4986)=<D]
* Psum in Loop 294: [it(294)=<1]
* Psum in Loop 295: [it(295)=<1,s(4991)=<D,s(4990)=<D+1]
* Psum in Loop 296: [it(296)=<1]
* Psum in Loop 297: [it(297)=<1,s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing max_min for s(4930)=<2*D+E  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(4930)=<A+3*B+2*D+E-4,s(4930)=<A+4*B+2*D+E-6] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(4946)=<2*D+E,s(4963)=<2*D+E+2,s(4914)=<E+1,s(4931)=<E+1,s(4947)=<E+1,s(4964)=<E+1]
* Psum in Loop 291: [it(291)=<1,s(4971)=< -D+D'+1,s(4976)=<D,s(4975)=<D']
* Psum in Loop 292: [it(292)=<1,s(4980)=<B,s(4981)=<D]
* Psum in Loop 293: [it(293)=<1,s(4985)=<B,s(4986)=<D]
* Psum in Loop 294: [it(294)=<1]
* Psum in Loop 295: [it(295)=<1,s(4991)=<D,s(4990)=<D+1]
* Psum in Loop 296: [it(296)=<1]
* Psum in Loop 297: [it(297)=<1,s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing max_min for s(4946)=<2*D+E  
   - Found a solution using cacheing 
 * Adding constraints:[s(4946)=<s(4930)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(4963)=<2*D+E+2,s(4914)=<E+1,s(4931)=<E+1,s(4947)=<E+1,s(4964)=<E+1]
* Psum in Loop 291: [it(291)=<1,s(4971)=< -D+D'+1,s(4976)=<D,s(4975)=<D']
* Psum in Loop 292: [it(292)=<1,s(4980)=<B,s(4981)=<D]
* Psum in Loop 293: [it(293)=<1,s(4985)=<B,s(4986)=<D]
* Psum in Loop 294: [it(294)=<1]
* Psum in Loop 295: [it(295)=<1,s(4991)=<D,s(4990)=<D+1]
* Psum in Loop 296: [it(296)=<1]
* Psum in Loop 297: [it(297)=<1,s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing max_min for s(4963)=<2*D+E+2  
   - Found a solution using cacheing 
 * Adding constraints:[s(4963)=<s(4930)+2] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(4914)=<E+1,s(4931)=<E+1,s(4947)=<E+1,s(4964)=<E+1]
* Psum in Loop 291: [it(291)=<1,s(4971)=< -D+D'+1,s(4976)=<D,s(4975)=<D']
* Psum in Loop 292: [it(292)=<1,s(4980)=<B,s(4981)=<D]
* Psum in Loop 293: [it(293)=<1,s(4985)=<B,s(4986)=<D]
* Psum in Loop 294: [it(294)=<1]
* Psum in Loop 295: [it(295)=<1,s(4991)=<D,s(4990)=<D+1]
* Psum in Loop 296: [it(296)=<1]
* Psum in Loop 297: [it(297)=<1,s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing max_min for s(4914)=<E+1  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(4914)=<A+E,s(4914)=<2*A+E-3] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(4931)=<E+1,s(4947)=<E+1,s(4964)=<E+1]
* Psum in Loop 291: [it(291)=<1,s(4971)=< -D+D'+1,s(4976)=<D,s(4975)=<D']
* Psum in Loop 292: [it(292)=<1,s(4980)=<B,s(4981)=<D]
* Psum in Loop 293: [it(293)=<1,s(4985)=<B,s(4986)=<D]
* Psum in Loop 294: [it(294)=<1]
* Psum in Loop 295: [it(295)=<1,s(4991)=<D,s(4990)=<D+1]
* Psum in Loop 296: [it(296)=<1]
* Psum in Loop 297: [it(297)=<1,s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing max_min for s(4931)=<E+1  
   - Found a solution using cacheing 
 * Adding constraints:[s(4931)=<s(4914)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(4947)=<E+1,s(4964)=<E+1]
* Psum in Loop 291: [it(291)=<1,s(4971)=< -D+D'+1,s(4976)=<D,s(4975)=<D']
* Psum in Loop 292: [it(292)=<1,s(4980)=<B,s(4981)=<D]
* Psum in Loop 293: [it(293)=<1,s(4985)=<B,s(4986)=<D]
* Psum in Loop 294: [it(294)=<1]
* Psum in Loop 295: [it(295)=<1,s(4991)=<D,s(4990)=<D+1]
* Psum in Loop 296: [it(296)=<1]
* Psum in Loop 297: [it(297)=<1,s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing max_min for s(4947)=<E+1  
   - Found a solution using cacheing 
 * Adding constraints:[s(4947)=<s(4914)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(4964)=<E+1]
* Psum in Loop 291: [it(291)=<1,s(4971)=< -D+D'+1,s(4976)=<D,s(4975)=<D']
* Psum in Loop 292: [it(292)=<1,s(4980)=<B,s(4981)=<D]
* Psum in Loop 293: [it(293)=<1,s(4985)=<B,s(4986)=<D]
* Psum in Loop 294: [it(294)=<1]
* Psum in Loop 295: [it(295)=<1,s(4991)=<D,s(4990)=<D+1]
* Psum in Loop 296: [it(296)=<1]
* Psum in Loop 297: [it(297)=<1,s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing max_min for s(4964)=<E+1  
   - Found a solution using cacheing 
 * Adding constraints:[s(4964)=<s(4914)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 291: [it(291)=<1,s(4971)=< -D+D'+1,s(4976)=<D,s(4975)=<D']
* Psum in Loop 292: [it(292)=<1,s(4980)=<B,s(4981)=<D]
* Psum in Loop 293: [it(293)=<1,s(4985)=<B,s(4986)=<D]
* Psum in Loop 294: [it(294)=<1]
* Psum in Loop 295: [it(295)=<1,s(4991)=<D,s(4990)=<D+1]
* Psum in Loop 296: [it(296)=<1]
* Psum in Loop 297: [it(297)=<1,s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing sum for it(291)=<1  in Loop 291 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - Loop 292 is collaborative and bounds [it(292)] 
       - Loop 293 is collaborative and bounds [it(293)] 
       - Loop 294 is collaborative and bounds [it(294)] 
       - Loop 295 is collaborative and bounds [it(295)] 
       - Loop 296 is collaborative and bounds [it(296)] 
       - Loop 297 is collaborative and bounds [it(297)] 
       - Loop 298 is collaborative and bounds [it(298)] 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B/2-D/2-1/2 
       - Loop 292 is collaborative
       - Loop 293 is collaborative
       - Loop 294 is collaborative
       - Loop 295 is collaborative
       - Loop 296 is collaborative
       - Loop 297 is collaborative
       - Loop 298 is collaborative
     - tail Candidate: A-1 
       - Loop 292 is collaborative and bounds [it(292)] 
       - Loop 293 is collaborative and bounds [it(293)] 
       - Loop 294 is collaborative and bounds [it(294)] 
       - Loop 295 is collaborative and bounds [it(295)] 
       - Loop 296 is collaborative and bounds [it(296)] 
       - Loop 297 is collaborative and bounds [it(297)] 
       - Loop 298 is collaborative and bounds [it(298)] 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B/2-D/2-1/2 
       - Loop 292 is collaborative
       - Loop 293 is collaborative
       - Loop 294 is collaborative
       - Loop 295 is collaborative
       - Loop 296 is collaborative
       - Loop 297 is collaborative and bounds [it(297)] 
       - Loop 298 is collaborative
 * Adding constraints: [it(291)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-1,it(291)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-1,it(291)=<B/2-D/2-1/2,it(291)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-A',it(291)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-A',it(291)+it(297)=<B/2-D/2-B'/2+D'/2] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 291: [s(4971)=< -D+D'+1,s(4976)=<D,s(4975)=<D']
* Psum in Loop 292: [it(292)=<1,s(4980)=<B,s(4981)=<D]
* Psum in Loop 293: [it(293)=<1,s(4985)=<B,s(4986)=<D]
* Psum in Loop 294: [it(294)=<1]
* Psum in Loop 295: [it(295)=<1,s(4991)=<D,s(4990)=<D+1]
* Psum in Loop 296: [it(296)=<1]
* Psum in Loop 297: [it(297)=<1,s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing sum for s(4971)=< -D+D'+1  in Loop 291 
   - Applying inductive sum strategy 
     - head Candidate: 3/2*B-3/2*D 
       - Loop 292 is collaborative
       - Loop 293 is collaborative
       - Loop 294 is collaborative
       - Loop 295 is collaborative and bounds [it(295)] 
       - Loop 296 is collaborative
       - Loop 297 is collaborative and bounds [it(297)] 
       - Loop 298 is collaborative and bounds [it(298)] 
     - head Candidate: 2*A+B-D+E-2 
       - Loop 292 is collaborative
       - Loop 293 is collaborative
       - Loop 294 is collaborative
       - Loop 295 is collaborative and bounds [it(295)] 
       - Loop 296 is collaborative
       - Loop 297 is collaborative and bounds [it(297)] 
       - Loop 298 is collaborative and bounds [it(298)] 
     - tail Candidate: 3/2*B-3/2*D 
       - Loop 292 is collaborative
       - Loop 293 is collaborative
       - Loop 294 is collaborative
       - Loop 295 is collaborative and bounds [it(295)] 
       - Loop 296 is collaborative
       - Loop 297 is collaborative and bounds [it(297)] 
       - Loop 298 is collaborative and bounds [it(298)] 
     - tail Candidate: 2*A+B-D+E-2 
       - Loop 292 is collaborative and bounds [it(292)] 
       - Loop 293 is collaborative and bounds [it(293)] 
       - Loop 294 is collaborative and bounds [it(294)] 
       - Loop 295 is collaborative and bounds [it(295)] 
       - Loop 296 is collaborative and bounds [it(296)] 
       - Loop 297 is collaborative and bounds [it(297)] 
       - Loop 298 is collaborative and bounds [it(298)] 
 * Adding constraints: [it(295)+it(297)+it(298)+s(4971)=<3/2*B-3/2*D,it(295)+it(297)+it(298)+s(4971)=<2*A+B-D+E-2,it(295)+it(297)+it(298)+s(4971)=<3/2*B-3/2*D-3/2*B'+3/2*D',it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)+s(4971)=<2*A+B-D+E-2*A'-B'+D'-E'] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 291: [s(4976)=<D,s(4975)=<D']
* Psum in Loop 292: [it(292)=<1,s(4980)=<B,s(4981)=<D]
* Psum in Loop 293: [it(293)=<1,s(4985)=<B,s(4986)=<D]
* Psum in Loop 294: [it(294)=<1]
* Psum in Loop 295: [it(295)=<1,s(4991)=<D,s(4990)=<D+1]
* Psum in Loop 296: [it(296)=<1]
* Psum in Loop 297: [it(297)=<1,s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing sum for s(4976)=<D  in Loop 291 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(499)=<D] 
 * Adding constraints: [s(4976)=<it(291)*aux(499)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(499)=<D]
* Psum in Loop 291: [s(4975)=<D']
* Psum in Loop 292: [it(292)=<1,s(4980)=<B,s(4981)=<D]
* Psum in Loop 293: [it(293)=<1,s(4985)=<B,s(4986)=<D]
* Psum in Loop 294: [it(294)=<1]
* Psum in Loop 295: [it(295)=<1,s(4991)=<D,s(4990)=<D+1]
* Psum in Loop 296: [it(296)=<1]
* Psum in Loop 297: [it(297)=<1,s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing max_min for aux(499)=<D  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(499)=<2*B+D-2,aux(499)=<A+B+D-3] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 291: [s(4975)=<D']
* Psum in Loop 292: [it(292)=<1,s(4980)=<B,s(4981)=<D]
* Psum in Loop 293: [it(293)=<1,s(4985)=<B,s(4986)=<D]
* Psum in Loop 294: [it(294)=<1]
* Psum in Loop 295: [it(295)=<1,s(4991)=<D,s(4990)=<D+1]
* Psum in Loop 296: [it(296)=<1]
* Psum in Loop 297: [it(297)=<1,s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing sum for s(4975)=<D'  in Loop 291 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(500)=<B] 
 * Adding constraints: [s(4975)=<it(291)*aux(500)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(500)=<B]
* Psum in Loop 292: [it(292)=<1,s(4980)=<B,s(4981)=<D]
* Psum in Loop 293: [it(293)=<1,s(4985)=<B,s(4986)=<D]
* Psum in Loop 294: [it(294)=<1]
* Psum in Loop 295: [it(295)=<1,s(4991)=<D,s(4990)=<D+1]
* Psum in Loop 296: [it(296)=<1]
* Psum in Loop 297: [it(297)=<1,s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing max_min for aux(500)=<B  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(500)=<B] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 292: [it(292)=<1,s(4980)=<B,s(4981)=<D]
* Psum in Loop 293: [it(293)=<1,s(4985)=<B,s(4986)=<D]
* Psum in Loop 294: [it(294)=<1]
* Psum in Loop 295: [it(295)=<1,s(4991)=<D,s(4990)=<D+1]
* Psum in Loop 296: [it(296)=<1]
* Psum in Loop 297: [it(297)=<1,s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing sum for it(292)=<1  in Loop 292 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(291)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-1,it(291)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-1,it(291)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-A',it(291)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-A'] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 292: [s(4980)=<B,s(4981)=<D]
* Psum in Loop 293: [it(293)=<1,s(4985)=<B,s(4986)=<D]
* Psum in Loop 294: [it(294)=<1]
* Psum in Loop 295: [it(295)=<1,s(4991)=<D,s(4990)=<D+1]
* Psum in Loop 296: [it(296)=<1]
* Psum in Loop 297: [it(297)=<1,s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing sum for s(4980)=<B  in Loop 292 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(501)=<B] 
 * Adding constraints: [s(4980)=<it(292)*aux(501)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(501)=<B]
* Psum in Loop 292: [s(4981)=<D]
* Psum in Loop 293: [it(293)=<1,s(4985)=<B,s(4986)=<D]
* Psum in Loop 294: [it(294)=<1]
* Psum in Loop 295: [it(295)=<1,s(4991)=<D,s(4990)=<D+1]
* Psum in Loop 296: [it(296)=<1]
* Psum in Loop 297: [it(297)=<1,s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing max_min for aux(501)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(501)=<aux(500)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 292: [s(4981)=<D]
* Psum in Loop 293: [it(293)=<1,s(4985)=<B,s(4986)=<D]
* Psum in Loop 294: [it(294)=<1]
* Psum in Loop 295: [it(295)=<1,s(4991)=<D,s(4990)=<D+1]
* Psum in Loop 296: [it(296)=<1]
* Psum in Loop 297: [it(297)=<1,s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing sum for s(4981)=<D  in Loop 292 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(502)=<D] 
 * Adding constraints: [s(4981)=<it(292)*aux(502)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(502)=<D]
* Psum in Loop 293: [it(293)=<1,s(4985)=<B,s(4986)=<D]
* Psum in Loop 294: [it(294)=<1]
* Psum in Loop 295: [it(295)=<1,s(4991)=<D,s(4990)=<D+1]
* Psum in Loop 296: [it(296)=<1]
* Psum in Loop 297: [it(297)=<1,s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing max_min for aux(502)=<D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(502)=<aux(499)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 293: [it(293)=<1,s(4985)=<B,s(4986)=<D]
* Psum in Loop 294: [it(294)=<1]
* Psum in Loop 295: [it(295)=<1,s(4991)=<D,s(4990)=<D+1]
* Psum in Loop 296: [it(296)=<1]
* Psum in Loop 297: [it(297)=<1,s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing sum for it(293)=<1  in Loop 293 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(291)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-1,it(291)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-1,it(291)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-A',it(291)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-A'] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 293: [s(4985)=<B,s(4986)=<D]
* Psum in Loop 294: [it(294)=<1]
* Psum in Loop 295: [it(295)=<1,s(4991)=<D,s(4990)=<D+1]
* Psum in Loop 296: [it(296)=<1]
* Psum in Loop 297: [it(297)=<1,s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing sum for s(4985)=<B  in Loop 293 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(503)=<B] 
 * Adding constraints: [s(4985)=<it(293)*aux(503)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(503)=<B]
* Psum in Loop 293: [s(4986)=<D]
* Psum in Loop 294: [it(294)=<1]
* Psum in Loop 295: [it(295)=<1,s(4991)=<D,s(4990)=<D+1]
* Psum in Loop 296: [it(296)=<1]
* Psum in Loop 297: [it(297)=<1,s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing max_min for aux(503)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(503)=<aux(500)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 293: [s(4986)=<D]
* Psum in Loop 294: [it(294)=<1]
* Psum in Loop 295: [it(295)=<1,s(4991)=<D,s(4990)=<D+1]
* Psum in Loop 296: [it(296)=<1]
* Psum in Loop 297: [it(297)=<1,s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing sum for s(4986)=<D  in Loop 293 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(504)=<D] 
 * Adding constraints: [s(4986)=<it(293)*aux(504)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(504)=<D]
* Psum in Loop 294: [it(294)=<1]
* Psum in Loop 295: [it(295)=<1,s(4991)=<D,s(4990)=<D+1]
* Psum in Loop 296: [it(296)=<1]
* Psum in Loop 297: [it(297)=<1,s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing max_min for aux(504)=<D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(504)=<aux(499)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 294: [it(294)=<1]
* Psum in Loop 295: [it(295)=<1,s(4991)=<D,s(4990)=<D+1]
* Psum in Loop 296: [it(296)=<1]
* Psum in Loop 297: [it(297)=<1,s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing sum for it(294)=<1  in Loop 294 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(291)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-1,it(291)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-1,it(291)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-A',it(291)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-A'] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 295: [it(295)=<1,s(4991)=<D,s(4990)=<D+1]
* Psum in Loop 296: [it(296)=<1]
* Psum in Loop 297: [it(297)=<1,s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing sum for it(295)=<1  in Loop 295 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-D 
       - Loop 291 is collaborative
       - Loop 292 is collaborative
       - Loop 293 is collaborative
       - Loop 294 is collaborative
       - Loop 296 is collaborative
       - Loop 297 is collaborative and bounds [it(297)] 
       - Loop 298 is collaborative and bounds [it(298)] 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-D 
       - Loop 291 is collaborative
       - Loop 292 is collaborative
       - Loop 293 is collaborative
       - Loop 294 is collaborative
       - Loop 296 is collaborative
       - Loop 297 is collaborative and bounds [it(297)] 
       - Loop 298 is collaborative and bounds [it(298)] 
 * Adding constraints: [it(291)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-1,it(291)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-1,it(295)+it(297)+it(298)=<B-D,it(291)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-A',it(291)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-A',it(295)+it(297)+it(298)=<B-D-B'+D'] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 295: [s(4991)=<D,s(4990)=<D+1]
* Psum in Loop 296: [it(296)=<1]
* Psum in Loop 297: [it(297)=<1,s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing sum for s(4991)=<D  in Loop 295 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(505)=<D] 
 * Adding constraints: [s(4991)=<it(295)*aux(505)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(505)=<D]
* Psum in Loop 295: [s(4990)=<D+1]
* Psum in Loop 296: [it(296)=<1]
* Psum in Loop 297: [it(297)=<1,s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing max_min for aux(505)=<D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(505)=<aux(499)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 295: [s(4990)=<D+1]
* Psum in Loop 296: [it(296)=<1]
* Psum in Loop 297: [it(297)=<1,s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing sum for s(4990)=<D+1  in Loop 295 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(506)=<D+1] 
 * Adding constraints: [s(4990)=<it(295)*aux(506)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(506)=<D+1]
* Psum in Loop 296: [it(296)=<1]
* Psum in Loop 297: [it(297)=<1,s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing max_min for aux(506)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(506)=<aux(499)+1] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 296: [it(296)=<1]
* Psum in Loop 297: [it(297)=<1,s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing sum for it(296)=<1  in Loop 296 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(291)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-1,it(291)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-1,it(291)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-A',it(291)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-A'] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 297: [it(297)=<1,s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing sum for it(297)=<1  in Loop 297 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -D/2+1 
       - Loop 291 is collaborative
       - Loop 292 is collaborative
       - Loop 293 is collaborative
       - Loop 294 is collaborative
       - Loop 295 is collaborative
       - Loop 296 is collaborative
       - Loop 298 is collaborative
     - head Candidate: -E/2+1/2 
       - Loop 291 has a reset to  [-1/2]
       - Loop 292 has a reset to  [-1/2]
       - Loop 293 has a reset to  [-1/2]
       - Loop 294 is collaborative
       - Loop 295 has a reset to  [-1/2]
       - Loop 296 has a reset to  [-1/2]
       - Loop 298 is collaborative
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -D/2+1 
       - Loop 291 is collaborative
       - Loop 292 is collaborative
       - Loop 293 is collaborative
       - Loop 294 is collaborative
       - Loop 295 is collaborative
       - Loop 296 is collaborative
       - Loop 298 is collaborative
     - tail Candidate: -E/2+1/2 
       - Loop 291 has undefined behavior 
 * Adding constraints: [it(297)=<aux(511)+aux(510)+aux(509)+aux(508)+aux(507)+aux(512),it(291)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-1,it(291)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-1,it(297)=< -D/2+1,aux(512)=< -E/2+1/2,it(291)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-A',it(291)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-A',it(297)=< -D/2+D'/2] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 291: [aux(507)=< -1/2]
* Psum in Loop 292: [aux(508)=< -1/2]
* Psum in Loop 293: [aux(509)=< -1/2]
* Psum in Loop 295: [aux(510)=< -1/2]
* Psum in Loop 296: [aux(511)=< -1/2]
* Psum in Loop 297: [s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing sum for aux(507)=< -1/2  in Loop 291 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B/2-D/2-1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B/2-D/2-1/2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [aux(507)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-1,aux(507)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-1,aux(507)=<B/2-D/2-1/2,aux(507)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-A',aux(507)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-A',aux(507)+it(297)=<B/2-D/2-B'/2+D'/2] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 292: [aux(508)=< -1/2]
* Psum in Loop 293: [aux(509)=< -1/2]
* Psum in Loop 295: [aux(510)=< -1/2]
* Psum in Loop 296: [aux(511)=< -1/2]
* Psum in Loop 297: [s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing sum for aux(508)=< -1/2  in Loop 292 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [aux(508)+it(291)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-1,aux(508)+it(291)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-1,aux(508)+it(291)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-A',aux(508)+it(291)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-A'] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 293: [aux(509)=< -1/2]
* Psum in Loop 295: [aux(510)=< -1/2]
* Psum in Loop 296: [aux(511)=< -1/2]
* Psum in Loop 297: [s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing sum for aux(509)=< -1/2  in Loop 293 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [aux(509)+it(291)+it(292)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-1,aux(509)+it(291)+it(292)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-1,aux(509)+it(291)+it(292)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-A',aux(509)+it(291)+it(292)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-A'] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 295: [aux(510)=< -1/2]
* Psum in Loop 296: [aux(511)=< -1/2]
* Psum in Loop 297: [s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing sum for aux(510)=< -1/2  in Loop 295 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-D 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-D 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [aux(510)+it(291)+it(292)+it(293)+it(294)+it(296)+it(297)+it(298)=<A-1,aux(510)+it(291)+it(292)+it(293)+it(294)+it(296)+it(297)+it(298)=<A-1,aux(510)+it(297)+it(298)=<B-D,aux(510)+it(291)+it(292)+it(293)+it(294)+it(296)+it(297)+it(298)=<A-A',aux(510)+it(291)+it(292)+it(293)+it(294)+it(296)+it(297)+it(298)=<A-A',aux(510)+it(297)+it(298)=<B-D-B'+D'] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 296: [aux(511)=< -1/2]
* Psum in Loop 297: [s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing sum for aux(511)=< -1/2  in Loop 296 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [aux(511)+it(291)+it(292)+it(293)+it(294)+it(295)+it(297)+it(298)=<A-1,aux(511)+it(291)+it(292)+it(293)+it(294)+it(295)+it(297)+it(298)=<A-1,aux(511)+it(291)+it(292)+it(293)+it(294)+it(295)+it(297)+it(298)=<A-A',aux(511)+it(291)+it(292)+it(293)+it(294)+it(295)+it(297)+it(298)=<A-A'] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 297: [s(4992)=<D']
* Psum in Loop 298: [it(298)=<1]

###### Computing sum for s(4992)=<D'  in Loop 297 
   - Applying inductive sum strategy 
     - head Candidate: A+B-D 
       - Loop 291 is collaborative
       - Loop 292 is collaborative
       - Loop 293 is collaborative
       - Loop 294 is collaborative
       - Loop 295 is collaborative
       - Loop 296 is collaborative
       - Loop 298 is collaborative and bounds [it(298)] 
     - head Candidate: B-D-E/2+1 
       - Loop 291 has a reset to  [B-D-2]
       - Loop 292 has a reset to  [B-D]
       - Loop 293 has a reset to  [B-D]
       - Loop 294 is collaborative
       - Loop 295 has a reset to  [B-D-1]
       - Loop 296 has a reset to  [B-D]
       - Loop 298 is collaborative and bounds [it(298)] 
     - tail Candidate: A+B-D 
       - Loop 291 is collaborative
       - Loop 292 is collaborative
       - Loop 293 is collaborative
       - Loop 294 is collaborative
       - Loop 295 is collaborative
       - Loop 296 is collaborative
       - Loop 298 is collaborative and bounds [it(298)] 
     - tail Candidate: B-D-E/2+1 
       - Loop 291 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(519)=<B] 
 * Adding constraints: [s(4992)=<it(297)*aux(519),it(298)+s(4992)=<aux(517)+aux(516)+aux(515)+aux(514)+aux(513)+aux(518),it(298)+s(4992)=<A+B-D,aux(518)=<B-D-E/2+1,it(298)+s(4992)=<A+B-D-A'-B'+D'] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(519)=<B]
* Psum in Loop 291: [aux(513)=<B-D-2]
* Psum in Loop 292: [aux(514)=<B-D]
* Psum in Loop 293: [aux(515)=<B-D]
* Psum in Loop 295: [aux(516)=<B-D-1]
* Psum in Loop 296: [aux(517)=<B-D]
* Psum in Loop 298: [it(298)=<1]

###### Computing max_min for aux(519)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(519)=<aux(500)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 291: [aux(513)=<B-D-2]
* Psum in Loop 292: [aux(514)=<B-D]
* Psum in Loop 293: [aux(515)=<B-D]
* Psum in Loop 295: [aux(516)=<B-D-1]
* Psum in Loop 296: [aux(517)=<B-D]
* Psum in Loop 298: [it(298)=<1]

###### Computing sum for aux(513)=<B-D-2  in Loop 291 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(520)=<B-D-2] 
 * Adding constraints: [aux(513)=<it(291)*aux(520)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(520)=<B-D-2]
* Psum in Loop 292: [aux(514)=<B-D]
* Psum in Loop 293: [aux(515)=<B-D]
* Psum in Loop 295: [aux(516)=<B-D-1]
* Psum in Loop 296: [aux(517)=<B-D]
* Psum in Loop 298: [it(298)=<1]

###### Computing max_min for aux(520)=<B-D-2  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(520)=<B-D-2] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 292: [aux(514)=<B-D]
* Psum in Loop 293: [aux(515)=<B-D]
* Psum in Loop 295: [aux(516)=<B-D-1]
* Psum in Loop 296: [aux(517)=<B-D]
* Psum in Loop 298: [it(298)=<1]

###### Computing sum for aux(514)=<B-D  in Loop 292 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(521)=<B-D] 
 * Adding constraints: [aux(514)=<it(292)*aux(521)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(521)=<B-D]
* Psum in Loop 293: [aux(515)=<B-D]
* Psum in Loop 295: [aux(516)=<B-D-1]
* Psum in Loop 296: [aux(517)=<B-D]
* Psum in Loop 298: [it(298)=<1]

###### Computing max_min for aux(521)=<B-D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(521)=<aux(520)+2] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 293: [aux(515)=<B-D]
* Psum in Loop 295: [aux(516)=<B-D-1]
* Psum in Loop 296: [aux(517)=<B-D]
* Psum in Loop 298: [it(298)=<1]

###### Computing sum for aux(515)=<B-D  in Loop 293 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(522)=<B-D] 
 * Adding constraints: [aux(515)=<it(293)*aux(522)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(522)=<B-D]
* Psum in Loop 295: [aux(516)=<B-D-1]
* Psum in Loop 296: [aux(517)=<B-D]
* Psum in Loop 298: [it(298)=<1]

###### Computing max_min for aux(522)=<B-D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(522)=<aux(520)+2] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 295: [aux(516)=<B-D-1]
* Psum in Loop 296: [aux(517)=<B-D]
* Psum in Loop 298: [it(298)=<1]

###### Computing sum for aux(516)=<B-D-1  in Loop 295 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(523)=<B-D-1] 
 * Adding constraints: [aux(516)=<it(295)*aux(523)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(523)=<B-D-1]
* Psum in Loop 296: [aux(517)=<B-D]
* Psum in Loop 298: [it(298)=<1]

###### Computing max_min for aux(523)=<B-D-1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(523)=<aux(520)+1] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 296: [aux(517)=<B-D]
* Psum in Loop 298: [it(298)=<1]

###### Computing sum for aux(517)=<B-D  in Loop 296 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(524)=<B-D] 
 * Adding constraints: [aux(517)=<it(296)*aux(524)] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(524)=<B-D]
* Psum in Loop 298: [it(298)=<1]

###### Computing max_min for aux(524)=<B-D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(524)=<aux(520)+2] 

##### Pending set transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 298: [it(298)=<1]

###### Computing sum for it(298)=<1  in Loop 298 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -D+2 
       - Loop 291 is collaborative
       - Loop 292 is collaborative
       - Loop 293 is collaborative
       - Loop 294 is collaborative
       - Loop 295 is collaborative
       - Loop 296 is collaborative
       - Loop 297 is collaborative
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -E/2+1/2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -D+2 
       - Loop 291 is collaborative
       - Loop 292 is collaborative
       - Loop 293 is collaborative
       - Loop 294 is collaborative
       - Loop 295 is collaborative
       - Loop 296 is collaborative
       - Loop 297 is collaborative
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -E/2+1/2 
       - We failed to classify this candidate before 
 * Adding constraints: [it(297)+it(298)=<aux(511)+aux(510)+aux(509)+aux(508)+aux(507)+aux(525),it(291)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-1,it(298)=< -D+2,it(291)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-1,aux(525)=< -E/2+1/2,it(291)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-A',it(298)=< -D+D',it(291)+it(292)+it(293)+it(294)+it(295)+it(296)+it(297)+it(298)=<A-A'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [291,292,293,294,295,296,297,298] 

#### Simplifying cost structure of phase [291,292,293,294,295,296,297,298] 
 * Joined equivalent variables [aux(532),aux(520)] into aux(532)
 * Joined equivalent variables [aux(538),aux(512),aux(525)] into aux(538)
 * Joined equivalent variables [aux(521),aux(522),aux(524)] into aux(521)
 * Joined equivalent variables [aux(501),aux(503),aux(519)] into aux(501)
 * Joined equivalent variables [aux(502),aux(504),aux(505)] into aux(502)
 * Joined equivalent variables [s(4918),s(4931),s(4947),s(4964)] into s(4918)
 * Joined equivalent variables [it(292),it(293),it(294),it(296)] into it(292)
 * Joined equivalent variables [aux(508),aux(509),aux(511)] into aux(508)
 * Joined equivalent variables [aux(514),aux(515),aux(517)] into aux(514)
 * Joined equivalent variables [s(4981),s(4986)] into s(4981)
 * Joined equivalent variables [s(4934),s(4950),s(4966)] into s(4934)
 * Joined equivalent variables [s(4980),s(4985)] into s(4980)
 * Joined equivalent variables [s(4977),s(4982)] into s(4977)
 * Joined equivalent variables [s(4979),s(4984)] into s(4979)

#### Cost of phase [291,292,293,294,295,296,297,298]:transpose_helper(A,B,C,D,E,F,G,H,I) -> [transpose_helper(A',B',C',D',E',F',G',H',I')] 
17*it(291)+54*it(292)+17*it(295)+17*it(297)+17*it(298)+10*s(4971)+26*s(4972)+5*s(4973)+5*s(4974)+52*s(4977)+5*s(4978)+10*s(4979)+5*s(4983)+26*s(4987)+5*s(4988)+5*s(4989)+10*s(4992)+0
  Such that:aux(499) =< A+B+D
s(4915) =< A+2*B+E
s(4930) =< A+3*B+2*D+E
s(4915) =< A+3*B+E
s(4930) =< A+4*B+2*D+E
s(4914) =< A+E
s(4914) =< 2*A+E
aux(500) =< B
aux(518) =< B-D-E/2+1
aux(499) =< 2*B+D
it(298) =< -D+2
it(298) =< -D+D'
it(297) =< -D/2+1
it(297) =< -D/2+D'/2
aux(526) =< A
aux(527) =< A+B-D
aux(528) =< A+B-D-A'-B'+D'
aux(529) =< A-A'
aux(530) =< 2*A+B-D+E
aux(531) =< 2*A+B-D+E-2*A'-B'+D'-E'
aux(532) =< B-D
aux(533) =< B-D-B'+D'
aux(534) =< B/2-D/2
aux(535) =< B/2-D/2-B'/2+D'/2
aux(536) =< 3/2*B-3/2*D
aux(537) =< 3/2*B-3/2*D-3/2*B'+3/2*D'
aux(538) =< -E/2+1/2
aux(507) =< aux(526)
aux(508) =< aux(526)
aux(510) =< aux(526)
it(291) =< aux(526)
it(292) =< aux(526)
it(295) =< aux(526)
it(297) =< aux(526)
it(298) =< aux(526)
it(298) =< aux(527)
s(4992) =< aux(527)
it(298) =< aux(528)
s(4992) =< aux(528)
aux(507) =< aux(529)
aux(508) =< aux(529)
aux(510) =< aux(529)
it(291) =< aux(529)
it(292) =< aux(529)
it(295) =< aux(529)
it(297) =< aux(529)
it(298) =< aux(529)
it(295) =< aux(530)
it(297) =< aux(530)
it(298) =< aux(530)
s(4971) =< aux(530)
it(292) =< aux(531)
it(295) =< aux(531)
it(297) =< aux(531)
it(298) =< aux(531)
s(4971) =< aux(531)
aux(510) =< aux(532)
it(295) =< aux(532)
it(297) =< aux(532)
it(298) =< aux(532)
aux(510) =< aux(533)
it(295) =< aux(533)
it(297) =< aux(533)
it(298) =< aux(533)
aux(507) =< aux(534)
it(291) =< aux(534)
aux(507) =< aux(535)
it(291) =< aux(535)
it(297) =< aux(535)
it(295) =< aux(536)
it(297) =< aux(536)
it(298) =< aux(536)
s(4971) =< aux(536)
it(295) =< aux(537)
it(297) =< aux(537)
it(298) =< aux(537)
s(4971) =< aux(537)
aux(521) =< aux(532)+2
aux(523) =< aux(532)+1
aux(501) =< aux(500)
aux(506) =< aux(499)+1
aux(502) =< aux(499)
s(4918) =< s(4914)
s(4946) =< s(4915)
s(4930) =< s(4915)
it(297) =< aux(508)+aux(510)+aux(508)+aux(508)+aux(507)+aux(538)
it(298) =< aux(508)+aux(510)+aux(508)+aux(508)+aux(507)+aux(538)
aux(513) =< it(291)*aux(532)
s(4975) =< it(291)*aux(500)
s(4976) =< it(291)*aux(499)
s(4963) =< s(4930)+2
s(4946) =< s(4930)
aux(514) =< it(292)*aux(521)
aux(516) =< it(295)*aux(523)
s(4992) =< it(297)*aux(501)
s(4990) =< it(295)*aux(506)
s(4991) =< it(295)*aux(502)
s(4981) =< it(292)*aux(502)
s(4980) =< it(292)*aux(501)
it(298) =< aux(514)+aux(516)+aux(514)+aux(514)+aux(513)+aux(518)
s(4992) =< aux(514)+aux(516)+aux(514)+aux(514)+aux(513)+aux(518)
s(4987) =< s(4991)
s(4987) =< s(4990)
s(4934) =< s(4918)
s(4988) =< s(4987)*s(4963)
s(4989) =< s(4987)*s(4918)
s(4988) =< s(4987)*s(4934)
s(4980) =< s(4981)
s(4977) =< s(4981)
s(4977) =< s(4980)
s(4983) =< s(4977)*s(4946)
s(4979) =< s(4977)*s(4918)
s(4983) =< s(4977)*s(4934)
s(4978) =< s(4977)*s(4930)
s(4978) =< s(4977)*s(4934)
s(4972) =< s(4976)
s(4972) =< s(4975)
s(4973) =< s(4972)*s(4915)
s(4974) =< s(4972)*s(4914)
s(4973) =< s(4972)*s(4918)

#### Simplifying cost structure of chain [[291,292,293,294,295,296,297,298],299] 
 * Joined equivalent variables [aux(539),aux(526),aux(529)] into aux(539)
 * Joined equivalent variables [aux(539),aux(508)] into aux(539)

#### Cost of chains of transpose_helper(A,B,C,D,E,F,G,H,I):
* Chain [[291,292,293,294,295,296,297,298],299]: 17*it(291)+54*it(292)+17*it(295)+17*it(297)+17*it(298)+10*s(4971)+26*s(4972)+5*s(4973)+5*s(4974)+52*s(4977)+5*s(4978)+10*s(4979)+5*s(4983)+26*s(4987)+5*s(4988)+5*s(4989)+10*s(4992)+2
  Such that:aux(527) =< A+B-D
aux(528) =< A+B-D+G
aux(499) =< A+B+D
s(4915) =< A+2*B+E
s(4930) =< A+3*B+2*D+E
s(4914) =< A+E
aux(530) =< 2*A+B-D+E
aux(531) =< 2*A+B-D+E+G-H
aux(500) =< B
aux(532) =< B-D
aux(518) =< B-D-E/2+1
aux(533) =< B-D+G
aux(499) =< 2*B+D
aux(534) =< B/2-D/2
aux(535) =< B/2-D/2+G/2
aux(536) =< 3/2*B-3/2*D
aux(537) =< 3/2*B-3/2*D+3/2*G
it(298) =< -D+2
it(298) =< -D+G
it(297) =< -D/2+1
it(297) =< -D/2+G/2
aux(538) =< -E/2+1/2
aux(539) =< A
aux(507) =< aux(539)
aux(510) =< aux(539)
it(291) =< aux(539)
it(292) =< aux(539)
it(295) =< aux(539)
it(297) =< aux(539)
it(298) =< aux(539)
it(298) =< aux(527)
s(4992) =< aux(527)
it(298) =< aux(528)
s(4992) =< aux(528)
it(295) =< aux(530)
it(297) =< aux(530)
it(298) =< aux(530)
s(4971) =< aux(530)
it(292) =< aux(531)
it(295) =< aux(531)
it(297) =< aux(531)
it(298) =< aux(531)
s(4971) =< aux(531)
aux(510) =< aux(532)
it(295) =< aux(532)
it(297) =< aux(532)
it(298) =< aux(532)
aux(510) =< aux(533)
it(295) =< aux(533)
it(297) =< aux(533)
it(298) =< aux(533)
aux(507) =< aux(534)
it(291) =< aux(534)
aux(507) =< aux(535)
it(291) =< aux(535)
it(297) =< aux(535)
it(295) =< aux(536)
it(297) =< aux(536)
it(298) =< aux(536)
s(4971) =< aux(536)
it(295) =< aux(537)
it(297) =< aux(537)
it(298) =< aux(537)
s(4971) =< aux(537)
aux(521) =< aux(532)+2
aux(523) =< aux(532)+1
aux(501) =< aux(500)
aux(506) =< aux(499)+1
aux(502) =< aux(499)
s(4918) =< s(4914)
s(4946) =< s(4915)
s(4930) =< s(4915)
it(297) =< aux(539)+aux(510)+aux(539)+aux(539)+aux(507)+aux(538)
it(298) =< aux(539)+aux(510)+aux(539)+aux(539)+aux(507)+aux(538)
aux(513) =< it(291)*aux(532)
s(4975) =< it(291)*aux(500)
s(4976) =< it(291)*aux(499)
s(4963) =< s(4930)+2
s(4946) =< s(4930)
aux(514) =< it(292)*aux(521)
aux(516) =< it(295)*aux(523)
s(4992) =< it(297)*aux(501)
s(4990) =< it(295)*aux(506)
s(4991) =< it(295)*aux(502)
s(4981) =< it(292)*aux(502)
s(4980) =< it(292)*aux(501)
it(298) =< aux(514)+aux(516)+aux(514)+aux(514)+aux(513)+aux(518)
s(4992) =< aux(514)+aux(516)+aux(514)+aux(514)+aux(513)+aux(518)
s(4987) =< s(4991)
s(4987) =< s(4990)
s(4934) =< s(4918)
s(4988) =< s(4987)*s(4963)
s(4989) =< s(4987)*s(4918)
s(4988) =< s(4987)*s(4934)
s(4980) =< s(4981)
s(4977) =< s(4981)
s(4977) =< s(4980)
s(4983) =< s(4977)*s(4946)
s(4979) =< s(4977)*s(4918)
s(4983) =< s(4977)*s(4934)
s(4978) =< s(4977)*s(4930)
s(4978) =< s(4977)*s(4934)
s(4972) =< s(4976)
s(4972) =< s(4975)
s(4973) =< s(4972)*s(4915)
s(4974) =< s(4972)*s(4914)
s(4973) =< s(4972)*s(4918)

  with precondition: [A>=2,B>=1,C>=0,D>=0,E>=0,F>=0,H>=0,I>=0,G>=D,E+2*A>=H+2,A+E+G>=H+2,E+2*A+2*D>=H+4,2*A+2*E+3*G>=2*D+2*H+4,A+2*E+2*G>=2*D+H+2,A+E+G>=D+H+1,A+B+E+G>=D+H+3] 

* Chain [299]: 2
  with precondition: [A=1,B=0,D=G,E=H,F=I,C>=0,D>=0,E>=0,F>=0] 


#### Simplifying cost structure of CE 388 
 * Renamed intermediate variables: 
[ (eq(389,1),aux(527))>>s(4993), (eq(389,1),aux(528))>>s(4994), (eq(389,1),aux(499))>>s(4995), (eq(389,1),s(4915))>>s(4996), (eq(389,1),s(4930))>>s(4997), (eq(389,1),s(4914))>>s(4998), (eq(389,1),aux(530))>>s(4999), (eq(389,1),aux(531))>>s(5000), (eq(389,1),aux(500))>>s(5001), (eq(389,1),aux(532))>>s(5002), (eq(389,1),aux(518))>>s(5003), (eq(389,1),aux(533))>>s(5004), (eq(389,1),aux(534))>>s(5005), (eq(389,1),aux(535))>>s(5006), (eq(389,1),aux(536))>>s(5007), (eq(389,1),aux(537))>>s(5008), (eq(389,1),it(298))>>s(5009), (eq(389,1),it(297))>>s(5010), (eq(389,1),aux(538))>>s(5011), (eq(389,1),aux(539))>>s(5012), (eq(389,1),aux(507))>>s(5013), (eq(389,1),aux(510))>>s(5014), (eq(389,1),it(291))>>s(5015), (eq(389,1),it(292))>>s(5016), (eq(389,1),it(295))>>s(5017), (eq(389,1),s(4992))>>s(5018), (eq(389,1),s(4971))>>s(5019), (eq(389,1),aux(521))>>s(5020), (eq(389,1),aux(523))>>s(5021), (eq(389,1),aux(501))>>s(5022), (eq(389,1),aux(506))>>s(5023), (eq(389,1),aux(502))>>s(5024), (eq(389,1),s(4918))>>s(5025), (eq(389,1),s(4946))>>s(5026), (eq(389,1),aux(513))>>s(5027), (eq(389,1),s(4975))>>s(5028), (eq(389,1),s(4976))>>s(5029), (eq(389,1),s(4963))>>s(5030), (eq(389,1),aux(514))>>s(5031), (eq(389,1),aux(516))>>s(5032), (eq(389,1),s(4990))>>s(5033), (eq(389,1),s(4991))>>s(5034), (eq(389,1),s(4981))>>s(5035), (eq(389,1),s(4980))>>s(5036), (eq(389,1),s(4987))>>s(5037), (eq(389,1),s(4934))>>s(5038), (eq(389,1),s(4988))>>s(5039), (eq(389,1),s(4989))>>s(5040), (eq(389,1),s(4977))>>s(5041), (eq(389,1),s(4983))>>s(5042), (eq(389,1),s(4979))>>s(5043), (eq(389,1),s(4978))>>s(5044), (eq(389,1),s(4972))>>s(5045), (eq(389,1),s(4973))>>s(5046), (eq(389,1),s(4974))>>s(5047)]

#### Simplifying cost structure of CE 389 
 * Joined equivalent variables [aux(540),s(5011)] into aux(540)
 * Joined equivalent variables [aux(541),s(4998),s(5012)] into aux(541)
 * Joined equivalent variables [aux(542),s(5001),s(5002),s(5003)] into aux(542)
 * Joined equivalent variables [s(5027),s(5028)] into s(5027)

#### Cost of chains of transpose(A,B,C,D,E,F):
* Chain [301]: 4
  with precondition: [A=1,B=0,D=1,E=0,C>=0,F>=0] 

* Chain [300]: 17*s(5009)+17*s(5010)+17*s(5015)+54*s(5016)+17*s(5017)+10*s(5018)+10*s(5019)+26*s(5037)+5*s(5039)+5*s(5040)+52*s(5041)+5*s(5042)+10*s(5043)+5*s(5044)+26*s(5045)+5*s(5046)+5*s(5047)+4
  Such that:s(5009) =< 1
s(4993) =< A+B
s(4995) =< A+B+1
s(4996) =< A+2*B
s(4997) =< A+3*B+2
s(4999) =< 2*A+B
s(4995) =< 2*B+1
s(5005) =< B/2
s(5007) =< 3/2*B
aux(540) =< 1/2
aux(541) =< A
aux(542) =< B
s(5010) =< aux(540)
s(5013) =< aux(541)
s(5014) =< aux(541)
s(5015) =< aux(541)
s(5016) =< aux(541)
s(5017) =< aux(541)
s(5010) =< aux(541)
s(5009) =< aux(541)
s(5009) =< s(4993)
s(5018) =< s(4993)
s(5017) =< s(4999)
s(5010) =< s(4999)
s(5009) =< s(4999)
s(5019) =< s(4999)
s(5014) =< aux(542)
s(5017) =< aux(542)
s(5010) =< aux(542)
s(5009) =< aux(542)
s(5013) =< s(5005)
s(5015) =< s(5005)
s(5017) =< s(5007)
s(5010) =< s(5007)
s(5009) =< s(5007)
s(5019) =< s(5007)
s(5020) =< aux(542)+2
s(5021) =< aux(542)+1
s(5022) =< aux(542)
s(5023) =< s(4995)+1
s(5024) =< s(4995)
s(5025) =< aux(541)
s(5026) =< s(4996)
s(4997) =< s(4996)
s(5010) =< aux(541)+s(5014)+aux(541)+aux(541)+s(5013)+aux(540)
s(5009) =< aux(541)+s(5014)+aux(541)+aux(541)+s(5013)+aux(540)
s(5027) =< s(5015)*aux(542)
s(5029) =< s(5015)*s(4995)
s(5030) =< s(4997)+2
s(5026) =< s(4997)
s(5031) =< s(5016)*s(5020)
s(5032) =< s(5017)*s(5021)
s(5018) =< s(5010)*s(5022)
s(5033) =< s(5017)*s(5023)
s(5034) =< s(5017)*s(5024)
s(5035) =< s(5016)*s(5024)
s(5036) =< s(5016)*s(5022)
s(5009) =< s(5031)+s(5032)+s(5031)+s(5031)+s(5027)+aux(542)
s(5018) =< s(5031)+s(5032)+s(5031)+s(5031)+s(5027)+aux(542)
s(5037) =< s(5034)
s(5037) =< s(5033)
s(5038) =< s(5025)
s(5039) =< s(5037)*s(5030)
s(5040) =< s(5037)*s(5025)
s(5039) =< s(5037)*s(5038)
s(5036) =< s(5035)
s(5041) =< s(5035)
s(5041) =< s(5036)
s(5042) =< s(5041)*s(5026)
s(5043) =< s(5041)*s(5025)
s(5042) =< s(5041)*s(5038)
s(5044) =< s(5041)*s(4997)
s(5044) =< s(5041)*s(5038)
s(5045) =< s(5029)
s(5045) =< s(5027)
s(5046) =< s(5045)*s(4996)
s(5047) =< s(5045)*aux(541)
s(5046) =< s(5045)*s(5025)

  with precondition: [A>=2,B>=1,C>=0,D>=1,E>=0,F>=0,2*A>=E+2,A+D>=E+2,A+2*D>=E+4,A+B+D>=E+4] 


#### Simplifying cost structure of CE 390 

#### Simplifying cost structure of CE 392 

#### Simplifying cost structure of chain [306,308] 

#### Computing cost of phase [305] 

#### Simplifying cost structure of CE 393 

#### Cost of loops [305] 

 * loop 305:mat_mult(A,B,C,D,E,F,G,H,I) -> [mat_mult(A',B',C',D',E',F',G',H',I')] 
16
##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 305: [it(305)=<1]

###### Computing sum for it(305)=<1  in Loop 305 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(305)=<A-1,it(305)=<A-1,it(305)=<A-A',it(305)=<A-A'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [305] 

#### Simplifying cost structure of phase [305] 

#### Cost of phase [305]:mat_mult(A,B,C,D,E,F,G,H,I) -> [mat_mult(A',B',C',D',E',F',G',H',I')] 
16*it(305)+0
  Such that:it(305) =< A
it(305) =< A-A'

#### Simplifying cost structure of chain [[305],306,308] 
 * Renamed intermediate variables: 
[ (eq(391,1),s(5009))>>s(5048), (eq(391,1),s(4993))>>s(5049), (eq(391,1),s(4995))>>s(5050), (eq(391,1),s(4996))>>s(5051), (eq(391,1),s(4997))>>s(5052), (eq(391,1),s(4999))>>s(5053), (eq(391,1),s(5005))>>s(5054), (eq(391,1),s(5007))>>s(5055), (eq(391,1),aux(540))>>s(5056), (eq(391,1),aux(541))>>s(5057), (eq(391,1),aux(542))>>s(5058), (eq(391,1),s(5010))>>s(5059), (eq(391,1),s(5013))>>s(5060), (eq(391,1),s(5014))>>s(5061), (eq(391,1),s(5015))>>s(5062), (eq(391,1),s(5016))>>s(5063), (eq(391,1),s(5017))>>s(5064), (eq(391,1),s(5018))>>s(5065), (eq(391,1),s(5019))>>s(5066), (eq(391,1),s(5020))>>s(5067), (eq(391,1),s(5021))>>s(5068), (eq(391,1),s(5022))>>s(5069), (eq(391,1),s(5023))>>s(5070), (eq(391,1),s(5024))>>s(5071), (eq(391,1),s(5025))>>s(5072), (eq(391,1),s(5026))>>s(5073), (eq(391,1),s(5027))>>s(5074), (eq(391,1),s(5029))>>s(5075), (eq(391,1),s(5030))>>s(5076), (eq(391,1),s(5031))>>s(5077), (eq(391,1),s(5032))>>s(5078), (eq(391,1),s(5033))>>s(5079), (eq(391,1),s(5034))>>s(5080), (eq(391,1),s(5035))>>s(5081), (eq(391,1),s(5036))>>s(5082), (eq(391,1),s(5037))>>s(5083), (eq(391,1),s(5038))>>s(5084), (eq(391,1),s(5039))>>s(5085), (eq(391,1),s(5040))>>s(5086), (eq(391,1),s(5041))>>s(5087), (eq(391,1),s(5042))>>s(5088), (eq(391,1),s(5043))>>s(5089), (eq(391,1),s(5044))>>s(5090), (eq(391,1),s(5045))>>s(5091), (eq(391,1),s(5046))>>s(5092), (eq(391,1),s(5047))>>s(5093)]

#### Simplifying cost structure of CE 391 

#### Computing cost of phase [302,303] 
 * Renamed intermediate variables: 
[ (eq(394,1),s(5009))>>s(5094), (eq(394,1),s(4993))>>s(5095), (eq(394,1),s(4995))>>s(5096), (eq(394,1),s(4996))>>s(5097), (eq(394,1),s(4997))>>s(5098), (eq(394,1),s(4999))>>s(5099), (eq(394,1),s(5005))>>s(5100), (eq(394,1),s(5007))>>s(5101), (eq(394,1),aux(540))>>s(5102), (eq(394,1),aux(541))>>s(5103), (eq(394,1),aux(542))>>s(5104), (eq(394,1),s(5010))>>s(5105), (eq(394,1),s(5013))>>s(5106), (eq(394,1),s(5014))>>s(5107), (eq(394,1),s(5015))>>s(5108), (eq(394,1),s(5016))>>s(5109), (eq(394,1),s(5017))>>s(5110), (eq(394,1),s(5018))>>s(5111), (eq(394,1),s(5019))>>s(5112), (eq(394,1),s(5020))>>s(5113), (eq(394,1),s(5021))>>s(5114), (eq(394,1),s(5022))>>s(5115), (eq(394,1),s(5023))>>s(5116), (eq(394,1),s(5024))>>s(5117), (eq(394,1),s(5025))>>s(5118), (eq(394,1),s(5026))>>s(5119), (eq(394,1),s(5027))>>s(5120), (eq(394,1),s(5029))>>s(5121), (eq(394,1),s(5030))>>s(5122), (eq(394,1),s(5031))>>s(5123), (eq(394,1),s(5032))>>s(5124), (eq(394,1),s(5033))>>s(5125), (eq(394,1),s(5034))>>s(5126), (eq(394,1),s(5035))>>s(5127), (eq(394,1),s(5036))>>s(5128), (eq(394,1),s(5037))>>s(5129), (eq(394,1),s(5038))>>s(5130), (eq(394,1),s(5039))>>s(5131), (eq(394,1),s(5040))>>s(5132), (eq(394,1),s(5041))>>s(5133), (eq(394,1),s(5042))>>s(5134), (eq(394,1),s(5043))>>s(5135), (eq(394,1),s(5044))>>s(5136), (eq(394,1),s(5045))>>s(5137), (eq(394,1),s(5046))>>s(5138), (eq(394,1),s(5047))>>s(5139)]
 * Renamed intermediate variables: 
[ (eq(394,2),it(289))>>s(5140)]

#### Simplifying cost structure of CE 394 
 * Renamed intermediate variables: 
[ (eq(398,1),s(5009))>>s(5141), (eq(398,1),s(4993))>>s(5142), (eq(398,1),s(4995))>>s(5143), (eq(398,1),s(4996))>>s(5144), (eq(398,1),s(4997))>>s(5145), (eq(398,1),s(4999))>>s(5146), (eq(398,1),s(5005))>>s(5147), (eq(398,1),s(5007))>>s(5148), (eq(398,1),aux(540))>>s(5149), (eq(398,1),aux(541))>>s(5150), (eq(398,1),aux(542))>>s(5151), (eq(398,1),s(5010))>>s(5152), (eq(398,1),s(5013))>>s(5153), (eq(398,1),s(5014))>>s(5154), (eq(398,1),s(5015))>>s(5155), (eq(398,1),s(5016))>>s(5156), (eq(398,1),s(5017))>>s(5157), (eq(398,1),s(5018))>>s(5158), (eq(398,1),s(5019))>>s(5159), (eq(398,1),s(5020))>>s(5160), (eq(398,1),s(5021))>>s(5161), (eq(398,1),s(5022))>>s(5162), (eq(398,1),s(5023))>>s(5163), (eq(398,1),s(5024))>>s(5164), (eq(398,1),s(5025))>>s(5165), (eq(398,1),s(5026))>>s(5166), (eq(398,1),s(5027))>>s(5167), (eq(398,1),s(5029))>>s(5168), (eq(398,1),s(5030))>>s(5169), (eq(398,1),s(5031))>>s(5170), (eq(398,1),s(5032))>>s(5171), (eq(398,1),s(5033))>>s(5172), (eq(398,1),s(5034))>>s(5173), (eq(398,1),s(5035))>>s(5174), (eq(398,1),s(5036))>>s(5175), (eq(398,1),s(5037))>>s(5176), (eq(398,1),s(5038))>>s(5177), (eq(398,1),s(5039))>>s(5178), (eq(398,1),s(5040))>>s(5179), (eq(398,1),s(5041))>>s(5180), (eq(398,1),s(5042))>>s(5181), (eq(398,1),s(5043))>>s(5182), (eq(398,1),s(5044))>>s(5183), (eq(398,1),s(5045))>>s(5184), (eq(398,1),s(5046))>>s(5185), (eq(398,1),s(5047))>>s(5186)]
 * Renamed intermediate variables: 
[ (eq(398,2),aux(496))>>s(5187), (eq(398,2),aux(495))>>s(5188), (eq(398,2),it(288))>>s(5189), (eq(398,2),s(4902))>>s(5190), (eq(398,2),s(4901))>>s(5191), (eq(398,2),s(4900))>>s(5192)]

#### Simplifying cost structure of CE 398 
 * Joined equivalent variables [aux(544),s(5102),s(5149)] into aux(544)
 * Joined equivalent variables [aux(545),s(5103),s(5150)] into aux(545)
 * Joined equivalent variables [aux(546),s(5095),s(5142)] into aux(546)
 * Joined equivalent variables [aux(548),s(5097),s(5144)] into aux(548)
 * Joined equivalent variables [aux(550),s(5099),s(5146)] into aux(550)
 * Joined equivalent variables [aux(551),s(5104),s(5151)] into aux(551)
 * Joined equivalent variables [aux(553),s(5100),s(5147)] into aux(553)
 * Joined equivalent variables [aux(554),s(5101),s(5148)] into aux(554)
 * Joined equivalent variables [s(5140),s(5189),s(5191),s(5192)] into s(5140)
 * Joined equivalent variables [s(5096),s(5143)] into s(5096)
 * Joined equivalent variables [s(5116),s(5163)] into s(5116)
 * Joined equivalent variables [s(5117),s(5164)] into s(5117)
 * Joined equivalent variables [s(5113),s(5160)] into s(5113)
 * Joined equivalent variables [s(5114),s(5161)] into s(5114)
 * Joined equivalent variables [s(5115),s(5162)] into s(5115)
 * Joined equivalent variables [s(5118),s(5165)] into s(5118)
 * Joined equivalent variables [s(5098),s(5145)] into s(5098)
 * Joined equivalent variables [s(5109),s(5156)] into s(5109)
 * Joined equivalent variables [s(5110),s(5157)] into s(5110)
 * Joined equivalent variables [s(5108),s(5155)] into s(5108)
 * Joined equivalent variables [s(5112),s(5159)] into s(5112)
 * Joined equivalent variables [s(5107),s(5154)] into s(5107)
 * Joined equivalent variables [s(5106),s(5153)] into s(5106)
 * Joined equivalent variables [s(5121),s(5168)] into s(5121)
 * Joined equivalent variables [s(5122),s(5169)] into s(5122)
 * Joined equivalent variables [s(5119),s(5166)] into s(5119)
 * Joined equivalent variables [s(5123),s(5170)] into s(5123)
 * Joined equivalent variables [s(5124),s(5171)] into s(5124)
 * Joined equivalent variables [s(5125),s(5172)] into s(5125)
 * Joined equivalent variables [s(5126),s(5173)] into s(5126)
 * Joined equivalent variables [s(5127),s(5174)] into s(5127)
 * Joined equivalent variables [s(5130),s(5177)] into s(5130)
 * Joined equivalent variables [s(5105),s(5152)] into s(5105)
 * Joined equivalent variables [s(5120),s(5167)] into s(5120)
 * Joined equivalent variables [s(5111),s(5158)] into s(5111)
 * Joined equivalent variables [s(5128),s(5175)] into s(5128)
 * Joined equivalent variables [s(5094),s(5141)] into s(5094)
 * Joined equivalent variables [s(5137),s(5184)] into s(5137)
 * Joined equivalent variables [s(5129),s(5176)] into s(5129)
 * Joined equivalent variables [s(5131),s(5178)] into s(5131)
 * Joined equivalent variables [s(5132),s(5179)] into s(5132)
 * Joined equivalent variables [s(5138),s(5185)] into s(5138)
 * Joined equivalent variables [s(5139),s(5186)] into s(5139)
 * Joined equivalent variables [s(5133),s(5180)] into s(5133)
 * Joined equivalent variables [s(5134),s(5181)] into s(5134)
 * Joined equivalent variables [s(5135),s(5182)] into s(5135)
 * Joined equivalent variables [s(5136),s(5183)] into s(5136)
 * Renamed intermediate variables: 
[ (it(302),aux(543))>>s(5193), (it(302),aux(544))>>s(5194), (it(302),aux(545))>>s(5195), (it(302),aux(546))>>s(5196), (it(302),aux(547))>>s(5197), (it(302),aux(548))>>s(5198), (it(302),aux(549))>>s(5199), (it(302),aux(550))>>s(5200), (it(302),aux(551))>>s(5201), (it(302),aux(552))>>s(5202), (it(302),aux(553))>>s(5203), (it(302),aux(554))>>s(5204), (it(302),s(5094))>>s(5205), (it(302),s(5096))>>s(5206), (it(302),s(5098))>>s(5207), (it(302),s(5105))>>s(5208), (it(302),s(5106))>>s(5209), (it(302),s(5107))>>s(5210), (it(302),s(5108))>>s(5211), (it(302),s(5109))>>s(5212), (it(302),s(5110))>>s(5213), (it(302),s(5111))>>s(5214), (it(302),s(5112))>>s(5215), (it(302),s(5113))>>s(5216), (it(302),s(5114))>>s(5217), (it(302),s(5115))>>s(5218), (it(302),s(5116))>>s(5219), (it(302),s(5117))>>s(5220), (it(302),s(5118))>>s(5221), (it(302),s(5119))>>s(5222), (it(302),s(5120))>>s(5223), (it(302),s(5121))>>s(5224), (it(302),s(5122))>>s(5225), (it(302),s(5123))>>s(5226), (it(302),s(5124))>>s(5227), (it(302),s(5125))>>s(5228), (it(302),s(5126))>>s(5229), (it(302),s(5127))>>s(5230), (it(302),s(5128))>>s(5231), (it(302),s(5129))>>s(5232), (it(302),s(5130))>>s(5233), (it(302),s(5131))>>s(5234), (it(302),s(5132))>>s(5235), (it(302),s(5133))>>s(5236), (it(302),s(5134))>>s(5237), (it(302),s(5135))>>s(5238), (it(302),s(5136))>>s(5239), (it(302),s(5137))>>s(5240), (it(302),s(5138))>>s(5241), (it(302),s(5139))>>s(5242), (it(302),s(5140))>>s(5243)]
 * Renamed intermediate variables: 
[ (eq(395,1),s(5009))>>s(5244), (eq(395,1),s(4993))>>s(5245), (eq(395,1),s(4995))>>s(5246), (eq(395,1),s(4996))>>s(5247), (eq(395,1),s(4997))>>s(5248), (eq(395,1),s(4999))>>s(5249), (eq(395,1),s(5005))>>s(5250), (eq(395,1),s(5007))>>s(5251), (eq(395,1),aux(540))>>s(5252), (eq(395,1),aux(541))>>s(5253), (eq(395,1),aux(542))>>s(5254), (eq(395,1),s(5010))>>s(5255), (eq(395,1),s(5013))>>s(5256), (eq(395,1),s(5014))>>s(5257), (eq(395,1),s(5015))>>s(5258), (eq(395,1),s(5016))>>s(5259), (eq(395,1),s(5017))>>s(5260), (eq(395,1),s(5018))>>s(5261), (eq(395,1),s(5019))>>s(5262), (eq(395,1),s(5020))>>s(5263), (eq(395,1),s(5021))>>s(5264), (eq(395,1),s(5022))>>s(5265), (eq(395,1),s(5023))>>s(5266), (eq(395,1),s(5024))>>s(5267), (eq(395,1),s(5025))>>s(5268), (eq(395,1),s(5026))>>s(5269), (eq(395,1),s(5027))>>s(5270), (eq(395,1),s(5029))>>s(5271), (eq(395,1),s(5030))>>s(5272), (eq(395,1),s(5031))>>s(5273), (eq(395,1),s(5032))>>s(5274), (eq(395,1),s(5033))>>s(5275), (eq(395,1),s(5034))>>s(5276), (eq(395,1),s(5035))>>s(5277), (eq(395,1),s(5036))>>s(5278), (eq(395,1),s(5037))>>s(5279), (eq(395,1),s(5038))>>s(5280), (eq(395,1),s(5039))>>s(5281), (eq(395,1),s(5040))>>s(5282), (eq(395,1),s(5041))>>s(5283), (eq(395,1),s(5042))>>s(5284), (eq(395,1),s(5043))>>s(5285), (eq(395,1),s(5044))>>s(5286), (eq(395,1),s(5045))>>s(5287), (eq(395,1),s(5046))>>s(5288), (eq(395,1),s(5047))>>s(5289)]
 * Renamed intermediate variables: 
[ (eq(395,2),it(289))>>s(5290)]

#### Simplifying cost structure of CE 395 
 * Renamed intermediate variables: 
[ (eq(397,1),s(5009))>>s(5291), (eq(397,1),s(4993))>>s(5292), (eq(397,1),s(4995))>>s(5293), (eq(397,1),s(4996))>>s(5294), (eq(397,1),s(4997))>>s(5295), (eq(397,1),s(4999))>>s(5296), (eq(397,1),s(5005))>>s(5297), (eq(397,1),s(5007))>>s(5298), (eq(397,1),aux(540))>>s(5299), (eq(397,1),aux(541))>>s(5300), (eq(397,1),aux(542))>>s(5301), (eq(397,1),s(5010))>>s(5302), (eq(397,1),s(5013))>>s(5303), (eq(397,1),s(5014))>>s(5304), (eq(397,1),s(5015))>>s(5305), (eq(397,1),s(5016))>>s(5306), (eq(397,1),s(5017))>>s(5307), (eq(397,1),s(5018))>>s(5308), (eq(397,1),s(5019))>>s(5309), (eq(397,1),s(5020))>>s(5310), (eq(397,1),s(5021))>>s(5311), (eq(397,1),s(5022))>>s(5312), (eq(397,1),s(5023))>>s(5313), (eq(397,1),s(5024))>>s(5314), (eq(397,1),s(5025))>>s(5315), (eq(397,1),s(5026))>>s(5316), (eq(397,1),s(5027))>>s(5317), (eq(397,1),s(5029))>>s(5318), (eq(397,1),s(5030))>>s(5319), (eq(397,1),s(5031))>>s(5320), (eq(397,1),s(5032))>>s(5321), (eq(397,1),s(5033))>>s(5322), (eq(397,1),s(5034))>>s(5323), (eq(397,1),s(5035))>>s(5324), (eq(397,1),s(5036))>>s(5325), (eq(397,1),s(5037))>>s(5326), (eq(397,1),s(5038))>>s(5327), (eq(397,1),s(5039))>>s(5328), (eq(397,1),s(5040))>>s(5329), (eq(397,1),s(5041))>>s(5330), (eq(397,1),s(5042))>>s(5331), (eq(397,1),s(5043))>>s(5332), (eq(397,1),s(5044))>>s(5333), (eq(397,1),s(5045))>>s(5334), (eq(397,1),s(5046))>>s(5335), (eq(397,1),s(5047))>>s(5336)]

#### Simplifying cost structure of CE 397 
 * Renamed intermediate variables: 
[ (eq(399,1),s(5009))>>s(5337), (eq(399,1),s(4993))>>s(5338), (eq(399,1),s(4995))>>s(5339), (eq(399,1),s(4996))>>s(5340), (eq(399,1),s(4997))>>s(5341), (eq(399,1),s(4999))>>s(5342), (eq(399,1),s(5005))>>s(5343), (eq(399,1),s(5007))>>s(5344), (eq(399,1),aux(540))>>s(5345), (eq(399,1),aux(541))>>s(5346), (eq(399,1),aux(542))>>s(5347), (eq(399,1),s(5010))>>s(5348), (eq(399,1),s(5013))>>s(5349), (eq(399,1),s(5014))>>s(5350), (eq(399,1),s(5015))>>s(5351), (eq(399,1),s(5016))>>s(5352), (eq(399,1),s(5017))>>s(5353), (eq(399,1),s(5018))>>s(5354), (eq(399,1),s(5019))>>s(5355), (eq(399,1),s(5020))>>s(5356), (eq(399,1),s(5021))>>s(5357), (eq(399,1),s(5022))>>s(5358), (eq(399,1),s(5023))>>s(5359), (eq(399,1),s(5024))>>s(5360), (eq(399,1),s(5025))>>s(5361), (eq(399,1),s(5026))>>s(5362), (eq(399,1),s(5027))>>s(5363), (eq(399,1),s(5029))>>s(5364), (eq(399,1),s(5030))>>s(5365), (eq(399,1),s(5031))>>s(5366), (eq(399,1),s(5032))>>s(5367), (eq(399,1),s(5033))>>s(5368), (eq(399,1),s(5034))>>s(5369), (eq(399,1),s(5035))>>s(5370), (eq(399,1),s(5036))>>s(5371), (eq(399,1),s(5037))>>s(5372), (eq(399,1),s(5038))>>s(5373), (eq(399,1),s(5039))>>s(5374), (eq(399,1),s(5040))>>s(5375), (eq(399,1),s(5041))>>s(5376), (eq(399,1),s(5042))>>s(5377), (eq(399,1),s(5043))>>s(5378), (eq(399,1),s(5044))>>s(5379), (eq(399,1),s(5045))>>s(5380), (eq(399,1),s(5046))>>s(5381), (eq(399,1),s(5047))>>s(5382)]
 * Renamed intermediate variables: 
[ (eq(399,2),aux(496))>>s(5383), (eq(399,2),aux(495))>>s(5384), (eq(399,2),it(288))>>s(5385), (eq(399,2),s(4902))>>s(5386), (eq(399,2),s(4901))>>s(5387), (eq(399,2),s(4900))>>s(5388)]

#### Simplifying cost structure of CE 399 
 * Joined equivalent variables [aux(556),s(5252),s(5299),s(5345)] into aux(556)
 * Joined equivalent variables [aux(557),s(5253),s(5300),s(5346)] into aux(557)
 * Joined equivalent variables [aux(558),s(5245),s(5292),s(5338)] into aux(558)
 * Joined equivalent variables [aux(560),s(5247),s(5294),s(5340)] into aux(560)
 * Joined equivalent variables [aux(562),s(5249),s(5296),s(5342)] into aux(562)
 * Joined equivalent variables [aux(563),s(5254),s(5301),s(5347)] into aux(563)
 * Joined equivalent variables [aux(565),s(5250),s(5297),s(5343)] into aux(565)
 * Joined equivalent variables [aux(566),s(5251),s(5298),s(5344)] into aux(566)
 * Joined equivalent variables [s(5290),s(5385),s(5387),s(5388)] into s(5290)
 * Joined equivalent variables [s(5246),s(5293),s(5339)] into s(5246)
 * Joined equivalent variables [s(5266),s(5313),s(5359)] into s(5266)
 * Joined equivalent variables [s(5267),s(5314),s(5360)] into s(5267)
 * Joined equivalent variables [s(5263),s(5310),s(5356)] into s(5263)
 * Joined equivalent variables [s(5264),s(5311),s(5357)] into s(5264)
 * Joined equivalent variables [s(5265),s(5312),s(5358)] into s(5265)
 * Joined equivalent variables [s(5268),s(5315),s(5361)] into s(5268)
 * Joined equivalent variables [s(5248),s(5295),s(5341)] into s(5248)
 * Joined equivalent variables [s(5259),s(5306),s(5352)] into s(5259)
 * Joined equivalent variables [s(5260),s(5307),s(5353)] into s(5260)
 * Joined equivalent variables [s(5258),s(5305),s(5351)] into s(5258)
 * Joined equivalent variables [s(5262),s(5309),s(5355)] into s(5262)
 * Joined equivalent variables [s(5257),s(5304),s(5350)] into s(5257)
 * Joined equivalent variables [s(5256),s(5303),s(5349)] into s(5256)
 * Joined equivalent variables [s(5271),s(5318),s(5364)] into s(5271)
 * Joined equivalent variables [s(5272),s(5319),s(5365)] into s(5272)
 * Joined equivalent variables [s(5269),s(5316),s(5362)] into s(5269)
 * Joined equivalent variables [s(5273),s(5320),s(5366)] into s(5273)
 * Joined equivalent variables [s(5274),s(5321),s(5367)] into s(5274)
 * Joined equivalent variables [s(5275),s(5322),s(5368)] into s(5275)
 * Joined equivalent variables [s(5276),s(5323),s(5369)] into s(5276)
 * Joined equivalent variables [s(5277),s(5324),s(5370)] into s(5277)
 * Joined equivalent variables [s(5280),s(5327),s(5373)] into s(5280)
 * Joined equivalent variables [s(5255),s(5302),s(5348)] into s(5255)
 * Joined equivalent variables [s(5270),s(5317),s(5363)] into s(5270)
 * Joined equivalent variables [s(5261),s(5308),s(5354)] into s(5261)
 * Joined equivalent variables [s(5278),s(5325),s(5371)] into s(5278)
 * Joined equivalent variables [s(5244),s(5291),s(5337)] into s(5244)
 * Joined equivalent variables [s(5287),s(5334),s(5380)] into s(5287)
 * Joined equivalent variables [s(5279),s(5326),s(5372)] into s(5279)
 * Joined equivalent variables [s(5281),s(5328),s(5374)] into s(5281)
 * Joined equivalent variables [s(5282),s(5329),s(5375)] into s(5282)
 * Joined equivalent variables [s(5288),s(5335),s(5381)] into s(5288)
 * Joined equivalent variables [s(5289),s(5336),s(5382)] into s(5289)
 * Joined equivalent variables [s(5283),s(5330),s(5376)] into s(5283)
 * Joined equivalent variables [s(5284),s(5331),s(5377)] into s(5284)
 * Joined equivalent variables [s(5285),s(5332),s(5378)] into s(5285)
 * Joined equivalent variables [s(5286),s(5333),s(5379)] into s(5286)
 * Renamed intermediate variables: 
[ (it(303),aux(555))>>s(5389), (it(303),aux(556))>>s(5390), (it(303),aux(557))>>s(5391), (it(303),aux(558))>>s(5392), (it(303),aux(559))>>s(5393), (it(303),aux(560))>>s(5394), (it(303),aux(561))>>s(5395), (it(303),aux(562))>>s(5396), (it(303),aux(563))>>s(5397), (it(303),aux(564))>>s(5398), (it(303),aux(565))>>s(5399), (it(303),aux(566))>>s(5400), (it(303),s(5244))>>s(5401), (it(303),s(5246))>>s(5402), (it(303),s(5248))>>s(5403), (it(303),s(5255))>>s(5404), (it(303),s(5256))>>s(5405), (it(303),s(5257))>>s(5406), (it(303),s(5258))>>s(5407), (it(303),s(5259))>>s(5408), (it(303),s(5260))>>s(5409), (it(303),s(5261))>>s(5410), (it(303),s(5262))>>s(5411), (it(303),s(5263))>>s(5412), (it(303),s(5264))>>s(5413), (it(303),s(5265))>>s(5414), (it(303),s(5266))>>s(5415), (it(303),s(5267))>>s(5416), (it(303),s(5268))>>s(5417), (it(303),s(5269))>>s(5418), (it(303),s(5270))>>s(5419), (it(303),s(5271))>>s(5420), (it(303),s(5272))>>s(5421), (it(303),s(5273))>>s(5422), (it(303),s(5274))>>s(5423), (it(303),s(5275))>>s(5424), (it(303),s(5276))>>s(5425), (it(303),s(5277))>>s(5426), (it(303),s(5278))>>s(5427), (it(303),s(5279))>>s(5428), (it(303),s(5280))>>s(5429), (it(303),s(5281))>>s(5430), (it(303),s(5282))>>s(5431), (it(303),s(5283))>>s(5432), (it(303),s(5284))>>s(5433), (it(303),s(5285))>>s(5434), (it(303),s(5286))>>s(5435), (it(303),s(5287))>>s(5436), (it(303),s(5288))>>s(5437), (it(303),s(5289))>>s(5438), (it(303),s(5290))>>s(5439)]

#### Cost of loops [302,303] 

 * loop 302:mat_mult(A,B,C,D,E,F,G,H,I) -> [mat_mult(A',B',C',D',E',F',G',H',I')] 
34*s(5205)+34*s(5208)+34*s(5211)+108*s(5212)+34*s(5213)+20*s(5214)+20*s(5215)+52*s(5232)+10*s(5234)+10*s(5235)+104*s(5236)+10*s(5237)+20*s(5238)+10*s(5239)+52*s(5240)+10*s(5241)+10*s(5242)+39*s(5243)+16
  Such that:s(5193) =< 1
s(5194) =< 1/2
s(5195) =< D'
s(5196) =< D'+E'
s(5197) =< D'+E'+1
s(5198) =< D'+2*E'
s(5199) =< D'+3*E'+2
s(5200) =< 2*D'+E'
s(5201) =< E'
s(5202) =< 2*E'+1
s(5203) =< E'/2
s(5204) =< 3/2*E'
s(5205) =< s(5193)
s(5206) =< s(5197)
s(5207) =< s(5199)
s(5206) =< s(5202)
s(5208) =< s(5194)
s(5209) =< s(5195)
s(5210) =< s(5195)
s(5211) =< s(5195)
s(5212) =< s(5195)
s(5213) =< s(5195)
s(5208) =< s(5195)
s(5205) =< s(5195)
s(5205) =< s(5196)
s(5214) =< s(5196)
s(5213) =< s(5200)
s(5208) =< s(5200)
s(5205) =< s(5200)
s(5215) =< s(5200)
s(5210) =< s(5201)
s(5213) =< s(5201)
s(5208) =< s(5201)
s(5205) =< s(5201)
s(5209) =< s(5203)
s(5211) =< s(5203)
s(5213) =< s(5204)
s(5208) =< s(5204)
s(5205) =< s(5204)
s(5215) =< s(5204)
s(5216) =< s(5201)+2
s(5217) =< s(5201)+1
s(5218) =< s(5201)
s(5219) =< s(5206)+1
s(5220) =< s(5206)
s(5221) =< s(5195)
s(5222) =< s(5198)
s(5207) =< s(5198)
s(5208) =< s(5195)+s(5210)+s(5195)+s(5195)+s(5209)+s(5194)
s(5205) =< s(5195)+s(5210)+s(5195)+s(5195)+s(5209)+s(5194)
s(5223) =< s(5211)*s(5201)
s(5224) =< s(5211)*s(5206)
s(5225) =< s(5207)+2
s(5222) =< s(5207)
s(5226) =< s(5212)*s(5216)
s(5227) =< s(5213)*s(5217)
s(5214) =< s(5208)*s(5218)
s(5228) =< s(5213)*s(5219)
s(5229) =< s(5213)*s(5220)
s(5230) =< s(5212)*s(5220)
s(5231) =< s(5212)*s(5218)
s(5205) =< s(5226)+s(5227)+s(5226)+s(5226)+s(5223)+s(5201)
s(5214) =< s(5226)+s(5227)+s(5226)+s(5226)+s(5223)+s(5201)
s(5232) =< s(5229)
s(5232) =< s(5228)
s(5233) =< s(5221)
s(5234) =< s(5232)*s(5225)
s(5235) =< s(5232)*s(5221)
s(5234) =< s(5232)*s(5233)
s(5231) =< s(5230)
s(5236) =< s(5230)
s(5236) =< s(5231)
s(5237) =< s(5236)*s(5222)
s(5238) =< s(5236)*s(5221)
s(5237) =< s(5236)*s(5233)
s(5239) =< s(5236)*s(5207)
s(5239) =< s(5236)*s(5233)
s(5240) =< s(5224)
s(5240) =< s(5223)
s(5241) =< s(5240)*s(5198)
s(5242) =< s(5240)*s(5195)
s(5241) =< s(5240)*s(5221)

Unbounded itvars
s(5243) :  it(302),s(5140)

 * loop 303:mat_mult(A,B,C,D,E,F,G,H,I) -> [mat_mult(A',B',C',D',E',F',G',H',I')] 
51*s(5401)+51*s(5404)+51*s(5407)+162*s(5408)+51*s(5409)+30*s(5410)+30*s(5411)+78*s(5428)+15*s(5430)+15*s(5431)+156*s(5432)+15*s(5433)+30*s(5434)+15*s(5435)+78*s(5436)+15*s(5437)+15*s(5438)+39*s(5439)+16
  Such that:s(5389) =< 1
s(5390) =< 1/2
s(5391) =< D'
s(5392) =< D'+E'
s(5393) =< D'+E'+1
s(5394) =< D'+2*E'
s(5395) =< D'+3*E'+2
s(5396) =< 2*D'+E'
s(5397) =< E'
s(5398) =< 2*E'+1
s(5399) =< E'/2
s(5400) =< 3/2*E'
s(5401) =< s(5389)
s(5402) =< s(5393)
s(5403) =< s(5395)
s(5402) =< s(5398)
s(5404) =< s(5390)
s(5405) =< s(5391)
s(5406) =< s(5391)
s(5407) =< s(5391)
s(5408) =< s(5391)
s(5409) =< s(5391)
s(5404) =< s(5391)
s(5401) =< s(5391)
s(5401) =< s(5392)
s(5410) =< s(5392)
s(5409) =< s(5396)
s(5404) =< s(5396)
s(5401) =< s(5396)
s(5411) =< s(5396)
s(5406) =< s(5397)
s(5409) =< s(5397)
s(5404) =< s(5397)
s(5401) =< s(5397)
s(5405) =< s(5399)
s(5407) =< s(5399)
s(5409) =< s(5400)
s(5404) =< s(5400)
s(5401) =< s(5400)
s(5411) =< s(5400)
s(5412) =< s(5397)+2
s(5413) =< s(5397)+1
s(5414) =< s(5397)
s(5415) =< s(5402)+1
s(5416) =< s(5402)
s(5417) =< s(5391)
s(5418) =< s(5394)
s(5403) =< s(5394)
s(5404) =< s(5391)+s(5406)+s(5391)+s(5391)+s(5405)+s(5390)
s(5401) =< s(5391)+s(5406)+s(5391)+s(5391)+s(5405)+s(5390)
s(5419) =< s(5407)*s(5397)
s(5420) =< s(5407)*s(5402)
s(5421) =< s(5403)+2
s(5418) =< s(5403)
s(5422) =< s(5408)*s(5412)
s(5423) =< s(5409)*s(5413)
s(5410) =< s(5404)*s(5414)
s(5424) =< s(5409)*s(5415)
s(5425) =< s(5409)*s(5416)
s(5426) =< s(5408)*s(5416)
s(5427) =< s(5408)*s(5414)
s(5401) =< s(5422)+s(5423)+s(5422)+s(5422)+s(5419)+s(5397)
s(5410) =< s(5422)+s(5423)+s(5422)+s(5422)+s(5419)+s(5397)
s(5428) =< s(5425)
s(5428) =< s(5424)
s(5429) =< s(5417)
s(5430) =< s(5428)*s(5421)
s(5431) =< s(5428)*s(5417)
s(5430) =< s(5428)*s(5429)
s(5427) =< s(5426)
s(5432) =< s(5426)
s(5432) =< s(5427)
s(5433) =< s(5432)*s(5418)
s(5434) =< s(5432)*s(5417)
s(5433) =< s(5432)*s(5429)
s(5435) =< s(5432)*s(5403)
s(5435) =< s(5432)*s(5429)
s(5436) =< s(5420)
s(5436) =< s(5419)
s(5437) =< s(5436)*s(5394)
s(5438) =< s(5436)*s(5391)
s(5437) =< s(5436)*s(5417)

Unbounded itvars
s(5439) :  it(303),s(5290)

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(5195)=<D,s(5391)=<D,s(5197)=<D+E+1,s(5393)=<D+E+1,s(5198)=<D+2*E,s(5394)=<D+2*E,s(5199)=<D+3*E+2,s(5395)=<D+3*E+2,s(5201)=<E,s(5397)=<E,s(5202)=<2*E+1,s(5398)=<2*E+1]
* Psum in Loop 302: [it(302)=<1,s(5475)=<1,s(5467)=<1/2,s(5469)=<D',s(5474)=<D'+E',s(5473)=<2*D'+E',s(5464)=<E',s(5472)=<E'/2,s(5471)=<3/2*E']
* Psum in Loop 303: [it(303)=<1,s(5511)=<1,s(5503)=<1/2,s(5505)=<D',s(5510)=<D'+E',s(5509)=<2*D'+E',s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing max_min for s(5195)=<D  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(5195)=<D] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(5391)=<D,s(5197)=<D+E+1,s(5393)=<D+E+1,s(5198)=<D+2*E,s(5394)=<D+2*E,s(5199)=<D+3*E+2,s(5395)=<D+3*E+2,s(5201)=<E,s(5397)=<E,s(5202)=<2*E+1,s(5398)=<2*E+1]
* Psum in Loop 302: [it(302)=<1,s(5475)=<1,s(5467)=<1/2,s(5469)=<D',s(5474)=<D'+E',s(5473)=<2*D'+E',s(5464)=<E',s(5472)=<E'/2,s(5471)=<3/2*E']
* Psum in Loop 303: [it(303)=<1,s(5511)=<1,s(5503)=<1/2,s(5505)=<D',s(5510)=<D'+E',s(5509)=<2*D'+E',s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing max_min for s(5391)=<D  
   - Found a solution using cacheing 
 * Adding constraints:[s(5391)=<s(5195)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(5197)=<D+E+1,s(5393)=<D+E+1,s(5198)=<D+2*E,s(5394)=<D+2*E,s(5199)=<D+3*E+2,s(5395)=<D+3*E+2,s(5201)=<E,s(5397)=<E,s(5202)=<2*E+1,s(5398)=<2*E+1]
* Psum in Loop 302: [it(302)=<1,s(5475)=<1,s(5467)=<1/2,s(5469)=<D',s(5474)=<D'+E',s(5473)=<2*D'+E',s(5464)=<E',s(5472)=<E'/2,s(5471)=<3/2*E']
* Psum in Loop 303: [it(303)=<1,s(5511)=<1,s(5503)=<1/2,s(5505)=<D',s(5510)=<D'+E',s(5509)=<2*D'+E',s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing max_min for s(5197)=<D+E+1  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(5197)=<D+E+1] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(5393)=<D+E+1,s(5198)=<D+2*E,s(5394)=<D+2*E,s(5199)=<D+3*E+2,s(5395)=<D+3*E+2,s(5201)=<E,s(5397)=<E,s(5202)=<2*E+1,s(5398)=<2*E+1]
* Psum in Loop 302: [it(302)=<1,s(5475)=<1,s(5467)=<1/2,s(5469)=<D',s(5474)=<D'+E',s(5473)=<2*D'+E',s(5464)=<E',s(5472)=<E'/2,s(5471)=<3/2*E']
* Psum in Loop 303: [it(303)=<1,s(5511)=<1,s(5503)=<1/2,s(5505)=<D',s(5510)=<D'+E',s(5509)=<2*D'+E',s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing max_min for s(5393)=<D+E+1  
   - Found a solution using cacheing 
 * Adding constraints:[s(5393)=<s(5197)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(5198)=<D+2*E,s(5394)=<D+2*E,s(5199)=<D+3*E+2,s(5395)=<D+3*E+2,s(5201)=<E,s(5397)=<E,s(5202)=<2*E+1,s(5398)=<2*E+1]
* Psum in Loop 302: [it(302)=<1,s(5475)=<1,s(5467)=<1/2,s(5469)=<D',s(5474)=<D'+E',s(5473)=<2*D'+E',s(5464)=<E',s(5472)=<E'/2,s(5471)=<3/2*E']
* Psum in Loop 303: [it(303)=<1,s(5511)=<1,s(5503)=<1/2,s(5505)=<D',s(5510)=<D'+E',s(5509)=<2*D'+E',s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing max_min for s(5198)=<D+2*E  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(5198)=<D+2*E] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(5394)=<D+2*E,s(5199)=<D+3*E+2,s(5395)=<D+3*E+2,s(5201)=<E,s(5397)=<E,s(5202)=<2*E+1,s(5398)=<2*E+1]
* Psum in Loop 302: [it(302)=<1,s(5475)=<1,s(5467)=<1/2,s(5469)=<D',s(5474)=<D'+E',s(5473)=<2*D'+E',s(5464)=<E',s(5472)=<E'/2,s(5471)=<3/2*E']
* Psum in Loop 303: [it(303)=<1,s(5511)=<1,s(5503)=<1/2,s(5505)=<D',s(5510)=<D'+E',s(5509)=<2*D'+E',s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing max_min for s(5394)=<D+2*E  
   - Found a solution using cacheing 
 * Adding constraints:[s(5394)=<s(5198)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(5199)=<D+3*E+2,s(5395)=<D+3*E+2,s(5201)=<E,s(5397)=<E,s(5202)=<2*E+1,s(5398)=<2*E+1]
* Psum in Loop 302: [it(302)=<1,s(5475)=<1,s(5467)=<1/2,s(5469)=<D',s(5474)=<D'+E',s(5473)=<2*D'+E',s(5464)=<E',s(5472)=<E'/2,s(5471)=<3/2*E']
* Psum in Loop 303: [it(303)=<1,s(5511)=<1,s(5503)=<1/2,s(5505)=<D',s(5510)=<D'+E',s(5509)=<2*D'+E',s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing max_min for s(5199)=<D+3*E+2  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(5199)=<D+3*E+2] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(5395)=<D+3*E+2,s(5201)=<E,s(5397)=<E,s(5202)=<2*E+1,s(5398)=<2*E+1]
* Psum in Loop 302: [it(302)=<1,s(5475)=<1,s(5467)=<1/2,s(5469)=<D',s(5474)=<D'+E',s(5473)=<2*D'+E',s(5464)=<E',s(5472)=<E'/2,s(5471)=<3/2*E']
* Psum in Loop 303: [it(303)=<1,s(5511)=<1,s(5503)=<1/2,s(5505)=<D',s(5510)=<D'+E',s(5509)=<2*D'+E',s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing max_min for s(5395)=<D+3*E+2  
   - Found a solution using cacheing 
 * Adding constraints:[s(5395)=<s(5199)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(5201)=<E,s(5397)=<E,s(5202)=<2*E+1,s(5398)=<2*E+1]
* Psum in Loop 302: [it(302)=<1,s(5475)=<1,s(5467)=<1/2,s(5469)=<D',s(5474)=<D'+E',s(5473)=<2*D'+E',s(5464)=<E',s(5472)=<E'/2,s(5471)=<3/2*E']
* Psum in Loop 303: [it(303)=<1,s(5511)=<1,s(5503)=<1/2,s(5505)=<D',s(5510)=<D'+E',s(5509)=<2*D'+E',s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing max_min for s(5201)=<E  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(5201)=<E] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(5397)=<E,s(5202)=<2*E+1,s(5398)=<2*E+1]
* Psum in Loop 302: [it(302)=<1,s(5475)=<1,s(5467)=<1/2,s(5469)=<D',s(5474)=<D'+E',s(5473)=<2*D'+E',s(5464)=<E',s(5472)=<E'/2,s(5471)=<3/2*E']
* Psum in Loop 303: [it(303)=<1,s(5511)=<1,s(5503)=<1/2,s(5505)=<D',s(5510)=<D'+E',s(5509)=<2*D'+E',s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing max_min for s(5397)=<E  
   - Found a solution using cacheing 
 * Adding constraints:[s(5397)=<s(5201)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(5202)=<2*E+1,s(5398)=<2*E+1]
* Psum in Loop 302: [it(302)=<1,s(5475)=<1,s(5467)=<1/2,s(5469)=<D',s(5474)=<D'+E',s(5473)=<2*D'+E',s(5464)=<E',s(5472)=<E'/2,s(5471)=<3/2*E']
* Psum in Loop 303: [it(303)=<1,s(5511)=<1,s(5503)=<1/2,s(5505)=<D',s(5510)=<D'+E',s(5509)=<2*D'+E',s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing max_min for s(5202)=<2*E+1  
   - Found a solution using cacheing 
 * Adding constraints:[s(5202)=<s(5201)*2+1] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(5398)=<2*E+1]
* Psum in Loop 302: [it(302)=<1,s(5475)=<1,s(5467)=<1/2,s(5469)=<D',s(5474)=<D'+E',s(5473)=<2*D'+E',s(5464)=<E',s(5472)=<E'/2,s(5471)=<3/2*E']
* Psum in Loop 303: [it(303)=<1,s(5511)=<1,s(5503)=<1/2,s(5505)=<D',s(5510)=<D'+E',s(5509)=<2*D'+E',s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing max_min for s(5398)=<2*E+1  
   - Found a solution using cacheing 
 * Adding constraints:[s(5398)=<s(5201)*2+1] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [it(302)=<1,s(5475)=<1,s(5467)=<1/2,s(5469)=<D',s(5474)=<D'+E',s(5473)=<2*D'+E',s(5464)=<E',s(5472)=<E'/2,s(5471)=<3/2*E']
* Psum in Loop 303: [it(303)=<1,s(5511)=<1,s(5503)=<1/2,s(5505)=<D',s(5510)=<D'+E',s(5509)=<2*D'+E',s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing sum for it(302)=<1  in Loop 302 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - Loop 303 is collaborative and bounds [it(303)] 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - Loop 303 is collaborative and bounds [it(303)] 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(302)+it(303)=<A-1,it(302)+it(303)=<A-1,it(302)+it(303)=<A-A',it(302)+it(303)=<A-A'] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(5475)=<1,s(5467)=<1/2,s(5469)=<D',s(5474)=<D'+E',s(5473)=<2*D'+E',s(5464)=<E',s(5472)=<E'/2,s(5471)=<3/2*E']
* Psum in Loop 303: [it(303)=<1,s(5511)=<1,s(5503)=<1/2,s(5505)=<D',s(5510)=<D'+E',s(5509)=<2*D'+E',s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing sum for s(5475)=<1  in Loop 302 
   - Found a solution using cacheing 
 * Adding constraints: [s(5475)=<aux(567),aux(567)+it(303)=<A-1,aux(567)+it(303)=<A-1,aux(567)+it(303)=<A-A',aux(567)+it(303)=<A-A'] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(5467)=<1/2,s(5469)=<D',s(5474)=<D'+E',s(5473)=<2*D'+E',s(5464)=<E',s(5472)=<E'/2,s(5471)=<3/2*E']
* Psum in Loop 303: [it(303)=<1,s(5511)=<1,s(5503)=<1/2,s(5505)=<D',s(5510)=<D'+E',s(5509)=<2*D'+E',s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing sum for s(5467)=<1/2  in Loop 302 
   - Found a solution using cacheing 
 * Adding constraints: [s(5467)=<aux(568)* (1/2),aux(568)+it(303)=<A-1,aux(568)+it(303)=<A-1,aux(568)+it(303)=<A-A',aux(568)+it(303)=<A-A'] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(5469)=<D',s(5474)=<D'+E',s(5473)=<2*D'+E',s(5464)=<E',s(5472)=<E'/2,s(5471)=<3/2*E']
* Psum in Loop 303: [it(303)=<1,s(5511)=<1,s(5503)=<1/2,s(5505)=<D',s(5510)=<D'+E',s(5509)=<2*D'+E',s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing sum for s(5469)=<D'  in Loop 302 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(569)=<D] 
 * Adding constraints: [s(5469)=<it(302)*aux(569)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(569)=<D]
* Psum in Loop 302: [s(5474)=<D'+E',s(5473)=<2*D'+E',s(5464)=<E',s(5472)=<E'/2,s(5471)=<3/2*E']
* Psum in Loop 303: [it(303)=<1,s(5511)=<1,s(5503)=<1/2,s(5505)=<D',s(5510)=<D'+E',s(5509)=<2*D'+E',s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing max_min for aux(569)=<D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(569)=<s(5195)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(5474)=<D'+E',s(5473)=<2*D'+E',s(5464)=<E',s(5472)=<E'/2,s(5471)=<3/2*E']
* Psum in Loop 303: [it(303)=<1,s(5511)=<1,s(5503)=<1/2,s(5505)=<D',s(5510)=<D'+E',s(5509)=<2*D'+E',s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing sum for s(5474)=<D'+E'  in Loop 302 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(570)=<D+E] 
 * Adding constraints: [s(5474)=<it(302)*aux(570)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(570)=<D+E]
* Psum in Loop 302: [s(5473)=<2*D'+E',s(5464)=<E',s(5472)=<E'/2,s(5471)=<3/2*E']
* Psum in Loop 303: [it(303)=<1,s(5511)=<1,s(5503)=<1/2,s(5505)=<D',s(5510)=<D'+E',s(5509)=<2*D'+E',s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing max_min for aux(570)=<D+E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(570)=<s(5197)-1] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(5473)=<2*D'+E',s(5464)=<E',s(5472)=<E'/2,s(5471)=<3/2*E']
* Psum in Loop 303: [it(303)=<1,s(5511)=<1,s(5503)=<1/2,s(5505)=<D',s(5510)=<D'+E',s(5509)=<2*D'+E',s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing sum for s(5473)=<2*D'+E'  in Loop 302 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(571)=<2*D+E] 
 * Adding constraints: [s(5473)=<it(302)*aux(571)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(571)=<2*D+E]
* Psum in Loop 302: [s(5464)=<E',s(5472)=<E'/2,s(5471)=<3/2*E']
* Psum in Loop 303: [it(303)=<1,s(5511)=<1,s(5503)=<1/2,s(5505)=<D',s(5510)=<D'+E',s(5509)=<2*D'+E',s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing max_min for aux(571)=<2*D+E  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(571)=<2*D+E] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(5464)=<E',s(5472)=<E'/2,s(5471)=<3/2*E']
* Psum in Loop 303: [it(303)=<1,s(5511)=<1,s(5503)=<1/2,s(5505)=<D',s(5510)=<D'+E',s(5509)=<2*D'+E',s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing sum for s(5464)=<E'  in Loop 302 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(572)=<E] 
 * Adding constraints: [s(5464)=<it(302)*aux(572)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(572)=<E]
* Psum in Loop 302: [s(5472)=<E'/2,s(5471)=<3/2*E']
* Psum in Loop 303: [it(303)=<1,s(5511)=<1,s(5503)=<1/2,s(5505)=<D',s(5510)=<D'+E',s(5509)=<2*D'+E',s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing max_min for aux(572)=<E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(572)=<s(5201)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(5472)=<E'/2,s(5471)=<3/2*E']
* Psum in Loop 303: [it(303)=<1,s(5511)=<1,s(5503)=<1/2,s(5505)=<D',s(5510)=<D'+E',s(5509)=<2*D'+E',s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing sum for s(5472)=<E'/2  in Loop 302 
   - Found a solution using cacheing 
 * Adding constraints: [s(5472)=<aux(573)* (1/2),aux(573)=<it(302)*aux(572)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 302: [s(5471)=<3/2*E']
* Psum in Loop 303: [it(303)=<1,s(5511)=<1,s(5503)=<1/2,s(5505)=<D',s(5510)=<D'+E',s(5509)=<2*D'+E',s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing sum for s(5471)=<3/2*E'  in Loop 302 
   - Found a solution using cacheing 
 * Adding constraints: [s(5471)=<aux(574)* (3/2),aux(574)=<it(302)*aux(572)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 303: [it(303)=<1,s(5511)=<1,s(5503)=<1/2,s(5505)=<D',s(5510)=<D'+E',s(5509)=<2*D'+E',s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing sum for it(303)=<1  in Loop 303 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(302)+it(303)=<A-1,it(302)+it(303)=<A-1,it(302)+it(303)=<A-A',it(302)+it(303)=<A-A'] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 303: [s(5511)=<1,s(5503)=<1/2,s(5505)=<D',s(5510)=<D'+E',s(5509)=<2*D'+E',s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing sum for s(5511)=<1  in Loop 303 
   - Found a solution using cacheing 
 * Adding constraints: [s(5511)=<aux(575),aux(575)+it(302)=<A-1,aux(575)+it(302)=<A-1,aux(575)+it(302)=<A-A',aux(575)+it(302)=<A-A'] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 303: [s(5503)=<1/2,s(5505)=<D',s(5510)=<D'+E',s(5509)=<2*D'+E',s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing sum for s(5503)=<1/2  in Loop 303 
   - Found a solution using cacheing 
 * Adding constraints: [s(5503)=<aux(576)* (1/2),aux(576)+it(302)=<A-1,aux(576)+it(302)=<A-1,aux(576)+it(302)=<A-A',aux(576)+it(302)=<A-A'] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 303: [s(5505)=<D',s(5510)=<D'+E',s(5509)=<2*D'+E',s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing sum for s(5505)=<D'  in Loop 303 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(577)=<D] 
 * Adding constraints: [s(5505)=<it(303)*aux(577)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(577)=<D]
* Psum in Loop 303: [s(5510)=<D'+E',s(5509)=<2*D'+E',s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing max_min for aux(577)=<D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(577)=<s(5195)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 303: [s(5510)=<D'+E',s(5509)=<2*D'+E',s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing sum for s(5510)=<D'+E'  in Loop 303 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(578)=<D+E] 
 * Adding constraints: [s(5510)=<it(303)*aux(578)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(578)=<D+E]
* Psum in Loop 303: [s(5509)=<2*D'+E',s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing max_min for aux(578)=<D+E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(578)=<s(5197)-1] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 303: [s(5509)=<2*D'+E',s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing sum for s(5509)=<2*D'+E'  in Loop 303 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(579)=<2*D+E] 
 * Adding constraints: [s(5509)=<it(303)*aux(579)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(579)=<2*D+E]
* Psum in Loop 303: [s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing max_min for aux(579)=<2*D+E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(579)=<aux(571)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 303: [s(5500)=<E',s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing sum for s(5500)=<E'  in Loop 303 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(580)=<E] 
 * Adding constraints: [s(5500)=<it(303)*aux(580)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(580)=<E]
* Psum in Loop 303: [s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing max_min for aux(580)=<E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(580)=<s(5201)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 303: [s(5508)=<E'/2,s(5507)=<3/2*E']

###### Computing sum for s(5508)=<E'/2  in Loop 303 
   - Found a solution using cacheing 
 * Adding constraints: [s(5508)=<aux(581)* (1/2),aux(581)=<it(303)*aux(580)] 

##### Pending set mat_mult(A,B,C,D,E,F,G,H,I)
* Psum in Loop 303: [s(5507)=<3/2*E']

###### Computing sum for s(5507)=<3/2*E'  in Loop 303 
   - Found a solution using cacheing 
 * Adding constraints: [s(5507)=<aux(582)* (3/2),aux(582)=<it(303)*aux(580)] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [302,303] 

#### Simplifying cost structure of phase [302,303] 
 * Joined equivalent variables [aux(567),s(5475)] into aux(567)
 * Joined equivalent variables [aux(575),s(5511)] into aux(575)
 * Joined equivalent variables [aux(572),aux(580),s(5218),s(5397)] into aux(572)
 * Joined equivalent variables [aux(570),aux(578)] into aux(570)
 * Joined equivalent variables [aux(569),aux(577),s(5221),s(5391)] into aux(569)
 * Joined equivalent variables [s(5202),s(5398)] into s(5202)
 * Joined equivalent variables [aux(581),aux(582),s(5500)] into aux(581)
 * Joined equivalent variables [aux(573),aux(574),s(5464)] into aux(573)
 * Joined equivalent variables [s(5457),s(5493)] into s(5457)
 * Joined equivalent variables [it(302),it(303)] into it(302)
 * Joined equivalent variables [aux(567),aux(568),aux(575),aux(576)] into aux(567)
 * Joined equivalent variables [aux(573),aux(581)] into aux(573)
 * Joined equivalent variables [s(5474),s(5510)] into s(5474)
 * Joined equivalent variables [s(5469),s(5505)] into s(5469)
 * Joined equivalent variables [s(5467),s(5503)] into s(5467)
 * Joined equivalent variables [s(5233),s(5417)] into s(5233)
 * Joined equivalent variables [s(5472),s(5508)] into s(5472)
 * Joined equivalent variables [s(5471),s(5507)] into s(5471)
 * Joined equivalent variables [s(5443),s(5479)] into s(5443)
 * Joined equivalent variables [s(5470),s(5506)] into s(5470)
 * Joined equivalent variables [s(5442),s(5478)] into s(5442)
 * Joined equivalent variables [s(5468),s(5504)] into s(5468)

#### Cost of phase [302,303]:mat_mult(A,B,C,D,E,F,G,H,I) -> [mat_mult(A',B',C',D',E',F',G',H',I')] 
32*it(302)+34*s(5440)+34*s(5441)+85*s(5442)+270*s(5443)+34*s(5444)+20*s(5445)+20*s(5446)+52*s(5447)+10*s(5448)+10*s(5449)+104*s(5450)+10*s(5451)+20*s(5452)+10*s(5453)+52*s(5454)+10*s(5455)+10*s(5456)+78*s(5457)+51*s(5476)+51*s(5477)+51*s(5480)+30*s(5481)+30*s(5482)+78*s(5483)+15*s(5484)+15*s(5485)+156*s(5486)+15*s(5487)+30*s(5488)+15*s(5489)+78*s(5490)+15*s(5491)+15*s(5492)+0
  Such that:s(5195) =< D
s(5197) =< D+E+1
s(5198) =< D+2*E
s(5199) =< D+3*E+2
aux(571) =< 2*D+E
s(5201) =< E
aux(583) =< A
aux(584) =< A-A'
aux(567) =< aux(583)
it(302) =< aux(583)
aux(567) =< aux(584)
it(302) =< aux(584)
aux(572) =< s(5201)
aux(579) =< aux(571)
aux(570) =< s(5197)-1
aux(569) =< s(5195)
s(5202) =< s(5201)*2+1
s(5395) =< s(5199)
s(5394) =< s(5198)
s(5393) =< s(5197)
s(5467) =< aux(567)* (1/2)
s(5473) =< it(302)*aux(571)
aux(573) =< it(302)*aux(572)
s(5509) =< it(302)*aux(579)
s(5474) =< it(302)*aux(570)
s(5469) =< it(302)*aux(569)
s(5471) =< aux(573)* (3/2)
s(5472) =< aux(573)* (1/2)
s(5476) =< aux(567)
s(5402) =< s(5393)
s(5403) =< s(5395)
s(5402) =< s(5202)
s(5477) =< s(5467)
s(5468) =< s(5469)
s(5470) =< s(5469)
s(5442) =< s(5469)
s(5443) =< s(5469)
s(5480) =< s(5469)
s(5477) =< s(5469)
s(5476) =< s(5469)
s(5476) =< s(5474)
s(5481) =< s(5474)
s(5480) =< s(5509)
s(5477) =< s(5509)
s(5476) =< s(5509)
s(5482) =< s(5509)
s(5470) =< aux(573)
s(5480) =< aux(573)
s(5477) =< aux(573)
s(5476) =< aux(573)
s(5468) =< s(5472)
s(5442) =< s(5472)
s(5480) =< s(5471)
s(5477) =< s(5471)
s(5476) =< s(5471)
s(5482) =< s(5471)
s(5412) =< aux(572)+2
s(5413) =< aux(572)+1
s(5414) =< aux(572)
s(5415) =< s(5402)+1
s(5416) =< s(5402)
s(5233) =< aux(569)
s(5418) =< s(5394)
s(5403) =< s(5394)
s(5477) =< s(5469)+s(5470)+s(5469)+s(5469)+s(5468)+s(5467)
s(5476) =< s(5469)+s(5470)+s(5469)+s(5469)+s(5468)+s(5467)
s(5494) =< s(5442)*aux(572)
s(5495) =< s(5442)*s(5402)
s(5421) =< s(5403)+2
s(5418) =< s(5403)
s(5501) =< s(5443)*s(5412)
s(5502) =< s(5480)*s(5413)
s(5481) =< s(5477)*s(5414)
s(5498) =< s(5480)*s(5415)
s(5499) =< s(5480)*s(5416)
s(5497) =< s(5443)*s(5416)
s(5496) =< s(5443)*s(5414)
s(5476) =< s(5501)+s(5502)+s(5501)+s(5501)+s(5494)+aux(573)
s(5481) =< s(5501)+s(5502)+s(5501)+s(5501)+s(5494)+aux(573)
s(5483) =< s(5499)
s(5483) =< s(5498)
s(5429) =< s(5233)
s(5484) =< s(5483)*s(5421)
s(5485) =< s(5483)*s(5233)
s(5484) =< s(5483)*s(5429)
s(5496) =< s(5497)
s(5486) =< s(5497)
s(5486) =< s(5496)
s(5487) =< s(5486)*s(5418)
s(5488) =< s(5486)*s(5233)
s(5487) =< s(5486)*s(5429)
s(5489) =< s(5486)*s(5403)
s(5489) =< s(5486)*s(5429)
s(5490) =< s(5495)
s(5490) =< s(5494)
s(5491) =< s(5490)*s(5394)
s(5492) =< s(5490)*aux(569)
s(5491) =< s(5490)*s(5233)
s(5440) =< aux(567)
s(5206) =< s(5197)
s(5207) =< s(5199)
s(5206) =< s(5202)
s(5441) =< s(5467)
s(5444) =< s(5469)
s(5441) =< s(5469)
s(5440) =< s(5469)
s(5440) =< s(5474)
s(5445) =< s(5474)
s(5444) =< s(5473)
s(5441) =< s(5473)
s(5440) =< s(5473)
s(5446) =< s(5473)
s(5444) =< aux(573)
s(5441) =< aux(573)
s(5440) =< aux(573)
s(5444) =< s(5471)
s(5441) =< s(5471)
s(5440) =< s(5471)
s(5446) =< s(5471)
s(5216) =< s(5201)+2
s(5217) =< s(5201)+1
s(5219) =< s(5206)+1
s(5220) =< s(5206)
s(5222) =< s(5198)
s(5207) =< s(5198)
s(5441) =< s(5469)+s(5470)+s(5469)+s(5469)+s(5468)+s(5467)
s(5440) =< s(5469)+s(5470)+s(5469)+s(5469)+s(5468)+s(5467)
s(5458) =< s(5442)*s(5201)
s(5459) =< s(5442)*s(5206)
s(5225) =< s(5207)+2
s(5222) =< s(5207)
s(5465) =< s(5443)*s(5216)
s(5466) =< s(5444)*s(5217)
s(5445) =< s(5441)*aux(572)
s(5462) =< s(5444)*s(5219)
s(5463) =< s(5444)*s(5220)
s(5461) =< s(5443)*s(5220)
s(5460) =< s(5443)*aux(572)
s(5440) =< s(5465)+s(5466)+s(5465)+s(5465)+s(5458)+aux(573)
s(5445) =< s(5465)+s(5466)+s(5465)+s(5465)+s(5458)+aux(573)
s(5447) =< s(5463)
s(5447) =< s(5462)
s(5448) =< s(5447)*s(5225)
s(5449) =< s(5447)*aux(569)
s(5448) =< s(5447)*s(5233)
s(5460) =< s(5461)
s(5450) =< s(5461)
s(5450) =< s(5460)
s(5451) =< s(5450)*s(5222)
s(5452) =< s(5450)*aux(569)
s(5451) =< s(5450)*s(5233)
s(5453) =< s(5450)*s(5207)
s(5453) =< s(5450)*s(5233)
s(5454) =< s(5459)
s(5454) =< s(5458)
s(5455) =< s(5454)*s(5198)
s(5456) =< s(5454)*s(5195)
s(5455) =< s(5454)*aux(569)

Unbounded itvars
s(5457) :  sum(302),s(5243)

#### Simplifying cost structure of chain [[302,303],307] 
 * Joined equivalent variables [aux(585),s(5057),s(5195)] into aux(585)
 * Joined equivalent variables [aux(586),s(5197)] into aux(586)
 * Joined equivalent variables [aux(587),s(5051),s(5198)] into aux(587)
 * Joined equivalent variables [aux(588),s(5199)] into aux(588)
 * Joined equivalent variables [aux(589),aux(571),s(5053)] into aux(589)
 * Joined equivalent variables [aux(590),s(5058),s(5201)] into aux(590)
 * Joined equivalent variables [aux(591),aux(583),aux(584)] into aux(591)
 * Joined equivalent variables [aux(591),aux(567)] into aux(591)
 * Joined equivalent variables [s(5067),s(5216)] into s(5067)
 * Joined equivalent variables [s(5068),s(5217)] into s(5068)
 * Joined equivalent variables [aux(572),s(5069)] into aux(572)
 * Joined equivalent variables [aux(569),s(5072)] into aux(569)
 * Joined equivalent variables [s(5052),s(5207)] into s(5052)
 * Joined equivalent variables [s(5076),s(5225)] into s(5076)
 * Joined equivalent variables [s(5073),s(5222)] into s(5073)
 * Joined equivalent variables [s(5084),s(5233)] into s(5084)
 * Renamed intermediate variables: 
[ (eq(396,1),s(5009))>>s(5512), (eq(396,1),s(4993))>>s(5513), (eq(396,1),s(4995))>>s(5514), (eq(396,1),s(4996))>>s(5515), (eq(396,1),s(4997))>>s(5516), (eq(396,1),s(4999))>>s(5517), (eq(396,1),s(5005))>>s(5518), (eq(396,1),s(5007))>>s(5519), (eq(396,1),aux(540))>>s(5520), (eq(396,1),aux(541))>>s(5521), (eq(396,1),aux(542))>>s(5522), (eq(396,1),s(5010))>>s(5523), (eq(396,1),s(5013))>>s(5524), (eq(396,1),s(5014))>>s(5525), (eq(396,1),s(5015))>>s(5526), (eq(396,1),s(5016))>>s(5527), (eq(396,1),s(5017))>>s(5528), (eq(396,1),s(5018))>>s(5529), (eq(396,1),s(5019))>>s(5530), (eq(396,1),s(5020))>>s(5531), (eq(396,1),s(5021))>>s(5532), (eq(396,1),s(5022))>>s(5533), (eq(396,1),s(5023))>>s(5534), (eq(396,1),s(5024))>>s(5535), (eq(396,1),s(5025))>>s(5536), (eq(396,1),s(5026))>>s(5537), (eq(396,1),s(5027))>>s(5538), (eq(396,1),s(5029))>>s(5539), (eq(396,1),s(5030))>>s(5540), (eq(396,1),s(5031))>>s(5541), (eq(396,1),s(5032))>>s(5542), (eq(396,1),s(5033))>>s(5543), (eq(396,1),s(5034))>>s(5544), (eq(396,1),s(5035))>>s(5545), (eq(396,1),s(5036))>>s(5546), (eq(396,1),s(5037))>>s(5547), (eq(396,1),s(5038))>>s(5548), (eq(396,1),s(5039))>>s(5549), (eq(396,1),s(5040))>>s(5550), (eq(396,1),s(5041))>>s(5551), (eq(396,1),s(5042))>>s(5552), (eq(396,1),s(5043))>>s(5553), (eq(396,1),s(5044))>>s(5554), (eq(396,1),s(5045))>>s(5555), (eq(396,1),s(5046))>>s(5556), (eq(396,1),s(5047))>>s(5557)]

#### Simplifying cost structure of CE 396 

#### Simplifying cost structure of chain [304,307] 
 * Joined equivalent variables [aux(593),s(5056),s(5520)] into aux(593)
 * Joined equivalent variables [aux(594),s(5057),s(5521)] into aux(594)
 * Joined equivalent variables [aux(595),s(5049),s(5513)] into aux(595)
 * Joined equivalent variables [aux(597),s(5051),s(5515)] into aux(597)
 * Joined equivalent variables [aux(599),s(5053),s(5517)] into aux(599)
 * Joined equivalent variables [aux(600),s(5058),s(5522)] into aux(600)
 * Joined equivalent variables [aux(602),s(5054),s(5518)] into aux(602)
 * Joined equivalent variables [aux(603),s(5055),s(5519)] into aux(603)
 * Joined equivalent variables [s(5050),s(5514)] into s(5050)
 * Joined equivalent variables [s(5070),s(5534)] into s(5070)
 * Joined equivalent variables [s(5071),s(5535)] into s(5071)
 * Joined equivalent variables [s(5067),s(5531)] into s(5067)
 * Joined equivalent variables [s(5068),s(5532)] into s(5068)
 * Joined equivalent variables [s(5069),s(5533)] into s(5069)
 * Joined equivalent variables [s(5072),s(5536)] into s(5072)
 * Joined equivalent variables [s(5052),s(5516)] into s(5052)
 * Joined equivalent variables [s(5063),s(5527)] into s(5063)
 * Joined equivalent variables [s(5064),s(5528)] into s(5064)
 * Joined equivalent variables [s(5062),s(5526)] into s(5062)
 * Joined equivalent variables [s(5066),s(5530)] into s(5066)
 * Joined equivalent variables [s(5061),s(5525)] into s(5061)
 * Joined equivalent variables [s(5060),s(5524)] into s(5060)
 * Joined equivalent variables [s(5075),s(5539)] into s(5075)
 * Joined equivalent variables [s(5076),s(5540)] into s(5076)
 * Joined equivalent variables [s(5073),s(5537)] into s(5073)
 * Joined equivalent variables [s(5077),s(5541)] into s(5077)
 * Joined equivalent variables [s(5078),s(5542)] into s(5078)
 * Joined equivalent variables [s(5079),s(5543)] into s(5079)
 * Joined equivalent variables [s(5080),s(5544)] into s(5080)
 * Joined equivalent variables [s(5081),s(5545)] into s(5081)
 * Joined equivalent variables [s(5084),s(5548)] into s(5084)
 * Joined equivalent variables [s(5059),s(5523)] into s(5059)
 * Joined equivalent variables [s(5074),s(5538)] into s(5074)
 * Joined equivalent variables [s(5065),s(5529)] into s(5065)
 * Joined equivalent variables [s(5082),s(5546)] into s(5082)
 * Joined equivalent variables [s(5048),s(5512)] into s(5048)
 * Joined equivalent variables [s(5091),s(5555)] into s(5091)
 * Joined equivalent variables [s(5083),s(5547)] into s(5083)
 * Joined equivalent variables [s(5085),s(5549)] into s(5085)
 * Joined equivalent variables [s(5086),s(5550)] into s(5086)
 * Joined equivalent variables [s(5092),s(5556)] into s(5092)
 * Joined equivalent variables [s(5093),s(5557)] into s(5093)
 * Joined equivalent variables [s(5087),s(5551)] into s(5087)
 * Joined equivalent variables [s(5088),s(5552)] into s(5088)
 * Joined equivalent variables [s(5089),s(5553)] into s(5089)
 * Joined equivalent variables [s(5090),s(5554)] into s(5090)

#### Found solution for phase  [302,303] in the cache 

#### Cost of phase [302,303]:mat_mult(A,B,C,D,E,F,G,H,I) -> [mat_mult(A',B',C',D',E',F',G',H',I')] 
32*it(302)+34*s(5440)+34*s(5441)+85*s(5442)+270*s(5443)+34*s(5444)+20*s(5445)+20*s(5446)+52*s(5447)+10*s(5448)+10*s(5449)+104*s(5450)+10*s(5451)+20*s(5452)+10*s(5453)+52*s(5454)+10*s(5455)+10*s(5456)+78*s(5457)+51*s(5476)+51*s(5477)+51*s(5480)+30*s(5481)+30*s(5482)+78*s(5483)+15*s(5484)+15*s(5485)+156*s(5486)+15*s(5487)+30*s(5488)+15*s(5489)+78*s(5490)+15*s(5491)+15*s(5492)+0
  Such that:s(5195) =< D
s(5197) =< D+E+1
s(5198) =< D+2*E
s(5199) =< D+3*E+2
aux(571) =< 2*D+E
s(5201) =< E
aux(583) =< A
aux(584) =< A-A'
aux(567) =< aux(583)
it(302) =< aux(583)
aux(567) =< aux(584)
it(302) =< aux(584)
aux(572) =< s(5201)
aux(579) =< aux(571)
aux(570) =< s(5197)-1
aux(569) =< s(5195)
s(5202) =< s(5201)*2+1
s(5395) =< s(5199)
s(5394) =< s(5198)
s(5393) =< s(5197)
s(5467) =< aux(567)* (1/2)
s(5473) =< it(302)*aux(571)
aux(573) =< it(302)*aux(572)
s(5509) =< it(302)*aux(579)
s(5474) =< it(302)*aux(570)
s(5469) =< it(302)*aux(569)
s(5471) =< aux(573)* (3/2)
s(5472) =< aux(573)* (1/2)
s(5476) =< aux(567)
s(5402) =< s(5393)
s(5403) =< s(5395)
s(5402) =< s(5202)
s(5477) =< s(5467)
s(5468) =< s(5469)
s(5470) =< s(5469)
s(5442) =< s(5469)
s(5443) =< s(5469)
s(5480) =< s(5469)
s(5477) =< s(5469)
s(5476) =< s(5469)
s(5476) =< s(5474)
s(5481) =< s(5474)
s(5480) =< s(5509)
s(5477) =< s(5509)
s(5476) =< s(5509)
s(5482) =< s(5509)
s(5470) =< aux(573)
s(5480) =< aux(573)
s(5477) =< aux(573)
s(5476) =< aux(573)
s(5468) =< s(5472)
s(5442) =< s(5472)
s(5480) =< s(5471)
s(5477) =< s(5471)
s(5476) =< s(5471)
s(5482) =< s(5471)
s(5412) =< aux(572)+2
s(5413) =< aux(572)+1
s(5414) =< aux(572)
s(5415) =< s(5402)+1
s(5416) =< s(5402)
s(5233) =< aux(569)
s(5418) =< s(5394)
s(5403) =< s(5394)
s(5477) =< s(5469)+s(5470)+s(5469)+s(5469)+s(5468)+s(5467)
s(5476) =< s(5469)+s(5470)+s(5469)+s(5469)+s(5468)+s(5467)
s(5494) =< s(5442)*aux(572)
s(5495) =< s(5442)*s(5402)
s(5421) =< s(5403)+2
s(5418) =< s(5403)
s(5501) =< s(5443)*s(5412)
s(5502) =< s(5480)*s(5413)
s(5481) =< s(5477)*s(5414)
s(5498) =< s(5480)*s(5415)
s(5499) =< s(5480)*s(5416)
s(5497) =< s(5443)*s(5416)
s(5496) =< s(5443)*s(5414)
s(5476) =< s(5501)+s(5502)+s(5501)+s(5501)+s(5494)+aux(573)
s(5481) =< s(5501)+s(5502)+s(5501)+s(5501)+s(5494)+aux(573)
s(5483) =< s(5499)
s(5483) =< s(5498)
s(5429) =< s(5233)
s(5484) =< s(5483)*s(5421)
s(5485) =< s(5483)*s(5233)
s(5484) =< s(5483)*s(5429)
s(5496) =< s(5497)
s(5486) =< s(5497)
s(5486) =< s(5496)
s(5487) =< s(5486)*s(5418)
s(5488) =< s(5486)*s(5233)
s(5487) =< s(5486)*s(5429)
s(5489) =< s(5486)*s(5403)
s(5489) =< s(5486)*s(5429)
s(5490) =< s(5495)
s(5490) =< s(5494)
s(5491) =< s(5490)*s(5394)
s(5492) =< s(5490)*aux(569)
s(5491) =< s(5490)*s(5233)
s(5440) =< aux(567)
s(5206) =< s(5197)
s(5207) =< s(5199)
s(5206) =< s(5202)
s(5441) =< s(5467)
s(5444) =< s(5469)
s(5441) =< s(5469)
s(5440) =< s(5469)
s(5440) =< s(5474)
s(5445) =< s(5474)
s(5444) =< s(5473)
s(5441) =< s(5473)
s(5440) =< s(5473)
s(5446) =< s(5473)
s(5444) =< aux(573)
s(5441) =< aux(573)
s(5440) =< aux(573)
s(5444) =< s(5471)
s(5441) =< s(5471)
s(5440) =< s(5471)
s(5446) =< s(5471)
s(5216) =< s(5201)+2
s(5217) =< s(5201)+1
s(5219) =< s(5206)+1
s(5220) =< s(5206)
s(5222) =< s(5198)
s(5207) =< s(5198)
s(5441) =< s(5469)+s(5470)+s(5469)+s(5469)+s(5468)+s(5467)
s(5440) =< s(5469)+s(5470)+s(5469)+s(5469)+s(5468)+s(5467)
s(5458) =< s(5442)*s(5201)
s(5459) =< s(5442)*s(5206)
s(5225) =< s(5207)+2
s(5222) =< s(5207)
s(5465) =< s(5443)*s(5216)
s(5466) =< s(5444)*s(5217)
s(5445) =< s(5441)*aux(572)
s(5462) =< s(5444)*s(5219)
s(5463) =< s(5444)*s(5220)
s(5461) =< s(5443)*s(5220)
s(5460) =< s(5443)*aux(572)
s(5440) =< s(5465)+s(5466)+s(5465)+s(5465)+s(5458)+aux(573)
s(5445) =< s(5465)+s(5466)+s(5465)+s(5465)+s(5458)+aux(573)
s(5447) =< s(5463)
s(5447) =< s(5462)
s(5448) =< s(5447)*s(5225)
s(5449) =< s(5447)*aux(569)
s(5448) =< s(5447)*s(5233)
s(5460) =< s(5461)
s(5450) =< s(5461)
s(5450) =< s(5460)
s(5451) =< s(5450)*s(5222)
s(5452) =< s(5450)*aux(569)
s(5451) =< s(5450)*s(5233)
s(5453) =< s(5450)*s(5207)
s(5453) =< s(5450)*s(5233)
s(5454) =< s(5459)
s(5454) =< s(5458)
s(5455) =< s(5454)*s(5198)
s(5456) =< s(5454)*s(5195)
s(5455) =< s(5454)*aux(569)

Unbounded itvars
s(5457) :  sum(302),s(5243)

#### Simplifying cost structure of chain [[302,303],304,307] 
 * Joined equivalent variables [aux(604),aux(594),s(5195)] into aux(604)
 * Joined equivalent variables [aux(605),aux(596),s(5197)] into aux(605)
 * Joined equivalent variables [aux(606),aux(597),s(5198)] into aux(606)
 * Joined equivalent variables [aux(607),aux(598),s(5199)] into aux(607)
 * Joined equivalent variables [aux(608),aux(571),aux(599)] into aux(608)
 * Joined equivalent variables [aux(609),aux(600),s(5201)] into aux(609)
 * Joined equivalent variables [aux(610),aux(583),aux(584)] into aux(610)
 * Joined equivalent variables [aux(610),aux(567)] into aux(610)
 * Joined equivalent variables [s(5067),s(5216)] into s(5067)
 * Joined equivalent variables [s(5068),s(5217)] into s(5068)
 * Joined equivalent variables [aux(572),s(5069)] into aux(572)
 * Joined equivalent variables [aux(569),s(5072)] into aux(569)
 * Joined equivalent variables [s(5052),s(5207)] into s(5052)
 * Joined equivalent variables [s(5076),s(5225)] into s(5076)
 * Joined equivalent variables [s(5073),s(5222)] into s(5073)
 * Joined equivalent variables [s(5084),s(5233)] into s(5084)

#### Cost of chains of mat_mult(A,B,C,D,E,F,G,H,I):
* Chain [[305],306,308]: 16*it(305)+26
  Such that:it(305) =< A

  with precondition: [D=1,E=0,H=1,A=G,A>=3,B>=1,C>=0,F>=0,I>=0] 

* Chain [[302,303],307]: 32*it(302)+17*s(5048)+17*s(5059)+17*s(5062)+54*s(5063)+17*s(5064)+10*s(5065)+10*s(5066)+26*s(5083)+5*s(5085)+5*s(5086)+52*s(5087)+5*s(5088)+10*s(5089)+5*s(5090)+26*s(5091)+5*s(5092)+5*s(5093)+34*s(5440)+34*s(5441)+85*s(5442)+270*s(5443)+34*s(5444)+20*s(5445)+20*s(5446)+52*s(5447)+10*s(5448)+10*s(5449)+104*s(5450)+10*s(5451)+20*s(5452)+10*s(5453)+52*s(5454)+10*s(5455)+10*s(5456)+78*s(5457)+51*s(5476)+51*s(5477)+51*s(5480)+30*s(5481)+30*s(5482)+78*s(5483)+15*s(5484)+15*s(5485)+156*s(5486)+15*s(5487)+30*s(5488)+15*s(5489)+78*s(5490)+15*s(5491)+15*s(5492)+10
  Such that:s(5048) =< 1
s(5056) =< 1/2
s(5049) =< D+E
s(5050) =< 2*E+1
s(5054) =< E/2
s(5055) =< 3/2*E
aux(585) =< D
aux(586) =< D+E+1
aux(587) =< D+2*E
aux(588) =< D+3*E+2
aux(589) =< 2*D+E
aux(590) =< E
aux(591) =< G
s(5050) =< aux(586)
s(5052) =< aux(588)
s(5059) =< s(5056)
s(5060) =< aux(585)
s(5061) =< aux(585)
s(5062) =< aux(585)
s(5063) =< aux(585)
s(5064) =< aux(585)
s(5059) =< aux(585)
s(5048) =< aux(585)
s(5048) =< s(5049)
s(5065) =< s(5049)
s(5064) =< aux(589)
s(5059) =< aux(589)
s(5048) =< aux(589)
s(5066) =< aux(589)
s(5061) =< aux(590)
s(5064) =< aux(590)
s(5059) =< aux(590)
s(5048) =< aux(590)
s(5060) =< s(5054)
s(5062) =< s(5054)
s(5064) =< s(5055)
s(5059) =< s(5055)
s(5048) =< s(5055)
s(5066) =< s(5055)
s(5067) =< aux(590)+2
s(5068) =< aux(590)+1
aux(572) =< aux(590)
s(5070) =< s(5050)+1
s(5071) =< s(5050)
aux(569) =< aux(585)
s(5073) =< aux(587)
s(5052) =< aux(587)
s(5059) =< aux(585)+s(5061)+aux(585)+aux(585)+s(5060)+s(5056)
s(5048) =< aux(585)+s(5061)+aux(585)+aux(585)+s(5060)+s(5056)
s(5074) =< s(5062)*aux(590)
s(5075) =< s(5062)*s(5050)
s(5076) =< s(5052)+2
s(5073) =< s(5052)
s(5077) =< s(5063)*s(5067)
s(5078) =< s(5064)*s(5068)
s(5065) =< s(5059)*aux(572)
s(5079) =< s(5064)*s(5070)
s(5080) =< s(5064)*s(5071)
s(5081) =< s(5063)*s(5071)
s(5082) =< s(5063)*aux(572)
s(5048) =< s(5077)+s(5078)+s(5077)+s(5077)+s(5074)+aux(590)
s(5065) =< s(5077)+s(5078)+s(5077)+s(5077)+s(5074)+aux(590)
s(5083) =< s(5080)
s(5083) =< s(5079)
s(5084) =< aux(569)
s(5085) =< s(5083)*s(5076)
s(5086) =< s(5083)*aux(569)
s(5085) =< s(5083)*s(5084)
s(5082) =< s(5081)
s(5087) =< s(5081)
s(5087) =< s(5082)
s(5088) =< s(5087)*s(5073)
s(5089) =< s(5087)*aux(569)
s(5088) =< s(5087)*s(5084)
s(5090) =< s(5087)*s(5052)
s(5090) =< s(5087)*s(5084)
s(5091) =< s(5075)
s(5091) =< s(5074)
s(5092) =< s(5091)*aux(587)
s(5093) =< s(5091)*aux(585)
s(5092) =< s(5091)*aux(569)
it(302) =< aux(591)
aux(579) =< aux(589)
aux(570) =< aux(586)-1
s(5202) =< aux(590)*2+1
s(5395) =< aux(588)
s(5394) =< aux(587)
s(5393) =< aux(586)
s(5467) =< aux(591)* (1/2)
s(5473) =< it(302)*aux(589)
aux(573) =< it(302)*aux(572)
s(5509) =< it(302)*aux(579)
s(5474) =< it(302)*aux(570)
s(5469) =< it(302)*aux(569)
s(5471) =< aux(573)* (3/2)
s(5472) =< aux(573)* (1/2)
s(5476) =< aux(591)
s(5402) =< s(5393)
s(5403) =< s(5395)
s(5402) =< s(5202)
s(5477) =< s(5467)
s(5468) =< s(5469)
s(5470) =< s(5469)
s(5442) =< s(5469)
s(5443) =< s(5469)
s(5480) =< s(5469)
s(5477) =< s(5469)
s(5476) =< s(5469)
s(5476) =< s(5474)
s(5481) =< s(5474)
s(5480) =< s(5509)
s(5477) =< s(5509)
s(5476) =< s(5509)
s(5482) =< s(5509)
s(5470) =< aux(573)
s(5480) =< aux(573)
s(5477) =< aux(573)
s(5476) =< aux(573)
s(5468) =< s(5472)
s(5442) =< s(5472)
s(5480) =< s(5471)
s(5477) =< s(5471)
s(5476) =< s(5471)
s(5482) =< s(5471)
s(5412) =< aux(572)+2
s(5413) =< aux(572)+1
s(5414) =< aux(572)
s(5415) =< s(5402)+1
s(5416) =< s(5402)
s(5418) =< s(5394)
s(5403) =< s(5394)
s(5477) =< s(5469)+s(5470)+s(5469)+s(5469)+s(5468)+s(5467)
s(5476) =< s(5469)+s(5470)+s(5469)+s(5469)+s(5468)+s(5467)
s(5494) =< s(5442)*aux(572)
s(5495) =< s(5442)*s(5402)
s(5421) =< s(5403)+2
s(5418) =< s(5403)
s(5501) =< s(5443)*s(5412)
s(5502) =< s(5480)*s(5413)
s(5481) =< s(5477)*s(5414)
s(5498) =< s(5480)*s(5415)
s(5499) =< s(5480)*s(5416)
s(5497) =< s(5443)*s(5416)
s(5496) =< s(5443)*s(5414)
s(5476) =< s(5501)+s(5502)+s(5501)+s(5501)+s(5494)+aux(573)
s(5481) =< s(5501)+s(5502)+s(5501)+s(5501)+s(5494)+aux(573)
s(5483) =< s(5499)
s(5483) =< s(5498)
s(5429) =< s(5084)
s(5484) =< s(5483)*s(5421)
s(5485) =< s(5483)*s(5084)
s(5484) =< s(5483)*s(5429)
s(5496) =< s(5497)
s(5486) =< s(5497)
s(5486) =< s(5496)
s(5487) =< s(5486)*s(5418)
s(5488) =< s(5486)*s(5084)
s(5487) =< s(5486)*s(5429)
s(5489) =< s(5486)*s(5403)
s(5489) =< s(5486)*s(5429)
s(5490) =< s(5495)
s(5490) =< s(5494)
s(5491) =< s(5490)*s(5394)
s(5492) =< s(5490)*aux(569)
s(5491) =< s(5490)*s(5084)
s(5440) =< aux(591)
s(5206) =< aux(586)
s(5206) =< s(5202)
s(5441) =< s(5467)
s(5444) =< s(5469)
s(5441) =< s(5469)
s(5440) =< s(5469)
s(5440) =< s(5474)
s(5445) =< s(5474)
s(5444) =< s(5473)
s(5441) =< s(5473)
s(5440) =< s(5473)
s(5446) =< s(5473)
s(5444) =< aux(573)
s(5441) =< aux(573)
s(5440) =< aux(573)
s(5444) =< s(5471)
s(5441) =< s(5471)
s(5440) =< s(5471)
s(5446) =< s(5471)
s(5219) =< s(5206)+1
s(5220) =< s(5206)
s(5441) =< s(5469)+s(5470)+s(5469)+s(5469)+s(5468)+s(5467)
s(5440) =< s(5469)+s(5470)+s(5469)+s(5469)+s(5468)+s(5467)
s(5458) =< s(5442)*aux(590)
s(5459) =< s(5442)*s(5206)
s(5465) =< s(5443)*s(5067)
s(5466) =< s(5444)*s(5068)
s(5445) =< s(5441)*aux(572)
s(5462) =< s(5444)*s(5219)
s(5463) =< s(5444)*s(5220)
s(5461) =< s(5443)*s(5220)
s(5460) =< s(5443)*aux(572)
s(5440) =< s(5465)+s(5466)+s(5465)+s(5465)+s(5458)+aux(573)
s(5445) =< s(5465)+s(5466)+s(5465)+s(5465)+s(5458)+aux(573)
s(5447) =< s(5463)
s(5447) =< s(5462)
s(5448) =< s(5447)*s(5076)
s(5449) =< s(5447)*aux(569)
s(5448) =< s(5447)*s(5084)
s(5460) =< s(5461)
s(5450) =< s(5461)
s(5450) =< s(5460)
s(5451) =< s(5450)*s(5073)
s(5452) =< s(5450)*aux(569)
s(5451) =< s(5450)*s(5084)
s(5453) =< s(5450)*s(5052)
s(5453) =< s(5450)*s(5084)
s(5454) =< s(5459)
s(5454) =< s(5458)
s(5455) =< s(5454)*aux(587)
s(5456) =< s(5454)*aux(585)
s(5455) =< s(5454)*aux(569)

Unbounded itvars
s(5457) :  sum(302),s(5243)

  with precondition: [A=G,A>=2,B>=1,C>=0,D>=2,E>=1,F>=0,H>=2,I>=0] 

* Chain [[302,303],304,307]: 32*it(302)+34*s(5048)+34*s(5059)+34*s(5062)+108*s(5063)+34*s(5064)+20*s(5065)+20*s(5066)+52*s(5083)+10*s(5085)+10*s(5086)+104*s(5087)+10*s(5088)+20*s(5089)+10*s(5090)+52*s(5091)+10*s(5092)+10*s(5093)+34*s(5440)+34*s(5441)+85*s(5442)+270*s(5443)+34*s(5444)+20*s(5445)+20*s(5446)+52*s(5447)+10*s(5448)+10*s(5449)+104*s(5450)+10*s(5451)+20*s(5452)+10*s(5453)+52*s(5454)+10*s(5455)+10*s(5456)+78*s(5457)+51*s(5476)+51*s(5477)+51*s(5480)+30*s(5481)+30*s(5482)+78*s(5483)+15*s(5484)+15*s(5485)+156*s(5486)+15*s(5487)+30*s(5488)+15*s(5489)+78*s(5490)+15*s(5491)+15*s(5492)+26
  Such that:aux(592) =< 1
aux(593) =< 1/2
aux(595) =< D+E
aux(601) =< 2*E+1
aux(602) =< E/2
aux(603) =< 3/2*E
aux(604) =< D
aux(605) =< D+E+1
aux(606) =< D+2*E
aux(607) =< D+3*E+2
aux(608) =< 2*D+E
aux(609) =< E
aux(610) =< G
s(5048) =< aux(592)
s(5050) =< aux(605)
s(5052) =< aux(607)
s(5050) =< aux(601)
s(5059) =< aux(593)
s(5060) =< aux(604)
s(5061) =< aux(604)
s(5062) =< aux(604)
s(5063) =< aux(604)
s(5064) =< aux(604)
s(5059) =< aux(604)
s(5048) =< aux(604)
s(5048) =< aux(595)
s(5065) =< aux(595)
s(5064) =< aux(608)
s(5059) =< aux(608)
s(5048) =< aux(608)
s(5066) =< aux(608)
s(5061) =< aux(609)
s(5064) =< aux(609)
s(5059) =< aux(609)
s(5048) =< aux(609)
s(5060) =< aux(602)
s(5062) =< aux(602)
s(5064) =< aux(603)
s(5059) =< aux(603)
s(5048) =< aux(603)
s(5066) =< aux(603)
s(5067) =< aux(609)+2
s(5068) =< aux(609)+1
aux(572) =< aux(609)
s(5070) =< s(5050)+1
s(5071) =< s(5050)
aux(569) =< aux(604)
s(5073) =< aux(606)
s(5052) =< aux(606)
s(5059) =< aux(604)+s(5061)+aux(604)+aux(604)+s(5060)+aux(593)
s(5048) =< aux(604)+s(5061)+aux(604)+aux(604)+s(5060)+aux(593)
s(5074) =< s(5062)*aux(609)
s(5075) =< s(5062)*s(5050)
s(5076) =< s(5052)+2
s(5073) =< s(5052)
s(5077) =< s(5063)*s(5067)
s(5078) =< s(5064)*s(5068)
s(5065) =< s(5059)*aux(572)
s(5079) =< s(5064)*s(5070)
s(5080) =< s(5064)*s(5071)
s(5081) =< s(5063)*s(5071)
s(5082) =< s(5063)*aux(572)
s(5048) =< s(5077)+s(5078)+s(5077)+s(5077)+s(5074)+aux(609)
s(5065) =< s(5077)+s(5078)+s(5077)+s(5077)+s(5074)+aux(609)
s(5083) =< s(5080)
s(5083) =< s(5079)
s(5084) =< aux(569)
s(5085) =< s(5083)*s(5076)
s(5086) =< s(5083)*aux(569)
s(5085) =< s(5083)*s(5084)
s(5082) =< s(5081)
s(5087) =< s(5081)
s(5087) =< s(5082)
s(5088) =< s(5087)*s(5073)
s(5089) =< s(5087)*aux(569)
s(5088) =< s(5087)*s(5084)
s(5090) =< s(5087)*s(5052)
s(5090) =< s(5087)*s(5084)
s(5091) =< s(5075)
s(5091) =< s(5074)
s(5092) =< s(5091)*aux(606)
s(5093) =< s(5091)*aux(604)
s(5092) =< s(5091)*aux(569)
it(302) =< aux(610)
aux(579) =< aux(608)
aux(570) =< aux(605)-1
s(5202) =< aux(609)*2+1
s(5395) =< aux(607)
s(5394) =< aux(606)
s(5393) =< aux(605)
s(5467) =< aux(610)* (1/2)
s(5473) =< it(302)*aux(608)
aux(573) =< it(302)*aux(572)
s(5509) =< it(302)*aux(579)
s(5474) =< it(302)*aux(570)
s(5469) =< it(302)*aux(569)
s(5471) =< aux(573)* (3/2)
s(5472) =< aux(573)* (1/2)
s(5476) =< aux(610)
s(5402) =< s(5393)
s(5403) =< s(5395)
s(5402) =< s(5202)
s(5477) =< s(5467)
s(5468) =< s(5469)
s(5470) =< s(5469)
s(5442) =< s(5469)
s(5443) =< s(5469)
s(5480) =< s(5469)
s(5477) =< s(5469)
s(5476) =< s(5469)
s(5476) =< s(5474)
s(5481) =< s(5474)
s(5480) =< s(5509)
s(5477) =< s(5509)
s(5476) =< s(5509)
s(5482) =< s(5509)
s(5470) =< aux(573)
s(5480) =< aux(573)
s(5477) =< aux(573)
s(5476) =< aux(573)
s(5468) =< s(5472)
s(5442) =< s(5472)
s(5480) =< s(5471)
s(5477) =< s(5471)
s(5476) =< s(5471)
s(5482) =< s(5471)
s(5412) =< aux(572)+2
s(5413) =< aux(572)+1
s(5414) =< aux(572)
s(5415) =< s(5402)+1
s(5416) =< s(5402)
s(5418) =< s(5394)
s(5403) =< s(5394)
s(5477) =< s(5469)+s(5470)+s(5469)+s(5469)+s(5468)+s(5467)
s(5476) =< s(5469)+s(5470)+s(5469)+s(5469)+s(5468)+s(5467)
s(5494) =< s(5442)*aux(572)
s(5495) =< s(5442)*s(5402)
s(5421) =< s(5403)+2
s(5418) =< s(5403)
s(5501) =< s(5443)*s(5412)
s(5502) =< s(5480)*s(5413)
s(5481) =< s(5477)*s(5414)
s(5498) =< s(5480)*s(5415)
s(5499) =< s(5480)*s(5416)
s(5497) =< s(5443)*s(5416)
s(5496) =< s(5443)*s(5414)
s(5476) =< s(5501)+s(5502)+s(5501)+s(5501)+s(5494)+aux(573)
s(5481) =< s(5501)+s(5502)+s(5501)+s(5501)+s(5494)+aux(573)
s(5483) =< s(5499)
s(5483) =< s(5498)
s(5429) =< s(5084)
s(5484) =< s(5483)*s(5421)
s(5485) =< s(5483)*s(5084)
s(5484) =< s(5483)*s(5429)
s(5496) =< s(5497)
s(5486) =< s(5497)
s(5486) =< s(5496)
s(5487) =< s(5486)*s(5418)
s(5488) =< s(5486)*s(5084)
s(5487) =< s(5486)*s(5429)
s(5489) =< s(5486)*s(5403)
s(5489) =< s(5486)*s(5429)
s(5490) =< s(5495)
s(5490) =< s(5494)
s(5491) =< s(5490)*s(5394)
s(5492) =< s(5490)*aux(569)
s(5491) =< s(5490)*s(5084)
s(5440) =< aux(610)
s(5206) =< aux(605)
s(5206) =< s(5202)
s(5441) =< s(5467)
s(5444) =< s(5469)
s(5441) =< s(5469)
s(5440) =< s(5469)
s(5440) =< s(5474)
s(5445) =< s(5474)
s(5444) =< s(5473)
s(5441) =< s(5473)
s(5440) =< s(5473)
s(5446) =< s(5473)
s(5444) =< aux(573)
s(5441) =< aux(573)
s(5440) =< aux(573)
s(5444) =< s(5471)
s(5441) =< s(5471)
s(5440) =< s(5471)
s(5446) =< s(5471)
s(5219) =< s(5206)+1
s(5220) =< s(5206)
s(5441) =< s(5469)+s(5470)+s(5469)+s(5469)+s(5468)+s(5467)
s(5440) =< s(5469)+s(5470)+s(5469)+s(5469)+s(5468)+s(5467)
s(5458) =< s(5442)*aux(609)
s(5459) =< s(5442)*s(5206)
s(5465) =< s(5443)*s(5067)
s(5466) =< s(5444)*s(5068)
s(5445) =< s(5441)*aux(572)
s(5462) =< s(5444)*s(5219)
s(5463) =< s(5444)*s(5220)
s(5461) =< s(5443)*s(5220)
s(5460) =< s(5443)*aux(572)
s(5440) =< s(5465)+s(5466)+s(5465)+s(5465)+s(5458)+aux(573)
s(5445) =< s(5465)+s(5466)+s(5465)+s(5465)+s(5458)+aux(573)
s(5447) =< s(5463)
s(5447) =< s(5462)
s(5448) =< s(5447)*s(5076)
s(5449) =< s(5447)*aux(569)
s(5448) =< s(5447)*s(5084)
s(5460) =< s(5461)
s(5450) =< s(5461)
s(5450) =< s(5460)
s(5451) =< s(5450)*s(5073)
s(5452) =< s(5450)*aux(569)
s(5451) =< s(5450)*s(5084)
s(5453) =< s(5450)*s(5052)
s(5453) =< s(5450)*s(5084)
s(5454) =< s(5459)
s(5454) =< s(5458)
s(5455) =< s(5454)*aux(606)
s(5456) =< s(5454)*aux(604)
s(5455) =< s(5454)*aux(569)

Unbounded itvars
s(5457) :  sum(302),s(5243)

  with precondition: [A=G,A>=3,B>=1,C>=0,D>=2,E>=1,F>=0,H>=1,I>=0] 

* Chain [308]: 10
  with precondition: [A=1,B=0,D=1,E=0,G=1,H=0,C>=0,F>=0,I>=0] 

* Chain [307]: 17*s(5048)+17*s(5059)+17*s(5062)+54*s(5063)+17*s(5064)+10*s(5065)+10*s(5066)+26*s(5083)+5*s(5085)+5*s(5086)+52*s(5087)+5*s(5088)+10*s(5089)+5*s(5090)+26*s(5091)+5*s(5092)+5*s(5093)+10
  Such that:s(5048) =< 1
s(5056) =< 1/2
s(5057) =< D
s(5049) =< D+E
s(5050) =< D+E+1
s(5051) =< D+2*E
s(5052) =< D+3*E+2
s(5053) =< 2*D+E
s(5058) =< E
s(5050) =< 2*E+1
s(5054) =< E/2
s(5055) =< 3/2*E
s(5059) =< s(5056)
s(5060) =< s(5057)
s(5061) =< s(5057)
s(5062) =< s(5057)
s(5063) =< s(5057)
s(5064) =< s(5057)
s(5059) =< s(5057)
s(5048) =< s(5057)
s(5048) =< s(5049)
s(5065) =< s(5049)
s(5064) =< s(5053)
s(5059) =< s(5053)
s(5048) =< s(5053)
s(5066) =< s(5053)
s(5061) =< s(5058)
s(5064) =< s(5058)
s(5059) =< s(5058)
s(5048) =< s(5058)
s(5060) =< s(5054)
s(5062) =< s(5054)
s(5064) =< s(5055)
s(5059) =< s(5055)
s(5048) =< s(5055)
s(5066) =< s(5055)
s(5067) =< s(5058)+2
s(5068) =< s(5058)+1
s(5069) =< s(5058)
s(5070) =< s(5050)+1
s(5071) =< s(5050)
s(5072) =< s(5057)
s(5073) =< s(5051)
s(5052) =< s(5051)
s(5059) =< s(5057)+s(5061)+s(5057)+s(5057)+s(5060)+s(5056)
s(5048) =< s(5057)+s(5061)+s(5057)+s(5057)+s(5060)+s(5056)
s(5074) =< s(5062)*s(5058)
s(5075) =< s(5062)*s(5050)
s(5076) =< s(5052)+2
s(5073) =< s(5052)
s(5077) =< s(5063)*s(5067)
s(5078) =< s(5064)*s(5068)
s(5065) =< s(5059)*s(5069)
s(5079) =< s(5064)*s(5070)
s(5080) =< s(5064)*s(5071)
s(5081) =< s(5063)*s(5071)
s(5082) =< s(5063)*s(5069)
s(5048) =< s(5077)+s(5078)+s(5077)+s(5077)+s(5074)+s(5058)
s(5065) =< s(5077)+s(5078)+s(5077)+s(5077)+s(5074)+s(5058)
s(5083) =< s(5080)
s(5083) =< s(5079)
s(5084) =< s(5072)
s(5085) =< s(5083)*s(5076)
s(5086) =< s(5083)*s(5072)
s(5085) =< s(5083)*s(5084)
s(5082) =< s(5081)
s(5087) =< s(5081)
s(5087) =< s(5082)
s(5088) =< s(5087)*s(5073)
s(5089) =< s(5087)*s(5072)
s(5088) =< s(5087)*s(5084)
s(5090) =< s(5087)*s(5052)
s(5090) =< s(5087)*s(5084)
s(5091) =< s(5075)
s(5091) =< s(5074)
s(5092) =< s(5091)*s(5051)
s(5093) =< s(5091)*s(5057)
s(5092) =< s(5091)*s(5072)

  with precondition: [A=1,B=0,G=1,H=0,C>=0,D>=2,E>=1,F>=0,I>=0] 

* Chain [306,308]: 26
  with precondition: [A=2,D=1,E=0,G=2,H=1,B>=1,C>=0,F>=0,I>=0] 

* Chain [304,307]: 34*s(5048)+34*s(5059)+34*s(5062)+108*s(5063)+34*s(5064)+20*s(5065)+20*s(5066)+52*s(5083)+10*s(5085)+10*s(5086)+104*s(5087)+10*s(5088)+20*s(5089)+10*s(5090)+52*s(5091)+10*s(5092)+10*s(5093)+26
  Such that:aux(592) =< 1
aux(593) =< 1/2
aux(594) =< D
aux(595) =< D+E
aux(596) =< D+E+1
aux(597) =< D+2*E
aux(598) =< D+3*E+2
aux(599) =< 2*D+E
aux(600) =< E
aux(601) =< 2*E+1
aux(602) =< E/2
aux(603) =< 3/2*E
s(5048) =< aux(592)
s(5050) =< aux(596)
s(5052) =< aux(598)
s(5050) =< aux(601)
s(5059) =< aux(593)
s(5060) =< aux(594)
s(5061) =< aux(594)
s(5062) =< aux(594)
s(5063) =< aux(594)
s(5064) =< aux(594)
s(5059) =< aux(594)
s(5048) =< aux(594)
s(5048) =< aux(595)
s(5065) =< aux(595)
s(5064) =< aux(599)
s(5059) =< aux(599)
s(5048) =< aux(599)
s(5066) =< aux(599)
s(5061) =< aux(600)
s(5064) =< aux(600)
s(5059) =< aux(600)
s(5048) =< aux(600)
s(5060) =< aux(602)
s(5062) =< aux(602)
s(5064) =< aux(603)
s(5059) =< aux(603)
s(5048) =< aux(603)
s(5066) =< aux(603)
s(5067) =< aux(600)+2
s(5068) =< aux(600)+1
s(5069) =< aux(600)
s(5070) =< s(5050)+1
s(5071) =< s(5050)
s(5072) =< aux(594)
s(5073) =< aux(597)
s(5052) =< aux(597)
s(5059) =< aux(594)+s(5061)+aux(594)+aux(594)+s(5060)+aux(593)
s(5048) =< aux(594)+s(5061)+aux(594)+aux(594)+s(5060)+aux(593)
s(5074) =< s(5062)*aux(600)
s(5075) =< s(5062)*s(5050)
s(5076) =< s(5052)+2
s(5073) =< s(5052)
s(5077) =< s(5063)*s(5067)
s(5078) =< s(5064)*s(5068)
s(5065) =< s(5059)*s(5069)
s(5079) =< s(5064)*s(5070)
s(5080) =< s(5064)*s(5071)
s(5081) =< s(5063)*s(5071)
s(5082) =< s(5063)*s(5069)
s(5048) =< s(5077)+s(5078)+s(5077)+s(5077)+s(5074)+aux(600)
s(5065) =< s(5077)+s(5078)+s(5077)+s(5077)+s(5074)+aux(600)
s(5083) =< s(5080)
s(5083) =< s(5079)
s(5084) =< s(5072)
s(5085) =< s(5083)*s(5076)
s(5086) =< s(5083)*s(5072)
s(5085) =< s(5083)*s(5084)
s(5082) =< s(5081)
s(5087) =< s(5081)
s(5087) =< s(5082)
s(5088) =< s(5087)*s(5073)
s(5089) =< s(5087)*s(5072)
s(5088) =< s(5087)*s(5084)
s(5090) =< s(5087)*s(5052)
s(5090) =< s(5087)*s(5084)
s(5091) =< s(5075)
s(5091) =< s(5074)
s(5092) =< s(5091)*aux(597)
s(5093) =< s(5091)*aux(594)
s(5092) =< s(5091)*s(5072)

  with precondition: [A=2,G=2,H=1,B>=1,C>=0,D>=2,E>=1,F>=0,I>=0] 


#### Simplifying cost structure of CE 400 

#### Computing cost of phase [314] 

#### Simplifying cost structure of CE 401 

#### Cost of loops [314] 

 * loop 314:new_transpose_helper(A,B,C,D,E,F,G,H,I) -> [new_transpose_helper(A',B',C',D',E',F',G',H',I')] 
17
##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 314: [it(314)=<1]

###### Computing sum for it(314)=<1  in Loop 314 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(314)=<A-1,it(314)=<A-1,it(314)=<A-A',it(314)=<A-A'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [314] 

#### Simplifying cost structure of phase [314] 

#### Cost of phase [314]:new_transpose_helper(A,B,C,D,E,F,G,H,I) -> [new_transpose_helper(A',B',C',D',E',F',G',H',I')] 
17*it(314)+0
  Such that:it(314) =< A
it(314) =< A-A'

#### Simplifying cost structure of chain [[314],315] 

#### Computing cost of phase [309,310,311] 
 * Renamed intermediate variables: 
[ (eq(408,1),it(122))>>s(5558), (eq(408,1),aux(36))>>s(5559), (eq(408,1),aux(38))>>s(5560), (eq(408,1),it(120))>>s(5561)]

#### Simplifying cost structure of CE 408 
 * Renamed intermediate variables: 
[ (it(309),s(5558))>>s(5562), (it(309),s(5560))>>s(5563), (it(309),s(5559))>>s(5564), (it(309),s(5561))>>s(5565)]
 * Renamed intermediate variables: 
[ (eq(404,1),s(74))>>s(5566), (eq(404,1),s(72))>>s(5567), (eq(404,1),s(73))>>s(5568), (eq(404,1),s(75))>>s(5569), (eq(404,1),s(79))>>s(5570), (eq(404,1),s(80))>>s(5571), (eq(404,1),s(81))>>s(5572), (eq(404,1),s(82))>>s(5573), (eq(404,1),s(83))>>s(5574), (eq(404,1),s(84))>>s(5575), (eq(404,1),s(85))>>s(5576)]

#### Simplifying cost structure of CE 404 
 * Renamed intermediate variables: 
[ (eq(406,1),aux(40))>>s(5577), (eq(406,1),it(120))>>s(5578)]

#### Simplifying cost structure of CE 406 
 * Renamed intermediate variables: 
[ (eq(407,1),aux(34))>>s(5579), (eq(407,1),s(74))>>s(5580), (eq(407,1),s(72))>>s(5581), (eq(407,1),s(73))>>s(5582), (eq(407,1),aux(41))>>s(5583), (eq(407,1),s(75))>>s(5584), (eq(407,1),s(79))>>s(5585), (eq(407,1),s(80))>>s(5586), (eq(407,1),s(81))>>s(5587), (eq(407,1),s(82))>>s(5588), (eq(407,1),s(83))>>s(5589), (eq(407,1),s(84))>>s(5590), (eq(407,1),s(85))>>s(5591), (eq(407,1),it(120))>>s(5592)]

#### Simplifying cost structure of CE 407 
 * Joined equivalent variables [aux(611),s(5579)] into aux(611)
 * Joined equivalent variables [aux(614),aux(611),s(5566)] into aux(614)
 * Joined equivalent variables [aux(615),aux(612),s(5567)] into aux(615)
 * Joined equivalent variables [aux(616),s(5568),s(5582)] into aux(616)
 * Renamed intermediate variables: 
[ (it(310),aux(613))>>s(5593), (it(310),s(5577))>>s(5594), (it(310),aux(614))>>s(5595), (it(310),aux(615))>>s(5596), (it(310),aux(616))>>s(5597), (it(310),s(5569))>>s(5598), (it(310),s(5570))>>s(5599), (it(310),s(5571))>>s(5600), (it(310),s(5572))>>s(5601), (it(310),s(5573))>>s(5602), (it(310),s(5574))>>s(5603), (it(310),s(5575))>>s(5604), (it(310),s(5576))>>s(5605), (it(310),s(5580))>>s(5606), (it(310),s(5581))>>s(5607), (it(310),s(5583))>>s(5608), (it(310),s(5584))>>s(5609), (it(310),s(5585))>>s(5610), (it(310),s(5586))>>s(5611), (it(310),s(5587))>>s(5612), (it(310),s(5588))>>s(5613), (it(310),s(5589))>>s(5614), (it(310),s(5590))>>s(5615), (it(310),s(5591))>>s(5616), (it(310),s(5592))>>s(5617), (it(310),s(5578))>>s(5618)]
 * Renamed intermediate variables: 
[ (eq(405,1),aux(39))>>s(5619), (eq(405,1),it(120))>>s(5620)]

#### Simplifying cost structure of CE 405 
 * Renamed intermediate variables: 
[ (it(311),s(5619))>>s(5621), (it(311),s(5620))>>s(5622)]

#### Cost of loops [309,310,311] 

 * loop 309:new_transpose_helper(A,B,C,D,E,F,G,H,I) -> [new_transpose_helper(A',B',C',D',E',F',G',H',I')] 
10*s(5562)+18*s(5565)+27
  Such that:s(5562) =< -D+D'+1
s(5563) =< D
s(5564) =< D'
s(5565) =< s(5563)
s(5565) =< s(5564)

 * loop 310:new_transpose_helper(A,B,C,D,E,F,G,H,I) -> [new_transpose_helper(A',B',C',D',E',F',G',H',I')] 
40*s(5598)+20*s(5603)+10*s(5604)+10*s(5605)+18*s(5618)+40*s(5609)+20*s(5614)+10*s(5615)+10*s(5616)+18*s(5617)+17
  Such that:s(5593) =< D+2
s(5594) =< D'
s(5595) =< D
s(5596) =< D+1
s(5597) =< E
s(5598) =< s(5595)
s(5599) =< s(5596)
s(5600) =< s(5598)*s(5596)
s(5601) =< s(5598)*s(5597)
s(5602) =< s(5598)*s(5599)
s(5603) =< s(5602)
s(5604) =< s(5600)
s(5605) =< s(5600)
s(5604) =< s(5601)
s(5606) =< s(5595)
s(5607) =< s(5595)
s(5606) =< s(5596)
s(5608) =< s(5596)
s(5607) =< s(5593)
s(5608) =< s(5593)
s(5609) =< s(5606)
s(5610) =< s(5607)
s(5611) =< s(5609)*s(5607)
s(5612) =< s(5609)*s(5597)
s(5613) =< s(5609)*s(5610)
s(5614) =< s(5613)
s(5615) =< s(5611)
s(5616) =< s(5611)
s(5615) =< s(5612)
s(5617) =< s(5595)
s(5617) =< s(5608)
s(5618) =< s(5594)

 * loop 311:new_transpose_helper(A,B,C,D,E,F,G,H,I) -> [new_transpose_helper(A',B',C',D',E',F',G',H',I')] 
18*s(5622)+27
  Such that:s(5621) =< D'
s(5622) =< s(5621)

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(5595)=<D,s(5596)=<D+1,s(5593)=<D+2,s(5597)=<E]
* Psum in Loop 309: [it(309)=<1,s(5623)=< -D+D'+1,s(5626)=<D,s(5625)=<D']
* Psum in Loop 310: [it(310)=<1,s(5639)=<D,s(5645)=<D+1,s(5644)=<D+2,s(5637)=<D']
* Psum in Loop 311: [it(311)=<1,s(5650)=<D']

###### Computing max_min for s(5595)=<D  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(5595)=<B+D-1] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(5596)=<D+1,s(5593)=<D+2,s(5597)=<E]
* Psum in Loop 309: [it(309)=<1,s(5623)=< -D+D'+1,s(5626)=<D,s(5625)=<D']
* Psum in Loop 310: [it(310)=<1,s(5639)=<D,s(5645)=<D+1,s(5644)=<D+2,s(5637)=<D']
* Psum in Loop 311: [it(311)=<1,s(5650)=<D']

###### Computing max_min for s(5596)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[s(5596)=<s(5595)+1] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(5593)=<D+2,s(5597)=<E]
* Psum in Loop 309: [it(309)=<1,s(5623)=< -D+D'+1,s(5626)=<D,s(5625)=<D']
* Psum in Loop 310: [it(310)=<1,s(5639)=<D,s(5645)=<D+1,s(5644)=<D+2,s(5637)=<D']
* Psum in Loop 311: [it(311)=<1,s(5650)=<D']

###### Computing max_min for s(5593)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[s(5593)=<s(5595)+2] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [s(5597)=<E]
* Psum in Loop 309: [it(309)=<1,s(5623)=< -D+D'+1,s(5626)=<D,s(5625)=<D']
* Psum in Loop 310: [it(310)=<1,s(5639)=<D,s(5645)=<D+1,s(5644)=<D+2,s(5637)=<D']
* Psum in Loop 311: [it(311)=<1,s(5650)=<D']

###### Computing max_min for s(5597)=<E  
   - Applying max/min strategy 
     - Loop 309  increases the expression by 1/1 
     - Loop 310  increases the expression by [E'-1] 
     - Loop 311  increases the expression by 1/1 
 * Adding constraints:[s(5597)=<aux(617)+it(309)+aux(618)+it(311),aux(617)=<E] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 309: [it(309)=<1,s(5623)=< -D+D'+1,s(5626)=<D,s(5625)=<D']
* Psum in Loop 310: [it(310)=<1,s(5639)=<D,s(5645)=<D+1,s(5644)=<D+2,s(5637)=<D',aux(618)=<E'-1]
* Psum in Loop 311: [it(311)=<1,s(5650)=<D']

###### Computing sum for it(309)=<1  in Loop 309 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - Loop 310 is collaborative and bounds [it(310)] 
       - Loop 311 is collaborative and bounds [it(311)] 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B/2-D/2-1/2 
       - Loop 310 is collaborative
       - Loop 311 is collaborative
     - tail Candidate: A-1 
       - Loop 310 is collaborative and bounds [it(310)] 
       - Loop 311 is collaborative and bounds [it(311)] 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B/2-D/2-1/2 
       - Loop 310 is collaborative
       - Loop 311 is collaborative
 * Adding constraints: [it(309)+it(310)+it(311)=<A-1,it(309)+it(310)+it(311)=<A-1,it(309)=<B/2-D/2-1/2,it(309)+it(310)+it(311)=<A-A',it(309)+it(310)+it(311)=<A-A',it(309)=<B/2-D/2-B'/2+D'/2] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 309: [s(5623)=< -D+D'+1,s(5626)=<D,s(5625)=<D']
* Psum in Loop 310: [it(310)=<1,s(5639)=<D,s(5645)=<D+1,s(5644)=<D+2,s(5637)=<D',aux(618)=<E'-1]
* Psum in Loop 311: [it(311)=<1,s(5650)=<D']

###### Computing sum for s(5623)=< -D+D'+1  in Loop 309 
   - Applying inductive sum strategy 
     - head Candidate: 3/2*B-3/2*D 
       - Loop 310 is collaborative
       - Loop 311 is collaborative and bounds [it(311)] 
     - head Candidate: A+B-D-1 
       - Loop 310 is collaborative
       - Loop 311 is collaborative and bounds [it(311)] 
     - tail Candidate: 3/2*B-3/2*D 
       - Loop 310 is collaborative
       - Loop 311 is collaborative and bounds [it(311)] 
     - tail Candidate: A+B-D-1 
       - Loop 310 is collaborative and bounds [it(310)] 
       - Loop 311 is collaborative and bounds [it(311)] 
 * Adding constraints: [it(311)+s(5623)=<3/2*B-3/2*D,it(311)+s(5623)=<A+B-D-1,it(311)+s(5623)=<3/2*B-3/2*D-3/2*B'+3/2*D',it(310)+it(311)+s(5623)=<A+B-D-A'-B'+D'] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 309: [s(5626)=<D,s(5625)=<D']
* Psum in Loop 310: [it(310)=<1,s(5639)=<D,s(5645)=<D+1,s(5644)=<D+2,s(5637)=<D',aux(618)=<E'-1]
* Psum in Loop 311: [it(311)=<1,s(5650)=<D']

###### Computing sum for s(5626)=<D  in Loop 309 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(619)=<D] 
 * Adding constraints: [s(5626)=<it(309)*aux(619)] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(619)=<D]
* Psum in Loop 309: [s(5625)=<D']
* Psum in Loop 310: [it(310)=<1,s(5639)=<D,s(5645)=<D+1,s(5644)=<D+2,s(5637)=<D',aux(618)=<E'-1]
* Psum in Loop 311: [it(311)=<1,s(5650)=<D']

###### Computing max_min for aux(619)=<D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(619)=<s(5595)] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 309: [s(5625)=<D']
* Psum in Loop 310: [it(310)=<1,s(5639)=<D,s(5645)=<D+1,s(5644)=<D+2,s(5637)=<D',aux(618)=<E'-1]
* Psum in Loop 311: [it(311)=<1,s(5650)=<D']

###### Computing sum for s(5625)=<D'  in Loop 309 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(620)=<B] 
 * Adding constraints: [s(5625)=<it(309)*aux(620)] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(620)=<B]
* Psum in Loop 310: [it(310)=<1,s(5639)=<D,s(5645)=<D+1,s(5644)=<D+2,s(5637)=<D',aux(618)=<E'-1]
* Psum in Loop 311: [it(311)=<1,s(5650)=<D']

###### Computing max_min for aux(620)=<B  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(620)=<B] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 310: [it(310)=<1,s(5639)=<D,s(5645)=<D+1,s(5644)=<D+2,s(5637)=<D',aux(618)=<E'-1]
* Psum in Loop 311: [it(311)=<1,s(5650)=<D']

###### Computing sum for it(310)=<1  in Loop 310 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(309)+it(310)+it(311)=<A-1,it(309)+it(310)+it(311)=<A-1,it(309)+it(310)+it(311)=<A-A',it(309)+it(310)+it(311)=<A-A'] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 310: [s(5639)=<D,s(5645)=<D+1,s(5644)=<D+2,s(5637)=<D',aux(618)=<E'-1]
* Psum in Loop 311: [it(311)=<1,s(5650)=<D']

###### Computing sum for s(5639)=<D  in Loop 310 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(621)=<D] 
 * Adding constraints: [s(5639)=<it(310)*aux(621)] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(621)=<D]
* Psum in Loop 310: [s(5645)=<D+1,s(5644)=<D+2,s(5637)=<D',aux(618)=<E'-1]
* Psum in Loop 311: [it(311)=<1,s(5650)=<D']

###### Computing max_min for aux(621)=<D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(621)=<s(5595)] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 310: [s(5645)=<D+1,s(5644)=<D+2,s(5637)=<D',aux(618)=<E'-1]
* Psum in Loop 311: [it(311)=<1,s(5650)=<D']

###### Computing sum for s(5645)=<D+1  in Loop 310 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(622)=<D+1] 
 * Adding constraints: [s(5645)=<it(310)*aux(622)] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(622)=<D+1]
* Psum in Loop 310: [s(5644)=<D+2,s(5637)=<D',aux(618)=<E'-1]
* Psum in Loop 311: [it(311)=<1,s(5650)=<D']

###### Computing max_min for aux(622)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(622)=<s(5595)+1] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 310: [s(5644)=<D+2,s(5637)=<D',aux(618)=<E'-1]
* Psum in Loop 311: [it(311)=<1,s(5650)=<D']

###### Computing sum for s(5644)=<D+2  in Loop 310 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(623)=<D+2] 
 * Adding constraints: [s(5644)=<it(310)*aux(623)] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(623)=<D+2]
* Psum in Loop 310: [s(5637)=<D',aux(618)=<E'-1]
* Psum in Loop 311: [it(311)=<1,s(5650)=<D']

###### Computing max_min for aux(623)=<D+2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(623)=<s(5595)+2] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 310: [s(5637)=<D',aux(618)=<E'-1]
* Psum in Loop 311: [it(311)=<1,s(5650)=<D']

###### Computing sum for s(5637)=<D'  in Loop 310 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(624)=<D] 
 * Adding constraints: [s(5637)=<it(310)*aux(624)] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(624)=<D]
* Psum in Loop 310: [aux(618)=<E'-1]
* Psum in Loop 311: [it(311)=<1,s(5650)=<D']

###### Computing max_min for aux(624)=<D  
   - Found a solution using cacheing 
 * Adding constraints:[aux(624)=<s(5595)] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 310: [aux(618)=<E'-1]
* Psum in Loop 311: [it(311)=<1,s(5650)=<D']

###### Computing sum for aux(618)=<E'-1  in Loop 310 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [] 
 * Adding constraints: [aux(618)=<it(310)*aux(625)] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 311: [it(311)=<1,s(5650)=<D']

###### Computing sum for it(311)=<1  in Loop 311 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-D 
       - Loop 309 is collaborative
       - Loop 310 is collaborative
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-D 
       - Loop 309 is collaborative
       - Loop 310 is collaborative
 * Adding constraints: [it(309)+it(310)+it(311)=<A-1,it(309)+it(310)+it(311)=<A-1,it(311)=<B-D,it(309)+it(310)+it(311)=<A-A',it(309)+it(310)+it(311)=<A-A',it(311)=<B-D-B'+D'] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Psum in Loop 311: [s(5650)=<D']

###### Computing sum for s(5650)=<D'  in Loop 311 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(626)=<B,aux(626)=<D+1] 
 * Adding constraints: [s(5650)=<it(311)*aux(626)] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(626)=<B,aux(626)=<D+1]

###### Computing max_min for aux(626)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(626)=<aux(620)] 

##### Pending set new_transpose_helper(A,B,C,D,E,F,G,H,I)
* Pmax/min: [aux(626)=<D+1]

###### Computing max_min for aux(626)=<D+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(626)=<s(5595)+1] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [309,310,311] 

#### Simplifying cost structure of phase [309,310,311] 
 * Joined equivalent variables [aux(622),s(5596)] into aux(622)
 * Joined equivalent variables [aux(619),aux(621),aux(624)] into aux(619)
 * Joined equivalent variables [aux(623),s(5593)] into aux(623)
 * Joined equivalent variables [s(5637),s(5639)] into s(5637)
 * Joined equivalent variables [s(5627),s(5631)] into s(5627)

#### Cost of phase [309,310,311]:new_transpose_helper(A,B,C,D,E,F,G,H,I) -> [new_transpose_helper(A',B',C',D',E',F',G',H',I')] 
27*it(309)+17*it(310)+27*it(311)+10*s(5623)+18*s(5624)+58*s(5627)+20*s(5628)+10*s(5629)+10*s(5630)+40*s(5632)+20*s(5633)+10*s(5634)+10*s(5635)+18*s(5636)+18*s(5649)+0
  Such that:aux(620) =< B
it(311) =< B-D
it(311) =< B-D-B'+D'
s(5595) =< B+D
it(309) =< B/2-D/2
it(309) =< B/2-D/2-B'/2+D'/2
aux(627) =< A
aux(628) =< A+B-D
aux(629) =< A+B-D-A'-B'+D'
aux(630) =< A-A'
aux(631) =< 3/2*B-3/2*D
aux(632) =< 3/2*B-3/2*D-3/2*B'+3/2*D'
it(309) =< aux(627)
it(310) =< aux(627)
it(311) =< aux(627)
it(311) =< aux(628)
s(5623) =< aux(628)
it(310) =< aux(629)
it(311) =< aux(629)
s(5623) =< aux(629)
it(309) =< aux(630)
it(310) =< aux(630)
it(311) =< aux(630)
it(311) =< aux(631)
s(5623) =< aux(631)
it(311) =< aux(632)
s(5623) =< aux(632)
aux(626) =< s(5595)+1
aux(626) =< aux(620)
aux(619) =< s(5595)
aux(623) =< s(5595)+2
aux(622) =< s(5595)+1
s(5625) =< it(309)*aux(620)
s(5650) =< it(311)*aux(626)
s(5637) =< it(310)*aux(619)
s(5644) =< it(310)*aux(623)
s(5645) =< it(310)*aux(622)
s(5626) =< it(309)*aux(619)
s(5649) =< s(5650)
s(5627) =< s(5637)
s(5599) =< aux(622)
s(5647) =< s(5627)*aux(622)
s(5648) =< s(5627)*s(5599)
s(5628) =< s(5648)
s(5629) =< s(5647)
s(5630) =< s(5647)
s(5643) =< s(5637)
s(5607) =< s(5595)
s(5643) =< s(5645)
s(5638) =< s(5645)
s(5607) =< aux(623)
s(5638) =< s(5644)
s(5632) =< s(5643)
s(5610) =< s(5607)
s(5641) =< s(5632)*s(5607)
s(5642) =< s(5632)*s(5610)
s(5633) =< s(5642)
s(5634) =< s(5641)
s(5635) =< s(5641)
s(5636) =< s(5637)
s(5636) =< s(5638)
s(5624) =< s(5626)
s(5624) =< s(5625)

#### Simplifying cost structure of chain [[309,310,311],315] 
 * Joined equivalent variables [aux(633),aux(627),aux(630)] into aux(633)
 * Joined equivalent variables [s(5634),s(5635)] into s(5634)
 * Joined equivalent variables [s(5629),s(5630)] into s(5629)

#### Simplifying cost structure of CE 402 

#### Simplifying cost structure of chain [313,[309,310,311],315] 
 * Joined equivalent variables [aux(634),aux(620)] into aux(634)

#### Found solution for phase  [314] in the cache 

#### Cost of phase [314]:new_transpose_helper(A,B,C,D,E,F,G,H,I) -> [new_transpose_helper(A',B',C',D',E',F',G',H',I')] 
17*it(314)+0
  Such that:it(314) =< A
it(314) =< A-A'

#### Simplifying cost structure of chain [[314],313,[309,310,311],315] 
 * Joined equivalent variables [aux(635),aux(633)] into aux(635)
 * Joined equivalent variables [aux(636),aux(628)] into aux(636)

#### Simplifying cost structure of chain [313,315] 

#### Found solution for phase  [314] in the cache 

#### Cost of phase [314]:new_transpose_helper(A,B,C,D,E,F,G,H,I) -> [new_transpose_helper(A',B',C',D',E',F',G',H',I')] 
17*it(314)+0
  Such that:it(314) =< A
it(314) =< A-A'

#### Simplifying cost structure of chain [[314],313,315] 
 * Renamed intermediate variables: 
[ (eq(403,1),it(122))>>s(5651)]

#### Simplifying cost structure of CE 403 

#### Simplifying cost structure of chain [312,[309,310,311],315] 
 * Joined equivalent variables [aux(638),aux(620)] into aux(638)

#### Found solution for phase  [314] in the cache 

#### Cost of phase [314]:new_transpose_helper(A,B,C,D,E,F,G,H,I) -> [new_transpose_helper(A',B',C',D',E',F',G',H',I')] 
17*it(314)+0
  Such that:it(314) =< A
it(314) =< A-A'

#### Simplifying cost structure of chain [[314],312,[309,310,311],315] 
 * Joined equivalent variables [aux(643),aux(633)] into aux(643)

#### Simplifying cost structure of chain [312,315] 

#### Found solution for phase  [314] in the cache 

#### Cost of phase [314]:new_transpose_helper(A,B,C,D,E,F,G,H,I) -> [new_transpose_helper(A',B',C',D',E',F',G',H',I')] 
17*it(314)+0
  Such that:it(314) =< A
it(314) =< A-A'

#### Simplifying cost structure of chain [[314],312,315] 
 * Renamed intermediate variables: 
[ (ch([312,[309,310,311],315]),aux(633))>>s(5652), (ch([312,[309,310,311],315]),aux(628))>>s(5653), (ch([312,[309,310,311],315]),aux(629))>>s(5654), (ch([312,[309,310,311],315]),it(309))>>s(5655), (ch([312,[309,310,311],315]),it(311))>>s(5656), (ch([312,[309,310,311],315]),aux(631))>>s(5657), (ch([312,[309,310,311],315]),aux(637))>>s(5658), (ch([312,[309,310,311],315]),aux(638))>>s(5659), (ch([312,[309,310,311],315]),aux(639))>>s(5660), (ch([312,[309,310,311],315]),aux(640))>>s(5661), (ch([312,[309,310,311],315]),aux(641))>>s(5662), (ch([312,[309,310,311],315]),aux(642))>>s(5663), (ch([312,[309,310,311],315]),s(5651))>>s(5664), (ch([312,[309,310,311],315]),s(5595))>>s(5665), (ch([312,[309,310,311],315]),aux(632))>>s(5666), (ch([312,[309,310,311],315]),it(310))>>s(5667), (ch([312,[309,310,311],315]),s(5623))>>s(5668), (ch([312,[309,310,311],315]),aux(626))>>s(5669), (ch([312,[309,310,311],315]),aux(619))>>s(5670), (ch([312,[309,310,311],315]),aux(623))>>s(5671), (ch([312,[309,310,311],315]),aux(622))>>s(5672), (ch([312,[309,310,311],315]),s(5625))>>s(5673), (ch([312,[309,310,311],315]),s(5650))>>s(5674), (ch([312,[309,310,311],315]),s(5637))>>s(5675), (ch([312,[309,310,311],315]),s(5644))>>s(5676), (ch([312,[309,310,311],315]),s(5645))>>s(5677), (ch([312,[309,310,311],315]),s(5626))>>s(5678), (ch([312,[309,310,311],315]),s(5649))>>s(5679), (ch([312,[309,310,311],315]),s(5627))>>s(5680), (ch([312,[309,310,311],315]),s(5599))>>s(5681), (ch([312,[309,310,311],315]),s(5647))>>s(5682), (ch([312,[309,310,311],315]),s(5648))>>s(5683), (ch([312,[309,310,311],315]),s(5628))>>s(5684), (ch([312,[309,310,311],315]),s(5629))>>s(5685), (ch([312,[309,310,311],315]),s(5643))>>s(5686), (ch([312,[309,310,311],315]),s(5607))>>s(5687), (ch([312,[309,310,311],315]),s(5638))>>s(5688), (ch([312,[309,310,311],315]),s(5632))>>s(5689), (ch([312,[309,310,311],315]),s(5610))>>s(5690), (ch([312,[309,310,311],315]),s(5641))>>s(5691), (ch([312,[309,310,311],315]),s(5642))>>s(5692), (ch([312,[309,310,311],315]),s(5633))>>s(5693), (ch([312,[309,310,311],315]),s(5634))>>s(5694), (ch([312,[309,310,311],315]),s(5636))>>s(5695), (ch([312,[309,310,311],315]),s(5624))>>s(5696)]
 * Renamed intermediate variables: 
[ (ch([313,[309,310,311],315]),aux(633))>>s(5697), (ch([313,[309,310,311],315]),aux(628))>>s(5698), (ch([313,[309,310,311],315]),aux(629))>>s(5699), (ch([313,[309,310,311],315]),s(5595))>>s(5700), (ch([313,[309,310,311],315]),it(311))>>s(5701), (ch([313,[309,310,311],315]),it(309))>>s(5702), (ch([313,[309,310,311],315]),aux(631))>>s(5703), (ch([313,[309,310,311],315]),aux(632))>>s(5704), (ch([313,[309,310,311],315]),aux(634))>>s(5705), (ch([313,[309,310,311],315]),it(310))>>s(5706), (ch([313,[309,310,311],315]),s(5623))>>s(5707), (ch([313,[309,310,311],315]),aux(626))>>s(5708), (ch([313,[309,310,311],315]),aux(619))>>s(5709), (ch([313,[309,310,311],315]),aux(623))>>s(5710), (ch([313,[309,310,311],315]),aux(622))>>s(5711), (ch([313,[309,310,311],315]),s(5625))>>s(5712), (ch([313,[309,310,311],315]),s(5650))>>s(5713), (ch([313,[309,310,311],315]),s(5637))>>s(5714), (ch([313,[309,310,311],315]),s(5644))>>s(5715), (ch([313,[309,310,311],315]),s(5645))>>s(5716), (ch([313,[309,310,311],315]),s(5626))>>s(5717), (ch([313,[309,310,311],315]),s(5649))>>s(5718), (ch([313,[309,310,311],315]),s(5627))>>s(5719), (ch([313,[309,310,311],315]),s(5599))>>s(5720), (ch([313,[309,310,311],315]),s(5647))>>s(5721), (ch([313,[309,310,311],315]),s(5648))>>s(5722), (ch([313,[309,310,311],315]),s(5628))>>s(5723), (ch([313,[309,310,311],315]),s(5629))>>s(5724), (ch([313,[309,310,311],315]),s(5643))>>s(5725), (ch([313,[309,310,311],315]),s(5607))>>s(5726), (ch([313,[309,310,311],315]),s(5638))>>s(5727), (ch([313,[309,310,311],315]),s(5632))>>s(5728), (ch([313,[309,310,311],315]),s(5610))>>s(5729), (ch([313,[309,310,311],315]),s(5641))>>s(5730), (ch([313,[309,310,311],315]),s(5642))>>s(5731), (ch([313,[309,310,311],315]),s(5633))>>s(5732), (ch([313,[309,310,311],315]),s(5634))>>s(5733), (ch([313,[309,310,311],315]),s(5636))>>s(5734), (ch([313,[309,310,311],315]),s(5624))>>s(5735)]
 * Renamed intermediate variables: 
[ (ch([[314],312,[309,310,311],315]),aux(628))>>s(5736), (ch([[314],312,[309,310,311],315]),aux(637))>>s(5737), (ch([[314],312,[309,310,311],315]),aux(638))>>s(5738), (ch([[314],312,[309,310,311],315]),aux(639))>>s(5739), (ch([[314],312,[309,310,311],315]),it(309))>>s(5740), (ch([[314],312,[309,310,311],315]),it(311))>>s(5741), (ch([[314],312,[309,310,311],315]),aux(640))>>s(5742), (ch([[314],312,[309,310,311],315]),aux(641))>>s(5743), (ch([[314],312,[309,310,311],315]),aux(631))>>s(5744), (ch([[314],312,[309,310,311],315]),aux(642))>>s(5745), (ch([[314],312,[309,310,311],315]),aux(643))>>s(5746), (ch([[314],312,[309,310,311],315]),aux(644))>>s(5747), (ch([[314],312,[309,310,311],315]),it(314))>>s(5748), (ch([[314],312,[309,310,311],315]),aux(629))>>s(5749), (ch([[314],312,[309,310,311],315]),s(5651))>>s(5750), (ch([[314],312,[309,310,311],315]),s(5595))>>s(5751), (ch([[314],312,[309,310,311],315]),aux(632))>>s(5752), (ch([[314],312,[309,310,311],315]),it(310))>>s(5753), (ch([[314],312,[309,310,311],315]),s(5623))>>s(5754), (ch([[314],312,[309,310,311],315]),aux(626))>>s(5755), (ch([[314],312,[309,310,311],315]),aux(619))>>s(5756), (ch([[314],312,[309,310,311],315]),aux(623))>>s(5757), (ch([[314],312,[309,310,311],315]),aux(622))>>s(5758), (ch([[314],312,[309,310,311],315]),s(5625))>>s(5759), (ch([[314],312,[309,310,311],315]),s(5650))>>s(5760), (ch([[314],312,[309,310,311],315]),s(5637))>>s(5761), (ch([[314],312,[309,310,311],315]),s(5644))>>s(5762), (ch([[314],312,[309,310,311],315]),s(5645))>>s(5763), (ch([[314],312,[309,310,311],315]),s(5626))>>s(5764), (ch([[314],312,[309,310,311],315]),s(5649))>>s(5765), (ch([[314],312,[309,310,311],315]),s(5627))>>s(5766), (ch([[314],312,[309,310,311],315]),s(5599))>>s(5767), (ch([[314],312,[309,310,311],315]),s(5647))>>s(5768), (ch([[314],312,[309,310,311],315]),s(5648))>>s(5769), (ch([[314],312,[309,310,311],315]),s(5628))>>s(5770), (ch([[314],312,[309,310,311],315]),s(5629))>>s(5771), (ch([[314],312,[309,310,311],315]),s(5643))>>s(5772), (ch([[314],312,[309,310,311],315]),s(5607))>>s(5773), (ch([[314],312,[309,310,311],315]),s(5638))>>s(5774), (ch([[314],312,[309,310,311],315]),s(5632))>>s(5775), (ch([[314],312,[309,310,311],315]),s(5610))>>s(5776), (ch([[314],312,[309,310,311],315]),s(5641))>>s(5777), (ch([[314],312,[309,310,311],315]),s(5642))>>s(5778), (ch([[314],312,[309,310,311],315]),s(5633))>>s(5779), (ch([[314],312,[309,310,311],315]),s(5634))>>s(5780), (ch([[314],312,[309,310,311],315]),s(5636))>>s(5781), (ch([[314],312,[309,310,311],315]),s(5624))>>s(5782)]
 * Renamed intermediate variables: 
[ (ch([[314],313,315]),it(314))>>s(5783)]
 * Renamed intermediate variables: 
[ (ch([[314],313,[309,310,311],315]),aux(629))>>s(5784), (ch([[314],313,[309,310,311],315]),aux(634))>>s(5785), (ch([[314],313,[309,310,311],315]),s(5595))>>s(5786), (ch([[314],313,[309,310,311],315]),it(311))>>s(5787), (ch([[314],313,[309,310,311],315]),it(309))>>s(5788), (ch([[314],313,[309,310,311],315]),aux(631))>>s(5789), (ch([[314],313,[309,310,311],315]),aux(632))>>s(5790), (ch([[314],313,[309,310,311],315]),aux(635))>>s(5791), (ch([[314],313,[309,310,311],315]),aux(636))>>s(5792), (ch([[314],313,[309,310,311],315]),it(314))>>s(5793), (ch([[314],313,[309,310,311],315]),it(310))>>s(5794), (ch([[314],313,[309,310,311],315]),s(5623))>>s(5795), (ch([[314],313,[309,310,311],315]),aux(626))>>s(5796), (ch([[314],313,[309,310,311],315]),aux(619))>>s(5797), (ch([[314],313,[309,310,311],315]),aux(623))>>s(5798), (ch([[314],313,[309,310,311],315]),aux(622))>>s(5799), (ch([[314],313,[309,310,311],315]),s(5625))>>s(5800), (ch([[314],313,[309,310,311],315]),s(5650))>>s(5801), (ch([[314],313,[309,310,311],315]),s(5637))>>s(5802), (ch([[314],313,[309,310,311],315]),s(5644))>>s(5803), (ch([[314],313,[309,310,311],315]),s(5645))>>s(5804), (ch([[314],313,[309,310,311],315]),s(5626))>>s(5805), (ch([[314],313,[309,310,311],315]),s(5649))>>s(5806), (ch([[314],313,[309,310,311],315]),s(5627))>>s(5807), (ch([[314],313,[309,310,311],315]),s(5599))>>s(5808), (ch([[314],313,[309,310,311],315]),s(5647))>>s(5809), (ch([[314],313,[309,310,311],315]),s(5648))>>s(5810), (ch([[314],313,[309,310,311],315]),s(5628))>>s(5811), (ch([[314],313,[309,310,311],315]),s(5629))>>s(5812), (ch([[314],313,[309,310,311],315]),s(5643))>>s(5813), (ch([[314],313,[309,310,311],315]),s(5607))>>s(5814), (ch([[314],313,[309,310,311],315]),s(5638))>>s(5815), (ch([[314],313,[309,310,311],315]),s(5632))>>s(5816), (ch([[314],313,[309,310,311],315]),s(5610))>>s(5817), (ch([[314],313,[309,310,311],315]),s(5641))>>s(5818), (ch([[314],313,[309,310,311],315]),s(5642))>>s(5819), (ch([[314],313,[309,310,311],315]),s(5633))>>s(5820), (ch([[314],313,[309,310,311],315]),s(5634))>>s(5821), (ch([[314],313,[309,310,311],315]),s(5636))>>s(5822), (ch([[314],313,[309,310,311],315]),s(5624))>>s(5823)]
 * Joined equivalent variables [aux(645),s(5652),s(5697),s(5746),s(5791)] into aux(645)
 * Joined equivalent variables [aux(646),s(5698),s(5792)] into aux(646)
 * Joined equivalent variables [aux(647),s(5658),s(5699),s(5737),s(5784)] into aux(647)
 * Joined equivalent variables [aux(649),s(5747)] into aux(649)
 * Joined equivalent variables [aux(650),s(5659),s(5705),s(5738),s(5785)] into aux(650)
 * Joined equivalent variables [aux(651),s(5700),s(5786)] into aux(651)
 * Joined equivalent variables [aux(652),s(5660),s(5739)] into aux(652)
 * Joined equivalent variables [aux(655),s(5661),s(5742)] into aux(655)
 * Joined equivalent variables [aux(656),s(5662),s(5743)] into aux(656)
 * Joined equivalent variables [aux(658),s(5663),s(5745)] into aux(658)
 * Joined equivalent variables [aux(660),s(5703),s(5789)] into aux(660)
 * Joined equivalent variables [aux(661),s(5704),s(5790)] into aux(661)
 * Joined equivalent variables [s(5653),s(5736)] into s(5653)
 * Joined equivalent variables [s(5657),s(5744)] into s(5657)
 * Joined equivalent variables [s(5708),s(5796)] into s(5708)
 * Joined equivalent variables [s(5711),s(5799)] into s(5711)
 * Joined equivalent variables [s(5709),s(5797)] into s(5709)
 * Joined equivalent variables [s(5710),s(5798)] into s(5710)
 * Joined equivalent variables [s(5701),s(5787)] into s(5701)
 * Joined equivalent variables [s(5706),s(5794)] into s(5706)
 * Joined equivalent variables [s(5655),s(5740)] into s(5655)
 * Joined equivalent variables [s(5707),s(5795)] into s(5707)
 * Joined equivalent variables [s(5664),s(5750)] into s(5664)
 * Joined equivalent variables [s(5654),s(5749)] into s(5654)
 * Joined equivalent variables [s(5665),s(5751)] into s(5665)
 * Joined equivalent variables [s(5666),s(5752)] into s(5666)
 * Joined equivalent variables [s(5672),s(5758)] into s(5672)
 * Joined equivalent variables [s(5669),s(5755)] into s(5669)
 * Joined equivalent variables [s(5670),s(5756)] into s(5670)
 * Joined equivalent variables [s(5671),s(5757)] into s(5671)
 * Joined equivalent variables [s(5713),s(5801)] into s(5713)
 * Joined equivalent variables [s(5714),s(5802)] into s(5714)
 * Joined equivalent variables [s(5715),s(5803)] into s(5715)
 * Joined equivalent variables [s(5716),s(5804)] into s(5716)
 * Joined equivalent variables [s(5720),s(5808)] into s(5720)
 * Joined equivalent variables [s(5673),s(5759)] into s(5673)
 * Joined equivalent variables [s(5656),s(5741)] into s(5656)
 * Joined equivalent variables [s(5667),s(5753)] into s(5667)
 * Joined equivalent variables [s(5668),s(5754)] into s(5668)
 * Joined equivalent variables [s(5726),s(5814)] into s(5726)
 * Joined equivalent variables [s(5674),s(5760)] into s(5674)
 * Joined equivalent variables [s(5675),s(5761)] into s(5675)
 * Joined equivalent variables [s(5676),s(5762)] into s(5676)
 * Joined equivalent variables [s(5677),s(5763)] into s(5677)
 * Joined equivalent variables [s(5678),s(5764)] into s(5678)
 * Joined equivalent variables [s(5681),s(5767)] into s(5681)
 * Joined equivalent variables [s(5729),s(5817)] into s(5729)
 * Joined equivalent variables [s(5718),s(5806)] into s(5718)
 * Joined equivalent variables [s(5719),s(5807)] into s(5719)
 * Joined equivalent variables [s(5687),s(5773)] into s(5687)
 * Joined equivalent variables [s(5725),s(5813)] into s(5725)
 * Joined equivalent variables [s(5727),s(5815)] into s(5727)
 * Joined equivalent variables [s(5690),s(5776)] into s(5690)
 * Joined equivalent variables [s(5721),s(5809)] into s(5721)
 * Joined equivalent variables [s(5722),s(5810)] into s(5722)
 * Joined equivalent variables [s(5696),s(5782)] into s(5696)
 * Joined equivalent variables [s(5679),s(5765)] into s(5679)
 * Joined equivalent variables [s(5680),s(5766)] into s(5680)
 * Joined equivalent variables [s(5734),s(5822)] into s(5734)
 * Joined equivalent variables [s(5728),s(5816)] into s(5728)
 * Joined equivalent variables [s(5686),s(5772)] into s(5686)
 * Joined equivalent variables [s(5688),s(5774)] into s(5688)
 * Joined equivalent variables [s(5682),s(5768)] into s(5682)
 * Joined equivalent variables [s(5683),s(5769)] into s(5683)
 * Joined equivalent variables [s(5730),s(5818)] into s(5730)
 * Joined equivalent variables [s(5731),s(5819)] into s(5731)
 * Joined equivalent variables [s(5695),s(5781)] into s(5695)
 * Joined equivalent variables [s(5689),s(5775)] into s(5689)
 * Joined equivalent variables [s(5724),s(5812)] into s(5724)
 * Joined equivalent variables [s(5723),s(5811)] into s(5723)
 * Joined equivalent variables [s(5691),s(5777)] into s(5691)
 * Joined equivalent variables [s(5692),s(5778)] into s(5692)
 * Joined equivalent variables [s(5685),s(5771)] into s(5685)
 * Joined equivalent variables [s(5684),s(5770)] into s(5684)
 * Joined equivalent variables [s(5733),s(5821)] into s(5733)
 * Joined equivalent variables [s(5732),s(5820)] into s(5732)
 * Joined equivalent variables [s(5694),s(5780)] into s(5694)
 * Joined equivalent variables [s(5693),s(5779)] into s(5693)

#### Cost of chains of new_transpose_helper(A,B,C,D,E,F,G,H,I):
* Chain [[314],315]: 17*it(314)+2
  Such that:it(314) =< A

  with precondition: [D=1,E=0,G=1,H=0,A>=2,B>=1,C>=0,F>=0,I>=0] 

* Chain [[314],313,[309,310,311],315]: 27*it(309)+17*it(310)+27*it(311)+17*it(314)+10*s(5623)+18*s(5624)+58*s(5627)+20*s(5628)+20*s(5629)+40*s(5632)+20*s(5633)+20*s(5634)+18*s(5636)+18*s(5649)+29
  Such that:aux(629) =< A+B+G
aux(634) =< B
s(5595) =< B+2
it(311) =< B+G
it(309) =< B/2
aux(631) =< 3/2*B
aux(632) =< 3/2*B+3/2*G
aux(635) =< A
aux(636) =< A+B
it(314) =< aux(635)
it(314) =< aux(636)
it(311) =< aux(634)
it(309) =< aux(635)
it(310) =< aux(635)
it(311) =< aux(635)
it(311) =< aux(636)
s(5623) =< aux(636)
it(310) =< aux(629)
it(311) =< aux(629)
s(5623) =< aux(629)
it(311) =< aux(631)
s(5623) =< aux(631)
it(311) =< aux(632)
s(5623) =< aux(632)
aux(626) =< s(5595)+1
aux(626) =< aux(634)
aux(619) =< s(5595)
aux(623) =< s(5595)+2
aux(622) =< s(5595)+1
s(5625) =< it(309)*aux(634)
s(5650) =< it(311)*aux(626)
s(5637) =< it(310)*aux(619)
s(5644) =< it(310)*aux(623)
s(5645) =< it(310)*aux(622)
s(5626) =< it(309)*aux(619)
s(5649) =< s(5650)
s(5627) =< s(5637)
s(5599) =< aux(622)
s(5647) =< s(5627)*aux(622)
s(5648) =< s(5627)*s(5599)
s(5628) =< s(5648)
s(5629) =< s(5647)
s(5643) =< s(5637)
s(5607) =< s(5595)
s(5643) =< s(5645)
s(5638) =< s(5645)
s(5607) =< aux(623)
s(5638) =< s(5644)
s(5632) =< s(5643)
s(5610) =< s(5607)
s(5641) =< s(5632)*s(5607)
s(5642) =< s(5632)*s(5610)
s(5633) =< s(5642)
s(5634) =< s(5641)
s(5636) =< s(5637)
s(5636) =< s(5638)
s(5624) =< s(5626)
s(5624) =< s(5625)

  with precondition: [D=1,E=0,A>=4,B>=2,C>=0,F>=0,G>=2,H>=1,I>=0] 

* Chain [[314],313,315]: 17*it(314)+29
  Such that:it(314) =< A

  with precondition: [D=1,E=0,G=2,H=2,A>=3,B>=2,C>=0,F>=0,I>=0] 

* Chain [[314],312,[309,310,311],315]: 27*it(309)+17*it(310)+27*it(311)+17*it(314)+10*s(5623)+18*s(5624)+58*s(5627)+20*s(5628)+20*s(5629)+40*s(5632)+20*s(5633)+20*s(5634)+18*s(5636)+18*s(5649)+10*s(5651)+29
  Such that:aux(628) =< A+B
aux(637) =< A+B+G
aux(628) =< A+2*B-G
aux(638) =< B
aux(639) =< B+G
it(309) =< B-G/2
it(311) =< 2*B-G
aux(640) =< 2*B+G
aux(641) =< 3*B+3*G
aux(631) =< 3*B-3/2*G
aux(642) =< 6*B+3*G
it(309) =< B/2
aux(631) =< 3/2*B
aux(643) =< A
aux(644) =< A+2*B+G
it(314) =< aux(643)
aux(629) =< aux(644)
it(314) =< aux(644)
aux(629) =< aux(637)
s(5651) =< aux(637)
it(311) =< aux(638)
it(309) =< aux(639)
it(311) =< aux(639)
it(309) =< aux(640)
it(311) =< aux(640)
s(5595) =< aux(640)
aux(632) =< aux(641)
s(5651) =< aux(641)
aux(632) =< aux(642)
s(5595) =< aux(642)
it(309) =< aux(643)
it(310) =< aux(643)
it(311) =< aux(643)
it(311) =< aux(628)
s(5623) =< aux(628)
it(310) =< aux(629)
it(311) =< aux(629)
s(5623) =< aux(629)
it(311) =< aux(631)
s(5623) =< aux(631)
it(311) =< aux(632)
s(5623) =< aux(632)
aux(626) =< s(5595)+1
aux(626) =< aux(638)
aux(619) =< s(5595)
aux(623) =< s(5595)+2
aux(622) =< s(5595)+1
s(5625) =< it(309)*aux(638)
s(5650) =< it(311)*aux(626)
s(5637) =< it(310)*aux(619)
s(5644) =< it(310)*aux(623)
s(5645) =< it(310)*aux(622)
s(5626) =< it(309)*aux(619)
s(5649) =< s(5650)
s(5627) =< s(5637)
s(5599) =< aux(622)
s(5647) =< s(5627)*aux(622)
s(5648) =< s(5627)*s(5599)
s(5628) =< s(5648)
s(5629) =< s(5647)
s(5643) =< s(5637)
s(5607) =< s(5595)
s(5643) =< s(5645)
s(5638) =< s(5645)
s(5607) =< aux(623)
s(5638) =< s(5644)
s(5632) =< s(5643)
s(5610) =< s(5607)
s(5641) =< s(5632)*s(5607)
s(5642) =< s(5632)*s(5610)
s(5633) =< s(5642)
s(5634) =< s(5641)
s(5636) =< s(5637)
s(5636) =< s(5638)
s(5624) =< s(5626)
s(5624) =< s(5625)

  with precondition: [D=1,E=0,A>=4,B>=3,C>=0,F>=0,G>=3,H>=1,I>=0] 

* Chain [[314],312,315]: 17*it(314)+10*s(5651)+29
  Such that:it(314) =< A
s(5651) =< G

  with precondition: [D=1,E=0,H=2,A>=3,C>=0,F>=0,G>=3,I>=0,B>=G] 

* Chain [[309,310,311],315]: 27*it(309)+17*it(310)+27*it(311)+10*s(5623)+18*s(5624)+58*s(5627)+20*s(5628)+20*s(5629)+40*s(5632)+20*s(5633)+20*s(5634)+18*s(5636)+18*s(5649)+2
  Such that:aux(628) =< A+B-D
aux(629) =< A+B-D+G
aux(620) =< B
it(311) =< B-D
it(311) =< B-D+G
s(5595) =< B+D
it(309) =< B/2-D/2
it(309) =< B/2-D/2+G/2
aux(631) =< 3/2*B-3/2*D
aux(632) =< 3/2*B-3/2*D+3/2*G
aux(633) =< A
it(309) =< aux(633)
it(310) =< aux(633)
it(311) =< aux(633)
it(311) =< aux(628)
s(5623) =< aux(628)
it(310) =< aux(629)
it(311) =< aux(629)
s(5623) =< aux(629)
it(311) =< aux(631)
s(5623) =< aux(631)
it(311) =< aux(632)
s(5623) =< aux(632)
aux(626) =< s(5595)+1
aux(626) =< aux(620)
aux(619) =< s(5595)
aux(623) =< s(5595)+2
aux(622) =< s(5595)+1
s(5625) =< it(309)*aux(620)
s(5650) =< it(311)*aux(626)
s(5637) =< it(310)*aux(619)
s(5644) =< it(310)*aux(623)
s(5645) =< it(310)*aux(622)
s(5626) =< it(309)*aux(619)
s(5649) =< s(5650)
s(5627) =< s(5637)
s(5599) =< aux(622)
s(5647) =< s(5627)*aux(622)
s(5648) =< s(5627)*s(5599)
s(5628) =< s(5648)
s(5629) =< s(5647)
s(5643) =< s(5637)
s(5607) =< s(5595)
s(5643) =< s(5645)
s(5638) =< s(5645)
s(5607) =< aux(623)
s(5638) =< s(5644)
s(5632) =< s(5643)
s(5610) =< s(5607)
s(5641) =< s(5632)*s(5607)
s(5642) =< s(5632)*s(5610)
s(5633) =< s(5642)
s(5634) =< s(5641)
s(5636) =< s(5637)
s(5636) =< s(5638)
s(5624) =< s(5626)
s(5624) =< s(5625)

  with precondition: [A>=2,B>=1,C>=0,D>=2,E>=1,F>=0,H>=1,I>=0,G>=D] 

* Chain [315]: 2
  with precondition: [A=1,B=0,D=G,E=H,F=I,C>=0,D>=0,E>=0,F>=0] 

* Chain [313,[309,310,311],315]: 27*it(309)+17*it(310)+27*it(311)+10*s(5623)+18*s(5624)+58*s(5627)+20*s(5628)+20*s(5629)+40*s(5632)+20*s(5633)+20*s(5634)+18*s(5636)+18*s(5649)+29
  Such that:aux(633) =< A
aux(628) =< A+B
aux(629) =< A+B+G
s(5595) =< B+2
it(311) =< B+G
it(309) =< B/2
it(309) =< B/2+G/2
aux(631) =< 3/2*B
aux(632) =< 3/2*B+3/2*G
aux(634) =< B
it(311) =< aux(634)
it(309) =< aux(633)
it(310) =< aux(633)
it(311) =< aux(633)
it(311) =< aux(628)
s(5623) =< aux(628)
it(310) =< aux(629)
it(311) =< aux(629)
s(5623) =< aux(629)
it(311) =< aux(631)
s(5623) =< aux(631)
it(311) =< aux(632)
s(5623) =< aux(632)
aux(626) =< s(5595)+1
aux(626) =< aux(634)
aux(619) =< s(5595)
aux(623) =< s(5595)+2
aux(622) =< s(5595)+1
s(5625) =< it(309)*aux(634)
s(5650) =< it(311)*aux(626)
s(5637) =< it(310)*aux(619)
s(5644) =< it(310)*aux(623)
s(5645) =< it(310)*aux(622)
s(5626) =< it(309)*aux(619)
s(5649) =< s(5650)
s(5627) =< s(5637)
s(5599) =< aux(622)
s(5647) =< s(5627)*aux(622)
s(5648) =< s(5627)*s(5599)
s(5628) =< s(5648)
s(5629) =< s(5647)
s(5643) =< s(5637)
s(5607) =< s(5595)
s(5643) =< s(5645)
s(5638) =< s(5645)
s(5607) =< aux(623)
s(5638) =< s(5644)
s(5632) =< s(5643)
s(5610) =< s(5607)
s(5641) =< s(5632)*s(5607)
s(5642) =< s(5632)*s(5610)
s(5633) =< s(5642)
s(5634) =< s(5641)
s(5636) =< s(5637)
s(5636) =< s(5638)
s(5624) =< s(5626)
s(5624) =< s(5625)

  with precondition: [D=1,E=0,A>=3,B>=2,C>=0,F>=0,G>=2,H>=1,I>=0] 

* Chain [313,315]: 29
  with precondition: [A=2,D=1,E=0,G=2,H=2,B>=2,C>=0,F>=0,I>=0] 

* Chain [312,[309,310,311],315]: 27*it(309)+17*it(310)+27*it(311)+10*s(5623)+18*s(5624)+58*s(5627)+20*s(5628)+20*s(5629)+40*s(5632)+20*s(5633)+20*s(5634)+18*s(5636)+18*s(5649)+10*s(5651)+29
  Such that:aux(633) =< A
aux(628) =< A+B
aux(628) =< A+2*B-G
aux(629) =< A+2*B+G
it(309) =< B-G/2
it(311) =< 2*B-G
aux(631) =< 3*B-3/2*G
it(309) =< B/2
aux(631) =< 3/2*B
aux(637) =< A+B+G
aux(638) =< B
aux(639) =< B+G
aux(640) =< 2*B+G
aux(641) =< 3*B+3*G
aux(642) =< 6*B+3*G
aux(629) =< aux(637)
s(5651) =< aux(637)
it(311) =< aux(638)
it(309) =< aux(639)
it(311) =< aux(639)
it(309) =< aux(640)
it(311) =< aux(640)
s(5595) =< aux(640)
aux(632) =< aux(641)
s(5651) =< aux(641)
aux(632) =< aux(642)
s(5595) =< aux(642)
it(309) =< aux(633)
it(310) =< aux(633)
it(311) =< aux(633)
it(311) =< aux(628)
s(5623) =< aux(628)
it(310) =< aux(629)
it(311) =< aux(629)
s(5623) =< aux(629)
it(311) =< aux(631)
s(5623) =< aux(631)
it(311) =< aux(632)
s(5623) =< aux(632)
aux(626) =< s(5595)+1
aux(626) =< aux(638)
aux(619) =< s(5595)
aux(623) =< s(5595)+2
aux(622) =< s(5595)+1
s(5625) =< it(309)*aux(638)
s(5650) =< it(311)*aux(626)
s(5637) =< it(310)*aux(619)
s(5644) =< it(310)*aux(623)
s(5645) =< it(310)*aux(622)
s(5626) =< it(309)*aux(619)
s(5649) =< s(5650)
s(5627) =< s(5637)
s(5599) =< aux(622)
s(5647) =< s(5627)*aux(622)
s(5648) =< s(5627)*s(5599)
s(5628) =< s(5648)
s(5629) =< s(5647)
s(5643) =< s(5637)
s(5607) =< s(5595)
s(5643) =< s(5645)
s(5638) =< s(5645)
s(5607) =< aux(623)
s(5638) =< s(5644)
s(5632) =< s(5643)
s(5610) =< s(5607)
s(5641) =< s(5632)*s(5607)
s(5642) =< s(5632)*s(5610)
s(5633) =< s(5642)
s(5634) =< s(5641)
s(5636) =< s(5637)
s(5636) =< s(5638)
s(5624) =< s(5626)
s(5624) =< s(5625)

  with precondition: [D=1,E=0,A>=3,B>=3,C>=0,F>=0,G>=3,H>=1,I>=0] 

* Chain [312,315]: 10*s(5651)+29
  Such that:s(5651) =< G

  with precondition: [A=2,D=1,E=0,H=2,C>=0,F>=0,G>=3,I>=0,B>=G] 


#### Simplifying cost structure of CE 409 
 * Renamed intermediate variables: 
[ (eq(410,2),s(54))>>s(5824), (eq(410,2),s(55))>>s(5825), (eq(410,2),aux(33))>>s(5826), (eq(410,2),s(68))>>s(5827), (eq(410,2),s(69))>>s(5828), (eq(410,2),s(70))>>s(5829), (eq(410,2),s(57))>>s(5830), (eq(410,2),s(58))>>s(5831), (eq(410,2),s(59))>>s(5832), (eq(410,2),s(60))>>s(5833), (eq(410,2),s(61))>>s(5834), (eq(410,2),s(62))>>s(5835), (eq(410,2),s(63))>>s(5836), (eq(410,2),s(64))>>s(5837)]

#### Simplifying cost structure of CE 410 
 * Joined equivalent variables [aux(662),s(5825),s(5826)] into aux(662)
 * Joined equivalent variables [s(5827),s(5828),s(5829),s(5830)] into s(5827)
 * Renamed intermediate variables: 
[ (eq(411,1),s(5651))>>s(5838)]
 * Renamed intermediate variables: 
[ (eq(411,2),s(54))>>s(5839), (eq(411,2),s(55))>>s(5840), (eq(411,2),aux(33))>>s(5841), (eq(411,2),s(68))>>s(5842), (eq(411,2),s(69))>>s(5843), (eq(411,2),s(70))>>s(5844), (eq(411,2),s(57))>>s(5845), (eq(411,2),s(58))>>s(5846), (eq(411,2),s(59))>>s(5847), (eq(411,2),s(60))>>s(5848), (eq(411,2),s(61))>>s(5849), (eq(411,2),s(62))>>s(5850), (eq(411,2),s(63))>>s(5851), (eq(411,2),s(64))>>s(5852)]

#### Simplifying cost structure of CE 411 
 * Joined equivalent variables [aux(663),s(5841)] into aux(663)
 * Joined equivalent variables [s(5842),s(5843),s(5844),s(5845)] into s(5842)
 * Joined equivalent variables [s(5838),s(5842)] into s(5838)
 * Renamed intermediate variables: 
[ (eq(412,1),it(314))>>s(5853)]

#### Simplifying cost structure of CE 412 
 * Renamed intermediate variables: 
[ (eq(413,1),s(5702))>>s(5854), (eq(413,1),aux(645))>>s(5855), (eq(413,1),aux(646))>>s(5856), (eq(413,1),aux(647))>>s(5857), (eq(413,1),aux(648))>>s(5858), (eq(413,1),aux(649))>>s(5859), (eq(413,1),aux(650))>>s(5860), (eq(413,1),aux(651))>>s(5861), (eq(413,1),aux(652))>>s(5862), (eq(413,1),aux(653))>>s(5863), (eq(413,1),aux(654))>>s(5864), (eq(413,1),aux(655))>>s(5865), (eq(413,1),aux(656))>>s(5866), (eq(413,1),aux(657))>>s(5867), (eq(413,1),aux(658))>>s(5868), (eq(413,1),aux(659))>>s(5869), (eq(413,1),aux(660))>>s(5870), (eq(413,1),aux(661))>>s(5871), (eq(413,1),s(5783))>>s(5872), (eq(413,1),s(5653))>>s(5873), (eq(413,1),s(5654))>>s(5874), (eq(413,1),s(5701))>>s(5875), (eq(413,1),s(5655))>>s(5876), (eq(413,1),s(5656))>>s(5877), (eq(413,1),s(5657))>>s(5878), (eq(413,1),s(5788))>>s(5879), (eq(413,1),s(5664))>>s(5880), (eq(413,1),s(5665))>>s(5881), (eq(413,1),s(5666))>>s(5882), (eq(413,1),s(5667))>>s(5883), (eq(413,1),s(5668))>>s(5884), (eq(413,1),s(5669))>>s(5885), (eq(413,1),s(5670))>>s(5886), (eq(413,1),s(5671))>>s(5887), (eq(413,1),s(5672))>>s(5888), (eq(413,1),s(5673))>>s(5889), (eq(413,1),s(5674))>>s(5890), (eq(413,1),s(5675))>>s(5891), (eq(413,1),s(5676))>>s(5892), (eq(413,1),s(5677))>>s(5893), (eq(413,1),s(5678))>>s(5894), (eq(413,1),s(5679))>>s(5895), (eq(413,1),s(5680))>>s(5896), (eq(413,1),s(5681))>>s(5897), (eq(413,1),s(5682))>>s(5898), (eq(413,1),s(5683))>>s(5899), (eq(413,1),s(5684))>>s(5900), (eq(413,1),s(5685))>>s(5901), (eq(413,1),s(5686))>>s(5902), (eq(413,1),s(5687))>>s(5903), (eq(413,1),s(5688))>>s(5904), (eq(413,1),s(5689))>>s(5905), (eq(413,1),s(5690))>>s(5906), (eq(413,1),s(5691))>>s(5907), (eq(413,1),s(5692))>>s(5908), (eq(413,1),s(5693))>>s(5909), (eq(413,1),s(5694))>>s(5910), (eq(413,1),s(5695))>>s(5911), (eq(413,1),s(5696))>>s(5912), (eq(413,1),s(5706))>>s(5913), (eq(413,1),s(5707))>>s(5914), (eq(413,1),s(5708))>>s(5915), (eq(413,1),s(5709))>>s(5916), (eq(413,1),s(5710))>>s(5917), (eq(413,1),s(5711))>>s(5918), (eq(413,1),s(5712))>>s(5919), (eq(413,1),s(5713))>>s(5920), (eq(413,1),s(5714))>>s(5921), (eq(413,1),s(5715))>>s(5922), (eq(413,1),s(5716))>>s(5923), (eq(413,1),s(5717))>>s(5924), (eq(413,1),s(5718))>>s(5925), (eq(413,1),s(5719))>>s(5926), (eq(413,1),s(5720))>>s(5927), (eq(413,1),s(5721))>>s(5928), (eq(413,1),s(5722))>>s(5929), (eq(413,1),s(5723))>>s(5930), (eq(413,1),s(5724))>>s(5931), (eq(413,1),s(5725))>>s(5932), (eq(413,1),s(5726))>>s(5933), (eq(413,1),s(5727))>>s(5934), (eq(413,1),s(5728))>>s(5935), (eq(413,1),s(5729))>>s(5936), (eq(413,1),s(5730))>>s(5937), (eq(413,1),s(5731))>>s(5938), (eq(413,1),s(5732))>>s(5939), (eq(413,1),s(5733))>>s(5940), (eq(413,1),s(5734))>>s(5941), (eq(413,1),s(5735))>>s(5942), (eq(413,1),s(5748))>>s(5943), (eq(413,1),s(5793))>>s(5944), (eq(413,1),s(5800))>>s(5945), (eq(413,1),s(5805))>>s(5946), (eq(413,1),s(5823))>>s(5947)]
 * Renamed intermediate variables: 
[ (eq(413,2),s(54))>>s(5948), (eq(413,2),s(55))>>s(5949), (eq(413,2),aux(33))>>s(5950), (eq(413,2),s(68))>>s(5951), (eq(413,2),s(69))>>s(5952), (eq(413,2),s(70))>>s(5953), (eq(413,2),s(57))>>s(5954), (eq(413,2),s(58))>>s(5955), (eq(413,2),s(59))>>s(5956), (eq(413,2),s(60))>>s(5957), (eq(413,2),s(61))>>s(5958), (eq(413,2),s(62))>>s(5959), (eq(413,2),s(63))>>s(5960), (eq(413,2),s(64))>>s(5961)]

#### Simplifying cost structure of CE 413 
 * Joined equivalent variables [aux(664),s(5860),s(5863)] into aux(664)
 * Joined equivalent variables [s(5854),s(5879)] into s(5854)
 * Joined equivalent variables [s(5951),s(5952),s(5953),s(5954)] into s(5951)
 * Joined equivalent variables [s(5924),s(5946)] into s(5924)
 * Joined equivalent variables [s(5919),s(5945)] into s(5919)
 * Joined equivalent variables [s(5942),s(5947)] into s(5942)
 * Renamed intermediate variables: 
[ (eq(414,1),it(314))>>s(5962), (eq(414,1),s(5651))>>s(5963)]
 * Renamed intermediate variables: 
[ (eq(414,2),s(54))>>s(5964), (eq(414,2),s(55))>>s(5965), (eq(414,2),aux(33))>>s(5966), (eq(414,2),s(68))>>s(5967), (eq(414,2),s(69))>>s(5968), (eq(414,2),s(70))>>s(5969), (eq(414,2),s(57))>>s(5970), (eq(414,2),s(58))>>s(5971), (eq(414,2),s(59))>>s(5972), (eq(414,2),s(60))>>s(5973), (eq(414,2),s(61))>>s(5974), (eq(414,2),s(62))>>s(5975), (eq(414,2),s(63))>>s(5976), (eq(414,2),s(64))>>s(5977)]

#### Simplifying cost structure of CE 414 
 * Joined equivalent variables [aux(665),s(5966)] into aux(665)
 * Joined equivalent variables [s(5967),s(5968),s(5969),s(5970)] into s(5967)
 * Joined equivalent variables [s(5963),s(5967)] into s(5963)
 * Joined equivalent variables [aux(666),s(5855)] into aux(666)
 * Joined equivalent variables [aux(667),aux(664),aux(665)] into aux(667)
 * Joined equivalent variables [s(5880),s(5896),s(5900),s(5901),s(5905),s(5909),s(5910),s(5911),s(5951),s(5959),s(5960),s(5961)] into s(5880)
 * Joined equivalent variables [s(5872),s(5883),s(5913),s(5943)] into s(5872)
 * Joined equivalent variables [s(5872),s(5962)] into s(5872)

#### Cost of chains of new_transpose(A,B,C,D,E,F):
* Chain [320]: 14
  with precondition: [A=1,B=0,D=1,E=0,C>=0,F>=0] 

* Chain [319]: 40*s(5827)+20*s(5835)+10*s(5836)+10*s(5837)+41
  Such that:s(5824) =< 3
aux(662) =< 2
s(5827) =< aux(662)
s(5831) =< s(5824)
s(5832) =< s(5827)*s(5824)
s(5833) =< s(5827)*aux(662)
s(5834) =< s(5827)*s(5831)
s(5835) =< s(5834)
s(5836) =< s(5832)
s(5837) =< s(5832)
s(5836) =< s(5833)

  with precondition: [A=2,D=2,B>=2,C>=0,E>=1,F>=0] 

* Chain [318]: 50*s(5838)+20*s(5850)+10*s(5851)+10*s(5852)+41
  Such that:s(5840) =< 2
s(5839) =< B+1
aux(663) =< B
s(5838) =< aux(663)
s(5846) =< s(5839)
s(5847) =< s(5838)*s(5839)
s(5848) =< s(5838)*s(5840)
s(5849) =< s(5838)*s(5846)
s(5850) =< s(5849)
s(5851) =< s(5847)
s(5852) =< s(5847)
s(5851) =< s(5848)

  with precondition: [A=2,C>=0,D>=3,E>=1,F>=0,B>=D] 

* Chain [317]: 17*s(5853)+14
  Such that:s(5853) =< A

  with precondition: [D=1,E=0,A>=2,B>=1,C>=0,F>=0] 

* Chain [316]: 54*s(5854)+119*s(5872)+54*s(5875)+54*s(5876)+54*s(5877)+492*s(5880)+20*s(5884)+36*s(5895)+36*s(5912)+20*s(5914)+36*s(5925)+116*s(5926)+40*s(5930)+40*s(5931)+80*s(5935)+40*s(5939)+40*s(5940)+36*s(5941)+36*s(5942)+17*s(5944)+50*s(5963)+20*s(5975)+10*s(5976)+10*s(5977)+41
  Such that:s(5965) =< 2
s(5856) =< A+B
s(5858) =< A+2*B
s(5964) =< B+1
s(5861) =< B+2
s(5864) =< 2*B
s(5867) =< 3*B
s(5869) =< B/2
s(5870) =< 3/2*B
aux(666) =< A
aux(667) =< B
s(5872) =< aux(666)
s(5963) =< aux(667)
s(5971) =< s(5964)
s(5972) =< s(5963)*s(5964)
s(5973) =< s(5963)*s(5965)
s(5974) =< s(5963)*s(5971)
s(5975) =< s(5974)
s(5976) =< s(5972)
s(5977) =< s(5972)
s(5976) =< s(5973)
s(5873) =< s(5856)
s(5873) =< s(5858)
s(5876) =< aux(667)
s(5877) =< s(5864)
s(5878) =< s(5867)
s(5876) =< s(5869)
s(5854) =< s(5869)
s(5878) =< s(5870)
s(5877) =< aux(667)
s(5876) =< aux(666)
s(5877) =< aux(666)
s(5877) =< s(5873)
s(5884) =< s(5873)
s(5877) =< s(5878)
s(5884) =< s(5878)
s(5885) =< aux(667)
s(5889) =< s(5876)*aux(667)
s(5890) =< s(5877)*s(5885)
s(5895) =< s(5890)
s(5912) =< s(5889)
s(5875) =< aux(667)
s(5854) =< aux(666)
s(5875) =< aux(666)
s(5875) =< s(5856)
s(5914) =< s(5856)
s(5875) =< s(5870)
s(5914) =< s(5870)
s(5915) =< s(5861)+1
s(5915) =< aux(667)
s(5916) =< s(5861)
s(5917) =< s(5861)+2
s(5918) =< s(5861)+1
s(5919) =< s(5854)*aux(667)
s(5920) =< s(5875)*s(5915)
s(5921) =< s(5872)*s(5916)
s(5922) =< s(5872)*s(5917)
s(5923) =< s(5872)*s(5918)
s(5924) =< s(5854)*s(5916)
s(5925) =< s(5920)
s(5926) =< s(5921)
s(5927) =< s(5918)
s(5928) =< s(5926)*s(5918)
s(5929) =< s(5926)*s(5927)
s(5930) =< s(5929)
s(5931) =< s(5928)
s(5932) =< s(5921)
s(5933) =< s(5861)
s(5932) =< s(5923)
s(5934) =< s(5923)
s(5933) =< s(5917)
s(5934) =< s(5922)
s(5935) =< s(5932)
s(5936) =< s(5933)
s(5937) =< s(5935)*s(5933)
s(5938) =< s(5935)*s(5936)
s(5939) =< s(5938)
s(5940) =< s(5937)
s(5941) =< s(5921)
s(5941) =< s(5934)
s(5942) =< s(5924)
s(5942) =< s(5919)
s(5944) =< aux(666)
s(5944) =< s(5856)

Unbounded itvars
s(5880) :  eq(413,1),s(5664)

  with precondition: [A>=3,B>=2,C>=0,D>=2,E>=1,F>=0] 


#### Simplifying cost structure of CE 415 

#### Cost of chains of remFirstRow(A,B,C,D,E,F):
* Chain [321]: 2
  with precondition: [D+1=A,B>=1,D>=1,E>=0,F>=0,B>=E,C>=F] 


#### Simplifying cost structure of CE 416 

#### Computing cost of phase [322] 

#### Simplifying cost structure of CE 417 

#### Cost of loops [322] 

 * loop 322:size(A,B,C) -> [size(A',B',C')] 
6
##### Pending set size(A,B,C)
* Psum in Loop 322: [it(322)=<1]

###### Computing sum for it(322)=<1  in Loop 322 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(322)=<A-1,it(322)=<A-1,it(322)=<A-A',it(322)=<A-A'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [322] 

#### Simplifying cost structure of phase [322] 

#### Cost of phase [322]:size(A,B,C) -> [size(A',B',C')] 
6*it(322)+0
  Such that:it(322) =< A
it(322) =< A-A'

#### Simplifying cost structure of chain [[322],323] 

#### Cost of chains of size(A,B,C):
* Chain [[322],323]: 6*it(322)+3
  Such that:it(322) =< C

  with precondition: [A=C+1,A>=2,B>=1] 

* Chain [323]: 3
  with precondition: [A=1,B=0,C=0] 


#### Simplifying cost structure of CE 426 

#### Simplifying cost structure of CE 418 

#### Simplifying cost structure of chain [327,324] 

#### Computing cost of phase [325,326,328,329] 
 * Renamed intermediate variables: 
[ (eq(422,1),it(178))>>s(5978)]

#### Simplifying cost structure of CE 422 
 * Renamed intermediate variables: 
[ (it(325),s(5978))>>s(5979)]
 * Renamed intermediate variables: 
[ (eq(424,1),it(178))>>s(5980)]

#### Simplifying cost structure of CE 424 
 * Renamed intermediate variables: 
[ (it(326),s(5980))>>s(5981)]

#### Simplifying cost structure of CE 420 

#### Simplifying cost structure of CE 419 

#### Simplifying cost structure of CE 421 
 * Renamed intermediate variables: 
[ (eq(423,1),it(178))>>s(5982)]

#### Simplifying cost structure of CE 423 
 * Renamed intermediate variables: 
[ (eq(425,1),it(178))>>s(5983)]

#### Simplifying cost structure of CE 425 
 * Renamed intermediate variables: 
[ (it(329),s(5982))>>s(5984), (it(329),s(5983))>>s(5985)]

#### Cost of loops [325,326,328,329] 

 * loop 325:submat(A,B,C,D,E,F,G,H) -> [submat(A',B',C',D',E',F',G',H')] 
10*s(5979)+14
  Such that:s(5979) =< B
s(5979) =< E'+1

 * loop 326:submat(A,B,C,D,E,F,G,H) -> [submat(A',B',C',D',E',F',G',H')] 
10*s(5981)+17
  Such that:s(5981) =< E'

 * loop 328:submat(A,B,C,D,E,F,G,H) -> [submat(A',B',C',D',E',F',G',H')] 
17
 * loop 329:submat(A,B,C,D,E,F,G,H) -> [submat(A',B',C',D',E',F',G',H')] 
10*s(5984)+10*s(5985)+17
  Such that:s(5984) =< B'
s(5985) =< E'
s(5984) =< E'+1

##### Pending set submat(A,B,C,D,E,F,G,H)
* Psum in Loop 325: [it(325)=<1,s(5986)=<B,s(5986)=<E'+1]
* Psum in Loop 326: [it(326)=<1,s(5987)=<E']
* Psum in Loop 328: [it(328)=<1]
* Psum in Loop 329: [it(329)=<1,s(5988)=<B',s(5989)=<E',s(5988)=<E'+1]

###### Computing sum for it(325)=<1  in Loop 325 
   - Applying inductive sum strategy 
     - head Candidate: D 
       - Loop 326 is collaborative and bounds [it(326)] 
       - Loop 328 is collaborative and bounds [it(328)] 
       - Loop 329 is collaborative and bounds [it(329)] 
     - head Candidate: A-1 
       - Loop 326 is collaborative and bounds [it(326)] 
       - Loop 328 is collaborative and bounds [it(328)] 
       - Loop 329 is collaborative and bounds [it(329)] 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D 
       - Loop 326 is collaborative and bounds [it(326)] 
       - Loop 328 is collaborative and bounds [it(328)] 
       - Loop 329 is collaborative and bounds [it(329)] 
     - tail Candidate: A-1 
       - Loop 326 is collaborative and bounds [it(326)] 
       - Loop 328 is collaborative and bounds [it(328)] 
       - Loop 329 is collaborative and bounds [it(329)] 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(325)+it(326)+it(328)+it(329)=<D,it(325)+it(326)+it(328)+it(329)=<A-1,it(325)+it(326)+it(328)+it(329)=<A-1,it(325)+it(326)+it(328)+it(329)=<D,it(325)+it(326)+it(328)+it(329)=<D-D',it(325)+it(326)+it(328)+it(329)=<A-A',it(325)+it(326)+it(328)+it(329)=<A-A',it(325)+it(326)+it(328)+it(329)=<D-D'] 

##### Pending set A
* Psum in Loop 325: [s(5986)=<B,s(5986)=<E'+1]
* Psum in Loop 326: [it(326)=<1,s(5987)=<E']
* Psum in Loop 328: [it(328)=<1]
* Psum in Loop 329: [it(329)=<1,s(5988)=<B',s(5989)=<E',s(5988)=<E'+1]

###### Computing sum for s(5986)=<B  in Loop 325 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(668)=<B] 
 * Adding constraints: [s(5986)=<it(325)*aux(668)] 

##### Pending set submat(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(668)=<B]
* Psum in Loop 325: [s(5986)=<E'+1]
* Psum in Loop 326: [it(326)=<1,s(5987)=<E']
* Psum in Loop 328: [it(328)=<1]
* Psum in Loop 329: [it(329)=<1,s(5988)=<B',s(5989)=<E',s(5988)=<E'+1]

###### Computing max_min for aux(668)=<B  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(668)=<B] 

##### Pending set submat(A,B,C,D,E,F,G,H)
* Psum in Loop 325: [s(5986)=<E'+1]
* Psum in Loop 326: [it(326)=<1,s(5987)=<E']
* Psum in Loop 328: [it(328)=<1]
* Psum in Loop 329: [it(329)=<1,s(5988)=<B',s(5989)=<E',s(5988)=<E'+1]

###### Computing sum for s(5986)=<E'+1  in Loop 325 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(669)=<E+1] 
 * Adding constraints: [s(5986)=<it(325)*aux(669)] 

##### Pending set submat(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(669)=<E+1]
* Psum in Loop 326: [it(326)=<1,s(5987)=<E']
* Psum in Loop 328: [it(328)=<1]
* Psum in Loop 329: [it(329)=<1,s(5988)=<B',s(5989)=<E',s(5988)=<E'+1]

###### Computing max_min for aux(669)=<E+1  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(669)=<E+1] 

##### Pending set submat(A,B,C,D,E,F,G,H)
* Psum in Loop 326: [it(326)=<1,s(5987)=<E']
* Psum in Loop 328: [it(328)=<1]
* Psum in Loop 329: [it(329)=<1,s(5988)=<B',s(5989)=<E',s(5988)=<E'+1]

###### Computing sum for it(326)=<1  in Loop 326 
   - Applying inductive sum strategy 
     - head Candidate: D 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(325)+it(326)+it(328)+it(329)=<D,it(325)+it(326)+it(328)+it(329)=<A-1,it(325)+it(326)+it(328)+it(329)=<A-1,it(325)+it(326)+it(328)+it(329)=<D,it(325)+it(326)+it(328)+it(329)=<D-D',it(325)+it(326)+it(328)+it(329)=<A-A',it(325)+it(326)+it(328)+it(329)=<A-A',it(325)+it(326)+it(328)+it(329)=<D-D'] 

##### Pending set submat(A,B,C,D,E,F,G,H)
* Psum in Loop 326: [s(5987)=<E']
* Psum in Loop 328: [it(328)=<1]
* Psum in Loop 329: [it(329)=<1,s(5988)=<B',s(5989)=<E',s(5988)=<E'+1]

###### Computing sum for s(5987)=<E'  in Loop 326 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(670)=<E,aux(670)=<B-2] 
 * Adding constraints: [s(5987)=<it(326)*aux(670)] 

##### Pending set submat(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(670)=<B-2,aux(670)=<E]
* Psum in Loop 328: [it(328)=<1]
* Psum in Loop 329: [it(329)=<1,s(5988)=<B',s(5989)=<E',s(5988)=<E'+1]

###### Computing max_min for aux(670)=<B-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(670)=<aux(668)-2] 

##### Pending set submat(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(670)=<E]
* Psum in Loop 328: [it(328)=<1]
* Psum in Loop 329: [it(329)=<1,s(5988)=<B',s(5989)=<E',s(5988)=<E'+1]

###### Computing max_min for aux(670)=<E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(670)=<aux(669)-1] 

##### Pending set submat(A,B,C,D,E,F,G,H)
* Psum in Loop 328: [it(328)=<1]
* Psum in Loop 329: [it(329)=<1,s(5988)=<B',s(5989)=<E',s(5988)=<E'+1]

###### Computing sum for it(328)=<1  in Loop 328 
   - Applying inductive sum strategy 
     - head Candidate: D 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(325)+it(326)+it(328)+it(329)=<D,it(325)+it(326)+it(328)+it(329)=<A-1,it(325)+it(326)+it(328)+it(329)=<A-1,it(325)+it(326)+it(328)+it(329)=<D,it(325)+it(326)+it(328)+it(329)=<D-D',it(325)+it(326)+it(328)+it(329)=<A-A',it(325)+it(326)+it(328)+it(329)=<A-A',it(325)+it(326)+it(328)+it(329)=<D-D'] 

##### Pending set submat(A,B,C,D,E,F,G,H)
* Psum in Loop 329: [it(329)=<1,s(5988)=<B',s(5989)=<E',s(5988)=<E'+1]

###### Computing sum for it(329)=<1  in Loop 329 
   - Applying inductive sum strategy 
     - head Candidate: D 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(325)+it(326)+it(328)+it(329)=<D,it(325)+it(326)+it(328)+it(329)=<A-1,it(325)+it(326)+it(328)+it(329)=<A-1,it(325)+it(326)+it(328)+it(329)=<D,it(325)+it(326)+it(328)+it(329)=<D-D',it(325)+it(326)+it(328)+it(329)=<A-A',it(325)+it(326)+it(328)+it(329)=<A-A',it(325)+it(326)+it(328)+it(329)=<D-D'] 

##### Pending set submat(A,B,C,D,E,F,G,H)
* Psum in Loop 329: [s(5988)=<B',s(5989)=<E',s(5988)=<E'+1]

###### Computing sum for s(5988)=<B'  in Loop 329 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(671)=<B] 
 * Adding constraints: [s(5988)=<it(329)*aux(671)] 

##### Pending set submat(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(671)=<B]
* Psum in Loop 329: [s(5989)=<E',s(5988)=<E'+1]

###### Computing max_min for aux(671)=<B  
   - Found a solution using cacheing 
 * Adding constraints:[aux(671)=<aux(668)] 

##### Pending set submat(A,B,C,D,E,F,G,H)
* Psum in Loop 329: [s(5989)=<E',s(5988)=<E'+1]

###### Computing sum for s(5989)=<E'  in Loop 329 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(672)=<E] 
 * Adding constraints: [s(5989)=<it(329)*aux(672)] 

##### Pending set submat(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(672)=<E]
* Psum in Loop 329: [s(5988)=<E'+1]

###### Computing max_min for aux(672)=<E  
   - Found a solution using cacheing 
 * Adding constraints:[aux(672)=<aux(669)-1] 

##### Pending set submat(A,B,C,D,E,F,G,H)
* Psum in Loop 329: [s(5988)=<E'+1]

###### Computing sum for s(5988)=<E'+1  in Loop 329 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(673)=<E+1] 
 * Adding constraints: [s(5988)=<it(329)*aux(673)] 

##### Pending set submat(A,B,C,D,E,F,G,H)
* Pmax/min: [aux(673)=<E+1]

###### Computing max_min for aux(673)=<E+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(673)=<aux(669)] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [325,326,328,329] 

#### Simplifying cost structure of phase [325,326,328,329] 
 * Joined equivalent variables [it(325),it(326),it(328),it(329)] into it(325)

#### Cost of phase [325,326,328,329]:submat(A,B,C,D,E,F,G,H) -> [submat(A',B',C',D',E',F',G',H')] 
65*it(325)+10*s(5986)+10*s(5987)+10*s(5988)+10*s(5989)+0
  Such that:aux(668) =< B
aux(669) =< E+1
aux(674) =< A
aux(675) =< A-A'
aux(676) =< D
aux(677) =< D-D'
it(325) =< aux(674)
it(325) =< aux(675)
it(325) =< aux(676)
it(325) =< aux(677)
aux(673) =< aux(669)
aux(672) =< aux(669)-1
aux(671) =< aux(668)
aux(670) =< aux(669)-1
aux(670) =< aux(668)-2
s(5986) =< it(325)*aux(669)
s(5986) =< it(325)*aux(668)
s(5988) =< it(325)*aux(673)
s(5989) =< it(325)*aux(672)
s(5988) =< it(325)*aux(671)
s(5987) =< it(325)*aux(670)

#### Simplifying cost structure of chain [[325,326,328,329],327,324] 
 * Joined equivalent variables [aux(678),aux(674),aux(675),aux(677)] into aux(678)

#### Found solution for phase  [325,326,328,329] in the cache 

#### Cost of phase [325,326,328,329]:submat(A,B,C,D,E,F,G,H) -> [submat(A',B',C',D',E',F',G',H')] 
65*it(325)+10*s(5986)+10*s(5987)+10*s(5988)+10*s(5989)+0
  Such that:aux(668) =< B
aux(669) =< E+1
aux(674) =< A
aux(675) =< A-A'
aux(676) =< D
aux(677) =< D-D'
it(325) =< aux(674)
it(325) =< aux(675)
it(325) =< aux(676)
it(325) =< aux(677)
aux(673) =< aux(669)
aux(672) =< aux(669)-1
aux(671) =< aux(668)
aux(670) =< aux(669)-1
aux(670) =< aux(668)-2
s(5986) =< it(325)*aux(669)
s(5986) =< it(325)*aux(668)
s(5988) =< it(325)*aux(673)
s(5989) =< it(325)*aux(672)
s(5988) =< it(325)*aux(671)
s(5987) =< it(325)*aux(670)

#### Simplifying cost structure of chain [[325,326,328,329],324] 
 * Joined equivalent variables [aux(679),aux(674),aux(675),aux(677)] into aux(679)

#### Cost of chains of submat(A,B,C,D,E,F,G,H):
* Chain [[325,326,328,329],327,324]: 65*it(325)+10*s(5986)+10*s(5987)+10*s(5988)+10*s(5989)+17
  Such that:aux(668) =< B
aux(676) =< D
aux(669) =< E+1
aux(678) =< A
it(325) =< aux(678)
it(325) =< aux(676)
aux(673) =< aux(669)
aux(672) =< aux(669)-1
aux(671) =< aux(668)
aux(670) =< aux(669)-1
aux(670) =< aux(668)-2
s(5986) =< it(325)*aux(669)
s(5986) =< it(325)*aux(668)
s(5988) =< it(325)*aux(673)
s(5989) =< it(325)*aux(672)
s(5988) =< it(325)*aux(671)
s(5987) =< it(325)*aux(670)

  with precondition: [A=F,A>=3,C>=0,E>=0,G>=1,H>=0,D+1>=A,B>=G] 

* Chain [[325,326,328,329],324]: 65*it(325)+10*s(5986)+10*s(5987)+10*s(5988)+10*s(5989)+3
  Such that:aux(668) =< B
aux(676) =< D
aux(669) =< E+1
aux(679) =< A
it(325) =< aux(679)
it(325) =< aux(676)
aux(673) =< aux(669)
aux(672) =< aux(669)-1
aux(671) =< aux(668)
aux(670) =< aux(669)-1
aux(670) =< aux(668)-2
s(5986) =< it(325)*aux(669)
s(5986) =< it(325)*aux(668)
s(5988) =< it(325)*aux(673)
s(5989) =< it(325)*aux(672)
s(5988) =< it(325)*aux(671)
s(5987) =< it(325)*aux(670)

  with precondition: [A=F,A>=2,B>=2,C>=0,E>=0,G>=1,H>=0,D+1>=A,B>=G,B+E>=G+1] 

* Chain [327,324]: 17
  with precondition: [A=2,F=2,G=1,B>=1,C>=0,D>=1,E>=0,H>=0] 

* Chain [324]: 3
  with precondition: [A=1,B=0,F=1,G=0,C>=0,D>=0,E>=0,H>=0] 


Closed-form bounds of size(A,B,C): 
-------------------------------------
* Chain [[322],323] with precondition: [A=C+1,A>=2,B>=1] 
    - Upper bound: 6*A+3 
    - Complexity: n 
* Chain [323] with precondition: [A=1,B=0,C=0] 
    - Upper bound: 3 
    - Complexity: constant 

### Maximum cost of size(A,B,C): 6*A+3 
Asymptotic class: n 

Closed-form bounds of check_lists(A,B,C,D,E): 
-------------------------------------
* Chain [[127],129] with precondition: [D=0,E=1,A>=2,B>=1,C>=0] 
    - Upper bound: 10*A+3 
    - Complexity: n 
* Chain [[127],128] with precondition: [D=0,E=0,A>=3,B>=2,C>=0] 
    - Upper bound: 10*A+6*B+10 
    - Complexity: n 
* Chain [[126],129] with precondition: [E=1,A>=2,C>=0,D>=1,B>=D+1] 
    - Upper bound: 10*A+3+6*A*D 
    - Complexity: n^2 
* Chain [[126],128] with precondition: [E=0,A>=3,C>=0,D>=1,B>=D+2] 
    - Upper bound: 10*A+10+6*A*D+6*B 
    - Complexity: n^2 
* Chain [129] with precondition: [A=1,B=0,E=1,C>=0,D>=0] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [128] with precondition: [E=0,A>=2,C>=0,D>=0,B>=D+2] 
    - Upper bound: 6*B+10 
    - Complexity: n 

### Maximum cost of check_lists(A,B,C,D,E): 6*A*D+10*A+ (6*B+10) 
Asymptotic class: n^2 

Closed-form bounds of check_mat(A,B,C,D,E,F): 
-------------------------------------
* Chain [139] with precondition: [A=0,C=1,D=0,F=1,B>=0,E>=0] 
    - Upper bound: 10 
    - Complexity: constant 
* Chain [138] with precondition: [B=0,F=1,A+1=C,A>=1,D>=1,E>=0] 
    - Upper bound: 16*C+10 
    - Complexity: n 
* Chain [137] with precondition: [F=0,A+1=C,A>=1,B>=0,E>=0,D>=B+2] 
    - Upper bound: 6*A+17+ (A+1)* (6*B)+18*D+ (20*A+20) 
    - Complexity: n^2 
* Chain [136] with precondition: [F=0,A>=0,B>=0,D>=1,E>=0,C>=A+2] 
    - Upper bound: 6*C+7 
    - Complexity: n 
* Chain [135] with precondition: [F=1,A+1=C,A>=1,B>=1,E>=0,D>=B+1] 
    - Upper bound: 6*B*C+10+16*C 
    - Complexity: n^2 

### Maximum cost of check_mat(A,B,C,D,E,F): max([10*C+3+6*B*C+6*C,6*A+7+ (A+1)* (6*B)+18*D+ (20*A+20)+3])+7 
Asymptotic class: n^2 

Closed-form bounds of check_matrix(A,B,C,D,E): 
-------------------------------------
* Chain [142] with precondition: [A=1,B=0,D=1,E=1,C>=0] 
    - Upper bound: 13 
    - Complexity: constant 
* Chain [141] with precondition: [D=1,E=0,A>=2,B>=1,C>=0] 
    - Upper bound: 32*A+18*B+20+6*C*A 
    - Complexity: n^2 
* Chain [140] with precondition: [D=1,E=1,A>=2,B>=1,C+1>=A] 
    - Upper bound: 32*A+13+6*B*A 
    - Complexity: n^2 

### Maximum cost of check_matrix(A,B,C,D,E): 32*A+max([6*B*A,18*B+7+6*C*A])+13 
Asymptotic class: n^2 

Closed-form bounds of construct_matrix(A,B,C,D,E,F,G,H,I): 
-------------------------------------
* Chain [175] with precondition: [A=0,C=1,D=0,F=1,G=0,I=1,B>=0,E>=0,H>=B,H>=E] 
    - Upper bound: 14 
    - Complexity: constant 
* Chain [174] with precondition: [B=0,I=1,A+1=C,A+1=F,D=G,A>=1,D>=1,E>=0,H>=A,H>=E] 
    - Upper bound: 16*C+14 
    - Complexity: n 
* Chain [173] with precondition: [F=1,G=0,I=1,A+1=C,A>=1,B>=0,E>=0,H>=0,D>=B+2] 
    - Upper bound: 6*A+25+ (A+1)* (6*B)+18*D+ (20*A+20) 
    - Complexity: n^2 
* Chain [172] with precondition: [F=1,G=0,I=1,A>=0,B>=0,D>=1,E>=0,H>=0,C>=A+2] 
    - Upper bound: 6*C+15 
    - Complexity: n 
* Chain [171] with precondition: [I=1,A+1=C,A+1=F,D=G,A>=1,B>=1,E>=0,H>=A,D>=B+1,H>=B,H>=E] 
    - Upper bound: 6*B*C+14+16*C 
    - Complexity: n^2 

### Maximum cost of construct_matrix(A,B,C,D,E,F,G,H,I): max([6*C+max([1,6*B*C+10*C]),6*A+11+ (A+1)* (6*B)+18*D+ (20*A+20)])+14 
Asymptotic class: n^2 

Closed-form bounds of get_elemL(A,B,C,D,E,F): 
-------------------------------------
* Chain [[273],274] with precondition: [D>=1,E>=1,F>=0,A>=D+2,B>=E,C>=F] 
    - Upper bound: 8*D+5 
    - Complexity: n 
* Chain [274] with precondition: [D=0,A>=2,E>=1,F>=0,B>=E,C>=F] 
    - Upper bound: 5 
    - Complexity: constant 

### Maximum cost of get_elemL(A,B,C,D,E,F): 8*D+5 
Asymptotic class: n 

Closed-form bounds of get_elemMat(A,B,C,D,E,F,G): 
-------------------------------------
* Chain [284] with precondition: [D=1,E=0,F=0,A>=2,B>=2,G>=0,C>=G] 
    - Upper bound: 14 
    - Complexity: constant 
* Chain [283] with precondition: [D=1,E=0,A>=2,F>=1,G>=0,B>=F+2,C>=G] 
    - Upper bound: 8*F+14 
    - Complexity: n 
* Chain [282] with precondition: [D=1,F=0,B>=2,E>=1,G>=0,A>=E+2,C>=G] 
    - Upper bound: 8*E+14 
    - Complexity: n 
* Chain [281] with precondition: [D=1,E>=1,F>=1,G>=0,A>=E+2,B>=F+2,C>=G] 
    - Upper bound: 8*E+8*F+14 
    - Complexity: n 

### Maximum cost of get_elemMat(A,B,C,D,E,F,G): 8*E+8*F+14 
Asymptotic class: n 

Closed-form bounds of op(A,B,C,D): 
-------------------------------------
* Chain [182] with precondition: [A=0,B=C+D,C>=0,B>=C] 
    - Upper bound: 4 
    - Complexity: constant 
* Chain [181] with precondition: [B+C=D,A>=1,B>=0,C>=0] 
    - Upper bound: 4 
    - Complexity: constant 

### Maximum cost of op(A,B,C,D): 4 
Asymptotic class: constant 

Closed-form bounds of rec_list(A,B,C,D,E,F,G): 
-------------------------------------
* Chain [[186],184] with precondition: [E=0,A=F,A>=2,B>=0,D>=0,G>=0,C>=A] 
    - Upper bound: 13*A+3 
    - Complexity: n 
* Chain [[186],183] with precondition: [E=0,C=F,B>=0,C>=2,D>=0,G>=0,A>=C+1] 
    - Upper bound: 13*C+6 
    - Complexity: n 
* Chain [[185],184] with precondition: [A=F,A>=2,B>=0,D>=0,E>=1,G>=0,C>=A] 
    - Upper bound: 13*A+3 
    - Complexity: n 
* Chain [[185],183] with precondition: [C=F,B>=0,C>=2,D>=0,E>=1,G>=0,A>=C+1] 
    - Upper bound: 13*C+6 
    - Complexity: n 
* Chain [184] with precondition: [A=1,F=1,B>=0,C>=0,D>=0,E>=0,G>=0] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [183] with precondition: [C=1,F=1,A>=2,B>=0,D>=0,E>=0,G>=0] 
    - Upper bound: 6 
    - Complexity: constant 

### Maximum cost of rec_list(A,B,C,D,E,F,G): max([13*C+3,13*A])+3 
Asymptotic class: n 

Closed-form bounds of rec_mat(A,B,C,D,E,F,G,H,I,J): 
-------------------------------------
* Chain [[189,191,192],190,188] with precondition: [A=H,A>=3,C>=0,F>=0,G>=0,I>=1,J>=0,D>=A,B>=I,E>=I] 
    - Upper bound: 45*A+18+104*B*A 
    - Complexity: n^2 
* Chain [[189,191,192],190,187] with precondition: [D=H,C>=0,D>=3,F>=0,G>=0,I>=1,J>=0,A>=D+1,B>=I,E>=I] 
    - Upper bound: 45*A+21+104*B*A 
    - Complexity: n^2 
* Chain [[189,191,192],188] with precondition: [A=H,A>=2,C>=0,F>=0,G>=0,I>=2,J>=0,D>=A,B>=I,E>=I] 
    - Upper bound: 45*A+3+104*B*A 
    - Complexity: n^2 
* Chain [[189,191,192],187] with precondition: [D=H,C>=0,D>=2,F>=0,G>=0,I>=2,J>=0,A>=D+1,B>=I,E>=I] 
    - Upper bound: 45*A+6+104*B*A 
    - Complexity: n^2 
* Chain [190,188] with precondition: [A=2,H=2,I=1,B>=1,C>=0,D>=2,E>=1,F>=0,G>=0,J>=0] 
    - Upper bound: 18 
    - Complexity: constant 
* Chain [190,187] with precondition: [D=2,H=2,I=1,A>=3,B>=1,C>=0,E>=1,F>=0,G>=0,J>=0] 
    - Upper bound: 21 
    - Complexity: constant 
* Chain [188] with precondition: [A=1,B=0,H=1,I=0,C>=0,D>=0,E>=0,F>=0,G>=0,J>=0] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [187] with precondition: [D=1,E=0,H=1,I=0,A>=2,B>=1,C>=0,F>=0,G>=0,J>=0] 
    - Upper bound: 6 
    - Complexity: constant 

### Maximum cost of rec_mat(A,B,C,D,E,F,G,H,I,J): max([18,104*B*A+45*A+18])+3 
Asymptotic class: n^2 

Closed-form bounds of check_sanity(A,B,C,D,E,F,G,H,I): 
-------------------------------------
* Chain [159] with precondition: [D=1,H=1,I=0,A>=2,B>=1,C>=0,E>=2,F>=1,G>=0] 
    - Upper bound: 1120*A+51+210*A*B+324*B+1120*E+210*E*F+324*F 
    - Complexity: n^2 
* Chain [158] with precondition: [D=1,H=1,I=1,A>=2,B>=1,E>=2,F>=1,C+1>=A,G+1>=E] 
    - Upper bound: 32*A+37+6*B*A+32*E+6*F*E 
    - Complexity: n^2 

### Maximum cost of check_sanity(A,B,C,D,E,F,G,H,I): 32*A+32*E+37+max([6*F*E+6*B*A,1088*A+14+210*A*B+324*B+1088*E+210*E*F+324*F]) 
Asymptotic class: n^2 

Closed-form bounds of plus(A,B,C,D,E,F,G,H,I,J,K,L): 
-------------------------------------
* Chain [262] with precondition: [D=1,H=1,I=1,J=0,L=1,A>=2,B>=1,C>=0,E>=2,F>=1,G>=0,K>=0] 
    - Upper bound: 1672*A+169+246*A*B+408*B+832*B*A+12*B*E+1344*E+240*E*F+324*F 
    - Complexity: n^2 
* Chain [261] with precondition: [A=2,D=1,H=1,I=2,J=1,L=1,B>=1,C>=1,E>=2,F>=1,K>=1,G+1>=E] 
    - Upper bound: 12*B+32*E+175+6*F*E 
    - Complexity: n^2 
* Chain [260] with precondition: [D=1,E=2,H=1,I=1,J=0,L=1,A>=3,B>=1,F>=1,G>=1,K>=0,C+1>=A] 
    - Upper bound: 32*A+159+6*B*A+12*F 
    - Complexity: n^2 
* Chain [259] with precondition: [D=1,E=2,H=1,I=2,J=1,L=1,A>=3,B>=1,F>=1,G>=1,K>=1,C+1>=A] 
    - Upper bound: 32*A+178+6*B*A+12*F 
    - Complexity: n^2 
* Chain [258] with precondition: [D=1,H=1,L=1,A=I,A>=2,J>=2,C+1>=A,E>=A,K+1>=A,G+1>=E,B>=J,F>=J] 
    - Upper bound: 215*A+79+12*A*B+312*B*A+6*C*A+32*E+6*G*E 
    - Complexity: n^2 
* Chain [257] with precondition: [D=1,H=1,L=1,A=I,A>=3,J>=1,C+1>=A,E>=A,K+1>=A,G+1>=E,B>=J,F>=J] 
    - Upper bound: 93*A+79+104*B*A+6*C*A+32*E+6*G*E 
    - Complexity: n^2 
* Chain [256] with precondition: [D=1,H=1,L=1,E=I,E>=2,J>=2,C+1>=A,A>=E+1,G+1>=E,K+1>=E,B>=J,F>=J] 
    - Upper bound: 167*A+82+312*B*A+12*B*E+6*C*A+80*E+6*G*E 
    - Complexity: n^2 
* Chain [255] with precondition: [D=1,H=1,L=1,E=I,E>=3,J>=1,C+1>=A,A>=E+1,G+1>=E,K+1>=E,B>=J,F>=J] 
    - Upper bound: 77*A+82+104*B*A+6*C*A+48*E+6*G*E 
    - Complexity: n^2 

### Maximum cost of plus(A,B,C,D,E,F,G,H,I,J,K,L): max([6*B*A+32*A+max([12*F+99,98*B*A+45*A+32*E+max([16*A+max([6*G*E+6*C*A,208*B*A+74*A+max([12*A*B+48*A+max([6*G*E+6*C*A,1457*A+90+234*A*B+408*B+520*B*A+12*B*E+1312*E+240*E*F+324*F]),12*B*E+3+6*C*A+48*E+6*G*E])]),6*C*A+3+16*E+6*G*E])]),12*B+32*E+96+6*F*E])+79 
Asymptotic class: n^2 

Closed-form bounds of minus(A,B,C,D,E,F,G,H,I,J,K,L): 
-------------------------------------
* Chain [194] with precondition: [D=1,H=1,I=1,J=0,L=1,A>=2,B>=1,C>=0,E>=2,F>=1,G>=0,K>=0] 
    - Upper bound: 1120*A+59+210*A*B+324*B+1120*E+210*E*F+324*F 
    - Complexity: n^2 

### Maximum cost of minus(A,B,C,D,E,F,G,H,I,J,K,L): 1120*A+59+210*A*B+324*B+1120*E+210*E*F+324*F 
Asymptotic class: n^2 

Closed-form bounds of append(A,B,C,D,E): 
-------------------------------------
* Chain [[96],97] with precondition: [A+1=D,A>=2,B>=0,C>=0,E>=C] 
    - Upper bound: 5*A+9 
    - Complexity: n 
* Chain [97] with precondition: [A=1,D=2,B>=0,C>=0,E>=C] 
    - Upper bound: 4 
    - Complexity: constant 

### Maximum cost of append(A,B,C,D,E): 5*A+9 
Asymptotic class: n 
 * Joined equivalent variables [aux(680),aux(6)] into aux(680)

Closed-form bounds of append_row(A,B,C,D,E,F,G,H): 
-------------------------------------
* Chain [[104],105,100] with precondition: [A=1,B=0,G=2,D=F,C>=0,D>=3,E>=0,H>=0] 
    - Upper bound: 10*D+12 
    - Complexity: n 
* Chain [[101,102],[104],105,100] with precondition: [D=F,A>=2,C>=0,E>=0,G>=2,H>=0,D>=A+2,B+1>=G] 
    - Upper bound: 26*A+10*D+12+ (5*B+5)*A+ (5*B+10*D)*A 
    - Complexity: n^2 
* Chain [[101,102],105,100] with precondition: [A+1=D,A+1=F,A>=2,C>=0,E>=0,G>=2,H>=0,B+1>=G] 
    - Upper bound: 26*A+12+ (5*B+5)*A+ (10*A+5*B+10)*A 
    - Complexity: n^2 
* Chain [[101,102],103,100] with precondition: [A=F,C>=0,D>=3,E>=0,G>=2,H>=0,A>=D,B+1>=G] 
    - Upper bound: 26*A+15+ (5*B+5)*A+ (5*B+10*D)*A 
    - Complexity: n^2 
* Chain [[101,102],100] with precondition: [A=F,B>=2,C>=0,D>=2,E>=0,G>=2,H>=0,A>=D,B+1>=G] 
    - Upper bound: 26*A+2+ (5*B+5)*A+ (5*B+10*D)*A 
    - Complexity: n^2 
* Chain [105,100] with precondition: [A=1,B=0,D=2,F=2,G=2,C>=0,E>=0,H>=0] 
    - Upper bound: 12 
    - Complexity: constant 
* Chain [103,100] with precondition: [D=2,G=2,A=F,A>=2,B>=1,C>=0,E>=0,H>=0] 
    - Upper bound: 15 
    - Complexity: constant 
* Chain [100] with precondition: [D=1,A=F,B=G,C=H,A>=0,B>=0,C>=0,E>=0] 
    - Upper bound: 2 
    - Complexity: constant 

### Maximum cost of append_row(A,B,C,D,E,F,G,H): max([10*D+10, (5*B+5)*A+26*A+max([ (10*A+5*B+10)*A+10,10*D+10+ (5*B+10*D)*A])])+2 
Asymptotic class: n^2 

Closed-form bounds of transpose_helper(A,B,C,D,E,F,G,H,I): 
-------------------------------------
* Chain [[291,292,293,294,295,296,297,298],299] with precondition: [A>=2,B>=1,C>=0,D>=0,E>=0,F>=0,H>=0,I>=0,G>=D,E+2*A>=H+2,A+E+G>=H+2,E+2*A+2*D>=H+4,2*A+2*E+3*G>=2*D+2*H+4,A+2*E+2*G>=2*D+H+2,A+E+G>=D+H+1,A+B+E+G>=D+H+3] 
    - Upper bound: 88*A+2+ (A+B+D)* (20*A+20*E)*A+nat(-D+2)*17+ (114*A+114*B+114*D)*A+ (10*A+20*B+10*E)* (A+B+D)*A+ (10*A+30*B+20*D+10*E)* (A+B+D)*A+nat(2*A+B-D+E)*10+nat(-D/2+1)*17+nat(A+B-D)*10 
    - Complexity: n^3 
* Chain [299] with precondition: [A=1,B=0,D=G,E=H,F=I,C>=0,D>=0,E>=0,F>=0] 
    - Upper bound: 2 
    - Complexity: constant 

### Maximum cost of transpose_helper(A,B,C,D,E,F,G,H,I): (A+B+D)* (20*A+20*E)*A+88*A+nat(-D+2)*17+ (114*A+114*B+114*D)*A+ (10*A+20*B+10*E)* (A+B+D)*A+ (10*A+30*B+20*D+10*E)* (A+B+D)*A+nat(2*A+B-D+E)*10+nat(-D/2+1)*17+nat(A+B-D)*10+2 
Asymptotic class: n^3 

Closed-form bounds of transpose(A,B,C,D,E,F): 
-------------------------------------
* Chain [301] with precondition: [A=1,B=0,D=1,E=0,C>=0,F>=0] 
    - Upper bound: 4 
    - Complexity: constant 
* Chain [300] with precondition: [A>=2,B>=1,C>=0,D>=1,E>=0,F>=0,2*A>=E+2,A+D>=E+2,A+2*D>=E+4,A+B+D>=E+4] 
    - Upper bound: 88*A+59/2+ (A+B+1)* (20*A)*A+ (10*A+10*B)+ (A+B+1)* (10*A+20*B)*A+ (20*A+10*B)+ (114*A+114*B+114)*A+ (10*A+30*B+20)* (A+B+1)*A 
    - Complexity: n^3 

### Maximum cost of transpose(A,B,C,D,E,F): 88*A+51/2+ (A+B+1)* (20*A)*A+ (10*A+10*B)+ (A+B+1)* (10*A+20*B)*A+ (20*A+10*B)+ (114*A+114*B+114)*A+ (10*A+30*B+20)* (A+B+1)*A+4 
Asymptotic class: n^3 

Closed-form bounds of reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O): 
-------------------------------------
* Chain [[106,107,108,109],110] with precondition: [A=D,A+F=K+1,A+I=N+1,A>=2,B>=1,C>=0,E>=1,F>=1,G>=0,H>=0,I>=1,J>=0,L>=1,O>=1,L>=G,M>=H,O>=J] 
    - Upper bound: 20*A+2 
    - Complexity: n 
* Chain [110] with precondition: [A=1,B=0,D=1,E=0,F=K,G=L,H=M,I=N,J=O,C>=0,F>=0,G>=0,H>=0,I>=0,J>=0] 
    - Upper bound: 2 
    - Complexity: constant 

### Maximum cost of reverse_helper(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O): 20*A+2 
Asymptotic class: n 

Closed-form bounds of reverseL(A,B,C,D,E,F,G,H,I,J): 
-------------------------------------
* Chain [112] with precondition: [A=1,B=0,D=1,E=0,F=1,G=0,I=1,J=0,C>=0,H>=0] 
    - Upper bound: 4 
    - Complexity: constant 
* Chain [111] with precondition: [A=D,A=F,A=I,A>=2,B>=1,C>=0,E>=1,G>=1,H>=0,J>=1] 
    - Upper bound: 20*D+4 
    - Complexity: n 

### Maximum cost of reverseL(A,B,C,D,E,F,G,H,I,J): 20*D+4 
Asymptotic class: n 

Closed-form bounds of reverse_rows_helper(A,B,C,D,E,F,G,H,I): 
-------------------------------------
* Chain [[113,114],115] with precondition: [A+D=G+1,A>=2,B>=1,C>=0,D>=1,E>=0,F>=0,H>=1,I>=0] 
    - Upper bound: 20*A+2+ (40*A+40*D)*A 
    - Complexity: n^2 
* Chain [115] with precondition: [A=1,B=0,D=G,E=H,F=I,C>=0,D>=0,E>=0,F>=0] 
    - Upper bound: 2 
    - Complexity: constant 

### Maximum cost of reverse_rows_helper(A,B,C,D,E,F,G,H,I): (40*A+40*D)*A+20*A+2 
Asymptotic class: n^2 
 * Joined equivalent variables [s(57),s(68),s(69),s(70)] into s(57)

Closed-form bounds of reverse_rows(A,B,C,D,E,F): 
-------------------------------------
* Chain [117] with precondition: [A=1,B=0,D=1,E=0,C>=0,F>=0] 
    - Upper bound: 9 
    - Complexity: constant 
* Chain [116] with precondition: [A=D,A>=2,B>=1,C>=0,E>=1,F>=0] 
    - Upper bound: 40*A+9+ (40*A+40)*A 
    - Complexity: n^2 

### Maximum cost of reverse_rows(A,B,C,D,E,F): (40*A+40)*A+40*A+9 
Asymptotic class: n^2 

Closed-form bounds of append_start(A,B,C,D,E,F,G,H): 
-------------------------------------
* Chain [[122],123,119] with precondition: [A=1,B=0,G=2,D=F,C>=0,D>=3,E>=0,H>=0] 
    - Upper bound: 10*D+22 
    - Complexity: n 
* Chain [[120,121],[122],123,119] with precondition: [D=F,A>=2,C>=0,E>=0,G>=2,H>=0,D>=A+2,B+1>=G] 
    - Upper bound: 8*A+10*D+32 
    - Complexity: n 
* Chain [[120,121],123,119] with precondition: [A+1=D,A+1=F,A>=2,C>=0,E>=0,G>=2,H>=0,B+1>=G] 
    - Upper bound: 18*D+22 
    - Complexity: n 
* Chain [[120,121],119] with precondition: [A=D,A=F,A>=2,C>=0,E>=0,G>=2,H>=0,B+1>=G] 
    - Upper bound: 18*D+12 
    - Complexity: n 
* Chain [[120,121],118] with precondition: [A=F,B>=1,C>=0,D>=2,E>=0,G>=2,H>=0,A>=D+1] 
    - Upper bound: 58*A-40*D+52+ (40*A-40*D+80)* (A-D+1) 
    - Complexity: n^2 
* Chain [123,119] with precondition: [A=1,B=0,D=2,F=2,G=2,C>=0,E>=0,H>=0] 
    - Upper bound: 22 
    - Complexity: constant 
* Chain [119] with precondition: [A=1,B=0,D=1,F=1,G=0,C>=0,E>=0,H>=0] 
    - Upper bound: 12 
    - Complexity: constant 
* Chain [118] with precondition: [D=1,A=F,A>=2,B>=1,C>=0,E>=0,G>=1,H>=0] 
    - Upper bound: 40*A+12+ (40*A+40)*A 
    - Complexity: n^2 

### Maximum cost of append_start(A,B,C,D,E,F,G,H): max([18*D+10,18*A+max([nat(-A+D+1)*10+10,nat(A-D+2)*40*nat(A-D+1)+nat(A-D+1)*40, (40*A+40)*A+22*A])])+12 
Asymptotic class: n^2 
 * Joined equivalent variables [aux(681),aux(638)] into aux(681)
 * Joined equivalent variables [aux(637),aux(629)] into aux(637)
 * Joined equivalent variables [aux(682),aux(638)] into aux(682)

Closed-form bounds of new_transpose_helper(A,B,C,D,E,F,G,H,I): 
-------------------------------------
* Chain [[314],315] with precondition: [D=1,E=0,G=1,H=0,A>=2,B>=1,C>=0,F>=0,I>=0] 
    - Upper bound: 17*A+2 
    - Complexity: n 
* Chain [[314],313,[309,310,311],315] with precondition: [D=1,E=0,A>=4,B>=2,C>=0,F>=0,G>=2,H>=1,I>=0] 
    - Upper bound: 44*A+55*B+29+ (156*B+312)*A+ (B+2)* ((20*B+40)*A)+ (18*B+36)*B+ (60*B+120)* (B+2)*A+27/2*B+ (B+2)* (9*B) 
    - Complexity: n^3 
* Chain [[314],313,315] with precondition: [D=1,E=0,G=2,H=2,A>=3,B>=2,C>=0,F>=0,I>=0] 
    - Upper bound: 17*A+29 
    - Complexity: n 
* Chain [[314],312,[309,310,311],315] with precondition: [D=1,E=0,A>=4,B>=3,C>=0,F>=0,G>=3,H>=1,I>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [[314],312,315] with precondition: [D=1,E=0,H=2,A>=3,C>=0,F>=0,G>=3,I>=0,B>=G] 
    - Upper bound: 17*A+10*B+29 
    - Complexity: n 
* Chain [[309,310,311],315] with precondition: [A>=2,B>=1,C>=0,D>=2,E>=1,F>=0,H>=1,I>=0,G>=D] 
    - Upper bound: 17*A+2+ (156*B+156*D)*A+ (B+D)* ((20*B+20*D)*A)+ (60*B+60*D)* (B+D)*A+nat(B-D)*45+ (B+D)* (nat(B-D)*18)+nat(A+B-D)*10+nat(B/2-D/2)*27+ (B+D)* (nat(B/2-D/2)*18) 
    - Complexity: n^3 
* Chain [315] with precondition: [A=1,B=0,D=G,E=H,F=I,C>=0,D>=0,E>=0,F>=0] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [313,[309,310,311],315] with precondition: [D=1,E=0,A>=3,B>=2,C>=0,F>=0,G>=2,H>=1,I>=0] 
    - Upper bound: 27*A+55*B+29+ (156*B+312)*A+ (B+2)* ((20*B+40)*A)+ (18*B+36)*B+ (60*B+120)* (B+2)*A+27/2*B+ (B+2)* (9*B) 
    - Complexity: n^3 
* Chain [313,315] with precondition: [A=2,D=1,E=0,G=2,H=2,B>=2,C>=0,F>=0,I>=0] 
    - Upper bound: 29 
    - Complexity: constant 
* Chain [312,[309,310,311],315] with precondition: [D=1,E=0,A>=3,B>=3,C>=0,F>=0,G>=3,H>=1,I>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [312,315] with precondition: [A=2,D=1,E=0,H=2,C>=0,F>=0,G>=3,I>=0,B>=G] 
    - Upper bound: 10*B+29 
    - Complexity: n 

### Maximum cost of new_transpose_helper(A,B,C,D,E,F,G,H,I): inf 
Asymptotic class: infinity 

Closed-form bounds of new_transpose(A,B,C,D,E,F): 
-------------------------------------
* Chain [320] with precondition: [A=1,B=0,D=1,E=0,C>=0,F>=0] 
    - Upper bound: 14 
    - Complexity: constant 
* Chain [319] with precondition: [A=2,D=2,B>=2,C>=0,E>=1,F>=0] 
    - Upper bound: 361 
    - Complexity: constant 
* Chain [318] with precondition: [A=2,C>=0,D>=3,E>=1,F>=0,B>=D] 
    - Upper bound: 70*B+41+ (30*B+30)*B 
    - Complexity: n^2 
* Chain [317] with precondition: [D=1,E=0,A>=2,B>=1,C>=0,F>=0] 
    - Upper bound: 17*A+14 
    - Complexity: n 
* Chain [316] with precondition: [A>=3,B>=2,C>=0,D>=2,E>=1,F>=0] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of new_transpose(A,B,C,D,E,F): inf 
Asymptotic class: infinity 

Closed-form bounds of prod(A,B,C,D,E): 
-------------------------------------
* Chain [[287],286] with precondition: [A>=2,B>=0,D>=0,E>=0,C>=A] 
    - Upper bound: 9*A+3 
    - Complexity: n 
* Chain [[287],285] with precondition: [B>=0,C>=2,D>=0,E>=0,A>=C+1] 
    - Upper bound: 9*C+6 
    - Complexity: n 
* Chain [286] with precondition: [A=1,E=0,B>=0,C>=0,D>=0] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [285] with precondition: [C=1,E=0,A>=2,B>=0,D>=0] 
    - Upper bound: 6 
    - Complexity: constant 

### Maximum cost of prod(A,B,C,D,E): max([9*C+3,9*A])+3 
Asymptotic class: n 

Closed-form bounds of prod_mat(A,B,C,D,E,F,G): 
-------------------------------------
* Chain [[289],290] with precondition: [A=1,C=F,B>=0,C>=2,D>=1,E>=0,G>=0] 
    - Upper bound: 9*C+3 
    - Complexity: n 
* Chain [[288],290] with precondition: [C=F,A>=2,B>=0,C>=2,D>=1,E>=0,G>=0] 
    - Upper bound: 9*A*C+3+12*C+9*C*D 
    - Complexity: n^2 
* Chain [290] with precondition: [C=1,D=0,F=1,A>=0,B>=0,E>=0,G>=0] 
    - Upper bound: 3 
    - Complexity: constant 

### Maximum cost of prod_mat(A,B,C,D,E,F,G): 9*A*C+3*C+9*C*D+9*C+3 
Asymptotic class: n^2 

Closed-form bounds of mat_mult(A,B,C,D,E,F,G,H,I): 
-------------------------------------
* Chain [[305],306,308] with precondition: [D=1,E=0,H=1,A=G,A>=3,B>=1,C>=0,F>=0,I>=0] 
    - Upper bound: 16*A+26 
    - Complexity: n 
* Chain [[302,303],307] with precondition: [A=G,A>=2,B>=1,C>=0,D>=2,E>=1,F>=0,H>=2,I>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [[302,303],304,307] with precondition: [A=G,A>=3,B>=1,C>=0,D>=2,E>=1,F>=0,H>=1,I>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [308] with precondition: [A=1,B=0,D=1,E=0,G=1,H=0,C>=0,F>=0,I>=0] 
    - Upper bound: 10 
    - Complexity: constant 
* Chain [307] with precondition: [A=1,B=0,G=1,H=0,C>=0,D>=2,E>=1,F>=0,I>=0] 
    - Upper bound: 88*D+71/2+ (D+E+1)* (20*D)*D+ (10*D+10*E)+ (D+E+1)* (10*D+20*E)*D+ (20*D+10*E)+ (114*D+114*E+114)*D+ (10*D+30*E+20)* (D+E+1)*D 
    - Complexity: n^3 
* Chain [306,308] with precondition: [A=2,D=1,E=0,G=2,H=1,B>=1,C>=0,F>=0,I>=0] 
    - Upper bound: 26 
    - Complexity: constant 
* Chain [304,307] with precondition: [A=2,G=2,H=1,B>=1,C>=0,D>=2,E>=1,F>=0,I>=0] 
    - Upper bound: 176*D+77+ (D+E+1)* (10*D*D)+ (D+E+1)* (52*D)+ (D+E+1)* (30*D)*D+ (20*D+20*E)+ (D+E+1)* ((10*D+20*E)*D)+ (D+E+1)* (10*D+20*E)*D+ (40*D+20*E)+ (176*D+176*E+176)*D+ (D+3*E+2)* ((10*D+10*E+10)*D)+ (10*D+30*E+20)* (D+E+1)*D 
    - Complexity: n^3 

### Maximum cost of mat_mult(A,B,C,D,E,F,G,H,I): inf 
Asymptotic class: infinity 

Closed-form bounds of lineMult(A,B,C,D,E,F,G): 
-------------------------------------
* Chain [[162],160] with precondition: [D=1,B=F,A>=0,B>=2,C>=0,E>=0,G>=0] 
    - Upper bound: 9*B+3 
    - Complexity: n 
* Chain [[161],[162],160] with precondition: [B=F,A>=0,C>=0,D>=2,E>=0,G>=0,B>=D+1] 
    - Upper bound: 9*B+D+12 
    - Complexity: n 
* Chain [[161],160] with precondition: [B=F,A>=0,B>=2,C>=0,E>=0,G>=0,D>=B] 
    - Upper bound: 10*B+3 
    - Complexity: n 
* Chain [160] with precondition: [B=1,F=1,A>=0,C>=0,D>=0,E>=0,G>=0] 
    - Upper bound: 3 
    - Complexity: constant 

### Maximum cost of lineMult(A,B,C,D,E,F,G): max([10*B,nat(B-D+1)*9+10*D])+3 
Asymptotic class: n 

Closed-form bounds of computeLine(A,B,C,D,E,F,G,H,I): 
-------------------------------------
* Chain [[165,166,167,168],164] with precondition: [A>=2,B>=0,E>=0,F>=0,G>=0,H>=1,I>=0,C>=A,D>=H] 
    - Upper bound: 62*A+2+20*D*A+ (36*A+108*D)*A+nat(A+3*D-F)*18 
    - Complexity: n^2 
* Chain [[165,166,167,168],163] with precondition: [H=1,B>=0,C>=2,D>=1,E>=0,F>=0,G>=0,I>=0,A>=C+1] 
    - Upper bound: 62*A+6+20*D*A+ (36*A+108*D)*A+nat(A+3*D-F)*18 
    - Complexity: n^2 
* Chain [164] with precondition: [A=1,F=H,G=I,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [163] with precondition: [C=1,D=0,H=1,A>=2,B>=0,E>=0,F>=0,G>=0,I>=0] 
    - Upper bound: 6 
    - Complexity: constant 

### Maximum cost of computeLine(A,B,C,D,E,F,G,H,I): 20*D*A+62*A+ (36*A+108*D)*A+nat(A+3*D-F)*18+6 
Asymptotic class: n^2 

Closed-form bounds of mat_mult_jan(A,B,C,D,E,F,G,H,I): 
-------------------------------------
* Chain [[195,196],198] with precondition: [A=G,A>=2,B>=2,C>=0,D>=2,F>=0,H>=1,I>=0,E>=H] 
    - Upper bound: 22*A+3+186*B*A+20*B*A*E+ (B+3*E)* (18*B*A)+40*E*B*A+ (54*B+162*E)*A+ (90*B+270*E)*B*A 
    - Complexity: n^3 
* Chain [[195,196],197,198] with precondition: [A=G,A>=3,B>=1,C>=0,D>=0,F>=0,H>=1,I>=0,E+1>=H] 
    - Upper bound: 22*A+62*B+16+186*B*A+20*B*A*E+ (B+3*E)* (18*B*A)+20*E*B+40*E*B*A+ (18*B+54*E)+ (54*B+162*E)*A+ (36*B+108*E)*B+ (90*B+270*E)*B*A 
    - Complexity: n^3 
* Chain [198] with precondition: [A=1,B=0,G=1,H=0,C>=0,D>=0,E>=0,F>=0,I>=0] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [197,198] with precondition: [A=2,G=2,H=1,B>=1,C>=0,D>=0,E>=0,F>=0,I>=0] 
    - Upper bound: 62*B+16+20*E*B+ (18*B+54*E)+ (36*B+108*E)*B 
    - Complexity: n^2 

### Maximum cost of mat_mult_jan(A,B,C,D,E,F,G,H,I): 186*B*A+22*A+20*B*A*E+ (B+3*E)* (18*B*A)+40*E*B*A+ (54*B+162*E)*A+ (90*B+270*E)*B*A+ (62*B+13+20*E*B+ (18*B+54*E)+ (36*B+108*E)*B+3) 
Asymptotic class: n^3 

Closed-form bounds of check_mult_sanity(A,B,C,D,E,F,G,H,I): 
-------------------------------------
* Chain [149] with precondition: [D=1,H=1,I=0,A>=2,B>=1,C>=0,E>=2,F>=1,G>=0] 
    - Upper bound: 352*A+49+66*A*B+108*B+352*E+66*E*F+108*F 
    - Complexity: n^2 
* Chain [148] with precondition: [D=1,H=1,I=1,A>=2,B>=1,E>=2,F>=1,C+1>=A,G+1>=E] 
    - Upper bound: 32*A+35+6*B*A+32*E+6*F*E 
    - Complexity: n^2 

### Maximum cost of check_mult_sanity(A,B,C,D,E,F,G,H,I): 32*A+32*E+35+max([6*F*E+6*B*A,320*A+14+66*A*B+108*B+320*E+66*E*F+108*F]) 
Asymptotic class: n^2 

Closed-form bounds of mult(A,B,C,D,E,F,G,H,I,J,K,L): 
-------------------------------------
* Chain [221] with precondition: [D=1,H=1,I=1,J=0,L=1,A>=2,B>=1,C>=0,E>=2,F>=1,G>=0,K>=0] 
    - Upper bound: 568*A+163+90*A*C+294*B+744*B*A+80*B*A*F+ (B+3*F)* (72*B*A)+12*C+448*E+84*E*G+126*F+60*F*B+160*F*B*A+ (54*B+162*F)+ (216*B+648*F)*A+ (108*B+324*F)*B+ (360*B+1080*F)*B*A+ (18*F+18) 
    - Complexity: n^3 
* Chain [220] with precondition: [A=2,D=1,H=1,I=2,J=1,L=1,B>=1,C>=1,E>=2,F>=1,K>=1,G+1>=E] 
    - Upper bound: 62*B+12*C+32*E+172+20*F*B+6*G*E+ (18*B+54*F)+ (36*B+108*F)*B 
    - Complexity: n^2 
* Chain [219] with precondition: [D=1,H=1,L=1,A=I,A>=2,B>=2,E>=2,J>=1,C+1>=A,K+1>=A,G+1>=E,F>=J] 
    - Upper bound: 108*A+63+6*A*B+6*A*C+372*B*A+40*B*A*F+ (B+3*F)* (36*B*A)+32*E+80*F*B*A+6*G*E+ (108*B+324*F)*A+ (180*B+540*F)*B*A 
    - Complexity: n^3 
* Chain [218] with precondition: [D=1,H=1,L=1,A=I,A>=3,B>=1,E>=2,F>=1,J>=1,C+1>=A,K+1>=A,G+1>=E,F+1>=J] 
    - Upper bound: 108*A+76+6*A*B+6*A*C+124*B+372*B*A+40*B*A*F+ (B+3*F)* (36*B*A)+32*E+40*F*B+80*F*B*A+6*G*E+ (36*B+108*F)+ (108*B+324*F)*A+ (72*B+216*F)*B+ (180*B+540*F)*B*A 
    - Complexity: n^3 

### Maximum cost of mult(A,B,C,D,E,F,G,H,I,J,K,L): 32*E+63+max([62*B+12*C+109+20*F*B+6*G*E+ (18*B+54*F)+ (36*B+108*F)*B,6*A*C+108*A+372*B*A+40*B*A*F+ (B+3*F)* (36*B*A)+80*F*B*A+ (108*B+324*F)*A+ (180*B+540*F)*B*A+max([124*B+13+40*F*B+ (36*B+108*F)+ (72*B+216*F)*B+ (6*G*E+6*A*B),460*A+100+84*A*C+294*B+372*B*A+40*B*A*F+ (B+3*F)* (36*B*A)+12*C+416*E+84*E*G+126*F+60*F*B+80*F*B*A+ (54*B+162*F)+ (108*B+324*F)*A+ (108*B+324*F)*B+ (180*B+540*F)*B*A+ (18*F+18)])]) 
Asymptotic class: n^3 
 * Joined equivalent variables [s(4521),s(4536)] into s(4521)

Closed-form bounds of evaluate(A,B,C,D,E,F,G,H): 
-------------------------------------
* Chain [272] with precondition: [A=1,B=0,D=1,E=1,F=0,H=1,C>=0,G>=0] 
    - Upper bound: 17 
    - Complexity: constant 
* Chain [271] with precondition: [D=1,E=1,F=0,H=1,A>=2,B>=1,C>=0,G>=0] 
    - Upper bound: 32*A+18*B+28+6*C*A 
    - Complexity: n^2 
* Chain [270] with precondition: [D=1,H=1,A=E,B=F,A>=2,B>=1,C+1>=A,G+1>=A] 
    - Upper bound: 32*A+17+6*B*A 
    - Complexity: n^2 
* Chain [multiple([263,264,265,266,267,268],[[270]])] with precondition: [H=1,B>=1,D>=3,E>=2,F>=1,A>=E,C+1>=E,G+1>=E,D+2*B>=2*F+1,D+2*B+2*E>=2*F+7] 
    - Upper bound: D/2* (608*A)+ (B+D/2)* (D/2* (560*A))+ (B+D/2)* ((B+D/2)* (D/2* (40*A)))+ (4*B+3/2*D)* ((B+D/2)* (D/2* (72*A)))+ (4*B+3/2*D)* (D/2* (108*A))+ (D/2+1/2)* (6*B)*A+D/2* (512*B)+ (B+D/2)* (D/2* (482*B))+ (B+D/2)* ((B+D/2)* (D/2* (40*B)))+D/2* ((300*B+150*D)*A)+ (B+D/2)* (D/2* ((60*B+30*D)*A))+D/2* ((360*B+180*D)*B)+ (B+D/2)* (D/2* ((60*B+30*D)*B))+ (4*B+3/2*D)* (D/2* ((36*B+18*D)*B))+D/2* ((20*B+10*D)* (B+D/2)*A)+D/2* ((20*B+10*D)* (B+D/2)*B)+D/2* ((80*B+40*D)* (B+D/2))+D/2* (558*B+279*D)+ (B+D/2)* (D/2* (60*B+30*D))+ (4*B+3/2*D)* (D/2* (36*B+18*D))+ (B+D/2)* (D/2* ((288*B+108*D)*A))+D/2* ((432*B+162*D)*B)+ (B+D/2)* (D/2* ((576*B+216*D)*B))+D/2* ((288*B+108*D)* (B+D/2)*A)+D/2* ((144*B+54*D)* (B+D/2)*B)+D/2* ((576*B+216*D)* (B+D/2))+D/2* (648*B+243*D)+ (B+D/2)* (D/2* (576*B+216*D))+ (17/2*D+17/2)+ (16*D+16)*A+1191/2*D+ (B+D/2)* (241*D)+ (B+D/2)* ((B+D/2)* (20*D)) 
    - Complexity: n^4 
* Chain [multiple(269,[[multiple([263,264,265,266,267,268],[[270]])],[270]])] with precondition: [E=1,F=0,H=1,A>=2,B>=1,C>=1,D>=3,G>=0] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of evaluate(A,B,C,D,E,F,G,H): inf 
Asymptotic class: infinity 

Closed-form bounds of del(A,B,C,D,E): 
-------------------------------------
* Chain [[178],177] with precondition: [A=D,A>=2,B>=0,E>=0,C+1>=A] 
    - Upper bound: 10*A+3 
    - Complexity: n 
* Chain [[178],176] with precondition: [A=D+1,B>=0,C>=1,E>=0,A>=C+2] 
    - Upper bound: 10*C+6 
    - Complexity: n 
* Chain [177] with precondition: [A=1,D=1,B>=0,C>=0,E>=0] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [176] with precondition: [C=0,A=D+1,A>=2,E>=0,B>=E] 
    - Upper bound: 6 
    - Complexity: constant 

### Maximum cost of del(A,B,C,D,E): max([10*C+3,10*A])+3 
Asymptotic class: n 

Closed-form bounds of submat(A,B,C,D,E,F,G,H): 
-------------------------------------
* Chain [[325,326,328,329],327,324] with precondition: [A=F,A>=3,C>=0,E>=0,G>=1,H>=0,D+1>=A,B>=G] 
    - Upper bound: 65*A+17+20*E*A+ (20*E+20)*A 
    - Complexity: n^2 
* Chain [[325,326,328,329],324] with precondition: [A=F,A>=2,B>=2,C>=0,E>=0,G>=1,H>=0,D+1>=A,B>=G,B+E>=G+1] 
    - Upper bound: 65*A+3+20*E*A+ (20*E+20)*A 
    - Complexity: n^2 
* Chain [327,324] with precondition: [A=2,F=2,G=1,B>=1,C>=0,D>=1,E>=0,H>=0] 
    - Upper bound: 17 
    - Complexity: constant 
* Chain [324] with precondition: [A=1,B=0,F=1,G=0,C>=0,D>=0,E>=0,H>=0] 
    - Upper bound: 3 
    - Complexity: constant 

### Maximum cost of submat(A,B,C,D,E,F,G,H): 20*E*A+65*A+ (20*E+20)*A+17 
Asymptotic class: n^2 

Closed-form bounds of remFirstRow(A,B,C,D,E,F): 
-------------------------------------
* Chain [321] with precondition: [D+1=A,B>=1,D>=1,E>=0,F>=0,B>=E,C>=F] 
    - Upper bound: 2 
    - Complexity: constant 

### Maximum cost of remFirstRow(A,B,C,D,E,F): 2 
Asymptotic class: constant 
* Total analysis performed in 39427 ms.


Cost relation system solved by CoFloCo in 39437 ms.

Method size terminates?: YES

 - xs_1: size of xs wrt. Set<A>
 - xs_2: size of xs wrt. A
UB for size(xs_1,xs_2) = 6*xs_1+3

Method check_lists terminates?: YES

 - v_1: size of v wrt. List<List<Rat>>
 - v_2: size of v wrt. List<Rat>
 - v_3: size of v wrt. Rat
 - n_1: size of n wrt. Rat
UB for check_lists(v_1,v_2,v_3,n_1) = 6*v_1*n_1+10*v_1+ (6*v_2+10)

Method check_mat terminates?: YES

 - m_1: size of m wrt. Rat
 - n_1: size of n wrt. Rat
 - v_1: size of v wrt. List<List<Rat>>
 - v_2: size of v wrt. List<Rat>
 - v_3: size of v wrt. Rat
UB for check_mat(m_1,n_1,v_1,v_2,v_3) = max([10*v_1+3+6*n_1*v_1+6*v_1,6*m_1+7+ (m_1+1)* (6*n_1)+18*v_2+ (20*m_1+20)+3])+7

Method check_matrix terminates?: YES

 - mat_1: size of mat wrt. List<List<Rat>>
 - mat_2: size of mat wrt. List<Rat>
 - mat_3: size of mat wrt. Rat
 - mat_4: size of mat wrt. Matrix
UB for check_matrix(mat_1,mat_2,mat_3,mat_4) = 32*mat_1+max([6*mat_2*mat_1,18*mat_2+7+6*mat_3*mat_1])+13

Method construct_matrix terminates?: YES

 - m_1: size of m wrt. Rat
 - n_1: size of n wrt. Rat
 - v_1: size of v wrt. List<List<Rat>>
 - v_2: size of v wrt. List<Rat>
 - v_3: size of v wrt. Rat
UB for construct_matrix(m_1,n_1,v_1,v_2,v_3) = max([6*v_1+max([1,6*n_1*v_1+10*v_1]),6*m_1+11+ (m_1+1)* (6*n_1)+18*v_2+ (20*m_1+20)])+14

Method get_elemL terminates?: YES

 - l_1: size of l wrt. List<List<Rat>>
 - l_2: size of l wrt. List<Rat>
 - l_3: size of l wrt. Rat
 - i_1: size of i wrt. Rat
UB for get_elemL(l_1,l_2,l_3,i_1) = 8*i_1+5

Method get_elemMat terminates?: YES

 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
 - m_4: size of m wrt. Matrix
 - i_1: size of i wrt. Rat
 - j_1: size of j wrt. Rat
UB for get_elemMat(m_1,m_2,m_3,m_4,i_1,j_1) = 8*i_1+8*j_1+14

Method op terminates?: YES

 - sign_1: size of sign wrt. Rat
 - x1_1: size of x1 wrt. Rat
 - x2_1: size of x2 wrt. Rat
UB for op(sign_1,x1_1,x2_1) = 4

Method rec_list terminates?: YES

 - l1_1: size of l1 wrt. List<Rat>
 - l1_2: size of l1 wrt. Rat
 - l2_1: size of l2 wrt. List<Rat>
 - l2_2: size of l2 wrt. Rat
 - sign_1: size of sign wrt. Rat
UB for rec_list(l1_1,l1_2,l2_1,l2_2,sign_1) = max([13*l2_1+3,13*l1_1])+3

Method rec_mat terminates?: YES

 - m1_1: size of m1 wrt. List<List<Rat>>
 - m1_2: size of m1 wrt. List<Rat>
 - m1_3: size of m1 wrt. Rat
 - m2_1: size of m2 wrt. List<List<Rat>>
 - m2_2: size of m2 wrt. List<Rat>
 - m2_3: size of m2 wrt. Rat
 - sign_1: size of sign wrt. Rat
UB for rec_mat(m1_1,m1_2,m1_3,m2_1,m2_2,m2_3,sign_1) = max([18,104*m1_2*m1_1+45*m1_1+18])+3

Method check_sanity terminates?: YES

 - m1_1: size of m1 wrt. List<List<Rat>>
 - m1_2: size of m1 wrt. List<Rat>
 - m1_3: size of m1 wrt. Rat
 - m1_4: size of m1 wrt. Matrix
 - m2_1: size of m2 wrt. List<List<Rat>>
 - m2_2: size of m2 wrt. List<Rat>
 - m2_3: size of m2 wrt. Rat
 - m2_4: size of m2 wrt. Matrix
UB for check_sanity(m1_1,m1_2,m1_3,m1_4,m2_1,m2_2,m2_3,m2_4) = 32*m1_1+32*m2_1+37+max([6*m2_2*m2_1+6*m1_2*m1_1,1088*m1_1+14+210*m1_1*m1_2+324*m1_2+1088*m2_1+210*m2_1*m2_2+324*m2_2])

Method plus terminates?: YES

 - m1_1: size of m1 wrt. List<List<Rat>>
 - m1_2: size of m1 wrt. List<Rat>
 - m1_3: size of m1 wrt. Rat
 - m1_4: size of m1 wrt. Matrix
 - m2_1: size of m2 wrt. List<List<Rat>>
 - m2_2: size of m2 wrt. List<Rat>
 - m2_3: size of m2 wrt. Rat
 - m2_4: size of m2 wrt. Matrix
UB for plus(m1_1,m1_2,m1_3,m1_4,m2_1,m2_2,m2_3,m2_4) = max([6*m1_2*m1_1+32*m1_1+max([12*m2_2+99,98*m1_2*m1_1+45*m1_1+32*m2_1+max([16*m1_1+max([6*m2_3*m2_1+6*m1_3*m1_1,208*m1_2*m1_1+74*m1_1+max([12*m1_1*m1_2+48*m1_1+max([6*m2_3*m2_1+6*m1_3*m1_1,1457*m1_1+90+234*m1_1*m1_2+408*m1_2+520*m1_2*m1_1+12*m1_2*m2_1+1312*m2_1+240*m2_1*m2_2+324*m2_2]),12*m1_2*m2_1+3+6*m1_3*m1_1+48*m2_1+6*m2_3*m2_1])]),6*m1_3*m1_1+3+16*m2_1+6*m2_3*m2_1])]),12*m1_2+32*m2_1+96+6*m2_2*m2_1])+79

Method minus terminates?: YES

 - m1_1: size of m1 wrt. List<List<Rat>>
 - m1_2: size of m1 wrt. List<Rat>
 - m1_3: size of m1 wrt. Rat
 - m1_4: size of m1 wrt. Matrix
 - m2_1: size of m2 wrt. List<List<Rat>>
 - m2_2: size of m2 wrt. List<Rat>
 - m2_3: size of m2 wrt. Rat
 - m2_4: size of m2 wrt. Matrix
UB for minus(m1_1,m1_2,m1_3,m1_4,m2_1,m2_2,m2_3,m2_4) = 1120*m1_1+59+210*m1_1*m1_2+324*m1_2+1120*m2_1+210*m2_1*m2_2+324*m2_2

Method append terminates?: YES

 - l_1: size of l wrt. List<Rat>
 - l_2: size of l wrt. Rat
 - x_1: size of x wrt. Rat
UB for append(l_1,l_2,x_1) = 5*l_1+9

Method append_row terminates?: YES

 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
 - row_1: size of row wrt. List<Rat>
 - row_2: size of row wrt. Rat
UB for append_row(m_1,m_2,m_3,row_1,row_2) = max([10*row_1+10, (5*m_2+5)*m_1+26*m_1+max([ (10*m_1+5*m_2+10)*m_1+10,10*row_1+10+ (5*m_2+10*row_1)*m_1])])+2

Method transpose_helper terminates?: YES

 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
 - m_trans_1: size of m_trans wrt. List<List<Rat>>
 - m_trans_2: size of m_trans wrt. List<Rat>
 - m_trans_3: size of m_trans wrt. Rat
UB for transpose_helper(m_1,m_2,m_3,m_trans_1,m_trans_2,m_trans_3) = (m_1+m_2+m_trans_1)* (20*m_1+20*m_trans_2)*m_1+88*m_1+nat(-m_trans_1+2)*17+ (114*m_1+114*m_2+114*m_trans_1)*m_1+ (10*m_1+20*m_2+10*m_trans_2)* (m_1+m_2+m_trans_1)*m_1+ (10*m_1+30*m_2+20*m_trans_1+10*m_trans_2)* (m_1+m_2+m_trans_1)*m_1+nat(2*m_1+m_2-m_trans_1+m_trans_2)*10+nat(-m_trans_1/2+1)*17+nat(m_1+m_2-m_trans_1)*10+2

Method transpose terminates?: YES

 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
UB for transpose(m_1,m_2,m_3) = 88*m_1+51/2+ (m_1+m_2+1)* (20*m_1)*m_1+ (10*m_1+10*m_2)+ (m_1+m_2+1)* (10*m_1+20*m_2)*m_1+ (20*m_1+10*m_2)+ (114*m_1+114*m_2+114)*m_1+ (10*m_1+30*m_2+20)* (m_1+m_2+1)*m_1+4

Method reverse_helper terminates?: YES

 - l_1: size of l wrt. List<List<Rat>>
 - l_2: size of l wrt. List<Rat>
 - l_3: size of l wrt. Rat
 - l_4: size of l wrt. List<A>
 - l_5: size of l wrt. A
 - acc_1: size of acc wrt. List<List<Rat>>
 - acc_2: size of acc wrt. List<Rat>
 - acc_3: size of acc wrt. Rat
 - acc_4: size of acc wrt. List<A>
 - acc_5: size of acc wrt. A
UB for reverse_helper(l_1,l_2,l_3,l_4,l_5,acc_1,acc_2,acc_3,acc_4,acc_5) = 20*l_1+2

Method reverseL terminates?: YES

 - l_1: size of l wrt. List<List<Rat>>
 - l_2: size of l wrt. List<Rat>
 - l_3: size of l wrt. Rat
 - l_4: size of l wrt. List<A>
 - l_5: size of l wrt. A
UB for reverseL(l_1,l_2,l_3,l_4,l_5) = 20*l_4+4

Method reverse_rows_helper terminates?: YES

 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
 - m_rev_1: size of m_rev wrt. List<List<Rat>>
 - m_rev_2: size of m_rev wrt. List<Rat>
 - m_rev_3: size of m_rev wrt. Rat
UB for reverse_rows_helper(m_1,m_2,m_3,m_rev_1,m_rev_2,m_rev_3) = (40*m_1+40*m_rev_1)*m_1+20*m_1+2

Method reverse_rows terminates?: YES

 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
UB for reverse_rows(m_1,m_2,m_3) = (40*m_1+40)*m_1+40*m_1+9

Method append_start terminates?: YES

 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
 - row_1: size of row wrt. List<Rat>
 - row_2: size of row wrt. Rat
UB for append_start(m_1,m_2,m_3,row_1,row_2) = max([18*row_1+10,18*m_1+max([nat(-m_1+row_1+1)*10+10,nat(m_1-row_1+2)*40*nat(m_1-row_1+1)+nat(m_1-row_1+1)*40, (40*m_1+40)*m_1+22*m_1])])+12

Method new_transpose_helper terminates?: YES

 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
 - m_trans_1: size of m_trans wrt. List<List<Rat>>
 - m_trans_2: size of m_trans wrt. List<Rat>
 - m_trans_3: size of m_trans wrt. Rat
UB for new_transpose_helper(m_1,m_2,m_3,m_trans_1,m_trans_2,m_trans_3) = inf

Method new_transpose terminates?: YES

 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
UB for new_transpose(m_1,m_2,m_3) = inf

Method prod terminates?: YES

 - l1_1: size of l1 wrt. List<Rat>
 - l1_2: size of l1 wrt. Rat
 - l2_1: size of l2 wrt. List<Rat>
 - l2_2: size of l2 wrt. Rat
UB for prod(l1_1,l1_2,l2_1,l2_2) = max([9*l2_1+3,9*l1_1])+3

Method prod_mat terminates?: YES

 - row_1: size of row wrt. List<Rat>
 - row_2: size of row wrt. Rat
 - mat_1: size of mat wrt. List<List<Rat>>
 - mat_2: size of mat wrt. List<Rat>
 - mat_3: size of mat wrt. Rat
UB for prod_mat(row_1,row_2,mat_1,mat_2,mat_3) = 9*row_1*mat_1+3*mat_1+9*mat_1*mat_2+9*mat_1+3

Method mat_mult terminates?: YES

 - m1_1: size of m1 wrt. List<List<Rat>>
 - m1_2: size of m1 wrt. List<Rat>
 - m1_3: size of m1 wrt. Rat
 - m2_1: size of m2 wrt. List<List<Rat>>
 - m2_2: size of m2 wrt. List<Rat>
 - m2_3: size of m2 wrt. Rat
UB for mat_mult(m1_1,m1_2,m1_3,m2_1,m2_2,m2_3) = inf

Method lineMult terminates?: YES

 - n_1: size of n wrt. Rat
 - l1_1: size of l1 wrt. List<Rat>
 - l1_2: size of l1 wrt. Rat
 - l2_1: size of l2 wrt. List<Rat>
 - l2_2: size of l2 wrt. Rat
UB for lineMult(n_1,l1_1,l1_2,l2_1,l2_2) = max([10*l1_1,nat(l1_1-l2_1+1)*9+10*l2_1])+3

Method computeLine terminates?: YES

 - line_1: size of line wrt. List<Rat>
 - line_2: size of line wrt. Rat
 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
 - acc_1: size of acc wrt. List<Rat>
 - acc_2: size of acc wrt. Rat
UB for computeLine(line_1,line_2,m_1,m_2,m_3,acc_1,acc_2) = 20*m_2*line_1+62*line_1+ (36*line_1+108*m_2)*line_1+nat(line_1+3*m_2-acc_1)*18+6

Method mat_mult_jan terminates?: YES

 - m1_1: size of m1 wrt. List<List<Rat>>
 - m1_2: size of m1 wrt. List<Rat>
 - m1_3: size of m1 wrt. Rat
 - m2_1: size of m2 wrt. List<List<Rat>>
 - m2_2: size of m2 wrt. List<Rat>
 - m2_3: size of m2 wrt. Rat
UB for mat_mult_jan(m1_1,m1_2,m1_3,m2_1,m2_2,m2_3) = 186*m1_2*m1_1+22*m1_1+20*m1_2*m1_1*m2_2+ (m1_2+3*m2_2)* (18*m1_2*m1_1)+40*m2_2*m1_2*m1_1+ (54*m1_2+162*m2_2)*m1_1+ (90*m1_2+270*m2_2)*m1_2*m1_1+ (62*m1_2+13+20*m2_2*m1_2+ (18*m1_2+54*m2_2)+ (36*m1_2+108*m2_2)*m1_2+3)

Method check_mult_sanity terminates?: YES

 - m1_1: size of m1 wrt. List<List<Rat>>
 - m1_2: size of m1 wrt. List<Rat>
 - m1_3: size of m1 wrt. Rat
 - m1_4: size of m1 wrt. Matrix
 - m2_1: size of m2 wrt. List<List<Rat>>
 - m2_2: size of m2 wrt. List<Rat>
 - m2_3: size of m2 wrt. Rat
 - m2_4: size of m2 wrt. Matrix
UB for check_mult_sanity(m1_1,m1_2,m1_3,m1_4,m2_1,m2_2,m2_3,m2_4) = 32*m1_1+32*m2_1+35+max([6*m2_2*m2_1+6*m1_2*m1_1,320*m1_1+14+66*m1_1*m1_2+108*m1_2+320*m2_1+66*m2_1*m2_2+108*m2_2])

Method mult terminates?: YES

 - m1_1: size of m1 wrt. List<List<Rat>>
 - m1_2: size of m1 wrt. List<Rat>
 - m1_3: size of m1 wrt. Rat
 - m1_4: size of m1 wrt. Matrix
 - m2_1: size of m2 wrt. List<List<Rat>>
 - m2_2: size of m2 wrt. List<Rat>
 - m2_3: size of m2 wrt. Rat
 - m2_4: size of m2 wrt. Matrix
UB for mult(m1_1,m1_2,m1_3,m1_4,m2_1,m2_2,m2_3,m2_4) = 32*m2_1+63+max([62*m1_2+12*m1_3+109+20*m2_2*m1_2+6*m2_3*m2_1+ (18*m1_2+54*m2_2)+ (36*m1_2+108*m2_2)*m1_2,6*m1_1*m1_3+108*m1_1+372*m1_2*m1_1+40*m1_2*m1_1*m2_2+ (m1_2+3*m2_2)* (36*m1_2*m1_1)+80*m2_2*m1_2*m1_1+ (108*m1_2+324*m2_2)*m1_1+ (180*m1_2+540*m2_2)*m1_2*m1_1+max([124*m1_2+13+40*m2_2*m1_2+ (36*m1_2+108*m2_2)+ (72*m1_2+216*m2_2)*m1_2+ (6*m2_3*m2_1+6*m1_1*m1_2),460*m1_1+100+84*m1_1*m1_3+294*m1_2+372*m1_2*m1_1+40*m1_2*m1_1*m2_2+ (m1_2+3*m2_2)* (36*m1_2*m1_1)+12*m1_3+416*m2_1+84*m2_1*m2_3+126*m2_2+60*m2_2*m1_2+80*m2_2*m1_2*m1_1+ (54*m1_2+162*m2_2)+ (108*m1_2+324*m2_2)*m1_1+ (108*m1_2+324*m2_2)*m1_2+ (180*m1_2+540*m2_2)*m1_2*m1_1+ (18*m2_2+18)])])

Method evaluate terminates?: YES

 - expr_1: size of expr wrt. List<List<Rat>>
 - expr_2: size of expr wrt. List<Rat>
 - expr_3: size of expr wrt. Rat
 - expr_4: size of expr wrt. Arith_exp
UB for evaluate(expr_1,expr_2,expr_3,expr_4) = inf

Method del terminates?: YES

 - l_1: size of l wrt. List<Rat>
 - l_2: size of l wrt. Rat
 - i_1: size of i wrt. Rat
UB for del(l_1,l_2,i_1) = max([10*i_1+3,10*l_1])+3

Method submat terminates?: YES

 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
 - i_1: size of i wrt. Rat
 - j_1: size of j wrt. Rat
UB for submat(m_1,m_2,m_3,i_1,j_1) = 20*j_1*m_1+65*m_1+ (20*j_1+20)*m_1+17

Method remFirstRow terminates?: YES

 - m_1: size of m wrt. List<List<Rat>>
 - m_2: size of m wrt. List<Rat>
 - m_3: size of m wrt. Rat
UB for remFirstRow(m_1,m_2,m_3) = 2

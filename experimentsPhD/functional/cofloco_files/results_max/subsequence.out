
Abs program loaded in 18 ms.

Rule based representation generated in 8 ms.

Rule based representation stored in /tmp/costabs/rbr.rbr

RBR properties stored in /tmp/costabs/rbr.properties

Class invariants generated and loaded in 0 ms.

Abstract compilation performed in 42 ms.

Cost relation system stored in /tmp/costabs/crs.crs

Generated 48 equations 
entry('firstline'(A,B,C,D):[]).
entry('newline'(A,B,C,D,E,F,G):[]).
entry('lcstable'(A,B,C,D,E,F,G):[]).
entry('lcs'(A,B,C,D,E):[]).
input_output_vars('and_op'(A,B,C),[A,B],[C]).
input_output_vars('case_0'(A,B,C,D),[A,B],[C,D]).
input_output_vars('case_1'(A,B,C),[A,B],[C]).
input_output_vars('case_2'(A,B,C),[A,B],[C]).
input_output_vars('case_3'(A,B,C,D,E,F,G),[A,B,C,D,E],[F,G]).
input_output_vars('case_4'(A,B,C,D,E,F,G,H,I,J),[A,B,C,D,E,F,G,H],[I,J]).
input_output_vars('case_5'(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P),[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O],[P]).
input_output_vars('case_6'(A,B,C,D,E,F,G),[A,B,C,D],[E,F,G]).
input_output_vars('case_7'(A,B,C,D,E,F,G,H,I,J,K,L,M),[A,B,C,D,E,F,G,H,I,J],[K,L,M]).
input_output_vars('case_8'(A,B,C,D,E,F,G,H),[A,B,C,D,E,F,G],[H]).
input_output_vars('case_9'(A,B,C,D,E,F,G,H,I,J),[A,B,C,D,E,F,G,H,I],[J]).
input_output_vars('eq'(A,B,C),[A,B],[C]).
input_output_vars('firstline'(A,B,C,D),[A,B],[C,D]).
input_output_vars('geq'(A,B,C),[A,B],[C]).
input_output_vars('gt'(A,B,C),[A,B],[C]).
input_output_vars('head_or_zero'(A,B,C),[A,B],[C]).
input_output_vars('lcs'(A,B,C,D,E),[A,B,C,D],[E]).
input_output_vars('lcstable'(A,B,C,D,E,F,G),[A,B,C,D],[E,F,G]).
input_output_vars('leq'(A,B,C),[A,B],[C]).
input_output_vars('lt'(A,B,C),[A,B],[C]).
input_output_vars('maxNorm'(A,B,C),[A,B],[C]).
input_output_vars('max_raml'(A,B,C),[A,B],[C]).
input_output_vars('neg'(A,B),[A],[B]).
input_output_vars('neq'(A,B,C),[A,B],[C]).
input_output_vars('newline'(A,B,C,D,E,F,G),[A,B,C,D,E],[F,G]).
input_output_vars('or'(A,B,C),[A,B],[C]).
eq('eq',[A,B,C],0,[],[A=B,C=1,A>=0,B>=0,C>=0]).
eq('eq',[A,B,C],0,[],[A>=B+1,C=0,A>=0,B>=0,C>=0]).
eq('eq',[A,B,C],0,[],[B>=A+1,C=0,A>=0,B>=0,C>=0]).
eq('neq',[A,B,C],0,[],[A=B,C=0,A>=0,B>=0,C>=0]).
eq('neq',[A,B,C],0,[],[A>=B+1,C=1,A>=0,B>=0,C>=0]).
eq('neq',[A,B,C],0,[],[B>=A+1,C=1,A>=0,B>=0,C>=0]).
eq('lt',[A,B,C],0,[],[B-A>=1,C=1,A>=0,B>=0,C>=0]).
eq('lt',[A,B,C],0,[],[B=<A,C=0,A>=0,B>=0,C>=0]).
eq('leq',[A,B,C],0,[],[A=<B,C=1,A>=0,B>=0,C>=0]).
eq('leq',[A,B,C],0,[],[A-B>=1,C=0,A>=0,B>=0,C>=0]).
eq('gt',[A,B,C],0,[],[A-B>=1,C=1,A>=0,B>=0,C>=0]).
eq('gt',[A,B,C],0,[],[A=<B,C=0,A>=0,B>=0,C>=0]).
eq('geq',[A,B,C],0,[],[B=<A,C=1,A>=0,B>=0,C>=0]).
eq('geq',[A,B,C],0,[],[B-A>=1,C=0,A>=0,B>=0,C>=0]).
eq('neg',[A,B],0,[],[A=0,B=1,A>=0,B>=0]).
eq('neg',[A,B],0,[],[A=1,B=0,A>=0,B>=0]).
eq('and_op',[A,B,C],0,[],[A=0,C=0,A>=0,B>=0,C>=0]).
eq('and_op',[A,B,C],0,[],[A=1,C=B,A>=0,B>=0,C>=0]).
eq('or',[A,B,C],0,[],[A=1,C=1,A>=0,B>=0,C>=0]).
eq('or',[A,B,C],0,[],[A=0,C=B,A>=0,B>=0,C>=0]).
eq('maxNorm',[A,B,A],0,[],[A>=1+B,A>=0,B>=0,A>=0]).
eq('maxNorm',[A,B,B],0,[],[A=<B,A>=0,B>=0,B>=0]).
eq('case_0',[A,B,C,D],2,[],[A=1,C=1,A>=0,B>=0,C>=0,D>=0]).
eq('case_0',[A,B,C,D],5,['firstline'(E,F,G,H)],[B>=I,B>=F,A=E+1,E>=1,J=0,D>=J,D>=H,C=G+1,G>=1,A>=0,B>=0,C>=0,D>=0]).
eq('firstline',[A,B,C,D],1,['case_0'(A,B,C,D)],[A>=0,B>=0,C>=0,D>=0]).
eq('case_1',[A,B,A],1,[],[A>=B+1,A>=0,B>=0,A>=0]).
eq('case_1',[A,B,B],1,[],[B>=A,A>=0,B>=0,B>=0]).
eq('max_raml',[A,B,C],1,['case_1'(A,B,C)],[A>=0,B>=0,C>=0]).
eq('case_2',[A,B,C],1,[],[B>=C,B>=D,A=E+1,E>=1,A>=0,B>=0,C>=0]).
eq('case_2',[A,B,C],3,[],[A=1,C=0,A>=0,B>=0,C>=0]).
eq('head_or_zero',[A,B,C],1,['case_2'(A,B,C)],[A>=0,B>=0,C>=0]).
eq('case_3',[A,B,C,D,E,F,G],2,[],[D=1,F=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_4',[A,B,C,D,E,F,G,H,I,J],2,[],[B=1,I=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('case_5',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P],3,[],[J=E,Q=1,P=A+Q,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0]).
eq('case_5',[A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P],2,['max_raml'(M,B,P)],[J>=E+1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0,N>=0,O>=0,P>=0]).
eq('case_4',[A,B,C,D,E,F,G,H,I,J],15,['newline'(A,K,L,G,H,M,N),'head_or_zero'(O,P,Q),'head_or_zero'(K,L,R),'case_5'(S,T,O,P,A,B,C,D,E,F,G,H,U,K,L,V)],[C>=U,C>=L,B=K+1,K>=1,P=N,O=M,M>=1,T=Q,S=R,W=V,X>=W,X>=P,Y=O+1,O>=1,Z=X,A1=Y,Y>=1,B1=Z,C1=A1,A1>=1,D1=B1,E1=C1,C1>=1,J=D1,I=E1,E1>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0]).
eq('case_3',[A,B,C,D,E,F,G],3,['case_4'(A,B,C,D,E,H,I,J,F,G)],[E>=H,E>=J,D=I+1,I>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('newline',[A,B,C,D,E,F,G],1,['case_3'(A,B,C,D,E,F,G)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_6',[A,B,C,D,E,F,G],4,['firstline'(C,D,H,I),'maxNorm'(H,J,F)],[A=1,J=0,K=1,G>=I,G>=L,E=K+1,K>=1,H>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_7',[A,B,C,D,E,F,G,H,I,J,K,L,M],2,[],[B=0,A=1,L=0,K=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0]).
eq('case_7',[A,B,C,D,E,F,G,H,I,J,K,L,M],5,['newline'(H,N,O,F,G,P,Q),'maxNorm'(N,R,S),'maxNorm'(P,S,L)],[C>=O,C>=T,B>=N,B>=R,A=U+1,U>=1,N>=1,V>=O,V>=T,W=U+1,U>=1,N>=1,M>=Q,M>=V,K=W+1,W>=1,P>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0,I>=0,J>=0,K>=0,L>=0,M>=0]).
eq('case_6',[A,B,C,D,E,F,G],6,['lcstable'(H,I,C,D,J,K,L),'case_7'(M,N,O,A,B,C,D,P,H,I,Q,R,S)],[B>=P,B>=I,A=H+1,H>=1,O=L,N=K,M=J,J>=1,G=S,F=R,E=Q,Q>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('lcstable',[A,B,C,D,E,F,G],1,['case_6'(A,B,C,D,E,F,G)],[A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0]).
eq('case_8',[A,B,C,D,E,F,G,H],2,[],[B=0,A=1,H=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('case_9',[A,B,C,D,E,F,G,D,E,H],2,[],[D=1,H=0,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,D>=0,E>=0,H>=0]).
eq('case_9',[A,B,C,D,E,F,G,D,E,H],2,[],[E>=H,E>=I,D=J+1,J>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,D>=0,E>=0,H>=0]).
eq('case_8',[A,B,C,D,E,F,G,H],3,['case_9'(A,B,C,D,E,F,G,D,E,H)],[C>=E,C>=I,B>=D,B>=J,J>=1,A=K+1,K>=1,D>=1,A>=0,B>=0,C>=0,D>=0,E>=0,F>=0,G>=0,H>=0]).
eq('lcs',[A,B,C,D,E],4,['lcstable'(A,B,C,D,F,G,H),'case_8'(I,J,K,A,B,C,D,L)],[K=H,J=G,I=F,F>=1,E=L,A>=0,B>=0,C>=0,D>=0,E>=0]).

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [case_0/4,firstline/4]
1. non_recursive  : [case_9/10]
2. non_recursive  : [case_8/8]
3. non_recursive  : [maxNorm/3]
4. non_recursive  : [case_1/3]
5. non_recursive  : [max_raml/3]
6. non_recursive  : [case_5/16]
7. non_recursive  : [case_2/3]
8. non_recursive  : [head_or_zero/3]
9. recursive [non_tail] : [case_3/7,case_4/10,newline/7]
10. non_recursive  : [case_7/13]
11. recursive [non_tail] : [case_6/7,lcstable/7]
12. non_recursive  : [lcs/5]
Warning: the following predicates are never called:[and_op/3,eq/3,geq/3,gt/3,leq/3,lt/3,neg/2,neq/3,or/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into firstline/4
1. SCC is partially evaluated into case_9/10
2. SCC is partially evaluated into case_8/8
3. SCC is partially evaluated into maxNorm/3
4. SCC is partially evaluated into case_1/3
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into case_5/16
7. SCC is partially evaluated into case_2/3
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into newline/7
10. SCC is partially evaluated into case_7/13
11. SCC is partially evaluated into lcstable/7
12. SCC is partially evaluated into lcs/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations firstline/4 
* CE 2 is refined into CE [23] 
* CE 1 is refined into CE [24] 


#### Refined cost equations firstline/4 
* CE 23: firstline(A,B,C,D) = 3
     [D>=0,B>=0,C=1,A=1] 
* CE 24: firstline(A,B,C,D) = 6+ firstline(E,F,G,H)
     [D>=H,B>=F,G>=1,E>=1,D>=0,B>=0,G+1=C,E+1=A] 

### Cost equations --> "Loop" of firstline/4 
* CEs [24] --> Loop 23 
* CEs [23] --> Loop 24 

#### Loops of firstline/4 
* Loop 23: firstline(A,B,C,D)->  firstline(A',B',C',D')
                  [D>=D',B>=B',C'>=1,A'>=1,D>=0,B>=0,C'+1=C,A'+1=A] 
* Loop 24: firstline(A,B,C,D) [D>=0,B>=0,C=1,A=1] 

### Ranking functions of CR firstline(A,B,C,D) 
* RF of phase [23]: [A-1]

#### Partial ranking functions of CR firstline(A,B,C,D) 
* Partial RF of phase [23]:
  - RF of loop [23:1]:
    A-1

Discarded unfeasible chain [[23]]...(Non-terminating chain proved terminating)

### Resulting Chains:firstline(A,B,C,D) 
* [[23],24]
* [24]


### Merging Chains  firstline/4 into  External patterns of execution 
* [[24]] --> 1 
* [[24,[23]]] --> 2 


### Specialization of cost equations case_9/10 
* CE 22 is refined into CE [25] 
* CE 21 is refined into CE [26] 


#### Refined cost equations case_9/10 
* CE 25: case_9(A,B,C,D,E,F,G,D,E,H) = 2
     [E>=H,C>=E,B>=D,H>=0,G>=0,F>=0,D>=2,A>=2] 
* CE 26: case_9(A,B,C,D,E,F,G,H,E,I) = 2
     [C>=E,G>=0,F>=0,E>=0,B>=1,A>=2,I=0,H=1,D=1] 

### Cost equations --> "Loop" of case_9/10 
* CEs [25] --> Loop 25 
* CEs [26] --> Loop 26 

#### Loops of case_9/10 
* Loop 25: case_9(A,B,C,D,E,F,G,D,E,H) [E>=H,C>=E,B>=D,H>=0,G>=0,F>=0,D>=2,A>=2] 
* Loop 26: case_9(A,B,C,D,E,F,G,H,E,I) [C>=E,G>=0,F>=0,E>=0,B>=1,A>=2,I=0,H=1,D=1] 

### Ranking functions of CR case_9(A,B,C,D,E,F,G,H,I,J) 

#### Partial ranking functions of CR case_9(A,B,C,D,E,F,G,H,I,J) 


### Resulting Chains:case_9(A,B,C,D,E,F,G,H,I,J) 
* [26]
* [25]


### Merging Chains  case_9/10 into  External patterns of execution 
* [[26]] --> 1 
* [[25]] --> 2 


### Specialization of cost equations case_8/8 
* CE 18 is refined into CE [27,28] 
* CE 17 is refined into CE [29] 


#### Refined cost equations case_8/8 
* CE 27: case_8(A,B,C,D,E,F,G,H) = 3+ case_9(A,B,C,I,E,F,G,J,E,K):1
     [C>=E,E>=0,G>=0,F>=0,B>=1,A>=2,K=0,J=1,I=1,H=0,D=1] 
* CE 28: case_8(A,B,C,D,E,F,G,H) = 3+ case_9(A,B,C,D,E,F,G,D,E,H):2
     [E>=H,C>=E,B>=D,H>=0,D>=2,G>=0,F>=0,A>=2] 
* CE 29: case_8(A,B,C,D,E,F,G,H) = 2
     [G>=0,F>=0,E>=0,D>=0,C>=0,H=0,B=0,A=1] 

### Cost equations --> "Loop" of case_8/8 
* CEs [28] --> Loop 27 
* CEs [27] --> Loop 28 
* CEs [29] --> Loop 29 

#### Loops of case_8/8 
* Loop 27: case_8(A,B,C,D,E,F,G,H) [E>=H,C>=E,B>=D,H>=0,G>=0,F>=0,D>=2,A>=2] 
* Loop 28: case_8(A,B,C,D,E,F,G,H) [C>=E,G>=0,F>=0,E>=0,B>=1,A>=2,H=0,D=1] 
* Loop 29: case_8(A,B,C,D,E,F,G,H) [G>=0,F>=0,E>=0,D>=0,C>=0,H=0,B=0,A=1] 

### Ranking functions of CR case_8(A,B,C,D,E,F,G,H) 

#### Partial ranking functions of CR case_8(A,B,C,D,E,F,G,H) 


### Resulting Chains:case_8(A,B,C,D,E,F,G,H) 
* [29]
* [28]
* [27]


### Merging Chains  case_8/8 into  External patterns of execution 
* [[29]] --> 1 
* [[28]] --> 2 
* [[27]] --> 3 


### Specialization of cost equations maxNorm/3 
* CE 16 is refined into CE [30] 
* CE 15 is refined into CE [31] 


#### Refined cost equations maxNorm/3 
* CE 30: maxNorm(A,B,B) = 0
     [B>=A,A>=1] 
* CE 31: maxNorm(A,B,A) = 0
     [A>=B+1,B>=0] 

### Cost equations --> "Loop" of maxNorm/3 
* CEs [30] --> Loop 30 
* CEs [31] --> Loop 31 

#### Loops of maxNorm/3 
* Loop 30: maxNorm(A,B,B) [B>=A,A>=1] 
* Loop 31: maxNorm(A,B,A) [A>=B+1,B>=0] 

### Ranking functions of CR maxNorm(A,B,C) 

#### Partial ranking functions of CR maxNorm(A,B,C) 


### Resulting Chains:maxNorm(A,B,C) 
* [31]
* [30]


### Merging Chains  maxNorm/3 into  External patterns of execution 
* [[31]] --> 1 
* [[30]] --> 2 


### Specialization of cost equations case_1/3 
* CE 20 is refined into CE [32] 
* CE 19 is refined into CE [33] 


#### Refined cost equations case_1/3 
* CE 32: case_1(A,B,B) = 1
     [B>=A,A>=0] 
* CE 33: case_1(A,B,A) = 1
     [A>=B+1,B>=0] 

### Cost equations --> "Loop" of case_1/3 
* CEs [32] --> Loop 32 
* CEs [33] --> Loop 33 

#### Loops of case_1/3 
* Loop 32: case_1(A,B,B) [B>=A,A>=0] 
* Loop 33: case_1(A,B,A) [A>=B+1,B>=0] 

### Ranking functions of CR case_1(A,B,C) 

#### Partial ranking functions of CR case_1(A,B,C) 


### Resulting Chains:case_1(A,B,C) 
* [33]
* [32]


### Merging Chains  case_1/3 into  External patterns of execution 
* [[33]] --> 1 
* [[32]] --> 2 


### Specialization of cost equations case_5/16 
* CE 12 is refined into CE [34,35] 
* CE 11 is refined into CE [36] 


#### Refined cost equations case_5/16 
* CE 34: case_5(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,M) = 3+ case_1(M,B,M):1
     [G>=M,M>=B+1,G>=O,I>=L,I>=J,J>=E+1,B>=0,O>=0,N>=1,L>=0,K>=1,E>=0,D>=0,C>=1,A>=0,K+1=H,N+1=F] 
* CE 35: case_5(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,B) = 3+ case_1(M,B,B):2
     [B>=M,G>=M,G>=O,I>=L,I>=J,J>=E+1,M>=0,O>=0,N>=1,L>=0,K>=1,E>=0,D>=0,C>=1,A>=0,K+1=H,N+1=F] 
* CE 36: case_5(A,B,C,D,E,F,G,H,I,E,J,K,L,M,N,O) = 3
     [G>=N,G>=L,I>=K,I>=E,N>=0,M>=1,L>=0,K>=0,J>=1,E>=0,D>=0,C>=1,B>=0,A>=0,A+1=O,J+1=H,M+1=F] 

### Cost equations --> "Loop" of case_5/16 
* CEs [34] --> Loop 34 
* CEs [35] --> Loop 35 
* CEs [36] --> Loop 36 

#### Loops of case_5/16 
* Loop 34: case_5(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,M) [G>=O,G>=M,I>=L,I>=J,J>=E+1,M>=B+1,O>=0,L>=0,H>=2,F>=2,E>=0,D>=0,C>=1,B>=0,A>=0,F=N+1,H=K+1] 
* Loop 35: case_5(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,B) [G>=O,G>=M,B>=M,I>=L,I>=J,J>=E+1,O>=0,M>=0,L>=0,H>=2,F>=2,E>=0,D>=0,C>=1,A>=0,F=N+1,H=K+1] 
* Loop 36: case_5(A,B,C,D,E,F,G,H,I,E,J,K,L,M,N,O) [G>=N,G>=L,I>=K,I>=E,N>=0,L>=0,K>=0,H>=2,F>=2,E>=0,D>=0,C>=1,B>=0,A>=0,A+1=O,F=M+1,H=J+1] 

### Ranking functions of CR case_5(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P) 

#### Partial ranking functions of CR case_5(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P) 


### Resulting Chains:case_5(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P) 
* [36]
* [35]
* [34]


### Merging Chains  case_5/16 into  External patterns of execution 
* [[36]] --> 1 
* [[35]] --> 2 
* [[34]] --> 3 


### Specialization of cost equations case_2/3 
* CE 9 is refined into CE [37] 
* CE 10 is refined into CE [38] 


#### Refined cost equations case_2/3 
* CE 37: case_2(A,B,C) = 1
     [B>=C,C>=0,A>=2] 
* CE 38: case_2(A,B,C) = 3
     [B>=0,C=0,A=1] 

### Cost equations --> "Loop" of case_2/3 
* CEs [37] --> Loop 37 
* CEs [38] --> Loop 38 

#### Loops of case_2/3 
* Loop 37: case_2(A,B,C) [B>=C,C>=0,A>=2] 
* Loop 38: case_2(A,B,C) [B>=0,C=0,A=1] 

### Ranking functions of CR case_2(A,B,C) 

#### Partial ranking functions of CR case_2(A,B,C) 


### Resulting Chains:case_2(A,B,C) 
* [38]
* [37]


### Merging Chains  case_2/3 into  External patterns of execution 
* [[38]] --> 1 
* [[37]] --> 2 


### Specialization of cost equations newline/7 
* CE 5 is refined into CE [39,40,41,42,43,44,45,46,47,48,49,50] 
* CE 3 is refined into CE [51] 
* CE 4 is refined into CE [52] 


#### Refined cost equations newline/7 
* CE 39: newline(A,B,C,D,E,F,G) = 21+ newline(A,H,I,J,K,L,M)+ case_2(N,M,O):1+ case_2(P,I,Q):1+ case_5(R,S,T,M,A,U,C,V,E,A,J,K,W,X,I,Y):1
     [C>=I,C>=W,E>=K,E>=A,G>=M,I>=0,W>=0,K>=0,J>=1,A>=0,M>=0,G>=1,J+1=V,J+1=D,L=1,H=1,Y=1,X=1,U=2,T=1,S=0,R=0,Q=0,P=1,O=0,N=1,F=2,B=2] 
* CE 40: newline(A,B,C,D,E,F,G) = 21+ newline(A,H,I,J,K,L,M)+ case_2(N,M,O):1+ case_2(P,I,Q):1+ case_5(R,S,T,M,A,U,C,V,E,W,J,K,X,Y,I,Z):2
     [C>=I,E>=K,E>=W,W>=A+1,G>=M,I>=0,K>=0,J>=1,A>=0,M>=0,J+1=V,J+1=D,L=1,H=1,Z=0,Y=1,X=0,U=2,T=1,S=0,R=0,Q=0,P=1,O=0,N=1,F=2,B=2] 
* CE 41: newline(A,B,C,D,E,F,G) = 21+ newline(A,H,I,J,K,L,M)+ case_2(N,M,O):1+ case_2(P,I,Q):1+ case_5(R,S,T,M,A,U,C,V,E,W,J,K,X,Y,I,X):3
     [C>=X,G>=X,C>=I,E>=K,E>=W,W>=A+1,G>=M,X>=1,I>=0,K>=0,J>=1,A>=0,M>=0,J+1=V,J+1=D,L=1,H=1,Y=1,U=2,T=1,S=0,R=0,Q=0,P=1,O=0,N=1,F=2,B=2] 
* CE 42: newline(A,B,C,D,E,F,G) = 21+ newline(A,H,I,J,K,L,M)+ case_2(N,M,O):1+ case_2(H,I,P):2+ case_5(Q,R,S,M,A,T,C,U,E,A,J,K,V,H,I,W):1
     [I+1>=W,G>=W,C>=I,C>=V,E>=K,E>=A,G>=M,W>=1,H>=2,V>=0,K>=0,J>=1,A>=0,M>=0,J+1=U,H+1=T,W=Q+1,W=P+1,J+1=D,H+1=B,L=1,S=1,R=0,O=0,N=1,F=2] 
* CE 43: newline(A,B,C,D,E,F,G) = 21+ newline(A,H,I,J,K,L,M)+ case_2(N,M,O):1+ case_2(H,I,P):2+ case_5(P,Q,R,M,A,S,C,T,E,U,J,K,V,H,I,W):2
     [C>=I,E>=K,E>=U,U>=A+1,G>=M,I>=P,H>=2,K>=0,J>=1,A>=0,M>=0,P>=0,J+1=T,H+1=S,J+1=D,H+1=B,L=1,W=0,V=0,R=1,Q=0,O=0,N=1,F=2] 
* CE 44: newline(A,B,C,D,E,F,G) = 21+ newline(A,H,I,J,K,L,M)+ case_2(N,M,O):1+ case_2(H,I,P):2+ case_5(P,Q,R,M,A,S,C,T,E,U,J,K,V,H,I,V):3
     [C>=V,G>=V,C>=I,E>=K,E>=U,U>=A+1,G>=M,I>=P,V>=1,H>=2,K>=0,J>=1,A>=0,M>=0,P>=0,J+1=T,H+1=S,J+1=D,H+1=B,L=1,R=1,Q=0,O=0,N=1,F=2] 
* CE 45: newline(A,B,C,D,E,F,G) = 21+ newline(A,H,I,J,K,L,M)+ case_2(L,M,N):2+ case_2(O,I,P):1+ case_5(Q,N,L,M,A,R,C,S,E,A,J,K,T,U,I,V):1
     [C>=I,C>=T,E>=K,E>=A,G>=M,M>=N,I>=0,T>=0,K>=0,J>=1,A>=0,L>=2,N>=0,G>=1,J+1=S,L+1=F,J+1=D,H=1,V=1,U=1,R=2,Q=0,P=0,O=1,B=2] 
* CE 46: newline(A,B,C,D,E,F,G) = 21+ newline(A,H,I,J,K,L,M)+ case_2(L,M,N):2+ case_2(O,I,P):1+ case_5(Q,N,L,M,A,R,C,S,E,T,J,K,U,V,I,N):2
     [M>=N,C>=I,N>=U,C>=U,E>=K,E>=T,T>=A+1,G>=M,I>=0,U>=0,K>=0,J>=1,A>=0,L>=2,J+1=S,L+1=F,J+1=D,H=1,V=1,R=2,Q=0,P=0,O=1,B=2] 
* CE 47: newline(A,B,C,D,E,F,G) = 21+ newline(A,H,I,J,K,L,M)+ case_2(L,M,N):2+ case_2(O,I,P):1+ case_5(Q,N,L,M,A,R,C,S,E,T,J,K,U,V,I,U):3
     [C>=U,G>=U,C>=I,E>=K,E>=T,T>=A+1,G>=M,U>=N+1,M>=N,I>=0,K>=0,J>=1,A>=0,L>=2,N>=0,J+1=S,L+1=F,J+1=D,H=1,V=1,R=2,Q=0,P=0,O=1,B=2] 
* CE 48: newline(A,B,C,D,E,F,G) = 21+ newline(A,H,I,J,K,L,M)+ case_2(L,M,N):2+ case_2(H,I,O):2+ case_5(P,N,L,M,A,Q,C,R,E,A,J,K,S,H,I,T):1
     [I+1>=T,G>=T,C>=I,C>=S,E>=K,E>=A,G>=M,M>=N,T>=1,H>=2,S>=0,K>=0,J>=1,A>=0,L>=2,N>=0,J+1=R,H+1=Q,T=P+1,T=O+1,L+1=F,J+1=D,H+1=B] 
* CE 49: newline(A,B,C,D,E,F,G) = 21+ newline(A,H,I,J,K,L,M)+ case_2(L,M,N):2+ case_2(H,I,O):2+ case_5(O,N,L,M,A,P,C,Q,E,R,J,K,S,H,I,N):2
     [M>=N,C>=I,N>=S,C>=S,E>=K,E>=R,R>=A+1,G>=M,I>=O,H>=2,S>=0,K>=0,J>=1,A>=0,L>=2,O>=0,J+1=Q,H+1=P,L+1=F,J+1=D,H+1=B] 
* CE 50: newline(A,B,C,D,E,F,G) = 21+ newline(A,H,I,J,K,L,M)+ case_2(L,M,N):2+ case_2(H,I,O):2+ case_5(O,N,L,M,A,P,C,Q,E,R,J,K,S,H,I,S):3
     [C>=S,G>=S,C>=I,E>=K,E>=R,R>=A+1,G>=M,S>=N+1,M>=N,I>=O,H>=2,K>=0,J>=1,A>=0,L>=2,N>=0,O>=0,J+1=Q,H+1=P,L+1=F,J+1=D,H+1=B] 
* CE 51: newline(A,B,C,D,E,F,G) = 3
     [G>=0,E>=0,C>=0,B>=0,A>=0,F=1,D=1] 
* CE 52: newline(A,B,C,D,E,F,G) = 6
     [G>=0,E>=0,D>=2,C>=0,A>=0,F=1,B=1] 

### Cost equations --> "Loop" of newline/7 
* CEs [51] --> Loop 39 
* CEs [52] --> Loop 40 
* CEs [49] --> Loop 41 
* CEs [48,50] --> Loop 42 
* CEs [43] --> Loop 43 
* CEs [42,44] --> Loop 44 
* CEs [46] --> Loop 45 
* CEs [45,47] --> Loop 46 
* CEs [40] --> Loop 47 
* CEs [39,41] --> Loop 48 

#### Loops of newline/7 
* Loop 39: newline(A,B,C,D,E,F,G) [G>=0,E>=0,C>=0,B>=0,A>=0,F=1,D=1] 
* Loop 40: newline(A,B,C,D,E,F,G) [G>=0,E>=0,D>=2,C>=0,A>=0,F=1,B=1] 
* Loop 41: newline(A,B,C,D,E,F,G)->  newline(A,A',B',C',D',E',F')
                  [G>=F',E>=D',C>=B',E>=A+1,F'>=0,D'>=0,B'>=0,F>=3,D>=2,B>=3,A>=0,F=E'+1,D=C'+1,B=A'+1] 
* Loop 42: newline(A,B,C,D,E,F,G)->  newline(A,A',B',C',D',E',F')
                  [G>=F',E>=D',C>=B',E>=A,F'>=0,D'>=0,B'>=0,G>=1,F>=3,D>=2,B>=3,A>=0,F=E'+1,D=C'+1,B=A'+1] 
* Loop 43: newline(A,B,C,D,E,F,G)->  newline(A,A',B',C',D',E',F')
                  [G>=F',E>=D',C>=B',E>=A+1,F'>=0,D'>=0,B'>=0,D>=2,B>=3,A>=0,D=C'+1,B=A'+1,E'=1,F=2] 
* Loop 44: newline(A,B,C,D,E,F,G)->  newline(A,A',B',C',D',E',F')
                  [G>=F',E>=D',C>=B',E>=A,F'>=0,D'>=0,B'>=0,G>=1,D>=2,B>=3,A>=0,D=C'+1,B=A'+1,E'=1,F=2] 
* Loop 45: newline(A,B,C,D,E,F,G)->  newline(A,A',B',C',D',E',F')
                  [G>=F',E>=D',C>=B',E>=A+1,F'>=0,D'>=0,B'>=0,F>=3,D>=2,A>=0,F=E'+1,D=C'+1,A'=1,B=2] 
* Loop 46: newline(A,B,C,D,E,F,G)->  newline(A,A',B',C',D',E',F')
                  [G>=F',E>=D',C>=B',E>=A,F'>=0,D'>=0,B'>=0,G>=1,F>=3,D>=2,A>=0,F=E'+1,D=C'+1,A'=1,B=2] 
* Loop 47: newline(A,B,C,D,E,F,G)->  newline(A,A',B',C',D',E',F')
                  [G>=F',E>=D',C>=B',E>=A+1,F'>=0,D'>=0,B'>=0,D>=2,A>=0,D=C'+1,E'=1,A'=1,F=2,B=2] 
* Loop 48: newline(A,B,C,D,E,F,G)->  newline(A,A',B',C',D',E',F')
                  [G>=F',E>=D',C>=B',E>=A,F'>=0,D'>=0,B'>=0,G>=1,D>=2,A>=0,D=C'+1,E'=1,A'=1,F=2,B=2] 

### Ranking functions of CR newline(A,B,C,D,E,F,G) 
* RF of phase [41,42]: [B-2,D-1]

#### Partial ranking functions of CR newline(A,B,C,D,E,F,G) 
* Partial RF of phase [41,42]:
  - RF of loop [41:1,42:1]:
    B-2
    D-1

Discarded unfeasible chain [[41,42]]...(Non-terminating chain proved terminating)

### Resulting Chains:newline(A,B,C,D,E,F,G) 
* [[41,42],48,40]
* [[41,42],48,39]
* [[41,42],47,40]
* [[41,42],47,39]
* [[41,42],44,39]
* [[41,42],43,39]
* [48,40]
* [48,39]
* [47,40]
* [47,39]
* [44,39]
* [43,39]
* [40]
* [39]


### Merging Chains  newline/7 into  External patterns of execution 
* [[40]] --> 1 
* [[39,47]] --> 2 
* [[39,48]] --> 3 
* [[40,47]] --> 4 
* [[40,48]] --> 5 
* [[39]] --> 6 
* [[39,43]] --> 7 
* [[39,44]] --> 8 
* [[39,47,[41,42]]] --> 9 
* [[39,48,[41,42]]] --> 10 
* [[40,47,[41,42]]] --> 11 
* [[40,48,[41,42]]] --> 12 
* [[39,43,[41,42]]] --> 13 
* [[39,44,[41,42]]] --> 14 


### Specialization of cost equations case_7/13 
* CE 14 is refined into CE [53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80] 
* CE 13 is refined into CE [81] 


#### Refined cost equations case_7/13 
* CE 53: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) = 5+ newline(H,N,O,F,G,P,Q):1+ maxNorm(R,S,T):1+ maxNorm(U,V,W):2
     [M>=Q,M>=O,C>=O,E>=H,E>=J,Q>=0,G>=0,F>=2,O>=0,H>=0,J>=0,I>=1,B>=1,A>=2,A+1=K,I+1=D,W=1,V=1,U=1,T=1,S=0,R=1,P=1,N=1,L=1] 
* CE 54: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) = 5+ newline(H,N,O,F,G,P,Q):1+ maxNorm(R,L,L):2+ maxNorm(S,L,L):2
     [B>=L,M>=Q,M>=O,C>=O,E>=H,E>=J,L>=1,Q>=0,G>=0,F>=2,O>=0,H>=0,J>=0,I>=1,A>=2,A+1=K,I+1=D,S=1,R=1,P=1,N=1] 
* CE 55: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) = 5+ newline(H,N,O,P,G,Q,R):2+ maxNorm(S,T,U):1+ maxNorm(V,W,X):2
     [M>=R,M>=O,C>=O,G>=H+1,E>=H,E>=J,T>=0,R>=0,O>=0,H>=0,J>=0,I>=1,B>=2,A>=2,1>=T,A+1=K,I+1=D,X=2,W=2,V=2,U=2,S=2,Q=2,P=2,N=2,L=2,F=2] 
* CE 56: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) = 5+ newline(H,N,O,P,G,Q,R):2+ maxNorm(S,L,L):2+ maxNorm(T,L,L):2
     [B>=L,M>=R,M>=O,C>=O,G>=H+1,E>=H,E>=J,L>=2,R>=0,O>=0,H>=0,J>=0,I>=1,A>=2,A+1=K,I+1=D,T=2,S=2,Q=2,P=2,N=2,F=2] 
* CE 57: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) = 5+ newline(H,N,O,P,G,Q,R):3+ maxNorm(S,T,U):1+ maxNorm(V,W,X):2
     [M>=R,M>=O,C>=O,G>=H,E>=H,E>=J,T>=0,R>=1,O>=0,H>=0,J>=0,I>=1,B>=2,A>=2,1>=T,A+1=K,I+1=D,X=2,W=2,V=2,U=2,S=2,Q=2,P=2,N=2,L=2,F=2] 
* CE 58: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) = 5+ newline(H,N,O,P,G,Q,R):3+ maxNorm(S,L,L):2+ maxNorm(T,L,L):2
     [B>=L,M>=R,M>=O,C>=O,G>=H,E>=H,E>=J,L>=2,R>=1,O>=0,H>=0,J>=0,I>=1,A>=2,A+1=K,I+1=D,T=2,S=2,Q=2,P=2,N=2,F=2] 
* CE 59: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) = 5+ newline(H,N,O,F,G,P,Q):4+ maxNorm(R,S,T):1+ maxNorm(U,V,W):2
     [M>=Q,M>=O,C>=O,G>=H+1,E>=H,E>=J,S>=0,Q>=0,F>=3,O>=0,H>=0,J>=0,I>=1,B>=2,A>=2,1>=S,A+1=K,I+1=D,W=2,V=2,U=2,T=2,R=2,P=2,N=2,L=2] 
* CE 60: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) = 5+ newline(H,N,O,F,G,P,Q):4+ maxNorm(R,L,L):2+ maxNorm(S,L,L):2
     [B>=L,M>=Q,M>=O,C>=O,G>=H+1,E>=H,E>=J,L>=2,Q>=0,F>=3,O>=0,H>=0,J>=0,I>=1,A>=2,A+1=K,I+1=D,S=2,R=2,P=2,N=2] 
* CE 61: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) = 5+ newline(H,N,O,F,G,P,Q):5+ maxNorm(R,S,T):1+ maxNorm(U,V,W):2
     [M>=Q,M>=O,C>=O,G>=H,E>=H,E>=J,S>=0,Q>=1,F>=3,O>=0,H>=0,J>=0,I>=1,B>=2,A>=2,1>=S,A+1=K,I+1=D,W=2,V=2,U=2,T=2,R=2,P=2,N=2,L=2] 
* CE 62: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) = 5+ newline(H,N,O,F,G,P,Q):5+ maxNorm(R,L,L):2+ maxNorm(S,L,L):2
     [B>=L,M>=Q,M>=O,C>=O,G>=H,E>=H,E>=J,L>=2,Q>=1,F>=3,O>=0,H>=0,J>=0,I>=1,A>=2,A+1=K,I+1=D,S=2,R=2,P=2,N=2] 
* CE 63: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) = 5+ newline(H,L,N,O,G,P,Q):6+ maxNorm(L,R,L):1+ maxNorm(S,L,L):2
     [B>=L,L>=R+1,M>=Q,M>=N,C>=N,E>=H,E>=J,R>=0,Q>=0,G>=0,N>=0,H>=0,J>=0,I>=1,A>=2,A+1=K,I+1=D,S=1,P=1,O=1,F=1] 
* CE 64: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) = 5+ newline(H,N,O,P,G,Q,R):6+ maxNorm(N,L,L):2+ maxNorm(S,L,L):2
     [B>=L,L>=N,M>=R,M>=O,C>=O,E>=H,E>=J,N>=1,R>=0,G>=0,O>=0,H>=0,J>=0,I>=1,A>=2,A+1=K,I+1=D,S=1,Q=1,P=1,F=1] 
* CE 65: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) = 5+ newline(H,L,N,O,G,P,Q):7+ maxNorm(L,R,L):1+ maxNorm(S,L,L):2
     [B>=L,L>=R+1,M>=Q,M>=N,C>=N,G>=H+1,E>=H,E>=J,L>=3,R>=0,Q>=0,N>=0,H>=0,J>=0,I>=1,A>=2,A+1=K,I+1=D,S=2,P=2,O=2,F=2] 
* CE 66: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) = 5+ newline(H,N,O,P,G,Q,R):7+ maxNorm(N,L,L):2+ maxNorm(S,L,L):2
     [B>=L,L>=N,M>=R,M>=O,C>=O,G>=H+1,E>=H,E>=J,N>=3,R>=0,O>=0,H>=0,J>=0,I>=1,A>=2,A+1=K,I+1=D,S=2,Q=2,P=2,F=2] 
* CE 67: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) = 5+ newline(H,L,N,O,G,P,Q):8+ maxNorm(L,R,L):1+ maxNorm(S,L,L):2
     [B>=L,L>=R+1,M>=Q,M>=N,C>=N,G>=H,E>=H,E>=J,L>=3,R>=0,Q>=1,N>=0,H>=0,J>=0,I>=1,A>=2,A+1=K,I+1=D,S=2,P=2,O=2,F=2] 
* CE 68: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) = 5+ newline(H,N,O,P,G,Q,R):8+ maxNorm(N,L,L):2+ maxNorm(S,L,L):2
     [B>=L,L>=N,M>=R,M>=O,C>=O,G>=H,E>=H,E>=J,N>=3,R>=1,O>=0,H>=0,J>=0,I>=1,A>=2,A+1=K,I+1=D,S=2,Q=2,P=2,F=2] 
* CE 69: case_7(A,B,C,D,E,F,G,H,I,J,K,F,L) = 5+ newline(H,F,M,F,G,F,N):9+ maxNorm(F,O,F):1+ maxNorm(F,F,F):2
     [B>=F,F>=O+1,L>=N,L>=M,C>=M,G>=H+1,E>=H,E>=J,F>=3,O>=0,N>=0,M>=0,H>=0,J>=0,I>=1,A>=2,A+1=K,I+1=D] 
* CE 70: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) = 5+ newline(H,F,N,F,G,F,O):9+ maxNorm(F,L,L):2+ maxNorm(F,L,L):2
     [B>=L,L>=F,M>=O,M>=N,C>=N,G>=H+1,E>=H,E>=J,F>=3,O>=0,N>=0,H>=0,J>=0,I>=1,A>=2,A+1=K,I+1=D] 
* CE 71: case_7(A,B,C,D,E,F,G,H,I,J,K,F,L) = 5+ newline(H,F,M,F,G,F,N):10+ maxNorm(F,O,F):1+ maxNorm(F,F,F):2
     [B>=F,F>=O+1,L>=N,L>=M,C>=M,G>=H,E>=H,E>=J,F>=3,O>=0,N>=1,M>=0,H>=0,J>=0,I>=1,A>=2,A+1=K,I+1=D] 
* CE 72: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) = 5+ newline(H,F,N,F,G,F,O):10+ maxNorm(F,L,L):2+ maxNorm(F,L,L):2
     [B>=L,L>=F,M>=O,M>=N,C>=N,G>=H,E>=H,E>=J,F>=3,O>=1,N>=0,H>=0,J>=0,I>=1,A>=2,A+1=K,I+1=D] 
* CE 73: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) = 5+ newline(H,L,N,F,G,L,O):11+ maxNorm(L,P,L):1+ maxNorm(L,L,L):2
     [F>=L+1,B>=L,L>=P+1,M>=O,M>=N,C>=N,G>=H+1,E>=H,E>=J,L>=3,P>=0,O>=0,N>=0,H>=0,J>=0,I>=1,A>=2,A+1=K,I+1=D] 
* CE 74: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) = 5+ newline(H,N,O,F,G,N,P):11+ maxNorm(N,L,L):2+ maxNorm(N,L,L):2
     [B>=L,L>=N,F>=N+1,M>=P,M>=O,C>=O,G>=H+1,E>=H,E>=J,N>=3,P>=0,O>=0,H>=0,J>=0,I>=1,A>=2,A+1=K,I+1=D] 
* CE 75: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) = 5+ newline(H,L,N,F,G,L,O):12+ maxNorm(L,P,L):1+ maxNorm(L,L,L):2
     [F>=L+1,B>=L,L>=P+1,M>=O,M>=N,C>=N,G>=H,E>=H,E>=J,L>=3,P>=0,O>=1,N>=0,H>=0,J>=0,I>=1,A>=2,A+1=K,I+1=D] 
* CE 76: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) = 5+ newline(H,N,O,F,G,N,P):12+ maxNorm(N,L,L):2+ maxNorm(N,L,L):2
     [B>=L,L>=N,F>=N+1,M>=P,M>=O,C>=O,G>=H,E>=H,E>=J,N>=3,P>=1,O>=0,H>=0,J>=0,I>=1,A>=2,A+1=K,I+1=D] 
* CE 77: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) = 5+ newline(H,L,N,F,G,F,O):13+ maxNorm(L,P,L):1+ maxNorm(F,L,L):2
     [B>=L,L>=F+1,L>=P+1,M>=O,M>=N,C>=N,G>=H+1,E>=H,E>=J,F>=3,P>=0,O>=0,N>=0,H>=0,J>=0,I>=1,A>=2,A+1=K,I+1=D] 
* CE 78: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) = 5+ newline(H,N,O,F,G,F,P):13+ maxNorm(N,L,L):2+ maxNorm(F,L,L):2
     [B>=L,N>=F+1,L>=N,M>=P,M>=O,C>=O,G>=H+1,E>=H,E>=J,F>=3,P>=0,O>=0,H>=0,J>=0,I>=1,A>=2,A+1=K,I+1=D] 
* CE 79: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) = 5+ newline(H,L,N,F,G,F,O):14+ maxNorm(L,P,L):1+ maxNorm(F,L,L):2
     [B>=L,L>=F+1,L>=P+1,M>=O,M>=N,C>=N,G>=H,E>=H,E>=J,F>=3,P>=0,O>=1,N>=0,H>=0,J>=0,I>=1,A>=2,A+1=K,I+1=D] 
* CE 80: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) = 5+ newline(H,N,O,F,G,F,P):14+ maxNorm(N,L,L):2+ maxNorm(F,L,L):2
     [B>=L,N>=F+1,L>=N,M>=P,M>=O,C>=O,G>=H,E>=H,E>=J,F>=3,P>=1,O>=0,H>=0,J>=0,I>=1,A>=2,A+1=K,I+1=D] 
* CE 81: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) = 2
     [E>=J,E>=H,M>=0,J>=0,I>=1,H>=0,G>=0,F>=0,C>=0,I+1=D,L=0,K=1,B=0,A=1] 

### Cost equations --> "Loop" of case_7/13 
* CEs [71] --> Loop 49 
* CEs [69] --> Loop 50 
* CEs [61] --> Loop 51 
* CEs [59] --> Loop 52 
* CEs [53] --> Loop 53 
* CEs [57,58,67,68] --> Loop 54 
* CEs [54,55,56,60,62,65,66,70,72,73,74,75,76,77,78,79,80] --> Loop 55 
* CEs [63,64] --> Loop 56 
* CEs [81] --> Loop 57 

#### Loops of case_7/13 
* Loop 49: case_7(A,B,C,D,E,F,G,H,I,J,K,F,L) [E>=J,G>=H,E>=H,B>=F,L>=1,J>=0,H>=0,F>=3,D>=2,C>=0,A>=2,A+1=K,D=I+1] 
* Loop 50: case_7(A,B,C,D,E,F,G,H,I,J,K,F,L) [E>=J,G>=H+1,E>=H,B>=F,L>=0,J>=0,H>=0,F>=3,D>=2,C>=0,A>=2,A+1=K,D=I+1] 
* Loop 51: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) [E>=J,G>=H,E>=H,M>=1,J>=0,H>=0,F>=3,D>=2,C>=0,B>=2,A>=2,A+1=K,D=I+1,L=2] 
* Loop 52: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) [E>=J,G>=H+1,E>=H,M>=0,J>=0,H>=0,F>=3,D>=2,C>=0,B>=2,A>=2,A+1=K,D=I+1,L=2] 
* Loop 53: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) [E>=J,E>=H,M>=0,J>=0,H>=0,G>=0,F>=2,D>=2,C>=0,B>=1,A>=2,A+1=K,D=I+1,L=1] 
* Loop 54: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) [B>=L,E>=J,G>=H,E>=H,M>=1,L>=2,J>=0,H>=0,D>=2,C>=0,A>=2,A+1=K,D=I+1,F=2] 
* Loop 55: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) [B>=L,E>=J,E>=H,M>=0,L>=1,J>=0,H>=0,G>=0,F>=2,D>=2,C>=0,A>=2,A+1=K,D=I+1] 
* Loop 56: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) [B>=L,E>=J,E>=H,M>=0,L>=1,J>=0,H>=0,G>=0,D>=2,C>=0,A>=2,A+1=K,D=I+1,F=1] 
* Loop 57: case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) [E>=J,E>=H,M>=0,J>=0,H>=0,G>=0,F>=0,D>=2,C>=0,D=I+1,L=0,K=1,B=0,A=1] 

### Ranking functions of CR case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) 

#### Partial ranking functions of CR case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) 


### Resulting Chains:case_7(A,B,C,D,E,F,G,H,I,J,K,L,M) 
* [57]
* [56]
* [55]
* [54]
* [53]
* [52]
* [51]
* [50]
* [49]


### Merging Chains  case_7/13 into  External patterns of execution 
* [[57]] --> 1 
* [[56]] --> 2 
* [[54],[55]] --> 3 
* [[53]] --> 4 
* [[52]] --> 5 
* [[51]] --> 6 
* [[50]] --> 7 
* [[49]] --> 8 


### Specialization of cost equations lcstable/7 
* CE 7 is refined into CE [82,83] 
* CE 6 is refined into CE [84,85,86,87,88,89,90,91] 


#### Refined cost equations lcstable/7 
* CE 82: lcstable(A,B,C,D,E,F,G) = 5+ firstline(H,D,I,J):1+ maxNorm(K,L,M):1
     [G>=J,J>=0,D>=0,B>=0,M=1,L=0,K=1,I=1,H=1,F=1,E=2,C=1,A=1] 
* CE 83: lcstable(A,B,C,D,E,C,F) = 5+ firstline(C,D,C,G):2+ maxNorm(C,H,C):1
     [F>=G,C>=2,G>=0,D>=0,B>=0,H=0,E=2,A=1] 
* CE 84: lcstable(A,B,C,D,E,F,G) = 7+ lcstable(H,I,C,D,J,K,L)+ case_7(M,N,L,O,B,C,D,P,H,I,Q,R,G):1
     [B>=I,B>=P,G>=0,I>=0,H>=1,P>=0,D>=0,C>=0,L>=0,H+1=O,H+1=A,K=0,J=1,R=0,Q=1,N=0,M=1,F=0,E=1] 
* CE 85: lcstable(A,B,C,D,E,F,G) = 7+ lcstable(H,I,J,D,K,L,M)+ case_7(N,L,M,O,B,P,D,Q,H,I,E,F,G):2
     [L>=F,B>=I,B>=Q,G>=0,F>=1,E>=3,I>=0,H>=1,Q>=0,D>=0,M>=0,E=K+1,H+1=O,E=N+1,H+1=A,J=1,P=1,C=1] 
* CE 86: lcstable(A,B,C,D,E,F,G) = 7+ lcstable(H,I,C,D,J,K,L)+ case_7(M,K,L,N,B,C,D,O,H,I,E,F,G):3
     [K>=F,B>=I,B>=O,G>=0,F>=1,E>=3,I>=0,H>=1,O>=0,D>=0,C>=2,L>=0,E=J+1,H+1=N,E=M+1,H+1=A] 
* CE 87: lcstable(A,B,C,D,E,F,G) = 7+ lcstable(H,I,C,D,J,K,L)+ case_7(M,K,L,N,B,C,D,O,H,I,E,P,G):4
     [B>=I,B>=O,G>=0,E>=3,I>=0,H>=1,O>=0,D>=0,C>=2,L>=0,K>=1,E=J+1,H+1=N,E=M+1,H+1=A,P=1,F=1] 
* CE 88: lcstable(A,B,C,D,E,F,G) = 7+ lcstable(H,I,C,D,J,K,L)+ case_7(M,K,L,N,B,C,D,O,H,I,E,P,G):5
     [B>=I,D>=O+1,B>=O,G>=0,E>=3,I>=0,H>=1,O>=0,C>=3,L>=0,K>=2,E=J+1,H+1=N,E=M+1,H+1=A,P=2,F=2] 
* CE 89: lcstable(A,B,C,D,E,F,G) = 7+ lcstable(H,I,C,D,J,K,L)+ case_7(M,K,L,N,B,C,D,O,H,I,E,P,G):6
     [B>=I,D>=O,B>=O,G>=1,E>=3,I>=0,H>=1,O>=0,C>=3,L>=0,K>=2,E=J+1,H+1=N,E=M+1,H+1=A,P=2,F=2] 
* CE 90: lcstable(A,B,C,D,E,C,F) = 7+ lcstable(G,H,C,D,I,J,K)+ case_7(L,J,K,M,B,C,D,N,G,H,E,C,F):7
     [J>=C,B>=H,D>=N+1,B>=N,F>=0,C>=3,E>=3,H>=0,G>=1,N>=0,K>=0,E=I+1,G+1=M,E=L+1,G+1=A] 
* CE 91: lcstable(A,B,C,D,E,C,F) = 7+ lcstable(G,H,C,D,I,J,K)+ case_7(L,J,K,M,B,C,D,N,G,H,E,C,F):8
     [J>=C,B>=H,D>=N,B>=N,F>=1,C>=3,E>=3,H>=0,G>=1,N>=0,K>=0,E=I+1,G+1=M,E=L+1,G+1=A] 

### Cost equations --> "Loop" of lcstable/7 
* CEs [90] --> Loop 58 
* CEs [91] --> Loop 59 
* CEs [88] --> Loop 60 
* CEs [89] --> Loop 61 
* CEs [86,87] --> Loop 62 
* CEs [84] --> Loop 63 
* CEs [85] --> Loop 64 
* CEs [83] --> Loop 65 
* CEs [82] --> Loop 66 

#### Loops of lcstable/7 
* Loop 58: lcstable(A,B,C,D,E,C,F)->  lcstable(A',B',C,D,C',D',E')
                  [B>=B',D'>=C,E'>=0,B'>=0,F>=0,E>=3,D>=1,C>=3,A>=2,E=C'+1,A=A'+1] 
* Loop 59: lcstable(A,B,C,D,E,C,F)->  lcstable(A',B',C,D,C',D',E')
                  [B>=B',D'>=C,E'>=0,B'>=0,F>=1,E>=3,D>=0,C>=3,A>=2,E=C'+1,A=A'+1] 
* Loop 60: lcstable(A,B,C,D,E,F,G)->  lcstable(A',B',C,D,C',D',E')
                  [B>=B',E'>=0,D'>=2,B'>=0,G>=0,E>=3,D>=1,C>=3,A>=2,E=C'+1,A=A'+1,F=2] 
* Loop 61: lcstable(A,B,C,D,E,F,G)->  lcstable(A',B',C,D,C',D',E')
                  [B>=B',E'>=0,D'>=2,B'>=0,G>=1,E>=3,D>=0,C>=3,A>=2,E=C'+1,A=A'+1,F=2] 
* Loop 62: lcstable(A,B,C,D,E,F,G)->  lcstable(A',B',C,D,C',D',E')
                  [B>=B',D'>=F,E'>=0,B'>=0,G>=0,F>=1,E>=3,D>=0,C>=2,A>=2,E=C'+1,A=A'+1] 
* Loop 63: lcstable(A,B,C,D,E,F,G)->  lcstable(A',B',C,D,C',D',E')
                  [B>=B',E'>=0,B'>=0,G>=0,D>=0,C>=0,A>=2,A=A'+1,D'=0,C'=1,F=0,E=1] 
* Loop 64: lcstable(A,B,C,D,E,F,G)->  lcstable(A',B',C',D,D',E',F')
                  [B>=B',E'>=F,F'>=0,B'>=0,G>=0,F>=1,E>=3,D>=0,A>=2,E=D'+1,A=A'+1,C'=1,C=1] 
* Loop 65: lcstable(A,B,C,D,E,C,F) [F>=0,D>=0,C>=2,B>=0,E=2,A=1] 
* Loop 66: lcstable(A,B,C,D,E,F,G) [G>=0,D>=0,B>=0,F=1,E=2,C=1,A=1] 

### Ranking functions of CR lcstable(A,B,C,D,E,F,G) 
* RF of phase [58,59,60,61,62]: [A-1]
* RF of phase [63]: [A-1]
* RF of phase [64]: [A-1]

#### Partial ranking functions of CR lcstable(A,B,C,D,E,F,G) 
* Partial RF of phase [58,59,60,61,62]:
  - RF of loop [58:1,59:1,60:1,61:1,62:1]:
    A-1
* Partial RF of phase [63]:
  - RF of loop [63:1]:
    A-1
* Partial RF of phase [64]:
  - RF of loop [64:1]:
    A-1

Discarded unfeasible chain [[64]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [[63]](Non-terminating chain proved terminating)
Discarded unfeasible chain [[58,59,60,61,62]](Non-terminating chain proved terminating)

### Resulting Chains:lcstable(A,B,C,D,E,F,G) 
* [[64],66]
* [[58,59,60,61,62],65]
* [66]
* [65]


### Merging Chains  lcstable/7 into  External patterns of execution 
* [[66]] --> 1 
* [[65]] --> 2 
* [[66,[64]]] --> 3 
* [[65,[58,59,60,61,62]]] --> 4 


### Specialization of cost equations lcs/5 
* CE 8 is refined into CE [92,93,94] 


#### Refined cost equations lcs/5 
* CE 92: lcs(A,B,C,D,E) = 4+ lcstable(F,B,G,D,H,I,J):1+ case_8(K,L,J,M,B,N,D,O):2
     [J>=B,D>=0,B>=0,O=0,N=1,M=1,L=1,K=2,I=1,H=2,G=1,F=1,E=0,C=1,A=1] 
* CE 93: lcs(A,B,C,D,E) = 4+ lcstable(F,B,C,D,G,C,H):2+ case_8(I,C,H,J,B,C,D,K):2
     [H>=B,D>=0,B>=0,C>=2,K=0,J=1,I=2,G=2,F=1,E=0,A=1] 
* CE 94: lcs(A,B,C,D,E) = 4+ lcstable(F,B,C,D,G,H,I):4+ case_8(G,H,I,J,B,C,D,E):3
     [B>=E,I>=B,C>=H,H+1>=G,E>=0,D>=0,G>=3,G=J+1,G=F+1,G=A+1] 

### Cost equations --> "Loop" of lcs/5 
* CEs [94] --> Loop 67 
* CEs [93] --> Loop 68 
* CEs [92] --> Loop 69 

#### Loops of lcs/5 
* Loop 67: lcs(A,B,C,D,E) [B>=E,C>=A,E>=0,D>=0,A>=2] 
* Loop 68: lcs(A,B,C,D,E) [D>=0,C>=2,B>=0,E=0,A=1] 
* Loop 69: lcs(A,B,C,D,E) [D>=0,B>=0,E=0,C=1,A=1] 

### Ranking functions of CR lcs(A,B,C,D,E) 

#### Partial ranking functions of CR lcs(A,B,C,D,E) 


### Resulting Chains:lcs(A,B,C,D,E) 
* [69]
* [68]
* [67]


### Merging Chains  lcs/5 into  External patterns of execution 
* [[69]] --> 1 
* [[68]] --> 2 
* [[67]] --> 3 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 23 

#### Computing cost of phase [23] 

#### Simplifying cost structure of CE 24 

#### Cost of loops [23] 

 * loop 23:firstline(A,B,C,D) -> [firstline(A',B',C',D')] 
6
##### Pending set firstline(A,B,C,D)
* Psum in Loop 23: [it(23)=<1]

###### Computing sum for it(23)=<1  in Loop 23 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(23)=<A-1,it(23)=<A-1,it(23)=<A-A',it(23)=<A-A'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [23] 

#### Simplifying cost structure of phase [23] 

#### Cost of phase [23]:firstline(A,B,C,D) -> [firstline(A',B',C',D')] 
6*it(23)+0
  Such that:it(23) =< A
it(23) =< A-A'

#### Simplifying cost structure of chain [[23],24] 

#### Cost of chains of firstline(A,B,C,D):
* Chain [[23],24]: 6*it(23)+3
  Such that:it(23) =< C

  with precondition: [A=C,A>=2,B>=0,D>=0] 

* Chain [24]: 3
  with precondition: [A=1,C=1,B>=0,D>=0] 


#### Simplifying cost structure of CE 26 

#### Simplifying cost structure of CE 25 

#### Cost of chains of case_9(A,B,C,D,E,F,G,H,I,J):
* Chain [26]: 2
  with precondition: [D=1,H=1,J=0,I=E,A>=2,B>=1,F>=0,G>=0,I>=0,C>=I] 

* Chain [25]: 2
  with precondition: [H=D,I=E,A>=2,F>=0,G>=0,H>=2,J>=0,B>=H,C>=I,I>=J] 


#### Simplifying cost structure of CE 29 

#### Simplifying cost structure of CE 27 

#### Simplifying cost structure of CE 28 

#### Cost of chains of case_8(A,B,C,D,E,F,G,H):
* Chain [29]: 2
  with precondition: [A=1,B=0,H=0,C>=0,D>=0,E>=0,F>=0,G>=0] 

* Chain [28]: 5
  with precondition: [D=1,H=0,A>=2,B>=1,E>=0,F>=0,G>=0,C>=E] 

* Chain [27]: 5
  with precondition: [A>=2,D>=2,F>=0,G>=0,H>=0,B>=D,C>=E,E>=H] 


#### Simplifying cost structure of CE 31 

#### Simplifying cost structure of CE 30 

#### Cost of chains of maxNorm(A,B,C):
* Chain [31]: 0
  with precondition: [A=C,B>=0,A>=B+1] 

* Chain [30]: 0
  with precondition: [B=C,A>=1,B>=A] 


#### Simplifying cost structure of CE 33 

#### Simplifying cost structure of CE 32 

#### Cost of chains of case_1(A,B,C):
* Chain [33]: 1
  with precondition: [A=C,B>=0,A>=B+1] 

* Chain [32]: 1
  with precondition: [B=C,A>=0,B>=A] 


#### Simplifying cost structure of CE 36 

#### Simplifying cost structure of CE 35 

#### Simplifying cost structure of CE 34 

#### Cost of chains of case_5(A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P):
* Chain [36]: 3
  with precondition: [N+1=F,K+1=H,E=J,A+1=P,A>=0,B>=0,C>=1,D>=0,E>=0,K>=1,L>=0,M>=0,N>=1,O>=0,I>=E,I>=L,G>=M,G>=O] 

* Chain [35]: 4
  with precondition: [N+1=F,K+1=H,B=P,A>=0,C>=1,D>=0,E>=0,K>=1,L>=0,M>=0,N>=1,O>=0,J>=E+1,I>=J,I>=L,B>=M,G>=M,G>=O] 

* Chain [34]: 4
  with precondition: [N+1=F,K+1=H,M=P,A>=0,B>=0,C>=1,D>=0,E>=0,K>=1,L>=0,N>=1,O>=0,M>=B+1,J>=E+1,I>=J,I>=L,G>=M,G>=O] 


#### Simplifying cost structure of CE 38 

#### Simplifying cost structure of CE 37 

#### Cost of chains of case_2(A,B,C):
* Chain [38]: 3
  with precondition: [A=1,C=0,B>=0] 

* Chain [37]: 1
  with precondition: [A>=2,C>=0,B>=C] 


#### Simplifying cost structure of CE 52 

#### Simplifying cost structure of CE 39 

#### Simplifying cost structure of CE 41 

#### Simplifying cost structure of chain [48,40] 

#### Computing cost of phase [41,42] 

#### Simplifying cost structure of CE 49 

#### Simplifying cost structure of CE 48 

#### Simplifying cost structure of CE 50 

#### Cost of loops [41,42] 

 * loop 41:newline(A,B,C,D,E,F,G) -> [newline(A',B',C',D',E',F',G')] 
27
 * loop 42:newline(A,B,C,D,E,F,G) -> [newline(A',B',C',D',E',F',G')] 
27
##### Pending set newline(A,B,C,D,E,F,G)
* Psum in Loop 41: [it(41)=<1]
* Psum in Loop 42: [it(42)=<1]

###### Computing sum for it(41)=<1  in Loop 41 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
       - Loop 42 is collaborative and bounds [it(42)] 
     - head Candidate: B-2 
       - Loop 42 is collaborative and bounds [it(42)] 
     - head Candidate: B-2 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - Loop 42 is collaborative and bounds [it(42)] 
     - tail Candidate: B-2 
       - Loop 42 is collaborative and bounds [it(42)] 
     - tail Candidate: B-2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(41)+it(42)=<D-1,it(41)+it(42)=<B-2,it(41)+it(42)=<B-2,it(41)+it(42)=<D-1,it(41)+it(42)=<D-D',it(41)+it(42)=<B-B',it(41)+it(42)=<B-B',it(41)+it(42)=<D-D'] 

##### Pending set A
* Psum in Loop 42: [it(42)=<1]

###### Computing sum for it(42)=<1  in Loop 42 
   - Applying inductive sum strategy 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-2 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: B-2 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: B-2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: D-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(41)+it(42)=<D-1,it(41)+it(42)=<B-2,it(41)+it(42)=<B-2,it(41)+it(42)=<D-1,it(41)+it(42)=<D-D',it(41)+it(42)=<B-B',it(41)+it(42)=<B-B',it(41)+it(42)=<D-D'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [41,42] 

#### Simplifying cost structure of phase [41,42] 
 * Joined equivalent variables [it(41),it(42)] into it(41)

#### Cost of phase [41,42]:newline(A,B,C,D,E,F,G) -> [newline(A',B',C',D',E',F',G')] 
54*it(41)+0
  Such that:aux(1) =< B
aux(2) =< B-B'
aux(3) =< D
aux(4) =< D-D'
it(41) =< aux(1)
it(41) =< aux(2)
it(41) =< aux(3)
it(41) =< aux(4)

#### Simplifying cost structure of chain [[41,42],48,40] 
 * Joined equivalent variables [aux(5),aux(1),aux(2),aux(4)] into aux(5)

#### Simplifying cost structure of CE 51 

#### Simplifying cost structure of chain [48,39] 

#### Found solution for phase  [41,42] in the cache 

#### Cost of phase [41,42]:newline(A,B,C,D,E,F,G) -> [newline(A',B',C',D',E',F',G')] 
54*it(41)+0
  Such that:aux(1) =< B
aux(2) =< B-B'
aux(3) =< D
aux(4) =< D-D'
it(41) =< aux(1)
it(41) =< aux(2)
it(41) =< aux(3)
it(41) =< aux(4)

#### Simplifying cost structure of chain [[41,42],48,39] 
 * Joined equivalent variables [aux(6),aux(1),aux(2),aux(3),aux(4)] into aux(6)

#### Simplifying cost structure of CE 40 

#### Simplifying cost structure of chain [47,40] 

#### Found solution for phase  [41,42] in the cache 

#### Cost of phase [41,42]:newline(A,B,C,D,E,F,G) -> [newline(A',B',C',D',E',F',G')] 
54*it(41)+0
  Such that:aux(1) =< B
aux(2) =< B-B'
aux(3) =< D
aux(4) =< D-D'
it(41) =< aux(1)
it(41) =< aux(2)
it(41) =< aux(3)
it(41) =< aux(4)

#### Simplifying cost structure of chain [[41,42],47,40] 
 * Joined equivalent variables [aux(7),aux(1),aux(2),aux(4)] into aux(7)

#### Simplifying cost structure of chain [47,39] 

#### Found solution for phase  [41,42] in the cache 

#### Cost of phase [41,42]:newline(A,B,C,D,E,F,G) -> [newline(A',B',C',D',E',F',G')] 
54*it(41)+0
  Such that:aux(1) =< B
aux(2) =< B-B'
aux(3) =< D
aux(4) =< D-D'
it(41) =< aux(1)
it(41) =< aux(2)
it(41) =< aux(3)
it(41) =< aux(4)

#### Simplifying cost structure of chain [[41,42],47,39] 
 * Joined equivalent variables [aux(8),aux(1),aux(2),aux(3),aux(4)] into aux(8)

#### Simplifying cost structure of CE 42 

#### Simplifying cost structure of CE 44 

#### Simplifying cost structure of chain [44,39] 

#### Found solution for phase  [41,42] in the cache 

#### Cost of phase [41,42]:newline(A,B,C,D,E,F,G) -> [newline(A',B',C',D',E',F',G')] 
54*it(41)+0
  Such that:aux(1) =< B
aux(2) =< B-B'
aux(3) =< D
aux(4) =< D-D'
it(41) =< aux(1)
it(41) =< aux(2)
it(41) =< aux(3)
it(41) =< aux(4)

#### Simplifying cost structure of chain [[41,42],44,39] 
 * Joined equivalent variables [aux(9),aux(2),aux(3),aux(4)] into aux(9)

#### Simplifying cost structure of CE 43 

#### Simplifying cost structure of chain [43,39] 

#### Found solution for phase  [41,42] in the cache 

#### Cost of phase [41,42]:newline(A,B,C,D,E,F,G) -> [newline(A',B',C',D',E',F',G')] 
54*it(41)+0
  Such that:aux(1) =< B
aux(2) =< B-B'
aux(3) =< D
aux(4) =< D-D'
it(41) =< aux(1)
it(41) =< aux(2)
it(41) =< aux(3)
it(41) =< aux(4)

#### Simplifying cost structure of chain [[41,42],43,39] 
 * Joined equivalent variables [aux(10),aux(2),aux(3),aux(4)] into aux(10)

#### Cost of chains of newline(A,B,C,D,E,F,G):
* Chain [[41,42],48,40]: 54*it(41)+37
  Such that:aux(3) =< D
aux(5) =< B
it(41) =< aux(5)
it(41) =< aux(3)

  with precondition: [B=F,A>=0,B>=3,C>=0,G>=1,E>=A,D>=B+1] 

* Chain [[41,42],48,39]: 54*it(41)+34
  Such that:aux(6) =< D
it(41) =< aux(6)

  with precondition: [B=D,B=F,A>=0,B>=3,C>=0,G>=1,E>=A] 

* Chain [[41,42],47,40]: 54*it(41)+37
  Such that:aux(3) =< D
aux(7) =< B
it(41) =< aux(7)
it(41) =< aux(3)

  with precondition: [B=F,A>=0,B>=3,C>=0,G>=0,E>=A+1,D>=B+1] 

* Chain [[41,42],47,39]: 54*it(41)+34
  Such that:aux(8) =< D
it(41) =< aux(8)

  with precondition: [B=D,B=F,A>=0,B>=3,C>=0,G>=0,E>=A+1] 

* Chain [[41,42],44,39]: 54*it(41)+32
  Such that:aux(1) =< B
aux(9) =< D
it(41) =< aux(1)
it(41) =< aux(9)

  with precondition: [D=F,A>=0,C>=0,D>=3,G>=1,E>=A,B>=D+1] 

* Chain [[41,42],43,39]: 54*it(41)+32
  Such that:aux(1) =< B
aux(10) =< D
it(41) =< aux(1)
it(41) =< aux(10)

  with precondition: [D=F,A>=0,C>=0,D>=3,G>=0,E>=A+1,B>=D+1] 

* Chain [48,40]: 37
  with precondition: [B=2,F=2,A>=0,C>=0,D>=3,G>=1,E>=A] 

* Chain [48,39]: 34
  with precondition: [B=2,D=2,F=2,A>=0,C>=0,G>=1,E>=A] 

* Chain [47,40]: 37
  with precondition: [B=2,F=2,A>=0,C>=0,D>=3,G>=0,E>=A+1] 

* Chain [47,39]: 34
  with precondition: [B=2,D=2,F=2,A>=0,C>=0,G>=0,E>=A+1] 

* Chain [44,39]: 32
  with precondition: [D=2,F=2,A>=0,B>=3,C>=0,G>=1,E>=A] 

* Chain [43,39]: 32
  with precondition: [D=2,F=2,A>=0,B>=3,C>=0,G>=0,E>=A+1] 

* Chain [40]: 6
  with precondition: [B=1,F=1,A>=0,C>=0,D>=2,E>=0,G>=0] 

* Chain [39]: 3
  with precondition: [D=1,F=1,A>=0,B>=0,C>=0,E>=0,G>=0] 


#### Simplifying cost structure of CE 81 

#### Simplifying cost structure of CE 63 

#### Simplifying cost structure of CE 64 

#### Simplifying cost structure of CE 54 

#### Simplifying cost structure of CE 55 

#### Simplifying cost structure of CE 56 

#### Simplifying cost structure of CE 60 

#### Simplifying cost structure of CE 62 

#### Simplifying cost structure of CE 65 

#### Simplifying cost structure of CE 66 
 * Renamed intermediate variables: 
[ (eq(70,1),aux(8))>>s(1), (eq(70,1),it(41))>>s(2)]

#### Simplifying cost structure of CE 70 
 * Renamed intermediate variables: 
[ (eq(72,1),aux(6))>>s(3), (eq(72,1),it(41))>>s(4)]

#### Simplifying cost structure of CE 72 
 * Renamed intermediate variables: 
[ (eq(73,1),aux(3))>>s(5), (eq(73,1),aux(7))>>s(6), (eq(73,1),it(41))>>s(7)]

#### Simplifying cost structure of CE 73 
 * Joined equivalent variables [aux(11),s(5)] into aux(11)
 * Renamed intermediate variables: 
[ (eq(74,1),aux(3))>>s(8), (eq(74,1),aux(7))>>s(9), (eq(74,1),it(41))>>s(10)]

#### Simplifying cost structure of CE 74 
 * Joined equivalent variables [aux(12),s(8)] into aux(12)
 * Renamed intermediate variables: 
[ (eq(75,1),aux(3))>>s(11), (eq(75,1),aux(5))>>s(12), (eq(75,1),it(41))>>s(13)]

#### Simplifying cost structure of CE 75 
 * Joined equivalent variables [aux(13),s(11)] into aux(13)
 * Renamed intermediate variables: 
[ (eq(76,1),aux(3))>>s(14), (eq(76,1),aux(5))>>s(15), (eq(76,1),it(41))>>s(16)]

#### Simplifying cost structure of CE 76 
 * Joined equivalent variables [aux(14),s(14)] into aux(14)
 * Renamed intermediate variables: 
[ (eq(77,1),aux(1))>>s(17), (eq(77,1),aux(10))>>s(18), (eq(77,1),it(41))>>s(19)]

#### Simplifying cost structure of CE 77 
 * Renamed intermediate variables: 
[ (eq(78,1),aux(1))>>s(20), (eq(78,1),aux(10))>>s(21), (eq(78,1),it(41))>>s(22)]

#### Simplifying cost structure of CE 78 
 * Renamed intermediate variables: 
[ (eq(79,1),aux(1))>>s(23), (eq(79,1),aux(9))>>s(24), (eq(79,1),it(41))>>s(25)]

#### Simplifying cost structure of CE 79 
 * Renamed intermediate variables: 
[ (eq(80,1),aux(1))>>s(26), (eq(80,1),aux(9))>>s(27), (eq(80,1),it(41))>>s(28)]

#### Simplifying cost structure of CE 80 
 * Joined equivalent variables [aux(15),s(17),s(20),s(23),s(26)] into aux(15)
 * Joined equivalent variables [aux(16),aux(11),aux(12),aux(13),aux(14),s(1),s(3),s(18),s(21),s(24),s(27)] into aux(16)
 * Joined equivalent variables [s(19),s(22),s(25),s(28)] into s(19)
 * Joined equivalent variables [s(2),s(4)] into s(2)
 * Joined equivalent variables [s(6),s(9),s(12),s(15)] into s(6)
 * Joined equivalent variables [s(7),s(10),s(13),s(16)] into s(7)

#### Simplifying cost structure of CE 57 

#### Simplifying cost structure of CE 58 

#### Simplifying cost structure of CE 67 

#### Simplifying cost structure of CE 68 

#### Simplifying cost structure of CE 53 

#### Simplifying cost structure of CE 59 

#### Simplifying cost structure of CE 61 
 * Renamed intermediate variables: 
[ (eq(69,1),aux(8))>>s(29), (eq(69,1),it(41))>>s(30)]

#### Simplifying cost structure of CE 69 
 * Renamed intermediate variables: 
[ (eq(71,1),aux(6))>>s(31), (eq(71,1),it(41))>>s(32)]

#### Simplifying cost structure of CE 71 
 * Renamed intermediate variables: 
[ (ch([55]),aux(15))>>s(33), (ch([55]),aux(16))>>s(34), (ch([55]),s(6))>>s(35), (ch([55]),s(7))>>s(36), (ch([55]),s(19))>>s(37), (ch([55]),s(2))>>s(38)]

#### Cost of chains of case_7(A,B,C,D,E,F,G,H,I,J,K,L,M):
* Chain [57]: 2
  with precondition: [A=1,B=0,K=1,L=0,I+1=D,C>=0,F>=0,G>=0,H>=0,I>=1,J>=0,M>=0,E>=H,E>=J] 

* Chain [56]: 8
  with precondition: [F=1,I+1=D,A+1=K,A>=2,C>=0,G>=0,H>=0,I>=1,J>=0,L>=1,M>=0,E>=H,E>=J,B>=L] 

* Chain [55]: 108*s(2)+216*s(7)+216*s(19)+42
  Such that:aux(15) =< B
aux(16) =< F
s(6) =< aux(15)
s(6) =< aux(16)
s(7) =< s(6)
s(7) =< aux(16)
s(19) =< aux(15)
s(19) =< aux(16)
s(2) =< aux(16)

  with precondition: [I+1=D,A+1=K,A>=2,C>=0,F>=2,G>=0,H>=0,I>=1,J>=0,L>=1,M>=0,E>=H,E>=J,B>=L] 

* Chain [54]: 39
  with precondition: [F=2,I+1=D,A+1=K,A>=2,C>=0,H>=0,I>=1,J>=0,L>=2,M>=1,E>=H,G>=H,E>=J,B>=L] 

* Chain [53]: 11
  with precondition: [L=1,I+1=D,A+1=K,A>=2,B>=1,C>=0,F>=2,G>=0,H>=0,I>=1,J>=0,M>=0,E>=H,E>=J] 

* Chain [52]: 42
  with precondition: [L=2,I+1=D,A+1=K,A>=2,B>=2,C>=0,F>=3,H>=0,I>=1,J>=0,M>=0,E>=H,G>=H+1,E>=J] 

* Chain [51]: 42
  with precondition: [L=2,I+1=D,A+1=K,A>=2,B>=2,C>=0,F>=3,H>=0,I>=1,J>=0,M>=1,E>=H,G>=H,E>=J] 

* Chain [50]: 54*s(30)+39
  Such that:s(29) =< F
s(30) =< s(29)

  with precondition: [I+1=D,A+1=K,F=L,A>=2,C>=0,F>=3,H>=0,I>=1,J>=0,M>=0,B>=F,E>=H,G>=H+1,E>=J] 

* Chain [49]: 54*s(32)+39
  Such that:s(31) =< F
s(32) =< s(31)

  with precondition: [I+1=D,A+1=K,F=L,A>=2,C>=0,F>=3,H>=0,I>=1,J>=0,M>=1,B>=F,E>=H,G>=H,E>=J] 


#### Simplifying cost structure of CE 82 

#### Computing cost of phase [64] 

#### Simplifying cost structure of CE 85 

#### Cost of loops [64] 

 * loop 64:lcstable(A,B,C,D,E,F,G) -> [lcstable(A',B',C',D',E',F',G')] 
15
##### Pending set lcstable(A,B,C,D,E,F,G)
* Psum in Loop 64: [it(64)=<1]

###### Computing sum for it(64)=<1  in Loop 64 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(64)=<A-1,it(64)=<A-1,it(64)=<A-A',it(64)=<A-A'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [64] 

#### Simplifying cost structure of phase [64] 

#### Cost of phase [64]:lcstable(A,B,C,D,E,F,G) -> [lcstable(A',B',C',D',E',F',G')] 
15*it(64)+0
  Such that:it(64) =< A
it(64) =< A-A'

#### Simplifying cost structure of chain [[64],66] 
 * Renamed intermediate variables: 
[ (eq(83,1),it(23))>>s(39)]

#### Simplifying cost structure of CE 83 

#### Computing cost of phase [58,59,60,61,62] 
 * Renamed intermediate variables: 
[ (eq(90,1),s(29))>>s(40), (eq(90,1),s(30))>>s(41)]

#### Simplifying cost structure of CE 90 
 * Renamed intermediate variables: 
[ (it(58),s(40))>>s(42), (it(58),s(41))>>s(43)]
 * Renamed intermediate variables: 
[ (eq(91,1),s(31))>>s(44), (eq(91,1),s(32))>>s(45)]

#### Simplifying cost structure of CE 91 
 * Renamed intermediate variables: 
[ (it(59),s(44))>>s(46), (it(59),s(45))>>s(47)]

#### Simplifying cost structure of CE 88 

#### Simplifying cost structure of CE 89 
 * Renamed intermediate variables: 
[ (eq(86,1),s(33))>>s(48), (eq(86,1),s(34))>>s(49), (eq(86,1),s(35))>>s(50), (eq(86,1),s(36))>>s(51), (eq(86,1),s(37))>>s(52), (eq(86,1),s(38))>>s(53)]

#### Simplifying cost structure of CE 86 
 * Joined equivalent variables [aux(17),s(48),s(49)] into aux(17)
 * Joined equivalent variables [aux(17),s(50)] into aux(17)
 * Joined equivalent variables [s(52),s(53)] into s(52)
 * Joined equivalent variables [s(51),s(52)] into s(51)

#### Simplifying cost structure of CE 87 
 * Renamed intermediate variables: 
[ (it(62),aux(17))>>s(54), (it(62),s(51))>>s(55)]

#### Cost of loops [58,59,60,61,62] 

 * loop 58:lcstable(A,B,C,D,E,F,G) -> [lcstable(A',B',C',D',E',F',G')] 
54*s(43)+46
  Such that:s(42) =< C'
s(43) =< s(42)

 * loop 59:lcstable(A,B,C,D,E,F,G) -> [lcstable(A',B',C',D',E',F',G')] 
54*s(47)+46
  Such that:s(46) =< C'
s(47) =< s(46)

 * loop 60:lcstable(A,B,C,D,E,F,G) -> [lcstable(A',B',C',D',E',F',G')] 
49
 * loop 61:lcstable(A,B,C,D,E,F,G) -> [lcstable(A',B',C',D',E',F',G')] 
49
 * loop 62:lcstable(A,B,C,D,E,F,G) -> [lcstable(A',B',C',D',E',F',G')] 
540*s(55)+49
  Such that:s(54) =< C'
s(55) =< s(54)

##### Pending set lcstable(A,B,C,D,E,F,G)
* Psum in Loop 58: [it(58)=<1,s(57)=<C']
* Psum in Loop 59: [it(59)=<1,s(59)=<C']
* Psum in Loop 60: [it(60)=<1]
* Psum in Loop 61: [it(61)=<1]
* Psum in Loop 62: [it(62)=<1,s(61)=<C']

###### Computing sum for it(58)=<1  in Loop 58 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - Loop 59 is collaborative and bounds [it(59)] 
       - Loop 60 is collaborative and bounds [it(60)] 
       - Loop 61 is collaborative and bounds [it(61)] 
       - Loop 62 is collaborative and bounds [it(62)] 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - Loop 59 is collaborative and bounds [it(59)] 
       - Loop 60 is collaborative and bounds [it(60)] 
       - Loop 61 is collaborative and bounds [it(61)] 
       - Loop 62 is collaborative and bounds [it(62)] 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(58)+it(59)+it(60)+it(61)+it(62)=<A-1,it(58)+it(59)+it(60)+it(61)+it(62)=<A-1,it(58)+it(59)+it(60)+it(61)+it(62)=<A-A',it(58)+it(59)+it(60)+it(61)+it(62)=<A-A'] 

##### Pending set A
* Psum in Loop 58: [s(57)=<C']
* Psum in Loop 59: [it(59)=<1,s(59)=<C']
* Psum in Loop 60: [it(60)=<1]
* Psum in Loop 61: [it(61)=<1]
* Psum in Loop 62: [it(62)=<1,s(61)=<C']

###### Computing sum for s(57)=<C'  in Loop 58 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(18)=<C] 
 * Adding constraints: [s(57)=<it(58)*aux(18)] 

##### Pending set lcstable(A,B,C,D,E,F,G)
* Pmax/min: [aux(18)=<C]
* Psum in Loop 59: [it(59)=<1,s(59)=<C']
* Psum in Loop 60: [it(60)=<1]
* Psum in Loop 61: [it(61)=<1]
* Psum in Loop 62: [it(62)=<1,s(61)=<C']

###### Computing max_min for aux(18)=<C  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(18)=<C] 

##### Pending set lcstable(A,B,C,D,E,F,G)
* Psum in Loop 59: [it(59)=<1,s(59)=<C']
* Psum in Loop 60: [it(60)=<1]
* Psum in Loop 61: [it(61)=<1]
* Psum in Loop 62: [it(62)=<1,s(61)=<C']

###### Computing sum for it(59)=<1  in Loop 59 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(58)+it(59)+it(60)+it(61)+it(62)=<A-1,it(58)+it(59)+it(60)+it(61)+it(62)=<A-1,it(58)+it(59)+it(60)+it(61)+it(62)=<A-A',it(58)+it(59)+it(60)+it(61)+it(62)=<A-A'] 

##### Pending set lcstable(A,B,C,D,E,F,G)
* Psum in Loop 59: [s(59)=<C']
* Psum in Loop 60: [it(60)=<1]
* Psum in Loop 61: [it(61)=<1]
* Psum in Loop 62: [it(62)=<1,s(61)=<C']

###### Computing sum for s(59)=<C'  in Loop 59 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(19)=<C] 
 * Adding constraints: [s(59)=<it(59)*aux(19)] 

##### Pending set lcstable(A,B,C,D,E,F,G)
* Pmax/min: [aux(19)=<C]
* Psum in Loop 60: [it(60)=<1]
* Psum in Loop 61: [it(61)=<1]
* Psum in Loop 62: [it(62)=<1,s(61)=<C']

###### Computing max_min for aux(19)=<C  
   - Found a solution using cacheing 
 * Adding constraints:[aux(19)=<aux(18)] 

##### Pending set lcstable(A,B,C,D,E,F,G)
* Psum in Loop 60: [it(60)=<1]
* Psum in Loop 61: [it(61)=<1]
* Psum in Loop 62: [it(62)=<1,s(61)=<C']

###### Computing sum for it(60)=<1  in Loop 60 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(58)+it(59)+it(60)+it(61)+it(62)=<A-1,it(58)+it(59)+it(60)+it(61)+it(62)=<A-1,it(58)+it(59)+it(60)+it(61)+it(62)=<A-A',it(58)+it(59)+it(60)+it(61)+it(62)=<A-A'] 

##### Pending set lcstable(A,B,C,D,E,F,G)
* Psum in Loop 61: [it(61)=<1]
* Psum in Loop 62: [it(62)=<1,s(61)=<C']

###### Computing sum for it(61)=<1  in Loop 61 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(58)+it(59)+it(60)+it(61)+it(62)=<A-1,it(58)+it(59)+it(60)+it(61)+it(62)=<A-1,it(58)+it(59)+it(60)+it(61)+it(62)=<A-A',it(58)+it(59)+it(60)+it(61)+it(62)=<A-A'] 

##### Pending set lcstable(A,B,C,D,E,F,G)
* Psum in Loop 62: [it(62)=<1,s(61)=<C']

###### Computing sum for it(62)=<1  in Loop 62 
   - Applying inductive sum strategy 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: A-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(58)+it(59)+it(60)+it(61)+it(62)=<A-1,it(58)+it(59)+it(60)+it(61)+it(62)=<A-1,it(58)+it(59)+it(60)+it(61)+it(62)=<A-A',it(58)+it(59)+it(60)+it(61)+it(62)=<A-A'] 

##### Pending set lcstable(A,B,C,D,E,F,G)
* Psum in Loop 62: [s(61)=<C']

###### Computing sum for s(61)=<C'  in Loop 62 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(20)=<C] 
 * Adding constraints: [s(61)=<it(62)*aux(20)] 

##### Pending set lcstable(A,B,C,D,E,F,G)
* Pmax/min: [aux(20)=<C]

###### Computing max_min for aux(20)=<C  
   - Found a solution using cacheing 
 * Adding constraints:[aux(20)=<aux(18)] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [58,59,60,61,62] 

#### Simplifying cost structure of phase [58,59,60,61,62] 
 * Joined equivalent variables [aux(19),aux(20)] into aux(19)
 * Joined equivalent variables [it(58),it(59),it(60),it(61),it(62)] into it(58)
 * Joined equivalent variables [s(59),s(61)] into s(59)
 * Joined equivalent variables [s(58),s(60)] into s(58)

#### Cost of phase [58,59,60,61,62]:lcstable(A,B,C,D,E,F,G) -> [lcstable(A',B',C',D',E',F',G')] 
239*it(58)+54*s(56)+594*s(58)+0
  Such that:aux(18) =< C
aux(21) =< A
aux(22) =< A-A'
it(58) =< aux(21)
it(58) =< aux(22)
aux(19) =< aux(18)
s(57) =< it(58)*aux(18)
s(59) =< it(58)*aux(19)
s(58) =< s(59)
s(56) =< s(57)

#### Simplifying cost structure of chain [[58,59,60,61,62],65] 
 * Joined equivalent variables [aux(23),aux(18)] into aux(23)
 * Joined equivalent variables [aux(24),aux(21),aux(22)] into aux(24)

#### Cost of chains of lcstable(A,B,C,D,E,F,G):
* Chain [[64],66]: 15*it(64)+8
  Such that:it(64) =< A

  with precondition: [C=1,F=1,A+1=E,A>=2,B>=0,D>=0,G>=0] 

* Chain [[58,59,60,61,62],65]: 239*it(58)+6*s(39)+54*s(56)+594*s(58)+8
  Such that:aux(23) =< C
aux(24) =< E
s(39) =< aux(23)
it(58) =< aux(24)
aux(19) =< aux(23)
s(57) =< it(58)*aux(23)
s(59) =< it(58)*aux(19)
s(58) =< s(59)
s(56) =< s(57)

  with precondition: [A+1=E,A>=2,B>=0,C>=2,D>=0,F>=1,G>=0,C>=F] 

* Chain [66]: 8
  with precondition: [A=1,C=1,E=2,F=1,B>=0,D>=0,G>=0] 

* Chain [65]: 6*s(39)+8
  Such that:s(39) =< C

  with precondition: [A=1,E=2,C=F,B>=0,C>=2,D>=0,G>=0] 


#### Simplifying cost structure of CE 92 
 * Renamed intermediate variables: 
[ (eq(93,1),s(39))>>s(62)]

#### Simplifying cost structure of CE 93 
 * Renamed intermediate variables: 
[ (eq(94,1),aux(23))>>s(63), (eq(94,1),aux(24))>>s(64), (eq(94,1),s(39))>>s(65), (eq(94,1),it(58))>>s(66), (eq(94,1),aux(19))>>s(67), (eq(94,1),s(57))>>s(68), (eq(94,1),s(59))>>s(69), (eq(94,1),s(58))>>s(70), (eq(94,1),s(56))>>s(71)]

#### Simplifying cost structure of CE 94 

#### Cost of chains of lcs(A,B,C,D,E):
* Chain [69]: 17
  with precondition: [A=1,C=1,E=0,B>=0,D>=0] 

* Chain [68]: 6*s(62)+17
  Such that:s(62) =< C

  with precondition: [A=1,E=0,B>=0,C>=2,D>=0] 

* Chain [67]: 6*s(65)+239*s(66)+594*s(70)+54*s(71)+17
  Such that:s(64) =< A+1
s(63) =< C
s(65) =< s(63)
s(66) =< s(64)
s(67) =< s(63)
s(68) =< s(66)*s(63)
s(69) =< s(66)*s(67)
s(70) =< s(69)
s(71) =< s(68)

  with precondition: [A>=2,D>=0,E>=0,C>=A,B>=E] 


Closed-form bounds of firstline(A,B,C,D): 
-------------------------------------
* Chain [[23],24] with precondition: [A=C,A>=2,B>=0,D>=0] 
    - Upper bound: 6*A+3 
    - Complexity: n 
* Chain [24] with precondition: [A=1,C=1,B>=0,D>=0] 
    - Upper bound: 3 
    - Complexity: constant 

### Maximum cost of firstline(A,B,C,D): 6*A+3 
Asymptotic class: n 

Closed-form bounds of newline(A,B,C,D,E,F,G): 
-------------------------------------
* Chain [[41,42],48,40] with precondition: [B=F,A>=0,B>=3,C>=0,G>=1,E>=A,D>=B+1] 
    - Upper bound: 54*B+37 
    - Complexity: n 
* Chain [[41,42],48,39] with precondition: [B=D,B=F,A>=0,B>=3,C>=0,G>=1,E>=A] 
    - Upper bound: 54*D+34 
    - Complexity: n 
* Chain [[41,42],47,40] with precondition: [B=F,A>=0,B>=3,C>=0,G>=0,E>=A+1,D>=B+1] 
    - Upper bound: 54*B+37 
    - Complexity: n 
* Chain [[41,42],47,39] with precondition: [B=D,B=F,A>=0,B>=3,C>=0,G>=0,E>=A+1] 
    - Upper bound: 54*D+34 
    - Complexity: n 
* Chain [[41,42],44,39] with precondition: [D=F,A>=0,C>=0,D>=3,G>=1,E>=A,B>=D+1] 
    - Upper bound: 54*B+32 
    - Complexity: n 
* Chain [[41,42],43,39] with precondition: [D=F,A>=0,C>=0,D>=3,G>=0,E>=A+1,B>=D+1] 
    - Upper bound: 54*B+32 
    - Complexity: n 
* Chain [48,40] with precondition: [B=2,F=2,A>=0,C>=0,D>=3,G>=1,E>=A] 
    - Upper bound: 37 
    - Complexity: constant 
* Chain [48,39] with precondition: [B=2,D=2,F=2,A>=0,C>=0,G>=1,E>=A] 
    - Upper bound: 34 
    - Complexity: constant 
* Chain [47,40] with precondition: [B=2,F=2,A>=0,C>=0,D>=3,G>=0,E>=A+1] 
    - Upper bound: 37 
    - Complexity: constant 
* Chain [47,39] with precondition: [B=2,D=2,F=2,A>=0,C>=0,G>=0,E>=A+1] 
    - Upper bound: 34 
    - Complexity: constant 
* Chain [44,39] with precondition: [D=2,F=2,A>=0,B>=3,C>=0,G>=1,E>=A] 
    - Upper bound: 32 
    - Complexity: constant 
* Chain [43,39] with precondition: [D=2,F=2,A>=0,B>=3,C>=0,G>=0,E>=A+1] 
    - Upper bound: 32 
    - Complexity: constant 
* Chain [40] with precondition: [B=1,F=1,A>=0,C>=0,D>=2,E>=0,G>=0] 
    - Upper bound: 6 
    - Complexity: constant 
* Chain [39] with precondition: [D=1,F=1,A>=0,B>=0,C>=0,E>=0,G>=0] 
    - Upper bound: 3 
    - Complexity: constant 

### Maximum cost of newline(A,B,C,D,E,F,G): max([54*D+31,54*B+34])+3 
Asymptotic class: n 

Closed-form bounds of lcstable(A,B,C,D,E,F,G): 
-------------------------------------
* Chain [[64],66] with precondition: [C=1,F=1,A+1=E,A>=2,B>=0,D>=0,G>=0] 
    - Upper bound: 15*A+8 
    - Complexity: n 
* Chain [[58,59,60,61,62],65] with precondition: [A+1=E,A>=2,B>=0,C>=2,D>=0,F>=1,G>=0,C>=F] 
    - Upper bound: 6*C+8+ (A+1)* (648*C)+ (239*A+239) 
    - Complexity: n^2 
* Chain [66] with precondition: [A=1,C=1,E=2,F=1,B>=0,D>=0,G>=0] 
    - Upper bound: 8 
    - Complexity: constant 
* Chain [65] with precondition: [A=1,E=2,C=F,B>=0,C>=2,D>=0,G>=0] 
    - Upper bound: 6*C+8 
    - Complexity: n 

### Maximum cost of lcstable(A,B,C,D,E,F,G): max([15*A,239*A+239+ (A+1)* (648*C)+6*C])+8 
Asymptotic class: n^2 

Closed-form bounds of lcs(A,B,C,D,E): 
-------------------------------------
* Chain [69] with precondition: [A=1,C=1,E=0,B>=0,D>=0] 
    - Upper bound: 17 
    - Complexity: constant 
* Chain [68] with precondition: [A=1,E=0,B>=0,C>=2,D>=0] 
    - Upper bound: 6*C+17 
    - Complexity: n 
* Chain [67] with precondition: [A>=2,D>=0,E>=0,C>=A,B>=E] 
    - Upper bound: 6*C+17+ (A+1)* (648*C)+ (239*A+239) 
    - Complexity: n^2 

### Maximum cost of lcs(A,B,C,D,E): 239*A+239+ (A+1)* (648*C)+6*C+17 
Asymptotic class: n^2 
* Total analysis performed in 3761 ms.


Cost relation system solved by CoFloCo in 3767 ms.

Method firstline terminates?: YES

 - l_1: size of l wrt. List<Rat>
 - l_2: size of l wrt. Rat
UB for firstline(l_1,l_2) = 6*l_1+3

Method newline terminates?: YES

 - y_1: size of y wrt. Rat
 - lastline_1: size of lastline wrt. List<Rat>
 - lastline_2: size of lastline wrt. Rat
 - l_1: size of l wrt. List<Rat>
 - l_2: size of l wrt. Rat
UB for newline(y_1,lastline_1,lastline_2,l_1,l_2) = max([54*l_1+31,54*lastline_1+34])+3

Method lcstable terminates?: YES

 - l1_1: size of l1 wrt. List<Rat>
 - l1_2: size of l1 wrt. Rat
 - l2_1: size of l2 wrt. List<Rat>
 - l2_2: size of l2 wrt. Rat
UB for lcstable(l1_1,l1_2,l2_1,l2_2) = max([15*l1_1,239*l1_1+239+ (l1_1+1)* (648*l2_1)+6*l2_1])+8

Method lcs terminates?: YES

 - l1_1: size of l1 wrt. List<Rat>
 - l1_2: size of l1 wrt. Rat
 - l2_1: size of l2 wrt. List<Rat>
 - l2_2: size of l2 wrt. Rat
UB for lcs(l1_1,l1_2,l2_1,l2_2) = 239*l1_1+239+ (l1_1+1)* (648*l2_1)+6*l2_1+17

module Tuples;

def List<A> appendL<A>(List<A> l1,List<A> l2) =
	case l1 {
	 Nil => l2;
	 Cons(x,xs) =>  Cons(x,appendL(xs, l2));
     };

def List<Pair<B,A>> attach<A,B>(B n,List<A> l) =
	case l {
	 Nil => Nil;
	 Cons(x,xs) =>  Cons(Pair(n,x),attach(n,xs));
     };
     
def List<Pair<A,A>> pairs<A>(List<A> l) =
	case l {
	 Nil => Nil;
	 Cons(x,xs) =>  appendL(attach(x,xs),pairs(xs));
     };

def List<Pair<A,A>> pairsAux<A>(List<A> l,List<Pair<A,A>> acc) =
	case l {
	 Nil => acc;
	 Cons(x,xs) =>  pairsAux(xs,appendL(attach(x,xs),acc));
     };
        
def List<Pair<A,A>> pairsp<A>(List<A> l) =
	case l {
	 Nil => Nil;
	 Cons(x,xs) =>  appendL(pairsp(xs),attach(x,xs));
     };    
     
def List<Pair<A,Pair<A,A>>> triples<A>(List<A> l) =
	case l {
	 Nil => Nil;
	 Cons(x,xs) =>  appendL(attach(x,pairs(xs)),triples(xs));
     };     

def List<Pair<A,Pair<A,Pair<A,A>>>> quadruples<A>(List<A> l) =
	case l {
	 Nil => Nil;
	 Cons(x,xs) =>  appendL(attach(x,triples(xs)),quadruples(xs));
     }; 



{}

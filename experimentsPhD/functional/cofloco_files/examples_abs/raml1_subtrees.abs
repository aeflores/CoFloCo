module Subtrees;


def List<A> append<A>(List<A> l1,List<A> l2) =
	case l1 {
	 Nil => l2;
	 Cons(x,xs) =>  Cons(x,append(xs, l2));
     };

data Tree= Leaf | Node(Int,Tree,Tree);

def List<Tree> subtrees(Tree t) =
	case t {
	Leaf => Nil;
	Node(x, t1, t2) =>
        Cons(Node(x, t1, t2),append(subtrees(t1),subtrees(t2)));
    };


{}

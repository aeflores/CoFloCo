/* * * * * * * * * * *
 *Translation to ABS
 * * * * * * * * * * *
 *
 * * *  Use Cases  * *
 *
 * File:
 *   examples/rationalPotential.raml
 *

 * 
 * Description: 
 *   Implementation of a zip function (zip3) that zips 3 integer lists.
 *   The resource consumption of zip3 is always payed by the shortest list.
 *
 *   A group function that groups the elements of a list into triples.
 *   This function is typed with a rational potential.
 */

module RationalPotential;


def List<Triple<A,A,A>> zip3<A>(List<A> l1,List<A> l2,List<A> l3)=
	case l1 {
	Nil => Nil;
	Cons(x,xs) =>
		case l2 {
		Nil => Nil;
		Cons(y,ys) =>
			case l3 {
			Nil => Nil;
			Cons(z,zs)=>  Cons(Triple(x, y, z),zip3(xs, ys, zs));
			};
		};
	};

def List<Triple<A,A,A>> group3<A>(List<A> l) =
	case l {
	Nil => Nil ;
	Cons( x,xs) =>
		case xs {
		Nil => Nil ;
		Cons( y,ys) =>
			case ys {
			Nil => Nil ;
			Cons( z,zs) => Cons( Triple(x, y, z),group3(zs));
			};
		};
	};


{}

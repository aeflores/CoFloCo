<?xml version='1.0' encoding='UTF-8'?>
<examples>
<example name="automotive_bitcount_src_bitcnt_1.o.bit_count.o">
<cofloco>
<entry>### Maximum cost of eval_bit_count_start(V_x,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.296s </time>
<error></error>
</cofloco>
</example>
<example name="automotive_bitcount_src_bitcnts.o.bit_shifter.o">
<cofloco>
<entry>### Maximum cost of eval_bit_shifter_start(V_x,B) </entry>
<result> 257  </result>
<complexity> constant  </complexity>
<time>0m0.333s </time>
<error></error>
</cofloco>
</example>
<example name="automotive_bitcount_src_bitcnts.o.main1.o">
<cofloco>
<entry>### Maximum cost of eval_main1_start(V_argc,V_print,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.467s </time>
<error></error>
</cofloco>
</example>
<example name="automotive_bitcount_src_bitstrng.o.bitstring.o">
<cofloco>
<entry>### Maximum cost of eval_bitstring_start(V_byze,V_biz,V_strwid,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.401s </time>
<error></error>
</cofloco>
</example>
<example name="automotive_bitcount_src_bstr_i.o.bstr_i.o">
<cofloco>
<entry>### Maximum cost of eval_bstr_i_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.296s </time>
<error></error>
</cofloco>
</example>
<example name="automotive_bitcount_src_loop-wrap.o.main.o">
<cofloco>
<entry>### Maximum cost of eval_main_start(V_argc,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.318s </time>
<error></error>
</cofloco>
</example>
<example name="automotive_qsort1_src_qsort_large.o.main1.o">
<cofloco>
<entry>### Maximum cost of eval_main1_start(V_argc,V_print,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.431s </time>
<error></error>
</cofloco>
</example>
<example name="automotive_qsort1_src_qsort.o.qsortx.o">
<cofloco>
<entry>### Maximum cost of eval_qsortx_start(V_num,V_width,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.510s </time>
<error></error>
</cofloco>
</example>
<example name="automotive_qsort1_src_qsort.o.shortsort.o">
<cofloco>
<entry>### Maximum cost of eval_shortsort_start(V_width,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.323s </time>
<error></error>
</cofloco>
</example>
<example name="automotive_qsort1_src_qsort.o.swap.o">
<cofloco>
<entry>### Maximum cost of eval_swap_start(V_width,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.327s </time>
<error></error>
</cofloco>
</example>
<example name="automotive_susan_c_src_susan.o.corner_draw.o">
<cofloco>
<entry>### Maximum cost of eval_corner_draw_start(V_x_size,V_drawing_mode,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.292s </time>
<error></error>
</cofloco>
</example>
<example name="automotive_susan_c_src_susan.o.edge_draw.o">
<cofloco>
<entry>### Maximum cost of eval_edge_draw_start(V_x_size,V_y_size,V_drawing_mode,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.361s </time>
<error></error>
</cofloco>
</example>
<example name="automotive_susan_c_src_susan.o.enlarge.o">
<cofloco>
<entry>### Maximum cost of eval_enlarge_start(V_border,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.492s </time>
<error></error>
</cofloco>
</example>
<example name="automotive_susan_c_src_susan.o.getint.o">
<cofloco>
<entry>### Maximum cost of eval_getint_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.334s </time>
<error></error>
</cofloco>
</example>
<example name="automotive_susan_c_src_susan.o.int_to_uchar.o">
<cofloco>
<entry>### Maximum cost of eval_int_to_uchar_start(V_size,B) </entry>
<result> nat(V_size)*2+2  </result>
<complexity> n  </complexity>
<time>0m0.415s </time>
<error></error>
</cofloco>
</example>
<example name="automotive_susan_c_src_susan.o.main1.o">
<cofloco>
<entry>### Maximum cost of eval_main1_start(V_argc,B) </entry>
<result> nat(V_argc)*30+1  </result>
<complexity> n  </complexity>
<time>0m0.853s </time>
<error></error>
</cofloco>
</example>
<example name="automotive_susan_c_src_susan.o.median.o">
<cofloco>
<entry>### Maximum cost of eval_median_start(V_i,V_j,V_x_size,B) </entry>
<result> 58  </result>
<complexity> constant  </complexity>
<time>0m0.347s </time>
<error></error>
</cofloco>
</example>
<example name="automotive_susan_c_src_susan.o.setup_brightness_lut.o">
<cofloco>
<entry>### Maximum cost of eval_setup_brightness_lut_start(V_thresh,V_form,B) </entry>
<result> 514  </result>
<complexity> constant  </complexity>
<time>0m0.305s </time>
<error></error>
</cofloco>
</example>
<example name="automotive_susan_c_src_susan.o.susan_corners.o">
<cofloco>
<entry>### Maximum cost of eval_susan_corners_start(V_max_no,V_x_size,V_y_size,B) </entry>
<result> nat(V_x_size)*2+1+nat(V_x_size)*3*nat(V_y_size)+nat(V_y_size)*2+nat(V_y_size)*4+2  </result>
<complexity> n^2  </complexity>
<time>0m1.344s </time>
<error></error>
</cofloco>
</example>
<example name="automotive_susan_c_src_susan.o.susan_corners_quick.o">
<cofloco>
<entry>### Maximum cost of eval_susan_corners_quick_start(V_max_no,V_x_size,V_y_size,B) </entry>
<result> nat(V_x_size)*2+1+nat(V_x_size)*3*nat(V_y_size)+nat(V_y_size)*2+nat(V_y_size)*4+2  </result>
<complexity> n^2  </complexity>
<time>0m1.795s </time>
<error></error>
</cofloco>
</example>
<example name="automotive_susan_c_src_susan.o.susan_edges.o">
<cofloco>
<entry>### Maximum cost of eval_susan_edges_start(V_max_no,V_x_size,V_y_size,B) </entry>
<result> nat(V_y_size)*2+max([nat(V_y_size)*2,nat(V_y_size)*nat(V_x_size)+nat(V_y_size)*2+nat(V_y_size)*nat(V_x_size)])+2  </result>
<complexity> n^2  </complexity>
<time>0m0.657s </time>
<error></error>
</cofloco>
</example>
<example name="automotive_susan_c_src_susan.o.susan_edges_small.o">
<cofloco>
<entry>### Maximum cost of eval_susan_edges_small_start(V_max_no,V_x_size,V_y_size,B) </entry>
<result> nat(V_y_size)*2+max([nat(V_y_size)*2,nat(V_y_size)*nat(V_x_size)+nat(V_y_size)*2+nat(V_y_size)*nat(V_x_size)])+2  </result>
<complexity> n^2  </complexity>
<time>0m0.657s </time>
<error></error>
</cofloco>
</example>
<example name="automotive_susan_c_src_susan.o.susan_principle.o">
<cofloco>
<entry>### Maximum cost of eval_susan_principle_start(V_max_no,V_x_size,V_y_size,B) </entry>
<result> nat(V_y_size)*nat(V_x_size)+nat(V_y_size)*2+1  </result>
<complexity> n^2  </complexity>
<time>0m0.432s </time>
<error></error>
</cofloco>
</example>
<example name="automotive_susan_c_src_susan.o.susan_principle_small.o">
<cofloco>
<entry>### Maximum cost of eval_susan_principle_small_start(V_max_no,V_x_size,V_y_size,B) </entry>
<result> nat(V_y_size)*nat(V_x_size)+nat(V_y_size)*2+1  </result>
<complexity> n^2  </complexity>
<time>0m0.439s </time>
<error></error>
</cofloco>
</example>
<example name="automotive_susan_c_src_susan.o.susan_smoothing.o">
<cofloco>
<entry>### Maximum cost of eval_susan_smoothing_start(V_three_by_three,V_x_size,V_y_size,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.184s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_blocksort.o.BZ2_blockSort.o">
<cofloco>
<entry>### Maximum cost of eval_BZ2_blockSort_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.347s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_blocksort.o.fallbackQSort3.o">
<cofloco>
<entry> </entry>
<result> </result>
<complexity> </complexity>
<time>1m0.174s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_blocksort.o.fallbackSimpleSort.o">
<cofloco>
<entry>### Maximum cost of eval_fallbackSimpleSort_start(V_lo,V_hi,B) </entry>
<result> nat(-V_lo+V_hi)*11+2+nat(-V_lo+V_hi)*6*nat(-V_lo+V_hi)+nat(-V_lo+V_hi+1)*2*nat(-V_lo+V_hi)  </result>
<complexity> n^2  </complexity>
<time>0m1.792s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_blocksort.o.fallbackSort.o">
<cofloco>
<entry> </entry>
<result> </result>
<complexity> </complexity>
<time>1m0.008s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_blocksort.o.mainGtU.o">
<cofloco>
<entry>### Maximum cost of eval_mainGtU_start(V_i1,V_i2,V_nblock,B) </entry>
<result> nat(V_nblock+8)+1  </result>
<complexity> n  </complexity>
<time>0m0.401s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_blocksort.o.mainQSort3.o">
<cofloco>
<entry> </entry>
<result> </result>
<complexity> </complexity>
<time>1m0.012s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_blocksort.o.mainSimpleSort.o">
<cofloco>
<entry>### Maximum cost of eval_mainSimpleSort_start(V_nblock,V_lo,V_hi,V_d,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m38.015s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_blocksort.o.mainSort.o">
<cofloco>
<entry>### Maximum cost of eval_mainSort_start(V_nblock,V_verb,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m38.501s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_bzip2.o.addFlagsFromEnvVar.o">
<cofloco>
<entry>### Maximum cost of eval_addFlagsFromEnvVar_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.529s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_bzip2.o.compress.o">
<cofloco>
<entry>### Maximum cost of eval_compress_start(V__keepInputFiles,V__forceOverwrite,V__noisy,V__verbosity,V__deleteOutputOnInterrupt,V__srcMode,B) </entry>
<result> 29  </result>
<complexity> constant  </complexity>
<time>0m0.907s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_bzip2.o.compressStream.o">
<cofloco>
<entry>### Maximum cost of eval_compressStream_start(V__verbosity,V__blockSize100k,V__workFactor,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.487s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_bzip2.o.main1.o">
<cofloco>
<entry>### Maximum cost of eval_main1_start(V_argc,V__smallMode,V__keepInputFiles,V__forceOverwrite,V__noisy,V__verbosity,V__blockSize100k,V__testFailsExist,V__unzFailsExist,V__numFileNames,V__numFilesProcessed,V__workFactor,V__deleteOutputOnInterrupt,V__exitValue,V__longestFileName,V__srcMode,V__opMode,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m18.488s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_bzip2.o.pad.o">
<cofloco>
<entry>### Maximum cost of eval_pad_start(V__longestFileName,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.309s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_bzip2.o.testStream.o">
<cofloco>
<entry>### Maximum cost of eval_testStream_start(V__smallMode,V__noisy,V__verbosity,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.822s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_bzip2.o.uInt64_isZero.o">
<cofloco>
<entry>### Maximum cost of eval_uInt64_isZero_start(B) </entry>
<result> 16  </result>
<complexity> constant  </complexity>
<time>0m0.313s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_bzip2.o.uInt64_qrm10.o">
<cofloco>
<entry>### Maximum cost of eval_uInt64_qrm10_start(B) </entry>
<result> 17  </result>
<complexity> constant  </complexity>
<time>0m0.345s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_bzip2.o.uInt64_toAscii.o">
<cofloco>
<entry>### Maximum cost of eval_uInt64_toAscii_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.359s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_bzip2.o.uInt64_to_double.o">
<cofloco>
<entry>### Maximum cost of eval_uInt64_to_double_start(B) </entry>
<result> 9  </result>
<complexity> constant  </complexity>
<time>0m0.302s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_bzip2.o.uncompress.o">
<cofloco>
<entry>### Maximum cost of eval_uncompress_start(V__keepInputFiles,V__forceOverwrite,V__noisy,V__verbosity,V__unzFailsExist,V__deleteOutputOnInterrupt,V__srcMode,B) </entry>
<result> 8  </result>
<complexity> constant  </complexity>
<time>0m0.878s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_bzip2.o.uncompressStream.o">
<cofloco>
<entry>### Maximum cost of eval_uncompressStream_start(V__smallMode,V__forceOverwrite,V__noisy,V__verbosity,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m3.848s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_bzlib.o.add_pair_to_block.o">
<cofloco>
<entry>### Maximum cost of eval_add_pair_to_block_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.972s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_bzlib.o.BZ2_bzCompress.o">
<cofloco>
<entry>### Maximum cost of eval_BZ2_bzCompress_start(V_action,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.057s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_bzlib.o.BZ2_bzDecompress.o">
<cofloco>
<entry>### Maximum cost of eval_BZ2_bzDecompress_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.069s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_bzlib.o.BZ2_bzRead.o">
<cofloco>
<entry>### Maximum cost of eval_BZ2_bzRead_start(V_len,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.107s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_bzlib.o.BZ2_bzReadOpen.o">
<cofloco>
<entry>### Maximum cost of eval_BZ2_bzReadOpen_start(V_verbosity,V_small,V_nUnused,B) </entry>
<result> nat(V_nUnused)+1  </result>
<complexity> n  </complexity>
<time>0m1.112s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_bzlib.o.BZ2_bzWriteClose64.o">
<cofloco>
<entry>### Maximum cost of eval_BZ2_bzWriteClose64_start(V_abandon,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.785s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_bzlib.o.BZ2_bzWrite.o">
<cofloco>
<entry>### Maximum cost of eval_BZ2_bzWrite_start(V_len,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.331s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_bzlib.o.BZ2_indexIntoF.o">
<cofloco>
<entry>### Maximum cost of eval_BZ2_indexIntoF_start(V_indx,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.343s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_bzlib.o.bzopen_or_bzdopen.o">
<cofloco>
<entry>### Maximum cost of eval_bzopen_or_bzdopen_start(V_fd,V_open_mode,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.399s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_bzlib.o.copy_input_until_stop.o">
<cofloco>
<entry>### Maximum cost of eval_copy_input_until_stop_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.305s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_bzlib.o.copy_output_until_stop.o">
<cofloco>
<entry>### Maximum cost of eval_copy_output_until_stop_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.300s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_bzlib.o.handle_compress.o">
<cofloco>
<entry>### Maximum cost of eval_handle_compress_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.312s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_bzlib.o.prepare_new_block.o">
<cofloco>
<entry>### Maximum cost of eval_prepare_new_block_start(B) </entry>
<result> 257  </result>
<complexity> constant  </complexity>
<time>0m0.305s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_bzlib.o.unRLE_obuf_to_output_FAST.o">
<cofloco>
<entry> </entry>
<result> </result>
<complexity> </complexity>
<time>0m0.277s </time>
<error>ERROR: Unknown message: error(Failed to parse input file)</error>
</cofloco>
</example>
<example name="bzip2d_src_bzlib.o.unRLE_obuf_to_output_SMALL.o">
<cofloco>
<entry>### Maximum cost of eval_unRLE_obuf_to_output_SMALL_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.339s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_compress.o.bsFinishWrite.o">
<cofloco>
<entry>### Maximum cost of eval_bsFinishWrite_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.295s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_compress.o.bsW.o">
<cofloco>
<entry>### Maximum cost of eval_bsW_start(V_n,V_v,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.297s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_compress.o.generateMTFValues.o">
<cofloco>
<entry>### Maximum cost of eval_generateMTFValues_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.855s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_compress.o.makeMaps_e.o">
<cofloco>
<entry>### Maximum cost of eval_makeMaps_e_start(B) </entry>
<result> 257  </result>
<complexity> constant  </complexity>
<time>0m0.309s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_compress.o.sendMTFValues.o">
<cofloco>
<entry>### Maximum cost of eval_sendMTFValues_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m47.611s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_decompress.o.makeMaps_d.o">
<cofloco>
<entry>### Maximum cost of eval_makeMaps_d_start(B) </entry>
<result> 257  </result>
<complexity> constant  </complexity>
<time>0m0.940s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_huffman.o.BZ2_hbAssignCodes.o">
<cofloco>
<entry>### Maximum cost of eval_BZ2_hbAssignCodes_start(V_minLen,V_maxLen,V_alphaSize,B) </entry>
<result> nat(-V_minLen+V_maxLen+1)*nat(V_alphaSize)+nat(-V_minLen+V_maxLen+1)*2+1  </result>
<complexity> n^2  </complexity>
<time>0m1.326s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_huffman.o.BZ2_hbCreateDecodeTables.o">
<cofloco>
<entry>### Maximum cost of eval_BZ2_hbCreateDecodeTables_start(V_minLen,V_maxLen,V_alphaSize,B) </entry>
<result> max([max([3,nat(-V_minLen+V_maxLen+1)*3+nat(-V_minLen+V_maxLen)]),nat(V_alphaSize)+max([nat(V_alphaSize)+3,nat(-V_minLen+V_maxLen+1)*nat(V_alphaSize)+nat(-V_minLen+V_maxLen)+nat(-V_minLen+V_maxLen+1)*3])])+75  </result>
<complexity> n^2  </complexity>
<time>0m1.091s </time>
<error></error>
</cofloco>
</example>
<example name="bzip2d_src_huffman.o.BZ2_hbMakeCodeLengths.o">
<cofloco>
<entry>### Maximum cost of eval_BZ2_hbMakeCodeLengths_start(V_alphaSize,V_maxLen,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m2.851s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_cdjpeg.o.keymatch.o">
<cofloco>
<entry>### Maximum cost of eval_keymatch_start(V_minchars,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.935s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_cjpeg.o.main1.o">
<cofloco>
<entry>### Maximum cost of eval_main1_start(V_argc,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.083s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_cjpeg.o.parse_switches.o">
<cofloco>
<entry>### Maximum cost of eval_parse_switches_start(V_argc,V_last_file_arg_seen,V_for_real,V__is_targa,V__parse_switches_printed_version,B) </entry>
<result> nat(V_argc)*12+1  </result>
<complexity> n  </complexity>
<time>0m3.347s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_d_djpeg.o.COM_handler.o">
<cofloco>
<entry>### Maximum cost of eval_COM_handler_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.354s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_d_djpeg.o.main1.o">
<cofloco>
<entry>### Maximum cost of eval_main1_start(V_argc,V__requested_fmt,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.390s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_d_djpeg.o.parse_switches.o">
<cofloco>
<entry>### Maximum cost of eval_parse_switches_start(V_argc,V_last_file_arg_seen,V_for_real,V__requested_fmt,V__parse_switches_printed_version,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.782s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_d_rdcolmap.o.add_map_entry.o">
<cofloco>
<entry>### Maximum cost of eval_add_map_entry_start(V_R,V_G,V_B,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.351s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_d_rdcolmap.o.pbm_getc.o">
<cofloco>
<entry>### Maximum cost of eval_pbm_getc_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.303s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_d_rdcolmap.o.read_gif_map.o">
<cofloco>
<entry>### Maximum cost of eval_read_gif_map_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.366s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_d_rdcolmap.o.read_pbm_integer.o">
<cofloco>
<entry>### Maximum cost of eval_read_pbm_integer_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.327s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_d_rdcolmap.o.read_ppm_map.o">
<cofloco>
<entry>### Maximum cost of eval_read_ppm_map_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.584s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_d_wrbmp.o.finish_output_bmp.o">
<cofloco>
<entry>### Maximum cost of eval_finish_output_bmp_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.357s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_d_wrbmp.o.jinit_write_bmp.o">
<cofloco>
<entry>### Maximum cost of eval_jinit_write_bmp_start(V_is_os2,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.302s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_d_wrbmp.o.put_gray_rows.o">
<cofloco>
<entry>### Maximum cost of eval_put_gray_rows_start(V_rows_supplied,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.335s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_d_wrbmp.o.put_pixel_rows.o">
<cofloco>
<entry>### Maximum cost of eval_put_pixel_rows_start(V_rows_supplied,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.041s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_d_wrbmp.o.write_colormap.o">
<cofloco>
<entry>### Maximum cost of eval_write_colormap_start(V_map_colors,V_map_entry_size,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.691s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_d_wrgif.o.compress_byte.o">
<cofloco>
<entry>### Maximum cost of eval_compress_byte_start(V_c,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.974s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_d_wrgif.o.emit_header.o">
<cofloco>
<entry>### Maximum cost of eval_emit_header_start(V_num_colors,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m2.189s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_d_wrgif.o.output.o">
<cofloco>
<entry>### Maximum cost of eval_output_start(V_code,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.924s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_d_wrgif.o.put_pixel_rows.o">
<cofloco>
<entry>### Maximum cost of eval_put_pixel_rows_start(V_rows_supplied,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.948s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_d_wrppm.o.copy_pixel_rows.o">
<cofloco>
<entry>### Maximum cost of eval_copy_pixel_rows_start(V_rows_supplied,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.322s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_d_wrppm.o.put_demapped_gray.o">
<cofloco>
<entry>### Maximum cost of eval_put_demapped_gray_start(V_rows_supplied,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.306s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_d_wrppm.o.put_demapped_rgb.o">
<cofloco>
<entry>### Maximum cost of eval_put_demapped_rgb_start(V_rows_supplied,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.309s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_d_wrtarga.o.put_demapped_gray.o">
<cofloco>
<entry>### Maximum cost of eval_put_demapped_gray_start(V_rows_supplied,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.305s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_d_wrtarga.o.put_gray_rows.o">
<cofloco>
<entry>### Maximum cost of eval_put_gray_rows_start(V_rows_supplied,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.307s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_d_wrtarga.o.put_pixel_rows.o">
<cofloco>
<entry>### Maximum cost of eval_put_pixel_rows_start(V_rows_supplied,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.299s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_d_wrtarga.o.start_output_tga.o">
<cofloco>
<entry>### Maximum cost of eval_start_output_tga_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.328s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcapimin.o.jpeg_CreateCompress.o">
<cofloco>
<entry>### Maximum cost of eval_jpeg_CreateCompress_start(V_version,V_structsize,B) </entry>
<result> 10  </result>
<complexity> constant  </complexity>
<time>0m0.342s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcapimin.o.jpeg_suppress_tables.o">
<cofloco>
<entry>### Maximum cost of eval_jpeg_suppress_tables_start(V_suppress,B) </entry>
<result> 10  </result>
<complexity> constant  </complexity>
<time>0m0.326s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jccoefct.o.compress_data.o">
<cofloco>
<entry>### Maximum cost of eval_compress_data_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.823s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jccoefct.o.compress_first_pass.o">
<cofloco>
<entry>### Maximum cost of eval_compress_first_pass_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m18.179s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jccoefct.o.compress_output.o">
<cofloco>
<entry>### Maximum cost of eval_compress_output_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.677s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jccoefct.o.jinit_c_coef_controller.o">
<cofloco>
<entry>### Maximum cost of eval_jinit_c_coef_controller_start(V_need_full_buffer,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.337s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jccolor.o.cmyk_ycck_convert.o">
<cofloco>
<entry>### Maximum cost of eval_cmyk_ycck_convert_start(V_output_row,V_num_rows,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.393s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jccolor.o.grayscale_convert.o">
<cofloco>
<entry>### Maximum cost of eval_grayscale_convert_start(V_output_row,V_num_rows,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.392s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jccolor.o.null_convert.o">
<cofloco>
<entry>### Maximum cost of eval_null_convert_start(V_output_row,V_num_rows,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.585s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jccolor.o.rgb_gray_convert.o">
<cofloco>
<entry>### Maximum cost of eval_rgb_gray_convert_start(V_output_row,V_num_rows,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.388s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jccolor.o.rgb_ycc_convert.o">
<cofloco>
<entry>### Maximum cost of eval_rgb_ycc_convert_start(V_output_row,V_num_rows,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.895s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jccolor.o.rgb_ycc_start.o">
<cofloco>
<entry>### Maximum cost of eval_rgb_ycc_start_start(B) </entry>
<result> 257  </result>
<complexity> constant  </complexity>
<time>0m0.942s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcdctmgr.o.forward_DCT_float.o">
<cofloco>
<entry>### Maximum cost of eval_forward_DCT_float_start(V_start_row,V_start_col,V_num_blocks,B) </entry>
<result> nat(V_num_blocks)*75+1  </result>
<complexity> n  </complexity>
<time>0m1.314s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcdctmgr.o.forward_DCT.o">
<cofloco>
<entry>### Maximum cost of eval_forward_DCT_start(V_start_row,V_start_col,V_num_blocks,B) </entry>
<result> nat(V_num_blocks)*75+1  </result>
<complexity> n  </complexity>
<time>0m1.376s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcdctmgr.o.jinit_forward_dct.o">
<cofloco>
<entry>### Maximum cost of eval_jinit_forward_dct_start(B) </entry>
<result> 5  </result>
<complexity> constant  </complexity>
<time>0m0.963s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcdctmgr.o.start_pass_fdctmgr.o">
<cofloco>
<entry>### Maximum cost of eval_start_pass_fdctmgr_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.539s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jchuff.o.emit_bits.o">
<cofloco>
<entry>### Maximum cost of eval_emit_bits_start(V_code,V_size,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.326s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jchuff.o.emit_restart.o">
<cofloco>
<entry>### Maximum cost of eval_emit_restart_start(V_restart_num,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.318s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jchuff.o.encode_mcu_gather.o">
<cofloco>
<entry>### Maximum cost of eval_encode_mcu_gather_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.328s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jchuff.o.encode_mcu_huff.o">
<cofloco>
<entry>### Maximum cost of eval_encode_mcu_huff_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.322s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jchuff.o.encode_one_block.o">
<cofloco>
<entry>### Maximum cost of eval_encode_one_block_start(V_last_dc_val,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.028s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jchuff.o.finish_pass_gather.o">
<cofloco>
<entry>### Maximum cost of eval_finish_pass_gather_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.310s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jchuff.o.htest_one_block.o">
<cofloco>
<entry>### Maximum cost of eval_htest_one_block_start(V_last_dc_val,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.306s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jchuff.o.jinit_huff_encoder.o">
<cofloco>
<entry>### Maximum cost of eval_jinit_huff_encoder_start(B) </entry>
<result> 5  </result>
<complexity> constant  </complexity>
<time>0m0.938s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jchuff.o.jpeg_gen_optimal_table.o">
<cofloco>
<entry>### Maximum cost of eval_jpeg_gen_optimal_table_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.933s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jchuff.o.jpeg_make_c_derived_tbl.o">
<cofloco>
<entry>### Maximum cost of eval_jpeg_make_c_derived_tbl_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.156s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jchuff.o.start_pass_huff.o">
<cofloco>
<entry>### Maximum cost of eval_start_pass_huff_start(V_gather_statistics,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.322s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcmainct.o.jinit_c_main_controller.o">
<cofloco>
<entry>### Maximum cost of eval_jinit_c_main_controller_start(V_need_full_buffer,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.304s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcmainct.o.process_data_simple_main.o">
<cofloco>
<entry>### Maximum cost of eval_process_data_simple_main_start(V_in_rows_avail,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.298s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcmarker.o.emit_dht.o">
<cofloco>
<entry>### Maximum cost of eval_emit_dht_start(V_index,V_is_ac,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.433s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcmarker.o.emit_dqt.o">
<cofloco>
<entry>### Maximum cost of eval_emit_dqt_start(V_index,B) </entry>
<result> 194  </result>
<complexity> constant  </complexity>
<time>0m0.359s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcmarker.o.emit_sof.o">
<cofloco>
<entry>### Maximum cost of eval_emit_sof_start(V_code,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.316s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcmarker.o.emit_sos.o">
<cofloco>
<entry>### Maximum cost of eval_emit_sos_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.319s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcmarker.o.write_any_marker.o">
<cofloco>
<entry>### Maximum cost of eval_write_any_marker_start(V_marker,V_datalen,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.383s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcmarker.o.write_frame_header.o">
<cofloco>
<entry>### Maximum cost of eval_write_frame_header_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.218s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcmarker.o.write_scan_header.o">
<cofloco>
<entry>### Maximum cost of eval_write_scan_header_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.980s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcmarker.o.write_tables_only.o">
<cofloco>
<entry>### Maximum cost of eval_write_tables_only_start(B) </entry>
<result> 14  </result>
<complexity> constant  </complexity>
<time>0m1.121s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcmaster.o.initial_setup.o">
<cofloco>
<entry>### Maximum cost of eval_initial_setup_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.169s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcmaster.o.per_scan_setup.o">
<cofloco>
<entry>### Maximum cost of eval_per_scan_setup_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.536s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcmaster.o.select_scan_parameters.o">
<cofloco>
<entry>### Maximum cost of eval_select_scan_parameters_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.318s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcmaster.o.validate_script.o">
<cofloco>
<entry>### Maximum cost of eval_validate_script_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.157s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcomapi.o.jpeg_abort.o">
<cofloco>
<entry>### Maximum cost of eval_jpeg_abort_start(B) </entry>
<result> 2  </result>
<complexity> constant  </complexity>
<time>0m0.295s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcparam.o.fill_dc_scans.o">
<cofloco>
<entry>### Maximum cost of eval_fill_dc_scans_start(V_ncomps,V_Ah,V_Al,B) </entry>
<result> nat(V_ncomps)+1  </result>
<complexity> n  </complexity>
<time>0m0.321s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcparam.o.fill_scans.o">
<cofloco>
<entry>### Maximum cost of eval_fill_scans_start(V_ncomps,V_Ss,V_Se,V_Ah,V_Al,B) </entry>
<result> nat(V_ncomps)+1  </result>
<complexity> n  </complexity>
<time>0m0.316s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcparam.o.jpeg_add_quant_table.o">
<cofloco>
<entry>### Maximum cost of eval_jpeg_add_quant_table_start(V_which_tbl,V_scale_factor,V_force_baseline,B) </entry>
<result> 65  </result>
<complexity> constant  </complexity>
<time>0m0.526s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcparam.o.jpeg_set_colorspace.o">
<cofloco>
<entry>### Maximum cost of eval_jpeg_set_colorspace_start(V_colorspace,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.968s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcparam.o.jpeg_set_defaults.o">
<cofloco>
<entry>### Maximum cost of eval_jpeg_set_defaults_start(B) </entry>
<result> 17  </result>
<complexity> constant  </complexity>
<time>0m0.977s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcphuff.o.emit_bits.o">
<cofloco>
<entry>### Maximum cost of eval_emit_bits_start(V_code,V_size,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.981s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcphuff.o.emit_buffered_bits.o">
<cofloco>
<entry>### Maximum cost of eval_emit_buffered_bits_start(V_nbits,B) </entry>
<result> nat(V_nbits)+1  </result>
<complexity> n  </complexity>
<time>0m0.949s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcphuff.o.emit_eobrun.o">
<cofloco>
<entry>### Maximum cost of eval_emit_eobrun_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.011s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcphuff.o.emit_restart.o">
<cofloco>
<entry>### Maximum cost of eval_emit_restart_start(V_restart_num,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.711s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcphuff.o.encode_mcu_AC_first.o">
<cofloco>
<entry>### Maximum cost of eval_encode_mcu_AC_first_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.682s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcphuff.o.encode_mcu_AC_refine.o">
<cofloco>
<entry>### Maximum cost of eval_encode_mcu_AC_refine_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.902s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcphuff.o.encode_mcu_DC_first.o">
<cofloco>
<entry>### Maximum cost of eval_encode_mcu_DC_first_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.966s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcphuff.o.encode_mcu_DC_refine.o">
<cofloco>
<entry>### Maximum cost of eval_encode_mcu_DC_refine_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.985s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcphuff.o.finish_pass_gather_phuff.o">
<cofloco>
<entry>### Maximum cost of eval_finish_pass_gather_phuff_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.958s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcphuff.o.jinit_phuff_encoder.o">
<cofloco>
<entry>### Maximum cost of eval_jinit_phuff_encoder_start(B) </entry>
<result> 5  </result>
<complexity> constant  </complexity>
<time>0m0.450s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcphuff.o.start_pass_phuff.o">
<cofloco>
<entry>### Maximum cost of eval_start_pass_phuff_start(V_gather_statistics,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.320s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcprepct.o.create_context_buffer.o">
<cofloco>
<entry>### Maximum cost of eval_create_context_buffer_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.396s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcprepct.o.expand_bottom_edge.o">
<cofloco>
<entry>### Maximum cost of eval_expand_bottom_edge_start(V_num_cols,V_input_rows,V_output_rows,B) </entry>
<result> nat(-V_input_rows+V_output_rows)+1  </result>
<complexity> n  </complexity>
<time>0m0.337s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcprepct.o.jinit_c_prep_controller.o">
<cofloco>
<entry>### Maximum cost of eval_jinit_c_prep_controller_start(V_need_full_buffer,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.312s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcprepct.o.pre_process_context.o">
<cofloco>
<entry>### Maximum cost of eval_pre_process_context_start(V_in_rows_avail,V_out_row_groups_avail,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.458s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcprepct.o.pre_process_data.o">
<cofloco>
<entry>### Maximum cost of eval_pre_process_data_start(V_in_rows_avail,V_out_row_groups_avail,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.442s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcsample.o.expand_right_edge.o">
<cofloco>
<entry>### Maximum cost of eval_expand_right_edge_start(V_num_rows,V_input_cols,V_output_cols,B) </entry>
<result> nat(V_num_rows)*4+1+nat(-V_input_cols+V_output_cols)*nat(V_num_rows)  </result>
<complexity> n^2  </complexity>
<time>0m0.478s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcsample.o.fullsize_smooth_downsample.o">
<cofloco>
<entry>### Maximum cost of eval_fullsize_smooth_downsample_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.179s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcsample.o.h2v1_downsample.o">
<cofloco>
<entry>### Maximum cost of eval_h2v1_downsample_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.173s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcsample.o.h2v2_downsample.o">
<cofloco>
<entry>### Maximum cost of eval_h2v2_downsample_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.180s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcsample.o.h2v2_smooth_downsample.o">
<cofloco>
<entry>### Maximum cost of eval_h2v2_smooth_downsample_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.176s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcsample.o.int_downsample.o">
<cofloco>
<entry>### Maximum cost of eval_int_downsample_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m4.256s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcsample.o.jinit_downsampler.o">
<cofloco>
<entry>### Maximum cost of eval_jinit_downsampler_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.226s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jcsample.o.sep_downsample.o">
<cofloco>
<entry>### Maximum cost of eval_sep_downsample_start(V_in_row_index,V_out_row_group_index,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.943s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jctrans.o.compress_output.o">
<cofloco>
<entry>### Maximum cost of eval_compress_output_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.076s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jctrans.o.jpeg_copy_critical_parameters.o">
<cofloco>
<entry>### Maximum cost of eval_jpeg_copy_critical_parameters_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.405s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jctrans.o.transencode_coef_controller.o">
<cofloco>
<entry>### Maximum cost of eval_transencode_coef_controller_start(B) </entry>
<result> 11  </result>
<complexity> constant  </complexity>
<time>0m0.309s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdapimin.o.jpeg_CreateDecompress.o">
<cofloco>
<entry>### Maximum cost of eval_jpeg_CreateDecompress_start(V_version,V_structsize,B) </entry>
<result> 10  </result>
<complexity> constant  </complexity>
<time>0m0.341s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdapistd.o.output_pass_setup.o">
<cofloco>
<entry>### Maximum cost of eval_output_pass_setup_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.329s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdatasrc.o.skip_input_data.o">
<cofloco>
<entry>### Maximum cost of eval_skip_input_data_start(V_num_bytes,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.301s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdcoefct.o.consume_data.o">
<cofloco>
<entry>### Maximum cost of eval_consume_data_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.579s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdcoefct.o.decompress_data.o">
<cofloco>
<entry>### Maximum cost of eval_decompress_data_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.474s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdcoefct.o.decompress_onepass.o">
<cofloco>
<entry>### Maximum cost of eval_decompress_onepass_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.132s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdcoefct.o.decompress_smooth_data.o">
<cofloco>
<entry> </entry>
<result> </result>
<complexity> </complexity>
<time>1m0.009s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdcoefct.o.jinit_d_coef_controller.o">
<cofloco>
<entry>### Maximum cost of eval_jinit_d_coef_controller_start(V_need_full_buffer,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.631s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdcoefct.o.smoothing_ok.o">
<cofloco>
<entry>### Maximum cost of eval_smoothing_ok_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.343s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdcolor.o.build_ycc_rgb_table.o">
<cofloco>
<entry>### Maximum cost of eval_build_ycc_rgb_table_start(B) </entry>
<result> 257  </result>
<complexity> constant  </complexity>
<time>0m0.306s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdcolor.o.jinit_color_deconverter.o">
<cofloco>
<entry>### Maximum cost of eval_jinit_color_deconverter_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.327s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdcolor.o.null_convert.o">
<cofloco>
<entry>### Maximum cost of eval_null_convert_start(V_input_row,V_num_rows,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.587s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdcolor.o.ycck_cmyk_convert.o">
<cofloco>
<entry>### Maximum cost of eval_ycck_cmyk_convert_start(V_input_row,V_num_rows,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.858s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdcolor.o.ycc_rgb_convert.o">
<cofloco>
<entry>### Maximum cost of eval_ycc_rgb_convert_start(V_input_row,V_num_rows,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.233s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jddctmgr.o.jinit_inverse_dct.o">
<cofloco>
<entry>### Maximum cost of eval_jinit_inverse_dct_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.948s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jddctmgr.o.start_pass.o">
<cofloco>
<entry>### Maximum cost of eval_start_pass_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.152s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdhuff.o.decode_mcu.o">
<cofloco>
<entry>### Maximum cost of eval_decode_mcu_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m3.563s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdhuff.o.jinit_huff_decoder.o">
<cofloco>
<entry>### Maximum cost of eval_jinit_huff_decoder_start(B) </entry>
<result> 5  </result>
<complexity> constant  </complexity>
<time>0m1.049s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdhuff.o.jpeg_fill_bit_buffer.o">
<cofloco>
<entry>### Maximum cost of eval_jpeg_fill_bit_buffer_start(V_get_buffer,V_bits_left,V_nbits,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.319s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdhuff.o.jpeg_huff_decode.o">
<cofloco>
<entry>### Maximum cost of eval_jpeg_huff_decode_start(V_get_buffer,V_bits_left,V_min_bits,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.895s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdhuff.o.jpeg_make_d_derived_tbl.o">
<cofloco>
<entry>### Maximum cost of eval_jpeg_make_d_derived_tbl_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.533s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdhuff.o.start_pass_huff_decoder.o">
<cofloco>
<entry>### Maximum cost of eval_start_pass_huff_decoder_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.320s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdinput.o.initial_setup.o">
<cofloco>
<entry>### Maximum cost of eval_initial_setup_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.375s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdinput.o.latch_quant_tables.o">
<cofloco>
<entry>### Maximum cost of eval_latch_quant_tables_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.312s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdinput.o.per_scan_setup.o">
<cofloco>
<entry>### Maximum cost of eval_per_scan_setup_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.373s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdmainct.o.alloc_funny_pointers.o">
<cofloco>
<entry>### Maximum cost of eval_alloc_funny_pointers_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.303s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdmainct.o.jinit_d_main_controller.o">
<cofloco>
<entry>### Maximum cost of eval_jinit_d_main_controller_start(V_need_full_buffer,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.318s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdmainct.o.make_funny_pointers.o">
<cofloco>
<entry>### Maximum cost of eval_make_funny_pointers_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.638s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdmainct.o.set_bottom_pointers.o">
<cofloco>
<entry>### Maximum cost of eval_set_bottom_pointers_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.552s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdmainct.o.set_wraparound_pointers.o">
<cofloco>
<entry>### Maximum cost of eval_set_wraparound_pointers_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.008s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdmarker.o.get_sof.o">
<cofloco>
<entry>### Maximum cost of eval_get_sof_start(V_is_prog,V_is_arith,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.216s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdmarker.o.get_soi.o">
<cofloco>
<entry>### Maximum cost of eval_get_soi_start(B) </entry>
<result> 17  </result>
<complexity> constant  </complexity>
<time>0m0.947s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdmarker.o.jinit_marker_reader.o">
<cofloco>
<entry>### Maximum cost of eval_jinit_marker_reader_start(B) </entry>
<result> 17  </result>
<complexity> constant  </complexity>
<time>0m0.952s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdmarker.o.jpeg_resync_to_restart.o">
<cofloco>
<entry>### Maximum cost of eval_jpeg_resync_to_restart_start(V_desired,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.928s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdmaster.o.jpeg_calc_output_dimensions.o">
<cofloco>
<entry>### Maximum cost of eval_jpeg_calc_output_dimensions_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.295s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdmaster.o.prepare_range_limit_table.o">
<cofloco>
<entry>### Maximum cost of eval_prepare_range_limit_table_start(B) </entry>
<result> 642  </result>
<complexity> constant  </complexity>
<time>0m0.664s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdmerge.o.build_ycc_rgb_table.o">
<cofloco>
<entry>### Maximum cost of eval_build_ycc_rgb_table_start(B) </entry>
<result> 257  </result>
<complexity> constant  </complexity>
<time>0m0.308s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdmerge.o.h2v1_merged_upsample.o">
<cofloco>
<entry>### Maximum cost of eval_h2v1_merged_upsample_start(V_in_row_group_ctr,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.302s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdmerge.o.h2v2_merged_upsample.o">
<cofloco>
<entry>### Maximum cost of eval_h2v2_merged_upsample_start(V_in_row_group_ctr,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.298s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdphuff.o.decode_mcu_AC_first.o">
<cofloco>
<entry>### Maximum cost of eval_decode_mcu_AC_first_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.525s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdphuff.o.decode_mcu_AC_refine.o">
<cofloco>
<entry>### Maximum cost of eval_decode_mcu_AC_refine_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m4.143s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdphuff.o.decode_mcu_DC_first.o">
<cofloco>
<entry>### Maximum cost of eval_decode_mcu_DC_first_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.233s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdphuff.o.decode_mcu_DC_refine.o">
<cofloco>
<entry>### Maximum cost of eval_decode_mcu_DC_refine_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.907s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdphuff.o.jinit_phuff_decoder.o">
<cofloco>
<entry>### Maximum cost of eval_jinit_phuff_decoder_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.358s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdphuff.o.start_pass_phuff_decoder.o">
<cofloco>
<entry>### Maximum cost of eval_start_pass_phuff_decoder_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.383s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdsample.o.h2v1_fancy_upsample.o">
<cofloco>
<entry>### Maximum cost of eval_h2v1_fancy_upsample_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.332s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdsample.o.h2v1_upsample.o">
<cofloco>
<entry>### Maximum cost of eval_h2v1_upsample_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.328s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdsample.o.h2v2_fancy_upsample.o">
<cofloco>
<entry>### Maximum cost of eval_h2v2_fancy_upsample_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.411s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdsample.o.h2v2_upsample.o">
<cofloco>
<entry>### Maximum cost of eval_h2v2_upsample_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.337s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdsample.o.int_upsample.o">
<cofloco>
<entry>### Maximum cost of eval_int_upsample_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.522s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdsample.o.sep_upsample.o">
<cofloco>
<entry>### Maximum cost of eval_sep_upsample_start(V_in_row_groups_avail,V_out_rows_avail,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.308s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jdtrans.o.jpeg_read_coefficients.o">
<cofloco>
<entry>### Maximum cost of eval_jpeg_read_coefficients_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.303s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jerror.o.format_message.o">
<cofloco>
<entry>### Maximum cost of eval_format_message_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.302s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jfdctflt.o.jpeg_fdct_float.o">
<cofloco>
<entry>### Maximum cost of eval_jpeg_fdct_float_start(B) </entry>
<result> 18  </result>
<complexity> constant  </complexity>
<time>0m0.590s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jfdctfst.o.jpeg_fdct_ifast.o">
<cofloco>
<entry>### Maximum cost of eval_jpeg_fdct_ifast_start(B) </entry>
<result> 18  </result>
<complexity> constant  </complexity>
<time>0m1.028s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jfdctint.o.jpeg_fdct_islow.o">
<cofloco>
<entry>### Maximum cost of eval_jpeg_fdct_islow_start(B) </entry>
<result> 18  </result>
<complexity> constant  </complexity>
<time>0m1.032s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jidctflt.o.jpeg_idct_float.o">
<cofloco>
<entry>### Maximum cost of eval_jpeg_idct_float_start(V_output_col,B) </entry>
<result> 18  </result>
<complexity> constant  </complexity>
<time>0m1.034s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jidctfst.o.jpeg_idct_ifast.o">
<cofloco>
<entry>### Maximum cost of eval_jpeg_idct_ifast_start(V_output_col,B) </entry>
<result> 18  </result>
<complexity> constant  </complexity>
<time>0m1.038s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jidctint.o.jpeg_idct_islow.o">
<cofloco>
<entry>### Maximum cost of eval_jpeg_idct_islow_start(V_output_col,B) </entry>
<result> 18  </result>
<complexity> constant  </complexity>
<time>0m0.540s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jidctred.o.jpeg_idct_2x2.o">
<cofloco>
<entry>### Maximum cost of eval_jpeg_idct_2x2_start(V_output_col,B) </entry>
<result> 12  </result>
<complexity> constant  </complexity>
<time>0m0.335s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jidctred.o.jpeg_idct_4x4.o">
<cofloco>
<entry>### Maximum cost of eval_jpeg_idct_4x4_start(V_output_col,B) </entry>
<result> 14  </result>
<complexity> constant  </complexity>
<time>0m0.337s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jmemmgr.o.access_virt_barray.o">
<cofloco>
<entry>### Maximum cost of eval_access_virt_barray_start(V_start_row,V_num_rows,V_writable,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.360s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jmemmgr.o.access_virt_sarray.o">
<cofloco>
<entry>### Maximum cost of eval_access_virt_sarray_start(V_start_row,V_num_rows,V_writable,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.356s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jmemmgr.o.alloc_barray.o">
<cofloco>
<entry>### Maximum cost of eval_alloc_barray_start(V_pool_id,V_blocksperrow,V_numrows,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.616s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jmemmgr.o.alloc_sarray.o">
<cofloco>
<entry>### Maximum cost of eval_alloc_sarray_start(V_pool_id,V_samplesperrow,V_numrows,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.617s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jmemmgr.o.alloc_small.o">
<cofloco>
<entry>### Maximum cost of eval_alloc_small_start(V_pool_id,V_sizeofobject,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.589s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jmemmgr.o.do_barray_io.o">
<cofloco>
<entry>### Maximum cost of eval_do_barray_io_start(V_writing,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.942s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jmemmgr.o.do_sarray_io.o">
<cofloco>
<entry>### Maximum cost of eval_do_sarray_io_start(V_writing,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.933s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jmemmgr.o.free_pool.o">
<cofloco>
<entry>### Maximum cost of eval_free_pool_start(V_pool_id,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.084s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jmemmgr.o.realize_virt_arrays.o">
<cofloco>
<entry>### Maximum cost of eval_realize_virt_arrays_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.303s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jmemmgr.o.self_destruct.o">
<cofloco>
<entry>### Maximum cost of eval_self_destruct_start(B) </entry>
<result> 3  </result>
<complexity> constant  </complexity>
<time>0m0.965s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jquant1.o.alloc_fs_workspace.o">
<cofloco>
<entry>### Maximum cost of eval_alloc_fs_workspace_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.299s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jquant1.o.color_quantize3.o">
<cofloco>
<entry>### Maximum cost of eval_color_quantize3_start(V_num_rows,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.415s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jquant1.o.color_quantize.o">
<cofloco>
<entry>### Maximum cost of eval_color_quantize_start(V_num_rows,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.607s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jquant1.o.create_colorindex.o">
<cofloco>
<entry>### Maximum cost of eval_create_colorindex_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.346s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jquant1.o.create_colormap.o">
<cofloco>
<entry>### Maximum cost of eval_create_colormap_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m2.386s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jquant1.o.create_odither_tables.o">
<cofloco>
<entry>### Maximum cost of eval_create_odither_tables_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.280s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jquant1.o.make_odither_array.o">
<cofloco>
<entry>### Maximum cost of eval_make_odither_array_start(V_ncolors,B) </entry>
<result> 289  </result>
<complexity> constant  </complexity>
<time>0m1.180s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jquant1.o.quantize3_ord_dither.o">
<cofloco>
<entry>### Maximum cost of eval_quantize3_ord_dither_start(V_num_rows,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.629s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jquant1.o.quantize_fs_dither.o">
<cofloco>
<entry>### Maximum cost of eval_quantize_fs_dither_start(V_num_rows,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.711s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jquant1.o.quantize_ord_dither.o">
<cofloco>
<entry>### Maximum cost of eval_quantize_ord_dither_start(V_num_rows,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.706s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jquant1.o.select_ncolors.o">
<cofloco>
<entry>### Maximum cost of eval_select_ncolors_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.795s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jquant1.o.start_pass_1_quant.o">
<cofloco>
<entry>### Maximum cost of eval_start_pass_1_quant_start(V_is_pre_scan,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.326s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jquant2.o.compute_color.o">
<cofloco>
<entry>### Maximum cost of eval_compute_color_start(V_icolor,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m3.953s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jquant2.o.fill_inverse_cmap.o">
<cofloco>
<entry>### Maximum cost of eval_fill_inverse_cmap_start(V_c0,V_c1,V_c2,B) </entry>
<result> 201  </result>
<complexity> constant  </complexity>
<time>0m1.155s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jquant2.o.find_best_colors.o">
<cofloco>
<entry>### Maximum cost of eval_find_best_colors_start(V_minc0,V_minc1,V_minc2,V_numcolors,B) </entry>
<result> nat(V_numcolors)*202+130  </result>
<complexity> n  </complexity>
<time>0m0.516s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jquant2.o.find_biggest_color_pop.o">
<cofloco>
<entry>### Maximum cost of eval_find_biggest_color_pop_start(V_numboxes,B) </entry>
<result> nat(V_numboxes)+1  </result>
<complexity> n  </complexity>
<time>0m0.317s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jquant2.o.find_biggest_volume.o">
<cofloco>
<entry>### Maximum cost of eval_find_biggest_volume_start(V_numboxes,B) </entry>
<result> nat(V_numboxes)+1  </result>
<complexity> n  </complexity>
<time>0m0.310s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jquant2.o.find_nearby_colors.o">
<cofloco>
<entry>### Maximum cost of eval_find_nearby_colors_start(V_minc0,V_minc1,V_minc2,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.361s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jquant2.o.init_error_limit.o">
<cofloco>
<entry>### Maximum cost of eval_init_error_limit_start(B) </entry>
<result> 259  </result>
<complexity> constant  </complexity>
<time>0m0.370s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jquant2.o.jinit_2pass_quantizer.o">
<cofloco>
<entry>### Maximum cost of eval_jinit_2pass_quantizer_start(B) </entry>
<result> 97  </result>
<complexity> constant  </complexity>
<time>0m0.341s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jquant2.o.median_cut.o">
<cofloco>
<entry>### Maximum cost of eval_median_cut_start(V_numboxes,V_desired_colors,B) </entry>
<result> nat(-V_numboxes+V_desired_colors)*2+1  </result>
<complexity> n  </complexity>
<time>0m0.344s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jquant2.o.pass2_fs_dither.o">
<cofloco>
<entry>### Maximum cost of eval_pass2_fs_dither_start(V_num_rows,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.429s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jquant2.o.pass2_no_dither.o">
<cofloco>
<entry>### Maximum cost of eval_pass2_no_dither_start(V_num_rows,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.434s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jquant2.o.prescan_quantize.o">
<cofloco>
<entry>### Maximum cost of eval_prescan_quantize_start(V_num_rows,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.571s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jquant2.o.select_colors.o">
<cofloco>
<entry>### Maximum cost of eval_select_colors_start(V_desired_colors,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.998s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jquant2.o.start_pass_2_quant.o">
<cofloco>
<entry>### Maximum cost of eval_start_pass_2_quant_start(V_is_pre_scan,B) </entry>
<result> 33  </result>
<complexity> constant  </complexity>
<time>0m1.000s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jquant2.o.update_box.o">
<cofloco>
<entry>### Maximum cost of eval_update_box_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m11.329s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_jutils.o.jcopy_sample_rows.o">
<cofloco>
<entry>### Maximum cost of eval_jcopy_sample_rows_start(V_source_row,V_dest_row,V_num_rows,V_num_cols,B) </entry>
<result> nat(V_num_rows)+1  </result>
<complexity> n  </complexity>
<time>0m0.983s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdbmp.o.get_24bit_row.o">
<cofloco>
<entry>### Maximum cost of eval_get_24bit_row_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.940s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdbmp.o.get_8bit_row.o">
<cofloco>
<entry>### Maximum cost of eval_get_8bit_row_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.523s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdbmp.o.read_colormap.o">
<cofloco>
<entry>### Maximum cost of eval_read_colormap_start(V_cmaplen,V_mapentrysize,B) </entry>
<result> nat(V_cmaplen)*2+1  </result>
<complexity> n  </complexity>
<time>0m0.356s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdbmp.o.start_input_bmp.o">
<cofloco>
<entry>### Maximum cost of eval_start_input_bmp_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.717s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdgif.o.GetCode.o">
<cofloco>
<entry>### Maximum cost of eval_GetCode_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.313s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdgif.o.get_interlaced_row.o">
<cofloco>
<entry>### Maximum cost of eval_get_interlaced_row_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.308s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdgif.o.get_pixel_rows.o">
<cofloco>
<entry>### Maximum cost of eval_get_pixel_rows_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.305s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdgif.o.load_interlaced_image.o">
<cofloco>
<entry>### Maximum cost of eval_load_interlaced_image_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.369s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdgif.o.LZWReadByte.o">
<cofloco>
<entry>### Maximum cost of eval_LZWReadByte_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.335s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdgif.o.ReadColorMap.o">
<cofloco>
<entry>### Maximum cost of eval_ReadColorMap_start(V_cmaplen,B) </entry>
<result> nat(V_cmaplen)+1  </result>
<complexity> n  </complexity>
<time>0m0.324s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdgif.o.SkipDataBlocks.o">
<cofloco>
<entry>### Maximum cost of eval_SkipDataBlocks_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.301s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdgif.o.start_input_gif.o">
<cofloco>
<entry>### Maximum cost of eval_start_input_gif_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.352s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdppm.o.get_scaled_gray_row.o">
<cofloco>
<entry>### Maximum cost of eval_get_scaled_gray_row_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.303s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdppm.o.get_scaled_rgb_row.o">
<cofloco>
<entry>### Maximum cost of eval_get_scaled_rgb_row_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.302s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdppm.o.get_text_gray_row.o">
<cofloco>
<entry>### Maximum cost of eval_get_text_gray_row_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.303s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdppm.o.get_text_rgb_row.o">
<cofloco>
<entry>### Maximum cost of eval_get_text_rgb_row_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.955s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdppm.o.get_word_gray_row.o">
<cofloco>
<entry>### Maximum cost of eval_get_word_gray_row_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.953s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdppm.o.get_word_rgb_row.o">
<cofloco>
<entry>### Maximum cost of eval_get_word_rgb_row_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.945s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdppm.o.pbm_getc.o">
<cofloco>
<entry>### Maximum cost of eval_pbm_getc_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.932s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdppm.o.read_pbm_integer.o">
<cofloco>
<entry>### Maximum cost of eval_read_pbm_integer_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.017s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdppm.o.start_input_ppm.o">
<cofloco>
<entry>### Maximum cost of eval_start_input_ppm_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.498s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdswitch.o.read_quant_tables.o">
<cofloco>
<entry>### Maximum cost of eval_read_quant_tables_start(V_scale_factor,V_force_baseline,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.518s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdswitch.o.read_scan_integer.o">
<cofloco>
<entry>### Maximum cost of eval_read_scan_integer_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.088s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdswitch.o.read_scan_script.o">
<cofloco>
<entry>### Maximum cost of eval_read_scan_script_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.063s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdswitch.o.read_text_integer.o">
<cofloco>
<entry>### Maximum cost of eval_read_text_integer_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.328s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdswitch.o.set_quant_slots.o">
<cofloco>
<entry>### Maximum cost of eval_set_quant_slots_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.364s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdswitch.o.set_sample_factors.o">
<cofloco>
<entry>### Maximum cost of eval_set_sample_factors_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.361s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdswitch.o.text_getc.o">
<cofloco>
<entry>### Maximum cost of eval_text_getc_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.302s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdtarga.o.get_16bit_row.o">
<cofloco>
<entry>### Maximum cost of eval_get_16bit_row_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.306s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdtarga.o.get_24bit_row.o">
<cofloco>
<entry>### Maximum cost of eval_get_24bit_row_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.304s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdtarga.o.get_8bit_gray_row.o">
<cofloco>
<entry>### Maximum cost of eval_get_8bit_gray_row_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.297s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdtarga.o.get_8bit_row.o">
<cofloco>
<entry>### Maximum cost of eval_get_8bit_row_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.305s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdtarga.o.read_colormap.o">
<cofloco>
<entry>### Maximum cost of eval_read_colormap_start(V_cmaplen,V_mapentrysize,B) </entry>
<result> nat(V_cmaplen)+1  </result>
<complexity> n  </complexity>
<time>0m0.331s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdtarga.o.read_non_rle_pixel.o">
<cofloco>
<entry>### Maximum cost of eval_read_non_rle_pixel_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.305s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdtarga.o.read_rle_pixel.o">
<cofloco>
<entry>### Maximum cost of eval_read_rle_pixel_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.312s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_jpeg_c_src_rdtarga.o.start_input_tga.o">
<cofloco>
<entry>### Maximum cost of eval_start_input_tga_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.495s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_decode_i386.o.synth_1to1_mono.o">
<cofloco>
<entry>### Maximum cost of eval_synth_1to1_mono_start(B) </entry>
<result> 33  </result>
<complexity> constant  </complexity>
<time>0m0.308s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_decode_i386.o.synth_1to1.o">
<cofloco>
<entry>### Maximum cost of eval_synth_1to1_start(V_channel,B) </entry>
<result> 33  </result>
<complexity> constant  </complexity>
<time>0m0.701s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_fft.o.fft_long.o">
<cofloco>
<entry>### Maximum cost of eval_fft_long_start(V_chn,B) </entry>
<result> 382  </result>
<complexity> constant  </complexity>
<time>0m1.092s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_fft.o.fft_short.o">
<cofloco>
<entry>### Maximum cost of eval_fft_short_start(V_chn,B) </entry>
<result> 286  </result>
<complexity> constant  </complexity>
<time>0m1.418s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_fft.o.fht.o">
<cofloco>
<entry>### Maximum cost of eval_fht_start(V_n,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.670s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_fft.o.init_fft.o">
<cofloco>
<entry>### Maximum cost of eval_init_fft_start(B) </entry>
<result> 647  </result>
<complexity> constant  </complexity>
<time>0m1.144s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_formatBitstream.o.BF_FlushBitstream.o">
<cofloco>
<entry>### Maximum cost of eval_BF_FlushBitstream_start(V__BitCount,V__ThisFrameSize,V__BitsRemaining,V__forwardFrameLength,V__forwardSILength,V__elements,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.978s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_formatBitstream.o.BF_LoadHolderFromBitstreamPart.o">
<cofloco>
<entry>### Maximum cost of eval_BF_LoadHolderFromBitstreamPart_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.946s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_formatBitstream.o.BF_PartLength.o">
<cofloco>
<entry>### Maximum cost of eval_BF_PartLength_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.312s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_formatBitstream.o.BF_resizePartHolder.o">
<cofloco>
<entry>### Maximum cost of eval_BF_resizePartHolder_start(V_max_elements,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.322s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_formatBitstream.o.free_side_info_link.o">
<cofloco>
<entry>### Maximum cost of eval_free_side_info_link_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.367s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_formatBitstream.o.free_side_queues.o">
<cofloco>
<entry>### Maximum cost of eval_free_side_queues_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.308s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_formatBitstream.o.main_data.o">
<cofloco>
<entry>### Maximum cost of eval_main_data_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.339s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_formatBitstream.o.side_queue_elements.o">
<cofloco>
<entry>### Maximum cost of eval_side_queue_elements_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.297s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_formatBitstream.o.store_side_info.o">
<cofloco>
<entry>### Maximum cost of eval_store_side_info_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.491s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_formatBitstream.o.writePartMainData.o">
<cofloco>
<entry>### Maximum cost of eval_writePartMainData_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.311s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_formatBitstream.o.writePartSideInfo.o">
<cofloco>
<entry>### Maximum cost of eval_writePartSideInfo_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.307s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_formatBitstream.o.write_side_info.o">
<cofloco>
<entry>### Maximum cost of eval_write_side_info_start(V__ThisFrameSize,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.397s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_get_audio.o.fskip.o">
<cofloco>
<entry>### Maximum cost of eval_fskip_start(V_num_bytes,V_dummy,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.313s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_get_audio.o.get_audio.o">
<cofloco>
<entry>### Maximum cost of eval_get_audio_start(V_stereo,V__count_samples_carefully,V__get_audio_num_samples_read,V__num_samples,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.455s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_get_audio.o.parse_aiff_header.o">
<cofloco>
<entry>### Maximum cost of eval_parse_aiff_header_start(V__num_samples,V__samp_freq,V__num_channels,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.476s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_get_audio.o.parse_wave_header.o">
<cofloco>
<entry>### Maximum cost of eval_parse_wave_header_start(V__num_samples,V__samp_freq,V__num_channels,B) </entry>
<result> 59  </result>
<complexity> constant  </complexity>
<time>0m1.480s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_get_audio.o.read_samples_mp3.o">
<cofloco>
<entry>### Maximum cost of eval_read_samples_mp3_start(V_stereo,B) </entry>
<result> 2305  </result>
<complexity> constant  </complexity>
<time>0m0.998s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_get_audio.o.read_samples_pcm.o">
<cofloco>
<entry>### Maximum cost of eval_read_samples_pcm_start(V_frame_size,V_samples_to_read,V__NativeByteOrder,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.130s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_id3tag.o.id3_pad.o">
<cofloco>
<entry>### Maximum cost of eval_id3_pad_start(V_length,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.971s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_interface.o.decodeMP3.o">
<cofloco>
<entry>### Maximum cost of eval_decodeMP3_start(V_isize,V_osize,V__bitindex,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.069s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_interface.o.ExitMP3.o">
<cofloco>
<entry>### Maximum cost of eval_ExitMP3_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.467s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_interface.o.read_buf_byte.o">
<cofloco>
<entry>### Maximum cost of eval_read_buf_byte_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.306s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_l3bitstream.o.CRC_BF_addEntry.o">
<cofloco>
<entry>### Maximum cost of eval_CRC_BF_addEntry_start(V_value,V_length,V__crc,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.321s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_l3bitstream.o.drain_into_ancillary_data.o">
<cofloco>
<entry>### Maximum cost of eval_drain_into_ancillary_data_start(V_lengthInBits,B) </entry>
<result> nat(V_lengthInBits/32)*2+1  </result>
<complexity> n  </complexity>
<time>0m0.412s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_l3bitstream.o.encodeMainData.o">
<cofloco>
<entry>### Maximum cost of eval_encodeMainData_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m3.621s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_l3bitstream.o.encodeSideInfo.o">
<cofloco>
<entry>### Maximum cost of eval_encodeSideInfo_start(V__crc,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m4.561s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_l3bitstream.o.Huffmancodebits.o">
<cofloco>
<entry>### Maximum cost of eval_Huffmancodebits_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.998s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_l3bitstream.o.III_format_bitstream.o">
<cofloco>
<entry>### Maximum cost of eval_III_format_bitstream_start(V_bitsPerFrame,V__PartHoldersInitialized,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.562s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_lame.o.fill_buffer_resample.o">
<cofloco>
<entry>### Maximum cost of eval_fill_buffer_resample_start(V_desired_len,V_len,V_ch,B) </entry>
<result> nat(V_desired_len)*2+7  </result>
<complexity> n  </complexity>
<time>0m0.374s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_lame.o.lame_encode_buffer_interleaved.o">
<cofloco>
<entry>### Maximum cost of eval_lame_encode_buffer_interleaved_start(V_nsamples,V_mp3buf_size,V__mf_samples_to_encode,V__mf_size,V__lame_encode_buffer_interleaved_frame_buffered,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.335s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_lame.o.lame_encode_buffer.o">
<cofloco>
<entry>### Maximum cost of eval_lame_encode_buffer_start(V_nsamples,V_mp3buf_size,V__lame_encode_buffer_frame_buffered,V__mf_samples_to_encode,V__mf_size,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m3.429s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_lame.o.lame_encode_finish.o">
<cofloco>
<entry>### Maximum cost of eval_lame_encode_finish_start(V_mp3buffer_size,V__mf_samples_to_encode,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.496s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_lame.o.lame_encode_frame.o">
<cofloco>
<entry>### Maximum cost of eval_lame_encode_frame_start(V_mf_size,V_mp3buf_size,V__lame_encode_frame_frameBits,V__lame_encode_frame_bitsPerSlot,V__lame_encode_frame_sentBits,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m3.401s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_lame.o.lame_init_params.o">
<cofloco>
<entry>### Maximum cost of eval_lame_init_params_start(B) </entry>
<result> 119  </result>
<complexity> constant  </complexity>
<time>0m0.601s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_layer3.o.do_layer3.o">
<cofloco>
<entry>### Maximum cost of eval_do_layer3_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m8.713s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_layer3.o.III_antialias.o">
<cofloco>
<entry>### Maximum cost of eval_III_antialias_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.466s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_layer3.o.III_dequantize_sample.o">
<cofloco>
<entry>### Maximum cost of eval_III_dequantize_sample_start(V_sfreq,V_part2bits,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m2.681s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_layer3.o.III_get_scale_factors_1.o">
<cofloco>
<entry>### Maximum cost of eval_III_get_scale_factors_1_start(B) </entry>
<result> 117  </result>
<complexity> constant  </complexity>
<time>0m1.992s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_layer3.o.III_get_scale_factors_2.o">
<cofloco>
<entry>### Maximum cost of eval_III_get_scale_factors_2_start(V_i_stereo,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.513s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_layer3.o.III_get_side_info_1.o">
<cofloco>
<entry>### Maximum cost of eval_III_get_side_info_1_start(V_stereo,V_ms_stereo,V_sfreq,V_single,B) </entry>
<result> nat(V_stereo)*41+16+6  </result>
<complexity> n  </complexity>
<time>0m1.851s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_layer3.o.III_get_side_info_2.o">
<cofloco>
<entry>### Maximum cost of eval_III_get_side_info_2_start(V_stereo,V_ms_stereo,V_sfreq,V_single,B) </entry>
<result> nat(V_stereo)*16+7+1  </result>
<complexity> n  </complexity>
<time>0m0.526s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_layer3.o.III_hybrid.o">
<cofloco>
<entry>### Maximum cost of eval_III_hybrid_start(V_ch,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.439s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_layer3.o.III_i_stereo.o">
<cofloco>
<entry>### Maximum cost of eval_III_i_stereo_start(V_sfreq,V_ms_stereo,V_lsf,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.692s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_layer3.o.init_layer3.o">
<cofloco>
<entry>### Maximum cost of eval_init_layer3_start(V_down_sample_sblimit,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.945s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_mainmpglib.o.lame_decode_fromfile.o">
<cofloco>
<entry>### Maximum cost of eval_lame_decode_fromfile_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.456s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_mainmpglib.o.lame_decode_initfile.o">
<cofloco>
<entry>### Maximum cost of eval_lame_decode_initfile_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.991s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_mainmpglib.o.lame_decode.o">
<cofloco>
<entry>### Maximum cost of eval_lame_decode_start(V_len,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.209s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_main.o.main1.o">
<cofloco>
<entry>### Maximum cost of eval_main1_start(V_argc,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.082s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_newmdct.o.mdct_init48.o">
<cofloco>
<entry>### Maximum cost of eval_mdct_init48_start(B) </entry>
<result> 1281  </result>
<complexity> constant  </complexity>
<time>0m2.730s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_newmdct.o.mdct_long.o">
<cofloco>
<entry>### Maximum cost of eval_mdct_long_start(B) </entry>
<result> 12  </result>
<complexity> constant  </complexity>
<time>0m0.308s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_newmdct.o.mdct_short.o">
<cofloco>
<entry>### Maximum cost of eval_mdct_short_start(B) </entry>
<result> 31  </result>
<complexity> constant  </complexity>
<time>0m0.338s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_newmdct.o.mdct_sub48.o">
<cofloco>
<entry>### Maximum cost of eval_mdct_sub48_start(V__mdct_sub48_init,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.398s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_newmdct.o.window_subband.o">
<cofloco>
<entry>### Maximum cost of eval_window_subband_start(B) </entry>
<result> 289  </result>
<complexity> constant  </complexity>
<time>0m0.372s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_parse.o.lame_parse_args.o">
<cofloco>
<entry>### Maximum cost of eval_lame_parse_args_start(V_argc,V__genre_last,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m5.175s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_portableio.o.ReadBytes.o">
<cofloco>
<entry>### Maximum cost of eval_ReadBytes_start(V_n,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.473s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_portableio.o.ReadBytesSwapped.o">
<cofloco>
<entry>### Maximum cost of eval_ReadBytesSwapped_start(V_n,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.377s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_portableio.o.WriteBytes.o">
<cofloco>
<entry>### Maximum cost of eval_WriteBytes_start(V_n,B) </entry>
<result> nat(V_n)+1  </result>
<complexity> n  </complexity>
<time>0m0.319s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_portableio.o.WriteBytesSwapped.o">
<cofloco>
<entry>### Maximum cost of eval_WriteBytesSwapped_start(V_n,B) </entry>
<result> nat(V_n)+1  </result>
<complexity> n  </complexity>
<time>0m0.314s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_psymodel.o.L3para_read.o">
<cofloco>
<entry>### Maximum cost of eval_L3para_read_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.397s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_psymodel.o.L3psycho_anal.o">
<cofloco>
<entry> </entry>
<result> </result>
<complexity> </complexity>
<time>1m0.053s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_quantize.o.amp_scalefac_bands.o">
<cofloco>
<entry>### Maximum cost of eval_amp_scalefac_bands_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.924s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_quantize.o.calc_noise1.o">
<cofloco>
<entry>### Maximum cost of eval_calc_noise1_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.795s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_quantize.o.init_outer_loop.o">
<cofloco>
<entry>### Maximum cost of eval_init_outer_loop_start(B) </entry>
<result> 2137  </result>
<complexity> constant  </complexity>
<time>0m0.681s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_quantize.o.iteration_loop.o">
<cofloco>
<entry>### Maximum cost of eval_iteration_loop_start(V__convert_mdct,V__reduce_sidechannel,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.551s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_quantize.o.outer_loop.o">
<cofloco>
<entry>### Maximum cost of eval_outer_loop_start(V_targ_bits,V_ch,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.808s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_quantize.o.VBR_iteration_loop.o">
<cofloco>
<entry> </entry>
<result> </result>
<complexity> </complexity>
<time>1m0.007s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_quantize-pvt.o.bin_search_StepSize2.o">
<cofloco>
<entry>### Maximum cost of eval_bin_search_StepSize2_start(V_desired_rate,V_start,V__bin_search_StepSize2_CurrentStep,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.983s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_quantize-pvt.o.calc_xmin.o">
<cofloco>
<entry>### Maximum cost of eval_calc_xmin_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.335s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_quantize-pvt.o.compute_ath.o">
<cofloco>
<entry>### Maximum cost of eval_compute_ath_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.424s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_quantize-pvt.o.inner_loop.o">
<cofloco>
<entry>### Maximum cost of eval_inner_loop_start(V_max_bits,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.402s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_quantize-pvt.o.iteration_init.o">
<cofloco>
<entry>### Maximum cost of eval_iteration_init_start(V__convert_mdct,V__reduce_sidechannel,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.722s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_quantize-pvt.o.loop_break.o">
<cofloco>
<entry>### Maximum cost of eval_loop_break_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.422s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_quantize-pvt.o.ms_convert.o">
<cofloco>
<entry>### Maximum cost of eval_ms_convert_start(B) </entry>
<result> 577  </result>
<complexity> constant  </complexity>
<time>0m0.302s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_quantize-pvt.o.on_pe.o">
<cofloco>
<entry>### Maximum cost of eval_on_pe_start(V_mean_bits,V_gr,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.365s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_quantize-pvt.o.quantize_xrpow.o">
<cofloco>
<entry>### Maximum cost of eval_quantize_xrpow_start(B) </entry>
<result> 145  </result>
<complexity> constant  </complexity>
<time>0m0.312s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_quantize-pvt.o.reduce_side.o">
<cofloco>
<entry>### Maximum cost of eval_reduce_side_start(V_mean_bits,B) </entry>
<result> 3  </result>
<complexity> constant  </complexity>
<time>0m0.327s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_quantize-pvt.o.scale_bitcount_lsf.o">
<cofloco>
<entry>### Maximum cost of eval_scale_bitcount_lsf_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.616s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_quantize-pvt.o.scale_bitcount.o">
<cofloco>
<entry>### Maximum cost of eval_scale_bitcount_start(B) </entry>
<result> 195  </result>
<complexity> constant  </complexity>
<time>0m0.533s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_tabinit.o.make_decode_tables.o">
<cofloco>
<entry>### Maximum cost of eval_make_decode_tables_start(V_scaleval,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.391s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_takehiro.o.best_huffman_divide.o">
<cofloco>
<entry>### Maximum cost of eval_best_huffman_divide_start(V_gr,V_ch,B) </entry>
<result> 1051  </result>
<complexity> constant  </complexity>
<time>0m1.416s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_takehiro.o.best_scalefac_store.o">
<cofloco>
<entry>### Maximum cost of eval_best_scalefac_store_start(V_gr,V_ch,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m3.182s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_takehiro.o.choose_table.o">
<cofloco>
<entry>### Maximum cost of eval_choose_table_start(B) </entry>
<result> 45  </result>
<complexity> constant  </complexity>
<time>0m1.120s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_takehiro.o.choose_table_short.o">
<cofloco>
<entry>### Maximum cost of eval_choose_table_short_start(B) </entry>
<result> 45  </result>
<complexity> constant  </complexity>
<time>0m0.415s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_takehiro.o.count_bit_ESC.o">
<cofloco>
<entry>### Maximum cost of eval_count_bit_ESC_start(V_t1,V_t2,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.298s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_takehiro.o.count_bit_noESC2.o">
<cofloco>
<entry>### Maximum cost of eval_count_bit_noESC2_start(V_table,V__cb_esc_sign,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.292s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_takehiro.o.count_bit_noESC.o">
<cofloco>
<entry>### Maximum cost of eval_count_bit_noESC_start(V_table,V__cb_esc_sign,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.297s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_takehiro.o.count_bit_short_ESC.o">
<cofloco>
<entry>### Maximum cost of eval_count_bit_short_ESC_start(V_t1,V_t2,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.298s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_takehiro.o.count_bit_short_noESC.o">
<cofloco>
<entry>### Maximum cost of eval_count_bit_short_noESC_start(V_table,V__cb_esc_sign,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.295s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_takehiro.o.count_bits_long.o">
<cofloco>
<entry>### Maximum cost of eval_count_bits_long_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.470s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_takehiro.o.count_bits.o">
<cofloco>
<entry>### Maximum cost of eval_count_bits_start(B) </entry>
<result> 1728  </result>
<complexity> constant  </complexity>
<time>0m0.340s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_takehiro.o.ix_max.o">
<cofloco>
<entry>### Maximum cost of eval_ix_max_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.896s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_takehiro.o.scfsi_calc.o">
<cofloco>
<entry>### Maximum cost of eval_scfsi_calc_start(V_ch,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.746s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_util.o.BitrateIndex.o">
<cofloco>
<entry>### Maximum cost of eval_BitrateIndex_start(V_bRate,V_version,V_samplerate,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.775s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_util.o.copy_buffer.o">
<cofloco>
<entry>### Maximum cost of eval_copy_buffer_start(V_size,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.067s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_util.o.display_bitrates.o">
<cofloco>
<entry>### Maximum cost of eval_display_bitrates_start(B) </entry>
<result> 30  </result>
<complexity> constant  </complexity>
<time>0m0.594s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_util.o.putbits.o">
<cofloco>
<entry>### Maximum cost of eval_putbits_start(V_val,V_N,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.327s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_util.o.SwapBytesInWords.o">
<cofloco>
<entry>### Maximum cost of eval_SwapBytesInWords_start(V_words,B) </entry>
<result> nat(V_words)+1  </result>
<complexity> n  </complexity>
<time>0m0.317s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_vbrquantize.o.calc_sfb_ave_noise.o">
<cofloco>
<entry>### Maximum cost of eval_calc_sfb_ave_noise_start(V_stride,V_bw,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.324s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_vbrquantize.o.compute_scalefacs_long.o">
<cofloco>
<entry>### Maximum cost of eval_compute_scalefacs_long_start(B) </entry>
<result> 93  </result>
<complexity> constant  </complexity>
<time>0m0.424s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_vbrquantize.o.compute_scalefacs_short.o">
<cofloco>
<entry>### Maximum cost of eval_compute_scalefacs_short_start(B) </entry>
<result> 61  </result>
<complexity> constant  </complexity>
<time>0m0.338s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_vbrquantize.o.find_scalefac.o">
<cofloco>
<entry>### Maximum cost of eval_find_scalefac_start(V_stride,V_sfb,V_bw,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.476s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_vbrquantize.o.VBR_iteration_loop_new.o">
<cofloco>
<entry>### Maximum cost of eval_VBR_iteration_loop_new_start(V__convert_mdct,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.296s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_VbrTag.o.GetVbrTag.o">
<cofloco>
<entry>### Maximum cost of eval_GetVbrTag_start(B) </entry>
<result> 101  </result>
<complexity> constant  </complexity>
<time>0m0.625s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_VbrTag.o.InitVbrTag.o">
<cofloco>
<entry>### Maximum cost of eval_InitVbrTag_start(V_nVersion,V_nMode,V_SampIndex,V__nVbrNumFrames,V__nVbrFrameBufferSize,V__nZeroStreamSize,V__TotalFrameSize,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.282s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_lame_src_VbrTag.o.PutVbrTag.o">
<cofloco>
<entry>### Maximum cost of eval_PutVbrTag_start(V_nVbrScale,V_nVersion,V__nVbrNumFrames,V__nZeroStreamSize,V__TotalFrameSize,B) </entry>
<result> 100  </result>
<complexity> constant  </complexity>
<time>0m1.309s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_audio_aiff.o.float80.o">
<cofloco>
<entry>### Maximum cost of eval_float80_start(V_num,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.003s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_audio_esd.o.output.o">
<cofloco>
<entry>### Maximum cost of eval_output_start(V_len,V__esd,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.033s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_audio_null.o.update_stats.o">
<cofloco>
<entry>### Maximum cost of eval_update_stats_start(V_nsamples,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.003s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_audio.o.audio_output.o">
<cofloco>
<entry>### Maximum cost of eval_audio_output_start(B) </entry>
<result> 43  </result>
<complexity> constant  </complexity>
<time>0m0.858s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_audio.o.audio_pcm_mulaw.o">
<cofloco>
<entry>### Maximum cost of eval_audio_pcm_mulaw_start(V_nsamples,V_mode,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.438s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_audio.o.audio_pcm_s16be.o">
<cofloco>
<entry>### Maximum cost of eval_audio_pcm_s16be_start(V_nsamples,V_mode,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.441s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_audio.o.audio_pcm_s16le.o">
<cofloco>
<entry>### Maximum cost of eval_audio_pcm_s16le_start(V_nsamples,V_mode,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.443s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_audio.o.audio_pcm_s24be.o">
<cofloco>
<entry>### Maximum cost of eval_audio_pcm_s24be_start(V_nsamples,V_mode,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.444s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_audio.o.audio_pcm_s24le.o">
<cofloco>
<entry>### Maximum cost of eval_audio_pcm_s24le_start(V_nsamples,V_mode,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.441s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_audio.o.audio_pcm_s32be.o">
<cofloco>
<entry>### Maximum cost of eval_audio_pcm_s32be_start(V_nsamples,V_mode,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.440s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_audio.o.audio_pcm_s32le.o">
<cofloco>
<entry>### Maximum cost of eval_audio_pcm_s32le_start(V_nsamples,V_mode,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.175s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_audio.o.audio_pcm_s8.o">
<cofloco>
<entry>### Maximum cost of eval_audio_pcm_s8_start(V_nsamples,V_mode,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.366s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_audio.o.audio_pcm_u8.o">
<cofloco>
<entry>### Maximum cost of eval_audio_pcm_u8_start(V_nsamples,V_mode,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.376s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_audio.o.linear2mulaw.o">
<cofloco>
<entry>### Maximum cost of eval_linear2mulaw_start(V_sample,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.918s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_audio_oss.o.output.o">
<cofloco>
<entry>### Maximum cost of eval_output_start(V_len,V__sfd,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.418s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_bit.o.mad_bit_crc.o">
<cofloco>
<entry>### Maximum cost of eval_mad_bit_crc_start(V_bitptr_coerce1,V_len,V_init,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.624s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_bit.o.mad_bit_read.o">
<cofloco>
<entry>### Maximum cost of eval_mad_bit_read_start(V_len,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.306s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_compat.o.id3_compat_fixup.o">
<cofloco>
<entry>### Maximum cost of eval_id3_compat_fixup_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.411s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_compat.o.id3_compat_lookup.o">
<cofloco>
<entry>### Maximum cost of eval_id3_compat_lookup_start(V_len,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.319s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_compat.o.translate_TCON.o">
<cofloco>
<entry>### Maximum cost of eval_translate_TCON_start(V_length,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.044s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_crc.o.id3_crc_calculate.o">
<cofloco>
<entry>### Maximum cost of eval_id3_crc_calculate_start(V_length,B) </entry>
<result> nat(V_length)*7+1  </result>
<complexity> n  </complexity>
<time>0m1.249s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_decoder.o.mad_decoder_finish.o">
<cofloco>
<entry>### Maximum cost of eval_mad_decoder_finish_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.939s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_decoder.o.receive_io.o">
<cofloco>
<entry>### Maximum cost of eval_receive_io_start(V_fd,V_len,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.520s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_decoder.o.receive.o">
<cofloco>
<entry>### Maximum cost of eval_receive_start(V_fd,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.363s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_decoder.o.run_sync.o">
<cofloco>
<entry>### Maximum cost of eval_run_sync_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.377s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_decoder.o.send_io.o">
<cofloco>
<entry>### Maximum cost of eval_send_io_start(V_fd,V_len,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.488s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_equalizer.o.equalizer_filter.o">
<cofloco>
<entry>### Maximum cost of eval_equalizer_filter_start(B) </entry>
<result> 6273  </result>
<complexity> constant  </complexity>
<time>0m0.544s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_equalizer.o.equalizer_init.o">
<cofloco>
<entry>### Maximum cost of eval_equalizer_init_start(B) </entry>
<result> 33  </result>
<complexity> constant  </complexity>
<time>0m0.302s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_field.o.id3_field_finish.o">
<cofloco>
<entry>### Maximum cost of eval_id3_field_finish_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.359s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_field.o.id3_field_parse.o">
<cofloco>
<entry>### Maximum cost of eval_id3_field_parse_start(V_length,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.392s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_field.o.id3_field_render.o">
<cofloco>
<entry>### Maximum cost of eval_id3_field_render_start(V_terminate,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.923s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_field.o.id3_field_setlatin1.o">
<cofloco>
<entry>### Maximum cost of eval_id3_field_setlatin1_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.951s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_field.o.id3_field_setstring.o">
<cofloco>
<entry>### Maximum cost of eval_id3_field_setstring_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.948s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_field.o.id3_field_setstrings.o">
<cofloco>
<entry>### Maximum cost of eval_id3_field_setstrings_start(V_length,B) </entry>
<result> nat(V_length)*3+2  </result>
<complexity> n  </complexity>
<time>0m1.232s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_file.o.add_tag.o">
<cofloco>
<entry>### Maximum cost of eval_add_tag_start(V_length,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.120s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_file.o.finish_file.o">
<cofloco>
<entry>### Maximum cost of eval_finish_file_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.862s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_file.o.search_tags.o">
<cofloco>
<entry>### Maximum cost of eval_search_tags_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.354s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_file.o.update_primary.o">
<cofloco>
<entry>### Maximum cost of eval_update_primary_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.309s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_filter.o.fadein_filter.o">
<cofloco>
<entry>### Maximum cost of eval_fadein_filter_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.525s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_filter.o.filter_free.o">
<cofloco>
<entry>### Maximum cost of eval_filter_free_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.298s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_filter.o.filter_run.o">
<cofloco>
<entry>### Maximum cost of eval_filter_run_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.296s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_filter.o.mono_filter.o">
<cofloco>
<entry>### Maximum cost of eval_mono_filter_start(B) </entry>
<result> 2245  </result>
<complexity> constant  </complexity>
<time>0m1.070s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_frame2.o.free_bitrate.o">
<cofloco>
<entry>### Maximum cost of eval_free_bitrate_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.254s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_frame2.o.mad_frame_mute.o">
<cofloco>
<entry>### Maximum cost of eval_mad_frame_mute_start(B) </entry>
<result> 3062  </result>
<complexity> constant  </complexity>
<time>0m1.304s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_frame2.o.mad_header_decode.o">
<cofloco>
<entry>### Maximum cost of eval_mad_header_decode_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.580s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_frame.o.id3_frame_delete.o">
<cofloco>
<entry>### Maximum cost of eval_id3_frame_delete_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.319s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_frame.o.id3_frame_new.o">
<cofloco>
<entry>### Maximum cost of eval_id3_frame_new_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.315s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_frame.o.parse_data.o">
<cofloco>
<entry>### Maximum cost of eval_parse_data_start(V_length,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.317s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_frame.o.render_data.o">
<cofloco>
<entry>### Maximum cost of eval_render_data_start(V_length,B) </entry>
<result> max([1,nat(V_length)+1])+1  </result>
<complexity> n  </complexity>
<time>0m0.338s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_frametype.o.id3_frametype_lookup.o">
<cofloco>
<entry>### Maximum cost of eval_id3_frametype_lookup_start(V_len,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.310s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_genre.o.id3_genre_name.o">
<cofloco>
<entry>### Maximum cost of eval_id3_genre_name_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.312s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_latin1.o.id3_latin1_copy.o">
<cofloco>
<entry>### Maximum cost of eval_id3_latin1_copy_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.298s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_latin1.o.id3_latin1_decode.o">
<cofloco>
<entry>### Maximum cost of eval_id3_latin1_decode_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.296s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_latin1.o.id3_latin1_deserialize.o">
<cofloco>
<entry>### Maximum cost of eval_id3_latin1_deserialize_start(V_length,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.798s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_latin1.o.id3_latin1_encode.o">
<cofloco>
<entry>### Maximum cost of eval_id3_latin1_encode_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.917s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_latin1.o.id3_latin1_length.o">
<cofloco>
<entry>### Maximum cost of eval_id3_latin1_length_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.911s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_latin1.o.id3_latin1_serialize.o">
<cofloco>
<entry>### Maximum cost of eval_id3_latin1_serialize_start(V_terminate,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.954s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_layer12.o.II_samples.o">
<cofloco>
<entry>### Maximum cost of eval_II_samples_start(B) </entry>
<result> 96  </result>
<complexity> constant  </complexity>
<time>0m2.125s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_layer12.o.mad_layer_II.o">
<cofloco>
<entry>### Maximum cost of eval_mad_layer_II_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m11.775s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_layer12.o.mad_layer_I.o">
<cofloco>
<entry>### Maximum cost of eval_mad_layer_I_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m5.415s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_layer3.o.III_aliasreduce.o">
<cofloco>
<entry>### Maximum cost of eval_III_aliasreduce_start(V_lines,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.418s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_layer3.o.III_decode.o">
<cofloco>
<entry>### Maximum cost of eval_III_decode_start(V_nch,B) </entry>
<result> nat(V_nch)*51588+17  </result>
<complexity> n  </complexity>
<time>0m5.699s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_layer3.o.III_exponents.o">
<cofloco>
<entry>### Maximum cost of eval_III_exponents_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.471s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_layer3.o.III_freqinver.o">
<cofloco>
<entry>### Maximum cost of eval_III_freqinver_start(V_sb,B) </entry>
<result> 4  </result>
<complexity> constant  </complexity>
<time>0m0.304s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_layer3.o.III_huffdecode.o">
<cofloco>
<entry>### Maximum cost of eval_III_huffdecode_start(V_part2_length,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m15.153s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_layer3.o.III_imdct_l.o">
<cofloco>
<entry>### Maximum cost of eval_III_imdct_l_start(V_block_type,B) </entry>
<result> 72  </result>
<complexity> constant  </complexity>
<time>0m0.569s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_layer3.o.III_imdct_s.o">
<cofloco>
<entry>### Maximum cost of eval_III_imdct_s_start(B) </entry>
<result> 23  </result>
<complexity> constant  </complexity>
<time>0m0.363s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_layer3.o.III_overlap.o">
<cofloco>
<entry>### Maximum cost of eval_III_overlap_start(V_sb,B) </entry>
<result> 19  </result>
<complexity> constant  </complexity>
<time>0m0.303s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_layer3.o.III_overlap_z.o">
<cofloco>
<entry>### Maximum cost of eval_III_overlap_z_start(V_sb,B) </entry>
<result> 19  </result>
<complexity> constant  </complexity>
<time>0m0.304s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_layer3.o.III_reorder.o">
<cofloco>
<entry>### Maximum cost of eval_III_reorder_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.890s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_layer3.o.III_scalefactors_lsf.o">
<cofloco>
<entry>### Maximum cost of eval_III_scalefactors_lsf_start(V_mode_extension,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m2.599s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_layer3.o.III_scalefactors.o">
<cofloco>
<entry>### Maximum cost of eval_III_scalefactors_start(V_scfsi,B) </entry>
<result> 123  </result>
<complexity> constant  </complexity>
<time>0m2.264s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_layer3.o.III_sideinfo.o">
<cofloco>
<entry>### Maximum cost of eval_III_sideinfo_start(V_nch,V_lsf,B) </entry>
<result> nat(V_nch)*58+8  </result>
<complexity> n  </complexity>
<time>0m1.890s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_layer3.o.III_stereo.o">
<cofloco>
<entry>### Maximum cost of eval_III_stereo_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m3.825s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_madplay.o.get_options.o">
<cofloco>
<entry>### Maximum cost of eval_get_options_start(V_argc,V__optind,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.447s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_madplay.o.parse_decibels.o">
<cofloco>
<entry>### Maximum cost of eval_parse_decibels_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.315s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_madplay.o.parse_time.o">
<cofloco>
<entry>### Maximum cost of eval_parse_time_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.624s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_parse.o.id3_parse_latin1.o">
<cofloco>
<entry>### Maximum cost of eval_id3_parse_latin1_start(V_length,V_full,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.401s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_parse.o.id3_parse_string.o">
<cofloco>
<entry>### Maximum cost of eval_id3_parse_string_start(V_length,V_encoding,V_full,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.958s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_player.o.decode_input_read.o">
<cofloco>
<entry>### Maximum cost of eval_decode_input_read_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.153s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_player.o.get_id3.o">
<cofloco>
<entry>### Maximum cost of eval_get_id3_start(V_tagsize,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.632s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_player.o.message.o">
<cofloco>
<entry>### Maximum cost of eval_message_start(V__on_same_line,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.049s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_player.o.play_all.o">
<cofloco>
<entry>### Maximum cost of eval_play_all_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.357s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_player.o.readkey.o">
<cofloco>
<entry>### Maximum cost of eval_readkey_start(V_blocking,V__tty_fd,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.360s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_player.o.setup_filters.o">
<cofloco>
<entry>### Maximum cost of eval_setup_filters_start(B) </entry>
<result> 33  </result>
<complexity> constant  </complexity>
<time>0m0.336s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_player.o.show_id3.o">
<cofloco>
<entry>### Maximum cost of eval_show_id3_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.570s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_player.o.silence.o">
<cofloco>
<entry>### Maximum cost of eval_silence_start(V_duration_coerce0,V_duration_coerce1,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.907s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_player.o.tty_filter.o">
<cofloco>
<entry>### Maximum cost of eval_tty_filter_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.446s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_render.o.id3_render_paddedstring.o">
<cofloco>
<entry>### Maximum cost of eval_id3_render_paddedstring_start(V_length,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.412s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_resample.o.resample_block.o">
<cofloco>
<entry>### Maximum cost of eval_resample_block_start(V_nsamples,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.372s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_stream.o.mad_stream_sync.o">
<cofloco>
<entry>### Maximum cost of eval_mad_stream_sync_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.932s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_synth.o.mad_synth_mute.o">
<cofloco>
<entry>### Maximum cost of eval_mad_synth_mute_start(B) </entry>
<result> 325  </result>
<complexity> constant  </complexity>
<time>0m1.024s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_synth.o.synth_full.o">
<cofloco>
<entry>### Maximum cost of eval_synth_full_start(V_nch,V_ns,B) </entry>
<result> nat(V_ns)*136*nat(V_nch)+nat(V_nch)*62+nat(V_nch)*2+1  </result>
<complexity> n^2  </complexity>
<time>0m0.733s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_synth.o.synth_half.o">
<cofloco>
<entry>### Maximum cost of eval_synth_half_start(V_nch,V_ns,B) </entry>
<result> nat(V_ns)*136*nat(V_nch)+nat(V_nch)*62+nat(V_nch)*2+1  </result>
<complexity> n^2  </complexity>
<time>0m0.738s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_tag.o.id3_tag_clearframes.o">
<cofloco>
<entry>### Maximum cost of eval_id3_tag_clearframes_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.303s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_tag.o.id3_tag_detachframe.o">
<cofloco>
<entry>### Maximum cost of eval_id3_tag_detachframe_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.364s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_tag.o.id3_tag_findframe.o">
<cofloco>
<entry>### Maximum cost of eval_id3_tag_findframe_start(V_index,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.346s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_tag.o.id3_tag_render.o">
<cofloco>
<entry>### Maximum cost of eval_id3_tag_render_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.700s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_tag.o.trim.o">
<cofloco>
<entry>### Maximum cost of eval_trim_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.926s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_tag.o.v1_render.o">
<cofloco>
<entry>### Maximum cost of eval_v1_render_start(B) </entry>
<result> 248  </result>
<complexity> constant  </complexity>
<time>0m1.021s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_tag.o.v2_parse.o">
<cofloco>
<entry>### Maximum cost of eval_v2_parse_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.822s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_timer.o.gcd.o">
<cofloco>
<entry>### Maximum cost of eval_gcd_start(V_num1,V_num2,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.040s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_timer.o.mad_timer_multiply.o">
<cofloco>
<entry>### Maximum cost of eval_mad_timer_multiply_start(V_scalar,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.319s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_ucs4.o.id3_ucs4_copy.o">
<cofloco>
<entry>### Maximum cost of eval_id3_ucs4_copy_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.297s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_ucs4.o.id3_ucs4_getnumber.o">
<cofloco>
<entry>### Maximum cost of eval_id3_ucs4_getnumber_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.299s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_ucs4.o.id3_ucs4_length.o">
<cofloco>
<entry>### Maximum cost of eval_id3_ucs4_length_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.297s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_ucs4.o.id3_ucs4_putnumber.o">
<cofloco>
<entry>### Maximum cost of eval_id3_ucs4_putnumber_start(V_number,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.424s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_ucs4.o.id3_ucs4_utf16size.o">
<cofloco>
<entry>### Maximum cost of eval_id3_ucs4_utf16size_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.913s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_ucs4.o.id3_ucs4_utf8size.o">
<cofloco>
<entry>### Maximum cost of eval_id3_ucs4_utf8size_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.913s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_utf16.o.id3_utf16_decodechar.o">
<cofloco>
<entry>### Maximum cost of eval_id3_utf16_decodechar_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.953s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_utf16.o.id3_utf16_decode.o">
<cofloco>
<entry>### Maximum cost of eval_id3_utf16_decode_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.911s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_utf16.o.id3_utf16_deserialize.o">
<cofloco>
<entry>### Maximum cost of eval_id3_utf16_deserialize_start(V_length,V_byteorder,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.403s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_utf16.o.id3_utf16_encode.o">
<cofloco>
<entry>### Maximum cost of eval_id3_utf16_encode_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.298s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_utf16.o.id3_utf16_length.o">
<cofloco>
<entry>### Maximum cost of eval_id3_utf16_length_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.295s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_utf16.o.id3_utf16_serialize.o">
<cofloco>
<entry>### Maximum cost of eval_id3_utf16_serialize_start(V_byteorder,V_terminate,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.331s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_utf16.o.id3_utf16_size.o">
<cofloco>
<entry>### Maximum cost of eval_id3_utf16_size_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.300s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_utf8.o.id3_utf8_decodechar.o">
<cofloco>
<entry>### Maximum cost of eval_id3_utf8_decodechar_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.305s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_utf8.o.id3_utf8_decode.o">
<cofloco>
<entry>### Maximum cost of eval_id3_utf8_decode_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.296s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_utf8.o.id3_utf8_deserialize.o">
<cofloco>
<entry>### Maximum cost of eval_id3_utf8_deserialize_start(V_length,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.310s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_utf8.o.id3_utf8_encode.o">
<cofloco>
<entry>### Maximum cost of eval_id3_utf8_encode_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.295s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_utf8.o.id3_utf8_length.o">
<cofloco>
<entry>### Maximum cost of eval_id3_utf8_length_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.720s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_utf8.o.id3_utf8_serialize.o">
<cofloco>
<entry>### Maximum cost of eval_id3_utf8_serialize_start(V_terminate,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.998s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_utf8.o.id3_utf8_size.o">
<cofloco>
<entry>### Maximum cost of eval_id3_utf8_size_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.917s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_util.o.id3_util_deunsynchronise.o">
<cofloco>
<entry>### Maximum cost of eval_id3_util_deunsynchronise_start(V_length,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.918s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_util.o.id3_util_unsynchronise.o">
<cofloco>
<entry>### Maximum cost of eval_id3_util_unsynchronise_start(V_length,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.242s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_mad_src_xing.o.xing_parse.o">
<cofloco>
<entry>### Maximum cost of eval_xing_parse_start(V_ptr_coerce1,V_bitlen,B) </entry>
<result> 101  </result>
<complexity> constant  </complexity>
<time>0m0.995s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_aux.o.TIFFDefaultRefBlackWhite.o">
<cofloco>
<entry>### Maximum cost of eval_TIFFDefaultRefBlackWhite_start(B) </entry>
<result> 4  </result>
<complexity> constant  </complexity>
<time>0m0.374s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_aux.o.TIFFDefaultTransferFunction.o">
<cofloco>
<entry>### Maximum cost of eval_TIFFDefaultTransferFunction_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.362s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_compress.o.TIFFFindCODEC.o">
<cofloco>
<entry>### Maximum cost of eval_TIFFFindCODEC_start(V_scheme,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.319s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_compress.o.TIFFUnRegisterCODEC.o">
<cofloco>
<entry>### Maximum cost of eval_TIFFUnRegisterCODEC_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.302s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_dirinfo.o._TIFFFindFieldInfo.o">
<cofloco>
<entry>### Maximum cost of eval__TIFFFindFieldInfo_start(V_tag,V_dt,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.332s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_dirinfo.o._TIFFMergeFieldInfo.o">
<cofloco>
<entry>### Maximum cost of eval__TIFFMergeFieldInfo_start(V_n,B) </entry>
<result> nat(V_n)*2+1  </result>
<complexity> n  </complexity>
<time>0m0.379s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_dirinfo.o._TIFFPrintFieldInfo.o">
<cofloco>
<entry>### Maximum cost of eval__TIFFPrintFieldInfo_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.947s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_dir.o.checkInkNamesString.o">
<cofloco>
<entry>### Maximum cost of eval_checkInkNamesString_start(V_slen,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.176s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_dir.o.setExtraSamples.o">
<cofloco>
<entry>### Maximum cost of eval_setExtraSamples_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.048s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_dir.o.TIFFNumberOfDirectories.o">
<cofloco>
<entry>### Maximum cost of eval_TIFFNumberOfDirectories_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.733s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_dir.o.TIFFReassignTagToIgnore.o">
<cofloco>
<entry>### Maximum cost of eval_TIFFReassignTagToIgnore_start(V_task,V_TIFFtagID,V__TIFFReassignTagToIgnore_tagcount,B) </entry>
<result> nat(V__TIFFReassignTagToIgnore_tagcount)*4+1  </result>
<complexity> n  </complexity>
<time>0m0.379s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_dir.o.TIFFSetDirectory.o">
<cofloco>
<entry>### Maximum cost of eval_TIFFSetDirectory_start(V_dirn,B) </entry>
<result> nat(V_dirn)*2+1  </result>
<complexity> n  </complexity>
<time>0m0.317s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_dir.o.TIFFUnlinkDirectory.o">
<cofloco>
<entry>### Maximum cost of eval_TIFFUnlinkDirectory_start(V_dirn,B) </entry>
<result> nat(V_dirn)*3+1  </result>
<complexity> n  </complexity>
<time>0m0.379s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_dir.o._TIFFVSetField.o">
<cofloco>
<entry>### Maximum cost of eval__TIFFVSetField_start(V_tag,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.567s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_dirread.o.ChopUpSingleUncompressedStrip.o">
<cofloco>
<entry>### Maximum cost of eval_ChopUpSingleUncompressedStrip_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.770s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_dirread.o.EstimateStripByteCounts.o">
<cofloco>
<entry>### Maximum cost of eval_EstimateStripByteCounts_start(V_dircount,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.248s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_dirread.o.TIFFFetchAnyArray.o">
<cofloco>
<entry>### Maximum cost of eval_TIFFFetchAnyArray_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.460s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_dirread.o.TIFFFetchPerSampleAnys.o">
<cofloco>
<entry>### Maximum cost of eval_TIFFFetchPerSampleAnys_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.082s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_dirread.o.TIFFFetchPerSampleShorts.o">
<cofloco>
<entry>### Maximum cost of eval_TIFFFetchPerSampleShorts_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.079s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_dirread.o.TIFFFetchRationalArray.o">
<cofloco>
<entry>### Maximum cost of eval_TIFFFetchRationalArray_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.966s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_dirread.o.TIFFFetchRefBlackWhite.o">
<cofloco>
<entry>### Maximum cost of eval_TIFFFetchRefBlackWhite_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.579s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_dirread.o.TIFFFetchStripThing.o">
<cofloco>
<entry>### Maximum cost of eval_TIFFFetchStripThing_start(V_nstrips,B) </entry>
<result> nat(V_nstrips)*2+1  </result>
<complexity> n  </complexity>
<time>0m0.325s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_dirread.o.TIFFReadDirectory.o">
<cofloco>
<entry>### Maximum cost of eval_TIFFReadDirectory_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m2.001s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_dirwrite.o.TIFFLinkDirectory.o">
<cofloco>
<entry>### Maximum cost of eval_TIFFLinkDirectory_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.338s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_dirwrite.o.TIFFWriteAnyArray.o">
<cofloco>
<entry>### Maximum cost of eval_TIFFWriteAnyArray_start(V_type,V_tag,V_n,B) </entry>
<result> nat(V_n)*7+1  </result>
<complexity> n  </complexity>
<time>0m2.168s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_dirwrite.o.TIFFWritePerSampleAnys.o">
<cofloco>
<entry>### Maximum cost of eval_TIFFWritePerSampleAnys_start(V_type,V_tag,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.113s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_dirwrite.o.TIFFWritePerSampleShorts.o">
<cofloco>
<entry>### Maximum cost of eval_TIFFWritePerSampleShorts_start(V_tag,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.836s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_dirwrite.o.TIFFWriteRationalArray.o">
<cofloco>
<entry>### Maximum cost of eval_TIFFWriteRationalArray_start(V_type,V_tag,V_n,B) </entry>
<result> 268435469/7*nat(V_n)+1  </result>
<complexity> n  </complexity>
<time>0m0.411s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_dirwrite.o.TIFFWriteShortTable.o">
<cofloco>
<entry>### Maximum cost of eval_TIFFWriteShortTable_start(V_tag,V_n,B) </entry>
<result> nat(V_n)*2+1  </result>
<complexity> n  </complexity>
<time>0m0.335s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_dumpmode.o.DumpModeEncode.o">
<cofloco>
<entry>### Maximum cost of eval_DumpModeEncode_start(V_cc,V_s,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.329s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tiff2bw.o.checkcmap.o">
<cofloco>
<entry>### Maximum cost of eval_checkcmap_start(V_n,B) </entry>
<result> nat(V_n)*2+1  </result>
<complexity> n  </complexity>
<time>0m0.325s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tiff2bw.o.compresscontig.o">
<cofloco>
<entry>### Maximum cost of eval_compresscontig_start(V_n,V__RED,V__GREEN,V__BLUE,B) </entry>
<result> nat(V_n)+1  </result>
<complexity> n  </complexity>
<time>0m0.311s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tiff2bw.o.compresspalette.o">
<cofloco>
<entry>### Maximum cost of eval_compresspalette_start(V_n,V__RED,V__GREEN,V__BLUE,B) </entry>
<result> nat(V_n)+1  </result>
<complexity> n  </complexity>
<time>0m0.312s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tiff2bw.o.compresssep.o">
<cofloco>
<entry>### Maximum cost of eval_compresssep_start(V_n,V__RED,V__GREEN,V__BLUE,B) </entry>
<result> nat(V_n)+1  </result>
<complexity> n  </complexity>
<time>0m0.311s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tiff2bw.o.cpTags.o">
<cofloco>
<entry>### Maximum cost of eval_cpTags_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.295s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tiff2bw.o.main1.o">
<cofloco>
<entry>### Maximum cost of eval_main1_start(V_argc,V__RED,V__GREEN,V__BLUE,V__optind,V__compression,V__quality,V__jpegcolormode,V__predictor,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m4.573s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tiff2bw.o.usage.o">
<cofloco>
<entry>### Maximum cost of eval_usage_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.930s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tiff2rgba_tiff2rgba.o.cvt_by_strip.o">
<cofloco>
<entry>### Maximum cost of eval_cvt_by_strip_start(V__rowsperstrip,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m3.945s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tiff2rgba_tiff2rgba.o.cvt_by_tile.o">
<cofloco>
<entry>### Maximum cost of eval_cvt_by_tile_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.669s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tiff2rgba_tiff2rgba.o.cvt_whole_image.o">
<cofloco>
<entry>### Maximum cost of eval_cvt_whole_image_start(V__rowsperstrip,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.678s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tiff2rgba_tiff2rgba.o.main1.o">
<cofloco>
<entry>### Maximum cost of eval_main1_start(V_argc,V__compression,V__rowsperstrip,V__process_by_block,V__optind,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.967s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tiff2rgba_tiff2rgba.o.usage.o">
<cofloco>
<entry>### Maximum cost of eval_usage_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.432s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_fax3.o.Fax3Close.o">
<cofloco>
<entry>### Maximum cost of eval_Fax3Close_start(B) </entry>
<result> 13  </result>
<complexity> constant  </complexity>
<time>0m1.079s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_fax3.o.Fax3Decode1D.o">
<cofloco>
<entry>### Maximum cost of eval_Fax3Decode1D_start(V_occ,V_s,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m6.186s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_fax3.o.Fax3Decode2D.o">
<cofloco>
<entry>### Maximum cost of eval_Fax3Decode2D_start(V_occ,V_s,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m25.610s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_fax3.o.Fax3DecodeRLE.o">
<cofloco>
<entry>### Maximum cost of eval_Fax3DecodeRLE_start(V_occ,V_s,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.658s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_fax3.o.Fax3Encode1DRow.o">
<cofloco>
<entry>### Maximum cost of eval_Fax3Encode1DRow_start(V_bits,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.633s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_fax3.o.Fax3Encode2DRow.o">
<cofloco>
<entry>### Maximum cost of eval_Fax3Encode2DRow_start(V_bits,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.822s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_fax3.o.Fax3Encode.o">
<cofloco>
<entry>### Maximum cost of eval_Fax3Encode_start(V_cc,V_s,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.126s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_fax3.o.Fax3PutBits.o">
<cofloco>
<entry>### Maximum cost of eval_Fax3PutBits_start(V_bits,V_length,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.681s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_fax3.o.Fax3PutEOL.o">
<cofloco>
<entry>### Maximum cost of eval_Fax3PutEOL_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.487s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_fax3.o.Fax4Decode.o">
<cofloco>
<entry>### Maximum cost of eval_Fax4Decode_start(V_occ,V_s,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m8.510s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_fax3.o.Fax4Encode.o">
<cofloco>
<entry>### Maximum cost of eval_Fax4Encode_start(V_cc,V_s,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.929s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_fax3.o.find0span.o">
<cofloco>
<entry>### Maximum cost of eval_find0span_start(V_bs,V_be,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.440s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_fax3.o.find1span.o">
<cofloco>
<entry>### Maximum cost of eval_find1span_start(V_bs,V_be,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.432s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_fax3.o.putspan.o">
<cofloco>
<entry>### Maximum cost of eval_putspan_start(V_span,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.713s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_fax3.o._TIFFFax3fillruns.o">
<cofloco>
<entry>### Maximum cost of eval__TIFFFax3fillruns_start(V_lastx,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m7.297s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tiffdither_tiffdither.o.fsdither.o">
<cofloco>
<entry>### Maximum cost of eval_fsdither_start(V__threshold,V__imagewidth,V__imagelength,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m17.092s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tiffdither_tiffdither.o.main1.o">
<cofloco>
<entry>### Maximum cost of eval_main1_start(V_argc,V__threshold,V__optind,V__imagewidth,V__imagelength,V__compression,V__group3options,V__predictor,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.108s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tiffdither_tiffdither.o.processG3Options.o">
<cofloco>
<entry>### Maximum cost of eval_processG3Options_start(V__group3options,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.306s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tiffdither_tiffdither.o.usage.o">
<cofloco>
<entry>### Maximum cost of eval_usage_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.295s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tiffmedian_tiffmedian.o.create_colorcell.o">
<cofloco>
<entry>### Maximum cost of eval_create_colorcell_start(V_red,V_green,V_blue,V__num_colors,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.558s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tiffmedian_tiffmedian.o.get_histogram.o">
<cofloco>
<entry>### Maximum cost of eval_get_histogram_start(V__imagewidth,V__imagelength,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.532s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tiffmedian_tiffmedian.o.largest_box.o">
<cofloco>
<entry>### Maximum cost of eval_largest_box_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.294s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tiffmedian_tiffmedian.o.main1.o">
<cofloco>
<entry>### Maximum cost of eval_main1_start(V_argc,V__rowsperstrip,V__compression,V__bitspersample,V__predictor,V__num_colors,V__optind,V__imagewidth,V__imagelength,V__samplesperpixel,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m2.092s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tiffmedian_tiffmedian.o.map_colortable.o">
<cofloco>
<entry>### Maximum cost of eval_map_colortable_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.678s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tiffmedian_tiffmedian.o.quant_fsdither.o">
<cofloco>
<entry> </entry>
<result> </result>
<complexity> </complexity>
<time>1m0.009s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tiffmedian_tiffmedian.o.quant.o">
<cofloco>
<entry>### Maximum cost of eval_quant_start(V__imagewidth,V__imagelength,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.512s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tiffmedian_tiffmedian.o.shrinkbox.o">
<cofloco>
<entry>### Maximum cost of eval_shrinkbox_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m5.952s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tiffmedian_tiffmedian.o.splitbox.o">
<cofloco>
<entry>### Maximum cost of eval_splitbox_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m2.033s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tiffmedian_tiffmedian.o.usage.o">
<cofloco>
<entry>### Maximum cost of eval_usage_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.917s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.checkcmap.o">
<cofloco>
<entry>### Maximum cost of eval_checkcmap_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.953s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.cvtcmap.o">
<cofloco>
<entry>### Maximum cost of eval_cvtcmap_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.499s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.gtStripContig.o">
<cofloco>
<entry>### Maximum cost of eval_gtStripContig_start(V_w,V_h,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.354s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.gtStripSeparate.o">
<cofloco>
<entry>### Maximum cost of eval_gtStripSeparate_start(V_w,V_h,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.427s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.gtTileContig.o">
<cofloco>
<entry>### Maximum cost of eval_gtTileContig_start(V_w,V_h,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.492s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.gtTileSeparate.o">
<cofloco>
<entry>### Maximum cost of eval_gtTileSeparate_start(V_w,V_h,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.554s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.makebwmap.o">
<cofloco>
<entry>### Maximum cost of eval_makebwmap_start(B) </entry>
<result> 257  </result>
<complexity> constant  </complexity>
<time>0m0.307s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.makecmap.o">
<cofloco>
<entry>### Maximum cost of eval_makecmap_start(B) </entry>
<result> 257  </result>
<complexity> constant  </complexity>
<time>0m0.316s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.put1bitbwtile.o">
<cofloco>
<entry>### Maximum cost of eval_put1bitbwtile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) </entry>
<result> nat(V_h)*8*nat(V_w/8)+nat(V_h)*2+1  </result>
<complexity> n^2  </complexity>
<time>0m0.901s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.put1bitcmaptile.o">
<cofloco>
<entry>### Maximum cost of eval_put1bitcmaptile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) </entry>
<result> nat(V_h)*8*nat(V_w/8)+nat(V_h)*2+1  </result>
<complexity> n^2  </complexity>
<time>0m2.384s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.put2bitbwtile.o">
<cofloco>
<entry>### Maximum cost of eval_put2bitbwtile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) </entry>
<result> nat(V_h)*4*nat(V_w/4)+nat(V_h)*2+1  </result>
<complexity> n^2  </complexity>
<time>0m2.266s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.put2bitcmaptile.o">
<cofloco>
<entry>### Maximum cost of eval_put2bitcmaptile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) </entry>
<result> nat(V_h)*4*nat(V_w/4)+nat(V_h)*2+1  </result>
<complexity> n^2  </complexity>
<time>0m2.203s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.put4bitbwtile.o">
<cofloco>
<entry>### Maximum cost of eval_put4bitbwtile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) </entry>
<result> nat(V_w/2)*nat(V_h)+nat(V_h)*2+1  </result>
<complexity> n^2  </complexity>
<time>0m1.515s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.put4bitcmaptile.o">
<cofloco>
<entry>### Maximum cost of eval_put4bitcmaptile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) </entry>
<result> nat(V_w/2)*nat(V_h)+nat(V_h)*2+1  </result>
<complexity> n^2  </complexity>
<time>0m1.622s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.put8bitcmaptile.o">
<cofloco>
<entry>### Maximum cost of eval_put8bitcmaptile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) </entry>
<result> nat(V_h)*8*nat(V_w/8)+nat(V_h)*2+1  </result>
<complexity> n^2  </complexity>
<time>0m2.776s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.putcontig8bitYCbCr11tile.o">
<cofloco>
<entry>### Maximum cost of eval_putcontig8bitYCbCr11tile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.752s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.putcontig8bitYCbCr21tile.o">
<cofloco>
<entry>### Maximum cost of eval_putcontig8bitYCbCr21tile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.507s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.putcontig8bitYCbCr22tile.o">
<cofloco>
<entry>### Maximum cost of eval_putcontig8bitYCbCr22tile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.443s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.putcontig8bitYCbCr41tile.o">
<cofloco>
<entry>### Maximum cost of eval_putcontig8bitYCbCr41tile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.559s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.putcontig8bitYCbCr42tile.o">
<cofloco>
<entry>### Maximum cost of eval_putcontig8bitYCbCr42tile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.244s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.putcontig8bitYCbCr44tile.o">
<cofloco>
<entry>### Maximum cost of eval_putcontig8bitYCbCr44tile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.396s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.putgreytile.o">
<cofloco>
<entry>### Maximum cost of eval_putgreytile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) </entry>
<result> nat(V_h)*nat(V_w)+nat(V_h)*2+1  </result>
<complexity> n^2  </complexity>
<time>0m1.329s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.putRGBAAcontig16bittile.o">
<cofloco>
<entry>### Maximum cost of eval_putRGBAAcontig16bittile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) </entry>
<result> nat(V_h)*nat(V_w)+nat(V_h)*2+1  </result>
<complexity> n^2  </complexity>
<time>0m1.289s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.putRGBAAcontig8bittile.o">
<cofloco>
<entry>### Maximum cost of eval_putRGBAAcontig8bittile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) </entry>
<result> nat(V_h)*8*nat(V_w/8)+nat(V_h)*2+1  </result>
<complexity> n^2  </complexity>
<time>0m2.650s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.putRGBAAseparate16bittile.o">
<cofloco>
<entry>### Maximum cost of eval_putRGBAAseparate16bittile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) </entry>
<result> nat(V_h)*nat(V_w)+nat(V_h)*2+1  </result>
<complexity> n^2  </complexity>
<time>0m1.358s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.putRGBAAseparate8bittile.o">
<cofloco>
<entry>### Maximum cost of eval_putRGBAAseparate8bittile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) </entry>
<result> nat(V_h)*8*nat(V_w/8)+nat(V_h)*2+1  </result>
<complexity> n^2  </complexity>
<time>0m2.764s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.putRGBcontig16bittile.o">
<cofloco>
<entry>### Maximum cost of eval_putRGBcontig16bittile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) </entry>
<result> nat(V_h)*nat(V_w)+nat(V_h)*2+1  </result>
<complexity> n^2  </complexity>
<time>0m0.630s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.putRGBcontig8bitCMYKMaptile.o">
<cofloco>
<entry>### Maximum cost of eval_putRGBcontig8bitCMYKMaptile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) </entry>
<result> nat(V_h)*nat(V_w)+nat(V_h)*2+1  </result>
<complexity> n^2  </complexity>
<time>0m0.479s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.putRGBcontig8bitMaptile.o">
<cofloco>
<entry>### Maximum cost of eval_putRGBcontig8bitMaptile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) </entry>
<result> nat(V_h)*nat(V_w)+nat(V_h)*2+1  </result>
<complexity> n^2  </complexity>
<time>0m0.478s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.putRGBcontig8bittile.o">
<cofloco>
<entry>### Maximum cost of eval_putRGBcontig8bittile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) </entry>
<result> nat(V_h)*8*nat(V_w/8)+nat(V_h)*2+1  </result>
<complexity> n^2  </complexity>
<time>0m2.079s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.putRGBseparate16bittile.o">
<cofloco>
<entry>### Maximum cost of eval_putRGBseparate16bittile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) </entry>
<result> nat(V_h)*nat(V_w)+nat(V_h)*2+1  </result>
<complexity> n^2  </complexity>
<time>0m1.264s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.putRGBseparate8bitMaptile.o">
<cofloco>
<entry>### Maximum cost of eval_putRGBseparate8bitMaptile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) </entry>
<result> nat(V_h)*nat(V_w)+nat(V_h)*2+1  </result>
<complexity> n^2  </complexity>
<time>0m1.258s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.putRGBseparate8bittile.o">
<cofloco>
<entry>### Maximum cost of eval_putRGBseparate8bittile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) </entry>
<result> nat(V_h)*8*nat(V_w/8)+nat(V_h)*2+1  </result>
<complexity> n^2  </complexity>
<time>0m2.633s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.putRGBUAcontig16bittile.o">
<cofloco>
<entry>### Maximum cost of eval_putRGBUAcontig16bittile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) </entry>
<result> nat(V_h)*nat(V_w)+nat(V_h)*2+1  </result>
<complexity> n^2  </complexity>
<time>0m1.333s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.putRGBUAcontig8bittile.o">
<cofloco>
<entry>### Maximum cost of eval_putRGBUAcontig8bittile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) </entry>
<result> nat(V_h)*nat(V_w)+nat(V_h)*2+1  </result>
<complexity> n^2  </complexity>
<time>0m1.453s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.putRGBUAseparate16bittile.o">
<cofloco>
<entry>### Maximum cost of eval_putRGBUAseparate16bittile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) </entry>
<result> nat(V_h)*nat(V_w)+nat(V_h)*2+1  </result>
<complexity> n^2  </complexity>
<time>0m1.333s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.putRGBUAseparate8bittile.o">
<cofloco>
<entry>### Maximum cost of eval_putRGBUAseparate8bittile_start(V_x,V_y,V_w,V_h,V_fromskew,V_toskew,B) </entry>
<result> nat(V_h)*nat(V_w)+nat(V_h)*2+1  </result>
<complexity> n^2  </complexity>
<time>0m1.337s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.setupMap.o">
<cofloco>
<entry>### Maximum cost of eval_setupMap_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.283s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.TIFFReadRGBATile.o">
<cofloco>
<entry>### Maximum cost of eval_TIFFReadRGBATile_start(V_col,V_row,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.586s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_getimage.o.TIFFYCbCrToRGBInit.o">
<cofloco>
<entry>### Maximum cost of eval_TIFFYCbCrToRGBInit_start(B) </entry>
<result> 514  </result>
<complexity> constant  </complexity>
<time>0m1.013s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_luv.o.L16fromY.o">
<cofloco>
<entry>### Maximum cost of eval_L16fromY_start(V_n,B) </entry>
<result> nat(V_n)+1  </result>
<complexity> n  </complexity>
<time>0m0.952s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_luv.o.L16toGry.o">
<cofloco>
<entry>### Maximum cost of eval_L16toGry_start(V_n,B) </entry>
<result> nat(V_n)+1  </result>
<complexity> n  </complexity>
<time>0m0.698s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_luv.o.L16toY.o">
<cofloco>
<entry>### Maximum cost of eval_L16toY_start(V_n,B) </entry>
<result> nat(V_n)+1  </result>
<complexity> n  </complexity>
<time>0m0.319s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_luv.o.LogL16Decode.o">
<cofloco>
<entry>### Maximum cost of eval_LogL16Decode_start(V_occ,V_s,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m3.707s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_luv.o.LogL16Encode.o">
<cofloco>
<entry> </entry>
<result> </result>
<complexity> </complexity>
<time>1m0.011s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_luv.o.LogLuvDecode24.o">
<cofloco>
<entry>### Maximum cost of eval_LogLuvDecode24_start(V_occ,V_s,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.439s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_luv.o.LogLuvDecode32.o">
<cofloco>
<entry>### Maximum cost of eval_LogLuvDecode32_start(V_occ,V_s,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m2.031s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_luv.o.LogLuvEncode24.o">
<cofloco>
<entry>### Maximum cost of eval_LogLuvEncode24_start(V_cc,V_s,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.629s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_luv.o.LogLuvEncode32.o">
<cofloco>
<entry> </entry>
<result> </result>
<complexity> </complexity>
<time>1m0.025s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_luv.o.Luv24fromLuv48.o">
<cofloco>
<entry>### Maximum cost of eval_Luv24fromLuv48_start(V_n,B) </entry>
<result> nat(V_n)+1  </result>
<complexity> n  </complexity>
<time>0m1.703s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_luv.o.Luv24fromXYZ.o">
<cofloco>
<entry>### Maximum cost of eval_Luv24fromXYZ_start(V_n,B) </entry>
<result> nat(V_n)+1  </result>
<complexity> n  </complexity>
<time>0m1.714s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_luv.o.Luv24toLuv48.o">
<cofloco>
<entry>### Maximum cost of eval_Luv24toLuv48_start(V_n,B) </entry>
<result> nat(V_n)+1  </result>
<complexity> n  </complexity>
<time>0m0.451s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_luv.o.Luv24toRGB.o">
<cofloco>
<entry>### Maximum cost of eval_Luv24toRGB_start(V_n,B) </entry>
<result> nat(V_n)+1  </result>
<complexity> n  </complexity>
<time>0m0.333s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_luv.o.Luv24toXYZ.o">
<cofloco>
<entry>### Maximum cost of eval_Luv24toXYZ_start(V_n,B) </entry>
<result> nat(V_n)+1  </result>
<complexity> n  </complexity>
<time>0m0.326s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_luv.o.Luv32fromLuv48.o">
<cofloco>
<entry>### Maximum cost of eval_Luv32fromLuv48_start(V_n,B) </entry>
<result> nat(V_n)+1  </result>
<complexity> n  </complexity>
<time>0m0.321s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_luv.o.Luv32fromXYZ.o">
<cofloco>
<entry>### Maximum cost of eval_Luv32fromXYZ_start(V_n,B) </entry>
<result> nat(V_n)+1  </result>
<complexity> n  </complexity>
<time>0m0.321s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_luv.o.Luv32toLuv48.o">
<cofloco>
<entry>### Maximum cost of eval_Luv32toLuv48_start(V_n,B) </entry>
<result> nat(V_n)+1  </result>
<complexity> n  </complexity>
<time>0m0.321s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_luv.o.Luv32toRGB.o">
<cofloco>
<entry>### Maximum cost of eval_Luv32toRGB_start(V_n,B) </entry>
<result> nat(V_n)+1  </result>
<complexity> n  </complexity>
<time>0m0.841s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_luv.o.Luv32toXYZ.o">
<cofloco>
<entry>### Maximum cost of eval_Luv32toXYZ_start(V_n,B) </entry>
<result> nat(V_n)+1  </result>
<complexity> n  </complexity>
<time>0m0.960s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_luv.o.uv_decode.o">
<cofloco>
<entry>### Maximum cost of eval_uv_decode_start(V_c,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.023s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_lzw.o.LZWDecodeCompat.o">
<cofloco>
<entry>### Maximum cost of eval_LZWDecodeCompat_start(V_occ0,V_s,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m2.090s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_lzw.o.LZWDecode.o">
<cofloco>
<entry>### Maximum cost of eval_LZWDecode_start(V_occ0,V_s,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m2.239s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_lzw.o.LZWSetupDecode.o">
<cofloco>
<entry>### Maximum cost of eval_LZWSetupDecode_start(B) </entry>
<result> 257  </result>
<complexity> constant  </complexity>
<time>0m0.948s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_next.o.NeXTDecode.o">
<cofloco>
<entry>### Maximum cost of eval_NeXTDecode_start(V_occ,V_s,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.709s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_open.o.TIFFClientOpen.o">
<cofloco>
<entry>### Maximum cost of eval_TIFFClientOpen_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.431s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_packbits.o.PackBitsDecode.o">
<cofloco>
<entry>### Maximum cost of eval_PackBitsDecode_start(V_occ,V_s,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.481s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_packbits.o.PackBitsEncodeChunk.o">
<cofloco>
<entry>### Maximum cost of eval_PackBitsEncodeChunk_start(V_cc,V_s,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.330s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_packbits.o.PackBitsEncode.o">
<cofloco>
<entry>### Maximum cost of eval_PackBitsEncode_start(V_cc,V_s,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.665s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_predict.o.horAcc16.o">
<cofloco>
<entry>### Maximum cost of eval_horAcc16_start(V_cc,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.472s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_predict.o.horAcc8.o">
<cofloco>
<entry>### Maximum cost of eval_horAcc8_start(V_cc,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.486s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_predict.o.horDiff16.o">
<cofloco>
<entry>### Maximum cost of eval_horDiff16_start(V_cc,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.262s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_predict.o.horDiff8.o">
<cofloco>
<entry>### Maximum cost of eval_horDiff8_start(V_cc,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.535s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_predict.o.swabHorAcc16.o">
<cofloco>
<entry>### Maximum cost of eval_swabHorAcc16_start(V_cc,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.621s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_print.o._TIFFprintAscii.o">
<cofloco>
<entry>### Maximum cost of eval__TIFFprintAscii_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.718s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_swab.o.TIFFReverseBits.o">
<cofloco>
<entry>### Maximum cost of eval_TIFFReverseBits_start(V_n,B) </entry>
<result> nat(V_n/8)+nat(V_n)+2  </result>
<complexity> n  </complexity>
<time>0m0.353s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_swab.o.TIFFSwabArrayOfDouble.o">
<cofloco>
<entry>### Maximum cost of eval_TIFFSwabArrayOfDouble_start(V_n,B) </entry>
<result> nat(V_n)+1  </result>
<complexity> n  </complexity>
<time>0m0.311s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_swab.o.TIFFSwabArrayOfLong.o">
<cofloco>
<entry>### Maximum cost of eval_TIFFSwabArrayOfLong_start(V_n,B) </entry>
<result> nat(V_n)+1  </result>
<complexity> n  </complexity>
<time>0m0.308s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_swab.o.TIFFSwabArrayOfShort.o">
<cofloco>
<entry>### Maximum cost of eval_TIFFSwabArrayOfShort_start(V_n,B) </entry>
<result> nat(V_n)+1  </result>
<complexity> n  </complexity>
<time>0m0.307s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_thunder.o.ThunderDecode.o">
<cofloco>
<entry>### Maximum cost of eval_ThunderDecode_start(V_maxpixels,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.699s </time>
<error></error>
</cofloco>
</example>
<example name="consumer_tiff2bw_src_tif_thunder.o.ThunderDecodeRow.o">
<cofloco>
<entry>### Maximum cost of eval_ThunderDecodeRow_start(V_occ,V_s,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.317s </time>
<error></error>
</cofloco>
</example>
<example name="network_dijkstra_src_dijkstra_large.o.dijkstra.o">
<cofloco>
<entry>### Maximum cost of eval_dijkstra_start(V_chStart,V_chEnd,V__NUM_NODES,V__ch,V__iNode,V__iDist,V__iPrev,V__i,V__iCost,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.095s </time>
<error></error>
</cofloco>
</example>
<example name="network_dijkstra_src_dijkstra_large.o.enqueue.o">
<cofloco>
<entry>### Maximum cost of eval_enqueue_start(V_iNode,V_iDist,V_iPrev,V__g_qCount,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.922s </time>
<error></error>
</cofloco>
</example>
<example name="network_dijkstra_src_dijkstra_large.o.main.o">
<cofloco>
<entry>### Maximum cost of eval_main_start(V_argc,V__NUM_NODES,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m4.125s </time>
<error></error>
</cofloco>
</example>
<example name="network_patricia_src_patricia.o.pat_insert.o">
<cofloco>
<entry>### Maximum cost of eval_pat_insert_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.521s </time>
<error></error>
</cofloco>
</example>
<example name="network_patricia_src_patricia.o.pat_search.o">
<cofloco>
<entry>### Maximum cost of eval_pat_search_start(V_key,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.939s </time>
<error></error>
</cofloco>
</example>
<example name="network_patricia_src_patricia_test.o.main1.o">
<cofloco>
<entry>### Maximum cost of eval_main1_start(V_argc,V_print,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.131s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevabuf.o.abuf_flush.o">
<cofloco>
<entry>### Maximum cost of eval_abuf_flush_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.655s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevddrw.o.gx_default_fill_trapezoid.o">
<cofloco>
<entry>### Maximum cost of eval_gx_default_fill_trapezoid_start(V_ybot,V_ytop,V_swap_axes,V_lop,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.961s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevdflt.o.gx_default_copy_alpha.o">
<cofloco>
<entry>### Maximum cost of eval_gx_default_copy_alpha_start(V_data_x,V_raster,V_id,V_x,V_y,V_width,V_height,V_color,V_depth,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.128s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevdflt.o.gx_default_copy_color.o">
<cofloco>
<entry>### Maximum cost of eval_gx_default_copy_color_start(V_dx,V_raster,V_id,V_x,V_y,V_w,V_h,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.603s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevdflt.o.gx_default_fill_mask.o">
<cofloco>
<entry>### Maximum cost of eval_gx_default_fill_mask_start(V_dx,V_raster,V_id,V_x,V_y,V_w,V_h,V_depth,V_lop,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.661s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevdflt.o.gx_default_strip_tile_rectangle.o">
<cofloco>
<entry>### Maximum cost of eval_gx_default_strip_tile_rectangle_start(V_x,V_y,V_w,V_h,V_color0,V_color1,V_px,V_py,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m3.942s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevm16.o.mem_true16_copy_mono.o">
<cofloco>
<entry>### Maximum cost of eval_mem_true16_copy_mono_start(V_sourcex,V_sraster,V_id,V_x,V_y,V_w,V_h,V_zero,V_one,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.338s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevm16.o.mem_true16_fill_rectangle.o">
<cofloco>
<entry>### Maximum cost of eval_mem_true16_fill_rectangle_start(V_x,V_y,V_w,V_h,V_color,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.260s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevm1.o.mem_mono_copy_mono.o">
<cofloco>
<entry>### Maximum cost of eval_mem_mono_copy_mono_start(V_sourcex,V_sraster,V_id,V_x,V_y,V_w,V_h,V_zero,V_one,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.774s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevm1.o.mem_mono_strip_tile_rectangle.o">
<cofloco>
<entry>### Maximum cost of eval_mem_mono_strip_tile_rectangle_start(V_tx,V_y,V_tw,V_th,V_color0,V_color1,V_px,V_py,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m3.542s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevm24.o.mem_true24_copy_alpha.o">
<cofloco>
<entry>### Maximum cost of eval_mem_true24_copy_alpha_start(V_sourcex,V_sraster,V_id,V_x,V_y,V_w,V_h,V_color,V_depth,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.938s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevm24.o.mem_true24_copy_mono.o">
<cofloco>
<entry>### Maximum cost of eval_mem_true24_copy_mono_start(V_sourcex,V_sraster,V_id,V_x,V_y,V_w,V_h,V_zero,V_one,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m3.508s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevm24.o.mem_true24_fill_rectangle.o">
<cofloco>
<entry>### Maximum cost of eval_mem_true24_fill_rectangle_start(V_x,V_y,V_w,V_h,V_color,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.568s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevm2.o.mem_mapped2_copy_mono.o">
<cofloco>
<entry>### Maximum cost of eval_mem_mapped2_copy_mono_start(V_sourcex,V_sraster,V_id,V_x,V_y,V_w,V_h,V_zero,V_one,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.664s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevm32.o.mem_true32_copy_mono.o">
<cofloco>
<entry>### Maximum cost of eval_mem_true32_copy_mono_start(V_sourcex,V_sraster,V_id,V_x,V_y,V_w,V_h,V_zero,V_one,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.427s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevm32.o.mem_true32_fill_rectangle.o">
<cofloco>
<entry>### Maximum cost of eval_mem_true32_fill_rectangle_start(V_x,V_y,V_w,V_h,V_color,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.772s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevm4.o.mem_mapped4_copy_mono.o">
<cofloco>
<entry>### Maximum cost of eval_mem_mapped4_copy_mono_start(V_sourcex,V_sraster,V_id,V_x,V_y,V_w,V_h,V_zero,V_one,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.429s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevm8.o.mapped8_copy01.o">
<cofloco>
<entry>### Maximum cost of eval_mapped8_copy01_start(V_first_bit,V_sraster,V_draster,V_w,V_h,V_b0,V_b1,B) </entry>
<result> nat(V_h)*nat(V_w)+nat(V_h)*2+1  </result>
<complexity> n^2  </complexity>
<time>0m1.265s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevm8.o.mapped8_copy0N.o">
<cofloco>
<entry>### Maximum cost of eval_mapped8_copy0N_start(V_first_bit,V_sraster,V_draster,V_w,V_h,V_b0,B) </entry>
<result> nat(V_h)*nat(V_w)+nat(V_h)*2+1  </result>
<complexity> n^2  </complexity>
<time>0m1.281s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevm8.o.mapped8_copyN1.o">
<cofloco>
<entry>### Maximum cost of eval_mapped8_copyN1_start(V_first_bit,V_sraster,V_draster,V_w,V_h,V_b1,B) </entry>
<result> nat(V_h)*nat(V_w)+nat(V_h)*2+1  </result>
<complexity> n^2  </complexity>
<time>0m1.271s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevmem.o.gdev_mem_max_height.o">
<cofloco>
<entry>### Maximum cost of eval_gdev_mem_max_height_start(V_width,V_size,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.132s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevmem.o.mem_mapped_map_rgb_color.o">
<cofloco>
<entry>### Maximum cost of eval_mem_mapped_map_rgb_color_start(V_r,V_g,V_b,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.951s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevmem.o.mem_set_line_ptrs.o">
<cofloco>
<entry>### Maximum cost of eval_mem_set_line_ptrs_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.909s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevmrop.o.mem_gray8_rgb24_strip_copy_rop.o">
<cofloco>
<entry>### Maximum cost of eval_mem_gray8_rgb24_strip_copy_rop_start(V_sourcex,V_sraster,V_id,V_x,V_y,V_width,V_height,V_phase_x,V_phase_y,V_lop,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m8.288s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevmrop.o.mem_mono_strip_copy_rop.o">
<cofloco>
<entry>### Maximum cost of eval_mem_mono_strip_copy_rop_start(V_sourcex,V_sraster,V_id,V_x,V_y,V_width,V_height,V_phase_x,V_phase_y,V_lop,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m2.611s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpbm.o.pbm_print_page_loop.o">
<cofloco>
<entry>### Maximum cost of eval_pbm_print_page_loop_start(V_magic,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.323s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpbm.o.pbm_print_row.o">
<cofloco>
<entry>### Maximum cost of eval_pbm_print_row_start(V_depth,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.316s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpbm.o.pgm_print_row.o">
<cofloco>
<entry>### Maximum cost of eval_pgm_print_row_start(V_depth,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.314s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpbm.o.pkm_print_row.o">
<cofloco>
<entry>### Maximum cost of eval_pkm_print_row_start(V_depth,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.595s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpbm.o.ppgm_print_row.o">
<cofloco>
<entry>### Maximum cost of eval_ppgm_print_row_start(V_depth,V_color,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.374s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpbm.o.pxm_pbm_print_row.o">
<cofloco>
<entry>### Maximum cost of eval_pxm_pbm_print_row_start(V_depth,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.963s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpdfi.o.gdev_pdf_copy_color.o">
<cofloco>
<entry>### Maximum cost of eval_gdev_pdf_copy_color_start(V_sourcex,V_raster,V_id,V_x,V_y,V_w,V_h,B) </entry>
<result> nat(V_h)*2+1  </result>
<complexity> n  </complexity>
<time>0m1.172s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpdfi.o.gdev_pdf_copy_mono.o">
<cofloco>
<entry>### Maximum cost of eval_gdev_pdf_copy_mono_start(V_sourcex,V_raster,V_id,V_x,V_y,V_w,V_h,V_zero,V_one,B) </entry>
<result> nat(V_h)*4+1  </result>
<complexity> n  </complexity>
<time>0m1.338s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpdfi.o.gdev_pdf_image_data.o">
<cofloco>
<entry>### Maximum cost of eval_gdev_pdf_image_data_start(V_data_x,V_raster,V_height,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.954s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpdfi.o.pdf_end_binary.o">
<cofloco>
<entry>### Maximum cost of eval_pdf_end_binary_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.918s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpdfi.o.pdf_write_image_params.o">
<cofloco>
<entry>### Maximum cost of eval_pdf_write_image_params_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.539s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpdfm.o.pdf_key_member.o">
<cofloco>
<entry>### Maximum cost of eval_pdf_key_member_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.298s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpdfm.o.pdfmark_annot.o">
<cofloco>
<entry>### Maximum cost of eval_pdfmark_annot_start(V_count,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.551s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpdfm.o.pdfmark_ARTICLE.o">
<cofloco>
<entry>### Maximum cost of eval_pdfmark_ARTICLE_start(V_count,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.366s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpdfm.o.pdfmark_DOCINFO.o">
<cofloco>
<entry>### Maximum cost of eval_pdfmark_DOCINFO_start(V_count,B) </entry>
<result> nat(V_count/2)+1  </result>
<complexity> n  </complexity>
<time>0m0.338s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpdfm.o.pdfmark_find_key.o">
<cofloco>
<entry>### Maximum cost of eval_pdfmark_find_key_start(V_count,B) </entry>
<result> nat(V_count/2)*2+1  </result>
<complexity> n  </complexity>
<time>0m0.334s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpdfm.o.pdfmark_OUT.o">
<cofloco>
<entry>### Maximum cost of eval_pdfmark_OUT_start(V_count,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.392s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpdfm.o.pdfmark_process.o">
<cofloco>
<entry>### Maximum cost of eval_pdfmark_process_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.311s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpdfm.o.pdfmark_save_edited_pairs.o">
<cofloco>
<entry>### Maximum cost of eval_pdfmark_save_edited_pairs_start(V_count,V_add_count,B) </entry>
<result> nat(V_add_count/2)*6+4+nat(V_count/2)*5  </result>
<complexity> n  </complexity>
<time>0m1.250s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpdf.o.dash_pattern_eq.o">
<cofloco>
<entry>### Maximum cost of eval_dash_pattern_eq_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.998s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpdf.o.pdf_close.o">
<cofloco>
<entry>### Maximum cost of eval_pdf_close_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.519s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpdf.o.pdf_close_page.o">
<cofloco>
<entry>### Maximum cost of eval_pdf_close_page_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.336s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpdf.o.pdf_find_resource_by_gs_id.o">
<cofloco>
<entry>### Maximum cost of eval_pdf_find_resource_by_gs_id_start(V_type,V_rid,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.306s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpdf.o.pdf_page_id.o">
<cofloco>
<entry>### Maximum cost of eval_pdf_page_id_start(V_page_num,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.319s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpdf.o.pdf_put_clip_path.o">
<cofloco>
<entry>### Maximum cost of eval_pdf_put_clip_path_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.316s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpdf.o.pdf_put_path.o">
<cofloco>
<entry>### Maximum cost of eval_pdf_put_path_start(V_do_close,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.378s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpdf.o.pdf_reset_page.o">
<cofloco>
<entry>### Maximum cost of eval_pdf_reset_page_start(B) </entry>
<result> 6  </result>
<complexity> constant  </complexity>
<time>0m0.301s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpdf.o.pdf_stroke_path.o">
<cofloco>
<entry>### Maximum cost of eval_pdf_stroke_path_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.398s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpdft.o.pdfshow_process.o">
<cofloco>
<entry>### Maximum cost of eval_pdfshow_process_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.497s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevprn.o.gdev_prn_copy_scan_lines.o">
<cofloco>
<entry>### Maximum cost of eval_gdev_prn_copy_scan_lines_start(V_y,V_size,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.383s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevprn.o.gdev_prn_open_printer.o">
<cofloco>
<entry>### Maximum cost of eval_gdev_prn_open_printer_start(V_binary_mode,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.197s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevprn.o.gdev_prn_put_params.o">
<cofloco>
<entry>### Maximum cost of eval_gdev_prn_put_params_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m7.604s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevprn.o.gx_default_print_page_copies.o">
<cofloco>
<entry>### Maximum cost of eval_gx_default_print_page_copies_start(V_num_copies,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.534s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpsdf.o.psdf_put_enum_param.o">
<cofloco>
<entry>### Maximum cost of eval_psdf_put_enum_param_start(V_ecode,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.306s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpsdf.o.psdf_put_image_params.o">
<cofloco>
<entry>### Maximum cost of eval_psdf_put_image_params_start(V_ecode,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.326s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpsdf.o.psdf_setdash.o">
<cofloco>
<entry>### Maximum cost of eval_psdf_setdash_start(V_count,B) </entry>
<result> nat(V_count)+1  </result>
<complexity> n  </complexity>
<time>0m0.322s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevps.o.image_cache_reset.o">
<cofloco>
<entry>### Maximum cost of eval_image_cache_reset_start(B) </entry>
<result> 138  </result>
<complexity> constant  </complexity>
<time>0m0.305s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevps.o.psw_begin_image.o">
<cofloco>
<entry>### Maximum cost of eval_psw_begin_image_start(V_format,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.383s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevps.o.psw_put_bits.o">
<cofloco>
<entry>### Maximum cost of eval_psw_put_bits_start(V_data_x_bit,V_raster,V_width_bits,V_height,B) </entry>
<result> nat(V_height)+1  </result>
<complexity> n  </complexity>
<time>0m0.320s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevps.o.psw_put_lines.o">
<cofloco>
<entry>### Maximum cost of eval_psw_put_lines_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.299s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpstr.o.pprintf_scan.o">
<cofloco>
<entry>### Maximum cost of eval_pprintf_scan_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.296s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpx.o.pclxl_begin_image.o">
<cofloco>
<entry>### Maximum cost of eval_pclxl_begin_image_start(V_format,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.536s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpx.o.pclxl_beginpage.o">
<cofloco>
<entry>### Maximum cost of eval_pclxl_beginpage_start(B) </entry>
<result> 21  </result>
<complexity> constant  </complexity>
<time>0m0.321s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpx.o.pclxl_char_index.o">
<cofloco>
<entry>### Maximum cost of eval_pclxl_char_index_start(V_id,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.952s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpx.o.pclxl_copy_text_char.o">
<cofloco>
<entry>### Maximum cost of eval_pclxl_copy_text_char_start(V_raster,V_id,V_w,V_h,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.204s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpx.o.pclxl_define_bitmap_char.o">
<cofloco>
<entry>### Maximum cost of eval_pclxl_define_bitmap_char_start(V_ccode,V_raster,V_width_bits,V_height,B) </entry>
<result> nat(V_height)+1  </result>
<complexity> n  </complexity>
<time>0m1.110s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpx.o.pclxl_end_image.o">
<cofloco>
<entry>### Maximum cost of eval_pclxl_end_image_start(V_draw_last,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.983s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpx.o.pclxl_flush_points.o">
<cofloco>
<entry>### Maximum cost of eval_pclxl_flush_points_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.935s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpx.o.pclxl_remove_char.o">
<cofloco>
<entry>### Maximum cost of eval_pclxl_remove_char_start(V_index,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.738s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpx.o.pclxl_setdash.o">
<cofloco>
<entry>### Maximum cost of eval_pclxl_setdash_start(V_count,B) </entry>
<result> nat(V_count)+1  </result>
<complexity> n  </complexity>
<time>0m0.331s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevpx.o.pclxl_write_image_data.o">
<cofloco>
<entry>### Maximum cost of eval_pclxl_write_image_data_start(V_data_bit,V_raster,V_width_bits,V_y,V_height,B) </entry>
<result> nat(V_height)*12+2  </result>
<complexity> n  </complexity>
<time>0m0.513s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevvec.o.dash_pattern_eq.o">
<cofloco>
<entry>### Maximum cost of eval_dash_pattern_eq_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.319s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevvec.o.gdev_vector_dopath.o">
<cofloco>
<entry>### Maximum cost of eval_gdev_vector_dopath_start(V_type,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.414s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevvec.o.gdev_vector_end_image.o">
<cofloco>
<entry>### Maximum cost of eval_gdev_vector_end_image_start(V_draw_last,V_pad,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.308s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevvec.o.gdev_vector_prepare_stroke.o">
<cofloco>
<entry>### Maximum cost of eval_gdev_vector_prepare_stroke_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.380s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevvec.o.gdev_vector_write_clip_path.o">
<cofloco>
<entry>### Maximum cost of eval_gdev_vector_write_clip_path_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.319s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gdevvec.o.gdev_vector_write_polygon.o">
<cofloco>
<entry>### Maximum cost of eval_gdev_vector_write_polygon_start(V_count,V_close,V_type,B) </entry>
<result> nat(V_count)*4+1  </result>
<complexity> n  </complexity>
<time>0m0.675s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gp_unifn.o.gp_file_name_is_absolute.o">
<cofloco>
<entry>### Maximum cost of eval_gp_file_name_is_absolute_start(V_len,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.054s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gp_unifs.o.gp_enumerate_files_close.o">
<cofloco>
<entry>### Maximum cost of eval_gp_enumerate_files_close_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.928s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gp_unifs.o.gp_enumerate_files_init.o">
<cofloco>
<entry>### Maximum cost of eval_gp_enumerate_files_init_start(V_patlen,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.138s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gp_unifs.o.gp_enumerate_files_next.o">
<cofloco>
<entry>### Maximum cost of eval_gp_enumerate_files_next_start(V_maxlen,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.867s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gp_unifs.o.rchr.o">
<cofloco>
<entry>### Maximum cost of eval_rchr_start(V_ch,V_len,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.300s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsalloc.o.alloc_add_chunk.o">
<cofloco>
<entry>### Maximum cost of eval_alloc_add_chunk_start(V_csize,V_has_strings,B) </entry>
<result> 1  </result>
<complexity> constant  </complexity>
<time>0m0.299s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsalloc.o.alloc_link_chunk.o">
<cofloco>
<entry>### Maximum cost of eval_alloc_link_chunk_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.298s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsalloc.o.alloc_obj.o">
<cofloco>
<entry>### Maximum cost of eval_alloc_obj_start(V_lsize,V_immovable,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.316s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsalloc.o.chunk_locate_ptr.o">
<cofloco>
<entry>### Maximum cost of eval_chunk_locate_ptr_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.322s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsalloc.o.compute_free_objects.o">
<cofloco>
<entry>### Maximum cost of eval_compute_free_objects_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.333s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsalloc.o.ialloc_reset_free.o">
<cofloco>
<entry>### Maximum cost of eval_ialloc_reset_free_start(B) </entry>
<result> 202  </result>
<complexity> constant  </complexity>
<time>0m0.304s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsalloc.o.i_alloc_string.o">
<cofloco>
<entry>### Maximum cost of eval_i_alloc_string_start(V_nbytes,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.854s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsalloc.o.i_status.o">
<cofloco>
<entry>### Maximum cost of eval_i_status_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.915s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsalloc.o.i_unregister_root.o">
<cofloco>
<entry>### Maximum cost of eval_i_unregister_root_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.913s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsargs.o.arg_finit.o">
<cofloco>
<entry>### Maximum cost of eval_arg_finit_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.927s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsargs.o.arg_next.o">
<cofloco>
<entry>### Maximum cost of eval_arg_next_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.799s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsbitops.o.bits_bounding_box.o">
<cofloco>
<entry>### Maximum cost of eval_bits_bounding_box_start(V_height,V_raster,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m15.294s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsbitops.o.bits_compress_scaled.o">
<cofloco>
<entry> </entry>
<result> </result>
<complexity> </complexity>
<time>1m0.012s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsbitops.o.bits_fill_rectangle.o">
<cofloco>
<entry>### Maximum cost of eval_bits_fill_rectangle_start(V_dest_bit,V_draster,V_pattern,V_width_bits,V_height,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.849s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsbitops.o.bits_replicate_horizontally.o">
<cofloco>
<entry>### Maximum cost of eval_bits_replicate_horizontally_start(V_width,V_height,V_raster,V_replicated_width,V_replicated_raster,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.241s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsbitops.o.bits_replicate_vertically.o">
<cofloco>
<entry>### Maximum cost of eval_bits_replicate_vertically_start(V_height,V_raster,V_replicated_height,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.717s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsbitops.o.bytes_copy_rectangle.o">
<cofloco>
<entry>### Maximum cost of eval_bytes_copy_rectangle_start(V_dest_raster,V_src_raster,V_width_bytes,V_height,B) </entry>
<result> nat(V_height)+1  </result>
<complexity> n  </complexity>
<time>0m0.973s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsbitops.o.bytes_fill_rectangle.o">
<cofloco>
<entry>### Maximum cost of eval_bytes_fill_rectangle_start(V_raster,V_value,V_width_bytes,V_height,B) </entry>
<result> nat(V_height)+1  </result>
<complexity> n  </complexity>
<time>0m0.990s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gschar0.o.gs_stack_modal_fonts.o">
<cofloco>
<entry>### Maximum cost of eval_gs_stack_modal_fonts_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.541s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gschar0.o.gs_type0_next_glyph.o">
<cofloco>
<entry>### Maximum cost of eval_gs_type0_next_glyph_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.704s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gschar.o.show_enum_reloc_ptrs.o">
<cofloco>
<entry>### Maximum cost of eval_show_enum_reloc_ptrs_start(V_size,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.306s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gschar.o.show_proceed.o">
<cofloco>
<entry>### Maximum cost of eval_show_proceed_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.772s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gscie.o.cie_cache_mult.o">
<cofloco>
<entry>### Maximum cost of eval_cie_cache_mult_start(B) </entry>
<result> 513  </result>
<complexity> constant  </complexity>
<time>0m0.308s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gscie.o.cie_cache_restrict.o">
<cofloco>
<entry>### Maximum cost of eval_cie_cache_restrict_start(B) </entry>
<result> 513  </result>
<complexity> constant  </complexity>
<time>0m0.301s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gscie.o.cie_joint_caches_complete.o">
<cofloco>
<entry>### Maximum cost of eval_cie_joint_caches_complete_start(B) </entry>
<result> 4  </result>
<complexity> constant  </complexity>
<time>0m0.308s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gscie.o.cie_joint_caches_init.o">
<cofloco>
<entry>### Maximum cost of eval_cie_joint_caches_init_start(B) </entry>
<result> 2561  </result>
<complexity> constant  </complexity>
<time>0m1.065s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gscie.o.cie_load_common_cache.o">
<cofloco>
<entry>### Maximum cost of eval_cie_load_common_cache_start(B) </entry>
<result> 5121  </result>
<complexity> constant  </complexity>
<time>0m1.117s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gscie.o.gs_cie_cache_to_fracs.o">
<cofloco>
<entry>### Maximum cost of eval_gs_cie_cache_to_fracs_start(B) </entry>
<result> 513  </result>
<complexity> constant  </complexity>
<time>0m0.938s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gscie.o.gs_cie_cs_common.o">
<cofloco>
<entry>### Maximum cost of eval_gs_cie_cs_common_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.931s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gscie.o.gs_cie_render_complete.o">
<cofloco>
<entry>### Maximum cost of eval_gs_cie_render_complete_start(B) </entry>
<result> 1543  </result>
<complexity> constant  </complexity>
<time>0m1.136s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gscie.o.gs_setcolorrendering.o">
<cofloco>
<entry>### Maximum cost of eval_gs_setcolorrendering_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.928s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gscie.o.gx_install_CIEABC.o">
<cofloco>
<entry>### Maximum cost of eval_gx_install_CIEABC_start(B) </entry>
<result> 2561  </result>
<complexity> constant  </complexity>
<time>0m1.061s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gscie.o.gx_install_CIEA.o">
<cofloco>
<entry>### Maximum cost of eval_gx_install_CIEA_start(B) </entry>
<result> 513  </result>
<complexity> constant  </complexity>
<time>0m0.702s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gscolor.o.load_transfer_map.o">
<cofloco>
<entry>### Maximum cost of eval_load_transfer_map_start(B) </entry>
<result> 257  </result>
<complexity> constant  </complexity>
<time>0m0.306s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsdevice.o.gs_copydevice.o">
<cofloco>
<entry>### Maximum cost of eval_gs_copydevice_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.332s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsdevice.o.gs_copyscanlines.o">
<cofloco>
<entry>### Maximum cost of eval_gs_copyscanlines_start(V_start_y,V_size,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.378s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsdevice.o.gs_setdevice_no_erase.o">
<cofloco>
<entry>### Maximum cost of eval_gs_setdevice_no_erase_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.311s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsdevice.o.gx_device_set_margins.o">
<cofloco>
<entry>### Maximum cost of eval_gx_device_set_margins_start(V_move_origin,B) </entry>
<result> 5  </result>
<complexity> constant  </complexity>
<time>0m0.302s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsdevmem.o.gs_initialize_wordimagedevice.o">
<cofloco>
<entry>### Maximum cost of eval_gs_initialize_wordimagedevice_start(V_width,V_height,V_colors_size,V_word_oriented,V_page_device,B) </entry>
<result> nat(V_colors_size)*12+835  </result>
<complexity> n  </complexity>
<time>0m0.576s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsdparam.o.param_HWColorMap.o">
<cofloco>
<entry>### Maximum cost of eval_param_HWColorMap_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.363s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsdps1.o.gs_rectappend.o">
<cofloco>
<entry>### Maximum cost of eval_gs_rectappend_start(V_count,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.351s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsdps1.o.gs_rectfill.o">
<cofloco>
<entry>### Maximum cost of eval_gs_rectfill_start(V_count,B) </entry>
<result> nat(V_count)*8+1  </result>
<complexity> n  </complexity>
<time>0m0.449s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsfcmap.o.code_map_decode_next.o">
<cofloco>
<entry>### Maximum cost of eval_code_map_decode_next_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.408s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsflip.o.flip3x12.o">
<cofloco>
<entry>### Maximum cost of eval_flip3x12_start(V_offset,V_nbytes,B) </entry>
<result> nat(V_nbytes/3)+1  </result>
<complexity> n  </complexity>
<time>0m0.948s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsflip.o.flip3x1.o">
<cofloco>
<entry>### Maximum cost of eval_flip3x1_start(V_offset,V_nbytes,B) </entry>
<result> nat(V_nbytes)+1  </result>
<complexity> n  </complexity>
<time>0m0.951s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsflip.o.flip3x2.o">
<cofloco>
<entry>### Maximum cost of eval_flip3x2_start(V_offset,V_nbytes,B) </entry>
<result> nat(V_nbytes)+1  </result>
<complexity> n  </complexity>
<time>0m0.954s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsflip.o.flip3x4.o">
<cofloco>
<entry>### Maximum cost of eval_flip3x4_start(V_offset,V_nbytes,B) </entry>
<result> nat(V_nbytes)+1  </result>
<complexity> n  </complexity>
<time>0m0.957s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsflip.o.flip3x8.o">
<cofloco>
<entry>### Maximum cost of eval_flip3x8_start(V_offset,V_nbytes,B) </entry>
<result> nat(V_nbytes)+1  </result>
<complexity> n  </complexity>
<time>0m0.950s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsflip.o.flip4x12.o">
<cofloco>
<entry>### Maximum cost of eval_flip4x12_start(V_offset,V_nbytes,B) </entry>
<result> nat(V_nbytes/3)+1  </result>
<complexity> n  </complexity>
<time>0m0.956s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsflip.o.flip4x1.o">
<cofloco>
<entry>### Maximum cost of eval_flip4x1_start(V_offset,V_nbytes,B) </entry>
<result> nat(V_nbytes)+1  </result>
<complexity> n  </complexity>
<time>0m0.949s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsflip.o.flip4x2.o">
<cofloco>
<entry>### Maximum cost of eval_flip4x2_start(V_offset,V_nbytes,B) </entry>
<result> nat(V_nbytes)+1  </result>
<complexity> n  </complexity>
<time>0m0.311s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsflip.o.flip4x4.o">
<cofloco>
<entry>### Maximum cost of eval_flip4x4_start(V_offset,V_nbytes,B) </entry>
<result> nat(V_nbytes)+1  </result>
<complexity> n  </complexity>
<time>0m0.307s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsflip.o.flip4x8.o">
<cofloco>
<entry>### Maximum cost of eval_flip4x8_start(V_offset,V_nbytes,B) </entry>
<result> nat(V_nbytes)+1  </result>
<complexity> n  </complexity>
<time>0m0.308s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsfont0.o.gs_type0_adjust_matrix.o">
<cofloco>
<entry>### Maximum cost of eval_gs_type0_adjust_matrix_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.403s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsfont.o.font_dir_enum_ptrs.o">
<cofloco>
<entry>### Maximum cost of eval_font_dir_enum_ptrs_start(V_size,V_index,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.337s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsfont.o.font_dir_reloc_ptrs.o">
<cofloco>
<entry>### Maximum cost of eval_font_dir_reloc_ptrs_start(V_size,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.308s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsht1.o.gs_sethalftone_prepare.o">
<cofloco>
<entry>### Maximum cost of eval_gs_sethalftone_prepare_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.431s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsht1.o.gx_ht_construct_threshold_order.o">
<cofloco>
<entry>### Maximum cost of eval_gx_ht_construct_threshold_order_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.507s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsht.o.gx_device_halftone_release.o">
<cofloco>
<entry>### Maximum cost of eval_gx_device_halftone_release_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.308s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsht.o.gx_ht_construct_bits.o">
<cofloco>
<entry>### Maximum cost of eval_gx_ht_construct_bits_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.822s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsht.o.gx_ht_construct_spot_order.o">
<cofloco>
<entry>### Maximum cost of eval_gx_ht_construct_spot_order_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m3.259s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsht.o.gx_ht_process_screen_memory.o">
<cofloco>
<entry>### Maximum cost of eval_gx_ht_process_screen_memory_start(V_accurate,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.945s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsht.o.gx_imager_dev_ht_install.o">
<cofloco>
<entry>### Maximum cost of eval_gx_imager_dev_ht_install_start(V_type,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.793s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsht.o.gx_imager_set_effective_xfer.o">
<cofloco>
<entry>### Maximum cost of eval_gx_imager_set_effective_xfer_start(B) </entry>
<result> 5  </result>
<complexity> constant  </complexity>
<time>0m0.305s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsht.o.gx_sort_ht_order.o">
<cofloco>
<entry>### Maximum cost of eval_gx_sort_ht_order_start(V_N,B) </entry>
<result> nat(V_N)+1  </result>
<complexity> n  </complexity>
<time>0m0.325s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gshtscr.o.gx_compute_cell_values.o">
<cofloco>
<entry>### Maximum cost of eval_gx_compute_cell_values_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.903s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gshtscr.o.pick_cell_size.o">
<cofloco>
<entry>### Maximum cost of eval_pick_cell_size_start(V_max_size,V_min_levels,V_accurate,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.595s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsimage.o.gs_image_cleanup.o">
<cofloco>
<entry>### Maximum cost of eval_gs_image_cleanup_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.319s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsimage.o.gs_image_enum_reloc_ptrs.o">
<cofloco>
<entry>### Maximum cost of eval_gs_image_enum_reloc_ptrs_start(V_size,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.768s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsimage.o.gs_image_next.o">
<cofloco>
<entry>### Maximum cost of eval_gs_image_next_start(V_dsize,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m15.810s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsimage.o.image_enum_init.o">
<cofloco>
<entry>### Maximum cost of eval_image_enum_init_start(B) </entry>
<result> 5  </result>
<complexity> constant  </complexity>
<time>0m1.035s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsimpath.o.gs_imagepath.o">
<cofloco>
<entry>### Maximum cost of eval_gs_imagepath_start(V_width,V_height,B) </entry>
<result> nat(V_width)*2+1+nat(V_width)*2*nat(V_height)+nat(V_height)*2+nat(V_height)*2+1  </result>
<complexity> n^2  </complexity>
<time>0m0.803s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsimpath.o.trace_from.o">
<cofloco>
<entry>### Maximum cost of eval_trace_from_start(V_x0,V_y0,V_detect,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.586s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsiodev.o.gs_findiodevice.o">
<cofloco>
<entry>### Maximum cost of eval_gs_findiodevice_start(V_len,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.309s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsiodev.o.gs_iodev_init.o">
<cofloco>
<entry>### Maximum cost of eval_gs_iodev_init_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.294s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsline.o.gx_set_dash.o">
<cofloco>
<entry>### Maximum cost of eval_gx_set_dash_start(V_length,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.545s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsmemory.o.gs_alloc_memset.o">
<cofloco>
<entry>### Maximum cost of eval_gs_alloc_memset_start(V_fill,V_lsize,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.394s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsmemory.o.gs_heap_free_object.o">
<cofloco>
<entry>### Maximum cost of eval_gs_heap_free_object_start(V__malloc_used,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.325s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsmemory.o.gs_malloc_release.o">
<cofloco>
<entry>### Maximum cost of eval_gs_malloc_release_start(V__malloc_used,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.835s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsmemory.o.heap_available.o">
<cofloco>
<entry>### Maximum cost of eval_heap_available_start(B) </entry>
<result> 80  </result>
<complexity> constant  </complexity>
<time>0m1.144s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsmisc.o.debug_dump_bitmap.o">
<cofloco>
<entry>### Maximum cost of eval_debug_dump_bitmap_start(V_raster,V_height,B) </entry>
<result> nat(V_height)+1  </result>
<complexity> n  </complexity>
<time>0m0.986s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsmisc.o.debug_dump_bytes.o">
<cofloco>
<entry>### Maximum cost of eval_debug_dump_bytes_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.011s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsmisc.o.debug_print_string.o">
<cofloco>
<entry>### Maximum cost of eval_debug_print_string_start(V_len,B) </entry>
<result> nat(V_len)+1  </result>
<complexity> n  </complexity>
<time>0m0.991s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsmisc.o.igcd.o">
<cofloco>
<entry>### Maximum cost of eval_igcd_start(V_x,V_y,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.630s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsparam.o.c_param_find.o">
<cofloco>
<entry>### Maximum cost of eval_c_param_find_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.298s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gspath1.o.gs_arc_add.o">
<cofloco>
<entry>### Maximum cost of eval_gs_arc_add_start(V_clockwise,V_add_line,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.716s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gspcolor.o.bitmap_PaintProc.o">
<cofloco>
<entry>### Maximum cost of eval_bitmap_PaintProc_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.314s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gspcolor.o.gx_dc_pattern_fill_rectangle.o">
<cofloco>
<entry>### Maximum cost of eval_gx_dc_pattern_fill_rectangle_start(V_x,V_y,V_w,V_h,V_lop,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m7.325s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gspcolor.o.gx_dc_pattern_load.o">
<cofloco>
<entry>### Maximum cost of eval_gx_dc_pattern_load_start(V_select,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.668s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsstate.o.gs_grestoreall.o">
<cofloco>
<entry>### Maximum cost of eval_gs_grestoreall_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.405s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsstate.o.gs_imager_state_initialize.o">
<cofloco>
<entry>### Maximum cost of eval_gs_imager_state_initialize_start(B) </entry>
<result> 3  </result>
<complexity> constant  </complexity>
<time>0m0.307s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsstate.o.gstate_share_paths.o">
<cofloco>
<entry>### Maximum cost of eval_gstate_share_paths_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.370s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gstype1.o.gs_type1_charstring_interpret.o">
<cofloco>
<entry> </entry>
<result> </result>
<complexity> </complexity>
<time>0m0.275s </time>
<error>ERROR: Unknown message: error(Failed to parse input file)</error>
</cofloco>
</example>
<example name="office_ghostscript_src_gstype2.o.gs_type2_charstring_interpret.o">
<cofloco>
<entry> </entry>
<result> </result>
<complexity> </complexity>
<time>0m0.273s </time>
<error>ERROR: Unknown message: error(Failed to parse input file)</error>
</cofloco>
</example>
<example name="office_ghostscript_src_gstype42.o.append_simple.o">
<cofloco>
<entry>### Maximum cost of eval_append_simple_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.992s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gstype42.o.gs_type42_font_init.o">
<cofloco>
<entry>### Maximum cost of eval_gs_type42_font_init_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.377s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsutil.o.bytes_compare.o">
<cofloco>
<entry>### Maximum cost of eval_bytes_compare_start(V_len1,V_len2,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.353s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gsutil.o.string_match.o">
<cofloco>
<entry>### Maximum cost of eval_string_match_start(V_len,V_plen,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.297s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxacpath.o.accum_fill_rectangle.o">
<cofloco>
<entry>### Maximum cost of eval_accum_fill_rectangle_start(V_x,V_y,V_w,V_h,V_color,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m6.816s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxbcache.o.gx_bits_cache_alloc.o">
<cofloco>
<entry>### Maximum cost of eval_gx_bits_cache_alloc_start(V_lsize,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.704s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxccache.o.compress_alpha_bits.o">
<cofloco>
<entry>### Maximum cost of eval_compress_alpha_bits_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m2.599s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxccache.o.gx_image_cached_char.o">
<cofloco>
<entry>### Maximum cost of eval_gx_image_cached_char_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.359s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxccache.o.gx_lookup_cached_char.o">
<cofloco>
<entry>### Maximum cost of eval_gx_lookup_cached_char_start(V_glyph,V_wmode,V_alt_depth,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.609s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxccache.o.gx_lookup_fm_pair.o">
<cofloco>
<entry>### Maximum cost of eval_gx_lookup_fm_pair_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.356s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxccman.o.alloc_char_in_chunk.o">
<cofloco>
<entry>### Maximum cost of eval_alloc_char_in_chunk_start(V_icdsize,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.360s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxccman.o.alloc_char.o">
<cofloco>
<entry>### Maximum cost of eval_alloc_char_start(V_icdsize,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.344s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxccman.o.gs_purge_font_from_char_caches.o">
<cofloco>
<entry>### Maximum cost of eval_gs_purge_font_from_char_caches_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.322s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxccman.o.gx_add_cached_char.o">
<cofloco>
<entry>### Maximum cost of eval_gx_add_cached_char_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.304s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxccman.o.gx_add_char_bits.o">
<cofloco>
<entry>### Maximum cost of eval_gx_add_char_bits_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.899s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxccman.o.gx_add_fm_pair.o">
<cofloco>
<entry>### Maximum cost of eval_gx_add_fm_pair_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.018s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxccman.o.gx_char_cache_alloc.o">
<cofloco>
<entry>### Maximum cost of eval_gx_char_cache_alloc_start(V_bmax,V_mmax,V_cmax,V_upper,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.981s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxccman.o.gx_char_cache_init.o">
<cofloco>
<entry>### Maximum cost of eval_gx_char_cache_init_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.941s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxccman.o.gx_lookup_xfont.o">
<cofloco>
<entry>### Maximum cost of eval_gx_lookup_xfont_start(V_encoding_index,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.387s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxccman.o.gx_purge_selected_cached_chars.o">
<cofloco>
<entry>### Maximum cost of eval_gx_purge_selected_cached_chars_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.336s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxccman.o.hash_remove_cached_char.o">
<cofloco>
<entry>### Maximum cost of eval_hash_remove_cached_char_start(V_chi,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.295s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxcht.o.gx_dc_ht_colored_fill_rectangle.o">
<cofloco>
<entry>### Maximum cost of eval_gx_dc_ht_colored_fill_rectangle_start(V_x,V_y,V_w,V_h,V_lop,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m5.693s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxcht.o.set_color_ht.o">
<cofloco>
<entry>### Maximum cost of eval_set_color_ht_start(V_px,V_py,V_w,V_h,V_depth,V_nplanes,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m53.147s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclbits.o.clist_add_tile.o">
<cofloco>
<entry>### Maximum cost of eval_clist_add_tile_start(V_sraster,V_depth,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.770s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclbits.o.clist_change_bits.o">
<cofloco>
<entry>### Maximum cost of eval_clist_change_bits_start(V_depth,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.335s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclbits.o.clist_change_tile.o">
<cofloco>
<entry>### Maximum cost of eval_clist_change_tile_start(V_depth,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.483s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclbits.o.clist_delete_tile.o">
<cofloco>
<entry>### Maximum cost of eval_clist_delete_tile_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.918s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclbits.o.clist_find_bits.o">
<cofloco>
<entry>### Maximum cost of eval_clist_find_bits_start(V_id,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.913s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclbits.o.clist_new_tile_params.o">
<cofloco>
<entry>### Maximum cost of eval_clist_new_tile_params_start(V_depth,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.663s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclbits.o.cmd_compress_bitmap.o">
<cofloco>
<entry>### Maximum cost of eval_cmd_compress_bitmap_start(V_width_bits,V_raster,V_height,B) </entry>
<result> nat(V_height)*2+1  </result>
<complexity> n  </complexity>
<time>0m0.332s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclimag.o.clist_begin_image.o">
<cofloco>
<entry>### Maximum cost of eval_clist_begin_image_start(V_format,V__USE_HL_IMAGES,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.299s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclimag.o.clist_end_image.o">
<cofloco>
<entry>### Maximum cost of eval_clist_end_image_start(V_draw_last,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.072s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclimag.o.clist_fill_mask.o">
<cofloco>
<entry>### Maximum cost of eval_clist_fill_mask_start(V_data_x,V_raster,V_id,V_x,V_y,V_width,V_height,V_depth,V_lop,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m3.727s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclimag.o.clist_image_data.o">
<cofloco>
<entry>### Maximum cost of eval_clist_image_data_start(V_data_x,V_raster,V_yh,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m5.907s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclimag.o.cmd_image_data.o">
<cofloco>
<entry>### Maximum cost of eval_cmd_image_data_start(V_data_x,V_raster,V_bytes_per_row,V_h,B) </entry>
<result> nat(V_h)*2+1  </result>
<complexity> n  </complexity>
<time>0m0.452s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclimag.o.cmd_put_color_mapping.o">
<cofloco>
<entry>### Maximum cost of eval_cmd_put_color_mapping_start(V_write_rgb_to_cmyk,B) </entry>
<result> 35  </result>
<complexity> constant  </complexity>
<time>0m0.411s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclimag.o.cmd_put_halftone.o">
<cofloco>
<entry>### Maximum cost of eval_cmd_put_halftone_start(V_type,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.327s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclimag.o.cmd_put_ht_order.o">
<cofloco>
<entry>### Maximum cost of eval_cmd_put_ht_order_start(V_cname,V_component,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.367s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclimag.o.image_band_box.o">
<cofloco>
<entry>### Maximum cost of eval_image_band_box_start(V_y,V_h,B) </entry>
<result> 5  </result>
<complexity> constant  </complexity>
<time>0m0.351s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclip2.o.tile_clip_initialize.o">
<cofloco>
<entry>### Maximum cost of eval_tile_clip_initialize_start(V_px,V_py,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.341s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclist.o.clist_init.o">
<cofloco>
<entry>### Maximum cost of eval_clist_init_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.697s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclist.o.clist_init_tile_cache.o">
<cofloco>
<entry>### Maximum cost of eval_clist_init_tile_cache_start(V_data_size,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.654s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclist.o.cmd_put_w.o">
<cofloco>
<entry>### Maximum cost of eval_cmd_put_w_start(V_w,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.953s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclist.o.cmd_size_w.o">
<cofloco>
<entry>### Maximum cost of eval_cmd_size_w_start(V_w,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.953s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclist.o.cmd_write_band.o">
<cofloco>
<entry>### Maximum cost of eval_cmd_write_band_start(V_band_min,V_band_max,V_cmd_end,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.955s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclist.o.cmd_write_buffer.o">
<cofloco>
<entry>### Maximum cost of eval_cmd_write_buffer_start(V_cmd_end,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.068s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclpage.o.gdev_prn_render_pages.o">
<cofloco>
<entry>### Maximum cost of eval_gdev_prn_render_pages_start(V_count,B) </entry>
<result> nat(V_count)*3+2  </result>
<complexity> n  </complexity>
<time>0m1.239s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclpath.o.clist_fill_path.o">
<cofloco>
<entry>### Maximum cost of eval_clist_fill_path_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m2.622s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclpath.o.clist_stroke_path.o">
<cofloco>
<entry>### Maximum cost of eval_clist_stroke_path_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.092s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclpath.o.cmd_clear_known.o">
<cofloco>
<entry>### Maximum cost of eval_cmd_clear_known_start(V_known,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.400s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclpath.o.cmd_for_matrix.o">
<cofloco>
<entry>### Maximum cost of eval_cmd_for_matrix_start(B) </entry>
<result> 6  </result>
<complexity> constant  </complexity>
<time>0m0.346s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclpath.o.cmd_put_path.o">
<cofloco>
<entry>### Maximum cost of eval_cmd_put_path_start(V_ymin,V_ymax,V_path_op,V_implicit_close,V_keep_notes,V__cmd_put_path_initial_op,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.436s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclpath.o.cmd_put_segment.o">
<cofloco>
<entry>### Maximum cost of eval_cmd_put_segment_start(V_op,V_notes,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.409s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclpath.o.cmd_write_unknown.o">
<cofloco>
<entry>### Maximum cost of eval_cmd_write_unknown_start(V_must_know,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.411s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclread.o.clist_get_bits.o">
<cofloco>
<entry>### Maximum cost of eval_clist_get_bits_start(V_y,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.431s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclread.o.clist_render_band.o">
<cofloco>
<entry>### Maximum cost of eval_clist_render_band_start(V_x0,V_y0,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m32.977s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclread.o.clist_unpack_short_bits.o">
<cofloco>
<entry>### Maximum cost of eval_clist_unpack_short_bits_start(V_width_bytes,V_height,V_raster,B) </entry>
<result> nat(V_height)+1  </result>
<complexity> n  </complexity>
<time>0m1.114s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclread.o.cmd_get_w.o">
<cofloco>
<entry>### Maximum cost of eval_cmd_get_w_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.913s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclread.o.cmd_read_matrix.o">
<cofloco>
<entry>### Maximum cost of eval_cmd_read_matrix_start(B) </entry>
<result> 6  </result>
<complexity> constant  </complexity>
<time>0m1.071s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclread.o.cmd_resize_halftone.o">
<cofloco>
<entry>### Maximum cost of eval_cmd_resize_halftone_start(V_num_comp,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.342s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclread.o.s_band_read_process.o">
<cofloco>
<entry>### Maximum cost of eval_s_band_read_process_start(V_last,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.400s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclrect.o.clist_fill_rectangle.o">
<cofloco>
<entry>### Maximum cost of eval_clist_fill_rectangle_start(V_x,V_y,V_width,V_height,V_color,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.801s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxclrect.o.clist_strip_tile_rectangle.o">
<cofloco>
<entry>### Maximum cost of eval_clist_strip_tile_rectangle_start(V_x,V_y,V_width,V_height,V_color0,V_color1,V_px,V_py,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m2.682s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxcpath.o.gx_clip_list_add_to_path.o">
<cofloco>
<entry> </entry>
<result> </result>
<complexity> </complexity>
<time>0m0.852s </time>
<error>ERROR: Unknown message: error(Failed to parse input file)</error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxcpath.o.gx_clip_list_free.o">
<cofloco>
<entry>### Maximum cost of eval_gx_clip_list_free_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.915s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxcpath.o.gx_cpath_scale_exp2.o">
<cofloco>
<entry>### Maximum cost of eval_gx_cpath_scale_exp2_start(V_log2_scale_x,V_log2_scale_y,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.954s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxctable.o.gx_color_interpolate_nearest.o">
<cofloco>
<entry>### Maximum cost of eval_gx_color_interpolate_nearest_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.966s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxdcolor.o.gx_dc_default_fill_masked.o">
<cofloco>
<entry>### Maximum cost of eval_gx_dc_default_fill_masked_start(V_data_x,V_raster,V_id,V_x,V_y,V_w,V_h,V_lop,V_invert,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m2.482s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxfill.o.add_y_line.o">
<cofloco>
<entry>### Maximum cost of eval_add_y_line_start(V_dir,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.335s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxfill.o.add_y_list.o">
<cofloco>
<entry>### Maximum cost of eval_add_y_list_start(V_adjust_below,V_adjust_above,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.794s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxfill.o.fill_loop_by_scan_lines.o">
<cofloco>
<entry>### Maximum cost of eval_fill_loop_by_scan_lines_start(V_lop,V_adjust_left,V_adjust_right,V_adjust_below,V_adjust_above,V_band_mask,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.935s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxfill.o.fill_loop_by_trapezoids.o">
<cofloco>
<entry>### Maximum cost of eval_fill_loop_by_trapezoids_start(V_lop,V_adjust_left,V_adjust_right,V_adjust_below,V_adjust_above,V_band_mask,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m8.292s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxfill.o.free_line_list.o">
<cofloco>
<entry>### Maximum cost of eval_free_line_list_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.966s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxfill.o.insert_x_new.o">
<cofloco>
<entry>### Maximum cost of eval_insert_x_new_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.290s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxfill.o.resort_x_line.o">
<cofloco>
<entry>### Maximum cost of eval_resort_x_line_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.299s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxfill.o.unclose_path.o">
<cofloco>
<entry>### Maximum cost of eval_unclose_path_start(V_count,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.355s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxhint1.o.compute_snaps.o">
<cofloco>
<entry>### Maximum cost of eval_compute_snaps_start(V_from_y,V_to_y,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.308s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxhint1.o.compute_zones.o">
<cofloco>
<entry>### Maximum cost of eval_compute_zones_start(V_bottom_count,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.321s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxhint2.o.find_snap.o">
<cofloco>
<entry>### Maximum cost of eval_find_snap_start(V_dv,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.312s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxhint2.o.find_zone.o">
<cofloco>
<entry>### Maximum cost of eval_find_zone_start(V_vbot,V_vtop,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.303s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxhint2.o.store_stem_deltas.o">
<cofloco>
<entry>### Maximum cost of eval_store_stem_deltas_start(V_v,V_dv,V_adj_dv,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.350s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxhint2.o.type1_stem.o">
<cofloco>
<entry>### Maximum cost of eval_type1_stem_start(V_v0,V_d,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.339s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxhint3.o.apply_final_hint.o">
<cofloco>
<entry>### Maximum cost of eval_apply_final_hint_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.969s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxhint3.o.search_hints.o">
<cofloco>
<entry>### Maximum cost of eval_search_hints_start(V_v,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.942s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxhint3.o.type1_apply_path_hints.o">
<cofloco>
<entry>### Maximum cost of eval_type1_apply_path_hints_start(V_closing,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.129s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxht.o.gx_ht_init_cache.o">
<cofloco>
<entry>### Maximum cost of eval_gx_ht_init_cache_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m2.526s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxht.o.ht_tiles_reloc_ptrs.o">
<cofloco>
<entry>### Maximum cost of eval_ht_tiles_reloc_ptrs_start(V_size,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.037s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxht.o.render_ht.o">
<cofloco>
<entry>### Maximum cost of eval_render_ht_start(V_level,V_new_id,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.172s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gximage0.o.gx_default_image_data.o">
<cofloco>
<entry>### Maximum cost of eval_gx_default_image_data_start(V_data_x,V_raster,V_height,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.552s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gximage1.o.copy_landscape.o">
<cofloco>
<entry>### Maximum cost of eval_copy_landscape_start(V_x0,V_x1,V_y_neg,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.402s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gximage1.o.image_render_landscape.o">
<cofloco>
<entry>### Maximum cost of eval_image_render_landscape_start(V_data_x,V_w,V_h,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.840s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gximage1.o.image_render_simple.o">
<cofloco>
<entry>### Maximum cost of eval_image_render_simple_start(V_data_x,V_w,V_h,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.434s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gximage1.o.image_simple_expand.o">
<cofloco>
<entry>### Maximum cost of eval_image_simple_expand_start(V_line_x,V_raster,V_data_x,V_w,V_xcur,V_x_extent,V_zero,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m10.216s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gximage2.o.image_render_mono.o">
<cofloco>
<entry>### Maximum cost of eval_image_render_mono_start(V_data_x,V_w,V_h,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m2.729s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gximage3.o.image_render_color.o">
<cofloco>
<entry>### Maximum cost of eval_image_render_color_start(V_data_x,V_w,V_h,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.357s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gximage4.o.image_render_frac.o">
<cofloco>
<entry>### Maximum cost of eval_image_render_frac_start(V_data_x,V_w,V_h,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.318s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gximage4.o.sample_unpack_12.o">
<cofloco>
<entry>### Maximum cost of eval_sample_unpack_12_start(V_data_x,V_dsize,V_spread,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.330s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gximage5.o.image_render_interpolate.o">
<cofloco>
<entry>### Maximum cost of eval_image_render_interpolate_start(V_data_x,V_iw,V_h,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.763s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gximage.o.gx_default_begin_image.o">
<cofloco>
<entry>### Maximum cost of eval_gx_default_begin_image_start(V_format,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m2.200s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gximage.o.image_init_colors.o">
<cofloco>
<entry>### Maximum cost of eval_image_init_colors_start(V_bps,V_spp,V_multi,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m2.971s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gximage.o.image_init_map.o">
<cofloco>
<entry>### Maximum cost of eval_image_init_map_start(V_map_size,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.742s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxpath2.o.gx_path_bbox.o">
<cofloco>
<entry>### Maximum cost of eval_gx_path_bbox_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.309s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxpath2.o.gx_path_copy_reversed.o">
<cofloco>
<entry>### Maximum cost of eval_gx_path_copy_reversed_start(V_init,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.478s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxpath2.o.gx_path_scale_exp2.o">
<cofloco>
<entry>### Maximum cost of eval_gx_path_scale_exp2_start(V_log2_scale_x,V_log2_scale_y,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.315s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxpath2.o.gx_path_translate.o">
<cofloco>
<entry>### Maximum cost of eval_gx_path_translate_start(V_dx,V_dy,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.297s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxpath2.o.gx_subpath_is_rectangle.o">
<cofloco>
<entry>### Maximum cost of eval_gx_subpath_is_rectangle_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.308s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxpath.o.gx_path_add_lines_notes.o">
<cofloco>
<entry>### Maximum cost of eval_gx_path_add_lines_notes_start(V_count,V_notes,B) </entry>
<result> nat(V_count)*8+1  </result>
<complexity> n  </complexity>
<time>0m0.351s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxpath.o.gx_path_release.o">
<cofloco>
<entry>### Maximum cost of eval_gx_path_release_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.293s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxpcmap.o.gx_pattern_alloc_cache.o">
<cofloco>
<entry>### Maximum cost of eval_gx_pattern_alloc_cache_start(V_num_tiles,V_max_bits,B) </entry>
<result> nat(V_num_tiles)+1  </result>
<complexity> n  </complexity>
<time>0m0.317s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxpcmap.o.gx_pattern_cache_add_entry.o">
<cofloco>
<entry>### Maximum cost of eval_gx_pattern_cache_add_entry_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.845s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxpcmap.o.gx_pattern_cache_winnow.o">
<cofloco>
<entry>### Maximum cost of eval_gx_pattern_cache_winnow_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.954s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxpcopy.o.gx_curve_x_at_y.o">
<cofloco>
<entry>### Maximum cost of eval_gx_curve_x_at_y_start(V_y,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.633s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxpcopy.o.gx_path_copy_reducing.o">
<cofloco>
<entry>### Maximum cost of eval_gx_path_copy_reducing_start(V_fixed_flatness,V_options,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.250s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxpcopy.o.gx_path_is_monotonic.o">
<cofloco>
<entry>### Maximum cost of eval_gx_path_is_monotonic_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.447s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxpcopy.o.monotonize_internal.o">
<cofloco>
<entry>### Maximum cost of eval_monotonize_internal_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.457s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxpdash.o.gx_path_expand_dashes.o">
<cofloco>
<entry>### Maximum cost of eval_gx_path_expand_dashes_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.313s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxpdash.o.subpath_expand_dashes.o">
<cofloco>
<entry>### Maximum cost of eval_subpath_expand_dashes_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m20.579s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxpflat.o.gx_curve_log2_samples.o">
<cofloco>
<entry>### Maximum cost of eval_gx_curve_log2_samples_start(V_x0,V_y0,V_fixed_flat,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.839s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxsample.o.sample_unpack_1.o">
<cofloco>
<entry>### Maximum cost of eval_sample_unpack_1_start(V_data_x,V_dsize,V_spread,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.352s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxsample.o.sample_unpack_2.o">
<cofloco>
<entry>### Maximum cost of eval_sample_unpack_2_start(V_data_x,V_dsize,V_spread,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.353s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxsample.o.sample_unpack_4.o">
<cofloco>
<entry>### Maximum cost of eval_sample_unpack_4_start(V_data_x,V_dsize,V_spread,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.313s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxsample.o.sample_unpack_8.o">
<cofloco>
<entry>### Maximum cost of eval_sample_unpack_8_start(V_data_x,V_dsize,V_spread,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.368s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxstroke.o.gx_stroke_path_only.o">
<cofloco>
<entry>### Maximum cost of eval_gx_stroke_path_only_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.522s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxtype1.o.gs_type1_decrypt.o">
<cofloco>
<entry>### Maximum cost of eval_gs_type1_decrypt_start(V_len,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.324s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxtype1.o.gs_type1_encrypt.o">
<cofloco>
<entry>### Maximum cost of eval_gs_type1_encrypt_start(V_len,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.582s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_gxtype1.o.gs_type1_state_reloc_ptrs.o">
<cofloco>
<entry>### Maximum cost of eval_gs_type1_state_reloc_ptrs_start(V_size,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.941s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_ialloc.o.ialloc_init.o">
<cofloco>
<entry>### Maximum cost of eval_ialloc_init_start(V_chunk_size,V_level2,B) </entry>
<result> 5  </result>
<complexity> constant  </complexity>
<time>0m0.965s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_icontext.o.context_state_free.o">
<cofloco>
<entry>### Maximum cost of eval_context_state_free_start(B) </entry>
<result> 5  </result>
<complexity> constant  </complexity>
<time>0m0.946s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_idebug.o.debug_dump_one_ref.o">
<cofloco>
<entry>### Maximum cost of eval_debug_dump_one_ref_start(V__tx_next_index,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.200s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_idebug.o.debug_dump_refs.o">
<cofloco>
<entry>### Maximum cost of eval_debug_dump_refs_start(V_size,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.057s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_idebug.o.debug_dump_stack.o">
<cofloco>
<entry>### Maximum cost of eval_debug_dump_stack_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.532s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_idict.o.dict_copy_entries.o">
<cofloco>
<entry>### Maximum cost of eval_dict_copy_entries_start(V_new_only,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.356s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_idict.o.dict_create_contents.o">
<cofloco>
<entry>### Maximum cost of eval_dict_create_contents_start(V_size,V_pack,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.362s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_idict.o.dict_find_name_by_index.o">
<cofloco>
<entry>### Maximum cost of eval_dict_find_name_by_index_start(V_nidx,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.707s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_idict.o.dict_find.o">
<cofloco>
<entry>### Maximum cost of eval_dict_find_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.550s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_idict.o.dict_is_permanent_on_dstack.o">
<cofloco>
<entry>### Maximum cost of eval_dict_is_permanent_on_dstack_start(V__min_dstack_size,B) </entry>
<result> nat(V__min_dstack_size)*4+1  </result>
<complexity> n  </complexity>
<time>0m1.219s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_idict.o.dict_next.o">
<cofloco>
<entry>### Maximum cost of eval_dict_next_start(V_index,B) </entry>
<result> nat(V_index)*2+1  </result>
<complexity> n  </complexity>
<time>0m1.017s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_idict.o.dict_put.o">
<cofloco>
<entry>### Maximum cost of eval_dict_put_start(V__dict_auto_expand,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.683s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_idict.o.dict_round_size_large.o">
<cofloco>
<entry>### Maximum cost of eval_dict_round_size_large_start(V_rsize,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.302s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_idict.o.dict_unpack.o">
<cofloco>
<entry>### Maximum cost of eval_dict_unpack_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.353s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_idict.o.dstack_gc_cleanup.o">
<cofloco>
<entry>### Maximum cost of eval_dstack_gc_cleanup_start(V__min_dstack_size,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.491s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_idparam.o.dict_check_uid_param.o">
<cofloco>
<entry>### Maximum cost of eval_dict_check_uid_param_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.330s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_idparam.o.dict_int_array_param.o">
<cofloco>
<entry>### Maximum cost of eval_dict_int_array_param_start(V_maxlen,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.810s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_idparam.o.dict_uid_param.o">
<cofloco>
<entry>### Maximum cost of eval_dict_uid_param_start(V_defaultval,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.052s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_igc.o.gc_clear_reloc.o">
<cofloco>
<entry>### Maximum cost of eval_gc_clear_reloc_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.930s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_igc.o.gc_do_reloc.o">
<cofloco>
<entry>### Maximum cost of eval_gc_do_reloc_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.927s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_igc.o.gc_extend_stack.o">
<cofloco>
<entry>### Maximum cost of eval_gc_extend_stack_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.013s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_igc.o.gc_free_empty_chunks.o">
<cofloco>
<entry>### Maximum cost of eval_gc_free_empty_chunks_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.908s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_igc.o.gc_objects_clear_marks.o">
<cofloco>
<entry>### Maximum cost of eval_gc_objects_clear_marks_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.919s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_igc.o.gc_objects_compact.o">
<cofloco>
<entry>### Maximum cost of eval_gc_objects_compact_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.507s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_igc.o.gc_objects_set_reloc.o">
<cofloco>
<entry>### Maximum cost of eval_gc_objects_set_reloc_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.307s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_igc.o.gc_rescan_chunk.o">
<cofloco>
<entry>### Maximum cost of eval_gc_rescan_chunk_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.316s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_igc.o.gc_trace_chunk.o">
<cofloco>
<entry>### Maximum cost of eval_gc_trace_chunk_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.318s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_igc.o.gc_trace_finish.o">
<cofloco>
<entry>### Maximum cost of eval_gc_trace_finish_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.318s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_igc.o.gc_trace.o">
<cofloco>
<entry> </entry>
<result> </result>
<complexity> </complexity>
<time>0m0.273s </time>
<error>ERROR: Unknown message: error(Failed to parse input file)</error>
</cofloco>
</example>
<example name="office_ghostscript_src_igc.o.gc_unmark_names.o">
<cofloco>
<entry>### Maximum cost of eval_gc_unmark_names_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.330s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_igc.o.gs_reclaim.o">
<cofloco>
<entry>### Maximum cost of eval_gs_reclaim_start(V_global,V__force_global_gc,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m11.404s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_igcref.o.gs_igcref_init.o">
<cofloco>
<entry>### Maximum cost of eval_gs_igcref_init_start(B) </entry>
<result> 22  </result>
<complexity> constant  </complexity>
<time>0m0.402s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_igcref.o.gs_reloc_ref_ptr.o">
<cofloco>
<entry>### Maximum cost of eval_gs_reloc_ref_ptr_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.307s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_igcref.o.gs_reloc_refs.o">
<cofloco>
<entry>### Maximum cost of eval_gs_reloc_refs_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.312s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_igcref.o.refs_clear_marks.o">
<cofloco>
<entry>### Maximum cost of eval_refs_clear_marks_start(V_size,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.294s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_igcref.o.refs_clear_reloc.o">
<cofloco>
<entry>### Maximum cost of eval_refs_clear_reloc_start(V_size,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.298s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_igcref.o.refs_compact.o">
<cofloco>
<entry>### Maximum cost of eval_refs_compact_start(V_size,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.443s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_igcref.o.refs_set_reloc.o">
<cofloco>
<entry>### Maximum cost of eval_refs_set_reloc_start(V_reloc,V_size,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.536s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_igcref.o.ref_struct_clear_marks.o">
<cofloco>
<entry>### Maximum cost of eval_ref_struct_clear_marks_start(V_size,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.905s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_igcstr.o.gc_mark_string.o">
<cofloco>
<entry>### Maximum cost of eval_gc_mark_string_start(V_size,V_set,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.110s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_igcstr.o.gc_strings_compact.o">
<cofloco>
<entry>### Maximum cost of eval_gc_strings_compact_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.936s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_igcstr.o.gc_strings_set_reloc.o">
<cofloco>
<entry>### Maximum cost of eval_gc_strings_set_reloc_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.982s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iinit.o.gs_have_level2.o">
<cofloco>
<entry>### Maximum cost of eval_gs_have_level2_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.990s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iinit.o.make_initial_dict.o">
<cofloco>
<entry>### Maximum cost of eval_make_initial_dict_start(B) </entry>
<result> 18  </result>
<complexity> constant  </complexity>
<time>0m1.176s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iinit.o.obj_init.o">
<cofloco>
<entry>### Maximum cost of eval_obj_init_start(V__min_dstack_size,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.582s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iinit.o.op_init.o">
<cofloco>
<entry>### Maximum cost of eval_op_init_start(V__op_def_count,V__gs_interp_num_special_ops,V__gs_interp_max_op_num_args,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.372s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_ilocate.o.gc_locate.o">
<cofloco>
<entry>### Maximum cost of eval_gc_locate_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.357s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_imainarg.o.esc_strcat.o">
<cofloco>
<entry>### Maximum cost of eval_esc_strcat_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.297s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_imainarg.o.gs_main_init_with_args.o">
<cofloco>
<entry>### Maximum cost of eval_gs_main_init_with_args_start(V_argc,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.395s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_imainarg.o.print_devices.o">
<cofloco>
<entry>### Maximum cost of eval_print_devices_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.410s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_imainarg.o.print_emulators.o">
<cofloco>
<entry>### Maximum cost of eval_print_emulators_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.918s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_imainarg.o.print_paths.o">
<cofloco>
<entry>### Maximum cost of eval_print_paths_start(V__gp_file_name_list_separator,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.685s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_imain.o.file_path_add.o">
<cofloco>
<entry>### Maximum cost of eval_file_path_add_start(V__gp_file_name_list_separator,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.966s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_imain.o.init2_make_string_array.o">
<cofloco>
<entry>### Maximum cost of eval_init2_make_string_array_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.929s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iname.o.name_alloc_sub.o">
<cofloco>
<entry>### Maximum cost of eval_name_alloc_sub_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.177s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iname.o.name_init.o">
<cofloco>
<entry>### Maximum cost of eval_name_init_start(V_count,B) </entry>
<result> 8449/64  </result>
<complexity> constant  </complexity>
<time>0m1.054s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iname.o.name_next_valid_index.o">
<cofloco>
<entry>### Maximum cost of eval_name_next_valid_index_start(V_nidx,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.924s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iname.o.name_ref.o">
<cofloco>
<entry>### Maximum cost of eval_name_ref_start(V_size,V_enterflag,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.468s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iname.o.name_restore.o">
<cofloco>
<entry>### Maximum cost of eval_name_restore_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.354s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iname.o.name_scan_sub.o">
<cofloco>
<entry>### Maximum cost of eval_name_scan_sub_start(V_sub_index,V_free_empty,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.352s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iname.o.name_sub_reloc_ptrs.o">
<cofloco>
<entry>### Maximum cost of eval_name_sub_reloc_ptrs_start(V_size,B) </entry>
<result> 129  </result>
<complexity> constant  </complexity>
<time>0m0.307s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iname.o.name_table_reloc_ptrs.o">
<cofloco>
<entry>### Maximum cost of eval_name_table_reloc_ptrs_start(V_size,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.311s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iname.o.name_trace_finish.o">
<cofloco>
<entry>### Maximum cost of eval_name_trace_finish_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.414s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iname.o.name_unmark_all.o">
<cofloco>
<entry>### Maximum cost of eval_name_unmark_all_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.378s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_interp.o.gs_call_interp.o">
<cofloco>
<entry>### Maximum cost of eval_gs_call_interp_start(V_user_errors,V__min_dstack_size,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.506s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_interp.o.gs_interp_make_oper.o">
<cofloco>
<entry>### Maximum cost of eval_gs_interp_make_oper_start(V_idx,B) </entry>
<result> 21  </result>
<complexity> constant  </complexity>
<time>0m0.312s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_interp.o.interp.o">
<cofloco>
<entry> </entry>
<result> </result>
<complexity> </complexity>
<time>0m0.276s </time>
<error>ERROR: Unknown message: error(Failed to parse input file)</error>
</cofloco>
</example>
<example name="office_ghostscript_src_interp.o.set_gc_signal.o">
<cofloco>
<entry>### Maximum cost of eval_set_gc_signal_start(V_value,B) </entry>
<result> 5  </result>
<complexity> constant  </complexity>
<time>0m0.777s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iparam.o.array_param_read.o">
<cofloco>
<entry>### Maximum cost of eval_array_param_read_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.926s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iparam.o.ref_param_read_commit.o">
<cofloco>
<entry>### Maximum cost of eval_ref_param_read_commit_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.937s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iparam.o.ref_param_read_int_array.o">
<cofloco>
<entry>### Maximum cost of eval_ref_param_read_int_array_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.038s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iparam.o.ref_param_read_string_array.o">
<cofloco>
<entry>### Maximum cost of eval_ref_param_read_string_array_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.170s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iparam.o.ref_param_write_float_array.o">
<cofloco>
<entry>### Maximum cost of eval_ref_param_write_float_array_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.947s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iparam.o.ref_param_write_int_array.o">
<cofloco>
<entry>### Maximum cost of eval_ref_param_write_int_array_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.950s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iparam.o.ref_param_write_name_array.o">
<cofloco>
<entry>### Maximum cost of eval_ref_param_write_name_array_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.000s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iparam.o.ref_param_write_string_array.o">
<cofloco>
<entry>### Maximum cost of eval_ref_param_write_string_array_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.011s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iparam.o.stack_param_read.o">
<cofloco>
<entry>### Maximum cost of eval_stack_param_read_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.159s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_ireclaim.o.ireclaim.o">
<cofloco>
<entry>### Maximum cost of eval_ireclaim_start(V_space,B) </entry>
<result> 8  </result>
<complexity> constant  </complexity>
<time>0m0.857s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_isave.o.alloc_find_save.o">
<cofloco>
<entry>### Maximum cost of eval_alloc_find_save_start(V_sid,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.297s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_isave.o.alloc_forget_save.o">
<cofloco>
<entry>### Maximum cost of eval_alloc_forget_save_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.328s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_isave.o.alloc_is_since_save.o">
<cofloco>
<entry>### Maximum cost of eval_alloc_is_since_save_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.347s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_isave.o.alloc_restore_all.o">
<cofloco>
<entry>### Maximum cost of eval_alloc_restore_all_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.306s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_isave.o.alloc_restore_state_step.o">
<cofloco>
<entry>### Maximum cost of eval_alloc_restore_state_step_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.305s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_isave.o.alloc_save_current.o">
<cofloco>
<entry>### Maximum cost of eval_alloc_save_current_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.299s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_isave.o.combine_space.o">
<cofloco>
<entry>### Maximum cost of eval_combine_space_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.355s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_isave.o.forget_changes.o">
<cofloco>
<entry>### Maximum cost of eval_forget_changes_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.296s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_isave.o.restore_finalize.o">
<cofloco>
<entry>### Maximum cost of eval_restore_finalize_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.435s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_isave.o.restore_free.o">
<cofloco>
<entry>### Maximum cost of eval_restore_free_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.912s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_isave.o.restore_space.o">
<cofloco>
<entry>### Maximum cost of eval_restore_space_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.926s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_isave.o.save_set_new_changes.o">
<cofloco>
<entry>### Maximum cost of eval_save_set_new_changes_start(V_to_new,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.925s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_isave.o.save_set_new.o">
<cofloco>
<entry>### Maximum cost of eval_save_set_new_start(V_to_new,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.064s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iscanbin.o.scan_bin_num_array_continue.o">
<cofloco>
<entry>### Maximum cost of eval_scan_bin_num_array_continue_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.986s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iscanbin.o.scan_bos_continue.o">
<cofloco>
<entry>### Maximum cost of eval_scan_bos_continue_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.383s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iscanbin.o.scan_bos_resize.o">
<cofloco>
<entry>### Maximum cost of eval_scan_bos_resize_start(V_new_size,V_index,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.565s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iscanbin.o.scan_bos_string_continue.o">
<cofloco>
<entry>### Maximum cost of eval_scan_bos_string_continue_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.693s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iscannum.o.scan_number.o">
<cofloco>
<entry>### Maximum cost of eval_scan_number_start(V_sign,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.922s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iscan.o.dynamic_grow.o">
<cofloco>
<entry>### Maximum cost of eval_dynamic_grow_start(V_max_size,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.323s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_istack.o.init_block.o">
<cofloco>
<entry>### Maximum cost of eval_init_block_start(V_used,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.342s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_istack.o.ref_stack_counttomark.o">
<cofloco>
<entry>### Maximum cost of eval_ref_stack_counttomark_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.463s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_istack.o.ref_stack_index.o">
<cofloco>
<entry>### Maximum cost of eval_ref_stack_index_start(V_idx,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.317s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_istack.o.ref_stack_pop.o">
<cofloco>
<entry>### Maximum cost of eval_ref_stack_pop_start(V_count,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.322s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_istack.o.ref_stack_push.o">
<cofloco>
<entry>### Maximum cost of eval_ref_stack_push_start(V_count,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.422s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_istack.o.ref_stack_store.o">
<cofloco>
<entry>### Maximum cost of eval_ref_stack_store_start(V_count,V_skip,V_age,V_check,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.940s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iutil.o.array_get.o">
<cofloco>
<entry>### Maximum cost of eval_array_get_start(V_index_long,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.001s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iutil.o.make_reals.o">
<cofloco>
<entry>### Maximum cost of eval_make_reals_start(V_count,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.994s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iutil.o.num_params.o">
<cofloco>
<entry>### Maximum cost of eval_num_params_start(V_count,B) </entry>
<result> nat(V_count)*3+1  </result>
<complexity> n  </complexity>
<time>0m1.027s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iutil.o.obj_eq.o">
<cofloco>
<entry>### Maximum cost of eval_obj_eq_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.106s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iutil.o.op_find_index.o">
<cofloco>
<entry>### Maximum cost of eval_op_find_index_start(V__op_def_count,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.918s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iutil.o.refcpy_to_new.o">
<cofloco>
<entry>### Maximum cost of eval_refcpy_to_new_start(V_size,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.001s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iutil.o.refcpy_to_old.o">
<cofloco>
<entry>### Maximum cost of eval_refcpy_to_old_start(V_index,V_size,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.169s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iutil.o.refs_check_space.o">
<cofloco>
<entry>### Maximum cost of eval_refs_check_space_start(V_size,V_space,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.051s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iutil.o.refset_null.o">
<cofloco>
<entry>### Maximum cost of eval_refset_null_start(V_size,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.529s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_iutil.o.write_matrix.o">
<cofloco>
<entry>### Maximum cost of eval_write_matrix_start(B) </entry>
<result> 7  </result>
<complexity> constant  </complexity>
<time>0m0.310s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_sbcp.o.s_xBCPD_process.o">
<cofloco>
<entry>### Maximum cost of eval_s_xBCPD_process_start(V_last,V_tagged,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.308s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_sbcp.o.s_xBCPE_process.o">
<cofloco>
<entry>### Maximum cost of eval_s_xBCPE_process_start(V_last,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.298s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_sbhc.o.s_BHCD_process.o">
<cofloco>
<entry>### Maximum cost of eval_s_BHCD_process_start(V_last,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.534s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_sbhc.o.s_BHCE_process.o">
<cofloco>
<entry>### Maximum cost of eval_s_BHCE_process_start(V_last,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.360s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_sbwbs.o.bwbs_compare_rotations.o">
<cofloco>
<entry>### Maximum cost of eval_bwbs_compare_rotations_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.342s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_sbwbs.o.bwbsd_construct_offsets.o">
<cofloco>
<entry>### Maximum cost of eval_bwbsd_construct_offsets_start(V_N,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.475s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_sbwbs.o.bwbse_sort.o">
<cofloco>
<entry>### Maximum cost of eval_bwbse_sort_start(V_N,B) </entry>
<result> nat(V_N)*2+516  </result>
<complexity> n  </complexity>
<time>0m0.459s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_sbwbs.o.s_BWBSD_process.o">
<cofloco>
<entry>### Maximum cost of eval_s_BWBSD_process_start(V_last,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.418s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_sbwbs.o.s_BWBSE_process.o">
<cofloco>
<entry>### Maximum cost of eval_s_BWBSE_process_start(V_last,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.303s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_scfd.o.cf_decode_1d.o">
<cofloco>
<entry> </entry>
<result> </result>
<complexity> </complexity>
<time>0m0.857s </time>
<error>ERROR: Unknown message: error(Failed to parse input file)</error>
</cofloco>
</example>
<example name="office_ghostscript_src_scfd.o.cf_decode_2d.o">
<cofloco>
<entry> </entry>
<result> </result>
<complexity> </complexity>
<time>0m0.844s </time>
<error>ERROR: Unknown message: error(Failed to parse input file)</error>
</cofloco>
</example>
<example name="office_ghostscript_src_scfd.o.cf_decode_eol.o">
<cofloco>
<entry>### Maximum cost of eval_cf_decode_eol_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.060s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_scfd.o.s_CFD_process.o">
<cofloco>
<entry>### Maximum cost of eval_s_CFD_process_start(V_last,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m3.700s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_scfe.o.cf_encode_1d.o">
<cofloco>
<entry> </entry>
<result> </result>
<complexity> </complexity>
<time>1m0.032s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_scfe.o.cf_encode_2d.o">
<cofloco>
<entry> </entry>
<result> </result>
<complexity> </complexity>
<time>1m0.016s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_scfe.o.s_CFE_process.o">
<cofloco>
<entry>### Maximum cost of eval_s_CFE_process_start(V_last,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.538s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_sdctd.o.s_DCTD_process.o">
<cofloco>
<entry>### Maximum cost of eval_s_DCTD_process_start(V_last,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.954s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_sdcte.o.s_DCTE_process.o">
<cofloco>
<entry>### Maximum cost of eval_s_DCTE_process_start(V_last,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.324s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_seexec.o.s_exD_process.o">
<cofloco>
<entry>### Maximum cost of eval_s_exD_process_start(V_last,B) </entry>
<result> 16  </result>
<complexity> constant  </complexity>
<time>0m0.356s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_sfilter1.o.s_PFBD_process.o">
<cofloco>
<entry>### Maximum cost of eval_s_PFBD_process_start(V_last,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.432s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_sfilter1.o.s_SFD_process.o">
<cofloco>
<entry>### Maximum cost of eval_s_SFD_process_start(V_last,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.622s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_sfilter2.o.s_A85D_process.o">
<cofloco>
<entry>### Maximum cost of eval_s_A85D_process_start(V_last,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.353s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_sfilter2.o.s_A85E_process.o">
<cofloco>
<entry>### Maximum cost of eval_s_A85E_process_start(V_last,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.739s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_sfilter2.o.s_BT_process.o">
<cofloco>
<entry>### Maximum cost of eval_s_BT_process_start(V_last,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.316s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_shcgen.o.hc_bytes_from_definition.o">
<cofloco>
<entry>### Maximum cost of eval_hc_bytes_from_definition_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.367s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_shcgen.o.hc_compute.o">
<cofloco>
<entry>### Maximum cost of eval_hc_compute_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m2.111s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_shcgen.o.hc_definition_from_bytes.o">
<cofloco>
<entry>### Maximum cost of eval_hc_definition_from_bytes_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.275s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_shcgen.o.hc_limit_code_lengths.o">
<cofloco>
<entry>### Maximum cost of eval_hc_limit_code_lengths_start(V_num_values,V_max_length,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.187s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_shcgen.o.hc_make_decoding.o">
<cofloco>
<entry>### Maximum cost of eval_hc_make_decoding_start(V_initial_bits,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.477s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_shcgen.o.hc_make_encoding.o">
<cofloco>
<entry>### Maximum cost of eval_hc_make_encoding_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.040s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_shcgen.o.hc_sizeof_decoding.o">
<cofloco>
<entry>### Maximum cost of eval_hc_sizeof_decoding_start(V_initial_bits,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.843s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_shcgen.o.hc_sizes_from_bytes.o">
<cofloco>
<entry>### Maximum cost of eval_hc_sizes_from_bytes_start(V_num_bytes,B) </entry>
<result> nat(V_num_bytes)+1  </result>
<complexity> n  </complexity>
<time>0m0.318s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_shc.o.hc_put_last_bits_proc.o">
<cofloco>
<entry>### Maximum cost of eval_hc_put_last_bits_proc_start(V_bits,V_bits_left,B) </entry>
<result> nat(-V_bits_left/8+4)+1  </result>
<complexity> n  </complexity>
<time>0m0.308s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_siscale.o.calculate_contrib.o">
<cofloco>
<entry>### Maximum cost of eval_calculate_contrib_start(V_input_index,V_size,V_limit,V_modulus,V_stride,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m19.440s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_siscale.o.calculate_dst_contrib.o">
<cofloco>
<entry>### Maximum cost of eval_calculate_dst_contrib_start(V_y,B) </entry>
<result> 9  </result>
<complexity> constant  </complexity>
<time>0m0.361s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_siscale.o.s_IScale_process.o">
<cofloco>
<entry>### Maximum cost of eval_s_IScale_process_start(V_last,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.335s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_siscale.o.zoom_x.o">
<cofloco>
<entry>### Maximum cost of eval_zoom_x_start(V_sizeofPixelIn,V_tmp_width,V_WidthIn,V_Colors,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.246s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_siscale.o.zoom_y.o">
<cofloco>
<entry>### Maximum cost of eval_zoom_y_start(V_sizeofPixelOut,V_MaxValueOut,V_WidthOut,V_tmp_width,V_Colors,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.711s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_sjpegc.o.gs_jpeg_format_message.o">
<cofloco>
<entry>### Maximum cost of eval_gs_jpeg_format_message_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.953s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_slzwce.o.s_LZWE_process.o">
<cofloco>
<entry>### Maximum cost of eval_s_LZWE_process_start(V_last,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.972s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_slzwd.o.s_LZWD_process.o">
<cofloco>
<entry> </entry>
<result> </result>
<complexity> </complexity>
<time>0m0.864s </time>
<error>ERROR: Unknown message: error(Failed to parse input file)</error>
</cofloco>
</example>
<example name="office_ghostscript_src_slzwd.o.s_LZWD_reset.o">
<cofloco>
<entry>### Maximum cost of eval_s_LZWD_reset_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.963s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_smtf.o.s_MTFD_process.o">
<cofloco>
<entry>### Maximum cost of eval_s_MTFD_process_start(V_last,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.205s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_smtf.o.s_MTFE_process.o">
<cofloco>
<entry>### Maximum cost of eval_s_MTFE_process_start(V_last,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.989s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_smtf.o.s_MTF_init.o">
<cofloco>
<entry>### Maximum cost of eval_s_MTF_init_start(B) </entry>
<result> 257  </result>
<complexity> constant  </complexity>
<time>0m0.304s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_spcxd.o.s_PCXD_process.o">
<cofloco>
<entry>### Maximum cost of eval_s_PCXD_process_start(V_last,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.294s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_spdiff.o.s_PDiff_process.o">
<cofloco>
<entry>### Maximum cost of eval_s_PDiff_process_start(V_last,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m19.131s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_spngp.o.s_PNGPD_process.o">
<cofloco>
<entry>### Maximum cost of eval_s_PNGPD_process_start(V_last,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.216s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_spngp.o.s_PNGPE_process.o">
<cofloco>
<entry>### Maximum cost of eval_s_PNGPE_process_start(V_last,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.428s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_spngp.o.s_pngp_process.o">
<cofloco>
<entry>### Maximum cost of eval_s_pngp_process_start(V_count,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.550s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_srld.o.s_RLD_process.o">
<cofloco>
<entry>### Maximum cost of eval_s_RLD_process_start(V_last,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.398s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_srle.o.s_RLE_process.o">
<cofloco>
<entry>### Maximum cost of eval_s_RLE_process_start(V_last,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.635s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_sstring.o.s_AXD_process.o">
<cofloco>
<entry>### Maximum cost of eval_s_AXD_process_start(V_last,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.308s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_sstring.o.s_AXE_process.o">
<cofloco>
<entry>### Maximum cost of eval_s_AXE_process_start(V_last,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.317s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_sstring.o.s_hex_process.o">
<cofloco>
<entry> </entry>
<result> </result>
<complexity> </complexity>
<time>0m0.426s </time>
<error>ERROR: Unknown message: error(Failed to parse input file)</error>
</cofloco>
</example>
<example name="office_ghostscript_src_sstring.o.s_PSSD_process.o">
<cofloco>
<entry>### Maximum cost of eval_s_PSSD_process_start(V_last,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.935s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_sstring.o.s_PSSE_process.o">
<cofloco>
<entry>### Maximum cost of eval_s_PSSE_process_start(V_last,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.952s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_stream.o.sgets.o">
<cofloco>
<entry>### Maximum cost of eval_sgets_start(V_nmax,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.966s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_stream.o.spgetcc.o">
<cofloco>
<entry>### Maximum cost of eval_spgetcc_start(V_close_on_eof,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.021s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_stream.o.spputc.o">
<cofloco>
<entry>### Maximum cost of eval_spputc_start(V_b,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.912s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_stream.o.spskip.o">
<cofloco>
<entry>### Maximum cost of eval_spskip_start(V_nskip,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.016s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_stream.o.sputs.o">
<cofloco>
<entry>### Maximum cost of eval_sputs_start(V_wlen,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.814s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_stream.o.sreadbuf.o">
<cofloco>
<entry>### Maximum cost of eval_sreadbuf_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.300s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_stream.o.s_std_read_flush.o">
<cofloco>
<entry>### Maximum cost of eval_s_std_read_flush_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.295s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_stream.o.swritebuf.o">
<cofloco>
<entry>### Maximum cost of eval_swritebuf_start(V_last,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.314s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zarray.o.zaload.o">
<cofloco>
<entry>### Maximum cost of eval_zaload_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.342s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zchar1.o.bbox_finish.o">
<cofloco>
<entry>### Maximum cost of eval_bbox_finish_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.359s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zchar1.o.type1addpath_continue.o">
<cofloco>
<entry>### Maximum cost of eval_type1addpath_continue_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.315s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zchar1.o.z1_push_proc.o">
<cofloco>
<entry>### Maximum cost of eval_z1_push_proc_start(V_count,B) </entry>
<result> nat(V_count)+1  </result>
<complexity> n  </complexity>
<time>0m0.318s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zchar1.o.ztype1execchar.o">
<cofloco>
<entry>### Maximum cost of eval_ztype1execchar_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.385s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zchar2.o.moveshow_continue.o">
<cofloco>
<entry>### Maximum cost of eval_moveshow_continue_start(V_xymask,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.360s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zchar.o.font_bbox_param.o">
<cofloco>
<entry>### Maximum cost of eval_font_bbox_param_start(B) </entry>
<result> 5  </result>
<complexity> constant  </complexity>
<time>0m0.305s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zchar.o.map_glyph_to_char.o">
<cofloco>
<entry>### Maximum cost of eval_map_glyph_to_char_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.329s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zchar.o.op_show_find_index.o">
<cofloco>
<entry>### Maximum cost of eval_op_show_find_index_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.465s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zchar.o.op_show_restore.o">
<cofloco>
<entry>### Maximum cost of eval_op_show_restore_start(V_for_error,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.324s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zchar.o.op_show_return_width.o">
<cofloco>
<entry>### Maximum cost of eval_op_show_return_width_start(V_npop,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.570s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zcharout.o.zchar_set_cache.o">
<cofloco>
<entry>### Maximum cost of eval_zchar_set_cache_start(B) </entry>
<result> 53  </result>
<complexity> constant  </complexity>
<time>0m1.207s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zcie.o.cie_3d_table_param.o">
<cofloco>
<entry>### Maximum cost of eval_cie_3d_table_param_start(V_count,V_nbytes,B) </entry>
<result> nat(V_count)*3+1  </result>
<complexity> n  </complexity>
<time>0m1.070s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zcie.o.cie_cache_finish.o">
<cofloco>
<entry>### Maximum cost of eval_cie_cache_finish_start(B) </entry>
<result> 1024  </result>
<complexity> constant  </complexity>
<time>0m1.020s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zcie.o.cie_prepare_caches.o">
<cofloco>
<entry>### Maximum cost of eval_cie_prepare_caches_start(V_count,B) </entry>
<result> nat(V_count)*2+1  </result>
<complexity> n  </complexity>
<time>0m1.022s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zcie.o.cie_table_param.o">
<cofloco>
<entry>### Maximum cost of eval_cie_table_param_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.482s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zcie.o.dict_proc_array_param.o">
<cofloco>
<entry>### Maximum cost of eval_dict_proc_array_param_start(V_count,B) </entry>
<result> nat(V_count)*2+1  </result>
<complexity> n  </complexity>
<time>0m1.043s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zcolor.o.zcolor_remap_one_store.o">
<cofloco>
<entry>### Maximum cost of eval_zcolor_remap_one_store_start(B) </entry>
<result> 512  </result>
<complexity> constant  </complexity>
<time>0m1.007s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zcontrol.o.count_to_stopped.o">
<cofloco>
<entry>### Maximum cost of eval_count_to_stopped_start(V_mask,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.443s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zcontrol.o.execstack_continue.o">
<cofloco>
<entry>### Maximum cost of eval_execstack_continue_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.103s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zcontrol.o.pop_estack.o">
<cofloco>
<entry>### Maximum cost of eval_pop_estack_start(V_count,B) </entry>
<result> nat(V_count)*2+1  </result>
<complexity> n  </complexity>
<time>0m0.386s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zcontrol.o.zexecn.o">
<cofloco>
<entry>### Maximum cost of eval_zexecn_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.353s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zcontrol.o.zexit.o">
<cofloco>
<entry>### Maximum cost of eval_zexit_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.672s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zcontrol.o.zget_current_file.o">
<cofloco>
<entry>### Maximum cost of eval_zget_current_file_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.464s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zcrd.o.cache_colorrendering.o">
<cofloco>
<entry>### Maximum cost of eval_cache_colorrendering_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.128s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zcrd.o.cie_cache_joint.o">
<cofloco>
<entry>### Maximum cost of eval_cie_cache_joint_start(B) </entry>
<result> 157  </result>
<complexity> constant  </complexity>
<time>0m1.098s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zcrd.o.cie_cache_render_finish.o">
<cofloco>
<entry>### Maximum cost of eval_cie_cache_render_finish_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.950s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zcrd.o.cie_exec_tpqr.o">
<cofloco>
<entry>### Maximum cost of eval_cie_exec_tpqr_start(B) </entry>
<result> 5  </result>
<complexity> constant  </complexity>
<time>0m0.951s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zcrd.o.zcrd_params.o">
<cofloco>
<entry>### Maximum cost of eval_zcrd_params_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.883s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zdevice2.o.z2grestoreall.o">
<cofloco>
<entry>### Maximum cost of eval_z2grestoreall_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.314s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zdevice2.o.z2restore.o">
<cofloco>
<entry>### Maximum cost of eval_z2restore_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.309s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zdevice.o.zputdeviceparams.o">
<cofloco>
<entry>### Maximum cost of eval_zputdeviceparams_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.446s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zdict.o.zcleardictstack.o">
<cofloco>
<entry>### Maximum cost of eval_zcleardictstack_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.297s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zdict.o.zdicttomark.o">
<cofloco>
<entry>### Maximum cost of eval_zdicttomark_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.355s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zdict.o.zend.o">
<cofloco>
<entry>### Maximum cost of eval_zend_start(V__min_dstack_size,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.312s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zdict.o.zload.o">
<cofloco>
<entry>### Maximum cost of eval_zload_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.355s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zdict.o.zop_def.o">
<cofloco>
<entry>### Maximum cost of eval_zop_def_start(V__dtop_npairs,V__dsspace,V__dict_auto_expand,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.517s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zdict.o.zwhere.o">
<cofloco>
<entry>### Maximum cost of eval_zwhere_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.051s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zdps1.o.gstate_check_space.o">
<cofloco>
<entry>### Maximum cost of eval_gstate_check_space_start(V_space,B) </entry>
<result> 26  </result>
<complexity> constant  </complexity>
<time>0m0.967s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zdps1.o.gstate_unshare.o">
<cofloco>
<entry>### Maximum cost of eval_gstate_unshare_start(B) </entry>
<result> 26  </result>
<complexity> constant  </complexity>
<time>0m0.973s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zdps1.o.rect_get.o">
<cofloco>
<entry>### Maximum cost of eval_rect_get_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.561s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zdps1.o.zcopy_gstate.o">
<cofloco>
<entry>### Maximum cost of eval_zcopy_gstate_start(B) </entry>
<result> 52  </result>
<complexity> constant  </complexity>
<time>0m0.421s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zdps1.o.zcurrentgstate.o">
<cofloco>
<entry>### Maximum cost of eval_zcurrentgstate_start(B) </entry>
<result> 52  </result>
<complexity> constant  </complexity>
<time>0m0.351s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zdps1.o.zgstate.o">
<cofloco>
<entry>### Maximum cost of eval_zgstate_start(B) </entry>
<result> 76  </result>
<complexity> constant  </complexity>
<time>0m0.342s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zfdctc.o.quant_params.o">
<cofloco>
<entry>### Maximum cost of eval_quant_params_start(V_count,B) </entry>
<result> nat(V_count)*3+1  </result>
<complexity> n  </complexity>
<time>0m0.373s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zfdctc.o.zfdct_byte_params.o">
<cofloco>
<entry>### Maximum cost of eval_zfdct_byte_params_start(V_start,V_count,B) </entry>
<result> nat(V_start)*2+2+nat(V_count)*10  </result>
<complexity> n  </complexity>
<time>0m0.436s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zfdctc.o.zfdct_setup_huffman_tables.o">
<cofloco>
<entry>### Maximum cost of eval_zfdct_setup_huffman_tables_start(V_is_encode,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m3.993s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zfdctc.o.zfdct_setup_quantization_tables.o">
<cofloco>
<entry>### Maximum cost of eval_zfdct_setup_quantization_tables_start(V_is_encode,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.677s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zfdcte.o.dct_setup_samples.o">
<cofloco>
<entry>### Maximum cost of eval_dct_setup_samples_start(V_num_colors,V_is_vert,B) </entry>
<result> nat(V_num_colors)*6+1  </result>
<complexity> n  </complexity>
<time>0m0.350s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zfdcte.o.zfdcte_setup.o">
<cofloco>
<entry>### Maximum cost of eval_zfdcte_setup_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.376s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zfileio.o.zreadhexstring_at.o">
<cofloco>
<entry>### Maximum cost of eval_zreadhexstring_at_start(V_start,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.337s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zfileio.o.zreadline_from.o">
<cofloco>
<entry>### Maximum cost of eval_zreadline_from_start(V_size,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.335s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zfileio.o.zwritehexstring_at.o">
<cofloco>
<entry>### Maximum cost of eval_zwritehexstring_at_start(V_odd,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.543s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zfile.o.file_alloc_stream.o">
<cofloco>
<entry>### Maximum cost of eval_file_alloc_stream_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.307s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zfile.o.file_close_file.o">
<cofloco>
<entry>### Maximum cost of eval_file_close_file_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.868s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zfile.o.file_forget_save.o">
<cofloco>
<entry>### Maximum cost of eval_file_forget_save_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.910s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zfile.o.file_gc_prepare.o">
<cofloco>
<entry>### Maximum cost of eval_file_gc_prepare_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.915s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zfile.o.file_restore.o">
<cofloco>
<entry>### Maximum cost of eval_file_restore_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.923s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zfilterx.o.bhc_setup.o">
<cofloco>
<entry>### Maximum cost of eval_bhc_setup_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.721s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zfilterx.o.zcomputecodes.o">
<cofloco>
<entry>### Maximum cost of eval_zcomputecodes_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.131s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zfont0.o.zbuildfont0.o">
<cofloco>
<entry>### Maximum cost of eval_zbuildfont0_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.594s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zfont0.o.ztype0_adjust_FDepVector.o">
<cofloco>
<entry>### Maximum cost of eval_ztype0_adjust_FDepVector_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.799s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zfont1.o.buildfont1or4.o">
<cofloco>
<entry>### Maximum cost of eval_buildfont1or4_start(V_ftype,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.598s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zfont2.o.lookup_gs_simple_font_encoding.o">
<cofloco>
<entry>### Maximum cost of eval_lookup_gs_simple_font_encoding_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.559s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zfont2.o.zfont2_init.o">
<cofloco>
<entry>### Maximum cost of eval_zfont2_init_start(B) </entry>
<result> 6  </result>
<complexity> constant  </complexity>
<time>0m0.305s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zfont2.o.zregisterencoding.o">
<cofloco>
<entry>### Maximum cost of eval_zregisterencoding_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.349s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zfont42.o.z42_string_proc.o">
<cofloco>
<entry>### Maximum cost of eval_z42_string_proc_start(V_offset,V_length,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.915s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zfont.o.font_restore.o">
<cofloco>
<entry>### Maximum cost of eval_font_restore_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.283s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zfont.o.make_uint_array.o">
<cofloco>
<entry>### Maximum cost of eval_make_uint_array_start(V_count,B) </entry>
<result> nat(V_count)+1  </result>
<complexity> n  </complexity>
<time>0m0.983s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zfont.o.zsetcacheparams.o">
<cofloco>
<entry>### Maximum cost of eval_zsetcacheparams_start(B) </entry>
<result> 10  </result>
<complexity> constant  </complexity>
<time>0m1.098s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zfproc.o.s_handle_read_exception.o">
<cofloco>
<entry>### Maximum cost of eval_s_handle_read_exception_start(V_status,V_nstate,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.756s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zfproc.o.s_handle_write_exception.o">
<cofloco>
<entry>### Maximum cost of eval_s_handle_write_exception_start(V_status,V_nstate,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.369s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zfproc.o.s_proc_read_continue.o">
<cofloco>
<entry>### Maximum cost of eval_s_proc_read_continue_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.297s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zfproc.o.s_proc_write_continue.o">
<cofloco>
<entry>### Maximum cost of eval_s_proc_write_continue_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.302s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zgeneric.o.copy_interval.o">
<cofloco>
<entry>### Maximum cost of eval_copy_interval_start(V_index,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.402s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zgeneric.o.zcopy_integer.o">
<cofloco>
<entry>### Maximum cost of eval_zcopy_integer_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.344s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zgeneric.o.zgeneric_init.o">
<cofloco>
<entry>### Maximum cost of eval_zgeneric_init_start(B) </entry>
<result> 22  </result>
<complexity> constant  </complexity>
<time>0m0.299s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zgeneric.o.zgetinterval.o">
<cofloco>
<entry>### Maximum cost of eval_zgetinterval_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.323s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zgstate.o.igs_init.o">
<cofloco>
<entry>### Maximum cost of eval_igs_init_start(B) </entry>
<result> 26  </result>
<complexity> constant  </complexity>
<time>0m0.312s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zgstate.o.zsetdash.o">
<cofloco>
<entry>### Maximum cost of eval_zsetdash_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.155s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zht1.o.zsetcolorscreen.o">
<cofloco>
<entry>### Maximum cost of eval_zsetcolorscreen_start(B) </entry>
<result> 20  </result>
<complexity> constant  </complexity>
<time>0m1.322s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zht2.o.zsethalftone5.o">
<cofloco>
<entry>### Maximum cost of eval_zsethalftone5_start(V__zcolor_remap_one_ostack,V__zcolor_remap_one_estack,B) </entry>
<result> 502  </result>
<complexity> constant  </complexity>
<time>0m3.074s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zht.o.zcurrenthalftone.o">
<cofloco>
<entry>### Maximum cost of eval_zcurrenthalftone_start(B) </entry>
<result> 5  </result>
<complexity> constant  </complexity>
<time>0m0.562s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zimage.o.image_cleanup.o">
<cofloco>
<entry>### Maximum cost of eval_image_cleanup_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.299s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zimage.o.image_file_buffered_continue.o">
<cofloco>
<entry>### Maximum cost of eval_image_file_buffered_continue_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.829s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zimage.o.image_file_continue.o">
<cofloco>
<entry>### Maximum cost of eval_image_file_continue_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.919s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zimage.o.image_string_process.o">
<cofloco>
<entry>### Maximum cost of eval_image_string_process_start(V_num_sources,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.299s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zimage.o.zimage_setup.o">
<cofloco>
<entry>### Maximum cost of eval_zimage_setup_start(V_multi,V_npop,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.360s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zmedia2.o.zmatchmedia.o">
<cofloco>
<entry>### Maximum cost of eval_zmatchmedia_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m2.967s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zmedia2.o.zmatch_page_size.o">
<cofloco>
<entry>### Maximum cost of eval_zmatch_page_size_start(V_policy,V_orient,V_roll,B) </entry>
<result> 22  </result>
<complexity> constant  </complexity>
<time>0m2.053s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zmisc2.o.set_language_level.o">
<cofloco>
<entry>### Maximum cost of eval_set_language_level_start(V_level,V__dict_auto_expand,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.114s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zmisc.o.zbind.o">
<cofloco>
<entry>### Maximum cost of eval_zbind_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.556s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zmisc.o.zmakeoperator.o">
<cofloco>
<entry>### Maximum cost of eval_zmakeoperator_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.337s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zmisc.o.zoserrorstring.o">
<cofloco>
<entry>### Maximum cost of eval_zoserrorstring_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.320s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zmisc.o.zsetdebug.o">
<cofloco>
<entry>### Maximum cost of eval_zsetdebug_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.301s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zpacked.o.make_packed_array.o">
<cofloco>
<entry>### Maximum cost of eval_make_packed_array_start(V_size,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.211s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zpath1.o.pf_push.o">
<cofloco>
<entry>### Maximum cost of eval_pf_push_start(V_n,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.325s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zstack.o.zroll.o">
<cofloco>
<entry>### Maximum cost of eval_zroll_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m9.111s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zstring.o.zsearch.o">
<cofloco>
<entry>### Maximum cost of eval_zsearch_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.183s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_ztoken.o.token_continue.o">
<cofloco>
<entry>### Maximum cost of eval_token_continue_start(V_save,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.517s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_ztoken.o.tokenexec_continue.o">
<cofloco>
<entry>### Maximum cost of eval_tokenexec_continue_start(V_save,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.357s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_ztype.o.zcvrs.o">
<cofloco>
<entry>### Maximum cost of eval_zcvrs_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.059s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_ztype.o.ztype_init.o">
<cofloco>
<entry>### Maximum cost of eval_ztype_init_start(B) </entry>
<result> 22  </result>
<complexity> constant  </complexity>
<time>0m0.310s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zupath.o.upath_append.o">
<cofloco>
<entry>### Maximum cost of eval_upath_append_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m2.153s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zusparam.o.current_param_list.o">
<cofloco>
<entry>### Maximum cost of eval_current_param_list_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.388s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zusparam.o.setparams.o">
<cofloco>
<entry>### Maximum cost of eval_setparams_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.128s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zvmem.o.restore_check_stack.o">
<cofloco>
<entry>### Maximum cost of eval_restore_check_stack_start(V_is_estack,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.544s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zvmem.o.restore_fix_stack.o">
<cofloco>
<entry>### Maximum cost of eval_restore_fix_stack_start(V_is_estack,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.413s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zvmem.o.zforgetsave.o">
<cofloco>
<entry>### Maximum cost of eval_zforgetsave_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.950s </time>
<error></error>
</cofloco>
</example>
<example name="office_ghostscript_src_zvmem.o.zrestore.o">
<cofloco>
<entry>### Maximum cost of eval_zrestore_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.996s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_correct.o.casecmp.o">
<cofloco>
<entry>### Maximum cost of eval_casecmp_start(V_canonical,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.031s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_correct.o.checkfile.o">
<cofloco>
<entry>### Maximum cost of eval_checkfile_start(V__contextsize,V__quit,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.534s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_correct.o.copyout.o">
<cofloco>
<entry>### Maximum cost of eval_copyout_start(V_cnt,V__aflag,V__lflag,B) </entry>
<result> nat(V_cnt)*2+1  </result>
<complexity> n  </complexity>
<time>0m0.328s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_correct.o.extraletter.o">
<cofloco>
<entry>### Maximum cost of eval_extraletter_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.303s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_correct.o.getline.o">
<cofloco>
<entry>### Maximum cost of eval_getline_start(V__uerasechar,V__ukillchar,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.385s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_correct.o.givehelp.o">
<cofloco>
<entry>### Maximum cost of eval_givehelp_start(V_interactive,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.322s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_correct.o.ins_cap.o">
<cofloco>
<entry>### Maximum cost of eval_ins_cap_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.329s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_correct.o.insert.o">
<cofloco>
<entry>### Maximum cost of eval_insert_start(V__maxposslen,V__pcount,B) </entry>
<result> nat(V__pcount+1)+nat(V__pcount)+1  </result>
<complexity> n  </complexity>
<time>0m0.378s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_correct.o.inserttoken.o">
<cofloco>
<entry>### Maximum cost of eval_inserttoken_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.360s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_correct.o.ins_root_cap.o">
<cofloco>
<entry>### Maximum cost of eval_ins_root_cap_start(V_prestrip,V_preadd,V_sufstrip,V_sufadd,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.956s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_correct.o.line_size.o">
<cofloco>
<entry>### Maximum cost of eval_line_size_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.937s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_correct.o.lookharder.o">
<cofloco>
<entry>### Maximum cost of eval_lookharder_start(V__lookharder_look,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.018s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_correct.o.makepossibilities.o">
<cofloco>
<entry>### Maximum cost of eval_makepossibilities_start(V__maxposslen,V__pcount,V__easypossibilities,V__compoundflag,V__tryhardflag,V__sortit,B) </entry>
<result> 101  </result>
<complexity> constant  </complexity>
<time>0m1.418s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_correct.o.missingletter.o">
<cofloco>
<entry>### Maximum cost of eval_missingletter_start(V__Trynum,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.379s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_correct.o.missingspace.o">
<cofloco>
<entry>### Maximum cost of eval_missingspace_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.510s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_correct.o.save_cap.o">
<cofloco>
<entry>### Maximum cost of eval_save_cap_start(V__numhits,B) </entry>
<result> nat(V__numhits)+1  </result>
<complexity> n  </complexity>
<time>0m0.326s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_correct.o.save_root_cap.o">
<cofloco>
<entry>### Maximum cost of eval_save_root_cap_start(V_prestrip,V_preadd,V_sufstrip,V_sufadd,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.969s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_correct.o.show_char.o">
<cofloco>
<entry>### Maximum cost of eval_show_char_start(V_linew,V_output,V_maxw,V__laststringch,V__vflag,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.916s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_correct.o.show_line.o">
<cofloco>
<entry>### Maximum cost of eval_show_line_start(V_invlen,V__co,V__sg,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.406s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_correct.o.transposedletter.o">
<cofloco>
<entry>### Maximum cost of eval_transposedletter_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.938s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_correct.o.wrongletter.o">
<cofloco>
<entry>### Maximum cost of eval_wrongletter_start(V__Trynum,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.494s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_defmt.o.checkline.o">
<cofloco>
<entry>### Maximum cost of eval_checkline_start(V__tflag,V__lflag,V__aflag,V__cbench_print,V__minword,V__cflag,V__terse,V__pcount,V__easypossibilities,V__contextoffset,V__quit,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m5.712s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_defmt.o.skipoverword.o">
<cofloco>
<entry>### Maximum cost of eval_skipoverword_start(V__TeX_comment,V__save_math_mode,V__math_mode,V__save_LaTeX_Mode,V__LaTeX_Mode,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.444s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_defmt.o.skiptoword.o">
<cofloco>
<entry>### Maximum cost of eval_skiptoword_start(V__TeX_comment,V__save_math_mode,V__math_mode,V__save_LaTeX_Mode,V__LaTeX_Mode,V__tflag,V__aflag,V__cbench_print,V__terse,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.953s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_defmt.o.TeX_open_paren.o">
<cofloco>
<entry>### Maximum cost of eval_TeX_open_paren_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.646s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_defmt.o.TeX_skip_check.o">
<cofloco>
<entry>### Maximum cost of eval_TeX_skip_check_start(V__LaTeX_Mode,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.400s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_defmt.o.TeX_skip_parens.o">
<cofloco>
<entry>### Maximum cost of eval_TeX_skip_parens_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.912s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_dump.o.entdump.o">
<cofloco>
<entry>### Maximum cost of eval_entdump_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.018s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_dump.o.setdump.o">
<cofloco>
<entry>### Maximum cost of eval_setdump_start(V_mask,B) </entry>
<result> 769  </result>
<complexity> constant  </complexity>
<time>0m1.245s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_dump.o.subsetdump.o">
<cofloco>
<entry>### Maximum cost of eval_subsetdump_start(V_mask,V_dumpval,B) </entry>
<result> 3070  </result>
<complexity> constant  </complexity>
<time>0m1.514s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_dump.o.tbldump.o">
<cofloco>
<entry>### Maximum cost of eval_tbldump_start(V_numflags,B) </entry>
<result> nat(V_numflags)+1  </result>
<complexity> n  </complexity>
<time>0m0.954s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_good.o.cap_ok.o">
<cofloco>
<entry>### Maximum cost of eval_cap_ok_start(V_len,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.685s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_good.o.flagpr.o">
<cofloco>
<entry>### Maximum cost of eval_flagpr_start(V_preflag,V_prestrip,V_preadd,V_sufflag,V_sufadd,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.297s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_good.o.good.o">
<cofloco>
<entry>### Maximum cost of eval_good_start(V_ignoreflagbits,V_allhits,V_pfxopts,V_sfxopts,V__numhits,V__cflag,V__compoundflag,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.478s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_hash.o.hash.o">
<cofloco>
<entry>### Maximum cost of eval_hash_start(V_hashtblsize,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.415s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_ispell.o.expandmode.o">
<cofloco>
<entry>### Maximum cost of eval_expandmode_start(V_option,V__cbench_print,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.760s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_ispell.o.initckch.o">
<cofloco>
<entry>### Maximum cost of eval_initckch_start(V__Trynum,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.430s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_lookup.o.linit.o">
<cofloco>
<entry>### Maximum cost of eval_linit_start(V__inited,V__cbench_print,V__hashsize,V__nodictflag,V__numsflags,V__numpflags,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m4.536s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_lookup.o.lookup.o">
<cofloco>
<entry>### Maximum cost of eval_lookup_start(V_dotree,V__cbench_print,V__hashsize,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.377s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_makedent.o.combinecaps.o">
<cofloco>
<entry>### Maximum cost of eval_combinecaps_start(V__cbench_print,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.424s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_makedent.o.findfiletype.o">
<cofloco>
<entry>### Maximum cost of eval_findfiletype_start(V_searchnames,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.514s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_makedent.o.ichartostr.o">
<cofloco>
<entry>### Maximum cost of eval_ichartostr_start(V_outlen,V_canonical,V__defdupchar,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.419s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_makedent.o.lowcase.o">
<cofloco>
<entry>### Maximum cost of eval_lowcase_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.293s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_makedent.o.makedent.o">
<cofloco>
<entry>### Maximum cost of eval_makedent_start(V_lbuflen,V__cbench_print,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.389s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_makedent.o.stringcharlen.o">
<cofloco>
<entry>### Maximum cost of eval_stringcharlen_start(V_canonical,V__defdupchar,V__laststringch,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.415s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_makedent.o.strtoichar.o">
<cofloco>
<entry>### Maximum cost of eval_strtoichar_start(V_outlen,V_canonical,V__laststringch,B) </entry>
<result> nat(V_outlen)*2+1  </result>
<complexity> n  </complexity>
<time>0m0.377s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_makedent.o.toutent.o">
<cofloco>
<entry>### Maximum cost of eval_toutent_start(V_onlykeep,V__cbench_print,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.319s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_makedent.o.toutword.o">
<cofloco>
<entry>### Maximum cost of eval_toutword_start(V__has_marker,B) </entry>
<result> 27  </result>
<complexity> constant  </complexity>
<time>0m0.321s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_makedent.o.upcase.o">
<cofloco>
<entry>### Maximum cost of eval_upcase_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.291s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_makedent.o.whatcap.o">
<cofloco>
<entry>### Maximum cost of eval_whatcap_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.730s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_tgood.o.chk_aff.o">
<cofloco>
<entry>### Maximum cost of eval_chk_aff_start(V_len,V_ignoreflagbits,V_allhits,V_pfxopts,V_sfxopts,V__numhits,V__cflag,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.353s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_tgood.o.chk_suf.o">
<cofloco>
<entry>### Maximum cost of eval_chk_suf_start(V_len,V_optflags,V_ignoreflagbits,V_allhits,V__numhits,V__cflag,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.276s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_tgood.o.expand_pre.o">
<cofloco>
<entry>### Maximum cost of eval_expand_pre_start(V_option,V__numpflags,B) </entry>
<result> nat(V__numpflags)+1  </result>
<complexity> n  </complexity>
<time>0m1.014s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_tgood.o.expand_suf.o">
<cofloco>
<entry>### Maximum cost of eval_expand_suf_start(V_optflags,V_option,V__numsflags,B) </entry>
<result> nat(V__numsflags)+1  </result>
<complexity> n  </complexity>
<time>0m1.017s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_tgood.o.forcelc.o">
<cofloco>
<entry>### Maximum cost of eval_forcelc_start(V_len,B) </entry>
<result> nat(V_len)+1  </result>
<complexity> n  </complexity>
<time>0m0.957s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_tgood.o.pfx_list_chk.o">
<cofloco>
<entry>### Maximum cost of eval_pfx_list_chk_start(V_len,V_optflags,V_sfxopts,V_ignoreflagbits,V_allhits,V__numhits,V__cflag,V__compoundflag,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m2.970s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_tgood.o.pr_pre_expansion.o">
<cofloco>
<entry>### Maximum cost of eval_pr_pre_expansion_start(V_option,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.558s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_tgood.o.pr_suf_expansion.o">
<cofloco>
<entry>### Maximum cost of eval_pr_suf_expansion_start(V_option,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.968s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_tgood.o.suf_list_chk.o">
<cofloco>
<entry>### Maximum cost of eval_suf_list_chk_start(V_len,V_optflags,V_ignoreflagbits,V_allhits,V__numhits,V__cflag,V__compoundflag,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.768s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_tree.o.tinsert.o">
<cofloco>
<entry>### Maximum cost of eval_tinsert_start(V__cbench_print,V__pershsize,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.336s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_tree.o.treeinsert.o">
<cofloco>
<entry>### Maximum cost of eval_treeinsert_start(V_wordlen,V_keep,V__cbench_print,V__cantexpand,V__hcount,V__pershsize,V__newwords,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.900s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_tree.o.treeload.o">
<cofloco>
<entry>### Maximum cost of eval_treeload_start(V__newwords,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.303s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_tree.o.treelookup.o">
<cofloco>
<entry>### Maximum cost of eval_treelookup_start(V__pershsize,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.339s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_tree.o.treeoutput.o">
<cofloco>
<entry>### Maximum cost of eval_treeoutput_start(V__cbench_print,V__hcount,V__pershsize,V__newwords,V__hashsize,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.801s </time>
<error></error>
</cofloco>
</example>
<example name="office_ispell_src_xgets.o.xgets.o">
<cofloco>
<entry>### Maximum cost of eval_xgets_start(V_size,V__xgets_Include_Len,V__incfileflag,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.027s </time>
<error></error>
</cofloco>
</example>
<example name="office_rsynth_src_aufile.o.aufile_write.o">
<cofloco>
<entry>### Maximum cost of eval_aufile_write_start(V_n,V__au_fd,V__au_encoding,V__au_size,V__linear_fd,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.292s </time>
<error></error>
</cofloco>
</example>
<example name="office_rsynth_src_aufile.o.wblong.o">
<cofloco>
<entry>### Maximum cost of eval_wblong_start(V_fd,V_x,B) </entry>
<result> 26  </result>
<complexity> constant  </complexity>
<time>0m0.964s </time>
<error></error>
</cofloco>
</example>
<example name="office_rsynth_src_darray.o.darray_delete.o">
<cofloco>
<entry>### Maximum cost of eval_darray_delete_start(V_n,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.964s </time>
<error></error>
</cofloco>
</example>
<example name="office_rsynth_src_getarg.o.getargs.o">
<cofloco>
<entry>### Maximum cost of eval_getargs_start(V_argc,V__help_only,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m3.535s </time>
<error></error>
</cofloco>
</example>
<example name="office_rsynth_src_holmes.o.holmes.o">
<cofloco>
<entry>### Maximum cost of eval_holmes_start(V_nelm,V_nsamp,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m32.117s </time>
<error></error>
</cofloco>
</example>
<example name="office_rsynth_src_holmes.o.set_trans.o">
<cofloco>
<entry>### Maximum cost of eval_set_trans_start(V_ext,V_e,V__speed,B) </entry>
<result> 20  </result>
<complexity> constant  </complexity>
<time>0m0.405s </time>
<error></error>
</cofloco>
</example>
<example name="office_rsynth_src_linuxplay.o.audio_play.o">
<cofloco>
<entry>### Maximum cost of eval_audio_play_start(V_n,V__dev_fd,V__linear_fd,B) </entry>
<result> nat(V_n)*2+1  </result>
<complexity> n  </complexity>
<time>0m0.422s </time>
<error></error>
</cofloco>
</example>
<example name="office_rsynth_src_nsynth.o.parwave.o">
<cofloco>
<entry>### Maximum cost of eval_parwave_start(V__time_count,V__parwave_seed,V__nper,V__nmod,V__T0,V__nopen,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.674s </time>
<error></error>
</cofloco>
</example>
<example name="office_rsynth_src_nsynth.o.show_parms.o">
<cofloco>
<entry>### Maximum cost of eval_show_parms_start(V__show_parms_names,B) </entry>
<result> 122  </result>
<complexity> constant  </complexity>
<time>0m0.395s </time>
<error></error>
</cofloco>
</example>
<example name="office_rsynth_src_phtoelm.o.enter.o">
<cofloco>
<entry>### Maximum cost of eval_enter_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.302s </time>
<error></error>
</cofloco>
</example>
<example name="office_rsynth_src_phtoelm.o.find_elm.o">
<cofloco>
<entry>### Maximum cost of eval_find_elm_start(V__num_Elements,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.301s </time>
<error></error>
</cofloco>
</example>
<example name="office_rsynth_src_phtoelm.o.phone_to_elm.o">
<cofloco>
<entry>### Maximum cost of eval_phone_to_elm_start(V_n,V__speed,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.486s </time>
<error></error>
</cofloco>
</example>
<example name="office_rsynth_src_say.o.concat_args.o">
<cofloco>
<entry>### Maximum cost of eval_concat_args_start(V_argc,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.430s </time>
<error></error>
</cofloco>
</example>
<example name="office_rsynth_src_say.o.darray_fget.o">
<cofloco>
<entry>### Maximum cost of eval_darray_fget_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.305s </time>
<error></error>
</cofloco>
</example>
<example name="office_rsynth_src_say.o.say_file.o">
<cofloco>
<entry>### Maximum cost of eval_say_file_start(V__once,V__verbose,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.453s </time>
<error></error>
</cofloco>
</example>
<example name="office_rsynth_src_say.o.spell_out.o">
<cofloco>
<entry>### Maximum cost of eval_spell_out_start(V_n,B) </entry>
<result> nat(V_n)+1  </result>
<complexity> n  </complexity>
<time>0m0.915s </time>
<error></error>
</cofloco>
</example>
<example name="office_rsynth_src_say.o.suspect_word.o">
<cofloco>
<entry>### Maximum cost of eval_suspect_word_start(V_n,B) </entry>
<result> nat(V_n)+1  </result>
<complexity> n  </complexity>
<time>0m1.005s </time>
<error></error>
</cofloco>
</example>
<example name="office_rsynth_src_text.o.find_rule.o">
<cofloco>
<entry>### Maximum cost of eval_find_rule_start(V_index,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.011s </time>
<error></error>
</cofloco>
</example>
<example name="office_rsynth_src_text.o.guess_word.o">
<cofloco>
<entry>### Maximum cost of eval_guess_word_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.926s </time>
<error></error>
</cofloco>
</example>
<example name="office_rsynth_src_text.o.leftmatch.o">
<cofloco>
<entry>### Maximum cost of eval_leftmatch_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.293s </time>
<error></error>
</cofloco>
</example>
<example name="office_rsynth_src_text.o.NRL.o">
<cofloco>
<entry>### Maximum cost of eval_NRL_start(V_n,B) </entry>
<result> nat(V_n)+1  </result>
<complexity> n  </complexity>
<time>0m0.981s </time>
<error></error>
</cofloco>
</example>
<example name="office_rsynth_src_text.o.phone_cat.o">
<cofloco>
<entry>### Maximum cost of eval_phone_cat_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.930s </time>
<error></error>
</cofloco>
</example>
<example name="office_rsynth_src_text.o.rightmatch.o">
<cofloco>
<entry>### Maximum cost of eval_rightmatch_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.186s </time>
<error></error>
</cofloco>
</example>
<example name="office_rsynth_src_trie.o.trie_insert.o">
<cofloco>
<entry>### Maximum cost of eval_trie_insert_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.991s </time>
<error></error>
</cofloco>
</example>
<example name="office_rsynth_src_trie.o.trie_lookup.o">
<cofloco>
<entry>### Maximum cost of eval_trie_lookup_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.621s </time>
<error></error>
</cofloco>
</example>
<example name="office_stringsearch1_src_bmhasrch.o.bmha_init.o">
<cofloco>
<entry>### Maximum cost of eval_bmha_init_start(V__patlen,V__skip2,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.483s </time>
<error></error>
</cofloco>
</example>
<example name="office_stringsearch1_src_bmhasrch.o.bmha_search.o">
<cofloco>
<entry>### Maximum cost of eval_bmha_search_start(V_stringlen,V__patlen,V__skip2,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.392s </time>
<error></error>
</cofloco>
</example>
<example name="office_stringsearch1_src_bmhisrch.o.bmhi_init.o">
<cofloco>
<entry>### Maximum cost of eval_bmhi_init_start(V__patlen,V__skip2,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.527s </time>
<error></error>
</cofloco>
</example>
<example name="office_stringsearch1_src_bmhisrch.o.bmhi_search.o">
<cofloco>
<entry>### Maximum cost of eval_bmhi_search_start(V_stringlen,V__patlen,V__skip2,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.599s </time>
<error></error>
</cofloco>
</example>
<example name="office_stringsearch1_src_bmhsrch.o.bmh_init.o">
<cofloco>
<entry>### Maximum cost of eval_bmh_init_start(V__patlen,V__skip2,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.334s </time>
<error></error>
</cofloco>
</example>
<example name="office_stringsearch1_src_bmhsrch.o.bmh_search.o">
<cofloco>
<entry>### Maximum cost of eval_bmh_search_start(V_stringlen,V__patlen,V__skip2,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.205s </time>
<error></error>
</cofloco>
</example>
<example name="office_stringsearch1_src_pbmsrch_large.o.init_search.o">
<cofloco>
<entry>### Maximum cost of eval_init_search_start(V__len,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.114s </time>
<error></error>
</cofloco>
</example>
<example name="office_stringsearch1_src_pbmsrch_large.o.main.o">
<cofloco>
<entry>### Maximum cost of eval_main_start(V_argc,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.139s </time>
<error></error>
</cofloco>
</example>
<example name="office_stringsearch1_src_pbmsrch_large.o.strsearch.o">
<cofloco>
<entry>### Maximum cost of eval_strsearch_start(V__len,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.533s </time>
<error></error>
</cofloco>
</example>
<example name="security_blowfish_d_src_bf_cbc.o.BF_cbc_encrypt.o">
<cofloco>
<entry>### Maximum cost of eval_BF_cbc_encrypt_start(V_length,V_encrypt,B) </entry>
<result> nat(V_length)*11+1  </result>
<complexity> n  </complexity>
<time>0m0.504s </time>
<error></error>
</cofloco>
</example>
<example name="security_blowfish_d_src_bf_cfb64.o.BF_cfb64_encrypt.o">
<cofloco>
<entry>### Maximum cost of eval_BF_cfb64_encrypt_start(V_length,V_encrypt,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.369s </time>
<error></error>
</cofloco>
</example>
<example name="security_blowfish_d_src_bf_ofb64.o.BF_ofb64_encrypt.o">
<cofloco>
<entry>### Maximum cost of eval_BF_ofb64_encrypt_start(V_length,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.328s </time>
<error></error>
</cofloco>
</example>
<example name="security_blowfish_d_src_bf.o.main.o">
<cofloco>
<entry>### Maximum cost of eval_main_start(V_argc,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.842s </time>
<error></error>
</cofloco>
</example>
<example name="security_blowfish_d_src_bf_skey.o.BF_set_key.o">
<cofloco>
<entry>### Maximum cost of eval_BF_set_key_start(V_len,B) </entry>
<result> 542  </result>
<complexity> constant  </complexity>
<time>0m0.369s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_armor.o.armordecode.o">
<cofloco>
<entry>### Maximum cost of eval_armordecode_start(V__infile_line,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m2.136s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_armor.o.armor_file.o">
<cofloco>
<entry>### Maximum cost of eval_armor_file_start(V_kv_label,V__pem_lines,V__verbose,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m5.629s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_armor.o.copyline.o">
<cofloco>
<entry>### Maximum cost of eval_copyline_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.014s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_armor.o.crcbytes.o">
<cofloco>
<entry>### Maximum cost of eval_crcbytes_start(V_len,V_accum,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.922s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_armor.o.darmor_buffer.o">
<cofloco>
<entry>### Maximum cost of eval_darmor_buffer_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.301s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_armor.o.darmor_file.o">
<cofloco>
<entry>### Maximum cost of eval_darmor_file_start(V__infile_line,V__strip_spaces,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.627s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_armor.o.get_armor_line.o">
<cofloco>
<entry>### Maximum cost of eval_get_armor_line_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.354s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_armor.o.getline.o">
<cofloco>
<entry>### Maximum cost of eval_getline_start(V_n,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.343s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_armor.o.is_armorfile.o">
<cofloco>
<entry>### Maximum cost of eval_is_armorfile_start(V__infile_line,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.416s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_armor.o.isheaderline.o">
<cofloco>
<entry>### Maximum cost of eval_isheaderline_start(V__use_charset_header,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.393s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_armor.o.mk_crctbl.o">
<cofloco>
<entry>### Maximum cost of eval_mk_crctbl_start(V_poly,B) </entry>
<result> 128  </result>
<complexity> constant  </complexity>
<time>0m0.301s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_armor.o.numFilename.o">
<cofloco>
<entry>### Maximum cost of eval_numFilename_start(V_num,V_ofnum,B) </entry>
<result> max([2,nat(V_num/9+8/9),nat(V_ofnum/90+8/9),nat(-V_num/9+8/9),nat(V_num/9),nat(-V_num/9),nat(V_ofnum/900+8/9)+3])+1  </result>
<complexity> n  </complexity>
<time>0m0.884s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_armor.o.open_next.o">
<cofloco>
<entry>### Maximum cost of eval_open_next_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.593s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_armor.o.skipheaders.o">
<cofloco>
<entry>### Maximum cost of eval_skipheaders_start(V_armorfollows,V__infile_line,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.107s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_config.o.extractToken.o">
<cofloco>
<entry>### Maximum cost of eval_extractToken_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.214s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_config.o.getaString.o">
<cofloco>
<entry>### Maximum cost of eval_getaString_start(V__line,V__errCount,V__hasError,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m2.390s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_config.o.lookup.o">
<cofloco>
<entry>### Maximum cost of eval_lookup_start(V_keyLength,V_range,B) </entry>
<result> nat(V_range)*4+2+nat(V_keyLength)  </result>
<complexity> n  </complexity>
<time>0m1.533s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_config.o.processConfigFile.o">
<cofloco>
<entry> </entry>
<result> </result>
<complexity> </complexity>
<time>1m0.057s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_config.o.processConfigLine.o">
<cofloco>
<entry>### Maximum cost of eval_processConfigLine_start(V__line,V__errCount,V__value,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.348s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_crypto.o.check_key_sig.o">
<cofloco>
<entry>### Maximum cost of eval_check_key_sig_start(V_fpkey,V_keypktlen,V_fpsig,V__global_precision,B) </entry>
<result> 14  </result>
<complexity> constant  </complexity>
<time>0m0.516s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_crypto.o.check_signaturefile.o">
<cofloco>
<entry>### Maximum cost of eval_check_signaturefile_start(V_strip_signature,V__global_precision,V__verbose,V__batchmode,V__filter_mode,V__myArgc,V__quietmode,V__checksig_pass,V__moreflag,V__signature_checked,V__CONVERSION,V__force_flag,B) </entry>
<result> 22  </result>
<complexity> constant  </complexity>
<time>0m4.948s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_crypto.o.CToPascal.o">
<cofloco>
<entry>### Maximum cost of eval_CToPascal_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.989s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_crypto.o.date_ymd.o">
<cofloco>
<entry>### Maximum cost of eval_date_ymd_start(B) </entry>
<result> 94  </result>
<complexity> constant  </complexity>
<time>0m1.462s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_crypto.o.decryptfile.o">
<cofloco>
<entry>### Maximum cost of eval_decryptfile_start(V__global_precision,V__verbose,V__quietmode,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m3.590s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_crypto.o.do_sign.o">
<cofloco>
<entry>### Maximum cost of eval_do_sign_start(V_fp,V_pktlen,V_batchmode,V__global_precision,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.499s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_crypto.o.encryptfile.o">
<cofloco>
<entry>### Maximum cost of eval_encryptfile_start(V_attempt_compression,V__verbose,V__already_have_md5,V__encrypt_to_self,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.737s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_crypto.o.encryptkeyintofile.o">
<cofloco>
<entry>### Maximum cost of eval_encryptkeyintofile_start(V_ckp_length,V_keys_used,V__quietmode,V__version_byte,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.207s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_crypto.o.idea_decryptfile.o">
<cofloco>
<entry>### Maximum cost of eval_idea_decryptfile_start(V__verbose,V__batchmode,V__quietmode,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.707s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_crypto.o.idea_file.o">
<cofloco>
<entry>### Maximum cost of eval_idea_file_start(V_decryp,V_lenfile,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.567s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_crypto.o.make_random_ideakey.o">
<cofloco>
<entry>### Maximum cost of eval_make_random_ideakey_start(V_skip,B) </entry>
<result> nat(-V_skip+24)*2+1  </result>
<complexity> n  </complexity>
<time>0m0.331s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_crypto.o.make_signature_certificate.o">
<cofloco>
<entry>### Maximum cost of eval_make_signature_certificate_start(V_class,V__quietmode,V__already_have_md5,V__version_byte,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.529s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_crypto.o.PascalToC.o">
<cofloco>
<entry>### Maximum cost of eval_PascalToC_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.316s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_fileio.o.ck_dup_output.o">
<cofloco>
<entry>### Maximum cost of eval_ck_dup_output_start(V_notest,V_delete_dup,V__batchmode,V__force_flag,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.438s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_fileio.o.cleanup_tmpf.o">
<cofloco>
<entry>### Maximum cost of eval_cleanup_tmpf_start(B) </entry>
<result> 9  </result>
<complexity> constant  </complexity>
<time>0m0.320s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_fileio.o.copyfile_from_canon.o">
<cofloco>
<entry>### Maximum cost of eval_copyfile_from_canon_start(V_longcount,V__CONVERSION,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.565s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_fileio.o.copyfile.o">
<cofloco>
<entry>### Maximum cost of eval_copyfile_start(V_longcount,V__CONVERSION,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.548s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_fileio.o.copyfile_to_canon.o">
<cofloco>
<entry>### Maximum cost of eval_copyfile_to_canon_start(V_longcount,V__CONVERSION,V__strip_spaces,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m4.159s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_fileio.o.ext_missing.o">
<cofloco>
<entry>### Maximum cost of eval_ext_missing_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.019s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_fileio.o.files_missing.o">
<cofloco>
<entry>### Maximum cost of eval_files_missing_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.951s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_fileio.o.file_tail.o">
<cofloco>
<entry>### Maximum cost of eval_file_tail_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.914s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_fileio.o.is_text_file.o">
<cofloco>
<entry>### Maximum cost of eval_is_text_file_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.067s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_fileio.o.manuals_missing.o">
<cofloco>
<entry>### Maximum cost of eval_manuals_missing_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.927s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_fileio.o.readPhantomInput.o">
<cofloco>
<entry>### Maximum cost of eval_readPhantomInput_start(V__verbose,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.970s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_fileio.o.rmtemp.o">
<cofloco>
<entry>### Maximum cost of eval_rmtemp_start(V__verbose,B) </entry>
<result> 16  </result>
<complexity> constant  </complexity>
<time>0m0.358s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_fileio.o.savetemp.o">
<cofloco>
<entry>### Maximum cost of eval_savetemp_start(V__verbose,B) </entry>
<result> 16  </result>
<complexity> constant  </complexity>
<time>0m0.357s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_fileio.o.tempfile.o">
<cofloco>
<entry>### Maximum cost of eval_tempfile_start(V_flags,V__verbose,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.699s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_fileio.o.wipeout.o">
<cofloco>
<entry>### Maximum cost of eval_wipeout_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.751s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_fileio.o.writePhantomOutput.o">
<cofloco>
<entry>### Maximum cost of eval_writePhantomOutput_start(V__verbose,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.014s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_genprime.o.buildsieve.o">
<cofloco>
<entry>### Maximum cost of eval_buildsieve_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.918s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_genprime.o.fastsieve.o">
<cofloco>
<entry>### Maximum cost of eval_fastsieve_start(V_pdelta,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.957s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_genprime.o.mp_gcd.o">
<cofloco>
<entry>### Maximum cost of eval_mp_gcd_start(V__global_precision,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.001s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_genprime.o.mp_inv.o">
<cofloco>
<entry>### Maximum cost of eval_mp_inv_start(V__global_precision,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.786s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_genprime.o.nextprime.o">
<cofloco>
<entry>### Maximum cost of eval_nextprime_start(V__global_precision,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.464s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_genprime.o.randombits.o">
<cofloco>
<entry>### Maximum cost of eval_randombits_start(V_nbits,B) </entry>
<result> nat(V_nbits)*2+1  </result>
<complexity> n  </complexity>
<time>0m0.328s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_genprime.o.randomunit.o">
<cofloco>
<entry>### Maximum cost of eval_randomunit_start(B) </entry>
<result> 2  </result>
<complexity> constant  </complexity>
<time>0m0.303s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_genprime.o.slowtest.o">
<cofloco>
<entry>### Maximum cost of eval_slowtest_start(V__global_precision,B) </entry>
<result> 8  </result>
<complexity> constant  </complexity>
<time>0m0.351s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_idea.o.ideaCfbDecrypt.o">
<cofloco>
<entry>### Maximum cost of eval_ideaCfbDecrypt_start(V_count,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.535s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_idea.o.ideaCfbEncrypt.o">
<cofloco>
<entry>### Maximum cost of eval_ideaCfbEncrypt_start(V_count,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.522s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_idea.o.ideaCipher.o">
<cofloco>
<entry>### Maximum cost of eval_ideaCipher_start(B) </entry>
<result> 9  </result>
<complexity> constant  </complexity>
<time>0m0.493s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_idea.o.ideaExpandKey.o">
<cofloco>
<entry>### Maximum cost of eval_ideaExpandKey_start(B) </entry>
<result> 54  </result>
<complexity> constant  </complexity>
<time>0m1.029s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_idea.o.ideaRandByte.o">
<cofloco>
<entry>### Maximum cost of eval_ideaRandByte_start(B) </entry>
<result> 18  </result>
<complexity> constant  </complexity>
<time>0m1.025s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_idea.o.ideaRandState.o">
<cofloco>
<entry>### Maximum cost of eval_ideaRandState_start(B) </entry>
<result> 9  </result>
<complexity> constant  </complexity>
<time>0m0.995s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keyadd.o._addto_keyring.o">
<cofloco>
<entry>### Maximum cost of eval__addto_keyring_start(V__newrvks,V__newids,V__newsigs,V__newkeys,V__publickey,V__interactive_add,V__batchmode,V__verbose,V__ask_first,V__filter_mode,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m9.219s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keyadd.o.addto_keyring.o">
<cofloco>
<entry>### Maximum cost of eval_addto_keyring_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.534s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keyadd.o.ask_to_sign.o">
<cofloco>
<entry>### Maximum cost of eval_ask_to_sign_start(V__ask_first,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.365s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keyadd.o.find_keyID.o">
<cofloco>
<entry>### Maximum cost of eval_find_keyID_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.298s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keyadd.o.freebufpool.o">
<cofloco>
<entry>### Maximum cost of eval_freebufpool_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.296s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keyadd.o.get_publickey.o">
<cofloco>
<entry>### Maximum cost of eval_get_publickey_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.316s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keyadd.o.gpk_open.o">
<cofloco>
<entry>### Maximum cost of eval_gpk_open_start(V__hashleft,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.348s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keyadd.o.mergekeys.o">
<cofloco>
<entry>### Maximum cost of eval_mergekeys_start(V_keypos,V__newrvks,V__newids,V__publickey,V__batchmode,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.823s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keyadd.o.mergesigs.o">
<cofloco>
<entry>### Maximum cost of eval_mergesigs_start(V_keypos,V__newsigs,V__publickey,V__batchmode,V__verbose,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m5.083s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keyadd.o.sig_list_clear.o">
<cofloco>
<entry>### Maximum cost of eval_sig_list_clear_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.355s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keyadd.o.sig_list_find.o">
<cofloco>
<entry>### Maximum cost of eval_sig_list_find_start(V_pos,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.298s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymaint.o.check_secretkey.o">
<cofloco>
<entry>### Maximum cost of eval_check_secretkey_start(V_keypos,V_keyctrl,V__batchmode,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.487s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymaint.o.compute_legit.o">
<cofloco>
<entry>### Maximum cost of eval_compute_legit_start(V__marginal_min,V__complete_min,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.287s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymaint.o.freebufpool.o">
<cofloco>
<entry>### Maximum cost of eval_freebufpool_start(V__strleft,V__hashleft,V__totalsize,V__verbose,V__nleft,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.354s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymaint.o.free_newkeys.o">
<cofloco>
<entry>### Maximum cost of eval_free_newkeys_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.295s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymaint.o.getpubkey.o">
<cofloco>
<entry>### Maximum cost of eval_getpubkey_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.306s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymaint.o.init_trust_lst.o">
<cofloco>
<entry>### Maximum cost of eval_init_trust_lst_start(V__trustlst_len,V__legitlst_len,V__init_trust_lst_initialized,B) </entry>
<result> 14  </result>
<complexity> constant  </complexity>
<time>0m0.425s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymaint.o.init_userhash.o">
<cofloco>
<entry>### Maximum cost of eval_init_userhash_start(V__nkr,V__hashleft,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.116s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymaint.o.ismember_newkeys.o">
<cofloco>
<entry>### Maximum cost of eval_ismember_newkeys_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.922s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymaint.o.lookup_by_keyID.o">
<cofloco>
<entry>### Maximum cost of eval_lookup_by_keyID_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.014s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymaint.o.maint_final.o">
<cofloco>
<entry>### Maximum cost of eval_maint_final_start(V__check_only,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.447s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymaint.o.maint_list.o">
<cofloco>
<entry>### Maximum cost of eval_maint_list_start(V__trustlst_len,V__legitlst_len,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.629s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymaint.o.maint_read_data.o">
<cofloco>
<entry>### Maximum cost of eval_maint_read_data_start(V__mverbose,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.011s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymaint.o.maint_trace_chain.o">
<cofloco>
<entry>### Maximum cost of eval_maint_trace_chain_start(V__mverbose,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.306s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymaint.o.setkrent.o">
<cofloco>
<entry>### Maximum cost of eval_setkrent_start(V__nkr,B) </entry>
<result> nat(V__nkr)*2+1  </result>
<complexity> n  </complexity>
<time>0m0.362s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymaint.o.show_key.o">
<cofloco>
<entry>### Maximum cost of eval_show_key_start(V_keypos,V_what,V__global_precision,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.727s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymaint.o.show_userid.o">
<cofloco>
<entry>### Maximum cost of eval_show_userid_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.338s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymaint.o._user_from_keyID.o">
<cofloco>
<entry>### Maximum cost of eval__user_from_keyID_start(V__nkr,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.622s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymaint.o.user_from_keyID.o">
<cofloco>
<entry>### Maximum cost of eval_user_from_keyID_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.297s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymgmt.o.dokeycheck.o">
<cofloco>
<entry>### Maximum cost of eval_dokeycheck_start(V_options,V__batchmode,V__quietmode,V__moreflag,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m5.434s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymgmt.o.dokeyedit.o">
<cofloco>
<entry>### Maximum cost of eval_dokeyedit_start(V__sign_new_userids,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.978s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymgmt.o.dokeygen.o">
<cofloco>
<entry>### Maximum cost of eval_dokeygen_start(V__verbose,V__sign_new_userids,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m2.755s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymgmt.o.extract_from_keyring.o">
<cofloco>
<entry>### Maximum cost of eval_extract_from_keyring_start(V_transflag,V__batchmode,V__force_flag,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m2.002s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymgmt.o.extract_keyID.o">
<cofloco>
<entry>### Maximum cost of eval_extract_keyID_start(B) </entry>
<result> 9  </result>
<complexity> constant  </complexity>
<time>0m0.303s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymgmt.o.getKeyHash.o">
<cofloco>
<entry>### Maximum cost of eval_getKeyHash_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.395s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymgmt.o.getpublickey.o">
<cofloco>
<entry>### Maximum cost of eval_getpublickey_start(V_flags,V__verbose,V__filter_mode,V__batchmode,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.094s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymgmt.o.getpubuserid.o">
<cofloco>
<entry>### Maximum cost of eval_getpubuserid_start(V_key_position,V_exact_match,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.322s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymgmt.o.getpubusersig.o">
<cofloco>
<entry>### Maximum cost of eval_getpubusersig_start(V_user_position,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.335s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymgmt.o.getsecretkey.o">
<cofloco>
<entry>### Maximum cost of eval_getsecretkey_start(V_flags,V__batchmode,V__quietmode,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.026s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymgmt.o.keyIDstring.o">
<cofloco>
<entry>### Maximum cost of eval_keyIDstring_start(B) </entry>
<result> 5  </result>
<complexity> constant  </complexity>
<time>0m0.521s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymgmt.o.kvformat_keypacket.o">
<cofloco>
<entry>### Maximum cost of eval_kvformat_keypacket_start(V_one_key,V_show_signatures,V_show_hashes,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.142s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymgmt.o.printKeyHash.o">
<cofloco>
<entry>### Maximum cost of eval_printKeyHash_start(V_indent,B) </entry>
<result> 18  </result>
<complexity> constant  </complexity>
<time>0m1.038s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymgmt.o.remove_from_keyring.o">
<cofloco>
<entry>### Maximum cost of eval_remove_from_keyring_start(V_secring_too,V__force_flag,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m3.801s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymgmt.o.remove_sigs.o">
<cofloco>
<entry>### Maximum cost of eval_remove_sigs_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.873s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymgmt.o.userid_match.o">
<cofloco>
<entry>### Maximum cost of eval_userid_match_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.600s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_keymgmt.o.writekeyfile.o">
<cofloco>
<entry>### Maximum cost of eval_writekeyfile_start(V_timestamp,V__mpi_checksum,V__verbose,V__version_byte,B) </entry>
<result> 9  </result>
<complexity> constant  </complexity>
<time>0m0.443s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_language.o.LANG.o">
<cofloco>
<entry>### Maximum cost of eval_LANG_start(V__subtitles_available,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.316s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_language.o.lookup_offset.o">
<cofloco>
<entry>### Maximum cost of eval_lookup_offset_start(V_crc,V__nmsg,B) </entry>
<result> nat(V__nmsg)*2+1  </result>
<complexity> n  </complexity>
<time>0m0.325s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_language.o.make_indexfile.o">
<cofloco>
<entry>### Maximum cost of eval_make_indexfile_start(V__nmsg,V__verbose,V__line,V__max_msgs,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.844s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_language.o.readstr.o">
<cofloco>
<entry>### Maximum cost of eval_readstr_start(V_nlabort,V__line,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.268s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_md5.o.MD5Update.o">
<cofloco>
<entry>### Maximum cost of eval_MD5Update_start(V_len,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.006s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_mdfile.o.MDfile0_len.o">
<cofloco>
<entry>### Maximum cost of eval_MDfile0_len_start(V_longcount,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.003s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_mdfile.o.MDfile0.o">
<cofloco>
<entry>### Maximum cost of eval_MDfile0_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.924s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_memmove.o.memmove.o">
<cofloco>
<entry>### Maximum cost of eval_memmove_start(V_length,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m2.200s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_more.o.more_file.o">
<cofloco>
<entry>### Maximum cost of eval_more_file_start(V_eyes_only,V__screen_columns,V__screen_lines,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.425s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_mpiio.o.cbc_xor.o">
<cofloco>
<entry>### Maximum cost of eval_cbc_xor_start(V_bytecount,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.421s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_mpiio.o.checksum.o">
<cofloco>
<entry>### Maximum cost of eval_checksum_start(V_count,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.321s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_mpiio.o.hiloswap.o">
<cofloco>
<entry>### Maximum cost of eval_hiloswap_start(V_numbytes,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.295s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_mpiio.o.mp_display.o">
<cofloco>
<entry>### Maximum cost of eval_mp_display_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.714s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_mpiio.o.mpi2reg.o">
<cofloco>
<entry>### Maximum cost of eval_mpi2reg_start(V__global_precision,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.353s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_mpiio.o.putstr.o">
<cofloco>
<entry>### Maximum cost of eval_putstr_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.289s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_mpiio.o.reg2mpi.o">
<cofloco>
<entry>### Maximum cost of eval_reg2mpi_start(V__global_precision,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.337s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_mpiio.o.string_length.o">
<cofloco>
<entry>### Maximum cost of eval_string_length_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.557s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_mpilib.o.countbits.o">
<cofloco>
<entry>### Maximum cost of eval_countbits_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.925s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_mpilib.o.mp_addc.o">
<cofloco>
<entry>### Maximum cost of eval_mp_addc_start(V_carry,V__global_precision,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.001s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_mpilib.o.mp_compare.o">
<cofloco>
<entry>### Maximum cost of eval_mp_compare_start(V__global_precision,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.980s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_mpilib.o.mp_dec.o">
<cofloco>
<entry>### Maximum cost of eval_mp_dec_start(V__global_precision,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.994s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_mpilib.o.mp_dmul.o">
<cofloco>
<entry>### Maximum cost of eval_mp_dmul_start(V__global_precision,V__munit_prec,B) </entry>
<result> nat(V__global_precision)+1  </result>
<complexity> n  </complexity>
<time>0m1.114s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_mpilib.o.mp_inc.o">
<cofloco>
<entry>### Maximum cost of eval_mp_inc_start(V__global_precision,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.992s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_mpilib.o.mp_modexp.o">
<cofloco>
<entry>### Maximum cost of eval_mp_modexp_start(V__global_precision,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.702s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_mpilib.o.mp_mod.o">
<cofloco>
<entry>### Maximum cost of eval_mp_mod_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.378s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_mpilib.o.mp_mult.o">
<cofloco>
<entry>### Maximum cost of eval_mp_mult_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.371s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_mpilib.o.mp_neg.o">
<cofloco>
<entry>### Maximum cost of eval_mp_neg_start(V__global_precision,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.326s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_mpilib.o.mp_recip.o">
<cofloco>
<entry>### Maximum cost of eval_mp_recip_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.338s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_mpilib.o.mp_rotate_left.o">
<cofloco>
<entry>### Maximum cost of eval_mp_rotate_left_start(V_carry,V__global_precision,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.318s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_mpilib.o.mp_shift_right_bits.o">
<cofloco>
<entry>### Maximum cost of eval_mp_shift_right_bits_start(V_bits,V__global_precision,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.355s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_mpilib.o.mp_shortdiv.o">
<cofloco>
<entry>### Maximum cost of eval_mp_shortdiv_start(V_divisor,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.361s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_mpilib.o.mp_shortmod.o">
<cofloco>
<entry>### Maximum cost of eval_mp_shortmod_start(V_divisor,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.024s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_mpilib.o.mp_smul.o">
<cofloco>
<entry>### Maximum cost of eval_mp_smul_start(V_multiplier,V__munit_prec,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.979s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_mpilib.o.mp_subb.o">
<cofloco>
<entry>### Maximum cost of eval_mp_subb_start(V_borrow,V__global_precision,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.002s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_mpilib.o.mp_udiv.o">
<cofloco>
<entry>### Maximum cost of eval_mp_udiv_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.173s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_mpilib.o.significance.o">
<cofloco>
<entry>### Maximum cost of eval_significance_start(V__global_precision,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.993s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_mpilib.o.smith_modmult.o">
<cofloco>
<entry>### Maximum cost of eval_smith_modmult_start(V__global_precision,V__munit_prec,V__modlenMULTUNITS,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.715s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_noise.o.noiseTickSize.o">
<cofloco>
<entry>### Maximum cost of eval_noiseTickSize_start(V__verbose,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.201s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_passwd.o.GetHashedPassPhrase.o">
<cofloco>
<entry>### Maximum cost of eval_GetHashedPassPhrase_start(V_noecho,V__showpass,V__filter_mode,V__quietmode,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.738s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_pgp.o.compressSignature.o">
<cofloco>
<entry>### Maximum cost of eval_compressSignature_start(B) </entry>
<result> 20  </result>
<complexity> constant  </complexity>
<time>0m0.999s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_pgp.o.do_armorfile.o">
<cofloco>
<entry>### Maximum cost of eval_do_armorfile_start(V__quietmode,V__keepctx,V__checksig_pass,V__de_armor_only,V__errorLvl,V__strip_spaces,V__use_charset_header,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m2.111s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_pgp.o.do_decrypt.o">
<cofloco>
<entry>### Maximum cost of eval_do_decrypt_start(V__verbose,V__moreflag,V__filter_mode,V__batchmode,V__quietmode,V__literal_mode,V__checksig_pass,V__strip_sig_flag,V__decrypt_only_flag,V__preserve_filename,V__errorLvl,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m2.415s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_pgp.o.do_keyopt.o">
<cofloco>
<entry>### Maximum cost of eval_do_keyopt_start(V_keychar,V__emit_radix_64,V__filter_mode,V__batchmode,V__nomanual,V__myArgc,V__c_flag,V__sign_flag,V__u_flag,V__errorLvl,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m4.646s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_pgp.o.exitPGP.o">
<cofloco>
<entry>### Maximum cost of eval_exitPGP_start(V_returnval,V__verbose,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.472s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_pgp.o.ParseRecipients.o">
<cofloco>
<entry>### Maximum cost of eval_ParseRecipients_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.517s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_random.o.cryptRandInit.o">
<cofloco>
<entry>### Maximum cost of eval_cryptRandInit_start(V__randSeedOpen,B) </entry>
<result> 49  </result>
<complexity> constant  </complexity>
<time>0m0.332s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_random.o.cryptRandOpen.o">
<cofloco>
<entry>### Maximum cost of eval_cryptRandOpen_start(V__randSeedOpen,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.337s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_random.o.cryptRandWriteFile.o">
<cofloco>
<entry>### Maximum cost of eval_cryptRandWriteFile_start(V_bytes,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.591s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_random.o.getstring.o">
<cofloco>
<entry>### Maximum cost of eval_getstring_start(V_maxlen,V_echo,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.332s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_random.o.trueRandAccum.o">
<cofloco>
<entry>### Maximum cost of eval_trueRandAccum_start(V_count,V__trueRandBits,V__trueRandPending,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.393s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_random.o.trueRandEvent.o">
<cofloco>
<entry>### Maximum cost of eval_trueRandEvent_start(V_event,V__trueRandBits,V__trueRandEvent_event1,V__trueRandEvent_event2,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.326s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_randpool.o.randPoolAddBytes.o">
<cofloco>
<entry>### Maximum cost of eval_randPoolAddBytes_start(V_len,V__randPoolAddPos,V__randPoolGetPos,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.377s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_randpool.o.randPoolGetBytes.o">
<cofloco>
<entry>### Maximum cost of eval_randPoolGetBytes_start(V_len,V__randPoolGetPos,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.374s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_randpool.o.randPoolStir.o">
<cofloco>
<entry>### Maximum cost of eval_randPoolStir_start(V__randPoolAddPos,V__randPoolGetPos,B) </entry>
<result> 244  </result>
<complexity> constant  </complexity>
<time>0m0.495s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_randpool.o.xorbytes.o">
<cofloco>
<entry>### Maximum cost of eval_xorbytes_start(V_len,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.010s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_rsagen.o.derive_rsakeys.o">
<cofloco>
<entry>### Maximum cost of eval_derive_rsakeys_start(V_ebits,V__global_precision,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.024s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_rsagen.o.rsa_keygen.o">
<cofloco>
<entry>### Maximum cost of eval_rsa_keygen_start(V_keybits,V_ebits,V__global_precision,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.560s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_rsaglue1.o.rsa_private_decrypt.o">
<cofloco>
<entry>### Maximum cost of eval_rsa_private_decrypt_start(V__global_precision,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.468s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_rsaglue1.o.rsa_private_encrypt.o">
<cofloco>
<entry>### Maximum cost of eval_rsa_private_encrypt_start(V_bytes,V__global_precision,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.258s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_rsaglue1.o.rsa_public_decrypt.o">
<cofloco>
<entry>### Maximum cost of eval_rsa_public_decrypt_start(V__global_precision,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.428s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_rsaglue1.o.rsa_public_encrypt.o">
<cofloco>
<entry>### Maximum cost of eval_rsa_public_encrypt_start(V_bytes,V__global_precision,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.490s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_sleep.o.sleep.o">
<cofloco>
<entry>### Maximum cost of eval_sleep_start(V_secs,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.302s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_strtol.o.strtol.o">
<cofloco>
<entry>### Maximum cost of eval_strtol_start(V_base,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.394s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_system.o.strlwr.o">
<cofloco>
<entry>### Maximum cost of eval_strlwr_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.296s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_zbits.o.bi_reverse.o">
<cofloco>
<entry>### Maximum cost of eval_bi_reverse_start(V_code,V_len,B) </entry>
<result> nat(V_len)+1  </result>
<complexity> n  </complexity>
<time>0m0.307s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_zdeflate.o.deflate.o">
<cofloco>
<entry>### Maximum cost of eval_deflate_start(V__max_lazy_match,V__strstart,V__block_start,V__lookahead,V__eofile,V__ins_h,V__prev_length,V__match_start,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m14.842s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_zdeflate.o.fill_window.o">
<cofloco>
<entry>### Maximum cost of eval_fill_window_start(V__strstart,V__block_start,V__lookahead,V__eofile,V__match_start,B) </entry>
<result> 40962  </result>
<complexity> constant  </complexity>
<time>0m0.709s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_zdeflate.o.lm_init.o">
<cofloco>
<entry>### Maximum cost of eval_lm_init_start(V_pack_level,V__max_lazy_match,V__good_match,V__max_chain_length,V__strstart,V__block_start,V__lookahead,V__eofile,V__ins_h,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.529s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_zdeflate.o.longest_match.o">
<cofloco>
<entry>### Maximum cost of eval_longest_match_start(V_cur_match,V__good_match,V__max_chain_length,V__strstart,V__prev_length,V__match_start,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.350s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_zinflate.o.flush.o">
<cofloco>
<entry>### Maximum cost of eval_flush_start(V_w,V__outcnt,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.404s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_zinflate.o.huft_build.o">
<cofloco>
<entry>### Maximum cost of eval_huft_build_start(V_n,V_s,V__hufts,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m17.929s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_zinflate.o.huft_free.o">
<cofloco>
<entry>### Maximum cost of eval_huft_free_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.408s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_zinflate.o.inflate_block.o">
<cofloco>
<entry>### Maximum cost of eval_inflate_block_start(V__bb,V__bk,V__incnt,B) </entry>
<result> max([nat(-V__bk/8+3/8)*4+nat(-V__bk/8+1/4),nat(-V__bk/8)*6+nat(-V__bk/8+1/8)*2])+2  </result>
<complexity> n  </complexity>
<time>0m0.573s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_zinflate.o.inflate_codes.o">
<cofloco>
<entry> </entry>
<result> </result>
<complexity> </complexity>
<time>1m0.012s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_zinflate.o.inflate_dynamic.o">
<cofloco>
<entry>### Maximum cost of eval_inflate_dynamic_start(V__lbits,V__dbits,V__bb,V__bk,V__incnt,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m13.119s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_zinflate.o.inflate_entry.o">
<cofloco>
<entry>### Maximum cost of eval_inflate_entry_start(V__hufts,V__bb,V__bk,V__wp,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.482s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_zinflate.o.inflate_fixed.o">
<cofloco>
<entry>### Maximum cost of eval_inflate_fixed_start(B) </entry>
<result> 323  </result>
<complexity> constant  </complexity>
<time>0m0.445s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_zinflate.o.inflate_stored.o">
<cofloco>
<entry>### Maximum cost of eval_inflate_stored_start(V__bb,V__bk,V__wp,V__incnt,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.672s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_ztrees.o.build_bl_tree.o">
<cofloco>
<entry>### Maximum cost of eval_build_bl_tree_start(V__opt_len,B) </entry>
<result> 37  </result>
<complexity> constant  </complexity>
<time>0m0.316s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_ztrees.o.build_tree.o">
<cofloco>
<entry>### Maximum cost of eval_build_tree_start(V__opt_len,V__static_len,V__heap_len,V__heap_max,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m2.376s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_ztrees.o.compress_block.o">
<cofloco>
<entry>### Maximum cost of eval_compress_block_start(V__last_lit,B) </entry>
<result> nat(V__last_lit)+1  </result>
<complexity> n  </complexity>
<time>0m1.167s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_ztrees.o.ct_init.o">
<cofloco>
<entry>### Maximum cost of eval_ct_init_start(V__input_len,V__compressed_len,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m3.158s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_ztrees.o.ct_tally.o">
<cofloco>
<entry>### Maximum cost of eval_ct_tally_start(V_dist,V_lc,V__flags,V__last_flags,V__last_lit,V__last_dist,V__flag_bit,V__level,V__strstart,V__block_start,B) </entry>
<result> 541  </result>
<complexity> constant  </complexity>
<time>0m2.015s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_ztrees.o.gen_bitlen.o">
<cofloco>
<entry>### Maximum cost of eval_gen_bitlen_start(V__opt_len,V__static_len,V__heap_max,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m2.292s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_ztrees.o.gen_codes.o">
<cofloco>
<entry>### Maximum cost of eval_gen_codes_start(V_max_code,B) </entry>
<result> nat(V_max_code+1)+17  </result>
<complexity> n  </complexity>
<time>0m0.365s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_ztrees.o.init_block.o">
<cofloco>
<entry>### Maximum cost of eval_init_block_start(V__flags,V__last_flags,V__opt_len,V__static_len,V__last_lit,V__last_dist,V__flag_bit,B) </entry>
<result> 338  </result>
<complexity> constant  </complexity>
<time>0m0.359s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_ztrees.o.pqdownheap.o">
<cofloco>
<entry>### Maximum cost of eval_pqdownheap_start(V_k,V__heap_len,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.320s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_ztrees.o.scan_tree.o">
<cofloco>
<entry>### Maximum cost of eval_scan_tree_start(V_max_code,B) </entry>
<result> nat(V_max_code+1)+1  </result>
<complexity> n  </complexity>
<time>0m0.325s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_ztrees.o.send_all_trees.o">
<cofloco>
<entry>### Maximum cost of eval_send_all_trees_start(V_lcodes,V_dcodes,V_blcodes,B) </entry>
<result> nat(V_blcodes)+1  </result>
<complexity> n  </complexity>
<time>0m0.358s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_ztrees.o.send_tree.o">
<cofloco>
<entry>### Maximum cost of eval_send_tree_start(V_max_code,B) </entry>
<result> nat(V_max_code+1)*4+1  </result>
<complexity> n  </complexity>
<time>0m0.554s </time>
<error></error>
</cofloco>
</example>
<example name="security_pgp_d_src_ztrees.o.set_file_type.o">
<cofloco>
<entry>### Maximum cost of eval_set_file_type_start(B) </entry>
<result> 259  </result>
<complexity> constant  </complexity>
<time>0m0.364s </time>
<error></error>
</cofloco>
</example>
<example name="security_rijndael_d_src_aes.o.set_key.o">
<cofloco>
<entry>### Maximum cost of eval_set_key_start(V_n_bytes,V_f,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.347s </time>
<error></error>
</cofloco>
</example>
<example name="security_rijndael_d_src_aesxam.o.decfile.o">
<cofloco>
<entry>### Maximum cost of eval_decfile_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.467s </time>
<error></error>
</cofloco>
</example>
<example name="security_rijndael_d_src_aesxam.o.encfile.o">
<cofloco>
<entry>### Maximum cost of eval_encfile_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.862s </time>
<error></error>
</cofloco>
</example>
<example name="security_rijndael_d_src_aesxam.o.fillrand.o">
<cofloco>
<entry>### Maximum cost of eval_fillrand_start(V_len,V__fillrand_mt,V__fillrand_count,B) </entry>
<result> nat(V_len)+1  </result>
<complexity> n  </complexity>
<time>0m0.985s </time>
<error></error>
</cofloco>
</example>
<example name="security_rijndael_d_src_aesxam.o.main1.o">
<cofloco>
<entry>### Maximum cost of eval_main1_start(V_argc,B) </entry>
<result> 191  </result>
<complexity> constant  </complexity>
<time>0m1.236s </time>
<error></error>
</cofloco>
</example>
<example name="security_sha_src_sha_driver.o.main1.o">
<cofloco>
<entry>### Maximum cost of eval_main1_start(V_argc,V_print,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.107s </time>
<error></error>
</cofloco>
</example>
<example name="security_sha_src_sha.o.byte_reverse.o">
<cofloco>
<entry>### Maximum cost of eval_byte_reverse_start(V_count,B) </entry>
<result> nat(V_count/8)+1  </result>
<complexity> n  </complexity>
<time>0m1.039s </time>
<error></error>
</cofloco>
</example>
<example name="security_sha_src_sha.o.sha_stream.o">
<cofloco>
<entry>### Maximum cost of eval_sha_stream_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.917s </time>
<error></error>
</cofloco>
</example>
<example name="security_sha_src_sha.o.sha_transform.o">
<cofloco>
<entry>### Maximum cost of eval_sha_transform_start(B) </entry>
<result> 166  </result>
<complexity> constant  </complexity>
<time>0m0.451s </time>
<error></error>
</cofloco>
</example>
<example name="security_sha_src_sha.o.sha_update.o">
<cofloco>
<entry>### Maximum cost of eval_sha_update_start(V_count,B) </entry>
<result> nat(V_count)+1  </result>
<complexity> n  </complexity>
<time>0m0.320s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_adpcm_c_src_adpcm.o.adpcm_coder.o">
<cofloco>
<entry>### Maximum cost of eval_adpcm_coder_start(V_len,B) </entry>
<result> nat(V_len)*2+1  </result>
<complexity> n  </complexity>
<time>0m0.344s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_adpcm_c_src_adpcm.o.adpcm_decoder.o">
<cofloco>
<entry>### Maximum cost of eval_adpcm_decoder_start(V_len,B) </entry>
<result> nat(V_len)*2+1  </result>
<complexity> n  </complexity>
<time>0m0.346s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_adpcm_c_src_d_rawdaudio.o.main.o">
<cofloco>
<entry>### Maximum cost of eval_main_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.363s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_adpcm_c_src_rawcaudio.o.main.o">
<cofloco>
<entry>### Maximum cost of eval_main_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.443s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_CRC32_src_crc_32.o.crc32buf.o">
<cofloco>
<entry>### Maximum cost of eval_crc32buf_start(V_len,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.320s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_CRC32_src_crc_32.o.crc32file.o">
<cofloco>
<entry>### Maximum cost of eval_crc32file_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.385s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_CRC32_src_crc_32.o.main1.o">
<cofloco>
<entry>### Maximum cost of eval_main1_start(V_argc,V_print,B) </entry>
<result> nat(V_argc)*3+1  </result>
<complexity> n  </complexity>
<time>0m1.028s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_CRC32_src_loop-wrap.o.main.o">
<cofloco>
<entry>### Maximum cost of eval_main_start(V_argc,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.993s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_gsm_src_add.o.gsm_div.o">
<cofloco>
<entry>### Maximum cost of eval_gsm_div_start(V_num,V_denum,B) </entry>
<result> 16  </result>
<complexity> constant  </complexity>
<time>0m0.952s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_gsm_src_code.o.Gsm_Coder.o">
<cofloco>
<entry>### Maximum cost of eval_Gsm_Coder_start(B) </entry>
<result> 169  </result>
<complexity> constant  </complexity>
<time>0m1.074s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_gsm_src_debug.o.gsm_debug_longwords.o">
<cofloco>
<entry>### Maximum cost of eval_gsm_debug_longwords_start(V_from,V_to,B) </entry>
<result> nat(-V_from+V_to+1)+1  </result>
<complexity> n  </complexity>
<time>0m1.001s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_gsm_src_debug.o.gsm_debug_words.o">
<cofloco>
<entry>### Maximum cost of eval_gsm_debug_words_start(V_from,V_to,B) </entry>
<result> nat(-V_from+V_to+1)+1  </result>
<complexity> n  </complexity>
<time>0m1.006s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_gsm_src_decode.o.Gsm_Decoder.o">
<cofloco>
<entry>### Maximum cost of eval_Gsm_Decoder_start(B) </entry>
<result> 169  </result>
<complexity> constant  </complexity>
<time>0m0.742s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_gsm_src_decode.o.Postprocessing.o">
<cofloco>
<entry>### Maximum cost of eval_Postprocessing_start(B) </entry>
<result> 161  </result>
<complexity> constant  </complexity>
<time>0m0.307s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_gsm_src_long_term.o.Calculation_of_the_LTP_parameters.o">
<cofloco>
<entry>### Maximum cost of eval_Calculation_of_the_LTP_parameters_start(B) </entry>
<result> 493  </result>
<complexity> constant  </complexity>
<time>0m0.504s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_gsm_src_long_term.o.Gsm_Long_Term_Synthesis_Filtering.o">
<cofloco>
<entry>### Maximum cost of eval_Gsm_Long_Term_Synthesis_Filtering_start(V_Ncr,V_bcr,B) </entry>
<result> 162  </result>
<complexity> constant  </complexity>
<time>0m0.332s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_gsm_src_long_term.o.Long_term_analysis_filtering.o">
<cofloco>
<entry>### Maximum cost of eval_Long_term_analysis_filtering_start(V_bc,V_Nc,B) </entry>
<result> 161  </result>
<complexity> constant  </complexity>
<time>0m0.379s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_gsm_src_lpc.o.Autocorrelation.o">
<cofloco>
<entry>### Maximum cost of eval_Autocorrelation_start(B) </entry>
<result> 2866  </result>
<complexity> constant  </complexity>
<time>0m0.597s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_gsm_src_lpc.o.Reflection_coefficients.o">
<cofloco>
<entry>### Maximum cost of eval_Reflection_coefficients_start(B) </entry>
<result> 379  </result>
<complexity> constant  </complexity>
<time>0m0.598s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_gsm_src_lpc.o.Transformation_to_Log_Area_Ratios.o">
<cofloco>
<entry>### Maximum cost of eval_Transformation_to_Log_Area_Ratios_start(B) </entry>
<result> 37  </result>
<complexity> constant  </complexity>
<time>0m0.364s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_gsm_src_preprocess.o.Gsm_Preprocess.o">
<cofloco>
<entry>### Maximum cost of eval_Gsm_Preprocess_start(B) </entry>
<result> 641  </result>
<complexity> constant  </complexity>
<time>0m0.361s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_gsm_src_rpe.o.APCM_inverse_quantization.o">
<cofloco>
<entry>### Maximum cost of eval_APCM_inverse_quantization_start(V_mant,V_exp,B) </entry>
<result> 40  </result>
<complexity> constant  </complexity>
<time>0m0.677s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_gsm_src_rpe.o.APCM_quantization.o">
<cofloco>
<entry>### Maximum cost of eval_APCM_quantization_start(B) </entry>
<result> 101  </result>
<complexity> constant  </complexity>
<time>0m1.506s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_gsm_src_rpe.o.APCM_quantization_xmaxc_to_exp_mant.o">
<cofloco>
<entry>### Maximum cost of eval_APCM_quantization_xmaxc_to_exp_mant_start(V_xmaxc,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.949s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_gsm_src_rpe.o.RPE_grid_positioning.o">
<cofloco>
<entry> </entry>
<result> </result>
<complexity> </complexity>
<time>0m0.851s </time>
<error>ERROR: Unknown message: error(Failed to parse input file)</error>
</cofloco>
</example>
<example name="telecom_gsm_src_rpe.o.RPE_grid_selection.o">
<cofloco>
<entry>### Maximum cost of eval_RPE_grid_selection_start(B) </entry>
<result> 14  </result>
<complexity> constant  </complexity>
<time>0m0.945s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_gsm_src_rpe.o.Weighting_filter.o">
<cofloco>
<entry>### Maximum cost of eval_Weighting_filter_start(B) </entry>
<result> 41  </result>
<complexity> constant  </complexity>
<time>0m0.948s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_gsm_src_short_term.o.Coefficients_0_12.o">
<cofloco>
<entry>### Maximum cost of eval_Coefficients_0_12_start(B) </entry>
<result> 9  </result>
<complexity> constant  </complexity>
<time>0m0.974s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_gsm_src_short_term.o.Coefficients_13_26.o">
<cofloco>
<entry>### Maximum cost of eval_Coefficients_13_26_start(B) </entry>
<result> 9  </result>
<complexity> constant  </complexity>
<time>0m0.937s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_gsm_src_short_term.o.Coefficients_27_39.o">
<cofloco>
<entry>### Maximum cost of eval_Coefficients_27_39_start(B) </entry>
<result> 9  </result>
<complexity> constant  </complexity>
<time>0m0.397s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_gsm_src_short_term.o.Coefficients_40_159.o">
<cofloco>
<entry>### Maximum cost of eval_Coefficients_40_159_start(B) </entry>
<result> 9  </result>
<complexity> constant  </complexity>
<time>0m0.303s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_gsm_src_short_term.o.LARp_to_rp.o">
<cofloco>
<entry>### Maximum cost of eval_LARp_to_rp_start(B) </entry>
<result> 9  </result>
<complexity> constant  </complexity>
<time>0m0.306s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_gsm_src_short_term.o.Short_term_analysis_filtering.o">
<cofloco>
<entry>### Maximum cost of eval_Short_term_analysis_filtering_start(V_k_n,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.364s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_gsm_src_short_term.o.Short_term_synthesis_filtering.o">
<cofloco>
<entry>### Maximum cost of eval_Short_term_synthesis_filtering_start(V_k,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.388s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_gsm_src_toast_alaw.o.alaw_input.o">
<cofloco>
<entry>### Maximum cost of eval_alaw_input_start(B) </entry>
<result> 320  </result>
<complexity> constant  </complexity>
<time>0m0.318s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_gsm_src_toast_alaw.o.alaw_output.o">
<cofloco>
<entry>### Maximum cost of eval_alaw_output_start(B) </entry>
<result> 320  </result>
<complexity> constant  </complexity>
<time>0m0.313s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_gsm_src_toast.o.grok_format.o">
<cofloco>
<entry>### Maximum cost of eval_grok_format_start(B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m0.308s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_gsm_src_toast.o.main1.o">
<cofloco>
<entry>### Maximum cost of eval_main1_start(V_ac,V__f_decode,V__f_cat,V__f_force,V__f_precious,V__f_fast,V__f_verbose,V__optind,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m2.554s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_gsm_src_toast.o.ok_to_replace.o">
<cofloco>
<entry>### Maximum cost of eval_ok_to_replace_start(V__f_force,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.086s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_gsm_src_toast.o.process_decode.o">
<cofloco>
<entry>### Maximum cost of eval_process_decode_start(V__f_fast,V__f_verbose,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.525s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_gsm_src_toast.o.process_encode.o">
<cofloco>
<entry>### Maximum cost of eval_process_encode_start(V__f_fast,V__f_verbose,B) </entry>
<result> inf  </result>
<complexity> infinity  </complexity>
<time>0m1.194s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_gsm_src_toast_ulaw.o.ulaw_input.o">
<cofloco>
<entry>### Maximum cost of eval_ulaw_input_start(B) </entry>
<result> 320  </result>
<complexity> constant  </complexity>
<time>0m0.988s </time>
<error></error>
</cofloco>
</example>
<example name="telecom_gsm_src_toast_ulaw.o.ulaw_output.o">
<cofloco>
<entry>### Maximum cost of eval_ulaw_output_start(B) </entry>
<result> 320  </result>
<complexity> constant  </complexity>
<time>0m0.967s </time>
<error></error>
</cofloco>
</example>
</examples>

<?xml version='1.0' encoding='UTF-8'?>
<examples>
<example name="cBench_cf_decode_eol.c">
<cofloco>
<entry>### Maximum cost of eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) </entry>
<result> max([56,nat(V_ss_bits_left+253)+56+nat(-V_pr_ptr+V_pr_limit)*8+nat(-V_pr_ptr/3+V_pr_limit/3)*24])+1  </result>
<complexity> n  </complexity>
<time>0m1.032s </time>
<error></error>
</cofloco>
</example>
<example name="cBench_cryptRandWriteFile.c">
<cofloco>
<entry>### Maximum cost of eval_cryptRandWriteFile_start(V_bytes,B) </entry>
<result> nat(V_bytes)*257+255+(nat(V_bytes)+2)+1  </result>
<complexity> n  </complexity>
<time>0m0.560s </time>
<error></error>
</cofloco>
</example>
<example name="cBench_encode_mcu_AC_refine.c">
<cofloco>
<entry>### Maximum cost of eval_encode_mcu_AC_refine_start(V_cinfo_Ss,V_cinfo_Se,B) </entry>
<result> nat(-V_cinfo_Ss+V_cinfo_Se+1)*10+2  </result>
<complexity> n  </complexity>
<time>0m0.738s </time>
<error></error>
</cofloco>
</example>
<example name="cBench_hc_compute.c">
<cofloco>
<entry>### Maximum cost of eval_hc_compute_start(V_num_values,B) </entry>
<result> nat(V_num_values)*4*nat(V_num_values)+nat(V_num_values)*22+nat(V_num_values/2)*3+11  </result>
<complexity> n^2  </complexity>
<time>0m0.831s </time>
<error></error>
</cofloco>
</example>
<example name="cBench_inflated_stored.c">
<cofloco>
<entry>### Maximum cost of eval_inflate_stored_start(V_n,V_k,V_limit,B) </entry>
<result> max([max([max([1,nat(V_n/8-V_k/8+4)+max([1,nat(V_n/8-V_k/8+4)])]),nat(V_n/8-V_k/8+2)+4]),nat(V_n)*2+1+max([max([nat(V_n/8-V_k/8+4)+max([nat(V_n+V_limit/8),nat(-V_limit/8+23/8)*2+nat(9/8*V_n-V_k/8+V_limit/8+3)]),nat(-V_n/8+V_k/8-V_limit/8)*2+nat(9/8*V_n-V_k/8+V_limit/8+4)]),nat(V_n/8-V_k/8+2)+2+max([nat(V_n+V_limit/8),nat(-V_limit/8+23/8)*2+nat(V_n+V_limit/8+1)])])])+2  </result>
<complexity> n  </complexity>
<time>0m0.970s </time>
<error></error>
</cofloco>
</example>
<example name="cBench_PackBitsEncode.c">
<cofloco>
<entry>### Maximum cost of eval_PackBitsEncode_start(V_cc,B) </entry>
<result> max([133,nat(V_cc)+3+max([max([1,nat(V_cc/128)+1]),1/32+2257/64*nat(V_cc)+nat(2*V_cc)*367+nat(3/2*V_cc)+nat(3/4*V_cc)*3+nat(4/3*V_cc)*2+nat(V_cc/2)*7+max([nat(2*V_cc)*4+max([63/32,nat(2*V_cc)+max([31/32,nat(2*V_cc)+nat(V_cc)+max([1489/64*nat(V_cc)+nat(2*V_cc)*361+nat(3/2*V_cc)+nat(3/4*V_cc)*3+nat(4/3*V_cc)*2+nat(V_cc/2)*7+max([nat(2*V_cc)*4+max([nat(2*V_cc)*2+max([721/64*nat(V_cc)+max([111/64*nat(V_cc)+max([625/32*nat(V_cc)+nat(2*V_cc)*369+nat(3/2*V_cc)+nat(3/4*V_cc)*3+nat(4/3*V_cc)*2+nat(V_cc/2)*7+nat(V_cc/385)*5+nat(V_cc/386)*5+max([nat(2*V_cc)*373+nat(3/2*V_cc)+nat(3/4*V_cc)*3+nat(4/3*V_cc)*2+nat(V_cc/2)*7+nat(V_cc/385)*15+nat(V_cc/386)*15,4159/32+239/64*nat(V_cc)+max([nat(4*V_cc),1553/64*nat(V_cc)+1+nat(2*V_cc)*366+nat(3/2*V_cc)+nat(3/4*V_cc)*3+nat(4/3*V_cc)*2+nat(V_cc/2)*7+nat(V_cc/385)*5+nat(V_cc/386)*5+max([nat(4*V_cc)*2,1361/64*nat(V_cc)+nat(2*V_cc)*375+nat(3/2*V_cc)+nat(3/4*V_cc)*3+nat(4/3*V_cc)*2+nat(V_cc/2)*7+nat(V_cc/385)*5+nat(V_cc/386)*5])])]),63/32+nat(4*V_cc)]),31/32+nat(2*V_cc)*370+nat(3/2*V_cc)+nat(3/4*V_cc)*3+nat(4/3*V_cc)*2+nat(V_cc/2)*7+nat(V_cc/385)*15+nat(V_cc/386)*15]),79/32+nat(V_cc/385)*5+nat(V_cc/386)*5]),63/32+nat(4*V_cc)+nat(V_cc/385)*5+nat(V_cc/386)*5]),63/32+nat(V_cc)*14+nat(4*V_cc)*2]),63/32+nat(V_cc/128)])])]),63/32+nat(V_cc)+nat(4*V_cc)])])])+1  </result>
<complexity> n  </complexity>
<time>0m57.069s </time>
<error></error>
</cofloco>
</example>
<example name="cBench_sendMTFValues.c">
<cofloco>
<entry>### Maximum cost of eval_sendMTFValues_start(V_nGroups,V_alphaSize,B) </entry>
<result> max([2,nat(V_alphaSize)+max([nat(V_alphaSize+1)+2,nat(V_alphaSize)*15+nat(V_nGroups)*10+nat(V_nGroups+V_alphaSize)*3+nat(2*V_nGroups+V_alphaSize)+max([nat(V_nGroups)*13+2+nat(V_alphaSize)*16+nat(V_nGroups+V_alphaSize)*3+nat(2*V_nGroups+V_alphaSize)+nat(V_nGroups)*3,nat(V_alphaSize)*16+2+nat(3*V_alphaSize)+nat(V_nGroups+V_alphaSize)*19+nat(2*V_nGroups+V_alphaSize)+nat(3*V_alphaSize+3)])])])+1  </result>
<complexity> n  </complexity>
<time>0m2.117s </time>
<error></error>
</cofloco>
</example>
<example name="cBench_send_tree.c">
<cofloco>
<entry>### Maximum cost of eval_send_tree_start(V_max_code,V_max_count,V_min_count,B) </entry>
<result> nat(V_max_code+1)*13+1  </result>
<complexity> n  </complexity>
<time>0m1.364s </time>
<error></error>
</cofloco>
</example>
<example name="cBench_set_color_ht.c">
<cofloco>
<entry>### Maximum cost of eval_set_color_ht_extracted_start(V_h,V_w,B) </entry>
<result> max([nat(V_w)+2+nat(V_w/8)*10,nat(V_h)*2+max([nat(V_w)+2+nat(7*V_h),7/2*nat(V_w)*nat(V_h)+nat(V_h)*2+nat(V_w/8)*10+(nat(V_w)+2)])+nat(V_h)*2])+2  </result>
<complexity> n^2  </complexity>
<time>0m0.989s </time>
<error></error>
</cofloco>
</example>
<example name="cBench_s_SFD_process.c">
<cofloco>
<entry>### Maximum cost of eval_s_SFD_process_start(V_p,V_rlimit,V_match,B) </entry>
<result> nat(-V_p+V_rlimit)*12+nat(V_match)*6+nat(V_match/2)*2+1  </result>
<complexity> n  </complexity>
<time>0m0.959s </time>
<error></error>
</cofloco>
</example>
<example name="cBench_subsetdump.c">
<cofloco>
<entry>### Maximum cost of eval_subsetdump_start(V_limit,B) </entry>
<result> nat(V_limit)*16+3+max([nat(V_limit)*10,nat(V_limit+1)*10])+1  </result>
<complexity> n  </complexity>
<time>0m1.041s </time>
<error></error>
</cofloco>
</example>
<example name="cBench_zwritehexstring_at.c">
<cofloco>
<entry>### Maximum cost of eval_zwritehexstring_at_extracted_start(V_len,B) </entry>
<result> max([2,nat(V_len)+max([2,nat(V_len)*65+65])])+1  </result>
<complexity> n  </complexity>
<time>0m0.636s </time>
<error></error>
</cofloco>
</example>
<example name="CPU2006_analyse_other.c">
<cofloco>
<entry>### Maximum cost of eval_analyse_other_start(V_atoms_nres,V_atoms_nr,V_bASK,B) </entry>
<result> nat(V_atoms_nr)*40*nat(V_atoms_nr)+nat(V_atoms_nr)*17+nat(V_atoms_nr)*8*nat(V_atoms_nr)*nat(V_atoms_nr)+(nat(V_atoms_nr)*2*nat(V_atoms_nr)+nat(V_atoms_nr)*2)+(nat(V_atoms_nr)*4*nat(V_atoms_nr)+nat(V_atoms_nr)*11)+(nat(V_atoms_nres)+3)  </result>
<complexity> n^3  </complexity>
<time>0m4.184s </time>
<error></error>
</cofloco>
</example>
<example name="CPU2006_ApplyBndRobin.c">
<cofloco>
<entry>### Maximum cost of eval_ApplyBndRobin_start(V_GH_cctk_lsh_0,V_GH_cctk_lsh_1,V_GH_cctk_lsh_2,V_first_var,V_num_vars,B) </entry>
<result> nat(V_num_vars)*2+max([nat(V_GH_cctk_lsh_2)*2*nat(V_num_vars),nat(V_GH_cctk_lsh_0)*24*nat(V_num_vars)+nat(V_num_vars)*13+max([nat(V_GH_cctk_lsh_0)*28*nat(V_GH_cctk_lsh_2)*nat(V_num_vars)+nat(V_GH_cctk_lsh_2)*61*nat(V_num_vars),nat(V_GH_cctk_lsh_0)*48*nat(V_GH_cctk_lsh_1)*nat(V_GH_cctk_lsh_2)*nat(V_num_vars)+nat(V_GH_cctk_lsh_0)*28*nat(V_GH_cctk_lsh_2)*nat(V_num_vars)+nat(V_GH_cctk_lsh_1)*597*nat(V_GH_cctk_lsh_2)*nat(V_num_vars)+nat(V_GH_cctk_lsh_2)*61*nat(V_num_vars)+(nat(V_GH_cctk_lsh_0)*40*nat(V_GH_cctk_lsh_1)*nat(V_num_vars)+nat(V_GH_cctk_lsh_1)*319*nat(V_num_vars))])])+nat(V_num_vars)*2+1  </result>
<complexity> n^4  </complexity>
<time>0m12.704s </time>
<error></error>
</cofloco>
</example>
<example name="CPU2006_asctoeg.c">
<cofloco>
<entry>### Maximum cost of eval_asctoeg_start(V_s,B) </entry>
<result> nat(V_s)*10*nat(V_s)+nat(V_s)*17+1  </result>
<complexity> n^2  </complexity>
<time>0m1.197s </time>
<error></error>
</cofloco>
</example>
<example name="CPU2006_Configure.c">
<cofloco>
<entry>### Maximum cost of eval_Configure_start(V_ac,B) </entry>
<result> max([14,nat(V_ac)*52+3])+1  </result>
<complexity> n  </complexity>
<time>0m1.468s </time>
<error></error>
</cofloco>
</example>
<example name="CPU2006_load_mems.c">
<cofloco>
<entry>### Maximum cost of eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) </entry>
<result> max([max([265,254/63*nat(-63*V_word_num_)*nat(-V_word_num_+1)+4+nat(-V_word_num_+1)*5+nat(-64*V_word_num_+64)*2+nat(-63*V_word_num_+63)*2]),nat(V_ptr)*2+max([nat(2*V_ptr)*513+2+max([nat(V_ptr)*2*max([128,nat(-V_bit_num_+128)])+nat(V_ptr)*2*max([126,nat(-V_bit_num_+126)]),nat(V_ptr)*2*126+2+nat(V_ptr)*2*128+max([261,254/63*nat(-63*V_word_num_)*nat(-V_word_num_+1)+nat(-V_word_num_+1)*5+nat(-64*V_word_num_+64)*2+nat(-63*V_word_num_+63)*2])]),nat(V_ptr)*2*max([128,nat(-64*V_word_num_-V_bit_num_+128)])+nat(V_ptr)*2*max([126,nat(-63*V_word_num_-V_bit_num_+126)])+nat(2*V_ptr-V_word_num_)*5+254/63*nat(63*V_ptr-63*V_word_num_)*nat(2*V_ptr-V_word_num_)])])+1  </result>
<complexity> n^2  </complexity>
<time>0m1.771s </time>
<error></error>
</cofloco>
</example>
<example name="CPU2006_local_alloc.c">
<cofloco>
<entry>### Maximum cost of eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B) </entry>
<result> nat(V_n_basic_blocks)*3+1+(nat(V_max_qty)+2)  </result>
<complexity> n  </complexity>
<time>0m0.839s </time>
<error></error>
</cofloco>
</example>
<example name="CPU2006_ParseFile.c">
<cofloco>
<entry> </entry>
<result> </result>
<complexity> </complexity>
<time>5m0.012s </time>
<error></error>
</cofloco>
</example>
<example name="CPU2006_Perl_scan_vstring.c">
<cofloco>
<entry>### Maximum cost of eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) </entry>
<result> max([2,nat(-V_s+V_PL_bufend)*95+3+max([nat(nat(-2*V_s+2*V_PL_bufend)+ -2)*96*nat(-2*V_s+2*V_PL_bufend)+nat(-2*V_s+2*V_PL_bufend)*456+nat(-2*V_s+2*V_PL_bufend)*96*nat(-2*V_s+2*V_PL_bufend),nat(nat(-2*V_s+2*V_PL_bufend)+ -2)*24*nat(-2*V_s+2*V_PL_bufend)+nat(nat(-V_s+V_PL_bufend)+ -2)*72*nat(-V_s+V_PL_bufend)+nat(-V_s+V_PL_bufend)*569+nat(-V_s+V_PL_bufend)*72*nat(-V_s+V_PL_bufend)+nat(-2*V_s+2*V_PL_bufend)*96+nat(-2*V_s+2*V_PL_bufend)*24*nat(-2*V_s+2*V_PL_bufend)+max([nat(nat(-V_s+V_PL_bufend)+ -2)*24*nat(-V_s+V_PL_bufend)+nat(-V_s+V_PL_bufend)*24*nat(-V_s+V_PL_bufend)+max([22,nat(nat(-2*V_s+2*V_PL_bufend)+ -2)*96*nat(-2*V_s+2*V_PL_bufend)+nat(nat(-V_s+V_PL_bufend)+ -2)*72*nat(-V_s+V_PL_bufend)+nat(-V_s+V_PL_bufend)*536+nat(-V_s+V_PL_bufend)*72*nat(-V_s+V_PL_bufend)+nat(-2*V_s+2*V_PL_bufend)*408+nat(-2*V_s+2*V_PL_bufend)*96*nat(-2*V_s+2*V_PL_bufend)]),nat(nat(-2*V_s+2*V_PL_bufend)+ -2)*168*nat(-2*V_s+2*V_PL_bufend)+nat(-V_s+V_PL_bufend)*10+nat(-2*V_s+2*V_PL_bufend)*756+nat(-2*V_s+2*V_PL_bufend)*168*nat(-2*V_s+2*V_PL_bufend)])+(nat(nat(-V_s+V_PL_bufend)+ -2)*24*nat(-V_s+V_PL_bufend)+nat(-V_s+V_PL_bufend)*71+nat(-V_s+V_PL_bufend)*24*nat(-V_s+V_PL_bufend))])+nat(-V_s+V_PL_bufend)*5])+3  </result>
<complexity> n^2  </complexity>
<time>0m6.467s </time>
<error></error>
</cofloco>
</example>
<example name="CPU2006_SingleLinkCluster.c">
<cofloco>
<entry>### Maximum cost of eval_SingleLinkCluster_start(V_n,B) </entry>
<result> nat(V_n)*3*nat(V_n)+nat(V_n)*12+nat(V_n+1)*nat(V_n)+nat(V_n+1)*3+nat(V_n)*2+(nat(V_n)*3*nat(V_n)+nat(V_n)*11)+5  </result>
<complexity> n^2  </complexity>
<time>0m2.012s </time>
<error></error>
</cofloco>
</example>
<example name="CPU2006_xdr3dfcoord.c">
<cofloco>
<entry>### Maximum cost of eval_xdr3dfcoord_start(V_size,V_limit,B) </entry>
<result> max([max([13/3,nat(V_limit)+4+nat(V_limit/3)]),nat(V_size)+3+max([nat(V_size/3)+1,83/3*nat(V_size)+nat(V_size/2)+max([nat(V_size/2-V_limit/2)+1+max([max([nat(V_size)*3,nat(V_size/3-V_limit/3)+nat(V_limit)+nat(V_limit/3)]),1/3+nat(V_size/3)]),4/3+nat(V_size/2)+nat(V_size/3)])])])+1  </result>
<complexity> n  </complexity>
<time>0m3.014s </time>
<error></error>
</cofloco>
</example>
<example name="CPU2006_XNU.c">
<cofloco>
<entry>### Maximum cost of eval_xnu_start(V_len,B) </entry>
<result> nat(V_len)*15+1  </result>
<complexity> n  </complexity>
<time>0m2.162s </time>
<error></error>
</cofloco>
</example>
</examples>

<?xml version='1.0' encoding='UTF-8'?>
<examples>
<example name="cBench_cf_decode_eol.c">
<loopus>
<entry> </entry>
<result> 265 +  23 × max(0, (pr_limit + -2 + -pr_ptr)) + max(0, (pr_limit + -2 + -pr_ptr)) + max(0, (ss_bits_left + 1 + -(if (> ss_K 0) 2 1))) </result>
<complexity>n </complexity>
<time>0m0.123s </time>
<error></error>
</loopus>
</example>
<example name="cBench_cryptRandWriteFile.c">
<loopus>
<entry> </entry>
<result> 1 +  256 × max(0, (bytes + -255)) + max(bytes, 0) + max(0, (bytes + -255)) </result>
<complexity>n </complexity>
<time>0m0.033s </time>
<error></error>
</loopus>
</example>
<example name="cBench_encode_mcu_AC_refine.c">
<loopus>
<entry> </entry>
<result> 1 + max(0, (cinfo_Se + 1 + -cinfo_Ss)) + max(0, (cinfo_Se + 1 + -cinfo_Ss)) + max(0, (cinfo_Se + 1 + -cinfo_Ss)) </result>
<complexity>n </complexity>
<time>0m0.042s </time>
<error></error>
</loopus>
</example>
<example name="cBench_hc_compute.c">
<loopus>
<entry> </entry>
<result> 1 +  (max(0, (num_values + -1)) + max(0, (num_values + -1))) × max(0, (1 + max(0, (num_values + -1)))) + max(0, (num_values + -1)) + max(0, (num_values + -1)) + max(0, (num_values + -1)) + max(0, (num_values + -1)) </result>
<complexity>n^2 </complexity>
<time>0m0.044s </time>
<error></error>
</loopus>
</example>
<example name="cBench_inflated_stored.c">
<loopus>
<entry> </entry>
<result> 1 +  8 × max(n, 0) + max(n, 0) + max(0, (limit + max((n + 16 + -k), (n + 32 + -k), (n - k)))) + max(0, (16 + max((n + 16 + -k), (n - k)))) + max(0, (n + 16 + -k)) </result>
<complexity>n </complexity>
<time>0m0.051s </time>
<error></error>
</loopus>
</example>
<example name="cBench_PackBitsEncode.c">
<loopus>
<entry> </entry>
<result> 1 + max(0, (cc + -1)) + max(0, (cc + -1)) + max(0, (cc + -1)) </result>
<complexity>n </complexity>
<time>0m0.397s </time>
<error></error>
</loopus>
</example>
<example name="cBench_sendMTFValues.c">
<loopus>
<entry> </entry>
<result> 1 + max(nGroups, 0) + max(nGroups, 0) + max(0, (alphaSize + -1)) </result>
<complexity>n </complexity>
<time>0m0.143s </time>
<error></error>
</loopus>
</example>
<example name="cBench_send_tree.c">
<loopus>
<entry> </entry>
<result> 1 + max(0, (max_code + 1)) + max(0, (max_code + 1)) </result>
<complexity>n </complexity>
<time>0m0.049s </time>
<error></error>
</loopus>
</example>
<example name="cBench_set_color_ht.c">
<loopus>
<entry> </entry>
<result> 1 +  max(w, 0) × max(0, (h + -1)) +  max(0, (w + -7)) × max(0, (h + -1)) +  8 × max(0, (w + -7)) × max(0, (h + -1)) + max(0, (h + -1)) </result>
<complexity>n^2 </complexity>
<time>0m0.036s </time>
<error></error>
</loopus>
</example>
<example name="cBench_s_SFD_process.c">
<loopus>
<entry> </entry>
<result> 1 + max(match, 0) + max(match, 0) + max(0, (rlimit - p)) + max(0, (rlimit - p)) + max(0, (rlimit - p)) </result>
<complexity>n </complexity>
<time>0m0.035s </time>
<error></error>
</loopus>
</example>
<example name="cBench_subsetdump.c">
<loopus>
<entry> </entry>
<result> 1 + max(limit, 0) + max(limit, 0) + max(limit, 0) + max(limit, 0) </result>
<complexity>n </complexity>
<time>0m0.068s </time>
<error></error>
</loopus>
</example>
<example name="cBench_zwritehexstring_at.c">
<loopus>
<entry> </entry>
<result> 1 +  63 × max(0, (len + -63)) + max(0, (len + -63)) + max(0, (len + -1)) </result>
<complexity>n </complexity>
<time>0m0.033s </time>
<error></error>
</loopus>
</example>
<example name="CPU2006_analyse_other.c">
<loopus>
<entry> </entry>
<result> 1 +  max(atoms_nr, 0) × max(atoms_nr, 0) +  max(atoms_nr, 0) × max(atoms_nr, 0) +  max(atoms_nr, 0) × max(atoms_nr, 0) +  max(atoms_nr, 0) × max(atoms_nr, 0) +  max(atoms_nr, 0) × max(atoms_nr, 0) × max(0,  max(atoms_nr, 0) × max(atoms_nr, 0)) +  max(atoms_nr, 0) × max(atoms_nr, 0) × max(0,  max(atoms_nr, 0) × max(atoms_nr, 0)) + max(atoms_nr, 0) + max(atoms_nr, 0) + max(atoms_nres, 0) </result>
<complexity>n^4 </complexity>
<time>0m0.129s </time>
<error></error>
</loopus>
</example>
<example name="CPU2006_ApplyBndRobin.c">
<loopus>
<entry> </entry>
<result> 1 +  max(num_vars, 0) × max(GH_cctk_lsh_2, 0) +  max(num_vars, 0) × max(GH_cctk_lsh_1, 0) × max(GH_cctk_lsh_2, 0) +  max(num_vars, 0) × max(GH_cctk_lsh_1, 0) × max(GH_cctk_lsh_2, 0) × max(0, (GH_cctk_lsh_0 + -2)) + max(num_vars, 0) </result>
<complexity>n^4 </complexity>
<time>0m0.052s </time>
<error></error>
</loopus>
</example>
<example name="CPU2006_asctoeg.c">
<loopus>
<entry> </entry>
<result> 1 +  max(s, 0) × max(s, 0) +  max(s, 0) × max(s, 0) + max(s, 0) </result>
<complexity>n^2 </complexity>
<time>0m0.057s </time>
<error></error>
</loopus>
</example>
<example name="CPU2006_Configure.c">
<loopus>
<entry> </entry>
<result> 1 +  max(0, (ac + -3)) × max(0, (ac + -1)) +  max(0, (ac + -3)) × max(0, (ac + -1)) + max(0, (ac + -1)) + max(0, (ac + -1)) + max(0, (ac + -1)) + max(0, (ac + -1)) </result>
<complexity>n^2 </complexity>
<time>0m0.060s </time>
<error></error>
</loopus>
</example>
<example name="CPU2006_load_mems.c">
<loopus>
<entry> </entry>
<result> 1 +  2 × max(ptr, 0) +  64 × ( 2 × max(ptr, 0) + max(0, (2 - word_num_))) + max(ptr, 0) + max(0, (2 - word_num_)) + max(0, (64 - bit_num_)) </result>
<complexity>n </complexity>
<time>0m0.047s </time>
<error></error>
</loopus>
</example>
<example name="CPU2006_local_alloc.c">
<loopus>
<entry> </entry>
<result> 1 + max(n_basic_blocks, 0) + max(max_qty, 0) </result>
<complexity>n </complexity>
<time>0m0.039s </time>
<error></error>
</loopus>
</example>
<example name="CPU2006_ParseFile.c">
<loopus>
<entry> </entry>
<result> 1 + max(FileSize, 0) + max(FileSize, 0, min(FileSize, (FileSize + -1))) + max(FileSize, 0, min(FileSize, (FileSize + -1))) + max(FileSize, 0, min(FileSize, (FileSize + -1))) + max(FileSize, 0, min(FileSize, (FileSize + -1))) + max(FileSize, 0, min(FileSize, (FileSize + -1))) + max(FileSize, 0, min(FileSize, (FileSize + -1))) </result>
<complexity>n </complexity>
<time>0m0.277s </time>
<error></error>
</loopus>
</example>
<example name="CPU2006_Perl_scan_vstring.c">
<loopus>
<entry> </entry>
<result> 1 + max(0, (PL_bufend + max((-1 - s), -s))) + max(0, (PL_bufend + max((-1 - s), -s))) + max(0, (max(PL_bufend, (PL_bufend + -1)) + max((-1 - s), -s))) + max(0, (max(PL_bufend, (PL_bufend + -1)) + max((-1 - s), -s))) + max(0, (max(PL_bufend, (PL_bufend + -1)) + max((-1 - s), -s))) + max(0, (max(PL_bufend, (PL_bufend + -1)) + max((-1 - s), -s))) + max(s, 1, (s + 1)) </result>
<complexity>n </complexity>
<time>0m0.150s </time>
<error></error>
</loopus>
</example>
<example name="CPU2006_SingleLinkCluster.c">
<loopus>
<entry> </entry>
<result> 1 +  (max(n, 0) + max(n, 0)) × max(0, (n + -1)) + max(n, 0) + max(n, 0) + max(n, 0) + max(n, 0) </result>
<complexity>n^2 </complexity>
<time>0m0.061s </time>
<error></error>
</loopus>
</example>
<example name="CPU2006_xdr3dfcoord.c">
<loopus>
<entry> </entry>
<result> 1 + max(size, 0, (size + -1), min(size, (size + -1)), min(size, (size + -2), (size + -1))) + max(size, 0, (size + -1), min(size, (size + -1)), min(size, (size + -2), (size + -1))) + max(size, 0, (size + -1), min(size, (size + -1)), min(size, (size + -2), (size + -1))) + max(size, 0, (size + -1), min(size, (size + -1)), min(size, (size + -2), (size + -1))) + max(size, 0, (size + -1), min(size, (size + -1)), min(size, (size + -2), (size + -1))) + max(size, 0, (size + -1), min(size, (size + -1)), min(size, (size + -2), (size + -1))) + max(size, 0, (size + -1), min(size, (size + -1)), min(size, (size + -2), (size + -1))) + max(size, 0, (size + -1), min(size, (size + -1)), min(size, (size + -2), (size + -1))) </result>
<complexity>n </complexity>
<time>0m0.106s </time>
<error></error>
</loopus>
</example>
<example name="CPU2006_XNU.c">
<loopus>
<entry> </entry>
<result> 1 + max(len, 0) + max(len, 0) + max(len, 0) </result>
<complexity>n </complexity>
<time>0m0.065s </time>
<error></error>
</loopus>
</example>
</examples>

This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=2,cr=eval_PackBitsEncode_bb1_in/2])) 

  * LOOPS $pubs_aux_entry$(B) -> $pubs_aux_entry$(C)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A) -> $pubs_aux_entry$(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_PackBitsEncode_start(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=2,cr=eval_PackBitsEncode_bb1_in/2])) 

  * LOOPS eval_PackBitsEncode_start(B) -> eval_PackBitsEncode_start(C)

  * Ranking function: N/A

  * Invariants eval_PackBitsEncode_start(A) -> eval_PackBitsEncode_start(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_PackBitsEncode_bb0_in(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=2,cr=eval_PackBitsEncode_bb1_in/2])) 

  * LOOPS eval_PackBitsEncode_bb0_in(B) -> eval_PackBitsEncode_bb0_in(C)

  * Ranking function: N/A

  * Invariants eval_PackBitsEncode_bb0_in(A) -> eval_PackBitsEncode_bb0_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_PackBitsEncode_0(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=2,cr=eval_PackBitsEncode_bb1_in/2])) 

  * LOOPS eval_PackBitsEncode_0(B) -> eval_PackBitsEncode_0(C)

  * Ranking function: N/A

  * Invariants eval_PackBitsEncode_0(A) -> eval_PackBitsEncode_0(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_PackBitsEncode_1(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=2,cr=eval_PackBitsEncode_bb1_in/2])) 

  * LOOPS eval_PackBitsEncode_1(B) -> eval_PackBitsEncode_1(C)

  * Ranking function: N/A

  * Invariants eval_PackBitsEncode_1(A) -> eval_PackBitsEncode_1(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_PackBitsEncode_2(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=2,cr=eval_PackBitsEncode_bb1_in/2])) 

  * LOOPS eval_PackBitsEncode_2(B) -> eval_PackBitsEncode_2(C)

  * Ranking function: N/A

  * Invariants eval_PackBitsEncode_2(A) -> eval_PackBitsEncode_2(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_PackBitsEncode_3(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=2,cr=eval_PackBitsEncode_bb1_in/2])) 

  * LOOPS eval_PackBitsEncode_3(B) -> eval_PackBitsEncode_3(C)

  * Ranking function: N/A

  * Invariants eval_PackBitsEncode_3(A) -> eval_PackBitsEncode_3(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_PackBitsEncode_4(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=2,cr=eval_PackBitsEncode_bb1_in/2])) 

  * LOOPS eval_PackBitsEncode_4(B) -> eval_PackBitsEncode_4(C)

  * Ranking function: N/A

  * Invariants eval_PackBitsEncode_4(A) -> eval_PackBitsEncode_4(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_PackBitsEncode_5(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=2,cr=eval_PackBitsEncode_bb1_in/2])) 

  * LOOPS eval_PackBitsEncode_5(B) -> eval_PackBitsEncode_5(C)

  * Ranking function: N/A

  * Invariants eval_PackBitsEncode_5(A) -> eval_PackBitsEncode_5(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS loop_cont_eval_PackBitsEncode_bb1_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_PackBitsEncode_bb1_in(C,D) -> loop_cont_eval_PackBitsEncode_bb1_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_PackBitsEncode_bb1_in(A,B) -> loop_cont_eval_PackBitsEncode_bb1_in(C,D)

     entry  : [A=6]
     non-rec: [A=C,B=D,A=6]
     rec    : [0=1]
     inv    : [A=6,C=6,B=D]

CRS eval_PackBitsEncode_bb18_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_PackBitsEncode_bb18_in -> eval_PackBitsEncode_bb18_in

  * Ranking function: N/A

  * Invariants eval_PackBitsEncode_bb18_in -> eval_PackBitsEncode_bb18_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_PackBitsEncode_bb1_in(A,B)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=2,cr=eval_PackBitsEncode_bb1_in/2])) 

  * LOOPS eval_PackBitsEncode_bb1_in(C,D) -> eval_PackBitsEncode_bb1_in(E,F)
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [D>=1,E=0]
     - [D>=1,E=0]
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [D>=1]
     - [D>=1,E=0]
     - [D>=1,E=0]
     - [D>=1]

  * Ranking function: c(failed(no_rf,[scc=2,cr=eval_PackBitsEncode_bb1_in/2]))

  * Invariants eval_PackBitsEncode_bb1_in(A,B) -> eval_PackBitsEncode_bb1_in(C,D)

     entry  : [A=0]
     non-rec: [A=C,B=D,A=0]
     rec    : [B>=1,A=0]
     inv    : [A=0]

CRS eval_PackBitsEncode_bb5_in(A,B,C,D,E,F,G)

  * Non Asymptotic Upper Bound: 3/128*nat(G-1)+nat(64*F+G-1)/96+nat(64*F+G-65)/64+nat(64*F+G-129)/64 

  * LOOPS eval_PackBitsEncode_bb5_in(H,I,J,K,L,M,N) -> eval_PackBitsEncode_bb5_in(O,P,Q,R,S,T,U)
     - [N=U+128,I=P,J=Q,K=R,L=S,T=2,M=0,H=O,N>=129]
     - [N=U+128,I=P,J=Q,K=R,L=S,T=3,M=1,H=O,N>=129]
     - [N=U+128,I=P,J=Q,K=R,L=S,T=2,M=2,H=O,N>=129]
     - [N=U,H=O,I=P,J=Q,K=R,L=S,M=3,T=0]
     - [N=U,H=O,I=P,J=Q,K=R,L=S,M=3,T=0]
     - [N=U,H=O,I=P,J=Q,K=R,L=S,M=3,T=1]
     - [N=U,H=O,I=P,J=Q,K=R,L=S,M=3,T=1]
     - [N=U,H=O,I=P,J=Q,K=R,L=S,M=3,T=2]

  * Ranking function: c(failed(no_rf,[scc=1,cr=eval_PackBitsEncode_bb5_in/7]))

  * Invariants eval_PackBitsEncode_bb5_in(A,B,C,D,E,F,G) -> eval_PackBitsEncode_bb5_in(H,I,J,K,L,M,N)

     entry  : [G>=1,B>=1,D=G,A=F,B=E+G]
     non-rec: [A=H,B=I,C=J,D=K,E=L,F=M,G=N,G>=1,B>=1,D=G,A=F,B=E+G]
     rec    : [128*A+3*D>=3*N+384,128*A+3*D>=128*M+3*N+128,D+256>=128*M+N,A+1>=0,3>=M,256*A+D>=64*M+N,128*A+D+128>=128*M+N,64*A+D+32*M>=N+192,M>=0,3>=A,B>=1,N>=1,B=D+E,A=F,D=G,A=H,B=I,C=J,D=K,B=D+L]
     inv    : [64*A+D>=64*M+N,M+3>=A,256*A+D+576>=256*M+N,A+4>=M,128*A+D+128>=128*M+N,D>=N,N>=1,B>=1,D=G,A=H,B=I,C=J,D=K,B=D+L,A=F,B=D+E]

CRS eval_PackBitsEncode_bb2_in(A,B,C,D)

  * Non Asymptotic Upper Bound: 2*nat(B-D) 

  * LOOPS eval_PackBitsEncode_bb2_in(E,F,G,H) -> eval_PackBitsEncode_bb2_in(I,J,K,L)
     - [G=K+1,E=I,F=J,H+1=L,G>=2]
     - [G=K+1,E=I,F=J,H+1=L,G>=2]

  * Ranking function: nat(G-1)

  * Invariants eval_PackBitsEncode_bb2_in(A,B,C,D) -> eval_PackBitsEncode_bb2_in(E,F,G,H)

     entry  : [B>=1,D=1,B=C]
     non-rec: [A=E,B=F,C=G,D=H,B>=1,D=1,B=C]
     rec    : [B+1=G+H,B=F,A=E,D=1,B=C,G>=1,B>=G+1]
     inv    : [H>=1,B>=H,D=1,A=E,B=F,B+1=G+H,B=C]



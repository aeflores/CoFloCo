Warning: Ignored call to eval_xdr3dfcoord_stop/1 in equation loop_cont_eval_xdr3dfcoord_bb1_in/2 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_xdr3dfcoord_22/18,eval_xdr3dfcoord_23/18,eval_xdr3dfcoord_bb5_in/16]
1. recursive : [eval_xdr3dfcoord_bb8_in/12]
2. recursive : [eval_xdr3dfcoord_14/4,eval_xdr3dfcoord_15/4,eval_xdr3dfcoord_bb1_in/4,eval_xdr3dfcoord_bb4_in/5,loop_cont_eval_xdr3dfcoord_bb5_in/10,loop_cont_eval_xdr3dfcoord_bb8_in/5]
3. non_recursive : [loop_cont_eval_xdr3dfcoord_bb1_in/2]
4. non_recursive : [eval_xdr3dfcoord_11/3]
5. non_recursive : [eval_xdr3dfcoord_10/3]
6. non_recursive : [eval_xdr3dfcoord_9/3]
7. non_recursive : [eval_xdr3dfcoord_8/3]
8. non_recursive : [eval_xdr3dfcoord_7/3]
9. non_recursive : [eval_xdr3dfcoord_6/3]
10. non_recursive : [eval_xdr3dfcoord_5/3]
11. non_recursive : [eval_xdr3dfcoord_4/3]
12. non_recursive : [eval_xdr3dfcoord_3/3]
13. non_recursive : [eval_xdr3dfcoord_2/3]
14. non_recursive : [eval_xdr3dfcoord_1/3]
15. non_recursive : [eval_xdr3dfcoord_0/3]
16. non_recursive : [eval_xdr3dfcoord_bb0_in/3]
17. non_recursive : [eval_xdr3dfcoord_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_xdr3dfcoord_bb5_in/16
1. SCC is partially evaluated into eval_xdr3dfcoord_bb8_in/12
2. SCC is partially evaluated into eval_xdr3dfcoord_bb1_in/4
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is completely evaluated into other SCCs
16. SCC is completely evaluated into other SCCs
17. SCC is partially evaluated into eval_xdr3dfcoord_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_xdr3dfcoord_bb5_in/16 
* CE 11 is refined into CE [14] 
* CE 10 is refined into CE [15] 
* CE 8 is refined into CE [16] 
* CE 9 is discarded (unfeasible) 
* CE 6 is refined into CE [17] 
* CE 7 is discarded (unfeasible) 


#### Refined cost equations eval_xdr3dfcoord_bb5_in/16 
* CE 14: eval_xdr3dfcoord_bb5_in(A,B,C,D,E,F,G,H,A,B,I,D,E,F,G,J) = 0
     [A+E>=G,E+F>=D,D>=F,F+1>=D,E>=B,1>=D,E+I+1=G,C+E+1=G,J=0,H=2] 
* CE 15: eval_xdr3dfcoord_bb5_in(A,B,C,D,E,F,G,H,A,B,I,D,E,J,G,K) = 0
     [A+E>=G,E>=D,D>=0,1>=D,G=E+I+1,G=C+E+1,K=0,J=0,H=2,F=0] 
* CE 16: eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J) = 1+ eval_xdr3dfcoord_bb5_in(V_size,V_limit,K,L,M,N,O,P,C,D,E,F,G,H,I,J)
     [V_size+V_run_0>=V_i_1,V_limit>=V_run_0+1,V_run_0>=0,V_run_0+K+1=V_i_1,V_i_0+V_run_0+1=V_i_1,V_i_1+1=O,V_run_0+1=M,P=2,N=1,L=1,B=2,V_is_small_2=1,V_is_small_1=1] 
* CE 17: eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J) = 1+ eval_xdr3dfcoord_bb5_in(V_size,V_limit,K,L,M,N,O,P,C,D,E,F,G,H,I,J)
     [V_size+V_run_0>=V_i_1,V_limit>=V_run_0+1,V_run_0>=0,V_run_0+K+1=V_i_1,V_i_0+V_run_0+1=V_i_1,V_i_1+1=O,V_run_0+1=M,P=2,N=0,L=1,B=2,V_is_small_2=1,V_is_small_1=1] 

### Cost equations --> "Loop" of eval_xdr3dfcoord_bb5_in/16 
* CEs [16] --> Loop 12 
* CEs [17] --> Loop 13 
* CEs [14] --> Loop 14 
* CEs [15] --> Loop 15 

#### Loops of eval_xdr3dfcoord_bb5_in/16 
* Loop 12: eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J)->  eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1',V_run_0',V_is_small_2',V_i_1',B',C,D,E,F,G,H,I,J)
                  [V_limit>=V_run_0+1,V_size>=V_i_0+1,V_run_0>=0,V_i_0+V_run_0+2=V_i_1',V_i_0+V_run_0+1=V_i_1,V_run_0+1=V_run_0',B'=2,V_is_small_2'=1,V_is_small_1'=1,B=2,V_is_small_2=1,V_is_small_1=1] 
* Loop 13: eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J)->  eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1',V_run_0',V_is_small_2',V_i_1',B',C,D,E,F,G,H,I,J)
                  [V_limit>=V_run_0+1,V_size>=V_i_0+1,V_run_0>=0,V_i_0+V_run_0+2=V_i_1',V_i_0+V_run_0+1=V_i_1,V_run_0+1=V_run_0',B'=2,V_is_small_2'=0,V_is_small_1'=1,B=2,V_is_small_2=1,V_is_small_1=1] 
* Loop 14: eval_xdr3dfcoord_bb5_in(A,B,C,D,E,F,G,H,A,B,C,D,E,F,I,J) [E+F>=D,D>=F,F+1>=D,A>=C+1,E>=B,1>=D,C+E+1=I,C+E+1=G,J=0,H=2] 
* Loop 15: eval_xdr3dfcoord_bb5_in(A,B,C,D,E,F,G,H,A,B,C,D,E,I,J,K) [E>=D,A>=C+1,D>=0,1>=D,C+E+1=J,C+E+1=G,K=0,I=0,H=2,F=0] 

### Ranking functions of CR eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J) 
* RF of phase [12]: [V_limit-V_run_0]

#### Partial ranking functions of CR eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J) 
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    V_limit-V_run_0


### Resulting Chains:eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J) 
* [[12],14]
* [[12],13,15]
* [[12],13,14]
* [15]
* [14]
* [13,15]
* [13,14]


### Merging Chains  eval_xdr3dfcoord_bb5_in/16 into  External patterns of execution 
* [[14,13],[15,13]] --> 1 
* [[15]] --> 2 
* [[14,13,[12]],[15,13,[12]]] --> 3 
* [[14,[12]]] --> 4 
* [[14]] --> 5 


### Specialization of cost equations eval_xdr3dfcoord_bb8_in/12 
* CE 13 is refined into CE [18] 
* CE 12 is refined into CE [19] 


#### Refined cost equations eval_xdr3dfcoord_bb8_in/12 
* CE 18: eval_xdr3dfcoord_bb8_in(A,B,C,D,E,F,G,H,I,A,B,G) = 0
     [H>=E,I=3] 
* CE 19: eval_xdr3dfcoord_bb8_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,V_k_0,B,C,D,E) = 1+ eval_xdr3dfcoord_bb8_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,F,G,C,D,E)
     [V_run_0>=V_k_0+1,V_k_0+3=F,G=3,B=3] 

### Cost equations --> "Loop" of eval_xdr3dfcoord_bb8_in/12 
* CEs [19] --> Loop 16 
* CEs [18] --> Loop 17 

#### Loops of eval_xdr3dfcoord_bb8_in/12 
* Loop 16: eval_xdr3dfcoord_bb8_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,V_k_0,B,C,D,E)->  eval_xdr3dfcoord_bb8_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,V_k_0',B',C,D,E)
                  [V_run_0>=V_k_0+1,V_k_0+3=V_k_0',B'=3,B=3] 
* Loop 17: eval_xdr3dfcoord_bb8_in(A,B,C,D,E,F,G,H,I,A,B,G) [H>=E,I=3] 

### Ranking functions of CR eval_xdr3dfcoord_bb8_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,V_k_0,B,C,D,E) 
* RF of phase [16]: [V_run_0/3-V_k_0/3]

#### Partial ranking functions of CR eval_xdr3dfcoord_bb8_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,V_k_0,B,C,D,E) 
* Partial RF of phase [16]:
  - RF of loop [16:1]:
    V_run_0/3-V_k_0/3


### Resulting Chains:eval_xdr3dfcoord_bb8_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,V_k_0,B,C,D,E) 
* [[16],17]
* [17]


### Merging Chains  eval_xdr3dfcoord_bb8_in/12 into  External patterns of execution 
* [[17]] --> 1 
* [[17,[16]]] --> 2 


### Specialization of cost equations eval_xdr3dfcoord_bb1_in/4 
* CE 5 is refined into CE [20] 
* CE 3 is refined into CE [21,22,23,24] 
* CE 4 is refined into CE [25,26] 


#### Refined cost equations eval_xdr3dfcoord_bb1_in/4 
* CE 20: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) = 0
     [V_i_0>=V_size,B=4] 
* CE 21: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) = 3+ eval_xdr3dfcoord_bb5_in(V_size,V_limit,C,D,E,F,G,H,V_size,V_limit,I,J,K,L,M,N):1+ eval_xdr3dfcoord_bb8_in(V_size,V_limit,O,P,Q,R,M,S,T,V_size,V_limit,M):2+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,M,U)
     [V_size+1>=M,V_limit>=1,M=O+2,M=I+2,M=G+1,M=C+2,M=V_i_0+2,U=4,T=3,S=0,R=0,Q=1,P=1,N=0,L=0,K=1,J=1,H=2,F=1,E=0,D=1,B=4] 
* CE 22: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) = 3+ eval_xdr3dfcoord_bb5_in(V_size,V_limit,C,D,E,F,G,H,V_size,V_limit,I,J,K,L,M,N):3+ eval_xdr3dfcoord_bb8_in(V_size,V_limit,O,P,K,Q,M,R,S,V_size,V_limit,M):2+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,M,T)
     [V_size+K>=M,V_limit>=K,K>=2,M=K+O+1,M=I+K+1,M=G+K,M=C+K+1,M=V_i_0+K+1,T=4,S=3,R=0,Q=0,P=1,N=0,L=0,J=1,H=2,F=1,E=0,D=1,B=4] 
* CE 23: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) = 3+ eval_xdr3dfcoord_bb5_in(V_size,V_limit,C,D,E,F,G,H,V_size,V_limit,I,J,V_limit,K,L,M):4+ eval_xdr3dfcoord_bb8_in(V_size,V_limit,N,O,V_limit,P,L,Q,R,V_size,V_limit,L):2+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,L,S)
     [V_size+V_limit>=L,V_limit>=1,V_limit+N+1=L,V_limit+I+1=L,V_limit+G=L,V_limit+C+1=L,V_limit+V_i_0+1=L,S=4,R=3,Q=0,P=1,O=1,M=0,K=1,J=1,H=2,F=1,E=0,D=1,B=4] 
* CE 24: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) = 3+ eval_xdr3dfcoord_bb5_in(V_size,V_limit,C,D,E,F,G,H,V_size,V_limit,I,J,K,L,G,M):5+ eval_xdr3dfcoord_bb8_in(V_size,V_limit,N,O,P,Q,G,R,S,V_size,V_limit,G):1+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,G,T)
     [V_size>=G,0>=V_limit,G=N+1,G=I+1,G=C+1,G=V_i_0+1,T=4,S=3,R=0,Q=1,P=0,O=1,M=0,L=1,K=0,J=1,H=2,F=1,E=0,D=1,B=4] 
* CE 25: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) = 3+ eval_xdr3dfcoord_bb5_in(V_size,V_limit,C,D,E,F,G,H,V_size,V_limit,I,J,K,L,G,M):2+ eval_xdr3dfcoord_bb8_in(V_size,V_limit,N,O,P,Q,G,R,S,V_size,V_limit,G):1+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,G,T)
     [V_size>=G,G=N+1,G=I+1,G=C+1,G=V_i_0+1,T=4,S=3,R=0,Q=0,P=0,O=0,M=0,L=0,K=0,J=0,H=2,F=0,E=0,D=0,B=4] 
* CE 26: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) = 3+ eval_xdr3dfcoord_bb5_in(V_size,V_limit,C,D,E,F,G,H,V_size,V_limit,I,J,K,L,G,M):5+ eval_xdr3dfcoord_bb8_in(V_size,V_limit,N,O,P,Q,G,R,S,V_size,V_limit,G):1+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,G,T)
     [V_size>=G,0>=V_limit,G=N+1,G=I+1,G=C+1,G=V_i_0+1,T=4,S=3,R=0,Q=0,P=0,O=0,M=0,L=0,K=0,J=0,H=2,F=0,E=0,D=0,B=4] 

### Cost equations --> "Loop" of eval_xdr3dfcoord_bb1_in/4 
* CEs [22] --> Loop 18 
* CEs [23] --> Loop 19 
* CEs [21] --> Loop 20 
* CEs [24,25,26] --> Loop 21 
* CEs [20] --> Loop 22 

#### Loops of eval_xdr3dfcoord_bb1_in/4 
* Loop 18: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)->  eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0',B')
                  [V_limit+V_i_0+1>=V_i_0',V_i_0'>=V_i_0+3,V_size>=V_i_0+1,B'=4,B=4] 
* Loop 19: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)->  eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0',B')
                  [V_size>=V_i_0+1,V_limit>=1,V_limit+V_i_0+1=V_i_0',B'=4,B=4] 
* Loop 20: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)->  eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0',B')
                  [V_size>=V_i_0+1,V_limit>=1,V_i_0+2=V_i_0',B'=4,B=4] 
* Loop 21: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)->  eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0',B')
                  [V_size>=V_i_0+1,V_i_0+1=V_i_0',B'=4,B=4] 
* Loop 22: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) [V_i_0>=V_size,B=4] 

### Ranking functions of CR eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) 
* RF of phase [18,19,20,21]: [V_size-V_i_0]

#### Partial ranking functions of CR eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) 
* Partial RF of phase [18,19,20,21]:
  - RF of loop [18:1]:
    V_size/3-V_i_0/3
  - RF of loop [19:1,20:1]:
    V_size/2-V_i_0/2
  - RF of loop [21:1]:
    V_size-V_i_0


### Resulting Chains:eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) 
* [[18,19,20,21],22]
* [22]


### Merging Chains  eval_xdr3dfcoord_bb1_in/4 into  External patterns of execution 
* [[22]] --> 1 
* [[22,[18,19,20,21]]] --> 2 


### Specialization of cost equations eval_xdr3dfcoord_start/3 
* CE 2 is refined into CE [27,28] 


#### Refined cost equations eval_xdr3dfcoord_start/3 
* CE 27: eval_xdr3dfcoord_start(V_size,V_limit,B) = 1+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,C,D):1
     [0>=V_size,D=4,C=0] 
* CE 28: eval_xdr3dfcoord_start(V_size,V_limit,B) = 1+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,C,D):2
     [V_size>=1,D=4,C=0] 

### Cost equations --> "Loop" of eval_xdr3dfcoord_start/3 
* CEs [28] --> Loop 23 
* CEs [27] --> Loop 24 

#### Loops of eval_xdr3dfcoord_start/3 
* Loop 23: eval_xdr3dfcoord_start(V_size,V_limit,B) [V_size>=1] 
* Loop 24: eval_xdr3dfcoord_start(V_size,V_limit,B) [0>=V_size] 

### Ranking functions of CR eval_xdr3dfcoord_start(V_size,V_limit,B) 

#### Partial ranking functions of CR eval_xdr3dfcoord_start(V_size,V_limit,B) 


### Resulting Chains:eval_xdr3dfcoord_start(V_size,V_limit,B) 
* [24]
* [23]


### Merging Chains  eval_xdr3dfcoord_start/3 into  External patterns of execution 
* [[24]] --> 1 
* [[23]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [12] 

 * loop 12:eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J) -> [eval_xdr3dfcoord_bb5_in(V_size',V_limit',V_i_0',V_is_small_1',V_run_0',V_is_small_2',V_i_1',B',C',D',E',F',G',H',I',J')] 
1
#### Cost of phase [12]:eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J) -> [eval_xdr3dfcoord_bb5_in(V_size',V_limit',V_i_0',V_is_small_1',V_run_0',V_is_small_2',V_i_1',B',C',D',E',F',G',H',I',J')] 
1* #(12)+0
  Such that:#(12) =< V_limit-V_run_0
#(12) =< V_limit-V_run_0-V_limit'+V_run_0'

#### Cost of phase [12]:eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J) -> [eval_xdr3dfcoord_bb5_in(V_size',V_limit',V_i_0',V_is_small_1',V_run_0',V_is_small_2',V_i_1',B',C',D',E',F',G',H',I',J')] 
1* #(12)+0
  Such that:#(12) =< V_limit-V_run_0
#(12) =< V_limit-V_run_0-V_limit'+V_run_0'

#### Cost of phase [12]:eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J) -> [eval_xdr3dfcoord_bb5_in(V_size',V_limit',V_i_0',V_is_small_1',V_run_0',V_is_small_2',V_i_1',B',C',D',E',F',G',H',I',J')] 
1* #(12)+0
  Such that:#(12) =< V_limit-V_run_0
#(12) =< V_limit-V_run_0-V_limit'+V_run_0'

#### Cost of chains of eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J):
* Chain [[12],14]: 1*s(3)+0
  Such that:s(3) =< V_limit-V_run_0

  with precondition: [V_is_small_1=1,V_is_small_2=1,B=2,F=1,H=1,J=0,V_size=C,V_limit=D,V_i_0=E,V_limit=G,V_i_0+V_run_0+1=V_i_1,V_i_0+V_limit+1=I,V_size>=V_i_0+1,V_i_1>=V_i_0+1,V_i_0+V_limit>=V_i_1] 

* Chain [[12],13,15]: 1*s(4)+1
  Such that:s(4) =< -V_run_0+G-1

  with precondition: [V_is_small_1=1,V_is_small_2=1,B=2,F=1,H=0,J=0,V_size=C,V_limit=D,V_i_0=E,V_i_0+V_run_0+1=V_i_1,V_i_0+G+1=I,V_size>=V_i_0+1,V_i_1>=V_i_0+1,V_limit>=G,V_i_0+G>=V_i_1+1] 

* Chain [[12],13,14]: 1*s(5)+1
  Such that:s(5) =< V_limit-V_run_0-1

  with precondition: [V_is_small_1=1,V_is_small_2=1,B=2,F=1,H=0,J=0,V_size=C,V_limit=D,V_i_0=E,V_limit=G,V_i_0+V_run_0+1=V_i_1,V_i_0+V_limit+1=I,V_size>=V_i_0+1,V_i_1>=V_i_0+1,V_i_0+V_limit>=V_i_1+1] 

* Chain [15]: 0
  with precondition: [V_is_small_1=0,V_run_0=0,V_is_small_2=0,B=2,F=0,G=0,H=0,J=0,D=V_limit,V_i_0+1=V_i_1,V_size=C,V_i_0=E,V_i_0+1=I,V_size>=V_i_0+1] 

* Chain [14]: 0
  with precondition: [V_run_0=0,B=2,G=0,J=0,V_is_small_2=V_is_small_1,V_i_0+1=V_i_1,V_size=C,V_limit=D,V_i_0=E,V_is_small_2=F,V_is_small_2=H,V_i_0+1=I,0>=V_limit,1>=V_is_small_2,V_is_small_2>=0,V_size>=V_i_0+1] 

* Chain [13,15]: 1
  with precondition: [V_is_small_1=1,V_run_0=0,V_is_small_2=1,B=2,F=1,G=1,H=0,J=0,I=V_i_0+2,I=V_i_1+1,V_size=C,V_limit=D,I=E+2,V_limit>=1,V_size+1>=I] 

* Chain [13,14]: 1
  with precondition: [V_limit=1,V_is_small_1=1,V_run_0=0,V_is_small_2=1,B=2,D=1,F=1,G=1,H=0,J=0,I=V_i_0+2,I=V_i_1+1,V_size=C,I=E+2,V_size+1>=I] 


#### Cost of loops [16] 

 * loop 16:eval_xdr3dfcoord_bb8_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,V_k_0,B,C,D,E) -> [eval_xdr3dfcoord_bb8_in(V_size',V_limit',V_i_0',V_is_small_1',V_run_0',V_is_small_2',V_i_1',V_k_0',B',C',D',E')] 
1
#### Cost of phase [16]:eval_xdr3dfcoord_bb8_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,V_k_0,B,C,D,E) -> [eval_xdr3dfcoord_bb8_in(V_size',V_limit',V_i_0',V_is_small_1',V_run_0',V_is_small_2',V_i_1',V_k_0',B',C',D',E')] 
1* #(16)+0
  Such that:#(16) =< V_run_0/3-V_k_0/3
#(16) =< V_run_0/3-V_k_0/3-V_run_0'/3+V_k_0'/3

#### Cost of chains of eval_xdr3dfcoord_bb8_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,V_k_0,B,C,D,E):
* Chain [[16],17]: 1*s(6)+0
  Such that:s(6) =< V_run_0/3-V_k_0/3

  with precondition: [B=3,V_size=C,V_limit=D,V_i_1=E,V_run_0>=V_k_0+1] 

* Chain [17]: 0
  with precondition: [B=3,C=V_size,D=V_limit,E=V_i_1,V_k_0>=V_run_0] 


#### Cost of loops [18,19,20,21] 

 * loop 18:eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) -> [eval_xdr3dfcoord_bb1_in(V_size',V_limit',V_i_0',B')] 
1*s(12)+1*s(13)+1*s(11)+4
  Such that:s(11) =< -V_i_0+V_i_0'-2
s(12) =< -V_i_0/3+V_i_0'/3-1/3
s(13) =< V_limit'-1

 * loop 19:eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) -> [eval_xdr3dfcoord_bb1_in(V_size',V_limit',V_i_0',B')] 
1*s(15)+1*s(14)+3
  Such that:s(14) =< V_limit'
s(15) =< V_limit'/3

 * loop 20:eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) -> [eval_xdr3dfcoord_bb1_in(V_size',V_limit',V_i_0',B')] 
1*s(16)+4
  Such that:s(16) =< 1/3

 * loop 21:eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) -> [eval_xdr3dfcoord_bb1_in(V_size',V_limit',V_i_0',B')] 
3
#### Cost of phase [18,19,20,21]:eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) -> [eval_xdr3dfcoord_bb1_in(V_size',V_limit',V_i_0',B')] 
3* #(21)+4* #(20)+1*sm(20,16)+3* #(19)+1*sm(19,15)+1*sm(19,14)+4* #(18)+1*sm(18,12)+1*sm(18,13)+1*sm(18,11)+0
  Such that:sm(18,12)+sm(19,15)+sm(20,16) =< V_size/3+V_limit/3-V_i_0/3
sm(18,12)+sm(19,15)+sm(20,16) =< V_size/3+V_limit/3-V_i_0/3-V_size'/3-V_limit'/3+V_i_0'/3
#(18)+sm(20,16) =< V_size/3-V_i_0/3
#(18)+sm(19,15)+sm(20,16) =< V_size/3-V_i_0/3-V_size'/3+V_i_0'/3
s(23) =< V_limit-1
s(24) =< V_size+V_limit-V_i_0
s(25) =< V_size+V_limit-V_i_0-V_size'-V_limit'+V_i_0'
s(26) =< V_size-V_i_0
s(27) =< V_size-V_i_0-V_size'+V_i_0'
s(28) =< V_size/2-V_i_0/2
s(29) =< V_size/2-V_i_0/2-V_size'/2+V_i_0'/2
s(30)+ #(20)+sm(18,11) =< s(24)
#(19)+ #(20)+sm(18,11) =< s(24)
#(20)+sm(18,11)+sm(19,14) =< s(24)
s(30)+ #(20)+ #(21)+sm(18,11) =< s(25)
#(19)+ #(20)+ #(21)+sm(18,11) =< s(25)
#(20)+ #(21)+sm(18,11)+sm(19,14) =< s(25)
#(18)+ #(19)+ #(20)+ #(21) =< s(26)
#(18)+ #(19)+ #(20)+ #(21) =< s(27)
s(31)+ #(19) =< s(28)
#(19)+ #(20) =< s(28)
#(19)+sm(20,16) =< s(28)
s(31)+ #(19) =< s(29)
#(19)+ #(20) =< s(29)
sm(20,16) =< s(31)* (1/3)
sm(19,15) =< s(30)* (1/3)
sm(18,13) =< #(18)*s(23)

#### Cost of chains of eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B):
* Chain [[18,19,20,21],22]: 3*s(45)+4*s(41)+1*s(37)+3*s(43)+1*s(36)+1*s(44)+4*s(38)+1*s(35)+1*s(47)+1*s(42)+0
  Such that:s(32) =< V_size+V_limit-V_i_0
s(33) =< V_size-V_i_0
s(34) =< V_size/2-V_i_0/2
s(35)+s(36)+s(37) =< V_size/3+V_limit/3-V_i_0/3
s(38)+s(37) =< V_size/3-V_i_0/3
s(39) =< V_limit-1
s(40)+s(41)+s(42) =< s(32)
s(43)+s(41)+s(42) =< s(32)
s(41)+s(42)+s(44) =< s(32)
s(38)+s(43)+s(41)+s(45) =< s(33)
s(46)+s(43) =< s(34)
s(43)+s(41) =< s(34)
s(43)+s(37) =< s(34)
s(37) =< s(46)* (1/3)
s(36) =< s(40)* (1/3)
s(47) =< s(38)*s(39)

  with precondition: [B=4,V_i_0>=0,V_size>=V_i_0+1] 

* Chain [22]: 0
  with precondition: [V_i_0=0,B=4,0>=V_size] 


#### Cost of chains of eval_xdr3dfcoord_start(V_size,V_limit,B):
* Chain [24]: 1
  with precondition: [0>=V_size] 

* Chain [23]: 3*s(93)+4*s(89)+1*s(84)+3*s(91)+1*s(86)+1*s(92)+4*s(83)+1*s(85)+1*s(95)+1*s(90)+1
  Such that:s(80) =< V_size
s(81) =< V_size+V_limit
s(82) =< V_size/2
s(83)+s(84) =< V_size/3
s(85)+s(86)+s(84) =< V_size/3+V_limit/3
s(87) =< V_limit-1
s(88)+s(89)+s(90) =< s(81)
s(89)+s(90)+s(91) =< s(81)
s(89)+s(90)+s(92) =< s(81)
s(83)+s(89)+s(91)+s(93) =< s(80)
s(91)+s(94) =< s(82)
s(89)+s(91) =< s(82)
s(84)+s(91) =< s(82)
s(84) =< s(94)* (1/3)
s(86) =< s(88)* (1/3)
s(95) =< s(83)*s(87)

  with precondition: [V_size>=1] 


Closed-form bounds of eval_xdr3dfcoord_start(V_size,V_limit,B): 
-------------------------------------
* Chain [24] with precondition: [0>=V_size] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [23] with precondition: [V_size>=1] 
    - Upper bound: 14*V_size+1+nat(V_limit)*V_size+nat(V_size+V_limit)*2+nat(V_size/3+V_limit/3)*3 
    - Complexity: n^2 

### Maximum cost of eval_xdr3dfcoord_start(V_size,V_limit,B): nat(V_limit)*nat(V_size)+nat(V_size)*14+nat(V_size+V_limit)*2+nat(V_size/3+V_limit/3)*3+1 
Asymptotic class: n^2 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 310 ms.
* Invariants computed in 338 ms.
   - Backward Invariants 197 ms.
   - Transitive Invariants 38 ms.
* Refinement performed in 645 ms.
* Termination proved in 63 ms.
* Upper bounds computed in 609 ms.
   - Equation cost structures 182 ms.
   - Phase cost structures 239 ms.
   - Chain cost structures 144 ms.
   - Solving cost expressions 9 ms.
* Total analysis performed in 2275 ms.


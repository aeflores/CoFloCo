Warning: Ignored call to eval_xdr3dfcoord_stop/1 in equation eval_xdr3dfcoord_bb10_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_xdr3dfcoord_22/18,eval_xdr3dfcoord_23/19,eval_xdr3dfcoord_bb5_in/16,eval_xdr3dfcoord_bb6_in/16,eval_xdr3dfcoord_bb7_in/18]
1. recursive  : [eval_xdr3dfcoord_bb8_in/12,eval_xdr3dfcoord_bb9_in/12]
2. recursive  : [eval_xdr3dfcoord_14/4,eval_xdr3dfcoord_15/5,eval_xdr3dfcoord_bb1_in/4,eval_xdr3dfcoord_bb2_in/4,eval_xdr3dfcoord_bb3_in/4,eval_xdr3dfcoord_bb4_in/5,loop_cont_eval_xdr3dfcoord_bb5_in/10,loop_cont_eval_xdr3dfcoord_bb8_in/5]
3. non_recursive  : [eval_xdr3dfcoord_bb10_in/1]
4. non_recursive  : [loop_cont_eval_xdr3dfcoord_bb1_in/2]
5. non_recursive  : [eval_xdr3dfcoord_11/3]
6. non_recursive  : [eval_xdr3dfcoord_10/3]
7. non_recursive  : [eval_xdr3dfcoord_9/3]
8. non_recursive  : [eval_xdr3dfcoord_8/3]
9. non_recursive  : [eval_xdr3dfcoord_7/3]
10. non_recursive  : [eval_xdr3dfcoord_6/3]
11. non_recursive  : [eval_xdr3dfcoord_5/3]
12. non_recursive  : [eval_xdr3dfcoord_4/3]
13. non_recursive  : [eval_xdr3dfcoord_3/3]
14. non_recursive  : [eval_xdr3dfcoord_2/3]
15. non_recursive  : [eval_xdr3dfcoord_1/3]
16. non_recursive  : [eval_xdr3dfcoord_0/3]
17. non_recursive  : [eval_xdr3dfcoord_bb0_in/3]
18. non_recursive  : [eval_xdr3dfcoord_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_xdr3dfcoord_bb5_in/16
1. SCC is partially evaluated into eval_xdr3dfcoord_bb8_in/12
2. SCC is partially evaluated into eval_xdr3dfcoord_bb1_in/4
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_xdr3dfcoord_11/3
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is completely evaluated into other SCCs
16. SCC is completely evaluated into other SCCs
17. SCC is completely evaluated into other SCCs
18. SCC is partially evaluated into eval_xdr3dfcoord_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_xdr3dfcoord_bb5_in/16 
* CE 14 is refined into CE [17] 
* CE 13 is refined into CE [18] 
* CE 9 is refined into CE [19] 
* CE 10 is discarded (unfeasible) 
* CE 7 is refined into CE [20] 
* CE 11 is refined into CE [21] 
* CE 8 is discarded (unfeasible) 
* CE 12 is discarded (unfeasible) 


#### Refined cost equations eval_xdr3dfcoord_bb5_in/16 
* CE 17: eval_xdr3dfcoord_bb5_in(A,B,C,D,E,F,G,H,A,B,I,D,E,F,G,J) = 0
     [A>=F+G,E+F>=D,D>=F,F+1>=D,E>=B,1>=D,E+I+1=G,C+E+1=G,J=0,H=2] 
* CE 18: eval_xdr3dfcoord_bb5_in(A,B,C,D,E,F,G,H,A,B,I,D,E,J,G,K) = 0
     [A>=G,E>=D,D>=0,1>=D,G=E+I+1,G=C+E+1,K=0,J=0,H=2,F=0] 
* CE 19: eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J) = 1+ eval_xdr3dfcoord_bb5_in(V_size,V_limit,K,L,M,N,O,P,C,D,E,F,G,H,I,J)
     [V_size>=V_i_1+2,V_limit>=V_run_0+1,V_run_0>=0,V_i_1=V_run_0+K+1,V_i_1=V_i_0+V_run_0+1,V_i_1+1=O,V_run_0+1=M,P=2,N=1,L=1,B=2,V_is_small_2=1,V_is_small_1=1] 
* CE 20: eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J) = 1+ eval_xdr3dfcoord_bb5_in(V_size,V_limit,K,L,M,N,O,P,C,D,E,F,G,H,I,J)
     [V_size>=V_i_1+2,V_limit>=V_run_0+1,V_run_0>=0,V_i_1=V_run_0+K+1,V_i_1=V_i_0+V_run_0+1,V_i_1+1=O,V_run_0+1=M,P=2,N=0,L=1,B=2,V_is_small_2=1,V_is_small_1=1] 
* CE 21: eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J) = 1+ eval_xdr3dfcoord_bb5_in(K,V_limit,L,M,N,O,P,Q,C,D,E,F,G,H,I,J)
     [V_limit>=V_run_0+1,V_run_0>=0,V_run_0+L+1=V_i_1,V_i_0+V_run_0+1=V_i_1,V_i_1+1=P,V_run_0+1=N,V_i_1+1=K,V_i_1+1=V_size,Q=2,O=0,M=1,B=2,V_is_small_2=1,V_is_small_1=1] 

### Cost equations --> "Loop" of eval_xdr3dfcoord_bb5_in/16 
* CEs [19] --> Loop 16 
* CEs [20] --> Loop 17 
* CEs [21] --> Loop 18 
* CEs [17] --> Loop 19 
* CEs [18] --> Loop 20 

#### Loops of eval_xdr3dfcoord_bb5_in/16 
* Loop 16: eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J)->  eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0',V_is_small_1',V_run_0',V_is_small_2',V_i_1',B',C,D,E,F,G,H,I,J)
                  [V_size>=V_i_1+2,V_limit>=V_run_0+1,V_run_0>=0,V_i_1=V_run_0+V_i_0'+1,V_i_1=V_i_0+V_run_0+1,V_i_1+1=V_i_1',V_run_0+1=V_run_0',B'=2,V_is_small_2'=1,V_is_small_1'=1,B=2,V_is_small_2=1,V_is_small_1=1] 
* Loop 17: eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J)->  eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0',V_is_small_1',V_run_0',V_is_small_2',V_i_1',B',C,D,E,F,G,H,I,J)
                  [V_size>=V_i_1+2,V_limit>=V_run_0+1,V_run_0>=0,V_i_1=V_run_0+V_i_0'+1,V_i_1=V_i_0+V_run_0+1,V_i_1+1=V_i_1',V_run_0+1=V_run_0',B'=2,V_is_small_2'=0,V_is_small_1'=1,B=2,V_is_small_2=1,V_is_small_1=1] 
* Loop 18: eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J)->  eval_xdr3dfcoord_bb5_in(V_size',V_limit,V_i_0',V_is_small_1',V_run_0',V_is_small_2',V_i_1',B',C,D,E,F,G,H,I,J)
                  [V_limit>=V_run_0+1,V_run_0>=0,V_run_0+V_i_0'+1=V_i_1,V_i_0+V_run_0+1=V_i_1,V_i_1+1=V_i_1',V_run_0+1=V_run_0',V_i_1+1=V_size',V_i_1+1=V_size,B'=2,V_is_small_2'=0,V_is_small_1'=1,B=2,V_is_small_2=1,V_is_small_1=1] 
* Loop 19: eval_xdr3dfcoord_bb5_in(A,B,C,D,E,F,G,H,A,B,I,D,E,F,G,J) [A>=F+G,E+F>=D,D>=F,F+1>=D,E>=B,1>=D,G=E+I+1,G=C+E+1,J=0,H=2] 
* Loop 20: eval_xdr3dfcoord_bb5_in(A,B,C,D,E,F,G,H,A,B,I,D,E,J,G,K) [A>=G,E>=D,D>=0,1>=D,G=E+I+1,G=C+E+1,K=0,J=0,H=2,F=0] 

### Ranking functions of CR eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J) 
* RF of phase [16]: [V_limit+V_i_0-V_i_1+1,V_limit-V_run_0,V_size-V_i_0-V_run_0-2,V_size-V_i_1-1]

#### Partial ranking functions of CR eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J) 
* Partial RF of phase [16]:
  - RF of loop [16:1]:
    V_limit+V_i_0-V_i_1+1
    V_limit-V_run_0
    V_size-V_i_0-V_run_0-2
    V_size-V_i_1-1

Discarded unfeasible chain [[16]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J) 
* [[16],19]
* [[16],18,20]
* [[16],18,19]
* [[16],17,20]
* [[16],17,19]
* [20]
* [19]
* [18,20]
* [18,19]
* [17,20]
* [17,19]


### Merging Chains  eval_xdr3dfcoord_bb5_in/16 into  External patterns of execution 
* [[19,18]] --> 1 
* [[19,17]] --> 2 
* [[20,18]] --> 3 
* [[20,17]] --> 4 
* [[19,17,[16]]] --> 5 
* [[20,18,[16]]] --> 6 
* [[20,17,[16]]] --> 7 
* [[19,18,[16]]] --> 8 
* [[19,[16]]] --> 9 
* [[20]] --> 10 
* [[19]] --> 11 


### Specialization of cost equations eval_xdr3dfcoord_bb8_in/12 
* CE 16 is refined into CE [22] 
* CE 15 is refined into CE [23] 


#### Refined cost equations eval_xdr3dfcoord_bb8_in/12 
* CE 22: eval_xdr3dfcoord_bb8_in(A,B,C,D,E,F,G,H,I,A,B,G) = 0
     [H>=E,I=3] 
* CE 23: eval_xdr3dfcoord_bb8_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,V_k_0,B,C,D,E) = 1+ eval_xdr3dfcoord_bb8_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,F,G,C,D,E)
     [V_run_0>=V_k_0+1,V_k_0+3=F,G=3,B=3] 

### Cost equations --> "Loop" of eval_xdr3dfcoord_bb8_in/12 
* CEs [23] --> Loop 21 
* CEs [22] --> Loop 22 

#### Loops of eval_xdr3dfcoord_bb8_in/12 
* Loop 21: eval_xdr3dfcoord_bb8_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,V_k_0,B,C,D,E)->  eval_xdr3dfcoord_bb8_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,V_k_0',B',C,D,E)
                  [V_run_0>=V_k_0+1,V_k_0+3=V_k_0',B'=3,B=3] 
* Loop 22: eval_xdr3dfcoord_bb8_in(A,B,C,D,E,F,G,H,I,A,B,G) [H>=E,I=3] 

### Ranking functions of CR eval_xdr3dfcoord_bb8_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,V_k_0,B,C,D,E) 
* RF of phase [21]: [V_run_0/3-V_k_0/3]

#### Partial ranking functions of CR eval_xdr3dfcoord_bb8_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,V_k_0,B,C,D,E) 
* Partial RF of phase [21]:
  - RF of loop [21:1]:
    V_run_0/3-V_k_0/3

Discarded unfeasible chain [[21]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_xdr3dfcoord_bb8_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,V_k_0,B,C,D,E) 
* [[21],22]
* [22]


### Merging Chains  eval_xdr3dfcoord_bb8_in/12 into  External patterns of execution 
* [[22]] --> 1 
* [[22,[21]]] --> 2 


### Specialization of cost equations eval_xdr3dfcoord_bb1_in/4 
* CE 6 is refined into CE [24] 
* CE 3 is refined into CE [25,26,27,28,29,30,31,32,33,34] 
* CE 4 is refined into CE [35,36] 
* CE 5 is refined into CE [37,38] 


#### Refined cost equations eval_xdr3dfcoord_bb1_in/4 
* CE 24: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) = 0
     [V_i_0>=V_size,B=4] 
* CE 25: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) = 3+ eval_xdr3dfcoord_bb5_in(V_size,C,D,E,F,G,H,I,V_size,J,K,L,M,N,V_size,O):1+ eval_xdr3dfcoord_bb8_in(V_size,P,Q,R,S,T,V_size,U,V,V_size,W,V_size):2+ eval_xdr3dfcoord_bb1_in(V_size,X,V_size,Y)
     [V_size=Q+2,V_size=K+2,V_size=H+1,V_size=D+2,V_size=V_i_0+2,Y=4,X=1,W=1,V=3,U=0,T=0,S=1,R=1,P=1,O=0,N=0,M=1,L=1,J=1,I=2,G=1,F=0,E=1,C=1,B=4,V_limit=1] 
* CE 26: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) = 3+ eval_xdr3dfcoord_bb5_in(V_size,C,D,E,F,G,H,I,V_size,J,K,L,M,N,O,P):2+ eval_xdr3dfcoord_bb8_in(V_size,Q,R,S,T,U,O,V,W,V_size,X,O):2+ eval_xdr3dfcoord_bb1_in(V_size,Y,O,Z)
     [V_size>=O+1,O=R+2,O=K+2,O=H+1,O=D+2,O=V_i_0+2,Z=4,Y=1,X=1,W=3,V=0,U=0,T=1,S=1,Q=1,P=0,N=0,M=1,L=1,J=1,I=2,G=1,F=0,E=1,C=1,B=4,V_limit=1] 
* CE 27: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) = 3+ eval_xdr3dfcoord_bb5_in(V_size,V_limit,C,D,E,F,G,H,V_size,V_limit,I,J,K,L,V_size,M):3+ eval_xdr3dfcoord_bb8_in(V_size,V_limit,N,O,P,Q,V_size,R,S,V_size,V_limit,V_size):2+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_size,T)
     [V_limit>=1,V_size=N+2,V_size=I+2,V_size=G+1,V_size=C+2,V_size=V_i_0+2,T=4,S=3,R=0,Q=0,P=1,O=1,M=0,L=0,K=1,J=1,H=2,F=1,E=0,D=1,B=4] 
* CE 28: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) = 3+ eval_xdr3dfcoord_bb5_in(V_size,V_limit,C,D,E,F,G,H,V_size,V_limit,I,J,K,L,M,N):4+ eval_xdr3dfcoord_bb8_in(V_size,V_limit,O,P,Q,R,M,S,T,V_size,V_limit,M):2+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,M,U)
     [V_size>=M+1,V_limit>=1,M=O+2,M=I+2,M=G+1,M=C+2,M=V_i_0+2,U=4,T=3,S=0,R=0,Q=1,P=1,N=0,L=0,K=1,J=1,H=2,F=1,E=0,D=1,B=4] 
* CE 29: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) = 3+ eval_xdr3dfcoord_bb5_in(V_size,V_limit,C,D,E,F,G,H,V_size,V_limit,I,J,V_limit,K,L,M):5+ eval_xdr3dfcoord_bb8_in(V_size,V_limit,N,O,V_limit,P,L,Q,R,V_size,V_limit,L):2+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,L,S)
     [V_size>=L+1,V_limit>=2,V_limit+N+1=L,V_limit+I+1=L,V_limit+G=L,V_limit+C+1=L,V_limit+V_i_0+1=L,S=4,R=3,Q=0,P=0,O=1,M=0,K=0,J=1,H=2,F=1,E=0,D=1,B=4] 
* CE 30: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) = 3+ eval_xdr3dfcoord_bb5_in(V_size,V_limit,C,D,E,F,G,H,V_size,V_limit,I,J,K,L,V_size,M):6+ eval_xdr3dfcoord_bb8_in(V_size,V_limit,N,O,K,P,V_size,Q,R,V_size,V_limit,V_size):2+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_size,S)
     [V_limit>=K,K>=2,V_size=K+N+1,V_size=I+K+1,V_size=G+K,V_size=C+K+1,V_size=V_i_0+K+1,S=4,R=3,Q=0,P=0,O=1,M=0,L=0,J=1,H=2,F=1,E=0,D=1,B=4] 
* CE 31: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) = 3+ eval_xdr3dfcoord_bb5_in(V_size,V_limit,C,D,E,F,G,H,V_size,V_limit,I,J,K,L,M,N):7+ eval_xdr3dfcoord_bb8_in(V_size,V_limit,O,P,K,Q,M,R,S,V_size,V_limit,M):2+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,M,T)
     [V_size>=M+1,V_limit>=K,K>=2,M=K+O+1,M=I+K+1,M=G+K,M=C+K+1,M=V_i_0+K+1,T=4,S=3,R=0,Q=0,P=1,N=0,L=0,J=1,H=2,F=1,E=0,D=1,B=4] 
* CE 32: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) = 3+ eval_xdr3dfcoord_bb5_in(V_size,V_limit,C,D,E,F,G,H,V_size,V_limit,I,J,V_limit,K,V_size,L):8+ eval_xdr3dfcoord_bb8_in(V_size,V_limit,M,N,V_limit,O,V_size,P,Q,V_size,V_limit,V_size):2+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_size,R)
     [V_limit>=2,V_size=V_limit+M+1,V_size=V_limit+I+1,V_size=V_limit+G,V_size=V_limit+C+1,V_size=V_limit+V_i_0+1,R=4,Q=3,P=0,O=0,N=1,L=0,K=0,J=1,H=2,F=1,E=0,D=1,B=4] 
* CE 33: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) = 3+ eval_xdr3dfcoord_bb5_in(V_size,V_limit,C,D,E,F,G,H,V_size,V_limit,I,J,V_limit,K,L,M):9+ eval_xdr3dfcoord_bb8_in(V_size,V_limit,N,O,V_limit,P,L,Q,R,V_size,V_limit,L):2+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,L,S)
     [V_size>=L+1,V_limit>=1,V_limit+N+1=L,V_limit+I+1=L,V_limit+G=L,V_limit+C+1=L,V_limit+V_i_0+1=L,S=4,R=3,Q=0,P=1,O=1,M=0,K=1,J=1,H=2,F=1,E=0,D=1,B=4] 
* CE 34: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) = 3+ eval_xdr3dfcoord_bb5_in(V_size,V_limit,C,D,E,F,G,H,V_size,V_limit,I,J,K,L,G,M):11+ eval_xdr3dfcoord_bb8_in(V_size,V_limit,N,O,P,Q,G,R,S,V_size,V_limit,G):1+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,G,T)
     [V_size>=G+1,0>=V_limit,G=N+1,G=I+1,G=C+1,G=V_i_0+1,T=4,S=3,R=0,Q=1,P=0,O=1,M=0,L=1,K=0,J=1,H=2,F=1,E=0,D=1,B=4] 
* CE 35: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) = 3+ eval_xdr3dfcoord_bb5_in(V_size,V_limit,C,D,E,F,G,H,V_size,V_limit,I,J,K,L,G,M):10+ eval_xdr3dfcoord_bb8_in(V_size,V_limit,N,O,P,Q,G,R,S,V_size,V_limit,G):1+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,G,T)
     [V_size>=G+1,G=N+1,G=I+1,G=C+1,G=V_i_0+1,T=4,S=3,R=0,Q=0,P=0,O=0,M=0,L=0,K=0,J=0,H=2,F=0,E=0,D=0,B=4] 
* CE 36: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) = 3+ eval_xdr3dfcoord_bb5_in(V_size,V_limit,C,D,E,F,G,H,V_size,V_limit,I,J,K,L,G,M):11+ eval_xdr3dfcoord_bb8_in(V_size,V_limit,N,O,P,Q,G,R,S,V_size,V_limit,G):1+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,G,T)
     [V_size>=G+1,0>=V_limit,G=N+1,G=I+1,G=C+1,G=V_i_0+1,T=4,S=3,R=0,Q=0,P=0,O=0,M=0,L=0,K=0,J=0,H=2,F=0,E=0,D=0,B=4] 
* CE 37: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) = 3+ eval_xdr3dfcoord_bb5_in(V_size,V_limit,C,D,E,F,V_size,G,V_size,V_limit,H,I,J,K,V_size,L):10+ eval_xdr3dfcoord_bb8_in(V_size,V_limit,M,N,O,P,V_size,Q,R,V_size,V_limit,V_size):1+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_size,S)
     [V_size=M+1,V_size=H+1,V_size=C+1,V_size=V_i_0+1,S=4,R=3,Q=0,P=0,O=0,N=0,L=0,K=0,J=0,I=0,G=2,F=0,E=0,D=0,B=4] 
* CE 38: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) = 3+ eval_xdr3dfcoord_bb5_in(V_size,V_limit,C,D,E,F,V_size,G,V_size,V_limit,H,I,J,K,V_size,L):11+ eval_xdr3dfcoord_bb8_in(V_size,V_limit,M,N,O,P,V_size,Q,R,V_size,V_limit,V_size):1+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_size,S)
     [0>=V_limit,V_size=M+1,V_size=H+1,V_size=C+1,V_size=V_i_0+1,S=4,R=3,Q=0,P=0,O=0,N=0,L=0,K=0,J=0,I=0,G=2,F=0,E=0,D=0,B=4] 

### Cost equations --> "Loop" of eval_xdr3dfcoord_bb1_in/4 
* CEs [31] --> Loop 23 
* CEs [29] --> Loop 24 
* CEs [33] --> Loop 25 
* CEs [35] --> Loop 26 
* CEs [34,36] --> Loop 27 
* CEs [28] --> Loop 28 
* CEs [30] --> Loop 29 
* CEs [32] --> Loop 30 
* CEs [27] --> Loop 31 
* CEs [38] --> Loop 32 
* CEs [37] --> Loop 33 
* CEs [26] --> Loop 34 
* CEs [25] --> Loop 35 
* CEs [24] --> Loop 36 

#### Loops of eval_xdr3dfcoord_bb1_in/4 
* Loop 23: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)->  eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0',B')
                  [V_limit+V_i_0+1>=V_i_0',V_size>=V_i_0'+1,V_i_0'>=V_i_0+3,B'=4,B=4] 
* Loop 24: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)->  eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0',B')
                  [V_size>=V_i_0'+1,V_limit>=2,V_limit+V_i_0+1=V_i_0',B'=4,B=4] 
* Loop 25: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)->  eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0',B')
                  [V_size>=V_i_0'+1,V_limit>=1,V_limit+V_i_0+1=V_i_0',B'=4,B=4] 
* Loop 26: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)->  eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0',B')
                  [V_size>=V_i_0+2,V_i_0+1=V_i_0',B'=4,B=4] 
* Loop 27: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)->  eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0',B')
                  [V_size>=V_i_0+2,0>=V_limit,V_i_0+1=V_i_0',B'=4,B=4] 
* Loop 28: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)->  eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0',B')
                  [V_size>=V_i_0+3,V_limit>=1,V_i_0+2=V_i_0',B'=4,B=4] 
* Loop 29: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)->  eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_size,A')
                  [V_limit+V_i_0+1>=V_size,V_size>=V_i_0+3,A'=4,B=4] 
* Loop 30: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)->  eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_size,A')
                  [V_limit>=2,V_size=V_limit+V_i_0+1,A'=4,B=4] 
* Loop 31: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)->  eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_size,A')
                  [V_limit>=1,V_size=V_i_0+2,A'=4,B=4] 
* Loop 32: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)->  eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_size,A')
                  [0>=V_limit,V_size=V_i_0+1,A'=4,B=4] 
* Loop 33: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)->  eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_size,A')
                  [V_size=V_i_0+1,A'=4,B=4] 
* Loop 34: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)->  eval_xdr3dfcoord_bb1_in(V_size,V_limit',V_i_0',B')
                  [V_size>=V_i_0+3,V_i_0+2=V_i_0',B'=4,V_limit'=1,B=4,V_limit=1] 
* Loop 35: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)->  eval_xdr3dfcoord_bb1_in(V_size,A',V_size,B')
                  [V_size=V_i_0+2,B'=4,A'=1,B=4,V_limit=1] 
* Loop 36: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) [V_i_0>=V_size,B=4] 

### Ranking functions of CR eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) 
* RF of phase [23,24,25,26,27,28,34]: [V_size-V_i_0-1]

#### Partial ranking functions of CR eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) 
* Partial RF of phase [23,24,25,26,27,28,34]:
  - RF of loop [23:1,24:1]:
    V_size/3-V_i_0/3-1
  - RF of loop [24:1]:
    V_size/3-V_limit/3-V_i_0/3-1/3
  - RF of loop [25:1]:
    V_size/2-V_limit/2-V_i_0/2-1/2
  - RF of loop [25:1,28:1,34:1]:
    V_size/2-V_i_0/2-1
  - RF of loop [26:1,27:1]:
    V_size-V_i_0-1

Discarded unfeasible chain [[23,24,25,26,27,28,34]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) 
* [[23,24,25,26,27,28,34],35,36]
* [[23,24,25,26,27,28,34],33,36]
* [[23,24,25,26,27,28,34],32,36]
* [[23,24,25,26,27,28,34],31,36]
* [[23,24,25,26,27,28,34],30,36]
* [[23,24,25,26,27,28,34],29,36]
* [36]
* [35,36]
* [33,36]
* [32,36]
* [31,36]
* [30,36]
* [29,36]


### Merging Chains  eval_xdr3dfcoord_bb1_in/4 into  External patterns of execution 
* [[36,35]] --> 1 
* [[36,35,[23,24,25,26,27,28,34]]] --> 2 
* [[36,31]] --> 3 
* [[36,32]] --> 4 
* [[36,33]] --> 5 
* [[36,30]] --> 6 
* [[36,32,[23,24,25,26,27,28,34]]] --> 7 
* [[36,31,[23,24,25,26,27,28,34]]] --> 8 
* [[36,29,[23,24,25,26,27,28,34]]] --> 9 
* [[36,30,[23,24,25,26,27,28,34]]] --> 10 
* [[36]] --> 11 
* [[36,33,[23,24,25,26,27,28,34]]] --> 12 
* [[36,29]] --> 13 


### Specialization of cost equations eval_xdr3dfcoord_11/3 
* CE 2 is refined into CE [39,40,41,42,43,44,45,46,47,48,49,50,51] 


#### Refined cost equations eval_xdr3dfcoord_11/3 
* CE 39: eval_xdr3dfcoord_11(V_size,V_limit,B) = 1+ eval_xdr3dfcoord_bb1_in(C,D,E,F):1
     [F=4,E=0,D=1,C=2,V_limit=1,V_size=2] 
* CE 40: eval_xdr3dfcoord_11(V_size,V_limit,B) = 1+ eval_xdr3dfcoord_bb1_in(V_size,C,D,E):2
     [V_size>=3,E=4,D=0,C=1,V_limit=1] 
* CE 41: eval_xdr3dfcoord_11(V_size,V_limit,B) = 1+ eval_xdr3dfcoord_bb1_in(C,V_limit,D,E):3
     [V_limit>=1,E=4,D=0,C=2,V_size=2] 
* CE 42: eval_xdr3dfcoord_11(V_size,V_limit,B) = 1+ eval_xdr3dfcoord_bb1_in(C,V_limit,D,E):4
     [0>=V_limit,E=4,D=0,C=1,V_size=1] 
* CE 43: eval_xdr3dfcoord_11(V_size,V_limit,B) = 1+ eval_xdr3dfcoord_bb1_in(C,V_limit,D,E):5
     [E=4,D=0,C=1,V_size=1] 
* CE 44: eval_xdr3dfcoord_11(V_size,V_limit,B) = 1+ eval_xdr3dfcoord_bb1_in(V_size,C,D,E):6
     [V_size>=3,V_size=C+1,V_size=V_limit+1,E=4,D=0] 
* CE 45: eval_xdr3dfcoord_11(V_size,V_limit,B) = 1+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,C,D):7
     [V_size>=2,0>=V_limit,D=4,C=0] 
* CE 46: eval_xdr3dfcoord_11(V_size,V_limit,B) = 1+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,C,D):8
     [V_limit>=1,V_size>=3,D=4,C=0] 
* CE 47: eval_xdr3dfcoord_11(V_size,V_limit,B) = 1+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,C,D):9
     [V_limit>=2,V_size>=4,D=4,C=0] 
* CE 48: eval_xdr3dfcoord_11(V_size,V_limit,B) = 1+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,C,D):10
     [V_size>=V_limit+2,V_limit>=2,D=4,C=0] 
* CE 49: eval_xdr3dfcoord_11(V_size,V_limit,B) = 1+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,C,D):11
     [0>=V_size,D=4,C=0] 
* CE 50: eval_xdr3dfcoord_11(V_size,V_limit,B) = 1+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,C,D):12
     [V_size>=2,D=4,C=0] 
* CE 51: eval_xdr3dfcoord_11(V_size,V_limit,B) = 1+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,C,D):13
     [V_limit+1>=V_size,V_size>=3,D=4,C=0] 

### Cost equations --> "Loop" of eval_xdr3dfcoord_11/3 
* CEs [48] --> Loop 37 
* CEs [47] --> Loop 38 
* CEs [51] --> Loop 39 
* CEs [46] --> Loop 40 
* CEs [50] --> Loop 41 
* CEs [45] --> Loop 42 
* CEs [49] --> Loop 43 
* CEs [44] --> Loop 44 
* CEs [40] --> Loop 45 
* CEs [41] --> Loop 46 
* CEs [39] --> Loop 47 
* CEs [42] --> Loop 48 
* CEs [43] --> Loop 49 

#### Loops of eval_xdr3dfcoord_11/3 
* Loop 37: eval_xdr3dfcoord_11(V_size,V_limit,B) [V_size>=V_limit+2,V_limit>=2] 
* Loop 38: eval_xdr3dfcoord_11(V_size,V_limit,B) [V_limit>=2,V_size>=4] 
* Loop 39: eval_xdr3dfcoord_11(V_size,V_limit,B) [V_limit+1>=V_size,V_size>=3] 
* Loop 40: eval_xdr3dfcoord_11(V_size,V_limit,B) [V_limit>=1,V_size>=3] 
* Loop 41: eval_xdr3dfcoord_11(V_size,V_limit,B) [V_size>=2] 
* Loop 42: eval_xdr3dfcoord_11(V_size,V_limit,B) [V_size>=2,0>=V_limit] 
* Loop 43: eval_xdr3dfcoord_11(V_size,V_limit,B) [0>=V_size] 
* Loop 44: eval_xdr3dfcoord_11(V_size,V_limit,B) [V_size>=3,V_size=V_limit+1] 
* Loop 45: eval_xdr3dfcoord_11(V_size,V_limit,B) [V_size>=3,V_limit=1] 
* Loop 46: eval_xdr3dfcoord_11(V_size,V_limit,B) [V_limit>=1,V_size=2] 
* Loop 47: eval_xdr3dfcoord_11(V_size,V_limit,B) [V_limit=1,V_size=2] 
* Loop 48: eval_xdr3dfcoord_11(V_size,V_limit,B) [0>=V_limit,V_size=1] 
* Loop 49: eval_xdr3dfcoord_11(V_size,V_limit,B) [V_size=1] 

### Ranking functions of CR eval_xdr3dfcoord_11(V_size,V_limit,B) 

#### Partial ranking functions of CR eval_xdr3dfcoord_11(V_size,V_limit,B) 


### Resulting Chains:eval_xdr3dfcoord_11(V_size,V_limit,B) 
* [49]
* [48]
* [47]
* [46]
* [45]
* [44]
* [43]
* [42]
* [41]
* [40]
* [39]
* [38]
* [37]


### Merging Chains  eval_xdr3dfcoord_11/3 into  External patterns of execution 
* [[49]] --> 1 
* [[48]] --> 2 
* [[47]] --> 3 
* [[46]] --> 4 
* [[45]] --> 5 
* [[44]] --> 6 
* [[43]] --> 7 
* [[42]] --> 8 
* [[41]] --> 9 
* [[40]] --> 10 
* [[39]] --> 11 
* [[38]] --> 12 
* [[37]] --> 13 


### Specialization of cost equations eval_xdr3dfcoord_start/3 
* CE 1 is refined into CE [52,53,54,55,56,57,58,59,60,61,62,63,64] 


#### Refined cost equations eval_xdr3dfcoord_start/3 
* CE 52: eval_xdr3dfcoord_start(V_size,V_limit,B) = 0+ eval_xdr3dfcoord_11(C,V_limit,B):1
     [C=1,V_size=1] 
* CE 53: eval_xdr3dfcoord_start(V_size,V_limit,B) = 0+ eval_xdr3dfcoord_11(C,V_limit,B):2
     [0>=V_limit,C=1,V_size=1] 
* CE 54: eval_xdr3dfcoord_start(V_size,V_limit,B) = 0+ eval_xdr3dfcoord_11(C,D,B):3
     [D=1,C=2,V_limit=1,V_size=2] 
* CE 55: eval_xdr3dfcoord_start(V_size,V_limit,B) = 0+ eval_xdr3dfcoord_11(C,V_limit,B):4
     [V_limit>=1,C=2,V_size=2] 
* CE 56: eval_xdr3dfcoord_start(V_size,V_limit,B) = 0+ eval_xdr3dfcoord_11(V_size,C,B):5
     [V_size>=3,C=1,V_limit=1] 
* CE 57: eval_xdr3dfcoord_start(V_size,V_limit,B) = 0+ eval_xdr3dfcoord_11(C,V_limit,B):6
     [V_limit>=2,V_limit+1=C,V_limit+1=V_size] 
* CE 58: eval_xdr3dfcoord_start(V_size,V_limit,B) = 0+ eval_xdr3dfcoord_11(V_size,V_limit,B):7
     [0>=V_size] 
* CE 59: eval_xdr3dfcoord_start(V_size,V_limit,B) = 0+ eval_xdr3dfcoord_11(V_size,V_limit,B):8
     [V_size>=2,0>=V_limit] 
* CE 60: eval_xdr3dfcoord_start(V_size,V_limit,B) = 0+ eval_xdr3dfcoord_11(V_size,V_limit,B):9
     [V_size>=2] 
* CE 61: eval_xdr3dfcoord_start(V_size,V_limit,B) = 0+ eval_xdr3dfcoord_11(V_size,V_limit,B):10
     [V_limit>=1,V_size>=3] 
* CE 62: eval_xdr3dfcoord_start(V_size,V_limit,B) = 0+ eval_xdr3dfcoord_11(V_size,V_limit,B):11
     [V_limit+1>=V_size,V_size>=3] 
* CE 63: eval_xdr3dfcoord_start(V_size,V_limit,B) = 0+ eval_xdr3dfcoord_11(V_size,V_limit,B):12
     [V_limit>=2,V_size>=4] 
* CE 64: eval_xdr3dfcoord_start(V_size,V_limit,B) = 0+ eval_xdr3dfcoord_11(V_size,V_limit,B):13
     [V_size>=V_limit+2,V_limit>=2] 

### Cost equations --> "Loop" of eval_xdr3dfcoord_start/3 
* CEs [64] --> Loop 50 
* CEs [63] --> Loop 51 
* CEs [62] --> Loop 52 
* CEs [61] --> Loop 53 
* CEs [60] --> Loop 54 
* CEs [59] --> Loop 55 
* CEs [58] --> Loop 56 
* CEs [57] --> Loop 57 
* CEs [56] --> Loop 58 
* CEs [55] --> Loop 59 
* CEs [54] --> Loop 60 
* CEs [53] --> Loop 61 
* CEs [52] --> Loop 62 

#### Loops of eval_xdr3dfcoord_start/3 
* Loop 50: eval_xdr3dfcoord_start(V_size,V_limit,B) [V_size>=V_limit+2,V_limit>=2] 
* Loop 51: eval_xdr3dfcoord_start(V_size,V_limit,B) [V_limit>=2,V_size>=4] 
* Loop 52: eval_xdr3dfcoord_start(V_size,V_limit,B) [V_limit+1>=V_size,V_size>=3] 
* Loop 53: eval_xdr3dfcoord_start(V_size,V_limit,B) [V_limit>=1,V_size>=3] 
* Loop 54: eval_xdr3dfcoord_start(V_size,V_limit,B) [V_size>=2] 
* Loop 55: eval_xdr3dfcoord_start(V_size,V_limit,B) [V_size>=2,0>=V_limit] 
* Loop 56: eval_xdr3dfcoord_start(V_size,V_limit,B) [0>=V_size] 
* Loop 57: eval_xdr3dfcoord_start(V_size,V_limit,B) [V_size>=3,V_size=V_limit+1] 
* Loop 58: eval_xdr3dfcoord_start(V_size,V_limit,B) [V_size>=3,V_limit=1] 
* Loop 59: eval_xdr3dfcoord_start(V_size,V_limit,B) [V_limit>=1,V_size=2] 
* Loop 60: eval_xdr3dfcoord_start(V_size,V_limit,B) [V_limit=1,V_size=2] 
* Loop 61: eval_xdr3dfcoord_start(V_size,V_limit,B) [0>=V_limit,V_size=1] 
* Loop 62: eval_xdr3dfcoord_start(V_size,V_limit,B) [V_size=1] 

### Ranking functions of CR eval_xdr3dfcoord_start(V_size,V_limit,B) 

#### Partial ranking functions of CR eval_xdr3dfcoord_start(V_size,V_limit,B) 


### Resulting Chains:eval_xdr3dfcoord_start(V_size,V_limit,B) 
* [62]
* [61]
* [60]
* [59]
* [58]
* [57]
* [56]
* [55]
* [54]
* [53]
* [52]
* [51]
* [50]


### Merging Chains  eval_xdr3dfcoord_start/3 into  External patterns of execution 
* [[62]] --> 1 
* [[61]] --> 2 
* [[60]] --> 3 
* [[59]] --> 4 
* [[58]] --> 5 
* [[57]] --> 6 
* [[56]] --> 7 
* [[55]] --> 8 
* [[54]] --> 9 
* [[53]] --> 10 
* [[52]] --> 11 
* [[51]] --> 12 
* [[50]] --> 13 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 17 

#### Computing cost of phase [16] 

#### Simplifying cost structure of CE 19 

#### Cost of loops [16] 

 * loop 16:eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J) -> [eval_xdr3dfcoord_bb5_in(V_size',V_limit',V_i_0',V_is_small_1',V_run_0',V_is_small_2',V_i_1',B',C',D',E',F',G',H',I',J')] 
1
##### Pending set eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J)
* Psum in Loop 16: [it(16)=<1]

###### Computing sum for it(16)=<1  in Loop 16 
   - Applying inductive sum strategy 
     - head Candidate: V_limit-V_run_0 
     - head Candidate: V_size-V_i_0-V_run_0-2 
     - head Candidate: V_size-V_i_1-1 
     - head Candidate: V_limit+V_i_0-V_i_1+1 
     - head Candidate: V_size-V_i_1-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_limit-V_run_0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_size-V_i_0-V_run_0-2 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_limit+V_i_0-V_i_1+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_limit-V_run_0 
     - tail Candidate: V_size-V_i_0-V_run_0-2 
     - tail Candidate: V_size-V_i_1-1 
     - tail Candidate: V_limit+V_i_0-V_i_1+1 
     - tail Candidate: V_size-V_i_1-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_limit-V_run_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_size-V_i_0-V_run_0-2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_limit+V_i_0-V_i_1+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(16)=<V_limit-V_run_0,it(16)=<V_size-V_i_0-V_run_0-2,it(16)=<V_size-V_i_1-1,it(16)=<V_limit+V_i_0-V_i_1+1,it(16)=<V_size-V_i_1-1,it(16)=<V_limit-V_run_0,it(16)=<V_size-V_i_0-V_run_0-2,it(16)=<V_limit+V_i_0-V_i_1+1,it(16)=<V_limit-V_run_0-V_limit'+V_run_0',it(16)=<V_size-V_i_0-V_run_0-V_size'+V_i_0'+V_run_0',it(16)=<V_size-V_i_1-V_size'+V_i_1',it(16)=<V_limit+V_i_0-V_i_1-V_limit'-V_i_0'+V_i_1',it(16)=<V_size-V_i_1-V_size'+V_i_1',it(16)=<V_limit-V_run_0-V_limit'+V_run_0',it(16)=<V_size-V_i_0-V_run_0-V_size'+V_i_0'+V_run_0',it(16)=<V_limit+V_i_0-V_i_1-V_limit'-V_i_0'+V_i_1'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [16] 

#### Simplifying cost structure of phase [16] 

#### Cost of phase [16]:eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J) -> [eval_xdr3dfcoord_bb5_in(V_size',V_limit',V_i_0',V_is_small_1',V_run_0',V_is_small_2',V_i_1',B',C',D',E',F',G',H',I',J')] 
1*it(16)+0
  Such that:it(16) =< V_size-V_i_0-V_run_0
it(16) =< V_size-V_i_0-V_run_0-V_size'+V_i_0'+V_run_0'
it(16) =< V_size-V_i_1
it(16) =< V_size-V_i_1-V_size'+V_i_1'
it(16) =< V_limit+V_i_0-V_i_1+1
it(16) =< V_limit+V_i_0-V_i_1-V_limit'-V_i_0'+V_i_1'
it(16) =< V_limit-V_run_0
it(16) =< V_limit-V_run_0-V_limit'+V_run_0'

#### Simplifying cost structure of chain [[16],19] 

#### Simplifying cost structure of CE 18 

#### Simplifying cost structure of CE 21 

#### Simplifying cost structure of chain [18,20] 

#### Found solution for phase  [16] in the cache 

#### Cost of phase [16]:eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J) -> [eval_xdr3dfcoord_bb5_in(V_size',V_limit',V_i_0',V_is_small_1',V_run_0',V_is_small_2',V_i_1',B',C',D',E',F',G',H',I',J')] 
1*it(16)+0
  Such that:it(16) =< V_size-V_i_0-V_run_0
it(16) =< V_size-V_i_0-V_run_0-V_size'+V_i_0'+V_run_0'
it(16) =< V_size-V_i_1
it(16) =< V_size-V_i_1-V_size'+V_i_1'
it(16) =< V_limit+V_i_0-V_i_1+1
it(16) =< V_limit+V_i_0-V_i_1-V_limit'-V_i_0'+V_i_1'
it(16) =< V_limit-V_run_0
it(16) =< V_limit-V_run_0-V_limit'+V_run_0'

#### Simplifying cost structure of chain [[16],18,20] 

#### Simplifying cost structure of chain [18,19] 

#### Found solution for phase  [16] in the cache 

#### Cost of phase [16]:eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J) -> [eval_xdr3dfcoord_bb5_in(V_size',V_limit',V_i_0',V_is_small_1',V_run_0',V_is_small_2',V_i_1',B',C',D',E',F',G',H',I',J')] 
1*it(16)+0
  Such that:it(16) =< V_size-V_i_0-V_run_0
it(16) =< V_size-V_i_0-V_run_0-V_size'+V_i_0'+V_run_0'
it(16) =< V_size-V_i_1
it(16) =< V_size-V_i_1-V_size'+V_i_1'
it(16) =< V_limit+V_i_0-V_i_1+1
it(16) =< V_limit+V_i_0-V_i_1-V_limit'-V_i_0'+V_i_1'
it(16) =< V_limit-V_run_0
it(16) =< V_limit-V_run_0-V_limit'+V_run_0'

#### Simplifying cost structure of chain [[16],18,19] 

#### Simplifying cost structure of CE 20 

#### Simplifying cost structure of chain [17,20] 

#### Found solution for phase  [16] in the cache 

#### Cost of phase [16]:eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J) -> [eval_xdr3dfcoord_bb5_in(V_size',V_limit',V_i_0',V_is_small_1',V_run_0',V_is_small_2',V_i_1',B',C',D',E',F',G',H',I',J')] 
1*it(16)+0
  Such that:it(16) =< V_size-V_i_0-V_run_0
it(16) =< V_size-V_i_0-V_run_0-V_size'+V_i_0'+V_run_0'
it(16) =< V_size-V_i_1
it(16) =< V_size-V_i_1-V_size'+V_i_1'
it(16) =< V_limit+V_i_0-V_i_1+1
it(16) =< V_limit+V_i_0-V_i_1-V_limit'-V_i_0'+V_i_1'
it(16) =< V_limit-V_run_0
it(16) =< V_limit-V_run_0-V_limit'+V_run_0'

#### Simplifying cost structure of chain [[16],17,20] 

#### Simplifying cost structure of chain [17,19] 

#### Found solution for phase  [16] in the cache 

#### Cost of phase [16]:eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J) -> [eval_xdr3dfcoord_bb5_in(V_size',V_limit',V_i_0',V_is_small_1',V_run_0',V_is_small_2',V_i_1',B',C',D',E',F',G',H',I',J')] 
1*it(16)+0
  Such that:it(16) =< V_size-V_i_0-V_run_0
it(16) =< V_size-V_i_0-V_run_0-V_size'+V_i_0'+V_run_0'
it(16) =< V_size-V_i_1
it(16) =< V_size-V_i_1-V_size'+V_i_1'
it(16) =< V_limit+V_i_0-V_i_1+1
it(16) =< V_limit+V_i_0-V_i_1-V_limit'-V_i_0'+V_i_1'
it(16) =< V_limit-V_run_0
it(16) =< V_limit-V_run_0-V_limit'+V_run_0'

#### Simplifying cost structure of chain [[16],17,19] 

#### Cost of chains of eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J):
* Chain [[16],19]: 1*it(16)+0
  Such that:it(16) =< V_limit-V_run_0

  with precondition: [V_is_small_1=1,V_is_small_2=1,B=2,F=1,H=1,J=0,V_size=C,V_limit=D,V_i_0=E,V_limit=G,V_i_0+V_run_0+1=V_i_1,V_i_0+V_limit+1=I,V_i_1>=V_i_0+1,V_size>=V_i_0+V_limit+2,V_i_0+V_limit>=V_i_1] 

* Chain [[16],18,20]: 1*it(16)+1
  Such that:it(16) =< V_size-V_i_0-V_run_0

  with precondition: [V_is_small_1=1,V_is_small_2=1,B=2,F=1,H=0,J=0,V_size=C,V_limit=D,V_i_0=E,V_size=I,V_size=V_i_0+G+1,V_i_0+V_run_0+1=V_i_1,V_i_1>=V_i_0+1,V_size>=V_i_1+2,V_i_0+V_limit+1>=V_size] 

* Chain [[16],18,19]: 1*it(16)+1
  Such that:it(16) =< V_limit-V_run_0

  with precondition: [V_is_small_1=1,V_is_small_2=1,B=2,F=1,H=0,J=0,V_size=C,V_limit=D,V_limit=G,V_size=I,V_size=V_i_0+V_limit+1,V_size=V_limit+E+1,V_run_0+V_size=V_i_1+V_limit,V_size>=V_i_1+2,V_i_1+V_limit>=V_size] 

* Chain [[16],17,20]: 1*it(16)+1
  Such that:it(16) =< -V_i_0-V_run_0+I

  with precondition: [V_is_small_1=1,V_is_small_2=1,B=2,F=1,H=0,J=0,V_size=C,V_limit=D,V_i_0=E,V_i_0+V_run_0+1=V_i_1,V_i_0+G+1=I,V_i_1>=V_i_0+1,V_limit>=G,V_size>=V_i_0+G+2,V_i_0+G>=V_i_1+1] 

* Chain [[16],17,19]: 1*it(16)+1
  Such that:it(16) =< V_limit-V_run_0

  with precondition: [V_is_small_1=1,V_is_small_2=1,B=2,F=1,H=0,J=0,V_size=C,V_limit=D,V_i_0=E,V_limit=G,V_i_0+V_run_0+1=V_i_1,V_i_0+V_limit+1=I,V_i_1>=V_i_0+1,V_size>=V_i_0+V_limit+2,V_i_0+V_limit>=V_i_1+1] 

* Chain [20]: 0
  with precondition: [V_is_small_2=0,B=2,H=0,J=0,D=V_limit,V_size=C,V_is_small_1=F,V_run_0=G,V_i_1=I,V_i_0+V_run_0+1=V_i_1,V_run_0+E+1=V_i_1,1>=V_is_small_1,V_is_small_1>=0,V_run_0>=V_is_small_1,V_size>=V_i_1] 

* Chain [19]: 0
  with precondition: [B=2,J=0,V_size=C,V_limit=D,V_is_small_1=F,V_run_0=G,V_is_small_2=H,V_i_1=I,V_i_0+V_run_0+1=V_i_1,V_run_0+E+1=V_i_1,1>=V_is_small_1,V_run_0>=V_limit,V_is_small_2+1>=V_is_small_1,V_is_small_1>=V_is_small_2,V_is_small_2+V_run_0>=V_is_small_1,V_size>=V_i_1+V_is_small_2] 

* Chain [18,20]: 1
  with precondition: [V_is_small_1=1,V_is_small_2=1,B=2,F=1,H=0,J=0,G=V_run_0+1,V_size=V_i_1+1,V_size=C,V_limit=D,V_size=I,V_i_0+G+1=V_size,E+G+1=V_size,G>=1,V_limit>=G] 

* Chain [18,19]: 1
  with precondition: [V_is_small_1=1,V_is_small_2=1,B=2,F=1,H=0,J=0,V_limit=V_run_0+1,V_size=V_i_1+1,V_size=C,V_limit=D,V_limit=G,V_size=I,V_i_0+V_limit+1=V_size,V_limit+E+1=V_size,V_limit>=1] 

* Chain [17,20]: 1
  with precondition: [V_is_small_1=1,V_is_small_2=1,B=2,F=1,H=0,J=0,G=V_run_0+1,I=V_i_1+1,V_size=C,V_limit=D,I=V_i_0+G+1,I=E+G+1,G>=1,V_limit>=G,V_size>=I+1] 

* Chain [17,19]: 1
  with precondition: [V_is_small_1=1,V_is_small_2=1,B=2,F=1,H=0,J=0,V_limit=V_run_0+1,I=V_i_1+1,V_size=C,V_limit=D,V_limit=G,V_i_0+V_limit+1=I,V_limit+E+1=I,V_limit>=1,V_size>=I+1] 


#### Simplifying cost structure of CE 22 

#### Computing cost of phase [21] 

#### Simplifying cost structure of CE 23 

#### Cost of loops [21] 

 * loop 21:eval_xdr3dfcoord_bb8_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,V_k_0,B,C,D,E) -> [eval_xdr3dfcoord_bb8_in(V_size',V_limit',V_i_0',V_is_small_1',V_run_0',V_is_small_2',V_i_1',V_k_0',B',C',D',E')] 
1
##### Pending set eval_xdr3dfcoord_bb8_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,V_k_0,B,C,D,E)
* Psum in Loop 21: [it(21)=<1]

###### Computing sum for it(21)=<1  in Loop 21 
   - Applying inductive sum strategy 
     - head Candidate: V_run_0/3-V_k_0/3 
     - head Candidate: V_run_0/3-V_k_0/3 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_run_0/3-V_k_0/3 
     - tail Candidate: V_run_0/3-V_k_0/3 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(21)=<V_run_0/3-V_k_0/3,it(21)=<V_run_0/3-V_k_0/3,it(21)=<V_run_0/3-V_k_0/3-V_run_0'/3+V_k_0'/3,it(21)=<V_run_0/3-V_k_0/3-V_run_0'/3+V_k_0'/3] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [21] 

#### Simplifying cost structure of phase [21] 

#### Cost of phase [21]:eval_xdr3dfcoord_bb8_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,V_k_0,B,C,D,E) -> [eval_xdr3dfcoord_bb8_in(V_size',V_limit',V_i_0',V_is_small_1',V_run_0',V_is_small_2',V_i_1',V_k_0',B',C',D',E')] 
1*it(21)+0
  Such that:it(21) =< V_run_0/3-V_k_0/3
it(21) =< V_run_0/3-V_k_0/3-V_run_0'/3+V_k_0'/3

#### Simplifying cost structure of chain [[21],22] 

#### Cost of chains of eval_xdr3dfcoord_bb8_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,V_k_0,B,C,D,E):
* Chain [[21],22]: 1*it(21)+0
  Such that:it(21) =< V_run_0/3-V_k_0/3

  with precondition: [B=3,V_size=C,V_limit=D,V_i_1=E,V_run_0>=V_k_0+1] 

* Chain [22]: 0
  with precondition: [B=3,C=V_size,D=V_limit,E=V_i_1,V_k_0>=V_run_0] 


#### Simplifying cost structure of CE 24 
 * Renamed intermediate variables: 
[(eq(25,2),it(21))>>s(1)]

#### Simplifying cost structure of CE 25 

#### Simplifying cost structure of chain [35,36] 

#### Computing cost of phase [23,24,25,26,27,28,34] 
 * Renamed intermediate variables: 
[(eq(31,1),it(16))>>s(2)]
 * Renamed intermediate variables: 
[(eq(31,2),it(21))>>s(3)]

#### Simplifying cost structure of CE 31 
 * Renamed intermediate variables: 
[(it(23),s(2))>>s(4),(it(23),s(3))>>s(5)]
 * Renamed intermediate variables: 
[(eq(29,1),it(16))>>s(6)]
 * Renamed intermediate variables: 
[(eq(29,2),it(21))>>s(7)]

#### Simplifying cost structure of CE 29 
 * Renamed intermediate variables: 
[(it(24),s(6))>>s(8),(it(24),s(7))>>s(9)]
 * Renamed intermediate variables: 
[(eq(33,1),it(16))>>s(10)]
 * Renamed intermediate variables: 
[(eq(33,2),it(21))>>s(11)]

#### Simplifying cost structure of CE 33 
 * Renamed intermediate variables: 
[(it(25),s(10))>>s(12),(it(25),s(11))>>s(13)]

#### Simplifying cost structure of CE 35 

#### Simplifying cost structure of CE 34 

#### Simplifying cost structure of CE 36 
 * Renamed intermediate variables: 
[(eq(28,2),it(21))>>s(14)]

#### Simplifying cost structure of CE 28 
 * Renamed intermediate variables: 
[(it(28),s(14))>>s(15)]
 * Renamed intermediate variables: 
[(eq(26,2),it(21))>>s(16)]

#### Simplifying cost structure of CE 26 
 * Renamed intermediate variables: 
[(it(34),s(16))>>s(17)]

#### Cost of loops [23,24,25,26,27,28,34] 

 * loop 23:eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) -> [eval_xdr3dfcoord_bb1_in(V_size',V_limit',V_i_0',B')] 
1*s(4)+1*s(5)+4
  Such that:s(4) =< -V_i_0+V_i_0'
s(5) =< -V_i_0/3+V_i_0'/3

 * loop 24:eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) -> [eval_xdr3dfcoord_bb1_in(V_size',V_limit',V_i_0',B')] 
1*s(8)+1*s(9)+4
  Such that:s(8) =< -V_i_0+V_i_0'
s(9) =< -V_i_0/3+V_i_0'/3

 * loop 25:eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) -> [eval_xdr3dfcoord_bb1_in(V_size',V_limit',V_i_0',B')] 
1*s(12)+1*s(13)+3
  Such that:s(12) =< -V_i_0+V_i_0'
s(13) =< -V_i_0/3+V_i_0'/3

 * loop 26:eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) -> [eval_xdr3dfcoord_bb1_in(V_size',V_limit',V_i_0',B')] 
3
 * loop 27:eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) -> [eval_xdr3dfcoord_bb1_in(V_size',V_limit',V_i_0',B')] 
3
 * loop 28:eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) -> [eval_xdr3dfcoord_bb1_in(V_size',V_limit',V_i_0',B')] 
1*s(15)+4
  Such that:s(15) =< 1/3

 * loop 34:eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) -> [eval_xdr3dfcoord_bb1_in(V_size',V_limit',V_i_0',B')] 
1*s(17)+4
  Such that:s(17) =< 1/3

##### Pending set eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)
* Psum in Loop 23: [it(23)=<1,s(18)=< -V_i_0+V_i_0',s(19)=< -V_i_0/3+V_i_0'/3]
* Psum in Loop 24: [it(24)=<1,s(20)=< -V_i_0+V_i_0',s(21)=< -V_i_0/3+V_i_0'/3]
* Psum in Loop 25: [it(25)=<1,s(22)=< -V_i_0+V_i_0',s(23)=< -V_i_0/3+V_i_0'/3]
* Psum in Loop 26: [it(26)=<1]
* Psum in Loop 27: [it(27)=<1]
* Psum in Loop 28: [it(28)=<1,s(24)=<1/3]
* Psum in Loop 34: [it(34)=<1,s(25)=<1/3]

###### Computing sum for it(23)=<1  in Loop 23 
   - Applying inductive sum strategy 
     - head Candidate: V_size-V_i_0-1 
       - Loop 24 is collaborative and bounds [it(24)] 
       - Loop 25 is collaborative and bounds [it(25)] 
       - Loop 26 is collaborative and bounds [it(26)] 
       - Loop 27 is collaborative and bounds [it(27)] 
       - Loop 28 is collaborative and bounds [it(28)] 
       - Loop 34 is collaborative and bounds [it(34)] 
     - head Candidate: V_size/3-V_i_0/3-1 
       - Loop 24 is collaborative
       - Loop 25 is collaborative
       - Loop 26 is collaborative
       - Loop 27 is collaborative
       - Loop 28 is collaborative
       - Loop 34 is collaborative
     - tail Candidate: V_size-V_i_0-1 
       - Loop 24 is collaborative and bounds [it(24)] 
       - Loop 25 is collaborative and bounds [it(25)] 
       - Loop 26 is collaborative and bounds [it(26)] 
       - Loop 27 is collaborative and bounds [it(27)] 
       - Loop 28 is collaborative and bounds [it(28)] 
       - Loop 34 is collaborative and bounds [it(34)] 
     - tail Candidate: V_size/3-V_i_0/3-1 
       - Loop 24 is collaborative and bounds [it(24)] 
       - Loop 25 is collaborative and bounds [s(23)] 
       - Loop 26 is collaborative
       - Loop 27 is collaborative
       - Loop 28 is collaborative and bounds [s(24)] 
       - Loop 34 is collaborative and bounds [s(25)] 
 * Adding constraints: [it(23)+it(24)+it(25)+it(26)+it(27)+it(28)+it(34)=<V_size-V_i_0-1,it(23)=<V_size/3-V_i_0/3-1,it(23)+it(24)+it(25)+it(26)+it(27)+it(28)+it(34)=<V_size-V_i_0-V_size'+V_i_0',it(23)+it(24)+s(23)+s(24)+s(25)=<V_size/3-V_i_0/3-V_size'/3+V_i_0'/3] 

##### Pending set eval_xdr3dfcoord_0(V_size,V_limit,B)
* Psum in Loop 23: [s(18)=< -V_i_0+V_i_0',s(19)=< -V_i_0/3+V_i_0'/3]
* Psum in Loop 24: [it(24)=<1,s(20)=< -V_i_0+V_i_0',s(21)=< -V_i_0/3+V_i_0'/3]
* Psum in Loop 25: [it(25)=<1,s(22)=< -V_i_0+V_i_0',s(23)=< -V_i_0/3+V_i_0'/3]
* Psum in Loop 26: [it(26)=<1]
* Psum in Loop 27: [it(27)=<1]
* Psum in Loop 28: [it(28)=<1,s(24)=<1/3]
* Psum in Loop 34: [it(34)=<1,s(25)=<1/3]

###### Computing sum for s(18)=< -V_i_0+V_i_0'  in Loop 23 
   - Applying inductive sum strategy 
     - head Candidate: V_size-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_size-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(24)+it(25)+it(26)+it(27)+it(28)+it(34)+s(18)=<V_size-V_i_0-1,it(24)+it(25)+it(26)+it(27)+it(28)+it(34)+s(18)=<V_size-V_i_0-V_size'+V_i_0'] 

##### Pending set eval_xdr3dfcoord_0(V_size,V_limit,B)
* Psum in Loop 23: [s(19)=< -V_i_0/3+V_i_0'/3]
* Psum in Loop 24: [it(24)=<1,s(20)=< -V_i_0+V_i_0',s(21)=< -V_i_0/3+V_i_0'/3]
* Psum in Loop 25: [it(25)=<1,s(22)=< -V_i_0+V_i_0',s(23)=< -V_i_0/3+V_i_0'/3]
* Psum in Loop 26: [it(26)=<1]
* Psum in Loop 27: [it(27)=<1]
* Psum in Loop 28: [it(28)=<1,s(24)=<1/3]
* Psum in Loop 34: [it(34)=<1,s(25)=<1/3]

###### Computing sum for s(19)=< -V_i_0/3+V_i_0'/3  in Loop 23 
   - Found a solution using cacheing 
 * Adding constraints: [s(19)=<aux(1)*(1/3),aux(1)+it(24)+it(25)+it(26)+it(27)+it(28)+it(34)=<V_size-V_i_0-1,aux(1)+it(24)+it(25)+it(26)+it(27)+it(28)+it(34)=<V_size-V_i_0-V_size'+V_i_0'] 

##### Pending set eval_xdr3dfcoord_0(V_size,V_limit,B)
* Psum in Loop 24: [it(24)=<1,s(20)=< -V_i_0+V_i_0',s(21)=< -V_i_0/3+V_i_0'/3]
* Psum in Loop 25: [it(25)=<1,s(22)=< -V_i_0+V_i_0',s(23)=< -V_i_0/3+V_i_0'/3]
* Psum in Loop 26: [it(26)=<1]
* Psum in Loop 27: [it(27)=<1]
* Psum in Loop 28: [it(28)=<1,s(24)=<1/3]
* Psum in Loop 34: [it(34)=<1,s(25)=<1/3]

###### Computing sum for it(24)=<1  in Loop 24 
   - Applying inductive sum strategy 
     - head Candidate: V_size-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_size/3-V_i_0/3-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_size/3-V_limit/3-V_i_0/3-1/3 
       - Loop 23 is collaborative
       - Loop 25 is collaborative
       - Loop 26 is collaborative
       - Loop 27 is collaborative
       - Loop 28 is collaborative
       - Loop 34 is collaborative and bounds [s(25)] 
     - tail Candidate: V_size-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_size/3-V_i_0/3-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_size/3-V_limit/3-V_i_0/3-1/3 
       - Loop 23 is collaborative
       - Loop 25 is collaborative and bounds [s(23)] 
       - Loop 26 is collaborative
       - Loop 27 is collaborative
       - Loop 28 is collaborative and bounds [s(24)] 
       - Loop 34 is collaborative and bounds [s(25)] 
 * Adding constraints: [it(23)+it(24)+it(25)+it(26)+it(27)+it(28)+it(34)=<V_size-V_i_0-1,it(23)+it(24)=<V_size/3-V_i_0/3-1,it(24)+s(25)=<V_size/3-V_limit/3-V_i_0/3-1/3,it(23)+it(24)+it(25)+it(26)+it(27)+it(28)+it(34)=<V_size-V_i_0-V_size'+V_i_0',it(23)+it(24)+s(23)+s(24)+s(25)=<V_size/3-V_i_0/3-V_size'/3+V_i_0'/3,it(24)+s(23)+s(24)+s(25)=<V_size/3-V_limit/3-V_i_0/3-V_size'/3+V_limit'/3+V_i_0'/3] 

##### Pending set eval_xdr3dfcoord_0(V_size,V_limit,B)
* Psum in Loop 24: [s(20)=< -V_i_0+V_i_0',s(21)=< -V_i_0/3+V_i_0'/3]
* Psum in Loop 25: [it(25)=<1,s(22)=< -V_i_0+V_i_0',s(23)=< -V_i_0/3+V_i_0'/3]
* Psum in Loop 26: [it(26)=<1]
* Psum in Loop 27: [it(27)=<1]
* Psum in Loop 28: [it(28)=<1,s(24)=<1/3]
* Psum in Loop 34: [it(34)=<1,s(25)=<1/3]

###### Computing sum for s(20)=< -V_i_0+V_i_0'  in Loop 24 
   - Applying inductive sum strategy 
     - head Candidate: V_size-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_size-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(23)+it(25)+it(26)+it(27)+it(28)+it(34)+s(20)=<V_size-V_i_0-1,it(23)+it(25)+it(26)+it(27)+it(28)+it(34)+s(20)=<V_size-V_i_0-V_size'+V_i_0'] 

##### Pending set eval_xdr3dfcoord_0(V_size,V_limit,B)
* Psum in Loop 24: [s(21)=< -V_i_0/3+V_i_0'/3]
* Psum in Loop 25: [it(25)=<1,s(22)=< -V_i_0+V_i_0',s(23)=< -V_i_0/3+V_i_0'/3]
* Psum in Loop 26: [it(26)=<1]
* Psum in Loop 27: [it(27)=<1]
* Psum in Loop 28: [it(28)=<1,s(24)=<1/3]
* Psum in Loop 34: [it(34)=<1,s(25)=<1/3]

###### Computing sum for s(21)=< -V_i_0/3+V_i_0'/3  in Loop 24 
   - Found a solution using cacheing 
 * Adding constraints: [s(21)=<aux(2)*(1/3),aux(2)+it(23)+it(25)+it(26)+it(27)+it(28)+it(34)=<V_size-V_i_0-1,aux(2)+it(23)+it(25)+it(26)+it(27)+it(28)+it(34)=<V_size-V_i_0-V_size'+V_i_0'] 

##### Pending set eval_xdr3dfcoord_0(V_size,V_limit,B)
* Psum in Loop 25: [it(25)=<1,s(22)=< -V_i_0+V_i_0',s(23)=< -V_i_0/3+V_i_0'/3]
* Psum in Loop 26: [it(26)=<1]
* Psum in Loop 27: [it(27)=<1]
* Psum in Loop 28: [it(28)=<1,s(24)=<1/3]
* Psum in Loop 34: [it(34)=<1,s(25)=<1/3]

###### Computing sum for it(25)=<1  in Loop 25 
   - Applying inductive sum strategy 
     - head Candidate: V_size-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_size/2-V_i_0/2-1 
       - Loop 23 is collaborative
       - Loop 24 is collaborative
       - Loop 26 is collaborative
       - Loop 27 is collaborative
       - Loop 28 is collaborative and bounds [s(24)] 
       - Loop 34 is collaborative and bounds [s(25)] 
     - head Candidate: V_size/2-V_limit/2-V_i_0/2-1/2 
       - Loop 23 is collaborative
       - Loop 24 is collaborative
       - Loop 26 is collaborative
       - Loop 27 is collaborative
       - Loop 28 is collaborative
       - Loop 34 is collaborative and bounds [s(25)] 
     - tail Candidate: V_size-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_size/2-V_i_0/2-1 
       - Loop 23 is collaborative
       - Loop 24 is collaborative
       - Loop 26 is collaborative
       - Loop 27 is collaborative
       - Loop 28 is collaborative and bounds [it(28)] 
       - Loop 34 is collaborative and bounds [it(34)] 
     - tail Candidate: V_size/2-V_limit/2-V_i_0/2-1/2 
       - Loop 23 is collaborative
       - Loop 24 is collaborative
       - Loop 26 is collaborative
       - Loop 27 is collaborative
       - Loop 28 is collaborative and bounds [it(28)] 
       - Loop 34 is collaborative and bounds [it(34)] 
 * Adding constraints: [it(23)+it(24)+it(25)+it(26)+it(27)+it(28)+it(34)=<V_size-V_i_0-1,it(25)+s(24)+s(25)=<V_size/2-V_i_0/2-1,it(25)+s(25)=<V_size/2-V_limit/2-V_i_0/2-1/2,it(23)+it(24)+it(25)+it(26)+it(27)+it(28)+it(34)=<V_size-V_i_0-V_size'+V_i_0',it(25)+it(28)+it(34)=<V_size/2-V_i_0/2-V_size'/2+V_i_0'/2,it(25)+it(28)+it(34)=<V_size/2-V_limit/2-V_i_0/2-V_size'/2+V_limit'/2+V_i_0'/2] 

##### Pending set eval_xdr3dfcoord_0(V_size,V_limit,B)
* Psum in Loop 25: [s(22)=< -V_i_0+V_i_0',s(23)=< -V_i_0/3+V_i_0'/3]
* Psum in Loop 26: [it(26)=<1]
* Psum in Loop 27: [it(27)=<1]
* Psum in Loop 28: [it(28)=<1,s(24)=<1/3]
* Psum in Loop 34: [it(34)=<1,s(25)=<1/3]

###### Computing sum for s(22)=< -V_i_0+V_i_0'  in Loop 25 
   - Applying inductive sum strategy 
     - head Candidate: V_size-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_size-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(23)+it(24)+it(26)+it(27)+it(28)+it(34)+s(22)=<V_size-V_i_0-1,it(23)+it(24)+it(26)+it(27)+it(28)+it(34)+s(22)=<V_size-V_i_0-V_size'+V_i_0'] 

##### Pending set eval_xdr3dfcoord_0(V_size,V_limit,B)
* Psum in Loop 25: [s(23)=< -V_i_0/3+V_i_0'/3]
* Psum in Loop 26: [it(26)=<1]
* Psum in Loop 27: [it(27)=<1]
* Psum in Loop 28: [it(28)=<1,s(24)=<1/3]
* Psum in Loop 34: [it(34)=<1,s(25)=<1/3]

###### Computing sum for s(23)=< -V_i_0/3+V_i_0'/3  in Loop 25 
   - Found a solution using cacheing 
 * Adding constraints: [s(23)=<aux(3)*(1/3),aux(3)+it(23)+it(24)+it(26)+it(27)+it(28)+it(34)=<V_size-V_i_0-1,aux(3)+it(23)+it(24)+it(26)+it(27)+it(28)+it(34)=<V_size-V_i_0-V_size'+V_i_0'] 

##### Pending set eval_xdr3dfcoord_0(V_size,V_limit,B)
* Psum in Loop 26: [it(26)=<1]
* Psum in Loop 27: [it(27)=<1]
* Psum in Loop 28: [it(28)=<1,s(24)=<1/3]
* Psum in Loop 34: [it(34)=<1,s(25)=<1/3]

###### Computing sum for it(26)=<1  in Loop 26 
   - Applying inductive sum strategy 
     - head Candidate: V_size-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_size-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_size-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_size-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(23)+it(24)+it(25)+it(26)+it(27)+it(28)+it(34)=<V_size-V_i_0-1,it(23)+it(24)+it(25)+it(26)+it(27)+it(28)+it(34)=<V_size-V_i_0-1,it(23)+it(24)+it(25)+it(26)+it(27)+it(28)+it(34)=<V_size-V_i_0-V_size'+V_i_0',it(23)+it(24)+it(25)+it(26)+it(27)+it(28)+it(34)=<V_size-V_i_0-V_size'+V_i_0'] 

##### Pending set eval_xdr3dfcoord_0(V_size,V_limit,B)
* Psum in Loop 27: [it(27)=<1]
* Psum in Loop 28: [it(28)=<1,s(24)=<1/3]
* Psum in Loop 34: [it(34)=<1,s(25)=<1/3]

###### Computing sum for it(27)=<1  in Loop 27 
   - Applying inductive sum strategy 
     - head Candidate: V_size-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_size-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_size-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_size-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(23)+it(24)+it(25)+it(26)+it(27)+it(28)+it(34)=<V_size-V_i_0-1,it(23)+it(24)+it(25)+it(26)+it(27)+it(28)+it(34)=<V_size-V_i_0-1,it(23)+it(24)+it(25)+it(26)+it(27)+it(28)+it(34)=<V_size-V_i_0-V_size'+V_i_0',it(23)+it(24)+it(25)+it(26)+it(27)+it(28)+it(34)=<V_size-V_i_0-V_size'+V_i_0'] 

##### Pending set eval_xdr3dfcoord_0(V_size,V_limit,B)
* Psum in Loop 28: [it(28)=<1,s(24)=<1/3]
* Psum in Loop 34: [it(34)=<1,s(25)=<1/3]

###### Computing sum for it(28)=<1  in Loop 28 
   - Applying inductive sum strategy 
     - head Candidate: V_size-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_size/2-V_i_0/2-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_size-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_size/2-V_i_0/2-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(23)+it(24)+it(25)+it(26)+it(27)+it(28)+it(34)=<V_size-V_i_0-1,it(25)+it(28)+s(25)=<V_size/2-V_i_0/2-1,it(23)+it(24)+it(25)+it(26)+it(27)+it(28)+it(34)=<V_size-V_i_0-V_size'+V_i_0',it(25)+it(28)+it(34)=<V_size/2-V_i_0/2-V_size'/2+V_i_0'/2] 

##### Pending set eval_xdr3dfcoord_0(V_size,V_limit,B)
* Psum in Loop 28: [s(24)=<1/3]
* Psum in Loop 34: [it(34)=<1,s(25)=<1/3]

###### Computing sum for s(24)=<1/3  in Loop 28 
   - Found a solution using cacheing 
 * Adding constraints: [s(24)=<aux(4)*(1/3),aux(4)+it(23)+it(24)+it(25)+it(26)+it(27)+it(34)=<V_size-V_i_0-1,aux(4)+it(25)+s(25)=<V_size/2-V_i_0/2-1,aux(4)+it(23)+it(24)+it(25)+it(26)+it(27)+it(34)=<V_size-V_i_0-V_size'+V_i_0',aux(4)+it(25)+it(34)=<V_size/2-V_i_0/2-V_size'/2+V_i_0'/2] 

##### Pending set eval_xdr3dfcoord_0(V_size,V_limit,B)
* Psum in Loop 34: [it(34)=<1,s(25)=<1/3]

###### Computing sum for it(34)=<1  in Loop 34 
   - Applying inductive sum strategy 
     - head Candidate: V_size-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_size/2-V_i_0/2-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_size-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_size/2-V_i_0/2-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(23)+it(24)+it(25)+it(26)+it(27)+it(28)+it(34)=<V_size-V_i_0-1,it(25)+it(34)+s(24)=<V_size/2-V_i_0/2-1,it(23)+it(24)+it(25)+it(26)+it(27)+it(28)+it(34)=<V_size-V_i_0-V_size'+V_i_0',it(25)+it(28)+it(34)=<V_size/2-V_i_0/2-V_size'/2+V_i_0'/2] 

##### Pending set eval_xdr3dfcoord_0(V_size,V_limit,B)
* Psum in Loop 34: [s(25)=<1/3]

###### Computing sum for s(25)=<1/3  in Loop 34 
   - Found a solution using cacheing 
 * Adding constraints: [s(25)=<aux(5)*(1/3),aux(5)+it(23)+it(24)+it(25)+it(26)+it(27)+it(28)=<V_size-V_i_0-1,aux(5)+it(25)+s(24)=<V_size/2-V_i_0/2-1,aux(5)+it(23)+it(24)+it(25)+it(26)+it(27)+it(28)=<V_size-V_i_0-V_size'+V_i_0',aux(5)+it(25)+it(28)=<V_size/2-V_i_0/2-V_size'/2+V_i_0'/2] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [23,24,25,26,27,28,34] 

#### Simplifying cost structure of phase [23,24,25,26,27,28,34] 
 * Joined equivalent variables [it(26),it(27),s(18),s(20),s(22)] into it(26)
 * Joined equivalent variables [it(28),it(34)] into it(28)
 * Joined equivalent variables [aux(1),aux(2),aux(3)] into aux(1)
 * Joined equivalent variables [aux(4),aux(5)] into aux(4)
 * Joined equivalent variables [s(19),s(21)] into s(19)

#### Cost of phase [23,24,25,26,27,28,34]:eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) -> [eval_xdr3dfcoord_bb1_in(V_size',V_limit',V_i_0',B')] 
4*it(23)+4*it(24)+3*it(25)+9*it(26)+8*it(28)+2*s(19)+1*s(23)+1*s(24)+1*s(25)+0
  Such that:aux(6) =< V_size-V_i_0
aux(7) =< V_size-V_i_0-V_size'+V_i_0'
aux(8) =< V_size/2-V_limit/2-V_i_0/2
aux(9) =< V_size/2-V_limit/2-V_i_0/2-V_size'/2+V_limit'/2+V_i_0'/2
aux(10) =< V_size/2-V_i_0/2
aux(11) =< V_size/2-V_i_0/2-V_size'/2+V_i_0'/2
aux(12) =< V_size/3-V_limit/3-V_i_0/3
aux(13) =< V_size/3-V_limit/3-V_i_0/3-V_size'/3+V_limit'/3+V_i_0'/3
aux(14) =< V_size/3-V_i_0/3
aux(15) =< V_size/3-V_i_0/3-V_size'/3+V_i_0'/3
aux(1) =< aux(6)
aux(4) =< aux(6)
it(23) =< aux(6)
it(24) =< aux(6)
it(25) =< aux(6)
it(26) =< aux(6)
it(28) =< aux(6)
aux(1) =< aux(7)
aux(4) =< aux(7)
it(23) =< aux(7)
it(24) =< aux(7)
it(25) =< aux(7)
it(26) =< aux(7)
it(28) =< aux(7)
it(25) =< aux(8)
s(25) =< aux(8)
it(25) =< aux(9)
it(28) =< aux(9)
aux(4) =< aux(10)
it(25) =< aux(10)
it(28) =< aux(10)
s(24) =< aux(10)
s(25) =< aux(10)
aux(4) =< aux(11)
it(25) =< aux(11)
it(28) =< aux(11)
it(24) =< aux(12)
s(25) =< aux(12)
it(24) =< aux(13)
s(23) =< aux(13)
s(24) =< aux(13)
s(25) =< aux(13)
it(23) =< aux(14)
it(24) =< aux(14)
it(23) =< aux(15)
it(24) =< aux(15)
s(23) =< aux(15)
s(24) =< aux(15)
s(25) =< aux(15)
s(25) =< aux(4)*(1/3)
s(24) =< aux(4)*(1/3)
s(23) =< aux(1)*(1/3)
s(19) =< aux(1)*(1/3)

#### Simplifying cost structure of chain [[23,24,25,26,27,28,34],35,36] 
 * Joined equivalent variables [aux(16),aux(6),aux(7)] into aux(16)
 * Joined equivalent variables [aux(17),aux(8),aux(9),aux(10),aux(11)] into aux(17)
 * Joined equivalent variables [aux(18),aux(12),aux(13),aux(14),aux(15)] into aux(18)
 * Joined equivalent variables [aux(16),aux(1)] into aux(16)
 * Joined equivalent variables [s(24),s(25)] into s(24)
 * Joined equivalent variables [it(25),it(28)] into it(25)
 * Joined equivalent variables [it(23),it(24)] into it(23)

#### Simplifying cost structure of CE 37 

#### Simplifying cost structure of chain [33,36] 

#### Found solution for phase  [23,24,25,26,27,28,34] in the cache 

#### Cost of phase [23,24,25,26,27,28,34]:eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) -> [eval_xdr3dfcoord_bb1_in(V_size',V_limit',V_i_0',B')] 
4*it(23)+4*it(24)+3*it(25)+9*it(26)+8*it(28)+2*s(19)+1*s(23)+1*s(24)+1*s(25)+0
  Such that:aux(6) =< V_size-V_i_0
aux(7) =< V_size-V_i_0-V_size'+V_i_0'
aux(8) =< V_size/2-V_limit/2-V_i_0/2
aux(9) =< V_size/2-V_limit/2-V_i_0/2-V_size'/2+V_limit'/2+V_i_0'/2
aux(10) =< V_size/2-V_i_0/2
aux(11) =< V_size/2-V_i_0/2-V_size'/2+V_i_0'/2
aux(12) =< V_size/3-V_limit/3-V_i_0/3
aux(13) =< V_size/3-V_limit/3-V_i_0/3-V_size'/3+V_limit'/3+V_i_0'/3
aux(14) =< V_size/3-V_i_0/3
aux(15) =< V_size/3-V_i_0/3-V_size'/3+V_i_0'/3
aux(1) =< aux(6)
aux(4) =< aux(6)
it(23) =< aux(6)
it(24) =< aux(6)
it(25) =< aux(6)
it(26) =< aux(6)
it(28) =< aux(6)
aux(1) =< aux(7)
aux(4) =< aux(7)
it(23) =< aux(7)
it(24) =< aux(7)
it(25) =< aux(7)
it(26) =< aux(7)
it(28) =< aux(7)
it(25) =< aux(8)
s(25) =< aux(8)
it(25) =< aux(9)
it(28) =< aux(9)
aux(4) =< aux(10)
it(25) =< aux(10)
it(28) =< aux(10)
s(24) =< aux(10)
s(25) =< aux(10)
aux(4) =< aux(11)
it(25) =< aux(11)
it(28) =< aux(11)
it(24) =< aux(12)
s(25) =< aux(12)
it(24) =< aux(13)
s(23) =< aux(13)
s(24) =< aux(13)
s(25) =< aux(13)
it(23) =< aux(14)
it(24) =< aux(14)
it(23) =< aux(15)
it(24) =< aux(15)
s(23) =< aux(15)
s(24) =< aux(15)
s(25) =< aux(15)
s(25) =< aux(4)*(1/3)
s(24) =< aux(4)*(1/3)
s(23) =< aux(1)*(1/3)
s(19) =< aux(1)*(1/3)

#### Simplifying cost structure of chain [[23,24,25,26,27,28,34],33,36] 
 * Joined equivalent variables [aux(19),aux(6),aux(7)] into aux(19)
 * Joined equivalent variables [aux(20),aux(9),aux(10),aux(11)] into aux(20)
 * Joined equivalent variables [aux(21),aux(13),aux(14),aux(15)] into aux(21)
 * Joined equivalent variables [aux(19),aux(1)] into aux(19)

#### Simplifying cost structure of CE 38 

#### Simplifying cost structure of chain [32,36] 

#### Found solution for phase  [23,24,25,26,27,28,34] in the cache 

#### Cost of phase [23,24,25,26,27,28,34]:eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) -> [eval_xdr3dfcoord_bb1_in(V_size',V_limit',V_i_0',B')] 
4*it(23)+4*it(24)+3*it(25)+9*it(26)+8*it(28)+2*s(19)+1*s(23)+1*s(24)+1*s(25)+0
  Such that:aux(6) =< V_size-V_i_0
aux(7) =< V_size-V_i_0-V_size'+V_i_0'
aux(8) =< V_size/2-V_limit/2-V_i_0/2
aux(9) =< V_size/2-V_limit/2-V_i_0/2-V_size'/2+V_limit'/2+V_i_0'/2
aux(10) =< V_size/2-V_i_0/2
aux(11) =< V_size/2-V_i_0/2-V_size'/2+V_i_0'/2
aux(12) =< V_size/3-V_limit/3-V_i_0/3
aux(13) =< V_size/3-V_limit/3-V_i_0/3-V_size'/3+V_limit'/3+V_i_0'/3
aux(14) =< V_size/3-V_i_0/3
aux(15) =< V_size/3-V_i_0/3-V_size'/3+V_i_0'/3
aux(1) =< aux(6)
aux(4) =< aux(6)
it(23) =< aux(6)
it(24) =< aux(6)
it(25) =< aux(6)
it(26) =< aux(6)
it(28) =< aux(6)
aux(1) =< aux(7)
aux(4) =< aux(7)
it(23) =< aux(7)
it(24) =< aux(7)
it(25) =< aux(7)
it(26) =< aux(7)
it(28) =< aux(7)
it(25) =< aux(8)
s(25) =< aux(8)
it(25) =< aux(9)
it(28) =< aux(9)
aux(4) =< aux(10)
it(25) =< aux(10)
it(28) =< aux(10)
s(24) =< aux(10)
s(25) =< aux(10)
aux(4) =< aux(11)
it(25) =< aux(11)
it(28) =< aux(11)
it(24) =< aux(12)
s(25) =< aux(12)
it(24) =< aux(13)
s(23) =< aux(13)
s(24) =< aux(13)
s(25) =< aux(13)
it(23) =< aux(14)
it(24) =< aux(14)
it(23) =< aux(15)
it(24) =< aux(15)
s(23) =< aux(15)
s(24) =< aux(15)
s(25) =< aux(15)
s(25) =< aux(4)*(1/3)
s(24) =< aux(4)*(1/3)
s(23) =< aux(1)*(1/3)
s(19) =< aux(1)*(1/3)

#### Simplifying cost structure of chain [[23,24,25,26,27,28,34],32,36] 
 * Joined equivalent variables [aux(22),aux(6),aux(7)] into aux(22)
 * Joined equivalent variables [aux(23),aux(9),aux(10),aux(11)] into aux(23)
 * Joined equivalent variables [aux(24),aux(13),aux(14),aux(15)] into aux(24)
 * Joined equivalent variables [aux(22),aux(1)] into aux(22)
 * Renamed intermediate variables: 
[(eq(27,2),it(21))>>s(26)]

#### Simplifying cost structure of CE 27 

#### Simplifying cost structure of chain [31,36] 

#### Found solution for phase  [23,24,25,26,27,28,34] in the cache 

#### Cost of phase [23,24,25,26,27,28,34]:eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) -> [eval_xdr3dfcoord_bb1_in(V_size',V_limit',V_i_0',B')] 
4*it(23)+4*it(24)+3*it(25)+9*it(26)+8*it(28)+2*s(19)+1*s(23)+1*s(24)+1*s(25)+0
  Such that:aux(6) =< V_size-V_i_0
aux(7) =< V_size-V_i_0-V_size'+V_i_0'
aux(8) =< V_size/2-V_limit/2-V_i_0/2
aux(9) =< V_size/2-V_limit/2-V_i_0/2-V_size'/2+V_limit'/2+V_i_0'/2
aux(10) =< V_size/2-V_i_0/2
aux(11) =< V_size/2-V_i_0/2-V_size'/2+V_i_0'/2
aux(12) =< V_size/3-V_limit/3-V_i_0/3
aux(13) =< V_size/3-V_limit/3-V_i_0/3-V_size'/3+V_limit'/3+V_i_0'/3
aux(14) =< V_size/3-V_i_0/3
aux(15) =< V_size/3-V_i_0/3-V_size'/3+V_i_0'/3
aux(1) =< aux(6)
aux(4) =< aux(6)
it(23) =< aux(6)
it(24) =< aux(6)
it(25) =< aux(6)
it(26) =< aux(6)
it(28) =< aux(6)
aux(1) =< aux(7)
aux(4) =< aux(7)
it(23) =< aux(7)
it(24) =< aux(7)
it(25) =< aux(7)
it(26) =< aux(7)
it(28) =< aux(7)
it(25) =< aux(8)
s(25) =< aux(8)
it(25) =< aux(9)
it(28) =< aux(9)
aux(4) =< aux(10)
it(25) =< aux(10)
it(28) =< aux(10)
s(24) =< aux(10)
s(25) =< aux(10)
aux(4) =< aux(11)
it(25) =< aux(11)
it(28) =< aux(11)
it(24) =< aux(12)
s(25) =< aux(12)
it(24) =< aux(13)
s(23) =< aux(13)
s(24) =< aux(13)
s(25) =< aux(13)
it(23) =< aux(14)
it(24) =< aux(14)
it(23) =< aux(15)
it(24) =< aux(15)
s(23) =< aux(15)
s(24) =< aux(15)
s(25) =< aux(15)
s(25) =< aux(4)*(1/3)
s(24) =< aux(4)*(1/3)
s(23) =< aux(1)*(1/3)
s(19) =< aux(1)*(1/3)

#### Simplifying cost structure of chain [[23,24,25,26,27,28,34],31,36] 
 * Joined equivalent variables [aux(25),aux(6),aux(7)] into aux(25)
 * Joined equivalent variables [aux(26),aux(9),aux(10),aux(11)] into aux(26)
 * Joined equivalent variables [aux(27),aux(13),aux(14),aux(15)] into aux(27)
 * Joined equivalent variables [aux(25),aux(1)] into aux(25)
 * Renamed intermediate variables: 
[(eq(32,1),it(16))>>s(27)]
 * Renamed intermediate variables: 
[(eq(32,2),it(21))>>s(28)]

#### Simplifying cost structure of CE 32 

#### Simplifying cost structure of chain [30,36] 

#### Found solution for phase  [23,24,25,26,27,28,34] in the cache 

#### Cost of phase [23,24,25,26,27,28,34]:eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) -> [eval_xdr3dfcoord_bb1_in(V_size',V_limit',V_i_0',B')] 
4*it(23)+4*it(24)+3*it(25)+9*it(26)+8*it(28)+2*s(19)+1*s(23)+1*s(24)+1*s(25)+0
  Such that:aux(6) =< V_size-V_i_0
aux(7) =< V_size-V_i_0-V_size'+V_i_0'
aux(8) =< V_size/2-V_limit/2-V_i_0/2
aux(9) =< V_size/2-V_limit/2-V_i_0/2-V_size'/2+V_limit'/2+V_i_0'/2
aux(10) =< V_size/2-V_i_0/2
aux(11) =< V_size/2-V_i_0/2-V_size'/2+V_i_0'/2
aux(12) =< V_size/3-V_limit/3-V_i_0/3
aux(13) =< V_size/3-V_limit/3-V_i_0/3-V_size'/3+V_limit'/3+V_i_0'/3
aux(14) =< V_size/3-V_i_0/3
aux(15) =< V_size/3-V_i_0/3-V_size'/3+V_i_0'/3
aux(1) =< aux(6)
aux(4) =< aux(6)
it(23) =< aux(6)
it(24) =< aux(6)
it(25) =< aux(6)
it(26) =< aux(6)
it(28) =< aux(6)
aux(1) =< aux(7)
aux(4) =< aux(7)
it(23) =< aux(7)
it(24) =< aux(7)
it(25) =< aux(7)
it(26) =< aux(7)
it(28) =< aux(7)
it(25) =< aux(8)
s(25) =< aux(8)
it(25) =< aux(9)
it(28) =< aux(9)
aux(4) =< aux(10)
it(25) =< aux(10)
it(28) =< aux(10)
s(24) =< aux(10)
s(25) =< aux(10)
aux(4) =< aux(11)
it(25) =< aux(11)
it(28) =< aux(11)
it(24) =< aux(12)
s(25) =< aux(12)
it(24) =< aux(13)
s(23) =< aux(13)
s(24) =< aux(13)
s(25) =< aux(13)
it(23) =< aux(14)
it(24) =< aux(14)
it(23) =< aux(15)
it(24) =< aux(15)
s(23) =< aux(15)
s(24) =< aux(15)
s(25) =< aux(15)
s(25) =< aux(4)*(1/3)
s(24) =< aux(4)*(1/3)
s(23) =< aux(1)*(1/3)
s(19) =< aux(1)*(1/3)

#### Simplifying cost structure of chain [[23,24,25,26,27,28,34],30,36] 
 * Joined equivalent variables [aux(28),aux(8),aux(9),aux(11)] into aux(28)
 * Joined equivalent variables [aux(29),aux(12),aux(13),aux(15)] into aux(29)
 * Joined equivalent variables [it(25),it(28)] into it(25)
 * Joined equivalent variables [it(23),it(24)] into it(23)
 * Renamed intermediate variables: 
[(eq(30,1),it(16))>>s(29)]
 * Renamed intermediate variables: 
[(eq(30,2),it(21))>>s(30)]

#### Simplifying cost structure of CE 30 

#### Simplifying cost structure of chain [29,36] 

#### Found solution for phase  [23,24,25,26,27,28,34] in the cache 

#### Cost of phase [23,24,25,26,27,28,34]:eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) -> [eval_xdr3dfcoord_bb1_in(V_size',V_limit',V_i_0',B')] 
4*it(23)+4*it(24)+3*it(25)+9*it(26)+8*it(28)+2*s(19)+1*s(23)+1*s(24)+1*s(25)+0
  Such that:aux(6) =< V_size-V_i_0
aux(7) =< V_size-V_i_0-V_size'+V_i_0'
aux(8) =< V_size/2-V_limit/2-V_i_0/2
aux(9) =< V_size/2-V_limit/2-V_i_0/2-V_size'/2+V_limit'/2+V_i_0'/2
aux(10) =< V_size/2-V_i_0/2
aux(11) =< V_size/2-V_i_0/2-V_size'/2+V_i_0'/2
aux(12) =< V_size/3-V_limit/3-V_i_0/3
aux(13) =< V_size/3-V_limit/3-V_i_0/3-V_size'/3+V_limit'/3+V_i_0'/3
aux(14) =< V_size/3-V_i_0/3
aux(15) =< V_size/3-V_i_0/3-V_size'/3+V_i_0'/3
aux(1) =< aux(6)
aux(4) =< aux(6)
it(23) =< aux(6)
it(24) =< aux(6)
it(25) =< aux(6)
it(26) =< aux(6)
it(28) =< aux(6)
aux(1) =< aux(7)
aux(4) =< aux(7)
it(23) =< aux(7)
it(24) =< aux(7)
it(25) =< aux(7)
it(26) =< aux(7)
it(28) =< aux(7)
it(25) =< aux(8)
s(25) =< aux(8)
it(25) =< aux(9)
it(28) =< aux(9)
aux(4) =< aux(10)
it(25) =< aux(10)
it(28) =< aux(10)
s(24) =< aux(10)
s(25) =< aux(10)
aux(4) =< aux(11)
it(25) =< aux(11)
it(28) =< aux(11)
it(24) =< aux(12)
s(25) =< aux(12)
it(24) =< aux(13)
s(23) =< aux(13)
s(24) =< aux(13)
s(25) =< aux(13)
it(23) =< aux(14)
it(24) =< aux(14)
it(23) =< aux(15)
it(24) =< aux(15)
s(23) =< aux(15)
s(24) =< aux(15)
s(25) =< aux(15)
s(25) =< aux(4)*(1/3)
s(24) =< aux(4)*(1/3)
s(23) =< aux(1)*(1/3)
s(19) =< aux(1)*(1/3)

#### Simplifying cost structure of chain [[23,24,25,26,27,28,34],29,36] 
 * Joined equivalent variables [aux(30),aux(6),aux(7),aux(9),aux(11)] into aux(30)
 * Joined equivalent variables [aux(31),aux(14)] into aux(31)
 * Joined equivalent variables [aux(13),aux(15)] into aux(13)
 * Joined equivalent variables [aux(30),aux(1)] into aux(30)
 * Joined equivalent variables [it(26),s(29)] into it(26)

#### Cost of chains of eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B):
* Chain [[23,24,25,26,27,28,34],35,36]: 8*it(23)+11*it(25)+9*it(26)+1*s(1)+2*s(19)+1*s(23)+2*s(24)+4
  Such that:s(1) =< 1/3
aux(16) =< V_size-V_i_0
aux(17) =< V_size/2-V_i_0/2
aux(18) =< V_size/3-V_i_0/3
aux(4) =< aux(16)
it(23) =< aux(16)
it(25) =< aux(16)
it(26) =< aux(16)
it(25) =< aux(17)
s(24) =< aux(17)
aux(4) =< aux(17)
it(23) =< aux(18)
s(24) =< aux(18)
s(23) =< aux(18)
s(24) =< aux(4)*(1/3)
s(23) =< aux(16)*(1/3)
s(19) =< aux(16)*(1/3)

  with precondition: [V_limit=1,B=4,V_i_0>=0,V_size>=V_i_0+3] 

* Chain [[23,24,25,26,27,28,34],33,36]: 4*it(23)+4*it(24)+3*it(25)+9*it(26)+8*it(28)+2*s(19)+1*s(23)+1*s(24)+1*s(25)+3
  Such that:aux(8) =< V_size/2-V_limit/2-V_i_0/2
aux(12) =< V_size/3-V_limit/3-V_i_0/3
aux(19) =< V_size-V_i_0
aux(20) =< V_size/2-V_i_0/2
aux(21) =< V_size/3-V_i_0/3
aux(4) =< aux(19)
it(23) =< aux(19)
it(24) =< aux(19)
it(25) =< aux(19)
it(26) =< aux(19)
it(28) =< aux(19)
it(25) =< aux(8)
s(25) =< aux(8)
it(25) =< aux(20)
it(28) =< aux(20)
aux(4) =< aux(20)
s(24) =< aux(20)
s(25) =< aux(20)
it(24) =< aux(12)
s(25) =< aux(12)
it(24) =< aux(21)
s(23) =< aux(21)
s(24) =< aux(21)
s(25) =< aux(21)
it(23) =< aux(21)
s(25) =< aux(4)*(1/3)
s(24) =< aux(4)*(1/3)
s(23) =< aux(19)*(1/3)
s(19) =< aux(19)*(1/3)

  with precondition: [B=4,V_i_0>=0,V_size>=V_i_0+2] 

* Chain [[23,24,25,26,27,28,34],32,36]: 4*it(23)+4*it(24)+3*it(25)+9*it(26)+8*it(28)+2*s(19)+1*s(23)+1*s(24)+1*s(25)+3
  Such that:aux(8) =< V_size/2-V_limit/2-V_i_0/2
aux(12) =< V_size/3-V_limit/3-V_i_0/3
aux(22) =< V_size-V_i_0
aux(23) =< V_size/2-V_i_0/2
aux(24) =< V_size/3-V_i_0/3
aux(4) =< aux(22)
it(23) =< aux(22)
it(24) =< aux(22)
it(25) =< aux(22)
it(26) =< aux(22)
it(28) =< aux(22)
it(25) =< aux(8)
s(25) =< aux(8)
it(25) =< aux(23)
it(28) =< aux(23)
aux(4) =< aux(23)
s(24) =< aux(23)
s(25) =< aux(23)
it(24) =< aux(12)
s(25) =< aux(12)
it(24) =< aux(24)
s(23) =< aux(24)
s(24) =< aux(24)
s(25) =< aux(24)
it(23) =< aux(24)
s(25) =< aux(4)*(1/3)
s(24) =< aux(4)*(1/3)
s(23) =< aux(22)*(1/3)
s(19) =< aux(22)*(1/3)

  with precondition: [B=4,0>=V_limit,V_i_0>=0,V_size>=V_i_0+2] 

* Chain [[23,24,25,26,27,28,34],31,36]: 4*it(23)+4*it(24)+3*it(25)+9*it(26)+8*it(28)+2*s(19)+1*s(23)+1*s(24)+1*s(25)+1*s(26)+4
  Such that:s(26) =< 1/3
aux(8) =< V_size/2-V_limit/2-V_i_0/2
aux(12) =< V_size/3-V_limit/3-V_i_0/3
aux(25) =< V_size-V_i_0
aux(26) =< V_size/2-V_i_0/2
aux(27) =< V_size/3-V_i_0/3
aux(4) =< aux(25)
it(23) =< aux(25)
it(24) =< aux(25)
it(25) =< aux(25)
it(26) =< aux(25)
it(28) =< aux(25)
it(25) =< aux(8)
s(25) =< aux(8)
it(25) =< aux(26)
it(28) =< aux(26)
aux(4) =< aux(26)
s(24) =< aux(26)
s(25) =< aux(26)
it(24) =< aux(12)
s(25) =< aux(12)
it(24) =< aux(27)
s(23) =< aux(27)
s(24) =< aux(27)
s(25) =< aux(27)
it(23) =< aux(27)
s(25) =< aux(4)*(1/3)
s(24) =< aux(4)*(1/3)
s(23) =< aux(25)*(1/3)
s(19) =< aux(25)*(1/3)

  with precondition: [B=4,V_limit>=1,V_i_0>=0,V_size>=V_i_0+3] 

* Chain [[23,24,25,26,27,28,34],30,36]: 8*it(23)+11*it(25)+9*it(26)+2*s(19)+1*s(23)+1*s(24)+1*s(25)+1*s(27)+1*s(28)+4
  Such that:aux(7) =< V_size-V_limit-V_i_0
aux(6) =< V_size-V_i_0
aux(10) =< V_size/2-V_i_0/2
aux(14) =< V_size/3-V_i_0/3
s(27) =< V_limit
s(28) =< V_limit/3
aux(28) =< V_size/2-V_limit/2-V_i_0/2
aux(29) =< V_size/3-V_limit/3-V_i_0/3
aux(1) =< aux(6)
aux(4) =< aux(6)
it(23) =< aux(6)
it(25) =< aux(6)
it(26) =< aux(6)
aux(1) =< aux(7)
aux(4) =< aux(7)
it(23) =< aux(7)
it(25) =< aux(7)
it(26) =< aux(7)
it(25) =< aux(28)
s(25) =< aux(28)
aux(4) =< aux(10)
it(25) =< aux(10)
s(24) =< aux(10)
s(25) =< aux(10)
aux(4) =< aux(28)
it(23) =< aux(29)
s(25) =< aux(29)
s(23) =< aux(29)
s(24) =< aux(29)
it(23) =< aux(14)
s(25) =< aux(4)*(1/3)
s(24) =< aux(4)*(1/3)
s(23) =< aux(1)*(1/3)
s(19) =< aux(1)*(1/3)

  with precondition: [B=4,V_limit>=2,V_i_0>=0,V_size>=V_i_0+V_limit+2] 

* Chain [[23,24,25,26,27,28,34],29,36]: 4*it(23)+4*it(24)+3*it(25)+10*it(26)+8*it(28)+2*s(19)+1*s(23)+1*s(24)+1*s(25)+1*s(30)+4
  Such that:aux(8) =< V_size/2-V_limit/2-V_i_0/2
aux(10) =< V_size/2-V_i_0/2
aux(12) =< V_size/3-V_limit/3-V_i_0/3
aux(30) =< V_size-V_i_0
aux(31) =< V_size/3-V_i_0/3
aux(13) =< aux(30)
it(26) =< aux(30)
s(30) =< aux(30)
aux(13) =< aux(31)
s(30) =< aux(31)
aux(4) =< aux(30)
it(23) =< aux(30)
it(24) =< aux(30)
it(25) =< aux(30)
it(28) =< aux(30)
it(25) =< aux(8)
s(25) =< aux(8)
aux(4) =< aux(10)
it(25) =< aux(10)
it(28) =< aux(10)
s(24) =< aux(10)
s(25) =< aux(10)
it(24) =< aux(12)
s(25) =< aux(12)
it(24) =< aux(13)
s(23) =< aux(13)
s(24) =< aux(13)
s(25) =< aux(13)
it(23) =< aux(31)
it(24) =< aux(31)
it(23) =< aux(13)
s(25) =< aux(4)*(1/3)
s(24) =< aux(4)*(1/3)
s(23) =< aux(30)*(1/3)
s(19) =< aux(30)*(1/3)

  with precondition: [B=4,V_limit>=2,V_i_0>=0,V_size>=V_i_0+4] 

* Chain [36]: 0
  with precondition: [B=4,V_i_0>=0,V_i_0>=V_size] 

* Chain [35,36]: 1*s(1)+4
  Such that:s(1) =< 1/3

  with precondition: [V_limit=1,B=4,V_i_0+2=V_size,V_i_0>=0] 

* Chain [33,36]: 3
  with precondition: [B=4,V_i_0+1=V_size,V_i_0>=0] 

* Chain [32,36]: 3
  with precondition: [B=4,V_i_0+1=V_size,0>=V_limit,V_i_0>=0] 

* Chain [31,36]: 1*s(26)+4
  Such that:s(26) =< 1/3

  with precondition: [B=4,V_i_0+2=V_size,V_limit>=1,V_i_0>=0] 

* Chain [30,36]: 1*s(27)+1*s(28)+4
  Such that:s(27) =< V_limit
s(28) =< V_limit/3

  with precondition: [B=4,V_i_0+V_limit+1=V_size,V_limit>=2,V_i_0>=0] 

* Chain [29,36]: 1*s(29)+1*s(30)+4
  Such that:s(29) =< V_size-V_i_0
s(30) =< V_size/3-V_i_0/3

  with precondition: [B=4,V_i_0>=0,V_size>=V_i_0+3,V_i_0+V_limit+1>=V_size] 


#### Simplifying cost structure of CE 43 

#### Simplifying cost structure of CE 42 
 * Renamed intermediate variables: 
[(eq(39,1),s(1))>>s(31)]

#### Simplifying cost structure of CE 39 
 * Renamed intermediate variables: 
[(eq(41,1),s(26))>>s(32)]

#### Simplifying cost structure of CE 41 
 * Renamed intermediate variables: 
[(eq(40,1),s(1))>>s(33),(eq(40,1),aux(16))>>s(34),(eq(40,1),aux(17))>>s(35),(eq(40,1),aux(18))>>s(36),(eq(40,1),aux(4))>>s(37),(eq(40,1),it(23))>>s(38),(eq(40,1),it(25))>>s(39),(eq(40,1),it(26))>>s(40),(eq(40,1),s(24))>>s(41),(eq(40,1),s(23))>>s(42),(eq(40,1),s(19))>>s(43)]

#### Simplifying cost structure of CE 40 
 * Renamed intermediate variables: 
[(eq(44,1),s(27))>>s(44),(eq(44,1),s(28))>>s(45)]

#### Simplifying cost structure of CE 44 

#### Simplifying cost structure of CE 49 
 * Renamed intermediate variables: 
[(eq(45,1),aux(8))>>s(46),(eq(45,1),aux(12))>>s(47),(eq(45,1),aux(22))>>s(48),(eq(45,1),aux(23))>>s(49),(eq(45,1),aux(24))>>s(50),(eq(45,1),aux(4))>>s(51),(eq(45,1),it(23))>>s(52),(eq(45,1),it(24))>>s(53),(eq(45,1),it(25))>>s(54),(eq(45,1),it(26))>>s(55),(eq(45,1),it(28))>>s(56),(eq(45,1),s(25))>>s(57),(eq(45,1),s(24))>>s(58),(eq(45,1),s(23))>>s(59),(eq(45,1),s(19))>>s(60)]

#### Simplifying cost structure of CE 45 
 * Renamed intermediate variables: 
[(eq(50,1),aux(8))>>s(61),(eq(50,1),aux(12))>>s(62),(eq(50,1),aux(19))>>s(63),(eq(50,1),aux(20))>>s(64),(eq(50,1),aux(21))>>s(65),(eq(50,1),aux(4))>>s(66),(eq(50,1),it(23))>>s(67),(eq(50,1),it(24))>>s(68),(eq(50,1),it(25))>>s(69),(eq(50,1),it(26))>>s(70),(eq(50,1),it(28))>>s(71),(eq(50,1),s(25))>>s(72),(eq(50,1),s(24))>>s(73),(eq(50,1),s(23))>>s(74),(eq(50,1),s(19))>>s(75)]

#### Simplifying cost structure of CE 50 
 * Renamed intermediate variables: 
[(eq(46,1),s(26))>>s(76),(eq(46,1),aux(8))>>s(77),(eq(46,1),aux(12))>>s(78),(eq(46,1),aux(25))>>s(79),(eq(46,1),aux(26))>>s(80),(eq(46,1),aux(27))>>s(81),(eq(46,1),aux(4))>>s(82),(eq(46,1),it(23))>>s(83),(eq(46,1),it(24))>>s(84),(eq(46,1),it(25))>>s(85),(eq(46,1),it(26))>>s(86),(eq(46,1),it(28))>>s(87),(eq(46,1),s(25))>>s(88),(eq(46,1),s(24))>>s(89),(eq(46,1),s(23))>>s(90),(eq(46,1),s(19))>>s(91)]

#### Simplifying cost structure of CE 46 
 * Renamed intermediate variables: 
[(eq(51,1),s(29))>>s(92),(eq(51,1),s(30))>>s(93)]

#### Simplifying cost structure of CE 51 
 * Renamed intermediate variables: 
[(eq(47,1),aux(8))>>s(94),(eq(47,1),aux(10))>>s(95),(eq(47,1),aux(12))>>s(96),(eq(47,1),aux(30))>>s(97),(eq(47,1),aux(31))>>s(98),(eq(47,1),aux(13))>>s(99),(eq(47,1),it(26))>>s(100),(eq(47,1),s(30))>>s(101),(eq(47,1),aux(4))>>s(102),(eq(47,1),it(23))>>s(103),(eq(47,1),it(24))>>s(104),(eq(47,1),it(25))>>s(105),(eq(47,1),it(28))>>s(106),(eq(47,1),s(25))>>s(107),(eq(47,1),s(24))>>s(108),(eq(47,1),s(23))>>s(109),(eq(47,1),s(19))>>s(110)]

#### Simplifying cost structure of CE 47 
 * Renamed intermediate variables: 
[(eq(48,1),aux(7))>>s(111),(eq(48,1),aux(6))>>s(112),(eq(48,1),aux(10))>>s(113),(eq(48,1),aux(14))>>s(114),(eq(48,1),s(27))>>s(115),(eq(48,1),s(28))>>s(116),(eq(48,1),aux(28))>>s(117),(eq(48,1),aux(29))>>s(118),(eq(48,1),aux(1))>>s(119),(eq(48,1),aux(4))>>s(120),(eq(48,1),it(23))>>s(121),(eq(48,1),it(25))>>s(122),(eq(48,1),it(26))>>s(123),(eq(48,1),s(25))>>s(124),(eq(48,1),s(24))>>s(125),(eq(48,1),s(23))>>s(126),(eq(48,1),s(19))>>s(127)]

#### Simplifying cost structure of CE 48 

#### Cost of chains of eval_xdr3dfcoord_11(V_size,V_limit,B):
* Chain [49]: 4
  with precondition: [V_size=1] 

* Chain [48]: 4
  with precondition: [V_size=1,0>=V_limit] 

* Chain [47]: 1*s(31)+5
  Such that:s(31) =< 1/3

  with precondition: [V_size=2,V_limit=1] 

* Chain [46]: 1*s(32)+5
  Such that:s(32) =< 1/3

  with precondition: [V_size=2,V_limit>=1] 

* Chain [45]: 1*s(33)+8*s(38)+11*s(39)+9*s(40)+2*s(41)+1*s(42)+2*s(43)+5
  Such that:s(33) =< 1/3
s(34) =< V_size
s(35) =< V_size/2
s(36) =< V_size/3
s(37) =< s(34)
s(38) =< s(34)
s(39) =< s(34)
s(40) =< s(34)
s(39) =< s(35)
s(41) =< s(35)
s(37) =< s(35)
s(38) =< s(36)
s(41) =< s(36)
s(42) =< s(36)
s(41) =< s(37)*(1/3)
s(42) =< s(34)*(1/3)
s(43) =< s(34)*(1/3)

  with precondition: [V_limit=1,V_size>=3] 

* Chain [44]: 1*s(44)+1*s(45)+5
  Such that:s(44) =< V_limit
s(45) =< V_limit/3

  with precondition: [V_size=V_limit+1,V_size>=3] 

* Chain [43]: 1
  with precondition: [0>=V_size] 

* Chain [42]: 4*s(52)+4*s(53)+3*s(54)+9*s(55)+8*s(56)+1*s(57)+1*s(58)+1*s(59)+2*s(60)+4
  Such that:s(48) =< V_size
s(49) =< V_size/2
s(46) =< V_size/2-V_limit/2
s(50) =< V_size/3
s(47) =< V_size/3-V_limit/3
s(51) =< s(48)
s(52) =< s(48)
s(53) =< s(48)
s(54) =< s(48)
s(55) =< s(48)
s(56) =< s(48)
s(54) =< s(46)
s(57) =< s(46)
s(54) =< s(49)
s(56) =< s(49)
s(51) =< s(49)
s(58) =< s(49)
s(57) =< s(49)
s(53) =< s(47)
s(57) =< s(47)
s(53) =< s(50)
s(59) =< s(50)
s(58) =< s(50)
s(57) =< s(50)
s(52) =< s(50)
s(57) =< s(51)*(1/3)
s(58) =< s(51)*(1/3)
s(59) =< s(48)*(1/3)
s(60) =< s(48)*(1/3)

  with precondition: [0>=V_limit,V_size>=2] 

* Chain [41]: 4*s(67)+4*s(68)+3*s(69)+9*s(70)+8*s(71)+1*s(72)+1*s(73)+1*s(74)+2*s(75)+4
  Such that:s(63) =< V_size
s(64) =< V_size/2
s(61) =< V_size/2-V_limit/2
s(65) =< V_size/3
s(62) =< V_size/3-V_limit/3
s(66) =< s(63)
s(67) =< s(63)
s(68) =< s(63)
s(69) =< s(63)
s(70) =< s(63)
s(71) =< s(63)
s(69) =< s(61)
s(72) =< s(61)
s(69) =< s(64)
s(71) =< s(64)
s(66) =< s(64)
s(73) =< s(64)
s(72) =< s(64)
s(68) =< s(62)
s(72) =< s(62)
s(68) =< s(65)
s(74) =< s(65)
s(73) =< s(65)
s(72) =< s(65)
s(67) =< s(65)
s(72) =< s(66)*(1/3)
s(73) =< s(66)*(1/3)
s(74) =< s(63)*(1/3)
s(75) =< s(63)*(1/3)

  with precondition: [V_size>=2] 

* Chain [40]: 1*s(76)+4*s(83)+4*s(84)+3*s(85)+9*s(86)+8*s(87)+1*s(88)+1*s(89)+1*s(90)+2*s(91)+5
  Such that:s(76) =< 1/3
s(79) =< V_size
s(80) =< V_size/2
s(77) =< V_size/2-V_limit/2
s(81) =< V_size/3
s(78) =< V_size/3-V_limit/3
s(82) =< s(79)
s(83) =< s(79)
s(84) =< s(79)
s(85) =< s(79)
s(86) =< s(79)
s(87) =< s(79)
s(85) =< s(77)
s(88) =< s(77)
s(85) =< s(80)
s(87) =< s(80)
s(82) =< s(80)
s(89) =< s(80)
s(88) =< s(80)
s(84) =< s(78)
s(88) =< s(78)
s(84) =< s(81)
s(90) =< s(81)
s(89) =< s(81)
s(88) =< s(81)
s(83) =< s(81)
s(88) =< s(82)*(1/3)
s(89) =< s(82)*(1/3)
s(90) =< s(79)*(1/3)
s(91) =< s(79)*(1/3)

  with precondition: [V_size>=3,V_limit>=1] 

* Chain [39]: 1*s(92)+1*s(93)+5
  Such that:s(92) =< V_size
s(93) =< V_size/3

  with precondition: [V_size>=3,V_limit+1>=V_size] 

* Chain [38]: 10*s(100)+1*s(101)+4*s(103)+4*s(104)+3*s(105)+8*s(106)+1*s(107)+1*s(108)+1*s(109)+2*s(110)+5
  Such that:s(97) =< V_size
s(95) =< V_size/2
s(94) =< V_size/2-V_limit/2
s(98) =< V_size/3
s(96) =< V_size/3-V_limit/3
s(99) =< s(97)
s(100) =< s(97)
s(101) =< s(97)
s(99) =< s(98)
s(101) =< s(98)
s(102) =< s(97)
s(103) =< s(97)
s(104) =< s(97)
s(105) =< s(97)
s(106) =< s(97)
s(105) =< s(94)
s(107) =< s(94)
s(102) =< s(95)
s(105) =< s(95)
s(106) =< s(95)
s(108) =< s(95)
s(107) =< s(95)
s(104) =< s(96)
s(107) =< s(96)
s(104) =< s(99)
s(109) =< s(99)
s(108) =< s(99)
s(107) =< s(99)
s(103) =< s(98)
s(104) =< s(98)
s(103) =< s(99)
s(107) =< s(102)*(1/3)
s(108) =< s(102)*(1/3)
s(109) =< s(97)*(1/3)
s(110) =< s(97)*(1/3)

  with precondition: [V_size>=4,V_limit>=2] 

* Chain [37]: 1*s(115)+1*s(116)+8*s(121)+11*s(122)+9*s(123)+1*s(124)+1*s(125)+1*s(126)+2*s(127)+5
  Such that:s(112) =< V_size
s(111) =< V_size-V_limit
s(113) =< V_size/2
s(117) =< V_size/2-V_limit/2
s(114) =< V_size/3
s(118) =< V_size/3-V_limit/3
s(115) =< V_limit
s(116) =< V_limit/3
s(119) =< s(112)
s(120) =< s(112)
s(121) =< s(112)
s(122) =< s(112)
s(123) =< s(112)
s(119) =< s(111)
s(120) =< s(111)
s(121) =< s(111)
s(122) =< s(111)
s(123) =< s(111)
s(122) =< s(117)
s(124) =< s(117)
s(120) =< s(113)
s(122) =< s(113)
s(125) =< s(113)
s(124) =< s(113)
s(120) =< s(117)
s(121) =< s(118)
s(124) =< s(118)
s(126) =< s(118)
s(125) =< s(118)
s(121) =< s(114)
s(124) =< s(120)*(1/3)
s(125) =< s(120)*(1/3)
s(126) =< s(119)*(1/3)
s(127) =< s(119)*(1/3)

  with precondition: [V_limit>=2,V_size>=V_limit+2] 


#### Simplifying cost structure of CE 52 

#### Simplifying cost structure of CE 53 
 * Renamed intermediate variables: 
[(eq(54,1),s(31))>>s(128)]

#### Simplifying cost structure of CE 54 
 * Renamed intermediate variables: 
[(eq(55,1),s(32))>>s(129)]

#### Simplifying cost structure of CE 55 
 * Renamed intermediate variables: 
[(eq(56,1),s(33))>>s(130),(eq(56,1),s(34))>>s(131),(eq(56,1),s(35))>>s(132),(eq(56,1),s(36))>>s(133),(eq(56,1),s(37))>>s(134),(eq(56,1),s(38))>>s(135),(eq(56,1),s(39))>>s(136),(eq(56,1),s(40))>>s(137),(eq(56,1),s(41))>>s(138),(eq(56,1),s(42))>>s(139),(eq(56,1),s(43))>>s(140)]

#### Simplifying cost structure of CE 56 
 * Renamed intermediate variables: 
[(eq(57,1),s(44))>>s(141),(eq(57,1),s(45))>>s(142)]

#### Simplifying cost structure of CE 57 

#### Simplifying cost structure of CE 58 
 * Renamed intermediate variables: 
[(eq(59,1),s(48))>>s(143),(eq(59,1),s(49))>>s(144),(eq(59,1),s(46))>>s(145),(eq(59,1),s(50))>>s(146),(eq(59,1),s(47))>>s(147),(eq(59,1),s(51))>>s(148),(eq(59,1),s(52))>>s(149),(eq(59,1),s(53))>>s(150),(eq(59,1),s(54))>>s(151),(eq(59,1),s(55))>>s(152),(eq(59,1),s(56))>>s(153),(eq(59,1),s(57))>>s(154),(eq(59,1),s(58))>>s(155),(eq(59,1),s(59))>>s(156),(eq(59,1),s(60))>>s(157)]

#### Simplifying cost structure of CE 59 
 * Renamed intermediate variables: 
[(eq(60,1),s(63))>>s(158),(eq(60,1),s(64))>>s(159),(eq(60,1),s(61))>>s(160),(eq(60,1),s(65))>>s(161),(eq(60,1),s(62))>>s(162),(eq(60,1),s(66))>>s(163),(eq(60,1),s(67))>>s(164),(eq(60,1),s(68))>>s(165),(eq(60,1),s(69))>>s(166),(eq(60,1),s(70))>>s(167),(eq(60,1),s(71))>>s(168),(eq(60,1),s(72))>>s(169),(eq(60,1),s(73))>>s(170),(eq(60,1),s(74))>>s(171),(eq(60,1),s(75))>>s(172)]

#### Simplifying cost structure of CE 60 
 * Renamed intermediate variables: 
[(eq(61,1),s(76))>>s(173),(eq(61,1),s(79))>>s(174),(eq(61,1),s(80))>>s(175),(eq(61,1),s(77))>>s(176),(eq(61,1),s(81))>>s(177),(eq(61,1),s(78))>>s(178),(eq(61,1),s(82))>>s(179),(eq(61,1),s(83))>>s(180),(eq(61,1),s(84))>>s(181),(eq(61,1),s(85))>>s(182),(eq(61,1),s(86))>>s(183),(eq(61,1),s(87))>>s(184),(eq(61,1),s(88))>>s(185),(eq(61,1),s(89))>>s(186),(eq(61,1),s(90))>>s(187),(eq(61,1),s(91))>>s(188)]

#### Simplifying cost structure of CE 61 
 * Renamed intermediate variables: 
[(eq(62,1),s(92))>>s(189),(eq(62,1),s(93))>>s(190)]

#### Simplifying cost structure of CE 62 
 * Renamed intermediate variables: 
[(eq(63,1),s(97))>>s(191),(eq(63,1),s(95))>>s(192),(eq(63,1),s(94))>>s(193),(eq(63,1),s(98))>>s(194),(eq(63,1),s(96))>>s(195),(eq(63,1),s(99))>>s(196),(eq(63,1),s(100))>>s(197),(eq(63,1),s(101))>>s(198),(eq(63,1),s(102))>>s(199),(eq(63,1),s(103))>>s(200),(eq(63,1),s(104))>>s(201),(eq(63,1),s(105))>>s(202),(eq(63,1),s(106))>>s(203),(eq(63,1),s(107))>>s(204),(eq(63,1),s(108))>>s(205),(eq(63,1),s(109))>>s(206),(eq(63,1),s(110))>>s(207)]

#### Simplifying cost structure of CE 63 
 * Renamed intermediate variables: 
[(eq(64,1),s(112))>>s(208),(eq(64,1),s(111))>>s(209),(eq(64,1),s(113))>>s(210),(eq(64,1),s(117))>>s(211),(eq(64,1),s(114))>>s(212),(eq(64,1),s(118))>>s(213),(eq(64,1),s(115))>>s(214),(eq(64,1),s(116))>>s(215),(eq(64,1),s(119))>>s(216),(eq(64,1),s(120))>>s(217),(eq(64,1),s(121))>>s(218),(eq(64,1),s(122))>>s(219),(eq(64,1),s(123))>>s(220),(eq(64,1),s(124))>>s(221),(eq(64,1),s(125))>>s(222),(eq(64,1),s(126))>>s(223),(eq(64,1),s(127))>>s(224)]

#### Simplifying cost structure of CE 64 

#### Cost of chains of eval_xdr3dfcoord_start(V_size,V_limit,B):
* Chain [62]: 4
  with precondition: [V_size=1] 

* Chain [61]: 4
  with precondition: [V_size=1,0>=V_limit] 

* Chain [60]: 1*s(128)+5
  Such that:s(128) =< 1/3

  with precondition: [V_size=2,V_limit=1] 

* Chain [59]: 1*s(129)+5
  Such that:s(129) =< 1/3

  with precondition: [V_size=2,V_limit>=1] 

* Chain [58]: 1*s(130)+8*s(135)+11*s(136)+9*s(137)+2*s(138)+1*s(139)+2*s(140)+5
  Such that:s(130) =< 1/3
s(131) =< V_size
s(132) =< V_size/2
s(133) =< V_size/3
s(134) =< s(131)
s(135) =< s(131)
s(136) =< s(131)
s(137) =< s(131)
s(136) =< s(132)
s(138) =< s(132)
s(134) =< s(132)
s(135) =< s(133)
s(138) =< s(133)
s(139) =< s(133)
s(138) =< s(134)*(1/3)
s(139) =< s(131)*(1/3)
s(140) =< s(131)*(1/3)

  with precondition: [V_limit=1,V_size>=3] 

* Chain [57]: 1*s(141)+1*s(142)+5
  Such that:s(141) =< V_limit
s(142) =< V_limit/3

  with precondition: [V_size=V_limit+1,V_size>=3] 

* Chain [56]: 1
  with precondition: [0>=V_size] 

* Chain [55]: 4*s(149)+4*s(150)+3*s(151)+9*s(152)+8*s(153)+1*s(154)+1*s(155)+1*s(156)+2*s(157)+4
  Such that:s(143) =< V_size
s(144) =< V_size/2
s(145) =< V_size/2-V_limit/2
s(146) =< V_size/3
s(147) =< V_size/3-V_limit/3
s(148) =< s(143)
s(149) =< s(143)
s(150) =< s(143)
s(151) =< s(143)
s(152) =< s(143)
s(153) =< s(143)
s(151) =< s(145)
s(154) =< s(145)
s(151) =< s(144)
s(153) =< s(144)
s(148) =< s(144)
s(155) =< s(144)
s(154) =< s(144)
s(150) =< s(147)
s(154) =< s(147)
s(150) =< s(146)
s(156) =< s(146)
s(155) =< s(146)
s(154) =< s(146)
s(149) =< s(146)
s(154) =< s(148)*(1/3)
s(155) =< s(148)*(1/3)
s(156) =< s(143)*(1/3)
s(157) =< s(143)*(1/3)

  with precondition: [0>=V_limit,V_size>=2] 

* Chain [54]: 4*s(164)+4*s(165)+3*s(166)+9*s(167)+8*s(168)+1*s(169)+1*s(170)+1*s(171)+2*s(172)+4
  Such that:s(158) =< V_size
s(159) =< V_size/2
s(160) =< V_size/2-V_limit/2
s(161) =< V_size/3
s(162) =< V_size/3-V_limit/3
s(163) =< s(158)
s(164) =< s(158)
s(165) =< s(158)
s(166) =< s(158)
s(167) =< s(158)
s(168) =< s(158)
s(166) =< s(160)
s(169) =< s(160)
s(166) =< s(159)
s(168) =< s(159)
s(163) =< s(159)
s(170) =< s(159)
s(169) =< s(159)
s(165) =< s(162)
s(169) =< s(162)
s(165) =< s(161)
s(171) =< s(161)
s(170) =< s(161)
s(169) =< s(161)
s(164) =< s(161)
s(169) =< s(163)*(1/3)
s(170) =< s(163)*(1/3)
s(171) =< s(158)*(1/3)
s(172) =< s(158)*(1/3)

  with precondition: [V_size>=2] 

* Chain [53]: 1*s(173)+4*s(180)+4*s(181)+3*s(182)+9*s(183)+8*s(184)+1*s(185)+1*s(186)+1*s(187)+2*s(188)+5
  Such that:s(173) =< 1/3
s(174) =< V_size
s(175) =< V_size/2
s(176) =< V_size/2-V_limit/2
s(177) =< V_size/3
s(178) =< V_size/3-V_limit/3
s(179) =< s(174)
s(180) =< s(174)
s(181) =< s(174)
s(182) =< s(174)
s(183) =< s(174)
s(184) =< s(174)
s(182) =< s(176)
s(185) =< s(176)
s(182) =< s(175)
s(184) =< s(175)
s(179) =< s(175)
s(186) =< s(175)
s(185) =< s(175)
s(181) =< s(178)
s(185) =< s(178)
s(181) =< s(177)
s(187) =< s(177)
s(186) =< s(177)
s(185) =< s(177)
s(180) =< s(177)
s(185) =< s(179)*(1/3)
s(186) =< s(179)*(1/3)
s(187) =< s(174)*(1/3)
s(188) =< s(174)*(1/3)

  with precondition: [V_size>=3,V_limit>=1] 

* Chain [52]: 1*s(189)+1*s(190)+5
  Such that:s(189) =< V_size
s(190) =< V_size/3

  with precondition: [V_size>=3,V_limit+1>=V_size] 

* Chain [51]: 10*s(197)+1*s(198)+4*s(200)+4*s(201)+3*s(202)+8*s(203)+1*s(204)+1*s(205)+1*s(206)+2*s(207)+5
  Such that:s(191) =< V_size
s(192) =< V_size/2
s(193) =< V_size/2-V_limit/2
s(194) =< V_size/3
s(195) =< V_size/3-V_limit/3
s(196) =< s(191)
s(197) =< s(191)
s(198) =< s(191)
s(196) =< s(194)
s(198) =< s(194)
s(199) =< s(191)
s(200) =< s(191)
s(201) =< s(191)
s(202) =< s(191)
s(203) =< s(191)
s(202) =< s(193)
s(204) =< s(193)
s(199) =< s(192)
s(202) =< s(192)
s(203) =< s(192)
s(205) =< s(192)
s(204) =< s(192)
s(201) =< s(195)
s(204) =< s(195)
s(201) =< s(196)
s(206) =< s(196)
s(205) =< s(196)
s(204) =< s(196)
s(200) =< s(194)
s(201) =< s(194)
s(200) =< s(196)
s(204) =< s(199)*(1/3)
s(205) =< s(199)*(1/3)
s(206) =< s(191)*(1/3)
s(207) =< s(191)*(1/3)

  with precondition: [V_size>=4,V_limit>=2] 

* Chain [50]: 1*s(214)+1*s(215)+8*s(218)+11*s(219)+9*s(220)+1*s(221)+1*s(222)+1*s(223)+2*s(224)+5
  Such that:s(208) =< V_size
s(209) =< V_size-V_limit
s(210) =< V_size/2
s(211) =< V_size/2-V_limit/2
s(212) =< V_size/3
s(213) =< V_size/3-V_limit/3
s(214) =< V_limit
s(215) =< V_limit/3
s(216) =< s(208)
s(217) =< s(208)
s(218) =< s(208)
s(219) =< s(208)
s(220) =< s(208)
s(216) =< s(209)
s(217) =< s(209)
s(218) =< s(209)
s(219) =< s(209)
s(220) =< s(209)
s(219) =< s(211)
s(221) =< s(211)
s(217) =< s(210)
s(219) =< s(210)
s(222) =< s(210)
s(221) =< s(210)
s(217) =< s(211)
s(218) =< s(213)
s(221) =< s(213)
s(223) =< s(213)
s(222) =< s(213)
s(218) =< s(212)
s(221) =< s(217)*(1/3)
s(222) =< s(217)*(1/3)
s(223) =< s(216)*(1/3)
s(224) =< s(216)*(1/3)

  with precondition: [V_limit>=2,V_size>=V_limit+2] 


Closed-form bounds of eval_xdr3dfcoord_start(V_size,V_limit,B): 
-------------------------------------
* Chain [62] with precondition: [V_size=1] 
    - Upper bound: 4 
    - Complexity: constant 
* Chain [61] with precondition: [V_size=1,0>=V_limit] 
    - Upper bound: 4 
    - Complexity: constant 
* Chain [60] with precondition: [V_size=2,V_limit=1] 
    - Upper bound: 16/3 
    - Complexity: constant 
* Chain [59] with precondition: [V_size=2,V_limit>=1] 
    - Upper bound: 16/3 
    - Complexity: constant 
* Chain [58] with precondition: [V_limit=1,V_size>=3] 
    - Upper bound: 30*V_size+16/3 
    - Complexity: n 
* Chain [57] with precondition: [V_size=V_limit+1,V_size>=3] 
    - Upper bound: 4/3*V_limit+5 
    - Complexity: n 
* Chain [56] with precondition: [0>=V_size] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [55] with precondition: [0>=V_limit,V_size>=2] 
    - Upper bound: 30*V_size-V_limit/2+4 
    - Complexity: n 
* Chain [54] with precondition: [V_size>=2] 
    - Upper bound: V_size/3+(V_size/2+(86/3*V_size+4+nat(V_size/2-V_limit/2))) 
    - Complexity: n 
* Chain [53] with precondition: [V_size>=3,V_limit>=1] 
    - Upper bound: V_size/3+(V_size/2+(86/3*V_size+16/3+nat(V_size/2-V_limit/2))) 
    - Complexity: n 
* Chain [52] with precondition: [V_size>=3,V_limit+1>=V_size] 
    - Upper bound: 4/3*V_size+5 
    - Complexity: n 
* Chain [51] with precondition: [V_size>=4,V_limit>=2] 
    - Upper bound: V_size/2+(95/3*V_size+5+nat(V_size/2-V_limit/2)) 
    - Complexity: n 
* Chain [50] with precondition: [V_limit>=2,V_size>=V_limit+2] 
    - Upper bound: 30*V_size+V_limit/2+5 
    - Complexity: n 

### Maximum cost of eval_xdr3dfcoord_start(V_size,V_limit,B): max([max([13/3,nat(V_limit)+4+nat(V_limit/3)]),nat(V_size)+3+max([nat(V_size/3)+1,83/3*nat(V_size)+nat(V_size/2)+max([nat(V_size/2-V_limit/2)+1+max([max([nat(V_size)*3,nat(V_size/3-V_limit/3)+nat(V_limit)+nat(V_limit/3)]),1/3+nat(V_size/3)]),4/3+nat(V_size/2)+nat(V_size/3)])])])+1 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 217 ms.
* Invariants computed in 329 ms.
   - Backward Invariants 190 ms.
   - Transitive Invariants 22 ms.
* Refinement performed in 548 ms.
* Termination proved in 53 ms.
* Upper bounds computed in 748 ms.
   - Equation cost structures 157 ms.
   - Phase cost structures 204 ms.
   - Chain cost structures 277 ms.
   - Solving cost expressions 23 ms.
* Total analysis performed in 2112 ms.


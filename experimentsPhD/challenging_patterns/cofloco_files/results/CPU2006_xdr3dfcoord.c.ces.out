Warning: Ignored call to eval_xdr3dfcoord_stop/1 in equation eval_xdr3dfcoord_bb10_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_xdr3dfcoord_22/18,eval_xdr3dfcoord_23/19,eval_xdr3dfcoord_bb5_in/16,eval_xdr3dfcoord_bb6_in/16,eval_xdr3dfcoord_bb7_in/18]
1. recursive : [eval_xdr3dfcoord_bb8_in/12,eval_xdr3dfcoord_bb9_in/12]
2. recursive : [eval_xdr3dfcoord_14/4,eval_xdr3dfcoord_15/5,eval_xdr3dfcoord_bb1_in/4,eval_xdr3dfcoord_bb2_in/4,eval_xdr3dfcoord_bb3_in/4,eval_xdr3dfcoord_bb4_in/5,loop_cont_eval_xdr3dfcoord_bb5_in/10,loop_cont_eval_xdr3dfcoord_bb8_in/5]
3. non_recursive : [eval_xdr3dfcoord_bb10_in/1]
4. non_recursive : [loop_cont_eval_xdr3dfcoord_bb1_in/2]
5. non_recursive : [eval_xdr3dfcoord_11/3]
6. non_recursive : [eval_xdr3dfcoord_10/3]
7. non_recursive : [eval_xdr3dfcoord_9/3]
8. non_recursive : [eval_xdr3dfcoord_8/3]
9. non_recursive : [eval_xdr3dfcoord_7/3]
10. non_recursive : [eval_xdr3dfcoord_6/3]
11. non_recursive : [eval_xdr3dfcoord_5/3]
12. non_recursive : [eval_xdr3dfcoord_4/3]
13. non_recursive : [eval_xdr3dfcoord_3/3]
14. non_recursive : [eval_xdr3dfcoord_2/3]
15. non_recursive : [eval_xdr3dfcoord_1/3]
16. non_recursive : [eval_xdr3dfcoord_0/3]
17. non_recursive : [eval_xdr3dfcoord_bb0_in/3]
18. non_recursive : [eval_xdr3dfcoord_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_xdr3dfcoord_bb5_in/16
1. SCC is partially evaluated into eval_xdr3dfcoord_bb8_in/12
2. SCC is partially evaluated into eval_xdr3dfcoord_bb1_in/4
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is completely evaluated into other SCCs
16. SCC is completely evaluated into other SCCs
17. SCC is completely evaluated into other SCCs
18. SCC is partially evaluated into eval_xdr3dfcoord_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_xdr3dfcoord_bb5_in/16 
* CE 14 is refined into CE [17] 
* CE 13 is refined into CE [18] 
* CE 9 is refined into CE [19] 
* CE 10 is discarded (unfeasible) 
* CE 7 is refined into CE [20] 
* CE 11 is refined into CE [21] 
* CE 8 is discarded (unfeasible) 
* CE 12 is discarded (unfeasible) 


#### Refined cost equations eval_xdr3dfcoord_bb5_in/16 
* CE 17: eval_xdr3dfcoord_bb5_in(A,B,C,D,E,F,G,H,A,B,I,D,E,F,G,J) = 0
     [A>=F+G,E+F>=D,D>=F,F+1>=D,E>=B,1>=D,E+I+1=G,C+E+1=G,J=0,H=2] 
* CE 18: eval_xdr3dfcoord_bb5_in(A,B,C,D,E,F,G,H,A,B,I,D,E,J,G,K) = 0
     [A>=G,E>=D,D>=0,1>=D,G=E+I+1,G=C+E+1,K=0,J=0,H=2,F=0] 
* CE 19: eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J) = 1+ eval_xdr3dfcoord_bb5_in(V_size,V_limit,K,L,M,N,O,P,C,D,E,F,G,H,I,J)
     [V_size>=V_i_1+2,V_limit>=V_run_0+1,V_run_0>=0,V_i_1=V_run_0+K+1,V_i_1=V_i_0+V_run_0+1,V_i_1+1=O,V_run_0+1=M,P=2,N=1,L=1,B=2,V_is_small_2=1,V_is_small_1=1] 
* CE 20: eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J) = 1+ eval_xdr3dfcoord_bb5_in(V_size,V_limit,K,L,M,N,O,P,C,D,E,F,G,H,I,J)
     [V_size>=V_i_1+2,V_limit>=V_run_0+1,V_run_0>=0,V_i_1=V_run_0+K+1,V_i_1=V_i_0+V_run_0+1,V_i_1+1=O,V_run_0+1=M,P=2,N=0,L=1,B=2,V_is_small_2=1,V_is_small_1=1] 
* CE 21: eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J) = 1+ eval_xdr3dfcoord_bb5_in(K,V_limit,L,M,N,O,P,Q,C,D,E,F,G,H,I,J)
     [V_limit>=V_run_0+1,V_run_0>=0,V_run_0+L+1=V_i_1,V_i_0+V_run_0+1=V_i_1,V_i_1+1=P,V_run_0+1=N,V_i_1+1=K,V_i_1+1=V_size,Q=2,O=0,M=1,B=2,V_is_small_2=1,V_is_small_1=1] 

### Cost equations --> "Loop" of eval_xdr3dfcoord_bb5_in/16 
* CEs [19] --> Loop 15 
* CEs [20] --> Loop 16 
* CEs [21] --> Loop 17 
* CEs [17] --> Loop 18 
* CEs [18] --> Loop 19 

#### Loops of eval_xdr3dfcoord_bb5_in/16 
* Loop 15: eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J)->  eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1',V_run_0',V_is_small_2',V_i_1',B',C,D,E,F,G,H,I,J)
                  [V_size>=V_i_0+V_run_0+3,V_limit>=V_run_0+1,V_run_0>=0,V_i_0+V_run_0+2=V_i_1',V_i_0+V_run_0+1=V_i_1,V_run_0+1=V_run_0',B'=2,V_is_small_2'=1,V_is_small_1'=1,B=2,V_is_small_2=1,V_is_small_1=1] 
* Loop 16: eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J)->  eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1',V_run_0',V_is_small_2',V_i_1',B',C,D,E,F,G,H,I,J)
                  [V_size>=V_i_0+V_run_0+3,V_limit>=V_run_0+1,V_run_0>=0,V_i_0+V_run_0+2=V_i_1',V_i_0+V_run_0+1=V_i_1,V_run_0+1=V_run_0',B'=2,V_is_small_2'=0,V_is_small_1'=1,B=2,V_is_small_2=1,V_is_small_1=1] 
* Loop 17: eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J)->  eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,A',B',C',V_size,D',C,D,E,F,G,H,I,J)
                  [V_limit+V_i_0+1>=V_size,V_size>=V_i_0+2,V_size=V_i_0+B'+1,V_size=V_i_0+V_run_0+2,V_size=V_i_1+1,D'=2,C'=0,A'=1,B=2,V_is_small_2=1,V_is_small_1=1] 
* Loop 18: eval_xdr3dfcoord_bb5_in(A,B,C,D,E,F,G,H,A,B,C,D,E,F,I,J) [A>=C+E+F+1,E+F>=D,D>=F,F+1>=D,E>=B,1>=D,C+E+1=I,C+E+1=G,J=0,H=2] 
* Loop 19: eval_xdr3dfcoord_bb5_in(A,B,C,D,E,F,G,H,A,B,C,D,E,I,J,K) [A>=C+E+1,E>=D,D>=0,1>=D,C+E+1=J,C+E+1=G,K=0,I=0,H=2,F=0] 

### Ranking functions of CR eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J) 
* RF of phase [15]: [V_limit+V_i_0-V_i_1+1,V_limit-V_run_0,V_size-V_i_0-V_run_0-2,V_size-V_i_1-1]

#### Partial ranking functions of CR eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    V_limit+V_i_0-V_i_1+1
    V_limit-V_run_0
    V_size-V_i_0-V_run_0-2
    V_size-V_i_1-1

Discarded unfeasible chain [[15]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J) 
* [[15],18]
* [[15],17,19]
* [[15],17,18]
* [[15],16,19]
* [[15],16,18]
* [19]
* [18]
* [17,19]
* [17,18]
* [16,19]
* [16,18]


### Merging Chains  eval_xdr3dfcoord_bb5_in/16 into  External patterns of execution 
* [[18,16],[19,16]] --> 1 
* [[18,17],[19,17]] --> 2 
* [[18,16,[15]],[19,16,[15]]] --> 3 
* [[18,17,[15]],[19,17,[15]]] --> 4 
* [[18,[15]]] --> 5 
* [[19]] --> 6 
* [[18]] --> 7 


### Specialization of cost equations eval_xdr3dfcoord_bb8_in/12 
* CE 16 is refined into CE [22] 
* CE 15 is refined into CE [23] 


#### Refined cost equations eval_xdr3dfcoord_bb8_in/12 
* CE 22: eval_xdr3dfcoord_bb8_in(A,B,C,D,E,F,G,H,I,A,B,G) = 0
     [H>=E,I=3] 
* CE 23: eval_xdr3dfcoord_bb8_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,V_k_0,B,C,D,E) = 1+ eval_xdr3dfcoord_bb8_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,F,G,C,D,E)
     [V_run_0>=V_k_0+1,V_k_0+3=F,G=3,B=3] 

### Cost equations --> "Loop" of eval_xdr3dfcoord_bb8_in/12 
* CEs [23] --> Loop 20 
* CEs [22] --> Loop 21 

#### Loops of eval_xdr3dfcoord_bb8_in/12 
* Loop 20: eval_xdr3dfcoord_bb8_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,V_k_0,B,C,D,E)->  eval_xdr3dfcoord_bb8_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,V_k_0',B',C,D,E)
                  [V_run_0>=V_k_0+1,V_k_0+3=V_k_0',B'=3,B=3] 
* Loop 21: eval_xdr3dfcoord_bb8_in(A,B,C,D,E,F,G,H,I,A,B,G) [H>=E,I=3] 

### Ranking functions of CR eval_xdr3dfcoord_bb8_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,V_k_0,B,C,D,E) 
* RF of phase [20]: [V_run_0/3-V_k_0/3]

#### Partial ranking functions of CR eval_xdr3dfcoord_bb8_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,V_k_0,B,C,D,E) 
* Partial RF of phase [20]:
  - RF of loop [20:1]:
    V_run_0/3-V_k_0/3

Discarded unfeasible chain [[20]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_xdr3dfcoord_bb8_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,V_k_0,B,C,D,E) 
* [[20],21]
* [21]


### Merging Chains  eval_xdr3dfcoord_bb8_in/12 into  External patterns of execution 
* [[21]] --> 1 
* [[21,[20]]] --> 2 


### Specialization of cost equations eval_xdr3dfcoord_bb1_in/4 
* CE 6 is refined into CE [24] 
* CE 3 is refined into CE [25,26,27,28,29,30] 
* CE 4 is refined into CE [31,32] 
* CE 5 is refined into CE [33,34] 


#### Refined cost equations eval_xdr3dfcoord_bb1_in/4 
* CE 24: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) = 0
     [V_i_0>=V_size,B=4] 
* CE 25: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) = 3+ eval_xdr3dfcoord_bb5_in(V_size,V_limit,C,D,E,F,G,H,V_size,V_limit,I,J,K,L,M,N):1+ eval_xdr3dfcoord_bb8_in(V_size,V_limit,O,P,Q,R,M,S,T,V_size,V_limit,M):2+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,M,U)
     [V_size>=M+1,V_limit>=1,M=O+2,M=I+2,M=G+1,M=C+2,M=V_i_0+2,U=4,T=3,S=0,R=0,Q=1,P=1,N=0,L=0,K=1,J=1,H=2,F=1,E=0,D=1,B=4] 
* CE 26: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) = 3+ eval_xdr3dfcoord_bb5_in(V_size,V_limit,C,D,E,F,G,H,V_size,V_limit,I,J,K,L,V_size,M):2+ eval_xdr3dfcoord_bb8_in(V_size,V_limit,N,O,P,Q,V_size,R,S,V_size,V_limit,V_size):2+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_size,T)
     [V_limit>=1,V_size=N+2,V_size=I+2,V_size=G+1,V_size=C+2,V_size=V_i_0+2,T=4,S=3,R=0,Q=0,P=1,O=1,M=0,L=0,K=1,J=1,H=2,F=1,E=0,D=1,B=4] 
* CE 27: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) = 3+ eval_xdr3dfcoord_bb5_in(V_size,V_limit,C,D,E,F,G,H,V_size,V_limit,I,J,K,L,M,N):3+ eval_xdr3dfcoord_bb8_in(V_size,V_limit,O,P,K,Q,M,R,S,V_size,V_limit,M):2+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,M,T)
     [V_size>=M+1,V_limit>=K,K>=2,M=K+O+1,M=I+K+1,M=G+K,M=C+K+1,M=V_i_0+K+1,T=4,S=3,R=0,Q=0,P=1,N=0,L=0,J=1,H=2,F=1,E=0,D=1,B=4] 
* CE 28: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) = 3+ eval_xdr3dfcoord_bb5_in(V_size,V_limit,C,D,E,F,G,H,V_size,V_limit,I,J,K,L,V_size,M):4+ eval_xdr3dfcoord_bb8_in(V_size,V_limit,N,O,K,P,V_size,Q,R,V_size,V_limit,V_size):2+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_size,S)
     [V_limit>=K,K>=2,V_size=K+N+1,V_size=I+K+1,V_size=G+K,V_size=C+K+1,V_size=V_i_0+K+1,S=4,R=3,Q=0,P=0,O=1,M=0,L=0,J=1,H=2,F=1,E=0,D=1,B=4] 
* CE 29: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) = 3+ eval_xdr3dfcoord_bb5_in(V_size,V_limit,C,D,E,F,G,H,V_size,V_limit,I,J,V_limit,K,L,M):5+ eval_xdr3dfcoord_bb8_in(V_size,V_limit,N,O,V_limit,P,L,Q,R,V_size,V_limit,L):2+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,L,S)
     [V_size>=L+1,V_limit>=1,V_limit+N+1=L,V_limit+I+1=L,V_limit+G=L,V_limit+C+1=L,V_limit+V_i_0+1=L,S=4,R=3,Q=0,P=1,O=1,M=0,K=1,J=1,H=2,F=1,E=0,D=1,B=4] 
* CE 30: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) = 3+ eval_xdr3dfcoord_bb5_in(V_size,V_limit,C,D,E,F,G,H,V_size,V_limit,I,J,K,L,G,M):7+ eval_xdr3dfcoord_bb8_in(V_size,V_limit,N,O,P,Q,G,R,S,V_size,V_limit,G):1+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,G,T)
     [V_size>=G+1,0>=V_limit,G=N+1,G=I+1,G=C+1,G=V_i_0+1,T=4,S=3,R=0,Q=1,P=0,O=1,M=0,L=1,K=0,J=1,H=2,F=1,E=0,D=1,B=4] 
* CE 31: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) = 3+ eval_xdr3dfcoord_bb5_in(V_size,V_limit,C,D,E,F,G,H,V_size,V_limit,I,J,K,L,G,M):6+ eval_xdr3dfcoord_bb8_in(V_size,V_limit,N,O,P,Q,G,R,S,V_size,V_limit,G):1+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,G,T)
     [V_size>=G+1,G=N+1,G=I+1,G=C+1,G=V_i_0+1,T=4,S=3,R=0,Q=0,P=0,O=0,M=0,L=0,K=0,J=0,H=2,F=0,E=0,D=0,B=4] 
* CE 32: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) = 3+ eval_xdr3dfcoord_bb5_in(V_size,V_limit,C,D,E,F,G,H,V_size,V_limit,I,J,K,L,G,M):7+ eval_xdr3dfcoord_bb8_in(V_size,V_limit,N,O,P,Q,G,R,S,V_size,V_limit,G):1+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,G,T)
     [V_size>=G+1,0>=V_limit,G=N+1,G=I+1,G=C+1,G=V_i_0+1,T=4,S=3,R=0,Q=0,P=0,O=0,M=0,L=0,K=0,J=0,H=2,F=0,E=0,D=0,B=4] 
* CE 33: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) = 3+ eval_xdr3dfcoord_bb5_in(V_size,V_limit,C,D,E,F,V_size,G,V_size,V_limit,H,I,J,K,V_size,L):6+ eval_xdr3dfcoord_bb8_in(V_size,V_limit,M,N,O,P,V_size,Q,R,V_size,V_limit,V_size):1+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_size,S)
     [V_size=M+1,V_size=H+1,V_size=C+1,V_size=V_i_0+1,S=4,R=3,Q=0,P=0,O=0,N=0,L=0,K=0,J=0,I=0,G=2,F=0,E=0,D=0,B=4] 
* CE 34: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) = 3+ eval_xdr3dfcoord_bb5_in(V_size,V_limit,C,D,E,F,V_size,G,V_size,V_limit,H,I,J,K,V_size,L):7+ eval_xdr3dfcoord_bb8_in(V_size,V_limit,M,N,O,P,V_size,Q,R,V_size,V_limit,V_size):1+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_size,S)
     [0>=V_limit,V_size=M+1,V_size=H+1,V_size=C+1,V_size=V_i_0+1,S=4,R=3,Q=0,P=0,O=0,N=0,L=0,K=0,J=0,I=0,G=2,F=0,E=0,D=0,B=4] 

### Cost equations --> "Loop" of eval_xdr3dfcoord_bb1_in/4 
* CEs [27] --> Loop 22 
* CEs [29] --> Loop 23 
* CEs [30,31,32] --> Loop 24 
* CEs [25] --> Loop 25 
* CEs [28] --> Loop 26 
* CEs [26] --> Loop 27 
* CEs [33,34] --> Loop 28 
* CEs [24] --> Loop 29 

#### Loops of eval_xdr3dfcoord_bb1_in/4 
* Loop 22: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)->  eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0',B')
                  [V_limit+V_i_0+1>=V_i_0',V_size>=V_i_0'+1,V_i_0'>=V_i_0+3,B'=4,B=4] 
* Loop 23: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)->  eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0',B')
                  [V_size>=V_limit+V_i_0+2,V_limit>=1,V_limit+V_i_0+1=V_i_0',B'=4,B=4] 
* Loop 24: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)->  eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0',B')
                  [V_size>=V_i_0+2,V_i_0+1=V_i_0',B'=4,B=4] 
* Loop 25: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)->  eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0',B')
                  [V_size>=V_i_0+3,V_limit>=1,V_i_0+2=V_i_0',B'=4,B=4] 
* Loop 26: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)->  eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_size,A')
                  [V_limit+V_i_0+1>=V_size,V_size>=V_i_0+3,A'=4,B=4] 
* Loop 27: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)->  eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_size,A')
                  [V_limit>=1,V_size=V_i_0+2,A'=4,B=4] 
* Loop 28: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)->  eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_size,A')
                  [V_size=V_i_0+1,A'=4,B=4] 
* Loop 29: eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) [V_i_0>=V_size,B=4] 

### Ranking functions of CR eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) 
* RF of phase [22,23,24,25]: [V_size-V_i_0-1]

#### Partial ranking functions of CR eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) 
* Partial RF of phase [22,23,24,25]:
  - RF of loop [22:1]:
    V_size/3-V_i_0/3-1
  - RF of loop [23:1]:
    V_size/2-V_limit/2-V_i_0/2-1/2
  - RF of loop [23:1,25:1]:
    V_size/2-V_i_0/2-1
  - RF of loop [24:1]:
    V_size-V_i_0-1

Discarded unfeasible chain [[22,23,24,25]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) 
* [[22,23,24,25],28,29]
* [[22,23,24,25],27,29]
* [[22,23,24,25],26,29]
* [29]
* [28,29]
* [27,29]
* [26,29]


### Merging Chains  eval_xdr3dfcoord_bb1_in/4 into  External patterns of execution 
* [[29,26],[29,27],[29,28,[22,23,24,25]]] --> 1 
* [[29,28]] --> 2 
* [[29,26,[22,23,24,25]],[29,27,[22,23,24,25]]] --> 3 
* [[29]] --> 4 


### Specialization of cost equations eval_xdr3dfcoord_start/3 
* CE 2 is refined into CE [35,36,37,38] 


#### Refined cost equations eval_xdr3dfcoord_start/3 
* CE 35: eval_xdr3dfcoord_start(V_size,V_limit,B) = 1+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,C,D):1
     [V_size>=2,D=4,C=0] 
* CE 36: eval_xdr3dfcoord_start(V_size,V_limit,B) = 1+ eval_xdr3dfcoord_bb1_in(C,V_limit,D,E):2
     [E=4,D=0,C=1,V_size=1] 
* CE 37: eval_xdr3dfcoord_start(V_size,V_limit,B) = 1+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,C,D):3
     [V_limit>=1,V_size>=3,D=4,C=0] 
* CE 38: eval_xdr3dfcoord_start(V_size,V_limit,B) = 1+ eval_xdr3dfcoord_bb1_in(V_size,V_limit,C,D):4
     [0>=V_size,D=4,C=0] 

### Cost equations --> "Loop" of eval_xdr3dfcoord_start/3 
* CEs [35,37] --> Loop 30 
* CEs [38] --> Loop 31 
* CEs [36] --> Loop 32 

#### Loops of eval_xdr3dfcoord_start/3 
* Loop 30: eval_xdr3dfcoord_start(V_size,V_limit,B) [V_size>=2] 
* Loop 31: eval_xdr3dfcoord_start(V_size,V_limit,B) [0>=V_size] 
* Loop 32: eval_xdr3dfcoord_start(V_size,V_limit,B) [V_size=1] 

### Ranking functions of CR eval_xdr3dfcoord_start(V_size,V_limit,B) 

#### Partial ranking functions of CR eval_xdr3dfcoord_start(V_size,V_limit,B) 


### Resulting Chains:eval_xdr3dfcoord_start(V_size,V_limit,B) 
* [32]
* [31]
* [30]


### Merging Chains  eval_xdr3dfcoord_start/3 into  External patterns of execution 
* [[32]] --> 1 
* [[31]] --> 2 
* [[30]] --> 3 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 17 

#### Computing cost of phase [15] 

#### Simplifying cost structure of CE 19 

#### Cost of loops [15] 

 * loop 15:eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J) -> [eval_xdr3dfcoord_bb5_in(V_size',V_limit',V_i_0',V_is_small_1',V_run_0',V_is_small_2',V_i_1',B',C',D',E',F',G',H',I',J')] 
1
##### Pending set eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J)
* Psum in Loop 15: [it(15)=<1]

###### Computing sum for it(15)=<1  in Loop 15 
   - Applying inductive sum strategy 
     - head Candidate: V_limit-V_run_0 
     - head Candidate: V_size-V_i_0-V_run_0-2 
     - head Candidate: V_size-V_i_1-1 
     - head Candidate: V_limit+V_i_0-V_i_1+1 
     - head Candidate: V_size-V_i_1-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_limit-V_run_0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_size-V_i_0-V_run_0-2 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_limit+V_i_0-V_i_1+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_limit-V_run_0 
     - tail Candidate: V_size-V_i_0-V_run_0-2 
     - tail Candidate: V_size-V_i_1-1 
     - tail Candidate: V_limit+V_i_0-V_i_1+1 
     - tail Candidate: V_size-V_i_1-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_limit-V_run_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_size-V_i_0-V_run_0-2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_limit+V_i_0-V_i_1+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(15)=<V_limit-V_run_0,it(15)=<V_size-V_i_0-V_run_0-2,it(15)=<V_size-V_i_1-1,it(15)=<V_limit+V_i_0-V_i_1+1,it(15)=<V_size-V_i_1-1,it(15)=<V_limit-V_run_0,it(15)=<V_size-V_i_0-V_run_0-2,it(15)=<V_limit+V_i_0-V_i_1+1,it(15)=<V_limit-V_run_0-V_limit'+V_run_0',it(15)=<V_size-V_i_0-V_run_0-V_size'+V_i_0'+V_run_0',it(15)=<V_size-V_i_1-V_size'+V_i_1',it(15)=<V_limit+V_i_0-V_i_1-V_limit'-V_i_0'+V_i_1',it(15)=<V_size-V_i_1-V_size'+V_i_1',it(15)=<V_limit-V_run_0-V_limit'+V_run_0',it(15)=<V_size-V_i_0-V_run_0-V_size'+V_i_0'+V_run_0',it(15)=<V_limit+V_i_0-V_i_1-V_limit'-V_i_0'+V_i_1'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [15] 

#### Simplifying cost structure of phase [15] 

#### Cost of phase [15]:eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J) -> [eval_xdr3dfcoord_bb5_in(V_size',V_limit',V_i_0',V_is_small_1',V_run_0',V_is_small_2',V_i_1',B',C',D',E',F',G',H',I',J')] 
1*it(15)+0
  Such that:it(15) =< V_size-V_i_0-V_run_0
it(15) =< V_size-V_i_0-V_run_0-V_size'+V_i_0'+V_run_0'
it(15) =< V_size-V_i_1
it(15) =< V_size-V_i_1-V_size'+V_i_1'
it(15) =< V_limit+V_i_0-V_i_1+1
it(15) =< V_limit+V_i_0-V_i_1-V_limit'-V_i_0'+V_i_1'
it(15) =< V_limit-V_run_0
it(15) =< V_limit-V_run_0-V_limit'+V_run_0'

#### Simplifying cost structure of chain [[15],18] 

#### Simplifying cost structure of CE 18 

#### Simplifying cost structure of CE 21 

#### Simplifying cost structure of chain [17,19] 

#### Found solution for phase  [15] in the cache 

#### Cost of phase [15]:eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J) -> [eval_xdr3dfcoord_bb5_in(V_size',V_limit',V_i_0',V_is_small_1',V_run_0',V_is_small_2',V_i_1',B',C',D',E',F',G',H',I',J')] 
1*it(15)+0
  Such that:it(15) =< V_size-V_i_0-V_run_0
it(15) =< V_size-V_i_0-V_run_0-V_size'+V_i_0'+V_run_0'
it(15) =< V_size-V_i_1
it(15) =< V_size-V_i_1-V_size'+V_i_1'
it(15) =< V_limit+V_i_0-V_i_1+1
it(15) =< V_limit+V_i_0-V_i_1-V_limit'-V_i_0'+V_i_1'
it(15) =< V_limit-V_run_0
it(15) =< V_limit-V_run_0-V_limit'+V_run_0'

#### Simplifying cost structure of chain [[15],17,19] 

#### Simplifying cost structure of chain [17,18] 

#### Found solution for phase  [15] in the cache 

#### Cost of phase [15]:eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J) -> [eval_xdr3dfcoord_bb5_in(V_size',V_limit',V_i_0',V_is_small_1',V_run_0',V_is_small_2',V_i_1',B',C',D',E',F',G',H',I',J')] 
1*it(15)+0
  Such that:it(15) =< V_size-V_i_0-V_run_0
it(15) =< V_size-V_i_0-V_run_0-V_size'+V_i_0'+V_run_0'
it(15) =< V_size-V_i_1
it(15) =< V_size-V_i_1-V_size'+V_i_1'
it(15) =< V_limit+V_i_0-V_i_1+1
it(15) =< V_limit+V_i_0-V_i_1-V_limit'-V_i_0'+V_i_1'
it(15) =< V_limit-V_run_0
it(15) =< V_limit-V_run_0-V_limit'+V_run_0'

#### Simplifying cost structure of chain [[15],17,18] 

#### Simplifying cost structure of CE 20 

#### Simplifying cost structure of chain [16,19] 

#### Found solution for phase  [15] in the cache 

#### Cost of phase [15]:eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J) -> [eval_xdr3dfcoord_bb5_in(V_size',V_limit',V_i_0',V_is_small_1',V_run_0',V_is_small_2',V_i_1',B',C',D',E',F',G',H',I',J')] 
1*it(15)+0
  Such that:it(15) =< V_size-V_i_0-V_run_0
it(15) =< V_size-V_i_0-V_run_0-V_size'+V_i_0'+V_run_0'
it(15) =< V_size-V_i_1
it(15) =< V_size-V_i_1-V_size'+V_i_1'
it(15) =< V_limit+V_i_0-V_i_1+1
it(15) =< V_limit+V_i_0-V_i_1-V_limit'-V_i_0'+V_i_1'
it(15) =< V_limit-V_run_0
it(15) =< V_limit-V_run_0-V_limit'+V_run_0'

#### Simplifying cost structure of chain [[15],16,19] 

#### Simplifying cost structure of chain [16,18] 

#### Found solution for phase  [15] in the cache 

#### Cost of phase [15]:eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J) -> [eval_xdr3dfcoord_bb5_in(V_size',V_limit',V_i_0',V_is_small_1',V_run_0',V_is_small_2',V_i_1',B',C',D',E',F',G',H',I',J')] 
1*it(15)+0
  Such that:it(15) =< V_size-V_i_0-V_run_0
it(15) =< V_size-V_i_0-V_run_0-V_size'+V_i_0'+V_run_0'
it(15) =< V_size-V_i_1
it(15) =< V_size-V_i_1-V_size'+V_i_1'
it(15) =< V_limit+V_i_0-V_i_1+1
it(15) =< V_limit+V_i_0-V_i_1-V_limit'-V_i_0'+V_i_1'
it(15) =< V_limit-V_run_0
it(15) =< V_limit-V_run_0-V_limit'+V_run_0'

#### Simplifying cost structure of chain [[15],16,18] 
 * Renamed intermediate variables: 
[ (ch([[15],16,18]),it(15))>>s(1)]
 * Renamed intermediate variables: 
[ (ch([[15],16,19]),it(15))>>s(2)]
 * Renamed intermediate variables: 
[ (ch([[15],17,18]),it(15))>>s(3)]
 * Renamed intermediate variables: 
[ (ch([[15],17,19]),it(15))>>s(4)]

#### Cost of chains of eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F,G,H,I,J):
* Chain [[15],18]: 1*it(15)+0
  Such that:it(15) =< V_limit-V_run_0

  with precondition: [V_is_small_1=1,V_is_small_2=1,B=2,F=1,H=1,J=0,V_size=C,V_limit=D,V_i_0=E,V_limit=G,V_i_0+V_run_0+1=V_i_1,V_i_0+V_limit+1=I,V_i_1>=V_i_0+1,V_size>=V_i_0+V_limit+2,V_i_0+V_limit>=V_i_1] 

* Chain [[15],17,19]: 1*it(15)+1
  Such that:it(15) =< V_size-V_i_0-V_run_0

  with precondition: [V_is_small_1=1,V_is_small_2=1,B=2,F=1,H=0,J=0,V_size=C,V_limit=D,V_i_0=E,V_size=I,V_size=V_i_0+G+1,V_i_0+V_run_0+1=V_i_1,V_i_1>=V_i_0+1,V_size>=V_i_1+2,V_i_0+V_limit+1>=V_size] 

* Chain [[15],17,18]: 1*it(15)+1
  Such that:it(15) =< V_limit-V_run_0

  with precondition: [V_is_small_1=1,V_is_small_2=1,B=2,F=1,H=0,J=0,V_size=C,V_limit=D,V_limit=G,V_size=I,V_size=V_i_0+V_limit+1,V_size=V_limit+E+1,V_run_0+V_size=V_i_1+V_limit,V_size>=V_i_1+2,V_i_1+V_limit>=V_size] 

* Chain [[15],16,19]: 1*it(15)+1
  Such that:it(15) =< -V_i_0-V_run_0+I

  with precondition: [V_is_small_1=1,V_is_small_2=1,B=2,F=1,H=0,J=0,V_size=C,V_limit=D,V_i_0=E,V_i_0+V_run_0+1=V_i_1,V_i_0+G+1=I,V_i_1>=V_i_0+1,V_limit>=G,V_size>=V_i_0+G+2,V_i_0+G>=V_i_1+1] 

* Chain [[15],16,18]: 1*it(15)+1
  Such that:it(15) =< V_limit-V_run_0

  with precondition: [V_is_small_1=1,V_is_small_2=1,B=2,F=1,H=0,J=0,V_size=C,V_limit=D,V_i_0=E,V_limit=G,V_i_0+V_run_0+1=V_i_1,V_i_0+V_limit+1=I,V_i_1>=V_i_0+1,V_size>=V_i_0+V_limit+2,V_i_0+V_limit>=V_i_1+1] 

* Chain [19]: 0
  with precondition: [V_is_small_2=0,B=2,H=0,J=0,D=V_limit,V_size=C,V_i_0=E,V_is_small_1=F,V_run_0=G,V_i_0+V_run_0+1=V_i_1,V_i_0+V_run_0+1=I,1>=V_is_small_1,V_is_small_1>=0,V_run_0>=V_is_small_1,V_size>=V_i_0+V_run_0+1] 

* Chain [18]: 0
  with precondition: [B=2,J=0,V_size=C,V_limit=D,V_i_0=E,V_is_small_1=F,V_run_0=G,V_is_small_2=H,V_i_0+V_run_0+1=V_i_1,V_i_0+V_run_0+1=I,1>=V_is_small_1,V_run_0>=V_limit,V_is_small_2+1>=V_is_small_1,V_is_small_1>=V_is_small_2,V_is_small_2+V_run_0>=V_is_small_1,V_size>=V_i_0+V_is_small_2+V_run_0+1] 

* Chain [17,19]: 1
  with precondition: [V_is_small_1=1,V_is_small_2=1,B=2,F=1,H=0,J=0,V_size=V_i_1+1,V_size=C,V_limit=D,V_i_0=E,V_size=I,V_i_0+V_run_0+2=V_size,V_i_0+G+1=V_size,V_size>=V_i_0+2,V_i_0+V_limit+1>=V_size] 

* Chain [17,18]: 1
  with precondition: [V_is_small_1=1,V_is_small_2=1,B=2,F=1,H=0,J=0,V_limit=V_run_0+1,V_limit=D,V_i_0=E,V_limit=G,V_i_0+V_limit+1=V_size,V_i_0+V_limit=V_i_1,V_i_0+V_limit+1=C,V_i_0+V_limit+1=I,V_limit>=1] 

* Chain [16,19]: 1
  with precondition: [V_is_small_1=1,V_is_small_2=1,B=2,F=1,H=0,J=0,I=V_i_1+1,V_size=C,V_limit=D,V_i_0=E,V_i_0+V_run_0+2=I,V_i_0+G+1=I,I>=V_i_0+2,V_size>=I+1,V_i_0+V_limit+1>=I] 

* Chain [16,18]: 1
  with precondition: [V_is_small_1=1,V_is_small_2=1,B=2,F=1,H=0,J=0,V_limit=V_run_0+1,V_size=C,V_limit=D,V_i_0=E,V_limit=G,V_i_0+V_limit=V_i_1,V_i_0+V_limit+1=I,V_limit>=1,V_size>=V_i_0+V_limit+2] 


#### Simplifying cost structure of CE 22 

#### Computing cost of phase [20] 

#### Simplifying cost structure of CE 23 

#### Cost of loops [20] 

 * loop 20:eval_xdr3dfcoord_bb8_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,V_k_0,B,C,D,E) -> [eval_xdr3dfcoord_bb8_in(V_size',V_limit',V_i_0',V_is_small_1',V_run_0',V_is_small_2',V_i_1',V_k_0',B',C',D',E')] 
1
##### Pending set eval_xdr3dfcoord_bb8_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,V_k_0,B,C,D,E)
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for it(20)=<1  in Loop 20 
   - Applying inductive sum strategy 
     - head Candidate: V_run_0/3-V_k_0/3 
     - head Candidate: V_run_0/3-V_k_0/3 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_run_0/3-V_k_0/3 
     - tail Candidate: V_run_0/3-V_k_0/3 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(20)=<V_run_0/3-V_k_0/3,it(20)=<V_run_0/3-V_k_0/3,it(20)=<V_run_0/3-V_k_0/3-V_run_0'/3+V_k_0'/3,it(20)=<V_run_0/3-V_k_0/3-V_run_0'/3+V_k_0'/3] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [20] 

#### Simplifying cost structure of phase [20] 

#### Cost of phase [20]:eval_xdr3dfcoord_bb8_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,V_k_0,B,C,D,E) -> [eval_xdr3dfcoord_bb8_in(V_size',V_limit',V_i_0',V_is_small_1',V_run_0',V_is_small_2',V_i_1',V_k_0',B',C',D',E')] 
1*it(20)+0
  Such that:it(20) =< V_run_0/3-V_k_0/3
it(20) =< V_run_0/3-V_k_0/3-V_run_0'/3+V_k_0'/3

#### Simplifying cost structure of chain [[20],21] 

#### Cost of chains of eval_xdr3dfcoord_bb8_in(V_size,V_limit,V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_i_1,V_k_0,B,C,D,E):
* Chain [[20],21]: 1*it(20)+0
  Such that:it(20) =< V_run_0/3-V_k_0/3

  with precondition: [B=3,V_size=C,V_limit=D,V_i_1=E,V_run_0>=V_k_0+1] 

* Chain [21]: 0
  with precondition: [B=3,C=V_size,D=V_limit,E=V_i_1,V_k_0>=V_run_0] 


#### Simplifying cost structure of CE 24 

#### Simplifying cost structure of CE 33 

#### Simplifying cost structure of CE 34 

#### Simplifying cost structure of chain [28,29] 

#### Computing cost of phase [22,23,24,25] 
 * Renamed intermediate variables: 
[ (eq(27,1),s(1))>>s(5), (eq(27,1),s(2))>>s(6)]
 * Renamed intermediate variables: 
[ (eq(27,2),it(20))>>s(7)]

#### Simplifying cost structure of CE 27 
 * Renamed intermediate variables: 
[ (it(22),s(5))>>s(8), (it(22),s(6))>>s(9), (it(22),s(7))>>s(10)]
 * Renamed intermediate variables: 
[ (eq(29,1),it(15))>>s(11)]
 * Renamed intermediate variables: 
[ (eq(29,2),it(20))>>s(12)]

#### Simplifying cost structure of CE 29 
 * Renamed intermediate variables: 
[ (it(23),s(11))>>s(13), (it(23),s(12))>>s(14)]

#### Simplifying cost structure of CE 30 

#### Simplifying cost structure of CE 31 

#### Simplifying cost structure of CE 32 
 * Renamed intermediate variables: 
[ (eq(25,2),it(20))>>s(15)]

#### Simplifying cost structure of CE 25 
 * Renamed intermediate variables: 
[ (it(25),s(15))>>s(16)]

#### Cost of loops [22,23,24,25] 

 * loop 22:eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) -> [eval_xdr3dfcoord_bb1_in(V_size',V_limit',V_i_0',B')] 
1*s(8)+1*s(9)+1*s(10)+4
  Such that:s(8) =< V_limit
s(9) =< -V_i_0+V_i_0'
s(10) =< -V_i_0/3+V_i_0'/3

 * loop 23:eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) -> [eval_xdr3dfcoord_bb1_in(V_size',V_limit',V_i_0',B')] 
1*s(13)+1*s(14)+3
  Such that:s(13) =< -V_i_0+V_i_0'
s(14) =< -V_i_0/3+V_i_0'/3

 * loop 24:eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) -> [eval_xdr3dfcoord_bb1_in(V_size',V_limit',V_i_0',B')] 
3
 * loop 25:eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) -> [eval_xdr3dfcoord_bb1_in(V_size',V_limit',V_i_0',B')] 
1*s(16)+4
  Such that:s(16) =< 1/3

##### Pending set eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)
* Psum in Loop 22: [it(22)=<1,s(17)=<V_limit,s(18)=< -V_i_0+V_i_0',s(19)=< -V_i_0/3+V_i_0'/3]
* Psum in Loop 23: [it(23)=<1,s(20)=< -V_i_0+V_i_0',s(21)=< -V_i_0/3+V_i_0'/3]
* Psum in Loop 24: [it(24)=<1]
* Psum in Loop 25: [it(25)=<1,s(22)=<1/3]

###### Computing sum for it(22)=<1  in Loop 22 
   - Applying inductive sum strategy 
     - head Candidate: V_size-V_i_0-1 
       - Loop 23 is collaborative and bounds [it(23)] 
       - Loop 24 is collaborative and bounds [it(24)] 
       - Loop 25 is collaborative and bounds [it(25)] 
     - head Candidate: V_size/3-V_i_0/3-1 
       - Loop 23 is collaborative and bounds [s(21)] 
       - Loop 24 is collaborative
       - Loop 25 is collaborative and bounds [s(22)] 
     - tail Candidate: V_size-V_i_0-1 
       - Loop 23 is collaborative and bounds [it(23)] 
       - Loop 24 is collaborative and bounds [it(24)] 
       - Loop 25 is collaborative and bounds [it(25)] 
     - tail Candidate: V_size/3-V_i_0/3-1 
       - Loop 23 is collaborative and bounds [s(21)] 
       - Loop 24 is collaborative
       - Loop 25 is collaborative and bounds [s(22)] 
 * Adding constraints: [it(22)+it(23)+it(24)+it(25)=<V_size-V_i_0-1,it(22)+s(21)+s(22)=<V_size/3-V_i_0/3-1,it(22)+it(23)+it(24)+it(25)=<V_size-V_i_0-V_size'+V_i_0',it(22)+s(21)+s(22)=<V_size/3-V_i_0/3-V_size'/3+V_i_0'/3] 

##### Pending set eval_xdr3dfcoord_0(V_size,V_limit,B)
* Psum in Loop 22: [s(17)=<V_limit,s(18)=< -V_i_0+V_i_0',s(19)=< -V_i_0/3+V_i_0'/3]
* Psum in Loop 23: [it(23)=<1,s(20)=< -V_i_0+V_i_0',s(21)=< -V_i_0/3+V_i_0'/3]
* Psum in Loop 24: [it(24)=<1]
* Psum in Loop 25: [it(25)=<1,s(22)=<1/3]

###### Computing sum for s(17)=<V_limit  in Loop 22 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1)=<V_limit] 
 * Adding constraints: [s(17)=<it(22)*aux(1)] 

##### Pending set eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)
* Pmax/min: [aux(1)=<V_limit]
* Psum in Loop 22: [s(18)=< -V_i_0+V_i_0',s(19)=< -V_i_0/3+V_i_0'/3]
* Psum in Loop 23: [it(23)=<1,s(20)=< -V_i_0+V_i_0',s(21)=< -V_i_0/3+V_i_0'/3]
* Psum in Loop 24: [it(24)=<1]
* Psum in Loop 25: [it(25)=<1,s(22)=<1/3]

###### Computing max_min for aux(1)=<V_limit  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(1)=<V_limit] 

##### Pending set eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)
* Psum in Loop 22: [s(18)=< -V_i_0+V_i_0',s(19)=< -V_i_0/3+V_i_0'/3]
* Psum in Loop 23: [it(23)=<1,s(20)=< -V_i_0+V_i_0',s(21)=< -V_i_0/3+V_i_0'/3]
* Psum in Loop 24: [it(24)=<1]
* Psum in Loop 25: [it(25)=<1,s(22)=<1/3]

###### Computing sum for s(18)=< -V_i_0+V_i_0'  in Loop 22 
   - Applying inductive sum strategy 
     - head Candidate: V_size-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_size-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(23)+it(24)+it(25)+s(18)=<V_size-V_i_0-1,it(23)+it(24)+it(25)+s(18)=<V_size-V_i_0-V_size'+V_i_0'] 

##### Pending set eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)
* Psum in Loop 22: [s(19)=< -V_i_0/3+V_i_0'/3]
* Psum in Loop 23: [it(23)=<1,s(20)=< -V_i_0+V_i_0',s(21)=< -V_i_0/3+V_i_0'/3]
* Psum in Loop 24: [it(24)=<1]
* Psum in Loop 25: [it(25)=<1,s(22)=<1/3]

###### Computing sum for s(19)=< -V_i_0/3+V_i_0'/3  in Loop 22 
   - Found a solution using cacheing 
 * Adding constraints: [s(19)=<aux(2)* (1/3),aux(2)+it(23)+it(24)+it(25)=<V_size-V_i_0-1,aux(2)+it(23)+it(24)+it(25)=<V_size-V_i_0-V_size'+V_i_0'] 

##### Pending set eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)
* Psum in Loop 23: [it(23)=<1,s(20)=< -V_i_0+V_i_0',s(21)=< -V_i_0/3+V_i_0'/3]
* Psum in Loop 24: [it(24)=<1]
* Psum in Loop 25: [it(25)=<1,s(22)=<1/3]

###### Computing sum for it(23)=<1  in Loop 23 
   - Applying inductive sum strategy 
     - head Candidate: V_size-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_size/2-V_i_0/2-1 
       - Loop 22 is collaborative
       - Loop 24 is collaborative
       - Loop 25 is collaborative and bounds [it(25)] 
     - head Candidate: V_size/2-V_limit/2-V_i_0/2-1/2 
       - Loop 22 is collaborative
       - Loop 24 is collaborative
       - Loop 25 is collaborative
     - tail Candidate: V_size-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_size/2-V_i_0/2-1 
       - Loop 22 is collaborative
       - Loop 24 is collaborative
       - Loop 25 is collaborative and bounds [it(25)] 
     - tail Candidate: V_size/2-V_limit/2-V_i_0/2-1/2 
       - Loop 22 is collaborative
       - Loop 24 is collaborative
       - Loop 25 is collaborative and bounds [it(25)] 
 * Adding constraints: [it(22)+it(23)+it(24)+it(25)=<V_size-V_i_0-1,it(23)+it(25)=<V_size/2-V_i_0/2-1,it(23)=<V_size/2-V_limit/2-V_i_0/2-1/2,it(22)+it(23)+it(24)+it(25)=<V_size-V_i_0-V_size'+V_i_0',it(23)+it(25)=<V_size/2-V_i_0/2-V_size'/2+V_i_0'/2,it(23)+it(25)=<V_size/2-V_limit/2-V_i_0/2-V_size'/2+V_limit'/2+V_i_0'/2] 

##### Pending set eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)
* Psum in Loop 23: [s(20)=< -V_i_0+V_i_0',s(21)=< -V_i_0/3+V_i_0'/3]
* Psum in Loop 24: [it(24)=<1]
* Psum in Loop 25: [it(25)=<1,s(22)=<1/3]

###### Computing sum for s(20)=< -V_i_0+V_i_0'  in Loop 23 
   - Applying inductive sum strategy 
     - head Candidate: V_size-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_size-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(22)+it(24)+it(25)+s(20)=<V_size-V_i_0-1,it(22)+it(24)+it(25)+s(20)=<V_size-V_i_0-V_size'+V_i_0'] 

##### Pending set eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)
* Psum in Loop 23: [s(21)=< -V_i_0/3+V_i_0'/3]
* Psum in Loop 24: [it(24)=<1]
* Psum in Loop 25: [it(25)=<1,s(22)=<1/3]

###### Computing sum for s(21)=< -V_i_0/3+V_i_0'/3  in Loop 23 
   - Found a solution using cacheing 
 * Adding constraints: [s(21)=<aux(3)* (1/3),aux(3)+it(22)+it(24)+it(25)=<V_size-V_i_0-1,aux(3)+it(22)+it(24)+it(25)=<V_size-V_i_0-V_size'+V_i_0'] 

##### Pending set eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)
* Psum in Loop 24: [it(24)=<1]
* Psum in Loop 25: [it(25)=<1,s(22)=<1/3]

###### Computing sum for it(24)=<1  in Loop 24 
   - Applying inductive sum strategy 
     - head Candidate: V_size-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_size-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_size-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_size-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(22)+it(23)+it(24)+it(25)=<V_size-V_i_0-1,it(22)+it(23)+it(24)+it(25)=<V_size-V_i_0-1,it(22)+it(23)+it(24)+it(25)=<V_size-V_i_0-V_size'+V_i_0',it(22)+it(23)+it(24)+it(25)=<V_size-V_i_0-V_size'+V_i_0'] 

##### Pending set eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)
* Psum in Loop 25: [it(25)=<1,s(22)=<1/3]

###### Computing sum for it(25)=<1  in Loop 25 
   - Applying inductive sum strategy 
     - head Candidate: V_size-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_size/2-V_i_0/2-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_size-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_size/2-V_i_0/2-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(22)+it(23)+it(24)+it(25)=<V_size-V_i_0-1,it(23)+it(25)=<V_size/2-V_i_0/2-1,it(22)+it(23)+it(24)+it(25)=<V_size-V_i_0-V_size'+V_i_0',it(23)+it(25)=<V_size/2-V_i_0/2-V_size'/2+V_i_0'/2] 

##### Pending set eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B)
* Psum in Loop 25: [s(22)=<1/3]

###### Computing sum for s(22)=<1/3  in Loop 25 
   - Found a solution using cacheing 
 * Adding constraints: [s(22)=<aux(4)* (1/3),aux(4)+it(22)+it(23)+it(24)=<V_size-V_i_0-1,aux(4)+it(23)=<V_size/2-V_i_0/2-1,aux(4)+it(22)+it(23)+it(24)=<V_size-V_i_0-V_size'+V_i_0',aux(4)+it(23)=<V_size/2-V_i_0/2-V_size'/2+V_i_0'/2] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [22,23,24,25] 

#### Simplifying cost structure of phase [22,23,24,25] 
 * Joined equivalent variables [it(24),s(18),s(20)] into it(24)
 * Joined equivalent variables [aux(2),aux(3)] into aux(2)

#### Cost of phase [22,23,24,25]:eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) -> [eval_xdr3dfcoord_bb1_in(V_size',V_limit',V_i_0',B')] 
4*it(22)+3*it(23)+5*it(24)+4*it(25)+1*s(17)+1*s(19)+1*s(21)+1*s(22)+0
  Such that:it(23) =< V_size/2-V_limit/2-V_i_0/2
aux(1) =< V_limit
aux(5) =< V_size-V_i_0
aux(6) =< V_size-V_i_0-V_size'+V_i_0'
aux(7) =< V_size/2-V_limit/2-V_i_0/2-V_size'/2+V_limit'/2+V_i_0'/2
aux(8) =< V_size/2-V_i_0/2
aux(9) =< V_size/2-V_i_0/2-V_size'/2+V_i_0'/2
aux(10) =< V_size/3-V_i_0/3
aux(11) =< V_size/3-V_i_0/3-V_size'/3+V_i_0'/3
aux(2) =< aux(5)
aux(4) =< aux(5)
it(22) =< aux(5)
it(23) =< aux(5)
it(24) =< aux(5)
it(25) =< aux(5)
aux(2) =< aux(6)
aux(4) =< aux(6)
it(22) =< aux(6)
it(23) =< aux(6)
it(24) =< aux(6)
it(25) =< aux(6)
it(23) =< aux(7)
it(25) =< aux(7)
aux(4) =< aux(8)
it(23) =< aux(8)
it(25) =< aux(8)
aux(4) =< aux(9)
it(23) =< aux(9)
it(25) =< aux(9)
it(22) =< aux(10)
s(21) =< aux(10)
s(22) =< aux(10)
it(22) =< aux(11)
s(21) =< aux(11)
s(22) =< aux(11)
s(22) =< aux(4)* (1/3)
s(21) =< aux(2)* (1/3)
s(19) =< aux(2)* (1/3)
s(17) =< it(22)*aux(1)

#### Simplifying cost structure of chain [[22,23,24,25],28,29] 
 * Joined equivalent variables [aux(12),aux(5),aux(6)] into aux(12)
 * Joined equivalent variables [aux(13),aux(7),aux(8),aux(9)] into aux(13)
 * Joined equivalent variables [aux(14),aux(10),aux(11)] into aux(14)
 * Joined equivalent variables [aux(12),aux(2)] into aux(12)
 * Renamed intermediate variables: 
[ (eq(26,2),it(20))>>s(23)]

#### Simplifying cost structure of CE 26 

#### Simplifying cost structure of chain [27,29] 

#### Found solution for phase  [22,23,24,25] in the cache 

#### Cost of phase [22,23,24,25]:eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) -> [eval_xdr3dfcoord_bb1_in(V_size',V_limit',V_i_0',B')] 
4*it(22)+3*it(23)+5*it(24)+4*it(25)+1*s(17)+1*s(19)+1*s(21)+1*s(22)+0
  Such that:it(23) =< V_size/2-V_limit/2-V_i_0/2
aux(1) =< V_limit
aux(5) =< V_size-V_i_0
aux(6) =< V_size-V_i_0-V_size'+V_i_0'
aux(7) =< V_size/2-V_limit/2-V_i_0/2-V_size'/2+V_limit'/2+V_i_0'/2
aux(8) =< V_size/2-V_i_0/2
aux(9) =< V_size/2-V_i_0/2-V_size'/2+V_i_0'/2
aux(10) =< V_size/3-V_i_0/3
aux(11) =< V_size/3-V_i_0/3-V_size'/3+V_i_0'/3
aux(2) =< aux(5)
aux(4) =< aux(5)
it(22) =< aux(5)
it(23) =< aux(5)
it(24) =< aux(5)
it(25) =< aux(5)
aux(2) =< aux(6)
aux(4) =< aux(6)
it(22) =< aux(6)
it(23) =< aux(6)
it(24) =< aux(6)
it(25) =< aux(6)
it(23) =< aux(7)
it(25) =< aux(7)
aux(4) =< aux(8)
it(23) =< aux(8)
it(25) =< aux(8)
aux(4) =< aux(9)
it(23) =< aux(9)
it(25) =< aux(9)
it(22) =< aux(10)
s(21) =< aux(10)
s(22) =< aux(10)
it(22) =< aux(11)
s(21) =< aux(11)
s(22) =< aux(11)
s(22) =< aux(4)* (1/3)
s(21) =< aux(2)* (1/3)
s(19) =< aux(2)* (1/3)
s(17) =< it(22)*aux(1)

#### Simplifying cost structure of chain [[22,23,24,25],27,29] 
 * Joined equivalent variables [aux(15),aux(5),aux(6)] into aux(15)
 * Joined equivalent variables [aux(16),aux(7),aux(8),aux(9)] into aux(16)
 * Joined equivalent variables [aux(17),aux(10),aux(11)] into aux(17)
 * Joined equivalent variables [aux(15),aux(2)] into aux(15)
 * Renamed intermediate variables: 
[ (eq(28,1),s(4))>>s(24), (eq(28,1),s(3))>>s(25)]
 * Renamed intermediate variables: 
[ (eq(28,2),it(20))>>s(26)]

#### Simplifying cost structure of CE 28 

#### Simplifying cost structure of chain [26,29] 

#### Found solution for phase  [22,23,24,25] in the cache 

#### Cost of phase [22,23,24,25]:eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) -> [eval_xdr3dfcoord_bb1_in(V_size',V_limit',V_i_0',B')] 
4*it(22)+3*it(23)+5*it(24)+4*it(25)+1*s(17)+1*s(19)+1*s(21)+1*s(22)+0
  Such that:it(23) =< V_size/2-V_limit/2-V_i_0/2
aux(1) =< V_limit
aux(5) =< V_size-V_i_0
aux(6) =< V_size-V_i_0-V_size'+V_i_0'
aux(7) =< V_size/2-V_limit/2-V_i_0/2-V_size'/2+V_limit'/2+V_i_0'/2
aux(8) =< V_size/2-V_i_0/2
aux(9) =< V_size/2-V_i_0/2-V_size'/2+V_i_0'/2
aux(10) =< V_size/3-V_i_0/3
aux(11) =< V_size/3-V_i_0/3-V_size'/3+V_i_0'/3
aux(2) =< aux(5)
aux(4) =< aux(5)
it(22) =< aux(5)
it(23) =< aux(5)
it(24) =< aux(5)
it(25) =< aux(5)
aux(2) =< aux(6)
aux(4) =< aux(6)
it(22) =< aux(6)
it(23) =< aux(6)
it(24) =< aux(6)
it(25) =< aux(6)
it(23) =< aux(7)
it(25) =< aux(7)
aux(4) =< aux(8)
it(23) =< aux(8)
it(25) =< aux(8)
aux(4) =< aux(9)
it(23) =< aux(9)
it(25) =< aux(9)
it(22) =< aux(10)
s(21) =< aux(10)
s(22) =< aux(10)
it(22) =< aux(11)
s(21) =< aux(11)
s(22) =< aux(11)
s(22) =< aux(4)* (1/3)
s(21) =< aux(2)* (1/3)
s(19) =< aux(2)* (1/3)
s(17) =< it(22)*aux(1)

#### Simplifying cost structure of chain [[22,23,24,25],26,29] 
 * Joined equivalent variables [aux(18),aux(5),aux(6),aux(7),aux(9),aux(11)] into aux(18)
 * Joined equivalent variables [aux(19),aux(1)] into aux(19)
 * Joined equivalent variables [s(24),s(26)] into s(24)
 * Joined equivalent variables [aux(18),aux(2)] into aux(18)
 * Joined equivalent variables [it(24),s(24)] into it(24)
 * Renamed intermediate variables: 
[ (ch([26,29]),s(24))>>s(27), (ch([26,29]),s(26))>>s(28), (ch([26,29]),s(25))>>s(29)]
 * Renamed intermediate variables: 
[ (ch([27,29]),s(23))>>s(30)]
 * Renamed intermediate variables: 
[ (ch([[22,23,24,25],28,29]),it(23))>>s(31), (ch([[22,23,24,25],28,29]),aux(1))>>s(32), (ch([[22,23,24,25],28,29]),aux(12))>>s(33), (ch([[22,23,24,25],28,29]),aux(13))>>s(34), (ch([[22,23,24,25],28,29]),aux(14))>>s(35), (ch([[22,23,24,25],28,29]),aux(4))>>s(36), (ch([[22,23,24,25],28,29]),it(22))>>s(37), (ch([[22,23,24,25],28,29]),it(24))>>s(38), (ch([[22,23,24,25],28,29]),it(25))>>s(39), (ch([[22,23,24,25],28,29]),s(21))>>s(40), (ch([[22,23,24,25],28,29]),s(22))>>s(41), (ch([[22,23,24,25],28,29]),s(19))>>s(42), (ch([[22,23,24,25],28,29]),s(17))>>s(43)]
 * Joined equivalent variables [aux(20),s(33)] into aux(20)
 * Joined equivalent variables [aux(21),s(35)] into aux(21)
 * Joined equivalent variables [aux(22),s(32)] into aux(22)
 * Joined equivalent variables [s(27),s(38)] into s(27)
 * Renamed intermediate variables: 
[ (ch([[22,23,24,25],26,29]),it(23))>>s(44), (ch([[22,23,24,25],26,29]),aux(8))>>s(45), (ch([[22,23,24,25],26,29]),aux(10))>>s(46), (ch([[22,23,24,25],26,29]),aux(18))>>s(47), (ch([[22,23,24,25],26,29]),aux(19))>>s(48), (ch([[22,23,24,25],26,29]),it(24))>>s(49), (ch([[22,23,24,25],26,29]),s(25))>>s(50), (ch([[22,23,24,25],26,29]),aux(4))>>s(51), (ch([[22,23,24,25],26,29]),it(22))>>s(52), (ch([[22,23,24,25],26,29]),it(25))>>s(53), (ch([[22,23,24,25],26,29]),s(21))>>s(54), (ch([[22,23,24,25],26,29]),s(22))>>s(55), (ch([[22,23,24,25],26,29]),s(19))>>s(56), (ch([[22,23,24,25],26,29]),s(17))>>s(57)]
 * Renamed intermediate variables: 
[ (ch([[22,23,24,25],27,29]),s(23))>>s(58), (ch([[22,23,24,25],27,29]),it(23))>>s(59), (ch([[22,23,24,25],27,29]),aux(1))>>s(60), (ch([[22,23,24,25],27,29]),aux(15))>>s(61), (ch([[22,23,24,25],27,29]),aux(16))>>s(62), (ch([[22,23,24,25],27,29]),aux(17))>>s(63), (ch([[22,23,24,25],27,29]),aux(4))>>s(64), (ch([[22,23,24,25],27,29]),it(22))>>s(65), (ch([[22,23,24,25],27,29]),it(24))>>s(66), (ch([[22,23,24,25],27,29]),it(25))>>s(67), (ch([[22,23,24,25],27,29]),s(21))>>s(68), (ch([[22,23,24,25],27,29]),s(22))>>s(69), (ch([[22,23,24,25],27,29]),s(19))>>s(70), (ch([[22,23,24,25],27,29]),s(17))>>s(71)]
 * Joined equivalent variables [aux(23),s(47),s(61)] into aux(23)
 * Joined equivalent variables [aux(25),s(45),s(62)] into aux(25)
 * Joined equivalent variables [aux(26),s(46),s(63)] into aux(26)
 * Joined equivalent variables [aux(27),s(48),s(60)] into aux(27)
 * Joined equivalent variables [s(56),s(70)] into s(56)
 * Joined equivalent variables [s(49),s(66)] into s(49)
 * Joined equivalent variables [s(44),s(59)] into s(44)
 * Joined equivalent variables [s(53),s(67)] into s(53)
 * Joined equivalent variables [s(52),s(65)] into s(52)
 * Joined equivalent variables [s(51),s(64)] into s(51)
 * Joined equivalent variables [s(57),s(71)] into s(57)

#### Cost of chains of eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B):
* Chain [[22,23,24,25],28,29]: 4*it(22)+3*it(23)+5*it(24)+4*it(25)+1*s(17)+1*s(19)+1*s(21)+1*s(22)+3
  Such that:it(23) =< V_size/2-V_limit/2-V_i_0/2
aux(1) =< V_limit
aux(12) =< V_size-V_i_0
aux(13) =< V_size/2-V_i_0/2
aux(14) =< V_size/3-V_i_0/3
aux(4) =< aux(12)
it(22) =< aux(12)
it(23) =< aux(12)
it(24) =< aux(12)
it(25) =< aux(12)
it(23) =< aux(13)
it(25) =< aux(13)
aux(4) =< aux(13)
it(22) =< aux(14)
s(21) =< aux(14)
s(22) =< aux(14)
s(22) =< aux(4)* (1/3)
s(21) =< aux(12)* (1/3)
s(19) =< aux(12)* (1/3)
s(17) =< it(22)*aux(1)

  with precondition: [B=4,V_i_0>=0,V_size>=V_i_0+2] 

* Chain [[22,23,24,25],27,29]: 4*it(22)+3*it(23)+5*it(24)+4*it(25)+1*s(17)+1*s(19)+1*s(21)+1*s(22)+1*s(23)+4
  Such that:s(23) =< 1/3
it(23) =< V_size/2-V_limit/2-V_i_0/2
aux(1) =< V_limit
aux(15) =< V_size-V_i_0
aux(16) =< V_size/2-V_i_0/2
aux(17) =< V_size/3-V_i_0/3
aux(4) =< aux(15)
it(22) =< aux(15)
it(23) =< aux(15)
it(24) =< aux(15)
it(25) =< aux(15)
it(23) =< aux(16)
it(25) =< aux(16)
aux(4) =< aux(16)
it(22) =< aux(17)
s(21) =< aux(17)
s(22) =< aux(17)
s(22) =< aux(4)* (1/3)
s(21) =< aux(15)* (1/3)
s(19) =< aux(15)* (1/3)
s(17) =< it(22)*aux(1)

  with precondition: [B=4,V_limit>=1,V_i_0>=0,V_size>=V_i_0+3] 

* Chain [[22,23,24,25],26,29]: 4*it(22)+3*it(23)+7*it(24)+4*it(25)+1*s(17)+1*s(19)+1*s(21)+1*s(22)+1*s(25)+4
  Such that:it(23) =< V_size/2-V_limit/2-V_i_0/2
aux(8) =< V_size/2-V_i_0/2
aux(10) =< V_size/3-V_i_0/3
aux(18) =< V_size-V_i_0
aux(19) =< V_limit
it(24) =< aux(18)
s(25) =< aux(19)
aux(4) =< aux(18)
it(22) =< aux(18)
it(23) =< aux(18)
it(25) =< aux(18)
aux(4) =< aux(8)
it(23) =< aux(8)
it(25) =< aux(8)
it(22) =< aux(10)
s(21) =< aux(10)
s(22) =< aux(10)
s(21) =< aux(18)
s(22) =< aux(18)
s(22) =< aux(4)* (1/3)
s(21) =< aux(18)* (1/3)
s(19) =< aux(18)* (1/3)
s(17) =< it(22)*aux(19)

  with precondition: [B=4,V_limit>=2,V_i_0>=0,V_size>=V_i_0+4] 

* Chain [29]: 0
  with precondition: [B=4,V_i_0>=0,V_i_0>=V_size] 

* Chain [28,29]: 3
  with precondition: [B=4,V_i_0+1=V_size,V_i_0>=0] 

* Chain [27,29]: 1*s(23)+4
  Such that:s(23) =< 1/3

  with precondition: [B=4,V_i_0+2=V_size,V_limit>=1,V_i_0>=0] 

* Chain [26,29]: 1*s(24)+1*s(25)+1*s(26)+4
  Such that:s(24) =< V_size-V_i_0
s(26) =< V_size/3-V_i_0/3
s(25) =< V_limit

  with precondition: [B=4,V_i_0>=0,V_size>=V_i_0+3,V_i_0+V_limit+1>=V_size] 


#### Simplifying cost structure of CE 36 

#### Simplifying cost structure of CE 38 
 * Renamed intermediate variables: 
[ (eq(35,1),s(30))>>s(72), (eq(35,1),s(31))>>s(73), (eq(35,1),s(34))>>s(74), (eq(35,1),aux(20))>>s(75), (eq(35,1),aux(21))>>s(76), (eq(35,1),aux(22))>>s(77), (eq(35,1),s(27))>>s(78), (eq(35,1),s(28))>>s(79), (eq(35,1),s(29))>>s(80), (eq(35,1),s(36))>>s(81), (eq(35,1),s(37))>>s(82), (eq(35,1),s(39))>>s(83), (eq(35,1),s(40))>>s(84), (eq(35,1),s(41))>>s(85), (eq(35,1),s(42))>>s(86), (eq(35,1),s(43))>>s(87)]

#### Simplifying cost structure of CE 35 
 * Renamed intermediate variables: 
[ (eq(37,1),s(58))>>s(88), (eq(37,1),aux(23))>>s(89), (eq(37,1),aux(24))>>s(90), (eq(37,1),aux(25))>>s(91), (eq(37,1),aux(26))>>s(92), (eq(37,1),aux(27))>>s(93), (eq(37,1),s(44))>>s(94), (eq(37,1),s(51))>>s(95), (eq(37,1),s(52))>>s(96), (eq(37,1),s(49))>>s(97), (eq(37,1),s(53))>>s(98), (eq(37,1),s(68))>>s(99), (eq(37,1),s(69))>>s(100), (eq(37,1),s(56))>>s(101), (eq(37,1),s(57))>>s(102), (eq(37,1),s(50))>>s(103), (eq(37,1),s(54))>>s(104), (eq(37,1),s(55))>>s(105)]

#### Simplifying cost structure of CE 37 
 * Joined equivalent variables [aux(29),s(75),s(89)] into aux(29)
 * Joined equivalent variables [aux(30),s(74),s(91)] into aux(30)
 * Joined equivalent variables [aux(31),s(90)] into aux(31)
 * Joined equivalent variables [aux(32),s(76),s(92)] into aux(32)
 * Joined equivalent variables [aux(33),s(77),s(93)] into aux(33)
 * Joined equivalent variables [s(72),s(88)] into s(72)
 * Joined equivalent variables [s(86),s(101)] into s(86)
 * Joined equivalent variables [s(84),s(99)] into s(84)
 * Joined equivalent variables [s(78),s(97)] into s(78)
 * Joined equivalent variables [s(83),s(98)] into s(83)
 * Joined equivalent variables [s(73),s(94)] into s(73)
 * Joined equivalent variables [s(82),s(96)] into s(82)
 * Joined equivalent variables [s(80),s(103)] into s(80)
 * Joined equivalent variables [s(81),s(95)] into s(81)
 * Joined equivalent variables [s(85),s(100)] into s(85)
 * Joined equivalent variables [s(87),s(102)] into s(87)

#### Cost of chains of eval_xdr3dfcoord_start(V_size,V_limit,B):
* Chain [32]: 4
  with precondition: [V_size=1] 

* Chain [31]: 1
  with precondition: [0>=V_size] 

* Chain [30]: 2*s(72)+9*s(73)+18*s(78)+1*s(79)+2*s(80)+12*s(82)+12*s(83)+2*s(84)+2*s(85)+3*s(86)+3*s(87)+1*s(104)+1*s(105)+5
  Such that:aux(28) =< 1/3
aux(29) =< V_size
aux(30) =< V_size/2
aux(31) =< V_size/2-V_limit/2
aux(32) =< V_size/3
aux(33) =< V_limit
s(72) =< aux(28)
s(73) =< aux(31)
s(78) =< aux(29)
s(79) =< aux(32)
s(80) =< aux(33)
s(81) =< aux(29)
s(82) =< aux(29)
s(73) =< aux(29)
s(83) =< aux(29)
s(73) =< aux(30)
s(83) =< aux(30)
s(81) =< aux(30)
s(82) =< aux(32)
s(84) =< aux(32)
s(85) =< aux(32)
s(85) =< s(81)* (1/3)
s(84) =< aux(29)* (1/3)
s(86) =< aux(29)* (1/3)
s(87) =< s(82)*aux(33)
s(104) =< aux(32)
s(105) =< aux(32)
s(104) =< aux(29)
s(105) =< aux(29)
s(105) =< s(81)* (1/3)
s(104) =< aux(29)* (1/3)

  with precondition: [V_size>=2] 


Closed-form bounds of eval_xdr3dfcoord_start(V_size,V_limit,B): 
-------------------------------------
* Chain [32] with precondition: [V_size=1] 
    - Upper bound: 4 
    - Complexity: constant 
* Chain [31] with precondition: [0>=V_size] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [30] with precondition: [V_size>=2] 
    - Upper bound: 43*V_size+17/3+nat(V_limit)*2+nat(V_limit)*3*V_size+nat(V_size/2-V_limit/2)*9+7/3*V_size 
    - Complexity: n^2 

### Maximum cost of eval_xdr3dfcoord_start(V_size,V_limit,B): max([3,14/3+nat(V_size)*43+nat(V_limit)*2+nat(V_limit)*3*nat(V_size)+nat(V_size/2-V_limit/2)*9+nat(V_size/3)*7])+1 
Asymptotic class: n^2 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 145 ms.
* Invariants computed in 471 ms.
   - Backward Invariants 300 ms.
   - Transitive Invariants 45 ms.
* Refinement performed in 598 ms.
* Termination proved in 76 ms.
* Upper bounds computed in 1091 ms.
   - Equation cost structures 180 ms.
   - Phase cost structures 279 ms.
   - Chain cost structures 492 ms.
   - Solving cost expressions 7 ms.
* Total analysis performed in 2536 ms.


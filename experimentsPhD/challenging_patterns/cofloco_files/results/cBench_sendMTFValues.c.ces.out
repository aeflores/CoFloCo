Warning: Ignored call to eval_sendMTFValues_stop/1 in equation eval_sendMTFValues_bb7_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_sendMTFValues_10/13,eval_sendMTFValues_9/12,eval_sendMTFValues_bb3_in/12,eval_sendMTFValues_bb4_in/13]
1. recursive : [eval_sendMTFValues_17/9,eval_sendMTFValues_18/9,eval_sendMTFValues_21/9,eval_sendMTFValues_22/9,eval_sendMTFValues_23/10,eval_sendMTFValues_24/10,eval_sendMTFValues__critedge_in/7,eval_sendMTFValues_bb1_in/5,eval_sendMTFValues_bb2_in/5,eval_sendMTFValues_bb5_in/7,eval_sendMTFValues_bb6_in/8,loop_cont_eval_sendMTFValues_bb3_in/8]
2. non_recursive : [eval_sendMTFValues_bb7_in/1]
3. non_recursive : [loop_cont_eval_sendMTFValues_bb1_in/2]
4. non_recursive : [eval_sendMTFValues_6/3]
5. non_recursive : [eval_sendMTFValues_5/3]
6. non_recursive : [eval_sendMTFValues_4/3]
7. non_recursive : [eval_sendMTFValues_3/3]
8. non_recursive : [eval_sendMTFValues_2/3]
9. non_recursive : [eval_sendMTFValues_1/3]
10. non_recursive : [eval_sendMTFValues_0/3]
11. non_recursive : [eval_sendMTFValues_bb0_in/3]
12. non_recursive : [eval_sendMTFValues_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_sendMTFValues_bb3_in/12
1. SCC is partially evaluated into eval_sendMTFValues_bb1_in/5
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into eval_sendMTFValues_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_sendMTFValues_bb3_in/12 
* CE 15 is refined into CE [16] 
* CE 13 is refined into CE [17] 
* CE 14 is refined into CE [18] 


#### Refined cost equations eval_sendMTFValues_bb3_in/12 
* CE 16: eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,V_ge_0,B,C,D,E,F,G,H) = 1+ eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,I,J,C,D,E,F,G,H)
     [V_alphaSize>=V_ge_0+2,V_ge_0+1>=V_gs_0,V_nPart_0>=1,V_ge_0+1=I,J=2,B=2] 
* CE 17: eval_sendMTFValues_bb3_in(A,B,C,D,E,F,A,B,C,D,E,G) = 0
     [E+1>=C,E+1>=B,D>=1,F=2] 
* CE 18: eval_sendMTFValues_bb3_in(A,B,C,D,E,F,A,B,C,D,E,G) = 0
     [E+1>=C,D>=1,G=0,F=2] 

### Cost equations --> "Loop" of eval_sendMTFValues_bb3_in/12 
* CEs [17] --> Loop 10 
* CEs [18] --> Loop 11 
* CEs [16] --> Loop 12 

#### Loops of eval_sendMTFValues_bb3_in/12 
* Loop 10: eval_sendMTFValues_bb3_in(A,B,C,D,E,F,A,B,C,D,E,G) [E+1>=C,E+1>=B,D>=1,F=2] 
* Loop 11: eval_sendMTFValues_bb3_in(A,B,C,D,E,F,A,B,C,D,E,G) [E+1>=C,D>=1,G=0,F=2] 
* Loop 12: eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,V_ge_0,B,C,D,E,F,G,H)->  eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,V_ge_0',B',C,D,E,F,G,H)
                  [V_alphaSize>=V_ge_0+2,V_ge_0+1>=V_gs_0,V_nPart_0>=1,V_ge_0+1=V_ge_0',B'=2,B=2] 

### Ranking functions of CR eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,V_ge_0,B,C,D,E,F,G,H) 
* RF of phase [12]: [V_alphaSize-V_ge_0-1]

#### Partial ranking functions of CR eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,V_ge_0,B,C,D,E,F,G,H) 
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    V_alphaSize-V_ge_0-1

Discarded unfeasible chain [[12]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,V_ge_0,B,C,D,E,F,G,H) 
* [[12],11]
* [[12],10]
* [11]
* [10]


### Merging Chains  eval_sendMTFValues_bb3_in/12 into  External patterns of execution 
* [[11]] --> 1 
* [[11,[12]]] --> 2 
* [[10]] --> 3 
* [[10,[12]]] --> 4 


### Specialization of cost equations eval_sendMTFValues_bb1_in/5 
* CE 12 is refined into CE [19] 
* CE 6 is discarded (unfeasible) 
* CE 10 is discarded (unfeasible) 
* CE 8 is discarded (unfeasible) 
* CE 4 is refined into CE [20,21,22,23] 
* CE 3 is refined into CE [24,25,26,27] 
* CE 5 is refined into CE [28,29,30,31] 
* CE 7 is refined into CE [32,33] 
* CE 9 is refined into CE [34,35] 
* CE 11 is refined into CE [36,37] 


#### Refined cost equations eval_sendMTFValues_bb1_in/5 
* CE 19: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) = 0
     [0>=V_nPart_0,B=3] 
* CE 20: eval_sendMTFValues_bb1_in(A,B,C,A,D) = 2+ eval_sendMTFValues_bb3_in(A,B,C,A,E,F,A,B,C,A,G,H):1+ eval_sendMTFValues_bb1_in(A,B,C,I,J)
     [A>=1,A=I+1,C=G+1,C=E+1,J=3,H=0,F=2,D=3] 
* CE 21: eval_sendMTFValues_bb1_in(A,B,C,A,D) = 2+ eval_sendMTFValues_bb3_in(A,B,C,A,E,F,A,B,C,A,G,H):2+ eval_sendMTFValues_bb1_in(A,B,I,J,K)
     [B>=G+1,G>=C,A>=1,A=J+1,G+1=I,C=E+1,K=3,H=0,F=2,D=3] 
* CE 22: eval_sendMTFValues_bb1_in(A,B,C,A,D) = 2+ eval_sendMTFValues_bb3_in(A,B,C,A,E,F,A,B,C,A,G,H):3+ eval_sendMTFValues_bb1_in(A,B,C,I,J)
     [C>=B,A>=1,A=I+1,C=G+1,C=E+1,J=3,F=2,D=3] 
* CE 23: eval_sendMTFValues_bb1_in(A,B,C,A,D) = 2+ eval_sendMTFValues_bb3_in(A,B,C,A,E,F,A,B,C,A,G,H):4+ eval_sendMTFValues_bb1_in(A,B,B,I,J)
     [B>=C+1,A>=1,A=I+1,B=G+1,C=E+1,J=3,F=2,D=3] 
* CE 24: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) = 2+ eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,C,D,V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,E,F):1+ eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,G,H)
     [V_nPart_0>=1,V_nPart_0=G+1,V_gs_0=E+1,V_gs_0=C+1,H=3,F=0,D=2,B=3] 
* CE 25: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) = 2+ eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,C,D,V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,V_gs_0,E):2+ eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,F,G,H)
     [V_alphaSize>=V_gs_0+1,V_nPart_0>=1,V_nPart_0=G+1,V_gs_0+1=F,V_gs_0=C+1,H=3,E=0,D=2,B=3] 
* CE 26: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) = 2+ eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,C,D,V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,E,F):3+ eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,G,H)
     [V_gs_0>=V_alphaSize,V_nPart_0>=1,V_nPart_0=G+1,V_gs_0=E+1,V_gs_0=C+1,H=3,D=2,B=3] 
* CE 27: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) = 2+ eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,C,V_nPart_0,D,E,V_nGroups,V_alphaSize,F,V_nPart_0,G,H):4+ eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_alphaSize,I,J)
     [V_nPart_0>=1,V_nPart_0=I+1,V_alphaSize=G+1,V_alphaSize=F+1,V_alphaSize=D+2,V_alphaSize=C+1,V_alphaSize=V_gs_0+1,J=3,E=2,B=3] 
* CE 28: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) = 2+ eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,C,D,E,V_nGroups,V_alphaSize,V_gs_0,F,G,H):1+ eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,I,J)
     [V_gs_0=G+1,V_gs_0=D+1,J=3,I=0,H=0,F=1,E=2,C=1,B=3,V_nPart_0=1] 
* CE 29: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) = 2+ eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,C,D,E,V_nGroups,V_alphaSize,V_gs_0,F,G,H):2+ eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,I,J,K)
     [V_alphaSize>=G+1,G>=V_gs_0,G+1=I,V_gs_0=D+1,K=3,J=0,H=0,F=1,E=2,C=1,B=3,V_nPart_0=1] 
* CE 30: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) = 2+ eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,C,D,E,V_nGroups,V_alphaSize,V_gs_0,F,G,H):3+ eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,I,J)
     [V_gs_0>=V_alphaSize,V_gs_0=G+1,V_gs_0=D+1,J=3,I=0,F=1,E=2,C=1,B=3,V_nPart_0=1] 
* CE 31: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) = 2+ eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,C,D,E,V_nGroups,V_alphaSize,V_gs_0,F,G,H):4+ eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_alphaSize,I,J)
     [V_alphaSize>=V_gs_0+1,V_alphaSize=G+1,V_gs_0=D+1,J=3,I=0,F=1,E=2,C=1,B=3,V_nPart_0=1] 
* CE 32: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) = 2+ eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,C,D,V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,E,F):2+ eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,E,G,H)
     [V_alphaSize>=E+1,V_nGroups>=V_nPart_0+1,E>=V_gs_0+1,V_nPart_0>=2,V_nPart_0=G+1,V_gs_0=C+1,H=3,F=0,D=2,B=3] 
* CE 33: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) = 2+ eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,C,D,V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,E,F):4+ eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,G,H,I)
     [V_nGroups>=V_nPart_0+1,V_alphaSize>=V_gs_0+2,V_nPart_0>=2,V_nPart_0=H+1,V_alphaSize=G+1,V_alphaSize=E+1,V_gs_0=C+1,I=3,D=2,B=3] 
* CE 34: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) = 2+ eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,C,D,V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,E,F):2+ eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,G,H,I)
     [V_alphaSize>=E+1,E>=V_gs_0+1,V_nPart_0>=V_nGroups+1,V_nPart_0>=2,V_nPart_0=H+1,E+1=G,V_gs_0=C+1,I=3,F=0,D=2,B=3] 
* CE 35: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) = 2+ eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,C,D,V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,E,F):4+ eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_alphaSize,G,H)
     [V_alphaSize>=V_gs_0+2,V_nPart_0>=V_nGroups+1,V_nPart_0>=2,V_nPart_0=G+1,V_alphaSize=E+1,V_gs_0=C+1,H=3,D=2,B=3] 
* CE 36: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) = 2+ eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,C,D,V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,E,F):2+ eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,G,H,I)
     [V_alphaSize>=E+1,V_nGroups>=V_nPart_0+1,E>=V_gs_0+1,V_nPart_0>=2,V_nPart_0=H+1,E+1=G,V_gs_0=C+1,I=3,F=0,D=2,B=3] 
* CE 37: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) = 2+ eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,C,D,V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,E,F):4+ eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_alphaSize,G,H)
     [V_nGroups>=V_nPart_0+1,V_alphaSize>=V_gs_0+2,V_nPart_0>=2,V_nPart_0=G+1,V_alphaSize=E+1,V_gs_0=C+1,H=3,D=2,B=3] 

### Cost equations --> "Loop" of eval_sendMTFValues_bb1_in/5 
* CEs [32,33] --> Loop 13 
* CEs [36,37] --> Loop 14 
* CEs [34,35] --> Loop 15 
* CEs [20,22] --> Loop 16 
* CEs [21,23] --> Loop 17 
* CEs [25,27] --> Loop 18 
* CEs [24,26,28,30] --> Loop 19 
* CEs [29,31] --> Loop 20 
* CEs [19] --> Loop 21 

#### Loops of eval_sendMTFValues_bb1_in/5 
* Loop 13: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)->  eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0',V_nPart_0',B')
                  [V_alphaSize>=V_gs_0'+1,V_nGroups>=V_nPart_0+1,V_gs_0'>=V_gs_0+1,V_nPart_0>=2,V_nPart_0=V_nPart_0'+1,B'=3,B=3] 
* Loop 14: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)->  eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0',V_nPart_0',B')
                  [V_alphaSize>=V_gs_0',V_nGroups>=V_nPart_0+1,V_gs_0'>=V_gs_0+2,V_nPart_0>=2,V_nPart_0=V_nPart_0'+1,B'=3,B=3] 
* Loop 15: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)->  eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0',V_nPart_0',B')
                  [V_alphaSize>=V_gs_0',V_gs_0'>=V_gs_0+2,V_nPart_0>=V_nGroups+1,V_nPart_0>=2,V_nPart_0=V_nPart_0'+1,B'=3,B=3] 
* Loop 16: eval_sendMTFValues_bb1_in(A,B,C,A,D)->  eval_sendMTFValues_bb1_in(A,B,C,A',B')
                  [A>=1,A=A'+1,B'=3,D=3] 
* Loop 17: eval_sendMTFValues_bb1_in(A,B,C,A,D)->  eval_sendMTFValues_bb1_in(A,B,A',B',C')
                  [B>=A',A'>=C+1,A>=1,A=B'+1,C'=3,D=3] 
* Loop 18: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)->  eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0',V_nPart_0',B')
                  [V_alphaSize>=V_gs_0+1,V_nPart_0>=1,V_nPart_0=V_nPart_0'+1,V_gs_0+1=V_gs_0',B'=3,B=3] 
* Loop 19: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)->  eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0',B')
                  [V_nPart_0>=1,V_nPart_0=V_nPart_0'+1,B'=3,B=3] 
* Loop 20: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)->  eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0',V_nPart_0',B')
                  [V_alphaSize>=V_gs_0',V_gs_0'>=V_gs_0+1,B'=3,V_nPart_0'=0,B=3,V_nPart_0=1] 
* Loop 21: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) [0>=V_nPart_0,B=3] 

### Ranking functions of CR eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) 
* RF of phase [13,14,15,16,17,18,19]: [V_nPart_0]

#### Partial ranking functions of CR eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) 

Discarded unfeasible chain [[13,14,15,16,17,18,19]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) 
* [[13,14,15,16,17,18,19],21]
* [[13,14,15,16,17,18,19],20,21]
* [21]
* [20,21]


### Merging Chains  eval_sendMTFValues_bb1_in/5 into  External patterns of execution 
* [[21,20],[21,20,[13,14,15,16,17,18,19]],[21,[13,14,15,16,17,18,19]]] --> 1 
* [[21]] --> 2 


### Specialization of cost equations eval_sendMTFValues_start/3 
* CE 2 is refined into CE [38,39] 


#### Refined cost equations eval_sendMTFValues_start/3 
* CE 38: eval_sendMTFValues_start(V_nGroups,V_alphaSize,B) = 1+ eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,C,V_nGroups,D):1
     [V_nGroups>=1,D=3,C=0] 
* CE 39: eval_sendMTFValues_start(V_nGroups,V_alphaSize,B) = 1+ eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,C,V_nGroups,D):2
     [0>=V_nGroups,D=3,C=0] 

### Cost equations --> "Loop" of eval_sendMTFValues_start/3 
* CEs [38] --> Loop 22 
* CEs [39] --> Loop 23 

#### Loops of eval_sendMTFValues_start/3 
* Loop 22: eval_sendMTFValues_start(V_nGroups,V_alphaSize,B) [V_nGroups>=1] 
* Loop 23: eval_sendMTFValues_start(V_nGroups,V_alphaSize,B) [0>=V_nGroups] 

### Ranking functions of CR eval_sendMTFValues_start(V_nGroups,V_alphaSize,B) 

#### Partial ranking functions of CR eval_sendMTFValues_start(V_nGroups,V_alphaSize,B) 


### Resulting Chains:eval_sendMTFValues_start(V_nGroups,V_alphaSize,B) 
* [23]
* [22]


### Merging Chains  eval_sendMTFValues_start/3 into  External patterns of execution 
* [[23]] --> 1 
* [[22]] --> 2 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 18 

#### Computing cost of phase [12] 

#### Simplifying cost structure of CE 16 

#### Cost of loops [12] 

 * loop 12:eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,V_ge_0,B,C,D,E,F,G,H) -> [eval_sendMTFValues_bb3_in(V_nGroups',V_alphaSize',V_gs_0',V_nPart_0',V_ge_0',B',C',D',E',F',G',H')] 
1
##### Pending set eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,V_ge_0,B,C,D,E,F,G,H)
* Psum in Loop 12: [it(12)=<1]

###### Computing sum for it(12)=<1  in Loop 12 
   - Applying inductive sum strategy 
     - head Candidate: V_alphaSize-V_ge_0-1 
     - head Candidate: V_alphaSize-V_ge_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_alphaSize-V_ge_0-1 
     - tail Candidate: V_alphaSize-V_ge_0-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(12)=<V_alphaSize-V_ge_0-1,it(12)=<V_alphaSize-V_ge_0-1,it(12)=<V_alphaSize-V_ge_0-V_alphaSize'+V_ge_0',it(12)=<V_alphaSize-V_ge_0-V_alphaSize'+V_ge_0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [12] 

#### Simplifying cost structure of phase [12] 

#### Cost of phase [12]:eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,V_ge_0,B,C,D,E,F,G,H) -> [eval_sendMTFValues_bb3_in(V_nGroups',V_alphaSize',V_gs_0',V_nPart_0',V_ge_0',B',C',D',E',F',G',H')] 
1*it(12)+0
  Such that:it(12) =< V_alphaSize-V_ge_0
it(12) =< V_alphaSize-V_ge_0-V_alphaSize'+V_ge_0'

#### Simplifying cost structure of chain [[12],11] 

#### Simplifying cost structure of CE 17 

#### Found solution for phase  [12] in the cache 

#### Cost of phase [12]:eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,V_ge_0,B,C,D,E,F,G,H) -> [eval_sendMTFValues_bb3_in(V_nGroups',V_alphaSize',V_gs_0',V_nPart_0',V_ge_0',B',C',D',E',F',G',H')] 
1*it(12)+0
  Such that:it(12) =< V_alphaSize-V_ge_0
it(12) =< V_alphaSize-V_ge_0-V_alphaSize'+V_ge_0'

#### Simplifying cost structure of chain [[12],10] 

#### Cost of chains of eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,V_ge_0,B,C,D,E,F,G,H):
* Chain [[12],11]: 1*it(12)+0
  Such that:it(12) =< -V_ge_0+G

  with precondition: [B=2,H=0,V_nGroups=C,V_alphaSize=D,V_gs_0=E,V_nPart_0=F,V_nPart_0>=1,V_ge_0+1>=V_gs_0,G>=V_ge_0+1,V_alphaSize>=G+1] 

* Chain [[12],10]: 1*it(12)+0
  Such that:it(12) =< V_alphaSize-V_ge_0

  with precondition: [B=2,V_nGroups=C,V_alphaSize=D,V_gs_0=E,V_nPart_0=F,V_alphaSize=G+1,V_nPart_0>=1,V_ge_0+1>=V_gs_0,V_alphaSize>=V_ge_0+2] 

* Chain [11]: 0
  with precondition: [B=2,H=0,C=V_nGroups,D=V_alphaSize,V_gs_0=E,V_nPart_0=F,V_ge_0=G,V_nPart_0>=1,V_ge_0+1>=V_gs_0] 

* Chain [10]: 0
  with precondition: [B=2,C=V_nGroups,V_alphaSize=D,V_gs_0=E,V_nPart_0=F,V_ge_0=G,V_nPart_0>=1,V_ge_0+1>=V_alphaSize,V_ge_0+1>=V_gs_0] 


#### Simplifying cost structure of CE 19 

#### Computing cost of phase [13,14,15,16,17,18,19] 
 * The following loops are unfeasible in this instance of the phase [13,14,15,16,17,18,19] : [15] 
 * Renamed intermediate variables: 
[ (eq(32,1),it(12))>>s(1)]

#### Simplifying cost structure of CE 32 
 * Renamed intermediate variables: 
[ (eq(33,1),it(12))>>s(2)]

#### Simplifying cost structure of CE 33 
 * Renamed intermediate variables: 
[ (it(13),s(2))>>s(3), (it(13),s(1))>>s(4)]
 * Renamed intermediate variables: 
[ (eq(36,1),it(12))>>s(5)]

#### Simplifying cost structure of CE 36 
 * Renamed intermediate variables: 
[ (eq(37,1),it(12))>>s(6)]

#### Simplifying cost structure of CE 37 
 * Renamed intermediate variables: 
[ (it(14),s(6))>>s(7), (it(14),s(5))>>s(8)]

#### Simplifying cost structure of CE 20 

#### Simplifying cost structure of CE 22 
 * Renamed intermediate variables: 
[ (eq(21,1),it(12))>>s(9)]

#### Simplifying cost structure of CE 21 
 * Renamed intermediate variables: 
[ (eq(23,1),it(12))>>s(10)]

#### Simplifying cost structure of CE 23 
 * Renamed intermediate variables: 
[ (it(17),s(10))>>s(11), (it(17),s(9))>>s(12)]
 * Renamed intermediate variables: 
[ (eq(25,1),it(12))>>s(13)]

#### Simplifying cost structure of CE 25 
 * Renamed intermediate variables: 
[ (eq(27,1),it(12))>>s(14)]

#### Simplifying cost structure of CE 27 

#### Simplifying cost structure of CE 24 

#### Simplifying cost structure of CE 26 

#### Simplifying cost structure of CE 28 

#### Simplifying cost structure of CE 30 

#### Cost of loops [13,14,16,17,18,19] 

 * loop 13:eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) -> [eval_sendMTFValues_bb1_in(V_nGroups',V_alphaSize',V_gs_0',V_nPart_0',B')] 
1*s(4)+1*s(3)+2
  Such that:s(3) =< V_alphaSize-V_gs_0+1
s(4) =< -V_gs_0+V_gs_0'+1

 * loop 14:eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) -> [eval_sendMTFValues_bb1_in(V_nGroups',V_alphaSize',V_gs_0',V_nPart_0',B')] 
1*s(8)+1*s(7)+2
  Such that:s(7) =< V_alphaSize-V_gs_0+1
s(8) =< -V_gs_0+V_gs_0'

 * loop 16:eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) -> [eval_sendMTFValues_bb1_in(V_nGroups',V_alphaSize',V_gs_0',V_nPart_0',B')] 
2
 * loop 17:eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) -> [eval_sendMTFValues_bb1_in(V_nGroups',V_alphaSize',V_gs_0',V_nPart_0',B')] 
1*s(12)+1*s(11)+2
  Such that:s(11) =< V_alphaSize-V_gs_0+1
s(12) =< -V_gs_0+V_gs_0'

 * loop 18:eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) -> [eval_sendMTFValues_bb1_in(V_nGroups',V_alphaSize',V_gs_0',V_nPart_0',B')] 
5
 * loop 19:eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) -> [eval_sendMTFValues_bb1_in(V_nGroups',V_alphaSize',V_gs_0',V_nPart_0',B')] 
2
##### Pending set eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)
* Psum in Loop 13: [it(13)=<1,s(16)=<V_alphaSize-V_gs_0+1,s(15)=< -V_gs_0+V_gs_0'+1]
* Psum in Loop 14: [it(14)=<1,s(18)=<V_alphaSize-V_gs_0+1,s(17)=< -V_gs_0+V_gs_0']
* Psum in Loop 16: [it(16)=<1]
* Psum in Loop 17: [it(17)=<1,s(20)=<V_alphaSize-V_gs_0+1,s(19)=< -V_gs_0+V_gs_0']
* Psum in Loop 18: [it(18)=<1]
* Psum in Loop 19: [it(19)=<1]

###### Computing sum for it(13)=<1  in Loop 13 
   - Applying inductive sum strategy 
     - head Candidate: V_nPart_0 
       - Loop 14 is collaborative and bounds [it(14)] 
       - Loop 16 is collaborative and bounds [it(16)] 
       - Loop 17 is collaborative and bounds [it(17)] 
       - Loop 18 is collaborative and bounds [it(18)] 
       - Loop 19 is collaborative and bounds [it(19)] 
     - tail Candidate: V_nPart_0 
       - Loop 14 is collaborative and bounds [it(14)] 
       - Loop 16 is collaborative and bounds [it(16)] 
       - Loop 17 is collaborative and bounds [it(17)] 
       - Loop 18 is collaborative and bounds [it(18)] 
       - Loop 19 is collaborative and bounds [it(19)] 
 * Adding constraints: [it(13)+it(14)+it(16)+it(17)+it(18)+it(19)=<V_nPart_0,it(13)+it(14)+it(16)+it(17)+it(18)+it(19)=<V_nPart_0-V_nPart_0'] 

##### Pending set eval_sendMTFValues_0(V_nGroups,V_alphaSize,B)
* Psum in Loop 13: [s(16)=<V_alphaSize-V_gs_0+1,s(15)=< -V_gs_0+V_gs_0'+1]
* Psum in Loop 14: [it(14)=<1,s(18)=<V_alphaSize-V_gs_0+1,s(17)=< -V_gs_0+V_gs_0']
* Psum in Loop 16: [it(16)=<1]
* Psum in Loop 17: [it(17)=<1,s(20)=<V_alphaSize-V_gs_0+1,s(19)=< -V_gs_0+V_gs_0']
* Psum in Loop 18: [it(18)=<1]
* Psum in Loop 19: [it(19)=<1]

###### Computing sum for s(16)=<V_alphaSize-V_gs_0+1  in Loop 13 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1)=<V_alphaSize-V_gs_0+1] 
 * Adding constraints: [s(16)=<it(13)*aux(1)] 

##### Pending set eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)
* Pmax/min: [aux(1)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 13: [s(15)=< -V_gs_0+V_gs_0'+1]
* Psum in Loop 14: [it(14)=<1,s(18)=<V_alphaSize-V_gs_0+1,s(17)=< -V_gs_0+V_gs_0']
* Psum in Loop 16: [it(16)=<1]
* Psum in Loop 17: [it(17)=<1,s(20)=<V_alphaSize-V_gs_0+1,s(19)=< -V_gs_0+V_gs_0']
* Psum in Loop 18: [it(18)=<1]
* Psum in Loop 19: [it(19)=<1]

###### Computing max_min for aux(1)=<V_alphaSize-V_gs_0+1  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(1)=<V_alphaSize-V_gs_0+1] 

##### Pending set eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)
* Psum in Loop 13: [s(15)=< -V_gs_0+V_gs_0'+1]
* Psum in Loop 14: [it(14)=<1,s(18)=<V_alphaSize-V_gs_0+1,s(17)=< -V_gs_0+V_gs_0']
* Psum in Loop 16: [it(16)=<1]
* Psum in Loop 17: [it(17)=<1,s(20)=<V_alphaSize-V_gs_0+1,s(19)=< -V_gs_0+V_gs_0']
* Psum in Loop 18: [it(18)=<1]
* Psum in Loop 19: [it(19)=<1]

###### Computing sum for s(15)=< -V_gs_0+V_gs_0'+1  in Loop 13 
   - Applying inductive sum strategy 
     - head Candidate: V_alphaSize-V_gs_0+V_nPart_0-2 
       - Loop 14 is collaborative and bounds [it(14)] 
       - Loop 16 is collaborative
       - Loop 17 is collaborative and bounds [it(17)] 
       - Loop 18 is collaborative and bounds [it(18)] 
       - Loop 19 is collaborative
     - tail Candidate: V_alphaSize-V_gs_0+V_nPart_0-2 
       - Loop 14 is collaborative and bounds [it(14)] 
       - Loop 16 is collaborative and bounds [it(16)] 
       - Loop 17 is collaborative and bounds [it(17)] 
       - Loop 18 is collaborative and bounds [it(18)] 
       - Loop 19 is collaborative and bounds [it(19)] 
 * Adding constraints: [it(14)+it(17)+it(18)+s(15)=<V_alphaSize-V_gs_0+V_nPart_0-2,it(14)+it(16)+it(17)+it(18)+it(19)+s(15)=<V_alphaSize-V_gs_0+V_nPart_0-V_alphaSize'+V_gs_0'-V_nPart_0'] 

##### Pending set eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)
* Psum in Loop 14: [it(14)=<1,s(18)=<V_alphaSize-V_gs_0+1,s(17)=< -V_gs_0+V_gs_0']
* Psum in Loop 16: [it(16)=<1]
* Psum in Loop 17: [it(17)=<1,s(20)=<V_alphaSize-V_gs_0+1,s(19)=< -V_gs_0+V_gs_0']
* Psum in Loop 18: [it(18)=<1]
* Psum in Loop 19: [it(19)=<1]

###### Computing sum for it(14)=<1  in Loop 14 
   - Applying inductive sum strategy 
     - head Candidate: V_nPart_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_nPart_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(13)+it(14)+it(16)+it(17)+it(18)+it(19)=<V_nPart_0,it(13)+it(14)+it(16)+it(17)+it(18)+it(19)=<V_nPart_0-V_nPart_0'] 

##### Pending set eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)
* Psum in Loop 14: [s(18)=<V_alphaSize-V_gs_0+1,s(17)=< -V_gs_0+V_gs_0']
* Psum in Loop 16: [it(16)=<1]
* Psum in Loop 17: [it(17)=<1,s(20)=<V_alphaSize-V_gs_0+1,s(19)=< -V_gs_0+V_gs_0']
* Psum in Loop 18: [it(18)=<1]
* Psum in Loop 19: [it(19)=<1]

###### Computing sum for s(18)=<V_alphaSize-V_gs_0+1  in Loop 14 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(2)=<V_alphaSize-V_gs_0+1] 
 * Adding constraints: [s(18)=<it(14)*aux(2)] 

##### Pending set eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)
* Pmax/min: [aux(2)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 14: [s(17)=< -V_gs_0+V_gs_0']
* Psum in Loop 16: [it(16)=<1]
* Psum in Loop 17: [it(17)=<1,s(20)=<V_alphaSize-V_gs_0+1,s(19)=< -V_gs_0+V_gs_0']
* Psum in Loop 18: [it(18)=<1]
* Psum in Loop 19: [it(19)=<1]

###### Computing max_min for aux(2)=<V_alphaSize-V_gs_0+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(2)=<aux(1)] 

##### Pending set eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)
* Psum in Loop 14: [s(17)=< -V_gs_0+V_gs_0']
* Psum in Loop 16: [it(16)=<1]
* Psum in Loop 17: [it(17)=<1,s(20)=<V_alphaSize-V_gs_0+1,s(19)=< -V_gs_0+V_gs_0']
* Psum in Loop 18: [it(18)=<1]
* Psum in Loop 19: [it(19)=<1]

###### Computing sum for s(17)=< -V_gs_0+V_gs_0'  in Loop 14 
   - Applying inductive sum strategy 
     - head Candidate: V_alphaSize-V_gs_0 
       - Loop 13 is collaborative
       - Loop 16 is collaborative
       - Loop 17 is collaborative and bounds [it(17)] 
       - Loop 18 is collaborative and bounds [it(18)] 
       - Loop 19 is collaborative
     - tail Candidate: V_alphaSize-V_gs_0 
       - Loop 13 is collaborative
       - Loop 16 is collaborative
       - Loop 17 is collaborative and bounds [it(17)] 
       - Loop 18 is collaborative and bounds [it(18)] 
       - Loop 19 is collaborative
 * Adding constraints: [it(17)+it(18)+s(17)=<V_alphaSize-V_gs_0,it(17)+it(18)+s(17)=<V_alphaSize-V_gs_0-V_alphaSize'+V_gs_0'] 

##### Pending set eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)
* Psum in Loop 16: [it(16)=<1]
* Psum in Loop 17: [it(17)=<1,s(20)=<V_alphaSize-V_gs_0+1,s(19)=< -V_gs_0+V_gs_0']
* Psum in Loop 18: [it(18)=<1]
* Psum in Loop 19: [it(19)=<1]

###### Computing sum for it(16)=<1  in Loop 16 
   - Applying inductive sum strategy 
     - head Candidate: V_nPart_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_nPart_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(13)+it(14)+it(16)+it(17)+it(18)+it(19)=<V_nPart_0,it(13)+it(14)+it(16)+it(17)+it(18)+it(19)=<V_nPart_0-V_nPart_0'] 

##### Pending set eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)
* Psum in Loop 17: [it(17)=<1,s(20)=<V_alphaSize-V_gs_0+1,s(19)=< -V_gs_0+V_gs_0']
* Psum in Loop 18: [it(18)=<1]
* Psum in Loop 19: [it(19)=<1]

###### Computing sum for it(17)=<1  in Loop 17 
   - Applying inductive sum strategy 
     - head Candidate: V_nPart_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_nPart_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(13)+it(14)+it(16)+it(17)+it(18)+it(19)=<V_nPart_0,it(13)+it(14)+it(16)+it(17)+it(18)+it(19)=<V_nPart_0-V_nPart_0'] 

##### Pending set eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)
* Psum in Loop 17: [s(20)=<V_alphaSize-V_gs_0+1,s(19)=< -V_gs_0+V_gs_0']
* Psum in Loop 18: [it(18)=<1]
* Psum in Loop 19: [it(19)=<1]

###### Computing sum for s(20)=<V_alphaSize-V_gs_0+1  in Loop 17 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(3)=<V_alphaSize-V_gs_0+1] 
 * Adding constraints: [s(20)=<it(17)*aux(3)] 

##### Pending set eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)
* Pmax/min: [aux(3)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 17: [s(19)=< -V_gs_0+V_gs_0']
* Psum in Loop 18: [it(18)=<1]
* Psum in Loop 19: [it(19)=<1]

###### Computing max_min for aux(3)=<V_alphaSize-V_gs_0+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(3)=<aux(1)] 

##### Pending set eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)
* Psum in Loop 17: [s(19)=< -V_gs_0+V_gs_0']
* Psum in Loop 18: [it(18)=<1]
* Psum in Loop 19: [it(19)=<1]

###### Computing sum for s(19)=< -V_gs_0+V_gs_0'  in Loop 17 
   - Applying inductive sum strategy 
     - head Candidate: V_alphaSize-V_gs_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_alphaSize-V_gs_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(18)+s(17)+s(19)=<V_alphaSize-V_gs_0,it(18)+s(17)+s(19)=<V_alphaSize-V_gs_0-V_alphaSize'+V_gs_0'] 

##### Pending set eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)
* Psum in Loop 18: [it(18)=<1]
* Psum in Loop 19: [it(19)=<1]

###### Computing sum for it(18)=<1  in Loop 18 
   - Applying inductive sum strategy 
     - head Candidate: V_nPart_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_nPart_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(13)+it(14)+it(16)+it(17)+it(18)+it(19)=<V_nPart_0,it(13)+it(14)+it(16)+it(17)+it(18)+it(19)=<V_nPart_0-V_nPart_0'] 

##### Pending set eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)
* Psum in Loop 19: [it(19)=<1]

###### Computing sum for it(19)=<1  in Loop 19 
   - Applying inductive sum strategy 
     - head Candidate: V_nPart_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_nPart_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(13)+it(14)+it(16)+it(17)+it(18)+it(19)=<V_nPart_0,it(13)+it(14)+it(16)+it(17)+it(18)+it(19)=<V_nPart_0-V_nPart_0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [13,14,16,17,18,19] 

#### Simplifying cost structure of phase [13,14,16,17,18,19] 
 * Joined equivalent variables [aux(2),aux(3)] into aux(2)
 * Joined equivalent variables [it(17),it(18)] into it(17)
 * Joined equivalent variables [s(17),s(19)] into s(17)
 * Joined equivalent variables [it(16),it(19)] into it(16)

#### Cost of phase [13,14,15,16,17,18,19]:eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) -> [eval_sendMTFValues_bb1_in(V_nGroups',V_alphaSize',V_gs_0',V_nPart_0',B')] 
2*it(13)+2*it(14)+4*it(16)+7*it(17)+1*s(15)+1*s(16)+2*s(17)+1*s(18)+1*s(20)+0
  Such that:aux(1) =< V_alphaSize-V_gs_0+1
aux(4) =< V_alphaSize-V_gs_0
aux(5) =< V_alphaSize-V_gs_0+V_nPart_0
aux(6) =< V_alphaSize-V_gs_0+V_nPart_0-V_alphaSize'+V_gs_0'-V_nPart_0'
aux(7) =< V_alphaSize-V_gs_0-V_alphaSize'+V_gs_0'
aux(8) =< V_nPart_0
aux(9) =< V_nPart_0-V_nPart_0'
it(17) =< aux(4)
s(17) =< aux(4)
it(14) =< aux(5)
it(17) =< aux(5)
s(15) =< aux(5)
it(14) =< aux(6)
it(16) =< aux(6)
it(17) =< aux(6)
s(15) =< aux(6)
it(17) =< aux(7)
s(17) =< aux(7)
it(13) =< aux(8)
it(14) =< aux(8)
it(16) =< aux(8)
it(17) =< aux(8)
it(13) =< aux(9)
it(14) =< aux(9)
it(16) =< aux(9)
it(17) =< aux(9)
aux(2) =< aux(1)
s(16) =< it(13)*aux(1)
s(20) =< it(17)*aux(2)
s(18) =< it(14)*aux(2)

#### Simplifying cost structure of chain [[13,14,15,16,17,18,19],21] 
 * Joined equivalent variables [aux(10),aux(8),aux(9)] into aux(10)
 * Renamed intermediate variables: 
[ (eq(29,1),it(12))>>s(21)]

#### Simplifying cost structure of CE 29 
 * Renamed intermediate variables: 
[ (eq(31,1),it(12))>>s(22)]

#### Simplifying cost structure of CE 31 

#### Simplifying cost structure of chain [20,21] 

#### Found solution for phase  [13,14,15,16,17,18,19] in the cache 

#### Cost of phase [13,14,15,16,17,18,19]:eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) -> [eval_sendMTFValues_bb1_in(V_nGroups',V_alphaSize',V_gs_0',V_nPart_0',B')] 
2*it(13)+2*it(14)+4*it(16)+7*it(17)+1*s(15)+1*s(16)+2*s(17)+1*s(18)+1*s(20)+0
  Such that:aux(1) =< V_alphaSize-V_gs_0+1
aux(4) =< V_alphaSize-V_gs_0
aux(5) =< V_alphaSize-V_gs_0+V_nPart_0
aux(6) =< V_alphaSize-V_gs_0+V_nPart_0-V_alphaSize'+V_gs_0'-V_nPart_0'
aux(7) =< V_alphaSize-V_gs_0-V_alphaSize'+V_gs_0'
aux(8) =< V_nPart_0
aux(9) =< V_nPart_0-V_nPart_0'
it(17) =< aux(4)
s(17) =< aux(4)
it(14) =< aux(5)
it(17) =< aux(5)
s(15) =< aux(5)
it(14) =< aux(6)
it(16) =< aux(6)
it(17) =< aux(6)
s(15) =< aux(6)
it(17) =< aux(7)
s(17) =< aux(7)
it(13) =< aux(8)
it(14) =< aux(8)
it(16) =< aux(8)
it(17) =< aux(8)
it(13) =< aux(9)
it(14) =< aux(9)
it(16) =< aux(9)
it(17) =< aux(9)
aux(2) =< aux(1)
s(16) =< it(13)*aux(1)
s(20) =< it(17)*aux(2)
s(18) =< it(14)*aux(2)

#### Simplifying cost structure of chain [[13,14,15,16,17,18,19],20,21] 
 * Joined equivalent variables [aux(11),aux(1),aux(7)] into aux(11)
 * Joined equivalent variables [aux(12),aux(5),aux(6)] into aux(12)
 * Joined equivalent variables [aux(13),aux(8),aux(9)] into aux(13)
 * Joined equivalent variables [s(15),s(21)] into s(15)
 * Joined equivalent variables [it(14),it(16)] into it(14)
 * Renamed intermediate variables: 
[ (ch([20,21]),s(21))>>s(23), (ch([20,21]),s(22))>>s(24)]
 * Renamed intermediate variables: 
[ (ch([[13,14,15,16,17,18,19],20,21]),aux(4))>>s(25), (ch([[13,14,15,16,17,18,19],20,21]),aux(11))>>s(26), (ch([[13,14,15,16,17,18,19],20,21]),aux(12))>>s(27), (ch([[13,14,15,16,17,18,19],20,21]),aux(13))>>s(28), (ch([[13,14,15,16,17,18,19],20,21]),s(22))>>s(29), (ch([[13,14,15,16,17,18,19],20,21]),s(15))>>s(30), (ch([[13,14,15,16,17,18,19],20,21]),it(17))>>s(31), (ch([[13,14,15,16,17,18,19],20,21]),s(17))>>s(32), (ch([[13,14,15,16,17,18,19],20,21]),it(14))>>s(33), (ch([[13,14,15,16,17,18,19],20,21]),it(13))>>s(34), (ch([[13,14,15,16,17,18,19],20,21]),aux(2))>>s(35), (ch([[13,14,15,16,17,18,19],20,21]),s(16))>>s(36), (ch([[13,14,15,16,17,18,19],20,21]),s(20))>>s(37), (ch([[13,14,15,16,17,18,19],20,21]),s(18))>>s(38)]
 * Renamed intermediate variables: 
[ (ch([[13,14,15,16,17,18,19],21]),aux(4))>>s(39), (ch([[13,14,15,16,17,18,19],21]),aux(1))>>s(40), (ch([[13,14,15,16,17,18,19],21]),aux(5))>>s(41), (ch([[13,14,15,16,17,18,19],21]),aux(10))>>s(42), (ch([[13,14,15,16,17,18,19],21]),it(17))>>s(43), (ch([[13,14,15,16,17,18,19],21]),s(17))>>s(44), (ch([[13,14,15,16,17,18,19],21]),it(14))>>s(45), (ch([[13,14,15,16,17,18,19],21]),s(15))>>s(46), (ch([[13,14,15,16,17,18,19],21]),it(13))>>s(47), (ch([[13,14,15,16,17,18,19],21]),it(16))>>s(48), (ch([[13,14,15,16,17,18,19],21]),aux(2))>>s(49), (ch([[13,14,15,16,17,18,19],21]),s(16))>>s(50), (ch([[13,14,15,16,17,18,19],21]),s(20))>>s(51), (ch([[13,14,15,16,17,18,19],21]),s(18))>>s(52)]
 * Joined equivalent variables [aux(14),s(25),s(39)] into aux(14)
 * Joined equivalent variables [aux(15),s(26),s(40)] into aux(15)
 * Joined equivalent variables [aux(16),s(27),s(41)] into aux(16)
 * Joined equivalent variables [aux(17),s(28),s(42)] into aux(17)
 * Joined equivalent variables [s(47),s(48)] into s(47)
 * Joined equivalent variables [s(35),s(49)] into s(35)
 * Joined equivalent variables [s(23),s(44)] into s(23)
 * Joined equivalent variables [s(24),s(29)] into s(24)
 * Joined equivalent variables [s(30),s(46)] into s(30)
 * Joined equivalent variables [s(33),s(45)] into s(33)
 * Joined equivalent variables [s(34),s(47)] into s(34)
 * Joined equivalent variables [s(38),s(52)] into s(38)
 * Joined equivalent variables [s(36),s(50)] into s(36)

#### Cost of chains of eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B):
* Chain [[13,14,15,16,17,18,19],21]: 2*it(13)+2*it(14)+4*it(16)+7*it(17)+1*s(15)+1*s(16)+2*s(17)+1*s(18)+1*s(20)+0
  Such that:aux(4) =< V_alphaSize-V_gs_0
aux(1) =< V_alphaSize-V_gs_0+1
aux(5) =< V_alphaSize-V_gs_0+V_nPart_0
aux(10) =< V_nPart_0
it(17) =< aux(4)
s(17) =< aux(4)
it(14) =< aux(5)
it(17) =< aux(5)
s(15) =< aux(5)
it(13) =< aux(10)
it(14) =< aux(10)
it(16) =< aux(10)
it(17) =< aux(10)
aux(2) =< aux(1)
s(16) =< it(13)*aux(1)
s(20) =< it(17)*aux(2)
s(18) =< it(14)*aux(2)

  with precondition: [B=3,V_gs_0>=0,V_nPart_0>=1,V_nGroups>=V_nPart_0] 

* Chain [[13,14,15,16,17,18,19],20,21]: 2*it(13)+6*it(14)+7*it(17)+2*s(15)+1*s(16)+2*s(17)+1*s(18)+1*s(20)+1*s(22)+2
  Such that:aux(4) =< V_alphaSize-V_gs_0
aux(11) =< V_alphaSize-V_gs_0+1
aux(12) =< V_alphaSize-V_gs_0+V_nPart_0
aux(13) =< V_nPart_0
s(22) =< aux(11)
s(15) =< aux(12)
it(17) =< aux(4)
s(17) =< aux(4)
it(14) =< aux(12)
it(17) =< aux(12)
it(17) =< aux(11)
s(17) =< aux(11)
it(13) =< aux(13)
it(14) =< aux(13)
it(17) =< aux(13)
aux(2) =< aux(11)
s(16) =< it(13)*aux(11)
s(20) =< it(17)*aux(2)
s(18) =< it(14)*aux(2)

  with precondition: [B=3,V_gs_0>=0,V_nPart_0>=2,V_alphaSize>=V_gs_0+1,V_nGroups>=V_nPart_0] 

* Chain [21]: 0
  with precondition: [B=3,0>=V_nPart_0,V_gs_0>=0,V_nGroups>=V_nPart_0] 

* Chain [20,21]: 1*s(21)+1*s(22)+2
  Such that:s(21) =< V_alphaSize-V_gs_0
s(22) =< V_alphaSize-V_gs_0+1

  with precondition: [V_nPart_0=1,B=3,V_nGroups>=1,V_gs_0>=0,V_alphaSize>=V_gs_0+1] 


#### Simplifying cost structure of CE 39 
 * Renamed intermediate variables: 
[ (eq(38,1),aux(14))>>s(53), (eq(38,1),aux(15))>>s(54), (eq(38,1),aux(16))>>s(55), (eq(38,1),aux(17))>>s(56), (eq(38,1),s(23))>>s(57), (eq(38,1),s(24))>>s(58), (eq(38,1),s(30))>>s(59), (eq(38,1),s(31))>>s(60), (eq(38,1),s(32))>>s(61), (eq(38,1),s(33))>>s(62), (eq(38,1),s(34))>>s(63), (eq(38,1),s(35))>>s(64), (eq(38,1),s(36))>>s(65), (eq(38,1),s(37))>>s(66), (eq(38,1),s(38))>>s(67), (eq(38,1),s(43))>>s(68), (eq(38,1),s(51))>>s(69)]

#### Simplifying cost structure of CE 38 

#### Cost of chains of eval_sendMTFValues_start(V_nGroups,V_alphaSize,B):
* Chain [23]: 1
  with precondition: [0>=V_nGroups] 

* Chain [22]: 3*s(57)+2*s(58)+3*s(59)+7*s(60)+2*s(61)+8*s(62)+8*s(63)+2*s(65)+1*s(66)+2*s(67)+7*s(68)+1*s(69)+3
  Such that:s(56) =< V_nGroups
s(55) =< V_nGroups+V_alphaSize
s(53) =< V_alphaSize
s(54) =< V_alphaSize+1
s(57) =< s(53)
s(58) =< s(54)
s(59) =< s(55)
s(60) =< s(53)
s(61) =< s(53)
s(62) =< s(55)
s(60) =< s(55)
s(60) =< s(54)
s(61) =< s(54)
s(63) =< s(56)
s(62) =< s(56)
s(60) =< s(56)
s(64) =< s(54)
s(65) =< s(63)*s(54)
s(66) =< s(60)*s(64)
s(67) =< s(62)*s(64)
s(68) =< s(53)
s(68) =< s(55)
s(68) =< s(56)
s(69) =< s(68)*s(64)

  with precondition: [V_nGroups>=1] 


Closed-form bounds of eval_sendMTFValues_start(V_nGroups,V_alphaSize,B): 
-------------------------------------
* Chain [23] with precondition: [0>=V_nGroups] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [22] with precondition: [V_nGroups>=1] 
    - Upper bound: 8*V_nGroups+3+nat(V_alphaSize)*19+nat(V_nGroups+V_alphaSize)*11+nat(V_alphaSize+1)*2+nat(V_alphaSize+1)*2*V_nGroups+nat(V_alphaSize+1)*2*nat(V_alphaSize)+nat(V_alphaSize+1)*2*nat(V_nGroups+V_alphaSize) 
    - Complexity: n^2 

### Maximum cost of eval_sendMTFValues_start(V_nGroups,V_alphaSize,B): nat(V_nGroups)*8+2+nat(V_alphaSize)*19+nat(V_nGroups+V_alphaSize)*11+nat(V_alphaSize+1)*2+nat(V_alphaSize+1)*2*nat(V_nGroups)+nat(V_alphaSize+1)*2*nat(V_alphaSize)+nat(V_alphaSize+1)*2*nat(V_nGroups+V_alphaSize)+1 
Asymptotic class: n^2 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 118 ms.
* Invariants computed in 171 ms.
   - Backward Invariants 81 ms.
   - Transitive Invariants 32 ms.
* Refinement performed in 405 ms.
* Termination proved in 72 ms.
* Upper bounds computed in 565 ms.
   - Equation cost structures 152 ms.
   - Phase cost structures 379 ms.
   - Chain cost structures 90 ms.
   - Solving cost expressions 6 ms.
* Total analysis performed in 1405 ms.


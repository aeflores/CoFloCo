Warning: Ignored call to eval_sendMTFValues_stop/1 in equation eval_sendMTFValues_bb7_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_sendMTFValues_10/13,eval_sendMTFValues_9/12,eval_sendMTFValues_bb3_in/12,eval_sendMTFValues_bb4_in/13]
1. recursive  : [eval_sendMTFValues_17/9,eval_sendMTFValues_18/9,eval_sendMTFValues_21/9,eval_sendMTFValues_22/9,eval_sendMTFValues_23/10,eval_sendMTFValues_24/10,eval_sendMTFValues__critedge_in/7,eval_sendMTFValues_bb1_in/5,eval_sendMTFValues_bb2_in/5,eval_sendMTFValues_bb5_in/7,eval_sendMTFValues_bb6_in/8,loop_cont_eval_sendMTFValues_bb3_in/8]
2. non_recursive  : [eval_sendMTFValues_bb7_in/1]
3. non_recursive  : [loop_cont_eval_sendMTFValues_bb1_in/2]
4. non_recursive  : [eval_sendMTFValues_6/3]
5. non_recursive  : [eval_sendMTFValues_5/3]
6. non_recursive  : [eval_sendMTFValues_4/3]
7. non_recursive  : [eval_sendMTFValues_3/3]
8. non_recursive  : [eval_sendMTFValues_2/3]
9. non_recursive  : [eval_sendMTFValues_1/3]
10. non_recursive  : [eval_sendMTFValues_0/3]
11. non_recursive  : [eval_sendMTFValues_bb0_in/3]
12. non_recursive  : [eval_sendMTFValues_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_sendMTFValues_bb3_in/12
1. SCC is partially evaluated into eval_sendMTFValues_bb1_in/5
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_sendMTFValues_6/3
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into eval_sendMTFValues_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_sendMTFValues_bb3_in/12 
* CE 15 is refined into CE [16] 
* CE 13 is refined into CE [17] 
* CE 14 is refined into CE [18] 


#### Refined cost equations eval_sendMTFValues_bb3_in/12 
* CE 16: eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,V_ge_0,B,C,D,E,F,G,H) = 1+ eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,I,J,C,D,E,F,G,H)
     [V_alphaSize>=V_ge_0+2,V_ge_0+1>=V_gs_0,V_nPart_0>=1,V_ge_0+1=I,J=2,B=2] 
* CE 17: eval_sendMTFValues_bb3_in(A,B,C,D,E,F,A,B,C,D,E,G) = 0
     [E+1>=C,E+1>=B,D>=1,F=2] 
* CE 18: eval_sendMTFValues_bb3_in(A,B,C,D,E,F,A,B,C,D,E,G) = 0
     [E+1>=C,D>=1,G=0,F=2] 

### Cost equations --> "Loop" of eval_sendMTFValues_bb3_in/12 
* CEs [17] --> Loop 14 
* CEs [18] --> Loop 15 
* CEs [16] --> Loop 16 

#### Loops of eval_sendMTFValues_bb3_in/12 
* Loop 14: eval_sendMTFValues_bb3_in(A,B,C,D,E,F,A,B,C,D,E,G) [E+1>=C,E+1>=B,D>=1,F=2] 
* Loop 15: eval_sendMTFValues_bb3_in(A,B,C,D,E,F,A,B,C,D,E,G) [E+1>=C,D>=1,G=0,F=2] 
* Loop 16: eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,V_ge_0,B,C,D,E,F,G,H)->  eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,V_ge_0',B',C,D,E,F,G,H)
                  [V_alphaSize>=V_ge_0+2,V_ge_0+1>=V_gs_0,V_nPart_0>=1,V_ge_0+1=V_ge_0',B'=2,B=2] 

### Ranking functions of CR eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,V_ge_0,B,C,D,E,F,G,H) 
* RF of phase [16]: [V_alphaSize-V_ge_0-1]

#### Partial ranking functions of CR eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,V_ge_0,B,C,D,E,F,G,H) 
* Partial RF of phase [16]:
  - RF of loop [16:1]:
    V_alphaSize-V_ge_0-1

Discarded unfeasible chain [[16]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,V_ge_0,B,C,D,E,F,G,H) 
* [[16],15]
* [[16],14]
* [15]
* [14]


### Merging Chains  eval_sendMTFValues_bb3_in/12 into  External patterns of execution 
* [[15]] --> 1 
* [[15,[16]]] --> 2 
* [[14]] --> 3 
* [[14,[16]]] --> 4 


### Specialization of cost equations eval_sendMTFValues_bb1_in/5 
* CE 12 is refined into CE [19] 
* CE 7 is refined into CE [20,21] 
* CE 11 is refined into CE [22,23] 
* CE 9 is refined into CE [24,25] 
* CE 3 is refined into CE [26,27,28,29] 
* CE 6 is discarded (unfeasible) 
* CE 10 is discarded (unfeasible) 
* CE 8 is discarded (unfeasible) 
* CE 4 is refined into CE [30,31,32,33] 
* CE 5 is refined into CE [34,35,36,37] 


#### Refined cost equations eval_sendMTFValues_bb1_in/5 
* CE 19: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) = 0
     [0>=V_nPart_0,B=3] 
* CE 20: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) = 2+ eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,C,D,V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,E,F):2+ eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,E,G,H)
     [V_alphaSize>=E+1,V_nGroups>=V_nPart_0+1,E>=V_gs_0+1,V_nPart_0>=2,V_nPart_0=G+1,V_gs_0=C+1,H=3,F=0,D=2,B=3] 
* CE 21: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) = 2+ eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,C,D,V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,E,F):4+ eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,G,H,I)
     [V_nGroups>=V_nPart_0+1,V_alphaSize>=V_gs_0+2,V_nPart_0>=2,V_nPart_0=H+1,V_alphaSize=G+1,V_alphaSize=E+1,V_gs_0=C+1,I=3,D=2,B=3] 
* CE 22: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) = 2+ eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,C,D,V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,E,F):2+ eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,G,H,I)
     [V_alphaSize>=E+1,V_nGroups>=V_nPart_0+1,E>=V_gs_0+1,V_nPart_0>=2,V_nPart_0=H+1,E+1=G,V_gs_0=C+1,I=3,F=0,D=2,B=3] 
* CE 23: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) = 2+ eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,C,D,V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,E,F):4+ eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_alphaSize,G,H)
     [V_nGroups>=V_nPart_0+1,V_alphaSize>=V_gs_0+2,V_nPart_0>=2,V_nPart_0=G+1,V_alphaSize=E+1,V_gs_0=C+1,H=3,D=2,B=3] 
* CE 24: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) = 2+ eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,C,D,V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,E,F):2+ eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,G,H,I)
     [V_alphaSize>=E+1,E>=V_gs_0+1,V_nPart_0>=V_nGroups+1,V_nPart_0>=2,V_nPart_0=H+1,E+1=G,V_gs_0=C+1,I=3,F=0,D=2,B=3] 
* CE 25: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) = 2+ eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,C,D,V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,E,F):4+ eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_alphaSize,G,H)
     [V_alphaSize>=V_gs_0+2,V_nPart_0>=V_nGroups+1,V_nPart_0>=2,V_nPart_0=G+1,V_alphaSize=E+1,V_gs_0=C+1,H=3,D=2,B=3] 
* CE 26: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) = 2+ eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,C,D,V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,E,F):1+ eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,G,H)
     [V_nPart_0>=1,V_nPart_0=G+1,V_gs_0=E+1,V_gs_0=C+1,H=3,F=0,D=2,B=3] 
* CE 27: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) = 2+ eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,C,D,V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,V_gs_0,E):2+ eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,F,G,H)
     [V_alphaSize>=V_gs_0+1,V_nPart_0>=1,V_nPart_0=G+1,V_gs_0+1=F,V_gs_0=C+1,H=3,E=0,D=2,B=3] 
* CE 28: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) = 2+ eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,C,D,V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,E,F):3+ eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,G,H)
     [V_gs_0>=V_alphaSize,V_nPart_0>=1,V_nPart_0=G+1,V_gs_0=E+1,V_gs_0=C+1,H=3,D=2,B=3] 
* CE 29: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) = 2+ eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,C,V_nPart_0,D,E,V_nGroups,V_alphaSize,F,V_nPart_0,G,H):4+ eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_alphaSize,I,J)
     [V_nPart_0>=1,V_nPart_0=I+1,V_alphaSize=G+1,V_alphaSize=F+1,V_alphaSize=D+2,V_alphaSize=C+1,V_alphaSize=V_gs_0+1,J=3,E=2,B=3] 
* CE 30: eval_sendMTFValues_bb1_in(A,B,C,A,D) = 2+ eval_sendMTFValues_bb3_in(A,B,C,A,E,F,A,B,C,A,G,H):1+ eval_sendMTFValues_bb1_in(A,B,C,I,J)
     [A>=1,A=I+1,C=G+1,C=E+1,J=3,H=0,F=2,D=3] 
* CE 31: eval_sendMTFValues_bb1_in(A,B,C,A,D) = 2+ eval_sendMTFValues_bb3_in(A,B,C,A,E,F,A,B,C,A,G,H):2+ eval_sendMTFValues_bb1_in(A,B,I,J,K)
     [B>=G+1,G>=C,A>=1,A=J+1,G+1=I,C=E+1,K=3,H=0,F=2,D=3] 
* CE 32: eval_sendMTFValues_bb1_in(A,B,C,A,D) = 2+ eval_sendMTFValues_bb3_in(A,B,C,A,E,F,A,B,C,A,G,H):3+ eval_sendMTFValues_bb1_in(A,B,C,I,J)
     [C>=B,A>=1,A=I+1,C=G+1,C=E+1,J=3,F=2,D=3] 
* CE 33: eval_sendMTFValues_bb1_in(A,B,C,A,D) = 2+ eval_sendMTFValues_bb3_in(A,B,C,A,E,F,A,B,C,A,G,H):4+ eval_sendMTFValues_bb1_in(A,B,B,I,J)
     [B>=C+1,A>=1,A=I+1,B=G+1,C=E+1,J=3,F=2,D=3] 
* CE 34: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) = 2+ eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,C,D,E,V_nGroups,V_alphaSize,V_gs_0,F,G,H):1+ eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,I,J)
     [V_gs_0=G+1,V_gs_0=D+1,J=3,I=0,H=0,F=1,E=2,C=1,B=3,V_nPart_0=1] 
* CE 35: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) = 2+ eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,C,D,E,V_nGroups,V_alphaSize,V_gs_0,F,G,H):2+ eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,I,J,K)
     [V_alphaSize>=G+1,G>=V_gs_0,G+1=I,V_gs_0=D+1,K=3,J=0,H=0,F=1,E=2,C=1,B=3,V_nPart_0=1] 
* CE 36: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) = 2+ eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,C,D,E,V_nGroups,V_alphaSize,V_gs_0,F,G,H):3+ eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,I,J)
     [V_gs_0>=V_alphaSize,V_gs_0=G+1,V_gs_0=D+1,J=3,I=0,F=1,E=2,C=1,B=3,V_nPart_0=1] 
* CE 37: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) = 2+ eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,C,D,E,V_nGroups,V_alphaSize,V_gs_0,F,G,H):4+ eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_alphaSize,I,J)
     [V_alphaSize>=V_gs_0+1,V_alphaSize=G+1,V_gs_0=D+1,J=3,I=0,F=1,E=2,C=1,B=3,V_nPart_0=1] 

### Cost equations --> "Loop" of eval_sendMTFValues_bb1_in/5 
* CEs [22] --> Loop 17 
* CEs [20] --> Loop 18 
* CEs [24] --> Loop 19 
* CEs [28] --> Loop 20 
* CEs [26] --> Loop 21 
* CEs [21] --> Loop 22 
* CEs [23] --> Loop 23 
* CEs [25] --> Loop 24 
* CEs [31] --> Loop 25 
* CEs [32] --> Loop 26 
* CEs [30] --> Loop 27 
* CEs [33] --> Loop 28 
* CEs [27] --> Loop 29 
* CEs [29] --> Loop 30 
* CEs [35] --> Loop 31 
* CEs [36] --> Loop 32 
* CEs [34] --> Loop 33 
* CEs [37] --> Loop 34 
* CEs [19] --> Loop 35 

#### Loops of eval_sendMTFValues_bb1_in/5 
* Loop 17: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)->  eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0',V_nPart_0',B')
                  [V_alphaSize>=V_gs_0',V_nGroups>=V_nPart_0+1,V_gs_0'>=V_gs_0+2,V_nPart_0>=2,V_nPart_0=V_nPart_0'+1,B'=3,B=3] 
* Loop 18: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)->  eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0',V_nPart_0',B')
                  [V_alphaSize>=V_gs_0'+1,V_nGroups>=V_nPart_0+1,V_gs_0'>=V_gs_0+1,V_nPart_0>=2,V_nPart_0=V_nPart_0'+1,B'=3,B=3] 
* Loop 19: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)->  eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0',V_nPart_0',B')
                  [V_alphaSize>=V_gs_0',V_gs_0'>=V_gs_0+2,V_nPart_0>=V_nGroups+1,V_nPart_0>=2,V_nPart_0=V_nPart_0'+1,B'=3,B=3] 
* Loop 20: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)->  eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0',B')
                  [V_gs_0>=V_alphaSize,V_nPart_0>=1,V_nPart_0=V_nPart_0'+1,B'=3,B=3] 
* Loop 21: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)->  eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0',B')
                  [V_nPart_0>=1,V_nPart_0=V_nPart_0'+1,B'=3,B=3] 
* Loop 22: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)->  eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0',V_nPart_0',B')
                  [V_nGroups>=V_nPart_0+1,V_alphaSize>=V_gs_0+2,V_nPart_0>=2,V_nPart_0=V_nPart_0'+1,V_alphaSize=V_gs_0'+1,B'=3,B=3] 
* Loop 23: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)->  eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_alphaSize,A',B')
                  [V_nGroups>=V_nPart_0+1,V_alphaSize>=V_gs_0+2,V_nPart_0>=2,V_nPart_0=A'+1,B'=3,B=3] 
* Loop 24: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)->  eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_alphaSize,A',B')
                  [V_alphaSize>=V_gs_0+2,V_nPart_0>=V_nGroups+1,V_nPart_0>=2,V_nPart_0=A'+1,B'=3,B=3] 
* Loop 25: eval_sendMTFValues_bb1_in(A,B,C,A,D)->  eval_sendMTFValues_bb1_in(A,B,A',B',C')
                  [B>=A',A'>=C+1,A>=1,A=B'+1,C'=3,D=3] 
* Loop 26: eval_sendMTFValues_bb1_in(A,B,C,A,D)->  eval_sendMTFValues_bb1_in(A,B,C,A',B')
                  [C>=B,A>=1,A=A'+1,B'=3,D=3] 
* Loop 27: eval_sendMTFValues_bb1_in(A,B,C,A,D)->  eval_sendMTFValues_bb1_in(A,B,C,A',B')
                  [A>=1,A=A'+1,B'=3,D=3] 
* Loop 28: eval_sendMTFValues_bb1_in(A,B,C,A,D)->  eval_sendMTFValues_bb1_in(A,B,B,A',B')
                  [B>=C+1,A>=1,A=A'+1,B'=3,D=3] 
* Loop 29: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)->  eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0',V_nPart_0',B')
                  [V_alphaSize>=V_gs_0',V_nPart_0>=1,V_nPart_0=V_nPart_0'+1,V_gs_0'=V_gs_0+1,B'=3,B=3] 
* Loop 30: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)->  eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_alphaSize,A',B')
                  [V_nPart_0>=1,V_nPart_0=A'+1,V_alphaSize=V_gs_0+1,B'=3,B=3] 
* Loop 31: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)->  eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0',V_nPart_0',B')
                  [V_alphaSize>=V_gs_0',V_gs_0'>=V_gs_0+1,B'=3,V_nPart_0'=0,B=3,V_nPart_0=1] 
* Loop 32: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)->  eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0',B')
                  [V_gs_0>=V_alphaSize,B'=3,V_nPart_0'=0,B=3,V_nPart_0=1] 
* Loop 33: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)->  eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0',B')
                  [B'=3,V_nPart_0'=0,B=3,V_nPart_0=1] 
* Loop 34: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)->  eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_alphaSize,A',B')
                  [V_alphaSize>=V_gs_0+1,B'=3,A'=0,B=3,V_nPart_0=1] 
* Loop 35: eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) [0>=V_nPart_0,B=3] 

### Ranking functions of CR eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) 
* RF of phase [17,18,19,20,21,22,23,24,25,26,27,28,29,30]: [V_nPart_0]

#### Partial ranking functions of CR eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) 

Discarded unfeasible chain [[17,18,19,20,21,22,23,24,25,26,27,28,29,30]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) 
* [[17,18,19,20,21,22,23,24,25,26,27,28,29,30],35]
* [[17,18,19,20,21,22,23,24,25,26,27,28,29,30],34,35]
* [[17,18,19,20,21,22,23,24,25,26,27,28,29,30],33,35]
* [[17,18,19,20,21,22,23,24,25,26,27,28,29,30],32,35]
* [[17,18,19,20,21,22,23,24,25,26,27,28,29,30],31,35]
* [35]
* [34,35]
* [33,35]
* [32,35]
* [31,35]


### Merging Chains  eval_sendMTFValues_bb1_in/5 into  External patterns of execution 
* [[35,33]] --> 1 
* [[35,32]] --> 2 
* [[35,31],[35,34]] --> 3 
* [[35]] --> 4 
* [[35,[17,18,19,20,21,22,23,24,25,26,27,28,29,30]]] --> 5 
* [[35,31,[17,18,19,20,21,22,23,24,25,26,27,28,29,30]],[35,34,[17,18,19,20,21,22,23,24,25,26,27,28,29,30]]] --> 6 
* [[35,32,[17,18,19,20,21,22,23,24,25,26,27,28,29,30]],[35,33,[17,18,19,20,21,22,23,24,25,26,27,28,29,30]]] --> 7 


### Specialization of cost equations eval_sendMTFValues_6/3 
* CE 2 is refined into CE [38,39,40,41,42,43,44] 


#### Refined cost equations eval_sendMTFValues_6/3 
* CE 38: eval_sendMTFValues_6(V_nGroups,V_alphaSize,B) = 1+ eval_sendMTFValues_bb1_in(C,V_alphaSize,D,E,F):1
     [F=3,E=1,D=0,C=1,V_nGroups=1] 
* CE 39: eval_sendMTFValues_6(V_nGroups,V_alphaSize,B) = 1+ eval_sendMTFValues_bb1_in(C,V_alphaSize,D,E,F):2
     [0>=V_alphaSize,F=3,E=1,D=0,C=1,V_nGroups=1] 
* CE 40: eval_sendMTFValues_6(V_nGroups,V_alphaSize,B) = 1+ eval_sendMTFValues_bb1_in(C,V_alphaSize,D,E,F):3
     [V_alphaSize>=1,F=3,E=1,D=0,C=1,V_nGroups=1] 
* CE 41: eval_sendMTFValues_6(V_nGroups,V_alphaSize,B) = 1+ eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,C,V_nGroups,D):4
     [0>=V_nGroups,D=3,C=0] 
* CE 42: eval_sendMTFValues_6(V_nGroups,V_alphaSize,B) = 1+ eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,C,V_nGroups,D):5
     [V_nGroups>=1,D=3,C=0] 
* CE 43: eval_sendMTFValues_6(V_nGroups,V_alphaSize,B) = 1+ eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,C,V_nGroups,D):6
     [V_nGroups>=2,V_alphaSize>=1,D=3,C=0] 
* CE 44: eval_sendMTFValues_6(V_nGroups,V_alphaSize,B) = 1+ eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,C,V_nGroups,D):7
     [V_nGroups>=2,D=3,C=0] 

### Cost equations --> "Loop" of eval_sendMTFValues_6/3 
* CEs [43] --> Loop 36 
* CEs [44] --> Loop 37 
* CEs [42] --> Loop 38 
* CEs [41] --> Loop 39 
* CEs [40] --> Loop 40 
* CEs [39] --> Loop 41 
* CEs [38] --> Loop 42 

#### Loops of eval_sendMTFValues_6/3 
* Loop 36: eval_sendMTFValues_6(V_nGroups,V_alphaSize,B) [V_alphaSize>=1,V_nGroups>=2] 
* Loop 37: eval_sendMTFValues_6(V_nGroups,V_alphaSize,B) [V_nGroups>=2] 
* Loop 38: eval_sendMTFValues_6(V_nGroups,V_alphaSize,B) [V_nGroups>=1] 
* Loop 39: eval_sendMTFValues_6(V_nGroups,V_alphaSize,B) [0>=V_nGroups] 
* Loop 40: eval_sendMTFValues_6(V_nGroups,V_alphaSize,B) [V_alphaSize>=1,V_nGroups=1] 
* Loop 41: eval_sendMTFValues_6(V_nGroups,V_alphaSize,B) [0>=V_alphaSize,V_nGroups=1] 
* Loop 42: eval_sendMTFValues_6(V_nGroups,V_alphaSize,B) [V_nGroups=1] 

### Ranking functions of CR eval_sendMTFValues_6(V_nGroups,V_alphaSize,B) 

#### Partial ranking functions of CR eval_sendMTFValues_6(V_nGroups,V_alphaSize,B) 


### Resulting Chains:eval_sendMTFValues_6(V_nGroups,V_alphaSize,B) 
* [42]
* [41]
* [40]
* [39]
* [38]
* [37]
* [36]


### Merging Chains  eval_sendMTFValues_6/3 into  External patterns of execution 
* [[42]] --> 1 
* [[41]] --> 2 
* [[40]] --> 3 
* [[39]] --> 4 
* [[38]] --> 5 
* [[37]] --> 6 
* [[36]] --> 7 


### Specialization of cost equations eval_sendMTFValues_start/3 
* CE 1 is refined into CE [45,46,47,48,49,50,51] 


#### Refined cost equations eval_sendMTFValues_start/3 
* CE 45: eval_sendMTFValues_start(V_nGroups,V_alphaSize,B) = 0+ eval_sendMTFValues_6(C,V_alphaSize,B):1
     [C=1,V_nGroups=1] 
* CE 46: eval_sendMTFValues_start(V_nGroups,V_alphaSize,B) = 0+ eval_sendMTFValues_6(C,V_alphaSize,B):2
     [0>=V_alphaSize,C=1,V_nGroups=1] 
* CE 47: eval_sendMTFValues_start(V_nGroups,V_alphaSize,B) = 0+ eval_sendMTFValues_6(C,V_alphaSize,B):3
     [V_alphaSize>=1,C=1,V_nGroups=1] 
* CE 48: eval_sendMTFValues_start(V_nGroups,V_alphaSize,B) = 0+ eval_sendMTFValues_6(V_nGroups,V_alphaSize,B):4
     [0>=V_nGroups] 
* CE 49: eval_sendMTFValues_start(V_nGroups,V_alphaSize,B) = 0+ eval_sendMTFValues_6(V_nGroups,V_alphaSize,B):5
     [V_nGroups>=1] 
* CE 50: eval_sendMTFValues_start(V_nGroups,V_alphaSize,B) = 0+ eval_sendMTFValues_6(V_nGroups,V_alphaSize,B):6
     [V_nGroups>=2] 
* CE 51: eval_sendMTFValues_start(V_nGroups,V_alphaSize,B) = 0+ eval_sendMTFValues_6(V_nGroups,V_alphaSize,B):7
     [V_alphaSize>=1,V_nGroups>=2] 

### Cost equations --> "Loop" of eval_sendMTFValues_start/3 
* CEs [51] --> Loop 43 
* CEs [50] --> Loop 44 
* CEs [49] --> Loop 45 
* CEs [48] --> Loop 46 
* CEs [47] --> Loop 47 
* CEs [46] --> Loop 48 
* CEs [45] --> Loop 49 

#### Loops of eval_sendMTFValues_start/3 
* Loop 43: eval_sendMTFValues_start(V_nGroups,V_alphaSize,B) [V_alphaSize>=1,V_nGroups>=2] 
* Loop 44: eval_sendMTFValues_start(V_nGroups,V_alphaSize,B) [V_nGroups>=2] 
* Loop 45: eval_sendMTFValues_start(V_nGroups,V_alphaSize,B) [V_nGroups>=1] 
* Loop 46: eval_sendMTFValues_start(V_nGroups,V_alphaSize,B) [0>=V_nGroups] 
* Loop 47: eval_sendMTFValues_start(V_nGroups,V_alphaSize,B) [V_alphaSize>=1,V_nGroups=1] 
* Loop 48: eval_sendMTFValues_start(V_nGroups,V_alphaSize,B) [0>=V_alphaSize,V_nGroups=1] 
* Loop 49: eval_sendMTFValues_start(V_nGroups,V_alphaSize,B) [V_nGroups=1] 

### Ranking functions of CR eval_sendMTFValues_start(V_nGroups,V_alphaSize,B) 

#### Partial ranking functions of CR eval_sendMTFValues_start(V_nGroups,V_alphaSize,B) 


### Resulting Chains:eval_sendMTFValues_start(V_nGroups,V_alphaSize,B) 
* [49]
* [48]
* [47]
* [46]
* [45]
* [44]
* [43]


### Merging Chains  eval_sendMTFValues_start/3 into  External patterns of execution 
* [[49]] --> 1 
* [[48]] --> 2 
* [[47]] --> 3 
* [[46]] --> 4 
* [[45]] --> 5 
* [[44]] --> 6 
* [[43]] --> 7 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 18 

#### Computing cost of phase [16] 

#### Simplifying cost structure of CE 16 

#### Cost of loops [16] 

 * loop 16:eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,V_ge_0,B,C,D,E,F,G,H) -> [eval_sendMTFValues_bb3_in(V_nGroups',V_alphaSize',V_gs_0',V_nPart_0',V_ge_0',B',C',D',E',F',G',H')] 
1
##### Pending set eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,V_ge_0,B,C,D,E,F,G,H)
* Psum in Loop 16: [it(16)=<1]

###### Computing sum for it(16)=<1  in Loop 16 
   - Applying inductive sum strategy 
     - head Candidate: V_alphaSize-V_ge_0-1 
     - head Candidate: V_alphaSize-V_ge_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_alphaSize-V_ge_0-1 
     - tail Candidate: V_alphaSize-V_ge_0-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(16)=<V_alphaSize-V_ge_0-1,it(16)=<V_alphaSize-V_ge_0-1,it(16)=<V_alphaSize-V_ge_0-V_alphaSize'+V_ge_0',it(16)=<V_alphaSize-V_ge_0-V_alphaSize'+V_ge_0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [16] 

#### Simplifying cost structure of phase [16] 

#### Cost of phase [16]:eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,V_ge_0,B,C,D,E,F,G,H) -> [eval_sendMTFValues_bb3_in(V_nGroups',V_alphaSize',V_gs_0',V_nPart_0',V_ge_0',B',C',D',E',F',G',H')] 
1*it(16)+0
  Such that:it(16) =< V_alphaSize-V_ge_0
it(16) =< V_alphaSize-V_ge_0-V_alphaSize'+V_ge_0'

#### Simplifying cost structure of chain [[16],15] 

#### Simplifying cost structure of CE 17 

#### Found solution for phase  [16] in the cache 

#### Cost of phase [16]:eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,V_ge_0,B,C,D,E,F,G,H) -> [eval_sendMTFValues_bb3_in(V_nGroups',V_alphaSize',V_gs_0',V_nPart_0',V_ge_0',B',C',D',E',F',G',H')] 
1*it(16)+0
  Such that:it(16) =< V_alphaSize-V_ge_0
it(16) =< V_alphaSize-V_ge_0-V_alphaSize'+V_ge_0'

#### Simplifying cost structure of chain [[16],14] 

#### Cost of chains of eval_sendMTFValues_bb3_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,V_ge_0,B,C,D,E,F,G,H):
* Chain [[16],15]: 1*it(16)+0
  Such that:it(16) =< -V_ge_0+G

  with precondition: [B=2,H=0,V_nGroups=C,V_alphaSize=D,V_gs_0=E,V_nPart_0=F,V_nPart_0>=1,V_ge_0+1>=V_gs_0,G>=V_ge_0+1,V_alphaSize>=G+1] 

* Chain [[16],14]: 1*it(16)+0
  Such that:it(16) =< V_alphaSize-V_ge_0

  with precondition: [B=2,V_nGroups=C,V_alphaSize=D,V_gs_0=E,V_nPart_0=F,V_alphaSize=G+1,V_nPart_0>=1,V_ge_0+1>=V_gs_0,V_alphaSize>=V_ge_0+2] 

* Chain [15]: 0
  with precondition: [B=2,H=0,C=V_nGroups,D=V_alphaSize,V_gs_0=E,V_nPart_0=F,V_ge_0=G,V_nPart_0>=1,V_ge_0+1>=V_gs_0] 

* Chain [14]: 0
  with precondition: [B=2,C=V_nGroups,V_alphaSize=D,V_gs_0=E,V_nPart_0=F,V_ge_0=G,V_nPart_0>=1,V_ge_0+1>=V_alphaSize,V_ge_0+1>=V_gs_0] 


#### Simplifying cost structure of CE 19 

#### Computing cost of phase [17,18,19,20,21,22,23,24,25,26,27,28,29,30] 
 * The following loops are unfeasible in this instance of the phase [17,18,19,20,21,22,23,24,25,26,27,28,29,30] : [19,24] 
 * Renamed intermediate variables: 
[(eq(22,1),it(16))>>s(1)]

#### Simplifying cost structure of CE 22 
 * Renamed intermediate variables: 
[(it(17),s(1))>>s(2)]
 * Renamed intermediate variables: 
[(eq(20,1),it(16))>>s(3)]

#### Simplifying cost structure of CE 20 
 * Renamed intermediate variables: 
[(it(18),s(3))>>s(4)]

#### Simplifying cost structure of CE 28 

#### Simplifying cost structure of CE 26 
 * Renamed intermediate variables: 
[(eq(21,1),it(16))>>s(5)]

#### Simplifying cost structure of CE 21 
 * Renamed intermediate variables: 
[(it(22),s(5))>>s(6)]
 * Renamed intermediate variables: 
[(eq(23,1),it(16))>>s(7)]

#### Simplifying cost structure of CE 23 
 * Renamed intermediate variables: 
[(it(23),s(7))>>s(8)]
 * Renamed intermediate variables: 
[(eq(31,1),it(16))>>s(9)]

#### Simplifying cost structure of CE 31 
 * Renamed intermediate variables: 
[(it(25),s(9))>>s(10)]

#### Simplifying cost structure of CE 32 

#### Simplifying cost structure of CE 30 
 * Renamed intermediate variables: 
[(eq(33,1),it(16))>>s(11)]

#### Simplifying cost structure of CE 33 
 * Renamed intermediate variables: 
[(it(28),s(11))>>s(12)]
 * Renamed intermediate variables: 
[(eq(27,1),it(16))>>s(13)]

#### Simplifying cost structure of CE 27 
 * Renamed intermediate variables: 
[(it(29),s(13))>>s(14)]
 * Renamed intermediate variables: 
[(eq(29,1),it(16))>>s(15)]

#### Simplifying cost structure of CE 29 
 * Renamed intermediate variables: 
[(it(30),s(15))>>s(16)]

#### Cost of loops [17,18,20,21,22,23,25,26,27,28,29,30] 

 * loop 17:eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) -> [eval_sendMTFValues_bb1_in(V_nGroups',V_alphaSize',V_gs_0',V_nPart_0',B')] 
1*s(2)+2
  Such that:s(2) =< -V_gs_0+V_gs_0'

 * loop 18:eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) -> [eval_sendMTFValues_bb1_in(V_nGroups',V_alphaSize',V_gs_0',V_nPart_0',B')] 
1*s(4)+2
  Such that:s(4) =< -V_gs_0+V_gs_0'+1

 * loop 20:eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) -> [eval_sendMTFValues_bb1_in(V_nGroups',V_alphaSize',V_gs_0',V_nPart_0',B')] 
2
 * loop 21:eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) -> [eval_sendMTFValues_bb1_in(V_nGroups',V_alphaSize',V_gs_0',V_nPart_0',B')] 
2
 * loop 22:eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) -> [eval_sendMTFValues_bb1_in(V_nGroups',V_alphaSize',V_gs_0',V_nPart_0',B')] 
1*s(6)+2
  Such that:s(6) =< V_alphaSize-V_gs_0+1

 * loop 23:eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) -> [eval_sendMTFValues_bb1_in(V_nGroups',V_alphaSize',V_gs_0',V_nPart_0',B')] 
1*s(8)+2
  Such that:s(8) =< V_alphaSize-V_gs_0+1

 * loop 25:eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) -> [eval_sendMTFValues_bb1_in(V_nGroups',V_alphaSize',V_gs_0',V_nPart_0',B')] 
1*s(10)+2
  Such that:s(10) =< -V_gs_0+V_gs_0'

 * loop 26:eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) -> [eval_sendMTFValues_bb1_in(V_nGroups',V_alphaSize',V_gs_0',V_nPart_0',B')] 
2
 * loop 27:eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) -> [eval_sendMTFValues_bb1_in(V_nGroups',V_alphaSize',V_gs_0',V_nPart_0',B')] 
2
 * loop 28:eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) -> [eval_sendMTFValues_bb1_in(V_nGroups',V_alphaSize',V_gs_0',V_nPart_0',B')] 
1*s(12)+2
  Such that:s(12) =< V_alphaSize-V_gs_0+1

 * loop 29:eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) -> [eval_sendMTFValues_bb1_in(V_nGroups',V_alphaSize',V_gs_0',V_nPart_0',B')] 
1*s(14)+2
  Such that:s(14) =< 1

 * loop 30:eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) -> [eval_sendMTFValues_bb1_in(V_nGroups',V_alphaSize',V_gs_0',V_nPart_0',B')] 
1*s(16)+2
  Such that:s(16) =< 2

##### Pending set eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B)
* Psum in Loop 17: [it(17)=<1,s(17)=< -V_gs_0+V_gs_0']
* Psum in Loop 18: [it(18)=<1,s(18)=< -V_gs_0+V_gs_0'+1]
* Psum in Loop 20: [it(20)=<1]
* Psum in Loop 21: [it(21)=<1]
* Psum in Loop 22: [it(22)=<1,s(19)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 23: [it(23)=<1,s(20)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 25: [it(25)=<1,s(21)=< -V_gs_0+V_gs_0']
* Psum in Loop 26: [it(26)=<1]
* Psum in Loop 27: [it(27)=<1]
* Psum in Loop 28: [it(28)=<1,s(22)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 29: [it(29)=<1,s(23)=<1]
* Psum in Loop 30: [it(30)=<1,s(24)=<2]

###### Computing sum for it(17)=<1  in Loop 17 
   - Applying inductive sum strategy 
     - head Candidate: V_nPart_0 
       - Loop 18 is collaborative and bounds [it(18)] 
       - Loop 20 is collaborative and bounds [it(20)] 
       - Loop 21 is collaborative and bounds [it(21)] 
       - Loop 22 is collaborative and bounds [it(22)] 
       - Loop 23 is collaborative and bounds [it(23)] 
       - Loop 25 is collaborative and bounds [it(25)] 
       - Loop 26 is collaborative and bounds [it(26)] 
       - Loop 27 is collaborative and bounds [it(27)] 
       - Loop 28 is collaborative and bounds [it(28)] 
       - Loop 29 is collaborative and bounds [it(29)] 
       - Loop 30 is collaborative and bounds [it(30)] 
     - tail Candidate: V_nPart_0 
       - Loop 18 is collaborative and bounds [it(18)] 
       - Loop 20 is collaborative and bounds [it(20)] 
       - Loop 21 is collaborative and bounds [it(21)] 
       - Loop 22 is collaborative and bounds [it(22)] 
       - Loop 23 is collaborative and bounds [it(23)] 
       - Loop 25 is collaborative and bounds [it(25)] 
       - Loop 26 is collaborative and bounds [it(26)] 
       - Loop 27 is collaborative and bounds [it(27)] 
       - Loop 28 is collaborative and bounds [it(28)] 
       - Loop 29 is collaborative and bounds [it(29)] 
       - Loop 30 is collaborative and bounds [it(30)] 
 * Adding constraints: [it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(25)+it(26)+it(27)+it(28)+it(29)+it(30)=<V_nPart_0,it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(25)+it(26)+it(27)+it(28)+it(29)+it(30)=<V_nPart_0-V_nPart_0'] 

##### Pending set eval_sendMTFValues_0(V_nGroups,V_alphaSize,B)
* Psum in Loop 17: [s(17)=< -V_gs_0+V_gs_0']
* Psum in Loop 18: [it(18)=<1,s(18)=< -V_gs_0+V_gs_0'+1]
* Psum in Loop 20: [it(20)=<1]
* Psum in Loop 21: [it(21)=<1]
* Psum in Loop 22: [it(22)=<1,s(19)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 23: [it(23)=<1,s(20)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 25: [it(25)=<1,s(21)=< -V_gs_0+V_gs_0']
* Psum in Loop 26: [it(26)=<1]
* Psum in Loop 27: [it(27)=<1]
* Psum in Loop 28: [it(28)=<1,s(22)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 29: [it(29)=<1,s(23)=<1]
* Psum in Loop 30: [it(30)=<1,s(24)=<2]

###### Computing sum for s(17)=< -V_gs_0+V_gs_0'  in Loop 17 
   - Applying inductive sum strategy 
     - head Candidate: V_alphaSize-V_gs_0 
       - Loop 18 is collaborative and bounds [it(18)] 
       - Loop 20 is collaborative
       - Loop 21 is collaborative
       - Loop 22 is collaborative and bounds [it(22)] 
       - Loop 23 is collaborative and bounds [it(23)] 
       - Loop 25 is collaborative and bounds [it(25)] 
       - Loop 26 is collaborative
       - Loop 27 is collaborative
       - Loop 28 is collaborative and bounds [it(28)] 
       - Loop 29 is collaborative and bounds [it(29)] 
       - Loop 30 is collaborative and bounds [it(30)] 
     - tail Candidate: V_alphaSize-V_gs_0 
       - Loop 18 is collaborative and bounds [it(18)] 
       - Loop 20 is collaborative
       - Loop 21 is collaborative
       - Loop 22 is collaborative and bounds [it(22)] 
       - Loop 23 is collaborative and bounds [it(23)] 
       - Loop 25 is collaborative and bounds [it(25)] 
       - Loop 26 is collaborative
       - Loop 27 is collaborative
       - Loop 28 is collaborative and bounds [it(28)] 
       - Loop 29 is collaborative and bounds [it(29)] 
       - Loop 30 is collaborative and bounds [it(30)] 
 * Adding constraints: [it(18)+it(22)+it(23)+it(25)+it(28)+it(29)+it(30)+s(17)=<V_alphaSize-V_gs_0,it(18)+it(22)+it(23)+it(25)+it(28)+it(29)+it(30)+s(17)=<V_alphaSize-V_gs_0-V_alphaSize'+V_gs_0'] 

##### Pending set eval_sendMTFValues_0(V_nGroups,V_alphaSize,B)
* Psum in Loop 18: [it(18)=<1,s(18)=< -V_gs_0+V_gs_0'+1]
* Psum in Loop 20: [it(20)=<1]
* Psum in Loop 21: [it(21)=<1]
* Psum in Loop 22: [it(22)=<1,s(19)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 23: [it(23)=<1,s(20)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 25: [it(25)=<1,s(21)=< -V_gs_0+V_gs_0']
* Psum in Loop 26: [it(26)=<1]
* Psum in Loop 27: [it(27)=<1]
* Psum in Loop 28: [it(28)=<1,s(22)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 29: [it(29)=<1,s(23)=<1]
* Psum in Loop 30: [it(30)=<1,s(24)=<2]

###### Computing sum for it(18)=<1  in Loop 18 
   - Applying inductive sum strategy 
     - head Candidate: V_nPart_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_nPart_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(25)+it(26)+it(27)+it(28)+it(29)+it(30)=<V_nPart_0,it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(25)+it(26)+it(27)+it(28)+it(29)+it(30)=<V_nPart_0-V_nPart_0'] 

##### Pending set eval_sendMTFValues_0(V_nGroups,V_alphaSize,B)
* Psum in Loop 18: [s(18)=< -V_gs_0+V_gs_0'+1]
* Psum in Loop 20: [it(20)=<1]
* Psum in Loop 21: [it(21)=<1]
* Psum in Loop 22: [it(22)=<1,s(19)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 23: [it(23)=<1,s(20)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 25: [it(25)=<1,s(21)=< -V_gs_0+V_gs_0']
* Psum in Loop 26: [it(26)=<1]
* Psum in Loop 27: [it(27)=<1]
* Psum in Loop 28: [it(28)=<1,s(22)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 29: [it(29)=<1,s(23)=<1]
* Psum in Loop 30: [it(30)=<1,s(24)=<2]

###### Computing sum for s(18)=< -V_gs_0+V_gs_0'+1  in Loop 18 
   - Applying inductive sum strategy 
     - head Candidate: V_alphaSize-V_gs_0+V_nPart_0-2 
       - Loop 17 is collaborative
       - Loop 20 is collaborative
       - Loop 21 is collaborative
       - Loop 22 is collaborative and bounds [it(22)] 
       - Loop 23 is collaborative and bounds [it(23)] 
       - Loop 25 is collaborative
       - Loop 26 is collaborative
       - Loop 27 is collaborative
       - Loop 28 is collaborative
       - Loop 29 is collaborative
       - Loop 30 is collaborative
     - head Candidate: 2*V_alphaSize-2*V_gs_0-2 
       - Loop 17 is collaborative
       - Loop 20 is collaborative
       - Loop 21 is collaborative
       - Loop 22 is collaborative and bounds [it(22)] 
       - Loop 23 is collaborative and bounds [it(23)] 
       - Loop 25 is collaborative
       - Loop 26 is collaborative
       - Loop 27 is collaborative
       - Loop 28 is collaborative
       - Loop 29 is collaborative
       - Loop 30 is collaborative
     - tail Candidate: V_alphaSize-V_gs_0+V_nPart_0-2 
       - Loop 17 is collaborative
       - Loop 20 is collaborative and bounds [it(20)] 
       - Loop 21 is collaborative and bounds [it(21)] 
       - Loop 22 is collaborative and bounds [it(22)] 
       - Loop 23 is collaborative and bounds [it(23)] 
       - Loop 25 is collaborative and bounds [it(25)] 
       - Loop 26 is collaborative and bounds [it(26)] 
       - Loop 27 is collaborative and bounds [it(27)] 
       - Loop 28 is collaborative and bounds [it(28)] 
       - Loop 29 is collaborative and bounds [it(29)] 
       - Loop 30 is collaborative and bounds [it(30)] 
     - tail Candidate: 2*V_alphaSize-2*V_gs_0-2 
       - Loop 17 is collaborative
       - Loop 20 is collaborative
       - Loop 21 is collaborative
       - Loop 22 is collaborative and bounds [it(22)] 
       - Loop 23 is collaborative and bounds [it(23)] 
       - Loop 25 is collaborative and bounds [it(25)] 
       - Loop 26 is collaborative
       - Loop 27 is collaborative
       - Loop 28 is collaborative and bounds [it(28)] 
       - Loop 29 is collaborative and bounds [it(29)] 
       - Loop 30 is collaborative and bounds [it(30)] 
 * Adding constraints: [it(22)+it(23)+s(18)=<V_alphaSize-V_gs_0+V_nPart_0-2,it(22)+it(23)+s(18)=<2*V_alphaSize-2*V_gs_0-2,it(20)+it(21)+it(22)+it(23)+it(25)+it(26)+it(27)+it(28)+it(29)+it(30)+s(18)=<V_alphaSize-V_gs_0+V_nPart_0-V_alphaSize'+V_gs_0'-V_nPart_0',it(22)+it(23)+it(25)+it(28)+it(29)+it(30)+s(18)=<2*V_alphaSize-2*V_gs_0-2*V_alphaSize'+2*V_gs_0'] 

##### Pending set eval_sendMTFValues_0(V_nGroups,V_alphaSize,B)
* Psum in Loop 20: [it(20)=<1]
* Psum in Loop 21: [it(21)=<1]
* Psum in Loop 22: [it(22)=<1,s(19)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 23: [it(23)=<1,s(20)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 25: [it(25)=<1,s(21)=< -V_gs_0+V_gs_0']
* Psum in Loop 26: [it(26)=<1]
* Psum in Loop 27: [it(27)=<1]
* Psum in Loop 28: [it(28)=<1,s(22)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 29: [it(29)=<1,s(23)=<1]
* Psum in Loop 30: [it(30)=<1,s(24)=<2]

###### Computing sum for it(20)=<1  in Loop 20 
   - Applying inductive sum strategy 
     - head Candidate: V_nPart_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_nPart_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(25)+it(26)+it(27)+it(28)+it(29)+it(30)=<V_nPart_0,it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(25)+it(26)+it(27)+it(28)+it(29)+it(30)=<V_nPart_0-V_nPart_0'] 

##### Pending set eval_sendMTFValues_0(V_nGroups,V_alphaSize,B)
* Psum in Loop 21: [it(21)=<1]
* Psum in Loop 22: [it(22)=<1,s(19)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 23: [it(23)=<1,s(20)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 25: [it(25)=<1,s(21)=< -V_gs_0+V_gs_0']
* Psum in Loop 26: [it(26)=<1]
* Psum in Loop 27: [it(27)=<1]
* Psum in Loop 28: [it(28)=<1,s(22)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 29: [it(29)=<1,s(23)=<1]
* Psum in Loop 30: [it(30)=<1,s(24)=<2]

###### Computing sum for it(21)=<1  in Loop 21 
   - Applying inductive sum strategy 
     - head Candidate: V_nPart_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_nPart_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(25)+it(26)+it(27)+it(28)+it(29)+it(30)=<V_nPart_0,it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(25)+it(26)+it(27)+it(28)+it(29)+it(30)=<V_nPart_0-V_nPart_0'] 

##### Pending set eval_sendMTFValues_0(V_nGroups,V_alphaSize,B)
* Psum in Loop 22: [it(22)=<1,s(19)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 23: [it(23)=<1,s(20)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 25: [it(25)=<1,s(21)=< -V_gs_0+V_gs_0']
* Psum in Loop 26: [it(26)=<1]
* Psum in Loop 27: [it(27)=<1]
* Psum in Loop 28: [it(28)=<1,s(22)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 29: [it(29)=<1,s(23)=<1]
* Psum in Loop 30: [it(30)=<1,s(24)=<2]

###### Computing sum for it(22)=<1  in Loop 22 
   - Applying inductive sum strategy 
     - head Candidate: V_nPart_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_nPart_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(25)+it(26)+it(27)+it(28)+it(29)+it(30)=<V_nPart_0,it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(25)+it(26)+it(27)+it(28)+it(29)+it(30)=<V_nPart_0-V_nPart_0'] 

##### Pending set eval_sendMTFValues_0(V_nGroups,V_alphaSize,B)
* Psum in Loop 22: [s(19)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 23: [it(23)=<1,s(20)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 25: [it(25)=<1,s(21)=< -V_gs_0+V_gs_0']
* Psum in Loop 26: [it(26)=<1]
* Psum in Loop 27: [it(27)=<1]
* Psum in Loop 28: [it(28)=<1,s(22)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 29: [it(29)=<1,s(23)=<1]
* Psum in Loop 30: [it(30)=<1,s(24)=<2]

###### Computing sum for s(19)=<V_alphaSize-V_gs_0+1  in Loop 22 
   - Applying inductive sum strategy 
     - head Candidate: V_alphaSize-V_gs_0+2*V_nPart_0-3 
       - Loop 17 is collaborative
       - Loop 18 is collaborative
       - Loop 20 is collaborative
       - Loop 21 is collaborative
       - Loop 23 is collaborative and bounds [it(23)] 
       - Loop 25 is collaborative
       - Loop 26 is collaborative
       - Loop 27 is collaborative
       - Loop 28 is collaborative
       - Loop 29 is collaborative
       - Loop 30 is collaborative
     - head Candidate: 3*V_alphaSize-3*V_gs_0-3 
       - Loop 17 is collaborative
       - Loop 18 is collaborative
       - Loop 20 is collaborative
       - Loop 21 is collaborative
       - Loop 23 is collaborative and bounds [it(23)] 
       - Loop 25 is collaborative
       - Loop 26 is collaborative
       - Loop 27 is collaborative
       - Loop 28 is collaborative
       - Loop 29 is collaborative
       - Loop 30 is collaborative
     - tail Candidate: V_alphaSize-V_gs_0+2*V_nPart_0-3 
       - Loop 17 is collaborative
       - Loop 18 is collaborative
       - Loop 20 is collaborative
       - Loop 21 is collaborative
       - Loop 23 is collaborative and bounds [it(23)] 
       - Loop 25 is collaborative and bounds [it(25)] 
       - Loop 26 is collaborative and bounds [it(26)] 
       - Loop 27 is collaborative and bounds [it(27)] 
       - Loop 28 is collaborative and bounds [it(28)] 
       - Loop 29 is collaborative and bounds [it(29)] 
       - Loop 30 is collaborative and bounds [it(30)] 
     - tail Candidate: 3*V_alphaSize-3*V_gs_0-3 
       - Loop 17 is collaborative
       - Loop 18 is collaborative
       - Loop 20 is collaborative
       - Loop 21 is collaborative
       - Loop 23 is collaborative and bounds [it(23)] 
       - Loop 25 is collaborative and bounds [it(25)] 
       - Loop 26 is collaborative
       - Loop 27 is collaborative
       - Loop 28 is collaborative and bounds [it(28)] 
       - Loop 29 is collaborative and bounds [it(29)] 
       - Loop 30 is collaborative and bounds [it(30)] 
 * Adding constraints: [it(23)+s(19)=<V_alphaSize-V_gs_0+2*V_nPart_0-3,it(23)+s(19)=<3*V_alphaSize-3*V_gs_0-3,it(23)+it(25)+it(26)+it(27)+it(28)+it(29)+it(30)+s(19)=<V_alphaSize-V_gs_0+2*V_nPart_0-V_alphaSize'+V_gs_0'-2*V_nPart_0',it(23)+it(25)+it(28)+it(29)+it(30)+s(19)=<3*V_alphaSize-3*V_gs_0-3*V_alphaSize'+3*V_gs_0'] 

##### Pending set eval_sendMTFValues_0(V_nGroups,V_alphaSize,B)
* Psum in Loop 23: [it(23)=<1,s(20)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 25: [it(25)=<1,s(21)=< -V_gs_0+V_gs_0']
* Psum in Loop 26: [it(26)=<1]
* Psum in Loop 27: [it(27)=<1]
* Psum in Loop 28: [it(28)=<1,s(22)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 29: [it(29)=<1,s(23)=<1]
* Psum in Loop 30: [it(30)=<1,s(24)=<2]

###### Computing sum for it(23)=<1  in Loop 23 
   - Applying inductive sum strategy 
     - head Candidate: V_nPart_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_nPart_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(25)+it(26)+it(27)+it(28)+it(29)+it(30)=<V_nPart_0,it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(25)+it(26)+it(27)+it(28)+it(29)+it(30)=<V_nPart_0-V_nPart_0'] 

##### Pending set eval_sendMTFValues_0(V_nGroups,V_alphaSize,B)
* Psum in Loop 23: [s(20)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 25: [it(25)=<1,s(21)=< -V_gs_0+V_gs_0']
* Psum in Loop 26: [it(26)=<1]
* Psum in Loop 27: [it(27)=<1]
* Psum in Loop 28: [it(28)=<1,s(22)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 29: [it(29)=<1,s(23)=<1]
* Psum in Loop 30: [it(30)=<1,s(24)=<2]

###### Computing sum for s(20)=<V_alphaSize-V_gs_0+1  in Loop 23 
   - Applying inductive sum strategy 
     - head Candidate: V_alphaSize-V_gs_0+V_nPart_0-1 
       - Loop 17 is collaborative
       - Loop 18 is collaborative
       - Loop 20 is collaborative
       - Loop 21 is collaborative
       - Loop 22 is collaborative
       - Loop 25 is collaborative and bounds [it(25)] 
       - Loop 26 is collaborative
       - Loop 27 is collaborative
       - Loop 28 is collaborative and bounds [it(28)] 
       - Loop 29 is collaborative and bounds [it(29)] 
       - Loop 30 is collaborative and bounds [it(30)] 
     - head Candidate: 3/2*V_alphaSize-3/2*V_gs_0 
       - Loop 17 is collaborative
       - Loop 18 is collaborative
       - Loop 20 is collaborative
       - Loop 21 is collaborative
       - Loop 22 is collaborative
       - Loop 25 is collaborative and bounds [it(25)] 
       - Loop 26 is collaborative
       - Loop 27 is collaborative
       - Loop 28 is collaborative and bounds [it(28)] 
       - Loop 29 is collaborative and bounds [it(29)] 
       - Loop 30 is collaborative and bounds [it(30)] 
     - tail Candidate: V_alphaSize-V_gs_0+V_nPart_0-1 
       - Loop 17 is collaborative
       - Loop 18 is collaborative
       - Loop 20 is collaborative
       - Loop 21 is collaborative
       - Loop 22 is collaborative
       - Loop 25 is collaborative and bounds [it(25)] 
       - Loop 26 is collaborative and bounds [it(26)] 
       - Loop 27 is collaborative and bounds [it(27)] 
       - Loop 28 is collaborative and bounds [it(28)] 
       - Loop 29 is collaborative and bounds [it(29)] 
       - Loop 30 is collaborative and bounds [it(30)] 
     - tail Candidate: 3/2*V_alphaSize-3/2*V_gs_0 
       - Loop 17 is collaborative
       - Loop 18 is collaborative
       - Loop 20 is collaborative
       - Loop 21 is collaborative
       - Loop 22 is collaborative
       - Loop 25 is collaborative and bounds [it(25)] 
       - Loop 26 is collaborative
       - Loop 27 is collaborative
       - Loop 28 is collaborative and bounds [it(28)] 
       - Loop 29 is collaborative and bounds [it(29)] 
       - Loop 30 is collaborative and bounds [it(30)] 
 * Adding constraints: [it(25)+it(28)+it(29)+it(30)+s(20)=<V_alphaSize-V_gs_0+V_nPart_0-1,it(25)+it(28)+it(29)+it(30)+s(20)=<3/2*V_alphaSize-3/2*V_gs_0,it(25)+it(26)+it(27)+it(28)+it(29)+it(30)+s(20)=<V_alphaSize-V_gs_0+V_nPart_0-V_alphaSize'+V_gs_0'-V_nPart_0',it(25)+it(28)+it(29)+it(30)+s(20)=<3/2*V_alphaSize-3/2*V_gs_0-3/2*V_alphaSize'+3/2*V_gs_0'] 

##### Pending set eval_sendMTFValues_0(V_nGroups,V_alphaSize,B)
* Psum in Loop 25: [it(25)=<1,s(21)=< -V_gs_0+V_gs_0']
* Psum in Loop 26: [it(26)=<1]
* Psum in Loop 27: [it(27)=<1]
* Psum in Loop 28: [it(28)=<1,s(22)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 29: [it(29)=<1,s(23)=<1]
* Psum in Loop 30: [it(30)=<1,s(24)=<2]

###### Computing sum for it(25)=<1  in Loop 25 
   - Applying inductive sum strategy 
     - head Candidate: V_nPart_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_nPart_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(25)+it(26)+it(27)+it(28)+it(29)+it(30)=<V_nPart_0,it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(25)+it(26)+it(27)+it(28)+it(29)+it(30)=<V_nPart_0-V_nPart_0'] 

##### Pending set eval_sendMTFValues_0(V_nGroups,V_alphaSize,B)
* Psum in Loop 25: [s(21)=< -V_gs_0+V_gs_0']
* Psum in Loop 26: [it(26)=<1]
* Psum in Loop 27: [it(27)=<1]
* Psum in Loop 28: [it(28)=<1,s(22)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 29: [it(29)=<1,s(23)=<1]
* Psum in Loop 30: [it(30)=<1,s(24)=<2]

###### Computing sum for s(21)=< -V_gs_0+V_gs_0'  in Loop 25 
   - Applying inductive sum strategy 
     - head Candidate: V_alphaSize-V_gs_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_alphaSize-V_gs_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(18)+it(22)+it(23)+it(28)+it(29)+it(30)+s(17)+s(21)=<V_alphaSize-V_gs_0,it(18)+it(22)+it(23)+it(28)+it(29)+it(30)+s(17)+s(21)=<V_alphaSize-V_gs_0-V_alphaSize'+V_gs_0'] 

##### Pending set eval_sendMTFValues_0(V_nGroups,V_alphaSize,B)
* Psum in Loop 26: [it(26)=<1]
* Psum in Loop 27: [it(27)=<1]
* Psum in Loop 28: [it(28)=<1,s(22)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 29: [it(29)=<1,s(23)=<1]
* Psum in Loop 30: [it(30)=<1,s(24)=<2]

###### Computing sum for it(26)=<1  in Loop 26 
   - Applying inductive sum strategy 
     - head Candidate: V_nPart_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_nPart_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(25)+it(26)+it(27)+it(28)+it(29)+it(30)=<V_nPart_0,it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(25)+it(26)+it(27)+it(28)+it(29)+it(30)=<V_nPart_0-V_nPart_0'] 

##### Pending set eval_sendMTFValues_0(V_nGroups,V_alphaSize,B)
* Psum in Loop 27: [it(27)=<1]
* Psum in Loop 28: [it(28)=<1,s(22)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 29: [it(29)=<1,s(23)=<1]
* Psum in Loop 30: [it(30)=<1,s(24)=<2]

###### Computing sum for it(27)=<1  in Loop 27 
   - Applying inductive sum strategy 
     - head Candidate: V_nPart_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_nPart_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(25)+it(26)+it(27)+it(28)+it(29)+it(30)=<V_nPart_0,it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(25)+it(26)+it(27)+it(28)+it(29)+it(30)=<V_nPart_0-V_nPart_0'] 

##### Pending set eval_sendMTFValues_0(V_nGroups,V_alphaSize,B)
* Psum in Loop 28: [it(28)=<1,s(22)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 29: [it(29)=<1,s(23)=<1]
* Psum in Loop 30: [it(30)=<1,s(24)=<2]

###### Computing sum for it(28)=<1  in Loop 28 
   - Applying inductive sum strategy 
     - head Candidate: V_nPart_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_nPart_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(25)+it(26)+it(27)+it(28)+it(29)+it(30)=<V_nPart_0,it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(25)+it(26)+it(27)+it(28)+it(29)+it(30)=<V_nPart_0-V_nPart_0'] 

##### Pending set eval_sendMTFValues_0(V_nGroups,V_alphaSize,B)
* Psum in Loop 28: [s(22)=<V_alphaSize-V_gs_0+1]
* Psum in Loop 29: [it(29)=<1,s(23)=<1]
* Psum in Loop 30: [it(30)=<1,s(24)=<2]

###### Computing sum for s(22)=<V_alphaSize-V_gs_0+1  in Loop 28 
   - Applying inductive sum strategy 
     - head Candidate: V_alphaSize-V_gs_0+V_nPart_0 
       - Loop 17 is collaborative
       - Loop 18 is collaborative
       - Loop 20 is collaborative
       - Loop 21 is collaborative
       - Loop 22 is collaborative
       - Loop 23 is collaborative
       - Loop 25 is collaborative
       - Loop 26 is collaborative
       - Loop 27 is collaborative
       - Loop 29 is collaborative and bounds [it(29)] 
       - Loop 30 is collaborative and bounds [it(30)] 
     - head Candidate: 2*V_alphaSize-2*V_gs_0 
       - Loop 17 is collaborative
       - Loop 18 is collaborative
       - Loop 20 is collaborative
       - Loop 21 is collaborative
       - Loop 22 is collaborative
       - Loop 23 is collaborative
       - Loop 25 is collaborative
       - Loop 26 is collaborative
       - Loop 27 is collaborative
       - Loop 29 is collaborative and bounds [it(29)] 
       - Loop 30 is collaborative and bounds [it(30)] 
     - tail Candidate: V_alphaSize-V_gs_0+V_nPart_0 
       - Loop 17 is collaborative
       - Loop 18 is collaborative
       - Loop 20 is collaborative
       - Loop 21 is collaborative
       - Loop 22 is collaborative
       - Loop 23 is collaborative
       - Loop 25 is collaborative
       - Loop 26 is collaborative
       - Loop 27 is collaborative
       - Loop 29 is collaborative and bounds [it(29)] 
       - Loop 30 is collaborative and bounds [it(30)] 
     - tail Candidate: 2*V_alphaSize-2*V_gs_0 
       - Loop 17 is collaborative
       - Loop 18 is collaborative
       - Loop 20 is collaborative
       - Loop 21 is collaborative
       - Loop 22 is collaborative
       - Loop 23 is collaborative
       - Loop 25 is collaborative
       - Loop 26 is collaborative
       - Loop 27 is collaborative
       - Loop 29 is collaborative and bounds [it(29)] 
       - Loop 30 is collaborative and bounds [it(30)] 
 * Adding constraints: [it(29)+it(30)+s(22)=<V_alphaSize-V_gs_0+V_nPart_0,it(29)+it(30)+s(22)=<2*V_alphaSize-2*V_gs_0,it(29)+it(30)+s(22)=<V_alphaSize-V_gs_0+V_nPart_0-V_alphaSize'+V_gs_0'-V_nPart_0',it(29)+it(30)+s(22)=<2*V_alphaSize-2*V_gs_0-2*V_alphaSize'+2*V_gs_0'] 

##### Pending set eval_sendMTFValues_0(V_nGroups,V_alphaSize,B)
* Psum in Loop 29: [it(29)=<1,s(23)=<1]
* Psum in Loop 30: [it(30)=<1,s(24)=<2]

###### Computing sum for it(29)=<1  in Loop 29 
   - Applying inductive sum strategy 
     - head Candidate: V_nPart_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_nPart_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(25)+it(26)+it(27)+it(28)+it(29)+it(30)=<V_nPart_0,it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(25)+it(26)+it(27)+it(28)+it(29)+it(30)=<V_nPart_0-V_nPart_0'] 

##### Pending set eval_sendMTFValues_0(V_nGroups,V_alphaSize,B)
* Psum in Loop 29: [s(23)=<1]
* Psum in Loop 30: [it(30)=<1,s(24)=<2]

###### Computing sum for s(23)=<1  in Loop 29 
   - Found a solution using cacheing 
 * Adding constraints: [s(23)=<aux(1),aux(1)+it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(25)+it(26)+it(27)+it(28)+it(30)=<V_nPart_0,aux(1)+it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(25)+it(26)+it(27)+it(28)+it(30)=<V_nPart_0-V_nPart_0'] 

##### Pending set eval_sendMTFValues_0(V_nGroups,V_alphaSize,B)
* Psum in Loop 30: [it(30)=<1,s(24)=<2]

###### Computing sum for it(30)=<1  in Loop 30 
   - Applying inductive sum strategy 
     - head Candidate: V_nPart_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_nPart_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(25)+it(26)+it(27)+it(28)+it(29)+it(30)=<V_nPart_0,it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(25)+it(26)+it(27)+it(28)+it(29)+it(30)=<V_nPart_0-V_nPart_0'] 

##### Pending set eval_sendMTFValues_0(V_nGroups,V_alphaSize,B)
* Psum in Loop 30: [s(24)=<2]

###### Computing sum for s(24)=<2  in Loop 30 
   - Found a solution using cacheing 
 * Adding constraints: [s(24)=<aux(2)*2,aux(2)+it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(25)+it(26)+it(27)+it(28)+it(29)=<V_nPart_0,aux(2)+it(17)+it(18)+it(20)+it(21)+it(22)+it(23)+it(25)+it(26)+it(27)+it(28)+it(29)=<V_nPart_0-V_nPart_0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [17,18,20,21,22,23,25,26,27,28,29,30] 

#### Simplifying cost structure of phase [17,18,20,21,22,23,25,26,27,28,29,30] 
 * Joined equivalent variables [it(29),it(30)] into it(29)
 * Joined equivalent variables [it(25),it(28)] into it(25)
 * Joined equivalent variables [s(17),s(21)] into s(17)
 * Joined equivalent variables [s(18),s(22)] into s(18)
 * Joined equivalent variables [it(26),it(27)] into it(26)
 * Joined equivalent variables [it(20),it(21)] into it(20)
 * Joined equivalent variables [aux(1),aux(2)] into aux(1)

#### Cost of phase [17,18,19,20,21,22,23,24,25,26,27,28,29,30]:eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) -> [eval_sendMTFValues_bb1_in(V_nGroups',V_alphaSize',V_gs_0',V_nPart_0',B')] 
2*it(17)+2*it(18)+4*it(20)+2*it(22)+2*it(23)+4*it(25)+4*it(26)+4*it(29)+2*s(17)+2*s(18)+1*s(19)+1*s(20)+1*s(23)+1*s(24)+0
  Such that:aux(3) =< V_alphaSize-V_gs_0
aux(4) =< V_alphaSize-V_gs_0+V_nPart_0
aux(5) =< V_alphaSize-V_gs_0+V_nPart_0-V_alphaSize'+V_gs_0'-V_nPart_0'
aux(6) =< V_alphaSize-V_gs_0+2*V_nPart_0
aux(7) =< V_alphaSize-V_gs_0+2*V_nPart_0-V_alphaSize'+V_gs_0'-2*V_nPart_0'
aux(8) =< V_alphaSize-V_gs_0-V_alphaSize'+V_gs_0'
aux(9) =< 2*V_alphaSize-2*V_gs_0
aux(10) =< 2*V_alphaSize-2*V_gs_0-2*V_alphaSize'+2*V_gs_0'
aux(11) =< 3*V_alphaSize-3*V_gs_0
aux(12) =< 3*V_alphaSize-3*V_gs_0-3*V_alphaSize'+3*V_gs_0'
aux(13) =< 3/2*V_alphaSize-3/2*V_gs_0
aux(14) =< 3/2*V_alphaSize-3/2*V_gs_0-3/2*V_alphaSize'+3/2*V_gs_0'
aux(15) =< V_nPart_0
aux(16) =< V_nPart_0-V_nPart_0'
it(18) =< aux(3)
it(22) =< aux(3)
it(23) =< aux(3)
it(25) =< aux(3)
it(29) =< aux(3)
s(17) =< aux(3)
it(22) =< aux(4)
it(23) =< aux(4)
it(25) =< aux(4)
it(29) =< aux(4)
s(18) =< aux(4)
s(20) =< aux(4)
it(20) =< aux(5)
it(22) =< aux(5)
it(23) =< aux(5)
it(25) =< aux(5)
it(26) =< aux(5)
it(29) =< aux(5)
s(18) =< aux(5)
s(20) =< aux(5)
it(23) =< aux(6)
s(19) =< aux(6)
it(23) =< aux(7)
it(25) =< aux(7)
it(26) =< aux(7)
it(29) =< aux(7)
s(19) =< aux(7)
it(18) =< aux(8)
it(22) =< aux(8)
it(23) =< aux(8)
it(25) =< aux(8)
it(29) =< aux(8)
s(17) =< aux(8)
it(22) =< aux(9)
it(23) =< aux(9)
it(29) =< aux(9)
s(18) =< aux(9)
it(22) =< aux(10)
it(23) =< aux(10)
it(25) =< aux(10)
it(29) =< aux(10)
s(18) =< aux(10)
it(23) =< aux(11)
s(19) =< aux(11)
it(23) =< aux(12)
it(25) =< aux(12)
it(29) =< aux(12)
s(19) =< aux(12)
it(25) =< aux(13)
it(29) =< aux(13)
s(20) =< aux(13)
it(25) =< aux(14)
it(29) =< aux(14)
s(20) =< aux(14)
aux(1) =< aux(15)
it(17) =< aux(15)
it(18) =< aux(15)
it(20) =< aux(15)
it(22) =< aux(15)
it(23) =< aux(15)
it(25) =< aux(15)
it(26) =< aux(15)
it(29) =< aux(15)
aux(1) =< aux(16)
it(17) =< aux(16)
it(18) =< aux(16)
it(20) =< aux(16)
it(22) =< aux(16)
it(23) =< aux(16)
it(25) =< aux(16)
it(26) =< aux(16)
it(29) =< aux(16)
s(24) =< aux(1)*2
s(23) =< aux(1)

#### Simplifying cost structure of chain [[17,18,19,20,21,22,23,24,25,26,27,28,29,30],35] 
 * Joined equivalent variables [aux(17),aux(15),aux(16)] into aux(17)
 * Joined equivalent variables [aux(17),aux(1)] into aux(17)
 * Joined equivalent variables [it(17),s(23)] into it(17)
 * Renamed intermediate variables: 
[(eq(37,1),it(16))>>s(25)]

#### Simplifying cost structure of CE 37 

#### Simplifying cost structure of chain [34,35] 

#### Found solution for phase  [17,18,19,20,21,22,23,24,25,26,27,28,29,30] in the cache 

#### Cost of phase [17,18,19,20,21,22,23,24,25,26,27,28,29,30]:eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) -> [eval_sendMTFValues_bb1_in(V_nGroups',V_alphaSize',V_gs_0',V_nPart_0',B')] 
2*it(17)+2*it(18)+4*it(20)+2*it(22)+2*it(23)+4*it(25)+4*it(26)+4*it(29)+2*s(17)+2*s(18)+1*s(19)+1*s(20)+1*s(23)+1*s(24)+0
  Such that:aux(3) =< V_alphaSize-V_gs_0
aux(4) =< V_alphaSize-V_gs_0+V_nPart_0
aux(5) =< V_alphaSize-V_gs_0+V_nPart_0-V_alphaSize'+V_gs_0'-V_nPart_0'
aux(6) =< V_alphaSize-V_gs_0+2*V_nPart_0
aux(7) =< V_alphaSize-V_gs_0+2*V_nPart_0-V_alphaSize'+V_gs_0'-2*V_nPart_0'
aux(8) =< V_alphaSize-V_gs_0-V_alphaSize'+V_gs_0'
aux(9) =< 2*V_alphaSize-2*V_gs_0
aux(10) =< 2*V_alphaSize-2*V_gs_0-2*V_alphaSize'+2*V_gs_0'
aux(11) =< 3*V_alphaSize-3*V_gs_0
aux(12) =< 3*V_alphaSize-3*V_gs_0-3*V_alphaSize'+3*V_gs_0'
aux(13) =< 3/2*V_alphaSize-3/2*V_gs_0
aux(14) =< 3/2*V_alphaSize-3/2*V_gs_0-3/2*V_alphaSize'+3/2*V_gs_0'
aux(15) =< V_nPart_0
aux(16) =< V_nPart_0-V_nPart_0'
it(18) =< aux(3)
it(22) =< aux(3)
it(23) =< aux(3)
it(25) =< aux(3)
it(29) =< aux(3)
s(17) =< aux(3)
it(22) =< aux(4)
it(23) =< aux(4)
it(25) =< aux(4)
it(29) =< aux(4)
s(18) =< aux(4)
s(20) =< aux(4)
it(20) =< aux(5)
it(22) =< aux(5)
it(23) =< aux(5)
it(25) =< aux(5)
it(26) =< aux(5)
it(29) =< aux(5)
s(18) =< aux(5)
s(20) =< aux(5)
it(23) =< aux(6)
s(19) =< aux(6)
it(23) =< aux(7)
it(25) =< aux(7)
it(26) =< aux(7)
it(29) =< aux(7)
s(19) =< aux(7)
it(18) =< aux(8)
it(22) =< aux(8)
it(23) =< aux(8)
it(25) =< aux(8)
it(29) =< aux(8)
s(17) =< aux(8)
it(22) =< aux(9)
it(23) =< aux(9)
it(29) =< aux(9)
s(18) =< aux(9)
it(22) =< aux(10)
it(23) =< aux(10)
it(25) =< aux(10)
it(29) =< aux(10)
s(18) =< aux(10)
it(23) =< aux(11)
s(19) =< aux(11)
it(23) =< aux(12)
it(25) =< aux(12)
it(29) =< aux(12)
s(19) =< aux(12)
it(25) =< aux(13)
it(29) =< aux(13)
s(20) =< aux(13)
it(25) =< aux(14)
it(29) =< aux(14)
s(20) =< aux(14)
aux(1) =< aux(15)
it(17) =< aux(15)
it(18) =< aux(15)
it(20) =< aux(15)
it(22) =< aux(15)
it(23) =< aux(15)
it(25) =< aux(15)
it(26) =< aux(15)
it(29) =< aux(15)
aux(1) =< aux(16)
it(17) =< aux(16)
it(18) =< aux(16)
it(20) =< aux(16)
it(22) =< aux(16)
it(23) =< aux(16)
it(25) =< aux(16)
it(26) =< aux(16)
it(29) =< aux(16)
s(24) =< aux(1)*2
s(23) =< aux(1)

#### Simplifying cost structure of chain [[17,18,19,20,21,22,23,24,25,26,27,28,29,30],34,35] 
 * Joined equivalent variables [aux(18),aux(3)] into aux(18)
 * Joined equivalent variables [aux(19),aux(4),aux(5)] into aux(19)
 * Joined equivalent variables [aux(20),aux(6),aux(7)] into aux(20)
 * Joined equivalent variables [aux(21),aux(9)] into aux(21)
 * Joined equivalent variables [aux(22),aux(11)] into aux(22)
 * Joined equivalent variables [aux(24),aux(13)] into aux(24)
 * Joined equivalent variables [aux(25),aux(15),aux(16)] into aux(25)
 * Joined equivalent variables [aux(25),aux(1)] into aux(25)
 * Joined equivalent variables [it(17),s(23)] into it(17)

#### Simplifying cost structure of CE 34 

#### Simplifying cost structure of chain [33,35] 

#### Found solution for phase  [17,18,19,20,21,22,23,24,25,26,27,28,29,30] in the cache 

#### Cost of phase [17,18,19,20,21,22,23,24,25,26,27,28,29,30]:eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) -> [eval_sendMTFValues_bb1_in(V_nGroups',V_alphaSize',V_gs_0',V_nPart_0',B')] 
2*it(17)+2*it(18)+4*it(20)+2*it(22)+2*it(23)+4*it(25)+4*it(26)+4*it(29)+2*s(17)+2*s(18)+1*s(19)+1*s(20)+1*s(23)+1*s(24)+0
  Such that:aux(3) =< V_alphaSize-V_gs_0
aux(4) =< V_alphaSize-V_gs_0+V_nPart_0
aux(5) =< V_alphaSize-V_gs_0+V_nPart_0-V_alphaSize'+V_gs_0'-V_nPart_0'
aux(6) =< V_alphaSize-V_gs_0+2*V_nPart_0
aux(7) =< V_alphaSize-V_gs_0+2*V_nPart_0-V_alphaSize'+V_gs_0'-2*V_nPart_0'
aux(8) =< V_alphaSize-V_gs_0-V_alphaSize'+V_gs_0'
aux(9) =< 2*V_alphaSize-2*V_gs_0
aux(10) =< 2*V_alphaSize-2*V_gs_0-2*V_alphaSize'+2*V_gs_0'
aux(11) =< 3*V_alphaSize-3*V_gs_0
aux(12) =< 3*V_alphaSize-3*V_gs_0-3*V_alphaSize'+3*V_gs_0'
aux(13) =< 3/2*V_alphaSize-3/2*V_gs_0
aux(14) =< 3/2*V_alphaSize-3/2*V_gs_0-3/2*V_alphaSize'+3/2*V_gs_0'
aux(15) =< V_nPart_0
aux(16) =< V_nPart_0-V_nPart_0'
it(18) =< aux(3)
it(22) =< aux(3)
it(23) =< aux(3)
it(25) =< aux(3)
it(29) =< aux(3)
s(17) =< aux(3)
it(22) =< aux(4)
it(23) =< aux(4)
it(25) =< aux(4)
it(29) =< aux(4)
s(18) =< aux(4)
s(20) =< aux(4)
it(20) =< aux(5)
it(22) =< aux(5)
it(23) =< aux(5)
it(25) =< aux(5)
it(26) =< aux(5)
it(29) =< aux(5)
s(18) =< aux(5)
s(20) =< aux(5)
it(23) =< aux(6)
s(19) =< aux(6)
it(23) =< aux(7)
it(25) =< aux(7)
it(26) =< aux(7)
it(29) =< aux(7)
s(19) =< aux(7)
it(18) =< aux(8)
it(22) =< aux(8)
it(23) =< aux(8)
it(25) =< aux(8)
it(29) =< aux(8)
s(17) =< aux(8)
it(22) =< aux(9)
it(23) =< aux(9)
it(29) =< aux(9)
s(18) =< aux(9)
it(22) =< aux(10)
it(23) =< aux(10)
it(25) =< aux(10)
it(29) =< aux(10)
s(18) =< aux(10)
it(23) =< aux(11)
s(19) =< aux(11)
it(23) =< aux(12)
it(25) =< aux(12)
it(29) =< aux(12)
s(19) =< aux(12)
it(25) =< aux(13)
it(29) =< aux(13)
s(20) =< aux(13)
it(25) =< aux(14)
it(29) =< aux(14)
s(20) =< aux(14)
aux(1) =< aux(15)
it(17) =< aux(15)
it(18) =< aux(15)
it(20) =< aux(15)
it(22) =< aux(15)
it(23) =< aux(15)
it(25) =< aux(15)
it(26) =< aux(15)
it(29) =< aux(15)
aux(1) =< aux(16)
it(17) =< aux(16)
it(18) =< aux(16)
it(20) =< aux(16)
it(22) =< aux(16)
it(23) =< aux(16)
it(25) =< aux(16)
it(26) =< aux(16)
it(29) =< aux(16)
s(24) =< aux(1)*2
s(23) =< aux(1)

#### Simplifying cost structure of chain [[17,18,19,20,21,22,23,24,25,26,27,28,29,30],33,35] 
 * Joined equivalent variables [aux(26),aux(15),aux(16)] into aux(26)
 * Joined equivalent variables [aux(26),aux(1)] into aux(26)
 * Joined equivalent variables [it(17),s(23)] into it(17)

#### Simplifying cost structure of CE 36 

#### Simplifying cost structure of chain [32,35] 

#### Found solution for phase  [17,18,19,20,21,22,23,24,25,26,27,28,29,30] in the cache 

#### Cost of phase [17,18,19,20,21,22,23,24,25,26,27,28,29,30]:eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) -> [eval_sendMTFValues_bb1_in(V_nGroups',V_alphaSize',V_gs_0',V_nPart_0',B')] 
2*it(17)+2*it(18)+4*it(20)+2*it(22)+2*it(23)+4*it(25)+4*it(26)+4*it(29)+2*s(17)+2*s(18)+1*s(19)+1*s(20)+1*s(23)+1*s(24)+0
  Such that:aux(3) =< V_alphaSize-V_gs_0
aux(4) =< V_alphaSize-V_gs_0+V_nPart_0
aux(5) =< V_alphaSize-V_gs_0+V_nPart_0-V_alphaSize'+V_gs_0'-V_nPart_0'
aux(6) =< V_alphaSize-V_gs_0+2*V_nPart_0
aux(7) =< V_alphaSize-V_gs_0+2*V_nPart_0-V_alphaSize'+V_gs_0'-2*V_nPart_0'
aux(8) =< V_alphaSize-V_gs_0-V_alphaSize'+V_gs_0'
aux(9) =< 2*V_alphaSize-2*V_gs_0
aux(10) =< 2*V_alphaSize-2*V_gs_0-2*V_alphaSize'+2*V_gs_0'
aux(11) =< 3*V_alphaSize-3*V_gs_0
aux(12) =< 3*V_alphaSize-3*V_gs_0-3*V_alphaSize'+3*V_gs_0'
aux(13) =< 3/2*V_alphaSize-3/2*V_gs_0
aux(14) =< 3/2*V_alphaSize-3/2*V_gs_0-3/2*V_alphaSize'+3/2*V_gs_0'
aux(15) =< V_nPart_0
aux(16) =< V_nPart_0-V_nPart_0'
it(18) =< aux(3)
it(22) =< aux(3)
it(23) =< aux(3)
it(25) =< aux(3)
it(29) =< aux(3)
s(17) =< aux(3)
it(22) =< aux(4)
it(23) =< aux(4)
it(25) =< aux(4)
it(29) =< aux(4)
s(18) =< aux(4)
s(20) =< aux(4)
it(20) =< aux(5)
it(22) =< aux(5)
it(23) =< aux(5)
it(25) =< aux(5)
it(26) =< aux(5)
it(29) =< aux(5)
s(18) =< aux(5)
s(20) =< aux(5)
it(23) =< aux(6)
s(19) =< aux(6)
it(23) =< aux(7)
it(25) =< aux(7)
it(26) =< aux(7)
it(29) =< aux(7)
s(19) =< aux(7)
it(18) =< aux(8)
it(22) =< aux(8)
it(23) =< aux(8)
it(25) =< aux(8)
it(29) =< aux(8)
s(17) =< aux(8)
it(22) =< aux(9)
it(23) =< aux(9)
it(29) =< aux(9)
s(18) =< aux(9)
it(22) =< aux(10)
it(23) =< aux(10)
it(25) =< aux(10)
it(29) =< aux(10)
s(18) =< aux(10)
it(23) =< aux(11)
s(19) =< aux(11)
it(23) =< aux(12)
it(25) =< aux(12)
it(29) =< aux(12)
s(19) =< aux(12)
it(25) =< aux(13)
it(29) =< aux(13)
s(20) =< aux(13)
it(25) =< aux(14)
it(29) =< aux(14)
s(20) =< aux(14)
aux(1) =< aux(15)
it(17) =< aux(15)
it(18) =< aux(15)
it(20) =< aux(15)
it(22) =< aux(15)
it(23) =< aux(15)
it(25) =< aux(15)
it(26) =< aux(15)
it(29) =< aux(15)
aux(1) =< aux(16)
it(17) =< aux(16)
it(18) =< aux(16)
it(20) =< aux(16)
it(22) =< aux(16)
it(23) =< aux(16)
it(25) =< aux(16)
it(26) =< aux(16)
it(29) =< aux(16)
s(24) =< aux(1)*2
s(23) =< aux(1)

#### Simplifying cost structure of chain [[17,18,19,20,21,22,23,24,25,26,27,28,29,30],32,35] 
 * Joined equivalent variables [aux(27),aux(15),aux(16)] into aux(27)
 * Joined equivalent variables [aux(27),aux(1)] into aux(27)
 * Joined equivalent variables [it(17),s(23)] into it(17)
 * Renamed intermediate variables: 
[(eq(35,1),it(16))>>s(26)]

#### Simplifying cost structure of CE 35 

#### Simplifying cost structure of chain [31,35] 

#### Found solution for phase  [17,18,19,20,21,22,23,24,25,26,27,28,29,30] in the cache 

#### Cost of phase [17,18,19,20,21,22,23,24,25,26,27,28,29,30]:eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) -> [eval_sendMTFValues_bb1_in(V_nGroups',V_alphaSize',V_gs_0',V_nPart_0',B')] 
2*it(17)+2*it(18)+4*it(20)+2*it(22)+2*it(23)+4*it(25)+4*it(26)+4*it(29)+2*s(17)+2*s(18)+1*s(19)+1*s(20)+1*s(23)+1*s(24)+0
  Such that:aux(3) =< V_alphaSize-V_gs_0
aux(4) =< V_alphaSize-V_gs_0+V_nPart_0
aux(5) =< V_alphaSize-V_gs_0+V_nPart_0-V_alphaSize'+V_gs_0'-V_nPart_0'
aux(6) =< V_alphaSize-V_gs_0+2*V_nPart_0
aux(7) =< V_alphaSize-V_gs_0+2*V_nPart_0-V_alphaSize'+V_gs_0'-2*V_nPart_0'
aux(8) =< V_alphaSize-V_gs_0-V_alphaSize'+V_gs_0'
aux(9) =< 2*V_alphaSize-2*V_gs_0
aux(10) =< 2*V_alphaSize-2*V_gs_0-2*V_alphaSize'+2*V_gs_0'
aux(11) =< 3*V_alphaSize-3*V_gs_0
aux(12) =< 3*V_alphaSize-3*V_gs_0-3*V_alphaSize'+3*V_gs_0'
aux(13) =< 3/2*V_alphaSize-3/2*V_gs_0
aux(14) =< 3/2*V_alphaSize-3/2*V_gs_0-3/2*V_alphaSize'+3/2*V_gs_0'
aux(15) =< V_nPart_0
aux(16) =< V_nPart_0-V_nPart_0'
it(18) =< aux(3)
it(22) =< aux(3)
it(23) =< aux(3)
it(25) =< aux(3)
it(29) =< aux(3)
s(17) =< aux(3)
it(22) =< aux(4)
it(23) =< aux(4)
it(25) =< aux(4)
it(29) =< aux(4)
s(18) =< aux(4)
s(20) =< aux(4)
it(20) =< aux(5)
it(22) =< aux(5)
it(23) =< aux(5)
it(25) =< aux(5)
it(26) =< aux(5)
it(29) =< aux(5)
s(18) =< aux(5)
s(20) =< aux(5)
it(23) =< aux(6)
s(19) =< aux(6)
it(23) =< aux(7)
it(25) =< aux(7)
it(26) =< aux(7)
it(29) =< aux(7)
s(19) =< aux(7)
it(18) =< aux(8)
it(22) =< aux(8)
it(23) =< aux(8)
it(25) =< aux(8)
it(29) =< aux(8)
s(17) =< aux(8)
it(22) =< aux(9)
it(23) =< aux(9)
it(29) =< aux(9)
s(18) =< aux(9)
it(22) =< aux(10)
it(23) =< aux(10)
it(25) =< aux(10)
it(29) =< aux(10)
s(18) =< aux(10)
it(23) =< aux(11)
s(19) =< aux(11)
it(23) =< aux(12)
it(25) =< aux(12)
it(29) =< aux(12)
s(19) =< aux(12)
it(25) =< aux(13)
it(29) =< aux(13)
s(20) =< aux(13)
it(25) =< aux(14)
it(29) =< aux(14)
s(20) =< aux(14)
aux(1) =< aux(15)
it(17) =< aux(15)
it(18) =< aux(15)
it(20) =< aux(15)
it(22) =< aux(15)
it(23) =< aux(15)
it(25) =< aux(15)
it(26) =< aux(15)
it(29) =< aux(15)
aux(1) =< aux(16)
it(17) =< aux(16)
it(18) =< aux(16)
it(20) =< aux(16)
it(22) =< aux(16)
it(23) =< aux(16)
it(25) =< aux(16)
it(26) =< aux(16)
it(29) =< aux(16)
s(24) =< aux(1)*2
s(23) =< aux(1)

#### Simplifying cost structure of chain [[17,18,19,20,21,22,23,24,25,26,27,28,29,30],31,35] 
 * Joined equivalent variables [aux(28),aux(3),aux(8)] into aux(28)
 * Joined equivalent variables [aux(29),aux(4),aux(5)] into aux(29)
 * Joined equivalent variables [aux(30),aux(6),aux(7)] into aux(30)
 * Joined equivalent variables [aux(31),aux(9),aux(10)] into aux(31)
 * Joined equivalent variables [aux(32),aux(11),aux(12)] into aux(32)
 * Joined equivalent variables [aux(33),aux(13)] into aux(33)
 * Joined equivalent variables [aux(34),aux(15),aux(16)] into aux(34)
 * Joined equivalent variables [aux(34),aux(1)] into aux(34)
 * Joined equivalent variables [it(25),it(29)] into it(25)
 * Joined equivalent variables [it(17),s(23)] into it(17)
 * Renamed intermediate variables: 
[(ch([31,35]),s(26))>>s(27)]
 * Renamed intermediate variables: 
[(ch([34,35]),s(25))>>s(28)]
 * Renamed intermediate variables: 
[(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],31,35]),aux(28))>>s(29),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],31,35]),aux(29))>>s(30),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],31,35]),aux(30))>>s(31),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],31,35]),aux(31))>>s(32),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],31,35]),aux(32))>>s(33),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],31,35]),aux(33))>>s(34),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],31,35]),aux(34))>>s(35),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],31,35]),aux(14))>>s(36),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],31,35]),s(26))>>s(37),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],31,35]),it(18))>>s(38),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],31,35]),it(22))>>s(39),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],31,35]),it(23))>>s(40),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],31,35]),it(25))>>s(41),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],31,35]),s(17))>>s(42),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],31,35]),s(18))>>s(43),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],31,35]),s(20))>>s(44),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],31,35]),it(20))>>s(45),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],31,35]),it(26))>>s(46),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],31,35]),s(19))>>s(47),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],31,35]),it(17))>>s(48),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],31,35]),s(24))>>s(49)]
 * Renamed intermediate variables: 
[(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],34,35]),aux(8))>>s(50),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],34,35]),aux(10))>>s(51),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],34,35]),aux(18))>>s(52),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],34,35]),aux(19))>>s(53),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],34,35]),aux(20))>>s(54),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],34,35]),aux(21))>>s(55),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],34,35]),aux(22))>>s(56),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],34,35]),aux(23))>>s(57),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],34,35]),aux(24))>>s(58),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],34,35]),aux(25))>>s(59),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],34,35]),aux(12))>>s(60),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],34,35]),aux(14))>>s(61),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],34,35]),s(25))>>s(62),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],34,35]),it(18))>>s(63),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],34,35]),it(22))>>s(64),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],34,35]),it(23))>>s(65),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],34,35]),it(25))>>s(66),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],34,35]),it(29))>>s(67),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],34,35]),s(17))>>s(68),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],34,35]),s(18))>>s(69),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],34,35]),s(20))>>s(70),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],34,35]),it(20))>>s(71),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],34,35]),it(26))>>s(72),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],34,35]),s(19))>>s(73),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],34,35]),it(17))>>s(74),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],34,35]),s(24))>>s(75)]
 * Joined equivalent variables [aux(35),s(29),s(52)] into aux(35)
 * Joined equivalent variables [aux(36),s(30),s(53)] into aux(36)
 * Joined equivalent variables [aux(37),s(31),s(54)] into aux(37)
 * Joined equivalent variables [aux(38),s(32),s(55)] into aux(38)
 * Joined equivalent variables [aux(39),s(33),s(56)] into aux(39)
 * Joined equivalent variables [aux(40),s(34),s(58)] into aux(40)
 * Joined equivalent variables [aux(41),s(35),s(59)] into aux(41)
 * Joined equivalent variables [s(49),s(75)] into s(49)
 * Joined equivalent variables [s(46),s(72)] into s(46)
 * Joined equivalent variables [s(45),s(71)] into s(45)
 * Joined equivalent variables [s(48),s(74)] into s(48)
 * Renamed intermediate variables: 
[(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],32,35]),aux(3))>>s(76),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],32,35]),aux(4))>>s(77),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],32,35]),aux(6))>>s(78),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],32,35]),aux(9))>>s(79),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],32,35]),aux(11))>>s(80),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],32,35]),aux(13))>>s(81),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],32,35]),aux(27))>>s(82),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],32,35]),it(18))>>s(83),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],32,35]),it(22))>>s(84),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],32,35]),it(23))>>s(85),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],32,35]),it(25))>>s(86),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],32,35]),it(29))>>s(87),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],32,35]),s(17))>>s(88),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],32,35]),s(18))>>s(89),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],32,35]),s(20))>>s(90),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],32,35]),s(19))>>s(91),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],32,35]),it(17))>>s(92),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],32,35]),it(20))>>s(93),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],32,35]),it(26))>>s(94),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],32,35]),s(24))>>s(95)]
 * Renamed intermediate variables: 
[(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],33,35]),aux(3))>>s(96),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],33,35]),aux(4))>>s(97),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],33,35]),aux(6))>>s(98),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],33,35]),aux(9))>>s(99),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],33,35]),aux(11))>>s(100),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],33,35]),aux(13))>>s(101),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],33,35]),aux(26))>>s(102),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],33,35]),it(18))>>s(103),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],33,35]),it(22))>>s(104),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],33,35]),it(23))>>s(105),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],33,35]),it(25))>>s(106),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],33,35]),it(29))>>s(107),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],33,35]),s(17))>>s(108),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],33,35]),s(18))>>s(109),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],33,35]),s(20))>>s(110),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],33,35]),s(19))>>s(111),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],33,35]),it(17))>>s(112),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],33,35]),it(20))>>s(113),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],33,35]),it(26))>>s(114),(ch([[17,18,19,20,21,22,23,24,25,26,27,28,29,30],33,35]),s(24))>>s(115)]
 * Joined equivalent variables [aux(42),s(76),s(96)] into aux(42)
 * Joined equivalent variables [aux(43),s(77),s(97)] into aux(43)
 * Joined equivalent variables [aux(44),s(78),s(98)] into aux(44)
 * Joined equivalent variables [aux(45),s(79),s(99)] into aux(45)
 * Joined equivalent variables [aux(46),s(80),s(100)] into aux(46)
 * Joined equivalent variables [aux(47),s(81),s(101)] into aux(47)
 * Joined equivalent variables [aux(48),s(82),s(102)] into aux(48)
 * Joined equivalent variables [s(92),s(93),s(94)] into s(92)
 * Joined equivalent variables [s(112),s(113),s(114)] into s(112)
 * Joined equivalent variables [s(95),s(115)] into s(95)
 * Joined equivalent variables [s(88),s(108)] into s(88)
 * Joined equivalent variables [s(85),s(105)] into s(85)
 * Joined equivalent variables [s(87),s(107)] into s(87)
 * Joined equivalent variables [s(84),s(104)] into s(84)
 * Joined equivalent variables [s(86),s(106)] into s(86)
 * Joined equivalent variables [s(83),s(103)] into s(83)
 * Joined equivalent variables [s(89),s(109)] into s(89)
 * Joined equivalent variables [s(90),s(110)] into s(90)
 * Joined equivalent variables [s(91),s(111)] into s(91)
 * Joined equivalent variables [s(92),s(112)] into s(92)

#### Cost of chains of eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B):
* Chain [[17,18,19,20,21,22,23,24,25,26,27,28,29,30],35]: 3*it(17)+2*it(18)+4*it(20)+2*it(22)+2*it(23)+4*it(25)+4*it(26)+4*it(29)+2*s(17)+2*s(18)+1*s(19)+1*s(20)+1*s(24)+0
  Such that:aux(3) =< V_alphaSize-V_gs_0
aux(4) =< V_alphaSize-V_gs_0+V_nPart_0
aux(6) =< V_alphaSize-V_gs_0+2*V_nPart_0
aux(9) =< 2*V_alphaSize-2*V_gs_0
aux(11) =< 3*V_alphaSize-3*V_gs_0
aux(13) =< 3/2*V_alphaSize-3/2*V_gs_0
aux(17) =< V_nPart_0
it(18) =< aux(3)
it(22) =< aux(3)
it(23) =< aux(3)
it(25) =< aux(3)
it(29) =< aux(3)
s(17) =< aux(3)
it(22) =< aux(4)
it(23) =< aux(4)
it(25) =< aux(4)
it(29) =< aux(4)
s(18) =< aux(4)
s(20) =< aux(4)
it(23) =< aux(6)
s(19) =< aux(6)
it(22) =< aux(9)
it(23) =< aux(9)
it(29) =< aux(9)
s(18) =< aux(9)
it(23) =< aux(11)
s(19) =< aux(11)
it(25) =< aux(13)
it(29) =< aux(13)
s(20) =< aux(13)
it(17) =< aux(17)
it(18) =< aux(17)
it(20) =< aux(17)
it(22) =< aux(17)
it(23) =< aux(17)
it(25) =< aux(17)
it(26) =< aux(17)
it(29) =< aux(17)
s(24) =< aux(17)*2

  with precondition: [B=3,V_gs_0>=0,V_nPart_0>=1,V_nGroups>=V_nPart_0] 

* Chain [[17,18,19,20,21,22,23,24,25,26,27,28,29,30],34,35]: 3*it(17)+2*it(18)+4*it(20)+2*it(22)+2*it(23)+4*it(25)+4*it(26)+4*it(29)+2*s(17)+2*s(18)+1*s(19)+1*s(20)+1*s(24)+1*s(25)+2
  Such that:aux(8) =< V_alphaSize-V_gs_0+1
aux(10) =< 2*V_alphaSize-2*V_gs_0+2
aux(18) =< V_alphaSize-V_gs_0
aux(19) =< V_alphaSize-V_gs_0+V_nPart_0
aux(20) =< V_alphaSize-V_gs_0+2*V_nPart_0
aux(21) =< 2*V_alphaSize-2*V_gs_0
aux(22) =< 3*V_alphaSize-3*V_gs_0
aux(23) =< 3*V_alphaSize-3*V_gs_0+3
aux(24) =< 3/2*V_alphaSize-3/2*V_gs_0
aux(25) =< V_nPart_0
aux(8) =< aux(18)
aux(10) =< aux(21)
aux(12) =< aux(22)
aux(12) =< aux(23)
aux(14) =< aux(23)
s(25) =< aux(23)
aux(14) =< aux(24)
it(18) =< aux(18)
it(22) =< aux(18)
it(23) =< aux(18)
it(25) =< aux(18)
it(29) =< aux(18)
s(17) =< aux(18)
it(22) =< aux(19)
it(23) =< aux(19)
it(25) =< aux(19)
it(29) =< aux(19)
s(18) =< aux(19)
s(20) =< aux(19)
it(20) =< aux(19)
it(26) =< aux(19)
it(23) =< aux(20)
s(19) =< aux(20)
it(25) =< aux(20)
it(26) =< aux(20)
it(29) =< aux(20)
it(18) =< aux(8)
it(22) =< aux(8)
it(23) =< aux(8)
it(25) =< aux(8)
it(29) =< aux(8)
s(17) =< aux(8)
it(22) =< aux(21)
it(23) =< aux(21)
it(29) =< aux(21)
s(18) =< aux(21)
it(22) =< aux(10)
it(23) =< aux(10)
it(25) =< aux(10)
it(29) =< aux(10)
s(18) =< aux(10)
it(23) =< aux(22)
s(19) =< aux(22)
it(23) =< aux(12)
it(25) =< aux(12)
it(29) =< aux(12)
s(19) =< aux(12)
it(25) =< aux(24)
it(29) =< aux(24)
s(20) =< aux(24)
it(25) =< aux(14)
it(29) =< aux(14)
s(20) =< aux(14)
it(17) =< aux(25)
it(18) =< aux(25)
it(20) =< aux(25)
it(22) =< aux(25)
it(23) =< aux(25)
it(25) =< aux(25)
it(26) =< aux(25)
it(29) =< aux(25)
s(24) =< aux(25)*2

  with precondition: [B=3,V_gs_0>=0,V_nPart_0>=2,V_alphaSize>=V_gs_0+1,V_nGroups>=V_nPart_0] 

* Chain [[17,18,19,20,21,22,23,24,25,26,27,28,29,30],33,35]: 3*it(17)+2*it(18)+4*it(20)+2*it(22)+2*it(23)+4*it(25)+4*it(26)+4*it(29)+2*s(17)+2*s(18)+1*s(19)+1*s(20)+1*s(24)+2
  Such that:aux(3) =< V_alphaSize-V_gs_0
aux(4) =< V_alphaSize-V_gs_0+V_nPart_0
aux(6) =< V_alphaSize-V_gs_0+2*V_nPart_0
aux(9) =< 2*V_alphaSize-2*V_gs_0
aux(11) =< 3*V_alphaSize-3*V_gs_0
aux(13) =< 3/2*V_alphaSize-3/2*V_gs_0
aux(26) =< V_nPart_0
it(18) =< aux(3)
it(22) =< aux(3)
it(23) =< aux(3)
it(25) =< aux(3)
it(29) =< aux(3)
s(17) =< aux(3)
it(22) =< aux(4)
it(23) =< aux(4)
it(25) =< aux(4)
it(29) =< aux(4)
s(18) =< aux(4)
s(20) =< aux(4)
it(23) =< aux(6)
s(19) =< aux(6)
it(22) =< aux(9)
it(23) =< aux(9)
it(29) =< aux(9)
s(18) =< aux(9)
it(23) =< aux(11)
s(19) =< aux(11)
it(25) =< aux(13)
it(29) =< aux(13)
s(20) =< aux(13)
it(17) =< aux(26)
it(18) =< aux(26)
it(20) =< aux(26)
it(22) =< aux(26)
it(23) =< aux(26)
it(25) =< aux(26)
it(26) =< aux(26)
it(29) =< aux(26)
s(24) =< aux(26)*2

  with precondition: [B=3,V_gs_0>=0,V_nPart_0>=2,V_nGroups>=V_nPart_0] 

* Chain [[17,18,19,20,21,22,23,24,25,26,27,28,29,30],32,35]: 3*it(17)+2*it(18)+4*it(20)+2*it(22)+2*it(23)+4*it(25)+4*it(26)+4*it(29)+2*s(17)+2*s(18)+1*s(19)+1*s(20)+1*s(24)+2
  Such that:aux(3) =< V_alphaSize-V_gs_0
aux(4) =< V_alphaSize-V_gs_0+V_nPart_0
aux(6) =< V_alphaSize-V_gs_0+2*V_nPart_0
aux(9) =< 2*V_alphaSize-2*V_gs_0
aux(11) =< 3*V_alphaSize-3*V_gs_0
aux(13) =< 3/2*V_alphaSize-3/2*V_gs_0
aux(27) =< V_nPart_0
it(18) =< aux(3)
it(22) =< aux(3)
it(23) =< aux(3)
it(25) =< aux(3)
it(29) =< aux(3)
s(17) =< aux(3)
it(22) =< aux(4)
it(23) =< aux(4)
it(25) =< aux(4)
it(29) =< aux(4)
s(18) =< aux(4)
s(20) =< aux(4)
it(23) =< aux(6)
s(19) =< aux(6)
it(22) =< aux(9)
it(23) =< aux(9)
it(29) =< aux(9)
s(18) =< aux(9)
it(23) =< aux(11)
s(19) =< aux(11)
it(25) =< aux(13)
it(29) =< aux(13)
s(20) =< aux(13)
it(17) =< aux(27)
it(18) =< aux(27)
it(20) =< aux(27)
it(22) =< aux(27)
it(23) =< aux(27)
it(25) =< aux(27)
it(26) =< aux(27)
it(29) =< aux(27)
s(24) =< aux(27)*2

  with precondition: [B=3,V_gs_0>=0,V_nPart_0>=2,V_nGroups>=V_nPart_0] 

* Chain [[17,18,19,20,21,22,23,24,25,26,27,28,29,30],31,35]: 3*it(17)+2*it(18)+4*it(20)+2*it(22)+2*it(23)+8*it(25)+4*it(26)+2*s(17)+2*s(18)+1*s(19)+1*s(20)+1*s(24)+1*s(26)+2
  Such that:aux(28) =< V_alphaSize-V_gs_0
aux(29) =< V_alphaSize-V_gs_0+V_nPart_0
aux(30) =< V_alphaSize-V_gs_0+2*V_nPart_0
aux(31) =< 2*V_alphaSize-2*V_gs_0
aux(32) =< 3*V_alphaSize-3*V_gs_0
aux(33) =< 3/2*V_alphaSize-3/2*V_gs_0
aux(34) =< V_nPart_0
aux(14) =< aux(32)
s(26) =< aux(32)
aux(14) =< aux(33)
it(18) =< aux(28)
it(22) =< aux(28)
it(23) =< aux(28)
it(25) =< aux(28)
s(17) =< aux(28)
it(22) =< aux(29)
it(23) =< aux(29)
it(25) =< aux(29)
s(18) =< aux(29)
s(20) =< aux(29)
it(20) =< aux(29)
it(26) =< aux(29)
it(23) =< aux(30)
s(19) =< aux(30)
it(25) =< aux(30)
it(26) =< aux(30)
it(22) =< aux(31)
it(23) =< aux(31)
it(25) =< aux(31)
s(18) =< aux(31)
it(23) =< aux(32)
s(19) =< aux(32)
it(25) =< aux(32)
it(25) =< aux(33)
s(20) =< aux(33)
it(25) =< aux(14)
s(20) =< aux(14)
it(17) =< aux(34)
it(18) =< aux(34)
it(20) =< aux(34)
it(22) =< aux(34)
it(23) =< aux(34)
it(25) =< aux(34)
it(26) =< aux(34)
s(24) =< aux(34)*2

  with precondition: [B=3,V_gs_0>=0,V_nPart_0>=2,V_alphaSize>=V_gs_0+1,V_nGroups>=V_nPart_0] 

* Chain [35]: 0
  with precondition: [B=3,0>=V_nPart_0,V_gs_0>=0,V_nGroups>=V_nPart_0] 

* Chain [34,35]: 1*s(25)+2
  Such that:s(25) =< V_alphaSize-V_gs_0+1

  with precondition: [V_nPart_0=1,B=3,V_nGroups>=1,V_gs_0>=0,V_alphaSize>=V_gs_0+1] 

* Chain [33,35]: 2
  with precondition: [V_nPart_0=1,B=3,V_nGroups>=1,V_gs_0>=0] 

* Chain [32,35]: 2
  with precondition: [V_nPart_0=1,B=3,V_nGroups>=1,V_gs_0>=0,V_gs_0>=V_alphaSize] 

* Chain [31,35]: 1*s(26)+2
  Such that:s(26) =< V_alphaSize-V_gs_0

  with precondition: [V_nPart_0=1,B=3,V_nGroups>=1,V_gs_0>=0,V_alphaSize>=V_gs_0+1] 


#### Simplifying cost structure of CE 38 

#### Simplifying cost structure of CE 39 
 * Renamed intermediate variables: 
[(eq(40,1),s(27))>>s(116),(eq(40,1),s(28))>>s(117)]

#### Simplifying cost structure of CE 40 

#### Simplifying cost structure of CE 41 
 * Renamed intermediate variables: 
[(eq(42,1),aux(3))>>s(118),(eq(42,1),aux(4))>>s(119),(eq(42,1),aux(6))>>s(120),(eq(42,1),aux(9))>>s(121),(eq(42,1),aux(11))>>s(122),(eq(42,1),aux(13))>>s(123),(eq(42,1),aux(17))>>s(124),(eq(42,1),it(18))>>s(125),(eq(42,1),it(22))>>s(126),(eq(42,1),it(23))>>s(127),(eq(42,1),it(25))>>s(128),(eq(42,1),it(29))>>s(129),(eq(42,1),s(17))>>s(130),(eq(42,1),s(18))>>s(131),(eq(42,1),s(20))>>s(132),(eq(42,1),s(19))>>s(133),(eq(42,1),it(17))>>s(134),(eq(42,1),it(20))>>s(135),(eq(42,1),it(26))>>s(136),(eq(42,1),s(24))>>s(137)]

#### Simplifying cost structure of CE 42 
 * Joined equivalent variables [s(134),s(135),s(136)] into s(134)
 * Renamed intermediate variables: 
[(eq(44,1),aux(42))>>s(138),(eq(44,1),aux(43))>>s(139),(eq(44,1),aux(44))>>s(140),(eq(44,1),aux(45))>>s(141),(eq(44,1),aux(46))>>s(142),(eq(44,1),aux(47))>>s(143),(eq(44,1),aux(48))>>s(144),(eq(44,1),s(83))>>s(145),(eq(44,1),s(84))>>s(146),(eq(44,1),s(85))>>s(147),(eq(44,1),s(86))>>s(148),(eq(44,1),s(87))>>s(149),(eq(44,1),s(88))>>s(150),(eq(44,1),s(89))>>s(151),(eq(44,1),s(90))>>s(152),(eq(44,1),s(91))>>s(153),(eq(44,1),s(92))>>s(154),(eq(44,1),s(95))>>s(155)]

#### Simplifying cost structure of CE 44 
 * Renamed intermediate variables: 
[(eq(43,1),s(50))>>s(156),(eq(43,1),s(51))>>s(157),(eq(43,1),s(57))>>s(158),(eq(43,1),aux(35))>>s(159),(eq(43,1),aux(36))>>s(160),(eq(43,1),aux(37))>>s(161),(eq(43,1),aux(38))>>s(162),(eq(43,1),aux(39))>>s(163),(eq(43,1),aux(40))>>s(164),(eq(43,1),aux(41))>>s(165),(eq(43,1),s(36))>>s(166),(eq(43,1),s(37))>>s(167),(eq(43,1),s(38))>>s(168),(eq(43,1),s(39))>>s(169),(eq(43,1),s(40))>>s(170),(eq(43,1),s(41))>>s(171),(eq(43,1),s(42))>>s(172),(eq(43,1),s(43))>>s(173),(eq(43,1),s(44))>>s(174),(eq(43,1),s(45))>>s(175),(eq(43,1),s(46))>>s(176),(eq(43,1),s(47))>>s(177),(eq(43,1),s(48))>>s(178),(eq(43,1),s(49))>>s(179),(eq(43,1),s(60))>>s(180),(eq(43,1),s(61))>>s(181),(eq(43,1),s(62))>>s(182),(eq(43,1),s(63))>>s(183),(eq(43,1),s(64))>>s(184),(eq(43,1),s(65))>>s(185),(eq(43,1),s(66))>>s(186),(eq(43,1),s(67))>>s(187),(eq(43,1),s(68))>>s(188),(eq(43,1),s(69))>>s(189),(eq(43,1),s(70))>>s(190),(eq(43,1),s(73))>>s(191)]

#### Simplifying cost structure of CE 43 

#### Cost of chains of eval_sendMTFValues_6(V_nGroups,V_alphaSize,B):
* Chain [42]: 3
  with precondition: [V_nGroups=1] 

* Chain [41]: 3
  with precondition: [V_nGroups=1,0>=V_alphaSize] 

* Chain [40]: 1*s(116)+1*s(117)+3
  Such that:s(116) =< V_alphaSize
s(117) =< V_alphaSize+1

  with precondition: [V_nGroups=1,V_alphaSize>=1] 

* Chain [39]: 1
  with precondition: [0>=V_nGroups] 

* Chain [38]: 2*s(125)+2*s(126)+2*s(127)+4*s(128)+4*s(129)+2*s(130)+2*s(131)+1*s(132)+1*s(133)+11*s(134)+1*s(137)+1
  Such that:s(124) =< V_nGroups
s(119) =< V_nGroups+V_alphaSize
s(120) =< 2*V_nGroups+V_alphaSize
s(118) =< V_alphaSize
s(121) =< 2*V_alphaSize
s(122) =< 3*V_alphaSize
s(123) =< 3/2*V_alphaSize
s(125) =< s(118)
s(126) =< s(118)
s(127) =< s(118)
s(128) =< s(118)
s(129) =< s(118)
s(130) =< s(118)
s(126) =< s(119)
s(127) =< s(119)
s(128) =< s(119)
s(129) =< s(119)
s(131) =< s(119)
s(132) =< s(119)
s(127) =< s(120)
s(133) =< s(120)
s(126) =< s(121)
s(127) =< s(121)
s(129) =< s(121)
s(131) =< s(121)
s(127) =< s(122)
s(133) =< s(122)
s(128) =< s(123)
s(129) =< s(123)
s(132) =< s(123)
s(134) =< s(124)
s(125) =< s(124)
s(126) =< s(124)
s(127) =< s(124)
s(128) =< s(124)
s(129) =< s(124)
s(137) =< s(124)*2

  with precondition: [V_nGroups>=1] 

* Chain [37]: 4*s(145)+4*s(146)+4*s(147)+8*s(148)+8*s(149)+4*s(150)+4*s(151)+2*s(152)+2*s(153)+22*s(154)+2*s(155)+3
  Such that:s(144) =< V_nGroups
s(139) =< V_nGroups+V_alphaSize
s(140) =< 2*V_nGroups+V_alphaSize
s(138) =< V_alphaSize
s(141) =< 2*V_alphaSize
s(142) =< 3*V_alphaSize
s(143) =< 3/2*V_alphaSize
s(145) =< s(138)
s(146) =< s(138)
s(147) =< s(138)
s(148) =< s(138)
s(149) =< s(138)
s(150) =< s(138)
s(146) =< s(139)
s(147) =< s(139)
s(148) =< s(139)
s(149) =< s(139)
s(151) =< s(139)
s(152) =< s(139)
s(147) =< s(140)
s(153) =< s(140)
s(146) =< s(141)
s(147) =< s(141)
s(149) =< s(141)
s(151) =< s(141)
s(147) =< s(142)
s(153) =< s(142)
s(148) =< s(143)
s(149) =< s(143)
s(152) =< s(143)
s(154) =< s(144)
s(145) =< s(144)
s(146) =< s(144)
s(147) =< s(144)
s(148) =< s(144)
s(149) =< s(144)
s(155) =< s(144)*2

  with precondition: [V_nGroups>=2] 

* Chain [36]: 1*s(167)+2*s(168)+2*s(169)+2*s(170)+8*s(171)+2*s(172)+2*s(173)+1*s(174)+8*s(175)+8*s(176)+1*s(177)+6*s(178)+2*s(179)+1*s(182)+2*s(183)+2*s(184)+2*s(185)+4*s(186)+4*s(187)+2*s(188)+2*s(189)+1*s(190)+1*s(191)+3
  Such that:s(165) =< V_nGroups
s(160) =< V_nGroups+V_alphaSize
s(161) =< 2*V_nGroups+V_alphaSize
s(159) =< V_alphaSize
s(156) =< V_alphaSize+1
s(162) =< 2*V_alphaSize
s(157) =< 2*V_alphaSize+2
s(163) =< 3*V_alphaSize
s(158) =< 3*V_alphaSize+3
s(164) =< 3/2*V_alphaSize
s(166) =< s(163)
s(167) =< s(163)
s(166) =< s(164)
s(168) =< s(159)
s(169) =< s(159)
s(170) =< s(159)
s(171) =< s(159)
s(172) =< s(159)
s(169) =< s(160)
s(170) =< s(160)
s(171) =< s(160)
s(173) =< s(160)
s(174) =< s(160)
s(175) =< s(160)
s(176) =< s(160)
s(170) =< s(161)
s(177) =< s(161)
s(171) =< s(161)
s(176) =< s(161)
s(169) =< s(162)
s(170) =< s(162)
s(171) =< s(162)
s(173) =< s(162)
s(170) =< s(163)
s(177) =< s(163)
s(171) =< s(163)
s(171) =< s(164)
s(174) =< s(164)
s(171) =< s(166)
s(174) =< s(166)
s(178) =< s(165)
s(168) =< s(165)
s(175) =< s(165)
s(169) =< s(165)
s(170) =< s(165)
s(171) =< s(165)
s(176) =< s(165)
s(179) =< s(165)*2
s(156) =< s(159)
s(157) =< s(162)
s(180) =< s(163)
s(180) =< s(158)
s(181) =< s(158)
s(182) =< s(158)
s(181) =< s(164)
s(183) =< s(159)
s(184) =< s(159)
s(185) =< s(159)
s(186) =< s(159)
s(187) =< s(159)
s(188) =< s(159)
s(184) =< s(160)
s(185) =< s(160)
s(186) =< s(160)
s(187) =< s(160)
s(189) =< s(160)
s(190) =< s(160)
s(185) =< s(161)
s(191) =< s(161)
s(186) =< s(161)
s(187) =< s(161)
s(183) =< s(156)
s(184) =< s(156)
s(185) =< s(156)
s(186) =< s(156)
s(187) =< s(156)
s(188) =< s(156)
s(184) =< s(162)
s(185) =< s(162)
s(187) =< s(162)
s(189) =< s(162)
s(184) =< s(157)
s(185) =< s(157)
s(186) =< s(157)
s(187) =< s(157)
s(189) =< s(157)
s(185) =< s(163)
s(191) =< s(163)
s(185) =< s(180)
s(186) =< s(180)
s(187) =< s(180)
s(191) =< s(180)
s(186) =< s(164)
s(187) =< s(164)
s(190) =< s(164)
s(186) =< s(181)
s(187) =< s(181)
s(190) =< s(181)
s(183) =< s(165)
s(184) =< s(165)
s(185) =< s(165)
s(186) =< s(165)
s(187) =< s(165)

  with precondition: [V_nGroups>=2,V_alphaSize>=1] 


#### Simplifying cost structure of CE 45 

#### Simplifying cost structure of CE 46 
 * Renamed intermediate variables: 
[(eq(47,1),s(116))>>s(192),(eq(47,1),s(117))>>s(193)]

#### Simplifying cost structure of CE 47 

#### Simplifying cost structure of CE 48 
 * Renamed intermediate variables: 
[(eq(49,1),s(124))>>s(194),(eq(49,1),s(119))>>s(195),(eq(49,1),s(120))>>s(196),(eq(49,1),s(118))>>s(197),(eq(49,1),s(121))>>s(198),(eq(49,1),s(122))>>s(199),(eq(49,1),s(123))>>s(200),(eq(49,1),s(125))>>s(201),(eq(49,1),s(126))>>s(202),(eq(49,1),s(127))>>s(203),(eq(49,1),s(128))>>s(204),(eq(49,1),s(129))>>s(205),(eq(49,1),s(130))>>s(206),(eq(49,1),s(131))>>s(207),(eq(49,1),s(132))>>s(208),(eq(49,1),s(133))>>s(209),(eq(49,1),s(134))>>s(210),(eq(49,1),s(137))>>s(211)]

#### Simplifying cost structure of CE 49 
 * Renamed intermediate variables: 
[(eq(50,1),s(144))>>s(212),(eq(50,1),s(139))>>s(213),(eq(50,1),s(140))>>s(214),(eq(50,1),s(138))>>s(215),(eq(50,1),s(141))>>s(216),(eq(50,1),s(142))>>s(217),(eq(50,1),s(143))>>s(218),(eq(50,1),s(145))>>s(219),(eq(50,1),s(146))>>s(220),(eq(50,1),s(147))>>s(221),(eq(50,1),s(148))>>s(222),(eq(50,1),s(149))>>s(223),(eq(50,1),s(150))>>s(224),(eq(50,1),s(151))>>s(225),(eq(50,1),s(152))>>s(226),(eq(50,1),s(153))>>s(227),(eq(50,1),s(154))>>s(228),(eq(50,1),s(155))>>s(229)]

#### Simplifying cost structure of CE 50 
 * Renamed intermediate variables: 
[(eq(51,1),s(165))>>s(230),(eq(51,1),s(160))>>s(231),(eq(51,1),s(161))>>s(232),(eq(51,1),s(159))>>s(233),(eq(51,1),s(156))>>s(234),(eq(51,1),s(162))>>s(235),(eq(51,1),s(157))>>s(236),(eq(51,1),s(163))>>s(237),(eq(51,1),s(158))>>s(238),(eq(51,1),s(164))>>s(239),(eq(51,1),s(166))>>s(240),(eq(51,1),s(167))>>s(241),(eq(51,1),s(168))>>s(242),(eq(51,1),s(169))>>s(243),(eq(51,1),s(170))>>s(244),(eq(51,1),s(171))>>s(245),(eq(51,1),s(172))>>s(246),(eq(51,1),s(173))>>s(247),(eq(51,1),s(174))>>s(248),(eq(51,1),s(175))>>s(249),(eq(51,1),s(176))>>s(250),(eq(51,1),s(177))>>s(251),(eq(51,1),s(178))>>s(252),(eq(51,1),s(179))>>s(253),(eq(51,1),s(180))>>s(254),(eq(51,1),s(181))>>s(255),(eq(51,1),s(182))>>s(256),(eq(51,1),s(183))>>s(257),(eq(51,1),s(184))>>s(258),(eq(51,1),s(185))>>s(259),(eq(51,1),s(186))>>s(260),(eq(51,1),s(187))>>s(261),(eq(51,1),s(188))>>s(262),(eq(51,1),s(189))>>s(263),(eq(51,1),s(190))>>s(264),(eq(51,1),s(191))>>s(265)]

#### Simplifying cost structure of CE 51 

#### Cost of chains of eval_sendMTFValues_start(V_nGroups,V_alphaSize,B):
* Chain [49]: 3
  with precondition: [V_nGroups=1] 

* Chain [48]: 3
  with precondition: [V_nGroups=1,0>=V_alphaSize] 

* Chain [47]: 1*s(192)+1*s(193)+3
  Such that:s(192) =< V_alphaSize
s(193) =< V_alphaSize+1

  with precondition: [V_nGroups=1,V_alphaSize>=1] 

* Chain [46]: 1
  with precondition: [0>=V_nGroups] 

* Chain [45]: 2*s(201)+2*s(202)+2*s(203)+4*s(204)+4*s(205)+2*s(206)+2*s(207)+1*s(208)+1*s(209)+11*s(210)+1*s(211)+1
  Such that:s(194) =< V_nGroups
s(195) =< V_nGroups+V_alphaSize
s(196) =< 2*V_nGroups+V_alphaSize
s(197) =< V_alphaSize
s(198) =< 2*V_alphaSize
s(199) =< 3*V_alphaSize
s(200) =< 3/2*V_alphaSize
s(201) =< s(197)
s(202) =< s(197)
s(203) =< s(197)
s(204) =< s(197)
s(205) =< s(197)
s(206) =< s(197)
s(202) =< s(195)
s(203) =< s(195)
s(204) =< s(195)
s(205) =< s(195)
s(207) =< s(195)
s(208) =< s(195)
s(203) =< s(196)
s(209) =< s(196)
s(202) =< s(198)
s(203) =< s(198)
s(205) =< s(198)
s(207) =< s(198)
s(203) =< s(199)
s(209) =< s(199)
s(204) =< s(200)
s(205) =< s(200)
s(208) =< s(200)
s(210) =< s(194)
s(201) =< s(194)
s(202) =< s(194)
s(203) =< s(194)
s(204) =< s(194)
s(205) =< s(194)
s(211) =< s(194)*2

  with precondition: [V_nGroups>=1] 

* Chain [44]: 4*s(219)+4*s(220)+4*s(221)+8*s(222)+8*s(223)+4*s(224)+4*s(225)+2*s(226)+2*s(227)+22*s(228)+2*s(229)+3
  Such that:s(212) =< V_nGroups
s(213) =< V_nGroups+V_alphaSize
s(214) =< 2*V_nGroups+V_alphaSize
s(215) =< V_alphaSize
s(216) =< 2*V_alphaSize
s(217) =< 3*V_alphaSize
s(218) =< 3/2*V_alphaSize
s(219) =< s(215)
s(220) =< s(215)
s(221) =< s(215)
s(222) =< s(215)
s(223) =< s(215)
s(224) =< s(215)
s(220) =< s(213)
s(221) =< s(213)
s(222) =< s(213)
s(223) =< s(213)
s(225) =< s(213)
s(226) =< s(213)
s(221) =< s(214)
s(227) =< s(214)
s(220) =< s(216)
s(221) =< s(216)
s(223) =< s(216)
s(225) =< s(216)
s(221) =< s(217)
s(227) =< s(217)
s(222) =< s(218)
s(223) =< s(218)
s(226) =< s(218)
s(228) =< s(212)
s(219) =< s(212)
s(220) =< s(212)
s(221) =< s(212)
s(222) =< s(212)
s(223) =< s(212)
s(229) =< s(212)*2

  with precondition: [V_nGroups>=2] 

* Chain [43]: 1*s(241)+2*s(242)+2*s(243)+2*s(244)+8*s(245)+2*s(246)+2*s(247)+1*s(248)+8*s(249)+8*s(250)+1*s(251)+6*s(252)+2*s(253)+1*s(256)+2*s(257)+2*s(258)+2*s(259)+4*s(260)+4*s(261)+2*s(262)+2*s(263)+1*s(264)+1*s(265)+3
  Such that:s(230) =< V_nGroups
s(231) =< V_nGroups+V_alphaSize
s(232) =< 2*V_nGroups+V_alphaSize
s(233) =< V_alphaSize
s(234) =< V_alphaSize+1
s(235) =< 2*V_alphaSize
s(236) =< 2*V_alphaSize+2
s(237) =< 3*V_alphaSize
s(238) =< 3*V_alphaSize+3
s(239) =< 3/2*V_alphaSize
s(240) =< s(237)
s(241) =< s(237)
s(240) =< s(239)
s(242) =< s(233)
s(243) =< s(233)
s(244) =< s(233)
s(245) =< s(233)
s(246) =< s(233)
s(243) =< s(231)
s(244) =< s(231)
s(245) =< s(231)
s(247) =< s(231)
s(248) =< s(231)
s(249) =< s(231)
s(250) =< s(231)
s(244) =< s(232)
s(251) =< s(232)
s(245) =< s(232)
s(250) =< s(232)
s(243) =< s(235)
s(244) =< s(235)
s(245) =< s(235)
s(247) =< s(235)
s(244) =< s(237)
s(251) =< s(237)
s(245) =< s(237)
s(245) =< s(239)
s(248) =< s(239)
s(245) =< s(240)
s(248) =< s(240)
s(252) =< s(230)
s(242) =< s(230)
s(249) =< s(230)
s(243) =< s(230)
s(244) =< s(230)
s(245) =< s(230)
s(250) =< s(230)
s(253) =< s(230)*2
s(234) =< s(233)
s(236) =< s(235)
s(254) =< s(237)
s(254) =< s(238)
s(255) =< s(238)
s(256) =< s(238)
s(255) =< s(239)
s(257) =< s(233)
s(258) =< s(233)
s(259) =< s(233)
s(260) =< s(233)
s(261) =< s(233)
s(262) =< s(233)
s(258) =< s(231)
s(259) =< s(231)
s(260) =< s(231)
s(261) =< s(231)
s(263) =< s(231)
s(264) =< s(231)
s(259) =< s(232)
s(265) =< s(232)
s(260) =< s(232)
s(261) =< s(232)
s(257) =< s(234)
s(258) =< s(234)
s(259) =< s(234)
s(260) =< s(234)
s(261) =< s(234)
s(262) =< s(234)
s(258) =< s(235)
s(259) =< s(235)
s(261) =< s(235)
s(263) =< s(235)
s(258) =< s(236)
s(259) =< s(236)
s(260) =< s(236)
s(261) =< s(236)
s(263) =< s(236)
s(259) =< s(237)
s(265) =< s(237)
s(259) =< s(254)
s(260) =< s(254)
s(261) =< s(254)
s(265) =< s(254)
s(260) =< s(239)
s(261) =< s(239)
s(264) =< s(239)
s(260) =< s(255)
s(261) =< s(255)
s(264) =< s(255)
s(257) =< s(230)
s(258) =< s(230)
s(259) =< s(230)
s(260) =< s(230)
s(261) =< s(230)

  with precondition: [V_nGroups>=2,V_alphaSize>=1] 


Closed-form bounds of eval_sendMTFValues_start(V_nGroups,V_alphaSize,B): 
-------------------------------------
* Chain [49] with precondition: [V_nGroups=1] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [48] with precondition: [V_nGroups=1,0>=V_alphaSize] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [47] with precondition: [V_nGroups=1,V_alphaSize>=1] 
    - Upper bound: 2*V_alphaSize+4 
    - Complexity: n 
* Chain [46] with precondition: [0>=V_nGroups] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [45] with precondition: [V_nGroups>=1] 
    - Upper bound: 13*V_nGroups+1+nat(V_alphaSize)*16+nat(V_nGroups+V_alphaSize)*3+nat(2*V_nGroups+V_alphaSize) 
    - Complexity: n 
* Chain [44] with precondition: [V_nGroups>=2] 
    - Upper bound: 26*V_nGroups+3+nat(V_alphaSize)*32+nat(V_nGroups+V_alphaSize)*6+nat(2*V_nGroups+V_alphaSize)*2 
    - Complexity: n 
* Chain [43] with precondition: [V_nGroups>=2,V_alphaSize>=1] 
    - Upper bound: 36*V_nGroups+62*V_alphaSize+6 
    - Complexity: n 

### Maximum cost of eval_sendMTFValues_start(V_nGroups,V_alphaSize,B): max([2,nat(V_alphaSize)+max([nat(V_alphaSize+1)+2,nat(V_alphaSize)*15+nat(V_nGroups)*10+nat(V_nGroups+V_alphaSize)*3+nat(2*V_nGroups+V_alphaSize)+max([nat(V_nGroups)*13+2+nat(V_alphaSize)*16+nat(V_nGroups+V_alphaSize)*3+nat(2*V_nGroups+V_alphaSize)+nat(V_nGroups)*3,nat(V_alphaSize)*16+2+nat(3*V_alphaSize)+nat(V_nGroups+V_alphaSize)*19+nat(2*V_nGroups+V_alphaSize)+nat(3*V_alphaSize+3)])])])+1 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 159 ms.
* Invariants computed in 215 ms.
   - Backward Invariants 128 ms.
   - Transitive Invariants 28 ms.
* Refinement performed in 276 ms.
* Termination proved in 61 ms.
* Upper bounds computed in 625 ms.
   - Equation cost structures 118 ms.
   - Phase cost structures 305 ms.
   - Chain cost structures 124 ms.
   - Solving cost expressions 16 ms.
* Total analysis performed in 1426 ms.


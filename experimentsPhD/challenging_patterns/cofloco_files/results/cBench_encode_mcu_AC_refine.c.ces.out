Warning: Ignored call to eval_encode_mcu_AC_refine_stop/1 in equation eval_encode_mcu_AC_refine_bb9_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_encode_mcu_AC_refine_bb1_in/7,eval_encode_mcu_AC_refine_bb2_in/7]
1. recursive  : [eval_encode_mcu_AC_refine_12/12,eval_encode_mcu_AC_refine_13/13,eval_encode_mcu_AC_refine_bb6_in/12,eval_encode_mcu_AC_refine_bb7_in/12,eval_encode_mcu_AC_refine_bb8_in/13]
2. recursive  : [eval_encode_mcu_AC_refine_8/4,eval_encode_mcu_AC_refine_9/5,eval_encode_mcu_AC_refine__critedge_in/7,eval_encode_mcu_AC_refine_bb3_in/4,eval_encode_mcu_AC_refine_bb4_in/4,eval_encode_mcu_AC_refine_bb5_in/5,loop_cont_eval_encode_mcu_AC_refine_bb6_in/8]
3. non_recursive  : [eval_encode_mcu_AC_refine_bb9_in/1]
4. non_recursive  : [loop_cont_eval_encode_mcu_AC_refine_bb3_in/2]
5. non_recursive  : [loop_cont_eval_encode_mcu_AC_refine_bb1_in/5]
6. non_recursive  : [eval_encode_mcu_AC_refine_5/3]
7. non_recursive  : [eval_encode_mcu_AC_refine_4/3]
8. non_recursive  : [eval_encode_mcu_AC_refine_3/3]
9. non_recursive  : [eval_encode_mcu_AC_refine_2/3]
10. non_recursive  : [eval_encode_mcu_AC_refine_1/3]
11. non_recursive  : [eval_encode_mcu_AC_refine_0/3]
12. non_recursive  : [eval_encode_mcu_AC_refine_bb0_in/3]
13. non_recursive  : [eval_encode_mcu_AC_refine_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_encode_mcu_AC_refine_bb1_in/7
1. SCC is partially evaluated into eval_encode_mcu_AC_refine_bb6_in/12
2. SCC is partially evaluated into eval_encode_mcu_AC_refine_bb3_in/4
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into loop_cont_eval_encode_mcu_AC_refine_bb1_in/5
6. SCC is partially evaluated into eval_encode_mcu_AC_refine_5/3
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is partially evaluated into eval_encode_mcu_AC_refine_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_encode_mcu_AC_refine_bb1_in/7 
* CE 4 is refined into CE [12] 
* CE 3 is refined into CE [13] 


#### Refined cost equations eval_encode_mcu_AC_refine_bb1_in/7 
* CE 12: eval_encode_mcu_AC_refine_bb1_in(A,B,C,D,B,A,E) = 0
     [C>=B+1,C>=A,E=0,D=4] 
* CE 13: eval_encode_mcu_AC_refine_bb1_in(V_cinfo_Ss,V_cinfo_Se,V_k_0,B,C,D,E) = 1+ eval_encode_mcu_AC_refine_bb1_in(V_cinfo_Ss,V_cinfo_Se,F,B,C,D,E)
     [V_cinfo_Se>=V_k_0,V_k_0>=V_cinfo_Ss,V_k_0+1=F] 

### Cost equations --> "Loop" of eval_encode_mcu_AC_refine_bb1_in/7 
* CEs [13] --> Loop 12 
* CEs [12] --> Loop 13 

#### Loops of eval_encode_mcu_AC_refine_bb1_in/7 
* Loop 12: eval_encode_mcu_AC_refine_bb1_in(V_cinfo_Ss,V_cinfo_Se,V_k_0,B,C,D,E)->  eval_encode_mcu_AC_refine_bb1_in(V_cinfo_Ss,V_cinfo_Se,V_k_0',B,C,D,E)
                  [V_cinfo_Se>=V_k_0,V_k_0>=V_cinfo_Ss,V_k_0+1=V_k_0'] 
* Loop 13: eval_encode_mcu_AC_refine_bb1_in(A,B,C,D,B,A,E) [C>=B+1,C>=A,E=0,D=4] 

### Ranking functions of CR eval_encode_mcu_AC_refine_bb1_in(V_cinfo_Ss,V_cinfo_Se,V_k_0,B,C,D,E) 
* RF of phase [12]: [V_cinfo_Se-V_k_0+1]

#### Partial ranking functions of CR eval_encode_mcu_AC_refine_bb1_in(V_cinfo_Ss,V_cinfo_Se,V_k_0,B,C,D,E) 
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    V_cinfo_Se-V_k_0+1

Discarded unfeasible chain [[12]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_encode_mcu_AC_refine_bb1_in(V_cinfo_Ss,V_cinfo_Se,V_k_0,B,C,D,E) 
* [[12],13]
* [13]


### Merging Chains  eval_encode_mcu_AC_refine_bb1_in/7 into  External patterns of execution 
* [[13]] --> 1 
* [[13,[12]]] --> 2 


### Specialization of cost equations eval_encode_mcu_AC_refine_bb6_in/12 
* CE 9 is refined into CE [14] 
* CE 11 is refined into CE [15] 
* CE 10 is refined into CE [16] 


#### Refined cost equations eval_encode_mcu_AC_refine_bb6_in/12 
* CE 14: eval_encode_mcu_AC_refine_bb6_in(A,B,C,D,E,F,A,B,C,G,E,H) = 0
     [C>=E,A>=B,E>=16,H=0,G=0,F=2,D=0] 
* CE 15: eval_encode_mcu_AC_refine_bb6_in(A,B,C,D,E,F,A,B,C,G,E,H) = 0
     [C>=E,A>=B,15>=E,H=0,G=0,F=2,D=0] 
* CE 16: eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se,V_k_1,V_r_0,V_3,V_r_1,B,C,D,E,F,G,H) = 1+ eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se,V_k_1,V_r_0,I,J,K,C,D,E,F,G,H)
     [V_r_0>=V_r_1,V_cinfo_Se>=V_k_1,V_r_1>=16,V_r_1=J+16,K=2,I=0,B=2,V_3=0] 

### Cost equations --> "Loop" of eval_encode_mcu_AC_refine_bb6_in/12 
* CEs [16] --> Loop 14 
* CEs [14] --> Loop 15 
* CEs [15] --> Loop 16 

#### Loops of eval_encode_mcu_AC_refine_bb6_in/12 
* Loop 14: eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se,V_k_1,V_r_0,V_3,V_r_1,B,C,D,E,F,G,H)->  eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se,V_k_1,V_r_0,V_3',V_r_1',B',C,D,E,F,G,H)
                  [V_r_0>=V_r_1,V_cinfo_Se>=V_k_1,V_r_1>=16,V_r_1=V_r_1'+16,B'=2,V_3'=0,B=2,V_3=0] 
* Loop 15: eval_encode_mcu_AC_refine_bb6_in(A,B,C,D,E,F,A,B,C,G,E,H) [C>=E,A>=B,E>=16,H=0,G=0,F=2,D=0] 
* Loop 16: eval_encode_mcu_AC_refine_bb6_in(A,B,C,D,E,F,A,B,C,G,E,H) [C>=E,A>=B,15>=E,H=0,G=0,F=2,D=0] 

### Ranking functions of CR eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se,V_k_1,V_r_0,V_3,V_r_1,B,C,D,E,F,G,H) 
* RF of phase [14]: [V_r_1-15]

#### Partial ranking functions of CR eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se,V_k_1,V_r_0,V_3,V_r_1,B,C,D,E,F,G,H) 
* Partial RF of phase [14]:
  - RF of loop [14:1]:
    V_r_1-15

Discarded unfeasible chain [[14]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se,V_k_1,V_r_0,V_3,V_r_1,B,C,D,E,F,G,H) 
* [[14],16]
* [[14],15]
* [16]
* [15]


### Merging Chains  eval_encode_mcu_AC_refine_bb6_in/12 into  External patterns of execution 
* [[16]] --> 1 
* [[15]] --> 2 
* [[16,[14]]] --> 3 
* [[15,[14]]] --> 4 


### Specialization of cost equations eval_encode_mcu_AC_refine_bb3_in/4 
* CE 8 is refined into CE [17] 
* CE 7 is refined into CE [18,19,20,21] 
* CE 6 is refined into CE [22] 


#### Refined cost equations eval_encode_mcu_AC_refine_bb3_in/4 
* CE 17: eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B) = 0
     [V_k_1>=V_cinfo_Se+1,B=3] 
* CE 18: eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B) = 2+ eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se,V_k_1,V_r_0,C,V_r_0,D,V_cinfo_Se,V_k_1,V_r_0,E,V_r_0,F):1+ eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,G,H,I)
     [V_cinfo_Se>=V_k_1,15>=V_r_0,V_k_1+1=G,I=3,H=0,F=0,E=0,D=2,C=0,B=3] 
* CE 19: eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B) = 2+ eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se,V_k_1,V_r_0,C,V_r_0,D,V_cinfo_Se,V_k_1,V_r_0,E,V_r_0,F):2+ eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,G,H,I)
     [V_cinfo_Se>=V_k_1,V_r_0>=16,V_k_1+1=G,I=3,H=0,F=0,E=0,D=2,C=0,B=3] 
* CE 20: eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B) = 2+ eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se,V_k_1,V_r_0,C,V_r_0,D,V_cinfo_Se,V_k_1,V_r_0,E,F,G):3+ eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,H,I,J)
     [V_r_0>=F+16,V_cinfo_Se>=V_k_1,F>=0,15>=F,V_k_1+1=H,J=3,I=0,G=0,E=0,D=2,C=0,B=3] 
* CE 21: eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B) = 2+ eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se,V_k_1,V_r_0,C,V_r_0,D,V_cinfo_Se,V_k_1,V_r_0,E,F,G):4+ eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,H,I,J)
     [V_r_0>=F+16,V_cinfo_Se>=V_k_1,F>=16,V_k_1+1=H,J=3,I=0,G=0,E=0,D=2,C=0,B=3] 
* CE 22: eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B) = 1+ eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,C,D,E)
     [V_cinfo_Se>=V_k_1,V_k_1+1=C,D=V_r_0+1,E=3,B=3] 

### Cost equations --> "Loop" of eval_encode_mcu_AC_refine_bb3_in/4 
* CEs [22] --> Loop 17 
* CEs [21] --> Loop 18 
* CEs [19,20] --> Loop 19 
* CEs [18] --> Loop 20 
* CEs [17] --> Loop 21 

#### Loops of eval_encode_mcu_AC_refine_bb3_in/4 
* Loop 17: eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B)->  eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1',V_r_0',B')
                  [V_cinfo_Se>=V_k_1,V_r_0+1=V_r_0',V_k_1+1=V_k_1',B'=3,B=3] 
* Loop 18: eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B)->  eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1',V_r_0',B')
                  [V_cinfo_Se>=V_k_1,V_r_0>=32,V_k_1+1=V_k_1',B'=3,V_r_0'=0,B=3] 
* Loop 19: eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B)->  eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1',V_r_0',B')
                  [V_cinfo_Se>=V_k_1,V_r_0>=16,V_k_1+1=V_k_1',B'=3,V_r_0'=0,B=3] 
* Loop 20: eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B)->  eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1',V_r_0',B')
                  [V_cinfo_Se>=V_k_1,15>=V_r_0,V_k_1+1=V_k_1',B'=3,V_r_0'=0,B=3] 
* Loop 21: eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B) [V_k_1>=V_cinfo_Se+1,B=3] 

### Ranking functions of CR eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B) 
* RF of phase [17,18,19,20]: [V_cinfo_Se-V_k_1+1]

#### Partial ranking functions of CR eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B) 
* Partial RF of phase [17,18,19,20]:
  - RF of loop [17:1,18:1,19:1,20:1]:
    V_cinfo_Se-V_k_1+1
  - RF of loop [18:1]:
    V_r_0/32-31/32 depends on loops [17:1,20:1] 
  - RF of loop [19:1]:
    V_r_0/16-15/16 depends on loops [17:1,20:1] 

Discarded unfeasible chain [[17,18,19,20]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B) 
* [[17,18,19,20],21]
* [21]


### Merging Chains  eval_encode_mcu_AC_refine_bb3_in/4 into  External patterns of execution 
* [[21]] --> 1 
* [[21,[17,18,19,20]]] --> 2 


### Specialization of cost equations loop_cont_eval_encode_mcu_AC_refine_bb1_in/5 
* CE 5 is refined into CE [23,24] 


#### Refined cost equations loop_cont_eval_encode_mcu_AC_refine_bb1_in/5 
* CE 23: loop_cont_eval_encode_mcu_AC_refine_bb1_in(H,A,B,C,D) = 1+ eval_encode_mcu_AC_refine_bb3_in(A,B,C,I):1
     [B>=A+1,I=3,H=4] 
* CE 24: loop_cont_eval_encode_mcu_AC_refine_bb1_in(H,A,B,C,D) = 1+ eval_encode_mcu_AC_refine_bb3_in(A,B,C,I):2
     [A>=B,I=3,H=4] 

### Cost equations --> "Loop" of loop_cont_eval_encode_mcu_AC_refine_bb1_in/5 
* CEs [24] --> Loop 22 
* CEs [23] --> Loop 23 

#### Loops of loop_cont_eval_encode_mcu_AC_refine_bb1_in/5 
* Loop 22: loop_cont_eval_encode_mcu_AC_refine_bb1_in(H,A,B,C,D) [A>=B,H=4] 
* Loop 23: loop_cont_eval_encode_mcu_AC_refine_bb1_in(H,A,B,C,D) [B>=A+1,H=4] 

### Ranking functions of CR loop_cont_eval_encode_mcu_AC_refine_bb1_in(H,A,B,C,D) 

#### Partial ranking functions of CR loop_cont_eval_encode_mcu_AC_refine_bb1_in(H,A,B,C,D) 


### Resulting Chains:loop_cont_eval_encode_mcu_AC_refine_bb1_in(H,A,B,C,D) 
* [23]
* [22]


### Merging Chains  loop_cont_eval_encode_mcu_AC_refine_bb1_in/5 into  External patterns of execution 
* [[23]] --> 1 
* [[22]] --> 2 


### Specialization of cost equations eval_encode_mcu_AC_refine_5/3 
* CE 2 is refined into CE [25,26] 


#### Refined cost equations eval_encode_mcu_AC_refine_5/3 
* CE 25: eval_encode_mcu_AC_refine_5(V_cinfo_Ss,V_cinfo_Se,B) = 1+ eval_encode_mcu_AC_refine_bb1_in(V_cinfo_Ss,V_cinfo_Se,V_cinfo_Ss,C,V_cinfo_Se,V_cinfo_Ss,D):1+ loop_cont_eval_encode_mcu_AC_refine_bb1_in(E,V_cinfo_Se,V_cinfo_Ss,F,B):1
     [V_cinfo_Ss>=V_cinfo_Se+1,F=0,E=4,D=0,C=4] 
* CE 26: eval_encode_mcu_AC_refine_5(V_cinfo_Ss,V_cinfo_Se,B) = 1+ eval_encode_mcu_AC_refine_bb1_in(V_cinfo_Ss,V_cinfo_Se,V_cinfo_Ss,C,V_cinfo_Se,V_cinfo_Ss,D):2+ loop_cont_eval_encode_mcu_AC_refine_bb1_in(E,V_cinfo_Se,V_cinfo_Ss,F,B):2
     [V_cinfo_Se>=V_cinfo_Ss,F=0,E=4,D=0,C=4] 

### Cost equations --> "Loop" of eval_encode_mcu_AC_refine_5/3 
* CEs [25] --> Loop 24 
* CEs [26] --> Loop 25 

#### Loops of eval_encode_mcu_AC_refine_5/3 
* Loop 24: eval_encode_mcu_AC_refine_5(V_cinfo_Ss,V_cinfo_Se,B) [V_cinfo_Ss>=V_cinfo_Se+1] 
* Loop 25: eval_encode_mcu_AC_refine_5(V_cinfo_Ss,V_cinfo_Se,B) [V_cinfo_Se>=V_cinfo_Ss] 

### Ranking functions of CR eval_encode_mcu_AC_refine_5(V_cinfo_Ss,V_cinfo_Se,B) 

#### Partial ranking functions of CR eval_encode_mcu_AC_refine_5(V_cinfo_Ss,V_cinfo_Se,B) 


### Resulting Chains:eval_encode_mcu_AC_refine_5(V_cinfo_Ss,V_cinfo_Se,B) 
* [25]
* [24]


### Merging Chains  eval_encode_mcu_AC_refine_5/3 into  External patterns of execution 
* [[25]] --> 1 
* [[24]] --> 2 


### Specialization of cost equations eval_encode_mcu_AC_refine_start/3 
* CE 1 is refined into CE [27,28] 


#### Refined cost equations eval_encode_mcu_AC_refine_start/3 
* CE 27: eval_encode_mcu_AC_refine_start(V_cinfo_Ss,V_cinfo_Se,B) = 0+ eval_encode_mcu_AC_refine_5(V_cinfo_Ss,V_cinfo_Se,B):1
     [V_cinfo_Se>=V_cinfo_Ss] 
* CE 28: eval_encode_mcu_AC_refine_start(V_cinfo_Ss,V_cinfo_Se,B) = 0+ eval_encode_mcu_AC_refine_5(V_cinfo_Ss,V_cinfo_Se,B):2
     [V_cinfo_Ss>=V_cinfo_Se+1] 

### Cost equations --> "Loop" of eval_encode_mcu_AC_refine_start/3 
* CEs [28] --> Loop 26 
* CEs [27] --> Loop 27 

#### Loops of eval_encode_mcu_AC_refine_start/3 
* Loop 26: eval_encode_mcu_AC_refine_start(V_cinfo_Ss,V_cinfo_Se,B) [V_cinfo_Ss>=V_cinfo_Se+1] 
* Loop 27: eval_encode_mcu_AC_refine_start(V_cinfo_Ss,V_cinfo_Se,B) [V_cinfo_Se>=V_cinfo_Ss] 

### Ranking functions of CR eval_encode_mcu_AC_refine_start(V_cinfo_Ss,V_cinfo_Se,B) 

#### Partial ranking functions of CR eval_encode_mcu_AC_refine_start(V_cinfo_Ss,V_cinfo_Se,B) 


### Resulting Chains:eval_encode_mcu_AC_refine_start(V_cinfo_Ss,V_cinfo_Se,B) 
* [27]
* [26]


### Merging Chains  eval_encode_mcu_AC_refine_start/3 into  External patterns of execution 
* [[27]] --> 1 
* [[26]] --> 2 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 12 

#### Computing cost of phase [12] 

#### Simplifying cost structure of CE 13 

#### Cost of loops [12] 

 * loop 12:eval_encode_mcu_AC_refine_bb1_in(V_cinfo_Ss,V_cinfo_Se,V_k_0,B,C,D,E) -> [eval_encode_mcu_AC_refine_bb1_in(V_cinfo_Ss',V_cinfo_Se',V_k_0',B',C',D',E')] 
1
##### Pending set eval_encode_mcu_AC_refine_bb1_in(V_cinfo_Ss,V_cinfo_Se,V_k_0,B,C,D,E)
* Psum in Loop 12: [it(12)=<1]

###### Computing sum for it(12)=<1  in Loop 12 
   - Applying inductive sum strategy 
     - head Candidate: V_cinfo_Se-V_k_0+1 
     - head Candidate: V_cinfo_Se-V_k_0+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_cinfo_Se-V_k_0+1 
     - tail Candidate: V_cinfo_Se-V_k_0+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(12)=<V_cinfo_Se-V_k_0+1,it(12)=<V_cinfo_Se-V_k_0+1,it(12)=<V_cinfo_Se-V_k_0-V_cinfo_Se'+V_k_0',it(12)=<V_cinfo_Se-V_k_0-V_cinfo_Se'+V_k_0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [12] 

#### Simplifying cost structure of phase [12] 

#### Cost of phase [12]:eval_encode_mcu_AC_refine_bb1_in(V_cinfo_Ss,V_cinfo_Se,V_k_0,B,C,D,E) -> [eval_encode_mcu_AC_refine_bb1_in(V_cinfo_Ss',V_cinfo_Se',V_k_0',B',C',D',E')] 
1*it(12)+0
  Such that:it(12) =< V_cinfo_Se-V_k_0+1
it(12) =< V_cinfo_Se-V_k_0-V_cinfo_Se'+V_k_0'

#### Simplifying cost structure of chain [[12],13] 

#### Cost of chains of eval_encode_mcu_AC_refine_bb1_in(V_cinfo_Ss,V_cinfo_Se,V_k_0,B,C,D,E):
* Chain [[12],13]: 1*it(12)+0
  Such that:it(12) =< V_cinfo_Se-V_k_0+1

  with precondition: [B=4,E=0,V_cinfo_Se=C,V_cinfo_Ss=D,V_k_0>=V_cinfo_Ss,V_cinfo_Se>=V_k_0] 

* Chain [13]: 0
  with precondition: [B=4,E=0,V_cinfo_Se=C,V_cinfo_Ss=D,V_k_0>=V_cinfo_Ss,V_k_0>=V_cinfo_Se+1] 


#### Simplifying cost structure of CE 15 

#### Computing cost of phase [14] 

#### Simplifying cost structure of CE 16 

#### Cost of loops [14] 

 * loop 14:eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se,V_k_1,V_r_0,V_3,V_r_1,B,C,D,E,F,G,H) -> [eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se',V_k_1',V_r_0',V_3',V_r_1',B',C',D',E',F',G',H')] 
1
##### Pending set eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se,V_k_1,V_r_0,V_3,V_r_1,B,C,D,E,F,G,H)
* Psum in Loop 14: [it(14)=<1]

###### Computing sum for it(14)=<1  in Loop 14 
   - Applying inductive sum strategy 
     - head Candidate: V_r_1-15 
     - head Candidate: V_r_1-15 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_r_1-15 
     - tail Candidate: V_r_1-15 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(14)=<V_r_1-15,it(14)=<V_r_1-15,it(14)=<V_r_1-V_r_1',it(14)=<V_r_1-V_r_1'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [14] 

#### Simplifying cost structure of phase [14] 

#### Cost of phase [14]:eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se,V_k_1,V_r_0,V_3,V_r_1,B,C,D,E,F,G,H) -> [eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se',V_k_1',V_r_0',V_3',V_r_1',B',C',D',E',F',G',H')] 
1*it(14)+0
  Such that:it(14) =< V_r_1
it(14) =< V_r_1-V_r_1'

#### Simplifying cost structure of chain [[14],16] 

#### Simplifying cost structure of CE 14 

#### Found solution for phase  [14] in the cache 

#### Cost of phase [14]:eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se,V_k_1,V_r_0,V_3,V_r_1,B,C,D,E,F,G,H) -> [eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se',V_k_1',V_r_0',V_3',V_r_1',B',C',D',E',F',G',H')] 
1*it(14)+0
  Such that:it(14) =< V_r_1
it(14) =< V_r_1-V_r_1'

#### Simplifying cost structure of chain [[14],15] 

#### Cost of chains of eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se,V_k_1,V_r_0,V_3,V_r_1,B,C,D,E,F,G,H):
* Chain [[14],16]: 1*it(14)+0
  Such that:it(14) =< V_r_1-G

  with precondition: [V_3=0,B=2,F=0,H=0,V_cinfo_Se=C,V_k_1=D,V_r_0=E,15>=G,G>=0,V_cinfo_Se>=V_k_1,V_r_0>=V_r_1,V_r_1>=G+16] 

* Chain [[14],15]: 1*it(14)+0
  Such that:it(14) =< V_r_1-G

  with precondition: [V_3=0,B=2,F=0,H=0,V_cinfo_Se=C,V_k_1=D,V_r_0=E,G>=16,V_cinfo_Se>=V_k_1,V_r_0>=V_r_1,V_r_1>=G+16] 

* Chain [16]: 0
  with precondition: [V_3=0,B=2,F=0,H=0,V_cinfo_Se=C,V_k_1=D,V_r_0=E,V_r_1=G,15>=V_r_1,V_cinfo_Se>=V_k_1,V_r_0>=V_r_1] 

* Chain [15]: 0
  with precondition: [V_3=0,B=2,F=0,H=0,V_cinfo_Se=C,V_k_1=D,V_r_0=E,V_r_1=G,V_r_1>=16,V_cinfo_Se>=V_k_1,V_r_0>=V_r_1] 


#### Simplifying cost structure of CE 17 

#### Computing cost of phase [17,18,19,20] 

#### Simplifying cost structure of CE 22 
 * Renamed intermediate variables: 
[(eq(21,1),it(14))>>s(1)]

#### Simplifying cost structure of CE 21 
 * Renamed intermediate variables: 
[(it(18),s(1))>>s(2)]

#### Simplifying cost structure of CE 19 
 * Renamed intermediate variables: 
[(eq(20,1),it(14))>>s(3)]

#### Simplifying cost structure of CE 20 
 * Renamed intermediate variables: 
[(it(19),s(3))>>s(4)]

#### Simplifying cost structure of CE 18 

#### Cost of loops [17,18,19,20] 

 * loop 17:eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B) -> [eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se',V_k_1',V_r_0',B')] 
1
 * loop 18:eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B) -> [eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se',V_k_1',V_r_0',B')] 
1*s(2)+2
  Such that:s(2) =< V_r_0

 * loop 19:eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B) -> [eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se',V_k_1',V_r_0',B')] 
1*s(4)+2
  Such that:s(4) =< V_r_0

 * loop 20:eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B) -> [eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se',V_k_1',V_r_0',B')] 
2
##### Pending set eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B)
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1,s(5)=<V_r_0]
* Psum in Loop 19: [it(19)=<1,s(6)=<V_r_0]
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for it(17)=<1  in Loop 17 
   - Applying inductive sum strategy 
     - head Candidate: V_cinfo_Se-V_k_1+1 
       - Loop 18 is collaborative and bounds [it(18)] 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative and bounds [it(20)] 
     - head Candidate: V_cinfo_Se-V_k_1+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_cinfo_Se-V_k_1+1 
       - Loop 18 is collaborative and bounds [it(18)] 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative and bounds [it(20)] 
     - tail Candidate: V_cinfo_Se-V_k_1+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(17)+it(18)+it(19)+it(20)=<V_cinfo_Se-V_k_1+1,it(17)+it(18)+it(19)+it(20)=<V_cinfo_Se-V_k_1+1,it(17)+it(18)+it(19)+it(20)=<V_cinfo_Se-V_k_1-V_cinfo_Se'+V_k_1',it(17)+it(18)+it(19)+it(20)=<V_cinfo_Se-V_k_1-V_cinfo_Se'+V_k_1'] 

##### Pending set eval_encode_mcu_AC_refine_0(V_cinfo_Ss,V_cinfo_Se,B)
* Psum in Loop 18: [it(18)=<1,s(5)=<V_r_0]
* Psum in Loop 19: [it(19)=<1,s(6)=<V_r_0]
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for it(18)=<1  in Loop 18 
   - Applying inductive sum strategy 
     - head Candidate: V_cinfo_Se-V_k_1+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_r_0/32-31/32 
       - Loop 17 adds a constant 1/32 
       - Loop 19 is collaborative
       - Loop 20 has a reset to  [-31/32]
     - head Candidate: V_cinfo_Se-V_k_1+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_cinfo_Se-V_k_1+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_r_0/32-31/32 
       - Loop 17 adds a constant 1/32 
       - Loop 19 is collaborative
       - Loop 20 has undefined behavior 
     - tail Candidate: V_cinfo_Se-V_k_1+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(18)=<aux(1)+it(17)*(1/32)+aux(2),it(17)+it(18)+it(19)+it(20)=<V_cinfo_Se-V_k_1+1,aux(2)=<V_r_0/32-31/32,it(17)+it(18)+it(19)+it(20)=<V_cinfo_Se-V_k_1+1,it(17)+it(18)+it(19)+it(20)=<V_cinfo_Se-V_k_1-V_cinfo_Se'+V_k_1',it(17)+it(18)+it(19)+it(20)=<V_cinfo_Se-V_k_1-V_cinfo_Se'+V_k_1'] 

##### Pending set eval_encode_mcu_AC_refine_0(V_cinfo_Ss,V_cinfo_Se,B)
* Psum in Loop 18: [s(5)=<V_r_0]
* Psum in Loop 19: [it(19)=<1,s(6)=<V_r_0]
* Psum in Loop 20: [it(20)=<1,aux(1)=< -31/32]

###### Computing sum for s(5)=<V_r_0  in Loop 18 
   - Applying inductive sum strategy 
     - head Candidate: V_r_0 
       - Loop 17 adds a constant 1/1 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 has a reset to  [0]
     - tail Candidate: V_r_0 
       - Loop 17 adds a constant 1/1 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(5)=<V_r_0] 
 * Adding constraints: [s(5)=<it(18)*aux(5),it(19)+s(5)=<aux(3)+it(17)+aux(4),aux(4)=<V_r_0] 

##### Pending set eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B)
* Pmax/min: [aux(5)=<V_r_0]
* Psum in Loop 19: [s(6)=<V_r_0]
* Psum in Loop 20: [it(20)=<1,aux(3)=<0,aux(1)=< -31/32]

###### Computing max_min for aux(5)=<V_r_0  
   - Applying max/min strategy 
     - Loop 17  increases the expression by 1/1 
     - Loop 18 does not increase the expression
     - Loop 19 does not increase the expression
     - Loop 20  resets the expression to [0] 
 * Adding constraints:[aux(5)=<max([aux(6),aux(7)])+it(17),aux(6)=<V_r_0] 

##### Pending set eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B)
* Pmax/min: [aux(7)=<0]
* Psum in Loop 19: [s(6)=<V_r_0]
* Psum in Loop 20: [it(20)=<1,aux(3)=<0,aux(1)=< -31/32]

###### Computing max_min for aux(7)=<0  
 * Adding constraints:[aux(7)=<0] 

##### Pending set eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B)
* Psum in Loop 19: [s(6)=<V_r_0]
* Psum in Loop 20: [it(20)=<1,aux(3)=<0,aux(1)=< -31/32]

###### Computing sum for s(6)=<V_r_0  in Loop 19 
   - Applying inductive sum strategy 
     - head Candidate: V_r_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_r_0 
       - We failed to classify this candidate before 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(9)=<V_r_0] 
 * Adding constraints: [s(6)=<it(19)*aux(9),s(5)+s(6)=<aux(3)+it(17)+aux(8),aux(8)=<V_r_0] 

##### Pending set eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B)
* Pmax/min: [aux(9)=<V_r_0]
* Psum in Loop 20: [it(20)=<1,aux(3)=<0,aux(1)=< -31/32]

###### Computing max_min for aux(9)=<V_r_0  
   - Found a solution using cacheing 
 * Adding constraints:[aux(9)=<aux(5)] 

##### Pending set eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B)
* Psum in Loop 20: [it(20)=<1,aux(3)=<0,aux(1)=< -31/32]

###### Computing sum for it(20)=<1  in Loop 20 
   - Applying inductive sum strategy 
     - head Candidate: V_cinfo_Se-V_k_1+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_cinfo_Se-V_k_1+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_cinfo_Se-V_k_1+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_cinfo_Se-V_k_1+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(17)+it(18)+it(19)+it(20)=<V_cinfo_Se-V_k_1+1,it(17)+it(18)+it(19)+it(20)=<V_cinfo_Se-V_k_1+1,it(17)+it(18)+it(19)+it(20)=<V_cinfo_Se-V_k_1-V_cinfo_Se'+V_k_1',it(17)+it(18)+it(19)+it(20)=<V_cinfo_Se-V_k_1-V_cinfo_Se'+V_k_1'] 

##### Pending set eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B)
* Psum in Loop 20: [aux(3)=<0,aux(1)=< -31/32]

###### Computing sum for aux(3)=<0  in Loop 20 
 * Adding constraints: [aux(3)=<0] 

##### Pending set eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B)
* Psum in Loop 20: [aux(1)=< -31/32]

###### Computing sum for aux(1)=< -31/32  in Loop 20 
   - Applying inductive sum strategy 
     - head Candidate: V_cinfo_Se-V_k_1+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_cinfo_Se-V_k_1+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_cinfo_Se-V_k_1+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_cinfo_Se-V_k_1+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [aux(1)+it(17)+it(18)+it(19)=<V_cinfo_Se-V_k_1+1,aux(1)+it(17)+it(18)+it(19)=<V_cinfo_Se-V_k_1+1,aux(1)+it(17)+it(18)+it(19)=<V_cinfo_Se-V_k_1-V_cinfo_Se'+V_k_1',aux(1)+it(17)+it(18)+it(19)=<V_cinfo_Se-V_k_1-V_cinfo_Se'+V_k_1'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [17,18,19,20] 

#### Simplifying cost structure of phase [17,18,19,20] 
 * Joined equivalent variables [aux(10),aux(3),aux(7)] into aux(10)
 * Joined equivalent variables [aux(13),aux(4),aux(6),aux(8)] into aux(13)
 * Joined equivalent variables [it(17),it(20)] into it(17)

#### Cost of phase [17,18,19,20]:eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B) -> [eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se',V_k_1',V_r_0',B')] 
3*it(17)+2*it(18)+2*it(19)+1*s(5)+1*s(6)+0
  Such that:aux(2) =< V_r_0/32
aux(11) =< V_cinfo_Se-V_k_1+1
aux(12) =< V_cinfo_Se-V_k_1-V_cinfo_Se'+V_k_1'
aux(13) =< V_r_0
aux(1) =< aux(11)
it(17) =< aux(11)
it(18) =< aux(11)
it(19) =< aux(11)
aux(1) =< aux(12)
it(17) =< aux(12)
it(18) =< aux(12)
it(19) =< aux(12)
aux(5) =< max([aux(13),0])+it(17)
s(5) =< it(17)+aux(13)
s(6) =< it(17)+aux(13)
it(19) =< it(17)+aux(13)
it(18) =< aux(1)+it(17)*(1/32)+aux(2)
aux(9) =< aux(5)
s(5) =< it(18)*aux(5)
s(6) =< it(19)*aux(9)

#### Simplifying cost structure of chain [[17,18,19,20],21] 
 * Joined equivalent variables [aux(14),aux(11),aux(12)] into aux(14)
 * Joined equivalent variables [aux(14),aux(1)] into aux(14)

#### Cost of chains of eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B):
* Chain [[17,18,19,20],21]: 3*it(17)+2*it(18)+2*it(19)+1*s(5)+1*s(6)+0
  Such that:aux(13) =< V_r_0
aux(2) =< V_r_0/32
aux(14) =< V_cinfo_Se-V_k_1+1
it(17) =< aux(14)
it(18) =< aux(14)
it(19) =< aux(14)
aux(5) =< max([aux(13),0])+it(17)
s(5) =< it(17)+aux(13)
s(6) =< it(17)+aux(13)
it(19) =< it(17)+aux(13)
it(18) =< aux(14)+it(17)*(1/32)+aux(2)
aux(9) =< aux(5)
s(5) =< it(18)*aux(5)
s(6) =< it(19)*aux(9)

  with precondition: [B=3,V_cinfo_Se>=V_k_1] 

* Chain [21]: 0
  with precondition: [B=3,V_k_1>=V_cinfo_Se+1] 


#### Simplifying cost structure of CE 23 
 * Renamed intermediate variables: 
[(eq(24,1),aux(13))>>s(7),(eq(24,1),aux(2))>>s(8),(eq(24,1),aux(14))>>s(9),(eq(24,1),it(17))>>s(10),(eq(24,1),it(18))>>s(11),(eq(24,1),it(19))>>s(12),(eq(24,1),aux(5))>>s(13),(eq(24,1),s(5))>>s(14),(eq(24,1),s(6))>>s(15),(eq(24,1),aux(9))>>s(16)]

#### Simplifying cost structure of CE 24 

#### Cost of chains of loop_cont_eval_encode_mcu_AC_refine_bb1_in(H,A,B,C,D):
* Chain [23]: 1
  with precondition: [H=4,B>=A+1] 

* Chain [22]: 3*s(10)+2*s(11)+2*s(12)+1*s(14)+1*s(15)+1
  Such that:s(9) =< A-B+1
s(7) =< C
s(8) =< C/32
s(10) =< s(9)
s(11) =< s(9)
s(12) =< s(9)
s(13) =< max([s(7),0])+s(10)
s(14) =< s(10)+s(7)
s(15) =< s(10)+s(7)
s(12) =< s(10)+s(7)
s(11) =< s(9)+s(10)*(1/32)+s(8)
s(16) =< s(13)
s(14) =< s(11)*s(13)
s(15) =< s(12)*s(16)

  with precondition: [H=4,A>=B] 

 * Renamed intermediate variables: 
[(eq(26,1),it(12))>>s(17)]
 * Renamed intermediate variables: 
[(eq(26,2),s(9))>>s(18),(eq(26,2),s(7))>>s(19),(eq(26,2),s(8))>>s(20),(eq(26,2),s(10))>>s(21),(eq(26,2),s(11))>>s(22),(eq(26,2),s(12))>>s(23),(eq(26,2),s(13))>>s(24),(eq(26,2),s(14))>>s(25),(eq(26,2),s(15))>>s(26),(eq(26,2),s(16))>>s(27)]

#### Simplifying cost structure of CE 26 
 * Joined equivalent variables [aux(15),s(19),s(20)] into aux(15)
 * Joined equivalent variables [aux(16),s(18)] into aux(16)
 * Joined equivalent variables [s(17),s(21)] into s(17)

#### Simplifying cost structure of CE 25 

#### Cost of chains of eval_encode_mcu_AC_refine_5(V_cinfo_Ss,V_cinfo_Se,B):
* Chain [25]: 4*s(17)+2*s(22)+2*s(23)+1*s(25)+1*s(26)+2
  Such that:aux(16) =< -V_cinfo_Ss+V_cinfo_Se+1
s(17) =< aux(16)
s(22) =< aux(16)
s(23) =< aux(16)
s(24) =< max([0,0])+s(17)
s(25) =< s(17)
s(26) =< s(17)
s(23) =< s(17)
s(22) =< aux(16)+s(17)*(1/32)
s(27) =< s(24)
s(25) =< s(22)*s(24)
s(26) =< s(23)*s(27)

  with precondition: [V_cinfo_Se>=V_cinfo_Ss] 

* Chain [24]: 2
  with precondition: [V_cinfo_Ss>=V_cinfo_Se+1] 

 * Renamed intermediate variables: 
[(eq(27,1),aux(16))>>s(28),(eq(27,1),s(17))>>s(29),(eq(27,1),s(22))>>s(30),(eq(27,1),s(23))>>s(31),(eq(27,1),s(24))>>s(32),(eq(27,1),s(25))>>s(33),(eq(27,1),s(26))>>s(34),(eq(27,1),s(27))>>s(35)]

#### Simplifying cost structure of CE 27 

#### Simplifying cost structure of CE 28 

#### Cost of chains of eval_encode_mcu_AC_refine_start(V_cinfo_Ss,V_cinfo_Se,B):
* Chain [27]: 4*s(29)+2*s(30)+2*s(31)+1*s(33)+1*s(34)+2
  Such that:s(28) =< -V_cinfo_Ss+V_cinfo_Se+1
s(29) =< s(28)
s(30) =< s(28)
s(31) =< s(28)
s(32) =< max([0,0])+s(29)
s(33) =< s(29)
s(34) =< s(29)
s(31) =< s(29)
s(30) =< s(28)+s(29)*(1/32)
s(35) =< s(32)
s(33) =< s(30)*s(32)
s(34) =< s(31)*s(35)

  with precondition: [V_cinfo_Se>=V_cinfo_Ss] 

* Chain [26]: 2
  with precondition: [V_cinfo_Ss>=V_cinfo_Se+1] 


Closed-form bounds of eval_encode_mcu_AC_refine_start(V_cinfo_Ss,V_cinfo_Se,B): 
-------------------------------------
* Chain [27] with precondition: [V_cinfo_Se>=V_cinfo_Ss] 
    - Upper bound: -10*V_cinfo_Ss+10*V_cinfo_Se+12 
    - Complexity: n 
* Chain [26] with precondition: [V_cinfo_Ss>=V_cinfo_Se+1] 
    - Upper bound: 2 
    - Complexity: constant 

### Maximum cost of eval_encode_mcu_AC_refine_start(V_cinfo_Ss,V_cinfo_Se,B): nat(-V_cinfo_Ss+V_cinfo_Se+1)*10+2 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 40 ms.
* Invariants computed in 48 ms.
   - Backward Invariants 26 ms.
   - Transitive Invariants 10 ms.
* Refinement performed in 64 ms.
* Termination proved in 13 ms.
* Upper bounds computed in 92 ms.
   - Equation cost structures 27 ms.
   - Phase cost structures 52 ms.
   - Chain cost structures 20 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 301 ms.


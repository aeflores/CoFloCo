Warning: Ignored call to eval_encode_mcu_AC_refine_stop/1 in equation eval_encode_mcu_AC_refine_bb9_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_encode_mcu_AC_refine_bb1_in/7,eval_encode_mcu_AC_refine_bb2_in/7]
1. recursive : [eval_encode_mcu_AC_refine_12/12,eval_encode_mcu_AC_refine_13/13,eval_encode_mcu_AC_refine_bb6_in/12,eval_encode_mcu_AC_refine_bb7_in/12,eval_encode_mcu_AC_refine_bb8_in/13]
2. recursive : [eval_encode_mcu_AC_refine_8/4,eval_encode_mcu_AC_refine_9/5,eval_encode_mcu_AC_refine__critedge_in/7,eval_encode_mcu_AC_refine_bb3_in/4,eval_encode_mcu_AC_refine_bb4_in/4,eval_encode_mcu_AC_refine_bb5_in/5,loop_cont_eval_encode_mcu_AC_refine_bb6_in/8]
3. non_recursive : [eval_encode_mcu_AC_refine_bb9_in/1]
4. non_recursive : [loop_cont_eval_encode_mcu_AC_refine_bb3_in/2]
5. non_recursive : [loop_cont_eval_encode_mcu_AC_refine_bb1_in/5]
6. non_recursive : [eval_encode_mcu_AC_refine_5/3]
7. non_recursive : [eval_encode_mcu_AC_refine_4/3]
8. non_recursive : [eval_encode_mcu_AC_refine_3/3]
9. non_recursive : [eval_encode_mcu_AC_refine_2/3]
10. non_recursive : [eval_encode_mcu_AC_refine_1/3]
11. non_recursive : [eval_encode_mcu_AC_refine_0/3]
12. non_recursive : [eval_encode_mcu_AC_refine_bb0_in/3]
13. non_recursive : [eval_encode_mcu_AC_refine_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_encode_mcu_AC_refine_bb1_in/7
1. SCC is partially evaluated into eval_encode_mcu_AC_refine_bb6_in/12
2. SCC is partially evaluated into eval_encode_mcu_AC_refine_bb3_in/4
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is partially evaluated into eval_encode_mcu_AC_refine_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_encode_mcu_AC_refine_bb1_in/7 
* CE 4 is refined into CE [11] 
* CE 3 is refined into CE [12] 


#### Refined cost equations eval_encode_mcu_AC_refine_bb1_in/7 
* CE 11: eval_encode_mcu_AC_refine_bb1_in(A,B,C,D,B,A,E) = 0
     [C>=B+1,C>=A,E=0,D=4] 
* CE 12: eval_encode_mcu_AC_refine_bb1_in(V_cinfo_Ss,V_cinfo_Se,V_k_0,B,C,D,E) = 1+ eval_encode_mcu_AC_refine_bb1_in(V_cinfo_Ss,V_cinfo_Se,F,G,C,D,E)
     [V_cinfo_Se>=V_k_0,V_k_0>=V_cinfo_Ss,V_k_0+1=F,G=4,B=4] 

### Cost equations --> "Loop" of eval_encode_mcu_AC_refine_bb1_in/7 
* CEs [12] --> Loop 9 
* CEs [11] --> Loop 10 

#### Loops of eval_encode_mcu_AC_refine_bb1_in/7 
* Loop 9: eval_encode_mcu_AC_refine_bb1_in(V_cinfo_Ss,V_cinfo_Se,V_k_0,B,C,D,E)->  eval_encode_mcu_AC_refine_bb1_in(V_cinfo_Ss,V_cinfo_Se,V_k_0',B',C,D,E)
                  [V_cinfo_Se>=V_k_0,V_k_0>=V_cinfo_Ss,V_k_0+1=V_k_0',B'=4,B=4] 
* Loop 10: eval_encode_mcu_AC_refine_bb1_in(A,B,C,D,B,A,E) [C>=B+1,C>=A,E=0,D=4] 

### Ranking functions of CR eval_encode_mcu_AC_refine_bb1_in(V_cinfo_Ss,V_cinfo_Se,V_k_0,B,C,D,E) 
* RF of phase [9]: [V_cinfo_Se-V_k_0+1]

#### Partial ranking functions of CR eval_encode_mcu_AC_refine_bb1_in(V_cinfo_Ss,V_cinfo_Se,V_k_0,B,C,D,E) 
* Partial RF of phase [9]:
  - RF of loop [9:1]:
    V_cinfo_Se-V_k_0+1

Discarded unfeasible chain [[9]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_encode_mcu_AC_refine_bb1_in(V_cinfo_Ss,V_cinfo_Se,V_k_0,B,C,D,E) 
* [[9],10]
* [10]


### Merging Chains  eval_encode_mcu_AC_refine_bb1_in/7 into  External patterns of execution 
* [[10]] --> 1 
* [[10,[9]]] --> 2 


### Specialization of cost equations eval_encode_mcu_AC_refine_bb6_in/12 
* CE 8 is refined into CE [13] 
* CE 10 is refined into CE [14] 
* CE 9 is refined into CE [15] 


#### Refined cost equations eval_encode_mcu_AC_refine_bb6_in/12 
* CE 13: eval_encode_mcu_AC_refine_bb6_in(A,B,C,D,E,F,A,B,C,G,E,H) = 0
     [C>=E,A>=B,E>=16,H=0,G=0,F=2,D=0] 
* CE 14: eval_encode_mcu_AC_refine_bb6_in(A,B,C,D,E,F,A,B,C,G,E,H) = 0
     [C>=E,A>=B,15>=E,H=0,G=0,F=2,D=0] 
* CE 15: eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se,V_k_1,V_r_0,V_3,V_r_1,B,C,D,E,F,G,H) = 1+ eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se,V_k_1,V_r_0,I,J,K,C,D,E,F,G,H)
     [V_r_0>=V_r_1,V_cinfo_Se>=V_k_1,V_r_1>=16,V_r_1=J+16,K=2,I=0,B=2,V_3=0] 

### Cost equations --> "Loop" of eval_encode_mcu_AC_refine_bb6_in/12 
* CEs [15] --> Loop 11 
* CEs [13] --> Loop 12 
* CEs [14] --> Loop 13 

#### Loops of eval_encode_mcu_AC_refine_bb6_in/12 
* Loop 11: eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se,V_k_1,V_r_0,V_3,V_r_1,B,C,D,E,F,G,H)->  eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se,V_k_1,V_r_0,V_3',V_r_1',B',C,D,E,F,G,H)
                  [V_r_0>=V_r_1,V_cinfo_Se>=V_k_1,V_r_1>=16,V_r_1=V_r_1'+16,B'=2,V_3'=0,B=2,V_3=0] 
* Loop 12: eval_encode_mcu_AC_refine_bb6_in(A,B,C,D,E,F,A,B,C,G,E,H) [C>=E,A>=B,E>=16,H=0,G=0,F=2,D=0] 
* Loop 13: eval_encode_mcu_AC_refine_bb6_in(A,B,C,D,E,F,A,B,C,G,E,H) [C>=E,A>=B,15>=E,H=0,G=0,F=2,D=0] 

### Ranking functions of CR eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se,V_k_1,V_r_0,V_3,V_r_1,B,C,D,E,F,G,H) 
* RF of phase [11]: [V_r_1-15]

#### Partial ranking functions of CR eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se,V_k_1,V_r_0,V_3,V_r_1,B,C,D,E,F,G,H) 
* Partial RF of phase [11]:
  - RF of loop [11:1]:
    V_r_1-15

Discarded unfeasible chain [[11]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se,V_k_1,V_r_0,V_3,V_r_1,B,C,D,E,F,G,H) 
* [[11],13]
* [[11],12]
* [13]
* [12]


### Merging Chains  eval_encode_mcu_AC_refine_bb6_in/12 into  External patterns of execution 
* [[13]] --> 1 
* [[12]] --> 2 
* [[13,[11]]] --> 3 
* [[12,[11]]] --> 4 


### Specialization of cost equations eval_encode_mcu_AC_refine_bb3_in/4 
* CE 7 is refined into CE [16] 
* CE 5 is refined into CE [17] 
* CE 6 is refined into CE [18,19,20,21] 


#### Refined cost equations eval_encode_mcu_AC_refine_bb3_in/4 
* CE 16: eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B) = 0
     [V_k_1>=V_cinfo_Se+1,B=3] 
* CE 17: eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B) = 1+ eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,C,D,E)
     [V_cinfo_Se>=V_k_1,V_k_1+1=C,D=V_r_0+1,E=3,B=3] 
* CE 18: eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B) = 2+ eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se,V_k_1,V_r_0,C,V_r_0,D,V_cinfo_Se,V_k_1,V_r_0,E,V_r_0,F):1+ eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,G,H,I)
     [V_cinfo_Se>=V_k_1,15>=V_r_0,V_k_1+1=G,I=3,H=0,F=0,E=0,D=2,C=0,B=3] 
* CE 19: eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B) = 2+ eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se,V_k_1,V_r_0,C,V_r_0,D,V_cinfo_Se,V_k_1,V_r_0,E,V_r_0,F):2+ eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,G,H,I)
     [V_cinfo_Se>=V_k_1,V_r_0>=16,V_k_1+1=G,I=3,H=0,F=0,E=0,D=2,C=0,B=3] 
* CE 20: eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B) = 2+ eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se,V_k_1,V_r_0,C,V_r_0,D,V_cinfo_Se,V_k_1,V_r_0,E,F,G):3+ eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,H,I,J)
     [V_r_0>=F+16,V_cinfo_Se>=V_k_1,F>=0,15>=F,V_k_1+1=H,J=3,I=0,G=0,E=0,D=2,C=0,B=3] 
* CE 21: eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B) = 2+ eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se,V_k_1,V_r_0,C,V_r_0,D,V_cinfo_Se,V_k_1,V_r_0,E,F,G):4+ eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,H,I,J)
     [V_r_0>=F+16,V_cinfo_Se>=V_k_1,F>=16,V_k_1+1=H,J=3,I=0,G=0,E=0,D=2,C=0,B=3] 

### Cost equations --> "Loop" of eval_encode_mcu_AC_refine_bb3_in/4 
* CEs [17] --> Loop 14 
* CEs [19,20,21] --> Loop 15 
* CEs [18] --> Loop 16 
* CEs [16] --> Loop 17 

#### Loops of eval_encode_mcu_AC_refine_bb3_in/4 
* Loop 14: eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B)->  eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1',V_r_0',B')
                  [V_cinfo_Se>=V_k_1,V_r_0+1=V_r_0',V_k_1+1=V_k_1',B'=3,B=3] 
* Loop 15: eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B)->  eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1',V_r_0',B')
                  [V_cinfo_Se>=V_k_1,V_r_0>=16,V_k_1+1=V_k_1',B'=3,V_r_0'=0,B=3] 
* Loop 16: eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B)->  eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1',V_r_0',B')
                  [V_cinfo_Se>=V_k_1,15>=V_r_0,V_k_1+1=V_k_1',B'=3,V_r_0'=0,B=3] 
* Loop 17: eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B) [V_k_1>=V_cinfo_Se+1,B=3] 

### Ranking functions of CR eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B) 
* RF of phase [14,15,16]: [V_cinfo_Se-V_k_1+1]

#### Partial ranking functions of CR eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B) 
* Partial RF of phase [14,15,16]:
  - RF of loop [14:1,15:1,16:1]:
    V_cinfo_Se-V_k_1+1
  - RF of loop [15:1]:
    V_r_0/16-15/16 depends on loops [14:1,16:1] 

Discarded unfeasible chain [[14,15,16]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B) 
* [[14,15,16],17]
* [17]


### Merging Chains  eval_encode_mcu_AC_refine_bb3_in/4 into  External patterns of execution 
* [[17]] --> 1 
* [[17,[14,15,16]]] --> 2 


### Specialization of cost equations eval_encode_mcu_AC_refine_start/3 
* CE 2 is refined into CE [22,23] 


#### Refined cost equations eval_encode_mcu_AC_refine_start/3 
* CE 22: eval_encode_mcu_AC_refine_start(V_cinfo_Ss,V_cinfo_Se,B) = 2+ eval_encode_mcu_AC_refine_bb1_in(V_cinfo_Ss,V_cinfo_Se,V_cinfo_Ss,C,V_cinfo_Se,V_cinfo_Ss,D):1+ eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_cinfo_Ss,E,F):1
     [V_cinfo_Ss>=V_cinfo_Se+1,F=3,E=0,D=0,C=4] 
* CE 23: eval_encode_mcu_AC_refine_start(V_cinfo_Ss,V_cinfo_Se,B) = 2+ eval_encode_mcu_AC_refine_bb1_in(V_cinfo_Ss,V_cinfo_Se,V_cinfo_Ss,C,V_cinfo_Se,V_cinfo_Ss,D):2+ eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_cinfo_Ss,E,F):2
     [V_cinfo_Se>=V_cinfo_Ss,F=3,E=0,D=0,C=4] 

### Cost equations --> "Loop" of eval_encode_mcu_AC_refine_start/3 
* CEs [22] --> Loop 18 
* CEs [23] --> Loop 19 

#### Loops of eval_encode_mcu_AC_refine_start/3 
* Loop 18: eval_encode_mcu_AC_refine_start(V_cinfo_Ss,V_cinfo_Se,B) [V_cinfo_Ss>=V_cinfo_Se+1] 
* Loop 19: eval_encode_mcu_AC_refine_start(V_cinfo_Ss,V_cinfo_Se,B) [V_cinfo_Se>=V_cinfo_Ss] 

### Ranking functions of CR eval_encode_mcu_AC_refine_start(V_cinfo_Ss,V_cinfo_Se,B) 

#### Partial ranking functions of CR eval_encode_mcu_AC_refine_start(V_cinfo_Ss,V_cinfo_Se,B) 


### Resulting Chains:eval_encode_mcu_AC_refine_start(V_cinfo_Ss,V_cinfo_Se,B) 
* [19]
* [18]


### Merging Chains  eval_encode_mcu_AC_refine_start/3 into  External patterns of execution 
* [[19]] --> 1 
* [[18]] --> 2 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 11 

#### Computing cost of phase [9] 

#### Simplifying cost structure of CE 12 

#### Cost of loops [9] 

 * loop 9:eval_encode_mcu_AC_refine_bb1_in(V_cinfo_Ss,V_cinfo_Se,V_k_0,B,C,D,E) -> [eval_encode_mcu_AC_refine_bb1_in(V_cinfo_Ss',V_cinfo_Se',V_k_0',B',C',D',E')] 
1
##### Pending set eval_encode_mcu_AC_refine_bb1_in(V_cinfo_Ss,V_cinfo_Se,V_k_0,B,C,D,E)
* Psum in Loop 9: [it(9)=<1]

###### Computing sum for it(9)=<1  in Loop 9 
   - Applying inductive sum strategy 
     - head Candidate: V_cinfo_Se-V_k_0+1 
     - head Candidate: V_cinfo_Se-V_k_0+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_cinfo_Se-V_k_0+1 
     - tail Candidate: V_cinfo_Se-V_k_0+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(9)=<V_cinfo_Se-V_k_0+1,it(9)=<V_cinfo_Se-V_k_0+1,it(9)=<V_cinfo_Se-V_k_0-V_cinfo_Se'+V_k_0',it(9)=<V_cinfo_Se-V_k_0-V_cinfo_Se'+V_k_0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [9] 

#### Simplifying cost structure of phase [9] 

#### Cost of phase [9]:eval_encode_mcu_AC_refine_bb1_in(V_cinfo_Ss,V_cinfo_Se,V_k_0,B,C,D,E) -> [eval_encode_mcu_AC_refine_bb1_in(V_cinfo_Ss',V_cinfo_Se',V_k_0',B',C',D',E')] 
1*it(9)+0
  Such that:it(9) =< V_cinfo_Se-V_k_0+1
it(9) =< V_cinfo_Se-V_k_0-V_cinfo_Se'+V_k_0'

#### Simplifying cost structure of chain [[9],10] 

#### Cost of chains of eval_encode_mcu_AC_refine_bb1_in(V_cinfo_Ss,V_cinfo_Se,V_k_0,B,C,D,E):
* Chain [[9],10]: 1*it(9)+0
  Such that:it(9) =< V_cinfo_Se-V_k_0+1

  with precondition: [B=4,E=0,V_cinfo_Se=C,V_cinfo_Ss=D,V_k_0>=V_cinfo_Ss,V_cinfo_Se>=V_k_0] 

* Chain [10]: 0
  with precondition: [B=4,E=0,V_cinfo_Se=C,V_cinfo_Ss=D,V_k_0>=V_cinfo_Ss,V_k_0>=V_cinfo_Se+1] 


#### Simplifying cost structure of CE 14 

#### Computing cost of phase [11] 

#### Simplifying cost structure of CE 15 

#### Cost of loops [11] 

 * loop 11:eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se,V_k_1,V_r_0,V_3,V_r_1,B,C,D,E,F,G,H) -> [eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se',V_k_1',V_r_0',V_3',V_r_1',B',C',D',E',F',G',H')] 
1
##### Pending set eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se,V_k_1,V_r_0,V_3,V_r_1,B,C,D,E,F,G,H)
* Psum in Loop 11: [it(11)=<1]

###### Computing sum for it(11)=<1  in Loop 11 
   - Applying inductive sum strategy 
     - head Candidate: V_r_1-15 
     - head Candidate: V_r_1-15 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_r_1-15 
     - tail Candidate: V_r_1-15 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(11)=<V_r_1-15,it(11)=<V_r_1-15,it(11)=<V_r_1-V_r_1',it(11)=<V_r_1-V_r_1'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [11] 

#### Simplifying cost structure of phase [11] 

#### Cost of phase [11]:eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se,V_k_1,V_r_0,V_3,V_r_1,B,C,D,E,F,G,H) -> [eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se',V_k_1',V_r_0',V_3',V_r_1',B',C',D',E',F',G',H')] 
1*it(11)+0
  Such that:it(11) =< V_r_1
it(11) =< V_r_1-V_r_1'

#### Simplifying cost structure of chain [[11],13] 

#### Simplifying cost structure of CE 13 

#### Found solution for phase  [11] in the cache 

#### Cost of phase [11]:eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se,V_k_1,V_r_0,V_3,V_r_1,B,C,D,E,F,G,H) -> [eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se',V_k_1',V_r_0',V_3',V_r_1',B',C',D',E',F',G',H')] 
1*it(11)+0
  Such that:it(11) =< V_r_1
it(11) =< V_r_1-V_r_1'

#### Simplifying cost structure of chain [[11],12] 

#### Cost of chains of eval_encode_mcu_AC_refine_bb6_in(V_cinfo_Se,V_k_1,V_r_0,V_3,V_r_1,B,C,D,E,F,G,H):
* Chain [[11],13]: 1*it(11)+0
  Such that:it(11) =< V_r_1-G

  with precondition: [V_3=0,B=2,F=0,H=0,V_cinfo_Se=C,V_k_1=D,V_r_0=E,15>=G,G>=0,V_cinfo_Se>=V_k_1,V_r_0>=V_r_1,V_r_1>=G+16] 

* Chain [[11],12]: 1*it(11)+0
  Such that:it(11) =< V_r_1-G

  with precondition: [V_3=0,B=2,F=0,H=0,V_cinfo_Se=C,V_k_1=D,V_r_0=E,G>=16,V_cinfo_Se>=V_k_1,V_r_0>=V_r_1,V_r_1>=G+16] 

* Chain [13]: 0
  with precondition: [V_3=0,B=2,F=0,H=0,V_cinfo_Se=C,V_k_1=D,V_r_0=E,V_r_1=G,15>=V_r_1,V_cinfo_Se>=V_k_1,V_r_0>=V_r_1] 

* Chain [12]: 0
  with precondition: [V_3=0,B=2,F=0,H=0,V_cinfo_Se=C,V_k_1=D,V_r_0=E,V_r_1=G,V_r_1>=16,V_cinfo_Se>=V_k_1,V_r_0>=V_r_1] 


#### Simplifying cost structure of CE 16 

#### Computing cost of phase [14,15,16] 

#### Simplifying cost structure of CE 17 

#### Simplifying cost structure of CE 19 
 * Renamed intermediate variables: 
[ (eq(20,1),it(11))>>s(1)]

#### Simplifying cost structure of CE 20 
 * Renamed intermediate variables: 
[ (eq(21,1),it(11))>>s(2)]

#### Simplifying cost structure of CE 21 
 * Joined equivalent variables [s(1),s(2)] into s(1)
 * Renamed intermediate variables: 
[ (it(15),aux(1))>>s(3), (it(15),s(1))>>s(4)]

#### Simplifying cost structure of CE 18 

#### Cost of loops [14,15,16] 

 * loop 14:eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B) -> [eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se',V_k_1',V_r_0',B')] 
1
 * loop 15:eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B) -> [eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se',V_k_1',V_r_0',B')] 
2*s(4)+2
  Such that:s(3) =< V_r_0
s(4) =< s(3)

 * loop 16:eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B) -> [eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se',V_k_1',V_r_0',B')] 
2
##### Pending set eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B)
* Psum in Loop 14: [it(14)=<1]
* Psum in Loop 15: [it(15)=<1,s(6)=<V_r_0]
* Psum in Loop 16: [it(16)=<1]

###### Computing sum for it(14)=<1  in Loop 14 
   - Applying inductive sum strategy 
     - head Candidate: V_cinfo_Se-V_k_1+1 
       - Loop 15 is collaborative
       - Loop 16 is collaborative
     - head Candidate: V_cinfo_Se-V_k_1+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_cinfo_Se-V_k_1+1 
       - Loop 15 is collaborative and bounds [it(15)] 
       - Loop 16 is collaborative and bounds [it(16)] 
     - tail Candidate: V_cinfo_Se-V_k_1+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(14)=<V_cinfo_Se-V_k_1+1,it(14)=<V_cinfo_Se-V_k_1+1,it(14)+it(15)+it(16)=<V_cinfo_Se-V_k_1-V_cinfo_Se'+V_k_1',it(14)+it(15)+it(16)=<V_cinfo_Se-V_k_1-V_cinfo_Se'+V_k_1'] 

##### Pending set eval_encode_mcu_AC_refine_0(V_cinfo_Ss,V_cinfo_Se,B)
* Psum in Loop 15: [it(15)=<1,s(6)=<V_r_0]
* Psum in Loop 16: [it(16)=<1]

###### Computing sum for it(15)=<1  in Loop 15 
   - Applying inductive sum strategy 
     - head Candidate: V_cinfo_Se-V_k_1+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_r_0/16-15/16 
       - Loop 14 adds a constant 1/16 
       - Loop 16 has a reset to  [-15/16]
     - head Candidate: V_cinfo_Se-V_k_1+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_cinfo_Se-V_k_1+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_r_0/16-15/16 
       - Loop 14 adds a constant 1/16 
       - Loop 16 has undefined behavior 
     - tail Candidate: V_cinfo_Se-V_k_1+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(15)=<aux(2)+it(14)* (1/16)+aux(3),it(14)+it(15)=<V_cinfo_Se-V_k_1+1,aux(3)=<V_r_0/16-15/16,it(14)+it(15)=<V_cinfo_Se-V_k_1+1,it(14)+it(15)+it(16)=<V_cinfo_Se-V_k_1-V_cinfo_Se'+V_k_1',it(14)+it(15)+it(16)=<V_cinfo_Se-V_k_1-V_cinfo_Se'+V_k_1'] 

##### Pending set eval_encode_mcu_AC_refine_0(V_cinfo_Ss,V_cinfo_Se,B)
* Psum in Loop 15: [s(6)=<V_r_0]
* Psum in Loop 16: [it(16)=<1,aux(2)=< -15/16]

###### Computing sum for s(6)=<V_r_0  in Loop 15 
   - Applying inductive sum strategy 
     - head Candidate: V_r_0 
       - Loop 14 adds a constant 1/1 
       - Loop 16 has a reset to  [0]
     - tail Candidate: V_r_0 
       - Loop 14 adds a constant 1/1 
       - Loop 16 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(6)=<V_r_0] 
 * Adding constraints: [s(6)=<it(15)*aux(6),s(6)=<aux(4)+it(14)+aux(5),aux(5)=<V_r_0] 

##### Pending set eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B)
* Pmax/min: [aux(6)=<V_r_0]
* Psum in Loop 16: [it(16)=<1,aux(4)=<0,aux(2)=< -15/16]

###### Computing max_min for aux(6)=<V_r_0  
   - Applying max/min strategy 
     - Loop 14  increases the expression by 1/1 
     - Loop 15 does not increase the expression
     - Loop 16  resets the expression to [0] 
 * Adding constraints:[aux(6)=<max([aux(7),aux(8)])+it(14),aux(7)=<V_r_0] 

##### Pending set eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B)
* Pmax/min: [aux(8)=<0]
* Psum in Loop 16: [it(16)=<1,aux(4)=<0,aux(2)=< -15/16]

###### Computing max_min for aux(8)=<0  
 * Adding constraints:[aux(8)=<0] 

##### Pending set eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B)
* Psum in Loop 16: [it(16)=<1,aux(4)=<0,aux(2)=< -15/16]

###### Computing sum for it(16)=<1  in Loop 16 
   - Applying inductive sum strategy 
     - head Candidate: V_cinfo_Se-V_k_1+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_cinfo_Se-V_k_1+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_cinfo_Se-V_k_1+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_cinfo_Se-V_k_1+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(14)+it(16)=<V_cinfo_Se-V_k_1+1,it(14)+it(16)=<V_cinfo_Se-V_k_1+1,it(14)+it(15)+it(16)=<V_cinfo_Se-V_k_1-V_cinfo_Se'+V_k_1',it(14)+it(15)+it(16)=<V_cinfo_Se-V_k_1-V_cinfo_Se'+V_k_1'] 

##### Pending set eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B)
* Psum in Loop 16: [aux(4)=<0,aux(2)=< -15/16]

###### Computing sum for aux(4)=<0  in Loop 16 
 * Adding constraints: [aux(4)=<0] 

##### Pending set eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B)
* Psum in Loop 16: [aux(2)=< -15/16]

###### Computing sum for aux(2)=< -15/16  in Loop 16 
   - Applying inductive sum strategy 
     - head Candidate: V_cinfo_Se-V_k_1+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_cinfo_Se-V_k_1+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_cinfo_Se-V_k_1+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_cinfo_Se-V_k_1+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [aux(2)+it(14)=<V_cinfo_Se-V_k_1+1,aux(2)+it(14)=<V_cinfo_Se-V_k_1+1,aux(2)+it(14)+it(15)=<V_cinfo_Se-V_k_1-V_cinfo_Se'+V_k_1',aux(2)+it(14)+it(15)=<V_cinfo_Se-V_k_1-V_cinfo_Se'+V_k_1'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [14,15,16] 

#### Simplifying cost structure of phase [14,15,16] 
 * Joined equivalent variables [aux(9),aux(4),aux(8)] into aux(9)
 * Joined equivalent variables [aux(12),aux(5),aux(7)] into aux(12)
 * Joined equivalent variables [it(14),it(16)] into it(14)

#### Cost of phase [14,15,16]:eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B) -> [eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se',V_k_1',V_r_0',B')] 
3*it(14)+2*it(15)+2*s(5)+0
  Such that:aux(3) =< V_r_0/16
aux(10) =< V_cinfo_Se-V_k_1+1
aux(11) =< V_cinfo_Se-V_k_1-V_cinfo_Se'+V_k_1'
aux(12) =< V_r_0
aux(2) =< aux(10)
it(14) =< aux(10)
it(15) =< aux(10)
aux(2) =< aux(11)
it(14) =< aux(11)
it(15) =< aux(11)
aux(6) =< max([aux(12),0])+it(14)
s(6) =< it(14)+aux(12)
it(15) =< aux(2)+it(14)* (1/16)+aux(3)
s(6) =< it(15)*aux(6)
s(5) =< s(6)

#### Simplifying cost structure of chain [[14,15,16],17] 
 * Joined equivalent variables [aux(13),aux(10),aux(11)] into aux(13)
 * Joined equivalent variables [aux(13),aux(2)] into aux(13)

#### Cost of chains of eval_encode_mcu_AC_refine_bb3_in(V_cinfo_Se,V_k_1,V_r_0,B):
* Chain [[14,15,16],17]: 3*it(14)+2*it(15)+2*s(5)+0
  Such that:aux(12) =< V_r_0
aux(3) =< V_r_0/16
aux(13) =< V_cinfo_Se-V_k_1+1
it(14) =< aux(13)
it(15) =< aux(13)
aux(6) =< max([aux(12),0])+it(14)
s(6) =< it(14)+aux(12)
it(15) =< aux(13)+it(14)* (1/16)+aux(3)
s(6) =< it(15)*aux(6)
s(5) =< s(6)

  with precondition: [B=3,V_cinfo_Se>=V_k_1] 

* Chain [17]: 0
  with precondition: [B=3,V_k_1>=V_cinfo_Se+1] 

 * Renamed intermediate variables: 
[ (eq(23,1),it(9))>>s(7)]
 * Renamed intermediate variables: 
[ (eq(23,2),aux(12))>>s(8), (eq(23,2),aux(3))>>s(9), (eq(23,2),aux(13))>>s(10), (eq(23,2),it(14))>>s(11), (eq(23,2),it(15))>>s(12), (eq(23,2),aux(6))>>s(13), (eq(23,2),s(6))>>s(14), (eq(23,2),s(5))>>s(15)]

#### Simplifying cost structure of CE 23 
 * Joined equivalent variables [aux(14),s(8),s(9)] into aux(14)
 * Joined equivalent variables [aux(15),s(10)] into aux(15)
 * Joined equivalent variables [s(7),s(11)] into s(7)

#### Simplifying cost structure of CE 22 

#### Cost of chains of eval_encode_mcu_AC_refine_start(V_cinfo_Ss,V_cinfo_Se,B):
* Chain [19]: 4*s(7)+2*s(12)+2*s(15)+2
  Such that:aux(15) =< -V_cinfo_Ss+V_cinfo_Se+1
s(7) =< aux(15)
s(12) =< aux(15)
s(13) =< max([0,0])+s(7)
s(14) =< s(7)
s(12) =< aux(15)+s(7)* (1/16)
s(14) =< s(12)*s(13)
s(15) =< s(14)

  with precondition: [V_cinfo_Se>=V_cinfo_Ss] 

* Chain [18]: 2
  with precondition: [V_cinfo_Ss>=V_cinfo_Se+1] 


Closed-form bounds of eval_encode_mcu_AC_refine_start(V_cinfo_Ss,V_cinfo_Se,B): 
-------------------------------------
* Chain [19] with precondition: [V_cinfo_Se>=V_cinfo_Ss] 
    - Upper bound: -8*V_cinfo_Ss+8*V_cinfo_Se+10 
    - Complexity: n 
* Chain [18] with precondition: [V_cinfo_Ss>=V_cinfo_Se+1] 
    - Upper bound: 2 
    - Complexity: constant 

### Maximum cost of eval_encode_mcu_AC_refine_start(V_cinfo_Ss,V_cinfo_Se,B): nat(-V_cinfo_Ss+V_cinfo_Se+1)*8+2 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 40 ms.
* Invariants computed in 46 ms.
   - Backward Invariants 24 ms.
   - Transitive Invariants 9 ms.
* Refinement performed in 69 ms.
* Termination proved in 11 ms.
* Upper bounds computed in 73 ms.
   - Equation cost structures 22 ms.
   - Phase cost structures 40 ms.
   - Chain cost structures 20 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 286 ms.


Warning: Ignored call to eval_PackBitsEncode_stop/1 in equation loop_cont_eval_PackBitsEncode_bb1_in/2 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_PackBitsEncode_8/7,eval_PackBitsEncode_9/7,eval_PackBitsEncode_bb2_in/6]
1. recursive : [eval_PackBitsEncode_20/7,eval_PackBitsEncode_21/7,eval_PackBitsEncode_22/7,eval_PackBitsEncode_23/7,eval_PackBitsEncode_bb5_in/7]
2. recursive : [eval_PackBitsEncode_14/4,eval_PackBitsEncode_15/4,eval_PackBitsEncode_16/4,eval_PackBitsEncode_NewDefault_in/4,eval_PackBitsEncode_bb1_in/2,loop_cont_eval_PackBitsEncode_bb2_in/5,loop_cont_eval_PackBitsEncode_bb5_in/5]
3. non_recursive : [loop_cont_eval_PackBitsEncode_bb1_in/2]
4. non_recursive : [eval_PackBitsEncode_5/2]
5. non_recursive : [eval_PackBitsEncode_4/2]
6. non_recursive : [eval_PackBitsEncode_3/2]
7. non_recursive : [eval_PackBitsEncode_2/2]
8. non_recursive : [eval_PackBitsEncode_1/2]
9. non_recursive : [eval_PackBitsEncode_0/2]
10. non_recursive : [eval_PackBitsEncode_bb0_in/2]
11. non_recursive : [eval_PackBitsEncode_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_PackBitsEncode_bb2_in/6
1. SCC is partially evaluated into eval_PackBitsEncode_bb5_in/7
2. SCC is partially evaluated into eval_PackBitsEncode_bb1_in/2
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into eval_PackBitsEncode_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_PackBitsEncode_bb2_in/6 
* CE 7 is refined into CE [14] 
* CE 9 is refined into CE [15] 
* CE 8 is refined into CE [16] 


#### Refined cost equations eval_PackBitsEncode_bb2_in/6 
* CE 14: eval_PackBitsEncode_bb2_in(A,B,C,A,B,D) = 0
     [A>=B,B>=2,B=D+1,C=2] 
* CE 15: eval_PackBitsEncode_bb2_in(A,B,C,A,D,E) = 0
     [A>=1,E=0,D=1,C=2,B=1] 
* CE 16: eval_PackBitsEncode_bb2_in(V__0,V__0_sink,B,C,D,E) = 1+ eval_PackBitsEncode_bb2_in(V__0,F,G,C,D,E)
     [V__0>=V__0_sink,V__0_sink>=2,V__0_sink=F+1,G=2,B=2] 

### Cost equations --> "Loop" of eval_PackBitsEncode_bb2_in/6 
* CEs [16] --> Loop 11 
* CEs [14] --> Loop 12 
* CEs [15] --> Loop 13 

#### Loops of eval_PackBitsEncode_bb2_in/6 
* Loop 11: eval_PackBitsEncode_bb2_in(V__0,V__0_sink,B,C,D,E)->  eval_PackBitsEncode_bb2_in(V__0,V__0_sink',B',C,D,E)
                  [V__0>=V__0_sink,V__0_sink>=2,V__0_sink=V__0_sink'+1,B'=2,B=2] 
* Loop 12: eval_PackBitsEncode_bb2_in(A,B,C,A,B,D) [A>=B,B>=2,B=D+1,C=2] 
* Loop 13: eval_PackBitsEncode_bb2_in(A,B,C,A,D,E) [A>=1,E=0,D=1,C=2,B=1] 

### Ranking functions of CR eval_PackBitsEncode_bb2_in(V__0,V__0_sink,B,C,D,E) 
* RF of phase [11]: [V__0_sink-1]

#### Partial ranking functions of CR eval_PackBitsEncode_bb2_in(V__0,V__0_sink,B,C,D,E) 
* Partial RF of phase [11]:
  - RF of loop [11:1]:
    V__0_sink-1


### Resulting Chains:eval_PackBitsEncode_bb2_in(V__0,V__0_sink,B,C,D,E) 
* [[11],13]
* [[11],12]
* [13]
* [12]


### Merging Chains  eval_PackBitsEncode_bb2_in/6 into  External patterns of execution 
* [[13]] --> 1 
* [[13,[11]]] --> 2 
* [[12]] --> 3 
* [[12,[11]]] --> 4 


### Specialization of cost equations eval_PackBitsEncode_bb5_in/7 
* CE 13 is refined into CE [17] 
* CE 12 is refined into CE [18] 
* CE 11 is refined into CE [19] 
* CE 10 is refined into CE [20] 


#### Refined cost equations eval_PackBitsEncode_bb5_in/7 
* CE 17: eval_PackBitsEncode_bb5_in(A,B,C,D,A,B,C) = 0
     [D=5] 
* CE 18: eval_PackBitsEncode_bb5_in(A,B,C,D,A,B,C) = 0
     [D=4] 
* CE 19: eval_PackBitsEncode_bb5_in(A,B,C,D,C,E,F) = 0
     [D=3] 
* CE 20: eval_PackBitsEncode_bb5_in(V__0,V__0_sink,V_1,B,C,D,E) = 1+ eval_PackBitsEncode_bb5_in(V__0,V__0_sink,V_1,B,C,D,E)
     [B>=3,5>=B] 

### Cost equations --> "Loop" of eval_PackBitsEncode_bb5_in/7 
* CEs [20] --> Loop 14 
* CEs [17] --> Loop 15 
* CEs [18] --> Loop 16 
* CEs [19] --> Loop 17 

#### Loops of eval_PackBitsEncode_bb5_in/7 
* Loop 14: eval_PackBitsEncode_bb5_in(V__0,V__0_sink,V_1,B,C,D,E)->  eval_PackBitsEncode_bb5_in(V__0,V__0_sink,V_1,B,C,D,E)
                  [B>=3,5>=B] 
* Loop 15: eval_PackBitsEncode_bb5_in(A,B,C,D,A,B,C) [D=5] 
* Loop 16: eval_PackBitsEncode_bb5_in(A,B,C,D,A,B,C) [D=4] 
* Loop 17: eval_PackBitsEncode_bb5_in(A,B,C,D,C,E,F) [D=3] 

### Ranking functions of CR eval_PackBitsEncode_bb5_in(V__0,V__0_sink,V_1,B,C,D,E) 

#### Partial ranking functions of CR eval_PackBitsEncode_bb5_in(V__0,V__0_sink,V_1,B,C,D,E) 


### Resulting Chains:eval_PackBitsEncode_bb5_in(V__0,V__0_sink,V_1,B,C,D,E) 
* [[14]]...
* [[14],17]
* [[14],16]
* [[14],15]
* [17]
* [16]
* [15]


### Merging Chains  eval_PackBitsEncode_bb5_in/7 into  External patterns of execution 
* [[17],[17,[14]]] --> 1 
* [[16],[16,[14]]] --> 2 
* [[15],[15,[14]]] --> 3 
* [[[14]]] --> 4 


### Specialization of cost equations eval_PackBitsEncode_bb1_in/2 
* CE 6 is refined into CE [21] 
* CE 3 is refined into CE [22,23,24,25,26,27,28,29] 
* CE 4 is refined into CE [30,31,32,33,34,35,36,37] 
* CE 5 is refined into CE [38,39,40,41,42,43,44,45] 


#### Refined cost equations eval_PackBitsEncode_bb1_in/2 
* CE 21: eval_PackBitsEncode_bb1_in(V__0,B) = 0
     [0>=V__0,B=6] 
* CE 22: eval_PackBitsEncode_bb1_in(V__0,B) = 3+ eval_PackBitsEncode_bb2_in(C,D,E,F,G,H):1+ eval_PackBitsEncode_bb5_in(I,J,K,L,M,N,O):1+ eval_PackBitsEncode_bb1_in(P,Q)
     [Q=6,P=0,M=0,L=3,K=0,J=1,I=1,H=0,G=1,F=1,E=2,D=1,C=1,B=6,V__0=1] 
* CE 23: eval_PackBitsEncode_bb1_in(V__0,B) = 3+ eval_PackBitsEncode_bb2_in(C,D,E,F,G,H):1+ eval_PackBitsEncode_bb5_in(I,J,K,L,M,N,O):4
     [P=6,L=3,K=0,J=1,I=1,H=0,G=1,F=1,E=2,D=1,C=1,B=6,V__0=1] 
* CE 24: eval_PackBitsEncode_bb1_in(V__0,B) = 3+ eval_PackBitsEncode_bb2_in(V__0,V__0,C,V__0,D,E):2+ eval_PackBitsEncode_bb5_in(V__0,F,G,H,I,J,K):1+ eval_PackBitsEncode_bb1_in(L,M)
     [V__0>=2,M=6,L=0,I=0,H=3,G=0,F=1,E=0,D=1,C=2,B=6] 
* CE 25: eval_PackBitsEncode_bb1_in(V__0,B) = 3+ eval_PackBitsEncode_bb2_in(V__0,V__0,C,V__0,D,E):2+ eval_PackBitsEncode_bb5_in(V__0,F,G,H,I,J,K):4
     [V__0>=2,L=6,H=3,G=0,F=1,E=0,D=1,C=2,B=6] 
* CE 26: eval_PackBitsEncode_bb1_in(V__0,B) = 3+ eval_PackBitsEncode_bb2_in(C,D,E,F,G,H):3+ eval_PackBitsEncode_bb5_in(I,J,H,K,H,L,M):1+ eval_PackBitsEncode_bb1_in(H,N)
     [H>=1,H+1=J,H+1=I,H+1=G,H+1=F,H+1=D,H+1=C,H+1=V__0,N=6,K=3,E=2,B=6] 
* CE 27: eval_PackBitsEncode_bb1_in(V__0,B) = 3+ eval_PackBitsEncode_bb2_in(V__0,V__0,C,V__0,V__0,D):3+ eval_PackBitsEncode_bb5_in(V__0,V__0,E,F,G,H,I):4
     [V__0>=2,V__0=E+1,V__0=D+1,J=6,F=3,C=2,B=6] 
* CE 28: eval_PackBitsEncode_bb1_in(V__0,B) = 3+ eval_PackBitsEncode_bb2_in(V__0,V__0,C,V__0,D,E):4+ eval_PackBitsEncode_bb5_in(V__0,F,E,G,E,H,I):1+ eval_PackBitsEncode_bb1_in(E,J)
     [V__0>=E+2,E>=1,E+1=F,E+1=D,J=6,G=3,C=2,B=6] 
* CE 29: eval_PackBitsEncode_bb1_in(V__0,B) = 3+ eval_PackBitsEncode_bb2_in(V__0,V__0,C,V__0,D,E):4+ eval_PackBitsEncode_bb5_in(V__0,F,E,G,H,I,J):4
     [V__0>=E+2,E>=1,E+1=F,E+1=D,K=6,G=3,C=2,B=6] 
* CE 30: eval_PackBitsEncode_bb1_in(V__0,B) = 3+ eval_PackBitsEncode_bb2_in(C,D,E,F,G,H):1+ eval_PackBitsEncode_bb5_in(I,J,K,L,M,N,O):3+ eval_PackBitsEncode_bb1_in(P,Q)
     [Q=6,P=0,O=0,N=1,M=1,L=5,K=0,J=1,I=1,H=0,G=1,F=1,E=2,D=1,C=1,B=6,V__0=1] 
* CE 31: eval_PackBitsEncode_bb1_in(V__0,B) = 3+ eval_PackBitsEncode_bb2_in(C,D,E,F,G,H):1+ eval_PackBitsEncode_bb5_in(I,J,K,L,M,N,O):4
     [P=6,L=5,K=0,J=1,I=1,H=0,G=1,F=1,E=2,D=1,C=1,B=6,V__0=1] 
* CE 32: eval_PackBitsEncode_bb1_in(V__0,B) = 3+ eval_PackBitsEncode_bb2_in(V__0,V__0,C,V__0,D,E):2+ eval_PackBitsEncode_bb5_in(V__0,F,G,H,V__0,I,J):3+ eval_PackBitsEncode_bb1_in(K,L)
     [V__0>=2,L=6,K=0,J=0,I=1,H=5,G=0,F=1,E=0,D=1,C=2,B=6] 
* CE 33: eval_PackBitsEncode_bb1_in(V__0,B) = 3+ eval_PackBitsEncode_bb2_in(V__0,V__0,C,V__0,D,E):2+ eval_PackBitsEncode_bb5_in(V__0,F,G,H,I,J,K):4
     [V__0>=2,L=6,H=5,G=0,F=1,E=0,D=1,C=2,B=6] 
* CE 34: eval_PackBitsEncode_bb1_in(V__0,B) = 3+ eval_PackBitsEncode_bb2_in(V__0,V__0,C,V__0,V__0,D):3+ eval_PackBitsEncode_bb5_in(V__0,V__0,E,F,V__0,V__0,G):3+ eval_PackBitsEncode_bb1_in(H,I)
     [V__0>=2,V__0=H+1,V__0=G+1,V__0=E+1,V__0=D+1,I=6,F=5,C=2,B=6] 
* CE 35: eval_PackBitsEncode_bb1_in(V__0,B) = 3+ eval_PackBitsEncode_bb2_in(V__0,V__0,C,V__0,V__0,D):3+ eval_PackBitsEncode_bb5_in(V__0,V__0,E,F,G,H,I):4
     [V__0>=2,V__0=E+1,V__0=D+1,J=6,F=5,C=2,B=6] 
* CE 36: eval_PackBitsEncode_bb1_in(V__0,B) = 3+ eval_PackBitsEncode_bb2_in(V__0,V__0,C,V__0,D,E):4+ eval_PackBitsEncode_bb5_in(V__0,D,F,G,V__0,D,H):3+ eval_PackBitsEncode_bb1_in(I,J)
     [V__0>=D+1,D>=2,D=I+1,D=H+1,D=F+1,D=E+1,J=6,G=5,C=2,B=6] 
* CE 37: eval_PackBitsEncode_bb1_in(V__0,B) = 3+ eval_PackBitsEncode_bb2_in(V__0,V__0,C,V__0,D,E):4+ eval_PackBitsEncode_bb5_in(V__0,F,E,G,H,I,J):4
     [V__0>=E+2,E>=1,E+1=F,E+1=D,K=6,G=5,C=2,B=6] 
* CE 38: eval_PackBitsEncode_bb1_in(V__0,B) = 3+ eval_PackBitsEncode_bb2_in(C,D,E,F,G,H):1+ eval_PackBitsEncode_bb5_in(I,J,K,L,M,N,O):2+ eval_PackBitsEncode_bb1_in(P,Q)
     [Q=6,P=0,O=0,N=1,M=1,L=4,K=0,J=1,I=1,H=0,G=1,F=1,E=2,D=1,C=1,B=6,V__0=1] 
* CE 39: eval_PackBitsEncode_bb1_in(V__0,B) = 3+ eval_PackBitsEncode_bb2_in(C,D,E,F,G,H):1+ eval_PackBitsEncode_bb5_in(I,J,K,L,M,N,O):4
     [P=6,L=4,K=0,J=1,I=1,H=0,G=1,F=1,E=2,D=1,C=1,B=6,V__0=1] 
* CE 40: eval_PackBitsEncode_bb1_in(V__0,B) = 3+ eval_PackBitsEncode_bb2_in(V__0,V__0,C,V__0,D,E):2+ eval_PackBitsEncode_bb5_in(V__0,F,G,H,V__0,I,J):2+ eval_PackBitsEncode_bb1_in(K,L)
     [V__0>=2,L=6,K=0,J=0,I=1,H=4,G=0,F=1,E=0,D=1,C=2,B=6] 
* CE 41: eval_PackBitsEncode_bb1_in(V__0,B) = 3+ eval_PackBitsEncode_bb2_in(V__0,V__0,C,V__0,D,E):2+ eval_PackBitsEncode_bb5_in(V__0,F,G,H,I,J,K):4
     [V__0>=2,L=6,H=4,G=0,F=1,E=0,D=1,C=2,B=6] 
* CE 42: eval_PackBitsEncode_bb1_in(V__0,B) = 3+ eval_PackBitsEncode_bb2_in(V__0,V__0,C,V__0,V__0,D):3+ eval_PackBitsEncode_bb5_in(V__0,V__0,E,F,V__0,V__0,G):2+ eval_PackBitsEncode_bb1_in(H,I)
     [V__0>=2,V__0=H+1,V__0=G+1,V__0=E+1,V__0=D+1,I=6,F=4,C=2,B=6] 
* CE 43: eval_PackBitsEncode_bb1_in(V__0,B) = 3+ eval_PackBitsEncode_bb2_in(V__0,V__0,C,V__0,V__0,D):3+ eval_PackBitsEncode_bb5_in(V__0,V__0,E,F,G,H,I):4
     [V__0>=2,V__0=E+1,V__0=D+1,J=6,F=4,C=2,B=6] 
* CE 44: eval_PackBitsEncode_bb1_in(V__0,B) = 3+ eval_PackBitsEncode_bb2_in(V__0,V__0,C,V__0,D,E):4+ eval_PackBitsEncode_bb5_in(V__0,D,F,G,V__0,D,H):2+ eval_PackBitsEncode_bb1_in(I,J)
     [V__0>=D+1,D>=2,D=I+1,D=H+1,D=F+1,D=E+1,J=6,G=4,C=2,B=6] 
* CE 45: eval_PackBitsEncode_bb1_in(V__0,B) = 3+ eval_PackBitsEncode_bb2_in(V__0,V__0,C,V__0,D,E):4+ eval_PackBitsEncode_bb5_in(V__0,F,E,G,H,I,J):4
     [V__0>=E+2,E>=1,E+1=F,E+1=D,K=6,G=4,C=2,B=6] 

### Cost equations --> "Loop" of eval_PackBitsEncode_bb1_in/2 
* CEs [25,27,29,33,35,37,41,43,45] --> Loop 18 
* CEs [23,31,39] --> Loop 19 
* CEs [28,36,44] --> Loop 20 
* CEs [26,34,42] --> Loop 21 
* CEs [24,32,40] --> Loop 22 
* CEs [22,30,38] --> Loop 23 
* CEs [21] --> Loop 24 

#### Loops of eval_PackBitsEncode_bb1_in/2 
* Loop 18: eval_PackBitsEncode_bb1_in(V__0,B) [V__0>=2,B=6] 
* Loop 19: eval_PackBitsEncode_bb1_in(V__0,B) [B=6,V__0=1] 
* Loop 20: eval_PackBitsEncode_bb1_in(V__0,B)->  eval_PackBitsEncode_bb1_in(V__0',B')
                  [V__0>=V__0'+2,V__0'>=1,B'=6,B=6] 
* Loop 21: eval_PackBitsEncode_bb1_in(V__0,B)->  eval_PackBitsEncode_bb1_in(V__0',B')
                  [V__0>=2,V__0=V__0'+1,B'=6,B=6] 
* Loop 22: eval_PackBitsEncode_bb1_in(V__0,B)->  eval_PackBitsEncode_bb1_in(V__0',B')
                  [V__0>=2,B'=6,V__0'=0,B=6] 
* Loop 23: eval_PackBitsEncode_bb1_in(V__0,B)->  eval_PackBitsEncode_bb1_in(V__0',B')
                  [B'=6,V__0'=0,B=6,V__0=1] 
* Loop 24: eval_PackBitsEncode_bb1_in(V__0,B) [0>=V__0,B=6] 

### Ranking functions of CR eval_PackBitsEncode_bb1_in(V__0,B) 
* RF of phase [20,21]: [V__0-1]

#### Partial ranking functions of CR eval_PackBitsEncode_bb1_in(V__0,B) 
* Partial RF of phase [20,21]:
  - RF of loop [20:1]:
    V__0/2-1
  - RF of loop [21:1]:
    V__0-1


### Resulting Chains:eval_PackBitsEncode_bb1_in(V__0,B) 
* [[20,21],23,24]
* [[20,21],22,24]
* [[20,21],19]...
* [[20,21],18]...
* [24]
* [23,24]
* [22,24]
* [19]...
* [18]...


### Merging Chains  eval_PackBitsEncode_bb1_in/2 into  External patterns of execution 
* [[24,23]] --> 1 
* [[24]] --> 2 
* [[24,22],[24,22,[20,21]],[24,23,[20,21]]] --> 3 
* [[19]] --> 4 
* [[18],[19,[20,21]]] --> 5 
* [[18,[20,21]]] --> 6 


### Specialization of cost equations eval_PackBitsEncode_start/2 
* CE 2 is refined into CE [46,47,48,49,50,51] 


#### Refined cost equations eval_PackBitsEncode_start/2 
* CE 46: eval_PackBitsEncode_start(V_cc,B) = 1+ eval_PackBitsEncode_bb1_in(C,D):1
     [D=6,C=1,V_cc=1] 
* CE 47: eval_PackBitsEncode_start(V_cc,B) = 1+ eval_PackBitsEncode_bb1_in(V_cc,C):2
     [0>=V_cc,C=6] 
* CE 48: eval_PackBitsEncode_start(V_cc,B) = 1+ eval_PackBitsEncode_bb1_in(V_cc,C):3
     [V_cc>=2,C=6] 
* CE 49: eval_PackBitsEncode_start(V_cc,B) = 1+ eval_PackBitsEncode_bb1_in(C,D):4
     [D=6,C=1,V_cc=1] 
* CE 50: eval_PackBitsEncode_start(V_cc,B) = 1+ eval_PackBitsEncode_bb1_in(V_cc,C):5
     [V_cc>=2,C=6] 
* CE 51: eval_PackBitsEncode_start(V_cc,B) = 1+ eval_PackBitsEncode_bb1_in(V_cc,C):6
     [V_cc>=3,C=6] 

### Cost equations --> "Loop" of eval_PackBitsEncode_start/2 
* CEs [50,51] --> Loop 25 
* CEs [49] --> Loop 26 
* CEs [48] --> Loop 27 
* CEs [47] --> Loop 28 
* CEs [46] --> Loop 29 

#### Loops of eval_PackBitsEncode_start/2 
* Loop 25: eval_PackBitsEncode_start(V_cc,B) [V_cc>=2] 
* Loop 26: eval_PackBitsEncode_start(V_cc,B) [V_cc=1] 
* Loop 27: eval_PackBitsEncode_start(V_cc,B) [V_cc>=2] 
* Loop 28: eval_PackBitsEncode_start(V_cc,B) [0>=V_cc] 
* Loop 29: eval_PackBitsEncode_start(V_cc,B) [V_cc=1] 

### Ranking functions of CR eval_PackBitsEncode_start(V_cc,B) 

#### Partial ranking functions of CR eval_PackBitsEncode_start(V_cc,B) 


### Resulting Chains:eval_PackBitsEncode_start(V_cc,B) 
* [29]
* [28]
* [27]
* [26]...
* [25]...


### Merging Chains  eval_PackBitsEncode_start/2 into  External patterns of execution 
* [[29]] --> 1 
* [[28]] --> 2 
* [[27]] --> 3 
* [[26]] --> 4 
* [[25]] --> 5 


Computing Bounds
=====================================

#### Cost of loops [11] 

 * loop 11:eval_PackBitsEncode_bb2_in(V__0,V__0_sink,B,C,D,E) -> [eval_PackBitsEncode_bb2_in(V__0',V__0_sink',B',C',D',E')] 
1
#### Cost of phase [11]:eval_PackBitsEncode_bb2_in(V__0,V__0_sink,B,C,D,E) -> [eval_PackBitsEncode_bb2_in(V__0',V__0_sink',B',C',D',E')] 
1* #(11)+0
  Such that:#(11) =< V__0_sink-1
#(11) =< V__0_sink-V__0_sink'

#### Cost of phase [11]:eval_PackBitsEncode_bb2_in(V__0,V__0_sink,B,C,D,E) -> [eval_PackBitsEncode_bb2_in(V__0',V__0_sink',B',C',D',E')] 
1* #(11)+0
  Such that:#(11) =< V__0_sink-1
#(11) =< V__0_sink-V__0_sink'

#### Cost of chains of eval_PackBitsEncode_bb2_in(V__0,V__0_sink,B,C,D,E):
* Chain [[11],13]: 1*s(1)+0
  Such that:s(1) =< V__0_sink-1

  with precondition: [B=2,D=1,E=0,V__0=C,V__0_sink>=2,V__0>=V__0_sink] 

* Chain [[11],12]: 1*s(2)+0
  Such that:s(2) =< V__0_sink-E-1

  with precondition: [B=2,V__0=C,D=E+1,D>=2,V__0>=V__0_sink,V__0_sink>=D+1] 

* Chain [13]: 0
  with precondition: [V__0=1,V__0_sink=1,B=2,C=1,D=1,E=0] 

* Chain [12]: 0
  with precondition: [B=2,V__0=V__0_sink,V__0=C,V__0=D,V__0=E+1,V__0>=2] 


#### Cost of loops [14] 

 * loop 14:eval_PackBitsEncode_bb5_in(V__0,V__0_sink,V_1,B,C,D,E) -> [eval_PackBitsEncode_bb5_in(V__0',V__0_sink',V_1',B',C',D',E')] 
1
#### Cost of phase [14]:eval_PackBitsEncode_bb5_in(V__0,V__0_sink,V_1,B,C,D,E) -> [eval_PackBitsEncode_bb5_in(V__0',V__0_sink',V_1',B',C',D',E')] 
1* #(14)+0
#### Cost of phase [14]:eval_PackBitsEncode_bb5_in(V__0,V__0_sink,V_1,B,C,D,E) -> [eval_PackBitsEncode_bb5_in(V__0',V__0_sink',V_1',B',C',D',E')] 
1* #(14)+0
#### Cost of phase [14]:eval_PackBitsEncode_bb5_in(V__0,V__0_sink,V_1,B,C,D,E) -> [eval_PackBitsEncode_bb5_in(V__0',V__0_sink',V_1',B',C',D',E')] 
1* #(14)+0
#### Cost of phase [14]:eval_PackBitsEncode_bb5_in(V__0,V__0_sink,V_1,B,C,D,E) -> [eval_PackBitsEncode_bb5_in(V__0',V__0_sink',V_1',B',C',D',E')] 
1* #(14)+0
#### Cost of chains of eval_PackBitsEncode_bb5_in(V__0,V__0_sink,V_1,B,C,D,E):
* Chain [[14]]...: 1*s(6)+0
  with precondition: [B>=3,5>=B] 

* Chain [[14],17]: 1*s(7)+0
  with precondition: [B=3,V_1=C] 

* Chain [[14],16]: 1*s(8)+0
  with precondition: [B=4,V__0=C,V__0_sink=D,V_1=E] 

* Chain [[14],15]: 1*s(9)+0
  with precondition: [B=5,V__0=C,V__0_sink=D,V_1=E] 

* Chain [17]: 0
  with precondition: [B=3,C=V_1] 

* Chain [16]: 0
  with precondition: [B=4,C=V__0,D=V__0_sink,E=V_1] 

* Chain [15]: 0
  with precondition: [B=5,C=V__0,D=V__0_sink,E=V_1] 


#### Cost of loops [20,21] 

 * loop 20:eval_PackBitsEncode_bb1_in(V__0,B) -> [eval_PackBitsEncode_bb1_in(V__0',B')] 
3*s(24)+3*s(23)+3
  Such that:s(22) =< V__0-V__0'-1
s(23) =< s(22)

 * loop 21:eval_PackBitsEncode_bb1_in(V__0,B) -> [eval_PackBitsEncode_bb1_in(V__0',B')] 
1*s(25)+0
#### Cost of phase [20,21]:eval_PackBitsEncode_bb1_in(V__0,B) -> [eval_PackBitsEncode_bb1_in(V__0',B')] 
3* #(20)+3*sm(20,23)+4*sm(20,24)+0
  Such that:#(21)+sm(20,22) =< V__0
#(20) =< V__0/2-1
#(20) =< V__0/2-V__0'/2
s(29) =< V__0-1
s(30) =< V__0-V__0'
#(20) =< s(29)
#(20) =< s(30)
sm(20,22) =< s(30)
sm(20,23) =< sm(20,22)

#### Cost of phase [20,21]:eval_PackBitsEncode_bb1_in(V__0,B) -> [eval_PackBitsEncode_bb1_in(V__0',B')] 
3* #(20)+3*sm(20,23)+4*sm(20,24)+0
  Such that:#(21)+sm(20,22) =< V__0
#(20) =< V__0/2-1
#(20) =< V__0/2-V__0'/2
s(29) =< V__0-1
s(30) =< V__0-V__0'
#(20) =< s(29)
#(20) =< s(30)
sm(20,22) =< s(30)
sm(20,23) =< sm(20,22)

#### Cost of phase [20,21]:eval_PackBitsEncode_bb1_in(V__0,B) -> [eval_PackBitsEncode_bb1_in(V__0',B')] 
3* #(20)+3*sm(20,23)+4*sm(20,24)+0
  Such that:#(21)+sm(20,22) =< V__0
#(20) =< V__0/2-1
#(20) =< V__0/2-V__0'/2
s(29) =< V__0-1
s(30) =< V__0-V__0'
#(20) =< s(29)
#(20) =< s(30)
sm(20,22) =< s(30)
sm(20,23) =< sm(20,22)

#### Cost of phase [20,21]:eval_PackBitsEncode_bb1_in(V__0,B) -> [eval_PackBitsEncode_bb1_in(V__0',B')] 
3* #(20)+3*sm(20,23)+4*sm(20,24)+0
  Such that:#(21)+sm(20,22) =< V__0
#(20) =< V__0/2-1
#(20) =< V__0/2-V__0'/2
s(29) =< V__0-1
s(30) =< V__0-V__0'
#(20) =< s(29)
#(20) =< s(30)
sm(20,22) =< s(30)
sm(20,23) =< sm(20,22)

#### Cost of chains of eval_PackBitsEncode_bb1_in(V__0,B):
* Chain [[20,21],23,24]: 5*s(64)+3*s(61)+3*s(63)+0
  Such that:s(59)+s(60) =< V__0
s(61) =< V__0/2-1
s(62) =< V__0-1
s(61) =< s(62)
s(59) =< s(62)
s(63) =< s(59)

  with precondition: [B=6,V__0>=2] 

* Chain [[20,21],22,24]: 7*s(72)+3*s(70)+3*s(69)+3*s(71)+3
  Such that:s(65)+s(66) =< V__0
s(67) =< V__0-1
s(68)+s(69) =< s(67)
s(70) =< s(68)
s(69) =< s(67)
s(65) =< s(67)
s(71) =< s(65)

  with precondition: [B=6,V__0>=3] 

* Chain [[20,21],19]...: 5*s(78)+3*s(75)+3*s(77)+0
  Such that:s(73)+s(74) =< V__0
s(75) =< V__0/2-1
s(76) =< V__0-1
s(75) =< s(76)
s(73) =< s(76)
s(77) =< s(73)

  with precondition: [B=6,V__0>=2] 

* Chain [[20,21],18]...: 13*s(88)+3*s(86)+3*s(85)+3*s(84)+3*s(87)+3
  Such that:s(79)+s(80) =< V__0
s(81) =< V__0-2
s(82) =< V__0-1
s(83)+s(84) =< s(81)
s(85) =< s(83)
s(86) =< s(82)
s(84) =< s(82)
s(84) =< s(81)
s(79) =< s(81)
s(87) =< s(79)

  with precondition: [B=6,V__0>=3] 

* Chain [24]: 0
  with precondition: [B=6,0>=V__0] 

* Chain [23,24]: 1*s(89)+0
  with precondition: [V__0=1,B=6] 

* Chain [22,24]: 3*s(92)+3*s(91)+3
  Such that:s(90) =< V__0-1
s(91) =< s(90)

  with precondition: [B=6,V__0>=2] 

* Chain [19]...: 1*s(93)+0
  with precondition: [V__0=1,B=6] 

* Chain [18]...: 3*s(97)+9*s(98)+3*s(96)+3
  Such that:s(94) =< V__0-2
s(95) =< V__0-1
s(96) =< s(94)
s(97) =< s(95)

  with precondition: [B=6,V__0>=2] 


#### Cost of chains of eval_PackBitsEncode_start(V_cc,B):
* Chain [29]: 1*s(153)+1
  with precondition: [V_cc=1] 

* Chain [28]: 1
  with precondition: [0>=V_cc] 

* Chain [27]: 3*s(158)+6*s(162)+15*s(163)+3*s(161)+3*s(160)+3*s(156)+4
  Such that:s(154) =< V_cc-1
s(155) =< V_cc
s(156) =< V_cc/2-1
s(157) =< s(155)
s(158) =< s(154)
s(159)+s(160) =< s(154)
s(161) =< s(159)
s(157) =< s(154)
s(162) =< s(157)
s(156) =< s(154)

  with precondition: [V_cc>=2] 

* Chain [26]...: 1*s(164)+1
  with precondition: [V_cc=1] 

* Chain [25]...: 3*s(171)+3*s(168)+6*s(172)+3*s(173)+27*s(178)+3*s(176)+3*s(175)+3*s(177)+4
  Such that:s(165) =< V_cc-2
s(166) =< V_cc-1
s(167) =< V_cc
s(168) =< V_cc/2-1
s(169) =< s(167)
s(170) =< s(167)
s(171) =< s(165)
s(172) =< s(166)
s(168) =< s(166)
s(169) =< s(166)
s(173) =< s(169)
s(174)+s(175) =< s(165)
s(176) =< s(174)
s(175) =< s(166)
s(170) =< s(165)
s(177) =< s(170)

  with precondition: [V_cc>=2] 


Closed-form bounds of eval_PackBitsEncode_start(V_cc,B): 
-------------------------------------
* Chain [29] with precondition: [V_cc=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [28] with precondition: [0>=V_cc] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [27] with precondition: [V_cc>=2] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [26]... with precondition: [V_cc=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [25]... with precondition: [V_cc>=2] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_PackBitsEncode_start(V_cc,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 31 ms.
* Invariants computed in 37 ms.
   - Backward Invariants 23 ms.
   - Transitive Invariants 5 ms.
* Refinement performed in 115 ms.
* Termination proved in 6 ms.
* Upper bounds computed in 107 ms.
   - Equation cost structures 41 ms.
   - Phase cost structures 23 ms.
   - Chain cost structures 28 ms.
   - Solving cost expressions 3 ms.
* Total analysis performed in 333 ms.


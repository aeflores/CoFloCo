Warning: Ignored call to eval_hc_compute_stop/1 in equation eval_hc_compute_bb9_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_hc_compute_7/7,eval_hc_compute_8/8,eval_hc_compute_bb2_in/6,eval_hc_compute_bb3_in/7]
1. recursive  : [eval_hc_compute_14/13,eval_hc_compute_15/14,eval_hc_compute_bb5_in/13,eval_hc_compute_bb6_in/13,eval_hc_compute_bb7_in/14]
2. recursive  : [eval_hc_compute_19/9,eval_hc_compute_20/9,eval_hc_compute_bb4_in/7,eval_hc_compute_bb8_in/8,loop_cont_eval_hc_compute_bb5_in/9]
3. recursive  : [eval_hc_compute_10/5,eval_hc_compute_11/5,eval_hc_compute_12/5,eval_hc_compute_13/5,eval_hc_compute__critedge_in/4,eval_hc_compute_bb1_in/2,loop_cont_eval_hc_compute_bb2_in/5,loop_cont_eval_hc_compute_bb4_in/3]
4. non_recursive  : [eval_hc_compute_bb9_in/1]
5. non_recursive  : [loop_cont_eval_hc_compute_bb1_in/2]
6. non_recursive  : [eval_hc_compute_4/2]
7. non_recursive  : [eval_hc_compute_3/2]
8. non_recursive  : [eval_hc_compute_2/2]
9. non_recursive  : [eval_hc_compute_1/2]
10. non_recursive  : [eval_hc_compute_0/2]
11. non_recursive  : [eval_hc_compute_bb0_in/2]
12. non_recursive  : [eval_hc_compute_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_hc_compute_bb2_in/6
1. SCC is partially evaluated into eval_hc_compute_bb5_in/13
2. SCC is partially evaluated into eval_hc_compute_bb4_in/7
3. SCC is partially evaluated into eval_hc_compute_bb1_in/2
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into eval_hc_compute_4/2
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into eval_hc_compute_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_hc_compute_bb2_in/6 
* CE 5 is refined into CE [13] 
* CE 7 is refined into CE [14] 
* CE 6 is refined into CE [15] 


#### Refined cost equations eval_hc_compute_bb2_in/6 
* CE 13: eval_hc_compute_bb2_in(A,B,C,A,B,D) = 0
     [A>=B,B>=2,B=D+1,C=3] 
* CE 14: eval_hc_compute_bb2_in(A,B,C,A,D,E) = 0
     [A>=1,E=0,D=1,C=3,B=1] 
* CE 15: eval_hc_compute_bb2_in(V_i_0,V_i_0_sink,B,C,D,E) = 1+ eval_hc_compute_bb2_in(V_i_0,F,G,C,D,E)
     [V_i_0>=V_i_0_sink,V_i_0_sink>=2,V_i_0_sink=F+1,G=3,B=3] 

### Cost equations --> "Loop" of eval_hc_compute_bb2_in/6 
* CEs [15] --> Loop 13 
* CEs [13] --> Loop 14 
* CEs [14] --> Loop 15 

#### Loops of eval_hc_compute_bb2_in/6 
* Loop 13: eval_hc_compute_bb2_in(V_i_0,V_i_0_sink,B,C,D,E)->  eval_hc_compute_bb2_in(V_i_0,V_i_0_sink',B',C,D,E)
                  [V_i_0>=V_i_0_sink,V_i_0_sink>=2,V_i_0_sink=V_i_0_sink'+1,B'=3,B=3] 
* Loop 14: eval_hc_compute_bb2_in(A,B,C,A,B,D) [A>=B,B>=2,B=D+1,C=3] 
* Loop 15: eval_hc_compute_bb2_in(A,B,C,A,D,E) [A>=1,E=0,D=1,C=3,B=1] 

### Ranking functions of CR eval_hc_compute_bb2_in(V_i_0,V_i_0_sink,B,C,D,E) 
* RF of phase [13]: [V_i_0_sink-1]

#### Partial ranking functions of CR eval_hc_compute_bb2_in(V_i_0,V_i_0_sink,B,C,D,E) 
* Partial RF of phase [13]:
  - RF of loop [13:1]:
    V_i_0_sink-1

Discarded unfeasible chain [[13]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_hc_compute_bb2_in(V_i_0,V_i_0_sink,B,C,D,E) 
* [[13],15]
* [[13],14]
* [15]
* [14]


### Merging Chains  eval_hc_compute_bb2_in/6 into  External patterns of execution 
* [[15]] --> 1 
* [[15,[13]]] --> 2 
* [[14]] --> 3 
* [[14,[13]]] --> 4 


### Specialization of cost equations eval_hc_compute_bb5_in/13 
* CE 10 is refined into CE [16] 
* CE 12 is refined into CE [17] 
* CE 11 is refined into CE [18] 


#### Refined cost equations eval_hc_compute_bb5_in/13 
* CE 16: eval_hc_compute_bb5_in(A,B,C,D,E,F,G,A,B,C,D,E,F) = 0
     [E>=F,F>=1,G=2] 
* CE 17: eval_hc_compute_bb5_in(A,B,C,D,E,F,G,A,B,C,D,E,F) = 0
     [E>=1,0>=F,G=2] 
* CE 18: eval_hc_compute_bb5_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0,V_y_0,B,C,D,E,F,G,H) = 1+ eval_hc_compute_bb5_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0,I,J,C,D,E,F,G,H)
     [V_x_0>=V_y_0,V_y_0>=1,V_y_0=I+1,J=2,B=2] 

### Cost equations --> "Loop" of eval_hc_compute_bb5_in/13 
* CEs [18] --> Loop 16 
* CEs [16] --> Loop 17 
* CEs [17] --> Loop 18 

#### Loops of eval_hc_compute_bb5_in/13 
* Loop 16: eval_hc_compute_bb5_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0,V_y_0,B,C,D,E,F,G,H)->  eval_hc_compute_bb5_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0,V_y_0',B',C,D,E,F,G,H)
                  [V_x_0>=V_y_0,V_y_0>=1,V_y_0=V_y_0'+1,B'=2,B=2] 
* Loop 17: eval_hc_compute_bb5_in(A,B,C,D,E,F,G,A,B,C,D,E,F) [E>=F,F>=1,G=2] 
* Loop 18: eval_hc_compute_bb5_in(A,B,C,D,E,F,G,A,B,C,D,E,F) [E>=1,0>=F,G=2] 

### Ranking functions of CR eval_hc_compute_bb5_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0,V_y_0,B,C,D,E,F,G,H) 
* RF of phase [16]: [V_y_0]

#### Partial ranking functions of CR eval_hc_compute_bb5_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0,V_y_0,B,C,D,E,F,G,H) 
* Partial RF of phase [16]:
  - RF of loop [16:1]:
    V_y_0

Discarded unfeasible chain [[16]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_hc_compute_bb5_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0,V_y_0,B,C,D,E,F,G,H) 
* [[16],18]
* [[16],17]
* [17]


### Merging Chains  eval_hc_compute_bb5_in/13 into  External patterns of execution 
* [[18,[16]]] --> 1 
* [[17]] --> 2 
* [[17,[16]]] --> 3 


### Specialization of cost equations eval_hc_compute_bb4_in/7 
* CE 9 is refined into CE [19] 
* CE 8 is refined into CE [20,21,22] 


#### Refined cost equations eval_hc_compute_bb4_in/7 
* CE 19: eval_hc_compute_bb4_in(A,B,C,D,E,F,C) = 0
     [0>=E,F=4] 
* CE 20: eval_hc_compute_bb4_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0,B,C) = 2+ eval_hc_compute_bb5_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0,V_x_0,D,V_i_0,V_i_0_sink,V_1,V_5,V_x_0,E):1+ eval_hc_compute_bb4_in(V_i_0,V_i_0_sink,V_1,V_5,F,G,C)
     [V_x_0>=1,V_x_0=F+1,G=4,E=0,D=2,B=4] 
* CE 21: eval_hc_compute_bb4_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0,B,C) = 2+ eval_hc_compute_bb5_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0,V_x_0,D,V_i_0,V_i_0_sink,V_1,V_5,V_x_0,V_x_0):2+ eval_hc_compute_bb4_in(V_i_0,V_i_0_sink,V_1,V_5,E,F,C)
     [V_x_0>=1,V_x_0=E+1,F=4,D=2,B=4] 
* CE 22: eval_hc_compute_bb4_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0,B,C) = 2+ eval_hc_compute_bb5_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0,V_x_0,D,V_i_0,V_i_0_sink,V_1,V_5,V_x_0,E):3+ eval_hc_compute_bb4_in(V_i_0,V_i_0_sink,V_1,V_5,F,G,C)
     [V_x_0>=E+1,E>=1,V_x_0=F+1,G=4,D=2,B=4] 

### Cost equations --> "Loop" of eval_hc_compute_bb4_in/7 
* CEs [22] --> Loop 19 
* CEs [20,21] --> Loop 20 
* CEs [19] --> Loop 21 

#### Loops of eval_hc_compute_bb4_in/7 
* Loop 19: eval_hc_compute_bb4_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0,B,C)->  eval_hc_compute_bb4_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0',B',C)
                  [V_x_0>=2,V_x_0=V_x_0'+1,B'=4,B=4] 
* Loop 20: eval_hc_compute_bb4_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0,B,C)->  eval_hc_compute_bb4_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0',B',C)
                  [V_x_0>=1,V_x_0=V_x_0'+1,B'=4,B=4] 
* Loop 21: eval_hc_compute_bb4_in(A,B,C,D,E,F,C) [0>=E,F=4] 

### Ranking functions of CR eval_hc_compute_bb4_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0,B,C) 
* RF of phase [19,20]: [V_x_0]

#### Partial ranking functions of CR eval_hc_compute_bb4_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0,B,C) 
* Partial RF of phase [19,20]:
  - RF of loop [19:1]:
    V_x_0-1
  - RF of loop [20:1]:
    V_x_0

Discarded unfeasible chain [[19,20]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_hc_compute_bb4_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0,B,C) 
* [[19,20],21]
* [21]


### Merging Chains  eval_hc_compute_bb4_in/7 into  External patterns of execution 
* [[21]] --> 1 
* [[21,[19,20]]] --> 2 


### Specialization of cost equations eval_hc_compute_bb1_in/2 
* CE 4 is refined into CE [23] 
* CE 3 is refined into CE [24,25,26,27] 


#### Refined cost equations eval_hc_compute_bb1_in/2 
* CE 23: eval_hc_compute_bb1_in(V_i_0,B) = 0
     [0>=V_i_0,B=5] 
* CE 24: eval_hc_compute_bb1_in(V_i_0,B) = 3+ eval_hc_compute_bb2_in(C,D,E,F,G,H):1+ eval_hc_compute_bb4_in(I,J,K,L,M,N,O):2+ eval_hc_compute_bb1_in(P,Q)
     [Q=5,P=0,O=0,N=4,M=1,L=1,K=0,J=1,I=1,H=0,G=1,F=1,E=3,D=1,C=1,B=5,V_i_0=1] 
* CE 25: eval_hc_compute_bb1_in(V_i_0,B) = 3+ eval_hc_compute_bb2_in(V_i_0,V_i_0,C,V_i_0,D,E):2+ eval_hc_compute_bb4_in(V_i_0,F,G,V_i_0,V_i_0,H,I):2+ eval_hc_compute_bb1_in(J,K)
     [V_i_0>=2,K=5,J=0,I=0,H=4,G=0,F=1,E=0,D=1,C=3,B=5] 
* CE 26: eval_hc_compute_bb1_in(V_i_0,B) = 3+ eval_hc_compute_bb2_in(C,D,E,F,G,H):3+ eval_hc_compute_bb4_in(I,J,H,K,L,M,H):2+ eval_hc_compute_bb1_in(H,N)
     [H>=1,H+1=J,H+1=I,H+1=G,H+1=F,H+1=D,H+1=C,H+1=V_i_0,N=5,M=4,L=1,K=1,E=3,B=5] 
* CE 27: eval_hc_compute_bb1_in(V_i_0,B) = 3+ eval_hc_compute_bb2_in(V_i_0,V_i_0,C,V_i_0,D,E):4+ eval_hc_compute_bb4_in(V_i_0,F,E,G,H,I,E):2+ eval_hc_compute_bb1_in(E,J)
     [V_i_0>=E+2,E>=1,E+H=V_i_0,E+G=V_i_0,E+1=F,E+1=D,J=5,I=4,C=3,B=5] 

### Cost equations --> "Loop" of eval_hc_compute_bb1_in/2 
* CEs [27] --> Loop 22 
* CEs [26] --> Loop 23 
* CEs [25] --> Loop 24 
* CEs [24] --> Loop 25 
* CEs [23] --> Loop 26 

#### Loops of eval_hc_compute_bb1_in/2 
* Loop 22: eval_hc_compute_bb1_in(V_i_0,B)->  eval_hc_compute_bb1_in(V_i_0',B')
                  [V_i_0>=V_i_0'+2,V_i_0'>=1,B'=5,B=5] 
* Loop 23: eval_hc_compute_bb1_in(V_i_0,B)->  eval_hc_compute_bb1_in(V_i_0',B')
                  [V_i_0>=2,V_i_0=V_i_0'+1,B'=5,B=5] 
* Loop 24: eval_hc_compute_bb1_in(V_i_0,B)->  eval_hc_compute_bb1_in(V_i_0',B')
                  [V_i_0>=2,B'=5,V_i_0'=0,B=5] 
* Loop 25: eval_hc_compute_bb1_in(V_i_0,B)->  eval_hc_compute_bb1_in(V_i_0',B')
                  [B'=5,V_i_0'=0,B=5,V_i_0=1] 
* Loop 26: eval_hc_compute_bb1_in(V_i_0,B) [0>=V_i_0,B=5] 

### Ranking functions of CR eval_hc_compute_bb1_in(V_i_0,B) 
* RF of phase [22,23]: [V_i_0-1]

#### Partial ranking functions of CR eval_hc_compute_bb1_in(V_i_0,B) 
* Partial RF of phase [22,23]:
  - RF of loop [22:1]:
    V_i_0/2-1
  - RF of loop [23:1]:
    V_i_0-1

Discarded unfeasible chain [[22,23]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_hc_compute_bb1_in(V_i_0,B) 
* [[22,23],25,26]
* [[22,23],24,26]
* [26]
* [25,26]
* [24,26]


### Merging Chains  eval_hc_compute_bb1_in/2 into  External patterns of execution 
* [[26,25]] --> 1 
* [[26]] --> 2 
* [[26,24],[26,25,[22,23]]] --> 3 
* [[26,24,[22,23]]] --> 4 


### Specialization of cost equations eval_hc_compute_4/2 
* CE 2 is refined into CE [28,29,30,31] 


#### Refined cost equations eval_hc_compute_4/2 
* CE 28: eval_hc_compute_4(V_num_values,B) = 1+ eval_hc_compute_bb1_in(C,D):1
     [D=5,C=1,V_num_values=1] 
* CE 29: eval_hc_compute_4(V_num_values,B) = 1+ eval_hc_compute_bb1_in(V_num_values,C):2
     [0>=V_num_values,C=5] 
* CE 30: eval_hc_compute_4(V_num_values,B) = 1+ eval_hc_compute_bb1_in(V_num_values,C):3
     [V_num_values>=2,C=5] 
* CE 31: eval_hc_compute_4(V_num_values,B) = 1+ eval_hc_compute_bb1_in(V_num_values,C):4
     [V_num_values>=3,C=5] 

### Cost equations --> "Loop" of eval_hc_compute_4/2 
* CEs [31] --> Loop 27 
* CEs [30] --> Loop 28 
* CEs [29] --> Loop 29 
* CEs [28] --> Loop 30 

#### Loops of eval_hc_compute_4/2 
* Loop 27: eval_hc_compute_4(V_num_values,B) [V_num_values>=3] 
* Loop 28: eval_hc_compute_4(V_num_values,B) [V_num_values>=2] 
* Loop 29: eval_hc_compute_4(V_num_values,B) [0>=V_num_values] 
* Loop 30: eval_hc_compute_4(V_num_values,B) [V_num_values=1] 

### Ranking functions of CR eval_hc_compute_4(V_num_values,B) 

#### Partial ranking functions of CR eval_hc_compute_4(V_num_values,B) 


### Resulting Chains:eval_hc_compute_4(V_num_values,B) 
* [30]
* [29]
* [28]
* [27]


### Merging Chains  eval_hc_compute_4/2 into  External patterns of execution 
* [[30]] --> 1 
* [[29]] --> 2 
* [[28]] --> 3 
* [[27]] --> 4 


### Specialization of cost equations eval_hc_compute_start/2 
* CE 1 is refined into CE [32,33,34,35] 


#### Refined cost equations eval_hc_compute_start/2 
* CE 32: eval_hc_compute_start(V_num_values,B) = 0+ eval_hc_compute_4(C,B):1
     [C=1,V_num_values=1] 
* CE 33: eval_hc_compute_start(V_num_values,B) = 0+ eval_hc_compute_4(V_num_values,B):2
     [0>=V_num_values] 
* CE 34: eval_hc_compute_start(V_num_values,B) = 0+ eval_hc_compute_4(V_num_values,B):3
     [V_num_values>=2] 
* CE 35: eval_hc_compute_start(V_num_values,B) = 0+ eval_hc_compute_4(V_num_values,B):4
     [V_num_values>=3] 

### Cost equations --> "Loop" of eval_hc_compute_start/2 
* CEs [35] --> Loop 31 
* CEs [34] --> Loop 32 
* CEs [33] --> Loop 33 
* CEs [32] --> Loop 34 

#### Loops of eval_hc_compute_start/2 
* Loop 31: eval_hc_compute_start(V_num_values,B) [V_num_values>=3] 
* Loop 32: eval_hc_compute_start(V_num_values,B) [V_num_values>=2] 
* Loop 33: eval_hc_compute_start(V_num_values,B) [0>=V_num_values] 
* Loop 34: eval_hc_compute_start(V_num_values,B) [V_num_values=1] 

### Ranking functions of CR eval_hc_compute_start(V_num_values,B) 

#### Partial ranking functions of CR eval_hc_compute_start(V_num_values,B) 


### Resulting Chains:eval_hc_compute_start(V_num_values,B) 
* [34]
* [33]
* [32]
* [31]


### Merging Chains  eval_hc_compute_start/2 into  External patterns of execution 
* [[34]] --> 1 
* [[33]] --> 2 
* [[32]] --> 3 
* [[31]] --> 4 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 14 

#### Computing cost of phase [13] 

#### Simplifying cost structure of CE 15 

#### Cost of loops [13] 

 * loop 13:eval_hc_compute_bb2_in(V_i_0,V_i_0_sink,B,C,D,E) -> [eval_hc_compute_bb2_in(V_i_0',V_i_0_sink',B',C',D',E')] 
1
##### Pending set eval_hc_compute_bb2_in(V_i_0,V_i_0_sink,B,C,D,E)
* Psum in Loop 13: [it(13)=<1]

###### Computing sum for it(13)=<1  in Loop 13 
   - Applying inductive sum strategy 
     - head Candidate: V_i_0_sink-1 
     - head Candidate: V_i_0_sink-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_i_0_sink-1 
     - tail Candidate: V_i_0_sink-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(13)=<V_i_0_sink-1,it(13)=<V_i_0_sink-1,it(13)=<V_i_0_sink-V_i_0_sink',it(13)=<V_i_0_sink-V_i_0_sink'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [13] 

#### Simplifying cost structure of phase [13] 

#### Cost of phase [13]:eval_hc_compute_bb2_in(V_i_0,V_i_0_sink,B,C,D,E) -> [eval_hc_compute_bb2_in(V_i_0',V_i_0_sink',B',C',D',E')] 
1*it(13)+0
  Such that:it(13) =< V_i_0_sink
it(13) =< V_i_0_sink-V_i_0_sink'

#### Simplifying cost structure of chain [[13],15] 

#### Simplifying cost structure of CE 13 

#### Found solution for phase  [13] in the cache 

#### Cost of phase [13]:eval_hc_compute_bb2_in(V_i_0,V_i_0_sink,B,C,D,E) -> [eval_hc_compute_bb2_in(V_i_0',V_i_0_sink',B',C',D',E')] 
1*it(13)+0
  Such that:it(13) =< V_i_0_sink
it(13) =< V_i_0_sink-V_i_0_sink'

#### Simplifying cost structure of chain [[13],14] 

#### Cost of chains of eval_hc_compute_bb2_in(V_i_0,V_i_0_sink,B,C,D,E):
* Chain [[13],15]: 1*it(13)+0
  Such that:it(13) =< V_i_0_sink

  with precondition: [B=3,D=1,E=0,V_i_0=C,V_i_0_sink>=2,V_i_0>=V_i_0_sink] 

* Chain [[13],14]: 1*it(13)+0
  Such that:it(13) =< V_i_0_sink-E

  with precondition: [B=3,V_i_0=C,D=E+1,D>=2,V_i_0>=V_i_0_sink,V_i_0_sink>=D+1] 

* Chain [15]: 0
  with precondition: [V_i_0_sink=1,B=3,D=1,E=0,V_i_0=C,V_i_0>=1] 

* Chain [14]: 0
  with precondition: [B=3,V_i_0=C,V_i_0_sink=D,V_i_0_sink=E+1,V_i_0_sink>=2,V_i_0>=V_i_0_sink] 


#### Simplifying cost structure of CE 17 

#### Computing cost of phase [16] 

#### Simplifying cost structure of CE 18 

#### Cost of loops [16] 

 * loop 16:eval_hc_compute_bb5_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0,V_y_0,B,C,D,E,F,G,H) -> [eval_hc_compute_bb5_in(V_i_0',V_i_0_sink',V_1',V_5',V_x_0',V_y_0',B',C',D',E',F',G',H')] 
1
##### Pending set eval_hc_compute_bb5_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0,V_y_0,B,C,D,E,F,G,H)
* Psum in Loop 16: [it(16)=<1]

###### Computing sum for it(16)=<1  in Loop 16 
   - Applying inductive sum strategy 
     - head Candidate: V_y_0 
     - head Candidate: V_y_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_y_0 
     - tail Candidate: V_y_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(16)=<V_y_0,it(16)=<V_y_0,it(16)=<V_y_0-V_y_0',it(16)=<V_y_0-V_y_0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [16] 

#### Simplifying cost structure of phase [16] 

#### Cost of phase [16]:eval_hc_compute_bb5_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0,V_y_0,B,C,D,E,F,G,H) -> [eval_hc_compute_bb5_in(V_i_0',V_i_0_sink',V_1',V_5',V_x_0',V_y_0',B',C',D',E',F',G',H')] 
1*it(16)+0
  Such that:it(16) =< V_y_0
it(16) =< V_y_0-V_y_0'

#### Simplifying cost structure of chain [[16],18] 

#### Simplifying cost structure of CE 16 

#### Found solution for phase  [16] in the cache 

#### Cost of phase [16]:eval_hc_compute_bb5_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0,V_y_0,B,C,D,E,F,G,H) -> [eval_hc_compute_bb5_in(V_i_0',V_i_0_sink',V_1',V_5',V_x_0',V_y_0',B',C',D',E',F',G',H')] 
1*it(16)+0
  Such that:it(16) =< V_y_0
it(16) =< V_y_0-V_y_0'

#### Simplifying cost structure of chain [[16],17] 

#### Cost of chains of eval_hc_compute_bb5_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0,V_y_0,B,C,D,E,F,G,H):
* Chain [[16],18]: 1*it(16)+0
  Such that:it(16) =< V_y_0

  with precondition: [B=2,H=0,V_i_0=C,V_i_0_sink=D,V_1=E,V_5=F,V_x_0=G,V_y_0>=1,V_x_0>=V_y_0] 

* Chain [[16],17]: 1*it(16)+0
  Such that:it(16) =< V_y_0-H

  with precondition: [B=2,V_i_0=C,V_i_0_sink=D,V_1=E,V_5=F,V_x_0=G,H>=1,V_x_0>=V_y_0,V_y_0>=H+1] 

* Chain [17]: 0
  with precondition: [B=2,C=V_i_0,D=V_i_0_sink,E=V_1,F=V_5,V_x_0=G,V_y_0=H,V_y_0>=1,V_x_0>=V_y_0] 


#### Simplifying cost structure of CE 19 

#### Computing cost of phase [19,20] 
 * Renamed intermediate variables: 
[(eq(22,1),it(16))>>s(1)]

#### Simplifying cost structure of CE 22 
 * Renamed intermediate variables: 
[(it(19),s(1))>>s(2)]
 * Renamed intermediate variables: 
[(eq(20,1),it(16))>>s(3)]

#### Simplifying cost structure of CE 20 

#### Simplifying cost structure of CE 21 
 * Renamed intermediate variables: 
[(it(20),s(3))>>s(4)]

#### Cost of loops [19,20] 

 * loop 19:eval_hc_compute_bb4_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0,B,C) -> [eval_hc_compute_bb4_in(V_i_0',V_i_0_sink',V_1',V_5',V_x_0',B',C')] 
1*s(2)+2
  Such that:s(2) =< V_x_0'

 * loop 20:eval_hc_compute_bb4_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0,B,C) -> [eval_hc_compute_bb4_in(V_i_0',V_i_0_sink',V_1',V_5',V_x_0',B',C')] 
1*s(4)+2
  Such that:s(4) =< V_x_0'+1

##### Pending set eval_hc_compute_bb4_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0,B,C)
* Psum in Loop 19: [it(19)=<1,s(5)=<V_x_0']
* Psum in Loop 20: [it(20)=<1,s(6)=<V_x_0'+1]

###### Computing sum for it(19)=<1  in Loop 19 
   - Applying inductive sum strategy 
     - head Candidate: V_x_0 
       - Loop 20 is collaborative and bounds [it(20)] 
     - head Candidate: V_x_0-1 
       - Loop 20 is collaborative
     - tail Candidate: V_x_0 
       - Loop 20 is collaborative and bounds [it(20)] 
     - tail Candidate: V_x_0-1 
       - Loop 20 is collaborative and bounds [it(20)] 
 * Adding constraints: [it(19)+it(20)=<V_x_0,it(19)=<V_x_0-1,it(19)+it(20)=<V_x_0-V_x_0',it(19)+it(20)=<V_x_0-V_x_0'] 

##### Pending set eval_hc_compute_0(V_num_values,B)
* Psum in Loop 19: [s(5)=<V_x_0']
* Psum in Loop 20: [it(20)=<1,s(6)=<V_x_0'+1]

###### Computing sum for s(5)=<V_x_0'  in Loop 19 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(1)=<V_x_0-1,aux(1)=<V_i_0-V_1-1] 
 * Adding constraints: [s(5)=<it(19)*aux(1)] 

##### Pending set eval_hc_compute_bb4_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0,B,C)
* Pmax/min: [aux(1)=<V_i_0-V_1-1,aux(1)=<V_x_0-1]
* Psum in Loop 20: [it(20)=<1,s(6)=<V_x_0'+1]

###### Computing max_min for aux(1)=<V_i_0-V_1-1  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(1)=<V_i_0-V_1-1] 

##### Pending set eval_hc_compute_bb4_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0,B,C)
* Pmax/min: [aux(1)=<V_x_0-1]
* Psum in Loop 20: [it(20)=<1,s(6)=<V_x_0'+1]

###### Computing max_min for aux(1)=<V_x_0-1  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(1)=<V_x_0-1] 

##### Pending set eval_hc_compute_bb4_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0,B,C)
* Psum in Loop 20: [it(20)=<1,s(6)=<V_x_0'+1]

###### Computing sum for it(20)=<1  in Loop 20 
   - Applying inductive sum strategy 
     - head Candidate: V_x_0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_x_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_x_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_x_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(19)+it(20)=<V_x_0,it(19)+it(20)=<V_x_0,it(19)+it(20)=<V_x_0-V_x_0',it(19)+it(20)=<V_x_0-V_x_0'] 

##### Pending set eval_hc_compute_bb4_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0,B,C)
* Psum in Loop 20: [s(6)=<V_x_0'+1]

###### Computing sum for s(6)=<V_x_0'+1  in Loop 20 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(2)=<V_x_0,aux(2)=<V_i_0-V_1] 
 * Adding constraints: [s(6)=<it(20)*aux(2)] 

##### Pending set eval_hc_compute_bb4_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0,B,C)
* Pmax/min: [aux(2)=<V_i_0-V_1,aux(2)=<V_x_0]

###### Computing max_min for aux(2)=<V_i_0-V_1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(2)=<aux(1)+1] 

##### Pending set eval_hc_compute_bb4_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0,B,C)
* Pmax/min: [aux(2)=<V_x_0]

###### Computing max_min for aux(2)=<V_x_0  
   - Found a solution using cacheing 
 * Adding constraints:[aux(2)=<aux(1)+1] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [19,20] 

#### Simplifying cost structure of phase [19,20] 
 * Joined equivalent variables [it(19),it(20)] into it(19)

#### Cost of phase [19,20]:eval_hc_compute_bb4_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0,B,C) -> [eval_hc_compute_bb4_in(V_i_0',V_i_0_sink',V_1',V_5',V_x_0',B',C')] 
4*it(19)+1*s(5)+1*s(6)+0
  Such that:aux(1) =< V_i_0-V_1
aux(3) =< V_x_0
aux(4) =< V_x_0-V_x_0'
aux(1) =< aux(3)
it(19) =< aux(3)
it(19) =< aux(4)
aux(2) =< aux(1)+1
s(5) =< it(19)*aux(1)
s(6) =< it(19)*aux(2)

#### Simplifying cost structure of chain [[19,20],21] 
 * Joined equivalent variables [aux(5),aux(3),aux(4)] into aux(5)

#### Cost of chains of eval_hc_compute_bb4_in(V_i_0,V_i_0_sink,V_1,V_5,V_x_0,B,C):
* Chain [[19,20],21]: 4*it(19)+1*s(5)+1*s(6)+0
  Such that:aux(1) =< V_5
aux(5) =< V_x_0
aux(1) =< aux(5)
it(19) =< aux(5)
aux(2) =< aux(1)+1
s(5) =< it(19)*aux(1)
s(6) =< it(19)*aux(2)

  with precondition: [B=4,V_1=C,V_1+V_5=V_i_0,V_x_0>=1,V_i_0>=V_1+V_x_0] 

* Chain [21]: 0
  with precondition: [B=4,V_1=C,V_1+V_5=V_i_0,0>=V_x_0,V_i_0>=V_1+V_x_0] 


#### Simplifying cost structure of CE 23 
 * Renamed intermediate variables: 
[(eq(24,2),aux(1))>>s(7),(eq(24,2),aux(5))>>s(8),(eq(24,2),it(19))>>s(9),(eq(24,2),aux(2))>>s(10),(eq(24,2),s(5))>>s(11),(eq(24,2),s(6))>>s(12)]

#### Simplifying cost structure of CE 24 
 * Joined equivalent variables [aux(6),s(8)] into aux(6)
 * Joined equivalent variables [aux(6),s(7)] into aux(6)

#### Simplifying cost structure of chain [25,26] 

#### Computing cost of phase [22,23] 
 * Renamed intermediate variables: 
[(eq(27,1),it(13))>>s(13)]
 * Renamed intermediate variables: 
[(eq(27,2),aux(1))>>s(14),(eq(27,2),aux(5))>>s(15),(eq(27,2),it(19))>>s(16),(eq(27,2),aux(2))>>s(17),(eq(27,2),s(5))>>s(18),(eq(27,2),s(6))>>s(19)]

#### Simplifying cost structure of CE 27 
 * Joined equivalent variables [aux(7),s(15)] into aux(7)
 * Joined equivalent variables [aux(7),s(14)] into aux(7)
 * Joined equivalent variables [s(13),s(16)] into s(13)
 * Renamed intermediate variables: 
[(it(22),aux(7))>>s(20),(it(22),s(13))>>s(21),(it(22),s(17))>>s(22),(it(22),s(18))>>s(23),(it(22),s(19))>>s(24)]
 * Renamed intermediate variables: 
[(eq(26,2),aux(1))>>s(25),(eq(26,2),aux(5))>>s(26),(eq(26,2),it(19))>>s(27),(eq(26,2),aux(2))>>s(28),(eq(26,2),s(5))>>s(29),(eq(26,2),s(6))>>s(30)]

#### Simplifying cost structure of CE 26 
 * Joined equivalent variables [aux(8),s(26)] into aux(8)
 * Joined equivalent variables [aux(8),s(25)] into aux(8)
 * Renamed intermediate variables: 
[(it(23),aux(8))>>s(31),(it(23),s(27))>>s(32),(it(23),s(28))>>s(33),(it(23),s(29))>>s(34),(it(23),s(30))>>s(35)]

#### Cost of loops [22,23] 

 * loop 22:eval_hc_compute_bb1_in(V_i_0,B) -> [eval_hc_compute_bb1_in(V_i_0',B')] 
5*s(21)+1*s(23)+1*s(24)+3
  Such that:s(20) =< V_i_0-V_i_0'
s(21) =< s(20)
s(22) =< s(20)+1
s(23) =< s(21)*s(20)
s(24) =< s(21)*s(22)

 * loop 23:eval_hc_compute_bb1_in(V_i_0,B) -> [eval_hc_compute_bb1_in(V_i_0',B')] 
4*s(32)+1*s(34)+1*s(35)+3
  Such that:s(31) =< 1
s(32) =< s(31)
s(33) =< s(31)+1
s(34) =< s(32)*s(31)
s(35) =< s(32)*s(33)

##### Pending set eval_hc_compute_bb1_in(V_i_0,B)
* Pmax/min: [s(31)=<1,s(20)=<V_i_0-1]
* Psum in Loop 22: [it(22)=<1,s(39)=<V_i_0-V_i_0']
* Psum in Loop 23: [it(23)=<1,s(43)=<1]

###### Computing max_min for s(31)=<1  
 * Adding constraints:[s(31)=<1] 

##### Pending set eval_hc_compute_bb1_in(V_i_0,B)
* Pmax/min: [s(20)=<V_i_0-1]
* Psum in Loop 22: [it(22)=<1,s(39)=<V_i_0-V_i_0']
* Psum in Loop 23: [it(23)=<1,s(43)=<1]

###### Computing max_min for s(20)=<V_i_0-1  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(20)=<V_i_0-1] 

##### Pending set eval_hc_compute_bb1_in(V_i_0,B)
* Psum in Loop 22: [it(22)=<1,s(39)=<V_i_0-V_i_0']
* Psum in Loop 23: [it(23)=<1,s(43)=<1]

###### Computing sum for it(22)=<1  in Loop 22 
   - Applying inductive sum strategy 
     - head Candidate: V_i_0-1 
       - Loop 23 is collaborative and bounds [it(23)] 
     - head Candidate: V_i_0/2-1 
       - Loop 23 is collaborative
     - tail Candidate: V_i_0-1 
       - Loop 23 is collaborative and bounds [it(23)] 
     - tail Candidate: V_i_0/2-1 
       - Loop 23 is collaborative
 * Adding constraints: [it(22)+it(23)=<V_i_0-1,it(22)=<V_i_0/2-1,it(22)+it(23)=<V_i_0-V_i_0',it(22)=<V_i_0/2-V_i_0'/2] 

##### Pending set eval_hc_compute_bb1_in(V_i_0,B)
* Psum in Loop 22: [s(39)=<V_i_0-V_i_0']
* Psum in Loop 23: [it(23)=<1,s(43)=<1]

###### Computing sum for s(39)=<V_i_0-V_i_0'  in Loop 22 
   - Applying inductive sum strategy 
     - head Candidate: V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(23)+s(39)=<V_i_0-1,it(23)+s(39)=<V_i_0-V_i_0'] 

##### Pending set eval_hc_compute_bb1_in(V_i_0,B)
* Psum in Loop 23: [it(23)=<1,s(43)=<1]

###### Computing sum for it(23)=<1  in Loop 23 
   - Applying inductive sum strategy 
     - head Candidate: V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(22)+it(23)=<V_i_0-1,it(22)+it(23)=<V_i_0-1,it(22)+it(23)=<V_i_0-V_i_0',it(22)+it(23)=<V_i_0-V_i_0'] 

##### Pending set eval_hc_compute_bb1_in(V_i_0,B)
* Psum in Loop 23: [s(43)=<1]

###### Computing sum for s(43)=<1  in Loop 23 
   - Found a solution using cacheing 
 * Adding constraints: [s(43)=<aux(9),aux(9)+it(22)=<V_i_0-1,aux(9)+it(22)=<V_i_0-1,aux(9)+it(22)=<V_i_0-V_i_0',aux(9)+it(22)=<V_i_0-V_i_0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [22,23] 

#### Simplifying cost structure of phase [22,23] 
 * Joined equivalent variables [aux(9),s(43)] into aux(9)
 * Joined equivalent variables [aux(10),s(20)] into aux(10)
 * Joined equivalent variables [aux(9),s(39)] into aux(9)
 * Joined equivalent variables [s(36),s(40)] into s(36)

#### Cost of phase [22,23]:eval_hc_compute_bb1_in(V_i_0,B) -> [eval_hc_compute_bb1_in(V_i_0',B')] 
3*it(22)+3*it(23)+9*s(36)+1*s(37)+1*s(38)+1*s(41)+1*s(42)+0
  Such that:s(31) =< 1
it(22) =< V_i_0/2
it(22) =< V_i_0/2-V_i_0'/2
aux(10) =< V_i_0
aux(11) =< V_i_0-V_i_0'
aux(9) =< aux(10)
it(22) =< aux(10)
it(23) =< aux(10)
aux(9) =< aux(11)
it(22) =< aux(11)
it(23) =< aux(11)
s(36) =< aux(9)
s(33) =< s(31)+1
s(41) =< s(36)*s(31)
s(42) =< s(36)*s(33)
s(22) =< aux(10)+1
s(37) =< s(36)*aux(10)
s(38) =< s(36)*s(22)

#### Simplifying cost structure of chain [[22,23],25,26] 
 * Joined equivalent variables [aux(12),aux(6),s(31)] into aux(12)
 * Joined equivalent variables [aux(13),aux(10),aux(11)] into aux(13)
 * Joined equivalent variables [aux(13),aux(9)] into aux(13)
 * Joined equivalent variables [s(10),s(33)] into s(10)
 * Joined equivalent variables [it(23),s(36)] into it(23)
 * Renamed intermediate variables: 
[(eq(25,1),it(13))>>s(44)]
 * Renamed intermediate variables: 
[(eq(25,2),aux(1))>>s(45),(eq(25,2),aux(5))>>s(46),(eq(25,2),it(19))>>s(47),(eq(25,2),aux(2))>>s(48),(eq(25,2),s(5))>>s(49),(eq(25,2),s(6))>>s(50)]

#### Simplifying cost structure of CE 25 
 * Joined equivalent variables [aux(14),s(46)] into aux(14)
 * Joined equivalent variables [aux(14),s(45)] into aux(14)
 * Joined equivalent variables [s(44),s(47)] into s(44)

#### Simplifying cost structure of chain [24,26] 

#### Found solution for phase  [22,23] in the cache 

#### Cost of phase [22,23]:eval_hc_compute_bb1_in(V_i_0,B) -> [eval_hc_compute_bb1_in(V_i_0',B')] 
3*it(22)+3*it(23)+9*s(36)+1*s(37)+1*s(38)+1*s(41)+1*s(42)+0
  Such that:s(31) =< 1
it(22) =< V_i_0/2
it(22) =< V_i_0/2-V_i_0'/2
aux(10) =< V_i_0
aux(11) =< V_i_0-V_i_0'
aux(9) =< aux(10)
it(22) =< aux(10)
it(23) =< aux(10)
aux(9) =< aux(11)
it(22) =< aux(11)
it(23) =< aux(11)
s(36) =< aux(9)
s(33) =< s(31)+1
s(41) =< s(36)*s(31)
s(42) =< s(36)*s(33)
s(22) =< aux(10)+1
s(37) =< s(36)*aux(10)
s(38) =< s(36)*s(22)

#### Simplifying cost structure of chain [[22,23],24,26] 
 * Joined equivalent variables [aux(15),aux(10),aux(11),aux(14)] into aux(15)
 * Joined equivalent variables [aux(15),aux(9)] into aux(15)
 * Joined equivalent variables [s(22),s(48)] into s(22)
 * Joined equivalent variables [it(23),s(44)] into it(23)
 * Joined equivalent variables [it(23),s(36)] into it(23)
 * Joined equivalent variables [s(37),s(49)] into s(37)
 * Joined equivalent variables [s(38),s(50)] into s(38)
 * Renamed intermediate variables: 
[(ch([24,26]),aux(14))>>s(51),(ch([24,26]),s(44))>>s(52),(ch([24,26]),s(48))>>s(53),(ch([24,26]),s(49))>>s(54),(ch([24,26]),s(50))>>s(55)]
 * Renamed intermediate variables: 
[(ch([[22,23],25,26]),it(22))>>s(56),(ch([[22,23],25,26]),aux(12))>>s(57),(ch([[22,23],25,26]),aux(13))>>s(58),(ch([[22,23],25,26]),s(9))>>s(59),(ch([[22,23],25,26]),s(10))>>s(60),(ch([[22,23],25,26]),s(11))>>s(61),(ch([[22,23],25,26]),s(12))>>s(62),(ch([[22,23],25,26]),it(23))>>s(63),(ch([[22,23],25,26]),s(41))>>s(64),(ch([[22,23],25,26]),s(42))>>s(65),(ch([[22,23],25,26]),s(22))>>s(66),(ch([[22,23],25,26]),s(37))>>s(67),(ch([[22,23],25,26]),s(38))>>s(68)]
 * Joined equivalent variables [aux(16),s(51),s(58)] into aux(16)
 * Joined equivalent variables [s(53),s(66)] into s(53)
 * Joined equivalent variables [s(52),s(63)] into s(52)
 * Joined equivalent variables [s(55),s(68)] into s(55)
 * Joined equivalent variables [s(54),s(67)] into s(54)

#### Cost of chains of eval_hc_compute_bb1_in(V_i_0,B):
* Chain [[22,23],25,26]: 3*it(22)+12*it(23)+4*s(9)+1*s(11)+1*s(12)+1*s(37)+1*s(38)+1*s(41)+1*s(42)+3
  Such that:it(22) =< V_i_0/2
aux(12) =< 1
aux(13) =< V_i_0
s(9) =< aux(12)
s(10) =< aux(12)+1
s(11) =< s(9)*aux(12)
s(12) =< s(9)*s(10)
it(22) =< aux(13)
it(23) =< aux(13)
s(41) =< it(23)*aux(12)
s(42) =< it(23)*s(10)
s(22) =< aux(13)+1
s(37) =< it(23)*aux(13)
s(38) =< it(23)*s(22)

  with precondition: [B=5,V_i_0>=2] 

* Chain [[22,23],24,26]: 3*it(22)+17*it(23)+2*s(37)+2*s(38)+1*s(41)+1*s(42)+3
  Such that:s(31) =< 1
it(22) =< V_i_0/2
aux(15) =< V_i_0
it(22) =< aux(15)
it(23) =< aux(15)
s(22) =< aux(15)+1
s(37) =< it(23)*aux(15)
s(38) =< it(23)*s(22)
s(33) =< s(31)+1
s(41) =< it(23)*s(31)
s(42) =< it(23)*s(33)

  with precondition: [B=5,V_i_0>=3] 

* Chain [26]: 0
  with precondition: [B=5,0>=V_i_0] 

* Chain [25,26]: 4*s(9)+1*s(11)+1*s(12)+3
  Such that:aux(6) =< 1
s(9) =< aux(6)
s(10) =< aux(6)+1
s(11) =< s(9)*aux(6)
s(12) =< s(9)*s(10)

  with precondition: [V_i_0=1,B=5] 

* Chain [24,26]: 5*s(44)+1*s(49)+1*s(50)+3
  Such that:aux(14) =< V_i_0
s(44) =< aux(14)
s(48) =< aux(14)+1
s(49) =< s(44)*aux(14)
s(50) =< s(44)*s(48)

  with precondition: [B=5,V_i_0>=2] 

 * Renamed intermediate variables: 
[(eq(28,1),aux(6))>>s(69),(eq(28,1),s(9))>>s(70),(eq(28,1),s(10))>>s(71),(eq(28,1),s(11))>>s(72),(eq(28,1),s(12))>>s(73)]

#### Simplifying cost structure of CE 28 

#### Simplifying cost structure of CE 29 
 * Renamed intermediate variables: 
[(eq(30,1),s(57))>>s(74),(eq(30,1),s(56))>>s(75),(eq(30,1),aux(16))>>s(76),(eq(30,1),s(52))>>s(77),(eq(30,1),s(53))>>s(78),(eq(30,1),s(54))>>s(79),(eq(30,1),s(55))>>s(80),(eq(30,1),s(59))>>s(81),(eq(30,1),s(60))>>s(82),(eq(30,1),s(61))>>s(83),(eq(30,1),s(62))>>s(84),(eq(30,1),s(64))>>s(85),(eq(30,1),s(65))>>s(86)]

#### Simplifying cost structure of CE 30 
 * Renamed intermediate variables: 
[(eq(31,1),s(31))>>s(87),(eq(31,1),it(22))>>s(88),(eq(31,1),aux(15))>>s(89),(eq(31,1),it(23))>>s(90),(eq(31,1),s(22))>>s(91),(eq(31,1),s(37))>>s(92),(eq(31,1),s(38))>>s(93),(eq(31,1),s(33))>>s(94),(eq(31,1),s(41))>>s(95),(eq(31,1),s(42))>>s(96)]

#### Simplifying cost structure of CE 31 

#### Cost of chains of eval_hc_compute_4(V_num_values,B):
* Chain [30]: 4*s(70)+1*s(72)+1*s(73)+4
  Such that:s(69) =< 1
s(70) =< s(69)
s(71) =< s(69)+1
s(72) =< s(70)*s(69)
s(73) =< s(70)*s(71)

  with precondition: [V_num_values=1] 

* Chain [29]: 1
  with precondition: [0>=V_num_values] 

* Chain [28]: 3*s(75)+17*s(77)+2*s(79)+2*s(80)+4*s(81)+1*s(83)+1*s(84)+1*s(85)+1*s(86)+4
  Such that:s(74) =< 1
s(76) =< V_num_values
s(75) =< V_num_values/2
s(77) =< s(76)
s(78) =< s(76)+1
s(79) =< s(77)*s(76)
s(80) =< s(77)*s(78)
s(81) =< s(74)
s(82) =< s(74)+1
s(83) =< s(81)*s(74)
s(84) =< s(81)*s(82)
s(75) =< s(76)
s(85) =< s(77)*s(74)
s(86) =< s(77)*s(82)

  with precondition: [V_num_values>=2] 

* Chain [27]: 3*s(88)+17*s(90)+2*s(92)+2*s(93)+1*s(95)+1*s(96)+4
  Such that:s(87) =< 1
s(89) =< V_num_values
s(88) =< V_num_values/2
s(88) =< s(89)
s(90) =< s(89)
s(91) =< s(89)+1
s(92) =< s(90)*s(89)
s(93) =< s(90)*s(91)
s(94) =< s(87)+1
s(95) =< s(90)*s(87)
s(96) =< s(90)*s(94)

  with precondition: [V_num_values>=3] 

 * Renamed intermediate variables: 
[(eq(32,1),s(69))>>s(97),(eq(32,1),s(70))>>s(98),(eq(32,1),s(71))>>s(99),(eq(32,1),s(72))>>s(100),(eq(32,1),s(73))>>s(101)]

#### Simplifying cost structure of CE 32 

#### Simplifying cost structure of CE 33 
 * Renamed intermediate variables: 
[(eq(34,1),s(74))>>s(102),(eq(34,1),s(76))>>s(103),(eq(34,1),s(75))>>s(104),(eq(34,1),s(77))>>s(105),(eq(34,1),s(78))>>s(106),(eq(34,1),s(79))>>s(107),(eq(34,1),s(80))>>s(108),(eq(34,1),s(81))>>s(109),(eq(34,1),s(82))>>s(110),(eq(34,1),s(83))>>s(111),(eq(34,1),s(84))>>s(112),(eq(34,1),s(85))>>s(113),(eq(34,1),s(86))>>s(114)]

#### Simplifying cost structure of CE 34 
 * Renamed intermediate variables: 
[(eq(35,1),s(87))>>s(115),(eq(35,1),s(89))>>s(116),(eq(35,1),s(88))>>s(117),(eq(35,1),s(90))>>s(118),(eq(35,1),s(91))>>s(119),(eq(35,1),s(92))>>s(120),(eq(35,1),s(93))>>s(121),(eq(35,1),s(94))>>s(122),(eq(35,1),s(95))>>s(123),(eq(35,1),s(96))>>s(124)]

#### Simplifying cost structure of CE 35 

#### Cost of chains of eval_hc_compute_start(V_num_values,B):
* Chain [34]: 4*s(98)+1*s(100)+1*s(101)+4
  Such that:s(97) =< 1
s(98) =< s(97)
s(99) =< s(97)+1
s(100) =< s(98)*s(97)
s(101) =< s(98)*s(99)

  with precondition: [V_num_values=1] 

* Chain [33]: 1
  with precondition: [0>=V_num_values] 

* Chain [32]: 3*s(104)+17*s(105)+2*s(107)+2*s(108)+4*s(109)+1*s(111)+1*s(112)+1*s(113)+1*s(114)+4
  Such that:s(102) =< 1
s(103) =< V_num_values
s(104) =< V_num_values/2
s(105) =< s(103)
s(106) =< s(103)+1
s(107) =< s(105)*s(103)
s(108) =< s(105)*s(106)
s(109) =< s(102)
s(110) =< s(102)+1
s(111) =< s(109)*s(102)
s(112) =< s(109)*s(110)
s(104) =< s(103)
s(113) =< s(105)*s(102)
s(114) =< s(105)*s(110)

  with precondition: [V_num_values>=2] 

* Chain [31]: 3*s(117)+17*s(118)+2*s(120)+2*s(121)+1*s(123)+1*s(124)+4
  Such that:s(115) =< 1
s(116) =< V_num_values
s(117) =< V_num_values/2
s(117) =< s(116)
s(118) =< s(116)
s(119) =< s(116)+1
s(120) =< s(118)*s(116)
s(121) =< s(118)*s(119)
s(122) =< s(115)+1
s(123) =< s(118)*s(115)
s(124) =< s(118)*s(122)

  with precondition: [V_num_values>=3] 


Closed-form bounds of eval_hc_compute_start(V_num_values,B): 
-------------------------------------
* Chain [34] with precondition: [V_num_values=1] 
    - Upper bound: 11 
    - Complexity: constant 
* Chain [33] with precondition: [0>=V_num_values] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [32] with precondition: [V_num_values>=2] 
    - Upper bound: 22*V_num_values+11+4*V_num_values*V_num_values+3/2*V_num_values 
    - Complexity: n^2 
* Chain [31] with precondition: [V_num_values>=3] 
    - Upper bound: 22*V_num_values+4+4*V_num_values*V_num_values+3/2*V_num_values 
    - Complexity: n^2 

### Maximum cost of eval_hc_compute_start(V_num_values,B): nat(V_num_values)*4*nat(V_num_values)+nat(V_num_values)*22+nat(V_num_values/2)*3+11 
Asymptotic class: n^2 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 49 ms.
* Invariants computed in 59 ms.
   - Backward Invariants 32 ms.
   - Transitive Invariants 10 ms.
* Refinement performed in 80 ms.
* Termination proved in 15 ms.
* Upper bounds computed in 136 ms.
   - Equation cost structures 35 ms.
   - Phase cost structures 69 ms.
   - Chain cost structures 33 ms.
   - Solving cost expressions 2 ms.
* Total analysis performed in 393 ms.


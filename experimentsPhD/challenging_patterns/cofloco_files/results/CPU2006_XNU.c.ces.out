Warning: Ignored call to eval_xnu_stop/1 in equation eval_xnu_bb6_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_xnu_bb3_in/14,eval_xnu_bb4_in/14]
1. recursive : [eval_xnu_12/6,eval_xnu_13/7,eval_xnu_14/8,eval_xnu_15/9,eval_xnu_18/9,eval_xnu_19/10,eval_xnu_bb1_in/5,eval_xnu_bb2_in/5,eval_xnu_bb5_in/9,loop_cont_eval_xnu_bb3_in/6]
2. non_recursive : [eval_xnu_bb6_in/1]
3. non_recursive : [loop_cont_eval_xnu_bb1_in/2]
4. non_recursive : [eval_xnu_10/2]
5. non_recursive : [eval_xnu_9/2]
6. non_recursive : [eval_xnu_8/2]
7. non_recursive : [eval_xnu_7/2]
8. non_recursive : [eval_xnu_6/2]
9. non_recursive : [eval_xnu_5/2]
10. non_recursive : [eval_xnu_4/2]
11. non_recursive : [eval_xnu_3/2]
12. non_recursive : [eval_xnu_2/2]
13. non_recursive : [eval_xnu_1/2]
14. non_recursive : [eval_xnu_0/2]
15. non_recursive : [eval_xnu_bb0_in/2]
16. non_recursive : [eval_xnu_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_xnu_bb3_in/14
1. SCC is partially evaluated into eval_xnu_bb1_in/5
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is completely evaluated into other SCCs
16. SCC is partially evaluated into eval_xnu_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_xnu_bb3_in/14 
* CE 14 is refined into CE [15] 
* CE 13 is refined into CE [16] 


#### Refined cost equations eval_xnu_bb3_in/14 
* CE 15: eval_xnu_bb3_in(A,B,C,D,E,F,G,H,I,J,A,E,E,E) = 0
     [I>=G,A>=E,I>=D,E=B+1,J=2] 
* CE 16: eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0,B,C,D,E,F) = 1+ eval_xnu_bb3_in(V_len,G,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,H,I,C,D,E,F)
     [V__end_0>=V_k_0+1,V_len>=V_1,V_k_0>=V_beg_0,V_k_0+1=H,V_1=G+1,V_1=V_i_0+1,I=2,B=2] 

### Cost equations --> "Loop" of eval_xnu_bb3_in/14 
* CEs [16] --> Loop 8 
* CEs [15] --> Loop 9 

#### Loops of eval_xnu_bb3_in/14 
* Loop 8: eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0,B,C,D,E,F)->  eval_xnu_bb3_in(V_len,V_i_0',V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0',B',C,D,E,F)
                  [V__end_0>=V_k_0+1,V_len>=V_1,V_k_0>=V_beg_0,V_k_0+1=V_k_0',V_1=V_i_0'+1,V_1=V_i_0+1,B'=2,B=2] 
* Loop 9: eval_xnu_bb3_in(A,B,C,D,E,F,G,H,I,J,A,E,E,E) [I>=G,A>=E,I>=D,E=B+1,J=2] 

### Ranking functions of CR eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0,B,C,D,E,F) 
* RF of phase [8]: [V__end_0-V_k_0]

#### Partial ranking functions of CR eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0,B,C,D,E,F) 
* Partial RF of phase [8]:
  - RF of loop [8:1]:
    V__end_0-V_k_0

Discarded unfeasible chain [[8]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0,B,C,D,E,F) 
* [[8],9]
* [9]


### Merging Chains  eval_xnu_bb3_in/14 into  External patterns of execution 
* [[9]] --> 1 
* [[9,[8]]] --> 2 


### Specialization of cost equations eval_xnu_bb1_in/5 
* CE 12 is refined into CE [17] 
* CE 4 is refined into CE [18] 
* CE 5 is refined into CE [19] 
* CE 3 is refined into CE [20] 
* CE 6 is refined into CE [21,22] 
* CE 7 is refined into CE [23,24] 
* CE 8 is refined into CE [25,26] 
* CE 9 is refined into CE [27,28] 
* CE 10 is refined into CE [29,30] 
* CE 11 is refined into CE [31,32] 


#### Refined cost equations eval_xnu_bb1_in/5 
* CE 17: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 0
     [V_i_0>=V_len,B=3] 
* CE 18: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 1+ eval_xnu_bb1_in(V_len,C,V_end_0,V_beg_0,D)
     [V_len>=V_i_0+1,V_i_0+1=C,D=3,B=3] 
* CE 19: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 1+ eval_xnu_bb1_in(V_len,C,C,C,D)
     [V_len>=C,C=V_i_0+1,D=3,B=3] 
* CE 20: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 1+ eval_xnu_bb1_in(V_len,C,C,V_beg_0,D)
     [V_len>=C,C=V_i_0+1,D=3,B=3] 
* CE 21: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,D,F,V_beg_0,G,V_len,D,D,D):1+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_len>=D,V_beg_0>=D,0>=F+1,0>=E+1,D=C+1,D=V_i_0+1,H=3,G=2,B=3] 
* CE 22: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,D,F,V_beg_0,G,V_len,D,D,D):2+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_len>=D,D>=V_beg_0+1,0>=F+1,0>=E+1,D=C+1,D=V_i_0+1,H=3,G=2,B=3] 
* CE 23: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,D,F,V_beg_0,G,V_len,D,D,D):1+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_len>=D,V_beg_0>=D,E>=1,0>=F+1,D=C+1,D=V_i_0+1,H=3,G=2,B=3] 
* CE 24: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,D,F,V_beg_0,G,V_len,D,D,D):2+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_len>=D,D>=V_beg_0+1,E>=1,0>=F+1,D=C+1,D=V_i_0+1,H=3,G=2,B=3] 
* CE 25: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,V_end_0,F,V_beg_0,G,V_len,D,D,D):1+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_beg_0>=V_end_0,V_len>=D,0>=F+1,D=C+1,D=V_i_0+1,H=3,G=2,E=0,B=3] 
* CE 26: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,V_end_0,F,V_beg_0,G,V_len,D,D,D):2+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_len>=D,V_end_0>=V_beg_0+1,0>=F+1,D=C+1,D=V_i_0+1,H=3,G=2,E=0,B=3] 
* CE 27: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,D,F,V_beg_0,G,V_len,D,D,D):1+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_len>=D,V_beg_0>=D,F>=1,0>=E+1,D=C+1,D=V_i_0+1,H=3,G=2,B=3] 
* CE 28: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,D,F,V_beg_0,G,V_len,D,D,D):2+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_len>=D,D>=V_beg_0+1,F>=1,0>=E+1,D=C+1,D=V_i_0+1,H=3,G=2,B=3] 
* CE 29: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,D,F,V_beg_0,G,V_len,D,D,D):1+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_len>=D,V_beg_0>=D,F>=1,E>=1,D=C+1,D=V_i_0+1,H=3,G=2,B=3] 
* CE 30: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,D,F,V_beg_0,G,V_len,D,D,D):2+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_len>=D,D>=V_beg_0+1,F>=1,E>=1,D=C+1,D=V_i_0+1,H=3,G=2,B=3] 
* CE 31: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,V_end_0,F,V_beg_0,G,V_len,D,D,D):1+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_beg_0>=V_end_0,V_len>=D,F>=1,D=C+1,D=V_i_0+1,H=3,G=2,E=0,B=3] 
* CE 32: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,V_end_0,F,V_beg_0,G,V_len,D,D,D):2+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_len>=D,V_end_0>=V_beg_0+1,F>=1,D=C+1,D=V_i_0+1,H=3,G=2,E=0,B=3] 

### Cost equations --> "Loop" of eval_xnu_bb1_in/5 
* CEs [18] --> Loop 10 
* CEs [22,24,28,30] --> Loop 11 
* CEs [26,32] --> Loop 12 
* CEs [19,21,23,25,27,29,31] --> Loop 13 
* CEs [20] --> Loop 14 
* CEs [17] --> Loop 15 

#### Loops of eval_xnu_bb1_in/5 
* Loop 10: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,V_i_0',V_end_0,V_beg_0,B')
                  [V_len>=V_i_0+1,V_i_0+1=V_i_0',B'=3,B=3] 
* Loop 11: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,V_i_0',V_end_0',V_beg_0',B')
                  [V_i_0>=V_beg_0,V_len>=V_i_0+1,V_i_0+1=V_beg_0',V_i_0+1=V_end_0',V_i_0+1=V_i_0',B'=3,B=3] 
* Loop 12: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,V_i_0',V_end_0',V_beg_0',B')
                  [V_end_0>=V_beg_0+1,V_len>=V_i_0+1,V_i_0+1=V_beg_0',V_i_0+1=V_end_0',V_i_0+1=V_i_0',B'=3,B=3] 
* Loop 13: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,V_i_0',V_end_0',V_beg_0',B')
                  [V_len>=V_i_0+1,V_i_0+1=V_beg_0',V_i_0+1=V_end_0',V_i_0+1=V_i_0',B'=3,B=3] 
* Loop 14: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,V_i_0',V_end_0',V_beg_0,B')
                  [V_len>=V_i_0+1,V_i_0+1=V_end_0',V_i_0+1=V_i_0',B'=3,B=3] 
* Loop 15: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) [V_i_0>=V_len,B=3] 

### Ranking functions of CR eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) 
* RF of phase [10,11,12,13,14]: [V_len-V_i_0]

#### Partial ranking functions of CR eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) 
* Partial RF of phase [10,11,12,13,14]:
  - RF of loop [10:1,11:1,12:1,13:1,14:1]:
    V_len-V_i_0
  - RF of loop [11:1,12:1,13:1,14:1]:
    V_len-V_end_0
  - RF of loop [11:1,13:1]:
    V_len-V_beg_0
  - RF of loop [12:1]:
    V_end_0-V_beg_0 depends on loops [14:1] 
    V_i_0-V_beg_0 depends on loops [10:1,14:1] 
    V_len/2-V_beg_0/2-1/2

Discarded unfeasible chain [[10,11,12,13,14]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) 
* [[10,11,12,13,14],15]
* [15]


### Merging Chains  eval_xnu_bb1_in/5 into  External patterns of execution 
* [[15]] --> 1 
* [[15,[10,11,12,13,14]]] --> 2 


### Specialization of cost equations eval_xnu_start/2 
* CE 2 is refined into CE [33,34] 


#### Refined cost equations eval_xnu_start/2 
* CE 33: eval_xnu_start(V_len,B) = 1+ eval_xnu_bb1_in(V_len,C,D,E,F):1
     [0>=V_len,F=3,E=0,D=0,C=0] 
* CE 34: eval_xnu_start(V_len,B) = 1+ eval_xnu_bb1_in(V_len,C,D,E,F):2
     [V_len>=1,F=3,E=0,D=0,C=0] 

### Cost equations --> "Loop" of eval_xnu_start/2 
* CEs [34] --> Loop 16 
* CEs [33] --> Loop 17 

#### Loops of eval_xnu_start/2 
* Loop 16: eval_xnu_start(V_len,B) [V_len>=1] 
* Loop 17: eval_xnu_start(V_len,B) [0>=V_len] 

### Ranking functions of CR eval_xnu_start(V_len,B) 

#### Partial ranking functions of CR eval_xnu_start(V_len,B) 


### Resulting Chains:eval_xnu_start(V_len,B) 
* [17]
* [16]


### Merging Chains  eval_xnu_start/2 into  External patterns of execution 
* [[17]] --> 1 
* [[16]] --> 2 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 15 

#### Computing cost of phase [8] 

#### Simplifying cost structure of CE 16 

#### Cost of loops [8] 

 * loop 8:eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0,B,C,D,E,F) -> [eval_xnu_bb3_in(V_len',V_i_0',V_end_0',V_beg_0',V_1',V_2',V__end_0',V_4',V_k_0',B',C',D',E',F')] 
1
##### Pending set eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0,B,C,D,E,F)
* Psum in Loop 8: [it(8)=<1]

###### Computing sum for it(8)=<1  in Loop 8 
   - Applying inductive sum strategy 
     - head Candidate: V__end_0-V_k_0 
     - head Candidate: V__end_0-V_k_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V__end_0-V_k_0 
     - tail Candidate: V__end_0-V_k_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(8)=<V__end_0-V_k_0,it(8)=<V__end_0-V_k_0,it(8)=<V__end_0-V_k_0-V__end_0'+V_k_0',it(8)=<V__end_0-V_k_0-V__end_0'+V_k_0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [8] 

#### Simplifying cost structure of phase [8] 

#### Cost of phase [8]:eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0,B,C,D,E,F) -> [eval_xnu_bb3_in(V_len',V_i_0',V_end_0',V_beg_0',V_1',V_2',V__end_0',V_4',V_k_0',B',C',D',E',F')] 
1*it(8)+0
  Such that:it(8) =< V__end_0-V_k_0
it(8) =< V__end_0-V_k_0-V__end_0'+V_k_0'

#### Simplifying cost structure of chain [[8],9] 

#### Cost of chains of eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0,B,C,D,E,F):
* Chain [[8],9]: 1*it(8)+0
  Such that:it(8) =< V__end_0-V_k_0

  with precondition: [B=2,V_i_0+1=V_1,V_len=C,V_i_0+1=D,V_i_0+1=E,V_i_0+1=F,V_len>=V_i_0+1,V_k_0>=V_beg_0,V__end_0>=V_k_0+1] 

* Chain [9]: 0
  with precondition: [B=2,V_i_0+1=V_1,V_len=C,V_i_0+1=D,V_i_0+1=E,V_i_0+1=F,V_len>=V_i_0+1,V_k_0>=V_beg_0,V_k_0>=V__end_0] 


#### Simplifying cost structure of CE 17 

#### Computing cost of phase [10,11,12,13,14] 

#### Simplifying cost structure of CE 18 
 * Renamed intermediate variables: 
[ (eq(22,1),it(8))>>s(1)]

#### Simplifying cost structure of CE 22 
 * Renamed intermediate variables: 
[ (eq(24,1),it(8))>>s(2)]

#### Simplifying cost structure of CE 24 
 * Renamed intermediate variables: 
[ (eq(28,1),it(8))>>s(3)]

#### Simplifying cost structure of CE 28 
 * Renamed intermediate variables: 
[ (eq(30,1),it(8))>>s(4)]

#### Simplifying cost structure of CE 30 
 * Joined equivalent variables [s(1),s(2),s(3),s(4)] into s(1)
 * Renamed intermediate variables: 
[ (it(11),aux(1))>>s(5), (it(11),s(1))>>s(6)]
 * Renamed intermediate variables: 
[ (eq(26,1),it(8))>>s(7)]

#### Simplifying cost structure of CE 26 
 * Renamed intermediate variables: 
[ (eq(32,1),it(8))>>s(8)]

#### Simplifying cost structure of CE 32 
 * Joined equivalent variables [s(7),s(8)] into s(7)
 * Renamed intermediate variables: 
[ (it(12),aux(2))>>s(9), (it(12),s(7))>>s(10)]

#### Simplifying cost structure of CE 19 

#### Simplifying cost structure of CE 25 

#### Simplifying cost structure of CE 31 

#### Simplifying cost structure of CE 20 

#### Cost of loops [10,11,12,13,14] 

 * loop 10:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
1
 * loop 11:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
4*s(6)+2
  Such that:s(5) =< -V_beg_0+V_beg_0'
s(6) =< s(5)

 * loop 12:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
2*s(10)+2
  Such that:s(9) =< V_end_0-V_beg_0
s(10) =< s(9)

 * loop 13:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
2
 * loop 14:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
1
##### Pending set eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)
* Psum in Loop 10: [it(10)=<1]
* Psum in Loop 11: [it(11)=<1,s(12)=< -V_beg_0+V_beg_0']
* Psum in Loop 12: [it(12)=<1,s(14)=<V_end_0-V_beg_0]
* Psum in Loop 13: [it(13)=<1]
* Psum in Loop 14: [it(14)=<1]

###### Computing sum for it(10)=<1  in Loop 10 
   - Applying inductive sum strategy 
     - head Candidate: V_len-V_i_0 
       - Loop 11 is collaborative and bounds [it(11)] 
       - Loop 12 is collaborative and bounds [it(12)] 
       - Loop 13 is collaborative and bounds [it(13)] 
       - Loop 14 is collaborative and bounds [it(14)] 
     - head Candidate: V_len-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_len-V_i_0 
       - Loop 11 is collaborative and bounds [it(11)] 
       - Loop 12 is collaborative and bounds [it(12)] 
       - Loop 13 is collaborative and bounds [it(13)] 
       - Loop 14 is collaborative and bounds [it(14)] 
     - tail Candidate: V_len-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(10)+it(11)+it(12)+it(13)+it(14)=<V_len-V_i_0,it(10)+it(11)+it(12)+it(13)+it(14)=<V_len-V_i_0,it(10)+it(11)+it(12)+it(13)+it(14)=<V_len-V_i_0-V_len'+V_i_0',it(10)+it(11)+it(12)+it(13)+it(14)=<V_len-V_i_0-V_len'+V_i_0'] 

##### Pending set eval_xnu_0(V_len,B)
* Psum in Loop 11: [it(11)=<1,s(12)=< -V_beg_0+V_beg_0']
* Psum in Loop 12: [it(12)=<1,s(14)=<V_end_0-V_beg_0]
* Psum in Loop 13: [it(13)=<1]
* Psum in Loop 14: [it(14)=<1]

###### Computing sum for it(11)=<1  in Loop 11 
   - Applying inductive sum strategy 
     - head Candidate: V_len-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_len-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_len-V_end_0 
       - Loop 10 is collaborative
       - Loop 12 is collaborative and bounds [it(12)] 
       - Loop 13 is collaborative and bounds [it(13)] 
       - Loop 14 is collaborative and bounds [it(14)] 
     - head Candidate: V_len-V_beg_0 
       - Loop 10 is collaborative
       - Loop 12 is collaborative and bounds [it(12)] 
       - Loop 13 is collaborative and bounds [it(13)] 
       - Loop 14 is collaborative
     - tail Candidate: V_len-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_len-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_len-V_end_0 
       - Loop 10 is collaborative
       - Loop 12 is collaborative and bounds [it(12)] 
       - Loop 13 is collaborative and bounds [it(13)] 
       - Loop 14 is collaborative and bounds [it(14)] 
     - tail Candidate: V_len-V_beg_0 
       - Loop 10 is collaborative
       - Loop 12 is collaborative and bounds [it(12)] 
       - Loop 13 is collaborative and bounds [it(13)] 
       - Loop 14 is collaborative
 * Adding constraints: [it(10)+it(11)+it(12)+it(13)+it(14)=<V_len-V_i_0,it(10)+it(11)+it(12)+it(13)+it(14)=<V_len-V_i_0,it(11)+it(12)+it(13)+it(14)=<V_len-V_end_0,it(11)+it(12)+it(13)=<V_len-V_beg_0,it(10)+it(11)+it(12)+it(13)+it(14)=<V_len-V_i_0-V_len'+V_i_0',it(10)+it(11)+it(12)+it(13)+it(14)=<V_len-V_i_0-V_len'+V_i_0',it(11)+it(12)+it(13)+it(14)=<V_len-V_end_0-V_len'+V_end_0',it(11)+it(12)+it(13)=<V_len-V_beg_0-V_len'+V_beg_0'] 

##### Pending set eval_xnu_0(V_len,B)
* Psum in Loop 11: [s(12)=< -V_beg_0+V_beg_0']
* Psum in Loop 12: [it(12)=<1,s(14)=<V_end_0-V_beg_0]
* Psum in Loop 13: [it(13)=<1]
* Psum in Loop 14: [it(14)=<1]

###### Computing sum for s(12)=< -V_beg_0+V_beg_0'  in Loop 11 
   - Applying inductive sum strategy 
     - head Candidate: V_len-V_beg_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_len-V_beg_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(12)+it(13)+s(12)=<V_len-V_beg_0,it(12)+it(13)+s(12)=<V_len-V_beg_0-V_len'+V_beg_0'] 

##### Pending set eval_xnu_0(V_len,B)
* Psum in Loop 12: [it(12)=<1,s(14)=<V_end_0-V_beg_0]
* Psum in Loop 13: [it(13)=<1]
* Psum in Loop 14: [it(14)=<1]

###### Computing sum for it(12)=<1  in Loop 12 
   - Applying inductive sum strategy 
     - head Candidate: V_len-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_len-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_len-V_end_0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_i_0-V_beg_0 
       - Loop 10 adds a constant 1/1 
       - Loop 11 is collaborative
       - Loop 13 is collaborative
       - Loop 14 adds a constant 1/1 
     - head Candidate: V_end_0-V_beg_0 
       - Loop 10 is collaborative
       - Loop 11 is collaborative
       - Loop 13 is collaborative
       - Loop 14 adds an expression [V_i_0+1]
     - head Candidate: V_len/2-V_beg_0/2-1/2 
       - Loop 10 is collaborative
       - Loop 11 is collaborative
       - Loop 13 is collaborative
       - Loop 14 is collaborative
     - tail Candidate: V_len-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_len-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_len-V_end_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_i_0-V_beg_0 
       - Loop 10 adds a constant 1/1 
       - Loop 11 is collaborative
       - Loop 13 is collaborative
       - Loop 14 adds a constant 1/1 
     - tail Candidate: V_end_0-V_beg_0 
       - Loop 10 is collaborative
       - Loop 11 is collaborative
       - Loop 13 is collaborative
       - Loop 14 adds an expression [V_i_0+1]
     - tail Candidate: V_len/2-V_beg_0/2-1/2 
       - Loop 10 is collaborative
       - Loop 11 is collaborative
       - Loop 13 is collaborative
       - Loop 14 is collaborative
 * Adding constraints: [it(12)=<it(14)+it(10)+aux(3),it(12)=<aux(4)+aux(5),it(12)=<it(14)+it(10)+aux(6),it(12)=<aux(7)+aux(8),it(10)+it(11)+it(12)+it(13)+it(14)=<V_len-V_i_0,it(10)+it(11)+it(12)+it(13)+it(14)=<V_len-V_i_0,it(11)+it(12)+it(13)+it(14)=<V_len-V_end_0,aux(3)=<V_i_0-V_beg_0,aux(5)=<V_end_0-V_beg_0,it(12)=<V_len/2-V_beg_0/2-1/2,it(10)+it(11)+it(12)+it(13)+it(14)=<V_len-V_i_0-V_len'+V_i_0',it(10)+it(11)+it(12)+it(13)+it(14)=<V_len-V_i_0-V_len'+V_i_0',it(11)+it(12)+it(13)+it(14)=<V_len-V_end_0-V_len'+V_end_0',aux(6)=<V_i_0-V_beg_0-V_i_0'+V_beg_0',aux(8)=<V_end_0-V_beg_0-V_end_0'+V_beg_0',it(12)=<V_len/2-V_beg_0/2-V_len'/2+V_beg_0'/2] 

##### Pending set eval_xnu_0(V_len,B)
* Psum in Loop 12: [s(14)=<V_end_0-V_beg_0]
* Psum in Loop 13: [it(13)=<1]
* Psum in Loop 14: [it(14)=<1,aux(4)=<V_i_0+1,aux(7)=<V_i_0+1]

###### Computing sum for s(14)=<V_end_0-V_beg_0  in Loop 12 
   - Applying inductive sum strategy 
     - head Candidate: V_len-V_beg_0-1 
       - Loop 10 is collaborative
       - Loop 11 is collaborative
       - Loop 13 is collaborative and bounds [it(13)] 
       - Loop 14 is collaborative
     - tail Candidate: V_len-V_beg_0-1 
       - Loop 10 is collaborative
       - Loop 11 is collaborative
       - Loop 13 is collaborative and bounds [it(13)] 
       - Loop 14 is collaborative
 * Adding constraints: [it(13)+s(14)=<V_len-V_beg_0-1,it(13)+s(14)=<V_len-V_beg_0-V_len'+V_beg_0'] 

##### Pending set eval_xnu_0(V_len,B)
* Psum in Loop 13: [it(13)=<1]
* Psum in Loop 14: [it(14)=<1,aux(4)=<V_i_0+1,aux(7)=<V_i_0+1]

###### Computing sum for it(13)=<1  in Loop 13 
   - Applying inductive sum strategy 
     - head Candidate: V_len-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_len-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_len-V_end_0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_len-V_beg_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_len-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_len-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_len-V_end_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_len-V_beg_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(10)+it(11)+it(12)+it(13)+it(14)=<V_len-V_i_0,it(10)+it(11)+it(12)+it(13)+it(14)=<V_len-V_i_0,it(11)+it(12)+it(13)+it(14)=<V_len-V_end_0,it(11)+it(12)+it(13)=<V_len-V_beg_0,it(10)+it(11)+it(12)+it(13)+it(14)=<V_len-V_i_0-V_len'+V_i_0',it(10)+it(11)+it(12)+it(13)+it(14)=<V_len-V_i_0-V_len'+V_i_0',it(11)+it(12)+it(13)+it(14)=<V_len-V_end_0-V_len'+V_end_0',it(11)+it(12)+it(13)=<V_len-V_beg_0-V_len'+V_beg_0'] 

##### Pending set eval_xnu_0(V_len,B)
* Psum in Loop 14: [it(14)=<1,aux(4)=<V_i_0+1,aux(7)=<V_i_0+1]

###### Computing sum for it(14)=<1  in Loop 14 
   - Applying inductive sum strategy 
     - head Candidate: V_len-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_len-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_len-V_end_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_len-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_len-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_len-V_end_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(10)+it(11)+it(12)+it(13)+it(14)=<V_len-V_i_0,it(10)+it(11)+it(12)+it(13)+it(14)=<V_len-V_i_0,it(11)+it(12)+it(13)+it(14)=<V_len-V_end_0,it(10)+it(11)+it(12)+it(13)+it(14)=<V_len-V_i_0-V_len'+V_i_0',it(10)+it(11)+it(12)+it(13)+it(14)=<V_len-V_i_0-V_len'+V_i_0',it(11)+it(12)+it(13)+it(14)=<V_len-V_end_0-V_len'+V_end_0'] 

##### Pending set eval_xnu_0(V_len,B)
* Psum in Loop 14: [aux(4)=<V_i_0+1,aux(7)=<V_i_0+1]

###### Computing sum for aux(4)=<V_i_0+1  in Loop 14 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(9)=<V_i_0+1] 
 * Adding constraints: [aux(4)=<it(14)*aux(9)] 

##### Pending set eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)
* Pmax/min: [aux(9)=<V_i_0+1]
* Psum in Loop 14: [aux(7)=<V_i_0+1]

###### Computing max_min for aux(9)=<V_i_0+1  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(9)=<V_len] 

##### Pending set eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)
* Psum in Loop 14: [aux(7)=<V_i_0+1]

###### Computing sum for aux(7)=<V_i_0+1  in Loop 14 
   - Found a solution using cacheing 
 * Adding constraints: [aux(7)=<aux(10),aux(10)=<it(14)*aux(9)] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [10,11,12,13,14] 

#### Simplifying cost structure of phase [10,11,12,13,14] 
 * Joined equivalent variables [aux(10),aux(7)] into aux(10)
 * Joined equivalent variables [aux(4),aux(10)] into aux(4)
 * Joined equivalent variables [it(11),it(13)] into it(11)
 * Joined equivalent variables [s(12),s(14)] into s(12)
 * Joined equivalent variables [s(11),s(13)] into s(11)

#### Cost of phase [10,11,12,13,14]:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
1*it(10)+4*it(11)+2*it(12)+1*it(14)+6*s(11)+0
  Such that:aux(9) =< V_len
it(12) =< V_len/2-V_beg_0/2
it(12) =< V_len/2-V_beg_0/2-V_len'/2+V_beg_0'/2
aux(3) =< V_i_0-V_beg_0
aux(6) =< V_i_0-V_beg_0-V_i_0'+V_beg_0'
aux(5) =< V_end_0-V_beg_0
aux(8) =< V_end_0-V_beg_0-V_end_0'+V_beg_0'
aux(11) =< V_len-V_i_0
aux(12) =< V_len-V_i_0-V_len'+V_i_0'
aux(13) =< V_len-V_end_0
aux(14) =< V_len-V_end_0-V_len'+V_end_0'
aux(15) =< V_len-V_beg_0
aux(16) =< V_len-V_beg_0-V_len'+V_beg_0'
it(10) =< aux(11)
it(11) =< aux(11)
it(12) =< aux(11)
it(14) =< aux(11)
it(10) =< aux(12)
it(11) =< aux(12)
it(12) =< aux(12)
it(14) =< aux(12)
it(11) =< aux(13)
it(12) =< aux(13)
it(14) =< aux(13)
it(11) =< aux(14)
it(12) =< aux(14)
it(14) =< aux(14)
it(11) =< aux(15)
it(12) =< aux(15)
s(12) =< aux(15)
it(11) =< aux(16)
it(12) =< aux(16)
s(12) =< aux(16)
aux(4) =< it(14)*aux(9)
it(12) =< it(14)+it(10)+aux(6)
it(12) =< it(14)+it(10)+aux(3)
it(12) =< aux(4)+aux(5)
it(12) =< aux(4)+aux(8)
s(11) =< s(12)

#### Simplifying cost structure of chain [[10,11,12,13,14],15] 
 * Joined equivalent variables [aux(17),aux(11),aux(12)] into aux(17)
 * Joined equivalent variables [aux(18),aux(13),aux(14)] into aux(18)
 * Joined equivalent variables [aux(19),aux(15),aux(16)] into aux(19)
 * Joined equivalent variables [aux(20),aux(3),aux(6)] into aux(20)
 * Joined equivalent variables [aux(21),aux(5),aux(8)] into aux(21)
 * Joined equivalent variables [aux(19),s(12)] into aux(19)

#### Cost of chains of eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B):
* Chain [[10,11,12,13,14],15]: 1*it(10)+4*it(11)+2*it(12)+1*it(14)+6*s(11)+0
  Such that:aux(9) =< V_len
it(12) =< V_len/2-V_beg_0/2
aux(17) =< V_len-V_i_0
aux(18) =< V_len-V_end_0
aux(19) =< V_len-V_beg_0
aux(20) =< V_i_0-V_beg_0
aux(21) =< V_end_0-V_beg_0
it(10) =< aux(17)
it(11) =< aux(17)
it(12) =< aux(17)
it(14) =< aux(17)
it(11) =< aux(18)
it(12) =< aux(18)
it(14) =< aux(18)
it(11) =< aux(19)
it(12) =< aux(19)
aux(4) =< it(14)*aux(9)
it(12) =< it(14)+it(10)+aux(20)
it(12) =< aux(4)+aux(21)
s(11) =< aux(19)

  with precondition: [B=3,V_beg_0>=0,V_len>=V_i_0+1,V_i_0>=V_end_0,V_end_0>=V_beg_0] 

* Chain [15]: 0
  with precondition: [B=3,V_beg_0>=0,V_i_0>=V_len,V_i_0>=V_end_0,V_end_0>=V_beg_0] 


#### Simplifying cost structure of CE 33 
 * Renamed intermediate variables: 
[ (eq(34,1),aux(9))>>s(15), (eq(34,1),it(12))>>s(16), (eq(34,1),aux(17))>>s(17), (eq(34,1),aux(18))>>s(18), (eq(34,1),aux(19))>>s(19), (eq(34,1),aux(20))>>s(20), (eq(34,1),aux(21))>>s(21), (eq(34,1),it(10))>>s(22), (eq(34,1),it(11))>>s(23), (eq(34,1),it(14))>>s(24), (eq(34,1),aux(4))>>s(25), (eq(34,1),s(11))>>s(26)]

#### Simplifying cost structure of CE 34 
 * Joined equivalent variables [aux(22),s(20),s(21)] into aux(22)
 * Joined equivalent variables [aux(23),s(15),s(17),s(18),s(19)] into aux(23)
 * Joined equivalent variables [s(22),s(23),s(24),s(26)] into s(22)

#### Cost of chains of eval_xnu_start(V_len,B):
* Chain [17]: 1
  with precondition: [0>=V_len] 

* Chain [16]: 2*s(16)+12*s(22)+1
  Such that:s(16) =< V_len/2
aux(23) =< V_len
s(22) =< aux(23)
s(16) =< aux(23)
s(25) =< s(22)*aux(23)
s(16) =< s(22)+s(22)
s(16) =< s(25)

  with precondition: [V_len>=1] 


Closed-form bounds of eval_xnu_start(V_len,B): 
-------------------------------------
* Chain [17] with precondition: [0>=V_len] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [16] with precondition: [V_len>=1] 
    - Upper bound: 13*V_len+1 
    - Complexity: n 

### Maximum cost of eval_xnu_start(V_len,B): nat(V_len/2)*2+nat(V_len)*12+1 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 282 ms.
* Invariants computed in 146 ms.
   - Backward Invariants 52 ms.
   - Transitive Invariants 34 ms.
* Refinement performed in 354 ms.
* Termination proved in 78 ms.
* Upper bounds computed in 474 ms.
   - Equation cost structures 153 ms.
   - Phase cost structures 362 ms.
   - Chain cost structures 81 ms.
   - Solving cost expressions 2 ms.
* Total analysis performed in 1497 ms.


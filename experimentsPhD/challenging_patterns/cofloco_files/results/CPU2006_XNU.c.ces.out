Warning: Ignored call to eval_xnu_stop/1 in equation eval_xnu_bb6_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_xnu_bb3_in/14,eval_xnu_bb4_in/14]
1. recursive  : [eval_xnu_12/6,eval_xnu_13/7,eval_xnu_14/8,eval_xnu_15/9,eval_xnu_18/9,eval_xnu_19/10,eval_xnu_bb1_in/5,eval_xnu_bb2_in/5,eval_xnu_bb5_in/9,loop_cont_eval_xnu_bb3_in/6]
2. non_recursive  : [eval_xnu_bb6_in/1]
3. non_recursive  : [loop_cont_eval_xnu_bb1_in/2]
4. non_recursive  : [eval_xnu_10/2]
5. non_recursive  : [eval_xnu_9/2]
6. non_recursive  : [eval_xnu_8/2]
7. non_recursive  : [eval_xnu_7/2]
8. non_recursive  : [eval_xnu_6/2]
9. non_recursive  : [eval_xnu_5/2]
10. non_recursive  : [eval_xnu_4/2]
11. non_recursive  : [eval_xnu_3/2]
12. non_recursive  : [eval_xnu_2/2]
13. non_recursive  : [eval_xnu_1/2]
14. non_recursive  : [eval_xnu_0/2]
15. non_recursive  : [eval_xnu_bb0_in/2]
16. non_recursive  : [eval_xnu_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_xnu_bb3_in/14
1. SCC is partially evaluated into eval_xnu_bb1_in/5
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_xnu_10/2
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is completely evaluated into other SCCs
16. SCC is partially evaluated into eval_xnu_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_xnu_bb3_in/14 
* CE 14 is refined into CE [15] 
* CE 13 is refined into CE [16] 


#### Refined cost equations eval_xnu_bb3_in/14 
* CE 15: eval_xnu_bb3_in(A,B,C,D,E,F,G,H,I,J,A,E,E,E) = 0
     [I>=G,A>=E,I>=D,E=B+1,J=2] 
* CE 16: eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0,B,C,D,E,F) = 1+ eval_xnu_bb3_in(V_len,G,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,H,I,C,D,E,F)
     [V__end_0>=V_k_0+1,V_len>=V_1,V_k_0>=V_beg_0,V_k_0+1=H,V_1=G+1,V_1=V_i_0+1,I=2,B=2] 

### Cost equations --> "Loop" of eval_xnu_bb3_in/14 
* CEs [16] --> Loop 10 
* CEs [15] --> Loop 11 

#### Loops of eval_xnu_bb3_in/14 
* Loop 10: eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0,B,C,D,E,F)->  eval_xnu_bb3_in(V_len,V_i_0',V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0',B',C,D,E,F)
                  [V__end_0>=V_k_0+1,V_len>=V_1,V_k_0>=V_beg_0,V_k_0+1=V_k_0',V_1=V_i_0'+1,V_1=V_i_0+1,B'=2,B=2] 
* Loop 11: eval_xnu_bb3_in(A,B,C,D,E,F,G,H,I,J,A,E,E,E) [I>=G,A>=E,I>=D,E=B+1,J=2] 

### Ranking functions of CR eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0,B,C,D,E,F) 
* RF of phase [10]: [V__end_0-V_k_0]

#### Partial ranking functions of CR eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0,B,C,D,E,F) 
* Partial RF of phase [10]:
  - RF of loop [10:1]:
    V__end_0-V_k_0

Discarded unfeasible chain [[10]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0,B,C,D,E,F) 
* [[10],11]
* [11]


### Merging Chains  eval_xnu_bb3_in/14 into  External patterns of execution 
* [[11]] --> 1 
* [[11,[10]]] --> 2 


### Specialization of cost equations eval_xnu_bb1_in/5 
* CE 12 is refined into CE [17] 
* CE 6 is refined into CE [18,19] 
* CE 7 is refined into CE [20,21] 
* CE 8 is refined into CE [22,23] 
* CE 9 is refined into CE [24,25] 
* CE 10 is refined into CE [26,27] 
* CE 11 is refined into CE [28,29] 
* CE 4 is refined into CE [30] 
* CE 5 is refined into CE [31] 
* CE 3 is refined into CE [32] 


#### Refined cost equations eval_xnu_bb1_in/5 
* CE 17: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 0
     [V_i_0>=V_len,B=3] 
* CE 18: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,D,F,V_beg_0,G,V_len,D,D,D):1+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_len>=D,V_beg_0>=D,0>=F+1,0>=E+1,D=C+1,D=V_i_0+1,H=3,G=2,B=3] 
* CE 19: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,D,F,V_beg_0,G,V_len,D,D,D):2+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_len>=D,D>=V_beg_0+1,0>=F+1,0>=E+1,D=C+1,D=V_i_0+1,H=3,G=2,B=3] 
* CE 20: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,D,F,V_beg_0,G,V_len,D,D,D):1+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_len>=D,V_beg_0>=D,E>=1,0>=F+1,D=C+1,D=V_i_0+1,H=3,G=2,B=3] 
* CE 21: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,D,F,V_beg_0,G,V_len,D,D,D):2+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_len>=D,D>=V_beg_0+1,E>=1,0>=F+1,D=C+1,D=V_i_0+1,H=3,G=2,B=3] 
* CE 22: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,V_end_0,F,V_beg_0,G,V_len,D,D,D):1+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_beg_0>=V_end_0,V_len>=D,0>=F+1,D=C+1,D=V_i_0+1,H=3,G=2,E=0,B=3] 
* CE 23: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,V_end_0,F,V_beg_0,G,V_len,D,D,D):2+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_len>=D,V_end_0>=V_beg_0+1,0>=F+1,D=C+1,D=V_i_0+1,H=3,G=2,E=0,B=3] 
* CE 24: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,D,F,V_beg_0,G,V_len,D,D,D):1+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_len>=D,V_beg_0>=D,F>=1,0>=E+1,D=C+1,D=V_i_0+1,H=3,G=2,B=3] 
* CE 25: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,D,F,V_beg_0,G,V_len,D,D,D):2+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_len>=D,D>=V_beg_0+1,F>=1,0>=E+1,D=C+1,D=V_i_0+1,H=3,G=2,B=3] 
* CE 26: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,D,F,V_beg_0,G,V_len,D,D,D):1+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_len>=D,V_beg_0>=D,F>=1,E>=1,D=C+1,D=V_i_0+1,H=3,G=2,B=3] 
* CE 27: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,D,F,V_beg_0,G,V_len,D,D,D):2+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_len>=D,D>=V_beg_0+1,F>=1,E>=1,D=C+1,D=V_i_0+1,H=3,G=2,B=3] 
* CE 28: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,V_end_0,F,V_beg_0,G,V_len,D,D,D):1+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_beg_0>=V_end_0,V_len>=D,F>=1,D=C+1,D=V_i_0+1,H=3,G=2,E=0,B=3] 
* CE 29: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,V_end_0,F,V_beg_0,G,V_len,D,D,D):2+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_len>=D,V_end_0>=V_beg_0+1,F>=1,D=C+1,D=V_i_0+1,H=3,G=2,E=0,B=3] 
* CE 30: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 1+ eval_xnu_bb1_in(V_len,C,V_end_0,V_beg_0,D)
     [V_len>=V_i_0+1,V_i_0+1=C,D=3,B=3] 
* CE 31: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 1+ eval_xnu_bb1_in(V_len,C,C,C,D)
     [V_len>=C,C=V_i_0+1,D=3,B=3] 
* CE 32: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 1+ eval_xnu_bb1_in(V_len,C,C,V_beg_0,D)
     [V_len>=C,C=V_i_0+1,D=3,B=3] 

### Cost equations --> "Loop" of eval_xnu_bb1_in/5 
* CEs [30] --> Loop 12 
* CEs [18,20,24,26] --> Loop 13 
* CEs [31] --> Loop 14 
* CEs [19,21,25,27] --> Loop 15 
* CEs [23,29] --> Loop 16 
* CEs [22,28] --> Loop 17 
* CEs [32] --> Loop 18 
* CEs [17] --> Loop 19 

#### Loops of eval_xnu_bb1_in/5 
* Loop 12: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,V_i_0',V_end_0,V_beg_0,B')
                  [V_len>=V_i_0+1,V_i_0+1=V_i_0',B'=3,B=3] 
* Loop 13: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,A',A',A',B')
                  [V_beg_0>=A',V_len>=A',A'=V_i_0+1,B'=3,B=3] 
* Loop 14: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,A',A',A',B')
                  [V_len>=A',A'=V_i_0+1,B'=3,B=3] 
* Loop 15: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,A',A',A',B')
                  [V_len>=A',A'>=V_beg_0+1,A'=V_i_0+1,B'=3,B=3] 
* Loop 16: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,A',A',A',B')
                  [V_len>=A',V_end_0>=V_beg_0+1,A'=V_i_0+1,B'=3,B=3] 
* Loop 17: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,A',A',A',B')
                  [V_len>=A',V_beg_0>=V_end_0,A'=V_i_0+1,B'=3,B=3] 
* Loop 18: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,A',A',V_beg_0,B')
                  [V_len>=A',A'=V_i_0+1,B'=3,B=3] 
* Loop 19: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) [V_i_0>=V_len,B=3] 

### Ranking functions of CR eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) 
* RF of phase [12,13,14,15,16,17,18]: [V_len-V_i_0]

#### Partial ranking functions of CR eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) 

Discarded unfeasible chain [[12,13,14,15,16,17,18]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) 
* [[12,13,14,15,16,17,18],19]
* [19]


### Merging Chains  eval_xnu_bb1_in/5 into  External patterns of execution 
* [[19]] --> 1 
* [[19,[12,13,14,15,16,17,18]]] --> 2 


### Specialization of cost equations eval_xnu_10/2 
* CE 2 is refined into CE [33,34] 


#### Refined cost equations eval_xnu_10/2 
* CE 33: eval_xnu_10(V_len,B) = 1+ eval_xnu_bb1_in(V_len,C,D,E,F):1
     [0>=V_len,F=3,E=0,D=0,C=0] 
* CE 34: eval_xnu_10(V_len,B) = 1+ eval_xnu_bb1_in(V_len,C,D,E,F):2
     [V_len>=1,F=3,E=0,D=0,C=0] 

### Cost equations --> "Loop" of eval_xnu_10/2 
* CEs [34] --> Loop 20 
* CEs [33] --> Loop 21 

#### Loops of eval_xnu_10/2 
* Loop 20: eval_xnu_10(V_len,B) [V_len>=1] 
* Loop 21: eval_xnu_10(V_len,B) [0>=V_len] 

### Ranking functions of CR eval_xnu_10(V_len,B) 

#### Partial ranking functions of CR eval_xnu_10(V_len,B) 


### Resulting Chains:eval_xnu_10(V_len,B) 
* [21]
* [20]


### Merging Chains  eval_xnu_10/2 into  External patterns of execution 
* [[21]] --> 1 
* [[20]] --> 2 


### Specialization of cost equations eval_xnu_start/2 
* CE 1 is refined into CE [35,36] 


#### Refined cost equations eval_xnu_start/2 
* CE 35: eval_xnu_start(V_len,B) = 0+ eval_xnu_10(V_len,B):1
     [0>=V_len] 
* CE 36: eval_xnu_start(V_len,B) = 0+ eval_xnu_10(V_len,B):2
     [V_len>=1] 

### Cost equations --> "Loop" of eval_xnu_start/2 
* CEs [36] --> Loop 22 
* CEs [35] --> Loop 23 

#### Loops of eval_xnu_start/2 
* Loop 22: eval_xnu_start(V_len,B) [V_len>=1] 
* Loop 23: eval_xnu_start(V_len,B) [0>=V_len] 

### Ranking functions of CR eval_xnu_start(V_len,B) 

#### Partial ranking functions of CR eval_xnu_start(V_len,B) 


### Resulting Chains:eval_xnu_start(V_len,B) 
* [23]
* [22]


### Merging Chains  eval_xnu_start/2 into  External patterns of execution 
* [[23]] --> 1 
* [[22]] --> 2 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 15 

#### Computing cost of phase [10] 

#### Simplifying cost structure of CE 16 

#### Cost of loops [10] 

 * loop 10:eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0,B,C,D,E,F) -> [eval_xnu_bb3_in(V_len',V_i_0',V_end_0',V_beg_0',V_1',V_2',V__end_0',V_4',V_k_0',B',C',D',E',F')] 
1
##### Pending set eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0,B,C,D,E,F)
* Psum in Loop 10: [it(10)=<1]

###### Computing sum for it(10)=<1  in Loop 10 
   - Applying inductive sum strategy 
     - head Candidate: V__end_0-V_k_0 
     - head Candidate: V__end_0-V_k_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V__end_0-V_k_0 
     - tail Candidate: V__end_0-V_k_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(10)=<V__end_0-V_k_0,it(10)=<V__end_0-V_k_0,it(10)=<V__end_0-V_k_0-V__end_0'+V_k_0',it(10)=<V__end_0-V_k_0-V__end_0'+V_k_0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [10] 

#### Simplifying cost structure of phase [10] 

#### Cost of phase [10]:eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0,B,C,D,E,F) -> [eval_xnu_bb3_in(V_len',V_i_0',V_end_0',V_beg_0',V_1',V_2',V__end_0',V_4',V_k_0',B',C',D',E',F')] 
1*it(10)+0
  Such that:it(10) =< V__end_0-V_k_0
it(10) =< V__end_0-V_k_0-V__end_0'+V_k_0'

#### Simplifying cost structure of chain [[10],11] 

#### Cost of chains of eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0,B,C,D,E,F):
* Chain [[10],11]: 1*it(10)+0
  Such that:it(10) =< V__end_0-V_k_0

  with precondition: [B=2,V_i_0+1=V_1,V_len=C,V_i_0+1=D,V_i_0+1=E,V_i_0+1=F,V_len>=V_i_0+1,V_k_0>=V_beg_0,V__end_0>=V_k_0+1] 

* Chain [11]: 0
  with precondition: [B=2,V_i_0+1=V_1,V_len=C,V_i_0+1=D,V_i_0+1=E,V_i_0+1=F,V_len>=V_i_0+1,V_k_0>=V_beg_0,V_k_0>=V__end_0] 


#### Simplifying cost structure of CE 17 

#### Computing cost of phase [12,13,14,15,16,17,18] 
 * The following loops are unfeasible in this instance of the phase [12,13,14,15,16,17,18] : [13] 

#### Simplifying cost structure of CE 30 

#### Simplifying cost structure of CE 31 
 * Renamed intermediate variables: 
[(eq(19,1),it(10))>>s(1)]

#### Simplifying cost structure of CE 19 
 * Renamed intermediate variables: 
[(eq(21,1),it(10))>>s(2)]

#### Simplifying cost structure of CE 21 
 * Renamed intermediate variables: 
[(eq(25,1),it(10))>>s(3)]

#### Simplifying cost structure of CE 25 
 * Renamed intermediate variables: 
[(eq(27,1),it(10))>>s(4)]

#### Simplifying cost structure of CE 27 
 * Joined equivalent variables [s(1),s(2),s(3),s(4)] into s(1)
 * Renamed intermediate variables: 
[(it(15),aux(1))>>s(5),(it(15),s(1))>>s(6)]
 * Renamed intermediate variables: 
[(eq(23,1),it(10))>>s(7)]

#### Simplifying cost structure of CE 23 
 * Renamed intermediate variables: 
[(eq(29,1),it(10))>>s(8)]

#### Simplifying cost structure of CE 29 
 * Joined equivalent variables [s(7),s(8)] into s(7)
 * Renamed intermediate variables: 
[(it(16),aux(2))>>s(9),(it(16),s(7))>>s(10)]

#### Simplifying cost structure of CE 22 

#### Simplifying cost structure of CE 28 

#### Simplifying cost structure of CE 32 

#### Cost of loops [12,14,15,16,17,18] 

 * loop 12:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
1
 * loop 14:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
1
 * loop 15:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
4*s(6)+2
  Such that:s(5) =< -V_beg_0+V_beg_0'
s(6) =< s(5)

 * loop 16:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
2*s(10)+2
  Such that:s(9) =< V_end_0-V_beg_0
s(10) =< s(9)

 * loop 17:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
2
 * loop 18:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
1
##### Pending set eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)
* Psum in Loop 12: [it(12)=<1]
* Psum in Loop 14: [it(14)=<1]
* Psum in Loop 15: [it(15)=<1,s(12)=< -V_beg_0+V_beg_0']
* Psum in Loop 16: [it(16)=<1,s(14)=<V_end_0-V_beg_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing sum for it(12)=<1  in Loop 12 
   - Applying inductive sum strategy 
     - head Candidate: V_len-V_i_0 
       - Loop 14 is collaborative and bounds [it(14)] 
       - Loop 15 is collaborative and bounds [it(15)] 
       - Loop 16 is collaborative and bounds [it(16)] 
       - Loop 17 is collaborative and bounds [it(17)] 
       - Loop 18 is collaborative and bounds [it(18)] 
     - tail Candidate: V_len-V_i_0 
       - Loop 14 is collaborative and bounds [it(14)] 
       - Loop 15 is collaborative and bounds [it(15)] 
       - Loop 16 is collaborative and bounds [it(16)] 
       - Loop 17 is collaborative and bounds [it(17)] 
       - Loop 18 is collaborative and bounds [it(18)] 
 * Adding constraints: [it(12)+it(14)+it(15)+it(16)+it(17)+it(18)=<V_len-V_i_0,it(12)+it(14)+it(15)+it(16)+it(17)+it(18)=<V_len-V_i_0-V_len'+V_i_0'] 

##### Pending set eval_xnu_0(V_len,B)
* Psum in Loop 14: [it(14)=<1]
* Psum in Loop 15: [it(15)=<1,s(12)=< -V_beg_0+V_beg_0']
* Psum in Loop 16: [it(16)=<1,s(14)=<V_end_0-V_beg_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing sum for it(14)=<1  in Loop 14 
   - Applying inductive sum strategy 
     - head Candidate: V_len-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_len-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(12)+it(14)+it(15)+it(16)+it(17)+it(18)=<V_len-V_i_0,it(12)+it(14)+it(15)+it(16)+it(17)+it(18)=<V_len-V_i_0-V_len'+V_i_0'] 

##### Pending set eval_xnu_0(V_len,B)
* Psum in Loop 15: [it(15)=<1,s(12)=< -V_beg_0+V_beg_0']
* Psum in Loop 16: [it(16)=<1,s(14)=<V_end_0-V_beg_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing sum for it(15)=<1  in Loop 15 
   - Applying inductive sum strategy 
     - head Candidate: V_len-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_len-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(12)+it(14)+it(15)+it(16)+it(17)+it(18)=<V_len-V_i_0,it(12)+it(14)+it(15)+it(16)+it(17)+it(18)=<V_len-V_i_0-V_len'+V_i_0'] 

##### Pending set eval_xnu_0(V_len,B)
* Psum in Loop 15: [s(12)=< -V_beg_0+V_beg_0']
* Psum in Loop 16: [it(16)=<1,s(14)=<V_end_0-V_beg_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing sum for s(12)=< -V_beg_0+V_beg_0'  in Loop 15 
   - Applying inductive sum strategy 
     - head Candidate: V_len-V_beg_0 
       - Loop 12 is collaborative
       - Loop 14 is collaborative
       - Loop 16 is collaborative and bounds [it(16)] 
       - Loop 17 is collaborative and bounds [it(17)] 
       - Loop 18 is collaborative
     - tail Candidate: V_len-V_beg_0 
       - Loop 12 is collaborative
       - Loop 14 is collaborative
       - Loop 16 is collaborative and bounds [it(16)] 
       - Loop 17 is collaborative and bounds [it(17)] 
       - Loop 18 is collaborative
 * Adding constraints: [it(16)+it(17)+s(12)=<V_len-V_beg_0,it(16)+it(17)+s(12)=<V_len-V_beg_0-V_len'+V_beg_0'] 

##### Pending set eval_xnu_0(V_len,B)
* Psum in Loop 16: [it(16)=<1,s(14)=<V_end_0-V_beg_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing sum for it(16)=<1  in Loop 16 
   - Applying inductive sum strategy 
     - head Candidate: V_len-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_len-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(12)+it(14)+it(15)+it(16)+it(17)+it(18)=<V_len-V_i_0,it(12)+it(14)+it(15)+it(16)+it(17)+it(18)=<V_len-V_i_0-V_len'+V_i_0'] 

##### Pending set eval_xnu_0(V_len,B)
* Psum in Loop 16: [s(14)=<V_end_0-V_beg_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing sum for s(14)=<V_end_0-V_beg_0  in Loop 16 
   - Applying inductive sum strategy 
     - head Candidate: V_len-V_beg_0-1 
       - Loop 12 is collaborative
       - Loop 14 is collaborative
       - Loop 15 is collaborative
       - Loop 17 is collaborative
       - Loop 18 is collaborative
     - head Candidate: V_i_0-V_beg_0 
       - Loop 12 adds a constant 1/1 
       - Loop 14 is collaborative
       - Loop 15 is collaborative
       - Loop 17 is collaborative
       - Loop 18 adds a constant 1/1 
     - tail Candidate: V_len-V_beg_0-1 
       - Loop 12 is collaborative
       - Loop 14 is collaborative
       - Loop 15 is collaborative
       - Loop 17 is collaborative and bounds [it(17)] 
       - Loop 18 is collaborative
     - tail Candidate: V_i_0-V_beg_0 
       - Loop 12 adds a constant 1/1 
       - Loop 14 is collaborative
       - Loop 15 is collaborative
       - Loop 17 is collaborative
       - Loop 18 adds a constant 1/1 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(5)=<V_end_0-V_beg_0] 
 * Adding constraints: [s(14)=<it(16)*aux(5),s(14)=<it(18)+it(12)+aux(3),s(14)=<it(18)+it(12)+aux(4),s(14)=<V_len-V_beg_0-1,aux(3)=<V_i_0-V_beg_0,it(17)+s(14)=<V_len-V_beg_0-V_len'+V_beg_0',aux(4)=<V_i_0-V_beg_0-V_i_0'+V_beg_0'] 

##### Pending set eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)
* Pmax/min: [aux(5)=<V_end_0-V_beg_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing max_min for aux(5)=<V_end_0-V_beg_0  
   - Applying max/min strategy 
     - Loop 12 does not increase the expression
     - Loop 14 does not increase the expression
     - Loop 15 does not increase the expression
     - Loop 16 does not increase the expression
     - Loop 17 does not increase the expression
     - Loop 18  increases the expression by [V_i_0'-V_beg_0',V_i_0-V_beg_0'+1] 
 * Adding constraints:[aux(5)=<aux(6)+aux(7),aux(6)=<V_end_0-V_beg_0] 

##### Pending set eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1,aux(7)=<V_i_0-V_beg_0'+1,aux(7)=<V_i_0'-V_beg_0']

###### Computing sum for it(17)=<1  in Loop 17 
   - Applying inductive sum strategy 
     - head Candidate: V_len-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_len-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(12)+it(14)+it(15)+it(16)+it(17)+it(18)=<V_len-V_i_0,it(12)+it(14)+it(15)+it(16)+it(17)+it(18)=<V_len-V_i_0-V_len'+V_i_0'] 

##### Pending set eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)
* Psum in Loop 18: [it(18)=<1,aux(7)=<V_i_0-V_beg_0'+1,aux(7)=<V_i_0'-V_beg_0']

###### Computing sum for it(18)=<1  in Loop 18 
   - Applying inductive sum strategy 
     - head Candidate: V_len-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_len-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(12)+it(14)+it(15)+it(16)+it(17)+it(18)=<V_len-V_i_0,it(12)+it(14)+it(15)+it(16)+it(17)+it(18)=<V_len-V_i_0-V_len'+V_i_0'] 

##### Pending set eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)
* Psum in Loop 18: [aux(7)=<V_i_0-V_beg_0'+1,aux(7)=<V_i_0'-V_beg_0']

###### Computing sum for aux(7)=<V_i_0-V_beg_0'+1  in Loop 18 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(8)=<V_len-V_beg_0,aux(8)=<V_i_0-V_beg_0+1] 
 * Adding constraints: [aux(7)=<it(18)*aux(8)] 

##### Pending set eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)
* Pmax/min: [aux(8)=<V_len-V_beg_0,aux(8)=<V_i_0-V_beg_0+1]
* Psum in Loop 18: [aux(7)=<V_i_0'-V_beg_0']

###### Computing max_min for aux(8)=<V_len-V_beg_0  
   - Applying max/min strategy 
     - Loop 12 does not increase the expression
     - Loop 14 does not increase the expression
     - Loop 15 does not increase the expression
     - Loop 16 does not increase the expression
     - Loop 17 does not increase the expression
     - Loop 18 does not increase the expression
 * Adding constraints:[aux(8)=<aux(9),aux(9)=<V_len-V_beg_0] 

##### Pending set eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)
* Pmax/min: [aux(8)=<V_i_0-V_beg_0+1]
* Psum in Loop 18: [aux(7)=<V_i_0'-V_beg_0']

###### Computing max_min for aux(8)=<V_i_0-V_beg_0+1  
   - Applying max/min strategy 
     - Loop 12  increases the expression by 1/1 
     - Loop 14 does not increase the expression
     - Loop 15 does not increase the expression
     - Loop 16 does not increase the expression
     - Loop 17 does not increase the expression
     - Loop 18  increases the expression by 1/1 
 * Adding constraints:[aux(8)=<aux(10)+it(12)+it(18),aux(10)=<V_i_0-V_beg_0+1] 

##### Pending set eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)
* Psum in Loop 18: [aux(7)=<V_i_0'-V_beg_0']

###### Computing sum for aux(7)=<V_i_0'-V_beg_0'  in Loop 18 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(11)=<V_len-V_beg_0,aux(11)=<V_i_0-V_beg_0+1] 
 * Adding constraints: [aux(7)=<it(18)*aux(11)] 

##### Pending set eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)
* Pmax/min: [aux(11)=<V_len-V_beg_0,aux(11)=<V_i_0-V_beg_0+1]

###### Computing max_min for aux(11)=<V_len-V_beg_0  
   - Found a solution using cacheing 
 * Adding constraints:[aux(11)=<aux(8)] 

##### Pending set eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)
* Pmax/min: [aux(11)=<V_i_0-V_beg_0+1]

###### Computing max_min for aux(11)=<V_i_0-V_beg_0+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(11)=<aux(8)] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [12,14,15,16,17,18] 

#### Simplifying cost structure of phase [12,14,15,16,17,18] 
 * Joined equivalent variables [aux(14),aux(9)] into aux(14)
 * Joined equivalent variables [it(12),it(14),it(15),it(18)] into it(12)
 * Joined equivalent variables [it(16),it(17)] into it(16)

#### Cost of phase [12,13,14,15,16,17,18]:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
5*it(12)+4*it(16)+4*s(11)+2*s(13)+0
  Such that:aux(3) =< V_i_0-V_beg_0
aux(10) =< V_i_0-V_beg_0+1
aux(4) =< V_i_0-V_beg_0-V_i_0'+V_beg_0'
aux(6) =< V_end_0-V_beg_0
aux(12) =< V_len-V_i_0
aux(13) =< V_len-V_i_0-V_len'+V_i_0'
aux(14) =< V_len-V_beg_0
aux(15) =< V_len-V_beg_0-V_len'+V_beg_0'
it(12) =< aux(12)
it(16) =< aux(12)
it(12) =< aux(13)
it(16) =< aux(13)
it(16) =< aux(14)
s(12) =< aux(14)
s(14) =< aux(14)
it(16) =< aux(15)
s(12) =< aux(15)
s(14) =< aux(15)
aux(8) =< aux(10)+it(12)+it(12)
aux(8) =< aux(14)
s(14) =< it(12)+it(12)+aux(4)
s(14) =< it(12)+it(12)+aux(3)
aux(11) =< aux(8)
aux(7) =< it(12)*aux(8)
aux(7) =< it(12)*aux(11)
aux(5) =< aux(6)+aux(7)
s(14) =< it(16)*aux(5)
s(13) =< s(14)
s(11) =< s(12)

#### Simplifying cost structure of chain [[12,13,14,15,16,17,18],19] 
 * Joined equivalent variables [aux(16),aux(12),aux(13)] into aux(16)
 * Joined equivalent variables [aux(17),aux(14),aux(15)] into aux(17)
 * Joined equivalent variables [aux(18),aux(3)] into aux(18)
 * Joined equivalent variables [aux(17),s(12)] into aux(17)

#### Cost of chains of eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B):
* Chain [[12,13,14,15,16,17,18],19]: 5*it(12)+4*it(16)+4*s(11)+2*s(13)+0
  Such that:aux(10) =< V_i_0-V_beg_0+1
aux(6) =< V_end_0-V_beg_0
aux(16) =< V_len-V_i_0
aux(17) =< V_len-V_beg_0
aux(18) =< V_i_0-V_beg_0
aux(4) =< aux(17)
aux(4) =< aux(18)
it(12) =< aux(16)
it(16) =< aux(16)
it(16) =< aux(17)
s(14) =< aux(17)
aux(8) =< aux(10)+it(12)+it(12)
aux(8) =< aux(17)
s(14) =< it(12)+it(12)+aux(4)
s(14) =< it(12)+it(12)+aux(18)
aux(11) =< aux(8)
aux(7) =< it(12)*aux(8)
aux(7) =< it(12)*aux(11)
aux(5) =< aux(6)+aux(7)
s(14) =< it(16)*aux(5)
s(13) =< s(14)
s(11) =< aux(17)

  with precondition: [B=3,V_beg_0>=0,V_len>=V_i_0+1,V_i_0>=V_end_0,V_end_0>=V_beg_0] 

* Chain [19]: 0
  with precondition: [B=3,V_beg_0>=0,V_i_0>=V_len,V_i_0>=V_end_0,V_end_0>=V_beg_0] 


#### Simplifying cost structure of CE 33 
 * Renamed intermediate variables: 
[(eq(34,1),aux(10))>>s(15),(eq(34,1),aux(6))>>s(16),(eq(34,1),aux(16))>>s(17),(eq(34,1),aux(17))>>s(18),(eq(34,1),aux(18))>>s(19),(eq(34,1),aux(4))>>s(20),(eq(34,1),it(12))>>s(21),(eq(34,1),it(16))>>s(22),(eq(34,1),s(14))>>s(23),(eq(34,1),aux(8))>>s(24),(eq(34,1),aux(11))>>s(25),(eq(34,1),aux(7))>>s(26),(eq(34,1),aux(5))>>s(27),(eq(34,1),s(13))>>s(28),(eq(34,1),s(11))>>s(29)]

#### Simplifying cost structure of CE 34 
 * Joined equivalent variables [aux(19),s(16),s(19)] into aux(19)
 * Joined equivalent variables [aux(20),s(17),s(18)] into aux(20)
 * Joined equivalent variables [s(21),s(22),s(29)] into s(21)

#### Cost of chains of eval_xnu_10(V_len,B):
* Chain [21]: 1
  with precondition: [0>=V_len] 

* Chain [20]: 13*s(21)+2*s(28)+1
  Such that:s(15) =< 1
aux(20) =< V_len
s(21) =< aux(20)
s(23) =< aux(20)
s(24) =< s(15)+s(21)+s(21)
s(24) =< aux(20)
s(23) =< s(21)+s(21)
s(23) =< s(21)+s(21)
s(25) =< s(24)
s(26) =< s(21)*s(24)
s(26) =< s(21)*s(25)
s(27) =< s(26)
s(23) =< s(21)*s(27)
s(28) =< s(23)

  with precondition: [V_len>=1] 


#### Simplifying cost structure of CE 35 
 * Renamed intermediate variables: 
[(eq(36,1),s(15))>>s(30),(eq(36,1),aux(20))>>s(31),(eq(36,1),s(21))>>s(32),(eq(36,1),s(23))>>s(33),(eq(36,1),s(24))>>s(34),(eq(36,1),s(25))>>s(35),(eq(36,1),s(26))>>s(36),(eq(36,1),s(27))>>s(37),(eq(36,1),s(28))>>s(38)]

#### Simplifying cost structure of CE 36 
 * Joined equivalent variables [s(36),s(37)] into s(36)

#### Cost of chains of eval_xnu_start(V_len,B):
* Chain [23]: 1
  with precondition: [0>=V_len] 

* Chain [22]: 13*s(32)+2*s(38)+1
  Such that:s(30) =< 1
s(31) =< V_len
s(32) =< s(31)
s(33) =< s(31)
s(34) =< s(30)+s(32)+s(32)
s(34) =< s(31)
s(33) =< s(32)+s(32)
s(35) =< s(34)
s(36) =< s(32)*s(34)
s(36) =< s(32)*s(35)
s(33) =< s(32)*s(36)
s(38) =< s(33)

  with precondition: [V_len>=1] 


Closed-form bounds of eval_xnu_start(V_len,B): 
-------------------------------------
* Chain [23] with precondition: [0>=V_len] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [22] with precondition: [V_len>=1] 
    - Upper bound: 15*V_len+1 
    - Complexity: n 

### Maximum cost of eval_xnu_start(V_len,B): nat(V_len)*15+1 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 177 ms.
* Invariants computed in 107 ms.
   - Backward Invariants 40 ms.
   - Transitive Invariants 27 ms.
* Refinement performed in 221 ms.
* Termination proved in 32 ms.
* Upper bounds computed in 361 ms.
   - Equation cost structures 104 ms.
   - Phase cost structures 287 ms.
   - Chain cost structures 44 ms.
   - Solving cost expressions 2 ms.
* Total analysis performed in 1007 ms.


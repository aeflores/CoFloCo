Warning: Ignored call to eval_subsetdump_stop/1 in equation eval_subsetdump_bb10_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_subsetdump_8/9,eval_subsetdump_9/10,eval_subsetdump_bb3_in/9,eval_subsetdump_bb4_in/9,eval_subsetdump_bb5_in/10]
1. recursive : [eval_subsetdump_bb7_in/11,eval_subsetdump_bb8_in/11]
2. recursive : [eval_subsetdump_12/5,eval_subsetdump_13/6,eval_subsetdump_6/3,eval_subsetdump_7/4,eval_subsetdump_bb1_in/3,eval_subsetdump_bb2_in/3,eval_subsetdump_bb6_in/5,eval_subsetdump_bb9_in/5,loop_cont_eval_subsetdump_bb3_in/6,loop_cont_eval_subsetdump_bb7_in/6]
3. non_recursive : [eval_subsetdump_bb10_in/1]
4. non_recursive : [loop_cont_eval_subsetdump_bb1_in/2]
5. non_recursive : [eval_subsetdump_5/2]
6. non_recursive : [eval_subsetdump_4/2]
7. non_recursive : [eval_subsetdump_3/2]
8. non_recursive : [eval_subsetdump_2/2]
9. non_recursive : [eval_subsetdump_1/2]
10. non_recursive : [eval_subsetdump_0/2]
11. non_recursive : [eval_subsetdump_bb0_in/2]
12. non_recursive : [eval_subsetdump_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_subsetdump_bb3_in/9
1. SCC is partially evaluated into eval_subsetdump_bb7_in/11
2. SCC is partially evaluated into eval_subsetdump_bb1_in/3
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into eval_subsetdump_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_subsetdump_bb3_in/9 
* CE 11 is refined into CE [16] 
* CE 13 is refined into CE [17] 
* CE 12 is refined into CE [18] 


#### Refined cost equations eval_subsetdump_bb3_in/9 
* CE 16: eval_subsetdump_bb3_in(A,B,C,D,E,A,B,C,D) = 0
     [A>=D+1,D>=B,E=2] 
* CE 17: eval_subsetdump_bb3_in(A,B,C,D,E,A,B,C,D) = 0
     [A>=B+1,D>=A,E=2] 
* CE 18: eval_subsetdump_bb3_in(V_limit,V_cnum_0,V_1,V_cnum_1,B,C,D,E,F) = 1+ eval_subsetdump_bb3_in(V_limit,V_cnum_0,V_1,G,H,C,D,E,F)
     [V_limit>=V_cnum_1+1,V_cnum_1>=V_cnum_0,V_cnum_1+1=G,H=2,B=2] 

### Cost equations --> "Loop" of eval_subsetdump_bb3_in/9 
* CEs [18] --> Loop 9 
* CEs [16] --> Loop 10 
* CEs [17] --> Loop 11 

#### Loops of eval_subsetdump_bb3_in/9 
* Loop 9: eval_subsetdump_bb3_in(V_limit,V_cnum_0,V_1,V_cnum_1,B,C,D,E,F)->  eval_subsetdump_bb3_in(V_limit,V_cnum_0,V_1,V_cnum_1',B',C,D,E,F)
                  [V_limit>=V_cnum_1+1,V_cnum_1>=V_cnum_0,V_cnum_1+1=V_cnum_1',B'=2,B=2] 
* Loop 10: eval_subsetdump_bb3_in(A,B,C,D,E,A,B,C,D) [A>=D+1,D>=B,E=2] 
* Loop 11: eval_subsetdump_bb3_in(A,B,C,D,E,A,B,C,D) [A>=B+1,D>=A,E=2] 

### Ranking functions of CR eval_subsetdump_bb3_in(V_limit,V_cnum_0,V_1,V_cnum_1,B,C,D,E,F) 
* RF of phase [9]: [V_limit-V_cnum_1]

#### Partial ranking functions of CR eval_subsetdump_bb3_in(V_limit,V_cnum_0,V_1,V_cnum_1,B,C,D,E,F) 
* Partial RF of phase [9]:
  - RF of loop [9:1]:
    V_limit-V_cnum_1

Discarded unfeasible chain [[9]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_subsetdump_bb3_in(V_limit,V_cnum_0,V_1,V_cnum_1,B,C,D,E,F) 
* [[9],11]
* [[9],10]
* [10]


### Merging Chains  eval_subsetdump_bb3_in/9 into  External patterns of execution 
* [[10]] --> 1 
* [[11,[9]]] --> 2 
* [[10,[9]]] --> 3 


### Specialization of cost equations eval_subsetdump_bb7_in/11 
* CE 15 is refined into CE [19] 
* CE 14 is refined into CE [20] 


#### Refined cost equations eval_subsetdump_bb7_in/11 
* CE 19: eval_subsetdump_bb7_in(A,B,C,D,E,F,G,A,B,C,D) = 0
     [F>=D,F>=B,G=3] 
* CE 20: eval_subsetdump_bb7_in(V_limit,V_cnum_0,V_1,V_cnum_1,V_7,V_rangestart_0,B,C,D,E,F) = 1+ eval_subsetdump_bb7_in(V_limit,V_cnum_0,V_1,V_cnum_1,V_7,G,H,C,D,E,F)
     [V_cnum_1>=V_rangestart_0+1,V_rangestart_0>=V_cnum_0,V_rangestart_0+1=G,H=3,B=3] 

### Cost equations --> "Loop" of eval_subsetdump_bb7_in/11 
* CEs [20] --> Loop 12 
* CEs [19] --> Loop 13 

#### Loops of eval_subsetdump_bb7_in/11 
* Loop 12: eval_subsetdump_bb7_in(V_limit,V_cnum_0,V_1,V_cnum_1,V_7,V_rangestart_0,B,C,D,E,F)->  eval_subsetdump_bb7_in(V_limit,V_cnum_0,V_1,V_cnum_1,V_7,V_rangestart_0',B',C,D,E,F)
                  [V_cnum_1>=V_rangestart_0+1,V_rangestart_0>=V_cnum_0,V_rangestart_0+1=V_rangestart_0',B'=3,B=3] 
* Loop 13: eval_subsetdump_bb7_in(A,B,C,D,E,F,G,A,B,C,D) [F>=D,F>=B,G=3] 

### Ranking functions of CR eval_subsetdump_bb7_in(V_limit,V_cnum_0,V_1,V_cnum_1,V_7,V_rangestart_0,B,C,D,E,F) 
* RF of phase [12]: [V_cnum_1-V_rangestart_0]

#### Partial ranking functions of CR eval_subsetdump_bb7_in(V_limit,V_cnum_0,V_1,V_cnum_1,V_7,V_rangestart_0,B,C,D,E,F) 
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    V_cnum_1-V_rangestart_0

Discarded unfeasible chain [[12]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_subsetdump_bb7_in(V_limit,V_cnum_0,V_1,V_cnum_1,V_7,V_rangestart_0,B,C,D,E,F) 
* [[12],13]
* [13]


### Merging Chains  eval_subsetdump_bb7_in/11 into  External patterns of execution 
* [[13]] --> 1 
* [[13,[12]]] --> 2 


### Specialization of cost equations eval_subsetdump_bb1_in/3 
* CE 10 is refined into CE [21] 
* CE 3 is refined into CE [22] 
* CE 4 is refined into CE [23,24,25] 
* CE 5 is refined into CE [26,27,28] 
* CE 6 is refined into CE [29,30,31] 
* CE 7 is refined into CE [32,33,34] 
* CE 8 is refined into CE [35,36,37] 
* CE 9 is refined into CE [38,39,40] 


#### Refined cost equations eval_subsetdump_bb1_in/3 
* CE 21: eval_subsetdump_bb1_in(V_limit,V_cnum_0,B) = 0
     [V_cnum_0>=V_limit,B=4] 
* CE 22: eval_subsetdump_bb1_in(V_limit,V_cnum_0,B) = 1+ eval_subsetdump_bb1_in(V_limit,C,D)
     [V_limit>=V_cnum_0+1,V_cnum_0+1=C,D=4,B=4] 
* CE 23: eval_subsetdump_bb1_in(V_limit,V_cnum_0,B) = 3+ eval_subsetdump_bb3_in(V_limit,V_cnum_0,C,V_cnum_0,D,V_limit,V_cnum_0,C,V_cnum_0):1+ eval_subsetdump_bb7_in(V_limit,V_cnum_0,C,V_cnum_0,E,V_cnum_0,F,V_limit,V_cnum_0,C,V_cnum_0):1+ eval_subsetdump_bb1_in(V_limit,G,H)
     [V_limit>=V_cnum_0+1,E>=1,0>=C+1,V_cnum_0+1=G,H=4,F=3,D=2,B=4] 
* CE 24: eval_subsetdump_bb1_in(V_limit,V_cnum_0,B) = 3+ eval_subsetdump_bb3_in(V_limit,V_cnum_0,C,V_cnum_0,D,V_limit,V_cnum_0,C,V_limit):2+ eval_subsetdump_bb7_in(V_limit,V_cnum_0,C,V_limit,E,V_cnum_0,F,V_limit,V_cnum_0,C,V_limit):2+ eval_subsetdump_bb1_in(V_limit,G,H)
     [V_limit>=V_cnum_0+1,E>=1,0>=C+1,V_limit+1=G,H=4,F=3,D=2,B=4] 
* CE 25: eval_subsetdump_bb1_in(V_limit,V_cnum_0,B) = 3+ eval_subsetdump_bb3_in(V_limit,V_cnum_0,C,V_cnum_0,D,V_limit,V_cnum_0,C,E):3+ eval_subsetdump_bb7_in(V_limit,V_cnum_0,C,E,F,V_cnum_0,G,V_limit,V_cnum_0,C,E):2+ eval_subsetdump_bb1_in(V_limit,H,I)
     [V_limit>=E+1,E>=V_cnum_0+1,F>=1,0>=C+1,E+1=H,I=4,G=3,D=2,B=4] 
* CE 26: eval_subsetdump_bb1_in(V_limit,V_cnum_0,B) = 3+ eval_subsetdump_bb3_in(V_limit,V_cnum_0,C,V_cnum_0,D,V_limit,V_cnum_0,C,V_cnum_0):1+ eval_subsetdump_bb7_in(V_limit,V_cnum_0,C,V_cnum_0,E,V_cnum_0,F,V_limit,V_cnum_0,C,V_cnum_0):1+ eval_subsetdump_bb1_in(V_limit,G,H)
     [V_limit>=V_cnum_0+1,C>=1,E>=1,V_cnum_0+1=G,H=4,F=3,D=2,B=4] 
* CE 27: eval_subsetdump_bb1_in(V_limit,V_cnum_0,B) = 3+ eval_subsetdump_bb3_in(V_limit,V_cnum_0,C,V_cnum_0,D,V_limit,V_cnum_0,C,V_limit):2+ eval_subsetdump_bb7_in(V_limit,V_cnum_0,C,V_limit,E,V_cnum_0,F,V_limit,V_cnum_0,C,V_limit):2+ eval_subsetdump_bb1_in(V_limit,G,H)
     [V_limit>=V_cnum_0+1,C>=1,E>=1,V_limit+1=G,H=4,F=3,D=2,B=4] 
* CE 28: eval_subsetdump_bb1_in(V_limit,V_cnum_0,B) = 3+ eval_subsetdump_bb3_in(V_limit,V_cnum_0,C,V_cnum_0,D,V_limit,V_cnum_0,C,E):3+ eval_subsetdump_bb7_in(V_limit,V_cnum_0,C,E,F,V_cnum_0,G,V_limit,V_cnum_0,C,E):2+ eval_subsetdump_bb1_in(V_limit,H,I)
     [V_limit>=E+1,E>=V_cnum_0+1,C>=1,F>=1,E+1=H,I=4,G=3,D=2,B=4] 
* CE 29: eval_subsetdump_bb1_in(V_limit,V_cnum_0,B) = 3+ eval_subsetdump_bb3_in(V_limit,V_cnum_0,C,V_cnum_0,D,V_limit,V_cnum_0,C,V_cnum_0):1+ eval_subsetdump_bb7_in(V_limit,V_cnum_0,C,V_cnum_0,E,V_cnum_0,F,V_limit,V_cnum_0,C,V_cnum_0):1+ eval_subsetdump_bb1_in(V_limit,G,H)
     [V_limit>=V_cnum_0+1,0>=C+1,0>=E+1,V_cnum_0+1=G,H=4,F=3,D=2,B=4] 
* CE 30: eval_subsetdump_bb1_in(V_limit,V_cnum_0,B) = 3+ eval_subsetdump_bb3_in(V_limit,V_cnum_0,C,V_cnum_0,D,V_limit,V_cnum_0,C,V_limit):2+ eval_subsetdump_bb7_in(V_limit,V_cnum_0,C,V_limit,E,V_cnum_0,F,V_limit,V_cnum_0,C,V_limit):2+ eval_subsetdump_bb1_in(V_limit,G,H)
     [V_limit>=V_cnum_0+1,0>=C+1,0>=E+1,V_limit+1=G,H=4,F=3,D=2,B=4] 
* CE 31: eval_subsetdump_bb1_in(V_limit,V_cnum_0,B) = 3+ eval_subsetdump_bb3_in(V_limit,V_cnum_0,C,V_cnum_0,D,V_limit,V_cnum_0,C,E):3+ eval_subsetdump_bb7_in(V_limit,V_cnum_0,C,E,F,V_cnum_0,G,V_limit,V_cnum_0,C,E):2+ eval_subsetdump_bb1_in(V_limit,H,I)
     [V_limit>=E+1,E>=V_cnum_0+1,0>=C+1,0>=F+1,E+1=H,I=4,G=3,D=2,B=4] 
* CE 32: eval_subsetdump_bb1_in(V_limit,V_cnum_0,B) = 3+ eval_subsetdump_bb3_in(V_limit,V_cnum_0,C,V_cnum_0,D,V_limit,V_cnum_0,C,V_cnum_0):1+ eval_subsetdump_bb7_in(V_limit,V_cnum_0,C,V_cnum_0,E,V_cnum_0,F,V_limit,V_cnum_0,C,V_cnum_0):1+ eval_subsetdump_bb1_in(V_limit,G,H)
     [V_limit>=V_cnum_0+1,C>=1,0>=E+1,V_cnum_0+1=G,H=4,F=3,D=2,B=4] 
* CE 33: eval_subsetdump_bb1_in(V_limit,V_cnum_0,B) = 3+ eval_subsetdump_bb3_in(V_limit,V_cnum_0,C,V_cnum_0,D,V_limit,V_cnum_0,C,V_limit):2+ eval_subsetdump_bb7_in(V_limit,V_cnum_0,C,V_limit,E,V_cnum_0,F,V_limit,V_cnum_0,C,V_limit):2+ eval_subsetdump_bb1_in(V_limit,G,H)
     [V_limit>=V_cnum_0+1,C>=1,0>=E+1,V_limit+1=G,H=4,F=3,D=2,B=4] 
* CE 34: eval_subsetdump_bb1_in(V_limit,V_cnum_0,B) = 3+ eval_subsetdump_bb3_in(V_limit,V_cnum_0,C,V_cnum_0,D,V_limit,V_cnum_0,C,E):3+ eval_subsetdump_bb7_in(V_limit,V_cnum_0,C,E,F,V_cnum_0,G,V_limit,V_cnum_0,C,E):2+ eval_subsetdump_bb1_in(V_limit,H,I)
     [V_limit>=E+1,E>=V_cnum_0+1,C>=1,0>=F+1,E+1=H,I=4,G=3,D=2,B=4] 
* CE 35: eval_subsetdump_bb1_in(V_limit,V_cnum_0,B) = 2+ eval_subsetdump_bb3_in(V_limit,V_cnum_0,C,V_cnum_0,D,V_limit,V_cnum_0,C,V_cnum_0):1+ eval_subsetdump_bb1_in(V_limit,E,F)
     [V_limit>=V_cnum_0+1,0>=C+1,V_cnum_0+1=E,F=4,D=2,B=4] 
* CE 36: eval_subsetdump_bb1_in(V_limit,V_cnum_0,B) = 2+ eval_subsetdump_bb3_in(V_limit,V_cnum_0,C,V_cnum_0,D,V_limit,V_cnum_0,C,V_limit):2+ eval_subsetdump_bb1_in(V_limit,E,F)
     [V_limit>=V_cnum_0+1,0>=C+1,V_limit+1=E,F=4,D=2,B=4] 
* CE 37: eval_subsetdump_bb1_in(V_limit,V_cnum_0,B) = 2+ eval_subsetdump_bb3_in(V_limit,V_cnum_0,C,V_cnum_0,D,V_limit,V_cnum_0,C,E):3+ eval_subsetdump_bb1_in(V_limit,F,G)
     [V_limit>=E+1,E>=V_cnum_0+1,0>=C+1,E+1=F,G=4,D=2,B=4] 
* CE 38: eval_subsetdump_bb1_in(V_limit,V_cnum_0,B) = 2+ eval_subsetdump_bb3_in(V_limit,V_cnum_0,C,V_cnum_0,D,V_limit,V_cnum_0,C,V_cnum_0):1+ eval_subsetdump_bb1_in(V_limit,E,F)
     [V_limit>=V_cnum_0+1,C>=1,V_cnum_0+1=E,F=4,D=2,B=4] 
* CE 39: eval_subsetdump_bb1_in(V_limit,V_cnum_0,B) = 2+ eval_subsetdump_bb3_in(V_limit,V_cnum_0,C,V_cnum_0,D,V_limit,V_cnum_0,C,V_limit):2+ eval_subsetdump_bb1_in(V_limit,E,F)
     [V_limit>=V_cnum_0+1,C>=1,V_limit+1=E,F=4,D=2,B=4] 
* CE 40: eval_subsetdump_bb1_in(V_limit,V_cnum_0,B) = 2+ eval_subsetdump_bb3_in(V_limit,V_cnum_0,C,V_cnum_0,D,V_limit,V_cnum_0,C,E):3+ eval_subsetdump_bb1_in(V_limit,F,G)
     [V_limit>=E+1,E>=V_cnum_0+1,C>=1,E+1=F,G=4,D=2,B=4] 

### Cost equations --> "Loop" of eval_subsetdump_bb1_in/3 
* CEs [25,28,31,34,37,40] --> Loop 14 
* CEs [22,23,26,29,32,35,38] --> Loop 15 
* CEs [24,27,30,33,36,39] --> Loop 16 
* CEs [21] --> Loop 17 

#### Loops of eval_subsetdump_bb1_in/3 
* Loop 14: eval_subsetdump_bb1_in(V_limit,V_cnum_0,B)->  eval_subsetdump_bb1_in(V_limit,V_cnum_0',B')
                  [V_limit>=V_cnum_0',V_cnum_0'>=V_cnum_0+2,B'=4,B=4] 
* Loop 15: eval_subsetdump_bb1_in(V_limit,V_cnum_0,B)->  eval_subsetdump_bb1_in(V_limit,V_cnum_0',B')
                  [V_limit>=V_cnum_0+1,V_cnum_0+1=V_cnum_0',B'=4,B=4] 
* Loop 16: eval_subsetdump_bb1_in(V_limit,V_cnum_0,B)->  eval_subsetdump_bb1_in(V_limit,V_cnum_0',B')
                  [V_limit>=V_cnum_0+1,V_limit+1=V_cnum_0',B'=4,B=4] 
* Loop 17: eval_subsetdump_bb1_in(V_limit,V_cnum_0,B) [V_cnum_0>=V_limit,B=4] 

### Ranking functions of CR eval_subsetdump_bb1_in(V_limit,V_cnum_0,B) 
* RF of phase [14,15]: [V_limit-V_cnum_0]

#### Partial ranking functions of CR eval_subsetdump_bb1_in(V_limit,V_cnum_0,B) 
* Partial RF of phase [14,15]:
  - RF of loop [14:1]:
    V_limit-V_cnum_0-1
  - RF of loop [15:1]:
    V_limit-V_cnum_0

Discarded unfeasible chain [[14,15]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_subsetdump_bb1_in(V_limit,V_cnum_0,B) 
* [[14,15],17]
* [[14,15],16,17]
* [17]
* [16,17]


### Merging Chains  eval_subsetdump_bb1_in/3 into  External patterns of execution 
* [[17]] --> 1 
* [[17,16],[17,16,[14,15]],[17,[14,15]]] --> 2 


### Specialization of cost equations eval_subsetdump_start/2 
* CE 2 is refined into CE [41,42] 


#### Refined cost equations eval_subsetdump_start/2 
* CE 41: eval_subsetdump_start(V_limit,B) = 1+ eval_subsetdump_bb1_in(V_limit,C,D):1
     [0>=V_limit,D=4,C=0] 
* CE 42: eval_subsetdump_start(V_limit,B) = 1+ eval_subsetdump_bb1_in(V_limit,C,D):2
     [V_limit>=1,D=4,C=0] 

### Cost equations --> "Loop" of eval_subsetdump_start/2 
* CEs [42] --> Loop 18 
* CEs [41] --> Loop 19 

#### Loops of eval_subsetdump_start/2 
* Loop 18: eval_subsetdump_start(V_limit,B) [V_limit>=1] 
* Loop 19: eval_subsetdump_start(V_limit,B) [0>=V_limit] 

### Ranking functions of CR eval_subsetdump_start(V_limit,B) 

#### Partial ranking functions of CR eval_subsetdump_start(V_limit,B) 


### Resulting Chains:eval_subsetdump_start(V_limit,B) 
* [19]
* [18]


### Merging Chains  eval_subsetdump_start/2 into  External patterns of execution 
* [[19]] --> 1 
* [[18]] --> 2 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 17 

#### Computing cost of phase [9] 

#### Simplifying cost structure of CE 18 

#### Cost of loops [9] 

 * loop 9:eval_subsetdump_bb3_in(V_limit,V_cnum_0,V_1,V_cnum_1,B,C,D,E,F) -> [eval_subsetdump_bb3_in(V_limit',V_cnum_0',V_1',V_cnum_1',B',C',D',E',F')] 
1
##### Pending set eval_subsetdump_bb3_in(V_limit,V_cnum_0,V_1,V_cnum_1,B,C,D,E,F)
* Psum in Loop 9: [it(9)=<1]

###### Computing sum for it(9)=<1  in Loop 9 
   - Applying inductive sum strategy 
     - head Candidate: V_limit-V_cnum_1 
     - head Candidate: V_limit-V_cnum_1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_limit-V_cnum_1 
     - tail Candidate: V_limit-V_cnum_1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(9)=<V_limit-V_cnum_1,it(9)=<V_limit-V_cnum_1,it(9)=<V_limit-V_cnum_1-V_limit'+V_cnum_1',it(9)=<V_limit-V_cnum_1-V_limit'+V_cnum_1'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [9] 

#### Simplifying cost structure of phase [9] 

#### Cost of phase [9]:eval_subsetdump_bb3_in(V_limit,V_cnum_0,V_1,V_cnum_1,B,C,D,E,F) -> [eval_subsetdump_bb3_in(V_limit',V_cnum_0',V_1',V_cnum_1',B',C',D',E',F')] 
1*it(9)+0
  Such that:it(9) =< V_limit-V_cnum_1
it(9) =< V_limit-V_cnum_1-V_limit'+V_cnum_1'

#### Simplifying cost structure of chain [[9],11] 

#### Simplifying cost structure of CE 16 

#### Found solution for phase  [9] in the cache 

#### Cost of phase [9]:eval_subsetdump_bb3_in(V_limit,V_cnum_0,V_1,V_cnum_1,B,C,D,E,F) -> [eval_subsetdump_bb3_in(V_limit',V_cnum_0',V_1',V_cnum_1',B',C',D',E',F')] 
1*it(9)+0
  Such that:it(9) =< V_limit-V_cnum_1
it(9) =< V_limit-V_cnum_1-V_limit'+V_cnum_1'

#### Simplifying cost structure of chain [[9],10] 

#### Cost of chains of eval_subsetdump_bb3_in(V_limit,V_cnum_0,V_1,V_cnum_1,B,C,D,E,F):
* Chain [[9],11]: 1*it(9)+0
  Such that:it(9) =< V_limit-V_cnum_1

  with precondition: [B=2,V_limit=C,V_cnum_0=D,V_1=E,V_limit=F,V_cnum_1>=V_cnum_0,V_limit>=V_cnum_1+1] 

* Chain [[9],10]: 1*it(9)+0
  Such that:it(9) =< -V_cnum_1+F

  with precondition: [B=2,V_limit=C,V_cnum_0=D,V_1=E,V_cnum_1>=V_cnum_0,F>=V_cnum_1+1,V_limit>=F+1] 

* Chain [10]: 0
  with precondition: [B=2,E=V_1,V_limit=C,V_cnum_0=D,V_cnum_1=F,V_cnum_1>=V_cnum_0,V_limit>=V_cnum_1+1] 


#### Simplifying cost structure of CE 19 

#### Computing cost of phase [12] 

#### Simplifying cost structure of CE 20 

#### Cost of loops [12] 

 * loop 12:eval_subsetdump_bb7_in(V_limit,V_cnum_0,V_1,V_cnum_1,V_7,V_rangestart_0,B,C,D,E,F) -> [eval_subsetdump_bb7_in(V_limit',V_cnum_0',V_1',V_cnum_1',V_7',V_rangestart_0',B',C',D',E',F')] 
1
##### Pending set eval_subsetdump_bb7_in(V_limit,V_cnum_0,V_1,V_cnum_1,V_7,V_rangestart_0,B,C,D,E,F)
* Psum in Loop 12: [it(12)=<1]

###### Computing sum for it(12)=<1  in Loop 12 
   - Applying inductive sum strategy 
     - head Candidate: V_cnum_1-V_rangestart_0 
     - head Candidate: V_cnum_1-V_rangestart_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_cnum_1-V_rangestart_0 
     - tail Candidate: V_cnum_1-V_rangestart_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(12)=<V_cnum_1-V_rangestart_0,it(12)=<V_cnum_1-V_rangestart_0,it(12)=<V_cnum_1-V_rangestart_0-V_cnum_1'+V_rangestart_0',it(12)=<V_cnum_1-V_rangestart_0-V_cnum_1'+V_rangestart_0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [12] 

#### Simplifying cost structure of phase [12] 

#### Cost of phase [12]:eval_subsetdump_bb7_in(V_limit,V_cnum_0,V_1,V_cnum_1,V_7,V_rangestart_0,B,C,D,E,F) -> [eval_subsetdump_bb7_in(V_limit',V_cnum_0',V_1',V_cnum_1',V_7',V_rangestart_0',B',C',D',E',F')] 
1*it(12)+0
  Such that:it(12) =< V_cnum_1-V_rangestart_0
it(12) =< V_cnum_1-V_rangestart_0-V_cnum_1'+V_rangestart_0'

#### Simplifying cost structure of chain [[12],13] 

#### Cost of chains of eval_subsetdump_bb7_in(V_limit,V_cnum_0,V_1,V_cnum_1,V_7,V_rangestart_0,B,C,D,E,F):
* Chain [[12],13]: 1*it(12)+0
  Such that:it(12) =< V_cnum_1-V_rangestart_0

  with precondition: [B=3,V_limit=C,V_cnum_0=D,V_1=E,V_cnum_1=F,V_rangestart_0>=V_cnum_0,V_cnum_1>=V_rangestart_0+1] 

* Chain [13]: 0
  with precondition: [B=3,C=V_limit,E=V_1,V_cnum_0=D,V_cnum_1=F,V_rangestart_0>=V_cnum_0,V_rangestart_0>=V_cnum_1] 


#### Simplifying cost structure of CE 21 

#### Computing cost of phase [14,15] 
 * Renamed intermediate variables: 
[ (eq(25,1),it(9))>>s(1)]
 * Renamed intermediate variables: 
[ (eq(25,2),it(12))>>s(2)]

#### Simplifying cost structure of CE 25 
 * Joined equivalent variables [s(1),s(2)] into s(1)
 * Renamed intermediate variables: 
[ (eq(28,1),it(9))>>s(3)]
 * Renamed intermediate variables: 
[ (eq(28,2),it(12))>>s(4)]

#### Simplifying cost structure of CE 28 
 * Joined equivalent variables [s(3),s(4)] into s(3)
 * Renamed intermediate variables: 
[ (eq(31,1),it(9))>>s(5)]
 * Renamed intermediate variables: 
[ (eq(31,2),it(12))>>s(6)]

#### Simplifying cost structure of CE 31 
 * Joined equivalent variables [s(5),s(6)] into s(5)
 * Renamed intermediate variables: 
[ (eq(34,1),it(9))>>s(7)]
 * Renamed intermediate variables: 
[ (eq(34,2),it(12))>>s(8)]

#### Simplifying cost structure of CE 34 
 * Joined equivalent variables [s(7),s(8)] into s(7)
 * Renamed intermediate variables: 
[ (eq(37,1),it(9))>>s(9)]

#### Simplifying cost structure of CE 37 
 * Renamed intermediate variables: 
[ (eq(40,1),it(9))>>s(10)]

#### Simplifying cost structure of CE 40 
 * Joined equivalent variables [aux(5),aux(1),aux(2),aux(3),aux(4)] into aux(5)
 * Joined equivalent variables [s(9),s(10)] into s(9)
 * Joined equivalent variables [s(1),s(3),s(5),s(7),s(9)] into s(1)
 * Renamed intermediate variables: 
[ (it(14),aux(5))>>s(11), (it(14),s(1))>>s(12)]

#### Simplifying cost structure of CE 22 

#### Simplifying cost structure of CE 23 

#### Simplifying cost structure of CE 26 

#### Simplifying cost structure of CE 29 

#### Simplifying cost structure of CE 32 

#### Simplifying cost structure of CE 35 

#### Simplifying cost structure of CE 38 

#### Cost of loops [14,15] 

 * loop 14:eval_subsetdump_bb1_in(V_limit,V_cnum_0,B) -> [eval_subsetdump_bb1_in(V_limit',V_cnum_0',B')] 
10*s(12)+3
  Such that:s(11) =< -V_cnum_0+V_cnum_0'
s(12) =< s(11)

 * loop 15:eval_subsetdump_bb1_in(V_limit,V_cnum_0,B) -> [eval_subsetdump_bb1_in(V_limit',V_cnum_0',B')] 
3
##### Pending set eval_subsetdump_bb1_in(V_limit,V_cnum_0,B)
* Psum in Loop 14: [it(14)=<1,s(14)=< -V_cnum_0+V_cnum_0']
* Psum in Loop 15: [it(15)=<1]

###### Computing sum for it(14)=<1  in Loop 14 
   - Applying inductive sum strategy 
     - head Candidate: V_limit-V_cnum_0 
       - Loop 15 is collaborative and bounds [it(15)] 
     - head Candidate: V_limit-V_cnum_0-1 
       - Loop 15 is collaborative and bounds [it(15)] 
     - tail Candidate: V_limit-V_cnum_0 
       - Loop 15 is collaborative and bounds [it(15)] 
     - tail Candidate: V_limit-V_cnum_0-1 
       - Loop 15 is collaborative and bounds [it(15)] 
 * Adding constraints: [it(14)+it(15)=<V_limit-V_cnum_0,it(14)+it(15)=<V_limit-V_cnum_0-1,it(14)+it(15)=<V_limit-V_cnum_0-V_limit'+V_cnum_0',it(14)+it(15)=<V_limit-V_cnum_0-V_limit'+V_cnum_0'] 

##### Pending set eval_subsetdump_0(V_limit,B)
* Psum in Loop 14: [s(14)=< -V_cnum_0+V_cnum_0']
* Psum in Loop 15: [it(15)=<1]

###### Computing sum for s(14)=< -V_cnum_0+V_cnum_0'  in Loop 14 
   - Applying inductive sum strategy 
     - head Candidate: V_limit-V_cnum_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_limit-V_cnum_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(15)+s(14)=<V_limit-V_cnum_0,it(15)+s(14)=<V_limit-V_cnum_0-V_limit'+V_cnum_0'] 

##### Pending set eval_subsetdump_0(V_limit,B)
* Psum in Loop 15: [it(15)=<1]

###### Computing sum for it(15)=<1  in Loop 15 
   - Applying inductive sum strategy 
     - head Candidate: V_limit-V_cnum_0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_limit-V_cnum_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_limit-V_cnum_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_limit-V_cnum_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(14)+it(15)=<V_limit-V_cnum_0,it(14)+it(15)=<V_limit-V_cnum_0,it(14)+it(15)=<V_limit-V_cnum_0-V_limit'+V_cnum_0',it(14)+it(15)=<V_limit-V_cnum_0-V_limit'+V_cnum_0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [14,15] 

#### Simplifying cost structure of phase [14,15] 
 * Joined equivalent variables [it(14),it(15)] into it(14)

#### Cost of phase [14,15]:eval_subsetdump_bb1_in(V_limit,V_cnum_0,B) -> [eval_subsetdump_bb1_in(V_limit',V_cnum_0',B')] 
6*it(14)+10*s(13)+0
  Such that:aux(6) =< V_limit-V_cnum_0
aux(7) =< V_limit-V_cnum_0-V_limit'+V_cnum_0'
it(14) =< aux(6)
s(14) =< aux(6)
it(14) =< aux(7)
s(14) =< aux(7)
s(13) =< s(14)

#### Simplifying cost structure of chain [[14,15],17] 
 * Joined equivalent variables [aux(8),aux(6),aux(7)] into aux(8)
 * Joined equivalent variables [aux(8),s(14)] into aux(8)
 * Joined equivalent variables [it(14),s(13)] into it(14)
 * Renamed intermediate variables: 
[ (eq(24,1),it(9))>>s(15)]
 * Renamed intermediate variables: 
[ (eq(24,2),it(12))>>s(16)]

#### Simplifying cost structure of CE 24 
 * Joined equivalent variables [s(15),s(16)] into s(15)
 * Renamed intermediate variables: 
[ (eq(27,1),it(9))>>s(17)]
 * Renamed intermediate variables: 
[ (eq(27,2),it(12))>>s(18)]

#### Simplifying cost structure of CE 27 
 * Joined equivalent variables [s(17),s(18)] into s(17)
 * Renamed intermediate variables: 
[ (eq(30,1),it(9))>>s(19)]
 * Renamed intermediate variables: 
[ (eq(30,2),it(12))>>s(20)]

#### Simplifying cost structure of CE 30 
 * Joined equivalent variables [s(19),s(20)] into s(19)
 * Renamed intermediate variables: 
[ (eq(33,1),it(9))>>s(21)]
 * Renamed intermediate variables: 
[ (eq(33,2),it(12))>>s(22)]

#### Simplifying cost structure of CE 33 
 * Joined equivalent variables [s(21),s(22)] into s(21)
 * Renamed intermediate variables: 
[ (eq(36,1),it(9))>>s(23)]

#### Simplifying cost structure of CE 36 
 * Renamed intermediate variables: 
[ (eq(39,1),it(9))>>s(24)]

#### Simplifying cost structure of CE 39 
 * Joined equivalent variables [aux(13),aux(9),aux(10),aux(11),aux(12)] into aux(13)
 * Joined equivalent variables [s(23),s(24)] into s(23)
 * Joined equivalent variables [s(15),s(17),s(19),s(21),s(23)] into s(15)

#### Simplifying cost structure of chain [16,17] 

#### Found solution for phase  [14,15] in the cache 

#### Cost of phase [14,15]:eval_subsetdump_bb1_in(V_limit,V_cnum_0,B) -> [eval_subsetdump_bb1_in(V_limit',V_cnum_0',B')] 
6*it(14)+10*s(13)+0
  Such that:aux(6) =< V_limit-V_cnum_0
aux(7) =< V_limit-V_cnum_0-V_limit'+V_cnum_0'
it(14) =< aux(6)
s(14) =< aux(6)
it(14) =< aux(7)
s(14) =< aux(7)
s(13) =< s(14)

#### Simplifying cost structure of chain [[14,15],16,17] 
 * Joined equivalent variables [aux(14),aux(7),aux(13)] into aux(14)
 * Renamed intermediate variables: 
[ (ch([16,17]),aux(13))>>s(25), (ch([16,17]),s(15))>>s(26)]
 * Renamed intermediate variables: 
[ (ch([[14,15],16,17]),aux(6))>>s(27), (ch([[14,15],16,17]),aux(14))>>s(28), (ch([[14,15],16,17]),s(15))>>s(29), (ch([[14,15],16,17]),it(14))>>s(30), (ch([[14,15],16,17]),s(14))>>s(31), (ch([[14,15],16,17]),s(13))>>s(32)]
 * Renamed intermediate variables: 
[ (ch([[14,15],17]),aux(8))>>s(33), (ch([[14,15],17]),it(14))>>s(34)]
 * Joined equivalent variables [aux(15),s(27),s(33)] into aux(15)
 * Joined equivalent variables [aux(16),s(25),s(28)] into aux(16)
 * Joined equivalent variables [s(26),s(29)] into s(26)

#### Cost of chains of eval_subsetdump_bb1_in(V_limit,V_cnum_0,B):
* Chain [[14,15],17]: 16*it(14)+0
  Such that:aux(8) =< V_limit-V_cnum_0
it(14) =< aux(8)

  with precondition: [B=4,V_cnum_0>=0,V_limit>=V_cnum_0+1] 

* Chain [[14,15],16,17]: 6*it(14)+10*s(13)+10*s(15)+3
  Such that:aux(6) =< V_limit-V_cnum_0
aux(14) =< V_limit-V_cnum_0+1
s(15) =< aux(14)
it(14) =< aux(6)
s(14) =< aux(6)
it(14) =< aux(14)
s(14) =< aux(14)
s(13) =< s(14)

  with precondition: [B=4,V_cnum_0>=0,V_limit>=V_cnum_0+2] 

* Chain [17]: 0
  with precondition: [B=4,V_cnum_0>=0,V_cnum_0>=V_limit] 

* Chain [16,17]: 10*s(15)+3
  Such that:aux(13) =< V_limit-V_cnum_0+1
s(15) =< aux(13)

  with precondition: [B=4,V_cnum_0>=0,V_limit>=V_cnum_0+1] 


#### Simplifying cost structure of CE 41 
 * Renamed intermediate variables: 
[ (eq(42,1),aux(15))>>s(35), (eq(42,1),aux(16))>>s(36), (eq(42,1),s(26))>>s(37), (eq(42,1),s(30))>>s(38), (eq(42,1),s(31))>>s(39), (eq(42,1),s(32))>>s(40), (eq(42,1),s(34))>>s(41)]

#### Simplifying cost structure of CE 42 

#### Cost of chains of eval_subsetdump_start(V_limit,B):
* Chain [19]: 1
  with precondition: [0>=V_limit] 

* Chain [18]: 20*s(37)+6*s(38)+10*s(40)+16*s(41)+4
  Such that:s(35) =< V_limit
s(36) =< V_limit+1
s(37) =< s(36)
s(38) =< s(35)
s(39) =< s(35)
s(38) =< s(36)
s(39) =< s(36)
s(40) =< s(39)
s(41) =< s(35)

  with precondition: [V_limit>=1] 


Closed-form bounds of eval_subsetdump_start(V_limit,B): 
-------------------------------------
* Chain [19] with precondition: [0>=V_limit] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [18] with precondition: [V_limit>=1] 
    - Upper bound: 52*V_limit+24 
    - Complexity: n 

### Maximum cost of eval_subsetdump_start(V_limit,B): nat(V_limit)*32+3+nat(V_limit+1)*20+1 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 67 ms.
* Invariants computed in 43 ms.
   - Backward Invariants 21 ms.
   - Transitive Invariants 9 ms.
* Refinement performed in 139 ms.
* Termination proved in 9 ms.
* Upper bounds computed in 106 ms.
   - Equation cost structures 41 ms.
   - Phase cost structures 54 ms.
   - Chain cost structures 22 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 417 ms.


Warning: Ignored call to eval_send_tree_stop/1 in equation eval_send_tree_bb9_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_send_tree_bb5_in/17]
1. recursive : [eval_send_tree_12/7,eval_send_tree_13/8,eval_send_tree_16/7,eval_send_tree_17/8,eval_send_tree_18/8,eval_send_tree_19/8,eval_send_tree_bb1_in/6,eval_send_tree_bb2_in/6,eval_send_tree_bb3_in/7,eval_send_tree_bb4_in/7,eval_send_tree_bb6_in/7,eval_send_tree_bb7_in/8,eval_send_tree_bb8_in/10,loop_cont_eval_send_tree_bb5_in/11]
2. non_recursive : [eval_send_tree_bb9_in/1]
3. non_recursive : [loop_cont_eval_send_tree_bb1_in/2]
4. non_recursive : [eval_send_tree_9/4]
5. non_recursive : [eval_send_tree_8/4]
6. non_recursive : [eval_send_tree_7/4]
7. non_recursive : [eval_send_tree_6/4]
8. non_recursive : [eval_send_tree_5/4]
9. non_recursive : [eval_send_tree_4/4]
10. non_recursive : [eval_send_tree_3/4]
11. non_recursive : [eval_send_tree_2/4]
12. non_recursive : [eval_send_tree_1/4]
13. non_recursive : [eval_send_tree_0/4]
14. non_recursive : [eval_send_tree_bb0_in/4]
15. non_recursive : [eval_send_tree_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_send_tree_bb5_in/17
1. SCC is partially evaluated into eval_send_tree_bb1_in/6
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is partially evaluated into eval_send_tree_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_send_tree_bb5_in/17 
* CE 10 is refined into CE [11] 
* CE 9 is refined into CE [12] 


#### Refined cost equations eval_send_tree_bb5_in/17 
* CE 11: eval_send_tree_bb5_in(A,B,C,D,E,F,G,H,A,B,C,I,E,F,J,G,K) = 0
     [F>=G,C>=F+1,A>=E,1>=G,F=I+1,F=D+1,K=0,H=2] 
* CE 12: eval_send_tree_bb5_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,V_1,V_count_1,B,C,D,E,F,G,H,I,J,K) = 1+ eval_send_tree_bb5_in(V_max_code,V_max_count,V_min_count,L,V_n_0,V_1,M,N,C,D,E,F,G,H,I,J,K)
     [V_1>=V_count_1,V_min_count>=V_1+1,V_max_code>=V_n_0,V_count_1>=2,V_count_1=M+1,V_1=L+1,V_1=V_count_0+1,N=2,B=2] 

### Cost equations --> "Loop" of eval_send_tree_bb5_in/17 
* CEs [12] --> Loop 10 
* CEs [11] --> Loop 11 

#### Loops of eval_send_tree_bb5_in/17 
* Loop 10: eval_send_tree_bb5_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,V_1,V_count_1,B,C,D,E,F,G,H,I,J,K)->  eval_send_tree_bb5_in(V_max_code,V_max_count,V_min_count,V_count_0',V_n_0,V_1,V_count_1',B',C,D,E,F,G,H,I,J,K)
                  [V_1>=V_count_1,V_min_count>=V_1+1,V_max_code>=V_n_0,V_count_1>=2,V_count_1=V_count_1'+1,V_1=V_count_0'+1,V_1=V_count_0+1,B'=2,B=2] 
* Loop 11: eval_send_tree_bb5_in(A,B,C,D,E,F,G,H,A,B,C,I,E,F,J,G,K) [F>=G,C>=F+1,A>=E,1>=G,F=I+1,F=D+1,K=0,H=2] 

### Ranking functions of CR eval_send_tree_bb5_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,V_1,V_count_1,B,C,D,E,F,G,H,I,J,K) 
* RF of phase [10]: [V_count_1-1]

#### Partial ranking functions of CR eval_send_tree_bb5_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,V_1,V_count_1,B,C,D,E,F,G,H,I,J,K) 
* Partial RF of phase [10]:
  - RF of loop [10:1]:
    V_count_1-1

Discarded unfeasible chain [[10]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_send_tree_bb5_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,V_1,V_count_1,B,C,D,E,F,G,H,I,J,K) 
* [[10],11]
* [11]


### Merging Chains  eval_send_tree_bb5_in/17 into  External patterns of execution 
* [[11,[10]]] --> 1 
* [[11]] --> 2 


### Specialization of cost equations eval_send_tree_bb1_in/6 
* CE 8 is refined into CE [13] 
* CE 4 is refined into CE [14,15] 
* CE 6 is refined into CE [16,17] 
* CE 3 is refined into CE [18] 
* CE 5 is refined into CE [19] 
* CE 7 is refined into CE [20] 


#### Refined cost equations eval_send_tree_bb1_in/6 
* CE 13: eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B) = 0
     [V_n_0>=V_max_code+1,B=3] 
* CE 14: eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B) = 2+ eval_send_tree_bb5_in(V_max_code,V_max_count,V_min_count,C,V_n_0,D,D,E,V_max_code,V_max_count,V_min_count,F,V_n_0,D,G,H,I):1+ eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,J,K,L)
     [V_max_code>=V_n_0,V_min_count>=D+1,V_max_count>=D+1,D>=2,V_n_0+1=K,D=F+1,D=C+1,D=V_count_0+1,L=3,J=0,I=0,H=1,E=2,B=3] 
* CE 15: eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B) = 2+ eval_send_tree_bb5_in(V_max_code,V_max_count,V_min_count,C,V_n_0,D,D,E,V_max_code,V_max_count,V_min_count,F,V_n_0,D,G,D,H):2+ eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,I,J,K)
     [V_max_code>=V_n_0,V_min_count>=D+1,V_max_count>=D+1,1>=D,V_n_0+1=J,D=F+1,D=C+1,D=V_count_0+1,K=3,I=0,H=0,E=2,B=3] 
* CE 16: eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B) = 2+ eval_send_tree_bb5_in(V_max_code,V_max_count,V_min_count,C,V_n_0,D,D,E,V_max_code,V_max_count,V_min_count,F,V_n_0,D,G,H,I):1+ eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,J,K,L)
     [V_max_code>=V_n_0,D>=V_max_count,V_min_count>=D+1,D>=2,V_n_0+1=K,D=F+1,D=C+1,D=V_count_0+1,L=3,J=0,I=0,H=1,E=2,B=3] 
* CE 17: eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B) = 2+ eval_send_tree_bb5_in(V_max_code,V_max_count,V_min_count,C,V_n_0,D,D,E,V_max_code,V_max_count,V_min_count,F,V_n_0,D,G,D,H):2+ eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,I,J,K)
     [V_max_code>=V_n_0,D>=V_max_count,V_min_count>=D+1,1>=D,V_n_0+1=J,D=F+1,D=C+1,D=V_count_0+1,K=3,I=0,H=0,E=2,B=3] 
* CE 18: eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B) = 1+ eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,C,D,E)
     [V_max_code>=V_n_0,V_max_count>=V_count_0+2,V_n_0+1=D,V_count_0+1=C,E=3,B=3] 
* CE 19: eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B) = 1+ eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,C,D,E)
     [V_max_code>=V_n_0,V_max_count>=V_count_0+2,V_count_0+1>=V_min_count,V_n_0+1=D,E=3,C=0,B=3] 
* CE 20: eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B) = 1+ eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,C,D,E)
     [V_max_code>=V_n_0,V_count_0+1>=V_min_count,V_count_0+1>=V_max_count,V_n_0+1=D,E=3,C=0,B=3] 

### Cost equations --> "Loop" of eval_send_tree_bb1_in/6 
* CEs [18] --> Loop 12 
* CEs [19] --> Loop 13 
* CEs [20] --> Loop 14 
* CEs [14] --> Loop 15 
* CEs [16] --> Loop 16 
* CEs [15] --> Loop 17 
* CEs [17] --> Loop 18 
* CEs [13] --> Loop 19 

#### Loops of eval_send_tree_bb1_in/6 
* Loop 12: eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)->  eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0',V_n_0',B')
                  [V_max_code>=V_n_0,V_max_count>=V_count_0+2,V_n_0+1=V_n_0',V_count_0+1=V_count_0',B'=3,B=3] 
* Loop 13: eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)->  eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0',V_n_0',B')
                  [V_max_code>=V_n_0,V_max_count>=V_count_0+2,V_count_0+1>=V_min_count,V_n_0+1=V_n_0',B'=3,V_count_0'=0,B=3] 
* Loop 14: eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)->  eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0',V_n_0',B')
                  [V_max_code>=V_n_0,V_count_0+1>=V_min_count,V_count_0+1>=V_max_count,V_n_0+1=V_n_0',B'=3,V_count_0'=0,B=3] 
* Loop 15: eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)->  eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0',V_n_0',B')
                  [V_max_code>=V_n_0,V_min_count>=V_count_0+2,V_max_count>=V_count_0+2,V_count_0>=1,V_n_0+1=V_n_0',B'=3,V_count_0'=0,B=3] 
* Loop 16: eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)->  eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0',V_n_0',B')
                  [V_max_code>=V_n_0,V_min_count>=V_count_0+2,V_count_0+1>=V_max_count,V_count_0>=1,V_n_0+1=V_n_0',B'=3,V_count_0'=0,B=3] 
* Loop 17: eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)->  eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0',V_n_0',B')
                  [V_max_code>=V_n_0,V_min_count>=V_count_0+2,V_max_count>=V_count_0+2,0>=V_count_0,V_n_0+1=V_n_0',B'=3,V_count_0'=0,B=3] 
* Loop 18: eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)->  eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0',V_n_0',B')
                  [V_max_code>=V_n_0,V_min_count>=V_count_0+2,V_count_0+1>=V_max_count,0>=V_count_0,V_n_0+1=V_n_0',B'=3,V_count_0'=0,B=3] 
* Loop 19: eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B) [V_n_0>=V_max_code+1,B=3] 

### Ranking functions of CR eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B) 
* RF of phase [12,13,14,15,16,17,18]: [V_max_code-V_n_0+1]

#### Partial ranking functions of CR eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B) 
* Partial RF of phase [12,13,14,15,16,17,18]:
  - RF of loop [12:1]:
    V_max_code-V_count_0+1 depends on loops [13:1,14:1,15:1,16:1] 
    V_max_count-V_count_0-1 depends on loops [13:1,14:1,15:1,16:1] 
  - RF of loop [12:1,13:1,14:1,15:1,16:1,17:1,18:1]:
    V_max_code-V_n_0+1
  - RF of loop [15:1,16:1]:
    V_count_0 depends on loops [12:1] 
  - RF of loop [16:1]:
    -V_max_count+V_count_0+2 depends on loops [12:1] 

Discarded unfeasible chain [[12,13,14,15,16,17,18]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B) 
* [[12,13,14,15,16,17,18],19]
* [19]


### Merging Chains  eval_send_tree_bb1_in/6 into  External patterns of execution 
* [[19]] --> 1 
* [[19,[12,13,14,15,16,17,18]]] --> 2 


### Specialization of cost equations eval_send_tree_start/4 
* CE 2 is refined into CE [21,22] 


#### Refined cost equations eval_send_tree_start/4 
* CE 21: eval_send_tree_start(V_max_code,V_max_count,V_min_count,B) = 1+ eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,C,D,E):1
     [0>=V_max_code+1,E=3,D=0,C=0] 
* CE 22: eval_send_tree_start(V_max_code,V_max_count,V_min_count,B) = 1+ eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,C,D,E):2
     [V_max_code>=0,E=3,D=0,C=0] 

### Cost equations --> "Loop" of eval_send_tree_start/4 
* CEs [22] --> Loop 20 
* CEs [21] --> Loop 21 

#### Loops of eval_send_tree_start/4 
* Loop 20: eval_send_tree_start(V_max_code,V_max_count,V_min_count,B) [V_max_code>=0] 
* Loop 21: eval_send_tree_start(V_max_code,V_max_count,V_min_count,B) [0>=V_max_code+1] 

### Ranking functions of CR eval_send_tree_start(V_max_code,V_max_count,V_min_count,B) 

#### Partial ranking functions of CR eval_send_tree_start(V_max_code,V_max_count,V_min_count,B) 


### Resulting Chains:eval_send_tree_start(V_max_code,V_max_count,V_min_count,B) 
* [21]
* [20]


### Merging Chains  eval_send_tree_start/4 into  External patterns of execution 
* [[21]] --> 1 
* [[20]] --> 2 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 11 

#### Computing cost of phase [10] 

#### Simplifying cost structure of CE 12 

#### Cost of loops [10] 

 * loop 10:eval_send_tree_bb5_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,V_1,V_count_1,B,C,D,E,F,G,H,I,J,K) -> [eval_send_tree_bb5_in(V_max_code',V_max_count',V_min_count',V_count_0',V_n_0',V_1',V_count_1',B',C',D',E',F',G',H',I',J',K')] 
1
##### Pending set eval_send_tree_bb5_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,V_1,V_count_1,B,C,D,E,F,G,H,I,J,K)
* Psum in Loop 10: [it(10)=<1]

###### Computing sum for it(10)=<1  in Loop 10 
   - Applying inductive sum strategy 
     - head Candidate: V_count_1-1 
     - head Candidate: V_count_1-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_count_1-1 
     - tail Candidate: V_count_1-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(10)=<V_count_1-1,it(10)=<V_count_1-1,it(10)=<V_count_1-V_count_1',it(10)=<V_count_1-V_count_1'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [10] 

#### Simplifying cost structure of phase [10] 

#### Cost of phase [10]:eval_send_tree_bb5_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,V_1,V_count_1,B,C,D,E,F,G,H,I,J,K) -> [eval_send_tree_bb5_in(V_max_code',V_max_count',V_min_count',V_count_0',V_n_0',V_1',V_count_1',B',C',D',E',F',G',H',I',J',K')] 
1*it(10)+0
  Such that:it(10) =< V_count_1
it(10) =< V_count_1-V_count_1'

#### Simplifying cost structure of chain [[10],11] 

#### Cost of chains of eval_send_tree_bb5_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,V_1,V_count_1,B,C,D,E,F,G,H,I,J,K):
* Chain [[10],11]: 1*it(10)+0
  Such that:it(10) =< V_count_1

  with precondition: [B=2,J=1,K=0,V_count_0+1=V_1,V_max_code=C,V_max_count=D,V_min_count=E,V_count_0=F,V_n_0=G,V_count_0+1=H,V_count_1>=2,V_min_count>=V_count_0+2,V_max_code>=V_n_0,V_count_0+1>=V_count_1] 

* Chain [11]: 0
  with precondition: [B=2,K=0,D=V_max_count,V_count_0+1=V_1,V_max_code=C,V_min_count=E,V_count_0=F,V_n_0=G,V_count_0+1=H,V_count_1=J,1>=V_count_1,V_min_count>=V_count_0+2,V_max_code>=V_n_0,V_count_0+1>=V_count_1] 


#### Simplifying cost structure of CE 13 

#### Computing cost of phase [12,13,14,15,16,17,18] 

#### Simplifying cost structure of CE 18 

#### Simplifying cost structure of CE 19 

#### Simplifying cost structure of CE 20 
 * Renamed intermediate variables: 
[ (eq(14,1),it(10))>>s(1)]

#### Simplifying cost structure of CE 14 
 * Renamed intermediate variables: 
[ (it(15),s(1))>>s(2)]
 * Renamed intermediate variables: 
[ (eq(16,1),it(10))>>s(3)]

#### Simplifying cost structure of CE 16 
 * Renamed intermediate variables: 
[ (it(16),s(3))>>s(4)]

#### Simplifying cost structure of CE 15 

#### Simplifying cost structure of CE 17 

#### Cost of loops [12,13,14,15,16,17,18] 

 * loop 12:eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B) -> [eval_send_tree_bb1_in(V_max_code',V_max_count',V_min_count',V_count_0',V_n_0',B')] 
1
 * loop 13:eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B) -> [eval_send_tree_bb1_in(V_max_code',V_max_count',V_min_count',V_count_0',V_n_0',B')] 
1
 * loop 14:eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B) -> [eval_send_tree_bb1_in(V_max_code',V_max_count',V_min_count',V_count_0',V_n_0',B')] 
1
 * loop 15:eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B) -> [eval_send_tree_bb1_in(V_max_code',V_max_count',V_min_count',V_count_0',V_n_0',B')] 
1*s(2)+2
  Such that:s(2) =< V_count_0+1

 * loop 16:eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B) -> [eval_send_tree_bb1_in(V_max_code',V_max_count',V_min_count',V_count_0',V_n_0',B')] 
1*s(4)+2
  Such that:s(4) =< V_count_0+1

 * loop 17:eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B) -> [eval_send_tree_bb1_in(V_max_code',V_max_count',V_min_count',V_count_0',V_n_0',B')] 
2
 * loop 18:eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B) -> [eval_send_tree_bb1_in(V_max_code',V_max_count',V_min_count',V_count_0',V_n_0',B')] 
2
##### Pending set eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)
* Psum in Loop 12: [it(12)=<1]
* Psum in Loop 13: [it(13)=<1]
* Psum in Loop 14: [it(14)=<1]
* Psum in Loop 15: [it(15)=<1,s(5)=<V_count_0+1]
* Psum in Loop 16: [it(16)=<1,s(6)=<V_count_0+1]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing sum for it(12)=<1  in Loop 12 
   - Applying inductive sum strategy 
     - head Candidate: V_max_code-V_n_0+1 
       - Loop 13 is collaborative
       - Loop 14 is collaborative
       - Loop 15 is collaborative
       - Loop 16 is collaborative
       - Loop 17 is collaborative
       - Loop 18 is collaborative
     - head Candidate: V_max_code-V_count_0+1 
       - Loop 13 adds an expression [V_n_0]
       - Loop 14 adds an expression [V_n_0'-1]
       - Loop 15 adds an expression [V_n_0]
       - Loop 16 adds an expression [V_n_0]
       - Loop 17 is collaborative
       - Loop 18 is collaborative
     - head Candidate: V_max_code-V_n_0+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_max_count-V_count_0-1 
       - Loop 13 adds an expression [V_n_0'-1]
       - Loop 14 adds an expression [V_n_0'-1]
       - Loop 15 adds an expression [V_min_count-2]
       - Loop 16 adds an expression [V_min_count-2]
       - Loop 17 is collaborative
       - Loop 18 is collaborative
     - tail Candidate: V_max_code-V_n_0+1 
       - Loop 13 is collaborative and bounds [it(13)] 
       - Loop 14 is collaborative and bounds [it(14)] 
       - Loop 15 is collaborative and bounds [it(15)] 
       - Loop 16 is collaborative and bounds [it(16)] 
       - Loop 17 is collaborative and bounds [it(17)] 
       - Loop 18 is collaborative and bounds [it(18)] 
     - tail Candidate: V_max_code-V_count_0+1 
       - Loop 13 adds an expression [V_n_0]
       - Loop 14 adds an expression [V_n_0'-1]
       - Loop 15 adds an expression [V_n_0]
       - Loop 16 adds an expression [V_n_0]
       - Loop 17 is collaborative
       - Loop 18 is collaborative
     - tail Candidate: V_max_code-V_n_0+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_max_count-V_count_0-1 
       - Loop 13 adds an expression [V_n_0'-1]
       - Loop 14 adds an expression [V_n_0'-1]
       - Loop 15 adds an expression [V_min_count-2]
       - Loop 16 adds an expression [V_min_count-2]
       - Loop 17 is collaborative
       - Loop 18 is collaborative
 * Adding constraints: [it(12)=<aux(4)+aux(3)+aux(2)+aux(1)+aux(5),it(12)=<aux(9)+aux(8)+aux(7)+aux(6)+aux(10),it(12)=<aux(14)+aux(13)+aux(12)+aux(11)+aux(15),it(12)=<aux(19)+aux(18)+aux(17)+aux(16)+aux(20),it(12)=<V_max_code-V_n_0+1,aux(5)=<V_max_code-V_count_0+1,it(12)=<V_max_code-V_n_0+1,aux(10)=<V_max_count-V_count_0-1,it(12)+it(13)+it(14)+it(15)+it(16)+it(17)+it(18)=<V_max_code-V_n_0-V_max_code'+V_n_0',aux(15)=<V_max_code-V_count_0-V_max_code'+V_count_0',it(12)+it(13)+it(14)+it(15)+it(16)+it(17)+it(18)=<V_max_code-V_n_0-V_max_code'+V_n_0',aux(20)=<V_max_count-V_count_0-V_max_count'+V_count_0'] 

##### Pending set eval_send_tree_0(V_max_code,V_max_count,V_min_count,B)
* Psum in Loop 13: [it(13)=<1,aux(1)=<V_n_0,aux(11)=<V_n_0,aux(6)=<V_n_0'-1,aux(16)=<V_n_0'-1]
* Psum in Loop 14: [it(14)=<1,aux(2)=<V_n_0'-1,aux(7)=<V_n_0'-1,aux(12)=<V_n_0'-1,aux(17)=<V_n_0'-1]
* Psum in Loop 15: [it(15)=<1,s(5)=<V_count_0+1,aux(8)=<V_min_count-2,aux(18)=<V_min_count-2,aux(3)=<V_n_0,aux(13)=<V_n_0]
* Psum in Loop 16: [it(16)=<1,s(6)=<V_count_0+1,aux(9)=<V_min_count-2,aux(19)=<V_min_count-2,aux(4)=<V_n_0,aux(14)=<V_n_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing sum for it(13)=<1  in Loop 13 
   - Applying inductive sum strategy 
     - head Candidate: V_max_code-V_n_0+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_max_code-V_n_0+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_max_code-V_n_0+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_max_code-V_n_0+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(12)+it(13)=<V_max_code-V_n_0+1,it(12)+it(13)=<V_max_code-V_n_0+1,it(12)+it(13)+it(14)+it(15)+it(16)+it(17)+it(18)=<V_max_code-V_n_0-V_max_code'+V_n_0',it(12)+it(13)+it(14)+it(15)+it(16)+it(17)+it(18)=<V_max_code-V_n_0-V_max_code'+V_n_0'] 

##### Pending set eval_send_tree_0(V_max_code,V_max_count,V_min_count,B)
* Psum in Loop 13: [aux(1)=<V_n_0,aux(11)=<V_n_0,aux(6)=<V_n_0'-1,aux(16)=<V_n_0'-1]
* Psum in Loop 14: [it(14)=<1,aux(2)=<V_n_0'-1,aux(7)=<V_n_0'-1,aux(12)=<V_n_0'-1,aux(17)=<V_n_0'-1]
* Psum in Loop 15: [it(15)=<1,s(5)=<V_count_0+1,aux(8)=<V_min_count-2,aux(18)=<V_min_count-2,aux(3)=<V_n_0,aux(13)=<V_n_0]
* Psum in Loop 16: [it(16)=<1,s(6)=<V_count_0+1,aux(9)=<V_min_count-2,aux(19)=<V_min_count-2,aux(4)=<V_n_0,aux(14)=<V_n_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing sum for aux(1)=<V_n_0  in Loop 13 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(21)=<V_n_0] 
 * Adding constraints: [aux(1)=<it(13)*aux(21)] 

##### Pending set eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)
* Pmax/min: [aux(21)=<V_n_0]
* Psum in Loop 13: [aux(11)=<V_n_0,aux(6)=<V_n_0'-1,aux(16)=<V_n_0'-1]
* Psum in Loop 14: [it(14)=<1,aux(2)=<V_n_0'-1,aux(7)=<V_n_0'-1,aux(12)=<V_n_0'-1,aux(17)=<V_n_0'-1]
* Psum in Loop 15: [it(15)=<1,s(5)=<V_count_0+1,aux(8)=<V_min_count-2,aux(18)=<V_min_count-2,aux(3)=<V_n_0,aux(13)=<V_n_0]
* Psum in Loop 16: [it(16)=<1,s(6)=<V_count_0+1,aux(9)=<V_min_count-2,aux(19)=<V_min_count-2,aux(4)=<V_n_0,aux(14)=<V_n_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing max_min for aux(21)=<V_n_0  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(21)=<V_max_code] 

##### Pending set eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)
* Psum in Loop 13: [aux(11)=<V_n_0,aux(6)=<V_n_0'-1,aux(16)=<V_n_0'-1]
* Psum in Loop 14: [it(14)=<1,aux(2)=<V_n_0'-1,aux(7)=<V_n_0'-1,aux(12)=<V_n_0'-1,aux(17)=<V_n_0'-1]
* Psum in Loop 15: [it(15)=<1,s(5)=<V_count_0+1,aux(8)=<V_min_count-2,aux(18)=<V_min_count-2,aux(3)=<V_n_0,aux(13)=<V_n_0]
* Psum in Loop 16: [it(16)=<1,s(6)=<V_count_0+1,aux(9)=<V_min_count-2,aux(19)=<V_min_count-2,aux(4)=<V_n_0,aux(14)=<V_n_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing sum for aux(11)=<V_n_0  in Loop 13 
   - Found a solution using cacheing 
 * Adding constraints: [aux(11)=<aux(22),aux(22)=<it(13)*aux(21)] 

##### Pending set eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)
* Psum in Loop 13: [aux(6)=<V_n_0'-1,aux(16)=<V_n_0'-1]
* Psum in Loop 14: [it(14)=<1,aux(2)=<V_n_0'-1,aux(7)=<V_n_0'-1,aux(12)=<V_n_0'-1,aux(17)=<V_n_0'-1]
* Psum in Loop 15: [it(15)=<1,s(5)=<V_count_0+1,aux(8)=<V_min_count-2,aux(18)=<V_min_count-2,aux(3)=<V_n_0,aux(13)=<V_n_0]
* Psum in Loop 16: [it(16)=<1,s(6)=<V_count_0+1,aux(9)=<V_min_count-2,aux(19)=<V_min_count-2,aux(4)=<V_n_0,aux(14)=<V_n_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing sum for aux(6)=<V_n_0'-1  in Loop 13 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(23)=<V_n_0] 
 * Adding constraints: [aux(6)=<it(13)*aux(23)] 

##### Pending set eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)
* Pmax/min: [aux(23)=<V_n_0]
* Psum in Loop 13: [aux(16)=<V_n_0'-1]
* Psum in Loop 14: [it(14)=<1,aux(2)=<V_n_0'-1,aux(7)=<V_n_0'-1,aux(12)=<V_n_0'-1,aux(17)=<V_n_0'-1]
* Psum in Loop 15: [it(15)=<1,s(5)=<V_count_0+1,aux(8)=<V_min_count-2,aux(18)=<V_min_count-2,aux(3)=<V_n_0,aux(13)=<V_n_0]
* Psum in Loop 16: [it(16)=<1,s(6)=<V_count_0+1,aux(9)=<V_min_count-2,aux(19)=<V_min_count-2,aux(4)=<V_n_0,aux(14)=<V_n_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing max_min for aux(23)=<V_n_0  
   - Found a solution using cacheing 
 * Adding constraints:[aux(23)=<aux(21)] 

##### Pending set eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)
* Psum in Loop 13: [aux(16)=<V_n_0'-1]
* Psum in Loop 14: [it(14)=<1,aux(2)=<V_n_0'-1,aux(7)=<V_n_0'-1,aux(12)=<V_n_0'-1,aux(17)=<V_n_0'-1]
* Psum in Loop 15: [it(15)=<1,s(5)=<V_count_0+1,aux(8)=<V_min_count-2,aux(18)=<V_min_count-2,aux(3)=<V_n_0,aux(13)=<V_n_0]
* Psum in Loop 16: [it(16)=<1,s(6)=<V_count_0+1,aux(9)=<V_min_count-2,aux(19)=<V_min_count-2,aux(4)=<V_n_0,aux(14)=<V_n_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing sum for aux(16)=<V_n_0'-1  in Loop 13 
   - Found a solution using cacheing 
 * Adding constraints: [aux(16)=<aux(24),aux(24)=<it(13)*aux(23)] 

##### Pending set eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)
* Psum in Loop 14: [it(14)=<1,aux(2)=<V_n_0'-1,aux(7)=<V_n_0'-1,aux(12)=<V_n_0'-1,aux(17)=<V_n_0'-1]
* Psum in Loop 15: [it(15)=<1,s(5)=<V_count_0+1,aux(8)=<V_min_count-2,aux(18)=<V_min_count-2,aux(3)=<V_n_0,aux(13)=<V_n_0]
* Psum in Loop 16: [it(16)=<1,s(6)=<V_count_0+1,aux(9)=<V_min_count-2,aux(19)=<V_min_count-2,aux(4)=<V_n_0,aux(14)=<V_n_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing sum for it(14)=<1  in Loop 14 
   - Applying inductive sum strategy 
     - head Candidate: V_max_code-V_n_0+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_max_code-V_n_0+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_max_code-V_n_0+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_max_code-V_n_0+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(12)+it(14)=<V_max_code-V_n_0+1,it(12)+it(14)=<V_max_code-V_n_0+1,it(12)+it(13)+it(14)+it(15)+it(16)+it(17)+it(18)=<V_max_code-V_n_0-V_max_code'+V_n_0',it(12)+it(13)+it(14)+it(15)+it(16)+it(17)+it(18)=<V_max_code-V_n_0-V_max_code'+V_n_0'] 

##### Pending set eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)
* Psum in Loop 14: [aux(2)=<V_n_0'-1,aux(7)=<V_n_0'-1,aux(12)=<V_n_0'-1,aux(17)=<V_n_0'-1]
* Psum in Loop 15: [it(15)=<1,s(5)=<V_count_0+1,aux(8)=<V_min_count-2,aux(18)=<V_min_count-2,aux(3)=<V_n_0,aux(13)=<V_n_0]
* Psum in Loop 16: [it(16)=<1,s(6)=<V_count_0+1,aux(9)=<V_min_count-2,aux(19)=<V_min_count-2,aux(4)=<V_n_0,aux(14)=<V_n_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing sum for aux(2)=<V_n_0'-1  in Loop 14 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(25)=<V_n_0] 
 * Adding constraints: [aux(2)=<it(14)*aux(25)] 

##### Pending set eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)
* Pmax/min: [aux(25)=<V_n_0]
* Psum in Loop 14: [aux(7)=<V_n_0'-1,aux(12)=<V_n_0'-1,aux(17)=<V_n_0'-1]
* Psum in Loop 15: [it(15)=<1,s(5)=<V_count_0+1,aux(8)=<V_min_count-2,aux(18)=<V_min_count-2,aux(3)=<V_n_0,aux(13)=<V_n_0]
* Psum in Loop 16: [it(16)=<1,s(6)=<V_count_0+1,aux(9)=<V_min_count-2,aux(19)=<V_min_count-2,aux(4)=<V_n_0,aux(14)=<V_n_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing max_min for aux(25)=<V_n_0  
   - Found a solution using cacheing 
 * Adding constraints:[aux(25)=<aux(21)] 

##### Pending set eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)
* Psum in Loop 14: [aux(7)=<V_n_0'-1,aux(12)=<V_n_0'-1,aux(17)=<V_n_0'-1]
* Psum in Loop 15: [it(15)=<1,s(5)=<V_count_0+1,aux(8)=<V_min_count-2,aux(18)=<V_min_count-2,aux(3)=<V_n_0,aux(13)=<V_n_0]
* Psum in Loop 16: [it(16)=<1,s(6)=<V_count_0+1,aux(9)=<V_min_count-2,aux(19)=<V_min_count-2,aux(4)=<V_n_0,aux(14)=<V_n_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing sum for aux(7)=<V_n_0'-1  in Loop 14 
   - Found a solution using cacheing 
 * Adding constraints: [aux(7)=<aux(26),aux(26)=<it(14)*aux(25)] 

##### Pending set eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)
* Psum in Loop 14: [aux(12)=<V_n_0'-1,aux(17)=<V_n_0'-1]
* Psum in Loop 15: [it(15)=<1,s(5)=<V_count_0+1,aux(8)=<V_min_count-2,aux(18)=<V_min_count-2,aux(3)=<V_n_0,aux(13)=<V_n_0]
* Psum in Loop 16: [it(16)=<1,s(6)=<V_count_0+1,aux(9)=<V_min_count-2,aux(19)=<V_min_count-2,aux(4)=<V_n_0,aux(14)=<V_n_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing sum for aux(12)=<V_n_0'-1  in Loop 14 
   - Found a solution using cacheing 
 * Adding constraints: [aux(12)=<aux(27),aux(27)=<it(14)*aux(25)] 

##### Pending set eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)
* Psum in Loop 14: [aux(17)=<V_n_0'-1]
* Psum in Loop 15: [it(15)=<1,s(5)=<V_count_0+1,aux(8)=<V_min_count-2,aux(18)=<V_min_count-2,aux(3)=<V_n_0,aux(13)=<V_n_0]
* Psum in Loop 16: [it(16)=<1,s(6)=<V_count_0+1,aux(9)=<V_min_count-2,aux(19)=<V_min_count-2,aux(4)=<V_n_0,aux(14)=<V_n_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing sum for aux(17)=<V_n_0'-1  in Loop 14 
   - Found a solution using cacheing 
 * Adding constraints: [aux(17)=<aux(28),aux(28)=<it(14)*aux(25)] 

##### Pending set eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)
* Psum in Loop 15: [it(15)=<1,s(5)=<V_count_0+1,aux(8)=<V_min_count-2,aux(18)=<V_min_count-2,aux(3)=<V_n_0,aux(13)=<V_n_0]
* Psum in Loop 16: [it(16)=<1,s(6)=<V_count_0+1,aux(9)=<V_min_count-2,aux(19)=<V_min_count-2,aux(4)=<V_n_0,aux(14)=<V_n_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing sum for it(15)=<1  in Loop 15 
   - Applying inductive sum strategy 
     - head Candidate: V_max_code-V_n_0+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_count_0 
       - Loop 12 adds a constant 1/1 
       - Loop 13 is collaborative
       - Loop 14 is collaborative
       - Loop 16 is collaborative and bounds [it(16)] 
       - Loop 17 is collaborative
       - Loop 18 is collaborative
     - head Candidate: V_max_code-V_n_0+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_max_code-V_n_0+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_count_0 
       - Loop 12 adds a constant 1/1 
       - Loop 13 is collaborative
       - Loop 14 is collaborative
       - Loop 16 is collaborative and bounds [it(16)] 
       - Loop 17 is collaborative
       - Loop 18 is collaborative
     - tail Candidate: V_max_code-V_n_0+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(15)+it(16)=<it(12)+aux(29),it(15)+it(16)=<it(12)+aux(30),it(12)+it(15)=<V_max_code-V_n_0+1,aux(29)=<V_count_0,it(12)+it(15)=<V_max_code-V_n_0+1,it(12)+it(13)+it(14)+it(15)+it(16)+it(17)+it(18)=<V_max_code-V_n_0-V_max_code'+V_n_0',aux(30)=<V_count_0-V_count_0',it(12)+it(13)+it(14)+it(15)+it(16)+it(17)+it(18)=<V_max_code-V_n_0-V_max_code'+V_n_0'] 

##### Pending set eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)
* Psum in Loop 15: [s(5)=<V_count_0+1,aux(8)=<V_min_count-2,aux(18)=<V_min_count-2,aux(3)=<V_n_0,aux(13)=<V_n_0]
* Psum in Loop 16: [it(16)=<1,s(6)=<V_count_0+1,aux(9)=<V_min_count-2,aux(19)=<V_min_count-2,aux(4)=<V_n_0,aux(14)=<V_n_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing sum for s(5)=<V_count_0+1  in Loop 15 
   - Applying inductive sum strategy 
     - head Candidate: V_max_code+V_count_0-V_n_0+1 
       - Loop 12 is collaborative
       - Loop 13 is collaborative
       - Loop 14 is collaborative
       - Loop 16 is collaborative and bounds [it(16)] 
       - Loop 17 is collaborative
       - Loop 18 is collaborative
     - tail Candidate: V_max_code+V_count_0-V_n_0+1 
       - Loop 12 is collaborative
       - Loop 13 is collaborative
       - Loop 14 is collaborative
       - Loop 16 is collaborative and bounds [it(16)] 
       - Loop 17 is collaborative and bounds [it(17)] 
       - Loop 18 is collaborative and bounds [it(18)] 
 * Adding constraints: [it(16)+s(5)=<V_max_code+V_count_0-V_n_0+1,it(16)+it(17)+it(18)+s(5)=<V_max_code+V_count_0-V_n_0-V_max_code'-V_count_0'+V_n_0'] 

##### Pending set eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)
* Psum in Loop 15: [aux(8)=<V_min_count-2,aux(18)=<V_min_count-2,aux(3)=<V_n_0,aux(13)=<V_n_0]
* Psum in Loop 16: [it(16)=<1,s(6)=<V_count_0+1,aux(9)=<V_min_count-2,aux(19)=<V_min_count-2,aux(4)=<V_n_0,aux(14)=<V_n_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing sum for aux(8)=<V_min_count-2  in Loop 15 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(31)=<V_min_count-2] 
 * Adding constraints: [aux(8)=<it(15)*aux(31)] 

##### Pending set eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)
* Pmax/min: [aux(31)=<V_min_count-2]
* Psum in Loop 15: [aux(18)=<V_min_count-2,aux(3)=<V_n_0,aux(13)=<V_n_0]
* Psum in Loop 16: [it(16)=<1,s(6)=<V_count_0+1,aux(9)=<V_min_count-2,aux(19)=<V_min_count-2,aux(4)=<V_n_0,aux(14)=<V_n_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing max_min for aux(31)=<V_min_count-2  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(31)=<V_min_count-2] 

##### Pending set eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)
* Psum in Loop 15: [aux(18)=<V_min_count-2,aux(3)=<V_n_0,aux(13)=<V_n_0]
* Psum in Loop 16: [it(16)=<1,s(6)=<V_count_0+1,aux(9)=<V_min_count-2,aux(19)=<V_min_count-2,aux(4)=<V_n_0,aux(14)=<V_n_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing sum for aux(18)=<V_min_count-2  in Loop 15 
   - Found a solution using cacheing 
 * Adding constraints: [aux(18)=<aux(32),aux(32)=<it(15)*aux(31)] 

##### Pending set eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)
* Psum in Loop 15: [aux(3)=<V_n_0,aux(13)=<V_n_0]
* Psum in Loop 16: [it(16)=<1,s(6)=<V_count_0+1,aux(9)=<V_min_count-2,aux(19)=<V_min_count-2,aux(4)=<V_n_0,aux(14)=<V_n_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing sum for aux(3)=<V_n_0  in Loop 15 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(33)=<V_n_0] 
 * Adding constraints: [aux(3)=<it(15)*aux(33)] 

##### Pending set eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)
* Pmax/min: [aux(33)=<V_n_0]
* Psum in Loop 15: [aux(13)=<V_n_0]
* Psum in Loop 16: [it(16)=<1,s(6)=<V_count_0+1,aux(9)=<V_min_count-2,aux(19)=<V_min_count-2,aux(4)=<V_n_0,aux(14)=<V_n_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing max_min for aux(33)=<V_n_0  
   - Found a solution using cacheing 
 * Adding constraints:[aux(33)=<aux(21)] 

##### Pending set eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)
* Psum in Loop 15: [aux(13)=<V_n_0]
* Psum in Loop 16: [it(16)=<1,s(6)=<V_count_0+1,aux(9)=<V_min_count-2,aux(19)=<V_min_count-2,aux(4)=<V_n_0,aux(14)=<V_n_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing sum for aux(13)=<V_n_0  in Loop 15 
   - Found a solution using cacheing 
 * Adding constraints: [aux(13)=<aux(34),aux(34)=<it(15)*aux(33)] 

##### Pending set eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)
* Psum in Loop 16: [it(16)=<1,s(6)=<V_count_0+1,aux(9)=<V_min_count-2,aux(19)=<V_min_count-2,aux(4)=<V_n_0,aux(14)=<V_n_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing sum for it(16)=<1  in Loop 16 
   - Applying inductive sum strategy 
     - head Candidate: V_max_code-V_n_0+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_count_0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -V_max_count+V_count_0+2 
       - Loop 12 adds a constant 1/1 
       - Loop 13 is collaborative
       - Loop 14 is collaborative
       - Loop 15 is collaborative
       - Loop 17 is collaborative
       - Loop 18 is collaborative
     - head Candidate: V_max_code-V_n_0+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_max_code-V_n_0+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_count_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -V_max_count+V_count_0+2 
       - Loop 12 adds a constant 1/1 
       - Loop 13 is collaborative
       - Loop 14 is collaborative
       - Loop 15 is collaborative
       - Loop 17 is collaborative
       - Loop 18 is collaborative
     - tail Candidate: V_max_code-V_n_0+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(15)+it(16)=<it(12)+aux(35),it(16)=<it(12)+aux(36),it(15)+it(16)=<it(12)+aux(37),it(16)=<it(12)+aux(38),it(12)+it(16)=<V_max_code-V_n_0+1,aux(35)=<V_count_0,aux(36)=< -V_max_count+V_count_0+2,it(12)+it(16)=<V_max_code-V_n_0+1,it(12)+it(13)+it(14)+it(15)+it(16)+it(17)+it(18)=<V_max_code-V_n_0-V_max_code'+V_n_0',aux(37)=<V_count_0-V_count_0',aux(38)=< -V_max_count+V_count_0+V_max_count'-V_count_0',it(12)+it(13)+it(14)+it(15)+it(16)+it(17)+it(18)=<V_max_code-V_n_0-V_max_code'+V_n_0'] 

##### Pending set eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)
* Psum in Loop 16: [s(6)=<V_count_0+1,aux(9)=<V_min_count-2,aux(19)=<V_min_count-2,aux(4)=<V_n_0,aux(14)=<V_n_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing sum for s(6)=<V_count_0+1  in Loop 16 
   - Applying inductive sum strategy 
     - head Candidate: V_max_code+V_count_0-V_n_0+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_max_code+V_count_0-V_n_0+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [s(5)+s(6)=<V_max_code+V_count_0-V_n_0+1,it(17)+it(18)+s(5)+s(6)=<V_max_code+V_count_0-V_n_0-V_max_code'-V_count_0'+V_n_0'] 

##### Pending set eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)
* Psum in Loop 16: [aux(9)=<V_min_count-2,aux(19)=<V_min_count-2,aux(4)=<V_n_0,aux(14)=<V_n_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing sum for aux(9)=<V_min_count-2  in Loop 16 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(39)=<V_min_count-2] 
 * Adding constraints: [aux(9)=<it(16)*aux(39)] 

##### Pending set eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)
* Pmax/min: [aux(39)=<V_min_count-2]
* Psum in Loop 16: [aux(19)=<V_min_count-2,aux(4)=<V_n_0,aux(14)=<V_n_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing max_min for aux(39)=<V_min_count-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(39)=<aux(31)] 

##### Pending set eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)
* Psum in Loop 16: [aux(19)=<V_min_count-2,aux(4)=<V_n_0,aux(14)=<V_n_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing sum for aux(19)=<V_min_count-2  in Loop 16 
   - Found a solution using cacheing 
 * Adding constraints: [aux(19)=<aux(40),aux(40)=<it(16)*aux(39)] 

##### Pending set eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)
* Psum in Loop 16: [aux(4)=<V_n_0,aux(14)=<V_n_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing sum for aux(4)=<V_n_0  in Loop 16 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(41)=<V_n_0] 
 * Adding constraints: [aux(4)=<it(16)*aux(41)] 

##### Pending set eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)
* Pmax/min: [aux(41)=<V_n_0]
* Psum in Loop 16: [aux(14)=<V_n_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing max_min for aux(41)=<V_n_0  
   - Found a solution using cacheing 
 * Adding constraints:[aux(41)=<aux(21)] 

##### Pending set eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)
* Psum in Loop 16: [aux(14)=<V_n_0]
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing sum for aux(14)=<V_n_0  in Loop 16 
   - Found a solution using cacheing 
 * Adding constraints: [aux(14)=<aux(42),aux(42)=<it(16)*aux(41)] 

##### Pending set eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]

###### Computing sum for it(17)=<1  in Loop 17 
   - Applying inductive sum strategy 
     - head Candidate: V_max_code-V_n_0+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_max_code-V_n_0+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_max_code-V_n_0+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_max_code-V_n_0+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(12)+it(17)=<V_max_code-V_n_0+1,it(12)+it(17)=<V_max_code-V_n_0+1,it(12)+it(13)+it(14)+it(15)+it(16)+it(17)+it(18)=<V_max_code-V_n_0-V_max_code'+V_n_0',it(12)+it(13)+it(14)+it(15)+it(16)+it(17)+it(18)=<V_max_code-V_n_0-V_max_code'+V_n_0'] 

##### Pending set eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B)
* Psum in Loop 18: [it(18)=<1]

###### Computing sum for it(18)=<1  in Loop 18 
   - Applying inductive sum strategy 
     - head Candidate: V_max_code-V_n_0+1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_max_code-V_n_0+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_max_code-V_n_0+1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_max_code-V_n_0+1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(12)+it(18)=<V_max_code-V_n_0+1,it(12)+it(18)=<V_max_code-V_n_0+1,it(12)+it(13)+it(14)+it(15)+it(16)+it(17)+it(18)=<V_max_code-V_n_0-V_max_code'+V_n_0',it(12)+it(13)+it(14)+it(15)+it(16)+it(17)+it(18)=<V_max_code-V_n_0-V_max_code'+V_n_0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [12,13,14,15,16,17,18] 
Found a cycle in the non-final constraints
 Removed possibly redundant constraints to solve a cycle in the cost structure 
it(12)=<aux(4)+aux(3)+aux(2)+aux(1)+aux(5)
it(12)=<aux(9)+aux(8)+aux(7)+aux(6)+aux(10)
it(12)=<aux(14)+aux(13)+aux(12)+aux(11)+aux(15)
it(12)=<aux(19)+aux(18)+aux(17)+aux(16)+aux(20)
it(15)+it(16)=<it(12)+aux(29)
it(15)+it(16)=<it(12)+aux(30)
it(15)+it(16)=<it(12)+aux(35)
it(16)=<it(12)+aux(36)
it(15)+it(16)=<it(12)+aux(37)
it(16)=<it(12)+aux(38)

#### Simplifying cost structure of phase [12,13,14,15,16,17,18] 
 * Joined equivalent variables [aux(22),aux(11)] into aux(22)
 * Joined equivalent variables [aux(24),aux(16)] into aux(24)
 * Joined equivalent variables [aux(26),aux(7)] into aux(26)
 * Joined equivalent variables [aux(27),aux(12)] into aux(27)
 * Joined equivalent variables [aux(28),aux(17)] into aux(28)
 * Joined equivalent variables [aux(32),aux(18)] into aux(32)
 * Joined equivalent variables [aux(34),aux(13)] into aux(34)
 * Joined equivalent variables [aux(40),aux(19)] into aux(40)
 * Joined equivalent variables [aux(42),aux(14)] into aux(42)
 * Joined equivalent variables [aux(47),aux(29),aux(35)] into aux(47)
 * Joined equivalent variables [aux(48),aux(30),aux(37)] into aux(48)
 * Joined equivalent variables [aux(23),aux(25),aux(33),aux(41)] into aux(23)
 * Joined equivalent variables [aux(1),aux(22)] into aux(1)
 * Joined equivalent variables [aux(2),aux(26),aux(27),aux(28)] into aux(2)
 * Joined equivalent variables [aux(6),aux(24)] into aux(6)
 * Joined equivalent variables [aux(4),aux(42)] into aux(4)
 * Joined equivalent variables [aux(9),aux(40)] into aux(9)
 * Joined equivalent variables [aux(3),aux(34)] into aux(3)
 * Joined equivalent variables [aux(8),aux(32)] into aux(8)
 * Joined equivalent variables [s(5),s(6)] into s(5)
 * Joined equivalent variables [it(17),it(18)] into it(17)
 * Joined equivalent variables [it(12),it(13),it(14),it(15)] into it(12)
 * Joined equivalent variables [aux(2),aux(3),aux(6)] into aux(2)

#### Cost of phase [12,13,14,15,16,17,18]:eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B) -> [eval_send_tree_bb1_in(V_max_code',V_max_count',V_min_count',V_count_0',V_n_0',B')] 
5*it(12)+2*it(16)+4*it(17)+2*s(5)+0
  Such that:aux(43) =< V_max_code+V_count_0-V_n_0+1
aux(44) =< V_max_code+V_count_0-V_n_0-V_max_code'-V_count_0'+V_n_0'
aux(45) =< V_max_code-V_n_0+1
aux(46) =< V_max_code-V_n_0-V_max_code'+V_n_0'
it(16) =< aux(43)
s(5) =< aux(43)
it(16) =< aux(44)
it(17) =< aux(44)
s(5) =< aux(44)
it(12) =< aux(45)
it(16) =< aux(45)
it(17) =< aux(45)
it(12) =< aux(46)
it(16) =< aux(46)
it(17) =< aux(46)

#### Simplifying cost structure of chain [[12,13,14,15,16,17,18],19] 
 * Joined equivalent variables [aux(49),aux(43),aux(44)] into aux(49)
 * Joined equivalent variables [aux(50),aux(45),aux(46)] into aux(50)
 * Joined equivalent variables [it(16),it(17)] into it(16)

#### Cost of chains of eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B):
* Chain [[12,13,14,15,16,17,18],19]: 5*it(12)+6*it(16)+2*s(5)+0
  Such that:aux(49) =< V_max_code+V_count_0-V_n_0+1
aux(50) =< V_max_code-V_n_0+1
it(16) =< aux(49)
s(5) =< aux(49)
it(12) =< aux(50)
it(16) =< aux(50)

  with precondition: [B=3,V_count_0>=0,V_n_0>=V_count_0,V_max_code>=V_n_0] 

* Chain [19]: 0
  with precondition: [B=3,V_count_0>=0,V_n_0>=V_max_code+1,V_n_0>=V_count_0] 


#### Simplifying cost structure of CE 21 
 * Renamed intermediate variables: 
[ (eq(22,1),aux(49))>>s(7), (eq(22,1),aux(50))>>s(8), (eq(22,1),it(16))>>s(9), (eq(22,1),s(5))>>s(10), (eq(22,1),it(12))>>s(11)]

#### Simplifying cost structure of CE 22 
 * Joined equivalent variables [aux(51),s(7),s(8)] into aux(51)
 * Joined equivalent variables [s(9),s(10),s(11)] into s(9)

#### Cost of chains of eval_send_tree_start(V_max_code,V_max_count,V_min_count,B):
* Chain [21]: 1
  with precondition: [0>=V_max_code+1] 

* Chain [20]: 13*s(9)+1
  Such that:aux(51) =< V_max_code+1
s(9) =< aux(51)

  with precondition: [V_max_code>=0] 


Closed-form bounds of eval_send_tree_start(V_max_code,V_max_count,V_min_count,B): 
-------------------------------------
* Chain [21] with precondition: [0>=V_max_code+1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [20] with precondition: [V_max_code>=0] 
    - Upper bound: 13*V_max_code+14 
    - Complexity: n 

### Maximum cost of eval_send_tree_start(V_max_code,V_max_count,V_min_count,B): nat(V_max_code+1)*13+1 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 239 ms.
* Invariants computed in 196 ms.
   - Backward Invariants 71 ms.
   - Transitive Invariants 53 ms.
* Refinement performed in 310 ms.
* Termination proved in 95 ms.
* Upper bounds computed in 691 ms.
   - Equation cost structures 94 ms.
   - Phase cost structures 615 ms.
   - Chain cost structures 53 ms.
   - Solving cost expressions 2 ms.
* Total analysis performed in 1710 ms.


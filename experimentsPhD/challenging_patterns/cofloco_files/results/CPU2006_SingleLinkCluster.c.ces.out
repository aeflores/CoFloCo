Warning: Ignored call to eval_SingleLinkCluster_stop/1 in equation eval_SingleLinkCluster_bb10_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_SingleLinkCluster_17/14,eval_SingleLinkCluster_18/15,eval_SingleLinkCluster_bb5_in/14,eval_SingleLinkCluster_bb6_in/14,eval_SingleLinkCluster_bb7_in/14,eval_SingleLinkCluster_bb8_in/15,eval_SingleLinkCluster_bb9_in/16]
1. recursive  : [eval_SingleLinkCluster_bb3_in/9,eval_SingleLinkCluster_bb4_in/9,loop_cont_eval_SingleLinkCluster_bb5_in/10]
2. recursive  : [eval_SingleLinkCluster_bb1_in/4,eval_SingleLinkCluster_bb2_in/4,loop_cont_eval_SingleLinkCluster_bb3_in/5]
3. non_recursive  : [eval_SingleLinkCluster_bb10_in/1]
4. non_recursive  : [loop_cont_eval_SingleLinkCluster_bb1_in/2]
5. non_recursive  : [eval_SingleLinkCluster_10/2]
6. non_recursive  : [eval_SingleLinkCluster_9/2]
7. non_recursive  : [eval_SingleLinkCluster_8/2]
8. non_recursive  : [eval_SingleLinkCluster_7/2]
9. non_recursive  : [eval_SingleLinkCluster_6/2]
10. non_recursive  : [eval_SingleLinkCluster_5/2]
11. non_recursive  : [eval_SingleLinkCluster_4/2]
12. non_recursive  : [eval_SingleLinkCluster_3/2]
13. non_recursive  : [eval_SingleLinkCluster_2/2]
14. non_recursive  : [eval_SingleLinkCluster_1/2]
15. non_recursive  : [eval_SingleLinkCluster_0/2]
16. non_recursive  : [eval_SingleLinkCluster_bb0_in/2]
17. non_recursive  : [eval_SingleLinkCluster_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_SingleLinkCluster_bb5_in/14
1. SCC is partially evaluated into eval_SingleLinkCluster_bb3_in/9
2. SCC is partially evaluated into eval_SingleLinkCluster_bb1_in/4
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_SingleLinkCluster_10/2
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is completely evaluated into other SCCs
16. SCC is completely evaluated into other SCCs
17. SCC is partially evaluated into eval_SingleLinkCluster_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_SingleLinkCluster_bb5_in/14 
* CE 10 is refined into CE [11] 
* CE 7 is refined into CE [12] 
* CE 9 is refined into CE [13] 
* CE 8 is refined into CE [14] 


#### Refined cost equations eval_SingleLinkCluster_bb5_in/14 
* CE 11: eval_SingleLinkCluster_bb5_in(A,B,C,D,E,F,G,H,I,A,B,C,G,H) = 0
     [A+H>=E+F+1,G+H>=E,E>=H,0>=F,G+H+1=D+E,I=2] 
* CE 12: eval_SingleLinkCluster_bb5_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,V_i_0,V_b_2,V_a_2,B,C,D,E,F,G) = 1+ eval_SingleLinkCluster_bb5_in(V_n,V_b_0,V_a_0,H,V_a_1,I,V_b_2,V_a_2,J,C,D,E,F,G)
     [V_n+V_a_2>=V_a_1+V_i_0+1,V_b_2+V_a_2>=V_a_1,V_a_1>=V_a_2,V_a_2>=1,V_i_0>=1,V_b_2+V_a_2+1=V_a_1+H,V_b_2+V_a_2+1=V_b_1+V_a_1,V_i_0=I+1,J=2,B=2] 
* CE 13: eval_SingleLinkCluster_bb5_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,V_i_0,V_b_2,V_a_2,B,C,D,E,F,G) = 1+ eval_SingleLinkCluster_bb5_in(V_n,V_b_0,V_a_0,H,V_a_1,I,V_b_2,V_a_2,J,C,D,E,F,G)
     [V_n+V_a_2>=V_a_1+V_i_0+1,V_b_2+V_a_2>=V_a_1,V_a_1>=V_a_2,V_i_0>=1,0>=V_a_2,V_b_2+V_a_2+1=V_a_1+H,V_b_2+V_a_2+1=V_b_1+V_a_1,V_i_0=I+1,J=2,B=2] 
* CE 14: eval_SingleLinkCluster_bb5_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,V_i_0,V_b_2,V_a_2,B,C,D,E,F,G) = 1+ eval_SingleLinkCluster_bb5_in(V_n,V_b_0,V_a_0,H,V_a_1,I,J,K,L,C,D,E,F,G)
     [V_n+V_a_2>=V_a_1+V_i_0+1,V_b_2+V_a_2>=V_a_1,V_a_1>=V_a_2,V_a_2>=1,V_i_0>=1,V_b_2+V_a_2+1=V_a_1+H,V_b_2+V_a_2+1=V_b_1+V_a_1,V_a_2=K+1,V_b_2+1=J,V_i_0=I+1,L=2,B=2] 

### Cost equations --> "Loop" of eval_SingleLinkCluster_bb5_in/14 
* CEs [12] --> Loop 11 
* CEs [13] --> Loop 12 
* CEs [14] --> Loop 13 
* CEs [11] --> Loop 14 

#### Loops of eval_SingleLinkCluster_bb5_in/14 
* Loop 11: eval_SingleLinkCluster_bb5_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,V_i_0,V_b_2,V_a_2,B,C,D,E,F,G)->  eval_SingleLinkCluster_bb5_in(V_n,V_b_0,V_a_0,V_b_1',V_a_1,V_i_0',V_b_2,V_a_2,B',C,D,E,F,G)
                  [V_n+V_a_2>=V_a_1+V_i_0+1,V_b_2+V_a_2>=V_a_1,V_a_1>=V_a_2,V_a_2>=1,V_i_0>=1,V_b_2+V_a_2+1=V_a_1+V_b_1',V_b_2+V_a_2+1=V_b_1+V_a_1,V_i_0=V_i_0'+1,B'=2,B=2] 
* Loop 12: eval_SingleLinkCluster_bb5_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,V_i_0,V_b_2,V_a_2,B,C,D,E,F,G)->  eval_SingleLinkCluster_bb5_in(V_n,V_b_0,V_a_0,V_b_1',V_a_1,V_i_0',V_b_2,V_a_2,B',C,D,E,F,G)
                  [V_n+V_a_2>=V_a_1+V_i_0+1,V_b_2+V_a_2>=V_a_1,V_a_1>=V_a_2,V_i_0>=1,0>=V_a_2,V_b_2+V_a_2+1=V_a_1+V_b_1',V_b_2+V_a_2+1=V_b_1+V_a_1,V_i_0=V_i_0'+1,B'=2,B=2] 
* Loop 13: eval_SingleLinkCluster_bb5_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,V_i_0,V_b_2,V_a_2,B,C,D,E,F,G)->  eval_SingleLinkCluster_bb5_in(V_n,V_b_0,V_a_0,V_b_1',V_a_1,V_i_0',V_b_2',V_a_2',B',C,D,E,F,G)
                  [V_n+V_a_2>=V_a_1+V_i_0+1,V_b_2+V_a_2>=V_a_1,V_a_1>=V_a_2,V_a_2>=1,V_i_0>=1,V_a_1+V_b_1'=V_b_2+V_a_2+1,V_b_1+V_a_1=V_b_2+V_a_2+1,V_a_2=V_a_2'+1,V_b_2+1=V_b_2',V_i_0=V_i_0'+1,B'=2,B=2] 
* Loop 14: eval_SingleLinkCluster_bb5_in(A,B,C,D,E,F,G,H,I,A,B,C,G,H) [A+H>=E+F+1,G+H>=E,E>=H,0>=F,G+H+1=D+E,I=2] 

### Ranking functions of CR eval_SingleLinkCluster_bb5_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,V_i_0,V_b_2,V_a_2,B,C,D,E,F,G) 
* RF of phase [11,13]: [V_i_0]
* RF of phase [12]: [V_i_0]

#### Partial ranking functions of CR eval_SingleLinkCluster_bb5_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,V_i_0,V_b_2,V_a_2,B,C,D,E,F,G) 
* Partial RF of phase [11,13]:
  - RF of loop [11:1,13:1]:
    V_i_0
  - RF of loop [13:1]:
    V_a_2
    V_b_1+V_a_1-V_b_2-1
    V_n-V_a_1+V_a_2-1
    V_n+V_b_1-V_b_2-2
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    V_i_0

Discarded unfeasible chain [[12]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [[11,13]](Non-terminating chain proved terminating)
Discarded unfeasible chain [[11,13],[12]](Non-terminating chain proved terminating)

### Resulting Chains:eval_SingleLinkCluster_bb5_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,V_i_0,V_b_2,V_a_2,B,C,D,E,F,G) 
* [[12],14]
* [[11,13],[12],14]
* [[11,13],14]
* [14]


### Merging Chains  eval_SingleLinkCluster_bb5_in/14 into  External patterns of execution 
* [[14,[12],[11,13]]] --> 1 
* [[14]] --> 2 
* [[14,[12]]] --> 3 
* [[14,[11,13]]] --> 4 


### Specialization of cost equations eval_SingleLinkCluster_bb3_in/9 
* CE 6 is refined into CE [15] 
* CE 5 is refined into CE [16,17,18,19] 


#### Refined cost equations eval_SingleLinkCluster_bb3_in/9 
* CE 15: eval_SingleLinkCluster_bb3_in(A,B,C,D,E,F,A,D,E) = 0
     [0>=D,F=3] 
* CE 16: eval_SingleLinkCluster_bb3_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,B,C,D,E) = 2+ eval_SingleLinkCluster_bb5_in(V_n,V_b_0,V_a_0,V_b_1,F,G,H,I,J,V_n,V_b_0,V_a_0,K,L):1+ eval_SingleLinkCluster_bb3_in(V_n,V_b_0,V_a_0,K,M,N,C,D,E)
     [V_n+V_b_1>=K+3,K>=V_b_1,V_b_1>=1,K+1=V_b_1+I,K+1=V_b_1+F,K+1=V_b_1+V_a_1,V_b_1=H+1,V_n=G+1,N=3,M=0,L=0,J=2,B=3] 
* CE 17: eval_SingleLinkCluster_bb3_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,B,C,D,E) = 2+ eval_SingleLinkCluster_bb5_in(V_n,V_b_0,V_a_0,F,V_a_1,G,H,V_a_1,I,V_n,V_b_0,V_a_0,H,V_a_1):2+ eval_SingleLinkCluster_bb3_in(V_n,V_b_0,V_a_0,H,V_a_1,J,C,D,E)
     [H>=0,1>=V_n,V_n=G+1,H+1=F,H+1=V_b_1,J=3,I=2,B=3] 
* CE 18: eval_SingleLinkCluster_bb3_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,B,C,D,E) = 2+ eval_SingleLinkCluster_bb5_in(V_n,V_b_0,V_a_0,F,V_a_1,G,H,V_a_1,I,V_n,V_b_0,V_a_0,H,V_a_1):3+ eval_SingleLinkCluster_bb3_in(V_n,V_b_0,V_a_0,H,V_a_1,J,C,D,E)
     [H>=0,V_n>=2,0>=V_a_1,V_n=G+1,H+1=F,H+1=V_b_1,J=3,I=2,B=3] 
* CE 19: eval_SingleLinkCluster_bb3_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,B,C,D,E) = 2+ eval_SingleLinkCluster_bb5_in(V_n,V_b_0,V_a_0,F,V_a_1,G,H,V_a_1,I,V_n,V_b_0,V_a_0,J,K):4+ eval_SingleLinkCluster_bb3_in(V_n,V_b_0,V_a_0,J,L,M,C,D,E)
     [V_n+H>=J+1,V_a_1+H>=J,J>=H,V_n>=2,V_a_1>=1,H>=0,V_a_1+H=J+L,V_a_1+H=J+K,V_n=G+1,H+1=F,H+1=V_b_1,M=3,I=2,B=3] 

### Cost equations --> "Loop" of eval_SingleLinkCluster_bb3_in/9 
* CEs [19] --> Loop 15 
* CEs [18] --> Loop 16 
* CEs [17] --> Loop 17 
* CEs [16] --> Loop 18 
* CEs [15] --> Loop 19 

#### Loops of eval_SingleLinkCluster_bb3_in/9 
* Loop 15: eval_SingleLinkCluster_bb3_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,B,C,D,E)->  eval_SingleLinkCluster_bb3_in(V_n,V_b_0,V_a_0,V_b_1',V_a_1',B',C,D,E)
                  [V_n+V_a_1'>=V_a_1+1,V_a_1>=V_a_1',V_a_1'>=0,V_a_1>=1,V_b_1>=1,V_n>=2,V_b_1+V_a_1=V_b_1'+V_a_1'+1,B'=3,B=3] 
* Loop 16: eval_SingleLinkCluster_bb3_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,B,C,D,E)->  eval_SingleLinkCluster_bb3_in(V_n,V_b_0,V_a_0,V_b_1',V_a_1,B',C,D,E)
                  [V_b_1'>=0,V_n>=2,0>=V_a_1,V_b_1'+1=V_b_1,B'=3,B=3] 
* Loop 17: eval_SingleLinkCluster_bb3_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,B,C,D,E)->  eval_SingleLinkCluster_bb3_in(V_n,V_b_0,V_a_0,V_b_1',V_a_1,B',C,D,E)
                  [V_b_1'>=0,1>=V_n,V_b_1'+1=V_b_1,B'=3,B=3] 
* Loop 18: eval_SingleLinkCluster_bb3_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,B,C,D,E)->  eval_SingleLinkCluster_bb3_in(V_n,V_b_0,V_a_0,V_b_1',V_a_1',B',C,D,E)
                  [V_n>=V_a_1+2,V_a_1>=1,V_b_1>=1,V_b_1+V_a_1=V_b_1'+1,B'=3,V_a_1'=0,B=3] 
* Loop 19: eval_SingleLinkCluster_bb3_in(A,B,C,D,E,F,A,D,E) [0>=D,F=3] 

### Ranking functions of CR eval_SingleLinkCluster_bb3_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,B,C,D,E) 
* RF of phase [15]: [V_b_1+V_a_1-1]
* RF of phase [16]: [V_b_1]
* RF of phase [17]: [V_b_1]

#### Partial ranking functions of CR eval_SingleLinkCluster_bb3_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,B,C,D,E) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    V_b_1+V_a_1-1
* Partial RF of phase [16]:
  - RF of loop [16:1]:
    V_b_1
* Partial RF of phase [17]:
  - RF of loop [17:1]:
    V_b_1

Discarded unfeasible chain [[17]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [[16]](Non-terminating chain proved terminating)
Discarded unfeasible chain [[15]](Non-terminating chain proved terminating)
Discarded unfeasible chain [[15],[16]](Non-terminating chain proved terminating)
Discarded unfeasible chain [[15],18,[16]](Non-terminating chain proved terminating)
Discarded unfeasible chain [18,[16]](Non-terminating chain proved terminating)

### Resulting Chains:eval_SingleLinkCluster_bb3_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,B,C,D,E) 
* [[17],19]
* [[16],19]
* [[15],[16],19]
* [[15],19]
* [[15],18,[16],19]
* [19]
* [18,[16],19]


### Merging Chains  eval_SingleLinkCluster_bb3_in/9 into  External patterns of execution 
* [[19,[16]]] --> 1 
* [[19,[16],[15]]] --> 2 
* [[19,[16],18,[15]]] --> 3 
* [[19,[16],18]] --> 4 
* [[19,[17]]] --> 5 
* [[19,[15]]] --> 6 
* [[19]] --> 7 


### Specialization of cost equations eval_SingleLinkCluster_bb1_in/4 
* CE 4 is refined into CE [20] 
* CE 3 is refined into CE [21,22,23,24,25,26,27] 


#### Refined cost equations eval_SingleLinkCluster_bb1_in/4 
* CE 20: eval_SingleLinkCluster_bb1_in(V_n,V_b_0,V_a_0,B) = 0
     [0>=V_a_0,B=4] 
* CE 21: eval_SingleLinkCluster_bb1_in(V_n,V_b_0,V_a_0,B) = 2+ eval_SingleLinkCluster_bb3_in(V_n,C,D,E,F,G,V_n,H,I):1+ eval_SingleLinkCluster_bb1_in(V_n,J,K,L)
     [V_n>=2,E>=1,E=C+1,E=V_b_0+1,L=4,K=0,J=0,I=0,H=0,G=3,F=0,D=1,B=4,V_a_0=1] 
* CE 22: eval_SingleLinkCluster_bb1_in(V_n,V_b_0,V_a_0,B) = 2+ eval_SingleLinkCluster_bb3_in(V_n,C,D,E,F,G,V_n,H,I):2+ eval_SingleLinkCluster_bb1_in(V_n,J,K,L)
     [V_n>=2,F>=1,E>=1,F+1=D,E=C+1,F+1=V_a_0,E=V_b_0+1,L=4,K=0,J=0,I=0,H=0,G=3,B=4] 
* CE 23: eval_SingleLinkCluster_bb1_in(V_n,V_b_0,V_a_0,B) = 2+ eval_SingleLinkCluster_bb3_in(V_n,C,D,E,F,G,V_n,H,I):3+ eval_SingleLinkCluster_bb1_in(V_n,J,K,L)
     [E+F>=3,V_n>=3,F>=1,E>=1,F+1=D,E=C+1,F+1=V_a_0,E=V_b_0+1,L=4,K=0,J=0,I=0,H=0,G=3,B=4] 
* CE 24: eval_SingleLinkCluster_bb1_in(V_n,V_b_0,V_a_0,B) = 2+ eval_SingleLinkCluster_bb3_in(V_n,C,D,E,F,G,V_n,H,I):4+ eval_SingleLinkCluster_bb1_in(V_n,J,K,L)
     [V_n>=F+2,F>=1,E>=1,F+1=D,E=C+1,F+1=V_a_0,E=V_b_0+1,L=4,K=0,J=0,I=0,H=0,G=3,B=4] 
* CE 25: eval_SingleLinkCluster_bb1_in(V_n,V_b_0,V_a_0,B) = 2+ eval_SingleLinkCluster_bb3_in(V_n,C,D,E,F,G,V_n,H,F):5+ eval_SingleLinkCluster_bb1_in(V_n,I,F,J)
     [F>=0,E>=1,1>=V_n,F+1=D,E=C+1,F+1=V_a_0,E=V_b_0+1,J=4,I=0,H=0,G=3,B=4] 
* CE 26: eval_SingleLinkCluster_bb1_in(V_n,V_b_0,V_a_0,B) = 2+ eval_SingleLinkCluster_bb3_in(V_n,C,D,E,F,G,V_n,H,I):6+ eval_SingleLinkCluster_bb1_in(V_n,J,I,K)
     [F>=I,I>=1,V_n>=2,E>=1,F+1=D,E=C+1,F+1=V_a_0,E=V_b_0+1,K=4,J=0,H=0,G=3,B=4] 
* CE 27: eval_SingleLinkCluster_bb1_in(V_n,V_b_0,V_a_0,B) = 2+ eval_SingleLinkCluster_bb3_in(V_n,C,D,E,F,G,V_n,E,F):7+ eval_SingleLinkCluster_bb1_in(V_n,E,F,H)
     [F>=0,0>=E,F+1=D,E=C+1,F+1=V_a_0,E=V_b_0+1,H=4,G=3,B=4] 

### Cost equations --> "Loop" of eval_SingleLinkCluster_bb1_in/4 
* CEs [27] --> Loop 20 
* CEs [26] --> Loop 21 
* CEs [25] --> Loop 22 
* CEs [24] --> Loop 23 
* CEs [23] --> Loop 24 
* CEs [22] --> Loop 25 
* CEs [21] --> Loop 26 
* CEs [20] --> Loop 27 

#### Loops of eval_SingleLinkCluster_bb1_in/4 
* Loop 20: eval_SingleLinkCluster_bb1_in(V_n,V_b_0,V_a_0,B)->  eval_SingleLinkCluster_bb1_in(V_n,V_b_0',V_a_0',B')
                  [V_a_0'>=0,0>=V_b_0+1,V_b_0+1=V_b_0',V_a_0'+1=V_a_0,B'=4,B=4] 
* Loop 21: eval_SingleLinkCluster_bb1_in(V_n,V_b_0,V_a_0,B)->  eval_SingleLinkCluster_bb1_in(V_n,V_b_0',V_a_0',B')
                  [V_a_0>=V_a_0'+1,V_a_0'>=1,V_b_0>=0,V_n>=2,B'=4,V_b_0'=0,B=4] 
* Loop 22: eval_SingleLinkCluster_bb1_in(V_n,V_b_0,V_a_0,B)->  eval_SingleLinkCluster_bb1_in(V_n,V_b_0',V_a_0',B')
                  [V_a_0'>=0,V_b_0>=0,1>=V_n,V_a_0'+1=V_a_0,B'=4,V_b_0'=0,B=4] 
* Loop 23: eval_SingleLinkCluster_bb1_in(V_n,V_b_0,V_a_0,B)->  eval_SingleLinkCluster_bb1_in(V_n,V_b_0',V_a_0',B')
                  [V_n>=V_a_0+1,V_a_0>=2,V_b_0>=0,B'=4,V_a_0'=0,V_b_0'=0,B=4] 
* Loop 24: eval_SingleLinkCluster_bb1_in(V_n,V_b_0,V_a_0,B)->  eval_SingleLinkCluster_bb1_in(V_n,V_b_0',V_a_0',B')
                  [V_b_0+V_a_0>=3,V_a_0>=2,V_b_0>=0,V_n>=3,B'=4,V_a_0'=0,V_b_0'=0,B=4] 
* Loop 25: eval_SingleLinkCluster_bb1_in(V_n,V_b_0,V_a_0,B)->  eval_SingleLinkCluster_bb1_in(V_n,V_b_0',V_a_0',B')
                  [V_a_0>=2,V_b_0>=0,V_n>=2,B'=4,V_a_0'=0,V_b_0'=0,B=4] 
* Loop 26: eval_SingleLinkCluster_bb1_in(V_n,V_b_0,V_a_0,B)->  eval_SingleLinkCluster_bb1_in(V_n,V_b_0',V_a_0',B')
                  [V_b_0>=0,V_n>=2,B'=4,V_a_0'=0,V_b_0'=0,B=4,V_a_0=1] 
* Loop 27: eval_SingleLinkCluster_bb1_in(V_n,V_b_0,V_a_0,B) [0>=V_a_0,B=4] 

### Ranking functions of CR eval_SingleLinkCluster_bb1_in(V_n,V_b_0,V_a_0,B) 
* RF of phase [21]: [V_a_0-1]
* RF of phase [22]: [V_a_0]

#### Partial ranking functions of CR eval_SingleLinkCluster_bb1_in(V_n,V_b_0,V_a_0,B) 
* Partial RF of phase [21]:
  - RF of loop [21:1]:
    V_a_0-1
* Partial RF of phase [22]:
  - RF of loop [22:1]:
    V_a_0

Discarded unfeasible chain [[22]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [[21]](Non-terminating chain proved terminating)

### Resulting Chains:eval_SingleLinkCluster_bb1_in(V_n,V_b_0,V_a_0,B) 
* [[22],27]
* [[21],26,27]
* [[21],25,27]
* [[21],24,27]
* [[21],23,27]
* [27]
* [25,27]
* [24,27]


### Merging Chains  eval_SingleLinkCluster_bb1_in/4 into  External patterns of execution 
* [[27,[22]]] --> 1 
* [[27]] --> 2 
* [[27,25],[27,26,[21]]] --> 3 
* [[27,24],[27,23,[21]],[27,25,[21]]] --> 4 
* [[27,24,[21]]] --> 5 


### Specialization of cost equations eval_SingleLinkCluster_10/2 
* CE 2 is refined into CE [28,29,30,31,32] 


#### Refined cost equations eval_SingleLinkCluster_10/2 
* CE 28: eval_SingleLinkCluster_10(V_n,B) = 1+ eval_SingleLinkCluster_bb1_in(C,D,E,F):1
     [F=4,E=1,D=0,C=1,V_n=1] 
* CE 29: eval_SingleLinkCluster_10(V_n,B) = 1+ eval_SingleLinkCluster_bb1_in(V_n,C,V_n,D):2
     [0>=V_n,D=4,C=0] 
* CE 30: eval_SingleLinkCluster_10(V_n,B) = 1+ eval_SingleLinkCluster_bb1_in(V_n,C,V_n,D):3
     [V_n>=2,D=4,C=0] 
* CE 31: eval_SingleLinkCluster_10(V_n,B) = 1+ eval_SingleLinkCluster_bb1_in(V_n,C,V_n,D):4
     [V_n>=3,D=4,C=0] 
* CE 32: eval_SingleLinkCluster_10(V_n,B) = 1+ eval_SingleLinkCluster_bb1_in(V_n,C,V_n,D):5
     [V_n>=4,D=4,C=0] 

### Cost equations --> "Loop" of eval_SingleLinkCluster_10/2 
* CEs [32] --> Loop 28 
* CEs [31] --> Loop 29 
* CEs [30] --> Loop 30 
* CEs [29] --> Loop 31 
* CEs [28] --> Loop 32 

#### Loops of eval_SingleLinkCluster_10/2 
* Loop 28: eval_SingleLinkCluster_10(V_n,B) [V_n>=4] 
* Loop 29: eval_SingleLinkCluster_10(V_n,B) [V_n>=3] 
* Loop 30: eval_SingleLinkCluster_10(V_n,B) [V_n>=2] 
* Loop 31: eval_SingleLinkCluster_10(V_n,B) [0>=V_n] 
* Loop 32: eval_SingleLinkCluster_10(V_n,B) [V_n=1] 

### Ranking functions of CR eval_SingleLinkCluster_10(V_n,B) 

#### Partial ranking functions of CR eval_SingleLinkCluster_10(V_n,B) 


### Resulting Chains:eval_SingleLinkCluster_10(V_n,B) 
* [32]
* [31]
* [30]
* [29]
* [28]


### Merging Chains  eval_SingleLinkCluster_10/2 into  External patterns of execution 
* [[32]] --> 1 
* [[31]] --> 2 
* [[30]] --> 3 
* [[29]] --> 4 
* [[28]] --> 5 


### Specialization of cost equations eval_SingleLinkCluster_start/2 
* CE 1 is refined into CE [33,34,35,36,37] 


#### Refined cost equations eval_SingleLinkCluster_start/2 
* CE 33: eval_SingleLinkCluster_start(V_n,B) = 0+ eval_SingleLinkCluster_10(C,B):1
     [C=1,V_n=1] 
* CE 34: eval_SingleLinkCluster_start(V_n,B) = 0+ eval_SingleLinkCluster_10(V_n,B):2
     [0>=V_n] 
* CE 35: eval_SingleLinkCluster_start(V_n,B) = 0+ eval_SingleLinkCluster_10(V_n,B):3
     [V_n>=2] 
* CE 36: eval_SingleLinkCluster_start(V_n,B) = 0+ eval_SingleLinkCluster_10(V_n,B):4
     [V_n>=3] 
* CE 37: eval_SingleLinkCluster_start(V_n,B) = 0+ eval_SingleLinkCluster_10(V_n,B):5
     [V_n>=4] 

### Cost equations --> "Loop" of eval_SingleLinkCluster_start/2 
* CEs [37] --> Loop 33 
* CEs [36] --> Loop 34 
* CEs [35] --> Loop 35 
* CEs [34] --> Loop 36 
* CEs [33] --> Loop 37 

#### Loops of eval_SingleLinkCluster_start/2 
* Loop 33: eval_SingleLinkCluster_start(V_n,B) [V_n>=4] 
* Loop 34: eval_SingleLinkCluster_start(V_n,B) [V_n>=3] 
* Loop 35: eval_SingleLinkCluster_start(V_n,B) [V_n>=2] 
* Loop 36: eval_SingleLinkCluster_start(V_n,B) [0>=V_n] 
* Loop 37: eval_SingleLinkCluster_start(V_n,B) [V_n=1] 

### Ranking functions of CR eval_SingleLinkCluster_start(V_n,B) 

#### Partial ranking functions of CR eval_SingleLinkCluster_start(V_n,B) 


### Resulting Chains:eval_SingleLinkCluster_start(V_n,B) 
* [37]
* [36]
* [35]
* [34]
* [33]


### Merging Chains  eval_SingleLinkCluster_start/2 into  External patterns of execution 
* [[37]] --> 1 
* [[36]] --> 2 
* [[35]] --> 3 
* [[34]] --> 4 
* [[33]] --> 5 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 11 

#### Computing cost of phase [12] 

#### Simplifying cost structure of CE 13 

#### Cost of loops [12] 

 * loop 12:eval_SingleLinkCluster_bb5_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,V_i_0,V_b_2,V_a_2,B,C,D,E,F,G) -> [eval_SingleLinkCluster_bb5_in(V_n',V_b_0',V_a_0',V_b_1',V_a_1',V_i_0',V_b_2',V_a_2',B',C',D',E',F',G')] 
1
##### Pending set eval_SingleLinkCluster_bb5_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,V_i_0,V_b_2,V_a_2,B,C,D,E,F,G)
* Psum in Loop 12: [it(12)=<1]

###### Computing sum for it(12)=<1  in Loop 12 
   - Applying inductive sum strategy 
     - head Candidate: V_i_0 
     - head Candidate: V_i_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_i_0 
     - tail Candidate: V_i_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(12)=<V_i_0,it(12)=<V_i_0,it(12)=<V_i_0-V_i_0',it(12)=<V_i_0-V_i_0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [12] 

#### Simplifying cost structure of phase [12] 

#### Cost of phase [12]:eval_SingleLinkCluster_bb5_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,V_i_0,V_b_2,V_a_2,B,C,D,E,F,G) -> [eval_SingleLinkCluster_bb5_in(V_n',V_b_0',V_a_0',V_b_1',V_a_1',V_i_0',V_b_2',V_a_2',B',C',D',E',F',G')] 
1*it(12)+0
  Such that:it(12) =< V_i_0
it(12) =< V_i_0-V_i_0'

#### Simplifying cost structure of chain [[12],14] 

#### Computing cost of phase [11,13] 

#### Simplifying cost structure of CE 12 

#### Simplifying cost structure of CE 14 

#### Cost of loops [11,13] 

 * loop 11:eval_SingleLinkCluster_bb5_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,V_i_0,V_b_2,V_a_2,B,C,D,E,F,G) -> [eval_SingleLinkCluster_bb5_in(V_n',V_b_0',V_a_0',V_b_1',V_a_1',V_i_0',V_b_2',V_a_2',B',C',D',E',F',G')] 
1
 * loop 13:eval_SingleLinkCluster_bb5_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,V_i_0,V_b_2,V_a_2,B,C,D,E,F,G) -> [eval_SingleLinkCluster_bb5_in(V_n',V_b_0',V_a_0',V_b_1',V_a_1',V_i_0',V_b_2',V_a_2',B',C',D',E',F',G')] 
1
##### Pending set eval_SingleLinkCluster_bb5_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,V_i_0,V_b_2,V_a_2,B,C,D,E,F,G)
* Psum in Loop 11: [it(11)=<1]
* Psum in Loop 13: [it(13)=<1]

###### Computing sum for it(11)=<1  in Loop 11 
   - Applying inductive sum strategy 
     - head Candidate: V_i_0 
       - Loop 13 is collaborative and bounds [it(13)] 
     - head Candidate: V_i_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_i_0 
       - Loop 13 is collaborative and bounds [it(13)] 
     - tail Candidate: V_i_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(11)+it(13)=<V_i_0,it(11)+it(13)=<V_i_0,it(11)+it(13)=<V_i_0-V_i_0',it(11)+it(13)=<V_i_0-V_i_0'] 

##### Pending set eval_SingleLinkCluster_0(V_n,B)
* Psum in Loop 13: [it(13)=<1]

###### Computing sum for it(13)=<1  in Loop 13 
   - Applying inductive sum strategy 
     - head Candidate: V_i_0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_i_0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_a_2 
       - Loop 11 is collaborative
     - head Candidate: V_n-V_a_1+V_a_2-1 
       - Loop 11 is collaborative
     - head Candidate: V_n+V_b_1-V_b_2-2 
       - Loop 11 is collaborative
     - head Candidate: V_b_1+V_a_1-V_b_2-1 
       - Loop 11 is collaborative
     - tail Candidate: V_i_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_i_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_a_2 
       - Loop 11 is collaborative
     - tail Candidate: V_n-V_a_1+V_a_2-1 
       - Loop 11 is collaborative
     - tail Candidate: V_n+V_b_1-V_b_2-2 
       - Loop 11 is collaborative
     - tail Candidate: V_b_1+V_a_1-V_b_2-1 
       - Loop 11 is collaborative
 * Adding constraints: [it(11)+it(13)=<V_i_0,it(11)+it(13)=<V_i_0,it(13)=<V_a_2,it(13)=<V_n-V_a_1+V_a_2-1,it(13)=<V_n+V_b_1-V_b_2-2,it(13)=<V_b_1+V_a_1-V_b_2-1,it(11)+it(13)=<V_i_0-V_i_0',it(11)+it(13)=<V_i_0-V_i_0',it(13)=<V_a_2-V_a_2',it(13)=<V_n-V_a_1+V_a_2-V_n'+V_a_1'-V_a_2',it(13)=<V_n+V_b_1-V_b_2-V_n'-V_b_1'+V_b_2',it(13)=<V_b_1+V_a_1-V_b_2-V_b_1'-V_a_1'+V_b_2'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [11,13] 

#### Simplifying cost structure of phase [11,13] 

#### Cost of phase [11,13]:eval_SingleLinkCluster_bb5_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,V_i_0,V_b_2,V_a_2,B,C,D,E,F,G) -> [eval_SingleLinkCluster_bb5_in(V_n',V_b_0',V_a_0',V_b_1',V_a_1',V_i_0',V_b_2',V_a_2',B',C',D',E',F',G')] 
1*it(11)+1*it(13)+0
  Such that:it(13) =< V_n+V_b_1-V_b_2
it(13) =< V_n+V_b_1-V_b_2-V_n'-V_b_1'+V_b_2'
it(13) =< V_n-V_a_1+V_a_2
it(13) =< V_n-V_a_1+V_a_2-V_n'+V_a_1'-V_a_2'
it(13) =< V_b_1+V_a_1-V_b_2
it(13) =< V_b_1+V_a_1-V_b_2-V_b_1'-V_a_1'+V_b_2'
it(13) =< V_a_2
it(13) =< V_a_2-V_a_2'
aux(1) =< V_i_0
aux(2) =< V_i_0-V_i_0'
it(11) =< aux(1)
it(13) =< aux(1)
it(11) =< aux(2)
it(13) =< aux(2)

#### Simplifying cost structure of chain [[11,13],[12],14] 
 * Joined equivalent variables [aux(3),aux(1),aux(2)] into aux(3)

#### Found solution for phase  [11,13] in the cache 

#### Cost of phase [11,13]:eval_SingleLinkCluster_bb5_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,V_i_0,V_b_2,V_a_2,B,C,D,E,F,G) -> [eval_SingleLinkCluster_bb5_in(V_n',V_b_0',V_a_0',V_b_1',V_a_1',V_i_0',V_b_2',V_a_2',B',C',D',E',F',G')] 
1*it(11)+1*it(13)+0
  Such that:it(13) =< V_n+V_b_1-V_b_2
it(13) =< V_n+V_b_1-V_b_2-V_n'-V_b_1'+V_b_2'
it(13) =< V_n-V_a_1+V_a_2
it(13) =< V_n-V_a_1+V_a_2-V_n'+V_a_1'-V_a_2'
it(13) =< V_b_1+V_a_1-V_b_2
it(13) =< V_b_1+V_a_1-V_b_2-V_b_1'-V_a_1'+V_b_2'
it(13) =< V_a_2
it(13) =< V_a_2-V_a_2'
aux(1) =< V_i_0
aux(2) =< V_i_0-V_i_0'
it(11) =< aux(1)
it(13) =< aux(1)
it(11) =< aux(2)
it(13) =< aux(2)

#### Simplifying cost structure of chain [[11,13],14] 
 * Joined equivalent variables [aux(4),aux(1),aux(2)] into aux(4)

#### Cost of chains of eval_SingleLinkCluster_bb5_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,V_i_0,V_b_2,V_a_2,B,C,D,E,F,G):
* Chain [[12],14]: 1*it(12)+0
  Such that:it(12) =< V_i_0

  with precondition: [B=2,V_n=C,V_b_0=D,V_a_0=E,V_b_2=F,V_a_1+V_b_1=V_a_2+V_b_2+1,V_a_1+V_b_1=V_b_2+G+1,V_b_1>=1,V_i_0>=1,V_b_2+1>=V_b_1,V_b_2+1>=V_a_1+V_b_1,V_b_1+V_n>=V_b_2+V_i_0+2] 

* Chain [[11,13],[12],14]: 1*it(11)+1*it(12)+1*it(13)+0
  Such that:it(12) =< V_i_0+V_b_2-F
it(13) =< -V_b_2+F
aux(3) =< V_i_0
it(12) =< aux(3)
it(11) =< aux(3)
it(13) =< aux(3)

  with precondition: [B=2,G=0,V_n=C,V_b_0=D,V_a_0=E,V_a_1+V_b_1=F+1,V_a_1+V_b_1=V_a_2+V_b_2+1,V_b_1>=1,V_a_2>=1,V_a_1>=V_a_2,V_i_0>=V_a_2+1,V_a_2+V_n>=V_a_1+V_i_0+1] 

* Chain [[11,13],14]: 1*it(11)+1*it(13)+0
  Such that:it(13) =< -V_b_2+F
aux(4) =< V_i_0
it(11) =< aux(4)
it(13) =< aux(4)

  with precondition: [B=2,V_n=C,V_b_0=D,V_a_0=E,V_a_1+V_b_1=V_a_2+V_b_2+1,V_a_1+V_b_1=F+G+1,V_b_1>=1,V_i_0>=1,V_a_2>=1,V_a_1>=V_a_2,V_a_1+V_b_1>=F+1,V_a_2+F+1>=V_a_1+V_b_1,V_a_2+V_n>=V_a_1+V_i_0+1,V_a_1+V_b_1+V_i_0>=V_a_2+F+1] 

* Chain [14]: 0
  with precondition: [B=2,D=V_b_0,E=V_a_0,V_n=C,V_b_2=F,V_a_2=G,V_a_2+V_b_2+1=V_a_1+V_b_1,0>=V_i_0,V_b_1>=1,V_b_2+1>=V_b_1,V_b_1+V_n>=V_b_2+V_i_0+2] 


#### Simplifying cost structure of CE 15 

#### Computing cost of phase [17] 

#### Simplifying cost structure of CE 17 

#### Cost of loops [17] 

 * loop 17:eval_SingleLinkCluster_bb3_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,B,C,D,E) -> [eval_SingleLinkCluster_bb3_in(V_n',V_b_0',V_a_0',V_b_1',V_a_1',B',C',D',E')] 
2
##### Pending set eval_SingleLinkCluster_bb3_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,B,C,D,E)
* Psum in Loop 17: [it(17)=<1]

###### Computing sum for it(17)=<1  in Loop 17 
   - Applying inductive sum strategy 
     - head Candidate: V_b_1 
     - head Candidate: V_b_1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_b_1 
     - tail Candidate: V_b_1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(17)=<V_b_1,it(17)=<V_b_1,it(17)=<V_b_1-V_b_1',it(17)=<V_b_1-V_b_1'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [17] 

#### Simplifying cost structure of phase [17] 

#### Cost of phase [17]:eval_SingleLinkCluster_bb3_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,B,C,D,E) -> [eval_SingleLinkCluster_bb3_in(V_n',V_b_0',V_a_0',V_b_1',V_a_1',B',C',D',E')] 
2*it(17)+0
  Such that:it(17) =< V_b_1
it(17) =< V_b_1-V_b_1'

#### Simplifying cost structure of chain [[17],19] 

#### Computing cost of phase [16] 
 * Renamed intermediate variables: 
[(eq(18,1),it(12))>>s(1)]

#### Simplifying cost structure of CE 18 
 * Renamed intermediate variables: 
[(it(16),s(1))>>s(2)]

#### Cost of loops [16] 

 * loop 16:eval_SingleLinkCluster_bb3_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,B,C,D,E) -> [eval_SingleLinkCluster_bb3_in(V_n',V_b_0',V_a_0',V_b_1',V_a_1',B',C',D',E')] 
1*s(2)+2
  Such that:s(2) =< V_n

##### Pending set eval_SingleLinkCluster_bb3_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,B,C,D,E)
* Psum in Loop 16: [it(16)=<1,s(3)=<V_n]

###### Computing sum for it(16)=<1  in Loop 16 
   - Applying inductive sum strategy 
     - head Candidate: V_b_1 
     - head Candidate: V_b_1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_b_1 
     - tail Candidate: V_b_1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(16)=<V_b_1,it(16)=<V_b_1,it(16)=<V_b_1-V_b_1',it(16)=<V_b_1-V_b_1'] 

##### Pending set eval_SingleLinkCluster_0(V_n,B)
* Psum in Loop 16: [s(3)=<V_n]

###### Computing sum for s(3)=<V_n  in Loop 16 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(5)=<V_n] 
 * Adding constraints: [s(3)=<it(16)*aux(5)] 

##### Pending set eval_SingleLinkCluster_bb3_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,B,C,D,E)
* Pmax/min: [aux(5)=<V_n]

###### Computing max_min for aux(5)=<V_n  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(5)=<V_n] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [16] 

#### Simplifying cost structure of phase [16] 

#### Cost of phase [16]:eval_SingleLinkCluster_bb3_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,B,C,D,E) -> [eval_SingleLinkCluster_bb3_in(V_n',V_b_0',V_a_0',V_b_1',V_a_1',B',C',D',E')] 
2*it(16)+1*s(3)+0
  Such that:aux(5) =< V_n
it(16) =< V_b_1
it(16) =< V_b_1-V_b_1'
s(3) =< it(16)*aux(5)

#### Simplifying cost structure of chain [[16],19] 

#### Computing cost of phase [15] 
 * Renamed intermediate variables: 
[(eq(19,1),it(13))>>s(4),(eq(19,1),aux(4))>>s(5),(eq(19,1),it(11))>>s(6)]

#### Simplifying cost structure of CE 19 
 * Renamed intermediate variables: 
[(it(15),s(5))>>s(7),(it(15),s(4))>>s(8),(it(15),s(6))>>s(9)]

#### Cost of loops [15] 

 * loop 15:eval_SingleLinkCluster_bb3_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,B,C,D,E) -> [eval_SingleLinkCluster_bb3_in(V_n',V_b_0',V_a_0',V_b_1',V_a_1',B',C',D',E')] 
1*s(8)+1*s(9)+2
  Such that:s(7) =< V_n
s(8) =< V_a_1-V_a_1'
s(9) =< s(7)
s(8) =< s(7)

##### Pending set eval_SingleLinkCluster_bb3_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,B,C,D,E)
* Psum in Loop 15: [it(15)=<1,s(12)=<V_n,s(10)=<V_a_1-V_a_1']

###### Computing sum for it(15)=<1  in Loop 15 
   - Applying inductive sum strategy 
     - head Candidate: V_b_1+V_a_1-1 
     - head Candidate: V_b_1+V_a_1-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_b_1+V_a_1-1 
     - tail Candidate: V_b_1+V_a_1-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(15)=<V_b_1+V_a_1-1,it(15)=<V_b_1+V_a_1-1,it(15)=<V_b_1+V_a_1-V_b_1'-V_a_1',it(15)=<V_b_1+V_a_1-V_b_1'-V_a_1'] 

##### Pending set eval_SingleLinkCluster_0(V_n,B)
* Psum in Loop 15: [s(12)=<V_n,s(10)=<V_a_1-V_a_1']

###### Computing sum for s(12)=<V_n  in Loop 15 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(6)=<V_n] 
 * Adding constraints: [s(12)=<it(15)*aux(6)] 

##### Pending set eval_SingleLinkCluster_bb3_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,B,C,D,E)
* Pmax/min: [aux(6)=<V_n]
* Psum in Loop 15: [s(10)=<V_a_1-V_a_1']

###### Computing max_min for aux(6)=<V_n  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(6)=<V_n] 

##### Pending set eval_SingleLinkCluster_bb3_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,B,C,D,E)
* Psum in Loop 15: [s(10)=<V_a_1-V_a_1']

###### Computing sum for s(10)=<V_a_1-V_a_1'  in Loop 15 
   - Applying inductive sum strategy 
     - head Candidate: V_n+V_a_1-2 
     - head Candidate: V_a_1 
     - tail Candidate: V_n+V_a_1-2 
     - tail Candidate: V_a_1 
 * Adding constraints: [s(10)=<V_n+V_a_1-2,s(10)=<V_a_1,s(10)=<V_n+V_a_1-V_n'-V_a_1',s(10)=<V_a_1-V_a_1'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [15] 

#### Simplifying cost structure of phase [15] 

#### Cost of phase [15]:eval_SingleLinkCluster_bb3_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,B,C,D,E) -> [eval_SingleLinkCluster_bb3_in(V_n',V_b_0',V_a_0',V_b_1',V_a_1',B',C',D',E')] 
2*it(15)+1*s(10)+1*s(11)+0
  Such that:aux(6) =< V_n
s(10) =< V_n+V_a_1
s(10) =< V_n+V_a_1-V_n'-V_a_1'
it(15) =< V_b_1+V_a_1
it(15) =< V_b_1+V_a_1-V_b_1'-V_a_1'
s(10) =< V_a_1
s(10) =< V_a_1-V_a_1'
s(12) =< it(15)*aux(6)
s(11) =< s(12)
s(10) =< s(12)

#### Simplifying cost structure of chain [[15],[16],19] 
 * Joined equivalent variables [aux(8),aux(5),aux(6)] into aux(8)
 * Joined equivalent variables [it(15),it(16)] into it(15)

#### Found solution for phase  [15] in the cache 

#### Cost of phase [15]:eval_SingleLinkCluster_bb3_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,B,C,D,E) -> [eval_SingleLinkCluster_bb3_in(V_n',V_b_0',V_a_0',V_b_1',V_a_1',B',C',D',E')] 
2*it(15)+1*s(10)+1*s(11)+0
  Such that:aux(6) =< V_n
s(10) =< V_n+V_a_1
s(10) =< V_n+V_a_1-V_n'-V_a_1'
it(15) =< V_b_1+V_a_1
it(15) =< V_b_1+V_a_1-V_b_1'-V_a_1'
s(10) =< V_a_1
s(10) =< V_a_1-V_a_1'
s(12) =< it(15)*aux(6)
s(11) =< s(12)
s(10) =< s(12)

#### Simplifying cost structure of chain [[15],19] 
 * Renamed intermediate variables: 
[(eq(16,1),it(12))>>s(13),(eq(16,1),it(13))>>s(14),(eq(16,1),aux(3))>>s(15),(eq(16,1),it(11))>>s(16)]

#### Simplifying cost structure of CE 16 

#### Simplifying cost structure of chain [18,[16],19] 
 * Joined equivalent variables [aux(9),aux(5),s(15)] into aux(9)

#### Found solution for phase  [15] in the cache 

#### Cost of phase [15]:eval_SingleLinkCluster_bb3_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,B,C,D,E) -> [eval_SingleLinkCluster_bb3_in(V_n',V_b_0',V_a_0',V_b_1',V_a_1',B',C',D',E')] 
2*it(15)+1*s(10)+1*s(11)+0
  Such that:aux(6) =< V_n
s(10) =< V_n+V_a_1
s(10) =< V_n+V_a_1-V_n'-V_a_1'
it(15) =< V_b_1+V_a_1
it(15) =< V_b_1+V_a_1-V_b_1'-V_a_1'
s(10) =< V_a_1
s(10) =< V_a_1-V_a_1'
s(12) =< it(15)*aux(6)
s(11) =< s(12)
s(10) =< s(12)

#### Simplifying cost structure of chain [[15],18,[16],19] 
 * Joined equivalent variables [aux(12),aux(6),aux(9)] into aux(12)
 * Joined equivalent variables [it(15),it(16)] into it(15)
 * Joined equivalent variables [s(13),s(16)] into s(13)

#### Cost of chains of eval_SingleLinkCluster_bb3_in(V_n,V_b_0,V_a_0,V_b_1,V_a_1,B,C,D,E):
* Chain [[17],19]: 2*it(17)+0
  Such that:it(17) =< V_b_1

  with precondition: [B=3,D=0,V_a_0=V_a_1+1,V_n=C,V_a_0=E+1,1>=V_n,V_a_0>=1,V_b_1>=1,V_b_0+1>=V_b_1] 

* Chain [[16],19]: 2*it(16)+1*s(3)+0
  Such that:aux(5) =< V_n
it(16) =< V_b_1
s(3) =< it(16)*aux(5)

  with precondition: [V_a_1=0,B=3,D=0,E=0,V_n=C,V_n>=2,V_a_0>=1,V_b_1>=1,V_a_0+V_b_0>=V_b_1] 

* Chain [[15],[16],19]: 4*it(15)+1*s(3)+1*s(10)+1*s(11)+0
  Such that:s(10) =< V_a_1
aux(7) =< V_b_1+V_a_1
aux(8) =< C
it(15) =< aux(7)
s(3) =< it(15)*aux(8)
s(12) =< it(15)*aux(8)
s(11) =< s(12)
s(10) =< s(12)

  with precondition: [B=3,D=0,E=0,V_n=C,V_n>=2,V_b_1>=1,V_a_1>=1,V_a_0>=V_a_1+1,V_a_0+V_b_0>=V_a_1+V_b_1] 

* Chain [[15],19]: 2*it(15)+1*s(10)+1*s(11)+0
  Such that:it(15) =< V_b_1+V_a_1-E
s(10) =< V_a_1-E
aux(6) =< C
s(12) =< it(15)*aux(6)
s(11) =< s(12)
s(10) =< s(12)

  with precondition: [B=3,D=0,V_n=C,V_n>=2,V_b_1>=1,E>=1,V_a_0>=V_a_1+1,V_a_1>=E,V_a_0+V_b_0>=V_a_1+V_b_1] 

* Chain [[15],18,[16],19]: 4*it(15)+1*s(3)+1*s(10)+1*s(11)+2*s(13)+1*s(14)+2
  Such that:aux(10) =< V_b_1+V_a_1
aux(11) =< V_a_1
aux(12) =< C
it(15) =< aux(10)
s(10) =< aux(11)
s(14) =< aux(11)
s(13) =< aux(12)
s(14) =< aux(12)
s(3) =< it(15)*aux(12)
s(12) =< it(15)*aux(12)
s(11) =< s(12)
s(10) =< s(12)

  with precondition: [B=3,D=0,E=0,V_n=C,V_n>=3,V_b_1>=1,V_a_1>=1,V_a_0>=V_a_1+1,V_a_1+V_b_1>=3,V_a_0+V_b_0>=V_a_1+V_b_1] 

* Chain [19]: 0
  with precondition: [B=3,C=V_n,V_b_1=D,V_a_1=E,0>=V_b_1,V_a_1>=0,V_a_0>=V_a_1+1,V_a_0+V_b_0>=V_a_1+V_b_1] 

* Chain [18,[16],19]: 2*it(16)+1*s(3)+1*s(13)+1*s(14)+1*s(16)+2
  Such that:it(16) =< V_b_1+V_a_1
s(13) =< -V_a_1+C
s(14) =< V_a_1
aux(9) =< C
s(3) =< it(16)*aux(9)
s(13) =< aux(9)
s(16) =< aux(9)
s(14) =< aux(9)

  with precondition: [B=3,D=0,E=0,V_n=C,V_b_1>=1,V_a_1>=1,V_n>=V_a_1+2,V_a_0>=V_a_1+1,V_a_0+V_b_0>=V_a_1+V_b_1] 


#### Simplifying cost structure of CE 20 

#### Computing cost of phase [22] 
 * Renamed intermediate variables: 
[(eq(25,1),it(17))>>s(17)]

#### Simplifying cost structure of CE 25 
 * Renamed intermediate variables: 
[(it(22),s(17))>>s(18)]

#### Cost of loops [22] 

 * loop 22:eval_SingleLinkCluster_bb1_in(V_n,V_b_0,V_a_0,B) -> [eval_SingleLinkCluster_bb1_in(V_n',V_b_0',V_a_0',B')] 
2*s(18)+2
  Such that:s(18) =< 1

##### Pending set eval_SingleLinkCluster_bb1_in(V_n,V_b_0,V_a_0,B)
* Psum in Loop 22: [it(22)=<1,s(19)=<1]

###### Computing sum for it(22)=<1  in Loop 22 
   - Applying inductive sum strategy 
     - head Candidate: V_a_0 
     - head Candidate: V_a_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_a_0 
     - tail Candidate: V_a_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(22)=<V_a_0,it(22)=<V_a_0,it(22)=<V_a_0-V_a_0',it(22)=<V_a_0-V_a_0'] 

##### Pending set eval_SingleLinkCluster_0(V_n,B)
* Psum in Loop 22: [s(19)=<1]

###### Computing sum for s(19)=<1  in Loop 22 
   - Found a solution using cacheing 
 * Adding constraints: [s(19)=<aux(13),aux(13)=<V_a_0,aux(13)=<V_a_0,aux(13)=<V_a_0-V_a_0',aux(13)=<V_a_0-V_a_0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [22] 

#### Simplifying cost structure of phase [22] 

#### Cost of phase [22]:eval_SingleLinkCluster_bb1_in(V_n,V_b_0,V_a_0,B) -> [eval_SingleLinkCluster_bb1_in(V_n',V_b_0',V_a_0',B')] 
2*it(22)+2*s(19)+0
  Such that:aux(14) =< V_a_0
aux(15) =< V_a_0-V_a_0'
aux(13) =< aux(14)
it(22) =< aux(14)
aux(13) =< aux(15)
it(22) =< aux(15)
s(19) =< aux(13)

#### Simplifying cost structure of chain [[22],27] 
 * Joined equivalent variables [aux(16),aux(14),aux(15)] into aux(16)
 * Joined equivalent variables [aux(16),aux(13)] into aux(16)
 * Joined equivalent variables [it(22),s(19)] into it(22)
 * Renamed intermediate variables: 
[(eq(21,1),aux(5))>>s(20),(eq(21,1),it(16))>>s(21),(eq(21,1),s(3))>>s(22)]

#### Simplifying cost structure of CE 21 

#### Simplifying cost structure of chain [26,27] 

#### Computing cost of phase [21] 
 * Renamed intermediate variables: 
[(eq(26,1),it(15))>>s(23),(eq(26,1),s(10))>>s(24),(eq(26,1),aux(6))>>s(25),(eq(26,1),s(12))>>s(26),(eq(26,1),s(11))>>s(27)]

#### Simplifying cost structure of CE 26 
 * Renamed intermediate variables: 
[(it(21),s(25))>>s(28),(it(21),aux(17))>>s(29),(it(21),s(23))>>s(30),(it(21),s(24))>>s(31),(it(21),s(26))>>s(32),(it(21),s(27))>>s(33)]

#### Cost of loops [21] 

 * loop 21:eval_SingleLinkCluster_bb1_in(V_n,V_b_0,V_a_0,B) -> [eval_SingleLinkCluster_bb1_in(V_n',V_b_0',V_a_0',B')] 
2*s(30)+1*s(31)+1*s(33)+2
  Such that:s(28) =< V_n'
s(29) =< V_a_0-V_a_0'
s(30) =< s(29)
s(31) =< s(29)
s(32) =< s(30)*s(28)
s(33) =< s(32)
s(31) =< s(32)

##### Pending set eval_SingleLinkCluster_bb1_in(V_n,V_b_0,V_a_0,B)
* Pmax/min: [s(28)=<V_n]
* Psum in Loop 21: [it(21)=<1,s(38)=<V_a_0-V_a_0']

###### Computing max_min for s(28)=<V_n  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(28)=<V_n] 

##### Pending set eval_SingleLinkCluster_bb1_in(V_n,V_b_0,V_a_0,B)
* Psum in Loop 21: [it(21)=<1,s(38)=<V_a_0-V_a_0']

###### Computing sum for it(21)=<1  in Loop 21 
   - Applying inductive sum strategy 
     - head Candidate: V_a_0-1 
     - head Candidate: V_a_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_a_0-1 
     - tail Candidate: V_a_0-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(21)=<V_a_0-1,it(21)=<V_a_0-1,it(21)=<V_a_0-V_a_0',it(21)=<V_a_0-V_a_0'] 

##### Pending set eval_SingleLinkCluster_bb1_in(V_n,V_b_0,V_a_0,B)
* Psum in Loop 21: [s(38)=<V_a_0-V_a_0']

###### Computing sum for s(38)=<V_a_0-V_a_0'  in Loop 21 
   - Applying inductive sum strategy 
     - head Candidate: V_a_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_a_0-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [s(38)=<V_a_0-1,s(38)=<V_a_0-V_a_0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [21] 

#### Simplifying cost structure of phase [21] 

#### Cost of phase [21]:eval_SingleLinkCluster_bb1_in(V_n,V_b_0,V_a_0,B) -> [eval_SingleLinkCluster_bb1_in(V_n',V_b_0',V_a_0',B')] 
2*it(21)+2*s(34)+1*s(35)+1*s(36)+0
  Such that:s(28) =< V_n
aux(18) =< V_a_0
aux(19) =< V_a_0-V_a_0'
it(21) =< aux(18)
s(38) =< aux(18)
it(21) =< aux(19)
s(38) =< aux(19)
s(34) =< s(38)
s(35) =< s(38)
s(37) =< s(34)*s(28)
s(36) =< s(37)
s(35) =< s(37)

#### Simplifying cost structure of chain [[21],26,27] 
 * Joined equivalent variables [aux(20),s(20),s(28)] into aux(20)
 * Joined equivalent variables [aux(21),aux(18),aux(19)] into aux(21)
 * Joined equivalent variables [aux(21),s(38)] into aux(21)
 * Joined equivalent variables [it(21),s(34)] into it(21)
 * Renamed intermediate variables: 
[(eq(22,1),s(10))>>s(39),(eq(22,1),aux(7))>>s(40),(eq(22,1),aux(8))>>s(41),(eq(22,1),it(15))>>s(42),(eq(22,1),s(3))>>s(43),(eq(22,1),s(12))>>s(44),(eq(22,1),s(11))>>s(45)]

#### Simplifying cost structure of CE 22 
 * Joined equivalent variables [aux(22),s(40)] into aux(22)

#### Simplifying cost structure of chain [25,27] 

#### Found solution for phase  [21] in the cache 

#### Cost of phase [21]:eval_SingleLinkCluster_bb1_in(V_n,V_b_0,V_a_0,B) -> [eval_SingleLinkCluster_bb1_in(V_n',V_b_0',V_a_0',B')] 
2*it(21)+2*s(34)+1*s(35)+1*s(36)+0
  Such that:s(28) =< V_n
aux(18) =< V_a_0
aux(19) =< V_a_0-V_a_0'
it(21) =< aux(18)
s(38) =< aux(18)
it(21) =< aux(19)
s(38) =< aux(19)
s(34) =< s(38)
s(35) =< s(38)
s(37) =< s(34)*s(28)
s(36) =< s(37)
s(35) =< s(37)

#### Simplifying cost structure of chain [[21],25,27] 
 * Joined equivalent variables [aux(23),s(28),s(41)] into aux(23)
 * Joined equivalent variables [aux(24),aux(18),aux(19),aux(22)] into aux(24)
 * Joined equivalent variables [aux(24),s(38)] into aux(24)
 * Joined equivalent variables [it(21),s(42)] into it(21)
 * Joined equivalent variables [it(21),s(34)] into it(21)
 * Joined equivalent variables [s(37),s(44)] into s(37)
 * Joined equivalent variables [s(35),s(39)] into s(35)
 * Joined equivalent variables [s(36),s(45)] into s(36)
 * Renamed intermediate variables: 
[(eq(23,1),aux(10))>>s(46),(eq(23,1),aux(11))>>s(47),(eq(23,1),aux(12))>>s(48),(eq(23,1),it(15))>>s(49),(eq(23,1),s(10))>>s(50),(eq(23,1),s(14))>>s(51),(eq(23,1),s(13))>>s(52),(eq(23,1),s(3))>>s(53),(eq(23,1),s(12))>>s(54),(eq(23,1),s(11))>>s(55)]

#### Simplifying cost structure of CE 23 
 * Joined equivalent variables [aux(25),s(46),s(47)] into aux(25)

#### Simplifying cost structure of chain [24,27] 

#### Found solution for phase  [21] in the cache 

#### Cost of phase [21]:eval_SingleLinkCluster_bb1_in(V_n,V_b_0,V_a_0,B) -> [eval_SingleLinkCluster_bb1_in(V_n',V_b_0',V_a_0',B')] 
2*it(21)+2*s(34)+1*s(35)+1*s(36)+0
  Such that:s(28) =< V_n
aux(18) =< V_a_0
aux(19) =< V_a_0-V_a_0'
it(21) =< aux(18)
s(38) =< aux(18)
it(21) =< aux(19)
s(38) =< aux(19)
s(34) =< s(38)
s(35) =< s(38)
s(37) =< s(34)*s(28)
s(36) =< s(37)
s(35) =< s(37)

#### Simplifying cost structure of chain [[21],24,27] 
 * Joined equivalent variables [aux(26),s(28),s(48)] into aux(26)
 * Joined equivalent variables [aux(27),aux(18),aux(19),aux(25)] into aux(27)
 * Joined equivalent variables [aux(27),s(38)] into aux(27)
 * Joined equivalent variables [it(21),s(49)] into it(21)
 * Joined equivalent variables [it(21),s(34)] into it(21)
 * Joined equivalent variables [s(37),s(54)] into s(37)
 * Joined equivalent variables [s(35),s(50)] into s(35)
 * Joined equivalent variables [s(36),s(55)] into s(36)
 * Renamed intermediate variables: 
[(eq(24,1),it(16))>>s(56),(eq(24,1),s(13))>>s(57),(eq(24,1),s(14))>>s(58),(eq(24,1),aux(9))>>s(59),(eq(24,1),s(3))>>s(60),(eq(24,1),s(16))>>s(61)]

#### Simplifying cost structure of CE 24 

#### Simplifying cost structure of chain [23,27] 

#### Found solution for phase  [21] in the cache 

#### Cost of phase [21]:eval_SingleLinkCluster_bb1_in(V_n,V_b_0,V_a_0,B) -> [eval_SingleLinkCluster_bb1_in(V_n',V_b_0',V_a_0',B')] 
2*it(21)+2*s(34)+1*s(35)+1*s(36)+0
  Such that:s(28) =< V_n
aux(18) =< V_a_0
aux(19) =< V_a_0-V_a_0'
it(21) =< aux(18)
s(38) =< aux(18)
it(21) =< aux(19)
s(38) =< aux(19)
s(34) =< s(38)
s(35) =< s(38)
s(37) =< s(34)*s(28)
s(36) =< s(37)
s(35) =< s(37)

#### Simplifying cost structure of chain [[21],23,27] 
 * Joined equivalent variables [aux(29),s(28),s(59)] into aux(29)
 * Joined equivalent variables [aux(31),aux(18),aux(19)] into aux(31)
 * Joined equivalent variables [aux(31),s(38)] into aux(31)
 * Joined equivalent variables [it(21),s(34)] into it(21)
 * Renamed intermediate variables: 
[(ch([25,27]),s(41))>>s(62),(ch([25,27]),aux(22))>>s(63),(ch([25,27]),s(39))>>s(64),(ch([25,27]),s(42))>>s(65),(ch([25,27]),s(43))>>s(66),(ch([25,27]),s(44))>>s(67),(ch([25,27]),s(45))>>s(68)]
 * Renamed intermediate variables: 
[(ch([[21],26,27]),s(21))>>s(69),(ch([[21],26,27]),aux(20))>>s(70),(ch([[21],26,27]),aux(21))>>s(71),(ch([[21],26,27]),s(22))>>s(72),(ch([[21],26,27]),it(21))>>s(73),(ch([[21],26,27]),s(35))>>s(74),(ch([[21],26,27]),s(37))>>s(75),(ch([[21],26,27]),s(36))>>s(76)]
 * Joined equivalent variables [aux(32),s(62),s(70)] into aux(32)
 * Joined equivalent variables [aux(33),s(63),s(71)] into aux(33)
 * Joined equivalent variables [s(65),s(73)] into s(65)
 * Joined equivalent variables [s(67),s(75)] into s(67)
 * Joined equivalent variables [s(64),s(74)] into s(64)
 * Joined equivalent variables [s(68),s(76)] into s(68)
 * Renamed intermediate variables: 
[(ch([24,27]),s(48))>>s(77),(ch([24,27]),aux(25))>>s(78),(ch([24,27]),s(49))>>s(79),(ch([24,27]),s(50))>>s(80),(ch([24,27]),s(51))>>s(81),(ch([24,27]),s(52))>>s(82),(ch([24,27]),s(53))>>s(83),(ch([24,27]),s(54))>>s(84),(ch([24,27]),s(55))>>s(85)]
 * Renamed intermediate variables: 
[(ch([[21],23,27]),aux(29))>>s(86),(ch([[21],23,27]),aux(30))>>s(87),(ch([[21],23,27]),aux(31))>>s(88),(ch([[21],23,27]),s(57))>>s(89),(ch([[21],23,27]),aux(28))>>s(90),(ch([[21],23,27]),s(56))>>s(91),(ch([[21],23,27]),s(58))>>s(92),(ch([[21],23,27]),s(60))>>s(93),(ch([[21],23,27]),s(61))>>s(94),(ch([[21],23,27]),it(21))>>s(95),(ch([[21],23,27]),s(35))>>s(96),(ch([[21],23,27]),s(37))>>s(97),(ch([[21],23,27]),s(36))>>s(98)]
 * Renamed intermediate variables: 
[(ch([[21],25,27]),aux(23))>>s(99),(ch([[21],25,27]),aux(24))>>s(100),(ch([[21],25,27]),s(35))>>s(101),(ch([[21],25,27]),it(21))>>s(102),(ch([[21],25,27]),s(43))>>s(103),(ch([[21],25,27]),s(37))>>s(104),(ch([[21],25,27]),s(36))>>s(105)]
 * Joined equivalent variables [aux(34),s(77),s(86),s(99)] into aux(34)
 * Joined equivalent variables [aux(35),s(78),s(88),s(100)] into aux(35)
 * Joined equivalent variables [s(82),s(94)] into s(82)
 * Joined equivalent variables [s(79),s(95),s(102)] into s(79)
 * Joined equivalent variables [s(84),s(97),s(104)] into s(84)
 * Joined equivalent variables [s(83),s(103)] into s(83)
 * Joined equivalent variables [s(80),s(96),s(101)] into s(80)
 * Joined equivalent variables [s(85),s(98),s(105)] into s(85)

#### Cost of chains of eval_SingleLinkCluster_bb1_in(V_n,V_b_0,V_a_0,B):
* Chain [[22],27]: 4*it(22)+0
  Such that:aux(16) =< 1
it(22) =< aux(16)

  with precondition: [V_n=1,V_b_0=0,V_a_0=1,B=4] 

* Chain [[21],26,27]: 4*it(21)+2*s(21)+1*s(22)+1*s(35)+1*s(36)+2
  Such that:s(21) =< 1
aux(20) =< V_n
aux(21) =< V_a_0
s(22) =< s(21)*aux(20)
it(21) =< aux(21)
s(35) =< aux(21)
s(37) =< it(21)*aux(20)
s(36) =< s(37)
s(35) =< s(37)

  with precondition: [V_b_0=0,B=4,V_a_0>=2,V_n>=V_a_0] 

* Chain [[21],25,27]: 8*it(21)+2*s(35)+2*s(36)+1*s(43)+2
  Such that:aux(23) =< V_n
aux(24) =< V_a_0
s(35) =< aux(24)
it(21) =< aux(24)
s(43) =< it(21)*aux(23)
s(37) =< it(21)*aux(23)
s(36) =< s(37)
s(35) =< s(37)

  with precondition: [V_b_0=0,B=4,V_a_0>=3,V_n>=V_a_0] 

* Chain [[21],24,27]: 8*it(21)+2*s(35)+2*s(36)+1*s(51)+2*s(52)+1*s(53)+4
  Such that:aux(26) =< V_n
aux(27) =< V_a_0
it(21) =< aux(27)
s(35) =< aux(27)
s(51) =< aux(27)
s(52) =< aux(26)
s(51) =< aux(26)
s(53) =< it(21)*aux(26)
s(37) =< it(21)*aux(26)
s(36) =< s(37)
s(35) =< s(37)

  with precondition: [V_b_0=0,B=4,V_a_0>=4,V_n>=V_a_0] 

* Chain [[21],23,27]: 4*it(21)+1*s(35)+1*s(36)+2*s(56)+1*s(57)+1*s(58)+1*s(60)+1*s(61)+4
  Such that:aux(29) =< V_n
aux(30) =< V_n+1
aux(31) =< V_a_0
s(57) =< aux(29)
aux(28) =< aux(30)
s(57) =< aux(30)
aux(28) =< aux(31)
s(56) =< aux(28)
s(58) =< aux(28)
s(60) =< s(56)*aux(29)
s(61) =< aux(29)
s(58) =< aux(29)
it(21) =< aux(31)
s(35) =< aux(31)
s(37) =< it(21)*aux(29)
s(36) =< s(37)
s(35) =< s(37)

  with precondition: [V_b_0=0,B=4,V_a_0>=3,V_n>=V_a_0] 

* Chain [27]: 0
  with precondition: [V_b_0=0,B=4,0>=V_a_0,V_n>=V_a_0] 

* Chain [25,27]: 1*s(39)+4*s(42)+1*s(43)+1*s(45)+2
  Such that:s(41) =< V_n
aux(22) =< V_a_0
s(39) =< aux(22)
s(42) =< aux(22)
s(43) =< s(42)*s(41)
s(44) =< s(42)*s(41)
s(45) =< s(44)
s(39) =< s(44)

  with precondition: [V_b_0=0,B=4,V_a_0>=2,V_n>=V_a_0] 

* Chain [24,27]: 4*s(49)+1*s(50)+1*s(51)+2*s(52)+1*s(53)+1*s(55)+4
  Such that:s(48) =< V_n
aux(25) =< V_a_0
s(49) =< aux(25)
s(50) =< aux(25)
s(51) =< aux(25)
s(52) =< s(48)
s(51) =< s(48)
s(53) =< s(49)*s(48)
s(54) =< s(49)*s(48)
s(55) =< s(54)
s(50) =< s(54)

  with precondition: [V_b_0=0,B=4,V_a_0>=3,V_n>=V_a_0] 

 * Renamed intermediate variables: 
[(eq(28,1),aux(16))>>s(106),(eq(28,1),it(22))>>s(107)]

#### Simplifying cost structure of CE 28 

#### Simplifying cost structure of CE 29 
 * Renamed intermediate variables: 
[(eq(30,1),s(69))>>s(108),(eq(30,1),aux(32))>>s(109),(eq(30,1),aux(33))>>s(110),(eq(30,1),s(72))>>s(111),(eq(30,1),s(65))>>s(112),(eq(30,1),s(64))>>s(113),(eq(30,1),s(67))>>s(114),(eq(30,1),s(68))>>s(115),(eq(30,1),s(66))>>s(116)]

#### Simplifying cost structure of CE 30 
 * Joined equivalent variables [aux(36),s(109),s(110)] into aux(36)
 * Renamed intermediate variables: 
[(eq(31,1),s(87))>>s(117),(eq(31,1),aux(34))>>s(118),(eq(31,1),aux(35))>>s(119),(eq(31,1),s(79))>>s(120),(eq(31,1),s(80))>>s(121),(eq(31,1),s(81))>>s(122),(eq(31,1),s(82))>>s(123),(eq(31,1),s(83))>>s(124),(eq(31,1),s(84))>>s(125),(eq(31,1),s(85))>>s(126),(eq(31,1),s(89))>>s(127),(eq(31,1),s(90))>>s(128),(eq(31,1),s(91))>>s(129),(eq(31,1),s(92))>>s(130),(eq(31,1),s(93))>>s(131)]

#### Simplifying cost structure of CE 31 
 * Joined equivalent variables [aux(37),s(118),s(119)] into aux(37)
 * Joined equivalent variables [s(120),s(122),s(123)] into s(120)
 * Renamed intermediate variables: 
[(eq(32,1),aux(26))>>s(132),(eq(32,1),aux(27))>>s(133),(eq(32,1),it(21))>>s(134),(eq(32,1),s(35))>>s(135),(eq(32,1),s(51))>>s(136),(eq(32,1),s(52))>>s(137),(eq(32,1),s(53))>>s(138),(eq(32,1),s(37))>>s(139),(eq(32,1),s(36))>>s(140)]

#### Simplifying cost structure of CE 32 
 * Joined equivalent variables [aux(38),s(132),s(133)] into aux(38)
 * Joined equivalent variables [s(134),s(136),s(137)] into s(134)

#### Cost of chains of eval_SingleLinkCluster_10(V_n,B):
* Chain [32]: 4*s(107)+1
  Such that:s(106) =< 1
s(107) =< s(106)

  with precondition: [V_n=1] 

* Chain [31]: 1
  with precondition: [0>=V_n] 

* Chain [30]: 2*s(108)+1*s(111)+8*s(112)+2*s(113)+2*s(115)+1*s(116)+3
  Such that:s(108) =< 1
aux(36) =< V_n
s(111) =< s(108)*aux(36)
s(112) =< aux(36)
s(113) =< aux(36)
s(114) =< s(112)*aux(36)
s(115) =< s(114)
s(113) =< s(114)
s(116) =< s(112)*aux(36)

  with precondition: [V_n>=2] 

* Chain [29]: 20*s(120)+4*s(121)+2*s(124)+4*s(126)+1*s(127)+2*s(129)+1*s(130)+1*s(131)+5
  Such that:s(117) =< V_n+1
aux(37) =< V_n
s(120) =< aux(37)
s(121) =< aux(37)
s(124) =< s(120)*aux(37)
s(125) =< s(120)*aux(37)
s(126) =< s(125)
s(121) =< s(125)
s(127) =< aux(37)
s(128) =< s(117)
s(127) =< s(117)
s(128) =< aux(37)
s(129) =< s(128)
s(130) =< s(128)
s(131) =< s(129)*aux(37)
s(130) =< aux(37)

  with precondition: [V_n>=3] 

* Chain [28]: 11*s(134)+2*s(135)+1*s(138)+2*s(140)+5
  Such that:aux(38) =< V_n
s(134) =< aux(38)
s(135) =< aux(38)
s(138) =< s(134)*aux(38)
s(139) =< s(134)*aux(38)
s(140) =< s(139)
s(135) =< s(139)

  with precondition: [V_n>=4] 

 * Renamed intermediate variables: 
[(eq(33,1),s(106))>>s(141),(eq(33,1),s(107))>>s(142)]

#### Simplifying cost structure of CE 33 

#### Simplifying cost structure of CE 34 
 * Renamed intermediate variables: 
[(eq(35,1),s(108))>>s(143),(eq(35,1),aux(36))>>s(144),(eq(35,1),s(111))>>s(145),(eq(35,1),s(112))>>s(146),(eq(35,1),s(113))>>s(147),(eq(35,1),s(114))>>s(148),(eq(35,1),s(115))>>s(149),(eq(35,1),s(116))>>s(150)]

#### Simplifying cost structure of CE 35 
 * Renamed intermediate variables: 
[(eq(36,1),s(117))>>s(151),(eq(36,1),aux(37))>>s(152),(eq(36,1),s(120))>>s(153),(eq(36,1),s(121))>>s(154),(eq(36,1),s(124))>>s(155),(eq(36,1),s(125))>>s(156),(eq(36,1),s(126))>>s(157),(eq(36,1),s(127))>>s(158),(eq(36,1),s(128))>>s(159),(eq(36,1),s(129))>>s(160),(eq(36,1),s(130))>>s(161),(eq(36,1),s(131))>>s(162)]

#### Simplifying cost structure of CE 36 
 * Renamed intermediate variables: 
[(eq(37,1),aux(38))>>s(163),(eq(37,1),s(134))>>s(164),(eq(37,1),s(135))>>s(165),(eq(37,1),s(138))>>s(166),(eq(37,1),s(139))>>s(167),(eq(37,1),s(140))>>s(168)]

#### Simplifying cost structure of CE 37 

#### Cost of chains of eval_SingleLinkCluster_start(V_n,B):
* Chain [37]: 4*s(142)+1
  Such that:s(141) =< 1
s(142) =< s(141)

  with precondition: [V_n=1] 

* Chain [36]: 1
  with precondition: [0>=V_n] 

* Chain [35]: 2*s(143)+1*s(145)+8*s(146)+2*s(147)+2*s(149)+1*s(150)+3
  Such that:s(143) =< 1
s(144) =< V_n
s(145) =< s(143)*s(144)
s(146) =< s(144)
s(147) =< s(144)
s(148) =< s(146)*s(144)
s(149) =< s(148)
s(147) =< s(148)
s(150) =< s(146)*s(144)

  with precondition: [V_n>=2] 

* Chain [34]: 20*s(153)+4*s(154)+2*s(155)+4*s(157)+1*s(158)+2*s(160)+1*s(161)+1*s(162)+5
  Such that:s(152) =< V_n
s(151) =< V_n+1
s(153) =< s(152)
s(154) =< s(152)
s(155) =< s(153)*s(152)
s(156) =< s(153)*s(152)
s(157) =< s(156)
s(154) =< s(156)
s(158) =< s(152)
s(159) =< s(151)
s(158) =< s(151)
s(159) =< s(152)
s(160) =< s(159)
s(161) =< s(159)
s(162) =< s(160)*s(152)
s(161) =< s(152)

  with precondition: [V_n>=3] 

* Chain [33]: 11*s(164)+2*s(165)+1*s(166)+2*s(168)+5
  Such that:s(163) =< V_n
s(164) =< s(163)
s(165) =< s(163)
s(166) =< s(164)*s(163)
s(167) =< s(164)*s(163)
s(168) =< s(167)
s(165) =< s(167)

  with precondition: [V_n>=4] 


Closed-form bounds of eval_SingleLinkCluster_start(V_n,B): 
-------------------------------------
* Chain [37] with precondition: [V_n=1] 
    - Upper bound: 5 
    - Complexity: constant 
* Chain [36] with precondition: [0>=V_n] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [35] with precondition: [V_n>=2] 
    - Upper bound: 11*V_n+5+3*V_n*V_n 
    - Complexity: n^2 
* Chain [34] with precondition: [V_n>=3] 
    - Upper bound: 25*V_n+5+6*V_n*V_n+(V_n+1)*V_n+(3*V_n+3) 
    - Complexity: n^2 
* Chain [33] with precondition: [V_n>=4] 
    - Upper bound: 13*V_n+5+3*V_n*V_n 
    - Complexity: n^2 

### Maximum cost of eval_SingleLinkCluster_start(V_n,B): nat(V_n)*3*nat(V_n)+nat(V_n)*12+nat(V_n+1)*nat(V_n)+nat(V_n+1)*3+nat(V_n)*2+(nat(V_n)*3*nat(V_n)+nat(V_n)*11)+5 
Asymptotic class: n^2 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 94 ms.
* Invariants computed in 263 ms.
   - Backward Invariants 117 ms.
   - Transitive Invariants 45 ms.
* Refinement performed in 226 ms.
* Termination proved in 62 ms.
* Upper bounds computed in 520 ms.
   - Equation cost structures 78 ms.
   - Phase cost structures 191 ms.
   - Chain cost structures 220 ms.
   - Solving cost expressions 4 ms.
* Total analysis performed in 1257 ms.


Warning: Ignored call to eval_send_tree_stop/1 in equation loop_cont_eval_send_tree_bb1_in/2 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_send_tree_bb5_in/12]
1. recursive : [eval_send_tree_12/5,eval_send_tree_13/5,eval_send_tree_16/5,eval_send_tree_17/5,eval_send_tree_18/5,eval_send_tree_19/5,eval_send_tree_bb1_in/4,eval_send_tree_bb4_in/5,eval_send_tree_bb8_in/7,loop_cont_eval_send_tree_bb5_in/8]
2. non_recursive : [loop_cont_eval_send_tree_bb1_in/2]
3. non_recursive : [eval_send_tree_9/2]
4. non_recursive : [eval_send_tree_8/2]
5. non_recursive : [eval_send_tree_7/2]
6. non_recursive : [eval_send_tree_6/2]
7. non_recursive : [eval_send_tree_5/2]
8. non_recursive : [eval_send_tree_4/2]
9. non_recursive : [eval_send_tree_3/2]
10. non_recursive : [eval_send_tree_2/2]
11. non_recursive : [eval_send_tree_1/2]
12. non_recursive : [eval_send_tree_0/2]
13. non_recursive : [eval_send_tree_bb0_in/2]
14. non_recursive : [eval_send_tree_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_send_tree_bb5_in/12
1. SCC is partially evaluated into eval_send_tree_bb1_in/4
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is partially evaluated into eval_send_tree_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_send_tree_bb5_in/12 
* CE 8 is refined into CE [9] 
* CE 7 is refined into CE [10] 


#### Refined cost equations eval_send_tree_bb5_in/12 
* CE 9: eval_send_tree_bb5_in(A,B,C,D,E,F,A,G,C,D,E,H) = 0
     [D>=E,A>=C,1>=E,D=G+1,D=B+1,H=0,F=2] 
* CE 10: eval_send_tree_bb5_in(V_max_code,V_count_0,V_n_0,V_1,V_count_1,B,C,D,E,F,G,H) = 1+ eval_send_tree_bb5_in(V_max_code,I,V_n_0,V_1,J,K,C,D,E,F,G,H)
     [V_1>=V_count_1,V_max_code>=V_n_0,V_count_1>=2,V_count_1=J+1,V_1=I+1,V_1=V_count_0+1,K=2,B=2] 

### Cost equations --> "Loop" of eval_send_tree_bb5_in/12 
* CEs [10] --> Loop 7 
* CEs [9] --> Loop 8 

#### Loops of eval_send_tree_bb5_in/12 
* Loop 7: eval_send_tree_bb5_in(V_max_code,V_count_0,V_n_0,V_1,V_count_1,B,C,D,E,F,G,H)->  eval_send_tree_bb5_in(V_max_code,V_count_0',V_n_0,V_1,V_count_1',B',C,D,E,F,G,H)
                  [V_1>=V_count_1,V_max_code>=V_n_0,V_count_1>=2,V_count_1=V_count_1'+1,V_1=V_count_0'+1,V_1=V_count_0+1,B'=2,B=2] 
* Loop 8: eval_send_tree_bb5_in(A,B,C,D,E,F,A,G,C,D,E,H) [D>=E,A>=C,1>=E,D=G+1,D=B+1,H=0,F=2] 

### Ranking functions of CR eval_send_tree_bb5_in(V_max_code,V_count_0,V_n_0,V_1,V_count_1,B,C,D,E,F,G,H) 
* RF of phase [7]: [V_count_1-1]

#### Partial ranking functions of CR eval_send_tree_bb5_in(V_max_code,V_count_0,V_n_0,V_1,V_count_1,B,C,D,E,F,G,H) 
* Partial RF of phase [7]:
  - RF of loop [7:1]:
    V_count_1-1


### Resulting Chains:eval_send_tree_bb5_in(V_max_code,V_count_0,V_n_0,V_1,V_count_1,B,C,D,E,F,G,H) 
* [[7],8]
* [8]


### Merging Chains  eval_send_tree_bb5_in/12 into  External patterns of execution 
* [[8,[7]]] --> 1 
* [[8]] --> 2 


### Specialization of cost equations eval_send_tree_bb1_in/4 
* CE 6 is refined into CE [11] 
* CE 3 is refined into CE [12] 
* CE 4 is refined into CE [13,14] 
* CE 5 is refined into CE [15] 


#### Refined cost equations eval_send_tree_bb1_in/4 
* CE 11: eval_send_tree_bb1_in(V_max_code,V_count_0,V_n_0,B) = 0
     [V_n_0>=V_max_code+1,B=3] 
* CE 12: eval_send_tree_bb1_in(V_max_code,V_count_0,V_n_0,B) = 1+ eval_send_tree_bb1_in(V_max_code,C,D,E)
     [V_max_code>=V_n_0,V_n_0+1=D,C=V_count_0+1,E=3,B=3] 
* CE 13: eval_send_tree_bb1_in(V_max_code,V_count_0,V_n_0,B) = 2+ eval_send_tree_bb5_in(V_max_code,C,V_n_0,D,D,E,V_max_code,F,V_n_0,D,G,H):1+ eval_send_tree_bb1_in(V_max_code,I,J,K)
     [V_max_code>=V_n_0,D>=2,V_n_0+1=J,D=F+1,D=C+1,D=V_count_0+1,K=3,I=0,H=0,G=1,E=2,B=3] 
* CE 14: eval_send_tree_bb1_in(V_max_code,V_count_0,V_n_0,B) = 2+ eval_send_tree_bb5_in(V_max_code,C,V_n_0,D,D,E,V_max_code,F,V_n_0,D,D,G):2+ eval_send_tree_bb1_in(V_max_code,H,I,J)
     [V_max_code>=V_n_0,1>=D,V_n_0+1=I,D=F+1,D=C+1,D=V_count_0+1,J=3,H=0,G=0,E=2,B=3] 
* CE 15: eval_send_tree_bb1_in(V_max_code,V_count_0,V_n_0,B) = 1+ eval_send_tree_bb1_in(V_max_code,C,D,E)
     [V_max_code>=V_n_0,V_n_0+1=D,E=3,C=0,B=3] 

### Cost equations --> "Loop" of eval_send_tree_bb1_in/4 
* CEs [12] --> Loop 9 
* CEs [13] --> Loop 10 
* CEs [14,15] --> Loop 11 
* CEs [11] --> Loop 12 

#### Loops of eval_send_tree_bb1_in/4 
* Loop 9: eval_send_tree_bb1_in(V_max_code,V_count_0,V_n_0,B)->  eval_send_tree_bb1_in(V_max_code,V_count_0',V_n_0',B')
                  [V_max_code>=V_n_0,V_n_0+1=V_n_0',V_count_0+1=V_count_0',B'=3,B=3] 
* Loop 10: eval_send_tree_bb1_in(V_max_code,V_count_0,V_n_0,B)->  eval_send_tree_bb1_in(V_max_code,V_count_0',V_n_0',B')
                  [V_max_code>=V_n_0,V_count_0>=1,V_n_0+1=V_n_0',B'=3,V_count_0'=0,B=3] 
* Loop 11: eval_send_tree_bb1_in(V_max_code,V_count_0,V_n_0,B)->  eval_send_tree_bb1_in(V_max_code,V_count_0',V_n_0',B')
                  [V_max_code>=V_n_0,V_n_0+1=V_n_0',B'=3,V_count_0'=0,B=3] 
* Loop 12: eval_send_tree_bb1_in(V_max_code,V_count_0,V_n_0,B) [V_n_0>=V_max_code+1,B=3] 

### Ranking functions of CR eval_send_tree_bb1_in(V_max_code,V_count_0,V_n_0,B) 
* RF of phase [9,10,11]: [V_max_code-V_n_0+1]

#### Partial ranking functions of CR eval_send_tree_bb1_in(V_max_code,V_count_0,V_n_0,B) 
* Partial RF of phase [9,10,11]:
  - RF of loop [9:1,10:1,11:1]:
    V_max_code-V_n_0+1
  - RF of loop [10:1]:
    V_count_0 depends on loops [9:1] 


### Resulting Chains:eval_send_tree_bb1_in(V_max_code,V_count_0,V_n_0,B) 
* [[9,10,11],12]
* [12]


### Merging Chains  eval_send_tree_bb1_in/4 into  External patterns of execution 
* [[12]] --> 1 
* [[12,[9,10,11]]] --> 2 


### Specialization of cost equations eval_send_tree_start/4 
* CE 2 is refined into CE [16,17] 


#### Refined cost equations eval_send_tree_start/4 
* CE 16: eval_send_tree_start(V_max_code,V_max_count,V_min_count,B) = 1+ eval_send_tree_bb1_in(V_max_code,C,D,E):1
     [0>=V_max_code+1,E=3,D=0,C=0] 
* CE 17: eval_send_tree_start(V_max_code,V_max_count,V_min_count,B) = 1+ eval_send_tree_bb1_in(V_max_code,C,D,E):2
     [V_max_code>=0,E=3,D=0,C=0] 

### Cost equations --> "Loop" of eval_send_tree_start/4 
* CEs [17] --> Loop 13 
* CEs [16] --> Loop 14 

#### Loops of eval_send_tree_start/4 
* Loop 13: eval_send_tree_start(V_max_code,V_max_count,V_min_count,B) [V_max_code>=0] 
* Loop 14: eval_send_tree_start(V_max_code,V_max_count,V_min_count,B) [0>=V_max_code+1] 

### Ranking functions of CR eval_send_tree_start(V_max_code,V_max_count,V_min_count,B) 

#### Partial ranking functions of CR eval_send_tree_start(V_max_code,V_max_count,V_min_count,B) 


### Resulting Chains:eval_send_tree_start(V_max_code,V_max_count,V_min_count,B) 
* [14]
* [13]


### Merging Chains  eval_send_tree_start/4 into  External patterns of execution 
* [[14]] --> 1 
* [[13]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [7] 

 * loop 7:eval_send_tree_bb5_in(V_max_code,V_count_0,V_n_0,V_1,V_count_1,B,C,D,E,F,G,H) -> [eval_send_tree_bb5_in(V_max_code',V_count_0',V_n_0',V_1',V_count_1',B',C',D',E',F',G',H')] 
1
#### Cost of phase [7]:eval_send_tree_bb5_in(V_max_code,V_count_0,V_n_0,V_1,V_count_1,B,C,D,E,F,G,H) -> [eval_send_tree_bb5_in(V_max_code',V_count_0',V_n_0',V_1',V_count_1',B',C',D',E',F',G',H')] 
1* #(7)+0
  Such that:#(7) =< V_count_1-1
#(7) =< V_count_1-V_count_1'

#### Cost of chains of eval_send_tree_bb5_in(V_max_code,V_count_0,V_n_0,V_1,V_count_1,B,C,D,E,F,G,H):
* Chain [[7],8]: 1*s(1)+0
  Such that:s(1) =< V_count_1-1

  with precondition: [B=2,G=1,H=0,V_count_0+1=V_1,V_max_code=C,V_count_0=D,V_n_0=E,V_count_0+1=F,V_count_1>=2,V_max_code>=V_n_0,V_count_0+1>=V_count_1] 

* Chain [8]: 0
  with precondition: [B=2,H=0,V_count_0+1=V_1,V_count_0+1=V_count_1,V_max_code=C,V_count_0=D,V_n_0=E,V_count_0+1=F,V_count_0+1=G,0>=V_count_0,V_max_code>=V_n_0] 


#### Cost of loops [9,10,11] 

 * loop 9:eval_send_tree_bb1_in(V_max_code,V_count_0,V_n_0,B) -> [eval_send_tree_bb1_in(V_max_code',V_count_0',V_n_0',B')] 
1
 * loop 10:eval_send_tree_bb1_in(V_max_code,V_count_0,V_n_0,B) -> [eval_send_tree_bb1_in(V_max_code',V_count_0',V_n_0',B')] 
1*s(3)+2
  Such that:s(3) =< V_count_0

 * loop 11:eval_send_tree_bb1_in(V_max_code,V_count_0,V_n_0,B) -> [eval_send_tree_bb1_in(V_max_code',V_count_0',V_n_0',B')] 
2
#### Cost of phase [9,10,11]:eval_send_tree_bb1_in(V_max_code,V_count_0,V_n_0,B) -> [eval_send_tree_bb1_in(V_max_code',V_count_0',V_n_0',B')] 
2* #(11)+2* #(10)+1*sm(10,3)+1* #(9)+0
  Such that:#(9)+ #(10)+ #(11) =< V_max_code-V_n_0-V_max_code'+V_n_0'
s(5) =< V_max_code-V_n_0+1
s(6) =< V_count_0
s(7) =< V_count_0-V_count_0'
#(9)+ #(10)+ #(11) =< s(5)
s(8) =< s(6)+ #(9)
sm(10,3) =< #(9)+s(6)
sm(10,3) =< #(9)+s(7)
sm(10,3) =< #(10)*s(8)
#(10) =< #(9)+s(7)
#(10) =< #(9)+s(6)

#### Cost of chains of eval_send_tree_bb1_in(V_max_code,V_count_0,V_n_0,B):
* Chain [[9,10,11],12]: 2*s(13)+2*s(12)+1*s(15)+1*s(11)+0
  Such that:s(9) =< V_max_code-V_n_0+1
s(10) =< V_count_0
s(11)+s(12)+s(13) =< s(9)
s(11)+s(12)+s(13) =< s(9)
s(14) =< s(10)+s(11)
s(15) =< s(11)+s(10)
s(15) =< s(12)*s(14)
s(12) =< s(11)+s(10)

  with precondition: [B=3,V_count_0>=0,V_n_0>=V_count_0,V_max_code>=V_n_0] 

* Chain [12]: 0
  with precondition: [V_count_0=0,V_n_0=0,B=3,0>=V_max_code+1] 


#### Cost of chains of eval_send_tree_start(V_max_code,V_max_count,V_min_count,B):
* Chain [14]: 1
  with precondition: [0>=V_max_code+1] 

* Chain [13]: 1*s(28)+2*s(30)+2*s(29)+1*s(31)+1
  Such that:s(27) =< V_max_code+1
s(28)+s(29)+s(30) =< s(27)
s(31) =< s(28)
s(31) =< s(29)*s(28)
s(29) =< s(28)

  with precondition: [V_max_code>=0] 


Closed-form bounds of eval_send_tree_start(V_max_code,V_max_count,V_min_count,B): 
-------------------------------------
* Chain [14] with precondition: [0>=V_max_code+1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [13] with precondition: [V_max_code>=0] 
    - Upper bound: 6*V_max_code+7 
    - Complexity: n 

### Maximum cost of eval_send_tree_start(V_max_code,V_max_count,V_min_count,B): nat(V_max_code+1)*6+1 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 29 ms.
* Invariants computed in 30 ms.
   - Backward Invariants 12 ms.
   - Transitive Invariants 7 ms.
* Refinement performed in 46 ms.
* Termination proved in 11 ms.
* Upper bounds computed in 53 ms.
   - Equation cost structures 17 ms.
   - Phase cost structures 29 ms.
   - Chain cost structures 13 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 200 ms.


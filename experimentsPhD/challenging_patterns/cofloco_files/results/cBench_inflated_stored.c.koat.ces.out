Warning: Ignored call to eval_inflate_stored_stop/1 in equation eval_inflate_stored_bb12_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_inflate_stored_bb1_in/7]
1. recursive : [eval_inflate_stored_bb4_in/7]
2. recursive : [eval_inflate_stored_bb9_in/12]
3. recursive : [eval_inflate_stored_27/7,eval_inflate_stored_28/7,eval_inflate_stored_bb8_in/4,loop_cont_eval_inflate_stored_bb9_in/8]
4. non_recursive : [eval_inflate_stored_bb12_in/1]
5. non_recursive : [loop_cont_eval_inflate_stored_bb8_in/2]
6. non_recursive : [eval_inflate_stored_21/4]
7. non_recursive : [eval_inflate_stored_20/4]
8. non_recursive : [eval_inflate_stored_19/4]
9. non_recursive : [eval_inflate_stored_18/4]
10. non_recursive : [eval_inflate_stored_16/4]
11. non_recursive : [eval_inflate_stored_15/4]
12. non_recursive : [loop_cont_eval_inflate_stored_bb4_in/5]
13. non_recursive : [eval_inflate_stored_12/4]
14. non_recursive : [eval_inflate_stored_11/4]
15. non_recursive : [eval_inflate_stored_10/4]
16. non_recursive : [loop_cont_eval_inflate_stored_bb1_in/5]
17. non_recursive : [eval_inflate_stored_6/4]
18. non_recursive : [eval_inflate_stored_5/4]
19. non_recursive : [eval_inflate_stored_4/4]
20. non_recursive : [eval_inflate_stored_3/4]
21. non_recursive : [eval_inflate_stored_2/4]
22. non_recursive : [eval_inflate_stored_1/4]
23. non_recursive : [eval_inflate_stored_0/4]
24. non_recursive : [eval_inflate_stored_bb0_in/4]
25. non_recursive : [eval_inflate_stored_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_inflate_stored_bb1_in/7
1. SCC is partially evaluated into eval_inflate_stored_bb4_in/7
2. SCC is partially evaluated into eval_inflate_stored_bb9_in/12
3. SCC is partially evaluated into eval_inflate_stored_bb8_in/4
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is partially evaluated into eval_inflate_stored_16/4
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is completely evaluated into other SCCs
16. SCC is completely evaluated into other SCCs
17. SCC is completely evaluated into other SCCs
18. SCC is completely evaluated into other SCCs
19. SCC is completely evaluated into other SCCs
20. SCC is completely evaluated into other SCCs
21. SCC is completely evaluated into other SCCs
22. SCC is completely evaluated into other SCCs
23. SCC is completely evaluated into other SCCs
24. SCC is completely evaluated into other SCCs
25. SCC is partially evaluated into eval_inflate_stored_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_inflate_stored_bb1_in/7 
* CE 4 is refined into CE [13] 
* CE 3 is refined into CE [14] 


#### Refined cost equations eval_inflate_stored_bb1_in/7 
* CE 13: eval_inflate_stored_bb1_in(A,B,C,D,A,B,E) = 0
     [C>=16,C=E+16,D=5] 
* CE 14: eval_inflate_stored_bb1_in(V_n,V_limit,V__01,B,C,D,E) = 1+ eval_inflate_stored_bb1_in(V_n,V_limit,F,G,C,D,E)
     [15>=V__01,V__01+8=F,G=5,B=5] 

### Cost equations --> "Loop" of eval_inflate_stored_bb1_in/7 
* CEs [14] --> Loop 11 
* CEs [13] --> Loop 12 

#### Loops of eval_inflate_stored_bb1_in/7 
* Loop 11: eval_inflate_stored_bb1_in(V_n,V_limit,V__01,B,C,D,E)->  eval_inflate_stored_bb1_in(V_n,V_limit,V__01',B',C,D,E)
                  [15>=V__01,V__01+8=V__01',B'=5,B=5] 
* Loop 12: eval_inflate_stored_bb1_in(A,B,C,D,A,B,E) [C>=16,C=E+16,D=5] 

### Ranking functions of CR eval_inflate_stored_bb1_in(V_n,V_limit,V__01,B,C,D,E) 
* RF of phase [11]: [-V__01/8+2]

#### Partial ranking functions of CR eval_inflate_stored_bb1_in(V_n,V_limit,V__01,B,C,D,E) 
* Partial RF of phase [11]:
  - RF of loop [11:1]:
    -V__01/8+2


### Resulting Chains:eval_inflate_stored_bb1_in(V_n,V_limit,V__01,B,C,D,E) 
* [[11],12]
* [12]


### Merging Chains  eval_inflate_stored_bb1_in/7 into  External patterns of execution 
* [[12]] --> 1 
* [[12,[11]]] --> 2 


### Specialization of cost equations eval_inflate_stored_bb4_in/7 
* CE 6 is refined into CE [15] 
* CE 5 is refined into CE [16] 


#### Refined cost equations eval_inflate_stored_bb4_in/7 
* CE 15: eval_inflate_stored_bb4_in(A,B,C,D,A,B,C) = 0
     [C>=16,D=4] 
* CE 16: eval_inflate_stored_bb4_in(V_n,V_limit,V__1,B,C,D,E) = 1+ eval_inflate_stored_bb4_in(V_n,V_limit,F,G,C,D,E)
     [15>=V__1,V__1+8=F,G=4,B=4] 

### Cost equations --> "Loop" of eval_inflate_stored_bb4_in/7 
* CEs [16] --> Loop 13 
* CEs [15] --> Loop 14 

#### Loops of eval_inflate_stored_bb4_in/7 
* Loop 13: eval_inflate_stored_bb4_in(V_n,V_limit,V__1,B,C,D,E)->  eval_inflate_stored_bb4_in(V_n,V_limit,V__1',B',C,D,E)
                  [15>=V__1,V__1+8=V__1',B'=4,B=4] 
* Loop 14: eval_inflate_stored_bb4_in(A,B,C,D,A,B,C) [C>=16,D=4] 

### Ranking functions of CR eval_inflate_stored_bb4_in(V_n,V_limit,V__1,B,C,D,E) 
* RF of phase [13]: [-V__1/8+2]

#### Partial ranking functions of CR eval_inflate_stored_bb4_in(V_n,V_limit,V__1,B,C,D,E) 
* Partial RF of phase [13]:
  - RF of loop [13:1]:
    -V__1/8+2


### Resulting Chains:eval_inflate_stored_bb4_in(V_n,V_limit,V__1,B,C,D,E) 
* [[13],14]
* [14]


### Merging Chains  eval_inflate_stored_bb4_in/7 into  External patterns of execution 
* [[14]] --> 1 
* [[14,[13]]] --> 2 


### Specialization of cost equations eval_inflate_stored_bb9_in/12 
* CE 12 is refined into CE [17] 
* CE 11 is refined into CE [18] 


#### Refined cost equations eval_inflate_stored_bb9_in/12 
* CE 17: eval_inflate_stored_bb9_in(A,B,C,D,E,F,A,B,G,D,E,H) = 0
     [E>=B,E>=A,D>=0,E=H+8,D+1=G,D+1=C,F=2] 
* CE 18: eval_inflate_stored_bb9_in(V_limit,V__2,V__0,V_9,V__3,B,C,D,E,F,G,H) = 1+ eval_inflate_stored_bb9_in(V_limit,V__2,I,V_9,J,K,C,D,E,F,G,H)
     [V_limit>=V__3+1,V__3>=V__2,V_9>=0,V__3+8=J,V_9+1=I,V_9+1=V__0,K=2,B=2] 

### Cost equations --> "Loop" of eval_inflate_stored_bb9_in/12 
* CEs [18] --> Loop 15 
* CEs [17] --> Loop 16 

#### Loops of eval_inflate_stored_bb9_in/12 
* Loop 15: eval_inflate_stored_bb9_in(V_limit,V__2,V__0,V_9,V__3,B,C,D,E,F,G,H)->  eval_inflate_stored_bb9_in(V_limit,V__2,V__0',V_9,V__3',B',C,D,E,F,G,H)
                  [V_limit>=V__3+1,V__3>=V__2,V_9>=0,V__3+8=V__3',V_9+1=V__0',V_9+1=V__0,B'=2,B=2] 
* Loop 16: eval_inflate_stored_bb9_in(A,B,C,D,E,F,A,B,G,D,E,H) [E>=B,E>=A,D>=0,E=H+8,D+1=G,D+1=C,F=2] 

### Ranking functions of CR eval_inflate_stored_bb9_in(V_limit,V__2,V__0,V_9,V__3,B,C,D,E,F,G,H) 
* RF of phase [15]: [V_limit/8-V__3/8]

#### Partial ranking functions of CR eval_inflate_stored_bb9_in(V_limit,V__2,V__0,V_9,V__3,B,C,D,E,F,G,H) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    V_limit/8-V__3/8


### Resulting Chains:eval_inflate_stored_bb9_in(V_limit,V__2,V__0,V_9,V__3,B,C,D,E,F,G,H) 
* [[15],16]
* [16]


### Merging Chains  eval_inflate_stored_bb9_in/12 into  External patterns of execution 
* [[16]] --> 1 
* [[16,[15]]] --> 2 


### Specialization of cost equations eval_inflate_stored_bb8_in/4 
* CE 10 is refined into CE [19] 
* CE 9 is refined into CE [20,21] 


#### Refined cost equations eval_inflate_stored_bb8_in/4 
* CE 19: eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) = 0
     [0>=V__0,B=3] 
* CE 20: eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) = 2+ eval_inflate_stored_bb9_in(V_limit,V__2,C,D,V__2,E,V_limit,V__2,F,D,V__2,G):1+ eval_inflate_stored_bb8_in(V_limit,H,D,I)
     [V__2>=V_limit,D>=0,V__2=H+8,V__2=G+8,D+1=F,D+1=C,D+1=V__0,I=3,E=2,B=3] 
* CE 21: eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) = 2+ eval_inflate_stored_bb9_in(V_limit,V__2,C,D,V__2,E,V_limit,V__2,F,D,G,H):2+ eval_inflate_stored_bb8_in(V_limit,H,D,I)
     [V_limit>=H+1,H>=V__2,H+8>=V_limit,D>=0,H+8=G,D+1=F,D+1=C,D+1=V__0,I=3,E=2,B=3] 

### Cost equations --> "Loop" of eval_inflate_stored_bb8_in/4 
* CEs [21] --> Loop 17 
* CEs [20] --> Loop 18 
* CEs [19] --> Loop 19 

#### Loops of eval_inflate_stored_bb8_in/4 
* Loop 17: eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B)->  eval_inflate_stored_bb8_in(V_limit,V__2',V__0',B')
                  [V_limit>=V__2'+1,V__2'>=V__2,V__2'+8>=V_limit,V__0>=1,V__0=V__0'+1,B'=3,B=3] 
* Loop 18: eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B)->  eval_inflate_stored_bb8_in(V_limit,V__2',V__0',B')
                  [V__2>=V_limit,V__0>=1,V__0=V__0'+1,V__2=V__2'+8,B'=3,B=3] 
* Loop 19: eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) [0>=V__0,B=3] 

### Ranking functions of CR eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) 
* RF of phase [17]: [V__0]
* RF of phase [18]: [V__0,-V_limit/8+V__2/8+1/8]

#### Partial ranking functions of CR eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) 
* Partial RF of phase [17]:
  - RF of loop [17:1]:
    V__0
* Partial RF of phase [18]:
  - RF of loop [18:1]:
    V__0
    -V_limit/8+V__2/8+1/8


### Resulting Chains:eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) 
* [[18],[17],19]
* [[18],19]
* [[17],19]
* [19]


### Merging Chains  eval_inflate_stored_bb8_in/4 into  External patterns of execution 
* [[19]] --> 1 
* [[19,[17]]] --> 2 
* [[19,[18]]] --> 3 
* [[19,[17],[18]]] --> 4 


### Specialization of cost equations eval_inflate_stored_16/4 
* CE 7 is refined into CE [22] 
* CE 8 is refined into CE [23,24,25,26] 


#### Refined cost equations eval_inflate_stored_16/4 
* CE 22: eval_inflate_stored_16(V_n,V_limit,V__1,B) = 0
     [] 
* CE 23: eval_inflate_stored_16(V_n,V_limit,V__1,B) = 1+ eval_inflate_stored_bb8_in(V_limit,C,V_n,D):1
     [0>=V_n,C+16=V__1,D=3] 
* CE 24: eval_inflate_stored_16(V_n,V_limit,V__1,B) = 1+ eval_inflate_stored_bb8_in(V_limit,C,V_n,D):2
     [V_limit>=C+1,V_n>=1,C+16=V__1,D=3] 
* CE 25: eval_inflate_stored_16(V_n,V_limit,V__1,B) = 1+ eval_inflate_stored_bb8_in(V_limit,C,V_n,D):3
     [C+8>=8*V_n+V_limit,V_n>=1,C+16=V__1,D=3] 
* CE 26: eval_inflate_stored_16(V_n,V_limit,V__1,B) = 1+ eval_inflate_stored_bb8_in(V_limit,C,V_n,D):4
     [V_limit+8*V_n>=C+9,C>=V_limit,V_n>=2,C+16=V__1,D=3] 

### Cost equations --> "Loop" of eval_inflate_stored_16/4 
* CEs [22,23,24,25,26] --> Loop 20 

#### Loops of eval_inflate_stored_16/4 
* Loop 20: eval_inflate_stored_16(V_n,V_limit,V__1,B) [] 

### Ranking functions of CR eval_inflate_stored_16(V_n,V_limit,V__1,B) 

#### Partial ranking functions of CR eval_inflate_stored_16(V_n,V_limit,V__1,B) 


### Resulting Chains:eval_inflate_stored_16(V_n,V_limit,V__1,B) 
* [20]


### Merging Chains  eval_inflate_stored_16/4 into  External patterns of execution 
* [[20]] --> 1 


### Specialization of cost equations eval_inflate_stored_start/4 
* CE 2 is refined into CE [27,28,29] 


#### Refined cost equations eval_inflate_stored_start/4 
* CE 27: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 2+ eval_inflate_stored_bb1_in(V_n,V_limit,C,D,V_n,V_limit,E):1+ eval_inflate_stored_bb4_in(V_n,V_limit,E,F,V_n,V_limit,E):1+ eval_inflate_stored_16(V_n,V_limit,E,B):1
     [E>=16,V_n+E+16=V_k,E+16=C,F=4,D=5] 
* CE 28: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 2+ eval_inflate_stored_bb1_in(V_n,V_limit,C,D,V_n,V_limit,E):1+ eval_inflate_stored_bb4_in(V_n,V_limit,E,F,V_n,V_limit,G):2+ eval_inflate_stored_16(V_n,V_limit,G,B):1
     [G>=E+8,G>=16,E>=0,23>=G,V_n+E+16=V_k,E+16=C,F=4,D=5] 
* CE 29: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 2+ eval_inflate_stored_bb1_in(V_n,V_limit,C,D,V_n,V_limit,E):2+ eval_inflate_stored_bb4_in(V_n,V_limit,E,F,V_n,V_limit,G):2+ eval_inflate_stored_16(V_n,V_limit,G,B):1
     [E+8>=C,G>=16,E>=0,23>=G,7>=E,V_n+C=V_k,F=4,D=5] 

### Cost equations --> "Loop" of eval_inflate_stored_start/4 
* CEs [29] --> Loop 21 
* CEs [27] --> Loop 22 
* CEs [28] --> Loop 23 

#### Loops of eval_inflate_stored_start/4 
* Loop 21: eval_inflate_stored_start(V_n,V_k,V_limit,B) [V_n+15>=V_k] 
* Loop 22: eval_inflate_stored_start(V_n,V_k,V_limit,B) [V_k>=V_n+32] 
* Loop 23: eval_inflate_stored_start(V_n,V_k,V_limit,B) [V_n+31>=V_k,V_k>=V_n+16] 

### Ranking functions of CR eval_inflate_stored_start(V_n,V_k,V_limit,B) 

#### Partial ranking functions of CR eval_inflate_stored_start(V_n,V_k,V_limit,B) 


### Resulting Chains:eval_inflate_stored_start(V_n,V_k,V_limit,B) 
* [23]
* [22]
* [21]


### Merging Chains  eval_inflate_stored_start/4 into  External patterns of execution 
* [[23]] --> 1 
* [[22]] --> 2 
* [[21]] --> 3 


Computing Bounds
=====================================

#### Cost of loops [11] 

 * loop 11:eval_inflate_stored_bb1_in(V_n,V_limit,V__01,B,C,D,E) -> [eval_inflate_stored_bb1_in(V_n',V_limit',V__01',B',C',D',E')] 
1
#### Cost of phase [11]:eval_inflate_stored_bb1_in(V_n,V_limit,V__01,B,C,D,E) -> [eval_inflate_stored_bb1_in(V_n',V_limit',V__01',B',C',D',E')] 
1* #(11)+0
  Such that:#(11) =< -V__01/8+2
#(11) =< -V__01/8+V__01'/8

#### Cost of chains of eval_inflate_stored_bb1_in(V_n,V_limit,V__01,B,C,D,E):
* Chain [[11],12]: 1*s(1)+0
  Such that:s(1) =< -V__01/8+2

  with precondition: [B=5,V_n=C,V_limit=D,7>=E,E>=0,E+8>=V__01] 

* Chain [12]: 0
  with precondition: [B=5,C=V_n,D=V_limit,V__01=E+16,V__01>=16] 


#### Cost of loops [13] 

 * loop 13:eval_inflate_stored_bb4_in(V_n,V_limit,V__1,B,C,D,E) -> [eval_inflate_stored_bb4_in(V_n',V_limit',V__1',B',C',D',E')] 
1
#### Cost of phase [13]:eval_inflate_stored_bb4_in(V_n,V_limit,V__1,B,C,D,E) -> [eval_inflate_stored_bb4_in(V_n',V_limit',V__1',B',C',D',E')] 
1* #(13)+0
  Such that:#(13) =< -V__1/8+2
#(13) =< -V__1/8+V__1'/8

#### Cost of chains of eval_inflate_stored_bb4_in(V_n,V_limit,V__1,B,C,D,E):
* Chain [[13],14]: 1*s(2)+0
  Such that:s(2) =< -V__1/8+2

  with precondition: [B=4,V_n=C,V_limit=D,23>=E,E>=16,E>=V__1+8] 

* Chain [14]: 0
  with precondition: [B=4,C=V_n,D=V_limit,V__1=E,V__1>=16] 


#### Cost of loops [15] 

 * loop 15:eval_inflate_stored_bb9_in(V_limit,V__2,V__0,V_9,V__3,B,C,D,E,F,G,H) -> [eval_inflate_stored_bb9_in(V_limit',V__2',V__0',V_9',V__3',B',C',D',E',F',G',H')] 
1
#### Cost of phase [15]:eval_inflate_stored_bb9_in(V_limit,V__2,V__0,V_9,V__3,B,C,D,E,F,G,H) -> [eval_inflate_stored_bb9_in(V_limit',V__2',V__0',V_9',V__3',B',C',D',E',F',G',H')] 
1* #(15)+0
  Such that:#(15) =< V_limit/8-V__3/8
#(15) =< V_limit/8-V__3/8-V_limit'/8+V__3'/8

#### Cost of chains of eval_inflate_stored_bb9_in(V_limit,V__2,V__0,V_9,V__3,B,C,D,E,F,G,H):
* Chain [[15],16]: 1*s(3)+0
  Such that:s(3) =< V_limit/8-V__3/8

  with precondition: [B=2,V__0=V_9+1,V_limit=C,V__2=D,V__0=E,V__0=F+1,G=H+8,V__0>=1,G>=V_limit,V__3>=V__2,G>=V__3+8,V_limit+7>=G] 

* Chain [16]: 0
  with precondition: [B=2,V_9+1=V__0,V__2=V__3,V_limit=C,V__2=D,V_9+1=E,V_9=F,V__2=G,V__2=H+8,V_9>=0,V__2>=V_limit] 


#### Cost of loops [17] 

 * loop 17:eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) -> [eval_inflate_stored_bb8_in(V_limit',V__2',V__0',B')] 
1*s(5)+2
  Such that:s(5) =< V_limit/8-V__2/8

#### Cost of phase [17]:eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) -> [eval_inflate_stored_bb8_in(V_limit',V__2',V__0',B')] 
2* #(17)+1*sm(17,5)+0
  Such that:sm(17,5) =< V_limit/8-V__2/8+V__0
sm(17,5) =< V_limit/8-V__2/8+V__0-V_limit'/8+V__2'/8-V__0'
#(17) =< V__0
#(17) =< V__0-V__0'

#### Cost of loops [18] 

 * loop 18:eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) -> [eval_inflate_stored_bb8_in(V_limit',V__2',V__0',B')] 
2
#### Cost of phase [18]:eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) -> [eval_inflate_stored_bb8_in(V_limit',V__2',V__0',B')] 
2* #(18)+0
  Such that:#(18) =< -V_limit/8+V__2/8+1/8
#(18) =< -V_limit/8+V__2/8+V_limit'/8-V__2'/8
#(18) =< V__0
#(18) =< V__0-V__0'

#### Cost of phase [18]:eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) -> [eval_inflate_stored_bb8_in(V_limit',V__2',V__0',B')] 
2* #(18)+0
  Such that:#(18) =< -V_limit/8+V__2/8+1/8
#(18) =< -V_limit/8+V__2/8+V_limit'/8-V__2'/8
#(18) =< V__0
#(18) =< V__0-V__0'

#### Cost of phase [17]:eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) -> [eval_inflate_stored_bb8_in(V_limit',V__2',V__0',B')] 
2* #(17)+1*sm(17,5)+0
  Such that:sm(17,5) =< V_limit/8-V__2/8+V__0
sm(17,5) =< V_limit/8-V__2/8+V__0-V_limit'/8+V__2'/8-V__0'
#(17) =< V__0
#(17) =< V__0-V__0'

#### Cost of chains of eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B):
* Chain [[18],[17],19]: 3*s(9)+2*s(7)+0
  Such that:s(7) =< -V_limit/8+V__2/8+1/8
s(8) =< V_limit/8-V__2/8+V__0-1/8
s(9) =< s(8)

  with precondition: [B=3,V__0>=2,V__2>=V_limit,V_limit+8*V__0>=V__2+9] 

* Chain [[18],19]: 2*s(10)+0
  Such that:s(10) =< V__0

  with precondition: [B=3,V__0>=1,V__2+8>=8*V__0+V_limit] 

* Chain [[17],19]: 2*s(12)+1*s(11)+0
  Such that:s(11) =< V_limit/8-V__2/8+V__0-1/8
s(12) =< V__0

  with precondition: [B=3,V__0>=1,V_limit>=V__2+1] 

* Chain [19]: 0
  with precondition: [B=3,0>=V__0] 


#### Cost of chains of eval_inflate_stored_16(V_n,V_limit,V__1,B):
* Chain [20]: 4*s(25)+4*s(26)+2*s(24)+1
  Such that:s(22) =< V_n
s(23) =< V_n+V_limit/8-V__1/8+15/8
s(24) =< -V_limit/8+V__1/8-15/8
s(25) =< s(22)
s(26) =< s(23)

  with precondition: [] 


#### Cost of chains of eval_inflate_stored_start(V_n,V_k,V_limit,B):
* Chain [23]: 4*s(56)+4*s(57)+2*s(55)+1*s(54)+3
  Such that:s(52) =< V_n
s(53) =< V_n+V_limit/8-1/8
s(54) =< V_n/8-V_k/8+4
s(55) =< -V_limit/8+1
s(56) =< s(52)
s(57) =< s(53)

  with precondition: [V_k>=V_n+16,V_n+31>=V_k] 

* Chain [22]: 4*s(61)+4*s(62)+2*s(59)+3
  Such that:s(58) =< V_n
s(59) =< -V_n/8+V_k/8-V_limit/8-31/8
s(60) =< 9/8*V_n-V_k/8+V_limit/8+31/8
s(61) =< s(58)
s(62) =< s(60)

  with precondition: [V_k>=V_n+32] 

* Chain [21]: 4*s(68)+4*s(69)+2*s(67)+1*s(63)+1*s(66)+3
  Such that:s(63) =< 2
s(64) =< V_n
s(65) =< V_n+V_limit/8-1/8
s(66) =< V_n/8-V_k/8+2
s(67) =< -V_limit/8+1
s(68) =< s(64)
s(69) =< s(65)

  with precondition: [V_n+15>=V_k] 


Closed-form bounds of eval_inflate_stored_start(V_n,V_k,V_limit,B): 
-------------------------------------
* Chain [23] with precondition: [V_k>=V_n+16,V_n+31>=V_k] 
    - Upper bound: V_n/8-V_k/8+4+ (nat(V_n)*4+3+nat(V_n+V_limit/8)*4)+nat(-V_limit/8+1)*2 
    - Complexity: n 
* Chain [22] with precondition: [V_k>=V_n+32] 
    - Upper bound: nat(V_n)*4+3+nat(9/8*V_n-V_k/8+V_limit/8+31/8)*4+nat(-V_n/8+V_k/8-V_limit/8)*2 
    - Complexity: n 
* Chain [21] with precondition: [V_n+15>=V_k] 
    - Upper bound: V_n/8-V_k/8+2+ (nat(V_n)*4+5+nat(V_n+V_limit/8)*4)+nat(-V_limit/8+1)*2 
    - Complexity: n 

### Maximum cost of eval_inflate_stored_start(V_n,V_k,V_limit,B): nat(V_n)*4+3+max([nat(-V_n/8+V_k/8-V_limit/8)*2+nat(9/8*V_n-V_k/8+V_limit/8+31/8)*4,nat(-V_limit/8+1)*2+nat(V_n+V_limit/8)*4+max([nat(V_n/8-V_k/8+4),nat(V_n/8-V_k/8+2)+2])]) 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 32 ms.
* Invariants computed in 50 ms.
   - Backward Invariants 22 ms.
   - Transitive Invariants 13 ms.
* Refinement performed in 79 ms.
* Termination proved in 16 ms.
* Upper bounds computed in 104 ms.
   - Equation cost structures 38 ms.
   - Phase cost structures 29 ms.
   - Chain cost structures 34 ms.
   - Solving cost expressions 2 ms.
* Total analysis performed in 329 ms.


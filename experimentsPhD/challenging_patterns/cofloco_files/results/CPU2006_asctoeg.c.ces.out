Warning: Ignored call to eval_asctoeg_stop/1 in equation eval_asctoeg_bb6_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_asctoeg_5/8,eval_asctoeg_6/9,eval_asctoeg_bb2_in/8,eval_asctoeg_bb3_in/8,eval_asctoeg_bb4_in/9]
1. recursive : [eval_asctoeg_11/11,eval_asctoeg_12/12,eval_asctoeg__critedge_in/10,eval_asctoeg_bb5_in/11]
2. recursive : [eval_asctoeg_14/7,eval_asctoeg_15/7,eval_asctoeg__critedge1_in/6,eval_asctoeg_bb1_in/3,loop_cont_eval_asctoeg__critedge_in/7,loop_cont_eval_asctoeg_bb2_in/6]
3. non_recursive : [eval_asctoeg_bb6_in/1]
4. non_recursive : [loop_cont_eval_asctoeg_bb1_in/2]
5. non_recursive : [eval_asctoeg_4/2]
6. non_recursive : [eval_asctoeg_3/2]
7. non_recursive : [eval_asctoeg_2/2]
8. non_recursive : [eval_asctoeg_1/2]
9. non_recursive : [eval_asctoeg_0/2]
10. non_recursive : [eval_asctoeg_bb0_in/2]
11. non_recursive : [eval_asctoeg_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_asctoeg_bb2_in/8
1. SCC is partially evaluated into eval_asctoeg__critedge_in/10
2. SCC is partially evaluated into eval_asctoeg_bb1_in/3
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into eval_asctoeg_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_asctoeg_bb2_in/8 
* CE 5 is refined into CE [11] 
* CE 7 is refined into CE [12] 
* CE 6 is refined into CE [13] 


#### Refined cost equations eval_asctoeg_bb2_in/8 
* CE 11: eval_asctoeg_bb2_in(A,B,C,D,A,B,C,C) = 0
     [A>=C+1,C>=0,B>=1,D=2] 
* CE 12: eval_asctoeg_bb2_in(A,B,C,D,A,B,C,C) = 0
     [C>=A,C>=0,B>=1,D=2] 
* CE 13: eval_asctoeg_bb2_in(V_s,V_k_0,V_sp_0,B,C,D,E,F) = 1+ eval_asctoeg_bb2_in(V_s,V_k_0,G,H,C,D,E,F)
     [V_s>=V_sp_0+1,V_sp_0>=0,V_k_0>=1,V_sp_0+1=G,H=2,B=2] 

### Cost equations --> "Loop" of eval_asctoeg_bb2_in/8 
* CEs [13] --> Loop 10 
* CEs [11] --> Loop 11 
* CEs [12] --> Loop 12 

#### Loops of eval_asctoeg_bb2_in/8 
* Loop 10: eval_asctoeg_bb2_in(V_s,V_k_0,V_sp_0,B,C,D,E,F)->  eval_asctoeg_bb2_in(V_s,V_k_0,V_sp_0',B',C,D,E,F)
                  [V_s>=V_sp_0+1,V_sp_0>=0,V_k_0>=1,V_sp_0+1=V_sp_0',B'=2,B=2] 
* Loop 11: eval_asctoeg_bb2_in(A,B,C,D,A,B,C,C) [A>=C+1,C>=0,B>=1,D=2] 
* Loop 12: eval_asctoeg_bb2_in(A,B,C,D,A,B,C,C) [C>=A,C>=0,B>=1,D=2] 

### Ranking functions of CR eval_asctoeg_bb2_in(V_s,V_k_0,V_sp_0,B,C,D,E,F) 
* RF of phase [10]: [V_s-V_sp_0]

#### Partial ranking functions of CR eval_asctoeg_bb2_in(V_s,V_k_0,V_sp_0,B,C,D,E,F) 
* Partial RF of phase [10]:
  - RF of loop [10:1]:
    V_s-V_sp_0

Discarded unfeasible chain [[10]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_asctoeg_bb2_in(V_s,V_k_0,V_sp_0,B,C,D,E,F) 
* [[10],12]
* [[10],11]
* [12]
* [11]


### Merging Chains  eval_asctoeg_bb2_in/8 into  External patterns of execution 
* [[12,[10]]] --> 1 
* [[12]] --> 2 
* [[11]] --> 3 
* [[11,[10]]] --> 4 


### Specialization of cost equations eval_asctoeg__critedge_in/10 
* CE 8 is refined into CE [14] 
* CE 10 is refined into CE [15] 
* CE 9 is refined into CE [16] 


#### Refined cost equations eval_asctoeg__critedge_in/10 
* CE 14: eval_asctoeg__critedge_in(A,B,C,D,E,A,B,C,D,F) = 0
     [D>=2,D=F+1,E=3] 
* CE 15: eval_asctoeg__critedge_in(A,B,C,D,E,A,B,C,D,F) = 0
     [1>=D,D=F+1,E=3] 
* CE 16: eval_asctoeg__critedge_in(V_s,V_k_0,V_sp_0,V_sp_0_sink,B,C,D,E,F,G) = 1+ eval_asctoeg__critedge_in(V_s,V_k_0,V_sp_0,H,I,C,D,E,F,G)
     [V_sp_0_sink>=2,V_sp_0_sink=H+1,I=3,B=3] 

### Cost equations --> "Loop" of eval_asctoeg__critedge_in/10 
* CEs [16] --> Loop 13 
* CEs [14] --> Loop 14 
* CEs [15] --> Loop 15 

#### Loops of eval_asctoeg__critedge_in/10 
* Loop 13: eval_asctoeg__critedge_in(V_s,V_k_0,V_sp_0,V_sp_0_sink,B,C,D,E,F,G)->  eval_asctoeg__critedge_in(V_s,V_k_0,V_sp_0,V_sp_0_sink',B',C,D,E,F,G)
                  [V_sp_0_sink>=2,V_sp_0_sink=V_sp_0_sink'+1,B'=3,B=3] 
* Loop 14: eval_asctoeg__critedge_in(A,B,C,D,E,A,B,C,D,F) [D>=2,D=F+1,E=3] 
* Loop 15: eval_asctoeg__critedge_in(A,B,C,D,E,A,B,C,D,F) [1>=D,D=F+1,E=3] 

### Ranking functions of CR eval_asctoeg__critedge_in(V_s,V_k_0,V_sp_0,V_sp_0_sink,B,C,D,E,F,G) 
* RF of phase [13]: [V_sp_0_sink-1]

#### Partial ranking functions of CR eval_asctoeg__critedge_in(V_s,V_k_0,V_sp_0,V_sp_0_sink,B,C,D,E,F,G) 
* Partial RF of phase [13]:
  - RF of loop [13:1]:
    V_sp_0_sink-1

Discarded unfeasible chain [[13]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_asctoeg__critedge_in(V_s,V_k_0,V_sp_0,V_sp_0_sink,B,C,D,E,F,G) 
* [[13],15]
* [[13],14]
* [15]
* [14]


### Merging Chains  eval_asctoeg__critedge_in/10 into  External patterns of execution 
* [[15,[13]]] --> 1 
* [[15]] --> 2 
* [[14]] --> 3 
* [[14,[13]]] --> 4 


### Specialization of cost equations eval_asctoeg_bb1_in/3 
* CE 4 is refined into CE [17] 
* CE 3 is refined into CE [18,19,20,21,22,23,24,25,26,27] 


#### Refined cost equations eval_asctoeg_bb1_in/3 
* CE 17: eval_asctoeg_bb1_in(V_s,V_k_0,B) = 0
     [0>=V_k_0,B=4] 
* CE 18: eval_asctoeg_bb1_in(V_s,V_k_0,B) = 3+ eval_asctoeg_bb2_in(V_s,V_k_0,C,D,V_s,V_k_0,V_s,V_s):1+ eval_asctoeg__critedge_in(V_s,V_k_0,V_s,V_s,E,V_s,V_k_0,V_s,F,G):1+ eval_asctoeg_bb1_in(V_s,H,I)
     [V_k_0>=1,V_s>=2,V_k_0=H+1,I=4,G=0,F=1,E=3,D=2,C=0,B=4] 
* CE 19: eval_asctoeg_bb1_in(V_s,V_k_0,B) = 3+ eval_asctoeg_bb2_in(C,V_k_0,D,E,F,V_k_0,G,H):1+ eval_asctoeg__critedge_in(I,V_k_0,J,K,L,M,V_k_0,N,O,P):2+ eval_asctoeg_bb1_in(Q,R,S)
     [V_k_0>=1,V_k_0=R+1,S=4,Q=1,P=0,O=1,N=1,M=1,L=3,K=1,J=1,I=1,H=1,G=1,F=1,E=2,D=0,C=1,B=4,V_s=1] 
* CE 20: eval_asctoeg_bb1_in(V_s,V_k_0,B) = 3+ eval_asctoeg_bb2_in(V_s,V_k_0,C,D,V_s,V_k_0,V_s,V_s):1+ eval_asctoeg__critedge_in(V_s,V_k_0,V_s,V_s,E,V_s,V_k_0,V_s,V_s,F):3+ eval_asctoeg_bb1_in(V_s,G,H)
     [V_k_0>=1,V_s>=2,V_k_0=G+1,V_s=F+1,H=4,E=3,D=2,C=0,B=4] 
* CE 21: eval_asctoeg_bb1_in(V_s,V_k_0,B) = 3+ eval_asctoeg_bb2_in(V_s,V_k_0,C,D,V_s,V_k_0,V_s,V_s):1+ eval_asctoeg__critedge_in(V_s,V_k_0,V_s,V_s,E,V_s,V_k_0,V_s,F,G):4+ eval_asctoeg_bb1_in(V_s,H,I)
     [V_s>=G+2,G>=1,V_k_0>=1,V_k_0=H+1,G+1=F,I=4,E=3,D=2,C=0,B=4] 
* CE 22: eval_asctoeg_bb1_in(V_s,V_k_0,B) = 3+ eval_asctoeg_bb2_in(V_s,V_k_0,C,D,V_s,V_k_0,E,F):2+ eval_asctoeg__critedge_in(V_s,V_k_0,G,H,I,V_s,V_k_0,J,K,L):2+ eval_asctoeg_bb1_in(V_s,M,N)
     [V_k_0>=1,0>=V_s,V_k_0=M+1,N=4,L+1=0,K=0,J=0,I=3,H=0,G=0,F=0,E=0,D=2,C=0,B=4] 
* CE 23: eval_asctoeg_bb1_in(V_s,V_k_0,B) = 3+ eval_asctoeg_bb2_in(V_s,V_k_0,C,D,V_s,V_k_0,E,F):3+ eval_asctoeg__critedge_in(V_s,V_k_0,G,H,I,V_s,V_k_0,J,K,L):2+ eval_asctoeg_bb1_in(V_s,M,N)
     [V_k_0>=1,V_s>=1,V_k_0=M+1,N=4,L+1=0,K=0,J=0,I=3,H=0,G=0,F=0,E=0,D=2,C=0,B=4] 
* CE 24: eval_asctoeg_bb1_in(V_s,V_k_0,B) = 3+ eval_asctoeg_bb2_in(V_s,V_k_0,C,D,V_s,V_k_0,E,E):4+ eval_asctoeg__critedge_in(V_s,V_k_0,E,E,F,V_s,V_k_0,E,G,H):1+ eval_asctoeg_bb1_in(V_s,I,J)
     [V_s>=E+1,E>=2,V_k_0>=1,V_k_0=I+1,J=4,H=0,G=1,F=3,D=2,C=0,B=4] 
* CE 25: eval_asctoeg_bb1_in(V_s,V_k_0,B) = 3+ eval_asctoeg_bb2_in(V_s,V_k_0,C,D,V_s,V_k_0,E,F):4+ eval_asctoeg__critedge_in(V_s,V_k_0,G,H,I,V_s,V_k_0,J,K,L):2+ eval_asctoeg_bb1_in(V_s,M,N)
     [V_k_0>=1,V_s>=2,V_k_0=M+1,N=4,L=0,K=1,J=1,I=3,H=1,G=1,F=1,E=1,D=2,C=0,B=4] 
* CE 26: eval_asctoeg_bb1_in(V_s,V_k_0,B) = 3+ eval_asctoeg_bb2_in(V_s,V_k_0,C,D,V_s,V_k_0,E,E):4+ eval_asctoeg__critedge_in(V_s,V_k_0,E,E,F,V_s,V_k_0,E,E,G):3+ eval_asctoeg_bb1_in(V_s,H,I)
     [V_s>=E+1,E>=2,V_k_0>=1,V_k_0=H+1,E=G+1,I=4,F=3,D=2,C=0,B=4] 
* CE 27: eval_asctoeg_bb1_in(V_s,V_k_0,B) = 3+ eval_asctoeg_bb2_in(V_s,V_k_0,C,D,V_s,V_k_0,E,E):4+ eval_asctoeg__critedge_in(V_s,V_k_0,E,E,F,V_s,V_k_0,E,G,H):4+ eval_asctoeg_bb1_in(V_s,I,J)
     [E>=H+2,V_s>=E+1,H>=1,V_k_0>=1,V_k_0=I+1,H+1=G,J=4,F=3,D=2,C=0,B=4] 

### Cost equations --> "Loop" of eval_asctoeg_bb1_in/3 
* CEs [22] --> Loop 16 
* CEs [18,19,20,21,23,24,25,26,27] --> Loop 17 
* CEs [17] --> Loop 18 

#### Loops of eval_asctoeg_bb1_in/3 
* Loop 16: eval_asctoeg_bb1_in(V_s,V_k_0,B)->  eval_asctoeg_bb1_in(V_s,V_k_0',B')
                  [V_k_0>=1,0>=V_s,V_k_0=V_k_0'+1,B'=4,B=4] 
* Loop 17: eval_asctoeg_bb1_in(V_s,V_k_0,B)->  eval_asctoeg_bb1_in(V_s,V_k_0',B')
                  [V_k_0>=1,V_s>=1,V_k_0=V_k_0'+1,B'=4,B=4] 
* Loop 18: eval_asctoeg_bb1_in(V_s,V_k_0,B) [0>=V_k_0,B=4] 

### Ranking functions of CR eval_asctoeg_bb1_in(V_s,V_k_0,B) 
* RF of phase [17]: [V_k_0]

#### Partial ranking functions of CR eval_asctoeg_bb1_in(V_s,V_k_0,B) 
* Partial RF of phase [17]:
  - RF of loop [17:1]:
    V_k_0

Discarded unfeasible chain [[17]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_asctoeg_bb1_in(V_s,V_k_0,B) 
* [[17],18]
* [18]


### Merging Chains  eval_asctoeg_bb1_in/3 into  External patterns of execution 
* [[18]] --> 1 
* [[18,[17]]] --> 2 


### Specialization of cost equations eval_asctoeg_start/2 
* CE 2 is refined into CE [28,29] 


#### Refined cost equations eval_asctoeg_start/2 
* CE 28: eval_asctoeg_start(V_s,B) = 1+ eval_asctoeg_bb1_in(V_s,V_s,C):1
     [0>=V_s,C=4] 
* CE 29: eval_asctoeg_start(V_s,B) = 1+ eval_asctoeg_bb1_in(V_s,V_s,C):2
     [V_s>=1,C=4] 

### Cost equations --> "Loop" of eval_asctoeg_start/2 
* CEs [29] --> Loop 19 
* CEs [28] --> Loop 20 

#### Loops of eval_asctoeg_start/2 
* Loop 19: eval_asctoeg_start(V_s,B) [V_s>=1] 
* Loop 20: eval_asctoeg_start(V_s,B) [0>=V_s] 

### Ranking functions of CR eval_asctoeg_start(V_s,B) 

#### Partial ranking functions of CR eval_asctoeg_start(V_s,B) 


### Resulting Chains:eval_asctoeg_start(V_s,B) 
* [20]
* [19]


### Merging Chains  eval_asctoeg_start/2 into  External patterns of execution 
* [[20]] --> 1 
* [[19]] --> 2 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 12 

#### Computing cost of phase [10] 

#### Simplifying cost structure of CE 13 

#### Cost of loops [10] 

 * loop 10:eval_asctoeg_bb2_in(V_s,V_k_0,V_sp_0,B,C,D,E,F) -> [eval_asctoeg_bb2_in(V_s',V_k_0',V_sp_0',B',C',D',E',F')] 
1
##### Pending set eval_asctoeg_bb2_in(V_s,V_k_0,V_sp_0,B,C,D,E,F)
* Psum in Loop 10: [it(10)=<1]

###### Computing sum for it(10)=<1  in Loop 10 
   - Applying inductive sum strategy 
     - head Candidate: V_s-V_sp_0 
     - head Candidate: V_s-V_sp_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_s-V_sp_0 
     - tail Candidate: V_s-V_sp_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(10)=<V_s-V_sp_0,it(10)=<V_s-V_sp_0,it(10)=<V_s-V_sp_0-V_s'+V_sp_0',it(10)=<V_s-V_sp_0-V_s'+V_sp_0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [10] 

#### Simplifying cost structure of phase [10] 

#### Cost of phase [10]:eval_asctoeg_bb2_in(V_s,V_k_0,V_sp_0,B,C,D,E,F) -> [eval_asctoeg_bb2_in(V_s',V_k_0',V_sp_0',B',C',D',E',F')] 
1*it(10)+0
  Such that:it(10) =< V_s-V_sp_0
it(10) =< V_s-V_sp_0-V_s'+V_sp_0'

#### Simplifying cost structure of chain [[10],12] 

#### Simplifying cost structure of CE 11 

#### Found solution for phase  [10] in the cache 

#### Cost of phase [10]:eval_asctoeg_bb2_in(V_s,V_k_0,V_sp_0,B,C,D,E,F) -> [eval_asctoeg_bb2_in(V_s',V_k_0',V_sp_0',B',C',D',E',F')] 
1*it(10)+0
  Such that:it(10) =< V_s-V_sp_0
it(10) =< V_s-V_sp_0-V_s'+V_sp_0'

#### Simplifying cost structure of chain [[10],11] 

#### Cost of chains of eval_asctoeg_bb2_in(V_s,V_k_0,V_sp_0,B,C,D,E,F):
* Chain [[10],12]: 1*it(10)+0
  Such that:it(10) =< -V_sp_0+F

  with precondition: [B=2,V_s=C,V_k_0=D,V_s=E,V_s=F,V_k_0>=1,V_sp_0>=0,V_s>=V_sp_0+1] 

* Chain [[10],11]: 1*it(10)+0
  Such that:it(10) =< -V_sp_0+F

  with precondition: [B=2,V_s=C,V_k_0=D,E=F,V_k_0>=1,V_sp_0>=0,E>=V_sp_0+1,V_s>=E+1] 

* Chain [12]: 0
  with precondition: [B=2,V_s=C,V_k_0=D,V_sp_0=E,V_sp_0=F,V_k_0>=1,V_sp_0>=0,V_sp_0>=V_s] 

* Chain [11]: 0
  with precondition: [B=2,V_s=C,V_k_0=D,V_sp_0=E,V_sp_0=F,V_k_0>=1,V_sp_0>=0,V_s>=V_sp_0+1] 


#### Simplifying cost structure of CE 15 

#### Computing cost of phase [13] 

#### Simplifying cost structure of CE 16 

#### Cost of loops [13] 

 * loop 13:eval_asctoeg__critedge_in(V_s,V_k_0,V_sp_0,V_sp_0_sink,B,C,D,E,F,G) -> [eval_asctoeg__critedge_in(V_s',V_k_0',V_sp_0',V_sp_0_sink',B',C',D',E',F',G')] 
1
##### Pending set eval_asctoeg__critedge_in(V_s,V_k_0,V_sp_0,V_sp_0_sink,B,C,D,E,F,G)
* Psum in Loop 13: [it(13)=<1]

###### Computing sum for it(13)=<1  in Loop 13 
   - Applying inductive sum strategy 
     - head Candidate: V_sp_0_sink-1 
     - head Candidate: V_sp_0_sink-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_sp_0_sink-1 
     - tail Candidate: V_sp_0_sink-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(13)=<V_sp_0_sink-1,it(13)=<V_sp_0_sink-1,it(13)=<V_sp_0_sink-V_sp_0_sink',it(13)=<V_sp_0_sink-V_sp_0_sink'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [13] 

#### Simplifying cost structure of phase [13] 

#### Cost of phase [13]:eval_asctoeg__critedge_in(V_s,V_k_0,V_sp_0,V_sp_0_sink,B,C,D,E,F,G) -> [eval_asctoeg__critedge_in(V_s',V_k_0',V_sp_0',V_sp_0_sink',B',C',D',E',F',G')] 
1*it(13)+0
  Such that:it(13) =< V_sp_0_sink
it(13) =< V_sp_0_sink-V_sp_0_sink'

#### Simplifying cost structure of chain [[13],15] 

#### Simplifying cost structure of CE 14 

#### Found solution for phase  [13] in the cache 

#### Cost of phase [13]:eval_asctoeg__critedge_in(V_s,V_k_0,V_sp_0,V_sp_0_sink,B,C,D,E,F,G) -> [eval_asctoeg__critedge_in(V_s',V_k_0',V_sp_0',V_sp_0_sink',B',C',D',E',F',G')] 
1*it(13)+0
  Such that:it(13) =< V_sp_0_sink
it(13) =< V_sp_0_sink-V_sp_0_sink'

#### Simplifying cost structure of chain [[13],14] 

#### Cost of chains of eval_asctoeg__critedge_in(V_s,V_k_0,V_sp_0,V_sp_0_sink,B,C,D,E,F,G):
* Chain [[13],15]: 1*it(13)+0
  Such that:it(13) =< V_sp_0_sink

  with precondition: [B=3,F=1,G=0,V_s=C,V_k_0=D,V_sp_0=E,V_sp_0_sink>=2] 

* Chain [[13],14]: 1*it(13)+0
  Such that:it(13) =< V_sp_0_sink-F

  with precondition: [B=3,V_s=C,V_k_0=D,V_sp_0=E,F=G+1,F>=2,V_sp_0_sink>=F+1] 

* Chain [15]: 0
  with precondition: [B=3,C=V_s,D=V_k_0,E=V_sp_0,V_sp_0_sink=F,V_sp_0_sink=G+1,1>=V_sp_0_sink] 

* Chain [14]: 0
  with precondition: [B=3,C=V_s,D=V_k_0,E=V_sp_0,V_sp_0_sink=F,V_sp_0_sink=G+1,V_sp_0_sink>=2] 


#### Simplifying cost structure of CE 17 

#### Computing cost of phase [17] 
 * Renamed intermediate variables: 
[ (eq(18,1),it(10))>>s(1)]
 * Renamed intermediate variables: 
[ (eq(18,2),it(13))>>s(2)]

#### Simplifying cost structure of CE 18 
 * Joined equivalent variables [s(1),s(2)] into s(1)
 * Renamed intermediate variables: 
[ (eq(19,1),it(10))>>s(3)]

#### Simplifying cost structure of CE 19 
 * Renamed intermediate variables: 
[ (eq(20,1),it(10))>>s(4)]

#### Simplifying cost structure of CE 20 
 * Renamed intermediate variables: 
[ (eq(21,1),it(10))>>s(5)]
 * Renamed intermediate variables: 
[ (eq(21,2),it(13))>>s(6)]

#### Simplifying cost structure of CE 21 
 * Joined equivalent variables [s(5),s(6)] into s(5)

#### Simplifying cost structure of CE 23 
 * Renamed intermediate variables: 
[ (eq(24,1),it(10))>>s(7)]
 * Renamed intermediate variables: 
[ (eq(24,2),it(13))>>s(8)]

#### Simplifying cost structure of CE 24 
 * Joined equivalent variables [s(7),s(8)] into s(7)
 * Renamed intermediate variables: 
[ (eq(25,1),it(10))>>s(9)]

#### Simplifying cost structure of CE 25 
 * Renamed intermediate variables: 
[ (eq(26,1),it(10))>>s(10)]

#### Simplifying cost structure of CE 26 
 * Renamed intermediate variables: 
[ (eq(27,1),it(10))>>s(11)]
 * Renamed intermediate variables: 
[ (eq(27,2),it(13))>>s(12)]

#### Simplifying cost structure of CE 27 
 * Joined equivalent variables [s(11),s(12)] into s(11)
 * Joined equivalent variables [aux(7),aux(1),aux(2),aux(3),aux(4)] into aux(7)
 * Joined equivalent variables [s(3),s(9)] into s(3)
 * Joined equivalent variables [s(4),s(10)] into s(4)
 * Joined equivalent variables [s(1),s(5),s(7),s(11)] into s(1)
 * Renamed intermediate variables: 
[ (it(17),aux(5))>>s(13), (it(17),aux(6))>>s(14), (it(17),aux(7))>>s(15), (it(17),s(3))>>s(16), (it(17),s(4))>>s(17), (it(17),s(1))>>s(18)]

#### Cost of loops [17] 

 * loop 17:eval_asctoeg_bb1_in(V_s,V_k_0,B) -> [eval_asctoeg_bb1_in(V_s',V_k_0',B')] 
8*s(18)+2*s(16)+2*s(17)+3
  Such that:s(13) =< 1
s(14) =< V_s
s(15) =< V_s'
s(16) =< s(13)
s(17) =< s(14)
s(18) =< s(15)

##### Pending set eval_asctoeg_bb1_in(V_s,V_k_0,B)
* Psum in Loop 17: [it(17)=<1,s(24)=<1,s(23)=<V_s,s(22)=<V_s']

###### Computing sum for it(17)=<1  in Loop 17 
   - Applying inductive sum strategy 
     - head Candidate: V_k_0 
     - head Candidate: V_k_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_k_0 
     - tail Candidate: V_k_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(17)=<V_k_0,it(17)=<V_k_0,it(17)=<V_k_0-V_k_0',it(17)=<V_k_0-V_k_0'] 

##### Pending set eval_asctoeg_0(V_s,B)
* Psum in Loop 17: [s(24)=<1,s(23)=<V_s,s(22)=<V_s']

###### Computing sum for s(24)=<1  in Loop 17 
   - Found a solution using cacheing 
 * Adding constraints: [s(24)=<aux(8),aux(8)=<V_k_0,aux(8)=<V_k_0,aux(8)=<V_k_0-V_k_0',aux(8)=<V_k_0-V_k_0'] 

##### Pending set eval_asctoeg_0(V_s,B)
* Psum in Loop 17: [s(23)=<V_s,s(22)=<V_s']

###### Computing sum for s(23)=<V_s  in Loop 17 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(9)=<V_s] 
 * Adding constraints: [s(23)=<it(17)*aux(9)] 

##### Pending set eval_asctoeg_bb1_in(V_s,V_k_0,B)
* Pmax/min: [aux(9)=<V_s]
* Psum in Loop 17: [s(22)=<V_s']

###### Computing max_min for aux(9)=<V_s  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(9)=<V_s] 

##### Pending set eval_asctoeg_bb1_in(V_s,V_k_0,B)
* Psum in Loop 17: [s(22)=<V_s']

###### Computing sum for s(22)=<V_s'  in Loop 17 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(10)=<V_s] 
 * Adding constraints: [s(22)=<it(17)*aux(10)] 

##### Pending set eval_asctoeg_bb1_in(V_s,V_k_0,B)
* Pmax/min: [aux(10)=<V_s]

###### Computing max_min for aux(10)=<V_s  
   - Found a solution using cacheing 
 * Adding constraints:[aux(10)=<aux(9)] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [17] 

#### Simplifying cost structure of phase [17] 
 * Joined equivalent variables [aux(8),s(24)] into aux(8)

#### Cost of phase [17]:eval_asctoeg_bb1_in(V_s,V_k_0,B) -> [eval_asctoeg_bb1_in(V_s',V_k_0',B')] 
3*it(17)+8*s(19)+2*s(20)+2*s(21)+0
  Such that:aux(9) =< V_s
aux(11) =< V_k_0
aux(12) =< V_k_0-V_k_0'
aux(8) =< aux(11)
it(17) =< aux(11)
aux(8) =< aux(12)
it(17) =< aux(12)
aux(10) =< aux(9)
s(23) =< it(17)*aux(9)
s(22) =< it(17)*aux(10)
s(20) =< aux(8)
s(21) =< s(23)
s(19) =< s(22)

#### Simplifying cost structure of chain [[17],18] 
 * Joined equivalent variables [aux(13),aux(11),aux(12)] into aux(13)
 * Joined equivalent variables [aux(13),aux(8)] into aux(13)
 * Joined equivalent variables [it(17),s(20)] into it(17)

#### Cost of chains of eval_asctoeg_bb1_in(V_s,V_k_0,B):
* Chain [[17],18]: 5*it(17)+8*s(19)+2*s(21)+0
  Such that:aux(9) =< V_s
aux(13) =< V_k_0
it(17) =< aux(13)
aux(10) =< aux(9)
s(23) =< it(17)*aux(9)
s(22) =< it(17)*aux(10)
s(21) =< s(23)
s(19) =< s(22)

  with precondition: [B=4,V_k_0>=1,V_s>=V_k_0] 

* Chain [18]: 0
  with precondition: [B=4,0>=V_k_0,V_s>=V_k_0] 


#### Simplifying cost structure of CE 28 
 * Renamed intermediate variables: 
[ (eq(29,1),aux(9))>>s(25), (eq(29,1),aux(13))>>s(26), (eq(29,1),it(17))>>s(27), (eq(29,1),aux(10))>>s(28), (eq(29,1),s(23))>>s(29), (eq(29,1),s(22))>>s(30), (eq(29,1),s(21))>>s(31), (eq(29,1),s(19))>>s(32)]

#### Simplifying cost structure of CE 29 
 * Joined equivalent variables [aux(14),s(25),s(26)] into aux(14)

#### Cost of chains of eval_asctoeg_start(V_s,B):
* Chain [20]: 1
  with precondition: [0>=V_s] 

* Chain [19]: 5*s(27)+2*s(31)+8*s(32)+1
  Such that:aux(14) =< V_s
s(27) =< aux(14)
s(28) =< aux(14)
s(29) =< s(27)*aux(14)
s(30) =< s(27)*s(28)
s(31) =< s(29)
s(32) =< s(30)

  with precondition: [V_s>=1] 


Closed-form bounds of eval_asctoeg_start(V_s,B): 
-------------------------------------
* Chain [20] with precondition: [0>=V_s] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [19] with precondition: [V_s>=1] 
    - Upper bound: 5*V_s+1+10*V_s*V_s 
    - Complexity: n^2 

### Maximum cost of eval_asctoeg_start(V_s,B): nat(V_s)*10*nat(V_s)+nat(V_s)*5+1 
Asymptotic class: n^2 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 117 ms.
* Invariants computed in 133 ms.
   - Backward Invariants 75 ms.
   - Transitive Invariants 25 ms.
* Refinement performed in 310 ms.
* Termination proved in 21 ms.
* Upper bounds computed in 271 ms.
   - Equation cost structures 128 ms.
   - Phase cost structures 166 ms.
   - Chain cost structures 72 ms.
   - Solving cost expressions 2 ms.
* Total analysis performed in 997 ms.


Warning: Ignored call to eval_asctoeg_stop/1 in equation eval_asctoeg_bb6_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_asctoeg_5/8,eval_asctoeg_6/9,eval_asctoeg_bb2_in/8,eval_asctoeg_bb3_in/8,eval_asctoeg_bb4_in/9]
1. recursive  : [eval_asctoeg_11/11,eval_asctoeg_12/12,eval_asctoeg__critedge_in/10,eval_asctoeg_bb5_in/11]
2. recursive  : [eval_asctoeg_14/7,eval_asctoeg_15/7,eval_asctoeg__critedge1_in/6,eval_asctoeg_bb1_in/3,loop_cont_eval_asctoeg__critedge_in/7,loop_cont_eval_asctoeg_bb2_in/6]
3. non_recursive  : [eval_asctoeg_bb6_in/1]
4. non_recursive  : [loop_cont_eval_asctoeg_bb1_in/2]
5. non_recursive  : [eval_asctoeg_4/2]
6. non_recursive  : [eval_asctoeg_3/2]
7. non_recursive  : [eval_asctoeg_2/2]
8. non_recursive  : [eval_asctoeg_1/2]
9. non_recursive  : [eval_asctoeg_0/2]
10. non_recursive  : [eval_asctoeg_bb0_in/2]
11. non_recursive  : [eval_asctoeg_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_asctoeg_bb2_in/8
1. SCC is partially evaluated into eval_asctoeg__critedge_in/10
2. SCC is partially evaluated into eval_asctoeg_bb1_in/3
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_asctoeg_4/2
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into eval_asctoeg_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_asctoeg_bb2_in/8 
* CE 5 is refined into CE [11] 
* CE 7 is refined into CE [12] 
* CE 6 is refined into CE [13] 


#### Refined cost equations eval_asctoeg_bb2_in/8 
* CE 11: eval_asctoeg_bb2_in(A,B,C,D,A,B,C,C) = 0
     [A>=C+1,C>=0,B>=1,D=2] 
* CE 12: eval_asctoeg_bb2_in(A,B,C,D,A,B,C,C) = 0
     [C>=A,C>=0,B>=1,D=2] 
* CE 13: eval_asctoeg_bb2_in(V_s,V_k_0,V_sp_0,B,C,D,E,F) = 1+ eval_asctoeg_bb2_in(V_s,V_k_0,G,H,C,D,E,F)
     [V_s>=V_sp_0+1,V_sp_0>=0,V_k_0>=1,V_sp_0+1=G,H=2,B=2] 

### Cost equations --> "Loop" of eval_asctoeg_bb2_in/8 
* CEs [13] --> Loop 11 
* CEs [11] --> Loop 12 
* CEs [12] --> Loop 13 

#### Loops of eval_asctoeg_bb2_in/8 
* Loop 11: eval_asctoeg_bb2_in(V_s,V_k_0,V_sp_0,B,C,D,E,F)->  eval_asctoeg_bb2_in(V_s,V_k_0,V_sp_0',B',C,D,E,F)
                  [V_s>=V_sp_0+1,V_sp_0>=0,V_k_0>=1,V_sp_0+1=V_sp_0',B'=2,B=2] 
* Loop 12: eval_asctoeg_bb2_in(A,B,C,D,A,B,C,C) [A>=C+1,C>=0,B>=1,D=2] 
* Loop 13: eval_asctoeg_bb2_in(A,B,C,D,A,B,C,C) [C>=A,C>=0,B>=1,D=2] 

### Ranking functions of CR eval_asctoeg_bb2_in(V_s,V_k_0,V_sp_0,B,C,D,E,F) 
* RF of phase [11]: [V_s-V_sp_0]

#### Partial ranking functions of CR eval_asctoeg_bb2_in(V_s,V_k_0,V_sp_0,B,C,D,E,F) 
* Partial RF of phase [11]:
  - RF of loop [11:1]:
    V_s-V_sp_0

Discarded unfeasible chain [[11]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_asctoeg_bb2_in(V_s,V_k_0,V_sp_0,B,C,D,E,F) 
* [[11],13]
* [[11],12]
* [13]
* [12]


### Merging Chains  eval_asctoeg_bb2_in/8 into  External patterns of execution 
* [[13,[11]]] --> 1 
* [[13]] --> 2 
* [[12]] --> 3 
* [[12,[11]]] --> 4 


### Specialization of cost equations eval_asctoeg__critedge_in/10 
* CE 8 is refined into CE [14] 
* CE 10 is refined into CE [15] 
* CE 9 is refined into CE [16] 


#### Refined cost equations eval_asctoeg__critedge_in/10 
* CE 14: eval_asctoeg__critedge_in(A,B,C,D,E,A,B,C,D,F) = 0
     [D>=2,D=F+1,E=3] 
* CE 15: eval_asctoeg__critedge_in(A,B,C,D,E,A,B,C,D,F) = 0
     [1>=D,D=F+1,E=3] 
* CE 16: eval_asctoeg__critedge_in(V_s,V_k_0,V_sp_0,V_sp_0_sink,B,C,D,E,F,G) = 1+ eval_asctoeg__critedge_in(V_s,V_k_0,V_sp_0,H,I,C,D,E,F,G)
     [V_sp_0_sink>=2,V_sp_0_sink=H+1,I=3,B=3] 

### Cost equations --> "Loop" of eval_asctoeg__critedge_in/10 
* CEs [16] --> Loop 14 
* CEs [14] --> Loop 15 
* CEs [15] --> Loop 16 

#### Loops of eval_asctoeg__critedge_in/10 
* Loop 14: eval_asctoeg__critedge_in(V_s,V_k_0,V_sp_0,V_sp_0_sink,B,C,D,E,F,G)->  eval_asctoeg__critedge_in(V_s,V_k_0,V_sp_0,V_sp_0_sink',B',C,D,E,F,G)
                  [V_sp_0_sink>=2,V_sp_0_sink=V_sp_0_sink'+1,B'=3,B=3] 
* Loop 15: eval_asctoeg__critedge_in(A,B,C,D,E,A,B,C,D,F) [D>=2,D=F+1,E=3] 
* Loop 16: eval_asctoeg__critedge_in(A,B,C,D,E,A,B,C,D,F) [1>=D,D=F+1,E=3] 

### Ranking functions of CR eval_asctoeg__critedge_in(V_s,V_k_0,V_sp_0,V_sp_0_sink,B,C,D,E,F,G) 
* RF of phase [14]: [V_sp_0_sink-1]

#### Partial ranking functions of CR eval_asctoeg__critedge_in(V_s,V_k_0,V_sp_0,V_sp_0_sink,B,C,D,E,F,G) 
* Partial RF of phase [14]:
  - RF of loop [14:1]:
    V_sp_0_sink-1

Discarded unfeasible chain [[14]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_asctoeg__critedge_in(V_s,V_k_0,V_sp_0,V_sp_0_sink,B,C,D,E,F,G) 
* [[14],16]
* [[14],15]
* [16]
* [15]


### Merging Chains  eval_asctoeg__critedge_in/10 into  External patterns of execution 
* [[16,[14]]] --> 1 
* [[16]] --> 2 
* [[15]] --> 3 
* [[15,[14]]] --> 4 


### Specialization of cost equations eval_asctoeg_bb1_in/3 
* CE 4 is refined into CE [17] 
* CE 3 is refined into CE [18,19,20,21,22,23,24,25,26,27] 


#### Refined cost equations eval_asctoeg_bb1_in/3 
* CE 17: eval_asctoeg_bb1_in(V_s,V_k_0,B) = 0
     [0>=V_k_0,B=4] 
* CE 18: eval_asctoeg_bb1_in(V_s,V_k_0,B) = 3+ eval_asctoeg_bb2_in(V_s,V_k_0,C,D,V_s,V_k_0,V_s,V_s):1+ eval_asctoeg__critedge_in(V_s,V_k_0,V_s,V_s,E,V_s,V_k_0,V_s,F,G):1+ eval_asctoeg_bb1_in(V_s,H,I)
     [V_k_0>=1,V_s>=2,V_k_0=H+1,I=4,G=0,F=1,E=3,D=2,C=0,B=4] 
* CE 19: eval_asctoeg_bb1_in(V_s,V_k_0,B) = 3+ eval_asctoeg_bb2_in(C,V_k_0,D,E,F,V_k_0,G,H):1+ eval_asctoeg__critedge_in(I,V_k_0,J,K,L,M,V_k_0,N,O,P):2+ eval_asctoeg_bb1_in(Q,R,S)
     [V_k_0>=1,V_k_0=R+1,S=4,Q=1,P=0,O=1,N=1,M=1,L=3,K=1,J=1,I=1,H=1,G=1,F=1,E=2,D=0,C=1,B=4,V_s=1] 
* CE 20: eval_asctoeg_bb1_in(V_s,V_k_0,B) = 3+ eval_asctoeg_bb2_in(V_s,V_k_0,C,D,V_s,V_k_0,V_s,V_s):1+ eval_asctoeg__critedge_in(V_s,V_k_0,V_s,V_s,E,V_s,V_k_0,V_s,V_s,F):3+ eval_asctoeg_bb1_in(V_s,G,H)
     [V_k_0>=1,V_s>=2,V_k_0=G+1,V_s=F+1,H=4,E=3,D=2,C=0,B=4] 
* CE 21: eval_asctoeg_bb1_in(V_s,V_k_0,B) = 3+ eval_asctoeg_bb2_in(V_s,V_k_0,C,D,V_s,V_k_0,V_s,V_s):1+ eval_asctoeg__critedge_in(V_s,V_k_0,V_s,V_s,E,V_s,V_k_0,V_s,F,G):4+ eval_asctoeg_bb1_in(V_s,H,I)
     [V_s>=G+2,G>=1,V_k_0>=1,V_k_0=H+1,G+1=F,I=4,E=3,D=2,C=0,B=4] 
* CE 22: eval_asctoeg_bb1_in(V_s,V_k_0,B) = 3+ eval_asctoeg_bb2_in(V_s,V_k_0,C,D,V_s,V_k_0,E,F):2+ eval_asctoeg__critedge_in(V_s,V_k_0,G,H,I,V_s,V_k_0,J,K,L):2+ eval_asctoeg_bb1_in(V_s,M,N)
     [V_k_0>=1,0>=V_s,V_k_0=M+1,N=4,L+1=0,K=0,J=0,I=3,H=0,G=0,F=0,E=0,D=2,C=0,B=4] 
* CE 23: eval_asctoeg_bb1_in(V_s,V_k_0,B) = 3+ eval_asctoeg_bb2_in(V_s,V_k_0,C,D,V_s,V_k_0,E,F):3+ eval_asctoeg__critedge_in(V_s,V_k_0,G,H,I,V_s,V_k_0,J,K,L):2+ eval_asctoeg_bb1_in(V_s,M,N)
     [V_k_0>=1,V_s>=1,V_k_0=M+1,N=4,L+1=0,K=0,J=0,I=3,H=0,G=0,F=0,E=0,D=2,C=0,B=4] 
* CE 24: eval_asctoeg_bb1_in(V_s,V_k_0,B) = 3+ eval_asctoeg_bb2_in(V_s,V_k_0,C,D,V_s,V_k_0,E,E):4+ eval_asctoeg__critedge_in(V_s,V_k_0,E,E,F,V_s,V_k_0,E,G,H):1+ eval_asctoeg_bb1_in(V_s,I,J)
     [V_s>=E+1,E>=2,V_k_0>=1,V_k_0=I+1,J=4,H=0,G=1,F=3,D=2,C=0,B=4] 
* CE 25: eval_asctoeg_bb1_in(V_s,V_k_0,B) = 3+ eval_asctoeg_bb2_in(V_s,V_k_0,C,D,V_s,V_k_0,E,F):4+ eval_asctoeg__critedge_in(V_s,V_k_0,G,H,I,V_s,V_k_0,J,K,L):2+ eval_asctoeg_bb1_in(V_s,M,N)
     [V_k_0>=1,V_s>=2,V_k_0=M+1,N=4,L=0,K=1,J=1,I=3,H=1,G=1,F=1,E=1,D=2,C=0,B=4] 
* CE 26: eval_asctoeg_bb1_in(V_s,V_k_0,B) = 3+ eval_asctoeg_bb2_in(V_s,V_k_0,C,D,V_s,V_k_0,E,E):4+ eval_asctoeg__critedge_in(V_s,V_k_0,E,E,F,V_s,V_k_0,E,E,G):3+ eval_asctoeg_bb1_in(V_s,H,I)
     [V_s>=E+1,E>=2,V_k_0>=1,V_k_0=H+1,E=G+1,I=4,F=3,D=2,C=0,B=4] 
* CE 27: eval_asctoeg_bb1_in(V_s,V_k_0,B) = 3+ eval_asctoeg_bb2_in(V_s,V_k_0,C,D,V_s,V_k_0,E,E):4+ eval_asctoeg__critedge_in(V_s,V_k_0,E,E,F,V_s,V_k_0,E,G,H):4+ eval_asctoeg_bb1_in(V_s,I,J)
     [E>=H+2,V_s>=E+1,H>=1,V_k_0>=1,V_k_0=I+1,H+1=G,J=4,F=3,D=2,C=0,B=4] 

### Cost equations --> "Loop" of eval_asctoeg_bb1_in/3 
* CEs [27] --> Loop 17 
* CEs [21,24,26] --> Loop 18 
* CEs [18,20,25] --> Loop 19 
* CEs [23] --> Loop 20 
* CEs [22] --> Loop 21 
* CEs [19] --> Loop 22 
* CEs [17] --> Loop 23 

#### Loops of eval_asctoeg_bb1_in/3 
* Loop 17: eval_asctoeg_bb1_in(V_s,V_k_0,B)->  eval_asctoeg_bb1_in(V_s,V_k_0',B')
                  [V_k_0>=1,V_s>=4,V_k_0=V_k_0'+1,B'=4,B=4] 
* Loop 18: eval_asctoeg_bb1_in(V_s,V_k_0,B)->  eval_asctoeg_bb1_in(V_s,V_k_0',B')
                  [V_k_0>=1,V_s>=3,V_k_0=V_k_0'+1,B'=4,B=4] 
* Loop 19: eval_asctoeg_bb1_in(V_s,V_k_0,B)->  eval_asctoeg_bb1_in(V_s,V_k_0',B')
                  [V_k_0>=1,V_s>=2,V_k_0=V_k_0'+1,B'=4,B=4] 
* Loop 20: eval_asctoeg_bb1_in(V_s,V_k_0,B)->  eval_asctoeg_bb1_in(V_s,V_k_0',B')
                  [V_k_0>=1,V_s>=1,V_k_0=V_k_0'+1,B'=4,B=4] 
* Loop 21: eval_asctoeg_bb1_in(V_s,V_k_0,B)->  eval_asctoeg_bb1_in(V_s,V_k_0',B')
                  [V_k_0>=1,0>=V_s,V_k_0=V_k_0'+1,B'=4,B=4] 
* Loop 22: eval_asctoeg_bb1_in(V_s,V_k_0,B)->  eval_asctoeg_bb1_in(V_s',V_k_0',B')
                  [V_k_0>=1,V_k_0=V_k_0'+1,B'=4,V_s'=1,B=4,V_s=1] 
* Loop 23: eval_asctoeg_bb1_in(V_s,V_k_0,B) [0>=V_k_0,B=4] 

### Ranking functions of CR eval_asctoeg_bb1_in(V_s,V_k_0,B) 
* RF of phase [17,18,19,20,22]: [V_k_0]

#### Partial ranking functions of CR eval_asctoeg_bb1_in(V_s,V_k_0,B) 
* Partial RF of phase [17,18,19,20,22]:
  - RF of loop [17:1,18:1,19:1,20:1,22:1]:
    V_k_0

Discarded unfeasible chain [[17,18,19,20,22]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_asctoeg_bb1_in(V_s,V_k_0,B) 
* [[17,18,19,20,22],23]
* [23]


### Merging Chains  eval_asctoeg_bb1_in/3 into  External patterns of execution 
* [[23]] --> 1 
* [[23,[17,18,19,20,22]]] --> 2 


### Specialization of cost equations eval_asctoeg_4/2 
* CE 2 is refined into CE [28,29] 


#### Refined cost equations eval_asctoeg_4/2 
* CE 28: eval_asctoeg_4(V_s,B) = 1+ eval_asctoeg_bb1_in(V_s,V_s,C):1
     [0>=V_s,C=4] 
* CE 29: eval_asctoeg_4(V_s,B) = 1+ eval_asctoeg_bb1_in(V_s,V_s,C):2
     [V_s>=1,C=4] 

### Cost equations --> "Loop" of eval_asctoeg_4/2 
* CEs [29] --> Loop 24 
* CEs [28] --> Loop 25 

#### Loops of eval_asctoeg_4/2 
* Loop 24: eval_asctoeg_4(V_s,B) [V_s>=1] 
* Loop 25: eval_asctoeg_4(V_s,B) [0>=V_s] 

### Ranking functions of CR eval_asctoeg_4(V_s,B) 

#### Partial ranking functions of CR eval_asctoeg_4(V_s,B) 


### Resulting Chains:eval_asctoeg_4(V_s,B) 
* [25]
* [24]


### Merging Chains  eval_asctoeg_4/2 into  External patterns of execution 
* [[25]] --> 1 
* [[24]] --> 2 


### Specialization of cost equations eval_asctoeg_start/2 
* CE 1 is refined into CE [30,31] 


#### Refined cost equations eval_asctoeg_start/2 
* CE 30: eval_asctoeg_start(V_s,B) = 0+ eval_asctoeg_4(V_s,B):1
     [0>=V_s] 
* CE 31: eval_asctoeg_start(V_s,B) = 0+ eval_asctoeg_4(V_s,B):2
     [V_s>=1] 

### Cost equations --> "Loop" of eval_asctoeg_start/2 
* CEs [31] --> Loop 26 
* CEs [30] --> Loop 27 

#### Loops of eval_asctoeg_start/2 
* Loop 26: eval_asctoeg_start(V_s,B) [V_s>=1] 
* Loop 27: eval_asctoeg_start(V_s,B) [0>=V_s] 

### Ranking functions of CR eval_asctoeg_start(V_s,B) 

#### Partial ranking functions of CR eval_asctoeg_start(V_s,B) 


### Resulting Chains:eval_asctoeg_start(V_s,B) 
* [27]
* [26]


### Merging Chains  eval_asctoeg_start/2 into  External patterns of execution 
* [[27]] --> 1 
* [[26]] --> 2 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 12 

#### Computing cost of phase [11] 

#### Simplifying cost structure of CE 13 

#### Cost of loops [11] 

 * loop 11:eval_asctoeg_bb2_in(V_s,V_k_0,V_sp_0,B,C,D,E,F) -> [eval_asctoeg_bb2_in(V_s',V_k_0',V_sp_0',B',C',D',E',F')] 
1
##### Pending set eval_asctoeg_bb2_in(V_s,V_k_0,V_sp_0,B,C,D,E,F)
* Psum in Loop 11: [it(11)=<1]

###### Computing sum for it(11)=<1  in Loop 11 
   - Applying inductive sum strategy 
     - head Candidate: V_s-V_sp_0 
     - head Candidate: V_s-V_sp_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_s-V_sp_0 
     - tail Candidate: V_s-V_sp_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(11)=<V_s-V_sp_0,it(11)=<V_s-V_sp_0,it(11)=<V_s-V_sp_0-V_s'+V_sp_0',it(11)=<V_s-V_sp_0-V_s'+V_sp_0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [11] 

#### Simplifying cost structure of phase [11] 

#### Cost of phase [11]:eval_asctoeg_bb2_in(V_s,V_k_0,V_sp_0,B,C,D,E,F) -> [eval_asctoeg_bb2_in(V_s',V_k_0',V_sp_0',B',C',D',E',F')] 
1*it(11)+0
  Such that:it(11) =< V_s-V_sp_0
it(11) =< V_s-V_sp_0-V_s'+V_sp_0'

#### Simplifying cost structure of chain [[11],13] 

#### Simplifying cost structure of CE 11 

#### Found solution for phase  [11] in the cache 

#### Cost of phase [11]:eval_asctoeg_bb2_in(V_s,V_k_0,V_sp_0,B,C,D,E,F) -> [eval_asctoeg_bb2_in(V_s',V_k_0',V_sp_0',B',C',D',E',F')] 
1*it(11)+0
  Such that:it(11) =< V_s-V_sp_0
it(11) =< V_s-V_sp_0-V_s'+V_sp_0'

#### Simplifying cost structure of chain [[11],12] 

#### Cost of chains of eval_asctoeg_bb2_in(V_s,V_k_0,V_sp_0,B,C,D,E,F):
* Chain [[11],13]: 1*it(11)+0
  Such that:it(11) =< -V_sp_0+F

  with precondition: [B=2,V_s=C,V_k_0=D,V_s=E,V_s=F,V_k_0>=1,V_sp_0>=0,V_s>=V_sp_0+1] 

* Chain [[11],12]: 1*it(11)+0
  Such that:it(11) =< -V_sp_0+F

  with precondition: [B=2,V_s=C,V_k_0=D,E=F,V_k_0>=1,V_sp_0>=0,E>=V_sp_0+1,V_s>=E+1] 

* Chain [13]: 0
  with precondition: [B=2,V_s=C,V_k_0=D,V_sp_0=E,V_sp_0=F,V_k_0>=1,V_sp_0>=0,V_sp_0>=V_s] 

* Chain [12]: 0
  with precondition: [B=2,V_s=C,V_k_0=D,V_sp_0=E,V_sp_0=F,V_k_0>=1,V_sp_0>=0,V_s>=V_sp_0+1] 


#### Simplifying cost structure of CE 15 

#### Computing cost of phase [14] 

#### Simplifying cost structure of CE 16 

#### Cost of loops [14] 

 * loop 14:eval_asctoeg__critedge_in(V_s,V_k_0,V_sp_0,V_sp_0_sink,B,C,D,E,F,G) -> [eval_asctoeg__critedge_in(V_s',V_k_0',V_sp_0',V_sp_0_sink',B',C',D',E',F',G')] 
1
##### Pending set eval_asctoeg__critedge_in(V_s,V_k_0,V_sp_0,V_sp_0_sink,B,C,D,E,F,G)
* Psum in Loop 14: [it(14)=<1]

###### Computing sum for it(14)=<1  in Loop 14 
   - Applying inductive sum strategy 
     - head Candidate: V_sp_0_sink-1 
     - head Candidate: V_sp_0_sink-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_sp_0_sink-1 
     - tail Candidate: V_sp_0_sink-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(14)=<V_sp_0_sink-1,it(14)=<V_sp_0_sink-1,it(14)=<V_sp_0_sink-V_sp_0_sink',it(14)=<V_sp_0_sink-V_sp_0_sink'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [14] 

#### Simplifying cost structure of phase [14] 

#### Cost of phase [14]:eval_asctoeg__critedge_in(V_s,V_k_0,V_sp_0,V_sp_0_sink,B,C,D,E,F,G) -> [eval_asctoeg__critedge_in(V_s',V_k_0',V_sp_0',V_sp_0_sink',B',C',D',E',F',G')] 
1*it(14)+0
  Such that:it(14) =< V_sp_0_sink
it(14) =< V_sp_0_sink-V_sp_0_sink'

#### Simplifying cost structure of chain [[14],16] 

#### Simplifying cost structure of CE 14 

#### Found solution for phase  [14] in the cache 

#### Cost of phase [14]:eval_asctoeg__critedge_in(V_s,V_k_0,V_sp_0,V_sp_0_sink,B,C,D,E,F,G) -> [eval_asctoeg__critedge_in(V_s',V_k_0',V_sp_0',V_sp_0_sink',B',C',D',E',F',G')] 
1*it(14)+0
  Such that:it(14) =< V_sp_0_sink
it(14) =< V_sp_0_sink-V_sp_0_sink'

#### Simplifying cost structure of chain [[14],15] 

#### Cost of chains of eval_asctoeg__critedge_in(V_s,V_k_0,V_sp_0,V_sp_0_sink,B,C,D,E,F,G):
* Chain [[14],16]: 1*it(14)+0
  Such that:it(14) =< V_sp_0_sink

  with precondition: [B=3,F=1,G=0,V_s=C,V_k_0=D,V_sp_0=E,V_sp_0_sink>=2] 

* Chain [[14],15]: 1*it(14)+0
  Such that:it(14) =< V_sp_0_sink-F

  with precondition: [B=3,V_s=C,V_k_0=D,V_sp_0=E,F=G+1,F>=2,V_sp_0_sink>=F+1] 

* Chain [16]: 0
  with precondition: [B=3,C=V_s,D=V_k_0,E=V_sp_0,V_sp_0_sink=F,V_sp_0_sink=G+1,1>=V_sp_0_sink] 

* Chain [15]: 0
  with precondition: [B=3,C=V_s,D=V_k_0,E=V_sp_0,V_sp_0_sink=F,V_sp_0_sink=G+1,V_sp_0_sink>=2] 


#### Simplifying cost structure of CE 17 

#### Computing cost of phase [17,18,19,20,22] 
 * Renamed intermediate variables: 
[(eq(27,1),it(11))>>s(1)]
 * Renamed intermediate variables: 
[(eq(27,2),it(14))>>s(2)]

#### Simplifying cost structure of CE 27 
 * Joined equivalent variables [s(1),s(2)] into s(1)
 * Renamed intermediate variables: 
[(it(17),aux(1))>>s(3),(it(17),s(1))>>s(4)]
 * Renamed intermediate variables: 
[(eq(21,1),it(11))>>s(5)]
 * Renamed intermediate variables: 
[(eq(21,2),it(14))>>s(6)]

#### Simplifying cost structure of CE 21 
 * Joined equivalent variables [s(5),s(6)] into s(5)
 * Renamed intermediate variables: 
[(eq(24,1),it(11))>>s(7)]
 * Renamed intermediate variables: 
[(eq(24,2),it(14))>>s(8)]

#### Simplifying cost structure of CE 24 
 * Joined equivalent variables [s(7),s(8)] into s(7)
 * Renamed intermediate variables: 
[(eq(26,1),it(11))>>s(9)]

#### Simplifying cost structure of CE 26 
 * Joined equivalent variables [aux(4),aux(2),aux(3)] into aux(4)
 * Joined equivalent variables [s(5),s(7)] into s(5)
 * Renamed intermediate variables: 
[(it(18),s(9))>>s(10),(it(18),aux(4))>>s(11),(it(18),s(5))>>s(12)]
 * Renamed intermediate variables: 
[(eq(18,1),it(11))>>s(13)]
 * Renamed intermediate variables: 
[(eq(18,2),it(14))>>s(14)]

#### Simplifying cost structure of CE 18 
 * Joined equivalent variables [s(13),s(14)] into s(13)
 * Renamed intermediate variables: 
[(eq(20,1),it(11))>>s(15)]

#### Simplifying cost structure of CE 20 
 * Renamed intermediate variables: 
[(eq(25,1),it(11))>>s(16)]

#### Simplifying cost structure of CE 25 
 * Renamed intermediate variables: 
[(it(19),s(16))>>s(17),(it(19),s(15))>>s(18),(it(19),aux(5))>>s(19),(it(19),s(13))>>s(20)]

#### Simplifying cost structure of CE 23 
 * Renamed intermediate variables: 
[(eq(19,1),it(11))>>s(21)]

#### Simplifying cost structure of CE 19 
 * Renamed intermediate variables: 
[(it(22),s(21))>>s(22)]

#### Cost of loops [17,18,19,20,22] 

 * loop 17:eval_asctoeg_bb1_in(V_s,V_k_0,B) -> [eval_asctoeg_bb1_in(V_s',V_k_0',B')] 
2*s(4)+3
  Such that:s(3) =< V_s'
s(4) =< s(3)

 * loop 18:eval_asctoeg_bb1_in(V_s,V_k_0,B) -> [eval_asctoeg_bb1_in(V_s',V_k_0',B')] 
4*s(12)+1*s(10)+3
  Such that:s(10) =< V_s
s(11) =< V_s'
s(12) =< s(11)

 * loop 19:eval_asctoeg_bb1_in(V_s,V_k_0,B) -> [eval_asctoeg_bb1_in(V_s',V_k_0',B')] 
2*s(20)+1*s(18)+1*s(17)+3
  Such that:s(17) =< 1
s(18) =< V_s
s(19) =< V_s'
s(20) =< s(19)

 * loop 20:eval_asctoeg_bb1_in(V_s,V_k_0,B) -> [eval_asctoeg_bb1_in(V_s',V_k_0',B')] 
3
 * loop 22:eval_asctoeg_bb1_in(V_s,V_k_0,B) -> [eval_asctoeg_bb1_in(V_s',V_k_0',B')] 
1*s(22)+3
  Such that:s(22) =< 1

##### Pending set eval_asctoeg_bb1_in(V_s,V_k_0,B)
* Psum in Loop 17: [it(17)=<1,s(24)=<V_s']
* Psum in Loop 18: [it(18)=<1,s(26)=<V_s,s(27)=<V_s']
* Psum in Loop 19: [it(19)=<1,s(30)=<1,s(29)=<V_s,s(31)=<V_s']
* Psum in Loop 20: [it(20)=<1]
* Psum in Loop 22: [it(22)=<1,s(32)=<1]

###### Computing sum for it(17)=<1  in Loop 17 
   - Applying inductive sum strategy 
     - head Candidate: V_k_0 
       - Loop 18 is collaborative and bounds [it(18)] 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative and bounds [it(20)] 
       - Loop 22 is collaborative and bounds [it(22)] 
     - head Candidate: V_k_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_k_0 
       - Loop 18 is collaborative and bounds [it(18)] 
       - Loop 19 is collaborative and bounds [it(19)] 
       - Loop 20 is collaborative and bounds [it(20)] 
       - Loop 22 is collaborative and bounds [it(22)] 
     - tail Candidate: V_k_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(17)+it(18)+it(19)+it(20)+it(22)=<V_k_0,it(17)+it(18)+it(19)+it(20)+it(22)=<V_k_0,it(17)+it(18)+it(19)+it(20)+it(22)=<V_k_0-V_k_0',it(17)+it(18)+it(19)+it(20)+it(22)=<V_k_0-V_k_0'] 

##### Pending set eval_asctoeg_0(V_s,B)
* Psum in Loop 17: [s(24)=<V_s']
* Psum in Loop 18: [it(18)=<1,s(26)=<V_s,s(27)=<V_s']
* Psum in Loop 19: [it(19)=<1,s(30)=<1,s(29)=<V_s,s(31)=<V_s']
* Psum in Loop 20: [it(20)=<1]
* Psum in Loop 22: [it(22)=<1,s(32)=<1]

###### Computing sum for s(24)=<V_s'  in Loop 17 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(6)=<V_s] 
 * Adding constraints: [s(24)=<it(17)*aux(6)] 

##### Pending set eval_asctoeg_bb1_in(V_s,V_k_0,B)
* Pmax/min: [aux(6)=<V_s]
* Psum in Loop 18: [it(18)=<1,s(26)=<V_s,s(27)=<V_s']
* Psum in Loop 19: [it(19)=<1,s(30)=<1,s(29)=<V_s,s(31)=<V_s']
* Psum in Loop 20: [it(20)=<1]
* Psum in Loop 22: [it(22)=<1,s(32)=<1]

###### Computing max_min for aux(6)=<V_s  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(6)=<V_s] 

##### Pending set eval_asctoeg_bb1_in(V_s,V_k_0,B)
* Psum in Loop 18: [it(18)=<1,s(26)=<V_s,s(27)=<V_s']
* Psum in Loop 19: [it(19)=<1,s(30)=<1,s(29)=<V_s,s(31)=<V_s']
* Psum in Loop 20: [it(20)=<1]
* Psum in Loop 22: [it(22)=<1,s(32)=<1]

###### Computing sum for it(18)=<1  in Loop 18 
   - Applying inductive sum strategy 
     - head Candidate: V_k_0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_k_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_k_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_k_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(17)+it(18)+it(19)+it(20)+it(22)=<V_k_0,it(17)+it(18)+it(19)+it(20)+it(22)=<V_k_0,it(17)+it(18)+it(19)+it(20)+it(22)=<V_k_0-V_k_0',it(17)+it(18)+it(19)+it(20)+it(22)=<V_k_0-V_k_0'] 

##### Pending set eval_asctoeg_bb1_in(V_s,V_k_0,B)
* Psum in Loop 18: [s(26)=<V_s,s(27)=<V_s']
* Psum in Loop 19: [it(19)=<1,s(30)=<1,s(29)=<V_s,s(31)=<V_s']
* Psum in Loop 20: [it(20)=<1]
* Psum in Loop 22: [it(22)=<1,s(32)=<1]

###### Computing sum for s(26)=<V_s  in Loop 18 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(7)=<V_s] 
 * Adding constraints: [s(26)=<it(18)*aux(7)] 

##### Pending set eval_asctoeg_bb1_in(V_s,V_k_0,B)
* Pmax/min: [aux(7)=<V_s]
* Psum in Loop 18: [s(27)=<V_s']
* Psum in Loop 19: [it(19)=<1,s(30)=<1,s(29)=<V_s,s(31)=<V_s']
* Psum in Loop 20: [it(20)=<1]
* Psum in Loop 22: [it(22)=<1,s(32)=<1]

###### Computing max_min for aux(7)=<V_s  
   - Found a solution using cacheing 
 * Adding constraints:[aux(7)=<aux(6)] 

##### Pending set eval_asctoeg_bb1_in(V_s,V_k_0,B)
* Psum in Loop 18: [s(27)=<V_s']
* Psum in Loop 19: [it(19)=<1,s(30)=<1,s(29)=<V_s,s(31)=<V_s']
* Psum in Loop 20: [it(20)=<1]
* Psum in Loop 22: [it(22)=<1,s(32)=<1]

###### Computing sum for s(27)=<V_s'  in Loop 18 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(8)=<V_s] 
 * Adding constraints: [s(27)=<it(18)*aux(8)] 

##### Pending set eval_asctoeg_bb1_in(V_s,V_k_0,B)
* Pmax/min: [aux(8)=<V_s]
* Psum in Loop 19: [it(19)=<1,s(30)=<1,s(29)=<V_s,s(31)=<V_s']
* Psum in Loop 20: [it(20)=<1]
* Psum in Loop 22: [it(22)=<1,s(32)=<1]

###### Computing max_min for aux(8)=<V_s  
   - Found a solution using cacheing 
 * Adding constraints:[aux(8)=<aux(6)] 

##### Pending set eval_asctoeg_bb1_in(V_s,V_k_0,B)
* Psum in Loop 19: [it(19)=<1,s(30)=<1,s(29)=<V_s,s(31)=<V_s']
* Psum in Loop 20: [it(20)=<1]
* Psum in Loop 22: [it(22)=<1,s(32)=<1]

###### Computing sum for it(19)=<1  in Loop 19 
   - Applying inductive sum strategy 
     - head Candidate: V_k_0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_k_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_k_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_k_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(17)+it(18)+it(19)+it(20)+it(22)=<V_k_0,it(17)+it(18)+it(19)+it(20)+it(22)=<V_k_0,it(17)+it(18)+it(19)+it(20)+it(22)=<V_k_0-V_k_0',it(17)+it(18)+it(19)+it(20)+it(22)=<V_k_0-V_k_0'] 

##### Pending set eval_asctoeg_bb1_in(V_s,V_k_0,B)
* Psum in Loop 19: [s(30)=<1,s(29)=<V_s,s(31)=<V_s']
* Psum in Loop 20: [it(20)=<1]
* Psum in Loop 22: [it(22)=<1,s(32)=<1]

###### Computing sum for s(30)=<1  in Loop 19 
   - Found a solution using cacheing 
 * Adding constraints: [s(30)=<aux(9),aux(9)+it(17)+it(18)+it(20)+it(22)=<V_k_0,aux(9)+it(17)+it(18)+it(20)+it(22)=<V_k_0,aux(9)+it(17)+it(18)+it(20)+it(22)=<V_k_0-V_k_0',aux(9)+it(17)+it(18)+it(20)+it(22)=<V_k_0-V_k_0'] 

##### Pending set eval_asctoeg_bb1_in(V_s,V_k_0,B)
* Psum in Loop 19: [s(29)=<V_s,s(31)=<V_s']
* Psum in Loop 20: [it(20)=<1]
* Psum in Loop 22: [it(22)=<1,s(32)=<1]

###### Computing sum for s(29)=<V_s  in Loop 19 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(10)=<V_s] 
 * Adding constraints: [s(29)=<it(19)*aux(10)] 

##### Pending set eval_asctoeg_bb1_in(V_s,V_k_0,B)
* Pmax/min: [aux(10)=<V_s]
* Psum in Loop 19: [s(31)=<V_s']
* Psum in Loop 20: [it(20)=<1]
* Psum in Loop 22: [it(22)=<1,s(32)=<1]

###### Computing max_min for aux(10)=<V_s  
   - Found a solution using cacheing 
 * Adding constraints:[aux(10)=<aux(6)] 

##### Pending set eval_asctoeg_bb1_in(V_s,V_k_0,B)
* Psum in Loop 19: [s(31)=<V_s']
* Psum in Loop 20: [it(20)=<1]
* Psum in Loop 22: [it(22)=<1,s(32)=<1]

###### Computing sum for s(31)=<V_s'  in Loop 19 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(11)=<V_s] 
 * Adding constraints: [s(31)=<it(19)*aux(11)] 

##### Pending set eval_asctoeg_bb1_in(V_s,V_k_0,B)
* Pmax/min: [aux(11)=<V_s]
* Psum in Loop 20: [it(20)=<1]
* Psum in Loop 22: [it(22)=<1,s(32)=<1]

###### Computing max_min for aux(11)=<V_s  
   - Found a solution using cacheing 
 * Adding constraints:[aux(11)=<aux(6)] 

##### Pending set eval_asctoeg_bb1_in(V_s,V_k_0,B)
* Psum in Loop 20: [it(20)=<1]
* Psum in Loop 22: [it(22)=<1,s(32)=<1]

###### Computing sum for it(20)=<1  in Loop 20 
   - Applying inductive sum strategy 
     - head Candidate: V_k_0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_k_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_k_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_k_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(17)+it(18)+it(19)+it(20)+it(22)=<V_k_0,it(17)+it(18)+it(19)+it(20)+it(22)=<V_k_0,it(17)+it(18)+it(19)+it(20)+it(22)=<V_k_0-V_k_0',it(17)+it(18)+it(19)+it(20)+it(22)=<V_k_0-V_k_0'] 

##### Pending set eval_asctoeg_bb1_in(V_s,V_k_0,B)
* Psum in Loop 22: [it(22)=<1,s(32)=<1]

###### Computing sum for it(22)=<1  in Loop 22 
   - Applying inductive sum strategy 
     - head Candidate: V_k_0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_k_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_k_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_k_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(17)+it(18)+it(19)+it(20)+it(22)=<V_k_0,it(17)+it(18)+it(19)+it(20)+it(22)=<V_k_0,it(17)+it(18)+it(19)+it(20)+it(22)=<V_k_0-V_k_0',it(17)+it(18)+it(19)+it(20)+it(22)=<V_k_0-V_k_0'] 

##### Pending set eval_asctoeg_bb1_in(V_s,V_k_0,B)
* Psum in Loop 22: [s(32)=<1]

###### Computing sum for s(32)=<1  in Loop 22 
   - Found a solution using cacheing 
 * Adding constraints: [s(32)=<aux(12),aux(12)+it(17)+it(18)+it(19)+it(20)=<V_k_0,aux(12)+it(17)+it(18)+it(19)+it(20)=<V_k_0,aux(12)+it(17)+it(18)+it(19)+it(20)=<V_k_0-V_k_0',aux(12)+it(17)+it(18)+it(19)+it(20)=<V_k_0-V_k_0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [17,18,19,20,22] 

#### Simplifying cost structure of phase [17,18,19,20,22] 
 * Joined equivalent variables [aux(7),aux(8),aux(10),aux(11)] into aux(7)
 * Joined equivalent variables [it(17),it(18),it(19),it(20),it(22)] into it(17)
 * Joined equivalent variables [aux(9),aux(12)] into aux(9)
 * Joined equivalent variables [s(27),s(31)] into s(27)
 * Joined equivalent variables [s(26),s(29)] into s(26)
 * Joined equivalent variables [s(30),s(32)] into s(30)
 * Joined equivalent variables [s(25),s(28)] into s(25)

#### Cost of phase [17,18,19,20,22]:eval_asctoeg_bb1_in(V_s,V_k_0,B) -> [eval_asctoeg_bb1_in(V_s',V_k_0',B')] 
15*it(17)+2*s(23)+6*s(25)+2*s(26)+2*s(30)+0
  Such that:aux(6) =< V_s
aux(13) =< V_k_0
aux(14) =< V_k_0-V_k_0'
aux(9) =< aux(13)
it(17) =< aux(13)
aux(9) =< aux(14)
it(17) =< aux(14)
aux(7) =< aux(6)
s(30) =< aux(9)
s(24) =< it(17)*aux(6)
s(27) =< it(17)*aux(7)
s(26) =< it(17)*aux(7)
s(25) =< s(27)
s(23) =< s(24)

#### Simplifying cost structure of chain [[17,18,19,20,22],23] 
 * Joined equivalent variables [aux(15),aux(13),aux(14)] into aux(15)
 * Joined equivalent variables [aux(15),aux(9)] into aux(15)
 * Joined equivalent variables [it(17),s(30)] into it(17)

#### Cost of chains of eval_asctoeg_bb1_in(V_s,V_k_0,B):
* Chain [[17,18,19,20,22],23]: 17*it(17)+2*s(23)+6*s(25)+2*s(26)+0
  Such that:aux(6) =< V_s
aux(15) =< V_k_0
it(17) =< aux(15)
aux(7) =< aux(6)
s(24) =< it(17)*aux(6)
s(27) =< it(17)*aux(7)
s(26) =< it(17)*aux(7)
s(25) =< s(27)
s(23) =< s(24)

  with precondition: [B=4,V_k_0>=1,V_s>=V_k_0] 

* Chain [23]: 0
  with precondition: [B=4,0>=V_k_0,V_s>=V_k_0] 


#### Simplifying cost structure of CE 28 
 * Renamed intermediate variables: 
[(eq(29,1),aux(6))>>s(33),(eq(29,1),aux(15))>>s(34),(eq(29,1),it(17))>>s(35),(eq(29,1),aux(7))>>s(36),(eq(29,1),s(24))>>s(37),(eq(29,1),s(27))>>s(38),(eq(29,1),s(26))>>s(39),(eq(29,1),s(25))>>s(40),(eq(29,1),s(23))>>s(41)]

#### Simplifying cost structure of CE 29 
 * Joined equivalent variables [aux(16),s(33),s(34)] into aux(16)

#### Cost of chains of eval_asctoeg_4(V_s,B):
* Chain [25]: 1
  with precondition: [0>=V_s] 

* Chain [24]: 17*s(35)+2*s(39)+6*s(40)+2*s(41)+1
  Such that:aux(16) =< V_s
s(35) =< aux(16)
s(36) =< aux(16)
s(37) =< s(35)*aux(16)
s(38) =< s(35)*s(36)
s(39) =< s(35)*s(36)
s(40) =< s(38)
s(41) =< s(37)

  with precondition: [V_s>=1] 


#### Simplifying cost structure of CE 30 
 * Renamed intermediate variables: 
[(eq(31,1),aux(16))>>s(42),(eq(31,1),s(35))>>s(43),(eq(31,1),s(36))>>s(44),(eq(31,1),s(37))>>s(45),(eq(31,1),s(38))>>s(46),(eq(31,1),s(39))>>s(47),(eq(31,1),s(40))>>s(48),(eq(31,1),s(41))>>s(49)]

#### Simplifying cost structure of CE 31 

#### Cost of chains of eval_asctoeg_start(V_s,B):
* Chain [27]: 1
  with precondition: [0>=V_s] 

* Chain [26]: 17*s(43)+2*s(47)+6*s(48)+2*s(49)+1
  Such that:s(42) =< V_s
s(43) =< s(42)
s(44) =< s(42)
s(45) =< s(43)*s(42)
s(46) =< s(43)*s(44)
s(47) =< s(43)*s(44)
s(48) =< s(46)
s(49) =< s(45)

  with precondition: [V_s>=1] 


Closed-form bounds of eval_asctoeg_start(V_s,B): 
-------------------------------------
* Chain [27] with precondition: [0>=V_s] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [26] with precondition: [V_s>=1] 
    - Upper bound: 17*V_s+1+10*V_s*V_s 
    - Complexity: n^2 

### Maximum cost of eval_asctoeg_start(V_s,B): nat(V_s)*10*nat(V_s)+nat(V_s)*17+1 
Asymptotic class: n^2 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 55 ms.
* Invariants computed in 76 ms.
   - Backward Invariants 37 ms.
   - Transitive Invariants 16 ms.
* Refinement performed in 138 ms.
* Termination proved in 15 ms.
* Upper bounds computed in 176 ms.
   - Equation cost structures 63 ms.
   - Phase cost structures 123 ms.
   - Chain cost structures 35 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 525 ms.


Warning: Ignored call to eval_xnu_stop/1 in equation loop_cont_eval_xnu_bb1_in/2 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_xnu_bb3_in/12]
1. recursive : [eval_xnu_12/6,eval_xnu_13/6,eval_xnu_14/7,eval_xnu_15/7,eval_xnu_18/7,eval_xnu_19/7,eval_xnu_bb1_in/5,loop_cont_eval_xnu_bb3_in/6]
2. non_recursive : [loop_cont_eval_xnu_bb1_in/2]
3. non_recursive : [eval_xnu_10/2]
4. non_recursive : [eval_xnu_9/2]
5. non_recursive : [eval_xnu_8/2]
6. non_recursive : [eval_xnu_7/2]
7. non_recursive : [eval_xnu_6/2]
8. non_recursive : [eval_xnu_5/2]
9. non_recursive : [eval_xnu_4/2]
10. non_recursive : [eval_xnu_3/2]
11. non_recursive : [eval_xnu_2/2]
12. non_recursive : [eval_xnu_1/2]
13. non_recursive : [eval_xnu_0/2]
14. non_recursive : [eval_xnu_bb0_in/2]
15. non_recursive : [eval_xnu_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_xnu_bb3_in/12
1. SCC is partially evaluated into eval_xnu_bb1_in/5
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is partially evaluated into eval_xnu_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_xnu_bb3_in/12 
* CE 11 is refined into CE [12] 
* CE 10 is refined into CE [13] 


#### Refined cost equations eval_xnu_bb3_in/12 
* CE 12: eval_xnu_bb3_in(A,B,C,D,E,F,G,H,A,E,E,E) = 0
     [G>=F,A>=E,G>=D,E=B+1,H=2] 
* CE 13: eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V__end_0,V_k_0,B,C,D,E,F) = 1+ eval_xnu_bb3_in(V_len,G,V_end_0,V_beg_0,V_1,V__end_0,H,I,C,D,E,F)
     [V__end_0>=V_k_0+1,V_len>=V_1,V_k_0>=V_beg_0,V_k_0+1=H,V_1=G+1,V_1=V_i_0+1,I=2,B=2] 

### Cost equations --> "Loop" of eval_xnu_bb3_in/12 
* CEs [13] --> Loop 9 
* CEs [12] --> Loop 10 

#### Loops of eval_xnu_bb3_in/12 
* Loop 9: eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V__end_0,V_k_0,B,C,D,E,F)->  eval_xnu_bb3_in(V_len,V_i_0',V_end_0,V_beg_0,V_1,V__end_0,V_k_0',B',C,D,E,F)
                  [V__end_0>=V_k_0+1,V_len>=V_1,V_k_0>=V_beg_0,V_k_0+1=V_k_0',V_1=V_i_0'+1,V_1=V_i_0+1,B'=2,B=2] 
* Loop 10: eval_xnu_bb3_in(A,B,C,D,E,F,G,H,A,E,E,E) [G>=F,A>=E,G>=D,E=B+1,H=2] 

### Ranking functions of CR eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V__end_0,V_k_0,B,C,D,E,F) 
* RF of phase [9]: [V__end_0-V_k_0]

#### Partial ranking functions of CR eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V__end_0,V_k_0,B,C,D,E,F) 
* Partial RF of phase [9]:
  - RF of loop [9:1]:
    V__end_0-V_k_0


### Resulting Chains:eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V__end_0,V_k_0,B,C,D,E,F) 
* [[9],10]
* [10]


### Merging Chains  eval_xnu_bb3_in/12 into  External patterns of execution 
* [[10]] --> 1 
* [[10,[9]]] --> 2 


### Specialization of cost equations eval_xnu_bb1_in/5 
* CE 9 is refined into CE [14] 
* CE 8 is refined into CE [15] 
* CE 5 is refined into CE [16] 
* CE 7 is refined into CE [17] 
* CE 3 is refined into CE [18,19] 
* CE 4 is refined into CE [20,21] 
* CE 6 is refined into CE [22] 


#### Refined cost equations eval_xnu_bb1_in/5 
* CE 14: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 0
     [V_i_0>=V_len,B=3] 
* CE 15: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 1+ eval_xnu_bb1_in(V_len,C,V_end_0,V_beg_0,D)
     [V_len>=V_i_0+1,V_i_0+1=C,D=3,B=3] 
* CE 16: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 1+ eval_xnu_bb1_in(V_len,C,C,C,D)
     [V_len>=C,C=V_i_0+1,D=3,B=3] 
* CE 17: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 1+ eval_xnu_bb1_in(V_len,C,C,V_beg_0,D)
     [V_len>=C,C=V_i_0+1,D=3,B=3] 
* CE 18: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,D,V_beg_0,E,V_len,D,D,D):1+ eval_xnu_bb1_in(V_len,D,D,D,F)
     [V_len>=D,V_beg_0>=D,D=C+1,D=V_i_0+1,F=3,E=2,B=3] 
* CE 19: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,D,V_beg_0,E,V_len,D,D,D):2+ eval_xnu_bb1_in(V_len,D,D,D,F)
     [V_len>=D,D>=V_beg_0+1,D=C+1,D=V_i_0+1,F=3,E=2,B=3] 
* CE 20: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,V_end_0,V_beg_0,E,V_len,D,D,D):1+ eval_xnu_bb1_in(V_len,D,D,D,F)
     [V_beg_0>=V_end_0,V_len>=D,D=C+1,D=V_i_0+1,F=3,E=2,B=3] 
* CE 21: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,V_end_0,V_beg_0,E,V_len,D,D,D):2+ eval_xnu_bb1_in(V_len,D,D,D,F)
     [V_len>=D,V_end_0>=V_beg_0+1,D=C+1,D=V_i_0+1,F=3,E=2,B=3] 
* CE 22: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 1+ eval_xnu_bb1_in(V_len,C,V_end_0,C,D)
     [V_len>=C,C=V_i_0+1,D=3,B=3] 

### Cost equations --> "Loop" of eval_xnu_bb1_in/5 
* CEs [15] --> Loop 11 
* CEs [19] --> Loop 12 
* CEs [21] --> Loop 13 
* CEs [16,18,20] --> Loop 14 
* CEs [17] --> Loop 15 
* CEs [22] --> Loop 16 
* CEs [14] --> Loop 17 

#### Loops of eval_xnu_bb1_in/5 
* Loop 11: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,V_i_0',V_end_0,V_beg_0,B')
                  [V_len>=V_i_0+1,V_i_0+1=V_i_0',B'=3,B=3] 
* Loop 12: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,V_i_0',V_end_0',V_beg_0',B')
                  [V_i_0>=V_beg_0,V_len>=V_i_0+1,V_i_0+1=V_beg_0',V_i_0+1=V_end_0',V_i_0+1=V_i_0',B'=3,B=3] 
* Loop 13: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,V_i_0',V_end_0',V_beg_0',B')
                  [V_end_0>=V_beg_0+1,V_len>=V_i_0+1,V_i_0+1=V_beg_0',V_i_0+1=V_end_0',V_i_0+1=V_i_0',B'=3,B=3] 
* Loop 14: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,V_i_0',V_end_0',V_beg_0',B')
                  [V_len>=V_i_0+1,V_i_0+1=V_beg_0',V_i_0+1=V_end_0',V_i_0+1=V_i_0',B'=3,B=3] 
* Loop 15: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,V_i_0',V_end_0',V_beg_0,B')
                  [V_len>=V_i_0+1,V_i_0+1=V_end_0',V_i_0+1=V_i_0',B'=3,B=3] 
* Loop 16: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,V_i_0',V_end_0,V_beg_0',B')
                  [V_len>=V_i_0+1,V_i_0+1=V_beg_0',V_i_0+1=V_i_0',B'=3,B=3] 
* Loop 17: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) [V_i_0>=V_len,B=3] 

### Ranking functions of CR eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) 
* RF of phase [11,12,13,14,15,16]: [V_len-V_i_0]

#### Partial ranking functions of CR eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) 
* Partial RF of phase [11,12,13,14,15,16]:
  - RF of loop [11:1,12:1,13:1,14:1,15:1,16:1]:
    V_len-V_i_0
  - RF of loop [13:1]:
    V_end_0-V_beg_0 depends on loops [12:1,14:1,15:1] 


### Resulting Chains:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) 
* [[11,12,13,14,15,16],17]
* [17]


### Merging Chains  eval_xnu_bb1_in/5 into  External patterns of execution 
* [[17]] --> 1 
* [[17,[11,12,13,14,15,16]]] --> 2 


### Specialization of cost equations eval_xnu_start/2 
* CE 2 is refined into CE [23,24] 


#### Refined cost equations eval_xnu_start/2 
* CE 23: eval_xnu_start(V_len,B) = 1+ eval_xnu_bb1_in(V_len,C,D,E,F):1
     [0>=V_len,F=3,E=0,D=0,C=0] 
* CE 24: eval_xnu_start(V_len,B) = 1+ eval_xnu_bb1_in(V_len,C,D,E,F):2
     [V_len>=1,F=3,E=0,D=0,C=0] 

### Cost equations --> "Loop" of eval_xnu_start/2 
* CEs [24] --> Loop 18 
* CEs [23] --> Loop 19 

#### Loops of eval_xnu_start/2 
* Loop 18: eval_xnu_start(V_len,B) [V_len>=1] 
* Loop 19: eval_xnu_start(V_len,B) [0>=V_len] 

### Ranking functions of CR eval_xnu_start(V_len,B) 

#### Partial ranking functions of CR eval_xnu_start(V_len,B) 


### Resulting Chains:eval_xnu_start(V_len,B) 
* [19]
* [18]


### Merging Chains  eval_xnu_start/2 into  External patterns of execution 
* [[19]] --> 1 
* [[18]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [9] 

 * loop 9:eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V__end_0,V_k_0,B,C,D,E,F) -> [eval_xnu_bb3_in(V_len',V_i_0',V_end_0',V_beg_0',V_1',V__end_0',V_k_0',B',C',D',E',F')] 
1
#### Cost of phase [9]:eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V__end_0,V_k_0,B,C,D,E,F) -> [eval_xnu_bb3_in(V_len',V_i_0',V_end_0',V_beg_0',V_1',V__end_0',V_k_0',B',C',D',E',F')] 
1* #(9)+0
  Such that:#(9) =< V__end_0-V_k_0
#(9) =< V__end_0-V_k_0-V__end_0'+V_k_0'

#### Cost of chains of eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V__end_0,V_k_0,B,C,D,E,F):
* Chain [[9],10]: 1*s(1)+0
  Such that:s(1) =< V__end_0-V_k_0

  with precondition: [B=2,V_i_0+1=V_1,V_len=C,V_i_0+1=D,V_i_0+1=E,V_i_0+1=F,V_len>=V_i_0+1,V_k_0>=V_beg_0,V__end_0>=V_k_0+1] 

* Chain [10]: 0
  with precondition: [B=2,V_i_0+1=V_1,V_beg_0=V_k_0,V_len=C,V_i_0+1=D,V_i_0+1=E,V_i_0+1=F,V_len>=V_i_0+1,V_beg_0>=V__end_0] 


#### Cost of loops [11,12,13,14,15,16] 

 * loop 11:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
1
 * loop 12:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
1*s(3)+2
  Such that:s(3) =< -V_beg_0+V_end_0'

 * loop 13:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
1*s(4)+2
  Such that:s(4) =< V_end_0-V_beg_0

 * loop 14:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
2
 * loop 15:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
1
 * loop 16:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
1
#### Cost of phase [11,12,13,14,15,16]:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
1* #(16)+1* #(15)+2* #(14)+2* #(13)+1*sm(13,4)+2* #(12)+1*sm(12,3)+1* #(11)+0
  Such that:s(7) =< V_len-1
#(11)+ #(12)+ #(13)+ #(14)+ #(15)+ #(16) =< V_len-V_i_0
#(11)+ #(12)+ #(13)+ #(14)+ #(15)+ #(16) =< V_len-V_i_0-V_len'+V_i_0'
s(8) =< V_len+V_i_0-V_end_0-V_beg_0
s(9) =< V_len+V_i_0-V_end_0-V_beg_0-V_len'-V_i_0'+V_end_0'+V_beg_0'
s(10) =< V_i_0-V_beg_0
s(11) =< V_i_0-V_beg_0+1
s(12) =< V_i_0-V_beg_0-V_i_0'+V_beg_0'
s(13) =< V_end_0-V_beg_0-V_end_0'+V_beg_0'
s(14) =< V_end_0-V_beg_0
s(15) =< s(7)+1
s(16) =< s(7)
s(17) =< s(11)+ #(11)+ #(15)
s(18) =< #(15)*s(15)
s(19) =< #(14)*s(16)
s(20) =< #(14)*s(16)
s(21) =< #(12)*s(16)
sm(13,4) =< #(15)+ #(11)+s(10)
sm(13,4) =< #(15)+ #(11)+s(12)
s(22) =< #(12)*s(7)
#(13)+ #(16) =< s(18)+s(20)+s(22)+s(13)
#(13) =< s(18)+s(20)+s(22)+s(14)
#(13)+ #(14)+sm(12,3) =< #(11)+s(8)
#(13)+ #(14)+sm(12,3) =< #(11)+s(9)
sm(12,3) =< #(12)*s(17)
s(23) =< s(14)+s(21)+s(19)+s(18)
sm(13,4) =< #(13)*s(23)

#### Cost of chains of eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B):
* Chain [[11,12,13,14,15,16],17]: 1*s(25)+1*s(26)+2*s(27)+2*s(28)+1*s(42)+2*s(29)+1*s(44)+1*s(30)+0
  Such that:s(24) =< V_len-1
s(25)+s(26)+s(27)+s(28)+s(29)+s(30) =< V_len-V_i_0
s(31) =< V_len+V_end_0-V_beg_0
s(32) =< V_i_0-V_beg_0+1
s(33) =< V_end_0-V_beg_0
s(34) =< V_len+V_i_0-V_end_0-V_beg_0
s(35) =< V_i_0-V_beg_0
s(36) =< s(24)+1
s(37) =< s(24)
s(38) =< s(32)+s(30)+s(26)
s(39) =< s(26)*s(36)
s(40) =< s(27)*s(37)
s(41) =< s(29)*s(37)
s(42) =< s(26)+s(30)+s(35)
s(43) =< s(29)*s(24)
s(28)+s(25) =< s(39)+s(40)+s(43)+s(31)
s(28) =< s(39)+s(40)+s(43)+s(33)
s(28)+s(27)+s(44) =< s(30)+s(34)
s(44) =< s(29)*s(38)
s(45) =< s(33)+s(41)+s(40)+s(39)
s(42) =< s(28)*s(45)

  with precondition: [B=3,V_end_0>=0,V_beg_0>=0,V_len>=V_i_0+1,V_i_0>=V_end_0,V_i_0>=V_beg_0] 

* Chain [17]: 0
  with precondition: [V_i_0=0,V_end_0=0,V_beg_0=0,B=3,0>=V_len] 


#### Cost of chains of eval_xnu_start(V_len,B):
* Chain [19]: 1
  with precondition: [0>=V_len] 

* Chain [18]: 1*s(91)+1*s(90)+2*s(89)+2*s(88)+1*s(98)+2*s(87)+1*s(100)+1*s(86)+1
  Such that:s(83) =< 1
s(84) =< V_len-1
s(85) =< V_len
s(86)+s(87)+s(88)+s(89)+s(90)+s(91) =< s(85)
s(92) =< s(84)+1
s(93) =< s(84)
s(94) =< s(83)+s(86)+s(90)
s(95) =< s(90)*s(92)
s(96) =< s(89)*s(93)
s(97) =< s(87)*s(93)
s(98) =< s(90)+s(86)
s(99) =< s(87)*s(84)
s(88)+s(91) =< s(95)+s(96)+s(99)+s(85)
s(88) =< s(95)+s(96)+s(99)
s(88)+s(89)+s(100) =< s(86)+s(85)
s(100) =< s(87)*s(94)
s(101) =< s(97)+s(96)+s(95)
s(98) =< s(88)*s(101)

  with precondition: [V_len>=1] 


Closed-form bounds of eval_xnu_start(V_len,B): 
-------------------------------------
* Chain [19] with precondition: [0>=V_len] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [18] with precondition: [V_len>=1] 
    - Upper bound: 13*V_len+1 
    - Complexity: n 

### Maximum cost of eval_xnu_start(V_len,B): nat(V_len)*13+1 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 135 ms.
* Invariants computed in 141 ms.
   - Backward Invariants 55 ms.
   - Transitive Invariants 34 ms.
* Refinement performed in 228 ms.
* Termination proved in 58 ms.
* Upper bounds computed in 437 ms.
   - Equation cost structures 95 ms.
   - Phase cost structures 310 ms.
   - Chain cost structures 68 ms.
   - Solving cost expressions 11 ms.
* Total analysis performed in 1110 ms.


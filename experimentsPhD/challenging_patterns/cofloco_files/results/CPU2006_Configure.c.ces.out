Warning: Ignored call to eval_Configure_stop/1 in equation eval_Configure_bb11_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_Configure_15/14,eval_Configure_16/15,eval_Configure_bb7_in/14,eval_Configure_bb8_in/14,eval_Configure_bb9_in/15]
1. recursive : [eval_Configure__critedge_in/10,eval_Configure_bb10_in/10]
2. recursive : [eval_Configure_11/4,eval_Configure_12/5,eval_Configure_7/3,eval_Configure_8/4,eval_Configure_bb2_in/3,eval_Configure_bb3_in/3,eval_Configure_bb4_in/4,eval_Configure_bb5_in/4,eval_Configure_bb6_in/5,loop_cont_eval_Configure__critedge_in/4,loop_cont_eval_Configure_bb7_in/9]
3. non_recursive : [eval_Configure_bb11_in/1]
4. non_recursive : [loop_cont_eval_Configure_bb2_in/2]
5. non_recursive : [eval_Configure_5/3]
6. non_recursive : [eval_Configure_4/3]
7. non_recursive : [eval_Configure_3/2]
8. non_recursive : [eval_Configure_bb1_in/2]
9. non_recursive : [eval_Configure_2/2]
10. non_recursive : [eval_Configure_1/2]
11. non_recursive : [eval_Configure_0/2]
12. non_recursive : [eval_Configure_bb0_in/2]
13. non_recursive : [eval_Configure_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_Configure_bb7_in/14
1. SCC is partially evaluated into eval_Configure__critedge_in/10
2. SCC is partially evaluated into eval_Configure_bb2_in/3
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_Configure_5/3
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into eval_Configure_2/2
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is partially evaluated into eval_Configure_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_Configure_bb7_in/14 
* CE 13 is refined into CE [18] 
* CE 15 is refined into CE [19] 
* CE 14 is refined into CE [20] 


#### Refined cost equations eval_Configure_bb7_in/14 
* CE 18: eval_Configure_bb7_in(A,B,C,D,E,F,G,A,H,I,D,E,F,E) = 0
     [A>=F+1,F>=E,E=H+1,E=B+1,I=0,G=2,C=0] 
* CE 19: eval_Configure_bb7_in(A,B,C,D,E,A,F,A,G,H,D,E,A,E) = 0
     [A>=E,E=G+1,E=B+1,H=0,F=2,C=0] 
* CE 20: eval_Configure_bb7_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,B,C,D,E,F,G,H,I) = 1+ eval_Configure_bb7_in(V_ac,J,K,V_7,V_9,L,M,C,D,E,F,G,H,I)
     [V_ac>=V_NumberParams_0+1,V_NumberParams_0>=V_9,V_NumberParams_0+1=L,V_9=J+1,V_9=V_CLcount_2+1,M=2,K=0,B=2,V_4=0] 

### Cost equations --> "Loop" of eval_Configure_bb7_in/14 
* CEs [20] --> Loop 15 
* CEs [18] --> Loop 16 
* CEs [19] --> Loop 17 

#### Loops of eval_Configure_bb7_in/14 
* Loop 15: eval_Configure_bb7_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,B,C,D,E,F,G,H,I)->  eval_Configure_bb7_in(V_ac,V_CLcount_2',V_4',V_7,V_9,V_NumberParams_0',B',C,D,E,F,G,H,I)
                  [V_ac>=V_NumberParams_0+1,V_NumberParams_0>=V_9,V_NumberParams_0+1=V_NumberParams_0',V_9=V_CLcount_2'+1,V_9=V_CLcount_2+1,B'=2,V_4'=0,B=2,V_4=0] 
* Loop 16: eval_Configure_bb7_in(A,B,C,D,E,F,G,A,B,H,D,I,F,J) [A>=F+1,F>=B+1,B+1=J,B+1=I,B+1=E,H=0,G=2,C=0] 
* Loop 17: eval_Configure_bb7_in(A,B,C,D,E,A,F,A,B,G,D,H,A,I) [A>=B+1,B+1=I,B+1=H,B+1=E,G=0,F=2,C=0] 

### Ranking functions of CR eval_Configure_bb7_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,B,C,D,E,F,G,H,I) 
* RF of phase [15]: [V_ac-V_NumberParams_0]

#### Partial ranking functions of CR eval_Configure_bb7_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,B,C,D,E,F,G,H,I) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    V_ac-V_NumberParams_0

Discarded unfeasible chain [[15]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_Configure_bb7_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,B,C,D,E,F,G,H,I) 
* [[15],17]
* [[15],16]
* [17]
* [16]


### Merging Chains  eval_Configure_bb7_in/14 into  External patterns of execution 
* [[17]] --> 1 
* [[16]] --> 2 
* [[17,[15]]] --> 3 
* [[16,[15]]] --> 4 


### Specialization of cost equations eval_Configure__critedge_in/10 
* CE 17 is refined into CE [21] 
* CE 16 is refined into CE [22] 


#### Refined cost equations eval_Configure__critedge_in/10 
* CE 21: eval_Configure__critedge_in(A,B,C,D,E,F,G,H,A,G) = 0
     [G>=F,H=3] 
* CE 22: eval_Configure__critedge_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,V_CLcount_3,B,C,D) = 1+ eval_Configure__critedge_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,E,F,C,D)
     [V_NumberParams_0>=V_CLcount_3+1,V_CLcount_3+1=E,F=3,B=3] 

### Cost equations --> "Loop" of eval_Configure__critedge_in/10 
* CEs [22] --> Loop 18 
* CEs [21] --> Loop 19 

#### Loops of eval_Configure__critedge_in/10 
* Loop 18: eval_Configure__critedge_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,V_CLcount_3,B,C,D)->  eval_Configure__critedge_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,V_CLcount_3',B',C,D)
                  [V_NumberParams_0>=V_CLcount_3+1,V_CLcount_3+1=V_CLcount_3',B'=3,B=3] 
* Loop 19: eval_Configure__critedge_in(A,B,C,D,E,F,G,H,A,G) [G>=F,H=3] 

### Ranking functions of CR eval_Configure__critedge_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,V_CLcount_3,B,C,D) 
* RF of phase [18]: [V_NumberParams_0-V_CLcount_3]

#### Partial ranking functions of CR eval_Configure__critedge_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,V_CLcount_3,B,C,D) 
* Partial RF of phase [18]:
  - RF of loop [18:1]:
    V_NumberParams_0-V_CLcount_3

Discarded unfeasible chain [[18]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_Configure__critedge_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,V_CLcount_3,B,C,D) 
* [[18],19]
* [19]


### Merging Chains  eval_Configure__critedge_in/10 into  External patterns of execution 
* [[19]] --> 1 
* [[19,[18]]] --> 2 


### Specialization of cost equations eval_Configure_bb2_in/3 
* CE 11 is refined into CE [23] 
* CE 12 is refined into CE [24] 
* CE 8 is refined into CE [25] 
* CE 9 is refined into CE [26,27,28,29] 
* CE 10 is refined into CE [30,31,32,33] 


#### Refined cost equations eval_Configure_bb2_in/3 
* CE 23: eval_Configure_bb2_in(V_ac,V_CLcount_2,B) = 0
     [V_ac>=V_CLcount_2+1,B=4] 
* CE 24: eval_Configure_bb2_in(V_ac,V_CLcount_2,B) = 0
     [V_CLcount_2>=V_ac,B=4] 
* CE 25: eval_Configure_bb2_in(V_ac,V_CLcount_2,B) = 1+ eval_Configure_bb2_in(V_ac,C,D)
     [V_ac>=V_CLcount_2+1,V_CLcount_2+2=C,D=4,B=4] 
* CE 26: eval_Configure_bb2_in(V_ac,V_CLcount_2,B) = 3+ eval_Configure_bb7_in(V_ac,C,D,E,V_ac,V_ac,F,V_ac,G,H,E,V_ac,V_ac,V_ac):1+ eval_Configure__critedge_in(V_ac,I,J,E,V_ac,V_ac,V_ac,K,V_ac,V_ac):1+ eval_Configure_bb2_in(V_ac,V_ac,L)
     [E>=1,V_ac=I+1,V_ac=G+1,V_ac=C+1,V_ac=V_CLcount_2+1,L=4,K=3,J=0,H=0,F=2,D=0,B=4] 
* CE 27: eval_Configure_bb2_in(V_ac,V_CLcount_2,B) = 3+ eval_Configure_bb7_in(V_ac,C,D,E,F,F,G,V_ac,H,I,E,F,F,F):2+ eval_Configure__critedge_in(V_ac,J,K,E,F,F,F,L,V_ac,F):1+ eval_Configure_bb2_in(V_ac,F,M)
     [V_ac>=F+1,E>=1,F=J+1,F=H+1,F=C+1,F=V_CLcount_2+1,M=4,L=3,K=0,I=0,G=2,D=0,B=4] 
* CE 28: eval_Configure_bb2_in(V_ac,V_CLcount_2,B) = 3+ eval_Configure_bb7_in(V_ac,C,D,E,F,F,G,V_ac,H,I,E,F,V_ac,F):3+ eval_Configure__critedge_in(V_ac,J,K,E,F,V_ac,F,L,V_ac,V_ac):2+ eval_Configure_bb2_in(V_ac,V_ac,M)
     [V_ac>=F+1,E>=1,F=J+1,F=H+1,F=C+1,F=V_CLcount_2+1,M=4,L=3,K=0,I=0,G=2,D=0,B=4] 
* CE 29: eval_Configure_bb2_in(V_ac,V_CLcount_2,B) = 3+ eval_Configure_bb7_in(V_ac,C,D,E,F,F,G,V_ac,H,I,E,F,J,F):4+ eval_Configure__critedge_in(V_ac,K,L,E,F,J,F,M,V_ac,J):2+ eval_Configure_bb2_in(V_ac,J,N)
     [V_ac>=J+1,J>=F+1,E>=1,F=K+1,F=H+1,F=C+1,F=V_CLcount_2+1,N=4,M=3,L=0,I=0,G=2,D=0,B=4] 
* CE 30: eval_Configure_bb2_in(V_ac,V_CLcount_2,B) = 3+ eval_Configure_bb7_in(V_ac,C,D,E,V_ac,V_ac,F,V_ac,G,H,E,V_ac,V_ac,V_ac):1+ eval_Configure__critedge_in(V_ac,I,J,E,V_ac,V_ac,V_ac,K,V_ac,V_ac):1+ eval_Configure_bb2_in(V_ac,V_ac,L)
     [0>=E+1,V_ac=I+1,V_ac=G+1,V_ac=C+1,V_ac=V_CLcount_2+1,L=4,K=3,J=0,H=0,F=2,D=0,B=4] 
* CE 31: eval_Configure_bb2_in(V_ac,V_CLcount_2,B) = 3+ eval_Configure_bb7_in(V_ac,C,D,E,F,F,G,V_ac,H,I,E,F,F,F):2+ eval_Configure__critedge_in(V_ac,J,K,E,F,F,F,L,V_ac,F):1+ eval_Configure_bb2_in(V_ac,F,M)
     [V_ac>=F+1,0>=E+1,F=J+1,F=H+1,F=C+1,F=V_CLcount_2+1,M=4,L=3,K=0,I=0,G=2,D=0,B=4] 
* CE 32: eval_Configure_bb2_in(V_ac,V_CLcount_2,B) = 3+ eval_Configure_bb7_in(V_ac,C,D,E,F,F,G,V_ac,H,I,E,F,V_ac,F):3+ eval_Configure__critedge_in(V_ac,J,K,E,F,V_ac,F,L,V_ac,V_ac):2+ eval_Configure_bb2_in(V_ac,V_ac,M)
     [V_ac>=F+1,0>=E+1,F=J+1,F=H+1,F=C+1,F=V_CLcount_2+1,M=4,L=3,K=0,I=0,G=2,D=0,B=4] 
* CE 33: eval_Configure_bb2_in(V_ac,V_CLcount_2,B) = 3+ eval_Configure_bb7_in(V_ac,C,D,E,F,F,G,V_ac,H,I,E,F,J,F):4+ eval_Configure__critedge_in(V_ac,K,L,E,F,J,F,M,V_ac,J):2+ eval_Configure_bb2_in(V_ac,J,N)
     [V_ac>=J+1,J>=F+1,0>=E+1,F=K+1,F=H+1,F=C+1,F=V_CLcount_2+1,N=4,M=3,L=0,I=0,G=2,D=0,B=4] 

### Cost equations --> "Loop" of eval_Configure_bb2_in/3 
* CEs [29,33] --> Loop 20 
* CEs [27,31] --> Loop 21 
* CEs [25] --> Loop 22 
* CEs [28,32] --> Loop 23 
* CEs [26,30] --> Loop 24 
* CEs [23] --> Loop 25 
* CEs [24] --> Loop 26 

#### Loops of eval_Configure_bb2_in/3 
* Loop 20: eval_Configure_bb2_in(V_ac,V_CLcount_2,B)->  eval_Configure_bb2_in(V_ac,V_CLcount_2',B')
                  [V_ac>=V_CLcount_2'+1,V_CLcount_2'>=V_CLcount_2+2,B'=4,B=4] 
* Loop 21: eval_Configure_bb2_in(V_ac,V_CLcount_2,B)->  eval_Configure_bb2_in(V_ac,V_CLcount_2',B')
                  [V_ac>=V_CLcount_2+2,V_CLcount_2+1=V_CLcount_2',B'=4,B=4] 
* Loop 22: eval_Configure_bb2_in(V_ac,V_CLcount_2,B)->  eval_Configure_bb2_in(V_ac,V_CLcount_2',B')
                  [V_ac>=V_CLcount_2+1,V_CLcount_2+2=V_CLcount_2',B'=4,B=4] 
* Loop 23: eval_Configure_bb2_in(V_ac,V_CLcount_2,B)->  eval_Configure_bb2_in(V_ac,V_ac,A')
                  [V_ac>=V_CLcount_2+2,A'=4,B=4] 
* Loop 24: eval_Configure_bb2_in(V_ac,V_CLcount_2,B)->  eval_Configure_bb2_in(V_ac,V_ac,A')
                  [V_ac=V_CLcount_2+1,A'=4,B=4] 
* Loop 25: eval_Configure_bb2_in(V_ac,V_CLcount_2,B) [V_ac>=V_CLcount_2+1,B=4] 
* Loop 26: eval_Configure_bb2_in(V_ac,V_CLcount_2,B) [V_CLcount_2>=V_ac,B=4] 

### Ranking functions of CR eval_Configure_bb2_in(V_ac,V_CLcount_2,B) 
* RF of phase [20,21,22]: [V_ac-V_CLcount_2]

#### Partial ranking functions of CR eval_Configure_bb2_in(V_ac,V_CLcount_2,B) 
* Partial RF of phase [20,21,22]:
  - RF of loop [20:1]:
    V_ac/2-V_CLcount_2/2-1
  - RF of loop [21:1]:
    V_ac-V_CLcount_2-1
  - RF of loop [22:1]:
    V_ac/2-V_CLcount_2/2

Discarded unfeasible chain [[20,21,22]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_Configure_bb2_in(V_ac,V_CLcount_2,B) 
* [[20,21,22],26]
* [[20,21,22],25]
* [[20,21,22],24,26]
* [[20,21,22],23,26]
* [26]
* [25]
* [24,26]
* [23,26]


### Merging Chains  eval_Configure_bb2_in/3 into  External patterns of execution 
* [[26,23],[26,24],[25],[26,23,[20,21,22]],[26,24,[20,21,22]],[25,[20,21,22]],[26,[20,21,22]]] --> 1 
* [[26]] --> 2 


### Specialization of cost equations eval_Configure_5/3 
* CE 6 is refined into CE [34,35] 
* CE 5 is refined into CE [36,37] 
* CE 7 is refined into CE [38] 


#### Refined cost equations eval_Configure_5/3 
* CE 34: eval_Configure_5(V_ac,V_1,B) = 1+ eval_Configure_bb2_in(V_ac,C,D):1
     [V_ac>=4,V_1>=1,D=4,C=3] 
* CE 35: eval_Configure_5(V_ac,V_1,B) = 1+ eval_Configure_bb2_in(C,D,E):2
     [V_1>=1,E=4,D=3,C=3,V_ac=3] 
* CE 36: eval_Configure_5(V_ac,V_1,B) = 1+ eval_Configure_bb2_in(V_ac,C,D):1
     [V_ac>=4,0>=V_1+1,D=4,C=3] 
* CE 37: eval_Configure_5(V_ac,V_1,B) = 1+ eval_Configure_bb2_in(C,D,E):2
     [0>=V_1+1,E=4,D=3,C=3,V_ac=3] 
* CE 38: eval_Configure_5(V_ac,V_1,B) = 1+ eval_Configure_bb2_in(V_ac,C,D):1
     [V_ac>=3,D=4,C=1,V_1=0] 

### Cost equations --> "Loop" of eval_Configure_5/3 
* CEs [34] --> Loop 27 
* CEs [36] --> Loop 28 
* CEs [38] --> Loop 29 
* CEs [35] --> Loop 30 
* CEs [37] --> Loop 31 

#### Loops of eval_Configure_5/3 
* Loop 27: eval_Configure_5(V_ac,V_1,B) [V_1>=1,V_ac>=4] 
* Loop 28: eval_Configure_5(V_ac,V_1,B) [V_ac>=4,0>=V_1+1] 
* Loop 29: eval_Configure_5(V_ac,V_1,B) [V_ac>=3,V_1=0] 
* Loop 30: eval_Configure_5(V_ac,V_1,B) [V_1>=1,V_ac=3] 
* Loop 31: eval_Configure_5(V_ac,V_1,B) [0>=V_1+1,V_ac=3] 

### Ranking functions of CR eval_Configure_5(V_ac,V_1,B) 

#### Partial ranking functions of CR eval_Configure_5(V_ac,V_1,B) 


### Resulting Chains:eval_Configure_5(V_ac,V_1,B) 
* [31]
* [30]
* [29]
* [28]
* [27]


### Merging Chains  eval_Configure_5/3 into  External patterns of execution 
* [[31]] --> 1 
* [[30]] --> 2 
* [[29]] --> 3 
* [[28]] --> 4 
* [[27]] --> 5 


### Specialization of cost equations eval_Configure_2/2 
* CE 3 is refined into CE [39,40,41,42,43] 
* CE 4 is refined into CE [44,45] 


#### Refined cost equations eval_Configure_2/2 
* CE 39: eval_Configure_2(V_ac,B) = 0+ eval_Configure_5(C,D,B):1
     [0>=D+1,C=3,V_ac=3] 
* CE 40: eval_Configure_2(V_ac,B) = 0+ eval_Configure_5(C,D,B):2
     [D>=1,C=3,V_ac=3] 
* CE 41: eval_Configure_2(V_ac,B) = 0+ eval_Configure_5(V_ac,C,B):3
     [V_ac>=3,C=0] 
* CE 42: eval_Configure_2(V_ac,B) = 0+ eval_Configure_5(V_ac,C,B):4
     [V_ac>=4,0>=C+1] 
* CE 43: eval_Configure_2(V_ac,B) = 0+ eval_Configure_5(V_ac,C,B):5
     [C>=1,V_ac>=4] 
* CE 44: eval_Configure_2(V_ac,B) = 1+ eval_Configure_bb2_in(C,D,E):1
     [E=4,D=1,C=2,V_ac=2] 
* CE 45: eval_Configure_2(V_ac,B) = 1+ eval_Configure_bb2_in(V_ac,C,D):2
     [1>=V_ac,D=4,C=1] 

### Cost equations --> "Loop" of eval_Configure_2/2 
* CEs [45] --> Loop 32 
* CEs [39,40,41,42,43] --> Loop 33 
* CEs [44] --> Loop 34 

#### Loops of eval_Configure_2/2 
* Loop 32: eval_Configure_2(V_ac,B) [1>=V_ac] 
* Loop 33: eval_Configure_2(V_ac,B) [V_ac>=3] 
* Loop 34: eval_Configure_2(V_ac,B) [V_ac=2] 

### Ranking functions of CR eval_Configure_2(V_ac,B) 

#### Partial ranking functions of CR eval_Configure_2(V_ac,B) 


### Resulting Chains:eval_Configure_2(V_ac,B) 
* [34]
* [33]
* [32]


### Merging Chains  eval_Configure_2/2 into  External patterns of execution 
* [[34]] --> 1 
* [[32]] --> 2 
* [[33]] --> 3 


### Specialization of cost equations eval_Configure_start/2 
* CE 2 is refined into CE [46,47,48] 


#### Refined cost equations eval_Configure_start/2 
* CE 46: eval_Configure_start(V_ac,B) = 0+ eval_Configure_2(C,B):1
     [C=2,V_ac=2] 
* CE 47: eval_Configure_start(V_ac,B) = 0+ eval_Configure_2(V_ac,B):2
     [1>=V_ac] 
* CE 48: eval_Configure_start(V_ac,B) = 0+ eval_Configure_2(V_ac,B):3
     [V_ac>=3] 

### Cost equations --> "Loop" of eval_Configure_start/2 
* CEs [48] --> Loop 35 
* CEs [47] --> Loop 36 
* CEs [46] --> Loop 37 

#### Loops of eval_Configure_start/2 
* Loop 35: eval_Configure_start(V_ac,B) [V_ac>=3] 
* Loop 36: eval_Configure_start(V_ac,B) [1>=V_ac] 
* Loop 37: eval_Configure_start(V_ac,B) [V_ac=2] 

### Ranking functions of CR eval_Configure_start(V_ac,B) 

#### Partial ranking functions of CR eval_Configure_start(V_ac,B) 


### Resulting Chains:eval_Configure_start(V_ac,B) 
* [37]
* [36]
* [35]


### Merging Chains  eval_Configure_start/2 into  External patterns of execution 
* [[37]] --> 1 
* [[36]] --> 2 
* [[35]] --> 3 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 19 

#### Computing cost of phase [15] 

#### Simplifying cost structure of CE 20 

#### Cost of loops [15] 

 * loop 15:eval_Configure_bb7_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,B,C,D,E,F,G,H,I) -> [eval_Configure_bb7_in(V_ac',V_CLcount_2',V_4',V_7',V_9',V_NumberParams_0',B',C',D',E',F',G',H',I')] 
1
##### Pending set eval_Configure_bb7_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,B,C,D,E,F,G,H,I)
* Psum in Loop 15: [it(15)=<1]

###### Computing sum for it(15)=<1  in Loop 15 
   - Applying inductive sum strategy 
     - head Candidate: V_ac-V_NumberParams_0 
     - head Candidate: V_ac-V_NumberParams_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_ac-V_NumberParams_0 
     - tail Candidate: V_ac-V_NumberParams_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(15)=<V_ac-V_NumberParams_0,it(15)=<V_ac-V_NumberParams_0,it(15)=<V_ac-V_NumberParams_0-V_ac'+V_NumberParams_0',it(15)=<V_ac-V_NumberParams_0-V_ac'+V_NumberParams_0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [15] 

#### Simplifying cost structure of phase [15] 

#### Cost of phase [15]:eval_Configure_bb7_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,B,C,D,E,F,G,H,I) -> [eval_Configure_bb7_in(V_ac',V_CLcount_2',V_4',V_7',V_9',V_NumberParams_0',B',C',D',E',F',G',H',I')] 
1*it(15)+0
  Such that:it(15) =< V_ac-V_NumberParams_0
it(15) =< V_ac-V_NumberParams_0-V_ac'+V_NumberParams_0'

#### Simplifying cost structure of chain [[15],17] 

#### Simplifying cost structure of CE 18 

#### Found solution for phase  [15] in the cache 

#### Cost of phase [15]:eval_Configure_bb7_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,B,C,D,E,F,G,H,I) -> [eval_Configure_bb7_in(V_ac',V_CLcount_2',V_4',V_7',V_9',V_NumberParams_0',B',C',D',E',F',G',H',I')] 
1*it(15)+0
  Such that:it(15) =< V_ac-V_NumberParams_0
it(15) =< V_ac-V_NumberParams_0-V_ac'+V_NumberParams_0'

#### Simplifying cost structure of chain [[15],16] 

#### Cost of chains of eval_Configure_bb7_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,B,C,D,E,F,G,H,I):
* Chain [[15],17]: 1*it(15)+0
  Such that:it(15) =< V_ac-V_NumberParams_0

  with precondition: [V_4=0,B=2,E=0,V_CLcount_2+1=V_9,V_ac=C,V_CLcount_2=D,V_7=F,V_CLcount_2+1=G,V_ac=H,V_CLcount_2+1=I,V_NumberParams_0>=V_CLcount_2+1,V_ac>=V_NumberParams_0+1] 

* Chain [[15],16]: 1*it(15)+0
  Such that:it(15) =< -V_NumberParams_0+H

  with precondition: [V_4=0,B=2,E=0,V_CLcount_2+1=V_9,V_ac=C,V_CLcount_2=D,V_7=F,V_CLcount_2+1=G,V_CLcount_2+1=I,V_NumberParams_0>=V_CLcount_2+1,H>=V_NumberParams_0+1,V_ac>=H+1] 

* Chain [17]: 0
  with precondition: [V_4=0,B=2,E=0,V_NumberParams_0=V_ac,V_9=V_CLcount_2+1,F=V_7,V_NumberParams_0=C,V_9=D+1,V_9=G,V_NumberParams_0=H,V_9=I,V_NumberParams_0>=V_9] 

* Chain [16]: 0
  with precondition: [V_4=0,B=2,E=0,V_9=V_CLcount_2+1,F=V_7,V_ac=C,V_9=D+1,V_9=G,V_NumberParams_0=H,V_9=I,V_NumberParams_0>=V_9,V_ac>=V_NumberParams_0+1] 


#### Simplifying cost structure of CE 21 

#### Computing cost of phase [18] 

#### Simplifying cost structure of CE 22 

#### Cost of loops [18] 

 * loop 18:eval_Configure__critedge_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,V_CLcount_3,B,C,D) -> [eval_Configure__critedge_in(V_ac',V_CLcount_2',V_4',V_7',V_9',V_NumberParams_0',V_CLcount_3',B',C',D')] 
1
##### Pending set eval_Configure__critedge_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,V_CLcount_3,B,C,D)
* Psum in Loop 18: [it(18)=<1]

###### Computing sum for it(18)=<1  in Loop 18 
   - Applying inductive sum strategy 
     - head Candidate: V_NumberParams_0-V_CLcount_3 
     - head Candidate: V_NumberParams_0-V_CLcount_3 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_NumberParams_0-V_CLcount_3 
     - tail Candidate: V_NumberParams_0-V_CLcount_3 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(18)=<V_NumberParams_0-V_CLcount_3,it(18)=<V_NumberParams_0-V_CLcount_3,it(18)=<V_NumberParams_0-V_CLcount_3-V_NumberParams_0'+V_CLcount_3',it(18)=<V_NumberParams_0-V_CLcount_3-V_NumberParams_0'+V_CLcount_3'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [18] 

#### Simplifying cost structure of phase [18] 

#### Cost of phase [18]:eval_Configure__critedge_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,V_CLcount_3,B,C,D) -> [eval_Configure__critedge_in(V_ac',V_CLcount_2',V_4',V_7',V_9',V_NumberParams_0',V_CLcount_3',B',C',D')] 
1*it(18)+0
  Such that:it(18) =< V_NumberParams_0-V_CLcount_3
it(18) =< V_NumberParams_0-V_CLcount_3-V_NumberParams_0'+V_CLcount_3'

#### Simplifying cost structure of chain [[18],19] 

#### Cost of chains of eval_Configure__critedge_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,V_CLcount_3,B,C,D):
* Chain [[18],19]: 1*it(18)+0
  Such that:it(18) =< V_NumberParams_0-V_CLcount_3

  with precondition: [B=3,V_ac=C,V_NumberParams_0=D,V_NumberParams_0>=V_CLcount_3+1] 

* Chain [19]: 0
  with precondition: [B=3,C=V_ac,V_CLcount_3=D,V_CLcount_3>=V_NumberParams_0] 


#### Simplifying cost structure of CE 24 

#### Computing cost of phase [20,21,22] 
 * Renamed intermediate variables: 
[ (eq(29,1),it(15))>>s(1)]
 * Renamed intermediate variables: 
[ (eq(29,2),it(18))>>s(2)]

#### Simplifying cost structure of CE 29 
 * Joined equivalent variables [s(1),s(2)] into s(1)
 * Renamed intermediate variables: 
[ (eq(33,1),it(15))>>s(3)]
 * Renamed intermediate variables: 
[ (eq(33,2),it(18))>>s(4)]

#### Simplifying cost structure of CE 33 
 * Joined equivalent variables [s(3),s(4)] into s(3)
 * Joined equivalent variables [aux(3),aux(1),aux(2)] into aux(3)
 * Joined equivalent variables [s(1),s(3)] into s(1)
 * Renamed intermediate variables: 
[ (it(20),aux(3))>>s(5), (it(20),s(1))>>s(6)]

#### Simplifying cost structure of CE 27 

#### Simplifying cost structure of CE 31 

#### Simplifying cost structure of CE 25 

#### Cost of loops [20,21,22] 

 * loop 20:eval_Configure_bb2_in(V_ac,V_CLcount_2,B) -> [eval_Configure_bb2_in(V_ac',V_CLcount_2',B')] 
4*s(6)+3
  Such that:s(5) =< -V_CLcount_2+V_CLcount_2'
s(6) =< s(5)

 * loop 21:eval_Configure_bb2_in(V_ac,V_CLcount_2,B) -> [eval_Configure_bb2_in(V_ac',V_CLcount_2',B')] 
3
 * loop 22:eval_Configure_bb2_in(V_ac,V_CLcount_2,B) -> [eval_Configure_bb2_in(V_ac',V_CLcount_2',B')] 
1
##### Pending set eval_Configure_bb2_in(V_ac,V_CLcount_2,B)
* Psum in Loop 20: [it(20)=<1,s(8)=< -V_CLcount_2+V_CLcount_2']
* Psum in Loop 21: [it(21)=<1]
* Psum in Loop 22: [it(22)=<1]

###### Computing sum for it(20)=<1  in Loop 20 
   - Applying inductive sum strategy 
     - head Candidate: V_ac-V_CLcount_2 
       - Loop 21 is collaborative and bounds [it(21)] 
       - Loop 22 is collaborative and bounds [it(22)] 
     - head Candidate: V_ac/2-V_CLcount_2/2-1 
       - Loop 21 is collaborative
       - Loop 22 is collaborative
     - tail Candidate: V_ac-V_CLcount_2 
       - Loop 21 is collaborative and bounds [it(21)] 
       - Loop 22 is collaborative and bounds [it(22)] 
     - tail Candidate: V_ac/2-V_CLcount_2/2-1 
       - Loop 21 is collaborative
       - Loop 22 is collaborative and bounds [it(22)] 
 * Adding constraints: [it(20)+it(21)+it(22)=<V_ac-V_CLcount_2,it(20)=<V_ac/2-V_CLcount_2/2-1,it(20)+it(21)+it(22)=<V_ac-V_CLcount_2-V_ac'+V_CLcount_2',it(20)+it(22)=<V_ac/2-V_CLcount_2/2-V_ac'/2+V_CLcount_2'/2] 

##### Pending set eval_Configure_0(V_ac,B)
* Psum in Loop 20: [s(8)=< -V_CLcount_2+V_CLcount_2']
* Psum in Loop 21: [it(21)=<1]
* Psum in Loop 22: [it(22)=<1]

###### Computing sum for s(8)=< -V_CLcount_2+V_CLcount_2'  in Loop 20 
   - Applying inductive sum strategy 
     - head Candidate: V_ac-V_CLcount_2-1 
       - Loop 21 is collaborative and bounds [it(21)] 
       - Loop 22 is collaborative and bounds [it(22)] 
     - tail Candidate: V_ac-V_CLcount_2-1 
       - Loop 21 is collaborative and bounds [it(21)] 
       - Loop 22 is collaborative and bounds [it(22)] 
 * Adding constraints: [it(21)+it(22)+s(8)=<V_ac-V_CLcount_2-1,it(21)+it(22)+s(8)=<V_ac-V_CLcount_2-V_ac'+V_CLcount_2'] 

##### Pending set eval_Configure_0(V_ac,B)
* Psum in Loop 21: [it(21)=<1]
* Psum in Loop 22: [it(22)=<1]

###### Computing sum for it(21)=<1  in Loop 21 
   - Applying inductive sum strategy 
     - head Candidate: V_ac-V_CLcount_2 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_ac-V_CLcount_2-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_ac-V_CLcount_2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_ac-V_CLcount_2-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(20)+it(21)+it(22)=<V_ac-V_CLcount_2,it(21)+it(22)+s(8)=<V_ac-V_CLcount_2-1,it(20)+it(21)+it(22)=<V_ac-V_CLcount_2-V_ac'+V_CLcount_2',it(21)+it(22)+s(8)=<V_ac-V_CLcount_2-V_ac'+V_CLcount_2'] 

##### Pending set eval_Configure_0(V_ac,B)
* Psum in Loop 22: [it(22)=<1]

###### Computing sum for it(22)=<1  in Loop 22 
   - Applying inductive sum strategy 
     - head Candidate: V_ac-V_CLcount_2 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_ac/2-V_CLcount_2/2 
       - Loop 20 is collaborative
       - Loop 21 is collaborative
     - tail Candidate: V_ac-V_CLcount_2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_ac/2-V_CLcount_2/2 
       - Loop 20 is collaborative
       - Loop 21 is collaborative
 * Adding constraints: [it(20)+it(21)+it(22)=<V_ac-V_CLcount_2,it(22)=<V_ac/2-V_CLcount_2/2,it(20)+it(21)+it(22)=<V_ac-V_CLcount_2-V_ac'+V_CLcount_2',it(22)=<V_ac/2-V_CLcount_2/2-V_ac'/2+V_CLcount_2'/2] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [20,21,22] 

#### Simplifying cost structure of phase [20,21,22] 
 * Joined equivalent variables [it(20),it(22)] into it(20)

#### Cost of phase [20,21,22]:eval_Configure_bb2_in(V_ac,V_CLcount_2,B) -> [eval_Configure_bb2_in(V_ac',V_CLcount_2',B')] 
4*it(20)+3*it(21)+4*s(7)+0
  Such that:aux(4) =< V_ac-V_CLcount_2
aux(5) =< V_ac-V_CLcount_2-V_ac'+V_CLcount_2'
aux(6) =< V_ac/2-V_CLcount_2/2
aux(7) =< V_ac/2-V_CLcount_2/2-V_ac'/2+V_CLcount_2'/2
it(20) =< aux(4)
it(21) =< aux(4)
s(8) =< aux(4)
it(20) =< aux(5)
it(21) =< aux(5)
s(8) =< aux(5)
it(20) =< aux(6)
it(20) =< aux(7)
s(7) =< s(8)

#### Simplifying cost structure of chain [[20,21,22],26] 

#### Simplifying cost structure of CE 23 

#### Found solution for phase  [20,21,22] in the cache 

#### Cost of phase [20,21,22]:eval_Configure_bb2_in(V_ac,V_CLcount_2,B) -> [eval_Configure_bb2_in(V_ac',V_CLcount_2',B')] 
4*it(20)+3*it(21)+4*s(7)+0
  Such that:aux(4) =< V_ac-V_CLcount_2
aux(5) =< V_ac-V_CLcount_2-V_ac'+V_CLcount_2'
aux(6) =< V_ac/2-V_CLcount_2/2
aux(7) =< V_ac/2-V_CLcount_2/2-V_ac'/2+V_CLcount_2'/2
it(20) =< aux(4)
it(21) =< aux(4)
s(8) =< aux(4)
it(20) =< aux(5)
it(21) =< aux(5)
s(8) =< aux(5)
it(20) =< aux(6)
it(20) =< aux(7)
s(7) =< s(8)

#### Simplifying cost structure of chain [[20,21,22],25] 
 * Joined equivalent variables [aux(8),aux(4),aux(5)] into aux(8)
 * Joined equivalent variables [aux(9),aux(6),aux(7)] into aux(9)
 * Joined equivalent variables [aux(8),s(8)] into aux(8)
 * Joined equivalent variables [it(21),s(7)] into it(21)

#### Simplifying cost structure of CE 26 

#### Simplifying cost structure of CE 30 

#### Simplifying cost structure of chain [24,26] 

#### Found solution for phase  [20,21,22] in the cache 

#### Cost of phase [20,21,22]:eval_Configure_bb2_in(V_ac,V_CLcount_2,B) -> [eval_Configure_bb2_in(V_ac',V_CLcount_2',B')] 
4*it(20)+3*it(21)+4*s(7)+0
  Such that:aux(4) =< V_ac-V_CLcount_2
aux(5) =< V_ac-V_CLcount_2-V_ac'+V_CLcount_2'
aux(6) =< V_ac/2-V_CLcount_2/2
aux(7) =< V_ac/2-V_CLcount_2/2-V_ac'/2+V_CLcount_2'/2
it(20) =< aux(4)
it(21) =< aux(4)
s(8) =< aux(4)
it(20) =< aux(5)
it(21) =< aux(5)
s(8) =< aux(5)
it(20) =< aux(6)
it(20) =< aux(7)
s(7) =< s(8)

#### Simplifying cost structure of chain [[20,21,22],24,26] 
 * Joined equivalent variables [aux(10),aux(4),aux(5)] into aux(10)
 * Joined equivalent variables [aux(11),aux(6),aux(7)] into aux(11)
 * Joined equivalent variables [aux(10),s(8)] into aux(10)
 * Joined equivalent variables [it(21),s(7)] into it(21)
 * Renamed intermediate variables: 
[ (eq(28,1),it(15))>>s(9)]
 * Renamed intermediate variables: 
[ (eq(28,2),it(18))>>s(10)]

#### Simplifying cost structure of CE 28 
 * Joined equivalent variables [s(9),s(10)] into s(9)
 * Renamed intermediate variables: 
[ (eq(32,1),it(15))>>s(11)]
 * Renamed intermediate variables: 
[ (eq(32,2),it(18))>>s(12)]

#### Simplifying cost structure of CE 32 
 * Joined equivalent variables [s(11),s(12)] into s(11)
 * Joined equivalent variables [aux(14),aux(12),aux(13)] into aux(14)
 * Joined equivalent variables [s(9),s(11)] into s(9)

#### Simplifying cost structure of chain [23,26] 

#### Found solution for phase  [20,21,22] in the cache 

#### Cost of phase [20,21,22]:eval_Configure_bb2_in(V_ac,V_CLcount_2,B) -> [eval_Configure_bb2_in(V_ac',V_CLcount_2',B')] 
4*it(20)+3*it(21)+4*s(7)+0
  Such that:aux(4) =< V_ac-V_CLcount_2
aux(5) =< V_ac-V_CLcount_2-V_ac'+V_CLcount_2'
aux(6) =< V_ac/2-V_CLcount_2/2
aux(7) =< V_ac/2-V_CLcount_2/2-V_ac'/2+V_CLcount_2'/2
it(20) =< aux(4)
it(21) =< aux(4)
s(8) =< aux(4)
it(20) =< aux(5)
it(21) =< aux(5)
s(8) =< aux(5)
it(20) =< aux(6)
it(20) =< aux(7)
s(7) =< s(8)

#### Simplifying cost structure of chain [[20,21,22],23,26] 
 * Joined equivalent variables [aux(15),aux(4),aux(5),aux(14)] into aux(15)
 * Joined equivalent variables [aux(16),aux(6)] into aux(16)
 * Joined equivalent variables [aux(15),s(8)] into aux(15)
 * Joined equivalent variables [it(21),s(9)] into it(21)
 * Joined equivalent variables [it(21),s(7)] into it(21)
 * Renamed intermediate variables: 
[ (ch([23,26]),aux(14))>>s(13), (ch([23,26]),s(9))>>s(14)]
 * Renamed intermediate variables: 
[ (ch([[20,21,22],23,26]),aux(15))>>s(15), (ch([[20,21,22],23,26]),aux(16))>>s(16), (ch([[20,21,22],23,26]),aux(7))>>s(17), (ch([[20,21,22],23,26]),it(21))>>s(18), (ch([[20,21,22],23,26]),it(20))>>s(19)]
 * Renamed intermediate variables: 
[ (ch([[20,21,22],24,26]),aux(10))>>s(20), (ch([[20,21,22],24,26]),aux(11))>>s(21), (ch([[20,21,22],24,26]),it(20))>>s(22), (ch([[20,21,22],24,26]),it(21))>>s(23)]
 * Renamed intermediate variables: 
[ (ch([[20,21,22],25]),aux(8))>>s(24), (ch([[20,21,22],25]),aux(9))>>s(25), (ch([[20,21,22],25]),it(20))>>s(26), (ch([[20,21,22],25]),it(21))>>s(27)]
 * Renamed intermediate variables: 
[ (ch([[20,21,22],26]),aux(4))>>s(28), (ch([[20,21,22],26]),aux(5))>>s(29), (ch([[20,21,22],26]),aux(6))>>s(30), (ch([[20,21,22],26]),aux(7))>>s(31), (ch([[20,21,22],26]),it(20))>>s(32), (ch([[20,21,22],26]),it(21))>>s(33), (ch([[20,21,22],26]),s(8))>>s(34), (ch([[20,21,22],26]),s(7))>>s(35)]
 * Joined equivalent variables [aux(17),s(13),s(15),s(20),s(24),s(28)] into aux(17)
 * Joined equivalent variables [aux(18),s(16),s(21),s(25),s(30)] into aux(18)
 * Joined equivalent variables [s(14),s(18),s(23),s(27)] into s(14)
 * Joined equivalent variables [s(22),s(26)] into s(22)

#### Cost of chains of eval_Configure_bb2_in(V_ac,V_CLcount_2,B):
* Chain [[20,21,22],26]: 4*it(20)+3*it(21)+4*s(7)+0
  Such that:aux(4) =< V_ac-V_CLcount_2
aux(5) =< V_ac-V_CLcount_2+1
aux(6) =< V_ac/2-V_CLcount_2/2
aux(7) =< V_ac/2-V_CLcount_2/2+1/2
it(20) =< aux(4)
it(21) =< aux(4)
s(8) =< aux(4)
it(20) =< aux(5)
it(21) =< aux(5)
s(8) =< aux(5)
it(20) =< aux(6)
it(20) =< aux(7)
s(7) =< s(8)

  with precondition: [B=4,V_CLcount_2>=1,V_ac>=V_CLcount_2+1] 

* Chain [[20,21,22],25]: 4*it(20)+7*it(21)+0
  Such that:aux(8) =< V_ac-V_CLcount_2
aux(9) =< V_ac/2-V_CLcount_2/2
it(20) =< aux(8)
it(21) =< aux(8)
it(20) =< aux(9)

  with precondition: [B=4,V_CLcount_2>=1,V_ac>=V_CLcount_2+2] 

* Chain [[20,21,22],24,26]: 4*it(20)+7*it(21)+3
  Such that:aux(10) =< V_ac-V_CLcount_2
aux(11) =< V_ac/2-V_CLcount_2/2
it(20) =< aux(10)
it(21) =< aux(10)
it(20) =< aux(11)

  with precondition: [B=4,V_CLcount_2>=1,V_ac>=V_CLcount_2+2] 

* Chain [[20,21,22],23,26]: 4*it(20)+11*it(21)+3
  Such that:aux(15) =< V_ac-V_CLcount_2
aux(16) =< V_ac/2-V_CLcount_2/2
aux(7) =< aux(15)
aux(7) =< aux(16)
it(21) =< aux(15)
it(20) =< aux(15)
it(20) =< aux(16)
it(20) =< aux(7)

  with precondition: [B=4,V_CLcount_2>=1,V_ac>=V_CLcount_2+3] 

* Chain [26]: 0
  with precondition: [B=4,V_CLcount_2>=1,V_CLcount_2>=V_ac] 

* Chain [25]: 0
  with precondition: [B=4,V_CLcount_2>=1,V_ac>=V_CLcount_2+1] 

* Chain [24,26]: 3
  with precondition: [B=4,V_CLcount_2+1=V_ac,V_CLcount_2>=1] 

* Chain [23,26]: 4*s(9)+3
  Such that:aux(14) =< V_ac-V_CLcount_2
s(9) =< aux(14)

  with precondition: [B=4,V_CLcount_2>=1,V_ac>=V_CLcount_2+2] 


#### Simplifying cost structure of CE 37 

#### Simplifying cost structure of CE 35 
 * Renamed intermediate variables: 
[ (eq(38,1),s(29))>>s(36), (eq(38,1),s(31))>>s(37), (eq(38,1),aux(17))>>s(38), (eq(38,1),aux(18))>>s(39), (eq(38,1),s(14))>>s(40), (eq(38,1),s(17))>>s(41), (eq(38,1),s(19))>>s(42), (eq(38,1),s(22))>>s(43), (eq(38,1),s(32))>>s(44), (eq(38,1),s(33))>>s(45), (eq(38,1),s(34))>>s(46), (eq(38,1),s(35))>>s(47)]

#### Simplifying cost structure of CE 38 
 * Joined equivalent variables [aux(19),s(36),s(38)] into aux(19)
 * Joined equivalent variables [aux(20),s(37),s(39)] into aux(20)
 * Joined equivalent variables [aux(19),s(46)] into aux(19)
 * Joined equivalent variables [s(40),s(45)] into s(40)
 * Joined equivalent variables [s(43),s(44)] into s(43)
 * Joined equivalent variables [s(40),s(47)] into s(40)
 * Renamed intermediate variables: 
[ (eq(36,1),s(29))>>s(48), (eq(36,1),s(31))>>s(49), (eq(36,1),aux(17))>>s(50), (eq(36,1),aux(18))>>s(51), (eq(36,1),s(14))>>s(52), (eq(36,1),s(17))>>s(53), (eq(36,1),s(19))>>s(54), (eq(36,1),s(22))>>s(55), (eq(36,1),s(32))>>s(56), (eq(36,1),s(33))>>s(57), (eq(36,1),s(34))>>s(58), (eq(36,1),s(35))>>s(59)]

#### Simplifying cost structure of CE 36 
 * Joined equivalent variables [aux(21),s(48),s(50)] into aux(21)
 * Joined equivalent variables [aux(22),s(49),s(51)] into aux(22)
 * Joined equivalent variables [aux(21),s(58)] into aux(21)
 * Joined equivalent variables [s(52),s(57)] into s(52)
 * Joined equivalent variables [s(55),s(56)] into s(55)
 * Joined equivalent variables [s(52),s(59)] into s(52)
 * Renamed intermediate variables: 
[ (eq(34,1),s(29))>>s(60), (eq(34,1),s(31))>>s(61), (eq(34,1),aux(17))>>s(62), (eq(34,1),aux(18))>>s(63), (eq(34,1),s(14))>>s(64), (eq(34,1),s(17))>>s(65), (eq(34,1),s(19))>>s(66), (eq(34,1),s(22))>>s(67), (eq(34,1),s(32))>>s(68), (eq(34,1),s(33))>>s(69), (eq(34,1),s(34))>>s(70), (eq(34,1),s(35))>>s(71)]

#### Simplifying cost structure of CE 34 
 * Joined equivalent variables [aux(23),s(60),s(62)] into aux(23)
 * Joined equivalent variables [aux(24),s(61),s(63)] into aux(24)
 * Joined equivalent variables [aux(23),s(70)] into aux(23)
 * Joined equivalent variables [s(64),s(69)] into s(64)
 * Joined equivalent variables [s(67),s(68)] into s(67)
 * Joined equivalent variables [s(64),s(71)] into s(64)

#### Cost of chains of eval_Configure_5(V_ac,V_1,B):
* Chain [31]: 1
  with precondition: [V_ac=3,0>=V_1+1] 

* Chain [30]: 1
  with precondition: [V_ac=3,V_1>=1] 

* Chain [29]: 36*s(40)+4*s(42)+12*s(43)+4
  Such that:aux(19) =< V_ac
aux(20) =< V_ac/2
s(40) =< aux(19)
s(41) =< aux(19)
s(41) =< aux(20)
s(42) =< aux(19)
s(42) =< aux(20)
s(42) =< s(41)
s(43) =< aux(19)
s(43) =< aux(20)

  with precondition: [V_1=0,V_ac>=3] 

* Chain [28]: 36*s(52)+4*s(54)+12*s(55)+4
  Such that:aux(21) =< V_ac
aux(22) =< V_ac/2
s(52) =< aux(21)
s(53) =< aux(21)
s(53) =< aux(22)
s(54) =< aux(21)
s(54) =< aux(22)
s(54) =< s(53)
s(55) =< aux(21)
s(55) =< aux(22)

  with precondition: [0>=V_1+1,V_ac>=4] 

* Chain [27]: 36*s(64)+4*s(66)+12*s(67)+4
  Such that:aux(23) =< V_ac
aux(24) =< V_ac/2
s(64) =< aux(23)
s(65) =< aux(23)
s(65) =< aux(24)
s(66) =< aux(23)
s(66) =< aux(24)
s(66) =< s(65)
s(67) =< aux(23)
s(67) =< aux(24)

  with precondition: [V_ac>=4,V_1>=1] 

 * Renamed intermediate variables: 
[ (eq(44,1),s(29))>>s(72), (eq(44,1),s(31))>>s(73), (eq(44,1),aux(17))>>s(74), (eq(44,1),aux(18))>>s(75), (eq(44,1),s(14))>>s(76), (eq(44,1),s(17))>>s(77), (eq(44,1),s(19))>>s(78), (eq(44,1),s(22))>>s(79), (eq(44,1),s(32))>>s(80), (eq(44,1),s(33))>>s(81), (eq(44,1),s(34))>>s(82), (eq(44,1),s(35))>>s(83)]

#### Simplifying cost structure of CE 44 
 * Joined equivalent variables [aux(25),s(73),s(74)] into aux(25)

#### Simplifying cost structure of CE 39 

#### Simplifying cost structure of CE 40 
 * Renamed intermediate variables: 
[ (eq(41,1),aux(19))>>s(84), (eq(41,1),aux(20))>>s(85), (eq(41,1),s(40))>>s(86), (eq(41,1),s(41))>>s(87), (eq(41,1),s(42))>>s(88), (eq(41,1),s(43))>>s(89)]

#### Simplifying cost structure of CE 41 
 * Renamed intermediate variables: 
[ (eq(42,1),aux(21))>>s(90), (eq(42,1),aux(22))>>s(91), (eq(42,1),s(52))>>s(92), (eq(42,1),s(53))>>s(93), (eq(42,1),s(54))>>s(94), (eq(42,1),s(55))>>s(95)]

#### Simplifying cost structure of CE 42 
 * Renamed intermediate variables: 
[ (eq(43,1),aux(23))>>s(96), (eq(43,1),aux(24))>>s(97), (eq(43,1),s(64))>>s(98), (eq(43,1),s(65))>>s(99), (eq(43,1),s(66))>>s(100), (eq(43,1),s(67))>>s(101)]

#### Simplifying cost structure of CE 43 
 * Joined equivalent variables [aux(26),s(84),s(90),s(96)] into aux(26)
 * Joined equivalent variables [aux(27),s(85),s(91),s(97)] into aux(27)
 * Joined equivalent variables [s(86),s(92),s(98)] into s(86)
 * Joined equivalent variables [s(89),s(95),s(101)] into s(89)
 * Joined equivalent variables [s(87),s(93),s(99)] into s(87)
 * Joined equivalent variables [s(88),s(94),s(100)] into s(88)

#### Simplifying cost structure of CE 45 

#### Cost of chains of eval_Configure_2(V_ac,B):
* Chain [34]: 29*s(76)+4*s(78)+8*s(79)+4*s(80)+3*s(81)+4*s(83)+4
  Such that:s(72) =< 2
s(75) =< 1/2
aux(25) =< 1
s(76) =< aux(25)
s(77) =< aux(25)
s(77) =< s(75)
s(78) =< aux(25)
s(78) =< s(75)
s(78) =< s(77)
s(79) =< aux(25)
s(79) =< s(75)
s(80) =< aux(25)
s(81) =< aux(25)
s(82) =< aux(25)
s(80) =< s(72)
s(81) =< s(72)
s(82) =< s(72)
s(80) =< s(75)
s(83) =< s(82)

  with precondition: [V_ac=2] 

* Chain [33]: 108*s(86)+12*s(88)+36*s(89)+4
  Such that:aux(26) =< V_ac
aux(27) =< V_ac/2
s(86) =< aux(26)
s(87) =< aux(26)
s(87) =< aux(27)
s(88) =< aux(26)
s(88) =< aux(27)
s(88) =< s(87)
s(89) =< aux(26)
s(89) =< aux(27)

  with precondition: [V_ac>=3] 

* Chain [32]: 1
  with precondition: [1>=V_ac] 

 * Renamed intermediate variables: 
[ (eq(46,1),s(72))>>s(102), (eq(46,1),s(75))>>s(103), (eq(46,1),aux(25))>>s(104), (eq(46,1),s(76))>>s(105), (eq(46,1),s(77))>>s(106), (eq(46,1),s(78))>>s(107), (eq(46,1),s(79))>>s(108), (eq(46,1),s(80))>>s(109), (eq(46,1),s(81))>>s(110), (eq(46,1),s(82))>>s(111), (eq(46,1),s(83))>>s(112)]

#### Simplifying cost structure of CE 46 

#### Simplifying cost structure of CE 47 
 * Renamed intermediate variables: 
[ (eq(48,1),aux(26))>>s(113), (eq(48,1),aux(27))>>s(114), (eq(48,1),s(86))>>s(115), (eq(48,1),s(87))>>s(116), (eq(48,1),s(88))>>s(117), (eq(48,1),s(89))>>s(118)]

#### Simplifying cost structure of CE 48 

#### Cost of chains of eval_Configure_start(V_ac,B):
* Chain [37]: 29*s(105)+4*s(107)+8*s(108)+4*s(109)+3*s(110)+4*s(112)+4
  Such that:s(104) =< 1
s(102) =< 2
s(103) =< 1/2
s(105) =< s(104)
s(106) =< s(104)
s(106) =< s(103)
s(107) =< s(104)
s(107) =< s(103)
s(107) =< s(106)
s(108) =< s(104)
s(108) =< s(103)
s(109) =< s(104)
s(110) =< s(104)
s(111) =< s(104)
s(109) =< s(102)
s(110) =< s(102)
s(111) =< s(102)
s(109) =< s(103)
s(112) =< s(111)

  with precondition: [V_ac=2] 

* Chain [36]: 1
  with precondition: [1>=V_ac] 

* Chain [35]: 108*s(115)+12*s(117)+36*s(118)+4
  Such that:s(113) =< V_ac
s(114) =< V_ac/2
s(115) =< s(113)
s(116) =< s(113)
s(116) =< s(114)
s(117) =< s(113)
s(117) =< s(114)
s(117) =< s(116)
s(118) =< s(113)
s(118) =< s(114)

  with precondition: [V_ac>=3] 


Closed-form bounds of eval_Configure_start(V_ac,B): 
-------------------------------------
* Chain [37] with precondition: [V_ac=2] 
    - Upper bound: 56 
    - Complexity: constant 
* Chain [36] with precondition: [1>=V_ac] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [35] with precondition: [V_ac>=3] 
    - Upper bound: 156*V_ac+4 
    - Complexity: n 

### Maximum cost of eval_Configure_start(V_ac,B): max([55,nat(V_ac)*156+3])+1 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 225 ms.
* Invariants computed in 212 ms.
   - Backward Invariants 118 ms.
   - Transitive Invariants 31 ms.
* Refinement performed in 423 ms.
* Termination proved in 44 ms.
* Upper bounds computed in 443 ms.
   - Equation cost structures 152 ms.
   - Phase cost structures 139 ms.
   - Chain cost structures 127 ms.
   - Solving cost expressions 5 ms.
* Total analysis performed in 1541 ms.


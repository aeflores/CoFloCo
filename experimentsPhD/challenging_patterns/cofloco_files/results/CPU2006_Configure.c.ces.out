Warning: Ignored call to eval_Configure_stop/1 in equation eval_Configure_bb11_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_Configure_15/14,eval_Configure_16/15,eval_Configure_bb7_in/14,eval_Configure_bb8_in/14,eval_Configure_bb9_in/15]
1. recursive  : [eval_Configure__critedge_in/10,eval_Configure_bb10_in/10]
2. recursive  : [eval_Configure_11/4,eval_Configure_12/5,eval_Configure_7/3,eval_Configure_8/4,eval_Configure_bb2_in/3,eval_Configure_bb3_in/3,eval_Configure_bb4_in/4,eval_Configure_bb5_in/4,eval_Configure_bb6_in/5,loop_cont_eval_Configure__critedge_in/4,loop_cont_eval_Configure_bb7_in/9]
3. non_recursive  : [eval_Configure_bb11_in/1]
4. non_recursive  : [loop_cont_eval_Configure_bb2_in/2]
5. non_recursive  : [eval_Configure_5/3]
6. non_recursive  : [eval_Configure_4/3]
7. non_recursive  : [eval_Configure_3/2]
8. non_recursive  : [eval_Configure_bb1_in/2]
9. non_recursive  : [eval_Configure_2/2]
10. non_recursive  : [eval_Configure_1/2]
11. non_recursive  : [eval_Configure_0/2]
12. non_recursive  : [eval_Configure_bb0_in/2]
13. non_recursive  : [eval_Configure_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_Configure_bb7_in/14
1. SCC is partially evaluated into eval_Configure__critedge_in/10
2. SCC is partially evaluated into eval_Configure_bb2_in/3
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_Configure_5/3
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into eval_Configure_2/2
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is partially evaluated into eval_Configure_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_Configure_bb7_in/14 
* CE 12 is refined into CE [17] 
* CE 14 is refined into CE [18] 
* CE 13 is refined into CE [19] 


#### Refined cost equations eval_Configure_bb7_in/14 
* CE 17: eval_Configure_bb7_in(A,B,C,D,E,F,G,A,H,I,D,E,F,E) = 0
     [A>=F+1,F>=E,E=H+1,E=B+1,I=0,G=2,C=0] 
* CE 18: eval_Configure_bb7_in(A,B,C,D,E,A,F,A,G,H,D,E,A,E) = 0
     [A>=E,E=G+1,E=B+1,H=0,F=2,C=0] 
* CE 19: eval_Configure_bb7_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,B,C,D,E,F,G,H,I) = 1+ eval_Configure_bb7_in(V_ac,J,K,V_7,V_9,L,M,C,D,E,F,G,H,I)
     [V_ac>=V_NumberParams_0+1,V_NumberParams_0>=V_9,V_NumberParams_0+1=L,V_9=J+1,V_9=V_CLcount_2+1,M=2,K=0,B=2,V_4=0] 

### Cost equations --> "Loop" of eval_Configure_bb7_in/14 
* CEs [19] --> Loop 16 
* CEs [17] --> Loop 17 
* CEs [18] --> Loop 18 

#### Loops of eval_Configure_bb7_in/14 
* Loop 16: eval_Configure_bb7_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,B,C,D,E,F,G,H,I)->  eval_Configure_bb7_in(V_ac,V_CLcount_2',V_4',V_7,V_9,V_NumberParams_0',B',C,D,E,F,G,H,I)
                  [V_ac>=V_NumberParams_0+1,V_NumberParams_0>=V_9,V_NumberParams_0+1=V_NumberParams_0',V_9=V_CLcount_2'+1,V_9=V_CLcount_2+1,B'=2,V_4'=0,B=2,V_4=0] 
* Loop 17: eval_Configure_bb7_in(A,B,C,D,E,F,G,A,H,I,D,E,F,E) [A>=F+1,F>=E,E=H+1,E=B+1,I=0,G=2,C=0] 
* Loop 18: eval_Configure_bb7_in(A,B,C,D,E,A,F,A,G,H,D,E,A,E) [A>=E,E=G+1,E=B+1,H=0,F=2,C=0] 

### Ranking functions of CR eval_Configure_bb7_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,B,C,D,E,F,G,H,I) 
* RF of phase [16]: [V_ac-V_NumberParams_0]

#### Partial ranking functions of CR eval_Configure_bb7_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,B,C,D,E,F,G,H,I) 
* Partial RF of phase [16]:
  - RF of loop [16:1]:
    V_ac-V_NumberParams_0

Discarded unfeasible chain [[16]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_Configure_bb7_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,B,C,D,E,F,G,H,I) 
* [[16],18]
* [[16],17]
* [18]
* [17]


### Merging Chains  eval_Configure_bb7_in/14 into  External patterns of execution 
* [[18]] --> 1 
* [[17]] --> 2 
* [[18,[16]]] --> 3 
* [[17,[16]]] --> 4 


### Specialization of cost equations eval_Configure__critedge_in/10 
* CE 16 is refined into CE [20] 
* CE 15 is refined into CE [21] 


#### Refined cost equations eval_Configure__critedge_in/10 
* CE 20: eval_Configure__critedge_in(A,B,C,D,E,F,G,H,A,G) = 0
     [G>=F,H=3] 
* CE 21: eval_Configure__critedge_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,V_CLcount_3,B,C,D) = 1+ eval_Configure__critedge_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,E,F,C,D)
     [V_NumberParams_0>=V_CLcount_3+1,V_CLcount_3+1=E,F=3,B=3] 

### Cost equations --> "Loop" of eval_Configure__critedge_in/10 
* CEs [21] --> Loop 19 
* CEs [20] --> Loop 20 

#### Loops of eval_Configure__critedge_in/10 
* Loop 19: eval_Configure__critedge_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,V_CLcount_3,B,C,D)->  eval_Configure__critedge_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,V_CLcount_3',B',C,D)
                  [V_NumberParams_0>=V_CLcount_3+1,V_CLcount_3+1=V_CLcount_3',B'=3,B=3] 
* Loop 20: eval_Configure__critedge_in(A,B,C,D,E,F,G,H,A,G) [G>=F,H=3] 

### Ranking functions of CR eval_Configure__critedge_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,V_CLcount_3,B,C,D) 
* RF of phase [19]: [V_NumberParams_0-V_CLcount_3]

#### Partial ranking functions of CR eval_Configure__critedge_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,V_CLcount_3,B,C,D) 
* Partial RF of phase [19]:
  - RF of loop [19:1]:
    V_NumberParams_0-V_CLcount_3

Discarded unfeasible chain [[19]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_Configure__critedge_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,V_CLcount_3,B,C,D) 
* [[19],20]
* [20]


### Merging Chains  eval_Configure__critedge_in/10 into  External patterns of execution 
* [[20]] --> 1 
* [[20,[19]]] --> 2 


### Specialization of cost equations eval_Configure_bb2_in/3 
* CE 10 is refined into CE [22] 
* CE 11 is refined into CE [23] 
* CE 8 is refined into CE [24,25,26,27] 
* CE 9 is refined into CE [28,29,30,31] 
* CE 7 is refined into CE [32] 


#### Refined cost equations eval_Configure_bb2_in/3 
* CE 22: eval_Configure_bb2_in(V_ac,V_CLcount_2,B) = 0
     [V_ac>=V_CLcount_2+1,B=4] 
* CE 23: eval_Configure_bb2_in(V_ac,V_CLcount_2,B) = 0
     [V_CLcount_2>=V_ac,B=4] 
* CE 24: eval_Configure_bb2_in(V_ac,V_CLcount_2,B) = 3+ eval_Configure_bb7_in(V_ac,C,D,E,V_ac,V_ac,F,V_ac,G,H,E,V_ac,V_ac,V_ac):1+ eval_Configure__critedge_in(V_ac,I,J,E,V_ac,V_ac,V_ac,K,V_ac,V_ac):1+ eval_Configure_bb2_in(V_ac,V_ac,L)
     [E>=1,V_ac=I+1,V_ac=G+1,V_ac=C+1,V_ac=V_CLcount_2+1,L=4,K=3,J=0,H=0,F=2,D=0,B=4] 
* CE 25: eval_Configure_bb2_in(V_ac,V_CLcount_2,B) = 3+ eval_Configure_bb7_in(V_ac,C,D,E,F,F,G,V_ac,H,I,E,F,F,F):2+ eval_Configure__critedge_in(V_ac,J,K,E,F,F,F,L,V_ac,F):1+ eval_Configure_bb2_in(V_ac,F,M)
     [V_ac>=F+1,E>=1,F=J+1,F=H+1,F=C+1,F=V_CLcount_2+1,M=4,L=3,K=0,I=0,G=2,D=0,B=4] 
* CE 26: eval_Configure_bb2_in(V_ac,V_CLcount_2,B) = 3+ eval_Configure_bb7_in(V_ac,C,D,E,F,F,G,V_ac,H,I,E,F,V_ac,F):3+ eval_Configure__critedge_in(V_ac,J,K,E,F,V_ac,F,L,V_ac,V_ac):2+ eval_Configure_bb2_in(V_ac,V_ac,M)
     [V_ac>=F+1,E>=1,F=J+1,F=H+1,F=C+1,F=V_CLcount_2+1,M=4,L=3,K=0,I=0,G=2,D=0,B=4] 
* CE 27: eval_Configure_bb2_in(V_ac,V_CLcount_2,B) = 3+ eval_Configure_bb7_in(V_ac,C,D,E,F,F,G,V_ac,H,I,E,F,J,F):4+ eval_Configure__critedge_in(V_ac,K,L,E,F,J,F,M,V_ac,J):2+ eval_Configure_bb2_in(V_ac,J,N)
     [V_ac>=J+1,J>=F+1,E>=1,F=K+1,F=H+1,F=C+1,F=V_CLcount_2+1,N=4,M=3,L=0,I=0,G=2,D=0,B=4] 
* CE 28: eval_Configure_bb2_in(V_ac,V_CLcount_2,B) = 3+ eval_Configure_bb7_in(V_ac,C,D,E,V_ac,V_ac,F,V_ac,G,H,E,V_ac,V_ac,V_ac):1+ eval_Configure__critedge_in(V_ac,I,J,E,V_ac,V_ac,V_ac,K,V_ac,V_ac):1+ eval_Configure_bb2_in(V_ac,V_ac,L)
     [0>=E+1,V_ac=I+1,V_ac=G+1,V_ac=C+1,V_ac=V_CLcount_2+1,L=4,K=3,J=0,H=0,F=2,D=0,B=4] 
* CE 29: eval_Configure_bb2_in(V_ac,V_CLcount_2,B) = 3+ eval_Configure_bb7_in(V_ac,C,D,E,F,F,G,V_ac,H,I,E,F,F,F):2+ eval_Configure__critedge_in(V_ac,J,K,E,F,F,F,L,V_ac,F):1+ eval_Configure_bb2_in(V_ac,F,M)
     [V_ac>=F+1,0>=E+1,F=J+1,F=H+1,F=C+1,F=V_CLcount_2+1,M=4,L=3,K=0,I=0,G=2,D=0,B=4] 
* CE 30: eval_Configure_bb2_in(V_ac,V_CLcount_2,B) = 3+ eval_Configure_bb7_in(V_ac,C,D,E,F,F,G,V_ac,H,I,E,F,V_ac,F):3+ eval_Configure__critedge_in(V_ac,J,K,E,F,V_ac,F,L,V_ac,V_ac):2+ eval_Configure_bb2_in(V_ac,V_ac,M)
     [V_ac>=F+1,0>=E+1,F=J+1,F=H+1,F=C+1,F=V_CLcount_2+1,M=4,L=3,K=0,I=0,G=2,D=0,B=4] 
* CE 31: eval_Configure_bb2_in(V_ac,V_CLcount_2,B) = 3+ eval_Configure_bb7_in(V_ac,C,D,E,F,F,G,V_ac,H,I,E,F,J,F):4+ eval_Configure__critedge_in(V_ac,K,L,E,F,J,F,M,V_ac,J):2+ eval_Configure_bb2_in(V_ac,J,N)
     [V_ac>=J+1,J>=F+1,0>=E+1,F=K+1,F=H+1,F=C+1,F=V_CLcount_2+1,N=4,M=3,L=0,I=0,G=2,D=0,B=4] 
* CE 32: eval_Configure_bb2_in(V_ac,V_CLcount_2,B) = 1+ eval_Configure_bb2_in(V_ac,C,D)
     [V_ac>=V_CLcount_2+1,V_CLcount_2+2=C,D=4,B=4] 

### Cost equations --> "Loop" of eval_Configure_bb2_in/3 
* CEs [27,31] --> Loop 21 
* CEs [25,29] --> Loop 22 
* CEs [32] --> Loop 23 
* CEs [26,30] --> Loop 24 
* CEs [24,28] --> Loop 25 
* CEs [22] --> Loop 26 
* CEs [23] --> Loop 27 

#### Loops of eval_Configure_bb2_in/3 
* Loop 21: eval_Configure_bb2_in(V_ac,V_CLcount_2,B)->  eval_Configure_bb2_in(V_ac,V_CLcount_2',B')
                  [V_ac>=V_CLcount_2'+1,V_CLcount_2'>=V_CLcount_2+2,B'=4,B=4] 
* Loop 22: eval_Configure_bb2_in(V_ac,V_CLcount_2,B)->  eval_Configure_bb2_in(V_ac,V_CLcount_2',B')
                  [V_ac>=V_CLcount_2+2,V_CLcount_2+1=V_CLcount_2',B'=4,B=4] 
* Loop 23: eval_Configure_bb2_in(V_ac,V_CLcount_2,B)->  eval_Configure_bb2_in(V_ac,V_CLcount_2',B')
                  [V_ac>=V_CLcount_2+1,V_CLcount_2+2=V_CLcount_2',B'=4,B=4] 
* Loop 24: eval_Configure_bb2_in(V_ac,V_CLcount_2,B)->  eval_Configure_bb2_in(V_ac,V_ac,A')
                  [V_ac>=V_CLcount_2+2,A'=4,B=4] 
* Loop 25: eval_Configure_bb2_in(V_ac,V_CLcount_2,B)->  eval_Configure_bb2_in(V_ac,V_ac,A')
                  [V_ac=V_CLcount_2+1,A'=4,B=4] 
* Loop 26: eval_Configure_bb2_in(V_ac,V_CLcount_2,B) [V_ac>=V_CLcount_2+1,B=4] 
* Loop 27: eval_Configure_bb2_in(V_ac,V_CLcount_2,B) [V_CLcount_2>=V_ac,B=4] 

### Ranking functions of CR eval_Configure_bb2_in(V_ac,V_CLcount_2,B) 
* RF of phase [21,22,23]: [V_ac-V_CLcount_2]

#### Partial ranking functions of CR eval_Configure_bb2_in(V_ac,V_CLcount_2,B) 
* Partial RF of phase [21,22,23]:
  - RF of loop [21:1]:
    V_ac/2-V_CLcount_2/2-1
  - RF of loop [22:1]:
    V_ac-V_CLcount_2-1
  - RF of loop [23:1]:
    V_ac/2-V_CLcount_2/2

Discarded unfeasible chain [[21,22,23]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_Configure_bb2_in(V_ac,V_CLcount_2,B) 
* [[21,22,23],27]
* [[21,22,23],26]
* [[21,22,23],25,27]
* [[21,22,23],24,27]
* [27]
* [26]
* [25,27]
* [24,27]


### Merging Chains  eval_Configure_bb2_in/3 into  External patterns of execution 
* [[27,25]] --> 1 
* [[27]] --> 2 
* [[26],[27,[21,22,23]]] --> 3 
* [[27,24],[27,25,[21,22,23]],[26,[21,22,23]]] --> 4 
* [[27,24,[21,22,23]]] --> 5 


### Specialization of cost equations eval_Configure_5/3 
* CE 5 is refined into CE [33,34,35,36,37] 
* CE 4 is refined into CE [38,39,40,41,42] 
* CE 6 is refined into CE [43,44,45] 


#### Refined cost equations eval_Configure_5/3 
* CE 33: eval_Configure_5(V_ac,V_1,B) = 1+ eval_Configure_bb2_in(C,D,E):1
     [V_1>=1,E=4,D=3,C=4,V_ac=4] 
* CE 34: eval_Configure_5(V_ac,V_1,B) = 1+ eval_Configure_bb2_in(C,D,E):2
     [V_1>=1,E=4,D=3,C=3,V_ac=3] 
* CE 35: eval_Configure_5(V_ac,V_1,B) = 1+ eval_Configure_bb2_in(V_ac,C,D):3
     [V_ac>=4,V_1>=1,D=4,C=3] 
* CE 36: eval_Configure_5(V_ac,V_1,B) = 1+ eval_Configure_bb2_in(V_ac,C,D):4
     [V_ac>=5,V_1>=1,D=4,C=3] 
* CE 37: eval_Configure_5(V_ac,V_1,B) = 1+ eval_Configure_bb2_in(V_ac,C,D):5
     [V_ac>=6,V_1>=1,D=4,C=3] 
* CE 38: eval_Configure_5(V_ac,V_1,B) = 1+ eval_Configure_bb2_in(C,D,E):1
     [0>=V_1+1,E=4,D=3,C=4,V_ac=4] 
* CE 39: eval_Configure_5(V_ac,V_1,B) = 1+ eval_Configure_bb2_in(C,D,E):2
     [0>=V_1+1,E=4,D=3,C=3,V_ac=3] 
* CE 40: eval_Configure_5(V_ac,V_1,B) = 1+ eval_Configure_bb2_in(V_ac,C,D):3
     [V_ac>=4,0>=V_1+1,D=4,C=3] 
* CE 41: eval_Configure_5(V_ac,V_1,B) = 1+ eval_Configure_bb2_in(V_ac,C,D):4
     [V_ac>=5,0>=V_1+1,D=4,C=3] 
* CE 42: eval_Configure_5(V_ac,V_1,B) = 1+ eval_Configure_bb2_in(V_ac,C,D):5
     [V_ac>=6,0>=V_1+1,D=4,C=3] 
* CE 43: eval_Configure_5(V_ac,V_1,B) = 1+ eval_Configure_bb2_in(V_ac,C,D):3
     [V_ac>=3,D=4,C=1,V_1=0] 
* CE 44: eval_Configure_5(V_ac,V_1,B) = 1+ eval_Configure_bb2_in(V_ac,C,D):4
     [V_ac>=3,D=4,C=1,V_1=0] 
* CE 45: eval_Configure_5(V_ac,V_1,B) = 1+ eval_Configure_bb2_in(V_ac,C,D):5
     [V_ac>=4,D=4,C=1,V_1=0] 

### Cost equations --> "Loop" of eval_Configure_5/3 
* CEs [37] --> Loop 28 
* CEs [36] --> Loop 29 
* CEs [35] --> Loop 30 
* CEs [42] --> Loop 31 
* CEs [41] --> Loop 32 
* CEs [40] --> Loop 33 
* CEs [45] --> Loop 34 
* CEs [43,44] --> Loop 35 
* CEs [33] --> Loop 36 
* CEs [38] --> Loop 37 
* CEs [34] --> Loop 38 
* CEs [39] --> Loop 39 

#### Loops of eval_Configure_5/3 
* Loop 28: eval_Configure_5(V_ac,V_1,B) [V_1>=1,V_ac>=6] 
* Loop 29: eval_Configure_5(V_ac,V_1,B) [V_1>=1,V_ac>=5] 
* Loop 30: eval_Configure_5(V_ac,V_1,B) [V_1>=1,V_ac>=4] 
* Loop 31: eval_Configure_5(V_ac,V_1,B) [V_ac>=6,0>=V_1+1] 
* Loop 32: eval_Configure_5(V_ac,V_1,B) [V_ac>=5,0>=V_1+1] 
* Loop 33: eval_Configure_5(V_ac,V_1,B) [V_ac>=4,0>=V_1+1] 
* Loop 34: eval_Configure_5(V_ac,V_1,B) [V_ac>=4,V_1=0] 
* Loop 35: eval_Configure_5(V_ac,V_1,B) [V_ac>=3,V_1=0] 
* Loop 36: eval_Configure_5(V_ac,V_1,B) [V_1>=1,V_ac=4] 
* Loop 37: eval_Configure_5(V_ac,V_1,B) [0>=V_1+1,V_ac=4] 
* Loop 38: eval_Configure_5(V_ac,V_1,B) [V_1>=1,V_ac=3] 
* Loop 39: eval_Configure_5(V_ac,V_1,B) [0>=V_1+1,V_ac=3] 

### Ranking functions of CR eval_Configure_5(V_ac,V_1,B) 

#### Partial ranking functions of CR eval_Configure_5(V_ac,V_1,B) 


### Resulting Chains:eval_Configure_5(V_ac,V_1,B) 
* [39]
* [38]
* [37]
* [36]
* [35]
* [34]
* [33]
* [32]
* [31]
* [30]
* [29]
* [28]


### Merging Chains  eval_Configure_5/3 into  External patterns of execution 
* [[39]] --> 1 
* [[38]] --> 2 
* [[37]] --> 3 
* [[36]] --> 4 
* [[35]] --> 5 
* [[34]] --> 6 
* [[33]] --> 7 
* [[32]] --> 8 
* [[31]] --> 9 
* [[30]] --> 10 
* [[29]] --> 11 
* [[28]] --> 12 


### Specialization of cost equations eval_Configure_2/2 
* CE 2 is refined into CE [46,47,48,49,50,51,52,53,54,55,56,57] 
* CE 3 is refined into CE [58,59,60] 


#### Refined cost equations eval_Configure_2/2 
* CE 46: eval_Configure_2(V_ac,B) = 0+ eval_Configure_5(C,D,B):1
     [0>=D+1,C=3,V_ac=3] 
* CE 47: eval_Configure_2(V_ac,B) = 0+ eval_Configure_5(C,D,B):2
     [D>=1,C=3,V_ac=3] 
* CE 48: eval_Configure_2(V_ac,B) = 0+ eval_Configure_5(C,D,B):3
     [0>=D+1,C=4,V_ac=4] 
* CE 49: eval_Configure_2(V_ac,B) = 0+ eval_Configure_5(C,D,B):4
     [D>=1,C=4,V_ac=4] 
* CE 50: eval_Configure_2(V_ac,B) = 0+ eval_Configure_5(V_ac,C,B):5
     [V_ac>=3,C=0] 
* CE 51: eval_Configure_2(V_ac,B) = 0+ eval_Configure_5(V_ac,C,B):6
     [V_ac>=4,C=0] 
* CE 52: eval_Configure_2(V_ac,B) = 0+ eval_Configure_5(V_ac,C,B):7
     [V_ac>=4,0>=C+1] 
* CE 53: eval_Configure_2(V_ac,B) = 0+ eval_Configure_5(V_ac,C,B):8
     [V_ac>=5,0>=C+1] 
* CE 54: eval_Configure_2(V_ac,B) = 0+ eval_Configure_5(V_ac,C,B):9
     [V_ac>=6,0>=C+1] 
* CE 55: eval_Configure_2(V_ac,B) = 0+ eval_Configure_5(V_ac,C,B):10
     [C>=1,V_ac>=4] 
* CE 56: eval_Configure_2(V_ac,B) = 0+ eval_Configure_5(V_ac,C,B):11
     [C>=1,V_ac>=5] 
* CE 57: eval_Configure_2(V_ac,B) = 0+ eval_Configure_5(V_ac,C,B):12
     [C>=1,V_ac>=6] 
* CE 58: eval_Configure_2(V_ac,B) = 1+ eval_Configure_bb2_in(C,D,E):1
     [E=4,D=1,C=2,V_ac=2] 
* CE 59: eval_Configure_2(V_ac,B) = 1+ eval_Configure_bb2_in(V_ac,C,D):2
     [1>=V_ac,D=4,C=1] 
* CE 60: eval_Configure_2(V_ac,B) = 1+ eval_Configure_bb2_in(C,D,E):3
     [E=4,D=1,C=2,V_ac=2] 

### Cost equations --> "Loop" of eval_Configure_2/2 
* CEs [54,57] --> Loop 40 
* CEs [53,56] --> Loop 41 
* CEs [51,52,55] --> Loop 42 
* CEs [50] --> Loop 43 
* CEs [59] --> Loop 44 
* CEs [48,49] --> Loop 45 
* CEs [46,47] --> Loop 46 
* CEs [58,60] --> Loop 47 

#### Loops of eval_Configure_2/2 
* Loop 40: eval_Configure_2(V_ac,B) [V_ac>=6] 
* Loop 41: eval_Configure_2(V_ac,B) [V_ac>=5] 
* Loop 42: eval_Configure_2(V_ac,B) [V_ac>=4] 
* Loop 43: eval_Configure_2(V_ac,B) [V_ac>=3] 
* Loop 44: eval_Configure_2(V_ac,B) [1>=V_ac] 
* Loop 45: eval_Configure_2(V_ac,B) [V_ac=4] 
* Loop 46: eval_Configure_2(V_ac,B) [V_ac=3] 
* Loop 47: eval_Configure_2(V_ac,B) [V_ac=2] 

### Ranking functions of CR eval_Configure_2(V_ac,B) 

#### Partial ranking functions of CR eval_Configure_2(V_ac,B) 


### Resulting Chains:eval_Configure_2(V_ac,B) 
* [47]
* [46]
* [45]
* [44]
* [43]
* [42]
* [41]
* [40]


### Merging Chains  eval_Configure_2/2 into  External patterns of execution 
* [[47]] --> 1 
* [[46]] --> 2 
* [[45]] --> 3 
* [[44]] --> 4 
* [[43]] --> 5 
* [[42]] --> 6 
* [[41]] --> 7 
* [[40]] --> 8 


### Specialization of cost equations eval_Configure_start/2 
* CE 1 is refined into CE [61,62,63,64,65,66,67,68] 


#### Refined cost equations eval_Configure_start/2 
* CE 61: eval_Configure_start(V_ac,B) = 0+ eval_Configure_2(C,B):1
     [C=2,V_ac=2] 
* CE 62: eval_Configure_start(V_ac,B) = 0+ eval_Configure_2(C,B):2
     [C=3,V_ac=3] 
* CE 63: eval_Configure_start(V_ac,B) = 0+ eval_Configure_2(C,B):3
     [C=4,V_ac=4] 
* CE 64: eval_Configure_start(V_ac,B) = 0+ eval_Configure_2(V_ac,B):4
     [1>=V_ac] 
* CE 65: eval_Configure_start(V_ac,B) = 0+ eval_Configure_2(V_ac,B):5
     [V_ac>=3] 
* CE 66: eval_Configure_start(V_ac,B) = 0+ eval_Configure_2(V_ac,B):6
     [V_ac>=4] 
* CE 67: eval_Configure_start(V_ac,B) = 0+ eval_Configure_2(V_ac,B):7
     [V_ac>=5] 
* CE 68: eval_Configure_start(V_ac,B) = 0+ eval_Configure_2(V_ac,B):8
     [V_ac>=6] 

### Cost equations --> "Loop" of eval_Configure_start/2 
* CEs [68] --> Loop 48 
* CEs [67] --> Loop 49 
* CEs [66] --> Loop 50 
* CEs [65] --> Loop 51 
* CEs [64] --> Loop 52 
* CEs [63] --> Loop 53 
* CEs [62] --> Loop 54 
* CEs [61] --> Loop 55 

#### Loops of eval_Configure_start/2 
* Loop 48: eval_Configure_start(V_ac,B) [V_ac>=6] 
* Loop 49: eval_Configure_start(V_ac,B) [V_ac>=5] 
* Loop 50: eval_Configure_start(V_ac,B) [V_ac>=4] 
* Loop 51: eval_Configure_start(V_ac,B) [V_ac>=3] 
* Loop 52: eval_Configure_start(V_ac,B) [1>=V_ac] 
* Loop 53: eval_Configure_start(V_ac,B) [V_ac=4] 
* Loop 54: eval_Configure_start(V_ac,B) [V_ac=3] 
* Loop 55: eval_Configure_start(V_ac,B) [V_ac=2] 

### Ranking functions of CR eval_Configure_start(V_ac,B) 

#### Partial ranking functions of CR eval_Configure_start(V_ac,B) 


### Resulting Chains:eval_Configure_start(V_ac,B) 
* [55]
* [54]
* [53]
* [52]
* [51]
* [50]
* [49]
* [48]


### Merging Chains  eval_Configure_start/2 into  External patterns of execution 
* [[55]] --> 1 
* [[54]] --> 2 
* [[53]] --> 3 
* [[52]] --> 4 
* [[51]] --> 5 
* [[50]] --> 6 
* [[49]] --> 7 
* [[48]] --> 8 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 18 

#### Computing cost of phase [16] 

#### Simplifying cost structure of CE 19 

#### Cost of loops [16] 

 * loop 16:eval_Configure_bb7_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,B,C,D,E,F,G,H,I) -> [eval_Configure_bb7_in(V_ac',V_CLcount_2',V_4',V_7',V_9',V_NumberParams_0',B',C',D',E',F',G',H',I')] 
1
##### Pending set eval_Configure_bb7_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,B,C,D,E,F,G,H,I)
* Psum in Loop 16: [it(16)=<1]

###### Computing sum for it(16)=<1  in Loop 16 
   - Applying inductive sum strategy 
     - head Candidate: V_ac-V_NumberParams_0 
     - head Candidate: V_ac-V_NumberParams_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_ac-V_NumberParams_0 
     - tail Candidate: V_ac-V_NumberParams_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(16)=<V_ac-V_NumberParams_0,it(16)=<V_ac-V_NumberParams_0,it(16)=<V_ac-V_NumberParams_0-V_ac'+V_NumberParams_0',it(16)=<V_ac-V_NumberParams_0-V_ac'+V_NumberParams_0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [16] 

#### Simplifying cost structure of phase [16] 

#### Cost of phase [16]:eval_Configure_bb7_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,B,C,D,E,F,G,H,I) -> [eval_Configure_bb7_in(V_ac',V_CLcount_2',V_4',V_7',V_9',V_NumberParams_0',B',C',D',E',F',G',H',I')] 
1*it(16)+0
  Such that:it(16) =< V_ac-V_NumberParams_0
it(16) =< V_ac-V_NumberParams_0-V_ac'+V_NumberParams_0'

#### Simplifying cost structure of chain [[16],18] 

#### Simplifying cost structure of CE 17 

#### Found solution for phase  [16] in the cache 

#### Cost of phase [16]:eval_Configure_bb7_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,B,C,D,E,F,G,H,I) -> [eval_Configure_bb7_in(V_ac',V_CLcount_2',V_4',V_7',V_9',V_NumberParams_0',B',C',D',E',F',G',H',I')] 
1*it(16)+0
  Such that:it(16) =< V_ac-V_NumberParams_0
it(16) =< V_ac-V_NumberParams_0-V_ac'+V_NumberParams_0'

#### Simplifying cost structure of chain [[16],17] 

#### Cost of chains of eval_Configure_bb7_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,B,C,D,E,F,G,H,I):
* Chain [[16],18]: 1*it(16)+0
  Such that:it(16) =< V_ac-V_NumberParams_0

  with precondition: [V_4=0,B=2,E=0,V_CLcount_2+1=V_9,V_ac=C,V_CLcount_2=D,V_7=F,V_CLcount_2+1=G,V_ac=H,V_CLcount_2+1=I,V_NumberParams_0>=V_CLcount_2+1,V_ac>=V_NumberParams_0+1] 

* Chain [[16],17]: 1*it(16)+0
  Such that:it(16) =< -V_NumberParams_0+H

  with precondition: [V_4=0,B=2,E=0,V_CLcount_2+1=V_9,V_ac=C,V_CLcount_2=D,V_7=F,V_CLcount_2+1=G,V_CLcount_2+1=I,V_NumberParams_0>=V_CLcount_2+1,H>=V_NumberParams_0+1,V_ac>=H+1] 

* Chain [18]: 0
  with precondition: [V_4=0,B=2,E=0,V_NumberParams_0=V_ac,F=V_7,V_CLcount_2+1=V_9,V_NumberParams_0=C,V_CLcount_2=D,V_CLcount_2+1=G,V_NumberParams_0=H,V_CLcount_2+1=I,V_NumberParams_0>=V_CLcount_2+1] 

* Chain [17]: 0
  with precondition: [V_4=0,B=2,E=0,F=V_7,V_CLcount_2+1=V_9,V_ac=C,V_CLcount_2=D,V_CLcount_2+1=G,V_NumberParams_0=H,V_CLcount_2+1=I,V_NumberParams_0>=V_CLcount_2+1,V_ac>=V_NumberParams_0+1] 


#### Simplifying cost structure of CE 20 

#### Computing cost of phase [19] 

#### Simplifying cost structure of CE 21 

#### Cost of loops [19] 

 * loop 19:eval_Configure__critedge_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,V_CLcount_3,B,C,D) -> [eval_Configure__critedge_in(V_ac',V_CLcount_2',V_4',V_7',V_9',V_NumberParams_0',V_CLcount_3',B',C',D')] 
1
##### Pending set eval_Configure__critedge_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,V_CLcount_3,B,C,D)
* Psum in Loop 19: [it(19)=<1]

###### Computing sum for it(19)=<1  in Loop 19 
   - Applying inductive sum strategy 
     - head Candidate: V_NumberParams_0-V_CLcount_3 
     - head Candidate: V_NumberParams_0-V_CLcount_3 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_NumberParams_0-V_CLcount_3 
     - tail Candidate: V_NumberParams_0-V_CLcount_3 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(19)=<V_NumberParams_0-V_CLcount_3,it(19)=<V_NumberParams_0-V_CLcount_3,it(19)=<V_NumberParams_0-V_CLcount_3-V_NumberParams_0'+V_CLcount_3',it(19)=<V_NumberParams_0-V_CLcount_3-V_NumberParams_0'+V_CLcount_3'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [19] 

#### Simplifying cost structure of phase [19] 

#### Cost of phase [19]:eval_Configure__critedge_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,V_CLcount_3,B,C,D) -> [eval_Configure__critedge_in(V_ac',V_CLcount_2',V_4',V_7',V_9',V_NumberParams_0',V_CLcount_3',B',C',D')] 
1*it(19)+0
  Such that:it(19) =< V_NumberParams_0-V_CLcount_3
it(19) =< V_NumberParams_0-V_CLcount_3-V_NumberParams_0'+V_CLcount_3'

#### Simplifying cost structure of chain [[19],20] 

#### Cost of chains of eval_Configure__critedge_in(V_ac,V_CLcount_2,V_4,V_7,V_9,V_NumberParams_0,V_CLcount_3,B,C,D):
* Chain [[19],20]: 1*it(19)+0
  Such that:it(19) =< V_NumberParams_0-V_CLcount_3

  with precondition: [B=3,V_ac=C,V_NumberParams_0=D,V_NumberParams_0>=V_CLcount_3+1] 

* Chain [20]: 0
  with precondition: [B=3,C=V_ac,V_CLcount_3=D,V_CLcount_3>=V_NumberParams_0] 


#### Simplifying cost structure of CE 23 

#### Computing cost of phase [21,22,23] 
 * Renamed intermediate variables: 
[(eq(27,1),it(16))>>s(1)]
 * Renamed intermediate variables: 
[(eq(27,2),it(19))>>s(2)]

#### Simplifying cost structure of CE 27 
 * Joined equivalent variables [s(1),s(2)] into s(1)
 * Renamed intermediate variables: 
[(eq(31,1),it(16))>>s(3)]
 * Renamed intermediate variables: 
[(eq(31,2),it(19))>>s(4)]

#### Simplifying cost structure of CE 31 
 * Joined equivalent variables [s(3),s(4)] into s(3)
 * Joined equivalent variables [aux(3),aux(1),aux(2)] into aux(3)
 * Joined equivalent variables [s(1),s(3)] into s(1)
 * Renamed intermediate variables: 
[(it(21),aux(3))>>s(5),(it(21),s(1))>>s(6)]

#### Simplifying cost structure of CE 25 

#### Simplifying cost structure of CE 29 

#### Simplifying cost structure of CE 32 

#### Cost of loops [21,22,23] 

 * loop 21:eval_Configure_bb2_in(V_ac,V_CLcount_2,B) -> [eval_Configure_bb2_in(V_ac',V_CLcount_2',B')] 
4*s(6)+3
  Such that:s(5) =< -V_CLcount_2+V_CLcount_2'
s(6) =< s(5)

 * loop 22:eval_Configure_bb2_in(V_ac,V_CLcount_2,B) -> [eval_Configure_bb2_in(V_ac',V_CLcount_2',B')] 
3
 * loop 23:eval_Configure_bb2_in(V_ac,V_CLcount_2,B) -> [eval_Configure_bb2_in(V_ac',V_CLcount_2',B')] 
1
##### Pending set eval_Configure_bb2_in(V_ac,V_CLcount_2,B)
* Psum in Loop 21: [it(21)=<1,s(8)=< -V_CLcount_2+V_CLcount_2']
* Psum in Loop 22: [it(22)=<1]
* Psum in Loop 23: [it(23)=<1]

###### Computing sum for it(21)=<1  in Loop 21 
   - Applying inductive sum strategy 
     - head Candidate: V_ac-V_CLcount_2 
       - Loop 22 is collaborative and bounds [it(22)] 
       - Loop 23 is collaborative and bounds [it(23)] 
     - head Candidate: V_ac/2-V_CLcount_2/2-1 
       - Loop 22 is collaborative
       - Loop 23 is collaborative
     - tail Candidate: V_ac-V_CLcount_2 
       - Loop 22 is collaborative and bounds [it(22)] 
       - Loop 23 is collaborative and bounds [it(23)] 
     - tail Candidate: V_ac/2-V_CLcount_2/2-1 
       - Loop 22 is collaborative
       - Loop 23 is collaborative and bounds [it(23)] 
 * Adding constraints: [it(21)+it(22)+it(23)=<V_ac-V_CLcount_2,it(21)=<V_ac/2-V_CLcount_2/2-1,it(21)+it(22)+it(23)=<V_ac-V_CLcount_2-V_ac'+V_CLcount_2',it(21)+it(23)=<V_ac/2-V_CLcount_2/2-V_ac'/2+V_CLcount_2'/2] 

##### Pending set eval_Configure_0(V_ac,B)
* Psum in Loop 21: [s(8)=< -V_CLcount_2+V_CLcount_2']
* Psum in Loop 22: [it(22)=<1]
* Psum in Loop 23: [it(23)=<1]

###### Computing sum for s(8)=< -V_CLcount_2+V_CLcount_2'  in Loop 21 
   - Applying inductive sum strategy 
     - head Candidate: V_ac-V_CLcount_2-1 
       - Loop 22 is collaborative and bounds [it(22)] 
       - Loop 23 is collaborative
     - tail Candidate: V_ac-V_CLcount_2-1 
       - Loop 22 is collaborative and bounds [it(22)] 
       - Loop 23 is collaborative and bounds [it(23)] 
 * Adding constraints: [it(22)+s(8)=<V_ac-V_CLcount_2-1,it(22)+it(23)+s(8)=<V_ac-V_CLcount_2-V_ac'+V_CLcount_2'] 

##### Pending set eval_Configure_0(V_ac,B)
* Psum in Loop 22: [it(22)=<1]
* Psum in Loop 23: [it(23)=<1]

###### Computing sum for it(22)=<1  in Loop 22 
   - Applying inductive sum strategy 
     - head Candidate: V_ac-V_CLcount_2 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_ac-V_CLcount_2-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_ac-V_CLcount_2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_ac-V_CLcount_2-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(21)+it(22)+it(23)=<V_ac-V_CLcount_2,it(22)+s(8)=<V_ac-V_CLcount_2-1,it(21)+it(22)+it(23)=<V_ac-V_CLcount_2-V_ac'+V_CLcount_2',it(22)+it(23)+s(8)=<V_ac-V_CLcount_2-V_ac'+V_CLcount_2'] 

##### Pending set eval_Configure_0(V_ac,B)
* Psum in Loop 23: [it(23)=<1]

###### Computing sum for it(23)=<1  in Loop 23 
   - Applying inductive sum strategy 
     - head Candidate: V_ac-V_CLcount_2 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_ac/2-V_CLcount_2/2 
       - Loop 21 is collaborative
       - Loop 22 is collaborative
     - tail Candidate: V_ac-V_CLcount_2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_ac/2-V_CLcount_2/2 
       - Loop 21 is collaborative
       - Loop 22 is collaborative
 * Adding constraints: [it(21)+it(22)+it(23)=<V_ac-V_CLcount_2,it(23)=<V_ac/2-V_CLcount_2/2,it(21)+it(22)+it(23)=<V_ac-V_CLcount_2-V_ac'+V_CLcount_2',it(23)=<V_ac/2-V_CLcount_2/2-V_ac'/2+V_CLcount_2'/2] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [21,22,23] 

#### Simplifying cost structure of phase [21,22,23] 
 * Joined equivalent variables [it(21),it(23)] into it(21)

#### Cost of phase [21,22,23]:eval_Configure_bb2_in(V_ac,V_CLcount_2,B) -> [eval_Configure_bb2_in(V_ac',V_CLcount_2',B')] 
4*it(21)+3*it(22)+4*s(7)+0
  Such that:aux(4) =< V_ac-V_CLcount_2
aux(5) =< V_ac-V_CLcount_2-V_ac'+V_CLcount_2'
aux(6) =< V_ac/2-V_CLcount_2/2
aux(7) =< V_ac/2-V_CLcount_2/2-V_ac'/2+V_CLcount_2'/2
it(21) =< aux(4)
it(22) =< aux(4)
s(8) =< aux(4)
it(21) =< aux(5)
it(22) =< aux(5)
s(8) =< aux(5)
it(21) =< aux(6)
it(21) =< aux(7)
s(7) =< s(8)

#### Simplifying cost structure of chain [[21,22,23],27] 

#### Simplifying cost structure of CE 22 

#### Found solution for phase  [21,22,23] in the cache 

#### Cost of phase [21,22,23]:eval_Configure_bb2_in(V_ac,V_CLcount_2,B) -> [eval_Configure_bb2_in(V_ac',V_CLcount_2',B')] 
4*it(21)+3*it(22)+4*s(7)+0
  Such that:aux(4) =< V_ac-V_CLcount_2
aux(5) =< V_ac-V_CLcount_2-V_ac'+V_CLcount_2'
aux(6) =< V_ac/2-V_CLcount_2/2
aux(7) =< V_ac/2-V_CLcount_2/2-V_ac'/2+V_CLcount_2'/2
it(21) =< aux(4)
it(22) =< aux(4)
s(8) =< aux(4)
it(21) =< aux(5)
it(22) =< aux(5)
s(8) =< aux(5)
it(21) =< aux(6)
it(21) =< aux(7)
s(7) =< s(8)

#### Simplifying cost structure of chain [[21,22,23],26] 
 * Joined equivalent variables [aux(8),aux(4),aux(5)] into aux(8)
 * Joined equivalent variables [aux(9),aux(6),aux(7)] into aux(9)
 * Joined equivalent variables [aux(8),s(8)] into aux(8)
 * Joined equivalent variables [it(22),s(7)] into it(22)

#### Simplifying cost structure of CE 24 

#### Simplifying cost structure of CE 28 

#### Simplifying cost structure of chain [25,27] 

#### Found solution for phase  [21,22,23] in the cache 

#### Cost of phase [21,22,23]:eval_Configure_bb2_in(V_ac,V_CLcount_2,B) -> [eval_Configure_bb2_in(V_ac',V_CLcount_2',B')] 
4*it(21)+3*it(22)+4*s(7)+0
  Such that:aux(4) =< V_ac-V_CLcount_2
aux(5) =< V_ac-V_CLcount_2-V_ac'+V_CLcount_2'
aux(6) =< V_ac/2-V_CLcount_2/2
aux(7) =< V_ac/2-V_CLcount_2/2-V_ac'/2+V_CLcount_2'/2
it(21) =< aux(4)
it(22) =< aux(4)
s(8) =< aux(4)
it(21) =< aux(5)
it(22) =< aux(5)
s(8) =< aux(5)
it(21) =< aux(6)
it(21) =< aux(7)
s(7) =< s(8)

#### Simplifying cost structure of chain [[21,22,23],25,27] 
 * Joined equivalent variables [aux(10),aux(4),aux(5)] into aux(10)
 * Joined equivalent variables [aux(11),aux(6),aux(7)] into aux(11)
 * Joined equivalent variables [aux(10),s(8)] into aux(10)
 * Joined equivalent variables [it(22),s(7)] into it(22)
 * Renamed intermediate variables: 
[(eq(26,1),it(16))>>s(9)]
 * Renamed intermediate variables: 
[(eq(26,2),it(19))>>s(10)]

#### Simplifying cost structure of CE 26 
 * Joined equivalent variables [s(9),s(10)] into s(9)
 * Renamed intermediate variables: 
[(eq(30,1),it(16))>>s(11)]
 * Renamed intermediate variables: 
[(eq(30,2),it(19))>>s(12)]

#### Simplifying cost structure of CE 30 
 * Joined equivalent variables [s(11),s(12)] into s(11)
 * Joined equivalent variables [aux(14),aux(12),aux(13)] into aux(14)
 * Joined equivalent variables [s(9),s(11)] into s(9)

#### Simplifying cost structure of chain [24,27] 

#### Found solution for phase  [21,22,23] in the cache 

#### Cost of phase [21,22,23]:eval_Configure_bb2_in(V_ac,V_CLcount_2,B) -> [eval_Configure_bb2_in(V_ac',V_CLcount_2',B')] 
4*it(21)+3*it(22)+4*s(7)+0
  Such that:aux(4) =< V_ac-V_CLcount_2
aux(5) =< V_ac-V_CLcount_2-V_ac'+V_CLcount_2'
aux(6) =< V_ac/2-V_CLcount_2/2
aux(7) =< V_ac/2-V_CLcount_2/2-V_ac'/2+V_CLcount_2'/2
it(21) =< aux(4)
it(22) =< aux(4)
s(8) =< aux(4)
it(21) =< aux(5)
it(22) =< aux(5)
s(8) =< aux(5)
it(21) =< aux(6)
it(21) =< aux(7)
s(7) =< s(8)

#### Simplifying cost structure of chain [[21,22,23],24,27] 
 * Joined equivalent variables [aux(15),aux(4),aux(5),aux(14)] into aux(15)
 * Joined equivalent variables [aux(16),aux(6)] into aux(16)
 * Joined equivalent variables [aux(15),s(8)] into aux(15)
 * Joined equivalent variables [it(22),s(9)] into it(22)
 * Joined equivalent variables [it(22),s(7)] into it(22)
 * Renamed intermediate variables: 
[(ch([[21,22,23],27]),aux(4))>>s(13),(ch([[21,22,23],27]),aux(5))>>s(14),(ch([[21,22,23],27]),aux(6))>>s(15),(ch([[21,22,23],27]),aux(7))>>s(16),(ch([[21,22,23],27]),it(21))>>s(17),(ch([[21,22,23],27]),it(22))>>s(18),(ch([[21,22,23],27]),s(8))>>s(19),(ch([[21,22,23],27]),s(7))>>s(20)]
 * Renamed intermediate variables: 
[(ch([24,27]),aux(14))>>s(21),(ch([24,27]),s(9))>>s(22)]
 * Renamed intermediate variables: 
[(ch([[21,22,23],25,27]),aux(10))>>s(23),(ch([[21,22,23],25,27]),aux(11))>>s(24),(ch([[21,22,23],25,27]),it(21))>>s(25),(ch([[21,22,23],25,27]),it(22))>>s(26)]
 * Renamed intermediate variables: 
[(ch([[21,22,23],26]),aux(8))>>s(27),(ch([[21,22,23],26]),aux(9))>>s(28),(ch([[21,22,23],26]),it(21))>>s(29),(ch([[21,22,23],26]),it(22))>>s(30)]
 * Joined equivalent variables [aux(17),s(21),s(23),s(27)] into aux(17)
 * Joined equivalent variables [aux(18),s(24),s(28)] into aux(18)
 * Joined equivalent variables [s(22),s(26),s(30)] into s(22)
 * Joined equivalent variables [s(25),s(29)] into s(25)

#### Cost of chains of eval_Configure_bb2_in(V_ac,V_CLcount_2,B):
* Chain [[21,22,23],27]: 4*it(21)+3*it(22)+4*s(7)+0
  Such that:aux(4) =< V_ac-V_CLcount_2
aux(5) =< V_ac-V_CLcount_2+1
aux(6) =< V_ac/2-V_CLcount_2/2
aux(7) =< V_ac/2-V_CLcount_2/2+1/2
it(21) =< aux(4)
it(22) =< aux(4)
s(8) =< aux(4)
it(21) =< aux(5)
it(22) =< aux(5)
s(8) =< aux(5)
it(21) =< aux(6)
it(21) =< aux(7)
s(7) =< s(8)

  with precondition: [B=4,V_CLcount_2>=1,V_ac>=V_CLcount_2+1] 

* Chain [[21,22,23],26]: 4*it(21)+7*it(22)+0
  Such that:aux(8) =< V_ac-V_CLcount_2
aux(9) =< V_ac/2-V_CLcount_2/2
it(21) =< aux(8)
it(22) =< aux(8)
it(21) =< aux(9)

  with precondition: [B=4,V_CLcount_2>=1,V_ac>=V_CLcount_2+2] 

* Chain [[21,22,23],25,27]: 4*it(21)+7*it(22)+3
  Such that:aux(10) =< V_ac-V_CLcount_2
aux(11) =< V_ac/2-V_CLcount_2/2
it(21) =< aux(10)
it(22) =< aux(10)
it(21) =< aux(11)

  with precondition: [B=4,V_CLcount_2>=1,V_ac>=V_CLcount_2+2] 

* Chain [[21,22,23],24,27]: 4*it(21)+11*it(22)+3
  Such that:aux(15) =< V_ac-V_CLcount_2
aux(16) =< V_ac/2-V_CLcount_2/2
aux(7) =< aux(15)
aux(7) =< aux(16)
it(22) =< aux(15)
it(21) =< aux(15)
it(21) =< aux(16)
it(21) =< aux(7)

  with precondition: [B=4,V_CLcount_2>=1,V_ac>=V_CLcount_2+3] 

* Chain [27]: 0
  with precondition: [B=4,V_CLcount_2>=1,V_CLcount_2>=V_ac] 

* Chain [26]: 0
  with precondition: [B=4,V_CLcount_2>=1,V_ac>=V_CLcount_2+1] 

* Chain [25,27]: 3
  with precondition: [B=4,V_CLcount_2+1=V_ac,V_CLcount_2>=1] 

* Chain [24,27]: 4*s(9)+3
  Such that:aux(14) =< V_ac-V_CLcount_2
s(9) =< aux(14)

  with precondition: [B=4,V_CLcount_2>=1,V_ac>=V_CLcount_2+2] 


#### Simplifying cost structure of CE 39 

#### Simplifying cost structure of CE 34 

#### Simplifying cost structure of CE 38 

#### Simplifying cost structure of CE 33 
 * Renamed intermediate variables: 
[(eq(43,1),s(13))>>s(31),(eq(43,1),s(14))>>s(32),(eq(43,1),s(15))>>s(33),(eq(43,1),s(16))>>s(34),(eq(43,1),s(17))>>s(35),(eq(43,1),s(18))>>s(36),(eq(43,1),s(19))>>s(37),(eq(43,1),s(20))>>s(38)]

#### Simplifying cost structure of CE 43 
 * Joined equivalent variables [aux(19),s(31),s(32)] into aux(19)
 * Joined equivalent variables [aux(20),s(33),s(34)] into aux(20)
 * Joined equivalent variables [aux(19),s(37)] into aux(19)
 * Joined equivalent variables [s(36),s(38)] into s(36)
 * Renamed intermediate variables: 
[(eq(44,1),aux(17))>>s(39),(eq(44,1),aux(18))>>s(40),(eq(44,1),s(22))>>s(41),(eq(44,1),s(25))>>s(42)]

#### Simplifying cost structure of CE 44 
 * Joined equivalent variables [aux(21),aux(19),s(39)] into aux(21)
 * Joined equivalent variables [aux(22),aux(20),s(40)] into aux(22)
 * Joined equivalent variables [s(36),s(41)] into s(36)
 * Joined equivalent variables [s(35),s(42)] into s(35)
 * Renamed intermediate variables: 
[(eq(45,1),aux(15))>>s(43),(eq(45,1),aux(16))>>s(44),(eq(45,1),aux(7))>>s(45),(eq(45,1),it(22))>>s(46),(eq(45,1),it(21))>>s(47)]

#### Simplifying cost structure of CE 45 
 * Renamed intermediate variables: 
[(eq(40,1),s(13))>>s(48),(eq(40,1),s(14))>>s(49),(eq(40,1),s(15))>>s(50),(eq(40,1),s(16))>>s(51),(eq(40,1),s(17))>>s(52),(eq(40,1),s(18))>>s(53),(eq(40,1),s(19))>>s(54),(eq(40,1),s(20))>>s(55)]

#### Simplifying cost structure of CE 40 
 * Joined equivalent variables [aux(23),s(48),s(49)] into aux(23)
 * Joined equivalent variables [aux(24),s(50),s(51)] into aux(24)
 * Joined equivalent variables [aux(23),s(54)] into aux(23)
 * Joined equivalent variables [s(53),s(55)] into s(53)
 * Renamed intermediate variables: 
[(eq(41,1),aux(17))>>s(56),(eq(41,1),aux(18))>>s(57),(eq(41,1),s(22))>>s(58),(eq(41,1),s(25))>>s(59)]

#### Simplifying cost structure of CE 41 
 * Renamed intermediate variables: 
[(eq(42,1),aux(15))>>s(60),(eq(42,1),aux(16))>>s(61),(eq(42,1),aux(7))>>s(62),(eq(42,1),it(22))>>s(63),(eq(42,1),it(21))>>s(64)]

#### Simplifying cost structure of CE 42 
 * Renamed intermediate variables: 
[(eq(35,1),s(13))>>s(65),(eq(35,1),s(14))>>s(66),(eq(35,1),s(15))>>s(67),(eq(35,1),s(16))>>s(68),(eq(35,1),s(17))>>s(69),(eq(35,1),s(18))>>s(70),(eq(35,1),s(19))>>s(71),(eq(35,1),s(20))>>s(72)]

#### Simplifying cost structure of CE 35 
 * Joined equivalent variables [aux(25),s(65),s(66)] into aux(25)
 * Joined equivalent variables [aux(26),s(67),s(68)] into aux(26)
 * Joined equivalent variables [aux(25),s(71)] into aux(25)
 * Joined equivalent variables [s(70),s(72)] into s(70)
 * Renamed intermediate variables: 
[(eq(36,1),aux(17))>>s(73),(eq(36,1),aux(18))>>s(74),(eq(36,1),s(22))>>s(75),(eq(36,1),s(25))>>s(76)]

#### Simplifying cost structure of CE 36 
 * Renamed intermediate variables: 
[(eq(37,1),aux(15))>>s(77),(eq(37,1),aux(16))>>s(78),(eq(37,1),aux(7))>>s(79),(eq(37,1),it(22))>>s(80),(eq(37,1),it(21))>>s(81)]

#### Simplifying cost structure of CE 37 

#### Cost of chains of eval_Configure_5(V_ac,V_1,B):
* Chain [39]: 1
  with precondition: [V_ac=3,0>=V_1+1] 

* Chain [38]: 1
  with precondition: [V_ac=3,V_1>=1] 

* Chain [37]: 4
  with precondition: [V_ac=4,0>=V_1+1] 

* Chain [36]: 4
  with precondition: [V_ac=4,V_1>=1] 

* Chain [35]: 12*s(35)+25*s(36)+4
  Such that:aux(21) =< V_ac
aux(22) =< V_ac/2
s(35) =< aux(21)
s(36) =< aux(21)
s(35) =< aux(22)

  with precondition: [V_1=0,V_ac>=3] 

* Chain [34]: 11*s(46)+4*s(47)+4
  Such that:s(43) =< V_ac
s(44) =< V_ac/2
s(45) =< s(43)
s(45) =< s(44)
s(46) =< s(43)
s(47) =< s(43)
s(47) =< s(44)
s(47) =< s(45)

  with precondition: [V_1=0,V_ac>=4] 

* Chain [33]: 4*s(52)+7*s(53)+1
  Such that:aux(23) =< V_ac
aux(24) =< V_ac/2
s(52) =< aux(23)
s(53) =< aux(23)
s(52) =< aux(24)

  with precondition: [0>=V_1+1,V_ac>=4] 

* Chain [32]: 18*s(58)+8*s(59)+4
  Such that:s(56) =< V_ac
s(57) =< V_ac/2
s(58) =< s(56)
s(59) =< s(56)
s(59) =< s(57)

  with precondition: [0>=V_1+1,V_ac>=5] 

* Chain [31]: 11*s(63)+4*s(64)+4
  Such that:s(60) =< V_ac
s(61) =< V_ac/2
s(62) =< s(60)
s(62) =< s(61)
s(63) =< s(60)
s(64) =< s(60)
s(64) =< s(61)
s(64) =< s(62)

  with precondition: [0>=V_1+1,V_ac>=6] 

* Chain [30]: 4*s(69)+7*s(70)+1
  Such that:aux(25) =< V_ac
aux(26) =< V_ac/2
s(69) =< aux(25)
s(70) =< aux(25)
s(69) =< aux(26)

  with precondition: [V_ac>=4,V_1>=1] 

* Chain [29]: 18*s(75)+8*s(76)+4
  Such that:s(73) =< V_ac
s(74) =< V_ac/2
s(75) =< s(73)
s(76) =< s(73)
s(76) =< s(74)

  with precondition: [V_ac>=5,V_1>=1] 

* Chain [28]: 11*s(80)+4*s(81)+4
  Such that:s(77) =< V_ac
s(78) =< V_ac/2
s(79) =< s(77)
s(79) =< s(78)
s(80) =< s(77)
s(81) =< s(77)
s(81) =< s(78)
s(81) =< s(79)

  with precondition: [V_ac>=6,V_1>=1] 


#### Simplifying cost structure of CE 58 
 * Renamed intermediate variables: 
[(eq(60,1),s(13))>>s(82),(eq(60,1),s(14))>>s(83),(eq(60,1),s(15))>>s(84),(eq(60,1),s(16))>>s(85),(eq(60,1),s(17))>>s(86),(eq(60,1),s(18))>>s(87),(eq(60,1),s(19))>>s(88),(eq(60,1),s(20))>>s(89)]

#### Simplifying cost structure of CE 60 
 * Joined equivalent variables [aux(27),s(82),s(85)] into aux(27)

#### Simplifying cost structure of CE 46 

#### Simplifying cost structure of CE 47 

#### Simplifying cost structure of CE 48 

#### Simplifying cost structure of CE 49 

#### Simplifying cost structure of CE 59 
 * Renamed intermediate variables: 
[(eq(50,1),aux(21))>>s(90),(eq(50,1),aux(22))>>s(91),(eq(50,1),s(35))>>s(92),(eq(50,1),s(36))>>s(93)]

#### Simplifying cost structure of CE 50 
 * Renamed intermediate variables: 
[(eq(51,1),s(43))>>s(94),(eq(51,1),s(44))>>s(95),(eq(51,1),s(45))>>s(96),(eq(51,1),s(46))>>s(97),(eq(51,1),s(47))>>s(98)]

#### Simplifying cost structure of CE 51 
 * Renamed intermediate variables: 
[(eq(52,1),aux(23))>>s(99),(eq(52,1),aux(24))>>s(100),(eq(52,1),s(52))>>s(101),(eq(52,1),s(53))>>s(102)]

#### Simplifying cost structure of CE 52 
 * Renamed intermediate variables: 
[(eq(55,1),aux(25))>>s(103),(eq(55,1),aux(26))>>s(104),(eq(55,1),s(69))>>s(105),(eq(55,1),s(70))>>s(106)]

#### Simplifying cost structure of CE 55 
 * Joined equivalent variables [aux(28),s(94),s(99),s(103)] into aux(28)
 * Joined equivalent variables [aux(29),s(95),s(100),s(104)] into aux(29)
 * Joined equivalent variables [s(97),s(102),s(106)] into s(97)
 * Joined equivalent variables [s(101),s(105)] into s(101)
 * Renamed intermediate variables: 
[(eq(53,1),s(56))>>s(107),(eq(53,1),s(57))>>s(108),(eq(53,1),s(58))>>s(109),(eq(53,1),s(59))>>s(110)]

#### Simplifying cost structure of CE 53 
 * Renamed intermediate variables: 
[(eq(56,1),s(73))>>s(111),(eq(56,1),s(74))>>s(112),(eq(56,1),s(75))>>s(113),(eq(56,1),s(76))>>s(114)]

#### Simplifying cost structure of CE 56 
 * Joined equivalent variables [aux(30),s(107),s(111)] into aux(30)
 * Joined equivalent variables [aux(31),s(108),s(112)] into aux(31)
 * Joined equivalent variables [s(109),s(113)] into s(109)
 * Joined equivalent variables [s(110),s(114)] into s(110)
 * Renamed intermediate variables: 
[(eq(54,1),s(60))>>s(115),(eq(54,1),s(61))>>s(116),(eq(54,1),s(62))>>s(117),(eq(54,1),s(63))>>s(118),(eq(54,1),s(64))>>s(119)]

#### Simplifying cost structure of CE 54 
 * Renamed intermediate variables: 
[(eq(57,1),s(77))>>s(120),(eq(57,1),s(78))>>s(121),(eq(57,1),s(79))>>s(122),(eq(57,1),s(80))>>s(123),(eq(57,1),s(81))>>s(124)]

#### Simplifying cost structure of CE 57 
 * Joined equivalent variables [aux(32),s(115),s(120)] into aux(32)
 * Joined equivalent variables [aux(33),s(116),s(121)] into aux(33)
 * Joined equivalent variables [s(118),s(123)] into s(118)
 * Joined equivalent variables [s(117),s(122)] into s(117)
 * Joined equivalent variables [s(119),s(124)] into s(119)

#### Cost of chains of eval_Configure_2(V_ac,B):
* Chain [47]: 15
  with precondition: [V_ac=2] 

* Chain [46]: 1
  with precondition: [V_ac=3] 

* Chain [45]: 4
  with precondition: [V_ac=4] 

* Chain [44]: 1
  with precondition: [1>=V_ac] 

* Chain [43]: 12*s(92)+25*s(93)+4
  Such that:s(90) =< V_ac
s(91) =< V_ac/2
s(92) =< s(90)
s(93) =< s(90)
s(92) =< s(91)

  with precondition: [V_ac>=3] 

* Chain [42]: 25*s(97)+4*s(98)+8*s(101)+4
  Such that:aux(28) =< V_ac
aux(29) =< V_ac/2
s(96) =< aux(28)
s(96) =< aux(29)
s(97) =< aux(28)
s(98) =< aux(28)
s(98) =< aux(29)
s(98) =< s(96)
s(101) =< aux(28)
s(101) =< aux(29)

  with precondition: [V_ac>=4] 

* Chain [41]: 36*s(109)+16*s(110)+4
  Such that:aux(30) =< V_ac
aux(31) =< V_ac/2
s(109) =< aux(30)
s(110) =< aux(30)
s(110) =< aux(31)

  with precondition: [V_ac>=5] 

* Chain [40]: 22*s(118)+8*s(119)+4
  Such that:aux(32) =< V_ac
aux(33) =< V_ac/2
s(117) =< aux(32)
s(117) =< aux(33)
s(118) =< aux(32)
s(119) =< aux(32)
s(119) =< aux(33)
s(119) =< s(117)

  with precondition: [V_ac>=6] 


#### Simplifying cost structure of CE 61 

#### Simplifying cost structure of CE 62 

#### Simplifying cost structure of CE 63 

#### Simplifying cost structure of CE 64 
 * Renamed intermediate variables: 
[(eq(65,1),s(90))>>s(125),(eq(65,1),s(91))>>s(126),(eq(65,1),s(92))>>s(127),(eq(65,1),s(93))>>s(128)]

#### Simplifying cost structure of CE 65 
 * Renamed intermediate variables: 
[(eq(66,1),aux(28))>>s(129),(eq(66,1),aux(29))>>s(130),(eq(66,1),s(96))>>s(131),(eq(66,1),s(97))>>s(132),(eq(66,1),s(98))>>s(133),(eq(66,1),s(101))>>s(134)]

#### Simplifying cost structure of CE 66 
 * Renamed intermediate variables: 
[(eq(67,1),aux(30))>>s(135),(eq(67,1),aux(31))>>s(136),(eq(67,1),s(109))>>s(137),(eq(67,1),s(110))>>s(138)]

#### Simplifying cost structure of CE 67 
 * Renamed intermediate variables: 
[(eq(68,1),aux(32))>>s(139),(eq(68,1),aux(33))>>s(140),(eq(68,1),s(117))>>s(141),(eq(68,1),s(118))>>s(142),(eq(68,1),s(119))>>s(143)]

#### Simplifying cost structure of CE 68 

#### Cost of chains of eval_Configure_start(V_ac,B):
* Chain [55]: 15
  with precondition: [V_ac=2] 

* Chain [54]: 1
  with precondition: [V_ac=3] 

* Chain [53]: 4
  with precondition: [V_ac=4] 

* Chain [52]: 1
  with precondition: [1>=V_ac] 

* Chain [51]: 12*s(127)+25*s(128)+4
  Such that:s(125) =< V_ac
s(126) =< V_ac/2
s(127) =< s(125)
s(128) =< s(125)
s(127) =< s(126)

  with precondition: [V_ac>=3] 

* Chain [50]: 25*s(132)+4*s(133)+8*s(134)+4
  Such that:s(129) =< V_ac
s(130) =< V_ac/2
s(131) =< s(129)
s(131) =< s(130)
s(132) =< s(129)
s(133) =< s(129)
s(133) =< s(130)
s(133) =< s(131)
s(134) =< s(129)
s(134) =< s(130)

  with precondition: [V_ac>=4] 

* Chain [49]: 36*s(137)+16*s(138)+4
  Such that:s(135) =< V_ac
s(136) =< V_ac/2
s(137) =< s(135)
s(138) =< s(135)
s(138) =< s(136)

  with precondition: [V_ac>=5] 

* Chain [48]: 22*s(142)+8*s(143)+4
  Such that:s(139) =< V_ac
s(140) =< V_ac/2
s(141) =< s(139)
s(141) =< s(140)
s(142) =< s(139)
s(143) =< s(139)
s(143) =< s(140)
s(143) =< s(141)

  with precondition: [V_ac>=6] 


Closed-form bounds of eval_Configure_start(V_ac,B): 
-------------------------------------
* Chain [55] with precondition: [V_ac=2] 
    - Upper bound: 15 
    - Complexity: constant 
* Chain [54] with precondition: [V_ac=3] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [53] with precondition: [V_ac=4] 
    - Upper bound: 4 
    - Complexity: constant 
* Chain [52] with precondition: [1>=V_ac] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [51] with precondition: [V_ac>=3] 
    - Upper bound: 37*V_ac+4 
    - Complexity: n 
* Chain [50] with precondition: [V_ac>=4] 
    - Upper bound: 37*V_ac+4 
    - Complexity: n 
* Chain [49] with precondition: [V_ac>=5] 
    - Upper bound: 52*V_ac+4 
    - Complexity: n 
* Chain [48] with precondition: [V_ac>=6] 
    - Upper bound: 30*V_ac+4 
    - Complexity: n 

### Maximum cost of eval_Configure_start(V_ac,B): max([14,nat(V_ac)*52+3])+1 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 93 ms.
* Invariants computed in 96 ms.
   - Backward Invariants 54 ms.
   - Transitive Invariants 14 ms.
* Refinement performed in 189 ms.
* Termination proved in 20 ms.
* Upper bounds computed in 220 ms.
   - Equation cost structures 88 ms.
   - Phase cost structures 62 ms.
   - Chain cost structures 56 ms.
   - Solving cost expressions 4 ms.
* Total analysis performed in 696 ms.


Warning: Ignored call to eval_s_SFD_process_stop/1 in equation loop_cont_eval_s_SFD_process_bb1_in/2 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_s_SFD_process_16/13,eval_s_SFD_process_17/14,eval_s_SFD_process_bb5_in/12]
1. recursive : [eval_s_SFD_process_10/5,eval_s_SFD_process_12/6,eval_s_SFD_process_13/6,eval_s_SFD_process_19/8,eval_s_SFD_process_20/8,eval_s_SFD_process_9/5,eval_s_SFD_process_bb1_in/4,eval_s_SFD_process_bb7_in/7,loop_cont_eval_s_SFD_process_bb5_in/8]
2. non_recursive : [loop_cont_eval_s_SFD_process_bb1_in/2]
3. non_recursive : [eval_s_SFD_process_7/4]
4. non_recursive : [eval_s_SFD_process_6/4]
5. non_recursive : [eval_s_SFD_process_5/4]
6. non_recursive : [eval_s_SFD_process_4/4]
7. non_recursive : [eval_s_SFD_process_3/4]
8. non_recursive : [eval_s_SFD_process_2/4]
9. non_recursive : [eval_s_SFD_process_1/4]
10. non_recursive : [eval_s_SFD_process_0/4]
11. non_recursive : [eval_s_SFD_process_bb0_in/4]
12. non_recursive : [eval_s_SFD_process_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_s_SFD_process_bb5_in/12
1. SCC is partially evaluated into eval_s_SFD_process_bb1_in/4
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into eval_s_SFD_process_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_s_SFD_process_bb5_in/12 
* CE 9 is refined into CE [11] 
* CE 10 is refined into CE [12] 
* CE 8 is refined into CE [13] 


#### Refined cost equations eval_s_SFD_process_bb5_in/12 
* CE 11: eval_s_SFD_process_bb5_in(A,B,C,D,E,F,A,B,G,D,E,H) = 0
     [B>=E,A>=D,E>=1,E=H+1,D=G+1,D=C+1,F=2] 
* CE 12: eval_s_SFD_process_bb5_in(A,B,C,D,E,F,A,B,G,D,E,E) = 0
     [B>=E,A>=D,0>=E,D=G+1,D=C+1,F=2] 
* CE 13: eval_s_SFD_process_bb5_in(V_rlimit,V__01,V__0,V_1,V__2,B,C,D,E,F,G,H) = 1+ eval_s_SFD_process_bb5_in(V_rlimit,V__01,I,V_1,J,K,C,D,E,F,G,H)
     [V__01>=V__2,V_rlimit>=V_1,V__2>=1,V__2=J+1,V_1=I+1,V_1=V__0+1,K=2,B=2] 

### Cost equations --> "Loop" of eval_s_SFD_process_bb5_in/12 
* CEs [13] --> Loop 9 
* CEs [11] --> Loop 10 
* CEs [12] --> Loop 11 

#### Loops of eval_s_SFD_process_bb5_in/12 
* Loop 9: eval_s_SFD_process_bb5_in(V_rlimit,V__01,V__0,V_1,V__2,B,C,D,E,F,G,H)->  eval_s_SFD_process_bb5_in(V_rlimit,V__01,V__0',V_1,V__2',B',C,D,E,F,G,H)
                  [V__01>=V__2,V_rlimit>=V_1,V__2>=1,V__2=V__2'+1,V_1=V__0'+1,V_1=V__0+1,B'=2,B=2] 
* Loop 10: eval_s_SFD_process_bb5_in(A,B,C,D,E,F,A,B,C,G,E,H) [B>=E,A>=C+1,E>=1,E=H+1,C+1=G,C+1=D,F=2] 
* Loop 11: eval_s_SFD_process_bb5_in(A,B,C,D,E,F,A,B,C,G,E,E) [B>=E,A>=C+1,0>=E,C+1=G,C+1=D,F=2] 

### Ranking functions of CR eval_s_SFD_process_bb5_in(V_rlimit,V__01,V__0,V_1,V__2,B,C,D,E,F,G,H) 
* RF of phase [9]: [V__2]

#### Partial ranking functions of CR eval_s_SFD_process_bb5_in(V_rlimit,V__01,V__0,V_1,V__2,B,C,D,E,F,G,H) 
* Partial RF of phase [9]:
  - RF of loop [9:1]:
    V__2


### Resulting Chains:eval_s_SFD_process_bb5_in(V_rlimit,V__01,V__0,V_1,V__2,B,C,D,E,F,G,H) 
* [[9],11]
* [[9],10]
* [11]
* [10]


### Merging Chains  eval_s_SFD_process_bb5_in/12 into  External patterns of execution 
* [[11,[9]]] --> 1 
* [[11]] --> 2 
* [[10]] --> 3 
* [[10,[9]]] --> 4 


### Specialization of cost equations eval_s_SFD_process_bb1_in/4 
* CE 7 is refined into CE [14] 
* CE 3 is refined into CE [15] 
* CE 6 is refined into CE [16] 
* CE 4 is refined into CE [17,18,19,20] 
* CE 5 is refined into CE [21] 


#### Refined cost equations eval_s_SFD_process_bb1_in/4 
* CE 14: eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) = 0
     [V__0>=V_rlimit,B=3] 
* CE 15: eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) = 1+ eval_s_SFD_process_bb1_in(V_rlimit,V__01,C,D)
     [V_rlimit>=V__0+1,V__0+1=C,D=3,B=3] 
* CE 16: eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) = 1+ eval_s_SFD_process_bb1_in(V_rlimit,C,D,E)
     [V_rlimit>=V__0+1,V__0+1=D,C=V__01+1,E=3,B=3] 
* CE 17: eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) = 2+ eval_s_SFD_process_bb5_in(V_rlimit,V__01,C,D,V__01,E,V_rlimit,V__01,F,D,G,H):1+ eval_s_SFD_process_bb1_in(V_rlimit,I,J,K)
     [V_rlimit>=D,V__01>=1,D=J+1,D=F+1,D=C+1,D=V__0+1,K=3,I=0,H=0,G=0,E=2,B=3] 
* CE 18: eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) = 2+ eval_s_SFD_process_bb5_in(V_rlimit,V__01,C,D,V__01,E,V_rlimit,V__01,F,D,V__01,V__01):2+ eval_s_SFD_process_bb1_in(V_rlimit,V__01,G,H)
     [V_rlimit>=D,0>=V__01,D=G+1,D=F+1,D=C+1,D=V__0+1,H=3,E=2,B=3] 
* CE 19: eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) = 2+ eval_s_SFD_process_bb5_in(V_rlimit,V__01,C,D,V__01,E,V_rlimit,V__01,F,D,V__01,G):3+ eval_s_SFD_process_bb1_in(V_rlimit,H,I,J)
     [V_rlimit>=D,V__01>=1,D=I+1,V__01=H+1,V__01=G+1,D=F+1,D=C+1,D=V__0+1,J=3,E=2,B=3] 
* CE 20: eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) = 2+ eval_s_SFD_process_bb5_in(V_rlimit,V__01,C,D,V__01,E,V_rlimit,V__01,F,D,G,H):4+ eval_s_SFD_process_bb1_in(V_rlimit,H,I,J)
     [V__01>=H+2,V_rlimit>=D,H>=0,D=I+1,H+1=G,D=F+1,D=C+1,D=V__0+1,J=3,E=2,B=3] 
* CE 21: eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) = 1+ eval_s_SFD_process_bb1_in(V_rlimit,C,D,E)
     [V_rlimit>=V__0+1,V__0+1=D,E=3,C=0,B=3] 

### Cost equations --> "Loop" of eval_s_SFD_process_bb1_in/4 
* CEs [15] --> Loop 12 
* CEs [16] --> Loop 13 
* CEs [20] --> Loop 14 
* CEs [18] --> Loop 15 
* CEs [19] --> Loop 16 
* CEs [21] --> Loop 17 
* CEs [17] --> Loop 18 
* CEs [14] --> Loop 19 

#### Loops of eval_s_SFD_process_bb1_in/4 
* Loop 12: eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B)->  eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0',B')
                  [V_rlimit>=V__0+1,V__0+1=V__0',B'=3,B=3] 
* Loop 13: eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B)->  eval_s_SFD_process_bb1_in(V_rlimit,V__01',V__0',B')
                  [V_rlimit>=V__0+1,V__0+1=V__0',V__01+1=V__01',B'=3,B=3] 
* Loop 14: eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B)->  eval_s_SFD_process_bb1_in(V_rlimit,V__01',V__0,B')
                  [V__01>=V__01'+2,V_rlimit>=V__0+1,V__01'>=0,B'=3,B=3] 
* Loop 15: eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B)->  eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B')
                  [V_rlimit>=V__0+1,0>=V__01,B'=3,B=3] 
* Loop 16: eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B)->  eval_s_SFD_process_bb1_in(V_rlimit,V__01',V__0,B')
                  [V_rlimit>=V__0+1,V__01>=1,V__01=V__01'+1,B'=3,B=3] 
* Loop 17: eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B)->  eval_s_SFD_process_bb1_in(V_rlimit,V__01',V__0',B')
                  [V_rlimit>=V__0+1,V__0+1=V__0',B'=3,V__01'=0,B=3] 
* Loop 18: eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B)->  eval_s_SFD_process_bb1_in(V_rlimit,V__01',V__0,B')
                  [V_rlimit>=V__0+1,V__01>=1,B'=3,V__01'=0,B=3] 
* Loop 19: eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) [V__0>=V_rlimit,B=3] 

### Ranking functions of CR eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) 

#### Partial ranking functions of CR eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) 
* Partial RF of phase [12,13,14,15,16,17,18]:
  - RF of loop [12:1,13:1,17:1]:
    V_rlimit-V__0
  - RF of loop [14:1]:
    V__01/2-1/2 depends on loops [13:1,17:1] 
  - RF of loop [16:1,18:1]:
    V__01 depends on loops [13:1,17:1] 


### Resulting Chains:eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) 
* [[12,13,14,15,16,17,18]]...
* [[12,13,14,15,16,17,18],19]
* [19]


### Merging Chains  eval_s_SFD_process_bb1_in/4 into  External patterns of execution 
* [[19]] --> 1 
* [[19,[12,13,14,15,16,17,18]]] --> 2 
* [[[12,13,14,15,16,17,18]]] --> 3 


### Specialization of cost equations eval_s_SFD_process_start/4 
* CE 2 is refined into CE [22,23,24] 


#### Refined cost equations eval_s_SFD_process_start/4 
* CE 22: eval_s_SFD_process_start(V_p,V_rlimit,V_match,B) = 1+ eval_s_SFD_process_bb1_in(V_rlimit,V_match,V_p,C):1
     [V_p>=V_rlimit,C=3] 
* CE 23: eval_s_SFD_process_start(V_p,V_rlimit,V_match,B) = 1+ eval_s_SFD_process_bb1_in(V_rlimit,V_match,V_p,C):2
     [V_rlimit>=V_p+1,C=3] 
* CE 24: eval_s_SFD_process_start(V_p,V_rlimit,V_match,B) = 1+ eval_s_SFD_process_bb1_in(V_rlimit,V_match,V_p,C):3
     [V_rlimit>=V_p+1,C=3] 

### Cost equations --> "Loop" of eval_s_SFD_process_start/4 
* CEs [24] --> Loop 20 
* CEs [22] --> Loop 21 
* CEs [23] --> Loop 22 

#### Loops of eval_s_SFD_process_start/4 
* Loop 20: eval_s_SFD_process_start(V_p,V_rlimit,V_match,B) [V_rlimit>=V_p+1] 
* Loop 21: eval_s_SFD_process_start(V_p,V_rlimit,V_match,B) [V_p>=V_rlimit] 
* Loop 22: eval_s_SFD_process_start(V_p,V_rlimit,V_match,B) [V_rlimit>=V_p+1] 

### Ranking functions of CR eval_s_SFD_process_start(V_p,V_rlimit,V_match,B) 

#### Partial ranking functions of CR eval_s_SFD_process_start(V_p,V_rlimit,V_match,B) 


### Resulting Chains:eval_s_SFD_process_start(V_p,V_rlimit,V_match,B) 
* [22]
* [21]
* [20]...


### Merging Chains  eval_s_SFD_process_start/4 into  External patterns of execution 
* [[22]] --> 1 
* [[21]] --> 2 
* [[20]] --> 3 


Computing Bounds
=====================================

#### Cost of loops [9] 

 * loop 9:eval_s_SFD_process_bb5_in(V_rlimit,V__01,V__0,V_1,V__2,B,C,D,E,F,G,H) -> [eval_s_SFD_process_bb5_in(V_rlimit',V__01',V__0',V_1',V__2',B',C',D',E',F',G',H')] 
1
#### Cost of phase [9]:eval_s_SFD_process_bb5_in(V_rlimit,V__01,V__0,V_1,V__2,B,C,D,E,F,G,H) -> [eval_s_SFD_process_bb5_in(V_rlimit',V__01',V__0',V_1',V__2',B',C',D',E',F',G',H')] 
1* #(9)+0
  Such that:#(9) =< V__2
#(9) =< V__2-V__2'

#### Cost of phase [9]:eval_s_SFD_process_bb5_in(V_rlimit,V__01,V__0,V_1,V__2,B,C,D,E,F,G,H) -> [eval_s_SFD_process_bb5_in(V_rlimit',V__01',V__0',V_1',V__2',B',C',D',E',F',G',H')] 
1* #(9)+0
  Such that:#(9) =< V__2
#(9) =< V__2-V__2'

#### Cost of chains of eval_s_SFD_process_bb5_in(V_rlimit,V__01,V__0,V_1,V__2,B,C,D,E,F,G,H):
* Chain [[9],11]: 1*s(1)+0
  Such that:s(1) =< V__2

  with precondition: [B=2,G=0,H=0,V__0+1=V_1,V_rlimit=C,V__01=D,V__0=E,V__0+1=F,V__2>=1,V_rlimit>=V__0+1,V__01>=V__2] 

* Chain [[9],10]: 1*s(2)+0
  Such that:s(2) =< V__2-G

  with precondition: [B=2,V__0+1=V_1,V_rlimit=C,V__01=D,V__0=E,V__0+1=F,G=H+1,G>=1,V_rlimit>=V__0+1,V__01>=V__2,V__2>=G+1] 

* Chain [11]: 0
  with precondition: [B=2,V_1=V__0+1,V__01=V__2,V_rlimit=C,V__01=D,V_1=E+1,V_1=F,V__01=G,V__01=H,0>=V__01,V_rlimit>=V_1] 

* Chain [10]: 0
  with precondition: [B=2,V_1=V__0+1,V__01=V__2,V_rlimit=C,V__01=D,V_1=E+1,V_1=F,V__01=G,V__01=H+1,V__01>=1,V_rlimit>=V_1] 


#### Cost of loops [12,13,14,15,16,17,18] 

 * loop 12:eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) -> [eval_s_SFD_process_bb1_in(V_rlimit',V__01',V__0',B')] 
1
 * loop 13:eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) -> [eval_s_SFD_process_bb1_in(V_rlimit',V__01',V__0',B')] 
1
 * loop 14:eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) -> [eval_s_SFD_process_bb1_in(V_rlimit',V__01',V__0',B')] 
1*s(5)+2
  Such that:s(5) =< V__01-V__01'-1

 * loop 15:eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) -> [eval_s_SFD_process_bb1_in(V_rlimit',V__01',V__0',B')] 
2
 * loop 16:eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) -> [eval_s_SFD_process_bb1_in(V_rlimit',V__01',V__0',B')] 
2
 * loop 17:eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) -> [eval_s_SFD_process_bb1_in(V_rlimit',V__01',V__0',B')] 
1
 * loop 18:eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) -> [eval_s_SFD_process_bb1_in(V_rlimit',V__01',V__0',B')] 
1*s(6)+2
  Such that:s(6) =< V__01

#### Cost of phase [12,13,14,15,16,17,18]:eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) -> [eval_s_SFD_process_bb1_in(V_rlimit',V__01',V__0',B')] 
2* #(18)+1*sm(18,6)+1* #(17)+2* #(16)+2* #(15)+2* #(14)+1*sm(14,5)+1* #(13)+1* #(12)+0
  Such that:s(9) =< V__01-1
s(10) =< V__01/2-1/2
s(11) =< V_rlimit-V__0
s(12) =< V_rlimit-V__0-V_rlimit'+V__0'
s(13) =< V__01
s(14)+ #(12)+ #(13) =< s(11)
#(12)+ #(13)+ #(17) =< s(11)
s(14)+ #(12)+ #(13) =< s(12)
#(12)+ #(13)+ #(17) =< s(12)
s(15) =< max([s(9),0])+ #(13)
#(16)+sm(14,5)+sm(18,6) =< #(13)+s(13)
#(16)+ #(18)+sm(14,5) =< #(13)+s(13)
#(14) =< s(14)+ #(13)* (1/2)+s(10)
s(16) =< s(15)+1
sm(18,6) =< #(18)*s(16)
sm(14,5) =< #(14)*s(15)

#### Cost of phase [12,13,14,15,16,17,18]:eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) -> [eval_s_SFD_process_bb1_in(V_rlimit',V__01',V__0',B')] 
2* #(18)+1*sm(18,6)+1* #(17)+2* #(16)+2* #(15)+2* #(14)+1*sm(14,5)+1* #(13)+1* #(12)+0
  Such that:s(9) =< V__01-1
s(10) =< V__01/2-1/2
s(11) =< V_rlimit-V__0
s(12) =< V_rlimit-V__0-V_rlimit'+V__0'
s(13) =< V__01
s(14)+ #(12)+ #(13) =< s(11)
#(12)+ #(13)+ #(17) =< s(11)
s(14)+ #(12)+ #(13) =< s(12)
#(12)+ #(13)+ #(17) =< s(12)
s(15) =< max([s(9),0])+ #(13)
#(16)+sm(14,5)+sm(18,6) =< #(13)+s(13)
#(16)+ #(18)+sm(14,5) =< #(13)+s(13)
#(14) =< s(14)+ #(13)* (1/2)+s(10)
s(16) =< s(15)+1
sm(18,6) =< #(18)*s(16)
sm(14,5) =< #(14)*s(15)

#### Cost of chains of eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B):
* Chain [[12,13,14,15,16,17,18]]...: 2*s(29)+1*s(28)+1*s(24)+2*s(26)+2*s(32)+2*s(30)+1*s(27)+1*s(23)+1*s(22)+0
  Such that:s(17) =< V__01-1
s(18) =< V__01
s(19) =< V__01/2-1/2
s(20) =< V_rlimit-V__0
s(21)+s(22)+s(23) =< s(20)
s(22)+s(23)+s(24) =< s(20)
s(25) =< max([s(17),0])+s(23)
s(26)+s(27)+s(28) =< s(23)+s(18)
s(26)+s(29)+s(27) =< s(23)+s(18)
s(30) =< s(21)+s(23)* (1/2)+s(19)
s(31) =< s(25)+1
s(28) =< s(29)*s(31)
s(27) =< s(30)*s(25)

  with precondition: [V_rlimit>=V__0+1,B=3] 

* Chain [[12,13,14,15,16,17,18],19]: 2*s(45)+1*s(44)+1*s(40)+2*s(42)+2*s(48)+2*s(46)+1*s(43)+1*s(39)+1*s(38)+0
  Such that:s(33) =< V__01-1
s(34) =< V__01
s(35) =< V__01/2-1/2
s(36) =< V_rlimit-V__0
s(37)+s(38)+s(39) =< s(36)
s(38)+s(39)+s(40) =< s(36)
s(41) =< max([s(33),0])+s(39)
s(42)+s(43)+s(44) =< s(39)+s(34)
s(42)+s(45)+s(43) =< s(39)+s(34)
s(46) =< s(37)+s(39)* (1/2)+s(35)
s(47) =< s(41)+1
s(44) =< s(45)*s(47)
s(43) =< s(46)*s(41)

  with precondition: [B=3,V_rlimit>=V__0+1] 

* Chain [19]: 0
  with precondition: [B=3,V__0>=V_rlimit] 


#### Cost of chains of eval_s_SFD_process_start(V_p,V_rlimit,V_match,B):
* Chain [22]: 2*s(125)+1*s(124)+1*s(120)+2*s(122)+2*s(128)+2*s(126)+1*s(123)+1*s(119)+1*s(118)+1
  Such that:s(113) =< -V_p+V_rlimit
s(114) =< V_match-1
s(115) =< V_match
s(116) =< V_match/2-1/2
s(117)+s(118)+s(119) =< s(113)
s(118)+s(119)+s(120) =< s(113)
s(121) =< max([s(114),0])+s(119)
s(122)+s(123)+s(124) =< s(119)+s(115)
s(122)+s(123)+s(125) =< s(119)+s(115)
s(126) =< s(117)+s(119)* (1/2)+s(116)
s(127) =< s(121)+1
s(124) =< s(125)*s(127)
s(123) =< s(126)*s(121)

  with precondition: [V_rlimit>=V_p+1] 

* Chain [21]: 1
  with precondition: [V_p>=V_rlimit] 

* Chain [20]...: 2*s(141)+1*s(140)+1*s(136)+2*s(138)+2*s(144)+2*s(142)+1*s(139)+1*s(135)+1*s(134)+1
  Such that:s(129) =< -V_p+V_rlimit
s(130) =< V_match-1
s(131) =< V_match
s(132) =< V_match/2-1/2
s(133)+s(134)+s(135) =< s(129)
s(134)+s(135)+s(136) =< s(129)
s(137) =< max([s(130),0])+s(135)
s(138)+s(139)+s(140) =< s(135)+s(131)
s(138)+s(139)+s(141) =< s(135)+s(131)
s(142) =< s(133)+s(135)* (1/2)+s(132)
s(143) =< s(137)+1
s(140) =< s(141)*s(143)
s(139) =< s(142)*s(137)

  with precondition: [V_rlimit>=V_p+1] 


Closed-form bounds of eval_s_SFD_process_start(V_p,V_rlimit,V_match,B): 
-------------------------------------
* Chain [22] with precondition: [V_rlimit>=V_p+1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [21] with precondition: [V_p>=V_rlimit] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [20]... with precondition: [V_rlimit>=V_p+1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_s_SFD_process_start(V_p,V_rlimit,V_match,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 36 ms.
* Invariants computed in 46 ms.
   - Backward Invariants 22 ms.
   - Transitive Invariants 12 ms.
* Refinement performed in 72 ms.
* Termination proved in 16 ms.
* Upper bounds computed in 99 ms.
   - Equation cost structures 28 ms.
   - Phase cost structures 50 ms.
   - Chain cost structures 23 ms.
   - Solving cost expressions 5 ms.
* Total analysis performed in 311 ms.


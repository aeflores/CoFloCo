Warning: Ignored call to eval_zwritehexstring_at_extracted_stop/1 in equation eval_zwritehexstring_at_extracted_bb5_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_zwritehexstring_at_extracted_bb3_in/7]
1. recursive  : [eval_zwritehexstring_at_extracted_10/5,eval_zwritehexstring_at_extracted_11/5,eval_zwritehexstring_at_extracted_bb1_in/2,eval_zwritehexstring_at_extracted_bb2_in/2,eval_zwritehexstring_at_extracted_bb4_in/4,loop_cont_eval_zwritehexstring_at_extracted_bb3_in/5]
2. non_recursive  : [eval_zwritehexstring_at_extracted_bb5_in/1]
3. non_recursive  : [loop_cont_eval_zwritehexstring_at_extracted_bb1_in/2]
4. non_recursive  : [eval_zwritehexstring_at_extracted_4/2]
5. non_recursive  : [eval_zwritehexstring_at_extracted_3/2]
6. non_recursive  : [eval_zwritehexstring_at_extracted_2/2]
7. non_recursive  : [eval_zwritehexstring_at_extracted_1/2]
8. non_recursive  : [eval_zwritehexstring_at_extracted_0/2]
9. non_recursive  : [eval_zwritehexstring_at_extracted_bb0_in/2]
10. non_recursive  : [eval_zwritehexstring_at_extracted_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_zwritehexstring_at_extracted_bb3_in/7
1. SCC is partially evaluated into eval_zwritehexstring_at_extracted_bb1_in/2
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_zwritehexstring_at_extracted_4/2
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is partially evaluated into eval_zwritehexstring_at_extracted_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_zwritehexstring_at_extracted_bb3_in/7 
* CE 7 is refined into CE [8] 
* CE 6 is refined into CE [9] 


#### Refined cost equations eval_zwritehexstring_at_extracted_bb3_in/7 
* CE 8: eval_zwritehexstring_at_extracted_bb3_in(A,B,C,D,A,B,E) = 0
     [A>=B,B>=1,64>=B,E=1,D=2,C=1] 
* CE 9: eval_zwritehexstring_at_extracted_bb3_in(V__0,V__0_,V_count_0,B,C,D,E) = 1+ eval_zwritehexstring_at_extracted_bb3_in(V__0,V__0_,F,G,C,D,E)
     [V__0_>=V_count_0,V__0>=V__0_,V_count_0>=2,64>=V__0_,V_count_0=F+1,G=2,B=2] 

### Cost equations --> "Loop" of eval_zwritehexstring_at_extracted_bb3_in/7 
* CEs [9] --> Loop 8 
* CEs [8] --> Loop 9 

#### Loops of eval_zwritehexstring_at_extracted_bb3_in/7 
* Loop 8: eval_zwritehexstring_at_extracted_bb3_in(V__0,V__0_,V_count_0,B,C,D,E)->  eval_zwritehexstring_at_extracted_bb3_in(V__0,V__0_,V_count_0',B',C,D,E)
                  [V__0_>=V_count_0,V__0>=V__0_,V_count_0>=2,64>=V__0_,V_count_0=V_count_0'+1,B'=2,B=2] 
* Loop 9: eval_zwritehexstring_at_extracted_bb3_in(A,B,C,D,A,B,E) [A>=B,B>=1,64>=B,E=1,D=2,C=1] 

### Ranking functions of CR eval_zwritehexstring_at_extracted_bb3_in(V__0,V__0_,V_count_0,B,C,D,E) 
* RF of phase [8]: [V_count_0-1]

#### Partial ranking functions of CR eval_zwritehexstring_at_extracted_bb3_in(V__0,V__0_,V_count_0,B,C,D,E) 
* Partial RF of phase [8]:
  - RF of loop [8:1]:
    V_count_0-1

Discarded unfeasible chain [[8]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_zwritehexstring_at_extracted_bb3_in(V__0,V__0_,V_count_0,B,C,D,E) 
* [[8],9]
* [9]


### Merging Chains  eval_zwritehexstring_at_extracted_bb3_in/7 into  External patterns of execution 
* [[9]] --> 1 
* [[9,[8]]] --> 2 


### Specialization of cost equations eval_zwritehexstring_at_extracted_bb1_in/2 
* CE 5 is refined into CE [10] 
* CE 4 is refined into CE [11] 
* CE 3 is refined into CE [12,13] 


#### Refined cost equations eval_zwritehexstring_at_extracted_bb1_in/2 
* CE 10: eval_zwritehexstring_at_extracted_bb1_in(V__0,B) = 0
     [0>=V__0,B=3] 
* CE 11: eval_zwritehexstring_at_extracted_bb1_in(V__0,B) = 2+ eval_zwritehexstring_at_extracted_bb3_in(V__0,C,D,E,V__0,F,G):2+ eval_zwritehexstring_at_extracted_bb1_in(H,I)
     [V__0>=64,V__0=H+64,I=3,G=1,F=64,E=2,D=64,C=64,B=3] 
* CE 12: eval_zwritehexstring_at_extracted_bb1_in(V__0,B) = 2+ eval_zwritehexstring_at_extracted_bb3_in(C,D,E,F,G,H,I):1+ eval_zwritehexstring_at_extracted_bb1_in(J,K)
     [K=3,J=0,I=1,H=1,G=1,F=2,E=1,D=1,C=1,B=3,V__0=1] 
* CE 13: eval_zwritehexstring_at_extracted_bb1_in(V__0,B) = 2+ eval_zwritehexstring_at_extracted_bb3_in(V__0,V__0,V__0,C,V__0,V__0,D):2+ eval_zwritehexstring_at_extracted_bb1_in(E,F)
     [V__0>=2,63>=V__0,F=3,E=0,D=1,C=2,B=3] 

### Cost equations --> "Loop" of eval_zwritehexstring_at_extracted_bb1_in/2 
* CEs [11] --> Loop 10 
* CEs [13] --> Loop 11 
* CEs [12] --> Loop 12 
* CEs [10] --> Loop 13 

#### Loops of eval_zwritehexstring_at_extracted_bb1_in/2 
* Loop 10: eval_zwritehexstring_at_extracted_bb1_in(V__0,B)->  eval_zwritehexstring_at_extracted_bb1_in(V__0',B')
                  [V__0>=64,V__0=V__0'+64,B'=3,B=3] 
* Loop 11: eval_zwritehexstring_at_extracted_bb1_in(V__0,B)->  eval_zwritehexstring_at_extracted_bb1_in(V__0',B')
                  [V__0>=2,63>=V__0,B'=3,V__0'=0,B=3] 
* Loop 12: eval_zwritehexstring_at_extracted_bb1_in(V__0,B)->  eval_zwritehexstring_at_extracted_bb1_in(V__0',B')
                  [B'=3,V__0'=0,B=3,V__0=1] 
* Loop 13: eval_zwritehexstring_at_extracted_bb1_in(V__0,B) [0>=V__0,B=3] 

### Ranking functions of CR eval_zwritehexstring_at_extracted_bb1_in(V__0,B) 
* RF of phase [10]: [V__0-63]

#### Partial ranking functions of CR eval_zwritehexstring_at_extracted_bb1_in(V__0,B) 
* Partial RF of phase [10]:
  - RF of loop [10:1]:
    V__0-63

Discarded unfeasible chain [[10]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_zwritehexstring_at_extracted_bb1_in(V__0,B) 
* [[10],13]
* [[10],12,13]
* [[10],11,13]
* [13]
* [12,13]
* [11,13]


### Merging Chains  eval_zwritehexstring_at_extracted_bb1_in/2 into  External patterns of execution 
* [[13,12]] --> 1 
* [[13,11]] --> 2 
* [[13]] --> 3 
* [[13,[10]]] --> 4 
* [[13,12,[10]]] --> 5 
* [[13,11,[10]]] --> 6 


### Specialization of cost equations eval_zwritehexstring_at_extracted_4/2 
* CE 2 is refined into CE [14,15,16,17,18,19] 


#### Refined cost equations eval_zwritehexstring_at_extracted_4/2 
* CE 14: eval_zwritehexstring_at_extracted_4(V_len,B) = 1+ eval_zwritehexstring_at_extracted_bb1_in(C,D):1
     [D=3,C=1,V_len=1] 
* CE 15: eval_zwritehexstring_at_extracted_4(V_len,B) = 1+ eval_zwritehexstring_at_extracted_bb1_in(V_len,C):2
     [V_len>=2,63>=V_len,C=3] 
* CE 16: eval_zwritehexstring_at_extracted_4(V_len,B) = 1+ eval_zwritehexstring_at_extracted_bb1_in(V_len,C):3
     [0>=V_len,C=3] 
* CE 17: eval_zwritehexstring_at_extracted_4(V_len,B) = 1+ eval_zwritehexstring_at_extracted_bb1_in(V_len,C):4
     [V_len>=64,C=3] 
* CE 18: eval_zwritehexstring_at_extracted_4(V_len,B) = 1+ eval_zwritehexstring_at_extracted_bb1_in(V_len,C):5
     [V_len>=65,C=3] 
* CE 19: eval_zwritehexstring_at_extracted_4(V_len,B) = 1+ eval_zwritehexstring_at_extracted_bb1_in(V_len,C):6
     [V_len>=66,C=3] 

### Cost equations --> "Loop" of eval_zwritehexstring_at_extracted_4/2 
* CEs [19] --> Loop 14 
* CEs [18] --> Loop 15 
* CEs [17] --> Loop 16 
* CEs [16] --> Loop 17 
* CEs [15] --> Loop 18 
* CEs [14] --> Loop 19 

#### Loops of eval_zwritehexstring_at_extracted_4/2 
* Loop 14: eval_zwritehexstring_at_extracted_4(V_len,B) [V_len>=66] 
* Loop 15: eval_zwritehexstring_at_extracted_4(V_len,B) [V_len>=65] 
* Loop 16: eval_zwritehexstring_at_extracted_4(V_len,B) [V_len>=64] 
* Loop 17: eval_zwritehexstring_at_extracted_4(V_len,B) [0>=V_len] 
* Loop 18: eval_zwritehexstring_at_extracted_4(V_len,B) [V_len>=2,63>=V_len] 
* Loop 19: eval_zwritehexstring_at_extracted_4(V_len,B) [V_len=1] 

### Ranking functions of CR eval_zwritehexstring_at_extracted_4(V_len,B) 

#### Partial ranking functions of CR eval_zwritehexstring_at_extracted_4(V_len,B) 


### Resulting Chains:eval_zwritehexstring_at_extracted_4(V_len,B) 
* [19]
* [18]
* [17]
* [16]
* [15]
* [14]


### Merging Chains  eval_zwritehexstring_at_extracted_4/2 into  External patterns of execution 
* [[19]] --> 1 
* [[18]] --> 2 
* [[17]] --> 3 
* [[16]] --> 4 
* [[15]] --> 5 
* [[14]] --> 6 


### Specialization of cost equations eval_zwritehexstring_at_extracted_start/2 
* CE 1 is refined into CE [20,21,22,23,24,25] 


#### Refined cost equations eval_zwritehexstring_at_extracted_start/2 
* CE 20: eval_zwritehexstring_at_extracted_start(V_len,B) = 0+ eval_zwritehexstring_at_extracted_4(C,B):1
     [C=1,V_len=1] 
* CE 21: eval_zwritehexstring_at_extracted_start(V_len,B) = 0+ eval_zwritehexstring_at_extracted_4(V_len,B):2
     [V_len>=2,63>=V_len] 
* CE 22: eval_zwritehexstring_at_extracted_start(V_len,B) = 0+ eval_zwritehexstring_at_extracted_4(V_len,B):3
     [0>=V_len] 
* CE 23: eval_zwritehexstring_at_extracted_start(V_len,B) = 0+ eval_zwritehexstring_at_extracted_4(V_len,B):4
     [V_len>=64] 
* CE 24: eval_zwritehexstring_at_extracted_start(V_len,B) = 0+ eval_zwritehexstring_at_extracted_4(V_len,B):5
     [V_len>=65] 
* CE 25: eval_zwritehexstring_at_extracted_start(V_len,B) = 0+ eval_zwritehexstring_at_extracted_4(V_len,B):6
     [V_len>=66] 

### Cost equations --> "Loop" of eval_zwritehexstring_at_extracted_start/2 
* CEs [25] --> Loop 20 
* CEs [24] --> Loop 21 
* CEs [23] --> Loop 22 
* CEs [22] --> Loop 23 
* CEs [21] --> Loop 24 
* CEs [20] --> Loop 25 

#### Loops of eval_zwritehexstring_at_extracted_start/2 
* Loop 20: eval_zwritehexstring_at_extracted_start(V_len,B) [V_len>=66] 
* Loop 21: eval_zwritehexstring_at_extracted_start(V_len,B) [V_len>=65] 
* Loop 22: eval_zwritehexstring_at_extracted_start(V_len,B) [V_len>=64] 
* Loop 23: eval_zwritehexstring_at_extracted_start(V_len,B) [0>=V_len] 
* Loop 24: eval_zwritehexstring_at_extracted_start(V_len,B) [V_len>=2,63>=V_len] 
* Loop 25: eval_zwritehexstring_at_extracted_start(V_len,B) [V_len=1] 

### Ranking functions of CR eval_zwritehexstring_at_extracted_start(V_len,B) 

#### Partial ranking functions of CR eval_zwritehexstring_at_extracted_start(V_len,B) 


### Resulting Chains:eval_zwritehexstring_at_extracted_start(V_len,B) 
* [25]
* [24]
* [23]
* [22]
* [21]
* [20]


### Merging Chains  eval_zwritehexstring_at_extracted_start/2 into  External patterns of execution 
* [[25]] --> 1 
* [[24]] --> 2 
* [[23]] --> 3 
* [[22]] --> 4 
* [[21]] --> 5 
* [[20]] --> 6 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 8 

#### Computing cost of phase [8] 

#### Simplifying cost structure of CE 9 

#### Cost of loops [8] 

 * loop 8:eval_zwritehexstring_at_extracted_bb3_in(V__0,V__0_,V_count_0,B,C,D,E) -> [eval_zwritehexstring_at_extracted_bb3_in(V__0',V__0_',V_count_0',B',C',D',E')] 
1
##### Pending set eval_zwritehexstring_at_extracted_bb3_in(V__0,V__0_,V_count_0,B,C,D,E)
* Psum in Loop 8: [it(8)=<1]

###### Computing sum for it(8)=<1  in Loop 8 
   - Applying inductive sum strategy 
     - head Candidate: V_count_0-1 
     - head Candidate: V_count_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_count_0-1 
     - tail Candidate: V_count_0-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(8)=<V_count_0-1,it(8)=<V_count_0-1,it(8)=<V_count_0-V_count_0',it(8)=<V_count_0-V_count_0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [8] 

#### Simplifying cost structure of phase [8] 

#### Cost of phase [8]:eval_zwritehexstring_at_extracted_bb3_in(V__0,V__0_,V_count_0,B,C,D,E) -> [eval_zwritehexstring_at_extracted_bb3_in(V__0',V__0_',V_count_0',B',C',D',E')] 
1*it(8)+0
  Such that:it(8) =< V_count_0
it(8) =< V_count_0-V_count_0'

#### Simplifying cost structure of chain [[8],9] 

#### Cost of chains of eval_zwritehexstring_at_extracted_bb3_in(V__0,V__0_,V_count_0,B,C,D,E):
* Chain [[8],9]: 1*it(8)+0
  Such that:it(8) =< V_count_0

  with precondition: [B=2,E=1,V__0=C,V__0_=D,64>=V__0_,V_count_0>=2,V__0>=V__0_,V__0_>=V_count_0] 

* Chain [9]: 0
  with precondition: [V_count_0=1,B=2,E=1,V__0=C,V__0_=D,64>=V__0_,V__0_>=1,V__0>=V__0_] 


#### Simplifying cost structure of CE 10 

#### Computing cost of phase [10] 
 * Renamed intermediate variables: 
[(eq(11,1),it(8))>>s(1)]

#### Simplifying cost structure of CE 11 
 * Renamed intermediate variables: 
[(it(10),s(1))>>s(2)]

#### Cost of loops [10] 

 * loop 10:eval_zwritehexstring_at_extracted_bb1_in(V__0,B) -> [eval_zwritehexstring_at_extracted_bb1_in(V__0',B')] 
1*s(2)+2
  Such that:s(2) =< 64

##### Pending set eval_zwritehexstring_at_extracted_bb1_in(V__0,B)
* Psum in Loop 10: [it(10)=<1,s(3)=<64]

###### Computing sum for it(10)=<1  in Loop 10 
   - Applying inductive sum strategy 
     - head Candidate: V__0-63 
     - head Candidate: V__0-63 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V__0-63 
     - tail Candidate: V__0-63 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(10)=<V__0-63,it(10)=<V__0-63,it(10)=<V__0-V__0',it(10)=<V__0-V__0'] 

##### Pending set eval_zwritehexstring_at_extracted_0(V_len,B)
* Psum in Loop 10: [s(3)=<64]

###### Computing sum for s(3)=<64  in Loop 10 
   - Found a solution using cacheing 
 * Adding constraints: [s(3)=<aux(1)*64,aux(1)=<V__0-63,aux(1)=<V__0-63,aux(1)=<V__0-V__0',aux(1)=<V__0-V__0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [10] 

#### Simplifying cost structure of phase [10] 

#### Cost of phase [10]:eval_zwritehexstring_at_extracted_bb1_in(V__0,B) -> [eval_zwritehexstring_at_extracted_bb1_in(V__0',B')] 
2*it(10)+1*s(3)+0
  Such that:aux(2) =< V__0
aux(3) =< V__0-V__0'
aux(1) =< aux(2)
it(10) =< aux(2)
aux(1) =< aux(3)
it(10) =< aux(3)
s(3) =< aux(1)*64

#### Simplifying cost structure of chain [[10],13] 
 * Joined equivalent variables [aux(4),aux(2),aux(3)] into aux(4)
 * Joined equivalent variables [aux(4),aux(1)] into aux(4)

#### Simplifying cost structure of CE 12 

#### Simplifying cost structure of chain [12,13] 

#### Found solution for phase  [10] in the cache 

#### Cost of phase [10]:eval_zwritehexstring_at_extracted_bb1_in(V__0,B) -> [eval_zwritehexstring_at_extracted_bb1_in(V__0',B')] 
2*it(10)+1*s(3)+0
  Such that:aux(2) =< V__0
aux(3) =< V__0-V__0'
aux(1) =< aux(2)
it(10) =< aux(2)
aux(1) =< aux(3)
it(10) =< aux(3)
s(3) =< aux(1)*64

#### Simplifying cost structure of chain [[10],12,13] 
 * Joined equivalent variables [aux(5),aux(2),aux(3)] into aux(5)
 * Joined equivalent variables [aux(5),aux(1)] into aux(5)
 * Renamed intermediate variables: 
[(eq(13,1),it(8))>>s(4)]

#### Simplifying cost structure of CE 13 

#### Simplifying cost structure of chain [11,13] 

#### Found solution for phase  [10] in the cache 

#### Cost of phase [10]:eval_zwritehexstring_at_extracted_bb1_in(V__0,B) -> [eval_zwritehexstring_at_extracted_bb1_in(V__0',B')] 
2*it(10)+1*s(3)+0
  Such that:aux(2) =< V__0
aux(3) =< V__0-V__0'
aux(1) =< aux(2)
it(10) =< aux(2)
aux(1) =< aux(3)
it(10) =< aux(3)
s(3) =< aux(1)*64

#### Simplifying cost structure of chain [[10],11,13] 
 * Joined equivalent variables [aux(6),aux(2),aux(3)] into aux(6)
 * Joined equivalent variables [aux(6),aux(1)] into aux(6)

#### Cost of chains of eval_zwritehexstring_at_extracted_bb1_in(V__0,B):
* Chain [[10],13]: 2*it(10)+1*s(3)+0
  Such that:aux(4) =< V__0
it(10) =< aux(4)
s(3) =< aux(4)*64

  with precondition: [B=3,V__0>=64] 

* Chain [[10],12,13]: 2*it(10)+1*s(3)+2
  Such that:aux(5) =< V__0
it(10) =< aux(5)
s(3) =< aux(5)*64

  with precondition: [B=3,V__0>=65] 

* Chain [[10],11,13]: 2*it(10)+1*s(3)+1*s(4)+2
  Such that:s(4) =< 63
aux(6) =< V__0
s(4) =< aux(6)
it(10) =< aux(6)
s(3) =< aux(6)*64

  with precondition: [B=3,V__0>=66] 

* Chain [13]: 0
  with precondition: [B=3,0>=V__0] 

* Chain [12,13]: 2
  with precondition: [V__0=1,B=3] 

* Chain [11,13]: 1*s(4)+2
  Such that:s(4) =< V__0

  with precondition: [B=3,63>=V__0,V__0>=2] 


#### Simplifying cost structure of CE 14 
 * Renamed intermediate variables: 
[(eq(15,1),s(4))>>s(5)]

#### Simplifying cost structure of CE 15 

#### Simplifying cost structure of CE 16 
 * Renamed intermediate variables: 
[(eq(17,1),aux(4))>>s(6),(eq(17,1),it(10))>>s(7),(eq(17,1),s(3))>>s(8)]

#### Simplifying cost structure of CE 17 
 * Renamed intermediate variables: 
[(eq(18,1),aux(5))>>s(9),(eq(18,1),it(10))>>s(10),(eq(18,1),s(3))>>s(11)]

#### Simplifying cost structure of CE 18 
 * Renamed intermediate variables: 
[(eq(19,1),s(4))>>s(12),(eq(19,1),aux(6))>>s(13),(eq(19,1),it(10))>>s(14),(eq(19,1),s(3))>>s(15)]

#### Simplifying cost structure of CE 19 

#### Cost of chains of eval_zwritehexstring_at_extracted_4(V_len,B):
* Chain [19]: 3
  with precondition: [V_len=1] 

* Chain [18]: 1*s(5)+3
  Such that:s(5) =< V_len

  with precondition: [63>=V_len,V_len>=2] 

* Chain [17]: 1
  with precondition: [0>=V_len] 

* Chain [16]: 2*s(7)+1*s(8)+1
  Such that:s(6) =< V_len
s(7) =< s(6)
s(8) =< s(6)*64

  with precondition: [V_len>=64] 

* Chain [15]: 2*s(10)+1*s(11)+3
  Such that:s(9) =< V_len
s(10) =< s(9)
s(11) =< s(9)*64

  with precondition: [V_len>=65] 

* Chain [14]: 1*s(12)+2*s(14)+1*s(15)+3
  Such that:s(12) =< 63
s(13) =< V_len
s(12) =< s(13)
s(14) =< s(13)
s(15) =< s(13)*64

  with precondition: [V_len>=66] 


#### Simplifying cost structure of CE 20 
 * Renamed intermediate variables: 
[(eq(21,1),s(5))>>s(16)]

#### Simplifying cost structure of CE 21 

#### Simplifying cost structure of CE 22 
 * Renamed intermediate variables: 
[(eq(23,1),s(6))>>s(17),(eq(23,1),s(7))>>s(18),(eq(23,1),s(8))>>s(19)]

#### Simplifying cost structure of CE 23 
 * Renamed intermediate variables: 
[(eq(24,1),s(9))>>s(20),(eq(24,1),s(10))>>s(21),(eq(24,1),s(11))>>s(22)]

#### Simplifying cost structure of CE 24 
 * Renamed intermediate variables: 
[(eq(25,1),s(12))>>s(23),(eq(25,1),s(13))>>s(24),(eq(25,1),s(14))>>s(25),(eq(25,1),s(15))>>s(26)]

#### Simplifying cost structure of CE 25 

#### Cost of chains of eval_zwritehexstring_at_extracted_start(V_len,B):
* Chain [25]: 3
  with precondition: [V_len=1] 

* Chain [24]: 1*s(16)+3
  Such that:s(16) =< V_len

  with precondition: [63>=V_len,V_len>=2] 

* Chain [23]: 1
  with precondition: [0>=V_len] 

* Chain [22]: 2*s(18)+1*s(19)+1
  Such that:s(17) =< V_len
s(18) =< s(17)
s(19) =< s(17)*64

  with precondition: [V_len>=64] 

* Chain [21]: 2*s(21)+1*s(22)+3
  Such that:s(20) =< V_len
s(21) =< s(20)
s(22) =< s(20)*64

  with precondition: [V_len>=65] 

* Chain [20]: 1*s(23)+2*s(25)+1*s(26)+3
  Such that:s(23) =< 63
s(24) =< V_len
s(23) =< s(24)
s(25) =< s(24)
s(26) =< s(24)*64

  with precondition: [V_len>=66] 


Closed-form bounds of eval_zwritehexstring_at_extracted_start(V_len,B): 
-------------------------------------
* Chain [25] with precondition: [V_len=1] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [24] with precondition: [63>=V_len,V_len>=2] 
    - Upper bound: V_len+3 
    - Complexity: n 
* Chain [23] with precondition: [0>=V_len] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [22] with precondition: [V_len>=64] 
    - Upper bound: 66*V_len+1 
    - Complexity: n 
* Chain [21] with precondition: [V_len>=65] 
    - Upper bound: 66*V_len+3 
    - Complexity: n 
* Chain [20] with precondition: [V_len>=66] 
    - Upper bound: 66*V_len+66 
    - Complexity: n 

### Maximum cost of eval_zwritehexstring_at_extracted_start(V_len,B): max([2,nat(V_len)+max([2,nat(V_len)*65+65])])+1 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 15 ms.
* Invariants computed in 29 ms.
   - Backward Invariants 15 ms.
   - Transitive Invariants 4 ms.
* Refinement performed in 36 ms.
* Termination proved in 5 ms.
* Upper bounds computed in 44 ms.
   - Equation cost structures 12 ms.
   - Phase cost structures 12 ms.
   - Chain cost structures 12 ms.
   - Solving cost expressions 2 ms.
* Total analysis performed in 154 ms.


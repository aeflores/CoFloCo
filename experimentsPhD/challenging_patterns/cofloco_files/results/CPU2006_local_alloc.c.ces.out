Warning: Ignored call to eval_local_alloc_stop/1 in equation eval_local_alloc_bb6_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_local_alloc_bb3_in/11,eval_local_alloc_bb4_in/11]
1. recursive  : [eval_local_alloc_bb1_in/5,eval_local_alloc_bb2_in/5,eval_local_alloc_bb5_in/6,loop_cont_eval_local_alloc_bb3_in/7]
2. non_recursive  : [eval_local_alloc_bb6_in/1]
3. non_recursive  : [loop_cont_eval_local_alloc_bb1_in/2]
4. non_recursive  : [eval_local_alloc_9/4]
5. non_recursive  : [eval_local_alloc_8/4]
6. non_recursive  : [eval_local_alloc_7/4]
7. non_recursive  : [eval_local_alloc_6/4]
8. non_recursive  : [eval_local_alloc_5/4]
9. non_recursive  : [eval_local_alloc_4/4]
10. non_recursive  : [eval_local_alloc_3/4]
11. non_recursive  : [eval_local_alloc_2/4]
12. non_recursive  : [eval_local_alloc_1/4]
13. non_recursive  : [eval_local_alloc_0/4]
14. non_recursive  : [eval_local_alloc_bb0_in/4]
15. non_recursive  : [eval_local_alloc_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_local_alloc_bb3_in/11
1. SCC is partially evaluated into eval_local_alloc_bb1_in/5
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_local_alloc_9/4
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is partially evaluated into eval_local_alloc_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_local_alloc_bb3_in/11 
* CE 7 is refined into CE [8] 
* CE 6 is refined into CE [9] 


#### Refined cost equations eval_local_alloc_bb3_in/11 
* CE 8: eval_local_alloc_bb3_in(A,B,C,D,E,F,A,B,C,D,E) = 0
     [E>=D,B>=D+1,A>=C+1,E>=0,F=2] 
* CE 9: eval_local_alloc_bb3_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,V_i_0,B,C,D,E,F,G) = 1+ eval_local_alloc_bb3_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,H,I,C,D,E,F,G)
     [V_next_qty_0>=V_i_0+1,V_limit>=V_next_qty_0+1,V_n_basic_blocks>=V_b_0+1,V_i_0>=0,V_i_0+1=H,I=2,B=2] 

### Cost equations --> "Loop" of eval_local_alloc_bb3_in/11 
* CEs [9] --> Loop 8 
* CEs [8] --> Loop 9 

#### Loops of eval_local_alloc_bb3_in/11 
* Loop 8: eval_local_alloc_bb3_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,V_i_0,B,C,D,E,F,G)->  eval_local_alloc_bb3_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,V_i_0',B',C,D,E,F,G)
                  [V_next_qty_0>=V_i_0+1,V_limit>=V_next_qty_0+1,V_n_basic_blocks>=V_b_0+1,V_i_0>=0,V_i_0+1=V_i_0',B'=2,B=2] 
* Loop 9: eval_local_alloc_bb3_in(A,B,C,D,E,F,A,B,C,D,E) [E>=D,B>=D+1,A>=C+1,E>=0,F=2] 

### Ranking functions of CR eval_local_alloc_bb3_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,V_i_0,B,C,D,E,F,G) 
* RF of phase [8]: [V_limit-V_i_0-1,V_next_qty_0-V_i_0]

#### Partial ranking functions of CR eval_local_alloc_bb3_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,V_i_0,B,C,D,E,F,G) 
* Partial RF of phase [8]:
  - RF of loop [8:1]:
    V_limit-V_i_0-1
    V_next_qty_0-V_i_0

Discarded unfeasible chain [[8]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_local_alloc_bb3_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,V_i_0,B,C,D,E,F,G) 
* [[8],9]
* [9]


### Merging Chains  eval_local_alloc_bb3_in/11 into  External patterns of execution 
* [[9,[8]]] --> 1 
* [[9]] --> 2 


### Specialization of cost equations eval_local_alloc_bb1_in/5 
* CE 5 is refined into CE [10] 
* CE 4 is refined into CE [11,12] 
* CE 3 is refined into CE [13] 


#### Refined cost equations eval_local_alloc_bb1_in/5 
* CE 10: eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,B) = 0
     [V_b_0>=V_n_basic_blocks,B=3] 
* CE 11: eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,B) = 2+ eval_local_alloc_bb3_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,C,D,V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,V_next_qty_0):1+ eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,E,F,G)
     [V_limit>=V_next_qty_0+1,V_n_basic_blocks>=V_b_0+1,V_next_qty_0>=1,V_b_0+1=E,G=3,F=0,D=2,C=0,B=3] 
* CE 12: eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,B) = 2+ eval_local_alloc_bb3_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,C,D,V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,E):2+ eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,F,G,H)
     [V_limit>=V_next_qty_0+1,V_n_basic_blocks>=V_b_0+1,0>=V_next_qty_0,V_b_0+1=F,H=3,G=0,E=0,D=2,C=0,B=3] 
* CE 13: eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,B) = 1+ eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,C,D,E)
     [V_n_basic_blocks>=V_b_0+1,V_next_qty_0>=V_limit,V_b_0+1=C,E=3,D=0,B=3] 

### Cost equations --> "Loop" of eval_local_alloc_bb1_in/5 
* CEs [13] --> Loop 10 
* CEs [11] --> Loop 11 
* CEs [12] --> Loop 12 
* CEs [10] --> Loop 13 

#### Loops of eval_local_alloc_bb1_in/5 
* Loop 10: eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,B)->  eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0',V_next_qty_0',B')
                  [V_n_basic_blocks>=V_b_0+1,V_next_qty_0>=V_limit,V_b_0+1=V_b_0',B'=3,V_next_qty_0'=0,B=3] 
* Loop 11: eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,B)->  eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0',V_next_qty_0',B')
                  [V_limit>=V_next_qty_0+1,V_n_basic_blocks>=V_b_0+1,V_next_qty_0>=1,V_b_0+1=V_b_0',B'=3,V_next_qty_0'=0,B=3] 
* Loop 12: eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,B)->  eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0',V_next_qty_0',B')
                  [V_limit>=V_next_qty_0+1,V_n_basic_blocks>=V_b_0+1,0>=V_next_qty_0,V_b_0+1=V_b_0',B'=3,V_next_qty_0'=0,B=3] 
* Loop 13: eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,B) [V_b_0>=V_n_basic_blocks,B=3] 

### Ranking functions of CR eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,B) 
* RF of phase [10,12]: [V_n_basic_blocks-V_b_0]

#### Partial ranking functions of CR eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,B) 
* Partial RF of phase [10,12]:
  - RF of loop [10:1,12:1]:
    V_n_basic_blocks-V_b_0

Discarded unfeasible chain [[10,12]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [11,[10,12]](Non-terminating chain proved terminating)

### Resulting Chains:eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,B) 
* [[10,12],13]
* [13]
* [11,[10,12],13]
* [11,13]


### Merging Chains  eval_local_alloc_bb1_in/5 into  External patterns of execution 
* [[13,11]] --> 1 
* [[13,[10,12],11]] --> 2 
* [[13]] --> 3 
* [[13,[10,12]]] --> 4 


### Specialization of cost equations eval_local_alloc_9/4 
* CE 2 is refined into CE [14,15,16,17] 


#### Refined cost equations eval_local_alloc_9/4 
* CE 14: eval_local_alloc_9(V_max_qty,V_n_basic_blocks,V_limit,B) = 1+ eval_local_alloc_bb1_in(C,V_limit,D,V_max_qty,E):1
     [V_limit>=V_max_qty+1,V_max_qty>=1,E=3,D=0,C=1,V_n_basic_blocks=1] 
* CE 15: eval_local_alloc_9(V_max_qty,V_n_basic_blocks,V_limit,B) = 1+ eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,C,V_max_qty,D):2
     [V_limit>=V_max_qty+1,V_max_qty>=1,V_n_basic_blocks>=2,D=3,C=0] 
* CE 16: eval_local_alloc_9(V_max_qty,V_n_basic_blocks,V_limit,B) = 1+ eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,C,V_max_qty,D):3
     [0>=V_n_basic_blocks,D=3,C=0] 
* CE 17: eval_local_alloc_9(V_max_qty,V_n_basic_blocks,V_limit,B) = 1+ eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,C,V_max_qty,D):4
     [V_n_basic_blocks>=1,D=3,C=0] 

### Cost equations --> "Loop" of eval_local_alloc_9/4 
* CEs [17] --> Loop 14 
* CEs [15] --> Loop 15 
* CEs [16] --> Loop 16 
* CEs [14] --> Loop 17 

#### Loops of eval_local_alloc_9/4 
* Loop 14: eval_local_alloc_9(V_max_qty,V_n_basic_blocks,V_limit,B) [V_n_basic_blocks>=1] 
* Loop 15: eval_local_alloc_9(V_max_qty,V_n_basic_blocks,V_limit,B) [V_limit>=V_max_qty+1,V_n_basic_blocks>=2,V_max_qty>=1] 
* Loop 16: eval_local_alloc_9(V_max_qty,V_n_basic_blocks,V_limit,B) [0>=V_n_basic_blocks] 
* Loop 17: eval_local_alloc_9(V_max_qty,V_n_basic_blocks,V_limit,B) [V_limit>=V_max_qty+1,V_max_qty>=1,V_n_basic_blocks=1] 

### Ranking functions of CR eval_local_alloc_9(V_max_qty,V_n_basic_blocks,V_limit,B) 

#### Partial ranking functions of CR eval_local_alloc_9(V_max_qty,V_n_basic_blocks,V_limit,B) 


### Resulting Chains:eval_local_alloc_9(V_max_qty,V_n_basic_blocks,V_limit,B) 
* [17]
* [16]
* [15]
* [14]


### Merging Chains  eval_local_alloc_9/4 into  External patterns of execution 
* [[17]] --> 1 
* [[16]] --> 2 
* [[15]] --> 3 
* [[14]] --> 4 


### Specialization of cost equations eval_local_alloc_start/4 
* CE 1 is refined into CE [18,19,20,21] 


#### Refined cost equations eval_local_alloc_start/4 
* CE 18: eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B) = 0+ eval_local_alloc_9(V_max_qty,C,V_limit,B):1
     [V_limit>=V_max_qty+1,V_max_qty>=1,C=1,V_n_basic_blocks=1] 
* CE 19: eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B) = 0+ eval_local_alloc_9(V_max_qty,V_n_basic_blocks,V_limit,B):2
     [0>=V_n_basic_blocks] 
* CE 20: eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B) = 0+ eval_local_alloc_9(V_max_qty,V_n_basic_blocks,V_limit,B):3
     [V_limit>=V_max_qty+1,V_n_basic_blocks>=2,V_max_qty>=1] 
* CE 21: eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B) = 0+ eval_local_alloc_9(V_max_qty,V_n_basic_blocks,V_limit,B):4
     [V_n_basic_blocks>=1] 

### Cost equations --> "Loop" of eval_local_alloc_start/4 
* CEs [21] --> Loop 18 
* CEs [20] --> Loop 19 
* CEs [19] --> Loop 20 
* CEs [18] --> Loop 21 

#### Loops of eval_local_alloc_start/4 
* Loop 18: eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B) [V_n_basic_blocks>=1] 
* Loop 19: eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B) [V_limit>=V_max_qty+1,V_n_basic_blocks>=2,V_max_qty>=1] 
* Loop 20: eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B) [0>=V_n_basic_blocks] 
* Loop 21: eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B) [V_limit>=V_max_qty+1,V_max_qty>=1,V_n_basic_blocks=1] 

### Ranking functions of CR eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B) 

#### Partial ranking functions of CR eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B) 


### Resulting Chains:eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B) 
* [21]
* [20]
* [19]
* [18]


### Merging Chains  eval_local_alloc_start/4 into  External patterns of execution 
* [[21]] --> 1 
* [[20]] --> 2 
* [[19]] --> 3 
* [[18]] --> 4 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 8 

#### Computing cost of phase [8] 

#### Simplifying cost structure of CE 9 

#### Cost of loops [8] 

 * loop 8:eval_local_alloc_bb3_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,V_i_0,B,C,D,E,F,G) -> [eval_local_alloc_bb3_in(V_n_basic_blocks',V_limit',V_b_0',V_next_qty_0',V_i_0',B',C',D',E',F',G')] 
1
##### Pending set eval_local_alloc_bb3_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,V_i_0,B,C,D,E,F,G)
* Psum in Loop 8: [it(8)=<1]

###### Computing sum for it(8)=<1  in Loop 8 
   - Applying inductive sum strategy 
     - head Candidate: V_next_qty_0-V_i_0 
     - head Candidate: V_limit-V_i_0-1 
     - head Candidate: V_limit-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_next_qty_0-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_next_qty_0-V_i_0 
     - tail Candidate: V_limit-V_i_0-1 
     - tail Candidate: V_limit-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_next_qty_0-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(8)=<V_next_qty_0-V_i_0,it(8)=<V_limit-V_i_0-1,it(8)=<V_limit-V_i_0-1,it(8)=<V_next_qty_0-V_i_0,it(8)=<V_next_qty_0-V_i_0-V_next_qty_0'+V_i_0',it(8)=<V_limit-V_i_0-V_limit'+V_i_0',it(8)=<V_limit-V_i_0-V_limit'+V_i_0',it(8)=<V_next_qty_0-V_i_0-V_next_qty_0'+V_i_0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [8] 

#### Simplifying cost structure of phase [8] 

#### Cost of phase [8]:eval_local_alloc_bb3_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,V_i_0,B,C,D,E,F,G) -> [eval_local_alloc_bb3_in(V_n_basic_blocks',V_limit',V_b_0',V_next_qty_0',V_i_0',B',C',D',E',F',G')] 
1*it(8)+0
  Such that:it(8) =< V_limit-V_i_0
it(8) =< V_limit-V_i_0-V_limit'+V_i_0'
it(8) =< V_next_qty_0-V_i_0
it(8) =< V_next_qty_0-V_i_0-V_next_qty_0'+V_i_0'

#### Simplifying cost structure of chain [[8],9] 

#### Cost of chains of eval_local_alloc_bb3_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,V_i_0,B,C,D,E,F,G):
* Chain [[8],9]: 1*it(8)+0
  Such that:it(8) =< -V_i_0+F

  with precondition: [B=2,V_n_basic_blocks=C,V_limit=D,V_b_0=E,V_next_qty_0=F,V_next_qty_0=G,V_i_0>=0,V_n_basic_blocks>=V_b_0+1,V_limit>=V_next_qty_0+1,V_next_qty_0>=V_i_0+1] 

* Chain [9]: 0
  with precondition: [B=2,V_n_basic_blocks=C,V_limit=D,V_b_0=E,V_next_qty_0=F,V_i_0=G,V_i_0>=0,V_n_basic_blocks>=V_b_0+1,V_limit>=V_next_qty_0+1,V_i_0>=V_next_qty_0] 


#### Simplifying cost structure of CE 10 

#### Computing cost of phase [10,12] 

#### Simplifying cost structure of CE 13 

#### Simplifying cost structure of CE 12 

#### Cost of loops [10,12] 

 * loop 10:eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,B) -> [eval_local_alloc_bb1_in(V_n_basic_blocks',V_limit',V_b_0',V_next_qty_0',B')] 
1
 * loop 12:eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,B) -> [eval_local_alloc_bb1_in(V_n_basic_blocks',V_limit',V_b_0',V_next_qty_0',B')] 
2
##### Pending set eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,B)
* Psum in Loop 10: [it(10)=<1]
* Psum in Loop 12: [it(12)=<1]

###### Computing sum for it(10)=<1  in Loop 10 
   - Applying inductive sum strategy 
     - head Candidate: V_n_basic_blocks-V_b_0 
       - Loop 12 is collaborative and bounds [it(12)] 
     - head Candidate: V_n_basic_blocks-V_b_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_n_basic_blocks-V_b_0 
       - Loop 12 is collaborative and bounds [it(12)] 
     - tail Candidate: V_n_basic_blocks-V_b_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(10)+it(12)=<V_n_basic_blocks-V_b_0,it(10)+it(12)=<V_n_basic_blocks-V_b_0,it(10)+it(12)=<V_n_basic_blocks-V_b_0-V_n_basic_blocks'+V_b_0',it(10)+it(12)=<V_n_basic_blocks-V_b_0-V_n_basic_blocks'+V_b_0'] 

##### Pending set eval_local_alloc_0(V_max_qty,V_n_basic_blocks,V_limit,B)
* Psum in Loop 12: [it(12)=<1]

###### Computing sum for it(12)=<1  in Loop 12 
   - Applying inductive sum strategy 
     - head Candidate: V_n_basic_blocks-V_b_0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_n_basic_blocks-V_b_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_n_basic_blocks-V_b_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_n_basic_blocks-V_b_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(10)+it(12)=<V_n_basic_blocks-V_b_0,it(10)+it(12)=<V_n_basic_blocks-V_b_0,it(10)+it(12)=<V_n_basic_blocks-V_b_0-V_n_basic_blocks'+V_b_0',it(10)+it(12)=<V_n_basic_blocks-V_b_0-V_n_basic_blocks'+V_b_0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [10,12] 

#### Simplifying cost structure of phase [10,12] 
 * Joined equivalent variables [it(10),it(12)] into it(10)

#### Cost of phase [10,12]:eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,B) -> [eval_local_alloc_bb1_in(V_n_basic_blocks',V_limit',V_b_0',V_next_qty_0',B')] 
3*it(10)+0
  Such that:aux(1) =< V_n_basic_blocks-V_b_0
aux(2) =< V_n_basic_blocks-V_b_0-V_n_basic_blocks'+V_b_0'
it(10) =< aux(1)
it(10) =< aux(2)

#### Simplifying cost structure of chain [[10,12],13] 
 * Joined equivalent variables [aux(3),aux(1),aux(2)] into aux(3)
 * Renamed intermediate variables: 
[(eq(11,1),it(8))>>s(1)]

#### Simplifying cost structure of CE 11 

#### Simplifying cost structure of chain [11,[10,12],13] 

#### Simplifying cost structure of chain [11,13] 

#### Cost of chains of eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,B):
* Chain [[10,12],13]: 3*it(10)+0
  Such that:aux(3) =< V_n_basic_blocks-V_b_0
it(10) =< aux(3)

  with precondition: [B=3,V_b_0>=0,V_n_basic_blocks>=V_b_0+1] 

* Chain [13]: 0
  with precondition: [B=3,V_b_0>=0,V_b_0>=V_n_basic_blocks] 

* Chain [11,[10,12],13]: 3*it(10)+1*s(1)+2
  Such that:aux(3) =< V_n_basic_blocks
s(1) =< V_next_qty_0
it(10) =< aux(3)

  with precondition: [V_b_0=0,B=3,V_n_basic_blocks>=2,V_next_qty_0>=1,V_limit>=V_next_qty_0+1] 

* Chain [11,13]: 1*s(1)+2
  Such that:s(1) =< V_next_qty_0

  with precondition: [V_n_basic_blocks=1,V_b_0=0,B=3,V_next_qty_0>=1,V_limit>=V_next_qty_0+1] 

 * Renamed intermediate variables: 
[(eq(14,1),s(1))>>s(2)]

#### Simplifying cost structure of CE 14 

#### Simplifying cost structure of CE 16 
 * Renamed intermediate variables: 
[(eq(15,1),aux(3))>>s(3),(eq(15,1),s(1))>>s(4),(eq(15,1),it(10))>>s(5)]

#### Simplifying cost structure of CE 15 
 * Renamed intermediate variables: 
[(eq(17,1),aux(3))>>s(6),(eq(17,1),it(10))>>s(7)]

#### Simplifying cost structure of CE 17 

#### Cost of chains of eval_local_alloc_9(V_max_qty,V_n_basic_blocks,V_limit,B):
* Chain [17]: 1*s(2)+3
  Such that:s(2) =< V_max_qty

  with precondition: [V_n_basic_blocks=1,V_max_qty>=1,V_limit>=V_max_qty+1] 

* Chain [16]: 1
  with precondition: [0>=V_n_basic_blocks] 

* Chain [15]: 1*s(4)+3*s(5)+3
  Such that:s(4) =< V_max_qty
s(3) =< V_n_basic_blocks
s(5) =< s(3)

  with precondition: [V_max_qty>=1,V_n_basic_blocks>=2,V_limit>=V_max_qty+1] 

* Chain [14]: 3*s(7)+1
  Such that:s(6) =< V_n_basic_blocks
s(7) =< s(6)

  with precondition: [V_n_basic_blocks>=1] 

 * Renamed intermediate variables: 
[(eq(18,1),s(2))>>s(8)]

#### Simplifying cost structure of CE 18 

#### Simplifying cost structure of CE 19 
 * Renamed intermediate variables: 
[(eq(20,1),s(4))>>s(9),(eq(20,1),s(3))>>s(10),(eq(20,1),s(5))>>s(11)]

#### Simplifying cost structure of CE 20 
 * Renamed intermediate variables: 
[(eq(21,1),s(6))>>s(12),(eq(21,1),s(7))>>s(13)]

#### Simplifying cost structure of CE 21 

#### Cost of chains of eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B):
* Chain [21]: 1*s(8)+3
  Such that:s(8) =< V_max_qty

  with precondition: [V_n_basic_blocks=1,V_max_qty>=1,V_limit>=V_max_qty+1] 

* Chain [20]: 1
  with precondition: [0>=V_n_basic_blocks] 

* Chain [19]: 1*s(9)+3*s(11)+3
  Such that:s(9) =< V_max_qty
s(10) =< V_n_basic_blocks
s(11) =< s(10)

  with precondition: [V_max_qty>=1,V_n_basic_blocks>=2,V_limit>=V_max_qty+1] 

* Chain [18]: 3*s(13)+1
  Such that:s(12) =< V_n_basic_blocks
s(13) =< s(12)

  with precondition: [V_n_basic_blocks>=1] 


Closed-form bounds of eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B): 
-------------------------------------
* Chain [21] with precondition: [V_n_basic_blocks=1,V_max_qty>=1,V_limit>=V_max_qty+1] 
    - Upper bound: V_max_qty+3 
    - Complexity: n 
* Chain [20] with precondition: [0>=V_n_basic_blocks] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [19] with precondition: [V_max_qty>=1,V_n_basic_blocks>=2,V_limit>=V_max_qty+1] 
    - Upper bound: V_max_qty+3*V_n_basic_blocks+3 
    - Complexity: n 
* Chain [18] with precondition: [V_n_basic_blocks>=1] 
    - Upper bound: 3*V_n_basic_blocks+1 
    - Complexity: n 

### Maximum cost of eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B): nat(V_n_basic_blocks)*3+1+(nat(V_max_qty)+2) 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 30 ms.
* Invariants computed in 53 ms.
   - Backward Invariants 21 ms.
   - Transitive Invariants 9 ms.
* Refinement performed in 64 ms.
* Termination proved in 12 ms.
* Upper bounds computed in 66 ms.
   - Equation cost structures 23 ms.
   - Phase cost structures 20 ms.
   - Chain cost structures 17 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 266 ms.


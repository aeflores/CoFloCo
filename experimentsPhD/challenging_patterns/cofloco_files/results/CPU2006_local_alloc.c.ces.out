Warning: Ignored call to eval_local_alloc_stop/1 in equation eval_local_alloc_bb6_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_local_alloc_bb3_in/11,eval_local_alloc_bb4_in/11]
1. recursive : [eval_local_alloc_bb1_in/5,eval_local_alloc_bb2_in/5,eval_local_alloc_bb5_in/6,loop_cont_eval_local_alloc_bb3_in/7]
2. non_recursive : [eval_local_alloc_bb6_in/1]
3. non_recursive : [loop_cont_eval_local_alloc_bb1_in/2]
4. non_recursive : [eval_local_alloc_9/4]
5. non_recursive : [eval_local_alloc_8/4]
6. non_recursive : [eval_local_alloc_7/4]
7. non_recursive : [eval_local_alloc_6/4]
8. non_recursive : [eval_local_alloc_5/4]
9. non_recursive : [eval_local_alloc_4/4]
10. non_recursive : [eval_local_alloc_3/4]
11. non_recursive : [eval_local_alloc_2/4]
12. non_recursive : [eval_local_alloc_1/4]
13. non_recursive : [eval_local_alloc_0/4]
14. non_recursive : [eval_local_alloc_bb0_in/4]
15. non_recursive : [eval_local_alloc_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_local_alloc_bb3_in/11
1. SCC is partially evaluated into eval_local_alloc_bb1_in/5
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is partially evaluated into eval_local_alloc_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_local_alloc_bb3_in/11 
* CE 7 is refined into CE [8] 
* CE 6 is refined into CE [9] 


#### Refined cost equations eval_local_alloc_bb3_in/11 
* CE 8: eval_local_alloc_bb3_in(A,B,C,D,E,F,A,B,C,D,E) = 0
     [E>=D,B>=D+1,A>=C+1,E>=0,F=2] 
* CE 9: eval_local_alloc_bb3_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,V_i_0,B,C,D,E,F,G) = 1+ eval_local_alloc_bb3_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,H,I,C,D,E,F,G)
     [V_next_qty_0>=V_i_0+1,V_limit>=V_next_qty_0+1,V_n_basic_blocks>=V_b_0+1,V_i_0>=0,V_i_0+1=H,I=2,B=2] 

### Cost equations --> "Loop" of eval_local_alloc_bb3_in/11 
* CEs [9] --> Loop 7 
* CEs [8] --> Loop 8 

#### Loops of eval_local_alloc_bb3_in/11 
* Loop 7: eval_local_alloc_bb3_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,V_i_0,B,C,D,E,F,G)->  eval_local_alloc_bb3_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,V_i_0',B',C,D,E,F,G)
                  [V_next_qty_0>=V_i_0+1,V_limit>=V_next_qty_0+1,V_n_basic_blocks>=V_b_0+1,V_i_0>=0,V_i_0+1=V_i_0',B'=2,B=2] 
* Loop 8: eval_local_alloc_bb3_in(A,B,C,D,E,F,A,B,C,D,E) [E>=D,B>=D+1,A>=C+1,E>=0,F=2] 

### Ranking functions of CR eval_local_alloc_bb3_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,V_i_0,B,C,D,E,F,G) 
* RF of phase [7]: [V_limit-V_i_0-1,V_next_qty_0-V_i_0]

#### Partial ranking functions of CR eval_local_alloc_bb3_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,V_i_0,B,C,D,E,F,G) 
* Partial RF of phase [7]:
  - RF of loop [7:1]:
    V_limit-V_i_0-1
    V_next_qty_0-V_i_0

Discarded unfeasible chain [[7]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_local_alloc_bb3_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,V_i_0,B,C,D,E,F,G) 
* [[7],8]
* [8]


### Merging Chains  eval_local_alloc_bb3_in/11 into  External patterns of execution 
* [[8,[7]]] --> 1 
* [[8]] --> 2 


### Specialization of cost equations eval_local_alloc_bb1_in/5 
* CE 5 is refined into CE [10] 
* CE 4 is refined into CE [11,12] 
* CE 3 is refined into CE [13] 


#### Refined cost equations eval_local_alloc_bb1_in/5 
* CE 10: eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,B) = 0
     [V_b_0>=V_n_basic_blocks,B=3] 
* CE 11: eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,B) = 2+ eval_local_alloc_bb3_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,C,D,V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,V_next_qty_0):1+ eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,E,F,G)
     [V_limit>=V_next_qty_0+1,V_n_basic_blocks>=V_b_0+1,V_next_qty_0>=1,V_b_0+1=E,G=3,F=0,D=2,C=0,B=3] 
* CE 12: eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,B) = 2+ eval_local_alloc_bb3_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,C,D,V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,E):2+ eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,F,G,H)
     [V_limit>=V_next_qty_0+1,V_n_basic_blocks>=V_b_0+1,0>=V_next_qty_0,V_b_0+1=F,H=3,G=0,E=0,D=2,C=0,B=3] 
* CE 13: eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,B) = 1+ eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,C,D,E)
     [V_n_basic_blocks>=V_b_0+1,V_next_qty_0>=V_limit,V_b_0+1=C,E=3,D=0,B=3] 

### Cost equations --> "Loop" of eval_local_alloc_bb1_in/5 
* CEs [13] --> Loop 9 
* CEs [11] --> Loop 10 
* CEs [12] --> Loop 11 
* CEs [10] --> Loop 12 

#### Loops of eval_local_alloc_bb1_in/5 
* Loop 9: eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,B)->  eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0',V_next_qty_0',B')
                  [V_n_basic_blocks>=V_b_0+1,V_next_qty_0>=V_limit,V_b_0+1=V_b_0',B'=3,V_next_qty_0'=0,B=3] 
* Loop 10: eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,B)->  eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0',V_next_qty_0',B')
                  [V_limit>=V_next_qty_0+1,V_n_basic_blocks>=V_b_0+1,V_next_qty_0>=1,V_b_0+1=V_b_0',B'=3,V_next_qty_0'=0,B=3] 
* Loop 11: eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,B)->  eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0',V_next_qty_0',B')
                  [V_limit>=V_next_qty_0+1,V_n_basic_blocks>=V_b_0+1,0>=V_next_qty_0,V_b_0+1=V_b_0',B'=3,V_next_qty_0'=0,B=3] 
* Loop 12: eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,B) [V_b_0>=V_n_basic_blocks,B=3] 

### Ranking functions of CR eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,B) 
* RF of phase [9,11]: [V_n_basic_blocks-V_b_0]

#### Partial ranking functions of CR eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,B) 
* Partial RF of phase [9,11]:
  - RF of loop [9:1,11:1]:
    V_n_basic_blocks-V_b_0

Discarded unfeasible chain [[9,11]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [10,[9,11]](Non-terminating chain proved terminating)

### Resulting Chains:eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,B) 
* [[9,11],12]
* [12]
* [10,[9,11],12]
* [10,12]


### Merging Chains  eval_local_alloc_bb1_in/5 into  External patterns of execution 
* [[12,10],[12,[9,11]]] --> 1 
* [[12,[9,11],10]] --> 2 
* [[12]] --> 3 


### Specialization of cost equations eval_local_alloc_start/4 
* CE 2 is refined into CE [14,15,16] 


#### Refined cost equations eval_local_alloc_start/4 
* CE 14: eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B) = 1+ eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,C,V_max_qty,D):1
     [V_n_basic_blocks>=1,D=3,C=0] 
* CE 15: eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B) = 1+ eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,C,V_max_qty,D):2
     [V_limit>=V_max_qty+1,V_max_qty>=1,V_n_basic_blocks>=2,D=3,C=0] 
* CE 16: eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B) = 1+ eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,C,V_max_qty,D):3
     [0>=V_n_basic_blocks,D=3,C=0] 

### Cost equations --> "Loop" of eval_local_alloc_start/4 
* CEs [14,15] --> Loop 13 
* CEs [16] --> Loop 14 

#### Loops of eval_local_alloc_start/4 
* Loop 13: eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B) [V_n_basic_blocks>=1] 
* Loop 14: eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B) [0>=V_n_basic_blocks] 

### Ranking functions of CR eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B) 

#### Partial ranking functions of CR eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B) 


### Resulting Chains:eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B) 
* [14]
* [13]


### Merging Chains  eval_local_alloc_start/4 into  External patterns of execution 
* [[14]] --> 1 
* [[13]] --> 2 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 8 

#### Computing cost of phase [7] 

#### Simplifying cost structure of CE 9 

#### Cost of loops [7] 

 * loop 7:eval_local_alloc_bb3_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,V_i_0,B,C,D,E,F,G) -> [eval_local_alloc_bb3_in(V_n_basic_blocks',V_limit',V_b_0',V_next_qty_0',V_i_0',B',C',D',E',F',G')] 
1
##### Pending set eval_local_alloc_bb3_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,V_i_0,B,C,D,E,F,G)
* Psum in Loop 7: [it(7)=<1]

###### Computing sum for it(7)=<1  in Loop 7 
   - Applying inductive sum strategy 
     - head Candidate: V_next_qty_0-V_i_0 
     - head Candidate: V_limit-V_i_0-1 
     - head Candidate: V_limit-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_next_qty_0-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_next_qty_0-V_i_0 
     - tail Candidate: V_limit-V_i_0-1 
     - tail Candidate: V_limit-V_i_0-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_next_qty_0-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(7)=<V_next_qty_0-V_i_0,it(7)=<V_limit-V_i_0-1,it(7)=<V_limit-V_i_0-1,it(7)=<V_next_qty_0-V_i_0,it(7)=<V_next_qty_0-V_i_0-V_next_qty_0'+V_i_0',it(7)=<V_limit-V_i_0-V_limit'+V_i_0',it(7)=<V_limit-V_i_0-V_limit'+V_i_0',it(7)=<V_next_qty_0-V_i_0-V_next_qty_0'+V_i_0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [7] 

#### Simplifying cost structure of phase [7] 

#### Cost of phase [7]:eval_local_alloc_bb3_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,V_i_0,B,C,D,E,F,G) -> [eval_local_alloc_bb3_in(V_n_basic_blocks',V_limit',V_b_0',V_next_qty_0',V_i_0',B',C',D',E',F',G')] 
1*it(7)+0
  Such that:it(7) =< V_limit-V_i_0
it(7) =< V_limit-V_i_0-V_limit'+V_i_0'
it(7) =< V_next_qty_0-V_i_0
it(7) =< V_next_qty_0-V_i_0-V_next_qty_0'+V_i_0'

#### Simplifying cost structure of chain [[7],8] 

#### Cost of chains of eval_local_alloc_bb3_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,V_i_0,B,C,D,E,F,G):
* Chain [[7],8]: 1*it(7)+0
  Such that:it(7) =< -V_i_0+F

  with precondition: [B=2,V_n_basic_blocks=C,V_limit=D,V_b_0=E,V_next_qty_0=F,V_next_qty_0=G,V_i_0>=0,V_n_basic_blocks>=V_b_0+1,V_limit>=V_next_qty_0+1,V_next_qty_0>=V_i_0+1] 

* Chain [8]: 0
  with precondition: [B=2,V_n_basic_blocks=C,V_limit=D,V_b_0=E,V_next_qty_0=F,V_i_0=G,V_i_0>=0,V_n_basic_blocks>=V_b_0+1,V_limit>=V_next_qty_0+1,V_i_0>=V_next_qty_0] 


#### Simplifying cost structure of CE 10 

#### Computing cost of phase [9,11] 

#### Simplifying cost structure of CE 13 

#### Simplifying cost structure of CE 12 

#### Cost of loops [9,11] 

 * loop 9:eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,B) -> [eval_local_alloc_bb1_in(V_n_basic_blocks',V_limit',V_b_0',V_next_qty_0',B')] 
1
 * loop 11:eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,B) -> [eval_local_alloc_bb1_in(V_n_basic_blocks',V_limit',V_b_0',V_next_qty_0',B')] 
2
##### Pending set eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,B)
* Psum in Loop 9: [it(9)=<1]
* Psum in Loop 11: [it(11)=<1]

###### Computing sum for it(9)=<1  in Loop 9 
   - Applying inductive sum strategy 
     - head Candidate: V_n_basic_blocks-V_b_0 
       - Loop 11 is collaborative and bounds [it(11)] 
     - head Candidate: V_n_basic_blocks-V_b_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_n_basic_blocks-V_b_0 
       - Loop 11 is collaborative and bounds [it(11)] 
     - tail Candidate: V_n_basic_blocks-V_b_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(9)+it(11)=<V_n_basic_blocks-V_b_0,it(9)+it(11)=<V_n_basic_blocks-V_b_0,it(9)+it(11)=<V_n_basic_blocks-V_b_0-V_n_basic_blocks'+V_b_0',it(9)+it(11)=<V_n_basic_blocks-V_b_0-V_n_basic_blocks'+V_b_0'] 

##### Pending set eval_local_alloc_0(V_max_qty,V_n_basic_blocks,V_limit,B)
* Psum in Loop 11: [it(11)=<1]

###### Computing sum for it(11)=<1  in Loop 11 
   - Applying inductive sum strategy 
     - head Candidate: V_n_basic_blocks-V_b_0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_n_basic_blocks-V_b_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_n_basic_blocks-V_b_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_n_basic_blocks-V_b_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(9)+it(11)=<V_n_basic_blocks-V_b_0,it(9)+it(11)=<V_n_basic_blocks-V_b_0,it(9)+it(11)=<V_n_basic_blocks-V_b_0-V_n_basic_blocks'+V_b_0',it(9)+it(11)=<V_n_basic_blocks-V_b_0-V_n_basic_blocks'+V_b_0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [9,11] 

#### Simplifying cost structure of phase [9,11] 
 * Joined equivalent variables [it(9),it(11)] into it(9)

#### Cost of phase [9,11]:eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,B) -> [eval_local_alloc_bb1_in(V_n_basic_blocks',V_limit',V_b_0',V_next_qty_0',B')] 
3*it(9)+0
  Such that:aux(1) =< V_n_basic_blocks-V_b_0
aux(2) =< V_n_basic_blocks-V_b_0-V_n_basic_blocks'+V_b_0'
it(9) =< aux(1)
it(9) =< aux(2)

#### Simplifying cost structure of chain [[9,11],12] 
 * Joined equivalent variables [aux(3),aux(1),aux(2)] into aux(3)
 * Renamed intermediate variables: 
[ (eq(11,1),it(7))>>s(1)]

#### Simplifying cost structure of CE 11 

#### Simplifying cost structure of chain [10,[9,11],12] 

#### Simplifying cost structure of chain [10,12] 
 * Renamed intermediate variables: 
[ (ch([10,12]),s(1))>>s(2)]
 * Renamed intermediate variables: 
[ (ch([[9,11],12]),aux(3))>>s(3), (ch([[9,11],12]),it(9))>>s(4)]

#### Cost of chains of eval_local_alloc_bb1_in(V_n_basic_blocks,V_limit,V_b_0,V_next_qty_0,B):
* Chain [[9,11],12]: 3*it(9)+0
  Such that:aux(3) =< V_n_basic_blocks-V_b_0
it(9) =< aux(3)

  with precondition: [B=3,V_b_0>=0,V_n_basic_blocks>=V_b_0+1] 

* Chain [12]: 0
  with precondition: [B=3,V_b_0>=0,V_b_0>=V_n_basic_blocks] 

* Chain [10,[9,11],12]: 3*it(9)+1*s(1)+2
  Such that:aux(3) =< V_n_basic_blocks
s(1) =< V_next_qty_0
it(9) =< aux(3)

  with precondition: [V_b_0=0,B=3,V_n_basic_blocks>=2,V_next_qty_0>=1,V_limit>=V_next_qty_0+1] 

* Chain [10,12]: 1*s(1)+2
  Such that:s(1) =< V_next_qty_0

  with precondition: [V_n_basic_blocks=1,V_b_0=0,B=3,V_next_qty_0>=1,V_limit>=V_next_qty_0+1] 


#### Simplifying cost structure of CE 16 
 * Renamed intermediate variables: 
[ (eq(14,1),s(3))>>s(5), (eq(14,1),s(2))>>s(6), (eq(14,1),s(4))>>s(7)]

#### Simplifying cost structure of CE 14 
 * Renamed intermediate variables: 
[ (eq(15,1),aux(3))>>s(8), (eq(15,1),s(1))>>s(9), (eq(15,1),it(9))>>s(10)]

#### Simplifying cost structure of CE 15 
 * Joined equivalent variables [aux(5),s(5),s(8)] into aux(5)
 * Joined equivalent variables [s(6),s(9)] into s(6)
 * Joined equivalent variables [s(7),s(10)] into s(7)

#### Cost of chains of eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B):
* Chain [14]: 1
  with precondition: [0>=V_n_basic_blocks] 

* Chain [13]: 2*s(6)+6*s(7)+3
  Such that:aux(4) =< V_max_qty
aux(5) =< V_n_basic_blocks
s(6) =< aux(4)
s(7) =< aux(5)

  with precondition: [V_n_basic_blocks>=1] 


Closed-form bounds of eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B): 
-------------------------------------
* Chain [14] with precondition: [0>=V_n_basic_blocks] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [13] with precondition: [V_n_basic_blocks>=1] 
    - Upper bound: nat(V_max_qty)*2+3+6*V_n_basic_blocks 
    - Complexity: n 

### Maximum cost of eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B): nat(V_max_qty)*2+2+nat(V_n_basic_blocks)*6+1 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 71 ms.
* Invariants computed in 137 ms.
   - Backward Invariants 51 ms.
   - Transitive Invariants 32 ms.
* Refinement performed in 154 ms.
* Termination proved in 40 ms.
* Upper bounds computed in 133 ms.
   - Equation cost structures 36 ms.
   - Phase cost structures 50 ms.
   - Chain cost structures 37 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 637 ms.


Warning: Ignored call to eval_local_alloc_stop/1 in equation loop_cont_eval_local_alloc_bb1_in/2 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_local_alloc_bb3_in/9]
1. recursive : [eval_local_alloc_bb1_in/4,eval_local_alloc_bb5_in/5,loop_cont_eval_local_alloc_bb3_in/6]
2. non_recursive : [loop_cont_eval_local_alloc_bb1_in/2]
3. non_recursive : [eval_local_alloc_9/3]
4. non_recursive : [eval_local_alloc_8/3]
5. non_recursive : [eval_local_alloc_7/3]
6. non_recursive : [eval_local_alloc_6/3]
7. non_recursive : [eval_local_alloc_5/3]
8. non_recursive : [eval_local_alloc_4/3]
9. non_recursive : [eval_local_alloc_3/3]
10. non_recursive : [eval_local_alloc_2/3]
11. non_recursive : [eval_local_alloc_1/3]
12. non_recursive : [eval_local_alloc_0/3]
13. non_recursive : [eval_local_alloc_bb0_in/3]
14. non_recursive : [eval_local_alloc_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_local_alloc_bb3_in/9
1. SCC is partially evaluated into eval_local_alloc_bb1_in/4
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is partially evaluated into eval_local_alloc_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_local_alloc_bb3_in/9 
* CE 7 is refined into CE [8] 
* CE 6 is refined into CE [9] 


#### Refined cost equations eval_local_alloc_bb3_in/9 
* CE 8: eval_local_alloc_bb3_in(A,B,C,D,E,A,B,C,D) = 0
     [D>=C,A>=B+1,D>=0,E=2] 
* CE 9: eval_local_alloc_bb3_in(V_n_basic_blocks,V_b_0,V_next_qty_0,V_i_0,B,C,D,E,F) = 1+ eval_local_alloc_bb3_in(V_n_basic_blocks,V_b_0,V_next_qty_0,G,H,C,D,E,F)
     [V_next_qty_0>=V_i_0+1,V_n_basic_blocks>=V_b_0+1,V_i_0>=0,V_i_0+1=G,H=2,B=2] 

### Cost equations --> "Loop" of eval_local_alloc_bb3_in/9 
* CEs [9] --> Loop 6 
* CEs [8] --> Loop 7 

#### Loops of eval_local_alloc_bb3_in/9 
* Loop 6: eval_local_alloc_bb3_in(V_n_basic_blocks,V_b_0,V_next_qty_0,V_i_0,B,C,D,E,F)->  eval_local_alloc_bb3_in(V_n_basic_blocks,V_b_0,V_next_qty_0,V_i_0',B',C,D,E,F)
                  [V_next_qty_0>=V_i_0+1,V_n_basic_blocks>=V_b_0+1,V_i_0>=0,V_i_0+1=V_i_0',B'=2,B=2] 
* Loop 7: eval_local_alloc_bb3_in(A,B,C,D,E,A,B,C,D) [D>=C,A>=B+1,D>=0,E=2] 

### Ranking functions of CR eval_local_alloc_bb3_in(V_n_basic_blocks,V_b_0,V_next_qty_0,V_i_0,B,C,D,E,F) 
* RF of phase [6]: [V_next_qty_0-V_i_0]

#### Partial ranking functions of CR eval_local_alloc_bb3_in(V_n_basic_blocks,V_b_0,V_next_qty_0,V_i_0,B,C,D,E,F) 
* Partial RF of phase [6]:
  - RF of loop [6:1]:
    V_next_qty_0-V_i_0


### Resulting Chains:eval_local_alloc_bb3_in(V_n_basic_blocks,V_b_0,V_next_qty_0,V_i_0,B,C,D,E,F) 
* [[6],7]
* [7]


### Merging Chains  eval_local_alloc_bb3_in/9 into  External patterns of execution 
* [[7]] --> 1 
* [[7,[6]]] --> 2 


### Specialization of cost equations eval_local_alloc_bb1_in/4 
* CE 5 is refined into CE [10] 
* CE 3 is refined into CE [11,12] 
* CE 4 is refined into CE [13] 


#### Refined cost equations eval_local_alloc_bb1_in/4 
* CE 10: eval_local_alloc_bb1_in(V_n_basic_blocks,V_b_0,V_next_qty_0,B) = 0
     [V_b_0>=V_n_basic_blocks,B=3] 
* CE 11: eval_local_alloc_bb1_in(V_n_basic_blocks,V_b_0,V_next_qty_0,B) = 2+ eval_local_alloc_bb3_in(V_n_basic_blocks,V_b_0,V_next_qty_0,C,D,V_n_basic_blocks,V_b_0,V_next_qty_0,E):1+ eval_local_alloc_bb1_in(V_n_basic_blocks,F,G,H)
     [V_n_basic_blocks>=V_b_0+1,0>=V_next_qty_0,V_b_0+1=F,H=3,G=0,E=0,D=2,C=0,B=3] 
* CE 12: eval_local_alloc_bb1_in(V_n_basic_blocks,V_b_0,V_next_qty_0,B) = 2+ eval_local_alloc_bb3_in(V_n_basic_blocks,V_b_0,V_next_qty_0,C,D,V_n_basic_blocks,V_b_0,V_next_qty_0,V_next_qty_0):2+ eval_local_alloc_bb1_in(V_n_basic_blocks,E,F,G)
     [V_n_basic_blocks>=V_b_0+1,V_next_qty_0>=1,V_b_0+1=E,G=3,F=0,D=2,C=0,B=3] 
* CE 13: eval_local_alloc_bb1_in(V_n_basic_blocks,V_b_0,V_next_qty_0,B) = 1+ eval_local_alloc_bb1_in(V_n_basic_blocks,C,D,E)
     [V_n_basic_blocks>=V_b_0+1,V_b_0+1=C,E=3,D=0,B=3] 

### Cost equations --> "Loop" of eval_local_alloc_bb1_in/4 
* CEs [12] --> Loop 8 
* CEs [11,13] --> Loop 9 
* CEs [10] --> Loop 10 

#### Loops of eval_local_alloc_bb1_in/4 
* Loop 8: eval_local_alloc_bb1_in(V_n_basic_blocks,V_b_0,V_next_qty_0,B)->  eval_local_alloc_bb1_in(V_n_basic_blocks,V_b_0',V_next_qty_0',B')
                  [V_n_basic_blocks>=V_b_0+1,V_next_qty_0>=1,V_b_0+1=V_b_0',B'=3,V_next_qty_0'=0,B=3] 
* Loop 9: eval_local_alloc_bb1_in(V_n_basic_blocks,V_b_0,V_next_qty_0,B)->  eval_local_alloc_bb1_in(V_n_basic_blocks,V_b_0',V_next_qty_0',B')
                  [V_n_basic_blocks>=V_b_0+1,V_b_0+1=V_b_0',B'=3,V_next_qty_0'=0,B=3] 
* Loop 10: eval_local_alloc_bb1_in(V_n_basic_blocks,V_b_0,V_next_qty_0,B) [V_b_0>=V_n_basic_blocks,B=3] 

### Ranking functions of CR eval_local_alloc_bb1_in(V_n_basic_blocks,V_b_0,V_next_qty_0,B) 
* RF of phase [9]: [V_n_basic_blocks-V_b_0]

#### Partial ranking functions of CR eval_local_alloc_bb1_in(V_n_basic_blocks,V_b_0,V_next_qty_0,B) 
* Partial RF of phase [9]:
  - RF of loop [9:1]:
    V_n_basic_blocks-V_b_0


### Resulting Chains:eval_local_alloc_bb1_in(V_n_basic_blocks,V_b_0,V_next_qty_0,B) 
* [[9],10]
* [10]
* [8,[9],10]
* [8,10]


### Merging Chains  eval_local_alloc_bb1_in/4 into  External patterns of execution 
* [[10,8],[10,[9]]] --> 1 
* [[10]] --> 2 
* [[10,[9],8]] --> 3 


### Specialization of cost equations eval_local_alloc_start/4 
* CE 2 is refined into CE [14,15,16] 


#### Refined cost equations eval_local_alloc_start/4 
* CE 14: eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B) = 1+ eval_local_alloc_bb1_in(V_n_basic_blocks,C,V_max_qty,D):1
     [V_n_basic_blocks>=1,D=3,C=0] 
* CE 15: eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B) = 1+ eval_local_alloc_bb1_in(V_n_basic_blocks,C,V_max_qty,D):2
     [0>=V_n_basic_blocks,D=3,C=0] 
* CE 16: eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B) = 1+ eval_local_alloc_bb1_in(V_n_basic_blocks,C,V_max_qty,D):3
     [V_max_qty>=1,V_n_basic_blocks>=2,D=3,C=0] 

### Cost equations --> "Loop" of eval_local_alloc_start/4 
* CEs [14,16] --> Loop 11 
* CEs [15] --> Loop 12 

#### Loops of eval_local_alloc_start/4 
* Loop 11: eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B) [V_n_basic_blocks>=1] 
* Loop 12: eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B) [0>=V_n_basic_blocks] 

### Ranking functions of CR eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B) 

#### Partial ranking functions of CR eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B) 


### Resulting Chains:eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B) 
* [12]
* [11]


### Merging Chains  eval_local_alloc_start/4 into  External patterns of execution 
* [[12]] --> 1 
* [[11]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [6] 

 * loop 6:eval_local_alloc_bb3_in(V_n_basic_blocks,V_b_0,V_next_qty_0,V_i_0,B,C,D,E,F) -> [eval_local_alloc_bb3_in(V_n_basic_blocks',V_b_0',V_next_qty_0',V_i_0',B',C',D',E',F')] 
1
#### Cost of phase [6]:eval_local_alloc_bb3_in(V_n_basic_blocks,V_b_0,V_next_qty_0,V_i_0,B,C,D,E,F) -> [eval_local_alloc_bb3_in(V_n_basic_blocks',V_b_0',V_next_qty_0',V_i_0',B',C',D',E',F')] 
1* #(6)+0
  Such that:#(6) =< V_next_qty_0-V_i_0
#(6) =< V_next_qty_0-V_i_0-V_next_qty_0'+V_i_0'

#### Cost of chains of eval_local_alloc_bb3_in(V_n_basic_blocks,V_b_0,V_next_qty_0,V_i_0,B,C,D,E,F):
* Chain [[6],7]: 1*s(1)+0
  Such that:s(1) =< -V_i_0+E

  with precondition: [B=2,V_n_basic_blocks=C,V_b_0=D,V_next_qty_0=E,V_next_qty_0=F,V_i_0>=0,V_n_basic_blocks>=V_b_0+1,V_next_qty_0>=V_i_0+1] 

* Chain [7]: 0
  with precondition: [V_i_0=0,B=2,F=0,V_n_basic_blocks=C,V_b_0=D,V_next_qty_0=E,0>=V_next_qty_0,V_n_basic_blocks>=V_b_0+1] 


#### Cost of loops [9] 

 * loop 9:eval_local_alloc_bb1_in(V_n_basic_blocks,V_b_0,V_next_qty_0,B) -> [eval_local_alloc_bb1_in(V_n_basic_blocks',V_b_0',V_next_qty_0',B')] 
2
#### Cost of phase [9]:eval_local_alloc_bb1_in(V_n_basic_blocks,V_b_0,V_next_qty_0,B) -> [eval_local_alloc_bb1_in(V_n_basic_blocks',V_b_0',V_next_qty_0',B')] 
2* #(9)+0
  Such that:#(9) =< V_n_basic_blocks-V_b_0
#(9) =< V_n_basic_blocks-V_b_0-V_n_basic_blocks'+V_b_0'

#### Cost of phase [9]:eval_local_alloc_bb1_in(V_n_basic_blocks,V_b_0,V_next_qty_0,B) -> [eval_local_alloc_bb1_in(V_n_basic_blocks',V_b_0',V_next_qty_0',B')] 
2* #(9)+0
  Such that:#(9) =< V_n_basic_blocks-V_b_0
#(9) =< V_n_basic_blocks-V_b_0-V_n_basic_blocks'+V_b_0'

#### Cost of chains of eval_local_alloc_bb1_in(V_n_basic_blocks,V_b_0,V_next_qty_0,B):
* Chain [[9],10]: 2*s(6)+0
  Such that:s(6) =< V_n_basic_blocks-V_b_0

  with precondition: [B=3,V_b_0>=0,V_n_basic_blocks>=V_b_0+1] 

* Chain [10]: 0
  with precondition: [V_b_0=0,B=3,0>=V_n_basic_blocks] 

* Chain [8,[9],10]: 2*s(7)+1*s(8)+2
  Such that:s(7) =< V_n_basic_blocks-1
s(8) =< V_next_qty_0

  with precondition: [V_b_0=0,B=3,V_n_basic_blocks>=2,V_next_qty_0>=1] 

* Chain [8,10]: 1*s(9)+2
  Such that:s(9) =< V_next_qty_0

  with precondition: [V_n_basic_blocks=1,V_b_0=0,B=3,V_next_qty_0>=1] 


#### Cost of chains of eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B):
* Chain [12]: 1
  with precondition: [0>=V_n_basic_blocks] 

* Chain [11]: 2*s(20)+2*s(19)+2*s(18)+3
  Such that:s(17) =< V_max_qty
s(18) =< V_n_basic_blocks-1
s(19) =< V_n_basic_blocks
s(20) =< s(17)

  with precondition: [V_n_basic_blocks>=1] 


Closed-form bounds of eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B): 
-------------------------------------
* Chain [12] with precondition: [0>=V_n_basic_blocks] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [11] with precondition: [V_n_basic_blocks>=1] 
    - Upper bound: nat(V_max_qty)*2+3+4*V_n_basic_blocks 
    - Complexity: n 

### Maximum cost of eval_local_alloc_start(V_max_qty,V_n_basic_blocks,V_limit,B): nat(V_max_qty)*2+2+nat(V_n_basic_blocks)*4+1 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 14 ms.
* Invariants computed in 27 ms.
   - Backward Invariants 13 ms.
   - Transitive Invariants 4 ms.
* Refinement performed in 32 ms.
* Termination proved in 6 ms.
* Upper bounds computed in 40 ms.
   - Equation cost structures 16 ms.
   - Phase cost structures 8 ms.
   - Chain cost structures 12 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 141 ms.


Warning: Ignored call to eval_load_mems_stop/1 in equation eval_load_mems_bb9_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_load_mems_10/16,eval_load_mems_9/15,eval_load_mems_bb4_in/15,eval_load_mems_bb5_in/15,eval_load_mems_bb6_in/16]
1. recursive  : [eval_load_mems_7/11,eval_load_mems_8/12,eval_load_mems_bb2_in/11,eval_load_mems_bb3_in/11,eval_load_mems_bb7_in/13,loop_cont_eval_load_mems_bb4_in/14]
2. recursive  : [eval_load_mems_15/6,eval_load_mems_16/6,eval_load_mems_17/7,eval_load_mems_18/7,eval_load_mems_bb1_in/4,eval_load_mems_bb8_in/6,loop_cont_eval_load_mems_bb2_in/7]
3. non_recursive  : [eval_load_mems_bb9_in/1]
4. non_recursive  : [loop_cont_eval_load_mems_bb1_in/2]
5. non_recursive  : [eval_load_mems_6/4]
6. non_recursive  : [eval_load_mems_5/4]
7. non_recursive  : [eval_load_mems_4/4]
8. non_recursive  : [eval_load_mems_3/4]
9. non_recursive  : [eval_load_mems_2/4]
10. non_recursive  : [eval_load_mems_1/4]
11. non_recursive  : [eval_load_mems_0/4]
12. non_recursive  : [eval_load_mems_bb0_in/4]
13. non_recursive  : [eval_load_mems_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_load_mems_bb4_in/15
1. SCC is partially evaluated into eval_load_mems_bb2_in/11
2. SCC is partially evaluated into eval_load_mems_bb1_in/4
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_load_mems_6/4
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is partially evaluated into eval_load_mems_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_load_mems_bb4_in/15 
* CE 11 is refined into CE [12] 
* CE 9 is refined into CE [13] 
* CE 10 is refined into CE [14] 


#### Refined cost equations eval_load_mems_bb4_in/15 
* CE 12: eval_load_mems_bb4_in(A,B,C,D,E,F,G,H,A,B,C,D,E,F,G) = 0
     [G>=D,G>=64,1>=E,H=2] 
* CE 13: eval_load_mems_bb4_in(A,B,C,D,E,F,G,H,A,B,C,D,E,F,G) = 0
     [G>=D,63>=G,1>=E,H=2] 
* CE 14: eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,V_2,V__2,B,C,D,E,F,G,H,I) = 1+ eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,V_2,J,K,C,D,E,F,G,H,I)
     [V__2>=V__13,63>=V__2,1>=V__1,V__2+1=J,K=2,B=2] 

### Cost equations --> "Loop" of eval_load_mems_bb4_in/15 
* CEs [14] --> Loop 11 
* CEs [12] --> Loop 12 
* CEs [13] --> Loop 13 

#### Loops of eval_load_mems_bb4_in/15 
* Loop 11: eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,V_2,V__2,B,C,D,E,F,G,H,I)->  eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,V_2,V__2',B',C,D,E,F,G,H,I)
                  [V__2>=V__13,63>=V__2,1>=V__1,V__2+1=V__2',B'=2,B=2] 
* Loop 12: eval_load_mems_bb4_in(A,B,C,D,E,F,G,H,A,B,C,D,E,F,G) [G>=D,G>=64,1>=E,H=2] 
* Loop 13: eval_load_mems_bb4_in(A,B,C,D,E,F,G,H,A,B,C,D,E,F,G) [G>=D,63>=G,1>=E,H=2] 

### Ranking functions of CR eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,V_2,V__2,B,C,D,E,F,G,H,I) 
* RF of phase [11]: [-V__2+64]

#### Partial ranking functions of CR eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,V_2,V__2,B,C,D,E,F,G,H,I) 
* Partial RF of phase [11]:
  - RF of loop [11:1]:
    -V__2+64

Discarded unfeasible chain [[11]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,V_2,V__2,B,C,D,E,F,G,H,I) 
* [[11],13]
* [[11],12]
* [13]
* [12]


### Merging Chains  eval_load_mems_bb4_in/15 into  External patterns of execution 
* [[12,[11]]] --> 1 
* [[13]] --> 2 
* [[12]] --> 3 
* [[13,[11]]] --> 4 


### Specialization of cost equations eval_load_mems_bb2_in/11 
* CE 8 is refined into CE [15] 
* CE 6 is refined into CE [16,17,18,19] 
* CE 7 is refined into CE [20,21,22,23] 
* CE 5 is refined into CE [24] 


#### Refined cost equations eval_load_mems_bb2_in/11 
* CE 15: eval_load_mems_bb2_in(A,B,C,D,E,F,A,B,C,D,E) = 0
     [E>=2,F=3] 
* CE 16: eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G) = 2+ eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,H,V__13,I,V__02,V__01,V__0,V__13,V__1,H,J):1+ eval_load_mems_bb2_in(V__02,V__01,V__0,K,L,M,C,D,E,F,G)
     [0>=H+1,1>=V__1,63>=V__13,V__1+1=L,M=3,K=0,J=64,I=2,B=3] 
* CE 17: eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G) = 2+ eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,H,V__13,I,V__02,V__01,V__0,V__13,V__1,H,V__13):2+ eval_load_mems_bb2_in(V__02,V__01,V__0,J,K,L,C,D,E,F,G)
     [1>=V__1,63>=V__13,0>=H+1,V__1+1=K,L=3,J=0,I=2,B=3] 
* CE 18: eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G) = 2+ eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,H,V__13,I,V__02,V__01,V__0,V__13,V__1,H,V__13):3+ eval_load_mems_bb2_in(V__02,V__01,V__0,J,K,L,C,D,E,F,G)
     [V__13>=64,1>=V__1,0>=H+1,V__1+1=K,L=3,J=0,I=2,B=3] 
* CE 19: eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G) = 2+ eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,H,V__13,I,V__02,V__01,V__0,V__13,V__1,H,J):4+ eval_load_mems_bb2_in(V__02,V__01,V__0,K,L,M,C,D,E,F,G)
     [J>=V__13+1,63>=J,0>=H+1,1>=V__1,V__1+1=L,M=3,K=0,I=2,B=3] 
* CE 20: eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G) = 2+ eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,H,V__13,I,V__02,V__01,V__0,V__13,V__1,H,J):1+ eval_load_mems_bb2_in(V__02,V__01,V__0,K,L,M,C,D,E,F,G)
     [H>=1,1>=V__1,63>=V__13,V__1+1=L,M=3,K=0,J=64,I=2,B=3] 
* CE 21: eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G) = 2+ eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,H,V__13,I,V__02,V__01,V__0,V__13,V__1,H,V__13):2+ eval_load_mems_bb2_in(V__02,V__01,V__0,J,K,L,C,D,E,F,G)
     [H>=1,1>=V__1,63>=V__13,V__1+1=K,L=3,J=0,I=2,B=3] 
* CE 22: eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G) = 2+ eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,H,V__13,I,V__02,V__01,V__0,V__13,V__1,H,V__13):3+ eval_load_mems_bb2_in(V__02,V__01,V__0,J,K,L,C,D,E,F,G)
     [V__13>=64,H>=1,1>=V__1,V__1+1=K,L=3,J=0,I=2,B=3] 
* CE 23: eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G) = 2+ eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,H,V__13,I,V__02,V__01,V__0,V__13,V__1,H,J):4+ eval_load_mems_bb2_in(V__02,V__01,V__0,K,L,M,C,D,E,F,G)
     [J>=V__13+1,H>=1,63>=J,1>=V__1,V__1+1=L,M=3,K=0,I=2,B=3] 
* CE 24: eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G) = 1+ eval_load_mems_bb2_in(V__02,V__01,V__0,H,I,J,C,D,E,F,G)
     [1>=V__1,V__1+1=I,J=3,H=0,B=3] 

### Cost equations --> "Loop" of eval_load_mems_bb2_in/11 
* CEs [18,22] --> Loop 14 
* CEs [24] --> Loop 15 
* CEs [19,23] --> Loop 16 
* CEs [16,17,20,21] --> Loop 17 
* CEs [15] --> Loop 18 

#### Loops of eval_load_mems_bb2_in/11 
* Loop 14: eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G)->  eval_load_mems_bb2_in(V__02,V__01,V__0,V__13',V__1',B',C,D,E,F,G)
                  [V__13>=64,1>=V__1,V__1+1=V__1',B'=3,V__13'=0,B=3] 
* Loop 15: eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G)->  eval_load_mems_bb2_in(V__02,V__01,V__0,V__13',V__1',B',C,D,E,F,G)
                  [1>=V__1,V__1+1=V__1',B'=3,V__13'=0,B=3] 
* Loop 16: eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G)->  eval_load_mems_bb2_in(V__02,V__01,V__0,V__13',V__1',B',C,D,E,F,G)
                  [1>=V__1,62>=V__13,V__1+1=V__1',B'=3,V__13'=0,B=3] 
* Loop 17: eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G)->  eval_load_mems_bb2_in(V__02,V__01,V__0,V__13',V__1',B',C,D,E,F,G)
                  [1>=V__1,63>=V__13,V__1+1=V__1',B'=3,V__13'=0,B=3] 
* Loop 18: eval_load_mems_bb2_in(A,B,C,D,E,F,A,B,C,D,E) [E>=2,F=3] 

### Ranking functions of CR eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G) 
* RF of phase [15,16,17]: [-V__1+2]

#### Partial ranking functions of CR eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G) 
* Partial RF of phase [15,16,17]:
  - RF of loop [15:1,16:1,17:1]:
    -V__1+2

Discarded unfeasible chain [[15,16,17]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [14,[15,16,17]](Non-terminating chain proved terminating)

### Resulting Chains:eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G) 
* [[15,16,17],18]
* [18]
* [14,[15,16,17],18]
* [14,18]


### Merging Chains  eval_load_mems_bb2_in/11 into  External patterns of execution 
* [[18,14]] --> 1 
* [[18,[15,16,17],14]] --> 2 
* [[18,[15,16,17]]] --> 3 
* [[18]] --> 4 


### Specialization of cost equations eval_load_mems_bb1_in/4 
* CE 4 is refined into CE [25] 
* CE 3 is refined into CE [26,27,28,29] 


#### Refined cost equations eval_load_mems_bb1_in/4 
* CE 25: eval_load_mems_bb1_in(V__02,V__01,V__0,B) = 0
     [0>=V__0,B=4] 
* CE 26: eval_load_mems_bb1_in(V__02,V__01,V__0,B) = 2+ eval_load_mems_bb2_in(V__02,C,V__0,V__02,D,E,V__02,F,V__0,G,H):1+ eval_load_mems_bb1_in(I,J,K,L)
     [V__0>=1,V__02>=64,V__0=K+1,L=4,J=0,I=0,H=2,G=0,F=1,E=3,D=1,C=1,B=4,V__01=1] 
* CE 27: eval_load_mems_bb1_in(V__02,V__01,V__0,B) = 2+ eval_load_mems_bb2_in(V__02,V__01,V__0,V__02,V__01,C,V__02,V__01,V__0,D,E):2+ eval_load_mems_bb1_in(F,G,H,I)
     [V__0>=1,V__02>=64,0>=V__01,V__0=H+1,I=4,G=0,F=0,E=2,D=0,C=3,B=4] 
* CE 28: eval_load_mems_bb1_in(V__02,V__01,V__0,B) = 2+ eval_load_mems_bb2_in(V__02,V__01,V__0,V__02,V__01,C,V__02,V__01,V__0,D,E):3+ eval_load_mems_bb1_in(F,G,H,I)
     [V__0>=1,1>=V__01,V__0=H+1,I=4,G=0,F=0,E=2,D=0,C=3,B=4] 
* CE 29: eval_load_mems_bb1_in(V__02,V__01,V__0,B) = 2+ eval_load_mems_bb2_in(V__02,V__01,V__0,V__02,V__01,C,V__02,V__01,V__0,V__02,V__01):4+ eval_load_mems_bb1_in(V__02,D,E,F)
     [V__0>=1,V__01>=2,V__0=E+1,F=4,D=0,C=3,B=4] 

### Cost equations --> "Loop" of eval_load_mems_bb1_in/4 
* CEs [29] --> Loop 19 
* CEs [27] --> Loop 20 
* CEs [28] --> Loop 21 
* CEs [26] --> Loop 22 
* CEs [25] --> Loop 23 

#### Loops of eval_load_mems_bb1_in/4 
* Loop 19: eval_load_mems_bb1_in(V__02,V__01,V__0,B)->  eval_load_mems_bb1_in(V__02,V__01',V__0',B')
                  [V__0>=1,V__01>=2,V__0=V__0'+1,B'=4,V__01'=0,B=4] 
* Loop 20: eval_load_mems_bb1_in(V__02,V__01,V__0,B)->  eval_load_mems_bb1_in(V__02',V__01',V__0',B')
                  [V__0>=1,V__02>=64,0>=V__01,V__0=V__0'+1,B'=4,V__01'=0,V__02'=0,B=4] 
* Loop 21: eval_load_mems_bb1_in(V__02,V__01,V__0,B)->  eval_load_mems_bb1_in(V__02',V__01',V__0',B')
                  [V__0>=1,1>=V__01,V__0=V__0'+1,B'=4,V__01'=0,V__02'=0,B=4] 
* Loop 22: eval_load_mems_bb1_in(V__02,V__01,V__0,B)->  eval_load_mems_bb1_in(V__02',V__01',V__0',B')
                  [V__0>=1,V__02>=64,V__0=V__0'+1,B'=4,V__01'=0,V__02'=0,B=4,V__01=1] 
* Loop 23: eval_load_mems_bb1_in(V__02,V__01,V__0,B) [0>=V__0,B=4] 

### Ranking functions of CR eval_load_mems_bb1_in(V__02,V__01,V__0,B) 
* RF of phase [21]: [V__0]

#### Partial ranking functions of CR eval_load_mems_bb1_in(V__02,V__01,V__0,B) 
* Partial RF of phase [21]:
  - RF of loop [21:1]:
    V__0

Discarded unfeasible chain [[21]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [22,[21]](Non-terminating chain proved terminating)
Discarded unfeasible chain [20,[21]](Non-terminating chain proved terminating)
Discarded unfeasible chain [19,[21]](Non-terminating chain proved terminating)
Discarded unfeasible chain [19,20,[21]](Non-terminating chain proved terminating)

### Resulting Chains:eval_load_mems_bb1_in(V__02,V__01,V__0,B) 
* [[21],23]
* [23]
* [22,[21],23]
* [22,23]
* [20,[21],23]
* [20,23]
* [19,[21],23]
* [19,23]
* [19,20,[21],23]
* [19,20,23]


### Merging Chains  eval_load_mems_bb1_in/4 into  External patterns of execution 
* [[23,22]] --> 1 
* [[23,[21],22]] --> 2 
* [[23,20]] --> 3 
* [[23,19]] --> 4 
* [[23,20,19]] --> 5 
* [[23,[21]]] --> 6 
* [[23,[21],20]] --> 7 
* [[23]] --> 8 
* [[23,[21],20,19]] --> 9 
* [[23,[21],19]] --> 10 


### Specialization of cost equations eval_load_mems_6/4 
* CE 2 is refined into CE [30,31,32,33,34,35,36,37,38,39] 


#### Refined cost equations eval_load_mems_6/4 
* CE 30: eval_load_mems_6(V_ptr,V_word_num_,V_bit_num_,B) = 1+ eval_load_mems_bb1_in(V_bit_num_,C,D,E):1
     [V_bit_num_>=64,E=4,D=1,C=1,V_word_num_=1,V_ptr=1] 
* CE 31: eval_load_mems_6(V_ptr,V_word_num_,V_bit_num_,B) = 1+ eval_load_mems_bb1_in(V_bit_num_,C,V_ptr,D):2
     [V_ptr>=2,V_bit_num_>=64,D=4,C=1,V_word_num_=1] 
* CE 32: eval_load_mems_6(V_ptr,V_word_num_,V_bit_num_,B) = 1+ eval_load_mems_bb1_in(V_bit_num_,V_word_num_,C,D):3
     [V_bit_num_>=64,0>=V_word_num_,D=4,C=1,V_ptr=1] 
* CE 33: eval_load_mems_6(V_ptr,V_word_num_,V_bit_num_,B) = 1+ eval_load_mems_bb1_in(V_bit_num_,V_word_num_,C,D):4
     [V_word_num_>=2,D=4,C=1,V_ptr=1] 
* CE 34: eval_load_mems_6(V_ptr,V_word_num_,V_bit_num_,B) = 1+ eval_load_mems_bb1_in(V_bit_num_,V_word_num_,C,D):5
     [V_word_num_>=2,V_bit_num_>=64,D=4,C=2,V_ptr=2] 
* CE 35: eval_load_mems_6(V_ptr,V_word_num_,V_bit_num_,B) = 1+ eval_load_mems_bb1_in(V_bit_num_,V_word_num_,V_ptr,C):6
     [V_ptr>=1,1>=V_word_num_,C=4] 
* CE 36: eval_load_mems_6(V_ptr,V_word_num_,V_bit_num_,B) = 1+ eval_load_mems_bb1_in(V_bit_num_,V_word_num_,V_ptr,C):7
     [V_ptr>=2,V_bit_num_>=64,0>=V_word_num_,C=4] 
* CE 37: eval_load_mems_6(V_ptr,V_word_num_,V_bit_num_,B) = 1+ eval_load_mems_bb1_in(V_bit_num_,V_word_num_,V_ptr,C):8
     [0>=V_ptr,C=4] 
* CE 38: eval_load_mems_6(V_ptr,V_word_num_,V_bit_num_,B) = 1+ eval_load_mems_bb1_in(V_bit_num_,V_word_num_,V_ptr,C):9
     [V_ptr>=3,V_word_num_>=2,V_bit_num_>=64,C=4] 
* CE 39: eval_load_mems_6(V_ptr,V_word_num_,V_bit_num_,B) = 1+ eval_load_mems_bb1_in(V_bit_num_,V_word_num_,V_ptr,C):10
     [V_ptr>=2,V_word_num_>=2,C=4] 

### Cost equations --> "Loop" of eval_load_mems_6/4 
* CEs [38] --> Loop 24 
* CEs [39] --> Loop 25 
* CEs [36] --> Loop 26 
* CEs [35] --> Loop 27 
* CEs [37] --> Loop 28 
* CEs [31] --> Loop 29 
* CEs [34] --> Loop 30 
* CEs [33] --> Loop 31 
* CEs [32] --> Loop 32 
* CEs [30] --> Loop 33 

#### Loops of eval_load_mems_6/4 
* Loop 24: eval_load_mems_6(V_ptr,V_word_num_,V_bit_num_,B) [V_bit_num_>=64,V_word_num_>=2,V_ptr>=3] 
* Loop 25: eval_load_mems_6(V_ptr,V_word_num_,V_bit_num_,B) [V_word_num_>=2,V_ptr>=2] 
* Loop 26: eval_load_mems_6(V_ptr,V_word_num_,V_bit_num_,B) [V_bit_num_>=64,V_ptr>=2,0>=V_word_num_] 
* Loop 27: eval_load_mems_6(V_ptr,V_word_num_,V_bit_num_,B) [V_ptr>=1,1>=V_word_num_] 
* Loop 28: eval_load_mems_6(V_ptr,V_word_num_,V_bit_num_,B) [0>=V_ptr] 
* Loop 29: eval_load_mems_6(V_ptr,V_word_num_,V_bit_num_,B) [V_bit_num_>=64,V_ptr>=2,V_word_num_=1] 
* Loop 30: eval_load_mems_6(V_ptr,V_word_num_,V_bit_num_,B) [V_bit_num_>=64,V_word_num_>=2,V_ptr=2] 
* Loop 31: eval_load_mems_6(V_ptr,V_word_num_,V_bit_num_,B) [V_word_num_>=2,V_ptr=1] 
* Loop 32: eval_load_mems_6(V_ptr,V_word_num_,V_bit_num_,B) [V_bit_num_>=64,0>=V_word_num_,V_ptr=1] 
* Loop 33: eval_load_mems_6(V_ptr,V_word_num_,V_bit_num_,B) [V_bit_num_>=64,V_word_num_=1,V_ptr=1] 

### Ranking functions of CR eval_load_mems_6(V_ptr,V_word_num_,V_bit_num_,B) 

#### Partial ranking functions of CR eval_load_mems_6(V_ptr,V_word_num_,V_bit_num_,B) 


### Resulting Chains:eval_load_mems_6(V_ptr,V_word_num_,V_bit_num_,B) 
* [33]
* [32]
* [31]
* [30]
* [29]
* [28]
* [27]
* [26]
* [25]
* [24]


### Merging Chains  eval_load_mems_6/4 into  External patterns of execution 
* [[33]] --> 1 
* [[32]] --> 2 
* [[31]] --> 3 
* [[30]] --> 4 
* [[29]] --> 5 
* [[28]] --> 6 
* [[27]] --> 7 
* [[26]] --> 8 
* [[25]] --> 9 
* [[24]] --> 10 


### Specialization of cost equations eval_load_mems_start/4 
* CE 1 is refined into CE [40,41,42,43,44,45,46,47,48,49] 


#### Refined cost equations eval_load_mems_start/4 
* CE 40: eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) = 0+ eval_load_mems_6(C,D,V_bit_num_,B):1
     [V_bit_num_>=64,D=1,C=1,V_word_num_=1,V_ptr=1] 
* CE 41: eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) = 0+ eval_load_mems_6(C,V_word_num_,V_bit_num_,B):2
     [V_bit_num_>=64,0>=V_word_num_,C=1,V_ptr=1] 
* CE 42: eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) = 0+ eval_load_mems_6(C,V_word_num_,V_bit_num_,B):3
     [V_word_num_>=2,C=1,V_ptr=1] 
* CE 43: eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) = 0+ eval_load_mems_6(C,V_word_num_,V_bit_num_,B):4
     [V_bit_num_>=64,V_word_num_>=2,C=2,V_ptr=2] 
* CE 44: eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) = 0+ eval_load_mems_6(V_ptr,C,V_bit_num_,B):5
     [V_bit_num_>=64,V_ptr>=2,C=1,V_word_num_=1] 
* CE 45: eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) = 0+ eval_load_mems_6(V_ptr,V_word_num_,V_bit_num_,B):6
     [0>=V_ptr] 
* CE 46: eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) = 0+ eval_load_mems_6(V_ptr,V_word_num_,V_bit_num_,B):7
     [V_ptr>=1,1>=V_word_num_] 
* CE 47: eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) = 0+ eval_load_mems_6(V_ptr,V_word_num_,V_bit_num_,B):8
     [V_bit_num_>=64,V_ptr>=2,0>=V_word_num_] 
* CE 48: eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) = 0+ eval_load_mems_6(V_ptr,V_word_num_,V_bit_num_,B):9
     [V_word_num_>=2,V_ptr>=2] 
* CE 49: eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) = 0+ eval_load_mems_6(V_ptr,V_word_num_,V_bit_num_,B):10
     [V_bit_num_>=64,V_word_num_>=2,V_ptr>=3] 

### Cost equations --> "Loop" of eval_load_mems_start/4 
* CEs [49] --> Loop 34 
* CEs [48] --> Loop 35 
* CEs [47] --> Loop 36 
* CEs [46] --> Loop 37 
* CEs [45] --> Loop 38 
* CEs [44] --> Loop 39 
* CEs [43] --> Loop 40 
* CEs [42] --> Loop 41 
* CEs [41] --> Loop 42 
* CEs [40] --> Loop 43 

#### Loops of eval_load_mems_start/4 
* Loop 34: eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) [V_bit_num_>=64,V_word_num_>=2,V_ptr>=3] 
* Loop 35: eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) [V_word_num_>=2,V_ptr>=2] 
* Loop 36: eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) [V_bit_num_>=64,V_ptr>=2,0>=V_word_num_] 
* Loop 37: eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) [V_ptr>=1,1>=V_word_num_] 
* Loop 38: eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) [0>=V_ptr] 
* Loop 39: eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) [V_bit_num_>=64,V_ptr>=2,V_word_num_=1] 
* Loop 40: eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) [V_bit_num_>=64,V_word_num_>=2,V_ptr=2] 
* Loop 41: eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) [V_word_num_>=2,V_ptr=1] 
* Loop 42: eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) [V_bit_num_>=64,0>=V_word_num_,V_ptr=1] 
* Loop 43: eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) [V_bit_num_>=64,V_word_num_=1,V_ptr=1] 

### Ranking functions of CR eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) 

#### Partial ranking functions of CR eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) 


### Resulting Chains:eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) 
* [43]
* [42]
* [41]
* [40]
* [39]
* [38]
* [37]
* [36]
* [35]
* [34]


### Merging Chains  eval_load_mems_start/4 into  External patterns of execution 
* [[43]] --> 1 
* [[42]] --> 2 
* [[41]] --> 3 
* [[40]] --> 4 
* [[39]] --> 5 
* [[38]] --> 6 
* [[37]] --> 7 
* [[36]] --> 8 
* [[35]] --> 9 
* [[34]] --> 10 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 13 

#### Computing cost of phase [11] 

#### Simplifying cost structure of CE 14 

#### Cost of loops [11] 

 * loop 11:eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,V_2,V__2,B,C,D,E,F,G,H,I) -> [eval_load_mems_bb4_in(V__02',V__01',V__0',V__13',V__1',V_2',V__2',B',C',D',E',F',G',H',I')] 
1
##### Pending set eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,V_2,V__2,B,C,D,E,F,G,H,I)
* Psum in Loop 11: [it(11)=<1]

###### Computing sum for it(11)=<1  in Loop 11 
   - Applying inductive sum strategy 
     - head Candidate: -V__2+64 
     - head Candidate: -V__2+64 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -V__2+64 
     - tail Candidate: -V__2+64 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(11)=< -V__2+64,it(11)=< -V__2+64,it(11)=< -V__2+V__2',it(11)=< -V__2+V__2'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [11] 

#### Simplifying cost structure of phase [11] 

#### Cost of phase [11]:eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,V_2,V__2,B,C,D,E,F,G,H,I) -> [eval_load_mems_bb4_in(V__02',V__01',V__0',V__13',V__1',V_2',V__2',B',C',D',E',F',G',H',I')] 
1*it(11)+0
  Such that:it(11) =< -V__2+64
it(11) =< -V__2+V__2'

#### Simplifying cost structure of chain [[11],13] 

#### Simplifying cost structure of CE 12 

#### Found solution for phase  [11] in the cache 

#### Cost of phase [11]:eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,V_2,V__2,B,C,D,E,F,G,H,I) -> [eval_load_mems_bb4_in(V__02',V__01',V__0',V__13',V__1',V_2',V__2',B',C',D',E',F',G',H',I')] 
1*it(11)+0
  Such that:it(11) =< -V__2+64
it(11) =< -V__2+V__2'

#### Simplifying cost structure of chain [[11],12] 

#### Cost of chains of eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,V_2,V__2,B,C,D,E,F,G,H,I):
* Chain [[11],13]: 1*it(11)+0
  Such that:it(11) =< -V__2+I

  with precondition: [B=2,V__02=C,V__01=D,V__0=E,V__13=F,V__1=G,V_2=H,1>=V__1,63>=I,V__2>=V__13,I>=V__2+1] 

* Chain [[11],12]: 1*it(11)+0
  Such that:it(11) =< -V__2+64

  with precondition: [B=2,I=64,V__02=C,V__01=D,V__0=E,V__13=F,V__1=G,V_2=H,1>=V__1,63>=V__2,V__2>=V__13] 

* Chain [13]: 0
  with precondition: [B=2,C=V__02,D=V__01,E=V__0,H=V_2,V__13=F,V__1=G,V__2=I,1>=V__1,63>=V__2,V__2>=V__13] 

* Chain [12]: 0
  with precondition: [B=2,C=V__02,D=V__01,E=V__0,H=V_2,V__13=F,V__1=G,V__2=I,1>=V__1,V__2>=64,V__2>=V__13] 


#### Simplifying cost structure of CE 15 

#### Computing cost of phase [15,16,17] 

#### Simplifying cost structure of CE 24 
 * Renamed intermediate variables: 
[(eq(19,1),it(11))>>s(1)]

#### Simplifying cost structure of CE 19 
 * Renamed intermediate variables: 
[(eq(23,1),it(11))>>s(2)]

#### Simplifying cost structure of CE 23 
 * Joined equivalent variables [s(1),s(2)] into s(1)
 * Renamed intermediate variables: 
[(it(16),aux(1))>>s(3),(it(16),s(1))>>s(4)]
 * Renamed intermediate variables: 
[(eq(16,1),it(11))>>s(5)]

#### Simplifying cost structure of CE 16 

#### Simplifying cost structure of CE 17 
 * Renamed intermediate variables: 
[(eq(20,1),it(11))>>s(6)]

#### Simplifying cost structure of CE 20 

#### Simplifying cost structure of CE 21 
 * Joined equivalent variables [s(5),s(6)] into s(5)
 * Renamed intermediate variables: 
[(it(17),aux(2))>>s(7),(it(17),s(5))>>s(8)]

#### Cost of loops [15,16,17] 

 * loop 15:eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G) -> [eval_load_mems_bb2_in(V__02',V__01',V__0',V__13',V__1',B',C',D',E',F',G')] 
1
 * loop 16:eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G) -> [eval_load_mems_bb2_in(V__02',V__01',V__0',V__13',V__1',B',C',D',E',F',G')] 
2*s(4)+2
  Such that:s(3) =< -V__13+63
s(4) =< s(3)

 * loop 17:eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G) -> [eval_load_mems_bb2_in(V__02',V__01',V__0',V__13',V__1',B',C',D',E',F',G')] 
2*s(8)+2
  Such that:s(7) =< -V__13+64
s(8) =< s(7)

##### Pending set eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G)
* Psum in Loop 15: [it(15)=<1]
* Psum in Loop 16: [it(16)=<1,s(10)=< -V__13+63]
* Psum in Loop 17: [it(17)=<1,s(12)=< -V__13+64]

###### Computing sum for it(15)=<1  in Loop 15 
   - Applying inductive sum strategy 
     - head Candidate: -V__1+2 
       - Loop 16 is collaborative and bounds [it(16)] 
       - Loop 17 is collaborative and bounds [it(17)] 
     - head Candidate: -V__1+2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -V__1+2 
       - Loop 16 is collaborative and bounds [it(16)] 
       - Loop 17 is collaborative and bounds [it(17)] 
     - tail Candidate: -V__1+2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(15)+it(16)+it(17)=< -V__1+2,it(15)+it(16)+it(17)=< -V__1+2,it(15)+it(16)+it(17)=< -V__1+V__1',it(15)+it(16)+it(17)=< -V__1+V__1'] 

##### Pending set eval_load_mems_0(V_ptr,V_word_num_,V_bit_num_,B)
* Psum in Loop 16: [it(16)=<1,s(10)=< -V__13+63]
* Psum in Loop 17: [it(17)=<1,s(12)=< -V__13+64]

###### Computing sum for it(16)=<1  in Loop 16 
   - Applying inductive sum strategy 
     - head Candidate: -V__1+2 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -V__1+2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -V__1+2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -V__1+2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(15)+it(16)+it(17)=< -V__1+2,it(15)+it(16)+it(17)=< -V__1+2,it(15)+it(16)+it(17)=< -V__1+V__1',it(15)+it(16)+it(17)=< -V__1+V__1'] 

##### Pending set eval_load_mems_0(V_ptr,V_word_num_,V_bit_num_,B)
* Psum in Loop 16: [s(10)=< -V__13+63]
* Psum in Loop 17: [it(17)=<1,s(12)=< -V__13+64]

###### Computing sum for s(10)=< -V__13+63  in Loop 16 
   - Applying inductive sum strategy 
     - head Candidate: -V__13-63*V__1+126 
       - Loop 15 has a reset to  [-63*V__01+63,-63*V__1+63]
       - Loop 17 is collaborative
     - tail Candidate: -V__13-63*V__1+126 
       - Loop 15 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(5)=< -V__13+63] 
 * Adding constraints: [s(10)=<it(16)*aux(5),s(10)=<aux(3)+aux(4),aux(4)=< -V__13-63*V__1+126] 

##### Pending set eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G)
* Pmax/min: [aux(5)=< -V__13+63]
* Psum in Loop 15: [aux(3)=< -63*V__01+63,aux(3)=< -63*V__1+63]
* Psum in Loop 17: [it(17)=<1,s(12)=< -V__13+64]

###### Computing max_min for aux(5)=< -V__13+63  
   - Applying max/min strategy 
     - Loop 15  resets the expression to [63] 
     - Loop 16  increases the expression by 62/1 
     - Loop 17  increases the expression by 63/1 
 * Adding constraints:[aux(5)=<max([aux(6),aux(7)])+it(16)*62+it(17)*63,aux(6)=< -V__13+63] 

##### Pending set eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G)
* Pmax/min: [aux(7)=<63]
* Psum in Loop 15: [aux(3)=< -63*V__01+63,aux(3)=< -63*V__1+63]
* Psum in Loop 17: [it(17)=<1,s(12)=< -V__13+64]

###### Computing max_min for aux(7)=<63  
 * Adding constraints:[aux(7)=<63] 

##### Pending set eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G)
* Psum in Loop 15: [aux(3)=< -63*V__01+63,aux(3)=< -63*V__1+63]
* Psum in Loop 17: [it(17)=<1,s(12)=< -V__13+64]

###### Computing sum for aux(3)=< -63*V__01+63  in Loop 15 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(8)=< -63*V__01+63] 
 * Adding constraints: [aux(3)=<it(15)*aux(8)] 

##### Pending set eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G)
* Pmax/min: [aux(8)=< -63*V__01+63]
* Psum in Loop 15: [aux(3)=< -63*V__1+63]
* Psum in Loop 17: [it(17)=<1,s(12)=< -V__13+64]

###### Computing max_min for aux(8)=< -63*V__01+63  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(8)=< -63*V__01+63] 

##### Pending set eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G)
* Psum in Loop 15: [aux(3)=< -63*V__1+63]
* Psum in Loop 17: [it(17)=<1,s(12)=< -V__13+64]

###### Computing sum for aux(3)=< -63*V__1+63  in Loop 15 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(9)=< -63*V__1+63] 
 * Adding constraints: [aux(3)=<it(15)*aux(9)] 

##### Pending set eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G)
* Pmax/min: [aux(9)=< -63*V__1+63]
* Psum in Loop 17: [it(17)=<1,s(12)=< -V__13+64]

###### Computing max_min for aux(9)=< -63*V__1+63  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(9)=< -63*V__1+63] 

##### Pending set eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G)
* Psum in Loop 17: [it(17)=<1,s(12)=< -V__13+64]

###### Computing sum for it(17)=<1  in Loop 17 
   - Applying inductive sum strategy 
     - head Candidate: -V__1+2 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -V__1+2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -V__1+2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -V__1+2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(15)+it(16)+it(17)=< -V__1+2,it(15)+it(16)+it(17)=< -V__1+2,it(15)+it(16)+it(17)=< -V__1+V__1',it(15)+it(16)+it(17)=< -V__1+V__1'] 

##### Pending set eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G)
* Psum in Loop 17: [s(12)=< -V__13+64]

###### Computing sum for s(12)=< -V__13+64  in Loop 17 
   - Applying inductive sum strategy 
     - head Candidate: -V__13-64*V__1+128 
       - Loop 15 has a reset to  [-64*V__01+64,-64*V__1+64]
       - Loop 16 is collaborative
     - tail Candidate: -V__13-64*V__1+128 
       - Loop 15 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(12)=< -V__13+64] 
 * Adding constraints: [s(12)=<it(17)*aux(12),s(12)=<aux(10)+aux(11),aux(11)=< -V__13-64*V__1+128] 

##### Pending set eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G)
* Pmax/min: [aux(12)=< -V__13+64]
* Psum in Loop 15: [aux(10)=< -64*V__01+64,aux(10)=< -64*V__1+64]

###### Computing max_min for aux(12)=< -V__13+64  
   - Found a solution using cacheing 
 * Adding constraints:[aux(12)=<aux(5)+1] 

##### Pending set eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G)
* Psum in Loop 15: [aux(10)=< -64*V__01+64,aux(10)=< -64*V__1+64]

###### Computing sum for aux(10)=< -64*V__01+64  in Loop 15 
   - Found a solution using cacheing 
 * Adding constraints: [aux(10)=<aux(13)*(64/63),aux(13)=<it(15)*aux(8)] 

##### Pending set eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G)
* Psum in Loop 15: [aux(10)=< -64*V__1+64]

###### Computing sum for aux(10)=< -64*V__1+64  in Loop 15 
   - Found a solution using cacheing 
 * Adding constraints: [aux(10)=<aux(14)*(64/63),aux(14)=<it(15)*aux(9)] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [15,16,17] 

#### Simplifying cost structure of phase [15,16,17] 
 * Joined equivalent variables [it(15),it(16),it(17)] into it(15)

#### Cost of phase [15,16,17]:eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G) -> [eval_load_mems_bb2_in(V__02',V__01',V__0',V__13',V__1',B',C',D',E',F',G')] 
5*it(15)+2*s(9)+2*s(11)+0
  Such that:aux(7) =< 63
aux(8) =< -63*V__01+63
aux(6) =< -V__13+63
aux(11) =< -V__13-64*V__1+128
aux(4) =< -V__13-63*V__1+126
aux(9) =< -63*V__1+63
aux(15) =< -V__1+2
aux(16) =< -V__1+V__1'
it(15) =< aux(15)
it(15) =< aux(16)
aux(5) =< max([aux(6),aux(7)])+it(15)*62+it(15)*63
aux(14) =< it(15)*aux(9)
aux(13) =< it(15)*aux(8)
aux(3) =< it(15)*aux(9)
aux(3) =< it(15)*aux(8)
aux(12) =< aux(5)+1
aux(10) =< aux(14)*(64/63)
aux(10) =< aux(13)*(64/63)
s(10) =< aux(3)+aux(4)
s(10) =< it(15)*aux(5)
s(12) =< aux(10)+aux(11)
s(12) =< it(15)*aux(12)
s(11) =< s(12)
s(9) =< s(10)

#### Simplifying cost structure of chain [[15,16,17],18] 
 * Joined equivalent variables [aux(17),aux(15),aux(16)] into aux(17)

#### Simplifying cost structure of CE 18 

#### Simplifying cost structure of CE 22 

#### Simplifying cost structure of chain [14,[15,16,17],18] 
 * Joined equivalent variables [aux(18),aux(6),aux(7)] into aux(18)
 * Joined equivalent variables [aux(19),aux(4),aux(8)] into aux(19)

#### Simplifying cost structure of chain [14,18] 

#### Cost of chains of eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G):
* Chain [[15,16,17],18]: 5*it(15)+2*s(9)+2*s(11)+0
  Such that:aux(7) =< 63
aux(8) =< -63*V__01+63
aux(6) =< -V__13+63
aux(11) =< -V__13-64*V__1+128
aux(4) =< -V__13-63*V__1+126
aux(9) =< -63*V__1+63
aux(17) =< -V__1+2
it(15) =< aux(17)
aux(5) =< max([aux(6),aux(7)])+it(15)*62+it(15)*63
aux(14) =< it(15)*aux(9)
aux(13) =< it(15)*aux(8)
aux(3) =< it(15)*aux(9)
aux(3) =< it(15)*aux(8)
aux(12) =< aux(5)+1
aux(10) =< aux(14)*(64/63)
aux(10) =< aux(13)*(64/63)
s(10) =< aux(3)+aux(4)
s(10) =< it(15)*aux(5)
s(12) =< aux(10)+aux(11)
s(12) =< it(15)*aux(12)
s(11) =< s(12)
s(9) =< s(10)

  with precondition: [B=3,F=0,G=2,V__02=C,V__01=D,V__0=E,1>=V__1,V__0>=1,V__1>=V__01] 

* Chain [18]: 0
  with precondition: [B=3,C=V__02,F=V__13,V__01=D,V__0=E,V__1=G,V__0>=1,V__1>=2,V__1>=V__01] 

* Chain [14,[15,16,17],18]: 5*it(15)+2*s(9)+2*s(11)+2
  Such that:aux(11) =< -64*D+64
aux(9) =< -63*D
aux(17) =< -D+1
aux(18) =< 63
aux(19) =< -63*D+63
it(15) =< aux(17)
aux(5) =< max([aux(18),aux(18)])+it(15)*62+it(15)*63
aux(14) =< it(15)*aux(9)
aux(13) =< it(15)*aux(19)
aux(3) =< it(15)*aux(9)
aux(3) =< it(15)*aux(19)
aux(12) =< aux(5)+1
aux(10) =< aux(14)*(64/63)
aux(10) =< aux(13)*(64/63)
s(10) =< aux(3)+aux(19)
s(10) =< it(15)*aux(5)
s(12) =< aux(10)+aux(11)
s(12) =< it(15)*aux(12)
s(11) =< s(12)
s(9) =< s(10)

  with precondition: [B=3,F=0,G=2,V__02=V__13,V__01=V__1,V__02=C,V__01=D,V__0=E,0>=V__01,V__02>=64,V__0>=1] 

* Chain [14,18]: 2
  with precondition: [V__01=1,V__1=1,B=3,D=1,F=0,G=2,V__02=V__13,V__02=C,V__0=E,V__02>=64,V__0>=1] 


#### Simplifying cost structure of CE 25 

#### Computing cost of phase [21] 
 * Renamed intermediate variables: 
[(eq(28,1),aux(7))>>s(13),(eq(28,1),aux(8))>>s(14),(eq(28,1),aux(6))>>s(15),(eq(28,1),aux(11))>>s(16),(eq(28,1),aux(4))>>s(17),(eq(28,1),aux(9))>>s(18),(eq(28,1),aux(17))>>s(19),(eq(28,1),it(15))>>s(20),(eq(28,1),aux(5))>>s(21),(eq(28,1),aux(14))>>s(22),(eq(28,1),aux(13))>>s(23),(eq(28,1),aux(3))>>s(24),(eq(28,1),aux(12))>>s(25),(eq(28,1),aux(10))>>s(26),(eq(28,1),s(10))>>s(27),(eq(28,1),s(12))>>s(28),(eq(28,1),s(11))>>s(29),(eq(28,1),s(9))>>s(30)]

#### Simplifying cost structure of CE 28 
 * Joined equivalent variables [aux(20),s(14),s(18)] into aux(20)
 * Joined equivalent variables [s(22),s(23),s(24)] into s(22)
 * Renamed intermediate variables: 
[(it(21),s(13))>>s(31),(it(21),s(15))>>s(32),(it(21),s(16))>>s(33),(it(21),s(17))>>s(34),(it(21),s(19))>>s(35),(it(21),aux(20))>>s(36),(it(21),s(20))>>s(37),(it(21),s(21))>>s(38),(it(21),s(22))>>s(39),(it(21),s(25))>>s(40),(it(21),s(26))>>s(41),(it(21),s(27))>>s(42),(it(21),s(28))>>s(43),(it(21),s(29))>>s(44),(it(21),s(30))>>s(45)]

#### Cost of loops [21] 

 * loop 21:eval_load_mems_bb1_in(V__02,V__01,V__0,B) -> [eval_load_mems_bb1_in(V__02',V__01',V__0',B')] 
5*s(37)+2*s(44)+2*s(45)+2
  Such that:s(31) =< 63
s(32) =< -V__02+63
s(33) =< -V__02-64*V__01+128
s(34) =< -V__02-63*V__01+126
s(35) =< -V__01+2
s(36) =< -63*V__01+63
s(37) =< s(35)
s(38) =< max([s(32),s(31)])+s(37)*62+s(37)*63
s(39) =< s(37)*s(36)
s(40) =< s(38)+1
s(41) =< s(39)*(64/63)
s(42) =< s(39)+s(34)
s(42) =< s(37)*s(38)
s(43) =< s(41)+s(33)
s(43) =< s(37)*s(40)
s(44) =< s(43)
s(45) =< s(42)

##### Pending set eval_load_mems_bb1_in(V__02,V__01,V__0,B)
* Pmax/min: [s(31)=<63,s(32)=< -V__02+63,s(36)=< -63*V__01+63,s(35)=< -V__01+2]
* Psum in Loop 21: [it(21)=<1,s(51)=< -V__02-64*V__01+128,s(53)=< -V__02-63*V__01+126,s(55)=< -V__01+2]

###### Computing max_min for s(31)=<63  
 * Adding constraints:[s(31)=<63] 

##### Pending set eval_load_mems_bb1_in(V__02,V__01,V__0,B)
* Pmax/min: [s(32)=< -V__02+63,s(36)=< -63*V__01+63,s(35)=< -V__01+2]
* Psum in Loop 21: [it(21)=<1,s(51)=< -V__02-64*V__01+128,s(53)=< -V__02-63*V__01+126,s(55)=< -V__01+2]

###### Computing max_min for s(32)=< -V__02+63  
   - Applying max/min strategy 
     - Loop 21  resets the expression to [63] 
 * Adding constraints:[s(32)=<max([aux(21),aux(22)]),aux(21)=< -V__02+63] 

##### Pending set eval_load_mems_bb1_in(V__02,V__01,V__0,B)
* Pmax/min: [s(36)=< -63*V__01+63,s(35)=< -V__01+2,aux(22)=<63]
* Psum in Loop 21: [it(21)=<1,s(51)=< -V__02-64*V__01+128,s(53)=< -V__02-63*V__01+126,s(55)=< -V__01+2]

###### Computing max_min for s(36)=< -63*V__01+63  
   - Found a solution using transitive invariants 
 * Adding constraints:[s(36)=< -63*V__01+126,s(36)=< -63*V__01+63*V__0] 

##### Pending set eval_load_mems_bb1_in(V__02,V__01,V__0,B)
* Pmax/min: [s(35)=< -V__01+2,aux(22)=<63]
* Psum in Loop 21: [it(21)=<1,s(51)=< -V__02-64*V__01+128,s(53)=< -V__02-63*V__01+126,s(55)=< -V__01+2]

###### Computing max_min for s(35)=< -V__01+2  
   - Found a solution using cacheing 
 * Adding constraints:[s(35)=<s(36)*(1/63)+1] 

##### Pending set eval_load_mems_bb1_in(V__02,V__01,V__0,B)
* Pmax/min: [aux(22)=<63]
* Psum in Loop 21: [it(21)=<1,s(51)=< -V__02-64*V__01+128,s(53)=< -V__02-63*V__01+126,s(55)=< -V__01+2]

###### Computing max_min for aux(22)=<63  
 * Adding constraints:[aux(22)=<63] 

##### Pending set eval_load_mems_bb1_in(V__02,V__01,V__0,B)
* Psum in Loop 21: [it(21)=<1,s(51)=< -V__02-64*V__01+128,s(53)=< -V__02-63*V__01+126,s(55)=< -V__01+2]

###### Computing sum for it(21)=<1  in Loop 21 
   - Applying inductive sum strategy 
     - head Candidate: V__0 
     - head Candidate: V__0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V__0 
     - tail Candidate: V__0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(21)=<V__0,it(21)=<V__0,it(21)=<V__0-V__0',it(21)=<V__0-V__0'] 

##### Pending set eval_load_mems_bb1_in(V__02,V__01,V__0,B)
* Psum in Loop 21: [s(51)=< -V__02-64*V__01+128,s(53)=< -V__02-63*V__01+126,s(55)=< -V__01+2]

###### Computing sum for s(51)=< -V__02-64*V__01+128  in Loop 21 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(23)=< -V__02-64*V__01+128] 
 * Adding constraints: [s(51)=<it(21)*aux(23)] 

##### Pending set eval_load_mems_bb1_in(V__02,V__01,V__0,B)
* Pmax/min: [aux(23)=< -V__02-64*V__01+128]
* Psum in Loop 21: [s(53)=< -V__02-63*V__01+126,s(55)=< -V__01+2]

###### Computing max_min for aux(23)=< -V__02-64*V__01+128  
   - Applying max/min strategy 
     - Loop 21  resets the expression to [128] 
 * Adding constraints:[aux(23)=<max([aux(24),aux(25)]),aux(24)=< -V__02-64*V__01+128] 

##### Pending set eval_load_mems_bb1_in(V__02,V__01,V__0,B)
* Pmax/min: [aux(25)=<128]
* Psum in Loop 21: [s(53)=< -V__02-63*V__01+126,s(55)=< -V__01+2]

###### Computing max_min for aux(25)=<128  
 * Adding constraints:[aux(25)=<128] 

##### Pending set eval_load_mems_bb1_in(V__02,V__01,V__0,B)
* Psum in Loop 21: [s(53)=< -V__02-63*V__01+126,s(55)=< -V__01+2]

###### Computing sum for s(53)=< -V__02-63*V__01+126  in Loop 21 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(26)=< -V__02-63*V__01+126] 
 * Adding constraints: [s(53)=<it(21)*aux(26)] 

##### Pending set eval_load_mems_bb1_in(V__02,V__01,V__0,B)
* Pmax/min: [aux(26)=< -V__02-63*V__01+126]
* Psum in Loop 21: [s(55)=< -V__01+2]

###### Computing max_min for aux(26)=< -V__02-63*V__01+126  
   - Applying max/min strategy 
     - Loop 21  resets the expression to [126] 
 * Adding constraints:[aux(26)=<max([aux(27),aux(28)]),aux(27)=< -V__02-63*V__01+126] 

##### Pending set eval_load_mems_bb1_in(V__02,V__01,V__0,B)
* Pmax/min: [aux(28)=<126]
* Psum in Loop 21: [s(55)=< -V__01+2]

###### Computing max_min for aux(28)=<126  
 * Adding constraints:[aux(28)=<126] 

##### Pending set eval_load_mems_bb1_in(V__02,V__01,V__0,B)
* Psum in Loop 21: [s(55)=< -V__01+2]

###### Computing sum for s(55)=< -V__01+2  in Loop 21 
   - Applying inductive sum strategy 
     - head Candidate: -V__01+2*V__0 
     - tail Candidate: -V__01+2*V__0 
 * Adding constraints: [s(55)=< -V__01+2*V__0,s(55)=< -V__01+2*V__0+V__01'-2*V__0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [21] 

#### Simplifying cost structure of phase [21] 
 * Joined equivalent variables [aux(29),aux(22),s(31)] into aux(29)
 * Joined equivalent variables [s(35),s(37)] into s(35)

#### Cost of phase [21]:eval_load_mems_bb1_in(V__02,V__01,V__0,B) -> [eval_load_mems_bb1_in(V__02',V__01',V__0',B')] 
2*it(21)+5*s(46)+2*s(47)+2*s(48)+0
  Such that:aux(28) =< 126
aux(25) =< 128
aux(21) =< -V__02+63
aux(24) =< -V__02-64*V__01+128
aux(27) =< -V__02-63*V__01+126
s(36) =< -63*V__01+126
s(36) =< -63*V__01+63*V__0
s(55) =< -V__01+2*V__0
s(55) =< -V__01+2*V__0+V__01'-2*V__0'
it(21) =< V__0
it(21) =< V__0-V__0'
aux(29) =< 63
aux(26) =< max([aux(27),aux(28)])
aux(23) =< max([aux(24),aux(25)])
s(35) =< s(36)*(1/63)+1
s(32) =< max([aux(21),aux(29)])
s(53) =< it(21)*aux(26)
s(51) =< it(21)*aux(23)
s(46) =< s(55)
s(38) =< max([s(32),aux(29)])+s(35)*62+s(35)*63
s(54) =< s(46)*s(36)
s(40) =< s(38)+1
s(52) =< s(54)*(64/63)
s(49) =< s(54)+s(53)
s(49) =< s(46)*s(38)
s(50) =< s(52)+s(51)
s(50) =< s(46)*s(40)
s(47) =< s(50)
s(48) =< s(49)

#### Simplifying cost structure of chain [[21],23] 

#### Simplifying cost structure of CE 26 

#### Simplifying cost structure of chain [22,[21],23] 
 * Joined equivalent variables [aux(30),aux(21),aux(29)] into aux(30)
 * Joined equivalent variables [aux(31),aux(27),aux(28)] into aux(31)
 * Joined equivalent variables [aux(32),aux(24),aux(25)] into aux(32)

#### Simplifying cost structure of chain [22,23] 
 * Renamed intermediate variables: 
[(eq(27,1),aux(11))>>s(56),(eq(27,1),aux(9))>>s(57),(eq(27,1),aux(17))>>s(58),(eq(27,1),aux(18))>>s(59),(eq(27,1),aux(19))>>s(60),(eq(27,1),it(15))>>s(61),(eq(27,1),aux(5))>>s(62),(eq(27,1),aux(14))>>s(63),(eq(27,1),aux(13))>>s(64),(eq(27,1),aux(3))>>s(65),(eq(27,1),aux(12))>>s(66),(eq(27,1),aux(10))>>s(67),(eq(27,1),s(10))>>s(68),(eq(27,1),s(12))>>s(69),(eq(27,1),s(11))>>s(70),(eq(27,1),s(9))>>s(71)]

#### Simplifying cost structure of CE 27 

#### Simplifying cost structure of chain [20,[21],23] 
 * Joined equivalent variables [aux(33),aux(21),aux(29),s(59)] into aux(33)
 * Joined equivalent variables [aux(34),aux(27),aux(28)] into aux(34)
 * Joined equivalent variables [aux(35),aux(24),aux(25)] into aux(35)

#### Simplifying cost structure of chain [20,23] 

#### Simplifying cost structure of CE 29 

#### Simplifying cost structure of chain [19,[21],23] 
 * Joined equivalent variables [aux(36),aux(28)] into aux(36)

#### Simplifying cost structure of chain [19,23] 

#### Simplifying cost structure of chain [19,20,[21],23] 
 * Joined equivalent variables [aux(37),aux(33),s(60)] into aux(37)

#### Simplifying cost structure of chain [19,20,23] 
 * Joined equivalent variables [aux(38),s(59),s(60)] into aux(38)

#### Cost of chains of eval_load_mems_bb1_in(V__02,V__01,V__0,B):
* Chain [[21],23]: 2*it(21)+5*s(46)+2*s(47)+2*s(48)+0
  Such that:aux(29) =< 63
aux(28) =< 126
aux(25) =< 128
aux(21) =< -V__02+63
aux(24) =< -V__02-64*V__01+128
aux(27) =< -V__02-63*V__01+126
s(36) =< -63*V__01+126
s(36) =< -63*V__01+63*V__0
s(55) =< -V__01+2*V__0
it(21) =< V__0
aux(26) =< max([aux(27),aux(28)])
aux(23) =< max([aux(24),aux(25)])
s(35) =< s(36)*(1/63)+1
s(32) =< max([aux(21),aux(29)])
s(53) =< it(21)*aux(26)
s(51) =< it(21)*aux(23)
s(46) =< s(55)
s(38) =< max([s(32),aux(29)])+s(35)*62+s(35)*63
s(54) =< s(46)*s(36)
s(40) =< s(38)+1
s(52) =< s(54)*(64/63)
s(49) =< s(54)+s(53)
s(49) =< s(46)*s(38)
s(50) =< s(52)+s(51)
s(50) =< s(46)*s(40)
s(47) =< s(50)
s(48) =< s(49)

  with precondition: [B=4,1>=V__01,V__0>=1] 

* Chain [23]: 0
  with precondition: [B=4,0>=V__0] 

* Chain [22,[21],23]: 2*it(21)+5*s(46)+2*s(47)+2*s(48)+4
  Such that:it(21) =< V__0
s(55) =< 2*V__0
s(36) =< 63*V__0
aux(30) =< 63
aux(31) =< 126
aux(32) =< 128
s(36) =< aux(31)
aux(26) =< max([aux(31),aux(31)])
aux(23) =< max([aux(32),aux(32)])
s(35) =< s(36)*(1/63)+1
s(32) =< max([aux(30),aux(30)])
s(53) =< it(21)*aux(26)
s(51) =< it(21)*aux(23)
s(46) =< s(55)
s(38) =< max([s(32),aux(30)])+s(35)*62+s(35)*63
s(54) =< s(46)*s(36)
s(40) =< s(38)+1
s(52) =< s(54)*(64/63)
s(49) =< s(54)+s(53)
s(49) =< s(46)*s(38)
s(50) =< s(52)+s(51)
s(50) =< s(46)*s(40)
s(47) =< s(50)
s(48) =< s(49)

  with precondition: [V__01=1,B=4,V__02>=64,V__0>=2] 

* Chain [22,23]: 4
  with precondition: [V__01=1,V__0=1,B=4,V__02>=64] 

* Chain [20,[21],23]: 2*it(21)+5*s(46)+2*s(47)+2*s(48)+5*s(61)+2*s(70)+2*s(71)+4
  Such that:s(56) =< -64*V__01+64
s(57) =< -63*V__01
s(60) =< -63*V__01+63
s(58) =< -V__01+1
it(21) =< V__0
s(55) =< 2*V__0
s(36) =< 63*V__0
aux(33) =< 63
aux(34) =< 126
aux(35) =< 128
s(36) =< aux(34)
aux(26) =< max([aux(34),aux(34)])
aux(23) =< max([aux(35),aux(35)])
s(35) =< s(36)*(1/63)+1
s(32) =< max([aux(33),aux(33)])
s(53) =< it(21)*aux(26)
s(51) =< it(21)*aux(23)
s(46) =< s(55)
s(38) =< max([s(32),aux(33)])+s(35)*62+s(35)*63
s(54) =< s(46)*s(36)
s(40) =< s(38)+1
s(52) =< s(54)*(64/63)
s(49) =< s(54)+s(53)
s(49) =< s(46)*s(38)
s(50) =< s(52)+s(51)
s(50) =< s(46)*s(40)
s(47) =< s(50)
s(48) =< s(49)
s(61) =< s(58)
s(62) =< max([aux(33),aux(33)])+s(61)*62+s(61)*63
s(63) =< s(61)*s(57)
s(64) =< s(61)*s(60)
s(65) =< s(61)*s(57)
s(65) =< s(61)*s(60)
s(66) =< s(62)+1
s(67) =< s(63)*(64/63)
s(67) =< s(64)*(64/63)
s(68) =< s(65)+s(60)
s(68) =< s(61)*s(62)
s(69) =< s(67)+s(56)
s(69) =< s(61)*s(66)
s(70) =< s(69)
s(71) =< s(68)

  with precondition: [B=4,0>=V__01,V__02>=64,V__0>=2] 

* Chain [20,23]: 5*s(61)+2*s(70)+2*s(71)+4
  Such that:s(59) =< 63
s(56) =< -64*V__01+64
s(57) =< -63*V__01
s(60) =< -63*V__01+63
s(58) =< -V__01+1
s(61) =< s(58)
s(62) =< max([s(59),s(59)])+s(61)*62+s(61)*63
s(63) =< s(61)*s(57)
s(64) =< s(61)*s(60)
s(65) =< s(61)*s(57)
s(65) =< s(61)*s(60)
s(66) =< s(62)+1
s(67) =< s(63)*(64/63)
s(67) =< s(64)*(64/63)
s(68) =< s(65)+s(60)
s(68) =< s(61)*s(62)
s(69) =< s(67)+s(56)
s(69) =< s(61)*s(66)
s(70) =< s(69)
s(71) =< s(68)

  with precondition: [V__0=1,B=4,0>=V__01,V__02>=64] 

* Chain [19,[21],23]: 2*it(21)+5*s(46)+2*s(47)+2*s(48)+2
  Such that:aux(29) =< 63
aux(25) =< 128
aux(21) =< -V__02+63
aux(27) =< -V__02+126
aux(24) =< -V__02+128
it(21) =< V__0
s(55) =< 2*V__0
s(36) =< 63*V__0
aux(36) =< 126
s(36) =< aux(36)
aux(26) =< max([aux(27),aux(36)])
aux(23) =< max([aux(24),aux(25)])
s(35) =< s(36)*(1/63)+1
s(32) =< max([aux(21),aux(29)])
s(53) =< it(21)*aux(26)
s(51) =< it(21)*aux(23)
s(46) =< s(55)
s(38) =< max([s(32),aux(29)])+s(35)*62+s(35)*63
s(54) =< s(46)*s(36)
s(40) =< s(38)+1
s(52) =< s(54)*(64/63)
s(49) =< s(54)+s(53)
s(49) =< s(46)*s(38)
s(50) =< s(52)+s(51)
s(50) =< s(46)*s(40)
s(47) =< s(50)
s(48) =< s(49)

  with precondition: [B=4,V__01>=2,V__0>=2] 

* Chain [19,23]: 2
  with precondition: [V__0=1,B=4,V__01>=2] 

* Chain [19,20,[21],23]: 2*it(21)+5*s(46)+2*s(47)+2*s(48)+5*s(61)+2*s(70)+2*s(71)+6
  Such that:s(58) =< 1
s(56) =< 64
aux(34) =< 126
aux(35) =< 128
it(21) =< V__0
s(55) =< 2*V__0
s(36) =< 63*V__0
aux(37) =< 63
s(36) =< aux(34)
aux(26) =< max([aux(34),aux(34)])
aux(23) =< max([aux(35),aux(35)])
s(35) =< s(36)*(1/63)+1
s(32) =< max([aux(37),aux(37)])
s(53) =< it(21)*aux(26)
s(51) =< it(21)*aux(23)
s(46) =< s(55)
s(38) =< max([s(32),aux(37)])+s(35)*62+s(35)*63
s(54) =< s(46)*s(36)
s(40) =< s(38)+1
s(52) =< s(54)*(64/63)
s(49) =< s(54)+s(53)
s(49) =< s(46)*s(38)
s(50) =< s(52)+s(51)
s(50) =< s(46)*s(40)
s(47) =< s(50)
s(48) =< s(49)
s(61) =< s(58)
s(62) =< max([aux(37),aux(37)])+s(61)*62+s(61)*63
s(66) =< s(62)+1
s(68) =< aux(37)
s(68) =< s(61)*s(62)
s(69) =< s(56)
s(69) =< s(61)*s(66)
s(70) =< s(69)
s(71) =< s(68)

  with precondition: [B=4,V__02>=64,V__01>=2,V__0>=3] 

* Chain [19,20,23]: 5*s(61)+2*s(70)+2*s(71)+6
  Such that:s(58) =< 1
s(56) =< 64
aux(38) =< 63
s(61) =< s(58)
s(62) =< max([aux(38),aux(38)])+s(61)*62+s(61)*63
s(66) =< s(62)+1
s(68) =< aux(38)
s(68) =< s(61)*s(62)
s(69) =< s(56)
s(69) =< s(61)*s(66)
s(70) =< s(69)
s(71) =< s(68)

  with precondition: [V__0=2,B=4,V__02>=64,V__01>=2] 


#### Simplifying cost structure of CE 30 
 * Renamed intermediate variables: 
[(eq(32,1),s(59))>>s(72),(eq(32,1),s(56))>>s(73),(eq(32,1),s(57))>>s(74),(eq(32,1),s(60))>>s(75),(eq(32,1),s(58))>>s(76),(eq(32,1),s(61))>>s(77),(eq(32,1),s(62))>>s(78),(eq(32,1),s(63))>>s(79),(eq(32,1),s(64))>>s(80),(eq(32,1),s(65))>>s(81),(eq(32,1),s(66))>>s(82),(eq(32,1),s(67))>>s(83),(eq(32,1),s(68))>>s(84),(eq(32,1),s(69))>>s(85),(eq(32,1),s(70))>>s(86),(eq(32,1),s(71))>>s(87)]

#### Simplifying cost structure of CE 32 

#### Simplifying cost structure of CE 33 
 * Renamed intermediate variables: 
[(eq(34,1),s(58))>>s(88),(eq(34,1),s(56))>>s(89),(eq(34,1),aux(38))>>s(90),(eq(34,1),s(61))>>s(91),(eq(34,1),s(62))>>s(92),(eq(34,1),s(66))>>s(93),(eq(34,1),s(68))>>s(94),(eq(34,1),s(69))>>s(95),(eq(34,1),s(70))>>s(96),(eq(34,1),s(71))>>s(97)]

#### Simplifying cost structure of CE 34 
 * Renamed intermediate variables: 
[(eq(31,1),it(21))>>s(98),(eq(31,1),s(55))>>s(99),(eq(31,1),s(36))>>s(100),(eq(31,1),aux(30))>>s(101),(eq(31,1),aux(31))>>s(102),(eq(31,1),aux(32))>>s(103),(eq(31,1),aux(26))>>s(104),(eq(31,1),aux(23))>>s(105),(eq(31,1),s(35))>>s(106),(eq(31,1),s(32))>>s(107),(eq(31,1),s(53))>>s(108),(eq(31,1),s(51))>>s(109),(eq(31,1),s(46))>>s(110),(eq(31,1),s(38))>>s(111),(eq(31,1),s(54))>>s(112),(eq(31,1),s(40))>>s(113),(eq(31,1),s(52))>>s(114),(eq(31,1),s(49))>>s(115),(eq(31,1),s(50))>>s(116),(eq(31,1),s(47))>>s(117),(eq(31,1),s(48))>>s(118)]

#### Simplifying cost structure of CE 31 

#### Simplifying cost structure of CE 37 
 * Renamed intermediate variables: 
[(eq(35,1),aux(29))>>s(119),(eq(35,1),aux(28))>>s(120),(eq(35,1),aux(25))>>s(121),(eq(35,1),aux(21))>>s(122),(eq(35,1),aux(24))>>s(123),(eq(35,1),aux(27))>>s(124),(eq(35,1),s(36))>>s(125),(eq(35,1),s(55))>>s(126),(eq(35,1),it(21))>>s(127),(eq(35,1),aux(26))>>s(128),(eq(35,1),aux(23))>>s(129),(eq(35,1),s(35))>>s(130),(eq(35,1),s(32))>>s(131),(eq(35,1),s(53))>>s(132),(eq(35,1),s(51))>>s(133),(eq(35,1),s(46))>>s(134),(eq(35,1),s(38))>>s(135),(eq(35,1),s(54))>>s(136),(eq(35,1),s(40))>>s(137),(eq(35,1),s(52))>>s(138),(eq(35,1),s(49))>>s(139),(eq(35,1),s(50))>>s(140),(eq(35,1),s(47))>>s(141),(eq(35,1),s(48))>>s(142)]

#### Simplifying cost structure of CE 35 
 * Renamed intermediate variables: 
[(eq(36,1),s(56))>>s(143),(eq(36,1),s(57))>>s(144),(eq(36,1),s(60))>>s(145),(eq(36,1),s(58))>>s(146),(eq(36,1),it(21))>>s(147),(eq(36,1),s(55))>>s(148),(eq(36,1),s(36))>>s(149),(eq(36,1),aux(33))>>s(150),(eq(36,1),aux(34))>>s(151),(eq(36,1),aux(35))>>s(152),(eq(36,1),aux(26))>>s(153),(eq(36,1),aux(23))>>s(154),(eq(36,1),s(35))>>s(155),(eq(36,1),s(32))>>s(156),(eq(36,1),s(53))>>s(157),(eq(36,1),s(51))>>s(158),(eq(36,1),s(46))>>s(159),(eq(36,1),s(38))>>s(160),(eq(36,1),s(54))>>s(161),(eq(36,1),s(40))>>s(162),(eq(36,1),s(52))>>s(163),(eq(36,1),s(49))>>s(164),(eq(36,1),s(50))>>s(165),(eq(36,1),s(47))>>s(166),(eq(36,1),s(48))>>s(167),(eq(36,1),s(61))>>s(168),(eq(36,1),s(62))>>s(169),(eq(36,1),s(63))>>s(170),(eq(36,1),s(64))>>s(171),(eq(36,1),s(65))>>s(172),(eq(36,1),s(66))>>s(173),(eq(36,1),s(67))>>s(174),(eq(36,1),s(68))>>s(175),(eq(36,1),s(69))>>s(176),(eq(36,1),s(70))>>s(177),(eq(36,1),s(71))>>s(178)]

#### Simplifying cost structure of CE 36 
 * Renamed intermediate variables: 
[(eq(39,1),aux(29))>>s(179),(eq(39,1),aux(25))>>s(180),(eq(39,1),aux(21))>>s(181),(eq(39,1),aux(27))>>s(182),(eq(39,1),aux(24))>>s(183),(eq(39,1),it(21))>>s(184),(eq(39,1),s(55))>>s(185),(eq(39,1),s(36))>>s(186),(eq(39,1),aux(36))>>s(187),(eq(39,1),aux(26))>>s(188),(eq(39,1),aux(23))>>s(189),(eq(39,1),s(35))>>s(190),(eq(39,1),s(32))>>s(191),(eq(39,1),s(53))>>s(192),(eq(39,1),s(51))>>s(193),(eq(39,1),s(46))>>s(194),(eq(39,1),s(38))>>s(195),(eq(39,1),s(54))>>s(196),(eq(39,1),s(40))>>s(197),(eq(39,1),s(52))>>s(198),(eq(39,1),s(49))>>s(199),(eq(39,1),s(50))>>s(200),(eq(39,1),s(47))>>s(201),(eq(39,1),s(48))>>s(202)]

#### Simplifying cost structure of CE 39 
 * Renamed intermediate variables: 
[(eq(38,1),s(58))>>s(203),(eq(38,1),s(56))>>s(204),(eq(38,1),aux(34))>>s(205),(eq(38,1),aux(35))>>s(206),(eq(38,1),it(21))>>s(207),(eq(38,1),s(55))>>s(208),(eq(38,1),s(36))>>s(209),(eq(38,1),aux(37))>>s(210),(eq(38,1),aux(26))>>s(211),(eq(38,1),aux(23))>>s(212),(eq(38,1),s(35))>>s(213),(eq(38,1),s(32))>>s(214),(eq(38,1),s(53))>>s(215),(eq(38,1),s(51))>>s(216),(eq(38,1),s(46))>>s(217),(eq(38,1),s(38))>>s(218),(eq(38,1),s(54))>>s(219),(eq(38,1),s(40))>>s(220),(eq(38,1),s(52))>>s(221),(eq(38,1),s(49))>>s(222),(eq(38,1),s(50))>>s(223),(eq(38,1),s(47))>>s(224),(eq(38,1),s(48))>>s(225),(eq(38,1),s(61))>>s(226),(eq(38,1),s(62))>>s(227),(eq(38,1),s(66))>>s(228),(eq(38,1),s(68))>>s(229),(eq(38,1),s(69))>>s(230),(eq(38,1),s(70))>>s(231),(eq(38,1),s(71))>>s(232)]

#### Simplifying cost structure of CE 38 

#### Cost of chains of eval_load_mems_6(V_ptr,V_word_num_,V_bit_num_,B):
* Chain [33]: 5
  with precondition: [V_ptr=1,V_word_num_=1,V_bit_num_>=64] 

* Chain [32]: 5*s(77)+2*s(86)+2*s(87)+5
  Such that:s(72) =< 63
s(73) =< -64*V_word_num_+64
s(74) =< -63*V_word_num_
s(75) =< -63*V_word_num_+63
s(76) =< -V_word_num_+1
s(77) =< s(76)
s(78) =< max([s(72),s(72)])+s(77)*62+s(77)*63
s(79) =< s(77)*s(74)
s(80) =< s(77)*s(75)
s(81) =< s(77)*s(74)
s(81) =< s(77)*s(75)
s(82) =< s(78)+1
s(83) =< s(79)*(64/63)
s(83) =< s(80)*(64/63)
s(84) =< s(81)+s(75)
s(84) =< s(77)*s(78)
s(85) =< s(83)+s(73)
s(85) =< s(77)*s(82)
s(86) =< s(85)
s(87) =< s(84)

  with precondition: [V_ptr=1,0>=V_word_num_,V_bit_num_>=64] 

* Chain [31]: 3
  with precondition: [V_ptr=1,V_word_num_>=2] 

* Chain [30]: 5*s(91)+2*s(96)+2*s(97)+7
  Such that:s(88) =< 1
s(90) =< 63
s(89) =< 64
s(91) =< s(88)
s(92) =< max([s(90),s(90)])+s(91)*62+s(91)*63
s(93) =< s(92)+1
s(94) =< s(90)
s(94) =< s(91)*s(92)
s(95) =< s(89)
s(95) =< s(91)*s(93)
s(96) =< s(95)
s(97) =< s(94)

  with precondition: [V_ptr=2,V_word_num_>=2,V_bit_num_>=64] 

* Chain [29]: 2*s(98)+5*s(110)+2*s(117)+2*s(118)+5
  Such that:s(101) =< 63
s(102) =< 126
s(103) =< 128
s(98) =< V_ptr
s(99) =< 2*V_ptr
s(100) =< 63*V_ptr
s(100) =< s(102)
s(104) =< max([s(102),s(102)])
s(105) =< max([s(103),s(103)])
s(106) =< s(100)*(1/63)+1
s(107) =< max([s(101),s(101)])
s(108) =< s(98)*s(104)
s(109) =< s(98)*s(105)
s(110) =< s(99)
s(111) =< max([s(107),s(101)])+s(106)*62+s(106)*63
s(112) =< s(110)*s(100)
s(113) =< s(111)+1
s(114) =< s(112)*(64/63)
s(115) =< s(112)+s(108)
s(115) =< s(110)*s(111)
s(116) =< s(114)+s(109)
s(116) =< s(110)*s(113)
s(117) =< s(116)
s(118) =< s(115)

  with precondition: [V_word_num_=1,V_ptr>=2,V_bit_num_>=64] 

* Chain [28]: 1
  with precondition: [0>=V_ptr] 

* Chain [27]: 2*s(127)+5*s(134)+2*s(141)+2*s(142)+1
  Such that:s(119) =< 63
s(120) =< 126
s(121) =< 128
s(127) =< V_ptr
s(126) =< 2*V_ptr-V_word_num_
s(125) =< 63*V_ptr-63*V_word_num_
s(123) =< -64*V_word_num_-V_bit_num_+128
s(125) =< -63*V_word_num_+126
s(124) =< -63*V_word_num_-V_bit_num_+126
s(122) =< -V_bit_num_+63
s(128) =< max([s(124),s(120)])
s(129) =< max([s(123),s(121)])
s(130) =< s(125)*(1/63)+1
s(131) =< max([s(122),s(119)])
s(132) =< s(127)*s(128)
s(133) =< s(127)*s(129)
s(134) =< s(126)
s(135) =< max([s(131),s(119)])+s(130)*62+s(130)*63
s(136) =< s(134)*s(125)
s(137) =< s(135)+1
s(138) =< s(136)*(64/63)
s(139) =< s(136)+s(132)
s(139) =< s(134)*s(135)
s(140) =< s(138)+s(133)
s(140) =< s(134)*s(137)
s(141) =< s(140)
s(142) =< s(139)

  with precondition: [1>=V_word_num_,V_ptr>=1] 

* Chain [26]: 2*s(147)+5*s(159)+2*s(166)+2*s(167)+5*s(168)+2*s(177)+2*s(178)+5
  Such that:s(150) =< 63
s(151) =< 126
s(152) =< 128
s(147) =< V_ptr
s(148) =< 2*V_ptr
s(149) =< 63*V_ptr
s(143) =< -64*V_word_num_+64
s(144) =< -63*V_word_num_
s(145) =< -63*V_word_num_+63
s(146) =< -V_word_num_+1
s(149) =< s(151)
s(153) =< max([s(151),s(151)])
s(154) =< max([s(152),s(152)])
s(155) =< s(149)*(1/63)+1
s(156) =< max([s(150),s(150)])
s(157) =< s(147)*s(153)
s(158) =< s(147)*s(154)
s(159) =< s(148)
s(160) =< max([s(156),s(150)])+s(155)*62+s(155)*63
s(161) =< s(159)*s(149)
s(162) =< s(160)+1
s(163) =< s(161)*(64/63)
s(164) =< s(161)+s(157)
s(164) =< s(159)*s(160)
s(165) =< s(163)+s(158)
s(165) =< s(159)*s(162)
s(166) =< s(165)
s(167) =< s(164)
s(168) =< s(146)
s(169) =< max([s(150),s(150)])+s(168)*62+s(168)*63
s(170) =< s(168)*s(144)
s(171) =< s(168)*s(145)
s(172) =< s(168)*s(144)
s(172) =< s(168)*s(145)
s(173) =< s(169)+1
s(174) =< s(170)*(64/63)
s(174) =< s(171)*(64/63)
s(175) =< s(172)+s(145)
s(175) =< s(168)*s(169)
s(176) =< s(174)+s(143)
s(176) =< s(168)*s(173)
s(177) =< s(176)
s(178) =< s(175)

  with precondition: [0>=V_word_num_,V_ptr>=2,V_bit_num_>=64] 

* Chain [25]: 2*s(184)+5*s(194)+2*s(201)+2*s(202)+3
  Such that:s(179) =< 63
s(187) =< 126
s(180) =< 128
s(184) =< V_ptr
s(185) =< 2*V_ptr
s(186) =< 63*V_ptr
s(181) =< -V_bit_num_+63
s(182) =< -V_bit_num_+126
s(183) =< -V_bit_num_+128
s(186) =< s(187)
s(188) =< max([s(182),s(187)])
s(189) =< max([s(183),s(180)])
s(190) =< s(186)*(1/63)+1
s(191) =< max([s(181),s(179)])
s(192) =< s(184)*s(188)
s(193) =< s(184)*s(189)
s(194) =< s(185)
s(195) =< max([s(191),s(179)])+s(190)*62+s(190)*63
s(196) =< s(194)*s(186)
s(197) =< s(195)+1
s(198) =< s(196)*(64/63)
s(199) =< s(196)+s(192)
s(199) =< s(194)*s(195)
s(200) =< s(198)+s(193)
s(200) =< s(194)*s(197)
s(201) =< s(200)
s(202) =< s(199)

  with precondition: [V_ptr>=2,V_word_num_>=2] 

* Chain [24]: 2*s(207)+5*s(217)+2*s(224)+2*s(225)+5*s(226)+2*s(231)+2*s(232)+7
  Such that:s(203) =< 1
s(210) =< 63
s(204) =< 64
s(205) =< 126
s(206) =< 128
s(207) =< V_ptr
s(208) =< 2*V_ptr
s(209) =< 63*V_ptr
s(209) =< s(205)
s(211) =< max([s(205),s(205)])
s(212) =< max([s(206),s(206)])
s(213) =< s(209)*(1/63)+1
s(214) =< max([s(210),s(210)])
s(215) =< s(207)*s(211)
s(216) =< s(207)*s(212)
s(217) =< s(208)
s(218) =< max([s(214),s(210)])+s(213)*62+s(213)*63
s(219) =< s(217)*s(209)
s(220) =< s(218)+1
s(221) =< s(219)*(64/63)
s(222) =< s(219)+s(215)
s(222) =< s(217)*s(218)
s(223) =< s(221)+s(216)
s(223) =< s(217)*s(220)
s(224) =< s(223)
s(225) =< s(222)
s(226) =< s(203)
s(227) =< max([s(210),s(210)])+s(226)*62+s(226)*63
s(228) =< s(227)+1
s(229) =< s(210)
s(229) =< s(226)*s(227)
s(230) =< s(204)
s(230) =< s(226)*s(228)
s(231) =< s(230)
s(232) =< s(229)

  with precondition: [V_ptr>=3,V_word_num_>=2,V_bit_num_>=64] 


#### Simplifying cost structure of CE 40 
 * Renamed intermediate variables: 
[(eq(41,1),s(72))>>s(233),(eq(41,1),s(73))>>s(234),(eq(41,1),s(74))>>s(235),(eq(41,1),s(75))>>s(236),(eq(41,1),s(76))>>s(237),(eq(41,1),s(77))>>s(238),(eq(41,1),s(78))>>s(239),(eq(41,1),s(79))>>s(240),(eq(41,1),s(80))>>s(241),(eq(41,1),s(81))>>s(242),(eq(41,1),s(82))>>s(243),(eq(41,1),s(83))>>s(244),(eq(41,1),s(84))>>s(245),(eq(41,1),s(85))>>s(246),(eq(41,1),s(86))>>s(247),(eq(41,1),s(87))>>s(248)]

#### Simplifying cost structure of CE 41 

#### Simplifying cost structure of CE 42 
 * Renamed intermediate variables: 
[(eq(43,1),s(88))>>s(249),(eq(43,1),s(90))>>s(250),(eq(43,1),s(89))>>s(251),(eq(43,1),s(91))>>s(252),(eq(43,1),s(92))>>s(253),(eq(43,1),s(93))>>s(254),(eq(43,1),s(94))>>s(255),(eq(43,1),s(95))>>s(256),(eq(43,1),s(96))>>s(257),(eq(43,1),s(97))>>s(258)]

#### Simplifying cost structure of CE 43 
 * Renamed intermediate variables: 
[(eq(44,1),s(101))>>s(259),(eq(44,1),s(102))>>s(260),(eq(44,1),s(103))>>s(261),(eq(44,1),s(98))>>s(262),(eq(44,1),s(99))>>s(263),(eq(44,1),s(100))>>s(264),(eq(44,1),s(104))>>s(265),(eq(44,1),s(105))>>s(266),(eq(44,1),s(106))>>s(267),(eq(44,1),s(107))>>s(268),(eq(44,1),s(108))>>s(269),(eq(44,1),s(109))>>s(270),(eq(44,1),s(110))>>s(271),(eq(44,1),s(111))>>s(272),(eq(44,1),s(112))>>s(273),(eq(44,1),s(113))>>s(274),(eq(44,1),s(114))>>s(275),(eq(44,1),s(115))>>s(276),(eq(44,1),s(116))>>s(277),(eq(44,1),s(117))>>s(278),(eq(44,1),s(118))>>s(279)]

#### Simplifying cost structure of CE 44 

#### Simplifying cost structure of CE 45 
 * Renamed intermediate variables: 
[(eq(46,1),s(119))>>s(280),(eq(46,1),s(120))>>s(281),(eq(46,1),s(121))>>s(282),(eq(46,1),s(127))>>s(283),(eq(46,1),s(126))>>s(284),(eq(46,1),s(125))>>s(285),(eq(46,1),s(123))>>s(286),(eq(46,1),s(124))>>s(287),(eq(46,1),s(122))>>s(288),(eq(46,1),s(128))>>s(289),(eq(46,1),s(129))>>s(290),(eq(46,1),s(130))>>s(291),(eq(46,1),s(131))>>s(292),(eq(46,1),s(132))>>s(293),(eq(46,1),s(133))>>s(294),(eq(46,1),s(134))>>s(295),(eq(46,1),s(135))>>s(296),(eq(46,1),s(136))>>s(297),(eq(46,1),s(137))>>s(298),(eq(46,1),s(138))>>s(299),(eq(46,1),s(139))>>s(300),(eq(46,1),s(140))>>s(301),(eq(46,1),s(141))>>s(302),(eq(46,1),s(142))>>s(303)]

#### Simplifying cost structure of CE 46 
 * Renamed intermediate variables: 
[(eq(47,1),s(150))>>s(304),(eq(47,1),s(151))>>s(305),(eq(47,1),s(152))>>s(306),(eq(47,1),s(147))>>s(307),(eq(47,1),s(148))>>s(308),(eq(47,1),s(149))>>s(309),(eq(47,1),s(143))>>s(310),(eq(47,1),s(144))>>s(311),(eq(47,1),s(145))>>s(312),(eq(47,1),s(146))>>s(313),(eq(47,1),s(153))>>s(314),(eq(47,1),s(154))>>s(315),(eq(47,1),s(155))>>s(316),(eq(47,1),s(156))>>s(317),(eq(47,1),s(157))>>s(318),(eq(47,1),s(158))>>s(319),(eq(47,1),s(159))>>s(320),(eq(47,1),s(160))>>s(321),(eq(47,1),s(161))>>s(322),(eq(47,1),s(162))>>s(323),(eq(47,1),s(163))>>s(324),(eq(47,1),s(164))>>s(325),(eq(47,1),s(165))>>s(326),(eq(47,1),s(166))>>s(327),(eq(47,1),s(167))>>s(328),(eq(47,1),s(168))>>s(329),(eq(47,1),s(169))>>s(330),(eq(47,1),s(170))>>s(331),(eq(47,1),s(171))>>s(332),(eq(47,1),s(172))>>s(333),(eq(47,1),s(173))>>s(334),(eq(47,1),s(174))>>s(335),(eq(47,1),s(175))>>s(336),(eq(47,1),s(176))>>s(337),(eq(47,1),s(177))>>s(338),(eq(47,1),s(178))>>s(339)]

#### Simplifying cost structure of CE 47 
 * Renamed intermediate variables: 
[(eq(48,1),s(179))>>s(340),(eq(48,1),s(187))>>s(341),(eq(48,1),s(180))>>s(342),(eq(48,1),s(184))>>s(343),(eq(48,1),s(185))>>s(344),(eq(48,1),s(186))>>s(345),(eq(48,1),s(181))>>s(346),(eq(48,1),s(182))>>s(347),(eq(48,1),s(183))>>s(348),(eq(48,1),s(188))>>s(349),(eq(48,1),s(189))>>s(350),(eq(48,1),s(190))>>s(351),(eq(48,1),s(191))>>s(352),(eq(48,1),s(192))>>s(353),(eq(48,1),s(193))>>s(354),(eq(48,1),s(194))>>s(355),(eq(48,1),s(195))>>s(356),(eq(48,1),s(196))>>s(357),(eq(48,1),s(197))>>s(358),(eq(48,1),s(198))>>s(359),(eq(48,1),s(199))>>s(360),(eq(48,1),s(200))>>s(361),(eq(48,1),s(201))>>s(362),(eq(48,1),s(202))>>s(363)]

#### Simplifying cost structure of CE 48 
 * Renamed intermediate variables: 
[(eq(49,1),s(203))>>s(364),(eq(49,1),s(210))>>s(365),(eq(49,1),s(204))>>s(366),(eq(49,1),s(205))>>s(367),(eq(49,1),s(206))>>s(368),(eq(49,1),s(207))>>s(369),(eq(49,1),s(208))>>s(370),(eq(49,1),s(209))>>s(371),(eq(49,1),s(211))>>s(372),(eq(49,1),s(212))>>s(373),(eq(49,1),s(213))>>s(374),(eq(49,1),s(214))>>s(375),(eq(49,1),s(215))>>s(376),(eq(49,1),s(216))>>s(377),(eq(49,1),s(217))>>s(378),(eq(49,1),s(218))>>s(379),(eq(49,1),s(219))>>s(380),(eq(49,1),s(220))>>s(381),(eq(49,1),s(221))>>s(382),(eq(49,1),s(222))>>s(383),(eq(49,1),s(223))>>s(384),(eq(49,1),s(224))>>s(385),(eq(49,1),s(225))>>s(386),(eq(49,1),s(226))>>s(387),(eq(49,1),s(227))>>s(388),(eq(49,1),s(228))>>s(389),(eq(49,1),s(229))>>s(390),(eq(49,1),s(230))>>s(391),(eq(49,1),s(231))>>s(392),(eq(49,1),s(232))>>s(393)]

#### Simplifying cost structure of CE 49 

#### Cost of chains of eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B):
* Chain [43]: 5
  with precondition: [V_ptr=1,V_word_num_=1,V_bit_num_>=64] 

* Chain [42]: 5*s(238)+2*s(247)+2*s(248)+5
  Such that:s(233) =< 63
s(234) =< -64*V_word_num_+64
s(235) =< -63*V_word_num_
s(236) =< -63*V_word_num_+63
s(237) =< -V_word_num_+1
s(238) =< s(237)
s(239) =< max([s(233),s(233)])+s(238)*62+s(238)*63
s(240) =< s(238)*s(235)
s(241) =< s(238)*s(236)
s(242) =< s(238)*s(235)
s(242) =< s(238)*s(236)
s(243) =< s(239)+1
s(244) =< s(240)*(64/63)
s(244) =< s(241)*(64/63)
s(245) =< s(242)+s(236)
s(245) =< s(238)*s(239)
s(246) =< s(244)+s(234)
s(246) =< s(238)*s(243)
s(247) =< s(246)
s(248) =< s(245)

  with precondition: [V_ptr=1,0>=V_word_num_,V_bit_num_>=64] 

* Chain [41]: 3
  with precondition: [V_ptr=1,V_word_num_>=2] 

* Chain [40]: 5*s(252)+2*s(257)+2*s(258)+7
  Such that:s(249) =< 1
s(250) =< 63
s(251) =< 64
s(252) =< s(249)
s(253) =< max([s(250),s(250)])+s(252)*62+s(252)*63
s(254) =< s(253)+1
s(255) =< s(250)
s(255) =< s(252)*s(253)
s(256) =< s(251)
s(256) =< s(252)*s(254)
s(257) =< s(256)
s(258) =< s(255)

  with precondition: [V_ptr=2,V_word_num_>=2,V_bit_num_>=64] 

* Chain [39]: 2*s(262)+5*s(271)+2*s(278)+2*s(279)+5
  Such that:s(259) =< 63
s(260) =< 126
s(261) =< 128
s(262) =< V_ptr
s(263) =< 2*V_ptr
s(264) =< 63*V_ptr
s(264) =< s(260)
s(265) =< max([s(260),s(260)])
s(266) =< max([s(261),s(261)])
s(267) =< s(264)*(1/63)+1
s(268) =< max([s(259),s(259)])
s(269) =< s(262)*s(265)
s(270) =< s(262)*s(266)
s(271) =< s(263)
s(272) =< max([s(268),s(259)])+s(267)*62+s(267)*63
s(273) =< s(271)*s(264)
s(274) =< s(272)+1
s(275) =< s(273)*(64/63)
s(276) =< s(273)+s(269)
s(276) =< s(271)*s(272)
s(277) =< s(275)+s(270)
s(277) =< s(271)*s(274)
s(278) =< s(277)
s(279) =< s(276)

  with precondition: [V_word_num_=1,V_ptr>=2,V_bit_num_>=64] 

* Chain [38]: 1
  with precondition: [0>=V_ptr] 

* Chain [37]: 2*s(283)+5*s(295)+2*s(302)+2*s(303)+1
  Such that:s(280) =< 63
s(281) =< 126
s(282) =< 128
s(283) =< V_ptr
s(284) =< 2*V_ptr-V_word_num_
s(285) =< 63*V_ptr-63*V_word_num_
s(286) =< -64*V_word_num_-V_bit_num_+128
s(285) =< -63*V_word_num_+126
s(287) =< -63*V_word_num_-V_bit_num_+126
s(288) =< -V_bit_num_+63
s(289) =< max([s(287),s(281)])
s(290) =< max([s(286),s(282)])
s(291) =< s(285)*(1/63)+1
s(292) =< max([s(288),s(280)])
s(293) =< s(283)*s(289)
s(294) =< s(283)*s(290)
s(295) =< s(284)
s(296) =< max([s(292),s(280)])+s(291)*62+s(291)*63
s(297) =< s(295)*s(285)
s(298) =< s(296)+1
s(299) =< s(297)*(64/63)
s(300) =< s(297)+s(293)
s(300) =< s(295)*s(296)
s(301) =< s(299)+s(294)
s(301) =< s(295)*s(298)
s(302) =< s(301)
s(303) =< s(300)

  with precondition: [1>=V_word_num_,V_ptr>=1] 

* Chain [36]: 2*s(307)+5*s(320)+2*s(327)+2*s(328)+5*s(329)+2*s(338)+2*s(339)+5
  Such that:s(304) =< 63
s(305) =< 126
s(306) =< 128
s(307) =< V_ptr
s(308) =< 2*V_ptr
s(309) =< 63*V_ptr
s(310) =< -64*V_word_num_+64
s(311) =< -63*V_word_num_
s(312) =< -63*V_word_num_+63
s(313) =< -V_word_num_+1
s(309) =< s(305)
s(314) =< max([s(305),s(305)])
s(315) =< max([s(306),s(306)])
s(316) =< s(309)*(1/63)+1
s(317) =< max([s(304),s(304)])
s(318) =< s(307)*s(314)
s(319) =< s(307)*s(315)
s(320) =< s(308)
s(321) =< max([s(317),s(304)])+s(316)*62+s(316)*63
s(322) =< s(320)*s(309)
s(323) =< s(321)+1
s(324) =< s(322)*(64/63)
s(325) =< s(322)+s(318)
s(325) =< s(320)*s(321)
s(326) =< s(324)+s(319)
s(326) =< s(320)*s(323)
s(327) =< s(326)
s(328) =< s(325)
s(329) =< s(313)
s(330) =< max([s(304),s(304)])+s(329)*62+s(329)*63
s(331) =< s(329)*s(311)
s(332) =< s(329)*s(312)
s(333) =< s(329)*s(311)
s(333) =< s(329)*s(312)
s(334) =< s(330)+1
s(335) =< s(331)*(64/63)
s(335) =< s(332)*(64/63)
s(336) =< s(333)+s(312)
s(336) =< s(329)*s(330)
s(337) =< s(335)+s(310)
s(337) =< s(329)*s(334)
s(338) =< s(337)
s(339) =< s(336)

  with precondition: [0>=V_word_num_,V_ptr>=2,V_bit_num_>=64] 

* Chain [35]: 2*s(343)+5*s(355)+2*s(362)+2*s(363)+3
  Such that:s(340) =< 63
s(341) =< 126
s(342) =< 128
s(343) =< V_ptr
s(344) =< 2*V_ptr
s(345) =< 63*V_ptr
s(346) =< -V_bit_num_+63
s(347) =< -V_bit_num_+126
s(348) =< -V_bit_num_+128
s(345) =< s(341)
s(349) =< max([s(347),s(341)])
s(350) =< max([s(348),s(342)])
s(351) =< s(345)*(1/63)+1
s(352) =< max([s(346),s(340)])
s(353) =< s(343)*s(349)
s(354) =< s(343)*s(350)
s(355) =< s(344)
s(356) =< max([s(352),s(340)])+s(351)*62+s(351)*63
s(357) =< s(355)*s(345)
s(358) =< s(356)+1
s(359) =< s(357)*(64/63)
s(360) =< s(357)+s(353)
s(360) =< s(355)*s(356)
s(361) =< s(359)+s(354)
s(361) =< s(355)*s(358)
s(362) =< s(361)
s(363) =< s(360)

  with precondition: [V_ptr>=2,V_word_num_>=2] 

* Chain [34]: 2*s(369)+5*s(378)+2*s(385)+2*s(386)+5*s(387)+2*s(392)+2*s(393)+7
  Such that:s(364) =< 1
s(365) =< 63
s(366) =< 64
s(367) =< 126
s(368) =< 128
s(369) =< V_ptr
s(370) =< 2*V_ptr
s(371) =< 63*V_ptr
s(371) =< s(367)
s(372) =< max([s(367),s(367)])
s(373) =< max([s(368),s(368)])
s(374) =< s(371)*(1/63)+1
s(375) =< max([s(365),s(365)])
s(376) =< s(369)*s(372)
s(377) =< s(369)*s(373)
s(378) =< s(370)
s(379) =< max([s(375),s(365)])+s(374)*62+s(374)*63
s(380) =< s(378)*s(371)
s(381) =< s(379)+1
s(382) =< s(380)*(64/63)
s(383) =< s(380)+s(376)
s(383) =< s(378)*s(379)
s(384) =< s(382)+s(377)
s(384) =< s(378)*s(381)
s(385) =< s(384)
s(386) =< s(383)
s(387) =< s(364)
s(388) =< max([s(365),s(365)])+s(387)*62+s(387)*63
s(389) =< s(388)+1
s(390) =< s(365)
s(390) =< s(387)*s(388)
s(391) =< s(366)
s(391) =< s(387)*s(389)
s(392) =< s(391)
s(393) =< s(390)

  with precondition: [V_ptr>=3,V_word_num_>=2,V_bit_num_>=64] 


Closed-form bounds of eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B): 
-------------------------------------
* Chain [43] with precondition: [V_ptr=1,V_word_num_=1,V_bit_num_>=64] 
    - Upper bound: 5 
    - Complexity: constant 
* Chain [42] with precondition: [V_ptr=1,0>=V_word_num_,V_bit_num_>=64] 
    - Upper bound: (-V_word_num_+1)*(-254*V_word_num_)+5+(-5*V_word_num_+5)+(-128*V_word_num_+128)+(-126*V_word_num_+126) 
    - Complexity: n^2 
* Chain [41] with precondition: [V_ptr=1,V_word_num_>=2] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [40] with precondition: [V_ptr=2,V_word_num_>=2,V_bit_num_>=64] 
    - Upper bound: 266 
    - Complexity: constant 
* Chain [39] with precondition: [V_word_num_=1,V_ptr>=2,V_bit_num_>=64] 
    - Upper bound: 1536*V_ptr+5 
    - Complexity: n 
* Chain [38] with precondition: [0>=V_ptr] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [37] with precondition: [1>=V_word_num_,V_ptr>=1] 
    - Upper bound: 10*V_ptr-5*V_word_num_+(2*V_ptr+1+2*V_ptr*max([126,nat(-63*V_word_num_-V_bit_num_+126)])+2*V_ptr*max([128,nat(-64*V_word_num_-V_bit_num_+128)]))+(254*V_ptr-254*V_word_num_)*(2*V_ptr-V_word_num_) 
    - Complexity: n^2 
* Chain [36] with precondition: [0>=V_word_num_,V_ptr>=2,V_bit_num_>=64] 
    - Upper bound: 510*V_ptr+5+(-V_word_num_+1)*(-254*V_word_num_)+1026*V_ptr+(-5*V_word_num_+5)+(-128*V_word_num_+128)+(-126*V_word_num_+126) 
    - Complexity: n^2 
* Chain [35] with precondition: [V_ptr>=2,V_word_num_>=2] 
    - Upper bound: 2*V_ptr+3+2*V_ptr*max([126,nat(-V_bit_num_+126)])+2*V_ptr*max([128,nat(-V_bit_num_+128)])+1026*V_ptr 
    - Complexity: n^2 
* Chain [34] with precondition: [V_ptr>=3,V_word_num_>=2,V_bit_num_>=64] 
    - Upper bound: 1536*V_ptr+266 
    - Complexity: n 

### Maximum cost of eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B): max([max([265,254/63*nat(-63*V_word_num_)*nat(-V_word_num_+1)+4+nat(-V_word_num_+1)*5+nat(-64*V_word_num_+64)*2+nat(-63*V_word_num_+63)*2]),nat(V_ptr)*2+max([nat(2*V_ptr)*513+2+max([nat(V_ptr)*2*max([128,nat(-V_bit_num_+128)])+nat(V_ptr)*2*max([126,nat(-V_bit_num_+126)]),nat(V_ptr)*2*126+2+nat(V_ptr)*2*128+max([261,254/63*nat(-63*V_word_num_)*nat(-V_word_num_+1)+nat(-V_word_num_+1)*5+nat(-64*V_word_num_+64)*2+nat(-63*V_word_num_+63)*2])]),nat(V_ptr)*2*max([128,nat(-64*V_word_num_-V_bit_num_+128)])+nat(V_ptr)*2*max([126,nat(-63*V_word_num_-V_bit_num_+126)])+nat(2*V_ptr-V_word_num_)*5+254/63*nat(63*V_ptr-63*V_word_num_)*nat(2*V_ptr-V_word_num_)])])+1 
Asymptotic class: n^2 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 94 ms.
* Invariants computed in 163 ms.
   - Backward Invariants 66 ms.
   - Transitive Invariants 20 ms.
* Refinement performed in 207 ms.
* Termination proved in 18 ms.
* Upper bounds computed in 506 ms.
   - Equation cost structures 134 ms.
   - Phase cost structures 233 ms.
   - Chain cost structures 44 ms.
   - Solving cost expressions 25 ms.
* Total analysis performed in 1074 ms.


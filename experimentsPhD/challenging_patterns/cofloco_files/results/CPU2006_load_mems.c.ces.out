Warning: Ignored call to eval_load_mems_stop/1 in equation eval_load_mems_bb9_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_load_mems_10/16,eval_load_mems_9/15,eval_load_mems_bb4_in/15,eval_load_mems_bb5_in/15,eval_load_mems_bb6_in/16]
1. recursive : [eval_load_mems_7/11,eval_load_mems_8/12,eval_load_mems_bb2_in/11,eval_load_mems_bb3_in/11,eval_load_mems_bb7_in/13,loop_cont_eval_load_mems_bb4_in/14]
2. recursive : [eval_load_mems_15/6,eval_load_mems_16/6,eval_load_mems_17/7,eval_load_mems_18/7,eval_load_mems_bb1_in/4,eval_load_mems_bb8_in/6,loop_cont_eval_load_mems_bb2_in/7]
3. non_recursive : [eval_load_mems_bb9_in/1]
4. non_recursive : [loop_cont_eval_load_mems_bb1_in/2]
5. non_recursive : [eval_load_mems_6/4]
6. non_recursive : [eval_load_mems_5/4]
7. non_recursive : [eval_load_mems_4/4]
8. non_recursive : [eval_load_mems_3/4]
9. non_recursive : [eval_load_mems_2/4]
10. non_recursive : [eval_load_mems_1/4]
11. non_recursive : [eval_load_mems_0/4]
12. non_recursive : [eval_load_mems_bb0_in/4]
13. non_recursive : [eval_load_mems_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_load_mems_bb4_in/15
1. SCC is partially evaluated into eval_load_mems_bb2_in/11
2. SCC is partially evaluated into eval_load_mems_bb1_in/4
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is partially evaluated into eval_load_mems_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_load_mems_bb4_in/15 
* CE 11 is refined into CE [12] 
* CE 9 is refined into CE [13] 
* CE 10 is refined into CE [14] 


#### Refined cost equations eval_load_mems_bb4_in/15 
* CE 12: eval_load_mems_bb4_in(A,B,C,D,E,F,G,H,A,B,C,D,E,F,G) = 0
     [G>=D,G>=64,1>=E,H=2] 
* CE 13: eval_load_mems_bb4_in(A,B,C,D,E,F,G,H,A,B,C,D,E,F,G) = 0
     [G>=D,63>=G,1>=E,H=2] 
* CE 14: eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,V_2,V__2,B,C,D,E,F,G,H,I) = 1+ eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,V_2,J,K,C,D,E,F,G,H,I)
     [V__2>=V__13,63>=V__2,1>=V__1,V__2+1=J,K=2,B=2] 

### Cost equations --> "Loop" of eval_load_mems_bb4_in/15 
* CEs [14] --> Loop 9 
* CEs [12] --> Loop 10 
* CEs [13] --> Loop 11 

#### Loops of eval_load_mems_bb4_in/15 
* Loop 9: eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,V_2,V__2,B,C,D,E,F,G,H,I)->  eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,V_2,V__2',B',C,D,E,F,G,H,I)
                  [V__2>=V__13,63>=V__2,1>=V__1,V__2+1=V__2',B'=2,B=2] 
* Loop 10: eval_load_mems_bb4_in(A,B,C,D,E,F,G,H,A,B,C,D,E,F,G) [G>=D,G>=64,1>=E,H=2] 
* Loop 11: eval_load_mems_bb4_in(A,B,C,D,E,F,G,H,A,B,C,D,E,F,G) [G>=D,63>=G,1>=E,H=2] 

### Ranking functions of CR eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,V_2,V__2,B,C,D,E,F,G,H,I) 
* RF of phase [9]: [-V__2+64]

#### Partial ranking functions of CR eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,V_2,V__2,B,C,D,E,F,G,H,I) 
* Partial RF of phase [9]:
  - RF of loop [9:1]:
    -V__2+64

Discarded unfeasible chain [[9]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,V_2,V__2,B,C,D,E,F,G,H,I) 
* [[9],11]
* [[9],10]
* [11]
* [10]


### Merging Chains  eval_load_mems_bb4_in/15 into  External patterns of execution 
* [[10,[9]]] --> 1 
* [[11]] --> 2 
* [[10]] --> 3 
* [[11,[9]]] --> 4 


### Specialization of cost equations eval_load_mems_bb2_in/11 
* CE 8 is refined into CE [15] 
* CE 5 is refined into CE [16] 
* CE 6 is refined into CE [17,18,19,20] 
* CE 7 is refined into CE [21,22,23,24] 


#### Refined cost equations eval_load_mems_bb2_in/11 
* CE 15: eval_load_mems_bb2_in(A,B,C,D,E,F,A,B,C,D,E) = 0
     [E>=2,F=3] 
* CE 16: eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G) = 1+ eval_load_mems_bb2_in(V__02,V__01,V__0,H,I,J,C,D,E,F,G)
     [1>=V__1,V__1+1=I,J=3,H=0,B=3] 
* CE 17: eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G) = 2+ eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,H,V__13,I,V__02,V__01,V__0,V__13,V__1,H,J):1+ eval_load_mems_bb2_in(V__02,V__01,V__0,K,L,M,C,D,E,F,G)
     [0>=H+1,1>=V__1,63>=V__13,V__1+1=L,M=3,K=0,J=64,I=2,B=3] 
* CE 18: eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G) = 2+ eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,H,V__13,I,V__02,V__01,V__0,V__13,V__1,H,V__13):2+ eval_load_mems_bb2_in(V__02,V__01,V__0,J,K,L,C,D,E,F,G)
     [0>=H+1,1>=V__1,63>=V__13,V__1+1=K,L=3,J=0,I=2,B=3] 
* CE 19: eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G) = 2+ eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,H,V__13,I,V__02,V__01,V__0,V__13,V__1,H,V__13):3+ eval_load_mems_bb2_in(V__02,V__01,V__0,J,K,L,C,D,E,F,G)
     [V__13>=64,0>=H+1,1>=V__1,V__1+1=K,L=3,J=0,I=2,B=3] 
* CE 20: eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G) = 2+ eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,H,V__13,I,V__02,V__01,V__0,V__13,V__1,H,J):4+ eval_load_mems_bb2_in(V__02,V__01,V__0,K,L,M,C,D,E,F,G)
     [J>=V__13+1,63>=J,0>=H+1,1>=V__1,V__1+1=L,M=3,K=0,I=2,B=3] 
* CE 21: eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G) = 2+ eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,H,V__13,I,V__02,V__01,V__0,V__13,V__1,H,J):1+ eval_load_mems_bb2_in(V__02,V__01,V__0,K,L,M,C,D,E,F,G)
     [H>=1,1>=V__1,63>=V__13,V__1+1=L,M=3,K=0,J=64,I=2,B=3] 
* CE 22: eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G) = 2+ eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,H,V__13,I,V__02,V__01,V__0,V__13,V__1,H,V__13):2+ eval_load_mems_bb2_in(V__02,V__01,V__0,J,K,L,C,D,E,F,G)
     [H>=1,1>=V__1,63>=V__13,V__1+1=K,L=3,J=0,I=2,B=3] 
* CE 23: eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G) = 2+ eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,H,V__13,I,V__02,V__01,V__0,V__13,V__1,H,V__13):3+ eval_load_mems_bb2_in(V__02,V__01,V__0,J,K,L,C,D,E,F,G)
     [H>=1,V__13>=64,1>=V__1,V__1+1=K,L=3,J=0,I=2,B=3] 
* CE 24: eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G) = 2+ eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,H,V__13,I,V__02,V__01,V__0,V__13,V__1,H,J):4+ eval_load_mems_bb2_in(V__02,V__01,V__0,K,L,M,C,D,E,F,G)
     [J>=V__13+1,H>=1,63>=J,1>=V__1,V__1+1=L,M=3,K=0,I=2,B=3] 

### Cost equations --> "Loop" of eval_load_mems_bb2_in/11 
* CEs [16,17,18,19,20,21,22,23,24] --> Loop 12 
* CEs [15] --> Loop 13 

#### Loops of eval_load_mems_bb2_in/11 
* Loop 12: eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G)->  eval_load_mems_bb2_in(V__02,V__01,V__0,V__13',V__1',B',C,D,E,F,G)
                  [1>=V__1,V__1+1=V__1',B'=3,V__13'=0,B=3] 
* Loop 13: eval_load_mems_bb2_in(A,B,C,D,E,F,A,B,C,D,E) [E>=2,F=3] 

### Ranking functions of CR eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G) 
* RF of phase [12]: [-V__1+2]

#### Partial ranking functions of CR eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G) 
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    -V__1+2

Discarded unfeasible chain [[12]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G) 
* [[12],13]
* [13]


### Merging Chains  eval_load_mems_bb2_in/11 into  External patterns of execution 
* [[13,[12]]] --> 1 
* [[13]] --> 2 


### Specialization of cost equations eval_load_mems_bb1_in/4 
* CE 4 is refined into CE [25] 
* CE 3 is refined into CE [26,27] 


#### Refined cost equations eval_load_mems_bb1_in/4 
* CE 25: eval_load_mems_bb1_in(V__02,V__01,V__0,B) = 0
     [0>=V__0,B=4] 
* CE 26: eval_load_mems_bb1_in(V__02,V__01,V__0,B) = 2+ eval_load_mems_bb2_in(V__02,V__01,V__0,V__02,V__01,C,V__02,V__01,V__0,D,E):1+ eval_load_mems_bb1_in(F,G,H,I)
     [V__0>=1,1>=V__01,V__0=H+1,I=4,G=0,F=0,E=2,D=0,C=3,B=4] 
* CE 27: eval_load_mems_bb1_in(V__02,V__01,V__0,B) = 2+ eval_load_mems_bb2_in(V__02,V__01,V__0,V__02,V__01,C,V__02,V__01,V__0,V__02,V__01):2+ eval_load_mems_bb1_in(V__02,D,E,F)
     [V__0>=1,V__01>=2,V__0=E+1,F=4,D=0,C=3,B=4] 

### Cost equations --> "Loop" of eval_load_mems_bb1_in/4 
* CEs [27] --> Loop 14 
* CEs [26] --> Loop 15 
* CEs [25] --> Loop 16 

#### Loops of eval_load_mems_bb1_in/4 
* Loop 14: eval_load_mems_bb1_in(V__02,V__01,V__0,B)->  eval_load_mems_bb1_in(V__02,V__01',V__0',B')
                  [V__0>=1,V__01>=2,V__0=V__0'+1,B'=4,V__01'=0,B=4] 
* Loop 15: eval_load_mems_bb1_in(V__02,V__01,V__0,B)->  eval_load_mems_bb1_in(V__02',V__01',V__0',B')
                  [V__0>=1,1>=V__01,V__0=V__0'+1,B'=4,V__01'=0,V__02'=0,B=4] 
* Loop 16: eval_load_mems_bb1_in(V__02,V__01,V__0,B) [0>=V__0,B=4] 

### Ranking functions of CR eval_load_mems_bb1_in(V__02,V__01,V__0,B) 
* RF of phase [15]: [V__0]

#### Partial ranking functions of CR eval_load_mems_bb1_in(V__02,V__01,V__0,B) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    V__0

Discarded unfeasible chain [[15]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [14,[15]](Non-terminating chain proved terminating)

### Resulting Chains:eval_load_mems_bb1_in(V__02,V__01,V__0,B) 
* [[15],16]
* [16]
* [14,[15],16]
* [14,16]


### Merging Chains  eval_load_mems_bb1_in/4 into  External patterns of execution 
* [[16,14]] --> 1 
* [[16,[15]]] --> 2 
* [[16]] --> 3 
* [[16,[15],14]] --> 4 


### Specialization of cost equations eval_load_mems_start/4 
* CE 2 is refined into CE [28,29,30,31] 


#### Refined cost equations eval_load_mems_start/4 
* CE 28: eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) = 1+ eval_load_mems_bb1_in(V_bit_num_,V_word_num_,C,D):1
     [V_word_num_>=2,D=4,C=1,V_ptr=1] 
* CE 29: eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) = 1+ eval_load_mems_bb1_in(V_bit_num_,V_word_num_,V_ptr,C):2
     [V_ptr>=1,1>=V_word_num_,C=4] 
* CE 30: eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) = 1+ eval_load_mems_bb1_in(V_bit_num_,V_word_num_,V_ptr,C):3
     [0>=V_ptr,C=4] 
* CE 31: eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) = 1+ eval_load_mems_bb1_in(V_bit_num_,V_word_num_,V_ptr,C):4
     [V_ptr>=2,V_word_num_>=2,C=4] 

### Cost equations --> "Loop" of eval_load_mems_start/4 
* CEs [31] --> Loop 17 
* CEs [29] --> Loop 18 
* CEs [30] --> Loop 19 
* CEs [28] --> Loop 20 

#### Loops of eval_load_mems_start/4 
* Loop 17: eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) [V_word_num_>=2,V_ptr>=2] 
* Loop 18: eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) [V_ptr>=1,1>=V_word_num_] 
* Loop 19: eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) [0>=V_ptr] 
* Loop 20: eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) [V_word_num_>=2,V_ptr=1] 

### Ranking functions of CR eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) 

#### Partial ranking functions of CR eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) 


### Resulting Chains:eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) 
* [20]
* [19]
* [18]
* [17]


### Merging Chains  eval_load_mems_start/4 into  External patterns of execution 
* [[20]] --> 1 
* [[19]] --> 2 
* [[18]] --> 3 
* [[17]] --> 4 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 13 

#### Computing cost of phase [9] 

#### Simplifying cost structure of CE 14 

#### Cost of loops [9] 

 * loop 9:eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,V_2,V__2,B,C,D,E,F,G,H,I) -> [eval_load_mems_bb4_in(V__02',V__01',V__0',V__13',V__1',V_2',V__2',B',C',D',E',F',G',H',I')] 
1
##### Pending set eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,V_2,V__2,B,C,D,E,F,G,H,I)
* Psum in Loop 9: [it(9)=<1]

###### Computing sum for it(9)=<1  in Loop 9 
   - Applying inductive sum strategy 
     - head Candidate: -V__2+64 
     - head Candidate: -V__2+64 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -V__2+64 
     - tail Candidate: -V__2+64 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(9)=< -V__2+64,it(9)=< -V__2+64,it(9)=< -V__2+V__2',it(9)=< -V__2+V__2'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [9] 

#### Simplifying cost structure of phase [9] 

#### Cost of phase [9]:eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,V_2,V__2,B,C,D,E,F,G,H,I) -> [eval_load_mems_bb4_in(V__02',V__01',V__0',V__13',V__1',V_2',V__2',B',C',D',E',F',G',H',I')] 
1*it(9)+0
  Such that:it(9) =< -V__2+64
it(9) =< -V__2+V__2'

#### Simplifying cost structure of chain [[9],11] 

#### Simplifying cost structure of CE 12 

#### Found solution for phase  [9] in the cache 

#### Cost of phase [9]:eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,V_2,V__2,B,C,D,E,F,G,H,I) -> [eval_load_mems_bb4_in(V__02',V__01',V__0',V__13',V__1',V_2',V__2',B',C',D',E',F',G',H',I')] 
1*it(9)+0
  Such that:it(9) =< -V__2+64
it(9) =< -V__2+V__2'

#### Simplifying cost structure of chain [[9],10] 

#### Cost of chains of eval_load_mems_bb4_in(V__02,V__01,V__0,V__13,V__1,V_2,V__2,B,C,D,E,F,G,H,I):
* Chain [[9],11]: 1*it(9)+0
  Such that:it(9) =< -V__2+I

  with precondition: [B=2,V__02=C,V__01=D,V__0=E,V__13=F,V__1=G,V_2=H,1>=V__1,63>=I,V__2>=V__13,I>=V__2+1] 

* Chain [[9],10]: 1*it(9)+0
  Such that:it(9) =< -V__2+64

  with precondition: [B=2,I=64,V__02=C,V__01=D,V__0=E,V__13=F,V__1=G,V_2=H,1>=V__1,63>=V__2,V__2>=V__13] 

* Chain [11]: 0
  with precondition: [B=2,C=V__02,D=V__01,E=V__0,H=V_2,V__13=F,V__1=G,V__2=I,1>=V__1,63>=V__2,V__2>=V__13] 

* Chain [10]: 0
  with precondition: [B=2,C=V__02,D=V__01,E=V__0,H=V_2,V__13=F,V__1=G,V__2=I,1>=V__1,V__2>=64,V__2>=V__13] 


#### Simplifying cost structure of CE 15 

#### Computing cost of phase [12] 

#### Simplifying cost structure of CE 16 
 * Renamed intermediate variables: 
[ (eq(17,1),it(9))>>s(1)]

#### Simplifying cost structure of CE 17 

#### Simplifying cost structure of CE 18 

#### Simplifying cost structure of CE 19 
 * Renamed intermediate variables: 
[ (eq(20,1),it(9))>>s(2)]

#### Simplifying cost structure of CE 20 
 * Renamed intermediate variables: 
[ (eq(21,1),it(9))>>s(3)]

#### Simplifying cost structure of CE 21 

#### Simplifying cost structure of CE 22 

#### Simplifying cost structure of CE 23 
 * Renamed intermediate variables: 
[ (eq(24,1),it(9))>>s(4)]

#### Simplifying cost structure of CE 24 
 * Joined equivalent variables [s(2),s(4)] into s(2)
 * Joined equivalent variables [s(1),s(3)] into s(1)
 * Renamed intermediate variables: 
[ (it(12),aux(1))>>s(5), (it(12),aux(2))>>s(6), (it(12),s(2))>>s(7), (it(12),s(1))>>s(8)]

#### Cost of loops [12] 

 * loop 12:eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G) -> [eval_load_mems_bb2_in(V__02',V__01',V__0',V__13',V__1',B',C',D',E',F',G')] 
2*s(8)+2*s(7)+2
  Such that:s(5) =< -V__13+63
s(6) =< -V__13+64
s(7) =< s(5)
s(8) =< s(6)

##### Pending set eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G)
* Psum in Loop 12: [it(12)=<1,s(12)=< -V__13+63,s(11)=< -V__13+64]

###### Computing sum for it(12)=<1  in Loop 12 
   - Applying inductive sum strategy 
     - head Candidate: -V__1+2 
     - head Candidate: -V__1+2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -V__1+2 
     - tail Candidate: -V__1+2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(12)=< -V__1+2,it(12)=< -V__1+2,it(12)=< -V__1+V__1',it(12)=< -V__1+V__1'] 

##### Pending set eval_load_mems_0(V_ptr,V_word_num_,V_bit_num_,B)
* Psum in Loop 12: [s(12)=< -V__13+63,s(11)=< -V__13+64]

###### Computing sum for s(12)=< -V__13+63  in Loop 12 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(3)=< -V__13+63] 
 * Adding constraints: [s(12)=<it(12)*aux(3)] 

##### Pending set eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G)
* Pmax/min: [aux(3)=< -V__13+63]
* Psum in Loop 12: [s(11)=< -V__13+64]

###### Computing max_min for aux(3)=< -V__13+63  
   - Applying max/min strategy 
     - Loop 12  resets the expression to [63] 
 * Adding constraints:[aux(3)=<max([aux(4),aux(5)]),aux(4)=< -V__13+63] 

##### Pending set eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G)
* Pmax/min: [aux(5)=<63]
* Psum in Loop 12: [s(11)=< -V__13+64]

###### Computing max_min for aux(5)=<63  
 * Adding constraints:[aux(5)=<63] 

##### Pending set eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G)
* Psum in Loop 12: [s(11)=< -V__13+64]

###### Computing sum for s(11)=< -V__13+64  in Loop 12 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(6)=< -V__13+64] 
 * Adding constraints: [s(11)=<it(12)*aux(6)] 

##### Pending set eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G)
* Pmax/min: [aux(6)=< -V__13+64]

###### Computing max_min for aux(6)=< -V__13+64  
   - Found a solution using cacheing 
 * Adding constraints:[aux(6)=<aux(3)+1] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [12] 

#### Simplifying cost structure of phase [12] 

#### Cost of phase [12]:eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G) -> [eval_load_mems_bb2_in(V__02',V__01',V__0',V__13',V__1',B',C',D',E',F',G')] 
2*it(12)+2*s(9)+2*s(10)+0
  Such that:aux(5) =< 63
aux(4) =< -V__13+63
it(12) =< -V__1+2
it(12) =< -V__1+V__1'
aux(3) =< max([aux(4),aux(5)])
aux(6) =< aux(3)+1
s(12) =< it(12)*aux(3)
s(11) =< it(12)*aux(6)
s(10) =< s(12)
s(9) =< s(11)

#### Simplifying cost structure of chain [[12],13] 

#### Cost of chains of eval_load_mems_bb2_in(V__02,V__01,V__0,V__13,V__1,B,C,D,E,F,G):
* Chain [[12],13]: 2*it(12)+2*s(9)+2*s(10)+0
  Such that:aux(5) =< 63
aux(4) =< -V__13+63
it(12) =< -V__1+2
aux(3) =< max([aux(4),aux(5)])
aux(6) =< aux(3)+1
s(12) =< it(12)*aux(3)
s(11) =< it(12)*aux(6)
s(10) =< s(12)
s(9) =< s(11)

  with precondition: [B=3,F=0,G=2,V__02=C,V__01=D,V__0=E,1>=V__1,V__0>=1,V__1>=V__01] 

* Chain [13]: 0
  with precondition: [B=3,C=V__02,F=V__13,V__01=D,V__0=E,V__1=G,V__0>=1,V__1>=2,V__1>=V__01] 


#### Simplifying cost structure of CE 25 

#### Computing cost of phase [15] 
 * Renamed intermediate variables: 
[ (eq(26,1),aux(5))>>s(13), (eq(26,1),aux(4))>>s(14), (eq(26,1),it(12))>>s(15), (eq(26,1),aux(3))>>s(16), (eq(26,1),aux(6))>>s(17), (eq(26,1),s(12))>>s(18), (eq(26,1),s(11))>>s(19), (eq(26,1),s(10))>>s(20), (eq(26,1),s(9))>>s(21)]

#### Simplifying cost structure of CE 26 
 * Renamed intermediate variables: 
[ (it(15),s(13))>>s(22), (it(15),s(14))>>s(23), (it(15),s(15))>>s(24), (it(15),s(16))>>s(25), (it(15),s(17))>>s(26), (it(15),s(18))>>s(27), (it(15),s(19))>>s(28), (it(15),s(20))>>s(29), (it(15),s(21))>>s(30)]

#### Cost of loops [15] 

 * loop 15:eval_load_mems_bb1_in(V__02,V__01,V__0,B) -> [eval_load_mems_bb1_in(V__02',V__01',V__0',B')] 
2*s(24)+2*s(29)+2*s(30)+2
  Such that:s(22) =< 63
s(23) =< -V__02+63
s(24) =< -V__01+2
s(25) =< max([s(23),s(22)])
s(26) =< s(25)+1
s(27) =< s(24)*s(25)
s(28) =< s(24)*s(26)
s(29) =< s(27)
s(30) =< s(28)

##### Pending set eval_load_mems_bb1_in(V__02,V__01,V__0,B)
* Pmax/min: [s(22)=<63,s(23)=< -V__02+63]
* Psum in Loop 15: [it(15)=<1,s(31)=< -V__01+2]

###### Computing max_min for s(22)=<63  
 * Adding constraints:[s(22)=<63] 

##### Pending set eval_load_mems_bb1_in(V__02,V__01,V__0,B)
* Pmax/min: [s(23)=< -V__02+63]
* Psum in Loop 15: [it(15)=<1,s(31)=< -V__01+2]

###### Computing max_min for s(23)=< -V__02+63  
   - Applying max/min strategy 
     - Loop 15  resets the expression to [63] 
 * Adding constraints:[s(23)=<max([aux(7),aux(8)]),aux(7)=< -V__02+63] 

##### Pending set eval_load_mems_bb1_in(V__02,V__01,V__0,B)
* Pmax/min: [aux(8)=<63]
* Psum in Loop 15: [it(15)=<1,s(31)=< -V__01+2]

###### Computing max_min for aux(8)=<63  
 * Adding constraints:[aux(8)=<63] 

##### Pending set eval_load_mems_bb1_in(V__02,V__01,V__0,B)
* Psum in Loop 15: [it(15)=<1,s(31)=< -V__01+2]

###### Computing sum for it(15)=<1  in Loop 15 
   - Applying inductive sum strategy 
     - head Candidate: V__0 
     - head Candidate: V__0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V__0 
     - tail Candidate: V__0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(15)=<V__0,it(15)=<V__0,it(15)=<V__0-V__0',it(15)=<V__0-V__0'] 

##### Pending set eval_load_mems_bb1_in(V__02,V__01,V__0,B)
* Psum in Loop 15: [s(31)=< -V__01+2]

###### Computing sum for s(31)=< -V__01+2  in Loop 15 
   - Applying inductive sum strategy 
     - head Candidate: -V__01+2*V__0 
     - tail Candidate: -V__01+2*V__0 
 * Adding constraints: [s(31)=< -V__01+2*V__0,s(31)=< -V__01+2*V__0+V__01'-2*V__0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [15] 

#### Simplifying cost structure of phase [15] 
 * Joined equivalent variables [aux(9),aux(8),s(22)] into aux(9)

#### Cost of phase [15]:eval_load_mems_bb1_in(V__02,V__01,V__0,B) -> [eval_load_mems_bb1_in(V__02',V__01',V__0',B')] 
2*it(15)+2*s(31)+2*s(32)+2*s(33)+0
  Such that:aux(7) =< -V__02+63
s(31) =< -V__01+2*V__0
s(31) =< -V__01+2*V__0+V__01'-2*V__0'
it(15) =< V__0
it(15) =< V__0-V__0'
aux(9) =< 63
s(23) =< max([aux(7),aux(9)])
s(25) =< max([s(23),aux(9)])
s(26) =< s(25)+1
s(35) =< s(31)*s(25)
s(34) =< s(31)*s(26)
s(32) =< s(35)
s(33) =< s(34)

#### Simplifying cost structure of chain [[15],16] 

#### Simplifying cost structure of CE 27 

#### Simplifying cost structure of chain [14,[15],16] 

#### Simplifying cost structure of chain [14,16] 

#### Cost of chains of eval_load_mems_bb1_in(V__02,V__01,V__0,B):
* Chain [[15],16]: 2*it(15)+2*s(31)+2*s(32)+2*s(33)+0
  Such that:aux(9) =< 63
aux(7) =< -V__02+63
s(31) =< -V__01+2*V__0
it(15) =< V__0
s(23) =< max([aux(7),aux(9)])
s(25) =< max([s(23),aux(9)])
s(26) =< s(25)+1
s(35) =< s(31)*s(25)
s(34) =< s(31)*s(26)
s(32) =< s(35)
s(33) =< s(34)

  with precondition: [B=4,1>=V__01,V__0>=1] 

* Chain [16]: 0
  with precondition: [B=4,0>=V__0] 

* Chain [14,[15],16]: 2*it(15)+2*s(31)+2*s(32)+2*s(33)+2
  Such that:aux(9) =< 63
aux(7) =< -V__02+63
it(15) =< V__0
s(31) =< 2*V__0
s(23) =< max([aux(7),aux(9)])
s(25) =< max([s(23),aux(9)])
s(26) =< s(25)+1
s(35) =< s(31)*s(25)
s(34) =< s(31)*s(26)
s(32) =< s(35)
s(33) =< s(34)

  with precondition: [B=4,V__01>=2,V__0>=2] 

* Chain [14,16]: 2
  with precondition: [V__0=1,B=4,V__01>=2] 


#### Simplifying cost structure of CE 28 

#### Simplifying cost structure of CE 30 
 * Renamed intermediate variables: 
[ (eq(29,1),aux(9))>>s(36), (eq(29,1),aux(7))>>s(37), (eq(29,1),s(31))>>s(38), (eq(29,1),it(15))>>s(39), (eq(29,1),s(23))>>s(40), (eq(29,1),s(25))>>s(41), (eq(29,1),s(26))>>s(42), (eq(29,1),s(35))>>s(43), (eq(29,1),s(34))>>s(44), (eq(29,1),s(32))>>s(45), (eq(29,1),s(33))>>s(46)]

#### Simplifying cost structure of CE 29 
 * Renamed intermediate variables: 
[ (eq(31,1),aux(9))>>s(47), (eq(31,1),aux(7))>>s(48), (eq(31,1),it(15))>>s(49), (eq(31,1),s(31))>>s(50), (eq(31,1),s(23))>>s(51), (eq(31,1),s(25))>>s(52), (eq(31,1),s(26))>>s(53), (eq(31,1),s(35))>>s(54), (eq(31,1),s(34))>>s(55), (eq(31,1),s(32))>>s(56), (eq(31,1),s(33))>>s(57)]

#### Simplifying cost structure of CE 31 

#### Cost of chains of eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B):
* Chain [20]: 3
  with precondition: [V_ptr=1,V_word_num_>=2] 

* Chain [19]: 1
  with precondition: [0>=V_ptr] 

* Chain [18]: 2*s(38)+2*s(39)+2*s(45)+2*s(46)+1
  Such that:s(36) =< 63
s(39) =< V_ptr
s(38) =< 2*V_ptr-V_word_num_
s(37) =< -V_bit_num_+63
s(40) =< max([s(37),s(36)])
s(41) =< max([s(40),s(36)])
s(42) =< s(41)+1
s(43) =< s(38)*s(41)
s(44) =< s(38)*s(42)
s(45) =< s(43)
s(46) =< s(44)

  with precondition: [1>=V_word_num_,V_ptr>=1] 

* Chain [17]: 2*s(49)+2*s(50)+2*s(56)+2*s(57)+3
  Such that:s(47) =< 63
s(49) =< V_ptr
s(50) =< 2*V_ptr
s(48) =< -V_bit_num_+63
s(51) =< max([s(48),s(47)])
s(52) =< max([s(51),s(47)])
s(53) =< s(52)+1
s(54) =< s(50)*s(52)
s(55) =< s(50)*s(53)
s(56) =< s(54)
s(57) =< s(55)

  with precondition: [V_ptr>=2,V_word_num_>=2] 


Closed-form bounds of eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B): 
-------------------------------------
* Chain [20] with precondition: [V_ptr=1,V_word_num_>=2] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [19] with precondition: [0>=V_ptr] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [18] with precondition: [1>=V_word_num_,V_ptr>=1] 
    - Upper bound: 10*V_ptr-4*V_word_num_+1+ (8*V_ptr-4*V_word_num_)*max([63,max([63,nat(-V_bit_num_+63)])]) 
    - Complexity: n^2 
* Chain [17] with precondition: [V_ptr>=2,V_word_num_>=2] 
    - Upper bound: 10*V_ptr+3+8*V_ptr*max([63,max([63,nat(-V_bit_num_+63)])]) 
    - Complexity: n^2 

### Maximum cost of eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B): max([2,nat(V_ptr)*2+max([nat(2*V_ptr-V_word_num_)*4*max([63,max([63,nat(-V_bit_num_+63)])])+nat(2*V_ptr-V_word_num_)*4,nat(2*V_ptr)*4+2+nat(2*V_ptr)*4*max([63,max([63,nat(-V_bit_num_+63)])])])])+1 
Asymptotic class: n^2 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 228 ms.
* Invariants computed in 169 ms.
   - Backward Invariants 86 ms.
   - Transitive Invariants 30 ms.
* Refinement performed in 360 ms.
* Termination proved in 30 ms.
* Upper bounds computed in 456 ms.
   - Equation cost structures 143 ms.
   - Phase cost structures 308 ms.
   - Chain cost structures 76 ms.
   - Solving cost expressions 8 ms.
* Total analysis performed in 1449 ms.


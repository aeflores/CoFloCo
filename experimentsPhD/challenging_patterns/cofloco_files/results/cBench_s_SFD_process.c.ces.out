Warning: Ignored call to eval_s_SFD_process_stop/1 in equation eval_s_SFD_process_bb8_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_s_SFD_process_16/15,eval_s_SFD_process_17/16,eval_s_SFD_process_bb5_in/14,eval_s_SFD_process_bb6_in/14]
1. recursive  : [eval_s_SFD_process_10/6,eval_s_SFD_process_12/7,eval_s_SFD_process_13/8,eval_s_SFD_process_19/9,eval_s_SFD_process_20/9,eval_s_SFD_process_9/5,eval_s_SFD_process_bb1_in/4,eval_s_SFD_process_bb2_in/4,eval_s_SFD_process_bb3_in/6,eval_s_SFD_process_bb4_in/6,eval_s_SFD_process_bb7_in/8,loop_cont_eval_s_SFD_process_bb5_in/9]
2. non_recursive  : [eval_s_SFD_process_bb8_in/1]
3. non_recursive  : [loop_cont_eval_s_SFD_process_bb1_in/2]
4. non_recursive  : [eval_s_SFD_process_7/4]
5. non_recursive  : [eval_s_SFD_process_6/4]
6. non_recursive  : [eval_s_SFD_process_5/4]
7. non_recursive  : [eval_s_SFD_process_4/4]
8. non_recursive  : [eval_s_SFD_process_3/4]
9. non_recursive  : [eval_s_SFD_process_2/4]
10. non_recursive  : [eval_s_SFD_process_1/4]
11. non_recursive  : [eval_s_SFD_process_0/4]
12. non_recursive  : [eval_s_SFD_process_bb0_in/4]
13. non_recursive  : [eval_s_SFD_process_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_s_SFD_process_bb5_in/14
1. SCC is partially evaluated into eval_s_SFD_process_bb1_in/4
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_s_SFD_process_7/4
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is partially evaluated into eval_s_SFD_process_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_s_SFD_process_bb5_in/14 
* CE 9 is refined into CE [11] 
* CE 10 is refined into CE [12] 
* CE 8 is refined into CE [13] 


#### Refined cost equations eval_s_SFD_process_bb5_in/14 
* CE 11: eval_s_SFD_process_bb5_in(A,B,C,D,E,F,G,A,B,H,D,I,F,J) = 0
     [B>=F,A>=D,F>=1,F=J+1,D=H+1,D=C+1,I=0,G=2,E=0] 
* CE 12: eval_s_SFD_process_bb5_in(A,B,C,D,E,F,G,A,B,H,D,I,F,F) = 0
     [A>=D,B>=1,0>=F,D=H+1,D=C+1,I=0,G=2,E=0] 
* CE 13: eval_s_SFD_process_bb5_in(V_rlimit,V__01,V__0,V_1,V_2,V__2,B,C,D,E,F,G,H,I) = 1+ eval_s_SFD_process_bb5_in(V_rlimit,V__01,J,V_1,K,L,M,C,D,E,F,G,H,I)
     [V__01>=V__2,V_rlimit>=V_1,V__2>=1,V__2=L+1,V_1=J+1,V_1=V__0+1,M=2,K=0,B=2,V_2=0] 

### Cost equations --> "Loop" of eval_s_SFD_process_bb5_in/14 
* CEs [13] --> Loop 11 
* CEs [11] --> Loop 12 
* CEs [12] --> Loop 13 

#### Loops of eval_s_SFD_process_bb5_in/14 
* Loop 11: eval_s_SFD_process_bb5_in(V_rlimit,V__01,V__0,V_1,V_2,V__2,B,C,D,E,F,G,H,I)->  eval_s_SFD_process_bb5_in(V_rlimit,V__01,V__0',V_1,V_2',V__2',B',C,D,E,F,G,H,I)
                  [V__01>=V__2,V_rlimit>=V_1,V__2>=1,V__2=V__2'+1,V_1=V__0'+1,V_1=V__0+1,B'=2,V_2'=0,B=2,V_2=0] 
* Loop 12: eval_s_SFD_process_bb5_in(A,B,C,D,E,F,G,A,B,H,D,I,F,J) [B>=F,A>=D,F>=1,F=J+1,D=H+1,D=C+1,I=0,G=2,E=0] 
* Loop 13: eval_s_SFD_process_bb5_in(A,B,C,D,E,F,G,A,B,H,D,I,F,F) [A>=D,B>=1,0>=F,D=H+1,D=C+1,I=0,G=2,E=0] 

### Ranking functions of CR eval_s_SFD_process_bb5_in(V_rlimit,V__01,V__0,V_1,V_2,V__2,B,C,D,E,F,G,H,I) 
* RF of phase [11]: [V__2]

#### Partial ranking functions of CR eval_s_SFD_process_bb5_in(V_rlimit,V__01,V__0,V_1,V_2,V__2,B,C,D,E,F,G,H,I) 
* Partial RF of phase [11]:
  - RF of loop [11:1]:
    V__2

Discarded unfeasible chain [[11]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_s_SFD_process_bb5_in(V_rlimit,V__01,V__0,V_1,V_2,V__2,B,C,D,E,F,G,H,I) 
* [[11],13]
* [[11],12]
* [12]


### Merging Chains  eval_s_SFD_process_bb5_in/14 into  External patterns of execution 
* [[13,[11]]] --> 1 
* [[12]] --> 2 
* [[12,[11]]] --> 3 


### Specialization of cost equations eval_s_SFD_process_bb1_in/4 
* CE 7 is refined into CE [14] 
* CE 3 is refined into CE [15,16,17] 
* CE 4 is refined into CE [18] 
* CE 6 is refined into CE [19] 
* CE 5 is refined into CE [20] 


#### Refined cost equations eval_s_SFD_process_bb1_in/4 
* CE 14: eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) = 0
     [V__0>=V_rlimit,B=3] 
* CE 15: eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) = 2+ eval_s_SFD_process_bb5_in(V_rlimit,V__01,C,D,E,V__01,F,V_rlimit,V__01,G,D,H,I,J):1+ eval_s_SFD_process_bb1_in(V_rlimit,K,L,M)
     [V_rlimit>=D,V__01>=1,D=L+1,D=G+1,D=C+1,D=V__0+1,M=3,K=0,J=0,I=0,H=0,F=2,E=0,B=3] 
* CE 16: eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) = 2+ eval_s_SFD_process_bb5_in(V_rlimit,V__01,C,D,E,V__01,F,V_rlimit,V__01,G,D,H,V__01,I):2+ eval_s_SFD_process_bb1_in(V_rlimit,J,K,L)
     [V_rlimit>=D,V__01>=1,D=K+1,V__01=J+1,V__01=I+1,D=G+1,D=C+1,D=V__0+1,L=3,H=0,F=2,E=0,B=3] 
* CE 17: eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) = 2+ eval_s_SFD_process_bb5_in(V_rlimit,V__01,C,D,E,V__01,F,V_rlimit,V__01,G,D,H,I,J):3+ eval_s_SFD_process_bb1_in(V_rlimit,J,K,L)
     [V__01>=J+2,V_rlimit>=D,J>=0,D=K+1,J+1=I,D=G+1,D=C+1,D=V__0+1,L=3,H=0,F=2,E=0,B=3] 
* CE 18: eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) = 1+ eval_s_SFD_process_bb1_in(V_rlimit,V__01,C,D)
     [V_rlimit>=V__0+1,0>=V__01,V__0+1=C,D=3,B=3] 
* CE 19: eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) = 1+ eval_s_SFD_process_bb1_in(V_rlimit,C,D,E)
     [V_rlimit>=V__0+1,V__0+1=D,C=V__01+1,E=3,B=3] 
* CE 20: eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) = 1+ eval_s_SFD_process_bb1_in(V_rlimit,C,D,E)
     [V_rlimit>=V__0+1,V__0+1=D,E=3,C=0,B=3] 

### Cost equations --> "Loop" of eval_s_SFD_process_bb1_in/4 
* CEs [18] --> Loop 14 
* CEs [19] --> Loop 15 
* CEs [17] --> Loop 16 
* CEs [16] --> Loop 17 
* CEs [20] --> Loop 18 
* CEs [15] --> Loop 19 
* CEs [14] --> Loop 20 

#### Loops of eval_s_SFD_process_bb1_in/4 
* Loop 14: eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B)->  eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0',B')
                  [V_rlimit>=V__0+1,0>=V__01,V__0+1=V__0',B'=3,B=3] 
* Loop 15: eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B)->  eval_s_SFD_process_bb1_in(V_rlimit,V__01',V__0',B')
                  [V_rlimit>=V__0+1,V__0+1=V__0',V__01+1=V__01',B'=3,B=3] 
* Loop 16: eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B)->  eval_s_SFD_process_bb1_in(V_rlimit,V__01',V__0,B')
                  [V_rlimit>=V__0+1,V__01>=V__01'+2,V__01'>=0,B'=3,B=3] 
* Loop 17: eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B)->  eval_s_SFD_process_bb1_in(V_rlimit,V__01',V__0,B')
                  [V_rlimit>=V__0+1,V__01'>=0,V__01'+1=V__01,B'=3,B=3] 
* Loop 18: eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B)->  eval_s_SFD_process_bb1_in(V_rlimit,V__01',V__0',B')
                  [V_rlimit>=V__0+1,V__0+1=V__0',B'=3,V__01'=0,B=3] 
* Loop 19: eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B)->  eval_s_SFD_process_bb1_in(V_rlimit,V__01',V__0,B')
                  [V_rlimit>=V__0+1,V__01>=1,B'=3,V__01'=0,B=3] 
* Loop 20: eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) [V__0>=V_rlimit,B=3] 

### Ranking functions of CR eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) 

#### Partial ranking functions of CR eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) 
* Partial RF of phase [14,15,16,17,18,19]:
  - RF of loop [14:1,15:1,18:1]:
    V_rlimit-V__0
  - RF of loop [16:1]:
    V__01/2-1/2 depends on loops [15:1,18:1] 
  - RF of loop [17:1,19:1]:
    V__01 depends on loops [15:1,18:1] 

Discarded unfeasible chain [[14,15,16,17,18,19]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) 
* [[14,15,16,17,18,19],20]
* [20]


### Merging Chains  eval_s_SFD_process_bb1_in/4 into  External patterns of execution 
* [[20]] --> 1 
* [[20,[14,15,16,17,18,19]]] --> 2 


### Specialization of cost equations eval_s_SFD_process_7/4 
* CE 2 is refined into CE [21,22] 


#### Refined cost equations eval_s_SFD_process_7/4 
* CE 21: eval_s_SFD_process_7(V_p,V_rlimit,V_match,B) = 1+ eval_s_SFD_process_bb1_in(V_rlimit,V_match,V_p,C):1
     [V_p>=V_rlimit,C=3] 
* CE 22: eval_s_SFD_process_7(V_p,V_rlimit,V_match,B) = 1+ eval_s_SFD_process_bb1_in(V_rlimit,V_match,V_p,C):2
     [V_rlimit>=V_p+1,C=3] 

### Cost equations --> "Loop" of eval_s_SFD_process_7/4 
* CEs [21] --> Loop 21 
* CEs [22] --> Loop 22 

#### Loops of eval_s_SFD_process_7/4 
* Loop 21: eval_s_SFD_process_7(V_p,V_rlimit,V_match,B) [V_p>=V_rlimit] 
* Loop 22: eval_s_SFD_process_7(V_p,V_rlimit,V_match,B) [V_rlimit>=V_p+1] 

### Ranking functions of CR eval_s_SFD_process_7(V_p,V_rlimit,V_match,B) 

#### Partial ranking functions of CR eval_s_SFD_process_7(V_p,V_rlimit,V_match,B) 


### Resulting Chains:eval_s_SFD_process_7(V_p,V_rlimit,V_match,B) 
* [22]
* [21]


### Merging Chains  eval_s_SFD_process_7/4 into  External patterns of execution 
* [[22]] --> 1 
* [[21]] --> 2 


### Specialization of cost equations eval_s_SFD_process_start/4 
* CE 1 is refined into CE [23,24] 


#### Refined cost equations eval_s_SFD_process_start/4 
* CE 23: eval_s_SFD_process_start(V_p,V_rlimit,V_match,B) = 0+ eval_s_SFD_process_7(V_p,V_rlimit,V_match,B):1
     [V_rlimit>=V_p+1] 
* CE 24: eval_s_SFD_process_start(V_p,V_rlimit,V_match,B) = 0+ eval_s_SFD_process_7(V_p,V_rlimit,V_match,B):2
     [V_p>=V_rlimit] 

### Cost equations --> "Loop" of eval_s_SFD_process_start/4 
* CEs [24] --> Loop 23 
* CEs [23] --> Loop 24 

#### Loops of eval_s_SFD_process_start/4 
* Loop 23: eval_s_SFD_process_start(V_p,V_rlimit,V_match,B) [V_p>=V_rlimit] 
* Loop 24: eval_s_SFD_process_start(V_p,V_rlimit,V_match,B) [V_rlimit>=V_p+1] 

### Ranking functions of CR eval_s_SFD_process_start(V_p,V_rlimit,V_match,B) 

#### Partial ranking functions of CR eval_s_SFD_process_start(V_p,V_rlimit,V_match,B) 


### Resulting Chains:eval_s_SFD_process_start(V_p,V_rlimit,V_match,B) 
* [24]
* [23]


### Merging Chains  eval_s_SFD_process_start/4 into  External patterns of execution 
* [[24]] --> 1 
* [[23]] --> 2 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 12 

#### Computing cost of phase [11] 

#### Simplifying cost structure of CE 13 

#### Cost of loops [11] 

 * loop 11:eval_s_SFD_process_bb5_in(V_rlimit,V__01,V__0,V_1,V_2,V__2,B,C,D,E,F,G,H,I) -> [eval_s_SFD_process_bb5_in(V_rlimit',V__01',V__0',V_1',V_2',V__2',B',C',D',E',F',G',H',I')] 
1
##### Pending set eval_s_SFD_process_bb5_in(V_rlimit,V__01,V__0,V_1,V_2,V__2,B,C,D,E,F,G,H,I)
* Psum in Loop 11: [it(11)=<1]

###### Computing sum for it(11)=<1  in Loop 11 
   - Applying inductive sum strategy 
     - head Candidate: V__2 
     - head Candidate: V__2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V__2 
     - tail Candidate: V__2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(11)=<V__2,it(11)=<V__2,it(11)=<V__2-V__2',it(11)=<V__2-V__2'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [11] 

#### Simplifying cost structure of phase [11] 

#### Cost of phase [11]:eval_s_SFD_process_bb5_in(V_rlimit,V__01,V__0,V_1,V_2,V__2,B,C,D,E,F,G,H,I) -> [eval_s_SFD_process_bb5_in(V_rlimit',V__01',V__0',V_1',V_2',V__2',B',C',D',E',F',G',H',I')] 
1*it(11)+0
  Such that:it(11) =< V__2
it(11) =< V__2-V__2'

#### Simplifying cost structure of chain [[11],13] 

#### Simplifying cost structure of CE 11 

#### Found solution for phase  [11] in the cache 

#### Cost of phase [11]:eval_s_SFD_process_bb5_in(V_rlimit,V__01,V__0,V_1,V_2,V__2,B,C,D,E,F,G,H,I) -> [eval_s_SFD_process_bb5_in(V_rlimit',V__01',V__0',V_1',V_2',V__2',B',C',D',E',F',G',H',I')] 
1*it(11)+0
  Such that:it(11) =< V__2
it(11) =< V__2-V__2'

#### Simplifying cost structure of chain [[11],12] 

#### Cost of chains of eval_s_SFD_process_bb5_in(V_rlimit,V__01,V__0,V_1,V_2,V__2,B,C,D,E,F,G,H,I):
* Chain [[11],13]: 1*it(11)+0
  Such that:it(11) =< V__2

  with precondition: [V_2=0,B=2,G=0,H=0,I=0,V__0+1=V_1,V_rlimit=C,V__01=D,V__0=E,V__0+1=F,V__2>=1,V_rlimit>=V__0+1,V__01>=V__2] 

* Chain [[11],12]: 1*it(11)+0
  Such that:it(11) =< V__2-H

  with precondition: [V_2=0,B=2,G=0,V__0+1=V_1,V_rlimit=C,V__01=D,V__0=E,V__0+1=F,H=I+1,H>=1,V_rlimit>=V__0+1,V__01>=V__2,V__2>=H+1] 

* Chain [12]: 0
  with precondition: [V_2=0,B=2,G=0,V__0+1=V_1,V_rlimit=C,V__01=D,V__0=E,V__0+1=F,V__2=H,V__2=I+1,V__2>=1,V_rlimit>=V__0+1,V__01>=V__2] 


#### Simplifying cost structure of CE 14 

#### Computing cost of phase [14,15,16,17,18,19] 

#### Simplifying cost structure of CE 18 

#### Simplifying cost structure of CE 19 
 * Renamed intermediate variables: 
[(eq(17,1),it(11))>>s(1)]

#### Simplifying cost structure of CE 17 
 * Renamed intermediate variables: 
[(it(16),s(1))>>s(2)]

#### Simplifying cost structure of CE 16 

#### Simplifying cost structure of CE 20 
 * Renamed intermediate variables: 
[(eq(15,1),it(11))>>s(3)]

#### Simplifying cost structure of CE 15 
 * Renamed intermediate variables: 
[(it(19),s(3))>>s(4)]

#### Cost of loops [14,15,16,17,18,19] 

 * loop 14:eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) -> [eval_s_SFD_process_bb1_in(V_rlimit',V__01',V__0',B')] 
1
 * loop 15:eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) -> [eval_s_SFD_process_bb1_in(V_rlimit',V__01',V__0',B')] 
1
 * loop 16:eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) -> [eval_s_SFD_process_bb1_in(V_rlimit',V__01',V__0',B')] 
1*s(2)+2
  Such that:s(2) =< V__01-V__01'

 * loop 17:eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) -> [eval_s_SFD_process_bb1_in(V_rlimit',V__01',V__0',B')] 
2
 * loop 18:eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) -> [eval_s_SFD_process_bb1_in(V_rlimit',V__01',V__0',B')] 
1
 * loop 19:eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) -> [eval_s_SFD_process_bb1_in(V_rlimit',V__01',V__0',B')] 
1*s(4)+2
  Such that:s(4) =< V__01

##### Pending set eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B)
* Psum in Loop 14: [it(14)=<1]
* Psum in Loop 15: [it(15)=<1]
* Psum in Loop 16: [it(16)=<1,s(5)=<V__01-V__01']
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]
* Psum in Loop 19: [it(19)=<1,s(6)=<V__01]

###### Computing sum for it(14)=<1  in Loop 14 
   - Applying inductive sum strategy 
     - head Candidate: V_rlimit-V__0 
       - Loop 15 is collaborative and bounds [it(15)] 
       - Loop 16 is collaborative
       - Loop 17 is collaborative
       - Loop 18 is collaborative and bounds [it(18)] 
       - Loop 19 is collaborative
     - tail Candidate: V_rlimit-V__0 
       - Loop 15 is collaborative and bounds [it(15)] 
       - Loop 16 is collaborative
       - Loop 17 is collaborative
       - Loop 18 is collaborative and bounds [it(18)] 
       - Loop 19 is collaborative
 * Adding constraints: [it(14)+it(15)+it(18)=<V_rlimit-V__0,it(14)+it(15)+it(18)=<V_rlimit-V__0-V_rlimit'+V__0'] 

##### Pending set eval_s_SFD_process_0(V_p,V_rlimit,V_match,B)
* Psum in Loop 15: [it(15)=<1]
* Psum in Loop 16: [it(16)=<1,s(5)=<V__01-V__01']
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]
* Psum in Loop 19: [it(19)=<1,s(6)=<V__01]

###### Computing sum for it(15)=<1  in Loop 15 
   - Applying inductive sum strategy 
     - head Candidate: V_rlimit-V__0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_rlimit-V__0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(14)+it(15)+it(18)=<V_rlimit-V__0,it(14)+it(15)+it(18)=<V_rlimit-V__0-V_rlimit'+V__0'] 

##### Pending set eval_s_SFD_process_0(V_p,V_rlimit,V_match,B)
* Psum in Loop 16: [it(16)=<1,s(5)=<V__01-V__01']
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]
* Psum in Loop 19: [it(19)=<1,s(6)=<V__01]

###### Computing sum for it(16)=<1  in Loop 16 
   - Applying inductive sum strategy 
     - head Candidate: V__01/2-1/2 
       - Loop 14 is collaborative
       - Loop 15 adds a constant 1/2 
       - Loop 17 is collaborative
       - Loop 18 has a reset to  [-1/2]
       - Loop 19 is collaborative
     - tail Candidate: V__01/2-1/2 
       - Loop 14 is collaborative
       - Loop 15 adds a constant 1/2 
       - Loop 17 is collaborative
       - Loop 18 has undefined behavior 
 * Adding constraints: [it(16)=<aux(1)+it(15)*(1/2)+aux(2),aux(2)=<V__01/2-1/2] 

##### Pending set eval_s_SFD_process_0(V_p,V_rlimit,V_match,B)
* Psum in Loop 16: [s(5)=<V__01-V__01']
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1,aux(1)=< -1/2]
* Psum in Loop 19: [it(19)=<1,s(6)=<V__01]

###### Computing sum for s(5)=<V__01-V__01'  in Loop 16 
   - Applying inductive sum strategy 
     - head Candidate: V__01 
       - Loop 14 is collaborative
       - Loop 15 adds a constant 1/1 
       - Loop 17 is collaborative and bounds [it(17)] 
       - Loop 18 has a reset to  [0]
       - Loop 19 is collaborative and bounds [it(19)] 
     - tail Candidate: V__01 
       - Loop 14 is collaborative
       - Loop 15 adds a constant 1/1 
       - Loop 17 is collaborative and bounds [it(17)] 
       - Loop 18 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(5)=<V__01] 
 * Adding constraints: [s(5)=<it(16)*aux(5),it(17)+it(19)+s(5)=<aux(3)+it(15)+aux(4),aux(4)=<V__01] 

##### Pending set eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B)
* Pmax/min: [aux(5)=<V__01]
* Psum in Loop 18: [it(18)=<1,aux(3)=<0,aux(1)=< -1/2]
* Psum in Loop 19: [s(6)=<V__01]

###### Computing max_min for aux(5)=<V__01  
   - Applying max/min strategy 
     - Loop 14 does not increase the expression
     - Loop 15  increases the expression by 1/1 
     - Loop 16 does not increase the expression
     - Loop 17 does not increase the expression
     - Loop 18  resets the expression to [0] 
     - Loop 19 does not increase the expression
 * Adding constraints:[aux(5)=<max([aux(6),aux(7)])+it(15),aux(6)=<V__01] 

##### Pending set eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B)
* Pmax/min: [aux(7)=<0]
* Psum in Loop 18: [it(18)=<1,aux(3)=<0,aux(1)=< -1/2]
* Psum in Loop 19: [s(6)=<V__01]

###### Computing max_min for aux(7)=<0  
 * Adding constraints:[aux(7)=<0] 

##### Pending set eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B)
* Psum in Loop 18: [it(18)=<1,aux(3)=<0,aux(1)=< -1/2]
* Psum in Loop 19: [s(6)=<V__01]

###### Computing sum for it(18)=<1  in Loop 18 
   - Applying inductive sum strategy 
     - head Candidate: V_rlimit-V__0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_rlimit-V__0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(14)+it(15)+it(18)=<V_rlimit-V__0,it(14)+it(15)+it(18)=<V_rlimit-V__0-V_rlimit'+V__0'] 

##### Pending set eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B)
* Psum in Loop 18: [aux(3)=<0,aux(1)=< -1/2]
* Psum in Loop 19: [s(6)=<V__01]

###### Computing sum for aux(3)=<0  in Loop 18 
 * Adding constraints: [aux(3)=<0] 

##### Pending set eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B)
* Psum in Loop 18: [aux(1)=< -1/2]
* Psum in Loop 19: [s(6)=<V__01]

###### Computing sum for aux(1)=< -1/2  in Loop 18 
   - Applying inductive sum strategy 
     - head Candidate: V_rlimit-V__0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_rlimit-V__0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [aux(1)+it(14)+it(15)=<V_rlimit-V__0,aux(1)+it(14)+it(15)=<V_rlimit-V__0-V_rlimit'+V__0'] 

##### Pending set eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B)
* Psum in Loop 19: [s(6)=<V__01]

###### Computing sum for s(6)=<V__01  in Loop 19 
   - Applying inductive sum strategy 
     - head Candidate: V__01 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V__01 
       - We failed to classify this candidate before 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(9)=<V__01] 
 * Adding constraints: [s(6)=<it(19)*aux(9),it(17)+s(5)+s(6)=<aux(3)+it(15)+aux(8),aux(8)=<V__01] 

##### Pending set eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B)
* Pmax/min: [aux(9)=<V__01]

###### Computing max_min for aux(9)=<V__01  
   - Found a solution using cacheing 
 * Adding constraints:[aux(9)=<aux(5)] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [14,15,16,17,18,19] 

#### Simplifying cost structure of phase [14,15,16,17,18,19] 
 * Joined equivalent variables [aux(10),aux(3),aux(7)] into aux(10)
 * Joined equivalent variables [aux(13),aux(4),aux(6),aux(8)] into aux(13)
 * Joined equivalent variables [it(14),it(15),it(18)] into it(14)
 * Joined equivalent variables [it(17),it(19)] into it(17)

#### Cost of phase [14,15,16,17,18,19]:eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B) -> [eval_s_SFD_process_bb1_in(V_rlimit',V__01',V__0',B')] 
3*it(14)+2*it(16)+4*it(17)+1*s(5)+1*s(6)+0
  Such that:aux(2) =< V__01/2
aux(11) =< V_rlimit-V__0
aux(12) =< V_rlimit-V__0-V_rlimit'+V__0'
aux(13) =< V__01
aux(1) =< aux(11)
it(14) =< aux(11)
aux(1) =< aux(12)
it(14) =< aux(12)
aux(5) =< max([aux(13),0])+it(14)
it(17) =< it(14)+aux(13)
s(5) =< it(14)+aux(13)
s(6) =< it(14)+aux(13)
it(16) =< aux(1)+it(14)*(1/2)+aux(2)
aux(9) =< aux(5)
s(5) =< it(16)*aux(5)
s(6) =< it(17)*aux(9)

#### Simplifying cost structure of chain [[14,15,16,17,18,19],20] 
 * Joined equivalent variables [aux(14),aux(11),aux(12)] into aux(14)
 * Joined equivalent variables [aux(14),aux(1)] into aux(14)

#### Cost of chains of eval_s_SFD_process_bb1_in(V_rlimit,V__01,V__0,B):
* Chain [[14,15,16,17,18,19],20]: 3*it(14)+2*it(16)+4*it(17)+1*s(5)+1*s(6)+0
  Such that:aux(13) =< V__01
aux(2) =< V__01/2
aux(14) =< V_rlimit-V__0
it(14) =< aux(14)
aux(5) =< max([aux(13),0])+it(14)
it(17) =< it(14)+aux(13)
s(5) =< it(14)+aux(13)
s(6) =< it(14)+aux(13)
it(16) =< aux(14)+it(14)*(1/2)+aux(2)
aux(9) =< aux(5)
s(5) =< it(16)*aux(5)
s(6) =< it(17)*aux(9)

  with precondition: [B=3,V_rlimit>=V__0+1] 

* Chain [20]: 0
  with precondition: [B=3,V__0>=V_rlimit] 

 * Renamed intermediate variables: 
[(eq(22,1),aux(13))>>s(7),(eq(22,1),aux(2))>>s(8),(eq(22,1),aux(14))>>s(9),(eq(22,1),it(14))>>s(10),(eq(22,1),aux(5))>>s(11),(eq(22,1),it(17))>>s(12),(eq(22,1),s(5))>>s(13),(eq(22,1),s(6))>>s(14),(eq(22,1),it(16))>>s(15),(eq(22,1),aux(9))>>s(16)]

#### Simplifying cost structure of CE 22 

#### Simplifying cost structure of CE 21 

#### Cost of chains of eval_s_SFD_process_7(V_p,V_rlimit,V_match,B):
* Chain [22]: 3*s(10)+4*s(12)+1*s(13)+1*s(14)+2*s(15)+1
  Such that:s(9) =< -V_p+V_rlimit
s(7) =< V_match
s(8) =< V_match/2
s(10) =< s(9)
s(11) =< max([s(7),0])+s(10)
s(12) =< s(10)+s(7)
s(13) =< s(10)+s(7)
s(14) =< s(10)+s(7)
s(15) =< s(9)+s(10)*(1/2)+s(8)
s(16) =< s(11)
s(13) =< s(15)*s(11)
s(14) =< s(12)*s(16)

  with precondition: [V_rlimit>=V_p+1] 

* Chain [21]: 1
  with precondition: [V_p>=V_rlimit] 

 * Renamed intermediate variables: 
[(eq(23,1),s(9))>>s(17),(eq(23,1),s(7))>>s(18),(eq(23,1),s(8))>>s(19),(eq(23,1),s(10))>>s(20),(eq(23,1),s(11))>>s(21),(eq(23,1),s(12))>>s(22),(eq(23,1),s(13))>>s(23),(eq(23,1),s(14))>>s(24),(eq(23,1),s(15))>>s(25),(eq(23,1),s(16))>>s(26)]

#### Simplifying cost structure of CE 23 

#### Simplifying cost structure of CE 24 

#### Cost of chains of eval_s_SFD_process_start(V_p,V_rlimit,V_match,B):
* Chain [24]: 3*s(20)+4*s(22)+1*s(23)+1*s(24)+2*s(25)+1
  Such that:s(17) =< -V_p+V_rlimit
s(18) =< V_match
s(19) =< V_match/2
s(20) =< s(17)
s(21) =< max([s(18),0])+s(20)
s(22) =< s(20)+s(18)
s(23) =< s(20)+s(18)
s(24) =< s(20)+s(18)
s(25) =< s(17)+s(20)*(1/2)+s(19)
s(26) =< s(21)
s(23) =< s(25)*s(21)
s(24) =< s(22)*s(26)

  with precondition: [V_rlimit>=V_p+1] 

* Chain [23]: 1
  with precondition: [V_p>=V_rlimit] 


Closed-form bounds of eval_s_SFD_process_start(V_p,V_rlimit,V_match,B): 
-------------------------------------
* Chain [24] with precondition: [V_rlimit>=V_p+1] 
    - Upper bound: nat(V_match)*6+1+(-12*V_p+12*V_rlimit)+nat(V_match/2)*2 
    - Complexity: n 
* Chain [23] with precondition: [V_p>=V_rlimit] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of eval_s_SFD_process_start(V_p,V_rlimit,V_match,B): nat(-V_p+V_rlimit)*12+nat(V_match)*6+nat(V_match/2)*2+1 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 66 ms.
* Invariants computed in 59 ms.
   - Backward Invariants 28 ms.
   - Transitive Invariants 13 ms.
* Refinement performed in 78 ms.
* Termination proved in 18 ms.
* Upper bounds computed in 108 ms.
   - Equation cost structures 30 ms.
   - Phase cost structures 65 ms.
   - Chain cost structures 26 ms.
   - Solving cost expressions 2 ms.
* Total analysis performed in 388 ms.


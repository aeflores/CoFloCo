Warning: Ignored call to eval_cf_decode_eol_stop/1 in equation eval_cf_decode_eol_bb13_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_cf_decode_eol_bb1_in/10,eval_cf_decode_eol_bb2_in/10,eval_cf_decode_eol_bb3_in/10,eval_cf_decode_eol_bb4_in/10,eval_cf_decode_eol_bb5_in/10,eval_cf_decode_eol_bb6_in/10,eval_cf_decode_eol_bb7_in/12]
1. non_recursive : [eval_cf_decode_eol_bb13_in/1]
2. recursive : [eval_cf_decode_eol_bb10_in/5,eval_cf_decode_eol_bb11_in/5,eval_cf_decode_eol_bb12_in/5,eval_cf_decode_eol_bb14_in/5,eval_cf_decode_eol_bb15_in/7,eval_cf_decode_eol_bb9_in/5]
3. non_recursive : [loop_cont_eval_cf_decode_eol_bb9_in/2]
4. non_recursive : [eval_cf_decode_eol_34/5]
5. non_recursive : [eval_cf_decode_eol_33/5]
6. non_recursive : [eval_cf_decode_eol_32/5]
7. non_recursive : [eval_cf_decode_eol_31/5]
8. non_recursive : [eval_cf_decode_eol_30/5]
9. non_recursive : [eval_cf_decode_eol_29/5]
10. non_recursive : [eval_cf_decode_eol_28/5]
11. non_recursive : [eval_cf_decode_eol_bb8_in/5]
12. non_recursive : [loop_cont_eval_cf_decode_eol_bb1_in/6]
13. non_recursive : [eval_cf_decode_eol_15/5]
14. non_recursive : [eval_cf_decode_eol_14/5]
15. non_recursive : [eval_cf_decode_eol_13/5]
16. non_recursive : [eval_cf_decode_eol_12/5]
17. non_recursive : [eval_cf_decode_eol_11/5]
18. non_recursive : [eval_cf_decode_eol_10/5]
19. non_recursive : [eval_cf_decode_eol_9/5]
20. non_recursive : [eval_cf_decode_eol_8/5]
21. non_recursive : [eval_cf_decode_eol_7/5]
22. non_recursive : [eval_cf_decode_eol_6/5]
23. non_recursive : [eval_cf_decode_eol_5/5]
24. non_recursive : [eval_cf_decode_eol_4/5]
25. non_recursive : [eval_cf_decode_eol_3/5]
26. non_recursive : [eval_cf_decode_eol_2/5]
27. non_recursive : [eval_cf_decode_eol_1/5]
28. non_recursive : [eval_cf_decode_eol_0/5]
29. non_recursive : [eval_cf_decode_eol_bb0_in/5]
30. non_recursive : [eval_cf_decode_eol_start/6]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_cf_decode_eol_bb1_in/10
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into eval_cf_decode_eol_bb9_in/5
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into eval_cf_decode_eol_bb8_in/5
12. SCC is partially evaluated into loop_cont_eval_cf_decode_eol_bb1_in/6
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is completely evaluated into other SCCs
16. SCC is completely evaluated into other SCCs
17. SCC is completely evaluated into other SCCs
18. SCC is completely evaluated into other SCCs
19. SCC is completely evaluated into other SCCs
20. SCC is completely evaluated into other SCCs
21. SCC is completely evaluated into other SCCs
22. SCC is completely evaluated into other SCCs
23. SCC is completely evaluated into other SCCs
24. SCC is completely evaluated into other SCCs
25. SCC is completely evaluated into other SCCs
26. SCC is completely evaluated into other SCCs
27. SCC is completely evaluated into other SCCs
28. SCC is completely evaluated into other SCCs
29. SCC is completely evaluated into other SCCs
30. SCC is partially evaluated into eval_cf_decode_eol_start/6

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_cf_decode_eol_bb1_in/10 
* CE 7 is refined into CE [16] 
* CE 5 is refined into CE [17] 
* CE 6 is refined into CE [18] 
* CE 4 is refined into CE [19] 
* CE 3 is refined into CE [20] 


#### Refined cost equations eval_cf_decode_eol_bb1_in/10 
* CE 16: eval_cf_decode_eol_bb1_in(A,B,C,D,E,F,A,B,C,E) = 0
     [D>=11,F=3] 
* CE 17: eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F) = 0
     [V_p_0>=V_pr_limit,V_zeros_0>=0,10>=V_zeros_0,0>=V_bits_left_0,B=2] 
* CE 18: eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F) = 1+ eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,G,H,V_p_0,B,C,D,E,F)
     [V_zeros_0>=0,V_bits_left_0>=1,10>=V_zeros_0,V_zeros_0+1=H,V_bits_left_0=G+1] 
* CE 19: eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F) = 1+ eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,G,H,I,B,C,D,E,F)
     [V_pr_limit>=V_p_0+1,V_p_0+2>=V_pr_limit,V_zeros_0>=0,10>=V_zeros_0,0>=V_bits_left_0,V_p_0+1=I,V_zeros_0+1=H,V_bits_left_0+7=G] 
* CE 20: eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F) = 1+ eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,G,H,I,B,C,D,E,F)
     [V_pr_limit>=V_p_0+3,V_zeros_0>=0,10>=V_zeros_0,0>=V_bits_left_0,V_p_0+3=I,V_zeros_0+1=H,V_bits_left_0+23=G] 

### Cost equations --> "Loop" of eval_cf_decode_eol_bb1_in/10 
* CEs [18] --> Loop 15 
* CEs [19] --> Loop 16 
* CEs [20] --> Loop 17 
* CEs [16] --> Loop 18 
* CEs [17] --> Loop 19 

#### Loops of eval_cf_decode_eol_bb1_in/10 
* Loop 15: eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F)->  eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0',V_zeros_0',V_p_0,B,C,D,E,F)
                  [V_zeros_0>=0,V_bits_left_0>=1,10>=V_zeros_0,V_zeros_0+1=V_zeros_0',V_bits_left_0=V_bits_left_0'+1] 
* Loop 16: eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F)->  eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0',V_zeros_0',V_p_0',B,C,D,E,F)
                  [V_pr_limit>=V_p_0+1,V_p_0+2>=V_pr_limit,V_zeros_0>=0,10>=V_zeros_0,0>=V_bits_left_0,V_p_0+1=V_p_0',V_zeros_0+1=V_zeros_0',V_bits_left_0+7=V_bits_left_0'] 
* Loop 17: eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F)->  eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0',V_zeros_0',V_p_0',B,C,D,E,F)
                  [V_pr_limit>=V_p_0+3,V_zeros_0>=0,10>=V_zeros_0,0>=V_bits_left_0,V_p_0+3=V_p_0',V_zeros_0+1=V_zeros_0',V_bits_left_0+23=V_bits_left_0'] 
* Loop 18: eval_cf_decode_eol_bb1_in(A,B,C,D,E,F,A,B,C,E) [D>=11,F=3] 
* Loop 19: eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F) [V_p_0>=V_pr_limit,V_zeros_0>=0,10>=V_zeros_0,0>=V_bits_left_0,B=2] 

### Ranking functions of CR eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F) 
* RF of phase [15,16,17]: [-V_zeros_0+11]

#### Partial ranking functions of CR eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F) 
* Partial RF of phase [15,16,17]:
  - RF of loop [15:1]:
    V_bits_left_0 depends on loops [16:1,17:1] 
  - RF of loop [15:1,16:1,17:1]:
    -V_zeros_0+11
  - RF of loop [16:1]:
    -V_bits_left_0/7+1/7 depends on loops [15:1] 
    V_pr_limit-V_p_0
  - RF of loop [17:1]:
    -V_bits_left_0/23+1/23 depends on loops [15:1] 
    V_pr_limit/3-V_p_0/3-2/3

Discarded unfeasible chain [[15,16,17]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F) 
* [[15,16,17],19]
* [[15,16,17],18]
* [19]


### Merging Chains  eval_cf_decode_eol_bb1_in/10 into  External patterns of execution 
* [[19]] --> 1 
* [[19,[15,16,17]]] --> 2 
* [[18,[15,16,17]]] --> 3 


### Specialization of cost equations eval_cf_decode_eol_bb9_in/5 
* CE 15 is refined into CE [21] 
* CE 13 is refined into CE [22] 
* CE 12 is refined into CE [23] 
* CE 14 is refined into CE [24] 


#### Refined cost equations eval_cf_decode_eol_bb9_in/5 
* CE 21: eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B) = 1+ eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,C,V_p_3,D)
     [V_bits_left_3>=V_12,V_12>=1,2>=V_12,V_bits_left_3=C+1,D=2,B=2] 
* CE 22: eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B) = 1+ eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,C,D,E)
     [V_pr_limit>=V_p_3+1,V_12>=V_bits_left_3+1,V_p_3+2>=V_pr_limit,V_12>=1,2>=V_12,V_p_3+1=D,V_bits_left_3+7=C,E=2,B=2] 
* CE 23: eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B) = 1+ eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,C,D,E)
     [V_pr_limit>=V_p_3+3,V_12>=V_bits_left_3+1,V_12>=1,2>=V_12,V_p_3+3=D,V_bits_left_3+23=C,E=2,B=2] 
* CE 24: eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B) = 0
     [V_12>=V_bits_left_3+1,V_p_3>=V_pr_limit,V_12>=1,2>=V_12,B=2] 

### Cost equations --> "Loop" of eval_cf_decode_eol_bb9_in/5 
* CEs [24] --> Loop 20 
* CEs [21] --> Loop 21 
* CEs [22] --> Loop 22 
* CEs [23] --> Loop 23 

#### Loops of eval_cf_decode_eol_bb9_in/5 
* Loop 20: eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B) [V_12>=V_bits_left_3+1,V_p_3>=V_pr_limit,V_12>=1,2>=V_12,B=2] 
* Loop 21: eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B)->  eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3',V_p_3,B')
                  [V_bits_left_3>=V_12,V_12>=1,2>=V_12,V_bits_left_3=V_bits_left_3'+1,B'=2,B=2] 
* Loop 22: eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B)->  eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3',V_p_3',B')
                  [V_pr_limit>=V_p_3+1,V_12>=V_bits_left_3+1,V_p_3+2>=V_pr_limit,V_12>=1,2>=V_12,V_p_3+1=V_p_3',V_bits_left_3+7=V_bits_left_3',B'=2,B=2] 
* Loop 23: eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B)->  eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3',V_p_3',B')
                  [V_pr_limit>=V_p_3+3,V_12>=V_bits_left_3+1,V_12>=1,2>=V_12,V_p_3+3=V_p_3',V_bits_left_3+23=V_bits_left_3',B'=2,B=2] 

### Ranking functions of CR eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B) 

#### Partial ranking functions of CR eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B) 
* Partial RF of phase [21,22,23]:
  - RF of loop [21:1]:
    -V_12+V_bits_left_3+1 depends on loops [22:1,23:1] 
    V_bits_left_3 depends on loops [22:1,23:1] 
  - RF of loop [22:1]:
    V_12/7-V_bits_left_3/7 depends on loops [21:1] 
    -V_bits_left_3/7+2/7 depends on loops [21:1] 
    V_pr_limit-V_p_3
  - RF of loop [23:1]:
    V_12/23-V_bits_left_3/23 depends on loops [21:1] 
    -V_bits_left_3/23+2/23 depends on loops [21:1] 
    V_pr_limit/3-V_p_3/3-2/3

Discarded unfeasible chain [[21,22,23]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B) 
* [[21,22,23],20]
* [20]


### Merging Chains  eval_cf_decode_eol_bb9_in/5 into  External patterns of execution 
* [[20],[20,[21,22,23]]] --> 1 


### Specialization of cost equations eval_cf_decode_eol_bb8_in/5 
* CE 10 is refined into CE [25] 
* CE 11 is refined into CE [26] 


#### Refined cost equations eval_cf_decode_eol_bb8_in/5 
* CE 25: eval_cf_decode_eol_bb8_in(V_ss_K,V_pr_limit,V_bits_left_0,V_p_0,B) = 1+ eval_cf_decode_eol_bb9_in(V_pr_limit,C,V_bits_left_0,V_p_0,D):1
     [V_ss_K>=1,D=2,C=2] 
* CE 26: eval_cf_decode_eol_bb8_in(V_ss_K,V_pr_limit,V_bits_left_0,V_p_0,B) = 1+ eval_cf_decode_eol_bb9_in(V_pr_limit,C,V_bits_left_0,V_p_0,D):1
     [0>=V_ss_K,D=2,C=1] 

### Cost equations --> "Loop" of eval_cf_decode_eol_bb8_in/5 
* CEs [25] --> Loop 24 
* CEs [26] --> Loop 25 

#### Loops of eval_cf_decode_eol_bb8_in/5 
* Loop 24: eval_cf_decode_eol_bb8_in(V_ss_K,V_pr_limit,V_bits_left_0,V_p_0,B) [V_ss_K>=1] 
* Loop 25: eval_cf_decode_eol_bb8_in(V_ss_K,V_pr_limit,V_bits_left_0,V_p_0,B) [0>=V_ss_K] 

### Ranking functions of CR eval_cf_decode_eol_bb8_in(V_ss_K,V_pr_limit,V_bits_left_0,V_p_0,B) 

#### Partial ranking functions of CR eval_cf_decode_eol_bb8_in(V_ss_K,V_pr_limit,V_bits_left_0,V_p_0,B) 


### Resulting Chains:eval_cf_decode_eol_bb8_in(V_ss_K,V_pr_limit,V_bits_left_0,V_p_0,B) 
* [25]
* [24]


### Merging Chains  eval_cf_decode_eol_bb8_in/5 into  External patterns of execution 
* [[25]] --> 1 
* [[24]] --> 2 


### Specialization of cost equations loop_cont_eval_cf_decode_eol_bb1_in/6 
* CE 8 is refined into CE [27,28] 
* CE 9 is refined into CE [29] 


#### Refined cost equations loop_cont_eval_cf_decode_eol_bb1_in/6 
* CE 27: loop_cont_eval_cf_decode_eol_bb1_in(G,A,B,C,D,E) = 0+ eval_cf_decode_eol_bb8_in(A,B,C,D,E):1
     [0>=A,G=3] 
* CE 28: loop_cont_eval_cf_decode_eol_bb1_in(G,A,B,C,D,E) = 0+ eval_cf_decode_eol_bb8_in(A,B,C,D,E):2
     [A>=1,G=3] 
* CE 29: loop_cont_eval_cf_decode_eol_bb1_in(G,A,B,C,D,E) = 0
     [G=2] 

### Cost equations --> "Loop" of loop_cont_eval_cf_decode_eol_bb1_in/6 
* CEs [28] --> Loop 26 
* CEs [27] --> Loop 27 
* CEs [29] --> Loop 28 

#### Loops of loop_cont_eval_cf_decode_eol_bb1_in/6 
* Loop 26: loop_cont_eval_cf_decode_eol_bb1_in(G,A,B,C,D,E) [A>=1,G=3] 
* Loop 27: loop_cont_eval_cf_decode_eol_bb1_in(G,A,B,C,D,E) [0>=A,G=3] 
* Loop 28: loop_cont_eval_cf_decode_eol_bb1_in(G,A,B,C,D,E) [G=2] 

### Ranking functions of CR loop_cont_eval_cf_decode_eol_bb1_in(G,A,B,C,D,E) 

#### Partial ranking functions of CR loop_cont_eval_cf_decode_eol_bb1_in(G,A,B,C,D,E) 


### Resulting Chains:loop_cont_eval_cf_decode_eol_bb1_in(G,A,B,C,D,E) 
* [28]
* [27]
* [26]


### Merging Chains  loop_cont_eval_cf_decode_eol_bb1_in/6 into  External patterns of execution 
* [[28]] --> 1 
* [[27]] --> 2 
* [[26]] --> 3 


### Specialization of cost equations eval_cf_decode_eol_start/6 
* CE 2 is refined into CE [30,31,32,33] 


#### Refined cost equations eval_cf_decode_eol_start/6 
* CE 30: eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) = 1+ eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_ss_bits_left,C,V_pr_ptr,D,E,F,G,H):1+ loop_cont_eval_cf_decode_eol_bb1_in(I,E,F,G,H,B):1
     [V_pr_ptr>=V_pr_limit,0>=V_ss_bits_left,I=2,D=2,C=0] 
* CE 31: eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) = 1+ eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_ss_bits_left,C,V_pr_ptr,D,E,F,G,H):2+ loop_cont_eval_cf_decode_eol_bb1_in(I,E,F,G,H,B):1
     [8*V_pr_ptr+10>=8*V_pr_limit+V_ss_bits_left,V_pr_ptr+30>=V_pr_limit,10>=V_ss_bits_left,I=2,D=2,C=0] 
* CE 32: eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) = 1+ eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_ss_bits_left,C,V_pr_ptr,D,V_ss_K,V_pr_limit,E,F):3+ loop_cont_eval_cf_decode_eol_bb1_in(G,V_ss_K,V_pr_limit,E,H,B):2
     [V_ss_bits_left+253>=E,E+11>=V_ss_bits_left,0>=V_ss_K,E+8*V_pr_ptr+11=8*H+V_ss_bits_left,E+8*V_pr_ptr+11=8*F+V_ss_bits_left,G=3,D=3,C=0] 
* CE 33: eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) = 1+ eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_ss_bits_left,C,V_pr_ptr,D,V_ss_K,V_pr_limit,E,F):3+ loop_cont_eval_cf_decode_eol_bb1_in(G,V_ss_K,V_pr_limit,E,H,B):3
     [V_ss_bits_left+253>=E,E+11>=V_ss_bits_left,V_ss_K>=1,E+8*V_pr_ptr+11=8*H+V_ss_bits_left,E+8*V_pr_ptr+11=8*F+V_ss_bits_left,G=3,D=3,C=0] 

### Cost equations --> "Loop" of eval_cf_decode_eol_start/6 
* CEs [33] --> Loop 29 
* CEs [32] --> Loop 30 
* CEs [30,31] --> Loop 31 

#### Loops of eval_cf_decode_eol_start/6 
* Loop 29: eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) [V_ss_K>=1] 
* Loop 30: eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) [0>=V_ss_K] 
* Loop 31: eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) [8*V_pr_ptr+10>=8*V_pr_limit+V_ss_bits_left,V_pr_ptr+30>=V_pr_limit,10>=V_ss_bits_left] 

### Ranking functions of CR eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) 

#### Partial ranking functions of CR eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) 


### Resulting Chains:eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) 
* [31]
* [30]
* [29]


### Merging Chains  eval_cf_decode_eol_start/6 into  External patterns of execution 
* [[31]] --> 1 
* [[30]] --> 2 
* [[29]] --> 3 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 17 

#### Computing cost of phase [15,16,17] 

#### Simplifying cost structure of CE 18 

#### Simplifying cost structure of CE 19 

#### Simplifying cost structure of CE 20 

#### Cost of loops [15,16,17] 

 * loop 15:eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F) -> [eval_cf_decode_eol_bb1_in(V_ss_K',V_pr_limit',V_bits_left_0',V_zeros_0',V_p_0',B',C',D',E',F')] 
1
 * loop 16:eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F) -> [eval_cf_decode_eol_bb1_in(V_ss_K',V_pr_limit',V_bits_left_0',V_zeros_0',V_p_0',B',C',D',E',F')] 
1
 * loop 17:eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F) -> [eval_cf_decode_eol_bb1_in(V_ss_K',V_pr_limit',V_bits_left_0',V_zeros_0',V_p_0',B',C',D',E',F')] 
1
##### Pending set eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F)
* Psum in Loop 15: [it(15)=<1]
* Psum in Loop 16: [it(16)=<1]
* Psum in Loop 17: [it(17)=<1]

###### Computing sum for it(15)=<1  in Loop 15 
   - Applying inductive sum strategy 
     - head Candidate: -V_zeros_0+11 
       - Loop 16 is collaborative
       - Loop 17 is collaborative
     - head Candidate: -V_zeros_0+11 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_bits_left_0 
       - Loop 16 adds a constant 7/1 
       - Loop 17 adds a constant 23/1 
     - tail Candidate: -V_zeros_0+11 
       - Loop 16 is collaborative and bounds [it(16)] 
       - Loop 17 is collaborative and bounds [it(17)] 
     - tail Candidate: -V_zeros_0+11 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_bits_left_0 
       - Loop 16 adds a constant 7/1 
       - Loop 17 adds a constant 23/1 
 * Adding constraints: [it(15)=<it(17)*23+it(16)*7+aux(1),it(15)=<it(17)*23+it(16)*7+aux(2),it(15)=< -V_zeros_0+11,it(15)=< -V_zeros_0+11,aux(1)=<V_bits_left_0,it(15)+it(16)+it(17)=< -V_zeros_0+V_zeros_0',it(15)+it(16)+it(17)=< -V_zeros_0+V_zeros_0',aux(2)=<V_bits_left_0-V_bits_left_0'] 

##### Pending set eval_cf_decode_eol_0(V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B)
* Psum in Loop 16: [it(16)=<1]
* Psum in Loop 17: [it(17)=<1]

###### Computing sum for it(16)=<1  in Loop 16 
   - Applying inductive sum strategy 
     - head Candidate: -V_zeros_0+11 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -V_zeros_0+11 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -V_bits_left_0/7+1/7 
       - Loop 15 adds a constant 1/7 
       - Loop 17 is collaborative
     - head Candidate: V_pr_limit-V_p_0 
       - Loop 15 is collaborative
       - Loop 17 is collaborative and bounds [it(17)] 
     - tail Candidate: -V_zeros_0+11 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -V_zeros_0+11 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -V_bits_left_0/7+1/7 
       - Loop 15 adds a constant 1/7 
       - Loop 17 is collaborative and bounds [it(17)] 
     - tail Candidate: V_pr_limit-V_p_0 
       - Loop 15 is collaborative
       - Loop 17 is collaborative and bounds [it(17)] 
 * Adding constraints: [it(16)=<it(15)* (1/7)+aux(3),it(16)+it(17)=<it(15)* (1/7)+aux(4),it(15)+it(16)=< -V_zeros_0+11,it(15)+it(16)=< -V_zeros_0+11,aux(3)=< -V_bits_left_0/7+1/7,it(16)+it(17)=<V_pr_limit-V_p_0,it(15)+it(16)+it(17)=< -V_zeros_0+V_zeros_0',it(15)+it(16)+it(17)=< -V_zeros_0+V_zeros_0',aux(4)=< -V_bits_left_0/7+V_bits_left_0'/7,it(16)+it(17)=<V_pr_limit-V_p_0-V_pr_limit'+V_p_0'] 

##### Pending set eval_cf_decode_eol_0(V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B)
* Psum in Loop 17: [it(17)=<1]

###### Computing sum for it(17)=<1  in Loop 17 
   - Applying inductive sum strategy 
     - head Candidate: -V_zeros_0+11 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -V_zeros_0+11 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -V_bits_left_0/23+1/23 
       - Loop 15 adds a constant 1/23 
       - Loop 16 is collaborative
     - head Candidate: V_pr_limit/3-V_p_0/3-2/3 
       - Loop 15 is collaborative
       - Loop 16 is collaborative
     - tail Candidate: -V_zeros_0+11 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -V_zeros_0+11 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -V_bits_left_0/23+1/23 
       - Loop 15 adds a constant 1/23 
       - Loop 16 is collaborative
     - tail Candidate: V_pr_limit/3-V_p_0/3-2/3 
       - Loop 15 is collaborative
       - Loop 16 is collaborative
 * Adding constraints: [it(17)=<it(15)* (1/23)+aux(5),it(17)=<it(15)* (1/23)+aux(6),it(15)+it(17)=< -V_zeros_0+11,it(15)+it(17)=< -V_zeros_0+11,aux(5)=< -V_bits_left_0/23+1/23,it(17)=<V_pr_limit/3-V_p_0/3-2/3,it(15)+it(16)+it(17)=< -V_zeros_0+V_zeros_0',it(15)+it(16)+it(17)=< -V_zeros_0+V_zeros_0',aux(6)=< -V_bits_left_0/23+V_bits_left_0'/23,it(17)=<V_pr_limit/3-V_p_0/3-V_pr_limit'/3+V_p_0'/3] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [15,16,17] 
Found a cycle in the non-final constraints
 Removed possibly redundant constraints to solve a cycle in the cost structure 
it(15)=<it(17)*23+it(16)*7+aux(1)
it(15)=<it(17)*23+it(16)*7+aux(2)
it(16)=<it(15)* (1/7)+aux(3)
it(16)+it(17)=<it(15)* (1/7)+aux(4)
it(17)=<it(15)* (1/23)+aux(5)
it(17)=<it(15)* (1/23)+aux(6)

#### Simplifying cost structure of phase [15,16,17] 

#### Cost of phase [15,16,17]:eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F) -> [eval_cf_decode_eol_bb1_in(V_ss_K',V_pr_limit',V_bits_left_0',V_zeros_0',V_p_0',B',C',D',E',F')] 
1*it(15)+1*it(16)+1*it(17)+0
  Such that:it(17) =< V_pr_limit/3-V_p_0/3
it(17) =< V_pr_limit/3-V_p_0/3-V_pr_limit'/3+V_p_0'/3
aux(7) =< V_pr_limit-V_p_0
aux(8) =< V_pr_limit-V_p_0-V_pr_limit'+V_p_0'
aux(9) =< -V_zeros_0+11
aux(10) =< -V_zeros_0+V_zeros_0'
it(16) =< aux(7)
it(17) =< aux(7)
it(16) =< aux(8)
it(17) =< aux(8)
it(15) =< aux(9)
it(16) =< aux(9)
it(17) =< aux(9)
it(15) =< aux(10)
it(16) =< aux(10)
it(17) =< aux(10)

#### Simplifying cost structure of chain [[15,16,17],19] 

#### Simplifying cost structure of CE 16 

#### Found solution for phase  [15,16,17] in the cache 

#### Cost of phase [15,16,17]:eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F) -> [eval_cf_decode_eol_bb1_in(V_ss_K',V_pr_limit',V_bits_left_0',V_zeros_0',V_p_0',B',C',D',E',F')] 
1*it(15)+1*it(16)+1*it(17)+0
  Such that:it(17) =< V_pr_limit/3-V_p_0/3
it(17) =< V_pr_limit/3-V_p_0/3-V_pr_limit'/3+V_p_0'/3
aux(7) =< V_pr_limit-V_p_0
aux(8) =< V_pr_limit-V_p_0-V_pr_limit'+V_p_0'
aux(9) =< -V_zeros_0+11
aux(10) =< -V_zeros_0+V_zeros_0'
it(16) =< aux(7)
it(17) =< aux(7)
it(16) =< aux(8)
it(17) =< aux(8)
it(15) =< aux(9)
it(16) =< aux(9)
it(17) =< aux(9)
it(15) =< aux(10)
it(16) =< aux(10)
it(17) =< aux(10)

#### Simplifying cost structure of chain [[15,16,17],18] 
 * Joined equivalent variables [aux(11),aux(9),aux(10)] into aux(11)

#### Cost of chains of eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F):
* Chain [[15,16,17],19]: 1*it(15)+1*it(16)+1*it(17)+0
  Such that:aux(7) =< V_pr_limit-V_p_0
it(17) =< V_pr_limit/3-V_p_0/3
aux(8) =< -V_bits_left_0/8-V_zeros_0/8+5/4
it(17) =< -V_bits_left_0/24-V_zeros_0/24+5/12
aux(10) =< -V_zeros_0+10
aux(9) =< -V_zeros_0+11
it(16) =< aux(7)
it(17) =< aux(7)
it(16) =< aux(8)
it(17) =< aux(8)
it(15) =< aux(9)
it(16) =< aux(9)
it(17) =< aux(9)
it(15) =< aux(10)
it(16) =< aux(10)
it(17) =< aux(10)

  with precondition: [B=2,9>=V_zeros_0,V_zeros_0>=0,10>=V_bits_left_0+V_zeros_0,V_p_0+30>=3*V_zeros_0+V_pr_limit,8*V_p_0+10>=8*V_pr_limit+V_bits_left_0+V_zeros_0] 

* Chain [[15,16,17],18]: 1*it(15)+1*it(16)+1*it(17)+0
  Such that:aux(7) =< V_pr_limit-V_p_0
it(17) =< V_pr_limit/3-V_p_0/3
aux(8) =< -V_p_0+F
it(17) =< -V_p_0/3+F/3
aux(11) =< -V_zeros_0+11
it(16) =< aux(7)
it(17) =< aux(7)
it(16) =< aux(8)
it(17) =< aux(8)
it(15) =< aux(11)
it(16) =< aux(11)
it(17) =< aux(11)

  with precondition: [B=3,V_ss_K=C,V_pr_limit=D,V_bits_left_0+V_zeros_0+8*F=8*V_p_0+E+11,10>=V_zeros_0,V_zeros_0>=0,V_bits_left_0+253>=23*V_zeros_0+E,E+11>=V_bits_left_0+V_zeros_0] 

* Chain [19]: 0
  with precondition: [B=2,0>=V_bits_left_0,10>=V_zeros_0,V_zeros_0>=0,V_p_0>=V_pr_limit] 


#### Simplifying cost structure of CE 24 

#### Computing cost of phase [21,22,23] 

#### Simplifying cost structure of CE 21 

#### Simplifying cost structure of CE 22 

#### Simplifying cost structure of CE 23 

#### Cost of loops [21,22,23] 

 * loop 21:eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B) -> [eval_cf_decode_eol_bb9_in(V_pr_limit',V_12',V_bits_left_3',V_p_3',B')] 
1
 * loop 22:eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B) -> [eval_cf_decode_eol_bb9_in(V_pr_limit',V_12',V_bits_left_3',V_p_3',B')] 
1
 * loop 23:eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B) -> [eval_cf_decode_eol_bb9_in(V_pr_limit',V_12',V_bits_left_3',V_p_3',B')] 
1
##### Pending set eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B)
* Psum in Loop 21: [it(21)=<1]
* Psum in Loop 22: [it(22)=<1]
* Psum in Loop 23: [it(23)=<1]

###### Computing sum for it(21)=<1  in Loop 21 
   - Applying inductive sum strategy 
     - head Candidate: V_bits_left_3 
       - Loop 22 adds a constant 7/1 
       - Loop 23 adds a constant 23/1 
     - head Candidate: -V_12+V_bits_left_3+1 
       - Loop 22 adds a constant 7/1 
       - Loop 23 adds a constant 23/1 
     - tail Candidate: V_bits_left_3 
       - Loop 22 adds a constant 7/1 
       - Loop 23 adds a constant 23/1 
     - tail Candidate: -V_12+V_bits_left_3+1 
       - Loop 22 adds a constant 7/1 
       - Loop 23 adds a constant 23/1 
 * Adding constraints: [it(21)=<it(23)*23+it(22)*7+aux(12),it(21)=<it(23)*23+it(22)*7+aux(13),it(21)=<it(23)*23+it(22)*7+aux(14),it(21)=<it(23)*23+it(22)*7+aux(15),aux(12)=<V_bits_left_3,aux(13)=< -V_12+V_bits_left_3+1,aux(14)=<V_bits_left_3-V_bits_left_3',aux(15)=< -V_12+V_bits_left_3+V_12'-V_bits_left_3'] 

##### Pending set eval_cf_decode_eol_0(V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B)
* Psum in Loop 22: [it(22)=<1]
* Psum in Loop 23: [it(23)=<1]

###### Computing sum for it(22)=<1  in Loop 22 
   - Applying inductive sum strategy 
     - head Candidate: -V_bits_left_3/7+2/7 
       - Loop 21 adds a constant 1/7 
       - Loop 23 is collaborative
     - head Candidate: V_12/7-V_bits_left_3/7 
       - Loop 21 adds a constant 1/7 
       - Loop 23 is collaborative
     - head Candidate: V_pr_limit-V_p_3 
       - Loop 21 is collaborative
       - Loop 23 is collaborative and bounds [it(23)] 
     - tail Candidate: -V_bits_left_3/7+2/7 
       - Loop 21 adds a constant 1/7 
       - Loop 23 is collaborative and bounds [it(23)] 
     - tail Candidate: V_12/7-V_bits_left_3/7 
       - Loop 21 adds a constant 1/7 
       - Loop 23 is collaborative and bounds [it(23)] 
     - tail Candidate: V_pr_limit-V_p_3 
       - Loop 21 is collaborative
       - Loop 23 is collaborative and bounds [it(23)] 
 * Adding constraints: [it(22)=<it(21)* (1/7)+aux(16),it(22)=<it(21)* (1/7)+aux(17),it(22)+it(23)=<it(21)* (1/7)+aux(18),it(22)+it(23)=<it(21)* (1/7)+aux(19),aux(16)=< -V_bits_left_3/7+2/7,aux(17)=<V_12/7-V_bits_left_3/7,it(22)+it(23)=<V_pr_limit-V_p_3,aux(18)=< -V_bits_left_3/7+V_bits_left_3'/7,aux(19)=<V_12/7-V_bits_left_3/7-V_12'/7+V_bits_left_3'/7,it(22)+it(23)=<V_pr_limit-V_p_3-V_pr_limit'+V_p_3'] 

##### Pending set eval_cf_decode_eol_0(V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B)
* Psum in Loop 23: [it(23)=<1]

###### Computing sum for it(23)=<1  in Loop 23 
   - Applying inductive sum strategy 
     - head Candidate: -V_bits_left_3/23+2/23 
       - Loop 21 adds a constant 1/23 
       - Loop 22 is collaborative
     - head Candidate: V_12/23-V_bits_left_3/23 
       - Loop 21 adds a constant 1/23 
       - Loop 22 is collaborative
     - head Candidate: V_pr_limit/3-V_p_3/3-2/3 
       - Loop 21 is collaborative
       - Loop 22 is collaborative
     - tail Candidate: -V_bits_left_3/23+2/23 
       - Loop 21 adds a constant 1/23 
       - Loop 22 is collaborative
     - tail Candidate: V_12/23-V_bits_left_3/23 
       - Loop 21 adds a constant 1/23 
       - Loop 22 is collaborative
     - tail Candidate: V_pr_limit/3-V_p_3/3-2/3 
       - Loop 21 is collaborative
       - Loop 22 is collaborative
 * Adding constraints: [it(23)=<it(21)* (1/23)+aux(20),it(23)=<it(21)* (1/23)+aux(21),it(23)=<it(21)* (1/23)+aux(22),it(23)=<it(21)* (1/23)+aux(23),aux(20)=< -V_bits_left_3/23+2/23,aux(21)=<V_12/23-V_bits_left_3/23,it(23)=<V_pr_limit/3-V_p_3/3-2/3,aux(22)=< -V_bits_left_3/23+V_bits_left_3'/23,aux(23)=<V_12/23-V_bits_left_3/23-V_12'/23+V_bits_left_3'/23,it(23)=<V_pr_limit/3-V_p_3/3-V_pr_limit'/3+V_p_3'/3] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [21,22,23] 
Found a cycle in the non-final constraints
 Removed possibly redundant constraints to solve a cycle in the cost structure 
it(22)=<it(21)* (1/7)+aux(16)
it(22)=<it(21)* (1/7)+aux(17)
it(22)+it(23)=<it(21)* (1/7)+aux(18)
it(22)+it(23)=<it(21)* (1/7)+aux(19)
it(23)=<it(21)* (1/23)+aux(20)
it(23)=<it(21)* (1/23)+aux(21)
it(23)=<it(21)* (1/23)+aux(22)
it(23)=<it(21)* (1/23)+aux(23)

#### Simplifying cost structure of phase [21,22,23] 

#### Cost of phase [21,22,23]:eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B) -> [eval_cf_decode_eol_bb9_in(V_pr_limit',V_12',V_bits_left_3',V_p_3',B')] 
1*it(21)+1*it(22)+1*it(23)+0
  Such that:it(23) =< V_pr_limit/3-V_p_3/3
it(23) =< V_pr_limit/3-V_p_3/3-V_pr_limit'/3+V_p_3'/3
aux(13) =< -V_12+V_bits_left_3+1
aux(15) =< -V_12+V_bits_left_3+V_12'-V_bits_left_3'
aux(12) =< V_bits_left_3
aux(14) =< V_bits_left_3-V_bits_left_3'
aux(24) =< V_pr_limit-V_p_3
aux(25) =< V_pr_limit-V_p_3-V_pr_limit'+V_p_3'
it(22) =< aux(24)
it(23) =< aux(24)
it(22) =< aux(25)
it(23) =< aux(25)
it(21) =< it(23)*23+it(22)*7+aux(15)
it(21) =< it(23)*23+it(22)*7+aux(14)
it(21) =< it(23)*23+it(22)*7+aux(13)
it(21) =< it(23)*23+it(22)*7+aux(12)

#### Simplifying cost structure of chain [[21,22,23],20] 
 * Renamed intermediate variables: 
[ (ch([[21,22,23],20]),aux(24))>>s(1), (ch([[21,22,23],20]),it(23))>>s(2), (ch([[21,22,23],20]),aux(13))>>s(3), (ch([[21,22,23],20]),aux(12))>>s(4), (ch([[21,22,23],20]),it(22))>>s(5), (ch([[21,22,23],20]),it(21))>>s(6)]

#### Cost of chains of eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B):
* Chain [[21,22,23],20]: 1*it(21)+1*it(22)+1*it(23)+0
  Such that:aux(24) =< V_pr_limit-V_p_3
it(23) =< V_pr_limit/3-V_p_3/3
aux(13) =< -V_12+V_bits_left_3+1
aux(12) =< V_bits_left_3
it(22) =< aux(24)
it(23) =< aux(24)
it(21) =< it(23)*23+it(22)*7+aux(13)
it(21) =< it(23)*23+it(22)*7+aux(12)

  with precondition: [B=2,2>=V_12,V_12>=1] 

* Chain [20]: 0
  with precondition: [B=2,2>=V_12,V_12>=1,V_p_3>=V_pr_limit,V_12>=V_bits_left_3+1] 

 * Renamed intermediate variables: 
[ (eq(26,1),s(1))>>s(7), (eq(26,1),s(2))>>s(8), (eq(26,1),s(3))>>s(9), (eq(26,1),s(4))>>s(10), (eq(26,1),s(5))>>s(11), (eq(26,1),s(6))>>s(12)]

#### Simplifying cost structure of CE 26 
 * Joined equivalent variables [aux(26),s(9),s(10)] into aux(26)
 * Renamed intermediate variables: 
[ (eq(25,1),s(1))>>s(13), (eq(25,1),s(2))>>s(14), (eq(25,1),s(3))>>s(15), (eq(25,1),s(4))>>s(16), (eq(25,1),s(5))>>s(17), (eq(25,1),s(6))>>s(18)]

#### Simplifying cost structure of CE 25 
 * Joined equivalent variables [aux(27),s(15),s(16)] into aux(27)

#### Cost of chains of eval_cf_decode_eol_bb8_in(V_ss_K,V_pr_limit,V_bits_left_0,V_p_0,B):
* Chain [25]: 1*s(8)+1*s(11)+1*s(12)+1
  Such that:s(7) =< V_pr_limit-V_p_0
s(8) =< V_pr_limit/3-V_p_0/3
aux(26) =< V_bits_left_0
s(11) =< s(7)
s(8) =< s(7)
s(12) =< s(8)*23+s(11)*7+aux(26)

  with precondition: [0>=V_ss_K] 

* Chain [24]: 1*s(14)+1*s(17)+1*s(18)+1
  Such that:s(13) =< V_pr_limit-V_p_0
s(14) =< V_pr_limit/3-V_p_0/3
aux(27) =< V_bits_left_0
s(17) =< s(13)
s(14) =< s(13)
s(18) =< s(14)*23+s(17)*7+aux(27)

  with precondition: [V_ss_K>=1] 


#### Simplifying cost structure of CE 29 
 * Renamed intermediate variables: 
[ (eq(27,1),s(7))>>s(19), (eq(27,1),s(8))>>s(20), (eq(27,1),aux(26))>>s(21), (eq(27,1),s(11))>>s(22), (eq(27,1),s(12))>>s(23)]

#### Simplifying cost structure of CE 27 
 * Renamed intermediate variables: 
[ (eq(28,1),s(13))>>s(24), (eq(28,1),s(14))>>s(25), (eq(28,1),aux(27))>>s(26), (eq(28,1),s(17))>>s(27), (eq(28,1),s(18))>>s(28)]

#### Simplifying cost structure of CE 28 

#### Cost of chains of loop_cont_eval_cf_decode_eol_bb1_in(G,A,B,C,D,E):
* Chain [28]: 0
  with precondition: [G=2] 

* Chain [27]: 1*s(20)+1*s(22)+1*s(23)+1
  Such that:s(19) =< B-D
s(20) =< B/3-D/3
s(21) =< C
s(22) =< s(19)
s(20) =< s(19)
s(23) =< s(20)*23+s(22)*7+s(21)

  with precondition: [G=3,0>=A] 

* Chain [26]: 1*s(25)+1*s(27)+1*s(28)+1
  Such that:s(24) =< B-D
s(25) =< B/3-D/3
s(26) =< C
s(27) =< s(24)
s(25) =< s(24)
s(28) =< s(25)*23+s(27)*7+s(26)

  with precondition: [G=3,A>=1] 


#### Simplifying cost structure of CE 30 
 * Renamed intermediate variables: 
[ (eq(31,1),aux(7))>>s(29), (eq(31,1),it(17))>>s(30), (eq(31,1),aux(8))>>s(31), (eq(31,1),aux(10))>>s(32), (eq(31,1),aux(9))>>s(33), (eq(31,1),it(16))>>s(34), (eq(31,1),it(15))>>s(35)]

#### Simplifying cost structure of CE 31 
 * Renamed intermediate variables: 
[ (eq(32,1),aux(7))>>s(36), (eq(32,1),it(17))>>s(37), (eq(32,1),aux(8))>>s(38), (eq(32,1),aux(11))>>s(39), (eq(32,1),it(16))>>s(40), (eq(32,1),it(15))>>s(41)]
 * Renamed intermediate variables: 
[ (eq(32,2),s(19))>>s(42), (eq(32,2),s(20))>>s(43), (eq(32,2),s(21))>>s(44), (eq(32,2),s(22))>>s(45), (eq(32,2),s(23))>>s(46)]

#### Simplifying cost structure of CE 32 
 * Joined equivalent variables [aux(28),s(39)] into aux(28)
 * Joined equivalent variables [aux(29),s(36),s(42)] into aux(29)
 * Renamed intermediate variables: 
[ (eq(33,1),aux(7))>>s(47), (eq(33,1),it(17))>>s(48), (eq(33,1),aux(8))>>s(49), (eq(33,1),aux(11))>>s(50), (eq(33,1),it(16))>>s(51), (eq(33,1),it(15))>>s(52)]
 * Renamed intermediate variables: 
[ (eq(33,2),s(24))>>s(53), (eq(33,2),s(25))>>s(54), (eq(33,2),s(26))>>s(55), (eq(33,2),s(27))>>s(56), (eq(33,2),s(28))>>s(57)]

#### Simplifying cost structure of CE 33 
 * Joined equivalent variables [aux(31),s(50)] into aux(31)
 * Joined equivalent variables [aux(32),s(47),s(53)] into aux(32)

#### Cost of chains of eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B):
* Chain [31]: 1*s(30)+1*s(34)+1*s(35)+1
  Such that:s(32) =< 10
s(33) =< 11
s(31) =< -V_ss_bits_left/8+5/4
s(30) =< -V_ss_bits_left/24+5/12
s(29) =< -V_pr_ptr+V_pr_limit
s(30) =< -V_pr_ptr/3+V_pr_limit/3
s(34) =< s(29)
s(30) =< s(29)
s(34) =< s(31)
s(30) =< s(31)
s(35) =< s(33)
s(34) =< s(33)
s(30) =< s(33)
s(35) =< s(32)
s(34) =< s(32)
s(30) =< s(32)

  with precondition: [10>=V_ss_bits_left,V_pr_ptr+30>=V_pr_limit,8*V_pr_ptr+10>=8*V_pr_limit+V_ss_bits_left] 

* Chain [30]: 1*s(37)+1*s(40)+1*s(41)+1*s(43)+1*s(45)+1*s(46)+2
  Such that:s(38) =< 33
s(44) =< V_ss_bits_left+253
aux(28) =< 11
aux(29) =< -V_pr_ptr+V_pr_limit
aux(30) =< -V_pr_ptr/3+V_pr_limit/3
s(37) =< aux(28)
s(37) =< aux(30)
s(43) =< aux(30)
s(45) =< aux(29)
s(43) =< aux(29)
s(46) =< s(43)*23+s(45)*7+s(44)
s(40) =< aux(29)
s(37) =< aux(29)
s(40) =< s(38)
s(37) =< s(38)
s(41) =< aux(28)
s(40) =< aux(28)

  with precondition: [0>=V_ss_K] 

* Chain [29]: 1*s(48)+1*s(51)+1*s(52)+1*s(54)+1*s(56)+1*s(57)+2
  Such that:s(49) =< 33
s(55) =< V_ss_bits_left+253
aux(31) =< 11
aux(32) =< -V_pr_ptr+V_pr_limit
aux(33) =< -V_pr_ptr/3+V_pr_limit/3
s(48) =< aux(31)
s(48) =< aux(33)
s(54) =< aux(33)
s(56) =< aux(32)
s(54) =< aux(32)
s(57) =< s(54)*23+s(56)*7+s(55)
s(51) =< aux(32)
s(48) =< aux(32)
s(51) =< s(49)
s(48) =< s(49)
s(52) =< aux(31)
s(51) =< aux(31)

  with precondition: [V_ss_K>=1] 


Closed-form bounds of eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B): 
-------------------------------------
* Chain [31] with precondition: [10>=V_ss_bits_left,V_pr_ptr+30>=V_pr_limit,8*V_pr_ptr+10>=8*V_pr_limit+V_ss_bits_left] 
    - Upper bound: 34 
    - Complexity: constant 
* Chain [30] with precondition: [0>=V_ss_K] 
    - Upper bound: nat(V_ss_bits_left+253)+57+nat(-V_pr_ptr+V_pr_limit)*8+nat(-V_pr_ptr/3+V_pr_limit/3)*24 
    - Complexity: n 
* Chain [29] with precondition: [V_ss_K>=1] 
    - Upper bound: nat(V_ss_bits_left+253)+57+nat(-V_pr_ptr+V_pr_limit)*8+nat(-V_pr_ptr/3+V_pr_limit/3)*24 
    - Complexity: n 

### Maximum cost of eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B): nat(V_ss_bits_left+253)+23+nat(-V_pr_ptr+V_pr_limit)*8+nat(-V_pr_ptr/3+V_pr_limit/3)*24+34 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 73 ms.
* Invariants computed in 55 ms.
   - Backward Invariants 25 ms.
   - Transitive Invariants 14 ms.
* Refinement performed in 92 ms.
* Termination proved in 28 ms.
* Upper bounds computed in 126 ms.
   - Equation cost structures 44 ms.
   - Phase cost structures 52 ms.
   - Chain cost structures 30 ms.
   - Solving cost expressions 4 ms.
* Total analysis performed in 442 ms.


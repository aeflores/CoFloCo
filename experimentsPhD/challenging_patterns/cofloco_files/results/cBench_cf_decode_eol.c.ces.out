Warning: Ignored call to eval_cf_decode_eol_stop/1 in equation eval_cf_decode_eol_bb13_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_cf_decode_eol_bb1_in/10,eval_cf_decode_eol_bb2_in/10,eval_cf_decode_eol_bb3_in/10,eval_cf_decode_eol_bb4_in/10,eval_cf_decode_eol_bb5_in/10,eval_cf_decode_eol_bb6_in/10,eval_cf_decode_eol_bb7_in/12]
1. non_recursive  : [eval_cf_decode_eol_bb13_in/1]
2. recursive  : [eval_cf_decode_eol_bb10_in/5,eval_cf_decode_eol_bb11_in/5,eval_cf_decode_eol_bb12_in/5,eval_cf_decode_eol_bb14_in/5,eval_cf_decode_eol_bb15_in/7,eval_cf_decode_eol_bb9_in/5]
3. non_recursive  : [loop_cont_eval_cf_decode_eol_bb9_in/2]
4. non_recursive  : [eval_cf_decode_eol_34/5]
5. non_recursive  : [eval_cf_decode_eol_33/5]
6. non_recursive  : [eval_cf_decode_eol_32/5]
7. non_recursive  : [eval_cf_decode_eol_31/5]
8. non_recursive  : [eval_cf_decode_eol_30/5]
9. non_recursive  : [eval_cf_decode_eol_29/5]
10. non_recursive  : [eval_cf_decode_eol_28/5]
11. non_recursive  : [eval_cf_decode_eol_bb8_in/5]
12. non_recursive  : [loop_cont_eval_cf_decode_eol_bb1_in/6]
13. non_recursive  : [eval_cf_decode_eol_15/5]
14. non_recursive  : [eval_cf_decode_eol_14/5]
15. non_recursive  : [eval_cf_decode_eol_13/5]
16. non_recursive  : [eval_cf_decode_eol_12/5]
17. non_recursive  : [eval_cf_decode_eol_11/5]
18. non_recursive  : [eval_cf_decode_eol_10/5]
19. non_recursive  : [eval_cf_decode_eol_9/5]
20. non_recursive  : [eval_cf_decode_eol_8/5]
21. non_recursive  : [eval_cf_decode_eol_7/5]
22. non_recursive  : [eval_cf_decode_eol_6/5]
23. non_recursive  : [eval_cf_decode_eol_5/5]
24. non_recursive  : [eval_cf_decode_eol_4/5]
25. non_recursive  : [eval_cf_decode_eol_3/5]
26. non_recursive  : [eval_cf_decode_eol_2/5]
27. non_recursive  : [eval_cf_decode_eol_1/5]
28. non_recursive  : [eval_cf_decode_eol_0/5]
29. non_recursive  : [eval_cf_decode_eol_bb0_in/5]
30. non_recursive  : [eval_cf_decode_eol_start/6]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_cf_decode_eol_bb1_in/10
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into eval_cf_decode_eol_bb9_in/5
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_cf_decode_eol_34/5
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into eval_cf_decode_eol_bb8_in/5
12. SCC is partially evaluated into loop_cont_eval_cf_decode_eol_bb1_in/6
13. SCC is partially evaluated into eval_cf_decode_eol_15/5
14. SCC is completely evaluated into other SCCs
15. SCC is completely evaluated into other SCCs
16. SCC is completely evaluated into other SCCs
17. SCC is completely evaluated into other SCCs
18. SCC is completely evaluated into other SCCs
19. SCC is completely evaluated into other SCCs
20. SCC is completely evaluated into other SCCs
21. SCC is completely evaluated into other SCCs
22. SCC is completely evaluated into other SCCs
23. SCC is completely evaluated into other SCCs
24. SCC is completely evaluated into other SCCs
25. SCC is completely evaluated into other SCCs
26. SCC is completely evaluated into other SCCs
27. SCC is completely evaluated into other SCCs
28. SCC is completely evaluated into other SCCs
29. SCC is completely evaluated into other SCCs
30. SCC is partially evaluated into eval_cf_decode_eol_start/6

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_cf_decode_eol_bb1_in/10 
* CE 7 is refined into CE [17] 
* CE 5 is refined into CE [18] 
* CE 6 is refined into CE [19] 
* CE 4 is refined into CE [20] 
* CE 3 is refined into CE [21] 


#### Refined cost equations eval_cf_decode_eol_bb1_in/10 
* CE 17: eval_cf_decode_eol_bb1_in(A,B,C,D,E,F,A,B,C,E) = 0
     [D>=11,F=3] 
* CE 18: eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F) = 0
     [V_p_0>=V_pr_limit,V_zeros_0>=0,10>=V_zeros_0,0>=V_bits_left_0,B=2] 
* CE 19: eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F) = 1+ eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,G,H,V_p_0,B,C,D,E,F)
     [V_zeros_0>=0,V_bits_left_0>=1,10>=V_zeros_0,V_zeros_0+1=H,V_bits_left_0=G+1] 
* CE 20: eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F) = 1+ eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,G,H,I,B,C,D,E,F)
     [V_pr_limit>=V_p_0+1,V_p_0+2>=V_pr_limit,V_zeros_0>=0,10>=V_zeros_0,0>=V_bits_left_0,V_p_0+1=I,V_zeros_0+1=H,V_bits_left_0+7=G] 
* CE 21: eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F) = 1+ eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,G,H,I,B,C,D,E,F)
     [V_pr_limit>=V_p_0+3,V_zeros_0>=0,10>=V_zeros_0,0>=V_bits_left_0,V_p_0+3=I,V_zeros_0+1=H,V_bits_left_0+23=G] 

### Cost equations --> "Loop" of eval_cf_decode_eol_bb1_in/10 
* CEs [19] --> Loop 17 
* CEs [20] --> Loop 18 
* CEs [21] --> Loop 19 
* CEs [17] --> Loop 20 
* CEs [18] --> Loop 21 

#### Loops of eval_cf_decode_eol_bb1_in/10 
* Loop 17: eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F)->  eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0',V_zeros_0',V_p_0,B,C,D,E,F)
                  [V_zeros_0>=0,V_bits_left_0>=1,10>=V_zeros_0,V_zeros_0+1=V_zeros_0',V_bits_left_0=V_bits_left_0'+1] 
* Loop 18: eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F)->  eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0',V_zeros_0',V_p_0',B,C,D,E,F)
                  [V_pr_limit>=V_p_0+1,V_p_0+2>=V_pr_limit,V_zeros_0>=0,10>=V_zeros_0,0>=V_bits_left_0,V_p_0+1=V_p_0',V_zeros_0+1=V_zeros_0',V_bits_left_0+7=V_bits_left_0'] 
* Loop 19: eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F)->  eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0',V_zeros_0',V_p_0',B,C,D,E,F)
                  [V_pr_limit>=V_p_0+3,V_zeros_0>=0,10>=V_zeros_0,0>=V_bits_left_0,V_p_0+3=V_p_0',V_zeros_0+1=V_zeros_0',V_bits_left_0+23=V_bits_left_0'] 
* Loop 20: eval_cf_decode_eol_bb1_in(A,B,C,D,E,F,A,B,C,E) [D>=11,F=3] 
* Loop 21: eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F) [V_p_0>=V_pr_limit,V_zeros_0>=0,10>=V_zeros_0,0>=V_bits_left_0,B=2] 

### Ranking functions of CR eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F) 
* RF of phase [17,18,19]: [-V_zeros_0+11]

#### Partial ranking functions of CR eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F) 
* Partial RF of phase [17,18,19]:
  - RF of loop [17:1]:
    V_bits_left_0 depends on loops [18:1,19:1] 
  - RF of loop [17:1,18:1,19:1]:
    -V_zeros_0+11
  - RF of loop [18:1]:
    -V_bits_left_0/7+1/7 depends on loops [17:1] 
    V_pr_limit-V_p_0
  - RF of loop [19:1]:
    -V_bits_left_0/23+1/23 depends on loops [17:1] 
    V_pr_limit/3-V_p_0/3-2/3

Discarded unfeasible chain [[17,18,19]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F) 
* [[17,18,19],21]
* [[17,18,19],20]
* [21]


### Merging Chains  eval_cf_decode_eol_bb1_in/10 into  External patterns of execution 
* [[21]] --> 1 
* [[21,[17,18,19]]] --> 2 
* [[20,[17,18,19]]] --> 3 


### Specialization of cost equations eval_cf_decode_eol_bb9_in/5 
* CE 16 is refined into CE [22] 
* CE 14 is refined into CE [23] 
* CE 13 is refined into CE [24] 
* CE 15 is refined into CE [25] 


#### Refined cost equations eval_cf_decode_eol_bb9_in/5 
* CE 22: eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B) = 1+ eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,C,V_p_3,D)
     [V_bits_left_3>=V_12,V_12>=1,2>=V_12,V_bits_left_3=C+1,D=2,B=2] 
* CE 23: eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B) = 1+ eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,C,D,E)
     [V_pr_limit>=V_p_3+1,V_12>=V_bits_left_3+1,V_p_3+2>=V_pr_limit,V_12>=1,2>=V_12,V_p_3+1=D,V_bits_left_3+7=C,E=2,B=2] 
* CE 24: eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B) = 1+ eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,C,D,E)
     [V_pr_limit>=V_p_3+3,V_12>=V_bits_left_3+1,V_12>=1,2>=V_12,V_p_3+3=D,V_bits_left_3+23=C,E=2,B=2] 
* CE 25: eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B) = 0
     [V_12>=V_bits_left_3+1,V_p_3>=V_pr_limit,V_12>=1,2>=V_12,B=2] 

### Cost equations --> "Loop" of eval_cf_decode_eol_bb9_in/5 
* CEs [25] --> Loop 22 
* CEs [22] --> Loop 23 
* CEs [23] --> Loop 24 
* CEs [24] --> Loop 25 

#### Loops of eval_cf_decode_eol_bb9_in/5 
* Loop 22: eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B) [V_12>=V_bits_left_3+1,V_p_3>=V_pr_limit,V_12>=1,2>=V_12,B=2] 
* Loop 23: eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B)->  eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3',V_p_3,B')
                  [V_bits_left_3>=V_12,V_12>=1,2>=V_12,V_bits_left_3=V_bits_left_3'+1,B'=2,B=2] 
* Loop 24: eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B)->  eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3',V_p_3',B')
                  [V_pr_limit>=V_p_3+1,V_12>=V_bits_left_3+1,V_p_3+2>=V_pr_limit,V_12>=1,2>=V_12,V_p_3+1=V_p_3',V_bits_left_3+7=V_bits_left_3',B'=2,B=2] 
* Loop 25: eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B)->  eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3',V_p_3',B')
                  [V_pr_limit>=V_p_3+3,V_12>=V_bits_left_3+1,V_12>=1,2>=V_12,V_p_3+3=V_p_3',V_bits_left_3+23=V_bits_left_3',B'=2,B=2] 

### Ranking functions of CR eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B) 

#### Partial ranking functions of CR eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B) 
* Partial RF of phase [23,24,25]:
  - RF of loop [23:1]:
    -V_12+V_bits_left_3+1 depends on loops [24:1,25:1] 
    V_bits_left_3 depends on loops [24:1,25:1] 
  - RF of loop [24:1]:
    V_12/7-V_bits_left_3/7 depends on loops [23:1] 
    -V_bits_left_3/7+2/7 depends on loops [23:1] 
    V_pr_limit-V_p_3
  - RF of loop [25:1]:
    V_12/23-V_bits_left_3/23 depends on loops [23:1] 
    -V_bits_left_3/23+2/23 depends on loops [23:1] 
    V_pr_limit/3-V_p_3/3-2/3

Discarded unfeasible chain [[23,24,25]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B) 
* [[23,24,25],22]
* [22]


### Merging Chains  eval_cf_decode_eol_bb9_in/5 into  External patterns of execution 
* [[22,[23,24,25]]] --> 1 
* [[22]] --> 2 


### Specialization of cost equations eval_cf_decode_eol_34/5 
* CE 12 is refined into CE [26,27] 


#### Refined cost equations eval_cf_decode_eol_34/5 
* CE 26: eval_cf_decode_eol_34(V_pr_limit,V_bits_left_0,V_p_0,V_12,B) = 1+ eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_0,V_p_0,C):1
     [V_12>=1,2>=V_12,C=2] 
* CE 27: eval_cf_decode_eol_34(V_pr_limit,V_bits_left_0,V_p_0,V_12,B) = 1+ eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_0,V_p_0,C):2
     [V_12>=V_bits_left_0+1,V_p_0>=V_pr_limit,V_12>=1,2>=V_12,C=2] 

### Cost equations --> "Loop" of eval_cf_decode_eol_34/5 
* CEs [27] --> Loop 26 
* CEs [26] --> Loop 27 

#### Loops of eval_cf_decode_eol_34/5 
* Loop 26: eval_cf_decode_eol_34(V_pr_limit,V_bits_left_0,V_p_0,V_12,B) [V_12>=V_bits_left_0+1,V_p_0>=V_pr_limit,V_12>=1,2>=V_12] 
* Loop 27: eval_cf_decode_eol_34(V_pr_limit,V_bits_left_0,V_p_0,V_12,B) [V_12>=1,2>=V_12] 

### Ranking functions of CR eval_cf_decode_eol_34(V_pr_limit,V_bits_left_0,V_p_0,V_12,B) 

#### Partial ranking functions of CR eval_cf_decode_eol_34(V_pr_limit,V_bits_left_0,V_p_0,V_12,B) 


### Resulting Chains:eval_cf_decode_eol_34(V_pr_limit,V_bits_left_0,V_p_0,V_12,B) 
* [27]
* [26]


### Merging Chains  eval_cf_decode_eol_34/5 into  External patterns of execution 
* [[27]] --> 1 
* [[26]] --> 2 


### Specialization of cost equations eval_cf_decode_eol_bb8_in/5 
* CE 10 is refined into CE [28,29] 
* CE 11 is refined into CE [30,31] 


#### Refined cost equations eval_cf_decode_eol_bb8_in/5 
* CE 28: eval_cf_decode_eol_bb8_in(V_ss_K,V_pr_limit,V_bits_left_0,V_p_0,B) = 0+ eval_cf_decode_eol_34(V_pr_limit,V_bits_left_0,V_p_0,C,B):1
     [V_ss_K>=1,C=2] 
* CE 29: eval_cf_decode_eol_bb8_in(V_ss_K,V_pr_limit,V_bits_left_0,V_p_0,B) = 0+ eval_cf_decode_eol_34(V_pr_limit,V_bits_left_0,V_p_0,C,B):2
     [V_p_0>=V_pr_limit,V_ss_K>=1,1>=V_bits_left_0,C=2] 
* CE 30: eval_cf_decode_eol_bb8_in(V_ss_K,V_pr_limit,V_bits_left_0,V_p_0,B) = 0+ eval_cf_decode_eol_34(V_pr_limit,V_bits_left_0,V_p_0,C,B):1
     [0>=V_ss_K,C=1] 
* CE 31: eval_cf_decode_eol_bb8_in(V_ss_K,V_pr_limit,V_bits_left_0,V_p_0,B) = 0+ eval_cf_decode_eol_34(V_pr_limit,V_bits_left_0,V_p_0,C,B):2
     [V_p_0>=V_pr_limit,0>=V_bits_left_0,0>=V_ss_K,C=1] 

### Cost equations --> "Loop" of eval_cf_decode_eol_bb8_in/5 
* CEs [28] --> Loop 28 
* CEs [29] --> Loop 29 
* CEs [31] --> Loop 30 
* CEs [30] --> Loop 31 

#### Loops of eval_cf_decode_eol_bb8_in/5 
* Loop 28: eval_cf_decode_eol_bb8_in(V_ss_K,V_pr_limit,V_bits_left_0,V_p_0,B) [V_ss_K>=1] 
* Loop 29: eval_cf_decode_eol_bb8_in(V_ss_K,V_pr_limit,V_bits_left_0,V_p_0,B) [V_p_0>=V_pr_limit,V_ss_K>=1,1>=V_bits_left_0] 
* Loop 30: eval_cf_decode_eol_bb8_in(V_ss_K,V_pr_limit,V_bits_left_0,V_p_0,B) [V_p_0>=V_pr_limit,0>=V_bits_left_0,0>=V_ss_K] 
* Loop 31: eval_cf_decode_eol_bb8_in(V_ss_K,V_pr_limit,V_bits_left_0,V_p_0,B) [0>=V_ss_K] 

### Ranking functions of CR eval_cf_decode_eol_bb8_in(V_ss_K,V_pr_limit,V_bits_left_0,V_p_0,B) 

#### Partial ranking functions of CR eval_cf_decode_eol_bb8_in(V_ss_K,V_pr_limit,V_bits_left_0,V_p_0,B) 


### Resulting Chains:eval_cf_decode_eol_bb8_in(V_ss_K,V_pr_limit,V_bits_left_0,V_p_0,B) 
* [31]
* [30]
* [29]
* [28]


### Merging Chains  eval_cf_decode_eol_bb8_in/5 into  External patterns of execution 
* [[31]] --> 1 
* [[30]] --> 2 
* [[29]] --> 3 
* [[28]] --> 4 


### Specialization of cost equations loop_cont_eval_cf_decode_eol_bb1_in/6 
* CE 8 is refined into CE [32,33,34,35] 
* CE 9 is refined into CE [36] 


#### Refined cost equations loop_cont_eval_cf_decode_eol_bb1_in/6 
* CE 32: loop_cont_eval_cf_decode_eol_bb1_in(G,A,B,C,D,E) = 0+ eval_cf_decode_eol_bb8_in(A,B,C,D,E):1
     [0>=A,G=3] 
* CE 33: loop_cont_eval_cf_decode_eol_bb1_in(G,A,B,C,D,E) = 0+ eval_cf_decode_eol_bb8_in(A,B,C,D,E):2
     [D>=B,0>=C,0>=A,G=3] 
* CE 34: loop_cont_eval_cf_decode_eol_bb1_in(G,A,B,C,D,E) = 0+ eval_cf_decode_eol_bb8_in(A,B,C,D,E):3
     [D>=B,A>=1,1>=C,G=3] 
* CE 35: loop_cont_eval_cf_decode_eol_bb1_in(G,A,B,C,D,E) = 0+ eval_cf_decode_eol_bb8_in(A,B,C,D,E):4
     [A>=1,G=3] 
* CE 36: loop_cont_eval_cf_decode_eol_bb1_in(G,A,B,C,D,E) = 0
     [G=2] 

### Cost equations --> "Loop" of loop_cont_eval_cf_decode_eol_bb1_in/6 
* CEs [35] --> Loop 32 
* CEs [34] --> Loop 33 
* CEs [33] --> Loop 34 
* CEs [32] --> Loop 35 
* CEs [36] --> Loop 36 

#### Loops of loop_cont_eval_cf_decode_eol_bb1_in/6 
* Loop 32: loop_cont_eval_cf_decode_eol_bb1_in(G,A,B,C,D,E) [A>=1,G=3] 
* Loop 33: loop_cont_eval_cf_decode_eol_bb1_in(G,A,B,C,D,E) [D>=B,A>=1,1>=C,G=3] 
* Loop 34: loop_cont_eval_cf_decode_eol_bb1_in(G,A,B,C,D,E) [D>=B,0>=C,0>=A,G=3] 
* Loop 35: loop_cont_eval_cf_decode_eol_bb1_in(G,A,B,C,D,E) [0>=A,G=3] 
* Loop 36: loop_cont_eval_cf_decode_eol_bb1_in(G,A,B,C,D,E) [G=2] 

### Ranking functions of CR loop_cont_eval_cf_decode_eol_bb1_in(G,A,B,C,D,E) 

#### Partial ranking functions of CR loop_cont_eval_cf_decode_eol_bb1_in(G,A,B,C,D,E) 


### Resulting Chains:loop_cont_eval_cf_decode_eol_bb1_in(G,A,B,C,D,E) 
* [36]
* [35]
* [34]
* [33]
* [32]


### Merging Chains  loop_cont_eval_cf_decode_eol_bb1_in/6 into  External patterns of execution 
* [[36]] --> 1 
* [[35]] --> 2 
* [[34]] --> 3 
* [[33]] --> 4 
* [[32]] --> 5 


### Specialization of cost equations eval_cf_decode_eol_15/5 
* CE 2 is refined into CE [37,38,39,40,41,42] 


#### Refined cost equations eval_cf_decode_eol_15/5 
* CE 37: eval_cf_decode_eol_15(V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) = 1+ eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_ss_bits_left,C,V_pr_ptr,D,E,F,G,H):1+ loop_cont_eval_cf_decode_eol_bb1_in(I,E,F,G,H,B):1
     [V_pr_ptr>=V_pr_limit,0>=V_ss_bits_left,I=2,D=2,C=0] 
* CE 38: eval_cf_decode_eol_15(V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) = 1+ eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_ss_bits_left,C,V_pr_ptr,D,E,F,G,H):2+ loop_cont_eval_cf_decode_eol_bb1_in(I,E,F,G,H,B):1
     [8*V_pr_ptr+10>=8*V_pr_limit+V_ss_bits_left,V_pr_ptr+30>=V_pr_limit,10>=V_ss_bits_left,I=2,D=2,C=0] 
* CE 39: eval_cf_decode_eol_15(V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) = 1+ eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_ss_bits_left,C,V_pr_ptr,D,V_ss_K,V_pr_limit,E,F):3+ loop_cont_eval_cf_decode_eol_bb1_in(G,V_ss_K,V_pr_limit,E,H,B):2
     [V_ss_bits_left+253>=E,E+11>=V_ss_bits_left,0>=V_ss_K,E+8*V_pr_ptr+11=8*H+V_ss_bits_left,E+8*V_pr_ptr+11=8*F+V_ss_bits_left,G=3,D=3,C=0] 
* CE 40: eval_cf_decode_eol_15(V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) = 1+ eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,C,D,V_pr_ptr,E,V_ss_K,V_pr_limit,F,G):3+ loop_cont_eval_cf_decode_eol_bb1_in(H,V_ss_K,V_pr_limit,F,G,B):3
     [V_pr_ptr+33>=G,G>=V_pr_limit,G>=V_pr_ptr,0>=F,0>=V_ss_K,F+8*V_pr_ptr+11=8*G+C,F+8*V_pr_ptr+11=8*G+V_ss_bits_left,H=3,E=3,D=0] 
* CE 41: eval_cf_decode_eol_15(V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) = 1+ eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,C,D,V_pr_ptr,E,V_ss_K,V_pr_limit,F,G):3+ loop_cont_eval_cf_decode_eol_bb1_in(H,V_ss_K,V_pr_limit,F,G,B):4
     [V_pr_ptr+33>=G,G>=V_pr_limit,G>=V_pr_ptr,V_ss_K>=1,1>=F,F+8*V_pr_ptr+11=8*G+C,F+8*V_pr_ptr+11=8*G+V_ss_bits_left,H=3,E=3,D=0] 
* CE 42: eval_cf_decode_eol_15(V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) = 1+ eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_ss_bits_left,C,V_pr_ptr,D,V_ss_K,V_pr_limit,E,F):3+ loop_cont_eval_cf_decode_eol_bb1_in(G,V_ss_K,V_pr_limit,E,H,B):5
     [V_ss_bits_left+253>=E,E+11>=V_ss_bits_left,V_ss_K>=1,E+8*V_pr_ptr+11=8*H+V_ss_bits_left,E+8*V_pr_ptr+11=8*F+V_ss_bits_left,G=3,D=3,C=0] 

### Cost equations --> "Loop" of eval_cf_decode_eol_15/5 
* CEs [42] --> Loop 37 
* CEs [39] --> Loop 38 
* CEs [37] --> Loop 39 
* CEs [38] --> Loop 40 
* CEs [40] --> Loop 41 
* CEs [41] --> Loop 42 

#### Loops of eval_cf_decode_eol_15/5 
* Loop 37: eval_cf_decode_eol_15(V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) [V_ss_K>=1] 
* Loop 38: eval_cf_decode_eol_15(V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) [0>=V_ss_K] 
* Loop 39: eval_cf_decode_eol_15(V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) [V_pr_ptr>=V_pr_limit,0>=V_ss_bits_left] 
* Loop 40: eval_cf_decode_eol_15(V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) [8*V_pr_ptr+10>=8*V_pr_limit+V_ss_bits_left,V_pr_ptr+30>=V_pr_limit,10>=V_ss_bits_left] 
* Loop 41: eval_cf_decode_eol_15(V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) [8*V_pr_ptr+11>=8*V_pr_limit+V_ss_bits_left,V_pr_ptr+33>=V_pr_limit,0>=V_ss_K,11>=V_ss_bits_left] 
* Loop 42: eval_cf_decode_eol_15(V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) [8*V_pr_ptr+12>=8*V_pr_limit+V_ss_bits_left,V_pr_ptr+33>=V_pr_limit,V_ss_K>=1,12>=V_ss_bits_left] 

### Ranking functions of CR eval_cf_decode_eol_15(V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) 

#### Partial ranking functions of CR eval_cf_decode_eol_15(V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) 


### Resulting Chains:eval_cf_decode_eol_15(V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) 
* [42]
* [41]
* [40]
* [39]
* [38]
* [37]


### Merging Chains  eval_cf_decode_eol_15/5 into  External patterns of execution 
* [[42]] --> 1 
* [[41]] --> 2 
* [[40]] --> 3 
* [[39]] --> 4 
* [[38]] --> 5 
* [[37]] --> 6 


### Specialization of cost equations eval_cf_decode_eol_start/6 
* CE 1 is refined into CE [43,44,45,46,47,48] 


#### Refined cost equations eval_cf_decode_eol_start/6 
* CE 43: eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) = 0+ eval_cf_decode_eol_15(V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B):1
     [8*V_pr_ptr+12>=8*V_pr_limit+V_ss_bits_left,V_pr_ptr+33>=V_pr_limit,V_ss_K>=1,12>=V_ss_bits_left] 
* CE 44: eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) = 0+ eval_cf_decode_eol_15(V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B):2
     [8*V_pr_ptr+11>=8*V_pr_limit+V_ss_bits_left,V_pr_ptr+33>=V_pr_limit,0>=V_ss_K,11>=V_ss_bits_left] 
* CE 45: eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) = 0+ eval_cf_decode_eol_15(V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B):3
     [8*V_pr_ptr+10>=8*V_pr_limit+V_ss_bits_left,V_pr_ptr+30>=V_pr_limit,10>=V_ss_bits_left] 
* CE 46: eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) = 0+ eval_cf_decode_eol_15(V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B):4
     [V_pr_ptr>=V_pr_limit,0>=V_ss_bits_left] 
* CE 47: eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) = 0+ eval_cf_decode_eol_15(V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B):5
     [0>=V_ss_K] 
* CE 48: eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) = 0+ eval_cf_decode_eol_15(V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B):6
     [V_ss_K>=1] 

### Cost equations --> "Loop" of eval_cf_decode_eol_start/6 
* CEs [48] --> Loop 43 
* CEs [47] --> Loop 44 
* CEs [46] --> Loop 45 
* CEs [45] --> Loop 46 
* CEs [44] --> Loop 47 
* CEs [43] --> Loop 48 

#### Loops of eval_cf_decode_eol_start/6 
* Loop 43: eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) [V_ss_K>=1] 
* Loop 44: eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) [0>=V_ss_K] 
* Loop 45: eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) [V_pr_ptr>=V_pr_limit,0>=V_ss_bits_left] 
* Loop 46: eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) [8*V_pr_ptr+10>=8*V_pr_limit+V_ss_bits_left,V_pr_ptr+30>=V_pr_limit,10>=V_ss_bits_left] 
* Loop 47: eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) [8*V_pr_ptr+11>=8*V_pr_limit+V_ss_bits_left,V_pr_ptr+33>=V_pr_limit,0>=V_ss_K,11>=V_ss_bits_left] 
* Loop 48: eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) [8*V_pr_ptr+12>=8*V_pr_limit+V_ss_bits_left,V_pr_ptr+33>=V_pr_limit,V_ss_K>=1,12>=V_ss_bits_left] 

### Ranking functions of CR eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) 

#### Partial ranking functions of CR eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) 


### Resulting Chains:eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) 
* [48]
* [47]
* [46]
* [45]
* [44]
* [43]


### Merging Chains  eval_cf_decode_eol_start/6 into  External patterns of execution 
* [[48]] --> 1 
* [[47]] --> 2 
* [[46]] --> 3 
* [[45]] --> 4 
* [[44]] --> 5 
* [[43]] --> 6 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 18 

#### Computing cost of phase [17,18,19] 

#### Simplifying cost structure of CE 19 

#### Simplifying cost structure of CE 20 

#### Simplifying cost structure of CE 21 

#### Cost of loops [17,18,19] 

 * loop 17:eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F) -> [eval_cf_decode_eol_bb1_in(V_ss_K',V_pr_limit',V_bits_left_0',V_zeros_0',V_p_0',B',C',D',E',F')] 
1
 * loop 18:eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F) -> [eval_cf_decode_eol_bb1_in(V_ss_K',V_pr_limit',V_bits_left_0',V_zeros_0',V_p_0',B',C',D',E',F')] 
1
 * loop 19:eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F) -> [eval_cf_decode_eol_bb1_in(V_ss_K',V_pr_limit',V_bits_left_0',V_zeros_0',V_p_0',B',C',D',E',F')] 
1
##### Pending set eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F)
* Psum in Loop 17: [it(17)=<1]
* Psum in Loop 18: [it(18)=<1]
* Psum in Loop 19: [it(19)=<1]

###### Computing sum for it(17)=<1  in Loop 17 
   - Applying inductive sum strategy 
     - head Candidate: -V_zeros_0+11 
       - Loop 18 is collaborative and bounds [it(18)] 
       - Loop 19 is collaborative and bounds [it(19)] 
     - head Candidate: -V_zeros_0+11 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_bits_left_0 
       - Loop 18 adds a constant 7/1 
       - Loop 19 adds a constant 23/1 
     - tail Candidate: -V_zeros_0+11 
       - Loop 18 is collaborative and bounds [it(18)] 
       - Loop 19 is collaborative and bounds [it(19)] 
     - tail Candidate: -V_zeros_0+11 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_bits_left_0 
       - Loop 18 adds a constant 7/1 
       - Loop 19 adds a constant 23/1 
 * Adding constraints: [it(17)=<it(19)*23+it(18)*7+aux(1),it(17)=<it(19)*23+it(18)*7+aux(2),it(17)+it(18)+it(19)=< -V_zeros_0+11,it(17)+it(18)+it(19)=< -V_zeros_0+11,aux(1)=<V_bits_left_0,it(17)+it(18)+it(19)=< -V_zeros_0+V_zeros_0',it(17)+it(18)+it(19)=< -V_zeros_0+V_zeros_0',aux(2)=<V_bits_left_0-V_bits_left_0'] 

##### Pending set eval_cf_decode_eol_0(V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B)
* Psum in Loop 18: [it(18)=<1]
* Psum in Loop 19: [it(19)=<1]

###### Computing sum for it(18)=<1  in Loop 18 
   - Applying inductive sum strategy 
     - head Candidate: -V_zeros_0+11 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -V_zeros_0+11 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -V_bits_left_0/7+1/7 
       - Loop 17 adds a constant 1/7 
       - Loop 19 is collaborative
     - head Candidate: V_pr_limit-V_p_0 
       - Loop 17 is collaborative
       - Loop 19 is collaborative and bounds [it(19)] 
     - tail Candidate: -V_zeros_0+11 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -V_zeros_0+11 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -V_bits_left_0/7+1/7 
       - Loop 17 adds a constant 1/7 
       - Loop 19 is collaborative and bounds [it(19)] 
     - tail Candidate: V_pr_limit-V_p_0 
       - Loop 17 is collaborative
       - Loop 19 is collaborative and bounds [it(19)] 
 * Adding constraints: [it(18)=<it(17)*(1/7)+aux(3),it(18)+it(19)=<it(17)*(1/7)+aux(4),it(17)+it(18)+it(19)=< -V_zeros_0+11,it(17)+it(18)+it(19)=< -V_zeros_0+11,aux(3)=< -V_bits_left_0/7+1/7,it(18)+it(19)=<V_pr_limit-V_p_0,it(17)+it(18)+it(19)=< -V_zeros_0+V_zeros_0',it(17)+it(18)+it(19)=< -V_zeros_0+V_zeros_0',aux(4)=< -V_bits_left_0/7+V_bits_left_0'/7,it(18)+it(19)=<V_pr_limit-V_p_0-V_pr_limit'+V_p_0'] 

##### Pending set eval_cf_decode_eol_0(V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B)
* Psum in Loop 19: [it(19)=<1]

###### Computing sum for it(19)=<1  in Loop 19 
   - Applying inductive sum strategy 
     - head Candidate: -V_zeros_0+11 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -V_zeros_0+11 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -V_bits_left_0/23+1/23 
       - Loop 17 adds a constant 1/23 
       - Loop 18 is collaborative
     - head Candidate: V_pr_limit/3-V_p_0/3-2/3 
       - Loop 17 is collaborative
       - Loop 18 is collaborative
     - tail Candidate: -V_zeros_0+11 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -V_zeros_0+11 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -V_bits_left_0/23+1/23 
       - Loop 17 adds a constant 1/23 
       - Loop 18 is collaborative
     - tail Candidate: V_pr_limit/3-V_p_0/3-2/3 
       - Loop 17 is collaborative
       - Loop 18 is collaborative
 * Adding constraints: [it(19)=<it(17)*(1/23)+aux(5),it(19)=<it(17)*(1/23)+aux(6),it(17)+it(18)+it(19)=< -V_zeros_0+11,it(17)+it(18)+it(19)=< -V_zeros_0+11,aux(5)=< -V_bits_left_0/23+1/23,it(19)=<V_pr_limit/3-V_p_0/3-2/3,it(17)+it(18)+it(19)=< -V_zeros_0+V_zeros_0',it(17)+it(18)+it(19)=< -V_zeros_0+V_zeros_0',aux(6)=< -V_bits_left_0/23+V_bits_left_0'/23,it(19)=<V_pr_limit/3-V_p_0/3-V_pr_limit'/3+V_p_0'/3] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [17,18,19] 
Found a cycle in the non-final constraints
 Removed possibly redundant constraints to solve a cycle in the cost structure 
it(17)=<it(19)*23+it(18)*7+aux(1)
it(17)=<it(19)*23+it(18)*7+aux(2)
it(18)=<it(17)*(1/7)+aux(3)
it(18)+it(19)=<it(17)*(1/7)+aux(4)
it(19)=<it(17)*(1/23)+aux(5)
it(19)=<it(17)*(1/23)+aux(6)

#### Simplifying cost structure of phase [17,18,19] 

#### Cost of phase [17,18,19]:eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F) -> [eval_cf_decode_eol_bb1_in(V_ss_K',V_pr_limit',V_bits_left_0',V_zeros_0',V_p_0',B',C',D',E',F')] 
1*it(17)+1*it(18)+1*it(19)+0
  Such that:it(19) =< V_pr_limit/3-V_p_0/3
it(19) =< V_pr_limit/3-V_p_0/3-V_pr_limit'/3+V_p_0'/3
aux(7) =< V_pr_limit-V_p_0
aux(8) =< V_pr_limit-V_p_0-V_pr_limit'+V_p_0'
aux(9) =< -V_zeros_0+11
aux(10) =< -V_zeros_0+V_zeros_0'
it(18) =< aux(7)
it(19) =< aux(7)
it(18) =< aux(8)
it(19) =< aux(8)
it(17) =< aux(9)
it(18) =< aux(9)
it(19) =< aux(9)
it(17) =< aux(10)
it(18) =< aux(10)
it(19) =< aux(10)

#### Simplifying cost structure of chain [[17,18,19],21] 
 * Joined equivalent variables [aux(11),aux(10)] into aux(11)

#### Simplifying cost structure of CE 17 

#### Found solution for phase  [17,18,19] in the cache 

#### Cost of phase [17,18,19]:eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F) -> [eval_cf_decode_eol_bb1_in(V_ss_K',V_pr_limit',V_bits_left_0',V_zeros_0',V_p_0',B',C',D',E',F')] 
1*it(17)+1*it(18)+1*it(19)+0
  Such that:it(19) =< V_pr_limit/3-V_p_0/3
it(19) =< V_pr_limit/3-V_p_0/3-V_pr_limit'/3+V_p_0'/3
aux(7) =< V_pr_limit-V_p_0
aux(8) =< V_pr_limit-V_p_0-V_pr_limit'+V_p_0'
aux(9) =< -V_zeros_0+11
aux(10) =< -V_zeros_0+V_zeros_0'
it(18) =< aux(7)
it(19) =< aux(7)
it(18) =< aux(8)
it(19) =< aux(8)
it(17) =< aux(9)
it(18) =< aux(9)
it(19) =< aux(9)
it(17) =< aux(10)
it(18) =< aux(10)
it(19) =< aux(10)

#### Simplifying cost structure of chain [[17,18,19],20] 
 * Joined equivalent variables [aux(12),aux(9),aux(10)] into aux(12)

#### Cost of chains of eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F):
* Chain [[17,18,19],21]: 1*it(17)+1*it(18)+1*it(19)+0
  Such that:aux(7) =< V_pr_limit-V_p_0
it(19) =< V_pr_limit/3-V_p_0/3
aux(8) =< -V_bits_left_0/8-V_zeros_0/8+5/4
it(19) =< -V_bits_left_0/24-V_zeros_0/24+5/12
aux(8) =< -3*V_zeros_0+30
aux(9) =< -V_zeros_0+11
aux(11) =< -V_zeros_0+10
it(19) =< aux(11)
it(18) =< aux(7)
it(19) =< aux(7)
it(18) =< aux(8)
it(19) =< aux(8)
it(17) =< aux(9)
it(18) =< aux(9)
it(19) =< aux(9)
it(17) =< aux(11)
it(18) =< aux(11)

  with precondition: [B=2,9>=V_zeros_0,V_zeros_0>=0,10>=V_bits_left_0+V_zeros_0,V_p_0+30>=3*V_zeros_0+V_pr_limit,8*V_p_0+10>=8*V_pr_limit+V_bits_left_0+V_zeros_0] 

* Chain [[17,18,19],20]: 1*it(17)+1*it(18)+1*it(19)+0
  Such that:aux(7) =< V_pr_limit-V_p_0
it(19) =< V_pr_limit/3-V_p_0/3
aux(8) =< -V_p_0+F
it(19) =< -V_p_0/3+F/3
aux(12) =< -V_zeros_0+11
it(18) =< aux(7)
it(19) =< aux(7)
it(18) =< aux(8)
it(19) =< aux(8)
it(17) =< aux(12)
it(18) =< aux(12)
it(19) =< aux(12)

  with precondition: [B=3,V_ss_K=C,V_pr_limit=D,V_bits_left_0+V_zeros_0+8*F=8*V_p_0+E+11,10>=V_zeros_0,V_zeros_0>=0,V_bits_left_0+253>=23*V_zeros_0+E,E+11>=V_bits_left_0+V_zeros_0] 

* Chain [21]: 0
  with precondition: [B=2,0>=V_bits_left_0,10>=V_zeros_0,V_zeros_0>=0,V_p_0>=V_pr_limit] 


#### Simplifying cost structure of CE 25 

#### Computing cost of phase [23,24,25] 

#### Simplifying cost structure of CE 22 

#### Simplifying cost structure of CE 23 

#### Simplifying cost structure of CE 24 

#### Cost of loops [23,24,25] 

 * loop 23:eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B) -> [eval_cf_decode_eol_bb9_in(V_pr_limit',V_12',V_bits_left_3',V_p_3',B')] 
1
 * loop 24:eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B) -> [eval_cf_decode_eol_bb9_in(V_pr_limit',V_12',V_bits_left_3',V_p_3',B')] 
1
 * loop 25:eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B) -> [eval_cf_decode_eol_bb9_in(V_pr_limit',V_12',V_bits_left_3',V_p_3',B')] 
1
##### Pending set eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B)
* Psum in Loop 23: [it(23)=<1]
* Psum in Loop 24: [it(24)=<1]
* Psum in Loop 25: [it(25)=<1]

###### Computing sum for it(23)=<1  in Loop 23 
   - Applying inductive sum strategy 
     - head Candidate: V_bits_left_3 
       - Loop 24 adds a constant 7/1 
       - Loop 25 adds a constant 23/1 
     - head Candidate: -V_12+V_bits_left_3+1 
       - Loop 24 adds a constant 7/1 
       - Loop 25 adds a constant 23/1 
     - tail Candidate: V_bits_left_3 
       - Loop 24 adds a constant 7/1 
       - Loop 25 adds a constant 23/1 
     - tail Candidate: -V_12+V_bits_left_3+1 
       - Loop 24 adds a constant 7/1 
       - Loop 25 adds a constant 23/1 
 * Adding constraints: [it(23)=<it(25)*23+it(24)*7+aux(13),it(23)=<it(25)*23+it(24)*7+aux(14),it(23)=<it(25)*23+it(24)*7+aux(15),it(23)=<it(25)*23+it(24)*7+aux(16),aux(13)=<V_bits_left_3,aux(14)=< -V_12+V_bits_left_3+1,aux(15)=<V_bits_left_3-V_bits_left_3',aux(16)=< -V_12+V_bits_left_3+V_12'-V_bits_left_3'] 

##### Pending set eval_cf_decode_eol_0(V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B)
* Psum in Loop 24: [it(24)=<1]
* Psum in Loop 25: [it(25)=<1]

###### Computing sum for it(24)=<1  in Loop 24 
   - Applying inductive sum strategy 
     - head Candidate: -V_bits_left_3/7+2/7 
       - Loop 23 adds a constant 1/7 
       - Loop 25 is collaborative
     - head Candidate: V_12/7-V_bits_left_3/7 
       - Loop 23 adds a constant 1/7 
       - Loop 25 is collaborative
     - head Candidate: V_pr_limit-V_p_3 
       - Loop 23 is collaborative
       - Loop 25 is collaborative and bounds [it(25)] 
     - tail Candidate: -V_bits_left_3/7+2/7 
       - Loop 23 adds a constant 1/7 
       - Loop 25 is collaborative and bounds [it(25)] 
     - tail Candidate: V_12/7-V_bits_left_3/7 
       - Loop 23 adds a constant 1/7 
       - Loop 25 is collaborative and bounds [it(25)] 
     - tail Candidate: V_pr_limit-V_p_3 
       - Loop 23 is collaborative
       - Loop 25 is collaborative and bounds [it(25)] 
 * Adding constraints: [it(24)=<it(23)*(1/7)+aux(17),it(24)=<it(23)*(1/7)+aux(18),it(24)+it(25)=<it(23)*(1/7)+aux(19),it(24)+it(25)=<it(23)*(1/7)+aux(20),aux(17)=< -V_bits_left_3/7+2/7,aux(18)=<V_12/7-V_bits_left_3/7,it(24)+it(25)=<V_pr_limit-V_p_3,aux(19)=< -V_bits_left_3/7+V_bits_left_3'/7,aux(20)=<V_12/7-V_bits_left_3/7-V_12'/7+V_bits_left_3'/7,it(24)+it(25)=<V_pr_limit-V_p_3-V_pr_limit'+V_p_3'] 

##### Pending set eval_cf_decode_eol_0(V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B)
* Psum in Loop 25: [it(25)=<1]

###### Computing sum for it(25)=<1  in Loop 25 
   - Applying inductive sum strategy 
     - head Candidate: -V_bits_left_3/23+2/23 
       - Loop 23 adds a constant 1/23 
       - Loop 24 is collaborative
     - head Candidate: V_12/23-V_bits_left_3/23 
       - Loop 23 adds a constant 1/23 
       - Loop 24 is collaborative
     - head Candidate: V_pr_limit/3-V_p_3/3-2/3 
       - Loop 23 is collaborative
       - Loop 24 is collaborative
     - tail Candidate: -V_bits_left_3/23+2/23 
       - Loop 23 adds a constant 1/23 
       - Loop 24 is collaborative
     - tail Candidate: V_12/23-V_bits_left_3/23 
       - Loop 23 adds a constant 1/23 
       - Loop 24 is collaborative
     - tail Candidate: V_pr_limit/3-V_p_3/3-2/3 
       - Loop 23 is collaborative
       - Loop 24 is collaborative
 * Adding constraints: [it(25)=<it(23)*(1/23)+aux(21),it(25)=<it(23)*(1/23)+aux(22),it(25)=<it(23)*(1/23)+aux(23),it(25)=<it(23)*(1/23)+aux(24),aux(21)=< -V_bits_left_3/23+2/23,aux(22)=<V_12/23-V_bits_left_3/23,it(25)=<V_pr_limit/3-V_p_3/3-2/3,aux(23)=< -V_bits_left_3/23+V_bits_left_3'/23,aux(24)=<V_12/23-V_bits_left_3/23-V_12'/23+V_bits_left_3'/23,it(25)=<V_pr_limit/3-V_p_3/3-V_pr_limit'/3+V_p_3'/3] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [23,24,25] 
Found a cycle in the non-final constraints
 Removed possibly redundant constraints to solve a cycle in the cost structure 
it(24)=<it(23)*(1/7)+aux(17)
it(24)=<it(23)*(1/7)+aux(18)
it(24)+it(25)=<it(23)*(1/7)+aux(19)
it(24)+it(25)=<it(23)*(1/7)+aux(20)
it(25)=<it(23)*(1/23)+aux(21)
it(25)=<it(23)*(1/23)+aux(22)
it(25)=<it(23)*(1/23)+aux(23)
it(25)=<it(23)*(1/23)+aux(24)

#### Simplifying cost structure of phase [23,24,25] 

#### Cost of phase [23,24,25]:eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B) -> [eval_cf_decode_eol_bb9_in(V_pr_limit',V_12',V_bits_left_3',V_p_3',B')] 
1*it(23)+1*it(24)+1*it(25)+0
  Such that:it(25) =< V_pr_limit/3-V_p_3/3
it(25) =< V_pr_limit/3-V_p_3/3-V_pr_limit'/3+V_p_3'/3
aux(14) =< -V_12+V_bits_left_3+1
aux(16) =< -V_12+V_bits_left_3+V_12'-V_bits_left_3'
aux(13) =< V_bits_left_3
aux(15) =< V_bits_left_3-V_bits_left_3'
aux(25) =< V_pr_limit-V_p_3
aux(26) =< V_pr_limit-V_p_3-V_pr_limit'+V_p_3'
it(24) =< aux(25)
it(25) =< aux(25)
it(24) =< aux(26)
it(25) =< aux(26)
it(23) =< it(25)*23+it(24)*7+aux(16)
it(23) =< it(25)*23+it(24)*7+aux(15)
it(23) =< it(25)*23+it(24)*7+aux(14)
it(23) =< it(25)*23+it(24)*7+aux(13)

#### Simplifying cost structure of chain [[23,24,25],22] 

#### Cost of chains of eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B):
* Chain [[23,24,25],22]: 1*it(23)+1*it(24)+1*it(25)+0
  Such that:aux(25) =< V_pr_limit-V_p_3
it(25) =< V_pr_limit/3-V_p_3/3
aux(14) =< -V_12+V_bits_left_3+1
aux(13) =< V_bits_left_3
it(24) =< aux(25)
it(25) =< aux(25)
it(23) =< it(25)*23+it(24)*7+aux(14)
it(23) =< it(25)*23+it(24)*7+aux(13)

  with precondition: [B=2,2>=V_12,V_12>=1] 

* Chain [22]: 0
  with precondition: [B=2,2>=V_12,V_12>=1,V_p_3>=V_pr_limit,V_12>=V_bits_left_3+1] 

 * Renamed intermediate variables: 
[(eq(26,1),aux(25))>>s(1),(eq(26,1),it(25))>>s(2),(eq(26,1),aux(14))>>s(3),(eq(26,1),aux(13))>>s(4),(eq(26,1),it(24))>>s(5),(eq(26,1),it(23))>>s(6)]

#### Simplifying cost structure of CE 26 

#### Simplifying cost structure of CE 27 

#### Cost of chains of eval_cf_decode_eol_34(V_pr_limit,V_bits_left_0,V_p_0,V_12,B):
* Chain [27]: 1*s(2)+1*s(5)+1*s(6)+1
  Such that:s(1) =< V_pr_limit-V_p_0
s(2) =< V_pr_limit/3-V_p_0/3
s(4) =< V_bits_left_0
s(3) =< V_bits_left_0-V_12+1
s(5) =< s(1)
s(2) =< s(1)
s(6) =< s(2)*23+s(5)*7+s(3)
s(6) =< s(2)*23+s(5)*7+s(4)

  with precondition: [2>=V_12,V_12>=1] 

* Chain [26]: 1
  with precondition: [2>=V_12,V_12>=1,V_p_0>=V_pr_limit,V_12>=V_bits_left_0+1] 

 * Renamed intermediate variables: 
[(eq(30,1),s(1))>>s(7),(eq(30,1),s(2))>>s(8),(eq(30,1),s(4))>>s(9),(eq(30,1),s(3))>>s(10),(eq(30,1),s(5))>>s(11),(eq(30,1),s(6))>>s(12)]

#### Simplifying cost structure of CE 30 
 * Joined equivalent variables [aux(27),s(9),s(10)] into aux(27)

#### Simplifying cost structure of CE 31 

#### Simplifying cost structure of CE 29 
 * Renamed intermediate variables: 
[(eq(28,1),s(1))>>s(13),(eq(28,1),s(2))>>s(14),(eq(28,1),s(4))>>s(15),(eq(28,1),s(3))>>s(16),(eq(28,1),s(5))>>s(17),(eq(28,1),s(6))>>s(18)]

#### Simplifying cost structure of CE 28 
 * Joined equivalent variables [aux(28),s(15),s(16)] into aux(28)

#### Cost of chains of eval_cf_decode_eol_bb8_in(V_ss_K,V_pr_limit,V_bits_left_0,V_p_0,B):
* Chain [31]: 1*s(8)+1*s(11)+1*s(12)+1
  Such that:s(7) =< V_pr_limit-V_p_0
s(8) =< V_pr_limit/3-V_p_0/3
aux(27) =< V_bits_left_0
s(11) =< s(7)
s(8) =< s(7)
s(12) =< s(8)*23+s(11)*7+aux(27)

  with precondition: [0>=V_ss_K] 

* Chain [30]: 1
  with precondition: [0>=V_ss_K,0>=V_bits_left_0,V_p_0>=V_pr_limit] 

* Chain [29]: 1
  with precondition: [1>=V_bits_left_0,V_ss_K>=1,V_p_0>=V_pr_limit] 

* Chain [28]: 1*s(14)+1*s(17)+1*s(18)+1
  Such that:s(13) =< V_pr_limit-V_p_0
s(14) =< V_pr_limit/3-V_p_0/3
aux(28) =< V_bits_left_0
s(17) =< s(13)
s(14) =< s(13)
s(18) =< s(14)*23+s(17)*7+aux(28)

  with precondition: [V_ss_K>=1] 


#### Simplifying cost structure of CE 36 
 * Renamed intermediate variables: 
[(eq(32,1),s(7))>>s(19),(eq(32,1),s(8))>>s(20),(eq(32,1),aux(27))>>s(21),(eq(32,1),s(11))>>s(22),(eq(32,1),s(12))>>s(23)]

#### Simplifying cost structure of CE 32 

#### Simplifying cost structure of CE 33 

#### Simplifying cost structure of CE 34 
 * Renamed intermediate variables: 
[(eq(35,1),s(13))>>s(24),(eq(35,1),s(14))>>s(25),(eq(35,1),aux(28))>>s(26),(eq(35,1),s(17))>>s(27),(eq(35,1),s(18))>>s(28)]

#### Simplifying cost structure of CE 35 

#### Cost of chains of loop_cont_eval_cf_decode_eol_bb1_in(G,A,B,C,D,E):
* Chain [36]: 0
  with precondition: [G=2] 

* Chain [35]: 1*s(20)+1*s(22)+1*s(23)+1
  Such that:s(19) =< B-D
s(20) =< B/3-D/3
s(21) =< C
s(22) =< s(19)
s(20) =< s(19)
s(23) =< s(20)*23+s(22)*7+s(21)

  with precondition: [G=3,0>=A] 

* Chain [34]: 1
  with precondition: [G=3,0>=A,0>=C,D>=B] 

* Chain [33]: 1
  with precondition: [G=3,1>=C,A>=1,D>=B] 

* Chain [32]: 1*s(25)+1*s(27)+1*s(28)+1
  Such that:s(24) =< B-D
s(25) =< B/3-D/3
s(26) =< C
s(27) =< s(24)
s(25) =< s(24)
s(28) =< s(25)*23+s(27)*7+s(26)

  with precondition: [G=3,A>=1] 

 * Renamed intermediate variables: 
[(eq(41,1),aux(7))>>s(29),(eq(41,1),it(19))>>s(30),(eq(41,1),aux(8))>>s(31),(eq(41,1),aux(12))>>s(32),(eq(41,1),it(18))>>s(33),(eq(41,1),it(17))>>s(34)]

#### Simplifying cost structure of CE 41 
 * Joined equivalent variables [aux(29),s(32)] into aux(29)
 * Renamed intermediate variables: 
[(eq(40,1),aux(7))>>s(35),(eq(40,1),it(19))>>s(36),(eq(40,1),aux(8))>>s(37),(eq(40,1),aux(12))>>s(38),(eq(40,1),it(18))>>s(39),(eq(40,1),it(17))>>s(40)]

#### Simplifying cost structure of CE 40 
 * Joined equivalent variables [aux(31),s(38)] into aux(31)
 * Renamed intermediate variables: 
[(eq(38,1),aux(7))>>s(41),(eq(38,1),it(19))>>s(42),(eq(38,1),aux(8))>>s(43),(eq(38,1),aux(9))>>s(44),(eq(38,1),aux(11))>>s(45),(eq(38,1),it(18))>>s(46),(eq(38,1),it(17))>>s(47)]

#### Simplifying cost structure of CE 38 
 * Joined equivalent variables [aux(33),s(45)] into aux(33)

#### Simplifying cost structure of CE 37 
 * Renamed intermediate variables: 
[(eq(39,1),aux(7))>>s(48),(eq(39,1),it(19))>>s(49),(eq(39,1),aux(8))>>s(50),(eq(39,1),aux(12))>>s(51),(eq(39,1),it(18))>>s(52),(eq(39,1),it(17))>>s(53)]
 * Renamed intermediate variables: 
[(eq(39,2),s(19))>>s(54),(eq(39,2),s(20))>>s(55),(eq(39,2),s(21))>>s(56),(eq(39,2),s(22))>>s(57),(eq(39,2),s(23))>>s(58)]

#### Simplifying cost structure of CE 39 
 * Joined equivalent variables [aux(35),s(51)] into aux(35)
 * Joined equivalent variables [aux(36),s(48),s(54)] into aux(36)
 * Renamed intermediate variables: 
[(eq(42,1),aux(7))>>s(59),(eq(42,1),it(19))>>s(60),(eq(42,1),aux(8))>>s(61),(eq(42,1),aux(12))>>s(62),(eq(42,1),it(18))>>s(63),(eq(42,1),it(17))>>s(64)]
 * Renamed intermediate variables: 
[(eq(42,2),s(24))>>s(65),(eq(42,2),s(25))>>s(66),(eq(42,2),s(26))>>s(67),(eq(42,2),s(27))>>s(68),(eq(42,2),s(28))>>s(69)]

#### Simplifying cost structure of CE 42 
 * Joined equivalent variables [aux(38),s(62)] into aux(38)
 * Joined equivalent variables [aux(39),s(59),s(65)] into aux(39)

#### Cost of chains of eval_cf_decode_eol_15(V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B):
* Chain [42]: 1*s(30)+1*s(33)+1*s(34)+2
  Such that:s(31) =< -V_ss_bits_left/8+3/2
s(30) =< -V_ss_bits_left/24+1/2
s(29) =< -V_pr_ptr+V_pr_limit
s(30) =< -V_pr_ptr/3+V_pr_limit/3
aux(29) =< 11
aux(30) =< 33
s(30) =< aux(29)
s(29) =< aux(30)
s(31) =< aux(30)
s(33) =< s(29)
s(30) =< s(29)
s(33) =< s(31)
s(30) =< s(31)
s(34) =< aux(29)
s(33) =< aux(29)

  with precondition: [12>=V_ss_bits_left,V_ss_K>=1,V_pr_ptr+33>=V_pr_limit,8*V_pr_ptr+12>=8*V_pr_limit+V_ss_bits_left] 

* Chain [41]: 1*s(36)+1*s(39)+1*s(40)+2
  Such that:s(37) =< -V_ss_bits_left/8+11/8
s(36) =< -V_ss_bits_left/24+11/24
s(35) =< -V_pr_ptr+V_pr_limit
s(36) =< -V_pr_ptr/3+V_pr_limit/3
aux(31) =< 11
aux(32) =< 33
s(36) =< aux(31)
s(35) =< aux(32)
s(37) =< aux(32)
s(39) =< s(35)
s(36) =< s(35)
s(39) =< s(37)
s(36) =< s(37)
s(40) =< aux(31)
s(39) =< aux(31)

  with precondition: [11>=V_ss_bits_left,0>=V_ss_K,V_pr_ptr+33>=V_pr_limit,8*V_pr_ptr+11>=8*V_pr_limit+V_ss_bits_left] 

* Chain [40]: 1*s(42)+1*s(46)+1*s(47)+1
  Such that:s(44) =< 11
s(43) =< -V_ss_bits_left/8+5/4
s(42) =< -V_ss_bits_left/24+5/12
s(41) =< -V_pr_ptr+V_pr_limit
s(42) =< -V_pr_ptr/3+V_pr_limit/3
aux(33) =< 10
aux(34) =< 30
s(42) =< aux(33)
s(41) =< aux(34)
s(43) =< aux(34)
s(46) =< s(41)
s(42) =< s(41)
s(46) =< s(43)
s(42) =< s(43)
s(47) =< s(44)
s(46) =< s(44)
s(42) =< s(44)
s(47) =< aux(33)
s(46) =< aux(33)

  with precondition: [10>=V_ss_bits_left,V_pr_ptr+30>=V_pr_limit,8*V_pr_ptr+10>=8*V_pr_limit+V_ss_bits_left] 

* Chain [39]: 1
  with precondition: [0>=V_ss_bits_left,V_pr_ptr>=V_pr_limit] 

* Chain [38]: 1*s(49)+1*s(52)+1*s(53)+1*s(55)+1*s(57)+1*s(58)+2
  Such that:s(50) =< 33
s(56) =< V_ss_bits_left+253
aux(35) =< 11
aux(36) =< -V_pr_ptr+V_pr_limit
aux(37) =< -V_pr_ptr/3+V_pr_limit/3
s(49) =< aux(35)
s(49) =< aux(37)
s(55) =< aux(37)
s(57) =< aux(36)
s(55) =< aux(36)
s(58) =< s(55)*23+s(57)*7+s(56)
s(52) =< aux(36)
s(49) =< aux(36)
s(52) =< s(50)
s(49) =< s(50)
s(53) =< aux(35)
s(52) =< aux(35)

  with precondition: [0>=V_ss_K] 

* Chain [37]: 1*s(60)+1*s(63)+1*s(64)+1*s(66)+1*s(68)+1*s(69)+2
  Such that:s(61) =< 33
s(67) =< V_ss_bits_left+253
aux(38) =< 11
aux(39) =< -V_pr_ptr+V_pr_limit
aux(40) =< -V_pr_ptr/3+V_pr_limit/3
s(60) =< aux(38)
s(60) =< aux(40)
s(66) =< aux(40)
s(68) =< aux(39)
s(66) =< aux(39)
s(69) =< s(66)*23+s(68)*7+s(67)
s(63) =< aux(39)
s(60) =< aux(39)
s(63) =< s(61)
s(60) =< s(61)
s(64) =< aux(38)
s(63) =< aux(38)

  with precondition: [V_ss_K>=1] 

 * Renamed intermediate variables: 
[(eq(43,1),s(31))>>s(70),(eq(43,1),s(30))>>s(71),(eq(43,1),s(29))>>s(72),(eq(43,1),aux(29))>>s(73),(eq(43,1),aux(30))>>s(74),(eq(43,1),s(33))>>s(75),(eq(43,1),s(34))>>s(76)]

#### Simplifying cost structure of CE 43 
 * Joined equivalent variables [aux(41),s(73)] into aux(41)
 * Joined equivalent variables [aux(42),s(74)] into aux(42)
 * Renamed intermediate variables: 
[(eq(44,1),s(37))>>s(77),(eq(44,1),s(36))>>s(78),(eq(44,1),s(35))>>s(79),(eq(44,1),aux(31))>>s(80),(eq(44,1),aux(32))>>s(81),(eq(44,1),s(39))>>s(82),(eq(44,1),s(40))>>s(83)]

#### Simplifying cost structure of CE 44 
 * Joined equivalent variables [aux(43),s(80)] into aux(43)
 * Joined equivalent variables [aux(44),s(81)] into aux(44)
 * Renamed intermediate variables: 
[(eq(45,1),s(44))>>s(84),(eq(45,1),s(43))>>s(85),(eq(45,1),s(42))>>s(86),(eq(45,1),s(41))>>s(87),(eq(45,1),aux(33))>>s(88),(eq(45,1),aux(34))>>s(89),(eq(45,1),s(46))>>s(90),(eq(45,1),s(47))>>s(91)]

#### Simplifying cost structure of CE 45 
 * Joined equivalent variables [aux(45),s(88)] into aux(45)
 * Joined equivalent variables [aux(46),s(89)] into aux(46)

#### Simplifying cost structure of CE 46 
 * Renamed intermediate variables: 
[(eq(47,1),s(50))>>s(92),(eq(47,1),s(56))>>s(93),(eq(47,1),aux(35))>>s(94),(eq(47,1),aux(36))>>s(95),(eq(47,1),aux(37))>>s(96),(eq(47,1),s(49))>>s(97),(eq(47,1),s(55))>>s(98),(eq(47,1),s(57))>>s(99),(eq(47,1),s(58))>>s(100),(eq(47,1),s(52))>>s(101),(eq(47,1),s(53))>>s(102)]

#### Simplifying cost structure of CE 47 
 * Renamed intermediate variables: 
[(eq(48,1),s(61))>>s(103),(eq(48,1),s(67))>>s(104),(eq(48,1),aux(38))>>s(105),(eq(48,1),aux(39))>>s(106),(eq(48,1),aux(40))>>s(107),(eq(48,1),s(60))>>s(108),(eq(48,1),s(66))>>s(109),(eq(48,1),s(68))>>s(110),(eq(48,1),s(69))>>s(111),(eq(48,1),s(63))>>s(112),(eq(48,1),s(64))>>s(113)]

#### Simplifying cost structure of CE 48 

#### Cost of chains of eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B):
* Chain [48]: 1*s(71)+1*s(75)+1*s(76)+2
  Such that:s(70) =< -V_ss_bits_left/8+3/2
s(71) =< -V_ss_bits_left/24+1/2
s(72) =< -V_pr_ptr+V_pr_limit
s(71) =< -V_pr_ptr/3+V_pr_limit/3
aux(41) =< 11
aux(42) =< 33
s(71) =< aux(41)
s(72) =< aux(42)
s(70) =< aux(42)
s(75) =< s(72)
s(71) =< s(72)
s(75) =< s(70)
s(71) =< s(70)
s(76) =< aux(41)
s(75) =< aux(41)

  with precondition: [12>=V_ss_bits_left,V_ss_K>=1,V_pr_ptr+33>=V_pr_limit,8*V_pr_ptr+12>=8*V_pr_limit+V_ss_bits_left] 

* Chain [47]: 1*s(78)+1*s(82)+1*s(83)+2
  Such that:s(77) =< -V_ss_bits_left/8+11/8
s(78) =< -V_ss_bits_left/24+11/24
s(79) =< -V_pr_ptr+V_pr_limit
s(78) =< -V_pr_ptr/3+V_pr_limit/3
aux(43) =< 11
aux(44) =< 33
s(78) =< aux(43)
s(79) =< aux(44)
s(77) =< aux(44)
s(82) =< s(79)
s(78) =< s(79)
s(82) =< s(77)
s(78) =< s(77)
s(83) =< aux(43)
s(82) =< aux(43)

  with precondition: [11>=V_ss_bits_left,0>=V_ss_K,V_pr_ptr+33>=V_pr_limit,8*V_pr_ptr+11>=8*V_pr_limit+V_ss_bits_left] 

* Chain [46]: 1*s(86)+1*s(90)+1*s(91)+1
  Such that:s(84) =< 11
s(85) =< -V_ss_bits_left/8+5/4
s(86) =< -V_ss_bits_left/24+5/12
s(87) =< -V_pr_ptr+V_pr_limit
s(86) =< -V_pr_ptr/3+V_pr_limit/3
aux(45) =< 10
aux(46) =< 30
s(86) =< aux(45)
s(87) =< aux(46)
s(85) =< aux(46)
s(90) =< s(87)
s(86) =< s(87)
s(90) =< s(85)
s(86) =< s(85)
s(91) =< s(84)
s(90) =< s(84)
s(86) =< s(84)
s(91) =< aux(45)
s(90) =< aux(45)

  with precondition: [10>=V_ss_bits_left,V_pr_ptr+30>=V_pr_limit,8*V_pr_ptr+10>=8*V_pr_limit+V_ss_bits_left] 

* Chain [45]: 1
  with precondition: [0>=V_ss_bits_left,V_pr_ptr>=V_pr_limit] 

* Chain [44]: 1*s(97)+1*s(98)+1*s(99)+1*s(100)+1*s(101)+1*s(102)+2
  Such that:s(94) =< 11
s(92) =< 33
s(93) =< V_ss_bits_left+253
s(95) =< -V_pr_ptr+V_pr_limit
s(96) =< -V_pr_ptr/3+V_pr_limit/3
s(97) =< s(94)
s(97) =< s(96)
s(98) =< s(96)
s(99) =< s(95)
s(98) =< s(95)
s(100) =< s(98)*23+s(99)*7+s(93)
s(101) =< s(95)
s(97) =< s(95)
s(101) =< s(92)
s(97) =< s(92)
s(102) =< s(94)
s(101) =< s(94)

  with precondition: [0>=V_ss_K] 

* Chain [43]: 1*s(108)+1*s(109)+1*s(110)+1*s(111)+1*s(112)+1*s(113)+2
  Such that:s(105) =< 11
s(103) =< 33
s(104) =< V_ss_bits_left+253
s(106) =< -V_pr_ptr+V_pr_limit
s(107) =< -V_pr_ptr/3+V_pr_limit/3
s(108) =< s(105)
s(108) =< s(107)
s(109) =< s(107)
s(110) =< s(106)
s(109) =< s(106)
s(111) =< s(109)*23+s(110)*7+s(104)
s(112) =< s(106)
s(108) =< s(106)
s(112) =< s(103)
s(108) =< s(103)
s(113) =< s(105)
s(112) =< s(105)

  with precondition: [V_ss_K>=1] 


Closed-form bounds of eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B): 
-------------------------------------
* Chain [48] with precondition: [12>=V_ss_bits_left,V_ss_K>=1,V_pr_ptr+33>=V_pr_limit,8*V_pr_ptr+12>=8*V_pr_limit+V_ss_bits_left] 
    - Upper bound: 57 
    - Complexity: constant 
* Chain [47] with precondition: [11>=V_ss_bits_left,0>=V_ss_K,V_pr_ptr+33>=V_pr_limit,8*V_pr_ptr+11>=8*V_pr_limit+V_ss_bits_left] 
    - Upper bound: 57 
    - Complexity: constant 
* Chain [46] with precondition: [10>=V_ss_bits_left,V_pr_ptr+30>=V_pr_limit,8*V_pr_ptr+10>=8*V_pr_limit+V_ss_bits_left] 
    - Upper bound: 52 
    - Complexity: constant 
* Chain [45] with precondition: [0>=V_ss_bits_left,V_pr_ptr>=V_pr_limit] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [44] with precondition: [0>=V_ss_K] 
    - Upper bound: nat(V_ss_bits_left+253)+57+nat(-V_pr_ptr+V_pr_limit)*8+nat(-V_pr_ptr/3+V_pr_limit/3)*24 
    - Complexity: n 
* Chain [43] with precondition: [V_ss_K>=1] 
    - Upper bound: nat(V_ss_bits_left+253)+57+nat(-V_pr_ptr+V_pr_limit)*8+nat(-V_pr_ptr/3+V_pr_limit/3)*24 
    - Complexity: n 

### Maximum cost of eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B): max([56,nat(V_ss_bits_left+253)+56+nat(-V_pr_ptr+V_pr_limit)*8+nat(-V_pr_ptr/3+V_pr_limit/3)*24])+1 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 72 ms.
* Invariants computed in 63 ms.
   - Backward Invariants 31 ms.
   - Transitive Invariants 16 ms.
* Refinement performed in 110 ms.
* Termination proved in 29 ms.
* Upper bounds computed in 179 ms.
   - Equation cost structures 88 ms.
   - Phase cost structures 54 ms.
   - Chain cost structures 31 ms.
   - Solving cost expressions 6 ms.
* Total analysis performed in 516 ms.


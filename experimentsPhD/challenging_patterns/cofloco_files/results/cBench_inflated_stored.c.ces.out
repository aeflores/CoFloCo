Warning: Ignored call to eval_inflate_stored_stop/1 in equation eval_inflate_stored_bb12_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_inflate_stored_bb1_in/7,eval_inflate_stored_bb2_in/7]
1. recursive  : [eval_inflate_stored_bb4_in/7,eval_inflate_stored_bb5_in/7]
2. non_recursive  : [eval_inflate_stored_bb12_in/1]
3. recursive  : [eval_inflate_stored_bb10_in/11,eval_inflate_stored_bb9_in/11]
4. recursive  : [eval_inflate_stored_27/7,eval_inflate_stored_28/7,eval_inflate_stored_bb11_in/6,eval_inflate_stored_bb8_in/4,loop_cont_eval_inflate_stored_bb9_in/7]
5. non_recursive  : [loop_cont_eval_inflate_stored_bb8_in/2]
6. non_recursive  : [eval_inflate_stored_21/4]
7. non_recursive  : [eval_inflate_stored_20/4]
8. non_recursive  : [eval_inflate_stored_19/4]
9. non_recursive  : [eval_inflate_stored_18/4]
10. non_recursive  : [eval_inflate_stored_bb7_in/4]
11. non_recursive  : [eval_inflate_stored_16/5]
12. non_recursive  : [eval_inflate_stored_15/4]
13. non_recursive  : [eval_inflate_stored_bb6_in/4]
14. non_recursive  : [loop_cont_eval_inflate_stored_bb4_in/5]
15. non_recursive  : [eval_inflate_stored_12/4]
16. non_recursive  : [eval_inflate_stored_11/4]
17. non_recursive  : [eval_inflate_stored_10/4]
18. non_recursive  : [eval_inflate_stored_bb3_in/4]
19. non_recursive  : [loop_cont_eval_inflate_stored_bb1_in/5]
20. non_recursive  : [eval_inflate_stored_6/4]
21. non_recursive  : [eval_inflate_stored_5/4]
22. non_recursive  : [eval_inflate_stored_4/4]
23. non_recursive  : [eval_inflate_stored_3/4]
24. non_recursive  : [eval_inflate_stored_2/4]
25. non_recursive  : [eval_inflate_stored_1/4]
26. non_recursive  : [eval_inflate_stored_0/4]
27. non_recursive  : [eval_inflate_stored_bb0_in/4]
28. non_recursive  : [eval_inflate_stored_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_inflate_stored_bb1_in/7
1. SCC is partially evaluated into eval_inflate_stored_bb4_in/7
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into eval_inflate_stored_bb9_in/11
4. SCC is partially evaluated into eval_inflate_stored_bb8_in/4
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into eval_inflate_stored_21/4
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into eval_inflate_stored_16/5
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is partially evaluated into eval_inflate_stored_12/4
16. SCC is completely evaluated into other SCCs
17. SCC is completely evaluated into other SCCs
18. SCC is completely evaluated into other SCCs
19. SCC is completely evaluated into other SCCs
20. SCC is partially evaluated into eval_inflate_stored_6/4
21. SCC is completely evaluated into other SCCs
22. SCC is completely evaluated into other SCCs
23. SCC is completely evaluated into other SCCs
24. SCC is completely evaluated into other SCCs
25. SCC is completely evaluated into other SCCs
26. SCC is completely evaluated into other SCCs
27. SCC is completely evaluated into other SCCs
28. SCC is partially evaluated into eval_inflate_stored_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_inflate_stored_bb1_in/7 
* CE 4 is refined into CE [16] 
* CE 3 is refined into CE [17] 


#### Refined cost equations eval_inflate_stored_bb1_in/7 
* CE 16: eval_inflate_stored_bb1_in(A,B,C,D,A,B,C) = 0
     [C>=16,D=5] 
* CE 17: eval_inflate_stored_bb1_in(V_n,V_limit,V__01,B,C,D,E) = 1+ eval_inflate_stored_bb1_in(V_n,V_limit,F,G,C,D,E)
     [15>=V__01,V__01+8=F,G=5,B=5] 

### Cost equations --> "Loop" of eval_inflate_stored_bb1_in/7 
* CEs [17] --> Loop 16 
* CEs [16] --> Loop 17 

#### Loops of eval_inflate_stored_bb1_in/7 
* Loop 16: eval_inflate_stored_bb1_in(V_n,V_limit,V__01,B,C,D,E)->  eval_inflate_stored_bb1_in(V_n,V_limit,V__01',B',C,D,E)
                  [15>=V__01,V__01+8=V__01',B'=5,B=5] 
* Loop 17: eval_inflate_stored_bb1_in(A,B,C,D,A,B,C) [C>=16,D=5] 

### Ranking functions of CR eval_inflate_stored_bb1_in(V_n,V_limit,V__01,B,C,D,E) 
* RF of phase [16]: [-V__01/8+2]

#### Partial ranking functions of CR eval_inflate_stored_bb1_in(V_n,V_limit,V__01,B,C,D,E) 
* Partial RF of phase [16]:
  - RF of loop [16:1]:
    -V__01/8+2

Discarded unfeasible chain [[16]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_inflate_stored_bb1_in(V_n,V_limit,V__01,B,C,D,E) 
* [[16],17]
* [17]


### Merging Chains  eval_inflate_stored_bb1_in/7 into  External patterns of execution 
* [[17]] --> 1 
* [[17,[16]]] --> 2 


### Specialization of cost equations eval_inflate_stored_bb4_in/7 
* CE 7 is refined into CE [18] 
* CE 6 is refined into CE [19] 


#### Refined cost equations eval_inflate_stored_bb4_in/7 
* CE 18: eval_inflate_stored_bb4_in(A,B,C,D,A,B,C) = 0
     [C>=16,D=4] 
* CE 19: eval_inflate_stored_bb4_in(V_n,V_limit,V__1,B,C,D,E) = 1+ eval_inflate_stored_bb4_in(V_n,V_limit,F,G,C,D,E)
     [15>=V__1,V__1+8=F,G=4,B=4] 

### Cost equations --> "Loop" of eval_inflate_stored_bb4_in/7 
* CEs [19] --> Loop 18 
* CEs [18] --> Loop 19 

#### Loops of eval_inflate_stored_bb4_in/7 
* Loop 18: eval_inflate_stored_bb4_in(V_n,V_limit,V__1,B,C,D,E)->  eval_inflate_stored_bb4_in(V_n,V_limit,V__1',B',C,D,E)
                  [15>=V__1,V__1+8=V__1',B'=4,B=4] 
* Loop 19: eval_inflate_stored_bb4_in(A,B,C,D,A,B,C) [C>=16,D=4] 

### Ranking functions of CR eval_inflate_stored_bb4_in(V_n,V_limit,V__1,B,C,D,E) 
* RF of phase [18]: [-V__1/8+2]

#### Partial ranking functions of CR eval_inflate_stored_bb4_in(V_n,V_limit,V__1,B,C,D,E) 
* Partial RF of phase [18]:
  - RF of loop [18:1]:
    -V__1/8+2

Discarded unfeasible chain [[18]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_inflate_stored_bb4_in(V_n,V_limit,V__1,B,C,D,E) 
* [[18],19]
* [19]


### Merging Chains  eval_inflate_stored_bb4_in/7 into  External patterns of execution 
* [[19]] --> 1 
* [[19,[18]]] --> 2 


### Specialization of cost equations eval_inflate_stored_bb9_in/11 
* CE 15 is refined into CE [20] 
* CE 14 is refined into CE [21] 


#### Refined cost equations eval_inflate_stored_bb9_in/11 
* CE 20: eval_inflate_stored_bb9_in(A,B,C,D,E,F,A,B,G,D,E) = 0
     [E>=B,E>=A,D>=0,D+1=G,D+1=C,F=2] 
* CE 21: eval_inflate_stored_bb9_in(V_limit,V__2,V__0,V_9,V__3,B,C,D,E,F,G) = 1+ eval_inflate_stored_bb9_in(V_limit,V__2,H,V_9,I,J,C,D,E,F,G)
     [V_limit>=V__3+1,V__3>=V__2,V_9>=0,V__3+8=I,V_9+1=H,V_9+1=V__0,J=2,B=2] 

### Cost equations --> "Loop" of eval_inflate_stored_bb9_in/11 
* CEs [21] --> Loop 20 
* CEs [20] --> Loop 21 

#### Loops of eval_inflate_stored_bb9_in/11 
* Loop 20: eval_inflate_stored_bb9_in(V_limit,V__2,V__0,V_9,V__3,B,C,D,E,F,G)->  eval_inflate_stored_bb9_in(V_limit,V__2,V__0',V_9,V__3',B',C,D,E,F,G)
                  [V_limit>=V__3+1,V__3>=V__2,V_9>=0,V__3+8=V__3',V_9+1=V__0',V_9+1=V__0,B'=2,B=2] 
* Loop 21: eval_inflate_stored_bb9_in(A,B,C,D,E,F,A,B,G,D,E) [E>=B,E>=A,D>=0,D+1=G,D+1=C,F=2] 

### Ranking functions of CR eval_inflate_stored_bb9_in(V_limit,V__2,V__0,V_9,V__3,B,C,D,E,F,G) 
* RF of phase [20]: [V_limit/8-V__3/8]

#### Partial ranking functions of CR eval_inflate_stored_bb9_in(V_limit,V__2,V__0,V_9,V__3,B,C,D,E,F,G) 
* Partial RF of phase [20]:
  - RF of loop [20:1]:
    V_limit/8-V__3/8

Discarded unfeasible chain [[20]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_inflate_stored_bb9_in(V_limit,V__2,V__0,V_9,V__3,B,C,D,E,F,G) 
* [[20],21]
* [21]


### Merging Chains  eval_inflate_stored_bb9_in/11 into  External patterns of execution 
* [[21]] --> 1 
* [[21,[20]]] --> 2 


### Specialization of cost equations eval_inflate_stored_bb8_in/4 
* CE 13 is refined into CE [22] 
* CE 12 is refined into CE [23,24] 


#### Refined cost equations eval_inflate_stored_bb8_in/4 
* CE 22: eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) = 0
     [0>=V__0,B=3] 
* CE 23: eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) = 2+ eval_inflate_stored_bb9_in(V_limit,V__2,C,D,V__2,E,V_limit,V__2,F,D,V__2):1+ eval_inflate_stored_bb8_in(V_limit,G,D,H)
     [V__2>=V_limit,D>=0,V__2=G+8,D+1=F,D+1=C,D+1=V__0,H=3,E=2,B=3] 
* CE 24: eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) = 2+ eval_inflate_stored_bb9_in(V_limit,V__2,C,D,V__2,E,V_limit,V__2,F,D,G):2+ eval_inflate_stored_bb8_in(V_limit,H,D,I)
     [V_limit+7>=G,G>=V__2+8,G>=V_limit,D>=0,G=H+8,D+1=F,D+1=C,D+1=V__0,I=3,E=2,B=3] 

### Cost equations --> "Loop" of eval_inflate_stored_bb8_in/4 
* CEs [24] --> Loop 22 
* CEs [23] --> Loop 23 
* CEs [22] --> Loop 24 

#### Loops of eval_inflate_stored_bb8_in/4 
* Loop 22: eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B)->  eval_inflate_stored_bb8_in(V_limit,V__2',V__0',B')
                  [V_limit>=V__2'+1,V__2'>=V__2,V__2'+8>=V_limit,V__0'>=0,V__0'+1=V__0,B'=3,B=3] 
* Loop 23: eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B)->  eval_inflate_stored_bb8_in(V_limit,V__2',V__0',B')
                  [V__2>=V_limit,V__0'>=0,V__2=V__2'+8,V__0'+1=V__0,B'=3,B=3] 
* Loop 24: eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) [0>=V__0,B=3] 

### Ranking functions of CR eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) 
* RF of phase [22]: [V__0]
* RF of phase [23]: [V__0,-V_limit/8+V__2/8+1/8]

#### Partial ranking functions of CR eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) 
* Partial RF of phase [22]:
  - RF of loop [22:1]:
    V__0
* Partial RF of phase [23]:
  - RF of loop [23:1]:
    V__0
    -V_limit/8+V__2/8+1/8

Discarded unfeasible chain [[23]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [[23],[22]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [[22]](Non-terminating chain proved terminating)

### Resulting Chains:eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) 
* [[23],[22],24]
* [[23],24]
* [[22],24]
* [24]


### Merging Chains  eval_inflate_stored_bb8_in/4 into  External patterns of execution 
* [[24]] --> 1 
* [[24,[22]]] --> 2 
* [[24,[23]]] --> 3 
* [[24,[22],[23]]] --> 4 


### Specialization of cost equations eval_inflate_stored_21/4 
* CE 11 is refined into CE [25,26,27,28] 


#### Refined cost equations eval_inflate_stored_21/4 
* CE 25: eval_inflate_stored_21(V_n,V_limit,V_8,B) = 1+ eval_inflate_stored_bb8_in(V_limit,V_8,V_n,C):1
     [0>=V_n,C=3] 
* CE 26: eval_inflate_stored_21(V_n,V_limit,V_8,B) = 1+ eval_inflate_stored_bb8_in(V_limit,V_8,V_n,C):2
     [V_limit>=V_8+1,V_n>=1,C=3] 
* CE 27: eval_inflate_stored_21(V_n,V_limit,V_8,B) = 1+ eval_inflate_stored_bb8_in(V_limit,V_8,V_n,C):3
     [V_8+8>=8*V_n+V_limit,V_n>=1,C=3] 
* CE 28: eval_inflate_stored_21(V_n,V_limit,V_8,B) = 1+ eval_inflate_stored_bb8_in(V_limit,V_8,V_n,C):4
     [V_limit+8*V_n>=V_8+9,V_8>=V_limit,V_n>=2,C=3] 

### Cost equations --> "Loop" of eval_inflate_stored_21/4 
* CEs [28] --> Loop 25 
* CEs [27] --> Loop 26 
* CEs [26] --> Loop 27 
* CEs [25] --> Loop 28 

#### Loops of eval_inflate_stored_21/4 
* Loop 25: eval_inflate_stored_21(V_n,V_limit,V_8,B) [V_limit+8*V_n>=V_8+9,V_8>=V_limit,V_n>=2] 
* Loop 26: eval_inflate_stored_21(V_n,V_limit,V_8,B) [V_8+8>=8*V_n+V_limit,V_n>=1] 
* Loop 27: eval_inflate_stored_21(V_n,V_limit,V_8,B) [V_limit>=V_8+1,V_n>=1] 
* Loop 28: eval_inflate_stored_21(V_n,V_limit,V_8,B) [0>=V_n] 

### Ranking functions of CR eval_inflate_stored_21(V_n,V_limit,V_8,B) 

#### Partial ranking functions of CR eval_inflate_stored_21(V_n,V_limit,V_8,B) 


### Resulting Chains:eval_inflate_stored_21(V_n,V_limit,V_8,B) 
* [28]
* [27]
* [26]
* [25]


### Merging Chains  eval_inflate_stored_21/4 into  External patterns of execution 
* [[28]] --> 1 
* [[27]] --> 2 
* [[26]] --> 3 
* [[25]] --> 4 


### Specialization of cost equations eval_inflate_stored_16/5 
* CE 9 is refined into CE [29] 
* CE 8 is refined into CE [30] 
* CE 10 is refined into CE [31,32,33,34] 


#### Refined cost equations eval_inflate_stored_16/5 
* CE 29: eval_inflate_stored_16(V_n,V_limit,V__1,V_6,B) = 0
     [V_6>=1] 
* CE 30: eval_inflate_stored_16(V_n,V_limit,V__1,V_6,B) = 0
     [0>=V_6+1] 
* CE 31: eval_inflate_stored_16(V_n,V_limit,V__1,V_6,B) = 0+ eval_inflate_stored_21(V_n,V_limit,C,B):1
     [0>=V_n,C+16=V__1,V_6=0] 
* CE 32: eval_inflate_stored_16(V_n,V_limit,V__1,V_6,B) = 0+ eval_inflate_stored_21(V_n,V_limit,C,B):2
     [V_limit>=C+1,V_n>=1,C+16=V__1,V_6=0] 
* CE 33: eval_inflate_stored_16(V_n,V_limit,V__1,V_6,B) = 0+ eval_inflate_stored_21(V_n,V_limit,C,B):3
     [C+8>=8*V_n+V_limit,V_n>=1,C+16=V__1,V_6=0] 
* CE 34: eval_inflate_stored_16(V_n,V_limit,V__1,V_6,B) = 0+ eval_inflate_stored_21(V_n,V_limit,C,B):4
     [V_limit+8*V_n>=C+9,C>=V_limit,V_n>=2,C+16=V__1,V_6=0] 

### Cost equations --> "Loop" of eval_inflate_stored_16/5 
* CEs [29] --> Loop 29 
* CEs [30] --> Loop 30 
* CEs [34] --> Loop 31 
* CEs [33] --> Loop 32 
* CEs [32] --> Loop 33 
* CEs [31] --> Loop 34 

#### Loops of eval_inflate_stored_16/5 
* Loop 29: eval_inflate_stored_16(V_n,V_limit,V__1,V_6,B) [V_6>=1] 
* Loop 30: eval_inflate_stored_16(V_n,V_limit,V__1,V_6,B) [0>=V_6+1] 
* Loop 31: eval_inflate_stored_16(V_n,V_limit,V__1,V_6,B) [V_limit+8*V_n+7>=V__1,V__1>=V_limit+16,V_n>=2,V_6=0] 
* Loop 32: eval_inflate_stored_16(V_n,V_limit,V__1,V_6,B) [V__1>=8*V_n+V_limit+8,V_n>=1,V_6=0] 
* Loop 33: eval_inflate_stored_16(V_n,V_limit,V__1,V_6,B) [V_limit+15>=V__1,V_n>=1,V_6=0] 
* Loop 34: eval_inflate_stored_16(V_n,V_limit,V__1,V_6,B) [0>=V_n,V_6=0] 

### Ranking functions of CR eval_inflate_stored_16(V_n,V_limit,V__1,V_6,B) 

#### Partial ranking functions of CR eval_inflate_stored_16(V_n,V_limit,V__1,V_6,B) 


### Resulting Chains:eval_inflate_stored_16(V_n,V_limit,V__1,V_6,B) 
* [34]
* [33]
* [32]
* [31]
* [30]
* [29]


### Merging Chains  eval_inflate_stored_16/5 into  External patterns of execution 
* [[34]] --> 1 
* [[33]] --> 2 
* [[32]] --> 3 
* [[31]] --> 4 
* [[30]] --> 5 
* [[29]] --> 6 


### Specialization of cost equations eval_inflate_stored_12/4 
* CE 5 is refined into CE [35,36,37,38,39,40,41,42,43,44,45,46] 


#### Refined cost equations eval_inflate_stored_12/4 
* CE 35: eval_inflate_stored_12(V_n,V_limit,V_3,B) = 1+ eval_inflate_stored_bb4_in(V_n,V_limit,V_3,C,V_n,V_limit,V_3):1+ eval_inflate_stored_16(V_n,V_limit,V_3,D,B):1
     [V_3>=16,0>=V_n,D=0,C=4] 
* CE 36: eval_inflate_stored_12(V_n,V_limit,V_3,B) = 1+ eval_inflate_stored_bb4_in(V_n,V_limit,V_3,C,V_n,V_limit,V_3):1+ eval_inflate_stored_16(V_n,V_limit,V_3,D,B):2
     [V_limit+15>=V_3,V_3>=16,V_n>=1,D=0,C=4] 
* CE 37: eval_inflate_stored_12(V_n,V_limit,V_3,B) = 1+ eval_inflate_stored_bb4_in(V_n,V_limit,V_3,C,V_n,V_limit,V_3):1+ eval_inflate_stored_16(V_n,V_limit,V_3,D,B):3
     [V_3>=8*V_n+V_limit+8,V_3>=16,V_n>=1,D=0,C=4] 
* CE 38: eval_inflate_stored_12(V_n,V_limit,V_3,B) = 1+ eval_inflate_stored_bb4_in(V_n,V_limit,V_3,C,V_n,V_limit,V_3):1+ eval_inflate_stored_16(V_n,V_limit,V_3,D,B):4
     [V_limit+8*V_n+7>=V_3,V_3>=V_limit+16,V_3>=16,V_n>=2,D=0,C=4] 
* CE 39: eval_inflate_stored_12(V_n,V_limit,V_3,B) = 1+ eval_inflate_stored_bb4_in(V_n,V_limit,V_3,C,V_n,V_limit,V_3):1+ eval_inflate_stored_16(V_n,V_limit,V_3,D,B):5
     [V_3>=16,0>=D+1,C=4] 
* CE 40: eval_inflate_stored_12(V_n,V_limit,V_3,B) = 1+ eval_inflate_stored_bb4_in(V_n,V_limit,V_3,C,V_n,V_limit,V_3):1+ eval_inflate_stored_16(V_n,V_limit,V_3,D,B):6
     [D>=1,V_3>=16,C=4] 
* CE 41: eval_inflate_stored_12(V_n,V_limit,V_3,B) = 1+ eval_inflate_stored_bb4_in(V_n,V_limit,V_3,C,V_n,V_limit,D):2+ eval_inflate_stored_16(V_n,V_limit,D,E,B):1
     [D>=V_3+8,D>=16,0>=V_n,23>=D,E=0,C=4] 
* CE 42: eval_inflate_stored_12(V_n,V_limit,V_3,B) = 1+ eval_inflate_stored_bb4_in(V_n,V_limit,V_3,C,V_n,V_limit,D):2+ eval_inflate_stored_16(V_n,V_limit,D,E,B):2
     [V_limit+15>=D,D>=V_3+8,D>=16,V_n>=1,23>=D,E=0,C=4] 
* CE 43: eval_inflate_stored_12(V_n,V_limit,V_3,B) = 1+ eval_inflate_stored_bb4_in(V_n,V_limit,V_3,C,V_n,V_limit,D):2+ eval_inflate_stored_16(V_n,V_limit,D,E,B):3
     [D>=8*V_n+V_limit+8,D>=V_3+8,D>=16,V_n>=1,23>=D,E=0,C=4] 
* CE 44: eval_inflate_stored_12(V_n,V_limit,V_3,B) = 1+ eval_inflate_stored_bb4_in(V_n,V_limit,V_3,C,V_n,V_limit,D):2+ eval_inflate_stored_16(V_n,V_limit,D,E,B):4
     [V_limit+8*V_n+7>=D,D>=V_limit+16,D>=V_3+8,D>=16,V_n>=2,23>=D,E=0,C=4] 
* CE 45: eval_inflate_stored_12(V_n,V_limit,V_3,B) = 1+ eval_inflate_stored_bb4_in(V_n,V_limit,V_3,C,V_n,V_limit,D):2+ eval_inflate_stored_16(V_n,V_limit,D,E,B):5
     [D>=V_3+8,D>=16,0>=E+1,23>=D,C=4] 
* CE 46: eval_inflate_stored_12(V_n,V_limit,V_3,B) = 1+ eval_inflate_stored_bb4_in(V_n,V_limit,V_3,C,V_n,V_limit,D):2+ eval_inflate_stored_16(V_n,V_limit,D,E,B):6
     [D>=V_3+8,E>=1,D>=16,23>=D,C=4] 

### Cost equations --> "Loop" of eval_inflate_stored_12/4 
* CEs [39,40] --> Loop 35 
* CEs [38] --> Loop 36 
* CEs [37] --> Loop 37 
* CEs [36] --> Loop 38 
* CEs [43] --> Loop 39 
* CEs [42] --> Loop 40 
* CEs [45,46] --> Loop 41 
* CEs [44] --> Loop 42 
* CEs [35] --> Loop 43 
* CEs [41] --> Loop 44 

#### Loops of eval_inflate_stored_12/4 
* Loop 35: eval_inflate_stored_12(V_n,V_limit,V_3,B) [V_3>=16] 
* Loop 36: eval_inflate_stored_12(V_n,V_limit,V_3,B) [V_limit+8*V_n+7>=V_3,V_3>=V_limit+16,V_3>=16,V_n>=2] 
* Loop 37: eval_inflate_stored_12(V_n,V_limit,V_3,B) [V_3>=8*V_n+V_limit+8,V_3>=16,V_n>=1] 
* Loop 38: eval_inflate_stored_12(V_n,V_limit,V_3,B) [V_limit+15>=V_3,V_3>=16,V_n>=1] 
* Loop 39: eval_inflate_stored_12(V_n,V_limit,V_3,B) [15>=8*V_n+V_limit,V_n>=1,15>=V_3] 
* Loop 40: eval_inflate_stored_12(V_n,V_limit,V_3,B) [V_limit+7>=V_3,V_limit>=1,V_n>=1,15>=V_3] 
* Loop 41: eval_inflate_stored_12(V_n,V_limit,V_3,B) [15>=V_3] 
* Loop 42: eval_inflate_stored_12(V_n,V_limit,V_3,B) [V_limit+8*V_n>=V_3+1,V_limit+8*V_n>=9,V_n>=2,15>=V_3,7>=V_limit] 
* Loop 43: eval_inflate_stored_12(V_n,V_limit,V_3,B) [V_3>=16,0>=V_n] 
* Loop 44: eval_inflate_stored_12(V_n,V_limit,V_3,B) [15>=V_3,0>=V_n] 

### Ranking functions of CR eval_inflate_stored_12(V_n,V_limit,V_3,B) 

#### Partial ranking functions of CR eval_inflate_stored_12(V_n,V_limit,V_3,B) 


### Resulting Chains:eval_inflate_stored_12(V_n,V_limit,V_3,B) 
* [44]
* [43]
* [42]
* [41]
* [40]
* [39]
* [38]
* [37]
* [36]
* [35]


### Merging Chains  eval_inflate_stored_12/4 into  External patterns of execution 
* [[44]] --> 1 
* [[43]] --> 2 
* [[42]] --> 3 
* [[41]] --> 4 
* [[40]] --> 5 
* [[39]] --> 6 
* [[38]] --> 7 
* [[37]] --> 8 
* [[36]] --> 9 
* [[35]] --> 10 


### Specialization of cost equations eval_inflate_stored_6/4 
* CE 2 is refined into CE [47,48,49,50,51,52,53,54,55,56,57,58,59,60,61] 


#### Refined cost equations eval_inflate_stored_6/4 
* CE 47: eval_inflate_stored_6(V_n,V_limit,V_0,B) = 1+ eval_inflate_stored_bb1_in(V_n,V_limit,C,D,V_n,V_limit,E):1+ eval_inflate_stored_12(V_n,V_limit,F,B):1
     [F>=0,15>=F,0>=V_n,F+16=E,F+16=C,F+16=V_0,D=5] 
* CE 48: eval_inflate_stored_6(V_n,V_limit,V_0,B) = 1+ eval_inflate_stored_bb1_in(V_n,V_limit,C,D,V_n,V_limit,E):1+ eval_inflate_stored_12(V_n,V_limit,F,B):2
     [F>=16,0>=V_n,F+16=E,F+16=C,F+16=V_0,D=5] 
* CE 49: eval_inflate_stored_6(V_n,V_limit,V_0,B) = 1+ eval_inflate_stored_bb1_in(V_n,V_limit,C,D,V_n,V_limit,E):1+ eval_inflate_stored_12(V_n,V_limit,F,B):3
     [V_limit+8*V_n>=F+1,V_limit+8*V_n>=9,F>=0,V_n>=2,15>=F,7>=V_limit,F+16=E,F+16=C,F+16=V_0,D=5] 
* CE 50: eval_inflate_stored_6(V_n,V_limit,V_0,B) = 1+ eval_inflate_stored_bb1_in(V_n,V_limit,C,D,V_n,V_limit,E):1+ eval_inflate_stored_12(V_n,V_limit,F,B):4
     [F>=0,15>=F,F+16=E,F+16=C,F+16=V_0,D=5] 
* CE 51: eval_inflate_stored_6(V_n,V_limit,V_0,B) = 1+ eval_inflate_stored_bb1_in(V_n,V_limit,C,D,V_n,V_limit,E):1+ eval_inflate_stored_12(V_n,V_limit,F,B):5
     [V_limit+7>=F,F>=0,V_limit>=1,V_n>=1,15>=F,F+16=E,F+16=C,F+16=V_0,D=5] 
* CE 52: eval_inflate_stored_6(V_n,V_limit,V_0,B) = 1+ eval_inflate_stored_bb1_in(V_n,V_limit,C,D,V_n,V_limit,E):1+ eval_inflate_stored_12(V_n,V_limit,F,B):6
     [15>=8*V_n+V_limit,F>=0,V_n>=1,15>=F,F+16=E,F+16=C,F+16=V_0,D=5] 
* CE 53: eval_inflate_stored_6(V_n,V_limit,V_0,B) = 1+ eval_inflate_stored_bb1_in(V_n,V_limit,C,D,V_n,V_limit,E):1+ eval_inflate_stored_12(V_n,V_limit,F,B):7
     [V_limit+15>=F,F>=16,V_n>=1,F+16=E,F+16=C,F+16=V_0,D=5] 
* CE 54: eval_inflate_stored_6(V_n,V_limit,V_0,B) = 1+ eval_inflate_stored_bb1_in(V_n,V_limit,C,D,V_n,V_limit,E):1+ eval_inflate_stored_12(V_n,V_limit,F,B):8
     [F>=8*V_n+V_limit+8,F>=16,V_n>=1,F+16=E,F+16=C,F+16=V_0,D=5] 
* CE 55: eval_inflate_stored_6(V_n,V_limit,V_0,B) = 1+ eval_inflate_stored_bb1_in(V_n,V_limit,C,D,V_n,V_limit,E):1+ eval_inflate_stored_12(V_n,V_limit,F,B):9
     [V_limit+8*V_n+7>=F,F>=V_limit+16,F>=16,V_n>=2,F+16=E,F+16=C,F+16=V_0,D=5] 
* CE 56: eval_inflate_stored_6(V_n,V_limit,V_0,B) = 1+ eval_inflate_stored_bb1_in(V_n,V_limit,C,D,V_n,V_limit,E):1+ eval_inflate_stored_12(V_n,V_limit,F,B):10
     [F>=16,F+16=E,F+16=C,F+16=V_0,D=5] 
* CE 57: eval_inflate_stored_6(V_n,V_limit,V_0,B) = 1+ eval_inflate_stored_bb1_in(V_n,V_limit,V_0,C,V_n,V_limit,D):2+ eval_inflate_stored_12(V_n,V_limit,E,B):1
     [E+8>=V_0,E>=0,7>=E,0>=V_n,E+16=D,C=5] 
* CE 58: eval_inflate_stored_6(V_n,V_limit,V_0,B) = 1+ eval_inflate_stored_bb1_in(V_n,V_limit,V_0,C,V_n,V_limit,D):2+ eval_inflate_stored_12(V_n,V_limit,E,B):3
     [V_limit+8*V_n>=9,E+8>=V_0,E>=0,V_n>=2,7>=E,7>=V_limit,E+16=D,C=5] 
* CE 59: eval_inflate_stored_6(V_n,V_limit,V_0,B) = 1+ eval_inflate_stored_bb1_in(V_n,V_limit,V_0,C,V_n,V_limit,D):2+ eval_inflate_stored_12(V_n,V_limit,E,B):4
     [E+8>=V_0,E>=0,7>=E,E+16=D,C=5] 
* CE 60: eval_inflate_stored_6(V_n,V_limit,V_0,B) = 1+ eval_inflate_stored_bb1_in(V_n,V_limit,V_0,C,V_n,V_limit,D):2+ eval_inflate_stored_12(V_n,V_limit,E,B):5
     [E+8>=V_0,E>=0,V_limit>=1,V_n>=1,7>=E,E+16=D,C=5] 
* CE 61: eval_inflate_stored_6(V_n,V_limit,V_0,B) = 1+ eval_inflate_stored_bb1_in(V_n,V_limit,V_0,C,V_n,V_limit,D):2+ eval_inflate_stored_12(V_n,V_limit,E,B):6
     [E+8>=V_0,15>=8*V_n+V_limit,E>=0,V_n>=1,7>=E,E+16=D,C=5] 

### Cost equations --> "Loop" of eval_inflate_stored_6/4 
* CEs [56] --> Loop 45 
* CEs [55] --> Loop 46 
* CEs [54] --> Loop 47 
* CEs [53] --> Loop 48 
* CEs [61] --> Loop 49 
* CEs [60] --> Loop 50 
* CEs [59] --> Loop 51 
* CEs [50] --> Loop 52 
* CEs [52] --> Loop 53 
* CEs [51] --> Loop 54 
* CEs [58] --> Loop 55 
* CEs [49] --> Loop 56 
* CEs [48] --> Loop 57 
* CEs [57] --> Loop 58 
* CEs [47] --> Loop 59 

#### Loops of eval_inflate_stored_6/4 
* Loop 45: eval_inflate_stored_6(V_n,V_limit,V_0,B) [V_0>=32] 
* Loop 46: eval_inflate_stored_6(V_n,V_limit,V_0,B) [V_limit+8*V_n+23>=V_0,V_0>=V_limit+32,V_0>=32,V_n>=2] 
* Loop 47: eval_inflate_stored_6(V_n,V_limit,V_0,B) [V_0>=8*V_n+V_limit+24,V_0>=32,V_n>=1] 
* Loop 48: eval_inflate_stored_6(V_n,V_limit,V_0,B) [V_limit+31>=V_0,V_0>=32,V_n>=1] 
* Loop 49: eval_inflate_stored_6(V_n,V_limit,V_0,B) [15>=8*V_n+V_limit,V_n>=1,15>=V_0] 
* Loop 50: eval_inflate_stored_6(V_n,V_limit,V_0,B) [V_limit>=1,V_n>=1,15>=V_0] 
* Loop 51: eval_inflate_stored_6(V_n,V_limit,V_0,B) [15>=V_0] 
* Loop 52: eval_inflate_stored_6(V_n,V_limit,V_0,B) [V_0>=16,31>=V_0] 
* Loop 53: eval_inflate_stored_6(V_n,V_limit,V_0,B) [15>=8*V_n+V_limit,V_0>=16,V_n>=1,31>=V_0] 
* Loop 54: eval_inflate_stored_6(V_n,V_limit,V_0,B) [V_limit+23>=V_0,V_0>=16,V_limit>=1,V_n>=1,31>=V_0] 
* Loop 55: eval_inflate_stored_6(V_n,V_limit,V_0,B) [V_limit+8*V_n>=9,V_n>=2,15>=V_0,7>=V_limit] 
* Loop 56: eval_inflate_stored_6(V_n,V_limit,V_0,B) [V_limit+8*V_n+15>=V_0,V_limit+8*V_n>=9,V_0>=16,V_n>=2,31>=V_0,7>=V_limit] 
* Loop 57: eval_inflate_stored_6(V_n,V_limit,V_0,B) [V_0>=32,0>=V_n] 
* Loop 58: eval_inflate_stored_6(V_n,V_limit,V_0,B) [15>=V_0,0>=V_n] 
* Loop 59: eval_inflate_stored_6(V_n,V_limit,V_0,B) [V_0>=16,31>=V_0,0>=V_n] 

### Ranking functions of CR eval_inflate_stored_6(V_n,V_limit,V_0,B) 

#### Partial ranking functions of CR eval_inflate_stored_6(V_n,V_limit,V_0,B) 


### Resulting Chains:eval_inflate_stored_6(V_n,V_limit,V_0,B) 
* [59]
* [58]
* [57]
* [56]
* [55]
* [54]
* [53]
* [52]
* [51]
* [50]
* [49]
* [48]
* [47]
* [46]
* [45]


### Merging Chains  eval_inflate_stored_6/4 into  External patterns of execution 
* [[59]] --> 1 
* [[58]] --> 2 
* [[57]] --> 3 
* [[56]] --> 4 
* [[55]] --> 5 
* [[54]] --> 6 
* [[53]] --> 7 
* [[52]] --> 8 
* [[51]] --> 9 
* [[50]] --> 10 
* [[49]] --> 11 
* [[48]] --> 12 
* [[47]] --> 13 
* [[46]] --> 14 
* [[45]] --> 15 


### Specialization of cost equations eval_inflate_stored_start/4 
* CE 1 is refined into CE [62,63,64,65,66,67,68,69,70,71,72,73,74,75,76] 


#### Refined cost equations eval_inflate_stored_start/4 
* CE 62: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 0+ eval_inflate_stored_6(V_n,V_limit,C,B):1
     [C>=16,31>=C,0>=V_n,V_n+C=V_k] 
* CE 63: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 0+ eval_inflate_stored_6(V_n,V_limit,C,B):2
     [15>=C,0>=V_n,V_n+C=V_k] 
* CE 64: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 0+ eval_inflate_stored_6(V_n,V_limit,C,B):3
     [C>=32,0>=V_n,V_n+C=V_k] 
* CE 65: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 0+ eval_inflate_stored_6(V_n,V_limit,C,B):4
     [V_limit+8*V_n+15>=C,V_limit+8*V_n>=9,C>=16,V_n>=2,31>=C,7>=V_limit,V_n+C=V_k] 
* CE 66: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 0+ eval_inflate_stored_6(V_n,V_limit,C,B):5
     [V_limit+8*V_n>=9,V_n>=2,15>=C,7>=V_limit,V_n+C=V_k] 
* CE 67: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 0+ eval_inflate_stored_6(V_n,V_limit,C,B):6
     [V_limit+23>=C,C>=16,V_limit>=1,V_n>=1,31>=C,V_n+C=V_k] 
* CE 68: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 0+ eval_inflate_stored_6(V_n,V_limit,C,B):7
     [15>=8*V_n+V_limit,C>=16,V_n>=1,31>=C,V_n+C=V_k] 
* CE 69: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 0+ eval_inflate_stored_6(V_n,V_limit,C,B):8
     [C>=16,31>=C,V_n+C=V_k] 
* CE 70: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 0+ eval_inflate_stored_6(V_n,V_limit,C,B):9
     [15>=C,V_n+C=V_k] 
* CE 71: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 0+ eval_inflate_stored_6(V_n,V_limit,C,B):10
     [V_limit>=1,V_n>=1,15>=C,V_n+C=V_k] 
* CE 72: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 0+ eval_inflate_stored_6(V_n,V_limit,C,B):11
     [15>=8*V_n+V_limit,V_n>=1,15>=C,V_n+C=V_k] 
* CE 73: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 0+ eval_inflate_stored_6(V_n,V_limit,C,B):12
     [V_limit+31>=C,C>=32,V_n>=1,V_n+C=V_k] 
* CE 74: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 0+ eval_inflate_stored_6(V_n,V_limit,C,B):13
     [C>=8*V_n+V_limit+24,C>=32,V_n>=1,V_n+C=V_k] 
* CE 75: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 0+ eval_inflate_stored_6(V_n,V_limit,C,B):14
     [V_limit+8*V_n+23>=C,C>=V_limit+32,C>=32,V_n>=2,V_n+C=V_k] 
* CE 76: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 0+ eval_inflate_stored_6(V_n,V_limit,C,B):15
     [C>=32,V_n+C=V_k] 

### Cost equations --> "Loop" of eval_inflate_stored_start/4 
* CEs [70] --> Loop 60 
* CEs [76] --> Loop 61 
* CEs [69] --> Loop 62 
* CEs [75] --> Loop 63 
* CEs [73] --> Loop 64 
* CEs [74] --> Loop 65 
* CEs [72] --> Loop 66 
* CEs [68] --> Loop 67 
* CEs [71] --> Loop 68 
* CEs [67] --> Loop 69 
* CEs [66] --> Loop 70 
* CEs [65] --> Loop 71 
* CEs [63] --> Loop 72 
* CEs [64] --> Loop 73 
* CEs [62] --> Loop 74 

#### Loops of eval_inflate_stored_start/4 
* Loop 60: eval_inflate_stored_start(V_n,V_k,V_limit,B) [V_n+15>=V_k] 
* Loop 61: eval_inflate_stored_start(V_n,V_k,V_limit,B) [V_k>=V_n+32] 
* Loop 62: eval_inflate_stored_start(V_n,V_k,V_limit,B) [V_n+31>=V_k,V_k>=V_n+16] 
* Loop 63: eval_inflate_stored_start(V_n,V_k,V_limit,B) [V_limit+9*V_n+23>=V_k,V_k>=V_n+V_limit+32,V_k>=V_n+32,V_n>=2] 
* Loop 64: eval_inflate_stored_start(V_n,V_k,V_limit,B) [V_n+V_limit+31>=V_k,V_k>=V_n+32,V_n>=1] 
* Loop 65: eval_inflate_stored_start(V_n,V_k,V_limit,B) [V_k>=9*V_n+V_limit+24,V_k>=V_n+32,V_n>=1] 
* Loop 66: eval_inflate_stored_start(V_n,V_k,V_limit,B) [V_n+15>=V_k,15>=8*V_n+V_limit,V_n>=1] 
* Loop 67: eval_inflate_stored_start(V_n,V_k,V_limit,B) [V_n+31>=V_k,V_k>=V_n+16,15>=8*V_n+V_limit,V_n>=1] 
* Loop 68: eval_inflate_stored_start(V_n,V_k,V_limit,B) [V_n+15>=V_k,V_limit>=1,V_n>=1] 
* Loop 69: eval_inflate_stored_start(V_n,V_k,V_limit,B) [V_n+V_limit+23>=V_k,V_n+31>=V_k,V_k>=V_n+16,V_limit>=1,V_n>=1] 
* Loop 70: eval_inflate_stored_start(V_n,V_k,V_limit,B) [V_limit+8*V_n>=9,V_n+15>=V_k,V_n>=2,7>=V_limit] 
* Loop 71: eval_inflate_stored_start(V_n,V_k,V_limit,B) [V_limit+9*V_n+15>=V_k,V_limit+8*V_n>=9,V_n+31>=V_k,V_k>=V_n+16,V_n>=2,7>=V_limit] 
* Loop 72: eval_inflate_stored_start(V_n,V_k,V_limit,B) [V_n+15>=V_k,0>=V_n] 
* Loop 73: eval_inflate_stored_start(V_n,V_k,V_limit,B) [V_k>=V_n+32,0>=V_n] 
* Loop 74: eval_inflate_stored_start(V_n,V_k,V_limit,B) [V_n+31>=V_k,V_k>=V_n+16,0>=V_n] 

### Ranking functions of CR eval_inflate_stored_start(V_n,V_k,V_limit,B) 

#### Partial ranking functions of CR eval_inflate_stored_start(V_n,V_k,V_limit,B) 


### Resulting Chains:eval_inflate_stored_start(V_n,V_k,V_limit,B) 
* [74]
* [73]
* [72]
* [71]
* [70]
* [69]
* [68]
* [67]
* [66]
* [65]
* [64]
* [63]
* [62]
* [61]
* [60]


### Merging Chains  eval_inflate_stored_start/4 into  External patterns of execution 
* [[74]] --> 1 
* [[73]] --> 2 
* [[72]] --> 3 
* [[71]] --> 4 
* [[70]] --> 5 
* [[69]] --> 6 
* [[68]] --> 7 
* [[67]] --> 8 
* [[66]] --> 9 
* [[65]] --> 10 
* [[64]] --> 11 
* [[63]] --> 12 
* [[62]] --> 13 
* [[61]] --> 14 
* [[60]] --> 15 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 16 

#### Computing cost of phase [16] 

#### Simplifying cost structure of CE 17 

#### Cost of loops [16] 

 * loop 16:eval_inflate_stored_bb1_in(V_n,V_limit,V__01,B,C,D,E) -> [eval_inflate_stored_bb1_in(V_n',V_limit',V__01',B',C',D',E')] 
1
##### Pending set eval_inflate_stored_bb1_in(V_n,V_limit,V__01,B,C,D,E)
* Psum in Loop 16: [it(16)=<1]

###### Computing sum for it(16)=<1  in Loop 16 
   - Applying inductive sum strategy 
     - head Candidate: -V__01/8+2 
     - head Candidate: -V__01/8+2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -V__01/8+2 
     - tail Candidate: -V__01/8+2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(16)=< -V__01/8+2,it(16)=< -V__01/8+2,it(16)=< -V__01/8+V__01'/8,it(16)=< -V__01/8+V__01'/8] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [16] 

#### Simplifying cost structure of phase [16] 

#### Cost of phase [16]:eval_inflate_stored_bb1_in(V_n,V_limit,V__01,B,C,D,E) -> [eval_inflate_stored_bb1_in(V_n',V_limit',V__01',B',C',D',E')] 
1*it(16)+0
  Such that:it(16) =< -V__01/8+2
it(16) =< -V__01/8+V__01'/8

#### Simplifying cost structure of chain [[16],17] 

#### Cost of chains of eval_inflate_stored_bb1_in(V_n,V_limit,V__01,B,C,D,E):
* Chain [[16],17]: 1*it(16)+0
  Such that:it(16) =< -V__01/8+2

  with precondition: [B=5,V_n=C,V_limit=D,23>=E,E>=16,E>=V__01+8] 

* Chain [17]: 0
  with precondition: [B=5,C=V_n,D=V_limit,V__01=E,V__01>=16] 


#### Simplifying cost structure of CE 18 

#### Computing cost of phase [18] 

#### Simplifying cost structure of CE 19 

#### Cost of loops [18] 

 * loop 18:eval_inflate_stored_bb4_in(V_n,V_limit,V__1,B,C,D,E) -> [eval_inflate_stored_bb4_in(V_n',V_limit',V__1',B',C',D',E')] 
1
##### Pending set eval_inflate_stored_bb4_in(V_n,V_limit,V__1,B,C,D,E)
* Psum in Loop 18: [it(18)=<1]

###### Computing sum for it(18)=<1  in Loop 18 
   - Applying inductive sum strategy 
     - head Candidate: -V__1/8+2 
     - head Candidate: -V__1/8+2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -V__1/8+2 
     - tail Candidate: -V__1/8+2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(18)=< -V__1/8+2,it(18)=< -V__1/8+2,it(18)=< -V__1/8+V__1'/8,it(18)=< -V__1/8+V__1'/8] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [18] 

#### Simplifying cost structure of phase [18] 

#### Cost of phase [18]:eval_inflate_stored_bb4_in(V_n,V_limit,V__1,B,C,D,E) -> [eval_inflate_stored_bb4_in(V_n',V_limit',V__1',B',C',D',E')] 
1*it(18)+0
  Such that:it(18) =< -V__1/8+2
it(18) =< -V__1/8+V__1'/8

#### Simplifying cost structure of chain [[18],19] 

#### Cost of chains of eval_inflate_stored_bb4_in(V_n,V_limit,V__1,B,C,D,E):
* Chain [[18],19]: 1*it(18)+0
  Such that:it(18) =< -V__1/8+2

  with precondition: [B=4,V_n=C,V_limit=D,23>=E,E>=16,E>=V__1+8] 

* Chain [19]: 0
  with precondition: [B=4,C=V_n,D=V_limit,V__1=E,V__1>=16] 


#### Simplifying cost structure of CE 20 

#### Computing cost of phase [20] 

#### Simplifying cost structure of CE 21 

#### Cost of loops [20] 

 * loop 20:eval_inflate_stored_bb9_in(V_limit,V__2,V__0,V_9,V__3,B,C,D,E,F,G) -> [eval_inflate_stored_bb9_in(V_limit',V__2',V__0',V_9',V__3',B',C',D',E',F',G')] 
1
##### Pending set eval_inflate_stored_bb9_in(V_limit,V__2,V__0,V_9,V__3,B,C,D,E,F,G)
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for it(20)=<1  in Loop 20 
   - Applying inductive sum strategy 
     - head Candidate: V_limit/8-V__3/8 
     - head Candidate: V_limit/8-V__3/8 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_limit/8-V__3/8 
     - tail Candidate: V_limit/8-V__3/8 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(20)=<V_limit/8-V__3/8,it(20)=<V_limit/8-V__3/8,it(20)=<V_limit/8-V__3/8-V_limit'/8+V__3'/8,it(20)=<V_limit/8-V__3/8-V_limit'/8+V__3'/8] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [20] 

#### Simplifying cost structure of phase [20] 

#### Cost of phase [20]:eval_inflate_stored_bb9_in(V_limit,V__2,V__0,V_9,V__3,B,C,D,E,F,G) -> [eval_inflate_stored_bb9_in(V_limit',V__2',V__0',V_9',V__3',B',C',D',E',F',G')] 
1*it(20)+0
  Such that:it(20) =< V_limit/8-V__3/8
it(20) =< V_limit/8-V__3/8-V_limit'/8+V__3'/8

#### Simplifying cost structure of chain [[20],21] 

#### Cost of chains of eval_inflate_stored_bb9_in(V_limit,V__2,V__0,V_9,V__3,B,C,D,E,F,G):
* Chain [[20],21]: 1*it(20)+0
  Such that:it(20) =< V_limit/8-V__3/8

  with precondition: [B=2,V__0=V_9+1,V_limit=C,V__2=D,V__0=E,V__0=F+1,V__0>=1,G>=V_limit,V__3>=V__2,G>=V__3+8,V_limit+7>=G] 

* Chain [21]: 0
  with precondition: [B=2,V__0=V_9+1,V_limit=C,V__2=D,V__0=E,V__0=F+1,V__3=G,V__0>=1,V__3>=V_limit,V__3>=V__2] 


#### Simplifying cost structure of CE 22 

#### Computing cost of phase [22] 
 * Renamed intermediate variables: 
[(eq(24,1),it(20))>>s(1)]

#### Simplifying cost structure of CE 24 
 * Renamed intermediate variables: 
[(it(22),s(1))>>s(2)]

#### Cost of loops [22] 

 * loop 22:eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) -> [eval_inflate_stored_bb8_in(V_limit',V__2',V__0',B')] 
1*s(2)+2
  Such that:s(2) =< V_limit/8-V__2/8

##### Pending set eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B)
* Psum in Loop 22: [it(22)=<1,s(3)=<V_limit/8-V__2/8]

###### Computing sum for it(22)=<1  in Loop 22 
   - Applying inductive sum strategy 
     - head Candidate: V__0 
     - head Candidate: V__0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V__0 
     - tail Candidate: V__0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(22)=<V__0,it(22)=<V__0,it(22)=<V__0-V__0',it(22)=<V__0-V__0'] 

##### Pending set eval_inflate_stored_0(V_n,V_k,V_limit,B)
* Psum in Loop 22: [s(3)=<V_limit/8-V__2/8]

###### Computing sum for s(3)=<V_limit/8-V__2/8  in Loop 22 
   - Applying inductive sum strategy 
     - head Candidate: V_limit/8-V__2/8+V__0-1 
     - tail Candidate: V_limit/8-V__2/8+V__0-1 
 * Adding constraints: [s(3)=<V_limit/8-V__2/8+V__0-1,s(3)=<V_limit/8-V__2/8+V__0-V_limit'/8+V__2'/8-V__0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [22] 

#### Simplifying cost structure of phase [22] 

#### Cost of phase [22]:eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) -> [eval_inflate_stored_bb8_in(V_limit',V__2',V__0',B')] 
2*it(22)+1*s(3)+0
  Such that:s(3) =< V_limit/8-V__2/8+V__0
s(3) =< V_limit/8-V__2/8+V__0-V_limit'/8+V__2'/8-V__0'
it(22) =< V__0
it(22) =< V__0-V__0'

#### Simplifying cost structure of chain [[22],24] 

#### Computing cost of phase [23] 

#### Simplifying cost structure of CE 23 

#### Cost of loops [23] 

 * loop 23:eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) -> [eval_inflate_stored_bb8_in(V_limit',V__2',V__0',B')] 
2
##### Pending set eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B)
* Psum in Loop 23: [it(23)=<1]

###### Computing sum for it(23)=<1  in Loop 23 
   - Applying inductive sum strategy 
     - head Candidate: V__0 
     - head Candidate: -V_limit/8+V__2/8+1/8 
     - head Candidate: V__0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -V_limit/8+V__2/8+1/8 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V__0 
     - tail Candidate: -V_limit/8+V__2/8+1/8 
     - tail Candidate: V__0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -V_limit/8+V__2/8+1/8 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(23)=<V__0,it(23)=< -V_limit/8+V__2/8+1/8,it(23)=<V__0,it(23)=< -V_limit/8+V__2/8+1/8,it(23)=<V__0-V__0',it(23)=< -V_limit/8+V__2/8+V_limit'/8-V__2'/8,it(23)=<V__0-V__0',it(23)=< -V_limit/8+V__2/8+V_limit'/8-V__2'/8] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [23] 

#### Simplifying cost structure of phase [23] 

#### Cost of phase [23]:eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) -> [eval_inflate_stored_bb8_in(V_limit',V__2',V__0',B')] 
2*it(23)+0
  Such that:it(23) =< -V_limit/8+V__2/8+1/8
it(23) =< -V_limit/8+V__2/8+V_limit'/8-V__2'/8
it(23) =< V__0
it(23) =< V__0-V__0'

#### Simplifying cost structure of chain [[23],[22],24] 

#### Found solution for phase  [23] in the cache 

#### Cost of phase [23]:eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) -> [eval_inflate_stored_bb8_in(V_limit',V__2',V__0',B')] 
2*it(23)+0
  Such that:it(23) =< -V_limit/8+V__2/8+1/8
it(23) =< -V_limit/8+V__2/8+V_limit'/8-V__2'/8
it(23) =< V__0
it(23) =< V__0-V__0'

#### Simplifying cost structure of chain [[23],24] 

#### Cost of chains of eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B):
* Chain [[23],[22],24]: 2*it(22)+2*it(23)+1*s(3)+0
  Such that:it(23) =< -V_limit/8+V__2/8+1/8
it(22) =< V__0
aux(1) =< V_limit/8-V__2/8+V__0
it(22) =< aux(1)
s(3) =< aux(1)

  with precondition: [B=3,V__0>=2,V__2>=V_limit,V_limit+8*V__0>=V__2+9] 

* Chain [[23],24]: 2*it(23)+0
  Such that:it(23) =< -V_limit/8+V__2/8+1/8
it(23) =< V__0

  with precondition: [B=3,V__0>=1,V__2+8>=8*V__0+V_limit] 

* Chain [[22],24]: 2*it(22)+1*s(3)+0
  Such that:s(3) =< V_limit/8-V__2/8+V__0
it(22) =< V__0

  with precondition: [B=3,V__0>=1,V_limit>=V__2+1] 

* Chain [24]: 0
  with precondition: [B=3,0>=V__0] 


#### Simplifying cost structure of CE 25 
 * Renamed intermediate variables: 
[(eq(26,1),s(3))>>s(4),(eq(26,1),it(22))>>s(5)]

#### Simplifying cost structure of CE 26 
 * Renamed intermediate variables: 
[(eq(27,1),it(23))>>s(6)]

#### Simplifying cost structure of CE 27 
 * Renamed intermediate variables: 
[(eq(28,1),it(23))>>s(7),(eq(28,1),it(22))>>s(8),(eq(28,1),aux(1))>>s(9),(eq(28,1),s(3))>>s(10)]

#### Simplifying cost structure of CE 28 

#### Cost of chains of eval_inflate_stored_21(V_n,V_limit,V_8,B):
* Chain [28]: 1
  with precondition: [0>=V_n] 

* Chain [27]: 1*s(4)+2*s(5)+1
  Such that:s(5) =< V_n
s(4) =< V_n+V_limit/8-V_8/8

  with precondition: [V_n>=1,V_limit>=V_8+1] 

* Chain [26]: 2*s(6)+1
  Such that:s(6) =< V_n
s(6) =< -V_limit/8+V_8/8+1/8

  with precondition: [V_n>=1,V_8+8>=8*V_n+V_limit] 

* Chain [25]: 2*s(7)+2*s(8)+1*s(10)+1
  Such that:s(8) =< V_n
s(9) =< V_n+V_limit/8-V_8/8
s(7) =< -V_limit/8+V_8/8+1/8
s(8) =< s(9)
s(10) =< s(9)

  with precondition: [V_n>=2,V_8>=V_limit,V_limit+8*V_n>=V_8+9] 


#### Simplifying cost structure of CE 31 
 * Renamed intermediate variables: 
[(eq(32,1),s(5))>>s(11),(eq(32,1),s(4))>>s(12)]

#### Simplifying cost structure of CE 32 
 * Renamed intermediate variables: 
[(eq(33,1),s(6))>>s(13)]

#### Simplifying cost structure of CE 33 
 * Renamed intermediate variables: 
[(eq(34,1),s(8))>>s(14),(eq(34,1),s(9))>>s(15),(eq(34,1),s(7))>>s(16),(eq(34,1),s(10))>>s(17)]

#### Simplifying cost structure of CE 34 

#### Simplifying cost structure of CE 30 

#### Simplifying cost structure of CE 29 

#### Cost of chains of eval_inflate_stored_16(V_n,V_limit,V__1,V_6,B):
* Chain [34]: 1
  with precondition: [V_6=0,0>=V_n] 

* Chain [33]: 2*s(11)+1*s(12)+1
  Such that:s(11) =< V_n
s(12) =< V_n+V_limit/8-V__1/8+2

  with precondition: [V_6=0,V_n>=1,V_limit+15>=V__1] 

* Chain [32]: 2*s(13)+1
  Such that:s(13) =< V_n
s(13) =< -V_limit/8+V__1/8

  with precondition: [V_6=0,V_n>=1,V__1>=8*V_n+V_limit+8] 

* Chain [31]: 2*s(14)+2*s(16)+1*s(17)+1
  Such that:s(14) =< V_n
s(15) =< V_n+V_limit/8-V__1/8+2
s(16) =< -V_limit/8+V__1/8
s(14) =< s(15)
s(17) =< s(15)

  with precondition: [V_6=0,V_n>=2,V__1>=V_limit+16,V_limit+8*V_n+7>=V__1] 

* Chain [30]: 0
  with precondition: [0>=V_6+1] 

* Chain [29]: 0
  with precondition: [V_6>=1] 

 * Renamed intermediate variables: 
[(eq(41,1),it(18))>>s(18)]

#### Simplifying cost structure of CE 41 

#### Simplifying cost structure of CE 35 
 * Renamed intermediate variables: 
[(eq(44,1),it(18))>>s(19)]
 * Renamed intermediate variables: 
[(eq(44,2),s(14))>>s(20),(eq(44,2),s(15))>>s(21),(eq(44,2),s(16))>>s(22),(eq(44,2),s(17))>>s(23)]

#### Simplifying cost structure of CE 44 
 * Renamed intermediate variables: 
[(eq(45,1),it(18))>>s(24)]

#### Simplifying cost structure of CE 45 
 * Renamed intermediate variables: 
[(eq(46,1),it(18))>>s(25)]

#### Simplifying cost structure of CE 46 
 * Joined equivalent variables [s(24),s(25)] into s(24)
 * Renamed intermediate variables: 
[(eq(42,1),it(18))>>s(26)]
 * Renamed intermediate variables: 
[(eq(42,2),s(11))>>s(27),(eq(42,2),s(12))>>s(28)]

#### Simplifying cost structure of CE 42 
 * Renamed intermediate variables: 
[(eq(43,1),it(18))>>s(29)]
 * Renamed intermediate variables: 
[(eq(43,2),s(13))>>s(30)]

#### Simplifying cost structure of CE 43 
 * Renamed intermediate variables: 
[(eq(36,2),s(11))>>s(31),(eq(36,2),s(12))>>s(32)]

#### Simplifying cost structure of CE 36 
 * Renamed intermediate variables: 
[(eq(37,2),s(13))>>s(33)]

#### Simplifying cost structure of CE 37 
 * Renamed intermediate variables: 
[(eq(38,2),s(14))>>s(34),(eq(38,2),s(15))>>s(35),(eq(38,2),s(16))>>s(36),(eq(38,2),s(17))>>s(37)]

#### Simplifying cost structure of CE 38 

#### Simplifying cost structure of CE 39 

#### Simplifying cost structure of CE 40 

#### Cost of chains of eval_inflate_stored_12(V_n,V_limit,V_3,B):
* Chain [44]: 1*s(18)+2
  Such that:s(18) =< -V_3/8+2

  with precondition: [0>=V_n,15>=V_3] 

* Chain [43]: 2
  with precondition: [0>=V_n,V_3>=16] 

* Chain [42]: 1*s(19)+2*s(20)+2*s(22)+1*s(23)+2
  Such that:s(20) =< V_n
s(21) =< V_n+V_limit/8-V_3/8+1
s(22) =< -V_limit/8+23/8
s(19) =< -V_3/8+2
aux(2) =< V_n+2
s(21) =< aux(2)
s(22) =< aux(2)
s(20) =< s(21)
s(23) =< s(21)

  with precondition: [7>=V_limit,15>=V_3,V_n>=2,V_limit+8*V_n>=9,V_limit+8*V_n>=V_3+1] 

* Chain [41]: 2*s(24)+1
  Such that:aux(3) =< -V_3/8+2
s(24) =< aux(3)

  with precondition: [15>=V_3] 

* Chain [40]: 1*s(26)+2*s(27)+1*s(28)+2
  Such that:s(27) =< V_n
s(28) =< V_n+V_limit/8
s(28) =< V_n+V_limit/8-V_3/8+1
s(26) =< -V_3/8+2

  with precondition: [15>=V_3,V_n>=1,V_limit>=1,V_limit+7>=V_3] 

* Chain [39]: 1*s(29)+2*s(30)+2
  Such that:s(30) =< V_n
s(29) =< -V_3/8+2

  with precondition: [15>=V_3,V_n>=1,15>=8*V_n+V_limit] 

* Chain [38]: 2*s(31)+1*s(32)+2
  Such that:s(31) =< V_n
s(32) =< V_n+V_limit/8-V_3/8+2

  with precondition: [V_n>=1,V_3>=16,V_limit+15>=V_3] 

* Chain [37]: 2*s(33)+2
  Such that:s(33) =< V_n

  with precondition: [V_n>=1,V_3>=16,V_3>=8*V_n+V_limit+8] 

* Chain [36]: 2*s(34)+2*s(36)+1*s(37)+2
  Such that:s(34) =< V_n
s(35) =< V_n+V_limit/8-V_3/8+2
s(36) =< -V_limit/8+V_3/8
s(34) =< s(35)
s(37) =< s(35)

  with precondition: [V_n>=2,V_3>=16,V_3>=V_limit+16,V_limit+8*V_n+7>=V_3] 

* Chain [35]: 1
  with precondition: [V_3>=16] 

 * Renamed intermediate variables: 
[(eq(47,2),s(18))>>s(38)]

#### Simplifying cost structure of CE 47 
 * Renamed intermediate variables: 
[(eq(57,1),it(16))>>s(39)]
 * Renamed intermediate variables: 
[(eq(57,2),s(18))>>s(40)]

#### Simplifying cost structure of CE 57 

#### Simplifying cost structure of CE 48 
 * Renamed intermediate variables: 
[(eq(49,2),s(20))>>s(41),(eq(49,2),s(21))>>s(42),(eq(49,2),s(22))>>s(43),(eq(49,2),s(19))>>s(44),(eq(49,2),aux(2))>>s(45),(eq(49,2),s(23))>>s(46)]

#### Simplifying cost structure of CE 49 
 * Renamed intermediate variables: 
[(eq(58,1),it(16))>>s(47)]
 * Renamed intermediate variables: 
[(eq(58,2),s(20))>>s(48),(eq(58,2),s(21))>>s(49),(eq(58,2),s(22))>>s(50),(eq(58,2),s(19))>>s(51),(eq(58,2),aux(2))>>s(52),(eq(58,2),s(23))>>s(53)]

#### Simplifying cost structure of CE 58 
 * Renamed intermediate variables: 
[(eq(51,2),s(27))>>s(54),(eq(51,2),s(28))>>s(55),(eq(51,2),s(26))>>s(56)]

#### Simplifying cost structure of CE 51 
 * Renamed intermediate variables: 
[(eq(52,2),s(30))>>s(57),(eq(52,2),s(29))>>s(58)]

#### Simplifying cost structure of CE 52 
 * Renamed intermediate variables: 
[(eq(50,2),aux(3))>>s(59),(eq(50,2),s(24))>>s(60)]

#### Simplifying cost structure of CE 50 
 * Renamed intermediate variables: 
[(eq(59,1),it(16))>>s(61)]
 * Renamed intermediate variables: 
[(eq(59,2),aux(3))>>s(62),(eq(59,2),s(24))>>s(63)]

#### Simplifying cost structure of CE 59 
 * Renamed intermediate variables: 
[(eq(60,1),it(16))>>s(64)]
 * Renamed intermediate variables: 
[(eq(60,2),s(27))>>s(65),(eq(60,2),s(28))>>s(66),(eq(60,2),s(26))>>s(67)]

#### Simplifying cost structure of CE 60 
 * Renamed intermediate variables: 
[(eq(61,1),it(16))>>s(68)]
 * Renamed intermediate variables: 
[(eq(61,2),s(30))>>s(69),(eq(61,2),s(29))>>s(70)]

#### Simplifying cost structure of CE 61 
 * Renamed intermediate variables: 
[(eq(53,2),s(31))>>s(71),(eq(53,2),s(32))>>s(72)]

#### Simplifying cost structure of CE 53 
 * Renamed intermediate variables: 
[(eq(54,2),s(33))>>s(73)]

#### Simplifying cost structure of CE 54 
 * Renamed intermediate variables: 
[(eq(55,2),s(34))>>s(74),(eq(55,2),s(35))>>s(75),(eq(55,2),s(36))>>s(76),(eq(55,2),s(37))>>s(77)]

#### Simplifying cost structure of CE 55 

#### Simplifying cost structure of CE 56 

#### Cost of chains of eval_inflate_stored_6(V_n,V_limit,V_0,B):
* Chain [59]: 1*s(38)+3
  Such that:s(38) =< -V_0/8+4

  with precondition: [0>=V_n,31>=V_0,V_0>=16] 

* Chain [58]: 1*s(39)+1*s(40)+3
  Such that:s(40) =< 2
s(39) =< -V_0/8+2
s(40) =< -V_0/8+3

  with precondition: [0>=V_n,15>=V_0] 

* Chain [57]: 3
  with precondition: [0>=V_n,V_0>=32] 

* Chain [56]: 2*s(41)+2*s(43)+1*s(44)+1*s(46)+3
  Such that:s(41) =< V_n
s(45) =< V_n+2
s(42) =< V_n+V_limit/8-V_0/8+3
s(43) =< -V_limit/8+23/8
s(44) =< -V_0/8+4
s(42) =< s(45)
s(43) =< s(45)
s(41) =< s(42)
s(46) =< s(42)

  with precondition: [7>=V_limit,31>=V_0,V_n>=2,V_0>=16,V_limit+8*V_n>=9,V_limit+8*V_n+15>=V_0] 

* Chain [55]: 1*s(47)+2*s(48)+2*s(50)+1*s(51)+1*s(53)+3
  Such that:s(51) =< 2
s(48) =< V_n
s(52) =< V_n+2
s(49) =< V_n+V_limit/8+1
s(49) =< V_n+V_limit/8-V_0/8+2
s(50) =< -V_limit/8+23/8
s(47) =< -V_0/8+2
s(51) =< -V_0/8+3
s(49) =< s(52)
s(50) =< s(52)
s(48) =< s(49)
s(53) =< s(49)

  with precondition: [7>=V_limit,15>=V_0,V_n>=2,V_limit+8*V_n>=9] 

* Chain [54]: 2*s(54)+1*s(55)+1*s(56)+3
  Such that:s(54) =< V_n
s(55) =< V_n+V_limit/8
s(55) =< V_n+V_limit/8-V_0/8+3
s(56) =< -V_0/8+4

  with precondition: [31>=V_0,V_n>=1,V_limit>=1,V_0>=16,V_limit+23>=V_0] 

* Chain [53]: 2*s(57)+1*s(58)+3
  Such that:s(57) =< V_n
s(58) =< -V_0/8+4

  with precondition: [31>=V_0,V_n>=1,V_0>=16,15>=8*V_n+V_limit] 

* Chain [52]: 2*s(60)+2
  Such that:s(59) =< -V_0/8+4
s(60) =< s(59)

  with precondition: [31>=V_0,V_0>=16] 

* Chain [51]: 1*s(61)+2*s(63)+2
  Such that:s(62) =< 2
s(61) =< -V_0/8+2
s(62) =< -V_0/8+3
s(63) =< s(62)

  with precondition: [15>=V_0] 

* Chain [50]: 1*s(64)+2*s(65)+1*s(66)+1*s(67)+3
  Such that:s(67) =< 2
s(65) =< V_n
s(66) =< V_n+V_limit/8
s(64) =< -V_0/8+2
s(67) =< -V_0/8+3

  with precondition: [15>=V_0,V_n>=1,V_limit>=1] 

* Chain [49]: 1*s(68)+2*s(69)+1*s(70)+3
  Such that:s(70) =< 2
s(69) =< V_n
s(68) =< -V_0/8+2
s(70) =< -V_0/8+3

  with precondition: [15>=V_0,V_n>=1,15>=8*V_n+V_limit] 

* Chain [48]: 2*s(71)+1*s(72)+3
  Such that:s(71) =< V_n
s(72) =< V_n+V_limit/8-V_0/8+4

  with precondition: [V_n>=1,V_0>=32,V_limit+31>=V_0] 

* Chain [47]: 2*s(73)+3
  Such that:s(73) =< V_n

  with precondition: [V_n>=1,V_0>=32,V_0>=8*V_n+V_limit+24] 

* Chain [46]: 2*s(74)+2*s(76)+1*s(77)+3
  Such that:s(74) =< V_n
s(75) =< V_n+V_limit/8-V_0/8+4
s(76) =< -V_limit/8+V_0/8
s(74) =< s(75)
s(77) =< s(75)

  with precondition: [V_n>=2,V_0>=32,V_0>=V_limit+32,V_limit+8*V_n+23>=V_0] 

* Chain [45]: 2
  with precondition: [V_0>=32] 

 * Renamed intermediate variables: 
[(eq(62,1),s(38))>>s(78)]

#### Simplifying cost structure of CE 62 

#### Simplifying cost structure of CE 64 
 * Renamed intermediate variables: 
[(eq(63,1),s(40))>>s(79),(eq(63,1),s(39))>>s(80)]

#### Simplifying cost structure of CE 63 
 * Renamed intermediate variables: 
[(eq(65,1),s(41))>>s(81),(eq(65,1),s(45))>>s(82),(eq(65,1),s(42))>>s(83),(eq(65,1),s(43))>>s(84),(eq(65,1),s(44))>>s(85),(eq(65,1),s(46))>>s(86)]

#### Simplifying cost structure of CE 65 
 * Renamed intermediate variables: 
[(eq(66,1),s(51))>>s(87),(eq(66,1),s(48))>>s(88),(eq(66,1),s(52))>>s(89),(eq(66,1),s(49))>>s(90),(eq(66,1),s(50))>>s(91),(eq(66,1),s(47))>>s(92),(eq(66,1),s(53))>>s(93)]

#### Simplifying cost structure of CE 66 
 * Renamed intermediate variables: 
[(eq(67,1),s(54))>>s(94),(eq(67,1),s(55))>>s(95),(eq(67,1),s(56))>>s(96)]

#### Simplifying cost structure of CE 67 
 * Renamed intermediate variables: 
[(eq(71,1),s(67))>>s(97),(eq(71,1),s(65))>>s(98),(eq(71,1),s(66))>>s(99),(eq(71,1),s(64))>>s(100)]

#### Simplifying cost structure of CE 71 
 * Renamed intermediate variables: 
[(eq(68,1),s(57))>>s(101),(eq(68,1),s(58))>>s(102)]

#### Simplifying cost structure of CE 68 
 * Renamed intermediate variables: 
[(eq(72,1),s(70))>>s(103),(eq(72,1),s(69))>>s(104),(eq(72,1),s(68))>>s(105)]

#### Simplifying cost structure of CE 72 
 * Renamed intermediate variables: 
[(eq(74,1),s(73))>>s(106)]

#### Simplifying cost structure of CE 74 
 * Renamed intermediate variables: 
[(eq(73,1),s(71))>>s(107),(eq(73,1),s(72))>>s(108)]

#### Simplifying cost structure of CE 73 
 * Renamed intermediate variables: 
[(eq(75,1),s(74))>>s(109),(eq(75,1),s(75))>>s(110),(eq(75,1),s(76))>>s(111),(eq(75,1),s(77))>>s(112)]

#### Simplifying cost structure of CE 75 
 * Renamed intermediate variables: 
[(eq(69,1),s(59))>>s(113),(eq(69,1),s(60))>>s(114)]

#### Simplifying cost structure of CE 69 

#### Simplifying cost structure of CE 76 
 * Renamed intermediate variables: 
[(eq(70,1),s(62))>>s(115),(eq(70,1),s(61))>>s(116),(eq(70,1),s(63))>>s(117)]

#### Simplifying cost structure of CE 70 

#### Cost of chains of eval_inflate_stored_start(V_n,V_k,V_limit,B):
* Chain [74]: 1*s(78)+3
  Such that:s(78) =< V_n/8-V_k/8+4

  with precondition: [0>=V_n,V_k>=V_n+16,V_n+31>=V_k] 

* Chain [73]: 3
  with precondition: [0>=V_n,V_k>=V_n+32] 

* Chain [72]: 1*s(79)+1*s(80)+3
  Such that:s(79) =< 2
s(80) =< V_n/8-V_k/8+2
s(79) =< V_n/8-V_k/8+3

  with precondition: [0>=V_n,V_n+15>=V_k] 

* Chain [71]: 2*s(81)+2*s(84)+1*s(85)+1*s(86)+3
  Such that:s(81) =< V_n
s(82) =< V_n+2
s(85) =< V_n/8-V_k/8+4
s(83) =< 9/8*V_n-V_k/8+V_limit/8+3
s(84) =< -V_limit/8+23/8
s(83) =< s(82)
s(84) =< s(82)
s(81) =< s(83)
s(86) =< s(83)

  with precondition: [7>=V_limit,V_n>=2,V_k>=V_n+16,V_n+31>=V_k,V_limit+8*V_n>=9,V_limit+9*V_n+15>=V_k] 

* Chain [70]: 1*s(87)+2*s(88)+2*s(91)+1*s(92)+1*s(93)+3
  Such that:s(87) =< 2
s(88) =< V_n
s(89) =< V_n+2
s(90) =< V_n+V_limit/8+1
s(92) =< V_n/8-V_k/8+2
s(87) =< V_n/8-V_k/8+3
s(90) =< 9/8*V_n-V_k/8+V_limit/8+2
s(91) =< -V_limit/8+23/8
s(90) =< s(89)
s(91) =< s(89)
s(88) =< s(90)
s(93) =< s(90)

  with precondition: [7>=V_limit,V_n>=2,V_n+15>=V_k,V_limit+8*V_n>=9] 

* Chain [69]: 2*s(94)+1*s(95)+1*s(96)+3
  Such that:s(94) =< V_n
s(95) =< V_n+V_limit/8
s(96) =< V_n/8-V_k/8+4
s(95) =< 9/8*V_n-V_k/8+V_limit/8+3

  with precondition: [V_n>=1,V_limit>=1,V_k>=V_n+16,V_n+31>=V_k,V_limit+V_n+23>=V_k] 

* Chain [68]: 1*s(97)+2*s(98)+1*s(99)+1*s(100)+3
  Such that:s(97) =< 2
s(98) =< V_n
s(99) =< V_n+V_limit/8
s(100) =< V_n/8-V_k/8+2
s(97) =< V_n/8-V_k/8+3

  with precondition: [V_n>=1,V_limit>=1,V_n+15>=V_k] 

* Chain [67]: 2*s(101)+1*s(102)+3
  Such that:s(101) =< V_n
s(102) =< V_n/8-V_k/8+4

  with precondition: [V_n>=1,15>=8*V_n+V_limit,V_k>=V_n+16,V_n+31>=V_k] 

* Chain [66]: 1*s(103)+2*s(104)+1*s(105)+3
  Such that:s(103) =< 2
s(104) =< V_n
s(105) =< V_n/8-V_k/8+2
s(103) =< V_n/8-V_k/8+3

  with precondition: [V_n>=1,15>=8*V_n+V_limit,V_n+15>=V_k] 

* Chain [65]: 2*s(106)+3
  Such that:s(106) =< V_n

  with precondition: [V_n>=1,V_k>=V_n+32,V_k>=9*V_n+V_limit+24] 

* Chain [64]: 2*s(107)+1*s(108)+3
  Such that:s(107) =< V_n
s(108) =< 9/8*V_n-V_k/8+V_limit/8+4

  with precondition: [V_n>=1,V_k>=V_n+32,V_limit+V_n+31>=V_k] 

* Chain [63]: 2*s(109)+2*s(111)+1*s(112)+3
  Such that:s(109) =< V_n
s(111) =< -V_n/8+V_k/8-V_limit/8
s(110) =< 9/8*V_n-V_k/8+V_limit/8+4
s(109) =< s(110)
s(112) =< s(110)

  with precondition: [V_n>=2,V_k>=V_n+32,V_k>=V_limit+V_n+32,V_limit+9*V_n+23>=V_k] 

* Chain [62]: 2*s(114)+2
  Such that:s(113) =< V_n/8-V_k/8+4
s(114) =< s(113)

  with precondition: [V_k>=V_n+16,V_n+31>=V_k] 

* Chain [61]: 2
  with precondition: [V_k>=V_n+32] 

* Chain [60]: 1*s(116)+2*s(117)+2
  Such that:s(115) =< 2
s(116) =< V_n/8-V_k/8+2
s(115) =< V_n/8-V_k/8+3
s(117) =< s(115)

  with precondition: [V_n+15>=V_k] 


Closed-form bounds of eval_inflate_stored_start(V_n,V_k,V_limit,B): 
-------------------------------------
* Chain [74] with precondition: [0>=V_n,V_k>=V_n+16,V_n+31>=V_k] 
    - Upper bound: V_n/8-V_k/8+7 
    - Complexity: n 
* Chain [73] with precondition: [0>=V_n,V_k>=V_n+32] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [72] with precondition: [0>=V_n,V_n+15>=V_k] 
    - Upper bound: V_n/8-V_k/8+7 
    - Complexity: n 
* Chain [71] with precondition: [7>=V_limit,V_n>=2,V_k>=V_n+16,V_n+31>=V_k,V_limit+8*V_n>=9,V_limit+9*V_n+15>=V_k] 
    - Upper bound: 13/4*V_n-V_k/4-V_limit/8+63/4 
    - Complexity: n 
* Chain [70] with precondition: [7>=V_limit,V_n>=2,V_n+15>=V_k,V_limit+8*V_n>=9] 
    - Upper bound: 25/8*V_n-V_k/8-V_limit/8+55/4 
    - Complexity: n 
* Chain [69] with precondition: [V_n>=1,V_limit>=1,V_k>=V_n+16,V_n+31>=V_k,V_n+V_limit+23>=V_k] 
    - Upper bound: 25/8*V_n-V_k/8+V_limit/8+7 
    - Complexity: n 
* Chain [68] with precondition: [V_n>=1,V_limit>=1,V_n+15>=V_k] 
    - Upper bound: 25/8*V_n-V_k/8+V_limit/8+7 
    - Complexity: n 
* Chain [67] with precondition: [V_n>=1,15>=8*V_n+V_limit,V_k>=V_n+16,V_n+31>=V_k] 
    - Upper bound: 17/8*V_n-V_k/8+7 
    - Complexity: n 
* Chain [66] with precondition: [V_n>=1,15>=8*V_n+V_limit,V_n+15>=V_k] 
    - Upper bound: 17/8*V_n-V_k/8+7 
    - Complexity: n 
* Chain [65] with precondition: [V_n>=1,V_k>=V_n+32,V_k>=9*V_n+V_limit+24] 
    - Upper bound: 2*V_n+3 
    - Complexity: n 
* Chain [64] with precondition: [V_n>=1,V_k>=V_n+32,V_n+V_limit+31>=V_k] 
    - Upper bound: 25/8*V_n-V_k/8+V_limit/8+7 
    - Complexity: n 
* Chain [63] with precondition: [V_n>=2,V_k>=V_n+32,V_k>=V_n+V_limit+32,V_limit+9*V_n+23>=V_k] 
    - Upper bound: 23/8*V_n+V_k/8-V_limit/8+7 
    - Complexity: n 
* Chain [62] with precondition: [V_k>=V_n+16,V_n+31>=V_k] 
    - Upper bound: V_n/4-V_k/4+10 
    - Complexity: n 
* Chain [61] with precondition: [V_k>=V_n+32] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [60] with precondition: [V_n+15>=V_k] 
    - Upper bound: V_n/8-V_k/8+8 
    - Complexity: n 

### Maximum cost of eval_inflate_stored_start(V_n,V_k,V_limit,B): max([max([max([1,nat(V_n/8-V_k/8+4)+max([1,nat(V_n/8-V_k/8+4)])]),nat(V_n/8-V_k/8+2)+4]),nat(V_n)*2+1+max([max([nat(V_n/8-V_k/8+4)+max([nat(V_n+V_limit/8),nat(-V_limit/8+23/8)*2+nat(9/8*V_n-V_k/8+V_limit/8+3)]),nat(-V_n/8+V_k/8-V_limit/8)*2+nat(9/8*V_n-V_k/8+V_limit/8+4)]),nat(V_n/8-V_k/8+2)+2+max([nat(V_n+V_limit/8),nat(-V_limit/8+23/8)*2+nat(V_n+V_limit/8+1)])])])+2 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 36 ms.
* Invariants computed in 68 ms.
   - Backward Invariants 37 ms.
   - Transitive Invariants 12 ms.
* Refinement performed in 164 ms.
* Termination proved in 12 ms.
* Upper bounds computed in 197 ms.
   - Equation cost structures 113 ms.
   - Phase cost structures 30 ms.
   - Chain cost structures 26 ms.
   - Solving cost expressions 8 ms.
* Total analysis performed in 523 ms.


Warning: Ignored call to eval_inflate_stored_stop/1 in equation eval_inflate_stored_bb12_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_inflate_stored_bb1_in/7,eval_inflate_stored_bb2_in/7]
1. recursive : [eval_inflate_stored_bb4_in/7,eval_inflate_stored_bb5_in/7]
2. non_recursive : [eval_inflate_stored_bb12_in/1]
3. recursive : [eval_inflate_stored_bb10_in/11,eval_inflate_stored_bb9_in/11]
4. recursive : [eval_inflate_stored_27/7,eval_inflate_stored_28/7,eval_inflate_stored_bb11_in/6,eval_inflate_stored_bb8_in/4,loop_cont_eval_inflate_stored_bb9_in/7]
5. non_recursive : [loop_cont_eval_inflate_stored_bb8_in/2]
6. non_recursive : [eval_inflate_stored_21/4]
7. non_recursive : [eval_inflate_stored_20/4]
8. non_recursive : [eval_inflate_stored_19/4]
9. non_recursive : [eval_inflate_stored_18/4]
10. non_recursive : [eval_inflate_stored_bb7_in/4]
11. non_recursive : [eval_inflate_stored_16/5]
12. non_recursive : [eval_inflate_stored_15/4]
13. non_recursive : [eval_inflate_stored_bb6_in/4]
14. non_recursive : [loop_cont_eval_inflate_stored_bb4_in/5]
15. non_recursive : [eval_inflate_stored_12/4]
16. non_recursive : [eval_inflate_stored_11/4]
17. non_recursive : [eval_inflate_stored_10/4]
18. non_recursive : [eval_inflate_stored_bb3_in/4]
19. non_recursive : [loop_cont_eval_inflate_stored_bb1_in/5]
20. non_recursive : [eval_inflate_stored_6/4]
21. non_recursive : [eval_inflate_stored_5/4]
22. non_recursive : [eval_inflate_stored_4/4]
23. non_recursive : [eval_inflate_stored_3/4]
24. non_recursive : [eval_inflate_stored_2/4]
25. non_recursive : [eval_inflate_stored_1/4]
26. non_recursive : [eval_inflate_stored_0/4]
27. non_recursive : [eval_inflate_stored_bb0_in/4]
28. non_recursive : [eval_inflate_stored_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_inflate_stored_bb1_in/7
1. SCC is partially evaluated into eval_inflate_stored_bb4_in/7
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into eval_inflate_stored_bb9_in/11
4. SCC is partially evaluated into eval_inflate_stored_bb8_in/4
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into eval_inflate_stored_16/5
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is completely evaluated into other SCCs
16. SCC is completely evaluated into other SCCs
17. SCC is completely evaluated into other SCCs
18. SCC is completely evaluated into other SCCs
19. SCC is completely evaluated into other SCCs
20. SCC is completely evaluated into other SCCs
21. SCC is completely evaluated into other SCCs
22. SCC is completely evaluated into other SCCs
23. SCC is completely evaluated into other SCCs
24. SCC is completely evaluated into other SCCs
25. SCC is completely evaluated into other SCCs
26. SCC is completely evaluated into other SCCs
27. SCC is completely evaluated into other SCCs
28. SCC is partially evaluated into eval_inflate_stored_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_inflate_stored_bb1_in/7 
* CE 4 is refined into CE [14] 
* CE 3 is refined into CE [15] 


#### Refined cost equations eval_inflate_stored_bb1_in/7 
* CE 14: eval_inflate_stored_bb1_in(A,B,C,D,A,B,C) = 0
     [C>=16,D=5] 
* CE 15: eval_inflate_stored_bb1_in(V_n,V_limit,V__01,B,C,D,E) = 1+ eval_inflate_stored_bb1_in(V_n,V_limit,F,G,C,D,E)
     [15>=V__01,V__01+8=F,G=5,B=5] 

### Cost equations --> "Loop" of eval_inflate_stored_bb1_in/7 
* CEs [15] --> Loop 13 
* CEs [14] --> Loop 14 

#### Loops of eval_inflate_stored_bb1_in/7 
* Loop 13: eval_inflate_stored_bb1_in(V_n,V_limit,V__01,B,C,D,E)->  eval_inflate_stored_bb1_in(V_n,V_limit,V__01',B',C,D,E)
                  [15>=V__01,V__01+8=V__01',B'=5,B=5] 
* Loop 14: eval_inflate_stored_bb1_in(A,B,C,D,A,B,C) [C>=16,D=5] 

### Ranking functions of CR eval_inflate_stored_bb1_in(V_n,V_limit,V__01,B,C,D,E) 
* RF of phase [13]: [-V__01/8+2]

#### Partial ranking functions of CR eval_inflate_stored_bb1_in(V_n,V_limit,V__01,B,C,D,E) 
* Partial RF of phase [13]:
  - RF of loop [13:1]:
    -V__01/8+2

Discarded unfeasible chain [[13]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_inflate_stored_bb1_in(V_n,V_limit,V__01,B,C,D,E) 
* [[13],14]
* [14]


### Merging Chains  eval_inflate_stored_bb1_in/7 into  External patterns of execution 
* [[14]] --> 1 
* [[14,[13]]] --> 2 


### Specialization of cost equations eval_inflate_stored_bb4_in/7 
* CE 6 is refined into CE [16] 
* CE 5 is refined into CE [17] 


#### Refined cost equations eval_inflate_stored_bb4_in/7 
* CE 16: eval_inflate_stored_bb4_in(A,B,C,D,A,B,C) = 0
     [C>=16,D=4] 
* CE 17: eval_inflate_stored_bb4_in(V_n,V_limit,V__1,B,C,D,E) = 1+ eval_inflate_stored_bb4_in(V_n,V_limit,F,G,C,D,E)
     [15>=V__1,V__1+8=F,G=4,B=4] 

### Cost equations --> "Loop" of eval_inflate_stored_bb4_in/7 
* CEs [17] --> Loop 15 
* CEs [16] --> Loop 16 

#### Loops of eval_inflate_stored_bb4_in/7 
* Loop 15: eval_inflate_stored_bb4_in(V_n,V_limit,V__1,B,C,D,E)->  eval_inflate_stored_bb4_in(V_n,V_limit,V__1',B',C,D,E)
                  [15>=V__1,V__1+8=V__1',B'=4,B=4] 
* Loop 16: eval_inflate_stored_bb4_in(A,B,C,D,A,B,C) [C>=16,D=4] 

### Ranking functions of CR eval_inflate_stored_bb4_in(V_n,V_limit,V__1,B,C,D,E) 
* RF of phase [15]: [-V__1/8+2]

#### Partial ranking functions of CR eval_inflate_stored_bb4_in(V_n,V_limit,V__1,B,C,D,E) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    -V__1/8+2

Discarded unfeasible chain [[15]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_inflate_stored_bb4_in(V_n,V_limit,V__1,B,C,D,E) 
* [[15],16]
* [16]


### Merging Chains  eval_inflate_stored_bb4_in/7 into  External patterns of execution 
* [[16]] --> 1 
* [[16,[15]]] --> 2 


### Specialization of cost equations eval_inflate_stored_bb9_in/11 
* CE 13 is refined into CE [18] 
* CE 12 is refined into CE [19] 


#### Refined cost equations eval_inflate_stored_bb9_in/11 
* CE 18: eval_inflate_stored_bb9_in(A,B,C,D,E,F,A,B,G,D,E) = 0
     [E>=B,E>=A,D>=0,D+1=G,D+1=C,F=2] 
* CE 19: eval_inflate_stored_bb9_in(V_limit,V__2,V__0,V_9,V__3,B,C,D,E,F,G) = 1+ eval_inflate_stored_bb9_in(V_limit,V__2,H,V_9,I,J,C,D,E,F,G)
     [V_limit>=V__3+1,V__3>=V__2,V_9>=0,V__3+8=I,V_9+1=H,V_9+1=V__0,J=2,B=2] 

### Cost equations --> "Loop" of eval_inflate_stored_bb9_in/11 
* CEs [19] --> Loop 17 
* CEs [18] --> Loop 18 

#### Loops of eval_inflate_stored_bb9_in/11 
* Loop 17: eval_inflate_stored_bb9_in(V_limit,V__2,V__0,V_9,V__3,B,C,D,E,F,G)->  eval_inflate_stored_bb9_in(V_limit,V__2,V__0',V_9,V__3',B',C,D,E,F,G)
                  [V_limit>=V__3+1,V__3>=V__2,V_9>=0,V__3+8=V__3',V_9+1=V__0',V_9+1=V__0,B'=2,B=2] 
* Loop 18: eval_inflate_stored_bb9_in(A,B,C,D,E,F,A,B,G,D,E) [E>=B,E>=A,D>=0,D+1=G,D+1=C,F=2] 

### Ranking functions of CR eval_inflate_stored_bb9_in(V_limit,V__2,V__0,V_9,V__3,B,C,D,E,F,G) 
* RF of phase [17]: [V_limit/8-V__3/8]

#### Partial ranking functions of CR eval_inflate_stored_bb9_in(V_limit,V__2,V__0,V_9,V__3,B,C,D,E,F,G) 
* Partial RF of phase [17]:
  - RF of loop [17:1]:
    V_limit/8-V__3/8

Discarded unfeasible chain [[17]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_inflate_stored_bb9_in(V_limit,V__2,V__0,V_9,V__3,B,C,D,E,F,G) 
* [[17],18]
* [18]


### Merging Chains  eval_inflate_stored_bb9_in/11 into  External patterns of execution 
* [[18]] --> 1 
* [[18,[17]]] --> 2 


### Specialization of cost equations eval_inflate_stored_bb8_in/4 
* CE 11 is refined into CE [20] 
* CE 10 is refined into CE [21,22] 


#### Refined cost equations eval_inflate_stored_bb8_in/4 
* CE 20: eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) = 0
     [0>=V__0,B=3] 
* CE 21: eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) = 2+ eval_inflate_stored_bb9_in(V_limit,V__2,C,D,V__2,E,V_limit,V__2,F,D,V__2):1+ eval_inflate_stored_bb8_in(V_limit,G,D,H)
     [V__2>=V_limit,D>=0,V__2=G+8,D+1=F,D+1=C,D+1=V__0,H=3,E=2,B=3] 
* CE 22: eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) = 2+ eval_inflate_stored_bb9_in(V_limit,V__2,C,D,V__2,E,V_limit,V__2,F,D,G):2+ eval_inflate_stored_bb8_in(V_limit,H,D,I)
     [V_limit+7>=G,G>=V__2+8,G>=V_limit,D>=0,G=H+8,D+1=F,D+1=C,D+1=V__0,I=3,E=2,B=3] 

### Cost equations --> "Loop" of eval_inflate_stored_bb8_in/4 
* CEs [22] --> Loop 19 
* CEs [21] --> Loop 20 
* CEs [20] --> Loop 21 

#### Loops of eval_inflate_stored_bb8_in/4 
* Loop 19: eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B)->  eval_inflate_stored_bb8_in(V_limit,V__2',V__0',B')
                  [V_limit>=V__2'+1,V__2'>=V__2,V__2'+8>=V_limit,V__0>=1,V__0=V__0'+1,B'=3,B=3] 
* Loop 20: eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B)->  eval_inflate_stored_bb8_in(V_limit,V__2',V__0',B')
                  [V__2>=V_limit,V__0>=1,V__0=V__0'+1,V__2=V__2'+8,B'=3,B=3] 
* Loop 21: eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) [0>=V__0,B=3] 

### Ranking functions of CR eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) 
* RF of phase [19]: [V__0]
* RF of phase [20]: [V__0,-V_limit/8+V__2/8+1/8]

#### Partial ranking functions of CR eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) 
* Partial RF of phase [19]:
  - RF of loop [19:1]:
    V__0
* Partial RF of phase [20]:
  - RF of loop [20:1]:
    V__0
    -V_limit/8+V__2/8+1/8

Discarded unfeasible chain [[20]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [[20],[19]]...(Non-terminating chain proved terminating)
Discarded unfeasible chain [[19]](Non-terminating chain proved terminating)

### Resulting Chains:eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) 
* [[20],[19],21]
* [[20],21]
* [[19],21]
* [21]


### Merging Chains  eval_inflate_stored_bb8_in/4 into  External patterns of execution 
* [[21]] --> 1 
* [[21,[19]]] --> 2 
* [[21,[20]]] --> 3 
* [[21,[19],[20]]] --> 4 


### Specialization of cost equations eval_inflate_stored_16/5 
* CE 8 is refined into CE [23] 
* CE 7 is refined into CE [24] 
* CE 9 is refined into CE [25,26,27,28] 


#### Refined cost equations eval_inflate_stored_16/5 
* CE 23: eval_inflate_stored_16(V_n,V_limit,V__1,V_6,B) = 0
     [V_6>=1] 
* CE 24: eval_inflate_stored_16(V_n,V_limit,V__1,V_6,B) = 0
     [0>=V_6+1] 
* CE 25: eval_inflate_stored_16(V_n,V_limit,V__1,V_6,B) = 1+ eval_inflate_stored_bb8_in(V_limit,C,V_n,D):1
     [0>=V_n,C+16=V__1,D=3,V_6=0] 
* CE 26: eval_inflate_stored_16(V_n,V_limit,V__1,V_6,B) = 1+ eval_inflate_stored_bb8_in(V_limit,C,V_n,D):2
     [V_limit>=C+1,V_n>=1,C+16=V__1,D=3,V_6=0] 
* CE 27: eval_inflate_stored_16(V_n,V_limit,V__1,V_6,B) = 1+ eval_inflate_stored_bb8_in(V_limit,C,V_n,D):3
     [C+8>=8*V_n+V_limit,V_n>=1,C+16=V__1,D=3,V_6=0] 
* CE 28: eval_inflate_stored_16(V_n,V_limit,V__1,V_6,B) = 1+ eval_inflate_stored_bb8_in(V_limit,C,V_n,D):4
     [V_limit+8*V_n>=C+9,C>=V_limit,V_n>=2,C+16=V__1,D=3,V_6=0] 

### Cost equations --> "Loop" of eval_inflate_stored_16/5 
* CEs [23] --> Loop 22 
* CEs [24] --> Loop 23 
* CEs [28] --> Loop 24 
* CEs [27] --> Loop 25 
* CEs [26] --> Loop 26 
* CEs [25] --> Loop 27 

#### Loops of eval_inflate_stored_16/5 
* Loop 22: eval_inflate_stored_16(V_n,V_limit,V__1,V_6,B) [V_6>=1] 
* Loop 23: eval_inflate_stored_16(V_n,V_limit,V__1,V_6,B) [0>=V_6+1] 
* Loop 24: eval_inflate_stored_16(V_n,V_limit,V__1,V_6,B) [V_limit+8*V_n+7>=V__1,V__1>=V_limit+16,V_n>=2,V_6=0] 
* Loop 25: eval_inflate_stored_16(V_n,V_limit,V__1,V_6,B) [V__1>=8*V_n+V_limit+8,V_n>=1,V_6=0] 
* Loop 26: eval_inflate_stored_16(V_n,V_limit,V__1,V_6,B) [V_limit+15>=V__1,V_n>=1,V_6=0] 
* Loop 27: eval_inflate_stored_16(V_n,V_limit,V__1,V_6,B) [0>=V_n,V_6=0] 

### Ranking functions of CR eval_inflate_stored_16(V_n,V_limit,V__1,V_6,B) 

#### Partial ranking functions of CR eval_inflate_stored_16(V_n,V_limit,V__1,V_6,B) 


### Resulting Chains:eval_inflate_stored_16(V_n,V_limit,V__1,V_6,B) 
* [27]
* [26]
* [25]
* [24]
* [23]
* [22]


### Merging Chains  eval_inflate_stored_16/5 into  External patterns of execution 
* [[27]] --> 1 
* [[26]] --> 2 
* [[25]] --> 3 
* [[24]] --> 4 
* [[23]] --> 5 
* [[22]] --> 6 


### Specialization of cost equations eval_inflate_stored_start/4 
* CE 2 is refined into CE [29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46] 


#### Refined cost equations eval_inflate_stored_start/4 
* CE 29: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 2+ eval_inflate_stored_bb1_in(V_n,V_limit,C,D,V_n,V_limit,E):1+ eval_inflate_stored_bb4_in(V_n,V_limit,F,G,V_n,V_limit,F):1+ eval_inflate_stored_16(V_n,V_limit,F,H,B):1
     [F>=16,0>=V_n,V_n+F+16=V_k,F+16=E,F+16=C,H=0,G=4,D=5] 
* CE 30: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 2+ eval_inflate_stored_bb1_in(V_n,V_limit,C,D,V_n,V_limit,E):1+ eval_inflate_stored_bb4_in(V_n,V_limit,F,G,V_n,V_limit,F):1+ eval_inflate_stored_16(V_n,V_limit,F,H,B):2
     [V_limit+15>=F,F>=16,V_n>=1,V_n+F+16=V_k,F+16=E,F+16=C,H=0,G=4,D=5] 
* CE 31: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 2+ eval_inflate_stored_bb1_in(V_n,V_limit,C,D,V_n,V_limit,E):1+ eval_inflate_stored_bb4_in(V_n,V_limit,F,G,V_n,V_limit,F):1+ eval_inflate_stored_16(V_n,V_limit,F,H,B):3
     [F>=8*V_n+V_limit+8,F>=16,V_n>=1,V_n+F+16=V_k,F+16=E,F+16=C,H=0,G=4,D=5] 
* CE 32: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 2+ eval_inflate_stored_bb1_in(V_n,V_limit,C,D,V_n,V_limit,E):1+ eval_inflate_stored_bb4_in(V_n,V_limit,F,G,V_n,V_limit,F):1+ eval_inflate_stored_16(V_n,V_limit,F,H,B):4
     [V_limit+8*V_n+7>=F,F>=V_limit+16,F>=16,V_n>=2,V_n+F+16=V_k,F+16=E,F+16=C,H=0,G=4,D=5] 
* CE 33: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 2+ eval_inflate_stored_bb1_in(V_n,V_limit,C,D,V_n,V_limit,E):1+ eval_inflate_stored_bb4_in(V_n,V_limit,F,G,V_n,V_limit,F):1+ eval_inflate_stored_16(V_n,V_limit,F,H,B):5
     [F>=16,0>=H+1,V_n+F+16=V_k,F+16=E,F+16=C,G=4,D=5] 
* CE 34: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 2+ eval_inflate_stored_bb1_in(V_n,V_limit,C,D,V_n,V_limit,E):1+ eval_inflate_stored_bb4_in(V_n,V_limit,F,G,V_n,V_limit,F):1+ eval_inflate_stored_16(V_n,V_limit,F,H,B):6
     [H>=1,F>=16,V_n+F+16=V_k,F+16=E,F+16=C,G=4,D=5] 
* CE 35: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 2+ eval_inflate_stored_bb1_in(V_n,V_limit,C,D,V_n,V_limit,E):1+ eval_inflate_stored_bb4_in(V_n,V_limit,F,G,V_n,V_limit,H):2+ eval_inflate_stored_16(V_n,V_limit,H,I,B):1
     [H>=F+8,H>=16,F>=0,0>=V_n,23>=H,V_n+F+16=V_k,F+16=E,F+16=C,I=0,G=4,D=5] 
* CE 36: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 2+ eval_inflate_stored_bb1_in(V_n,V_limit,C,D,V_n,V_limit,E):1+ eval_inflate_stored_bb4_in(V_n,V_limit,F,G,V_n,V_limit,H):2+ eval_inflate_stored_16(V_n,V_limit,H,I,B):2
     [V_limit+15>=H,H>=F+8,H>=16,V_n>=1,F>=0,23>=H,V_n+F+16=V_k,F+16=E,F+16=C,I=0,G=4,D=5] 
* CE 37: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 2+ eval_inflate_stored_bb1_in(V_n,V_limit,C,D,V_n,V_limit,E):1+ eval_inflate_stored_bb4_in(V_n,V_limit,F,G,V_n,V_limit,H):2+ eval_inflate_stored_16(V_n,V_limit,H,I,B):3
     [H>=8*V_n+V_limit+8,H>=F+8,H>=16,V_n>=1,F>=0,23>=H,V_n+F+16=V_k,F+16=E,F+16=C,I=0,G=4,D=5] 
* CE 38: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 2+ eval_inflate_stored_bb1_in(V_n,V_limit,C,D,V_n,V_limit,E):1+ eval_inflate_stored_bb4_in(V_n,V_limit,F,G,V_n,V_limit,H):2+ eval_inflate_stored_16(V_n,V_limit,H,I,B):4
     [V_limit+8*V_n+7>=H,H>=V_limit+16,H>=F+8,H>=16,V_n>=2,F>=0,23>=H,V_n+F+16=V_k,F+16=E,F+16=C,I=0,G=4,D=5] 
* CE 39: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 2+ eval_inflate_stored_bb1_in(V_n,V_limit,C,D,V_n,V_limit,E):1+ eval_inflate_stored_bb4_in(V_n,V_limit,F,G,V_n,V_limit,H):2+ eval_inflate_stored_16(V_n,V_limit,H,I,B):5
     [H>=F+8,H>=16,F>=0,0>=I+1,23>=H,V_n+F+16=V_k,F+16=E,F+16=C,G=4,D=5] 
* CE 40: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 2+ eval_inflate_stored_bb1_in(V_n,V_limit,C,D,V_n,V_limit,E):1+ eval_inflate_stored_bb4_in(V_n,V_limit,F,G,V_n,V_limit,H):2+ eval_inflate_stored_16(V_n,V_limit,H,I,B):6
     [H>=F+8,I>=1,H>=16,F>=0,23>=H,V_n+F+16=V_k,F+16=E,F+16=C,G=4,D=5] 
* CE 41: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 2+ eval_inflate_stored_bb1_in(V_n,V_limit,C,D,V_n,V_limit,E):2+ eval_inflate_stored_bb4_in(V_n,V_limit,F,G,V_n,V_limit,H):2+ eval_inflate_stored_16(V_n,V_limit,H,I,B):1
     [F+8>=C,H>=16,F>=0,0>=V_n,23>=H,7>=F,V_n+C=V_k,F+16=E,I=0,G=4,D=5] 
* CE 42: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 2+ eval_inflate_stored_bb1_in(V_n,V_limit,C,D,V_n,V_limit,E):2+ eval_inflate_stored_bb4_in(V_n,V_limit,F,G,V_n,V_limit,H):2+ eval_inflate_stored_16(V_n,V_limit,H,I,B):2
     [V_limit+15>=H,F+8>=C,H>=16,V_n>=1,F>=0,23>=H,7>=F,V_n+C=V_k,F+16=E,I=0,G=4,D=5] 
* CE 43: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 2+ eval_inflate_stored_bb1_in(V_n,V_limit,C,D,V_n,V_limit,E):2+ eval_inflate_stored_bb4_in(V_n,V_limit,F,G,V_n,V_limit,H):2+ eval_inflate_stored_16(V_n,V_limit,H,I,B):3
     [H>=8*V_n+V_limit+8,F+8>=C,H>=16,V_n>=1,F>=0,23>=H,7>=F,V_n+C=V_k,F+16=E,I=0,G=4,D=5] 
* CE 44: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 2+ eval_inflate_stored_bb1_in(V_n,V_limit,C,D,V_n,V_limit,E):2+ eval_inflate_stored_bb4_in(V_n,V_limit,F,G,V_n,V_limit,H):2+ eval_inflate_stored_16(V_n,V_limit,H,I,B):4
     [V_limit+8*V_n+7>=H,H>=V_limit+16,F+8>=C,H>=16,V_n>=2,F>=0,23>=H,7>=F,V_n+C=V_k,F+16=E,I=0,G=4,D=5] 
* CE 45: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 2+ eval_inflate_stored_bb1_in(V_n,V_limit,C,D,V_n,V_limit,E):2+ eval_inflate_stored_bb4_in(V_n,V_limit,F,G,V_n,V_limit,H):2+ eval_inflate_stored_16(V_n,V_limit,H,I,B):5
     [F+8>=C,H>=16,F>=0,0>=I+1,23>=H,7>=F,V_n+C=V_k,F+16=E,G=4,D=5] 
* CE 46: eval_inflate_stored_start(V_n,V_k,V_limit,B) = 2+ eval_inflate_stored_bb1_in(V_n,V_limit,C,D,V_n,V_limit,E):2+ eval_inflate_stored_bb4_in(V_n,V_limit,F,G,V_n,V_limit,H):2+ eval_inflate_stored_16(V_n,V_limit,H,I,B):6
     [F+8>=C,I>=1,H>=16,F>=0,23>=H,7>=F,V_n+C=V_k,F+16=E,G=4,D=5] 

### Cost equations --> "Loop" of eval_inflate_stored_start/4 
* CEs [32] --> Loop 28 
* CEs [30] --> Loop 29 
* CEs [31] --> Loop 30 
* CEs [43] --> Loop 31 
* CEs [37] --> Loop 32 
* CEs [42] --> Loop 33 
* CEs [36] --> Loop 34 
* CEs [44] --> Loop 35 
* CEs [38] --> Loop 36 
* CEs [41,45,46] --> Loop 37 
* CEs [29,33,34] --> Loop 38 
* CEs [35,39,40] --> Loop 39 

#### Loops of eval_inflate_stored_start/4 
* Loop 28: eval_inflate_stored_start(V_n,V_k,V_limit,B) [V_limit+9*V_n+23>=V_k,V_k>=V_n+V_limit+32,V_k>=V_n+32,V_n>=2] 
* Loop 29: eval_inflate_stored_start(V_n,V_k,V_limit,B) [V_n+V_limit+31>=V_k,V_k>=V_n+32,V_n>=1] 
* Loop 30: eval_inflate_stored_start(V_n,V_k,V_limit,B) [V_k>=9*V_n+V_limit+24,V_k>=V_n+32,V_n>=1] 
* Loop 31: eval_inflate_stored_start(V_n,V_k,V_limit,B) [V_n+15>=V_k,15>=8*V_n+V_limit,V_n>=1] 
* Loop 32: eval_inflate_stored_start(V_n,V_k,V_limit,B) [V_n+31>=V_k,V_k>=V_n+16,15>=8*V_n+V_limit,V_n>=1] 
* Loop 33: eval_inflate_stored_start(V_n,V_k,V_limit,B) [V_n+15>=V_k,V_limit>=1,V_n>=1] 
* Loop 34: eval_inflate_stored_start(V_n,V_k,V_limit,B) [V_n+V_limit+23>=V_k,V_n+31>=V_k,V_k>=V_n+16,V_limit>=1,V_n>=1] 
* Loop 35: eval_inflate_stored_start(V_n,V_k,V_limit,B) [V_limit+8*V_n>=9,V_n+15>=V_k,V_n>=2,7>=V_limit] 
* Loop 36: eval_inflate_stored_start(V_n,V_k,V_limit,B) [V_limit+9*V_n+15>=V_k,V_limit+8*V_n>=9,V_n+31>=V_k,V_k>=V_n+16,V_n>=2,7>=V_limit] 
* Loop 37: eval_inflate_stored_start(V_n,V_k,V_limit,B) [V_n+15>=V_k] 
* Loop 38: eval_inflate_stored_start(V_n,V_k,V_limit,B) [V_k>=V_n+32] 
* Loop 39: eval_inflate_stored_start(V_n,V_k,V_limit,B) [V_n+31>=V_k,V_k>=V_n+16] 

### Ranking functions of CR eval_inflate_stored_start(V_n,V_k,V_limit,B) 

#### Partial ranking functions of CR eval_inflate_stored_start(V_n,V_k,V_limit,B) 


### Resulting Chains:eval_inflate_stored_start(V_n,V_k,V_limit,B) 
* [39]
* [38]
* [37]
* [36]
* [35]
* [34]
* [33]
* [32]
* [31]
* [30]
* [29]
* [28]


### Merging Chains  eval_inflate_stored_start/4 into  External patterns of execution 
* [[36],[39]] --> 1 
* [[35],[37]] --> 2 
* [[34]] --> 3 
* [[33]] --> 4 
* [[32]] --> 5 
* [[31]] --> 6 
* [[30],[38]] --> 7 
* [[29]] --> 8 
* [[28]] --> 9 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 14 

#### Computing cost of phase [13] 

#### Simplifying cost structure of CE 15 

#### Cost of loops [13] 

 * loop 13:eval_inflate_stored_bb1_in(V_n,V_limit,V__01,B,C,D,E) -> [eval_inflate_stored_bb1_in(V_n',V_limit',V__01',B',C',D',E')] 
1
##### Pending set eval_inflate_stored_bb1_in(V_n,V_limit,V__01,B,C,D,E)
* Psum in Loop 13: [it(13)=<1]

###### Computing sum for it(13)=<1  in Loop 13 
   - Applying inductive sum strategy 
     - head Candidate: -V__01/8+2 
     - head Candidate: -V__01/8+2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -V__01/8+2 
     - tail Candidate: -V__01/8+2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(13)=< -V__01/8+2,it(13)=< -V__01/8+2,it(13)=< -V__01/8+V__01'/8,it(13)=< -V__01/8+V__01'/8] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [13] 

#### Simplifying cost structure of phase [13] 

#### Cost of phase [13]:eval_inflate_stored_bb1_in(V_n,V_limit,V__01,B,C,D,E) -> [eval_inflate_stored_bb1_in(V_n',V_limit',V__01',B',C',D',E')] 
1*it(13)+0
  Such that:it(13) =< -V__01/8+2
it(13) =< -V__01/8+V__01'/8

#### Simplifying cost structure of chain [[13],14] 

#### Cost of chains of eval_inflate_stored_bb1_in(V_n,V_limit,V__01,B,C,D,E):
* Chain [[13],14]: 1*it(13)+0
  Such that:it(13) =< -V__01/8+2

  with precondition: [B=5,V_n=C,V_limit=D,23>=E,E>=16,E>=V__01+8] 

* Chain [14]: 0
  with precondition: [B=5,C=V_n,D=V_limit,V__01=E,V__01>=16] 


#### Simplifying cost structure of CE 16 

#### Computing cost of phase [15] 

#### Simplifying cost structure of CE 17 

#### Cost of loops [15] 

 * loop 15:eval_inflate_stored_bb4_in(V_n,V_limit,V__1,B,C,D,E) -> [eval_inflate_stored_bb4_in(V_n',V_limit',V__1',B',C',D',E')] 
1
##### Pending set eval_inflate_stored_bb4_in(V_n,V_limit,V__1,B,C,D,E)
* Psum in Loop 15: [it(15)=<1]

###### Computing sum for it(15)=<1  in Loop 15 
   - Applying inductive sum strategy 
     - head Candidate: -V__1/8+2 
     - head Candidate: -V__1/8+2 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -V__1/8+2 
     - tail Candidate: -V__1/8+2 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(15)=< -V__1/8+2,it(15)=< -V__1/8+2,it(15)=< -V__1/8+V__1'/8,it(15)=< -V__1/8+V__1'/8] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [15] 

#### Simplifying cost structure of phase [15] 

#### Cost of phase [15]:eval_inflate_stored_bb4_in(V_n,V_limit,V__1,B,C,D,E) -> [eval_inflate_stored_bb4_in(V_n',V_limit',V__1',B',C',D',E')] 
1*it(15)+0
  Such that:it(15) =< -V__1/8+2
it(15) =< -V__1/8+V__1'/8

#### Simplifying cost structure of chain [[15],16] 

#### Cost of chains of eval_inflate_stored_bb4_in(V_n,V_limit,V__1,B,C,D,E):
* Chain [[15],16]: 1*it(15)+0
  Such that:it(15) =< -V__1/8+2

  with precondition: [B=4,V_n=C,V_limit=D,23>=E,E>=16,E>=V__1+8] 

* Chain [16]: 0
  with precondition: [B=4,C=V_n,D=V_limit,V__1=E,V__1>=16] 


#### Simplifying cost structure of CE 18 

#### Computing cost of phase [17] 

#### Simplifying cost structure of CE 19 

#### Cost of loops [17] 

 * loop 17:eval_inflate_stored_bb9_in(V_limit,V__2,V__0,V_9,V__3,B,C,D,E,F,G) -> [eval_inflate_stored_bb9_in(V_limit',V__2',V__0',V_9',V__3',B',C',D',E',F',G')] 
1
##### Pending set eval_inflate_stored_bb9_in(V_limit,V__2,V__0,V_9,V__3,B,C,D,E,F,G)
* Psum in Loop 17: [it(17)=<1]

###### Computing sum for it(17)=<1  in Loop 17 
   - Applying inductive sum strategy 
     - head Candidate: V_limit/8-V__3/8 
     - head Candidate: V_limit/8-V__3/8 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_limit/8-V__3/8 
     - tail Candidate: V_limit/8-V__3/8 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(17)=<V_limit/8-V__3/8,it(17)=<V_limit/8-V__3/8,it(17)=<V_limit/8-V__3/8-V_limit'/8+V__3'/8,it(17)=<V_limit/8-V__3/8-V_limit'/8+V__3'/8] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [17] 

#### Simplifying cost structure of phase [17] 

#### Cost of phase [17]:eval_inflate_stored_bb9_in(V_limit,V__2,V__0,V_9,V__3,B,C,D,E,F,G) -> [eval_inflate_stored_bb9_in(V_limit',V__2',V__0',V_9',V__3',B',C',D',E',F',G')] 
1*it(17)+0
  Such that:it(17) =< V_limit/8-V__3/8
it(17) =< V_limit/8-V__3/8-V_limit'/8+V__3'/8

#### Simplifying cost structure of chain [[17],18] 

#### Cost of chains of eval_inflate_stored_bb9_in(V_limit,V__2,V__0,V_9,V__3,B,C,D,E,F,G):
* Chain [[17],18]: 1*it(17)+0
  Such that:it(17) =< V_limit/8-V__3/8

  with precondition: [B=2,V__0=V_9+1,V_limit=C,V__2=D,V__0=E,V__0=F+1,V__0>=1,G>=V_limit,V__3>=V__2,G>=V__3+8,V_limit+7>=G] 

* Chain [18]: 0
  with precondition: [B=2,V__0=V_9+1,V_limit=C,V__2=D,V__0=E,V__0=F+1,V__3=G,V__0>=1,V__3>=V_limit,V__3>=V__2] 


#### Simplifying cost structure of CE 20 

#### Computing cost of phase [19] 
 * Renamed intermediate variables: 
[ (eq(22,1),it(17))>>s(1)]

#### Simplifying cost structure of CE 22 
 * Renamed intermediate variables: 
[ (it(19),s(1))>>s(2)]

#### Cost of loops [19] 

 * loop 19:eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) -> [eval_inflate_stored_bb8_in(V_limit',V__2',V__0',B')] 
1*s(2)+2
  Such that:s(2) =< V_limit/8-V__2/8

##### Pending set eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B)
* Psum in Loop 19: [it(19)=<1,s(3)=<V_limit/8-V__2/8]

###### Computing sum for it(19)=<1  in Loop 19 
   - Applying inductive sum strategy 
     - head Candidate: V__0 
     - head Candidate: V__0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V__0 
     - tail Candidate: V__0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(19)=<V__0,it(19)=<V__0,it(19)=<V__0-V__0',it(19)=<V__0-V__0'] 

##### Pending set eval_inflate_stored_0(V_n,V_k,V_limit,B)
* Psum in Loop 19: [s(3)=<V_limit/8-V__2/8]

###### Computing sum for s(3)=<V_limit/8-V__2/8  in Loop 19 
   - Applying inductive sum strategy 
     - head Candidate: V_limit/8-V__2/8+V__0-1 
     - tail Candidate: V_limit/8-V__2/8+V__0-1 
 * Adding constraints: [s(3)=<V_limit/8-V__2/8+V__0-1,s(3)=<V_limit/8-V__2/8+V__0-V_limit'/8+V__2'/8-V__0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [19] 

#### Simplifying cost structure of phase [19] 

#### Cost of phase [19]:eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) -> [eval_inflate_stored_bb8_in(V_limit',V__2',V__0',B')] 
2*it(19)+1*s(3)+0
  Such that:s(3) =< V_limit/8-V__2/8+V__0
s(3) =< V_limit/8-V__2/8+V__0-V_limit'/8+V__2'/8-V__0'
it(19) =< V__0
it(19) =< V__0-V__0'

#### Simplifying cost structure of chain [[19],21] 

#### Computing cost of phase [20] 

#### Simplifying cost structure of CE 21 

#### Cost of loops [20] 

 * loop 20:eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) -> [eval_inflate_stored_bb8_in(V_limit',V__2',V__0',B')] 
2
##### Pending set eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B)
* Psum in Loop 20: [it(20)=<1]

###### Computing sum for it(20)=<1  in Loop 20 
   - Applying inductive sum strategy 
     - head Candidate: V__0 
     - head Candidate: -V_limit/8+V__2/8+1/8 
     - head Candidate: V__0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -V_limit/8+V__2/8+1/8 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V__0 
     - tail Candidate: -V_limit/8+V__2/8+1/8 
     - tail Candidate: V__0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -V_limit/8+V__2/8+1/8 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(20)=<V__0,it(20)=< -V_limit/8+V__2/8+1/8,it(20)=<V__0,it(20)=< -V_limit/8+V__2/8+1/8,it(20)=<V__0-V__0',it(20)=< -V_limit/8+V__2/8+V_limit'/8-V__2'/8,it(20)=<V__0-V__0',it(20)=< -V_limit/8+V__2/8+V_limit'/8-V__2'/8] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [20] 

#### Simplifying cost structure of phase [20] 

#### Cost of phase [20]:eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) -> [eval_inflate_stored_bb8_in(V_limit',V__2',V__0',B')] 
2*it(20)+0
  Such that:it(20) =< -V_limit/8+V__2/8+1/8
it(20) =< -V_limit/8+V__2/8+V_limit'/8-V__2'/8
it(20) =< V__0
it(20) =< V__0-V__0'

#### Simplifying cost structure of chain [[20],[19],21] 
 * Joined equivalent variables [it(19),s(3)] into it(19)

#### Found solution for phase  [20] in the cache 

#### Cost of phase [20]:eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) -> [eval_inflate_stored_bb8_in(V_limit',V__2',V__0',B')] 
2*it(20)+0
  Such that:it(20) =< -V_limit/8+V__2/8+1/8
it(20) =< -V_limit/8+V__2/8+V_limit'/8-V__2'/8
it(20) =< V__0
it(20) =< V__0-V__0'

#### Simplifying cost structure of chain [[20],21] 

#### Cost of chains of eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B):
* Chain [[20],[19],21]: 3*it(19)+2*it(20)+0
  Such that:it(20) =< -V_limit/8+V__2/8+1/8
aux(1) =< V_limit/8-V__2/8+V__0
it(19) =< aux(1)

  with precondition: [B=3,V__0>=2,V__2>=V_limit,V_limit+8*V__0>=V__2+9] 

* Chain [[20],21]: 2*it(20)+0
  Such that:it(20) =< V__0

  with precondition: [B=3,V__0>=1,V__2+8>=8*V__0+V_limit] 

* Chain [[19],21]: 2*it(19)+1*s(3)+0
  Such that:s(3) =< V_limit/8-V__2/8+V__0
it(19) =< V__0

  with precondition: [B=3,V__0>=1,V_limit>=V__2+1] 

* Chain [21]: 0
  with precondition: [B=3,0>=V__0] 


#### Simplifying cost structure of CE 25 
 * Renamed intermediate variables: 
[ (eq(26,1),s(3))>>s(4), (eq(26,1),it(19))>>s(5)]

#### Simplifying cost structure of CE 26 
 * Renamed intermediate variables: 
[ (eq(27,1),it(20))>>s(6)]

#### Simplifying cost structure of CE 27 
 * Renamed intermediate variables: 
[ (eq(28,1),it(20))>>s(7), (eq(28,1),aux(1))>>s(8), (eq(28,1),it(19))>>s(9)]

#### Simplifying cost structure of CE 28 

#### Simplifying cost structure of CE 24 

#### Simplifying cost structure of CE 23 

#### Cost of chains of eval_inflate_stored_16(V_n,V_limit,V__1,V_6,B):
* Chain [27]: 1
  with precondition: [V_6=0,0>=V_n] 

* Chain [26]: 1*s(4)+2*s(5)+1
  Such that:s(5) =< V_n
s(4) =< V_n+V_limit/8-V__1/8+2

  with precondition: [V_6=0,V_n>=1,V_limit+15>=V__1] 

* Chain [25]: 2*s(6)+1
  Such that:s(6) =< V_n

  with precondition: [V_6=0,V_n>=1,V__1>=8*V_n+V_limit+8] 

* Chain [24]: 2*s(7)+3*s(9)+1
  Such that:s(8) =< V_n+V_limit/8-V__1/8+2
s(7) =< -V_limit/8+V__1/8
s(9) =< s(8)

  with precondition: [V_6=0,V_n>=2,V__1>=V_limit+16,V_limit+8*V_n+7>=V__1] 

* Chain [23]: 0
  with precondition: [0>=V_6+1] 

* Chain [22]: 0
  with precondition: [V_6>=1] 

 * Renamed intermediate variables: 
[ (eq(35,2),it(15))>>s(10)]

#### Simplifying cost structure of CE 35 
 * Renamed intermediate variables: 
[ (eq(39,2),it(15))>>s(11)]

#### Simplifying cost structure of CE 39 
 * Renamed intermediate variables: 
[ (eq(40,2),it(15))>>s(12)]

#### Simplifying cost structure of CE 40 
 * Joined equivalent variables [s(10),s(11),s(12)] into s(10)

#### Simplifying cost structure of CE 29 

#### Simplifying cost structure of CE 33 

#### Simplifying cost structure of CE 34 
 * Renamed intermediate variables: 
[ (eq(41,1),it(13))>>s(13)]
 * Renamed intermediate variables: 
[ (eq(41,2),it(15))>>s(14)]

#### Simplifying cost structure of CE 41 
 * Renamed intermediate variables: 
[ (eq(45,1),it(13))>>s(15)]
 * Renamed intermediate variables: 
[ (eq(45,2),it(15))>>s(16)]

#### Simplifying cost structure of CE 45 
 * Renamed intermediate variables: 
[ (eq(46,1),it(13))>>s(17)]
 * Renamed intermediate variables: 
[ (eq(46,2),it(15))>>s(18)]

#### Simplifying cost structure of CE 46 
 * Joined equivalent variables [s(13),s(15),s(17)] into s(13)
 * Joined equivalent variables [s(14),s(16),s(18)] into s(14)
 * Renamed intermediate variables: 
[ (eq(38,2),it(15))>>s(19)]
 * Renamed intermediate variables: 
[ (eq(38,3),s(8))>>s(20), (eq(38,3),s(7))>>s(21), (eq(38,3),s(9))>>s(22)]

#### Simplifying cost structure of CE 38 
 * Renamed intermediate variables: 
[ (eq(44,1),it(13))>>s(23)]
 * Renamed intermediate variables: 
[ (eq(44,2),it(15))>>s(24)]
 * Renamed intermediate variables: 
[ (eq(44,3),s(8))>>s(25), (eq(44,3),s(7))>>s(26), (eq(44,3),s(9))>>s(27)]

#### Simplifying cost structure of CE 44 
 * Renamed intermediate variables: 
[ (eq(36,2),it(15))>>s(28)]
 * Renamed intermediate variables: 
[ (eq(36,3),s(5))>>s(29), (eq(36,3),s(4))>>s(30)]

#### Simplifying cost structure of CE 36 
 * Renamed intermediate variables: 
[ (eq(42,1),it(13))>>s(31)]
 * Renamed intermediate variables: 
[ (eq(42,2),it(15))>>s(32)]
 * Renamed intermediate variables: 
[ (eq(42,3),s(5))>>s(33), (eq(42,3),s(4))>>s(34)]

#### Simplifying cost structure of CE 42 
 * Renamed intermediate variables: 
[ (eq(37,2),it(15))>>s(35)]
 * Renamed intermediate variables: 
[ (eq(37,3),s(6))>>s(36)]

#### Simplifying cost structure of CE 37 
 * Renamed intermediate variables: 
[ (eq(43,1),it(13))>>s(37)]
 * Renamed intermediate variables: 
[ (eq(43,2),it(15))>>s(38)]
 * Renamed intermediate variables: 
[ (eq(43,3),s(6))>>s(39)]

#### Simplifying cost structure of CE 43 
 * Renamed intermediate variables: 
[ (eq(31,3),s(6))>>s(40)]

#### Simplifying cost structure of CE 31 
 * Renamed intermediate variables: 
[ (eq(30,3),s(5))>>s(41), (eq(30,3),s(4))>>s(42)]

#### Simplifying cost structure of CE 30 
 * Renamed intermediate variables: 
[ (eq(32,3),s(8))>>s(43), (eq(32,3),s(7))>>s(44), (eq(32,3),s(9))>>s(45)]

#### Simplifying cost structure of CE 32 

#### Cost of chains of eval_inflate_stored_start(V_n,V_k,V_limit,B):
* Chain [39]: 3*s(10)+3
  Such that:aux(2) =< V_n/8-V_k/8+4
s(10) =< aux(2)

  with precondition: [V_k>=V_n+16,V_n+31>=V_k] 

* Chain [38]: 3
  with precondition: [V_k>=V_n+32] 

* Chain [37]: 3*s(13)+3*s(14)+3
  Such that:aux(3) =< V_n/8-V_k/8+2
aux(4) =< V_n/8-V_k/8+3
s(13) =< aux(3)
s(14) =< aux(4)

  with precondition: [V_n+15>=V_k] 

* Chain [36]: 1*s(19)+2*s(21)+3*s(22)+3
  Such that:s(19) =< V_n/8-V_k/8+4
s(20) =< 9/8*V_n-V_k/8+V_limit/8+3
aux(5) =< V_n+2
s(20) =< aux(5)
s(21) =< aux(5)
s(22) =< s(20)

  with precondition: [7>=V_limit,V_n>=2,V_k>=V_n+16,V_n+31>=V_k,V_limit+8*V_n>=9,V_limit+9*V_n+15>=V_k] 

* Chain [35]: 1*s(23)+1*s(24)+2*s(26)+3*s(27)+3
  Such that:s(24) =< 2
s(25) =< V_n
s(23) =< V_n/8-V_k/8+2
aux(6) =< V_n+2
s(25) =< aux(6)
s(26) =< aux(6)
s(27) =< s(25)

  with precondition: [7>=V_limit,V_n>=2,V_n+15>=V_k,V_limit+8*V_n>=9] 

* Chain [34]: 1*s(28)+2*s(29)+1*s(30)+3
  Such that:s(29) =< V_n
s(28) =< V_n/8-V_k/8+4
s(30) =< 9/8*V_n-V_k/8+V_limit/8+3

  with precondition: [V_n>=1,V_limit>=1,V_k>=V_n+16,V_n+31>=V_k,V_limit+V_n+23>=V_k] 

* Chain [33]: 1*s(31)+1*s(32)+2*s(33)+1*s(34)+3
  Such that:s(32) =< 2
s(33) =< V_n
s(34) =< V_n+V_limit/8
s(31) =< V_n/8-V_k/8+2

  with precondition: [V_n>=1,V_limit>=1,V_n+15>=V_k] 

* Chain [32]: 1*s(35)+2*s(36)+3
  Such that:s(36) =< V_n
s(35) =< V_n/8-V_k/8+4

  with precondition: [V_n>=1,15>=8*V_n+V_limit,V_k>=V_n+16,V_n+31>=V_k] 

* Chain [31]: 1*s(37)+1*s(38)+2*s(39)+3
  Such that:s(38) =< 2
s(39) =< V_n
s(37) =< V_n/8-V_k/8+2

  with precondition: [V_n>=1,15>=8*V_n+V_limit,V_n+15>=V_k] 

* Chain [30]: 2*s(40)+3
  Such that:s(40) =< V_n

  with precondition: [V_n>=1,V_k>=V_n+32,V_k>=9*V_n+V_limit+24] 

* Chain [29]: 2*s(41)+1*s(42)+3
  Such that:s(41) =< V_n
s(42) =< 9/8*V_n-V_k/8+V_limit/8+4

  with precondition: [V_n>=1,V_k>=V_n+32,V_limit+V_n+31>=V_k] 

* Chain [28]: 2*s(44)+3*s(45)+3
  Such that:s(44) =< -V_n/8+V_k/8-V_limit/8
s(43) =< 9/8*V_n-V_k/8+V_limit/8+4
s(45) =< s(43)

  with precondition: [V_n>=2,V_k>=V_n+32,V_k>=V_limit+V_n+32,V_limit+9*V_n+23>=V_k] 


Closed-form bounds of eval_inflate_stored_start(V_n,V_k,V_limit,B): 
-------------------------------------
* Chain [39] with precondition: [V_k>=V_n+16,V_n+31>=V_k] 
    - Upper bound: 3/8*V_n-3/8*V_k+15 
    - Complexity: n 
* Chain [38] with precondition: [V_k>=V_n+32] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [37] with precondition: [V_n+15>=V_k] 
    - Upper bound: 3/4*V_n-3/4*V_k+18 
    - Complexity: n 
* Chain [36] with precondition: [7>=V_limit,V_n>=2,V_k>=V_n+16,V_n+31>=V_k,V_limit+8*V_n>=9,V_limit+9*V_n+15>=V_k] 
    - Upper bound: 11/2*V_n-V_k/2+3/8*V_limit+20 
    - Complexity: n 
* Chain [35] with precondition: [7>=V_limit,V_n>=2,V_n+15>=V_k,V_limit+8*V_n>=9] 
    - Upper bound: 41/8*V_n-V_k/8+11 
    - Complexity: n 
* Chain [34] with precondition: [V_n>=1,V_limit>=1,V_k>=V_n+16,V_n+31>=V_k,V_n+V_limit+23>=V_k] 
    - Upper bound: 13/4*V_n-V_k/4+V_limit/8+10 
    - Complexity: n 
* Chain [33] with precondition: [V_n>=1,V_limit>=1,V_n+15>=V_k] 
    - Upper bound: 25/8*V_n-V_k/8+V_limit/8+7 
    - Complexity: n 
* Chain [32] with precondition: [V_n>=1,15>=8*V_n+V_limit,V_k>=V_n+16,V_n+31>=V_k] 
    - Upper bound: 17/8*V_n-V_k/8+7 
    - Complexity: n 
* Chain [31] with precondition: [V_n>=1,15>=8*V_n+V_limit,V_n+15>=V_k] 
    - Upper bound: 17/8*V_n-V_k/8+7 
    - Complexity: n 
* Chain [30] with precondition: [V_n>=1,V_k>=V_n+32,V_k>=9*V_n+V_limit+24] 
    - Upper bound: 2*V_n+3 
    - Complexity: n 
* Chain [29] with precondition: [V_n>=1,V_k>=V_n+32,V_n+V_limit+31>=V_k] 
    - Upper bound: 25/8*V_n-V_k/8+V_limit/8+7 
    - Complexity: n 
* Chain [28] with precondition: [V_n>=2,V_k>=V_n+32,V_k>=V_n+V_limit+32,V_limit+9*V_n+23>=V_k] 
    - Upper bound: 25/8*V_n-V_k/8+V_limit/8+15 
    - Complexity: n 

### Maximum cost of eval_inflate_stored_start(V_n,V_k,V_limit,B): max([max([max([nat(V_n/8-V_k/8+3)*3+nat(V_n/8-V_k/8+2)*3,nat(-V_n/8+V_k/8-V_limit/8)*2+nat(9/8*V_n-V_k/8+V_limit/8+4)*3]),nat(V_n/8-V_k/8+4)+max([nat(V_n/8-V_k/8+4)*2,nat(9/8*V_n-V_k/8+V_limit/8+3)*3+nat(V_n+2)*2])]),nat(V_n)*2+max([max([nat(9/8*V_n-V_k/8+V_limit/8+4),nat(V_n/8-V_k/8+4)+nat(9/8*V_n-V_k/8+V_limit/8+3)]),nat(V_n/8-V_k/8+2)+2+max([nat(V_n+V_limit/8),nat(V_n+2)*2+nat(V_n)])])])+3 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 41 ms.
* Invariants computed in 60 ms.
   - Backward Invariants 29 ms.
   - Transitive Invariants 13 ms.
* Refinement performed in 155 ms.
* Termination proved in 13 ms.
* Upper bounds computed in 162 ms.
   - Equation cost structures 86 ms.
   - Phase cost structures 31 ms.
   - Chain cost structures 29 ms.
   - Solving cost expressions 5 ms.
* Total analysis performed in 494 ms.


Warning: Ignored call to eval_Perl_scan_vstring_stop/1 in equation eval_Perl_scan_vstring_bb12_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_Perl_scan_vstring_10/7,eval_Perl_scan_vstring_11/8,eval_Perl_scan_vstring_bb1_in/7,eval_Perl_scan_vstring_bb2_in/7,eval_Perl_scan_vstring_bb3_in/8]
1. non_recursive  : [eval_Perl_scan_vstring_bb12_in/1]
2. recursive  : [eval_Perl_scan_vstring_bb5_in/9]
3. recursive  : [eval_Perl_scan_vstring_34/11,eval_Perl_scan_vstring_35/12,eval_Perl_scan_vstring_bb10_in/11,eval_Perl_scan_vstring_bb11_in/12,eval_Perl_scan_vstring_bb9_in/11]
4. recursive  : [eval_Perl_scan_vstring_27/5,eval_Perl_scan_vstring_28/6,eval_Perl_scan_vstring_30/7,eval_Perl_scan_vstring_31/7,eval_Perl_scan_vstring_32/7,eval_Perl_scan_vstring_33/7,eval_Perl_scan_vstring__critedge2_in/4,eval_Perl_scan_vstring_bb6_in/5,eval_Perl_scan_vstring_bb7_in/5,eval_Perl_scan_vstring_bb8_in/6,loop_cont_eval_Perl_scan_vstring_bb5_in/6,loop_cont_eval_Perl_scan_vstring_bb9_in/5]
5. non_recursive  : [loop_cont_eval_Perl_scan_vstring__critedge2_in/2]
6. non_recursive  : [eval_Perl_scan_vstring_22/4]
7. non_recursive  : [eval_Perl_scan_vstring_21/4]
8. non_recursive  : [eval_Perl_scan_vstring_20/4]
9. non_recursive  : [eval_Perl_scan_vstring_19/6]
10. non_recursive  : [eval_Perl_scan_vstring_18/6]
11. non_recursive  : [eval_Perl_scan_vstring_17/5]
12. non_recursive  : [eval_Perl_scan_vstring_16/4]
13. non_recursive  : [eval_Perl_scan_vstring_bb4_in/4]
14. non_recursive  : [eval_Perl_scan_vstring_15/5]
15. non_recursive  : [eval_Perl_scan_vstring_14/4]
16. non_recursive  : [eval_Perl_scan_vstring__critedge_in/4]
17. non_recursive  : [loop_cont_eval_Perl_scan_vstring_bb1_in/5]
18. non_recursive  : [eval_Perl_scan_vstring_9/4]
19. non_recursive  : [eval_Perl_scan_vstring_8/4]
20. non_recursive  : [eval_Perl_scan_vstring_7/5]
21. non_recursive  : [eval_Perl_scan_vstring_6/5]
22. non_recursive  : [eval_Perl_scan_vstring_5/4]
23. non_recursive  : [eval_Perl_scan_vstring_4/3]
24. non_recursive  : [eval_Perl_scan_vstring_3/3]
25. non_recursive  : [eval_Perl_scan_vstring_2/3]
26. non_recursive  : [eval_Perl_scan_vstring_1/3]
27. non_recursive  : [eval_Perl_scan_vstring_0/3]
28. non_recursive  : [eval_Perl_scan_vstring_bb0_in/3]
29. non_recursive  : [eval_Perl_scan_vstring_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_Perl_scan_vstring_bb1_in/7
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into eval_Perl_scan_vstring_bb5_in/9
3. SCC is partially evaluated into eval_Perl_scan_vstring_bb9_in/11
4. SCC is partially evaluated into eval_Perl_scan_vstring__critedge2_in/4
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into eval_Perl_scan_vstring_22/4
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into eval_Perl_scan_vstring_19/6
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is partially evaluated into eval_Perl_scan_vstring_15/5
15. SCC is completely evaluated into other SCCs
16. SCC is completely evaluated into other SCCs
17. SCC is completely evaluated into other SCCs
18. SCC is partially evaluated into eval_Perl_scan_vstring_9/4
19. SCC is completely evaluated into other SCCs
20. SCC is partially evaluated into eval_Perl_scan_vstring_7/5
21. SCC is completely evaluated into other SCCs
22. SCC is completely evaluated into other SCCs
23. SCC is completely evaluated into other SCCs
24. SCC is completely evaluated into other SCCs
25. SCC is completely evaluated into other SCCs
26. SCC is completely evaluated into other SCCs
27. SCC is completely evaluated into other SCCs
28. SCC is completely evaluated into other SCCs
29. SCC is partially evaluated into eval_Perl_scan_vstring_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_Perl_scan_vstring_bb1_in/7 
* CE 6 is refined into CE [25] 
* CE 8 is refined into CE [26] 
* CE 7 is refined into CE [27] 


#### Refined cost equations eval_Perl_scan_vstring_bb1_in/7 
* CE 25: eval_Perl_scan_vstring_bb1_in(A,B,C,D,A,B,C) = 0
     [B>=C+1,C>=A,D=4] 
* CE 26: eval_Perl_scan_vstring_bb1_in(A,B,C,D,A,B,C) = 0
     [C>=B,C>=A,D=4] 
* CE 27: eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V_pos_1,B,C,D,E) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,F,G,C,D,E)
     [V_PL_bufend>=V_pos_1+1,V_pos_1>=V_s,V_pos_1+1=F,G=4,B=4] 

### Cost equations --> "Loop" of eval_Perl_scan_vstring_bb1_in/7 
* CEs [27] --> Loop 23 
* CEs [25] --> Loop 24 
* CEs [26] --> Loop 25 

#### Loops of eval_Perl_scan_vstring_bb1_in/7 
* Loop 23: eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V_pos_1,B,C,D,E)->  eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V_pos_1',B',C,D,E)
                  [V_PL_bufend>=V_pos_1+1,V_pos_1>=V_s,V_pos_1+1=V_pos_1',B'=4,B=4] 
* Loop 24: eval_Perl_scan_vstring_bb1_in(A,B,C,D,A,B,C) [B>=C+1,C>=A,D=4] 
* Loop 25: eval_Perl_scan_vstring_bb1_in(A,B,C,D,A,B,C) [C>=B,C>=A,D=4] 

### Ranking functions of CR eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V_pos_1,B,C,D,E) 
* RF of phase [23]: [V_PL_bufend-V_pos_1]

#### Partial ranking functions of CR eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V_pos_1,B,C,D,E) 
* Partial RF of phase [23]:
  - RF of loop [23:1]:
    V_PL_bufend-V_pos_1

Discarded unfeasible chain [[23]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V_pos_1,B,C,D,E) 
* [[23],25]
* [[23],24]
* [25]
* [24]


### Merging Chains  eval_Perl_scan_vstring_bb1_in/7 into  External patterns of execution 
* [[25,[23]]] --> 1 
* [[25]] --> 2 
* [[24]] --> 3 
* [[24,[23]]] --> 4 


### Specialization of cost equations eval_Perl_scan_vstring_bb5_in/9 
* CE 21 is refined into CE [28] 
* CE 20 is refined into CE [29] 


#### Refined cost equations eval_Perl_scan_vstring_bb5_in/9 
* CE 28: eval_Perl_scan_vstring_bb5_in(A,B,C,D,E,A,B,C,D) = 0
     [C>=D,B>=D,E=2] 
* CE 29: eval_Perl_scan_vstring_bb5_in(V_PL_bufend,V_pos_2,V__1,V_end_0,B,C,D,E,F) = 1+ eval_Perl_scan_vstring_bb5_in(V_PL_bufend,V_pos_2,V__1,G,H,C,D,E,F)
     [V_pos_2>=V_end_0,V_end_0>=V__1+1,V_end_0=G+1,H=2,B=2] 

### Cost equations --> "Loop" of eval_Perl_scan_vstring_bb5_in/9 
* CEs [29] --> Loop 26 
* CEs [28] --> Loop 27 

#### Loops of eval_Perl_scan_vstring_bb5_in/9 
* Loop 26: eval_Perl_scan_vstring_bb5_in(V_PL_bufend,V_pos_2,V__1,V_end_0,B,C,D,E,F)->  eval_Perl_scan_vstring_bb5_in(V_PL_bufend,V_pos_2,V__1,V_end_0',B',C,D,E,F)
                  [V_pos_2>=V_end_0,V_end_0>=V__1+1,V_end_0=V_end_0'+1,B'=2,B=2] 
* Loop 27: eval_Perl_scan_vstring_bb5_in(A,B,C,D,E,A,B,C,D) [C>=D,B>=D,E=2] 

### Ranking functions of CR eval_Perl_scan_vstring_bb5_in(V_PL_bufend,V_pos_2,V__1,V_end_0,B,C,D,E,F) 
* RF of phase [26]: [-V__1+V_end_0]

#### Partial ranking functions of CR eval_Perl_scan_vstring_bb5_in(V_PL_bufend,V_pos_2,V__1,V_end_0,B,C,D,E,F) 
* Partial RF of phase [26]:
  - RF of loop [26:1]:
    -V__1+V_end_0

Discarded unfeasible chain [[26]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_Perl_scan_vstring_bb5_in(V_PL_bufend,V_pos_2,V__1,V_end_0,B,C,D,E,F) 
* [[26],27]
* [27]


### Merging Chains  eval_Perl_scan_vstring_bb5_in/9 into  External patterns of execution 
* [[27]] --> 1 
* [[27,[26]]] --> 2 


### Specialization of cost equations eval_Perl_scan_vstring_bb9_in/11 
* CE 22 is refined into CE [30] 
* CE 24 is refined into CE [31] 
* CE 23 is refined into CE [32] 


#### Refined cost equations eval_Perl_scan_vstring_bb9_in/11 
* CE 30: eval_Perl_scan_vstring_bb9_in(A,B,C,D,E,F,G,H,A,G,F) = 0
     [A>=G+1,G>=F,F=B+1,H=3] 
* CE 31: eval_Perl_scan_vstring_bb9_in(A,B,C,D,E,F,G,H,A,G,F) = 0
     [A>=F+1,G>=A,F=B+1,H=3] 
* CE 32: eval_Perl_scan_vstring_bb9_in(V_PL_bufend,V_pos_2,V__1,V_end_0,V_16,V_18,V_pos_3,B,C,D,E) = 1+ eval_Perl_scan_vstring_bb9_in(V_PL_bufend,F,V__1,V_end_0,V_16,V_18,G,H,C,D,E)
     [V_PL_bufend>=V_pos_3+1,V_pos_3>=V_18,V_pos_3+1=G,V_18=F+1,V_18=V_pos_2+1,H=3,B=3] 

### Cost equations --> "Loop" of eval_Perl_scan_vstring_bb9_in/11 
* CEs [32] --> Loop 28 
* CEs [30] --> Loop 29 
* CEs [31] --> Loop 30 

#### Loops of eval_Perl_scan_vstring_bb9_in/11 
* Loop 28: eval_Perl_scan_vstring_bb9_in(V_PL_bufend,V_pos_2,V__1,V_end_0,V_16,V_18,V_pos_3,B,C,D,E)->  eval_Perl_scan_vstring_bb9_in(V_PL_bufend,V_pos_2',V__1,V_end_0,V_16,V_18,V_pos_3',B',C,D,E)
                  [V_PL_bufend>=V_pos_3+1,V_pos_3>=V_18,V_pos_3+1=V_pos_3',V_18=V_pos_2'+1,V_18=V_pos_2+1,B'=3,B=3] 
* Loop 29: eval_Perl_scan_vstring_bb9_in(A,B,C,D,E,F,G,H,A,G,F) [A>=G+1,G>=F,F=B+1,H=3] 
* Loop 30: eval_Perl_scan_vstring_bb9_in(A,B,C,D,E,F,G,H,A,G,F) [A>=F+1,G>=A,F=B+1,H=3] 

### Ranking functions of CR eval_Perl_scan_vstring_bb9_in(V_PL_bufend,V_pos_2,V__1,V_end_0,V_16,V_18,V_pos_3,B,C,D,E) 
* RF of phase [28]: [V_PL_bufend-V_pos_3]

#### Partial ranking functions of CR eval_Perl_scan_vstring_bb9_in(V_PL_bufend,V_pos_2,V__1,V_end_0,V_16,V_18,V_pos_3,B,C,D,E) 
* Partial RF of phase [28]:
  - RF of loop [28:1]:
    V_PL_bufend-V_pos_3

Discarded unfeasible chain [[28]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_Perl_scan_vstring_bb9_in(V_PL_bufend,V_pos_2,V__1,V_end_0,V_16,V_18,V_pos_3,B,C,D,E) 
* [[28],30]
* [[28],29]
* [29]


### Merging Chains  eval_Perl_scan_vstring_bb9_in/11 into  External patterns of execution 
* [[30,[28]]] --> 1 
* [[29]] --> 2 
* [[29,[28]]] --> 3 


### Specialization of cost equations eval_Perl_scan_vstring__critedge2_in/4 
* CE 16 is refined into CE [33,34] 
* CE 19 is refined into CE [35,36] 
* CE 17 is refined into CE [37,38,39,40,41,42] 
* CE 18 is refined into CE [43,44,45,46,47,48] 


#### Refined cost equations eval_Perl_scan_vstring__critedge2_in/4 
* CE 33: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) = 1+ eval_Perl_scan_vstring_bb5_in(V_PL_bufend,V_pos_2,V__1,V_pos_2,C,V_PL_bufend,V_pos_2,V__1,V_pos_2):1
     [V__1>=V_pos_2,V_PL_bufend>=V_pos_2+2,C=2,B=5] 
* CE 34: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) = 1+ eval_Perl_scan_vstring_bb5_in(V_PL_bufend,V_pos_2,V__1,V_pos_2,C,V_PL_bufend,V_pos_2,V__1,V__1):2
     [V_pos_2>=V__1+1,V_PL_bufend>=V_pos_2+2,C=2,B=5] 
* CE 35: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) = 1+ eval_Perl_scan_vstring_bb5_in(V_PL_bufend,V_pos_2,V__1,V_pos_2,C,V_PL_bufend,V_pos_2,V__1,V_pos_2):1
     [V__1>=V_pos_2,V_pos_2+1>=V_PL_bufend,C=2,B=5] 
* CE 36: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) = 1+ eval_Perl_scan_vstring_bb5_in(V_PL_bufend,V_pos_2,V__1,V_pos_2,C,V_PL_bufend,V_pos_2,V__1,V__1):2
     [V_pos_2>=V__1+1,V_pos_2+1>=V_PL_bufend,C=2,B=5] 
* CE 37: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) = 3+ eval_Perl_scan_vstring_bb5_in(V_PL_bufend,C,V__1,D,E,V_PL_bufend,F,V__1,G):1+ eval_Perl_scan_vstring_bb9_in(V_PL_bufend,H,V__1,I,J,K,K,L,V_PL_bufend,V_PL_bufend,K):1+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_PL_bufend,K,M)
     [V_PL_bufend>=K+1,V__1+1>=K,0>=J+1,K=I+1,K=H+1,K=G+1,K=F+1,K=D+1,K=C+1,K=V_pos_2+1,M=5,L=3,E=2,B=5] 
* CE 38: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) = 3+ eval_Perl_scan_vstring_bb5_in(V_PL_bufend,C,V__1,D,E,V_PL_bufend,F,V__1,G):1+ eval_Perl_scan_vstring_bb9_in(V_PL_bufend,H,V__1,I,J,K,K,L,V_PL_bufend,K,K):2+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,K,K,M)
     [V_PL_bufend>=K+1,V__1+1>=K,0>=J+1,K=I+1,K=H+1,K=G+1,K=F+1,K=D+1,K=C+1,K=V_pos_2+1,M=5,L=3,E=2,B=5] 
* CE 39: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) = 3+ eval_Perl_scan_vstring_bb5_in(V_PL_bufend,C,V__1,D,E,V_PL_bufend,F,V__1,G):1+ eval_Perl_scan_vstring_bb9_in(V_PL_bufend,H,V__1,I,J,K,K,L,V_PL_bufend,M,K):3+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,M,K,N)
     [V_PL_bufend>=M+1,M>=K+1,V__1+1>=K,0>=J+1,K=I+1,K=H+1,K=G+1,K=F+1,K=D+1,K=C+1,K=V_pos_2+1,N=5,L=3,E=2,B=5] 
* CE 40: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) = 3+ eval_Perl_scan_vstring_bb5_in(V_PL_bufend,C,V__1,D,E,V_PL_bufend,F,V__1,V__1):2+ eval_Perl_scan_vstring_bb9_in(V_PL_bufend,G,V__1,V__1,H,I,I,J,V_PL_bufend,V_PL_bufend,I):1+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_PL_bufend,I,K)
     [V_PL_bufend>=I+1,I>=V__1+2,0>=H+1,I=G+1,I=F+1,I=D+1,I=C+1,I=V_pos_2+1,K=5,J=3,E=2,B=5] 
* CE 41: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) = 3+ eval_Perl_scan_vstring_bb5_in(V_PL_bufend,C,V__1,D,E,V_PL_bufend,F,V__1,V__1):2+ eval_Perl_scan_vstring_bb9_in(V_PL_bufend,G,V__1,V__1,H,I,I,J,V_PL_bufend,I,I):2+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,I,I,K)
     [V_PL_bufend>=I+1,I>=V__1+2,0>=H+1,I=G+1,I=F+1,I=D+1,I=C+1,I=V_pos_2+1,K=5,J=3,E=2,B=5] 
* CE 42: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) = 3+ eval_Perl_scan_vstring_bb5_in(V_PL_bufend,C,V__1,D,E,V_PL_bufend,F,V__1,V__1):2+ eval_Perl_scan_vstring_bb9_in(V_PL_bufend,G,V__1,V__1,H,I,I,J,V_PL_bufend,K,I):3+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,K,I,L)
     [V_PL_bufend>=K+1,K>=I+1,I>=V__1+2,0>=H+1,I=G+1,I=F+1,I=D+1,I=C+1,I=V_pos_2+1,L=5,J=3,E=2,B=5] 
* CE 43: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) = 3+ eval_Perl_scan_vstring_bb5_in(V_PL_bufend,C,V__1,D,E,V_PL_bufend,F,V__1,G):1+ eval_Perl_scan_vstring_bb9_in(V_PL_bufend,H,V__1,I,J,K,K,L,V_PL_bufend,V_PL_bufend,K):1+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_PL_bufend,K,M)
     [V_PL_bufend>=K+1,V__1+1>=K,J>=1,K=I+1,K=H+1,K=G+1,K=F+1,K=D+1,K=C+1,K=V_pos_2+1,M=5,L=3,E=2,B=5] 
* CE 44: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) = 3+ eval_Perl_scan_vstring_bb5_in(V_PL_bufend,C,V__1,D,E,V_PL_bufend,F,V__1,G):1+ eval_Perl_scan_vstring_bb9_in(V_PL_bufend,H,V__1,I,J,K,K,L,V_PL_bufend,K,K):2+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,K,K,M)
     [V_PL_bufend>=K+1,V__1+1>=K,J>=1,K=I+1,K=H+1,K=G+1,K=F+1,K=D+1,K=C+1,K=V_pos_2+1,M=5,L=3,E=2,B=5] 
* CE 45: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) = 3+ eval_Perl_scan_vstring_bb5_in(V_PL_bufend,C,V__1,D,E,V_PL_bufend,F,V__1,G):1+ eval_Perl_scan_vstring_bb9_in(V_PL_bufend,H,V__1,I,J,K,K,L,V_PL_bufend,M,K):3+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,M,K,N)
     [V_PL_bufend>=M+1,M>=K+1,V__1+1>=K,J>=1,K=I+1,K=H+1,K=G+1,K=F+1,K=D+1,K=C+1,K=V_pos_2+1,N=5,L=3,E=2,B=5] 
* CE 46: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) = 3+ eval_Perl_scan_vstring_bb5_in(V_PL_bufend,C,V__1,D,E,V_PL_bufend,F,V__1,V__1):2+ eval_Perl_scan_vstring_bb9_in(V_PL_bufend,G,V__1,V__1,H,I,I,J,V_PL_bufend,V_PL_bufend,I):1+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_PL_bufend,I,K)
     [V_PL_bufend>=I+1,I>=V__1+2,H>=1,I=G+1,I=F+1,I=D+1,I=C+1,I=V_pos_2+1,K=5,J=3,E=2,B=5] 
* CE 47: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) = 3+ eval_Perl_scan_vstring_bb5_in(V_PL_bufend,C,V__1,D,E,V_PL_bufend,F,V__1,V__1):2+ eval_Perl_scan_vstring_bb9_in(V_PL_bufend,G,V__1,V__1,H,I,I,J,V_PL_bufend,I,I):2+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,I,I,K)
     [V_PL_bufend>=I+1,I>=V__1+2,H>=1,I=G+1,I=F+1,I=D+1,I=C+1,I=V_pos_2+1,K=5,J=3,E=2,B=5] 
* CE 48: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) = 3+ eval_Perl_scan_vstring_bb5_in(V_PL_bufend,C,V__1,D,E,V_PL_bufend,F,V__1,V__1):2+ eval_Perl_scan_vstring_bb9_in(V_PL_bufend,G,V__1,V__1,H,I,I,J,V_PL_bufend,K,I):3+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,K,I,L)
     [V_PL_bufend>=K+1,K>=I+1,I>=V__1+2,H>=1,I=G+1,I=F+1,I=D+1,I=C+1,I=V_pos_2+1,L=5,J=3,E=2,B=5] 

### Cost equations --> "Loop" of eval_Perl_scan_vstring__critedge2_in/4 
* CEs [42,48] --> Loop 31 
* CEs [39,45] --> Loop 32 
* CEs [40,46] --> Loop 33 
* CEs [37,43] --> Loop 34 
* CEs [38,44] --> Loop 35 
* CEs [41,47] --> Loop 36 
* CEs [34] --> Loop 37 
* CEs [33] --> Loop 38 
* CEs [36] --> Loop 39 
* CEs [35] --> Loop 40 

#### Loops of eval_Perl_scan_vstring__critedge2_in/4 
* Loop 31: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)->  eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2',V__1',B')
                  [V_PL_bufend>=V_pos_2'+1,V_pos_2>=V__1+1,V_pos_2'>=V_pos_2+2,V_pos_2+1=V__1',B'=5,B=5] 
* Loop 32: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)->  eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2',V__1',B')
                  [V_PL_bufend>=V_pos_2'+1,V_pos_2'>=V_pos_2+2,V__1>=V_pos_2,V_pos_2+1=V__1',B'=5,B=5] 
* Loop 33: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)->  eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_PL_bufend,A',B')
                  [V_pos_2>=V__1+1,V_PL_bufend>=V_pos_2+2,V_pos_2+1=A',B'=5,B=5] 
* Loop 34: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)->  eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_PL_bufend,A',B')
                  [V__1>=V_pos_2,V_PL_bufend>=V_pos_2+2,V_pos_2+1=A',B'=5,B=5] 
* Loop 35: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)->  eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,A',A',B')
                  [V__1+1>=A',V_PL_bufend>=A'+1,A'=V_pos_2+1,B'=5,B=5] 
* Loop 36: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)->  eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,A',A',B')
                  [V_PL_bufend>=A'+1,A'>=V__1+2,A'=V_pos_2+1,B'=5,B=5] 
* Loop 37: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) [V_pos_2>=V__1+1,V_PL_bufend>=V_pos_2+2,B=5] 
* Loop 38: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) [V__1>=V_pos_2,V_PL_bufend>=V_pos_2+2,B=5] 
* Loop 39: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) [V_pos_2>=V__1+1,V_pos_2+1>=V_PL_bufend,B=5] 
* Loop 40: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) [V__1>=V_pos_2,V_pos_2+1>=V_PL_bufend,B=5] 

### Ranking functions of CR eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) 
* RF of phase [31,32,35,36]: [V_PL_bufend-V_pos_2-1]

#### Partial ranking functions of CR eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) 
* Partial RF of phase [31,32,35,36]:
  - RF of loop [31:1]:
    V_PL_bufend/2-V__1/2-3/2 depends on loops [32:1,35:1] 
  - RF of loop [31:1,32:1]:
    V_PL_bufend/2-V_pos_2/2-1
  - RF of loop [32:1]:
    -V_pos_2+V__1+1 depends on loops [31:1,36:1] 
  - RF of loop [35:1,36:1]:
    V_PL_bufend-V_pos_2-1
  - RF of loop [36:1]:
    V_PL_bufend/2-V__1/2-1 depends on loops [32:1,35:1] 
    V_pos_2-V__1 depends on loops [31:1,32:1,35:1] 

Discarded unfeasible chain [[31,32,35,36]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) 
* [[31,32,35,36],40]
* [[31,32,35,36],39]
* [[31,32,35,36],38]
* [[31,32,35,36],37]
* [[31,32,35,36],34,39]
* [[31,32,35,36],33,39]
* [40]
* [39]
* [38]
* [37]
* [34,39]
* [33,39]


### Merging Chains  eval_Perl_scan_vstring__critedge2_in/4 into  External patterns of execution 
* [[40]] --> 1 
* [[39]] --> 2 
* [[40,[31,32,35,36]]] --> 3 
* [[39,34],[38]] --> 4 
* [[39,33],[37]] --> 5 
* [[39,34,[31,32,35,36]],[38,[31,32,35,36]],[39,[31,32,35,36]]] --> 6 
* [[39,33,[31,32,35,36]],[37,[31,32,35,36]]] --> 7 


### Specialization of cost equations eval_Perl_scan_vstring_22/4 
* CE 15 is refined into CE [49,50,51,52,53,54,55] 


#### Refined cost equations eval_Perl_scan_vstring_22/4 
* CE 49: eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V__s1,B) = 1+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_1,V__s1,C):1
     [V__s1>=V_pos_1,V_pos_1+1>=V_PL_bufend,C=5] 
* CE 50: eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V__s1,B) = 1+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_1,V__s1,C):2
     [V_pos_1>=V__s1+1,V_pos_1+1>=V_PL_bufend,C=5] 
* CE 51: eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V__s1,B) = 1+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_1,V__s1,C):3
     [V_PL_bufend>=V_pos_1+2,C=5] 
* CE 52: eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V__s1,B) = 1+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_1,V__s1,C):4
     [V__s1>=V_pos_1,V_PL_bufend>=V_pos_1+2,C=5] 
* CE 53: eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V__s1,B) = 1+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_1,V__s1,C):5
     [V_pos_1>=V__s1+1,V_PL_bufend>=V_pos_1+2,C=5] 
* CE 54: eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V__s1,B) = 1+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_1,V__s1,C):6
     [V_PL_bufend>=V_pos_1+3,C=5] 
* CE 55: eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V__s1,B) = 1+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_1,V__s1,C):7
     [V_PL_bufend>=V_pos_1+4,C=5] 

### Cost equations --> "Loop" of eval_Perl_scan_vstring_22/4 
* CEs [55] --> Loop 41 
* CEs [54] --> Loop 42 
* CEs [53] --> Loop 43 
* CEs [52] --> Loop 44 
* CEs [51] --> Loop 45 
* CEs [50] --> Loop 46 
* CEs [49] --> Loop 47 

#### Loops of eval_Perl_scan_vstring_22/4 
* Loop 41: eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V__s1,B) [V_PL_bufend>=V_pos_1+4] 
* Loop 42: eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V__s1,B) [V_PL_bufend>=V_pos_1+3] 
* Loop 43: eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V__s1,B) [V_pos_1>=V__s1+1,V_PL_bufend>=V_pos_1+2] 
* Loop 44: eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V__s1,B) [V__s1>=V_pos_1,V_PL_bufend>=V_pos_1+2] 
* Loop 45: eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V__s1,B) [V_PL_bufend>=V_pos_1+2] 
* Loop 46: eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V__s1,B) [V_pos_1>=V__s1+1,V_pos_1+1>=V_PL_bufend] 
* Loop 47: eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V__s1,B) [V__s1>=V_pos_1,V_pos_1+1>=V_PL_bufend] 

### Ranking functions of CR eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V__s1,B) 

#### Partial ranking functions of CR eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V__s1,B) 


### Resulting Chains:eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V__s1,B) 
* [47]
* [46]
* [45]
* [44]
* [43]
* [42]
* [41]


### Merging Chains  eval_Perl_scan_vstring_22/4 into  External patterns of execution 
* [[47]] --> 1 
* [[46]] --> 2 
* [[45]] --> 3 
* [[44]] --> 4 
* [[43]] --> 5 
* [[42]] --> 6 
* [[41]] --> 7 


### Specialization of cost equations eval_Perl_scan_vstring_19/6 
* CE 13 is refined into CE [56,57,58,59,60,61,62] 
* CE 12 is refined into CE [63,64,65,66,67,68,69] 
* CE 14 is refined into CE [70,71,72,73,74,75,76] 


#### Refined cost equations eval_Perl_scan_vstring_19/6 
* CE 56: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) = 0+ eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V_11,B):1
     [V_11>=V_pos_1,V_pos_1+1>=V_PL_bufend,V_9>=1,V_11=V_s+1] 
* CE 57: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) = 0+ eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V_11,B):2
     [V_pos_1>=V_11+1,V_pos_1+1>=V_PL_bufend,V_9>=1,V_11=V_s+1] 
* CE 58: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) = 0+ eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V_11,B):3
     [V_PL_bufend>=V_pos_1+2,V_9>=1,V_11=V_s+1] 
* CE 59: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) = 0+ eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V_11,B):4
     [V_11>=V_pos_1,V_PL_bufend>=V_pos_1+2,V_9>=1,V_11=V_s+1] 
* CE 60: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) = 0+ eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V_11,B):5
     [V_pos_1>=V_11+1,V_PL_bufend>=V_pos_1+2,V_9>=1,V_11=V_s+1] 
* CE 61: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) = 0+ eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V_11,B):6
     [V_PL_bufend>=V_pos_1+3,V_9>=1,V_11=V_s+1] 
* CE 62: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) = 0+ eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V_11,B):7
     [V_PL_bufend>=V_pos_1+4,V_9>=1,V_11=V_s+1] 
* CE 63: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) = 0+ eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V_11,B):1
     [V_11>=V_pos_1,V_pos_1+1>=V_PL_bufend,0>=V_9+1,V_11=V_s+1] 
* CE 64: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) = 0+ eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V_11,B):2
     [V_pos_1>=V_11+1,V_pos_1+1>=V_PL_bufend,0>=V_9+1,V_11=V_s+1] 
* CE 65: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) = 0+ eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V_11,B):3
     [V_PL_bufend>=V_pos_1+2,0>=V_9+1,V_11=V_s+1] 
* CE 66: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) = 0+ eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V_11,B):4
     [V_11>=V_pos_1,V_PL_bufend>=V_pos_1+2,0>=V_9+1,V_11=V_s+1] 
* CE 67: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) = 0+ eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V_11,B):5
     [V_pos_1>=V_11+1,V_PL_bufend>=V_pos_1+2,0>=V_9+1,V_11=V_s+1] 
* CE 68: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) = 0+ eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V_11,B):6
     [V_PL_bufend>=V_pos_1+3,0>=V_9+1,V_11=V_s+1] 
* CE 69: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) = 0+ eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V_11,B):7
     [V_PL_bufend>=V_pos_1+4,0>=V_9+1,V_11=V_s+1] 
* CE 70: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) = 0+ eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V_s,B):1
     [V_s>=V_pos_1,V_pos_1+1>=V_PL_bufend,V_s+1=V_11,V_9=0] 
* CE 71: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) = 0+ eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V_s,B):2
     [V_pos_1>=V_s+1,V_pos_1+1>=V_PL_bufend,V_s+1=V_11,V_9=0] 
* CE 72: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) = 0+ eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V_s,B):3
     [V_PL_bufend>=V_pos_1+2,V_s+1=V_11,V_9=0] 
* CE 73: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) = 0+ eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V_s,B):4
     [V_s>=V_pos_1,V_PL_bufend>=V_pos_1+2,V_s+1=V_11,V_9=0] 
* CE 74: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) = 0+ eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V_s,B):5
     [V_pos_1>=V_s+1,V_PL_bufend>=V_pos_1+2,V_s+1=V_11,V_9=0] 
* CE 75: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) = 0+ eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V_s,B):6
     [V_PL_bufend>=V_pos_1+3,V_s+1=V_11,V_9=0] 
* CE 76: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) = 0+ eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V_s,B):7
     [V_PL_bufend>=V_pos_1+4,V_s+1=V_11,V_9=0] 

### Cost equations --> "Loop" of eval_Perl_scan_vstring_19/6 
* CEs [62] --> Loop 48 
* CEs [61] --> Loop 49 
* CEs [58] --> Loop 50 
* CEs [69] --> Loop 51 
* CEs [68] --> Loop 52 
* CEs [65] --> Loop 53 
* CEs [60] --> Loop 54 
* CEs [59] --> Loop 55 
* CEs [57] --> Loop 56 
* CEs [56] --> Loop 57 
* CEs [67] --> Loop 58 
* CEs [66] --> Loop 59 
* CEs [64] --> Loop 60 
* CEs [63] --> Loop 61 
* CEs [76] --> Loop 62 
* CEs [75] --> Loop 63 
* CEs [72] --> Loop 64 
* CEs [73] --> Loop 65 
* CEs [70] --> Loop 66 
* CEs [74] --> Loop 67 
* CEs [71] --> Loop 68 

#### Loops of eval_Perl_scan_vstring_19/6 
* Loop 48: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) [V_PL_bufend>=V_pos_1+4,V_9>=1,V_s+1=V_11] 
* Loop 49: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) [V_PL_bufend>=V_pos_1+3,V_9>=1,V_s+1=V_11] 
* Loop 50: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) [V_PL_bufend>=V_pos_1+2,V_9>=1,V_s+1=V_11] 
* Loop 51: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) [V_PL_bufend>=V_pos_1+4,0>=V_9+1,V_s+1=V_11] 
* Loop 52: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) [V_PL_bufend>=V_pos_1+3,0>=V_9+1,V_s+1=V_11] 
* Loop 53: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) [V_PL_bufend>=V_pos_1+2,0>=V_9+1,V_s+1=V_11] 
* Loop 54: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) [V_pos_1>=V_11+1,V_PL_bufend>=V_pos_1+2,V_9>=1,V_11=V_s+1] 
* Loop 55: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) [V_11>=V_pos_1,V_PL_bufend>=V_pos_1+2,V_9>=1,V_11=V_s+1] 
* Loop 56: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) [V_pos_1>=V_11+1,V_pos_1+1>=V_PL_bufend,V_9>=1,V_11=V_s+1] 
* Loop 57: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) [V_11>=V_pos_1,V_pos_1+1>=V_PL_bufend,V_9>=1,V_11=V_s+1] 
* Loop 58: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) [V_pos_1>=V_11+1,V_PL_bufend>=V_pos_1+2,0>=V_9+1,V_11=V_s+1] 
* Loop 59: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) [V_11>=V_pos_1,V_PL_bufend>=V_pos_1+2,0>=V_9+1,V_11=V_s+1] 
* Loop 60: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) [V_pos_1>=V_11+1,V_pos_1+1>=V_PL_bufend,0>=V_9+1,V_11=V_s+1] 
* Loop 61: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) [V_11>=V_pos_1,V_pos_1+1>=V_PL_bufend,0>=V_9+1,V_11=V_s+1] 
* Loop 62: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) [V_PL_bufend>=V_pos_1+4,V_s+1=V_11,V_9=0] 
* Loop 63: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) [V_PL_bufend>=V_pos_1+3,V_s+1=V_11,V_9=0] 
* Loop 64: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) [V_PL_bufend>=V_pos_1+2,V_s+1=V_11,V_9=0] 
* Loop 65: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) [V_PL_bufend>=V_pos_1+2,V_s>=V_pos_1,V_s+1=V_11,V_9=0] 
* Loop 66: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) [V_s>=V_pos_1,V_pos_1+1>=V_PL_bufend,V_s+1=V_11,V_9=0] 
* Loop 67: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) [V_PL_bufend>=V_pos_1+2,V_pos_1>=V_s+1,V_s+1=V_11,V_9=0] 
* Loop 68: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) [V_pos_1+1>=V_PL_bufend,V_pos_1>=V_s+1,V_s+1=V_11,V_9=0] 

### Ranking functions of CR eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) 

#### Partial ranking functions of CR eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) 


### Resulting Chains:eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) 
* [68]
* [67]
* [66]
* [65]
* [64]
* [63]
* [62]
* [61]
* [60]
* [59]
* [58]
* [57]
* [56]
* [55]
* [54]
* [53]
* [52]
* [51]
* [50]
* [49]
* [48]


### Merging Chains  eval_Perl_scan_vstring_19/6 into  External patterns of execution 
* [[66]] --> 1 
* [[68]] --> 2 
* [[64]] --> 3 
* [[65]] --> 4 
* [[67]] --> 5 
* [[63]] --> 6 
* [[62]] --> 7 
* [[53]] --> 8 
* [[52]] --> 9 
* [[51]] --> 10 
* [[50]] --> 11 
* [[49]] --> 12 
* [[48]] --> 13 
* [[60]] --> 14 
* [[58]] --> 15 
* [[61]] --> 16 
* [[59]] --> 17 
* [[56]] --> 18 
* [[54]] --> 19 
* [[57]] --> 20 
* [[55]] --> 21 


### Specialization of cost equations eval_Perl_scan_vstring_15/5 
* CE 10 is refined into CE [77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97] 
* CE 9 is refined into CE [98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118] 
* CE 11 is refined into CE [119] 


#### Refined cost equations eval_Perl_scan_vstring_15/5 
* CE 77: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,C,D,B):1
     [V_s>=V_pos_1,V_pos_1+1>=V_PL_bufend,V_7>=1,V_s+1=D,C=0] 
* CE 78: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,C,D,B):2
     [V_pos_1+1>=V_PL_bufend,V_pos_1>=V_s+1,V_7>=1,V_s+1=D,C=0] 
* CE 79: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,C,D,B):3
     [V_PL_bufend>=V_pos_1+2,V_7>=1,V_s+1=D,C=0] 
* CE 80: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,C,D,B):4
     [V_PL_bufend>=V_pos_1+2,V_s>=V_pos_1,V_7>=1,V_s+1=D,C=0] 
* CE 81: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,C,D,B):5
     [V_PL_bufend>=V_pos_1+2,V_pos_1>=V_s+1,V_7>=1,V_s+1=D,C=0] 
* CE 82: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,C,D,B):6
     [V_PL_bufend>=V_pos_1+3,V_7>=1,V_s+1=D,C=0] 
* CE 83: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,C,D,B):7
     [V_PL_bufend>=V_pos_1+4,V_7>=1,V_s+1=D,C=0] 
* CE 84: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,C,D,B):8
     [V_PL_bufend>=V_pos_1+2,V_7>=1,0>=C+1,V_s+1=D] 
* CE 85: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,C,D,B):9
     [V_PL_bufend>=V_pos_1+3,V_7>=1,0>=C+1,V_s+1=D] 
* CE 86: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,C,D,B):10
     [V_PL_bufend>=V_pos_1+4,V_7>=1,0>=C+1,V_s+1=D] 
* CE 87: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,C,D,B):11
     [V_PL_bufend>=V_pos_1+2,C>=1,V_7>=1,V_s+1=D] 
* CE 88: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,C,D,B):12
     [V_PL_bufend>=V_pos_1+3,C>=1,V_7>=1,V_s+1=D] 
* CE 89: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,C,D,B):13
     [V_PL_bufend>=V_pos_1+4,C>=1,V_7>=1,V_s+1=D] 
* CE 90: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(C,V_PL_bufend,V_pos_1,D,E,B):14
     [V_pos_1>=E+1,V_pos_1+1>=V_PL_bufend,V_7>=1,0>=D+1,E=C+1,E=V_s+1] 
* CE 91: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(C,V_PL_bufend,V_pos_1,D,E,B):15
     [V_pos_1>=E+1,V_PL_bufend>=V_pos_1+2,V_7>=1,0>=D+1,E=C+1,E=V_s+1] 
* CE 92: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(C,V_PL_bufend,V_pos_1,D,E,B):16
     [E>=V_pos_1,V_pos_1+1>=V_PL_bufend,V_7>=1,0>=D+1,E=C+1,E=V_s+1] 
* CE 93: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(C,V_PL_bufend,V_pos_1,D,E,B):17
     [E>=V_pos_1,V_PL_bufend>=V_pos_1+2,V_7>=1,0>=D+1,E=C+1,E=V_s+1] 
* CE 94: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(C,V_PL_bufend,V_pos_1,D,E,B):18
     [V_pos_1>=E+1,V_pos_1+1>=V_PL_bufend,D>=1,V_7>=1,E=C+1,E=V_s+1] 
* CE 95: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(C,V_PL_bufend,V_pos_1,D,E,B):19
     [V_pos_1>=E+1,V_PL_bufend>=V_pos_1+2,D>=1,V_7>=1,E=C+1,E=V_s+1] 
* CE 96: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(C,V_PL_bufend,V_pos_1,D,E,B):20
     [E>=V_pos_1,V_pos_1+1>=V_PL_bufend,D>=1,V_7>=1,E=C+1,E=V_s+1] 
* CE 97: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(C,V_PL_bufend,V_pos_1,D,E,B):21
     [E>=V_pos_1,V_PL_bufend>=V_pos_1+2,D>=1,V_7>=1,E=C+1,E=V_s+1] 
* CE 98: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,C,D,B):1
     [V_s>=V_pos_1,V_pos_1+1>=V_PL_bufend,0>=V_7+1,V_s+1=D,C=0] 
* CE 99: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,C,D,B):2
     [V_pos_1+1>=V_PL_bufend,V_pos_1>=V_s+1,0>=V_7+1,V_s+1=D,C=0] 
* CE 100: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,C,D,B):3
     [V_PL_bufend>=V_pos_1+2,0>=V_7+1,V_s+1=D,C=0] 
* CE 101: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,C,D,B):4
     [V_PL_bufend>=V_pos_1+2,V_s>=V_pos_1,0>=V_7+1,V_s+1=D,C=0] 
* CE 102: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,C,D,B):5
     [V_PL_bufend>=V_pos_1+2,V_pos_1>=V_s+1,0>=V_7+1,V_s+1=D,C=0] 
* CE 103: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,C,D,B):6
     [V_PL_bufend>=V_pos_1+3,0>=V_7+1,V_s+1=D,C=0] 
* CE 104: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,C,D,B):7
     [V_PL_bufend>=V_pos_1+4,0>=V_7+1,V_s+1=D,C=0] 
* CE 105: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,C,D,B):8
     [V_PL_bufend>=V_pos_1+2,0>=C+1,0>=V_7+1,V_s+1=D] 
* CE 106: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,C,D,B):9
     [V_PL_bufend>=V_pos_1+3,0>=C+1,0>=V_7+1,V_s+1=D] 
* CE 107: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,C,D,B):10
     [V_PL_bufend>=V_pos_1+4,0>=C+1,0>=V_7+1,V_s+1=D] 
* CE 108: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,C,D,B):11
     [V_PL_bufend>=V_pos_1+2,C>=1,0>=V_7+1,V_s+1=D] 
* CE 109: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,C,D,B):12
     [V_PL_bufend>=V_pos_1+3,C>=1,0>=V_7+1,V_s+1=D] 
* CE 110: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,C,D,B):13
     [V_PL_bufend>=V_pos_1+4,C>=1,0>=V_7+1,V_s+1=D] 
* CE 111: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(C,V_PL_bufend,V_pos_1,D,E,B):14
     [V_pos_1>=E+1,V_pos_1+1>=V_PL_bufend,0>=D+1,0>=V_7+1,E=C+1,E=V_s+1] 
* CE 112: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(C,V_PL_bufend,V_pos_1,D,E,B):15
     [V_pos_1>=E+1,V_PL_bufend>=V_pos_1+2,0>=D+1,0>=V_7+1,E=C+1,E=V_s+1] 
* CE 113: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(C,V_PL_bufend,V_pos_1,D,E,B):16
     [E>=V_pos_1,V_pos_1+1>=V_PL_bufend,0>=D+1,0>=V_7+1,E=C+1,E=V_s+1] 
* CE 114: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(C,V_PL_bufend,V_pos_1,D,E,B):17
     [E>=V_pos_1,V_PL_bufend>=V_pos_1+2,0>=D+1,0>=V_7+1,E=C+1,E=V_s+1] 
* CE 115: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(C,V_PL_bufend,V_pos_1,D,E,B):18
     [V_pos_1>=E+1,V_pos_1+1>=V_PL_bufend,D>=1,0>=V_7+1,E=C+1,E=V_s+1] 
* CE 116: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(C,V_PL_bufend,V_pos_1,D,E,B):19
     [V_pos_1>=E+1,V_PL_bufend>=V_pos_1+2,D>=1,0>=V_7+1,E=C+1,E=V_s+1] 
* CE 117: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(C,V_PL_bufend,V_pos_1,D,E,B):20
     [E>=V_pos_1,V_pos_1+1>=V_PL_bufend,D>=1,0>=V_7+1,E=C+1,E=V_s+1] 
* CE 118: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(C,V_PL_bufend,V_pos_1,D,E,B):21
     [E>=V_pos_1,V_PL_bufend>=V_pos_1+2,D>=1,0>=V_7+1,E=C+1,E=V_s+1] 
* CE 119: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0
     [V_7=0] 

### Cost equations --> "Loop" of eval_Perl_scan_vstring_15/5 
* CEs [83,86,89] --> Loop 69 
* CEs [82,85,88] --> Loop 70 
* CEs [79,84,87] --> Loop 71 
* CEs [80] --> Loop 72 
* CEs [93,97] --> Loop 73 
* CEs [77] --> Loop 74 
* CEs [92,96] --> Loop 75 
* CEs [91,95] --> Loop 76 
* CEs [90,94] --> Loop 77 
* CEs [81] --> Loop 78 
* CEs [78] --> Loop 79 
* CEs [104,107,110] --> Loop 80 
* CEs [103,106,109] --> Loop 81 
* CEs [100,105,108] --> Loop 82 
* CEs [101] --> Loop 83 
* CEs [114,118] --> Loop 84 
* CEs [98] --> Loop 85 
* CEs [113,117] --> Loop 86 
* CEs [112,116] --> Loop 87 
* CEs [111,115] --> Loop 88 
* CEs [102] --> Loop 89 
* CEs [99] --> Loop 90 
* CEs [119] --> Loop 91 

#### Loops of eval_Perl_scan_vstring_15/5 
* Loop 69: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) [V_PL_bufend>=V_pos_1+4,V_7>=1] 
* Loop 70: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) [V_PL_bufend>=V_pos_1+3,V_7>=1] 
* Loop 71: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) [V_PL_bufend>=V_pos_1+2,V_7>=1] 
* Loop 72: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) [V_PL_bufend>=V_pos_1+2,V_s>=V_pos_1,V_7>=1] 
* Loop 73: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) [V_PL_bufend>=V_pos_1+2,V_s+1>=V_pos_1,V_7>=1] 
* Loop 74: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) [V_s>=V_pos_1,V_pos_1+1>=V_PL_bufend,V_7>=1] 
* Loop 75: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) [V_s+1>=V_pos_1,V_pos_1+1>=V_PL_bufend,V_7>=1] 
* Loop 76: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) [V_PL_bufend>=V_pos_1+2,V_pos_1>=V_s+2,V_7>=1] 
* Loop 77: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) [V_pos_1+1>=V_PL_bufend,V_pos_1>=V_s+2,V_7>=1] 
* Loop 78: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) [V_PL_bufend>=V_pos_1+2,V_pos_1>=V_s+1,V_7>=1] 
* Loop 79: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) [V_pos_1+1>=V_PL_bufend,V_pos_1>=V_s+1,V_7>=1] 
* Loop 80: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) [V_PL_bufend>=V_pos_1+4,0>=V_7+1] 
* Loop 81: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) [V_PL_bufend>=V_pos_1+3,0>=V_7+1] 
* Loop 82: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) [V_PL_bufend>=V_pos_1+2,0>=V_7+1] 
* Loop 83: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) [V_PL_bufend>=V_pos_1+2,V_s>=V_pos_1,0>=V_7+1] 
* Loop 84: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) [V_PL_bufend>=V_pos_1+2,V_s+1>=V_pos_1,0>=V_7+1] 
* Loop 85: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) [V_s>=V_pos_1,V_pos_1+1>=V_PL_bufend,0>=V_7+1] 
* Loop 86: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) [V_s+1>=V_pos_1,V_pos_1+1>=V_PL_bufend,0>=V_7+1] 
* Loop 87: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) [V_PL_bufend>=V_pos_1+2,V_pos_1>=V_s+2,0>=V_7+1] 
* Loop 88: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) [V_pos_1+1>=V_PL_bufend,V_pos_1>=V_s+2,0>=V_7+1] 
* Loop 89: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) [V_PL_bufend>=V_pos_1+2,V_pos_1>=V_s+1,0>=V_7+1] 
* Loop 90: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) [V_pos_1+1>=V_PL_bufend,V_pos_1>=V_s+1,0>=V_7+1] 
* Loop 91: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) [V_7=0] 

### Ranking functions of CR eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) 

#### Partial ranking functions of CR eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) 


### Resulting Chains:eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) 
* [91]
* [90]
* [89]
* [88]
* [87]
* [86]
* [85]
* [84]
* [83]
* [82]
* [81]
* [80]
* [79]
* [78]
* [77]
* [76]
* [75]
* [74]
* [73]
* [72]
* [71]
* [70]
* [69]


### Merging Chains  eval_Perl_scan_vstring_15/5 into  External patterns of execution 
* [[91]] --> 1 
* [[90]] --> 2 
* [[89]] --> 3 
* [[88]] --> 4 
* [[87]] --> 5 
* [[86]] --> 6 
* [[85]] --> 7 
* [[84]] --> 8 
* [[83]] --> 9 
* [[82]] --> 10 
* [[81]] --> 11 
* [[80]] --> 12 
* [[79]] --> 13 
* [[78]] --> 14 
* [[77]] --> 15 
* [[76]] --> 16 
* [[75]] --> 17 
* [[74]] --> 18 
* [[73]] --> 19 
* [[72]] --> 20 
* [[71]] --> 21 
* [[70]] --> 22 
* [[69]] --> 23 


### Specialization of cost equations eval_Perl_scan_vstring_9/4 
* CE 5 is refined into CE [120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171] 


#### Refined cost equations eval_Perl_scan_vstring_9/4 
* CE 120: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V__s,C,V_s,V_PL_bufend,V_PL_bufend):1+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_PL_bufend,D,B):1
     [V__s>=V_s,V_PL_bufend>=V__s+1,V_s+1>=V__s,D=0,C=4] 
* CE 121: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V__s,C,V_s,V_PL_bufend,V_PL_bufend):1+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_PL_bufend,D,B):2
     [V__s>=V_s,V_PL_bufend>=V__s+1,V_s+1>=V__s,0>=D+1,C=4] 
* CE 122: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V__s,C,V_s,V_PL_bufend,V_PL_bufend):1+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_PL_bufend,D,B):4
     [V_PL_bufend>=V_s+2,V__s>=V_s,V_s+1>=V__s,0>=D+1,C=4] 
* CE 123: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(C,V_PL_bufend,D,E,F,V_PL_bufend,V_PL_bufend):1+ eval_Perl_scan_vstring_15(G,V_PL_bufend,V_PL_bufend,H,B):6
     [0>=H+1,V_PL_bufend=G+1,V_PL_bufend=F+1,V_PL_bufend=D+1,V_PL_bufend=C+1,V_PL_bufend=V__s+1,V_PL_bufend=V_s+1,E=4] 
* CE 124: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V__s,C,V_s,V_PL_bufend,V_PL_bufend):1+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_PL_bufend,D,B):13
     [V__s>=V_s,V_PL_bufend>=V__s+1,V_s+1>=V__s,D>=1,C=4] 
* CE 125: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V__s,C,V_s,V_PL_bufend,V_PL_bufend):1+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_PL_bufend,D,B):15
     [V_PL_bufend>=V_s+2,V__s>=V_s,V_s+1>=V__s,D>=1,C=4] 
* CE 126: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(C,V_PL_bufend,D,E,F,V_PL_bufend,V_PL_bufend):1+ eval_Perl_scan_vstring_15(G,V_PL_bufend,V_PL_bufend,H,B):17
     [H>=1,V_PL_bufend=G+1,V_PL_bufend=F+1,V_PL_bufend=D+1,V_PL_bufend=C+1,V_PL_bufend=V__s+1,V_PL_bufend=V_s+1,E=4] 
* CE 127: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V__s,C,V_s,V_PL_bufend,V__s):2+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V__s,D,B):1
     [V_s+1>=V__s,V__s>=V_PL_bufend,V__s>=V_s,D=0,C=4] 
* CE 128: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,C,D,V_s,V_PL_bufend,E):2+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,F,G,B):2
     [V_s+1>=V_PL_bufend,0>=G+1,V_s+1=F,V_s+1=E,V_s+1=C,V_s+1=V__s,D=4] 
* CE 129: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V__s,C,V_s,V_PL_bufend,V__s):2+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V__s,D,B):6
     [V_s+1>=V__s,V__s>=V_PL_bufend,V__s>=V_s,0>=D+1,C=4] 
* CE 130: eval_Perl_scan_vstring_9(A,B,A,C) = 1+ eval_Perl_scan_vstring_bb1_in(A,B,A,D,A,B,A):2+ eval_Perl_scan_vstring_15(A,B,A,E,C):7
     [A>=B,0>=E+1,D=4] 
* CE 131: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,C,D,V_s,V_PL_bufend,E):2+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,F,G,B):13
     [V_s+1>=V_PL_bufend,G>=1,V_s+1=F,V_s+1=E,V_s+1=C,V_s+1=V__s,D=4] 
* CE 132: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V__s,C,V_s,V_PL_bufend,V__s):2+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V__s,D,B):17
     [V_s+1>=V__s,V__s>=V_PL_bufend,V__s>=V_s,D>=1,C=4] 
* CE 133: eval_Perl_scan_vstring_9(A,B,A,C) = 1+ eval_Perl_scan_vstring_bb1_in(A,B,A,D,A,B,A):2+ eval_Perl_scan_vstring_15(A,B,A,E,C):18
     [A>=B,E>=1,D=4] 
* CE 134: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V__s,C,V_s,V_PL_bufend,V__s):3+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V__s,D,B):1
     [V_PL_bufend>=V__s+1,V_s+1>=V__s,V__s>=V_s,D=0,C=4] 
* CE 135: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,C,D,E,V_s,F,G):3+ eval_Perl_scan_vstring_15(V_s,H,I,J,B):2
     [0>=J+1,V_s+1=I,V_s+2=H,V_s+1=G,V_s+2=F,V_s+1=D,V_s+2=C,V_s+1=V__s,V_s+2=V_PL_bufend,E=4] 
* CE 136: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,C,D,V_s,V_PL_bufend,E):3+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,F,G,B):3
     [V_PL_bufend>=V_s+3,0>=G+1,V_s+1=F,V_s+1=E,V_s+1=C,V_s+1=V__s,D=4] 
* CE 137: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,C,D,V_s,V_PL_bufend,E):3+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,F,G,B):6
     [V_s+2>=V_PL_bufend,V_PL_bufend>=V_s+1,0>=G+1,V_PL_bufend=F+1,V_PL_bufend=E+1,V_PL_bufend=C+1,V_PL_bufend=V__s+1,D=4] 
* CE 138: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(C,V_PL_bufend,D,E,F,V_PL_bufend,G):3+ eval_Perl_scan_vstring_15(H,V_PL_bufend,I,J,B):7
     [0>=J+1,V_PL_bufend=I+1,V_PL_bufend=H+1,V_PL_bufend=G+1,V_PL_bufend=F+1,V_PL_bufend=D+1,V_PL_bufend=C+1,V_PL_bufend=V__s+1,V_PL_bufend=V_s+1,E=4] 
* CE 139: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V__s,C,V_s,V_PL_bufend,V__s):3+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V__s,D,B):8
     [V_PL_bufend>=V__s+2,V_s+1>=V__s,V__s>=V_s,0>=D+1,C=4] 
* CE 140: eval_Perl_scan_vstring_9(A,B,A,C) = 1+ eval_Perl_scan_vstring_bb1_in(A,B,A,D,A,B,A):3+ eval_Perl_scan_vstring_15(A,B,A,E,C):9
     [B>=A+2,0>=E+1,D=4] 
* CE 141: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V__s,C,V_s,V_PL_bufend,V__s):3+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V__s,D,B):10
     [V_PL_bufend>=V__s+2,V_s+1>=V__s,V__s>=V_s,0>=D+1,C=4] 
* CE 142: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V__s,C,V_s,V_PL_bufend,V__s):3+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V__s,D,B):11
     [V_PL_bufend>=V__s+3,V_s+1>=V__s,V__s>=V_s,0>=D+1,C=4] 
* CE 143: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V__s,C,V_s,V_PL_bufend,V__s):3+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V__s,D,B):12
     [V_PL_bufend>=V__s+4,V_s+1>=V__s,V__s>=V_s,0>=D+1,C=4] 
* CE 144: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,C,D,E,V_s,F,G):3+ eval_Perl_scan_vstring_15(V_s,H,I,J,B):13
     [J>=1,V_s+1=I,V_s+2=H,V_s+1=G,V_s+2=F,V_s+1=D,V_s+2=C,V_s+1=V__s,V_s+2=V_PL_bufend,E=4] 
* CE 145: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,C,D,V_s,V_PL_bufend,E):3+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,F,G,B):14
     [V_PL_bufend>=V_s+3,G>=1,V_s+1=F,V_s+1=E,V_s+1=C,V_s+1=V__s,D=4] 
* CE 146: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,C,D,V_s,V_PL_bufend,E):3+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,F,G,B):17
     [V_s+2>=V_PL_bufend,V_PL_bufend>=V_s+1,G>=1,V_PL_bufend=F+1,V_PL_bufend=E+1,V_PL_bufend=C+1,V_PL_bufend=V__s+1,D=4] 
* CE 147: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(C,V_PL_bufend,D,E,F,V_PL_bufend,G):3+ eval_Perl_scan_vstring_15(H,V_PL_bufend,I,J,B):18
     [J>=1,V_PL_bufend=I+1,V_PL_bufend=H+1,V_PL_bufend=G+1,V_PL_bufend=F+1,V_PL_bufend=D+1,V_PL_bufend=C+1,V_PL_bufend=V__s+1,V_PL_bufend=V_s+1,E=4] 
* CE 148: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V__s,C,V_s,V_PL_bufend,V__s):3+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V__s,D,B):19
     [V_PL_bufend>=V__s+2,V_s+1>=V__s,V__s>=V_s,D>=1,C=4] 
* CE 149: eval_Perl_scan_vstring_9(A,B,A,C) = 1+ eval_Perl_scan_vstring_bb1_in(A,B,A,D,A,B,A):3+ eval_Perl_scan_vstring_15(A,B,A,E,C):20
     [B>=A+2,E>=1,D=4] 
* CE 150: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V__s,C,V_s,V_PL_bufend,V__s):3+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V__s,D,B):21
     [V_PL_bufend>=V__s+2,V_s+1>=V__s,V__s>=V_s,D>=1,C=4] 
* CE 151: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V__s,C,V_s,V_PL_bufend,V__s):3+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V__s,D,B):22
     [V_PL_bufend>=V__s+3,V_s+1>=V__s,V__s>=V_s,D>=1,C=4] 
* CE 152: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V__s,C,V_s,V_PL_bufend,V__s):3+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V__s,D,B):23
     [V_PL_bufend>=V__s+4,V_s+1>=V__s,V__s>=V_s,D>=1,C=4] 
* CE 153: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V__s,C,V_s,V_PL_bufend,D):4+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,D,E,B):1
     [V_PL_bufend>=D+1,V__s>=V_s,D>=V__s+1,V_s+1>=V__s,E=0,C=4] 
* CE 154: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,C,V__s,D,V_s,E,F):4+ eval_Perl_scan_vstring_15(V_s,G,F,H,B):2
     [V__s>=V_s,F>=V__s+1,V_s+1>=V__s,0>=H+1,F+1=G,F+1=E,F+1=C,F+1=V_PL_bufend,D=4] 
* CE 155: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V__s,C,V_s,V_PL_bufend,D):4+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,D,E,B):3
     [V_PL_bufend>=D+2,V__s>=V_s,D>=V__s+1,V_s+1>=V__s,0>=E+1,C=4] 
* CE 156: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,C,V__s,D,V_s,E,F):4+ eval_Perl_scan_vstring_15(V_s,G,F,H,B):4
     [F>=V_s+2,V__s>=V_s,V_s+1>=V__s,0>=H+1,F+1=G,F+1=E,F+1=C,F+1=V_PL_bufend,D=4] 
* CE 157: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V__s,C,V_s,V_PL_bufend,D):4+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,D,E,B):5
     [V_PL_bufend>=D+2,D>=V_s+2,V__s>=V_s,V_s+1>=V__s,0>=E+1,C=4] 
* CE 158: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(C,V_PL_bufend,D,E,F,V_PL_bufend,G):4+ eval_Perl_scan_vstring_15(H,V_PL_bufend,I,J,B):6
     [0>=J+1,V_PL_bufend=I+1,V_PL_bufend=H+2,V_PL_bufend=G+1,V_PL_bufend=F+2,V_PL_bufend=D+2,V_PL_bufend=C+2,V_PL_bufend=V__s+2,V_PL_bufend=V_s+2,E=4] 
* CE 159: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(C,V_PL_bufend,D,E,F,V_PL_bufend,G):4+ eval_Perl_scan_vstring_15(H,V_PL_bufend,G,I,B):8
     [V_PL_bufend>=G+2,0>=I+1,G=H+1,G=F+1,G=D+1,G=C+1,G=V__s+1,G=V_s+1,E=4] 
* CE 160: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V__s,C,V_s,V_PL_bufend,D):4+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,D,E,B):10
     [V_PL_bufend>=D+2,V__s>=V_s,D>=V__s+1,V_s+1>=V__s,0>=E+1,C=4] 
* CE 161: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V__s,C,V_s,V_PL_bufend,D):4+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,D,E,B):11
     [V_PL_bufend>=D+3,V__s>=V_s,D>=V__s+1,V_s+1>=V__s,0>=E+1,C=4] 
* CE 162: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V__s,C,V_s,V_PL_bufend,D):4+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,D,E,B):12
     [V_PL_bufend>=D+4,V__s>=V_s,D>=V__s+1,V_s+1>=V__s,0>=E+1,C=4] 
* CE 163: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,C,V__s,D,V_s,E,F):4+ eval_Perl_scan_vstring_15(V_s,G,F,H,B):13
     [V__s>=V_s,F>=V__s+1,V_s+1>=V__s,H>=1,F+1=G,F+1=E,F+1=C,F+1=V_PL_bufend,D=4] 
* CE 164: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V__s,C,V_s,V_PL_bufend,D):4+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,D,E,B):14
     [V_PL_bufend>=D+2,V__s>=V_s,D>=V__s+1,V_s+1>=V__s,E>=1,C=4] 
* CE 165: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,C,V__s,D,V_s,E,F):4+ eval_Perl_scan_vstring_15(V_s,G,F,H,B):15
     [F>=V_s+2,V__s>=V_s,V_s+1>=V__s,H>=1,F+1=G,F+1=E,F+1=C,F+1=V_PL_bufend,D=4] 
* CE 166: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V__s,C,V_s,V_PL_bufend,D):4+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,D,E,B):16
     [V_PL_bufend>=D+2,D>=V_s+2,V__s>=V_s,V_s+1>=V__s,E>=1,C=4] 
* CE 167: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(C,V_PL_bufend,D,E,F,V_PL_bufend,G):4+ eval_Perl_scan_vstring_15(H,V_PL_bufend,I,J,B):17
     [J>=1,V_PL_bufend=I+1,V_PL_bufend=H+2,V_PL_bufend=G+1,V_PL_bufend=F+2,V_PL_bufend=D+2,V_PL_bufend=C+2,V_PL_bufend=V__s+2,V_PL_bufend=V_s+2,E=4] 
* CE 168: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(C,V_PL_bufend,D,E,F,V_PL_bufend,G):4+ eval_Perl_scan_vstring_15(H,V_PL_bufend,G,I,B):19
     [V_PL_bufend>=G+2,I>=1,G=H+1,G=F+1,G=D+1,G=C+1,G=V__s+1,G=V_s+1,E=4] 
* CE 169: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V__s,C,V_s,V_PL_bufend,D):4+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,D,E,B):21
     [V_PL_bufend>=D+2,V__s>=V_s,D>=V__s+1,V_s+1>=V__s,E>=1,C=4] 
* CE 170: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V__s,C,V_s,V_PL_bufend,D):4+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,D,E,B):22
     [V_PL_bufend>=D+3,V__s>=V_s,D>=V__s+1,V_s+1>=V__s,E>=1,C=4] 
* CE 171: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V__s,C,V_s,V_PL_bufend,D):4+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,D,E,B):23
     [V_PL_bufend>=D+4,V__s>=V_s,D>=V__s+1,V_s+1>=V__s,E>=1,C=4] 

### Cost equations --> "Loop" of eval_Perl_scan_vstring_9/4 
* CEs [162,171] --> Loop 92 
* CEs [143,152,161,170] --> Loop 93 
* CEs [142,151,155,160,164,169] --> Loop 94 
* CEs [139,141,148,150,153,154,163] --> Loop 95 
* CEs [120,121,124,134] --> Loop 96 
* CEs [127,129,132] --> Loop 97 
* CEs [157,166] --> Loop 98 
* CEs [156,165] --> Loop 99 
* CEs [122,125] --> Loop 100 
* CEs [137,146] --> Loop 101 
* CEs [130,133] --> Loop 102 
* CEs [159,168] --> Loop 103 
* CEs [140,149] --> Loop 104 
* CEs [128,131] --> Loop 105 
* CEs [136,145] --> Loop 106 
* CEs [123,126,138,147] --> Loop 107 
* CEs [158,167] --> Loop 108 
* CEs [135,144] --> Loop 109 

#### Loops of eval_Perl_scan_vstring_9/4 
* Loop 92: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) [V_PL_bufend>=V__s+5,V_s+1>=V__s,V__s>=V_s] 
* Loop 93: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) [V_PL_bufend>=V__s+4,V_s+1>=V__s,V__s>=V_s] 
* Loop 94: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) [V_PL_bufend>=V__s+3,V_s+1>=V__s,V__s>=V_s] 
* Loop 95: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) [V_PL_bufend>=V__s+2,V_s+1>=V__s,V__s>=V_s] 
* Loop 96: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) [V_PL_bufend>=V__s+1,V_s+1>=V__s,V__s>=V_s] 
* Loop 97: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) [V_s+1>=V__s,V__s>=V_PL_bufend,V__s>=V_s] 
* Loop 98: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) [V_s+1>=V__s,V__s>=V_s,V_PL_bufend>=V_s+4] 
* Loop 99: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) [V_s+1>=V__s,V__s>=V_s,V_PL_bufend>=V_s+3] 
* Loop 100: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) [V_s+1>=V__s,V__s>=V_s,V_PL_bufend>=V_s+2] 
* Loop 101: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) [V_s+2>=V_PL_bufend,V_PL_bufend>=V_s+1,V_PL_bufend=V__s+1] 
* Loop 102: eval_Perl_scan_vstring_9(A,B,A,C) [A>=B] 
* Loop 103: eval_Perl_scan_vstring_9(A,B,A,C) [B>=A+3] 
* Loop 104: eval_Perl_scan_vstring_9(A,B,A,C) [B>=A+2] 
* Loop 105: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) [V_s+1>=V_PL_bufend,V_s+1=V__s] 
* Loop 106: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) [V_PL_bufend>=V_s+3,V_s+1=V__s] 
* Loop 107: eval_Perl_scan_vstring_9(A,B,A,C) [A+1=B] 
* Loop 108: eval_Perl_scan_vstring_9(A,B,A,C) [A+2=B] 
* Loop 109: eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) [V_s+1=V__s,V_s+2=V_PL_bufend] 

### Ranking functions of CR eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) 

#### Partial ranking functions of CR eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) 


### Resulting Chains:eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B) 
* [109]
* [108]
* [107]
* [106]
* [105]
* [104]
* [103]
* [102]
* [101]
* [100]
* [99]
* [98]
* [97]
* [96]
* [95]
* [94]
* [93]
* [92]


### Merging Chains  eval_Perl_scan_vstring_9/4 into  External patterns of execution 
* [[102]] --> 1 
* [[104]] --> 2 
* [[103]] --> 3 
* [[105]] --> 4 
* [[106]] --> 5 
* [[109]] --> 6 
* [[108]] --> 7 
* [[107]] --> 8 
* [[101]] --> 9 
* [[100]] --> 10 
* [[99]] --> 11 
* [[98]] --> 12 
* [[97]] --> 13 
* [[96]] --> 14 
* [[95]] --> 15 
* [[94]] --> 16 
* [[93]] --> 17 
* [[92]] --> 18 


### Specialization of cost equations eval_Perl_scan_vstring_7/5 
* CE 3 is refined into CE [172,173,174,175,176,177,178,179,180,181,182,183,184] 
* CE 2 is refined into CE [185,186,187,188,189,190,191,192,193,194,195,196,197] 
* CE 4 is refined into CE [198,199,200,201,202,203,204,205,206,207,208,209,210,211,212] 


#### Refined cost equations eval_Perl_scan_vstring_7/5 
* CE 172: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(V_s,V_PL_bufend,C,B):4
     [V_s+1>=V_PL_bufend,V_0>=1,V_s+1=C,V_s+1=V_2] 
* CE 173: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(V_s,V_PL_bufend,C,B):5
     [V_PL_bufend>=V_s+3,V_0>=1,V_s+1=C,V_s+1=V_2] 
* CE 174: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(C,V_PL_bufend,D,B):6
     [V_0>=1,V_PL_bufend=D+1,V_PL_bufend=C+2,V_PL_bufend=V_2+1,V_PL_bufend=V_s+2] 
* CE 175: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(C,V_PL_bufend,D,B):9
     [V_0>=1,V_PL_bufend=D+1,V_PL_bufend=C+2,V_PL_bufend=V_2+1,V_PL_bufend=V_s+2] 
* CE 176: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(V_s,V_PL_bufend,C,B):10
     [V_PL_bufend>=V_s+2,V_0>=1,V_s+1=C,V_s+1=V_2] 
* CE 177: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(V_s,V_PL_bufend,C,B):11
     [V_PL_bufend>=V_s+3,V_0>=1,V_s+1=C,V_s+1=V_2] 
* CE 178: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(V_s,V_PL_bufend,C,B):12
     [V_PL_bufend>=V_s+4,V_0>=1,V_s+1=C,V_s+1=V_2] 
* CE 179: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(V_s,V_PL_bufend,C,B):13
     [V_s+1>=V_PL_bufend,V_0>=1,V_s+1=C,V_s+1=V_2] 
* CE 180: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(V_s,V_PL_bufend,C,B):14
     [V_PL_bufend>=V_s+2,V_0>=1,V_s+1=C,V_s+1=V_2] 
* CE 181: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(V_s,V_PL_bufend,C,B):15
     [V_PL_bufend>=V_s+3,V_0>=1,V_s+1=C,V_s+1=V_2] 
* CE 182: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(V_s,V_PL_bufend,C,B):16
     [V_PL_bufend>=V_s+4,V_0>=1,V_s+1=C,V_s+1=V_2] 
* CE 183: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(V_s,V_PL_bufend,C,B):17
     [V_PL_bufend>=V_s+5,V_0>=1,V_s+1=C,V_s+1=V_2] 
* CE 184: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(V_s,V_PL_bufend,C,B):18
     [V_PL_bufend>=V_s+6,V_0>=1,V_s+1=C,V_s+1=V_2] 
* CE 185: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(V_s,V_PL_bufend,C,B):4
     [V_s+1>=V_PL_bufend,0>=V_0+1,V_s+1=C,V_s+1=V_2] 
* CE 186: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(V_s,V_PL_bufend,C,B):5
     [V_PL_bufend>=V_s+3,0>=V_0+1,V_s+1=C,V_s+1=V_2] 
* CE 187: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(C,V_PL_bufend,D,B):6
     [0>=V_0+1,V_PL_bufend=D+1,V_PL_bufend=C+2,V_PL_bufend=V_2+1,V_PL_bufend=V_s+2] 
* CE 188: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(C,V_PL_bufend,D,B):9
     [0>=V_0+1,V_PL_bufend=D+1,V_PL_bufend=C+2,V_PL_bufend=V_2+1,V_PL_bufend=V_s+2] 
* CE 189: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(V_s,V_PL_bufend,C,B):10
     [V_PL_bufend>=V_s+2,0>=V_0+1,V_s+1=C,V_s+1=V_2] 
* CE 190: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(V_s,V_PL_bufend,C,B):11
     [V_PL_bufend>=V_s+3,0>=V_0+1,V_s+1=C,V_s+1=V_2] 
* CE 191: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(V_s,V_PL_bufend,C,B):12
     [V_PL_bufend>=V_s+4,0>=V_0+1,V_s+1=C,V_s+1=V_2] 
* CE 192: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(V_s,V_PL_bufend,C,B):13
     [V_s+1>=V_PL_bufend,0>=V_0+1,V_s+1=C,V_s+1=V_2] 
* CE 193: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(V_s,V_PL_bufend,C,B):14
     [V_PL_bufend>=V_s+2,0>=V_0+1,V_s+1=C,V_s+1=V_2] 
* CE 194: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(V_s,V_PL_bufend,C,B):15
     [V_PL_bufend>=V_s+3,0>=V_0+1,V_s+1=C,V_s+1=V_2] 
* CE 195: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(V_s,V_PL_bufend,C,B):16
     [V_PL_bufend>=V_s+4,0>=V_0+1,V_s+1=C,V_s+1=V_2] 
* CE 196: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(V_s,V_PL_bufend,C,B):17
     [V_PL_bufend>=V_s+5,0>=V_0+1,V_s+1=C,V_s+1=V_2] 
* CE 197: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(V_s,V_PL_bufend,C,B):18
     [V_PL_bufend>=V_s+6,0>=V_0+1,V_s+1=C,V_s+1=V_2] 
* CE 198: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V_s,B):1
     [V_s>=V_PL_bufend,V_s+1=V_2,V_0=0] 
* CE 199: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V_s,B):2
     [V_PL_bufend>=V_s+2,V_s+1=V_2,V_0=0] 
* CE 200: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V_s,B):3
     [V_PL_bufend>=V_s+3,V_s+1=V_2,V_0=0] 
* CE 201: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(C,V_PL_bufend,D,B):7
     [V_PL_bufend=D+2,V_PL_bufend=C+2,V_PL_bufend=V_2+1,V_PL_bufend=V_s+2,V_0=0] 
* CE 202: eval_Perl_scan_vstring_7(A,B,C,B,D) = 0+ eval_Perl_scan_vstring_9(E,B,F,D):8
     [B=F+1,B=E+1,B=A+1,C=0] 
* CE 203: eval_Perl_scan_vstring_7(A,B,C,B,D) = 0+ eval_Perl_scan_vstring_9(E,B,F,D):9
     [B=F+1,B=E+1,B=A+1,C=0] 
* CE 204: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V_s,B):10
     [V_PL_bufend>=V_s+2,V_s+1=V_2,V_0=0] 
* CE 205: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V_s,B):11
     [V_PL_bufend>=V_s+3,V_s+1=V_2,V_0=0] 
* CE 206: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V_s,B):12
     [V_PL_bufend>=V_s+4,V_s+1=V_2,V_0=0] 
* CE 207: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V_s,B):13
     [V_s>=V_PL_bufend,V_s+1=V_2,V_0=0] 
* CE 208: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V_s,B):14
     [V_PL_bufend>=V_s+1,V_s+1=V_2,V_0=0] 
* CE 209: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V_s,B):15
     [V_PL_bufend>=V_s+2,V_s+1=V_2,V_0=0] 
* CE 210: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V_s,B):16
     [V_PL_bufend>=V_s+3,V_s+1=V_2,V_0=0] 
* CE 211: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V_s,B):17
     [V_PL_bufend>=V_s+4,V_s+1=V_2,V_0=0] 
* CE 212: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 0+ eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V_s,B):18
     [V_PL_bufend>=V_s+5,V_s+1=V_2,V_0=0] 

### Cost equations --> "Loop" of eval_Perl_scan_vstring_7/5 
* CEs [172,179] --> Loop 110 
* CEs [184] --> Loop 111 
* CEs [183] --> Loop 112 
* CEs [178,182] --> Loop 113 
* CEs [173,177,181] --> Loop 114 
* CEs [176,180] --> Loop 115 
* CEs [185,192] --> Loop 116 
* CEs [197] --> Loop 117 
* CEs [196] --> Loop 118 
* CEs [191,195] --> Loop 119 
* CEs [186,190,194] --> Loop 120 
* CEs [189,193] --> Loop 121 
* CEs [174,175] --> Loop 122 
* CEs [187,188] --> Loop 123 
* CEs [198,207] --> Loop 124 
* CEs [212] --> Loop 125 
* CEs [206,211] --> Loop 126 
* CEs [200,205,210] --> Loop 127 
* CEs [199,204,209] --> Loop 128 
* CEs [208] --> Loop 129 
* CEs [201] --> Loop 130 
* CEs [202,203] --> Loop 131 

#### Loops of eval_Perl_scan_vstring_7/5 
* Loop 110: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) [V_s+1>=V_PL_bufend,V_0>=1,V_s+1=V_2] 
* Loop 111: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) [V_PL_bufend>=V_s+6,V_0>=1,V_s+1=V_2] 
* Loop 112: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) [V_PL_bufend>=V_s+5,V_0>=1,V_s+1=V_2] 
* Loop 113: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) [V_PL_bufend>=V_s+4,V_0>=1,V_s+1=V_2] 
* Loop 114: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) [V_PL_bufend>=V_s+3,V_0>=1,V_s+1=V_2] 
* Loop 115: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) [V_PL_bufend>=V_s+2,V_0>=1,V_s+1=V_2] 
* Loop 116: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) [V_s+1>=V_PL_bufend,0>=V_0+1,V_s+1=V_2] 
* Loop 117: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) [V_PL_bufend>=V_s+6,0>=V_0+1,V_s+1=V_2] 
* Loop 118: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) [V_PL_bufend>=V_s+5,0>=V_0+1,V_s+1=V_2] 
* Loop 119: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) [V_PL_bufend>=V_s+4,0>=V_0+1,V_s+1=V_2] 
* Loop 120: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) [V_PL_bufend>=V_s+3,0>=V_0+1,V_s+1=V_2] 
* Loop 121: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) [V_PL_bufend>=V_s+2,0>=V_0+1,V_s+1=V_2] 
* Loop 122: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) [V_0>=1,V_s+1=V_2,V_s+2=V_PL_bufend] 
* Loop 123: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) [0>=V_0+1,V_s+1=V_2,V_s+2=V_PL_bufend] 
* Loop 124: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) [V_s>=V_PL_bufend,V_s+1=V_2,V_0=0] 
* Loop 125: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) [V_PL_bufend>=V_s+5,V_s+1=V_2,V_0=0] 
* Loop 126: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) [V_PL_bufend>=V_s+4,V_s+1=V_2,V_0=0] 
* Loop 127: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) [V_PL_bufend>=V_s+3,V_s+1=V_2,V_0=0] 
* Loop 128: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) [V_PL_bufend>=V_s+2,V_s+1=V_2,V_0=0] 
* Loop 129: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) [V_PL_bufend>=V_s+1,V_s+1=V_2,V_0=0] 
* Loop 130: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) [V_s+1=V_2,V_s+2=V_PL_bufend,V_0=0] 
* Loop 131: eval_Perl_scan_vstring_7(A,B,C,B,D) [B=A+1,C=0] 

### Ranking functions of CR eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) 

#### Partial ranking functions of CR eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) 


### Resulting Chains:eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) 
* [131]
* [130]
* [129]
* [128]
* [127]
* [126]
* [125]
* [124]
* [123]
* [122]
* [121]
* [120]
* [119]
* [118]
* [117]
* [116]
* [115]
* [114]
* [113]
* [112]
* [111]
* [110]


### Merging Chains  eval_Perl_scan_vstring_7/5 into  External patterns of execution 
* [[124]] --> 1 
* [[129]] --> 2 
* [[128]] --> 3 
* [[127]] --> 4 
* [[126]] --> 5 
* [[125]] --> 6 
* [[130]] --> 7 
* [[131]] --> 8 
* [[116]] --> 9 
* [[121]] --> 10 
* [[120]] --> 11 
* [[119]] --> 12 
* [[118]] --> 13 
* [[117]] --> 14 
* [[110]] --> 15 
* [[115]] --> 16 
* [[114]] --> 17 
* [[113]] --> 18 
* [[112]] --> 19 
* [[111]] --> 20 
* [[123]] --> 21 
* [[122]] --> 22 


### Specialization of cost equations eval_Perl_scan_vstring_start/3 
* CE 1 is refined into CE [213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234] 


#### Refined cost equations eval_Perl_scan_vstring_start/3 
* CE 213: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) = 0+ eval_Perl_scan_vstring_7(V_s,V_PL_bufend,C,D,B):1
     [V_s>=V_PL_bufend,V_s+1=D,C=0] 
* CE 214: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) = 0+ eval_Perl_scan_vstring_7(V_s,V_PL_bufend,C,D,B):2
     [V_PL_bufend>=V_s+1,V_s+1=D,C=0] 
* CE 215: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) = 0+ eval_Perl_scan_vstring_7(V_s,V_PL_bufend,C,D,B):3
     [V_PL_bufend>=V_s+2,V_s+1=D,C=0] 
* CE 216: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) = 0+ eval_Perl_scan_vstring_7(V_s,V_PL_bufend,C,D,B):4
     [V_PL_bufend>=V_s+3,V_s+1=D,C=0] 
* CE 217: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) = 0+ eval_Perl_scan_vstring_7(V_s,V_PL_bufend,C,D,B):5
     [V_PL_bufend>=V_s+4,V_s+1=D,C=0] 
* CE 218: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) = 0+ eval_Perl_scan_vstring_7(V_s,V_PL_bufend,C,D,B):6
     [V_PL_bufend>=V_s+5,V_s+1=D,C=0] 
* CE 219: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) = 0+ eval_Perl_scan_vstring_7(C,V_PL_bufend,D,E,B):7
     [V_PL_bufend=E+1,V_PL_bufend=C+2,V_PL_bufend=V_s+2,D=0] 
* CE 220: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) = 0+ eval_Perl_scan_vstring_7(C,V_PL_bufend,D,V_PL_bufend,B):8
     [V_PL_bufend=C+1,V_PL_bufend=V_s+1,D=0] 
* CE 221: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) = 0+ eval_Perl_scan_vstring_7(V_s,V_PL_bufend,C,D,B):9
     [V_s+1>=V_PL_bufend,0>=C+1,V_s+1=D] 
* CE 222: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) = 0+ eval_Perl_scan_vstring_7(V_s,V_PL_bufend,C,D,B):10
     [V_PL_bufend>=V_s+2,0>=C+1,V_s+1=D] 
* CE 223: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) = 0+ eval_Perl_scan_vstring_7(V_s,V_PL_bufend,C,D,B):11
     [V_PL_bufend>=V_s+3,0>=C+1,V_s+1=D] 
* CE 224: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) = 0+ eval_Perl_scan_vstring_7(V_s,V_PL_bufend,C,D,B):12
     [V_PL_bufend>=V_s+4,0>=C+1,V_s+1=D] 
* CE 225: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) = 0+ eval_Perl_scan_vstring_7(V_s,V_PL_bufend,C,D,B):13
     [V_PL_bufend>=V_s+5,0>=C+1,V_s+1=D] 
* CE 226: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) = 0+ eval_Perl_scan_vstring_7(V_s,V_PL_bufend,C,D,B):14
     [V_PL_bufend>=V_s+6,0>=C+1,V_s+1=D] 
* CE 227: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) = 0+ eval_Perl_scan_vstring_7(V_s,V_PL_bufend,C,D,B):15
     [V_s+1>=V_PL_bufend,C>=1,V_s+1=D] 
* CE 228: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) = 0+ eval_Perl_scan_vstring_7(V_s,V_PL_bufend,C,D,B):16
     [V_PL_bufend>=V_s+2,C>=1,V_s+1=D] 
* CE 229: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) = 0+ eval_Perl_scan_vstring_7(V_s,V_PL_bufend,C,D,B):17
     [V_PL_bufend>=V_s+3,C>=1,V_s+1=D] 
* CE 230: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) = 0+ eval_Perl_scan_vstring_7(V_s,V_PL_bufend,C,D,B):18
     [V_PL_bufend>=V_s+4,C>=1,V_s+1=D] 
* CE 231: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) = 0+ eval_Perl_scan_vstring_7(V_s,V_PL_bufend,C,D,B):19
     [V_PL_bufend>=V_s+5,C>=1,V_s+1=D] 
* CE 232: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) = 0+ eval_Perl_scan_vstring_7(V_s,V_PL_bufend,C,D,B):20
     [V_PL_bufend>=V_s+6,C>=1,V_s+1=D] 
* CE 233: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) = 0+ eval_Perl_scan_vstring_7(C,V_PL_bufend,D,E,B):21
     [0>=D+1,V_PL_bufend=E+1,V_PL_bufend=C+2,V_PL_bufend=V_s+2] 
* CE 234: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) = 0+ eval_Perl_scan_vstring_7(C,V_PL_bufend,D,E,B):22
     [D>=1,V_PL_bufend=E+1,V_PL_bufend=C+2,V_PL_bufend=V_s+2] 

### Cost equations --> "Loop" of eval_Perl_scan_vstring_start/3 
* CEs [213] --> Loop 132 
* CEs [221,227] --> Loop 133 
* CEs [226,232] --> Loop 134 
* CEs [218,225,231] --> Loop 135 
* CEs [217,224,230] --> Loop 136 
* CEs [216,223,229] --> Loop 137 
* CEs [215,222,228] --> Loop 138 
* CEs [214] --> Loop 139 
* CEs [220] --> Loop 140 
* CEs [219,233,234] --> Loop 141 

#### Loops of eval_Perl_scan_vstring_start/3 
* Loop 132: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) [V_s>=V_PL_bufend] 
* Loop 133: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) [V_s+1>=V_PL_bufend] 
* Loop 134: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) [V_PL_bufend>=V_s+6] 
* Loop 135: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) [V_PL_bufend>=V_s+5] 
* Loop 136: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) [V_PL_bufend>=V_s+4] 
* Loop 137: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) [V_PL_bufend>=V_s+3] 
* Loop 138: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) [V_PL_bufend>=V_s+2] 
* Loop 139: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) [V_PL_bufend>=V_s+1] 
* Loop 140: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) [V_s+1=V_PL_bufend] 
* Loop 141: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) [V_s+2=V_PL_bufend] 

### Ranking functions of CR eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) 

#### Partial ranking functions of CR eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) 


### Resulting Chains:eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) 
* [141]
* [140]
* [139]
* [138]
* [137]
* [136]
* [135]
* [134]
* [133]
* [132]


### Merging Chains  eval_Perl_scan_vstring_start/3 into  External patterns of execution 
* [[140]] --> 1 
* [[141]] --> 2 
* [[139]] --> 3 
* [[138]] --> 4 
* [[137]] --> 5 
* [[136]] --> 6 
* [[135]] --> 7 
* [[134]] --> 8 
* [[133]] --> 9 
* [[132]] --> 10 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 26 

#### Computing cost of phase [23] 

#### Simplifying cost structure of CE 27 

#### Cost of loops [23] 

 * loop 23:eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V_pos_1,B,C,D,E) -> [eval_Perl_scan_vstring_bb1_in(V_s',V_PL_bufend',V_pos_1',B',C',D',E')] 
1
##### Pending set eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V_pos_1,B,C,D,E)
* Psum in Loop 23: [it(23)=<1]

###### Computing sum for it(23)=<1  in Loop 23 
   - Applying inductive sum strategy 
     - head Candidate: V_PL_bufend-V_pos_1 
     - head Candidate: V_PL_bufend-V_pos_1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_PL_bufend-V_pos_1 
     - tail Candidate: V_PL_bufend-V_pos_1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(23)=<V_PL_bufend-V_pos_1,it(23)=<V_PL_bufend-V_pos_1,it(23)=<V_PL_bufend-V_pos_1-V_PL_bufend'+V_pos_1',it(23)=<V_PL_bufend-V_pos_1-V_PL_bufend'+V_pos_1'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [23] 

#### Simplifying cost structure of phase [23] 

#### Cost of phase [23]:eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V_pos_1,B,C,D,E) -> [eval_Perl_scan_vstring_bb1_in(V_s',V_PL_bufend',V_pos_1',B',C',D',E')] 
1*it(23)+0
  Such that:it(23) =< V_PL_bufend-V_pos_1
it(23) =< V_PL_bufend-V_pos_1-V_PL_bufend'+V_pos_1'

#### Simplifying cost structure of chain [[23],25] 

#### Simplifying cost structure of CE 25 

#### Found solution for phase  [23] in the cache 

#### Cost of phase [23]:eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V_pos_1,B,C,D,E) -> [eval_Perl_scan_vstring_bb1_in(V_s',V_PL_bufend',V_pos_1',B',C',D',E')] 
1*it(23)+0
  Such that:it(23) =< V_PL_bufend-V_pos_1
it(23) =< V_PL_bufend-V_pos_1-V_PL_bufend'+V_pos_1'

#### Simplifying cost structure of chain [[23],24] 

#### Cost of chains of eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V_pos_1,B,C,D,E):
* Chain [[23],25]: 1*it(23)+0
  Such that:it(23) =< -V_pos_1+D

  with precondition: [B=4,V_s=C,V_PL_bufend=D,V_PL_bufend=E,V_pos_1>=V_s,V_PL_bufend>=V_pos_1+1] 

* Chain [[23],24]: 1*it(23)+0
  Such that:it(23) =< -V_pos_1+E

  with precondition: [B=4,V_s=C,V_PL_bufend=D,V_pos_1>=V_s,E>=V_pos_1+1,V_PL_bufend>=E+1] 

* Chain [25]: 0
  with precondition: [B=4,V_s=C,V_PL_bufend=D,V_pos_1=E,V_pos_1>=V_s,V_pos_1>=V_PL_bufend] 

* Chain [24]: 0
  with precondition: [B=4,V_s=C,V_PL_bufend=D,V_pos_1=E,V_pos_1>=V_s,V_PL_bufend>=V_pos_1+1] 


#### Simplifying cost structure of CE 28 

#### Computing cost of phase [26] 

#### Simplifying cost structure of CE 29 

#### Cost of loops [26] 

 * loop 26:eval_Perl_scan_vstring_bb5_in(V_PL_bufend,V_pos_2,V__1,V_end_0,B,C,D,E,F) -> [eval_Perl_scan_vstring_bb5_in(V_PL_bufend',V_pos_2',V__1',V_end_0',B',C',D',E',F')] 
1
##### Pending set eval_Perl_scan_vstring_bb5_in(V_PL_bufend,V_pos_2,V__1,V_end_0,B,C,D,E,F)
* Psum in Loop 26: [it(26)=<1]

###### Computing sum for it(26)=<1  in Loop 26 
   - Applying inductive sum strategy 
     - head Candidate: -V__1+V_end_0 
     - head Candidate: -V__1+V_end_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -V__1+V_end_0 
     - tail Candidate: -V__1+V_end_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(26)=< -V__1+V_end_0,it(26)=< -V__1+V_end_0,it(26)=< -V__1+V_end_0+V__1'-V_end_0',it(26)=< -V__1+V_end_0+V__1'-V_end_0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [26] 

#### Simplifying cost structure of phase [26] 

#### Cost of phase [26]:eval_Perl_scan_vstring_bb5_in(V_PL_bufend,V_pos_2,V__1,V_end_0,B,C,D,E,F) -> [eval_Perl_scan_vstring_bb5_in(V_PL_bufend',V_pos_2',V__1',V_end_0',B',C',D',E',F')] 
1*it(26)+0
  Such that:it(26) =< -V__1+V_end_0
it(26) =< -V__1+V_end_0+V__1'-V_end_0'

#### Simplifying cost structure of chain [[26],27] 

#### Cost of chains of eval_Perl_scan_vstring_bb5_in(V_PL_bufend,V_pos_2,V__1,V_end_0,B,C,D,E,F):
* Chain [[26],27]: 1*it(26)+0
  Such that:it(26) =< V_end_0-E

  with precondition: [B=2,V_PL_bufend=C,V_pos_2=D,V__1=E,V__1=F,V_end_0>=V__1+1,V_pos_2>=V_end_0] 

* Chain [27]: 0
  with precondition: [B=2,C=V_PL_bufend,V_pos_2=D,V__1=E,V_end_0=F,V_pos_2>=V_end_0,V__1>=V_end_0] 


#### Simplifying cost structure of CE 31 

#### Computing cost of phase [28] 

#### Simplifying cost structure of CE 32 

#### Cost of loops [28] 

 * loop 28:eval_Perl_scan_vstring_bb9_in(V_PL_bufend,V_pos_2,V__1,V_end_0,V_16,V_18,V_pos_3,B,C,D,E) -> [eval_Perl_scan_vstring_bb9_in(V_PL_bufend',V_pos_2',V__1',V_end_0',V_16',V_18',V_pos_3',B',C',D',E')] 
1
##### Pending set eval_Perl_scan_vstring_bb9_in(V_PL_bufend,V_pos_2,V__1,V_end_0,V_16,V_18,V_pos_3,B,C,D,E)
* Psum in Loop 28: [it(28)=<1]

###### Computing sum for it(28)=<1  in Loop 28 
   - Applying inductive sum strategy 
     - head Candidate: V_PL_bufend-V_pos_3 
     - head Candidate: V_PL_bufend-V_pos_3 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_PL_bufend-V_pos_3 
     - tail Candidate: V_PL_bufend-V_pos_3 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(28)=<V_PL_bufend-V_pos_3,it(28)=<V_PL_bufend-V_pos_3,it(28)=<V_PL_bufend-V_pos_3-V_PL_bufend'+V_pos_3',it(28)=<V_PL_bufend-V_pos_3-V_PL_bufend'+V_pos_3'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [28] 

#### Simplifying cost structure of phase [28] 

#### Cost of phase [28]:eval_Perl_scan_vstring_bb9_in(V_PL_bufend,V_pos_2,V__1,V_end_0,V_16,V_18,V_pos_3,B,C,D,E) -> [eval_Perl_scan_vstring_bb9_in(V_PL_bufend',V_pos_2',V__1',V_end_0',V_16',V_18',V_pos_3',B',C',D',E')] 
1*it(28)+0
  Such that:it(28) =< V_PL_bufend-V_pos_3
it(28) =< V_PL_bufend-V_pos_3-V_PL_bufend'+V_pos_3'

#### Simplifying cost structure of chain [[28],30] 

#### Simplifying cost structure of CE 30 

#### Found solution for phase  [28] in the cache 

#### Cost of phase [28]:eval_Perl_scan_vstring_bb9_in(V_PL_bufend,V_pos_2,V__1,V_end_0,V_16,V_18,V_pos_3,B,C,D,E) -> [eval_Perl_scan_vstring_bb9_in(V_PL_bufend',V_pos_2',V__1',V_end_0',V_16',V_18',V_pos_3',B',C',D',E')] 
1*it(28)+0
  Such that:it(28) =< V_PL_bufend-V_pos_3
it(28) =< V_PL_bufend-V_pos_3-V_PL_bufend'+V_pos_3'

#### Simplifying cost structure of chain [[28],29] 

#### Cost of chains of eval_Perl_scan_vstring_bb9_in(V_PL_bufend,V_pos_2,V__1,V_end_0,V_16,V_18,V_pos_3,B,C,D,E):
* Chain [[28],30]: 1*it(28)+0
  Such that:it(28) =< V_PL_bufend-V_pos_3

  with precondition: [B=3,V_pos_2+1=V_18,V_PL_bufend=C,V_PL_bufend=D,V_pos_2+1=E,V_pos_3>=V_pos_2+1,V_PL_bufend>=V_pos_3+1] 

* Chain [[28],29]: 1*it(28)+0
  Such that:it(28) =< -V_pos_3+D

  with precondition: [B=3,V_pos_2+1=V_18,V_PL_bufend=C,V_pos_2+1=E,V_pos_3>=V_pos_2+1,D>=V_pos_3+1,V_PL_bufend>=D+1] 

* Chain [29]: 0
  with precondition: [B=3,V_pos_2+1=V_18,V_PL_bufend=C,V_pos_3=D,V_pos_2+1=E,V_pos_3>=V_pos_2+1,V_PL_bufend>=V_pos_3+1] 


#### Simplifying cost structure of CE 35 

#### Computing cost of phase [31,32,35,36] 
 * Renamed intermediate variables: 
[(eq(42,1),it(26))>>s(1)]
 * Renamed intermediate variables: 
[(eq(42,2),it(28))>>s(2)]

#### Simplifying cost structure of CE 42 
 * Renamed intermediate variables: 
[(eq(48,1),it(26))>>s(3)]
 * Renamed intermediate variables: 
[(eq(48,2),it(28))>>s(4)]

#### Simplifying cost structure of CE 48 
 * Joined equivalent variables [s(2),s(4)] into s(2)
 * Joined equivalent variables [s(1),s(3)] into s(1)
 * Renamed intermediate variables: 
[(it(31),aux(1))>>s(5),(it(31),aux(2))>>s(6),(it(31),s(2))>>s(7),(it(31),s(1))>>s(8)]
 * Renamed intermediate variables: 
[(eq(39,2),it(28))>>s(9)]

#### Simplifying cost structure of CE 39 
 * Renamed intermediate variables: 
[(eq(45,2),it(28))>>s(10)]

#### Simplifying cost structure of CE 45 
 * Joined equivalent variables [s(9),s(10)] into s(9)
 * Renamed intermediate variables: 
[(it(32),aux(3))>>s(11),(it(32),s(9))>>s(12)]

#### Simplifying cost structure of CE 38 

#### Simplifying cost structure of CE 44 
 * Renamed intermediate variables: 
[(eq(41,1),it(26))>>s(13)]

#### Simplifying cost structure of CE 41 
 * Renamed intermediate variables: 
[(eq(47,1),it(26))>>s(14)]

#### Simplifying cost structure of CE 47 
 * Joined equivalent variables [s(13),s(14)] into s(13)
 * Renamed intermediate variables: 
[(it(36),aux(4))>>s(15),(it(36),s(13))>>s(16)]

#### Cost of loops [31,32,35,36] 

 * loop 31:eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) -> [eval_Perl_scan_vstring__critedge2_in(V_PL_bufend',V_pos_2',V__1',B')] 
2*s(8)+2*s(7)+3
  Such that:s(5) =< -V_pos_2+V_pos_2'
s(6) =< V_pos_2-V__1
s(7) =< s(5)
s(8) =< s(6)

 * loop 32:eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) -> [eval_Perl_scan_vstring__critedge2_in(V_PL_bufend',V_pos_2',V__1',B')] 
2*s(12)+3
  Such that:s(11) =< V_pos_2'-V__1'
s(12) =< s(11)

 * loop 35:eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) -> [eval_Perl_scan_vstring__critedge2_in(V_PL_bufend',V_pos_2',V__1',B')] 
3
 * loop 36:eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) -> [eval_Perl_scan_vstring__critedge2_in(V_PL_bufend',V_pos_2',V__1',B')] 
2*s(16)+3
  Such that:s(15) =< -V__1+V_pos_2'
s(16) =< s(15)

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 31: [it(31)=<1,s(20)=< -V_pos_2+V_pos_2',s(19)=<V_pos_2-V__1]
* Psum in Loop 32: [it(32)=<1,s(22)=<V_pos_2'-V__1']
* Psum in Loop 35: [it(35)=<1]
* Psum in Loop 36: [it(36)=<1,s(24)=< -V__1+V_pos_2']

###### Computing sum for it(31)=<1  in Loop 31 
   - Applying inductive sum strategy 
     - head Candidate: V_PL_bufend-V_pos_2-1 
       - Loop 32 is collaborative and bounds [it(32)] 
       - Loop 35 is collaborative and bounds [it(35)] 
       - Loop 36 is collaborative and bounds [it(36)] 
     - head Candidate: V_PL_bufend/2-V_pos_2/2-1 
       - Loop 32 is collaborative
       - Loop 35 is collaborative
       - Loop 36 is collaborative
     - head Candidate: V_PL_bufend/2-V__1/2-3/2 
       - Loop 32 has a reset to  [V_PL_bufend/2-V_pos_2/2-2]
       - Loop 35 has a reset to  [V_PL_bufend/2-V_pos_2/2-2]
       - Loop 36 is collaborative
     - tail Candidate: V_PL_bufend-V_pos_2-1 
       - Loop 32 is collaborative and bounds [it(32)] 
       - Loop 35 is collaborative and bounds [it(35)] 
       - Loop 36 is collaborative and bounds [it(36)] 
     - tail Candidate: V_PL_bufend/2-V_pos_2/2-1 
       - Loop 32 is collaborative and bounds [it(32)] 
       - Loop 35 is collaborative
       - Loop 36 is collaborative
     - tail Candidate: V_PL_bufend/2-V__1/2-3/2 
       - Loop 32 has undefined behavior 
 * Adding constraints: [it(31)=<aux(6)+aux(5)+aux(7),it(31)+it(32)+it(35)+it(36)=<V_PL_bufend-V_pos_2-1,it(31)=<V_PL_bufend/2-V_pos_2/2-1,aux(7)=<V_PL_bufend/2-V__1/2-3/2,it(31)+it(32)+it(35)+it(36)=<V_PL_bufend-V_pos_2-V_PL_bufend'+V_pos_2',it(31)+it(32)=<V_PL_bufend/2-V_pos_2/2-V_PL_bufend'/2+V_pos_2'/2] 

##### Pending set eval_Perl_scan_vstring_0(V_s,V_PL_bufend,B)
* Psum in Loop 31: [s(20)=< -V_pos_2+V_pos_2',s(19)=<V_pos_2-V__1]
* Psum in Loop 32: [it(32)=<1,s(22)=<V_pos_2'-V__1',aux(5)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 35: [it(35)=<1,aux(6)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 36: [it(36)=<1,s(24)=< -V__1+V_pos_2']

###### Computing sum for s(20)=< -V_pos_2+V_pos_2'  in Loop 31 
   - Applying inductive sum strategy 
     - head Candidate: V_PL_bufend-V_pos_2-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_PL_bufend-V_pos_2-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(32)+it(35)+it(36)+s(20)=<V_PL_bufend-V_pos_2-1,it(32)+it(35)+it(36)+s(20)=<V_PL_bufend-V_pos_2-V_PL_bufend'+V_pos_2'] 

##### Pending set eval_Perl_scan_vstring_0(V_s,V_PL_bufend,B)
* Psum in Loop 31: [s(19)=<V_pos_2-V__1]
* Psum in Loop 32: [it(32)=<1,s(22)=<V_pos_2'-V__1',aux(5)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 35: [it(35)=<1,aux(6)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 36: [it(36)=<1,s(24)=< -V__1+V_pos_2']

###### Computing sum for s(19)=<V_pos_2-V__1  in Loop 31 
   - Applying inductive sum strategy 
     - head Candidate: V_PL_bufend-V__1-3 
       - Loop 32 has a reset to  [V_PL_bufend-V_pos_2-4]
       - Loop 35 has a reset to  [V_PL_bufend-V_pos_2-4]
       - Loop 36 is collaborative
     - tail Candidate: V_PL_bufend-V__1-3 
       - Loop 32 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(11)=<V_pos_2-V__1] 
 * Adding constraints: [s(19)=<it(31)*aux(11),s(19)=<aux(9)+aux(8)+aux(10),aux(10)=<V_PL_bufend-V__1-3] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Pmax/min: [aux(11)=<V_pos_2-V__1]
* Psum in Loop 32: [it(32)=<1,s(22)=<V_pos_2'-V__1',aux(8)=<V_PL_bufend-V_pos_2-4,aux(5)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 35: [it(35)=<1,aux(9)=<V_PL_bufend-V_pos_2-4,aux(6)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 36: [it(36)=<1,s(24)=< -V__1+V_pos_2']

###### Computing max_min for aux(11)=<V_pos_2-V__1  
   - Applying max/min strategy 
     - Loop 31  increases the expression by [V_PL_bufend-V__1'-2,V_pos_2'-V__1'-1] 
     - Loop 32  resets the expression to [V_PL_bufend-V_pos_2-2] 
     - Loop 35  resets the expression to [0] 
     - Loop 36 does not increase the expression
 * Adding constraints:[aux(11)=<max([aux(12),aux(14),aux(15)])+aux(13),aux(12)=<V_pos_2-V__1] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Pmax/min: [aux(15)=<0,aux(14)=<V_PL_bufend-V_pos_2-2]
* Psum in Loop 31: [aux(13)=<V_PL_bufend-V__1'-2,aux(13)=<V_pos_2'-V__1'-1]
* Psum in Loop 32: [it(32)=<1,s(22)=<V_pos_2'-V__1',aux(8)=<V_PL_bufend-V_pos_2-4,aux(5)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 35: [it(35)=<1,aux(9)=<V_PL_bufend-V_pos_2-4,aux(6)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 36: [it(36)=<1,s(24)=< -V__1+V_pos_2']

###### Computing max_min for aux(15)=<0  
 * Adding constraints:[aux(15)=<0] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Pmax/min: [aux(14)=<V_PL_bufend-V_pos_2-2]
* Psum in Loop 31: [aux(13)=<V_PL_bufend-V__1'-2,aux(13)=<V_pos_2'-V__1'-1]
* Psum in Loop 32: [it(32)=<1,s(22)=<V_pos_2'-V__1',aux(8)=<V_PL_bufend-V_pos_2-4,aux(5)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 35: [it(35)=<1,aux(9)=<V_PL_bufend-V_pos_2-4,aux(6)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 36: [it(36)=<1,s(24)=< -V__1+V_pos_2']

###### Computing max_min for aux(14)=<V_PL_bufend-V_pos_2-2  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(14)=<V_PL_bufend-V_pos_2-2] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 31: [aux(13)=<V_PL_bufend-V__1'-2,aux(13)=<V_pos_2'-V__1'-1]
* Psum in Loop 32: [it(32)=<1,s(22)=<V_pos_2'-V__1',aux(8)=<V_PL_bufend-V_pos_2-4,aux(5)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 35: [it(35)=<1,aux(9)=<V_PL_bufend-V_pos_2-4,aux(6)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 36: [it(36)=<1,s(24)=< -V__1+V_pos_2']

###### Computing sum for aux(13)=<V_PL_bufend-V__1'-2  in Loop 31 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(16)=<V_PL_bufend-V_pos_2-3] 
 * Adding constraints: [aux(13)=<it(31)*aux(16)] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Pmax/min: [aux(16)=<V_PL_bufend-V_pos_2-3]
* Psum in Loop 31: [aux(13)=<V_pos_2'-V__1'-1]
* Psum in Loop 32: [it(32)=<1,s(22)=<V_pos_2'-V__1',aux(8)=<V_PL_bufend-V_pos_2-4,aux(5)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 35: [it(35)=<1,aux(9)=<V_PL_bufend-V_pos_2-4,aux(6)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 36: [it(36)=<1,s(24)=< -V__1+V_pos_2']

###### Computing max_min for aux(16)=<V_PL_bufend-V_pos_2-3  
   - Found a solution using cacheing 
 * Adding constraints:[aux(16)=<aux(14)-1] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 31: [aux(13)=<V_pos_2'-V__1'-1]
* Psum in Loop 32: [it(32)=<1,s(22)=<V_pos_2'-V__1',aux(8)=<V_PL_bufend-V_pos_2-4,aux(5)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 35: [it(35)=<1,aux(9)=<V_PL_bufend-V_pos_2-4,aux(6)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 36: [it(36)=<1,s(24)=< -V__1+V_pos_2']

###### Computing sum for aux(13)=<V_pos_2'-V__1'-1  in Loop 31 
   - Applying inductive sum strategy 
     - head Candidate: V_PL_bufend-V_pos_2-3 
       - Loop 32 is collaborative
       - Loop 35 is collaborative
       - Loop 36 is collaborative
     - tail Candidate: V_PL_bufend-V_pos_2-3 
       - Loop 32 is collaborative and bounds [it(32)] 
       - Loop 35 is collaborative and bounds [it(35)] 
       - Loop 36 is collaborative and bounds [it(36)] 
 * Adding constraints: [aux(13)=<V_PL_bufend-V_pos_2-3,aux(13)+it(32)+it(35)+it(36)=<V_PL_bufend-V_pos_2-V_PL_bufend'+V_pos_2'] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 32: [it(32)=<1,s(22)=<V_pos_2'-V__1',aux(8)=<V_PL_bufend-V_pos_2-4,aux(5)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 35: [it(35)=<1,aux(9)=<V_PL_bufend-V_pos_2-4,aux(6)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 36: [it(36)=<1,s(24)=< -V__1+V_pos_2']

###### Computing sum for it(32)=<1  in Loop 32 
   - Applying inductive sum strategy 
     - head Candidate: V_PL_bufend-V_pos_2-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -V_pos_2+V__1+1 
       - Loop 31 has a reset to  [0]
       - Loop 35 is collaborative
       - Loop 36 has a reset to  [1]
     - head Candidate: V_PL_bufend/2-V_pos_2/2-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_PL_bufend-V_pos_2-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -V_pos_2+V__1+1 
       - Loop 31 has undefined behavior 
     - tail Candidate: V_PL_bufend/2-V_pos_2/2-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(32)=<aux(18)+aux(17)+aux(19),it(31)+it(32)+it(35)+it(36)=<V_PL_bufend-V_pos_2-1,aux(19)=< -V_pos_2+V__1+1,it(31)+it(32)=<V_PL_bufend/2-V_pos_2/2-1,it(31)+it(32)+it(35)+it(36)=<V_PL_bufend-V_pos_2-V_PL_bufend'+V_pos_2',it(31)+it(32)=<V_PL_bufend/2-V_pos_2/2-V_PL_bufend'/2+V_pos_2'/2] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 31: [aux(17)=<0]
* Psum in Loop 32: [s(22)=<V_pos_2'-V__1',aux(8)=<V_PL_bufend-V_pos_2-4,aux(5)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 35: [it(35)=<1,aux(9)=<V_PL_bufend-V_pos_2-4,aux(6)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 36: [it(36)=<1,s(24)=< -V__1+V_pos_2',aux(18)=<1]

###### Computing sum for aux(17)=<0  in Loop 31 
 * Adding constraints: [aux(17)=<0] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 32: [s(22)=<V_pos_2'-V__1',aux(8)=<V_PL_bufend-V_pos_2-4,aux(5)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 35: [it(35)=<1,aux(9)=<V_PL_bufend-V_pos_2-4,aux(6)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 36: [it(36)=<1,s(24)=< -V__1+V_pos_2',aux(18)=<1]

###### Computing sum for s(22)=<V_pos_2'-V__1'  in Loop 32 
   - Applying inductive sum strategy 
     - head Candidate: V_PL_bufend-V_pos_2-2 
       - Loop 31 is collaborative
       - Loop 35 is collaborative
       - Loop 36 is collaborative
     - tail Candidate: V_PL_bufend-V_pos_2-2 
       - Loop 31 is collaborative
       - Loop 35 is collaborative and bounds [it(35)] 
       - Loop 36 is collaborative and bounds [it(36)] 
 * Adding constraints: [s(22)=<V_PL_bufend-V_pos_2-2,it(35)+it(36)+s(22)=<V_PL_bufend-V_pos_2-V_PL_bufend'+V_pos_2'] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 32: [aux(8)=<V_PL_bufend-V_pos_2-4,aux(5)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 35: [it(35)=<1,aux(9)=<V_PL_bufend-V_pos_2-4,aux(6)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 36: [it(36)=<1,s(24)=< -V__1+V_pos_2',aux(18)=<1]

###### Computing sum for aux(8)=<V_PL_bufend-V_pos_2-4  in Loop 32 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(20)=<V_PL_bufend-V_pos_2-4] 
 * Adding constraints: [aux(8)=<it(32)*aux(20)] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Pmax/min: [aux(20)=<V_PL_bufend-V_pos_2-4]
* Psum in Loop 32: [aux(5)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 35: [it(35)=<1,aux(9)=<V_PL_bufend-V_pos_2-4,aux(6)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 36: [it(36)=<1,s(24)=< -V__1+V_pos_2',aux(18)=<1]

###### Computing max_min for aux(20)=<V_PL_bufend-V_pos_2-4  
   - Found a solution using cacheing 
 * Adding constraints:[aux(20)=<aux(14)-2] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 32: [aux(5)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 35: [it(35)=<1,aux(9)=<V_PL_bufend-V_pos_2-4,aux(6)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 36: [it(36)=<1,s(24)=< -V__1+V_pos_2',aux(18)=<1]

###### Computing sum for aux(5)=<V_PL_bufend/2-V_pos_2/2-2  in Loop 32 
   - Found a solution using cacheing 
 * Adding constraints: [aux(5)=<aux(21)*(1/2),aux(21)=<it(32)*aux(20)] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 35: [it(35)=<1,aux(9)=<V_PL_bufend-V_pos_2-4,aux(6)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 36: [it(36)=<1,s(24)=< -V__1+V_pos_2',aux(18)=<1]

###### Computing sum for it(35)=<1  in Loop 35 
   - Applying inductive sum strategy 
     - head Candidate: V_PL_bufend-V_pos_2-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_PL_bufend-V_pos_2-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_PL_bufend-V_pos_2-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_PL_bufend-V_pos_2-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(31)+it(32)+it(35)+it(36)=<V_PL_bufend-V_pos_2-1,it(31)+it(32)+it(35)+it(36)=<V_PL_bufend-V_pos_2-1,it(31)+it(32)+it(35)+it(36)=<V_PL_bufend-V_pos_2-V_PL_bufend'+V_pos_2',it(31)+it(32)+it(35)+it(36)=<V_PL_bufend-V_pos_2-V_PL_bufend'+V_pos_2'] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 35: [aux(9)=<V_PL_bufend-V_pos_2-4,aux(6)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 36: [it(36)=<1,s(24)=< -V__1+V_pos_2',aux(18)=<1]

###### Computing sum for aux(9)=<V_PL_bufend-V_pos_2-4  in Loop 35 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(22)=<V_PL_bufend-V_pos_2-4] 
 * Adding constraints: [aux(9)=<it(35)*aux(22)] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Pmax/min: [aux(22)=<V_PL_bufend-V_pos_2-4]
* Psum in Loop 35: [aux(6)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 36: [it(36)=<1,s(24)=< -V__1+V_pos_2',aux(18)=<1]

###### Computing max_min for aux(22)=<V_PL_bufend-V_pos_2-4  
   - Found a solution using cacheing 
 * Adding constraints:[aux(22)=<aux(14)-2] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 35: [aux(6)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 36: [it(36)=<1,s(24)=< -V__1+V_pos_2',aux(18)=<1]

###### Computing sum for aux(6)=<V_PL_bufend/2-V_pos_2/2-2  in Loop 35 
   - Found a solution using cacheing 
 * Adding constraints: [aux(6)=<aux(23)*(1/2),aux(23)=<it(35)*aux(22)] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 36: [it(36)=<1,s(24)=< -V__1+V_pos_2',aux(18)=<1]

###### Computing sum for it(36)=<1  in Loop 36 
   - Applying inductive sum strategy 
     - head Candidate: V_PL_bufend-V_pos_2-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_PL_bufend-V_pos_2-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_pos_2-V__1 
       - Loop 31 has a reset to  [V_PL_bufend-V_pos_2-2]
       - Loop 32 has a reset to  [V_PL_bufend-V_pos_2-2]
       - Loop 35 has a reset to  [0]
     - head Candidate: V_PL_bufend/2-V__1/2-1 
       - Loop 31 is collaborative
       - Loop 32 has a reset to  [V_PL_bufend/2-V_pos_2/2-3/2]
       - Loop 35 has a reset to  [V_PL_bufend/2-V_pos_2/2-3/2]
     - tail Candidate: V_PL_bufend-V_pos_2-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_PL_bufend-V_pos_2-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_pos_2-V__1 
       - Loop 31 has undefined behavior 
     - tail Candidate: V_PL_bufend/2-V__1/2-1 
       - Loop 31 is collaborative
       - Loop 32 has undefined behavior 
 * Adding constraints: [it(36)=<aux(26)+aux(25)+aux(24)+aux(27),it(36)=<aux(29)+aux(28)+aux(30),it(31)+it(32)+it(35)+it(36)=<V_PL_bufend-V_pos_2-1,it(31)+it(32)+it(35)+it(36)=<V_PL_bufend-V_pos_2-1,aux(27)=<V_pos_2-V__1,aux(30)=<V_PL_bufend/2-V__1/2-1,it(31)+it(32)+it(35)+it(36)=<V_PL_bufend-V_pos_2-V_PL_bufend'+V_pos_2',it(31)+it(32)+it(35)+it(36)=<V_PL_bufend-V_pos_2-V_PL_bufend'+V_pos_2'] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 31: [aux(24)=<V_PL_bufend-V_pos_2-2]
* Psum in Loop 32: [aux(25)=<V_PL_bufend-V_pos_2-2,aux(28)=<V_PL_bufend/2-V_pos_2/2-3/2]
* Psum in Loop 35: [aux(26)=<0,aux(29)=<V_PL_bufend/2-V_pos_2/2-3/2]
* Psum in Loop 36: [s(24)=< -V__1+V_pos_2',aux(18)=<1]

###### Computing sum for aux(24)=<V_PL_bufend-V_pos_2-2  in Loop 31 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(31)=<V_PL_bufend-V_pos_2-2] 
 * Adding constraints: [aux(24)=<it(31)*aux(31)] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Pmax/min: [aux(31)=<V_PL_bufend-V_pos_2-2]
* Psum in Loop 32: [aux(25)=<V_PL_bufend-V_pos_2-2,aux(28)=<V_PL_bufend/2-V_pos_2/2-3/2]
* Psum in Loop 35: [aux(26)=<0,aux(29)=<V_PL_bufend/2-V_pos_2/2-3/2]
* Psum in Loop 36: [s(24)=< -V__1+V_pos_2',aux(18)=<1]

###### Computing max_min for aux(31)=<V_PL_bufend-V_pos_2-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(31)=<aux(14)] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 32: [aux(25)=<V_PL_bufend-V_pos_2-2,aux(28)=<V_PL_bufend/2-V_pos_2/2-3/2]
* Psum in Loop 35: [aux(26)=<0,aux(29)=<V_PL_bufend/2-V_pos_2/2-3/2]
* Psum in Loop 36: [s(24)=< -V__1+V_pos_2',aux(18)=<1]

###### Computing sum for aux(25)=<V_PL_bufend-V_pos_2-2  in Loop 32 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(32)=<V_PL_bufend-V_pos_2-2] 
 * Adding constraints: [aux(25)=<it(32)*aux(32)] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Pmax/min: [aux(32)=<V_PL_bufend-V_pos_2-2]
* Psum in Loop 32: [aux(28)=<V_PL_bufend/2-V_pos_2/2-3/2]
* Psum in Loop 35: [aux(26)=<0,aux(29)=<V_PL_bufend/2-V_pos_2/2-3/2]
* Psum in Loop 36: [s(24)=< -V__1+V_pos_2',aux(18)=<1]

###### Computing max_min for aux(32)=<V_PL_bufend-V_pos_2-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(32)=<aux(14)] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 32: [aux(28)=<V_PL_bufend/2-V_pos_2/2-3/2]
* Psum in Loop 35: [aux(26)=<0,aux(29)=<V_PL_bufend/2-V_pos_2/2-3/2]
* Psum in Loop 36: [s(24)=< -V__1+V_pos_2',aux(18)=<1]

###### Computing sum for aux(28)=<V_PL_bufend/2-V_pos_2/2-3/2  in Loop 32 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(33)=<V_PL_bufend/2-V_pos_2/2-3/2] 
 * Adding constraints: [aux(28)=<it(32)*aux(33)] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Pmax/min: [aux(33)=<V_PL_bufend/2-V_pos_2/2-3/2]
* Psum in Loop 35: [aux(26)=<0,aux(29)=<V_PL_bufend/2-V_pos_2/2-3/2]
* Psum in Loop 36: [s(24)=< -V__1+V_pos_2',aux(18)=<1]

###### Computing max_min for aux(33)=<V_PL_bufend/2-V_pos_2/2-3/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(33)=<aux(14)*(1/2)-1/2] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 35: [aux(26)=<0,aux(29)=<V_PL_bufend/2-V_pos_2/2-3/2]
* Psum in Loop 36: [s(24)=< -V__1+V_pos_2',aux(18)=<1]

###### Computing sum for aux(26)=<0  in Loop 35 
 * Adding constraints: [aux(26)=<0] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 35: [aux(29)=<V_PL_bufend/2-V_pos_2/2-3/2]
* Psum in Loop 36: [s(24)=< -V__1+V_pos_2',aux(18)=<1]

###### Computing sum for aux(29)=<V_PL_bufend/2-V_pos_2/2-3/2  in Loop 35 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(34)=<V_PL_bufend/2-V_pos_2/2-3/2] 
 * Adding constraints: [aux(29)=<it(35)*aux(34)] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Pmax/min: [aux(34)=<V_PL_bufend/2-V_pos_2/2-3/2]
* Psum in Loop 36: [s(24)=< -V__1+V_pos_2',aux(18)=<1]

###### Computing max_min for aux(34)=<V_PL_bufend/2-V_pos_2/2-3/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(34)=<aux(14)*(1/2)-1/2] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 36: [s(24)=< -V__1+V_pos_2',aux(18)=<1]

###### Computing sum for s(24)=< -V__1+V_pos_2'  in Loop 36 
   - Applying inductive sum strategy 
     - head Candidate: 2*V_pos_2-2*V__1 
       - Loop 31 has a reset to  [2*V_PL_bufend-2*V_pos_2-4]
       - Loop 32 has a reset to  [2*V_PL_bufend-2*V_pos_2-4]
       - Loop 35 has a reset to  [0]
     - head Candidate: V_PL_bufend-V__1-1 
       - Loop 31 is collaborative
       - Loop 32 has a reset to  [V_PL_bufend-V_pos_2-2]
       - Loop 35 has a reset to  [V_PL_bufend-V_pos_2-2]
     - tail Candidate: 2*V_pos_2-2*V__1 
       - Loop 31 has undefined behavior 
     - tail Candidate: V_PL_bufend-V__1-1 
       - Loop 31 is collaborative
       - Loop 32 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(42)=<V_PL_bufend-V__1-1,aux(42)=<V_pos_2-V__1+1] 
 * Adding constraints: [s(24)=<it(36)*aux(42),s(24)=<aux(37)+aux(36)+aux(35)+aux(38),s(24)=<aux(40)+aux(39)+aux(41),aux(38)=<2*V_pos_2-2*V__1,aux(41)=<V_PL_bufend-V__1-1] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Pmax/min: [aux(42)=<V_PL_bufend-V__1-1,aux(42)=<V_pos_2-V__1+1]
* Psum in Loop 31: [aux(35)=<2*V_PL_bufend-2*V_pos_2-4]
* Psum in Loop 32: [aux(39)=<V_PL_bufend-V_pos_2-2,aux(36)=<2*V_PL_bufend-2*V_pos_2-4]
* Psum in Loop 35: [aux(37)=<0,aux(40)=<V_PL_bufend-V_pos_2-2]
* Psum in Loop 36: [aux(18)=<1]

###### Computing max_min for aux(42)=<V_PL_bufend-V__1-1  
   - Applying max/min strategy 
     - Loop 31 does not increase the expression
     - Loop 32  resets the expression to [V_PL_bufend-V_pos_2-2] 
     - Loop 35  resets the expression to [V_PL_bufend-V_pos_2-2] 
     - Loop 36 does not increase the expression
 * Adding constraints:[aux(42)=<max([aux(43),aux(44),aux(45)]),aux(43)=<V_PL_bufend-V__1-1] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Pmax/min: [aux(42)=<V_pos_2-V__1+1,aux(44)=<V_PL_bufend-V_pos_2-2,aux(45)=<V_PL_bufend-V_pos_2-2]
* Psum in Loop 31: [aux(35)=<2*V_PL_bufend-2*V_pos_2-4]
* Psum in Loop 32: [aux(39)=<V_PL_bufend-V_pos_2-2,aux(36)=<2*V_PL_bufend-2*V_pos_2-4]
* Psum in Loop 35: [aux(37)=<0,aux(40)=<V_PL_bufend-V_pos_2-2]
* Psum in Loop 36: [aux(18)=<1]

###### Computing max_min for aux(42)=<V_pos_2-V__1+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(42)=<aux(11)+1] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Pmax/min: [aux(44)=<V_PL_bufend-V_pos_2-2,aux(45)=<V_PL_bufend-V_pos_2-2]
* Psum in Loop 31: [aux(35)=<2*V_PL_bufend-2*V_pos_2-4]
* Psum in Loop 32: [aux(39)=<V_PL_bufend-V_pos_2-2,aux(36)=<2*V_PL_bufend-2*V_pos_2-4]
* Psum in Loop 35: [aux(37)=<0,aux(40)=<V_PL_bufend-V_pos_2-2]
* Psum in Loop 36: [aux(18)=<1]

###### Computing max_min for aux(44)=<V_PL_bufend-V_pos_2-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(44)=<aux(14)] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Pmax/min: [aux(45)=<V_PL_bufend-V_pos_2-2]
* Psum in Loop 31: [aux(35)=<2*V_PL_bufend-2*V_pos_2-4]
* Psum in Loop 32: [aux(39)=<V_PL_bufend-V_pos_2-2,aux(36)=<2*V_PL_bufend-2*V_pos_2-4]
* Psum in Loop 35: [aux(37)=<0,aux(40)=<V_PL_bufend-V_pos_2-2]
* Psum in Loop 36: [aux(18)=<1]

###### Computing max_min for aux(45)=<V_PL_bufend-V_pos_2-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(45)=<aux(14)] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 31: [aux(35)=<2*V_PL_bufend-2*V_pos_2-4]
* Psum in Loop 32: [aux(39)=<V_PL_bufend-V_pos_2-2,aux(36)=<2*V_PL_bufend-2*V_pos_2-4]
* Psum in Loop 35: [aux(37)=<0,aux(40)=<V_PL_bufend-V_pos_2-2]
* Psum in Loop 36: [aux(18)=<1]

###### Computing sum for aux(35)=<2*V_PL_bufend-2*V_pos_2-4  in Loop 31 
   - Found a solution using cacheing 
 * Adding constraints: [aux(35)=<aux(46)*2,aux(46)=<it(31)*aux(31)] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 32: [aux(39)=<V_PL_bufend-V_pos_2-2,aux(36)=<2*V_PL_bufend-2*V_pos_2-4]
* Psum in Loop 35: [aux(37)=<0,aux(40)=<V_PL_bufend-V_pos_2-2]
* Psum in Loop 36: [aux(18)=<1]

###### Computing sum for aux(39)=<V_PL_bufend-V_pos_2-2  in Loop 32 
   - Found a solution using cacheing 
 * Adding constraints: [aux(39)=<aux(47),aux(47)=<it(32)*aux(32)] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 32: [aux(36)=<2*V_PL_bufend-2*V_pos_2-4]
* Psum in Loop 35: [aux(37)=<0,aux(40)=<V_PL_bufend-V_pos_2-2]
* Psum in Loop 36: [aux(18)=<1]

###### Computing sum for aux(36)=<2*V_PL_bufend-2*V_pos_2-4  in Loop 32 
   - Found a solution using cacheing 
 * Adding constraints: [aux(36)=<aux(48)*2,aux(48)=<it(32)*aux(32)] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 35: [aux(37)=<0,aux(40)=<V_PL_bufend-V_pos_2-2]
* Psum in Loop 36: [aux(18)=<1]

###### Computing sum for aux(37)=<0  in Loop 35 
 * Adding constraints: [aux(37)=<0] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 35: [aux(40)=<V_PL_bufend-V_pos_2-2]
* Psum in Loop 36: [aux(18)=<1]

###### Computing sum for aux(40)=<V_PL_bufend-V_pos_2-2  in Loop 35 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(49)=<V_PL_bufend-V_pos_2-2] 
 * Adding constraints: [aux(40)=<it(35)*aux(49)] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Pmax/min: [aux(49)=<V_PL_bufend-V_pos_2-2]
* Psum in Loop 36: [aux(18)=<1]

###### Computing max_min for aux(49)=<V_PL_bufend-V_pos_2-2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(49)=<aux(14)] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 36: [aux(18)=<1]

###### Computing sum for aux(18)=<1  in Loop 36 
   - Found a solution using cacheing 
 * Adding constraints: [aux(18)=<aux(50),aux(50)=<aux(26)+aux(25)+aux(24)+aux(27),aux(50)=<aux(29)+aux(28)+aux(30),aux(50)+it(31)+it(32)+it(35)=<V_PL_bufend-V_pos_2-1,aux(50)+it(31)+it(32)+it(35)=<V_PL_bufend-V_pos_2-1,aux(50)+it(31)+it(32)+it(35)=<V_PL_bufend-V_pos_2-V_PL_bufend'+V_pos_2',aux(50)+it(31)+it(32)+it(35)=<V_PL_bufend-V_pos_2-V_PL_bufend'+V_pos_2'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [31,32,35,36] 
Found a cycle in the non-final constraints
 Removed possibly redundant constraints to solve a cycle in the cost structure 
it(31)=<aux(6)+aux(5)+aux(7)
aux(13)=<it(31)*aux(16)
it(32)=<aux(18)+aux(17)+aux(19)
it(36)=<aux(26)+aux(25)+aux(24)+aux(27)
it(36)=<aux(29)+aux(28)+aux(30)
aux(50)=<aux(26)+aux(25)+aux(24)+aux(27)
aux(50)=<aux(29)+aux(28)+aux(30)

#### Simplifying cost structure of phase [31,32,35,36] 
 * Joined equivalent variables [aux(47),aux(39)] into aux(47)
 * Joined equivalent variables [aux(50),aux(18)] into aux(50)
 * Joined equivalent variables [aux(51),aux(15),aux(17),aux(26),aux(37)] into aux(51)
 * Joined equivalent variables [aux(52),aux(14)] into aux(52)
 * Joined equivalent variables [aux(54),aux(10),aux(41),aux(43)] into aux(54)
 * Joined equivalent variables [aux(57),aux(7),aux(30)] into aux(57)
 * Joined equivalent variables [aux(58),aux(12),aux(27)] into aux(58)
 * Joined equivalent variables [aux(31),aux(32),aux(44),aux(45),aux(49)] into aux(31)
 * Joined equivalent variables [aux(33),aux(34)] into aux(33)
 * Joined equivalent variables [aux(20),aux(22)] into aux(20)
 * Joined equivalent variables [aux(9),aux(23)] into aux(9)
 * Joined equivalent variables [aux(25),aux(47),aux(48)] into aux(25)
 * Joined equivalent variables [aux(24),aux(46)] into aux(24)
 * Joined equivalent variables [aux(8),aux(21)] into aux(8)
 * Joined equivalent variables [it(35),it(36)] into it(35)
 * Joined equivalent variables [it(31),it(32)] into it(31)
 * Joined equivalent variables [aux(13),aux(50),s(20),s(22)] into aux(13)
 * Joined equivalent variables [aux(24),aux(25)] into aux(24)
 * Joined equivalent variables [s(18),s(21)] into s(18)
 * Joined equivalent variables [aux(35),aux(36)] into aux(35)

#### Cost of phase [31,32,35,36]:eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) -> [eval_Perl_scan_vstring__critedge2_in(V_PL_bufend',V_pos_2',V__1',B')] 
6*it(31)+6*it(35)+2*s(17)+4*s(18)+2*s(23)+0
  Such that:aux(38) =< 2*V_pos_2-2*V__1
aux(52) =< V_PL_bufend-V_pos_2
aux(53) =< V_PL_bufend-V_pos_2-V_PL_bufend'+V_pos_2'
aux(54) =< V_PL_bufend-V__1
aux(55) =< V_PL_bufend/2-V_pos_2/2
aux(56) =< V_PL_bufend/2-V_pos_2/2-V_PL_bufend'/2+V_pos_2'/2
aux(58) =< V_pos_2-V__1
aux(13) =< aux(52)
it(31) =< aux(52)
it(35) =< aux(52)
aux(13) =< aux(53)
it(31) =< aux(53)
it(35) =< aux(53)
it(31) =< aux(55)
it(31) =< aux(56)
aux(31) =< aux(52)
aux(20) =< aux(52)-2
aux(42) =< max([aux(54),aux(31),aux(31)])
aux(40) =< it(35)*aux(31)
aux(9) =< it(35)*aux(20)
aux(11) =< max([aux(58),aux(52),0])+aux(13)
aux(24) =< it(31)*aux(31)
aux(8) =< it(31)*aux(20)
aux(42) =< aux(11)+1
aux(35) =< aux(24)*2
s(19) =< aux(9)+aux(8)+aux(54)
s(19) =< it(31)*aux(11)
s(24) =< aux(40)+aux(24)+aux(54)
s(24) =< aux(35)+aux(35)+aux(38)
s(24) =< it(35)*aux(42)
s(23) =< s(24)
s(18) =< aux(13)
s(17) =< s(19)

#### Simplifying cost structure of chain [[31,32,35,36],40] 
 * Joined equivalent variables [aux(59),aux(52),aux(53)] into aux(59)
 * Joined equivalent variables [aux(60),aux(55),aux(56)] into aux(60)
 * Joined equivalent variables [aux(59),aux(13)] into aux(59)
 * Joined equivalent variables [it(35),s(18)] into it(35)
 * Renamed intermediate variables: 
[(eq(36,1),it(26))>>s(25)]

#### Simplifying cost structure of CE 36 

#### Found solution for phase  [31,32,35,36] in the cache 

#### Cost of phase [31,32,35,36]:eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) -> [eval_Perl_scan_vstring__critedge2_in(V_PL_bufend',V_pos_2',V__1',B')] 
6*it(31)+6*it(35)+2*s(17)+4*s(18)+2*s(23)+0
  Such that:aux(38) =< 2*V_pos_2-2*V__1
aux(52) =< V_PL_bufend-V_pos_2
aux(53) =< V_PL_bufend-V_pos_2-V_PL_bufend'+V_pos_2'
aux(54) =< V_PL_bufend-V__1
aux(55) =< V_PL_bufend/2-V_pos_2/2
aux(56) =< V_PL_bufend/2-V_pos_2/2-V_PL_bufend'/2+V_pos_2'/2
aux(58) =< V_pos_2-V__1
aux(13) =< aux(52)
it(31) =< aux(52)
it(35) =< aux(52)
aux(13) =< aux(53)
it(31) =< aux(53)
it(35) =< aux(53)
it(31) =< aux(55)
it(31) =< aux(56)
aux(31) =< aux(52)
aux(20) =< aux(52)-2
aux(42) =< max([aux(54),aux(31),aux(31)])
aux(40) =< it(35)*aux(31)
aux(9) =< it(35)*aux(20)
aux(11) =< max([aux(58),aux(52),0])+aux(13)
aux(24) =< it(31)*aux(31)
aux(8) =< it(31)*aux(20)
aux(42) =< aux(11)+1
aux(35) =< aux(24)*2
s(19) =< aux(9)+aux(8)+aux(54)
s(19) =< it(31)*aux(11)
s(24) =< aux(40)+aux(24)+aux(54)
s(24) =< aux(35)+aux(35)+aux(38)
s(24) =< it(35)*aux(42)
s(23) =< s(24)
s(18) =< aux(13)
s(17) =< s(19)

#### Simplifying cost structure of chain [[31,32,35,36],39] 
 * Joined equivalent variables [aux(61),aux(52),aux(53)] into aux(61)
 * Joined equivalent variables [aux(62),aux(55),aux(56)] into aux(62)
 * Joined equivalent variables [aux(61),aux(13)] into aux(61)
 * Joined equivalent variables [it(35),s(25)] into it(35)
 * Joined equivalent variables [it(35),s(18)] into it(35)

#### Simplifying cost structure of CE 33 

#### Found solution for phase  [31,32,35,36] in the cache 

#### Cost of phase [31,32,35,36]:eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) -> [eval_Perl_scan_vstring__critedge2_in(V_PL_bufend',V_pos_2',V__1',B')] 
6*it(31)+6*it(35)+2*s(17)+4*s(18)+2*s(23)+0
  Such that:aux(38) =< 2*V_pos_2-2*V__1
aux(52) =< V_PL_bufend-V_pos_2
aux(53) =< V_PL_bufend-V_pos_2-V_PL_bufend'+V_pos_2'
aux(54) =< V_PL_bufend-V__1
aux(55) =< V_PL_bufend/2-V_pos_2/2
aux(56) =< V_PL_bufend/2-V_pos_2/2-V_PL_bufend'/2+V_pos_2'/2
aux(58) =< V_pos_2-V__1
aux(13) =< aux(52)
it(31) =< aux(52)
it(35) =< aux(52)
aux(13) =< aux(53)
it(31) =< aux(53)
it(35) =< aux(53)
it(31) =< aux(55)
it(31) =< aux(56)
aux(31) =< aux(52)
aux(20) =< aux(52)-2
aux(42) =< max([aux(54),aux(31),aux(31)])
aux(40) =< it(35)*aux(31)
aux(9) =< it(35)*aux(20)
aux(11) =< max([aux(58),aux(52),0])+aux(13)
aux(24) =< it(31)*aux(31)
aux(8) =< it(31)*aux(20)
aux(42) =< aux(11)+1
aux(35) =< aux(24)*2
s(19) =< aux(9)+aux(8)+aux(54)
s(19) =< it(31)*aux(11)
s(24) =< aux(40)+aux(24)+aux(54)
s(24) =< aux(35)+aux(35)+aux(38)
s(24) =< it(35)*aux(42)
s(23) =< s(24)
s(18) =< aux(13)
s(17) =< s(19)

#### Simplifying cost structure of chain [[31,32,35,36],38] 
 * Joined equivalent variables [aux(63),aux(52),aux(53)] into aux(63)
 * Joined equivalent variables [aux(64),aux(55),aux(56)] into aux(64)
 * Joined equivalent variables [aux(63),aux(13)] into aux(63)
 * Joined equivalent variables [it(35),s(18)] into it(35)
 * Renamed intermediate variables: 
[(eq(34,1),it(26))>>s(26)]

#### Simplifying cost structure of CE 34 

#### Found solution for phase  [31,32,35,36] in the cache 

#### Cost of phase [31,32,35,36]:eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) -> [eval_Perl_scan_vstring__critedge2_in(V_PL_bufend',V_pos_2',V__1',B')] 
6*it(31)+6*it(35)+2*s(17)+4*s(18)+2*s(23)+0
  Such that:aux(38) =< 2*V_pos_2-2*V__1
aux(52) =< V_PL_bufend-V_pos_2
aux(53) =< V_PL_bufend-V_pos_2-V_PL_bufend'+V_pos_2'
aux(54) =< V_PL_bufend-V__1
aux(55) =< V_PL_bufend/2-V_pos_2/2
aux(56) =< V_PL_bufend/2-V_pos_2/2-V_PL_bufend'/2+V_pos_2'/2
aux(58) =< V_pos_2-V__1
aux(13) =< aux(52)
it(31) =< aux(52)
it(35) =< aux(52)
aux(13) =< aux(53)
it(31) =< aux(53)
it(35) =< aux(53)
it(31) =< aux(55)
it(31) =< aux(56)
aux(31) =< aux(52)
aux(20) =< aux(52)-2
aux(42) =< max([aux(54),aux(31),aux(31)])
aux(40) =< it(35)*aux(31)
aux(9) =< it(35)*aux(20)
aux(11) =< max([aux(58),aux(52),0])+aux(13)
aux(24) =< it(31)*aux(31)
aux(8) =< it(31)*aux(20)
aux(42) =< aux(11)+1
aux(35) =< aux(24)*2
s(19) =< aux(9)+aux(8)+aux(54)
s(19) =< it(31)*aux(11)
s(24) =< aux(40)+aux(24)+aux(54)
s(24) =< aux(35)+aux(35)+aux(38)
s(24) =< it(35)*aux(42)
s(23) =< s(24)
s(18) =< aux(13)
s(17) =< s(19)

#### Simplifying cost structure of chain [[31,32,35,36],37] 
 * Joined equivalent variables [aux(65),aux(52),aux(53)] into aux(65)
 * Joined equivalent variables [aux(66),aux(55),aux(56)] into aux(66)
 * Joined equivalent variables [aux(65),aux(13)] into aux(65)
 * Joined equivalent variables [it(35),s(26)] into it(35)
 * Joined equivalent variables [it(35),s(18)] into it(35)
 * Renamed intermediate variables: 
[(eq(37,2),it(28))>>s(27)]

#### Simplifying cost structure of CE 37 
 * Renamed intermediate variables: 
[(eq(43,2),it(28))>>s(28)]

#### Simplifying cost structure of CE 43 
 * Joined equivalent variables [s(27),s(28)] into s(27)

#### Simplifying cost structure of chain [34,39] 
 * Joined equivalent variables [aux(68),aux(67)] into aux(68)
 * Joined equivalent variables [s(25),s(27)] into s(25)

#### Found solution for phase  [31,32,35,36] in the cache 

#### Cost of phase [31,32,35,36]:eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) -> [eval_Perl_scan_vstring__critedge2_in(V_PL_bufend',V_pos_2',V__1',B')] 
6*it(31)+6*it(35)+2*s(17)+4*s(18)+2*s(23)+0
  Such that:aux(38) =< 2*V_pos_2-2*V__1
aux(52) =< V_PL_bufend-V_pos_2
aux(53) =< V_PL_bufend-V_pos_2-V_PL_bufend'+V_pos_2'
aux(54) =< V_PL_bufend-V__1
aux(55) =< V_PL_bufend/2-V_pos_2/2
aux(56) =< V_PL_bufend/2-V_pos_2/2-V_PL_bufend'/2+V_pos_2'/2
aux(58) =< V_pos_2-V__1
aux(13) =< aux(52)
it(31) =< aux(52)
it(35) =< aux(52)
aux(13) =< aux(53)
it(31) =< aux(53)
it(35) =< aux(53)
it(31) =< aux(55)
it(31) =< aux(56)
aux(31) =< aux(52)
aux(20) =< aux(52)-2
aux(42) =< max([aux(54),aux(31),aux(31)])
aux(40) =< it(35)*aux(31)
aux(9) =< it(35)*aux(20)
aux(11) =< max([aux(58),aux(52),0])+aux(13)
aux(24) =< it(31)*aux(31)
aux(8) =< it(31)*aux(20)
aux(42) =< aux(11)+1
aux(35) =< aux(24)*2
s(19) =< aux(9)+aux(8)+aux(54)
s(19) =< it(31)*aux(11)
s(24) =< aux(40)+aux(24)+aux(54)
s(24) =< aux(35)+aux(35)+aux(38)
s(24) =< it(35)*aux(42)
s(23) =< s(24)
s(18) =< aux(13)
s(17) =< s(19)

#### Simplifying cost structure of chain [[31,32,35,36],34,39] 
 * Joined equivalent variables [aux(69),aux(52),aux(53),aux(68)] into aux(69)
 * Joined equivalent variables [aux(70),aux(55)] into aux(70)
 * Joined equivalent variables [aux(69),aux(13)] into aux(69)
 * Joined equivalent variables [it(35),s(25)] into it(35)
 * Joined equivalent variables [it(35),s(18)] into it(35)
 * Renamed intermediate variables: 
[(eq(40,1),it(26))>>s(29)]
 * Renamed intermediate variables: 
[(eq(40,2),it(28))>>s(30)]

#### Simplifying cost structure of CE 40 
 * Renamed intermediate variables: 
[(eq(46,1),it(26))>>s(31)]
 * Renamed intermediate variables: 
[(eq(46,2),it(28))>>s(32)]

#### Simplifying cost structure of CE 46 
 * Joined equivalent variables [s(30),s(32)] into s(30)
 * Joined equivalent variables [s(29),s(31)] into s(29)

#### Simplifying cost structure of chain [33,39] 
 * Joined equivalent variables [aux(73),aux(71)] into aux(73)
 * Joined equivalent variables [s(25),s(30)] into s(25)

#### Found solution for phase  [31,32,35,36] in the cache 

#### Cost of phase [31,32,35,36]:eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) -> [eval_Perl_scan_vstring__critedge2_in(V_PL_bufend',V_pos_2',V__1',B')] 
6*it(31)+6*it(35)+2*s(17)+4*s(18)+2*s(23)+0
  Such that:aux(38) =< 2*V_pos_2-2*V__1
aux(52) =< V_PL_bufend-V_pos_2
aux(53) =< V_PL_bufend-V_pos_2-V_PL_bufend'+V_pos_2'
aux(54) =< V_PL_bufend-V__1
aux(55) =< V_PL_bufend/2-V_pos_2/2
aux(56) =< V_PL_bufend/2-V_pos_2/2-V_PL_bufend'/2+V_pos_2'/2
aux(58) =< V_pos_2-V__1
aux(13) =< aux(52)
it(31) =< aux(52)
it(35) =< aux(52)
aux(13) =< aux(53)
it(31) =< aux(53)
it(35) =< aux(53)
it(31) =< aux(55)
it(31) =< aux(56)
aux(31) =< aux(52)
aux(20) =< aux(52)-2
aux(42) =< max([aux(54),aux(31),aux(31)])
aux(40) =< it(35)*aux(31)
aux(9) =< it(35)*aux(20)
aux(11) =< max([aux(58),aux(52),0])+aux(13)
aux(24) =< it(31)*aux(31)
aux(8) =< it(31)*aux(20)
aux(42) =< aux(11)+1
aux(35) =< aux(24)*2
s(19) =< aux(9)+aux(8)+aux(54)
s(19) =< it(31)*aux(11)
s(24) =< aux(40)+aux(24)+aux(54)
s(24) =< aux(35)+aux(35)+aux(38)
s(24) =< it(35)*aux(42)
s(23) =< s(24)
s(18) =< aux(13)
s(17) =< s(19)

#### Simplifying cost structure of chain [[31,32,35,36],33,39] 
 * Joined equivalent variables [aux(74),aux(52),aux(53),aux(72),aux(73)] into aux(74)
 * Joined equivalent variables [aux(75),aux(55)] into aux(75)
 * Joined equivalent variables [aux(74),aux(13)] into aux(74)
 * Joined equivalent variables [it(35),s(25),s(29)] into it(35)
 * Joined equivalent variables [it(35),s(18)] into it(35)
 * Renamed intermediate variables: 
[(ch([34,39]),aux(68))>>s(33),(ch([34,39]),s(25))>>s(34)]
 * Renamed intermediate variables: 
[(ch([33,39]),aux(72))>>s(35),(ch([33,39]),aux(73))>>s(36),(ch([33,39]),s(25))>>s(37),(ch([33,39]),s(29))>>s(38)]
 * Renamed intermediate variables: 
[(ch([37]),s(26))>>s(39)]
 * Renamed intermediate variables: 
[(ch([[31,32,35,36],34,39]),aux(54))>>s(40),(ch([[31,32,35,36],34,39]),aux(58))>>s(41),(ch([[31,32,35,36],34,39]),aux(38))>>s(42),(ch([[31,32,35,36],34,39]),aux(69))>>s(43),(ch([[31,32,35,36],34,39]),aux(70))>>s(44),(ch([[31,32,35,36],34,39]),aux(56))>>s(45),(ch([[31,32,35,36],34,39]),it(35))>>s(46),(ch([[31,32,35,36],34,39]),it(31))>>s(47),(ch([[31,32,35,36],34,39]),aux(31))>>s(48),(ch([[31,32,35,36],34,39]),aux(20))>>s(49),(ch([[31,32,35,36],34,39]),aux(42))>>s(50),(ch([[31,32,35,36],34,39]),aux(40))>>s(51),(ch([[31,32,35,36],34,39]),aux(9))>>s(52),(ch([[31,32,35,36],34,39]),aux(11))>>s(53),(ch([[31,32,35,36],34,39]),aux(24))>>s(54),(ch([[31,32,35,36],34,39]),aux(8))>>s(55),(ch([[31,32,35,36],34,39]),aux(35))>>s(56),(ch([[31,32,35,36],34,39]),s(19))>>s(57),(ch([[31,32,35,36],34,39]),s(24))>>s(58),(ch([[31,32,35,36],34,39]),s(23))>>s(59),(ch([[31,32,35,36],34,39]),s(17))>>s(60)]
 * Renamed intermediate variables: 
[(ch([[31,32,35,36],38]),aux(54))>>s(61),(ch([[31,32,35,36],38]),aux(58))>>s(62),(ch([[31,32,35,36],38]),aux(38))>>s(63),(ch([[31,32,35,36],38]),aux(63))>>s(64),(ch([[31,32,35,36],38]),aux(64))>>s(65),(ch([[31,32,35,36],38]),it(31))>>s(66),(ch([[31,32,35,36],38]),it(35))>>s(67),(ch([[31,32,35,36],38]),aux(31))>>s(68),(ch([[31,32,35,36],38]),aux(20))>>s(69),(ch([[31,32,35,36],38]),aux(42))>>s(70),(ch([[31,32,35,36],38]),aux(40))>>s(71),(ch([[31,32,35,36],38]),aux(9))>>s(72),(ch([[31,32,35,36],38]),aux(11))>>s(73),(ch([[31,32,35,36],38]),aux(24))>>s(74),(ch([[31,32,35,36],38]),aux(8))>>s(75),(ch([[31,32,35,36],38]),aux(35))>>s(76),(ch([[31,32,35,36],38]),s(19))>>s(77),(ch([[31,32,35,36],38]),s(24))>>s(78),(ch([[31,32,35,36],38]),s(23))>>s(79),(ch([[31,32,35,36],38]),s(17))>>s(80)]
 * Renamed intermediate variables: 
[(ch([[31,32,35,36],39]),aux(54))>>s(81),(ch([[31,32,35,36],39]),aux(58))>>s(82),(ch([[31,32,35,36],39]),aux(38))>>s(83),(ch([[31,32,35,36],39]),aux(61))>>s(84),(ch([[31,32,35,36],39]),aux(62))>>s(85),(ch([[31,32,35,36],39]),it(35))>>s(86),(ch([[31,32,35,36],39]),it(31))>>s(87),(ch([[31,32,35,36],39]),aux(31))>>s(88),(ch([[31,32,35,36],39]),aux(20))>>s(89),(ch([[31,32,35,36],39]),aux(42))>>s(90),(ch([[31,32,35,36],39]),aux(40))>>s(91),(ch([[31,32,35,36],39]),aux(9))>>s(92),(ch([[31,32,35,36],39]),aux(11))>>s(93),(ch([[31,32,35,36],39]),aux(24))>>s(94),(ch([[31,32,35,36],39]),aux(8))>>s(95),(ch([[31,32,35,36],39]),aux(35))>>s(96),(ch([[31,32,35,36],39]),s(19))>>s(97),(ch([[31,32,35,36],39]),s(24))>>s(98),(ch([[31,32,35,36],39]),s(23))>>s(99),(ch([[31,32,35,36],39]),s(17))>>s(100)]
 * Joined equivalent variables [aux(76),s(43),s(64),s(84)] into aux(76)
 * Joined equivalent variables [aux(77),s(40),s(61),s(81)] into aux(77)
 * Joined equivalent variables [aux(78),s(44),s(65),s(85)] into aux(78)
 * Joined equivalent variables [aux(79),s(41),s(62),s(82)] into aux(79)
 * Joined equivalent variables [aux(80),s(42),s(63),s(83)] into aux(80)
 * Joined equivalent variables [s(48),s(68),s(88)] into s(48)
 * Joined equivalent variables [s(49),s(69),s(89)] into s(49)
 * Joined equivalent variables [s(53),s(73),s(93)] into s(53)
 * Joined equivalent variables [s(46),s(67),s(86)] into s(46)
 * Joined equivalent variables [s(66),s(87)] into s(66)
 * Joined equivalent variables [s(51),s(71),s(91)] into s(51)
 * Joined equivalent variables [s(52),s(72),s(92)] into s(52)
 * Joined equivalent variables [s(50),s(70),s(90)] into s(50)
 * Joined equivalent variables [s(74),s(94)] into s(74)
 * Joined equivalent variables [s(75),s(95)] into s(75)
 * Joined equivalent variables [s(76),s(96)] into s(76)
 * Joined equivalent variables [s(77),s(97)] into s(77)
 * Joined equivalent variables [s(78),s(98)] into s(78)
 * Joined equivalent variables [s(80),s(100)] into s(80)
 * Joined equivalent variables [s(79),s(99)] into s(79)
 * Renamed intermediate variables: 
[(ch([[31,32,35,36],33,39]),aux(54))>>s(101),(ch([[31,32,35,36],33,39]),aux(58))>>s(102),(ch([[31,32,35,36],33,39]),aux(38))>>s(103),(ch([[31,32,35,36],33,39]),aux(74))>>s(104),(ch([[31,32,35,36],33,39]),aux(75))>>s(105),(ch([[31,32,35,36],33,39]),aux(56))>>s(106),(ch([[31,32,35,36],33,39]),it(35))>>s(107),(ch([[31,32,35,36],33,39]),it(31))>>s(108),(ch([[31,32,35,36],33,39]),aux(31))>>s(109),(ch([[31,32,35,36],33,39]),aux(20))>>s(110),(ch([[31,32,35,36],33,39]),aux(42))>>s(111),(ch([[31,32,35,36],33,39]),aux(40))>>s(112),(ch([[31,32,35,36],33,39]),aux(9))>>s(113),(ch([[31,32,35,36],33,39]),aux(11))>>s(114),(ch([[31,32,35,36],33,39]),aux(24))>>s(115),(ch([[31,32,35,36],33,39]),aux(8))>>s(116),(ch([[31,32,35,36],33,39]),aux(35))>>s(117),(ch([[31,32,35,36],33,39]),s(19))>>s(118),(ch([[31,32,35,36],33,39]),s(24))>>s(119),(ch([[31,32,35,36],33,39]),s(23))>>s(120),(ch([[31,32,35,36],33,39]),s(17))>>s(121)]
 * Renamed intermediate variables: 
[(ch([[31,32,35,36],37]),aux(54))>>s(122),(ch([[31,32,35,36],37]),aux(58))>>s(123),(ch([[31,32,35,36],37]),aux(38))>>s(124),(ch([[31,32,35,36],37]),aux(65))>>s(125),(ch([[31,32,35,36],37]),aux(66))>>s(126),(ch([[31,32,35,36],37]),it(35))>>s(127),(ch([[31,32,35,36],37]),it(31))>>s(128),(ch([[31,32,35,36],37]),aux(31))>>s(129),(ch([[31,32,35,36],37]),aux(20))>>s(130),(ch([[31,32,35,36],37]),aux(42))>>s(131),(ch([[31,32,35,36],37]),aux(40))>>s(132),(ch([[31,32,35,36],37]),aux(9))>>s(133),(ch([[31,32,35,36],37]),aux(11))>>s(134),(ch([[31,32,35,36],37]),aux(24))>>s(135),(ch([[31,32,35,36],37]),aux(8))>>s(136),(ch([[31,32,35,36],37]),aux(35))>>s(137),(ch([[31,32,35,36],37]),s(19))>>s(138),(ch([[31,32,35,36],37]),s(24))>>s(139),(ch([[31,32,35,36],37]),s(23))>>s(140),(ch([[31,32,35,36],37]),s(17))>>s(141)]
 * Joined equivalent variables [aux(81),s(104),s(125)] into aux(81)
 * Joined equivalent variables [aux(82),s(101),s(122)] into aux(82)
 * Joined equivalent variables [aux(83),s(105),s(126)] into aux(83)
 * Joined equivalent variables [aux(84),s(102),s(123)] into aux(84)
 * Joined equivalent variables [aux(85),s(103),s(124)] into aux(85)
 * Joined equivalent variables [s(109),s(129)] into s(109)
 * Joined equivalent variables [s(110),s(130)] into s(110)
 * Joined equivalent variables [s(114),s(134)] into s(114)
 * Joined equivalent variables [s(107),s(127)] into s(107)
 * Joined equivalent variables [s(112),s(132)] into s(112)
 * Joined equivalent variables [s(113),s(133)] into s(113)
 * Joined equivalent variables [s(111),s(131)] into s(111)

#### Cost of chains of eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B):
* Chain [[31,32,35,36],40]: 6*it(31)+10*it(35)+2*s(17)+2*s(23)+1
  Such that:aux(54) =< V_PL_bufend-V__1
aux(58) =< V_pos_2-V__1
aux(38) =< 2*V_pos_2-2*V__1
aux(59) =< V_PL_bufend-V_pos_2
aux(60) =< V_PL_bufend/2-V_pos_2/2
it(31) =< aux(59)
it(35) =< aux(59)
it(31) =< aux(60)
aux(31) =< aux(59)
aux(20) =< aux(59)-2
aux(42) =< max([aux(54),aux(31),aux(31)])
aux(40) =< it(35)*aux(31)
aux(9) =< it(35)*aux(20)
aux(11) =< max([aux(58),aux(59),0])+aux(59)
aux(24) =< it(31)*aux(31)
aux(8) =< it(31)*aux(20)
aux(42) =< aux(11)+1
aux(35) =< aux(24)*2
s(19) =< aux(9)+aux(8)+aux(54)
s(19) =< it(31)*aux(11)
s(24) =< aux(40)+aux(24)+aux(54)
s(24) =< aux(35)+aux(35)+aux(38)
s(24) =< it(35)*aux(42)
s(23) =< s(24)
s(17) =< s(19)

  with precondition: [B=5,V_PL_bufend>=V_pos_2+2] 

* Chain [[31,32,35,36],39]: 6*it(31)+11*it(35)+2*s(17)+2*s(23)+1
  Such that:aux(54) =< V_PL_bufend-V__1
aux(58) =< V_pos_2-V__1
aux(38) =< 2*V_pos_2-2*V__1
aux(61) =< V_PL_bufend-V_pos_2
aux(62) =< V_PL_bufend/2-V_pos_2/2
it(35) =< aux(61)
it(31) =< aux(61)
it(31) =< aux(62)
aux(31) =< aux(61)
aux(20) =< aux(61)-2
aux(42) =< max([aux(54),aux(31),aux(31)])
aux(40) =< it(35)*aux(31)
aux(9) =< it(35)*aux(20)
aux(11) =< max([aux(58),aux(61),0])+aux(61)
aux(24) =< it(31)*aux(31)
aux(8) =< it(31)*aux(20)
aux(42) =< aux(11)+1
aux(35) =< aux(24)*2
s(19) =< aux(9)+aux(8)+aux(54)
s(19) =< it(31)*aux(11)
s(24) =< aux(40)+aux(24)+aux(54)
s(24) =< aux(35)+aux(35)+aux(38)
s(24) =< it(35)*aux(42)
s(23) =< s(24)
s(17) =< s(19)

  with precondition: [B=5,V_PL_bufend>=V_pos_2+3] 

* Chain [[31,32,35,36],38]: 6*it(31)+10*it(35)+2*s(17)+2*s(23)+1
  Such that:aux(54) =< V_PL_bufend-V__1
aux(58) =< V_pos_2-V__1
aux(38) =< 2*V_pos_2-2*V__1
aux(63) =< V_PL_bufend-V_pos_2
aux(64) =< V_PL_bufend/2-V_pos_2/2
it(31) =< aux(63)
it(35) =< aux(63)
it(31) =< aux(64)
aux(31) =< aux(63)
aux(20) =< aux(63)-2
aux(42) =< max([aux(54),aux(31),aux(31)])
aux(40) =< it(35)*aux(31)
aux(9) =< it(35)*aux(20)
aux(11) =< max([aux(58),aux(63),0])+aux(63)
aux(24) =< it(31)*aux(31)
aux(8) =< it(31)*aux(20)
aux(42) =< aux(11)+1
aux(35) =< aux(24)*2
s(19) =< aux(9)+aux(8)+aux(54)
s(19) =< it(31)*aux(11)
s(24) =< aux(40)+aux(24)+aux(54)
s(24) =< aux(35)+aux(35)+aux(38)
s(24) =< it(35)*aux(42)
s(23) =< s(24)
s(17) =< s(19)

  with precondition: [B=5,V_PL_bufend>=V_pos_2+3] 

* Chain [[31,32,35,36],37]: 6*it(31)+11*it(35)+2*s(17)+2*s(23)+1
  Such that:aux(54) =< V_PL_bufend-V__1
aux(58) =< V_pos_2-V__1
aux(38) =< 2*V_pos_2-2*V__1
aux(65) =< V_PL_bufend-V_pos_2
aux(66) =< V_PL_bufend/2-V_pos_2/2
it(35) =< aux(65)
it(31) =< aux(65)
it(31) =< aux(66)
aux(31) =< aux(65)
aux(20) =< aux(65)-2
aux(42) =< max([aux(54),aux(31),aux(31)])
aux(40) =< it(35)*aux(31)
aux(9) =< it(35)*aux(20)
aux(11) =< max([aux(58),aux(65),0])+aux(65)
aux(24) =< it(31)*aux(31)
aux(8) =< it(31)*aux(20)
aux(42) =< aux(11)+1
aux(35) =< aux(24)*2
s(19) =< aux(9)+aux(8)+aux(54)
s(19) =< it(31)*aux(11)
s(24) =< aux(40)+aux(24)+aux(54)
s(24) =< aux(35)+aux(35)+aux(38)
s(24) =< it(35)*aux(42)
s(23) =< s(24)
s(17) =< s(19)

  with precondition: [B=5,V_PL_bufend>=V_pos_2+4] 

* Chain [[31,32,35,36],34,39]: 6*it(31)+13*it(35)+2*s(17)+2*s(23)+4
  Such that:aux(54) =< V_PL_bufend-V__1
aux(58) =< V_pos_2-V__1
aux(38) =< 2*V_pos_2-2*V__1
aux(69) =< V_PL_bufend-V_pos_2
aux(70) =< V_PL_bufend/2-V_pos_2/2
aux(56) =< aux(69)
aux(56) =< aux(70)
it(35) =< aux(69)
it(31) =< aux(69)
it(31) =< aux(70)
it(31) =< aux(56)
aux(31) =< aux(69)
aux(20) =< aux(69)-2
aux(42) =< max([aux(54),aux(31),aux(31)])
aux(40) =< it(35)*aux(31)
aux(9) =< it(35)*aux(20)
aux(11) =< max([aux(58),aux(69),0])+aux(69)
aux(24) =< it(31)*aux(31)
aux(8) =< it(31)*aux(20)
aux(42) =< aux(11)+1
aux(35) =< aux(24)*2
s(19) =< aux(9)+aux(8)+aux(54)
s(19) =< it(31)*aux(11)
s(24) =< aux(40)+aux(24)+aux(54)
s(24) =< aux(35)+aux(35)+aux(38)
s(24) =< it(35)*aux(42)
s(23) =< s(24)
s(17) =< s(19)

  with precondition: [B=5,V_PL_bufend>=V_pos_2+3] 

* Chain [[31,32,35,36],33,39]: 6*it(31)+15*it(35)+2*s(17)+2*s(23)+4
  Such that:aux(54) =< V_PL_bufend-V__1
aux(58) =< V_pos_2-V__1
aux(38) =< 2*V_pos_2-2*V__1
aux(74) =< V_PL_bufend-V_pos_2
aux(75) =< V_PL_bufend/2-V_pos_2/2
aux(56) =< aux(74)
aux(56) =< aux(75)
it(35) =< aux(74)
it(31) =< aux(74)
it(31) =< aux(75)
it(31) =< aux(56)
aux(31) =< aux(74)
aux(20) =< aux(74)-2
aux(42) =< max([aux(54),aux(31),aux(31)])
aux(40) =< it(35)*aux(31)
aux(9) =< it(35)*aux(20)
aux(11) =< max([aux(58),aux(74),0])+aux(74)
aux(24) =< it(31)*aux(31)
aux(8) =< it(31)*aux(20)
aux(42) =< aux(11)+1
aux(35) =< aux(24)*2
s(19) =< aux(9)+aux(8)+aux(54)
s(19) =< it(31)*aux(11)
s(24) =< aux(40)+aux(24)+aux(54)
s(24) =< aux(35)+aux(35)+aux(38)
s(24) =< it(35)*aux(42)
s(23) =< s(24)
s(17) =< s(19)

  with precondition: [B=5,V_PL_bufend>=V_pos_2+4] 

* Chain [40]: 1
  with precondition: [B=5,V_pos_2+1>=V_PL_bufend,V__1>=V_pos_2] 

* Chain [39]: 1*s(25)+1
  Such that:s(25) =< V_pos_2-V__1

  with precondition: [B=5,V_pos_2+1>=V_PL_bufend,V_pos_2>=V__1+1] 

* Chain [38]: 1
  with precondition: [B=5,V_PL_bufend>=V_pos_2+2,V__1>=V_pos_2] 

* Chain [37]: 1*s(26)+1
  Such that:s(26) =< V_pos_2-V__1

  with precondition: [B=5,V_PL_bufend>=V_pos_2+2,V_pos_2>=V__1+1] 

* Chain [34,39]: 3*s(25)+4
  Such that:aux(68) =< V_PL_bufend-V_pos_2
s(25) =< aux(68)

  with precondition: [B=5,V_PL_bufend>=V_pos_2+2,V__1>=V_pos_2] 

* Chain [33,39]: 3*s(25)+2*s(29)+4
  Such that:aux(72) =< V_pos_2-V__1+1
aux(73) =< V_PL_bufend-V_pos_2
s(25) =< aux(73)
s(29) =< aux(72)

  with precondition: [B=5,V_PL_bufend>=V_pos_2+2,V_pos_2>=V__1+1] 


#### Simplifying cost structure of CE 49 
 * Renamed intermediate variables: 
[(eq(50,1),s(25))>>s(142)]

#### Simplifying cost structure of CE 50 
 * Renamed intermediate variables: 
[(eq(51,1),aux(54))>>s(143),(eq(51,1),aux(58))>>s(144),(eq(51,1),aux(38))>>s(145),(eq(51,1),aux(59))>>s(146),(eq(51,1),aux(60))>>s(147),(eq(51,1),it(31))>>s(148),(eq(51,1),it(35))>>s(149),(eq(51,1),aux(31))>>s(150),(eq(51,1),aux(20))>>s(151),(eq(51,1),aux(42))>>s(152),(eq(51,1),aux(40))>>s(153),(eq(51,1),aux(9))>>s(154),(eq(51,1),aux(11))>>s(155),(eq(51,1),aux(24))>>s(156),(eq(51,1),aux(8))>>s(157),(eq(51,1),aux(35))>>s(158),(eq(51,1),s(19))>>s(159),(eq(51,1),s(24))>>s(160),(eq(51,1),s(23))>>s(161),(eq(51,1),s(17))>>s(162)]

#### Simplifying cost structure of CE 51 
 * Joined equivalent variables [aux(86),s(143)] into aux(86)
 * Renamed intermediate variables: 
[(eq(52,1),s(33))>>s(163),(eq(52,1),s(34))>>s(164)]

#### Simplifying cost structure of CE 52 
 * Renamed intermediate variables: 
[(eq(53,1),s(36))>>s(165),(eq(53,1),s(39))>>s(166),(eq(53,1),s(35))>>s(167),(eq(53,1),s(37))>>s(168),(eq(53,1),s(38))>>s(169)]

#### Simplifying cost structure of CE 53 
 * Renamed intermediate variables: 
[(eq(54,1),aux(76))>>s(170),(eq(54,1),aux(77))>>s(171),(eq(54,1),aux(78))>>s(172),(eq(54,1),aux(79))>>s(173),(eq(54,1),aux(80))>>s(174),(eq(54,1),s(45))>>s(175),(eq(54,1),s(46))>>s(176),(eq(54,1),s(47))>>s(177),(eq(54,1),s(48))>>s(178),(eq(54,1),s(49))>>s(179),(eq(54,1),s(50))>>s(180),(eq(54,1),s(51))>>s(181),(eq(54,1),s(52))>>s(182),(eq(54,1),s(53))>>s(183),(eq(54,1),s(54))>>s(184),(eq(54,1),s(55))>>s(185),(eq(54,1),s(56))>>s(186),(eq(54,1),s(57))>>s(187),(eq(54,1),s(58))>>s(188),(eq(54,1),s(59))>>s(189),(eq(54,1),s(60))>>s(190),(eq(54,1),s(66))>>s(191),(eq(54,1),s(74))>>s(192),(eq(54,1),s(75))>>s(193),(eq(54,1),s(76))>>s(194),(eq(54,1),s(77))>>s(195),(eq(54,1),s(78))>>s(196),(eq(54,1),s(79))>>s(197),(eq(54,1),s(80))>>s(198)]

#### Simplifying cost structure of CE 54 
 * Joined equivalent variables [aux(87),s(171)] into aux(87)
 * Renamed intermediate variables: 
[(eq(55,1),aux(81))>>s(199),(eq(55,1),aux(82))>>s(200),(eq(55,1),aux(83))>>s(201),(eq(55,1),aux(84))>>s(202),(eq(55,1),aux(85))>>s(203),(eq(55,1),s(106))>>s(204),(eq(55,1),s(107))>>s(205),(eq(55,1),s(108))>>s(206),(eq(55,1),s(109))>>s(207),(eq(55,1),s(110))>>s(208),(eq(55,1),s(111))>>s(209),(eq(55,1),s(112))>>s(210),(eq(55,1),s(113))>>s(211),(eq(55,1),s(114))>>s(212),(eq(55,1),s(115))>>s(213),(eq(55,1),s(116))>>s(214),(eq(55,1),s(117))>>s(215),(eq(55,1),s(118))>>s(216),(eq(55,1),s(119))>>s(217),(eq(55,1),s(120))>>s(218),(eq(55,1),s(121))>>s(219),(eq(55,1),s(128))>>s(220),(eq(55,1),s(135))>>s(221),(eq(55,1),s(136))>>s(222),(eq(55,1),s(137))>>s(223),(eq(55,1),s(138))>>s(224),(eq(55,1),s(139))>>s(225),(eq(55,1),s(140))>>s(226),(eq(55,1),s(141))>>s(227)]

#### Simplifying cost structure of CE 55 
 * Joined equivalent variables [aux(88),s(200)] into aux(88)

#### Cost of chains of eval_Perl_scan_vstring_22(V_PL_bufend,V_pos_1,V__s1,B):
* Chain [47]: 2
  with precondition: [V_pos_1+1>=V_PL_bufend,V__s1>=V_pos_1] 

* Chain [46]: 1*s(142)+2
  Such that:s(142) =< V_pos_1-V__s1

  with precondition: [V_pos_1+1>=V_PL_bufend,V_pos_1>=V__s1+1] 

* Chain [45]: 6*s(148)+10*s(149)+2*s(161)+2*s(162)+2
  Such that:s(146) =< V_PL_bufend-V_pos_1
s(145) =< 2*V_PL_bufend-2*V__s1
s(147) =< V_PL_bufend/2-V_pos_1/2
s(144) =< V_pos_1-V__s1
s(145) =< 2*V_pos_1-2*V__s1
aux(86) =< V_PL_bufend-V__s1
s(144) =< aux(86)
s(148) =< s(146)
s(149) =< s(146)
s(148) =< s(147)
s(150) =< s(146)
s(151) =< s(146)-2
s(152) =< max([aux(86),s(150),s(150)])
s(153) =< s(149)*s(150)
s(154) =< s(149)*s(151)
s(155) =< max([s(144),s(146),0])+s(146)
s(156) =< s(148)*s(150)
s(157) =< s(148)*s(151)
s(152) =< s(155)+1
s(158) =< s(156)*2
s(159) =< s(154)+s(157)+aux(86)
s(159) =< s(148)*s(155)
s(160) =< s(153)+s(156)+aux(86)
s(160) =< s(158)+s(158)+s(145)
s(160) =< s(149)*s(152)
s(161) =< s(160)
s(162) =< s(159)

  with precondition: [V_PL_bufend>=V_pos_1+2] 

* Chain [44]: 3*s(164)+5
  Such that:s(163) =< V_PL_bufend-V_pos_1
s(164) =< s(163)

  with precondition: [V_PL_bufend>=V_pos_1+2,V__s1>=V_pos_1] 

* Chain [43]: 1*s(166)+3*s(168)+2*s(169)+5
  Such that:s(165) =< V_PL_bufend-V_pos_1
s(166) =< V_pos_1-V__s1
s(167) =< V_pos_1-V__s1+1
s(168) =< s(165)
s(169) =< s(167)

  with precondition: [V_PL_bufend>=V_pos_1+2,V_pos_1>=V__s1+1] 

* Chain [42]: 34*s(176)+6*s(177)+2*s(189)+2*s(190)+12*s(191)+4*s(197)+4*s(198)+5
  Such that:s(170) =< V_PL_bufend-V_pos_1
s(174) =< 2*V_PL_bufend-2*V__s1
s(172) =< V_PL_bufend/2-V_pos_1/2
s(173) =< V_pos_1-V__s1
s(174) =< 2*V_pos_1-2*V__s1
aux(87) =< V_PL_bufend-V__s1
s(173) =< aux(87)
s(175) =< s(170)
s(175) =< s(172)
s(176) =< s(170)
s(177) =< s(170)
s(177) =< s(172)
s(177) =< s(175)
s(178) =< s(170)
s(179) =< s(170)-2
s(180) =< max([aux(87),s(178),s(178)])
s(181) =< s(176)*s(178)
s(182) =< s(176)*s(179)
s(183) =< max([s(173),s(170),0])+s(170)
s(184) =< s(177)*s(178)
s(185) =< s(177)*s(179)
s(180) =< s(183)+1
s(186) =< s(184)*2
s(187) =< s(182)+s(185)+aux(87)
s(187) =< s(177)*s(183)
s(188) =< s(181)+s(184)+aux(87)
s(188) =< s(186)+s(186)+s(174)
s(188) =< s(176)*s(180)
s(189) =< s(188)
s(190) =< s(187)
s(191) =< s(170)
s(191) =< s(172)
s(192) =< s(191)*s(178)
s(193) =< s(191)*s(179)
s(194) =< s(192)*2
s(195) =< s(182)+s(193)+aux(87)
s(195) =< s(191)*s(183)
s(196) =< s(181)+s(192)+aux(87)
s(196) =< s(194)+s(194)+s(174)
s(196) =< s(176)*s(180)
s(197) =< s(196)
s(198) =< s(195)

  with precondition: [V_PL_bufend>=V_pos_1+3] 

* Chain [41]: 26*s(205)+6*s(206)+2*s(218)+2*s(219)+6*s(220)+2*s(226)+2*s(227)+5
  Such that:s(199) =< V_PL_bufend-V_pos_1
s(203) =< 2*V_PL_bufend-2*V__s1
s(201) =< V_PL_bufend/2-V_pos_1/2
s(202) =< V_pos_1-V__s1
s(203) =< 2*V_pos_1-2*V__s1
aux(88) =< V_PL_bufend-V__s1
s(202) =< aux(88)
s(204) =< s(199)
s(204) =< s(201)
s(205) =< s(199)
s(206) =< s(199)
s(206) =< s(201)
s(206) =< s(204)
s(207) =< s(199)
s(208) =< s(199)-2
s(209) =< max([aux(88),s(207),s(207)])
s(210) =< s(205)*s(207)
s(211) =< s(205)*s(208)
s(212) =< max([s(202),s(199),0])+s(199)
s(213) =< s(206)*s(207)
s(214) =< s(206)*s(208)
s(209) =< s(212)+1
s(215) =< s(213)*2
s(216) =< s(211)+s(214)+aux(88)
s(216) =< s(206)*s(212)
s(217) =< s(210)+s(213)+aux(88)
s(217) =< s(215)+s(215)+s(203)
s(217) =< s(205)*s(209)
s(218) =< s(217)
s(219) =< s(216)
s(220) =< s(199)
s(220) =< s(201)
s(221) =< s(220)*s(207)
s(222) =< s(220)*s(208)
s(223) =< s(221)*2
s(224) =< s(211)+s(222)+aux(88)
s(224) =< s(220)*s(212)
s(225) =< s(210)+s(221)+aux(88)
s(225) =< s(223)+s(223)+s(203)
s(225) =< s(205)*s(209)
s(226) =< s(225)
s(227) =< s(224)

  with precondition: [V_PL_bufend>=V_pos_1+4] 

 * Renamed intermediate variables: 
[(eq(71,1),s(142))>>s(228)]

#### Simplifying cost structure of CE 71 
 * Renamed intermediate variables: 
[(eq(74,1),s(165))>>s(229),(eq(74,1),s(166))>>s(230),(eq(74,1),s(167))>>s(231),(eq(74,1),s(168))>>s(232),(eq(74,1),s(169))>>s(233)]

#### Simplifying cost structure of CE 74 

#### Simplifying cost structure of CE 70 
 * Renamed intermediate variables: 
[(eq(73,1),s(163))>>s(234),(eq(73,1),s(164))>>s(235)]

#### Simplifying cost structure of CE 73 
 * Renamed intermediate variables: 
[(eq(72,1),s(146))>>s(236),(eq(72,1),s(145))>>s(237),(eq(72,1),s(147))>>s(238),(eq(72,1),s(144))>>s(239),(eq(72,1),aux(86))>>s(240),(eq(72,1),s(148))>>s(241),(eq(72,1),s(149))>>s(242),(eq(72,1),s(150))>>s(243),(eq(72,1),s(151))>>s(244),(eq(72,1),s(152))>>s(245),(eq(72,1),s(153))>>s(246),(eq(72,1),s(154))>>s(247),(eq(72,1),s(155))>>s(248),(eq(72,1),s(156))>>s(249),(eq(72,1),s(157))>>s(250),(eq(72,1),s(158))>>s(251),(eq(72,1),s(159))>>s(252),(eq(72,1),s(160))>>s(253),(eq(72,1),s(161))>>s(254),(eq(72,1),s(162))>>s(255)]

#### Simplifying cost structure of CE 72 
 * Renamed intermediate variables: 
[(eq(75,1),s(170))>>s(256),(eq(75,1),s(174))>>s(257),(eq(75,1),s(172))>>s(258),(eq(75,1),s(173))>>s(259),(eq(75,1),aux(87))>>s(260),(eq(75,1),s(175))>>s(261),(eq(75,1),s(176))>>s(262),(eq(75,1),s(177))>>s(263),(eq(75,1),s(178))>>s(264),(eq(75,1),s(179))>>s(265),(eq(75,1),s(180))>>s(266),(eq(75,1),s(181))>>s(267),(eq(75,1),s(182))>>s(268),(eq(75,1),s(183))>>s(269),(eq(75,1),s(184))>>s(270),(eq(75,1),s(185))>>s(271),(eq(75,1),s(186))>>s(272),(eq(75,1),s(187))>>s(273),(eq(75,1),s(188))>>s(274),(eq(75,1),s(189))>>s(275),(eq(75,1),s(190))>>s(276),(eq(75,1),s(191))>>s(277),(eq(75,1),s(192))>>s(278),(eq(75,1),s(193))>>s(279),(eq(75,1),s(194))>>s(280),(eq(75,1),s(195))>>s(281),(eq(75,1),s(196))>>s(282),(eq(75,1),s(197))>>s(283),(eq(75,1),s(198))>>s(284)]

#### Simplifying cost structure of CE 75 
 * Renamed intermediate variables: 
[(eq(76,1),s(199))>>s(285),(eq(76,1),s(203))>>s(286),(eq(76,1),s(201))>>s(287),(eq(76,1),s(202))>>s(288),(eq(76,1),aux(88))>>s(289),(eq(76,1),s(204))>>s(290),(eq(76,1),s(205))>>s(291),(eq(76,1),s(206))>>s(292),(eq(76,1),s(207))>>s(293),(eq(76,1),s(208))>>s(294),(eq(76,1),s(209))>>s(295),(eq(76,1),s(210))>>s(296),(eq(76,1),s(211))>>s(297),(eq(76,1),s(212))>>s(298),(eq(76,1),s(213))>>s(299),(eq(76,1),s(214))>>s(300),(eq(76,1),s(215))>>s(301),(eq(76,1),s(216))>>s(302),(eq(76,1),s(217))>>s(303),(eq(76,1),s(218))>>s(304),(eq(76,1),s(219))>>s(305),(eq(76,1),s(220))>>s(306),(eq(76,1),s(221))>>s(307),(eq(76,1),s(222))>>s(308),(eq(76,1),s(223))>>s(309),(eq(76,1),s(224))>>s(310),(eq(76,1),s(225))>>s(311),(eq(76,1),s(226))>>s(312),(eq(76,1),s(227))>>s(313)]

#### Simplifying cost structure of CE 76 

#### Simplifying cost structure of CE 63 
 * Renamed intermediate variables: 
[(eq(64,1),s(142))>>s(314)]

#### Simplifying cost structure of CE 64 
 * Renamed intermediate variables: 
[(eq(66,1),s(163))>>s(315),(eq(66,1),s(164))>>s(316)]

#### Simplifying cost structure of CE 66 
 * Renamed intermediate variables: 
[(eq(67,1),s(165))>>s(317),(eq(67,1),s(166))>>s(318),(eq(67,1),s(167))>>s(319),(eq(67,1),s(168))>>s(320),(eq(67,1),s(169))>>s(321)]

#### Simplifying cost structure of CE 67 
 * Joined equivalent variables [aux(89),s(319)] into aux(89)
 * Joined equivalent variables [s(318),s(321)] into s(318)

#### Simplifying cost structure of CE 56 
 * Renamed intermediate variables: 
[(eq(57,1),s(142))>>s(322)]

#### Simplifying cost structure of CE 57 
 * Renamed intermediate variables: 
[(eq(59,1),s(163))>>s(323),(eq(59,1),s(164))>>s(324)]

#### Simplifying cost structure of CE 59 
 * Renamed intermediate variables: 
[(eq(60,1),s(165))>>s(325),(eq(60,1),s(166))>>s(326),(eq(60,1),s(167))>>s(327),(eq(60,1),s(168))>>s(328),(eq(60,1),s(169))>>s(329)]

#### Simplifying cost structure of CE 60 
 * Joined equivalent variables [aux(90),s(327)] into aux(90)
 * Joined equivalent variables [s(326),s(329)] into s(326)
 * Renamed intermediate variables: 
[(eq(65,1),s(146))>>s(330),(eq(65,1),s(145))>>s(331),(eq(65,1),s(147))>>s(332),(eq(65,1),s(144))>>s(333),(eq(65,1),aux(86))>>s(334),(eq(65,1),s(148))>>s(335),(eq(65,1),s(149))>>s(336),(eq(65,1),s(150))>>s(337),(eq(65,1),s(151))>>s(338),(eq(65,1),s(152))>>s(339),(eq(65,1),s(153))>>s(340),(eq(65,1),s(154))>>s(341),(eq(65,1),s(155))>>s(342),(eq(65,1),s(156))>>s(343),(eq(65,1),s(157))>>s(344),(eq(65,1),s(158))>>s(345),(eq(65,1),s(159))>>s(346),(eq(65,1),s(160))>>s(347),(eq(65,1),s(161))>>s(348),(eq(65,1),s(162))>>s(349)]

#### Simplifying cost structure of CE 65 
 * Renamed intermediate variables: 
[(eq(68,1),s(170))>>s(350),(eq(68,1),s(174))>>s(351),(eq(68,1),s(172))>>s(352),(eq(68,1),s(173))>>s(353),(eq(68,1),aux(87))>>s(354),(eq(68,1),s(175))>>s(355),(eq(68,1),s(176))>>s(356),(eq(68,1),s(177))>>s(357),(eq(68,1),s(178))>>s(358),(eq(68,1),s(179))>>s(359),(eq(68,1),s(180))>>s(360),(eq(68,1),s(181))>>s(361),(eq(68,1),s(182))>>s(362),(eq(68,1),s(183))>>s(363),(eq(68,1),s(184))>>s(364),(eq(68,1),s(185))>>s(365),(eq(68,1),s(186))>>s(366),(eq(68,1),s(187))>>s(367),(eq(68,1),s(188))>>s(368),(eq(68,1),s(189))>>s(369),(eq(68,1),s(190))>>s(370),(eq(68,1),s(191))>>s(371),(eq(68,1),s(192))>>s(372),(eq(68,1),s(193))>>s(373),(eq(68,1),s(194))>>s(374),(eq(68,1),s(195))>>s(375),(eq(68,1),s(196))>>s(376),(eq(68,1),s(197))>>s(377),(eq(68,1),s(198))>>s(378)]

#### Simplifying cost structure of CE 68 
 * Renamed intermediate variables: 
[(eq(69,1),s(199))>>s(379),(eq(69,1),s(203))>>s(380),(eq(69,1),s(201))>>s(381),(eq(69,1),s(202))>>s(382),(eq(69,1),aux(88))>>s(383),(eq(69,1),s(204))>>s(384),(eq(69,1),s(205))>>s(385),(eq(69,1),s(206))>>s(386),(eq(69,1),s(207))>>s(387),(eq(69,1),s(208))>>s(388),(eq(69,1),s(209))>>s(389),(eq(69,1),s(210))>>s(390),(eq(69,1),s(211))>>s(391),(eq(69,1),s(212))>>s(392),(eq(69,1),s(213))>>s(393),(eq(69,1),s(214))>>s(394),(eq(69,1),s(215))>>s(395),(eq(69,1),s(216))>>s(396),(eq(69,1),s(217))>>s(397),(eq(69,1),s(218))>>s(398),(eq(69,1),s(219))>>s(399),(eq(69,1),s(220))>>s(400),(eq(69,1),s(221))>>s(401),(eq(69,1),s(222))>>s(402),(eq(69,1),s(223))>>s(403),(eq(69,1),s(224))>>s(404),(eq(69,1),s(225))>>s(405),(eq(69,1),s(226))>>s(406),(eq(69,1),s(227))>>s(407)]

#### Simplifying cost structure of CE 69 
 * Renamed intermediate variables: 
[(eq(58,1),s(146))>>s(408),(eq(58,1),s(145))>>s(409),(eq(58,1),s(147))>>s(410),(eq(58,1),s(144))>>s(411),(eq(58,1),aux(86))>>s(412),(eq(58,1),s(148))>>s(413),(eq(58,1),s(149))>>s(414),(eq(58,1),s(150))>>s(415),(eq(58,1),s(151))>>s(416),(eq(58,1),s(152))>>s(417),(eq(58,1),s(153))>>s(418),(eq(58,1),s(154))>>s(419),(eq(58,1),s(155))>>s(420),(eq(58,1),s(156))>>s(421),(eq(58,1),s(157))>>s(422),(eq(58,1),s(158))>>s(423),(eq(58,1),s(159))>>s(424),(eq(58,1),s(160))>>s(425),(eq(58,1),s(161))>>s(426),(eq(58,1),s(162))>>s(427)]

#### Simplifying cost structure of CE 58 
 * Renamed intermediate variables: 
[(eq(61,1),s(170))>>s(428),(eq(61,1),s(174))>>s(429),(eq(61,1),s(172))>>s(430),(eq(61,1),s(173))>>s(431),(eq(61,1),aux(87))>>s(432),(eq(61,1),s(175))>>s(433),(eq(61,1),s(176))>>s(434),(eq(61,1),s(177))>>s(435),(eq(61,1),s(178))>>s(436),(eq(61,1),s(179))>>s(437),(eq(61,1),s(180))>>s(438),(eq(61,1),s(181))>>s(439),(eq(61,1),s(182))>>s(440),(eq(61,1),s(183))>>s(441),(eq(61,1),s(184))>>s(442),(eq(61,1),s(185))>>s(443),(eq(61,1),s(186))>>s(444),(eq(61,1),s(187))>>s(445),(eq(61,1),s(188))>>s(446),(eq(61,1),s(189))>>s(447),(eq(61,1),s(190))>>s(448),(eq(61,1),s(191))>>s(449),(eq(61,1),s(192))>>s(450),(eq(61,1),s(193))>>s(451),(eq(61,1),s(194))>>s(452),(eq(61,1),s(195))>>s(453),(eq(61,1),s(196))>>s(454),(eq(61,1),s(197))>>s(455),(eq(61,1),s(198))>>s(456)]

#### Simplifying cost structure of CE 61 
 * Renamed intermediate variables: 
[(eq(62,1),s(199))>>s(457),(eq(62,1),s(203))>>s(458),(eq(62,1),s(201))>>s(459),(eq(62,1),s(202))>>s(460),(eq(62,1),aux(88))>>s(461),(eq(62,1),s(204))>>s(462),(eq(62,1),s(205))>>s(463),(eq(62,1),s(206))>>s(464),(eq(62,1),s(207))>>s(465),(eq(62,1),s(208))>>s(466),(eq(62,1),s(209))>>s(467),(eq(62,1),s(210))>>s(468),(eq(62,1),s(211))>>s(469),(eq(62,1),s(212))>>s(470),(eq(62,1),s(213))>>s(471),(eq(62,1),s(214))>>s(472),(eq(62,1),s(215))>>s(473),(eq(62,1),s(216))>>s(474),(eq(62,1),s(217))>>s(475),(eq(62,1),s(218))>>s(476),(eq(62,1),s(219))>>s(477),(eq(62,1),s(220))>>s(478),(eq(62,1),s(221))>>s(479),(eq(62,1),s(222))>>s(480),(eq(62,1),s(223))>>s(481),(eq(62,1),s(224))>>s(482),(eq(62,1),s(225))>>s(483),(eq(62,1),s(226))>>s(484),(eq(62,1),s(227))>>s(485)]

#### Simplifying cost structure of CE 62 

#### Cost of chains of eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B):
* Chain [68]: 1*s(228)+2
  Such that:s(228) =< -V_s+V_pos_1

  with precondition: [V_9=0,V_11=V_s+1,V_pos_1+1>=V_PL_bufend,V_pos_1>=V_11] 

* Chain [67]: 1*s(230)+3*s(232)+2*s(233)+5
  Such that:s(230) =< -V_s+V_pos_1
s(231) =< -V_s+V_pos_1+1
s(229) =< V_PL_bufend-V_pos_1
s(232) =< s(229)
s(233) =< s(231)

  with precondition: [V_9=0,V_11=V_s+1,V_PL_bufend>=V_pos_1+2,V_pos_1>=V_11] 

* Chain [66]: 2
  with precondition: [V_9=0,V_11=V_s+1,V_pos_1+1>=V_PL_bufend,V_11>=V_pos_1+1] 

* Chain [65]: 3*s(235)+5
  Such that:s(234) =< V_PL_bufend-V_pos_1
s(235) =< s(234)

  with precondition: [V_9=0,V_11=V_s+1,V_PL_bufend>=V_pos_1+2,V_11>=V_pos_1+1] 

* Chain [64]: 6*s(241)+10*s(242)+2*s(254)+2*s(255)+2
  Such that:s(237) =< -2*V_s+2*V_PL_bufend
s(240) =< -V_s+V_PL_bufend
s(236) =< V_PL_bufend-V_pos_1
s(239) =< V_PL_bufend-V_11
s(240) =< V_PL_bufend-V_11+1
s(237) =< 2*V_PL_bufend-2*V_11
s(237) =< 2*V_PL_bufend-2*V_11+2
s(238) =< V_PL_bufend/2-V_pos_1/2
s(239) =< V_pos_1-V_11+1
s(237) =< 2*V_pos_1-2*V_11+2
s(239) =< s(240)
s(241) =< s(236)
s(242) =< s(236)
s(241) =< s(238)
s(243) =< s(236)
s(244) =< s(236)-2
s(245) =< max([s(240),s(243),s(243)])
s(246) =< s(242)*s(243)
s(247) =< s(242)*s(244)
s(248) =< max([s(239),s(236),0])+s(236)
s(249) =< s(241)*s(243)
s(250) =< s(241)*s(244)
s(245) =< s(248)+1
s(251) =< s(249)*2
s(252) =< s(247)+s(250)+s(240)
s(252) =< s(241)*s(248)
s(253) =< s(246)+s(249)+s(240)
s(253) =< s(251)+s(251)+s(237)
s(253) =< s(242)*s(245)
s(254) =< s(253)
s(255) =< s(252)

  with precondition: [V_9=0,V_11=V_s+1,V_PL_bufend>=V_pos_1+2] 

* Chain [63]: 34*s(262)+6*s(263)+2*s(275)+2*s(276)+12*s(277)+4*s(283)+4*s(284)+5
  Such that:s(257) =< -2*V_s+2*V_PL_bufend
s(260) =< -V_s+V_PL_bufend
s(256) =< V_PL_bufend-V_pos_1
s(259) =< V_PL_bufend-V_11
s(260) =< V_PL_bufend-V_11+1
s(257) =< 2*V_PL_bufend-2*V_11
s(257) =< 2*V_PL_bufend-2*V_11+2
s(258) =< V_PL_bufend/2-V_pos_1/2
s(259) =< V_pos_1-V_11+1
s(257) =< 2*V_pos_1-2*V_11+2
s(259) =< s(260)
s(261) =< s(256)
s(261) =< s(258)
s(262) =< s(256)
s(263) =< s(256)
s(263) =< s(258)
s(263) =< s(261)
s(264) =< s(256)
s(265) =< s(256)-2
s(266) =< max([s(260),s(264),s(264)])
s(267) =< s(262)*s(264)
s(268) =< s(262)*s(265)
s(269) =< max([s(259),s(256),0])+s(256)
s(270) =< s(263)*s(264)
s(271) =< s(263)*s(265)
s(266) =< s(269)+1
s(272) =< s(270)*2
s(273) =< s(268)+s(271)+s(260)
s(273) =< s(263)*s(269)
s(274) =< s(267)+s(270)+s(260)
s(274) =< s(272)+s(272)+s(257)
s(274) =< s(262)*s(266)
s(275) =< s(274)
s(276) =< s(273)
s(277) =< s(256)
s(277) =< s(258)
s(278) =< s(277)*s(264)
s(279) =< s(277)*s(265)
s(280) =< s(278)*2
s(281) =< s(268)+s(279)+s(260)
s(281) =< s(277)*s(269)
s(282) =< s(267)+s(278)+s(260)
s(282) =< s(280)+s(280)+s(257)
s(282) =< s(262)*s(266)
s(283) =< s(282)
s(284) =< s(281)

  with precondition: [V_9=0,V_11=V_s+1,V_PL_bufend>=V_pos_1+3] 

* Chain [62]: 26*s(291)+6*s(292)+2*s(304)+2*s(305)+6*s(306)+2*s(312)+2*s(313)+5
  Such that:s(286) =< -2*V_s+2*V_PL_bufend
s(289) =< -V_s+V_PL_bufend
s(285) =< V_PL_bufend-V_pos_1
s(288) =< V_PL_bufend-V_11
s(289) =< V_PL_bufend-V_11+1
s(286) =< 2*V_PL_bufend-2*V_11
s(286) =< 2*V_PL_bufend-2*V_11+2
s(287) =< V_PL_bufend/2-V_pos_1/2
s(288) =< V_pos_1-V_11+1
s(286) =< 2*V_pos_1-2*V_11+2
s(288) =< s(289)
s(290) =< s(285)
s(290) =< s(287)
s(291) =< s(285)
s(292) =< s(285)
s(292) =< s(287)
s(292) =< s(290)
s(293) =< s(285)
s(294) =< s(285)-2
s(295) =< max([s(289),s(293),s(293)])
s(296) =< s(291)*s(293)
s(297) =< s(291)*s(294)
s(298) =< max([s(288),s(285),0])+s(285)
s(299) =< s(292)*s(293)
s(300) =< s(292)*s(294)
s(295) =< s(298)+1
s(301) =< s(299)*2
s(302) =< s(297)+s(300)+s(289)
s(302) =< s(292)*s(298)
s(303) =< s(296)+s(299)+s(289)
s(303) =< s(301)+s(301)+s(286)
s(303) =< s(291)*s(295)
s(304) =< s(303)
s(305) =< s(302)
s(306) =< s(285)
s(306) =< s(287)
s(307) =< s(306)*s(293)
s(308) =< s(306)*s(294)
s(309) =< s(307)*2
s(310) =< s(297)+s(308)+s(289)
s(310) =< s(306)*s(298)
s(311) =< s(296)+s(307)+s(289)
s(311) =< s(309)+s(309)+s(286)
s(311) =< s(291)*s(295)
s(312) =< s(311)
s(313) =< s(310)

  with precondition: [V_9=0,V_11=V_s+1,V_PL_bufend>=V_pos_1+4] 

* Chain [61]: 2
  with precondition: [V_s+1=V_11,0>=V_9+1,V_pos_1+1>=V_PL_bufend,V_s+1>=V_pos_1] 

* Chain [60]: 1*s(314)+2
  Such that:s(314) =< -V_s+V_pos_1

  with precondition: [V_s+1=V_11,0>=V_9+1,V_pos_1>=V_s+2,V_pos_1+1>=V_PL_bufend] 

* Chain [59]: 3*s(316)+5
  Such that:s(315) =< V_PL_bufend-V_pos_1
s(316) =< s(315)

  with precondition: [V_s+1=V_11,0>=V_9+1,V_s+1>=V_pos_1,V_PL_bufend>=V_pos_1+2] 

* Chain [58]: 3*s(318)+3*s(320)+5
  Such that:s(317) =< V_PL_bufend-V_pos_1
aux(89) =< -V_s+V_pos_1
s(318) =< aux(89)
s(320) =< s(317)

  with precondition: [V_s+1=V_11,0>=V_9+1,V_pos_1>=V_s+2,V_PL_bufend>=V_pos_1+2] 

* Chain [57]: 2
  with precondition: [V_s+1=V_11,V_9>=1,V_pos_1+1>=V_PL_bufend,V_s+1>=V_pos_1] 

* Chain [56]: 1*s(322)+2
  Such that:s(322) =< -V_s+V_pos_1

  with precondition: [V_s+1=V_11,V_9>=1,V_pos_1>=V_s+2,V_pos_1+1>=V_PL_bufend] 

* Chain [55]: 3*s(324)+5
  Such that:s(323) =< V_PL_bufend-V_pos_1
s(324) =< s(323)

  with precondition: [V_s+1=V_11,V_9>=1,V_s+1>=V_pos_1,V_PL_bufend>=V_pos_1+2] 

* Chain [54]: 3*s(326)+3*s(328)+5
  Such that:s(325) =< V_PL_bufend-V_pos_1
aux(90) =< -V_s+V_pos_1
s(326) =< aux(90)
s(328) =< s(325)

  with precondition: [V_s+1=V_11,V_9>=1,V_pos_1>=V_s+2,V_PL_bufend>=V_pos_1+2] 

* Chain [53]: 6*s(335)+10*s(336)+2*s(348)+2*s(349)+2
  Such that:s(331) =< -2*V_s+2*V_PL_bufend
s(334) =< -V_s+V_PL_bufend
s(330) =< V_PL_bufend-V_pos_1
s(331) =< 2*V_PL_bufend-2*V_11
s(332) =< V_PL_bufend/2-V_pos_1/2
s(333) =< V_pos_1-V_11
s(331) =< 2*V_pos_1-2*V_11
aux(91) =< V_PL_bufend-V_11
s(333) =< aux(91)
s(334) =< aux(91)
s(333) =< s(334)
s(335) =< s(330)
s(336) =< s(330)
s(335) =< s(332)
s(337) =< s(330)
s(338) =< s(330)-2
s(339) =< max([s(334),s(337),s(337)])
s(340) =< s(336)*s(337)
s(341) =< s(336)*s(338)
s(342) =< max([s(333),s(330),0])+s(330)
s(343) =< s(335)*s(337)
s(344) =< s(335)*s(338)
s(339) =< s(342)+1
s(345) =< s(343)*2
s(346) =< s(341)+s(344)+s(334)
s(346) =< s(335)*s(342)
s(347) =< s(340)+s(343)+s(334)
s(347) =< s(345)+s(345)+s(331)
s(347) =< s(336)*s(339)
s(348) =< s(347)
s(349) =< s(346)

  with precondition: [V_11=V_s+1,0>=V_9+1,V_PL_bufend>=V_pos_1+2] 

* Chain [52]: 34*s(356)+6*s(357)+2*s(369)+2*s(370)+12*s(371)+4*s(377)+4*s(378)+5
  Such that:s(351) =< -2*V_s+2*V_PL_bufend
s(354) =< -V_s+V_PL_bufend
s(350) =< V_PL_bufend-V_pos_1
s(351) =< 2*V_PL_bufend-2*V_11
s(352) =< V_PL_bufend/2-V_pos_1/2
s(353) =< V_pos_1-V_11
s(351) =< 2*V_pos_1-2*V_11
aux(92) =< V_PL_bufend-V_11
s(353) =< aux(92)
s(354) =< aux(92)
s(353) =< s(354)
s(355) =< s(350)
s(355) =< s(352)
s(356) =< s(350)
s(357) =< s(350)
s(357) =< s(352)
s(357) =< s(355)
s(358) =< s(350)
s(359) =< s(350)-2
s(360) =< max([s(354),s(358),s(358)])
s(361) =< s(356)*s(358)
s(362) =< s(356)*s(359)
s(363) =< max([s(353),s(350),0])+s(350)
s(364) =< s(357)*s(358)
s(365) =< s(357)*s(359)
s(360) =< s(363)+1
s(366) =< s(364)*2
s(367) =< s(362)+s(365)+s(354)
s(367) =< s(357)*s(363)
s(368) =< s(361)+s(364)+s(354)
s(368) =< s(366)+s(366)+s(351)
s(368) =< s(356)*s(360)
s(369) =< s(368)
s(370) =< s(367)
s(371) =< s(350)
s(371) =< s(352)
s(372) =< s(371)*s(358)
s(373) =< s(371)*s(359)
s(374) =< s(372)*2
s(375) =< s(362)+s(373)+s(354)
s(375) =< s(371)*s(363)
s(376) =< s(361)+s(372)+s(354)
s(376) =< s(374)+s(374)+s(351)
s(376) =< s(356)*s(360)
s(377) =< s(376)
s(378) =< s(375)

  with precondition: [V_11=V_s+1,0>=V_9+1,V_PL_bufend>=V_pos_1+3] 

* Chain [51]: 26*s(385)+6*s(386)+2*s(398)+2*s(399)+6*s(400)+2*s(406)+2*s(407)+5
  Such that:s(380) =< -2*V_s+2*V_PL_bufend
s(383) =< -V_s+V_PL_bufend
s(379) =< V_PL_bufend-V_pos_1
s(380) =< 2*V_PL_bufend-2*V_11
s(381) =< V_PL_bufend/2-V_pos_1/2
s(382) =< V_pos_1-V_11
s(380) =< 2*V_pos_1-2*V_11
aux(93) =< V_PL_bufend-V_11
s(382) =< aux(93)
s(383) =< aux(93)
s(382) =< s(383)
s(384) =< s(379)
s(384) =< s(381)
s(385) =< s(379)
s(386) =< s(379)
s(386) =< s(381)
s(386) =< s(384)
s(387) =< s(379)
s(388) =< s(379)-2
s(389) =< max([s(383),s(387),s(387)])
s(390) =< s(385)*s(387)
s(391) =< s(385)*s(388)
s(392) =< max([s(382),s(379),0])+s(379)
s(393) =< s(386)*s(387)
s(394) =< s(386)*s(388)
s(389) =< s(392)+1
s(395) =< s(393)*2
s(396) =< s(391)+s(394)+s(383)
s(396) =< s(386)*s(392)
s(397) =< s(390)+s(393)+s(383)
s(397) =< s(395)+s(395)+s(380)
s(397) =< s(385)*s(389)
s(398) =< s(397)
s(399) =< s(396)
s(400) =< s(379)
s(400) =< s(381)
s(401) =< s(400)*s(387)
s(402) =< s(400)*s(388)
s(403) =< s(401)*2
s(404) =< s(391)+s(402)+s(383)
s(404) =< s(400)*s(392)
s(405) =< s(390)+s(401)+s(383)
s(405) =< s(403)+s(403)+s(380)
s(405) =< s(385)*s(389)
s(406) =< s(405)
s(407) =< s(404)

  with precondition: [V_11=V_s+1,0>=V_9+1,V_PL_bufend>=V_pos_1+4] 

* Chain [50]: 6*s(413)+10*s(414)+2*s(426)+2*s(427)+2
  Such that:s(409) =< -2*V_s+2*V_PL_bufend
s(412) =< -V_s+V_PL_bufend
s(408) =< V_PL_bufend-V_pos_1
s(409) =< 2*V_PL_bufend-2*V_11
s(410) =< V_PL_bufend/2-V_pos_1/2
s(411) =< V_pos_1-V_11
s(409) =< 2*V_pos_1-2*V_11
aux(94) =< V_PL_bufend-V_11
s(411) =< aux(94)
s(412) =< aux(94)
s(411) =< s(412)
s(413) =< s(408)
s(414) =< s(408)
s(413) =< s(410)
s(415) =< s(408)
s(416) =< s(408)-2
s(417) =< max([s(412),s(415),s(415)])
s(418) =< s(414)*s(415)
s(419) =< s(414)*s(416)
s(420) =< max([s(411),s(408),0])+s(408)
s(421) =< s(413)*s(415)
s(422) =< s(413)*s(416)
s(417) =< s(420)+1
s(423) =< s(421)*2
s(424) =< s(419)+s(422)+s(412)
s(424) =< s(413)*s(420)
s(425) =< s(418)+s(421)+s(412)
s(425) =< s(423)+s(423)+s(409)
s(425) =< s(414)*s(417)
s(426) =< s(425)
s(427) =< s(424)

  with precondition: [V_11=V_s+1,V_9>=1,V_PL_bufend>=V_pos_1+2] 

* Chain [49]: 34*s(434)+6*s(435)+2*s(447)+2*s(448)+12*s(449)+4*s(455)+4*s(456)+5
  Such that:s(429) =< -2*V_s+2*V_PL_bufend
s(432) =< -V_s+V_PL_bufend
s(428) =< V_PL_bufend-V_pos_1
s(429) =< 2*V_PL_bufend-2*V_11
s(430) =< V_PL_bufend/2-V_pos_1/2
s(431) =< V_pos_1-V_11
s(429) =< 2*V_pos_1-2*V_11
aux(95) =< V_PL_bufend-V_11
s(431) =< aux(95)
s(432) =< aux(95)
s(431) =< s(432)
s(433) =< s(428)
s(433) =< s(430)
s(434) =< s(428)
s(435) =< s(428)
s(435) =< s(430)
s(435) =< s(433)
s(436) =< s(428)
s(437) =< s(428)-2
s(438) =< max([s(432),s(436),s(436)])
s(439) =< s(434)*s(436)
s(440) =< s(434)*s(437)
s(441) =< max([s(431),s(428),0])+s(428)
s(442) =< s(435)*s(436)
s(443) =< s(435)*s(437)
s(438) =< s(441)+1
s(444) =< s(442)*2
s(445) =< s(440)+s(443)+s(432)
s(445) =< s(435)*s(441)
s(446) =< s(439)+s(442)+s(432)
s(446) =< s(444)+s(444)+s(429)
s(446) =< s(434)*s(438)
s(447) =< s(446)
s(448) =< s(445)
s(449) =< s(428)
s(449) =< s(430)
s(450) =< s(449)*s(436)
s(451) =< s(449)*s(437)
s(452) =< s(450)*2
s(453) =< s(440)+s(451)+s(432)
s(453) =< s(449)*s(441)
s(454) =< s(439)+s(450)+s(432)
s(454) =< s(452)+s(452)+s(429)
s(454) =< s(434)*s(438)
s(455) =< s(454)
s(456) =< s(453)

  with precondition: [V_11=V_s+1,V_9>=1,V_PL_bufend>=V_pos_1+3] 

* Chain [48]: 26*s(463)+6*s(464)+2*s(476)+2*s(477)+6*s(478)+2*s(484)+2*s(485)+5
  Such that:s(458) =< -2*V_s+2*V_PL_bufend
s(461) =< -V_s+V_PL_bufend
s(457) =< V_PL_bufend-V_pos_1
s(458) =< 2*V_PL_bufend-2*V_11
s(459) =< V_PL_bufend/2-V_pos_1/2
s(460) =< V_pos_1-V_11
s(458) =< 2*V_pos_1-2*V_11
aux(96) =< V_PL_bufend-V_11
s(460) =< aux(96)
s(461) =< aux(96)
s(460) =< s(461)
s(462) =< s(457)
s(462) =< s(459)
s(463) =< s(457)
s(464) =< s(457)
s(464) =< s(459)
s(464) =< s(462)
s(465) =< s(457)
s(466) =< s(457)-2
s(467) =< max([s(461),s(465),s(465)])
s(468) =< s(463)*s(465)
s(469) =< s(463)*s(466)
s(470) =< max([s(460),s(457),0])+s(457)
s(471) =< s(464)*s(465)
s(472) =< s(464)*s(466)
s(467) =< s(470)+1
s(473) =< s(471)*2
s(474) =< s(469)+s(472)+s(461)
s(474) =< s(464)*s(470)
s(475) =< s(468)+s(471)+s(461)
s(475) =< s(473)+s(473)+s(458)
s(475) =< s(463)*s(467)
s(476) =< s(475)
s(477) =< s(474)
s(478) =< s(457)
s(478) =< s(459)
s(479) =< s(478)*s(465)
s(480) =< s(478)*s(466)
s(481) =< s(479)*2
s(482) =< s(469)+s(480)+s(461)
s(482) =< s(478)*s(470)
s(483) =< s(468)+s(479)+s(461)
s(483) =< s(481)+s(481)+s(458)
s(483) =< s(463)*s(467)
s(484) =< s(483)
s(485) =< s(482)

  with precondition: [V_11=V_s+1,V_9>=1,V_PL_bufend>=V_pos_1+4] 


#### Simplifying cost structure of CE 119 
 * Renamed intermediate variables: 
[(eq(99,1),s(228))>>s(486)]

#### Simplifying cost structure of CE 99 
 * Renamed intermediate variables: 
[(eq(102,1),s(230))>>s(487),(eq(102,1),s(231))>>s(488),(eq(102,1),s(229))>>s(489),(eq(102,1),s(232))>>s(490),(eq(102,1),s(233))>>s(491)]

#### Simplifying cost structure of CE 102 
 * Renamed intermediate variables: 
[(eq(111,1),s(314))>>s(492)]

#### Simplifying cost structure of CE 111 
 * Renamed intermediate variables: 
[(eq(115,1),s(322))>>s(493)]

#### Simplifying cost structure of CE 115 
 * Joined equivalent variables [s(492),s(493)] into s(492)
 * Renamed intermediate variables: 
[(eq(112,1),s(317))>>s(494),(eq(112,1),aux(89))>>s(495),(eq(112,1),s(318))>>s(496),(eq(112,1),s(320))>>s(497)]

#### Simplifying cost structure of CE 112 
 * Renamed intermediate variables: 
[(eq(116,1),s(325))>>s(498),(eq(116,1),aux(90))>>s(499),(eq(116,1),s(326))>>s(500),(eq(116,1),s(328))>>s(501)]

#### Simplifying cost structure of CE 116 
 * Joined equivalent variables [aux(98),s(495),s(499)] into aux(98)
 * Joined equivalent variables [aux(99),s(494),s(498)] into aux(99)
 * Joined equivalent variables [s(496),s(500)] into s(496)
 * Joined equivalent variables [s(497),s(501)] into s(497)

#### Simplifying cost structure of CE 113 

#### Simplifying cost structure of CE 117 

#### Simplifying cost structure of CE 98 
 * Renamed intermediate variables: 
[(eq(114,1),s(315))>>s(502),(eq(114,1),s(316))>>s(503)]

#### Simplifying cost structure of CE 114 
 * Renamed intermediate variables: 
[(eq(118,1),s(323))>>s(504),(eq(118,1),s(324))>>s(505)]

#### Simplifying cost structure of CE 118 
 * Joined equivalent variables [aux(100),s(502),s(504)] into aux(100)
 * Joined equivalent variables [s(503),s(505)] into s(503)
 * Renamed intermediate variables: 
[(eq(101,1),s(234))>>s(506),(eq(101,1),s(235))>>s(507)]

#### Simplifying cost structure of CE 101 
 * Renamed intermediate variables: 
[(eq(100,1),s(237))>>s(508),(eq(100,1),s(240))>>s(509),(eq(100,1),s(236))>>s(510),(eq(100,1),s(239))>>s(511),(eq(100,1),s(238))>>s(512),(eq(100,1),s(241))>>s(513),(eq(100,1),s(242))>>s(514),(eq(100,1),s(243))>>s(515),(eq(100,1),s(244))>>s(516),(eq(100,1),s(245))>>s(517),(eq(100,1),s(246))>>s(518),(eq(100,1),s(247))>>s(519),(eq(100,1),s(248))>>s(520),(eq(100,1),s(249))>>s(521),(eq(100,1),s(250))>>s(522),(eq(100,1),s(251))>>s(523),(eq(100,1),s(252))>>s(524),(eq(100,1),s(253))>>s(525),(eq(100,1),s(254))>>s(526),(eq(100,1),s(255))>>s(527)]

#### Simplifying cost structure of CE 100 
 * Joined equivalent variables [aux(101),s(509)] into aux(101)
 * Renamed intermediate variables: 
[(eq(105,1),s(331))>>s(528),(eq(105,1),s(334))>>s(529),(eq(105,1),s(330))>>s(530),(eq(105,1),s(332))>>s(531),(eq(105,1),s(333))>>s(532),(eq(105,1),aux(91))>>s(533),(eq(105,1),s(335))>>s(534),(eq(105,1),s(336))>>s(535),(eq(105,1),s(337))>>s(536),(eq(105,1),s(338))>>s(537),(eq(105,1),s(339))>>s(538),(eq(105,1),s(340))>>s(539),(eq(105,1),s(341))>>s(540),(eq(105,1),s(342))>>s(541),(eq(105,1),s(343))>>s(542),(eq(105,1),s(344))>>s(543),(eq(105,1),s(345))>>s(544),(eq(105,1),s(346))>>s(545),(eq(105,1),s(347))>>s(546),(eq(105,1),s(348))>>s(547),(eq(105,1),s(349))>>s(548)]

#### Simplifying cost structure of CE 105 
 * Joined equivalent variables [aux(102),s(533)] into aux(102)
 * Joined equivalent variables [aux(102),s(529)] into aux(102)
 * Renamed intermediate variables: 
[(eq(108,1),s(409))>>s(549),(eq(108,1),s(412))>>s(550),(eq(108,1),s(408))>>s(551),(eq(108,1),s(410))>>s(552),(eq(108,1),s(411))>>s(553),(eq(108,1),aux(94))>>s(554),(eq(108,1),s(413))>>s(555),(eq(108,1),s(414))>>s(556),(eq(108,1),s(415))>>s(557),(eq(108,1),s(416))>>s(558),(eq(108,1),s(417))>>s(559),(eq(108,1),s(418))>>s(560),(eq(108,1),s(419))>>s(561),(eq(108,1),s(420))>>s(562),(eq(108,1),s(421))>>s(563),(eq(108,1),s(422))>>s(564),(eq(108,1),s(423))>>s(565),(eq(108,1),s(424))>>s(566),(eq(108,1),s(425))>>s(567),(eq(108,1),s(426))>>s(568),(eq(108,1),s(427))>>s(569)]

#### Simplifying cost structure of CE 108 
 * Joined equivalent variables [aux(103),s(554)] into aux(103)
 * Joined equivalent variables [aux(103),s(550)] into aux(103)
 * Joined equivalent variables [aux(106),aux(101),aux(102),aux(103)] into aux(106)
 * Joined equivalent variables [aux(108),s(510),s(530),s(551)] into aux(108)
 * Joined equivalent variables [aux(109),s(512),s(531),s(552)] into aux(109)
 * Joined equivalent variables [s(508),s(528),s(549)] into s(508)
 * Joined equivalent variables [s(515),s(536),s(557)] into s(515)
 * Joined equivalent variables [s(516),s(537),s(558)] into s(516)
 * Joined equivalent variables [s(514),s(535),s(556)] into s(514)
 * Joined equivalent variables [s(513),s(534),s(555)] into s(513)
 * Joined equivalent variables [s(511),s(532),s(553)] into s(511)
 * Joined equivalent variables [s(518),s(539),s(560)] into s(518)
 * Joined equivalent variables [s(519),s(540),s(561)] into s(519)
 * Joined equivalent variables [s(521),s(542),s(563)] into s(521)
 * Joined equivalent variables [s(522),s(543),s(564)] into s(522)
 * Joined equivalent variables [s(520),s(541),s(562)] into s(520)
 * Joined equivalent variables [s(517),s(538),s(559)] into s(517)
 * Joined equivalent variables [s(523),s(544),s(565)] into s(523)
 * Joined equivalent variables [s(524),s(545),s(566)] into s(524)
 * Joined equivalent variables [s(525),s(546),s(567)] into s(525)
 * Joined equivalent variables [s(527),s(548),s(569)] into s(527)
 * Joined equivalent variables [s(526),s(547),s(568)] into s(526)
 * Renamed intermediate variables: 
[(eq(103,1),s(257))>>s(570),(eq(103,1),s(260))>>s(571),(eq(103,1),s(256))>>s(572),(eq(103,1),s(259))>>s(573),(eq(103,1),s(258))>>s(574),(eq(103,1),s(261))>>s(575),(eq(103,1),s(262))>>s(576),(eq(103,1),s(263))>>s(577),(eq(103,1),s(264))>>s(578),(eq(103,1),s(265))>>s(579),(eq(103,1),s(266))>>s(580),(eq(103,1),s(267))>>s(581),(eq(103,1),s(268))>>s(582),(eq(103,1),s(269))>>s(583),(eq(103,1),s(270))>>s(584),(eq(103,1),s(271))>>s(585),(eq(103,1),s(272))>>s(586),(eq(103,1),s(273))>>s(587),(eq(103,1),s(274))>>s(588),(eq(103,1),s(275))>>s(589),(eq(103,1),s(276))>>s(590),(eq(103,1),s(277))>>s(591),(eq(103,1),s(278))>>s(592),(eq(103,1),s(279))>>s(593),(eq(103,1),s(280))>>s(594),(eq(103,1),s(281))>>s(595),(eq(103,1),s(282))>>s(596),(eq(103,1),s(283))>>s(597),(eq(103,1),s(284))>>s(598)]

#### Simplifying cost structure of CE 103 
 * Joined equivalent variables [aux(110),s(571)] into aux(110)
 * Renamed intermediate variables: 
[(eq(106,1),s(351))>>s(599),(eq(106,1),s(354))>>s(600),(eq(106,1),s(350))>>s(601),(eq(106,1),s(352))>>s(602),(eq(106,1),s(353))>>s(603),(eq(106,1),aux(92))>>s(604),(eq(106,1),s(355))>>s(605),(eq(106,1),s(356))>>s(606),(eq(106,1),s(357))>>s(607),(eq(106,1),s(358))>>s(608),(eq(106,1),s(359))>>s(609),(eq(106,1),s(360))>>s(610),(eq(106,1),s(361))>>s(611),(eq(106,1),s(362))>>s(612),(eq(106,1),s(363))>>s(613),(eq(106,1),s(364))>>s(614),(eq(106,1),s(365))>>s(615),(eq(106,1),s(366))>>s(616),(eq(106,1),s(367))>>s(617),(eq(106,1),s(368))>>s(618),(eq(106,1),s(369))>>s(619),(eq(106,1),s(370))>>s(620),(eq(106,1),s(371))>>s(621),(eq(106,1),s(372))>>s(622),(eq(106,1),s(373))>>s(623),(eq(106,1),s(374))>>s(624),(eq(106,1),s(375))>>s(625),(eq(106,1),s(376))>>s(626),(eq(106,1),s(377))>>s(627),(eq(106,1),s(378))>>s(628)]

#### Simplifying cost structure of CE 106 
 * Joined equivalent variables [aux(111),s(604)] into aux(111)
 * Joined equivalent variables [aux(111),s(600)] into aux(111)
 * Renamed intermediate variables: 
[(eq(109,1),s(429))>>s(629),(eq(109,1),s(432))>>s(630),(eq(109,1),s(428))>>s(631),(eq(109,1),s(430))>>s(632),(eq(109,1),s(431))>>s(633),(eq(109,1),aux(95))>>s(634),(eq(109,1),s(433))>>s(635),(eq(109,1),s(434))>>s(636),(eq(109,1),s(435))>>s(637),(eq(109,1),s(436))>>s(638),(eq(109,1),s(437))>>s(639),(eq(109,1),s(438))>>s(640),(eq(109,1),s(439))>>s(641),(eq(109,1),s(440))>>s(642),(eq(109,1),s(441))>>s(643),(eq(109,1),s(442))>>s(644),(eq(109,1),s(443))>>s(645),(eq(109,1),s(444))>>s(646),(eq(109,1),s(445))>>s(647),(eq(109,1),s(446))>>s(648),(eq(109,1),s(447))>>s(649),(eq(109,1),s(448))>>s(650),(eq(109,1),s(449))>>s(651),(eq(109,1),s(450))>>s(652),(eq(109,1),s(451))>>s(653),(eq(109,1),s(452))>>s(654),(eq(109,1),s(453))>>s(655),(eq(109,1),s(454))>>s(656),(eq(109,1),s(455))>>s(657),(eq(109,1),s(456))>>s(658)]

#### Simplifying cost structure of CE 109 
 * Joined equivalent variables [aux(112),s(634)] into aux(112)
 * Joined equivalent variables [aux(112),s(630)] into aux(112)
 * Joined equivalent variables [aux(115),aux(110),aux(111),aux(112)] into aux(115)
 * Joined equivalent variables [aux(117),s(572),s(601),s(631)] into aux(117)
 * Joined equivalent variables [aux(118),s(574),s(602),s(632)] into aux(118)
 * Joined equivalent variables [s(570),s(599),s(629)] into s(570)
 * Joined equivalent variables [s(578),s(608),s(638)] into s(578)
 * Joined equivalent variables [s(579),s(609),s(639)] into s(579)
 * Joined equivalent variables [s(576),s(606),s(636)] into s(576)
 * Joined equivalent variables [s(591),s(621),s(651)] into s(591)
 * Joined equivalent variables [s(573),s(603),s(633)] into s(573)
 * Joined equivalent variables [s(575),s(605),s(635)] into s(575)
 * Joined equivalent variables [s(581),s(611),s(641)] into s(581)
 * Joined equivalent variables [s(582),s(612),s(642)] into s(582)
 * Joined equivalent variables [s(592),s(622),s(652)] into s(592)
 * Joined equivalent variables [s(593),s(623),s(653)] into s(593)
 * Joined equivalent variables [s(583),s(613),s(643)] into s(583)
 * Joined equivalent variables [s(577),s(607),s(637)] into s(577)
 * Joined equivalent variables [s(584),s(614),s(644)] into s(584)
 * Joined equivalent variables [s(585),s(615),s(645)] into s(585)
 * Joined equivalent variables [s(580),s(610),s(640)] into s(580)
 * Joined equivalent variables [s(594),s(624),s(654)] into s(594)
 * Joined equivalent variables [s(595),s(625),s(655)] into s(595)
 * Joined equivalent variables [s(586),s(616),s(646)] into s(586)
 * Joined equivalent variables [s(587),s(617),s(647)] into s(587)
 * Joined equivalent variables [s(596),s(626),s(656)] into s(596)
 * Joined equivalent variables [s(598),s(628),s(658)] into s(598)
 * Joined equivalent variables [s(588),s(618),s(648)] into s(588)
 * Joined equivalent variables [s(590),s(620),s(650)] into s(590)
 * Joined equivalent variables [s(597),s(627),s(657)] into s(597)
 * Joined equivalent variables [s(589),s(619),s(649)] into s(589)
 * Renamed intermediate variables: 
[(eq(104,1),s(286))>>s(659),(eq(104,1),s(289))>>s(660),(eq(104,1),s(285))>>s(661),(eq(104,1),s(288))>>s(662),(eq(104,1),s(287))>>s(663),(eq(104,1),s(290))>>s(664),(eq(104,1),s(291))>>s(665),(eq(104,1),s(292))>>s(666),(eq(104,1),s(293))>>s(667),(eq(104,1),s(294))>>s(668),(eq(104,1),s(295))>>s(669),(eq(104,1),s(296))>>s(670),(eq(104,1),s(297))>>s(671),(eq(104,1),s(298))>>s(672),(eq(104,1),s(299))>>s(673),(eq(104,1),s(300))>>s(674),(eq(104,1),s(301))>>s(675),(eq(104,1),s(302))>>s(676),(eq(104,1),s(303))>>s(677),(eq(104,1),s(304))>>s(678),(eq(104,1),s(305))>>s(679),(eq(104,1),s(306))>>s(680),(eq(104,1),s(307))>>s(681),(eq(104,1),s(308))>>s(682),(eq(104,1),s(309))>>s(683),(eq(104,1),s(310))>>s(684),(eq(104,1),s(311))>>s(685),(eq(104,1),s(312))>>s(686),(eq(104,1),s(313))>>s(687)]

#### Simplifying cost structure of CE 104 
 * Joined equivalent variables [aux(119),s(660)] into aux(119)
 * Renamed intermediate variables: 
[(eq(107,1),s(380))>>s(688),(eq(107,1),s(383))>>s(689),(eq(107,1),s(379))>>s(690),(eq(107,1),s(381))>>s(691),(eq(107,1),s(382))>>s(692),(eq(107,1),aux(93))>>s(693),(eq(107,1),s(384))>>s(694),(eq(107,1),s(385))>>s(695),(eq(107,1),s(386))>>s(696),(eq(107,1),s(387))>>s(697),(eq(107,1),s(388))>>s(698),(eq(107,1),s(389))>>s(699),(eq(107,1),s(390))>>s(700),(eq(107,1),s(391))>>s(701),(eq(107,1),s(392))>>s(702),(eq(107,1),s(393))>>s(703),(eq(107,1),s(394))>>s(704),(eq(107,1),s(395))>>s(705),(eq(107,1),s(396))>>s(706),(eq(107,1),s(397))>>s(707),(eq(107,1),s(398))>>s(708),(eq(107,1),s(399))>>s(709),(eq(107,1),s(400))>>s(710),(eq(107,1),s(401))>>s(711),(eq(107,1),s(402))>>s(712),(eq(107,1),s(403))>>s(713),(eq(107,1),s(404))>>s(714),(eq(107,1),s(405))>>s(715),(eq(107,1),s(406))>>s(716),(eq(107,1),s(407))>>s(717)]

#### Simplifying cost structure of CE 107 
 * Joined equivalent variables [aux(120),s(693)] into aux(120)
 * Joined equivalent variables [aux(120),s(689)] into aux(120)
 * Renamed intermediate variables: 
[(eq(110,1),s(458))>>s(718),(eq(110,1),s(461))>>s(719),(eq(110,1),s(457))>>s(720),(eq(110,1),s(459))>>s(721),(eq(110,1),s(460))>>s(722),(eq(110,1),aux(96))>>s(723),(eq(110,1),s(462))>>s(724),(eq(110,1),s(463))>>s(725),(eq(110,1),s(464))>>s(726),(eq(110,1),s(465))>>s(727),(eq(110,1),s(466))>>s(728),(eq(110,1),s(467))>>s(729),(eq(110,1),s(468))>>s(730),(eq(110,1),s(469))>>s(731),(eq(110,1),s(470))>>s(732),(eq(110,1),s(471))>>s(733),(eq(110,1),s(472))>>s(734),(eq(110,1),s(473))>>s(735),(eq(110,1),s(474))>>s(736),(eq(110,1),s(475))>>s(737),(eq(110,1),s(476))>>s(738),(eq(110,1),s(477))>>s(739),(eq(110,1),s(478))>>s(740),(eq(110,1),s(479))>>s(741),(eq(110,1),s(480))>>s(742),(eq(110,1),s(481))>>s(743),(eq(110,1),s(482))>>s(744),(eq(110,1),s(483))>>s(745),(eq(110,1),s(484))>>s(746),(eq(110,1),s(485))>>s(747)]

#### Simplifying cost structure of CE 110 
 * Joined equivalent variables [aux(121),s(723)] into aux(121)
 * Joined equivalent variables [aux(121),s(719)] into aux(121)
 * Joined equivalent variables [aux(124),aux(119),aux(120),aux(121)] into aux(124)
 * Joined equivalent variables [aux(126),s(661),s(690),s(720)] into aux(126)
 * Joined equivalent variables [aux(127),s(663),s(691),s(721)] into aux(127)
 * Joined equivalent variables [s(659),s(688),s(718)] into s(659)
 * Joined equivalent variables [s(667),s(697),s(727)] into s(667)
 * Joined equivalent variables [s(668),s(698),s(728)] into s(668)
 * Joined equivalent variables [s(665),s(695),s(725)] into s(665)
 * Joined equivalent variables [s(680),s(710),s(740)] into s(680)
 * Joined equivalent variables [s(662),s(692),s(722)] into s(662)
 * Joined equivalent variables [s(664),s(694),s(724)] into s(664)
 * Joined equivalent variables [s(670),s(700),s(730)] into s(670)
 * Joined equivalent variables [s(671),s(701),s(731)] into s(671)
 * Joined equivalent variables [s(681),s(711),s(741)] into s(681)
 * Joined equivalent variables [s(682),s(712),s(742)] into s(682)
 * Joined equivalent variables [s(672),s(702),s(732)] into s(672)
 * Joined equivalent variables [s(666),s(696),s(726)] into s(666)
 * Joined equivalent variables [s(673),s(703),s(733)] into s(673)
 * Joined equivalent variables [s(674),s(704),s(734)] into s(674)
 * Joined equivalent variables [s(669),s(699),s(729)] into s(669)
 * Joined equivalent variables [s(683),s(713),s(743)] into s(683)
 * Joined equivalent variables [s(684),s(714),s(744)] into s(684)
 * Joined equivalent variables [s(675),s(705),s(735)] into s(675)
 * Joined equivalent variables [s(676),s(706),s(736)] into s(676)
 * Joined equivalent variables [s(685),s(715),s(745)] into s(685)
 * Joined equivalent variables [s(687),s(717),s(747)] into s(687)
 * Joined equivalent variables [s(677),s(707),s(737)] into s(677)
 * Joined equivalent variables [s(679),s(709),s(739)] into s(679)
 * Joined equivalent variables [s(686),s(716),s(746)] into s(686)
 * Joined equivalent variables [s(678),s(708),s(738)] into s(678)
 * Renamed intermediate variables: 
[(eq(78,1),s(228))>>s(748)]

#### Simplifying cost structure of CE 78 
 * Renamed intermediate variables: 
[(eq(81,1),s(230))>>s(749),(eq(81,1),s(231))>>s(750),(eq(81,1),s(229))>>s(751),(eq(81,1),s(232))>>s(752),(eq(81,1),s(233))>>s(753)]

#### Simplifying cost structure of CE 81 
 * Renamed intermediate variables: 
[(eq(90,1),s(314))>>s(754)]

#### Simplifying cost structure of CE 90 
 * Renamed intermediate variables: 
[(eq(94,1),s(322))>>s(755)]

#### Simplifying cost structure of CE 94 
 * Joined equivalent variables [s(754),s(755)] into s(754)
 * Renamed intermediate variables: 
[(eq(91,1),s(317))>>s(756),(eq(91,1),aux(89))>>s(757),(eq(91,1),s(318))>>s(758),(eq(91,1),s(320))>>s(759)]

#### Simplifying cost structure of CE 91 
 * Renamed intermediate variables: 
[(eq(95,1),s(325))>>s(760),(eq(95,1),aux(90))>>s(761),(eq(95,1),s(326))>>s(762),(eq(95,1),s(328))>>s(763)]

#### Simplifying cost structure of CE 95 
 * Joined equivalent variables [aux(129),s(757),s(761)] into aux(129)
 * Joined equivalent variables [aux(130),s(756),s(760)] into aux(130)
 * Joined equivalent variables [s(758),s(762)] into s(758)
 * Joined equivalent variables [s(759),s(763)] into s(759)

#### Simplifying cost structure of CE 92 

#### Simplifying cost structure of CE 96 

#### Simplifying cost structure of CE 77 
 * Renamed intermediate variables: 
[(eq(93,1),s(315))>>s(764),(eq(93,1),s(316))>>s(765)]

#### Simplifying cost structure of CE 93 
 * Renamed intermediate variables: 
[(eq(97,1),s(323))>>s(766),(eq(97,1),s(324))>>s(767)]

#### Simplifying cost structure of CE 97 
 * Joined equivalent variables [aux(131),s(764),s(766)] into aux(131)
 * Joined equivalent variables [s(765),s(767)] into s(765)
 * Renamed intermediate variables: 
[(eq(80,1),s(234))>>s(768),(eq(80,1),s(235))>>s(769)]

#### Simplifying cost structure of CE 80 
 * Renamed intermediate variables: 
[(eq(79,1),s(237))>>s(770),(eq(79,1),s(240))>>s(771),(eq(79,1),s(236))>>s(772),(eq(79,1),s(239))>>s(773),(eq(79,1),s(238))>>s(774),(eq(79,1),s(241))>>s(775),(eq(79,1),s(242))>>s(776),(eq(79,1),s(243))>>s(777),(eq(79,1),s(244))>>s(778),(eq(79,1),s(245))>>s(779),(eq(79,1),s(246))>>s(780),(eq(79,1),s(247))>>s(781),(eq(79,1),s(248))>>s(782),(eq(79,1),s(249))>>s(783),(eq(79,1),s(250))>>s(784),(eq(79,1),s(251))>>s(785),(eq(79,1),s(252))>>s(786),(eq(79,1),s(253))>>s(787),(eq(79,1),s(254))>>s(788),(eq(79,1),s(255))>>s(789)]

#### Simplifying cost structure of CE 79 
 * Joined equivalent variables [aux(132),s(771)] into aux(132)
 * Renamed intermediate variables: 
[(eq(84,1),s(331))>>s(790),(eq(84,1),s(334))>>s(791),(eq(84,1),s(330))>>s(792),(eq(84,1),s(332))>>s(793),(eq(84,1),s(333))>>s(794),(eq(84,1),aux(91))>>s(795),(eq(84,1),s(335))>>s(796),(eq(84,1),s(336))>>s(797),(eq(84,1),s(337))>>s(798),(eq(84,1),s(338))>>s(799),(eq(84,1),s(339))>>s(800),(eq(84,1),s(340))>>s(801),(eq(84,1),s(341))>>s(802),(eq(84,1),s(342))>>s(803),(eq(84,1),s(343))>>s(804),(eq(84,1),s(344))>>s(805),(eq(84,1),s(345))>>s(806),(eq(84,1),s(346))>>s(807),(eq(84,1),s(347))>>s(808),(eq(84,1),s(348))>>s(809),(eq(84,1),s(349))>>s(810)]

#### Simplifying cost structure of CE 84 
 * Joined equivalent variables [aux(133),s(795)] into aux(133)
 * Joined equivalent variables [aux(133),s(791)] into aux(133)
 * Renamed intermediate variables: 
[(eq(87,1),s(409))>>s(811),(eq(87,1),s(412))>>s(812),(eq(87,1),s(408))>>s(813),(eq(87,1),s(410))>>s(814),(eq(87,1),s(411))>>s(815),(eq(87,1),aux(94))>>s(816),(eq(87,1),s(413))>>s(817),(eq(87,1),s(414))>>s(818),(eq(87,1),s(415))>>s(819),(eq(87,1),s(416))>>s(820),(eq(87,1),s(417))>>s(821),(eq(87,1),s(418))>>s(822),(eq(87,1),s(419))>>s(823),(eq(87,1),s(420))>>s(824),(eq(87,1),s(421))>>s(825),(eq(87,1),s(422))>>s(826),(eq(87,1),s(423))>>s(827),(eq(87,1),s(424))>>s(828),(eq(87,1),s(425))>>s(829),(eq(87,1),s(426))>>s(830),(eq(87,1),s(427))>>s(831)]

#### Simplifying cost structure of CE 87 
 * Joined equivalent variables [aux(134),s(816)] into aux(134)
 * Joined equivalent variables [aux(134),s(812)] into aux(134)
 * Joined equivalent variables [aux(137),aux(132),aux(133),aux(134)] into aux(137)
 * Joined equivalent variables [aux(139),s(772),s(792),s(813)] into aux(139)
 * Joined equivalent variables [aux(140),s(774),s(793),s(814)] into aux(140)
 * Joined equivalent variables [s(770),s(790),s(811)] into s(770)
 * Joined equivalent variables [s(777),s(798),s(819)] into s(777)
 * Joined equivalent variables [s(778),s(799),s(820)] into s(778)
 * Joined equivalent variables [s(776),s(797),s(818)] into s(776)
 * Joined equivalent variables [s(775),s(796),s(817)] into s(775)
 * Joined equivalent variables [s(773),s(794),s(815)] into s(773)
 * Joined equivalent variables [s(780),s(801),s(822)] into s(780)
 * Joined equivalent variables [s(781),s(802),s(823)] into s(781)
 * Joined equivalent variables [s(783),s(804),s(825)] into s(783)
 * Joined equivalent variables [s(784),s(805),s(826)] into s(784)
 * Joined equivalent variables [s(782),s(803),s(824)] into s(782)
 * Joined equivalent variables [s(779),s(800),s(821)] into s(779)
 * Joined equivalent variables [s(785),s(806),s(827)] into s(785)
 * Joined equivalent variables [s(786),s(807),s(828)] into s(786)
 * Joined equivalent variables [s(787),s(808),s(829)] into s(787)
 * Joined equivalent variables [s(789),s(810),s(831)] into s(789)
 * Joined equivalent variables [s(788),s(809),s(830)] into s(788)
 * Renamed intermediate variables: 
[(eq(82,1),s(257))>>s(832),(eq(82,1),s(260))>>s(833),(eq(82,1),s(256))>>s(834),(eq(82,1),s(259))>>s(835),(eq(82,1),s(258))>>s(836),(eq(82,1),s(261))>>s(837),(eq(82,1),s(262))>>s(838),(eq(82,1),s(263))>>s(839),(eq(82,1),s(264))>>s(840),(eq(82,1),s(265))>>s(841),(eq(82,1),s(266))>>s(842),(eq(82,1),s(267))>>s(843),(eq(82,1),s(268))>>s(844),(eq(82,1),s(269))>>s(845),(eq(82,1),s(270))>>s(846),(eq(82,1),s(271))>>s(847),(eq(82,1),s(272))>>s(848),(eq(82,1),s(273))>>s(849),(eq(82,1),s(274))>>s(850),(eq(82,1),s(275))>>s(851),(eq(82,1),s(276))>>s(852),(eq(82,1),s(277))>>s(853),(eq(82,1),s(278))>>s(854),(eq(82,1),s(279))>>s(855),(eq(82,1),s(280))>>s(856),(eq(82,1),s(281))>>s(857),(eq(82,1),s(282))>>s(858),(eq(82,1),s(283))>>s(859),(eq(82,1),s(284))>>s(860)]

#### Simplifying cost structure of CE 82 
 * Joined equivalent variables [aux(141),s(833)] into aux(141)
 * Renamed intermediate variables: 
[(eq(85,1),s(351))>>s(861),(eq(85,1),s(354))>>s(862),(eq(85,1),s(350))>>s(863),(eq(85,1),s(352))>>s(864),(eq(85,1),s(353))>>s(865),(eq(85,1),aux(92))>>s(866),(eq(85,1),s(355))>>s(867),(eq(85,1),s(356))>>s(868),(eq(85,1),s(357))>>s(869),(eq(85,1),s(358))>>s(870),(eq(85,1),s(359))>>s(871),(eq(85,1),s(360))>>s(872),(eq(85,1),s(361))>>s(873),(eq(85,1),s(362))>>s(874),(eq(85,1),s(363))>>s(875),(eq(85,1),s(364))>>s(876),(eq(85,1),s(365))>>s(877),(eq(85,1),s(366))>>s(878),(eq(85,1),s(367))>>s(879),(eq(85,1),s(368))>>s(880),(eq(85,1),s(369))>>s(881),(eq(85,1),s(370))>>s(882),(eq(85,1),s(371))>>s(883),(eq(85,1),s(372))>>s(884),(eq(85,1),s(373))>>s(885),(eq(85,1),s(374))>>s(886),(eq(85,1),s(375))>>s(887),(eq(85,1),s(376))>>s(888),(eq(85,1),s(377))>>s(889),(eq(85,1),s(378))>>s(890)]

#### Simplifying cost structure of CE 85 
 * Joined equivalent variables [aux(142),s(866)] into aux(142)
 * Joined equivalent variables [aux(142),s(862)] into aux(142)
 * Renamed intermediate variables: 
[(eq(88,1),s(429))>>s(891),(eq(88,1),s(432))>>s(892),(eq(88,1),s(428))>>s(893),(eq(88,1),s(430))>>s(894),(eq(88,1),s(431))>>s(895),(eq(88,1),aux(95))>>s(896),(eq(88,1),s(433))>>s(897),(eq(88,1),s(434))>>s(898),(eq(88,1),s(435))>>s(899),(eq(88,1),s(436))>>s(900),(eq(88,1),s(437))>>s(901),(eq(88,1),s(438))>>s(902),(eq(88,1),s(439))>>s(903),(eq(88,1),s(440))>>s(904),(eq(88,1),s(441))>>s(905),(eq(88,1),s(442))>>s(906),(eq(88,1),s(443))>>s(907),(eq(88,1),s(444))>>s(908),(eq(88,1),s(445))>>s(909),(eq(88,1),s(446))>>s(910),(eq(88,1),s(447))>>s(911),(eq(88,1),s(448))>>s(912),(eq(88,1),s(449))>>s(913),(eq(88,1),s(450))>>s(914),(eq(88,1),s(451))>>s(915),(eq(88,1),s(452))>>s(916),(eq(88,1),s(453))>>s(917),(eq(88,1),s(454))>>s(918),(eq(88,1),s(455))>>s(919),(eq(88,1),s(456))>>s(920)]

#### Simplifying cost structure of CE 88 
 * Joined equivalent variables [aux(143),s(896)] into aux(143)
 * Joined equivalent variables [aux(143),s(892)] into aux(143)
 * Joined equivalent variables [aux(146),aux(141),aux(142),aux(143)] into aux(146)
 * Joined equivalent variables [aux(148),s(834),s(863),s(893)] into aux(148)
 * Joined equivalent variables [aux(149),s(836),s(864),s(894)] into aux(149)
 * Joined equivalent variables [s(832),s(861),s(891)] into s(832)
 * Joined equivalent variables [s(840),s(870),s(900)] into s(840)
 * Joined equivalent variables [s(841),s(871),s(901)] into s(841)
 * Joined equivalent variables [s(838),s(868),s(898)] into s(838)
 * Joined equivalent variables [s(853),s(883),s(913)] into s(853)
 * Joined equivalent variables [s(835),s(865),s(895)] into s(835)
 * Joined equivalent variables [s(837),s(867),s(897)] into s(837)
 * Joined equivalent variables [s(843),s(873),s(903)] into s(843)
 * Joined equivalent variables [s(844),s(874),s(904)] into s(844)
 * Joined equivalent variables [s(854),s(884),s(914)] into s(854)
 * Joined equivalent variables [s(855),s(885),s(915)] into s(855)
 * Joined equivalent variables [s(845),s(875),s(905)] into s(845)
 * Joined equivalent variables [s(839),s(869),s(899)] into s(839)
 * Joined equivalent variables [s(846),s(876),s(906)] into s(846)
 * Joined equivalent variables [s(847),s(877),s(907)] into s(847)
 * Joined equivalent variables [s(842),s(872),s(902)] into s(842)
 * Joined equivalent variables [s(856),s(886),s(916)] into s(856)
 * Joined equivalent variables [s(857),s(887),s(917)] into s(857)
 * Joined equivalent variables [s(848),s(878),s(908)] into s(848)
 * Joined equivalent variables [s(849),s(879),s(909)] into s(849)
 * Joined equivalent variables [s(858),s(888),s(918)] into s(858)
 * Joined equivalent variables [s(860),s(890),s(920)] into s(860)
 * Joined equivalent variables [s(850),s(880),s(910)] into s(850)
 * Joined equivalent variables [s(852),s(882),s(912)] into s(852)
 * Joined equivalent variables [s(859),s(889),s(919)] into s(859)
 * Joined equivalent variables [s(851),s(881),s(911)] into s(851)
 * Renamed intermediate variables: 
[(eq(83,1),s(286))>>s(921),(eq(83,1),s(289))>>s(922),(eq(83,1),s(285))>>s(923),(eq(83,1),s(288))>>s(924),(eq(83,1),s(287))>>s(925),(eq(83,1),s(290))>>s(926),(eq(83,1),s(291))>>s(927),(eq(83,1),s(292))>>s(928),(eq(83,1),s(293))>>s(929),(eq(83,1),s(294))>>s(930),(eq(83,1),s(295))>>s(931),(eq(83,1),s(296))>>s(932),(eq(83,1),s(297))>>s(933),(eq(83,1),s(298))>>s(934),(eq(83,1),s(299))>>s(935),(eq(83,1),s(300))>>s(936),(eq(83,1),s(301))>>s(937),(eq(83,1),s(302))>>s(938),(eq(83,1),s(303))>>s(939),(eq(83,1),s(304))>>s(940),(eq(83,1),s(305))>>s(941),(eq(83,1),s(306))>>s(942),(eq(83,1),s(307))>>s(943),(eq(83,1),s(308))>>s(944),(eq(83,1),s(309))>>s(945),(eq(83,1),s(310))>>s(946),(eq(83,1),s(311))>>s(947),(eq(83,1),s(312))>>s(948),(eq(83,1),s(313))>>s(949)]

#### Simplifying cost structure of CE 83 
 * Joined equivalent variables [aux(150),s(922)] into aux(150)
 * Renamed intermediate variables: 
[(eq(86,1),s(380))>>s(950),(eq(86,1),s(383))>>s(951),(eq(86,1),s(379))>>s(952),(eq(86,1),s(381))>>s(953),(eq(86,1),s(382))>>s(954),(eq(86,1),aux(93))>>s(955),(eq(86,1),s(384))>>s(956),(eq(86,1),s(385))>>s(957),(eq(86,1),s(386))>>s(958),(eq(86,1),s(387))>>s(959),(eq(86,1),s(388))>>s(960),(eq(86,1),s(389))>>s(961),(eq(86,1),s(390))>>s(962),(eq(86,1),s(391))>>s(963),(eq(86,1),s(392))>>s(964),(eq(86,1),s(393))>>s(965),(eq(86,1),s(394))>>s(966),(eq(86,1),s(395))>>s(967),(eq(86,1),s(396))>>s(968),(eq(86,1),s(397))>>s(969),(eq(86,1),s(398))>>s(970),(eq(86,1),s(399))>>s(971),(eq(86,1),s(400))>>s(972),(eq(86,1),s(401))>>s(973),(eq(86,1),s(402))>>s(974),(eq(86,1),s(403))>>s(975),(eq(86,1),s(404))>>s(976),(eq(86,1),s(405))>>s(977),(eq(86,1),s(406))>>s(978),(eq(86,1),s(407))>>s(979)]

#### Simplifying cost structure of CE 86 
 * Joined equivalent variables [aux(151),s(955)] into aux(151)
 * Joined equivalent variables [aux(151),s(951)] into aux(151)
 * Renamed intermediate variables: 
[(eq(89,1),s(458))>>s(980),(eq(89,1),s(461))>>s(981),(eq(89,1),s(457))>>s(982),(eq(89,1),s(459))>>s(983),(eq(89,1),s(460))>>s(984),(eq(89,1),aux(96))>>s(985),(eq(89,1),s(462))>>s(986),(eq(89,1),s(463))>>s(987),(eq(89,1),s(464))>>s(988),(eq(89,1),s(465))>>s(989),(eq(89,1),s(466))>>s(990),(eq(89,1),s(467))>>s(991),(eq(89,1),s(468))>>s(992),(eq(89,1),s(469))>>s(993),(eq(89,1),s(470))>>s(994),(eq(89,1),s(471))>>s(995),(eq(89,1),s(472))>>s(996),(eq(89,1),s(473))>>s(997),(eq(89,1),s(474))>>s(998),(eq(89,1),s(475))>>s(999),(eq(89,1),s(476))>>s(1000),(eq(89,1),s(477))>>s(1001),(eq(89,1),s(478))>>s(1002),(eq(89,1),s(479))>>s(1003),(eq(89,1),s(480))>>s(1004),(eq(89,1),s(481))>>s(1005),(eq(89,1),s(482))>>s(1006),(eq(89,1),s(483))>>s(1007),(eq(89,1),s(484))>>s(1008),(eq(89,1),s(485))>>s(1009)]

#### Simplifying cost structure of CE 89 
 * Joined equivalent variables [aux(152),s(985)] into aux(152)
 * Joined equivalent variables [aux(152),s(981)] into aux(152)
 * Joined equivalent variables [aux(155),aux(150),aux(151),aux(152)] into aux(155)
 * Joined equivalent variables [aux(157),s(923),s(952),s(982)] into aux(157)
 * Joined equivalent variables [aux(158),s(925),s(953),s(983)] into aux(158)
 * Joined equivalent variables [s(921),s(950),s(980)] into s(921)
 * Joined equivalent variables [s(929),s(959),s(989)] into s(929)
 * Joined equivalent variables [s(930),s(960),s(990)] into s(930)
 * Joined equivalent variables [s(927),s(957),s(987)] into s(927)
 * Joined equivalent variables [s(942),s(972),s(1002)] into s(942)
 * Joined equivalent variables [s(924),s(954),s(984)] into s(924)
 * Joined equivalent variables [s(926),s(956),s(986)] into s(926)
 * Joined equivalent variables [s(932),s(962),s(992)] into s(932)
 * Joined equivalent variables [s(933),s(963),s(993)] into s(933)
 * Joined equivalent variables [s(943),s(973),s(1003)] into s(943)
 * Joined equivalent variables [s(944),s(974),s(1004)] into s(944)
 * Joined equivalent variables [s(934),s(964),s(994)] into s(934)
 * Joined equivalent variables [s(928),s(958),s(988)] into s(928)
 * Joined equivalent variables [s(935),s(965),s(995)] into s(935)
 * Joined equivalent variables [s(936),s(966),s(996)] into s(936)
 * Joined equivalent variables [s(931),s(961),s(991)] into s(931)
 * Joined equivalent variables [s(945),s(975),s(1005)] into s(945)
 * Joined equivalent variables [s(946),s(976),s(1006)] into s(946)
 * Joined equivalent variables [s(937),s(967),s(997)] into s(937)
 * Joined equivalent variables [s(938),s(968),s(998)] into s(938)
 * Joined equivalent variables [s(947),s(977),s(1007)] into s(947)
 * Joined equivalent variables [s(949),s(979),s(1009)] into s(949)
 * Joined equivalent variables [s(939),s(969),s(999)] into s(939)
 * Joined equivalent variables [s(941),s(971),s(1001)] into s(941)
 * Joined equivalent variables [s(948),s(978),s(1008)] into s(948)
 * Joined equivalent variables [s(940),s(970),s(1000)] into s(940)

#### Cost of chains of eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B):
* Chain [91]: 0
  with precondition: [V_7=0] 

* Chain [90]: 1*s(486)+2
  Such that:s(486) =< -V_s+V_pos_1

  with precondition: [0>=V_7+1,V_pos_1>=V_s+1,V_pos_1+1>=V_PL_bufend] 

* Chain [89]: 1*s(487)+3*s(490)+2*s(491)+5
  Such that:s(487) =< -V_s+V_pos_1
s(488) =< -V_s+V_pos_1+1
s(489) =< V_PL_bufend-V_pos_1
s(490) =< s(489)
s(491) =< s(488)

  with precondition: [0>=V_7+1,V_pos_1>=V_s+1,V_PL_bufend>=V_pos_1+2] 

* Chain [88]: 2*s(492)+2
  Such that:aux(97) =< -V_s+V_pos_1
s(492) =< aux(97)

  with precondition: [0>=V_7+1,V_pos_1>=V_s+2,V_pos_1+1>=V_PL_bufend] 

* Chain [87]: 6*s(496)+6*s(497)+5
  Such that:aux(98) =< -V_s+V_pos_1
aux(99) =< V_PL_bufend-V_pos_1
s(496) =< aux(98)
s(497) =< aux(99)

  with precondition: [0>=V_7+1,V_pos_1>=V_s+2,V_PL_bufend>=V_pos_1+2] 

* Chain [86]: 2
  with precondition: [0>=V_7+1,V_pos_1+1>=V_PL_bufend,V_s+1>=V_pos_1] 

* Chain [85]: 2
  with precondition: [0>=V_7+1,V_pos_1+1>=V_PL_bufend,V_s>=V_pos_1] 

* Chain [84]: 6*s(503)+5
  Such that:aux(100) =< V_PL_bufend-V_pos_1
s(503) =< aux(100)

  with precondition: [0>=V_7+1,V_s+1>=V_pos_1,V_PL_bufend>=V_pos_1+2] 

* Chain [83]: 3*s(507)+5
  Such that:s(506) =< V_PL_bufend-V_pos_1
s(507) =< s(506)

  with precondition: [0>=V_7+1,V_s>=V_pos_1,V_PL_bufend>=V_pos_1+2] 

* Chain [82]: 18*s(513)+30*s(514)+6*s(526)+6*s(527)+2
  Such that:aux(104) =< -2*V_s+2*V_PL_bufend
aux(105) =< -2*V_s+2*V_pos_1
aux(106) =< -V_s+V_PL_bufend
aux(107) =< -V_s+V_pos_1
aux(108) =< V_PL_bufend-V_pos_1
aux(109) =< V_PL_bufend/2-V_pos_1/2
s(508) =< aux(104)
s(508) =< aux(105)
s(511) =< aux(107)
s(511) =< aux(106)
s(513) =< aux(108)
s(514) =< aux(108)
s(513) =< aux(109)
s(515) =< aux(108)
s(516) =< aux(108)-2
s(517) =< max([aux(106),s(515),s(515)])
s(518) =< s(514)*s(515)
s(519) =< s(514)*s(516)
s(520) =< max([s(511),aux(108),0])+aux(108)
s(521) =< s(513)*s(515)
s(522) =< s(513)*s(516)
s(517) =< s(520)+1
s(523) =< s(521)*2
s(524) =< s(519)+s(522)+aux(106)
s(524) =< s(513)*s(520)
s(525) =< s(518)+s(521)+aux(106)
s(525) =< s(523)+s(523)+s(508)
s(525) =< s(514)*s(517)
s(526) =< s(525)
s(527) =< s(524)

  with precondition: [0>=V_7+1,V_PL_bufend>=V_pos_1+2] 

* Chain [81]: 102*s(576)+18*s(577)+6*s(589)+6*s(590)+36*s(591)+12*s(597)+12*s(598)+5
  Such that:aux(113) =< -2*V_s+2*V_PL_bufend
aux(114) =< -2*V_s+2*V_pos_1
aux(115) =< -V_s+V_PL_bufend
aux(116) =< -V_s+V_pos_1
aux(117) =< V_PL_bufend-V_pos_1
aux(118) =< V_PL_bufend/2-V_pos_1/2
s(570) =< aux(113)
s(570) =< aux(114)
s(573) =< aux(116)
s(573) =< aux(115)
s(575) =< aux(117)
s(575) =< aux(118)
s(576) =< aux(117)
s(577) =< aux(117)
s(577) =< aux(118)
s(577) =< s(575)
s(578) =< aux(117)
s(579) =< aux(117)-2
s(580) =< max([aux(115),s(578),s(578)])
s(581) =< s(576)*s(578)
s(582) =< s(576)*s(579)
s(583) =< max([s(573),aux(117),0])+aux(117)
s(584) =< s(577)*s(578)
s(585) =< s(577)*s(579)
s(580) =< s(583)+1
s(586) =< s(584)*2
s(587) =< s(582)+s(585)+aux(115)
s(587) =< s(577)*s(583)
s(588) =< s(581)+s(584)+aux(115)
s(588) =< s(586)+s(586)+s(570)
s(588) =< s(576)*s(580)
s(589) =< s(588)
s(590) =< s(587)
s(591) =< aux(117)
s(591) =< aux(118)
s(592) =< s(591)*s(578)
s(593) =< s(591)*s(579)
s(594) =< s(592)*2
s(595) =< s(582)+s(593)+aux(115)
s(595) =< s(591)*s(583)
s(596) =< s(581)+s(592)+aux(115)
s(596) =< s(594)+s(594)+s(570)
s(596) =< s(576)*s(580)
s(597) =< s(596)
s(598) =< s(595)

  with precondition: [0>=V_7+1,V_PL_bufend>=V_pos_1+3] 

* Chain [80]: 78*s(665)+18*s(666)+6*s(678)+6*s(679)+18*s(680)+6*s(686)+6*s(687)+5
  Such that:aux(122) =< -2*V_s+2*V_PL_bufend
aux(123) =< -2*V_s+2*V_pos_1
aux(124) =< -V_s+V_PL_bufend
aux(125) =< -V_s+V_pos_1
aux(126) =< V_PL_bufend-V_pos_1
aux(127) =< V_PL_bufend/2-V_pos_1/2
s(659) =< aux(122)
s(659) =< aux(123)
s(662) =< aux(125)
s(662) =< aux(124)
s(664) =< aux(126)
s(664) =< aux(127)
s(665) =< aux(126)
s(666) =< aux(126)
s(666) =< aux(127)
s(666) =< s(664)
s(667) =< aux(126)
s(668) =< aux(126)-2
s(669) =< max([aux(124),s(667),s(667)])
s(670) =< s(665)*s(667)
s(671) =< s(665)*s(668)
s(672) =< max([s(662),aux(126),0])+aux(126)
s(673) =< s(666)*s(667)
s(674) =< s(666)*s(668)
s(669) =< s(672)+1
s(675) =< s(673)*2
s(676) =< s(671)+s(674)+aux(124)
s(676) =< s(666)*s(672)
s(677) =< s(670)+s(673)+aux(124)
s(677) =< s(675)+s(675)+s(659)
s(677) =< s(665)*s(669)
s(678) =< s(677)
s(679) =< s(676)
s(680) =< aux(126)
s(680) =< aux(127)
s(681) =< s(680)*s(667)
s(682) =< s(680)*s(668)
s(683) =< s(681)*2
s(684) =< s(671)+s(682)+aux(124)
s(684) =< s(680)*s(672)
s(685) =< s(670)+s(681)+aux(124)
s(685) =< s(683)+s(683)+s(659)
s(685) =< s(665)*s(669)
s(686) =< s(685)
s(687) =< s(684)

  with precondition: [0>=V_7+1,V_PL_bufend>=V_pos_1+4] 

* Chain [79]: 1*s(748)+2
  Such that:s(748) =< -V_s+V_pos_1

  with precondition: [V_7>=1,V_pos_1>=V_s+1,V_pos_1+1>=V_PL_bufend] 

* Chain [78]: 1*s(749)+3*s(752)+2*s(753)+5
  Such that:s(749) =< -V_s+V_pos_1
s(750) =< -V_s+V_pos_1+1
s(751) =< V_PL_bufend-V_pos_1
s(752) =< s(751)
s(753) =< s(750)

  with precondition: [V_7>=1,V_pos_1>=V_s+1,V_PL_bufend>=V_pos_1+2] 

* Chain [77]: 2*s(754)+2
  Such that:aux(128) =< -V_s+V_pos_1
s(754) =< aux(128)

  with precondition: [V_7>=1,V_pos_1>=V_s+2,V_pos_1+1>=V_PL_bufend] 

* Chain [76]: 6*s(758)+6*s(759)+5
  Such that:aux(129) =< -V_s+V_pos_1
aux(130) =< V_PL_bufend-V_pos_1
s(758) =< aux(129)
s(759) =< aux(130)

  with precondition: [V_7>=1,V_pos_1>=V_s+2,V_PL_bufend>=V_pos_1+2] 

* Chain [75]: 2
  with precondition: [V_7>=1,V_pos_1+1>=V_PL_bufend,V_s+1>=V_pos_1] 

* Chain [74]: 2
  with precondition: [V_7>=1,V_pos_1+1>=V_PL_bufend,V_s>=V_pos_1] 

* Chain [73]: 6*s(765)+5
  Such that:aux(131) =< V_PL_bufend-V_pos_1
s(765) =< aux(131)

  with precondition: [V_7>=1,V_s+1>=V_pos_1,V_PL_bufend>=V_pos_1+2] 

* Chain [72]: 3*s(769)+5
  Such that:s(768) =< V_PL_bufend-V_pos_1
s(769) =< s(768)

  with precondition: [V_7>=1,V_s>=V_pos_1,V_PL_bufend>=V_pos_1+2] 

* Chain [71]: 18*s(775)+30*s(776)+6*s(788)+6*s(789)+2
  Such that:aux(135) =< -2*V_s+2*V_PL_bufend
aux(136) =< -2*V_s+2*V_pos_1
aux(137) =< -V_s+V_PL_bufend
aux(138) =< -V_s+V_pos_1
aux(139) =< V_PL_bufend-V_pos_1
aux(140) =< V_PL_bufend/2-V_pos_1/2
s(770) =< aux(135)
s(770) =< aux(136)
s(773) =< aux(138)
s(773) =< aux(137)
s(775) =< aux(139)
s(776) =< aux(139)
s(775) =< aux(140)
s(777) =< aux(139)
s(778) =< aux(139)-2
s(779) =< max([aux(137),s(777),s(777)])
s(780) =< s(776)*s(777)
s(781) =< s(776)*s(778)
s(782) =< max([s(773),aux(139),0])+aux(139)
s(783) =< s(775)*s(777)
s(784) =< s(775)*s(778)
s(779) =< s(782)+1
s(785) =< s(783)*2
s(786) =< s(781)+s(784)+aux(137)
s(786) =< s(775)*s(782)
s(787) =< s(780)+s(783)+aux(137)
s(787) =< s(785)+s(785)+s(770)
s(787) =< s(776)*s(779)
s(788) =< s(787)
s(789) =< s(786)

  with precondition: [V_7>=1,V_PL_bufend>=V_pos_1+2] 

* Chain [70]: 102*s(838)+18*s(839)+6*s(851)+6*s(852)+36*s(853)+12*s(859)+12*s(860)+5
  Such that:aux(144) =< -2*V_s+2*V_PL_bufend
aux(145) =< -2*V_s+2*V_pos_1
aux(146) =< -V_s+V_PL_bufend
aux(147) =< -V_s+V_pos_1
aux(148) =< V_PL_bufend-V_pos_1
aux(149) =< V_PL_bufend/2-V_pos_1/2
s(832) =< aux(144)
s(832) =< aux(145)
s(835) =< aux(147)
s(835) =< aux(146)
s(837) =< aux(148)
s(837) =< aux(149)
s(838) =< aux(148)
s(839) =< aux(148)
s(839) =< aux(149)
s(839) =< s(837)
s(840) =< aux(148)
s(841) =< aux(148)-2
s(842) =< max([aux(146),s(840),s(840)])
s(843) =< s(838)*s(840)
s(844) =< s(838)*s(841)
s(845) =< max([s(835),aux(148),0])+aux(148)
s(846) =< s(839)*s(840)
s(847) =< s(839)*s(841)
s(842) =< s(845)+1
s(848) =< s(846)*2
s(849) =< s(844)+s(847)+aux(146)
s(849) =< s(839)*s(845)
s(850) =< s(843)+s(846)+aux(146)
s(850) =< s(848)+s(848)+s(832)
s(850) =< s(838)*s(842)
s(851) =< s(850)
s(852) =< s(849)
s(853) =< aux(148)
s(853) =< aux(149)
s(854) =< s(853)*s(840)
s(855) =< s(853)*s(841)
s(856) =< s(854)*2
s(857) =< s(844)+s(855)+aux(146)
s(857) =< s(853)*s(845)
s(858) =< s(843)+s(854)+aux(146)
s(858) =< s(856)+s(856)+s(832)
s(858) =< s(838)*s(842)
s(859) =< s(858)
s(860) =< s(857)

  with precondition: [V_7>=1,V_PL_bufend>=V_pos_1+3] 

* Chain [69]: 78*s(927)+18*s(928)+6*s(940)+6*s(941)+18*s(942)+6*s(948)+6*s(949)+5
  Such that:aux(153) =< -2*V_s+2*V_PL_bufend
aux(154) =< -2*V_s+2*V_pos_1
aux(155) =< -V_s+V_PL_bufend
aux(156) =< -V_s+V_pos_1
aux(157) =< V_PL_bufend-V_pos_1
aux(158) =< V_PL_bufend/2-V_pos_1/2
s(921) =< aux(153)
s(921) =< aux(154)
s(924) =< aux(156)
s(924) =< aux(155)
s(926) =< aux(157)
s(926) =< aux(158)
s(927) =< aux(157)
s(928) =< aux(157)
s(928) =< aux(158)
s(928) =< s(926)
s(929) =< aux(157)
s(930) =< aux(157)-2
s(931) =< max([aux(155),s(929),s(929)])
s(932) =< s(927)*s(929)
s(933) =< s(927)*s(930)
s(934) =< max([s(924),aux(157),0])+aux(157)
s(935) =< s(928)*s(929)
s(936) =< s(928)*s(930)
s(931) =< s(934)+1
s(937) =< s(935)*2
s(938) =< s(933)+s(936)+aux(155)
s(938) =< s(928)*s(934)
s(939) =< s(932)+s(935)+aux(155)
s(939) =< s(937)+s(937)+s(921)
s(939) =< s(927)*s(931)
s(940) =< s(939)
s(941) =< s(938)
s(942) =< aux(157)
s(942) =< aux(158)
s(943) =< s(942)*s(929)
s(944) =< s(942)*s(930)
s(945) =< s(943)*2
s(946) =< s(933)+s(944)+aux(155)
s(946) =< s(942)*s(934)
s(947) =< s(932)+s(943)+aux(155)
s(947) =< s(945)+s(945)+s(921)
s(947) =< s(927)*s(931)
s(948) =< s(947)
s(949) =< s(946)

  with precondition: [V_7>=1,V_PL_bufend>=V_pos_1+4] 

 * Renamed intermediate variables: 
[(eq(135,2),s(486))>>s(1010)]

#### Simplifying cost structure of CE 135 
 * Renamed intermediate variables: 
[(eq(144,2),s(748))>>s(1011)]

#### Simplifying cost structure of CE 144 
 * Joined equivalent variables [s(1010),s(1011)] into s(1010)
 * Renamed intermediate variables: 
[(eq(158,1),it(23))>>s(1012)]

#### Simplifying cost structure of CE 158 
 * Renamed intermediate variables: 
[(eq(167,1),it(23))>>s(1013)]

#### Simplifying cost structure of CE 167 
 * Joined equivalent variables [s(1012),s(1013)] into s(1012)
 * Renamed intermediate variables: 
[(eq(123,1),it(23))>>s(1014)]

#### Simplifying cost structure of CE 123 
 * Renamed intermediate variables: 
[(eq(126,1),it(23))>>s(1015)]

#### Simplifying cost structure of CE 126 

#### Simplifying cost structure of CE 138 

#### Simplifying cost structure of CE 147 
 * Joined equivalent variables [s(1014),s(1015)] into s(1014)
 * Renamed intermediate variables: 
[(eq(136,2),s(487))>>s(1016),(eq(136,2),s(488))>>s(1017),(eq(136,2),s(489))>>s(1018),(eq(136,2),s(490))>>s(1019),(eq(136,2),s(491))>>s(1020)]

#### Simplifying cost structure of CE 136 
 * Renamed intermediate variables: 
[(eq(145,2),s(749))>>s(1021),(eq(145,2),s(750))>>s(1022),(eq(145,2),s(751))>>s(1023),(eq(145,2),s(752))>>s(1024),(eq(145,2),s(753))>>s(1025)]

#### Simplifying cost structure of CE 145 
 * Joined equivalent variables [aux(163),s(1017),s(1022)] into aux(163)
 * Joined equivalent variables [aux(164),s(1018),s(1023)] into aux(164)
 * Joined equivalent variables [s(1016),s(1021)] into s(1016)
 * Joined equivalent variables [s(1020),s(1025)] into s(1020)
 * Joined equivalent variables [s(1019),s(1024)] into s(1019)
 * Renamed intermediate variables: 
[(eq(128,2),s(486))>>s(1026)]

#### Simplifying cost structure of CE 128 
 * Renamed intermediate variables: 
[(eq(131,2),s(748))>>s(1027)]

#### Simplifying cost structure of CE 131 
 * Joined equivalent variables [s(1026),s(1027)] into s(1026)
 * Renamed intermediate variables: 
[(eq(140,2),s(506))>>s(1028),(eq(140,2),s(507))>>s(1029)]

#### Simplifying cost structure of CE 140 
 * Renamed intermediate variables: 
[(eq(149,2),s(768))>>s(1030),(eq(149,2),s(769))>>s(1031)]

#### Simplifying cost structure of CE 149 
 * Joined equivalent variables [aux(166),s(1028),s(1030)] into aux(166)
 * Joined equivalent variables [s(1029),s(1031)] into s(1029)
 * Renamed intermediate variables: 
[(eq(159,1),it(23))>>s(1032)]
 * Renamed intermediate variables: 
[(eq(159,2),aux(100))>>s(1033),(eq(159,2),s(503))>>s(1034)]

#### Simplifying cost structure of CE 159 
 * Renamed intermediate variables: 
[(eq(168,1),it(23))>>s(1035)]
 * Renamed intermediate variables: 
[(eq(168,2),aux(131))>>s(1036),(eq(168,2),s(765))>>s(1037)]

#### Simplifying cost structure of CE 168 
 * Joined equivalent variables [aux(168),s(1033),s(1036)] into aux(168)
 * Joined equivalent variables [s(1032),s(1035)] into s(1032)
 * Joined equivalent variables [s(1034),s(1037)] into s(1034)

#### Simplifying cost structure of CE 130 

#### Simplifying cost structure of CE 133 

#### Simplifying cost structure of CE 137 

#### Simplifying cost structure of CE 146 
 * Renamed intermediate variables: 
[(eq(122,1),it(23))>>s(1038)]
 * Renamed intermediate variables: 
[(eq(122,2),aux(97))>>s(1039),(eq(122,2),s(492))>>s(1040)]

#### Simplifying cost structure of CE 122 
 * Renamed intermediate variables: 
[(eq(125,1),it(23))>>s(1041)]
 * Renamed intermediate variables: 
[(eq(125,2),aux(128))>>s(1042),(eq(125,2),s(754))>>s(1043)]

#### Simplifying cost structure of CE 125 
 * Joined equivalent variables [aux(169),s(1039),s(1042)] into aux(169)
 * Joined equivalent variables [s(1038),s(1041)] into s(1038)
 * Joined equivalent variables [s(1040),s(1043)] into s(1040)
 * Renamed intermediate variables: 
[(eq(156,1),it(23))>>s(1044)]
 * Renamed intermediate variables: 
[(eq(156,2),aux(97))>>s(1045),(eq(156,2),s(492))>>s(1046)]

#### Simplifying cost structure of CE 156 
 * Renamed intermediate variables: 
[(eq(165,1),it(23))>>s(1047)]
 * Renamed intermediate variables: 
[(eq(165,2),aux(128))>>s(1048),(eq(165,2),s(754))>>s(1049)]

#### Simplifying cost structure of CE 165 
 * Joined equivalent variables [aux(171),s(1045),s(1048)] into aux(171)
 * Joined equivalent variables [s(1044),s(1047)] into s(1044)
 * Joined equivalent variables [s(1046),s(1049)] into s(1046)
 * Renamed intermediate variables: 
[(eq(157,1),it(23))>>s(1050)]
 * Renamed intermediate variables: 
[(eq(157,2),aux(98))>>s(1051),(eq(157,2),aux(99))>>s(1052),(eq(157,2),s(496))>>s(1053),(eq(157,2),s(497))>>s(1054)]

#### Simplifying cost structure of CE 157 
 * Joined equivalent variables [aux(173),s(1051)] into aux(173)
 * Renamed intermediate variables: 
[(eq(166,1),it(23))>>s(1055)]
 * Renamed intermediate variables: 
[(eq(166,2),aux(129))>>s(1056),(eq(166,2),aux(130))>>s(1057),(eq(166,2),s(758))>>s(1058),(eq(166,2),s(759))>>s(1059)]

#### Simplifying cost structure of CE 166 
 * Joined equivalent variables [aux(175),s(1056)] into aux(175)
 * Joined equivalent variables [aux(177),aux(173),aux(175)] into aux(177)
 * Joined equivalent variables [aux(178),aux(174),aux(176)] into aux(178)
 * Joined equivalent variables [s(1053),s(1058)] into s(1053)
 * Joined equivalent variables [s(1050),s(1055)] into s(1050)
 * Joined equivalent variables [s(1052),s(1057)] into s(1052)
 * Joined equivalent variables [s(1054),s(1059)] into s(1054)

#### Simplifying cost structure of CE 127 

#### Simplifying cost structure of CE 129 

#### Simplifying cost structure of CE 132 
 * Renamed intermediate variables: 
[(eq(120,1),it(23))>>s(1060)]

#### Simplifying cost structure of CE 120 
 * Renamed intermediate variables: 
[(eq(121,1),it(23))>>s(1061)]
 * Renamed intermediate variables: 
[(eq(121,2),s(486))>>s(1062)]

#### Simplifying cost structure of CE 121 
 * Renamed intermediate variables: 
[(eq(124,1),it(23))>>s(1063)]
 * Renamed intermediate variables: 
[(eq(124,2),s(748))>>s(1064)]

#### Simplifying cost structure of CE 124 

#### Simplifying cost structure of CE 134 
 * Joined equivalent variables [s(1062),s(1064)] into s(1062)
 * Joined equivalent variables [s(1060),s(1061),s(1063)] into s(1060)
 * Renamed intermediate variables: 
[(eq(139,2),aux(100))>>s(1065),(eq(139,2),s(503))>>s(1066)]

#### Simplifying cost structure of CE 139 
 * Renamed intermediate variables: 
[(eq(141,2),aux(104))>>s(1067),(eq(141,2),aux(105))>>s(1068),(eq(141,2),aux(106))>>s(1069),(eq(141,2),aux(107))>>s(1070),(eq(141,2),aux(108))>>s(1071),(eq(141,2),aux(109))>>s(1072),(eq(141,2),s(508))>>s(1073),(eq(141,2),s(511))>>s(1074),(eq(141,2),s(513))>>s(1075),(eq(141,2),s(514))>>s(1076),(eq(141,2),s(515))>>s(1077),(eq(141,2),s(516))>>s(1078),(eq(141,2),s(517))>>s(1079),(eq(141,2),s(518))>>s(1080),(eq(141,2),s(519))>>s(1081),(eq(141,2),s(520))>>s(1082),(eq(141,2),s(521))>>s(1083),(eq(141,2),s(522))>>s(1084),(eq(141,2),s(523))>>s(1085),(eq(141,2),s(524))>>s(1086),(eq(141,2),s(525))>>s(1087),(eq(141,2),s(526))>>s(1088),(eq(141,2),s(527))>>s(1089)]

#### Simplifying cost structure of CE 141 
 * Renamed intermediate variables: 
[(eq(148,2),aux(131))>>s(1090),(eq(148,2),s(765))>>s(1091)]

#### Simplifying cost structure of CE 148 
 * Renamed intermediate variables: 
[(eq(150,2),aux(135))>>s(1092),(eq(150,2),aux(136))>>s(1093),(eq(150,2),aux(137))>>s(1094),(eq(150,2),aux(138))>>s(1095),(eq(150,2),aux(139))>>s(1096),(eq(150,2),aux(140))>>s(1097),(eq(150,2),s(770))>>s(1098),(eq(150,2),s(773))>>s(1099),(eq(150,2),s(775))>>s(1100),(eq(150,2),s(776))>>s(1101),(eq(150,2),s(777))>>s(1102),(eq(150,2),s(778))>>s(1103),(eq(150,2),s(779))>>s(1104),(eq(150,2),s(780))>>s(1105),(eq(150,2),s(781))>>s(1106),(eq(150,2),s(782))>>s(1107),(eq(150,2),s(783))>>s(1108),(eq(150,2),s(784))>>s(1109),(eq(150,2),s(785))>>s(1110),(eq(150,2),s(786))>>s(1111),(eq(150,2),s(787))>>s(1112),(eq(150,2),s(788))>>s(1113),(eq(150,2),s(789))>>s(1114)]

#### Simplifying cost structure of CE 150 
 * Renamed intermediate variables: 
[(eq(153,1),it(23))>>s(1115)]

#### Simplifying cost structure of CE 153 
 * Renamed intermediate variables: 
[(eq(154,1),it(23))>>s(1116)]
 * Renamed intermediate variables: 
[(eq(154,2),s(486))>>s(1117)]

#### Simplifying cost structure of CE 154 
 * Renamed intermediate variables: 
[(eq(163,1),it(23))>>s(1118)]
 * Renamed intermediate variables: 
[(eq(163,2),s(748))>>s(1119)]

#### Simplifying cost structure of CE 163 
 * Joined equivalent variables [aux(181),s(1067),s(1092)] into aux(181)
 * Joined equivalent variables [aux(182),s(1068),s(1093)] into aux(182)
 * Joined equivalent variables [aux(183),s(1069),s(1094)] into aux(183)
 * Joined equivalent variables [aux(184),s(1070),s(1095)] into aux(184)
 * Joined equivalent variables [aux(185),s(1065),s(1071),s(1090),s(1096)] into aux(185)
 * Joined equivalent variables [aux(186),s(1072),s(1097)] into aux(186)
 * Joined equivalent variables [s(1117),s(1119)] into s(1117)
 * Joined equivalent variables [s(1115),s(1116),s(1118)] into s(1115)
 * Joined equivalent variables [s(1077),s(1102)] into s(1077)
 * Joined equivalent variables [s(1078),s(1103)] into s(1078)
 * Joined equivalent variables [s(1066),s(1076),s(1091),s(1101),s(1115)] into s(1066)
 * Joined equivalent variables [s(1075),s(1100)] into s(1075)
 * Joined equivalent variables [s(1073),s(1098)] into s(1073)
 * Joined equivalent variables [s(1074),s(1099)] into s(1074)
 * Joined equivalent variables [s(1083),s(1108)] into s(1083)
 * Joined equivalent variables [s(1084),s(1109)] into s(1084)
 * Joined equivalent variables [s(1082),s(1107)] into s(1082)
 * Joined equivalent variables [s(1080),s(1105)] into s(1080)
 * Joined equivalent variables [s(1081),s(1106)] into s(1081)
 * Joined equivalent variables [s(1079),s(1104)] into s(1079)
 * Joined equivalent variables [s(1085),s(1110)] into s(1085)
 * Joined equivalent variables [s(1086),s(1111)] into s(1086)
 * Joined equivalent variables [s(1087),s(1112)] into s(1087)
 * Joined equivalent variables [s(1089),s(1114)] into s(1089)
 * Joined equivalent variables [s(1088),s(1113)] into s(1088)
 * Renamed intermediate variables: 
[(eq(142,2),aux(113))>>s(1120),(eq(142,2),aux(114))>>s(1121),(eq(142,2),aux(115))>>s(1122),(eq(142,2),aux(116))>>s(1123),(eq(142,2),aux(117))>>s(1124),(eq(142,2),aux(118))>>s(1125),(eq(142,2),s(570))>>s(1126),(eq(142,2),s(573))>>s(1127),(eq(142,2),s(575))>>s(1128),(eq(142,2),s(576))>>s(1129),(eq(142,2),s(577))>>s(1130),(eq(142,2),s(578))>>s(1131),(eq(142,2),s(579))>>s(1132),(eq(142,2),s(580))>>s(1133),(eq(142,2),s(581))>>s(1134),(eq(142,2),s(582))>>s(1135),(eq(142,2),s(583))>>s(1136),(eq(142,2),s(584))>>s(1137),(eq(142,2),s(585))>>s(1138),(eq(142,2),s(586))>>s(1139),(eq(142,2),s(587))>>s(1140),(eq(142,2),s(588))>>s(1141),(eq(142,2),s(589))>>s(1142),(eq(142,2),s(590))>>s(1143),(eq(142,2),s(591))>>s(1144),(eq(142,2),s(592))>>s(1145),(eq(142,2),s(593))>>s(1146),(eq(142,2),s(594))>>s(1147),(eq(142,2),s(595))>>s(1148),(eq(142,2),s(596))>>s(1149),(eq(142,2),s(597))>>s(1150),(eq(142,2),s(598))>>s(1151)]

#### Simplifying cost structure of CE 142 
 * Renamed intermediate variables: 
[(eq(151,2),aux(144))>>s(1152),(eq(151,2),aux(145))>>s(1153),(eq(151,2),aux(146))>>s(1154),(eq(151,2),aux(147))>>s(1155),(eq(151,2),aux(148))>>s(1156),(eq(151,2),aux(149))>>s(1157),(eq(151,2),s(832))>>s(1158),(eq(151,2),s(835))>>s(1159),(eq(151,2),s(837))>>s(1160),(eq(151,2),s(838))>>s(1161),(eq(151,2),s(839))>>s(1162),(eq(151,2),s(840))>>s(1163),(eq(151,2),s(841))>>s(1164),(eq(151,2),s(842))>>s(1165),(eq(151,2),s(843))>>s(1166),(eq(151,2),s(844))>>s(1167),(eq(151,2),s(845))>>s(1168),(eq(151,2),s(846))>>s(1169),(eq(151,2),s(847))>>s(1170),(eq(151,2),s(848))>>s(1171),(eq(151,2),s(849))>>s(1172),(eq(151,2),s(850))>>s(1173),(eq(151,2),s(851))>>s(1174),(eq(151,2),s(852))>>s(1175),(eq(151,2),s(853))>>s(1176),(eq(151,2),s(854))>>s(1177),(eq(151,2),s(855))>>s(1178),(eq(151,2),s(856))>>s(1179),(eq(151,2),s(857))>>s(1180),(eq(151,2),s(858))>>s(1181),(eq(151,2),s(859))>>s(1182),(eq(151,2),s(860))>>s(1183)]

#### Simplifying cost structure of CE 151 
 * Renamed intermediate variables: 
[(eq(155,1),it(23))>>s(1184)]
 * Renamed intermediate variables: 
[(eq(155,2),s(487))>>s(1185),(eq(155,2),s(488))>>s(1186),(eq(155,2),s(489))>>s(1187),(eq(155,2),s(490))>>s(1188),(eq(155,2),s(491))>>s(1189)]

#### Simplifying cost structure of CE 155 
 * Renamed intermediate variables: 
[(eq(160,1),it(23))>>s(1190)]
 * Renamed intermediate variables: 
[(eq(160,2),aux(104))>>s(1191),(eq(160,2),aux(105))>>s(1192),(eq(160,2),aux(106))>>s(1193),(eq(160,2),aux(107))>>s(1194),(eq(160,2),aux(108))>>s(1195),(eq(160,2),aux(109))>>s(1196),(eq(160,2),s(508))>>s(1197),(eq(160,2),s(511))>>s(1198),(eq(160,2),s(513))>>s(1199),(eq(160,2),s(514))>>s(1200),(eq(160,2),s(515))>>s(1201),(eq(160,2),s(516))>>s(1202),(eq(160,2),s(517))>>s(1203),(eq(160,2),s(518))>>s(1204),(eq(160,2),s(519))>>s(1205),(eq(160,2),s(520))>>s(1206),(eq(160,2),s(521))>>s(1207),(eq(160,2),s(522))>>s(1208),(eq(160,2),s(523))>>s(1209),(eq(160,2),s(524))>>s(1210),(eq(160,2),s(525))>>s(1211),(eq(160,2),s(526))>>s(1212),(eq(160,2),s(527))>>s(1213)]

#### Simplifying cost structure of CE 160 
 * Joined equivalent variables [aux(190),s(1191),s(1192)] into aux(190)
 * Joined equivalent variables [aux(191),s(1193),s(1194)] into aux(191)
 * Joined equivalent variables [aux(190),s(1197)] into aux(190)
 * Joined equivalent variables [aux(191),s(1198)] into aux(191)
 * Renamed intermediate variables: 
[(eq(164,1),it(23))>>s(1214)]
 * Renamed intermediate variables: 
[(eq(164,2),s(749))>>s(1215),(eq(164,2),s(750))>>s(1216),(eq(164,2),s(751))>>s(1217),(eq(164,2),s(752))>>s(1218),(eq(164,2),s(753))>>s(1219)]

#### Simplifying cost structure of CE 164 
 * Renamed intermediate variables: 
[(eq(169,1),it(23))>>s(1220)]
 * Renamed intermediate variables: 
[(eq(169,2),aux(135))>>s(1221),(eq(169,2),aux(136))>>s(1222),(eq(169,2),aux(137))>>s(1223),(eq(169,2),aux(138))>>s(1224),(eq(169,2),aux(139))>>s(1225),(eq(169,2),aux(140))>>s(1226),(eq(169,2),s(770))>>s(1227),(eq(169,2),s(773))>>s(1228),(eq(169,2),s(775))>>s(1229),(eq(169,2),s(776))>>s(1230),(eq(169,2),s(777))>>s(1231),(eq(169,2),s(778))>>s(1232),(eq(169,2),s(779))>>s(1233),(eq(169,2),s(780))>>s(1234),(eq(169,2),s(781))>>s(1235),(eq(169,2),s(782))>>s(1236),(eq(169,2),s(783))>>s(1237),(eq(169,2),s(784))>>s(1238),(eq(169,2),s(785))>>s(1239),(eq(169,2),s(786))>>s(1240),(eq(169,2),s(787))>>s(1241),(eq(169,2),s(788))>>s(1242),(eq(169,2),s(789))>>s(1243)]

#### Simplifying cost structure of CE 169 
 * Joined equivalent variables [aux(196),s(1221),s(1222)] into aux(196)
 * Joined equivalent variables [aux(197),s(1223),s(1224)] into aux(197)
 * Joined equivalent variables [aux(196),s(1227)] into aux(196)
 * Joined equivalent variables [aux(197),s(1228)] into aux(197)
 * Joined equivalent variables [aux(199),aux(190),aux(196),s(1120),s(1152)] into aux(199)
 * Joined equivalent variables [aux(200),s(1121),s(1153)] into aux(200)
 * Joined equivalent variables [aux(201),aux(187),aux(191),aux(193),aux(197),s(1122),s(1154)] into aux(201)
 * Joined equivalent variables [aux(202),aux(188),aux(194)] into aux(202)
 * Joined equivalent variables [aux(203),s(1123),s(1155)] into aux(203)
 * Joined equivalent variables [aux(204),aux(189),aux(192),aux(195),aux(198),s(1124),s(1156)] into aux(204)
 * Joined equivalent variables [aux(205),s(1125),s(1157)] into aux(205)
 * Joined equivalent variables [s(1131),s(1163)] into s(1131)
 * Joined equivalent variables [s(1132),s(1164)] into s(1132)
 * Joined equivalent variables [s(1185),s(1215)] into s(1185)
 * Joined equivalent variables [s(1129),s(1161),s(1184),s(1190),s(1214),s(1220)] into s(1129)
 * Joined equivalent variables [s(1144),s(1176)] into s(1144)
 * Joined equivalent variables [s(1126),s(1158)] into s(1126)
 * Joined equivalent variables [s(1195),s(1225)] into s(1195)
 * Joined equivalent variables [s(1186),s(1216)] into s(1186)
 * Joined equivalent variables [s(1127),s(1159)] into s(1127)
 * Joined equivalent variables [s(1196),s(1226)] into s(1196)
 * Joined equivalent variables [s(1187),s(1217)] into s(1187)
 * Joined equivalent variables [s(1128),s(1160)] into s(1128)
 * Joined equivalent variables [s(1201),s(1231)] into s(1201)
 * Joined equivalent variables [s(1202),s(1232)] into s(1202)
 * Joined equivalent variables [s(1134),s(1166)] into s(1134)
 * Joined equivalent variables [s(1135),s(1167)] into s(1135)
 * Joined equivalent variables [s(1145),s(1177)] into s(1145)
 * Joined equivalent variables [s(1146),s(1178)] into s(1146)
 * Joined equivalent variables [s(1206),s(1236)] into s(1206)
 * Joined equivalent variables [s(1136),s(1168)] into s(1136)
 * Joined equivalent variables [s(1130),s(1162)] into s(1130)
 * Joined equivalent variables [s(1189),s(1219)] into s(1189)
 * Joined equivalent variables [s(1188),s(1218)] into s(1188)
 * Joined equivalent variables [s(1200),s(1230)] into s(1200)
 * Joined equivalent variables [s(1199),s(1229)] into s(1199)
 * Joined equivalent variables [s(1204),s(1234)] into s(1204)
 * Joined equivalent variables [s(1205),s(1235)] into s(1205)
 * Joined equivalent variables [s(1207),s(1237)] into s(1207)
 * Joined equivalent variables [s(1208),s(1238)] into s(1208)
 * Joined equivalent variables [s(1203),s(1233)] into s(1203)
 * Joined equivalent variables [s(1137),s(1169)] into s(1137)
 * Joined equivalent variables [s(1138),s(1170)] into s(1138)
 * Joined equivalent variables [s(1133),s(1165)] into s(1133)
 * Joined equivalent variables [s(1147),s(1179)] into s(1147)
 * Joined equivalent variables [s(1148),s(1180)] into s(1148)
 * Joined equivalent variables [s(1209),s(1239)] into s(1209)
 * Joined equivalent variables [s(1210),s(1240)] into s(1210)
 * Joined equivalent variables [s(1139),s(1171)] into s(1139)
 * Joined equivalent variables [s(1140),s(1172)] into s(1140)
 * Joined equivalent variables [s(1149),s(1181)] into s(1149)
 * Joined equivalent variables [s(1151),s(1183)] into s(1151)
 * Joined equivalent variables [s(1211),s(1241)] into s(1211)
 * Joined equivalent variables [s(1141),s(1173)] into s(1141)
 * Joined equivalent variables [s(1143),s(1175)] into s(1143)
 * Joined equivalent variables [s(1150),s(1182)] into s(1150)
 * Joined equivalent variables [s(1213),s(1243)] into s(1213)
 * Joined equivalent variables [s(1142),s(1174)] into s(1142)
 * Joined equivalent variables [s(1212),s(1242)] into s(1212)
 * Renamed intermediate variables: 
[(eq(143,2),aux(122))>>s(1244),(eq(143,2),aux(123))>>s(1245),(eq(143,2),aux(124))>>s(1246),(eq(143,2),aux(125))>>s(1247),(eq(143,2),aux(126))>>s(1248),(eq(143,2),aux(127))>>s(1249),(eq(143,2),s(659))>>s(1250),(eq(143,2),s(662))>>s(1251),(eq(143,2),s(664))>>s(1252),(eq(143,2),s(665))>>s(1253),(eq(143,2),s(666))>>s(1254),(eq(143,2),s(667))>>s(1255),(eq(143,2),s(668))>>s(1256),(eq(143,2),s(669))>>s(1257),(eq(143,2),s(670))>>s(1258),(eq(143,2),s(671))>>s(1259),(eq(143,2),s(672))>>s(1260),(eq(143,2),s(673))>>s(1261),(eq(143,2),s(674))>>s(1262),(eq(143,2),s(675))>>s(1263),(eq(143,2),s(676))>>s(1264),(eq(143,2),s(677))>>s(1265),(eq(143,2),s(678))>>s(1266),(eq(143,2),s(679))>>s(1267),(eq(143,2),s(680))>>s(1268),(eq(143,2),s(681))>>s(1269),(eq(143,2),s(682))>>s(1270),(eq(143,2),s(683))>>s(1271),(eq(143,2),s(684))>>s(1272),(eq(143,2),s(685))>>s(1273),(eq(143,2),s(686))>>s(1274),(eq(143,2),s(687))>>s(1275)]

#### Simplifying cost structure of CE 143 
 * Renamed intermediate variables: 
[(eq(152,2),aux(153))>>s(1276),(eq(152,2),aux(154))>>s(1277),(eq(152,2),aux(155))>>s(1278),(eq(152,2),aux(156))>>s(1279),(eq(152,2),aux(157))>>s(1280),(eq(152,2),aux(158))>>s(1281),(eq(152,2),s(921))>>s(1282),(eq(152,2),s(924))>>s(1283),(eq(152,2),s(926))>>s(1284),(eq(152,2),s(927))>>s(1285),(eq(152,2),s(928))>>s(1286),(eq(152,2),s(929))>>s(1287),(eq(152,2),s(930))>>s(1288),(eq(152,2),s(931))>>s(1289),(eq(152,2),s(932))>>s(1290),(eq(152,2),s(933))>>s(1291),(eq(152,2),s(934))>>s(1292),(eq(152,2),s(935))>>s(1293),(eq(152,2),s(936))>>s(1294),(eq(152,2),s(937))>>s(1295),(eq(152,2),s(938))>>s(1296),(eq(152,2),s(939))>>s(1297),(eq(152,2),s(940))>>s(1298),(eq(152,2),s(941))>>s(1299),(eq(152,2),s(942))>>s(1300),(eq(152,2),s(943))>>s(1301),(eq(152,2),s(944))>>s(1302),(eq(152,2),s(945))>>s(1303),(eq(152,2),s(946))>>s(1304),(eq(152,2),s(947))>>s(1305),(eq(152,2),s(948))>>s(1306),(eq(152,2),s(949))>>s(1307)]

#### Simplifying cost structure of CE 152 
 * Renamed intermediate variables: 
[(eq(161,1),it(23))>>s(1308)]
 * Renamed intermediate variables: 
[(eq(161,2),aux(113))>>s(1309),(eq(161,2),aux(114))>>s(1310),(eq(161,2),aux(115))>>s(1311),(eq(161,2),aux(116))>>s(1312),(eq(161,2),aux(117))>>s(1313),(eq(161,2),aux(118))>>s(1314),(eq(161,2),s(570))>>s(1315),(eq(161,2),s(573))>>s(1316),(eq(161,2),s(575))>>s(1317),(eq(161,2),s(576))>>s(1318),(eq(161,2),s(577))>>s(1319),(eq(161,2),s(578))>>s(1320),(eq(161,2),s(579))>>s(1321),(eq(161,2),s(580))>>s(1322),(eq(161,2),s(581))>>s(1323),(eq(161,2),s(582))>>s(1324),(eq(161,2),s(583))>>s(1325),(eq(161,2),s(584))>>s(1326),(eq(161,2),s(585))>>s(1327),(eq(161,2),s(586))>>s(1328),(eq(161,2),s(587))>>s(1329),(eq(161,2),s(588))>>s(1330),(eq(161,2),s(589))>>s(1331),(eq(161,2),s(590))>>s(1332),(eq(161,2),s(591))>>s(1333),(eq(161,2),s(592))>>s(1334),(eq(161,2),s(593))>>s(1335),(eq(161,2),s(594))>>s(1336),(eq(161,2),s(595))>>s(1337),(eq(161,2),s(596))>>s(1338),(eq(161,2),s(597))>>s(1339),(eq(161,2),s(598))>>s(1340)]

#### Simplifying cost structure of CE 161 
 * Joined equivalent variables [aux(206),s(1309),s(1310)] into aux(206)
 * Joined equivalent variables [aux(207),s(1311),s(1312)] into aux(207)
 * Joined equivalent variables [aux(206),s(1315)] into aux(206)
 * Joined equivalent variables [aux(207),s(1316)] into aux(207)
 * Renamed intermediate variables: 
[(eq(170,1),it(23))>>s(1341)]
 * Renamed intermediate variables: 
[(eq(170,2),aux(144))>>s(1342),(eq(170,2),aux(145))>>s(1343),(eq(170,2),aux(146))>>s(1344),(eq(170,2),aux(147))>>s(1345),(eq(170,2),aux(148))>>s(1346),(eq(170,2),aux(149))>>s(1347),(eq(170,2),s(832))>>s(1348),(eq(170,2),s(835))>>s(1349),(eq(170,2),s(837))>>s(1350),(eq(170,2),s(838))>>s(1351),(eq(170,2),s(839))>>s(1352),(eq(170,2),s(840))>>s(1353),(eq(170,2),s(841))>>s(1354),(eq(170,2),s(842))>>s(1355),(eq(170,2),s(843))>>s(1356),(eq(170,2),s(844))>>s(1357),(eq(170,2),s(845))>>s(1358),(eq(170,2),s(846))>>s(1359),(eq(170,2),s(847))>>s(1360),(eq(170,2),s(848))>>s(1361),(eq(170,2),s(849))>>s(1362),(eq(170,2),s(850))>>s(1363),(eq(170,2),s(851))>>s(1364),(eq(170,2),s(852))>>s(1365),(eq(170,2),s(853))>>s(1366),(eq(170,2),s(854))>>s(1367),(eq(170,2),s(855))>>s(1368),(eq(170,2),s(856))>>s(1369),(eq(170,2),s(857))>>s(1370),(eq(170,2),s(858))>>s(1371),(eq(170,2),s(859))>>s(1372),(eq(170,2),s(860))>>s(1373)]

#### Simplifying cost structure of CE 170 
 * Joined equivalent variables [aux(209),s(1342),s(1343)] into aux(209)
 * Joined equivalent variables [aux(210),s(1344),s(1345)] into aux(210)
 * Joined equivalent variables [aux(209),s(1348)] into aux(209)
 * Joined equivalent variables [aux(210),s(1349)] into aux(210)
 * Joined equivalent variables [aux(212),aux(206),aux(209),s(1244),s(1276)] into aux(212)
 * Joined equivalent variables [aux(213),s(1245),s(1277)] into aux(213)
 * Joined equivalent variables [aux(214),aux(207),aux(210),s(1246),s(1278)] into aux(214)
 * Joined equivalent variables [aux(215),s(1247),s(1279)] into aux(215)
 * Joined equivalent variables [aux(216),aux(208),aux(211),s(1248),s(1280)] into aux(216)
 * Joined equivalent variables [aux(217),s(1249),s(1281)] into aux(217)
 * Joined equivalent variables [s(1255),s(1287)] into s(1255)
 * Joined equivalent variables [s(1256),s(1288)] into s(1256)
 * Joined equivalent variables [s(1253),s(1285),s(1308),s(1341)] into s(1253)
 * Joined equivalent variables [s(1268),s(1300)] into s(1268)
 * Joined equivalent variables [s(1250),s(1282)] into s(1250)
 * Joined equivalent variables [s(1313),s(1346)] into s(1313)
 * Joined equivalent variables [s(1251),s(1283)] into s(1251)
 * Joined equivalent variables [s(1314),s(1347)] into s(1314)
 * Joined equivalent variables [s(1252),s(1284)] into s(1252)
 * Joined equivalent variables [s(1320),s(1353)] into s(1320)
 * Joined equivalent variables [s(1321),s(1354)] into s(1321)
 * Joined equivalent variables [s(1258),s(1290)] into s(1258)
 * Joined equivalent variables [s(1259),s(1291)] into s(1259)
 * Joined equivalent variables [s(1269),s(1301)] into s(1269)
 * Joined equivalent variables [s(1270),s(1302)] into s(1270)
 * Joined equivalent variables [s(1325),s(1358)] into s(1325)
 * Joined equivalent variables [s(1260),s(1292)] into s(1260)
 * Joined equivalent variables [s(1254),s(1286)] into s(1254)
 * Joined equivalent variables [s(1318),s(1351)] into s(1318)
 * Joined equivalent variables [s(1333),s(1366)] into s(1333)
 * Joined equivalent variables [s(1317),s(1350)] into s(1317)
 * Joined equivalent variables [s(1323),s(1356)] into s(1323)
 * Joined equivalent variables [s(1324),s(1357)] into s(1324)
 * Joined equivalent variables [s(1322),s(1355)] into s(1322)
 * Joined equivalent variables [s(1334),s(1367)] into s(1334)
 * Joined equivalent variables [s(1335),s(1368)] into s(1335)
 * Joined equivalent variables [s(1261),s(1293)] into s(1261)
 * Joined equivalent variables [s(1262),s(1294)] into s(1262)
 * Joined equivalent variables [s(1257),s(1289)] into s(1257)
 * Joined equivalent variables [s(1271),s(1303)] into s(1271)
 * Joined equivalent variables [s(1272),s(1304)] into s(1272)
 * Joined equivalent variables [s(1319),s(1352)] into s(1319)
 * Joined equivalent variables [s(1326),s(1359)] into s(1326)
 * Joined equivalent variables [s(1327),s(1360)] into s(1327)
 * Joined equivalent variables [s(1336),s(1369)] into s(1336)
 * Joined equivalent variables [s(1337),s(1370)] into s(1337)
 * Joined equivalent variables [s(1263),s(1295)] into s(1263)
 * Joined equivalent variables [s(1264),s(1296)] into s(1264)
 * Joined equivalent variables [s(1273),s(1305)] into s(1273)
 * Joined equivalent variables [s(1275),s(1307)] into s(1275)
 * Joined equivalent variables [s(1328),s(1361)] into s(1328)
 * Joined equivalent variables [s(1329),s(1362)] into s(1329)
 * Joined equivalent variables [s(1338),s(1371)] into s(1338)
 * Joined equivalent variables [s(1265),s(1297)] into s(1265)
 * Joined equivalent variables [s(1267),s(1299)] into s(1267)
 * Joined equivalent variables [s(1274),s(1306)] into s(1274)
 * Joined equivalent variables [s(1340),s(1373)] into s(1340)
 * Joined equivalent variables [s(1330),s(1363)] into s(1330)
 * Joined equivalent variables [s(1266),s(1298)] into s(1266)
 * Joined equivalent variables [s(1332),s(1365)] into s(1332)
 * Joined equivalent variables [s(1339),s(1372)] into s(1339)
 * Joined equivalent variables [s(1331),s(1364)] into s(1331)
 * Renamed intermediate variables: 
[(eq(162,1),it(23))>>s(1374)]
 * Renamed intermediate variables: 
[(eq(162,2),aux(122))>>s(1375),(eq(162,2),aux(123))>>s(1376),(eq(162,2),aux(124))>>s(1377),(eq(162,2),aux(125))>>s(1378),(eq(162,2),aux(126))>>s(1379),(eq(162,2),aux(127))>>s(1380),(eq(162,2),s(659))>>s(1381),(eq(162,2),s(662))>>s(1382),(eq(162,2),s(664))>>s(1383),(eq(162,2),s(665))>>s(1384),(eq(162,2),s(666))>>s(1385),(eq(162,2),s(667))>>s(1386),(eq(162,2),s(668))>>s(1387),(eq(162,2),s(669))>>s(1388),(eq(162,2),s(670))>>s(1389),(eq(162,2),s(671))>>s(1390),(eq(162,2),s(672))>>s(1391),(eq(162,2),s(673))>>s(1392),(eq(162,2),s(674))>>s(1393),(eq(162,2),s(675))>>s(1394),(eq(162,2),s(676))>>s(1395),(eq(162,2),s(677))>>s(1396),(eq(162,2),s(678))>>s(1397),(eq(162,2),s(679))>>s(1398),(eq(162,2),s(680))>>s(1399),(eq(162,2),s(681))>>s(1400),(eq(162,2),s(682))>>s(1401),(eq(162,2),s(683))>>s(1402),(eq(162,2),s(684))>>s(1403),(eq(162,2),s(685))>>s(1404),(eq(162,2),s(686))>>s(1405),(eq(162,2),s(687))>>s(1406)]

#### Simplifying cost structure of CE 162 
 * Joined equivalent variables [aux(218),s(1375),s(1376)] into aux(218)
 * Joined equivalent variables [aux(219),s(1377),s(1378)] into aux(219)
 * Joined equivalent variables [aux(218),s(1381)] into aux(218)
 * Joined equivalent variables [aux(219),s(1382)] into aux(219)
 * Renamed intermediate variables: 
[(eq(171,1),it(23))>>s(1407)]
 * Renamed intermediate variables: 
[(eq(171,2),aux(153))>>s(1408),(eq(171,2),aux(154))>>s(1409),(eq(171,2),aux(155))>>s(1410),(eq(171,2),aux(156))>>s(1411),(eq(171,2),aux(157))>>s(1412),(eq(171,2),aux(158))>>s(1413),(eq(171,2),s(921))>>s(1414),(eq(171,2),s(924))>>s(1415),(eq(171,2),s(926))>>s(1416),(eq(171,2),s(927))>>s(1417),(eq(171,2),s(928))>>s(1418),(eq(171,2),s(929))>>s(1419),(eq(171,2),s(930))>>s(1420),(eq(171,2),s(931))>>s(1421),(eq(171,2),s(932))>>s(1422),(eq(171,2),s(933))>>s(1423),(eq(171,2),s(934))>>s(1424),(eq(171,2),s(935))>>s(1425),(eq(171,2),s(936))>>s(1426),(eq(171,2),s(937))>>s(1427),(eq(171,2),s(938))>>s(1428),(eq(171,2),s(939))>>s(1429),(eq(171,2),s(940))>>s(1430),(eq(171,2),s(941))>>s(1431),(eq(171,2),s(942))>>s(1432),(eq(171,2),s(943))>>s(1433),(eq(171,2),s(944))>>s(1434),(eq(171,2),s(945))>>s(1435),(eq(171,2),s(946))>>s(1436),(eq(171,2),s(947))>>s(1437),(eq(171,2),s(948))>>s(1438),(eq(171,2),s(949))>>s(1439)]

#### Simplifying cost structure of CE 171 
 * Joined equivalent variables [aux(221),s(1408),s(1409)] into aux(221)
 * Joined equivalent variables [aux(222),s(1410),s(1411)] into aux(222)
 * Joined equivalent variables [aux(221),s(1414)] into aux(221)
 * Joined equivalent variables [aux(222),s(1415)] into aux(222)
 * Joined equivalent variables [aux(224),aux(218),aux(221)] into aux(224)
 * Joined equivalent variables [aux(225),aux(219),aux(222)] into aux(225)
 * Joined equivalent variables [aux(226),aux(220),aux(223)] into aux(226)
 * Joined equivalent variables [s(1374),s(1407)] into s(1374)
 * Joined equivalent variables [s(1379),s(1412)] into s(1379)
 * Joined equivalent variables [s(1380),s(1413)] into s(1380)
 * Joined equivalent variables [s(1386),s(1419)] into s(1386)
 * Joined equivalent variables [s(1387),s(1420)] into s(1387)
 * Joined equivalent variables [s(1391),s(1424)] into s(1391)
 * Joined equivalent variables [s(1384),s(1417)] into s(1384)
 * Joined equivalent variables [s(1399),s(1432)] into s(1399)
 * Joined equivalent variables [s(1383),s(1416)] into s(1383)
 * Joined equivalent variables [s(1389),s(1422)] into s(1389)
 * Joined equivalent variables [s(1390),s(1423)] into s(1390)
 * Joined equivalent variables [s(1388),s(1421)] into s(1388)
 * Joined equivalent variables [s(1400),s(1433)] into s(1400)
 * Joined equivalent variables [s(1401),s(1434)] into s(1401)
 * Joined equivalent variables [s(1385),s(1418)] into s(1385)
 * Joined equivalent variables [s(1392),s(1425)] into s(1392)
 * Joined equivalent variables [s(1393),s(1426)] into s(1393)
 * Joined equivalent variables [s(1402),s(1435)] into s(1402)
 * Joined equivalent variables [s(1403),s(1436)] into s(1403)
 * Joined equivalent variables [s(1394),s(1427)] into s(1394)
 * Joined equivalent variables [s(1395),s(1428)] into s(1395)
 * Joined equivalent variables [s(1404),s(1437)] into s(1404)
 * Joined equivalent variables [s(1406),s(1439)] into s(1406)
 * Joined equivalent variables [s(1396),s(1429)] into s(1396)
 * Joined equivalent variables [s(1398),s(1431)] into s(1398)
 * Joined equivalent variables [s(1405),s(1438)] into s(1405)
 * Joined equivalent variables [s(1397),s(1430)] into s(1397)

#### Cost of chains of eval_Perl_scan_vstring_9(V_s,V_PL_bufend,V__s,B):
* Chain [109]: 5
  with precondition: [V_s+2=V_PL_bufend,V_s+1=V__s] 

* Chain [108]: 5
  with precondition: [V_s+2=V_PL_bufend,V_s=V__s] 

* Chain [107]: 5
  with precondition: [V_s+1=V_PL_bufend,V_s=V__s] 

* Chain [106]: 2*s(1016)+6*s(1019)+4*s(1020)+6
  Such that:aux(162) =< 1
aux(163) =< 2
aux(164) =< -V_s+V_PL_bufend
s(1016) =< aux(162)
s(1019) =< aux(164)
s(1020) =< aux(163)

  with precondition: [V__s=V_s+1,V_PL_bufend>=V__s+2] 

* Chain [105]: 5
  with precondition: [V__s=V_s+1,V__s>=V_PL_bufend] 

* Chain [104]: 6*s(1029)+6
  Such that:aux(166) =< -V_s+V_PL_bufend
s(1029) =< aux(166)

  with precondition: [V__s=V_s,V_PL_bufend>=V__s+2] 

* Chain [103]: 2*s(1032)+12*s(1034)+6
  Such that:aux(167) =< 1
aux(168) =< -V_s+V_PL_bufend
s(1032) =< aux(167)
s(1034) =< aux(168)

  with precondition: [V__s=V_s,V_PL_bufend>=V__s+3] 

* Chain [102]: 3
  with precondition: [V__s=V_s,V__s>=V_PL_bufend] 

* Chain [101]: 3
  with precondition: [V__s+1=V_PL_bufend,V__s>=V_s,V_s+1>=V__s] 

* Chain [100]: 2*s(1038)+4*s(1040)+3
  Such that:aux(169) =< -V_s+V_PL_bufend
aux(170) =< V_PL_bufend-V__s
s(1038) =< aux(170)
s(1040) =< aux(169)

  with precondition: [V_PL_bufend>=V_s+2,V__s>=V_s,V_s+1>=V__s] 

* Chain [99]: 2*s(1044)+4*s(1046)+3
  Such that:aux(171) =< -V_s+V_PL_bufend
aux(172) =< V_PL_bufend-V__s
s(1044) =< aux(172)
s(1046) =< aux(171)

  with precondition: [V_PL_bufend>=V_s+3,V__s>=V_s,V_s+1>=V__s] 

* Chain [98]: 2*s(1050)+12*s(1053)+12*s(1054)+6
  Such that:aux(177) =< -V_s+V_PL_bufend
aux(178) =< V_PL_bufend-V__s
s(1052) =< aux(177)
s(1050) =< aux(178)
s(1052) =< aux(178)
s(1053) =< aux(177)
s(1054) =< s(1052)

  with precondition: [V_PL_bufend>=V_s+4,V__s>=V_s,V_s+1>=V__s] 

* Chain [97]: 3
  with precondition: [V__s>=V_s,V__s>=V_PL_bufend,V_s+1>=V__s] 

* Chain [96]: 3*s(1060)+2*s(1062)+3
  Such that:aux(179) =< -V_s+V_PL_bufend
aux(180) =< V_PL_bufend-V__s
s(1062) =< aux(179)
s(1060) =< aux(180)

  with precondition: [V__s>=V_s,V_s+1>=V__s,V_PL_bufend>=V__s+1] 

* Chain [95]: 75*s(1066)+36*s(1075)+12*s(1088)+12*s(1089)+2*s(1117)+6
  Such that:aux(181) =< -2*V_s+2*V_PL_bufend
aux(182) =< -2*V_s+2*V__s
aux(183) =< -V_s+V_PL_bufend
aux(184) =< -V_s+V__s
aux(185) =< V_PL_bufend-V__s
aux(186) =< V_PL_bufend/2-V__s/2
s(1117) =< aux(183)
s(1066) =< aux(185)
s(1073) =< aux(181)
s(1073) =< aux(182)
s(1074) =< aux(184)
s(1074) =< aux(183)
s(1075) =< aux(185)
s(1075) =< aux(186)
s(1077) =< aux(185)
s(1078) =< aux(185)-2
s(1079) =< max([aux(183),s(1077),s(1077)])
s(1080) =< s(1066)*s(1077)
s(1081) =< s(1066)*s(1078)
s(1082) =< max([s(1074),aux(185),0])+aux(185)
s(1083) =< s(1075)*s(1077)
s(1084) =< s(1075)*s(1078)
s(1079) =< s(1082)+1
s(1085) =< s(1083)*2
s(1086) =< s(1081)+s(1084)+aux(183)
s(1086) =< s(1075)*s(1082)
s(1087) =< s(1080)+s(1083)+aux(183)
s(1087) =< s(1085)+s(1085)+s(1073)
s(1087) =< s(1066)*s(1079)
s(1088) =< s(1087)
s(1089) =< s(1086)

  with precondition: [V__s>=V_s,V_s+1>=V__s,V_PL_bufend>=V__s+2] 

* Chain [94]: 208*s(1129)+36*s(1130)+12*s(1142)+12*s(1143)+72*s(1144)+24*s(1150)+24*s(1151)+2*s(1185)+6*s(1188)+4*s(1189)+36*s(1199)+60*s(1200)+12*s(1212)+12*s(1213)+6
  Such that:aux(199) =< -2*V_s+2*V_PL_bufend
aux(200) =< -2*V_s+2*V__s
aux(201) =< -V_s+V_PL_bufend
aux(202) =< -V_s+V_PL_bufend+1
aux(203) =< -V_s+V__s
aux(204) =< V_PL_bufend-V__s
aux(205) =< V_PL_bufend/2-V__s/2
s(1195) =< aux(199)
s(1196) =< aux(201)
s(1129) =< aux(204)
s(1195) =< aux(204)
s(1196) =< aux(204)
s(1199) =< s(1195)
s(1200) =< s(1195)
s(1199) =< s(1196)
s(1201) =< s(1195)
s(1202) =< s(1195)-2
s(1203) =< max([aux(201),s(1201),s(1201)])
s(1204) =< s(1200)*s(1201)
s(1205) =< s(1200)*s(1202)
s(1206) =< max([aux(201),s(1195),0])+s(1195)
s(1207) =< s(1199)*s(1201)
s(1208) =< s(1199)*s(1202)
s(1203) =< s(1206)+1
s(1209) =< s(1207)*2
s(1210) =< s(1205)+s(1208)+aux(201)
s(1210) =< s(1199)*s(1206)
s(1211) =< s(1204)+s(1207)+aux(201)
s(1211) =< s(1209)+s(1209)+aux(199)
s(1211) =< s(1200)*s(1203)
s(1212) =< s(1211)
s(1213) =< s(1210)
s(1126) =< aux(199)
s(1126) =< aux(200)
s(1127) =< aux(203)
s(1127) =< aux(201)
s(1128) =< aux(204)
s(1128) =< aux(205)
s(1130) =< aux(204)
s(1130) =< aux(205)
s(1130) =< s(1128)
s(1131) =< aux(204)
s(1132) =< aux(204)-2
s(1133) =< max([aux(201),s(1131),s(1131)])
s(1134) =< s(1129)*s(1131)
s(1135) =< s(1129)*s(1132)
s(1136) =< max([s(1127),aux(204),0])+aux(204)
s(1137) =< s(1130)*s(1131)
s(1138) =< s(1130)*s(1132)
s(1133) =< s(1136)+1
s(1139) =< s(1137)*2
s(1140) =< s(1135)+s(1138)+aux(201)
s(1140) =< s(1130)*s(1136)
s(1141) =< s(1134)+s(1137)+aux(201)
s(1141) =< s(1139)+s(1139)+s(1126)
s(1141) =< s(1129)*s(1133)
s(1142) =< s(1141)
s(1143) =< s(1140)
s(1144) =< aux(204)
s(1144) =< aux(205)
s(1145) =< s(1144)*s(1131)
s(1146) =< s(1144)*s(1132)
s(1147) =< s(1145)*2
s(1148) =< s(1135)+s(1146)+aux(201)
s(1148) =< s(1144)*s(1136)
s(1149) =< s(1134)+s(1145)+aux(201)
s(1149) =< s(1147)+s(1147)+s(1126)
s(1149) =< s(1129)*s(1133)
s(1150) =< s(1149)
s(1151) =< s(1148)
s(1185) =< aux(201)
s(1186) =< aux(201)
s(1186) =< aux(202)
s(1187) =< aux(202)
s(1187) =< aux(204)
s(1188) =< s(1187)
s(1189) =< s(1186)

  with precondition: [V__s>=V_s,V_s+1>=V__s,V_PL_bufend>=V__s+3] 

* Chain [93]: 158*s(1253)+36*s(1254)+12*s(1266)+12*s(1267)+36*s(1268)+12*s(1274)+12*s(1275)+204*s(1318)+36*s(1319)+12*s(1331)+12*s(1332)+72*s(1333)+24*s(1339)+24*s(1340)+6
  Such that:aux(212) =< -2*V_s+2*V_PL_bufend
aux(213) =< -2*V_s+2*V__s
aux(214) =< -V_s+V_PL_bufend
aux(215) =< -V_s+V__s
aux(216) =< V_PL_bufend-V__s
aux(217) =< V_PL_bufend/2-V__s/2
s(1313) =< aux(212)
s(1314) =< aux(214)
s(1253) =< aux(216)
s(1313) =< aux(216)
s(1314) =< aux(216)
s(1317) =< s(1313)
s(1317) =< s(1314)
s(1318) =< s(1313)
s(1319) =< s(1313)
s(1319) =< s(1314)
s(1319) =< s(1317)
s(1320) =< s(1313)
s(1321) =< s(1313)-2
s(1322) =< max([aux(214),s(1320),s(1320)])
s(1323) =< s(1318)*s(1320)
s(1324) =< s(1318)*s(1321)
s(1325) =< max([aux(214),s(1313),0])+s(1313)
s(1326) =< s(1319)*s(1320)
s(1327) =< s(1319)*s(1321)
s(1322) =< s(1325)+1
s(1328) =< s(1326)*2
s(1329) =< s(1324)+s(1327)+aux(214)
s(1329) =< s(1319)*s(1325)
s(1330) =< s(1323)+s(1326)+aux(214)
s(1330) =< s(1328)+s(1328)+aux(212)
s(1330) =< s(1318)*s(1322)
s(1331) =< s(1330)
s(1332) =< s(1329)
s(1333) =< s(1313)
s(1333) =< s(1314)
s(1334) =< s(1333)*s(1320)
s(1335) =< s(1333)*s(1321)
s(1336) =< s(1334)*2
s(1337) =< s(1324)+s(1335)+aux(214)
s(1337) =< s(1333)*s(1325)
s(1338) =< s(1323)+s(1334)+aux(214)
s(1338) =< s(1336)+s(1336)+aux(212)
s(1338) =< s(1318)*s(1322)
s(1339) =< s(1338)
s(1340) =< s(1337)
s(1250) =< aux(212)
s(1250) =< aux(213)
s(1251) =< aux(215)
s(1251) =< aux(214)
s(1252) =< aux(216)
s(1252) =< aux(217)
s(1254) =< aux(216)
s(1254) =< aux(217)
s(1254) =< s(1252)
s(1255) =< aux(216)
s(1256) =< aux(216)-2
s(1257) =< max([aux(214),s(1255),s(1255)])
s(1258) =< s(1253)*s(1255)
s(1259) =< s(1253)*s(1256)
s(1260) =< max([s(1251),aux(216),0])+aux(216)
s(1261) =< s(1254)*s(1255)
s(1262) =< s(1254)*s(1256)
s(1257) =< s(1260)+1
s(1263) =< s(1261)*2
s(1264) =< s(1259)+s(1262)+aux(214)
s(1264) =< s(1254)*s(1260)
s(1265) =< s(1258)+s(1261)+aux(214)
s(1265) =< s(1263)+s(1263)+s(1250)
s(1265) =< s(1253)*s(1257)
s(1266) =< s(1265)
s(1267) =< s(1264)
s(1268) =< aux(216)
s(1268) =< aux(217)
s(1269) =< s(1268)*s(1255)
s(1270) =< s(1268)*s(1256)
s(1271) =< s(1269)*2
s(1272) =< s(1259)+s(1270)+aux(214)
s(1272) =< s(1268)*s(1260)
s(1273) =< s(1258)+s(1269)+aux(214)
s(1273) =< s(1271)+s(1271)+s(1250)
s(1273) =< s(1253)*s(1257)
s(1274) =< s(1273)
s(1275) =< s(1272)

  with precondition: [V__s>=V_s,V_s+1>=V__s,V_PL_bufend>=V__s+4] 

* Chain [92]: 2*s(1374)+156*s(1384)+36*s(1385)+12*s(1397)+12*s(1398)+36*s(1399)+12*s(1405)+12*s(1406)+6
  Such that:aux(224) =< -2*V_s+2*V_PL_bufend
aux(225) =< -V_s+V_PL_bufend
aux(226) =< V_PL_bufend-V__s
s(1379) =< aux(224)
s(1380) =< aux(225)
s(1374) =< aux(226)
s(1379) =< aux(226)
s(1380) =< aux(226)
s(1383) =< s(1379)
s(1383) =< s(1380)
s(1384) =< s(1379)
s(1385) =< s(1379)
s(1385) =< s(1380)
s(1385) =< s(1383)
s(1386) =< s(1379)
s(1387) =< s(1379)-2
s(1388) =< max([aux(225),s(1386),s(1386)])
s(1389) =< s(1384)*s(1386)
s(1390) =< s(1384)*s(1387)
s(1391) =< max([aux(225),s(1379),0])+s(1379)
s(1392) =< s(1385)*s(1386)
s(1393) =< s(1385)*s(1387)
s(1388) =< s(1391)+1
s(1394) =< s(1392)*2
s(1395) =< s(1390)+s(1393)+aux(225)
s(1395) =< s(1385)*s(1391)
s(1396) =< s(1389)+s(1392)+aux(225)
s(1396) =< s(1394)+s(1394)+aux(224)
s(1396) =< s(1384)*s(1388)
s(1397) =< s(1396)
s(1398) =< s(1395)
s(1399) =< s(1379)
s(1399) =< s(1380)
s(1400) =< s(1399)*s(1386)
s(1401) =< s(1399)*s(1387)
s(1402) =< s(1400)*2
s(1403) =< s(1390)+s(1401)+aux(225)
s(1403) =< s(1399)*s(1391)
s(1404) =< s(1389)+s(1400)+aux(225)
s(1404) =< s(1402)+s(1402)+aux(224)
s(1404) =< s(1384)*s(1388)
s(1405) =< s(1404)
s(1406) =< s(1403)

  with precondition: [V__s>=V_s,V_s+1>=V__s,V_PL_bufend>=V__s+5] 


#### Simplifying cost structure of CE 202 

#### Simplifying cost structure of CE 203 

#### Simplifying cost structure of CE 201 
 * Renamed intermediate variables: 
[(eq(208,1),aux(179))>>s(1440),(eq(208,1),aux(180))>>s(1441),(eq(208,1),s(1062))>>s(1442),(eq(208,1),s(1060))>>s(1443)]

#### Simplifying cost structure of CE 208 
 * Joined equivalent variables [aux(227),s(1440),s(1441)] into aux(227)
 * Joined equivalent variables [s(1442),s(1443)] into s(1442)
 * Renamed intermediate variables: 
[(eq(199,1),aux(166))>>s(1444),(eq(199,1),s(1029))>>s(1445)]

#### Simplifying cost structure of CE 199 
 * Renamed intermediate variables: 
[(eq(204,1),aux(169))>>s(1446),(eq(204,1),aux(170))>>s(1447),(eq(204,1),s(1038))>>s(1448),(eq(204,1),s(1040))>>s(1449)]

#### Simplifying cost structure of CE 204 
 * Joined equivalent variables [aux(228),s(1446),s(1447)] into aux(228)
 * Joined equivalent variables [s(1448),s(1449)] into s(1448)
 * Renamed intermediate variables: 
[(eq(209,1),aux(181))>>s(1450),(eq(209,1),aux(182))>>s(1451),(eq(209,1),aux(183))>>s(1452),(eq(209,1),aux(184))>>s(1453),(eq(209,1),aux(185))>>s(1454),(eq(209,1),aux(186))>>s(1455),(eq(209,1),s(1117))>>s(1456),(eq(209,1),s(1066))>>s(1457),(eq(209,1),s(1073))>>s(1458),(eq(209,1),s(1074))>>s(1459),(eq(209,1),s(1075))>>s(1460),(eq(209,1),s(1077))>>s(1461),(eq(209,1),s(1078))>>s(1462),(eq(209,1),s(1079))>>s(1463),(eq(209,1),s(1080))>>s(1464),(eq(209,1),s(1081))>>s(1465),(eq(209,1),s(1082))>>s(1466),(eq(209,1),s(1083))>>s(1467),(eq(209,1),s(1084))>>s(1468),(eq(209,1),s(1085))>>s(1469),(eq(209,1),s(1086))>>s(1470),(eq(209,1),s(1087))>>s(1471),(eq(209,1),s(1088))>>s(1472),(eq(209,1),s(1089))>>s(1473)]

#### Simplifying cost structure of CE 209 
 * Joined equivalent variables [aux(229),s(1451),s(1453)] into aux(229)
 * Joined equivalent variables [aux(230),s(1452),s(1454)] into aux(230)
 * Joined equivalent variables [s(1456),s(1457)] into s(1456)
 * Joined equivalent variables [aux(231),aux(228),aux(230),s(1444)] into aux(231)
 * Joined equivalent variables [s(1445),s(1448),s(1456)] into s(1445)
 * Renamed intermediate variables: 
[(eq(200,1),aux(167))>>s(1474),(eq(200,1),aux(168))>>s(1475),(eq(200,1),s(1032))>>s(1476),(eq(200,1),s(1034))>>s(1477)]

#### Simplifying cost structure of CE 200 
 * Renamed intermediate variables: 
[(eq(205,1),aux(171))>>s(1478),(eq(205,1),aux(172))>>s(1479),(eq(205,1),s(1044))>>s(1480),(eq(205,1),s(1046))>>s(1481)]

#### Simplifying cost structure of CE 205 
 * Joined equivalent variables [aux(232),s(1478),s(1479)] into aux(232)
 * Joined equivalent variables [s(1480),s(1481)] into s(1480)
 * Renamed intermediate variables: 
[(eq(210,1),aux(199))>>s(1482),(eq(210,1),aux(200))>>s(1483),(eq(210,1),aux(201))>>s(1484),(eq(210,1),aux(202))>>s(1485),(eq(210,1),aux(203))>>s(1486),(eq(210,1),aux(204))>>s(1487),(eq(210,1),aux(205))>>s(1488),(eq(210,1),s(1195))>>s(1489),(eq(210,1),s(1196))>>s(1490),(eq(210,1),s(1129))>>s(1491),(eq(210,1),s(1199))>>s(1492),(eq(210,1),s(1200))>>s(1493),(eq(210,1),s(1201))>>s(1494),(eq(210,1),s(1202))>>s(1495),(eq(210,1),s(1203))>>s(1496),(eq(210,1),s(1204))>>s(1497),(eq(210,1),s(1205))>>s(1498),(eq(210,1),s(1206))>>s(1499),(eq(210,1),s(1207))>>s(1500),(eq(210,1),s(1208))>>s(1501),(eq(210,1),s(1209))>>s(1502),(eq(210,1),s(1210))>>s(1503),(eq(210,1),s(1211))>>s(1504),(eq(210,1),s(1212))>>s(1505),(eq(210,1),s(1213))>>s(1506),(eq(210,1),s(1126))>>s(1507),(eq(210,1),s(1127))>>s(1508),(eq(210,1),s(1128))>>s(1509),(eq(210,1),s(1130))>>s(1510),(eq(210,1),s(1131))>>s(1511),(eq(210,1),s(1132))>>s(1512),(eq(210,1),s(1133))>>s(1513),(eq(210,1),s(1134))>>s(1514),(eq(210,1),s(1135))>>s(1515),(eq(210,1),s(1136))>>s(1516),(eq(210,1),s(1137))>>s(1517),(eq(210,1),s(1138))>>s(1518),(eq(210,1),s(1139))>>s(1519),(eq(210,1),s(1140))>>s(1520),(eq(210,1),s(1141))>>s(1521),(eq(210,1),s(1142))>>s(1522),(eq(210,1),s(1143))>>s(1523),(eq(210,1),s(1144))>>s(1524),(eq(210,1),s(1145))>>s(1525),(eq(210,1),s(1146))>>s(1526),(eq(210,1),s(1147))>>s(1527),(eq(210,1),s(1148))>>s(1528),(eq(210,1),s(1149))>>s(1529),(eq(210,1),s(1150))>>s(1530),(eq(210,1),s(1151))>>s(1531),(eq(210,1),s(1185))>>s(1532),(eq(210,1),s(1186))>>s(1533),(eq(210,1),s(1187))>>s(1534),(eq(210,1),s(1188))>>s(1535),(eq(210,1),s(1189))>>s(1536)]

#### Simplifying cost structure of CE 210 
 * Joined equivalent variables [aux(233),s(1483),s(1486)] into aux(233)
 * Joined equivalent variables [aux(234),s(1484),s(1487)] into aux(234)
 * Joined equivalent variables [aux(234),s(1490)] into aux(234)
 * Joined equivalent variables [s(1491),s(1532)] into s(1491)
 * Joined equivalent variables [s(1533),s(1534)] into s(1533)
 * Joined equivalent variables [s(1535),s(1536)] into s(1535)
 * Joined equivalent variables [aux(235),aux(232),aux(234),s(1475)] into aux(235)
 * Joined equivalent variables [s(1477),s(1480),s(1491)] into s(1477)
 * Renamed intermediate variables: 
[(eq(206,1),aux(177))>>s(1537),(eq(206,1),aux(178))>>s(1538),(eq(206,1),s(1052))>>s(1539),(eq(206,1),s(1050))>>s(1540),(eq(206,1),s(1053))>>s(1541),(eq(206,1),s(1054))>>s(1542)]

#### Simplifying cost structure of CE 206 
 * Joined equivalent variables [aux(236),s(1537),s(1538)] into aux(236)
 * Joined equivalent variables [aux(236),s(1539)] into aux(236)
 * Joined equivalent variables [s(1540),s(1541)] into s(1540)
 * Joined equivalent variables [s(1540),s(1542)] into s(1540)
 * Renamed intermediate variables: 
[(eq(211,1),aux(212))>>s(1543),(eq(211,1),aux(213))>>s(1544),(eq(211,1),aux(214))>>s(1545),(eq(211,1),aux(215))>>s(1546),(eq(211,1),aux(216))>>s(1547),(eq(211,1),aux(217))>>s(1548),(eq(211,1),s(1313))>>s(1549),(eq(211,1),s(1314))>>s(1550),(eq(211,1),s(1253))>>s(1551),(eq(211,1),s(1317))>>s(1552),(eq(211,1),s(1318))>>s(1553),(eq(211,1),s(1319))>>s(1554),(eq(211,1),s(1320))>>s(1555),(eq(211,1),s(1321))>>s(1556),(eq(211,1),s(1322))>>s(1557),(eq(211,1),s(1323))>>s(1558),(eq(211,1),s(1324))>>s(1559),(eq(211,1),s(1325))>>s(1560),(eq(211,1),s(1326))>>s(1561),(eq(211,1),s(1327))>>s(1562),(eq(211,1),s(1328))>>s(1563),(eq(211,1),s(1329))>>s(1564),(eq(211,1),s(1330))>>s(1565),(eq(211,1),s(1331))>>s(1566),(eq(211,1),s(1332))>>s(1567),(eq(211,1),s(1333))>>s(1568),(eq(211,1),s(1334))>>s(1569),(eq(211,1),s(1335))>>s(1570),(eq(211,1),s(1336))>>s(1571),(eq(211,1),s(1337))>>s(1572),(eq(211,1),s(1338))>>s(1573),(eq(211,1),s(1339))>>s(1574),(eq(211,1),s(1340))>>s(1575),(eq(211,1),s(1250))>>s(1576),(eq(211,1),s(1251))>>s(1577),(eq(211,1),s(1252))>>s(1578),(eq(211,1),s(1254))>>s(1579),(eq(211,1),s(1255))>>s(1580),(eq(211,1),s(1256))>>s(1581),(eq(211,1),s(1257))>>s(1582),(eq(211,1),s(1258))>>s(1583),(eq(211,1),s(1259))>>s(1584),(eq(211,1),s(1260))>>s(1585),(eq(211,1),s(1261))>>s(1586),(eq(211,1),s(1262))>>s(1587),(eq(211,1),s(1263))>>s(1588),(eq(211,1),s(1264))>>s(1589),(eq(211,1),s(1265))>>s(1590),(eq(211,1),s(1266))>>s(1591),(eq(211,1),s(1267))>>s(1592),(eq(211,1),s(1268))>>s(1593),(eq(211,1),s(1269))>>s(1594),(eq(211,1),s(1270))>>s(1595),(eq(211,1),s(1271))>>s(1596),(eq(211,1),s(1272))>>s(1597),(eq(211,1),s(1273))>>s(1598),(eq(211,1),s(1274))>>s(1599),(eq(211,1),s(1275))>>s(1600)]

#### Simplifying cost structure of CE 211 
 * Joined equivalent variables [aux(237),s(1544),s(1546)] into aux(237)
 * Joined equivalent variables [aux(238),s(1545),s(1547)] into aux(238)
 * Joined equivalent variables [aux(238),s(1550)] into aux(238)
 * Joined equivalent variables [aux(239),aux(236),aux(238)] into aux(239)
 * Joined equivalent variables [s(1540),s(1551)] into s(1540)
 * Renamed intermediate variables: 
[(eq(212,1),aux(224))>>s(1601),(eq(212,1),aux(225))>>s(1602),(eq(212,1),aux(226))>>s(1603),(eq(212,1),s(1379))>>s(1604),(eq(212,1),s(1380))>>s(1605),(eq(212,1),s(1374))>>s(1606),(eq(212,1),s(1383))>>s(1607),(eq(212,1),s(1384))>>s(1608),(eq(212,1),s(1385))>>s(1609),(eq(212,1),s(1386))>>s(1610),(eq(212,1),s(1387))>>s(1611),(eq(212,1),s(1388))>>s(1612),(eq(212,1),s(1389))>>s(1613),(eq(212,1),s(1390))>>s(1614),(eq(212,1),s(1391))>>s(1615),(eq(212,1),s(1392))>>s(1616),(eq(212,1),s(1393))>>s(1617),(eq(212,1),s(1394))>>s(1618),(eq(212,1),s(1395))>>s(1619),(eq(212,1),s(1396))>>s(1620),(eq(212,1),s(1397))>>s(1621),(eq(212,1),s(1398))>>s(1622),(eq(212,1),s(1399))>>s(1623),(eq(212,1),s(1400))>>s(1624),(eq(212,1),s(1401))>>s(1625),(eq(212,1),s(1402))>>s(1626),(eq(212,1),s(1403))>>s(1627),(eq(212,1),s(1404))>>s(1628),(eq(212,1),s(1405))>>s(1629),(eq(212,1),s(1406))>>s(1630)]

#### Simplifying cost structure of CE 212 
 * Joined equivalent variables [aux(240),s(1602),s(1603)] into aux(240)
 * Joined equivalent variables [aux(240),s(1605)] into aux(240)

#### Simplifying cost structure of CE 198 

#### Simplifying cost structure of CE 207 

#### Simplifying cost structure of CE 187 

#### Simplifying cost structure of CE 188 

#### Simplifying cost structure of CE 174 

#### Simplifying cost structure of CE 175 
 * Renamed intermediate variables: 
[(eq(189,1),aux(169))>>s(1631),(eq(189,1),aux(170))>>s(1632),(eq(189,1),s(1038))>>s(1633),(eq(189,1),s(1040))>>s(1634)]

#### Simplifying cost structure of CE 189 
 * Joined equivalent variables [aux(241),s(1631),s(1632)] into aux(241)
 * Joined equivalent variables [s(1633),s(1634)] into s(1633)
 * Renamed intermediate variables: 
[(eq(193,1),aux(179))>>s(1635),(eq(193,1),aux(180))>>s(1636),(eq(193,1),s(1062))>>s(1637),(eq(193,1),s(1060))>>s(1638)]

#### Simplifying cost structure of CE 193 
 * Joined equivalent variables [aux(242),s(1635),s(1636)] into aux(242)
 * Joined equivalent variables [s(1637),s(1638)] into s(1637)
 * Joined equivalent variables [aux(243),aux(241),aux(242)] into aux(243)
 * Joined equivalent variables [s(1633),s(1637)] into s(1633)
 * Renamed intermediate variables: 
[(eq(186,1),aux(162))>>s(1639),(eq(186,1),aux(163))>>s(1640),(eq(186,1),aux(164))>>s(1641),(eq(186,1),s(1016))>>s(1642),(eq(186,1),s(1019))>>s(1643),(eq(186,1),s(1020))>>s(1644)]

#### Simplifying cost structure of CE 186 
 * Renamed intermediate variables: 
[(eq(190,1),aux(171))>>s(1645),(eq(190,1),aux(172))>>s(1646),(eq(190,1),s(1044))>>s(1647),(eq(190,1),s(1046))>>s(1648)]

#### Simplifying cost structure of CE 190 
 * Joined equivalent variables [aux(244),s(1645),s(1646)] into aux(244)
 * Joined equivalent variables [s(1647),s(1648)] into s(1647)
 * Renamed intermediate variables: 
[(eq(194,1),aux(181))>>s(1649),(eq(194,1),aux(182))>>s(1650),(eq(194,1),aux(183))>>s(1651),(eq(194,1),aux(184))>>s(1652),(eq(194,1),aux(185))>>s(1653),(eq(194,1),aux(186))>>s(1654),(eq(194,1),s(1117))>>s(1655),(eq(194,1),s(1066))>>s(1656),(eq(194,1),s(1073))>>s(1657),(eq(194,1),s(1074))>>s(1658),(eq(194,1),s(1075))>>s(1659),(eq(194,1),s(1077))>>s(1660),(eq(194,1),s(1078))>>s(1661),(eq(194,1),s(1079))>>s(1662),(eq(194,1),s(1080))>>s(1663),(eq(194,1),s(1081))>>s(1664),(eq(194,1),s(1082))>>s(1665),(eq(194,1),s(1083))>>s(1666),(eq(194,1),s(1084))>>s(1667),(eq(194,1),s(1085))>>s(1668),(eq(194,1),s(1086))>>s(1669),(eq(194,1),s(1087))>>s(1670),(eq(194,1),s(1088))>>s(1671),(eq(194,1),s(1089))>>s(1672)]

#### Simplifying cost structure of CE 194 
 * Joined equivalent variables [aux(245),s(1651),s(1653)] into aux(245)
 * Joined equivalent variables [s(1655),s(1656)] into s(1655)
 * Joined equivalent variables [aux(246),s(1639),s(1652)] into aux(246)
 * Joined equivalent variables [aux(247),s(1640),s(1650)] into aux(247)
 * Joined equivalent variables [aux(248),aux(244),aux(245),s(1641)] into aux(248)
 * Joined equivalent variables [s(1643),s(1647),s(1655)] into s(1643)
 * Renamed intermediate variables: 
[(eq(191,1),aux(177))>>s(1673),(eq(191,1),aux(178))>>s(1674),(eq(191,1),s(1052))>>s(1675),(eq(191,1),s(1050))>>s(1676),(eq(191,1),s(1053))>>s(1677),(eq(191,1),s(1054))>>s(1678)]

#### Simplifying cost structure of CE 191 
 * Joined equivalent variables [aux(249),s(1673),s(1674)] into aux(249)
 * Joined equivalent variables [aux(249),s(1675)] into aux(249)
 * Joined equivalent variables [s(1676),s(1677)] into s(1676)
 * Joined equivalent variables [s(1676),s(1678)] into s(1676)
 * Renamed intermediate variables: 
[(eq(195,1),aux(199))>>s(1679),(eq(195,1),aux(200))>>s(1680),(eq(195,1),aux(201))>>s(1681),(eq(195,1),aux(202))>>s(1682),(eq(195,1),aux(203))>>s(1683),(eq(195,1),aux(204))>>s(1684),(eq(195,1),aux(205))>>s(1685),(eq(195,1),s(1195))>>s(1686),(eq(195,1),s(1196))>>s(1687),(eq(195,1),s(1129))>>s(1688),(eq(195,1),s(1199))>>s(1689),(eq(195,1),s(1200))>>s(1690),(eq(195,1),s(1201))>>s(1691),(eq(195,1),s(1202))>>s(1692),(eq(195,1),s(1203))>>s(1693),(eq(195,1),s(1204))>>s(1694),(eq(195,1),s(1205))>>s(1695),(eq(195,1),s(1206))>>s(1696),(eq(195,1),s(1207))>>s(1697),(eq(195,1),s(1208))>>s(1698),(eq(195,1),s(1209))>>s(1699),(eq(195,1),s(1210))>>s(1700),(eq(195,1),s(1211))>>s(1701),(eq(195,1),s(1212))>>s(1702),(eq(195,1),s(1213))>>s(1703),(eq(195,1),s(1126))>>s(1704),(eq(195,1),s(1127))>>s(1705),(eq(195,1),s(1128))>>s(1706),(eq(195,1),s(1130))>>s(1707),(eq(195,1),s(1131))>>s(1708),(eq(195,1),s(1132))>>s(1709),(eq(195,1),s(1133))>>s(1710),(eq(195,1),s(1134))>>s(1711),(eq(195,1),s(1135))>>s(1712),(eq(195,1),s(1136))>>s(1713),(eq(195,1),s(1137))>>s(1714),(eq(195,1),s(1138))>>s(1715),(eq(195,1),s(1139))>>s(1716),(eq(195,1),s(1140))>>s(1717),(eq(195,1),s(1141))>>s(1718),(eq(195,1),s(1142))>>s(1719),(eq(195,1),s(1143))>>s(1720),(eq(195,1),s(1144))>>s(1721),(eq(195,1),s(1145))>>s(1722),(eq(195,1),s(1146))>>s(1723),(eq(195,1),s(1147))>>s(1724),(eq(195,1),s(1148))>>s(1725),(eq(195,1),s(1149))>>s(1726),(eq(195,1),s(1150))>>s(1727),(eq(195,1),s(1151))>>s(1728),(eq(195,1),s(1185))>>s(1729),(eq(195,1),s(1186))>>s(1730),(eq(195,1),s(1187))>>s(1731),(eq(195,1),s(1188))>>s(1732),(eq(195,1),s(1189))>>s(1733)]

#### Simplifying cost structure of CE 195 
 * Joined equivalent variables [aux(250),s(1681),s(1684)] into aux(250)
 * Joined equivalent variables [aux(250),s(1687)] into aux(250)
 * Joined equivalent variables [s(1688),s(1729)] into s(1688)
 * Joined equivalent variables [s(1730),s(1731)] into s(1730)
 * Joined equivalent variables [s(1732),s(1733)] into s(1732)
 * Joined equivalent variables [aux(251),aux(249),aux(250)] into aux(251)
 * Joined equivalent variables [s(1676),s(1688)] into s(1676)
 * Renamed intermediate variables: 
[(eq(196,1),aux(212))>>s(1734),(eq(196,1),aux(213))>>s(1735),(eq(196,1),aux(214))>>s(1736),(eq(196,1),aux(215))>>s(1737),(eq(196,1),aux(216))>>s(1738),(eq(196,1),aux(217))>>s(1739),(eq(196,1),s(1313))>>s(1740),(eq(196,1),s(1314))>>s(1741),(eq(196,1),s(1253))>>s(1742),(eq(196,1),s(1317))>>s(1743),(eq(196,1),s(1318))>>s(1744),(eq(196,1),s(1319))>>s(1745),(eq(196,1),s(1320))>>s(1746),(eq(196,1),s(1321))>>s(1747),(eq(196,1),s(1322))>>s(1748),(eq(196,1),s(1323))>>s(1749),(eq(196,1),s(1324))>>s(1750),(eq(196,1),s(1325))>>s(1751),(eq(196,1),s(1326))>>s(1752),(eq(196,1),s(1327))>>s(1753),(eq(196,1),s(1328))>>s(1754),(eq(196,1),s(1329))>>s(1755),(eq(196,1),s(1330))>>s(1756),(eq(196,1),s(1331))>>s(1757),(eq(196,1),s(1332))>>s(1758),(eq(196,1),s(1333))>>s(1759),(eq(196,1),s(1334))>>s(1760),(eq(196,1),s(1335))>>s(1761),(eq(196,1),s(1336))>>s(1762),(eq(196,1),s(1337))>>s(1763),(eq(196,1),s(1338))>>s(1764),(eq(196,1),s(1339))>>s(1765),(eq(196,1),s(1340))>>s(1766),(eq(196,1),s(1250))>>s(1767),(eq(196,1),s(1251))>>s(1768),(eq(196,1),s(1252))>>s(1769),(eq(196,1),s(1254))>>s(1770),(eq(196,1),s(1255))>>s(1771),(eq(196,1),s(1256))>>s(1772),(eq(196,1),s(1257))>>s(1773),(eq(196,1),s(1258))>>s(1774),(eq(196,1),s(1259))>>s(1775),(eq(196,1),s(1260))>>s(1776),(eq(196,1),s(1261))>>s(1777),(eq(196,1),s(1262))>>s(1778),(eq(196,1),s(1263))>>s(1779),(eq(196,1),s(1264))>>s(1780),(eq(196,1),s(1265))>>s(1781),(eq(196,1),s(1266))>>s(1782),(eq(196,1),s(1267))>>s(1783),(eq(196,1),s(1268))>>s(1784),(eq(196,1),s(1269))>>s(1785),(eq(196,1),s(1270))>>s(1786),(eq(196,1),s(1271))>>s(1787),(eq(196,1),s(1272))>>s(1788),(eq(196,1),s(1273))>>s(1789),(eq(196,1),s(1274))>>s(1790),(eq(196,1),s(1275))>>s(1791)]

#### Simplifying cost structure of CE 196 
 * Joined equivalent variables [aux(252),s(1736),s(1738)] into aux(252)
 * Joined equivalent variables [aux(252),s(1741)] into aux(252)
 * Renamed intermediate variables: 
[(eq(197,1),aux(224))>>s(1792),(eq(197,1),aux(225))>>s(1793),(eq(197,1),aux(226))>>s(1794),(eq(197,1),s(1379))>>s(1795),(eq(197,1),s(1380))>>s(1796),(eq(197,1),s(1374))>>s(1797),(eq(197,1),s(1383))>>s(1798),(eq(197,1),s(1384))>>s(1799),(eq(197,1),s(1385))>>s(1800),(eq(197,1),s(1386))>>s(1801),(eq(197,1),s(1387))>>s(1802),(eq(197,1),s(1388))>>s(1803),(eq(197,1),s(1389))>>s(1804),(eq(197,1),s(1390))>>s(1805),(eq(197,1),s(1391))>>s(1806),(eq(197,1),s(1392))>>s(1807),(eq(197,1),s(1393))>>s(1808),(eq(197,1),s(1394))>>s(1809),(eq(197,1),s(1395))>>s(1810),(eq(197,1),s(1396))>>s(1811),(eq(197,1),s(1397))>>s(1812),(eq(197,1),s(1398))>>s(1813),(eq(197,1),s(1399))>>s(1814),(eq(197,1),s(1400))>>s(1815),(eq(197,1),s(1401))>>s(1816),(eq(197,1),s(1402))>>s(1817),(eq(197,1),s(1403))>>s(1818),(eq(197,1),s(1404))>>s(1819),(eq(197,1),s(1405))>>s(1820),(eq(197,1),s(1406))>>s(1821)]

#### Simplifying cost structure of CE 197 
 * Joined equivalent variables [aux(253),s(1793),s(1794)] into aux(253)
 * Joined equivalent variables [aux(253),s(1796)] into aux(253)

#### Simplifying cost structure of CE 185 

#### Simplifying cost structure of CE 192 
 * Renamed intermediate variables: 
[(eq(176,1),aux(169))>>s(1822),(eq(176,1),aux(170))>>s(1823),(eq(176,1),s(1038))>>s(1824),(eq(176,1),s(1040))>>s(1825)]

#### Simplifying cost structure of CE 176 
 * Joined equivalent variables [aux(254),s(1822),s(1823)] into aux(254)
 * Joined equivalent variables [s(1824),s(1825)] into s(1824)
 * Renamed intermediate variables: 
[(eq(180,1),aux(179))>>s(1826),(eq(180,1),aux(180))>>s(1827),(eq(180,1),s(1062))>>s(1828),(eq(180,1),s(1060))>>s(1829)]

#### Simplifying cost structure of CE 180 
 * Joined equivalent variables [aux(255),s(1826),s(1827)] into aux(255)
 * Joined equivalent variables [s(1828),s(1829)] into s(1828)
 * Joined equivalent variables [aux(256),aux(254),aux(255)] into aux(256)
 * Joined equivalent variables [s(1824),s(1828)] into s(1824)
 * Renamed intermediate variables: 
[(eq(173,1),aux(162))>>s(1830),(eq(173,1),aux(163))>>s(1831),(eq(173,1),aux(164))>>s(1832),(eq(173,1),s(1016))>>s(1833),(eq(173,1),s(1019))>>s(1834),(eq(173,1),s(1020))>>s(1835)]

#### Simplifying cost structure of CE 173 
 * Renamed intermediate variables: 
[(eq(177,1),aux(171))>>s(1836),(eq(177,1),aux(172))>>s(1837),(eq(177,1),s(1044))>>s(1838),(eq(177,1),s(1046))>>s(1839)]

#### Simplifying cost structure of CE 177 
 * Joined equivalent variables [aux(257),s(1836),s(1837)] into aux(257)
 * Joined equivalent variables [s(1838),s(1839)] into s(1838)
 * Renamed intermediate variables: 
[(eq(181,1),aux(181))>>s(1840),(eq(181,1),aux(182))>>s(1841),(eq(181,1),aux(183))>>s(1842),(eq(181,1),aux(184))>>s(1843),(eq(181,1),aux(185))>>s(1844),(eq(181,1),aux(186))>>s(1845),(eq(181,1),s(1117))>>s(1846),(eq(181,1),s(1066))>>s(1847),(eq(181,1),s(1073))>>s(1848),(eq(181,1),s(1074))>>s(1849),(eq(181,1),s(1075))>>s(1850),(eq(181,1),s(1077))>>s(1851),(eq(181,1),s(1078))>>s(1852),(eq(181,1),s(1079))>>s(1853),(eq(181,1),s(1080))>>s(1854),(eq(181,1),s(1081))>>s(1855),(eq(181,1),s(1082))>>s(1856),(eq(181,1),s(1083))>>s(1857),(eq(181,1),s(1084))>>s(1858),(eq(181,1),s(1085))>>s(1859),(eq(181,1),s(1086))>>s(1860),(eq(181,1),s(1087))>>s(1861),(eq(181,1),s(1088))>>s(1862),(eq(181,1),s(1089))>>s(1863)]

#### Simplifying cost structure of CE 181 
 * Joined equivalent variables [aux(258),s(1842),s(1844)] into aux(258)
 * Joined equivalent variables [s(1846),s(1847)] into s(1846)
 * Joined equivalent variables [aux(259),s(1830),s(1843)] into aux(259)
 * Joined equivalent variables [aux(260),s(1831),s(1841)] into aux(260)
 * Joined equivalent variables [aux(261),aux(257),aux(258),s(1832)] into aux(261)
 * Joined equivalent variables [s(1834),s(1838),s(1846)] into s(1834)
 * Renamed intermediate variables: 
[(eq(178,1),aux(177))>>s(1864),(eq(178,1),aux(178))>>s(1865),(eq(178,1),s(1052))>>s(1866),(eq(178,1),s(1050))>>s(1867),(eq(178,1),s(1053))>>s(1868),(eq(178,1),s(1054))>>s(1869)]

#### Simplifying cost structure of CE 178 
 * Joined equivalent variables [aux(262),s(1864),s(1865)] into aux(262)
 * Joined equivalent variables [aux(262),s(1866)] into aux(262)
 * Joined equivalent variables [s(1867),s(1868)] into s(1867)
 * Joined equivalent variables [s(1867),s(1869)] into s(1867)
 * Renamed intermediate variables: 
[(eq(182,1),aux(199))>>s(1870),(eq(182,1),aux(200))>>s(1871),(eq(182,1),aux(201))>>s(1872),(eq(182,1),aux(202))>>s(1873),(eq(182,1),aux(203))>>s(1874),(eq(182,1),aux(204))>>s(1875),(eq(182,1),aux(205))>>s(1876),(eq(182,1),s(1195))>>s(1877),(eq(182,1),s(1196))>>s(1878),(eq(182,1),s(1129))>>s(1879),(eq(182,1),s(1199))>>s(1880),(eq(182,1),s(1200))>>s(1881),(eq(182,1),s(1201))>>s(1882),(eq(182,1),s(1202))>>s(1883),(eq(182,1),s(1203))>>s(1884),(eq(182,1),s(1204))>>s(1885),(eq(182,1),s(1205))>>s(1886),(eq(182,1),s(1206))>>s(1887),(eq(182,1),s(1207))>>s(1888),(eq(182,1),s(1208))>>s(1889),(eq(182,1),s(1209))>>s(1890),(eq(182,1),s(1210))>>s(1891),(eq(182,1),s(1211))>>s(1892),(eq(182,1),s(1212))>>s(1893),(eq(182,1),s(1213))>>s(1894),(eq(182,1),s(1126))>>s(1895),(eq(182,1),s(1127))>>s(1896),(eq(182,1),s(1128))>>s(1897),(eq(182,1),s(1130))>>s(1898),(eq(182,1),s(1131))>>s(1899),(eq(182,1),s(1132))>>s(1900),(eq(182,1),s(1133))>>s(1901),(eq(182,1),s(1134))>>s(1902),(eq(182,1),s(1135))>>s(1903),(eq(182,1),s(1136))>>s(1904),(eq(182,1),s(1137))>>s(1905),(eq(182,1),s(1138))>>s(1906),(eq(182,1),s(1139))>>s(1907),(eq(182,1),s(1140))>>s(1908),(eq(182,1),s(1141))>>s(1909),(eq(182,1),s(1142))>>s(1910),(eq(182,1),s(1143))>>s(1911),(eq(182,1),s(1144))>>s(1912),(eq(182,1),s(1145))>>s(1913),(eq(182,1),s(1146))>>s(1914),(eq(182,1),s(1147))>>s(1915),(eq(182,1),s(1148))>>s(1916),(eq(182,1),s(1149))>>s(1917),(eq(182,1),s(1150))>>s(1918),(eq(182,1),s(1151))>>s(1919),(eq(182,1),s(1185))>>s(1920),(eq(182,1),s(1186))>>s(1921),(eq(182,1),s(1187))>>s(1922),(eq(182,1),s(1188))>>s(1923),(eq(182,1),s(1189))>>s(1924)]

#### Simplifying cost structure of CE 182 
 * Joined equivalent variables [aux(263),s(1872),s(1875)] into aux(263)
 * Joined equivalent variables [aux(263),s(1878)] into aux(263)
 * Joined equivalent variables [s(1879),s(1920)] into s(1879)
 * Joined equivalent variables [s(1921),s(1922)] into s(1921)
 * Joined equivalent variables [s(1923),s(1924)] into s(1923)
 * Joined equivalent variables [aux(264),aux(262),aux(263)] into aux(264)
 * Joined equivalent variables [s(1867),s(1879)] into s(1867)
 * Renamed intermediate variables: 
[(eq(183,1),aux(212))>>s(1925),(eq(183,1),aux(213))>>s(1926),(eq(183,1),aux(214))>>s(1927),(eq(183,1),aux(215))>>s(1928),(eq(183,1),aux(216))>>s(1929),(eq(183,1),aux(217))>>s(1930),(eq(183,1),s(1313))>>s(1931),(eq(183,1),s(1314))>>s(1932),(eq(183,1),s(1253))>>s(1933),(eq(183,1),s(1317))>>s(1934),(eq(183,1),s(1318))>>s(1935),(eq(183,1),s(1319))>>s(1936),(eq(183,1),s(1320))>>s(1937),(eq(183,1),s(1321))>>s(1938),(eq(183,1),s(1322))>>s(1939),(eq(183,1),s(1323))>>s(1940),(eq(183,1),s(1324))>>s(1941),(eq(183,1),s(1325))>>s(1942),(eq(183,1),s(1326))>>s(1943),(eq(183,1),s(1327))>>s(1944),(eq(183,1),s(1328))>>s(1945),(eq(183,1),s(1329))>>s(1946),(eq(183,1),s(1330))>>s(1947),(eq(183,1),s(1331))>>s(1948),(eq(183,1),s(1332))>>s(1949),(eq(183,1),s(1333))>>s(1950),(eq(183,1),s(1334))>>s(1951),(eq(183,1),s(1335))>>s(1952),(eq(183,1),s(1336))>>s(1953),(eq(183,1),s(1337))>>s(1954),(eq(183,1),s(1338))>>s(1955),(eq(183,1),s(1339))>>s(1956),(eq(183,1),s(1340))>>s(1957),(eq(183,1),s(1250))>>s(1958),(eq(183,1),s(1251))>>s(1959),(eq(183,1),s(1252))>>s(1960),(eq(183,1),s(1254))>>s(1961),(eq(183,1),s(1255))>>s(1962),(eq(183,1),s(1256))>>s(1963),(eq(183,1),s(1257))>>s(1964),(eq(183,1),s(1258))>>s(1965),(eq(183,1),s(1259))>>s(1966),(eq(183,1),s(1260))>>s(1967),(eq(183,1),s(1261))>>s(1968),(eq(183,1),s(1262))>>s(1969),(eq(183,1),s(1263))>>s(1970),(eq(183,1),s(1264))>>s(1971),(eq(183,1),s(1265))>>s(1972),(eq(183,1),s(1266))>>s(1973),(eq(183,1),s(1267))>>s(1974),(eq(183,1),s(1268))>>s(1975),(eq(183,1),s(1269))>>s(1976),(eq(183,1),s(1270))>>s(1977),(eq(183,1),s(1271))>>s(1978),(eq(183,1),s(1272))>>s(1979),(eq(183,1),s(1273))>>s(1980),(eq(183,1),s(1274))>>s(1981),(eq(183,1),s(1275))>>s(1982)]

#### Simplifying cost structure of CE 183 
 * Joined equivalent variables [aux(265),s(1927),s(1929)] into aux(265)
 * Joined equivalent variables [aux(265),s(1932)] into aux(265)
 * Renamed intermediate variables: 
[(eq(184,1),aux(224))>>s(1983),(eq(184,1),aux(225))>>s(1984),(eq(184,1),aux(226))>>s(1985),(eq(184,1),s(1379))>>s(1986),(eq(184,1),s(1380))>>s(1987),(eq(184,1),s(1374))>>s(1988),(eq(184,1),s(1383))>>s(1989),(eq(184,1),s(1384))>>s(1990),(eq(184,1),s(1385))>>s(1991),(eq(184,1),s(1386))>>s(1992),(eq(184,1),s(1387))>>s(1993),(eq(184,1),s(1388))>>s(1994),(eq(184,1),s(1389))>>s(1995),(eq(184,1),s(1390))>>s(1996),(eq(184,1),s(1391))>>s(1997),(eq(184,1),s(1392))>>s(1998),(eq(184,1),s(1393))>>s(1999),(eq(184,1),s(1394))>>s(2000),(eq(184,1),s(1395))>>s(2001),(eq(184,1),s(1396))>>s(2002),(eq(184,1),s(1397))>>s(2003),(eq(184,1),s(1398))>>s(2004),(eq(184,1),s(1399))>>s(2005),(eq(184,1),s(1400))>>s(2006),(eq(184,1),s(1401))>>s(2007),(eq(184,1),s(1402))>>s(2008),(eq(184,1),s(1403))>>s(2009),(eq(184,1),s(1404))>>s(2010),(eq(184,1),s(1405))>>s(2011),(eq(184,1),s(1406))>>s(2012)]

#### Simplifying cost structure of CE 184 
 * Joined equivalent variables [aux(266),s(1984),s(1985)] into aux(266)
 * Joined equivalent variables [aux(266),s(1987)] into aux(266)

#### Simplifying cost structure of CE 172 

#### Simplifying cost structure of CE 179 

#### Cost of chains of eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B):
* Chain [131]: 5
  with precondition: [V_0=0,V_s+1=V_PL_bufend,V_s+1=V_2] 

* Chain [130]: 5
  with precondition: [V_0=0,V_s+2=V_PL_bufend,V_s+1=V_2] 

* Chain [129]: 5*s(1442)+3
  Such that:aux(227) =< -V_s+V_PL_bufend
s(1442) =< aux(227)

  with precondition: [V_0=0,V_2=V_s+1,V_PL_bufend>=V_2] 

* Chain [128]: 89*s(1445)+36*s(1460)+12*s(1472)+12*s(1473)+6
  Such that:s(1455) =< -V_s/2+V_PL_bufend/2
aux(231) =< -V_s+V_PL_bufend
s(1445) =< aux(231)
s(1460) =< aux(231)
s(1460) =< s(1455)
s(1461) =< aux(231)
s(1462) =< aux(231)-2
s(1463) =< max([aux(231),s(1461),s(1461)])
s(1464) =< s(1445)*s(1461)
s(1465) =< s(1445)*s(1462)
s(1466) =< max([0,aux(231),0])+aux(231)
s(1467) =< s(1460)*s(1461)
s(1468) =< s(1460)*s(1462)
s(1463) =< s(1466)+1
s(1469) =< s(1467)*2
s(1470) =< s(1465)+s(1468)+aux(231)
s(1470) =< s(1460)*s(1466)
s(1471) =< s(1464)+s(1467)+aux(231)
s(1471) =< s(1469)+s(1469)
s(1471) =< s(1445)*s(1463)
s(1472) =< s(1471)
s(1473) =< s(1470)

  with precondition: [V_0=0,V_2=V_s+1,V_PL_bufend>=V_2+1] 

* Chain [127]: 2*s(1476)+228*s(1477)+36*s(1492)+60*s(1493)+12*s(1505)+12*s(1506)+36*s(1510)+12*s(1522)+12*s(1523)+72*s(1524)+24*s(1530)+24*s(1531)+10*s(1535)+6
  Such that:s(1474) =< 1
s(1482) =< -2*V_s+2*V_PL_bufend
s(1485) =< -V_s+V_PL_bufend+1
s(1488) =< -V_s/2+V_PL_bufend/2
aux(235) =< -V_s+V_PL_bufend
s(1476) =< s(1474)
s(1477) =< aux(235)
s(1489) =< s(1482)
s(1489) =< aux(235)
s(1492) =< s(1489)
s(1493) =< s(1489)
s(1492) =< aux(235)
s(1494) =< s(1489)
s(1495) =< s(1489)-2
s(1496) =< max([aux(235),s(1494),s(1494)])
s(1497) =< s(1493)*s(1494)
s(1498) =< s(1493)*s(1495)
s(1499) =< max([aux(235),s(1489),0])+s(1489)
s(1500) =< s(1492)*s(1494)
s(1501) =< s(1492)*s(1495)
s(1496) =< s(1499)+1
s(1502) =< s(1500)*2
s(1503) =< s(1498)+s(1501)+aux(235)
s(1503) =< s(1492)*s(1499)
s(1504) =< s(1497)+s(1500)+aux(235)
s(1504) =< s(1502)+s(1502)+s(1482)
s(1504) =< s(1493)*s(1496)
s(1505) =< s(1504)
s(1506) =< s(1503)
s(1509) =< aux(235)
s(1509) =< s(1488)
s(1510) =< aux(235)
s(1510) =< s(1488)
s(1510) =< s(1509)
s(1511) =< aux(235)
s(1512) =< aux(235)-2
s(1513) =< max([aux(235),s(1511),s(1511)])
s(1514) =< s(1477)*s(1511)
s(1515) =< s(1477)*s(1512)
s(1516) =< max([0,aux(235),0])+aux(235)
s(1517) =< s(1510)*s(1511)
s(1518) =< s(1510)*s(1512)
s(1513) =< s(1516)+1
s(1519) =< s(1517)*2
s(1520) =< s(1515)+s(1518)+aux(235)
s(1520) =< s(1510)*s(1516)
s(1521) =< s(1514)+s(1517)+aux(235)
s(1521) =< s(1519)+s(1519)
s(1521) =< s(1477)*s(1513)
s(1522) =< s(1521)
s(1523) =< s(1520)
s(1524) =< aux(235)
s(1524) =< s(1488)
s(1525) =< s(1524)*s(1511)
s(1526) =< s(1524)*s(1512)
s(1527) =< s(1525)*2
s(1528) =< s(1515)+s(1526)+aux(235)
s(1528) =< s(1524)*s(1516)
s(1529) =< s(1514)+s(1525)+aux(235)
s(1529) =< s(1527)+s(1527)
s(1529) =< s(1477)*s(1513)
s(1530) =< s(1529)
s(1531) =< s(1528)
s(1533) =< aux(235)
s(1533) =< s(1485)
s(1535) =< s(1533)

  with precondition: [V_0=0,V_2=V_s+1,V_PL_bufend>=V_2+2] 

* Chain [126]: 184*s(1540)+204*s(1553)+36*s(1554)+12*s(1566)+12*s(1567)+72*s(1568)+24*s(1574)+24*s(1575)+36*s(1579)+12*s(1591)+12*s(1592)+36*s(1593)+12*s(1599)+12*s(1600)+6
  Such that:s(1543) =< -2*V_s+2*V_PL_bufend
s(1548) =< -V_s/2+V_PL_bufend/2
aux(239) =< -V_s+V_PL_bufend
s(1549) =< s(1543)
s(1540) =< aux(239)
s(1549) =< aux(239)
s(1552) =< s(1549)
s(1552) =< aux(239)
s(1553) =< s(1549)
s(1554) =< s(1549)
s(1554) =< aux(239)
s(1554) =< s(1552)
s(1555) =< s(1549)
s(1556) =< s(1549)-2
s(1557) =< max([aux(239),s(1555),s(1555)])
s(1558) =< s(1553)*s(1555)
s(1559) =< s(1553)*s(1556)
s(1560) =< max([aux(239),s(1549),0])+s(1549)
s(1561) =< s(1554)*s(1555)
s(1562) =< s(1554)*s(1556)
s(1557) =< s(1560)+1
s(1563) =< s(1561)*2
s(1564) =< s(1559)+s(1562)+aux(239)
s(1564) =< s(1554)*s(1560)
s(1565) =< s(1558)+s(1561)+aux(239)
s(1565) =< s(1563)+s(1563)+s(1543)
s(1565) =< s(1553)*s(1557)
s(1566) =< s(1565)
s(1567) =< s(1564)
s(1568) =< s(1549)
s(1568) =< aux(239)
s(1569) =< s(1568)*s(1555)
s(1570) =< s(1568)*s(1556)
s(1571) =< s(1569)*2
s(1572) =< s(1559)+s(1570)+aux(239)
s(1572) =< s(1568)*s(1560)
s(1573) =< s(1558)+s(1569)+aux(239)
s(1573) =< s(1571)+s(1571)+s(1543)
s(1573) =< s(1553)*s(1557)
s(1574) =< s(1573)
s(1575) =< s(1572)
s(1578) =< aux(239)
s(1578) =< s(1548)
s(1579) =< aux(239)
s(1579) =< s(1548)
s(1579) =< s(1578)
s(1580) =< aux(239)
s(1581) =< aux(239)-2
s(1582) =< max([aux(239),s(1580),s(1580)])
s(1583) =< s(1540)*s(1580)
s(1584) =< s(1540)*s(1581)
s(1585) =< max([0,aux(239),0])+aux(239)
s(1586) =< s(1579)*s(1580)
s(1587) =< s(1579)*s(1581)
s(1582) =< s(1585)+1
s(1588) =< s(1586)*2
s(1589) =< s(1584)+s(1587)+aux(239)
s(1589) =< s(1579)*s(1585)
s(1590) =< s(1583)+s(1586)+aux(239)
s(1590) =< s(1588)+s(1588)
s(1590) =< s(1540)*s(1582)
s(1591) =< s(1590)
s(1592) =< s(1589)
s(1593) =< aux(239)
s(1593) =< s(1548)
s(1594) =< s(1593)*s(1580)
s(1595) =< s(1593)*s(1581)
s(1596) =< s(1594)*2
s(1597) =< s(1584)+s(1595)+aux(239)
s(1597) =< s(1593)*s(1585)
s(1598) =< s(1583)+s(1594)+aux(239)
s(1598) =< s(1596)+s(1596)
s(1598) =< s(1540)*s(1582)
s(1599) =< s(1598)
s(1600) =< s(1597)

  with precondition: [V_0=0,V_2=V_s+1,V_PL_bufend>=V_2+3] 

* Chain [125]: 2*s(1606)+156*s(1608)+36*s(1609)+12*s(1621)+12*s(1622)+36*s(1623)+12*s(1629)+12*s(1630)+6
  Such that:s(1601) =< -2*V_s+2*V_PL_bufend
aux(240) =< -V_s+V_PL_bufend
s(1604) =< s(1601)
s(1606) =< aux(240)
s(1604) =< aux(240)
s(1607) =< s(1604)
s(1607) =< aux(240)
s(1608) =< s(1604)
s(1609) =< s(1604)
s(1609) =< aux(240)
s(1609) =< s(1607)
s(1610) =< s(1604)
s(1611) =< s(1604)-2
s(1612) =< max([aux(240),s(1610),s(1610)])
s(1613) =< s(1608)*s(1610)
s(1614) =< s(1608)*s(1611)
s(1615) =< max([aux(240),s(1604),0])+s(1604)
s(1616) =< s(1609)*s(1610)
s(1617) =< s(1609)*s(1611)
s(1612) =< s(1615)+1
s(1618) =< s(1616)*2
s(1619) =< s(1614)+s(1617)+aux(240)
s(1619) =< s(1609)*s(1615)
s(1620) =< s(1613)+s(1616)+aux(240)
s(1620) =< s(1618)+s(1618)+s(1601)
s(1620) =< s(1608)*s(1612)
s(1621) =< s(1620)
s(1622) =< s(1619)
s(1623) =< s(1604)
s(1623) =< aux(240)
s(1624) =< s(1623)*s(1610)
s(1625) =< s(1623)*s(1611)
s(1626) =< s(1624)*2
s(1627) =< s(1614)+s(1625)+aux(240)
s(1627) =< s(1623)*s(1615)
s(1628) =< s(1613)+s(1624)+aux(240)
s(1628) =< s(1626)+s(1626)+s(1601)
s(1628) =< s(1608)*s(1612)
s(1629) =< s(1628)
s(1630) =< s(1627)

  with precondition: [V_0=0,V_2=V_s+1,V_PL_bufend>=V_2+4] 

* Chain [124]: 3
  with precondition: [V_0=0,V_2=V_s+1,V_2>=V_PL_bufend+1] 

* Chain [123]: 5
  with precondition: [V_s+2=V_PL_bufend,V_s+1=V_2,0>=V_0+1] 

* Chain [122]: 5
  with precondition: [V_s+2=V_PL_bufend,V_s+1=V_2,V_0>=1] 

* Chain [121]: 11*s(1633)+3
  Such that:aux(243) =< -V_s+V_PL_bufend
s(1633) =< aux(243)

  with precondition: [V_2=V_s+1,0>=V_0+1,V_PL_bufend>=V_2+1] 

* Chain [120]: 2*s(1642)+89*s(1643)+4*s(1644)+36*s(1659)+12*s(1671)+12*s(1672)+6
  Such that:s(1649) =< -2*V_s+2*V_PL_bufend
s(1654) =< -V_s/2+V_PL_bufend/2
aux(246) =< 1
aux(247) =< 2
aux(248) =< -V_s+V_PL_bufend
s(1642) =< aux(246)
s(1643) =< aux(248)
s(1644) =< aux(247)
s(1657) =< s(1649)
s(1657) =< aux(247)
s(1658) =< aux(246)
s(1658) =< aux(248)
s(1659) =< aux(248)
s(1659) =< s(1654)
s(1660) =< aux(248)
s(1661) =< aux(248)-2
s(1662) =< max([aux(248),s(1660),s(1660)])
s(1663) =< s(1643)*s(1660)
s(1664) =< s(1643)*s(1661)
s(1665) =< max([s(1658),aux(248),0])+aux(248)
s(1666) =< s(1659)*s(1660)
s(1667) =< s(1659)*s(1661)
s(1662) =< s(1665)+1
s(1668) =< s(1666)*2
s(1669) =< s(1664)+s(1667)+aux(248)
s(1669) =< s(1659)*s(1665)
s(1670) =< s(1663)+s(1666)+aux(248)
s(1670) =< s(1668)+s(1668)+s(1657)
s(1670) =< s(1643)*s(1662)
s(1671) =< s(1670)
s(1672) =< s(1669)

  with precondition: [V_2=V_s+1,0>=V_0+1,V_PL_bufend>=V_2+2] 

* Chain [119]: 236*s(1676)+36*s(1689)+60*s(1690)+12*s(1702)+12*s(1703)+36*s(1707)+12*s(1719)+12*s(1720)+72*s(1721)+24*s(1727)+24*s(1728)+10*s(1732)+6
  Such that:s(1683) =< 1
s(1680) =< 2
s(1679) =< -2*V_s+2*V_PL_bufend
s(1682) =< -V_s+V_PL_bufend+1
s(1685) =< -V_s/2+V_PL_bufend/2
aux(251) =< -V_s+V_PL_bufend
s(1686) =< s(1679)
s(1676) =< aux(251)
s(1686) =< aux(251)
s(1689) =< s(1686)
s(1690) =< s(1686)
s(1689) =< aux(251)
s(1691) =< s(1686)
s(1692) =< s(1686)-2
s(1693) =< max([aux(251),s(1691),s(1691)])
s(1694) =< s(1690)*s(1691)
s(1695) =< s(1690)*s(1692)
s(1696) =< max([aux(251),s(1686),0])+s(1686)
s(1697) =< s(1689)*s(1691)
s(1698) =< s(1689)*s(1692)
s(1693) =< s(1696)+1
s(1699) =< s(1697)*2
s(1700) =< s(1695)+s(1698)+aux(251)
s(1700) =< s(1689)*s(1696)
s(1701) =< s(1694)+s(1697)+aux(251)
s(1701) =< s(1699)+s(1699)+s(1679)
s(1701) =< s(1690)*s(1693)
s(1702) =< s(1701)
s(1703) =< s(1700)
s(1704) =< s(1679)
s(1704) =< s(1680)
s(1705) =< s(1683)
s(1705) =< aux(251)
s(1706) =< aux(251)
s(1706) =< s(1685)
s(1707) =< aux(251)
s(1707) =< s(1685)
s(1707) =< s(1706)
s(1708) =< aux(251)
s(1709) =< aux(251)-2
s(1710) =< max([aux(251),s(1708),s(1708)])
s(1711) =< s(1676)*s(1708)
s(1712) =< s(1676)*s(1709)
s(1713) =< max([s(1705),aux(251),0])+aux(251)
s(1714) =< s(1707)*s(1708)
s(1715) =< s(1707)*s(1709)
s(1710) =< s(1713)+1
s(1716) =< s(1714)*2
s(1717) =< s(1712)+s(1715)+aux(251)
s(1717) =< s(1707)*s(1713)
s(1718) =< s(1711)+s(1714)+aux(251)
s(1718) =< s(1716)+s(1716)+s(1704)
s(1718) =< s(1676)*s(1710)
s(1719) =< s(1718)
s(1720) =< s(1717)
s(1721) =< aux(251)
s(1721) =< s(1685)
s(1722) =< s(1721)*s(1708)
s(1723) =< s(1721)*s(1709)
s(1724) =< s(1722)*2
s(1725) =< s(1712)+s(1723)+aux(251)
s(1725) =< s(1721)*s(1713)
s(1726) =< s(1711)+s(1722)+aux(251)
s(1726) =< s(1724)+s(1724)+s(1704)
s(1726) =< s(1676)*s(1710)
s(1727) =< s(1726)
s(1728) =< s(1725)
s(1730) =< aux(251)
s(1730) =< s(1682)
s(1732) =< s(1730)

  with precondition: [V_2=V_s+1,0>=V_0+1,V_PL_bufend>=V_2+3] 

* Chain [118]: 158*s(1742)+204*s(1744)+36*s(1745)+12*s(1757)+12*s(1758)+72*s(1759)+24*s(1765)+24*s(1766)+36*s(1770)+12*s(1782)+12*s(1783)+36*s(1784)+12*s(1790)+12*s(1791)+6
  Such that:s(1737) =< 1
s(1735) =< 2
s(1734) =< -2*V_s+2*V_PL_bufend
s(1739) =< -V_s/2+V_PL_bufend/2
aux(252) =< -V_s+V_PL_bufend
s(1740) =< s(1734)
s(1742) =< aux(252)
s(1740) =< aux(252)
s(1743) =< s(1740)
s(1743) =< aux(252)
s(1744) =< s(1740)
s(1745) =< s(1740)
s(1745) =< aux(252)
s(1745) =< s(1743)
s(1746) =< s(1740)
s(1747) =< s(1740)-2
s(1748) =< max([aux(252),s(1746),s(1746)])
s(1749) =< s(1744)*s(1746)
s(1750) =< s(1744)*s(1747)
s(1751) =< max([aux(252),s(1740),0])+s(1740)
s(1752) =< s(1745)*s(1746)
s(1753) =< s(1745)*s(1747)
s(1748) =< s(1751)+1
s(1754) =< s(1752)*2
s(1755) =< s(1750)+s(1753)+aux(252)
s(1755) =< s(1745)*s(1751)
s(1756) =< s(1749)+s(1752)+aux(252)
s(1756) =< s(1754)+s(1754)+s(1734)
s(1756) =< s(1744)*s(1748)
s(1757) =< s(1756)
s(1758) =< s(1755)
s(1759) =< s(1740)
s(1759) =< aux(252)
s(1760) =< s(1759)*s(1746)
s(1761) =< s(1759)*s(1747)
s(1762) =< s(1760)*2
s(1763) =< s(1750)+s(1761)+aux(252)
s(1763) =< s(1759)*s(1751)
s(1764) =< s(1749)+s(1760)+aux(252)
s(1764) =< s(1762)+s(1762)+s(1734)
s(1764) =< s(1744)*s(1748)
s(1765) =< s(1764)
s(1766) =< s(1763)
s(1767) =< s(1734)
s(1767) =< s(1735)
s(1768) =< s(1737)
s(1768) =< aux(252)
s(1769) =< aux(252)
s(1769) =< s(1739)
s(1770) =< aux(252)
s(1770) =< s(1739)
s(1770) =< s(1769)
s(1771) =< aux(252)
s(1772) =< aux(252)-2
s(1773) =< max([aux(252),s(1771),s(1771)])
s(1774) =< s(1742)*s(1771)
s(1775) =< s(1742)*s(1772)
s(1776) =< max([s(1768),aux(252),0])+aux(252)
s(1777) =< s(1770)*s(1771)
s(1778) =< s(1770)*s(1772)
s(1773) =< s(1776)+1
s(1779) =< s(1777)*2
s(1780) =< s(1775)+s(1778)+aux(252)
s(1780) =< s(1770)*s(1776)
s(1781) =< s(1774)+s(1777)+aux(252)
s(1781) =< s(1779)+s(1779)+s(1767)
s(1781) =< s(1742)*s(1773)
s(1782) =< s(1781)
s(1783) =< s(1780)
s(1784) =< aux(252)
s(1784) =< s(1739)
s(1785) =< s(1784)*s(1771)
s(1786) =< s(1784)*s(1772)
s(1787) =< s(1785)*2
s(1788) =< s(1775)+s(1786)+aux(252)
s(1788) =< s(1784)*s(1776)
s(1789) =< s(1774)+s(1785)+aux(252)
s(1789) =< s(1787)+s(1787)+s(1767)
s(1789) =< s(1742)*s(1773)
s(1790) =< s(1789)
s(1791) =< s(1788)

  with precondition: [V_2=V_s+1,0>=V_0+1,V_PL_bufend>=V_2+4] 

* Chain [117]: 2*s(1797)+156*s(1799)+36*s(1800)+12*s(1812)+12*s(1813)+36*s(1814)+12*s(1820)+12*s(1821)+6
  Such that:s(1792) =< -2*V_s+2*V_PL_bufend
aux(253) =< -V_s+V_PL_bufend
s(1795) =< s(1792)
s(1797) =< aux(253)
s(1795) =< aux(253)
s(1798) =< s(1795)
s(1798) =< aux(253)
s(1799) =< s(1795)
s(1800) =< s(1795)
s(1800) =< aux(253)
s(1800) =< s(1798)
s(1801) =< s(1795)
s(1802) =< s(1795)-2
s(1803) =< max([aux(253),s(1801),s(1801)])
s(1804) =< s(1799)*s(1801)
s(1805) =< s(1799)*s(1802)
s(1806) =< max([aux(253),s(1795),0])+s(1795)
s(1807) =< s(1800)*s(1801)
s(1808) =< s(1800)*s(1802)
s(1803) =< s(1806)+1
s(1809) =< s(1807)*2
s(1810) =< s(1805)+s(1808)+aux(253)
s(1810) =< s(1800)*s(1806)
s(1811) =< s(1804)+s(1807)+aux(253)
s(1811) =< s(1809)+s(1809)+s(1792)
s(1811) =< s(1799)*s(1803)
s(1812) =< s(1811)
s(1813) =< s(1810)
s(1814) =< s(1795)
s(1814) =< aux(253)
s(1815) =< s(1814)*s(1801)
s(1816) =< s(1814)*s(1802)
s(1817) =< s(1815)*2
s(1818) =< s(1805)+s(1816)+aux(253)
s(1818) =< s(1814)*s(1806)
s(1819) =< s(1804)+s(1815)+aux(253)
s(1819) =< s(1817)+s(1817)+s(1792)
s(1819) =< s(1799)*s(1803)
s(1820) =< s(1819)
s(1821) =< s(1818)

  with precondition: [V_2=V_s+1,0>=V_0+1,V_PL_bufend>=V_2+5] 

* Chain [116]: 5
  with precondition: [V_2=V_s+1,0>=V_0+1,V_2>=V_PL_bufend] 

* Chain [115]: 11*s(1824)+3
  Such that:aux(256) =< -V_s+V_PL_bufend
s(1824) =< aux(256)

  with precondition: [V_2=V_s+1,V_0>=1,V_PL_bufend>=V_2+1] 

* Chain [114]: 2*s(1833)+89*s(1834)+4*s(1835)+36*s(1850)+12*s(1862)+12*s(1863)+6
  Such that:s(1840) =< -2*V_s+2*V_PL_bufend
s(1845) =< -V_s/2+V_PL_bufend/2
aux(259) =< 1
aux(260) =< 2
aux(261) =< -V_s+V_PL_bufend
s(1833) =< aux(259)
s(1834) =< aux(261)
s(1835) =< aux(260)
s(1848) =< s(1840)
s(1848) =< aux(260)
s(1849) =< aux(259)
s(1849) =< aux(261)
s(1850) =< aux(261)
s(1850) =< s(1845)
s(1851) =< aux(261)
s(1852) =< aux(261)-2
s(1853) =< max([aux(261),s(1851),s(1851)])
s(1854) =< s(1834)*s(1851)
s(1855) =< s(1834)*s(1852)
s(1856) =< max([s(1849),aux(261),0])+aux(261)
s(1857) =< s(1850)*s(1851)
s(1858) =< s(1850)*s(1852)
s(1853) =< s(1856)+1
s(1859) =< s(1857)*2
s(1860) =< s(1855)+s(1858)+aux(261)
s(1860) =< s(1850)*s(1856)
s(1861) =< s(1854)+s(1857)+aux(261)
s(1861) =< s(1859)+s(1859)+s(1848)
s(1861) =< s(1834)*s(1853)
s(1862) =< s(1861)
s(1863) =< s(1860)

  with precondition: [V_2=V_s+1,V_0>=1,V_PL_bufend>=V_2+2] 

* Chain [113]: 236*s(1867)+36*s(1880)+60*s(1881)+12*s(1893)+12*s(1894)+36*s(1898)+12*s(1910)+12*s(1911)+72*s(1912)+24*s(1918)+24*s(1919)+10*s(1923)+6
  Such that:s(1874) =< 1
s(1871) =< 2
s(1870) =< -2*V_s+2*V_PL_bufend
s(1873) =< -V_s+V_PL_bufend+1
s(1876) =< -V_s/2+V_PL_bufend/2
aux(264) =< -V_s+V_PL_bufend
s(1877) =< s(1870)
s(1867) =< aux(264)
s(1877) =< aux(264)
s(1880) =< s(1877)
s(1881) =< s(1877)
s(1880) =< aux(264)
s(1882) =< s(1877)
s(1883) =< s(1877)-2
s(1884) =< max([aux(264),s(1882),s(1882)])
s(1885) =< s(1881)*s(1882)
s(1886) =< s(1881)*s(1883)
s(1887) =< max([aux(264),s(1877),0])+s(1877)
s(1888) =< s(1880)*s(1882)
s(1889) =< s(1880)*s(1883)
s(1884) =< s(1887)+1
s(1890) =< s(1888)*2
s(1891) =< s(1886)+s(1889)+aux(264)
s(1891) =< s(1880)*s(1887)
s(1892) =< s(1885)+s(1888)+aux(264)
s(1892) =< s(1890)+s(1890)+s(1870)
s(1892) =< s(1881)*s(1884)
s(1893) =< s(1892)
s(1894) =< s(1891)
s(1895) =< s(1870)
s(1895) =< s(1871)
s(1896) =< s(1874)
s(1896) =< aux(264)
s(1897) =< aux(264)
s(1897) =< s(1876)
s(1898) =< aux(264)
s(1898) =< s(1876)
s(1898) =< s(1897)
s(1899) =< aux(264)
s(1900) =< aux(264)-2
s(1901) =< max([aux(264),s(1899),s(1899)])
s(1902) =< s(1867)*s(1899)
s(1903) =< s(1867)*s(1900)
s(1904) =< max([s(1896),aux(264),0])+aux(264)
s(1905) =< s(1898)*s(1899)
s(1906) =< s(1898)*s(1900)
s(1901) =< s(1904)+1
s(1907) =< s(1905)*2
s(1908) =< s(1903)+s(1906)+aux(264)
s(1908) =< s(1898)*s(1904)
s(1909) =< s(1902)+s(1905)+aux(264)
s(1909) =< s(1907)+s(1907)+s(1895)
s(1909) =< s(1867)*s(1901)
s(1910) =< s(1909)
s(1911) =< s(1908)
s(1912) =< aux(264)
s(1912) =< s(1876)
s(1913) =< s(1912)*s(1899)
s(1914) =< s(1912)*s(1900)
s(1915) =< s(1913)*2
s(1916) =< s(1903)+s(1914)+aux(264)
s(1916) =< s(1912)*s(1904)
s(1917) =< s(1902)+s(1913)+aux(264)
s(1917) =< s(1915)+s(1915)+s(1895)
s(1917) =< s(1867)*s(1901)
s(1918) =< s(1917)
s(1919) =< s(1916)
s(1921) =< aux(264)
s(1921) =< s(1873)
s(1923) =< s(1921)

  with precondition: [V_2=V_s+1,V_0>=1,V_PL_bufend>=V_2+3] 

* Chain [112]: 158*s(1933)+204*s(1935)+36*s(1936)+12*s(1948)+12*s(1949)+72*s(1950)+24*s(1956)+24*s(1957)+36*s(1961)+12*s(1973)+12*s(1974)+36*s(1975)+12*s(1981)+12*s(1982)+6
  Such that:s(1928) =< 1
s(1926) =< 2
s(1925) =< -2*V_s+2*V_PL_bufend
s(1930) =< -V_s/2+V_PL_bufend/2
aux(265) =< -V_s+V_PL_bufend
s(1931) =< s(1925)
s(1933) =< aux(265)
s(1931) =< aux(265)
s(1934) =< s(1931)
s(1934) =< aux(265)
s(1935) =< s(1931)
s(1936) =< s(1931)
s(1936) =< aux(265)
s(1936) =< s(1934)
s(1937) =< s(1931)
s(1938) =< s(1931)-2
s(1939) =< max([aux(265),s(1937),s(1937)])
s(1940) =< s(1935)*s(1937)
s(1941) =< s(1935)*s(1938)
s(1942) =< max([aux(265),s(1931),0])+s(1931)
s(1943) =< s(1936)*s(1937)
s(1944) =< s(1936)*s(1938)
s(1939) =< s(1942)+1
s(1945) =< s(1943)*2
s(1946) =< s(1941)+s(1944)+aux(265)
s(1946) =< s(1936)*s(1942)
s(1947) =< s(1940)+s(1943)+aux(265)
s(1947) =< s(1945)+s(1945)+s(1925)
s(1947) =< s(1935)*s(1939)
s(1948) =< s(1947)
s(1949) =< s(1946)
s(1950) =< s(1931)
s(1950) =< aux(265)
s(1951) =< s(1950)*s(1937)
s(1952) =< s(1950)*s(1938)
s(1953) =< s(1951)*2
s(1954) =< s(1941)+s(1952)+aux(265)
s(1954) =< s(1950)*s(1942)
s(1955) =< s(1940)+s(1951)+aux(265)
s(1955) =< s(1953)+s(1953)+s(1925)
s(1955) =< s(1935)*s(1939)
s(1956) =< s(1955)
s(1957) =< s(1954)
s(1958) =< s(1925)
s(1958) =< s(1926)
s(1959) =< s(1928)
s(1959) =< aux(265)
s(1960) =< aux(265)
s(1960) =< s(1930)
s(1961) =< aux(265)
s(1961) =< s(1930)
s(1961) =< s(1960)
s(1962) =< aux(265)
s(1963) =< aux(265)-2
s(1964) =< max([aux(265),s(1962),s(1962)])
s(1965) =< s(1933)*s(1962)
s(1966) =< s(1933)*s(1963)
s(1967) =< max([s(1959),aux(265),0])+aux(265)
s(1968) =< s(1961)*s(1962)
s(1969) =< s(1961)*s(1963)
s(1964) =< s(1967)+1
s(1970) =< s(1968)*2
s(1971) =< s(1966)+s(1969)+aux(265)
s(1971) =< s(1961)*s(1967)
s(1972) =< s(1965)+s(1968)+aux(265)
s(1972) =< s(1970)+s(1970)+s(1958)
s(1972) =< s(1933)*s(1964)
s(1973) =< s(1972)
s(1974) =< s(1971)
s(1975) =< aux(265)
s(1975) =< s(1930)
s(1976) =< s(1975)*s(1962)
s(1977) =< s(1975)*s(1963)
s(1978) =< s(1976)*2
s(1979) =< s(1966)+s(1977)+aux(265)
s(1979) =< s(1975)*s(1967)
s(1980) =< s(1965)+s(1976)+aux(265)
s(1980) =< s(1978)+s(1978)+s(1958)
s(1980) =< s(1933)*s(1964)
s(1981) =< s(1980)
s(1982) =< s(1979)

  with precondition: [V_2=V_s+1,V_0>=1,V_PL_bufend>=V_2+4] 

* Chain [111]: 2*s(1988)+156*s(1990)+36*s(1991)+12*s(2003)+12*s(2004)+36*s(2005)+12*s(2011)+12*s(2012)+6
  Such that:s(1983) =< -2*V_s+2*V_PL_bufend
aux(266) =< -V_s+V_PL_bufend
s(1986) =< s(1983)
s(1988) =< aux(266)
s(1986) =< aux(266)
s(1989) =< s(1986)
s(1989) =< aux(266)
s(1990) =< s(1986)
s(1991) =< s(1986)
s(1991) =< aux(266)
s(1991) =< s(1989)
s(1992) =< s(1986)
s(1993) =< s(1986)-2
s(1994) =< max([aux(266),s(1992),s(1992)])
s(1995) =< s(1990)*s(1992)
s(1996) =< s(1990)*s(1993)
s(1997) =< max([aux(266),s(1986),0])+s(1986)
s(1998) =< s(1991)*s(1992)
s(1999) =< s(1991)*s(1993)
s(1994) =< s(1997)+1
s(2000) =< s(1998)*2
s(2001) =< s(1996)+s(1999)+aux(266)
s(2001) =< s(1991)*s(1997)
s(2002) =< s(1995)+s(1998)+aux(266)
s(2002) =< s(2000)+s(2000)+s(1983)
s(2002) =< s(1990)*s(1994)
s(2003) =< s(2002)
s(2004) =< s(2001)
s(2005) =< s(1986)
s(2005) =< aux(266)
s(2006) =< s(2005)*s(1992)
s(2007) =< s(2005)*s(1993)
s(2008) =< s(2006)*2
s(2009) =< s(1996)+s(2007)+aux(266)
s(2009) =< s(2005)*s(1997)
s(2010) =< s(1995)+s(2006)+aux(266)
s(2010) =< s(2008)+s(2008)+s(1983)
s(2010) =< s(1990)*s(1994)
s(2011) =< s(2010)
s(2012) =< s(2009)

  with precondition: [V_2=V_s+1,V_0>=1,V_PL_bufend>=V_2+5] 

* Chain [110]: 5
  with precondition: [V_2=V_s+1,V_0>=1,V_2>=V_PL_bufend] 


#### Simplifying cost structure of CE 219 

#### Simplifying cost structure of CE 233 

#### Simplifying cost structure of CE 234 

#### Simplifying cost structure of CE 220 
 * Renamed intermediate variables: 
[(eq(214,1),aux(227))>>s(2013),(eq(214,1),s(1442))>>s(2014)]

#### Simplifying cost structure of CE 214 
 * Renamed intermediate variables: 
[(eq(215,1),s(1455))>>s(2015),(eq(215,1),aux(231))>>s(2016),(eq(215,1),s(1445))>>s(2017),(eq(215,1),s(1460))>>s(2018),(eq(215,1),s(1461))>>s(2019),(eq(215,1),s(1462))>>s(2020),(eq(215,1),s(1463))>>s(2021),(eq(215,1),s(1464))>>s(2022),(eq(215,1),s(1465))>>s(2023),(eq(215,1),s(1466))>>s(2024),(eq(215,1),s(1467))>>s(2025),(eq(215,1),s(1468))>>s(2026),(eq(215,1),s(1469))>>s(2027),(eq(215,1),s(1470))>>s(2028),(eq(215,1),s(1471))>>s(2029),(eq(215,1),s(1472))>>s(2030),(eq(215,1),s(1473))>>s(2031)]

#### Simplifying cost structure of CE 215 
 * Renamed intermediate variables: 
[(eq(222,1),aux(243))>>s(2032),(eq(222,1),s(1633))>>s(2033)]

#### Simplifying cost structure of CE 222 
 * Renamed intermediate variables: 
[(eq(228,1),aux(256))>>s(2034),(eq(228,1),s(1824))>>s(2035)]

#### Simplifying cost structure of CE 228 
 * Joined equivalent variables [aux(267),s(2016),s(2032),s(2034)] into aux(267)
 * Joined equivalent variables [s(2017),s(2033),s(2035)] into s(2017)
 * Renamed intermediate variables: 
[(eq(216,1),s(1474))>>s(2036),(eq(216,1),s(1482))>>s(2037),(eq(216,1),s(1485))>>s(2038),(eq(216,1),s(1488))>>s(2039),(eq(216,1),aux(235))>>s(2040),(eq(216,1),s(1476))>>s(2041),(eq(216,1),s(1477))>>s(2042),(eq(216,1),s(1489))>>s(2043),(eq(216,1),s(1492))>>s(2044),(eq(216,1),s(1493))>>s(2045),(eq(216,1),s(1494))>>s(2046),(eq(216,1),s(1495))>>s(2047),(eq(216,1),s(1496))>>s(2048),(eq(216,1),s(1497))>>s(2049),(eq(216,1),s(1498))>>s(2050),(eq(216,1),s(1499))>>s(2051),(eq(216,1),s(1500))>>s(2052),(eq(216,1),s(1501))>>s(2053),(eq(216,1),s(1502))>>s(2054),(eq(216,1),s(1503))>>s(2055),(eq(216,1),s(1504))>>s(2056),(eq(216,1),s(1505))>>s(2057),(eq(216,1),s(1506))>>s(2058),(eq(216,1),s(1509))>>s(2059),(eq(216,1),s(1510))>>s(2060),(eq(216,1),s(1511))>>s(2061),(eq(216,1),s(1512))>>s(2062),(eq(216,1),s(1513))>>s(2063),(eq(216,1),s(1514))>>s(2064),(eq(216,1),s(1515))>>s(2065),(eq(216,1),s(1516))>>s(2066),(eq(216,1),s(1517))>>s(2067),(eq(216,1),s(1518))>>s(2068),(eq(216,1),s(1519))>>s(2069),(eq(216,1),s(1520))>>s(2070),(eq(216,1),s(1521))>>s(2071),(eq(216,1),s(1522))>>s(2072),(eq(216,1),s(1523))>>s(2073),(eq(216,1),s(1524))>>s(2074),(eq(216,1),s(1525))>>s(2075),(eq(216,1),s(1526))>>s(2076),(eq(216,1),s(1527))>>s(2077),(eq(216,1),s(1528))>>s(2078),(eq(216,1),s(1529))>>s(2079),(eq(216,1),s(1530))>>s(2080),(eq(216,1),s(1531))>>s(2081),(eq(216,1),s(1533))>>s(2082),(eq(216,1),s(1535))>>s(2083)]

#### Simplifying cost structure of CE 216 
 * Renamed intermediate variables: 
[(eq(223,1),s(1649))>>s(2084),(eq(223,1),s(1654))>>s(2085),(eq(223,1),aux(246))>>s(2086),(eq(223,1),aux(247))>>s(2087),(eq(223,1),aux(248))>>s(2088),(eq(223,1),s(1642))>>s(2089),(eq(223,1),s(1643))>>s(2090),(eq(223,1),s(1644))>>s(2091),(eq(223,1),s(1657))>>s(2092),(eq(223,1),s(1658))>>s(2093),(eq(223,1),s(1659))>>s(2094),(eq(223,1),s(1660))>>s(2095),(eq(223,1),s(1661))>>s(2096),(eq(223,1),s(1662))>>s(2097),(eq(223,1),s(1663))>>s(2098),(eq(223,1),s(1664))>>s(2099),(eq(223,1),s(1665))>>s(2100),(eq(223,1),s(1666))>>s(2101),(eq(223,1),s(1667))>>s(2102),(eq(223,1),s(1668))>>s(2103),(eq(223,1),s(1669))>>s(2104),(eq(223,1),s(1670))>>s(2105),(eq(223,1),s(1671))>>s(2106),(eq(223,1),s(1672))>>s(2107)]

#### Simplifying cost structure of CE 223 
 * Renamed intermediate variables: 
[(eq(229,1),s(1840))>>s(2108),(eq(229,1),s(1845))>>s(2109),(eq(229,1),aux(259))>>s(2110),(eq(229,1),aux(260))>>s(2111),(eq(229,1),aux(261))>>s(2112),(eq(229,1),s(1833))>>s(2113),(eq(229,1),s(1834))>>s(2114),(eq(229,1),s(1835))>>s(2115),(eq(229,1),s(1848))>>s(2116),(eq(229,1),s(1849))>>s(2117),(eq(229,1),s(1850))>>s(2118),(eq(229,1),s(1851))>>s(2119),(eq(229,1),s(1852))>>s(2120),(eq(229,1),s(1853))>>s(2121),(eq(229,1),s(1854))>>s(2122),(eq(229,1),s(1855))>>s(2123),(eq(229,1),s(1856))>>s(2124),(eq(229,1),s(1857))>>s(2125),(eq(229,1),s(1858))>>s(2126),(eq(229,1),s(1859))>>s(2127),(eq(229,1),s(1860))>>s(2128),(eq(229,1),s(1861))>>s(2129),(eq(229,1),s(1862))>>s(2130),(eq(229,1),s(1863))>>s(2131)]

#### Simplifying cost structure of CE 229 
 * Joined equivalent variables [aux(268),s(2036),s(2086),s(2110)] into aux(268)
 * Joined equivalent variables [aux(269),s(2087),s(2111)] into aux(269)
 * Joined equivalent variables [aux(270),s(2037),s(2084),s(2108)] into aux(270)
 * Joined equivalent variables [aux(271),s(2040),s(2088),s(2112)] into aux(271)
 * Joined equivalent variables [aux(272),s(2039),s(2085),s(2109)] into aux(272)
 * Joined equivalent variables [s(2061),s(2095),s(2119)] into s(2061)
 * Joined equivalent variables [s(2062),s(2096),s(2120)] into s(2062)
 * Joined equivalent variables [s(2041),s(2089),s(2113)] into s(2041)
 * Joined equivalent variables [s(2091),s(2115)] into s(2091)
 * Joined equivalent variables [s(2042),s(2090),s(2114)] into s(2042)
 * Joined equivalent variables [s(2074),s(2094),s(2118)] into s(2074)
 * Joined equivalent variables [s(2093),s(2117)] into s(2093)
 * Joined equivalent variables [s(2092),s(2116)] into s(2092)
 * Joined equivalent variables [s(2064),s(2098),s(2122)] into s(2064)
 * Joined equivalent variables [s(2065),s(2099),s(2123)] into s(2065)
 * Joined equivalent variables [s(2075),s(2101),s(2125)] into s(2075)
 * Joined equivalent variables [s(2076),s(2102),s(2126)] into s(2076)
 * Joined equivalent variables [s(2100),s(2124)] into s(2100)
 * Joined equivalent variables [s(2077),s(2103),s(2127)] into s(2077)
 * Joined equivalent variables [s(2097),s(2121)] into s(2097)
 * Joined equivalent variables [s(2104),s(2128)] into s(2104)
 * Joined equivalent variables [s(2105),s(2129)] into s(2105)
 * Joined equivalent variables [s(2107),s(2131)] into s(2107)
 * Joined equivalent variables [s(2106),s(2130)] into s(2106)
 * Renamed intermediate variables: 
[(eq(217,1),s(1543))>>s(2132),(eq(217,1),s(1548))>>s(2133),(eq(217,1),aux(239))>>s(2134),(eq(217,1),s(1549))>>s(2135),(eq(217,1),s(1540))>>s(2136),(eq(217,1),s(1552))>>s(2137),(eq(217,1),s(1553))>>s(2138),(eq(217,1),s(1554))>>s(2139),(eq(217,1),s(1555))>>s(2140),(eq(217,1),s(1556))>>s(2141),(eq(217,1),s(1557))>>s(2142),(eq(217,1),s(1558))>>s(2143),(eq(217,1),s(1559))>>s(2144),(eq(217,1),s(1560))>>s(2145),(eq(217,1),s(1561))>>s(2146),(eq(217,1),s(1562))>>s(2147),(eq(217,1),s(1563))>>s(2148),(eq(217,1),s(1564))>>s(2149),(eq(217,1),s(1565))>>s(2150),(eq(217,1),s(1566))>>s(2151),(eq(217,1),s(1567))>>s(2152),(eq(217,1),s(1568))>>s(2153),(eq(217,1),s(1569))>>s(2154),(eq(217,1),s(1570))>>s(2155),(eq(217,1),s(1571))>>s(2156),(eq(217,1),s(1572))>>s(2157),(eq(217,1),s(1573))>>s(2158),(eq(217,1),s(1574))>>s(2159),(eq(217,1),s(1575))>>s(2160),(eq(217,1),s(1578))>>s(2161),(eq(217,1),s(1579))>>s(2162),(eq(217,1),s(1580))>>s(2163),(eq(217,1),s(1581))>>s(2164),(eq(217,1),s(1582))>>s(2165),(eq(217,1),s(1583))>>s(2166),(eq(217,1),s(1584))>>s(2167),(eq(217,1),s(1585))>>s(2168),(eq(217,1),s(1586))>>s(2169),(eq(217,1),s(1587))>>s(2170),(eq(217,1),s(1588))>>s(2171),(eq(217,1),s(1589))>>s(2172),(eq(217,1),s(1590))>>s(2173),(eq(217,1),s(1591))>>s(2174),(eq(217,1),s(1592))>>s(2175),(eq(217,1),s(1593))>>s(2176),(eq(217,1),s(1594))>>s(2177),(eq(217,1),s(1595))>>s(2178),(eq(217,1),s(1596))>>s(2179),(eq(217,1),s(1597))>>s(2180),(eq(217,1),s(1598))>>s(2181),(eq(217,1),s(1599))>>s(2182),(eq(217,1),s(1600))>>s(2183)]

#### Simplifying cost structure of CE 217 
 * Renamed intermediate variables: 
[(eq(224,1),s(1683))>>s(2184),(eq(224,1),s(1680))>>s(2185),(eq(224,1),s(1679))>>s(2186),(eq(224,1),s(1682))>>s(2187),(eq(224,1),s(1685))>>s(2188),(eq(224,1),aux(251))>>s(2189),(eq(224,1),s(1686))>>s(2190),(eq(224,1),s(1676))>>s(2191),(eq(224,1),s(1689))>>s(2192),(eq(224,1),s(1690))>>s(2193),(eq(224,1),s(1691))>>s(2194),(eq(224,1),s(1692))>>s(2195),(eq(224,1),s(1693))>>s(2196),(eq(224,1),s(1694))>>s(2197),(eq(224,1),s(1695))>>s(2198),(eq(224,1),s(1696))>>s(2199),(eq(224,1),s(1697))>>s(2200),(eq(224,1),s(1698))>>s(2201),(eq(224,1),s(1699))>>s(2202),(eq(224,1),s(1700))>>s(2203),(eq(224,1),s(1701))>>s(2204),(eq(224,1),s(1702))>>s(2205),(eq(224,1),s(1703))>>s(2206),(eq(224,1),s(1704))>>s(2207),(eq(224,1),s(1705))>>s(2208),(eq(224,1),s(1706))>>s(2209),(eq(224,1),s(1707))>>s(2210),(eq(224,1),s(1708))>>s(2211),(eq(224,1),s(1709))>>s(2212),(eq(224,1),s(1710))>>s(2213),(eq(224,1),s(1711))>>s(2214),(eq(224,1),s(1712))>>s(2215),(eq(224,1),s(1713))>>s(2216),(eq(224,1),s(1714))>>s(2217),(eq(224,1),s(1715))>>s(2218),(eq(224,1),s(1716))>>s(2219),(eq(224,1),s(1717))>>s(2220),(eq(224,1),s(1718))>>s(2221),(eq(224,1),s(1719))>>s(2222),(eq(224,1),s(1720))>>s(2223),(eq(224,1),s(1721))>>s(2224),(eq(224,1),s(1722))>>s(2225),(eq(224,1),s(1723))>>s(2226),(eq(224,1),s(1724))>>s(2227),(eq(224,1),s(1725))>>s(2228),(eq(224,1),s(1726))>>s(2229),(eq(224,1),s(1727))>>s(2230),(eq(224,1),s(1728))>>s(2231),(eq(224,1),s(1730))>>s(2232),(eq(224,1),s(1732))>>s(2233)]

#### Simplifying cost structure of CE 224 
 * Renamed intermediate variables: 
[(eq(230,1),s(1874))>>s(2234),(eq(230,1),s(1871))>>s(2235),(eq(230,1),s(1870))>>s(2236),(eq(230,1),s(1873))>>s(2237),(eq(230,1),s(1876))>>s(2238),(eq(230,1),aux(264))>>s(2239),(eq(230,1),s(1877))>>s(2240),(eq(230,1),s(1867))>>s(2241),(eq(230,1),s(1880))>>s(2242),(eq(230,1),s(1881))>>s(2243),(eq(230,1),s(1882))>>s(2244),(eq(230,1),s(1883))>>s(2245),(eq(230,1),s(1884))>>s(2246),(eq(230,1),s(1885))>>s(2247),(eq(230,1),s(1886))>>s(2248),(eq(230,1),s(1887))>>s(2249),(eq(230,1),s(1888))>>s(2250),(eq(230,1),s(1889))>>s(2251),(eq(230,1),s(1890))>>s(2252),(eq(230,1),s(1891))>>s(2253),(eq(230,1),s(1892))>>s(2254),(eq(230,1),s(1893))>>s(2255),(eq(230,1),s(1894))>>s(2256),(eq(230,1),s(1895))>>s(2257),(eq(230,1),s(1896))>>s(2258),(eq(230,1),s(1897))>>s(2259),(eq(230,1),s(1898))>>s(2260),(eq(230,1),s(1899))>>s(2261),(eq(230,1),s(1900))>>s(2262),(eq(230,1),s(1901))>>s(2263),(eq(230,1),s(1902))>>s(2264),(eq(230,1),s(1903))>>s(2265),(eq(230,1),s(1904))>>s(2266),(eq(230,1),s(1905))>>s(2267),(eq(230,1),s(1906))>>s(2268),(eq(230,1),s(1907))>>s(2269),(eq(230,1),s(1908))>>s(2270),(eq(230,1),s(1909))>>s(2271),(eq(230,1),s(1910))>>s(2272),(eq(230,1),s(1911))>>s(2273),(eq(230,1),s(1912))>>s(2274),(eq(230,1),s(1913))>>s(2275),(eq(230,1),s(1914))>>s(2276),(eq(230,1),s(1915))>>s(2277),(eq(230,1),s(1916))>>s(2278),(eq(230,1),s(1917))>>s(2279),(eq(230,1),s(1918))>>s(2280),(eq(230,1),s(1919))>>s(2281),(eq(230,1),s(1921))>>s(2282),(eq(230,1),s(1923))>>s(2283)]

#### Simplifying cost structure of CE 230 
 * Joined equivalent variables [aux(273),s(2184),s(2234)] into aux(273)
 * Joined equivalent variables [aux(274),s(2185),s(2235)] into aux(274)
 * Joined equivalent variables [aux(275),s(2132),s(2186),s(2236)] into aux(275)
 * Joined equivalent variables [aux(276),s(2134),s(2189),s(2239)] into aux(276)
 * Joined equivalent variables [aux(277),s(2187),s(2237)] into aux(277)
 * Joined equivalent variables [aux(278),s(2133),s(2188),s(2238)] into aux(278)
 * Joined equivalent variables [s(2163),s(2211),s(2261)] into s(2163)
 * Joined equivalent variables [s(2164),s(2212),s(2262)] into s(2164)
 * Joined equivalent variables [s(2136),s(2191),s(2241)] into s(2136)
 * Joined equivalent variables [s(2176),s(2224),s(2274)] into s(2176)
 * Joined equivalent variables [s(2208),s(2258)] into s(2208)
 * Joined equivalent variables [s(2207),s(2257)] into s(2207)
 * Joined equivalent variables [s(2135),s(2190),s(2240)] into s(2135)
 * Joined equivalent variables [s(2232),s(2282)] into s(2232)
 * Joined equivalent variables [s(2161),s(2209),s(2259)] into s(2161)
 * Joined equivalent variables [s(2140),s(2194),s(2244)] into s(2140)
 * Joined equivalent variables [s(2141),s(2195),s(2245)] into s(2141)
 * Joined equivalent variables [s(2166),s(2214),s(2264)] into s(2166)
 * Joined equivalent variables [s(2167),s(2215),s(2265)] into s(2167)
 * Joined equivalent variables [s(2177),s(2225),s(2275)] into s(2177)
 * Joined equivalent variables [s(2178),s(2226),s(2276)] into s(2178)
 * Joined equivalent variables [s(2216),s(2266)] into s(2216)
 * Joined equivalent variables [s(2145),s(2199),s(2249)] into s(2145)
 * Joined equivalent variables [s(2162),s(2210),s(2260)] into s(2162)
 * Joined equivalent variables [s(2153),s(2192),s(2242)] into s(2153)
 * Joined equivalent variables [s(2138),s(2193),s(2243)] into s(2138)
 * Joined equivalent variables [s(2233),s(2283)] into s(2233)
 * Joined equivalent variables [s(2213),s(2263)] into s(2213)
 * Joined equivalent variables [s(2143),s(2197),s(2247)] into s(2143)
 * Joined equivalent variables [s(2144),s(2198),s(2248)] into s(2144)
 * Joined equivalent variables [s(2142),s(2196),s(2246)] into s(2142)
 * Joined equivalent variables [s(2154),s(2200),s(2250)] into s(2154)
 * Joined equivalent variables [s(2155),s(2201),s(2251)] into s(2155)
 * Joined equivalent variables [s(2169),s(2217),s(2267)] into s(2169)
 * Joined equivalent variables [s(2170),s(2218),s(2268)] into s(2170)
 * Joined equivalent variables [s(2179),s(2227),s(2277)] into s(2179)
 * Joined equivalent variables [s(2228),s(2278)] into s(2228)
 * Joined equivalent variables [s(2156),s(2202),s(2252)] into s(2156)
 * Joined equivalent variables [s(2157),s(2203),s(2253)] into s(2157)
 * Joined equivalent variables [s(2171),s(2219),s(2269)] into s(2171)
 * Joined equivalent variables [s(2220),s(2270)] into s(2220)
 * Joined equivalent variables [s(2229),s(2279)] into s(2229)
 * Joined equivalent variables [s(2231),s(2281)] into s(2231)
 * Joined equivalent variables [s(2158),s(2204),s(2254)] into s(2158)
 * Joined equivalent variables [s(2221),s(2271)] into s(2221)
 * Joined equivalent variables [s(2160),s(2206),s(2256)] into s(2160)
 * Joined equivalent variables [s(2223),s(2273)] into s(2223)
 * Joined equivalent variables [s(2230),s(2280)] into s(2230)
 * Joined equivalent variables [s(2159),s(2205),s(2255)] into s(2159)
 * Joined equivalent variables [s(2222),s(2272)] into s(2222)
 * Renamed intermediate variables: 
[(eq(218,1),s(1601))>>s(2284),(eq(218,1),aux(240))>>s(2285),(eq(218,1),s(1604))>>s(2286),(eq(218,1),s(1606))>>s(2287),(eq(218,1),s(1607))>>s(2288),(eq(218,1),s(1608))>>s(2289),(eq(218,1),s(1609))>>s(2290),(eq(218,1),s(1610))>>s(2291),(eq(218,1),s(1611))>>s(2292),(eq(218,1),s(1612))>>s(2293),(eq(218,1),s(1613))>>s(2294),(eq(218,1),s(1614))>>s(2295),(eq(218,1),s(1615))>>s(2296),(eq(218,1),s(1616))>>s(2297),(eq(218,1),s(1617))>>s(2298),(eq(218,1),s(1618))>>s(2299),(eq(218,1),s(1619))>>s(2300),(eq(218,1),s(1620))>>s(2301),(eq(218,1),s(1621))>>s(2302),(eq(218,1),s(1622))>>s(2303),(eq(218,1),s(1623))>>s(2304),(eq(218,1),s(1624))>>s(2305),(eq(218,1),s(1625))>>s(2306),(eq(218,1),s(1626))>>s(2307),(eq(218,1),s(1627))>>s(2308),(eq(218,1),s(1628))>>s(2309),(eq(218,1),s(1629))>>s(2310),(eq(218,1),s(1630))>>s(2311)]

#### Simplifying cost structure of CE 218 
 * Renamed intermediate variables: 
[(eq(225,1),s(1737))>>s(2312),(eq(225,1),s(1735))>>s(2313),(eq(225,1),s(1734))>>s(2314),(eq(225,1),s(1739))>>s(2315),(eq(225,1),aux(252))>>s(2316),(eq(225,1),s(1740))>>s(2317),(eq(225,1),s(1742))>>s(2318),(eq(225,1),s(1743))>>s(2319),(eq(225,1),s(1744))>>s(2320),(eq(225,1),s(1745))>>s(2321),(eq(225,1),s(1746))>>s(2322),(eq(225,1),s(1747))>>s(2323),(eq(225,1),s(1748))>>s(2324),(eq(225,1),s(1749))>>s(2325),(eq(225,1),s(1750))>>s(2326),(eq(225,1),s(1751))>>s(2327),(eq(225,1),s(1752))>>s(2328),(eq(225,1),s(1753))>>s(2329),(eq(225,1),s(1754))>>s(2330),(eq(225,1),s(1755))>>s(2331),(eq(225,1),s(1756))>>s(2332),(eq(225,1),s(1757))>>s(2333),(eq(225,1),s(1758))>>s(2334),(eq(225,1),s(1759))>>s(2335),(eq(225,1),s(1760))>>s(2336),(eq(225,1),s(1761))>>s(2337),(eq(225,1),s(1762))>>s(2338),(eq(225,1),s(1763))>>s(2339),(eq(225,1),s(1764))>>s(2340),(eq(225,1),s(1765))>>s(2341),(eq(225,1),s(1766))>>s(2342),(eq(225,1),s(1767))>>s(2343),(eq(225,1),s(1768))>>s(2344),(eq(225,1),s(1769))>>s(2345),(eq(225,1),s(1770))>>s(2346),(eq(225,1),s(1771))>>s(2347),(eq(225,1),s(1772))>>s(2348),(eq(225,1),s(1773))>>s(2349),(eq(225,1),s(1774))>>s(2350),(eq(225,1),s(1775))>>s(2351),(eq(225,1),s(1776))>>s(2352),(eq(225,1),s(1777))>>s(2353),(eq(225,1),s(1778))>>s(2354),(eq(225,1),s(1779))>>s(2355),(eq(225,1),s(1780))>>s(2356),(eq(225,1),s(1781))>>s(2357),(eq(225,1),s(1782))>>s(2358),(eq(225,1),s(1783))>>s(2359),(eq(225,1),s(1784))>>s(2360),(eq(225,1),s(1785))>>s(2361),(eq(225,1),s(1786))>>s(2362),(eq(225,1),s(1787))>>s(2363),(eq(225,1),s(1788))>>s(2364),(eq(225,1),s(1789))>>s(2365),(eq(225,1),s(1790))>>s(2366),(eq(225,1),s(1791))>>s(2367)]

#### Simplifying cost structure of CE 225 
 * Renamed intermediate variables: 
[(eq(231,1),s(1928))>>s(2368),(eq(231,1),s(1926))>>s(2369),(eq(231,1),s(1925))>>s(2370),(eq(231,1),s(1930))>>s(2371),(eq(231,1),aux(265))>>s(2372),(eq(231,1),s(1931))>>s(2373),(eq(231,1),s(1933))>>s(2374),(eq(231,1),s(1934))>>s(2375),(eq(231,1),s(1935))>>s(2376),(eq(231,1),s(1936))>>s(2377),(eq(231,1),s(1937))>>s(2378),(eq(231,1),s(1938))>>s(2379),(eq(231,1),s(1939))>>s(2380),(eq(231,1),s(1940))>>s(2381),(eq(231,1),s(1941))>>s(2382),(eq(231,1),s(1942))>>s(2383),(eq(231,1),s(1943))>>s(2384),(eq(231,1),s(1944))>>s(2385),(eq(231,1),s(1945))>>s(2386),(eq(231,1),s(1946))>>s(2387),(eq(231,1),s(1947))>>s(2388),(eq(231,1),s(1948))>>s(2389),(eq(231,1),s(1949))>>s(2390),(eq(231,1),s(1950))>>s(2391),(eq(231,1),s(1951))>>s(2392),(eq(231,1),s(1952))>>s(2393),(eq(231,1),s(1953))>>s(2394),(eq(231,1),s(1954))>>s(2395),(eq(231,1),s(1955))>>s(2396),(eq(231,1),s(1956))>>s(2397),(eq(231,1),s(1957))>>s(2398),(eq(231,1),s(1958))>>s(2399),(eq(231,1),s(1959))>>s(2400),(eq(231,1),s(1960))>>s(2401),(eq(231,1),s(1961))>>s(2402),(eq(231,1),s(1962))>>s(2403),(eq(231,1),s(1963))>>s(2404),(eq(231,1),s(1964))>>s(2405),(eq(231,1),s(1965))>>s(2406),(eq(231,1),s(1966))>>s(2407),(eq(231,1),s(1967))>>s(2408),(eq(231,1),s(1968))>>s(2409),(eq(231,1),s(1969))>>s(2410),(eq(231,1),s(1970))>>s(2411),(eq(231,1),s(1971))>>s(2412),(eq(231,1),s(1972))>>s(2413),(eq(231,1),s(1973))>>s(2414),(eq(231,1),s(1974))>>s(2415),(eq(231,1),s(1975))>>s(2416),(eq(231,1),s(1976))>>s(2417),(eq(231,1),s(1977))>>s(2418),(eq(231,1),s(1978))>>s(2419),(eq(231,1),s(1979))>>s(2420),(eq(231,1),s(1980))>>s(2421),(eq(231,1),s(1981))>>s(2422),(eq(231,1),s(1982))>>s(2423)]

#### Simplifying cost structure of CE 231 
 * Joined equivalent variables [aux(279),s(2312),s(2368)] into aux(279)
 * Joined equivalent variables [aux(280),s(2313),s(2369)] into aux(280)
 * Joined equivalent variables [aux(281),s(2284),s(2314),s(2370)] into aux(281)
 * Joined equivalent variables [aux(282),s(2285),s(2316),s(2372)] into aux(282)
 * Joined equivalent variables [aux(283),s(2315),s(2371)] into aux(283)
 * Joined equivalent variables [s(2347),s(2403)] into s(2347)
 * Joined equivalent variables [s(2348),s(2404)] into s(2348)
 * Joined equivalent variables [s(2287),s(2318),s(2374)] into s(2287)
 * Joined equivalent variables [s(2360),s(2416)] into s(2360)
 * Joined equivalent variables [s(2344),s(2400)] into s(2344)
 * Joined equivalent variables [s(2343),s(2399)] into s(2343)
 * Joined equivalent variables [s(2286),s(2317),s(2373)] into s(2286)
 * Joined equivalent variables [s(2345),s(2401)] into s(2345)
 * Joined equivalent variables [s(2361),s(2417)] into s(2361)
 * Joined equivalent variables [s(2362),s(2418)] into s(2362)
 * Joined equivalent variables [s(2291),s(2322),s(2378)] into s(2291)
 * Joined equivalent variables [s(2292),s(2323),s(2379)] into s(2292)
 * Joined equivalent variables [s(2352),s(2408)] into s(2352)
 * Joined equivalent variables [s(2296),s(2327),s(2383)] into s(2296)
 * Joined equivalent variables [s(2350),s(2406)] into s(2350)
 * Joined equivalent variables [s(2351),s(2407)] into s(2351)
 * Joined equivalent variables [s(2346),s(2402)] into s(2346)
 * Joined equivalent variables [s(2304),s(2335),s(2391)] into s(2304)
 * Joined equivalent variables [s(2289),s(2320),s(2376)] into s(2289)
 * Joined equivalent variables [s(2288),s(2319),s(2375)] into s(2288)
 * Joined equivalent variables [s(2353),s(2409)] into s(2353)
 * Joined equivalent variables [s(2354),s(2410)] into s(2354)
 * Joined equivalent variables [s(2349),s(2405)] into s(2349)
 * Joined equivalent variables [s(2363),s(2419)] into s(2363)
 * Joined equivalent variables [s(2364),s(2420)] into s(2364)
 * Joined equivalent variables [s(2294),s(2325),s(2381)] into s(2294)
 * Joined equivalent variables [s(2295),s(2326),s(2382)] into s(2295)
 * Joined equivalent variables [s(2293),s(2324),s(2380)] into s(2293)
 * Joined equivalent variables [s(2305),s(2336),s(2392)] into s(2305)
 * Joined equivalent variables [s(2306),s(2337),s(2393)] into s(2306)
 * Joined equivalent variables [s(2290),s(2321),s(2377)] into s(2290)
 * Joined equivalent variables [s(2355),s(2411)] into s(2355)
 * Joined equivalent variables [s(2356),s(2412)] into s(2356)
 * Joined equivalent variables [s(2365),s(2421)] into s(2365)
 * Joined equivalent variables [s(2297),s(2328),s(2384)] into s(2297)
 * Joined equivalent variables [s(2298),s(2329),s(2385)] into s(2298)
 * Joined equivalent variables [s(2307),s(2338),s(2394)] into s(2307)
 * Joined equivalent variables [s(2308),s(2339),s(2395)] into s(2308)
 * Joined equivalent variables [s(2367),s(2423)] into s(2367)
 * Joined equivalent variables [s(2357),s(2413)] into s(2357)
 * Joined equivalent variables [s(2299),s(2330),s(2386)] into s(2299)
 * Joined equivalent variables [s(2300),s(2331),s(2387)] into s(2300)
 * Joined equivalent variables [s(2309),s(2340),s(2396)] into s(2309)
 * Joined equivalent variables [s(2311),s(2342),s(2398)] into s(2311)
 * Joined equivalent variables [s(2359),s(2415)] into s(2359)
 * Joined equivalent variables [s(2366),s(2422)] into s(2366)
 * Joined equivalent variables [s(2301),s(2332),s(2388)] into s(2301)
 * Joined equivalent variables [s(2303),s(2334),s(2390)] into s(2303)
 * Joined equivalent variables [s(2310),s(2341),s(2397)] into s(2310)
 * Joined equivalent variables [s(2358),s(2414)] into s(2358)
 * Joined equivalent variables [s(2302),s(2333),s(2389)] into s(2302)
 * Renamed intermediate variables: 
[(eq(226,1),s(1792))>>s(2424),(eq(226,1),aux(253))>>s(2425),(eq(226,1),s(1795))>>s(2426),(eq(226,1),s(1797))>>s(2427),(eq(226,1),s(1798))>>s(2428),(eq(226,1),s(1799))>>s(2429),(eq(226,1),s(1800))>>s(2430),(eq(226,1),s(1801))>>s(2431),(eq(226,1),s(1802))>>s(2432),(eq(226,1),s(1803))>>s(2433),(eq(226,1),s(1804))>>s(2434),(eq(226,1),s(1805))>>s(2435),(eq(226,1),s(1806))>>s(2436),(eq(226,1),s(1807))>>s(2437),(eq(226,1),s(1808))>>s(2438),(eq(226,1),s(1809))>>s(2439),(eq(226,1),s(1810))>>s(2440),(eq(226,1),s(1811))>>s(2441),(eq(226,1),s(1812))>>s(2442),(eq(226,1),s(1813))>>s(2443),(eq(226,1),s(1814))>>s(2444),(eq(226,1),s(1815))>>s(2445),(eq(226,1),s(1816))>>s(2446),(eq(226,1),s(1817))>>s(2447),(eq(226,1),s(1818))>>s(2448),(eq(226,1),s(1819))>>s(2449),(eq(226,1),s(1820))>>s(2450),(eq(226,1),s(1821))>>s(2451)]

#### Simplifying cost structure of CE 226 
 * Renamed intermediate variables: 
[(eq(232,1),s(1983))>>s(2452),(eq(232,1),aux(266))>>s(2453),(eq(232,1),s(1986))>>s(2454),(eq(232,1),s(1988))>>s(2455),(eq(232,1),s(1989))>>s(2456),(eq(232,1),s(1990))>>s(2457),(eq(232,1),s(1991))>>s(2458),(eq(232,1),s(1992))>>s(2459),(eq(232,1),s(1993))>>s(2460),(eq(232,1),s(1994))>>s(2461),(eq(232,1),s(1995))>>s(2462),(eq(232,1),s(1996))>>s(2463),(eq(232,1),s(1997))>>s(2464),(eq(232,1),s(1998))>>s(2465),(eq(232,1),s(1999))>>s(2466),(eq(232,1),s(2000))>>s(2467),(eq(232,1),s(2001))>>s(2468),(eq(232,1),s(2002))>>s(2469),(eq(232,1),s(2003))>>s(2470),(eq(232,1),s(2004))>>s(2471),(eq(232,1),s(2005))>>s(2472),(eq(232,1),s(2006))>>s(2473),(eq(232,1),s(2007))>>s(2474),(eq(232,1),s(2008))>>s(2475),(eq(232,1),s(2009))>>s(2476),(eq(232,1),s(2010))>>s(2477),(eq(232,1),s(2011))>>s(2478),(eq(232,1),s(2012))>>s(2479)]

#### Simplifying cost structure of CE 232 
 * Joined equivalent variables [aux(284),s(2424),s(2452)] into aux(284)
 * Joined equivalent variables [aux(285),s(2425),s(2453)] into aux(285)
 * Joined equivalent variables [s(2427),s(2455)] into s(2427)
 * Joined equivalent variables [s(2426),s(2454)] into s(2426)
 * Joined equivalent variables [s(2431),s(2459)] into s(2431)
 * Joined equivalent variables [s(2432),s(2460)] into s(2432)
 * Joined equivalent variables [s(2436),s(2464)] into s(2436)
 * Joined equivalent variables [s(2444),s(2472)] into s(2444)
 * Joined equivalent variables [s(2429),s(2457)] into s(2429)
 * Joined equivalent variables [s(2428),s(2456)] into s(2428)
 * Joined equivalent variables [s(2434),s(2462)] into s(2434)
 * Joined equivalent variables [s(2435),s(2463)] into s(2435)
 * Joined equivalent variables [s(2433),s(2461)] into s(2433)
 * Joined equivalent variables [s(2445),s(2473)] into s(2445)
 * Joined equivalent variables [s(2446),s(2474)] into s(2446)
 * Joined equivalent variables [s(2430),s(2458)] into s(2430)
 * Joined equivalent variables [s(2437),s(2465)] into s(2437)
 * Joined equivalent variables [s(2438),s(2466)] into s(2438)
 * Joined equivalent variables [s(2447),s(2475)] into s(2447)
 * Joined equivalent variables [s(2448),s(2476)] into s(2448)
 * Joined equivalent variables [s(2439),s(2467)] into s(2439)
 * Joined equivalent variables [s(2440),s(2468)] into s(2440)
 * Joined equivalent variables [s(2449),s(2477)] into s(2449)
 * Joined equivalent variables [s(2451),s(2479)] into s(2451)
 * Joined equivalent variables [s(2441),s(2469)] into s(2441)
 * Joined equivalent variables [s(2443),s(2471)] into s(2443)
 * Joined equivalent variables [s(2450),s(2478)] into s(2450)
 * Joined equivalent variables [s(2442),s(2470)] into s(2442)

#### Simplifying cost structure of CE 221 

#### Simplifying cost structure of CE 227 

#### Simplifying cost structure of CE 213 

#### Cost of chains of eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B):
* Chain [141]: 5
  with precondition: [V_PL_bufend=V_s+2] 

* Chain [140]: 5
  with precondition: [V_PL_bufend=V_s+1] 

* Chain [139]: 5*s(2014)+3
  Such that:s(2013) =< -V_s+V_PL_bufend
s(2014) =< s(2013)

  with precondition: [V_PL_bufend>=V_s+1] 

* Chain [138]: 111*s(2017)+36*s(2018)+12*s(2030)+12*s(2031)+6
  Such that:s(2015) =< -V_s/2+V_PL_bufend/2
aux(267) =< -V_s+V_PL_bufend
s(2017) =< aux(267)
s(2018) =< aux(267)
s(2018) =< s(2015)
s(2019) =< aux(267)
s(2020) =< aux(267)-2
s(2021) =< max([aux(267),s(2019),s(2019)])
s(2022) =< s(2017)*s(2019)
s(2023) =< s(2017)*s(2020)
s(2024) =< max([0,aux(267),0])+aux(267)
s(2025) =< s(2018)*s(2019)
s(2026) =< s(2018)*s(2020)
s(2021) =< s(2024)+1
s(2027) =< s(2025)*2
s(2028) =< s(2023)+s(2026)+aux(267)
s(2028) =< s(2018)*s(2024)
s(2029) =< s(2022)+s(2025)+aux(267)
s(2029) =< s(2027)+s(2027)
s(2029) =< s(2017)*s(2021)
s(2030) =< s(2029)
s(2031) =< s(2028)

  with precondition: [V_PL_bufend>=V_s+2] 

* Chain [137]: 6*s(2041)+406*s(2042)+36*s(2044)+60*s(2045)+12*s(2057)+12*s(2058)+36*s(2060)+12*s(2072)+12*s(2073)+144*s(2074)+24*s(2080)+24*s(2081)+10*s(2083)+8*s(2091)+24*s(2106)+24*s(2107)+6
  Such that:s(2038) =< -V_s+V_PL_bufend+1
aux(268) =< 1
aux(269) =< 2
aux(270) =< -2*V_s+2*V_PL_bufend
aux(271) =< -V_s+V_PL_bufend
aux(272) =< -V_s/2+V_PL_bufend/2
s(2041) =< aux(268)
s(2042) =< aux(271)
s(2043) =< aux(270)
s(2043) =< aux(271)
s(2044) =< s(2043)
s(2045) =< s(2043)
s(2044) =< aux(271)
s(2046) =< s(2043)
s(2047) =< s(2043)-2
s(2048) =< max([aux(271),s(2046),s(2046)])
s(2049) =< s(2045)*s(2046)
s(2050) =< s(2045)*s(2047)
s(2051) =< max([aux(271),s(2043),0])+s(2043)
s(2052) =< s(2044)*s(2046)
s(2053) =< s(2044)*s(2047)
s(2048) =< s(2051)+1
s(2054) =< s(2052)*2
s(2055) =< s(2050)+s(2053)+aux(271)
s(2055) =< s(2044)*s(2051)
s(2056) =< s(2049)+s(2052)+aux(271)
s(2056) =< s(2054)+s(2054)+aux(270)
s(2056) =< s(2045)*s(2048)
s(2057) =< s(2056)
s(2058) =< s(2055)
s(2059) =< aux(271)
s(2059) =< aux(272)
s(2060) =< aux(271)
s(2060) =< aux(272)
s(2060) =< s(2059)
s(2061) =< aux(271)
s(2062) =< aux(271)-2
s(2063) =< max([aux(271),s(2061),s(2061)])
s(2064) =< s(2042)*s(2061)
s(2065) =< s(2042)*s(2062)
s(2066) =< max([0,aux(271),0])+aux(271)
s(2067) =< s(2060)*s(2061)
s(2068) =< s(2060)*s(2062)
s(2063) =< s(2066)+1
s(2069) =< s(2067)*2
s(2070) =< s(2065)+s(2068)+aux(271)
s(2070) =< s(2060)*s(2066)
s(2071) =< s(2064)+s(2067)+aux(271)
s(2071) =< s(2069)+s(2069)
s(2071) =< s(2042)*s(2063)
s(2072) =< s(2071)
s(2073) =< s(2070)
s(2074) =< aux(271)
s(2074) =< aux(272)
s(2075) =< s(2074)*s(2061)
s(2076) =< s(2074)*s(2062)
s(2077) =< s(2075)*2
s(2078) =< s(2065)+s(2076)+aux(271)
s(2078) =< s(2074)*s(2066)
s(2079) =< s(2064)+s(2075)+aux(271)
s(2079) =< s(2077)+s(2077)
s(2079) =< s(2042)*s(2063)
s(2080) =< s(2079)
s(2081) =< s(2078)
s(2082) =< aux(271)
s(2082) =< s(2038)
s(2083) =< s(2082)
s(2091) =< aux(269)
s(2092) =< aux(270)
s(2092) =< aux(269)
s(2093) =< aux(268)
s(2093) =< aux(271)
s(2097) =< max([aux(271),s(2061),s(2061)])
s(2100) =< max([s(2093),aux(271),0])+aux(271)
s(2097) =< s(2100)+1
s(2104) =< s(2065)+s(2076)+aux(271)
s(2104) =< s(2074)*s(2100)
s(2105) =< s(2064)+s(2075)+aux(271)
s(2105) =< s(2077)+s(2077)+s(2092)
s(2105) =< s(2042)*s(2097)
s(2106) =< s(2105)
s(2107) =< s(2104)

  with precondition: [V_PL_bufend>=V_s+3] 

* Chain [136]: 656*s(2136)+324*s(2138)+36*s(2139)+12*s(2151)+12*s(2152)+144*s(2153)+48*s(2159)+48*s(2160)+108*s(2162)+12*s(2174)+12*s(2175)+180*s(2176)+12*s(2182)+12*s(2183)+24*s(2222)+24*s(2223)+48*s(2230)+48*s(2231)+20*s(2233)+6
  Such that:aux(273) =< 1
aux(274) =< 2
aux(275) =< -2*V_s+2*V_PL_bufend
aux(276) =< -V_s+V_PL_bufend
aux(277) =< -V_s+V_PL_bufend+1
aux(278) =< -V_s/2+V_PL_bufend/2
s(2135) =< aux(275)
s(2136) =< aux(276)
s(2135) =< aux(276)
s(2153) =< s(2135)
s(2138) =< s(2135)
s(2153) =< aux(276)
s(2140) =< s(2135)
s(2141) =< s(2135)-2
s(2142) =< max([aux(276),s(2140),s(2140)])
s(2143) =< s(2138)*s(2140)
s(2144) =< s(2138)*s(2141)
s(2145) =< max([aux(276),s(2135),0])+s(2135)
s(2154) =< s(2153)*s(2140)
s(2155) =< s(2153)*s(2141)
s(2142) =< s(2145)+1
s(2156) =< s(2154)*2
s(2157) =< s(2144)+s(2155)+aux(276)
s(2157) =< s(2153)*s(2145)
s(2158) =< s(2143)+s(2154)+aux(276)
s(2158) =< s(2156)+s(2156)+aux(275)
s(2158) =< s(2138)*s(2142)
s(2159) =< s(2158)
s(2160) =< s(2157)
s(2207) =< aux(275)
s(2207) =< aux(274)
s(2208) =< aux(273)
s(2208) =< aux(276)
s(2161) =< aux(276)
s(2161) =< aux(278)
s(2162) =< aux(276)
s(2162) =< aux(278)
s(2162) =< s(2161)
s(2163) =< aux(276)
s(2164) =< aux(276)-2
s(2213) =< max([aux(276),s(2163),s(2163)])
s(2166) =< s(2136)*s(2163)
s(2167) =< s(2136)*s(2164)
s(2216) =< max([s(2208),aux(276),0])+aux(276)
s(2169) =< s(2162)*s(2163)
s(2170) =< s(2162)*s(2164)
s(2213) =< s(2216)+1
s(2171) =< s(2169)*2
s(2220) =< s(2167)+s(2170)+aux(276)
s(2220) =< s(2162)*s(2216)
s(2221) =< s(2166)+s(2169)+aux(276)
s(2221) =< s(2171)+s(2171)+s(2207)
s(2221) =< s(2136)*s(2213)
s(2222) =< s(2221)
s(2223) =< s(2220)
s(2176) =< aux(276)
s(2176) =< aux(278)
s(2177) =< s(2176)*s(2163)
s(2178) =< s(2176)*s(2164)
s(2179) =< s(2177)*2
s(2228) =< s(2167)+s(2178)+aux(276)
s(2228) =< s(2176)*s(2216)
s(2229) =< s(2166)+s(2177)+aux(276)
s(2229) =< s(2179)+s(2179)+s(2207)
s(2229) =< s(2136)*s(2213)
s(2230) =< s(2229)
s(2231) =< s(2228)
s(2232) =< aux(276)
s(2232) =< aux(277)
s(2233) =< s(2232)
s(2137) =< s(2135)
s(2137) =< aux(276)
s(2139) =< s(2135)
s(2139) =< aux(276)
s(2139) =< s(2137)
s(2146) =< s(2139)*s(2140)
s(2147) =< s(2139)*s(2141)
s(2148) =< s(2146)*2
s(2149) =< s(2144)+s(2147)+aux(276)
s(2149) =< s(2139)*s(2145)
s(2150) =< s(2143)+s(2146)+aux(276)
s(2150) =< s(2148)+s(2148)+aux(275)
s(2150) =< s(2138)*s(2142)
s(2151) =< s(2150)
s(2152) =< s(2149)
s(2165) =< max([aux(276),s(2163),s(2163)])
s(2168) =< max([0,aux(276),0])+aux(276)
s(2165) =< s(2168)+1
s(2172) =< s(2167)+s(2170)+aux(276)
s(2172) =< s(2162)*s(2168)
s(2173) =< s(2166)+s(2169)+aux(276)
s(2173) =< s(2171)+s(2171)
s(2173) =< s(2136)*s(2165)
s(2174) =< s(2173)
s(2175) =< s(2172)
s(2180) =< s(2167)+s(2178)+aux(276)
s(2180) =< s(2176)*s(2168)
s(2181) =< s(2166)+s(2177)+aux(276)
s(2181) =< s(2179)+s(2179)
s(2181) =< s(2136)*s(2165)
s(2182) =< s(2181)
s(2183) =< s(2180)

  with precondition: [V_PL_bufend>=V_s+4] 

* Chain [135]: 318*s(2287)+564*s(2289)+108*s(2290)+36*s(2302)+36*s(2303)+180*s(2304)+60*s(2310)+60*s(2311)+72*s(2346)+24*s(2358)+24*s(2359)+72*s(2360)+24*s(2366)+24*s(2367)+6
  Such that:aux(279) =< 1
aux(280) =< 2
aux(281) =< -2*V_s+2*V_PL_bufend
aux(282) =< -V_s+V_PL_bufend
aux(283) =< -V_s/2+V_PL_bufend/2
s(2286) =< aux(281)
s(2287) =< aux(282)
s(2286) =< aux(282)
s(2288) =< s(2286)
s(2288) =< aux(282)
s(2289) =< s(2286)
s(2290) =< s(2286)
s(2290) =< aux(282)
s(2290) =< s(2288)
s(2291) =< s(2286)
s(2292) =< s(2286)-2
s(2293) =< max([aux(282),s(2291),s(2291)])
s(2294) =< s(2289)*s(2291)
s(2295) =< s(2289)*s(2292)
s(2296) =< max([aux(282),s(2286),0])+s(2286)
s(2297) =< s(2290)*s(2291)
s(2298) =< s(2290)*s(2292)
s(2293) =< s(2296)+1
s(2299) =< s(2297)*2
s(2300) =< s(2295)+s(2298)+aux(282)
s(2300) =< s(2290)*s(2296)
s(2301) =< s(2294)+s(2297)+aux(282)
s(2301) =< s(2299)+s(2299)+aux(281)
s(2301) =< s(2289)*s(2293)
s(2302) =< s(2301)
s(2303) =< s(2300)
s(2304) =< s(2286)
s(2304) =< aux(282)
s(2305) =< s(2304)*s(2291)
s(2306) =< s(2304)*s(2292)
s(2307) =< s(2305)*2
s(2308) =< s(2295)+s(2306)+aux(282)
s(2308) =< s(2304)*s(2296)
s(2309) =< s(2294)+s(2305)+aux(282)
s(2309) =< s(2307)+s(2307)+aux(281)
s(2309) =< s(2289)*s(2293)
s(2310) =< s(2309)
s(2311) =< s(2308)
s(2343) =< aux(281)
s(2343) =< aux(280)
s(2344) =< aux(279)
s(2344) =< aux(282)
s(2345) =< aux(282)
s(2345) =< aux(283)
s(2346) =< aux(282)
s(2346) =< aux(283)
s(2346) =< s(2345)
s(2347) =< aux(282)
s(2348) =< aux(282)-2
s(2349) =< max([aux(282),s(2347),s(2347)])
s(2350) =< s(2287)*s(2347)
s(2351) =< s(2287)*s(2348)
s(2352) =< max([s(2344),aux(282),0])+aux(282)
s(2353) =< s(2346)*s(2347)
s(2354) =< s(2346)*s(2348)
s(2349) =< s(2352)+1
s(2355) =< s(2353)*2
s(2356) =< s(2351)+s(2354)+aux(282)
s(2356) =< s(2346)*s(2352)
s(2357) =< s(2350)+s(2353)+aux(282)
s(2357) =< s(2355)+s(2355)+s(2343)
s(2357) =< s(2287)*s(2349)
s(2358) =< s(2357)
s(2359) =< s(2356)
s(2360) =< aux(282)
s(2360) =< aux(283)
s(2361) =< s(2360)*s(2347)
s(2362) =< s(2360)*s(2348)
s(2363) =< s(2361)*2
s(2364) =< s(2351)+s(2362)+aux(282)
s(2364) =< s(2360)*s(2352)
s(2365) =< s(2350)+s(2361)+aux(282)
s(2365) =< s(2363)+s(2363)+s(2343)
s(2365) =< s(2287)*s(2349)
s(2366) =< s(2365)
s(2367) =< s(2364)

  with precondition: [V_PL_bufend>=V_s+5] 

* Chain [134]: 4*s(2427)+312*s(2429)+72*s(2430)+24*s(2442)+24*s(2443)+72*s(2444)+24*s(2450)+24*s(2451)+6
  Such that:aux(284) =< -2*V_s+2*V_PL_bufend
aux(285) =< -V_s+V_PL_bufend
s(2426) =< aux(284)
s(2427) =< aux(285)
s(2426) =< aux(285)
s(2428) =< s(2426)
s(2428) =< aux(285)
s(2429) =< s(2426)
s(2430) =< s(2426)
s(2430) =< aux(285)
s(2430) =< s(2428)
s(2431) =< s(2426)
s(2432) =< s(2426)-2
s(2433) =< max([aux(285),s(2431),s(2431)])
s(2434) =< s(2429)*s(2431)
s(2435) =< s(2429)*s(2432)
s(2436) =< max([aux(285),s(2426),0])+s(2426)
s(2437) =< s(2430)*s(2431)
s(2438) =< s(2430)*s(2432)
s(2433) =< s(2436)+1
s(2439) =< s(2437)*2
s(2440) =< s(2435)+s(2438)+aux(285)
s(2440) =< s(2430)*s(2436)
s(2441) =< s(2434)+s(2437)+aux(285)
s(2441) =< s(2439)+s(2439)+aux(284)
s(2441) =< s(2429)*s(2433)
s(2442) =< s(2441)
s(2443) =< s(2440)
s(2444) =< s(2426)
s(2444) =< aux(285)
s(2445) =< s(2444)*s(2431)
s(2446) =< s(2444)*s(2432)
s(2447) =< s(2445)*2
s(2448) =< s(2435)+s(2446)+aux(285)
s(2448) =< s(2444)*s(2436)
s(2449) =< s(2434)+s(2445)+aux(285)
s(2449) =< s(2447)+s(2447)+aux(284)
s(2449) =< s(2429)*s(2433)
s(2450) =< s(2449)
s(2451) =< s(2448)

  with precondition: [V_PL_bufend>=V_s+6] 

* Chain [133]: 5
  with precondition: [V_s+1>=V_PL_bufend] 

* Chain [132]: 3
  with precondition: [V_s>=V_PL_bufend] 


Closed-form bounds of eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B): 
-------------------------------------
* Chain [141] with precondition: [V_PL_bufend=V_s+2] 
    - Upper bound: 5 
    - Complexity: constant 
* Chain [140] with precondition: [V_PL_bufend=V_s+1] 
    - Upper bound: 5 
    - Complexity: constant 
* Chain [139] with precondition: [V_PL_bufend>=V_s+1] 
    - Upper bound: -5*V_s+5*V_PL_bufend+3 
    - Complexity: n 
* Chain [138] with precondition: [V_PL_bufend>=V_s+2] 
    - Upper bound: (-24*V_s+24*V_PL_bufend-48)*(-V_s+V_PL_bufend)+6+(-171*V_s+171*V_PL_bufend)+(-24*V_s+24*V_PL_bufend)*(-V_s+V_PL_bufend) 
    - Complexity: n^2 
* Chain [137] with precondition: [V_PL_bufend>=V_s+3] 
    - Upper bound: (-120*V_s+120*V_PL_bufend-240)*(-V_s+V_PL_bufend)+28+(-48*V_s+48*V_PL_bufend-48)*(-2*V_s+2*V_PL_bufend)+(-740*V_s+740*V_PL_bufend)+(-120*V_s+120*V_PL_bufend)*(-V_s+V_PL_bufend)+(-192*V_s+192*V_PL_bufend)+(-2*V_s+2*V_PL_bufend)*(-48*V_s+48*V_PL_bufend) 
    - Complexity: n^2 
* Chain [136] with precondition: [V_PL_bufend>=V_s+4] 
    - Upper bound: (-192*V_s+192*V_PL_bufend-384)*(-V_s+V_PL_bufend)+6+(-240*V_s+240*V_PL_bufend-240)*(-2*V_s+2*V_PL_bufend)+(-1276*V_s+1276*V_PL_bufend)+(-192*V_s+192*V_PL_bufend)*(-V_s+V_PL_bufend)+(-1008*V_s+1008*V_PL_bufend)+(-2*V_s+2*V_PL_bufend)*(-240*V_s+240*V_PL_bufend) 
    - Complexity: n^2 
* Chain [135] with precondition: [V_PL_bufend>=V_s+5] 
    - Upper bound: (-96*V_s+96*V_PL_bufend-192)*(-V_s+V_PL_bufend)+6+(-384*V_s+384*V_PL_bufend-384)*(-2*V_s+2*V_PL_bufend)+(-750*V_s+750*V_PL_bufend)+(-96*V_s+96*V_PL_bufend)*(-V_s+V_PL_bufend)+(-1704*V_s+1704*V_PL_bufend)+(-2*V_s+2*V_PL_bufend)*(-384*V_s+384*V_PL_bufend) 
    - Complexity: n^2 
* Chain [134] with precondition: [V_PL_bufend>=V_s+6] 
    - Upper bound: (-192*V_s+192*V_PL_bufend-192)*(-2*V_s+2*V_PL_bufend)+6+(-100*V_s+100*V_PL_bufend)+(-912*V_s+912*V_PL_bufend)+(-2*V_s+2*V_PL_bufend)*(-192*V_s+192*V_PL_bufend) 
    - Complexity: n^2 
* Chain [133] with precondition: [V_s+1>=V_PL_bufend] 
    - Upper bound: 5 
    - Complexity: constant 
* Chain [132] with precondition: [V_s>=V_PL_bufend] 
    - Upper bound: 3 
    - Complexity: constant 

### Maximum cost of eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B): max([2,nat(-V_s+V_PL_bufend)*95+3+max([nat(nat(-2*V_s+2*V_PL_bufend)+ -2)*96*nat(-2*V_s+2*V_PL_bufend)+nat(-2*V_s+2*V_PL_bufend)*456+nat(-2*V_s+2*V_PL_bufend)*96*nat(-2*V_s+2*V_PL_bufend),nat(nat(-2*V_s+2*V_PL_bufend)+ -2)*24*nat(-2*V_s+2*V_PL_bufend)+nat(nat(-V_s+V_PL_bufend)+ -2)*72*nat(-V_s+V_PL_bufend)+nat(-V_s+V_PL_bufend)*569+nat(-V_s+V_PL_bufend)*72*nat(-V_s+V_PL_bufend)+nat(-2*V_s+2*V_PL_bufend)*96+nat(-2*V_s+2*V_PL_bufend)*24*nat(-2*V_s+2*V_PL_bufend)+max([nat(nat(-V_s+V_PL_bufend)+ -2)*24*nat(-V_s+V_PL_bufend)+nat(-V_s+V_PL_bufend)*24*nat(-V_s+V_PL_bufend)+max([22,nat(nat(-2*V_s+2*V_PL_bufend)+ -2)*96*nat(-2*V_s+2*V_PL_bufend)+nat(nat(-V_s+V_PL_bufend)+ -2)*72*nat(-V_s+V_PL_bufend)+nat(-V_s+V_PL_bufend)*536+nat(-V_s+V_PL_bufend)*72*nat(-V_s+V_PL_bufend)+nat(-2*V_s+2*V_PL_bufend)*408+nat(-2*V_s+2*V_PL_bufend)*96*nat(-2*V_s+2*V_PL_bufend)]),nat(nat(-2*V_s+2*V_PL_bufend)+ -2)*168*nat(-2*V_s+2*V_PL_bufend)+nat(-V_s+V_PL_bufend)*10+nat(-2*V_s+2*V_PL_bufend)*756+nat(-2*V_s+2*V_PL_bufend)*168*nat(-2*V_s+2*V_PL_bufend)])+(nat(nat(-V_s+V_PL_bufend)+ -2)*24*nat(-V_s+V_PL_bufend)+nat(-V_s+V_PL_bufend)*71+nat(-V_s+V_PL_bufend)*24*nat(-V_s+V_PL_bufend))])+nat(-V_s+V_PL_bufend)*5])+3 
Asymptotic class: n^2 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 114 ms.
* Invariants computed in 214 ms.
   - Backward Invariants 132 ms.
   - Transitive Invariants 19 ms.
* Refinement performed in 800 ms.
* Termination proved in 32 ms.
* Upper bounds computed in 3845 ms.
   - Equation cost structures 3148 ms.
   - Phase cost structures 324 ms.
   - Chain cost structures 125 ms.
   - Solving cost expressions 64 ms.
* Total analysis performed in 5164 ms.


Warning: Ignored call to eval_Perl_scan_vstring_stop/1 in equation eval_Perl_scan_vstring_bb12_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive : [eval_Perl_scan_vstring_10/7,eval_Perl_scan_vstring_11/8,eval_Perl_scan_vstring_bb1_in/7,eval_Perl_scan_vstring_bb2_in/7,eval_Perl_scan_vstring_bb3_in/8]
1. non_recursive : [eval_Perl_scan_vstring_bb12_in/1]
2. recursive : [eval_Perl_scan_vstring_bb5_in/9]
3. recursive : [eval_Perl_scan_vstring_34/11,eval_Perl_scan_vstring_35/12,eval_Perl_scan_vstring_bb10_in/11,eval_Perl_scan_vstring_bb11_in/12,eval_Perl_scan_vstring_bb9_in/11]
4. recursive : [eval_Perl_scan_vstring_27/5,eval_Perl_scan_vstring_28/6,eval_Perl_scan_vstring_30/7,eval_Perl_scan_vstring_31/7,eval_Perl_scan_vstring_32/7,eval_Perl_scan_vstring_33/7,eval_Perl_scan_vstring__critedge2_in/4,eval_Perl_scan_vstring_bb6_in/5,eval_Perl_scan_vstring_bb7_in/5,eval_Perl_scan_vstring_bb8_in/6,loop_cont_eval_Perl_scan_vstring_bb5_in/6,loop_cont_eval_Perl_scan_vstring_bb9_in/5]
5. non_recursive : [loop_cont_eval_Perl_scan_vstring__critedge2_in/2]
6. non_recursive : [eval_Perl_scan_vstring_22/4]
7. non_recursive : [eval_Perl_scan_vstring_21/4]
8. non_recursive : [eval_Perl_scan_vstring_20/4]
9. non_recursive : [eval_Perl_scan_vstring_19/6]
10. non_recursive : [eval_Perl_scan_vstring_18/6]
11. non_recursive : [eval_Perl_scan_vstring_17/5]
12. non_recursive : [eval_Perl_scan_vstring_16/4]
13. non_recursive : [eval_Perl_scan_vstring_bb4_in/4]
14. non_recursive : [eval_Perl_scan_vstring_15/5]
15. non_recursive : [eval_Perl_scan_vstring_14/4]
16. non_recursive : [eval_Perl_scan_vstring__critedge_in/4]
17. non_recursive : [loop_cont_eval_Perl_scan_vstring_bb1_in/5]
18. non_recursive : [eval_Perl_scan_vstring_9/4]
19. non_recursive : [eval_Perl_scan_vstring_8/4]
20. non_recursive : [eval_Perl_scan_vstring_7/5]
21. non_recursive : [eval_Perl_scan_vstring_6/5]
22. non_recursive : [eval_Perl_scan_vstring_5/4]
23. non_recursive : [eval_Perl_scan_vstring_4/3]
24. non_recursive : [eval_Perl_scan_vstring_3/3]
25. non_recursive : [eval_Perl_scan_vstring_2/3]
26. non_recursive : [eval_Perl_scan_vstring_1/3]
27. non_recursive : [eval_Perl_scan_vstring_0/3]
28. non_recursive : [eval_Perl_scan_vstring_bb0_in/3]
29. non_recursive : [eval_Perl_scan_vstring_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_Perl_scan_vstring_bb1_in/7
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into eval_Perl_scan_vstring_bb5_in/9
3. SCC is partially evaluated into eval_Perl_scan_vstring_bb9_in/11
4. SCC is partially evaluated into eval_Perl_scan_vstring__critedge2_in/4
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into eval_Perl_scan_vstring_19/6
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is partially evaluated into eval_Perl_scan_vstring_15/5
15. SCC is completely evaluated into other SCCs
16. SCC is completely evaluated into other SCCs
17. SCC is completely evaluated into other SCCs
18. SCC is completely evaluated into other SCCs
19. SCC is completely evaluated into other SCCs
20. SCC is partially evaluated into eval_Perl_scan_vstring_7/5
21. SCC is completely evaluated into other SCCs
22. SCC is completely evaluated into other SCCs
23. SCC is completely evaluated into other SCCs
24. SCC is completely evaluated into other SCCs
25. SCC is completely evaluated into other SCCs
26. SCC is completely evaluated into other SCCs
27. SCC is completely evaluated into other SCCs
28. SCC is completely evaluated into other SCCs
29. SCC is partially evaluated into eval_Perl_scan_vstring_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_Perl_scan_vstring_bb1_in/7 
* CE 6 is refined into CE [24] 
* CE 8 is refined into CE [25] 
* CE 7 is refined into CE [26] 


#### Refined cost equations eval_Perl_scan_vstring_bb1_in/7 
* CE 24: eval_Perl_scan_vstring_bb1_in(A,B,C,D,A,B,C) = 0
     [B>=C+1,C>=A,D=4] 
* CE 25: eval_Perl_scan_vstring_bb1_in(A,B,C,D,A,B,C) = 0
     [C>=B,C>=A,D=4] 
* CE 26: eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V_pos_1,B,C,D,E) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,F,G,C,D,E)
     [V_PL_bufend>=V_pos_1+1,V_pos_1>=V_s,V_pos_1+1=F,G=4,B=4] 

### Cost equations --> "Loop" of eval_Perl_scan_vstring_bb1_in/7 
* CEs [26] --> Loop 21 
* CEs [24] --> Loop 22 
* CEs [25] --> Loop 23 

#### Loops of eval_Perl_scan_vstring_bb1_in/7 
* Loop 21: eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V_pos_1,B,C,D,E)->  eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V_pos_1',B',C,D,E)
                  [V_PL_bufend>=V_pos_1+1,V_pos_1>=V_s,V_pos_1+1=V_pos_1',B'=4,B=4] 
* Loop 22: eval_Perl_scan_vstring_bb1_in(A,B,C,D,A,B,C) [B>=C+1,C>=A,D=4] 
* Loop 23: eval_Perl_scan_vstring_bb1_in(A,B,C,D,A,B,C) [C>=B,C>=A,D=4] 

### Ranking functions of CR eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V_pos_1,B,C,D,E) 
* RF of phase [21]: [V_PL_bufend-V_pos_1]

#### Partial ranking functions of CR eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V_pos_1,B,C,D,E) 
* Partial RF of phase [21]:
  - RF of loop [21:1]:
    V_PL_bufend-V_pos_1

Discarded unfeasible chain [[21]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V_pos_1,B,C,D,E) 
* [[21],23]
* [[21],22]
* [23]
* [22]


### Merging Chains  eval_Perl_scan_vstring_bb1_in/7 into  External patterns of execution 
* [[23,[21]]] --> 1 
* [[23]] --> 2 
* [[22]] --> 3 
* [[22,[21]]] --> 4 


### Specialization of cost equations eval_Perl_scan_vstring_bb5_in/9 
* CE 20 is refined into CE [27] 
* CE 19 is refined into CE [28] 


#### Refined cost equations eval_Perl_scan_vstring_bb5_in/9 
* CE 27: eval_Perl_scan_vstring_bb5_in(A,B,C,D,E,A,B,C,D) = 0
     [C>=D,B>=D,E=2] 
* CE 28: eval_Perl_scan_vstring_bb5_in(V_PL_bufend,V_pos_2,V__1,V_end_0,B,C,D,E,F) = 1+ eval_Perl_scan_vstring_bb5_in(V_PL_bufend,V_pos_2,V__1,G,H,C,D,E,F)
     [V_pos_2>=V_end_0,V_end_0>=V__1+1,V_end_0=G+1,H=2,B=2] 

### Cost equations --> "Loop" of eval_Perl_scan_vstring_bb5_in/9 
* CEs [28] --> Loop 24 
* CEs [27] --> Loop 25 

#### Loops of eval_Perl_scan_vstring_bb5_in/9 
* Loop 24: eval_Perl_scan_vstring_bb5_in(V_PL_bufend,V_pos_2,V__1,V_end_0,B,C,D,E,F)->  eval_Perl_scan_vstring_bb5_in(V_PL_bufend,V_pos_2,V__1,V_end_0',B',C,D,E,F)
                  [V_pos_2>=V_end_0,V_end_0>=V__1+1,V_end_0=V_end_0'+1,B'=2,B=2] 
* Loop 25: eval_Perl_scan_vstring_bb5_in(A,B,C,D,E,A,B,C,D) [C>=D,B>=D,E=2] 

### Ranking functions of CR eval_Perl_scan_vstring_bb5_in(V_PL_bufend,V_pos_2,V__1,V_end_0,B,C,D,E,F) 
* RF of phase [24]: [-V__1+V_end_0]

#### Partial ranking functions of CR eval_Perl_scan_vstring_bb5_in(V_PL_bufend,V_pos_2,V__1,V_end_0,B,C,D,E,F) 
* Partial RF of phase [24]:
  - RF of loop [24:1]:
    -V__1+V_end_0

Discarded unfeasible chain [[24]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_Perl_scan_vstring_bb5_in(V_PL_bufend,V_pos_2,V__1,V_end_0,B,C,D,E,F) 
* [[24],25]
* [25]


### Merging Chains  eval_Perl_scan_vstring_bb5_in/9 into  External patterns of execution 
* [[25]] --> 1 
* [[25,[24]]] --> 2 


### Specialization of cost equations eval_Perl_scan_vstring_bb9_in/11 
* CE 21 is refined into CE [29] 
* CE 23 is refined into CE [30] 
* CE 22 is refined into CE [31] 


#### Refined cost equations eval_Perl_scan_vstring_bb9_in/11 
* CE 29: eval_Perl_scan_vstring_bb9_in(A,B,C,D,E,F,G,H,A,G,F) = 0
     [A>=G+1,G>=F,F=B+1,H=3] 
* CE 30: eval_Perl_scan_vstring_bb9_in(A,B,C,D,E,F,G,H,A,G,F) = 0
     [A>=F+1,G>=A,F=B+1,H=3] 
* CE 31: eval_Perl_scan_vstring_bb9_in(V_PL_bufend,V_pos_2,V__1,V_end_0,V_16,V_18,V_pos_3,B,C,D,E) = 1+ eval_Perl_scan_vstring_bb9_in(V_PL_bufend,F,V__1,V_end_0,V_16,V_18,G,H,C,D,E)
     [V_PL_bufend>=V_pos_3+1,V_pos_3>=V_18,V_pos_3+1=G,V_18=F+1,V_18=V_pos_2+1,H=3,B=3] 

### Cost equations --> "Loop" of eval_Perl_scan_vstring_bb9_in/11 
* CEs [31] --> Loop 26 
* CEs [29] --> Loop 27 
* CEs [30] --> Loop 28 

#### Loops of eval_Perl_scan_vstring_bb9_in/11 
* Loop 26: eval_Perl_scan_vstring_bb9_in(V_PL_bufend,V_pos_2,V__1,V_end_0,V_16,V_18,V_pos_3,B,C,D,E)->  eval_Perl_scan_vstring_bb9_in(V_PL_bufend,V_pos_2',V__1,V_end_0,V_16,V_18,V_pos_3',B',C,D,E)
                  [V_PL_bufend>=V_pos_3+1,V_pos_3>=V_18,V_pos_3+1=V_pos_3',V_18=V_pos_2'+1,V_18=V_pos_2+1,B'=3,B=3] 
* Loop 27: eval_Perl_scan_vstring_bb9_in(A,B,C,D,E,F,G,H,A,G,I) [A>=G+1,G>=B+1,B+1=I,B+1=F,H=3] 
* Loop 28: eval_Perl_scan_vstring_bb9_in(A,B,C,D,E,F,G,H,A,G,I) [A>=B+2,G>=A,B+1=I,B+1=F,H=3] 

### Ranking functions of CR eval_Perl_scan_vstring_bb9_in(V_PL_bufend,V_pos_2,V__1,V_end_0,V_16,V_18,V_pos_3,B,C,D,E) 
* RF of phase [26]: [V_PL_bufend-V_pos_3]

#### Partial ranking functions of CR eval_Perl_scan_vstring_bb9_in(V_PL_bufend,V_pos_2,V__1,V_end_0,V_16,V_18,V_pos_3,B,C,D,E) 
* Partial RF of phase [26]:
  - RF of loop [26:1]:
    V_PL_bufend-V_pos_3

Discarded unfeasible chain [[26]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_Perl_scan_vstring_bb9_in(V_PL_bufend,V_pos_2,V__1,V_end_0,V_16,V_18,V_pos_3,B,C,D,E) 
* [[26],28]
* [[26],27]
* [27]


### Merging Chains  eval_Perl_scan_vstring_bb9_in/11 into  External patterns of execution 
* [[27]] --> 1 
* [[28,[26]]] --> 2 
* [[27,[26]]] --> 3 


### Specialization of cost equations eval_Perl_scan_vstring__critedge2_in/4 
* CE 15 is refined into CE [32,33] 
* CE 18 is refined into CE [34,35] 
* CE 16 is refined into CE [36,37,38,39,40,41] 
* CE 17 is refined into CE [42,43,44,45,46,47] 


#### Refined cost equations eval_Perl_scan_vstring__critedge2_in/4 
* CE 32: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) = 1+ eval_Perl_scan_vstring_bb5_in(V_PL_bufend,V_pos_2,V__1,V_pos_2,C,V_PL_bufend,V_pos_2,V__1,V_pos_2):1
     [V__1>=V_pos_2,V_PL_bufend>=V_pos_2+2,C=2,B=5] 
* CE 33: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) = 1+ eval_Perl_scan_vstring_bb5_in(V_PL_bufend,V_pos_2,V__1,V_pos_2,C,V_PL_bufend,V_pos_2,V__1,V__1):2
     [V_pos_2>=V__1+1,V_PL_bufend>=V_pos_2+2,C=2,B=5] 
* CE 34: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) = 1+ eval_Perl_scan_vstring_bb5_in(V_PL_bufend,V_pos_2,V__1,V_pos_2,C,V_PL_bufend,V_pos_2,V__1,V_pos_2):1
     [V__1>=V_pos_2,V_pos_2+1>=V_PL_bufend,C=2,B=5] 
* CE 35: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) = 1+ eval_Perl_scan_vstring_bb5_in(V_PL_bufend,V_pos_2,V__1,V_pos_2,C,V_PL_bufend,V_pos_2,V__1,V__1):2
     [V_pos_2>=V__1+1,V_pos_2+1>=V_PL_bufend,C=2,B=5] 
* CE 36: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) = 3+ eval_Perl_scan_vstring_bb5_in(V_PL_bufend,C,V__1,D,E,V_PL_bufend,F,V__1,G):1+ eval_Perl_scan_vstring_bb9_in(V_PL_bufend,H,V__1,I,J,K,K,L,V_PL_bufend,K,K):1+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,K,K,M)
     [V_PL_bufend>=K+1,V__1+1>=K,0>=J+1,K=I+1,K=H+1,K=G+1,K=F+1,K=D+1,K=C+1,K=V_pos_2+1,M=5,L=3,E=2,B=5] 
* CE 37: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) = 3+ eval_Perl_scan_vstring_bb5_in(V_PL_bufend,C,V__1,D,E,V_PL_bufend,F,V__1,G):1+ eval_Perl_scan_vstring_bb9_in(V_PL_bufend,H,V__1,I,J,K,K,L,V_PL_bufend,V_PL_bufend,K):2+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_PL_bufend,K,M)
     [V_PL_bufend>=K+1,V__1+1>=K,0>=J+1,K=I+1,K=H+1,K=G+1,K=F+1,K=D+1,K=C+1,K=V_pos_2+1,M=5,L=3,E=2,B=5] 
* CE 38: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) = 3+ eval_Perl_scan_vstring_bb5_in(V_PL_bufend,C,V__1,D,E,V_PL_bufend,F,V__1,G):1+ eval_Perl_scan_vstring_bb9_in(V_PL_bufend,H,V__1,I,J,K,K,L,V_PL_bufend,M,K):3+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,M,K,N)
     [V_PL_bufend>=M+1,M>=K+1,V__1+1>=K,0>=J+1,K=I+1,K=H+1,K=G+1,K=F+1,K=D+1,K=C+1,K=V_pos_2+1,N=5,L=3,E=2,B=5] 
* CE 39: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) = 3+ eval_Perl_scan_vstring_bb5_in(V_PL_bufend,C,V__1,D,E,V_PL_bufend,F,V__1,V__1):2+ eval_Perl_scan_vstring_bb9_in(V_PL_bufend,G,V__1,V__1,H,I,I,J,V_PL_bufend,I,I):1+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,I,I,K)
     [V_PL_bufend>=I+1,I>=V__1+2,0>=H+1,I=G+1,I=F+1,I=D+1,I=C+1,I=V_pos_2+1,K=5,J=3,E=2,B=5] 
* CE 40: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) = 3+ eval_Perl_scan_vstring_bb5_in(V_PL_bufend,C,V__1,D,E,V_PL_bufend,F,V__1,V__1):2+ eval_Perl_scan_vstring_bb9_in(V_PL_bufend,G,V__1,V__1,H,I,I,J,V_PL_bufend,V_PL_bufend,I):2+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_PL_bufend,I,K)
     [V_PL_bufend>=I+1,I>=V__1+2,0>=H+1,I=G+1,I=F+1,I=D+1,I=C+1,I=V_pos_2+1,K=5,J=3,E=2,B=5] 
* CE 41: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) = 3+ eval_Perl_scan_vstring_bb5_in(V_PL_bufend,C,V__1,D,E,V_PL_bufend,F,V__1,V__1):2+ eval_Perl_scan_vstring_bb9_in(V_PL_bufend,G,V__1,V__1,H,I,I,J,V_PL_bufend,K,I):3+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,K,I,L)
     [V_PL_bufend>=K+1,K>=I+1,I>=V__1+2,0>=H+1,I=G+1,I=F+1,I=D+1,I=C+1,I=V_pos_2+1,L=5,J=3,E=2,B=5] 
* CE 42: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) = 3+ eval_Perl_scan_vstring_bb5_in(V_PL_bufend,C,V__1,D,E,V_PL_bufend,F,V__1,G):1+ eval_Perl_scan_vstring_bb9_in(V_PL_bufend,H,V__1,I,J,K,K,L,V_PL_bufend,K,K):1+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,K,K,M)
     [V_PL_bufend>=K+1,V__1+1>=K,J>=1,K=I+1,K=H+1,K=G+1,K=F+1,K=D+1,K=C+1,K=V_pos_2+1,M=5,L=3,E=2,B=5] 
* CE 43: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) = 3+ eval_Perl_scan_vstring_bb5_in(V_PL_bufend,C,V__1,D,E,V_PL_bufend,F,V__1,G):1+ eval_Perl_scan_vstring_bb9_in(V_PL_bufend,H,V__1,I,J,K,K,L,V_PL_bufend,V_PL_bufend,K):2+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_PL_bufend,K,M)
     [V_PL_bufend>=K+1,V__1+1>=K,J>=1,K=I+1,K=H+1,K=G+1,K=F+1,K=D+1,K=C+1,K=V_pos_2+1,M=5,L=3,E=2,B=5] 
* CE 44: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) = 3+ eval_Perl_scan_vstring_bb5_in(V_PL_bufend,C,V__1,D,E,V_PL_bufend,F,V__1,G):1+ eval_Perl_scan_vstring_bb9_in(V_PL_bufend,H,V__1,I,J,K,K,L,V_PL_bufend,M,K):3+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,M,K,N)
     [V_PL_bufend>=M+1,M>=K+1,V__1+1>=K,J>=1,K=I+1,K=H+1,K=G+1,K=F+1,K=D+1,K=C+1,K=V_pos_2+1,N=5,L=3,E=2,B=5] 
* CE 45: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) = 3+ eval_Perl_scan_vstring_bb5_in(V_PL_bufend,C,V__1,D,E,V_PL_bufend,F,V__1,V__1):2+ eval_Perl_scan_vstring_bb9_in(V_PL_bufend,G,V__1,V__1,H,I,I,J,V_PL_bufend,I,I):1+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,I,I,K)
     [V_PL_bufend>=I+1,I>=V__1+2,H>=1,I=G+1,I=F+1,I=D+1,I=C+1,I=V_pos_2+1,K=5,J=3,E=2,B=5] 
* CE 46: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) = 3+ eval_Perl_scan_vstring_bb5_in(V_PL_bufend,C,V__1,D,E,V_PL_bufend,F,V__1,V__1):2+ eval_Perl_scan_vstring_bb9_in(V_PL_bufend,G,V__1,V__1,H,I,I,J,V_PL_bufend,V_PL_bufend,I):2+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_PL_bufend,I,K)
     [V_PL_bufend>=I+1,I>=V__1+2,H>=1,I=G+1,I=F+1,I=D+1,I=C+1,I=V_pos_2+1,K=5,J=3,E=2,B=5] 
* CE 47: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) = 3+ eval_Perl_scan_vstring_bb5_in(V_PL_bufend,C,V__1,D,E,V_PL_bufend,F,V__1,V__1):2+ eval_Perl_scan_vstring_bb9_in(V_PL_bufend,G,V__1,V__1,H,I,I,J,V_PL_bufend,K,I):3+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,K,I,L)
     [V_PL_bufend>=K+1,K>=I+1,I>=V__1+2,H>=1,I=G+1,I=F+1,I=D+1,I=C+1,I=V_pos_2+1,L=5,J=3,E=2,B=5] 

### Cost equations --> "Loop" of eval_Perl_scan_vstring__critedge2_in/4 
* CEs [41,47] --> Loop 29 
* CEs [38,44] --> Loop 30 
* CEs [40,46] --> Loop 31 
* CEs [37,43] --> Loop 32 
* CEs [36,42] --> Loop 33 
* CEs [39,45] --> Loop 34 
* CEs [33] --> Loop 35 
* CEs [32] --> Loop 36 
* CEs [35] --> Loop 37 
* CEs [34] --> Loop 38 

#### Loops of eval_Perl_scan_vstring__critedge2_in/4 
* Loop 29: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)->  eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2',V__1',B')
                  [V_PL_bufend>=V_pos_2'+1,V_pos_2>=V__1+1,V_pos_2'>=V_pos_2+2,V_pos_2+1=V__1',B'=5,B=5] 
* Loop 30: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)->  eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2',V__1',B')
                  [V_PL_bufend>=V_pos_2'+1,V_pos_2'>=V_pos_2+2,V__1>=V_pos_2,V_pos_2+1=V__1',B'=5,B=5] 
* Loop 31: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)->  eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_PL_bufend,A',B')
                  [V_pos_2>=V__1+1,V_PL_bufend>=V_pos_2+2,V_pos_2+1=A',B'=5,B=5] 
* Loop 32: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)->  eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_PL_bufend,A',B')
                  [V__1>=V_pos_2,V_PL_bufend>=V_pos_2+2,V_pos_2+1=A',B'=5,B=5] 
* Loop 33: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)->  eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2',V__1',B')
                  [V__1>=V_pos_2,V_PL_bufend>=V_pos_2+2,V_pos_2+1=V__1',V_pos_2+1=V_pos_2',B'=5,B=5] 
* Loop 34: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)->  eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2',V__1',B')
                  [V_pos_2>=V__1+1,V_PL_bufend>=V_pos_2+2,V_pos_2+1=V__1',V_pos_2+1=V_pos_2',B'=5,B=5] 
* Loop 35: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) [V_pos_2>=V__1+1,V_PL_bufend>=V_pos_2+2,B=5] 
* Loop 36: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) [V__1>=V_pos_2,V_PL_bufend>=V_pos_2+2,B=5] 
* Loop 37: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) [V_pos_2>=V__1+1,V_pos_2+1>=V_PL_bufend,B=5] 
* Loop 38: eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) [V__1>=V_pos_2,V_pos_2+1>=V_PL_bufend,B=5] 

### Ranking functions of CR eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) 
* RF of phase [29,30,33,34]: [V_PL_bufend-V_pos_2-1]

#### Partial ranking functions of CR eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) 
* Partial RF of phase [29,30,33,34]:
  - RF of loop [29:1]:
    V_PL_bufend/2-V__1/2-3/2 depends on loops [30:1,33:1] 
  - RF of loop [29:1,30:1]:
    V_PL_bufend/2-V_pos_2/2-1
  - RF of loop [30:1]:
    -V_pos_2+V__1+1 depends on loops [29:1,34:1] 
  - RF of loop [33:1,34:1]:
    V_PL_bufend-V_pos_2-1
  - RF of loop [34:1]:
    V_PL_bufend/2-V__1/2-1 depends on loops [30:1,33:1] 
    V_pos_2-V__1 depends on loops [29:1,30:1,33:1] 

Discarded unfeasible chain [[29,30,33,34]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) 
* [[29,30,33,34],38]
* [[29,30,33,34],37]
* [[29,30,33,34],36]
* [[29,30,33,34],35]
* [[29,30,33,34],32,37]
* [[29,30,33,34],31,37]
* [38]
* [37]
* [36]
* [35]
* [32,37]
* [31,37]


### Merging Chains  eval_Perl_scan_vstring__critedge2_in/4 into  External patterns of execution 
* [[38]] --> 1 
* [[37]] --> 2 
* [[37,31],[37,32],[35],[36],[37,31,[29,30,33,34]],[37,32,[29,30,33,34]],[35,[29,30,33,34]],[36,[29,30,33,34]],[37,[29,30,33,34]],[38,[29,30,33,34]]] --> 3 


### Specialization of cost equations eval_Perl_scan_vstring_19/6 
* CE 13 is refined into CE [48,49,50] 
* CE 12 is refined into CE [51,52,53] 
* CE 14 is refined into CE [54,55,56] 


#### Refined cost equations eval_Perl_scan_vstring_19/6 
* CE 48: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) = 1+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_1,V_11,C):1
     [V_11>=V_pos_1,V_pos_1+1>=V_PL_bufend,V_9>=1,V_11=V_s+1,C=5] 
* CE 49: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) = 1+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_1,V_11,C):2
     [V_pos_1>=V_11+1,V_pos_1+1>=V_PL_bufend,V_9>=1,V_11=V_s+1,C=5] 
* CE 50: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) = 1+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_1,V_11,C):3
     [V_PL_bufend>=V_pos_1+2,V_9>=1,V_11=V_s+1,C=5] 
* CE 51: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) = 1+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_1,V_11,C):1
     [V_11>=V_pos_1,V_pos_1+1>=V_PL_bufend,0>=V_9+1,V_11=V_s+1,C=5] 
* CE 52: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) = 1+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_1,V_11,C):2
     [V_pos_1>=V_11+1,V_pos_1+1>=V_PL_bufend,0>=V_9+1,V_11=V_s+1,C=5] 
* CE 53: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) = 1+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_1,V_11,C):3
     [V_PL_bufend>=V_pos_1+2,0>=V_9+1,V_11=V_s+1,C=5] 
* CE 54: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) = 1+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_1,V_s,C):1
     [V_s>=V_pos_1,V_pos_1+1>=V_PL_bufend,V_s+1=V_11,C=5,V_9=0] 
* CE 55: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) = 1+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_1,V_s,C):2
     [V_pos_1>=V_s+1,V_pos_1+1>=V_PL_bufend,V_s+1=V_11,C=5,V_9=0] 
* CE 56: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) = 1+ eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_1,V_s,C):3
     [V_PL_bufend>=V_pos_1+2,V_s+1=V_11,C=5,V_9=0] 

### Cost equations --> "Loop" of eval_Perl_scan_vstring_19/6 
* CEs [50] --> Loop 39 
* CEs [53] --> Loop 40 
* CEs [49] --> Loop 41 
* CEs [48] --> Loop 42 
* CEs [52] --> Loop 43 
* CEs [51] --> Loop 44 
* CEs [56] --> Loop 45 
* CEs [54] --> Loop 46 
* CEs [55] --> Loop 47 

#### Loops of eval_Perl_scan_vstring_19/6 
* Loop 39: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) [V_PL_bufend>=V_pos_1+2,V_9>=1,V_s+1=V_11] 
* Loop 40: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) [V_PL_bufend>=V_pos_1+2,0>=V_9+1,V_s+1=V_11] 
* Loop 41: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) [V_pos_1+1>=V_PL_bufend,V_pos_1>=V_s+2,V_9>=1,V_s+1=V_11] 
* Loop 42: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) [V_s+1>=V_pos_1,V_pos_1+1>=V_PL_bufend,V_9>=1,V_s+1=V_11] 
* Loop 43: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) [V_pos_1+1>=V_PL_bufend,V_pos_1>=V_s+2,0>=V_9+1,V_s+1=V_11] 
* Loop 44: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) [V_s+1>=V_pos_1,V_pos_1+1>=V_PL_bufend,0>=V_9+1,V_s+1=V_11] 
* Loop 45: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) [V_PL_bufend>=V_pos_1+2,V_s+1=V_11,V_9=0] 
* Loop 46: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) [V_s>=V_pos_1,V_pos_1+1>=V_PL_bufend,V_s+1=V_11,V_9=0] 
* Loop 47: eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) [V_pos_1+1>=V_PL_bufend,V_pos_1>=V_s+1,V_s+1=V_11,V_9=0] 

### Ranking functions of CR eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) 

#### Partial ranking functions of CR eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) 


### Resulting Chains:eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B) 
* [47]
* [46]
* [45]
* [44]
* [43]
* [42]
* [41]
* [40]
* [39]


### Merging Chains  eval_Perl_scan_vstring_19/6 into  External patterns of execution 
* [[46]] --> 1 
* [[47]] --> 2 
* [[45]] --> 3 
* [[44]] --> 4 
* [[43]] --> 5 
* [[40]] --> 6 
* [[42]] --> 7 
* [[41]] --> 8 
* [[39]] --> 9 


### Specialization of cost equations eval_Perl_scan_vstring_15/5 
* CE 10 is refined into CE [57,58,59,60,61,62,63,64,65] 
* CE 9 is refined into CE [66,67,68,69,70,71,72,73,74] 
* CE 11 is refined into CE [75] 


#### Refined cost equations eval_Perl_scan_vstring_15/5 
* CE 57: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(C,V_PL_bufend,V_pos_1,D,E,B):1
     [E>=V_pos_1+1,V_pos_1+1>=V_PL_bufend,V_7>=1,E=C+1,E=V_s+1,D=0] 
* CE 58: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(C,V_PL_bufend,V_pos_1,D,E,B):2
     [V_pos_1>=E,V_pos_1+1>=V_PL_bufend,V_7>=1,E=C+1,E=V_s+1,D=0] 
* CE 59: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(C,V_PL_bufend,V_pos_1,D,E,B):3
     [V_PL_bufend>=V_pos_1+2,V_7>=1,E=C+1,E=V_s+1,D=0] 
* CE 60: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(C,V_PL_bufend,V_pos_1,D,E,B):4
     [E>=V_pos_1,V_pos_1+1>=V_PL_bufend,V_7>=1,0>=D+1,E=C+1,E=V_s+1] 
* CE 61: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(C,V_PL_bufend,V_pos_1,D,E,B):5
     [V_pos_1>=E+1,V_pos_1+1>=V_PL_bufend,V_7>=1,0>=D+1,E=C+1,E=V_s+1] 
* CE 62: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(C,V_PL_bufend,V_pos_1,D,E,B):6
     [V_PL_bufend>=V_pos_1+2,V_7>=1,0>=D+1,E=C+1,E=V_s+1] 
* CE 63: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(C,V_PL_bufend,V_pos_1,D,E,B):7
     [E>=V_pos_1,V_pos_1+1>=V_PL_bufend,D>=1,V_7>=1,E=C+1,E=V_s+1] 
* CE 64: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(C,V_PL_bufend,V_pos_1,D,E,B):8
     [V_pos_1>=E+1,V_pos_1+1>=V_PL_bufend,D>=1,V_7>=1,E=C+1,E=V_s+1] 
* CE 65: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(C,V_PL_bufend,V_pos_1,D,E,B):9
     [V_PL_bufend>=V_pos_1+2,D>=1,V_7>=1,E=C+1,E=V_s+1] 
* CE 66: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(C,V_PL_bufend,V_pos_1,D,E,B):1
     [E>=V_pos_1+1,V_pos_1+1>=V_PL_bufend,0>=V_7+1,E=C+1,E=V_s+1,D=0] 
* CE 67: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(C,V_PL_bufend,V_pos_1,D,E,B):2
     [V_pos_1>=E,V_pos_1+1>=V_PL_bufend,0>=V_7+1,E=C+1,E=V_s+1,D=0] 
* CE 68: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(C,V_PL_bufend,V_pos_1,D,E,B):3
     [V_PL_bufend>=V_pos_1+2,0>=V_7+1,E=C+1,E=V_s+1,D=0] 
* CE 69: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(C,V_PL_bufend,V_pos_1,D,E,B):4
     [E>=V_pos_1,V_pos_1+1>=V_PL_bufend,0>=D+1,0>=V_7+1,E=C+1,E=V_s+1] 
* CE 70: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(C,V_PL_bufend,V_pos_1,D,E,B):5
     [V_pos_1>=E+1,V_pos_1+1>=V_PL_bufend,0>=D+1,0>=V_7+1,E=C+1,E=V_s+1] 
* CE 71: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(C,V_PL_bufend,V_pos_1,D,E,B):6
     [V_PL_bufend>=V_pos_1+2,0>=D+1,0>=V_7+1,E=C+1,E=V_s+1] 
* CE 72: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(C,V_PL_bufend,V_pos_1,D,E,B):7
     [E>=V_pos_1,V_pos_1+1>=V_PL_bufend,D>=1,0>=V_7+1,E=C+1,E=V_s+1] 
* CE 73: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(C,V_PL_bufend,V_pos_1,D,E,B):8
     [V_pos_1>=E+1,V_pos_1+1>=V_PL_bufend,D>=1,0>=V_7+1,E=C+1,E=V_s+1] 
* CE 74: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0+ eval_Perl_scan_vstring_19(C,V_PL_bufend,V_pos_1,D,E,B):9
     [V_PL_bufend>=V_pos_1+2,D>=1,0>=V_7+1,E=C+1,E=V_s+1] 
* CE 75: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) = 0
     [V_7=0] 

### Cost equations --> "Loop" of eval_Perl_scan_vstring_15/5 
* CEs [59,62,65] --> Loop 48 
* CEs [57,60,63] --> Loop 49 
* CEs [58,61,64] --> Loop 50 
* CEs [68,71,74] --> Loop 51 
* CEs [66,69,72] --> Loop 52 
* CEs [67,70,73] --> Loop 53 
* CEs [75] --> Loop 54 

#### Loops of eval_Perl_scan_vstring_15/5 
* Loop 48: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) [V_PL_bufend>=V_pos_1+2,V_7>=1] 
* Loop 49: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) [V_s+1>=V_pos_1,V_pos_1+1>=V_PL_bufend,V_7>=1] 
* Loop 50: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) [V_pos_1+1>=V_PL_bufend,V_pos_1>=V_s+1,V_7>=1] 
* Loop 51: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) [V_PL_bufend>=V_pos_1+2,0>=V_7+1] 
* Loop 52: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) [V_s+1>=V_pos_1,V_pos_1+1>=V_PL_bufend,0>=V_7+1] 
* Loop 53: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) [V_pos_1+1>=V_PL_bufend,V_pos_1>=V_s+1,0>=V_7+1] 
* Loop 54: eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) [V_7=0] 

### Ranking functions of CR eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) 

#### Partial ranking functions of CR eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) 


### Resulting Chains:eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B) 
* [54]
* [53]
* [52]
* [51]
* [50]
* [49]
* [48]


### Merging Chains  eval_Perl_scan_vstring_15/5 into  External patterns of execution 
* [[54]] --> 1 
* [[53]] --> 2 
* [[52]] --> 3 
* [[51]] --> 4 
* [[50]] --> 5 
* [[49]] --> 6 
* [[48]] --> 7 


### Specialization of cost equations eval_Perl_scan_vstring_7/5 
* CE 4 is refined into CE [76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95] 
* CE 3 is refined into CE [96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115] 
* CE 5 is refined into CE [116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135] 


#### Refined cost equations eval_Perl_scan_vstring_7/5 
* CE 76: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,C,D,V_s,V_PL_bufend,V_PL_bufend):1+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_PL_bufend,E,B):1
     [V_PL_bufend>=V_s+2,V_0>=1,V_s+1=C,V_s+1=V_2,E=0,D=4] 
* CE 77: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,C,D,V_s,V_PL_bufend,V_PL_bufend):1+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_PL_bufend,E,B):2
     [V_PL_bufend>=V_s+2,V_0>=1,0>=E+1,V_s+1=C,V_s+1=V_2,D=4] 
* CE 78: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,C,D,V_s,V_PL_bufend,V_PL_bufend):1+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_PL_bufend,E,B):5
     [V_PL_bufend>=V_s+2,E>=1,V_0>=1,V_s+1=C,V_s+1=V_2,D=4] 
* CE 79: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,C,D,V_s,V_PL_bufend,E):2+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,F,G,B):1
     [V_s+1>=V_PL_bufend,V_0>=1,V_s+1=F,V_s+1=E,V_s+1=C,V_s+1=V_2,G=0,D=4] 
* CE 80: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,C,D,V_s,V_PL_bufend,E):2+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,F,G,B):2
     [V_s+1>=V_PL_bufend,V_0>=1,0>=G+1,V_s+1=F,V_s+1=E,V_s+1=C,V_s+1=V_2,D=4] 
* CE 81: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(C,V_PL_bufend,V_2,D,E,V_PL_bufend,V_2):2+ eval_Perl_scan_vstring_15(F,V_PL_bufend,V_2,G,B):3
     [V_2>=V_PL_bufend,V_0>=1,0>=G+1,V_2=F+1,V_2=E+1,V_2=C+1,V_2=V_s+1,D=4] 
* CE 82: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,C,D,V_s,V_PL_bufend,E):2+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,F,G,B):5
     [V_s+1>=V_PL_bufend,G>=1,V_0>=1,V_s+1=F,V_s+1=E,V_s+1=C,V_s+1=V_2,D=4] 
* CE 83: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(C,V_PL_bufend,V_2,D,E,V_PL_bufend,V_2):2+ eval_Perl_scan_vstring_15(F,V_PL_bufend,V_2,G,B):6
     [V_2>=V_PL_bufend,G>=1,V_0>=1,V_2=F+1,V_2=E+1,V_2=C+1,V_2=V_s+1,D=4] 
* CE 84: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,C,D,V_s,V_PL_bufend,E):3+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,F,G,B):1
     [V_PL_bufend>=V_s+2,V_0>=1,V_s+1=F,V_s+1=E,V_s+1=C,V_s+1=V_2,G=0,D=4] 
* CE 85: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,C,D,E,V_s,F,G):3+ eval_Perl_scan_vstring_15(V_s,H,I,J,B):2
     [V_0>=1,0>=J+1,V_s+1=I,V_s+2=H,V_s+1=G,V_s+2=F,V_s+1=D,V_s+2=C,V_s+1=V_2,V_s+2=V_PL_bufend,E=4] 
* CE 86: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(C,V_PL_bufend,D,E,F,V_PL_bufend,G):3+ eval_Perl_scan_vstring_15(H,V_PL_bufend,I,J,B):3
     [V_0>=1,0>=J+1,V_PL_bufend=I+1,V_PL_bufend=H+2,V_PL_bufend=G+1,V_PL_bufend=F+2,V_PL_bufend=D+1,V_PL_bufend=C+2,V_PL_bufend=V_2+1,V_PL_bufend=V_s+2,E=4] 
* CE 87: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(C,V_PL_bufend,V_2,D,E,V_PL_bufend,V_2):3+ eval_Perl_scan_vstring_15(F,V_PL_bufend,V_2,G,B):4
     [V_PL_bufend>=V_2+2,V_0>=1,0>=G+1,V_2=F+1,V_2=E+1,V_2=C+1,V_2=V_s+1,D=4] 
* CE 88: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,C,D,E,V_s,F,G):3+ eval_Perl_scan_vstring_15(V_s,H,I,J,B):5
     [J>=1,V_0>=1,V_s+1=I,V_s+2=H,V_s+1=G,V_s+2=F,V_s+1=D,V_s+2=C,V_s+1=V_2,V_s+2=V_PL_bufend,E=4] 
* CE 89: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(C,V_PL_bufend,D,E,F,V_PL_bufend,G):3+ eval_Perl_scan_vstring_15(H,V_PL_bufend,I,J,B):6
     [J>=1,V_0>=1,V_PL_bufend=I+1,V_PL_bufend=H+2,V_PL_bufend=G+1,V_PL_bufend=F+2,V_PL_bufend=D+1,V_PL_bufend=C+2,V_PL_bufend=V_2+1,V_PL_bufend=V_s+2,E=4] 
* CE 90: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(C,V_PL_bufend,V_2,D,E,V_PL_bufend,V_2):3+ eval_Perl_scan_vstring_15(F,V_PL_bufend,V_2,G,B):7
     [V_PL_bufend>=V_2+2,G>=1,V_0>=1,V_2=F+1,V_2=E+1,V_2=C+1,V_2=V_s+1,D=4] 
* CE 91: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,C,D,V_s,V_PL_bufend,E):4+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,E,F,B):1
     [V_PL_bufend>=E+1,E>=V_s+2,V_0>=1,V_s+1=C,V_s+1=V_2,F=0,D=4] 
* CE 92: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,C,D,E,V_s,F,G):4+ eval_Perl_scan_vstring_15(V_s,H,G,I,B):2
     [G>=V_s+2,V_0>=1,0>=I+1,G+1=H,G+1=F,V_s+1=D,G+1=C,V_s+1=V_2,G+1=V_PL_bufend,E=4] 
* CE 93: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,C,D,V_s,V_PL_bufend,E):4+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,E,F,B):4
     [V_PL_bufend>=E+2,E>=V_s+2,V_0>=1,0>=F+1,V_s+1=C,V_s+1=V_2,D=4] 
* CE 94: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,C,D,E,V_s,F,G):4+ eval_Perl_scan_vstring_15(V_s,H,G,I,B):5
     [G>=V_s+2,I>=1,V_0>=1,G+1=H,G+1=F,V_s+1=D,G+1=C,V_s+1=V_2,G+1=V_PL_bufend,E=4] 
* CE 95: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,C,D,V_s,V_PL_bufend,E):4+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,E,F,B):7
     [V_PL_bufend>=E+2,E>=V_s+2,F>=1,V_0>=1,V_s+1=C,V_s+1=V_2,D=4] 
* CE 96: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,C,D,V_s,V_PL_bufend,V_PL_bufend):1+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_PL_bufend,E,B):1
     [V_PL_bufend>=V_s+2,0>=V_0+1,V_s+1=C,V_s+1=V_2,E=0,D=4] 
* CE 97: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,C,D,V_s,V_PL_bufend,V_PL_bufend):1+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_PL_bufend,E,B):2
     [V_PL_bufend>=V_s+2,0>=E+1,0>=V_0+1,V_s+1=C,V_s+1=V_2,D=4] 
* CE 98: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,C,D,V_s,V_PL_bufend,V_PL_bufend):1+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_PL_bufend,E,B):5
     [V_PL_bufend>=V_s+2,E>=1,0>=V_0+1,V_s+1=C,V_s+1=V_2,D=4] 
* CE 99: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,C,D,V_s,V_PL_bufend,E):2+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,F,G,B):1
     [V_s+1>=V_PL_bufend,0>=V_0+1,V_s+1=F,V_s+1=E,V_s+1=C,V_s+1=V_2,G=0,D=4] 
* CE 100: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,C,D,V_s,V_PL_bufend,E):2+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,F,G,B):2
     [V_s+1>=V_PL_bufend,0>=G+1,0>=V_0+1,V_s+1=F,V_s+1=E,V_s+1=C,V_s+1=V_2,D=4] 
* CE 101: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(C,V_PL_bufend,V_2,D,E,V_PL_bufend,V_2):2+ eval_Perl_scan_vstring_15(F,V_PL_bufend,V_2,G,B):3
     [V_2>=V_PL_bufend,0>=G+1,0>=V_0+1,V_2=F+1,V_2=E+1,V_2=C+1,V_2=V_s+1,D=4] 
* CE 102: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,C,D,V_s,V_PL_bufend,E):2+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,F,G,B):5
     [V_s+1>=V_PL_bufend,G>=1,0>=V_0+1,V_s+1=F,V_s+1=E,V_s+1=C,V_s+1=V_2,D=4] 
* CE 103: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(C,V_PL_bufend,V_2,D,E,V_PL_bufend,V_2):2+ eval_Perl_scan_vstring_15(F,V_PL_bufend,V_2,G,B):6
     [V_2>=V_PL_bufend,G>=1,0>=V_0+1,V_2=F+1,V_2=E+1,V_2=C+1,V_2=V_s+1,D=4] 
* CE 104: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,C,D,V_s,V_PL_bufend,E):3+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,F,G,B):1
     [V_PL_bufend>=V_s+2,0>=V_0+1,V_s+1=F,V_s+1=E,V_s+1=C,V_s+1=V_2,G=0,D=4] 
* CE 105: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,C,D,E,V_s,F,G):3+ eval_Perl_scan_vstring_15(V_s,H,I,J,B):2
     [0>=J+1,0>=V_0+1,V_s+1=I,V_s+2=H,V_s+1=G,V_s+2=F,V_s+1=D,V_s+2=C,V_s+1=V_2,V_s+2=V_PL_bufend,E=4] 
* CE 106: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(C,V_PL_bufend,D,E,F,V_PL_bufend,G):3+ eval_Perl_scan_vstring_15(H,V_PL_bufend,I,J,B):3
     [0>=J+1,0>=V_0+1,V_PL_bufend=I+1,V_PL_bufend=H+2,V_PL_bufend=G+1,V_PL_bufend=F+2,V_PL_bufend=D+1,V_PL_bufend=C+2,V_PL_bufend=V_2+1,V_PL_bufend=V_s+2,E=4] 
* CE 107: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(C,V_PL_bufend,V_2,D,E,V_PL_bufend,V_2):3+ eval_Perl_scan_vstring_15(F,V_PL_bufend,V_2,G,B):4
     [V_PL_bufend>=V_2+2,0>=G+1,0>=V_0+1,V_2=F+1,V_2=E+1,V_2=C+1,V_2=V_s+1,D=4] 
* CE 108: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,C,D,E,V_s,F,G):3+ eval_Perl_scan_vstring_15(V_s,H,I,J,B):5
     [J>=1,0>=V_0+1,V_s+1=I,V_s+2=H,V_s+1=G,V_s+2=F,V_s+1=D,V_s+2=C,V_s+1=V_2,V_s+2=V_PL_bufend,E=4] 
* CE 109: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(C,V_PL_bufend,D,E,F,V_PL_bufend,G):3+ eval_Perl_scan_vstring_15(H,V_PL_bufend,I,J,B):6
     [J>=1,0>=V_0+1,V_PL_bufend=I+1,V_PL_bufend=H+2,V_PL_bufend=G+1,V_PL_bufend=F+2,V_PL_bufend=D+1,V_PL_bufend=C+2,V_PL_bufend=V_2+1,V_PL_bufend=V_s+2,E=4] 
* CE 110: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(C,V_PL_bufend,V_2,D,E,V_PL_bufend,V_2):3+ eval_Perl_scan_vstring_15(F,V_PL_bufend,V_2,G,B):7
     [V_PL_bufend>=V_2+2,G>=1,0>=V_0+1,V_2=F+1,V_2=E+1,V_2=C+1,V_2=V_s+1,D=4] 
* CE 111: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,C,D,V_s,V_PL_bufend,E):4+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,E,F,B):1
     [V_PL_bufend>=E+1,E>=V_s+2,0>=V_0+1,V_s+1=C,V_s+1=V_2,F=0,D=4] 
* CE 112: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,C,D,E,V_s,F,G):4+ eval_Perl_scan_vstring_15(V_s,H,G,I,B):2
     [G>=V_s+2,0>=I+1,0>=V_0+1,G+1=H,G+1=F,V_s+1=D,G+1=C,V_s+1=V_2,G+1=V_PL_bufend,E=4] 
* CE 113: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,C,D,V_s,V_PL_bufend,E):4+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,E,F,B):4
     [V_PL_bufend>=E+2,E>=V_s+2,0>=F+1,0>=V_0+1,V_s+1=C,V_s+1=V_2,D=4] 
* CE 114: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,C,D,E,V_s,F,G):4+ eval_Perl_scan_vstring_15(V_s,H,G,I,B):5
     [G>=V_s+2,I>=1,0>=V_0+1,G+1=H,G+1=F,V_s+1=D,G+1=C,V_s+1=V_2,G+1=V_PL_bufend,E=4] 
* CE 115: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,C,D,V_s,V_PL_bufend,E):4+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,E,F,B):7
     [V_PL_bufend>=E+2,E>=V_s+2,F>=1,0>=V_0+1,V_s+1=C,V_s+1=V_2,D=4] 
* CE 116: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V_s,C,V_s,V_PL_bufend,V_PL_bufend):1+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_PL_bufend,D,B):1
     [V_PL_bufend>=V_s+1,V_s+1=V_2,D=0,C=4,V_0=0] 
* CE 117: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V_s,C,V_s,V_PL_bufend,V_PL_bufend):1+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_PL_bufend,D,B):2
     [V_PL_bufend>=V_s+1,0>=D+1,V_s+1=V_2,C=4,V_0=0] 
* CE 118: eval_Perl_scan_vstring_7(A,B,C,B,D) = 1+ eval_Perl_scan_vstring_bb1_in(E,B,F,G,H,B,B):1+ eval_Perl_scan_vstring_15(I,B,B,J,D):3
     [0>=J+1,B=I+1,B=H+1,B=F+1,B=E+1,B=A+1,G=4,C=0] 
* CE 119: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V_s,C,V_s,V_PL_bufend,V_PL_bufend):1+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_PL_bufend,D,B):5
     [V_PL_bufend>=V_s+1,D>=1,V_s+1=V_2,C=4,V_0=0] 
* CE 120: eval_Perl_scan_vstring_7(A,B,C,B,D) = 1+ eval_Perl_scan_vstring_bb1_in(E,B,F,G,H,B,B):1+ eval_Perl_scan_vstring_15(I,B,B,J,D):6
     [J>=1,B=I+1,B=H+1,B=F+1,B=E+1,B=A+1,G=4,C=0] 
* CE 121: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V_s,C,V_s,V_PL_bufend,V_s):2+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_s,D,B):1
     [V_s>=V_PL_bufend,V_s+1=V_2,D=0,C=4,V_0=0] 
* CE 122: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V_s,C,V_s,V_PL_bufend,V_s):2+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_s,D,B):3
     [V_s>=V_PL_bufend,0>=D+1,V_s+1=V_2,C=4,V_0=0] 
* CE 123: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V_s,C,V_s,V_PL_bufend,V_s):2+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_s,D,B):6
     [V_s>=V_PL_bufend,D>=1,V_s+1=V_2,C=4,V_0=0] 
* CE 124: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V_s,C,V_s,V_PL_bufend,V_s):3+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_s,D,B):1
     [V_PL_bufend>=V_s+1,V_s+1=V_2,D=0,C=4,V_0=0] 
* CE 125: eval_Perl_scan_vstring_7(A,B,C,B,D) = 1+ eval_Perl_scan_vstring_bb1_in(E,B,F,G,H,B,I):3+ eval_Perl_scan_vstring_15(J,B,K,L,D):3
     [0>=L+1,B=K+1,B=J+1,B=I+1,B=H+1,B=F+1,B=E+1,B=A+1,G=4,C=0] 
* CE 126: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V_s,C,V_s,V_PL_bufend,V_s):3+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_s,D,B):4
     [V_PL_bufend>=V_s+2,0>=D+1,V_s+1=V_2,C=4,V_0=0] 
* CE 127: eval_Perl_scan_vstring_7(A,B,C,B,D) = 1+ eval_Perl_scan_vstring_bb1_in(E,B,F,G,H,B,I):3+ eval_Perl_scan_vstring_15(J,B,K,L,D):6
     [L>=1,B=K+1,B=J+1,B=I+1,B=H+1,B=F+1,B=E+1,B=A+1,G=4,C=0] 
* CE 128: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V_s,C,V_s,V_PL_bufend,V_s):3+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_s,D,B):7
     [V_PL_bufend>=V_s+2,D>=1,V_s+1=V_2,C=4,V_0=0] 
* CE 129: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V_s,C,V_s,V_PL_bufend,D):4+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,D,E,B):1
     [V_PL_bufend>=D+1,D>=V_s+1,V_s+1=V_2,E=0,C=4,V_0=0] 
* CE 130: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,C,V_s,D,V_s,E,F):4+ eval_Perl_scan_vstring_15(V_s,G,F,H,B):2
     [F>=V_s+1,0>=H+1,F+1=G,F+1=E,F+1=C,V_s+1=V_2,F+1=V_PL_bufend,D=4,V_0=0] 
* CE 131: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(C,V_PL_bufend,D,E,F,V_PL_bufend,G):4+ eval_Perl_scan_vstring_15(H,V_PL_bufend,I,J,B):3
     [0>=J+1,V_PL_bufend=I+1,V_PL_bufend=H+2,V_PL_bufend=G+1,V_PL_bufend=F+2,V_PL_bufend=D+2,V_PL_bufend=C+2,V_PL_bufend=V_2+1,V_PL_bufend=V_s+2,E=4,V_0=0] 
* CE 132: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V_s,C,V_s,V_PL_bufend,D):4+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,D,E,B):4
     [V_PL_bufend>=D+2,D>=V_s+1,0>=E+1,V_s+1=V_2,C=4,V_0=0] 
* CE 133: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,C,V_s,D,V_s,E,F):4+ eval_Perl_scan_vstring_15(V_s,G,F,H,B):5
     [F>=V_s+1,H>=1,F+1=G,F+1=E,F+1=C,V_s+1=V_2,F+1=V_PL_bufend,D=4,V_0=0] 
* CE 134: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(C,V_PL_bufend,D,E,F,V_PL_bufend,G):4+ eval_Perl_scan_vstring_15(H,V_PL_bufend,I,J,B):6
     [J>=1,V_PL_bufend=I+1,V_PL_bufend=H+2,V_PL_bufend=G+1,V_PL_bufend=F+2,V_PL_bufend=D+2,V_PL_bufend=C+2,V_PL_bufend=V_2+1,V_PL_bufend=V_s+2,E=4,V_0=0] 
* CE 135: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) = 1+ eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V_s,C,V_s,V_PL_bufend,D):4+ eval_Perl_scan_vstring_15(V_s,V_PL_bufend,D,E,B):7
     [V_PL_bufend>=D+2,D>=V_s+1,E>=1,V_s+1=V_2,C=4,V_0=0] 

### Cost equations --> "Loop" of eval_Perl_scan_vstring_7/5 
* CEs [79,80,81,82,83] --> Loop 55 
* CEs [99,100,101,102,103] --> Loop 56 
* CEs [76,77,78,84,85,86,87,88,89,90,91,92,93,94,95] --> Loop 57 
* CEs [96,97,98,104,105,106,107,108,109,110,111,112,113,114,115] --> Loop 58 
* CEs [121,122,123] --> Loop 59 
* CEs [131,134] --> Loop 60 
* CEs [116,117,118,119,120,124,125,126,127,128,129,130,132,133,135] --> Loop 61 

#### Loops of eval_Perl_scan_vstring_7/5 
* Loop 55: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) [V_s+1>=V_PL_bufend,V_0>=1,V_s+1=V_2] 
* Loop 56: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) [V_s+1>=V_PL_bufend,0>=V_0+1,V_s+1=V_2] 
* Loop 57: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) [V_PL_bufend>=V_s+2,V_0>=1,V_s+1=V_2] 
* Loop 58: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) [V_PL_bufend>=V_s+2,0>=V_0+1,V_s+1=V_2] 
* Loop 59: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) [V_s>=V_PL_bufend,V_s+1=V_2,V_0=0] 
* Loop 60: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) [V_s+1=V_2,V_s+2=V_PL_bufend,V_0=0] 
* Loop 61: eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) [V_PL_bufend>=V_s+1,V_s+1=V_2,V_0=0] 

### Ranking functions of CR eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) 

#### Partial ranking functions of CR eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) 


### Resulting Chains:eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B) 
* [61]
* [60]
* [59]
* [58]
* [57]
* [56]
* [55]


### Merging Chains  eval_Perl_scan_vstring_7/5 into  External patterns of execution 
* [[59]] --> 1 
* [[60],[61]] --> 2 
* [[56]] --> 3 
* [[58]] --> 4 
* [[55]] --> 5 
* [[57]] --> 6 


### Specialization of cost equations eval_Perl_scan_vstring_start/3 
* CE 2 is refined into CE [136,137,138,139,140,141] 


#### Refined cost equations eval_Perl_scan_vstring_start/3 
* CE 136: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) = 0+ eval_Perl_scan_vstring_7(C,V_PL_bufend,D,E,B):1
     [E>=V_PL_bufend+1,E=C+1,E=V_s+1,D=0] 
* CE 137: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) = 0+ eval_Perl_scan_vstring_7(C,V_PL_bufend,D,E,B):2
     [V_PL_bufend>=E,E=C+1,E=V_s+1,D=0] 
* CE 138: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) = 0+ eval_Perl_scan_vstring_7(C,V_PL_bufend,D,E,B):3
     [E>=V_PL_bufend,0>=D+1,E=C+1,E=V_s+1] 
* CE 139: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) = 0+ eval_Perl_scan_vstring_7(C,V_PL_bufend,D,E,B):4
     [V_PL_bufend>=E+1,0>=D+1,E=C+1,E=V_s+1] 
* CE 140: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) = 0+ eval_Perl_scan_vstring_7(C,V_PL_bufend,D,E,B):5
     [E>=V_PL_bufend,D>=1,E=C+1,E=V_s+1] 
* CE 141: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) = 0+ eval_Perl_scan_vstring_7(C,V_PL_bufend,D,E,B):6
     [V_PL_bufend>=E+1,D>=1,E=C+1,E=V_s+1] 

### Cost equations --> "Loop" of eval_Perl_scan_vstring_start/3 
* CEs [136,138,140] --> Loop 62 
* CEs [137,139,141] --> Loop 63 

#### Loops of eval_Perl_scan_vstring_start/3 
* Loop 62: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) [V_s+1>=V_PL_bufend] 
* Loop 63: eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) [V_PL_bufend>=V_s+1] 

### Ranking functions of CR eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) 

#### Partial ranking functions of CR eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) 


### Resulting Chains:eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B) 
* [63]
* [62]


### Merging Chains  eval_Perl_scan_vstring_start/3 into  External patterns of execution 
* [[63]] --> 1 
* [[62]] --> 2 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 25 

#### Computing cost of phase [21] 

#### Simplifying cost structure of CE 26 

#### Cost of loops [21] 

 * loop 21:eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V_pos_1,B,C,D,E) -> [eval_Perl_scan_vstring_bb1_in(V_s',V_PL_bufend',V_pos_1',B',C',D',E')] 
1
##### Pending set eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V_pos_1,B,C,D,E)
* Psum in Loop 21: [it(21)=<1]

###### Computing sum for it(21)=<1  in Loop 21 
   - Applying inductive sum strategy 
     - head Candidate: V_PL_bufend-V_pos_1 
     - head Candidate: V_PL_bufend-V_pos_1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_PL_bufend-V_pos_1 
     - tail Candidate: V_PL_bufend-V_pos_1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(21)=<V_PL_bufend-V_pos_1,it(21)=<V_PL_bufend-V_pos_1,it(21)=<V_PL_bufend-V_pos_1-V_PL_bufend'+V_pos_1',it(21)=<V_PL_bufend-V_pos_1-V_PL_bufend'+V_pos_1'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [21] 

#### Simplifying cost structure of phase [21] 

#### Cost of phase [21]:eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V_pos_1,B,C,D,E) -> [eval_Perl_scan_vstring_bb1_in(V_s',V_PL_bufend',V_pos_1',B',C',D',E')] 
1*it(21)+0
  Such that:it(21) =< V_PL_bufend-V_pos_1
it(21) =< V_PL_bufend-V_pos_1-V_PL_bufend'+V_pos_1'

#### Simplifying cost structure of chain [[21],23] 

#### Simplifying cost structure of CE 24 

#### Found solution for phase  [21] in the cache 

#### Cost of phase [21]:eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V_pos_1,B,C,D,E) -> [eval_Perl_scan_vstring_bb1_in(V_s',V_PL_bufend',V_pos_1',B',C',D',E')] 
1*it(21)+0
  Such that:it(21) =< V_PL_bufend-V_pos_1
it(21) =< V_PL_bufend-V_pos_1-V_PL_bufend'+V_pos_1'

#### Simplifying cost structure of chain [[21],22] 

#### Cost of chains of eval_Perl_scan_vstring_bb1_in(V_s,V_PL_bufend,V_pos_1,B,C,D,E):
* Chain [[21],23]: 1*it(21)+0
  Such that:it(21) =< -V_pos_1+D

  with precondition: [B=4,V_s=C,V_PL_bufend=D,V_PL_bufend=E,V_pos_1>=V_s,V_PL_bufend>=V_pos_1+1] 

* Chain [[21],22]: 1*it(21)+0
  Such that:it(21) =< -V_pos_1+E

  with precondition: [B=4,V_s=C,V_PL_bufend=D,V_pos_1>=V_s,E>=V_pos_1+1,V_PL_bufend>=E+1] 

* Chain [23]: 0
  with precondition: [B=4,V_s=C,V_PL_bufend=D,V_pos_1=E,V_pos_1>=V_s,V_pos_1>=V_PL_bufend] 

* Chain [22]: 0
  with precondition: [B=4,V_s=C,V_PL_bufend=D,V_pos_1=E,V_pos_1>=V_s,V_PL_bufend>=V_pos_1+1] 


#### Simplifying cost structure of CE 27 

#### Computing cost of phase [24] 

#### Simplifying cost structure of CE 28 

#### Cost of loops [24] 

 * loop 24:eval_Perl_scan_vstring_bb5_in(V_PL_bufend,V_pos_2,V__1,V_end_0,B,C,D,E,F) -> [eval_Perl_scan_vstring_bb5_in(V_PL_bufend',V_pos_2',V__1',V_end_0',B',C',D',E',F')] 
1
##### Pending set eval_Perl_scan_vstring_bb5_in(V_PL_bufend,V_pos_2,V__1,V_end_0,B,C,D,E,F)
* Psum in Loop 24: [it(24)=<1]

###### Computing sum for it(24)=<1  in Loop 24 
   - Applying inductive sum strategy 
     - head Candidate: -V__1+V_end_0 
     - head Candidate: -V__1+V_end_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -V__1+V_end_0 
     - tail Candidate: -V__1+V_end_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(24)=< -V__1+V_end_0,it(24)=< -V__1+V_end_0,it(24)=< -V__1+V_end_0+V__1'-V_end_0',it(24)=< -V__1+V_end_0+V__1'-V_end_0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [24] 

#### Simplifying cost structure of phase [24] 

#### Cost of phase [24]:eval_Perl_scan_vstring_bb5_in(V_PL_bufend,V_pos_2,V__1,V_end_0,B,C,D,E,F) -> [eval_Perl_scan_vstring_bb5_in(V_PL_bufend',V_pos_2',V__1',V_end_0',B',C',D',E',F')] 
1*it(24)+0
  Such that:it(24) =< -V__1+V_end_0
it(24) =< -V__1+V_end_0+V__1'-V_end_0'

#### Simplifying cost structure of chain [[24],25] 

#### Cost of chains of eval_Perl_scan_vstring_bb5_in(V_PL_bufend,V_pos_2,V__1,V_end_0,B,C,D,E,F):
* Chain [[24],25]: 1*it(24)+0
  Such that:it(24) =< V_end_0-E

  with precondition: [B=2,V_PL_bufend=C,V_pos_2=D,V__1=E,V__1=F,V_end_0>=V__1+1,V_pos_2>=V_end_0] 

* Chain [25]: 0
  with precondition: [B=2,C=V_PL_bufend,V_pos_2=D,V__1=E,V_end_0=F,V_pos_2>=V_end_0,V__1>=V_end_0] 


#### Simplifying cost structure of CE 30 

#### Computing cost of phase [26] 

#### Simplifying cost structure of CE 31 

#### Cost of loops [26] 

 * loop 26:eval_Perl_scan_vstring_bb9_in(V_PL_bufend,V_pos_2,V__1,V_end_0,V_16,V_18,V_pos_3,B,C,D,E) -> [eval_Perl_scan_vstring_bb9_in(V_PL_bufend',V_pos_2',V__1',V_end_0',V_16',V_18',V_pos_3',B',C',D',E')] 
1
##### Pending set eval_Perl_scan_vstring_bb9_in(V_PL_bufend,V_pos_2,V__1,V_end_0,V_16,V_18,V_pos_3,B,C,D,E)
* Psum in Loop 26: [it(26)=<1]

###### Computing sum for it(26)=<1  in Loop 26 
   - Applying inductive sum strategy 
     - head Candidate: V_PL_bufend-V_pos_3 
     - head Candidate: V_PL_bufend-V_pos_3 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_PL_bufend-V_pos_3 
     - tail Candidate: V_PL_bufend-V_pos_3 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(26)=<V_PL_bufend-V_pos_3,it(26)=<V_PL_bufend-V_pos_3,it(26)=<V_PL_bufend-V_pos_3-V_PL_bufend'+V_pos_3',it(26)=<V_PL_bufend-V_pos_3-V_PL_bufend'+V_pos_3'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [26] 

#### Simplifying cost structure of phase [26] 

#### Cost of phase [26]:eval_Perl_scan_vstring_bb9_in(V_PL_bufend,V_pos_2,V__1,V_end_0,V_16,V_18,V_pos_3,B,C,D,E) -> [eval_Perl_scan_vstring_bb9_in(V_PL_bufend',V_pos_2',V__1',V_end_0',V_16',V_18',V_pos_3',B',C',D',E')] 
1*it(26)+0
  Such that:it(26) =< V_PL_bufend-V_pos_3
it(26) =< V_PL_bufend-V_pos_3-V_PL_bufend'+V_pos_3'

#### Simplifying cost structure of chain [[26],28] 

#### Simplifying cost structure of CE 29 

#### Found solution for phase  [26] in the cache 

#### Cost of phase [26]:eval_Perl_scan_vstring_bb9_in(V_PL_bufend,V_pos_2,V__1,V_end_0,V_16,V_18,V_pos_3,B,C,D,E) -> [eval_Perl_scan_vstring_bb9_in(V_PL_bufend',V_pos_2',V__1',V_end_0',V_16',V_18',V_pos_3',B',C',D',E')] 
1*it(26)+0
  Such that:it(26) =< V_PL_bufend-V_pos_3
it(26) =< V_PL_bufend-V_pos_3-V_PL_bufend'+V_pos_3'

#### Simplifying cost structure of chain [[26],27] 

#### Cost of chains of eval_Perl_scan_vstring_bb9_in(V_PL_bufend,V_pos_2,V__1,V_end_0,V_16,V_18,V_pos_3,B,C,D,E):
* Chain [[26],28]: 1*it(26)+0
  Such that:it(26) =< V_PL_bufend-V_pos_3

  with precondition: [B=3,V_pos_2+1=V_18,V_PL_bufend=C,V_PL_bufend=D,V_pos_2+1=E,V_pos_3>=V_pos_2+1,V_PL_bufend>=V_pos_3+1] 

* Chain [[26],27]: 1*it(26)+0
  Such that:it(26) =< -V_pos_3+D

  with precondition: [B=3,V_pos_2+1=V_18,V_PL_bufend=C,V_pos_2+1=E,V_pos_3>=V_pos_2+1,D>=V_pos_3+1,V_PL_bufend>=D+1] 

* Chain [27]: 0
  with precondition: [B=3,V_18=V_pos_2+1,V_PL_bufend=C,V_pos_3=D,V_18=E,V_pos_3>=V_18,V_PL_bufend>=V_pos_3+1] 


#### Simplifying cost structure of CE 34 

#### Computing cost of phase [29,30,33,34] 
 * Renamed intermediate variables: 
[ (eq(41,1),it(24))>>s(1)]
 * Renamed intermediate variables: 
[ (eq(41,2),it(26))>>s(2)]

#### Simplifying cost structure of CE 41 
 * Renamed intermediate variables: 
[ (eq(47,1),it(24))>>s(3)]
 * Renamed intermediate variables: 
[ (eq(47,2),it(26))>>s(4)]

#### Simplifying cost structure of CE 47 
 * Joined equivalent variables [s(2),s(4)] into s(2)
 * Joined equivalent variables [s(1),s(3)] into s(1)
 * Renamed intermediate variables: 
[ (it(29),aux(1))>>s(5), (it(29),aux(2))>>s(6), (it(29),s(2))>>s(7), (it(29),s(1))>>s(8)]
 * Renamed intermediate variables: 
[ (eq(38,2),it(26))>>s(9)]

#### Simplifying cost structure of CE 38 
 * Renamed intermediate variables: 
[ (eq(44,2),it(26))>>s(10)]

#### Simplifying cost structure of CE 44 
 * Joined equivalent variables [s(9),s(10)] into s(9)
 * Renamed intermediate variables: 
[ (it(30),aux(3))>>s(11), (it(30),s(9))>>s(12)]

#### Simplifying cost structure of CE 36 

#### Simplifying cost structure of CE 42 
 * Renamed intermediate variables: 
[ (eq(39,1),it(24))>>s(13)]

#### Simplifying cost structure of CE 39 
 * Renamed intermediate variables: 
[ (eq(45,1),it(24))>>s(14)]

#### Simplifying cost structure of CE 45 
 * Joined equivalent variables [s(13),s(14)] into s(13)
 * Renamed intermediate variables: 
[ (it(34),aux(4))>>s(15), (it(34),s(13))>>s(16)]

#### Cost of loops [29,30,33,34] 

 * loop 29:eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) -> [eval_Perl_scan_vstring__critedge2_in(V_PL_bufend',V_pos_2',V__1',B')] 
2*s(8)+2*s(7)+3
  Such that:s(5) =< -V_pos_2+V_pos_2'
s(6) =< V_pos_2-V__1
s(7) =< s(5)
s(8) =< s(6)

 * loop 30:eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) -> [eval_Perl_scan_vstring__critedge2_in(V_PL_bufend',V_pos_2',V__1',B')] 
2*s(12)+3
  Such that:s(11) =< V_pos_2'-V__1'
s(12) =< s(11)

 * loop 33:eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) -> [eval_Perl_scan_vstring__critedge2_in(V_PL_bufend',V_pos_2',V__1',B')] 
3
 * loop 34:eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) -> [eval_Perl_scan_vstring__critedge2_in(V_PL_bufend',V_pos_2',V__1',B')] 
2*s(16)+3
  Such that:s(15) =< -V__1+V_pos_2'
s(16) =< s(15)

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 29: [it(29)=<1,s(20)=< -V_pos_2+V_pos_2',s(19)=<V_pos_2-V__1]
* Psum in Loop 30: [it(30)=<1,s(22)=<V_pos_2'-V__1']
* Psum in Loop 33: [it(33)=<1]
* Psum in Loop 34: [it(34)=<1,s(24)=< -V__1+V_pos_2']

###### Computing sum for it(29)=<1  in Loop 29 
   - Applying inductive sum strategy 
     - head Candidate: V_PL_bufend-V_pos_2-1 
       - Loop 30 is collaborative and bounds [it(30)] 
       - Loop 33 is collaborative and bounds [it(33)] 
       - Loop 34 is collaborative and bounds [it(34)] 
     - head Candidate: V_PL_bufend/2-V_pos_2/2-1 
       - Loop 30 is collaborative and bounds [it(30)] 
       - Loop 33 is collaborative
       - Loop 34 is collaborative
     - head Candidate: V_PL_bufend/2-V__1/2-3/2 
       - Loop 30 has a reset to  [V_PL_bufend/2-V_pos_2/2-2]
       - Loop 33 has a reset to  [V_PL_bufend/2-V_pos_2/2-2]
       - Loop 34 is collaborative and bounds [it(34)] 
     - tail Candidate: V_PL_bufend-V_pos_2-1 
       - Loop 30 is collaborative and bounds [it(30)] 
       - Loop 33 is collaborative and bounds [it(33)] 
       - Loop 34 is collaborative and bounds [it(34)] 
     - tail Candidate: V_PL_bufend/2-V_pos_2/2-1 
       - Loop 30 is collaborative and bounds [it(30)] 
       - Loop 33 is collaborative
       - Loop 34 is collaborative
     - tail Candidate: V_PL_bufend/2-V__1/2-3/2 
       - Loop 30 has undefined behavior 
 * Adding constraints: [it(29)+it(34)=<aux(6)+aux(5)+aux(7),it(29)+it(30)+it(33)+it(34)=<V_PL_bufend-V_pos_2-1,it(29)+it(30)=<V_PL_bufend/2-V_pos_2/2-1,aux(7)=<V_PL_bufend/2-V__1/2-3/2,it(29)+it(30)+it(33)+it(34)=<V_PL_bufend-V_pos_2-V_PL_bufend'+V_pos_2',it(29)+it(30)=<V_PL_bufend/2-V_pos_2/2-V_PL_bufend'/2+V_pos_2'/2] 

##### Pending set eval_Perl_scan_vstring_0(V_s,V_PL_bufend,B)
* Psum in Loop 29: [s(20)=< -V_pos_2+V_pos_2',s(19)=<V_pos_2-V__1]
* Psum in Loop 30: [it(30)=<1,s(22)=<V_pos_2'-V__1',aux(5)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 33: [it(33)=<1,aux(6)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 34: [it(34)=<1,s(24)=< -V__1+V_pos_2']

###### Computing sum for s(20)=< -V_pos_2+V_pos_2'  in Loop 29 
   - Applying inductive sum strategy 
     - head Candidate: V_PL_bufend-V_pos_2-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_PL_bufend-V_pos_2-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(30)+it(33)+it(34)+s(20)=<V_PL_bufend-V_pos_2-1,it(30)+it(33)+it(34)+s(20)=<V_PL_bufend-V_pos_2-V_PL_bufend'+V_pos_2'] 

##### Pending set eval_Perl_scan_vstring_0(V_s,V_PL_bufend,B)
* Psum in Loop 29: [s(19)=<V_pos_2-V__1]
* Psum in Loop 30: [it(30)=<1,s(22)=<V_pos_2'-V__1',aux(5)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 33: [it(33)=<1,aux(6)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 34: [it(34)=<1,s(24)=< -V__1+V_pos_2']

###### Computing sum for s(19)=<V_pos_2-V__1  in Loop 29 
   - Applying inductive sum strategy 
     - head Candidate: V_PL_bufend-V__1-3 
       - Loop 30 has a reset to  [V_PL_bufend-V_pos_2-4]
       - Loop 33 has a reset to  [V_PL_bufend-V_pos_2-4]
       - Loop 34 is collaborative and bounds [it(34)] 
     - tail Candidate: V_PL_bufend-V__1-3 
       - Loop 30 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(11)=<V_pos_2-V__1] 
 * Adding constraints: [s(19)=<it(29)*aux(11),it(34)+s(19)=<aux(9)+aux(8)+aux(10),aux(10)=<V_PL_bufend-V__1-3] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Pmax/min: [aux(11)=<V_pos_2-V__1]
* Psum in Loop 30: [it(30)=<1,s(22)=<V_pos_2'-V__1',aux(8)=<V_PL_bufend-V_pos_2-4,aux(5)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 33: [it(33)=<1,aux(9)=<V_PL_bufend-V_pos_2-4,aux(6)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 34: [s(24)=< -V__1+V_pos_2']

###### Computing max_min for aux(11)=<V_pos_2-V__1  
   - Applying max/min strategy 
     - Loop 29  increases the expression by [V_pos_2'-V__1'-1] 
     - Loop 30  resets the expression to [V_PL_bufend-V_pos_2-2] 
     - Loop 33  resets the expression to [0] 
     - Loop 34 does not increase the expression
 * Adding constraints:[aux(11)=<max([aux(12),aux(14),aux(15)])+aux(13),aux(12)=<V_pos_2-V__1] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Pmax/min: [aux(15)=<0,aux(14)=<V_PL_bufend-V_pos_2-2]
* Psum in Loop 29: [aux(13)=<V_pos_2'-V__1'-1]
* Psum in Loop 30: [it(30)=<1,s(22)=<V_pos_2'-V__1',aux(8)=<V_PL_bufend-V_pos_2-4,aux(5)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 33: [it(33)=<1,aux(9)=<V_PL_bufend-V_pos_2-4,aux(6)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 34: [s(24)=< -V__1+V_pos_2']

###### Computing max_min for aux(15)=<0  
 * Adding constraints:[aux(15)=<0] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Pmax/min: [aux(14)=<V_PL_bufend-V_pos_2-2]
* Psum in Loop 29: [aux(13)=<V_pos_2'-V__1'-1]
* Psum in Loop 30: [it(30)=<1,s(22)=<V_pos_2'-V__1',aux(8)=<V_PL_bufend-V_pos_2-4,aux(5)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 33: [it(33)=<1,aux(9)=<V_PL_bufend-V_pos_2-4,aux(6)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 34: [s(24)=< -V__1+V_pos_2']

###### Computing max_min for aux(14)=<V_PL_bufend-V_pos_2-2  
   - Found a solution using transitive invariants 
 * Adding constraints:[aux(14)=<V_PL_bufend-V_pos_2-2] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 29: [aux(13)=<V_pos_2'-V__1'-1]
* Psum in Loop 30: [it(30)=<1,s(22)=<V_pos_2'-V__1',aux(8)=<V_PL_bufend-V_pos_2-4,aux(5)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 33: [it(33)=<1,aux(9)=<V_PL_bufend-V_pos_2-4,aux(6)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 34: [s(24)=< -V__1+V_pos_2']

###### Computing sum for aux(13)=<V_pos_2'-V__1'-1  in Loop 29 
   - Applying inductive sum strategy 
     - head Candidate: V_PL_bufend-V_pos_2-3 
       - Loop 30 is collaborative and bounds [it(30)] 
       - Loop 33 is collaborative and bounds [it(33)] 
       - Loop 34 is collaborative
     - tail Candidate: V_PL_bufend-V_pos_2-3 
       - Loop 30 is collaborative and bounds [it(30)] 
       - Loop 33 is collaborative and bounds [it(33)] 
       - Loop 34 is collaborative
 * Adding constraints: [aux(13)+it(30)+it(33)=<V_PL_bufend-V_pos_2-3,aux(13)+it(30)+it(33)=<V_PL_bufend-V_pos_2-V_PL_bufend'+V_pos_2'] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 30: [it(30)=<1,s(22)=<V_pos_2'-V__1',aux(8)=<V_PL_bufend-V_pos_2-4,aux(5)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 33: [it(33)=<1,aux(9)=<V_PL_bufend-V_pos_2-4,aux(6)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 34: [s(24)=< -V__1+V_pos_2']

###### Computing sum for it(30)=<1  in Loop 30 
   - Applying inductive sum strategy 
     - head Candidate: V_PL_bufend-V_pos_2-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: -V_pos_2+V__1+1 
       - Loop 29 has a reset to  [0]
       - Loop 33 is collaborative
       - Loop 34 has a reset to  [1]
     - head Candidate: V_PL_bufend/2-V_pos_2/2-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_PL_bufend-V_pos_2-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -V_pos_2+V__1+1 
       - Loop 29 has undefined behavior 
     - tail Candidate: V_PL_bufend/2-V_pos_2/2-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(30)=<aux(17)+aux(16)+aux(18),it(29)+it(30)+it(33)+it(34)=<V_PL_bufend-V_pos_2-1,aux(18)=< -V_pos_2+V__1+1,it(29)+it(30)=<V_PL_bufend/2-V_pos_2/2-1,it(29)+it(30)+it(33)+it(34)=<V_PL_bufend-V_pos_2-V_PL_bufend'+V_pos_2',it(29)+it(30)=<V_PL_bufend/2-V_pos_2/2-V_PL_bufend'/2+V_pos_2'/2] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 29: [aux(16)=<0]
* Psum in Loop 30: [s(22)=<V_pos_2'-V__1',aux(8)=<V_PL_bufend-V_pos_2-4,aux(5)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 33: [it(33)=<1,aux(9)=<V_PL_bufend-V_pos_2-4,aux(6)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 34: [s(24)=< -V__1+V_pos_2',aux(17)=<1]

###### Computing sum for aux(16)=<0  in Loop 29 
 * Adding constraints: [aux(16)=<0] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 30: [s(22)=<V_pos_2'-V__1',aux(8)=<V_PL_bufend-V_pos_2-4,aux(5)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 33: [it(33)=<1,aux(9)=<V_PL_bufend-V_pos_2-4,aux(6)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 34: [s(24)=< -V__1+V_pos_2',aux(17)=<1]

###### Computing sum for s(22)=<V_pos_2'-V__1'  in Loop 30 
   - Applying inductive sum strategy 
     - head Candidate: V_PL_bufend-V_pos_2-2 
       - Loop 29 is collaborative
       - Loop 33 is collaborative and bounds [it(33)] 
       - Loop 34 is collaborative and bounds [aux(17)] 
     - tail Candidate: V_PL_bufend-V_pos_2-2 
       - Loop 29 is collaborative
       - Loop 33 is collaborative and bounds [it(33)] 
       - Loop 34 is collaborative and bounds [aux(17)] 
 * Adding constraints: [aux(17)+it(33)+s(22)=<V_PL_bufend-V_pos_2-2,aux(17)+it(33)+s(22)=<V_PL_bufend-V_pos_2-V_PL_bufend'+V_pos_2'] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 30: [aux(8)=<V_PL_bufend-V_pos_2-4,aux(5)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 33: [it(33)=<1,aux(9)=<V_PL_bufend-V_pos_2-4,aux(6)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 34: [s(24)=< -V__1+V_pos_2',aux(17)=<1]

###### Computing sum for aux(8)=<V_PL_bufend-V_pos_2-4  in Loop 30 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(19)=<V_PL_bufend-V_pos_2-4] 
 * Adding constraints: [aux(8)=<it(30)*aux(19)] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Pmax/min: [aux(19)=<V_PL_bufend-V_pos_2-4]
* Psum in Loop 30: [aux(5)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 33: [it(33)=<1,aux(9)=<V_PL_bufend-V_pos_2-4,aux(6)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 34: [s(24)=< -V__1+V_pos_2',aux(17)=<1]

###### Computing max_min for aux(19)=<V_PL_bufend-V_pos_2-4  
   - Found a solution using cacheing 
 * Adding constraints:[aux(19)=<aux(14)-2] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 30: [aux(5)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 33: [it(33)=<1,aux(9)=<V_PL_bufend-V_pos_2-4,aux(6)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 34: [s(24)=< -V__1+V_pos_2',aux(17)=<1]

###### Computing sum for aux(5)=<V_PL_bufend/2-V_pos_2/2-2  in Loop 30 
   - Found a solution using cacheing 
 * Adding constraints: [aux(5)=<aux(20)* (1/2),aux(20)=<it(30)*aux(19)] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 33: [it(33)=<1,aux(9)=<V_PL_bufend-V_pos_2-4,aux(6)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 34: [s(24)=< -V__1+V_pos_2',aux(17)=<1]

###### Computing sum for it(33)=<1  in Loop 33 
   - Applying inductive sum strategy 
     - head Candidate: V_PL_bufend-V_pos_2-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_PL_bufend-V_pos_2-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_PL_bufend-V_pos_2-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_PL_bufend-V_pos_2-1 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(29)+it(30)+it(33)+it(34)=<V_PL_bufend-V_pos_2-1,it(29)+it(30)+it(33)+it(34)=<V_PL_bufend-V_pos_2-1,it(29)+it(30)+it(33)+it(34)=<V_PL_bufend-V_pos_2-V_PL_bufend'+V_pos_2',it(29)+it(30)+it(33)+it(34)=<V_PL_bufend-V_pos_2-V_PL_bufend'+V_pos_2'] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 33: [aux(9)=<V_PL_bufend-V_pos_2-4,aux(6)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 34: [s(24)=< -V__1+V_pos_2',aux(17)=<1]

###### Computing sum for aux(9)=<V_PL_bufend-V_pos_2-4  in Loop 33 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(21)=<V_PL_bufend-V_pos_2-4] 
 * Adding constraints: [aux(9)=<it(33)*aux(21)] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Pmax/min: [aux(21)=<V_PL_bufend-V_pos_2-4]
* Psum in Loop 33: [aux(6)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 34: [s(24)=< -V__1+V_pos_2',aux(17)=<1]

###### Computing max_min for aux(21)=<V_PL_bufend-V_pos_2-4  
   - Found a solution using cacheing 
 * Adding constraints:[aux(21)=<aux(14)-2] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 33: [aux(6)=<V_PL_bufend/2-V_pos_2/2-2]
* Psum in Loop 34: [s(24)=< -V__1+V_pos_2',aux(17)=<1]

###### Computing sum for aux(6)=<V_PL_bufend/2-V_pos_2/2-2  in Loop 33 
   - Found a solution using cacheing 
 * Adding constraints: [aux(6)=<aux(22)* (1/2),aux(22)=<it(33)*aux(21)] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 34: [s(24)=< -V__1+V_pos_2',aux(17)=<1]

###### Computing sum for s(24)=< -V__1+V_pos_2'  in Loop 34 
   - Applying inductive sum strategy 
     - head Candidate: 2*V_pos_2-2*V__1 
       - Loop 29 has a reset to  [2*V_PL_bufend-2*V_pos_2-4]
       - Loop 30 has a reset to  [2*V_PL_bufend-2*V_pos_2-4]
       - Loop 33 has a reset to  [0]
     - tail Candidate: 2*V_pos_2-2*V__1 
       - Loop 29 has undefined behavior 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(27)=<V_pos_2-V__1+1] 
 * Adding constraints: [s(24)=<it(34)*aux(27),s(24)=<aux(25)+aux(24)+aux(23)+aux(26),aux(26)=<2*V_pos_2-2*V__1] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Pmax/min: [aux(27)=<V_pos_2-V__1+1]
* Psum in Loop 29: [aux(23)=<2*V_PL_bufend-2*V_pos_2-4]
* Psum in Loop 30: [aux(24)=<2*V_PL_bufend-2*V_pos_2-4]
* Psum in Loop 33: [aux(25)=<0]
* Psum in Loop 34: [aux(17)=<1]

###### Computing max_min for aux(27)=<V_pos_2-V__1+1  
   - Found a solution using cacheing 
 * Adding constraints:[aux(27)=<aux(11)+1] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 29: [aux(23)=<2*V_PL_bufend-2*V_pos_2-4]
* Psum in Loop 30: [aux(24)=<2*V_PL_bufend-2*V_pos_2-4]
* Psum in Loop 33: [aux(25)=<0]
* Psum in Loop 34: [aux(17)=<1]

###### Computing sum for aux(23)=<2*V_PL_bufend-2*V_pos_2-4  in Loop 29 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(28)=<2*V_PL_bufend-2*V_pos_2-4] 
 * Adding constraints: [aux(23)=<it(29)*aux(28)] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Pmax/min: [aux(28)=<2*V_PL_bufend-2*V_pos_2-4]
* Psum in Loop 30: [aux(24)=<2*V_PL_bufend-2*V_pos_2-4]
* Psum in Loop 33: [aux(25)=<0]
* Psum in Loop 34: [aux(17)=<1]

###### Computing max_min for aux(28)=<2*V_PL_bufend-2*V_pos_2-4  
   - Found a solution using cacheing 
 * Adding constraints:[aux(28)=<aux(14)*2] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 30: [aux(24)=<2*V_PL_bufend-2*V_pos_2-4]
* Psum in Loop 33: [aux(25)=<0]
* Psum in Loop 34: [aux(17)=<1]

###### Computing sum for aux(24)=<2*V_PL_bufend-2*V_pos_2-4  in Loop 30 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(29)=<2*V_PL_bufend-2*V_pos_2-4] 
 * Adding constraints: [aux(24)=<it(30)*aux(29)] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Pmax/min: [aux(29)=<2*V_PL_bufend-2*V_pos_2-4]
* Psum in Loop 33: [aux(25)=<0]
* Psum in Loop 34: [aux(17)=<1]

###### Computing max_min for aux(29)=<2*V_PL_bufend-2*V_pos_2-4  
   - Found a solution using cacheing 
 * Adding constraints:[aux(29)=<aux(14)*2] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 33: [aux(25)=<0]
* Psum in Loop 34: [aux(17)=<1]

###### Computing sum for aux(25)=<0  in Loop 33 
 * Adding constraints: [aux(25)=<0] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 34: [aux(17)=<1]

###### Computing sum for aux(17)=<1  in Loop 34 
   - Applying inductive sum strategy 
     - head Candidate: V_PL_bufend-V_pos_2-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_PL_bufend-V_pos_2-1 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V_pos_2-V__1 
       - Loop 29 has a reset to  [V_PL_bufend-V_pos_2-2]
       - Loop 30 has a reset to  [V_PL_bufend-V_pos_2-2]
       - Loop 33 has a reset to  [0]
     - head Candidate: V_PL_bufend/2-V__1/2-1 
       - Loop 29 is collaborative
       - Loop 30 has a reset to  [V_PL_bufend/2-V_pos_2/2-3/2]
       - Loop 33 has a reset to  [V_PL_bufend/2-V_pos_2/2-3/2]
     - tail Candidate: V_PL_bufend-V_pos_2-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_PL_bufend-V_pos_2-1 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V_pos_2-V__1 
       - Loop 29 has undefined behavior 
     - tail Candidate: V_PL_bufend/2-V__1/2-1 
       - Loop 29 is collaborative
       - Loop 30 has undefined behavior 
 * Adding constraints: [aux(17)=<aux(32)+aux(31)+aux(30)+aux(33),aux(17)=<aux(35)+aux(34)+aux(36),aux(17)+it(29)+it(30)+it(33)=<V_PL_bufend-V_pos_2-1,aux(17)+it(29)+it(30)+it(33)=<V_PL_bufend-V_pos_2-1,aux(33)=<V_pos_2-V__1,aux(36)=<V_PL_bufend/2-V__1/2-1,aux(17)+it(29)+it(30)+it(33)=<V_PL_bufend-V_pos_2-V_PL_bufend'+V_pos_2',aux(17)+it(29)+it(30)+it(33)=<V_PL_bufend-V_pos_2-V_PL_bufend'+V_pos_2'] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 29: [aux(30)=<V_PL_bufend-V_pos_2-2]
* Psum in Loop 30: [aux(31)=<V_PL_bufend-V_pos_2-2,aux(34)=<V_PL_bufend/2-V_pos_2/2-3/2]
* Psum in Loop 33: [aux(32)=<0,aux(35)=<V_PL_bufend/2-V_pos_2/2-3/2]

###### Computing sum for aux(30)=<V_PL_bufend-V_pos_2-2  in Loop 29 
   - Found a solution using cacheing 
 * Adding constraints: [aux(30)=<aux(37)* (1/2),aux(37)=<it(29)*aux(28)] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 30: [aux(31)=<V_PL_bufend-V_pos_2-2,aux(34)=<V_PL_bufend/2-V_pos_2/2-3/2]
* Psum in Loop 33: [aux(32)=<0,aux(35)=<V_PL_bufend/2-V_pos_2/2-3/2]

###### Computing sum for aux(31)=<V_PL_bufend-V_pos_2-2  in Loop 30 
   - Found a solution using cacheing 
 * Adding constraints: [aux(31)=<aux(38)* (1/2),aux(38)=<it(30)*aux(29)] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 30: [aux(34)=<V_PL_bufend/2-V_pos_2/2-3/2]
* Psum in Loop 33: [aux(32)=<0,aux(35)=<V_PL_bufend/2-V_pos_2/2-3/2]

###### Computing sum for aux(34)=<V_PL_bufend/2-V_pos_2/2-3/2  in Loop 30 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(39)=<V_PL_bufend/2-V_pos_2/2-3/2] 
 * Adding constraints: [aux(34)=<it(30)*aux(39)] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Pmax/min: [aux(39)=<V_PL_bufend/2-V_pos_2/2-3/2]
* Psum in Loop 33: [aux(32)=<0,aux(35)=<V_PL_bufend/2-V_pos_2/2-3/2]

###### Computing max_min for aux(39)=<V_PL_bufend/2-V_pos_2/2-3/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(39)=<aux(14)* (1/2)-1/2] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 33: [aux(32)=<0,aux(35)=<V_PL_bufend/2-V_pos_2/2-3/2]

###### Computing sum for aux(32)=<0  in Loop 33 
 * Adding constraints: [aux(32)=<0] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Psum in Loop 33: [aux(35)=<V_PL_bufend/2-V_pos_2/2-3/2]

###### Computing sum for aux(35)=<V_PL_bufend/2-V_pos_2/2-3/2  in Loop 33 
   - Applying inductive sum strategy 
   - Applying basic product strategy 
     - Adding to Pmax/min: [aux(40)=<V_PL_bufend/2-V_pos_2/2-3/2] 
 * Adding constraints: [aux(35)=<it(33)*aux(40)] 

##### Pending set eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B)
* Pmax/min: [aux(40)=<V_PL_bufend/2-V_pos_2/2-3/2]

###### Computing max_min for aux(40)=<V_PL_bufend/2-V_pos_2/2-3/2  
   - Found a solution using cacheing 
 * Adding constraints:[aux(40)=<aux(14)* (1/2)-1/2] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [29,30,33,34] 
Found a cycle in the non-final constraints
 Removed possibly redundant constraints to solve a cycle in the cost structure 
it(29)+it(34)=<aux(6)+aux(5)+aux(7)
it(30)=<aux(17)+aux(16)+aux(18)
aux(17)=<aux(32)+aux(31)+aux(30)+aux(33)
aux(17)=<aux(35)+aux(34)+aux(36)

#### Simplifying cost structure of phase [29,30,33,34] 
 * Joined equivalent variables [aux(41),aux(15),aux(16),aux(25),aux(32)] into aux(41)
 * Joined equivalent variables [aux(42),aux(14)] into aux(42)
 * Joined equivalent variables [aux(46),aux(7),aux(36)] into aux(46)
 * Joined equivalent variables [aux(47),aux(12),aux(33)] into aux(47)
 * Joined equivalent variables [aux(39),aux(40)] into aux(39)
 * Joined equivalent variables [aux(28),aux(29)] into aux(28)
 * Joined equivalent variables [aux(19),aux(21)] into aux(19)
 * Joined equivalent variables [aux(9),aux(22)] into aux(9)
 * Joined equivalent variables [aux(24),aux(38)] into aux(24)
 * Joined equivalent variables [aux(23),aux(37)] into aux(23)
 * Joined equivalent variables [aux(8),aux(20)] into aux(8)
 * Joined equivalent variables [it(29),it(30)] into it(29)
 * Joined equivalent variables [aux(13),aux(17),s(20),s(22)] into aux(13)
 * Joined equivalent variables [aux(23),aux(24)] into aux(23)
 * Joined equivalent variables [s(18),s(21)] into s(18)
 * Joined equivalent variables [aux(30),aux(31)] into aux(30)

#### Cost of phase [29,30,33,34]:eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) -> [eval_Perl_scan_vstring__critedge2_in(V_PL_bufend',V_pos_2',V__1',B')] 
6*it(29)+3*it(33)+3*it(34)+2*s(17)+4*s(18)+2*s(23)+0
  Such that:aux(10) =< V_PL_bufend-V__1
aux(26) =< 2*V_pos_2-2*V__1
aux(42) =< V_PL_bufend-V_pos_2
aux(43) =< V_PL_bufend-V_pos_2-V_PL_bufend'+V_pos_2'
aux(44) =< V_PL_bufend/2-V_pos_2/2
aux(45) =< V_PL_bufend/2-V_pos_2/2-V_PL_bufend'/2+V_pos_2'/2
aux(47) =< V_pos_2-V__1
aux(13) =< aux(42)
it(29) =< aux(42)
it(33) =< aux(42)
it(34) =< aux(42)
aux(13) =< aux(43)
it(29) =< aux(43)
it(33) =< aux(43)
it(34) =< aux(43)
it(29) =< aux(44)
it(29) =< aux(45)
aux(28) =< aux(42)*2
aux(19) =< aux(42)-2
aux(11) =< max([aux(47),aux(42),0])+aux(13)
aux(27) =< aux(11)+1
aux(9) =< it(33)*aux(19)
aux(23) =< it(29)*aux(28)
aux(8) =< it(29)*aux(19)
s(19) =< it(29)*aux(11)
s(24) =< aux(23)+aux(23)+aux(26)
it(34) =< aux(9)+aux(8)+aux(10)
s(19) =< aux(9)+aux(8)+aux(10)
s(24) =< it(34)*aux(27)
s(23) =< s(24)
s(18) =< aux(13)
s(17) =< s(19)

#### Simplifying cost structure of chain [[29,30,33,34],38] 
 * Joined equivalent variables [aux(48),aux(42),aux(43)] into aux(48)
 * Joined equivalent variables [aux(49),aux(44),aux(45)] into aux(49)
 * Joined equivalent variables [aux(48),aux(13)] into aux(48)
 * Joined equivalent variables [it(33),s(18)] into it(33)
 * Renamed intermediate variables: 
[ (eq(35,1),it(24))>>s(25)]

#### Simplifying cost structure of CE 35 

#### Found solution for phase  [29,30,33,34] in the cache 

#### Cost of phase [29,30,33,34]:eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) -> [eval_Perl_scan_vstring__critedge2_in(V_PL_bufend',V_pos_2',V__1',B')] 
6*it(29)+3*it(33)+3*it(34)+2*s(17)+4*s(18)+2*s(23)+0
  Such that:aux(10) =< V_PL_bufend-V__1
aux(26) =< 2*V_pos_2-2*V__1
aux(42) =< V_PL_bufend-V_pos_2
aux(43) =< V_PL_bufend-V_pos_2-V_PL_bufend'+V_pos_2'
aux(44) =< V_PL_bufend/2-V_pos_2/2
aux(45) =< V_PL_bufend/2-V_pos_2/2-V_PL_bufend'/2+V_pos_2'/2
aux(47) =< V_pos_2-V__1
aux(13) =< aux(42)
it(29) =< aux(42)
it(33) =< aux(42)
it(34) =< aux(42)
aux(13) =< aux(43)
it(29) =< aux(43)
it(33) =< aux(43)
it(34) =< aux(43)
it(29) =< aux(44)
it(29) =< aux(45)
aux(28) =< aux(42)*2
aux(19) =< aux(42)-2
aux(11) =< max([aux(47),aux(42),0])+aux(13)
aux(27) =< aux(11)+1
aux(9) =< it(33)*aux(19)
aux(23) =< it(29)*aux(28)
aux(8) =< it(29)*aux(19)
s(19) =< it(29)*aux(11)
s(24) =< aux(23)+aux(23)+aux(26)
it(34) =< aux(9)+aux(8)+aux(10)
s(19) =< aux(9)+aux(8)+aux(10)
s(24) =< it(34)*aux(27)
s(23) =< s(24)
s(18) =< aux(13)
s(17) =< s(19)

#### Simplifying cost structure of chain [[29,30,33,34],37] 
 * Joined equivalent variables [aux(50),aux(42),aux(43)] into aux(50)
 * Joined equivalent variables [aux(51),aux(44),aux(45)] into aux(51)
 * Joined equivalent variables [aux(50),aux(13)] into aux(50)
 * Joined equivalent variables [it(33),s(25)] into it(33)
 * Joined equivalent variables [it(33),s(18)] into it(33)

#### Simplifying cost structure of CE 32 

#### Found solution for phase  [29,30,33,34] in the cache 

#### Cost of phase [29,30,33,34]:eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) -> [eval_Perl_scan_vstring__critedge2_in(V_PL_bufend',V_pos_2',V__1',B')] 
6*it(29)+3*it(33)+3*it(34)+2*s(17)+4*s(18)+2*s(23)+0
  Such that:aux(10) =< V_PL_bufend-V__1
aux(26) =< 2*V_pos_2-2*V__1
aux(42) =< V_PL_bufend-V_pos_2
aux(43) =< V_PL_bufend-V_pos_2-V_PL_bufend'+V_pos_2'
aux(44) =< V_PL_bufend/2-V_pos_2/2
aux(45) =< V_PL_bufend/2-V_pos_2/2-V_PL_bufend'/2+V_pos_2'/2
aux(47) =< V_pos_2-V__1
aux(13) =< aux(42)
it(29) =< aux(42)
it(33) =< aux(42)
it(34) =< aux(42)
aux(13) =< aux(43)
it(29) =< aux(43)
it(33) =< aux(43)
it(34) =< aux(43)
it(29) =< aux(44)
it(29) =< aux(45)
aux(28) =< aux(42)*2
aux(19) =< aux(42)-2
aux(11) =< max([aux(47),aux(42),0])+aux(13)
aux(27) =< aux(11)+1
aux(9) =< it(33)*aux(19)
aux(23) =< it(29)*aux(28)
aux(8) =< it(29)*aux(19)
s(19) =< it(29)*aux(11)
s(24) =< aux(23)+aux(23)+aux(26)
it(34) =< aux(9)+aux(8)+aux(10)
s(19) =< aux(9)+aux(8)+aux(10)
s(24) =< it(34)*aux(27)
s(23) =< s(24)
s(18) =< aux(13)
s(17) =< s(19)

#### Simplifying cost structure of chain [[29,30,33,34],36] 
 * Joined equivalent variables [aux(52),aux(42),aux(43)] into aux(52)
 * Joined equivalent variables [aux(53),aux(44),aux(45)] into aux(53)
 * Joined equivalent variables [aux(52),aux(13)] into aux(52)
 * Joined equivalent variables [it(33),s(18)] into it(33)
 * Renamed intermediate variables: 
[ (eq(33,1),it(24))>>s(26)]

#### Simplifying cost structure of CE 33 

#### Found solution for phase  [29,30,33,34] in the cache 

#### Cost of phase [29,30,33,34]:eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) -> [eval_Perl_scan_vstring__critedge2_in(V_PL_bufend',V_pos_2',V__1',B')] 
6*it(29)+3*it(33)+3*it(34)+2*s(17)+4*s(18)+2*s(23)+0
  Such that:aux(10) =< V_PL_bufend-V__1
aux(26) =< 2*V_pos_2-2*V__1
aux(42) =< V_PL_bufend-V_pos_2
aux(43) =< V_PL_bufend-V_pos_2-V_PL_bufend'+V_pos_2'
aux(44) =< V_PL_bufend/2-V_pos_2/2
aux(45) =< V_PL_bufend/2-V_pos_2/2-V_PL_bufend'/2+V_pos_2'/2
aux(47) =< V_pos_2-V__1
aux(13) =< aux(42)
it(29) =< aux(42)
it(33) =< aux(42)
it(34) =< aux(42)
aux(13) =< aux(43)
it(29) =< aux(43)
it(33) =< aux(43)
it(34) =< aux(43)
it(29) =< aux(44)
it(29) =< aux(45)
aux(28) =< aux(42)*2
aux(19) =< aux(42)-2
aux(11) =< max([aux(47),aux(42),0])+aux(13)
aux(27) =< aux(11)+1
aux(9) =< it(33)*aux(19)
aux(23) =< it(29)*aux(28)
aux(8) =< it(29)*aux(19)
s(19) =< it(29)*aux(11)
s(24) =< aux(23)+aux(23)+aux(26)
it(34) =< aux(9)+aux(8)+aux(10)
s(19) =< aux(9)+aux(8)+aux(10)
s(24) =< it(34)*aux(27)
s(23) =< s(24)
s(18) =< aux(13)
s(17) =< s(19)

#### Simplifying cost structure of chain [[29,30,33,34],35] 
 * Joined equivalent variables [aux(54),aux(42),aux(43)] into aux(54)
 * Joined equivalent variables [aux(55),aux(44),aux(45)] into aux(55)
 * Joined equivalent variables [aux(54),aux(13)] into aux(54)
 * Joined equivalent variables [it(33),s(26)] into it(33)
 * Joined equivalent variables [it(33),s(18)] into it(33)
 * Renamed intermediate variables: 
[ (eq(37,2),it(26))>>s(27)]

#### Simplifying cost structure of CE 37 
 * Renamed intermediate variables: 
[ (eq(43,2),it(26))>>s(28)]

#### Simplifying cost structure of CE 43 
 * Joined equivalent variables [s(27),s(28)] into s(27)

#### Simplifying cost structure of chain [32,37] 
 * Joined equivalent variables [aux(57),aux(56)] into aux(57)
 * Joined equivalent variables [s(25),s(27)] into s(25)

#### Found solution for phase  [29,30,33,34] in the cache 

#### Cost of phase [29,30,33,34]:eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) -> [eval_Perl_scan_vstring__critedge2_in(V_PL_bufend',V_pos_2',V__1',B')] 
6*it(29)+3*it(33)+3*it(34)+2*s(17)+4*s(18)+2*s(23)+0
  Such that:aux(10) =< V_PL_bufend-V__1
aux(26) =< 2*V_pos_2-2*V__1
aux(42) =< V_PL_bufend-V_pos_2
aux(43) =< V_PL_bufend-V_pos_2-V_PL_bufend'+V_pos_2'
aux(44) =< V_PL_bufend/2-V_pos_2/2
aux(45) =< V_PL_bufend/2-V_pos_2/2-V_PL_bufend'/2+V_pos_2'/2
aux(47) =< V_pos_2-V__1
aux(13) =< aux(42)
it(29) =< aux(42)
it(33) =< aux(42)
it(34) =< aux(42)
aux(13) =< aux(43)
it(29) =< aux(43)
it(33) =< aux(43)
it(34) =< aux(43)
it(29) =< aux(44)
it(29) =< aux(45)
aux(28) =< aux(42)*2
aux(19) =< aux(42)-2
aux(11) =< max([aux(47),aux(42),0])+aux(13)
aux(27) =< aux(11)+1
aux(9) =< it(33)*aux(19)
aux(23) =< it(29)*aux(28)
aux(8) =< it(29)*aux(19)
s(19) =< it(29)*aux(11)
s(24) =< aux(23)+aux(23)+aux(26)
it(34) =< aux(9)+aux(8)+aux(10)
s(19) =< aux(9)+aux(8)+aux(10)
s(24) =< it(34)*aux(27)
s(23) =< s(24)
s(18) =< aux(13)
s(17) =< s(19)

#### Simplifying cost structure of chain [[29,30,33,34],32,37] 
 * Joined equivalent variables [aux(58),aux(42),aux(43),aux(45),aux(57)] into aux(58)
 * Joined equivalent variables [aux(58),aux(13)] into aux(58)
 * Joined equivalent variables [it(33),s(25)] into it(33)
 * Joined equivalent variables [it(33),s(18)] into it(33)
 * Renamed intermediate variables: 
[ (eq(40,1),it(24))>>s(29)]
 * Renamed intermediate variables: 
[ (eq(40,2),it(26))>>s(30)]

#### Simplifying cost structure of CE 40 
 * Renamed intermediate variables: 
[ (eq(46,1),it(24))>>s(31)]
 * Renamed intermediate variables: 
[ (eq(46,2),it(26))>>s(32)]

#### Simplifying cost structure of CE 46 
 * Joined equivalent variables [s(30),s(32)] into s(30)
 * Joined equivalent variables [s(29),s(31)] into s(29)

#### Simplifying cost structure of chain [31,37] 
 * Joined equivalent variables [aux(61),aux(59)] into aux(61)
 * Joined equivalent variables [s(25),s(30)] into s(25)

#### Found solution for phase  [29,30,33,34] in the cache 

#### Cost of phase [29,30,33,34]:eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B) -> [eval_Perl_scan_vstring__critedge2_in(V_PL_bufend',V_pos_2',V__1',B')] 
6*it(29)+3*it(33)+3*it(34)+2*s(17)+4*s(18)+2*s(23)+0
  Such that:aux(10) =< V_PL_bufend-V__1
aux(26) =< 2*V_pos_2-2*V__1
aux(42) =< V_PL_bufend-V_pos_2
aux(43) =< V_PL_bufend-V_pos_2-V_PL_bufend'+V_pos_2'
aux(44) =< V_PL_bufend/2-V_pos_2/2
aux(45) =< V_PL_bufend/2-V_pos_2/2-V_PL_bufend'/2+V_pos_2'/2
aux(47) =< V_pos_2-V__1
aux(13) =< aux(42)
it(29) =< aux(42)
it(33) =< aux(42)
it(34) =< aux(42)
aux(13) =< aux(43)
it(29) =< aux(43)
it(33) =< aux(43)
it(34) =< aux(43)
it(29) =< aux(44)
it(29) =< aux(45)
aux(28) =< aux(42)*2
aux(19) =< aux(42)-2
aux(11) =< max([aux(47),aux(42),0])+aux(13)
aux(27) =< aux(11)+1
aux(9) =< it(33)*aux(19)
aux(23) =< it(29)*aux(28)
aux(8) =< it(29)*aux(19)
s(19) =< it(29)*aux(11)
s(24) =< aux(23)+aux(23)+aux(26)
it(34) =< aux(9)+aux(8)+aux(10)
s(19) =< aux(9)+aux(8)+aux(10)
s(24) =< it(34)*aux(27)
s(23) =< s(24)
s(18) =< aux(13)
s(17) =< s(19)

#### Simplifying cost structure of chain [[29,30,33,34],31,37] 
 * Joined equivalent variables [aux(62),aux(42),aux(43),aux(60),aux(61)] into aux(62)
 * Joined equivalent variables [aux(63),aux(44)] into aux(63)
 * Joined equivalent variables [aux(62),aux(13)] into aux(62)
 * Joined equivalent variables [it(33),s(25),s(29)] into it(33)
 * Joined equivalent variables [it(33),s(18)] into it(33)
 * Renamed intermediate variables: 
[ (ch([31,37]),aux(60))>>s(33), (ch([31,37]),aux(61))>>s(34), (ch([31,37]),s(25))>>s(35), (ch([31,37]),s(29))>>s(36)]
 * Renamed intermediate variables: 
[ (ch([32,37]),aux(57))>>s(37), (ch([32,37]),s(25))>>s(38)]
 * Renamed intermediate variables: 
[ (ch([35]),s(26))>>s(39)]
 * Renamed intermediate variables: 
[ (ch([[29,30,33,34],31,37]),aux(10))>>s(40), (ch([[29,30,33,34],31,37]),aux(47))>>s(41), (ch([[29,30,33,34],31,37]),aux(26))>>s(42), (ch([[29,30,33,34],31,37]),aux(62))>>s(43), (ch([[29,30,33,34],31,37]),aux(63))>>s(44), (ch([[29,30,33,34],31,37]),aux(45))>>s(45), (ch([[29,30,33,34],31,37]),it(33))>>s(46), (ch([[29,30,33,34],31,37]),it(29))>>s(47), (ch([[29,30,33,34],31,37]),it(34))>>s(48), (ch([[29,30,33,34],31,37]),aux(28))>>s(49), (ch([[29,30,33,34],31,37]),aux(19))>>s(50), (ch([[29,30,33,34],31,37]),aux(11))>>s(51), (ch([[29,30,33,34],31,37]),aux(27))>>s(52), (ch([[29,30,33,34],31,37]),aux(9))>>s(53), (ch([[29,30,33,34],31,37]),aux(23))>>s(54), (ch([[29,30,33,34],31,37]),aux(8))>>s(55), (ch([[29,30,33,34],31,37]),s(19))>>s(56), (ch([[29,30,33,34],31,37]),s(24))>>s(57), (ch([[29,30,33,34],31,37]),s(23))>>s(58), (ch([[29,30,33,34],31,37]),s(17))>>s(59)]
 * Renamed intermediate variables: 
[ (ch([[29,30,33,34],32,37]),aux(10))>>s(60), (ch([[29,30,33,34],32,37]),aux(44))>>s(61), (ch([[29,30,33,34],32,37]),aux(47))>>s(62), (ch([[29,30,33,34],32,37]),aux(26))>>s(63), (ch([[29,30,33,34],32,37]),aux(58))>>s(64), (ch([[29,30,33,34],32,37]),it(33))>>s(65), (ch([[29,30,33,34],32,37]),it(29))>>s(66), (ch([[29,30,33,34],32,37]),it(34))>>s(67), (ch([[29,30,33,34],32,37]),aux(28))>>s(68), (ch([[29,30,33,34],32,37]),aux(19))>>s(69), (ch([[29,30,33,34],32,37]),aux(11))>>s(70), (ch([[29,30,33,34],32,37]),aux(27))>>s(71), (ch([[29,30,33,34],32,37]),aux(9))>>s(72), (ch([[29,30,33,34],32,37]),aux(23))>>s(73), (ch([[29,30,33,34],32,37]),aux(8))>>s(74), (ch([[29,30,33,34],32,37]),s(19))>>s(75), (ch([[29,30,33,34],32,37]),s(24))>>s(76), (ch([[29,30,33,34],32,37]),s(23))>>s(77), (ch([[29,30,33,34],32,37]),s(17))>>s(78)]
 * Renamed intermediate variables: 
[ (ch([[29,30,33,34],35]),aux(10))>>s(79), (ch([[29,30,33,34],35]),aux(47))>>s(80), (ch([[29,30,33,34],35]),aux(26))>>s(81), (ch([[29,30,33,34],35]),aux(54))>>s(82), (ch([[29,30,33,34],35]),aux(55))>>s(83), (ch([[29,30,33,34],35]),it(33))>>s(84), (ch([[29,30,33,34],35]),it(29))>>s(85), (ch([[29,30,33,34],35]),it(34))>>s(86), (ch([[29,30,33,34],35]),aux(28))>>s(87), (ch([[29,30,33,34],35]),aux(19))>>s(88), (ch([[29,30,33,34],35]),aux(11))>>s(89), (ch([[29,30,33,34],35]),aux(27))>>s(90), (ch([[29,30,33,34],35]),aux(9))>>s(91), (ch([[29,30,33,34],35]),aux(23))>>s(92), (ch([[29,30,33,34],35]),aux(8))>>s(93), (ch([[29,30,33,34],35]),s(19))>>s(94), (ch([[29,30,33,34],35]),s(24))>>s(95), (ch([[29,30,33,34],35]),s(23))>>s(96), (ch([[29,30,33,34],35]),s(17))>>s(97)]
 * Renamed intermediate variables: 
[ (ch([[29,30,33,34],36]),aux(10))>>s(98), (ch([[29,30,33,34],36]),aux(47))>>s(99), (ch([[29,30,33,34],36]),aux(26))>>s(100), (ch([[29,30,33,34],36]),aux(52))>>s(101), (ch([[29,30,33,34],36]),aux(53))>>s(102), (ch([[29,30,33,34],36]),it(29))>>s(103), (ch([[29,30,33,34],36]),it(33))>>s(104), (ch([[29,30,33,34],36]),it(34))>>s(105), (ch([[29,30,33,34],36]),aux(28))>>s(106), (ch([[29,30,33,34],36]),aux(19))>>s(107), (ch([[29,30,33,34],36]),aux(11))>>s(108), (ch([[29,30,33,34],36]),aux(27))>>s(109), (ch([[29,30,33,34],36]),aux(9))>>s(110), (ch([[29,30,33,34],36]),aux(23))>>s(111), (ch([[29,30,33,34],36]),aux(8))>>s(112), (ch([[29,30,33,34],36]),s(19))>>s(113), (ch([[29,30,33,34],36]),s(24))>>s(114), (ch([[29,30,33,34],36]),s(23))>>s(115), (ch([[29,30,33,34],36]),s(17))>>s(116)]
 * Renamed intermediate variables: 
[ (ch([[29,30,33,34],37]),aux(10))>>s(117), (ch([[29,30,33,34],37]),aux(47))>>s(118), (ch([[29,30,33,34],37]),aux(26))>>s(119), (ch([[29,30,33,34],37]),aux(50))>>s(120), (ch([[29,30,33,34],37]),aux(51))>>s(121), (ch([[29,30,33,34],37]),it(33))>>s(122), (ch([[29,30,33,34],37]),it(29))>>s(123), (ch([[29,30,33,34],37]),it(34))>>s(124), (ch([[29,30,33,34],37]),aux(28))>>s(125), (ch([[29,30,33,34],37]),aux(19))>>s(126), (ch([[29,30,33,34],37]),aux(11))>>s(127), (ch([[29,30,33,34],37]),aux(27))>>s(128), (ch([[29,30,33,34],37]),aux(9))>>s(129), (ch([[29,30,33,34],37]),aux(23))>>s(130), (ch([[29,30,33,34],37]),aux(8))>>s(131), (ch([[29,30,33,34],37]),s(19))>>s(132), (ch([[29,30,33,34],37]),s(24))>>s(133), (ch([[29,30,33,34],37]),s(23))>>s(134), (ch([[29,30,33,34],37]),s(17))>>s(135)]
 * Renamed intermediate variables: 
[ (ch([[29,30,33,34],38]),aux(10))>>s(136), (ch([[29,30,33,34],38]),aux(47))>>s(137), (ch([[29,30,33,34],38]),aux(26))>>s(138), (ch([[29,30,33,34],38]),aux(48))>>s(139), (ch([[29,30,33,34],38]),aux(49))>>s(140), (ch([[29,30,33,34],38]),it(29))>>s(141), (ch([[29,30,33,34],38]),it(33))>>s(142), (ch([[29,30,33,34],38]),it(34))>>s(143), (ch([[29,30,33,34],38]),aux(28))>>s(144), (ch([[29,30,33,34],38]),aux(19))>>s(145), (ch([[29,30,33,34],38]),aux(11))>>s(146), (ch([[29,30,33,34],38]),aux(27))>>s(147), (ch([[29,30,33,34],38]),aux(9))>>s(148), (ch([[29,30,33,34],38]),aux(23))>>s(149), (ch([[29,30,33,34],38]),aux(8))>>s(150), (ch([[29,30,33,34],38]),s(19))>>s(151), (ch([[29,30,33,34],38]),s(24))>>s(152), (ch([[29,30,33,34],38]),s(23))>>s(153), (ch([[29,30,33,34],38]),s(17))>>s(154)]
 * Joined equivalent variables [aux(64),s(34),s(37),s(43),s(64),s(82),s(101),s(120),s(139)] into aux(64)
 * Joined equivalent variables [aux(65),s(40),s(60),s(79),s(98),s(117),s(136)] into aux(65)
 * Joined equivalent variables [aux(66),s(44),s(61),s(83),s(102),s(121),s(140)] into aux(66)
 * Joined equivalent variables [aux(67),s(41),s(62),s(80),s(99),s(118),s(137)] into aux(67)
 * Joined equivalent variables [aux(68),s(42),s(63),s(81),s(100),s(119),s(138)] into aux(68)
 * Joined equivalent variables [s(49),s(68),s(87),s(106),s(125),s(144)] into s(49)
 * Joined equivalent variables [s(50),s(69),s(88),s(107),s(126),s(145)] into s(50)
 * Joined equivalent variables [s(51),s(70),s(89),s(108),s(127),s(146)] into s(51)
 * Joined equivalent variables [s(35),s(38),s(46),s(65),s(84),s(104),s(122),s(142)] into s(35)
 * Joined equivalent variables [s(66),s(85),s(103),s(123),s(141)] into s(66)
 * Joined equivalent variables [s(52),s(71),s(90),s(109),s(128),s(147)] into s(52)
 * Joined equivalent variables [s(53),s(72),s(91),s(110),s(129),s(148)] into s(53)
 * Joined equivalent variables [s(73),s(92),s(111),s(130),s(149)] into s(73)
 * Joined equivalent variables [s(74),s(93),s(112),s(131),s(150)] into s(74)
 * Joined equivalent variables [s(75),s(94),s(113),s(132),s(151)] into s(75)
 * Joined equivalent variables [s(67),s(86),s(105),s(124),s(143)] into s(67)
 * Joined equivalent variables [s(76),s(95),s(114),s(133),s(152)] into s(76)
 * Joined equivalent variables [s(78),s(97),s(116),s(135),s(154)] into s(78)
 * Joined equivalent variables [s(77),s(96),s(115),s(134),s(153)] into s(77)

#### Cost of chains of eval_Perl_scan_vstring__critedge2_in(V_PL_bufend,V_pos_2,V__1,B):
* Chain [[29,30,33,34],38]: 6*it(29)+7*it(33)+3*it(34)+2*s(17)+2*s(23)+1
  Such that:aux(10) =< V_PL_bufend-V__1
aux(47) =< V_pos_2-V__1
aux(26) =< 2*V_pos_2-2*V__1
aux(48) =< V_PL_bufend-V_pos_2
aux(49) =< V_PL_bufend/2-V_pos_2/2
it(29) =< aux(48)
it(33) =< aux(48)
it(34) =< aux(48)
it(29) =< aux(49)
aux(28) =< aux(48)*2
aux(19) =< aux(48)-2
aux(11) =< max([aux(47),aux(48),0])+aux(48)
aux(27) =< aux(11)+1
aux(9) =< it(33)*aux(19)
aux(23) =< it(29)*aux(28)
aux(8) =< it(29)*aux(19)
s(19) =< it(29)*aux(11)
s(24) =< aux(23)+aux(23)+aux(26)
it(34) =< aux(9)+aux(8)+aux(10)
s(19) =< aux(9)+aux(8)+aux(10)
s(24) =< it(34)*aux(27)
s(23) =< s(24)
s(17) =< s(19)

  with precondition: [B=5,V_PL_bufend>=V_pos_2+2] 

* Chain [[29,30,33,34],37]: 6*it(29)+8*it(33)+3*it(34)+2*s(17)+2*s(23)+1
  Such that:aux(10) =< V_PL_bufend-V__1
aux(47) =< V_pos_2-V__1
aux(26) =< 2*V_pos_2-2*V__1
aux(50) =< V_PL_bufend-V_pos_2
aux(51) =< V_PL_bufend/2-V_pos_2/2
it(33) =< aux(50)
it(29) =< aux(50)
it(34) =< aux(50)
it(29) =< aux(51)
aux(28) =< aux(50)*2
aux(19) =< aux(50)-2
aux(11) =< max([aux(47),aux(50),0])+aux(50)
aux(27) =< aux(11)+1
aux(9) =< it(33)*aux(19)
aux(23) =< it(29)*aux(28)
aux(8) =< it(29)*aux(19)
s(19) =< it(29)*aux(11)
s(24) =< aux(23)+aux(23)+aux(26)
it(34) =< aux(9)+aux(8)+aux(10)
s(19) =< aux(9)+aux(8)+aux(10)
s(24) =< it(34)*aux(27)
s(23) =< s(24)
s(17) =< s(19)

  with precondition: [B=5,V_PL_bufend>=V_pos_2+3] 

* Chain [[29,30,33,34],36]: 6*it(29)+7*it(33)+3*it(34)+2*s(17)+2*s(23)+1
  Such that:aux(10) =< V_PL_bufend-V__1
aux(47) =< V_pos_2-V__1
aux(26) =< 2*V_pos_2-2*V__1
aux(52) =< V_PL_bufend-V_pos_2
aux(53) =< V_PL_bufend/2-V_pos_2/2
it(29) =< aux(52)
it(33) =< aux(52)
it(34) =< aux(52)
it(29) =< aux(53)
aux(28) =< aux(52)*2
aux(19) =< aux(52)-2
aux(11) =< max([aux(47),aux(52),0])+aux(52)
aux(27) =< aux(11)+1
aux(9) =< it(33)*aux(19)
aux(23) =< it(29)*aux(28)
aux(8) =< it(29)*aux(19)
s(19) =< it(29)*aux(11)
s(24) =< aux(23)+aux(23)+aux(26)
it(34) =< aux(9)+aux(8)+aux(10)
s(19) =< aux(9)+aux(8)+aux(10)
s(24) =< it(34)*aux(27)
s(23) =< s(24)
s(17) =< s(19)

  with precondition: [B=5,V_PL_bufend>=V_pos_2+3] 

* Chain [[29,30,33,34],35]: 6*it(29)+8*it(33)+3*it(34)+2*s(17)+2*s(23)+1
  Such that:aux(10) =< V_PL_bufend-V__1
aux(47) =< V_pos_2-V__1
aux(26) =< 2*V_pos_2-2*V__1
aux(54) =< V_PL_bufend-V_pos_2
aux(55) =< V_PL_bufend/2-V_pos_2/2
it(33) =< aux(54)
it(29) =< aux(54)
it(34) =< aux(54)
it(29) =< aux(55)
aux(28) =< aux(54)*2
aux(19) =< aux(54)-2
aux(11) =< max([aux(47),aux(54),0])+aux(54)
aux(27) =< aux(11)+1
aux(9) =< it(33)*aux(19)
aux(23) =< it(29)*aux(28)
aux(8) =< it(29)*aux(19)
s(19) =< it(29)*aux(11)
s(24) =< aux(23)+aux(23)+aux(26)
it(34) =< aux(9)+aux(8)+aux(10)
s(19) =< aux(9)+aux(8)+aux(10)
s(24) =< it(34)*aux(27)
s(23) =< s(24)
s(17) =< s(19)

  with precondition: [B=5,V_PL_bufend>=V_pos_2+4] 

* Chain [[29,30,33,34],32,37]: 6*it(29)+10*it(33)+3*it(34)+2*s(17)+2*s(23)+4
  Such that:aux(10) =< V_PL_bufend-V__1
aux(44) =< V_PL_bufend/2-V_pos_2/2
aux(47) =< V_pos_2-V__1
aux(26) =< 2*V_pos_2-2*V__1
aux(58) =< V_PL_bufend-V_pos_2
it(33) =< aux(58)
it(29) =< aux(58)
it(34) =< aux(58)
it(29) =< aux(44)
aux(28) =< aux(58)*2
aux(19) =< aux(58)-2
aux(11) =< max([aux(47),aux(58),0])+aux(58)
aux(27) =< aux(11)+1
aux(9) =< it(33)*aux(19)
aux(23) =< it(29)*aux(28)
aux(8) =< it(29)*aux(19)
s(19) =< it(29)*aux(11)
s(24) =< aux(23)+aux(23)+aux(26)
it(34) =< aux(9)+aux(8)+aux(10)
s(19) =< aux(9)+aux(8)+aux(10)
s(24) =< it(34)*aux(27)
s(23) =< s(24)
s(17) =< s(19)

  with precondition: [B=5,V_PL_bufend>=V_pos_2+3] 

* Chain [[29,30,33,34],31,37]: 6*it(29)+12*it(33)+3*it(34)+2*s(17)+2*s(23)+4
  Such that:aux(10) =< V_PL_bufend-V__1
aux(47) =< V_pos_2-V__1
aux(26) =< 2*V_pos_2-2*V__1
aux(62) =< V_PL_bufend-V_pos_2
aux(63) =< V_PL_bufend/2-V_pos_2/2
aux(45) =< aux(62)
aux(45) =< aux(63)
it(33) =< aux(62)
it(29) =< aux(62)
it(34) =< aux(62)
it(29) =< aux(63)
it(29) =< aux(45)
aux(28) =< aux(62)*2
aux(19) =< aux(62)-2
aux(11) =< max([aux(47),aux(62),0])+aux(62)
aux(27) =< aux(11)+1
aux(9) =< it(33)*aux(19)
aux(23) =< it(29)*aux(28)
aux(8) =< it(29)*aux(19)
s(19) =< it(29)*aux(11)
s(24) =< aux(23)+aux(23)+aux(26)
it(34) =< aux(9)+aux(8)+aux(10)
s(19) =< aux(9)+aux(8)+aux(10)
s(24) =< it(34)*aux(27)
s(23) =< s(24)
s(17) =< s(19)

  with precondition: [B=5,V_PL_bufend>=V_pos_2+4] 

* Chain [38]: 1
  with precondition: [B=5,V_pos_2+1>=V_PL_bufend,V__1>=V_pos_2] 

* Chain [37]: 1*s(25)+1
  Such that:s(25) =< V_pos_2-V__1

  with precondition: [B=5,V_pos_2+1>=V_PL_bufend,V_pos_2>=V__1+1] 

* Chain [36]: 1
  with precondition: [B=5,V_PL_bufend>=V_pos_2+2,V__1>=V_pos_2] 

* Chain [35]: 1*s(26)+1
  Such that:s(26) =< V_pos_2-V__1

  with precondition: [B=5,V_PL_bufend>=V_pos_2+2,V_pos_2>=V__1+1] 

* Chain [32,37]: 3*s(25)+4
  Such that:aux(57) =< V_PL_bufend-V_pos_2
s(25) =< aux(57)

  with precondition: [B=5,V_PL_bufend>=V_pos_2+2,V__1>=V_pos_2] 

* Chain [31,37]: 3*s(25)+2*s(29)+4
  Such that:aux(60) =< V_pos_2-V__1+1
aux(61) =< V_PL_bufend-V_pos_2
s(25) =< aux(61)
s(29) =< aux(60)

  with precondition: [B=5,V_PL_bufend>=V_pos_2+2,V_pos_2>=V__1+1] 

 * Renamed intermediate variables: 
[ (eq(55,1),s(25))>>s(155)]

#### Simplifying cost structure of CE 55 

#### Simplifying cost structure of CE 54 
 * Renamed intermediate variables: 
[ (eq(56,1),s(33))>>s(156), (eq(56,1),aux(64))>>s(157), (eq(56,1),aux(65))>>s(158), (eq(56,1),aux(66))>>s(159), (eq(56,1),aux(67))>>s(160), (eq(56,1),aux(68))>>s(161), (eq(56,1),s(39))>>s(162), (eq(56,1),s(35))>>s(163), (eq(56,1),s(45))>>s(164), (eq(56,1),s(47))>>s(165), (eq(56,1),s(48))>>s(166), (eq(56,1),s(49))>>s(167), (eq(56,1),s(50))>>s(168), (eq(56,1),s(51))>>s(169), (eq(56,1),s(52))>>s(170), (eq(56,1),s(53))>>s(171), (eq(56,1),s(54))>>s(172), (eq(56,1),s(55))>>s(173), (eq(56,1),s(56))>>s(174), (eq(56,1),s(57))>>s(175), (eq(56,1),s(58))>>s(176), (eq(56,1),s(59))>>s(177), (eq(56,1),s(66))>>s(178), (eq(56,1),s(67))>>s(179), (eq(56,1),s(73))>>s(180), (eq(56,1),s(74))>>s(181), (eq(56,1),s(75))>>s(182), (eq(56,1),s(76))>>s(183), (eq(56,1),s(77))>>s(184), (eq(56,1),s(78))>>s(185), (eq(56,1),s(36))>>s(186)]

#### Simplifying cost structure of CE 56 

#### Simplifying cost structure of CE 51 
 * Renamed intermediate variables: 
[ (eq(52,1),s(25))>>s(187)]

#### Simplifying cost structure of CE 52 

#### Simplifying cost structure of CE 48 
 * Renamed intermediate variables: 
[ (eq(49,1),s(25))>>s(188)]

#### Simplifying cost structure of CE 49 
 * Renamed intermediate variables: 
[ (eq(53,1),s(33))>>s(189), (eq(53,1),aux(64))>>s(190), (eq(53,1),aux(65))>>s(191), (eq(53,1),aux(66))>>s(192), (eq(53,1),aux(67))>>s(193), (eq(53,1),aux(68))>>s(194), (eq(53,1),s(39))>>s(195), (eq(53,1),s(35))>>s(196), (eq(53,1),s(45))>>s(197), (eq(53,1),s(47))>>s(198), (eq(53,1),s(48))>>s(199), (eq(53,1),s(49))>>s(200), (eq(53,1),s(50))>>s(201), (eq(53,1),s(51))>>s(202), (eq(53,1),s(52))>>s(203), (eq(53,1),s(53))>>s(204), (eq(53,1),s(54))>>s(205), (eq(53,1),s(55))>>s(206), (eq(53,1),s(56))>>s(207), (eq(53,1),s(57))>>s(208), (eq(53,1),s(58))>>s(209), (eq(53,1),s(59))>>s(210), (eq(53,1),s(66))>>s(211), (eq(53,1),s(67))>>s(212), (eq(53,1),s(73))>>s(213), (eq(53,1),s(74))>>s(214), (eq(53,1),s(75))>>s(215), (eq(53,1),s(76))>>s(216), (eq(53,1),s(77))>>s(217), (eq(53,1),s(78))>>s(218), (eq(53,1),s(36))>>s(219)]

#### Simplifying cost structure of CE 53 
 * Renamed intermediate variables: 
[ (eq(50,1),s(33))>>s(220), (eq(50,1),aux(64))>>s(221), (eq(50,1),aux(65))>>s(222), (eq(50,1),aux(66))>>s(223), (eq(50,1),aux(67))>>s(224), (eq(50,1),aux(68))>>s(225), (eq(50,1),s(39))>>s(226), (eq(50,1),s(35))>>s(227), (eq(50,1),s(45))>>s(228), (eq(50,1),s(47))>>s(229), (eq(50,1),s(48))>>s(230), (eq(50,1),s(49))>>s(231), (eq(50,1),s(50))>>s(232), (eq(50,1),s(51))>>s(233), (eq(50,1),s(52))>>s(234), (eq(50,1),s(53))>>s(235), (eq(50,1),s(54))>>s(236), (eq(50,1),s(55))>>s(237), (eq(50,1),s(56))>>s(238), (eq(50,1),s(57))>>s(239), (eq(50,1),s(58))>>s(240), (eq(50,1),s(59))>>s(241), (eq(50,1),s(66))>>s(242), (eq(50,1),s(67))>>s(243), (eq(50,1),s(73))>>s(244), (eq(50,1),s(74))>>s(245), (eq(50,1),s(75))>>s(246), (eq(50,1),s(76))>>s(247), (eq(50,1),s(77))>>s(248), (eq(50,1),s(78))>>s(249), (eq(50,1),s(36))>>s(250)]

#### Simplifying cost structure of CE 50 

#### Cost of chains of eval_Perl_scan_vstring_19(V_s,V_PL_bufend,V_pos_1,V_9,V_11,B):
* Chain [47]: 1*s(155)+2
  Such that:s(155) =< -V_s+V_pos_1

  with precondition: [V_9=0,V_11=V_s+1,V_pos_1+1>=V_PL_bufend,V_pos_1>=V_11] 

* Chain [46]: 2
  with precondition: [V_9=0,V_11=V_s+1,V_pos_1+1>=V_PL_bufend,V_11>=V_pos_1+1] 

* Chain [45]: 1*s(162)+58*s(163)+6*s(165)+3*s(166)+2*s(176)+2*s(177)+30*s(178)+15*s(179)+10*s(184)+10*s(185)+2*s(186)+5
  Such that:s(158) =< -V_s+V_PL_bufend
s(157) =< V_PL_bufend-V_pos_1
s(159) =< V_PL_bufend/2-V_pos_1/2
s(160) =< V_pos_1-V_11+1
s(156) =< V_pos_1-V_11+2
s(161) =< 2*V_pos_1-2*V_11+2
s(162) =< s(160)
s(163) =< s(157)
s(164) =< s(157)
s(164) =< s(159)
s(165) =< s(157)
s(166) =< s(157)
s(165) =< s(159)
s(165) =< s(164)
s(167) =< s(157)*2
s(168) =< s(157)-2
s(169) =< max([s(160),s(157),0])+s(157)
s(170) =< s(169)+1
s(171) =< s(163)*s(168)
s(172) =< s(165)*s(167)
s(173) =< s(165)*s(168)
s(174) =< s(165)*s(169)
s(175) =< s(172)+s(172)+s(161)
s(166) =< s(171)+s(173)+s(158)
s(174) =< s(171)+s(173)+s(158)
s(175) =< s(166)*s(170)
s(176) =< s(175)
s(177) =< s(174)
s(178) =< s(157)
s(179) =< s(157)
s(178) =< s(159)
s(180) =< s(178)*s(167)
s(181) =< s(178)*s(168)
s(182) =< s(178)*s(169)
s(183) =< s(180)+s(180)+s(161)
s(179) =< s(171)+s(181)+s(158)
s(182) =< s(171)+s(181)+s(158)
s(183) =< s(179)*s(170)
s(184) =< s(183)
s(185) =< s(182)
s(186) =< s(156)

  with precondition: [V_9=0,V_11=V_s+1,V_PL_bufend>=V_pos_1+2] 

* Chain [44]: 2
  with precondition: [V_11=V_s+1,0>=V_9+1,V_pos_1+1>=V_PL_bufend,V_11>=V_pos_1] 

* Chain [43]: 1*s(187)+2
  Such that:s(187) =< -V_s+V_pos_1

  with precondition: [V_11=V_s+1,0>=V_9+1,V_pos_1+1>=V_PL_bufend,V_pos_1>=V_11+1] 

* Chain [42]: 2
  with precondition: [V_11=V_s+1,V_9>=1,V_pos_1+1>=V_PL_bufend,V_11>=V_pos_1] 

* Chain [41]: 1*s(188)+2
  Such that:s(188) =< -V_s+V_pos_1

  with precondition: [V_11=V_s+1,V_9>=1,V_pos_1+1>=V_PL_bufend,V_pos_1>=V_11+1] 

* Chain [40]: 1*s(195)+58*s(196)+6*s(198)+3*s(199)+2*s(209)+2*s(210)+30*s(211)+15*s(212)+10*s(217)+10*s(218)+2*s(219)+5
  Such that:s(191) =< -V_s+V_PL_bufend
s(189) =< -V_s+V_pos_1
s(190) =< V_PL_bufend-V_pos_1
s(192) =< V_PL_bufend/2-V_pos_1/2
s(193) =< V_pos_1-V_11
s(194) =< 2*V_pos_1-2*V_11
s(195) =< s(193)
s(196) =< s(190)
s(197) =< s(190)
s(197) =< s(192)
s(198) =< s(190)
s(199) =< s(190)
s(198) =< s(192)
s(198) =< s(197)
s(200) =< s(190)*2
s(201) =< s(190)-2
s(202) =< max([s(193),s(190),0])+s(190)
s(203) =< s(202)+1
s(204) =< s(196)*s(201)
s(205) =< s(198)*s(200)
s(206) =< s(198)*s(201)
s(207) =< s(198)*s(202)
s(208) =< s(205)+s(205)+s(194)
s(199) =< s(204)+s(206)+s(191)
s(207) =< s(204)+s(206)+s(191)
s(208) =< s(199)*s(203)
s(209) =< s(208)
s(210) =< s(207)
s(211) =< s(190)
s(212) =< s(190)
s(211) =< s(192)
s(213) =< s(211)*s(200)
s(214) =< s(211)*s(201)
s(215) =< s(211)*s(202)
s(216) =< s(213)+s(213)+s(194)
s(212) =< s(204)+s(214)+s(191)
s(215) =< s(204)+s(214)+s(191)
s(216) =< s(212)*s(203)
s(217) =< s(216)
s(218) =< s(215)
s(219) =< s(189)

  with precondition: [V_11=V_s+1,0>=V_9+1,V_PL_bufend>=V_pos_1+2] 

* Chain [39]: 1*s(226)+58*s(227)+6*s(229)+3*s(230)+2*s(240)+2*s(241)+30*s(242)+15*s(243)+10*s(248)+10*s(249)+2*s(250)+5
  Such that:s(222) =< -V_s+V_PL_bufend
s(220) =< -V_s+V_pos_1
s(221) =< V_PL_bufend-V_pos_1
s(223) =< V_PL_bufend/2-V_pos_1/2
s(224) =< V_pos_1-V_11
s(225) =< 2*V_pos_1-2*V_11
s(226) =< s(224)
s(227) =< s(221)
s(228) =< s(221)
s(228) =< s(223)
s(229) =< s(221)
s(230) =< s(221)
s(229) =< s(223)
s(229) =< s(228)
s(231) =< s(221)*2
s(232) =< s(221)-2
s(233) =< max([s(224),s(221),0])+s(221)
s(234) =< s(233)+1
s(235) =< s(227)*s(232)
s(236) =< s(229)*s(231)
s(237) =< s(229)*s(232)
s(238) =< s(229)*s(233)
s(239) =< s(236)+s(236)+s(225)
s(230) =< s(235)+s(237)+s(222)
s(238) =< s(235)+s(237)+s(222)
s(239) =< s(230)*s(234)
s(240) =< s(239)
s(241) =< s(238)
s(242) =< s(221)
s(243) =< s(221)
s(242) =< s(223)
s(244) =< s(242)*s(231)
s(245) =< s(242)*s(232)
s(246) =< s(242)*s(233)
s(247) =< s(244)+s(244)+s(225)
s(243) =< s(235)+s(245)+s(222)
s(246) =< s(235)+s(245)+s(222)
s(247) =< s(243)*s(234)
s(248) =< s(247)
s(249) =< s(246)
s(250) =< s(220)

  with precondition: [V_11=V_s+1,V_9>=1,V_PL_bufend>=V_pos_1+2] 


#### Simplifying cost structure of CE 75 
 * Renamed intermediate variables: 
[ (eq(67,1),s(155))>>s(251)]

#### Simplifying cost structure of CE 67 
 * Renamed intermediate variables: 
[ (eq(70,1),s(187))>>s(252)]

#### Simplifying cost structure of CE 70 
 * Renamed intermediate variables: 
[ (eq(73,1),s(188))>>s(253)]

#### Simplifying cost structure of CE 73 
 * Joined equivalent variables [s(251),s(252),s(253)] into s(251)

#### Simplifying cost structure of CE 66 

#### Simplifying cost structure of CE 69 

#### Simplifying cost structure of CE 72 
 * Renamed intermediate variables: 
[ (eq(68,1),s(158))>>s(254), (eq(68,1),s(157))>>s(255), (eq(68,1),s(159))>>s(256), (eq(68,1),s(160))>>s(257), (eq(68,1),s(156))>>s(258), (eq(68,1),s(161))>>s(259), (eq(68,1),s(162))>>s(260), (eq(68,1),s(163))>>s(261), (eq(68,1),s(164))>>s(262), (eq(68,1),s(165))>>s(263), (eq(68,1),s(166))>>s(264), (eq(68,1),s(167))>>s(265), (eq(68,1),s(168))>>s(266), (eq(68,1),s(169))>>s(267), (eq(68,1),s(170))>>s(268), (eq(68,1),s(171))>>s(269), (eq(68,1),s(172))>>s(270), (eq(68,1),s(173))>>s(271), (eq(68,1),s(174))>>s(272), (eq(68,1),s(175))>>s(273), (eq(68,1),s(176))>>s(274), (eq(68,1),s(177))>>s(275), (eq(68,1),s(178))>>s(276), (eq(68,1),s(179))>>s(277), (eq(68,1),s(180))>>s(278), (eq(68,1),s(181))>>s(279), (eq(68,1),s(182))>>s(280), (eq(68,1),s(183))>>s(281), (eq(68,1),s(184))>>s(282), (eq(68,1),s(185))>>s(283), (eq(68,1),s(186))>>s(284)]

#### Simplifying cost structure of CE 68 
 * Renamed intermediate variables: 
[ (eq(71,1),s(191))>>s(285), (eq(71,1),s(189))>>s(286), (eq(71,1),s(190))>>s(287), (eq(71,1),s(192))>>s(288), (eq(71,1),s(193))>>s(289), (eq(71,1),s(194))>>s(290), (eq(71,1),s(195))>>s(291), (eq(71,1),s(196))>>s(292), (eq(71,1),s(197))>>s(293), (eq(71,1),s(198))>>s(294), (eq(71,1),s(199))>>s(295), (eq(71,1),s(200))>>s(296), (eq(71,1),s(201))>>s(297), (eq(71,1),s(202))>>s(298), (eq(71,1),s(203))>>s(299), (eq(71,1),s(204))>>s(300), (eq(71,1),s(205))>>s(301), (eq(71,1),s(206))>>s(302), (eq(71,1),s(207))>>s(303), (eq(71,1),s(208))>>s(304), (eq(71,1),s(209))>>s(305), (eq(71,1),s(210))>>s(306), (eq(71,1),s(211))>>s(307), (eq(71,1),s(212))>>s(308), (eq(71,1),s(213))>>s(309), (eq(71,1),s(214))>>s(310), (eq(71,1),s(215))>>s(311), (eq(71,1),s(216))>>s(312), (eq(71,1),s(217))>>s(313), (eq(71,1),s(218))>>s(314), (eq(71,1),s(219))>>s(315)]

#### Simplifying cost structure of CE 71 
 * Joined equivalent variables [aux(70),s(286),s(289)] into aux(70)
 * Joined equivalent variables [s(291),s(315)] into s(291)
 * Renamed intermediate variables: 
[ (eq(74,1),s(222))>>s(316), (eq(74,1),s(220))>>s(317), (eq(74,1),s(221))>>s(318), (eq(74,1),s(223))>>s(319), (eq(74,1),s(224))>>s(320), (eq(74,1),s(225))>>s(321), (eq(74,1),s(226))>>s(322), (eq(74,1),s(227))>>s(323), (eq(74,1),s(228))>>s(324), (eq(74,1),s(229))>>s(325), (eq(74,1),s(230))>>s(326), (eq(74,1),s(231))>>s(327), (eq(74,1),s(232))>>s(328), (eq(74,1),s(233))>>s(329), (eq(74,1),s(234))>>s(330), (eq(74,1),s(235))>>s(331), (eq(74,1),s(236))>>s(332), (eq(74,1),s(237))>>s(333), (eq(74,1),s(238))>>s(334), (eq(74,1),s(239))>>s(335), (eq(74,1),s(240))>>s(336), (eq(74,1),s(241))>>s(337), (eq(74,1),s(242))>>s(338), (eq(74,1),s(243))>>s(339), (eq(74,1),s(244))>>s(340), (eq(74,1),s(245))>>s(341), (eq(74,1),s(246))>>s(342), (eq(74,1),s(247))>>s(343), (eq(74,1),s(248))>>s(344), (eq(74,1),s(249))>>s(345), (eq(74,1),s(250))>>s(346)]

#### Simplifying cost structure of CE 74 
 * Joined equivalent variables [aux(71),s(317),s(320)] into aux(71)
 * Joined equivalent variables [s(322),s(346)] into s(322)
 * Joined equivalent variables [aux(72),s(259),s(290),s(321)] into aux(72)
 * Joined equivalent variables [aux(73),s(254),s(285),s(316)] into aux(73)
 * Joined equivalent variables [aux(74),aux(70),aux(71),s(257)] into aux(74)
 * Joined equivalent variables [aux(75),s(255),s(287),s(318)] into aux(75)
 * Joined equivalent variables [aux(76),s(256),s(288),s(319)] into aux(76)
 * Joined equivalent variables [s(265),s(296),s(327)] into s(265)
 * Joined equivalent variables [s(266),s(297),s(328)] into s(266)
 * Joined equivalent variables [s(267),s(298),s(329)] into s(267)
 * Joined equivalent variables [s(260),s(291),s(322)] into s(260)
 * Joined equivalent variables [s(261),s(292),s(323)] into s(261)
 * Joined equivalent variables [s(276),s(307),s(338)] into s(276)
 * Joined equivalent variables [s(262),s(293),s(324)] into s(262)
 * Joined equivalent variables [s(268),s(299),s(330)] into s(268)
 * Joined equivalent variables [s(269),s(300),s(331)] into s(269)
 * Joined equivalent variables [s(278),s(309),s(340)] into s(278)
 * Joined equivalent variables [s(279),s(310),s(341)] into s(279)
 * Joined equivalent variables [s(263),s(294),s(325)] into s(263)
 * Joined equivalent variables [s(270),s(301),s(332)] into s(270)
 * Joined equivalent variables [s(271),s(302),s(333)] into s(271)
 * Joined equivalent variables [s(280),s(311),s(342)] into s(280)
 * Joined equivalent variables [s(277),s(308),s(339)] into s(277)
 * Joined equivalent variables [s(272),s(303),s(334)] into s(272)
 * Joined equivalent variables [s(281),s(312),s(343)] into s(281)
 * Joined equivalent variables [s(264),s(295),s(326)] into s(264)
 * Joined equivalent variables [s(283),s(314),s(345)] into s(283)
 * Joined equivalent variables [s(273),s(304),s(335)] into s(273)
 * Joined equivalent variables [s(275),s(306),s(337)] into s(275)
 * Joined equivalent variables [s(282),s(313),s(344)] into s(282)
 * Joined equivalent variables [s(274),s(305),s(336)] into s(274)
 * Renamed intermediate variables: 
[ (eq(58,1),s(155))>>s(347)]

#### Simplifying cost structure of CE 58 
 * Renamed intermediate variables: 
[ (eq(61,1),s(187))>>s(348)]

#### Simplifying cost structure of CE 61 
 * Renamed intermediate variables: 
[ (eq(64,1),s(188))>>s(349)]

#### Simplifying cost structure of CE 64 
 * Joined equivalent variables [s(347),s(348),s(349)] into s(347)

#### Simplifying cost structure of CE 57 

#### Simplifying cost structure of CE 60 

#### Simplifying cost structure of CE 63 
 * Renamed intermediate variables: 
[ (eq(59,1),s(158))>>s(350), (eq(59,1),s(157))>>s(351), (eq(59,1),s(159))>>s(352), (eq(59,1),s(160))>>s(353), (eq(59,1),s(156))>>s(354), (eq(59,1),s(161))>>s(355), (eq(59,1),s(162))>>s(356), (eq(59,1),s(163))>>s(357), (eq(59,1),s(164))>>s(358), (eq(59,1),s(165))>>s(359), (eq(59,1),s(166))>>s(360), (eq(59,1),s(167))>>s(361), (eq(59,1),s(168))>>s(362), (eq(59,1),s(169))>>s(363), (eq(59,1),s(170))>>s(364), (eq(59,1),s(171))>>s(365), (eq(59,1),s(172))>>s(366), (eq(59,1),s(173))>>s(367), (eq(59,1),s(174))>>s(368), (eq(59,1),s(175))>>s(369), (eq(59,1),s(176))>>s(370), (eq(59,1),s(177))>>s(371), (eq(59,1),s(178))>>s(372), (eq(59,1),s(179))>>s(373), (eq(59,1),s(180))>>s(374), (eq(59,1),s(181))>>s(375), (eq(59,1),s(182))>>s(376), (eq(59,1),s(183))>>s(377), (eq(59,1),s(184))>>s(378), (eq(59,1),s(185))>>s(379), (eq(59,1),s(186))>>s(380)]

#### Simplifying cost structure of CE 59 
 * Renamed intermediate variables: 
[ (eq(62,1),s(191))>>s(381), (eq(62,1),s(189))>>s(382), (eq(62,1),s(190))>>s(383), (eq(62,1),s(192))>>s(384), (eq(62,1),s(193))>>s(385), (eq(62,1),s(194))>>s(386), (eq(62,1),s(195))>>s(387), (eq(62,1),s(196))>>s(388), (eq(62,1),s(197))>>s(389), (eq(62,1),s(198))>>s(390), (eq(62,1),s(199))>>s(391), (eq(62,1),s(200))>>s(392), (eq(62,1),s(201))>>s(393), (eq(62,1),s(202))>>s(394), (eq(62,1),s(203))>>s(395), (eq(62,1),s(204))>>s(396), (eq(62,1),s(205))>>s(397), (eq(62,1),s(206))>>s(398), (eq(62,1),s(207))>>s(399), (eq(62,1),s(208))>>s(400), (eq(62,1),s(209))>>s(401), (eq(62,1),s(210))>>s(402), (eq(62,1),s(211))>>s(403), (eq(62,1),s(212))>>s(404), (eq(62,1),s(213))>>s(405), (eq(62,1),s(214))>>s(406), (eq(62,1),s(215))>>s(407), (eq(62,1),s(216))>>s(408), (eq(62,1),s(217))>>s(409), (eq(62,1),s(218))>>s(410), (eq(62,1),s(219))>>s(411)]

#### Simplifying cost structure of CE 62 
 * Joined equivalent variables [aux(78),s(382),s(385)] into aux(78)
 * Joined equivalent variables [s(387),s(411)] into s(387)
 * Renamed intermediate variables: 
[ (eq(65,1),s(222))>>s(412), (eq(65,1),s(220))>>s(413), (eq(65,1),s(221))>>s(414), (eq(65,1),s(223))>>s(415), (eq(65,1),s(224))>>s(416), (eq(65,1),s(225))>>s(417), (eq(65,1),s(226))>>s(418), (eq(65,1),s(227))>>s(419), (eq(65,1),s(228))>>s(420), (eq(65,1),s(229))>>s(421), (eq(65,1),s(230))>>s(422), (eq(65,1),s(231))>>s(423), (eq(65,1),s(232))>>s(424), (eq(65,1),s(233))>>s(425), (eq(65,1),s(234))>>s(426), (eq(65,1),s(235))>>s(427), (eq(65,1),s(236))>>s(428), (eq(65,1),s(237))>>s(429), (eq(65,1),s(238))>>s(430), (eq(65,1),s(239))>>s(431), (eq(65,1),s(240))>>s(432), (eq(65,1),s(241))>>s(433), (eq(65,1),s(242))>>s(434), (eq(65,1),s(243))>>s(435), (eq(65,1),s(244))>>s(436), (eq(65,1),s(245))>>s(437), (eq(65,1),s(246))>>s(438), (eq(65,1),s(247))>>s(439), (eq(65,1),s(248))>>s(440), (eq(65,1),s(249))>>s(441), (eq(65,1),s(250))>>s(442)]

#### Simplifying cost structure of CE 65 
 * Joined equivalent variables [aux(79),s(413),s(416)] into aux(79)
 * Joined equivalent variables [s(418),s(442)] into s(418)
 * Joined equivalent variables [aux(80),s(355),s(386),s(417)] into aux(80)
 * Joined equivalent variables [aux(81),s(350),s(381),s(412)] into aux(81)
 * Joined equivalent variables [aux(82),aux(78),aux(79),s(353)] into aux(82)
 * Joined equivalent variables [aux(83),s(351),s(383),s(414)] into aux(83)
 * Joined equivalent variables [aux(84),s(352),s(384),s(415)] into aux(84)
 * Joined equivalent variables [s(361),s(392),s(423)] into s(361)
 * Joined equivalent variables [s(362),s(393),s(424)] into s(362)
 * Joined equivalent variables [s(363),s(394),s(425)] into s(363)
 * Joined equivalent variables [s(356),s(387),s(418)] into s(356)
 * Joined equivalent variables [s(357),s(388),s(419)] into s(357)
 * Joined equivalent variables [s(372),s(403),s(434)] into s(372)
 * Joined equivalent variables [s(358),s(389),s(420)] into s(358)
 * Joined equivalent variables [s(364),s(395),s(426)] into s(364)
 * Joined equivalent variables [s(365),s(396),s(427)] into s(365)
 * Joined equivalent variables [s(374),s(405),s(436)] into s(374)
 * Joined equivalent variables [s(375),s(406),s(437)] into s(375)
 * Joined equivalent variables [s(359),s(390),s(421)] into s(359)
 * Joined equivalent variables [s(366),s(397),s(428)] into s(366)
 * Joined equivalent variables [s(367),s(398),s(429)] into s(367)
 * Joined equivalent variables [s(376),s(407),s(438)] into s(376)
 * Joined equivalent variables [s(373),s(404),s(435)] into s(373)
 * Joined equivalent variables [s(368),s(399),s(430)] into s(368)
 * Joined equivalent variables [s(377),s(408),s(439)] into s(377)
 * Joined equivalent variables [s(360),s(391),s(422)] into s(360)
 * Joined equivalent variables [s(379),s(410),s(441)] into s(379)
 * Joined equivalent variables [s(369),s(400),s(431)] into s(369)
 * Joined equivalent variables [s(371),s(402),s(433)] into s(371)
 * Joined equivalent variables [s(378),s(409),s(440)] into s(378)
 * Joined equivalent variables [s(370),s(401),s(432)] into s(370)

#### Cost of chains of eval_Perl_scan_vstring_15(V_s,V_PL_bufend,V_pos_1,V_7,B):
* Chain [54]: 0
  with precondition: [V_7=0] 

* Chain [53]: 3*s(251)+2
  Such that:aux(69) =< -V_s+V_pos_1
s(251) =< aux(69)

  with precondition: [0>=V_7+1,V_pos_1>=V_s+1,V_pos_1+1>=V_PL_bufend] 

* Chain [52]: 2
  with precondition: [0>=V_7+1,V_pos_1+1>=V_PL_bufend,V_s+1>=V_pos_1] 

* Chain [51]: 7*s(260)+174*s(261)+18*s(263)+9*s(264)+6*s(274)+6*s(275)+90*s(276)+45*s(277)+30*s(282)+30*s(283)+2*s(284)+5
  Such that:s(258) =< -V_s+V_pos_1+1
aux(72) =< -2*V_s+2*V_pos_1
aux(73) =< -V_s+V_PL_bufend
aux(74) =< -V_s+V_pos_1
aux(75) =< V_PL_bufend-V_pos_1
aux(76) =< V_PL_bufend/2-V_pos_1/2
s(260) =< aux(74)
s(261) =< aux(75)
s(262) =< aux(75)
s(262) =< aux(76)
s(263) =< aux(75)
s(264) =< aux(75)
s(263) =< aux(76)
s(263) =< s(262)
s(265) =< aux(75)*2
s(266) =< aux(75)-2
s(267) =< max([aux(74),aux(75),0])+aux(75)
s(268) =< s(267)+1
s(269) =< s(261)*s(266)
s(270) =< s(263)*s(265)
s(271) =< s(263)*s(266)
s(272) =< s(263)*s(267)
s(273) =< s(270)+s(270)+aux(72)
s(264) =< s(269)+s(271)+aux(73)
s(272) =< s(269)+s(271)+aux(73)
s(273) =< s(264)*s(268)
s(274) =< s(273)
s(275) =< s(272)
s(276) =< aux(75)
s(277) =< aux(75)
s(276) =< aux(76)
s(278) =< s(276)*s(265)
s(279) =< s(276)*s(266)
s(280) =< s(276)*s(267)
s(281) =< s(278)+s(278)+aux(72)
s(277) =< s(269)+s(279)+aux(73)
s(280) =< s(269)+s(279)+aux(73)
s(281) =< s(277)*s(268)
s(282) =< s(281)
s(283) =< s(280)
s(284) =< s(258)

  with precondition: [0>=V_7+1,V_PL_bufend>=V_pos_1+2] 

* Chain [50]: 3*s(347)+2
  Such that:aux(77) =< -V_s+V_pos_1
s(347) =< aux(77)

  with precondition: [V_7>=1,V_pos_1>=V_s+1,V_pos_1+1>=V_PL_bufend] 

* Chain [49]: 2
  with precondition: [V_7>=1,V_pos_1+1>=V_PL_bufend,V_s+1>=V_pos_1] 

* Chain [48]: 7*s(356)+174*s(357)+18*s(359)+9*s(360)+6*s(370)+6*s(371)+90*s(372)+45*s(373)+30*s(378)+30*s(379)+2*s(380)+5
  Such that:s(354) =< -V_s+V_pos_1+1
aux(80) =< -2*V_s+2*V_pos_1
aux(81) =< -V_s+V_PL_bufend
aux(82) =< -V_s+V_pos_1
aux(83) =< V_PL_bufend-V_pos_1
aux(84) =< V_PL_bufend/2-V_pos_1/2
s(356) =< aux(82)
s(357) =< aux(83)
s(358) =< aux(83)
s(358) =< aux(84)
s(359) =< aux(83)
s(360) =< aux(83)
s(359) =< aux(84)
s(359) =< s(358)
s(361) =< aux(83)*2
s(362) =< aux(83)-2
s(363) =< max([aux(82),aux(83),0])+aux(83)
s(364) =< s(363)+1
s(365) =< s(357)*s(362)
s(366) =< s(359)*s(361)
s(367) =< s(359)*s(362)
s(368) =< s(359)*s(363)
s(369) =< s(366)+s(366)+aux(80)
s(360) =< s(365)+s(367)+aux(81)
s(368) =< s(365)+s(367)+aux(81)
s(369) =< s(360)*s(364)
s(370) =< s(369)
s(371) =< s(368)
s(372) =< aux(83)
s(373) =< aux(83)
s(372) =< aux(84)
s(374) =< s(372)*s(361)
s(375) =< s(372)*s(362)
s(376) =< s(372)*s(363)
s(377) =< s(374)+s(374)+aux(80)
s(373) =< s(365)+s(375)+aux(81)
s(376) =< s(365)+s(375)+aux(81)
s(377) =< s(373)*s(364)
s(378) =< s(377)
s(379) =< s(376)
s(380) =< s(354)

  with precondition: [V_7>=1,V_PL_bufend>=V_pos_1+2] 

 * Renamed intermediate variables: 
[ (eq(116,1),it(21))>>s(443)]

#### Simplifying cost structure of CE 116 
 * Renamed intermediate variables: 
[ (eq(117,1),it(21))>>s(444)]
 * Renamed intermediate variables: 
[ (eq(117,2),aux(69))>>s(445), (eq(117,2),s(251))>>s(446)]

#### Simplifying cost structure of CE 117 
 * Joined equivalent variables [aux(85),s(445)] into aux(85)
 * Joined equivalent variables [s(444),s(446)] into s(444)
 * Renamed intermediate variables: 
[ (eq(118,1),it(21))>>s(447)]

#### Simplifying cost structure of CE 118 
 * Renamed intermediate variables: 
[ (eq(119,1),it(21))>>s(448)]
 * Renamed intermediate variables: 
[ (eq(119,2),aux(77))>>s(449), (eq(119,2),s(347))>>s(450)]

#### Simplifying cost structure of CE 119 
 * Joined equivalent variables [aux(86),s(449)] into aux(86)
 * Joined equivalent variables [s(448),s(450)] into s(448)
 * Renamed intermediate variables: 
[ (eq(120,1),it(21))>>s(451)]

#### Simplifying cost structure of CE 120 

#### Simplifying cost structure of CE 124 

#### Simplifying cost structure of CE 125 
 * Renamed intermediate variables: 
[ (eq(126,2),s(258))>>s(452), (eq(126,2),aux(72))>>s(453), (eq(126,2),aux(73))>>s(454), (eq(126,2),aux(74))>>s(455), (eq(126,2),aux(75))>>s(456), (eq(126,2),aux(76))>>s(457), (eq(126,2),s(260))>>s(458), (eq(126,2),s(261))>>s(459), (eq(126,2),s(262))>>s(460), (eq(126,2),s(263))>>s(461), (eq(126,2),s(264))>>s(462), (eq(126,2),s(265))>>s(463), (eq(126,2),s(266))>>s(464), (eq(126,2),s(267))>>s(465), (eq(126,2),s(268))>>s(466), (eq(126,2),s(269))>>s(467), (eq(126,2),s(270))>>s(468), (eq(126,2),s(271))>>s(469), (eq(126,2),s(272))>>s(470), (eq(126,2),s(273))>>s(471), (eq(126,2),s(274))>>s(472), (eq(126,2),s(275))>>s(473), (eq(126,2),s(276))>>s(474), (eq(126,2),s(277))>>s(475), (eq(126,2),s(278))>>s(476), (eq(126,2),s(279))>>s(477), (eq(126,2),s(280))>>s(478), (eq(126,2),s(281))>>s(479), (eq(126,2),s(282))>>s(480), (eq(126,2),s(283))>>s(481), (eq(126,2),s(284))>>s(482)]

#### Simplifying cost structure of CE 126 
 * Joined equivalent variables [aux(87),s(453),s(455)] into aux(87)
 * Joined equivalent variables [aux(88),s(454),s(456)] into aux(88)

#### Simplifying cost structure of CE 127 
 * Renamed intermediate variables: 
[ (eq(128,2),s(354))>>s(483), (eq(128,2),aux(80))>>s(484), (eq(128,2),aux(81))>>s(485), (eq(128,2),aux(82))>>s(486), (eq(128,2),aux(83))>>s(487), (eq(128,2),aux(84))>>s(488), (eq(128,2),s(356))>>s(489), (eq(128,2),s(357))>>s(490), (eq(128,2),s(358))>>s(491), (eq(128,2),s(359))>>s(492), (eq(128,2),s(360))>>s(493), (eq(128,2),s(361))>>s(494), (eq(128,2),s(362))>>s(495), (eq(128,2),s(363))>>s(496), (eq(128,2),s(364))>>s(497), (eq(128,2),s(365))>>s(498), (eq(128,2),s(366))>>s(499), (eq(128,2),s(367))>>s(500), (eq(128,2),s(368))>>s(501), (eq(128,2),s(369))>>s(502), (eq(128,2),s(370))>>s(503), (eq(128,2),s(371))>>s(504), (eq(128,2),s(372))>>s(505), (eq(128,2),s(373))>>s(506), (eq(128,2),s(374))>>s(507), (eq(128,2),s(375))>>s(508), (eq(128,2),s(376))>>s(509), (eq(128,2),s(377))>>s(510), (eq(128,2),s(378))>>s(511), (eq(128,2),s(379))>>s(512), (eq(128,2),s(380))>>s(513)]

#### Simplifying cost structure of CE 128 
 * Joined equivalent variables [aux(89),s(484),s(486)] into aux(89)
 * Joined equivalent variables [aux(90),s(485),s(487)] into aux(90)
 * Renamed intermediate variables: 
[ (eq(129,1),it(21))>>s(514)]

#### Simplifying cost structure of CE 129 
 * Renamed intermediate variables: 
[ (eq(130,1),it(21))>>s(515)]
 * Renamed intermediate variables: 
[ (eq(130,2),aux(69))>>s(516), (eq(130,2),s(251))>>s(517)]

#### Simplifying cost structure of CE 130 
 * Joined equivalent variables [aux(91),s(516)] into aux(91)
 * Joined equivalent variables [s(515),s(517)] into s(515)
 * Renamed intermediate variables: 
[ (eq(132,1),it(21))>>s(518)]
 * Renamed intermediate variables: 
[ (eq(132,2),s(258))>>s(519), (eq(132,2),aux(72))>>s(520), (eq(132,2),aux(73))>>s(521), (eq(132,2),aux(74))>>s(522), (eq(132,2),aux(75))>>s(523), (eq(132,2),aux(76))>>s(524), (eq(132,2),s(260))>>s(525), (eq(132,2),s(261))>>s(526), (eq(132,2),s(262))>>s(527), (eq(132,2),s(263))>>s(528), (eq(132,2),s(264))>>s(529), (eq(132,2),s(265))>>s(530), (eq(132,2),s(266))>>s(531), (eq(132,2),s(267))>>s(532), (eq(132,2),s(268))>>s(533), (eq(132,2),s(269))>>s(534), (eq(132,2),s(270))>>s(535), (eq(132,2),s(271))>>s(536), (eq(132,2),s(272))>>s(537), (eq(132,2),s(273))>>s(538), (eq(132,2),s(274))>>s(539), (eq(132,2),s(275))>>s(540), (eq(132,2),s(276))>>s(541), (eq(132,2),s(277))>>s(542), (eq(132,2),s(278))>>s(543), (eq(132,2),s(279))>>s(544), (eq(132,2),s(280))>>s(545), (eq(132,2),s(281))>>s(546), (eq(132,2),s(282))>>s(547), (eq(132,2),s(283))>>s(548), (eq(132,2),s(284))>>s(549)]

#### Simplifying cost structure of CE 132 
 * Joined equivalent variables [aux(92),s(520),s(523),s(524)] into aux(92)
 * Joined equivalent variables [aux(93),s(521),s(522)] into aux(93)
 * Joined equivalent variables [aux(92),s(527)] into aux(92)
 * Joined equivalent variables [s(526),s(541)] into s(526)
 * Joined equivalent variables [s(518),s(525)] into s(518)
 * Joined equivalent variables [s(534),s(544)] into s(534)
 * Joined equivalent variables [s(526),s(528)] into s(526)
 * Joined equivalent variables [s(535),s(543)] into s(535)
 * Renamed intermediate variables: 
[ (eq(133,1),it(21))>>s(550)]
 * Renamed intermediate variables: 
[ (eq(133,2),aux(77))>>s(551), (eq(133,2),s(347))>>s(552)]

#### Simplifying cost structure of CE 133 
 * Joined equivalent variables [aux(94),s(551)] into aux(94)
 * Joined equivalent variables [s(550),s(552)] into s(550)
 * Renamed intermediate variables: 
[ (eq(135,1),it(21))>>s(553)]
 * Renamed intermediate variables: 
[ (eq(135,2),s(354))>>s(554), (eq(135,2),aux(80))>>s(555), (eq(135,2),aux(81))>>s(556), (eq(135,2),aux(82))>>s(557), (eq(135,2),aux(83))>>s(558), (eq(135,2),aux(84))>>s(559), (eq(135,2),s(356))>>s(560), (eq(135,2),s(357))>>s(561), (eq(135,2),s(358))>>s(562), (eq(135,2),s(359))>>s(563), (eq(135,2),s(360))>>s(564), (eq(135,2),s(361))>>s(565), (eq(135,2),s(362))>>s(566), (eq(135,2),s(363))>>s(567), (eq(135,2),s(364))>>s(568), (eq(135,2),s(365))>>s(569), (eq(135,2),s(366))>>s(570), (eq(135,2),s(367))>>s(571), (eq(135,2),s(368))>>s(572), (eq(135,2),s(369))>>s(573), (eq(135,2),s(370))>>s(574), (eq(135,2),s(371))>>s(575), (eq(135,2),s(372))>>s(576), (eq(135,2),s(373))>>s(577), (eq(135,2),s(374))>>s(578), (eq(135,2),s(375))>>s(579), (eq(135,2),s(376))>>s(580), (eq(135,2),s(377))>>s(581), (eq(135,2),s(378))>>s(582), (eq(135,2),s(379))>>s(583), (eq(135,2),s(380))>>s(584)]

#### Simplifying cost structure of CE 135 
 * Joined equivalent variables [aux(95),s(555),s(558),s(559)] into aux(95)
 * Joined equivalent variables [aux(96),s(556),s(557)] into aux(96)
 * Joined equivalent variables [aux(95),s(562)] into aux(95)
 * Joined equivalent variables [s(561),s(576)] into s(561)
 * Joined equivalent variables [s(553),s(560)] into s(553)
 * Joined equivalent variables [s(569),s(579)] into s(569)
 * Joined equivalent variables [s(561),s(563)] into s(561)
 * Joined equivalent variables [s(570),s(578)] into s(570)
 * Joined equivalent variables [aux(97),s(452),s(483)] into aux(97)
 * Joined equivalent variables [aux(98),aux(92),aux(95)] into aux(98)
 * Joined equivalent variables [aux(99),aux(85),aux(86),aux(88),aux(90),aux(91),aux(93),aux(94),aux(96)] into aux(99)
 * Joined equivalent variables [aux(100),s(519),s(554)] into aux(100)
 * Joined equivalent variables [aux(101),s(457),s(488)] into aux(101)
 * Joined equivalent variables [s(534),s(536)] into s(534)
 * Joined equivalent variables [s(569),s(571)] into s(569)
 * Joined equivalent variables [s(447),s(451)] into s(447)
 * Joined equivalent variables [s(443),s(514)] into s(443)
 * Joined equivalent variables [s(537),s(545)] into s(537)
 * Joined equivalent variables [s(572),s(580)] into s(572)
 * Joined equivalent variables [s(463),s(494)] into s(463)
 * Joined equivalent variables [s(464),s(495)] into s(464)
 * Joined equivalent variables [s(465),s(496)] into s(465)
 * Joined equivalent variables [s(530),s(565)] into s(530)
 * Joined equivalent variables [s(531),s(566)] into s(531)
 * Joined equivalent variables [s(532),s(567)] into s(532)
 * Joined equivalent variables [s(529),s(542)] into s(529)
 * Joined equivalent variables [s(564),s(577)] into s(564)
 * Joined equivalent variables [s(447),s(482),s(513)] into s(447)
 * Joined equivalent variables [s(526),s(561)] into s(526)
 * Joined equivalent variables [s(443),s(444),s(448),s(459),s(490),s(515),s(518),s(550),s(553)] into s(443)
 * Joined equivalent variables [s(474),s(505)] into s(474)
 * Joined equivalent variables [s(549),s(584)] into s(549)
 * Joined equivalent variables [s(460),s(491)] into s(460)
 * Joined equivalent variables [s(466),s(497)] into s(466)
 * Joined equivalent variables [s(476),s(507)] into s(476)
 * Joined equivalent variables [s(477),s(508)] into s(477)
 * Joined equivalent variables [s(533),s(568)] into s(533)
 * Joined equivalent variables [s(534),s(569)] into s(534)
 * Joined equivalent variables [s(535),s(570)] into s(535)
 * Joined equivalent variables [s(538),s(546)] into s(538)
 * Joined equivalent variables [s(573),s(581)] into s(573)
 * Joined equivalent variables [s(467),s(498)] into s(467)
 * Joined equivalent variables [s(461),s(492)] into s(461)
 * Joined equivalent variables [s(540),s(548)] into s(540)
 * Joined equivalent variables [s(575),s(583)] into s(575)
 * Joined equivalent variables [s(468),s(499)] into s(468)
 * Joined equivalent variables [s(469),s(500)] into s(469)
 * Joined equivalent variables [s(478),s(509)] into s(478)
 * Joined equivalent variables [s(537),s(572)] into s(537)
 * Joined equivalent variables [s(475),s(506)] into s(475)
 * Joined equivalent variables [s(529),s(564)] into s(529)
 * Joined equivalent variables [s(539),s(547)] into s(539)
 * Joined equivalent variables [s(574),s(582)] into s(574)
 * Joined equivalent variables [s(470),s(501)] into s(470)
 * Joined equivalent variables [s(479),s(510)] into s(479)
 * Joined equivalent variables [s(538),s(573)] into s(538)
 * Joined equivalent variables [s(462),s(493)] into s(462)
 * Joined equivalent variables [s(481),s(512)] into s(481)
 * Joined equivalent variables [s(540),s(575)] into s(540)
 * Joined equivalent variables [s(471),s(502)] into s(471)
 * Joined equivalent variables [s(473),s(504)] into s(473)
 * Joined equivalent variables [s(480),s(511)] into s(480)
 * Joined equivalent variables [s(539),s(574)] into s(539)
 * Joined equivalent variables [s(472),s(503)] into s(472)
 * Renamed intermediate variables: 
[ (eq(131,1),it(21))>>s(585)]

#### Simplifying cost structure of CE 131 
 * Renamed intermediate variables: 
[ (eq(134,1),it(21))>>s(586)]

#### Simplifying cost structure of CE 134 
 * Joined equivalent variables [s(585),s(586)] into s(585)

#### Simplifying cost structure of CE 121 

#### Simplifying cost structure of CE 122 

#### Simplifying cost structure of CE 123 
 * Renamed intermediate variables: 
[ (eq(96,1),it(21))>>s(587)]

#### Simplifying cost structure of CE 96 
 * Renamed intermediate variables: 
[ (eq(97,1),it(21))>>s(588)]
 * Renamed intermediate variables: 
[ (eq(97,2),aux(69))>>s(589), (eq(97,2),s(251))>>s(590)]

#### Simplifying cost structure of CE 97 
 * Joined equivalent variables [aux(103),s(589)] into aux(103)
 * Joined equivalent variables [s(588),s(590)] into s(588)
 * Renamed intermediate variables: 
[ (eq(98,1),it(21))>>s(591)]
 * Renamed intermediate variables: 
[ (eq(98,2),aux(77))>>s(592), (eq(98,2),s(347))>>s(593)]

#### Simplifying cost structure of CE 98 
 * Joined equivalent variables [aux(104),s(592)] into aux(104)
 * Joined equivalent variables [s(591),s(593)] into s(591)

#### Simplifying cost structure of CE 104 
 * Renamed intermediate variables: 
[ (eq(105,2),aux(69))>>s(594), (eq(105,2),s(251))>>s(595)]

#### Simplifying cost structure of CE 105 

#### Simplifying cost structure of CE 106 
 * Renamed intermediate variables: 
[ (eq(107,2),s(258))>>s(596), (eq(107,2),aux(72))>>s(597), (eq(107,2),aux(73))>>s(598), (eq(107,2),aux(74))>>s(599), (eq(107,2),aux(75))>>s(600), (eq(107,2),aux(76))>>s(601), (eq(107,2),s(260))>>s(602), (eq(107,2),s(261))>>s(603), (eq(107,2),s(262))>>s(604), (eq(107,2),s(263))>>s(605), (eq(107,2),s(264))>>s(606), (eq(107,2),s(265))>>s(607), (eq(107,2),s(266))>>s(608), (eq(107,2),s(267))>>s(609), (eq(107,2),s(268))>>s(610), (eq(107,2),s(269))>>s(611), (eq(107,2),s(270))>>s(612), (eq(107,2),s(271))>>s(613), (eq(107,2),s(272))>>s(614), (eq(107,2),s(273))>>s(615), (eq(107,2),s(274))>>s(616), (eq(107,2),s(275))>>s(617), (eq(107,2),s(276))>>s(618), (eq(107,2),s(277))>>s(619), (eq(107,2),s(278))>>s(620), (eq(107,2),s(279))>>s(621), (eq(107,2),s(280))>>s(622), (eq(107,2),s(281))>>s(623), (eq(107,2),s(282))>>s(624), (eq(107,2),s(283))>>s(625), (eq(107,2),s(284))>>s(626)]

#### Simplifying cost structure of CE 107 
 * Joined equivalent variables [aux(105),s(596),s(597)] into aux(105)
 * Joined equivalent variables [aux(106),s(598),s(600)] into aux(106)
 * Renamed intermediate variables: 
[ (eq(108,2),aux(77))>>s(627), (eq(108,2),s(347))>>s(628)]

#### Simplifying cost structure of CE 108 

#### Simplifying cost structure of CE 109 
 * Renamed intermediate variables: 
[ (eq(110,2),s(354))>>s(629), (eq(110,2),aux(80))>>s(630), (eq(110,2),aux(81))>>s(631), (eq(110,2),aux(82))>>s(632), (eq(110,2),aux(83))>>s(633), (eq(110,2),aux(84))>>s(634), (eq(110,2),s(356))>>s(635), (eq(110,2),s(357))>>s(636), (eq(110,2),s(358))>>s(637), (eq(110,2),s(359))>>s(638), (eq(110,2),s(360))>>s(639), (eq(110,2),s(361))>>s(640), (eq(110,2),s(362))>>s(641), (eq(110,2),s(363))>>s(642), (eq(110,2),s(364))>>s(643), (eq(110,2),s(365))>>s(644), (eq(110,2),s(366))>>s(645), (eq(110,2),s(367))>>s(646), (eq(110,2),s(368))>>s(647), (eq(110,2),s(369))>>s(648), (eq(110,2),s(370))>>s(649), (eq(110,2),s(371))>>s(650), (eq(110,2),s(372))>>s(651), (eq(110,2),s(373))>>s(652), (eq(110,2),s(374))>>s(653), (eq(110,2),s(375))>>s(654), (eq(110,2),s(376))>>s(655), (eq(110,2),s(377))>>s(656), (eq(110,2),s(378))>>s(657), (eq(110,2),s(379))>>s(658), (eq(110,2),s(380))>>s(659)]

#### Simplifying cost structure of CE 110 
 * Joined equivalent variables [aux(107),s(629),s(630)] into aux(107)
 * Joined equivalent variables [aux(108),s(631),s(633)] into aux(108)
 * Renamed intermediate variables: 
[ (eq(111,1),it(21))>>s(660)]

#### Simplifying cost structure of CE 111 
 * Renamed intermediate variables: 
[ (eq(112,1),it(21))>>s(661)]
 * Renamed intermediate variables: 
[ (eq(112,2),aux(69))>>s(662), (eq(112,2),s(251))>>s(663)]

#### Simplifying cost structure of CE 112 
 * Joined equivalent variables [aux(109),s(662)] into aux(109)
 * Joined equivalent variables [s(661),s(663)] into s(661)
 * Renamed intermediate variables: 
[ (eq(113,1),it(21))>>s(664)]
 * Renamed intermediate variables: 
[ (eq(113,2),s(258))>>s(665), (eq(113,2),aux(72))>>s(666), (eq(113,2),aux(73))>>s(667), (eq(113,2),aux(74))>>s(668), (eq(113,2),aux(75))>>s(669), (eq(113,2),aux(76))>>s(670), (eq(113,2),s(260))>>s(671), (eq(113,2),s(261))>>s(672), (eq(113,2),s(262))>>s(673), (eq(113,2),s(263))>>s(674), (eq(113,2),s(264))>>s(675), (eq(113,2),s(265))>>s(676), (eq(113,2),s(266))>>s(677), (eq(113,2),s(267))>>s(678), (eq(113,2),s(268))>>s(679), (eq(113,2),s(269))>>s(680), (eq(113,2),s(270))>>s(681), (eq(113,2),s(271))>>s(682), (eq(113,2),s(272))>>s(683), (eq(113,2),s(273))>>s(684), (eq(113,2),s(274))>>s(685), (eq(113,2),s(275))>>s(686), (eq(113,2),s(276))>>s(687), (eq(113,2),s(277))>>s(688), (eq(113,2),s(278))>>s(689), (eq(113,2),s(279))>>s(690), (eq(113,2),s(280))>>s(691), (eq(113,2),s(281))>>s(692), (eq(113,2),s(282))>>s(693), (eq(113,2),s(283))>>s(694), (eq(113,2),s(284))>>s(695)]

#### Simplifying cost structure of CE 113 
 * Joined equivalent variables [aux(110),s(666),s(669),s(670)] into aux(110)
 * Joined equivalent variables [aux(111),s(667),s(668)] into aux(111)
 * Joined equivalent variables [aux(110),s(673)] into aux(110)
 * Joined equivalent variables [s(672),s(687)] into s(672)
 * Joined equivalent variables [s(664),s(671)] into s(664)
 * Joined equivalent variables [s(680),s(690)] into s(680)
 * Joined equivalent variables [s(672),s(674)] into s(672)
 * Joined equivalent variables [s(681),s(689)] into s(681)
 * Renamed intermediate variables: 
[ (eq(114,1),it(21))>>s(696)]
 * Renamed intermediate variables: 
[ (eq(114,2),aux(77))>>s(697), (eq(114,2),s(347))>>s(698)]

#### Simplifying cost structure of CE 114 
 * Joined equivalent variables [aux(112),s(697)] into aux(112)
 * Joined equivalent variables [s(696),s(698)] into s(696)
 * Renamed intermediate variables: 
[ (eq(115,1),it(21))>>s(699)]
 * Renamed intermediate variables: 
[ (eq(115,2),s(354))>>s(700), (eq(115,2),aux(80))>>s(701), (eq(115,2),aux(81))>>s(702), (eq(115,2),aux(82))>>s(703), (eq(115,2),aux(83))>>s(704), (eq(115,2),aux(84))>>s(705), (eq(115,2),s(356))>>s(706), (eq(115,2),s(357))>>s(707), (eq(115,2),s(358))>>s(708), (eq(115,2),s(359))>>s(709), (eq(115,2),s(360))>>s(710), (eq(115,2),s(361))>>s(711), (eq(115,2),s(362))>>s(712), (eq(115,2),s(363))>>s(713), (eq(115,2),s(364))>>s(714), (eq(115,2),s(365))>>s(715), (eq(115,2),s(366))>>s(716), (eq(115,2),s(367))>>s(717), (eq(115,2),s(368))>>s(718), (eq(115,2),s(369))>>s(719), (eq(115,2),s(370))>>s(720), (eq(115,2),s(371))>>s(721), (eq(115,2),s(372))>>s(722), (eq(115,2),s(373))>>s(723), (eq(115,2),s(374))>>s(724), (eq(115,2),s(375))>>s(725), (eq(115,2),s(376))>>s(726), (eq(115,2),s(377))>>s(727), (eq(115,2),s(378))>>s(728), (eq(115,2),s(379))>>s(729), (eq(115,2),s(380))>>s(730)]

#### Simplifying cost structure of CE 115 
 * Joined equivalent variables [aux(113),s(701),s(704),s(705)] into aux(113)
 * Joined equivalent variables [aux(114),s(702),s(703)] into aux(114)
 * Joined equivalent variables [aux(113),s(708)] into aux(113)
 * Joined equivalent variables [s(707),s(722)] into s(707)
 * Joined equivalent variables [s(699),s(706)] into s(699)
 * Joined equivalent variables [s(715),s(725)] into s(715)
 * Joined equivalent variables [s(707),s(709)] into s(707)
 * Joined equivalent variables [s(716),s(724)] into s(716)
 * Joined equivalent variables [aux(115),s(594),s(599),s(627),s(632)] into aux(115)
 * Joined equivalent variables [aux(116),aux(105),aux(107)] into aux(116)
 * Joined equivalent variables [aux(117),aux(110),aux(113)] into aux(117)
 * Joined equivalent variables [aux(118),aux(103),aux(104),aux(106),aux(108),aux(109),aux(111),aux(112),aux(114)] into aux(118)
 * Joined equivalent variables [aux(119),s(665),s(700)] into aux(119)
 * Joined equivalent variables [aux(120),s(601),s(634)] into aux(120)
 * Joined equivalent variables [s(680),s(682)] into s(680)
 * Joined equivalent variables [s(715),s(717)] into s(715)
 * Joined equivalent variables [s(587),s(660)] into s(587)
 * Joined equivalent variables [s(683),s(691)] into s(683)
 * Joined equivalent variables [s(718),s(726)] into s(718)
 * Joined equivalent variables [s(607),s(640)] into s(607)
 * Joined equivalent variables [s(608),s(641)] into s(608)
 * Joined equivalent variables [s(609),s(642)] into s(609)
 * Joined equivalent variables [s(676),s(711)] into s(676)
 * Joined equivalent variables [s(677),s(712)] into s(677)
 * Joined equivalent variables [s(678),s(713)] into s(678)
 * Joined equivalent variables [s(675),s(688)] into s(675)
 * Joined equivalent variables [s(710),s(723)] into s(710)
 * Joined equivalent variables [s(595),s(602),s(628),s(635)] into s(595)
 * Joined equivalent variables [s(626),s(659)] into s(626)
 * Joined equivalent variables [s(672),s(707)] into s(672)
 * Joined equivalent variables [s(587),s(588),s(591),s(603),s(636),s(661),s(664),s(696),s(699)] into s(587)
 * Joined equivalent variables [s(618),s(651)] into s(618)
 * Joined equivalent variables [s(695),s(730)] into s(695)
 * Joined equivalent variables [s(604),s(637)] into s(604)
 * Joined equivalent variables [s(610),s(643)] into s(610)
 * Joined equivalent variables [s(620),s(653)] into s(620)
 * Joined equivalent variables [s(621),s(654)] into s(621)
 * Joined equivalent variables [s(679),s(714)] into s(679)
 * Joined equivalent variables [s(680),s(715)] into s(680)
 * Joined equivalent variables [s(681),s(716)] into s(681)
 * Joined equivalent variables [s(684),s(692)] into s(684)
 * Joined equivalent variables [s(719),s(727)] into s(719)
 * Joined equivalent variables [s(611),s(644)] into s(611)
 * Joined equivalent variables [s(605),s(638)] into s(605)
 * Joined equivalent variables [s(686),s(694)] into s(686)
 * Joined equivalent variables [s(721),s(729)] into s(721)
 * Joined equivalent variables [s(612),s(645)] into s(612)
 * Joined equivalent variables [s(613),s(646)] into s(613)
 * Joined equivalent variables [s(622),s(655)] into s(622)
 * Joined equivalent variables [s(683),s(718)] into s(683)
 * Joined equivalent variables [s(619),s(652)] into s(619)
 * Joined equivalent variables [s(675),s(710)] into s(675)
 * Joined equivalent variables [s(685),s(693)] into s(685)
 * Joined equivalent variables [s(720),s(728)] into s(720)
 * Joined equivalent variables [s(614),s(647)] into s(614)
 * Joined equivalent variables [s(623),s(656)] into s(623)
 * Joined equivalent variables [s(684),s(719)] into s(684)
 * Joined equivalent variables [s(606),s(639)] into s(606)
 * Joined equivalent variables [s(625),s(658)] into s(625)
 * Joined equivalent variables [s(686),s(721)] into s(686)
 * Joined equivalent variables [s(615),s(648)] into s(615)
 * Joined equivalent variables [s(617),s(650)] into s(617)
 * Joined equivalent variables [s(624),s(657)] into s(624)
 * Joined equivalent variables [s(685),s(720)] into s(685)
 * Joined equivalent variables [s(616),s(649)] into s(616)
 * Renamed intermediate variables: 
[ (eq(76,1),it(21))>>s(731)]

#### Simplifying cost structure of CE 76 
 * Renamed intermediate variables: 
[ (eq(77,1),it(21))>>s(732)]
 * Renamed intermediate variables: 
[ (eq(77,2),aux(69))>>s(733), (eq(77,2),s(251))>>s(734)]

#### Simplifying cost structure of CE 77 
 * Joined equivalent variables [aux(121),s(733)] into aux(121)
 * Joined equivalent variables [s(732),s(734)] into s(732)
 * Renamed intermediate variables: 
[ (eq(78,1),it(21))>>s(735)]
 * Renamed intermediate variables: 
[ (eq(78,2),aux(77))>>s(736), (eq(78,2),s(347))>>s(737)]

#### Simplifying cost structure of CE 78 
 * Joined equivalent variables [aux(122),s(736)] into aux(122)
 * Joined equivalent variables [s(735),s(737)] into s(735)

#### Simplifying cost structure of CE 84 
 * Renamed intermediate variables: 
[ (eq(85,2),aux(69))>>s(738), (eq(85,2),s(251))>>s(739)]

#### Simplifying cost structure of CE 85 

#### Simplifying cost structure of CE 86 
 * Renamed intermediate variables: 
[ (eq(87,2),s(258))>>s(740), (eq(87,2),aux(72))>>s(741), (eq(87,2),aux(73))>>s(742), (eq(87,2),aux(74))>>s(743), (eq(87,2),aux(75))>>s(744), (eq(87,2),aux(76))>>s(745), (eq(87,2),s(260))>>s(746), (eq(87,2),s(261))>>s(747), (eq(87,2),s(262))>>s(748), (eq(87,2),s(263))>>s(749), (eq(87,2),s(264))>>s(750), (eq(87,2),s(265))>>s(751), (eq(87,2),s(266))>>s(752), (eq(87,2),s(267))>>s(753), (eq(87,2),s(268))>>s(754), (eq(87,2),s(269))>>s(755), (eq(87,2),s(270))>>s(756), (eq(87,2),s(271))>>s(757), (eq(87,2),s(272))>>s(758), (eq(87,2),s(273))>>s(759), (eq(87,2),s(274))>>s(760), (eq(87,2),s(275))>>s(761), (eq(87,2),s(276))>>s(762), (eq(87,2),s(277))>>s(763), (eq(87,2),s(278))>>s(764), (eq(87,2),s(279))>>s(765), (eq(87,2),s(280))>>s(766), (eq(87,2),s(281))>>s(767), (eq(87,2),s(282))>>s(768), (eq(87,2),s(283))>>s(769), (eq(87,2),s(284))>>s(770)]

#### Simplifying cost structure of CE 87 
 * Joined equivalent variables [aux(123),s(740),s(741)] into aux(123)
 * Joined equivalent variables [aux(124),s(742),s(744)] into aux(124)
 * Renamed intermediate variables: 
[ (eq(88,2),aux(77))>>s(771), (eq(88,2),s(347))>>s(772)]

#### Simplifying cost structure of CE 88 

#### Simplifying cost structure of CE 89 
 * Renamed intermediate variables: 
[ (eq(90,2),s(354))>>s(773), (eq(90,2),aux(80))>>s(774), (eq(90,2),aux(81))>>s(775), (eq(90,2),aux(82))>>s(776), (eq(90,2),aux(83))>>s(777), (eq(90,2),aux(84))>>s(778), (eq(90,2),s(356))>>s(779), (eq(90,2),s(357))>>s(780), (eq(90,2),s(358))>>s(781), (eq(90,2),s(359))>>s(782), (eq(90,2),s(360))>>s(783), (eq(90,2),s(361))>>s(784), (eq(90,2),s(362))>>s(785), (eq(90,2),s(363))>>s(786), (eq(90,2),s(364))>>s(787), (eq(90,2),s(365))>>s(788), (eq(90,2),s(366))>>s(789), (eq(90,2),s(367))>>s(790), (eq(90,2),s(368))>>s(791), (eq(90,2),s(369))>>s(792), (eq(90,2),s(370))>>s(793), (eq(90,2),s(371))>>s(794), (eq(90,2),s(372))>>s(795), (eq(90,2),s(373))>>s(796), (eq(90,2),s(374))>>s(797), (eq(90,2),s(375))>>s(798), (eq(90,2),s(376))>>s(799), (eq(90,2),s(377))>>s(800), (eq(90,2),s(378))>>s(801), (eq(90,2),s(379))>>s(802), (eq(90,2),s(380))>>s(803)]

#### Simplifying cost structure of CE 90 
 * Joined equivalent variables [aux(125),s(773),s(774)] into aux(125)
 * Joined equivalent variables [aux(126),s(775),s(777)] into aux(126)
 * Renamed intermediate variables: 
[ (eq(91,1),it(21))>>s(804)]

#### Simplifying cost structure of CE 91 
 * Renamed intermediate variables: 
[ (eq(92,1),it(21))>>s(805)]
 * Renamed intermediate variables: 
[ (eq(92,2),aux(69))>>s(806), (eq(92,2),s(251))>>s(807)]

#### Simplifying cost structure of CE 92 
 * Joined equivalent variables [aux(127),s(806)] into aux(127)
 * Joined equivalent variables [s(805),s(807)] into s(805)
 * Renamed intermediate variables: 
[ (eq(93,1),it(21))>>s(808)]
 * Renamed intermediate variables: 
[ (eq(93,2),s(258))>>s(809), (eq(93,2),aux(72))>>s(810), (eq(93,2),aux(73))>>s(811), (eq(93,2),aux(74))>>s(812), (eq(93,2),aux(75))>>s(813), (eq(93,2),aux(76))>>s(814), (eq(93,2),s(260))>>s(815), (eq(93,2),s(261))>>s(816), (eq(93,2),s(262))>>s(817), (eq(93,2),s(263))>>s(818), (eq(93,2),s(264))>>s(819), (eq(93,2),s(265))>>s(820), (eq(93,2),s(266))>>s(821), (eq(93,2),s(267))>>s(822), (eq(93,2),s(268))>>s(823), (eq(93,2),s(269))>>s(824), (eq(93,2),s(270))>>s(825), (eq(93,2),s(271))>>s(826), (eq(93,2),s(272))>>s(827), (eq(93,2),s(273))>>s(828), (eq(93,2),s(274))>>s(829), (eq(93,2),s(275))>>s(830), (eq(93,2),s(276))>>s(831), (eq(93,2),s(277))>>s(832), (eq(93,2),s(278))>>s(833), (eq(93,2),s(279))>>s(834), (eq(93,2),s(280))>>s(835), (eq(93,2),s(281))>>s(836), (eq(93,2),s(282))>>s(837), (eq(93,2),s(283))>>s(838), (eq(93,2),s(284))>>s(839)]

#### Simplifying cost structure of CE 93 
 * Joined equivalent variables [aux(128),s(810),s(813),s(814)] into aux(128)
 * Joined equivalent variables [aux(129),s(811),s(812)] into aux(129)
 * Joined equivalent variables [aux(128),s(817)] into aux(128)
 * Joined equivalent variables [s(816),s(831)] into s(816)
 * Joined equivalent variables [s(808),s(815)] into s(808)
 * Joined equivalent variables [s(824),s(834)] into s(824)
 * Joined equivalent variables [s(816),s(818)] into s(816)
 * Joined equivalent variables [s(825),s(833)] into s(825)
 * Renamed intermediate variables: 
[ (eq(94,1),it(21))>>s(840)]
 * Renamed intermediate variables: 
[ (eq(94,2),aux(77))>>s(841), (eq(94,2),s(347))>>s(842)]

#### Simplifying cost structure of CE 94 
 * Joined equivalent variables [aux(130),s(841)] into aux(130)
 * Joined equivalent variables [s(840),s(842)] into s(840)
 * Renamed intermediate variables: 
[ (eq(95,1),it(21))>>s(843)]
 * Renamed intermediate variables: 
[ (eq(95,2),s(354))>>s(844), (eq(95,2),aux(80))>>s(845), (eq(95,2),aux(81))>>s(846), (eq(95,2),aux(82))>>s(847), (eq(95,2),aux(83))>>s(848), (eq(95,2),aux(84))>>s(849), (eq(95,2),s(356))>>s(850), (eq(95,2),s(357))>>s(851), (eq(95,2),s(358))>>s(852), (eq(95,2),s(359))>>s(853), (eq(95,2),s(360))>>s(854), (eq(95,2),s(361))>>s(855), (eq(95,2),s(362))>>s(856), (eq(95,2),s(363))>>s(857), (eq(95,2),s(364))>>s(858), (eq(95,2),s(365))>>s(859), (eq(95,2),s(366))>>s(860), (eq(95,2),s(367))>>s(861), (eq(95,2),s(368))>>s(862), (eq(95,2),s(369))>>s(863), (eq(95,2),s(370))>>s(864), (eq(95,2),s(371))>>s(865), (eq(95,2),s(372))>>s(866), (eq(95,2),s(373))>>s(867), (eq(95,2),s(374))>>s(868), (eq(95,2),s(375))>>s(869), (eq(95,2),s(376))>>s(870), (eq(95,2),s(377))>>s(871), (eq(95,2),s(378))>>s(872), (eq(95,2),s(379))>>s(873), (eq(95,2),s(380))>>s(874)]

#### Simplifying cost structure of CE 95 
 * Joined equivalent variables [aux(131),s(845),s(848),s(849)] into aux(131)
 * Joined equivalent variables [aux(132),s(846),s(847)] into aux(132)
 * Joined equivalent variables [aux(131),s(852)] into aux(131)
 * Joined equivalent variables [s(851),s(866)] into s(851)
 * Joined equivalent variables [s(843),s(850)] into s(843)
 * Joined equivalent variables [s(859),s(869)] into s(859)
 * Joined equivalent variables [s(851),s(853)] into s(851)
 * Joined equivalent variables [s(860),s(868)] into s(860)
 * Joined equivalent variables [aux(133),s(738),s(743),s(771),s(776)] into aux(133)
 * Joined equivalent variables [aux(134),aux(123),aux(125)] into aux(134)
 * Joined equivalent variables [aux(135),aux(128),aux(131)] into aux(135)
 * Joined equivalent variables [aux(136),aux(121),aux(122),aux(124),aux(126),aux(127),aux(129),aux(130),aux(132)] into aux(136)
 * Joined equivalent variables [aux(137),s(809),s(844)] into aux(137)
 * Joined equivalent variables [aux(138),s(745),s(778)] into aux(138)
 * Joined equivalent variables [s(824),s(826)] into s(824)
 * Joined equivalent variables [s(859),s(861)] into s(859)
 * Joined equivalent variables [s(731),s(804)] into s(731)
 * Joined equivalent variables [s(827),s(835)] into s(827)
 * Joined equivalent variables [s(862),s(870)] into s(862)
 * Joined equivalent variables [s(751),s(784)] into s(751)
 * Joined equivalent variables [s(752),s(785)] into s(752)
 * Joined equivalent variables [s(753),s(786)] into s(753)
 * Joined equivalent variables [s(820),s(855)] into s(820)
 * Joined equivalent variables [s(821),s(856)] into s(821)
 * Joined equivalent variables [s(822),s(857)] into s(822)
 * Joined equivalent variables [s(819),s(832)] into s(819)
 * Joined equivalent variables [s(854),s(867)] into s(854)
 * Joined equivalent variables [s(739),s(746),s(772),s(779)] into s(739)
 * Joined equivalent variables [s(770),s(803)] into s(770)
 * Joined equivalent variables [s(816),s(851)] into s(816)
 * Joined equivalent variables [s(731),s(732),s(735),s(747),s(780),s(805),s(808),s(840),s(843)] into s(731)
 * Joined equivalent variables [s(762),s(795)] into s(762)
 * Joined equivalent variables [s(839),s(874)] into s(839)
 * Joined equivalent variables [s(748),s(781)] into s(748)
 * Joined equivalent variables [s(754),s(787)] into s(754)
 * Joined equivalent variables [s(764),s(797)] into s(764)
 * Joined equivalent variables [s(765),s(798)] into s(765)
 * Joined equivalent variables [s(823),s(858)] into s(823)
 * Joined equivalent variables [s(824),s(859)] into s(824)
 * Joined equivalent variables [s(825),s(860)] into s(825)
 * Joined equivalent variables [s(828),s(836)] into s(828)
 * Joined equivalent variables [s(863),s(871)] into s(863)
 * Joined equivalent variables [s(755),s(788)] into s(755)
 * Joined equivalent variables [s(749),s(782)] into s(749)
 * Joined equivalent variables [s(830),s(838)] into s(830)
 * Joined equivalent variables [s(865),s(873)] into s(865)
 * Joined equivalent variables [s(756),s(789)] into s(756)
 * Joined equivalent variables [s(757),s(790)] into s(757)
 * Joined equivalent variables [s(766),s(799)] into s(766)
 * Joined equivalent variables [s(827),s(862)] into s(827)
 * Joined equivalent variables [s(763),s(796)] into s(763)
 * Joined equivalent variables [s(819),s(854)] into s(819)
 * Joined equivalent variables [s(829),s(837)] into s(829)
 * Joined equivalent variables [s(864),s(872)] into s(864)
 * Joined equivalent variables [s(758),s(791)] into s(758)
 * Joined equivalent variables [s(767),s(800)] into s(767)
 * Joined equivalent variables [s(828),s(863)] into s(828)
 * Joined equivalent variables [s(750),s(783)] into s(750)
 * Joined equivalent variables [s(769),s(802)] into s(769)
 * Joined equivalent variables [s(830),s(865)] into s(830)
 * Joined equivalent variables [s(759),s(792)] into s(759)
 * Joined equivalent variables [s(761),s(794)] into s(761)
 * Joined equivalent variables [s(768),s(801)] into s(768)
 * Joined equivalent variables [s(829),s(864)] into s(829)
 * Joined equivalent variables [s(760),s(793)] into s(760)

#### Simplifying cost structure of CE 99 
 * Renamed intermediate variables: 
[ (eq(100,2),aux(69))>>s(875), (eq(100,2),s(251))>>s(876)]

#### Simplifying cost structure of CE 100 

#### Simplifying cost structure of CE 101 
 * Renamed intermediate variables: 
[ (eq(102,2),aux(77))>>s(877), (eq(102,2),s(347))>>s(878)]

#### Simplifying cost structure of CE 102 

#### Simplifying cost structure of CE 103 
 * Joined equivalent variables [aux(139),s(875),s(877)] into aux(139)
 * Joined equivalent variables [s(876),s(878)] into s(876)

#### Simplifying cost structure of CE 79 
 * Renamed intermediate variables: 
[ (eq(80,2),aux(69))>>s(879), (eq(80,2),s(251))>>s(880)]

#### Simplifying cost structure of CE 80 

#### Simplifying cost structure of CE 81 
 * Renamed intermediate variables: 
[ (eq(82,2),aux(77))>>s(881), (eq(82,2),s(347))>>s(882)]

#### Simplifying cost structure of CE 82 

#### Simplifying cost structure of CE 83 
 * Joined equivalent variables [aux(140),s(879),s(881)] into aux(140)
 * Joined equivalent variables [s(880),s(882)] into s(880)
 * Renamed intermediate variables: 
[ (ch([61]),aux(97))>>s(883), (ch([61]),aux(98))>>s(884), (ch([61]),aux(99))>>s(885), (ch([61]),aux(100))>>s(886), (ch([61]),aux(101))>>s(887), (ch([61]),s(447))>>s(888), (ch([61]),s(443))>>s(889), (ch([61]),s(460))>>s(890), (ch([61]),s(461))>>s(891), (ch([61]),s(462))>>s(892), (ch([61]),s(463))>>s(893), (ch([61]),s(464))>>s(894), (ch([61]),s(465))>>s(895), (ch([61]),s(466))>>s(896), (ch([61]),s(467))>>s(897), (ch([61]),s(468))>>s(898), (ch([61]),s(469))>>s(899), (ch([61]),s(470))>>s(900), (ch([61]),s(471))>>s(901), (ch([61]),s(472))>>s(902), (ch([61]),s(473))>>s(903), (ch([61]),s(474))>>s(904), (ch([61]),s(475))>>s(905), (ch([61]),s(476))>>s(906), (ch([61]),s(477))>>s(907), (ch([61]),s(478))>>s(908), (ch([61]),s(479))>>s(909), (ch([61]),s(480))>>s(910), (ch([61]),s(481))>>s(911), (ch([61]),s(526))>>s(912), (ch([61]),s(529))>>s(913), (ch([61]),s(530))>>s(914), (ch([61]),s(531))>>s(915), (ch([61]),s(532))>>s(916), (ch([61]),s(533))>>s(917), (ch([61]),s(534))>>s(918), (ch([61]),s(535))>>s(919), (ch([61]),s(537))>>s(920), (ch([61]),s(538))>>s(921), (ch([61]),s(539))>>s(922), (ch([61]),s(540))>>s(923), (ch([61]),s(549))>>s(924)]

#### Cost of chains of eval_Perl_scan_vstring_7(V_s,V_PL_bufend,V_0,V_2,B):
* Chain [61]: 382*s(443)+6*s(447)+36*s(461)+18*s(462)+12*s(472)+12*s(473)+180*s(474)+90*s(475)+60*s(480)+60*s(481)+564*s(526)+108*s(529)+72*s(539)+72*s(540)+4*s(549)+6
  Such that:aux(97) =< 1
aux(98) =< -2*V_s+2*V_PL_bufend
aux(99) =< -V_s+V_PL_bufend
aux(100) =< -V_s+V_PL_bufend+1
aux(101) =< -V_s/2+V_PL_bufend/2
s(447) =< aux(97)
s(443) =< aux(99)
s(460) =< aux(99)
s(460) =< aux(101)
s(461) =< aux(99)
s(462) =< aux(99)
s(461) =< aux(101)
s(461) =< s(460)
s(463) =< aux(99)*2
s(464) =< aux(99)-2
s(465) =< max([0,aux(99),0])+aux(99)
s(466) =< s(465)+1
s(467) =< s(443)*s(464)
s(468) =< s(461)*s(463)
s(469) =< s(461)*s(464)
s(470) =< s(461)*s(465)
s(471) =< s(468)+s(468)
s(462) =< s(467)+s(469)+aux(99)
s(470) =< s(467)+s(469)+aux(99)
s(471) =< s(462)*s(466)
s(472) =< s(471)
s(473) =< s(470)
s(474) =< aux(99)
s(475) =< aux(99)
s(474) =< aux(101)
s(476) =< s(474)*s(463)
s(477) =< s(474)*s(464)
s(478) =< s(474)*s(465)
s(479) =< s(476)+s(476)
s(475) =< s(467)+s(477)+aux(99)
s(478) =< s(467)+s(477)+aux(99)
s(479) =< s(475)*s(466)
s(480) =< s(479)
s(481) =< s(478)
s(526) =< aux(98)
s(529) =< aux(98)
s(530) =< aux(98)*2
s(531) =< aux(98)-2
s(532) =< max([aux(99),aux(98),0])+aux(98)
s(533) =< s(532)+1
s(534) =< s(526)*s(531)
s(535) =< s(526)*s(530)
s(537) =< s(526)*s(532)
s(538) =< s(535)+s(535)+aux(98)
s(529) =< s(534)+s(534)+aux(99)
s(537) =< s(534)+s(534)+aux(99)
s(538) =< s(529)*s(533)
s(539) =< s(538)
s(540) =< s(537)
s(549) =< aux(100)

  with precondition: [V_0=0,V_2=V_s+1,V_PL_bufend>=V_2] 

* Chain [60]: 5
  with precondition: [V_0=0,V_s+2=V_PL_bufend,V_s+1=V_2] 

* Chain [59]: 3
  with precondition: [V_0=0,V_2=V_s+1,V_2>=V_PL_bufend+1] 

* Chain [58]: 382*s(587)+20*s(595)+36*s(605)+18*s(606)+12*s(616)+12*s(617)+180*s(618)+90*s(619)+60*s(624)+60*s(625)+4*s(626)+564*s(672)+108*s(675)+72*s(685)+72*s(686)+4*s(695)+6
  Such that:aux(115) =< 1
aux(116) =< 2
aux(117) =< -2*V_s+2*V_PL_bufend
aux(118) =< -V_s+V_PL_bufend
aux(119) =< -V_s+V_PL_bufend+1
aux(120) =< -V_s/2+V_PL_bufend/2
s(587) =< aux(118)
s(595) =< aux(115)
s(604) =< aux(118)
s(604) =< aux(120)
s(605) =< aux(118)
s(606) =< aux(118)
s(605) =< aux(120)
s(605) =< s(604)
s(607) =< aux(118)*2
s(608) =< aux(118)-2
s(609) =< max([aux(115),aux(118),0])+aux(118)
s(610) =< s(609)+1
s(611) =< s(587)*s(608)
s(612) =< s(605)*s(607)
s(613) =< s(605)*s(608)
s(614) =< s(605)*s(609)
s(615) =< s(612)+s(612)+aux(116)
s(606) =< s(611)+s(613)+aux(118)
s(614) =< s(611)+s(613)+aux(118)
s(615) =< s(606)*s(610)
s(616) =< s(615)
s(617) =< s(614)
s(618) =< aux(118)
s(619) =< aux(118)
s(618) =< aux(120)
s(620) =< s(618)*s(607)
s(621) =< s(618)*s(608)
s(622) =< s(618)*s(609)
s(623) =< s(620)+s(620)+aux(116)
s(619) =< s(611)+s(621)+aux(118)
s(622) =< s(611)+s(621)+aux(118)
s(623) =< s(619)*s(610)
s(624) =< s(623)
s(625) =< s(622)
s(626) =< aux(116)
s(672) =< aux(117)
s(675) =< aux(117)
s(676) =< aux(117)*2
s(677) =< aux(117)-2
s(678) =< max([aux(118),aux(117),0])+aux(117)
s(679) =< s(678)+1
s(680) =< s(672)*s(677)
s(681) =< s(672)*s(676)
s(683) =< s(672)*s(678)
s(684) =< s(681)+s(681)+aux(117)
s(675) =< s(680)+s(680)+aux(118)
s(683) =< s(680)+s(680)+aux(118)
s(684) =< s(675)*s(679)
s(685) =< s(684)
s(686) =< s(683)
s(695) =< aux(119)

  with precondition: [V_2=V_s+1,0>=V_0+1,V_PL_bufend>=V_2+1] 

* Chain [57]: 382*s(731)+20*s(739)+36*s(749)+18*s(750)+12*s(760)+12*s(761)+180*s(762)+90*s(763)+60*s(768)+60*s(769)+4*s(770)+564*s(816)+108*s(819)+72*s(829)+72*s(830)+4*s(839)+6
  Such that:aux(133) =< 1
aux(134) =< 2
aux(135) =< -2*V_s+2*V_PL_bufend
aux(136) =< -V_s+V_PL_bufend
aux(137) =< -V_s+V_PL_bufend+1
aux(138) =< -V_s/2+V_PL_bufend/2
s(731) =< aux(136)
s(739) =< aux(133)
s(748) =< aux(136)
s(748) =< aux(138)
s(749) =< aux(136)
s(750) =< aux(136)
s(749) =< aux(138)
s(749) =< s(748)
s(751) =< aux(136)*2
s(752) =< aux(136)-2
s(753) =< max([aux(133),aux(136),0])+aux(136)
s(754) =< s(753)+1
s(755) =< s(731)*s(752)
s(756) =< s(749)*s(751)
s(757) =< s(749)*s(752)
s(758) =< s(749)*s(753)
s(759) =< s(756)+s(756)+aux(134)
s(750) =< s(755)+s(757)+aux(136)
s(758) =< s(755)+s(757)+aux(136)
s(759) =< s(750)*s(754)
s(760) =< s(759)
s(761) =< s(758)
s(762) =< aux(136)
s(763) =< aux(136)
s(762) =< aux(138)
s(764) =< s(762)*s(751)
s(765) =< s(762)*s(752)
s(766) =< s(762)*s(753)
s(767) =< s(764)+s(764)+aux(134)
s(763) =< s(755)+s(765)+aux(136)
s(766) =< s(755)+s(765)+aux(136)
s(767) =< s(763)*s(754)
s(768) =< s(767)
s(769) =< s(766)
s(770) =< aux(134)
s(816) =< aux(135)
s(819) =< aux(135)
s(820) =< aux(135)*2
s(821) =< aux(135)-2
s(822) =< max([aux(136),aux(135),0])+aux(135)
s(823) =< s(822)+1
s(824) =< s(816)*s(821)
s(825) =< s(816)*s(820)
s(827) =< s(816)*s(822)
s(828) =< s(825)+s(825)+aux(135)
s(819) =< s(824)+s(824)+aux(136)
s(827) =< s(824)+s(824)+aux(136)
s(828) =< s(819)*s(823)
s(829) =< s(828)
s(830) =< s(827)
s(839) =< aux(137)

  with precondition: [V_2=V_s+1,V_0>=1,V_PL_bufend>=V_2+1] 

* Chain [56]: 9
  with precondition: [V_2=V_s+1,0>=V_0+1,V_2>=V_PL_bufend] 

* Chain [55]: 9
  with precondition: [V_2=V_s+1,V_0>=1,V_2>=V_PL_bufend] 

 * Renamed intermediate variables: 
[ (eq(137,1),s(883))>>s(925), (eq(137,1),s(884))>>s(926), (eq(137,1),s(885))>>s(927), (eq(137,1),s(886))>>s(928), (eq(137,1),s(887))>>s(929), (eq(137,1),s(888))>>s(930), (eq(137,1),s(889))>>s(931), (eq(137,1),s(890))>>s(932), (eq(137,1),s(891))>>s(933), (eq(137,1),s(892))>>s(934), (eq(137,1),s(893))>>s(935), (eq(137,1),s(894))>>s(936), (eq(137,1),s(895))>>s(937), (eq(137,1),s(896))>>s(938), (eq(137,1),s(897))>>s(939), (eq(137,1),s(898))>>s(940), (eq(137,1),s(899))>>s(941), (eq(137,1),s(900))>>s(942), (eq(137,1),s(901))>>s(943), (eq(137,1),s(902))>>s(944), (eq(137,1),s(903))>>s(945), (eq(137,1),s(904))>>s(946), (eq(137,1),s(905))>>s(947), (eq(137,1),s(906))>>s(948), (eq(137,1),s(907))>>s(949), (eq(137,1),s(908))>>s(950), (eq(137,1),s(909))>>s(951), (eq(137,1),s(910))>>s(952), (eq(137,1),s(911))>>s(953), (eq(137,1),s(912))>>s(954), (eq(137,1),s(913))>>s(955), (eq(137,1),s(914))>>s(956), (eq(137,1),s(915))>>s(957), (eq(137,1),s(916))>>s(958), (eq(137,1),s(917))>>s(959), (eq(137,1),s(918))>>s(960), (eq(137,1),s(919))>>s(961), (eq(137,1),s(920))>>s(962), (eq(137,1),s(921))>>s(963), (eq(137,1),s(922))>>s(964), (eq(137,1),s(923))>>s(965), (eq(137,1),s(924))>>s(966)]

#### Simplifying cost structure of CE 137 
 * Renamed intermediate variables: 
[ (eq(139,1),aux(115))>>s(967), (eq(139,1),aux(116))>>s(968), (eq(139,1),aux(117))>>s(969), (eq(139,1),aux(118))>>s(970), (eq(139,1),aux(119))>>s(971), (eq(139,1),aux(120))>>s(972), (eq(139,1),s(587))>>s(973), (eq(139,1),s(595))>>s(974), (eq(139,1),s(604))>>s(975), (eq(139,1),s(605))>>s(976), (eq(139,1),s(606))>>s(977), (eq(139,1),s(607))>>s(978), (eq(139,1),s(608))>>s(979), (eq(139,1),s(609))>>s(980), (eq(139,1),s(610))>>s(981), (eq(139,1),s(611))>>s(982), (eq(139,1),s(612))>>s(983), (eq(139,1),s(613))>>s(984), (eq(139,1),s(614))>>s(985), (eq(139,1),s(615))>>s(986), (eq(139,1),s(616))>>s(987), (eq(139,1),s(617))>>s(988), (eq(139,1),s(618))>>s(989), (eq(139,1),s(619))>>s(990), (eq(139,1),s(620))>>s(991), (eq(139,1),s(621))>>s(992), (eq(139,1),s(622))>>s(993), (eq(139,1),s(623))>>s(994), (eq(139,1),s(624))>>s(995), (eq(139,1),s(625))>>s(996), (eq(139,1),s(626))>>s(997), (eq(139,1),s(672))>>s(998), (eq(139,1),s(675))>>s(999), (eq(139,1),s(676))>>s(1000), (eq(139,1),s(677))>>s(1001), (eq(139,1),s(678))>>s(1002), (eq(139,1),s(679))>>s(1003), (eq(139,1),s(680))>>s(1004), (eq(139,1),s(681))>>s(1005), (eq(139,1),s(683))>>s(1006), (eq(139,1),s(684))>>s(1007), (eq(139,1),s(685))>>s(1008), (eq(139,1),s(686))>>s(1009), (eq(139,1),s(695))>>s(1010)]

#### Simplifying cost structure of CE 139 
 * Renamed intermediate variables: 
[ (eq(141,1),aux(133))>>s(1011), (eq(141,1),aux(134))>>s(1012), (eq(141,1),aux(135))>>s(1013), (eq(141,1),aux(136))>>s(1014), (eq(141,1),aux(137))>>s(1015), (eq(141,1),aux(138))>>s(1016), (eq(141,1),s(731))>>s(1017), (eq(141,1),s(739))>>s(1018), (eq(141,1),s(748))>>s(1019), (eq(141,1),s(749))>>s(1020), (eq(141,1),s(750))>>s(1021), (eq(141,1),s(751))>>s(1022), (eq(141,1),s(752))>>s(1023), (eq(141,1),s(753))>>s(1024), (eq(141,1),s(754))>>s(1025), (eq(141,1),s(755))>>s(1026), (eq(141,1),s(756))>>s(1027), (eq(141,1),s(757))>>s(1028), (eq(141,1),s(758))>>s(1029), (eq(141,1),s(759))>>s(1030), (eq(141,1),s(760))>>s(1031), (eq(141,1),s(761))>>s(1032), (eq(141,1),s(762))>>s(1033), (eq(141,1),s(763))>>s(1034), (eq(141,1),s(764))>>s(1035), (eq(141,1),s(765))>>s(1036), (eq(141,1),s(766))>>s(1037), (eq(141,1),s(767))>>s(1038), (eq(141,1),s(768))>>s(1039), (eq(141,1),s(769))>>s(1040), (eq(141,1),s(770))>>s(1041), (eq(141,1),s(816))>>s(1042), (eq(141,1),s(819))>>s(1043), (eq(141,1),s(820))>>s(1044), (eq(141,1),s(821))>>s(1045), (eq(141,1),s(822))>>s(1046), (eq(141,1),s(823))>>s(1047), (eq(141,1),s(824))>>s(1048), (eq(141,1),s(825))>>s(1049), (eq(141,1),s(827))>>s(1050), (eq(141,1),s(828))>>s(1051), (eq(141,1),s(829))>>s(1052), (eq(141,1),s(830))>>s(1053), (eq(141,1),s(839))>>s(1054)]

#### Simplifying cost structure of CE 141 
 * Joined equivalent variables [aux(141),s(925),s(967),s(1011)] into aux(141)
 * Joined equivalent variables [aux(142),s(968),s(1012)] into aux(142)
 * Joined equivalent variables [aux(143),s(926),s(969),s(1013)] into aux(143)
 * Joined equivalent variables [aux(144),s(927),s(970),s(1014)] into aux(144)
 * Joined equivalent variables [aux(145),s(928),s(971),s(1015)] into aux(145)
 * Joined equivalent variables [aux(146),s(929),s(972),s(1016)] into aux(146)
 * Joined equivalent variables [s(935),s(978),s(1022)] into s(935)
 * Joined equivalent variables [s(936),s(979),s(1023)] into s(936)
 * Joined equivalent variables [s(956),s(1000),s(1044)] into s(956)
 * Joined equivalent variables [s(957),s(1001),s(1045)] into s(957)
 * Joined equivalent variables [s(958),s(1002),s(1046)] into s(958)
 * Joined equivalent variables [s(980),s(1024)] into s(980)
 * Joined equivalent variables [s(930),s(974),s(1018)] into s(930)
 * Joined equivalent variables [s(997),s(1041)] into s(997)
 * Joined equivalent variables [s(954),s(998),s(1042)] into s(954)
 * Joined equivalent variables [s(931),s(973),s(1017)] into s(931)
 * Joined equivalent variables [s(946),s(989),s(1033)] into s(946)
 * Joined equivalent variables [s(966),s(1010),s(1054)] into s(966)
 * Joined equivalent variables [s(932),s(975),s(1019)] into s(932)
 * Joined equivalent variables [s(939),s(982),s(1026)] into s(939)
 * Joined equivalent variables [s(948),s(991),s(1035)] into s(948)
 * Joined equivalent variables [s(949),s(992),s(1036)] into s(949)
 * Joined equivalent variables [s(959),s(1003),s(1047)] into s(959)
 * Joined equivalent variables [s(960),s(1004),s(1048)] into s(960)
 * Joined equivalent variables [s(961),s(1005),s(1049)] into s(961)
 * Joined equivalent variables [s(981),s(1025)] into s(981)
 * Joined equivalent variables [s(933),s(976),s(1020)] into s(933)
 * Joined equivalent variables [s(940),s(983),s(1027)] into s(940)
 * Joined equivalent variables [s(941),s(984),s(1028)] into s(941)
 * Joined equivalent variables [s(962),s(1006),s(1050)] into s(962)
 * Joined equivalent variables [s(993),s(1037)] into s(993)
 * Joined equivalent variables [s(947),s(990),s(1034)] into s(947)
 * Joined equivalent variables [s(955),s(999),s(1043)] into s(955)
 * Joined equivalent variables [s(963),s(1007),s(1051)] into s(963)
 * Joined equivalent variables [s(985),s(1029)] into s(985)
 * Joined equivalent variables [s(934),s(977),s(1021)] into s(934)
 * Joined equivalent variables [s(994),s(1038)] into s(994)
 * Joined equivalent variables [s(965),s(1009),s(1053)] into s(965)
 * Joined equivalent variables [s(996),s(1040)] into s(996)
 * Joined equivalent variables [s(986),s(1030)] into s(986)
 * Joined equivalent variables [s(964),s(1008),s(1052)] into s(964)
 * Joined equivalent variables [s(988),s(1032)] into s(988)
 * Joined equivalent variables [s(995),s(1039)] into s(995)
 * Joined equivalent variables [s(987),s(1031)] into s(987)

#### Simplifying cost structure of CE 136 

#### Simplifying cost structure of CE 138 

#### Simplifying cost structure of CE 140 

#### Cost of chains of eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B):
* Chain [63]: 46*s(930)+1146*s(931)+108*s(933)+54*s(934)+12*s(944)+12*s(945)+540*s(946)+270*s(947)+60*s(952)+60*s(953)+1692*s(954)+324*s(955)+216*s(964)+216*s(965)+12*s(966)+24*s(987)+24*s(988)+120*s(995)+120*s(996)+8*s(997)+6
  Such that:aux(141) =< 1
aux(142) =< 2
aux(143) =< -2*V_s+2*V_PL_bufend
aux(144) =< -V_s+V_PL_bufend
aux(145) =< -V_s+V_PL_bufend+1
aux(146) =< -V_s/2+V_PL_bufend/2
s(930) =< aux(141)
s(931) =< aux(144)
s(932) =< aux(144)
s(932) =< aux(146)
s(933) =< aux(144)
s(934) =< aux(144)
s(933) =< aux(146)
s(933) =< s(932)
s(935) =< aux(144)*2
s(936) =< aux(144)-2
s(937) =< max([0,aux(144),0])+aux(144)
s(938) =< s(937)+1
s(939) =< s(931)*s(936)
s(940) =< s(933)*s(935)
s(941) =< s(933)*s(936)
s(942) =< s(933)*s(937)
s(943) =< s(940)+s(940)
s(934) =< s(939)+s(941)+aux(144)
s(942) =< s(939)+s(941)+aux(144)
s(943) =< s(934)*s(938)
s(944) =< s(943)
s(945) =< s(942)
s(946) =< aux(144)
s(947) =< aux(144)
s(946) =< aux(146)
s(948) =< s(946)*s(935)
s(949) =< s(946)*s(936)
s(950) =< s(946)*s(937)
s(951) =< s(948)+s(948)
s(947) =< s(939)+s(949)+aux(144)
s(950) =< s(939)+s(949)+aux(144)
s(951) =< s(947)*s(938)
s(952) =< s(951)
s(953) =< s(950)
s(954) =< aux(143)
s(955) =< aux(143)
s(956) =< aux(143)*2
s(957) =< aux(143)-2
s(958) =< max([aux(144),aux(143),0])+aux(143)
s(959) =< s(958)+1
s(960) =< s(954)*s(957)
s(961) =< s(954)*s(956)
s(962) =< s(954)*s(958)
s(963) =< s(961)+s(961)+aux(143)
s(955) =< s(960)+s(960)+aux(144)
s(962) =< s(960)+s(960)+aux(144)
s(963) =< s(955)*s(959)
s(964) =< s(963)
s(965) =< s(962)
s(966) =< aux(145)
s(980) =< max([aux(141),aux(144),0])+aux(144)
s(981) =< s(980)+1
s(985) =< s(933)*s(980)
s(986) =< s(940)+s(940)+aux(142)
s(985) =< s(939)+s(941)+aux(144)
s(986) =< s(934)*s(981)
s(987) =< s(986)
s(988) =< s(985)
s(993) =< s(946)*s(980)
s(994) =< s(948)+s(948)+aux(142)
s(993) =< s(939)+s(949)+aux(144)
s(994) =< s(947)*s(981)
s(995) =< s(994)
s(996) =< s(993)
s(997) =< aux(142)

  with precondition: [V_PL_bufend>=V_s+1] 

* Chain [62]: 9
  with precondition: [V_s+1>=V_PL_bufend] 


Closed-form bounds of eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B): 
-------------------------------------
* Chain [63] with precondition: [V_PL_bufend>=V_s+1] 
    - Upper bound: (-144*V_s+144*V_PL_bufend)* (-V_s+V_PL_bufend)+356+ (-72*V_s+72*V_PL_bufend)* (-V_s+V_PL_bufend)+ (-2*V_s+2*V_PL_bufend)* (-432*V_s+432*V_PL_bufend)+ (-2118*V_s+2118*V_PL_bufend)+ (-1080*V_s+1080*V_PL_bufend)* (-V_s+V_PL_bufend)+ (-4464*V_s+4464*V_PL_bufend)+ (-2*V_s+2*V_PL_bufend)* (-2160*V_s+2160*V_PL_bufend)+ (-12*V_s+12*V_PL_bufend+12) 
    - Complexity: n^2 
* Chain [62] with precondition: [V_s+1>=V_PL_bufend] 
    - Upper bound: 9 
    - Complexity: constant 

### Maximum cost of eval_Perl_scan_vstring_start(V_s,V_PL_bufend,B): max([1,nat(-V_s+V_PL_bufend)])*144*nat(-V_s+V_PL_bufend)+347+max([0,nat(-V_s+V_PL_bufend)])*72*nat(-V_s+V_PL_bufend)+max([0,nat(-V_s+V_PL_bufend),nat(-2*V_s+2*V_PL_bufend)])*216*nat(-2*V_s+2*V_PL_bufend)+nat(-V_s+V_PL_bufend)*2118+nat(-V_s+V_PL_bufend)*1080*nat(-V_s+V_PL_bufend)+nat(-2*V_s+2*V_PL_bufend)*2232+nat(-2*V_s+2*V_PL_bufend)*1080*nat(-2*V_s+2*V_PL_bufend)+nat(-V_s+V_PL_bufend+1)*12+9 
Asymptotic class: n^2 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 334 ms.
* Invariants computed in 323 ms.
   - Backward Invariants 188 ms.
   - Transitive Invariants 43 ms.
* Refinement performed in 1312 ms.
* Termination proved in 71 ms.
* Upper bounds computed in 3716 ms.
   - Equation cost structures 2690 ms.
   - Phase cost structures 579 ms.
   - Chain cost structures 241 ms.
   - Solving cost expressions 10 ms.
* Total analysis performed in 6052 ms.


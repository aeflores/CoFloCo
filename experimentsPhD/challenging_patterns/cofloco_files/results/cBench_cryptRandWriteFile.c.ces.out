Warning: Ignored call to eval_cryptRandWriteFile_stop/1 in equation eval_cryptRandWriteFile_bb6_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_cryptRandWriteFile_bb3_in/7,eval_cryptRandWriteFile_bb4_in/7]
1. recursive  : [eval_cryptRandWriteFile_10/5,eval_cryptRandWriteFile_11/5,eval_cryptRandWriteFile_bb1_in/2,eval_cryptRandWriteFile_bb2_in/2,eval_cryptRandWriteFile_bb5_in/4,loop_cont_eval_cryptRandWriteFile_bb3_in/5]
2. non_recursive  : [eval_cryptRandWriteFile_bb6_in/1]
3. non_recursive  : [loop_cont_eval_cryptRandWriteFile_bb1_in/2]
4. non_recursive  : [eval_cryptRandWriteFile_4/2]
5. non_recursive  : [eval_cryptRandWriteFile_3/2]
6. non_recursive  : [eval_cryptRandWriteFile_2/2]
7. non_recursive  : [eval_cryptRandWriteFile_1/2]
8. non_recursive  : [eval_cryptRandWriteFile_0/2]
9. non_recursive  : [eval_cryptRandWriteFile_bb0_in/2]
10. non_recursive  : [eval_cryptRandWriteFile_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_cryptRandWriteFile_bb3_in/7
1. SCC is partially evaluated into eval_cryptRandWriteFile_bb1_in/2
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_cryptRandWriteFile_4/2
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is partially evaluated into eval_cryptRandWriteFile_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_cryptRandWriteFile_bb3_in/7 
* CE 7 is refined into CE [8] 
* CE 6 is refined into CE [9] 


#### Refined cost equations eval_cryptRandWriteFile_bb3_in/7 
* CE 8: eval_cryptRandWriteFile_bb3_in(A,B,C,D,A,B,C) = 0
     [C>=B,A>=B,B>=1,256>=B,D=2] 
* CE 9: eval_cryptRandWriteFile_bb3_in(V__0,V__0_,V_i_0,B,C,D,E) = 1+ eval_cryptRandWriteFile_bb3_in(V__0,V__0_,F,G,C,D,E)
     [V__0_>=V_i_0+1,V__0>=V__0_,V_i_0>=0,256>=V__0_,V_i_0+1=F,G=2,B=2] 

### Cost equations --> "Loop" of eval_cryptRandWriteFile_bb3_in/7 
* CEs [9] --> Loop 8 
* CEs [8] --> Loop 9 

#### Loops of eval_cryptRandWriteFile_bb3_in/7 
* Loop 8: eval_cryptRandWriteFile_bb3_in(V__0,V__0_,V_i_0,B,C,D,E)->  eval_cryptRandWriteFile_bb3_in(V__0,V__0_,V_i_0',B',C,D,E)
                  [V__0_>=V_i_0+1,V__0>=V__0_,V_i_0>=0,256>=V__0_,V_i_0+1=V_i_0',B'=2,B=2] 
* Loop 9: eval_cryptRandWriteFile_bb3_in(A,B,C,D,A,B,C) [C>=B,A>=B,B>=1,256>=B,D=2] 

### Ranking functions of CR eval_cryptRandWriteFile_bb3_in(V__0,V__0_,V_i_0,B,C,D,E) 
* RF of phase [8]: [V__0-V_i_0,V__0_-V_i_0,-V_i_0+256]

#### Partial ranking functions of CR eval_cryptRandWriteFile_bb3_in(V__0,V__0_,V_i_0,B,C,D,E) 
* Partial RF of phase [8]:
  - RF of loop [8:1]:
    V__0-V_i_0
    V__0_-V_i_0
    -V_i_0+256

Discarded unfeasible chain [[8]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_cryptRandWriteFile_bb3_in(V__0,V__0_,V_i_0,B,C,D,E) 
* [[8],9]


### Merging Chains  eval_cryptRandWriteFile_bb3_in/7 into  External patterns of execution 
* [[9,[8]]] --> 1 


### Specialization of cost equations eval_cryptRandWriteFile_bb1_in/2 
* CE 5 is refined into CE [10] 
* CE 4 is refined into CE [11] 
* CE 3 is refined into CE [12] 


#### Refined cost equations eval_cryptRandWriteFile_bb1_in/2 
* CE 10: eval_cryptRandWriteFile_bb1_in(V__0,B) = 0
     [0>=V__0,B=3] 
* CE 11: eval_cryptRandWriteFile_bb1_in(V__0,B) = 2+ eval_cryptRandWriteFile_bb3_in(V__0,C,D,E,V__0,F,G):1+ eval_cryptRandWriteFile_bb1_in(H,I)
     [V__0>=256,V__0=H+256,I=3,G=256,F=256,E=2,D=0,C=256,B=3] 
* CE 12: eval_cryptRandWriteFile_bb1_in(V__0,B) = 2+ eval_cryptRandWriteFile_bb3_in(V__0,V__0,C,D,V__0,V__0,V__0):1+ eval_cryptRandWriteFile_bb1_in(E,F)
     [V__0>=1,255>=V__0,F=3,E=0,D=2,C=0,B=3] 

### Cost equations --> "Loop" of eval_cryptRandWriteFile_bb1_in/2 
* CEs [11] --> Loop 10 
* CEs [12] --> Loop 11 
* CEs [10] --> Loop 12 

#### Loops of eval_cryptRandWriteFile_bb1_in/2 
* Loop 10: eval_cryptRandWriteFile_bb1_in(V__0,B)->  eval_cryptRandWriteFile_bb1_in(V__0',B')
                  [V__0>=256,V__0=V__0'+256,B'=3,B=3] 
* Loop 11: eval_cryptRandWriteFile_bb1_in(V__0,B)->  eval_cryptRandWriteFile_bb1_in(V__0',B')
                  [V__0>=1,255>=V__0,B'=3,V__0'=0,B=3] 
* Loop 12: eval_cryptRandWriteFile_bb1_in(V__0,B) [0>=V__0,B=3] 

### Ranking functions of CR eval_cryptRandWriteFile_bb1_in(V__0,B) 
* RF of phase [10]: [V__0-255]

#### Partial ranking functions of CR eval_cryptRandWriteFile_bb1_in(V__0,B) 
* Partial RF of phase [10]:
  - RF of loop [10:1]:
    V__0-255

Discarded unfeasible chain [[10]]...(Non-terminating chain proved terminating)

### Resulting Chains:eval_cryptRandWriteFile_bb1_in(V__0,B) 
* [[10],12]
* [[10],11,12]
* [12]
* [11,12]


### Merging Chains  eval_cryptRandWriteFile_bb1_in/2 into  External patterns of execution 
* [[12,11]] --> 1 
* [[12]] --> 2 
* [[12,[10]]] --> 3 
* [[12,11,[10]]] --> 4 


### Specialization of cost equations eval_cryptRandWriteFile_4/2 
* CE 2 is refined into CE [13,14,15,16] 


#### Refined cost equations eval_cryptRandWriteFile_4/2 
* CE 13: eval_cryptRandWriteFile_4(V_bytes,B) = 1+ eval_cryptRandWriteFile_bb1_in(V_bytes,C):1
     [V_bytes>=1,255>=V_bytes,C=3] 
* CE 14: eval_cryptRandWriteFile_4(V_bytes,B) = 1+ eval_cryptRandWriteFile_bb1_in(V_bytes,C):2
     [0>=V_bytes,C=3] 
* CE 15: eval_cryptRandWriteFile_4(V_bytes,B) = 1+ eval_cryptRandWriteFile_bb1_in(V_bytes,C):3
     [V_bytes>=256,C=3] 
* CE 16: eval_cryptRandWriteFile_4(V_bytes,B) = 1+ eval_cryptRandWriteFile_bb1_in(V_bytes,C):4
     [V_bytes>=257,C=3] 

### Cost equations --> "Loop" of eval_cryptRandWriteFile_4/2 
* CEs [16] --> Loop 13 
* CEs [15] --> Loop 14 
* CEs [14] --> Loop 15 
* CEs [13] --> Loop 16 

#### Loops of eval_cryptRandWriteFile_4/2 
* Loop 13: eval_cryptRandWriteFile_4(V_bytes,B) [V_bytes>=257] 
* Loop 14: eval_cryptRandWriteFile_4(V_bytes,B) [V_bytes>=256] 
* Loop 15: eval_cryptRandWriteFile_4(V_bytes,B) [0>=V_bytes] 
* Loop 16: eval_cryptRandWriteFile_4(V_bytes,B) [V_bytes>=1,255>=V_bytes] 

### Ranking functions of CR eval_cryptRandWriteFile_4(V_bytes,B) 

#### Partial ranking functions of CR eval_cryptRandWriteFile_4(V_bytes,B) 


### Resulting Chains:eval_cryptRandWriteFile_4(V_bytes,B) 
* [16]
* [15]
* [14]
* [13]


### Merging Chains  eval_cryptRandWriteFile_4/2 into  External patterns of execution 
* [[16]] --> 1 
* [[15]] --> 2 
* [[14]] --> 3 
* [[13]] --> 4 


### Specialization of cost equations eval_cryptRandWriteFile_start/2 
* CE 1 is refined into CE [17,18,19,20] 


#### Refined cost equations eval_cryptRandWriteFile_start/2 
* CE 17: eval_cryptRandWriteFile_start(V_bytes,B) = 0+ eval_cryptRandWriteFile_4(V_bytes,B):1
     [V_bytes>=1,255>=V_bytes] 
* CE 18: eval_cryptRandWriteFile_start(V_bytes,B) = 0+ eval_cryptRandWriteFile_4(V_bytes,B):2
     [0>=V_bytes] 
* CE 19: eval_cryptRandWriteFile_start(V_bytes,B) = 0+ eval_cryptRandWriteFile_4(V_bytes,B):3
     [V_bytes>=256] 
* CE 20: eval_cryptRandWriteFile_start(V_bytes,B) = 0+ eval_cryptRandWriteFile_4(V_bytes,B):4
     [V_bytes>=257] 

### Cost equations --> "Loop" of eval_cryptRandWriteFile_start/2 
* CEs [20] --> Loop 17 
* CEs [19] --> Loop 18 
* CEs [18] --> Loop 19 
* CEs [17] --> Loop 20 

#### Loops of eval_cryptRandWriteFile_start/2 
* Loop 17: eval_cryptRandWriteFile_start(V_bytes,B) [V_bytes>=257] 
* Loop 18: eval_cryptRandWriteFile_start(V_bytes,B) [V_bytes>=256] 
* Loop 19: eval_cryptRandWriteFile_start(V_bytes,B) [0>=V_bytes] 
* Loop 20: eval_cryptRandWriteFile_start(V_bytes,B) [V_bytes>=1,255>=V_bytes] 

### Ranking functions of CR eval_cryptRandWriteFile_start(V_bytes,B) 

#### Partial ranking functions of CR eval_cryptRandWriteFile_start(V_bytes,B) 


### Resulting Chains:eval_cryptRandWriteFile_start(V_bytes,B) 
* [20]
* [19]
* [18]
* [17]


### Merging Chains  eval_cryptRandWriteFile_start/2 into  External patterns of execution 
* [[20]] --> 1 
* [[19]] --> 2 
* [[18]] --> 3 
* [[17]] --> 4 


Computing Bounds
=====================================

#### Simplifying cost structure of CE 8 

#### Computing cost of phase [8] 

#### Simplifying cost structure of CE 9 

#### Cost of loops [8] 

 * loop 8:eval_cryptRandWriteFile_bb3_in(V__0,V__0_,V_i_0,B,C,D,E) -> [eval_cryptRandWriteFile_bb3_in(V__0',V__0_',V_i_0',B',C',D',E')] 
1
##### Pending set eval_cryptRandWriteFile_bb3_in(V__0,V__0_,V_i_0,B,C,D,E)
* Psum in Loop 8: [it(8)=<1]

###### Computing sum for it(8)=<1  in Loop 8 
   - Applying inductive sum strategy 
     - head Candidate: -V_i_0+256 
     - head Candidate: V__0_-V_i_0 
     - head Candidate: V__0-V_i_0 
     - head Candidate: -V_i_0+256 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V__0-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
     - head Candidate: V__0_-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: -V_i_0+256 
     - tail Candidate: V__0_-V_i_0 
     - tail Candidate: V__0-V_i_0 
     - tail Candidate: -V_i_0+256 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V__0-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V__0_-V_i_0 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(8)=< -V_i_0+256,it(8)=<V__0_-V_i_0,it(8)=<V__0-V_i_0,it(8)=< -V_i_0+256,it(8)=<V__0-V_i_0,it(8)=<V__0_-V_i_0,it(8)=< -V_i_0+V_i_0',it(8)=<V__0_-V_i_0-V__0_'+V_i_0',it(8)=<V__0-V_i_0-V__0'+V_i_0',it(8)=< -V_i_0+V_i_0',it(8)=<V__0-V_i_0-V__0'+V_i_0',it(8)=<V__0_-V_i_0-V__0_'+V_i_0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [8] 

#### Simplifying cost structure of phase [8] 

#### Cost of phase [8]:eval_cryptRandWriteFile_bb3_in(V__0,V__0_,V_i_0,B,C,D,E) -> [eval_cryptRandWriteFile_bb3_in(V__0',V__0_',V_i_0',B',C',D',E')] 
1*it(8)+0
  Such that:it(8) =< V__0-V_i_0
it(8) =< V__0-V_i_0-V__0'+V_i_0'
it(8) =< V__0_-V_i_0
it(8) =< V__0_-V_i_0-V__0_'+V_i_0'
it(8) =< -V_i_0+256
it(8) =< -V_i_0+V_i_0'

#### Simplifying cost structure of chain [[8],9] 

#### Cost of chains of eval_cryptRandWriteFile_bb3_in(V__0,V__0_,V_i_0,B,C,D,E):
* Chain [[8],9]: 1*it(8)+0
  Such that:it(8) =< -V_i_0+E

  with precondition: [B=2,V__0=C,V__0_=D,V__0_=E,256>=V__0_,V_i_0>=0,V__0>=V__0_,V__0_>=V_i_0+1] 


#### Simplifying cost structure of CE 10 

#### Computing cost of phase [10] 
 * Renamed intermediate variables: 
[(eq(11,1),it(8))>>s(1)]

#### Simplifying cost structure of CE 11 
 * Renamed intermediate variables: 
[(it(10),s(1))>>s(2)]

#### Cost of loops [10] 

 * loop 10:eval_cryptRandWriteFile_bb1_in(V__0,B) -> [eval_cryptRandWriteFile_bb1_in(V__0',B')] 
1*s(2)+2
  Such that:s(2) =< 256

##### Pending set eval_cryptRandWriteFile_bb1_in(V__0,B)
* Psum in Loop 10: [it(10)=<1,s(3)=<256]

###### Computing sum for it(10)=<1  in Loop 10 
   - Applying inductive sum strategy 
     - head Candidate: V__0-255 
     - head Candidate: V__0-255 
       - The candidate was classified before. We reuse its previous classification 
     - tail Candidate: V__0-255 
     - tail Candidate: V__0-255 
       - The candidate was classified before. We reuse its previous classification 
 * Adding constraints: [it(10)=<V__0-255,it(10)=<V__0-255,it(10)=<V__0-V__0',it(10)=<V__0-V__0'] 

##### Pending set eval_cryptRandWriteFile_0(V_bytes,B)
* Psum in Loop 10: [s(3)=<256]

###### Computing sum for s(3)=<256  in Loop 10 
   - Found a solution using cacheing 
 * Adding constraints: [s(3)=<aux(1)*256,aux(1)=<V__0-255,aux(1)=<V__0-255,aux(1)=<V__0-V__0',aux(1)=<V__0-V__0'] 

##### Empy Pending set: Done 

#### Sorting generated constraints of phase [10] 

#### Simplifying cost structure of phase [10] 

#### Cost of phase [10]:eval_cryptRandWriteFile_bb1_in(V__0,B) -> [eval_cryptRandWriteFile_bb1_in(V__0',B')] 
2*it(10)+1*s(3)+0
  Such that:aux(2) =< V__0
aux(3) =< V__0-V__0'
aux(1) =< aux(2)
it(10) =< aux(2)
aux(1) =< aux(3)
it(10) =< aux(3)
s(3) =< aux(1)*256

#### Simplifying cost structure of chain [[10],12] 
 * Joined equivalent variables [aux(4),aux(2),aux(3)] into aux(4)
 * Joined equivalent variables [aux(4),aux(1)] into aux(4)
 * Renamed intermediate variables: 
[(eq(12,1),it(8))>>s(4)]

#### Simplifying cost structure of CE 12 

#### Simplifying cost structure of chain [11,12] 

#### Found solution for phase  [10] in the cache 

#### Cost of phase [10]:eval_cryptRandWriteFile_bb1_in(V__0,B) -> [eval_cryptRandWriteFile_bb1_in(V__0',B')] 
2*it(10)+1*s(3)+0
  Such that:aux(2) =< V__0
aux(3) =< V__0-V__0'
aux(1) =< aux(2)
it(10) =< aux(2)
aux(1) =< aux(3)
it(10) =< aux(3)
s(3) =< aux(1)*256

#### Simplifying cost structure of chain [[10],11,12] 
 * Joined equivalent variables [aux(5),aux(2),aux(3)] into aux(5)
 * Joined equivalent variables [aux(5),aux(1)] into aux(5)

#### Cost of chains of eval_cryptRandWriteFile_bb1_in(V__0,B):
* Chain [[10],12]: 2*it(10)+1*s(3)+0
  Such that:aux(4) =< V__0
it(10) =< aux(4)
s(3) =< aux(4)*256

  with precondition: [B=3,V__0>=256] 

* Chain [[10],11,12]: 2*it(10)+1*s(3)+1*s(4)+2
  Such that:s(4) =< 255
aux(5) =< V__0
s(4) =< aux(5)
it(10) =< aux(5)
s(3) =< aux(5)*256

  with precondition: [B=3,V__0>=257] 

* Chain [12]: 0
  with precondition: [B=3,0>=V__0] 

* Chain [11,12]: 1*s(4)+2
  Such that:s(4) =< V__0

  with precondition: [B=3,255>=V__0,V__0>=1] 

 * Renamed intermediate variables: 
[(eq(13,1),s(4))>>s(5)]

#### Simplifying cost structure of CE 13 

#### Simplifying cost structure of CE 14 
 * Renamed intermediate variables: 
[(eq(15,1),aux(4))>>s(6),(eq(15,1),it(10))>>s(7),(eq(15,1),s(3))>>s(8)]

#### Simplifying cost structure of CE 15 
 * Renamed intermediate variables: 
[(eq(16,1),s(4))>>s(9),(eq(16,1),aux(5))>>s(10),(eq(16,1),it(10))>>s(11),(eq(16,1),s(3))>>s(12)]

#### Simplifying cost structure of CE 16 

#### Cost of chains of eval_cryptRandWriteFile_4(V_bytes,B):
* Chain [16]: 1*s(5)+3
  Such that:s(5) =< V_bytes

  with precondition: [255>=V_bytes,V_bytes>=1] 

* Chain [15]: 1
  with precondition: [0>=V_bytes] 

* Chain [14]: 2*s(7)+1*s(8)+1
  Such that:s(6) =< V_bytes
s(7) =< s(6)
s(8) =< s(6)*256

  with precondition: [V_bytes>=256] 

* Chain [13]: 1*s(9)+2*s(11)+1*s(12)+3
  Such that:s(9) =< 255
s(10) =< V_bytes
s(9) =< s(10)
s(11) =< s(10)
s(12) =< s(10)*256

  with precondition: [V_bytes>=257] 

 * Renamed intermediate variables: 
[(eq(17,1),s(5))>>s(13)]

#### Simplifying cost structure of CE 17 

#### Simplifying cost structure of CE 18 
 * Renamed intermediate variables: 
[(eq(19,1),s(6))>>s(14),(eq(19,1),s(7))>>s(15),(eq(19,1),s(8))>>s(16)]

#### Simplifying cost structure of CE 19 
 * Renamed intermediate variables: 
[(eq(20,1),s(9))>>s(17),(eq(20,1),s(10))>>s(18),(eq(20,1),s(11))>>s(19),(eq(20,1),s(12))>>s(20)]

#### Simplifying cost structure of CE 20 

#### Cost of chains of eval_cryptRandWriteFile_start(V_bytes,B):
* Chain [20]: 1*s(13)+3
  Such that:s(13) =< V_bytes

  with precondition: [255>=V_bytes,V_bytes>=1] 

* Chain [19]: 1
  with precondition: [0>=V_bytes] 

* Chain [18]: 2*s(15)+1*s(16)+1
  Such that:s(14) =< V_bytes
s(15) =< s(14)
s(16) =< s(14)*256

  with precondition: [V_bytes>=256] 

* Chain [17]: 1*s(17)+2*s(19)+1*s(20)+3
  Such that:s(17) =< 255
s(18) =< V_bytes
s(17) =< s(18)
s(19) =< s(18)
s(20) =< s(18)*256

  with precondition: [V_bytes>=257] 


Closed-form bounds of eval_cryptRandWriteFile_start(V_bytes,B): 
-------------------------------------
* Chain [20] with precondition: [255>=V_bytes,V_bytes>=1] 
    - Upper bound: V_bytes+3 
    - Complexity: n 
* Chain [19] with precondition: [0>=V_bytes] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [18] with precondition: [V_bytes>=256] 
    - Upper bound: 258*V_bytes+1 
    - Complexity: n 
* Chain [17] with precondition: [V_bytes>=257] 
    - Upper bound: 258*V_bytes+258 
    - Complexity: n 

### Maximum cost of eval_cryptRandWriteFile_start(V_bytes,B): nat(V_bytes)*257+255+(nat(V_bytes)+2)+1 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 15 ms.
* Invariants computed in 19 ms.
   - Backward Invariants 9 ms.
   - Transitive Invariants 4 ms.
* Refinement performed in 26 ms.
* Termination proved in 6 ms.
* Upper bounds computed in 35 ms.
   - Equation cost structures 12 ms.
   - Phase cost structures 9 ms.
   - Chain cost structures 11 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 121 ms.


MAYBE

Initial complexity problem:
1:	T:
		(1, 1)    eval_speedFails3_start(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb0_in(v_.0, v_0, v_n, v_t, v_x))
		(?, 1)    eval_speedFails3_bb0_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_0(v_.0, v_0, v_n, v_t, v_x))
		(?, 1)    eval_speedFails3_0(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_1(v_.0, v_0, v_n, v_t, v_x))
		(?, 1)    eval_speedFails3_1(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_2(v_.0, v_0, v_n, v_t, v_x))
		(?, 1)    eval_speedFails3_2(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_3(v_.0, v_0, v_n, v_t, v_x))
		(?, 1)    eval_speedFails3_3(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_nondet_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_4(v_.0, nondef.0, v_n, v_t, v_x))
		(?, 1)    eval_speedFails3_4(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_5(v_.0, v_0, v_n, v_t, v_x))
		(?, 1)    eval_speedFails3_5(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_6(v_.0, v_0, v_n, v_t, v_x))
		(?, 1)    eval_speedFails3_6(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_7(v_.0, v_0, v_n, v_t, v_x))
		(?, 1)    eval_speedFails3_7(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_x, v_0, v_n, v_t, v_x))
		(?, 1)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 >= 0 /\ v_.0 <= v_n ]
		(?, 1)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb3_in(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 < 0 ]
		(?, 1)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb3_in(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 > v_n ]
		(?, 1)    eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_.0 + v_t, v_0, v_n, v_t, v_x)) [ v_0 > 0 ]
		(?, 1)    eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_.0 - v_t, v_0, v_n, v_t, v_x)) [ v_0 <= 0 ]
		(?, 1)    eval_speedFails3_bb3_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_stop(v_.0, v_0, v_n, v_t, v_x))
	start location:	eval_speedFails3_start
	leaf cost:	0

Repeatedly propagating knowledge in problem 1 produces the following problem:
2:	T:
		(1, 1)    eval_speedFails3_start(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb0_in(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_bb0_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_0(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_0(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_1(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_1(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_2(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_2(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_3(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_3(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_nondet_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_4(v_.0, nondef.0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_4(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_5(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_5(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_6(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_6(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_7(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_7(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_x, v_0, v_n, v_t, v_x))
		(?, 1)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 >= 0 /\ v_.0 <= v_n ]
		(?, 1)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb3_in(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 < 0 ]
		(?, 1)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb3_in(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 > v_n ]
		(?, 1)    eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_.0 + v_t, v_0, v_n, v_t, v_x)) [ v_0 > 0 ]
		(?, 1)    eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_.0 - v_t, v_0, v_n, v_t, v_x)) [ v_0 <= 0 ]
		(?, 1)    eval_speedFails3_bb3_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_stop(v_.0, v_0, v_n, v_t, v_x))
	start location:	eval_speedFails3_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval_speedFails3_start) = 2
	Pol(eval_speedFails3_bb0_in) = 2
	Pol(eval_speedFails3_0) = 2
	Pol(eval_llvm.dbg.value_start) = 0
	Pol(eval_speedFails3_1) = 2
	Pol(eval_speedFails3_2) = 2
	Pol(eval_speedFails3_3) = 2
	Pol(eval_nondet_start) = 0
	Pol(eval_speedFails3_4) = 2
	Pol(eval_speedFails3_5) = 2
	Pol(eval_speedFails3_6) = 2
	Pol(eval_speedFails3_7) = 2
	Pol(eval_speedFails3_bb1_in) = 2
	Pol(eval_speedFails3_bb2_in) = 2
	Pol(eval_speedFails3_bb3_in) = 1
	Pol(eval_speedFails3_stop) = 0
orients all transitions weakly and the transitions
	eval_speedFails3_bb3_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_stop(v_.0, v_0, v_n, v_t, v_x))
	eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb3_in(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 < 0 ]
	eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb3_in(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 > v_n ]
strictly and produces the following problem:
3:	T:
		(1, 1)    eval_speedFails3_start(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb0_in(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_bb0_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_0(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_0(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_1(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_1(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_2(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_2(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_3(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_3(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_nondet_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_4(v_.0, nondef.0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_4(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_5(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_5(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_6(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_6(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_7(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_7(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_x, v_0, v_n, v_t, v_x))
		(?, 1)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 >= 0 /\ v_.0 <= v_n ]
		(2, 1)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb3_in(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 < 0 ]
		(2, 1)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb3_in(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 > v_n ]
		(?, 1)    eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_.0 + v_t, v_0, v_n, v_t, v_x)) [ v_0 > 0 ]
		(?, 1)    eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_.0 - v_t, v_0, v_n, v_t, v_x)) [ v_0 <= 0 ]
		(2, 1)    eval_speedFails3_bb3_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_stop(v_.0, v_0, v_n, v_t, v_x))
	start location:	eval_speedFails3_start
	leaf cost:	0

Applied AI with 'oct' on problem 3 to obtain the following invariants:
  For symbol eval_speedFails3_bb2_in: X_3 >= 0 /\ X_1 + X_3 >= 0 /\ -X_1 + X_3 >= 0 /\ X_1 >= 0


This yielded the following problem:
4:	T:
		(2, 1)    eval_speedFails3_bb3_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_stop(v_.0, v_0, v_n, v_t, v_x))
		(?, 1)    eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_.0 - v_t, v_0, v_n, v_t, v_x)) [ v_n >= 0 /\ v_.0 + v_n >= 0 /\ -v_.0 + v_n >= 0 /\ v_.0 >= 0 /\ v_0 <= 0 ]
		(?, 1)    eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_.0 + v_t, v_0, v_n, v_t, v_x)) [ v_n >= 0 /\ v_.0 + v_n >= 0 /\ -v_.0 + v_n >= 0 /\ v_.0 >= 0 /\ v_0 > 0 ]
		(2, 1)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb3_in(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 > v_n ]
		(2, 1)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb3_in(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 < 0 ]
		(?, 1)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 >= 0 /\ v_.0 <= v_n ]
		(1, 1)    eval_speedFails3_7(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_x, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_6(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_7(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_5(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_6(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_4(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_5(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_3(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_nondet_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_4(v_.0, nondef.0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_2(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_3(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_1(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_2(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_0(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_1(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_bb0_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_0(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_start(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb0_in(v_.0, v_0, v_n, v_t, v_x))
	start location:	eval_speedFails3_start
	leaf cost:	0

By chaining the transition eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb3_in(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 > v_n ] with all transitions in problem 4, the following new transition is obtained:
	eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_stop(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 > v_n ]
We thus obtain the following problem:
5:	T:
		(2, 2)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_stop(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 > v_n ]
		(2, 1)    eval_speedFails3_bb3_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_stop(v_.0, v_0, v_n, v_t, v_x))
		(?, 1)    eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_.0 - v_t, v_0, v_n, v_t, v_x)) [ v_n >= 0 /\ v_.0 + v_n >= 0 /\ -v_.0 + v_n >= 0 /\ v_.0 >= 0 /\ v_0 <= 0 ]
		(?, 1)    eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_.0 + v_t, v_0, v_n, v_t, v_x)) [ v_n >= 0 /\ v_.0 + v_n >= 0 /\ -v_.0 + v_n >= 0 /\ v_.0 >= 0 /\ v_0 > 0 ]
		(2, 1)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb3_in(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 < 0 ]
		(?, 1)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 >= 0 /\ v_.0 <= v_n ]
		(1, 1)    eval_speedFails3_7(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_x, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_6(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_7(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_5(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_6(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_4(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_5(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_3(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_nondet_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_4(v_.0, nondef.0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_2(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_3(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_1(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_2(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_0(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_1(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_bb0_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_0(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_start(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb0_in(v_.0, v_0, v_n, v_t, v_x))
	start location:	eval_speedFails3_start
	leaf cost:	0

By chaining the transition eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb3_in(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 < 0 ] with all transitions in problem 5, the following new transition is obtained:
	eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_stop(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 < 0 ]
We thus obtain the following problem:
6:	T:
		(2, 2)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_stop(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 < 0 ]
		(2, 2)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_stop(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 > v_n ]
		(2, 1)    eval_speedFails3_bb3_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_stop(v_.0, v_0, v_n, v_t, v_x))
		(?, 1)    eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_.0 - v_t, v_0, v_n, v_t, v_x)) [ v_n >= 0 /\ v_.0 + v_n >= 0 /\ -v_.0 + v_n >= 0 /\ v_.0 >= 0 /\ v_0 <= 0 ]
		(?, 1)    eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_.0 + v_t, v_0, v_n, v_t, v_x)) [ v_n >= 0 /\ v_.0 + v_n >= 0 /\ -v_.0 + v_n >= 0 /\ v_.0 >= 0 /\ v_0 > 0 ]
		(?, 1)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 >= 0 /\ v_.0 <= v_n ]
		(1, 1)    eval_speedFails3_7(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_x, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_6(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_7(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_5(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_6(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_4(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_5(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_3(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_nondet_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_4(v_.0, nondef.0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_2(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_3(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_1(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_2(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_0(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_1(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_bb0_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_0(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_start(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb0_in(v_.0, v_0, v_n, v_t, v_x))
	start location:	eval_speedFails3_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transition from problem 6:
	eval_speedFails3_bb3_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_stop(v_.0, v_0, v_n, v_t, v_x))
We thus obtain the following problem:
7:	T:
		(?, 1)    eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_.0 + v_t, v_0, v_n, v_t, v_x)) [ v_n >= 0 /\ v_.0 + v_n >= 0 /\ -v_.0 + v_n >= 0 /\ v_.0 >= 0 /\ v_0 > 0 ]
		(?, 1)    eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_.0 - v_t, v_0, v_n, v_t, v_x)) [ v_n >= 0 /\ v_.0 + v_n >= 0 /\ -v_.0 + v_n >= 0 /\ v_.0 >= 0 /\ v_0 <= 0 ]
		(2, 2)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_stop(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 < 0 ]
		(2, 2)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_stop(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 > v_n ]
		(?, 1)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 >= 0 /\ v_.0 <= v_n ]
		(1, 1)    eval_speedFails3_7(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_x, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_6(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_7(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_5(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_6(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_4(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_5(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_3(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_nondet_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_4(v_.0, nondef.0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_2(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_3(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_1(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_2(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_0(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_1(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_bb0_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_0(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_start(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb0_in(v_.0, v_0, v_n, v_t, v_x))
	start location:	eval_speedFails3_start
	leaf cost:	0

By chaining the transition eval_speedFails3_bb0_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_0(v_.0, v_0, v_n, v_t, v_x)) with all transitions in problem 7, the following new transition is obtained:
	eval_speedFails3_bb0_in(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_1(v_.0, v_0, v_n, v_t, v_x))
We thus obtain the following problem:
8:	T:
		(1, 2)    eval_speedFails3_bb0_in(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_1(v_.0, v_0, v_n, v_t, v_x))
		(?, 1)    eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_.0 + v_t, v_0, v_n, v_t, v_x)) [ v_n >= 0 /\ v_.0 + v_n >= 0 /\ -v_.0 + v_n >= 0 /\ v_.0 >= 0 /\ v_0 > 0 ]
		(?, 1)    eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_.0 - v_t, v_0, v_n, v_t, v_x)) [ v_n >= 0 /\ v_.0 + v_n >= 0 /\ -v_.0 + v_n >= 0 /\ v_.0 >= 0 /\ v_0 <= 0 ]
		(2, 2)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_stop(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 < 0 ]
		(2, 2)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_stop(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 > v_n ]
		(?, 1)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 >= 0 /\ v_.0 <= v_n ]
		(1, 1)    eval_speedFails3_7(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_x, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_6(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_7(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_5(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_6(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_4(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_5(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_3(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_nondet_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_4(v_.0, nondef.0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_2(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_3(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_1(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_2(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_0(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_1(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_start(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb0_in(v_.0, v_0, v_n, v_t, v_x))
	start location:	eval_speedFails3_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transition from problem 8:
	eval_speedFails3_0(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_1(v_.0, v_0, v_n, v_t, v_x))
We thus obtain the following problem:
9:	T:
		(?, 1)    eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_.0 + v_t, v_0, v_n, v_t, v_x)) [ v_n >= 0 /\ v_.0 + v_n >= 0 /\ -v_.0 + v_n >= 0 /\ v_.0 >= 0 /\ v_0 > 0 ]
		(?, 1)    eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_.0 - v_t, v_0, v_n, v_t, v_x)) [ v_n >= 0 /\ v_.0 + v_n >= 0 /\ -v_.0 + v_n >= 0 /\ v_.0 >= 0 /\ v_0 <= 0 ]
		(2, 2)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_stop(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 < 0 ]
		(2, 2)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_stop(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 > v_n ]
		(?, 1)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 >= 0 /\ v_.0 <= v_n ]
		(1, 1)    eval_speedFails3_7(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_x, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_6(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_7(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_5(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_6(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_4(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_5(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_3(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_nondet_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_4(v_.0, nondef.0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_2(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_3(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_1(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_2(v_.0, v_0, v_n, v_t, v_x))
		(1, 2)    eval_speedFails3_bb0_in(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_1(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_start(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb0_in(v_.0, v_0, v_n, v_t, v_x))
	start location:	eval_speedFails3_start
	leaf cost:	0

By chaining the transition eval_speedFails3_start(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb0_in(v_.0, v_0, v_n, v_t, v_x)) with all transitions in problem 9, the following new transition is obtained:
	eval_speedFails3_start(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_1(v_.0, v_0, v_n, v_t, v_x))
We thus obtain the following problem:
10:	T:
		(1, 3)    eval_speedFails3_start(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_1(v_.0, v_0, v_n, v_t, v_x))
		(?, 1)    eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_.0 + v_t, v_0, v_n, v_t, v_x)) [ v_n >= 0 /\ v_.0 + v_n >= 0 /\ -v_.0 + v_n >= 0 /\ v_.0 >= 0 /\ v_0 > 0 ]
		(?, 1)    eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_.0 - v_t, v_0, v_n, v_t, v_x)) [ v_n >= 0 /\ v_.0 + v_n >= 0 /\ -v_.0 + v_n >= 0 /\ v_.0 >= 0 /\ v_0 <= 0 ]
		(2, 2)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_stop(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 < 0 ]
		(2, 2)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_stop(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 > v_n ]
		(?, 1)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 >= 0 /\ v_.0 <= v_n ]
		(1, 1)    eval_speedFails3_7(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_x, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_6(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_7(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_5(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_6(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_4(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_5(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_3(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_nondet_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_4(v_.0, nondef.0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_2(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_3(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_1(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_2(v_.0, v_0, v_n, v_t, v_x))
		(1, 2)    eval_speedFails3_bb0_in(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_1(v_.0, v_0, v_n, v_t, v_x))
	start location:	eval_speedFails3_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transition from problem 10:
	eval_speedFails3_bb0_in(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_1(v_.0, v_0, v_n, v_t, v_x))
We thus obtain the following problem:
11:	T:
		(?, 1)    eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_.0 + v_t, v_0, v_n, v_t, v_x)) [ v_n >= 0 /\ v_.0 + v_n >= 0 /\ -v_.0 + v_n >= 0 /\ v_.0 >= 0 /\ v_0 > 0 ]
		(?, 1)    eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_.0 - v_t, v_0, v_n, v_t, v_x)) [ v_n >= 0 /\ v_.0 + v_n >= 0 /\ -v_.0 + v_n >= 0 /\ v_.0 >= 0 /\ v_0 <= 0 ]
		(2, 2)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_stop(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 < 0 ]
		(2, 2)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_stop(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 > v_n ]
		(?, 1)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 >= 0 /\ v_.0 <= v_n ]
		(1, 1)    eval_speedFails3_7(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_x, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_6(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_7(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_5(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_6(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_4(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_5(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_3(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_nondet_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_4(v_.0, nondef.0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_2(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_3(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_1(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_2(v_.0, v_0, v_n, v_t, v_x))
		(1, 3)    eval_speedFails3_start(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_1(v_.0, v_0, v_n, v_t, v_x))
	start location:	eval_speedFails3_start
	leaf cost:	0

By chaining the transition eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 >= 0 /\ v_.0 <= v_n ] with all transitions in problem 11, the following new transitions are obtained:
	eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_.0 + v_t, v_0, v_n, v_t, v_x)) [ v_.0 >= 0 /\ v_.0 <= v_n /\ v_n >= 0 /\ v_.0 + v_n >= 0 /\ -v_.0 + v_n >= 0 /\ v_0 > 0 ]
	eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_.0 - v_t, v_0, v_n, v_t, v_x)) [ v_.0 >= 0 /\ v_.0 <= v_n /\ v_n >= 0 /\ v_.0 + v_n >= 0 /\ -v_.0 + v_n >= 0 /\ v_0 <= 0 ]
We thus obtain the following problem:
12:	T:
		(?, 2)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_.0 + v_t, v_0, v_n, v_t, v_x)) [ v_.0 >= 0 /\ v_.0 <= v_n /\ v_n >= 0 /\ v_.0 + v_n >= 0 /\ -v_.0 + v_n >= 0 /\ v_0 > 0 ]
		(?, 2)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_.0 - v_t, v_0, v_n, v_t, v_x)) [ v_.0 >= 0 /\ v_.0 <= v_n /\ v_n >= 0 /\ v_.0 + v_n >= 0 /\ -v_.0 + v_n >= 0 /\ v_0 <= 0 ]
		(?, 1)    eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_.0 + v_t, v_0, v_n, v_t, v_x)) [ v_n >= 0 /\ v_.0 + v_n >= 0 /\ -v_.0 + v_n >= 0 /\ v_.0 >= 0 /\ v_0 > 0 ]
		(?, 1)    eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_.0 - v_t, v_0, v_n, v_t, v_x)) [ v_n >= 0 /\ v_.0 + v_n >= 0 /\ -v_.0 + v_n >= 0 /\ v_.0 >= 0 /\ v_0 <= 0 ]
		(2, 2)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_stop(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 < 0 ]
		(2, 2)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_stop(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 > v_n ]
		(1, 1)    eval_speedFails3_7(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_x, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_6(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_7(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_5(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_6(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_4(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_5(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_3(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_nondet_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_4(v_.0, nondef.0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_2(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_3(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_1(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_2(v_.0, v_0, v_n, v_t, v_x))
		(1, 3)    eval_speedFails3_start(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_1(v_.0, v_0, v_n, v_t, v_x))
	start location:	eval_speedFails3_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transitions from problem 12:
	eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_.0 + v_t, v_0, v_n, v_t, v_x)) [ v_n >= 0 /\ v_.0 + v_n >= 0 /\ -v_.0 + v_n >= 0 /\ v_.0 >= 0 /\ v_0 > 0 ]
	eval_speedFails3_bb2_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_.0 - v_t, v_0, v_n, v_t, v_x)) [ v_n >= 0 /\ v_.0 + v_n >= 0 /\ -v_.0 + v_n >= 0 /\ v_.0 >= 0 /\ v_0 <= 0 ]
We thus obtain the following problem:
13:	T:
		(?, 2)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_.0 - v_t, v_0, v_n, v_t, v_x)) [ v_.0 >= 0 /\ v_.0 <= v_n /\ v_n >= 0 /\ v_.0 + v_n >= 0 /\ -v_.0 + v_n >= 0 /\ v_0 <= 0 ]
		(?, 2)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_.0 + v_t, v_0, v_n, v_t, v_x)) [ v_.0 >= 0 /\ v_.0 <= v_n /\ v_n >= 0 /\ v_.0 + v_n >= 0 /\ -v_.0 + v_n >= 0 /\ v_0 > 0 ]
		(2, 2)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_stop(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 < 0 ]
		(2, 2)    eval_speedFails3_bb1_in(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_stop(v_.0, v_0, v_n, v_t, v_x)) [ v_.0 > v_n ]
		(1, 1)    eval_speedFails3_7(v_.0, v_0, v_n, v_t, v_x) -> Com_1(eval_speedFails3_bb1_in(v_x, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_6(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_7(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_5(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_6(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_4(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_5(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_3(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_nondet_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_4(v_.0, nondef.0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_2(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_3(v_.0, v_0, v_n, v_t, v_x))
		(1, 1)    eval_speedFails3_1(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_2(v_.0, v_0, v_n, v_t, v_x))
		(1, 3)    eval_speedFails3_start(v_.0, v_0, v_n, v_t, v_x) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_0, v_n, v_t, v_x), eval_speedFails3_1(v_.0, v_0, v_n, v_t, v_x))
	start location:	eval_speedFails3_start
	leaf cost:	0

Complexity upper bound ?

Time: 1.112 sec (SMT: 0.720 sec)

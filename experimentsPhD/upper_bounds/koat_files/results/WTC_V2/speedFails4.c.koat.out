MAYBE

Initial complexity problem:
1:	T:
		(1, 1)    eval_speedFails4_start(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb0_in(v_., v_.0, v_0, v_n, v_x))
		(?, 1)    eval_speedFails4_bb0_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_1(v_., v_.0, nondef.0, v_n, v_x))
		(?, 1)    eval_speedFails4_1(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_2(v_., v_.0, v_0, v_n, v_x))
		(?, 1)    eval_speedFails4_2(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x))
		(?, 1)    eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x))
		(?, 1)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_5(1, v_.0, v_0, v_n, v_x)) [ v_0 >= 1 ]
		(?, 1)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_5(-1, v_.0, v_0, v_n, v_x)) [ v_0 < 1 ]
		(?, 1)    eval_speedFails4_5(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_6(v_., v_.0, v_0, v_n, v_x))
		(?, 1)    eval_speedFails4_6(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x))
		(?, 1)    eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_x, v_0, v_n, v_x))
		(?, 1)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x)) [ v_.0 <= v_n ]
		(?, 1)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb3_in(v_., v_.0, v_0, v_n, v_x)) [ v_.0 > v_n ]
		(?, 1)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_.0 + v_., v_0, v_n, v_x)) [ v_0 >= 1 ]
		(?, 1)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_.0 - v_., v_0, v_n, v_x)) [ v_0 < 1 ]
		(?, 1)    eval_speedFails4_bb3_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0, v_0, v_n, v_x))
	start location:	eval_speedFails4_start
	leaf cost:	0

Repeatedly propagating knowledge in problem 1 produces the following problem:
2:	T:
		(1, 1)    eval_speedFails4_start(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb0_in(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_bb0_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_1(v_., v_.0, nondef.0, v_n, v_x))
		(1, 1)    eval_speedFails4_1(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_2(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_2(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_5(1, v_.0, v_0, v_n, v_x)) [ v_0 >= 1 ]
		(1, 1)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_5(-1, v_.0, v_0, v_n, v_x)) [ v_0 < 1 ]
		(2, 1)    eval_speedFails4_5(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_6(v_., v_.0, v_0, v_n, v_x))
		(2, 1)    eval_speedFails4_6(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x))
		(2, 1)    eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_x, v_0, v_n, v_x))
		(?, 1)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x)) [ v_.0 <= v_n ]
		(?, 1)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb3_in(v_., v_.0, v_0, v_n, v_x)) [ v_.0 > v_n ]
		(?, 1)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_.0 + v_., v_0, v_n, v_x)) [ v_0 >= 1 ]
		(?, 1)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_.0 - v_., v_0, v_n, v_x)) [ v_0 < 1 ]
		(?, 1)    eval_speedFails4_bb3_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0, v_0, v_n, v_x))
	start location:	eval_speedFails4_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval_speedFails4_start) = 2
	Pol(eval_speedFails4_bb0_in) = 2
	Pol(eval_speedFails4_1) = 2
	Pol(eval_llvm.dbg.value_start) = 0
	Pol(eval_speedFails4_2) = 2
	Pol(eval_speedFails4_3) = 2
	Pol(eval_speedFails4_4) = 2
	Pol(eval_speedFails4_5) = 2
	Pol(eval_speedFails4_6) = 2
	Pol(eval_speedFails4_7) = 2
	Pol(eval_speedFails4_bb1_in) = 2
	Pol(eval_speedFails4_bb2_in) = 2
	Pol(eval_speedFails4_bb3_in) = 1
	Pol(eval_speedFails4_stop) = 0
orients all transitions weakly and the transitions
	eval_speedFails4_bb3_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0, v_0, v_n, v_x))
	eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb3_in(v_., v_.0, v_0, v_n, v_x)) [ v_.0 > v_n ]
strictly and produces the following problem:
3:	T:
		(1, 1)    eval_speedFails4_start(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb0_in(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_bb0_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_1(v_., v_.0, nondef.0, v_n, v_x))
		(1, 1)    eval_speedFails4_1(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_2(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_2(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_5(1, v_.0, v_0, v_n, v_x)) [ v_0 >= 1 ]
		(1, 1)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_5(-1, v_.0, v_0, v_n, v_x)) [ v_0 < 1 ]
		(2, 1)    eval_speedFails4_5(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_6(v_., v_.0, v_0, v_n, v_x))
		(2, 1)    eval_speedFails4_6(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x))
		(2, 1)    eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_x, v_0, v_n, v_x))
		(?, 1)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x)) [ v_.0 <= v_n ]
		(2, 1)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb3_in(v_., v_.0, v_0, v_n, v_x)) [ v_.0 > v_n ]
		(?, 1)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_.0 + v_., v_0, v_n, v_x)) [ v_0 >= 1 ]
		(?, 1)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_.0 - v_., v_0, v_n, v_x)) [ v_0 < 1 ]
		(2, 1)    eval_speedFails4_bb3_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0, v_0, v_n, v_x))
	start location:	eval_speedFails4_start
	leaf cost:	0

Applied AI with 'oct' on problem 3 to obtain the following invariants:
  For symbol eval_speedFails4_5: -X_1 + 1 >= 0 /\ X_1 + 1 >= 0
  For symbol eval_speedFails4_6: -X_1 + 1 >= 0 /\ X_1 + 1 >= 0
  For symbol eval_speedFails4_7: -X_1 + 1 >= 0 /\ X_1 + 1 >= 0
  For symbol eval_speedFails4_bb1_in: -X_1 + 1 >= 0 /\ X_1 + 1 >= 0
  For symbol eval_speedFails4_bb2_in: -X_2 + X_4 >= 0 /\ -X_1 + 1 >= 0 /\ X_1 + 1 >= 0
  For symbol eval_speedFails4_bb3_in: X_2 - X_4 - 1 >= 0 /\ -X_1 + 1 >= 0 /\ X_1 + 1 >= 0


This yielded the following problem:
4:	T:
		(2, 1)    eval_speedFails4_bb3_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0, v_0, v_n, v_x)) [ v_.0 - v_n - 1 >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(?, 1)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_.0 - v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 < 1 ]
		(?, 1)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_.0 + v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 >= 1 ]
		(2, 1)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb3_in(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 > v_n ]
		(?, 1)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 <= v_n ]
		(2, 1)    eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_x, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(2, 1)    eval_speedFails4_6(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(2, 1)    eval_speedFails4_5(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_6(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(1, 1)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_5(-1, v_.0, v_0, v_n, v_x)) [ v_0 < 1 ]
		(1, 1)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_5(1, v_.0, v_0, v_n, v_x)) [ v_0 >= 1 ]
		(1, 1)    eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_2(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_1(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_2(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_bb0_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_1(v_., v_.0, nondef.0, v_n, v_x))
		(1, 1)    eval_speedFails4_start(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb0_in(v_., v_.0, v_0, v_n, v_x))
	start location:	eval_speedFails4_start
	leaf cost:	0

By chaining the transition eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb3_in(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 > v_n ] with all transitions in problem 4, the following new transition is obtained:
	eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
We thus obtain the following problem:
5:	T:
		(2, 2)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
		(2, 1)    eval_speedFails4_bb3_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0, v_0, v_n, v_x)) [ v_.0 - v_n - 1 >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(?, 1)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_.0 - v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 < 1 ]
		(?, 1)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_.0 + v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 >= 1 ]
		(?, 1)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 <= v_n ]
		(2, 1)    eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_x, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(2, 1)    eval_speedFails4_6(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(2, 1)    eval_speedFails4_5(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_6(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(1, 1)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_5(-1, v_.0, v_0, v_n, v_x)) [ v_0 < 1 ]
		(1, 1)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_5(1, v_.0, v_0, v_n, v_x)) [ v_0 >= 1 ]
		(1, 1)    eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_2(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_1(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_2(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_bb0_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_1(v_., v_.0, nondef.0, v_n, v_x))
		(1, 1)    eval_speedFails4_start(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb0_in(v_., v_.0, v_0, v_n, v_x))
	start location:	eval_speedFails4_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transition from problem 5:
	eval_speedFails4_bb3_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0, v_0, v_n, v_x)) [ v_.0 - v_n - 1 >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
We thus obtain the following problem:
6:	T:
		(?, 1)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_.0 + v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 >= 1 ]
		(?, 1)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_.0 - v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 < 1 ]
		(2, 2)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
		(?, 1)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 <= v_n ]
		(2, 1)    eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_x, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(2, 1)    eval_speedFails4_6(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(2, 1)    eval_speedFails4_5(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_6(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(1, 1)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_5(1, v_.0, v_0, v_n, v_x)) [ v_0 >= 1 ]
		(1, 1)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_5(-1, v_.0, v_0, v_n, v_x)) [ v_0 < 1 ]
		(1, 1)    eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_2(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_1(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_2(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_bb0_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_1(v_., v_.0, nondef.0, v_n, v_x))
		(1, 1)    eval_speedFails4_start(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb0_in(v_., v_.0, v_0, v_n, v_x))
	start location:	eval_speedFails4_start
	leaf cost:	0

By chaining the transition eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_5(1, v_.0, v_0, v_n, v_x)) [ v_0 >= 1 ] with all transitions in problem 6, the following new transition is obtained:
	eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(1, v_.0, v_0, v_n, v_x), eval_speedFails4_6(1, v_.0, v_0, v_n, v_x)) [ v_0 >= 1 /\ 0 >= 0 /\ 2 >= 0 ]
We thus obtain the following problem:
7:	T:
		(1, 2)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(1, v_.0, v_0, v_n, v_x), eval_speedFails4_6(1, v_.0, v_0, v_n, v_x)) [ v_0 >= 1 /\ 0 >= 0 /\ 2 >= 0 ]
		(?, 1)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_.0 + v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 >= 1 ]
		(?, 1)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_.0 - v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 < 1 ]
		(2, 2)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
		(?, 1)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 <= v_n ]
		(2, 1)    eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_x, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(2, 1)    eval_speedFails4_6(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(2, 1)    eval_speedFails4_5(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_6(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(1, 1)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_5(-1, v_.0, v_0, v_n, v_x)) [ v_0 < 1 ]
		(1, 1)    eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_2(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_1(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_2(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_bb0_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_1(v_., v_.0, nondef.0, v_n, v_x))
		(1, 1)    eval_speedFails4_start(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb0_in(v_., v_.0, v_0, v_n, v_x))
	start location:	eval_speedFails4_start
	leaf cost:	0

By chaining the transition eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_5(-1, v_.0, v_0, v_n, v_x)) [ v_0 < 1 ] with all transitions in problem 7, the following new transition is obtained:
	eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(-1, v_.0, v_0, v_n, v_x), eval_speedFails4_6(-1, v_.0, v_0, v_n, v_x)) [ v_0 < 1 /\ 2 >= 0 /\ 0 >= 0 ]
We thus obtain the following problem:
8:	T:
		(1, 2)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(-1, v_.0, v_0, v_n, v_x), eval_speedFails4_6(-1, v_.0, v_0, v_n, v_x)) [ v_0 < 1 /\ 2 >= 0 /\ 0 >= 0 ]
		(1, 2)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(1, v_.0, v_0, v_n, v_x), eval_speedFails4_6(1, v_.0, v_0, v_n, v_x)) [ v_0 >= 1 /\ 0 >= 0 /\ 2 >= 0 ]
		(?, 1)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_.0 + v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 >= 1 ]
		(?, 1)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_.0 - v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 < 1 ]
		(2, 2)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
		(?, 1)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 <= v_n ]
		(2, 1)    eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_x, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(2, 1)    eval_speedFails4_6(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(2, 1)    eval_speedFails4_5(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_6(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(1, 1)    eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_2(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_1(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_2(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_bb0_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_1(v_., v_.0, nondef.0, v_n, v_x))
		(1, 1)    eval_speedFails4_start(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb0_in(v_., v_.0, v_0, v_n, v_x))
	start location:	eval_speedFails4_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transition from problem 8:
	eval_speedFails4_5(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_6(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
We thus obtain the following problem:
9:	T:
		(?, 1)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_.0 + v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 >= 1 ]
		(?, 1)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_.0 - v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 < 1 ]
		(2, 2)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
		(?, 1)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 <= v_n ]
		(2, 1)    eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_x, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(2, 1)    eval_speedFails4_6(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(1, 2)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(-1, v_.0, v_0, v_n, v_x), eval_speedFails4_6(-1, v_.0, v_0, v_n, v_x)) [ v_0 < 1 /\ 2 >= 0 /\ 0 >= 0 ]
		(1, 2)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(1, v_.0, v_0, v_n, v_x), eval_speedFails4_6(1, v_.0, v_0, v_n, v_x)) [ v_0 >= 1 /\ 0 >= 0 /\ 2 >= 0 ]
		(1, 1)    eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_2(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_1(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_2(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_bb0_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_1(v_., v_.0, nondef.0, v_n, v_x))
		(1, 1)    eval_speedFails4_start(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb0_in(v_., v_.0, v_0, v_n, v_x))
	start location:	eval_speedFails4_start
	leaf cost:	0

By chaining the transition eval_speedFails4_bb0_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_1(v_., v_.0, nondef.0, v_n, v_x)) with all transitions in problem 9, the following new transition is obtained:
	eval_speedFails4_bb0_in(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, nondef.0, v_n, v_x), eval_speedFails4_2(v_., v_.0, nondef.0, v_n, v_x))
We thus obtain the following problem:
10:	T:
		(1, 2)    eval_speedFails4_bb0_in(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, nondef.0, v_n, v_x), eval_speedFails4_2(v_., v_.0, nondef.0, v_n, v_x))
		(?, 1)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_.0 + v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 >= 1 ]
		(?, 1)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_.0 - v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 < 1 ]
		(2, 2)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
		(?, 1)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 <= v_n ]
		(2, 1)    eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_x, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(2, 1)    eval_speedFails4_6(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(1, 2)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(-1, v_.0, v_0, v_n, v_x), eval_speedFails4_6(-1, v_.0, v_0, v_n, v_x)) [ v_0 < 1 /\ 2 >= 0 /\ 0 >= 0 ]
		(1, 2)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(1, v_.0, v_0, v_n, v_x), eval_speedFails4_6(1, v_.0, v_0, v_n, v_x)) [ v_0 >= 1 /\ 0 >= 0 /\ 2 >= 0 ]
		(1, 1)    eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_2(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_1(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_2(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_start(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb0_in(v_., v_.0, v_0, v_n, v_x))
	start location:	eval_speedFails4_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transition from problem 10:
	eval_speedFails4_1(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_2(v_., v_.0, v_0, v_n, v_x))
We thus obtain the following problem:
11:	T:
		(?, 1)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_.0 + v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 >= 1 ]
		(?, 1)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_.0 - v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 < 1 ]
		(2, 2)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
		(?, 1)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 <= v_n ]
		(2, 1)    eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_x, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(2, 1)    eval_speedFails4_6(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(1, 2)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(-1, v_.0, v_0, v_n, v_x), eval_speedFails4_6(-1, v_.0, v_0, v_n, v_x)) [ v_0 < 1 /\ 2 >= 0 /\ 0 >= 0 ]
		(1, 2)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(1, v_.0, v_0, v_n, v_x), eval_speedFails4_6(1, v_.0, v_0, v_n, v_x)) [ v_0 >= 1 /\ 0 >= 0 /\ 2 >= 0 ]
		(1, 1)    eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_2(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x))
		(1, 2)    eval_speedFails4_bb0_in(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, nondef.0, v_n, v_x), eval_speedFails4_2(v_., v_.0, nondef.0, v_n, v_x))
		(1, 1)    eval_speedFails4_start(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb0_in(v_., v_.0, v_0, v_n, v_x))
	start location:	eval_speedFails4_start
	leaf cost:	0

By chaining the transition eval_speedFails4_start(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb0_in(v_., v_.0, v_0, v_n, v_x)) with all transitions in problem 11, the following new transition is obtained:
	eval_speedFails4_start(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, nondef.0, v_n, v_x), eval_speedFails4_2(v_., v_.0, nondef.0, v_n, v_x))
We thus obtain the following problem:
12:	T:
		(1, 3)    eval_speedFails4_start(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, nondef.0, v_n, v_x), eval_speedFails4_2(v_., v_.0, nondef.0, v_n, v_x))
		(?, 1)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_.0 + v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 >= 1 ]
		(?, 1)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_.0 - v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 < 1 ]
		(2, 2)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
		(?, 1)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 <= v_n ]
		(2, 1)    eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_x, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(2, 1)    eval_speedFails4_6(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(1, 2)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(-1, v_.0, v_0, v_n, v_x), eval_speedFails4_6(-1, v_.0, v_0, v_n, v_x)) [ v_0 < 1 /\ 2 >= 0 /\ 0 >= 0 ]
		(1, 2)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(1, v_.0, v_0, v_n, v_x), eval_speedFails4_6(1, v_.0, v_0, v_n, v_x)) [ v_0 >= 1 /\ 0 >= 0 /\ 2 >= 0 ]
		(1, 1)    eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_2(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x))
		(1, 2)    eval_speedFails4_bb0_in(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, nondef.0, v_n, v_x), eval_speedFails4_2(v_., v_.0, nondef.0, v_n, v_x))
	start location:	eval_speedFails4_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transition from problem 12:
	eval_speedFails4_bb0_in(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, nondef.0, v_n, v_x), eval_speedFails4_2(v_., v_.0, nondef.0, v_n, v_x))
We thus obtain the following problem:
13:	T:
		(?, 1)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_.0 + v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 >= 1 ]
		(?, 1)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_.0 - v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 < 1 ]
		(2, 2)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
		(?, 1)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 <= v_n ]
		(2, 1)    eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_x, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(2, 1)    eval_speedFails4_6(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(1, 2)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(-1, v_.0, v_0, v_n, v_x), eval_speedFails4_6(-1, v_.0, v_0, v_n, v_x)) [ v_0 < 1 /\ 2 >= 0 /\ 0 >= 0 ]
		(1, 2)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(1, v_.0, v_0, v_n, v_x), eval_speedFails4_6(1, v_.0, v_0, v_n, v_x)) [ v_0 >= 1 /\ 0 >= 0 /\ 2 >= 0 ]
		(1, 1)    eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_2(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x))
		(1, 3)    eval_speedFails4_start(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, nondef.0, v_n, v_x), eval_speedFails4_2(v_., v_.0, nondef.0, v_n, v_x))
	start location:	eval_speedFails4_start
	leaf cost:	0

By chaining the transition eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_.0 + v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 >= 1 ] with all transitions in problem 13, the following new transitions are obtained:
	eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0 + v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 >= 1 /\ v_.0 + v_. > v_n /\ v_.0 + v_. - v_n - 1 >= 0 ]
	eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_.0 + v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 >= 1 /\ v_.0 + v_. <= v_n ]
We thus obtain the following problem:
14:	T:
		(?, 3)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0 + v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 >= 1 /\ v_.0 + v_. > v_n /\ v_.0 + v_. - v_n - 1 >= 0 ]
		(?, 2)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_.0 + v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 >= 1 /\ v_.0 + v_. <= v_n ]
		(?, 1)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_.0 - v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 < 1 ]
		(2, 2)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
		(?, 1)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 <= v_n ]
		(2, 1)    eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_x, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(2, 1)    eval_speedFails4_6(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(1, 2)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(-1, v_.0, v_0, v_n, v_x), eval_speedFails4_6(-1, v_.0, v_0, v_n, v_x)) [ v_0 < 1 /\ 2 >= 0 /\ 0 >= 0 ]
		(1, 2)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(1, v_.0, v_0, v_n, v_x), eval_speedFails4_6(1, v_.0, v_0, v_n, v_x)) [ v_0 >= 1 /\ 0 >= 0 /\ 2 >= 0 ]
		(1, 1)    eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_2(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x))
		(1, 3)    eval_speedFails4_start(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, nondef.0, v_n, v_x), eval_speedFails4_2(v_., v_.0, nondef.0, v_n, v_x))
	start location:	eval_speedFails4_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval_speedFails4_bb2_in) = V_1 + 1
	Pol(eval_speedFails4_stop) = V_1
	Pol(eval_speedFails4_bb1_in) = V_1 + 1
	Pol(eval_speedFails4_7) = V_1 + 1
	Pol(eval_speedFails4_6) = V_1 + 1
	Pol(eval_llvm.dbg.value_start) = 0
	Pol(eval_speedFails4_4) = 2
	Pol(eval_speedFails4_3) = 2
	Pol(eval_speedFails4_2) = 2
	Pol(eval_speedFails4_start) = 2
orients all transitions weakly and the transition
	eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0 + v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 >= 1 /\ v_.0 + v_. > v_n /\ v_.0 + v_. - v_n - 1 >= 0 ]
strictly and produces the following problem:
15:	T:
		(2, 3)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0 + v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 >= 1 /\ v_.0 + v_. > v_n /\ v_.0 + v_. - v_n - 1 >= 0 ]
		(?, 2)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_.0 + v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 >= 1 /\ v_.0 + v_. <= v_n ]
		(?, 1)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_.0 - v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 < 1 ]
		(2, 2)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
		(?, 1)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 <= v_n ]
		(2, 1)    eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_x, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(2, 1)    eval_speedFails4_6(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(1, 2)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(-1, v_.0, v_0, v_n, v_x), eval_speedFails4_6(-1, v_.0, v_0, v_n, v_x)) [ v_0 < 1 /\ 2 >= 0 /\ 0 >= 0 ]
		(1, 2)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(1, v_.0, v_0, v_n, v_x), eval_speedFails4_6(1, v_.0, v_0, v_n, v_x)) [ v_0 >= 1 /\ 0 >= 0 /\ 2 >= 0 ]
		(1, 1)    eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_2(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x))
		(1, 3)    eval_speedFails4_start(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, nondef.0, v_n, v_x), eval_speedFails4_2(v_., v_.0, nondef.0, v_n, v_x))
	start location:	eval_speedFails4_start
	leaf cost:	0

By chaining the transition eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_.0 - v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 < 1 ] with all transitions in problem 15, the following new transitions are obtained:
	eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0 - v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 < 1 /\ v_.0 - v_. > v_n /\ v_.0 - v_. - v_n - 1 >= 0 ]
	eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_.0 - v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 < 1 /\ v_.0 - v_. <= v_n ]
We thus obtain the following problem:
16:	T:
		(?, 3)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0 - v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 < 1 /\ v_.0 - v_. > v_n /\ v_.0 - v_. - v_n - 1 >= 0 ]
		(?, 2)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_.0 - v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 < 1 /\ v_.0 - v_. <= v_n ]
		(2, 3)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0 + v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 >= 1 /\ v_.0 + v_. > v_n /\ v_.0 + v_. - v_n - 1 >= 0 ]
		(?, 2)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_.0 + v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 >= 1 /\ v_.0 + v_. <= v_n ]
		(2, 2)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
		(?, 1)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 <= v_n ]
		(2, 1)    eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_x, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(2, 1)    eval_speedFails4_6(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(1, 2)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(-1, v_.0, v_0, v_n, v_x), eval_speedFails4_6(-1, v_.0, v_0, v_n, v_x)) [ v_0 < 1 /\ 2 >= 0 /\ 0 >= 0 ]
		(1, 2)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(1, v_.0, v_0, v_n, v_x), eval_speedFails4_6(1, v_.0, v_0, v_n, v_x)) [ v_0 >= 1 /\ 0 >= 0 /\ 2 >= 0 ]
		(1, 1)    eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_2(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x))
		(1, 3)    eval_speedFails4_start(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, nondef.0, v_n, v_x), eval_speedFails4_2(v_., v_.0, nondef.0, v_n, v_x))
	start location:	eval_speedFails4_start
	leaf cost:	0

Repeatedly propagating knowledge in problem 16 produces the following problem:
17:	T:
		(?, 3)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0 - v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 < 1 /\ v_.0 - v_. > v_n /\ v_.0 - v_. - v_n - 1 >= 0 ]
		(?, 2)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_.0 - v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 < 1 /\ v_.0 - v_. <= v_n ]
		(2, 3)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0 + v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 >= 1 /\ v_.0 + v_. > v_n /\ v_.0 + v_. - v_n - 1 >= 0 ]
		(?, 2)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_.0 + v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 >= 1 /\ v_.0 + v_. <= v_n ]
		(2, 2)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
		(2, 1)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 <= v_n ]
		(2, 1)    eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_x, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(2, 1)    eval_speedFails4_6(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(1, 2)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(-1, v_.0, v_0, v_n, v_x), eval_speedFails4_6(-1, v_.0, v_0, v_n, v_x)) [ v_0 < 1 /\ 2 >= 0 /\ 0 >= 0 ]
		(1, 2)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(1, v_.0, v_0, v_n, v_x), eval_speedFails4_6(1, v_.0, v_0, v_n, v_x)) [ v_0 >= 1 /\ 0 >= 0 /\ 2 >= 0 ]
		(1, 1)    eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_2(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x))
		(1, 3)    eval_speedFails4_start(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, nondef.0, v_n, v_x), eval_speedFails4_2(v_., v_.0, nondef.0, v_n, v_x))
	start location:	eval_speedFails4_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval_speedFails4_bb2_in) = -V_1 + 1
	Pol(eval_speedFails4_stop) = -1
	Pol(eval_speedFails4_bb1_in) = -V_1 + 1
	Pol(eval_speedFails4_7) = -V_1 + 1
	Pol(eval_speedFails4_6) = -V_1 + 1
	Pol(eval_llvm.dbg.value_start) = 0
	Pol(eval_speedFails4_4) = 2
	Pol(eval_speedFails4_3) = 2
	Pol(eval_speedFails4_2) = 2
	Pol(eval_speedFails4_start) = 2
orients all transitions weakly and the transition
	eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0 - v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 < 1 /\ v_.0 - v_. > v_n /\ v_.0 - v_. - v_n - 1 >= 0 ]
strictly and produces the following problem:
18:	T:
		(2, 3)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0 - v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 < 1 /\ v_.0 - v_. > v_n /\ v_.0 - v_. - v_n - 1 >= 0 ]
		(?, 2)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_.0 - v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 < 1 /\ v_.0 - v_. <= v_n ]
		(2, 3)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0 + v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 >= 1 /\ v_.0 + v_. > v_n /\ v_.0 + v_. - v_n - 1 >= 0 ]
		(?, 2)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_.0 + v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 >= 1 /\ v_.0 + v_. <= v_n ]
		(2, 2)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
		(2, 1)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 <= v_n ]
		(2, 1)    eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_x, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(2, 1)    eval_speedFails4_6(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(1, 2)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(-1, v_.0, v_0, v_n, v_x), eval_speedFails4_6(-1, v_.0, v_0, v_n, v_x)) [ v_0 < 1 /\ 2 >= 0 /\ 0 >= 0 ]
		(1, 2)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(1, v_.0, v_0, v_n, v_x), eval_speedFails4_6(1, v_.0, v_0, v_n, v_x)) [ v_0 >= 1 /\ 0 >= 0 /\ 2 >= 0 ]
		(1, 1)    eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_2(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x))
		(1, 3)    eval_speedFails4_start(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, nondef.0, v_n, v_x), eval_speedFails4_2(v_., v_.0, nondef.0, v_n, v_x))
	start location:	eval_speedFails4_start
	leaf cost:	0

By chaining the transition eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb1_in(v_., v_x, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ] with all transitions in problem 18, the following new transitions are obtained:
	eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_x, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_x > v_n /\ v_x - v_n - 1 >= 0 ]
	eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_x, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_x <= v_n ]
We thus obtain the following problem:
19:	T:
		(2, 3)    eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_x, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_x > v_n /\ v_x - v_n - 1 >= 0 ]
		(2, 2)    eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_x, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_x <= v_n ]
		(2, 3)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0 - v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 < 1 /\ v_.0 - v_. > v_n /\ v_.0 - v_. - v_n - 1 >= 0 ]
		(?, 2)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_.0 - v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 < 1 /\ v_.0 - v_. <= v_n ]
		(2, 3)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0 + v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 >= 1 /\ v_.0 + v_. > v_n /\ v_.0 + v_. - v_n - 1 >= 0 ]
		(?, 2)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_.0 + v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 >= 1 /\ v_.0 + v_. <= v_n ]
		(2, 2)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
		(2, 1)    eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 <= v_n ]
		(2, 1)    eval_speedFails4_6(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(1, 2)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(-1, v_.0, v_0, v_n, v_x), eval_speedFails4_6(-1, v_.0, v_0, v_n, v_x)) [ v_0 < 1 /\ 2 >= 0 /\ 0 >= 0 ]
		(1, 2)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(1, v_.0, v_0, v_n, v_x), eval_speedFails4_6(1, v_.0, v_0, v_n, v_x)) [ v_0 >= 1 /\ 0 >= 0 /\ 2 >= 0 ]
		(1, 1)    eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_2(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x))
		(1, 3)    eval_speedFails4_start(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, nondef.0, v_n, v_x), eval_speedFails4_2(v_., v_.0, nondef.0, v_n, v_x))
	start location:	eval_speedFails4_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transitions from problem 19:
	eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
	eval_speedFails4_bb1_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_.0 <= v_n ]
We thus obtain the following problem:
20:	T:
		(?, 2)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_.0 - v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 < 1 /\ v_.0 - v_. <= v_n ]
		(2, 3)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0 - v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 < 1 /\ v_.0 - v_. > v_n /\ v_.0 - v_. - v_n - 1 >= 0 ]
		(?, 2)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_.0 + v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 >= 1 /\ v_.0 + v_. <= v_n ]
		(2, 3)    eval_speedFails4_bb2_in(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_.0 + v_., v_0, v_n, v_x)) [ -v_.0 + v_n >= 0 /\ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_0 >= 1 /\ v_.0 + v_. > v_n /\ v_.0 + v_. - v_n - 1 >= 0 ]
		(2, 2)    eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_bb2_in(v_., v_x, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_x <= v_n ]
		(2, 3)    eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x) -> Com_1(eval_speedFails4_stop(v_., v_x, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 /\ v_x > v_n /\ v_x - v_n - 1 >= 0 ]
		(2, 1)    eval_speedFails4_6(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_7(v_., v_.0, v_0, v_n, v_x)) [ -v_. + 1 >= 0 /\ v_. + 1 >= 0 ]
		(1, 2)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(-1, v_.0, v_0, v_n, v_x), eval_speedFails4_6(-1, v_.0, v_0, v_n, v_x)) [ v_0 < 1 /\ 2 >= 0 /\ 0 >= 0 ]
		(1, 2)    eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(1, v_.0, v_0, v_n, v_x), eval_speedFails4_6(1, v_.0, v_0, v_n, v_x)) [ v_0 >= 1 /\ 0 >= 0 /\ 2 >= 0 ]
		(1, 1)    eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_4(v_., v_.0, v_0, v_n, v_x))
		(1, 1)    eval_speedFails4_2(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, v_0, v_n, v_x), eval_speedFails4_3(v_., v_.0, v_0, v_n, v_x))
		(1, 3)    eval_speedFails4_start(v_., v_.0, v_0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_., v_.0, nondef.0, v_n, v_x), eval_speedFails4_2(v_., v_.0, nondef.0, v_n, v_x))
	start location:	eval_speedFails4_start
	leaf cost:	0

Complexity upper bound ?

Time: 1.462 sec (SMT: 1.029 sec)

MAYBE

Initial complexity problem:
1:	T:
		(1, 1)    eval_speedFails2_start(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb0_in(v_i.0, v_n, v_x))
		(?, 1)    eval_speedFails2_bb0_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_0(v_i.0, v_n, v_x))
		(?, 1)    eval_speedFails2_0(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_1(v_i.0, v_n, v_x))
		(?, 1)    eval_speedFails2_1(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_2(v_i.0, v_n, v_x))
		(?, 1)    eval_speedFails2_2(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_3(v_i.0, v_n, v_x))
		(?, 1)    eval_speedFails2_3(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_4(v_i.0, v_n, v_x))
		(?, 1)    eval_speedFails2_4(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_x, v_n, v_x))
		(?, 1)    eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb2_in(v_i.0, v_n, v_x)) [ v_i.0 < v_n ]
		(?, 1)    eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb2_in(v_i.0, v_n, v_x)) [ v_i.0 > v_n ]
		(?, 1)    eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb3_in(v_i.0, v_n, v_x)) [ v_i.0 = v_n ]
		(?, 1)    eval_speedFails2_bb2_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_i.0 + 1, v_n, v_x))
		(?, 1)    eval_speedFails2_bb3_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_stop(v_i.0, v_n, v_x))
	start location:	eval_speedFails2_start
	leaf cost:	0

Repeatedly propagating knowledge in problem 1 produces the following problem:
2:	T:
		(1, 1)    eval_speedFails2_start(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb0_in(v_i.0, v_n, v_x))
		(1, 1)    eval_speedFails2_bb0_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_0(v_i.0, v_n, v_x))
		(1, 1)    eval_speedFails2_0(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_1(v_i.0, v_n, v_x))
		(1, 1)    eval_speedFails2_1(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_2(v_i.0, v_n, v_x))
		(1, 1)    eval_speedFails2_2(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_3(v_i.0, v_n, v_x))
		(1, 1)    eval_speedFails2_3(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_4(v_i.0, v_n, v_x))
		(1, 1)    eval_speedFails2_4(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_x, v_n, v_x))
		(?, 1)    eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb2_in(v_i.0, v_n, v_x)) [ v_i.0 < v_n ]
		(?, 1)    eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb2_in(v_i.0, v_n, v_x)) [ v_i.0 > v_n ]
		(?, 1)    eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb3_in(v_i.0, v_n, v_x)) [ v_i.0 = v_n ]
		(?, 1)    eval_speedFails2_bb2_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_i.0 + 1, v_n, v_x))
		(?, 1)    eval_speedFails2_bb3_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_stop(v_i.0, v_n, v_x))
	start location:	eval_speedFails2_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval_speedFails2_start) = 2
	Pol(eval_speedFails2_bb0_in) = 2
	Pol(eval_speedFails2_0) = 2
	Pol(eval_llvm.dbg.value_start) = 0
	Pol(eval_speedFails2_1) = 2
	Pol(eval_speedFails2_2) = 2
	Pol(eval_speedFails2_3) = 2
	Pol(eval_speedFails2_4) = 2
	Pol(eval_speedFails2_bb1_in) = 2
	Pol(eval_speedFails2_bb2_in) = 2
	Pol(eval_speedFails2_bb3_in) = 1
	Pol(eval_speedFails2_stop) = 0
orients all transitions weakly and the transitions
	eval_speedFails2_bb3_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_stop(v_i.0, v_n, v_x))
	eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb3_in(v_i.0, v_n, v_x)) [ v_i.0 = v_n ]
strictly and produces the following problem:
3:	T:
		(1, 1)    eval_speedFails2_start(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb0_in(v_i.0, v_n, v_x))
		(1, 1)    eval_speedFails2_bb0_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_0(v_i.0, v_n, v_x))
		(1, 1)    eval_speedFails2_0(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_1(v_i.0, v_n, v_x))
		(1, 1)    eval_speedFails2_1(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_2(v_i.0, v_n, v_x))
		(1, 1)    eval_speedFails2_2(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_3(v_i.0, v_n, v_x))
		(1, 1)    eval_speedFails2_3(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_4(v_i.0, v_n, v_x))
		(1, 1)    eval_speedFails2_4(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_x, v_n, v_x))
		(?, 1)    eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb2_in(v_i.0, v_n, v_x)) [ v_i.0 < v_n ]
		(?, 1)    eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb2_in(v_i.0, v_n, v_x)) [ v_i.0 > v_n ]
		(2, 1)    eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb3_in(v_i.0, v_n, v_x)) [ v_i.0 = v_n ]
		(?, 1)    eval_speedFails2_bb2_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_i.0 + 1, v_n, v_x))
		(2, 1)    eval_speedFails2_bb3_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_stop(v_i.0, v_n, v_x))
	start location:	eval_speedFails2_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval_speedFails2_bb2_in) = -V_1 + V_2 - 1
	Pol(eval_speedFails2_bb1_in) = -V_1 + V_2
and size complexities
	S("eval_speedFails2_bb3_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_stop(v_i.0, v_n, v_x))", 0-0) = ?
	S("eval_speedFails2_bb3_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_stop(v_i.0, v_n, v_x))", 0-1) = v_n
	S("eval_speedFails2_bb3_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_stop(v_i.0, v_n, v_x))", 0-2) = v_x
	S("eval_speedFails2_bb2_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_i.0 + 1, v_n, v_x))", 0-0) = ?
	S("eval_speedFails2_bb2_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_i.0 + 1, v_n, v_x))", 0-1) = v_n
	S("eval_speedFails2_bb2_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_i.0 + 1, v_n, v_x))", 0-2) = v_x
	S("eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb3_in(v_i.0, v_n, v_x)) [ v_i.0 = v_n ]", 0-0) = ?
	S("eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb3_in(v_i.0, v_n, v_x)) [ v_i.0 = v_n ]", 0-1) = v_n
	S("eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb3_in(v_i.0, v_n, v_x)) [ v_i.0 = v_n ]", 0-2) = v_x
	S("eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb2_in(v_i.0, v_n, v_x)) [ v_i.0 > v_n ]", 0-0) = ?
	S("eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb2_in(v_i.0, v_n, v_x)) [ v_i.0 > v_n ]", 0-1) = v_n
	S("eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb2_in(v_i.0, v_n, v_x)) [ v_i.0 > v_n ]", 0-2) = v_x
	S("eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb2_in(v_i.0, v_n, v_x)) [ v_i.0 < v_n ]", 0-0) = ?
	S("eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb2_in(v_i.0, v_n, v_x)) [ v_i.0 < v_n ]", 0-1) = v_n
	S("eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb2_in(v_i.0, v_n, v_x)) [ v_i.0 < v_n ]", 0-2) = v_x
	S("eval_speedFails2_4(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_x, v_n, v_x))", 0-0) = v_x
	S("eval_speedFails2_4(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_x, v_n, v_x))", 0-1) = v_n
	S("eval_speedFails2_4(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_x, v_n, v_x))", 0-2) = v_x
	S("eval_speedFails2_3(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_4(v_i.0, v_n, v_x))", 0-0) = v_i.0
	S("eval_speedFails2_3(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_4(v_i.0, v_n, v_x))", 0-1) = v_n
	S("eval_speedFails2_3(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_4(v_i.0, v_n, v_x))", 0-2) = v_x
	S("eval_speedFails2_3(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_4(v_i.0, v_n, v_x))", 1-0) = v_i.0
	S("eval_speedFails2_3(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_4(v_i.0, v_n, v_x))", 1-1) = v_n
	S("eval_speedFails2_3(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_4(v_i.0, v_n, v_x))", 1-2) = v_x
	S("eval_speedFails2_2(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_3(v_i.0, v_n, v_x))", 0-0) = v_i.0
	S("eval_speedFails2_2(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_3(v_i.0, v_n, v_x))", 0-1) = v_n
	S("eval_speedFails2_2(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_3(v_i.0, v_n, v_x))", 0-2) = v_x
	S("eval_speedFails2_2(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_3(v_i.0, v_n, v_x))", 1-0) = v_i.0
	S("eval_speedFails2_2(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_3(v_i.0, v_n, v_x))", 1-1) = v_n
	S("eval_speedFails2_2(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_3(v_i.0, v_n, v_x))", 1-2) = v_x
	S("eval_speedFails2_1(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_2(v_i.0, v_n, v_x))", 0-0) = v_i.0
	S("eval_speedFails2_1(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_2(v_i.0, v_n, v_x))", 0-1) = v_n
	S("eval_speedFails2_1(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_2(v_i.0, v_n, v_x))", 0-2) = v_x
	S("eval_speedFails2_1(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_2(v_i.0, v_n, v_x))", 1-0) = v_i.0
	S("eval_speedFails2_1(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_2(v_i.0, v_n, v_x))", 1-1) = v_n
	S("eval_speedFails2_1(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_2(v_i.0, v_n, v_x))", 1-2) = v_x
	S("eval_speedFails2_0(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_1(v_i.0, v_n, v_x))", 0-0) = v_i.0
	S("eval_speedFails2_0(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_1(v_i.0, v_n, v_x))", 0-1) = v_n
	S("eval_speedFails2_0(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_1(v_i.0, v_n, v_x))", 0-2) = v_x
	S("eval_speedFails2_0(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_1(v_i.0, v_n, v_x))", 1-0) = v_i.0
	S("eval_speedFails2_0(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_1(v_i.0, v_n, v_x))", 1-1) = v_n
	S("eval_speedFails2_0(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_1(v_i.0, v_n, v_x))", 1-2) = v_x
	S("eval_speedFails2_bb0_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_0(v_i.0, v_n, v_x))", 0-0) = v_i.0
	S("eval_speedFails2_bb0_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_0(v_i.0, v_n, v_x))", 0-1) = v_n
	S("eval_speedFails2_bb0_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_0(v_i.0, v_n, v_x))", 0-2) = v_x
	S("eval_speedFails2_start(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb0_in(v_i.0, v_n, v_x))", 0-0) = v_i.0
	S("eval_speedFails2_start(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb0_in(v_i.0, v_n, v_x))", 0-1) = v_n
	S("eval_speedFails2_start(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb0_in(v_i.0, v_n, v_x))", 0-2) = v_x
orients the transitions
	eval_speedFails2_bb2_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_i.0 + 1, v_n, v_x))
	eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb2_in(v_i.0, v_n, v_x)) [ v_i.0 < v_n ]
	eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb2_in(v_i.0, v_n, v_x)) [ v_i.0 > v_n ]
weakly and the transition
	eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb2_in(v_i.0, v_n, v_x)) [ v_i.0 < v_n ]
strictly and produces the following problem:
4:	T:
		(1, 1)            eval_speedFails2_start(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb0_in(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_bb0_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_0(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_0(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_1(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_1(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_2(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_2(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_3(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_3(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_4(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_4(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_x, v_n, v_x))
		(v_x + v_n, 1)    eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb2_in(v_i.0, v_n, v_x)) [ v_i.0 < v_n ]
		(?, 1)            eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb2_in(v_i.0, v_n, v_x)) [ v_i.0 > v_n ]
		(2, 1)            eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb3_in(v_i.0, v_n, v_x)) [ v_i.0 = v_n ]
		(?, 1)            eval_speedFails2_bb2_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_i.0 + 1, v_n, v_x))
		(2, 1)            eval_speedFails2_bb3_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_stop(v_i.0, v_n, v_x))
	start location:	eval_speedFails2_start
	leaf cost:	0

Applied AI with 'oct' on problem 4 to obtain the following invariants:
  For symbol eval_speedFails2_bb1_in: X_1 - X_3 >= 0
  For symbol eval_speedFails2_bb2_in: X_1 - X_3 >= 0
  For symbol eval_speedFails2_bb3_in: X_2 - X_3 >= 0 /\ X_1 - X_3 >= 0 /\ X_1 - X_2 >= 0 /\ -X_1 + X_2 >= 0


This yielded the following problem:
5:	T:
		(2, 1)            eval_speedFails2_bb3_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_stop(v_i.0, v_n, v_x)) [ v_n - v_x >= 0 /\ v_i.0 - v_x >= 0 /\ v_i.0 - v_n >= 0 /\ -v_i.0 + v_n >= 0 ]
		(?, 1)            eval_speedFails2_bb2_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_i.0 + 1, v_n, v_x)) [ v_i.0 - v_x >= 0 ]
		(2, 1)            eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb3_in(v_i.0, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 = v_n ]
		(?, 1)            eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb2_in(v_i.0, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 > v_n ]
		(v_x + v_n, 1)    eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb2_in(v_i.0, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 < v_n ]
		(1, 1)            eval_speedFails2_4(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_x, v_n, v_x))
		(1, 1)            eval_speedFails2_3(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_4(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_2(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_3(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_1(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_2(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_0(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_1(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_bb0_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_0(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_start(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb0_in(v_i.0, v_n, v_x))
	start location:	eval_speedFails2_start
	leaf cost:	0

By chaining the transition eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb3_in(v_i.0, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 = v_n ] with all transitions in problem 5, the following new transition is obtained:
	eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_stop(v_i.0, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 = v_n /\ v_n - v_x >= 0 /\ v_i.0 - v_n >= 0 /\ -v_i.0 + v_n >= 0 ]
We thus obtain the following problem:
6:	T:
		(2, 2)            eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_stop(v_i.0, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 = v_n /\ v_n - v_x >= 0 /\ v_i.0 - v_n >= 0 /\ -v_i.0 + v_n >= 0 ]
		(2, 1)            eval_speedFails2_bb3_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_stop(v_i.0, v_n, v_x)) [ v_n - v_x >= 0 /\ v_i.0 - v_x >= 0 /\ v_i.0 - v_n >= 0 /\ -v_i.0 + v_n >= 0 ]
		(?, 1)            eval_speedFails2_bb2_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_i.0 + 1, v_n, v_x)) [ v_i.0 - v_x >= 0 ]
		(?, 1)            eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb2_in(v_i.0, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 > v_n ]
		(v_x + v_n, 1)    eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb2_in(v_i.0, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 < v_n ]
		(1, 1)            eval_speedFails2_4(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_x, v_n, v_x))
		(1, 1)            eval_speedFails2_3(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_4(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_2(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_3(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_1(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_2(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_0(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_1(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_bb0_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_0(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_start(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb0_in(v_i.0, v_n, v_x))
	start location:	eval_speedFails2_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transition from problem 6:
	eval_speedFails2_bb3_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_stop(v_i.0, v_n, v_x)) [ v_n - v_x >= 0 /\ v_i.0 - v_x >= 0 /\ v_i.0 - v_n >= 0 /\ -v_i.0 + v_n >= 0 ]
We thus obtain the following problem:
7:	T:
		(?, 1)            eval_speedFails2_bb2_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_i.0 + 1, v_n, v_x)) [ v_i.0 - v_x >= 0 ]
		(2, 2)            eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_stop(v_i.0, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 = v_n /\ v_n - v_x >= 0 /\ v_i.0 - v_n >= 0 /\ -v_i.0 + v_n >= 0 ]
		(v_x + v_n, 1)    eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb2_in(v_i.0, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 < v_n ]
		(?, 1)            eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb2_in(v_i.0, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 > v_n ]
		(1, 1)            eval_speedFails2_4(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_x, v_n, v_x))
		(1, 1)            eval_speedFails2_3(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_4(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_2(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_3(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_1(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_2(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_0(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_1(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_bb0_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_0(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_start(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb0_in(v_i.0, v_n, v_x))
	start location:	eval_speedFails2_start
	leaf cost:	0

By chaining the transition eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb2_in(v_i.0, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 < v_n ] with all transitions in problem 7, the following new transition is obtained:
	eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_i.0 + 1, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 < v_n ]
We thus obtain the following problem:
8:	T:
		(v_x + v_n, 2)    eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_i.0 + 1, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 < v_n ]
		(?, 1)            eval_speedFails2_bb2_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_i.0 + 1, v_n, v_x)) [ v_i.0 - v_x >= 0 ]
		(2, 2)            eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_stop(v_i.0, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 = v_n /\ v_n - v_x >= 0 /\ v_i.0 - v_n >= 0 /\ -v_i.0 + v_n >= 0 ]
		(?, 1)            eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb2_in(v_i.0, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 > v_n ]
		(1, 1)            eval_speedFails2_4(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_x, v_n, v_x))
		(1, 1)            eval_speedFails2_3(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_4(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_2(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_3(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_1(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_2(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_0(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_1(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_bb0_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_0(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_start(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb0_in(v_i.0, v_n, v_x))
	start location:	eval_speedFails2_start
	leaf cost:	0

By chaining the transition eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb2_in(v_i.0, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 > v_n ] with all transitions in problem 8, the following new transition is obtained:
	eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_i.0 + 1, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 > v_n ]
We thus obtain the following problem:
9:	T:
		(?, 2)            eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_i.0 + 1, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 > v_n ]
		(v_x + v_n, 2)    eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_i.0 + 1, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 < v_n ]
		(?, 1)            eval_speedFails2_bb2_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_i.0 + 1, v_n, v_x)) [ v_i.0 - v_x >= 0 ]
		(2, 2)            eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_stop(v_i.0, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 = v_n /\ v_n - v_x >= 0 /\ v_i.0 - v_n >= 0 /\ -v_i.0 + v_n >= 0 ]
		(1, 1)            eval_speedFails2_4(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_x, v_n, v_x))
		(1, 1)            eval_speedFails2_3(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_4(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_2(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_3(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_1(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_2(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_0(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_1(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_bb0_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_0(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_start(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb0_in(v_i.0, v_n, v_x))
	start location:	eval_speedFails2_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transition from problem 9:
	eval_speedFails2_bb2_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_i.0 + 1, v_n, v_x)) [ v_i.0 - v_x >= 0 ]
We thus obtain the following problem:
10:	T:
		(?, 2)            eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_i.0 + 1, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 > v_n ]
		(v_x + v_n, 2)    eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_i.0 + 1, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 < v_n ]
		(2, 2)            eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_stop(v_i.0, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 = v_n /\ v_n - v_x >= 0 /\ v_i.0 - v_n >= 0 /\ -v_i.0 + v_n >= 0 ]
		(1, 1)            eval_speedFails2_4(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_x, v_n, v_x))
		(1, 1)            eval_speedFails2_3(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_4(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_2(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_3(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_1(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_2(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_0(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_1(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_bb0_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_0(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_start(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb0_in(v_i.0, v_n, v_x))
	start location:	eval_speedFails2_start
	leaf cost:	0

By chaining the transition eval_speedFails2_bb0_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_0(v_i.0, v_n, v_x)) with all transitions in problem 10, the following new transition is obtained:
	eval_speedFails2_bb0_in(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_1(v_i.0, v_n, v_x))
We thus obtain the following problem:
11:	T:
		(1, 2)            eval_speedFails2_bb0_in(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_1(v_i.0, v_n, v_x))
		(?, 2)            eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_i.0 + 1, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 > v_n ]
		(v_x + v_n, 2)    eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_i.0 + 1, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 < v_n ]
		(2, 2)            eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_stop(v_i.0, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 = v_n /\ v_n - v_x >= 0 /\ v_i.0 - v_n >= 0 /\ -v_i.0 + v_n >= 0 ]
		(1, 1)            eval_speedFails2_4(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_x, v_n, v_x))
		(1, 1)            eval_speedFails2_3(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_4(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_2(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_3(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_1(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_2(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_0(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_1(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_start(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb0_in(v_i.0, v_n, v_x))
	start location:	eval_speedFails2_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transition from problem 11:
	eval_speedFails2_0(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_1(v_i.0, v_n, v_x))
We thus obtain the following problem:
12:	T:
		(?, 2)            eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_i.0 + 1, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 > v_n ]
		(v_x + v_n, 2)    eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_i.0 + 1, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 < v_n ]
		(2, 2)            eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_stop(v_i.0, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 = v_n /\ v_n - v_x >= 0 /\ v_i.0 - v_n >= 0 /\ -v_i.0 + v_n >= 0 ]
		(1, 1)            eval_speedFails2_4(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_x, v_n, v_x))
		(1, 1)            eval_speedFails2_3(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_4(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_2(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_3(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_1(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_2(v_i.0, v_n, v_x))
		(1, 2)            eval_speedFails2_bb0_in(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_1(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_start(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb0_in(v_i.0, v_n, v_x))
	start location:	eval_speedFails2_start
	leaf cost:	0

By chaining the transition eval_speedFails2_start(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb0_in(v_i.0, v_n, v_x)) with all transitions in problem 12, the following new transition is obtained:
	eval_speedFails2_start(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_1(v_i.0, v_n, v_x))
We thus obtain the following problem:
13:	T:
		(1, 3)            eval_speedFails2_start(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_1(v_i.0, v_n, v_x))
		(?, 2)            eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_i.0 + 1, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 > v_n ]
		(v_x + v_n, 2)    eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_i.0 + 1, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 < v_n ]
		(2, 2)            eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_stop(v_i.0, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 = v_n /\ v_n - v_x >= 0 /\ v_i.0 - v_n >= 0 /\ -v_i.0 + v_n >= 0 ]
		(1, 1)            eval_speedFails2_4(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_x, v_n, v_x))
		(1, 1)            eval_speedFails2_3(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_4(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_2(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_3(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_1(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_2(v_i.0, v_n, v_x))
		(1, 2)            eval_speedFails2_bb0_in(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_1(v_i.0, v_n, v_x))
	start location:	eval_speedFails2_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transition from problem 13:
	eval_speedFails2_bb0_in(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_1(v_i.0, v_n, v_x))
We thus obtain the following problem:
14:	T:
		(?, 2)            eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_i.0 + 1, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 > v_n ]
		(v_x + v_n, 2)    eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_i.0 + 1, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 < v_n ]
		(2, 2)            eval_speedFails2_bb1_in(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_stop(v_i.0, v_n, v_x)) [ v_i.0 - v_x >= 0 /\ v_i.0 = v_n /\ v_n - v_x >= 0 /\ v_i.0 - v_n >= 0 /\ -v_i.0 + v_n >= 0 ]
		(1, 1)            eval_speedFails2_4(v_i.0, v_n, v_x) -> Com_1(eval_speedFails2_bb1_in(v_x, v_n, v_x))
		(1, 1)            eval_speedFails2_3(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_4(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_2(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_3(v_i.0, v_n, v_x))
		(1, 1)            eval_speedFails2_1(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_2(v_i.0, v_n, v_x))
		(1, 3)            eval_speedFails2_start(v_i.0, v_n, v_x) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_n, v_x), eval_speedFails2_1(v_i.0, v_n, v_x))
	start location:	eval_speedFails2_start
	leaf cost:	0

Complexity upper bound ?

Time: 0.418 sec (SMT: 0.315 sec)

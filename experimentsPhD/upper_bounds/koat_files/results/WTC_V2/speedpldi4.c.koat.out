YES(?, 6*v_n + 11)

Initial complexity problem:
1:	T:
		(1, 1)    eval_speedpldi4_start(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb0_in(v_i.0, v_m, v_n))
		(?, 1)    eval_speedpldi4_bb0_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_0(v_i.0, v_m, v_n))
		(?, 1)    eval_speedpldi4_0(v_i.0, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_m, v_n), eval_speedpldi4_1(v_i.0, v_m, v_n))
		(?, 1)    eval_speedpldi4_1(v_i.0, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_m, v_n), eval_speedpldi4_2(v_i.0, v_m, v_n))
		(?, 1)    eval_speedpldi4_2(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb3_in(v_i.0, v_m, v_n)) [ v_m <= 0 ]
		(?, 1)    eval_speedpldi4_2(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb3_in(v_i.0, v_m, v_n)) [ v_n <= v_m ]
		(?, 1)    eval_speedpldi4_2(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb1_in(v_n, v_m, v_n)) [ v_m > 0 /\ v_n > v_m ]
		(?, 1)    eval_speedpldi4_bb1_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb2_in(v_i.0, v_m, v_n)) [ v_i.0 > 0 ]
		(?, 1)    eval_speedpldi4_bb1_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb3_in(v_i.0, v_m, v_n)) [ v_i.0 <= 0 ]
		(?, 1)    eval_speedpldi4_bb2_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb1_in(v_i.0 - 1, v_m, v_n)) [ v_i.0 < v_m ]
		(?, 1)    eval_speedpldi4_bb2_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb1_in(v_i.0 - v_m, v_m, v_n)) [ v_i.0 >= v_m ]
		(?, 1)    eval_speedpldi4_bb3_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_stop(v_i.0, v_m, v_n))
	start location:	eval_speedpldi4_start
	leaf cost:	0

Repeatedly propagating knowledge in problem 1 produces the following problem:
2:	T:
		(1, 1)    eval_speedpldi4_start(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb0_in(v_i.0, v_m, v_n))
		(1, 1)    eval_speedpldi4_bb0_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_0(v_i.0, v_m, v_n))
		(1, 1)    eval_speedpldi4_0(v_i.0, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_m, v_n), eval_speedpldi4_1(v_i.0, v_m, v_n))
		(1, 1)    eval_speedpldi4_1(v_i.0, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_m, v_n), eval_speedpldi4_2(v_i.0, v_m, v_n))
		(1, 1)    eval_speedpldi4_2(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb3_in(v_i.0, v_m, v_n)) [ v_m <= 0 ]
		(1, 1)    eval_speedpldi4_2(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb3_in(v_i.0, v_m, v_n)) [ v_n <= v_m ]
		(1, 1)    eval_speedpldi4_2(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb1_in(v_n, v_m, v_n)) [ v_m > 0 /\ v_n > v_m ]
		(?, 1)    eval_speedpldi4_bb1_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb2_in(v_i.0, v_m, v_n)) [ v_i.0 > 0 ]
		(?, 1)    eval_speedpldi4_bb1_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb3_in(v_i.0, v_m, v_n)) [ v_i.0 <= 0 ]
		(?, 1)    eval_speedpldi4_bb2_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb1_in(v_i.0 - 1, v_m, v_n)) [ v_i.0 < v_m ]
		(?, 1)    eval_speedpldi4_bb2_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb1_in(v_i.0 - v_m, v_m, v_n)) [ v_i.0 >= v_m ]
		(?, 1)    eval_speedpldi4_bb3_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_stop(v_i.0, v_m, v_n))
	start location:	eval_speedpldi4_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval_speedpldi4_start) = 2
	Pol(eval_speedpldi4_bb0_in) = 2
	Pol(eval_speedpldi4_0) = 2
	Pol(eval_llvm.dbg.value_start) = 0
	Pol(eval_speedpldi4_1) = 2
	Pol(eval_speedpldi4_2) = 2
	Pol(eval_speedpldi4_bb3_in) = 1
	Pol(eval_speedpldi4_bb1_in) = 2
	Pol(eval_speedpldi4_bb2_in) = 2
	Pol(eval_speedpldi4_stop) = 0
orients all transitions weakly and the transitions
	eval_speedpldi4_bb3_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_stop(v_i.0, v_m, v_n))
	eval_speedpldi4_bb1_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb3_in(v_i.0, v_m, v_n)) [ v_i.0 <= 0 ]
strictly and produces the following problem:
3:	T:
		(1, 1)    eval_speedpldi4_start(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb0_in(v_i.0, v_m, v_n))
		(1, 1)    eval_speedpldi4_bb0_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_0(v_i.0, v_m, v_n))
		(1, 1)    eval_speedpldi4_0(v_i.0, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_m, v_n), eval_speedpldi4_1(v_i.0, v_m, v_n))
		(1, 1)    eval_speedpldi4_1(v_i.0, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_m, v_n), eval_speedpldi4_2(v_i.0, v_m, v_n))
		(1, 1)    eval_speedpldi4_2(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb3_in(v_i.0, v_m, v_n)) [ v_m <= 0 ]
		(1, 1)    eval_speedpldi4_2(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb3_in(v_i.0, v_m, v_n)) [ v_n <= v_m ]
		(1, 1)    eval_speedpldi4_2(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb1_in(v_n, v_m, v_n)) [ v_m > 0 /\ v_n > v_m ]
		(?, 1)    eval_speedpldi4_bb1_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb2_in(v_i.0, v_m, v_n)) [ v_i.0 > 0 ]
		(2, 1)    eval_speedpldi4_bb1_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb3_in(v_i.0, v_m, v_n)) [ v_i.0 <= 0 ]
		(?, 1)    eval_speedpldi4_bb2_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb1_in(v_i.0 - 1, v_m, v_n)) [ v_i.0 < v_m ]
		(?, 1)    eval_speedpldi4_bb2_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb1_in(v_i.0 - v_m, v_m, v_n)) [ v_i.0 >= v_m ]
		(2, 1)    eval_speedpldi4_bb3_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_stop(v_i.0, v_m, v_n))
	start location:	eval_speedpldi4_start
	leaf cost:	0

Applied AI with 'oct' on problem 3 to obtain the following invariants:
  For symbol eval_speedpldi4_bb1_in: X_3 - 2 >= 0 /\ X_2 + X_3 - 3 >= 0 /\ -X_2 + X_3 - 1 >= 0 /\ -X_1 + X_3 >= 0 /\ X_2 - 1 >= 0
  For symbol eval_speedpldi4_bb2_in: X_3 - 2 >= 0 /\ X_2 + X_3 - 3 >= 0 /\ -X_2 + X_3 - 1 >= 0 /\ X_1 + X_3 - 3 >= 0 /\ -X_1 + X_3 >= 0 /\ X_2 - 1 >= 0 /\ X_1 + X_2 - 2 >= 0 /\ X_1 - 1 >= 0


This yielded the following problem:
4:	T:
		(2, 1)    eval_speedpldi4_bb3_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_stop(v_i.0, v_m, v_n))
		(?, 1)    eval_speedpldi4_bb2_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb1_in(v_i.0 - v_m, v_m, v_n)) [ v_n - 2 >= 0 /\ v_m + v_n - 3 >= 0 /\ -v_m + v_n - 1 >= 0 /\ v_i.0 + v_n - 3 >= 0 /\ -v_i.0 + v_n >= 0 /\ v_m - 1 >= 0 /\ v_i.0 + v_m - 2 >= 0 /\ v_i.0 - 1 >= 0 /\ v_i.0 >= v_m ]
		(?, 1)    eval_speedpldi4_bb2_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb1_in(v_i.0 - 1, v_m, v_n)) [ v_n - 2 >= 0 /\ v_m + v_n - 3 >= 0 /\ -v_m + v_n - 1 >= 0 /\ v_i.0 + v_n - 3 >= 0 /\ -v_i.0 + v_n >= 0 /\ v_m - 1 >= 0 /\ v_i.0 + v_m - 2 >= 0 /\ v_i.0 - 1 >= 0 /\ v_i.0 < v_m ]
		(2, 1)    eval_speedpldi4_bb1_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb3_in(v_i.0, v_m, v_n)) [ v_n - 2 >= 0 /\ v_m + v_n - 3 >= 0 /\ -v_m + v_n - 1 >= 0 /\ -v_i.0 + v_n >= 0 /\ v_m - 1 >= 0 /\ v_i.0 <= 0 ]
		(?, 1)    eval_speedpldi4_bb1_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb2_in(v_i.0, v_m, v_n)) [ v_n - 2 >= 0 /\ v_m + v_n - 3 >= 0 /\ -v_m + v_n - 1 >= 0 /\ -v_i.0 + v_n >= 0 /\ v_m - 1 >= 0 /\ v_i.0 > 0 ]
		(1, 1)    eval_speedpldi4_2(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb1_in(v_n, v_m, v_n)) [ v_m > 0 /\ v_n > v_m ]
		(1, 1)    eval_speedpldi4_2(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb3_in(v_i.0, v_m, v_n)) [ v_n <= v_m ]
		(1, 1)    eval_speedpldi4_2(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb3_in(v_i.0, v_m, v_n)) [ v_m <= 0 ]
		(1, 1)    eval_speedpldi4_1(v_i.0, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_m, v_n), eval_speedpldi4_2(v_i.0, v_m, v_n))
		(1, 1)    eval_speedpldi4_0(v_i.0, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_m, v_n), eval_speedpldi4_1(v_i.0, v_m, v_n))
		(1, 1)    eval_speedpldi4_bb0_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_0(v_i.0, v_m, v_n))
		(1, 1)    eval_speedpldi4_start(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb0_in(v_i.0, v_m, v_n))
	start location:	eval_speedpldi4_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval_speedpldi4_bb2_in) = 2*V_1 - 1
	Pol(eval_speedpldi4_bb1_in) = 2*V_1
and size complexities
	S("eval_speedpldi4_start(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb0_in(v_i.0, v_m, v_n))", 0-0) = v_i.0
	S("eval_speedpldi4_start(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb0_in(v_i.0, v_m, v_n))", 0-1) = v_m
	S("eval_speedpldi4_start(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb0_in(v_i.0, v_m, v_n))", 0-2) = v_n
	S("eval_speedpldi4_bb0_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_0(v_i.0, v_m, v_n))", 0-0) = v_i.0
	S("eval_speedpldi4_bb0_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_0(v_i.0, v_m, v_n))", 0-1) = v_m
	S("eval_speedpldi4_bb0_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_0(v_i.0, v_m, v_n))", 0-2) = v_n
	S("eval_speedpldi4_0(v_i.0, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_m, v_n), eval_speedpldi4_1(v_i.0, v_m, v_n))", 0-0) = v_i.0
	S("eval_speedpldi4_0(v_i.0, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_m, v_n), eval_speedpldi4_1(v_i.0, v_m, v_n))", 0-1) = v_m
	S("eval_speedpldi4_0(v_i.0, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_m, v_n), eval_speedpldi4_1(v_i.0, v_m, v_n))", 0-2) = v_n
	S("eval_speedpldi4_0(v_i.0, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_m, v_n), eval_speedpldi4_1(v_i.0, v_m, v_n))", 1-0) = v_i.0
	S("eval_speedpldi4_0(v_i.0, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_m, v_n), eval_speedpldi4_1(v_i.0, v_m, v_n))", 1-1) = v_m
	S("eval_speedpldi4_0(v_i.0, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_m, v_n), eval_speedpldi4_1(v_i.0, v_m, v_n))", 1-2) = v_n
	S("eval_speedpldi4_1(v_i.0, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_m, v_n), eval_speedpldi4_2(v_i.0, v_m, v_n))", 0-0) = v_i.0
	S("eval_speedpldi4_1(v_i.0, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_m, v_n), eval_speedpldi4_2(v_i.0, v_m, v_n))", 0-1) = v_m
	S("eval_speedpldi4_1(v_i.0, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_m, v_n), eval_speedpldi4_2(v_i.0, v_m, v_n))", 0-2) = v_n
	S("eval_speedpldi4_1(v_i.0, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_m, v_n), eval_speedpldi4_2(v_i.0, v_m, v_n))", 1-0) = v_i.0
	S("eval_speedpldi4_1(v_i.0, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_m, v_n), eval_speedpldi4_2(v_i.0, v_m, v_n))", 1-1) = v_m
	S("eval_speedpldi4_1(v_i.0, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_m, v_n), eval_speedpldi4_2(v_i.0, v_m, v_n))", 1-2) = v_n
	S("eval_speedpldi4_2(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb3_in(v_i.0, v_m, v_n)) [ v_m <= 0 ]", 0-0) = v_i.0
	S("eval_speedpldi4_2(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb3_in(v_i.0, v_m, v_n)) [ v_m <= 0 ]", 0-1) = v_m
	S("eval_speedpldi4_2(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb3_in(v_i.0, v_m, v_n)) [ v_m <= 0 ]", 0-2) = v_n
	S("eval_speedpldi4_2(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb3_in(v_i.0, v_m, v_n)) [ v_n <= v_m ]", 0-0) = v_i.0
	S("eval_speedpldi4_2(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb3_in(v_i.0, v_m, v_n)) [ v_n <= v_m ]", 0-1) = v_m
	S("eval_speedpldi4_2(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb3_in(v_i.0, v_m, v_n)) [ v_n <= v_m ]", 0-2) = v_n
	S("eval_speedpldi4_2(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb1_in(v_n, v_m, v_n)) [ v_m > 0 /\\ v_n > v_m ]", 0-0) = v_n
	S("eval_speedpldi4_2(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb1_in(v_n, v_m, v_n)) [ v_m > 0 /\\ v_n > v_m ]", 0-1) = v_m
	S("eval_speedpldi4_2(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb1_in(v_n, v_m, v_n)) [ v_m > 0 /\\ v_n > v_m ]", 0-2) = v_n
	S("eval_speedpldi4_bb1_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb2_in(v_i.0, v_m, v_n)) [ v_n - 2 >= 0 /\\ v_m + v_n - 3 >= 0 /\\ -v_m + v_n - 1 >= 0 /\\ -v_i.0 + v_n >= 0 /\\ v_m - 1 >= 0 /\\ v_i.0 > 0 ]", 0-0) = v_n
	S("eval_speedpldi4_bb1_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb2_in(v_i.0, v_m, v_n)) [ v_n - 2 >= 0 /\\ v_m + v_n - 3 >= 0 /\\ -v_m + v_n - 1 >= 0 /\\ -v_i.0 + v_n >= 0 /\\ v_m - 1 >= 0 /\\ v_i.0 > 0 ]", 0-1) = v_m
	S("eval_speedpldi4_bb1_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb2_in(v_i.0, v_m, v_n)) [ v_n - 2 >= 0 /\\ v_m + v_n - 3 >= 0 /\\ -v_m + v_n - 1 >= 0 /\\ -v_i.0 + v_n >= 0 /\\ v_m - 1 >= 0 /\\ v_i.0 > 0 ]", 0-2) = v_n
	S("eval_speedpldi4_bb1_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb3_in(v_i.0, v_m, v_n)) [ v_n - 2 >= 0 /\\ v_m + v_n - 3 >= 0 /\\ -v_m + v_n - 1 >= 0 /\\ -v_i.0 + v_n >= 0 /\\ v_m - 1 >= 0 /\\ v_i.0 <= 0 ]", 0-0) = v_n
	S("eval_speedpldi4_bb1_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb3_in(v_i.0, v_m, v_n)) [ v_n - 2 >= 0 /\\ v_m + v_n - 3 >= 0 /\\ -v_m + v_n - 1 >= 0 /\\ -v_i.0 + v_n >= 0 /\\ v_m - 1 >= 0 /\\ v_i.0 <= 0 ]", 0-1) = v_m
	S("eval_speedpldi4_bb1_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb3_in(v_i.0, v_m, v_n)) [ v_n - 2 >= 0 /\\ v_m + v_n - 3 >= 0 /\\ -v_m + v_n - 1 >= 0 /\\ -v_i.0 + v_n >= 0 /\\ v_m - 1 >= 0 /\\ v_i.0 <= 0 ]", 0-2) = v_n
	S("eval_speedpldi4_bb2_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb1_in(v_i.0 - 1, v_m, v_n)) [ v_n - 2 >= 0 /\\ v_m + v_n - 3 >= 0 /\\ -v_m + v_n - 1 >= 0 /\\ v_i.0 + v_n - 3 >= 0 /\\ -v_i.0 + v_n >= 0 /\\ v_m - 1 >= 0 /\\ v_i.0 + v_m - 2 >= 0 /\\ v_i.0 - 1 >= 0 /\\ v_i.0 < v_m ]", 0-0) = v_n
	S("eval_speedpldi4_bb2_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb1_in(v_i.0 - 1, v_m, v_n)) [ v_n - 2 >= 0 /\\ v_m + v_n - 3 >= 0 /\\ -v_m + v_n - 1 >= 0 /\\ v_i.0 + v_n - 3 >= 0 /\\ -v_i.0 + v_n >= 0 /\\ v_m - 1 >= 0 /\\ v_i.0 + v_m - 2 >= 0 /\\ v_i.0 - 1 >= 0 /\\ v_i.0 < v_m ]", 0-1) = v_m
	S("eval_speedpldi4_bb2_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb1_in(v_i.0 - 1, v_m, v_n)) [ v_n - 2 >= 0 /\\ v_m + v_n - 3 >= 0 /\\ -v_m + v_n - 1 >= 0 /\\ v_i.0 + v_n - 3 >= 0 /\\ -v_i.0 + v_n >= 0 /\\ v_m - 1 >= 0 /\\ v_i.0 + v_m - 2 >= 0 /\\ v_i.0 - 1 >= 0 /\\ v_i.0 < v_m ]", 0-2) = v_n
	S("eval_speedpldi4_bb2_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb1_in(v_i.0 - v_m, v_m, v_n)) [ v_n - 2 >= 0 /\\ v_m + v_n - 3 >= 0 /\\ -v_m + v_n - 1 >= 0 /\\ v_i.0 + v_n - 3 >= 0 /\\ -v_i.0 + v_n >= 0 /\\ v_m - 1 >= 0 /\\ v_i.0 + v_m - 2 >= 0 /\\ v_i.0 - 1 >= 0 /\\ v_i.0 >= v_m ]", 0-0) = v_n
	S("eval_speedpldi4_bb2_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb1_in(v_i.0 - v_m, v_m, v_n)) [ v_n - 2 >= 0 /\\ v_m + v_n - 3 >= 0 /\\ -v_m + v_n - 1 >= 0 /\\ v_i.0 + v_n - 3 >= 0 /\\ -v_i.0 + v_n >= 0 /\\ v_m - 1 >= 0 /\\ v_i.0 + v_m - 2 >= 0 /\\ v_i.0 - 1 >= 0 /\\ v_i.0 >= v_m ]", 0-1) = v_m
	S("eval_speedpldi4_bb2_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb1_in(v_i.0 - v_m, v_m, v_n)) [ v_n - 2 >= 0 /\\ v_m + v_n - 3 >= 0 /\\ -v_m + v_n - 1 >= 0 /\\ v_i.0 + v_n - 3 >= 0 /\\ -v_i.0 + v_n >= 0 /\\ v_m - 1 >= 0 /\\ v_i.0 + v_m - 2 >= 0 /\\ v_i.0 - 1 >= 0 /\\ v_i.0 >= v_m ]", 0-2) = v_n
	S("eval_speedpldi4_bb3_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_stop(v_i.0, v_m, v_n))", 0-0) = v_i.0 + v_n
	S("eval_speedpldi4_bb3_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_stop(v_i.0, v_m, v_n))", 0-1) = v_m
	S("eval_speedpldi4_bb3_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_stop(v_i.0, v_m, v_n))", 0-2) = v_n
orients the transitions
	eval_speedpldi4_bb2_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb1_in(v_i.0 - v_m, v_m, v_n)) [ v_n - 2 >= 0 /\ v_m + v_n - 3 >= 0 /\ -v_m + v_n - 1 >= 0 /\ v_i.0 + v_n - 3 >= 0 /\ -v_i.0 + v_n >= 0 /\ v_m - 1 >= 0 /\ v_i.0 + v_m - 2 >= 0 /\ v_i.0 - 1 >= 0 /\ v_i.0 >= v_m ]
	eval_speedpldi4_bb2_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb1_in(v_i.0 - 1, v_m, v_n)) [ v_n - 2 >= 0 /\ v_m + v_n - 3 >= 0 /\ -v_m + v_n - 1 >= 0 /\ v_i.0 + v_n - 3 >= 0 /\ -v_i.0 + v_n >= 0 /\ v_m - 1 >= 0 /\ v_i.0 + v_m - 2 >= 0 /\ v_i.0 - 1 >= 0 /\ v_i.0 < v_m ]
	eval_speedpldi4_bb1_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb2_in(v_i.0, v_m, v_n)) [ v_n - 2 >= 0 /\ v_m + v_n - 3 >= 0 /\ -v_m + v_n - 1 >= 0 /\ -v_i.0 + v_n >= 0 /\ v_m - 1 >= 0 /\ v_i.0 > 0 ]
weakly and the transitions
	eval_speedpldi4_bb2_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb1_in(v_i.0 - v_m, v_m, v_n)) [ v_n - 2 >= 0 /\ v_m + v_n - 3 >= 0 /\ -v_m + v_n - 1 >= 0 /\ v_i.0 + v_n - 3 >= 0 /\ -v_i.0 + v_n >= 0 /\ v_m - 1 >= 0 /\ v_i.0 + v_m - 2 >= 0 /\ v_i.0 - 1 >= 0 /\ v_i.0 >= v_m ]
	eval_speedpldi4_bb2_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb1_in(v_i.0 - 1, v_m, v_n)) [ v_n - 2 >= 0 /\ v_m + v_n - 3 >= 0 /\ -v_m + v_n - 1 >= 0 /\ v_i.0 + v_n - 3 >= 0 /\ -v_i.0 + v_n >= 0 /\ v_m - 1 >= 0 /\ v_i.0 + v_m - 2 >= 0 /\ v_i.0 - 1 >= 0 /\ v_i.0 < v_m ]
	eval_speedpldi4_bb1_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb2_in(v_i.0, v_m, v_n)) [ v_n - 2 >= 0 /\ v_m + v_n - 3 >= 0 /\ -v_m + v_n - 1 >= 0 /\ -v_i.0 + v_n >= 0 /\ v_m - 1 >= 0 /\ v_i.0 > 0 ]
strictly and produces the following problem:
5:	T:
		(2, 1)        eval_speedpldi4_bb3_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_stop(v_i.0, v_m, v_n))
		(2*v_n, 1)    eval_speedpldi4_bb2_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb1_in(v_i.0 - v_m, v_m, v_n)) [ v_n - 2 >= 0 /\ v_m + v_n - 3 >= 0 /\ -v_m + v_n - 1 >= 0 /\ v_i.0 + v_n - 3 >= 0 /\ -v_i.0 + v_n >= 0 /\ v_m - 1 >= 0 /\ v_i.0 + v_m - 2 >= 0 /\ v_i.0 - 1 >= 0 /\ v_i.0 >= v_m ]
		(2*v_n, 1)    eval_speedpldi4_bb2_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb1_in(v_i.0 - 1, v_m, v_n)) [ v_n - 2 >= 0 /\ v_m + v_n - 3 >= 0 /\ -v_m + v_n - 1 >= 0 /\ v_i.0 + v_n - 3 >= 0 /\ -v_i.0 + v_n >= 0 /\ v_m - 1 >= 0 /\ v_i.0 + v_m - 2 >= 0 /\ v_i.0 - 1 >= 0 /\ v_i.0 < v_m ]
		(2, 1)        eval_speedpldi4_bb1_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb3_in(v_i.0, v_m, v_n)) [ v_n - 2 >= 0 /\ v_m + v_n - 3 >= 0 /\ -v_m + v_n - 1 >= 0 /\ -v_i.0 + v_n >= 0 /\ v_m - 1 >= 0 /\ v_i.0 <= 0 ]
		(2*v_n, 1)    eval_speedpldi4_bb1_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb2_in(v_i.0, v_m, v_n)) [ v_n - 2 >= 0 /\ v_m + v_n - 3 >= 0 /\ -v_m + v_n - 1 >= 0 /\ -v_i.0 + v_n >= 0 /\ v_m - 1 >= 0 /\ v_i.0 > 0 ]
		(1, 1)        eval_speedpldi4_2(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb1_in(v_n, v_m, v_n)) [ v_m > 0 /\ v_n > v_m ]
		(1, 1)        eval_speedpldi4_2(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb3_in(v_i.0, v_m, v_n)) [ v_n <= v_m ]
		(1, 1)        eval_speedpldi4_2(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb3_in(v_i.0, v_m, v_n)) [ v_m <= 0 ]
		(1, 1)        eval_speedpldi4_1(v_i.0, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_m, v_n), eval_speedpldi4_2(v_i.0, v_m, v_n))
		(1, 1)        eval_speedpldi4_0(v_i.0, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_i.0, v_m, v_n), eval_speedpldi4_1(v_i.0, v_m, v_n))
		(1, 1)        eval_speedpldi4_bb0_in(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_0(v_i.0, v_m, v_n))
		(1, 1)        eval_speedpldi4_start(v_i.0, v_m, v_n) -> Com_1(eval_speedpldi4_bb0_in(v_i.0, v_m, v_n))
	start location:	eval_speedpldi4_start
	leaf cost:	0

Complexity upper bound 6*v_n + 11

Time: 0.245 sec (SMT: 0.212 sec)

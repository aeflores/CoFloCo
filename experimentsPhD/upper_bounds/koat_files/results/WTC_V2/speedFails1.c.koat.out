MAYBE

Initial complexity problem:
1:	T:
		(1, 1)    eval_speedFails1_start(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb0_in(v_.0, v_i, v_m, v_n))
		(?, 1)    eval_speedFails1_bb0_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_0(v_.0, v_i, v_m, v_n))
		(?, 1)    eval_speedFails1_0(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_1(v_.0, v_i, v_m, v_n))
		(?, 1)    eval_speedFails1_1(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_2(v_.0, v_i, v_m, v_n))
		(?, 1)    eval_speedFails1_2(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_3(v_.0, v_i, v_m, v_n))
		(?, 1)    eval_speedFails1_3(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_4(v_.0, v_i, v_m, v_n))
		(?, 1)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i, v_i, v_m, v_n))
		(?, 1)    eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb2_in(v_.0, v_i, v_m, v_n)) [ v_.0 <= v_n ]
		(?, 1)    eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb3_in(v_.0, v_i, v_m, v_n)) [ v_.0 > v_n ]
		(?, 1)    eval_speedFails1_bb2_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_.0 + v_m, v_i, v_m, v_n))
		(?, 1)    eval_speedFails1_bb3_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_.0, v_i, v_m, v_n))
	start location:	eval_speedFails1_start
	leaf cost:	0

Repeatedly propagating knowledge in problem 1 produces the following problem:
2:	T:
		(1, 1)    eval_speedFails1_start(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb0_in(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_bb0_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_0(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_0(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_1(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_1(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_2(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_2(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_3(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_3(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_4(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i, v_i, v_m, v_n))
		(?, 1)    eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb2_in(v_.0, v_i, v_m, v_n)) [ v_.0 <= v_n ]
		(?, 1)    eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb3_in(v_.0, v_i, v_m, v_n)) [ v_.0 > v_n ]
		(?, 1)    eval_speedFails1_bb2_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_.0 + v_m, v_i, v_m, v_n))
		(?, 1)    eval_speedFails1_bb3_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_.0, v_i, v_m, v_n))
	start location:	eval_speedFails1_start
	leaf cost:	0

A polynomial rank function with
	Pol(eval_speedFails1_start) = 2
	Pol(eval_speedFails1_bb0_in) = 2
	Pol(eval_speedFails1_0) = 2
	Pol(eval_llvm.dbg.value_start) = 0
	Pol(eval_speedFails1_1) = 2
	Pol(eval_speedFails1_2) = 2
	Pol(eval_speedFails1_3) = 2
	Pol(eval_speedFails1_4) = 2
	Pol(eval_speedFails1_bb1_in) = 2
	Pol(eval_speedFails1_bb2_in) = 2
	Pol(eval_speedFails1_bb3_in) = 1
	Pol(eval_speedFails1_stop) = 0
orients all transitions weakly and the transitions
	eval_speedFails1_bb3_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_.0, v_i, v_m, v_n))
	eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb3_in(v_.0, v_i, v_m, v_n)) [ v_.0 > v_n ]
strictly and produces the following problem:
3:	T:
		(1, 1)    eval_speedFails1_start(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb0_in(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_bb0_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_0(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_0(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_1(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_1(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_2(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_2(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_3(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_3(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_4(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i, v_i, v_m, v_n))
		(?, 1)    eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb2_in(v_.0, v_i, v_m, v_n)) [ v_.0 <= v_n ]
		(2, 1)    eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb3_in(v_.0, v_i, v_m, v_n)) [ v_.0 > v_n ]
		(?, 1)    eval_speedFails1_bb2_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_.0 + v_m, v_i, v_m, v_n))
		(2, 1)    eval_speedFails1_bb3_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_.0, v_i, v_m, v_n))
	start location:	eval_speedFails1_start
	leaf cost:	0

Applied AI with 'oct' on problem 3 to obtain the following invariants:
  For symbol eval_speedFails1_bb2_in: -X_1 + X_4 >= 0
  For symbol eval_speedFails1_bb3_in: X_1 - X_4 - 1 >= 0


This yielded the following problem:
4:	T:
		(2, 1)    eval_speedFails1_bb3_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_.0, v_i, v_m, v_n)) [ v_.0 - v_n - 1 >= 0 ]
		(?, 1)    eval_speedFails1_bb2_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_.0 + v_m, v_i, v_m, v_n)) [ -v_.0 + v_n >= 0 ]
		(2, 1)    eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb3_in(v_.0, v_i, v_m, v_n)) [ v_.0 > v_n ]
		(?, 1)    eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb2_in(v_.0, v_i, v_m, v_n)) [ v_.0 <= v_n ]
		(1, 1)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_3(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_4(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_2(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_3(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_1(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_2(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_0(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_1(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_bb0_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_0(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_start(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb0_in(v_.0, v_i, v_m, v_n))
	start location:	eval_speedFails1_start
	leaf cost:	0

By chaining the transition eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb3_in(v_.0, v_i, v_m, v_n)) [ v_.0 > v_n ] with all transitions in problem 4, the following new transition is obtained:
	eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_.0, v_i, v_m, v_n)) [ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
We thus obtain the following problem:
5:	T:
		(2, 2)    eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_.0, v_i, v_m, v_n)) [ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
		(2, 1)    eval_speedFails1_bb3_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_.0, v_i, v_m, v_n)) [ v_.0 - v_n - 1 >= 0 ]
		(?, 1)    eval_speedFails1_bb2_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_.0 + v_m, v_i, v_m, v_n)) [ -v_.0 + v_n >= 0 ]
		(?, 1)    eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb2_in(v_.0, v_i, v_m, v_n)) [ v_.0 <= v_n ]
		(1, 1)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_3(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_4(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_2(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_3(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_1(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_2(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_0(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_1(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_bb0_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_0(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_start(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb0_in(v_.0, v_i, v_m, v_n))
	start location:	eval_speedFails1_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transition from problem 5:
	eval_speedFails1_bb3_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_.0, v_i, v_m, v_n)) [ v_.0 - v_n - 1 >= 0 ]
We thus obtain the following problem:
6:	T:
		(?, 1)    eval_speedFails1_bb2_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_.0 + v_m, v_i, v_m, v_n)) [ -v_.0 + v_n >= 0 ]
		(2, 2)    eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_.0, v_i, v_m, v_n)) [ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
		(?, 1)    eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb2_in(v_.0, v_i, v_m, v_n)) [ v_.0 <= v_n ]
		(1, 1)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_3(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_4(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_2(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_3(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_1(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_2(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_0(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_1(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_bb0_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_0(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_start(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb0_in(v_.0, v_i, v_m, v_n))
	start location:	eval_speedFails1_start
	leaf cost:	0

By chaining the transition eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb2_in(v_.0, v_i, v_m, v_n)) [ v_.0 <= v_n ] with all transitions in problem 6, the following new transition is obtained:
	eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_.0 + v_m, v_i, v_m, v_n)) [ v_.0 <= v_n /\ -v_.0 + v_n >= 0 ]
We thus obtain the following problem:
7:	T:
		(?, 2)    eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_.0 + v_m, v_i, v_m, v_n)) [ v_.0 <= v_n /\ -v_.0 + v_n >= 0 ]
		(?, 1)    eval_speedFails1_bb2_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_.0 + v_m, v_i, v_m, v_n)) [ -v_.0 + v_n >= 0 ]
		(2, 2)    eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_.0, v_i, v_m, v_n)) [ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
		(1, 1)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_3(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_4(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_2(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_3(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_1(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_2(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_0(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_1(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_bb0_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_0(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_start(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb0_in(v_.0, v_i, v_m, v_n))
	start location:	eval_speedFails1_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transition from problem 7:
	eval_speedFails1_bb2_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_.0 + v_m, v_i, v_m, v_n)) [ -v_.0 + v_n >= 0 ]
We thus obtain the following problem:
8:	T:
		(?, 2)    eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_.0 + v_m, v_i, v_m, v_n)) [ v_.0 <= v_n /\ -v_.0 + v_n >= 0 ]
		(2, 2)    eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_.0, v_i, v_m, v_n)) [ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
		(1, 1)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_3(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_4(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_2(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_3(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_1(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_2(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_0(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_1(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_bb0_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_0(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_start(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb0_in(v_.0, v_i, v_m, v_n))
	start location:	eval_speedFails1_start
	leaf cost:	0

By chaining the transition eval_speedFails1_bb0_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_0(v_.0, v_i, v_m, v_n)) with all transitions in problem 8, the following new transition is obtained:
	eval_speedFails1_bb0_in(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_1(v_.0, v_i, v_m, v_n))
We thus obtain the following problem:
9:	T:
		(1, 2)    eval_speedFails1_bb0_in(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_1(v_.0, v_i, v_m, v_n))
		(?, 2)    eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_.0 + v_m, v_i, v_m, v_n)) [ v_.0 <= v_n /\ -v_.0 + v_n >= 0 ]
		(2, 2)    eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_.0, v_i, v_m, v_n)) [ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
		(1, 1)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_3(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_4(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_2(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_3(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_1(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_2(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_0(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_1(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_start(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb0_in(v_.0, v_i, v_m, v_n))
	start location:	eval_speedFails1_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transition from problem 9:
	eval_speedFails1_0(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_1(v_.0, v_i, v_m, v_n))
We thus obtain the following problem:
10:	T:
		(?, 2)    eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_.0 + v_m, v_i, v_m, v_n)) [ v_.0 <= v_n /\ -v_.0 + v_n >= 0 ]
		(2, 2)    eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_.0, v_i, v_m, v_n)) [ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
		(1, 1)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_3(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_4(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_2(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_3(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_1(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_2(v_.0, v_i, v_m, v_n))
		(1, 2)    eval_speedFails1_bb0_in(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_1(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_start(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb0_in(v_.0, v_i, v_m, v_n))
	start location:	eval_speedFails1_start
	leaf cost:	0

By chaining the transition eval_speedFails1_start(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb0_in(v_.0, v_i, v_m, v_n)) with all transitions in problem 10, the following new transition is obtained:
	eval_speedFails1_start(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_1(v_.0, v_i, v_m, v_n))
We thus obtain the following problem:
11:	T:
		(1, 3)    eval_speedFails1_start(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_1(v_.0, v_i, v_m, v_n))
		(?, 2)    eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_.0 + v_m, v_i, v_m, v_n)) [ v_.0 <= v_n /\ -v_.0 + v_n >= 0 ]
		(2, 2)    eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_.0, v_i, v_m, v_n)) [ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
		(1, 1)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_3(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_4(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_2(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_3(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_1(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_2(v_.0, v_i, v_m, v_n))
		(1, 2)    eval_speedFails1_bb0_in(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_1(v_.0, v_i, v_m, v_n))
	start location:	eval_speedFails1_start
	leaf cost:	0

Testing for reachability in the complexity graph removes the following transition from problem 11:
	eval_speedFails1_bb0_in(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_1(v_.0, v_i, v_m, v_n))
We thus obtain the following problem:
12:	T:
		(?, 2)    eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_.0 + v_m, v_i, v_m, v_n)) [ v_.0 <= v_n /\ -v_.0 + v_n >= 0 ]
		(2, 2)    eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_.0, v_i, v_m, v_n)) [ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
		(1, 1)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_3(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_4(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_2(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_3(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_1(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_2(v_.0, v_i, v_m, v_n))
		(1, 3)    eval_speedFails1_start(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_1(v_.0, v_i, v_m, v_n))
	start location:	eval_speedFails1_start
	leaf cost:	0

By chaining the transition eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i, v_i, v_m, v_n)) with all transitions in problem 12, the following new transitions are obtained:
	eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i + v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 ]
	eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i, v_i, v_m, v_n)) [ v_i > v_n /\ v_i - v_n - 1 >= 0 ]
We thus obtain the following problem:
13:	T:
		(1, 3)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i + v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 ]
		(1, 3)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i, v_i, v_m, v_n)) [ v_i > v_n /\ v_i - v_n - 1 >= 0 ]
		(?, 2)    eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_.0 + v_m, v_i, v_m, v_n)) [ v_.0 <= v_n /\ -v_.0 + v_n >= 0 ]
		(2, 2)    eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_.0, v_i, v_m, v_n)) [ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
		(1, 1)    eval_speedFails1_3(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_4(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_2(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_3(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_1(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_2(v_.0, v_i, v_m, v_n))
		(1, 3)    eval_speedFails1_start(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_1(v_.0, v_i, v_m, v_n))
	start location:	eval_speedFails1_start
	leaf cost:	0

By chaining the transition eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i + v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 ] with all transitions in problem 13, the following new transitions are obtained:
	eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i + 2*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 ]
	eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m > v_n /\ v_i + v_m - v_n - 1 >= 0 ]
We thus obtain the following problem:
14:	T:
		(1, 5)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i + 2*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 ]
		(1, 5)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m > v_n /\ v_i + v_m - v_n - 1 >= 0 ]
		(1, 3)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i, v_i, v_m, v_n)) [ v_i > v_n /\ v_i - v_n - 1 >= 0 ]
		(?, 2)    eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_.0 + v_m, v_i, v_m, v_n)) [ v_.0 <= v_n /\ -v_.0 + v_n >= 0 ]
		(2, 2)    eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_.0, v_i, v_m, v_n)) [ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
		(1, 1)    eval_speedFails1_3(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_4(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_2(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_3(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_1(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_2(v_.0, v_i, v_m, v_n))
		(1, 3)    eval_speedFails1_start(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_1(v_.0, v_i, v_m, v_n))
	start location:	eval_speedFails1_start
	leaf cost:	0

By chaining the transition eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i + 2*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 ] with all transitions in problem 14, the following new transitions are obtained:
	eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i + 3*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 ]
	eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 2*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m > v_n /\ v_i + 2*v_m - v_n - 1 >= 0 ]
We thus obtain the following problem:
15:	T:
		(1, 7)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i + 3*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 ]
		(1, 7)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 2*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m > v_n /\ v_i + 2*v_m - v_n - 1 >= 0 ]
		(1, 5)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m > v_n /\ v_i + v_m - v_n - 1 >= 0 ]
		(1, 3)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i, v_i, v_m, v_n)) [ v_i > v_n /\ v_i - v_n - 1 >= 0 ]
		(?, 2)    eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_.0 + v_m, v_i, v_m, v_n)) [ v_.0 <= v_n /\ -v_.0 + v_n >= 0 ]
		(2, 2)    eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_.0, v_i, v_m, v_n)) [ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
		(1, 1)    eval_speedFails1_3(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_4(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_2(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_3(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_1(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_2(v_.0, v_i, v_m, v_n))
		(1, 3)    eval_speedFails1_start(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_1(v_.0, v_i, v_m, v_n))
	start location:	eval_speedFails1_start
	leaf cost:	0

By chaining the transition eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i + 3*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 ] with all transitions in problem 15, the following new transitions are obtained:
	eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i + 4*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 ]
	eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 3*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m > v_n /\ v_i + 3*v_m - v_n - 1 >= 0 ]
We thus obtain the following problem:
16:	T:
		(1, 9)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i + 4*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 ]
		(1, 9)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 3*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m > v_n /\ v_i + 3*v_m - v_n - 1 >= 0 ]
		(1, 7)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 2*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m > v_n /\ v_i + 2*v_m - v_n - 1 >= 0 ]
		(1, 5)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m > v_n /\ v_i + v_m - v_n - 1 >= 0 ]
		(1, 3)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i, v_i, v_m, v_n)) [ v_i > v_n /\ v_i - v_n - 1 >= 0 ]
		(?, 2)    eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_.0 + v_m, v_i, v_m, v_n)) [ v_.0 <= v_n /\ -v_.0 + v_n >= 0 ]
		(2, 2)    eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_.0, v_i, v_m, v_n)) [ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
		(1, 1)    eval_speedFails1_3(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_4(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_2(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_3(v_.0, v_i, v_m, v_n))
		(1, 1)    eval_speedFails1_1(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_2(v_.0, v_i, v_m, v_n))
		(1, 3)    eval_speedFails1_start(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_1(v_.0, v_i, v_m, v_n))
	start location:	eval_speedFails1_start
	leaf cost:	0

By chaining the transition eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i + 4*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 ] with all transitions in problem 16, the following new transitions are obtained:
	eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i + 5*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 ]
	eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 4*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m > v_n /\ v_i + 4*v_m - v_n - 1 >= 0 ]
We thus obtain the following problem:
17:	T:
		(1, 11)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i + 5*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 ]
		(1, 11)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 4*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m > v_n /\ v_i + 4*v_m - v_n - 1 >= 0 ]
		(1, 9)     eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 3*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m > v_n /\ v_i + 3*v_m - v_n - 1 >= 0 ]
		(1, 7)     eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 2*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m > v_n /\ v_i + 2*v_m - v_n - 1 >= 0 ]
		(1, 5)     eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m > v_n /\ v_i + v_m - v_n - 1 >= 0 ]
		(1, 3)     eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i, v_i, v_m, v_n)) [ v_i > v_n /\ v_i - v_n - 1 >= 0 ]
		(?, 2)     eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_.0 + v_m, v_i, v_m, v_n)) [ v_.0 <= v_n /\ -v_.0 + v_n >= 0 ]
		(2, 2)     eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_.0, v_i, v_m, v_n)) [ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
		(1, 1)     eval_speedFails1_3(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_4(v_.0, v_i, v_m, v_n))
		(1, 1)     eval_speedFails1_2(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_3(v_.0, v_i, v_m, v_n))
		(1, 1)     eval_speedFails1_1(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_2(v_.0, v_i, v_m, v_n))
		(1, 3)     eval_speedFails1_start(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_1(v_.0, v_i, v_m, v_n))
	start location:	eval_speedFails1_start
	leaf cost:	0

By chaining the transition eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i + 5*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 ] with all transitions in problem 17, the following new transitions are obtained:
	eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i + 6*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 ]
	eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 5*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m > v_n /\ v_i + 5*v_m - v_n - 1 >= 0 ]
We thus obtain the following problem:
18:	T:
		(1, 13)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i + 6*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 ]
		(1, 13)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 5*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m > v_n /\ v_i + 5*v_m - v_n - 1 >= 0 ]
		(1, 11)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 4*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m > v_n /\ v_i + 4*v_m - v_n - 1 >= 0 ]
		(1, 9)     eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 3*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m > v_n /\ v_i + 3*v_m - v_n - 1 >= 0 ]
		(1, 7)     eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 2*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m > v_n /\ v_i + 2*v_m - v_n - 1 >= 0 ]
		(1, 5)     eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m > v_n /\ v_i + v_m - v_n - 1 >= 0 ]
		(1, 3)     eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i, v_i, v_m, v_n)) [ v_i > v_n /\ v_i - v_n - 1 >= 0 ]
		(?, 2)     eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_.0 + v_m, v_i, v_m, v_n)) [ v_.0 <= v_n /\ -v_.0 + v_n >= 0 ]
		(2, 2)     eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_.0, v_i, v_m, v_n)) [ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
		(1, 1)     eval_speedFails1_3(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_4(v_.0, v_i, v_m, v_n))
		(1, 1)     eval_speedFails1_2(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_3(v_.0, v_i, v_m, v_n))
		(1, 1)     eval_speedFails1_1(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_2(v_.0, v_i, v_m, v_n))
		(1, 3)     eval_speedFails1_start(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_1(v_.0, v_i, v_m, v_n))
	start location:	eval_speedFails1_start
	leaf cost:	0

By chaining the transition eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i + 6*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 ] with all transitions in problem 18, the following new transitions are obtained:
	eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i + 7*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 /\ v_i + 6*v_m <= v_n /\ -v_i - 6*v_m + v_n >= 0 ]
	eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 6*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 /\ v_i + 6*v_m > v_n /\ v_i + 6*v_m - v_n - 1 >= 0 ]
We thus obtain the following problem:
19:	T:
		(1, 15)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i + 7*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 /\ v_i + 6*v_m <= v_n /\ -v_i - 6*v_m + v_n >= 0 ]
		(1, 15)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 6*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 /\ v_i + 6*v_m > v_n /\ v_i + 6*v_m - v_n - 1 >= 0 ]
		(1, 13)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 5*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m > v_n /\ v_i + 5*v_m - v_n - 1 >= 0 ]
		(1, 11)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 4*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m > v_n /\ v_i + 4*v_m - v_n - 1 >= 0 ]
		(1, 9)     eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 3*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m > v_n /\ v_i + 3*v_m - v_n - 1 >= 0 ]
		(1, 7)     eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 2*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m > v_n /\ v_i + 2*v_m - v_n - 1 >= 0 ]
		(1, 5)     eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m > v_n /\ v_i + v_m - v_n - 1 >= 0 ]
		(1, 3)     eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i, v_i, v_m, v_n)) [ v_i > v_n /\ v_i - v_n - 1 >= 0 ]
		(?, 2)     eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_.0 + v_m, v_i, v_m, v_n)) [ v_.0 <= v_n /\ -v_.0 + v_n >= 0 ]
		(2, 2)     eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_.0, v_i, v_m, v_n)) [ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
		(1, 1)     eval_speedFails1_3(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_4(v_.0, v_i, v_m, v_n))
		(1, 1)     eval_speedFails1_2(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_3(v_.0, v_i, v_m, v_n))
		(1, 1)     eval_speedFails1_1(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_2(v_.0, v_i, v_m, v_n))
		(1, 3)     eval_speedFails1_start(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_1(v_.0, v_i, v_m, v_n))
	start location:	eval_speedFails1_start
	leaf cost:	0

By chaining the transition eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i + 7*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 /\ v_i + 6*v_m <= v_n /\ -v_i - 6*v_m + v_n >= 0 ] with all transitions in problem 19, the following new transitions are obtained:
	eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i + 8*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 /\ v_i + 6*v_m <= v_n /\ -v_i - 6*v_m + v_n >= 0 /\ v_i + 7*v_m <= v_n /\ -v_i - 7*v_m + v_n >= 0 ]
	eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 7*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 /\ v_i + 6*v_m <= v_n /\ -v_i - 6*v_m + v_n >= 0 /\ v_i + 7*v_m > v_n /\ v_i + 7*v_m - v_n - 1 >= 0 ]
We thus obtain the following problem:
20:	T:
		(1, 17)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i + 8*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 /\ v_i + 6*v_m <= v_n /\ -v_i - 6*v_m + v_n >= 0 /\ v_i + 7*v_m <= v_n /\ -v_i - 7*v_m + v_n >= 0 ]
		(1, 17)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 7*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 /\ v_i + 6*v_m <= v_n /\ -v_i - 6*v_m + v_n >= 0 /\ v_i + 7*v_m > v_n /\ v_i + 7*v_m - v_n - 1 >= 0 ]
		(1, 15)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 6*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 /\ v_i + 6*v_m > v_n /\ v_i + 6*v_m - v_n - 1 >= 0 ]
		(1, 13)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 5*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m > v_n /\ v_i + 5*v_m - v_n - 1 >= 0 ]
		(1, 11)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 4*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m > v_n /\ v_i + 4*v_m - v_n - 1 >= 0 ]
		(1, 9)     eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 3*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m > v_n /\ v_i + 3*v_m - v_n - 1 >= 0 ]
		(1, 7)     eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 2*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m > v_n /\ v_i + 2*v_m - v_n - 1 >= 0 ]
		(1, 5)     eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m > v_n /\ v_i + v_m - v_n - 1 >= 0 ]
		(1, 3)     eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i, v_i, v_m, v_n)) [ v_i > v_n /\ v_i - v_n - 1 >= 0 ]
		(?, 2)     eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_.0 + v_m, v_i, v_m, v_n)) [ v_.0 <= v_n /\ -v_.0 + v_n >= 0 ]
		(2, 2)     eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_.0, v_i, v_m, v_n)) [ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
		(1, 1)     eval_speedFails1_3(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_4(v_.0, v_i, v_m, v_n))
		(1, 1)     eval_speedFails1_2(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_3(v_.0, v_i, v_m, v_n))
		(1, 1)     eval_speedFails1_1(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_2(v_.0, v_i, v_m, v_n))
		(1, 3)     eval_speedFails1_start(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_1(v_.0, v_i, v_m, v_n))
	start location:	eval_speedFails1_start
	leaf cost:	0

By chaining the transition eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i + 8*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 /\ v_i + 6*v_m <= v_n /\ -v_i - 6*v_m + v_n >= 0 /\ v_i + 7*v_m <= v_n /\ -v_i - 7*v_m + v_n >= 0 ] with all transitions in problem 20, the following new transitions are obtained:
	eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i + 9*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 /\ v_i + 6*v_m <= v_n /\ -v_i - 6*v_m + v_n >= 0 /\ v_i + 7*v_m <= v_n /\ -v_i - 7*v_m + v_n >= 0 /\ v_i + 8*v_m <= v_n /\ -v_i - 8*v_m + v_n >= 0 ]
	eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 8*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 /\ v_i + 6*v_m <= v_n /\ -v_i - 6*v_m + v_n >= 0 /\ v_i + 7*v_m <= v_n /\ -v_i - 7*v_m + v_n >= 0 /\ v_i + 8*v_m > v_n /\ v_i + 8*v_m - v_n - 1 >= 0 ]
We thus obtain the following problem:
21:	T:
		(1, 19)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i + 9*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 /\ v_i + 6*v_m <= v_n /\ -v_i - 6*v_m + v_n >= 0 /\ v_i + 7*v_m <= v_n /\ -v_i - 7*v_m + v_n >= 0 /\ v_i + 8*v_m <= v_n /\ -v_i - 8*v_m + v_n >= 0 ]
		(1, 19)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 8*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 /\ v_i + 6*v_m <= v_n /\ -v_i - 6*v_m + v_n >= 0 /\ v_i + 7*v_m <= v_n /\ -v_i - 7*v_m + v_n >= 0 /\ v_i + 8*v_m > v_n /\ v_i + 8*v_m - v_n - 1 >= 0 ]
		(1, 17)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 7*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 /\ v_i + 6*v_m <= v_n /\ -v_i - 6*v_m + v_n >= 0 /\ v_i + 7*v_m > v_n /\ v_i + 7*v_m - v_n - 1 >= 0 ]
		(1, 15)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 6*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 /\ v_i + 6*v_m > v_n /\ v_i + 6*v_m - v_n - 1 >= 0 ]
		(1, 13)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 5*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m > v_n /\ v_i + 5*v_m - v_n - 1 >= 0 ]
		(1, 11)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 4*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m > v_n /\ v_i + 4*v_m - v_n - 1 >= 0 ]
		(1, 9)     eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 3*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m > v_n /\ v_i + 3*v_m - v_n - 1 >= 0 ]
		(1, 7)     eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 2*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m > v_n /\ v_i + 2*v_m - v_n - 1 >= 0 ]
		(1, 5)     eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m > v_n /\ v_i + v_m - v_n - 1 >= 0 ]
		(1, 3)     eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i, v_i, v_m, v_n)) [ v_i > v_n /\ v_i - v_n - 1 >= 0 ]
		(?, 2)     eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_.0 + v_m, v_i, v_m, v_n)) [ v_.0 <= v_n /\ -v_.0 + v_n >= 0 ]
		(2, 2)     eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_.0, v_i, v_m, v_n)) [ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
		(1, 1)     eval_speedFails1_3(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_4(v_.0, v_i, v_m, v_n))
		(1, 1)     eval_speedFails1_2(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_3(v_.0, v_i, v_m, v_n))
		(1, 1)     eval_speedFails1_1(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_2(v_.0, v_i, v_m, v_n))
		(1, 3)     eval_speedFails1_start(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_1(v_.0, v_i, v_m, v_n))
	start location:	eval_speedFails1_start
	leaf cost:	0

By chaining the transition eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i + 9*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 /\ v_i + 6*v_m <= v_n /\ -v_i - 6*v_m + v_n >= 0 /\ v_i + 7*v_m <= v_n /\ -v_i - 7*v_m + v_n >= 0 /\ v_i + 8*v_m <= v_n /\ -v_i - 8*v_m + v_n >= 0 ] with all transitions in problem 21, the following new transitions are obtained:
	eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i + 10*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 /\ v_i + 6*v_m <= v_n /\ -v_i - 6*v_m + v_n >= 0 /\ v_i + 7*v_m <= v_n /\ -v_i - 7*v_m + v_n >= 0 /\ v_i + 8*v_m <= v_n /\ -v_i - 8*v_m + v_n >= 0 /\ v_i + 9*v_m <= v_n /\ -v_i - 9*v_m + v_n >= 0 ]
	eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 9*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 /\ v_i + 6*v_m <= v_n /\ -v_i - 6*v_m + v_n >= 0 /\ v_i + 7*v_m <= v_n /\ -v_i - 7*v_m + v_n >= 0 /\ v_i + 8*v_m <= v_n /\ -v_i - 8*v_m + v_n >= 0 /\ v_i + 9*v_m > v_n /\ v_i + 9*v_m - v_n - 1 >= 0 ]
We thus obtain the following problem:
22:	T:
		(1, 21)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i + 10*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 /\ v_i + 6*v_m <= v_n /\ -v_i - 6*v_m + v_n >= 0 /\ v_i + 7*v_m <= v_n /\ -v_i - 7*v_m + v_n >= 0 /\ v_i + 8*v_m <= v_n /\ -v_i - 8*v_m + v_n >= 0 /\ v_i + 9*v_m <= v_n /\ -v_i - 9*v_m + v_n >= 0 ]
		(1, 21)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 9*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 /\ v_i + 6*v_m <= v_n /\ -v_i - 6*v_m + v_n >= 0 /\ v_i + 7*v_m <= v_n /\ -v_i - 7*v_m + v_n >= 0 /\ v_i + 8*v_m <= v_n /\ -v_i - 8*v_m + v_n >= 0 /\ v_i + 9*v_m > v_n /\ v_i + 9*v_m - v_n - 1 >= 0 ]
		(1, 19)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 8*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 /\ v_i + 6*v_m <= v_n /\ -v_i - 6*v_m + v_n >= 0 /\ v_i + 7*v_m <= v_n /\ -v_i - 7*v_m + v_n >= 0 /\ v_i + 8*v_m > v_n /\ v_i + 8*v_m - v_n - 1 >= 0 ]
		(1, 17)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 7*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 /\ v_i + 6*v_m <= v_n /\ -v_i - 6*v_m + v_n >= 0 /\ v_i + 7*v_m > v_n /\ v_i + 7*v_m - v_n - 1 >= 0 ]
		(1, 15)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 6*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 /\ v_i + 6*v_m > v_n /\ v_i + 6*v_m - v_n - 1 >= 0 ]
		(1, 13)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 5*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m > v_n /\ v_i + 5*v_m - v_n - 1 >= 0 ]
		(1, 11)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 4*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m > v_n /\ v_i + 4*v_m - v_n - 1 >= 0 ]
		(1, 9)     eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 3*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m > v_n /\ v_i + 3*v_m - v_n - 1 >= 0 ]
		(1, 7)     eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 2*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m > v_n /\ v_i + 2*v_m - v_n - 1 >= 0 ]
		(1, 5)     eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m > v_n /\ v_i + v_m - v_n - 1 >= 0 ]
		(1, 3)     eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i, v_i, v_m, v_n)) [ v_i > v_n /\ v_i - v_n - 1 >= 0 ]
		(?, 2)     eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_.0 + v_m, v_i, v_m, v_n)) [ v_.0 <= v_n /\ -v_.0 + v_n >= 0 ]
		(2, 2)     eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_.0, v_i, v_m, v_n)) [ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
		(1, 1)     eval_speedFails1_3(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_4(v_.0, v_i, v_m, v_n))
		(1, 1)     eval_speedFails1_2(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_3(v_.0, v_i, v_m, v_n))
		(1, 1)     eval_speedFails1_1(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_2(v_.0, v_i, v_m, v_n))
		(1, 3)     eval_speedFails1_start(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_1(v_.0, v_i, v_m, v_n))
	start location:	eval_speedFails1_start
	leaf cost:	0

By chaining the transition eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i + 10*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 /\ v_i + 6*v_m <= v_n /\ -v_i - 6*v_m + v_n >= 0 /\ v_i + 7*v_m <= v_n /\ -v_i - 7*v_m + v_n >= 0 /\ v_i + 8*v_m <= v_n /\ -v_i - 8*v_m + v_n >= 0 /\ v_i + 9*v_m <= v_n /\ -v_i - 9*v_m + v_n >= 0 ] with all transitions in problem 22, the following new transitions are obtained:
	eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i + 11*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 /\ v_i + 6*v_m <= v_n /\ -v_i - 6*v_m + v_n >= 0 /\ v_i + 7*v_m <= v_n /\ -v_i - 7*v_m + v_n >= 0 /\ v_i + 8*v_m <= v_n /\ -v_i - 8*v_m + v_n >= 0 /\ v_i + 9*v_m <= v_n /\ -v_i - 9*v_m + v_n >= 0 /\ v_i + 10*v_m <= v_n /\ -v_i - 10*v_m + v_n >= 0 ]
	eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 10*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 /\ v_i + 6*v_m <= v_n /\ -v_i - 6*v_m + v_n >= 0 /\ v_i + 7*v_m <= v_n /\ -v_i - 7*v_m + v_n >= 0 /\ v_i + 8*v_m <= v_n /\ -v_i - 8*v_m + v_n >= 0 /\ v_i + 9*v_m <= v_n /\ -v_i - 9*v_m + v_n >= 0 /\ v_i + 10*v_m > v_n /\ v_i + 10*v_m - v_n - 1 >= 0 ]
We thus obtain the following problem:
23:	T:
		(1, 23)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_i + 11*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 /\ v_i + 6*v_m <= v_n /\ -v_i - 6*v_m + v_n >= 0 /\ v_i + 7*v_m <= v_n /\ -v_i - 7*v_m + v_n >= 0 /\ v_i + 8*v_m <= v_n /\ -v_i - 8*v_m + v_n >= 0 /\ v_i + 9*v_m <= v_n /\ -v_i - 9*v_m + v_n >= 0 /\ v_i + 10*v_m <= v_n /\ -v_i - 10*v_m + v_n >= 0 ]
		(1, 23)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 10*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 /\ v_i + 6*v_m <= v_n /\ -v_i - 6*v_m + v_n >= 0 /\ v_i + 7*v_m <= v_n /\ -v_i - 7*v_m + v_n >= 0 /\ v_i + 8*v_m <= v_n /\ -v_i - 8*v_m + v_n >= 0 /\ v_i + 9*v_m <= v_n /\ -v_i - 9*v_m + v_n >= 0 /\ v_i + 10*v_m > v_n /\ v_i + 10*v_m - v_n - 1 >= 0 ]
		(1, 21)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 9*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 /\ v_i + 6*v_m <= v_n /\ -v_i - 6*v_m + v_n >= 0 /\ v_i + 7*v_m <= v_n /\ -v_i - 7*v_m + v_n >= 0 /\ v_i + 8*v_m <= v_n /\ -v_i - 8*v_m + v_n >= 0 /\ v_i + 9*v_m > v_n /\ v_i + 9*v_m - v_n - 1 >= 0 ]
		(1, 19)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 8*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 /\ v_i + 6*v_m <= v_n /\ -v_i - 6*v_m + v_n >= 0 /\ v_i + 7*v_m <= v_n /\ -v_i - 7*v_m + v_n >= 0 /\ v_i + 8*v_m > v_n /\ v_i + 8*v_m - v_n - 1 >= 0 ]
		(1, 17)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 7*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 /\ v_i + 6*v_m <= v_n /\ -v_i - 6*v_m + v_n >= 0 /\ v_i + 7*v_m > v_n /\ v_i + 7*v_m - v_n - 1 >= 0 ]
		(1, 15)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 6*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m <= v_n /\ -v_i - 5*v_m + v_n >= 0 /\ v_i + 6*v_m > v_n /\ v_i + 6*v_m - v_n - 1 >= 0 ]
		(1, 13)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 5*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m <= v_n /\ -v_i - 4*v_m + v_n >= 0 /\ v_i + 5*v_m > v_n /\ v_i + 5*v_m - v_n - 1 >= 0 ]
		(1, 11)    eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 4*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m <= v_n /\ -v_i - 3*v_m + v_n >= 0 /\ v_i + 4*v_m > v_n /\ v_i + 4*v_m - v_n - 1 >= 0 ]
		(1, 9)     eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 3*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m <= v_n /\ -v_i - 2*v_m + v_n >= 0 /\ v_i + 3*v_m > v_n /\ v_i + 3*v_m - v_n - 1 >= 0 ]
		(1, 7)     eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + 2*v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m <= v_n /\ -v_i - v_m + v_n >= 0 /\ v_i + 2*v_m > v_n /\ v_i + 2*v_m - v_n - 1 >= 0 ]
		(1, 5)     eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i + v_m, v_i, v_m, v_n)) [ v_i <= v_n /\ -v_i + v_n >= 0 /\ v_i + v_m > v_n /\ v_i + v_m - v_n - 1 >= 0 ]
		(1, 3)     eval_speedFails1_4(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_i, v_i, v_m, v_n)) [ v_i > v_n /\ v_i - v_n - 1 >= 0 ]
		(?, 2)     eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_bb1_in(v_.0 + v_m, v_i, v_m, v_n)) [ v_.0 <= v_n /\ -v_.0 + v_n >= 0 ]
		(2, 2)     eval_speedFails1_bb1_in(v_.0, v_i, v_m, v_n) -> Com_1(eval_speedFails1_stop(v_.0, v_i, v_m, v_n)) [ v_.0 > v_n /\ v_.0 - v_n - 1 >= 0 ]
		(1, 1)     eval_speedFails1_3(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_4(v_.0, v_i, v_m, v_n))
		(1, 1)     eval_speedFails1_2(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_3(v_.0, v_i, v_m, v_n))
		(1, 1)     eval_speedFails1_1(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_2(v_.0, v_i, v_m, v_n))
		(1, 3)     eval_speedFails1_start(v_.0, v_i, v_m, v_n) -> Com_2(eval_llvm.dbg.value_start(v_.0, v_i, v_m, v_n), eval_speedFails1_1(v_.0, v_i, v_m, v_n))
	start location:	eval_speedFails1_start
	leaf cost:	0

Complexity upper bound ?

Time: 2.350 sec (SMT: 1.868 sec)

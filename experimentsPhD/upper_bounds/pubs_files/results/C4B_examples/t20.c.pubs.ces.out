This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A,B) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 2+nat(-A+B)+nat(c(maximize_failed)) 

  * LOOPS $pubs_aux_entry$(C,D) -> $pubs_aux_entry$(E,F)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A,B) -> $pubs_aux_entry$(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_start_start(A,B)

  * Non Asymptotic Upper Bound: 2+nat(-A+B)+nat(c(maximize_failed)) 

  * LOOPS eval_start_start(C,D) -> eval_start_start(E,F)

  * Ranking function: N/A

  * Invariants eval_start_start(A,B) -> eval_start_start(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_start_bb0_in(A,B)

  * Non Asymptotic Upper Bound: 2+nat(-A+B)+nat(c(maximize_failed)) 

  * LOOPS eval_start_bb0_in(C,D) -> eval_start_bb0_in(E,F)

  * Ranking function: N/A

  * Invariants eval_start_bb0_in(A,B) -> eval_start_bb0_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_start_0(A,B)

  * Non Asymptotic Upper Bound: 2+nat(-A+B)+nat(c(maximize_failed)) 

  * LOOPS eval_start_0(C,D) -> eval_start_0(E,F)

  * Ranking function: N/A

  * Invariants eval_start_0(A,B) -> eval_start_0(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_start_1(A,B)

  * Non Asymptotic Upper Bound: 2+nat(-A+B)+nat(c(maximize_failed)) 

  * LOOPS eval_start_1(C,D) -> eval_start_1(E,F)

  * Ranking function: N/A

  * Invariants eval_start_1(A,B) -> eval_start_1(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_start_2(A,B)

  * Non Asymptotic Upper Bound: 2+nat(-A+B)+nat(c(maximize_failed)) 

  * LOOPS eval_start_2(C,D) -> eval_start_2(E,F)

  * Ranking function: N/A

  * Invariants eval_start_2(A,B) -> eval_start_2(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_start_3(A,B)

  * Non Asymptotic Upper Bound: 2+nat(-A+B)+nat(c(maximize_failed)) 

  * LOOPS eval_start_3(C,D) -> eval_start_3(E,F)

  * Ranking function: N/A

  * Invariants eval_start_3(A,B) -> eval_start_3(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS loop_cont_eval_start_bb1_in(A,B,C,D)

  * Non Asymptotic Upper Bound: 1+nat(B-C) 

  * LOOPS loop_cont_eval_start_bb1_in(E,F,G,H) -> loop_cont_eval_start_bb1_in(I,J,K,L)

  * Ranking function: N/A

  * Invariants loop_cont_eval_start_bb1_in(A,B,C,D) -> loop_cont_eval_start_bb1_in(E,F,G,H)

     entry  : [B>=C,A=3]
     non-rec: [A=E,B=F,C=G,D=H,B>=C,A=3]
     rec    : [0=1]
     inv    : [B>=C,A=3,E=3,B=F,C=G,D=H]

CRS loop_cont_eval_start_bb3_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_start_bb3_in(C,D) -> loop_cont_eval_start_bb3_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_start_bb3_in(A,B) -> loop_cont_eval_start_bb3_in(C,D)

     entry  : [A=2]
     non-rec: [A=C,B=D,A=2]
     rec    : [0=1]
     inv    : [A=2,C=2,B=D]

CRS eval_start_bb5_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_start_bb5_in -> eval_start_bb5_in

  * Ranking function: N/A

  * Invariants eval_start_bb5_in -> eval_start_bb5_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_start_bb3_in(A,B)

  * Non Asymptotic Upper Bound: nat(A-B) 

  * LOOPS eval_start_bb3_in(C,D) -> eval_start_bb3_in(E,F)
     - [D+1=F,C=E,C>=D+1]

  * Ranking function: nat(C-D)

  * Invariants eval_start_bb3_in(A,B) -> eval_start_bb3_in(C,D)

     entry  : [A>=B]
     non-rec: [A=C,B=D,A>=B]
     rec    : [A=C,A>=D,D>=B+1]
     inv    : [D>=B,A>=D,A=C]

CRS eval_start_bb1_in(A,B)

  * Non Asymptotic Upper Bound: nat(A-B) 

  * LOOPS eval_start_bb1_in(C,D) -> eval_start_bb1_in(E,F)
     - [D+1=F,C=E,C>=D+1]

  * Ranking function: nat(C-D)

  * Invariants eval_start_bb1_in(A,B) -> eval_start_bb1_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [A=C,A>=D,D>=B+1]
     inv    : [D>=B,A=C]



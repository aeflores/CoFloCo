This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+8*nat(A-1)+4*nat(A-1)*nat(A-1) 

  * LOOPS $pubs_aux_entry$(B) -> $pubs_aux_entry$(C)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A) -> $pubs_aux_entry$(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_realheapsort_step1_start(A)

  * Non Asymptotic Upper Bound: 1+8*nat(A-1)+4*nat(A-1)*nat(A-1) 

  * LOOPS eval_realheapsort_step1_start(B) -> eval_realheapsort_step1_start(C)

  * Ranking function: N/A

  * Invariants eval_realheapsort_step1_start(A) -> eval_realheapsort_step1_start(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_realheapsort_step1_bb0_in(A)

  * Non Asymptotic Upper Bound: 1+8*nat(A-1)+4*nat(A-1)*nat(A-1) 

  * LOOPS eval_realheapsort_step1_bb0_in(B) -> eval_realheapsort_step1_bb0_in(C)

  * Ranking function: N/A

  * Invariants eval_realheapsort_step1_bb0_in(A) -> eval_realheapsort_step1_bb0_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_realheapsort_step1_0(A)

  * Non Asymptotic Upper Bound: 1+8*nat(A-1)+4*nat(A-1)*nat(A-1) 

  * LOOPS eval_realheapsort_step1_0(B) -> eval_realheapsort_step1_0(C)

  * Ranking function: N/A

  * Invariants eval_realheapsort_step1_0(A) -> eval_realheapsort_step1_0(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_realheapsort_step1_1(A)

  * Non Asymptotic Upper Bound: 1+8*nat(A-1)+4*nat(A-1)*nat(A-1) 

  * LOOPS eval_realheapsort_step1_1(B) -> eval_realheapsort_step1_1(C)

  * Ranking function: N/A

  * Invariants eval_realheapsort_step1_1(A) -> eval_realheapsort_step1_1(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_realheapsort_step1_2(A)

  * Non Asymptotic Upper Bound: 1+8*nat(A-1)+4*nat(A-1)*nat(A-1) 

  * LOOPS eval_realheapsort_step1_2(B) -> eval_realheapsort_step1_2(C)

  * Ranking function: N/A

  * Invariants eval_realheapsort_step1_2(A) -> eval_realheapsort_step1_2(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS loop_cont_eval_realheapsort_step1_bb1_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_realheapsort_step1_bb1_in(C,D) -> loop_cont_eval_realheapsort_step1_bb1_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_realheapsort_step1_bb1_in(A,B) -> loop_cont_eval_realheapsort_step1_bb1_in(C,D)

     entry  : [A=3]
     non-rec: [A=C,B=D,A=3]
     rec    : [0=1]
     inv    : [A=3,C=3,B=D]

CRS eval_realheapsort_step1_bb5_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_realheapsort_step1_bb5_in -> eval_realheapsort_step1_bb5_in

  * Ranking function: N/A

  * Invariants eval_realheapsort_step1_bb5_in -> eval_realheapsort_step1_bb5_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_realheapsort_step1_bb1_in(A,B)

  * Non Asymptotic Upper Bound: 8*nat(A-B)+4*nat(A-B)*nat(A-1) 

  * LOOPS eval_realheapsort_step1_bb1_in(C,D) -> eval_realheapsort_step1_bb1_in(E,F)
     - [C>=F,C=E,D+1=F]
     - [C>=F,C=E,D+1=F]
     - [C>=F,C=E,D+1=F]
     - [C>=F,C=E,D+1=F]

  * Ranking function: nat(C-D)

  * Invariants eval_realheapsort_step1_bb1_in(A,B) -> eval_realheapsort_step1_bb1_in(C,D)

     entry  : [A>=3,B=1]
     non-rec: [A=C,B=D,A>=3,B=1]
     rec    : [A=C,B=1,A>=D,A>=3,D>=2]
     inv    : [A>=D,D>=1,A>=3,A=C,B=1]

CRS eval_realheapsort_step1_bb2_in(A,B,C)

  * Non Asymptotic Upper Bound: nat(C) 

  * LOOPS eval_realheapsort_step1_bb2_in(D,E,F) -> eval_realheapsort_step1_bb2_in(G,H,I)
     - [E=H,D=G,F>=1,F>=2*I+1,2*I+2>=F]

  * Ranking function: log(2,nat(F)+1)

  * Invariants eval_realheapsort_step1_bb2_in(A,B,C) -> eval_realheapsort_step1_bb2_in(D,E,F)

     entry  : [A>=C+1,A>=3,C>=1,B=C]
     non-rec: [A=D,B=E,C=F,A>=C+1,A>=3,C>=1,B=C]
     rec    : [B=E,A=D,B=C,A>=B+1,2*F+1>=0,A>=3,2*A+2*F>=B+4,B>=2*F+1,B>=1]
     inv    : [2*A+2*F>=B+4,A>=3,B>=1,B>=F,2*F+1>=0,A>=B+1,A=D,B=E,B=C]



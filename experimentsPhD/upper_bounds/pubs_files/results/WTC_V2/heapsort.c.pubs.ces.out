This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+nat(1*A+ -1)/2+nat(1*A)/2+nat(1*A+1)/2 

  * LOOPS $pubs_aux_entry$(B) -> $pubs_aux_entry$(C)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A) -> $pubs_aux_entry$(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_heapsort_start(A)

  * Non Asymptotic Upper Bound: 1+nat(1*A+ -1)/2+nat(1*A)/2+nat(1*A+1)/2 

  * LOOPS eval_heapsort_start(B) -> eval_heapsort_start(C)

  * Ranking function: N/A

  * Invariants eval_heapsort_start(A) -> eval_heapsort_start(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_heapsort_bb0_in(A)

  * Non Asymptotic Upper Bound: 1+nat(1*A+ -1)/2+nat(1*A)/2+nat(1*A+1)/2 

  * LOOPS eval_heapsort_bb0_in(B) -> eval_heapsort_bb0_in(C)

  * Ranking function: N/A

  * Invariants eval_heapsort_bb0_in(A) -> eval_heapsort_bb0_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_heapsort_0(A)

  * Non Asymptotic Upper Bound: 1+nat(1*A+ -1)/2+nat(1*A)/2+nat(1*A+1)/2 

  * LOOPS eval_heapsort_0(B) -> eval_heapsort_0(C)

  * Ranking function: N/A

  * Invariants eval_heapsort_0(A) -> eval_heapsort_0(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_heapsort_1(A)

  * Non Asymptotic Upper Bound: 1+nat(1*A+ -1)/2+nat(1*A)/2+nat(1*A+1)/2 

  * LOOPS eval_heapsort_1(B) -> eval_heapsort_1(C)

  * Ranking function: N/A

  * Invariants eval_heapsort_1(A) -> eval_heapsort_1(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_heapsort_2(A)

  * Non Asymptotic Upper Bound: 1+nat(1*A+ -1)/2+nat(1*A)/2+nat(1*A+1)/2 

  * LOOPS eval_heapsort_2(B) -> eval_heapsort_2(C)

  * Ranking function: N/A

  * Invariants eval_heapsort_2(A) -> eval_heapsort_2(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_heapsort_3(A)

  * Non Asymptotic Upper Bound: 1+nat(1*A+ -1)/2+nat(1*A)/2+nat(1*A+1)/2 

  * LOOPS eval_heapsort_3(B) -> eval_heapsort_3(C)

  * Ranking function: N/A

  * Invariants eval_heapsort_3(A) -> eval_heapsort_3(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_heapsort_4(A)

  * Non Asymptotic Upper Bound: 1+nat(1*A+ -1)/2+nat(1*A)/2+nat(1*A+1)/2 

  * LOOPS eval_heapsort_4(B) -> eval_heapsort_4(C)

  * Ranking function: N/A

  * Invariants eval_heapsort_4(A) -> eval_heapsort_4(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_heapsort_5(A)

  * Non Asymptotic Upper Bound: 1+nat(1*A+ -1)/2+nat(1*A)/2+nat(1*A+1)/2 

  * LOOPS eval_heapsort_5(B) -> eval_heapsort_5(C)

  * Ranking function: N/A

  * Invariants eval_heapsort_5(A) -> eval_heapsort_5(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_heapsort_6(A)

  * Non Asymptotic Upper Bound: 1+nat(1*A+ -1)/2+nat(1*A)/2+nat(1*A+1)/2 

  * LOOPS eval_heapsort_6(B) -> eval_heapsort_6(C)

  * Ranking function: N/A

  * Invariants eval_heapsort_6(A) -> eval_heapsort_6(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_heapsort_7(A)

  * Non Asymptotic Upper Bound: 1+nat(1*A+ -1)/2+nat(1*A)/2+nat(1*A+1)/2 

  * LOOPS eval_heapsort_7(B) -> eval_heapsort_7(C)

  * Ranking function: N/A

  * Invariants eval_heapsort_7(A) -> eval_heapsort_7(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_heapsort_8(A)

  * Non Asymptotic Upper Bound: 1+nat(1*A+ -1)/2+nat(1*A)/2+nat(1*A+1)/2 

  * LOOPS eval_heapsort_8(B) -> eval_heapsort_8(C)

  * Ranking function: N/A

  * Invariants eval_heapsort_8(A) -> eval_heapsort_8(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_heapsort_9(A)

  * Non Asymptotic Upper Bound: 1+nat(1*A+ -1)/2+nat(1*A)/2+nat(1*A+1)/2 

  * LOOPS eval_heapsort_9(B) -> eval_heapsort_9(C)

  * Ranking function: N/A

  * Invariants eval_heapsort_9(A) -> eval_heapsort_9(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS loop_cont_eval_heapsort_bb1_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_heapsort_bb1_in(C,D) -> loop_cont_eval_heapsort_bb1_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_heapsort_bb1_in(A,B) -> loop_cont_eval_heapsort_bb1_in(C,D)

     entry  : [A=2]
     non-rec: [A=C,B=D,A=2]
     rec    : [0=1]
     inv    : [A=2,C=2,B=D]

CRS eval_heapsort_bb11_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_heapsort_bb11_in -> eval_heapsort_bb11_in

  * Ranking function: N/A

  * Invariants eval_heapsort_bb11_in -> eval_heapsort_bb11_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_heapsort_bb1_in(A,B)

  * Non Asymptotic Upper Bound: nat(A-2*B+1)/2+nat(A-2*B+2)/2+nat(A-2*B+3)/2 

  * LOOPS eval_heapsort_bb1_in(C,D) -> eval_heapsort_bb1_in(E,F)
     - [2*D+1=F,C=E,D>=1,C>=2*D+1]
     - [2*D=F,C=E,D>=1,C>=2*D+1]
     - [C=F,C=E,C=2*D,C>=2]
     - [2*D+1=F,C=E,D>=1,C>=2*D+1]

  * Ranking function: nat(C/2-D+1)

  * Invariants eval_heapsort_bb1_in(A,B) -> eval_heapsort_bb1_in(C,D)

     entry  : [B=1]
     non-rec: [A=C,B=D,B=1]
     rec    : [A=C,B=1,A>=D,D>=2]
     inv    : [D>=1,A=C,B=1]



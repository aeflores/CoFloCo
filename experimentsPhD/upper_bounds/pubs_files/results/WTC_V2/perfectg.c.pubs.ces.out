This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_perfectg_bb1_in/3])) 

  * LOOPS $pubs_aux_entry$(B) -> $pubs_aux_entry$(C)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A) -> $pubs_aux_entry$(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_perfectg_start(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_perfectg_bb1_in/3])) 

  * LOOPS eval_perfectg_start(B) -> eval_perfectg_start(C)

  * Ranking function: N/A

  * Invariants eval_perfectg_start(A) -> eval_perfectg_start(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_perfectg_bb0_in(A)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_perfectg_bb1_in/3])) 

  * LOOPS eval_perfectg_bb0_in(B) -> eval_perfectg_bb0_in(C)

  * Ranking function: N/A

  * Invariants eval_perfectg_bb0_in(A) -> eval_perfectg_bb0_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_perfectg_1(A,B)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_perfectg_bb1_in/3])) 

  * LOOPS eval_perfectg_1(C,D) -> eval_perfectg_1(E,F)

  * Ranking function: N/A

  * Invariants eval_perfectg_1(A,B) -> eval_perfectg_1(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_perfectg_2(A,B)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_perfectg_bb1_in/3])) 

  * LOOPS eval_perfectg_2(C,D) -> eval_perfectg_2(E,F)

  * Ranking function: N/A

  * Invariants eval_perfectg_2(A,B) -> eval_perfectg_2(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_perfectg_3(A,B)

  * Non Asymptotic Upper Bound: 1+c(failed(schemes_failed,[scc=1,cr=eval_perfectg_bb1_in/3])) 

  * LOOPS eval_perfectg_3(C,D) -> eval_perfectg_3(E,F)

  * Ranking function: N/A

  * Invariants eval_perfectg_3(A,B) -> eval_perfectg_3(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS loop_cont_eval_perfectg_bb1_in(A,B,C)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_perfectg_bb1_in(D,E,F) -> loop_cont_eval_perfectg_bb1_in(G,H,I)

  * Ranking function: N/A

  * Invariants loop_cont_eval_perfectg_bb1_in(A,B,C) -> loop_cont_eval_perfectg_bb1_in(D,E,F)

     entry  : []
     non-rec: [A=D,B=E,C=F]
     rec    : [0=1]
     inv    : [A=D,B=E,C=F]

CRS eval_perfectg_bb2_in(A)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_perfectg_bb2_in(B) -> eval_perfectg_bb2_in(C)

  * Ranking function: N/A

  * Invariants eval_perfectg_bb2_in(A) -> eval_perfectg_bb2_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_perfectg_bb1_in(A,B,C)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=1,cr=eval_perfectg_bb1_in/3])) 

  * LOOPS eval_perfectg_bb1_in(D,E,F) -> eval_perfectg_bb1_in(G,H,I)
     - [0>=F]
     - [0>=F]
     - [0>=F]
     - [F>=2]
     - [F>=2]
     - [F>=2]

  * Ranking function: c(failed(no_rf,[scc=1,cr=eval_perfectg_bb1_in/3]))

  * Invariants eval_perfectg_bb1_in(A,B,C) -> eval_perfectg_bb1_in(D,E,F)

     entry  : [A>=2,A=C,A=B]
     non-rec: [A=D,B=E,C=F,A>=2,A=C,A=B]
     rec    : [A>=2,A=B,A=C]
     inv    : [A>=2,A=C,A=B]

CRS eval_perfectg_bb3_in(A,B,C,D,E)

  * Non Asymptotic Upper Bound: c(failed(schemes_failed,[scc=0,cr=eval_perfectg_bb3_in/5])) 

  * LOOPS eval_perfectg_bb3_in(F,G,H,I,J) -> eval_perfectg_bb3_in(K,L,M,N,O)
     - [I+O=J,F=K,G=L,H=M,I=N,J>=I]

  * Ranking function: c(failed(no_rf,[scc=0,cr=eval_perfectg_bb3_in/5]))

  * Invariants eval_perfectg_bb3_in(A,B,C,D,E) -> eval_perfectg_bb3_in(F,G,H,I,J)

     entry  : [C=D+1,A=E]
     non-rec: [A=F,B=G,C=H,D=I,E=J,C=D+1,A=E]
     rec    : [J>=0,A+1>=C,A=E,A=F,B=G,C=H,C=I+1,C=D+1]
     inv    : [A=E,A=F,B=G,C=H,C=I+1,C=D+1]



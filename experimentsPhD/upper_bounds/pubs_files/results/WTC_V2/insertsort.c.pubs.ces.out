This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+4*nat(A-1)+2*nat(A-1)*nat(A-1) 

  * LOOPS $pubs_aux_entry$(B) -> $pubs_aux_entry$(C)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A) -> $pubs_aux_entry$(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_insertsort_start(A)

  * Non Asymptotic Upper Bound: 1+4*nat(A-1)+2*nat(A-1)*nat(A-1) 

  * LOOPS eval_insertsort_start(B) -> eval_insertsort_start(C)

  * Ranking function: N/A

  * Invariants eval_insertsort_start(A) -> eval_insertsort_start(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_insertsort_bb0_in(A)

  * Non Asymptotic Upper Bound: 1+4*nat(A-1)+2*nat(A-1)*nat(A-1) 

  * LOOPS eval_insertsort_bb0_in(B) -> eval_insertsort_bb0_in(C)

  * Ranking function: N/A

  * Invariants eval_insertsort_bb0_in(A) -> eval_insertsort_bb0_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_insertsort_0(A)

  * Non Asymptotic Upper Bound: 1+4*nat(A-1)+2*nat(A-1)*nat(A-1) 

  * LOOPS eval_insertsort_0(B) -> eval_insertsort_0(C)

  * Ranking function: N/A

  * Invariants eval_insertsort_0(A) -> eval_insertsort_0(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_insertsort_1(A)

  * Non Asymptotic Upper Bound: 1+4*nat(A-1)+2*nat(A-1)*nat(A-1) 

  * LOOPS eval_insertsort_1(B) -> eval_insertsort_1(C)

  * Ranking function: N/A

  * Invariants eval_insertsort_1(A) -> eval_insertsort_1(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_insertsort_2(A)

  * Non Asymptotic Upper Bound: 1+4*nat(A-1)+2*nat(A-1)*nat(A-1) 

  * LOOPS eval_insertsort_2(B) -> eval_insertsort_2(C)

  * Ranking function: N/A

  * Invariants eval_insertsort_2(A) -> eval_insertsort_2(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_insertsort_3(A)

  * Non Asymptotic Upper Bound: 1+4*nat(A-1)+2*nat(A-1)*nat(A-1) 

  * LOOPS eval_insertsort_3(B) -> eval_insertsort_3(C)

  * Ranking function: N/A

  * Invariants eval_insertsort_3(A) -> eval_insertsort_3(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_insertsort_4(A)

  * Non Asymptotic Upper Bound: 1+4*nat(A-1)+2*nat(A-1)*nat(A-1) 

  * LOOPS eval_insertsort_4(B) -> eval_insertsort_4(C)

  * Ranking function: N/A

  * Invariants eval_insertsort_4(A) -> eval_insertsort_4(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_insertsort_5(A)

  * Non Asymptotic Upper Bound: 1+4*nat(A-1)+2*nat(A-1)*nat(A-1) 

  * LOOPS eval_insertsort_5(B) -> eval_insertsort_5(C)

  * Ranking function: N/A

  * Invariants eval_insertsort_5(A) -> eval_insertsort_5(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_insertsort_6(A)

  * Non Asymptotic Upper Bound: 1+4*nat(A-1)+2*nat(A-1)*nat(A-1) 

  * LOOPS eval_insertsort_6(B) -> eval_insertsort_6(C)

  * Ranking function: N/A

  * Invariants eval_insertsort_6(A) -> eval_insertsort_6(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS loop_cont_eval_insertsort_bb1_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_insertsort_bb1_in(C,D) -> loop_cont_eval_insertsort_bb1_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_insertsort_bb1_in(A,B) -> loop_cont_eval_insertsort_bb1_in(C,D)

     entry  : [A=3]
     non-rec: [A=C,B=D,A=3]
     rec    : [0=1]
     inv    : [A=3,C=3,B=D]

CRS eval_insertsort_bb7_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_insertsort_bb7_in -> eval_insertsort_bb7_in

  * Ranking function: N/A

  * Invariants eval_insertsort_bb7_in -> eval_insertsort_bb7_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_insertsort_bb1_in(A,B)

  * Non Asymptotic Upper Bound: 4*nat(A-B)+2*nat(A-B)*nat(A-1) 

  * LOOPS eval_insertsort_bb1_in(C,D) -> eval_insertsort_bb1_in(E,F)
     - [C>=F,C=E,D+1=F]
     - [C>=F,C=E,D+1=F]

  * Ranking function: nat(C-D)

  * Invariants eval_insertsort_bb1_in(A,B) -> eval_insertsort_bb1_in(C,D)

     entry  : [B=1]
     non-rec: [A=C,B=D,B=1]
     rec    : [A=C,B=1,A>=D,D>=2]
     inv    : [D>=1,A=C,B=1]

CRS eval_insertsort_bb3_in(A,B,C,D)

  * Non Asymptotic Upper Bound: nat(D+1) 

  * LOOPS eval_insertsort_bb3_in(E,F,G,H) -> eval_insertsort_bb3_in(I,J,K,L)
     - [H=L+1,E=I,F=J,G=K,L+1>=0]

  * Ranking function: nat(H+1)

  * Invariants eval_insertsort_bb3_in(A,B,C,D) -> eval_insertsort_bb3_in(E,F,G,H)

     entry  : [A>=D+2,D>=0,B=D+1]
     non-rec: [A=E,B=F,C=G,D=H,A>=D+2,D>=0,B=D+1]
     rec    : [C=G,B=F,A=E,B=D+1,A>=B+1,H+1>=0,B>=H+2]
     inv    : [H+1>=0,B>=1,B>=H+1,A>=B+1,A=E,B=F,C=G,B=D+1]



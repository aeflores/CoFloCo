This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A,B) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+nat(B)+nat(-A+B+1) 

  * LOOPS $pubs_aux_entry$(C,D) -> $pubs_aux_entry$(E,F)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A,B) -> $pubs_aux_entry$(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_speedpldi4_start(A,B)

  * Non Asymptotic Upper Bound: 1+nat(B)+nat(-A+B+1) 

  * LOOPS eval_speedpldi4_start(C,D) -> eval_speedpldi4_start(E,F)

  * Ranking function: N/A

  * Invariants eval_speedpldi4_start(A,B) -> eval_speedpldi4_start(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_speedpldi4_bb0_in(A,B)

  * Non Asymptotic Upper Bound: 1+nat(B)+nat(-A+B+1) 

  * LOOPS eval_speedpldi4_bb0_in(C,D) -> eval_speedpldi4_bb0_in(E,F)

  * Ranking function: N/A

  * Invariants eval_speedpldi4_bb0_in(A,B) -> eval_speedpldi4_bb0_in(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_speedpldi4_0(A,B)

  * Non Asymptotic Upper Bound: 1+nat(B)+nat(-A+B+1) 

  * LOOPS eval_speedpldi4_0(C,D) -> eval_speedpldi4_0(E,F)

  * Ranking function: N/A

  * Invariants eval_speedpldi4_0(A,B) -> eval_speedpldi4_0(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_speedpldi4_1(A,B)

  * Non Asymptotic Upper Bound: 1+nat(B)+nat(-A+B+1) 

  * LOOPS eval_speedpldi4_1(C,D) -> eval_speedpldi4_1(E,F)

  * Ranking function: N/A

  * Invariants eval_speedpldi4_1(A,B) -> eval_speedpldi4_1(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS eval_speedpldi4_2(A,B)

  * Non Asymptotic Upper Bound: 1+nat(B)+nat(-A+B+1) 

  * LOOPS eval_speedpldi4_2(C,D) -> eval_speedpldi4_2(E,F)

  * Ranking function: N/A

  * Invariants eval_speedpldi4_2(A,B) -> eval_speedpldi4_2(C,D)

     entry  : []
     non-rec: [A=C,B=D]
     rec    : [0=1]
     inv    : [A=C,B=D]

CRS loop_cont_eval_speedpldi4_bb1_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_speedpldi4_bb1_in(C,D) -> loop_cont_eval_speedpldi4_bb1_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_speedpldi4_bb1_in(A,B) -> loop_cont_eval_speedpldi4_bb1_in(C,D)

     entry  : [A=2]
     non-rec: [A=C,B=D,A=2]
     rec    : [0=1]
     inv    : [A=2,C=2,B=D]

CRS eval_speedpldi4_bb3_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_speedpldi4_bb3_in -> eval_speedpldi4_bb3_in

  * Ranking function: N/A

  * Invariants eval_speedpldi4_bb3_in -> eval_speedpldi4_bb3_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_speedpldi4_bb1_in(A,B)

  * Non Asymptotic Upper Bound: nat(B)+nat(-A+B+1) 

  * LOOPS eval_speedpldi4_bb1_in(C,D) -> eval_speedpldi4_bb1_in(E,F)
     - [D=F+1,C=E,D>=1,C>=D+1]
     - [C+F=D,C=E,D>=1,D>=C]

  * Ranking function: c(failed(no_rf,[scc=0,cr=eval_speedpldi4_bb1_in/2]))

  * Invariants eval_speedpldi4_bb1_in(A,B) -> eval_speedpldi4_bb1_in(C,D)

     entry  : [B>=A+1,A>=1]
     non-rec: [A=C,B=D,B>=A+1,A>=1]
     rec    : [A=C,D>=0,A>=1,B>=A+1,B>=A+D]
     inv    : [D>=0,B>=D,B>=A+1,A>=1,A=C]



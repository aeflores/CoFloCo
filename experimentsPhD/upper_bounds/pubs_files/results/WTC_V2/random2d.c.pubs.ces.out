This is PUBS, version 0.2.
Copyright (C) 2007, 2008, 2009 UPM, UCM.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to
redistribute it under certain conditions.



CRS $pubs_aux_entry$(A) -- THE MAIN ENTRY

  * Non Asymptotic Upper Bound: 1+6*nat(A) 

  * LOOPS $pubs_aux_entry$(B) -> $pubs_aux_entry$(C)

  * Ranking function: N/A

  * Invariants $pubs_aux_entry$(A) -> $pubs_aux_entry$(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_random2d_start(A)

  * Non Asymptotic Upper Bound: 1+6*nat(A) 

  * LOOPS eval_random2d_start(B) -> eval_random2d_start(C)

  * Ranking function: N/A

  * Invariants eval_random2d_start(A) -> eval_random2d_start(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_random2d_bb0_in(A)

  * Non Asymptotic Upper Bound: 1+6*nat(A) 

  * LOOPS eval_random2d_bb0_in(B) -> eval_random2d_bb0_in(C)

  * Ranking function: N/A

  * Invariants eval_random2d_bb0_in(A) -> eval_random2d_bb0_in(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_random2d_0(A)

  * Non Asymptotic Upper Bound: 1+6*nat(A) 

  * LOOPS eval_random2d_0(B) -> eval_random2d_0(C)

  * Ranking function: N/A

  * Invariants eval_random2d_0(A) -> eval_random2d_0(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_random2d_1(A)

  * Non Asymptotic Upper Bound: 1+6*nat(A) 

  * LOOPS eval_random2d_1(B) -> eval_random2d_1(C)

  * Ranking function: N/A

  * Invariants eval_random2d_1(A) -> eval_random2d_1(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_random2d_2(A)

  * Non Asymptotic Upper Bound: 1+6*nat(A) 

  * LOOPS eval_random2d_2(B) -> eval_random2d_2(C)

  * Ranking function: N/A

  * Invariants eval_random2d_2(A) -> eval_random2d_2(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_random2d_3(A)

  * Non Asymptotic Upper Bound: 1+6*nat(A) 

  * LOOPS eval_random2d_3(B) -> eval_random2d_3(C)

  * Ranking function: N/A

  * Invariants eval_random2d_3(A) -> eval_random2d_3(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_random2d_4(A)

  * Non Asymptotic Upper Bound: 1+6*nat(A) 

  * LOOPS eval_random2d_4(B) -> eval_random2d_4(C)

  * Ranking function: N/A

  * Invariants eval_random2d_4(A) -> eval_random2d_4(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_random2d_5(A)

  * Non Asymptotic Upper Bound: 1+6*nat(A) 

  * LOOPS eval_random2d_5(B) -> eval_random2d_5(C)

  * Ranking function: N/A

  * Invariants eval_random2d_5(A) -> eval_random2d_5(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_random2d_6(A)

  * Non Asymptotic Upper Bound: 1+6*nat(A) 

  * LOOPS eval_random2d_6(B) -> eval_random2d_6(C)

  * Ranking function: N/A

  * Invariants eval_random2d_6(A) -> eval_random2d_6(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_random2d_7(A)

  * Non Asymptotic Upper Bound: 1+6*nat(A) 

  * LOOPS eval_random2d_7(B) -> eval_random2d_7(C)

  * Ranking function: N/A

  * Invariants eval_random2d_7(A) -> eval_random2d_7(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_random2d_8(A)

  * Non Asymptotic Upper Bound: 1+6*nat(A) 

  * LOOPS eval_random2d_8(B) -> eval_random2d_8(C)

  * Ranking function: N/A

  * Invariants eval_random2d_8(A) -> eval_random2d_8(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_random2d_9(A)

  * Non Asymptotic Upper Bound: 1+6*nat(A) 

  * LOOPS eval_random2d_9(B) -> eval_random2d_9(C)

  * Ranking function: N/A

  * Invariants eval_random2d_9(A) -> eval_random2d_9(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS eval_random2d_10(A)

  * Non Asymptotic Upper Bound: 1+6*nat(A) 

  * LOOPS eval_random2d_10(B) -> eval_random2d_10(C)

  * Ranking function: N/A

  * Invariants eval_random2d_10(A) -> eval_random2d_10(B)

     entry  : []
     non-rec: [A=B]
     rec    : [0=1]
     inv    : [A=B]

CRS loop_cont_eval_random2d_bb1_in(A,B)

  * Non Asymptotic Upper Bound: 0 

  * LOOPS loop_cont_eval_random2d_bb1_in(C,D) -> loop_cont_eval_random2d_bb1_in(E,F)

  * Ranking function: N/A

  * Invariants loop_cont_eval_random2d_bb1_in(A,B) -> loop_cont_eval_random2d_bb1_in(C,D)

     entry  : [A=2]
     non-rec: [A=C,B=D,A=2]
     rec    : [0=1]
     inv    : [A=2,C=2,B=D]

CRS eval_random2d_bb8_in

  * Non Asymptotic Upper Bound: 0 

  * LOOPS eval_random2d_bb8_in -> eval_random2d_bb8_in

  * Ranking function: N/A

  * Invariants eval_random2d_bb8_in -> eval_random2d_bb8_in

     entry  : []
     non-rec: []
     rec    : [0=1]
     inv    : []

CRS eval_random2d_bb1_in(A,B)

  * Non Asymptotic Upper Bound: 6*nat(A-B) 

  * LOOPS eval_random2d_bb1_in(C,D) -> eval_random2d_bb1_in(E,F)
     - [D+1=F,C=E,C>=D+1]
     - [D+1=F,C=E,C>=D+1]
     - [D+1=F,C=E,C>=D+1]
     - [D+1=F,C=E,C>=D+1]
     - [D+1=F,C=E,C>=F]
     - [D+1=F,C=E,C>=F]

  * Ranking function: nat(C-D)

  * Invariants eval_random2d_bb1_in(A,B) -> eval_random2d_bb1_in(C,D)

     entry  : [B=0]
     non-rec: [A=C,B=D,B=0]
     rec    : [A=C,B=0,A>=D,D>=1]
     inv    : [D>=0,A=C,B=0]



FrontEnd version J.3
qualif insertsort
inside declaration [insertsort,insertsort]
inside declaration [insertsort,insertsort,i]
inside declaration [insertsort,insertsort,j]
inside declaration [insertsort,insertsort,value]
inside declaration [insertsort,cst__5]
inside declaration [insertsort,cst__2]
table([insertsort,
  cst__2] = __declaration(__inside(char_data("insertsort")),
  __constant(`$$value`("1"),char_data("cst__2")),
  __basic(char_data("__integer"))),
   [insertsort,cst__5] = __declaration(__inside(char_data("insertsort")),
     __constant(`$$value`("0"),char_data("cst__5")),
     __basic(char_data("__integer"))),
   [insertsort,
     insertsort] = __declaration(__inside(char_data("insertsort")),
     __identifier(char_data("insertsort")),
     __function(__identifier(char_data("insertsort")),
       __basic(char_data("void")),__identifier(char_data("length")),
       __basic(`$$size`("32"),char_data("__integer")),
       __identifier(char_data("a")),__array(__basic(`$$size`("32"),
         char_data("__integer"))))),
   [insertsort,insertsort,
   i] = __declaration(__inside(char_data("insertsort"),
     char_data("insertsort")),__identifier(char_data("i")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [insertsort,insertsort,
   j] = __declaration(__inside(char_data("insertsort"),
     char_data("insertsort")),__identifier(char_data("j")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [insertsort,insertsort,lbl_1] = __for(`$$label`("lbl_1"),
     __init(__expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("i"))),
       __expression(__constant(char_data("cst__2"))))),
     __test(__expression(__operator(char_data("__lt")),
       __expression(__identifier(char_data("i"))),
       __expression(__identifier(char_data("length"))))),
     __next(__expression(__operator(char_data("_post_incr")),
       __expression(__identifier(char_data("i")))))),
   [insertsort,insertsort,lbl_1,lbl_3] = __statement(`$$label`("lbl_3"),
     __inside(char_data("insertsort"),char_data("insertsort"),
       char_data("lbl_1")),
       __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("value"))),
       __expression(__operator(char_data("__subscript")),
         __expression(__identifier(char_data("a"))),
         __expression(__identifier(char_data("i")))))),
   [insertsort,insertsort,lbl_1,lbl_4] = __for(`$$label`("lbl_4"),
     __init(__expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("j"))),
       __expression(__operator(char_data("__subtraction")),
         __expression(__identifier(char_data("i"))),
         __expression(__constant(char_data("cst__2")))))),
     __test(__expression(__operator(char_data("__conjunction")),
       __expression(__operator(char_data("__ge")),
         __expression(__identifier(char_data("j"))),
         __expression(__constant(char_data("cst__5")))),
       __expression(__operator(char_data("__gt")),
         __expression(__operator(char_data("__subscript")),
           __expression(__identifier(char_data("a"))),
           __expression(__identifier(char_data("j")))),
         __expression(__identifier(char_data("value")))))),
     __next(__expression(__operator(char_data("_post_decr")),
       __expression(__identifier(char_data("j")))))),
   [insertsort,insertsort,lbl_1,lbl_4,
   lbl_6] = __statement(`$$label`("lbl_6"),
       __inside(char_data("insertsort"),char_data("insertsort"),
       char_data("lbl_1"),char_data("lbl_4")),
     __expression(__operator(char_data("__assignment")),
       __expression(__operator(char_data("__subscript")),
         __expression(__identifier(char_data("a"))),
         __expression(__operator(char_data("__addition")),
           __expression(__identifier(char_data("j"))),
           __expression(__constant(char_data("cst__2"))))),
       __expression(__operator(char_data("__subscript")),
         __expression(__identifier(char_data("a"))),
         __expression(__identifier(char_data("j")))))),
   [insertsort,insertsort,lbl_1,lbl_7] = __statement(`$$label`("lbl_7"),
     __inside(char_data("insertsort"),char_data("insertsort"),
       char_data("lbl_1")),
       __expression(__operator(char_data("__assignment")),
       __expression(__operator(char_data("__subscript")),
         __expression(__identifier(char_data("a"))),
         __expression(__operator(char_data("__addition")),
           __expression(__identifier(char_data("j"))),
           __expression(__constant(char_data("cst__2"))))),
       __expression(__identifier(char_data("value"))))),
   [insertsort,insertsort,
   value] = __declaration(__inside(char_data("insertsort"),
     char_data("insertsort")),__identifier(char_data("value")),
     __basic(`$$size`("32"),char_data("__integer"))))
table([insertsort,insertsort] = [[insertsort,insertsort],[insertsort,
  cst__5],[insertsort,cst__2],[insertsort,insertsort],[insertsort,
    insertsort,i],[insertsort,insertsort,j],[insertsort,insertsort,value],
  [insertsort,insertsort,lbl_1],[insertsort,insertsort,lbl_1,lbl_3],
  [insertsort,insertsort,lbl_1,lbl_4],[insertsort,insertsort,lbl_1,lbl_4,
    lbl_6],[insertsort,insertsort,lbl_1,lbl_7]])
[[insertsort,insertsort,i],[insertsort,insertsort,j],[insertsort,
    insertsort,value],[insertsort,insertsort,lbl_1,lbl_3],[insertsort,
    insertsort,lbl_1,lbl_4,lbl_6],[insertsort,insertsort,lbl_1,lbl_7]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of length is 0
gatherFormals: typist __array(__basic(`$$size`("32"),
  char_data("__integer")))
gatherFormals: tepee __array(__basic(`$$size`("32"),
  char_data("__integer")))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of a is 1
body [[insertsort,insertsort],[insertsort,cst__5],[insertsort,cst__2],
  [insertsort,insertsort],[insertsort,insertsort,i],[insertsort,insertsort,
    j],[insertsort,insertsort,value],[insertsort,insertsort,lbl_1],
  [insertsort,insertsort,lbl_1,lbl_3],[insertsort,insertsort,lbl_1,lbl_4],
  [insertsort,insertsort,lbl_1,lbl_4,lbl_6],[insertsort,insertsort,lbl_1,
    lbl_7]]
collect subscripts __expression(__identifier(char_data("value")))
[value(),[],{},{}]
collect subscripts __expression(__operator(char_data("__subscript")),
__expression(__identifier(char_data("a"))),
__expression(__identifier(char_data("i"))))
collect subscripts __expression(__identifier(char_data("a")))
[a(),[],{},{}]
[a(),[i],{},{i()}]
collect subscripts __expression(__operator(char_data("__subscript")),
__expression(__identifier(char_data("a"))),
__expression(__operator(char_data("__addition")),
__expression(__identifier(char_data("j"))),
__expression(__constant(char_data("cst__2")))))
collect subscripts __expression(__identifier(char_data("a")))
[a(),[],{},{}]
[a(),[j+1],{},{j()}]
collect subscripts __expression(__operator(char_data("__subscript")),
__expression(__identifier(char_data("a"))),
__expression(__identifier(char_data("j"))))
collect subscripts __expression(__identifier(char_data("a")))
[a(),[],{},{}]
[a(),[j],{},{j()}]
collect subscripts __expression(__operator(char_data("__subscript")),
__expression(__identifier(char_data("a"))),
__expression(__operator(char_data("__addition")),
__expression(__identifier(char_data("j"))),
__expression(__constant(char_data("cst__2")))))
collect subscripts __expression(__identifier(char_data("a")))
[a(),[],{},{}]
[a(),[j+1],{},{j()}]
examining a
 is an array
examining cst__2
 is a constant
examining cst__5
 is a constant
examining i
 has definitions
examining insertsort
examining j
 is never defined
examining length
examining value
 has definitions
to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified TRUE
to be simplified (1 >= length)
to be simplified (length > 1)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (length > i)
to be simplified (i >= length)
to be simplified (length > i)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (j >= 0)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (j >= 0)
to be simplified (j >= 0)
to be simplified (j >= 0)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (j >= 0)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (i >= 1)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (i >= length)
to be simplified (length > i)

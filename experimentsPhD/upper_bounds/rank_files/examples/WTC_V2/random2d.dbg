FrontEnd version J.3
qualif random2d
inside declaration [random2d,nondet]
inside declaration [random2d,random2d]
inside declaration [random2d,random2d,x]
inside declaration [random2d,random2d,y]
inside declaration [random2d,random2d,i]
inside declaration [random2d,random2d,r]
inside declaration [random2d,cst__16]
inside declaration [random2d,cst__10]
inside declaration [random2d,cst__6]
inside declaration [random2d,cst__1]
table([random2d,cst__1] = __declaration(__inside(char_data("random2d")),
  __constant(`$$value`("0"),char_data("cst__1")),
  __basic(char_data("__integer"))),
   [random2d,cst__10] = __declaration(__inside(char_data("random2d")),
     __constant(`$$value`("3"),char_data("cst__10")),
     __basic(char_data("__integer"))),
   [random2d,cst__16] = __declaration(__inside(char_data("random2d")),
     __constant(`$$value`("2"),char_data("cst__16")),
     __basic(char_data("__integer"))),
   [random2d,cst__6] = __declaration(__inside(char_data("random2d")),
     __constant(`$$value`("1"),char_data("cst__6")),
     __basic(char_data("__integer"))),
   [random2d,nondet] = __declaration(__inside(char_data("random2d")),
     __identifier(char_data("nondet")),
     __function(__identifier(char_data("nondet")),__basic(`$$size`("32"),
         char_data("__integer")))),
   [random2d,random2d] = __declaration(__inside(char_data("random2d")),
     __identifier(char_data("random2d")),
     __function(__identifier(char_data("random2d")),__basic(`$$size`("32"),
         char_data("__integer")),__identifier(char_data("N")),
       __basic(`$$size`("32"),char_data("__integer")))),
   [random2d,random2d,i] = __declaration(__inside(char_data("random2d"),
     char_data("random2d")),__identifier(char_data("i")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [random2d,random2d,lbl_2] = __statement(`$$label`("lbl_2"),
     __inside(char_data("random2d"),char_data("random2d")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("x"))),
       __expression(__constant(char_data("cst__1"))))),
   [random2d,random2d,lbl_22] = __statement(`$$label`("lbl_22"),
     __inside(char_data("random2d"),char_data("random2d")),__return()),
 [random2d,random2d,lbl_3] = __statement(`$$label`("lbl_3"),
   __inside(char_data("random2d"),char_data("random2d")),
   __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("y"))),
     __expression(__constant(char_data("cst__1"))))),
 [random2d,random2d,lbl_4] = __statement(`$$label`("lbl_4"),
   __inside(char_data("random2d"),char_data("random2d")),
   __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("i"))),
     __expression(__constant(char_data("cst__1"))))),
 [random2d,random2d,lbl_5] = __while(`$$label`("lbl_5"),
   __expression(__operator(char_data("__lt")),
     __expression(__identifier(char_data("i"))),
     __expression(__identifier(char_data("N"))))),
 [random2d,random2d,lbl_5,lbl_7] = __statement(`$$label`("lbl_7"),
   __inside(char_data("random2d"),char_data("random2d"),
   char_data("lbl_5")),__expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("i"))),
     __expression(__operator(char_data("__addition")),
       __expression(__identifier(char_data("i"))),
       __expression(__constant(char_data("cst__6")))))),
 [random2d,random2d,lbl_5,lbl_8] = __statement(`$$label`("lbl_8"),
   __inside(char_data("random2d"),char_data("random2d"),
   char_data("lbl_5")),__expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("r"))),
     __expression(__operator(char_data("__funcall")),
       __expression(__identifier(char_data("nondet")))))),
 [random2d,random2d,lbl_5,lbl_9] = __if(`$$label`("lbl_9"),
   __expression(__operator(char_data("__conjunction")),
     __expression(__operator(char_data("__ge")),
       __expression(__identifier(char_data("r"))),
       __expression(__constant(char_data("cst__1")))),
     __expression(__operator(char_data("__le")),
       __expression(__identifier(char_data("r"))),
       __expression(__constant(char_data("cst__10")))))),
 [random2d,random2d,lbl_5,lbl_9,_false,
 lbl_21] = __statement(`$$label`("lbl_21"),__inside(char_data("random2d"),
     char_data("random2d"),char_data("lbl_5"),char_data("lbl_9"),
     char_data("_false")),__nop()),
[random2d,random2d,lbl_5,lbl_9,_true,lbl_11] = __if(`$$label`("lbl_11"),
 __expression(__operator(char_data("__eq")),
   __expression(__identifier(char_data("r"))),
   __expression(__constant(char_data("cst__1"))))),
[random2d,random2d,lbl_5,lbl_9,_true,lbl_11,_false,
lbl_13] = __if(`$$label`("lbl_13"),
   __expression(__operator(char_data("__eq")),
   __expression(__identifier(char_data("r"))),
   __expression(__constant(char_data("cst__6"))))),
[random2d,random2d,lbl_5,lbl_9,_true,lbl_11,_false,lbl_13,_false,
lbl_15] = __if(`$$label`("lbl_15"),
   __expression(__operator(char_data("__eq")),
   __expression(__identifier(char_data("r"))),
   __expression(__constant(char_data("cst__16"))))),
[random2d,random2d,lbl_5,lbl_9,_true,lbl_11,_false,lbl_13,_false,lbl_15,
 _false,lbl_18] = __if(`$$label`("lbl_18"),
 __expression(__operator(char_data("__eq")),
   __expression(__identifier(char_data("r"))),
   __expression(__constant(char_data("cst__10"))))),
[random2d,random2d,lbl_5,lbl_9,_true,lbl_11,_false,lbl_13,_false,lbl_15,
 _false,lbl_18,_false,lbl_20] = __statement(`$$label`("lbl_20"),
 __inside(char_data("random2d"),char_data("random2d"),char_data("lbl_5"),
   char_data("lbl_9"),char_data("_true"),char_data("lbl_11"),
   char_data("_false"),char_data("lbl_13"),char_data("_false"),
   char_data("lbl_15"),char_data("_false"),char_data("lbl_18"),
   char_data("_false")),__nop()),
[random2d,random2d,lbl_5,lbl_9,_true,lbl_11,_false,lbl_13,_false,lbl_15,
_false,lbl_18,_true,lbl_19] = __statement(`$$label`("lbl_19"),
__inside(char_data("random2d"),char_data("random2d"),char_data("lbl_5"),
 char_data("lbl_9"),char_data("_true"),char_data("lbl_11"),
 char_data("_false"),char_data("lbl_13"),char_data("_false"),
 char_data("lbl_15"),char_data("_false"),char_data("lbl_18"),
 char_data("_true")),__expression(__operator(char_data("__assignment")),
 __expression(__identifier(char_data("y"))),
 __expression(__operator(char_data("__subtraction")),
   __expression(__identifier(char_data("y"))),
   __expression(__constant(char_data("cst__6")))))),
[random2d,random2d,lbl_5,lbl_9,_true,lbl_11,_false,lbl_13,_false,lbl_15,
_true,lbl_17] = __statement(`$$label`("lbl_17"),
__inside(char_data("random2d"),char_data("random2d"),char_data("lbl_5"),
 char_data("lbl_9"),char_data("_true"),char_data("lbl_11"),
 char_data("_false"),char_data("lbl_13"),char_data("_false"),
 char_data("lbl_15"),char_data("_true")),
__expression(__operator(char_data("__assignment")),
 __expression(__identifier(char_data("y"))),
 __expression(__operator(char_data("__addition")),
   __expression(__identifier(char_data("y"))),
   __expression(__constant(char_data("cst__6")))))),
[random2d,random2d,lbl_5,lbl_9,_true,lbl_11,_false,lbl_13,_true,
lbl_14] = __statement(`$$label`("lbl_14"),__inside(char_data("random2d"),
 char_data("random2d"),char_data("lbl_5"),char_data("lbl_9"),
 char_data("_true"),char_data("lbl_11"),char_data("_false"),
 char_data("lbl_13"),char_data("_true")),
__expression(__operator(char_data("__assignment")),
 __expression(__identifier(char_data("x"))),
 __expression(__operator(char_data("__subtraction")),
   __expression(__identifier(char_data("x"))),
   __expression(__constant(char_data("cst__6")))))),
[random2d,random2d,lbl_5,lbl_9,_true,lbl_11,_true,
lbl_12] = __statement(`$$label`("lbl_12"),__inside(char_data("random2d"),
 char_data("random2d"),char_data("lbl_5"),char_data("lbl_9"),
 char_data("_true"),char_data("lbl_11"),char_data("_true")),
__expression(__operator(char_data("__assignment")),
 __expression(__identifier(char_data("x"))),
 __expression(__operator(char_data("__addition")),
   __expression(__identifier(char_data("x"))),
   __expression(__constant(char_data("cst__6")))))),
[random2d,random2d,r] = __declaration(__inside(char_data("random2d"),
char_data("random2d")),__identifier(char_data("r")),__basic(`$$size`("32"),
 char_data("__integer"))),
[random2d,random2d,x] = __declaration(__inside(char_data("random2d"),
char_data("random2d")),__identifier(char_data("x")),__basic(`$$size`("32"),
 char_data("__integer"))),
[random2d,random2d,y] = __declaration(__inside(char_data("random2d"),
char_data("random2d")),__identifier(char_data("y")),__basic(`$$size`("32"),
 char_data("__integer"))))
table([random2d,random2d] = [[random2d,nondet],[random2d,random2d],
[random2d,cst__16],[random2d,cst__10],[random2d,cst__6],[random2d,cst__1],
[random2d,random2d],[random2d,random2d,x],[random2d,random2d,y],[random2d,
random2d,i],[random2d,random2d,r],[random2d,random2d,lbl_2],[random2d,
random2d,lbl_3],[random2d,random2d,lbl_4],[random2d,random2d,lbl_5],
[random2d,random2d,lbl_5,lbl_7],[random2d,random2d,lbl_5,lbl_8],[random2d,
random2d,lbl_5,lbl_9,_true,lbl_11],[random2d,random2d,lbl_5,lbl_9],
[random2d,random2d,lbl_5,lbl_9,_true,lbl_11,_true,lbl_12],[random2d,
random2d,lbl_5,lbl_9,_true,lbl_11,_false,lbl_13],[random2d,random2d,lbl_5,
lbl_9,_true,lbl_11,_false,lbl_13,_true,lbl_14],[random2d,random2d,lbl_5,
lbl_9,_true,lbl_11,_false,lbl_13,_false,lbl_15],[random2d,random2d,lbl_5,
lbl_9,_true,lbl_11,_false,lbl_13,_false,lbl_15,_true,lbl_17],[random2d,
random2d,lbl_5,lbl_9,_true,lbl_11,_false,lbl_13,_false,lbl_15,_false,
lbl_18],[random2d,random2d,lbl_5,lbl_9,_true,lbl_11,_false,lbl_13,_false,
lbl_15,_false,lbl_18,_true,lbl_19],[random2d,random2d,lbl_5,lbl_9,_true,
lbl_11,_false,lbl_13,_false,lbl_15,_false,lbl_18,_false,lbl_20],[random2d,
random2d,lbl_5,lbl_9,_false,lbl_21],[random2d,random2d,lbl_22]])
[[random2d,random2d,x],[random2d,random2d,y],[random2d,random2d,i],
[random2d,random2d,r],[random2d,random2d,lbl_2],[random2d,random2d,lbl_3],
[random2d,random2d,lbl_4],[random2d,random2d,lbl_5,lbl_7],[random2d,
random2d,lbl_5,lbl_8],[random2d,random2d,lbl_5,lbl_9,_true,lbl_11,_true,
lbl_12],[random2d,random2d,lbl_5,lbl_9,_true,lbl_11,_false,lbl_13,_true,
lbl_14],[random2d,random2d,lbl_5,lbl_9,_true,lbl_11,_false,lbl_13,_false,
lbl_15,_true,lbl_17],[random2d,random2d,lbl_5,lbl_9,_true,lbl_11,_false,
lbl_13,_false,lbl_15,_false,lbl_18,_true,lbl_19],[random2d,random2d,lbl_5,
lbl_9,_true,lbl_11,_false,lbl_13,_false,lbl_15,_false,lbl_18,_false,
lbl_20],[random2d,random2d,lbl_5,lbl_9,_false,lbl_21],[random2d,random2d,
lbl_22]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of N is 0
body [[random2d,nondet],[random2d,random2d],[random2d,cst__16],[random2d,
cst__10],[random2d,cst__6],[random2d,cst__1],[random2d,random2d],[random2d,
random2d,x],[random2d,random2d,y],[random2d,random2d,i],[random2d,random2d,
r],[random2d,random2d,lbl_2],[random2d,random2d,lbl_3],[random2d,random2d,
lbl_4],[random2d,random2d,lbl_5],[random2d,random2d,lbl_5,lbl_7],[random2d,
random2d,lbl_5,lbl_8],[random2d,random2d,lbl_5,lbl_9,_true,lbl_11],
[random2d,random2d,lbl_5,lbl_9],[random2d,random2d,lbl_5,lbl_9,_true,
lbl_11,_true,lbl_12],[random2d,random2d,lbl_5,lbl_9,_true,lbl_11,_false,
lbl_13],[random2d,random2d,lbl_5,lbl_9,_true,lbl_11,_false,lbl_13,_true,
lbl_14],[random2d,random2d,lbl_5,lbl_9,_true,lbl_11,_false,lbl_13,_false,
lbl_15],[random2d,random2d,lbl_5,lbl_9,_true,lbl_11,_false,lbl_13,_false,
lbl_15,_true,lbl_17],[random2d,random2d,lbl_5,lbl_9,_true,lbl_11,_false,
lbl_13,_false,lbl_15,_false,lbl_18],[random2d,random2d,lbl_5,lbl_9,_true,
lbl_11,_false,lbl_13,_false,lbl_15,_false,lbl_18,_true,lbl_19],[random2d,
random2d,lbl_5,lbl_9,_true,lbl_11,_false,lbl_13,_false,lbl_15,_false,
lbl_18,_false,lbl_20],[random2d,random2d,lbl_5,lbl_9,_false,lbl_21],
[random2d,random2d,lbl_22]]
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
collect subscripts __expression(__identifier(char_data("y")))
[y(),[],{},{}]
collect subscripts __expression(__identifier(char_data("i")))
[i(),[],{},{}]
lbl_5 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("i")))
[i(),[],{},{}]
collect subscripts __expression(__identifier(char_data("r")))
[r(),[],{},{}]
lbl_11 __si
 counter 1/0 iteration domain {}

lbl_9 __si
 counter 1/0 iteration domain {}

collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
lbl_13 __si
 counter 1/0 iteration domain {}

collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
lbl_15 __si
 counter 1/0 iteration domain {}

collect subscripts __expression(__identifier(char_data("y")))
[y(),[],{},{}]
lbl_18 __si
 counter 1/0 iteration domain {}

collect subscripts __expression(__identifier(char_data("y")))
[y(),[],{},{}]
examining N
examining cst__1
 is a constant
examining cst__10
 is a constant
examining cst__16
 is a constant
examining cst__6
 is a constant
examining i
 has definitions
examining nondet
examining r
 has definitions
examining random2d
examining x
 has definitions
examining y
 has definitions
while remnants __lt(i,N)to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified TRUE
to be simplified TRUE
to be simplified (0 >= N)
to be simplified (N > 0)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (i >= N)
to be simplified (N > i)
to be simplified TRUE
to be simplified (i >= N)
to be simplified (N > i)
to be simplified TRUE
to be simplified (r = 0)
to be simplified (r != 0)
to be simplified (r = 0)
to be simplified (r != 0)
to be simplified (r = 1)
to be simplified (r != 1)
to be simplified (r = 1)
to be simplified (r != 1)
to be simplified (r = 2)
to be simplified (r != 2)
to be simplified (r = 2)
to be simplified (r != 2)
to be simplified (r = 3)
to be simplified (r != 3)
to be simplified (r = 3)
to be simplified (r != 3)
to be simplified (N > i)
to be simplified (i >= N)
to be simplified (i >= N)
to be simplified (N > i)
to be simplified (N > i)
to be simplified ( (r >= 0) && (3 >= r) )
to be simplified ( (0 > r) || (r > 3) )
to be simplified ( (r >= 0) && (3 >= r) )
to be simplified ( (0 > r) || (r > 3) )
to be simplified ( ( (r >= 0) && (3 >= r) ) && (r = 0) )
to be simplified ( ( (r >= 0) && (3 >= r) ) && (r != 0) )
to be simplified ( ( ( (r >= 0) && (3 >= r) ) && (r != 0) ) && (r = 1) )
to be simplified ( ( ( (r >= 0) && (3 >= r) ) && (r != 0) ) && (r != 1) )
to be simplified ( ( ( ( (r >= 0) && (3 >= r) ) && (r != 0) ) && (r != 1) ) && 
(r = 2) )
to be simplified ( ( ( ( (r >= 0) && (3 >= r) ) && (r != 0) ) && (r != 1) ) && 
(r != 2) )
to be simplified ( ( ( ( ( (r >= 0) && (3 >= r) ) && (r != 0) ) && (r != 1) )
 && (r != 2) ) && (r = 3) )
to be simplified ( ( ( ( ( (r >= 0) && (3 >= r) ) && (r != 0) ) && (r != 1) )
 && (r != 2) ) && (r != 3) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (i >= N)
to be simplified (N > i)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (i >= N)
to be simplified (N > i)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (i >= N)
to be simplified (N > i)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (i >= N)
to be simplified (N > i)
to be simplified TRUE
to be simplified ( (0 > r) || (r > 3) )
to be simplified ( ( (r >= 0) && (3 >= r) ) && (r = 0) )
to be simplified ( ( ( (r >= 0) && (3 >= r) ) && (r != 0) ) && (r = 1) )
to be simplified ( ( ( ( (r >= 0) && (3 >= r) ) && (r != 0) ) && (r != 1) ) && 
(r = 2) )
to be simplified ( ( ( ( ( (r >= 0) && (3 >= r) ) && (r != 0) ) && (r != 1) )
 && (r != 2) ) && (r = 3) )
to be simplified ( ( ( ( ( (r >= 0) && (3 >= r) ) && (r != 0) ) && (r != 1) )
 && (r != 2) ) && (r != 3) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE

FrontEnd version J.3
qualif speedFails4
inside declaration [speedFails4,speedFails4]
inside declaration [speedFails4,speedFails4,t]
inside declaration [speedFails4,speedFails4,b]
inside declaration [speedFails4,cst__2]
table([speedFails4,
  cst__2] = __declaration(__inside(char_data("speedFails4")),
  __constant(`$$value`("1"),char_data("cst__2")),
  __basic(char_data("__integer"))),
   [speedFails4,
   speedFails4] = __declaration(__inside(char_data("speedFails4")),
     __identifier(char_data("speedFails4")),
     __function(__identifier(char_data("speedFails4")),
       __basic(`$$size`("32"),char_data("__integer")),
       __identifier(char_data("x")),__basic(`$$size`("32"),
         char_data("__integer")),__identifier(char_data("n")),
       __basic(`$$size`("32"),char_data("__integer")))),
   [speedFails4,speedFails4,
   b] = __declaration(__inside(char_data("speedFails4"),
     char_data("speedFails4")),__identifier(char_data("b")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [speedFails4,speedFails4,lbl_1] = __if(`$$label`("lbl_1"),
     __expression(__operator(char_data("__ge")),
       __expression(__identifier(char_data("b"))),
       __expression(__constant(char_data("cst__2"))))),
   [speedFails4,speedFails4,lbl_1,_false,
   lbl_4] = __statement(`$$label`("lbl_4"),
       __inside(char_data("speedFails4"),char_data("speedFails4"),
       char_data("lbl_1"),char_data("_false")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("t"))),
       __expression(__operator(char_data("__subtraction")),
         __expression(__constant(char_data("cst__2")))))),
   [speedFails4,speedFails4,lbl_1,_true,
   lbl_3] = __statement(`$$label`("lbl_3"),
       __inside(char_data("speedFails4"),char_data("speedFails4"),
       char_data("lbl_1"),char_data("_true")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("t"))),
       __expression(__constant(char_data("cst__2"))))),
   [speedFails4,speedFails4,lbl_5] = __while(`$$label`("lbl_5"),
     __expression(__operator(char_data("__le")),
       __expression(__identifier(char_data("x"))),
       __expression(__identifier(char_data("n"))))),
   [speedFails4,speedFails4,lbl_5,lbl_6] = __if(`$$label`("lbl_6"),
     __expression(__operator(char_data("__ge")),
       __expression(__identifier(char_data("b"))),
       __expression(__constant(char_data("cst__2"))))),
   [speedFails4,speedFails4,lbl_5,lbl_6,_false,
   lbl_8] = __statement(`$$label`("lbl_8"),
       __inside(char_data("speedFails4"),char_data("speedFails4"),
       char_data("lbl_5"),char_data("lbl_6"),char_data("_false")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("x"))),
       __expression(__operator(char_data("__subtraction")),
         __expression(__identifier(char_data("x"))),
         __expression(__identifier(char_data("t")))))),
   [speedFails4,speedFails4,lbl_5,lbl_6,_true,
   lbl_7] = __statement(`$$label`("lbl_7"),
       __inside(char_data("speedFails4"),char_data("speedFails4"),
       char_data("lbl_5"),char_data("lbl_6"),char_data("_true")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("x"))),
       __expression(__operator(char_data("__addition")),
         __expression(__identifier(char_data("x"))),
         __expression(__identifier(char_data("t")))))),
   [speedFails4,speedFails4,lbl_9] = __statement(`$$label`("lbl_9"),
     __inside(char_data("speedFails4"),char_data("speedFails4")),
   __return()),
 [speedFails4,speedFails4,
 t] = __declaration(__inside(char_data("speedFails4"),
   char_data("speedFails4")),__identifier(char_data("t")),
   __basic(`$$size`("32"),char_data("__integer"))))
table([speedFails4,speedFails4] = [[speedFails4,speedFails4],[speedFails4,
  cst__2],[speedFails4,speedFails4],[speedFails4,speedFails4,t],
[speedFails4,speedFails4,b],[speedFails4,speedFails4,lbl_1],[speedFails4,
  speedFails4,lbl_1,_true,lbl_3],[speedFails4,speedFails4,lbl_1,_false,
  lbl_4],[speedFails4,speedFails4,lbl_5,lbl_6],[speedFails4,speedFails4,
  lbl_5],[speedFails4,speedFails4,lbl_5,lbl_6,_true,lbl_7],[speedFails4,
  speedFails4,lbl_5,lbl_6,_false,lbl_8],[speedFails4,speedFails4,lbl_9]])
[[speedFails4,speedFails4,t],[speedFails4,speedFails4,b],[speedFails4,
  speedFails4,lbl_1,_true,lbl_3],[speedFails4,speedFails4,lbl_1,_false,
  lbl_4],[speedFails4,speedFails4,lbl_5,lbl_6,_true,lbl_7],[speedFails4,
  speedFails4,lbl_5,lbl_6,_false,lbl_8],[speedFails4,speedFails4,lbl_9]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of x is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of n is 0
body [[speedFails4,speedFails4],[speedFails4,cst__2],[speedFails4,
  speedFails4],[speedFails4,speedFails4,t],[speedFails4,speedFails4,b],
[speedFails4,speedFails4,lbl_1],[speedFails4,speedFails4,lbl_1,_true,
lbl_3],[speedFails4,speedFails4,lbl_1,_false,lbl_4],[speedFails4,
  speedFails4,lbl_5,lbl_6],[speedFails4,speedFails4,lbl_5],[speedFails4,
  speedFails4,lbl_5,lbl_6,_true,lbl_7],[speedFails4,speedFails4,lbl_5,
  lbl_6,_false,lbl_8],[speedFails4,speedFails4,lbl_9]]
lbl_1 __si
 counter 1/0 iteration domain {}

collect subscripts __expression(__identifier(char_data("t")))
[t(),[],{},{}]
collect subscripts __expression(__identifier(char_data("t")))
[t(),[],{},{}]
lbl_6 __si
 counter 1/0 iteration domain {}

lbl_5 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
examining b
 is never defined
examining cst__2
 is a constant
examining n
examining speedFails4
examining t
 has definitions
examining x
while remnants __le(x,n)to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified (b >= 1)
to be simplified (1 > b)
to be simplified ( (b >= 1) && (x > n) )
to be simplified ( (b >= 1) && ( (n >= x) && (b >= 1) ) )
to be simplified ( (b >= 1) && ( (n >= x) && (1 > b) ) )
to be simplified ( (1 > b) && (x > n) )
to be simplified ( (1 > b) && ( (n >= x) && (b >= 1) ) )
to be simplified ( (1 > b) && ( (n >= x) && (1 > b) ) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (b >= 1)
to be simplified (1 > b)
to be simplified (b >= 1)
to be simplified (1 > b)
to be simplified (b >= 1)
to be simplified (1 > b)
to be simplified (n >= x)
to be simplified (x > n)
to be simplified (x > n)
to be simplified (n >= x)
to be simplified ( (n >= x) && (b >= 1) )
to be simplified ( (n >= x) && (1 > b) )
to be simplified (b >= 1)
to be simplified (1 > b)
to be simplified (b >= 1)
to be simplified (1 > b)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (x > n)
to be simplified ( (n >= x) && (b >= 1) )
to be simplified ( (n >= x) && (1 > b) )
to be simplified TRUE
to be simplified (x > n)
to be simplified ( (n >= x) && (b >= 1) )
to be simplified ( (n >= x) && (1 > b) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE

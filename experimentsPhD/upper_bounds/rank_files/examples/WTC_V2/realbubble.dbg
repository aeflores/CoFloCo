FrontEnd version J.3
qualif realbubble
inside declaration [realbubble,realbubble]
inside declaration [realbubble,realbubble,array]
inside declaration [realbubble,realbubble,i]
inside declaration [realbubble,realbubble,j]
inside declaration [realbubble,realbubble,temp]
inside declaration [realbubble,realbubble,test]
inside declaration [realbubble,cst__3]
inside declaration [realbubble,cst__2]
table([realbubble,
  cst__2] = __declaration(__inside(char_data("realbubble")),
  __constant(`$$value`("1"),char_data("cst__2")),
  __basic(char_data("__integer"))),
   [realbubble,cst__3] = __declaration(__inside(char_data("realbubble")),
     __constant(`$$value`("0"),char_data("cst__3")),
     __basic(char_data("__integer"))),
   [realbubble,
     realbubble] = __declaration(__inside(char_data("realbubble")),
     __identifier(char_data("realbubble")),
     __function(__identifier(char_data("realbubble")),
       __basic(char_data("void")),__identifier(char_data("length")),
       __basic(`$$size`("32"),char_data("__integer")))),
   [realbubble,realbubble,
   array] = __declaration(__inside(char_data("realbubble"),
     char_data("realbubble")),__identifier(char_data("array")),
     __pointer(__basic(`$$size`("32"),char_data("__integer")))),
   [realbubble,realbubble,
   i] = __declaration(__inside(char_data("realbubble"),
     char_data("realbubble")),__identifier(char_data("i")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [realbubble,realbubble,
   j] = __declaration(__inside(char_data("realbubble"),
     char_data("realbubble")),__identifier(char_data("j")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [realbubble,realbubble,lbl_1] = __for(`$$label`("lbl_1"),
     __init(__expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("i"))),
       __expression(__operator(char_data("__subtraction")),
         __expression(__identifier(char_data("length"))),
         __expression(__constant(char_data("cst__2")))))),
     __test(__expression(__operator(char_data("__gt")),
       __expression(__identifier(char_data("i"))),
       __expression(__constant(char_data("cst__3"))))),
     __next(__expression(__operator(char_data("_post_decr")),
       __expression(__identifier(char_data("i")))))),
   [realbubble,realbubble,lbl_1,lbl_12] = __if(`$$label`("lbl_12"),
     __expression(__operator(char_data("__eq")),
       __expression(__identifier(char_data("test"))),
       __expression(__constant(char_data("cst__3"))))),
   [realbubble,realbubble,lbl_1,lbl_12,_false,
   lbl_14] = __statement(`$$label`("lbl_14"),
     __inside(char_data("realbubble"),char_data("realbubble"),
       char_data("lbl_1"),char_data("lbl_12"),char_data("_false")),
 __nop()),
 [realbubble,realbubble,lbl_1,lbl_12,_true,
 lbl_13] = __statement(`$$label`("lbl_13"),
     __inside(char_data("realbubble"),char_data("realbubble"),
     char_data("lbl_1"),char_data("lbl_12"),char_data("_true")),__break()),
[realbubble,realbubble,lbl_1,lbl_4] = __statement(`$$label`("lbl_4"),
 __inside(char_data("realbubble"),char_data("realbubble"),
     char_data("lbl_1")),
   __expression(__operator(char_data("__assignment")),
   __expression(__identifier(char_data("test"))),
   __expression(__constant(char_data("cst__3"))))),
[realbubble,realbubble,lbl_1,lbl_5] = __for(`$$label`("lbl_5"),
 __init(__expression(__operator(char_data("__assignment")),
   __expression(__identifier(char_data("j"))),
   __expression(__constant(char_data("cst__3"))))),
 __test(__expression(__operator(char_data("__lt")),
   __expression(__identifier(char_data("j"))),
   __expression(__identifier(char_data("i"))))),
 __next(__expression(__operator(char_data("_post_incr")),
   __expression(__identifier(char_data("j")))))),
[realbubble,realbubble,lbl_1,lbl_5,lbl_6] = __if(`$$label`("lbl_6"),
 __expression(__operator(char_data("__gt")),
   __expression(__operator(char_data("__subscript")),
     __expression(__identifier(char_data("array"))),
     __expression(__identifier(char_data("j")))),
   __expression(__operator(char_data("__subscript")),
     __expression(__identifier(char_data("array"))),
     __expression(__operator(char_data("__addition")),
       __expression(__identifier(char_data("j"))),
       __expression(__constant(char_data("cst__2"))))))),
[realbubble,realbubble,lbl_1,lbl_5,lbl_6,_false,
lbl_11] = __statement(`$$label`("lbl_11"),__inside(char_data("realbubble"),
   char_data("realbubble"),char_data("lbl_1"),char_data("lbl_5"),
   char_data("lbl_6"),char_data("_false")),__nop()),
[realbubble,realbubble,lbl_1,lbl_5,lbl_6,_true,
lbl_10] = __statement(`$$label`("lbl_10"),__inside(char_data("realbubble"),
 char_data("realbubble"),char_data("lbl_1"),char_data("lbl_5"),
 char_data("lbl_6"),char_data("_true")),
__expression(__operator(char_data("__assignment")),
 __expression(__identifier(char_data("test"))),
 __expression(__constant(char_data("cst__2"))))),
[realbubble,realbubble,lbl_1,lbl_5,lbl_6,_true,
lbl_7] = __statement(`$$label`("lbl_7"),__inside(char_data("realbubble"),
 char_data("realbubble"),char_data("lbl_1"),char_data("lbl_5"),
 char_data("lbl_6"),char_data("_true")),
__expression(__operator(char_data("__assignment")),
 __expression(__identifier(char_data("temp"))),
 __expression(__operator(char_data("__subscript")),
   __expression(__identifier(char_data("array"))),
   __expression(__identifier(char_data("j")))))),
[realbubble,realbubble,lbl_1,lbl_5,lbl_6,_true,
lbl_8] = __statement(`$$label`("lbl_8"),__inside(char_data("realbubble"),
 char_data("realbubble"),char_data("lbl_1"),char_data("lbl_5"),
 char_data("lbl_6"),char_data("_true")),
__expression(__operator(char_data("__assignment")),
 __expression(__operator(char_data("__subscript")),
   __expression(__identifier(char_data("array"))),
   __expression(__identifier(char_data("j")))),
 __expression(__operator(char_data("__subscript")),
   __expression(__identifier(char_data("array"))),
   __expression(__operator(char_data("__addition")),
     __expression(__identifier(char_data("j"))),
     __expression(__constant(char_data("cst__2"))))))),
[realbubble,realbubble,lbl_1,lbl_5,lbl_6,_true,
lbl_9] = __statement(`$$label`("lbl_9"),__inside(char_data("realbubble"),
 char_data("realbubble"),char_data("lbl_1"),char_data("lbl_5"),
 char_data("lbl_6"),char_data("_true")),
__expression(__operator(char_data("__assignment")),
 __expression(__operator(char_data("__subscript")),
   __expression(__identifier(char_data("array"))),
   __expression(__operator(char_data("__addition")),
     __expression(__identifier(char_data("j"))),
     __expression(__constant(char_data("cst__2"))))),
 __expression(__identifier(char_data("temp"))))),
[realbubble,realbubble,
temp] = __declaration(__inside(char_data("realbubble"),
char_data("realbubble")),__identifier(char_data("temp")),
__basic(`$$size`("32"),char_data("__integer"))),
[realbubble,realbubble,
test] = __declaration(__inside(char_data("realbubble"),
char_data("realbubble")),__identifier(char_data("test")),
__basic(`$$size`("32"),char_data("__integer"))))
table([realbubble,realbubble] = [[realbubble,realbubble],[realbubble,
cst__3],[realbubble,cst__2],[realbubble,realbubble],[realbubble,realbubble,
array],[realbubble,realbubble,i],[realbubble,realbubble,j],[realbubble,
realbubble,temp],[realbubble,realbubble,test],[realbubble,realbubble,
lbl_1],[realbubble,realbubble,lbl_1,lbl_4],[realbubble,realbubble,lbl_1,
lbl_5,lbl_6],[realbubble,realbubble,lbl_1,lbl_5],[realbubble,realbubble,
lbl_1,lbl_5,lbl_6,_true,lbl_7],[realbubble,realbubble,lbl_1,lbl_5,lbl_6,
_true,lbl_8],[realbubble,realbubble,lbl_1,lbl_5,lbl_6,_true,lbl_9],
[realbubble,realbubble,lbl_1,lbl_5,lbl_6,_true,lbl_10],[realbubble,
realbubble,lbl_1,lbl_5,lbl_6,_false,lbl_11],[realbubble,realbubble,lbl_1,
lbl_12],[realbubble,realbubble,lbl_1,lbl_12,_true,lbl_13],[realbubble,
realbubble,lbl_1,lbl_12,_false,lbl_14]])
[[realbubble,realbubble,array],[realbubble,realbubble,i],[realbubble,
realbubble,j],[realbubble,realbubble,temp],[realbubble,realbubble,test],
[realbubble,realbubble,lbl_1,lbl_4],[realbubble,realbubble,lbl_1,lbl_5,
lbl_6,_true,lbl_7],[realbubble,realbubble,lbl_1,lbl_5,lbl_6,_true,lbl_8],
[realbubble,realbubble,lbl_1,lbl_5,lbl_6,_true,lbl_9],[realbubble,
realbubble,lbl_1,lbl_5,lbl_6,_true,lbl_10],[realbubble,realbubble,lbl_1,
lbl_5,lbl_6,_false,lbl_11],[realbubble,realbubble,lbl_1,lbl_12,_true,
lbl_13],[realbubble,realbubble,lbl_1,lbl_12,_false,lbl_14]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of length is 0
body [[realbubble,realbubble],[realbubble,cst__3],[realbubble,cst__2],
[realbubble,realbubble],[realbubble,realbubble,array],[realbubble,
realbubble,i],[realbubble,realbubble,j],[realbubble,realbubble,temp],
[realbubble,realbubble,test],[realbubble,realbubble,lbl_1],[realbubble,
realbubble,lbl_1,lbl_4],[realbubble,realbubble,lbl_1,lbl_5,lbl_6],
[realbubble,realbubble,lbl_1,lbl_5],[realbubble,realbubble,lbl_1,lbl_5,
lbl_6,_true,lbl_7],[realbubble,realbubble,lbl_1,lbl_5,lbl_6,_true,lbl_8],
[realbubble,realbubble,lbl_1,lbl_5,lbl_6,_true,lbl_9],[realbubble,
realbubble,lbl_1,lbl_5,lbl_6,_true,lbl_10],[realbubble,realbubble,lbl_1,
lbl_5,lbl_6,_false,lbl_11],[realbubble,realbubble,lbl_1,lbl_12],
[realbubble,realbubble,lbl_1,lbl_12,_true,lbl_13],[realbubble,realbubble,
lbl_1,lbl_12,_false,lbl_14]]
collect subscripts __expression(__identifier(char_data("test")))
[test(),[],{},{}]
lbl_6 __si
 counter 1/0 iteration domain {}

collect subscripts __expression(__identifier(char_data("temp")))
[temp(),[],{},{}]
collect subscripts __expression(__operator(char_data("__subscript")),
__expression(__identifier(char_data("array"))),
__expression(__identifier(char_data("j"))))
collect subscripts __expression(__identifier(char_data("array")))
[array(),[],{},{}]
[__memory(),[array+j],{},{j()}]
collect subscripts __expression(__operator(char_data("__subscript")),
__expression(__identifier(char_data("array"))),
__expression(__identifier(char_data("j"))))
collect subscripts __expression(__identifier(char_data("array")))
[array(),[],{},{}]
[__memory(),[array+j],{},{j()}]
collect subscripts __expression(__operator(char_data("__subscript")),
__expression(__identifier(char_data("array"))),
__expression(__operator(char_data("__addition")),
__expression(__identifier(char_data("j"))),
__expression(__constant(char_data("cst__2")))))
collect subscripts __expression(__identifier(char_data("array")))
[array(),[],{},{}]
[__memory(),[array+j+1],{},{j()}]
collect subscripts __expression(__operator(char_data("__subscript")),
__expression(__identifier(char_data("array"))),
__expression(__operator(char_data("__addition")),
__expression(__identifier(char_data("j"))),
__expression(__constant(char_data("cst__2")))))
collect subscripts __expression(__identifier(char_data("array")))
[array(),[],{},{}]
[__memory(),[array+j+1],{},{j()}]
collect subscripts __expression(__identifier(char_data("test")))
[test(),[],{},{}]
lbl_12 __si
 counter 1/0 iteration domain {}

examining array
 is not integer
examining cst__2
 is a constant
examining cst__3
 is a constant
examining i
 has definitions
examining j
 has definitions
examining length
examining realbubble
examining temp
 has definitions
examining test
 has definitions
to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified TRUE
to be simplified (1 >= length)
to be simplified (length > 1)
to be simplified ( (length > 1) && ( (1 >= length) && (0 = 0) ) )
to be simplified ( (length > 1) && ( (1 >= length) && (0 != 0) ) )
to be simplified (length > 1)
to be simplified (length > 1)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (test = 0)
to be simplified (test != 0)
to be simplified (test = 0)
to be simplified (test != 0)
to be simplified (test != 0)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (i > 0)
to be simplified (0 >= i)
to be simplified (i > 0)
to be simplified (i > 0)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (i > j)
to be simplified (j >= i)
to be simplified (i > j)
to be simplified ( (j >= i) && (test = 0) )
to be simplified ( (j >= i) && (test != 0) )
to be simplified (i > j)
to be simplified (i > j)
to be simplified (i > j)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified ( (j >= i) && (test = 0) )
to be simplified ( (j >= i) && (test != 0) )
to be simplified (i > j)
to be simplified (i > j)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (0 >= i)
to be simplified (i > 0)
to be simplified ( (i > 0) && ( (0 >= i) && (0 = 0) ) )
to be simplified ( (i > 0) && ( (0 >= i) && (0 != 0) ) )
to be simplified (i > 0)
to be simplified (i > 0)

FrontEnd version J.3
qualif rank3
inside declaration [rank3,nondet]
inside declaration [rank3,rank3]
inside declaration [rank3,rank3,x]
inside declaration [rank3,rank3,y]
inside declaration [rank3,cst__12]
inside declaration [rank3,cst__9]
inside declaration [rank3,cst__8]
inside declaration [rank3,cst__4]
table([rank3,cst__12] = __declaration(__inside(char_data("rank3")),
  __constant(`$$value`("3"),char_data("cst__12")),
  __basic(char_data("__integer"))),
   [rank3,cst__4] = __declaration(__inside(char_data("rank3")),
     __constant(`$$value`("2"),char_data("cst__4")),
     __basic(char_data("__integer"))),
   [rank3,cst__8] = __declaration(__inside(char_data("rank3")),
     __constant(`$$value`("1"),char_data("cst__8")),
     __basic(char_data("__integer"))),
   [rank3,cst__9] = __declaration(__inside(char_data("rank3")),
     __constant(`$$value`("0"),char_data("cst__9")),
     __basic(char_data("__integer"))),
   [rank3,nondet] = __declaration(__inside(char_data("rank3")),
     __identifier(char_data("nondet")),
     __function(__identifier(char_data("nondet")),__basic(`$$size`("32"),
         char_data("__integer")))),
   [rank3,rank3] = __declaration(__inside(char_data("rank3")),
     __identifier(char_data("rank3")),
     __function(__identifier(char_data("rank3")),
       __basic(char_data("void")),__identifier(char_data("m")),
       __basic(`$$size`("32"),char_data("__integer")))),
   [rank3,rank3,init_1] = __statement(`$$label`("init_1"),
     __inside(char_data("rank3"),char_data("rank3")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("x"))),
       __expression(__identifier(char_data("m"))))),
   [rank3,rank3,init_2] = __statement(`$$label`("init_2"),
     __inside(char_data("rank3"),char_data("rank3")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("y"))),
       __expression(__identifier(char_data("m"))))),
   [rank3,rank3,lbl_3] = __while(`$$label`("lbl_3"),
     __expression(__operator(char_data("__ge")),
       __expression(__identifier(char_data("x"))),
       __expression(__constant(char_data("cst__4"))))),
   [rank3,rank3,lbl_3,lbl_16] = __statement(`$$label`("lbl_16"),
     __inside(char_data("rank3"),char_data("rank3"),char_data("lbl_3")),
     __expression(__operator(char_data("_post_decr")),
       __expression(__identifier(char_data("x"))))),
   [rank3,rank3,lbl_3,lbl_17] = __statement(`$$label`("lbl_17"),
     __inside(char_data("rank3"),char_data("rank3"),char_data("lbl_3")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("y"))),
       __expression(__operator(char_data("__subtraction")),
         __expression(__identifier(char_data("y"))),
         __expression(__identifier(char_data("x")))))),
   [rank3,rank3,lbl_3,lbl_5] = __statement(`$$label`("lbl_5"),
     __inside(char_data("rank3"),char_data("rank3"),char_data("lbl_3")),
     __expression(__operator(char_data("_post_decr")),
       __expression(__identifier(char_data("x"))))),
   [rank3,rank3,lbl_3,lbl_6] = __statement(`$$label`("lbl_6"),
     __inside(char_data("rank3"),char_data("rank3"),char_data("lbl_3")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("y"))),
       __expression(__operator(char_data("__addition")),
         __expression(__identifier(char_data("y"))),
         __expression(__identifier(char_data("x")))))),
   [rank3,rank3,lbl_3,lbl_7] = __while(`$$label`("lbl_7"),
     __expression(__operator(char_data("__conjunction")),
       __expression(__operator(char_data("__ge")),
         __expression(__identifier(char_data("y"))),
         __expression(__operator(char_data("__addition")),
           __expression(__identifier(char_data("x"))),
           __expression(__constant(char_data("cst__8"))))),
       __expression(__operator(char_data("__gt")),
         __expression(__operator(char_data("__funcall")),
           __expression(__identifier(char_data("nondet")))),
         __expression(__constant(char_data("cst__9")))))),
   [rank3,rank3,lbl_3,lbl_7,lbl_10] = __statement(`$$label`("lbl_10"),
     __inside(char_data("rank3"),char_data("rank3"),char_data("lbl_3"),
       char_data("lbl_7")),
       __expression(__operator(char_data("_post_decr")),
       __expression(__identifier(char_data("y"))))),
   [rank3,rank3,lbl_3,lbl_7,lbl_11] = __while(`$$label`("lbl_11"),
     __expression(__operator(char_data("__conjunction")),
       __expression(__operator(char_data("__ge")),
         __expression(__identifier(char_data("y"))),
         __expression(__operator(char_data("__addition")),
           __expression(__identifier(char_data("x"))),
           __expression(__constant(char_data("cst__12"))))),
       __expression(__operator(char_data("__gt")),
         __expression(__operator(char_data("__funcall")),
           __expression(__identifier(char_data("nondet")))),
         __expression(__constant(char_data("cst__9")))))),
   [rank3,rank3,lbl_3,lbl_7,lbl_11,
     lbl_13] = __statement(`$$label`("lbl_13"),__inside(char_data("rank3"),
       char_data("rank3"),char_data("lbl_3"),char_data("lbl_7"),
       char_data("lbl_11")),
       __expression(__operator(char_data("_post_incr")),
       __expression(__identifier(char_data("x"))))),
   [rank3,rank3,lbl_3,lbl_7,lbl_11,
     lbl_14] = __statement(`$$label`("lbl_14"),__inside(char_data("rank3"),
       char_data("rank3"),char_data("lbl_3"),char_data("lbl_7"),
       char_data("lbl_11")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("y"))),
       __expression(__operator(char_data("__subtraction")),
         __expression(__identifier(char_data("y"))),
         __expression(__constant(char_data("cst__4")))))),
   [rank3,rank3,lbl_3,lbl_7,lbl_15] = __statement(`$$label`("lbl_15"),
     __inside(char_data("rank3"),char_data("rank3"),char_data("lbl_3"),
       char_data("lbl_7")),
       __expression(__operator(char_data("_post_decr")),
       __expression(__identifier(char_data("y"))))),
   [rank3,rank3,x] = __declaration(__inside(char_data("rank3"),
     char_data("rank3")),__identifier(char_data("x")),
       __basic(`$$size`("32"),char_data("__integer"))),
   [rank3,rank3,y] = __declaration(__inside(char_data("rank3"),
     char_data("rank3")),__identifier(char_data("y")),
       __basic(`$$size`("32"),char_data("__integer"))))
table([rank3,rank3] = [[rank3,nondet],[rank3,rank3],[rank3,cst__12],[rank3,
    cst__9],[rank3,cst__8],[rank3,cst__4],[rank3,rank3],[rank3,rank3,x],
  [rank3,rank3,y],[rank3,rank3,init_1],[rank3,rank3,init_2],[rank3,rank3,
    lbl_3],[rank3,rank3,lbl_3,lbl_5],[rank3,rank3,lbl_3,lbl_6],[rank3,
    rank3,lbl_3,lbl_7],[rank3,rank3,lbl_3,lbl_7,lbl_10],[rank3,rank3,lbl_3,
    lbl_7,lbl_11],[rank3,rank3,lbl_3,lbl_7,lbl_11,lbl_13],[rank3,rank3,
    lbl_3,lbl_7,lbl_11,lbl_14],[rank3,rank3,lbl_3,lbl_7,lbl_15],[rank3,
    rank3,lbl_3,lbl_16],[rank3,rank3,lbl_3,lbl_17]])
[[rank3,rank3,x],[rank3,rank3,y],[rank3,rank3,init_1],[rank3,rank3,init_2],
  [rank3,rank3,lbl_3,lbl_5],[rank3,rank3,lbl_3,lbl_6],[rank3,rank3,lbl_3,
    lbl_7,lbl_10],[rank3,rank3,lbl_3,lbl_7,lbl_11,lbl_13],[rank3,rank3,
    lbl_3,lbl_7,lbl_11,lbl_14],[rank3,rank3,lbl_3,lbl_7,lbl_15],[rank3,
    rank3,lbl_3,lbl_16],[rank3,rank3,lbl_3,lbl_17]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of m is 0
body [[rank3,nondet],[rank3,rank3],[rank3,cst__12],[rank3,cst__9],[rank3,
    cst__8],[rank3,cst__4],[rank3,rank3],[rank3,rank3,x],[rank3,rank3,y],
  [rank3,rank3,init_1],[rank3,rank3,init_2],[rank3,rank3,lbl_3],[rank3,
    rank3,lbl_3,lbl_5],[rank3,rank3,lbl_3,lbl_6],[rank3,rank3,lbl_3,lbl_7],
  [rank3,rank3,lbl_3,lbl_7,lbl_10],[rank3,rank3,lbl_3,lbl_7,lbl_11],[rank3,
    rank3,lbl_3,lbl_7,lbl_11,lbl_13],[rank3,rank3,lbl_3,lbl_7,lbl_11,
  lbl_14],[rank3,rank3,lbl_3,lbl_7,lbl_15],[rank3,rank3,lbl_3,lbl_16],
  [rank3,rank3,lbl_3,lbl_17]]
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
collect subscripts __expression(__identifier(char_data("y")))
[y(),[],{},{}]
lbl_3 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
collect subscripts __expression(__identifier(char_data("y")))
[y(),[],{},{}]
lbl_7 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("y")))
[y(),[],{},{}]
lbl_11 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
collect subscripts __expression(__identifier(char_data("y")))
[y(),[],{},{}]
collect subscripts __expression(__identifier(char_data("y")))
[y(),[],{},{}]
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
collect subscripts __expression(__identifier(char_data("y")))
[y(),[],{},{}]
examining cst__12
 is a constant
examining cst__4
 is a constant
examining cst__8
 is a constant
examining cst__9
 is a constant
examining m
examining nondet
examining rank3
examining x
 has definitions
examining y
 has definitions
while remnants __ge(x,2)while remnants __conjunction(__ge(y,x+1),
__gt(nondet(),0))while remnants __conjunction(__ge(y,x+3),__gt(nondet(),
0))to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified TRUE
to be simplified TRUE
to be simplified (2 > m)
to be simplified (m >= 2)
to be simplified (m >= 2)
to be simplified ( (m >= 2) && (m >= 1) )
to be simplified ( (m >= 2) && ( (m >= 1) && (m >= 4) ) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (y >= x+3)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (y >= x+3)
to be simplified (y >= x+3)
to be simplified (y >= x+3)
to be simplified (x >= 2)
to be simplified (2 > x)
to be simplified (x >= 2)
to be simplified (x >= 2)
to be simplified (x >= 2)
to be simplified (y >= x+1)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (y >= x+1)
to be simplified (y >= x+1)
to be simplified (y >= x+1)
to be simplified (y >= x+1)
to be simplified ( (y >= x+1) && (y >= x+4) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (2 > x)
to be simplified (x >= 2)
to be simplified (x >= 2)
to be simplified ( (x >= 2) && (y >= 1) )
to be simplified ( (x >= 2) && ( (y >= 1) && (y >= 4) ) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (y >= x+1)
to be simplified ( (y >= x+1) && (y >= x+4) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (y >= x+3)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE

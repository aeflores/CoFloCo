FrontEnd version J.3
qualif easy1
inside declaration [easy1,easy1]
inside declaration [easy1,easy1,x]
inside declaration [easy1,easy1,y]
inside declaration [easy1,easy1,z]
inside declaration [easy1,cst__10]
inside declaration [easy1,cst__8]
inside declaration [easy1,cst__6]
inside declaration [easy1,cst__3]
inside declaration [easy1,cst__1]
table([easy1,cst__1] = __declaration(__inside(char_data("easy1")),
  __constant(`$$value`("0"),char_data("cst__1")),
  __basic(char_data("__integer"))),
   [easy1,cst__10] = __declaration(__inside(char_data("easy1")),
     __constant(`$$value`("2"),char_data("cst__10")),
     __basic(char_data("__integer"))),
   [easy1,cst__3] = __declaration(__inside(char_data("easy1")),
     __constant(`$$value`("100"),char_data("cst__3")),
     __basic(char_data("__integer"))),
   [easy1,cst__6] = __declaration(__inside(char_data("easy1")),
     __constant(`$$value`("40"),char_data("cst__6")),
     __basic(char_data("__integer"))),
   [easy1,cst__8] = __declaration(__inside(char_data("easy1")),
     __constant(`$$value`("1"),char_data("cst__8")),
     __basic(char_data("__integer"))),
   [easy1,easy1] = __declaration(__inside(char_data("easy1")),
     __identifier(char_data("easy1")),
     __function(__identifier(char_data("easy1")),
       __basic(char_data("void")))),
   [easy1,easy1,lbl_2] = __statement(`$$label`("lbl_2"),
     __inside(char_data("easy1"),char_data("easy1")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("x"))),
       __expression(__constant(char_data("cst__1"))))),
   [easy1,easy1,lbl_4] = __statement(`$$label`("lbl_4"),
     __inside(char_data("easy1"),char_data("easy1")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("y"))),
       __expression(__constant(char_data("cst__3"))))),
   [easy1,easy1,lbl_5] = __while(`$$label`("lbl_5"),
     __expression(__operator(char_data("__lt")),
       __expression(__identifier(char_data("x"))),
       __expression(__constant(char_data("cst__6"))))),
   [easy1,easy1,lbl_5,lbl_7] = __if(`$$label`("lbl_7"),
     __expression(__operator(char_data("__eq")),
       __expression(__identifier(char_data("z"))),
       __expression(__constant(char_data("cst__1"))))),
   [easy1,easy1,lbl_5,lbl_7,_false,
     lbl_11] = __statement(`$$label`("lbl_11"),__inside(char_data("easy1"),
       char_data("easy1"),char_data("lbl_5"),char_data("lbl_7"),
       char_data("_false")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("x"))),
       __expression(__operator(char_data("__addition")),
         __expression(__identifier(char_data("x"))),
         __expression(__constant(char_data("cst__10")))))),
   [easy1,easy1,lbl_5,lbl_7,_true,lbl_9] = __statement(`$$label`("lbl_9"),
     __inside(char_data("easy1"),char_data("easy1"),char_data("lbl_5"),
       char_data("lbl_7"),char_data("_true")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("x"))),
       __expression(__operator(char_data("__addition")),
         __expression(__identifier(char_data("x"))),
         __expression(__constant(char_data("cst__8")))))),
   [easy1,easy1,x] = __declaration(__inside(char_data("easy1"),
     char_data("easy1")),__identifier(char_data("x")),
       __basic(`$$size`("32"),char_data("__integer"))),
   [easy1,easy1,y] = __declaration(__inside(char_data("easy1"),
     char_data("easy1")),__identifier(char_data("y")),
       __basic(`$$size`("32"),char_data("__integer"))),
   [easy1,easy1,z] = __declaration(__inside(char_data("easy1"),
     char_data("easy1")),__identifier(char_data("z")),
       __basic(`$$size`("32"),char_data("__integer"))))
table([easy1,easy1] = [[easy1,easy1],[easy1,cst__10],[easy1,cst__8],[easy1,
    cst__6],[easy1,cst__3],[easy1,cst__1],[easy1,easy1],[easy1,easy1,x],
  [easy1,easy1,y],[easy1,easy1,z],[easy1,easy1,lbl_2],[easy1,easy1,lbl_4],
  [easy1,easy1,lbl_5,lbl_7],[easy1,easy1,lbl_5],[easy1,easy1,lbl_5,lbl_7,
    _true,lbl_9],[easy1,easy1,lbl_5,lbl_7,_false,lbl_11]])
[[easy1,easy1,x],[easy1,easy1,y],[easy1,easy1,z],[easy1,easy1,lbl_2],
    [easy1,easy1,lbl_4],[easy1,easy1,lbl_5,lbl_7,_true,lbl_9],[easy1,easy1,
    lbl_5,lbl_7,_false,lbl_11]]
body [[easy1,easy1],[easy1,cst__10],[easy1,cst__8],[easy1,cst__6],[easy1,
    cst__3],[easy1,cst__1],[easy1,easy1],[easy1,easy1,x],[easy1,easy1,y],
  [easy1,easy1,z],[easy1,easy1,lbl_2],[easy1,easy1,lbl_4],[easy1,easy1,
    lbl_5,lbl_7],[easy1,easy1,lbl_5],[easy1,easy1,lbl_5,lbl_7,_true,lbl_9],
  [easy1,easy1,lbl_5,lbl_7,_false,lbl_11]]
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
collect subscripts __expression(__identifier(char_data("y")))
[y(),[],{},{}]
lbl_7 __si
 counter 1/0 iteration domain {}

lbl_5 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
examining cst__1
 is a constant
examining cst__10
 is a constant
examining cst__3
 is a constant
examining cst__6
 is a constant
examining cst__8
 is a constant
examining easy1
examining x
 has definitions
examining y
 has definitions
examining z
 is never defined
while remnants __lt(x,40)to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified TRUE
to be simplified TRUE
to be simplified (0 >= 40)
to be simplified ( (40 > 0) && (z = 0) )
to be simplified ( (40 > 0) && (z != 0) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (40 > x)
to be simplified (x >= 40)
to be simplified (40 > x)
to be simplified ( (40 > x) && (z = 0) )
to be simplified ( (40 > x) && (z != 0) )
to be simplified (z = 0)
to be simplified (z != 0)
to be simplified (z = 0)
to be simplified (z != 0)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (x >= 40)
to be simplified ( (40 > x) && (z = 0) )
to be simplified ( (40 > x) && (z != 0) )
to be simplified TRUE
to be simplified (x >= 40)
to be simplified ( (40 > x) && (z = 0) )
to be simplified ( (40 > x) && (z != 0) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE

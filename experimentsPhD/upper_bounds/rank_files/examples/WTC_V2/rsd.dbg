FrontEnd version J.3
qualif rsd
inside declaration [rsd,nondet]
inside declaration [rsd,rsd]
inside declaration [rsd,rsd,da]
inside declaration [rsd,rsd,db]
inside declaration [rsd,rsd,temp]
inside declaration [rsd,rsd,c1]
inside declaration [rsd,cst__11]
inside declaration [rsd,cst__4]
inside declaration [rsd,cst__1]
table([rsd,cst__1] = __declaration(__inside(char_data("rsd")),
  __constant(`$$value`("0"),char_data("cst__1")),
  __basic(char_data("__integer"))),
   [rsd,cst__11] = __declaration(__inside(char_data("rsd")),
     __constant(`$$value`("1"),char_data("cst__11")),
     __basic(char_data("__integer"))),
   [rsd,cst__4] = __declaration(__inside(char_data("rsd")),
     __constant(`$$value`("2"),char_data("cst__4")),
     __basic(char_data("__integer"))),
   [rsd,nondet] = __declaration(__inside(char_data("rsd")),
     __identifier(char_data("nondet")),
     __function(__identifier(char_data("nondet")),__basic(`$$size`("32"),
         char_data("__integer")))),
   [rsd,rsd] = __declaration(__inside(char_data("rsd")),
     __identifier(char_data("rsd")),
       __function(__identifier(char_data("rsd")),__basic(`$$size`("32"),
         char_data("__integer")),__identifier(char_data("r")),
       __basic(`$$size`("32"),char_data("__integer")))),
   [rsd,rsd,c1] = __declaration(__inside(char_data("rsd"),
     char_data("rsd")),__identifier(char_data("c1")),
       __basic(`$$size`("32"),char_data("__integer"))),
   [rsd,rsd,da] = __declaration(__inside(char_data("rsd"),
     char_data("rsd")),__identifier(char_data("da")),
       __basic(`$$size`("32"),char_data("__integer"))),
   [rsd,rsd,db] = __declaration(__inside(char_data("rsd"),
     char_data("rsd")),__identifier(char_data("db")),
       __basic(`$$size`("32"),char_data("__integer"))),
   [rsd,rsd,lbl_16] = __statement(`$$label`("lbl_16"),
     __inside(char_data("rsd"),char_data("rsd")),__return()),
 [rsd,rsd,lbl_2] = __statement(`$$label`("lbl_2"),
     __inside(char_data("rsd"),char_data("rsd")),
   __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("c1"))),
     __expression(__constant(char_data("cst__1"))))),
 [rsd,rsd,lbl_3] = __if(`$$label`("lbl_3"),
   __expression(__operator(char_data("__ge")),
     __expression(__identifier(char_data("r"))),
     __expression(__constant(char_data("cst__1"))))),
 [rsd,rsd,lbl_3,_false,lbl_15] = __statement(`$$label`("lbl_15"),
   __inside(char_data("rsd"),char_data("rsd"),char_data("lbl_3"),
     char_data("_false")),__nop()),
[rsd,rsd,lbl_3,_true,lbl_5] = __statement(`$$label`("lbl_5"),
 __inside(char_data("rsd"),char_data("rsd"),char_data("lbl_3"),
   char_data("_true")),__expression(__operator(char_data("__assignment")),
   __expression(__identifier(char_data("da"))),
   __expression(__operator(char_data("__multiplication")),
     __expression(__constant(char_data("cst__4"))),
     __expression(__identifier(char_data("r")))))),
[rsd,rsd,lbl_3,_true,lbl_6] = __statement(`$$label`("lbl_6"),
 __inside(char_data("rsd"),char_data("rsd"),char_data("lbl_3"),
   char_data("_true")),__expression(__operator(char_data("__assignment")),
   __expression(__identifier(char_data("db"))),
   __expression(__operator(char_data("__multiplication")),
     __expression(__constant(char_data("cst__4"))),
     __expression(__identifier(char_data("r")))))),
[rsd,rsd,lbl_3,_true,lbl_7] = __while(`$$label`("lbl_7"),
 __expression(__operator(char_data("__ge")),
   __expression(__identifier(char_data("da"))),
   __expression(__identifier(char_data("r"))))),
[rsd,rsd,lbl_3,_true,lbl_7,lbl_14] = __statement(`$$label`("lbl_14"),
 __inside(char_data("rsd"),char_data("rsd"),char_data("lbl_3"),
   char_data("_true"),char_data("lbl_7")),
 __expression(__operator(char_data("_post_incr")),
   __expression(__identifier(char_data("c1"))))),
[rsd,rsd,lbl_3,_true,lbl_7,lbl_8] = __if(`$$label`("lbl_8"),
 __expression(__operator(char_data("__gt")),
   __expression(__operator(char_data("__funcall")),
     __expression(__identifier(char_data("nondet")))),
   __expression(__constant(char_data("cst__1"))))),
[rsd,rsd,lbl_3,_true,lbl_7,lbl_8,_false,
lbl_10] = __statement(`$$label`("lbl_10"),__inside(char_data("rsd"),
   char_data("rsd"),char_data("lbl_3"),char_data("_true"),
     char_data("lbl_7"),char_data("lbl_8"),char_data("_false")),
 __expression(__operator(char_data("__assignment")),
   __expression(__identifier(char_data("temp"))),
   __expression(__identifier(char_data("da"))))),
[rsd,rsd,lbl_3,_true,lbl_7,lbl_8,_false,
lbl_12] = __statement(`$$label`("lbl_12"),__inside(char_data("rsd"),
   char_data("rsd"),char_data("lbl_3"),char_data("_true"),
     char_data("lbl_7"),char_data("lbl_8"),char_data("_false")),
 __expression(__operator(char_data("__assignment")),
   __expression(__identifier(char_data("da"))),
   __expression(__operator(char_data("__subtraction")),
     __expression(__identifier(char_data("db"))),
     __expression(__constant(char_data("cst__11")))))),
[rsd,rsd,lbl_3,_true,lbl_7,lbl_8,_false,
lbl_13] = __statement(`$$label`("lbl_13"),__inside(char_data("rsd"),
   char_data("rsd"),char_data("lbl_3"),char_data("_true"),
     char_data("lbl_7"),char_data("lbl_8"),char_data("_false")),
 __expression(__operator(char_data("__assignment")),
   __expression(__identifier(char_data("db"))),
   __expression(__identifier(char_data("temp"))))),
[rsd,rsd,lbl_3,_true,lbl_7,lbl_8,_true,
lbl_9] = __statement(`$$label`("lbl_9"),__inside(char_data("rsd"),
   char_data("rsd"),char_data("lbl_3"),char_data("_true"),
     char_data("lbl_7"),char_data("lbl_8"),char_data("_true")),
 __expression(__operator(char_data("_post_decr")),
   __expression(__identifier(char_data("da"))))),
[rsd,rsd,temp] = __declaration(__inside(char_data("rsd"),char_data("rsd")),
 __identifier(char_data("temp")),__basic(`$$size`("32"),
   char_data("__integer"))))
table([rsd,rsd] = [[rsd,nondet],[rsd,rsd],[rsd,cst__11],[rsd,cst__4],[rsd,
cst__1],[rsd,rsd],[rsd,rsd,da],[rsd,rsd,db],[rsd,rsd,temp],[rsd,rsd,c1],
[rsd,rsd,lbl_2],[rsd,rsd,lbl_3],[rsd,rsd,lbl_3,_true,lbl_5],[rsd,rsd,lbl_3,
_true,lbl_6],[rsd,rsd,lbl_3,_true,lbl_7,lbl_8],[rsd,rsd,lbl_3,_true,lbl_7],
[rsd,rsd,lbl_3,_true,lbl_7,lbl_8,_true,lbl_9],[rsd,rsd,lbl_3,_true,lbl_7,
lbl_8,_false,lbl_10],[rsd,rsd,lbl_3,_true,lbl_7,lbl_8,_false,lbl_12],[rsd,
rsd,lbl_3,_true,lbl_7,lbl_8,_false,lbl_13],[rsd,rsd,lbl_3,_true,lbl_7,
lbl_14],[rsd,rsd,lbl_3,_false,lbl_15],[rsd,rsd,lbl_16]])
[[rsd,rsd,da],[rsd,rsd,db],[rsd,rsd,temp],[rsd,rsd,c1],[rsd,rsd,lbl_2],
[rsd,rsd,lbl_3,_true,lbl_5],[rsd,rsd,lbl_3,_true,lbl_6],[rsd,rsd,lbl_3,
_true,lbl_7,lbl_8,_true,lbl_9],[rsd,rsd,lbl_3,_true,lbl_7,lbl_8,_false,
lbl_10],[rsd,rsd,lbl_3,_true,lbl_7,lbl_8,_false,lbl_12],[rsd,rsd,lbl_3,
_true,lbl_7,lbl_8,_false,lbl_13],[rsd,rsd,lbl_3,_true,lbl_7,lbl_14],[rsd,
rsd,lbl_3,_false,lbl_15],[rsd,rsd,lbl_16]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of r is 0
body [[rsd,nondet],[rsd,rsd],[rsd,cst__11],[rsd,cst__4],[rsd,cst__1],[rsd,
rsd],[rsd,rsd,da],[rsd,rsd,db],[rsd,rsd,temp],[rsd,rsd,c1],[rsd,rsd,lbl_2],
[rsd,rsd,lbl_3],[rsd,rsd,lbl_3,_true,lbl_5],[rsd,rsd,lbl_3,_true,lbl_6],
[rsd,rsd,lbl_3,_true,lbl_7,lbl_8],[rsd,rsd,lbl_3,_true,lbl_7],[rsd,rsd,
lbl_3,_true,lbl_7,lbl_8,_true,lbl_9],[rsd,rsd,lbl_3,_true,lbl_7,lbl_8,
_false,lbl_10],[rsd,rsd,lbl_3,_true,lbl_7,lbl_8,_false,lbl_12],[rsd,rsd,
lbl_3,_true,lbl_7,lbl_8,_false,lbl_13],[rsd,rsd,lbl_3,_true,lbl_7,lbl_14],
[rsd,rsd,lbl_3,_false,lbl_15],[rsd,rsd,lbl_16]]
collect subscripts __expression(__identifier(char_data("c1")))
[c1(),[],{},{}]
lbl_3 __si
 counter 1/0 iteration domain {}

collect subscripts __expression(__identifier(char_data("da")))
[da(),[],{},{}]
collect subscripts __expression(__identifier(char_data("db")))
[db(),[],{},{}]
lbl_8 __si
 counter 1/0 iteration domain {}

lbl_7 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("da")))
[da(),[],{},{}]
collect subscripts __expression(__identifier(char_data("temp")))
[temp(),[],{},{}]
collect subscripts __expression(__identifier(char_data("da")))
[da(),[],{},{}]
collect subscripts __expression(__identifier(char_data("db")))
[db(),[],{},{}]
collect subscripts __expression(__identifier(char_data("c1")))
[c1(),[],{},{}]
examining c1
 has definitions
examining cst__1
 is a constant
examining cst__11
 is a constant
examining cst__4
 is a constant
examining da
 has definitions
examining db
 has definitions
examining nondet
examining r
examining rsd
examining temp
 has definitions
while remnants __ge(da,r)to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified TRUE
to be simplified TRUE
to be simplified (r >= 0)
to be simplified (0 > r)
to be simplified ( (r >= 0) && (0 > r) )
to be simplified (r >= 0)
to be simplified (r >= 0)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (r >= 0)
to be simplified (0 > r)
to be simplified (r >= 0)
to be simplified (0 > r)
to be simplified (r >= 0)
to be simplified (0 > r)
to be simplified (da >= r)
to be simplified (r > da)
to be simplified (da >= r)
to be simplified (r > da)
to be simplified (da >= r)
to be simplified (da >= r)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (r > da)
to be simplified (da >= r)
to be simplified (da >= r)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE

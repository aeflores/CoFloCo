FrontEnd version J.3
qualif speedSimpleMultiple
inside declaration [speedSimpleMultiple,speedSimpleMultiple]
inside declaration [speedSimpleMultiple,speedSimpleMultiple,x]
inside declaration [speedSimpleMultiple,speedSimpleMultiple,y]
inside declaration [speedSimpleMultiple,cst__1]
table([speedSimpleMultiple,
cst__1] = __declaration(__inside(char_data("speedSimpleMultiple")),
  __constant(`$$value`("0"),char_data("cst__1")),
  __basic(char_data("__integer"))),
   [speedSimpleMultiple,
   speedSimpleMultiple] = __declaration(__inside(char_data("speedSimpleMultiple"
   )),__identifier(char_data("speedSimpleMultiple")),
     __function(__identifier(char_data("speedSimpleMultiple")),
       __basic(`$$size`("32"),char_data("__integer")),
       __identifier(char_data("n")),__basic(`$$size`("32"),
         char_data("__integer")),__identifier(char_data("m")),
       __basic(`$$size`("32"),char_data("__integer")))),
   [speedSimpleMultiple,speedSimpleMultiple,
   lbl_2] = __statement(`$$label`("lbl_2"),
     __inside(char_data("speedSimpleMultiple"),
       char_data("speedSimpleMultiple")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("x"))),
       __expression(__constant(char_data("cst__1"))))),
   [speedSimpleMultiple,speedSimpleMultiple,
   lbl_3] = __statement(`$$label`("lbl_3"),
     __inside(char_data("speedSimpleMultiple"),
       char_data("speedSimpleMultiple")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("y"))),
       __expression(__constant(char_data("cst__1"))))),
   [speedSimpleMultiple,speedSimpleMultiple,
   lbl_4] = __while(`$$label`("lbl_4"),
     __expression(__operator(char_data("__lt")),
       __expression(__identifier(char_data("x"))),
       __expression(__identifier(char_data("n"))))),
   [speedSimpleMultiple,speedSimpleMultiple,lbl_4,
   lbl_5] = __if(`$$label`("lbl_5"),
     __expression(__operator(char_data("__lt")),
       __expression(__identifier(char_data("y"))),
       __expression(__identifier(char_data("m"))))),
   [speedSimpleMultiple,speedSimpleMultiple,lbl_4,lbl_5,_false,
   lbl_7] = __statement(`$$label`("lbl_7"),
     __inside(char_data("speedSimpleMultiple"),
       char_data("speedSimpleMultiple"),char_data("lbl_4"),
       char_data("lbl_5"),char_data("_false")),
     __expression(__operator(char_data("_post_incr")),
       __expression(__identifier(char_data("x"))))),
   [speedSimpleMultiple,speedSimpleMultiple,lbl_4,lbl_5,_true,
   lbl_6] = __statement(`$$label`("lbl_6"),
     __inside(char_data("speedSimpleMultiple"),
       char_data("speedSimpleMultiple"),char_data("lbl_4"),
       char_data("lbl_5"),char_data("_true")),
     __expression(__operator(char_data("_post_incr")),
       __expression(__identifier(char_data("y"))))),
   [speedSimpleMultiple,speedSimpleMultiple,
   lbl_8] = __statement(`$$label`("lbl_8"),
     __inside(char_data("speedSimpleMultiple"),
       char_data("speedSimpleMultiple")),__return()),
 [speedSimpleMultiple,speedSimpleMultiple,
 x] = __declaration(__inside(char_data("speedSimpleMultiple"),
   char_data("speedSimpleMultiple")),__identifier(char_data("x")),
   __basic(`$$size`("32"),char_data("__integer"))),
 [speedSimpleMultiple,speedSimpleMultiple,
 y] = __declaration(__inside(char_data("speedSimpleMultiple"),
   char_data("speedSimpleMultiple")),__identifier(char_data("y")),
   __basic(`$$size`("32"),char_data("__integer"))))
table([speedSimpleMultiple,speedSimpleMultiple] = [[speedSimpleMultiple,
speedSimpleMultiple],[speedSimpleMultiple,cst__1],[speedSimpleMultiple,
  speedSimpleMultiple],[speedSimpleMultiple,speedSimpleMultiple,x],
[speedSimpleMultiple,speedSimpleMultiple,y],[speedSimpleMultiple,
  speedSimpleMultiple,lbl_2],[speedSimpleMultiple,speedSimpleMultiple,
lbl_3],[speedSimpleMultiple,speedSimpleMultiple,lbl_4,lbl_5],
[speedSimpleMultiple,speedSimpleMultiple,lbl_4],[speedSimpleMultiple,
  speedSimpleMultiple,lbl_4,lbl_5,_true,lbl_6],[speedSimpleMultiple,
  speedSimpleMultiple,lbl_4,lbl_5,_false,lbl_7],[speedSimpleMultiple,
  speedSimpleMultiple,lbl_8]])
[[speedSimpleMultiple,speedSimpleMultiple,x],[speedSimpleMultiple,
  speedSimpleMultiple,y],[speedSimpleMultiple,speedSimpleMultiple,lbl_2],
[speedSimpleMultiple,speedSimpleMultiple,lbl_3],[speedSimpleMultiple,
  speedSimpleMultiple,lbl_4,lbl_5,_true,lbl_6],[speedSimpleMultiple,
  speedSimpleMultiple,lbl_4,lbl_5,_false,lbl_7],[speedSimpleMultiple,
  speedSimpleMultiple,lbl_8]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of n is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of m is 0
body [[speedSimpleMultiple,speedSimpleMultiple],[speedSimpleMultiple,
cst__1],[speedSimpleMultiple,speedSimpleMultiple],[speedSimpleMultiple,
  speedSimpleMultiple,x],[speedSimpleMultiple,speedSimpleMultiple,y],
[speedSimpleMultiple,speedSimpleMultiple,lbl_2],[speedSimpleMultiple,
  speedSimpleMultiple,lbl_3],[speedSimpleMultiple,speedSimpleMultiple,
  lbl_4,lbl_5],[speedSimpleMultiple,speedSimpleMultiple,lbl_4],
[speedSimpleMultiple,speedSimpleMultiple,lbl_4,lbl_5,_true,lbl_6],
[speedSimpleMultiple,speedSimpleMultiple,lbl_4,lbl_5,_false,lbl_7],
[speedSimpleMultiple,speedSimpleMultiple,lbl_8]]
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
collect subscripts __expression(__identifier(char_data("y")))
[y(),[],{},{}]
lbl_5 __si
 counter 1/0 iteration domain {}

lbl_4 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("y")))
[y(),[],{},{}]
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
examining cst__1
 is a constant
examining m
examining n
examining speedSimpleMultiple
examining x
 has definitions
examining y
 has definitions
while remnants __lt(x,n)to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified TRUE
to be simplified TRUE
to be simplified (0 >= n)
to be simplified ( (n > 0) && (m > 0) )
to be simplified ( (n > 0) && (0 >= m) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (n > x)
to be simplified (x >= n)
to be simplified (x >= n)
to be simplified (n > x)
to be simplified ( (n > x) && (m > y) )
to be simplified ( (n > x) && (y >= m) )
to be simplified (m > y)
to be simplified (y >= m)
to be simplified (m > y)
to be simplified (y >= m)
to be simplified (m > y)
to be simplified (y >= m)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (x >= n)
to be simplified ( (n > x) && (m > y) )
to be simplified ( (n > x) && (y >= m) )
to be simplified TRUE
to be simplified TRUE
to be simplified (x >= n)
to be simplified ( (n > x) && (m > y) )
to be simplified ( (n > x) && (y >= m) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE

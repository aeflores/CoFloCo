FrontEnd version J.3
qualif terminatorbubble
inside declaration [terminatorbubble,nondet]
inside declaration [terminatorbubble,terminatorbubble]
inside declaration [terminatorbubble,terminatorbubble,error]
inside declaration [terminatorbubble,terminatorbubble,b]
inside declaration [terminatorbubble,terminatorbubble,j]
inside declaration [terminatorbubble,terminatorbubble,t]
inside declaration [terminatorbubble,cst__6]
inside declaration [terminatorbubble,cst__1]
table([terminatorbubble,
cst__1] = __declaration(__inside(char_data("terminatorbubble")),
  __constant(`$$value`("0"),char_data("cst__1")),
  __basic(char_data("__integer"))),
   [terminatorbubble,
   cst__6] = __declaration(__inside(char_data("terminatorbubble")),
     __constant(`$$value`("1"),char_data("cst__6")),
     __basic(char_data("__integer"))),
   [terminatorbubble,
   nondet] = __declaration(__inside(char_data("terminatorbubble")),
     __identifier(char_data("nondet")),
     __function(__identifier(char_data("nondet")),__basic(`$$size`("32"),
         char_data("__integer")))),
   [terminatorbubble,
   terminatorbubble] = __declaration(__inside(char_data("terminatorbubble"))
     ,__identifier(char_data("terminatorbubble")),
     __function(__identifier(char_data("terminatorbubble")),
       __basic(`$$size`("32"),char_data("__integer")),
       __identifier(char_data("size")),__basic(`$$size`("32"),
         char_data("__integer")))),
   [terminatorbubble,terminatorbubble,
   b] = __declaration(__inside(char_data("terminatorbubble"),
     char_data("terminatorbubble")),__identifier(char_data("b")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [terminatorbubble,terminatorbubble,
   error] = __declaration(__inside(char_data("terminatorbubble"),
     char_data("terminatorbubble")),__identifier(char_data("error")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [terminatorbubble,terminatorbubble,
   j] = __declaration(__inside(char_data("terminatorbubble"),
     char_data("terminatorbubble")),__identifier(char_data("j")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [terminatorbubble,terminatorbubble,
   lbl_2] = __statement(`$$label`("lbl_2"),
     __inside(char_data("terminatorbubble"),char_data("terminatorbubble")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("error"))),
       __expression(__constant(char_data("cst__1"))))),
   [terminatorbubble,terminatorbubble,
   lbl_28] = __statement(`$$label`("lbl_28"),
     __inside(char_data("terminatorbubble"),char_data("terminatorbubble")),
     __return()),
 [terminatorbubble,terminatorbubble,
   lbl_3] = __statement(`$$label`("lbl_3"),
   __inside(char_data("terminatorbubble"),char_data("terminatorbubble")),
   __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("b"))),
     __expression(__identifier(char_data("size"))))),
 [terminatorbubble,terminatorbubble,lbl_4] = __if(`$$label`("lbl_4"),
   __expression(__operator(char_data("__gt")),
     __expression(__identifier(char_data("size"))),
     __expression(__constant(char_data("cst__1"))))),
 [terminatorbubble,terminatorbubble,lbl_4,_false,
 lbl_27] = __statement(`$$label`("lbl_27"),
   __inside(char_data("terminatorbubble"),char_data("terminatorbubble"),
     char_data("lbl_4"),char_data("_false")),__nop()),
[terminatorbubble,terminatorbubble,lbl_4,_true,
lbl_5] = __while(`$$label`("lbl_5"),
 __expression(__operator(char_data("__ge")),
   __expression(__identifier(char_data("b"))),
   __expression(__constant(char_data("cst__6"))))),
[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,
lbl_10] = __statement(`$$label`("lbl_10"),
 __inside(char_data("terminatorbubble"),char_data("terminatorbubble"),
   char_data("lbl_4"),char_data("_true"),char_data("lbl_5")),
 __expression(__operator(char_data("__assignment")),
   __expression(__identifier(char_data("j"))),
   __expression(__constant(char_data("cst__6"))))),
[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,
lbl_11] = __statement(`$$label`("lbl_11"),
 __inside(char_data("terminatorbubble"),char_data("terminatorbubble"),
   char_data("lbl_4"),char_data("_true"),char_data("lbl_5")),
 __expression(__operator(char_data("__assignment")),
   __expression(__identifier(char_data("t"))),
   __expression(__constant(char_data("cst__1"))))),
[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,
lbl_12] = __while(`$$label`("lbl_12"),
 __expression(__operator(char_data("__le")),
   __expression(__identifier(char_data("j"))),
   __expression(__operator(char_data("__subtraction")),
     __expression(__identifier(char_data("b"))),
     __expression(__constant(char_data("cst__6")))))),
[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_12,
lbl_13] = __if(`$$label`("lbl_13"),
 __expression(__operator(char_data("__disjunction")),
   __expression(__operator(char_data("__lt")),
     __expression(__identifier(char_data("j"))),
     __expression(__constant(char_data("cst__6")))),
   __expression(__operator(char_data("__gt")),
     __expression(__identifier(char_data("j"))),
     __expression(__identifier(char_data("size")))))),
[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_12,lbl_13,_false,
 lbl_15] = __statement(`$$label`("lbl_15"),
 __inside(char_data("terminatorbubble"),char_data("terminatorbubble"),
   char_data("lbl_4"),char_data("_true"),char_data("lbl_5"),
   char_data("lbl_12"),char_data("lbl_13"),char_data("_false")),__nop()),
[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_12,lbl_13,_true,
lbl_14] = __statement(`$$label`("lbl_14"),
__inside(char_data("terminatorbubble"),char_data("terminatorbubble"),
 char_data("lbl_4"),char_data("_true"),char_data("lbl_5"),
 char_data("lbl_12"),char_data("lbl_13"),char_data("_true")),__return()),
[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_12,
lbl_16] = __if(`$$label`("lbl_16"),
__expression(__operator(char_data("__disjunction")),
__expression(__operator(char_data("__lt")),
 __expression(__operator(char_data("__addition")),
   __expression(__identifier(char_data("j"))),
   __expression(__constant(char_data("cst__6")))),
 __expression(__constant(char_data("cst__6")))),
__expression(__operator(char_data("__gt")),
 __expression(__operator(char_data("__addition")),
   __expression(__identifier(char_data("j"))),
   __expression(__constant(char_data("cst__6")))),
 __expression(__identifier(char_data("size")))))),
[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_12,lbl_16,_false,
lbl_18] = __statement(`$$label`("lbl_18"),
__inside(char_data("terminatorbubble"),char_data("terminatorbubble"),
char_data("lbl_4"),char_data("_true"),char_data("lbl_5"),
 char_data("lbl_12"),char_data("lbl_16"),char_data("_false")),__nop()),
[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_12,lbl_16,_true,
lbl_17] = __statement(`$$label`("lbl_17"),
__inside(char_data("terminatorbubble"),char_data("terminatorbubble"),
char_data("lbl_4"),char_data("_true"),char_data("lbl_5"),
char_data("lbl_12"),char_data("lbl_16"),char_data("_true")),__return()),
[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_12,
lbl_19] = __if(`$$label`("lbl_19"),
__expression(__operator(char_data("__gt")),
__expression(__operator(char_data("__funcall")),
__expression(__identifier(char_data("nondet")))),
__expression(__constant(char_data("cst__1"))))),
[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_12,lbl_19,_false,
lbl_21] = __statement(`$$label`("lbl_21"),
__inside(char_data("terminatorbubble"),char_data("terminatorbubble"),
char_data("lbl_4"),char_data("_true"),char_data("lbl_5"),
char_data("lbl_12"),char_data("lbl_19"),char_data("_false")),__nop()),
[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_12,lbl_19,_true,
lbl_20] = __statement(`$$label`("lbl_20"),
__inside(char_data("terminatorbubble"),char_data("terminatorbubble"),
char_data("lbl_4"),char_data("_true"),char_data("lbl_5"),
char_data("lbl_12"),char_data("lbl_19"),char_data("_true")),
__expression(__operator(char_data("__assignment")),
__expression(__identifier(char_data("t"))),
__expression(__identifier(char_data("j"))))),
[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_12,
lbl_22] = __statement(`$$label`("lbl_22"),
__inside(char_data("terminatorbubble"),char_data("terminatorbubble"),
char_data("lbl_4"),char_data("_true"),char_data("lbl_5"),
char_data("lbl_12")),__expression(__operator(char_data("__assignment")),
__expression(__identifier(char_data("j"))),
__expression(__operator(char_data("__addition")),
__expression(__identifier(char_data("j"))),
__expression(__constant(char_data("cst__6")))))),
[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,
lbl_23] = __if(`$$label`("lbl_23"),
__expression(__operator(char_data("__disjunction")),
__expression(__operator(char_data("__gt")),
__expression(__constant(char_data("cst__6"))),
__expression(__identifier(char_data("t")))),
__expression(__operator(char_data("__ge")),
__expression(__identifier(char_data("t"))),
__expression(__identifier(char_data("b")))))),
[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_23,_false,
lbl_25] = __statement(`$$label`("lbl_25"),
__inside(char_data("terminatorbubble"),char_data("terminatorbubble"),
char_data("lbl_4"),char_data("_true"),char_data("lbl_5"),
char_data("lbl_23"),char_data("_false")),__nop()),
[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_23,_true,
lbl_24] = __statement(`$$label`("lbl_24"),
__inside(char_data("terminatorbubble"),char_data("terminatorbubble"),
char_data("lbl_4"),char_data("_true"),char_data("lbl_5"),
char_data("lbl_23"),char_data("_true")),__return()),
[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,
lbl_26] = __statement(`$$label`("lbl_26"),
__inside(char_data("terminatorbubble"),char_data("terminatorbubble"),
char_data("lbl_4"),char_data("_true"),char_data("lbl_5")),
__expression(__operator(char_data("__assignment")),
__expression(__identifier(char_data("b"))),
__expression(__identifier(char_data("t"))))),
[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,
lbl_7] = __if(`$$label`("lbl_7"),
__expression(__operator(char_data("__le")),
__expression(__identifier(char_data("size"))),
__expression(__constant(char_data("cst__1"))))),
[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_7,_false,
lbl_9] = __statement(`$$label`("lbl_9"),
__inside(char_data("terminatorbubble"),char_data("terminatorbubble"),
char_data("lbl_4"),char_data("_true"),char_data("lbl_5"),
char_data("lbl_7"),char_data("_false")),__nop()),
[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_7,_true,
lbl_8] = __statement(`$$label`("lbl_8"),
__inside(char_data("terminatorbubble"),char_data("terminatorbubble"),
char_data("lbl_4"),char_data("_true"),char_data("lbl_5"),
char_data("lbl_7"),char_data("_true")),__return()),
[terminatorbubble,terminatorbubble,
t] = __declaration(__inside(char_data("terminatorbubble"),
char_data("terminatorbubble")),__identifier(char_data("t")),
__basic(`$$size`("32"),char_data("__integer"))))
table([terminatorbubble,terminatorbubble] = [[terminatorbubble,nondet],
[terminatorbubble,terminatorbubble],[terminatorbubble,cst__6],
[terminatorbubble,cst__1],[terminatorbubble,terminatorbubble],
[terminatorbubble,terminatorbubble,error],[terminatorbubble,
terminatorbubble,b],[terminatorbubble,terminatorbubble,j],
[terminatorbubble,terminatorbubble,t],[terminatorbubble,terminatorbubble,
lbl_2],[terminatorbubble,terminatorbubble,lbl_3],[terminatorbubble,
terminatorbubble,lbl_4,_true,lbl_5,lbl_7],[terminatorbubble,
terminatorbubble,lbl_4,_true,lbl_5],[terminatorbubble,terminatorbubble,
lbl_4],[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_7,_true,
lbl_8],[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_7,_false,
lbl_9],[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_10],
[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_11],
[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_12,lbl_13],
[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_12],
[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_12,lbl_13,_true,
lbl_14],[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_12,lbl_13,
_false,lbl_15],[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_12,
lbl_16],[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_12,lbl_16,
_true,lbl_17],[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_12,
lbl_16,_false,lbl_18],[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,
lbl_12,lbl_19],[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_12,
lbl_19,_true,lbl_20],[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,
lbl_12,lbl_19,_false,lbl_21],[terminatorbubble,terminatorbubble,lbl_4,
_true,lbl_5,lbl_12,lbl_22],[terminatorbubble,terminatorbubble,lbl_4,_true,
lbl_5,lbl_23],[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_23,
_true,lbl_24],[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_23,
_false,lbl_25],[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,
lbl_26],[terminatorbubble,terminatorbubble,lbl_4,_false,lbl_27],
[terminatorbubble,terminatorbubble,lbl_28]])
[[terminatorbubble,terminatorbubble,error],[terminatorbubble,
terminatorbubble,b],[terminatorbubble,terminatorbubble,j],
[terminatorbubble,terminatorbubble,t],[terminatorbubble,terminatorbubble,
lbl_2],[terminatorbubble,terminatorbubble,lbl_3],[terminatorbubble,
terminatorbubble,lbl_4,_true,lbl_5,lbl_7,_true,lbl_8],[terminatorbubble,
terminatorbubble,lbl_4,_true,lbl_5,lbl_7,_false,lbl_9],[terminatorbubble,
terminatorbubble,lbl_4,_true,lbl_5,lbl_10],[terminatorbubble,
terminatorbubble,lbl_4,_true,lbl_5,lbl_11],[terminatorbubble,
terminatorbubble,lbl_4,_true,lbl_5,lbl_12,lbl_13,_true,lbl_14],
[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_12,lbl_13,_false,
lbl_15],[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_12,lbl_16,
_true,lbl_17],[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_12,
lbl_16,_false,lbl_18],[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,
lbl_12,lbl_19,_true,lbl_20],[terminatorbubble,terminatorbubble,lbl_4,_true,
lbl_5,lbl_12,lbl_19,_false,lbl_21],[terminatorbubble,terminatorbubble,
lbl_4,_true,lbl_5,lbl_12,lbl_22],[terminatorbubble,terminatorbubble,lbl_4,
_true,lbl_5,lbl_23,_true,lbl_24],[terminatorbubble,terminatorbubble,lbl_4,
_true,lbl_5,lbl_23,_false,lbl_25],[terminatorbubble,terminatorbubble,lbl_4,
_true,lbl_5,lbl_26],[terminatorbubble,terminatorbubble,lbl_4,_false,
lbl_27],[terminatorbubble,terminatorbubble,lbl_28]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of size is 0
body [[terminatorbubble,nondet],[terminatorbubble,terminatorbubble],
[terminatorbubble,cst__6],[terminatorbubble,cst__1],[terminatorbubble,
terminatorbubble],[terminatorbubble,terminatorbubble,error],
[terminatorbubble,terminatorbubble,b],[terminatorbubble,terminatorbubble,
j],[terminatorbubble,terminatorbubble,t],[terminatorbubble,
terminatorbubble,lbl_2],[terminatorbubble,terminatorbubble,lbl_3],
[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_7],
[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5],[terminatorbubble,
terminatorbubble,lbl_4],[terminatorbubble,terminatorbubble,lbl_4,_true,
lbl_5,lbl_7,_true,lbl_8],[terminatorbubble,terminatorbubble,lbl_4,_true,
lbl_5,lbl_7,_false,lbl_9],[terminatorbubble,terminatorbubble,lbl_4,_true,
lbl_5,lbl_10],[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_11],
[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_12,lbl_13],
[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_12],
[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_12,lbl_13,_true,
lbl_14],[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_12,lbl_13,
_false,lbl_15],[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_12,
lbl_16],[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_12,lbl_16,
_true,lbl_17],[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_12,
lbl_16,_false,lbl_18],[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,
lbl_12,lbl_19],[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_12,
lbl_19,_true,lbl_20],[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,
lbl_12,lbl_19,_false,lbl_21],[terminatorbubble,terminatorbubble,lbl_4,
_true,lbl_5,lbl_12,lbl_22],[terminatorbubble,terminatorbubble,lbl_4,_true,
lbl_5,lbl_23],[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_23,
_true,lbl_24],[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,lbl_23,
_false,lbl_25],[terminatorbubble,terminatorbubble,lbl_4,_true,lbl_5,
lbl_26],[terminatorbubble,terminatorbubble,lbl_4,_false,lbl_27],
[terminatorbubble,terminatorbubble,lbl_28]]
collect subscripts __expression(__identifier(char_data("error")))
[error(),[],{},{}]
collect subscripts __expression(__identifier(char_data("b")))
[b(),[],{},{}]
lbl_7 __si
 counter 1/0 iteration domain {}

lbl_5 __while
 counter 1/0
lbl_4 __si
 counter 1/0 iteration domain {}

collect subscripts __expression(__identifier(char_data("j")))
[j(),[],{},{}]
collect subscripts __expression(__identifier(char_data("t")))
[t(),[],{},{}]
lbl_13 __si
 counter 1/0 iteration domain {}

lbl_12 __while
 counter 1/0
lbl_16 __si
 counter 1/0 iteration domain {}

lbl_19 __si
 counter 1/0 iteration domain {}

collect subscripts __expression(__identifier(char_data("t")))
[t(),[],{},{}]
collect subscripts __expression(__identifier(char_data("j")))
[j(),[],{},{}]
lbl_23 __si
 counter 1/0 iteration domain {}

collect subscripts __expression(__identifier(char_data("b")))
[b(),[],{},{}]
examining b
 has definitions
examining cst__1
 is a constant
examining cst__6
 is a constant
examining error
 has definitions
examining j
 has definitions
examining nondet
examining size
examining t
 has definitions
examining terminatorbubble
while remnants __ge(b,1)while remnants __le(j,b-1)to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified TRUE
to be simplified TRUE
to be simplified (size > 0)
to be simplified (0 >= size)
to be simplified ( (size > 0) && (1 > size) )
to be simplified ( (size > 0) && ( (size >= 1) && (0 >= size) ) )
to be simplified ( (size > 0) && ( (size >= 1) && (size > 0) ) )
to be simplified ( ( (size > 0) && ( (size >= 1) && (size > 0) ) ) && ( (size >= 2)
 && ( (0 > 0) || (1 > size) ) ) )
to be simplified ( ( (size > 0) && ( (size >= 1) && (size > 0) ) ) && ( ( (size >= 2)
 && ( (0 >= 0) && (size >= 1) ) ) && ( (0 > 1) || (2 > size) ) ) )
to be simplified ( ( (size > 0) && ( (size >= 1) && (size > 0) ) ) && ( ( (size >= 2)
 && ( (0 >= 0) && (size >= 1) ) ) && ( (1 >= 0) && (size >= 2) ) ) )
to be simplified ( ( (size > 0) && ( (size >= 1) && (size > 0) ) ) && ( ( (size >= 2)
 && ( (0 >= 0) && (size >= 1) ) ) && ( (1 >= 0) && (size >= 2) ) ) )
to be simplified ( ( (size > 0) && ( (size >= 1) && (size > 0) ) ) && ( (2 > size)
 && ( (1 > 0) || (0 >= size) ) ) )
to be simplified ( ( (size > 0) && ( (size >= 1) && (size > 0) ) ) && ( (2 > size)
 && ( (0 >= 1) && (size > 0) ) ) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (b >= j+1)
to be simplified (j+1 > b)
to be simplified (b >= j+1)
to be simplified ( (b >= j+1) && ( (1 > j) || (j > size) ) )
to be simplified ( (b >= j+1) && ( (j >= 1) && (size >= j) ) )
to be simplified ( ( (b >= j+1) && ( (j >= 1) && (size >= j) ) ) && ( (0 > j)
 || (j+1 > size) ) )
to be simplified ( ( (b >= j+1) && ( (j >= 1) && (size >= j) ) ) && ( (j >= 0)
 && (size >= j+1) ) )
to be simplified ( ( (b >= j+1) && ( (j >= 1) && (size >= j) ) ) && ( (j >= 0)
 && (size >= j+1) ) )
to be simplified ( ( (b >= j+1) && ( (j >= 1) && (size >= j) ) ) && ( (j >= 0)
 && (size >= j+1) ) )
to be simplified ( (j+1 > b) && ( (1 > t) || (t >= b) ) )
to be simplified ( (j+1 > b) && ( (t >= 1) && (b > t) ) )
to be simplified ( (1 > j) || (j > size) )
to be simplified ( (j >= 1) && (size >= j) )
to be simplified ( (1 > j) || (j > size) )
to be simplified ( (j >= 1) && (size >= j) )
to be simplified ( (0 > j) || (j+1 > size) )
to be simplified ( (j >= 0) && (size >= j+1) )
to be simplified ( (0 > j) || (j+1 > size) )
to be simplified ( (j >= 0) && (size >= j+1) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified ( (1 > t) || (t >= b) )
to be simplified ( (t >= 1) && (b > t) )
to be simplified ( (1 > t) || (t >= b) )
to be simplified ( (t >= 1) && (b > t) )
to be simplified (size > 0)
to be simplified (0 >= size)
to be simplified (size > 0)
to be simplified (0 >= size)
to be simplified (0 >= size)
to be simplified (b >= 1)
to be simplified (1 > b)
to be simplified (b >= 1)
to be simplified (1 > b)
to be simplified ( (b >= 1) && (0 >= size) )
to be simplified ( (b >= 1) && (size > 0) )
to be simplified (0 >= size)
to be simplified (size > 0)
to be simplified (0 >= size)
to be simplified (size > 0)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (1 > b)
to be simplified ( (b >= 1) && (0 >= size) )
to be simplified ( (b >= 1) && (size > 0) )
to be simplified ( ( (b >= 1) && (size > 0) ) && ( (b >= 2) && ( (0 > 0) || 
(1 > size) ) ) )
to be simplified ( ( (b >= 1) && (size > 0) ) && ( ( (b >= 2) && ( (0 >= 0) && 
(size >= 1) ) ) && ( (0 > 1) || (2 > size) ) ) )
to be simplified ( ( (b >= 1) && (size > 0) ) && ( ( (b >= 2) && ( (0 >= 0) && 
(size >= 1) ) ) && ( (1 >= 0) && (size >= 2) ) ) )
to be simplified ( ( (b >= 1) && (size > 0) ) && ( ( (b >= 2) && ( (0 >= 0) && 
(size >= 1) ) ) && ( (1 >= 0) && (size >= 2) ) ) )
to be simplified ( ( (b >= 1) && (size > 0) ) && ( (2 > b) && ( (1 > 0) || (0 >= b)
 ) ) )
to be simplified ( ( (b >= 1) && (size > 0) ) && ( (2 > b) && ( (0 >= 1) && 
(b > 0) ) ) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified ( (b >= j+1) && ( (1 > j) || (j > size) ) )
to be simplified ( ( (b >= j+1) && ( (j >= 1) && (size >= j) ) ) && ( (0 > j)
 || (j+1 > size) ) )
to be simplified ( ( (b >= j+1) && ( (j >= 1) && (size >= j) ) ) && ( (j >= 0)
 && (size >= j+1) ) )
to be simplified ( ( (b >= j+1) && ( (j >= 1) && (size >= j) ) ) && ( (j >= 0)
 && (size >= j+1) ) )
to be simplified ( (j+1 > b) && ( (1 > t) || (t >= b) ) )
to be simplified ( (j+1 > b) && ( (t >= 1) && (b > t) ) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE

FrontEnd version J.3
qualif speedSingleSingle
inside declaration [speedSingleSingle,nondet]
inside declaration [speedSingleSingle,speedSingleSingle]
inside declaration [speedSingleSingle,speedSingleSingle,x]
inside declaration [speedSingleSingle,cst__1]
table([speedSingleSingle,
cst__1] = __declaration(__inside(char_data("speedSingleSingle")),
  __constant(`$$value`("0"),char_data("cst__1")),
  __basic(char_data("__integer"))),
   [speedSingleSingle,
   nondet] = __declaration(__inside(char_data("speedSingleSingle")),
     __identifier(char_data("nondet")),
     __function(__identifier(char_data("nondet")),__basic(`$$size`("32"),
         char_data("__integer")))),
   [speedSingleSingle,
   speedSingleSingle] = __declaration(__inside(char_data("speedSingleSingle"
   )),__identifier(char_data("speedSingleSingle")),
     __function(__identifier(char_data("speedSingleSingle")),
       __basic(`$$size`("32"),char_data("__integer")),
       __identifier(char_data("n")),__basic(`$$size`("32"),
         char_data("__integer")))),
   [speedSingleSingle,speedSingleSingle,
   lbl_2] = __statement(`$$label`("lbl_2"),
     __inside(char_data("speedSingleSingle"),
       char_data("speedSingleSingle")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("x"))),
       __expression(__constant(char_data("cst__1"))))),
   [speedSingleSingle,speedSingleSingle,
     lbl_3] = __while(`$$label`("lbl_3"),
     __expression(__operator(char_data("__lt")),
       __expression(__identifier(char_data("x"))),
       __expression(__identifier(char_data("n"))))),
   [speedSingleSingle,speedSingleSingle,lbl_3,
   lbl_4] = __if(`$$label`("lbl_4"),
     __expression(__operator(char_data("__gt")),
       __expression(__operator(char_data("__funcall")),
         __expression(__identifier(char_data("nondet")))),
       __expression(__constant(char_data("cst__1"))))),
   [speedSingleSingle,speedSingleSingle,lbl_3,lbl_4,_false,
   lbl_6] = __statement(`$$label`("lbl_6"),
     __inside(char_data("speedSingleSingle"),
       char_data("speedSingleSingle"),char_data("lbl_3"),
       char_data("lbl_4"),char_data("_false")),
     __expression(__operator(char_data("_post_incr")),
       __expression(__identifier(char_data("x"))))),
   [speedSingleSingle,speedSingleSingle,lbl_3,lbl_4,_true,
   lbl_5] = __statement(`$$label`("lbl_5"),
     __inside(char_data("speedSingleSingle"),
       char_data("speedSingleSingle"),char_data("lbl_3"),
       char_data("lbl_4"),char_data("_true")),
     __expression(__operator(char_data("_post_incr")),
       __expression(__identifier(char_data("x"))))),
   [speedSingleSingle,speedSingleSingle,
   lbl_7] = __statement(`$$label`("lbl_7"),
     __inside(char_data("speedSingleSingle"),
       char_data("speedSingleSingle")),__return()),
 [speedSingleSingle,speedSingleSingle,
 x] = __declaration(__inside(char_data("speedSingleSingle"),
   char_data("speedSingleSingle")),__identifier(char_data("x")),
   __basic(`$$size`("32"),char_data("__integer"))))
table([speedSingleSingle,speedSingleSingle] = [[speedSingleSingle,nondet],
[speedSingleSingle,speedSingleSingle],[speedSingleSingle,cst__1],
[speedSingleSingle,speedSingleSingle],[speedSingleSingle,speedSingleSingle,
  x],[speedSingleSingle,speedSingleSingle,lbl_2],[speedSingleSingle,
  speedSingleSingle,lbl_3,lbl_4],[speedSingleSingle,speedSingleSingle,
lbl_3],[speedSingleSingle,speedSingleSingle,lbl_3,lbl_4,_true,lbl_5],
[speedSingleSingle,speedSingleSingle,lbl_3,lbl_4,_false,lbl_6],
[speedSingleSingle,speedSingleSingle,lbl_7]])
[[speedSingleSingle,speedSingleSingle,x],[speedSingleSingle,
  speedSingleSingle,lbl_2],[speedSingleSingle,speedSingleSingle,lbl_3,
  lbl_4,_true,lbl_5],[speedSingleSingle,speedSingleSingle,lbl_3,lbl_4,
  _false,lbl_6],[speedSingleSingle,speedSingleSingle,lbl_7]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of n is 0
body [[speedSingleSingle,nondet],[speedSingleSingle,speedSingleSingle],
[speedSingleSingle,cst__1],[speedSingleSingle,speedSingleSingle],
[speedSingleSingle,speedSingleSingle,x],[speedSingleSingle,
  speedSingleSingle,lbl_2],[speedSingleSingle,speedSingleSingle,lbl_3,
lbl_4],[speedSingleSingle,speedSingleSingle,lbl_3],[speedSingleSingle,
  speedSingleSingle,lbl_3,lbl_4,_true,lbl_5],[speedSingleSingle,
  speedSingleSingle,lbl_3,lbl_4,_false,lbl_6],[speedSingleSingle,
  speedSingleSingle,lbl_7]]
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
lbl_4 __si
 counter 1/0 iteration domain {}

lbl_3 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
examining cst__1
 is a constant
examining n
examining nondet
examining speedSingleSingle
examining x
 has definitions
while remnants __lt(x,n)to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified TRUE
to be simplified TRUE
to be simplified (0 >= n)
to be simplified (n > 0)
to be simplified (n > 0)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (n > x)
to be simplified (x >= n)
to be simplified (x >= n)
to be simplified (n > x)
to be simplified (n > x)
to be simplified (n > x)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (x >= n)
to be simplified (n > x)
to be simplified (n > x)
to be simplified TRUE
to be simplified TRUE
to be simplified (x >= n)
to be simplified (n > x)
to be simplified (n > x)
to be simplified TRUE

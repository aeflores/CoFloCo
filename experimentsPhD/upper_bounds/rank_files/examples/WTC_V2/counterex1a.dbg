FrontEnd version J.3
qualif counterex1a
inside declaration [counterex1a,nondet]
inside declaration [counterex1a,counterex1a]
inside declaration [counterex1a,cst__6]
inside declaration [counterex1a,cst__2]
table([counterex1a,
counterex1a] = __declaration(__inside(char_data("counterex1a")),
  __identifier(char_data("counterex1a")),
  __function(__identifier(char_data("counterex1a")),__basic(`$$size`("32"),
      char_data("__integer")),__identifier(char_data("n")),
    __basic(`$$size`("32"),char_data("__integer")),
    __identifier(char_data("b")),__basic(`$$size`("32"),
      char_data("__integer")),__identifier(char_data("x")),
    __basic(`$$size`("32"),char_data("__integer")),
    __identifier(char_data("y")),__basic(`$$size`("32"),
      char_data("__integer")))),
   [counterex1a,counterex1a,lbl_1] = __while(`$$label`("lbl_1"),
     __expression(__operator(char_data("__conjunction")),
       __expression(__operator(char_data("__conjunction")),
         __expression(__operator(char_data("__ge")),
           __expression(__identifier(char_data("x"))),
           __expression(__constant(char_data("cst__2")))),
         __expression(__operator(char_data("__le")),
           __expression(__constant(char_data("cst__2"))),
           __expression(__identifier(char_data("y"))))),
       __expression(__operator(char_data("__le")),
         __expression(__identifier(char_data("y"))),
         __expression(__identifier(char_data("n")))))),
   [counterex1a,counterex1a,lbl_1,lbl_3] = __if(`$$label`("lbl_3"),
     __expression(__operator(char_data("__eq")),
       __expression(__identifier(char_data("b"))),
       __expression(__constant(char_data("cst__2"))))),
   [counterex1a,counterex1a,lbl_1,lbl_3,_false,
   lbl_10] = __if(`$$label`("lbl_10"),
     __expression(__operator(char_data("__gt")),
       __expression(__operator(char_data("__funcall")),
         __expression(__identifier(char_data("nondet")))),
       __expression(__constant(char_data("cst__2"))))),
   [counterex1a,counterex1a,lbl_1,lbl_3,_false,lbl_10,_false,
   lbl_13] = __statement(`$$label`("lbl_13"),
     __inside(char_data("counterex1a"),char_data("counterex1a"),
       char_data("lbl_1"),char_data("lbl_3"),char_data("_false"),
       char_data("lbl_10"),char_data("_false")),__nop()),
 [counterex1a,counterex1a,lbl_1,lbl_3,_false,lbl_10,_true,
 lbl_11] = __statement(`$$label`("lbl_11"),
     __inside(char_data("counterex1a"),char_data("counterex1a"),
     char_data("lbl_1"),char_data("lbl_3"),char_data("_false"),
     char_data("lbl_10"),char_data("_true")),
   __expression(__operator(char_data("_post_decr")),
     __expression(__identifier(char_data("x"))))),
 [counterex1a,counterex1a,lbl_1,lbl_3,_false,lbl_10,_true,
 lbl_12] = __statement(`$$label`("lbl_12"),
     __inside(char_data("counterex1a"),char_data("counterex1a"),
     char_data("lbl_1"),char_data("lbl_3"),char_data("_false"),
     char_data("lbl_10"),char_data("_true")),
   __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("b"))),
     __expression(__constant(char_data("cst__2"))))),
 [counterex1a,counterex1a,lbl_1,lbl_3,_false,
 lbl_9] = __statement(`$$label`("lbl_9"),__inside(char_data("counterex1a"),
     char_data("counterex1a"),char_data("lbl_1"),char_data("lbl_3"),
     char_data("_false")),__expression(__operator(char_data("_post_decr")),
     __expression(__identifier(char_data("y"))))),
 [counterex1a,counterex1a,lbl_1,lbl_3,_true,
 lbl_4] = __statement(`$$label`("lbl_4"),__inside(char_data("counterex1a"),
     char_data("counterex1a"),char_data("lbl_1"),char_data("lbl_3"),
     char_data("_true")),__expression(__operator(char_data("_post_incr")),
     __expression(__identifier(char_data("y"))))),
 [counterex1a,counterex1a,lbl_1,lbl_3,_true,
   lbl_5] = __if(`$$label`("lbl_5"),
   __expression(__operator(char_data("__gt")),
     __expression(__operator(char_data("__funcall")),
       __expression(__identifier(char_data("nondet")))),
     __expression(__constant(char_data("cst__2"))))),
 [counterex1a,counterex1a,lbl_1,lbl_3,_true,lbl_5,_false,
 lbl_8] = __statement(`$$label`("lbl_8"),__inside(char_data("counterex1a"),
     char_data("counterex1a"),char_data("lbl_1"),char_data("lbl_3"),
     char_data("_true"),char_data("lbl_5"),char_data("_false")),__nop()),
[counterex1a,counterex1a,lbl_1,lbl_3,_true,lbl_5,_true,
lbl_7] = __statement(`$$label`("lbl_7"),__inside(char_data("counterex1a"),
   char_data("counterex1a"),char_data("lbl_1"),char_data("lbl_3"),
   char_data("_true"),char_data("lbl_5"),char_data("_true")),
 __expression(__operator(char_data("__assignment")),
   __expression(__identifier(char_data("b"))),
   __expression(__constant(char_data("cst__6"))))),
[counterex1a,counterex1a,lbl_14] = __statement(`$$label`("lbl_14"),
 __inside(char_data("counterex1a"),char_data("counterex1a")),__return()),
[counterex1a,cst__2] = __declaration(__inside(char_data("counterex1a")),
__constant(`$$value`("0"),char_data("cst__2")),
__basic(char_data("__integer"))),
[counterex1a,cst__6] = __declaration(__inside(char_data("counterex1a")),
__constant(`$$value`("1"),char_data("cst__6")),
__basic(char_data("__integer"))),
[counterex1a,nondet] = __declaration(__inside(char_data("counterex1a")),
__identifier(char_data("nondet")),
__function(__identifier(char_data("nondet")),__basic(`$$size`("32"),
   char_data("__integer")))))
table([counterex1a,counterex1a] = [[counterex1a,nondet],[counterex1a,
counterex1a],[counterex1a,cst__6],[counterex1a,cst__2],[counterex1a,
counterex1a],[counterex1a,counterex1a,lbl_1,lbl_3],[counterex1a,
counterex1a,lbl_1],[counterex1a,counterex1a,lbl_1,lbl_3,_true,lbl_4],
[counterex1a,counterex1a,lbl_1,lbl_3,_true,lbl_5],[counterex1a,counterex1a,
lbl_1,lbl_3,_true,lbl_5,_true,lbl_7],[counterex1a,counterex1a,lbl_1,lbl_3,
_true,lbl_5,_false,lbl_8],[counterex1a,counterex1a,lbl_1,lbl_3,_false,
lbl_9],[counterex1a,counterex1a,lbl_1,lbl_3,_false,lbl_10],[counterex1a,
counterex1a,lbl_1,lbl_3,_false,lbl_10,_true,lbl_11],[counterex1a,
counterex1a,lbl_1,lbl_3,_false,lbl_10,_true,lbl_12],[counterex1a,
counterex1a,lbl_1,lbl_3,_false,lbl_10,_false,lbl_13],[counterex1a,
counterex1a,lbl_14]])
[[counterex1a,counterex1a,lbl_1,lbl_3,_true,lbl_4],[counterex1a,
counterex1a,lbl_1,lbl_3,_true,lbl_5,_true,lbl_7],[counterex1a,counterex1a,
lbl_1,lbl_3,_true,lbl_5,_false,lbl_8],[counterex1a,counterex1a,lbl_1,lbl_3,
_false,lbl_9],[counterex1a,counterex1a,lbl_1,lbl_3,_false,lbl_10,_true,
lbl_11],[counterex1a,counterex1a,lbl_1,lbl_3,_false,lbl_10,_true,lbl_12],
[counterex1a,counterex1a,lbl_1,lbl_3,_false,lbl_10,_false,lbl_13],
[counterex1a,counterex1a,lbl_14]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of n is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of b is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of x is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of y is 0
body [[counterex1a,nondet],[counterex1a,counterex1a],[counterex1a,cst__6],
[counterex1a,cst__2],[counterex1a,counterex1a],[counterex1a,counterex1a,
lbl_1,lbl_3],[counterex1a,counterex1a,lbl_1],[counterex1a,counterex1a,
lbl_1,lbl_3,_true,lbl_4],[counterex1a,counterex1a,lbl_1,lbl_3,_true,lbl_5],
[counterex1a,counterex1a,lbl_1,lbl_3,_true,lbl_5,_true,lbl_7],[counterex1a,
counterex1a,lbl_1,lbl_3,_true,lbl_5,_false,lbl_8],[counterex1a,counterex1a,
lbl_1,lbl_3,_false,lbl_9],[counterex1a,counterex1a,lbl_1,lbl_3,_false,
lbl_10],[counterex1a,counterex1a,lbl_1,lbl_3,_false,lbl_10,_true,lbl_11],
[counterex1a,counterex1a,lbl_1,lbl_3,_false,lbl_10,_true,lbl_12],
[counterex1a,counterex1a,lbl_1,lbl_3,_false,lbl_10,_false,lbl_13],
[counterex1a,counterex1a,lbl_14]]
lbl_3 __si
 counter 1/0 iteration domain {}

lbl_1 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("y")))
[y(),[],{},{}]
lbl_5 __si
 counter 1/0 iteration domain {}

collect subscripts __expression(__identifier(char_data("b")))
[b(),[],{},{}]
collect subscripts __expression(__identifier(char_data("y")))
[y(),[],{},{}]
lbl_10 __si
 counter 1/0 iteration domain {}

collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
collect subscripts __expression(__identifier(char_data("b")))
[b(),[],{},{}]
examining b
examining counterex1a
examining cst__2
 is a constant
examining cst__6
 is a constant
examining n
examining nondet
examining x
examining y
while remnants __conjunction(__conjunction(__ge(x,0),__le(0,y)),__le(y,
n))to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified ( ( (0 > x) || (0 > y) ) || (y > n) )
to be simplified ( ( ( (x >= 0) && (y >= 0) ) && (n >= y) ) && (b != 0) )
to be simplified ( ( ( (x >= 0) && (y >= 0) ) && (n >= y) ) && (b != 0) )
to be simplified ( ( ( (x >= 0) && (y >= 0) ) && (n >= y) ) && (b = 0) )
to be simplified ( ( ( (x >= 0) && (y >= 0) ) && (n >= y) ) && (b = 0) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified ( ( (0 > x) || (0 > y) ) || (y > n) )
to be simplified ( ( ( (x >= 0) && (y >= 0) ) && (n >= y) ) && (b != 0) )
to be simplified ( ( ( (x >= 0) && (y >= 0) ) && (n >= y) ) && (b != 0) )
to be simplified ( ( ( (x >= 0) && (y >= 0) ) && (n >= y) ) && (b = 0) )
to be simplified ( ( ( (x >= 0) && (y >= 0) ) && (n >= y) ) && (b = 0) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified ( ( (0 > x) || (0 > y) ) || (y > n) )
to be simplified ( ( ( (x >= 0) && (y >= 0) ) && (n >= y) ) && (b != 0) )
to be simplified ( ( ( (x >= 0) && (y >= 0) ) && (n >= y) ) && (b != 0) )
to be simplified ( ( ( (x >= 0) && (y >= 0) ) && (n >= y) ) && (b = 0) )
to be simplified ( ( ( (x >= 0) && (y >= 0) ) && (n >= y) ) && (b = 0) )
to be simplified TRUE
to be simplified ( ( (x >= 0) && (y >= 0) ) && (n >= y) )
to be simplified ( ( (0 > x) || (0 > y) ) || (y > n) )
to be simplified ( ( (0 > x) || (0 > y) ) || (y > n) )
to be simplified ( ( (x >= 0) && (y >= 0) ) && (n >= y) )
to be simplified ( ( ( (x >= 0) && (y >= 0) ) && (n >= y) ) && (b != 0) )
to be simplified ( ( ( (x >= 0) && (y >= 0) ) && (n >= y) ) && (b != 0) )
to be simplified ( ( ( (x >= 0) && (y >= 0) ) && (n >= y) ) && (b = 0) )
to be simplified ( ( ( (x >= 0) && (y >= 0) ) && (n >= y) ) && (b = 0) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (b = 0)
to be simplified (b != 0)
to be simplified (b = 0)
to be simplified (b != 0)
to be simplified (b = 0)
to be simplified (b = 0)
to be simplified (b != 0)
to be simplified (b != 0)
to be simplified (b != 0)
to be simplified (b != 0)
to be simplified (b = 0)
to be simplified (b = 0)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified ( ( (0 > x) || (0 > y) ) || (y > n) )
to be simplified ( ( ( (x >= 0) && (y >= 0) ) && (n >= y) ) && (b != 0) )
to be simplified ( ( ( (x >= 0) && (y >= 0) ) && (n >= y) ) && (b != 0) )
to be simplified ( ( ( (x >= 0) && (y >= 0) ) && (n >= y) ) && (b = 0) )
to be simplified ( ( ( (x >= 0) && (y >= 0) ) && (n >= y) ) && (b = 0) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified ( ( (0 > x) || (0 > y) ) || (y > n) )
to be simplified ( ( ( (x >= 0) && (y >= 0) ) && (n >= y) ) && (b != 0) )
to be simplified ( ( ( (x >= 0) && (y >= 0) ) && (n >= y) ) && (b != 0) )
to be simplified ( ( ( (x >= 0) && (y >= 0) ) && (n >= y) ) && (b = 0) )
to be simplified ( ( ( (x >= 0) && (y >= 0) ) && (n >= y) ) && (b = 0) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE

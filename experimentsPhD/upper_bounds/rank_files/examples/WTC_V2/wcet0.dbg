FrontEnd version J.3
qualif wcet0
inside declaration [wcet0,nondet]
inside declaration [wcet0,wcet0]
inside declaration [wcet0,wcet0,i]
inside declaration [wcet0,wcet0,j]
inside declaration [wcet0,cst__5]
inside declaration [wcet0,cst__1]
table([wcet0,cst__1] = __declaration(__inside(char_data("wcet0")),
  __constant(`$$value`("0"),char_data("cst__1")),
  __basic(char_data("__integer"))),
   [wcet0,cst__5] = __declaration(__inside(char_data("wcet0")),
     __constant(`$$value`("1"),char_data("cst__5")),
     __basic(char_data("__integer"))),
   [wcet0,nondet] = __declaration(__inside(char_data("wcet0")),
     __identifier(char_data("nondet")),
     __function(__identifier(char_data("nondet")),__basic(`$$size`("32"),
         char_data("__integer")))),
   [wcet0,wcet0] = __declaration(__inside(char_data("wcet0")),
     __identifier(char_data("wcet0")),
     __function(__identifier(char_data("wcet0")),__basic(`$$size`("32"),
         char_data("__integer")),__identifier(char_data("n")),
       __basic(`$$size`("32"),char_data("__integer")))),
   [wcet0,wcet0,i] = __declaration(__inside(char_data("wcet0"),
     char_data("wcet0")),__identifier(char_data("i")),
       __basic(`$$size`("32"),char_data("__integer"))),
   [wcet0,wcet0,j] = __declaration(__inside(char_data("wcet0"),
     char_data("wcet0")),__identifier(char_data("j")),
       __basic(`$$size`("32"),char_data("__integer"))),
   [wcet0,wcet0,lbl_18] = __statement(`$$label`("lbl_18"),
     __inside(char_data("wcet0"),char_data("wcet0")),__return()),
 [wcet0,wcet0,lbl_2] = __statement(`$$label`("lbl_2"),
   __inside(char_data("wcet0"),char_data("wcet0")),
   __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("j"))),
     __expression(__constant(char_data("cst__1"))))),
 [wcet0,wcet0,lbl_3] = __statement(`$$label`("lbl_3"),
   __inside(char_data("wcet0"),char_data("wcet0")),
   __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("i"))),
     __expression(__identifier(char_data("n"))))),
 [wcet0,wcet0,lbl_4] = __if(`$$label`("lbl_4"),
   __expression(__operator(char_data("__ge")),
     __expression(__identifier(char_data("n"))),
     __expression(__constant(char_data("cst__5"))))),
 [wcet0,wcet0,lbl_4,_false,lbl_17] = __statement(`$$label`("lbl_17"),
   __inside(char_data("wcet0"),char_data("wcet0"),char_data("lbl_4"),
     char_data("_false")),__nop()),
[wcet0,wcet0,lbl_4,_true,lbl_6] = __doWhile(`$$label`("lbl_6"),
 __expression(__operator(char_data("__gt")),
   __expression(__identifier(char_data("i"))),
   __expression(__constant(char_data("cst__1"))))),
[wcet0,wcet0,lbl_4,_true,lbl_6,lbl_16] = __statement(`$$label`("lbl_16"),
 __inside(char_data("wcet0"),char_data("wcet0"),char_data("lbl_4"),
   char_data("_true"),char_data("lbl_6")),
 __expression(__operator(char_data("_post_decr")),
   __expression(__identifier(char_data("i"))))),
[wcet0,wcet0,lbl_4,_true,lbl_6,lbl_7] = __if(`$$label`("lbl_7"),
 __expression(__operator(char_data("__gt")),
   __expression(__operator(char_data("__funcall")),
     __expression(__identifier(char_data("nondet")))),
   __expression(__constant(char_data("cst__1"))))),
[wcet0,wcet0,lbl_4,_true,lbl_6,lbl_7,_false,
lbl_12] = __statement(`$$label`("lbl_12"),__inside(char_data("wcet0"),
   char_data("wcet0"),char_data("lbl_4"),char_data("_true"),
   char_data("lbl_6"),char_data("lbl_7"),char_data("_false")),
 __expression(__operator(char_data("_post_decr")),
   __expression(__identifier(char_data("j"))))),
[wcet0,wcet0,lbl_4,_true,lbl_6,lbl_7,_false,
lbl_13] = __if(`$$label`("lbl_13"),
   __expression(__operator(char_data("__le")),
   __expression(__identifier(char_data("j"))),
   __expression(__operator(char_data("__subtraction")),
     __expression(__identifier(char_data("n")))))),
[wcet0,wcet0,lbl_4,_true,lbl_6,lbl_7,_false,lbl_13,_false,
lbl_15] = __statement(`$$label`("lbl_15"),__inside(char_data("wcet0"),
   char_data("wcet0"),char_data("lbl_4"),char_data("_true"),
   char_data("lbl_6"),char_data("lbl_7"),char_data("_false"),
   char_data("lbl_13"),char_data("_false")),__nop()),
[wcet0,wcet0,lbl_4,_true,lbl_6,lbl_7,_false,lbl_13,_true,
lbl_14] = __statement(`$$label`("lbl_14"),__inside(char_data("wcet0"),
 char_data("wcet0"),char_data("lbl_4"),char_data("_true"),
   char_data("lbl_6"),char_data("lbl_7"),char_data("_false"),
 char_data("lbl_13"),char_data("_true")),
__expression(__operator(char_data("__assignment")),
 __expression(__identifier(char_data("j"))),
 __expression(__constant(char_data("cst__1"))))),
[wcet0,wcet0,lbl_4,_true,lbl_6,lbl_7,_true,
lbl_8] = __statement(`$$label`("lbl_8"),__inside(char_data("wcet0"),
 char_data("wcet0"),char_data("lbl_4"),char_data("_true"),
   char_data("lbl_6"),char_data("lbl_7"),char_data("_true")),
__expression(__operator(char_data("_post_incr")),
 __expression(__identifier(char_data("j"))))),
[wcet0,wcet0,lbl_4,_true,lbl_6,lbl_7,_true,
lbl_9] = __if(`$$label`("lbl_9"),
 __expression(__operator(char_data("__ge")),
 __expression(__identifier(char_data("j"))),
 __expression(__identifier(char_data("n"))))),
[wcet0,wcet0,lbl_4,_true,lbl_6,lbl_7,_true,lbl_9,_false,
lbl_11] = __statement(`$$label`("lbl_11"),__inside(char_data("wcet0"),
 char_data("wcet0"),char_data("lbl_4"),char_data("_true"),
   char_data("lbl_6"),char_data("lbl_7"),char_data("_true"),
 char_data("lbl_9"),char_data("_false")),__nop()),
[wcet0,wcet0,lbl_4,_true,lbl_6,lbl_7,_true,lbl_9,_true,
lbl_10] = __statement(`$$label`("lbl_10"),__inside(char_data("wcet0"),
char_data("wcet0"),char_data("lbl_4"),char_data("_true"),
char_data("lbl_6"),char_data("lbl_7"),char_data("_true"),
char_data("lbl_9"),char_data("_true")),
__expression(__operator(char_data("__assignment")),
__expression(__identifier(char_data("j"))),
__expression(__constant(char_data("cst__1"))))))
table([wcet0,wcet0] = [[wcet0,nondet],[wcet0,wcet0],[wcet0,cst__5],[wcet0,
cst__1],[wcet0,wcet0],[wcet0,wcet0,i],[wcet0,wcet0,j],[wcet0,wcet0,lbl_2],
[wcet0,wcet0,lbl_3],[wcet0,wcet0,lbl_4,_true,lbl_6,lbl_7],[wcet0,wcet0,
lbl_4,_true,lbl_6],[wcet0,wcet0,lbl_4],[wcet0,wcet0,lbl_4,_true,lbl_6,
lbl_7,_true,lbl_8],[wcet0,wcet0,lbl_4,_true,lbl_6,lbl_7,_true,lbl_9],
[wcet0,wcet0,lbl_4,_true,lbl_6,lbl_7,_true,lbl_9,_true,lbl_10],[wcet0,
wcet0,lbl_4,_true,lbl_6,lbl_7,_true,lbl_9,_false,lbl_11],[wcet0,wcet0,
lbl_4,_true,lbl_6,lbl_7,_false,lbl_12],[wcet0,wcet0,lbl_4,_true,lbl_6,
lbl_7,_false,lbl_13],[wcet0,wcet0,lbl_4,_true,lbl_6,lbl_7,_false,lbl_13,
_true,lbl_14],[wcet0,wcet0,lbl_4,_true,lbl_6,lbl_7,_false,lbl_13,_false,
lbl_15],[wcet0,wcet0,lbl_4,_true,lbl_6,lbl_16],[wcet0,wcet0,lbl_4,_false,
lbl_17],[wcet0,wcet0,lbl_18]])
[[wcet0,wcet0,i],[wcet0,wcet0,j],[wcet0,wcet0,lbl_2],[wcet0,wcet0,lbl_3],
[wcet0,wcet0,lbl_4,_true,lbl_6,lbl_7,_true,lbl_8],[wcet0,wcet0,lbl_4,_true,
lbl_6,lbl_7,_true,lbl_9,_true,lbl_10],[wcet0,wcet0,lbl_4,_true,lbl_6,lbl_7,
_true,lbl_9,_false,lbl_11],[wcet0,wcet0,lbl_4,_true,lbl_6,lbl_7,_false,
lbl_12],[wcet0,wcet0,lbl_4,_true,lbl_6,lbl_7,_false,lbl_13,_true,lbl_14],
[wcet0,wcet0,lbl_4,_true,lbl_6,lbl_7,_false,lbl_13,_false,lbl_15],[wcet0,
wcet0,lbl_4,_true,lbl_6,lbl_16],[wcet0,wcet0,lbl_4,_false,lbl_17],[wcet0,
wcet0,lbl_18]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of n is 0
body [[wcet0,nondet],[wcet0,wcet0],[wcet0,cst__5],[wcet0,cst__1],[wcet0,
wcet0],[wcet0,wcet0,i],[wcet0,wcet0,j],[wcet0,wcet0,lbl_2],[wcet0,wcet0,
lbl_3],[wcet0,wcet0,lbl_4,_true,lbl_6,lbl_7],[wcet0,wcet0,lbl_4,_true,
lbl_6],[wcet0,wcet0,lbl_4],[wcet0,wcet0,lbl_4,_true,lbl_6,lbl_7,_true,
lbl_8],[wcet0,wcet0,lbl_4,_true,lbl_6,lbl_7,_true,lbl_9],[wcet0,wcet0,
lbl_4,_true,lbl_6,lbl_7,_true,lbl_9,_true,lbl_10],[wcet0,wcet0,lbl_4,_true,
lbl_6,lbl_7,_true,lbl_9,_false,lbl_11],[wcet0,wcet0,lbl_4,_true,lbl_6,
lbl_7,_false,lbl_12],[wcet0,wcet0,lbl_4,_true,lbl_6,lbl_7,_false,lbl_13],
[wcet0,wcet0,lbl_4,_true,lbl_6,lbl_7,_false,lbl_13,_true,lbl_14],[wcet0,
wcet0,lbl_4,_true,lbl_6,lbl_7,_false,lbl_13,_false,lbl_15],[wcet0,wcet0,
lbl_4,_true,lbl_6,lbl_16],[wcet0,wcet0,lbl_4,_false,lbl_17],[wcet0,wcet0,
lbl_18]]
collect subscripts __expression(__identifier(char_data("j")))
[j(),[],{},{}]
collect subscripts __expression(__identifier(char_data("i")))
[i(),[],{},{}]
lbl_7 __si
 counter 1/0 iteration domain {}

lbl_4 __si
 counter 1/0 iteration domain {}

collect subscripts __expression(__identifier(char_data("j")))
[j(),[],{},{}]
lbl_9 __si
 counter 1/0 iteration domain {}

collect subscripts __expression(__identifier(char_data("j")))
[j(),[],{},{}]
collect subscripts __expression(__identifier(char_data("j")))
[j(),[],{},{}]
lbl_13 __si
 counter 1/0 iteration domain {}

collect subscripts __expression(__identifier(char_data("j")))
[j(),[],{},{}]
collect subscripts __expression(__identifier(char_data("i")))
[i(),[],{},{}]
examining cst__1
 is a constant
examining cst__5
 is a constant
examining i
 has definitions
examining j
 has definitions
examining n
examining nondet
examining wcet0
to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified TRUE
to be simplified TRUE
to be simplified (n >= 1)
to be simplified (1 > n)
to be simplified (n >= 1)
to be simplified ( (n >= 1) && (n > 1) )
to be simplified ( (n >= 1) && ( (n > 1) && (1 >= n) ) )
to be simplified ( (n >= 1) && ( (1 >= n) && (n > 1) ) )
to be simplified ( (n >= 1) && (1 >= n) )
to be simplified ( (n >= 1) && (n > 1) )
to be simplified ( (n >= 1) && ( (n > 1) && (1 >= n) ) )
to be simplified ( (n >= 1) && ( (1 >= n) && (n > 1) ) )
to be simplified ( (n >= 1) && (1 >= n) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (i > 1)
to be simplified (1 >= i)
to be simplified TRUE
to be simplified TRUE
to be simplified (0 >= j+n)
to be simplified (j+n > 0)
to be simplified (0 >= j+n)
to be simplified (j+n > 0)
to be simplified (0 >= j+n)
to be simplified (n >= 1)
to be simplified (1 > n)
to be simplified (n >= 1)
to be simplified (1 > n)
to be simplified (1 > n)
to be simplified (i > 0)
to be simplified (0 >= i)
to be simplified (i > 0)
to be simplified (0 >= i)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (j+n > 1)
to be simplified (1 >= j+n)
to be simplified (n > j+1)
to be simplified (j+1 >= n)
to be simplified ( (j+n > 1) && (i > 1) )
to be simplified ( (j+n > 1) && (1 >= i) )
to be simplified ( (1 >= j+n) && (i > 1) )
to be simplified ( (1 >= j+n) && (1 >= i) )
to be simplified ( (n > j+1) && (i > 1) )
to be simplified ( (n > j+1) && (1 >= i) )
to be simplified ( (j+1 >= n) && (i > 1) )
to be simplified ( (j+1 >= n) && (1 >= i) )
to be simplified (j >= n)
to be simplified (n > j)
to be simplified (j >= n)
to be simplified (n > j)
to be simplified (j >= n)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified ( (j+n > 1) && (i > 1) )
to be simplified ( (j+n > 1) && (1 >= i) )
to be simplified ( (1 >= j+n) && (i > 1) )
to be simplified ( (1 >= j+n) && (1 >= i) )
to be simplified ( (n > j+1) && (i > 1) )
to be simplified ( (n > j+1) && (1 >= i) )
to be simplified ( (j+1 >= n) && (i > 1) )
to be simplified ( (j+1 >= n) && (1 >= i) )

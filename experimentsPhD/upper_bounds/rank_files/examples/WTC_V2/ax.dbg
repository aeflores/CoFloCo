FrontEnd version J.3
qualif ax
inside declaration [ax,ax]
inside declaration [ax,cst__4]
inside declaration [ax,cst__1]
table([ax,ax] = __declaration(__inside(char_data("ax")),
  __identifier(char_data("ax")),__function(__identifier(char_data("ax")),
    __basic(`$$size`("32"),char_data("__integer")),
    __identifier(char_data("i")),__basic(`$$size`("32"),
      char_data("__integer")),__identifier(char_data("j")),
    __basic(`$$size`("32"),char_data("__integer")),
    __identifier(char_data("n")),__basic(`$$size`("32"),
      char_data("__integer")))),
   [ax,ax,lbl_2] = __statement(`$$label`("lbl_2"),__inside(char_data("ax"),
       char_data("ax")),__expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("i"))),
       __expression(__constant(char_data("cst__1"))))),
   [ax,ax,lbl_3] = __doWhile(`$$label`("lbl_3"),
     __expression(__operator(char_data("__conjunction")),
       __expression(__operator(char_data("__ge")),
         __expression(__identifier(char_data("j"))),
         __expression(__operator(char_data("__subtraction")),
           __expression(__identifier(char_data("n"))),
           __expression(__constant(char_data("cst__4"))))),
       __expression(__operator(char_data("__lt")),
         __expression(__identifier(char_data("i"))),
         __expression(__operator(char_data("__subtraction")),
           __expression(__identifier(char_data("n"))),
           __expression(__constant(char_data("cst__4"))))))),
   [ax,ax,lbl_3,lbl_5] = __statement(`$$label`("lbl_5"),
     __inside(char_data("ax"),char_data("ax"),char_data("lbl_3")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("j"))),
       __expression(__constant(char_data("cst__1"))))),
   [ax,ax,lbl_3,lbl_6] = __while(`$$label`("lbl_6"),
     __expression(__operator(char_data("__lt")),
       __expression(__identifier(char_data("j"))),
       __expression(__operator(char_data("__subtraction")),
         __expression(__identifier(char_data("n"))),
         __expression(__constant(char_data("cst__4")))))),
   [ax,ax,lbl_3,lbl_6,lbl_7] = __statement(`$$label`("lbl_7"),
     __inside(char_data("ax"),char_data("ax"),char_data("lbl_3"),
       char_data("lbl_6")),__expression(__operator(char_data("__incr")),
       __expression(__identifier(char_data("j"))))),
   [ax,ax,lbl_3,lbl_8] = __statement(`$$label`("lbl_8"),
     __inside(char_data("ax"),char_data("ax"),char_data("lbl_3")),
     __expression(__operator(char_data("__incr")),
       __expression(__identifier(char_data("i"))))),
   [ax,ax,lbl_9] = __statement(`$$label`("lbl_9"),__inside(char_data("ax"),
       char_data("ax")),__return()),
 [ax,cst__1] = __declaration(__inside(char_data("ax")),
   __constant(`$$value`("0"),char_data("cst__1")),
   __basic(char_data("__integer"))),
 [ax,cst__4] = __declaration(__inside(char_data("ax")),
   __constant(`$$value`("1"),char_data("cst__4")),
   __basic(char_data("__integer"))))
table([ax,ax] = [[ax,ax],[ax,cst__4],[ax,cst__1],[ax,ax],[ax,ax,lbl_2],[ax,
  ax,lbl_3],[ax,ax,lbl_3,lbl_5],[ax,ax,lbl_3,lbl_6],[ax,ax,lbl_3,lbl_6,
  lbl_7],[ax,ax,lbl_3,lbl_8],[ax,ax,lbl_9]])
[[ax,ax,lbl_2],[ax,ax,lbl_3,lbl_5],[ax,ax,lbl_3,lbl_6,lbl_7],[ax,ax,lbl_3,
  lbl_8],[ax,ax,lbl_9]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of i is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of j is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of n is 0
body [[ax,ax],[ax,cst__4],[ax,cst__1],[ax,ax],[ax,ax,lbl_2],[ax,ax,lbl_3],
[ax,ax,lbl_3,lbl_5],[ax,ax,lbl_3,lbl_6],[ax,ax,lbl_3,lbl_6,lbl_7],[ax,ax,
  lbl_3,lbl_8],[ax,ax,lbl_9]]
collect subscripts __expression(__identifier(char_data("i")))
[i(),[],{},{}]
collect subscripts __expression(__identifier(char_data("j")))
[j(),[],{},{}]
lbl_6 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("j")))
[j(),[],{},{}]
collect subscripts __expression(__identifier(char_data("i")))
[i(),[],{},{}]
examining ax
examining cst__1
 is a constant
examining cst__4
 is a constant
examining i
examining j
examining n
while remnants __lt(j,n-1)to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (n > 1)
to be simplified ( (1 >= n) && ( (1 >= n) && (n > 2) ) )
to be simplified ( (1 >= n) && ( (n > 1) || (2 >= n) ) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified ( (j+1 >= n) && (n > i+1) )
to be simplified ( (n > j+1) || (i+1 >= n) )
to be simplified ( (j+1 >= n) && (n > i+1) )
to be simplified ( (n > j+1) || (i+1 >= n) )
to be simplified (n > j+1)
to be simplified (j+1 >= n)
to be simplified (j+1 >= n)
to be simplified (j+1 >= n)
to be simplified (n > j+1)
to be simplified ( (j+1 >= n) && ( (j+1 >= n) && (n > i+2) ) )
to be simplified ( (j+1 >= n) && ( (n > j+1) || (i+2 >= n) ) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (n > j+1)
to be simplified ( (j+1 >= n) && ( (j+1 >= n) && (n > i+2) ) )
to be simplified ( (j+1 >= n) && ( (n > j+1) || (i+2 >= n) ) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (n > 1)
to be simplified ( (1 >= n) && ( (1 >= n) && (n > i+2) ) )
to be simplified ( (1 >= n) && ( (n > 1) || (i+2 >= n) ) )

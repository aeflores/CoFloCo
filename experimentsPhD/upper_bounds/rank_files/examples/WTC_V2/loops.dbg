FrontEnd version J.3
qualif loops
inside declaration [loops,loops]
inside declaration [loops,loops,x]
inside declaration [loops,loops,y]
inside declaration [loops,cst__9]
inside declaration [loops,cst__5]
inside declaration [loops,cst__3]
table([loops,cst__3] = __declaration(__inside(char_data("loops")),
  __constant(`$$value`("0"),char_data("cst__3")),
  __basic(char_data("__integer"))),
   [loops,cst__5] = __declaration(__inside(char_data("loops")),
     __constant(`$$value`("1"),char_data("cst__5")),
     __basic(char_data("__integer"))),
   [loops,cst__9] = __declaration(__inside(char_data("loops")),
     __constant(`$$value`("2"),char_data("cst__9")),
     __basic(char_data("__integer"))),
   [loops,loops] = __declaration(__inside(char_data("loops")),
     __identifier(char_data("loops")),
     __function(__identifier(char_data("loops")),
       __basic(char_data("void")),__identifier(char_data("n")),
       __basic(`$$size`("32"),char_data("__integer")))),
   [loops,loops,lbl_1] = __statement(`$$label`("lbl_1"),
     __inside(char_data("loops"),char_data("loops")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("x"))),
       __expression(__identifier(char_data("n"))))),
   [loops,loops,lbl_2] = __if(`$$label`("lbl_2"),
     __expression(__operator(char_data("__ge")),
       __expression(__identifier(char_data("x"))),
       __expression(__constant(char_data("cst__3"))))),
   [loops,loops,lbl_2,_false,lbl_13] = __statement(`$$label`("lbl_13"),
     __inside(char_data("loops"),char_data("loops"),char_data("lbl_2"),
       char_data("_false")),__nop()),
 [loops,loops,lbl_2,_true,lbl_4] = __while(`$$label`("lbl_4"),
   __expression(__operator(char_data("__ge")),
     __expression(__identifier(char_data("x"))),
     __expression(__constant(char_data("cst__3"))))),
 [loops,loops,lbl_2,_true,lbl_4,lbl_12] = __statement(`$$label`("lbl_12"),
   __inside(char_data("loops"),char_data("loops"),char_data("lbl_2"),
     char_data("_true"),char_data("lbl_4")),
   __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("x"))),
     __expression(__operator(char_data("__subtraction")),
       __expression(__identifier(char_data("x"))),
       __expression(__constant(char_data("cst__5")))))),
 [loops,loops,lbl_2,_true,lbl_4,lbl_6] = __statement(`$$label`("lbl_6"),
   __inside(char_data("loops"),char_data("loops"),char_data("lbl_2"),
     char_data("_true"),char_data("lbl_4")),
   __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("y"))),
     __expression(__constant(char_data("cst__5"))))),
 [loops,loops,lbl_2,_true,lbl_4,lbl_7] = __if(`$$label`("lbl_7"),
   __expression(__operator(char_data("__lt")),
     __expression(__identifier(char_data("y"))),
     __expression(__identifier(char_data("x"))))),
 [loops,loops,lbl_2,_true,lbl_4,lbl_7,_false,
 lbl_11] = __statement(`$$label`("lbl_11"),__inside(char_data("loops"),
     char_data("loops"),char_data("lbl_2"),char_data("_true"),
     char_data("lbl_4"),char_data("lbl_7"),char_data("_false")),__nop()),
[loops,loops,lbl_2,_true,lbl_4,lbl_7,_true,
lbl_8] = __while(`$$label`("lbl_8"),
 __expression(__operator(char_data("__lt")),
   __expression(__identifier(char_data("y"))),
   __expression(__identifier(char_data("x"))))),
[loops,loops,lbl_2,_true,lbl_4,lbl_7,_true,lbl_8,
lbl_10] = __statement(`$$label`("lbl_10"),__inside(char_data("loops"),
   char_data("loops"),char_data("lbl_2"),char_data("_true"),
   char_data("lbl_4"),char_data("lbl_7"),char_data("_true"),
   char_data("lbl_8")),__expression(__operator(char_data("__assignment")),
   __expression(__identifier(char_data("y"))),
   __expression(__operator(char_data("__multiplication")),
     __expression(__constant(char_data("cst__9"))),
     __expression(__identifier(char_data("y")))))),
[loops,loops,x] = __declaration(__inside(char_data("loops"),
 char_data("loops")),__identifier(char_data("x")),__basic(`$$size`("32"),
   char_data("__integer"))),
[loops,loops,y] = __declaration(__inside(char_data("loops"),
 char_data("loops")),__identifier(char_data("y")),__basic(`$$size`("32"),
   char_data("__integer"))))
table([loops,loops] = [[loops,loops],[loops,cst__9],[loops,cst__5],[loops,
cst__3],[loops,loops],[loops,loops,x],[loops,loops,y],[loops,loops,lbl_1],
[loops,loops,lbl_2,_true,lbl_4],[loops,loops,lbl_2],[loops,loops,lbl_2,
_true,lbl_4,lbl_6],[loops,loops,lbl_2,_true,lbl_4,lbl_7,_true,lbl_8],
[loops,loops,lbl_2,_true,lbl_4,lbl_7],[loops,loops,lbl_2,_true,lbl_4,lbl_7,
_true,lbl_8,lbl_10],[loops,loops,lbl_2,_true,lbl_4,lbl_7,_false,lbl_11],
[loops,loops,lbl_2,_true,lbl_4,lbl_12],[loops,loops,lbl_2,_false,lbl_13]])
[[loops,loops,x],[loops,loops,y],[loops,loops,lbl_1],[loops,loops,lbl_2,
_true,lbl_4,lbl_6],[loops,loops,lbl_2,_true,lbl_4,lbl_7,_true,lbl_8,
lbl_10],[loops,loops,lbl_2,_true,lbl_4,lbl_7,_false,lbl_11],[loops,loops,
lbl_2,_true,lbl_4,lbl_12],[loops,loops,lbl_2,_false,lbl_13]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of n is 0
body [[loops,loops],[loops,cst__9],[loops,cst__5],[loops,cst__3],[loops,
loops],[loops,loops,x],[loops,loops,y],[loops,loops,lbl_1],[loops,loops,
lbl_2,_true,lbl_4],[loops,loops,lbl_2],[loops,loops,lbl_2,_true,lbl_4,
lbl_6],[loops,loops,lbl_2,_true,lbl_4,lbl_7,_true,lbl_8],[loops,loops,
lbl_2,_true,lbl_4,lbl_7],[loops,loops,lbl_2,_true,lbl_4,lbl_7,_true,lbl_8,
lbl_10],[loops,loops,lbl_2,_true,lbl_4,lbl_7,_false,lbl_11],[loops,loops,
lbl_2,_true,lbl_4,lbl_12],[loops,loops,lbl_2,_false,lbl_13]]
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
lbl_4 __while
 counter 1/0
lbl_2 __si
 counter 1/0 iteration domain {}

collect subscripts __expression(__identifier(char_data("y")))
[y(),[],{},{}]
lbl_8 __while
 counter 1/0
lbl_7 __si
 counter 1/0 iteration domain {}

collect subscripts __expression(__identifier(char_data("y")))
[y(),[],{},{}]
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
examining cst__3
 is a constant
examining cst__5
 is a constant
examining cst__9
 is a constant
examining loops
examining n
examining x
 has definitions
examining y
 has definitions
while remnants __ge(x,0)while remnants __lt(y,x)to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified TRUE
to be simplified TRUE
to be simplified (n >= 0)
to be simplified (0 > n)
to be simplified ( (n >= 0) && (0 > n) )
to be simplified ( (n >= 0) && ( (n >= 0) && (1 >= n) ) )
to be simplified ( (n >= 0) && ( ( (n >= 0) && (n > 1) ) && (n > 1) ) )
to be simplified ( (n >= 0) && ( ( (n >= 0) && (n > 1) ) && (1 >= n) ) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (x >= 0)
to be simplified (0 > x)
to be simplified (x >= 0)
to be simplified (0 > x)
to be simplified (x >= 0)
to be simplified (0 > x)
to be simplified (x >= 0)
to be simplified (x >= 0)
to be simplified ( (x >= 0) && (x > 1) )
to be simplified ( (x >= 0) && (1 >= x) )
to be simplified ( ( (x >= 0) && (x > 1) ) && (x > 1) )
to be simplified ( ( (x >= 0) && (x > 1) ) && (1 >= x) )
to be simplified (x > y)
to be simplified (y >= x)
to be simplified (x > y)
to be simplified (y >= x)
to be simplified (y >= x)
to be simplified (x > y)
to be simplified (y >= x)
to be simplified (x > y)
to be simplified (y >= x)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (0 > x)
to be simplified ( (x >= 0) && (1 >= x) )
to be simplified ( ( (x >= 0) && (x > 1) ) && (x > 1) )
to be simplified ( ( (x >= 0) && (x > 1) ) && (1 >= x) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (x > y)
to be simplified (y >= x)
to be simplified TRUE
to be simplified TRUE

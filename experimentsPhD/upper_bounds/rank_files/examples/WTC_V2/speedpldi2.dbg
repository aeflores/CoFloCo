FrontEnd version J.3
qualif speedpldi2
inside declaration [speedpldi2,speedpldi2]
inside declaration [speedpldi2,speedpldi2,v1]
inside declaration [speedpldi2,speedpldi2,v2]
inside declaration [speedpldi2,cst__2]
table([speedpldi2,
  cst__2] = __declaration(__inside(char_data("speedpldi2")),
  __constant(`$$value`("0"),char_data("cst__2")),
  __basic(char_data("__integer"))),
   [speedpldi2,
     speedpldi2] = __declaration(__inside(char_data("speedpldi2")),
     __identifier(char_data("speedpldi2")),
     __function(__identifier(char_data("speedpldi2")),
       __basic(char_data("void")),__identifier(char_data("n")),
       __basic(`$$size`("32"),char_data("__integer")),
       __identifier(char_data("m")),__basic(`$$size`("32"),
         char_data("__integer")))),
   [speedpldi2,speedpldi2,lbl_1] = __if(`$$label`("lbl_1"),
     __expression(__operator(char_data("__conjunction")),
       __expression(__operator(char_data("__ge")),
         __expression(__identifier(char_data("n"))),
         __expression(__constant(char_data("cst__2")))),
       __expression(__operator(char_data("__gt")),
         __expression(__identifier(char_data("m"))),
         __expression(__constant(char_data("cst__2")))))),
   [speedpldi2,speedpldi2,lbl_1,_false,
   lbl_3] = __statement(`$$label`("lbl_3"),
       __inside(char_data("speedpldi2"),char_data("speedpldi2"),
       char_data("lbl_1"),char_data("_false")),__nop()),
 [speedpldi2,speedpldi2,lbl_1,_true,V1N] = __statement(`$$label`("V1N"),
   __inside(char_data("speedpldi2"),char_data("speedpldi2"),
     char_data("lbl_1"),char_data("_true")),
   __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("v1"))),
     __expression(__identifier(char_data("n"))))),
 [speedpldi2,speedpldi2,lbl_1,_true,V2Z] = __statement(`$$label`("V2Z"),
   __inside(char_data("speedpldi2"),char_data("speedpldi2"),
     char_data("lbl_1"),char_data("_true")),
   __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("v2"))),
     __expression(__constant(char_data("cst__2"))))),
 [speedpldi2,speedpldi2,lbl_1,_true,WH] = __while(`$$label`("WH"),
   __expression(__operator(char_data("__gt")),
     __expression(__identifier(char_data("v1"))),
     __expression(__constant(char_data("cst__2"))))),
 [speedpldi2,speedpldi2,lbl_1,_true,WH,I] = __if(`$$label`("I"),
   __expression(__operator(char_data("__lt")),
     __expression(__identifier(char_data("v2"))),
     __expression(__identifier(char_data("m"))))),
 [speedpldi2,speedpldi2,lbl_1,_true,WH,I,_false,
 ZZ] = __statement(`$$label`("ZZ"),__inside(char_data("speedpldi2"),
     char_data("speedpldi2"),char_data("lbl_1"),char_data("_true"),
     char_data("WH"),char_data("I"),char_data("_false")),
   __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("v2"))),
     __expression(__constant(char_data("cst__2"))))),
 [speedpldi2,speedpldi2,lbl_1,_true,WH,I,_true,
 M] = __statement(`$$label`("M"),__inside(char_data("speedpldi2"),
     char_data("speedpldi2"),char_data("lbl_1"),char_data("_true"),
     char_data("WH"),char_data("I"),char_data("_true")),
   __expression(__operator(char_data("__decr")),
     __expression(__identifier(char_data("v1"))))),
 [speedpldi2,speedpldi2,lbl_1,_true,WH,I,_true,
 P] = __statement(`$$label`("P"),__inside(char_data("speedpldi2"),
     char_data("speedpldi2"),char_data("lbl_1"),char_data("_true"),
     char_data("WH"),char_data("I"),char_data("_true")),
   __expression(__operator(char_data("__incr")),
     __expression(__identifier(char_data("v2"))))),
 [speedpldi2,speedpldi2,
   v1] = __declaration(__inside(char_data("speedpldi2"),
   char_data("speedpldi2")),__identifier(char_data("v1")),
   __basic(`$$size`("32"),char_data("__integer"))),
 [speedpldi2,speedpldi2,
   v2] = __declaration(__inside(char_data("speedpldi2"),
   char_data("speedpldi2")),__identifier(char_data("v2")),
   __basic(`$$size`("32"),char_data("__integer"))))
table([speedpldi2,speedpldi2] = [[speedpldi2,speedpldi2],[speedpldi2,
cst__2],[speedpldi2,speedpldi2],[speedpldi2,speedpldi2,v1],[speedpldi2,
  speedpldi2,v2],[speedpldi2,speedpldi2,lbl_1],[speedpldi2,speedpldi2,
  lbl_1,_true,V1N],[speedpldi2,speedpldi2,lbl_1,_true,V2Z],[speedpldi2,
  speedpldi2,lbl_1,_true,WH,I],[speedpldi2,speedpldi2,lbl_1,_true,WH],
[speedpldi2,speedpldi2,lbl_1,_true,WH,I,_true,P],[speedpldi2,speedpldi2,
  lbl_1,_true,WH,I,_true,M],[speedpldi2,speedpldi2,lbl_1,_true,WH,I,_false,
  ZZ],[speedpldi2,speedpldi2,lbl_1,_false,lbl_3]])
[[speedpldi2,speedpldi2,v1],[speedpldi2,speedpldi2,v2],[speedpldi2,
  speedpldi2,lbl_1,_true,V1N],[speedpldi2,speedpldi2,lbl_1,_true,V2Z],
[speedpldi2,speedpldi2,lbl_1,_true,WH,I,_true,P],[speedpldi2,speedpldi2,
  lbl_1,_true,WH,I,_true,M],[speedpldi2,speedpldi2,lbl_1,_true,WH,I,_false,
  ZZ],[speedpldi2,speedpldi2,lbl_1,_false,lbl_3]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of n is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of m is 0
body [[speedpldi2,speedpldi2],[speedpldi2,cst__2],[speedpldi2,speedpldi2],
[speedpldi2,speedpldi2,v1],[speedpldi2,speedpldi2,v2],[speedpldi2,
  speedpldi2,lbl_1],[speedpldi2,speedpldi2,lbl_1,_true,V1N],[speedpldi2,
  speedpldi2,lbl_1,_true,V2Z],[speedpldi2,speedpldi2,lbl_1,_true,WH,I],
[speedpldi2,speedpldi2,lbl_1,_true,WH],[speedpldi2,speedpldi2,lbl_1,_true,
  WH,I,_true,P],[speedpldi2,speedpldi2,lbl_1,_true,WH,I,_true,M],
[speedpldi2,speedpldi2,lbl_1,_true,WH,I,_false,ZZ],[speedpldi2,speedpldi2,
  lbl_1,_false,lbl_3]]
lbl_1 __si
 counter 1/0 iteration domain {}

collect subscripts __expression(__identifier(char_data("v1")))
[v1(),[],{},{}]
collect subscripts __expression(__identifier(char_data("v2")))
[v2(),[],{},{}]
I __si
 counter 1/0 iteration domain {}

WH __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("v2")))
[v2(),[],{},{}]
collect subscripts __expression(__identifier(char_data("v1")))
[v1(),[],{},{}]
collect subscripts __expression(__identifier(char_data("v2")))
[v2(),[],{},{}]
examining cst__2
 is a constant
examining m
examining n
examining speedpldi2
examining v1
 has definitions
examining v2
 has definitions
while remnants __gt(v1,0)to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified ( (0 > n) || (0 >= m) )
to be simplified ( (n >= 0) && (m > 0) )
to be simplified ( ( (n >= 0) && (m > 0) ) && (0 >= n) )
to be simplified ( ( (n >= 0) && (m > 0) ) && ( (n > 0) && (0 >= m) ) )
to be simplified ( ( (n >= 0) && (m > 0) ) && ( (n > 0) && (m > 0) ) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (m > v2)
to be simplified (v2 >= m)
to be simplified (m > v2)
to be simplified (v2 >= m)
to be simplified (m > v2)
to be simplified (v1 > 0)
to be simplified (0 >= v1)
to be simplified (v1 > 0)
to be simplified ( (v1 > 0) && (v2 >= m) )
to be simplified ( (v1 > 0) && (m > v2) )
to be simplified ( (n >= 0) && (m > 0) )
to be simplified ( (0 > n) || (0 >= m) )
to be simplified ( (n >= 0) && (m > 0) )
to be simplified ( (0 > n) || (0 >= m) )
to be simplified ( (n >= 0) && (m > 0) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (0 >= v1)
to be simplified ( (v1 > 0) && (v2 >= m) )
to be simplified ( (v1 > 0) && (m > v2) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (0 >= v1)
to be simplified ( (v1 > 0) && (v2 >= m) )
to be simplified ( (v1 > 0) && (m > v2) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE

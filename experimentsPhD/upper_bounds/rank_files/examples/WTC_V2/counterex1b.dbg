FrontEnd version J.3
qualif counterex1b
inside declaration [counterex1b,nondet]
inside declaration [counterex1b,counterex1b]
inside declaration [counterex1b,cst__2]
table([counterex1b,
counterex1b] = __declaration(__inside(char_data("counterex1b")),
  __identifier(char_data("counterex1b")),
  __function(__identifier(char_data("counterex1b")),
    __basic(char_data("void")),__identifier(char_data("n")),
    __basic(`$$size`("32"),char_data("__integer")),
    __identifier(char_data("x")),__basic(`$$size`("32"),
      char_data("__integer")),__identifier(char_data("y")),
    __basic(`$$size`("32"),char_data("__integer")))),
   [counterex1b,counterex1b,lbl_1] = __while(`$$label`("lbl_1"),
     __expression(__operator(char_data("__ge")),
       __expression(__identifier(char_data("x"))),
       __expression(__constant(char_data("cst__2"))))),
   [counterex1b,counterex1b,lbl_1,lbl_3] = __while(`$$label`("lbl_3"),
     __expression(__operator(char_data("__conjunction")),
       __expression(__operator(char_data("__ge")),
         __expression(__identifier(char_data("y"))),
         __expression(__constant(char_data("cst__2")))),
       __expression(__operator(char_data("__gt")),
         __expression(__operator(char_data("__funcall")),
           __expression(__identifier(char_data("nondet")))),
         __expression(__constant(char_data("cst__2")))))),
   [counterex1b,counterex1b,lbl_1,lbl_3,
   lbl_4] = __statement(`$$label`("lbl_4"),
       __inside(char_data("counterex1b"),char_data("counterex1b"),
       char_data("lbl_1"),char_data("lbl_3")),
     __expression(__operator(char_data("_post_decr")),
       __expression(__identifier(char_data("y"))))),
   [counterex1b,counterex1b,lbl_1,lbl_5] = __statement(`$$label`("lbl_5"),
     __inside(char_data("counterex1b"),char_data("counterex1b"),
       char_data("lbl_1")),
       __expression(__operator(char_data("_post_decr")),
       __expression(__identifier(char_data("x"))))),
   [counterex1b,counterex1b,lbl_1,lbl_6] = __while(`$$label`("lbl_6"),
     __expression(__operator(char_data("__conjunction")),
       __expression(__operator(char_data("__le")),
         __expression(__identifier(char_data("y"))),
         __expression(__identifier(char_data("n")))),
       __expression(__operator(char_data("__gt")),
         __expression(__operator(char_data("__funcall")),
           __expression(__identifier(char_data("nondet")))),
         __expression(__constant(char_data("cst__2")))))),
   [counterex1b,counterex1b,lbl_1,lbl_6,
   lbl_7] = __statement(`$$label`("lbl_7"),
       __inside(char_data("counterex1b"),char_data("counterex1b"),
       char_data("lbl_1"),char_data("lbl_6")),
     __expression(__operator(char_data("_post_incr")),
       __expression(__identifier(char_data("y"))))),
   [counterex1b,cst__2] = __declaration(__inside(char_data("counterex1b")),
     __constant(`$$value`("0"),char_data("cst__2")),
     __basic(char_data("__integer"))),
   [counterex1b,nondet] = __declaration(__inside(char_data("counterex1b")),
     __identifier(char_data("nondet")),
     __function(__identifier(char_data("nondet")),__basic(`$$size`("32"),
         char_data("__integer")))))
table([counterex1b,counterex1b] = [[counterex1b,nondet],[counterex1b,
    counterex1b],[counterex1b,cst__2],[counterex1b,counterex1b],
  [counterex1b,counterex1b,lbl_1,lbl_3],[counterex1b,counterex1b,lbl_1],
  [counterex1b,counterex1b,lbl_1,lbl_3,lbl_4],[counterex1b,counterex1b,
    lbl_1,lbl_5],[counterex1b,counterex1b,lbl_1,lbl_6],[counterex1b,
    counterex1b,lbl_1,lbl_6,lbl_7]])
[[counterex1b,counterex1b,lbl_1,lbl_3,lbl_4],[counterex1b,counterex1b,
    lbl_1,lbl_5],[counterex1b,counterex1b,lbl_1,lbl_6,lbl_7]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of n is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of x is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of y is 0
body [[counterex1b,nondet],[counterex1b,counterex1b],[counterex1b,cst__2],
  [counterex1b,counterex1b],[counterex1b,counterex1b,lbl_1,lbl_3],
  [counterex1b,counterex1b,lbl_1],[counterex1b,counterex1b,lbl_1,lbl_3,
    lbl_4],[counterex1b,counterex1b,lbl_1,lbl_5],[counterex1b,counterex1b,
    lbl_1,lbl_6],[counterex1b,counterex1b,lbl_1,lbl_6,lbl_7]]
lbl_3 __while
 counter 1/0
lbl_1 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("y")))
[y(),[],{},{}]
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
lbl_6 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("y")))
[y(),[],{},{}]
examining counterex1b
examining cst__2
 is a constant
examining n
examining nondet
examining x
examining y
while remnants __ge(x,0)while remnants __conjunction(__le(y,n),
__gt(nondet(),0))while remnants __conjunction(__ge(y,0),__gt(nondet(),
0))to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified (0 > x)
to be simplified (x >= 0)
to be simplified ( (x >= 0) && (y >= 0) )
to be simplified (x >= 0)
to be simplified ( (x >= 0) && (n >= y) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (x >= 0)
to be simplified (0 > x)
to be simplified (x >= 0)
to be simplified (x >= 0)
to be simplified ( (x >= 0) && (y >= 0) )
to be simplified (y >= 0)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (y >= 0)
to be simplified (y >= 0)
to be simplified (n >= y)
to be simplified TRUE
to be simplified TRUE
to be simplified (n >= y)
to be simplified (n >= y)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (n >= y)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (y >= 0)
to be simplified TRUE
to be simplified (n >= y)
to be simplified TRUE
to be simplified (0 > x)
to be simplified (x >= 0)
to be simplified ( (x >= 0) && (y >= 0) )
to be simplified (x >= 0)
to be simplified ( (x >= 0) && (n >= y) )

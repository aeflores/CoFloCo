FrontEnd version J.3
qualif speedDis2
inside declaration [speedDis2,speedDis2]
table([speedDis2,
  speedDis2] = __declaration(__inside(char_data("speedDis2")),
  __identifier(char_data("speedDis2")),
  __function(__identifier(char_data("speedDis2")),__basic(`$$size`("32"),
      char_data("__integer")),__identifier(char_data("x")),
    __basic(`$$size`("32"),char_data("__integer")),
    __identifier(char_data("z")),__basic(`$$size`("32"),
      char_data("__integer")),__identifier(char_data("n")),
    __basic(`$$size`("32"),char_data("__integer")))),
   [speedDis2,speedDis2,lbl_1] = __while(`$$label`("lbl_1"),
     __expression(__operator(char_data("__lt")),
       __expression(__identifier(char_data("x"))),
       __expression(__identifier(char_data("n"))))),
   [speedDis2,speedDis2,lbl_1,lbl_2] = __if(`$$label`("lbl_2"),
     __expression(__operator(char_data("__gt")),
       __expression(__identifier(char_data("z"))),
       __expression(__identifier(char_data("x"))))),
   [speedDis2,speedDis2,lbl_1,lbl_2,_false,
   lbl_4] = __statement(`$$label`("lbl_4"),__inside(char_data("speedDis2"),
       char_data("speedDis2"),char_data("lbl_1"),char_data("lbl_2"),
       char_data("_false")),
       __expression(__operator(char_data("_post_incr")),
       __expression(__identifier(char_data("z"))))),
   [speedDis2,speedDis2,lbl_1,lbl_2,_true,
   lbl_3] = __statement(`$$label`("lbl_3"),__inside(char_data("speedDis2"),
       char_data("speedDis2"),char_data("lbl_1"),char_data("lbl_2"),
       char_data("_true")),
       __expression(__operator(char_data("_post_incr")),
       __expression(__identifier(char_data("x"))))),
   [speedDis2,speedDis2,lbl_5] = __statement(`$$label`("lbl_5"),
     __inside(char_data("speedDis2"),char_data("speedDis2")),__return()))
table([speedDis2,speedDis2] = [[speedDis2,speedDis2],[speedDis2,speedDis2],
[speedDis2,speedDis2,lbl_1,lbl_2],[speedDis2,speedDis2,lbl_1],[speedDis2,
  speedDis2,lbl_1,lbl_2,_true,lbl_3],[speedDis2,speedDis2,lbl_1,lbl_2,
  _false,lbl_4],[speedDis2,speedDis2,lbl_5]])
[[speedDis2,speedDis2,lbl_1,lbl_2,_true,lbl_3],[speedDis2,speedDis2,lbl_1,
  lbl_2,_false,lbl_4],[speedDis2,speedDis2,lbl_5]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of x is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of z is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of n is 0
body [[speedDis2,speedDis2],[speedDis2,speedDis2],[speedDis2,speedDis2,
  lbl_1,lbl_2],[speedDis2,speedDis2,lbl_1],[speedDis2,speedDis2,lbl_1,
  lbl_2,_true,lbl_3],[speedDis2,speedDis2,lbl_1,lbl_2,_false,lbl_4],
[speedDis2,speedDis2,lbl_5]]
lbl_2 __si
 counter 1/0 iteration domain {}

lbl_1 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
collect subscripts __expression(__identifier(char_data("z")))
[z(),[],{},{}]
examining n
examining speedDis2
examining x
examining z
while remnants __lt(x,n)to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified (x >= n)
to be simplified ( (n > x) && (z > x) )
to be simplified ( (n > x) && (x >= z) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (n > x)
to be simplified (x >= n)
to be simplified (x >= n)
to be simplified (n > x)
to be simplified ( (n > x) && (z > x) )
to be simplified ( (n > x) && (x >= z) )
to be simplified (z > x)
to be simplified (x >= z)
to be simplified (z > x)
to be simplified (x >= z)
to be simplified (z > x)
to be simplified (x >= z)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (x >= n)
to be simplified ( (n > x) && (z > x) )
to be simplified ( (n > x) && (x >= z) )
to be simplified TRUE
to be simplified TRUE
to be simplified (x >= n)
to be simplified ( (n > x) && (z > x) )
to be simplified ( (n > x) && (x >= z) )

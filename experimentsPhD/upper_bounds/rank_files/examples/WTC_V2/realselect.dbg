FrontEnd version J.3
qualif realselect
inside declaration [realselect,realselect]
inside declaration [realselect,realselect,i]
inside declaration [realselect,realselect,j]
inside declaration [realselect,realselect,min]
inside declaration [realselect,realselect,temp]
inside declaration [realselect,cst__3]
inside declaration [realselect,cst__2]
table([realselect,
  cst__2] = __declaration(__inside(char_data("realselect")),
  __constant(`$$value`("0"),char_data("cst__2")),
  __basic(char_data("__integer"))),
   [realselect,cst__3] = __declaration(__inside(char_data("realselect")),
     __constant(`$$value`("1"),char_data("cst__3")),
     __basic(char_data("__integer"))),
   [realselect,
     realselect] = __declaration(__inside(char_data("realselect")),
     __identifier(char_data("realselect")),
     __function(__identifier(char_data("realselect")),
       __basic(char_data("void")),__identifier(char_data("array_size")),
       __basic(`$$size`("32"),char_data("__integer")),
       __identifier(char_data("numbers")),__array(__basic(`$$size`("32"),
         char_data("__integer"))))),
   [realselect,realselect,
   i] = __declaration(__inside(char_data("realselect"),
     char_data("realselect")),__identifier(char_data("i")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [realselect,realselect,
   j] = __declaration(__inside(char_data("realselect"),
     char_data("realselect")),__identifier(char_data("j")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [realselect,realselect,lbl_1] = __for(`$$label`("lbl_1"),
     __init(__expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("i"))),
       __expression(__constant(char_data("cst__2"))))),
     __test(__expression(__operator(char_data("__lt")),
       __expression(__identifier(char_data("i"))),
       __expression(__operator(char_data("__subtraction")),
         __expression(__identifier(char_data("array_size"))),
         __expression(__constant(char_data("cst__3")))))),
     __next(__expression(__operator(char_data("_post_incr")),
       __expression(__identifier(char_data("i")))))),
   [realselect,realselect,lbl_1,lbl_10] = __statement(`$$label`("lbl_10"),
     __inside(char_data("realselect"),char_data("realselect"),
       char_data("lbl_1")),
       __expression(__operator(char_data("__assignment")),
       __expression(__operator(char_data("__subscript")),
         __expression(__identifier(char_data("numbers"))),
         __expression(__identifier(char_data("i")))),
       __expression(__operator(char_data("__subscript")),
         __expression(__identifier(char_data("numbers"))),
         __expression(__identifier(char_data("min")))))),
   [realselect,realselect,lbl_1,lbl_11] = __statement(`$$label`("lbl_11"),
     __inside(char_data("realselect"),char_data("realselect"),
       char_data("lbl_1")),
       __expression(__operator(char_data("__assignment")),
       __expression(__operator(char_data("__subscript")),
         __expression(__identifier(char_data("numbers"))),
         __expression(__identifier(char_data("min")))),
       __expression(__identifier(char_data("temp"))))),
   [realselect,realselect,lbl_1,lbl_4] = __statement(`$$label`("lbl_4"),
     __inside(char_data("realselect"),char_data("realselect"),
       char_data("lbl_1")),
       __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("min"))),
       __expression(__identifier(char_data("i"))))),
   [realselect,realselect,lbl_1,lbl_5] = __for(`$$label`("lbl_5"),
     __init(__expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("j"))),
       __expression(__operator(char_data("__addition")),
         __expression(__identifier(char_data("i"))),
         __expression(__constant(char_data("cst__3")))))),
     __test(__expression(__operator(char_data("__lt")),
       __expression(__identifier(char_data("j"))),
       __expression(__identifier(char_data("array_size"))))),
     __next(__expression(__operator(char_data("_post_incr")),
       __expression(__identifier(char_data("j")))))),
   [realselect,realselect,lbl_1,lbl_5,lbl_6] = __if(`$$label`("lbl_6"),
     __expression(__operator(char_data("__lt")),
       __expression(__operator(char_data("__subscript")),
         __expression(__identifier(char_data("numbers"))),
         __expression(__identifier(char_data("j")))),
       __expression(__operator(char_data("__subscript")),
         __expression(__identifier(char_data("numbers"))),
         __expression(__identifier(char_data("min")))))),
   [realselect,realselect,lbl_1,lbl_5,lbl_6,_false,
   lbl_8] = __statement(`$$label`("lbl_8"),
       __inside(char_data("realselect"),char_data("realselect"),
       char_data("lbl_1"),char_data("lbl_5"),char_data("lbl_6"),
       char_data("_false")),__nop()),
 [realselect,realselect,lbl_1,lbl_5,lbl_6,_true,
 lbl_7] = __statement(`$$label`("lbl_7"),__inside(char_data("realselect"),
     char_data("realselect"),char_data("lbl_1"),char_data("lbl_5"),
     char_data("lbl_6"),char_data("_true")),
   __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("min"))),
     __expression(__identifier(char_data("j"))))),
 [realselect,realselect,lbl_1,lbl_9] = __statement(`$$label`("lbl_9"),
   __inside(char_data("realselect"),char_data("realselect"),
     char_data("lbl_1")),
     __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("temp"))),
     __expression(__operator(char_data("__subscript")),
       __expression(__identifier(char_data("numbers"))),
       __expression(__identifier(char_data("i")))))),
 [realselect,realselect,
 min] = __declaration(__inside(char_data("realselect"),
   char_data("realselect")),__identifier(char_data("min")),
   __basic(`$$size`("32"),char_data("__integer"))),
 [realselect,realselect,
 temp] = __declaration(__inside(char_data("realselect"),
   char_data("realselect")),__identifier(char_data("temp")),
   __basic(`$$size`("32"),char_data("__integer"))))
table([realselect,realselect] = [[realselect,realselect],[realselect,
cst__3],[realselect,cst__2],[realselect,realselect],[realselect,realselect,
  i],[realselect,realselect,j],[realselect,realselect,min],[realselect,
  realselect,temp],[realselect,realselect,lbl_1],[realselect,realselect,
  lbl_1,lbl_4],[realselect,realselect,lbl_1,lbl_5,lbl_6],[realselect,
  realselect,lbl_1,lbl_5],[realselect,realselect,lbl_1,lbl_5,lbl_6,_true,
  lbl_7],[realselect,realselect,lbl_1,lbl_5,lbl_6,_false,lbl_8],
  [realselect,realselect,lbl_1,lbl_9],[realselect,realselect,lbl_1,lbl_10],
[realselect,realselect,lbl_1,lbl_11]])
[[realselect,realselect,i],[realselect,realselect,j],[realselect,
  realselect,min],[realselect,realselect,temp],[realselect,realselect,
  lbl_1,lbl_4],[realselect,realselect,lbl_1,lbl_5,lbl_6,_true,lbl_7],
[realselect,realselect,lbl_1,lbl_5,lbl_6,_false,lbl_8],[realselect,
  realselect,lbl_1,lbl_9],[realselect,realselect,lbl_1,lbl_10],[realselect,
  realselect,lbl_1,lbl_11]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of array_size is 0
gatherFormals: typist __array(__basic(`$$size`("32"),
char_data("__integer")))
gatherFormals: tepee __array(__basic(`$$size`("32"),
char_data("__integer")))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of numbers is 1
body [[realselect,realselect],[realselect,cst__3],[realselect,cst__2],
[realselect,realselect],[realselect,realselect,i],[realselect,realselect,
j],[realselect,realselect,min],[realselect,realselect,temp],[realselect,
  realselect,lbl_1],[realselect,realselect,lbl_1,lbl_4],[realselect,
  realselect,lbl_1,lbl_5,lbl_6],[realselect,realselect,lbl_1,lbl_5],
[realselect,realselect,lbl_1,lbl_5,lbl_6,_true,lbl_7],[realselect,
  realselect,lbl_1,lbl_5,lbl_6,_false,lbl_8],[realselect,realselect,lbl_1,
  lbl_9],[realselect,realselect,lbl_1,lbl_10],[realselect,realselect,lbl_1,
  lbl_11]]
collect subscripts __expression(__identifier(char_data("min")))
[min(),[],{},{}]
lbl_6 __si
 counter 1/0 iteration domain {}

collect subscripts __expression(__identifier(char_data("min")))
[min(),[],{},{}]
collect subscripts __expression(__identifier(char_data("temp")))
[temp(),[],{},{}]
collect subscripts __expression(__operator(char_data("__subscript")),
__expression(__identifier(char_data("numbers"))),
__expression(__identifier(char_data("i"))))
collect subscripts __expression(__identifier(char_data("numbers")))
[numbers(),[],{},{}]
[numbers(),[i],{},{i()}]
collect subscripts __expression(__operator(char_data("__subscript")),
__expression(__identifier(char_data("numbers"))),
__expression(__identifier(char_data("i"))))
collect subscripts __expression(__identifier(char_data("numbers")))
[numbers(),[],{},{}]
[numbers(),[i],{},{i()}]
collect subscripts __expression(__operator(char_data("__subscript")),
__expression(__identifier(char_data("numbers"))),
__expression(__identifier(char_data("min"))))
collect subscripts __expression(__identifier(char_data("numbers")))
[numbers(),[],{},{}]
[numbers(),[min],{},{min()}]
collect subscripts __expression(__operator(char_data("__subscript")),
__expression(__identifier(char_data("numbers"))),
__expression(__identifier(char_data("min"))))
collect subscripts __expression(__identifier(char_data("numbers")))
[numbers(),[],{},{}]
[numbers(),[min],{},{min()}]
examining array_size
examining cst__2
 is a constant
examining cst__3
 is a constant
examining i
 has definitions
examining j
 has definitions
examining min
 has definitions
examining numbers
 is an array
examining realselect
examining temp
 has definitions
to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified TRUE
to be simplified (1 >= array_size)
to be simplified (array_size > 1)
to be simplified ( (array_size > 1) && (1 >= array_size) )
to be simplified (array_size > 1)
to be simplified (array_size > 1)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (array_size > i+1)
to be simplified (i+1 >= array_size)
to be simplified (array_size > i+1)
to be simplified (array_size > i+1)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (array_size > j)
to be simplified (j >= array_size)
to be simplified (j >= array_size)
to be simplified (array_size > j)
to be simplified (array_size > j)
to be simplified (array_size > j)
to be simplified (array_size > j)
to be simplified (array_size > j)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (j >= array_size)
to be simplified (array_size > j)
to be simplified (array_size > j)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (i+1 >= array_size)
to be simplified (array_size > i+1)
to be simplified ( (array_size > i+1) && (i+1 >= array_size) )
to be simplified (array_size > i+1)
to be simplified (array_size > i+1)

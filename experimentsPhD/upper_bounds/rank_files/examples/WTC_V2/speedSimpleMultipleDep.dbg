FrontEnd version J.3
qualif speedSimpleMultipleDep
inside declaration [speedSimpleMultipleDep,speedSimpleMultipleDep]
inside declaration [speedSimpleMultipleDep,speedSimpleMultipleDep,x]
inside declaration [speedSimpleMultipleDep,speedSimpleMultipleDep,y]
inside declaration [speedSimpleMultipleDep,cst__1]
table([speedSimpleMultipleDep,
cst__1] = __declaration(__inside(char_data("speedSimpleMultipleDep")),
  __constant(`$$value`("0"),char_data("cst__1")),
  __basic(char_data("__integer"))),
   [speedSimpleMultipleDep,
   speedSimpleMultipleDep] = __declaration(__inside(char_data("speedSimpleMultipleDep"
   )),__identifier(char_data("speedSimpleMultipleDep")),
     __function(__identifier(char_data("speedSimpleMultipleDep")),
       __basic(`$$size`("32"),char_data("__integer")),
       __identifier(char_data("n")),__basic(`$$size`("32"),
         char_data("__integer")),__identifier(char_data("m")),
       __basic(`$$size`("32"),char_data("__integer")))),
   [speedSimpleMultipleDep,speedSimpleMultipleDep,
   lbl_10] = __statement(`$$label`("lbl_10"),
     __inside(char_data("speedSimpleMultipleDep"),
       char_data("speedSimpleMultipleDep")),__nop()),
 [speedSimpleMultipleDep,speedSimpleMultipleDep,
 lbl_11] = __statement(`$$label`("lbl_11"),
   __inside(char_data("speedSimpleMultipleDep"),
     char_data("speedSimpleMultipleDep")),__return()),
[speedSimpleMultipleDep,speedSimpleMultipleDep,
lbl_2] = __statement(`$$label`("lbl_2"),
 __inside(char_data("speedSimpleMultipleDep"),
   char_data("speedSimpleMultipleDep")),
 __expression(__operator(char_data("__assignment")),
   __expression(__identifier(char_data("x"))),
   __expression(__constant(char_data("cst__1"))))),
[speedSimpleMultipleDep,speedSimpleMultipleDep,
lbl_3] = __statement(`$$label`("lbl_3"),
 __inside(char_data("speedSimpleMultipleDep"),
   char_data("speedSimpleMultipleDep")),
 __expression(__operator(char_data("__assignment")),
   __expression(__identifier(char_data("y"))),
   __expression(__constant(char_data("cst__1"))))),
[speedSimpleMultipleDep,speedSimpleMultipleDep,
lbl_4] = __while(`$$label`("lbl_4"),
 __expression(__operator(char_data("__lt")),
   __expression(__identifier(char_data("x"))),
   __expression(__identifier(char_data("n"))))),
[speedSimpleMultipleDep,speedSimpleMultipleDep,lbl_4,
lbl_5] = __if(`$$label`("lbl_5"),
   __expression(__operator(char_data("__lt")),
   __expression(__identifier(char_data("y"))),
   __expression(__identifier(char_data("m"))))),
[speedSimpleMultipleDep,speedSimpleMultipleDep,lbl_4,lbl_5,_false,
lbl_7] = __statement(`$$label`("lbl_7"),
 __inside(char_data("speedSimpleMultipleDep"),
   char_data("speedSimpleMultipleDep"),char_data("lbl_4"),
     char_data("lbl_5"),char_data("_false")),
 __expression(__operator(char_data("__assignment")),
   __expression(__identifier(char_data("y"))),
   __expression(__constant(char_data("cst__1"))))),
[speedSimpleMultipleDep,speedSimpleMultipleDep,lbl_4,lbl_5,_false,
lbl_8] = __statement(`$$label`("lbl_8"),
 __inside(char_data("speedSimpleMultipleDep"),
   char_data("speedSimpleMultipleDep"),char_data("lbl_4"),
     char_data("lbl_5"),char_data("_false")),
 __expression(__operator(char_data("__incr")),
   __expression(__identifier(char_data("x"))))),
[speedSimpleMultipleDep,speedSimpleMultipleDep,lbl_4,lbl_5,_true,
lbl_6] = __statement(`$$label`("lbl_6"),
 __inside(char_data("speedSimpleMultipleDep"),
   char_data("speedSimpleMultipleDep"),char_data("lbl_4"),
     char_data("lbl_5"),char_data("_true")),
 __expression(__operator(char_data("__incr")),
   __expression(__identifier(char_data("y"))))),
[speedSimpleMultipleDep,speedSimpleMultipleDep,lbl_4,
lbl_9] = __statement(`$$label`("lbl_9"),
 __inside(char_data("speedSimpleMultipleDep"),
   char_data("speedSimpleMultipleDep"),char_data("lbl_4")),__nop()),
[speedSimpleMultipleDep,speedSimpleMultipleDep,
x] = __declaration(__inside(char_data("speedSimpleMultipleDep"),
char_data("speedSimpleMultipleDep")),__identifier(char_data("x")),
__basic(`$$size`("32"),char_data("__integer"))),
[speedSimpleMultipleDep,speedSimpleMultipleDep,
y] = __declaration(__inside(char_data("speedSimpleMultipleDep"),
char_data("speedSimpleMultipleDep")),__identifier(char_data("y")),
__basic(`$$size`("32"),char_data("__integer"))))
table([speedSimpleMultipleDep,
speedSimpleMultipleDep] = [[speedSimpleMultipleDep,speedSimpleMultipleDep],
[speedSimpleMultipleDep,cst__1],[speedSimpleMultipleDep,
speedSimpleMultipleDep],[speedSimpleMultipleDep,speedSimpleMultipleDep,x],
[speedSimpleMultipleDep,speedSimpleMultipleDep,y],[speedSimpleMultipleDep,
speedSimpleMultipleDep,lbl_2],[speedSimpleMultipleDep,
speedSimpleMultipleDep,lbl_3],[speedSimpleMultipleDep,
speedSimpleMultipleDep,lbl_4,lbl_5],[speedSimpleMultipleDep,
speedSimpleMultipleDep,lbl_4],[speedSimpleMultipleDep,
speedSimpleMultipleDep,lbl_4,lbl_5,_true,lbl_6],[speedSimpleMultipleDep,
speedSimpleMultipleDep,lbl_4,lbl_5,_false,lbl_7],[speedSimpleMultipleDep,
speedSimpleMultipleDep,lbl_4,lbl_5,_false,lbl_8],[speedSimpleMultipleDep,
speedSimpleMultipleDep,lbl_4,lbl_9],[speedSimpleMultipleDep,
speedSimpleMultipleDep,lbl_10],[speedSimpleMultipleDep,
speedSimpleMultipleDep,lbl_11]])
[[speedSimpleMultipleDep,speedSimpleMultipleDep,x],[speedSimpleMultipleDep,
speedSimpleMultipleDep,y],[speedSimpleMultipleDep,speedSimpleMultipleDep,
lbl_2],[speedSimpleMultipleDep,speedSimpleMultipleDep,lbl_3],
[speedSimpleMultipleDep,speedSimpleMultipleDep,lbl_4,lbl_5,_true,lbl_6],
[speedSimpleMultipleDep,speedSimpleMultipleDep,lbl_4,lbl_5,_false,lbl_7],
[speedSimpleMultipleDep,speedSimpleMultipleDep,lbl_4,lbl_5,_false,lbl_8],
[speedSimpleMultipleDep,speedSimpleMultipleDep,lbl_4,lbl_9],
[speedSimpleMultipleDep,speedSimpleMultipleDep,lbl_10],
[speedSimpleMultipleDep,speedSimpleMultipleDep,lbl_11]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of n is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of m is 0
body [[speedSimpleMultipleDep,speedSimpleMultipleDep],
[speedSimpleMultipleDep,cst__1],[speedSimpleMultipleDep,
speedSimpleMultipleDep],[speedSimpleMultipleDep,speedSimpleMultipleDep,x],
[speedSimpleMultipleDep,speedSimpleMultipleDep,y],[speedSimpleMultipleDep,
speedSimpleMultipleDep,lbl_2],[speedSimpleMultipleDep,
speedSimpleMultipleDep,lbl_3],[speedSimpleMultipleDep,
speedSimpleMultipleDep,lbl_4,lbl_5],[speedSimpleMultipleDep,
speedSimpleMultipleDep,lbl_4],[speedSimpleMultipleDep,
speedSimpleMultipleDep,lbl_4,lbl_5,_true,lbl_6],[speedSimpleMultipleDep,
speedSimpleMultipleDep,lbl_4,lbl_5,_false,lbl_7],[speedSimpleMultipleDep,
speedSimpleMultipleDep,lbl_4,lbl_5,_false,lbl_8],[speedSimpleMultipleDep,
speedSimpleMultipleDep,lbl_4,lbl_9],[speedSimpleMultipleDep,
speedSimpleMultipleDep,lbl_10],[speedSimpleMultipleDep,
speedSimpleMultipleDep,lbl_11]]
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
collect subscripts __expression(__identifier(char_data("y")))
[y(),[],{},{}]
lbl_5 __si
 counter 1/0 iteration domain {}

lbl_4 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("y")))
[y(),[],{},{}]
collect subscripts __expression(__identifier(char_data("y")))
[y(),[],{},{}]
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
examining cst__1
 is a constant
examining m
examining n
examining speedSimpleMultipleDep
examining x
 has definitions
examining y
 has definitions
while remnants __lt(x,n)to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified TRUE
to be simplified TRUE
to be simplified (0 >= n)
to be simplified ( (n > 0) && (m > 0) )
to be simplified ( (n > 0) && (0 >= m) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (x >= n)
to be simplified ( (n > x) && (m > y) )
to be simplified ( (n > x) && (y >= m) )
to be simplified TRUE
to be simplified TRUE
to be simplified (n > x)
to be simplified (x >= n)
to be simplified (x >= n)
to be simplified (x >= n)
to be simplified (n > x)
to be simplified ( (n > x) && (m > y) )
to be simplified ( (n > x) && (y >= m) )
to be simplified (m > y)
to be simplified (y >= m)
to be simplified (m > y)
to be simplified (y >= m)
to be simplified (m > y)
to be simplified (y >= m)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE

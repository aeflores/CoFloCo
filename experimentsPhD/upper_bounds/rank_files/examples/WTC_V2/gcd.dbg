FrontEnd version J.3
qualif gcd
inside declaration [gcd,gcd]
inside declaration [gcd,cst__2]
table([gcd,cst__2] = __declaration(__inside(char_data("gcd")),
  __constant(`$$value`("0"),char_data("cst__2")),
  __basic(char_data("__integer"))),
   [gcd,gcd] = __declaration(__inside(char_data("gcd")),
     __identifier(char_data("gcd")),
       __function(__identifier(char_data("gcd")),
       __basic(char_data("void")),__identifier(char_data("x")),
       __basic(`$$size`("32"),char_data("__integer")),
       __identifier(char_data("y")),__basic(`$$size`("32"),
         char_data("__integer")))),
   [gcd,gcd,lbl_1] = __if(`$$label`("lbl_1"),
     __expression(__operator(char_data("__le")),
       __expression(__identifier(char_data("x"))),
       __expression(__constant(char_data("cst__2"))))),
   [gcd,gcd,lbl_1,_false,lbl_4] = __statement(`$$label`("lbl_4"),
     __inside(char_data("gcd"),char_data("gcd"),char_data("lbl_1"),
       char_data("_false")),__nop()),
 [gcd,gcd,lbl_1,_true,lbl_3] = __statement(`$$label`("lbl_3"),
   __inside(char_data("gcd"),char_data("gcd"),char_data("lbl_1"),
     char_data("_true")),__return()),
[gcd,gcd,lbl_5] = __if(`$$label`("lbl_5"),
 __expression(__operator(char_data("__le")),
   __expression(__identifier(char_data("y"))),
   __expression(__constant(char_data("cst__2"))))),
[gcd,gcd,lbl_5,_false,lbl_7] = __statement(`$$label`("lbl_7"),
 __inside(char_data("gcd"),char_data("gcd"),char_data("lbl_5"),
   char_data("_false")),__nop()),
[gcd,gcd,lbl_5,_true,lbl_6] = __statement(`$$label`("lbl_6"),
__inside(char_data("gcd"),char_data("gcd"),char_data("lbl_5"),
 char_data("_true")),__return()),
[gcd,gcd,lbl_8] = __while(`$$label`("lbl_8"),
__expression(__operator(char_data("__ne")),
__expression(__identifier(char_data("x"))),
__expression(__identifier(char_data("y"))))),
[gcd,gcd,lbl_8,lbl_9] = __if(`$$label`("lbl_9"),
__expression(__operator(char_data("__lt")),
__expression(__identifier(char_data("x"))),
__expression(__identifier(char_data("y"))))),
[gcd,gcd,lbl_8,lbl_9,_false,lbl_11] = __statement(`$$label`("lbl_11"),
__inside(char_data("gcd"),char_data("gcd"),char_data("lbl_8"),
char_data("lbl_9"),char_data("_false")),
__expression(__operator(char_data("__assignment")),
__expression(__identifier(char_data("x"))),
__expression(__operator(char_data("__subtraction")),
 __expression(__identifier(char_data("x"))),
 __expression(__identifier(char_data("y")))))),
[gcd,gcd,lbl_8,lbl_9,_true,lbl_10] = __statement(`$$label`("lbl_10"),
__inside(char_data("gcd"),char_data("gcd"),char_data("lbl_8"),
char_data("lbl_9"),char_data("_true")),
__expression(__operator(char_data("__assignment")),
__expression(__identifier(char_data("y"))),
__expression(__operator(char_data("__subtraction")),
 __expression(__identifier(char_data("y"))),
 __expression(__identifier(char_data("x")))))))
table([gcd,gcd] = [[gcd,gcd],[gcd,cst__2],[gcd,gcd],[gcd,gcd,lbl_1],[gcd,
gcd,lbl_1,_true,lbl_3],[gcd,gcd,lbl_1,_false,lbl_4],[gcd,gcd,lbl_5],[gcd,
gcd,lbl_5,_true,lbl_6],[gcd,gcd,lbl_5,_false,lbl_7],[gcd,gcd,lbl_8,lbl_9],
[gcd,gcd,lbl_8],[gcd,gcd,lbl_8,lbl_9,_true,lbl_10],[gcd,gcd,lbl_8,lbl_9,
_false,lbl_11]])
[[gcd,gcd,lbl_1,_true,lbl_3],[gcd,gcd,lbl_1,_false,lbl_4],[gcd,gcd,lbl_5,
_true,lbl_6],[gcd,gcd,lbl_5,_false,lbl_7],[gcd,gcd,lbl_8,lbl_9,_true,
lbl_10],[gcd,gcd,lbl_8,lbl_9,_false,lbl_11]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of x is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of y is 0
body [[gcd,gcd],[gcd,cst__2],[gcd,gcd],[gcd,gcd,lbl_1],[gcd,gcd,lbl_1,
_true,lbl_3],[gcd,gcd,lbl_1,_false,lbl_4],[gcd,gcd,lbl_5],[gcd,gcd,lbl_5,
_true,lbl_6],[gcd,gcd,lbl_5,_false,lbl_7],[gcd,gcd,lbl_8,lbl_9],[gcd,gcd,
lbl_8],[gcd,gcd,lbl_8,lbl_9,_true,lbl_10],[gcd,gcd,lbl_8,lbl_9,_false,
lbl_11]]
lbl_1 __si
 counter 1/0 iteration domain {}

lbl_5 __si
 counter 1/0 iteration domain {}

lbl_9 __si
 counter 1/0 iteration domain {}

lbl_8 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("y")))
[y(),[],{},{}]
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
examining cst__2
 is a constant
examining gcd
examining x
examining y
while remnants __ne(x,y)to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified (0 >= x)
to be simplified (x > 0)
to be simplified ( (x > 0) && (0 >= y) )
to be simplified ( (x > 0) && (y > 0) )
to be simplified ( ( (x > 0) && (y > 0) ) && (x = y) )
to be simplified ( ( (x > 0) && (y > 0) ) && ( (x != y) && (y > x) ) )
to be simplified ( ( (x > 0) && (y > 0) ) && ( (x != y) && (x >= y) ) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (0 >= x)
to be simplified (x > 0)
to be simplified (0 >= x)
to be simplified (x > 0)
to be simplified (0 >= y)
to be simplified (y > 0)
to be simplified (0 >= y)
to be simplified (y > 0)
to be simplified (x != y)
to be simplified (x = y)
to be simplified (x = y)
to be simplified (x != y)
to be simplified ( (x != y) && (y > x) )
to be simplified ( (x != y) && (x >= y) )
to be simplified (y > x)
to be simplified (x >= y)
to be simplified (y > x)
to be simplified (x >= y)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (x = y)
to be simplified ( (x != y) && (y > x) )
to be simplified ( (x != y) && (x >= y) )
to be simplified TRUE
to be simplified (x = y)
to be simplified ( (x != y) && (y > x) )
to be simplified ( (x != y) && (x >= y) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE

FrontEnd version J.3
qualif speedFails3
inside declaration [speedFails3,nondet]
inside declaration [speedFails3,speedFails3]
inside declaration [speedFails3,speedFails3,b]
inside declaration [speedFails3,cst__3]
table([speedFails3,
  cst__3] = __declaration(__inside(char_data("speedFails3")),
  __constant(`$$value`("0"),char_data("cst__3")),
  __basic(char_data("__integer"))),
   [speedFails3,nondet] = __declaration(__inside(char_data("speedFails3")),
     __identifier(char_data("nondet")),
     __function(__identifier(char_data("nondet")),__basic(`$$size`("32"),
         char_data("__integer")))),
   [speedFails3,
   speedFails3] = __declaration(__inside(char_data("speedFails3")),
     __identifier(char_data("speedFails3")),
     __function(__identifier(char_data("speedFails3")),
       __basic(`$$size`("32"),char_data("__integer")),
       __identifier(char_data("x")),__basic(`$$size`("32"),
         char_data("__integer")),__identifier(char_data("n")),
       __basic(`$$size`("32"),char_data("__integer")),
       __identifier(char_data("t")),__basic(`$$size`("32"),
         char_data("__integer")))),
   [speedFails3,speedFails3,
   b] = __declaration(__inside(char_data("speedFails3"),
     char_data("speedFails3")),__identifier(char_data("b")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [speedFails3,speedFails3,init_1] = __statement(`$$label`("init_1"),
     __inside(char_data("speedFails3"),char_data("speedFails3")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("b"))),
       __expression(__operator(char_data("__funcall")),
         __expression(__identifier(char_data("nondet")))))),
   [speedFails3,speedFails3,lbl_2] = __while(`$$label`("lbl_2"),
     __expression(__operator(char_data("__conjunction")),
       __expression(__operator(char_data("__ge")),
         __expression(__identifier(char_data("x"))),
         __expression(__constant(char_data("cst__3")))),
       __expression(__operator(char_data("__le")),
         __expression(__identifier(char_data("x"))),
         __expression(__identifier(char_data("n")))))),
   [speedFails3,speedFails3,lbl_2,lbl_4] = __if(`$$label`("lbl_4"),
     __expression(__operator(char_data("__gt")),
       __expression(__identifier(char_data("b"))),
       __expression(__constant(char_data("cst__3"))))),
   [speedFails3,speedFails3,lbl_2,lbl_4,_false,
   lbl_6] = __statement(`$$label`("lbl_6"),
       __inside(char_data("speedFails3"),char_data("speedFails3"),
       char_data("lbl_2"),char_data("lbl_4"),char_data("_false")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("x"))),
       __expression(__operator(char_data("__subtraction")),
         __expression(__identifier(char_data("x"))),
         __expression(__identifier(char_data("t")))))),
   [speedFails3,speedFails3,lbl_2,lbl_4,_true,
   lbl_5] = __statement(`$$label`("lbl_5"),
       __inside(char_data("speedFails3"),char_data("speedFails3"),
       char_data("lbl_2"),char_data("lbl_4"),char_data("_true")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("x"))),
       __expression(__operator(char_data("__addition")),
         __expression(__identifier(char_data("x"))),
         __expression(__identifier(char_data("t")))))),
   [speedFails3,speedFails3,lbl_7] = __statement(`$$label`("lbl_7"),
     __inside(char_data("speedFails3"),char_data("speedFails3")),
   __return()))
table([speedFails3,speedFails3] = [[speedFails3,nondet],[speedFails3,
  speedFails3],[speedFails3,cst__3],[speedFails3,speedFails3],[speedFails3,
  speedFails3,b],[speedFails3,speedFails3,init_1],[speedFails3,speedFails3,
  lbl_2,lbl_4],[speedFails3,speedFails3,lbl_2],[speedFails3,speedFails3,
  lbl_2,lbl_4,_true,lbl_5],[speedFails3,speedFails3,lbl_2,lbl_4,_false,
  lbl_6],[speedFails3,speedFails3,lbl_7]])
[[speedFails3,speedFails3,b],[speedFails3,speedFails3,init_1],[speedFails3,
  speedFails3,lbl_2,lbl_4,_true,lbl_5],[speedFails3,speedFails3,lbl_2,
  lbl_4,_false,lbl_6],[speedFails3,speedFails3,lbl_7]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of x is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of n is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of t is 0
body [[speedFails3,nondet],[speedFails3,speedFails3],[speedFails3,cst__3],
[speedFails3,speedFails3],[speedFails3,speedFails3,b],[speedFails3,
  speedFails3,init_1],[speedFails3,speedFails3,lbl_2,lbl_4],[speedFails3,
  speedFails3,lbl_2],[speedFails3,speedFails3,lbl_2,lbl_4,_true,lbl_5],
[speedFails3,speedFails3,lbl_2,lbl_4,_false,lbl_6],[speedFails3,
  speedFails3,lbl_7]]
collect subscripts __expression(__identifier(char_data("b")))
[b(),[],{},{}]
lbl_4 __si
 counter 1/0 iteration domain {}

lbl_2 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
examining b
 has definitions
examining cst__3
 is a constant
examining n
examining nondet
examining speedFails3
examining t
examining x
while remnants __conjunction(__ge(x,0),__le(x,n))to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified ( (x >= 0) && (n >= x) )
to be simplified ( (0 > x) || (x > n) )
to be simplified ( (0 > x) || (x > n) )
to be simplified ( (x >= 0) && (n >= x) )
to be simplified ( ( (x >= 0) && (n >= x) ) && (b > 0) )
to be simplified ( ( (x >= 0) && (n >= x) ) && (0 >= b) )
to be simplified (b > 0)
to be simplified (0 >= b)
to be simplified (b > 0)
to be simplified (0 >= b)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified ( (0 > x) || (x > n) )
to be simplified ( ( (x >= 0) && (n >= x) ) && (b > 0) )
to be simplified ( ( (x >= 0) && (n >= x) ) && (0 >= b) )
to be simplified TRUE
to be simplified ( (0 > x) || (x > n) )
to be simplified ( ( (x >= 0) && (n >= x) ) && (b > 0) )
to be simplified ( ( (x >= 0) && (n >= x) ) && (0 >= b) )
to be simplified TRUE
to be simplified ( (0 > x) || (x > n) )
to be simplified ( ( (x >= 0) && (n >= x) ) && (b > 0) )
to be simplified ( ( (x >= 0) && (n >= x) ) && (0 >= b) )

FrontEnd version J.3
qualif alain
inside declaration [alain,alain]
inside declaration [alain,alain,c1]
inside declaration [alain,alain,c2]
inside declaration [alain,cst__4]
inside declaration [alain,cst__1]
table([alain,alain] = __declaration(__inside(char_data("alain")),
  __identifier(char_data("alain")),
  __function(__identifier(char_data("alain")),__basic(`$$size`("32"),
      char_data("__integer")),__identifier(char_data("x")),
    __basic(`$$size`("32"),char_data("__integer")),
    __identifier(char_data("y")),__basic(`$$size`("32"),
      char_data("__integer")),__identifier(char_data("z")),
    __basic(`$$size`("32"),char_data("__integer")),
    __identifier(char_data("n1")),__basic(`$$size`("32"),
      char_data("__integer")),__identifier(char_data("n2")),
    __basic(`$$size`("32"),char_data("__integer")))),
   [alain,alain,c1] = __declaration(__inside(char_data("alain"),
     char_data("alain")),__identifier(char_data("c1")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [alain,alain,c2] = __declaration(__inside(char_data("alain"),
     char_data("alain")),__identifier(char_data("c2")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [alain,alain,lbl_10] = __if(`$$label`("lbl_10"),
     __expression(__operator(char_data("__conjunction")),
       __expression(__operator(char_data("__conjunction")),
         __expression(__operator(char_data("__conjunction")),
           __expression(__operator(char_data("__conjunction")),
             __expression(__operator(char_data("__ge")),
               __expression(__identifier(char_data("z"))),
               __expression(__constant(char_data("cst__1")))),
             __expression(__operator(char_data("__ge")),
               __expression(__identifier(char_data("x"))),
               __expression(__constant(char_data("cst__1"))))),
           __expression(__operator(char_data("__ge")),
             __expression(__identifier(char_data("y"))),
             __expression(__constant(char_data("cst__1"))))),
         __expression(__operator(char_data("__ge")),
           __expression(__identifier(char_data("n1"))),
           __expression(__constant(char_data("cst__1"))))),
       __expression(__operator(char_data("__ge")),
         __expression(__identifier(char_data("n2"))),
         __expression(__constant(char_data("cst__1")))))),
   [alain,alain,lbl_10,_false,lbl_20] = __statement(`$$label`("lbl_20"),
     __inside(char_data("alain"),char_data("alain"),char_data("lbl_10"),
       char_data("_false")),__nop()),
 [alain,alain,lbl_10,_true,lbl_11] = __while(`$$label`("lbl_11"),
   __expression(__operator(char_data("__ge")),
     __expression(__operator(char_data("__decr")),
       __expression(__identifier(char_data("n1")))),
     __expression(__constant(char_data("cst__1"))))),
 [alain,alain,lbl_10,_true,lbl_11,
   lbl_12] = __statement(`$$label`("lbl_12"),__inside(char_data("alain"),
     char_data("alain"),char_data("lbl_10"),char_data("_true"),
     char_data("lbl_11")),
     __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("c2"))),
     __expression(__constant(char_data("cst__1"))))),
 [alain,alain,lbl_10,_true,lbl_11,
   lbl_13] = __statement(`$$label`("lbl_13"),__inside(char_data("alain"),
     char_data("alain"),char_data("lbl_10"),char_data("_true"),
     char_data("lbl_11")),__expression(__operator(char_data("__incr")),
     __expression(__identifier(char_data("c1"))))),
 [alain,alain,lbl_10,_true,lbl_11,lbl_14] = __while(`$$label`("lbl_14"),
   __expression(__operator(char_data("__gt")),
     __expression(__identifier(char_data("n2"))),
     __expression(__constant(char_data("cst__1"))))),
 [alain,alain,lbl_10,_true,lbl_11,lbl_14,
 lbl_15] = __statement(`$$label`("lbl_15"),__inside(char_data("alain"),
     char_data("alain"),char_data("lbl_10"),char_data("_true"),
     char_data("lbl_11"),char_data("lbl_14")),
   __expression(__operator(char_data("__decr")),
     __expression(__identifier(char_data("n2"))))),
 [alain,alain,lbl_10,_true,lbl_11,lbl_14,
 lbl_16] = __statement(`$$label`("lbl_16"),__inside(char_data("alain"),
     char_data("alain"),char_data("lbl_10"),char_data("_true"),
     char_data("lbl_11"),char_data("lbl_14")),
   __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("z"))),
     __expression(__identifier(char_data("y"))))),
 [alain,alain,lbl_10,_true,lbl_11,lbl_14,
 lbl_17] = __statement(`$$label`("lbl_17"),__inside(char_data("alain"),
     char_data("alain"),char_data("lbl_10"),char_data("_true"),
     char_data("lbl_11"),char_data("lbl_14")),
   __expression(__operator(char_data("__incr")),
     __expression(__identifier(char_data("c2"))))),
 [alain,alain,lbl_10,_true,lbl_11,
   lbl_18] = __statement(`$$label`("lbl_18"),__inside(char_data("alain"),
     char_data("alain"),char_data("lbl_10"),char_data("_true"),
     char_data("lbl_11")),
     __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("z"))),
     __expression(__operator(char_data("__addition")),
       __expression(__identifier(char_data("z"))),
       __expression(__identifier(char_data("y")))))),
 [alain,alain,lbl_10,_true,lbl_11,
   lbl_19] = __statement(`$$label`("lbl_19"),__inside(char_data("alain"),
     char_data("alain"),char_data("lbl_10"),char_data("_true"),
     char_data("lbl_11")),
     __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("n2"))),
     __expression(__identifier(char_data("z"))))),
 [alain,alain,lbl_2] = __statement(`$$label`("lbl_2"),
   __inside(char_data("alain"),char_data("alain")),
   __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("c1"))),
     __expression(__constant(char_data("cst__1"))))),
 [alain,alain,lbl_21] = __statement(`$$label`("lbl_21"),
   __inside(char_data("alain"),char_data("alain")),__return()),
[alain,alain,lbl_3] = __if(`$$label`("lbl_3"),
 __expression(__operator(char_data("__le")),
   __expression(__identifier(char_data("n2"))),
   __expression(__operator(char_data("__multiplication")),
     __expression(__constant(char_data("cst__4"))),
     __expression(__identifier(char_data("y")))))),
[alain,alain,lbl_3,_false,lbl_6] = __statement(`$$label`("lbl_6"),
 __inside(char_data("alain"),char_data("alain"),char_data("lbl_3"),
   char_data("_false")),__nop()),
[alain,alain,lbl_3,_true,lbl_5] = __statement(`$$label`("lbl_5"),
__inside(char_data("alain"),char_data("alain"),char_data("lbl_3"),
 char_data("_true")),__return()),
[alain,alain,lbl_7] = __if(`$$label`("lbl_7"),
__expression(__operator(char_data("__le")),
__expression(__identifier(char_data("n2"))),
__expression(__operator(char_data("__addition")),
 __expression(__identifier(char_data("z"))),
 __expression(__identifier(char_data("y")))))),
[alain,alain,lbl_7,_false,lbl_9] = __statement(`$$label`("lbl_9"),
__inside(char_data("alain"),char_data("alain"),char_data("lbl_7"),
char_data("_false")),__nop()),
[alain,alain,lbl_7,_true,lbl_8] = __statement(`$$label`("lbl_8"),
__inside(char_data("alain"),char_data("alain"),char_data("lbl_7"),
char_data("_true")),__return()),
[alain,cst__1] = __declaration(__inside(char_data("alain")),
__constant(`$$value`("0"),char_data("cst__1")),
__basic(char_data("__integer"))),
[alain,cst__4] = __declaration(__inside(char_data("alain")),
__constant(`$$value`("2"),char_data("cst__4")),
__basic(char_data("__integer"))))
table([alain,alain] = [[alain,alain],[alain,cst__4],[alain,cst__1],[alain,
alain],[alain,alain,c1],[alain,alain,c2],[alain,alain,lbl_2],[alain,alain,
lbl_3],[alain,alain,lbl_3,_true,lbl_5],[alain,alain,lbl_3,_false,lbl_6],
[alain,alain,lbl_7],[alain,alain,lbl_7,_true,lbl_8],[alain,alain,lbl_7,
_false,lbl_9],[alain,alain,lbl_10,_true,lbl_11],[alain,alain,lbl_10],
[alain,alain,lbl_10,_true,lbl_11,lbl_12],[alain,alain,lbl_10,_true,lbl_11,
lbl_13],[alain,alain,lbl_10,_true,lbl_11,lbl_14],[alain,alain,lbl_10,_true,
lbl_11,lbl_14,lbl_15],[alain,alain,lbl_10,_true,lbl_11,lbl_14,lbl_16],
[alain,alain,lbl_10,_true,lbl_11,lbl_14,lbl_17],[alain,alain,lbl_10,_true,
lbl_11,lbl_18],[alain,alain,lbl_10,_true,lbl_11,lbl_19],[alain,alain,
lbl_10,_false,lbl_20],[alain,alain,lbl_21]])
[[alain,alain,c1],[alain,alain,c2],[alain,alain,lbl_2],[alain,alain,lbl_3,
_true,lbl_5],[alain,alain,lbl_3,_false,lbl_6],[alain,alain,lbl_7,_true,
lbl_8],[alain,alain,lbl_7,_false,lbl_9],[alain,alain,lbl_10,_true,lbl_11,
lbl_12],[alain,alain,lbl_10,_true,lbl_11,lbl_13],[alain,alain,lbl_10,_true,
lbl_11,lbl_14,lbl_15],[alain,alain,lbl_10,_true,lbl_11,lbl_14,lbl_16],
[alain,alain,lbl_10,_true,lbl_11,lbl_14,lbl_17],[alain,alain,lbl_10,_true,
lbl_11,lbl_18],[alain,alain,lbl_10,_true,lbl_11,lbl_19],[alain,alain,
lbl_10,_false,lbl_20],[alain,alain,lbl_21]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of x is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of y is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of z is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of n1 is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of n2 is 0
body [[alain,alain],[alain,cst__4],[alain,cst__1],[alain,alain],[alain,
alain,c1],[alain,alain,c2],[alain,alain,lbl_2],[alain,alain,lbl_3],[alain,
alain,lbl_3,_true,lbl_5],[alain,alain,lbl_3,_false,lbl_6],[alain,alain,
lbl_7],[alain,alain,lbl_7,_true,lbl_8],[alain,alain,lbl_7,_false,lbl_9],
[alain,alain,lbl_10,_true,lbl_11],[alain,alain,lbl_10],[alain,alain,lbl_10,
_true,lbl_11,lbl_12],[alain,alain,lbl_10,_true,lbl_11,lbl_13],[alain,alain,
lbl_10,_true,lbl_11,lbl_14],[alain,alain,lbl_10,_true,lbl_11,lbl_14,
lbl_15],[alain,alain,lbl_10,_true,lbl_11,lbl_14,lbl_16],[alain,alain,
lbl_10,_true,lbl_11,lbl_14,lbl_17],[alain,alain,lbl_10,_true,lbl_11,
lbl_18],[alain,alain,lbl_10,_true,lbl_11,lbl_19],[alain,alain,lbl_10,
_false,lbl_20],[alain,alain,lbl_21]]
collect subscripts __expression(__identifier(char_data("c1")))
[c1(),[],{},{}]
lbl_3 __si
 counter 1/0 iteration domain {}

lbl_7 __si
 counter 1/0 iteration domain {}

lbl_11 __while
 counter 1/0
lbl_10 __si
 counter 1/0 iteration domain {}

collect subscripts __expression(__identifier(char_data("c2")))
[c2(),[],{},{}]
collect subscripts __expression(__identifier(char_data("c1")))
[c1(),[],{},{}]
lbl_14 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("n2")))
[n2(),[],{},{}]
collect subscripts __expression(__identifier(char_data("z")))
[z(),[],{},{}]
collect subscripts __expression(__identifier(char_data("c2")))
[c2(),[],{},{}]
collect subscripts __expression(__identifier(char_data("z")))
[z(),[],{},{}]
collect subscripts __expression(__identifier(char_data("n2")))
[n2(),[],{},{}]
collect subscripts __expression(__identifier(char_data("n1")))
[n1(),[],{},{}]
examining alain
examining c1
 has definitions
examining c2
 has definitions
examining cst__1
 is a constant
examining cst__4
 is a constant
examining n1
examining n2
examining x
examining y
examining z
while remnants __ge(n1,0)while remnants __gt(n2,0)to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified TRUE
to be simplified TRUE
to be simplified (2*y >= n2)
to be simplified (n2 > 2*y)
to be simplified ( (n2 > 2*y) && (y+z >= n2) )
to be simplified ( (n2 > 2*y) && ( (n2 > y+z) && ( ( ( ( (0 > z) || (0 > x) )
 || (0 > y) ) || (0 > n1) ) || (0 > n2) ) ) )
to be simplified ( (n2 > 2*y) && ( (n2 > y+z) && ( ( ( ( (z >= 0) && (x >= 0)
 ) && (y >= 0) ) && (n1 >= 0) ) && (n2 >= 0) ) ) )
to be simplified ( ( (n2 > 2*y) && ( (n2 > y+z) && ( ( ( ( (z >= 0) && (x >= 0)
 ) && (y >= 0) ) && (n1 >= 0) ) && (n2 >= 0) ) ) ) && (1 > n1) )
to be simplified ( ( (n2 > 2*y) && ( (n2 > y+z) && ( ( ( ( (z >= 0) && (x >= 0)
 ) && (y >= 0) ) && (n1 >= 0) ) && (n2 >= 0) ) ) ) && ( (n1 >= 1) && (0 >= n2)
 ) )
to be simplified ( ( (n2 > 2*y) && ( (n2 > y+z) && ( ( ( ( (z >= 0) && (x >= 0)
 ) && (y >= 0) ) && (n1 >= 0) ) && (n2 >= 0) ) ) ) && ( (n1 >= 1) && (n2 > 0)
 ) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified ( ( ( ( (z >= 0) && (x >= 0) ) && (y >= 0) ) && (n1 >= 0) )
 && (n2 >= 0) )
to be simplified ( ( ( ( (0 > z) || (0 > x) ) || (0 > y) ) || (0 > n1) ) || 
(0 > n2) )
to be simplified ( ( ( ( (z >= 0) && (x >= 0) ) && (y >= 0) ) && (n1 >= 0) )
 && (n2 >= 0) )
to be simplified ( ( ( ( (0 > z) || (0 > x) ) || (0 > y) ) || (0 > n1) ) || 
(0 > n2) )
to be simplified TRUE
to be simplified (n2 > 0)
to be simplified (0 >= n2)
to be simplified (0 >= n2)
to be simplified (0 >= n2)
to be simplified (n2 > 0)
to be simplified (n2 > 0)
to be simplified (2*y >= n2)
to be simplified (n2 > 2*y)
to be simplified (2*y >= n2)
to be simplified (n2 > 2*y)
to be simplified (y+z >= n2)
to be simplified (n2 > y+z)
to be simplified (y+z >= n2)
to be simplified (n2 > y+z)
to be simplified ( (n2 > y+z) && ( ( ( ( (z >= 0) && (x >= 0) ) && (y >= 0) )
 && (n1 >= 0) ) && (n2 >= 0) ) )
to be simplified ( (n2 > y+z) && ( ( ( ( (0 > z) || (0 > x) ) || (0 > y) ) || 
(0 > n1) ) || (0 > n2) ) )
to be simplified ( (n2 > y+z) && ( ( ( ( (z >= 0) && (x >= 0) ) && (y >= 0) )
 && (n1 >= 0) ) && (n2 >= 0) ) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (n1 >= 0)
to be simplified (0 > n1)
to be simplified (n1 >= 0)
to be simplified (n1 >= 0)
to be simplified ( (n1 >= 0) && (0 >= n2) )
to be simplified ( (n1 >= 0) && (n2 > 0) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (1 > n1)
to be simplified ( (n1 >= 1) && (0 >= n2) )
to be simplified ( (n1 >= 1) && (n2 > 0) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (0 >= n2)
to be simplified (n2 > 0)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE

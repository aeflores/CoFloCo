FrontEnd version J.3
qualif sipmabubble
inside declaration [sipmabubble,sipmabubble]
inside declaration [sipmabubble,sipmabubble,A]
inside declaration [sipmabubble,sipmabubble,tmp]
inside declaration [sipmabubble,sipmabubble,i]
inside declaration [sipmabubble,sipmabubble,j]
inside declaration [sipmabubble,cst__7]
inside declaration [sipmabubble,cst__4]
inside declaration [sipmabubble,cst__1]
table([sipmabubble,
  cst__1] = __declaration(__inside(char_data("sipmabubble")),
  __constant(`$$value`("100"),char_data("cst__1")),
  __basic(char_data("__integer"))),
   [sipmabubble,cst__4] = __declaration(__inside(char_data("sipmabubble")),
     __constant(`$$value`("0"),char_data("cst__4")),
     __basic(char_data("__integer"))),
   [sipmabubble,cst__7] = __declaration(__inside(char_data("sipmabubble")),
     __constant(`$$value`("1"),char_data("cst__7")),
     __basic(char_data("__integer"))),
   [sipmabubble,
   sipmabubble] = __declaration(__inside(char_data("sipmabubble")),
     __identifier(char_data("sipmabubble")),
     __function(__identifier(char_data("sipmabubble")),
       __basic(char_data("void")),__identifier(char_data("n")),
       __basic(`$$size`("32"),char_data("__integer")))),
   [sipmabubble,sipmabubble,
   A] = __declaration(__inside(char_data("sipmabubble"),
     char_data("sipmabubble")),__identifier(char_data("A")),
     __array(__basic(`$$size`("32"),char_data("__integer")),
       __expression(__constant(char_data("cst__1"))))),
   [sipmabubble,sipmabubble,
   i] = __declaration(__inside(char_data("sipmabubble"),
     char_data("sipmabubble")),__identifier(char_data("i")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [sipmabubble,sipmabubble,
   j] = __declaration(__inside(char_data("sipmabubble"),
     char_data("sipmabubble")),__identifier(char_data("j")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [sipmabubble,sipmabubble,lbl_2] = __statement(`$$label`("lbl_2"),
     __inside(char_data("sipmabubble"),char_data("sipmabubble")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("i"))),
       __expression(__identifier(char_data("n"))))),
   [sipmabubble,sipmabubble,lbl_3] = __while(`$$label`("lbl_3"),
     __expression(__operator(char_data("__ge")),
       __expression(__identifier(char_data("i"))),
       __expression(__constant(char_data("cst__4"))))),
   [sipmabubble,sipmabubble,lbl_3,
     lbl_14] = __statement(`$$label`("lbl_14"),
     __inside(char_data("sipmabubble"),char_data("sipmabubble"),
       char_data("lbl_3")),
       __expression(__operator(char_data("_post_decr")),
       __expression(__identifier(char_data("i"))))),
   [sipmabubble,sipmabubble,lbl_3,lbl_5] = __statement(`$$label`("lbl_5"),
     __inside(char_data("sipmabubble"),char_data("sipmabubble"),
       char_data("lbl_3")),
       __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("j"))),
       __expression(__constant(char_data("cst__4"))))),
   [sipmabubble,sipmabubble,lbl_3,lbl_6] = __while(`$$label`("lbl_6"),
     __expression(__operator(char_data("__le")),
       __expression(__identifier(char_data("j"))),
       __expression(__operator(char_data("__subtraction")),
         __expression(__identifier(char_data("i"))),
         __expression(__constant(char_data("cst__7")))))),
   [sipmabubble,sipmabubble,lbl_3,lbl_6,
   lbl_13] = __statement(`$$label`("lbl_13"),
     __inside(char_data("sipmabubble"),char_data("sipmabubble"),
       char_data("lbl_3"),char_data("lbl_6")),
     __expression(__operator(char_data("__incr")),
       __expression(__identifier(char_data("j"))))),
   [sipmabubble,sipmabubble,lbl_3,lbl_6,lbl_8] = __if(`$$label`("lbl_8"),
     __expression(__operator(char_data("__gt")),
       __expression(__operator(char_data("__subscript")),
         __expression(__identifier(char_data("A"))),
         __expression(__identifier(char_data("j")))),
       __expression(__operator(char_data("__subscript")),
         __expression(__identifier(char_data("A"))),
         __expression(__operator(char_data("__addition")),
           __expression(__identifier(char_data("j"))),
           __expression(__constant(char_data("cst__7"))))))),
   [sipmabubble,sipmabubble,lbl_3,lbl_6,lbl_8,_false,
   lbl_12] = __statement(`$$label`("lbl_12"),
     __inside(char_data("sipmabubble"),char_data("sipmabubble"),
       char_data("lbl_3"),char_data("lbl_6"),char_data("lbl_8"),
       char_data("_false")),__nop()),
 [sipmabubble,sipmabubble,lbl_3,lbl_6,lbl_8,_true,
 lbl_10] = __statement(`$$label`("lbl_10"),
     __inside(char_data("sipmabubble"),char_data("sipmabubble"),
     char_data("lbl_3"),char_data("lbl_6"),char_data("lbl_8"),
     char_data("_true")),
     __expression(__operator(char_data("__assignment")),
     __expression(__operator(char_data("__subscript")),
       __expression(__identifier(char_data("A"))),
       __expression(__identifier(char_data("j")))),
     __expression(__operator(char_data("__subscript")),
       __expression(__identifier(char_data("A"))),
       __expression(__operator(char_data("__addition")),
         __expression(__identifier(char_data("j"))),
         __expression(__constant(char_data("cst__7"))))))),
 [sipmabubble,sipmabubble,lbl_3,lbl_6,lbl_8,_true,
 lbl_11] = __statement(`$$label`("lbl_11"),
     __inside(char_data("sipmabubble"),char_data("sipmabubble"),
     char_data("lbl_3"),char_data("lbl_6"),char_data("lbl_8"),
     char_data("_true")),
     __expression(__operator(char_data("__assignment")),
     __expression(__operator(char_data("__subscript")),
       __expression(__identifier(char_data("A"))),
       __expression(__operator(char_data("__addition")),
         __expression(__identifier(char_data("j"))),
         __expression(__constant(char_data("cst__7"))))),
     __expression(__identifier(char_data("tmp"))))),
 [sipmabubble,sipmabubble,lbl_3,lbl_6,lbl_8,_true,
 lbl_9] = __statement(`$$label`("lbl_9"),__inside(char_data("sipmabubble"),
     char_data("sipmabubble"),char_data("lbl_3"),char_data("lbl_6"),
     char_data("lbl_8"),char_data("_true")),
   __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("tmp"))),
     __expression(__operator(char_data("__subscript")),
       __expression(__identifier(char_data("A"))),
       __expression(__identifier(char_data("j")))))),
 [sipmabubble,sipmabubble,
 tmp] = __declaration(__inside(char_data("sipmabubble"),
   char_data("sipmabubble")),__identifier(char_data("tmp")),
   __basic(`$$size`("32"),char_data("__integer"))))
table([sipmabubble,sipmabubble] = [[sipmabubble,sipmabubble],[sipmabubble,
  cst__7],[sipmabubble,cst__4],[sipmabubble,cst__1],[sipmabubble,
  sipmabubble],[sipmabubble,sipmabubble,A],[sipmabubble,sipmabubble,tmp],
[sipmabubble,sipmabubble,i],[sipmabubble,sipmabubble,j],[sipmabubble,
  sipmabubble,lbl_2],[sipmabubble,sipmabubble,lbl_3],[sipmabubble,
  sipmabubble,lbl_3,lbl_5],[sipmabubble,sipmabubble,lbl_3,lbl_6,lbl_8],
[sipmabubble,sipmabubble,lbl_3,lbl_6],[sipmabubble,sipmabubble,lbl_3,lbl_6,
  lbl_8,_true,lbl_9],[sipmabubble,sipmabubble,lbl_3,lbl_6,lbl_8,_true,
  lbl_10],[sipmabubble,sipmabubble,lbl_3,lbl_6,lbl_8,_true,lbl_11],
[sipmabubble,sipmabubble,lbl_3,lbl_6,lbl_8,_false,lbl_12],[sipmabubble,
  sipmabubble,lbl_3,lbl_6,lbl_13],[sipmabubble,sipmabubble,lbl_3,lbl_14]])
[[sipmabubble,sipmabubble,A],[sipmabubble,sipmabubble,tmp],[sipmabubble,
  sipmabubble,i],[sipmabubble,sipmabubble,j],[sipmabubble,sipmabubble,
lbl_2],[sipmabubble,sipmabubble,lbl_3,lbl_5],[sipmabubble,sipmabubble,
  lbl_3,lbl_6,lbl_8,_true,lbl_9],[sipmabubble,sipmabubble,lbl_3,lbl_6,
  lbl_8,_true,lbl_10],[sipmabubble,sipmabubble,lbl_3,lbl_6,lbl_8,_true,
  lbl_11],[sipmabubble,sipmabubble,lbl_3,lbl_6,lbl_8,_false,lbl_12],
[sipmabubble,sipmabubble,lbl_3,lbl_6,lbl_13],[sipmabubble,sipmabubble,
  lbl_3,lbl_14]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of n is 0
body [[sipmabubble,sipmabubble],[sipmabubble,cst__7],[sipmabubble,cst__4],
[sipmabubble,cst__1],[sipmabubble,sipmabubble],[sipmabubble,sipmabubble,A],
[sipmabubble,sipmabubble,tmp],[sipmabubble,sipmabubble,i],[sipmabubble,
  sipmabubble,j],[sipmabubble,sipmabubble,lbl_2],[sipmabubble,sipmabubble,
  lbl_3],[sipmabubble,sipmabubble,lbl_3,lbl_5],[sipmabubble,sipmabubble,
  lbl_3,lbl_6,lbl_8],[sipmabubble,sipmabubble,lbl_3,lbl_6],[sipmabubble,
  sipmabubble,lbl_3,lbl_6,lbl_8,_true,lbl_9],[sipmabubble,sipmabubble,
  lbl_3,lbl_6,lbl_8,_true,lbl_10],[sipmabubble,sipmabubble,lbl_3,lbl_6,
  lbl_8,_true,lbl_11],[sipmabubble,sipmabubble,lbl_3,lbl_6,lbl_8,_false,
  lbl_12],[sipmabubble,sipmabubble,lbl_3,lbl_6,lbl_13],[sipmabubble,
  sipmabubble,lbl_3,lbl_14]]
collect subscripts __expression(__identifier(char_data("i")))
[i(),[],{},{}]
lbl_3 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("j")))
[j(),[],{},{}]
lbl_8 __si
 counter 1/0 iteration domain {}

lbl_6 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("tmp")))
[tmp(),[],{},{}]
collect subscripts __expression(__operator(char_data("__subscript")),
__expression(__identifier(char_data("A"))),
__expression(__identifier(char_data("j"))))
collect subscripts __expression(__identifier(char_data("A")))
[A(),[],{},{}]
[A(),[j],{},{j()}]
collect subscripts __expression(__operator(char_data("__subscript")),
__expression(__identifier(char_data("A"))),
__expression(__identifier(char_data("j"))))
collect subscripts __expression(__identifier(char_data("A")))
[A(),[],{},{}]
[A(),[j],{},{j()}]
collect subscripts __expression(__operator(char_data("__subscript")),
__expression(__identifier(char_data("A"))),
__expression(__operator(char_data("__addition")),
__expression(__identifier(char_data("j"))),
__expression(__constant(char_data("cst__7")))))
collect subscripts __expression(__identifier(char_data("A")))
[A(),[],{},{}]
[A(),[j+1],{},{j()}]
collect subscripts __expression(__operator(char_data("__subscript")),
__expression(__identifier(char_data("A"))),
__expression(__operator(char_data("__addition")),
__expression(__identifier(char_data("j"))),
__expression(__constant(char_data("cst__7")))))
collect subscripts __expression(__identifier(char_data("A")))
[A(),[],{},{}]
[A(),[j+1],{},{j()}]
collect subscripts __expression(__identifier(char_data("j")))
[j(),[],{},{}]
collect subscripts __expression(__identifier(char_data("i")))
[i(),[],{},{}]
examining A
 is an array
examining cst__1
 is a constant
examining cst__4
 is a constant
examining cst__7
 is a constant
examining i
 has definitions
examining j
 has definitions
examining n
examining sipmabubble
examining tmp
 has definitions
while remnants __ge(i,0)while remnants __le(j,i-1)to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified TRUE
to be simplified TRUE
to be simplified (0 > n)
to be simplified (n >= 0)
to be simplified ( (n >= 0) && (1 > n) )
to be simplified ( (n >= 0) && (n >= 1) )
to be simplified ( (n >= 0) && (n >= 1) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (i >= 0)
to be simplified (0 > i)
to be simplified (i >= 0)
to be simplified (i >= 0)
to be simplified (i >= j+1)
to be simplified (j+1 > i)
to be simplified (j+1 > i)
to be simplified (j+1 > i)
to be simplified (i >= j+1)
to be simplified (i >= j+1)
to be simplified (i >= j+1)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (0 > i)
to be simplified (i >= 0)
to be simplified ( (i >= 0) && (1 > i) )
to be simplified ( (i >= 0) && (i >= 1) )
to be simplified ( (i >= 0) && (i >= 1) )
to be simplified TRUE
to be simplified TRUE
to be simplified (j+1 > i)
to be simplified (i >= j+1)
to be simplified (i >= j+1)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE

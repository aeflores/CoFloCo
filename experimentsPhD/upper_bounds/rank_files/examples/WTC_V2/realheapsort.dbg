FrontEnd version J.3
qualif realheapsort
inside declaration [realheapsort,realheapsort]
inside declaration [realheapsort,realheapsort,t]
inside declaration [realheapsort,realheapsort,temp]
inside declaration [realheapsort,realheapsort,k]
inside declaration [realheapsort,realheapsort,j]
inside declaration [realheapsort,realheapsort,m]
inside declaration [realheapsort,cst__8]
inside declaration [realheapsort,cst__5]
inside declaration [realheapsort,cst__3]
inside declaration [realheapsort,cst__1]
table([realheapsort,
cst__1] = __declaration(__inside(char_data("realheapsort")),
  __constant(`$$value`("100"),char_data("cst__1")),
  __basic(char_data("__integer"))),
   [realheapsort,
     cst__3] = __declaration(__inside(char_data("realheapsort")),
     __constant(`$$value`("2"),char_data("cst__3")),
     __basic(char_data("__integer"))),
   [realheapsort,
     cst__5] = __declaration(__inside(char_data("realheapsort")),
     __constant(`$$value`("1"),char_data("cst__5")),
     __basic(char_data("__integer"))),
   [realheapsort,
     cst__8] = __declaration(__inside(char_data("realheapsort")),
     __constant(`$$value`("0"),char_data("cst__8")),
     __basic(char_data("__integer"))),
   [realheapsort,
   realheapsort] = __declaration(__inside(char_data("realheapsort")),
     __identifier(char_data("realheapsort")),
     __function(__identifier(char_data("realheapsort")),
       __basic(char_data("void")),__identifier(char_data("N")),
       __basic(`$$size`("32"),char_data("__integer")))),
   [realheapsort,realheapsort,
   j] = __declaration(__inside(char_data("realheapsort"),
     char_data("realheapsort")),__identifier(char_data("j")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [realheapsort,realheapsort,
   k] = __declaration(__inside(char_data("realheapsort"),
     char_data("realheapsort")),__identifier(char_data("k")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [realheapsort,realheapsort,lbl_2] = __if(`$$label`("lbl_2"),
     __expression(__operator(char_data("__gt")),
       __expression(__identifier(char_data("N"))),
       __expression(__constant(char_data("cst__3"))))),
   [realheapsort,realheapsort,lbl_2,_false,
   lbl_29] = __statement(`$$label`("lbl_29"),
     __inside(char_data("realheapsort"),char_data("realheapsort"),
       char_data("lbl_2"),char_data("_false")),__nop()),
 [realheapsort,realheapsort,lbl_2,_true,
   lbl_13] = __for(`$$label`("lbl_13"),
   __init(__expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("k"))),
     __expression(__constant(char_data("cst__8"))))),
   __test(__expression(__operator(char_data("__le")),
     __expression(__identifier(char_data("k"))),
     __expression(__operator(char_data("__subtraction")),
       __expression(__identifier(char_data("N"))),
       __expression(__constant(char_data("cst__3")))))),
   __next(__expression(__operator(char_data("_post_incr")),
     __expression(__identifier(char_data("k")))))),
 [realheapsort,realheapsort,lbl_2,_true,lbl_13,
 lbl_14] = __statement(`$$label`("lbl_14"),
   __inside(char_data("realheapsort"),char_data("realheapsort"),
     char_data("lbl_2"),char_data("_true"),char_data("lbl_13")),
   __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("j"))),
     __expression(__constant(char_data("cst__8"))))),
 [realheapsort,realheapsort,lbl_2,_true,lbl_13,
 lbl_15] = __statement(`$$label`("lbl_15"),
   __inside(char_data("realheapsort"),char_data("realheapsort"),
     char_data("lbl_2"),char_data("_true"),char_data("lbl_13")),
   __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("m"))),
     __expression(__constant(char_data("cst__8"))))),
 [realheapsort,realheapsort,lbl_2,_true,lbl_13,
 lbl_16] = __statement(`$$label`("lbl_16"),
   __inside(char_data("realheapsort"),char_data("realheapsort"),
     char_data("lbl_2"),char_data("_true"),char_data("lbl_13")),
   __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("temp"))),
     __expression(__operator(char_data("__subscript")),
       __expression(__identifier(char_data("t"))),
       __expression(__operator(char_data("__subtraction")),
         __expression(__operator(char_data("__subtraction")),
           __expression(__identifier(char_data("N"))),
           __expression(__identifier(char_data("k")))),
         __expression(__constant(char_data("cst__5"))))))),
 [realheapsort,realheapsort,lbl_2,_true,lbl_13,
 lbl_17] = __statement(`$$label`("lbl_17"),
   __inside(char_data("realheapsort"),char_data("realheapsort"),
     char_data("lbl_2"),char_data("_true"),char_data("lbl_13")),
   __expression(__operator(char_data("__assignment")),
     __expression(__operator(char_data("__subscript")),
       __expression(__identifier(char_data("t"))),
       __expression(__operator(char_data("__subtraction")),
         __expression(__operator(char_data("__subtraction")),
           __expression(__identifier(char_data("N"))),
           __expression(__identifier(char_data("k")))),
         __expression(__constant(char_data("cst__5"))))),
     __expression(__operator(char_data("__subscript")),
       __expression(__identifier(char_data("t"))),
       __expression(__constant(char_data("cst__8")))))),
 [realheapsort,realheapsort,lbl_2,_true,lbl_13,
 lbl_18] = __statement(`$$label`("lbl_18"),
   __inside(char_data("realheapsort"),char_data("realheapsort"),
     char_data("lbl_2"),char_data("_true"),char_data("lbl_13")),
   __expression(__operator(char_data("__assignment")),
     __expression(__operator(char_data("__subscript")),
       __expression(__identifier(char_data("t"))),
       __expression(__constant(char_data("cst__8")))),
     __expression(__identifier(char_data("temp"))))),
 [realheapsort,realheapsort,lbl_2,_true,lbl_13,
 lbl_19] = __while(`$$label`("lbl_19"),
   __expression(__operator(char_data("__le")),
     __expression(__operator(char_data("__addition")),
       __expression(__operator(char_data("__multiplication")),
         __expression(__constant(char_data("cst__3"))),
         __expression(__identifier(char_data("j")))),
       __expression(__constant(char_data("cst__5")))),
     __expression(__operator(char_data("__subtraction")),
       __expression(__operator(char_data("__subtraction")),
         __expression(__identifier(char_data("N"))),
         __expression(__constant(char_data("cst__3")))),
       __expression(__identifier(char_data("k")))))),
 [realheapsort,realheapsort,lbl_2,_true,lbl_13,lbl_19,
 lbl_20] = __if(`$$label`("lbl_20"),
   __expression(__operator(char_data("__disjunction")),
     __expression(__operator(char_data("__eq")),
       __expression(__operator(char_data("__addition")),
         __expression(__operator(char_data("__multiplication")),
           __expression(__constant(char_data("cst__3"))),
           __expression(__identifier(char_data("j")))),
         __expression(__constant(char_data("cst__5")))),
       __expression(__operator(char_data("__subtraction")),
         __expression(__operator(char_data("__subtraction")),
           __expression(__identifier(char_data("N"))),
           __expression(__constant(char_data("cst__3")))),
         __expression(__identifier(char_data("k"))))),
     __expression(__operator(char_data("__lt")),
       __expression(__operator(char_data("__subscript")),
         __expression(__identifier(char_data("t"))),
         __expression(__operator(char_data("__addition")),
           __expression(__operator(char_data("__multiplication")),
             __expression(__constant(char_data("cst__3"))),
             __expression(__identifier(char_data("j")))),
           __expression(__constant(char_data("cst__5"))))),
       __expression(__operator(char_data("__subscript")),
         __expression(__identifier(char_data("t"))),
         __expression(__operator(char_data("__addition")),
           __expression(__operator(char_data("__multiplication")),
             __expression(__constant(char_data("cst__3"))),
             __expression(__identifier(char_data("j")))),
           __expression(__constant(char_data("cst__3")))))))),
 [realheapsort,realheapsort,lbl_2,_true,lbl_13,lbl_19,lbl_20,_false,
 lbl_22] = __statement(`$$label`("lbl_22"),
   __inside(char_data("realheapsort"),char_data("realheapsort"),
     char_data("lbl_2"),char_data("_true"),char_data("lbl_13"),
     char_data("lbl_19"),char_data("lbl_20"),char_data("_false")),
   __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("m"))),
     __expression(__operator(char_data("__addition")),
       __expression(__operator(char_data("__multiplication")),
         __expression(__constant(char_data("cst__3"))),
         __expression(__identifier(char_data("j")))),
       __expression(__constant(char_data("cst__3")))))),
 [realheapsort,realheapsort,lbl_2,_true,lbl_13,lbl_19,lbl_20,_true,
 lbl_21] = __statement(`$$label`("lbl_21"),
   __inside(char_data("realheapsort"),char_data("realheapsort"),
     char_data("lbl_2"),char_data("_true"),char_data("lbl_13"),
     char_data("lbl_19"),char_data("lbl_20"),char_data("_true")),
   __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("m"))),
     __expression(__operator(char_data("__addition")),
       __expression(__operator(char_data("__multiplication")),
         __expression(__constant(char_data("cst__3"))),
         __expression(__identifier(char_data("j")))),
       __expression(__constant(char_data("cst__5")))))),
 [realheapsort,realheapsort,lbl_2,_true,lbl_13,lbl_19,
 lbl_23] = __if(`$$label`("lbl_23"),
   __expression(__operator(char_data("__gt")),
     __expression(__operator(char_data("__subscript")),
       __expression(__identifier(char_data("t"))),
       __expression(__identifier(char_data("j")))),
     __expression(__operator(char_data("__subscript")),
       __expression(__identifier(char_data("t"))),
       __expression(__identifier(char_data("m")))))),
 [realheapsort,realheapsort,lbl_2,_true,lbl_13,lbl_19,lbl_23,_false,
 lbl_28] = __statement(`$$label`("lbl_28"),
   __inside(char_data("realheapsort"),char_data("realheapsort"),
     char_data("lbl_2"),char_data("_true"),char_data("lbl_13"),
     char_data("lbl_19"),char_data("lbl_23"),char_data("_false")),
   __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("j"))),
     __expression(__identifier(char_data("N"))))),
 [realheapsort,realheapsort,lbl_2,_true,lbl_13,lbl_19,lbl_23,_true,
 lbl_24] = __statement(`$$label`("lbl_24"),
   __inside(char_data("realheapsort"),char_data("realheapsort"),
     char_data("lbl_2"),char_data("_true"),char_data("lbl_13"),
     char_data("lbl_19"),char_data("lbl_23"),char_data("_true")),
   __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("temp"))),
     __expression(__operator(char_data("__subscript")),
       __expression(__identifier(char_data("t"))),
       __expression(__identifier(char_data("m")))))),
 [realheapsort,realheapsort,lbl_2,_true,lbl_13,lbl_19,lbl_23,_true,
 lbl_25] = __statement(`$$label`("lbl_25"),
   __inside(char_data("realheapsort"),char_data("realheapsort"),
     char_data("lbl_2"),char_data("_true"),char_data("lbl_13"),
     char_data("lbl_19"),char_data("lbl_23"),char_data("_true")),
   __expression(__operator(char_data("__assignment")),
     __expression(__operator(char_data("__subscript")),
       __expression(__identifier(char_data("t"))),
       __expression(__identifier(char_data("m")))),
     __expression(__operator(char_data("__subscript")),
       __expression(__identifier(char_data("t"))),
       __expression(__identifier(char_data("j")))))),
 [realheapsort,realheapsort,lbl_2,_true,lbl_13,lbl_19,lbl_23,_true,
 lbl_26] = __statement(`$$label`("lbl_26"),
   __inside(char_data("realheapsort"),char_data("realheapsort"),
     char_data("lbl_2"),char_data("_true"),char_data("lbl_13"),
     char_data("lbl_19"),char_data("lbl_23"),char_data("_true")),
   __expression(__operator(char_data("__assignment")),
     __expression(__operator(char_data("__subscript")),
       __expression(__identifier(char_data("t"))),
       __expression(__identifier(char_data("j")))),
     __expression(__identifier(char_data("temp"))))),
 [realheapsort,realheapsort,lbl_2,_true,lbl_13,lbl_19,lbl_23,_true,
 lbl_27] = __statement(`$$label`("lbl_27"),
   __inside(char_data("realheapsort"),char_data("realheapsort"),
     char_data("lbl_2"),char_data("_true"),char_data("lbl_13"),
     char_data("lbl_19"),char_data("lbl_23"),char_data("_true")),
   __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("j"))),
     __expression(__identifier(char_data("m"))))),
 [realheapsort,realheapsort,lbl_2,_true,lbl_4] = __for(`$$label`("lbl_4"),
   __init(__expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("k"))),
     __expression(__constant(char_data("cst__5"))))),
   __test(__expression(__operator(char_data("__le")),
     __expression(__identifier(char_data("k"))),
     __expression(__operator(char_data("__subtraction")),
       __expression(__identifier(char_data("N"))),
       __expression(__constant(char_data("cst__5")))))),
   __next(__expression(__operator(char_data("_post_incr")),
     __expression(__identifier(char_data("k")))))),
 [realheapsort,realheapsort,lbl_2,_true,lbl_4,
 lbl_6] = __statement(`$$label`("lbl_6"),
     __inside(char_data("realheapsort"),char_data("realheapsort"),
     char_data("lbl_2"),char_data("_true"),char_data("lbl_4")),
   __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("j"))),
     __expression(__identifier(char_data("k"))))),
 [realheapsort,realheapsort,lbl_2,_true,lbl_4,
 lbl_7] = __while(`$$label`("lbl_7"),
   __expression(__operator(char_data("__conjunction")),
     __expression(__operator(char_data("__gt")),
       __expression(__identifier(char_data("j"))),
       __expression(__constant(char_data("cst__8")))),
     __expression(__operator(char_data("__gt")),
       __expression(__operator(char_data("__subscript")),
         __expression(__identifier(char_data("t"))),
         __expression(__operator(char_data("__subtraction")),
           __expression(__operator(char_data("__division")),
             __expression(__operator(char_data("__addition")),
               __expression(__identifier(char_data("j"))),
               __expression(__constant(char_data("cst__5")))),
             __expression(__constant(char_data("cst__3")))),
           __expression(__constant(char_data("cst__5"))))),
       __expression(__operator(char_data("__subscript")),
         __expression(__identifier(char_data("t"))),
         __expression(__identifier(char_data("j"))))))),
 [realheapsort,realheapsort,lbl_2,_true,lbl_4,lbl_7,
 lbl_10] = __statement(`$$label`("lbl_10"),
   __inside(char_data("realheapsort"),char_data("realheapsort"),
     char_data("lbl_2"),char_data("_true"),char_data("lbl_4"),
     char_data("lbl_7")),
     __expression(__operator(char_data("__assignment")),
     __expression(__operator(char_data("__subscript")),
       __expression(__identifier(char_data("t"))),
       __expression(__identifier(char_data("j")))),
     __expression(__operator(char_data("__subscript")),
       __expression(__identifier(char_data("t"))),
       __expression(__operator(char_data("__subtraction")),
         __expression(__operator(char_data("__division")),
           __expression(__operator(char_data("__addition")),
             __expression(__identifier(char_data("j"))),
             __expression(__constant(char_data("cst__5")))),
           __expression(__constant(char_data("cst__3")))),
         __expression(__constant(char_data("cst__5"))))))),
 [realheapsort,realheapsort,lbl_2,_true,lbl_4,lbl_7,
 lbl_11] = __statement(`$$label`("lbl_11"),
   __inside(char_data("realheapsort"),char_data("realheapsort"),
     char_data("lbl_2"),char_data("_true"),char_data("lbl_4"),
     char_data("lbl_7")),
     __expression(__operator(char_data("__assignment")),
     __expression(__operator(char_data("__subscript")),
       __expression(__identifier(char_data("t"))),
       __expression(__operator(char_data("__subtraction")),
         __expression(__operator(char_data("__division")),
           __expression(__operator(char_data("__addition")),
             __expression(__identifier(char_data("j"))),
             __expression(__constant(char_data("cst__5")))),
           __expression(__constant(char_data("cst__3")))),
         __expression(__constant(char_data("cst__5"))))),
     __expression(__identifier(char_data("temp"))))),
 [realheapsort,realheapsort,lbl_2,_true,lbl_4,lbl_7,
 lbl_12] = __statement(`$$label`("lbl_12"),
   __inside(char_data("realheapsort"),char_data("realheapsort"),
     char_data("lbl_2"),char_data("_true"),char_data("lbl_4"),
     char_data("lbl_7")),
     __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("j"))),
     __expression(__operator(char_data("__subtraction")),
       __expression(__operator(char_data("__division")),
         __expression(__operator(char_data("__addition")),
           __expression(__identifier(char_data("j"))),
           __expression(__constant(char_data("cst__5")))),
         __expression(__constant(char_data("cst__3")))),
       __expression(__constant(char_data("cst__5")))))),
 [realheapsort,realheapsort,lbl_2,_true,lbl_4,lbl_7,
 lbl_9] = __statement(`$$label`("lbl_9"),
     __inside(char_data("realheapsort"),char_data("realheapsort"),
     char_data("lbl_2"),char_data("_true"),char_data("lbl_4"),
     char_data("lbl_7")),
     __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("temp"))),
     __expression(__operator(char_data("__subscript")),
       __expression(__identifier(char_data("t"))),
       __expression(__identifier(char_data("j")))))),
 [realheapsort,realheapsort,
 m] = __declaration(__inside(char_data("realheapsort"),
   char_data("realheapsort")),__identifier(char_data("m")),
   __basic(`$$size`("32"),char_data("__integer"))),
 [realheapsort,realheapsort,
 t] = __declaration(__inside(char_data("realheapsort"),
   char_data("realheapsort")),__identifier(char_data("t")),
   __array(__basic(`$$size`("32"),char_data("__float")),
     __expression(__constant(char_data("cst__1"))))),
 [realheapsort,realheapsort,
 temp] = __declaration(__inside(char_data("realheapsort"),
   char_data("realheapsort")),__identifier(char_data("temp")),
   __basic(`$$size`("32"),char_data("__float"))))
table([realheapsort,realheapsort] = [[realheapsort,realheapsort],
[realheapsort,cst__8],[realheapsort,cst__5],[realheapsort,cst__3],
[realheapsort,cst__1],[realheapsort,realheapsort],[realheapsort,
  realheapsort,t],[realheapsort,realheapsort,temp],[realheapsort,
  realheapsort,k],[realheapsort,realheapsort,j],[realheapsort,realheapsort,
  m],[realheapsort,realheapsort,lbl_2,_true,lbl_4],[realheapsort,
  realheapsort,lbl_2],[realheapsort,realheapsort,lbl_2,_true,lbl_4,lbl_6],
[realheapsort,realheapsort,lbl_2,_true,lbl_4,lbl_7],[realheapsort,
  realheapsort,lbl_2,_true,lbl_4,lbl_7,lbl_9],[realheapsort,realheapsort,
  lbl_2,_true,lbl_4,lbl_7,lbl_10],[realheapsort,realheapsort,lbl_2,_true,
  lbl_4,lbl_7,lbl_11],[realheapsort,realheapsort,lbl_2,_true,lbl_4,lbl_7,
  lbl_12],[realheapsort,realheapsort,lbl_2,_true,lbl_13],[realheapsort,
  realheapsort,lbl_2,_true,lbl_13,lbl_14],[realheapsort,realheapsort,lbl_2,
  _true,lbl_13,lbl_15],[realheapsort,realheapsort,lbl_2,_true,lbl_13,
lbl_16],[realheapsort,realheapsort,lbl_2,_true,lbl_13,lbl_17],
  [realheapsort,realheapsort,lbl_2,_true,lbl_13,lbl_18],[realheapsort,
  realheapsort,lbl_2,_true,lbl_13,lbl_19,lbl_20],[realheapsort,
  realheapsort,lbl_2,_true,lbl_13,lbl_19],[realheapsort,realheapsort,lbl_2,
  _true,lbl_13,lbl_19,lbl_20,_true,lbl_21],[realheapsort,realheapsort,
  lbl_2,_true,lbl_13,lbl_19,lbl_20,_false,lbl_22],[realheapsort,
  realheapsort,lbl_2,_true,lbl_13,lbl_19,lbl_23],[realheapsort,
  realheapsort,lbl_2,_true,lbl_13,lbl_19,lbl_23,_true,lbl_24],
  [realheapsort,realheapsort,lbl_2,_true,lbl_13,lbl_19,lbl_23,_true,
lbl_25],[realheapsort,realheapsort,lbl_2,_true,lbl_13,lbl_19,lbl_23,_true,
  lbl_26],[realheapsort,realheapsort,lbl_2,_true,lbl_13,lbl_19,lbl_23,
  _true,lbl_27],[realheapsort,realheapsort,lbl_2,_true,lbl_13,lbl_19,
  lbl_23,_false,lbl_28],[realheapsort,realheapsort,lbl_2,_false,lbl_29]])
[[realheapsort,realheapsort,t],[realheapsort,realheapsort,temp],
[realheapsort,realheapsort,k],[realheapsort,realheapsort,j],[realheapsort,
  realheapsort,m],[realheapsort,realheapsort,lbl_2,_true,lbl_4,lbl_6],
[realheapsort,realheapsort,lbl_2,_true,lbl_4,lbl_7,lbl_9],[realheapsort,
  realheapsort,lbl_2,_true,lbl_4,lbl_7,lbl_10],[realheapsort,realheapsort,
  lbl_2,_true,lbl_4,lbl_7,lbl_11],[realheapsort,realheapsort,lbl_2,_true,
  lbl_4,lbl_7,lbl_12],[realheapsort,realheapsort,lbl_2,_true,lbl_13,
lbl_14],[realheapsort,realheapsort,lbl_2,_true,lbl_13,lbl_15],
  [realheapsort,realheapsort,lbl_2,_true,lbl_13,lbl_16],[realheapsort,
  realheapsort,lbl_2,_true,lbl_13,lbl_17],[realheapsort,realheapsort,lbl_2,
  _true,lbl_13,lbl_18],[realheapsort,realheapsort,lbl_2,_true,lbl_13,
  lbl_19,lbl_20,_true,lbl_21],[realheapsort,realheapsort,lbl_2,_true,
  lbl_13,lbl_19,lbl_20,_false,lbl_22],[realheapsort,realheapsort,lbl_2,
  _true,lbl_13,lbl_19,lbl_23,_true,lbl_24],[realheapsort,realheapsort,
  lbl_2,_true,lbl_13,lbl_19,lbl_23,_true,lbl_25],[realheapsort,
  realheapsort,lbl_2,_true,lbl_13,lbl_19,lbl_23,_true,lbl_26],
  [realheapsort,realheapsort,lbl_2,_true,lbl_13,lbl_19,lbl_23,_true,
lbl_27],[realheapsort,realheapsort,lbl_2,_true,lbl_13,lbl_19,lbl_23,_false,
  lbl_28],[realheapsort,realheapsort,lbl_2,_false,lbl_29]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of N is 0
body [[realheapsort,realheapsort],[realheapsort,cst__8],[realheapsort,
  cst__5],[realheapsort,cst__3],[realheapsort,cst__1],[realheapsort,
  realheapsort],[realheapsort,realheapsort,t],[realheapsort,realheapsort,
  temp],[realheapsort,realheapsort,k],[realheapsort,realheapsort,j],
[realheapsort,realheapsort,m],[realheapsort,realheapsort,lbl_2,_true,
lbl_4],[realheapsort,realheapsort,lbl_2],[realheapsort,realheapsort,lbl_2,
  _true,lbl_4,lbl_6],[realheapsort,realheapsort,lbl_2,_true,lbl_4,lbl_7],
[realheapsort,realheapsort,lbl_2,_true,lbl_4,lbl_7,lbl_9],[realheapsort,
  realheapsort,lbl_2,_true,lbl_4,lbl_7,lbl_10],[realheapsort,realheapsort,
  lbl_2,_true,lbl_4,lbl_7,lbl_11],[realheapsort,realheapsort,lbl_2,_true,
  lbl_4,lbl_7,lbl_12],[realheapsort,realheapsort,lbl_2,_true,lbl_13],
[realheapsort,realheapsort,lbl_2,_true,lbl_13,lbl_14],[realheapsort,
  realheapsort,lbl_2,_true,lbl_13,lbl_15],[realheapsort,realheapsort,lbl_2,
  _true,lbl_13,lbl_16],[realheapsort,realheapsort,lbl_2,_true,lbl_13,
lbl_17],[realheapsort,realheapsort,lbl_2,_true,lbl_13,lbl_18],
  [realheapsort,realheapsort,lbl_2,_true,lbl_13,lbl_19,lbl_20],
[realheapsort,realheapsort,lbl_2,_true,lbl_13,lbl_19],[realheapsort,
  realheapsort,lbl_2,_true,lbl_13,lbl_19,lbl_20,_true,lbl_21],
  [realheapsort,realheapsort,lbl_2,_true,lbl_13,lbl_19,lbl_20,_false,
lbl_22],[realheapsort,realheapsort,lbl_2,_true,lbl_13,lbl_19,lbl_23],
[realheapsort,realheapsort,lbl_2,_true,lbl_13,lbl_19,lbl_23,_true,lbl_24],
[realheapsort,realheapsort,lbl_2,_true,lbl_13,lbl_19,lbl_23,_true,lbl_25],
[realheapsort,realheapsort,lbl_2,_true,lbl_13,lbl_19,lbl_23,_true,lbl_26],
[realheapsort,realheapsort,lbl_2,_true,lbl_13,lbl_19,lbl_23,_true,lbl_27],
[realheapsort,realheapsort,lbl_2,_true,lbl_13,lbl_19,lbl_23,_false,lbl_28],
[realheapsort,realheapsort,lbl_2,_false,lbl_29]]
lbl_2 __si
 counter 1/0 iteration domain {}

collect subscripts __expression(__identifier(char_data("j")))
[j(),[],{},{}]
lbl_7 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("temp")))
[temp(),[],{},{}]
collect subscripts __expression(__operator(char_data("__subscript")),
__expression(__identifier(char_data("t"))),
__expression(__identifier(char_data("j"))))
collect subscripts __expression(__identifier(char_data("t")))
[t(),[],{},{}]
[t(),[j],{},{j()}]
collect subscripts __expression(__operator(char_data("__subscript")),
__expression(__identifier(char_data("t"))),
__expression(__identifier(char_data("j"))))
collect subscripts __expression(__identifier(char_data("t")))
[t(),[],{},{}]
[t(),[j],{},{j()}]
collect subscripts __expression(__operator(char_data("__subscript")),
__expression(__identifier(char_data("t"))),
__expression(__operator(char_data("__subtraction")),
__expression(__operator(char_data("__division")),
__expression(__operator(char_data("__addition")),
__expression(__identifier(char_data("j"))),
__expression(__constant(char_data("cst__5")))),
__expression(__constant(char_data("cst__3")))),
__expression(__constant(char_data("cst__5")))))
collect subscripts __expression(__identifier(char_data("t")))
[t(),[],{},{}]
[t(),[1/2*j-1/2],{},{j()}]
collect subscripts __expression(__operator(char_data("__subscript")),
__expression(__identifier(char_data("t"))),
__expression(__operator(char_data("__subtraction")),
__expression(__operator(char_data("__division")),
__expression(__operator(char_data("__addition")),
__expression(__identifier(char_data("j"))),
__expression(__constant(char_data("cst__5")))),
__expression(__constant(char_data("cst__3")))),
__expression(__constant(char_data("cst__5")))))
collect subscripts __expression(__identifier(char_data("t")))
[t(),[],{},{}]
[t(),[1/2*j-1/2],{},{j()}]
collect subscripts __expression(__identifier(char_data("j")))
[j(),[],{},{}]
collect subscripts __expression(__identifier(char_data("j")))
[j(),[],{},{}]
collect subscripts __expression(__identifier(char_data("m")))
[m(),[],{},{}]
collect subscripts __expression(__identifier(char_data("temp")))
[temp(),[],{},{}]
collect subscripts __expression(__operator(char_data("__subscript")),
__expression(__identifier(char_data("t"))),
__expression(__operator(char_data("__subtraction")),
__expression(__operator(char_data("__subtraction")),
__expression(__identifier(char_data("N"))),
__expression(__identifier(char_data("k")))),
__expression(__constant(char_data("cst__5")))))
collect subscripts __expression(__identifier(char_data("t")))
[t(),[],{},{}]
[t(),[N-k-1],{},{N(),k()}]
collect subscripts __expression(__operator(char_data("__subscript")),
__expression(__identifier(char_data("t"))),
__expression(__operator(char_data("__subtraction")),
__expression(__operator(char_data("__subtraction")),
__expression(__identifier(char_data("N"))),
__expression(__identifier(char_data("k")))),
__expression(__constant(char_data("cst__5")))))
collect subscripts __expression(__identifier(char_data("t")))
[t(),[],{},{}]
[t(),[N-k-1],{},{N(),k()}]
collect subscripts __expression(__operator(char_data("__subscript")),
__expression(__identifier(char_data("t"))),
__expression(__constant(char_data("cst__8"))))
collect subscripts __expression(__identifier(char_data("t")))
[t(),[],{},{}]
[t(),[0],{},{}]
collect subscripts __expression(__operator(char_data("__subscript")),
__expression(__identifier(char_data("t"))),
__expression(__constant(char_data("cst__8"))))
collect subscripts __expression(__identifier(char_data("t")))
[t(),[],{},{}]
[t(),[0],{},{}]
lbl_20 __si
 counter 1/0 iteration domain {}

lbl_19 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("m")))
[m(),[],{},{}]
collect subscripts __expression(__identifier(char_data("m")))
[m(),[],{},{}]
lbl_23 __si
 counter 1/0 iteration domain {}

collect subscripts __expression(__identifier(char_data("temp")))
[temp(),[],{},{}]
collect subscripts __expression(__operator(char_data("__subscript")),
__expression(__identifier(char_data("t"))),
__expression(__identifier(char_data("m"))))
collect subscripts __expression(__identifier(char_data("t")))
[t(),[],{},{}]
[t(),[m],{},{m()}]
collect subscripts __expression(__operator(char_data("__subscript")),
__expression(__identifier(char_data("t"))),
__expression(__identifier(char_data("m"))))
collect subscripts __expression(__identifier(char_data("t")))
[t(),[],{},{}]
[t(),[m],{},{m()}]
collect subscripts __expression(__operator(char_data("__subscript")),
__expression(__identifier(char_data("t"))),
__expression(__identifier(char_data("j"))))
collect subscripts __expression(__identifier(char_data("t")))
[t(),[],{},{}]
[t(),[j],{},{j()}]
collect subscripts __expression(__operator(char_data("__subscript")),
__expression(__identifier(char_data("t"))),
__expression(__identifier(char_data("j"))))
collect subscripts __expression(__identifier(char_data("t")))
[t(),[],{},{}]
[t(),[j],{},{j()}]
collect subscripts __expression(__identifier(char_data("j")))
[j(),[],{},{}]
collect subscripts __expression(__identifier(char_data("j")))
[j(),[],{},{}]
collect subscripts __expression(__operator(char_data("__subscript")),
__expression(__identifier(char_data("t"))),
__expression(__operator(char_data("__subtraction")),
__expression(__operator(char_data("__division")),
__expression(__operator(char_data("__addition")),
__expression(__identifier(char_data("j"))),
__expression(__constant(char_data("cst__5")))),
__expression(__constant(char_data("cst__3")))),
__expression(__constant(char_data("cst__5")))))
collect subscripts __expression(__identifier(char_data("t")))
[t(),[],{},{}]
[t(),[1/2*j-1/2],{},{j()}]
collect subscripts __expression(__operator(char_data("__subscript")),
__expression(__identifier(char_data("t"))),
__expression(__identifier(char_data("j"))))
collect subscripts __expression(__identifier(char_data("t")))
[t(),[],{},{}]
[t(),[j],{},{j()}]
examining N
examining cst__1
 is a constant
examining cst__3
 is a constant
examining cst__5
 is a constant
examining cst__8
 is a constant
examining j
 has definitions
examining k
 has definitions
examining m
 has definitions
examining realheapsort
examining t
 is an array
examining temp
 is not integer
while remnants __le(2*j+1,N-k-2)while remnants __conjunction(__gt(j,0),
__gt(__subscript(t,1/2*j-1/2),__subscript(t,j)))to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified (N > 2)
to be simplified (2 >= N)
to be simplified ( (N > 2) && ( (N >= 2) && (1 > 0) ) )
to be simplified ( (N > 2) && (N >= 2) )
to be simplified ( (N > 2) && (2 > N) )
to be simplified ( (N > 2) && ( (2 > N) && (N >= 2) ) )
to be simplified ( ( (N > 2) && ( (2 > N) && (N >= 2) ) ) && (3 > N) )
to be simplified ( ( (N > 2) && ( (2 > N) && (N >= 2) ) ) && (N >= 3) )
to be simplified ( ( (N > 2) && ( (2 > N) && (N >= 2) ) ) && (N >= 3) )
to be simplified ( ( (N > 2) && ( (2 > N) && (N >= 2) ) ) && ( (N >= 3) && (3 != N)
 ) )
to be simplified ( ( (N > 2) && ( (2 > N) && (N >= 2) ) ) && ( (N >= 3) && (3 != N)
 ) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (N >= 2*j+k+3)
to be simplified (2*j+k+3 > N)
to be simplified (2*j+k+3 > N)
to be simplified (N >= 2*j+k+3)
to be simplified (2*j+k+3 > N)
to be simplified (N >= 2*j+k+3)
to be simplified ( (N >= 2*j+k+3) && (2*j+k+3 != N) )
to be simplified (N >= 2*j+k+3)
to be simplified (N >= 2*j+k+3)
to be simplified ( (N >= 2*j+k+3) && (2*j+k+3 != N) )
to be simplified ( (N >= 2*j+k+3) && (2*j+k+3 != N) )
to be simplified (N > 2)
to be simplified (2 >= N)
to be simplified (N > 2)
to be simplified (2 >= N)
to be simplified TRUE
to be simplified (2*j+k+3 != N)
to be simplified TRUE
to be simplified (2*j+k+3 != N)
to be simplified TRUE
to be simplified (2*j+k+3 != N)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (j > 0)
to be simplified TRUE
to be simplified TRUE
to be simplified (j > 0)
to be simplified (j > 0)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (N >= k+2)
to be simplified (k+2 > N)
to be simplified (N >= k+2)
to be simplified (N >= k+2)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (2*j+k+3 > N)
to be simplified (N >= 2*j+k+3)
to be simplified (N >= 2*j+k+3)
to be simplified ( (N >= 2*j+k+3) && (2*j+k+3 != N) )
to be simplified ( (N >= 2*j+k+3) && (2*j+k+3 != N) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (2*j+k+3 > N)
to be simplified (N >= 2*j+k+3)
to be simplified (N >= 2*j+k+3)
to be simplified ( (N >= 2*j+k+3) && (2*j+k+3 != N) )
to be simplified ( (N >= 2*j+k+3) && (2*j+k+3 != N) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (k+2 > N)
to be simplified (N >= k+2)
to be simplified ( (N >= k+2) && (k+3 > N) )
to be simplified ( (N >= k+2) && (N >= k+3) )
to be simplified ( (N >= k+2) && (N >= k+3) )
to be simplified ( (N >= k+2) && ( (N >= k+3) && (k+3 != N) ) )
to be simplified ( (N >= k+2) && ( (N >= k+3) && (k+3 != N) ) )
to be simplified (N >= k+1)
to be simplified (k+1 > N)
to be simplified (k+1 > N)
to be simplified (N >= k+1)
to be simplified (N >= k+1)
to be simplified ( (N >= k+1) && (k > 0) )
to be simplified (N >= k+1)
to be simplified ( (k+1 > N) && (2 > N) )
to be simplified ( (k+1 > N) && (N >= 2) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (j > 0)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified ( (N >= k+1) && (k > 0) )
to be simplified (N >= k+1)
to be simplified ( (k+1 > N) && (2 > N) )
to be simplified ( (k+1 > N) && (N >= 2) )
to be simplified ( ( (k+1 > N) && (N >= 2) ) && (3 > N) )
to be simplified ( ( (k+1 > N) && (N >= 2) ) && (N >= 3) )
to be simplified ( ( (k+1 > N) && (N >= 2) ) && (N >= 3) )
to be simplified ( ( (k+1 > N) && (N >= 2) ) && ( (N >= 3) && (3 != N) ) )
to be simplified ( ( (k+1 > N) && (N >= 2) ) && ( (N >= 3) && (3 != N) ) )

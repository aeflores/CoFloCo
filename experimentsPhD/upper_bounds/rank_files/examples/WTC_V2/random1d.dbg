FrontEnd version J.3
qualif random1d
inside declaration [random1d,nondet]
inside declaration [random1d,random1d]
inside declaration [random1d,random1d,a]
inside declaration [random1d,random1d,x]
inside declaration [random1d,cst__4]
inside declaration [random1d,cst__2]
table([random1d,cst__2] = __declaration(__inside(char_data("random1d")),
  __constant(`$$value`("0"),char_data("cst__2")),
  __basic(char_data("__integer"))),
   [random1d,cst__4] = __declaration(__inside(char_data("random1d")),
     __constant(`$$value`("1"),char_data("cst__4")),
     __basic(char_data("__integer"))),
   [random1d,nondet] = __declaration(__inside(char_data("random1d")),
     __identifier(char_data("nondet")),
     __function(__identifier(char_data("nondet")),__basic(`$$size`("32"),
         char_data("__integer")))),
   [random1d,random1d] = __declaration(__inside(char_data("random1d")),
     __identifier(char_data("random1d")),
     __function(__identifier(char_data("random1d")),
       __basic(char_data("void")),__identifier(char_data("max")),
       __basic(`$$size`("32"),char_data("__integer")))),
   [random1d,random1d,a] = __declaration(__inside(char_data("random1d"),
     char_data("random1d")),__identifier(char_data("a")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [random1d,random1d,lbl_1] = __if(`$$label`("lbl_1"),
     __expression(__operator(char_data("__gt")),
       __expression(__identifier(char_data("max"))),
       __expression(__constant(char_data("cst__2"))))),
   [random1d,random1d,lbl_1,_false,
     lbl_11] = __statement(`$$label`("lbl_11"),
     __inside(char_data("random1d"),char_data("random1d"),
         char_data("lbl_1"),char_data("_false")),__nop()),
 [random1d,random1d,lbl_1,_true,lbl_3] = __statement(`$$label`("lbl_3"),
   __inside(char_data("random1d"),char_data("random1d"),char_data("lbl_1"),
     char_data("_true")),
     __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("a"))),
     __expression(__constant(char_data("cst__2"))))),
 [random1d,random1d,lbl_1,_true,lbl_5] = __statement(`$$label`("lbl_5"),
   __inside(char_data("random1d"),char_data("random1d"),char_data("lbl_1"),
     char_data("_true")),
     __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("x"))),
     __expression(__constant(char_data("cst__4"))))),
 [random1d,random1d,lbl_1,_true,lbl_6] = __while(`$$label`("lbl_6"),
   __expression(__operator(char_data("__le")),
     __expression(__identifier(char_data("x"))),
     __expression(__identifier(char_data("max"))))),
 [random1d,random1d,lbl_1,_true,lbl_6,
 lbl_10] = __statement(`$$label`("lbl_10"),__inside(char_data("random1d"),
     char_data("random1d"),char_data("lbl_1"),char_data("_true"),
     char_data("lbl_6")),
     __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("x"))),
     __expression(__operator(char_data("__addition")),
       __expression(__identifier(char_data("x"))),
       __expression(__constant(char_data("cst__4")))))),
 [random1d,random1d,lbl_1,_true,lbl_6,lbl_7] = __if(`$$label`("lbl_7"),
   __expression(__operator(char_data("__gt")),
     __expression(__operator(char_data("__funcall")),
       __expression(__identifier(char_data("nondet")))),
     __expression(__constant(char_data("cst__2"))))),
 [random1d,random1d,lbl_1,_true,lbl_6,lbl_7,_false,
 lbl_9] = __statement(`$$label`("lbl_9"),__inside(char_data("random1d"),
     char_data("random1d"),char_data("lbl_1"),char_data("_true"),
     char_data("lbl_6"),char_data("lbl_7"),char_data("_false")),
   __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("a"))),
     __expression(__operator(char_data("__subtraction")),
       __expression(__identifier(char_data("a"))),
       __expression(__constant(char_data("cst__4")))))),
 [random1d,random1d,lbl_1,_true,lbl_6,lbl_7,_true,
 lbl_8] = __statement(`$$label`("lbl_8"),__inside(char_data("random1d"),
     char_data("random1d"),char_data("lbl_1"),char_data("_true"),
     char_data("lbl_6"),char_data("lbl_7"),char_data("_true")),
   __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("a"))),
     __expression(__operator(char_data("__addition")),
       __expression(__identifier(char_data("a"))),
       __expression(__constant(char_data("cst__4")))))),
 [random1d,random1d,x] = __declaration(__inside(char_data("random1d"),
   char_data("random1d")),__identifier(char_data("x")),
   __basic(`$$size`("32"),char_data("__integer"))))
table([random1d,random1d] = [[random1d,nondet],[random1d,random1d],
[random1d,cst__4],[random1d,cst__2],[random1d,random1d],[random1d,random1d,
  a],[random1d,random1d,x],[random1d,random1d,lbl_1],[random1d,random1d,
  lbl_1,_true,lbl_3],[random1d,random1d,lbl_1,_true,lbl_5],[random1d,
  random1d,lbl_1,_true,lbl_6,lbl_7],[random1d,random1d,lbl_1,_true,lbl_6],
[random1d,random1d,lbl_1,_true,lbl_6,lbl_7,_true,lbl_8],[random1d,random1d,
  lbl_1,_true,lbl_6,lbl_7,_false,lbl_9],[random1d,random1d,lbl_1,_true,
  lbl_6,lbl_10],[random1d,random1d,lbl_1,_false,lbl_11]])
[[random1d,random1d,a],[random1d,random1d,x],[random1d,random1d,lbl_1,
  _true,lbl_3],[random1d,random1d,lbl_1,_true,lbl_5],[random1d,random1d,
  lbl_1,_true,lbl_6,lbl_7,_true,lbl_8],[random1d,random1d,lbl_1,_true,
  lbl_6,lbl_7,_false,lbl_9],[random1d,random1d,lbl_1,_true,lbl_6,lbl_10],
[random1d,random1d,lbl_1,_false,lbl_11]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of max is 0
body [[random1d,nondet],[random1d,random1d],[random1d,cst__4],[random1d,
  cst__2],[random1d,random1d],[random1d,random1d,a],[random1d,random1d,x],
[random1d,random1d,lbl_1],[random1d,random1d,lbl_1,_true,lbl_3],[random1d,
  random1d,lbl_1,_true,lbl_5],[random1d,random1d,lbl_1,_true,lbl_6,lbl_7],
[random1d,random1d,lbl_1,_true,lbl_6],[random1d,random1d,lbl_1,_true,lbl_6,
  lbl_7,_true,lbl_8],[random1d,random1d,lbl_1,_true,lbl_6,lbl_7,_false,
  lbl_9],[random1d,random1d,lbl_1,_true,lbl_6,lbl_10],[random1d,random1d,
  lbl_1,_false,lbl_11]]
lbl_1 __si
 counter 1/0 iteration domain {}

collect subscripts __expression(__identifier(char_data("a")))
[a(),[],{},{}]
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
lbl_7 __si
 counter 1/0 iteration domain {}

lbl_6 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("a")))
[a(),[],{},{}]
collect subscripts __expression(__identifier(char_data("a")))
[a(),[],{},{}]
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
examining a
 has definitions
examining cst__2
 is a constant
examining cst__4
 is a constant
examining max
examining nondet
examining random1d
examining x
 has definitions
while remnants __le(x,max)to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified (0 >= max)
to be simplified (max > 0)
to be simplified ( (max > 0) && (1 > max) )
to be simplified ( (max > 0) && (max >= 1) )
to be simplified ( (max > 0) && (max >= 1) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (max > 0)
to be simplified (0 >= max)
to be simplified (max > 0)
to be simplified (0 >= max)
to be simplified (max > 0)
to be simplified (max >= x)
to be simplified (x > max)
to be simplified (max >= x)
to be simplified (max >= x)
to be simplified (max >= x)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (x > max)
to be simplified (max >= x)
to be simplified (max >= x)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE

FrontEnd version J.3
qualif aaron2
inside declaration [aaron2,nondet]
inside declaration [aaron2,aaron2]
inside declaration [aaron2,cst__8]
inside declaration [aaron2,cst__2]
table([aaron2,aaron2] = __declaration(__inside(char_data("aaron2")),
  __identifier(char_data("aaron2")),
  __function(__identifier(char_data("aaron2")),__basic(`$$size`("32"),
      char_data("__integer")),__identifier(char_data("tx")),
    __basic(`$$size`("32"),char_data("__integer")),
    __identifier(char_data("x")),__basic(`$$size`("32"),
      char_data("__integer")),__identifier(char_data("y")),
    __basic(`$$size`("32"),char_data("__integer")))),
   [aaron2,aaron2,lbl_1] = __if(`$$label`("lbl_1"),
     __expression(__operator(char_data("__ge")),
       __expression(__identifier(char_data("tx"))),
       __expression(__constant(char_data("cst__2"))))),
   [aaron2,aaron2,lbl_1,_false,lbl_11] = __statement(`$$label`("lbl_11"),
     __inside(char_data("aaron2"),char_data("aaron2"),char_data("lbl_1"),
       char_data("_false")),__nop()),
 [aaron2,aaron2,lbl_1,_true,lbl_3] = __while(`$$label`("lbl_3"),
   __expression(__operator(char_data("__ge")),
     __expression(__identifier(char_data("x"))),
     __expression(__identifier(char_data("y"))))),
 [aaron2,aaron2,lbl_1,_true,lbl_3,lbl_4] = __if(`$$label`("lbl_4"),
   __expression(__operator(char_data("__lt")),
     __expression(__identifier(char_data("tx"))),
     __expression(__constant(char_data("cst__2"))))),
 [aaron2,aaron2,lbl_1,_true,lbl_3,lbl_4,_false,
 lbl_6] = __statement(`$$label`("lbl_6"),__inside(char_data("aaron2"),
     char_data("aaron2"),char_data("lbl_1"),char_data("_true"),
     char_data("lbl_3"),char_data("lbl_4"),char_data("_false")),__nop()),
[aaron2,aaron2,lbl_1,_true,lbl_3,lbl_4,_true,
lbl_5] = __statement(`$$label`("lbl_5"),__inside(char_data("aaron2"),
   char_data("aaron2"),char_data("lbl_1"),char_data("_true"),
   char_data("lbl_3"),char_data("lbl_4"),char_data("_true")),__return()),
[aaron2,aaron2,lbl_1,_true,lbl_3,lbl_7] = __if(`$$label`("lbl_7"),
__expression(__operator(char_data("__gt")),
 __expression(__operator(char_data("__funcall")),
   __expression(__identifier(char_data("nondet")))),
 __expression(__constant(char_data("cst__2"))))),
[aaron2,aaron2,lbl_1,_true,lbl_3,lbl_7,_false,
lbl_10] = __statement(`$$label`("lbl_10"),__inside(char_data("aaron2"),
 char_data("aaron2"),char_data("lbl_1"),char_data("_true"),
 char_data("lbl_3"),char_data("lbl_7"),char_data("_false")),
__expression(__operator(char_data("__assignment")),
 __expression(__identifier(char_data("y"))),
 __expression(__operator(char_data("__addition")),
   __expression(__operator(char_data("__addition")),
     __expression(__identifier(char_data("y"))),
     __expression(__constant(char_data("cst__8")))),
   __expression(__identifier(char_data("tx")))))),
[aaron2,aaron2,lbl_1,_true,lbl_3,lbl_7,_true,
lbl_9] = __statement(`$$label`("lbl_9"),__inside(char_data("aaron2"),
 char_data("aaron2"),char_data("lbl_1"),char_data("_true"),
 char_data("lbl_3"),char_data("lbl_7"),char_data("_true")),
__expression(__operator(char_data("__assignment")),
 __expression(__identifier(char_data("x"))),
 __expression(__operator(char_data("__subtraction")),
   __expression(__operator(char_data("__subtraction")),
     __expression(__identifier(char_data("x"))),
     __expression(__constant(char_data("cst__8")))),
   __expression(__identifier(char_data("tx")))))),
[aaron2,aaron2,lbl_12] = __statement(`$$label`("lbl_12"),
__inside(char_data("aaron2"),char_data("aaron2")),__return()),
[aaron2,cst__2] = __declaration(__inside(char_data("aaron2")),
__constant(`$$value`("0"),char_data("cst__2")),
__basic(char_data("__integer"))),
[aaron2,cst__8] = __declaration(__inside(char_data("aaron2")),
__constant(`$$value`("1"),char_data("cst__8")),
__basic(char_data("__integer"))),
[aaron2,nondet] = __declaration(__inside(char_data("aaron2")),
__identifier(char_data("nondet")),
__function(__identifier(char_data("nondet")),__basic(`$$size`("32"),
 char_data("__integer")))))
table([aaron2,aaron2] = [[aaron2,nondet],[aaron2,aaron2],[aaron2,cst__8],
[aaron2,cst__2],[aaron2,aaron2],[aaron2,aaron2,lbl_1,_true,lbl_3,lbl_4],
[aaron2,aaron2,lbl_1,_true,lbl_3],[aaron2,aaron2,lbl_1],[aaron2,aaron2,
lbl_1,_true,lbl_3,lbl_4,_true,lbl_5],[aaron2,aaron2,lbl_1,_true,lbl_3,
lbl_4,_false,lbl_6],[aaron2,aaron2,lbl_1,_true,lbl_3,lbl_7],[aaron2,aaron2,
lbl_1,_true,lbl_3,lbl_7,_true,lbl_9],[aaron2,aaron2,lbl_1,_true,lbl_3,
lbl_7,_false,lbl_10],[aaron2,aaron2,lbl_1,_false,lbl_11],[aaron2,aaron2,
lbl_12]])
[[aaron2,aaron2,lbl_1,_true,lbl_3,lbl_4,_true,lbl_5],[aaron2,aaron2,lbl_1,
_true,lbl_3,lbl_4,_false,lbl_6],[aaron2,aaron2,lbl_1,_true,lbl_3,lbl_7,
_true,lbl_9],[aaron2,aaron2,lbl_1,_true,lbl_3,lbl_7,_false,lbl_10],[aaron2,
aaron2,lbl_1,_false,lbl_11],[aaron2,aaron2,lbl_12]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of tx is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of x is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of y is 0
body [[aaron2,nondet],[aaron2,aaron2],[aaron2,cst__8],[aaron2,cst__2],
[aaron2,aaron2],[aaron2,aaron2,lbl_1,_true,lbl_3,lbl_4],[aaron2,aaron2,
lbl_1,_true,lbl_3],[aaron2,aaron2,lbl_1],[aaron2,aaron2,lbl_1,_true,lbl_3,
lbl_4,_true,lbl_5],[aaron2,aaron2,lbl_1,_true,lbl_3,lbl_4,_false,lbl_6],
[aaron2,aaron2,lbl_1,_true,lbl_3,lbl_7],[aaron2,aaron2,lbl_1,_true,lbl_3,
lbl_7,_true,lbl_9],[aaron2,aaron2,lbl_1,_true,lbl_3,lbl_7,_false,lbl_10],
[aaron2,aaron2,lbl_1,_false,lbl_11],[aaron2,aaron2,lbl_12]]
lbl_4 __si
 counter 1/0 iteration domain {}

lbl_3 __while
 counter 1/0
lbl_1 __si
 counter 1/0 iteration domain {}

lbl_7 __si
 counter 1/0 iteration domain {}

collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
collect subscripts __expression(__identifier(char_data("y")))
[y(),[],{},{}]
examining aaron2
examining cst__2
 is a constant
examining cst__8
 is a constant
examining nondet
examining tx
examining x
examining y
while remnants __ge(x,y)to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified (tx >= 0)
to be simplified (0 > tx)
to be simplified ( (tx >= 0) && (y > x) )
to be simplified ( (tx >= 0) && ( (x >= y) && (0 > tx) ) )
to be simplified ( (tx >= 0) && ( (x >= y) && (tx >= 0) ) )
to be simplified ( (tx >= 0) && ( (x >= y) && (tx >= 0) ) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (tx >= 0)
to be simplified (0 > tx)
to be simplified (tx >= 0)
to be simplified (0 > tx)
to be simplified (0 > tx)
to be simplified (x >= y)
to be simplified (y > x)
to be simplified (x >= y)
to be simplified (y > x)
to be simplified ( (x >= y) && (0 > tx) )
to be simplified ( (x >= y) && (tx >= 0) )
to be simplified ( (x >= y) && (tx >= 0) )
to be simplified ( (x >= y) && (tx >= 0) )
to be simplified (0 > tx)
to be simplified (tx >= 0)
to be simplified (0 > tx)
to be simplified (tx >= 0)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (y > x)
to be simplified ( (x >= y) && (0 > tx) )
to be simplified ( (x >= y) && (tx >= 0) )
to be simplified ( (x >= y) && (tx >= 0) )
to be simplified TRUE
to be simplified (y > x)
to be simplified ( (x >= y) && (0 > tx) )
to be simplified ( (x >= y) && (tx >= 0) )
to be simplified ( (x >= y) && (tx >= 0) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE

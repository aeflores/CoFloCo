FrontEnd version J.3
qualif complex
inside declaration [complex,complex]
inside declaration [complex,cst__14]
inside declaration [complex,cst__12]
inside declaration [complex,cst__11]
inside declaration [complex,cst__8]
inside declaration [complex,cst__6]
inside declaration [complex,cst__5]
inside declaration [complex,cst__2]
table([complex,complex] = __declaration(__inside(char_data("complex")),
  __identifier(char_data("complex")),
  __function(__identifier(char_data("complex")),__basic(`$$size`("32"),
      char_data("__integer")),__identifier(char_data("a")),
    __basic(`$$size`("32"),char_data("__integer")),
    __identifier(char_data("b")),__basic(`$$size`("32"),
      char_data("__integer")))),
   [complex,complex,lbl_1] = __while(`$$label`("lbl_1"),
     __expression(__operator(char_data("__lt")),
       __expression(__identifier(char_data("a"))),
       __expression(__constant(char_data("cst__2"))))),
   [complex,complex,lbl_1,lbl_16] = __statement(`$$label`("lbl_16"),
     __inside(char_data("complex"),char_data("complex"),
     char_data("lbl_1")),
       __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("a"))),
       __expression(__operator(char_data("__addition")),
         __expression(__identifier(char_data("a"))),
         __expression(__constant(char_data("cst__8")))))),
   [complex,complex,lbl_1,lbl_17] = __statement(`$$label`("lbl_17"),
     __inside(char_data("complex"),char_data("complex"),
     char_data("lbl_1")),
       __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("b"))),
       __expression(__operator(char_data("__subtraction")),
         __expression(__identifier(char_data("b"))),
         __expression(__constant(char_data("cst__11")))))),
   [complex,complex,lbl_1,lbl_3] = __while(`$$label`("lbl_3"),
     __expression(__operator(char_data("__lt")),
       __expression(__identifier(char_data("b"))),
       __expression(__identifier(char_data("a"))))),
   [complex,complex,lbl_1,lbl_3,lbl_10] = __if(`$$label`("lbl_10"),
     __expression(__operator(char_data("__conjunction")),
       __expression(__operator(char_data("__ge")),
         __expression(__identifier(char_data("b"))),
         __expression(__constant(char_data("cst__11")))),
       __expression(__operator(char_data("__le")),
         __expression(__identifier(char_data("b"))),
         __expression(__constant(char_data("cst__12")))))),
   [complex,complex,lbl_1,lbl_3,lbl_10,_false,
   lbl_15] = __statement(`$$label`("lbl_15"),__inside(char_data("complex"),
       char_data("complex"),char_data("lbl_1"),char_data("lbl_3"),
       char_data("lbl_10"),char_data("_false")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("a"))),
       __expression(__operator(char_data("__addition")),
         __expression(__identifier(char_data("a"))),
         __expression(__constant(char_data("cst__14")))))),
   [complex,complex,lbl_1,lbl_3,lbl_10,_true,
   lbl_13] = __statement(`$$label`("lbl_13"),__inside(char_data("complex"),
       char_data("complex"),char_data("lbl_1"),char_data("lbl_3"),
       char_data("lbl_10"),char_data("_true")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("a"))),
       __expression(__operator(char_data("__addition")),
         __expression(__identifier(char_data("a"))),
         __expression(__constant(char_data("cst__11")))))),
   [complex,complex,lbl_1,lbl_3,lbl_4] = __if(`$$label`("lbl_4"),
     __expression(__operator(char_data("__gt")),
       __expression(__identifier(char_data("b"))),
       __expression(__constant(char_data("cst__5"))))),
   [complex,complex,lbl_1,lbl_3,lbl_4,_false,
   lbl_9] = __statement(`$$label`("lbl_9"),__inside(char_data("complex"),
       char_data("complex"),char_data("lbl_1"),char_data("lbl_3"),
       char_data("lbl_4"),char_data("_false")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("b"))),
       __expression(__operator(char_data("__addition")),
         __expression(__identifier(char_data("b"))),
         __expression(__constant(char_data("cst__8")))))),
   [complex,complex,lbl_1,lbl_3,lbl_4,_true,
   lbl_7] = __statement(`$$label`("lbl_7"),__inside(char_data("complex"),
       char_data("complex"),char_data("lbl_1"),char_data("lbl_3"),
       char_data("lbl_4"),char_data("_true")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("b"))),
       __expression(__operator(char_data("__addition")),
         __expression(__identifier(char_data("b"))),
         __expression(__constant(char_data("cst__6")))))),
   [complex,complex,lbl_18] = __statement(`$$label`("lbl_18"),
     __inside(char_data("complex"),char_data("complex")),__return()),
 [complex,cst__11] = __declaration(__inside(char_data("complex")),
   __constant(`$$value`("10"),char_data("cst__11")),
   __basic(char_data("__integer"))),
 [complex,cst__12] = __declaration(__inside(char_data("complex")),
   __constant(`$$value`("12"),char_data("cst__12")),
   __basic(char_data("__integer"))),
 [complex,cst__14] = __declaration(__inside(char_data("complex")),
   __constant(`$$value`("1"),char_data("cst__14")),
   __basic(char_data("__integer"))),
 [complex,cst__2] = __declaration(__inside(char_data("complex")),
   __constant(`$$value`("30"),char_data("cst__2")),
   __basic(char_data("__integer"))),
 [complex,cst__5] = __declaration(__inside(char_data("complex")),
   __constant(`$$value`("5"),char_data("cst__5")),
   __basic(char_data("__integer"))),
 [complex,cst__6] = __declaration(__inside(char_data("complex")),
   __constant(`$$value`("7"),char_data("cst__6")),
   __basic(char_data("__integer"))),
 [complex,cst__8] = __declaration(__inside(char_data("complex")),
   __constant(`$$value`("2"),char_data("cst__8")),
   __basic(char_data("__integer"))))
table([complex,complex] = [[complex,complex],[complex,cst__14],[complex,
  cst__12],[complex,cst__11],[complex,cst__8],[complex,cst__6],[complex,
  cst__5],[complex,cst__2],[complex,complex],[complex,complex,lbl_1,lbl_3,
  lbl_4],[complex,complex,lbl_1,lbl_3],[complex,complex,lbl_1],[complex,
  complex,lbl_1,lbl_3,lbl_4,_true,lbl_7],[complex,complex,lbl_1,lbl_3,
  lbl_4,_false,lbl_9],[complex,complex,lbl_1,lbl_3,lbl_10],[complex,
  complex,lbl_1,lbl_3,lbl_10,_true,lbl_13],[complex,complex,lbl_1,lbl_3,
  lbl_10,_false,lbl_15],[complex,complex,lbl_1,lbl_16],[complex,complex,
  lbl_1,lbl_17],[complex,complex,lbl_18]])
[[complex,complex,lbl_1,lbl_3,lbl_4,_true,lbl_7],[complex,complex,lbl_1,
  lbl_3,lbl_4,_false,lbl_9],[complex,complex,lbl_1,lbl_3,lbl_10,_true,
  lbl_13],[complex,complex,lbl_1,lbl_3,lbl_10,_false,lbl_15],[complex,
  complex,lbl_1,lbl_16],[complex,complex,lbl_1,lbl_17],[complex,complex,
  lbl_18]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of a is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of b is 0
body [[complex,complex],[complex,cst__14],[complex,cst__12],[complex,
  cst__11],[complex,cst__8],[complex,cst__6],[complex,cst__5],[complex,
  cst__2],[complex,complex],[complex,complex,lbl_1,lbl_3,lbl_4],[complex,
  complex,lbl_1,lbl_3],[complex,complex,lbl_1],[complex,complex,lbl_1,
  lbl_3,lbl_4,_true,lbl_7],[complex,complex,lbl_1,lbl_3,lbl_4,_false,
lbl_9],[complex,complex,lbl_1,lbl_3,lbl_10],[complex,complex,lbl_1,lbl_3,
  lbl_10,_true,lbl_13],[complex,complex,lbl_1,lbl_3,lbl_10,_false,lbl_15],
[complex,complex,lbl_1,lbl_16],[complex,complex,lbl_1,lbl_17],[complex,
  complex,lbl_18]]
lbl_4 __si
 counter 1/0 iteration domain {}

lbl_3 __while
 counter 1/0
lbl_1 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("b")))
[b(),[],{},{}]
collect subscripts __expression(__identifier(char_data("b")))
[b(),[],{},{}]
lbl_10 __si
 counter 1/0 iteration domain {}

collect subscripts __expression(__identifier(char_data("a")))
[a(),[],{},{}]
collect subscripts __expression(__identifier(char_data("a")))
[a(),[],{},{}]
collect subscripts __expression(__identifier(char_data("a")))
[a(),[],{},{}]
collect subscripts __expression(__identifier(char_data("b")))
[b(),[],{},{}]
examining a
examining b
examining complex
examining cst__11
 is a constant
examining cst__12
 is a constant
examining cst__14
 is a constant
examining cst__2
 is a constant
examining cst__5
 is a constant
examining cst__6
 is a constant
examining cst__8
 is a constant
while remnants __lt(a,30)while remnants __lt(b,a)to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified (a >= 30)
to be simplified (30 > a)
to be simplified ( (30 > a) && (b >= a) )
to be simplified ( (30 > a) && ( ( (a > b) && (b > 5) ) && ( (b >= 3) && (5 >= b)
 ) ) )
to be simplified ( (30 > a) && ( ( (a > b) && (b > 5) ) && ( (3 > b) || (b > 5)
 ) ) )
to be simplified ( (30 > a) && ( ( (a > b) && (5 >= b) ) && ( (b >= 8) && (10 >= b)
 ) ) )
to be simplified ( (30 > a) && ( ( (a > b) && (5 >= b) ) && ( (8 > b) || (b > 10)
 ) ) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (30 > a)
to be simplified (a >= 30)
to be simplified (a >= 30)
to be simplified (30 > a)
to be simplified ( (b >= 10) && (12 >= b) )
to be simplified ( (10 > b) || (b > 12) )
to be simplified ( (b >= 10) && (12 >= b) )
to be simplified ( (10 > b) || (b > 12) )
to be simplified (a > b)
to be simplified (b >= a)
to be simplified (b >= a)
to be simplified (b >= a)
to be simplified (a > b)
to be simplified ( (a > b) && (b > 5) )
to be simplified ( (a > b) && (5 >= b) )
to be simplified ( ( (a > b) && (b > 5) ) && ( (b >= 3) && (5 >= b) ) )
to be simplified ( ( (a > b) && (b > 5) ) && ( (3 > b) || (b > 5) ) )
to be simplified ( ( (a > b) && (5 >= b) ) && ( (b >= 8) && (10 >= b) ) )
to be simplified ( ( (a > b) && (5 >= b) ) && ( (8 > b) || (b > 10) ) )
to be simplified (b > 5)
to be simplified (5 >= b)
to be simplified (b > 5)
to be simplified (5 >= b)
to be simplified (b > 5)
to be simplified (5 >= b)
to be simplified TRUE
to be simplified TRUE
to be simplified (a >= 30)
to be simplified (30 > a)
to be simplified ( (30 > a) && (b >= a) )
to be simplified ( (30 > a) && ( ( (a > b) && (b > 5) ) && ( (b >= 3) && (5 >= b)
 ) ) )
to be simplified ( (30 > a) && ( ( (a > b) && (b > 5) ) && ( (3 > b) || (b > 5)
 ) ) )
to be simplified ( (30 > a) && ( ( (a > b) && (5 >= b) ) && ( (b >= 8) && (10 >= b)
 ) ) )
to be simplified ( (30 > a) && ( ( (a > b) && (5 >= b) ) && ( (8 > b) || (b > 10)
 ) ) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (b >= a)
to be simplified ( ( (a > b) && (b > 5) ) && ( (b >= 3) && (5 >= b) ) )
to be simplified ( ( (a > b) && (b > 5) ) && ( (3 > b) || (b > 5) ) )
to be simplified ( ( (a > b) && (5 >= b) ) && ( (b >= 8) && (10 >= b) ) )
to be simplified ( ( (a > b) && (5 >= b) ) && ( (8 > b) || (b > 10) ) )
to be simplified TRUE
to be simplified (b >= a)
to be simplified ( ( (a > b) && (b > 5) ) && ( (b >= 3) && (5 >= b) ) )
to be simplified ( ( (a > b) && (b > 5) ) && ( (3 > b) || (b > 5) ) )
to be simplified ( ( (a > b) && (5 >= b) ) && ( (b >= 8) && (10 >= b) ) )
to be simplified ( ( (a > b) && (5 >= b) ) && ( (8 > b) || (b > 10) ) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE

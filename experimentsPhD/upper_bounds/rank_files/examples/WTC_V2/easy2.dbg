FrontEnd version J.3
qualif easy2
inside declaration [easy2,easy2]
inside declaration [easy2,easy2,x]
inside declaration [easy2,easy2,y]
inside declaration [easy2,cst__6]
inside declaration [easy2,cst__3]
inside declaration [easy2,cst__1]
table([easy2,cst__1] = __declaration(__inside(char_data("easy2")),
  __constant(`$$value`("12"),char_data("cst__1")),
  __basic(char_data("__integer"))),
   [easy2,cst__3] = __declaration(__inside(char_data("easy2")),
     __constant(`$$value`("0"),char_data("cst__3")),
     __basic(char_data("__integer"))),
   [easy2,cst__6] = __declaration(__inside(char_data("easy2")),
     __constant(`$$value`("1"),char_data("cst__6")),
     __basic(char_data("__integer"))),
   [easy2,easy2] = __declaration(__inside(char_data("easy2")),
     __identifier(char_data("easy2")),
     __function(__identifier(char_data("easy2")),__basic(`$$size`("32"),
         char_data("__integer")),__identifier(char_data("z")),
       __basic(`$$size`("32"),char_data("__integer")))),
   [easy2,easy2,init_2] = __statement(`$$label`("init_2"),
     __inside(char_data("easy2"),char_data("easy2")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("x"))),
       __expression(__constant(char_data("cst__1"))))),
   [easy2,easy2,init_4] = __statement(`$$label`("init_4"),
     __inside(char_data("easy2"),char_data("easy2")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("y"))),
       __expression(__constant(char_data("cst__3"))))),
   [easy2,easy2,lbl_10] = __statement(`$$label`("lbl_10"),
     __inside(char_data("easy2"),char_data("easy2")),__return()),
 [easy2,easy2,lbl_5] = __while(`$$label`("lbl_5"),
   __expression(__operator(char_data("__gt")),
     __expression(__identifier(char_data("z"))),
     __expression(__constant(char_data("cst__3"))))),
 [easy2,easy2,lbl_5,lbl_7] = __statement(`$$label`("lbl_7"),
   __inside(char_data("easy2"),char_data("easy2"),char_data("lbl_5")),
   __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("x"))),
     __expression(__operator(char_data("__addition")),
       __expression(__identifier(char_data("x"))),
       __expression(__constant(char_data("cst__6")))))),
 [easy2,easy2,lbl_5,lbl_8] = __statement(`$$label`("lbl_8"),
   __inside(char_data("easy2"),char_data("easy2"),char_data("lbl_5")),
   __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("y"))),
     __expression(__operator(char_data("__subtraction")),
       __expression(__identifier(char_data("y"))),
       __expression(__constant(char_data("cst__6")))))),
 [easy2,easy2,lbl_5,lbl_9] = __statement(`$$label`("lbl_9"),
   __inside(char_data("easy2"),char_data("easy2"),char_data("lbl_5")),
   __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("z"))),
     __expression(__operator(char_data("__subtraction")),
       __expression(__identifier(char_data("z"))),
       __expression(__constant(char_data("cst__6")))))),
 [easy2,easy2,x] = __declaration(__inside(char_data("easy2"),
   char_data("easy2")),__identifier(char_data("x")),__basic(`$$size`("32"),
     char_data("__integer"))),
 [easy2,easy2,y] = __declaration(__inside(char_data("easy2"),
   char_data("easy2")),__identifier(char_data("y")),__basic(`$$size`("32"),
     char_data("__integer"))))
table([easy2,easy2] = [[easy2,easy2],[easy2,cst__6],[easy2,cst__3],[easy2,
  cst__1],[easy2,easy2],[easy2,easy2,x],[easy2,easy2,y],[easy2,easy2,
init_2],[easy2,easy2,init_4],[easy2,easy2,lbl_5],[easy2,easy2,lbl_5,lbl_7],
[easy2,easy2,lbl_5,lbl_8],[easy2,easy2,lbl_5,lbl_9],[easy2,easy2,lbl_10]])
[[easy2,easy2,x],[easy2,easy2,y],[easy2,easy2,init_2],[easy2,easy2,init_4],
[easy2,easy2,lbl_5,lbl_7],[easy2,easy2,lbl_5,lbl_8],[easy2,easy2,lbl_5,
  lbl_9],[easy2,easy2,lbl_10]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of z is 0
body [[easy2,easy2],[easy2,cst__6],[easy2,cst__3],[easy2,cst__1],[easy2,
  easy2],[easy2,easy2,x],[easy2,easy2,y],[easy2,easy2,init_2],[easy2,easy2,
  init_4],[easy2,easy2,lbl_5],[easy2,easy2,lbl_5,lbl_7],[easy2,easy2,lbl_5,
  lbl_8],[easy2,easy2,lbl_5,lbl_9],[easy2,easy2,lbl_10]]
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
collect subscripts __expression(__identifier(char_data("y")))
[y(),[],{},{}]
lbl_5 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
collect subscripts __expression(__identifier(char_data("y")))
[y(),[],{},{}]
collect subscripts __expression(__identifier(char_data("z")))
[z(),[],{},{}]
examining cst__1
 is a constant
examining cst__3
 is a constant
examining cst__6
 is a constant
examining easy2
examining x
 has definitions
examining y
 has definitions
examining z
while remnants __gt(z,0)to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified TRUE
to be simplified TRUE
to be simplified (0 >= z)
to be simplified (z > 0)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (z > 0)
to be simplified (0 >= z)
to be simplified (0 >= z)
to be simplified (z > 0)
to be simplified (z > 0)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (0 >= z)
to be simplified (z > 0)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE

FrontEnd version J.3
qualif nested_loop
inside declaration [nested_loop,nondet]
inside declaration [nested_loop,nested_loop]
inside declaration [nested_loop,nested_loop,i]
inside declaration [nested_loop,nested_loop,j]
inside declaration [nested_loop,nested_loop,k]
inside declaration [nested_loop,cst__7]
inside declaration [nested_loop,cst__2]
table([nested_loop,
  cst__2] = __declaration(__inside(char_data("nested_loop")),
  __constant(`$$value`("0"),char_data("cst__2")),
  __basic(char_data("__integer"))),
   [nested_loop,cst__7] = __declaration(__inside(char_data("nested_loop")),
     __constant(`$$value`("1"),char_data("cst__7")),
     __basic(char_data("__integer"))),
   [nested_loop,
   nested_loop] = __declaration(__inside(char_data("nested_loop")),
     __identifier(char_data("nested_loop")),
     __function(__identifier(char_data("nested_loop")),
       __basic(char_data("void")),__identifier(char_data("n")),
       __basic(`$$size`("32"),char_data("__integer")),
       __identifier(char_data("m")),__basic(`$$size`("32"),
         char_data("__integer")),__identifier(char_data("N")),
       __basic(`$$size`("32"),char_data("__integer")))),
   [nested_loop,nested_loop,
   i] = __declaration(__inside(char_data("nested_loop"),
     char_data("nested_loop")),__identifier(char_data("i")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [nested_loop,nested_loop,
   j] = __declaration(__inside(char_data("nested_loop"),
     char_data("nested_loop")),__identifier(char_data("j")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [nested_loop,nested_loop,
   k] = __declaration(__inside(char_data("nested_loop"),
     char_data("nested_loop")),__identifier(char_data("k")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [nested_loop,nested_loop,lbl_1] = __if(`$$label`("lbl_1"),
     __expression(__operator(char_data("__conjunction")),
       __expression(__operator(char_data("__conjunction")),
         __expression(__operator(char_data("__le")),
           __expression(__constant(char_data("cst__2"))),
           __expression(__identifier(char_data("n")))),
         __expression(__operator(char_data("__le")),
           __expression(__constant(char_data("cst__2"))),
           __expression(__identifier(char_data("m"))))),
       __expression(__operator(char_data("__le")),
         __expression(__constant(char_data("cst__2"))),
         __expression(__identifier(char_data("N")))))),
   [nested_loop,nested_loop,lbl_1,_false,
   lbl_14] = __statement(`$$label`("lbl_14"),
     __inside(char_data("nested_loop"),char_data("nested_loop"),
       char_data("lbl_1"),char_data("_false")),__nop()),
 [nested_loop,nested_loop,lbl_1,_true,
 lbl_3] = __statement(`$$label`("lbl_3"),__inside(char_data("nested_loop"),
     char_data("nested_loop"),char_data("lbl_1"),char_data("_true")),
   __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("i"))),
     __expression(__constant(char_data("cst__2"))))),
 [nested_loop,nested_loop,lbl_1,_true,lbl_4] = __while(`$$label`("lbl_4"),
   __expression(__operator(char_data("__conjunction")),
     __expression(__operator(char_data("__lt")),
       __expression(__identifier(char_data("i"))),
       __expression(__identifier(char_data("n")))),
     __expression(__operator(char_data("__gt")),
       __expression(__operator(char_data("__funcall")),
         __expression(__identifier(char_data("nondet")))),
       __expression(__constant(char_data("cst__2")))))),
 [nested_loop,nested_loop,lbl_1,_true,lbl_4,
 lbl_13] = __statement(`$$label`("lbl_13"),
     __inside(char_data("nested_loop"),char_data("nested_loop"),
     char_data("lbl_1"),char_data("_true"),char_data("lbl_4")),
   __expression(__operator(char_data("__incr")),
     __expression(__identifier(char_data("i"))))),
 [nested_loop,nested_loop,lbl_1,_true,lbl_4,
 lbl_5] = __statement(`$$label`("lbl_5"),__inside(char_data("nested_loop"),
     char_data("nested_loop"),char_data("lbl_1"),char_data("_true"),
     char_data("lbl_4")),
     __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("j"))),
     __expression(__constant(char_data("cst__2"))))),
 [nested_loop,nested_loop,lbl_1,_true,lbl_4,
 lbl_6] = __while(`$$label`("lbl_6"),
   __expression(__operator(char_data("__conjunction")),
     __expression(__operator(char_data("__lt")),
       __expression(__identifier(char_data("j"))),
       __expression(__identifier(char_data("m")))),
     __expression(__operator(char_data("__gt")),
       __expression(__operator(char_data("__funcall")),
         __expression(__identifier(char_data("nondet")))),
       __expression(__constant(char_data("cst__2")))))),
 [nested_loop,nested_loop,lbl_1,_true,lbl_4,lbl_6,
 lbl_10] = __while(`$$label`("lbl_10"),
   __expression(__operator(char_data("__conjunction")),
     __expression(__operator(char_data("__lt")),
       __expression(__identifier(char_data("k"))),
       __expression(__identifier(char_data("N")))),
     __expression(__operator(char_data("__gt")),
       __expression(__operator(char_data("__funcall")),
         __expression(__identifier(char_data("nondet")))),
       __expression(__constant(char_data("cst__2")))))),
 [nested_loop,nested_loop,lbl_1,_true,lbl_4,lbl_6,lbl_10,
 lbl_11] = __statement(`$$label`("lbl_11"),
     __inside(char_data("nested_loop"),char_data("nested_loop"),
     char_data("lbl_1"),char_data("_true"),char_data("lbl_4"),
     char_data("lbl_6"),char_data("lbl_10")),
   __expression(__operator(char_data("_add_assign")),
     __expression(__identifier(char_data("k"))),
     __expression(__constant(char_data("cst__7"))))),
 [nested_loop,nested_loop,lbl_1,_true,lbl_4,lbl_6,
 lbl_12] = __statement(`$$label`("lbl_12"),
     __inside(char_data("nested_loop"),char_data("nested_loop"),
     char_data("lbl_1"),char_data("_true"),char_data("lbl_4"),
     char_data("lbl_6")),
     __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("i"))),
     __expression(__identifier(char_data("k"))))),
 [nested_loop,nested_loop,lbl_1,_true,lbl_4,lbl_6,
 lbl_8] = __statement(`$$label`("lbl_8"),__inside(char_data("nested_loop"),
     char_data("nested_loop"),char_data("lbl_1"),char_data("_true"),
     char_data("lbl_4"),char_data("lbl_6")),
   __expression(__operator(char_data("_add_assign")),
     __expression(__identifier(char_data("j"))),
     __expression(__constant(char_data("cst__7"))))),
 [nested_loop,nested_loop,lbl_1,_true,lbl_4,lbl_6,
 lbl_9] = __statement(`$$label`("lbl_9"),__inside(char_data("nested_loop"),
     char_data("nested_loop"),char_data("lbl_1"),char_data("_true"),
     char_data("lbl_4"),char_data("lbl_6")),
   __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("k"))),
     __expression(__identifier(char_data("i"))))),
 [nested_loop,nondet] = __declaration(__inside(char_data("nested_loop")),
   __identifier(char_data("nondet")),
   __function(__identifier(char_data("nondet")),__basic(`$$size`("32"),
       char_data("__integer")))))
table([nested_loop,nested_loop] = [[nested_loop,nondet],[nested_loop,
  nested_loop],[nested_loop,cst__7],[nested_loop,cst__2],[nested_loop,
  nested_loop],[nested_loop,nested_loop,i],[nested_loop,nested_loop,j],
[nested_loop,nested_loop,k],[nested_loop,nested_loop,lbl_1],[nested_loop,
  nested_loop,lbl_1,_true,lbl_3],[nested_loop,nested_loop,lbl_1,_true,
lbl_4],[nested_loop,nested_loop,lbl_1,_true,lbl_4,lbl_5],[nested_loop,
  nested_loop,lbl_1,_true,lbl_4,lbl_6],[nested_loop,nested_loop,lbl_1,
  _true,lbl_4,lbl_6,lbl_8],[nested_loop,nested_loop,lbl_1,_true,lbl_4,
  lbl_6,lbl_9],[nested_loop,nested_loop,lbl_1,_true,lbl_4,lbl_6,lbl_10],
[nested_loop,nested_loop,lbl_1,_true,lbl_4,lbl_6,lbl_10,lbl_11],
[nested_loop,nested_loop,lbl_1,_true,lbl_4,lbl_6,lbl_12],[nested_loop,
  nested_loop,lbl_1,_true,lbl_4,lbl_13],[nested_loop,nested_loop,lbl_1,
  _false,lbl_14]])
[[nested_loop,nested_loop,i],[nested_loop,nested_loop,j],[nested_loop,
  nested_loop,k],[nested_loop,nested_loop,lbl_1,_true,lbl_3],[nested_loop,
  nested_loop,lbl_1,_true,lbl_4,lbl_5],[nested_loop,nested_loop,lbl_1,
  _true,lbl_4,lbl_6,lbl_8],[nested_loop,nested_loop,lbl_1,_true,lbl_4,
  lbl_6,lbl_9],[nested_loop,nested_loop,lbl_1,_true,lbl_4,lbl_6,lbl_10,
  lbl_11],[nested_loop,nested_loop,lbl_1,_true,lbl_4,lbl_6,lbl_12],
[nested_loop,nested_loop,lbl_1,_true,lbl_4,lbl_13],[nested_loop,
  nested_loop,lbl_1,_false,lbl_14]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of n is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of m is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of N is 0
body [[nested_loop,nondet],[nested_loop,nested_loop],[nested_loop,cst__7],
[nested_loop,cst__2],[nested_loop,nested_loop],[nested_loop,nested_loop,i],
[nested_loop,nested_loop,j],[nested_loop,nested_loop,k],[nested_loop,
  nested_loop,lbl_1],[nested_loop,nested_loop,lbl_1,_true,lbl_3],
[nested_loop,nested_loop,lbl_1,_true,lbl_4],[nested_loop,nested_loop,lbl_1,
  _true,lbl_4,lbl_5],[nested_loop,nested_loop,lbl_1,_true,lbl_4,lbl_6],
[nested_loop,nested_loop,lbl_1,_true,lbl_4,lbl_6,lbl_8],[nested_loop,
  nested_loop,lbl_1,_true,lbl_4,lbl_6,lbl_9],[nested_loop,nested_loop,
  lbl_1,_true,lbl_4,lbl_6,lbl_10],[nested_loop,nested_loop,lbl_1,_true,
  lbl_4,lbl_6,lbl_10,lbl_11],[nested_loop,nested_loop,lbl_1,_true,lbl_4,
  lbl_6,lbl_12],[nested_loop,nested_loop,lbl_1,_true,lbl_4,lbl_13],
[nested_loop,nested_loop,lbl_1,_false,lbl_14]]
lbl_1 __si
 counter 1/0 iteration domain {}

collect subscripts __expression(__identifier(char_data("i")))
[i(),[],{},{}]
lbl_4 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("j")))
[j(),[],{},{}]
lbl_6 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("j")))
[j(),[],{},{}]
collect subscripts __expression(__identifier(char_data("k")))
[k(),[],{},{}]
lbl_10 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("k")))
[k(),[],{},{}]
collect subscripts __expression(__identifier(char_data("i")))
[i(),[],{},{}]
collect subscripts __expression(__identifier(char_data("i")))
[i(),[],{},{}]
examining N
examining cst__2
 is a constant
examining cst__7
 is a constant
examining i
 has definitions
examining j
 has definitions
examining k
 has definitions
examining m
examining n
examining nested_loop
examining nondet
while remnants __conjunction(__lt(i,n),__gt(nondet(),
0))while remnants __conjunction(__lt(j,m),__gt(nondet(),
0))while remnants __conjunction(__lt(k,N),__gt(nondet(),
0))to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified ( ( (0 > n) || (0 > m) ) || (0 > N) )
to be simplified ( ( (n >= 0) && (m >= 0) ) && (N >= 0) )
to be simplified ( ( (n >= 0) && (m >= 0) ) && (N >= 0) )
to be simplified ( ( ( (n >= 0) && (m >= 0) ) && (N >= 0) ) && (n > 0) )
to be simplified ( ( ( (n >= 0) && (m >= 0) ) && (N >= 0) ) && (n > 0) )
to be simplified ( ( ( ( (n >= 0) && (m >= 0) ) && (N >= 0) ) && (n > 0) ) && 
(m > 0) )
to be simplified ( ( ( ( (n >= 0) && (m >= 0) ) && (N >= 0) ) && (n > 0) ) && 
( (m > 0) && (N > 0) ) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified ( ( (n >= 0) && (m >= 0) ) && (N >= 0) )
to be simplified ( ( (0 > n) || (0 > m) ) || (0 > N) )
to be simplified ( ( (n >= 0) && (m >= 0) ) && (N >= 0) )
to be simplified ( ( (0 > n) || (0 > m) ) || (0 > N) )
to be simplified ( ( (n >= 0) && (m >= 0) ) && (N >= 0) )
to be simplified (N > k)
to be simplified TRUE
to be simplified TRUE
to be simplified (N > k)
to be simplified (n > i)
to be simplified TRUE
to be simplified (n > i)
to be simplified (n > i)
to be simplified (m > j)
to be simplified TRUE
to be simplified TRUE
to be simplified (m > j)
to be simplified (m > j)
to be simplified (m > j)
to be simplified ( (m > j) && (N > i) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (n > i)
to be simplified (n > i)
to be simplified ( (n > i) && (m > 0) )
to be simplified ( (n > i) && ( (m > 0) && (N > i) ) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (m > j)
to be simplified ( (m > j) && (N > i) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (N > k)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE

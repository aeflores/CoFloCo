FrontEnd version J.3
qualif aaron12
inside declaration [aaron12,nondet]
inside declaration [aaron12,aaron12]
inside declaration [aaron12,cst__4]
inside declaration [aaron12,cst__3]
table([aaron12,aaron12] = __declaration(__inside(char_data("aaron12")),
  __identifier(char_data("aaron12")),
  __function(__identifier(char_data("aaron12")),__basic(`$$size`("32"),
      char_data("__integer")),__identifier(char_data("x")),
    __basic(`$$size`("32"),char_data("__integer")),
    __identifier(char_data("y")),__basic(`$$size`("32"),
      char_data("__integer")),__identifier(char_data("z")),
    __basic(`$$size`("32"),char_data("__integer")))),
   [aaron12,aaron12,lbl_1] = __while(`$$label`("lbl_1"),
     __expression(__operator(char_data("__ge")),
       __expression(__identifier(char_data("x"))),
       __expression(__identifier(char_data("y"))))),
   [aaron12,aaron12,lbl_1,lbl_2] = __if(`$$label`("lbl_2"),
     __expression(__operator(char_data("__gt")),
       __expression(__operator(char_data("__funcall")),
         __expression(__identifier(char_data("nondet")))),
       __expression(__constant(char_data("cst__3"))))),
   [aaron12,aaron12,lbl_1,lbl_2,_false,
   lbl_7] = __statement(`$$label`("lbl_7"),__inside(char_data("aaron12"),
       char_data("aaron12"),char_data("lbl_1"),char_data("lbl_2"),
       char_data("_false")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("x"))),
       __expression(__operator(char_data("__subtraction")),
         __expression(__identifier(char_data("x"))),
         __expression(__identifier(char_data("z")))))),
   [aaron12,aaron12,lbl_1,lbl_2,_false,
   lbl_8] = __statement(`$$label`("lbl_8"),__inside(char_data("aaron12"),
       char_data("aaron12"),char_data("lbl_1"),char_data("lbl_2"),
       char_data("_false")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("y"))),
       __expression(__operator(char_data("__addition")),
         __expression(__identifier(char_data("y"))),
         __expression(__operator(char_data("__multiplication")),
           __expression(__identifier(char_data("z"))),
           __expression(__identifier(char_data("z"))))))),
   [aaron12,aaron12,lbl_1,lbl_2,_false,
   lbl_9] = __statement(`$$label`("lbl_9"),__inside(char_data("aaron12"),
       char_data("aaron12"),char_data("lbl_1"),char_data("lbl_2"),
       char_data("_false")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("z"))),
       __expression(__operator(char_data("__subtraction")),
         __expression(__identifier(char_data("z"))),
         __expression(__constant(char_data("cst__4")))))),
   [aaron12,aaron12,lbl_1,lbl_2,_true,
   lbl_5] = __statement(`$$label`("lbl_5"),__inside(char_data("aaron12"),
       char_data("aaron12"),char_data("lbl_1"),char_data("lbl_2"),
       char_data("_true")),
       __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("x"))),
       __expression(__operator(char_data("__addition")),
         __expression(__identifier(char_data("x"))),
         __expression(__constant(char_data("cst__4")))))),
   [aaron12,aaron12,lbl_1,lbl_2,_true,
   lbl_6] = __statement(`$$label`("lbl_6"),__inside(char_data("aaron12"),
       char_data("aaron12"),char_data("lbl_1"),char_data("lbl_2"),
       char_data("_true")),
       __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("y"))),
       __expression(__operator(char_data("__addition")),
         __expression(__identifier(char_data("y"))),
         __expression(__identifier(char_data("x")))))),
   [aaron12,aaron12,lbl_10] = __statement(`$$label`("lbl_10"),
     __inside(char_data("aaron12"),char_data("aaron12")),__return()),
 [aaron12,cst__3] = __declaration(__inside(char_data("aaron12")),
   __constant(`$$value`("0"),char_data("cst__3")),
   __basic(char_data("__integer"))),
 [aaron12,cst__4] = __declaration(__inside(char_data("aaron12")),
   __constant(`$$value`("1"),char_data("cst__4")),
   __basic(char_data("__integer"))),
 [aaron12,nondet] = __declaration(__inside(char_data("aaron12")),
   __identifier(char_data("nondet")),
   __function(__identifier(char_data("nondet")),__basic(`$$size`("32"),
       char_data("__integer")))))
table([aaron12,aaron12] = [[aaron12,nondet],[aaron12,aaron12],[aaron12,
  cst__4],[aaron12,cst__3],[aaron12,aaron12],[aaron12,aaron12,lbl_1,lbl_2],
[aaron12,aaron12,lbl_1],[aaron12,aaron12,lbl_1,lbl_2,_true,lbl_5],[aaron12,
  aaron12,lbl_1,lbl_2,_true,lbl_6],[aaron12,aaron12,lbl_1,lbl_2,_false,
  lbl_7],[aaron12,aaron12,lbl_1,lbl_2,_false,lbl_8],[aaron12,aaron12,lbl_1,
  lbl_2,_false,lbl_9],[aaron12,aaron12,lbl_10]])
[[aaron12,aaron12,lbl_1,lbl_2,_true,lbl_5],[aaron12,aaron12,lbl_1,lbl_2,
  _true,lbl_6],[aaron12,aaron12,lbl_1,lbl_2,_false,lbl_7],[aaron12,aaron12,
  lbl_1,lbl_2,_false,lbl_8],[aaron12,aaron12,lbl_1,lbl_2,_false,lbl_9],
[aaron12,aaron12,lbl_10]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of x is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of y is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of z is 0
body [[aaron12,nondet],[aaron12,aaron12],[aaron12,cst__4],[aaron12,cst__3],
[aaron12,aaron12],[aaron12,aaron12,lbl_1,lbl_2],[aaron12,aaron12,lbl_1],
[aaron12,aaron12,lbl_1,lbl_2,_true,lbl_5],[aaron12,aaron12,lbl_1,lbl_2,
  _true,lbl_6],[aaron12,aaron12,lbl_1,lbl_2,_false,lbl_7],[aaron12,aaron12,
  lbl_1,lbl_2,_false,lbl_8],[aaron12,aaron12,lbl_1,lbl_2,_false,lbl_9],
[aaron12,aaron12,lbl_10]]
lbl_2 __si
 counter 1/0 iteration domain {}

lbl_1 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
collect subscripts __expression(__identifier(char_data("y")))
[y(),[],{},{}]
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
collect subscripts __expression(__identifier(char_data("y")))
[y(),[],{},{}]
collect subscripts __expression(__identifier(char_data("z")))
[z(),[],{},{}]
examining aaron12
examining cst__3
 is a constant
examining cst__4
 is a constant
examining nondet
examining x
examining y
examining z
while remnants __ge(x,y)to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified (y > x)
to be simplified (x >= y)
to be simplified (x >= y)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (x >= y)
to be simplified (y > x)
to be simplified (y > x)
to be simplified (x >= y)
to be simplified (x >= y)
to be simplified (x >= y)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (y > x)
to be simplified (x >= y)
to be simplified (x >= y)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (y > x)
to be simplified (x >= y)
to be simplified (x >= y)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE

FrontEnd version J.3
qualif speedNestedMultiple
inside declaration [speedNestedMultiple,nondet]
inside declaration [speedNestedMultiple,speedNestedMultiple]
inside declaration [speedNestedMultiple,cst__3]
table([speedNestedMultiple,
cst__3] = __declaration(__inside(char_data("speedNestedMultiple")),
  __constant(`$$value`("0"),char_data("cst__3")),
  __basic(char_data("__integer"))),
   [speedNestedMultiple,
   nondet] = __declaration(__inside(char_data("speedNestedMultiple")),
     __identifier(char_data("nondet")),
     __function(__identifier(char_data("nondet")),__basic(`$$size`("32"),
         char_data("__integer")))),
   [speedNestedMultiple,
   speedNestedMultiple] = __declaration(__inside(char_data("speedNestedMultiple"
   )),__identifier(char_data("speedNestedMultiple")),
     __function(__identifier(char_data("speedNestedMultiple")),
       __basic(`$$size`("32"),char_data("__integer")),
       __identifier(char_data("x")),__basic(`$$size`("32"),
         char_data("__integer")),__identifier(char_data("n")),
       __basic(`$$size`("32"),char_data("__integer")),
       __identifier(char_data("y")),__basic(`$$size`("32"),
         char_data("__integer")),__identifier(char_data("m")),
       __basic(`$$size`("32"),char_data("__integer")))),
   [speedNestedMultiple,speedNestedMultiple,
   lbl_1] = __while(`$$label`("lbl_1"),
     __expression(__operator(char_data("__lt")),
       __expression(__identifier(char_data("x"))),
       __expression(__identifier(char_data("n"))))),
   [speedNestedMultiple,speedNestedMultiple,lbl_1,
   lbl_2] = __while(`$$label`("lbl_2"),
     __expression(__operator(char_data("__conjunction")),
       __expression(__operator(char_data("__lt")),
         __expression(__identifier(char_data("y"))),
         __expression(__identifier(char_data("m")))),
       __expression(__operator(char_data("__gt")),
         __expression(__operator(char_data("__funcall")),
           __expression(__identifier(char_data("nondet")))),
         __expression(__constant(char_data("cst__3")))))),
   [speedNestedMultiple,speedNestedMultiple,lbl_1,lbl_2,
   lbl_4] = __statement(`$$label`("lbl_4"),
     __inside(char_data("speedNestedMultiple"),
       char_data("speedNestedMultiple"),char_data("lbl_1"),
       char_data("lbl_2")),
       __expression(__operator(char_data("_post_incr")),
       __expression(__identifier(char_data("y"))))),
   [speedNestedMultiple,speedNestedMultiple,lbl_1,
   lbl_5] = __statement(`$$label`("lbl_5"),
     __inside(char_data("speedNestedMultiple"),
       char_data("speedNestedMultiple"),char_data("lbl_1")),
     __expression(__operator(char_data("_post_incr")),
       __expression(__identifier(char_data("x"))))),
   [speedNestedMultiple,speedNestedMultiple,
   lbl_6] = __statement(`$$label`("lbl_6"),
     __inside(char_data("speedNestedMultiple"),
       char_data("speedNestedMultiple")),__nop()),
 [speedNestedMultiple,speedNestedMultiple,
 lbl_7] = __statement(`$$label`("lbl_7"),
   __inside(char_data("speedNestedMultiple"),
     char_data("speedNestedMultiple")),__return()))
table([speedNestedMultiple,speedNestedMultiple] = [[speedNestedMultiple,
nondet],[speedNestedMultiple,speedNestedMultiple],[speedNestedMultiple,
cst__3],[speedNestedMultiple,speedNestedMultiple],[speedNestedMultiple,
speedNestedMultiple,lbl_1,lbl_2],[speedNestedMultiple,speedNestedMultiple,
lbl_1],[speedNestedMultiple,speedNestedMultiple,lbl_1,lbl_2,lbl_4],
[speedNestedMultiple,speedNestedMultiple,lbl_1,lbl_5],[speedNestedMultiple,
speedNestedMultiple,lbl_6],[speedNestedMultiple,speedNestedMultiple,
lbl_7]])
[[speedNestedMultiple,speedNestedMultiple,lbl_1,lbl_2,lbl_4],
[speedNestedMultiple,speedNestedMultiple,lbl_1,lbl_5],[speedNestedMultiple,
speedNestedMultiple,lbl_6],[speedNestedMultiple,speedNestedMultiple,lbl_7]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of x is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of n is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of y is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of m is 0
body [[speedNestedMultiple,nondet],[speedNestedMultiple,
speedNestedMultiple],[speedNestedMultiple,cst__3],[speedNestedMultiple,
speedNestedMultiple],[speedNestedMultiple,speedNestedMultiple,lbl_1,lbl_2],
[speedNestedMultiple,speedNestedMultiple,lbl_1],[speedNestedMultiple,
speedNestedMultiple,lbl_1,lbl_2,lbl_4],[speedNestedMultiple,
speedNestedMultiple,lbl_1,lbl_5],[speedNestedMultiple,speedNestedMultiple,
lbl_6],[speedNestedMultiple,speedNestedMultiple,lbl_7]]
lbl_2 __while
 counter 1/0
lbl_1 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("y")))
[y(),[],{},{}]
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
examining cst__3
 is a constant
examining m
examining n
examining nondet
examining speedNestedMultiple
examining x
examining y
while remnants __lt(x,n)while remnants __conjunction(__lt(y,m),
__gt(nondet(),0))to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified (x >= n)
to be simplified (n > x)
to be simplified (n > x)
to be simplified ( (n > x) && (m > y) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (n > x)
to be simplified (x >= n)
to be simplified (x >= n)
to be simplified (x >= n)
to be simplified (n > x)
to be simplified (m > y)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (m > y)
to be simplified (m > y)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (x >= n)
to be simplified (n > x)
to be simplified (n > x)
to be simplified ( (n > x) && (m > y) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (m > y)

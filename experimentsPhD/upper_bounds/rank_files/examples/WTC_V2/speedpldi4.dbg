FrontEnd version J.3
qualif speedpldi4
inside declaration [speedpldi4,speedpldi4]
inside declaration [speedpldi4,speedpldi4,i]
inside declaration [speedpldi4,cst__2]
table([speedpldi4,
  cst__2] = __declaration(__inside(char_data("speedpldi4")),
  __constant(`$$value`("0"),char_data("cst__2")),
  __basic(char_data("__integer"))),
   [speedpldi4,
     speedpldi4] = __declaration(__inside(char_data("speedpldi4")),
     __identifier(char_data("speedpldi4")),
     __function(__identifier(char_data("speedpldi4")),
       __basic(char_data("void")),__identifier(char_data("m")),
       __basic(`$$size`("32"),char_data("__integer")),
       __identifier(char_data("n")),__basic(`$$size`("32"),
         char_data("__integer")))),
   [speedpldi4,speedpldi4,
   i] = __declaration(__inside(char_data("speedpldi4"),
     char_data("speedpldi4")),__identifier(char_data("i")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [speedpldi4,speedpldi4,lbl_1] = __if(`$$label`("lbl_1"),
     __expression(__operator(char_data("__le")),
       __expression(__identifier(char_data("m"))),
       __expression(__constant(char_data("cst__2"))))),
   [speedpldi4,speedpldi4,lbl_1,_false,
   lbl_4] = __statement(`$$label`("lbl_4"),
       __inside(char_data("speedpldi4"),char_data("speedpldi4"),
       char_data("lbl_1"),char_data("_false")),__nop()),
 [speedpldi4,speedpldi4,lbl_1,_true,
   lbl_3] = __statement(`$$label`("lbl_3"),
     __inside(char_data("speedpldi4"),char_data("speedpldi4"),
     char_data("lbl_1"),char_data("_true")),__return()),
[speedpldi4,speedpldi4,lbl_5] = __if(`$$label`("lbl_5"),
 __expression(__operator(char_data("__le")),
   __expression(__identifier(char_data("n"))),
   __expression(__identifier(char_data("m"))))),
[speedpldi4,speedpldi4,lbl_5,_false,
 lbl_7] = __statement(`$$label`("lbl_7"),__inside(char_data("speedpldi4"),
   char_data("speedpldi4"),char_data("lbl_5"),char_data("_false")),
__nop()),
[speedpldi4,speedpldi4,lbl_5,_true,lbl_6] = __statement(`$$label`("lbl_6"),
__inside(char_data("speedpldi4"),char_data("speedpldi4"),
 char_data("lbl_5"),char_data("_true")),__return()),
[speedpldi4,speedpldi4,lbl_8] = __statement(`$$label`("lbl_8"),
__inside(char_data("speedpldi4"),char_data("speedpldi4")),
__expression(__operator(char_data("__assignment")),
__expression(__identifier(char_data("i"))),
__expression(__identifier(char_data("n"))))),
[speedpldi4,speedpldi4,lbl_9] = __while(`$$label`("lbl_9"),
__expression(__operator(char_data("__gt")),
__expression(__identifier(char_data("i"))),
__expression(__constant(char_data("cst__2"))))),
[speedpldi4,speedpldi4,lbl_9,lbl_10] = __if(`$$label`("lbl_10"),
__expression(__operator(char_data("__lt")),
__expression(__identifier(char_data("i"))),
__expression(__identifier(char_data("m"))))),
[speedpldi4,speedpldi4,lbl_9,lbl_10,_false,
lbl_12] = __statement(`$$label`("lbl_12"),__inside(char_data("speedpldi4"),
char_data("speedpldi4"),char_data("lbl_9"),char_data("lbl_10"),
char_data("_false")),__expression(__operator(char_data("_sub_assign")),
__expression(__identifier(char_data("i"))),
__expression(__identifier(char_data("m"))))),
[speedpldi4,speedpldi4,lbl_9,lbl_10,_true,
lbl_11] = __statement(`$$label`("lbl_11"),__inside(char_data("speedpldi4"),
char_data("speedpldi4"),char_data("lbl_9"),char_data("lbl_10"),
char_data("_true")),__expression(__operator(char_data("__decr")),
__expression(__identifier(char_data("i"))))))
table([speedpldi4,speedpldi4] = [[speedpldi4,speedpldi4],[speedpldi4,
cst__2],[speedpldi4,speedpldi4],[speedpldi4,speedpldi4,i],[speedpldi4,
speedpldi4,lbl_1],[speedpldi4,speedpldi4,lbl_1,_true,lbl_3],[speedpldi4,
speedpldi4,lbl_1,_false,lbl_4],[speedpldi4,speedpldi4,lbl_5],[speedpldi4,
speedpldi4,lbl_5,_true,lbl_6],[speedpldi4,speedpldi4,lbl_5,_false,lbl_7],
[speedpldi4,speedpldi4,lbl_8],[speedpldi4,speedpldi4,lbl_9,lbl_10],
[speedpldi4,speedpldi4,lbl_9],[speedpldi4,speedpldi4,lbl_9,lbl_10,_true,
lbl_11],[speedpldi4,speedpldi4,lbl_9,lbl_10,_false,lbl_12]])
[[speedpldi4,speedpldi4,i],[speedpldi4,speedpldi4,lbl_1,_true,lbl_3],
[speedpldi4,speedpldi4,lbl_1,_false,lbl_4],[speedpldi4,speedpldi4,lbl_5,
_true,lbl_6],[speedpldi4,speedpldi4,lbl_5,_false,lbl_7],[speedpldi4,
speedpldi4,lbl_8],[speedpldi4,speedpldi4,lbl_9,lbl_10,_true,lbl_11],
[speedpldi4,speedpldi4,lbl_9,lbl_10,_false,lbl_12]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of m is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of n is 0
body [[speedpldi4,speedpldi4],[speedpldi4,cst__2],[speedpldi4,speedpldi4],
[speedpldi4,speedpldi4,i],[speedpldi4,speedpldi4,lbl_1],[speedpldi4,
speedpldi4,lbl_1,_true,lbl_3],[speedpldi4,speedpldi4,lbl_1,_false,lbl_4],
[speedpldi4,speedpldi4,lbl_5],[speedpldi4,speedpldi4,lbl_5,_true,lbl_6],
[speedpldi4,speedpldi4,lbl_5,_false,lbl_7],[speedpldi4,speedpldi4,lbl_8],
[speedpldi4,speedpldi4,lbl_9,lbl_10],[speedpldi4,speedpldi4,lbl_9],
[speedpldi4,speedpldi4,lbl_9,lbl_10,_true,lbl_11],[speedpldi4,speedpldi4,
lbl_9,lbl_10,_false,lbl_12]]
lbl_1 __si
 counter 1/0 iteration domain {}

lbl_5 __si
 counter 1/0 iteration domain {}

collect subscripts __expression(__identifier(char_data("i")))
[i(),[],{},{}]
lbl_10 __si
 counter 1/0 iteration domain {}

lbl_9 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("i")))
[i(),[],{},{}]
examining cst__2
 is a constant
examining i
 has definitions
examining m
examining n
examining speedpldi4
while remnants __gt(i,0)to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified (0 >= m)
to be simplified (m > 0)
to be simplified ( (m > 0) && (m >= n) )
to be simplified ( (m > 0) && (n > m) )
to be simplified ( ( (m > 0) && (n > m) ) && (0 >= n) )
to be simplified ( ( (m > 0) && (n > m) ) && ( (n > 0) && (m > n) ) )
to be simplified ( ( (m > 0) && (n > m) ) && ( (n > 0) && (n >= m) ) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (0 >= m)
to be simplified (m > 0)
to be simplified (0 >= m)
to be simplified (m > 0)
to be simplified (m > i)
to be simplified (i >= m)
to be simplified (m > i)
to be simplified (i >= m)
to be simplified (m >= n)
to be simplified (n > m)
to be simplified (m >= n)
to be simplified (n > m)
to be simplified (i > 0)
to be simplified (0 >= i)
to be simplified (0 >= i)
to be simplified (i > 0)
to be simplified ( (i > 0) && (m > i) )
to be simplified ( (i > 0) && (i >= m) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (0 >= i)
to be simplified ( (i > 0) && (m > i) )
to be simplified ( (i > 0) && (i >= m) )
to be simplified TRUE
to be simplified (0 >= i)
to be simplified ( (i > 0) && (m > i) )
to be simplified ( (i > 0) && (i >= m) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE

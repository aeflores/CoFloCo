FrontEnd version J.3
qualif speedpldi3
inside declaration [speedpldi3,speedpldi3]
inside declaration [speedpldi3,speedpldi3,i]
inside declaration [speedpldi3,speedpldi3,j]
inside declaration [speedpldi3,cst__2]
table([speedpldi3,
  cst__2] = __declaration(__inside(char_data("speedpldi3")),
  __constant(`$$value`("0"),char_data("cst__2")),
  __basic(char_data("__integer"))),
   [speedpldi3,
     speedpldi3] = __declaration(__inside(char_data("speedpldi3")),
     __identifier(char_data("speedpldi3")),
     __function(__identifier(char_data("speedpldi3")),
       __basic(char_data("void")),__identifier(char_data("m")),
       __basic(`$$size`("32"),char_data("__integer")),
       __identifier(char_data("n")),__basic(`$$size`("32"),
         char_data("__integer")))),
   [speedpldi3,speedpldi3,
   i] = __declaration(__inside(char_data("speedpldi3"),
     char_data("speedpldi3")),__identifier(char_data("i")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [speedpldi3,speedpldi3,
   j] = __declaration(__inside(char_data("speedpldi3"),
     char_data("speedpldi3")),__identifier(char_data("j")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [speedpldi3,speedpldi3,lbl_1] = __if(`$$label`("lbl_1"),
     __expression(__operator(char_data("__le")),
       __expression(__identifier(char_data("m"))),
       __expression(__constant(char_data("cst__2"))))),
   [speedpldi3,speedpldi3,lbl_1,_false,
   lbl_4] = __statement(`$$label`("lbl_4"),
       __inside(char_data("speedpldi3"),char_data("speedpldi3"),
       char_data("lbl_1"),char_data("_false")),__nop()),
 [speedpldi3,speedpldi3,lbl_1,_true,
   lbl_3] = __statement(`$$label`("lbl_3"),
     __inside(char_data("speedpldi3"),char_data("speedpldi3"),
     char_data("lbl_1"),char_data("_true")),__return()),
[speedpldi3,speedpldi3,lbl_10] = __while(`$$label`("lbl_10"),
 __expression(__operator(char_data("__lt")),
   __expression(__identifier(char_data("i"))),
   __expression(__identifier(char_data("n"))))),
[speedpldi3,speedpldi3,lbl_10,lbl_11] = __if(`$$label`("lbl_11"),
 __expression(__operator(char_data("__lt")),
   __expression(__identifier(char_data("j"))),
   __expression(__identifier(char_data("m"))))),
[speedpldi3,speedpldi3,lbl_10,lbl_11,_false,
lbl_13] = __statement(`$$label`("lbl_13"),__inside(char_data("speedpldi3"),
   char_data("speedpldi3"),char_data("lbl_10"),char_data("lbl_11"),
   char_data("_false")),__expression(__operator(char_data("__assignment")),
   __expression(__identifier(char_data("j"))),
   __expression(__constant(char_data("cst__2"))))),
[speedpldi3,speedpldi3,lbl_10,lbl_11,_false,
lbl_14] = __statement(`$$label`("lbl_14"),__inside(char_data("speedpldi3"),
   char_data("speedpldi3"),char_data("lbl_10"),char_data("lbl_11"),
   char_data("_false")),__expression(__operator(char_data("__incr")),
   __expression(__identifier(char_data("i"))))),
[speedpldi3,speedpldi3,lbl_10,lbl_11,_true,
lbl_12] = __statement(`$$label`("lbl_12"),__inside(char_data("speedpldi3"),
   char_data("speedpldi3"),char_data("lbl_10"),char_data("lbl_11"),
   char_data("_true")),__expression(__operator(char_data("__incr")),
   __expression(__identifier(char_data("j"))))),
[speedpldi3,speedpldi3,lbl_5] = __if(`$$label`("lbl_5"),
 __expression(__operator(char_data("__le")),
   __expression(__identifier(char_data("n"))),
   __expression(__identifier(char_data("m"))))),
[speedpldi3,speedpldi3,lbl_5,_false,
 lbl_7] = __statement(`$$label`("lbl_7"),__inside(char_data("speedpldi3"),
   char_data("speedpldi3"),char_data("lbl_5"),char_data("_false")),
__nop()),
[speedpldi3,speedpldi3,lbl_5,_true,lbl_6] = __statement(`$$label`("lbl_6"),
__inside(char_data("speedpldi3"),char_data("speedpldi3"),
 char_data("lbl_5"),char_data("_true")),__return()),
[speedpldi3,speedpldi3,lbl_8] = __statement(`$$label`("lbl_8"),
__inside(char_data("speedpldi3"),char_data("speedpldi3")),
__expression(__operator(char_data("__assignment")),
__expression(__identifier(char_data("i"))),
__expression(__constant(char_data("cst__2"))))),
[speedpldi3,speedpldi3,lbl_9] = __statement(`$$label`("lbl_9"),
__inside(char_data("speedpldi3"),char_data("speedpldi3")),
__expression(__operator(char_data("__assignment")),
__expression(__identifier(char_data("j"))),
__expression(__constant(char_data("cst__2"))))))
table([speedpldi3,speedpldi3] = [[speedpldi3,speedpldi3],[speedpldi3,
cst__2],[speedpldi3,speedpldi3],[speedpldi3,speedpldi3,i],[speedpldi3,
speedpldi3,j],[speedpldi3,speedpldi3,lbl_1],[speedpldi3,speedpldi3,lbl_1,
_true,lbl_3],[speedpldi3,speedpldi3,lbl_1,_false,lbl_4],[speedpldi3,
speedpldi3,lbl_5],[speedpldi3,speedpldi3,lbl_5,_true,lbl_6],[speedpldi3,
speedpldi3,lbl_5,_false,lbl_7],[speedpldi3,speedpldi3,lbl_8],[speedpldi3,
speedpldi3,lbl_9],[speedpldi3,speedpldi3,lbl_10,lbl_11],[speedpldi3,
speedpldi3,lbl_10],[speedpldi3,speedpldi3,lbl_10,lbl_11,_true,lbl_12],
[speedpldi3,speedpldi3,lbl_10,lbl_11,_false,lbl_13],[speedpldi3,speedpldi3,
lbl_10,lbl_11,_false,lbl_14]])
[[speedpldi3,speedpldi3,i],[speedpldi3,speedpldi3,j],[speedpldi3,
speedpldi3,lbl_1,_true,lbl_3],[speedpldi3,speedpldi3,lbl_1,_false,lbl_4],
[speedpldi3,speedpldi3,lbl_5,_true,lbl_6],[speedpldi3,speedpldi3,lbl_5,
_false,lbl_7],[speedpldi3,speedpldi3,lbl_8],[speedpldi3,speedpldi3,lbl_9],
[speedpldi3,speedpldi3,lbl_10,lbl_11,_true,lbl_12],[speedpldi3,speedpldi3,
lbl_10,lbl_11,_false,lbl_13],[speedpldi3,speedpldi3,lbl_10,lbl_11,_false,
lbl_14]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of m is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of n is 0
body [[speedpldi3,speedpldi3],[speedpldi3,cst__2],[speedpldi3,speedpldi3],
[speedpldi3,speedpldi3,i],[speedpldi3,speedpldi3,j],[speedpldi3,speedpldi3,
lbl_1],[speedpldi3,speedpldi3,lbl_1,_true,lbl_3],[speedpldi3,speedpldi3,
lbl_1,_false,lbl_4],[speedpldi3,speedpldi3,lbl_5],[speedpldi3,speedpldi3,
lbl_5,_true,lbl_6],[speedpldi3,speedpldi3,lbl_5,_false,lbl_7],[speedpldi3,
speedpldi3,lbl_8],[speedpldi3,speedpldi3,lbl_9],[speedpldi3,speedpldi3,
lbl_10,lbl_11],[speedpldi3,speedpldi3,lbl_10],[speedpldi3,speedpldi3,
lbl_10,lbl_11,_true,lbl_12],[speedpldi3,speedpldi3,lbl_10,lbl_11,_false,
lbl_13],[speedpldi3,speedpldi3,lbl_10,lbl_11,_false,lbl_14]]
lbl_1 __si
 counter 1/0 iteration domain {}

lbl_5 __si
 counter 1/0 iteration domain {}

collect subscripts __expression(__identifier(char_data("i")))
[i(),[],{},{}]
collect subscripts __expression(__identifier(char_data("j")))
[j(),[],{},{}]
lbl_11 __si
 counter 1/0 iteration domain {}

lbl_10 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("j")))
[j(),[],{},{}]
collect subscripts __expression(__identifier(char_data("j")))
[j(),[],{},{}]
collect subscripts __expression(__identifier(char_data("i")))
[i(),[],{},{}]
examining cst__2
 is a constant
examining i
 has definitions
examining j
 has definitions
examining m
examining n
examining speedpldi3
while remnants __lt(i,n)to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified (0 >= m)
to be simplified (m > 0)
to be simplified ( (m > 0) && (m >= n) )
to be simplified ( (m > 0) && (n > m) )
to be simplified ( ( (m > 0) && (n > m) ) && (0 >= n) )
to be simplified ( ( (m > 0) && (n > m) ) && ( (n > 0) && (m > 0) ) )
to be simplified ( ( (m > 0) && (n > m) ) && ( (n > 0) && (0 >= m) ) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (0 >= m)
to be simplified (m > 0)
to be simplified (0 >= m)
to be simplified (m > 0)
to be simplified (n > i)
to be simplified (i >= n)
to be simplified (i >= n)
to be simplified (n > i)
to be simplified ( (n > i) && (m > j) )
to be simplified ( (n > i) && (j >= m) )
to be simplified (m > j)
to be simplified (j >= m)
to be simplified (m > j)
to be simplified (j >= m)
to be simplified (j >= m)
to be simplified (m >= n)
to be simplified (n > m)
to be simplified (m >= n)
to be simplified (n > m)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (i >= n)
to be simplified ( (n > i) && (m > j) )
to be simplified ( (n > i) && (j >= m) )
to be simplified TRUE
to be simplified (i >= n)
to be simplified ( (n > i) && (m > j) )
to be simplified ( (n > i) && (j >= m) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE

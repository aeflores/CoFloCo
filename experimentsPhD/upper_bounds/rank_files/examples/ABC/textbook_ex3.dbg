FrontEnd version J.3
qualif textbook_ex3
inside declaration [textbook_ex3,textbook_ex3]
inside declaration [textbook_ex3,textbook_ex3,i]
inside declaration [textbook_ex3,textbook_ex3,j]
inside declaration [textbook_ex3,textbook_ex3,k]
inside declaration [textbook_ex3,textbook_ex3,l]
inside declaration [textbook_ex3,cst__2]
table([textbook_ex3,
cst__2] = __declaration(__inside(char_data("textbook_ex3")),
  __constant(`$$value`("1"),char_data("cst__2")),
  __basic(char_data("__integer"))),
   [textbook_ex3,
   textbook_ex3] = __declaration(__inside(char_data("textbook_ex3")),
     __identifier(char_data("textbook_ex3")),
     __function(__identifier(char_data("textbook_ex3")),
       __basic(char_data("void")),__identifier(char_data("m")),
       __basic(`$$size`("32"),char_data("__integer")))),
   [textbook_ex3,textbook_ex3,
   i] = __declaration(__inside(char_data("textbook_ex3"),
     char_data("textbook_ex3")),__identifier(char_data("i")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [textbook_ex3,textbook_ex3,
   j] = __declaration(__inside(char_data("textbook_ex3"),
     char_data("textbook_ex3")),__identifier(char_data("j")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [textbook_ex3,textbook_ex3,
   k] = __declaration(__inside(char_data("textbook_ex3"),
     char_data("textbook_ex3")),__identifier(char_data("k")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [textbook_ex3,textbook_ex3,
   l] = __declaration(__inside(char_data("textbook_ex3"),
     char_data("textbook_ex3")),__identifier(char_data("l")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [textbook_ex3,textbook_ex3,lbl_1] = __for(`$$label`("lbl_1"),
     __init(__expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("i"))),
       __expression(__constant(char_data("cst__2"))))),
     __test(__expression(__operator(char_data("__le")),
       __expression(__identifier(char_data("i"))),
       __expression(__identifier(char_data("m"))))),
     __next(__expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("i"))),
       __expression(__operator(char_data("__addition")),
         __expression(__identifier(char_data("i"))),
         __expression(__constant(char_data("cst__2"))))))),
   [textbook_ex3,textbook_ex3,lbl_1,lbl_3] = __for(`$$label`("lbl_3"),
     __init(__expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("j"))),
       __expression(__constant(char_data("cst__2"))))),
     __test(__expression(__operator(char_data("__le")),
       __expression(__identifier(char_data("j"))),
       __expression(__identifier(char_data("i"))))),
     __next(__expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("j"))),
       __expression(__operator(char_data("__addition")),
         __expression(__identifier(char_data("j"))),
         __expression(__constant(char_data("cst__2"))))))),
   [textbook_ex3,textbook_ex3,lbl_1,lbl_3,
     lbl_4] = __for(`$$label`("lbl_4"),
     __init(__expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("k"))),
       __expression(__operator(char_data("__addition")),
         __expression(__identifier(char_data("i"))),
         __expression(__constant(char_data("cst__2")))))),
     __test(__expression(__operator(char_data("__le")),
       __expression(__identifier(char_data("k"))),
       __expression(__identifier(char_data("m"))))),
     __next(__expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("k"))),
       __expression(__operator(char_data("__addition")),
         __expression(__identifier(char_data("k"))),
         __expression(__constant(char_data("cst__2"))))))),
   [textbook_ex3,textbook_ex3,lbl_1,lbl_3,lbl_4,
   lbl_5] = __for(`$$label`("lbl_5"),
     __init(__expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("l"))),
       __expression(__constant(char_data("cst__2"))))),
     __test(__expression(__operator(char_data("__le")),
       __expression(__identifier(char_data("l"))),
       __expression(__identifier(char_data("k"))))),
     __next(__expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("l"))),
       __expression(__operator(char_data("__addition")),
         __expression(__identifier(char_data("l"))),
         __expression(__constant(char_data("cst__2"))))))),
   [textbook_ex3,textbook_ex3,lbl_1,lbl_3,lbl_4,lbl_5,
   lbl_6] = __statement(`$$label`("lbl_6"),
     __inside(char_data("textbook_ex3"),char_data("textbook_ex3"),
       char_data("lbl_1"),char_data("lbl_3"),char_data("lbl_4"),
       char_data("lbl_5")),__nop()))
table([textbook_ex3,textbook_ex3] = [[textbook_ex3,textbook_ex3],
[textbook_ex3,cst__2],[textbook_ex3,textbook_ex3],[textbook_ex3,
  textbook_ex3,i],[textbook_ex3,textbook_ex3,j],[textbook_ex3,textbook_ex3,
  k],[textbook_ex3,textbook_ex3,l],[textbook_ex3,textbook_ex3,lbl_1,lbl_3,
  lbl_4,lbl_5],[textbook_ex3,textbook_ex3,lbl_1,lbl_3,lbl_4],[textbook_ex3,
  textbook_ex3,lbl_1,lbl_3],[textbook_ex3,textbook_ex3,lbl_1],
  [textbook_ex3,textbook_ex3,lbl_1,lbl_3,lbl_4,lbl_5,lbl_6]])
[[textbook_ex3,textbook_ex3,i],[textbook_ex3,textbook_ex3,j],[textbook_ex3,
  textbook_ex3,k],[textbook_ex3,textbook_ex3,l],[textbook_ex3,textbook_ex3,
  lbl_1,lbl_3,lbl_4,lbl_5,lbl_6]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of m is 0
body [[textbook_ex3,textbook_ex3],[textbook_ex3,cst__2],[textbook_ex3,
  textbook_ex3],[textbook_ex3,textbook_ex3,i],[textbook_ex3,textbook_ex3,
j],[textbook_ex3,textbook_ex3,k],[textbook_ex3,textbook_ex3,l],
[textbook_ex3,textbook_ex3,lbl_1,lbl_3,lbl_4,lbl_5],[textbook_ex3,
  textbook_ex3,lbl_1,lbl_3,lbl_4],[textbook_ex3,textbook_ex3,lbl_1,lbl_3],
[textbook_ex3,textbook_ex3,lbl_1],[textbook_ex3,textbook_ex3,lbl_1,lbl_3,
  lbl_4,lbl_5,lbl_6]]
examining cst__2
 is a constant
examining i
 has definitions
examining j
 has definitions
examining k
 has definitions
examining l
 has definitions
examining m
examining textbook_ex3
to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified TRUE
to be simplified (1 > m)
to be simplified (m >= 1)
to be simplified ( (m >= 1) && (0 > 0) )
to be simplified ( (m >= 1) && ( (0 >= 0) && (2 > m) ) )
to be simplified ( (m >= 1) && ( ( (0 >= 0) && (m >= 2) ) && (0 > 1) ) )
to be simplified ( (m >= 1) && ( ( (0 >= 0) && (m >= 2) ) && (1 >= 0) ) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (m >= i)
to be simplified (i > m)
to be simplified (m >= i)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (i >= j)
to be simplified (j > i)
to be simplified (j > i)
to be simplified (i >= j)
to be simplified ( (i >= j) && (i+1 > m) )
to be simplified ( (i >= j) && (m >= i+1) )
to be simplified ( ( (i >= j) && (m >= i+1) ) && (0 > i) )
to be simplified ( ( (i >= j) && (m >= i+1) ) && (i >= 0) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (m >= k)
to be simplified (k > m)
to be simplified (k > m)
to be simplified (m >= k)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (k >= l)
to be simplified (l > k)
to be simplified (l > k)
to be simplified (k >= l)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (l > k)
to be simplified (k >= l)
to be simplified TRUE
to be simplified (k > m)
to be simplified (m >= k)
to be simplified ( (m >= k) && (1 > k) )
to be simplified ( (m >= k) && (k >= 1) )
to be simplified TRUE
to be simplified (j > i)
to be simplified ( (i >= j) && (i+1 > m) )
to be simplified ( ( (i >= j) && (m >= i+1) ) && (0 > i) )
to be simplified ( ( (i >= j) && (m >= i+1) ) && (i >= 0) )
to be simplified TRUE
to be simplified (i > m)
to be simplified (m >= i)
to be simplified ( (m >= i) && (1 > i) )
to be simplified ( (m >= i) && ( (i >= 1) && (i+1 > m) ) )
to be simplified ( (m >= i) && ( ( (i >= 1) && (m >= i+1) ) && (0 > i) ) )
to be simplified ( (m >= i) && ( ( (i >= 1) && (m >= i+1) ) && (i >= 0) ) )

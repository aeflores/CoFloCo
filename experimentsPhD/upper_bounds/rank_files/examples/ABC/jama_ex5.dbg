FrontEnd version J.3
qualif jama_ex5
inside declaration [jama_ex5,jama_ex5]
inside declaration [jama_ex5,jama_ex5,i]
inside declaration [jama_ex5,jama_ex5,j]
inside declaration [jama_ex5,cst__3]
inside declaration [jama_ex5,cst__2]
table([jama_ex5,cst__2] = __declaration(__inside(char_data("jama_ex5")),
  __constant(`$$value`("0"),char_data("cst__2")),
  __basic(char_data("__integer"))),
   [jama_ex5,cst__3] = __declaration(__inside(char_data("jama_ex5")),
     __constant(`$$value`("2"),char_data("cst__3")),
     __basic(char_data("__integer"))),
   [jama_ex5,jama_ex5] = __declaration(__inside(char_data("jama_ex5")),
     __identifier(char_data("jama_ex5")),
     __function(__identifier(char_data("jama_ex5")),
       __basic(char_data("void")),__identifier(char_data("n")),
       __basic(`$$size`("32"),char_data("__integer")))),
   [jama_ex5,jama_ex5,i] = __declaration(__inside(char_data("jama_ex5"),
     char_data("jama_ex5")),__identifier(char_data("i")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [jama_ex5,jama_ex5,j] = __declaration(__inside(char_data("jama_ex5"),
     char_data("jama_ex5")),__identifier(char_data("j")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [jama_ex5,jama_ex5,lbl_1] = __for(`$$label`("lbl_1"),
     __init(__expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("i"))),
       __expression(__constant(char_data("cst__2"))))),
     __test(__expression(__operator(char_data("__le")),
       __expression(__identifier(char_data("i"))),
       __expression(__identifier(char_data("n"))))),
     __next(__expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("i"))),
       __expression(__operator(char_data("__addition")),
         __expression(__identifier(char_data("i"))),
         __expression(__constant(char_data("cst__3"))))))),
   [jama_ex5,jama_ex5,lbl_1,lbl_4] = __for(`$$label`("lbl_4"),
     __init(__expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("j"))),
       __expression(__constant(char_data("cst__2"))))),
     __test(__expression(__operator(char_data("__le")),
       __expression(__identifier(char_data("j"))),
       __expression(__identifier(char_data("n"))))),
     __next(__expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("j"))),
       __expression(__operator(char_data("__addition")),
         __expression(__identifier(char_data("j"))),
         __expression(__constant(char_data("cst__3"))))))),
   [jama_ex5,jama_ex5,lbl_1,lbl_4,lbl_5] = __statement(`$$label`("lbl_5"),
     __inside(char_data("jama_ex5"),char_data("jama_ex5"),
         char_data("lbl_1"),char_data("lbl_4")),__nop()))
table([jama_ex5,jama_ex5] = [[jama_ex5,jama_ex5],[jama_ex5,cst__3],
[jama_ex5,cst__2],[jama_ex5,jama_ex5],[jama_ex5,jama_ex5,i],[jama_ex5,
  jama_ex5,j],[jama_ex5,jama_ex5,lbl_1,lbl_4],[jama_ex5,jama_ex5,lbl_1],
[jama_ex5,jama_ex5,lbl_1,lbl_4,lbl_5]])
[[jama_ex5,jama_ex5,i],[jama_ex5,jama_ex5,j],[jama_ex5,jama_ex5,lbl_1,
  lbl_4,lbl_5]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of n is 0
body [[jama_ex5,jama_ex5],[jama_ex5,cst__3],[jama_ex5,cst__2],[jama_ex5,
  jama_ex5],[jama_ex5,jama_ex5,i],[jama_ex5,jama_ex5,j],[jama_ex5,jama_ex5,
  lbl_1,lbl_4],[jama_ex5,jama_ex5,lbl_1],[jama_ex5,jama_ex5,lbl_1,lbl_4,
  lbl_5]]
examining cst__2
 is a constant
examining cst__3
 is a constant
examining i
 has definitions
examining j
 has definitions
examining jama_ex5
examining n
to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified TRUE
to be simplified (0 > n)
to be simplified (n >= 0)
to be simplified ( (n >= 0) && (0 > n) )
to be simplified (n >= 0)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (n >= i)
to be simplified (i > n)
to be simplified (n >= i)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (n >= j)
to be simplified (j > n)
to be simplified (j > n)
to be simplified (n >= j)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (j > n)
to be simplified (n >= j)
to be simplified TRUE
to be simplified (i > n)
to be simplified (n >= i)
to be simplified ( (n >= i) && (0 > n) )
to be simplified ( (n >= i) && (n >= 0) )

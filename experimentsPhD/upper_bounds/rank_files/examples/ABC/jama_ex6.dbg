FrontEnd version J.3
qualif jama_ex6
inside declaration [jama_ex6,jama_ex6]
inside declaration [jama_ex6,jama_ex6,i]
inside declaration [jama_ex6,jama_ex6,j]
inside declaration [jama_ex6,jama_ex6,k]
table([jama_ex6,jama_ex6] = __declaration(__inside(char_data("jama_ex6")),
  __identifier(char_data("jama_ex6")),
  __function(__identifier(char_data("jama_ex6")),
    __basic(char_data("void")),__identifier(char_data("a")),
    __basic(`$$size`("32"),char_data("__integer")),
    __identifier(char_data("b")),__basic(`$$size`("32"),
      char_data("__integer")),__identifier(char_data("c")),
    __basic(`$$size`("32"),char_data("__integer")),
    __identifier(char_data("d")),__basic(`$$size`("32"),
      char_data("__integer")))),
   [jama_ex6,jama_ex6,i] = __declaration(__inside(char_data("jama_ex6"),
     char_data("jama_ex6")),__identifier(char_data("i")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [jama_ex6,jama_ex6,j] = __declaration(__inside(char_data("jama_ex6"),
     char_data("jama_ex6")),__identifier(char_data("j")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [jama_ex6,jama_ex6,k] = __declaration(__inside(char_data("jama_ex6"),
     char_data("jama_ex6")),__identifier(char_data("k")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [jama_ex6,jama_ex6,lbl_1] = __for(`$$label`("lbl_1"),
     __init(__expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("i"))),
       __expression(__identifier(char_data("a"))))),
     __test(__expression(__operator(char_data("__le")),
       __expression(__identifier(char_data("i"))),
       __expression(__identifier(char_data("b"))))),
     __next(__expression(__operator(char_data("_post_incr")),
       __expression(__identifier(char_data("i")))))),
   [jama_ex6,jama_ex6,lbl_1,lbl_2] = __for(`$$label`("lbl_2"),
     __init(__expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("j"))),
       __expression(__identifier(char_data("c"))))),
     __test(__expression(__operator(char_data("__le")),
       __expression(__identifier(char_data("j"))),
       __expression(__identifier(char_data("d"))))),
     __next(__expression(__operator(char_data("_post_incr")),
       __expression(__identifier(char_data("j")))))),
   [jama_ex6,jama_ex6,lbl_1,lbl_2,lbl_3] = __for(`$$label`("lbl_3"),
     __init(__expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("k"))),
       __expression(__operator(char_data("__subtraction")),
         __expression(__identifier(char_data("i"))),
         __expression(__identifier(char_data("j")))))),
     __test(__expression(__operator(char_data("__le")),
       __expression(__identifier(char_data("k"))),
       __expression(__operator(char_data("__addition")),
         __expression(__identifier(char_data("i"))),
         __expression(__identifier(char_data("j")))))),
     __next(__expression(__operator(char_data("_post_incr")),
       __expression(__identifier(char_data("k")))))),
   [jama_ex6,jama_ex6,lbl_1,lbl_2,lbl_3,
   lbl_4] = __statement(`$$label`("lbl_4"),__inside(char_data("jama_ex6"),
       char_data("jama_ex6"),char_data("lbl_1"),char_data("lbl_2"),
       char_data("lbl_3")),__nop()))
table([jama_ex6,jama_ex6] = [[jama_ex6,jama_ex6],[jama_ex6,jama_ex6],
[jama_ex6,jama_ex6,i],[jama_ex6,jama_ex6,j],[jama_ex6,jama_ex6,k],
  [jama_ex6,jama_ex6,lbl_1,lbl_2,lbl_3],[jama_ex6,jama_ex6,lbl_1,lbl_2],
[jama_ex6,jama_ex6,lbl_1],[jama_ex6,jama_ex6,lbl_1,lbl_2,lbl_3,lbl_4]])
[[jama_ex6,jama_ex6,i],[jama_ex6,jama_ex6,j],[jama_ex6,jama_ex6,k],
[jama_ex6,jama_ex6,lbl_1,lbl_2,lbl_3,lbl_4]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of a is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of b is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of c is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of d is 0
body [[jama_ex6,jama_ex6],[jama_ex6,jama_ex6],[jama_ex6,jama_ex6,i],
[jama_ex6,jama_ex6,j],[jama_ex6,jama_ex6,k],[jama_ex6,jama_ex6,lbl_1,lbl_2,
  lbl_3],[jama_ex6,jama_ex6,lbl_1,lbl_2],[jama_ex6,jama_ex6,lbl_1],
[jama_ex6,jama_ex6,lbl_1,lbl_2,lbl_3,lbl_4]]
examining a
examining b
examining c
examining d
examining i
 has definitions
examining j
 has definitions
examining jama_ex6
examining k
 has definitions
to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified TRUE
to be simplified (a > b)
to be simplified (b >= a)
to be simplified ( (b >= a) && (c > d) )
to be simplified ( (b >= a) && ( (d >= c) && (2*c >= 0) ) )
to be simplified ( (b >= a) && ( (d >= c) && (0 > 2*c) ) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (b >= i)
to be simplified (i > b)
to be simplified (b >= i)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (d >= j)
to be simplified (j > d)
to be simplified (j > d)
to be simplified (d >= j)
to be simplified (j > d)
to be simplified ( (d >= j) && (2*j >= 0) )
to be simplified ( (d >= j) && (0 > 2*j) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (i+j >= k)
to be simplified (k > i+j)
to be simplified (k > i+j)
to be simplified (i+j >= k)
to be simplified (i+j >= k)
to be simplified (k > i+j)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (i+j >= k)
to be simplified (k > i+j)
to be simplified TRUE
to be simplified TRUE
to be simplified (j > d)
to be simplified ( (d >= j) && (2*j >= 0) )
to be simplified ( (d >= j) && (0 > 2*j) )
to be simplified TRUE
to be simplified TRUE
to be simplified (i > b)
to be simplified (b >= i)
to be simplified ( (b >= i) && (c > d) )
to be simplified ( (b >= i) && ( (d >= c) && (2*c >= 0) ) )
to be simplified ( (b >= i) && ( (d >= c) && (0 > 2*c) ) )

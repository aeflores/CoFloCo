FrontEnd version J.3
qualif textbook_ex2
inside declaration [textbook_ex2,textbook_ex2]
inside declaration [textbook_ex2,textbook_ex2,i]
inside declaration [textbook_ex2,textbook_ex2,j]
inside declaration [textbook_ex2,cst__3]
inside declaration [textbook_ex2,cst__2]
table([textbook_ex2,
cst__2] = __declaration(__inside(char_data("textbook_ex2")),
  __constant(`$$value`("0"),char_data("cst__2")),
  __basic(char_data("__integer"))),
   [textbook_ex2,
     cst__3] = __declaration(__inside(char_data("textbook_ex2")),
     __constant(`$$value`("1"),char_data("cst__3")),
     __basic(char_data("__integer"))),
   [textbook_ex2,
   textbook_ex2] = __declaration(__inside(char_data("textbook_ex2")),
     __identifier(char_data("textbook_ex2")),
     __function(__identifier(char_data("textbook_ex2")),
       __basic(char_data("void")),__identifier(char_data("n")),
       __basic(`$$size`("32"),char_data("__integer")))),
   [textbook_ex2,textbook_ex2,
   i] = __declaration(__inside(char_data("textbook_ex2"),
     char_data("textbook_ex2")),__identifier(char_data("i")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [textbook_ex2,textbook_ex2,
   j] = __declaration(__inside(char_data("textbook_ex2"),
     char_data("textbook_ex2")),__identifier(char_data("j")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [textbook_ex2,textbook_ex2,lbl_1] = __for(`$$label`("lbl_1"),
     __init(__expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("i"))),
       __expression(__constant(char_data("cst__2"))))),
     __test(__expression(__operator(char_data("__le")),
       __expression(__identifier(char_data("i"))),
       __expression(__operator(char_data("__subtraction")),
         __expression(__identifier(char_data("n"))),
         __expression(__constant(char_data("cst__3")))))),
     __next(__expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("i"))),
       __expression(__operator(char_data("__addition")),
         __expression(__identifier(char_data("i"))),
         __expression(__constant(char_data("cst__3"))))))),
   [textbook_ex2,textbook_ex2,lbl_1,lbl_4] = __for(`$$label`("lbl_4"),
     __init(__expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("j"))),
       __expression(__constant(char_data("cst__2"))))),
     __test(__expression(__operator(char_data("__le")),
       __expression(__identifier(char_data("j"))),
       __expression(__identifier(char_data("i"))))),
     __next(__expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("j"))),
       __expression(__operator(char_data("__addition")),
         __expression(__identifier(char_data("j"))),
         __expression(__constant(char_data("cst__3"))))))),
   [textbook_ex2,textbook_ex2,lbl_1,lbl_4,
   lbl_5] = __statement(`$$label`("lbl_5"),
     __inside(char_data("textbook_ex2"),char_data("textbook_ex2"),
       char_data("lbl_1"),char_data("lbl_4")),__nop()))
table([textbook_ex2,textbook_ex2] = [[textbook_ex2,textbook_ex2],
[textbook_ex2,cst__3],[textbook_ex2,cst__2],[textbook_ex2,textbook_ex2],
[textbook_ex2,textbook_ex2,i],[textbook_ex2,textbook_ex2,j],[textbook_ex2,
  textbook_ex2,lbl_1,lbl_4],[textbook_ex2,textbook_ex2,lbl_1],
  [textbook_ex2,textbook_ex2,lbl_1,lbl_4,lbl_5]])
[[textbook_ex2,textbook_ex2,i],[textbook_ex2,textbook_ex2,j],[textbook_ex2,
  textbook_ex2,lbl_1,lbl_4,lbl_5]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of n is 0
body [[textbook_ex2,textbook_ex2],[textbook_ex2,cst__3],[textbook_ex2,
  cst__2],[textbook_ex2,textbook_ex2],[textbook_ex2,textbook_ex2,i],
[textbook_ex2,textbook_ex2,j],[textbook_ex2,textbook_ex2,lbl_1,lbl_4],
[textbook_ex2,textbook_ex2,lbl_1],[textbook_ex2,textbook_ex2,lbl_1,lbl_4,
  lbl_5]]
examining cst__2
 is a constant
examining cst__3
 is a constant
examining i
 has definitions
examining j
 has definitions
examining n
examining textbook_ex2
to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified TRUE
to be simplified (1 > n)
to be simplified (n >= 1)
to be simplified ( (n >= 1) && (0 > 0) )
to be simplified ( (n >= 1) && (0 >= 0) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (n >= i+1)
to be simplified (i+1 > n)
to be simplified (n >= i+1)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (i >= j)
to be simplified (j > i)
to be simplified (j > i)
to be simplified (i >= j)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (j > i)
to be simplified (i >= j)
to be simplified TRUE
to be simplified (i+1 > n)
to be simplified (n >= i+1)
to be simplified ( (n >= i+1) && (0 > i) )
to be simplified ( (n >= i+1) && (i >= 0) )

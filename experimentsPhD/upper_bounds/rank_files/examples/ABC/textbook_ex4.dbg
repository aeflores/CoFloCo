FrontEnd version J.3
qualif textbook_ex4
inside declaration [textbook_ex4,textbook_ex4]
inside declaration [textbook_ex4,textbook_ex4,j]
inside declaration [textbook_ex4,textbook_ex4,i]
inside declaration [textbook_ex4,cst__2]
table([textbook_ex4,
cst__2] = __declaration(__inside(char_data("textbook_ex4")),
  __constant(`$$value`("1"),char_data("cst__2")),
  __basic(char_data("__integer"))),
   [textbook_ex4,
   textbook_ex4] = __declaration(__inside(char_data("textbook_ex4")),
     __identifier(char_data("textbook_ex4")),
     __function(__identifier(char_data("textbook_ex4")),
       __basic(char_data("void")),__identifier(char_data("m")),
       __basic(`$$size`("32"),char_data("__integer")),
       __identifier(char_data("n")),__basic(`$$size`("32"),
         char_data("__integer")))),
   [textbook_ex4,textbook_ex4,
   i] = __declaration(__inside(char_data("textbook_ex4"),
     char_data("textbook_ex4")),__identifier(char_data("i")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [textbook_ex4,textbook_ex4,
   j] = __declaration(__inside(char_data("textbook_ex4"),
     char_data("textbook_ex4")),__identifier(char_data("j")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [textbook_ex4,textbook_ex4,lbl_1] = __for(`$$label`("lbl_1"),
     __init(__expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("j"))),
       __expression(__constant(char_data("cst__2"))))),
     __test(__expression(__operator(char_data("__le")),
       __expression(__identifier(char_data("j"))),
       __expression(__identifier(char_data("n"))))),
     __next(__expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("j"))),
       __expression(__operator(char_data("__addition")),
         __expression(__identifier(char_data("j"))),
         __expression(__constant(char_data("cst__2"))))))),
   [textbook_ex4,textbook_ex4,lbl_1,lbl_3] = __for(`$$label`("lbl_3"),
     __init(__expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("i"))),
       __expression(__constant(char_data("cst__2"))))),
     __test(__expression(__operator(char_data("__le")),
       __expression(__identifier(char_data("i"))),
       __expression(__identifier(char_data("m"))))),
     __next(__expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("i"))),
       __expression(__operator(char_data("__addition")),
         __expression(__identifier(char_data("i"))),
         __expression(__constant(char_data("cst__2"))))))),
   [textbook_ex4,textbook_ex4,lbl_1,lbl_3,
   lbl_4] = __statement(`$$label`("lbl_4"),
     __inside(char_data("textbook_ex4"),char_data("textbook_ex4"),
       char_data("lbl_1"),char_data("lbl_3")),__nop()))
table([textbook_ex4,textbook_ex4] = [[textbook_ex4,textbook_ex4],
[textbook_ex4,cst__2],[textbook_ex4,textbook_ex4],[textbook_ex4,
  textbook_ex4,j],[textbook_ex4,textbook_ex4,i],[textbook_ex4,textbook_ex4,
  lbl_1,lbl_3],[textbook_ex4,textbook_ex4,lbl_1],[textbook_ex4,
  textbook_ex4,lbl_1,lbl_3,lbl_4]])
[[textbook_ex4,textbook_ex4,j],[textbook_ex4,textbook_ex4,i],[textbook_ex4,
  textbook_ex4,lbl_1,lbl_3,lbl_4]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of m is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of n is 0
body [[textbook_ex4,textbook_ex4],[textbook_ex4,cst__2],[textbook_ex4,
  textbook_ex4],[textbook_ex4,textbook_ex4,j],[textbook_ex4,textbook_ex4,
i],[textbook_ex4,textbook_ex4,lbl_1,lbl_3],[textbook_ex4,textbook_ex4,
lbl_1],[textbook_ex4,textbook_ex4,lbl_1,lbl_3,lbl_4]]
examining cst__2
 is a constant
examining i
 has definitions
examining j
 has definitions
examining m
examining n
examining textbook_ex4
to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified TRUE
to be simplified (1 > n)
to be simplified (n >= 1)
to be simplified ( (n >= 1) && (1 > m) )
to be simplified ( (n >= 1) && (m >= 1) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (n >= j)
to be simplified (j > n)
to be simplified (n >= j)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (m >= i)
to be simplified (i > m)
to be simplified (i > m)
to be simplified (m >= i)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (i > m)
to be simplified (m >= i)
to be simplified TRUE
to be simplified (j > n)
to be simplified (n >= j)
to be simplified ( (n >= j) && (1 > m) )
to be simplified ( (n >= j) && (m >= 1) )

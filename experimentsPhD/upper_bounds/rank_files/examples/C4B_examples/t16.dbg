FrontEnd version J.3
qualif t16
inside declaration [t16,t16]
inside declaration [t16,t16,z]
inside declaration [t16,cst__9]
inside declaration [t16,cst__8]
inside declaration [t16,cst__6]
inside declaration [t16,cst__2]
table([t16,cst__2] = __declaration(__inside(char_data("t16")),
  __constant(`$$value`("0"),char_data("cst__2")),
  __basic(char_data("__integer"))),
   [t16,cst__6] = __declaration(__inside(char_data("t16")),
     __constant(`$$value`("1"),char_data("cst__6")),
     __basic(char_data("__integer"))),
   [t16,cst__8] = __declaration(__inside(char_data("t16")),
     __constant(`$$value`("100"),char_data("cst__8")),
     __basic(char_data("__integer"))),
   [t16,cst__9] = __declaration(__inside(char_data("t16")),
     __constant(`$$value`("2"),char_data("cst__9")),
     __basic(char_data("__integer"))),
   [t16,t16] = __declaration(__inside(char_data("t16")),
     __identifier(char_data("t16")),
       __function(__identifier(char_data("t16")),
       __basic(char_data("void")),__identifier(char_data("x")),
       __basic(`$$size`("32"),char_data("__integer")),
       __identifier(char_data("y")),__basic(`$$size`("32"),
         char_data("__integer")))),
   [t16,t16,lbl_1] = __if(`$$label`("lbl_1"),
     __expression(__operator(char_data("__lt")),
       __expression(__identifier(char_data("y"))),
       __expression(__constant(char_data("cst__2"))))),
   [t16,t16,lbl_1,_false,lbl_4] = __statement(`$$label`("lbl_4"),
     __inside(char_data("t16"),char_data("t16"),char_data("lbl_1"),
       char_data("_false")),__nop()),
 [t16,t16,lbl_1,_true,lbl_3] = __statement(`$$label`("lbl_3"),
   __inside(char_data("t16"),char_data("t16"),char_data("lbl_1"),
     char_data("_true")),__return()),
[t16,t16,lbl_5] = __while(`$$label`("lbl_5"),
 __expression(__operator(char_data("__gt")),
   __expression(__identifier(char_data("x"))),
   __expression(__identifier(char_data("y"))))),
[t16,t16,lbl_5,lbl_10] = __statement(`$$label`("lbl_10"),
 __inside(char_data("t16"),char_data("t16"),char_data("lbl_5")),
 __expression(__operator(char_data("__assignment")),
   __expression(__identifier(char_data("z"))),
   __expression(__operator(char_data("__addition")),
     __expression(__constant(char_data("cst__8"))),
     __expression(__operator(char_data("__multiplication")),
       __expression(__constant(char_data("cst__9"))),
       __expression(__identifier(char_data("y"))))))),
[t16,t16,lbl_5,lbl_11] = __while(`$$label`("lbl_11"),
 __expression(__operator(char_data("__gt")),
   __expression(__identifier(char_data("z"))),
   __expression(__constant(char_data("cst__2"))))),
[t16,t16,lbl_5,lbl_11,lbl_12] = __statement(`$$label`("lbl_12"),
 __inside(char_data("t16"),char_data("t16"),char_data("lbl_5"),
   char_data("lbl_11")),__expression(__operator(char_data("_post_decr")),
   __expression(__identifier(char_data("z"))))),
[t16,t16,lbl_5,lbl_7] = __statement(`$$label`("lbl_7"),
 __inside(char_data("t16"),char_data("t16"),char_data("lbl_5")),
 __expression(__operator(char_data("_sub_assign")),
   __expression(__identifier(char_data("x"))),
   __expression(__operator(char_data("__addition")),
     __expression(__identifier(char_data("y"))),
     __expression(__constant(char_data("cst__6")))))),
[t16,t16,z] = __declaration(__inside(char_data("t16"),char_data("t16")),
 __identifier(char_data("z")),__basic(`$$size`("32"),
   char_data("__integer"))))
table([t16,t16] = [[t16,t16],[t16,cst__9],[t16,cst__8],[t16,cst__6],[t16,
cst__2],[t16,t16],[t16,t16,z],[t16,t16,lbl_1],[t16,t16,lbl_1,_true,lbl_3],
[t16,t16,lbl_1,_false,lbl_4],[t16,t16,lbl_5],[t16,t16,lbl_5,lbl_7],[t16,
t16,lbl_5,lbl_10],[t16,t16,lbl_5,lbl_11],[t16,t16,lbl_5,lbl_11,lbl_12]])
[[t16,t16,z],[t16,t16,lbl_1,_true,lbl_3],[t16,t16,lbl_1,_false,lbl_4],[t16,
t16,lbl_5,lbl_7],[t16,t16,lbl_5,lbl_10],[t16,t16,lbl_5,lbl_11,lbl_12]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of x is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of y is 0
body [[t16,t16],[t16,cst__9],[t16,cst__8],[t16,cst__6],[t16,cst__2],[t16,
t16],[t16,t16,z],[t16,t16,lbl_1],[t16,t16,lbl_1,_true,lbl_3],[t16,t16,
lbl_1,_false,lbl_4],[t16,t16,lbl_5],[t16,t16,lbl_5,lbl_7],[t16,t16,lbl_5,
lbl_10],[t16,t16,lbl_5,lbl_11],[t16,t16,lbl_5,lbl_11,lbl_12]]
lbl_1 __si
 counter 1/0 iteration domain {}

lbl_5 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("z")))
[z(),[],{},{}]
lbl_11 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("z")))
[z(),[],{},{}]
examining cst__2
 is a constant
examining cst__6
 is a constant
examining cst__8
 is a constant
examining cst__9
 is a constant
examining t16
examining x
examining y
examining z
 has definitions
while remnants __gt(x,y)while remnants __gt(z,0)to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified (0 > y)
to be simplified (y >= 0)
to be simplified ( (y >= 0) && (y >= x) )
to be simplified ( (y >= 0) && ( (x > y) && (0 >= 2*y+100) ) )
to be simplified ( (y >= 0) && ( (x > y) && (2*y+100 > 0) ) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (0 > y)
to be simplified (y >= 0)
to be simplified (0 > y)
to be simplified (y >= 0)
to be simplified (z > 0)
to be simplified (0 >= z)
to be simplified (0 >= z)
to be simplified (z > 0)
to be simplified (z > 0)
to be simplified (x > y)
to be simplified (y >= x)
to be simplified (x > y)
to be simplified (x > y)
to be simplified ( (x > y) && (0 >= 2*y+100) )
to be simplified ( (x > y) && (2*y+100 > 0) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (0 >= z)
to be simplified (z > 0)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (y >= x)
to be simplified ( (x > y) && (0 >= 2*y+100) )
to be simplified ( (x > y) && (2*y+100 > 0) )

FrontEnd version J.3
qualif speed_popl10_simple_multiple
inside declaration [speed_popl10_simple_multiple,
  speed_popl10_simple_multiple]
inside declaration [speed_popl10_simple_multiple,
  speed_popl10_simple_multiple,x]
inside declaration [speed_popl10_simple_multiple,
  speed_popl10_simple_multiple,y]
inside declaration [speed_popl10_simple_multiple,cst__6]
inside declaration [speed_popl10_simple_multiple,cst__1]
table([speed_popl10_simple_multiple,
cst__1] = __declaration(__inside(char_data("speed_popl10_simple_multiple")),
  __constant(`$$value`("0"),char_data("cst__1")),
  __basic(char_data("__integer"))),
   [speed_popl10_simple_multiple,
   cst__6] = __declaration(__inside(char_data("speed_popl10_simple_multiple"
   )),__constant(`$$value`("1"),char_data("cst__6")),
     __basic(char_data("__integer"))),
   [speed_popl10_simple_multiple,
   speed_popl10_simple_multiple] = __declaration(__inside(char_data("speed_popl10_simple_multiple"
   )),__identifier(char_data("speed_popl10_simple_multiple")),
     __function(__identifier(char_data("speed_popl10_simple_multiple")),
       __basic(char_data("void")),__identifier(char_data("n")),
       __basic(`$$size`("32"),char_data("__integer")),
       __identifier(char_data("m")),__basic(`$$size`("32"),
         char_data("__integer")))),
   [speed_popl10_simple_multiple,speed_popl10_simple_multiple,
   init_2] = __statement(`$$label`("init_2"),
     __inside(char_data("speed_popl10_simple_multiple"),
       char_data("speed_popl10_simple_multiple")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("x"))),
       __expression(__constant(char_data("cst__1"))))),
   [speed_popl10_simple_multiple,speed_popl10_simple_multiple,
   init_3] = __statement(`$$label`("init_3"),
     __inside(char_data("speed_popl10_simple_multiple"),
       char_data("speed_popl10_simple_multiple")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("y"))),
       __expression(__constant(char_data("cst__1"))))),
   [speed_popl10_simple_multiple,speed_popl10_simple_multiple,
   lbl_4] = __while(`$$label`("lbl_4"),
     __expression(__operator(char_data("__lt")),
       __expression(__identifier(char_data("x"))),
       __expression(__identifier(char_data("n"))))),
   [speed_popl10_simple_multiple,speed_popl10_simple_multiple,lbl_4,
   lbl_5] = __if(`$$label`("lbl_5"),
     __expression(__operator(char_data("__lt")),
       __expression(__identifier(char_data("y"))),
       __expression(__identifier(char_data("m"))))),
   [speed_popl10_simple_multiple,speed_popl10_simple_multiple,lbl_4,lbl_5,
     _false,lbl_8] = __statement(`$$label`("lbl_8"),
     __inside(char_data("speed_popl10_simple_multiple"),
       char_data("speed_popl10_simple_multiple"),char_data("lbl_4"),
       char_data("lbl_5"),char_data("_false")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("x"))),
       __expression(__operator(char_data("__addition")),
         __expression(__identifier(char_data("x"))),
         __expression(__constant(char_data("cst__6")))))),
   [speed_popl10_simple_multiple,speed_popl10_simple_multiple,lbl_4,lbl_5,
     _true,lbl_7] = __statement(`$$label`("lbl_7"),
     __inside(char_data("speed_popl10_simple_multiple"),
       char_data("speed_popl10_simple_multiple"),char_data("lbl_4"),
       char_data("lbl_5"),char_data("_true")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("y"))),
       __expression(__operator(char_data("__addition")),
         __expression(__identifier(char_data("y"))),
         __expression(__constant(char_data("cst__6")))))),
   [speed_popl10_simple_multiple,speed_popl10_simple_multiple,
   x] = __declaration(__inside(char_data("speed_popl10_simple_multiple"),
     char_data("speed_popl10_simple_multiple")),
       __identifier(char_data("x")),__basic(`$$size`("32"),
       char_data("__integer"))),
   [speed_popl10_simple_multiple,speed_popl10_simple_multiple,
   y] = __declaration(__inside(char_data("speed_popl10_simple_multiple"),
     char_data("speed_popl10_simple_multiple")),
       __identifier(char_data("y")),__basic(`$$size`("32"),
       char_data("__integer"))))
table([speed_popl10_simple_multiple,
speed_popl10_simple_multiple] = [[speed_popl10_simple_multiple,
  speed_popl10_simple_multiple],[speed_popl10_simple_multiple,cst__6],
  [speed_popl10_simple_multiple,cst__1],[speed_popl10_simple_multiple,
    speed_popl10_simple_multiple],[speed_popl10_simple_multiple,
    speed_popl10_simple_multiple,x],[speed_popl10_simple_multiple,
    speed_popl10_simple_multiple,y],[speed_popl10_simple_multiple,
    speed_popl10_simple_multiple,init_2],[speed_popl10_simple_multiple,
    speed_popl10_simple_multiple,init_3],[speed_popl10_simple_multiple,
    speed_popl10_simple_multiple,lbl_4,lbl_5],
    [speed_popl10_simple_multiple,speed_popl10_simple_multiple,lbl_4],
  [speed_popl10_simple_multiple,speed_popl10_simple_multiple,lbl_4,lbl_5,
    _true,lbl_7],[speed_popl10_simple_multiple,
    speed_popl10_simple_multiple,lbl_4,lbl_5,_false,lbl_8]])
[[speed_popl10_simple_multiple,speed_popl10_simple_multiple,x],
  [speed_popl10_simple_multiple,speed_popl10_simple_multiple,y],
  [speed_popl10_simple_multiple,speed_popl10_simple_multiple,init_2],
  [speed_popl10_simple_multiple,speed_popl10_simple_multiple,init_3],
  [speed_popl10_simple_multiple,speed_popl10_simple_multiple,lbl_4,lbl_5,
    _true,lbl_7],[speed_popl10_simple_multiple,
    speed_popl10_simple_multiple,lbl_4,lbl_5,_false,lbl_8]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of n is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of m is 0
body [[speed_popl10_simple_multiple,speed_popl10_simple_multiple],
  [speed_popl10_simple_multiple,cst__6],[speed_popl10_simple_multiple,
    cst__1],[speed_popl10_simple_multiple,speed_popl10_simple_multiple],
  [speed_popl10_simple_multiple,speed_popl10_simple_multiple,x],
  [speed_popl10_simple_multiple,speed_popl10_simple_multiple,y],
  [speed_popl10_simple_multiple,speed_popl10_simple_multiple,init_2],
  [speed_popl10_simple_multiple,speed_popl10_simple_multiple,init_3],
  [speed_popl10_simple_multiple,speed_popl10_simple_multiple,lbl_4,lbl_5],
  [speed_popl10_simple_multiple,speed_popl10_simple_multiple,lbl_4],
  [speed_popl10_simple_multiple,speed_popl10_simple_multiple,lbl_4,lbl_5,
    _true,lbl_7],[speed_popl10_simple_multiple,
    speed_popl10_simple_multiple,lbl_4,lbl_5,_false,lbl_8]]
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
collect subscripts __expression(__identifier(char_data("y")))
[y(),[],{},{}]
lbl_5 __si
 counter 1/0 iteration domain {}

lbl_4 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("y")))
[y(),[],{},{}]
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
examining cst__1
 is a constant
examining cst__6
 is a constant
examining m
examining n
examining speed_popl10_simple_multiple
examining x
 has definitions
examining y
 has definitions
while remnants __lt(x,n)to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified TRUE
to be simplified TRUE
to be simplified (0 >= n)
to be simplified ( (n > 0) && (m > 0) )
to be simplified ( (n > 0) && (0 >= m) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (n > x)
to be simplified (x >= n)
to be simplified (n > x)
to be simplified ( (n > x) && (m > y) )
to be simplified ( (n > x) && (y >= m) )
to be simplified (m > y)
to be simplified (y >= m)
to be simplified (m > y)
to be simplified (y >= m)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (x >= n)
to be simplified ( (n > x) && (m > y) )
to be simplified ( (n > x) && (y >= m) )
to be simplified TRUE
to be simplified (x >= n)
to be simplified ( (n > x) && (m > y) )
to be simplified ( (n > x) && (y >= m) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE

FrontEnd version J.3
qualif t13
inside declaration [t13,nondet]
inside declaration [t13,t13]
inside declaration [t13,cst__3]
inside declaration [t13,cst__2]
table([t13,cst__2] = __declaration(__inside(char_data("t13")),
  __constant(`$$value`("0"),char_data("cst__2")),
  __basic(char_data("__integer"))),
   [t13,cst__3] = __declaration(__inside(char_data("t13")),
     __constant(`$$value`("1"),char_data("cst__3")),
     __basic(char_data("__integer"))),
   [t13,nondet] = __declaration(__inside(char_data("t13")),
     __identifier(char_data("nondet")),
     __function(__identifier(char_data("nondet")),__basic(`$$size`("32"),
         char_data("__integer")))),
   [t13,t13] = __declaration(__inside(char_data("t13")),
     __identifier(char_data("t13")),
       __function(__identifier(char_data("t13")),
       __basic(char_data("void")),__identifier(char_data("x")),
       __basic(`$$size`("32"),char_data("__integer")),
       __identifier(char_data("y")),__basic(`$$size`("32"),
         char_data("__integer")))),
   [t13,t13,lbl_1] = __while(`$$label`("lbl_1"),
     __expression(__operator(char_data("__gt")),
       __expression(__identifier(char_data("x"))),
       __expression(__constant(char_data("cst__2"))))),
   [t13,t13,lbl_1,lbl_4] = __statement(`$$label`("lbl_4"),
     __inside(char_data("t13"),char_data("t13"),char_data("lbl_1")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("x"))),
       __expression(__operator(char_data("__subtraction")),
         __expression(__identifier(char_data("x"))),
         __expression(__constant(char_data("cst__3")))))),
   [t13,t13,lbl_1,lbl_5] = __if(`$$label`("lbl_5"),
     __expression(__operator(char_data("__gt")),
       __expression(__operator(char_data("__funcall")),
         __expression(__identifier(char_data("nondet")))),
       __expression(__constant(char_data("cst__2"))))),
   [t13,t13,lbl_1,lbl_5,_false,lbl_7] = __while(`$$label`("lbl_7"),
     __expression(__operator(char_data("__gt")),
       __expression(__identifier(char_data("y"))),
       __expression(__constant(char_data("cst__2"))))),
   [t13,t13,lbl_1,lbl_5,_false,lbl_7,
     lbl_8] = __statement(`$$label`("lbl_8"),__inside(char_data("t13"),
       char_data("t13"),char_data("lbl_1"),char_data("lbl_5"),
       char_data("_false"),char_data("lbl_7")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("y"))),
       __expression(__operator(char_data("__subtraction")),
         __expression(__identifier(char_data("y"))),
         __expression(__constant(char_data("cst__3")))))),
   [t13,t13,lbl_1,lbl_5,_true,lbl_6] = __statement(`$$label`("lbl_6"),
     __inside(char_data("t13"),char_data("t13"),char_data("lbl_1"),
       char_data("lbl_5"),char_data("_true")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("y"))),
       __expression(__operator(char_data("__addition")),
         __expression(__identifier(char_data("y"))),
         __expression(__constant(char_data("cst__3")))))))
table([t13,t13] = [[t13,nondet],[t13,t13],[t13,cst__3],[t13,cst__2],[t13,
    t13],[t13,t13,lbl_1],[t13,t13,lbl_1,lbl_4],[t13,t13,lbl_1,lbl_5],[t13,
    t13,lbl_1,lbl_5,_true,lbl_6],[t13,t13,lbl_1,lbl_5,_false,lbl_7],[t13,
    t13,lbl_1,lbl_5,_false,lbl_7,lbl_8]])
[[t13,t13,lbl_1,lbl_4],[t13,t13,lbl_1,lbl_5,_true,lbl_6],[t13,t13,lbl_1,
    lbl_5,_false,lbl_7,lbl_8]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of x is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of y is 0
body [[t13,nondet],[t13,t13],[t13,cst__3],[t13,cst__2],[t13,t13],[t13,t13,
    lbl_1],[t13,t13,lbl_1,lbl_4],[t13,t13,lbl_1,lbl_5],[t13,t13,lbl_1,
    lbl_5,_true,lbl_6],[t13,t13,lbl_1,lbl_5,_false,lbl_7],[t13,t13,lbl_1,
    lbl_5,_false,lbl_7,lbl_8]]
lbl_1 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
lbl_5 __si
 counter 1/0 iteration domain {}

collect subscripts __expression(__identifier(char_data("y")))
[y(),[],{},{}]
lbl_7 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("y")))
[y(),[],{},{}]
examining cst__2
 is a constant
examining cst__3
 is a constant
examining nondet
examining t13
examining x
examining y
while remnants __gt(x,0)while remnants __gt(y,0)to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified (0 >= x)
to be simplified (x > 0)
to be simplified ( (x > 0) && (0 >= y) )
to be simplified ( (x > 0) && (y > 0) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (x > 0)
to be simplified (0 >= x)
to be simplified (x > 0)
to be simplified (x > 0)
to be simplified (x > 0)
to be simplified (x > 0)
to be simplified ( (x > 0) && (0 >= y) )
to be simplified ( (x > 0) && (y > 0) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (y > 0)
to be simplified (0 >= y)
to be simplified (0 >= y)
to be simplified (y > 0)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (0 >= x)
to be simplified (x > 0)
to be simplified ( (x > 0) && (0 >= y) )
to be simplified ( (x > 0) && (y > 0) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (0 >= y)
to be simplified (y > 0)
to be simplified TRUE
to be simplified TRUE
to be simplified (0 >= x)
to be simplified (x > 0)
to be simplified ( (x > 0) && (0 >= y) )
to be simplified ( (x > 0) && (y > 0) )

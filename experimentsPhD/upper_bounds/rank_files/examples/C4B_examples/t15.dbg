FrontEnd version J.3
qualif t15
inside declaration [t15,t15]
inside declaration [t15,t15,z]
inside declaration [t15,cst__6]
inside declaration [t15,cst__2]
table([t15,cst__2] = __declaration(__inside(char_data("t15")),
  __constant(`$$value`("0"),char_data("cst__2")),
  __basic(char_data("__integer"))),
   [t15,cst__6] = __declaration(__inside(char_data("t15")),
     __constant(`$$value`("1"),char_data("cst__6")),
     __basic(char_data("__integer"))),
   [t15,t15] = __declaration(__inside(char_data("t15")),
     __identifier(char_data("t15")),
       __function(__identifier(char_data("t15")),
       __basic(char_data("void")),__identifier(char_data("x")),
       __basic(`$$size`("32"),char_data("__integer")),
       __identifier(char_data("y")),__basic(`$$size`("32"),
         char_data("__integer")))),
   [t15,t15,lbl_1] = __if(`$$label`("lbl_1"),
     __expression(__operator(char_data("__lt")),
       __expression(__identifier(char_data("y"))),
       __expression(__constant(char_data("cst__2"))))),
   [t15,t15,lbl_1,_false,lbl_4] = __statement(`$$label`("lbl_4"),
     __inside(char_data("t15"),char_data("t15"),char_data("lbl_1"),
       char_data("_false")),__nop()),
 [t15,t15,lbl_1,_true,lbl_3] = __statement(`$$label`("lbl_3"),
   __inside(char_data("t15"),char_data("t15"),char_data("lbl_1"),
     char_data("_true")),__return()),
[t15,t15,lbl_5] = __while(`$$label`("lbl_5"),
 __expression(__operator(char_data("__gt")),
   __expression(__identifier(char_data("x"))),
   __expression(__identifier(char_data("y"))))),
[t15,t15,lbl_5,lbl_7] = __statement(`$$label`("lbl_7"),
 __inside(char_data("t15"),char_data("t15"),char_data("lbl_5")),
 __expression(__operator(char_data("_sub_assign")),
   __expression(__identifier(char_data("x"))),
   __expression(__operator(char_data("__addition")),
     __expression(__identifier(char_data("y"))),
     __expression(__constant(char_data("cst__6")))))),
[t15,t15,lbl_5,lbl_8] = __for(`$$label`("lbl_8"),
 __init(__expression(__operator(char_data("__assignment")),
   __expression(__identifier(char_data("z"))),
   __expression(__identifier(char_data("y"))))),
 __test(__expression(__operator(char_data("__gt")),
   __expression(__identifier(char_data("z"))),
   __expression(__constant(char_data("cst__2"))))),
 __next(__expression(__operator(char_data("_post_decr")),
   __expression(__identifier(char_data("z")))))),
[t15,t15,lbl_5,lbl_8,lbl_9] = __statement(`$$label`("lbl_9"),
 __inside(char_data("t15"),char_data("t15"),char_data("lbl_5"),
   char_data("lbl_8")),__nop()),
[t15,t15,z] = __declaration(__inside(char_data("t15"),char_data("t15")),
__identifier(char_data("z")),__basic(`$$size`("32"),
char_data("__integer"))))
table([t15,t15] = [[t15,t15],[t15,cst__6],[t15,cst__2],[t15,t15],[t15,t15,
z],[t15,t15,lbl_1],[t15,t15,lbl_1,_true,lbl_3],[t15,t15,lbl_1,_false,
lbl_4],[t15,t15,lbl_5],[t15,t15,lbl_5,lbl_7],[t15,t15,lbl_5,lbl_8],[t15,
t15,lbl_5,lbl_8,lbl_9]])
[[t15,t15,z],[t15,t15,lbl_1,_true,lbl_3],[t15,t15,lbl_1,_false,lbl_4],[t15,
t15,lbl_5,lbl_7],[t15,t15,lbl_5,lbl_8,lbl_9]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of x is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of y is 0
body [[t15,t15],[t15,cst__6],[t15,cst__2],[t15,t15],[t15,t15,z],[t15,t15,
lbl_1],[t15,t15,lbl_1,_true,lbl_3],[t15,t15,lbl_1,_false,lbl_4],[t15,t15,
lbl_5],[t15,t15,lbl_5,lbl_7],[t15,t15,lbl_5,lbl_8],[t15,t15,lbl_5,lbl_8,
lbl_9]]
lbl_1 __si
 counter 1/0 iteration domain {}

lbl_5 __while
 counter 1/0
examining cst__2
 is a constant
examining cst__6
 is a constant
examining t15
examining x
examining y
examining z
 has definitions
while remnants __gt(x,y)to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified (0 > y)
to be simplified (y >= 0)
to be simplified ( (y >= 0) && (y >= x) )
to be simplified ( (y >= 0) && (x > y) )
to be simplified ( ( (y >= 0) && (x > y) ) && (0 >= y) )
to be simplified ( ( (y >= 0) && (x > y) ) && (y > 0) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (0 > y)
to be simplified (y >= 0)
to be simplified (0 > y)
to be simplified (y >= 0)
to be simplified (x > y)
to be simplified (y >= x)
to be simplified (x > y)
to be simplified (x > y)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (z > 0)
to be simplified (0 >= z)
to be simplified (0 >= z)
to be simplified (z > 0)
to be simplified (z > 0)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (0 >= z)
to be simplified (z > 0)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (y >= x)
to be simplified (x > y)
to be simplified ( (x > y) && (0 >= y) )
to be simplified ( (x > y) && (y > 0) )

FrontEnd version J.3
qualif speed_popl10_sequential_single
inside declaration [speed_popl10_sequential_single,nondet]
inside declaration [speed_popl10_sequential_single,
  speed_popl10_sequential_single]
inside declaration [speed_popl10_sequential_single,
  speed_popl10_sequential_single,x]
inside declaration [speed_popl10_sequential_single,cst__7]
inside declaration [speed_popl10_sequential_single,cst__1]
table([speed_popl10_sequential_single,
cst__1] = __declaration(__inside(char_data("speed_popl10_sequential_single")
  ),__constant(`$$value`("0"),char_data("cst__1")),
  __basic(char_data("__integer"))),
   [speed_popl10_sequential_single,
   cst__7] = __declaration(__inside(char_data("speed_popl10_sequential_single"
   )),__constant(`$$value`("1"),char_data("cst__7")),
     __basic(char_data("__integer"))),
   [speed_popl10_sequential_single,
   nondet] = __declaration(__inside(char_data("speed_popl10_sequential_single"
   )),__identifier(char_data("nondet")),
     __function(__identifier(char_data("nondet")),__basic(`$$size`("32"),
         char_data("__integer")))),
   [speed_popl10_sequential_single,
   speed_popl10_sequential_single] = __declaration(__inside(char_data("speed_popl10_sequential_single"
   )),__identifier(char_data("speed_popl10_sequential_single")),
     __function(__identifier(char_data("speed_popl10_sequential_single")),
       __basic(char_data("void")),__identifier(char_data("n")),
       __basic(`$$size`("32"),char_data("__integer")))),
   [speed_popl10_sequential_single,speed_popl10_sequential_single,
   init_2] = __statement(`$$label`("init_2"),
     __inside(char_data("speed_popl10_sequential_single"),
       char_data("speed_popl10_sequential_single")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("x"))),
       __expression(__constant(char_data("cst__1"))))),
   [speed_popl10_sequential_single,speed_popl10_sequential_single,
   lbl_3] = __while(`$$label`("lbl_3"),
     __expression(__operator(char_data("__lt")),
       __expression(__identifier(char_data("x"))),
       __expression(__identifier(char_data("n"))))),
   [speed_popl10_sequential_single,speed_popl10_sequential_single,lbl_3,
     lbl_4] = __if(`$$label`("lbl_4"),
     __expression(__operator(char_data("__gt")),
       __expression(__operator(char_data("__funcall")),
         __expression(__identifier(char_data("nondet")))),
       __expression(__constant(char_data("cst__1"))))),
   [speed_popl10_sequential_single,speed_popl10_sequential_single,lbl_3,
     lbl_4,_false,lbl_6] = __statement(`$$label`("lbl_6"),
     __inside(char_data("speed_popl10_sequential_single"),
       char_data("speed_popl10_sequential_single"),char_data("lbl_3"),
       char_data("lbl_4"),char_data("_false")),__nop()),
 [speed_popl10_sequential_single,speed_popl10_sequential_single,lbl_3,
   lbl_4,_true,lbl_5] = __statement(`$$label`("lbl_5"),
   __inside(char_data("speed_popl10_sequential_single"),
     char_data("speed_popl10_sequential_single"),char_data("lbl_3"),
     char_data("lbl_4"),char_data("_true")),__break()),
[speed_popl10_sequential_single,speed_popl10_sequential_single,lbl_3,
lbl_8] = __statement(`$$label`("lbl_8"),
 __inside(char_data("speed_popl10_sequential_single"),
   char_data("speed_popl10_sequential_single"),char_data("lbl_3")),
 __expression(__operator(char_data("__assignment")),
   __expression(__identifier(char_data("x"))),
   __expression(__operator(char_data("__addition")),
     __expression(__identifier(char_data("x"))),
     __expression(__constant(char_data("cst__7")))))),
[speed_popl10_sequential_single,speed_popl10_sequential_single,
lbl_9] = __while(`$$label`("lbl_9"),
 __expression(__operator(char_data("__lt")),
   __expression(__identifier(char_data("x"))),
   __expression(__identifier(char_data("n"))))),
[speed_popl10_sequential_single,speed_popl10_sequential_single,lbl_9,
lbl_10] = __statement(`$$label`("lbl_10"),
 __inside(char_data("speed_popl10_sequential_single"),
   char_data("speed_popl10_sequential_single"),char_data("lbl_9")),
 __expression(__operator(char_data("__assignment")),
   __expression(__identifier(char_data("x"))),
   __expression(__operator(char_data("__addition")),
     __expression(__identifier(char_data("x"))),
     __expression(__constant(char_data("cst__7")))))),
[speed_popl10_sequential_single,speed_popl10_sequential_single,
x] = __declaration(__inside(char_data("speed_popl10_sequential_single"),
 char_data("speed_popl10_sequential_single")),__identifier(char_data("x")),
 __basic(`$$size`("32"),char_data("__integer"))))
table([speed_popl10_sequential_single,
speed_popl10_sequential_single] = [[speed_popl10_sequential_single,nondet],
[speed_popl10_sequential_single,speed_popl10_sequential_single],
[speed_popl10_sequential_single,cst__7],[speed_popl10_sequential_single,
cst__1],[speed_popl10_sequential_single,speed_popl10_sequential_single],
[speed_popl10_sequential_single,speed_popl10_sequential_single,x],
[speed_popl10_sequential_single,speed_popl10_sequential_single,init_2],
[speed_popl10_sequential_single,speed_popl10_sequential_single,lbl_3,
lbl_4],[speed_popl10_sequential_single,speed_popl10_sequential_single,
lbl_3],[speed_popl10_sequential_single,speed_popl10_sequential_single,
lbl_3,lbl_4,_true,lbl_5],[speed_popl10_sequential_single,
speed_popl10_sequential_single,lbl_3,lbl_4,_false,lbl_6],
[speed_popl10_sequential_single,speed_popl10_sequential_single,lbl_3,
lbl_8],[speed_popl10_sequential_single,speed_popl10_sequential_single,
lbl_9],[speed_popl10_sequential_single,speed_popl10_sequential_single,
lbl_9,lbl_10]])
[[speed_popl10_sequential_single,speed_popl10_sequential_single,x],
[speed_popl10_sequential_single,speed_popl10_sequential_single,init_2],
[speed_popl10_sequential_single,speed_popl10_sequential_single,lbl_3,lbl_4,
_true,lbl_5],[speed_popl10_sequential_single,
speed_popl10_sequential_single,lbl_3,lbl_4,_false,lbl_6],
[speed_popl10_sequential_single,speed_popl10_sequential_single,lbl_3,
lbl_8],[speed_popl10_sequential_single,speed_popl10_sequential_single,
lbl_9,lbl_10]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of n is 0
body [[speed_popl10_sequential_single,nondet],
[speed_popl10_sequential_single,speed_popl10_sequential_single],
[speed_popl10_sequential_single,cst__7],[speed_popl10_sequential_single,
cst__1],[speed_popl10_sequential_single,speed_popl10_sequential_single],
[speed_popl10_sequential_single,speed_popl10_sequential_single,x],
[speed_popl10_sequential_single,speed_popl10_sequential_single,init_2],
[speed_popl10_sequential_single,speed_popl10_sequential_single,lbl_3,
lbl_4],[speed_popl10_sequential_single,speed_popl10_sequential_single,
lbl_3],[speed_popl10_sequential_single,speed_popl10_sequential_single,
lbl_3,lbl_4,_true,lbl_5],[speed_popl10_sequential_single,
speed_popl10_sequential_single,lbl_3,lbl_4,_false,lbl_6],
[speed_popl10_sequential_single,speed_popl10_sequential_single,lbl_3,
lbl_8],[speed_popl10_sequential_single,speed_popl10_sequential_single,
lbl_9],[speed_popl10_sequential_single,speed_popl10_sequential_single,
lbl_9,lbl_10]]
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
lbl_4 __si
 counter 1/0 iteration domain {}

lbl_3 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
lbl_9 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
examining cst__1
 is a constant
examining cst__7
 is a constant
examining n
examining nondet
examining speed_popl10_sequential_single
examining x
 has definitions
while remnants __lt(x,n)while remnants __lt(x,n)to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified TRUE
to be simplified TRUE
to be simplified (0 >= n)
to be simplified (n > 0)
to be simplified (n > 0)
to be simplified (0 >= n)
to be simplified ( (0 >= n) && (n > 0) )
to be simplified ( (n > 0) && (0 >= n) )
to be simplified (n > 0)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (n > x)
to be simplified (x >= n)
to be simplified (n > x)
to be simplified (n > x)
to be simplified (n > x)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (n > x)
to be simplified (x >= n)
to be simplified (n > x)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (x >= n)
to be simplified (n > x)
to be simplified TRUE
to be simplified TRUE
to be simplified (x >= n)
to be simplified (n > x)
to be simplified (n > x)
to be simplified (x >= n)
to be simplified ( (x >= n) && (n > x) )
to be simplified ( (n > x) && (x >= n) )
to be simplified (n > x)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE

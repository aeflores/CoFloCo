FrontEnd version J.3
qualif speed_pldi10_ex1
inside declaration [speed_pldi10_ex1,tick]
inside declaration [speed_pldi10_ex1,nondet]
inside declaration [speed_pldi10_ex1,speed_pldi10_ex1]
inside declaration [speed_pldi10_ex1,speed_pldi10_ex1,i]
inside declaration [speed_pldi10_ex1,speed_pldi10_ex1,j]
inside declaration [speed_pldi10_ex1,cst__4]
inside declaration [speed_pldi10_ex1,cst__1]
table([speed_pldi10_ex1,
cst__1] = __declaration(__inside(char_data("speed_pldi10_ex1")),
  __constant(`$$value`("0"),char_data("cst__1")),
  __basic(char_data("__integer"))),
   [speed_pldi10_ex1,
   cst__4] = __declaration(__inside(char_data("speed_pldi10_ex1")),
     __constant(`$$value`("1"),char_data("cst__4")),
     __basic(char_data("__integer"))),
   [speed_pldi10_ex1,
   nondet] = __declaration(__inside(char_data("speed_pldi10_ex1")),
     __identifier(char_data("nondet")),
     __function(__identifier(char_data("nondet")),__basic(`$$size`("32"),
         char_data("__integer")))),
   [speed_pldi10_ex1,
   speed_pldi10_ex1] = __declaration(__inside(char_data("speed_pldi10_ex1"))
     ,__identifier(char_data("speed_pldi10_ex1")),
     __function(__identifier(char_data("speed_pldi10_ex1")),
       __basic(char_data("void")),__identifier(char_data("n")),
       __basic(`$$size`("32"),char_data("__integer")))),
   [speed_pldi10_ex1,speed_pldi10_ex1,
   i] = __declaration(__inside(char_data("speed_pldi10_ex1"),
     char_data("speed_pldi10_ex1")),__identifier(char_data("i")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [speed_pldi10_ex1,speed_pldi10_ex1,
   j] = __declaration(__inside(char_data("speed_pldi10_ex1"),
     char_data("speed_pldi10_ex1")),__identifier(char_data("j")),
     __basic(`$$size`("32"),char_data("__integer"))),
   [speed_pldi10_ex1,speed_pldi10_ex1,
   lbl_2] = __statement(`$$label`("lbl_2"),
     __inside(char_data("speed_pldi10_ex1"),char_data("speed_pldi10_ex1")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("i"))),
       __expression(__constant(char_data("cst__1"))))),
   [speed_pldi10_ex1,speed_pldi10_ex1,lbl_3] = __while(`$$label`("lbl_3"),
     __expression(__operator(char_data("__lt")),
       __expression(__identifier(char_data("i"))),
       __expression(__identifier(char_data("n"))))),
   [speed_pldi10_ex1,speed_pldi10_ex1,lbl_3,
   lbl_13] = __statement(`$$label`("lbl_13"),
     __inside(char_data("speed_pldi10_ex1"),char_data("speed_pldi10_ex1"),
       char_data("lbl_3")),
       __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("i"))),
       __expression(__operator(char_data("__addition")),
         __expression(__identifier(char_data("i"))),
         __expression(__constant(char_data("cst__4")))))),
   [speed_pldi10_ex1,speed_pldi10_ex1,lbl_3,
   lbl_5] = __statement(`$$label`("lbl_5"),
     __inside(char_data("speed_pldi10_ex1"),char_data("speed_pldi10_ex1"),
       char_data("lbl_3")),
       __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("j"))),
       __expression(__operator(char_data("__addition")),
         __expression(__identifier(char_data("i"))),
         __expression(__constant(char_data("cst__4")))))),
   [speed_pldi10_ex1,speed_pldi10_ex1,lbl_3,
   lbl_6] = __while(`$$label`("lbl_6"),
     __expression(__operator(char_data("__lt")),
       __expression(__identifier(char_data("j"))),
       __expression(__identifier(char_data("n"))))),
   [speed_pldi10_ex1,speed_pldi10_ex1,lbl_3,lbl_6,
   lbl_12] = __statement(`$$label`("lbl_12"),
     __inside(char_data("speed_pldi10_ex1"),char_data("speed_pldi10_ex1"),
       char_data("lbl_3"),char_data("lbl_6")),
     __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("j"))),
       __expression(__operator(char_data("__addition")),
         __expression(__identifier(char_data("j"))),
         __expression(__constant(char_data("cst__4")))))),
   [speed_pldi10_ex1,speed_pldi10_ex1,lbl_3,lbl_6,
   lbl_7] = __if(`$$label`("lbl_7"),
     __expression(__operator(char_data("__gt")),
       __expression(__operator(char_data("__funcall")),
         __expression(__identifier(char_data("nondet")))),
       __expression(__constant(char_data("cst__1"))))),
   [speed_pldi10_ex1,speed_pldi10_ex1,lbl_3,lbl_6,lbl_7,_false,
   lbl_11] = __statement(`$$label`("lbl_11"),
     __inside(char_data("speed_pldi10_ex1"),char_data("speed_pldi10_ex1"),
       char_data("lbl_3"),char_data("lbl_6"),char_data("lbl_7"),
       char_data("_false")),__nop()),
 [speed_pldi10_ex1,speed_pldi10_ex1,lbl_3,lbl_6,lbl_7,_true,
 lbl_10] = __statement(`$$label`("lbl_10"),
   __inside(char_data("speed_pldi10_ex1"),char_data("speed_pldi10_ex1"),
     char_data("lbl_3"),char_data("lbl_6"),char_data("lbl_7"),
     char_data("_true")),
     __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("n"))),
     __expression(__operator(char_data("__subtraction")),
       __expression(__identifier(char_data("n"))),
       __expression(__constant(char_data("cst__4")))))),
 [speed_pldi10_ex1,speed_pldi10_ex1,lbl_3,lbl_6,lbl_7,_true,
 lbl_8] = __statement(`$$label`("lbl_8"),
   __inside(char_data("speed_pldi10_ex1"),char_data("speed_pldi10_ex1"),
     char_data("lbl_3"),char_data("lbl_6"),char_data("lbl_7"),
     char_data("_true")),__expression(__operator(char_data("__funcall")),
     __expression(__identifier(char_data("tick"))),
     __expression(__constant(char_data("cst__4"))))),
 [speed_pldi10_ex1,speed_pldi10_ex1,lbl_3,lbl_6,lbl_7,_true,
 lbl_9] = __statement(`$$label`("lbl_9"),
   __inside(char_data("speed_pldi10_ex1"),char_data("speed_pldi10_ex1"),
     char_data("lbl_3"),char_data("lbl_6"),char_data("lbl_7"),
     char_data("_true")),
     __expression(__operator(char_data("__assignment")),
     __expression(__identifier(char_data("j"))),
     __expression(__operator(char_data("__subtraction")),
       __expression(__identifier(char_data("j"))),
       __expression(__constant(char_data("cst__4")))))),
 [speed_pldi10_ex1,
 tick] = __declaration(__inside(char_data("speed_pldi10_ex1")),
   __identifier(char_data("tick")),
     __function(__identifier(char_data("tick")),__basic(char_data("void")),
     __identifier(char_data("cost")),__basic(`$$size`("32"),
       char_data("__integer")))))
table([speed_pldi10_ex1,speed_pldi10_ex1] = [[speed_pldi10_ex1,tick],
[speed_pldi10_ex1,nondet],[speed_pldi10_ex1,speed_pldi10_ex1],
[speed_pldi10_ex1,cst__4],[speed_pldi10_ex1,cst__1],[speed_pldi10_ex1,
  speed_pldi10_ex1],[speed_pldi10_ex1,speed_pldi10_ex1,i],
  [speed_pldi10_ex1,speed_pldi10_ex1,j],[speed_pldi10_ex1,speed_pldi10_ex1,
  lbl_2],[speed_pldi10_ex1,speed_pldi10_ex1,lbl_3],[speed_pldi10_ex1,
  speed_pldi10_ex1,lbl_3,lbl_5],[speed_pldi10_ex1,speed_pldi10_ex1,lbl_3,
  lbl_6,lbl_7],[speed_pldi10_ex1,speed_pldi10_ex1,lbl_3,lbl_6],
[speed_pldi10_ex1,speed_pldi10_ex1,lbl_3,lbl_6,lbl_7,_true,lbl_8],
[speed_pldi10_ex1,speed_pldi10_ex1,lbl_3,lbl_6,lbl_7,_true,lbl_9],
[speed_pldi10_ex1,speed_pldi10_ex1,lbl_3,lbl_6,lbl_7,_true,lbl_10],
[speed_pldi10_ex1,speed_pldi10_ex1,lbl_3,lbl_6,lbl_7,_false,lbl_11],
[speed_pldi10_ex1,speed_pldi10_ex1,lbl_3,lbl_6,lbl_12],[speed_pldi10_ex1,
  speed_pldi10_ex1,lbl_3,lbl_13]])
[[speed_pldi10_ex1,speed_pldi10_ex1,i],[speed_pldi10_ex1,speed_pldi10_ex1,
j],[speed_pldi10_ex1,speed_pldi10_ex1,lbl_2],[speed_pldi10_ex1,
  speed_pldi10_ex1,lbl_3,lbl_5],[speed_pldi10_ex1,speed_pldi10_ex1,lbl_3,
  lbl_6,lbl_7,_true,lbl_8],[speed_pldi10_ex1,speed_pldi10_ex1,lbl_3,lbl_6,
  lbl_7,_true,lbl_9],[speed_pldi10_ex1,speed_pldi10_ex1,lbl_3,lbl_6,lbl_7,
  _true,lbl_10],[speed_pldi10_ex1,speed_pldi10_ex1,lbl_3,lbl_6,lbl_7,
  _false,lbl_11],[speed_pldi10_ex1,speed_pldi10_ex1,lbl_3,lbl_6,lbl_12],
[speed_pldi10_ex1,speed_pldi10_ex1,lbl_3,lbl_13]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of n is 0
body [[speed_pldi10_ex1,tick],[speed_pldi10_ex1,nondet],[speed_pldi10_ex1,
  speed_pldi10_ex1],[speed_pldi10_ex1,cst__4],[speed_pldi10_ex1,cst__1],
[speed_pldi10_ex1,speed_pldi10_ex1],[speed_pldi10_ex1,speed_pldi10_ex1,i],
[speed_pldi10_ex1,speed_pldi10_ex1,j],[speed_pldi10_ex1,speed_pldi10_ex1,
  lbl_2],[speed_pldi10_ex1,speed_pldi10_ex1,lbl_3],[speed_pldi10_ex1,
  speed_pldi10_ex1,lbl_3,lbl_5],[speed_pldi10_ex1,speed_pldi10_ex1,lbl_3,
  lbl_6,lbl_7],[speed_pldi10_ex1,speed_pldi10_ex1,lbl_3,lbl_6],
[speed_pldi10_ex1,speed_pldi10_ex1,lbl_3,lbl_6,lbl_7,_true,lbl_8],
[speed_pldi10_ex1,speed_pldi10_ex1,lbl_3,lbl_6,lbl_7,_true,lbl_9],
[speed_pldi10_ex1,speed_pldi10_ex1,lbl_3,lbl_6,lbl_7,_true,lbl_10],
[speed_pldi10_ex1,speed_pldi10_ex1,lbl_3,lbl_6,lbl_7,_false,lbl_11],
[speed_pldi10_ex1,speed_pldi10_ex1,lbl_3,lbl_6,lbl_12],[speed_pldi10_ex1,
  speed_pldi10_ex1,lbl_3,lbl_13]]
collect subscripts __expression(__identifier(char_data("i")))
[i(),[],{},{}]
lbl_3 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("j")))
[j(),[],{},{}]
lbl_7 __si
 counter 1/0 iteration domain {}

lbl_6 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("j")))
[j(),[],{},{}]
collect subscripts __expression(__identifier(char_data("n")))
[n(),[],{},{}]
collect subscripts __expression(__identifier(char_data("j")))
[j(),[],{},{}]
collect subscripts __expression(__identifier(char_data("i")))
[i(),[],{},{}]
examining cst__1
 is a constant
examining cst__4
 is a constant
examining i
 has definitions
examining j
 has definitions
examining n
examining nondet
examining speed_pldi10_ex1
examining tick
while remnants __lt(i,n)while remnants __lt(j,n)to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified TRUE
to be simplified TRUE
to be simplified (0 >= n)
to be simplified (n > 0)
to be simplified ( (n > 0) && (1 >= n) )
to be simplified ( (n > 0) && (n > 1) )
to be simplified ( (n > 0) && (n > 1) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (n > i)
to be simplified (i >= n)
to be simplified (n > i)
to be simplified (n > i)
to be simplified (n > j)
to be simplified (j >= n)
to be simplified (j >= n)
to be simplified (n > j)
to be simplified (n > j)
to be simplified (n > j)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (i >= n)
to be simplified (n > i)
to be simplified ( (n > i) && (i+1 >= n) )
to be simplified ( (n > i) && (n > i+1) )
to be simplified ( (n > i) && (n > i+1) )
to be simplified TRUE
to be simplified TRUE
to be simplified (j >= n)
to be simplified (n > j)
to be simplified (n > j)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE

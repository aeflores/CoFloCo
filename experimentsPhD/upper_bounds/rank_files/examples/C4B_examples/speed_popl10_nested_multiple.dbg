FrontEnd version J.3
qualif speed_popl10_nested_multiple
inside declaration [speed_popl10_nested_multiple,nondet]
inside declaration [speed_popl10_nested_multiple,
  speed_popl10_nested_multiple]
inside declaration [speed_popl10_nested_multiple,cst__7]
inside declaration [speed_popl10_nested_multiple,cst__4]
table([speed_popl10_nested_multiple,
cst__4] = __declaration(__inside(char_data("speed_popl10_nested_multiple")),
  __constant(`$$value`("0"),char_data("cst__4")),
  __basic(char_data("__integer"))),
   [speed_popl10_nested_multiple,
   cst__7] = __declaration(__inside(char_data("speed_popl10_nested_multiple"
   )),__constant(`$$value`("1"),char_data("cst__7")),
     __basic(char_data("__integer"))),
   [speed_popl10_nested_multiple,
   nondet] = __declaration(__inside(char_data("speed_popl10_nested_multiple"
   )),__identifier(char_data("nondet")),
     __function(__identifier(char_data("nondet")),__basic(`$$size`("32"),
         char_data("__integer")))),
   [speed_popl10_nested_multiple,
   speed_popl10_nested_multiple] = __declaration(__inside(char_data("speed_popl10_nested_multiple"
   )),__identifier(char_data("speed_popl10_nested_multiple")),
     __function(__identifier(char_data("speed_popl10_nested_multiple")),
       __basic(char_data("void")),__identifier(char_data("x")),
       __basic(`$$size`("32"),char_data("__integer")),
       __identifier(char_data("n")),__basic(`$$size`("32"),
         char_data("__integer")),__identifier(char_data("y")),
       __basic(`$$size`("32"),char_data("__integer")),
       __identifier(char_data("m")),__basic(`$$size`("32"),
         char_data("__integer")))),
   [speed_popl10_nested_multiple,speed_popl10_nested_multiple,
   lbl_1] = __while(`$$label`("lbl_1"),
     __expression(__operator(char_data("__lt")),
       __expression(__identifier(char_data("x"))),
       __expression(__identifier(char_data("n"))))),
   [speed_popl10_nested_multiple,speed_popl10_nested_multiple,lbl_1,
   lbl_2] = __while(`$$label`("lbl_2"),
     __expression(__operator(char_data("__lt")),
       __expression(__identifier(char_data("y"))),
       __expression(__identifier(char_data("m"))))),
   [speed_popl10_nested_multiple,speed_popl10_nested_multiple,lbl_1,lbl_2,
     lbl_3] = __if(`$$label`("lbl_3"),
     __expression(__operator(char_data("__gt")),
       __expression(__operator(char_data("__funcall")),
         __expression(__identifier(char_data("nondet")))),
       __expression(__constant(char_data("cst__4"))))),
   [speed_popl10_nested_multiple,speed_popl10_nested_multiple,lbl_1,lbl_2,
     lbl_3,_false,lbl_6] = __statement(`$$label`("lbl_6"),
     __inside(char_data("speed_popl10_nested_multiple"),
       char_data("speed_popl10_nested_multiple"),char_data("lbl_1"),
       char_data("lbl_2"),char_data("lbl_3"),char_data("_false")),__nop()),
 [speed_popl10_nested_multiple,speed_popl10_nested_multiple,lbl_1,lbl_2,
   lbl_3,_true,lbl_5] = __statement(`$$label`("lbl_5"),
   __inside(char_data("speed_popl10_nested_multiple"),
     char_data("speed_popl10_nested_multiple"),char_data("lbl_1"),
     char_data("lbl_2"),char_data("lbl_3"),char_data("_true")),__break()),
[speed_popl10_nested_multiple,speed_popl10_nested_multiple,lbl_1,lbl_2,
 lbl_8] = __statement(`$$label`("lbl_8"),
 __inside(char_data("speed_popl10_nested_multiple"),
   char_data("speed_popl10_nested_multiple"),char_data("lbl_1"),
   char_data("lbl_2")),__expression(__operator(char_data("__assignment")),
   __expression(__identifier(char_data("y"))),
   __expression(__operator(char_data("__addition")),
     __expression(__identifier(char_data("y"))),
     __expression(__constant(char_data("cst__7")))))),
[speed_popl10_nested_multiple,speed_popl10_nested_multiple,lbl_1,
lbl_9] = __statement(`$$label`("lbl_9"),
 __inside(char_data("speed_popl10_nested_multiple"),
   char_data("speed_popl10_nested_multiple"),char_data("lbl_1")),
 __expression(__operator(char_data("__assignment")),
   __expression(__identifier(char_data("x"))),
   __expression(__operator(char_data("__addition")),
     __expression(__identifier(char_data("x"))),
     __expression(__constant(char_data("cst__7")))))))
table([speed_popl10_nested_multiple,
speed_popl10_nested_multiple] = [[speed_popl10_nested_multiple,nondet],
[speed_popl10_nested_multiple,speed_popl10_nested_multiple],
[speed_popl10_nested_multiple,cst__7],[speed_popl10_nested_multiple,
cst__4],[speed_popl10_nested_multiple,speed_popl10_nested_multiple],
[speed_popl10_nested_multiple,speed_popl10_nested_multiple,lbl_1,lbl_2,
lbl_3],[speed_popl10_nested_multiple,speed_popl10_nested_multiple,lbl_1,
lbl_2],[speed_popl10_nested_multiple,speed_popl10_nested_multiple,lbl_1],
[speed_popl10_nested_multiple,speed_popl10_nested_multiple,lbl_1,lbl_2,
lbl_3,_true,lbl_5],[speed_popl10_nested_multiple,
speed_popl10_nested_multiple,lbl_1,lbl_2,lbl_3,_false,lbl_6],
[speed_popl10_nested_multiple,speed_popl10_nested_multiple,lbl_1,lbl_2,
lbl_8],[speed_popl10_nested_multiple,speed_popl10_nested_multiple,lbl_1,
lbl_9]])
[[speed_popl10_nested_multiple,speed_popl10_nested_multiple,lbl_1,lbl_2,
lbl_3,_true,lbl_5],[speed_popl10_nested_multiple,
speed_popl10_nested_multiple,lbl_1,lbl_2,lbl_3,_false,lbl_6],
[speed_popl10_nested_multiple,speed_popl10_nested_multiple,lbl_1,lbl_2,
lbl_8],[speed_popl10_nested_multiple,speed_popl10_nested_multiple,lbl_1,
lbl_9]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of x is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of n is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of y is 0
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of m is 0
body [[speed_popl10_nested_multiple,nondet],[speed_popl10_nested_multiple,
speed_popl10_nested_multiple],[speed_popl10_nested_multiple,cst__7],
[speed_popl10_nested_multiple,cst__4],[speed_popl10_nested_multiple,
speed_popl10_nested_multiple],[speed_popl10_nested_multiple,
speed_popl10_nested_multiple,lbl_1,lbl_2,lbl_3],
[speed_popl10_nested_multiple,speed_popl10_nested_multiple,lbl_1,lbl_2],
[speed_popl10_nested_multiple,speed_popl10_nested_multiple,lbl_1],
[speed_popl10_nested_multiple,speed_popl10_nested_multiple,lbl_1,lbl_2,
lbl_3,_true,lbl_5],[speed_popl10_nested_multiple,
speed_popl10_nested_multiple,lbl_1,lbl_2,lbl_3,_false,lbl_6],
[speed_popl10_nested_multiple,speed_popl10_nested_multiple,lbl_1,lbl_2,
lbl_8],[speed_popl10_nested_multiple,speed_popl10_nested_multiple,lbl_1,
lbl_9]]
lbl_3 __si
 counter 1/0 iteration domain {}

lbl_2 __while
 counter 1/0
lbl_1 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("y")))
[y(),[],{},{}]
collect subscripts __expression(__identifier(char_data("x")))
[x(),[],{},{}]
examining cst__4
 is a constant
examining cst__7
 is a constant
examining m
examining n
examining nondet
examining speed_popl10_nested_multiple
examining x
examining y
while remnants __lt(x,n)while remnants __lt(y,m)to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified (x >= n)
to be simplified (n > x)
to be simplified ( (n > x) && (y >= m) )
to be simplified ( (n > x) && (m > y) )
to be simplified ( (n > x) && (m > y) )
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (n > x)
to be simplified (x >= n)
to be simplified (n > x)
to be simplified (m > y)
to be simplified (y >= m)
to be simplified (m > y)
to be simplified (y >= m)
to be simplified (m > y)
to be simplified (m > y)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (x >= n)
to be simplified (n > x)
to be simplified ( (n > x) && (y >= m) )
to be simplified ( (n > x) && (m > y) )
to be simplified ( (n > x) && (m > y) )
to be simplified TRUE
to be simplified TRUE
to be simplified (y >= m)
to be simplified (m > y)
to be simplified (m > y)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE

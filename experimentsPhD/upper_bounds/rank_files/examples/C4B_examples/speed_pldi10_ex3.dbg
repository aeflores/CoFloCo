FrontEnd version J.3
qualif speed_pldi10_ex3
inside declaration [speed_pldi10_ex3,nondet]
inside declaration [speed_pldi10_ex3,speed_pldi10_ex3]
inside declaration [speed_pldi10_ex3,cst__3]
inside declaration [speed_pldi10_ex3,cst__2]
table([speed_pldi10_ex3,
cst__2] = __declaration(__inside(char_data("speed_pldi10_ex3")),
  __constant(`$$value`("0"),char_data("cst__2")),
  __basic(char_data("__integer"))),
   [speed_pldi10_ex3,
   cst__3] = __declaration(__inside(char_data("speed_pldi10_ex3")),
     __constant(`$$value`("1"),char_data("cst__3")),
     __basic(char_data("__integer"))),
   [speed_pldi10_ex3,
   nondet] = __declaration(__inside(char_data("speed_pldi10_ex3")),
     __identifier(char_data("nondet")),
     __function(__identifier(char_data("nondet")),__basic(`$$size`("32"),
         char_data("__integer")))),
   [speed_pldi10_ex3,
   speed_pldi10_ex3] = __declaration(__inside(char_data("speed_pldi10_ex3"))
     ,__identifier(char_data("speed_pldi10_ex3")),
     __function(__identifier(char_data("speed_pldi10_ex3")),
       __basic(char_data("void")),__identifier(char_data("n")),
       __basic(`$$size`("32"),char_data("__integer")))),
   [speed_pldi10_ex3,speed_pldi10_ex3,lbl_1] = __while(`$$label`("lbl_1"),
     __expression(__operator(char_data("__gt")),
       __expression(__identifier(char_data("n"))),
       __expression(__constant(char_data("cst__2"))))),
   [speed_pldi10_ex3,speed_pldi10_ex3,lbl_1,
   lbl_4] = __statement(`$$label`("lbl_4"),
     __inside(char_data("speed_pldi10_ex3"),char_data("speed_pldi10_ex3"),
       char_data("lbl_1")),
       __expression(__operator(char_data("__assignment")),
       __expression(__identifier(char_data("n"))),
       __expression(__operator(char_data("__subtraction")),
         __expression(__identifier(char_data("n"))),
         __expression(__constant(char_data("cst__3")))))),
   [speed_pldi10_ex3,speed_pldi10_ex3,lbl_1,
   lbl_5] = __while(`$$label`("lbl_5"),
     __expression(__operator(char_data("__gt")),
       __expression(__identifier(char_data("n"))),
       __expression(__constant(char_data("cst__2"))))),
   [speed_pldi10_ex3,speed_pldi10_ex3,lbl_1,lbl_5,
   lbl_6] = __if(`$$label`("lbl_6"),
     __expression(__operator(char_data("__gt")),
       __expression(__operator(char_data("__funcall")),
         __expression(__identifier(char_data("nondet")))),
       __expression(__constant(char_data("cst__2"))))),
   [speed_pldi10_ex3,speed_pldi10_ex3,lbl_1,lbl_5,lbl_6,_false,
   lbl_8] = __statement(`$$label`("lbl_8"),
     __inside(char_data("speed_pldi10_ex3"),char_data("speed_pldi10_ex3"),
       char_data("lbl_1"),char_data("lbl_5"),char_data("lbl_6"),
       char_data("_false")),__nop()),
 [speed_pldi10_ex3,speed_pldi10_ex3,lbl_1,lbl_5,lbl_6,_true,
 lbl_7] = __statement(`$$label`("lbl_7"),
   __inside(char_data("speed_pldi10_ex3"),char_data("speed_pldi10_ex3"),
     char_data("lbl_1"),char_data("lbl_5"),char_data("lbl_6"),
     char_data("_true")),__break()),
[speed_pldi10_ex3,speed_pldi10_ex3,lbl_1,lbl_5,
lbl_9] = __statement(`$$label`("lbl_9"),
 __inside(char_data("speed_pldi10_ex3"),char_data("speed_pldi10_ex3"),
   char_data("lbl_1"),char_data("lbl_5")),
 __expression(__operator(char_data("__assignment")),
   __expression(__identifier(char_data("n"))),
   __expression(__operator(char_data("__subtraction")),
     __expression(__identifier(char_data("n"))),
     __expression(__constant(char_data("cst__3")))))))
table([speed_pldi10_ex3,speed_pldi10_ex3] = [[speed_pldi10_ex3,nondet],
[speed_pldi10_ex3,speed_pldi10_ex3],[speed_pldi10_ex3,cst__3],
[speed_pldi10_ex3,cst__2],[speed_pldi10_ex3,speed_pldi10_ex3],
[speed_pldi10_ex3,speed_pldi10_ex3,lbl_1],[speed_pldi10_ex3,
speed_pldi10_ex3,lbl_1,lbl_4],[speed_pldi10_ex3,speed_pldi10_ex3,lbl_1,
lbl_5,lbl_6],[speed_pldi10_ex3,speed_pldi10_ex3,lbl_1,lbl_5],
[speed_pldi10_ex3,speed_pldi10_ex3,lbl_1,lbl_5,lbl_6,_true,lbl_7],
[speed_pldi10_ex3,speed_pldi10_ex3,lbl_1,lbl_5,lbl_6,_false,lbl_8],
[speed_pldi10_ex3,speed_pldi10_ex3,lbl_1,lbl_5,lbl_9]])
[[speed_pldi10_ex3,speed_pldi10_ex3,lbl_1,lbl_4],[speed_pldi10_ex3,
speed_pldi10_ex3,lbl_1,lbl_5,lbl_6,_true,lbl_7],[speed_pldi10_ex3,
speed_pldi10_ex3,lbl_1,lbl_5,lbl_6,_false,lbl_8],[speed_pldi10_ex3,
speed_pldi10_ex3,lbl_1,lbl_5,lbl_9]]
gatherFormals: typist __basic(`$$size`("32"),char_data("__integer"))
gatherFormals: tepee __basic(`$$size`("32"),char_data("__integer"))
dimension of n is 0
body [[speed_pldi10_ex3,nondet],[speed_pldi10_ex3,speed_pldi10_ex3],
[speed_pldi10_ex3,cst__3],[speed_pldi10_ex3,cst__2],[speed_pldi10_ex3,
speed_pldi10_ex3],[speed_pldi10_ex3,speed_pldi10_ex3,lbl_1],
[speed_pldi10_ex3,speed_pldi10_ex3,lbl_1,lbl_4],[speed_pldi10_ex3,
speed_pldi10_ex3,lbl_1,lbl_5,lbl_6],[speed_pldi10_ex3,speed_pldi10_ex3,
lbl_1,lbl_5],[speed_pldi10_ex3,speed_pldi10_ex3,lbl_1,lbl_5,lbl_6,_true,
lbl_7],[speed_pldi10_ex3,speed_pldi10_ex3,lbl_1,lbl_5,lbl_6,_false,lbl_8],
[speed_pldi10_ex3,speed_pldi10_ex3,lbl_1,lbl_5,lbl_9]]
lbl_1 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("n")))
[n(),[],{},{}]
lbl_6 __si
 counter 1/0 iteration domain {}

lbl_5 __while
 counter 1/0
collect subscripts __expression(__identifier(char_data("n")))
[n(),[],{},{}]
examining cst__2
 is a constant
examining cst__3
 is a constant
examining n
examining nondet
examining speed_pldi10_ex3
while remnants __gt(n,0)while remnants __gt(n,0)to be simplified TRUE
Tableau SMT solver mark B.2 14/05/28:10:25:55
to be simplified (0 >= n)
to be simplified (n > 0)
to be simplified ( (n > 0) && (1 >= n) )
to be simplified ( (n > 0) && (n > 1) )
to be simplified ( (n > 0) && (n > 1) )
to be simplified TRUE
to be simplified TRUE
to be simplified (0 >= n)
to be simplified (n > 0)
to be simplified ( (n > 0) && (1 >= n) )
to be simplified ( (n > 0) && (n > 1) )
to be simplified ( (n > 0) && (n > 1) )
to be simplified TRUE
to be simplified TRUE
to be simplified (n > 0)
to be simplified (0 >= n)
to be simplified (n > 0)
to be simplified (n > 0)
to be simplified (n > 0)
to be simplified (0 >= n)
to be simplified (0 >= n)
to be simplified (n > 0)
to be simplified (n > 0)
to be simplified (n > 0)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (0 >= n)
to be simplified (n > 0)
to be simplified (n > 0)
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified TRUE
to be simplified (0 >= n)
to be simplified (n > 0)
to be simplified ( (n > 0) && (1 >= n) )
to be simplified ( (n > 0) && (n > 1) )
to be simplified ( (n > 0) && (n > 1) )

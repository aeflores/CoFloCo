Warning: Ignored call to eval_xnu_stop/1 in equation eval_xnu_bb5_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_xnu_15/15,eval_xnu_16/15,eval_xnu_bb3_in/14,eval_xnu_bb4_in/14]
1. recursive  : [eval_xnu_10/6,eval_xnu_11/7,eval_xnu_12/8,eval_xnu_13/9,eval_xnu_bb1_in/5,eval_xnu_bb2_in/5,loop_cont_eval_xnu_bb3_in/6]
2. non_recursive  : [eval_xnu_bb5_in/1]
3. non_recursive  : [loop_cont_eval_xnu_bb1_in/2]
4. non_recursive  : [eval_xnu_8/2]
5. non_recursive  : [eval_xnu_7/2]
6. non_recursive  : [eval_xnu_6/2]
7. non_recursive  : [eval_xnu_5/2]
8. non_recursive  : [eval_xnu_4/2]
9. non_recursive  : [eval_xnu_3/2]
10. non_recursive  : [eval_xnu_2/2]
11. non_recursive  : [eval_xnu_1/2]
12. non_recursive  : [eval_xnu_0/2]
13. non_recursive  : [eval_xnu_bb0_in/2]
14. non_recursive  : [eval_xnu_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_xnu_bb3_in/14
1. SCC is partially evaluated into eval_xnu_bb1_in/5
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_xnu_8/2
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is partially evaluated into eval_xnu_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_xnu_bb3_in/14 
* CE 9 is refined into CE [10] 
* CE 8 is refined into CE [11] 


#### Refined cost equations eval_xnu_bb3_in/14 
* CE 10: eval_xnu_bb3_in(A,B,C,D,E,F,G,H,I,J,A,E,E,E) = 0
     [I>=G,A>=E,I>=D,H>=1,E=B+1,J=2] 
* CE 11: eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0,B,C,D,E,F) = 1+ eval_xnu_bb3_in(V_len,G,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,H,I,C,D,E,F)
     [V__end_0>=V_k_0+1,V_len>=V_1,V_k_0>=V_beg_0,V_4>=1,V_k_0+1=H,V_1=G+1,V_1=V_i_0+1,I=2,B=2] 

### Cost equations --> "Loop" of eval_xnu_bb3_in/14 
* CEs [11] --> Loop 10 
* CEs [10] --> Loop 11 

#### Loops of eval_xnu_bb3_in/14 
* Loop 10: eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0,B,C,D,E,F)->  eval_xnu_bb3_in(V_len,V_i_0',V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0',B',C,D,E,F)
                  [V__end_0>=V_k_0+1,V_len>=V_1,V_k_0>=V_beg_0,V_4>=1,V_k_0+1=V_k_0',V_1=V_i_0'+1,V_1=V_i_0+1,B'=2,B=2] 
* Loop 11: eval_xnu_bb3_in(A,B,C,D,E,F,G,H,I,J,A,E,E,E) [I>=G,A>=E,I>=D,H>=1,E=B+1,J=2] 

### Ranking functions of CR eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0,B,C,D,E,F) 
* RF of phase [10]: [V__end_0-V_k_0]

#### Partial ranking functions of CR eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0,B,C,D,E,F) 
* Partial RF of phase [10]:
  - RF of loop [10:1]:
    V__end_0-V_k_0


### Resulting Chains:eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0,B,C,D,E,F) 
* [[10],11]
* [11]


### Specialization of cost equations eval_xnu_bb1_in/5 
* CE 7 is refined into CE [12] 
* CE 4 is refined into CE [13,14] 
* CE 3 is refined into CE [15,16] 
* CE 6 is refined into CE [17] 
* CE 5 is refined into CE [18] 


#### Refined cost equations eval_xnu_bb1_in/5 
* CE 12: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 0
     [V_i_0>=V_len,B=3] 
* CE 13: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,V_end_0,F,V_beg_0,G,V_len,D,D,D):[[10],11]+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_len>=D,V_end_0>=V_beg_0+1,F>=1,0>=E,D=C+1,D=V_i_0+1,H=3,G=2,B=3] 
* CE 14: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,V_end_0,F,V_beg_0,G,V_len,D,D,D):[11]+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_beg_0>=V_end_0,V_len>=D,F>=1,0>=E,D=C+1,D=V_i_0+1,H=3,G=2,B=3] 
* CE 15: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,D,F,V_beg_0,G,V_len,D,D,D):[[10],11]+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_len>=D,D>=V_beg_0+1,F>=1,E>=1,D=C+1,D=V_i_0+1,H=3,G=2,B=3] 
* CE 16: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,D,F,V_beg_0,G,V_len,D,D,D):[11]+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_len>=D,V_beg_0>=D,F>=1,E>=1,D=C+1,D=V_i_0+1,H=3,G=2,B=3] 
* CE 17: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 1+ eval_xnu_bb1_in(V_len,C,V_end_0,V_beg_0,D)
     [V_len>=V_i_0+1,V_i_0+1=C,D=3,B=3] 
* CE 18: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 1+ eval_xnu_bb1_in(V_len,C,C,V_beg_0,D)
     [V_len>=C,C=V_i_0+1,D=3,B=3] 

### Cost equations --> "Loop" of eval_xnu_bb1_in/5 
* CEs [17] --> Loop 12 
* CEs [16] --> Loop 13 
* CEs [15] --> Loop 14 
* CEs [13] --> Loop 15 
* CEs [14] --> Loop 16 
* CEs [18] --> Loop 17 
* CEs [12] --> Loop 18 

#### Loops of eval_xnu_bb1_in/5 
* Loop 12: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,V_i_0',V_end_0,V_beg_0,B')
                  [V_len>=V_i_0+1,V_i_0+1=V_i_0',B'=3,B=3] 
* Loop 13: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,A',A',A',B')
                  [V_beg_0>=A',V_len>=A',A'=V_i_0+1,B'=3,B=3] 
* Loop 14: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,A',A',A',B')
                  [V_len>=A',A'>=V_beg_0+1,A'=V_i_0+1,B'=3,B=3] 
* Loop 15: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,A',A',A',B')
                  [V_len>=A',V_end_0>=V_beg_0+1,A'=V_i_0+1,B'=3,B=3] 
* Loop 16: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,A',A',A',B')
                  [V_len>=A',V_beg_0>=V_end_0,A'=V_i_0+1,B'=3,B=3] 
* Loop 17: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,A',A',V_beg_0,B')
                  [V_len>=A',A'=V_i_0+1,B'=3,B=3] 
* Loop 18: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) [V_i_0>=V_len,B=3] 

### Ranking functions of CR eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) 
* RF of phase [12,13,14,15,16,17]: [V_len-V_i_0]

#### Partial ranking functions of CR eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) 


### Resulting Chains:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) 
* [[12,13,14,15,16,17],18]
* [18]


### Specialization of cost equations eval_xnu_8/2 
* CE 2 is refined into CE [19,20] 


#### Refined cost equations eval_xnu_8/2 
* CE 19: eval_xnu_8(V_len,B) = 1+ eval_xnu_bb1_in(V_len,C,D,E,F):[[12,13,14,15,16,17],18]
     [V_len>=1,F=3,E=0,D=0,C=0] 
* CE 20: eval_xnu_8(V_len,B) = 1+ eval_xnu_bb1_in(V_len,C,D,E,F):[18]
     [0>=V_len,F=3,E=0,D=0,C=0] 

### Cost equations --> "Loop" of eval_xnu_8/2 
* CEs [19] --> Loop 19 
* CEs [20] --> Loop 20 

#### Loops of eval_xnu_8/2 
* Loop 19: eval_xnu_8(V_len,B) [V_len>=1] 
* Loop 20: eval_xnu_8(V_len,B) [0>=V_len] 

### Ranking functions of CR eval_xnu_8(V_len,B) 

#### Partial ranking functions of CR eval_xnu_8(V_len,B) 


### Resulting Chains:eval_xnu_8(V_len,B) 
* [20]
* [19]


### Specialization of cost equations eval_xnu_start/2 
* CE 1 is refined into CE [21,22] 


#### Refined cost equations eval_xnu_start/2 
* CE 21: eval_xnu_start(V_len,B) = 0+ eval_xnu_8(V_len,B):[20]
     [0>=V_len] 
* CE 22: eval_xnu_start(V_len,B) = 0+ eval_xnu_8(V_len,B):[19]
     [V_len>=1] 

### Cost equations --> "Loop" of eval_xnu_start/2 
* CEs [22] --> Loop 21 
* CEs [21] --> Loop 22 

#### Loops of eval_xnu_start/2 
* Loop 21: eval_xnu_start(V_len,B) [V_len>=1] 
* Loop 22: eval_xnu_start(V_len,B) [0>=V_len] 

### Ranking functions of CR eval_xnu_start(V_len,B) 

#### Partial ranking functions of CR eval_xnu_start(V_len,B) 


### Resulting Chains:eval_xnu_start(V_len,B) 
* [22]
* [21]


Computing Bounds
=====================================

#### Cost of loops [10] 

 * loop 10:eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0,B,C,D,E,F) -> [eval_xnu_bb3_in(V_len',V_i_0',V_end_0',V_beg_0',V_1',V_2',V__end_0',V_4',V_k_0',B',C',D',E',F')] 
1
#### Cost of phase [10]:eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0,B,C,D,E,F) -> [eval_xnu_bb3_in(V_len',V_i_0',V_end_0',V_beg_0',V_1',V_2',V__end_0',V_4',V_k_0',B',C',D',E',F')] 
1*it(10)+0
  Such that:it(10) =< V__end_0-V_k_0
it(10) =< V__end_0-V_k_0-V__end_0'+V_k_0'

#### Cost of chains of eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0,B,C,D,E,F):
* Chain [[10],11]: 1*it(10)+0
  Such that:it(10) =< V__end_0-V_k_0

  with precondition: [B=2,V_i_0+1=V_1,V_len=C,V_i_0+1=D,V_i_0+1=E,V_i_0+1=F,V_4>=1,V_len>=V_i_0+1,V_k_0>=V_beg_0,V__end_0>=V_k_0+1] 

* Chain [11]: 0
  with precondition: [B=2,V_i_0+1=V_1,V_len=C,V_i_0+1=D,V_i_0+1=E,V_i_0+1=F,V_4>=1,V_len>=V_i_0+1,V_k_0>=V_beg_0,V_k_0>=V__end_0] 


#### Cost of loops [12,14,15,16,17] 

 * loop 12:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
1
 * loop 14:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
1*s(2)+2
  Such that:s(2) =< -V_beg_0+V_beg_0'

 * loop 15:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
1*s(4)+2
  Such that:s(4) =< V_end_0-V_beg_0

 * loop 16:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
2
 * loop 17:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
1
#### Cost of phase [12,13,14,15,16,17]:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
4*it(12)+4*it(15)+2*s(5)+0
  Such that:aux(1) =< V_len-V_i_0
aux(2) =< V_len-V_i_0-V_len'+V_i_0'
aux(3) =< V_len-V_beg_0
aux(4) =< V_len-V_beg_0-V_len'+V_beg_0'
it(12) =< aux(1)
it(15) =< aux(1)
it(12) =< aux(2)
it(15) =< aux(2)
it(15) =< aux(3)
s(5) =< aux(3)
it(15) =< aux(4)
s(5) =< aux(4)

#### Cost of chains of eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B):
* Chain [[12,13,14,15,16,17],18]: 4*it(12)+4*it(15)+2*s(5)+0
  Such that:aux(5) =< V_len-V_i_0
aux(6) =< V_len-V_beg_0
it(12) =< aux(5)
it(15) =< aux(5)
it(15) =< aux(6)
s(5) =< aux(6)

  with precondition: [B=3,V_beg_0>=0,V_len>=V_i_0+1,V_i_0>=V_end_0,V_end_0>=V_beg_0] 

* Chain [18]: 0
  with precondition: [B=3,V_beg_0>=0,V_i_0>=V_len,V_i_0>=V_end_0,V_end_0>=V_beg_0] 


#### Cost of chains of eval_xnu_8(V_len,B):
* Chain [20]: 1
  with precondition: [0>=V_len] 

* Chain [19]: 10*s(9)+1
  Such that:aux(7) =< V_len
s(9) =< aux(7)

  with precondition: [V_len>=1] 


#### Cost of chains of eval_xnu_start(V_len,B):
* Chain [22]: 1
  with precondition: [0>=V_len] 

* Chain [21]: 10*s(13)+1
  Such that:s(12) =< V_len
s(13) =< s(12)

  with precondition: [V_len>=1] 


Closed-form bounds of eval_xnu_start(V_len,B): 
-------------------------------------
* Chain [22] with precondition: [0>=V_len] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [21] with precondition: [V_len>=1] 
    - Upper bound: 10*V_len+1 
    - Complexity: n 

### Maximum cost of eval_xnu_start(V_len,B): nat(V_len)*10+1 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 47 ms.
* Invariants computed in 51 ms.
   - Backward Invariants 18 ms.
   - Transitive Invariants 14 ms.
* Refinement performed in 66 ms.
* Termination proved in 18 ms.
* Upper bounds computed in 104 ms.
   - Equation cost structures 32 ms.
   - Phase cost structures 78 ms.
   - Chain cost structures 17 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 341 ms.


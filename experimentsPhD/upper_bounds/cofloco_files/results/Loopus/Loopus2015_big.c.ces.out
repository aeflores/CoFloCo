Warning: Ignored call to eval_xnu_stop/1 in equation eval_xnu_bb6_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_xnu_16/14,eval_xnu_17/14,eval_xnu_bb3_in/14,eval_xnu_bb4_in/14]
1. recursive  : [eval_xnu_12/6,eval_xnu_13/7,eval_xnu_14/8,eval_xnu_15/9,eval_xnu_19/9,eval_xnu_20/10,eval_xnu_bb1_in/5,eval_xnu_bb2_in/5,eval_xnu_bb5_in/9,loop_cont_eval_xnu_bb3_in/6]
2. non_recursive  : [eval_xnu_bb6_in/1]
3. non_recursive  : [loop_cont_eval_xnu_bb1_in/2]
4. non_recursive  : [eval_xnu_10/2]
5. non_recursive  : [eval_xnu_9/2]
6. non_recursive  : [eval_xnu_8/2]
7. non_recursive  : [eval_xnu_7/2]
8. non_recursive  : [eval_xnu_6/2]
9. non_recursive  : [eval_xnu_5/2]
10. non_recursive  : [eval_xnu_4/2]
11. non_recursive  : [eval_xnu_3/2]
12. non_recursive  : [eval_xnu_2/2]
13. non_recursive  : [eval_xnu_1/2]
14. non_recursive  : [eval_xnu_0/2]
15. non_recursive  : [eval_xnu_bb0_in/2]
16. non_recursive  : [eval_xnu_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_xnu_bb3_in/14
1. SCC is partially evaluated into eval_xnu_bb1_in/5
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_xnu_10/2
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is completely evaluated into other SCCs
16. SCC is partially evaluated into eval_xnu_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_xnu_bb3_in/14 
* CE 14 is refined into CE [15] 
* CE 13 is refined into CE [16] 


#### Refined cost equations eval_xnu_bb3_in/14 
* CE 15: eval_xnu_bb3_in(A,B,C,D,E,F,G,H,I,J,A,E,E,E) = 0
     [I>=G,A>=E,I>=D,E=B+1,J=2] 
* CE 16: eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0,B,C,D,E,F) = 1+ eval_xnu_bb3_in(V_len,G,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,H,I,C,D,E,F)
     [V__end_0>=V_k_0+1,V_len>=V_1,V_k_0>=V_beg_0,V_k_0+1=H,V_1=G+1,V_1=V_i_0+1,I=2,B=2] 

### Cost equations --> "Loop" of eval_xnu_bb3_in/14 
* CEs [16] --> Loop 15 
* CEs [15] --> Loop 16 

#### Loops of eval_xnu_bb3_in/14 
* Loop 15: eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0,B,C,D,E,F)->  eval_xnu_bb3_in(V_len,V_i_0',V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0',B',C,D,E,F)
                  [V__end_0>=V_k_0+1,V_len>=V_1,V_k_0>=V_beg_0,V_k_0+1=V_k_0',V_1=V_i_0'+1,V_1=V_i_0+1,B'=2,B=2] 
* Loop 16: eval_xnu_bb3_in(A,B,C,D,E,F,G,H,I,J,A,E,E,E) [I>=G,A>=E,I>=D,E=B+1,J=2] 

### Ranking functions of CR eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0,B,C,D,E,F) 
* RF of phase [15]: [V__end_0-V_k_0]

#### Partial ranking functions of CR eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0,B,C,D,E,F) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    V__end_0-V_k_0


### Resulting Chains:eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0,B,C,D,E,F) 
* [[15],16]
* [16]


### Specialization of cost equations eval_xnu_bb1_in/5 
* CE 12 is refined into CE [17] 
* CE 11 is refined into CE [18,19] 
* CE 10 is refined into CE [20,21] 
* CE 9 is refined into CE [22,23] 
* CE 8 is refined into CE [24,25] 
* CE 7 is refined into CE [26,27] 
* CE 6 is refined into CE [28,29] 
* CE 4 is refined into CE [30] 
* CE 5 is refined into CE [31] 
* CE 3 is refined into CE [32] 


#### Refined cost equations eval_xnu_bb1_in/5 
* CE 17: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 0
     [V_i_0>=V_len,B=3] 
* CE 18: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,V_end_0,F,V_beg_0,G,V_len,D,D,D):[[15],16]+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_len>=D,V_end_0>=V_beg_0+1,F>=1,D=C+1,D=V_i_0+1,H=3,G=2,E=0,B=3] 
* CE 19: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,V_end_0,F,V_beg_0,G,V_len,D,D,D):[16]+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_beg_0>=V_end_0,V_len>=D,F>=1,D=C+1,D=V_i_0+1,H=3,G=2,E=0,B=3] 
* CE 20: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,D,F,V_beg_0,G,V_len,D,D,D):[[15],16]+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_len>=D,D>=V_beg_0+1,F>=1,E>=1,D=C+1,D=V_i_0+1,H=3,G=2,B=3] 
* CE 21: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,D,F,V_beg_0,G,V_len,D,D,D):[16]+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_len>=D,V_beg_0>=D,F>=1,E>=1,D=C+1,D=V_i_0+1,H=3,G=2,B=3] 
* CE 22: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,D,F,V_beg_0,G,V_len,D,D,D):[[15],16]+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_len>=D,D>=V_beg_0+1,F>=1,0>=E+1,D=C+1,D=V_i_0+1,H=3,G=2,B=3] 
* CE 23: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,D,F,V_beg_0,G,V_len,D,D,D):[16]+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_len>=D,V_beg_0>=D,F>=1,0>=E+1,D=C+1,D=V_i_0+1,H=3,G=2,B=3] 
* CE 24: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,V_end_0,F,V_beg_0,G,V_len,D,D,D):[[15],16]+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_len>=D,V_end_0>=V_beg_0+1,0>=F+1,D=C+1,D=V_i_0+1,H=3,G=2,E=0,B=3] 
* CE 25: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,V_end_0,F,V_beg_0,G,V_len,D,D,D):[16]+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_beg_0>=V_end_0,V_len>=D,0>=F+1,D=C+1,D=V_i_0+1,H=3,G=2,E=0,B=3] 
* CE 26: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,D,F,V_beg_0,G,V_len,D,D,D):[[15],16]+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_len>=D,D>=V_beg_0+1,E>=1,0>=F+1,D=C+1,D=V_i_0+1,H=3,G=2,B=3] 
* CE 27: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,D,F,V_beg_0,G,V_len,D,D,D):[16]+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_len>=D,V_beg_0>=D,E>=1,0>=F+1,D=C+1,D=V_i_0+1,H=3,G=2,B=3] 
* CE 28: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,D,F,V_beg_0,G,V_len,D,D,D):[[15],16]+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_len>=D,D>=V_beg_0+1,0>=F+1,0>=E+1,D=C+1,D=V_i_0+1,H=3,G=2,B=3] 
* CE 29: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 2+ eval_xnu_bb3_in(V_len,C,V_end_0,V_beg_0,D,E,D,F,V_beg_0,G,V_len,D,D,D):[16]+ eval_xnu_bb1_in(V_len,D,D,D,H)
     [V_len>=D,V_beg_0>=D,0>=F+1,0>=E+1,D=C+1,D=V_i_0+1,H=3,G=2,B=3] 
* CE 30: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 1+ eval_xnu_bb1_in(V_len,C,V_end_0,V_beg_0,D)
     [V_len>=V_i_0+1,V_i_0+1=C,D=3,B=3] 
* CE 31: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 1+ eval_xnu_bb1_in(V_len,C,C,C,D)
     [V_len>=C,C=V_i_0+1,D=3,B=3] 
* CE 32: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) = 1+ eval_xnu_bb1_in(V_len,C,C,V_beg_0,D)
     [V_len>=C,C=V_i_0+1,D=3,B=3] 

### Cost equations --> "Loop" of eval_xnu_bb1_in/5 
* CEs [30] --> Loop 17 
* CEs [29] --> Loop 18 
* CEs [27] --> Loop 19 
* CEs [23] --> Loop 20 
* CEs [21] --> Loop 21 
* CEs [31] --> Loop 22 
* CEs [28] --> Loop 23 
* CEs [26] --> Loop 24 
* CEs [22] --> Loop 25 
* CEs [20] --> Loop 26 
* CEs [24] --> Loop 27 
* CEs [18] --> Loop 28 
* CEs [25] --> Loop 29 
* CEs [19] --> Loop 30 
* CEs [32] --> Loop 31 
* CEs [17] --> Loop 32 

#### Loops of eval_xnu_bb1_in/5 
* Loop 17: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,V_i_0',V_end_0,V_beg_0,B')
                  [V_len>=V_i_0+1,V_i_0+1=V_i_0',B'=3,B=3] 
* Loop 18: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,A',A',A',B')
                  [V_beg_0>=A',V_len>=A',A'=V_i_0+1,B'=3,B=3] 
* Loop 19: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,A',A',A',B')
                  [V_beg_0>=A',V_len>=A',A'=V_i_0+1,B'=3,B=3] 
* Loop 20: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,A',A',A',B')
                  [V_beg_0>=A',V_len>=A',A'=V_i_0+1,B'=3,B=3] 
* Loop 21: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,A',A',A',B')
                  [V_beg_0>=A',V_len>=A',A'=V_i_0+1,B'=3,B=3] 
* Loop 22: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,A',A',A',B')
                  [V_len>=A',A'=V_i_0+1,B'=3,B=3] 
* Loop 23: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,A',A',A',B')
                  [V_len>=A',A'>=V_beg_0+1,A'=V_i_0+1,B'=3,B=3] 
* Loop 24: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,A',A',A',B')
                  [V_len>=A',A'>=V_beg_0+1,A'=V_i_0+1,B'=3,B=3] 
* Loop 25: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,A',A',A',B')
                  [V_len>=A',A'>=V_beg_0+1,A'=V_i_0+1,B'=3,B=3] 
* Loop 26: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,A',A',A',B')
                  [V_len>=A',A'>=V_beg_0+1,A'=V_i_0+1,B'=3,B=3] 
* Loop 27: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,A',A',A',B')
                  [V_len>=A',V_end_0>=V_beg_0+1,A'=V_i_0+1,B'=3,B=3] 
* Loop 28: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,A',A',A',B')
                  [V_len>=A',V_end_0>=V_beg_0+1,A'=V_i_0+1,B'=3,B=3] 
* Loop 29: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,A',A',A',B')
                  [V_len>=A',V_beg_0>=V_end_0,A'=V_i_0+1,B'=3,B=3] 
* Loop 30: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,A',A',A',B')
                  [V_len>=A',V_beg_0>=V_end_0,A'=V_i_0+1,B'=3,B=3] 
* Loop 31: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B)->  eval_xnu_bb1_in(V_len,A',A',V_beg_0,B')
                  [V_len>=A',A'=V_i_0+1,B'=3,B=3] 
* Loop 32: eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) [V_i_0>=V_len,B=3] 

### Ranking functions of CR eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) 
* RF of phase [17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]: [V_len-V_i_0]

#### Partial ranking functions of CR eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) 


### Resulting Chains:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) 
* [[17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],32]
* [32]


### Specialization of cost equations eval_xnu_10/2 
* CE 2 is refined into CE [33,34] 


#### Refined cost equations eval_xnu_10/2 
* CE 33: eval_xnu_10(V_len,B) = 1+ eval_xnu_bb1_in(V_len,C,D,E,F):[[17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],32]
     [V_len>=1,F=3,E=0,D=0,C=0] 
* CE 34: eval_xnu_10(V_len,B) = 1+ eval_xnu_bb1_in(V_len,C,D,E,F):[32]
     [0>=V_len,F=3,E=0,D=0,C=0] 

### Cost equations --> "Loop" of eval_xnu_10/2 
* CEs [33] --> Loop 33 
* CEs [34] --> Loop 34 

#### Loops of eval_xnu_10/2 
* Loop 33: eval_xnu_10(V_len,B) [V_len>=1] 
* Loop 34: eval_xnu_10(V_len,B) [0>=V_len] 

### Ranking functions of CR eval_xnu_10(V_len,B) 

#### Partial ranking functions of CR eval_xnu_10(V_len,B) 


### Resulting Chains:eval_xnu_10(V_len,B) 
* [34]
* [33]


### Specialization of cost equations eval_xnu_start/2 
* CE 1 is refined into CE [35,36] 


#### Refined cost equations eval_xnu_start/2 
* CE 35: eval_xnu_start(V_len,B) = 0+ eval_xnu_10(V_len,B):[34]
     [0>=V_len] 
* CE 36: eval_xnu_start(V_len,B) = 0+ eval_xnu_10(V_len,B):[33]
     [V_len>=1] 

### Cost equations --> "Loop" of eval_xnu_start/2 
* CEs [36] --> Loop 35 
* CEs [35] --> Loop 36 

#### Loops of eval_xnu_start/2 
* Loop 35: eval_xnu_start(V_len,B) [V_len>=1] 
* Loop 36: eval_xnu_start(V_len,B) [0>=V_len] 

### Ranking functions of CR eval_xnu_start(V_len,B) 

#### Partial ranking functions of CR eval_xnu_start(V_len,B) 


### Resulting Chains:eval_xnu_start(V_len,B) 
* [36]
* [35]


Computing Bounds
=====================================

#### Cost of loops [15] 

 * loop 15:eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0,B,C,D,E,F) -> [eval_xnu_bb3_in(V_len',V_i_0',V_end_0',V_beg_0',V_1',V_2',V__end_0',V_4',V_k_0',B',C',D',E',F')] 
1
#### Cost of phase [15]:eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0,B,C,D,E,F) -> [eval_xnu_bb3_in(V_len',V_i_0',V_end_0',V_beg_0',V_1',V_2',V__end_0',V_4',V_k_0',B',C',D',E',F')] 
1*it(15)+0
  Such that:it(15) =< V__end_0-V_k_0
it(15) =< V__end_0-V_k_0-V__end_0'+V_k_0'

#### Cost of chains of eval_xnu_bb3_in(V_len,V_i_0,V_end_0,V_beg_0,V_1,V_2,V__end_0,V_4,V_k_0,B,C,D,E,F):
* Chain [[15],16]: 1*it(15)+0
  Such that:it(15) =< V__end_0-V_k_0

  with precondition: [B=2,V_i_0+1=V_1,V_len=C,V_i_0+1=D,V_i_0+1=E,V_i_0+1=F,V_len>=V_i_0+1,V_k_0>=V_beg_0,V__end_0>=V_k_0+1] 

* Chain [16]: 0
  with precondition: [B=2,V_i_0+1=V_1,V_len=C,V_i_0+1=D,V_i_0+1=E,V_i_0+1=F,V_len>=V_i_0+1,V_k_0>=V_beg_0,V_k_0>=V__end_0] 


#### Cost of loops [17,22,23,24,25,26,27,28,29,30,31] 

 * loop 17:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
1
 * loop 22:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
1
 * loop 23:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
1*s(2)+2
  Such that:s(2) =< -V_beg_0+V_beg_0'

 * loop 24:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
1*s(4)+2
  Such that:s(4) =< -V_beg_0+V_beg_0'

 * loop 25:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
1*s(6)+2
  Such that:s(6) =< -V_beg_0+V_beg_0'

 * loop 26:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
1*s(8)+2
  Such that:s(8) =< -V_beg_0+V_beg_0'

 * loop 27:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
1*s(10)+2
  Such that:s(10) =< V_end_0-V_beg_0

 * loop 28:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
1*s(12)+2
  Such that:s(12) =< V_end_0-V_beg_0

 * loop 29:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
2
 * loop 30:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
2
 * loop 31:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
1
#### Cost of phase [17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]:eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) -> [eval_xnu_bb1_in(V_len',V_i_0',V_end_0',V_beg_0',B')] 
5*it(17)+14*it(24)+6*s(13)+0
  Such that:aux(1) =< V_len-V_i_0
aux(2) =< V_len-V_i_0-V_len'+V_i_0'
aux(3) =< V_len-V_beg_0
aux(4) =< V_len-V_beg_0-V_len'+V_beg_0'
it(17) =< aux(1)
it(24) =< aux(1)
it(17) =< aux(2)
it(24) =< aux(2)
it(24) =< aux(3)
s(13) =< aux(3)
it(24) =< aux(4)
s(13) =< aux(4)

#### Cost of chains of eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B):
* Chain [[17,18,19,20,21,22,23,24,25,26,27,28,29,30,31],32]: 5*it(17)+14*it(24)+6*s(13)+0
  Such that:aux(5) =< V_len-V_i_0
aux(6) =< V_len-V_beg_0
it(17) =< aux(5)
it(24) =< aux(5)
it(24) =< aux(6)
s(13) =< aux(6)

  with precondition: [B=3,V_beg_0>=0,V_len>=V_i_0+1,V_i_0>=V_end_0,V_end_0>=V_beg_0] 

* Chain [32]: 0
  with precondition: [B=3,V_beg_0>=0,V_i_0>=V_len,V_i_0>=V_end_0,V_end_0>=V_beg_0] 


#### Cost of chains of eval_xnu_10(V_len,B):
* Chain [34]: 1
  with precondition: [0>=V_len] 

* Chain [33]: 25*s(21)+1
  Such that:aux(7) =< V_len
s(21) =< aux(7)

  with precondition: [V_len>=1] 


#### Cost of chains of eval_xnu_start(V_len,B):
* Chain [36]: 1
  with precondition: [0>=V_len] 

* Chain [35]: 25*s(25)+1
  Such that:s(24) =< V_len
s(25) =< s(24)

  with precondition: [V_len>=1] 


Closed-form bounds of eval_xnu_start(V_len,B): 
-------------------------------------
* Chain [36] with precondition: [0>=V_len] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [35] with precondition: [V_len>=1] 
    - Upper bound: 25*V_len+1 
    - Complexity: n 

### Maximum cost of eval_xnu_start(V_len,B): nat(V_len)*25+1 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 104 ms.
* Invariants computed in 91 ms.
   - Backward Invariants 30 ms.
   - Transitive Invariants 24 ms.
* Refinement performed in 133 ms.
* Termination proved in 18 ms.
* Upper bounds computed in 209 ms.
   - Equation cost structures 54 ms.
   - Phase cost structures 185 ms.
   - Chain cost structures 16 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 619 ms.


Warning: Ignored call to eval_speedFails2_stop/1 in equation eval_speedFails2_bb3_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_speedFails2_bb1_in/3,eval_speedFails2_bb2_in/3]
1. non_recursive  : [eval_speedFails2_bb3_in/1]
2. non_recursive  : [loop_cont_eval_speedFails2_bb1_in/2]
3. non_recursive  : [eval_speedFails2_4/3]
4. non_recursive  : [eval_speedFails2_3/3]
5. non_recursive  : [eval_speedFails2_2/3]
6. non_recursive  : [eval_speedFails2_1/3]
7. non_recursive  : [eval_speedFails2_0/3]
8. non_recursive  : [eval_speedFails2_bb0_in/3]
9. non_recursive  : [eval_speedFails2_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_speedFails2_bb1_in/3
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into eval_speedFails2_4/3
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into eval_speedFails2_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_speedFails2_bb1_in/3 
* CE 5 is refined into CE [6] 
* CE 4 is refined into CE [7] 
* CE 3 is refined into CE [8] 


#### Refined cost equations eval_speedFails2_bb1_in/3 
* CE 6: eval_speedFails2_bb1_in(A,A,B) = 0
     [B=2] 
* CE 7: eval_speedFails2_bb1_in(V_n,V_i_0,B) = 1+ eval_speedFails2_bb1_in(V_n,C,D)
     [V_n>=V_i_0+1,V_i_0+1=C,D=2,B=2] 
* CE 8: eval_speedFails2_bb1_in(V_n,V_i_0,B) = 1+ eval_speedFails2_bb1_in(V_n,C,D)
     [V_i_0>=V_n+1,V_i_0+1=C,D=2,B=2] 

### Cost equations --> "Loop" of eval_speedFails2_bb1_in/3 
* CEs [7] --> Loop 6 
* CEs [8] --> Loop 7 
* CEs [6] --> Loop 8 

#### Loops of eval_speedFails2_bb1_in/3 
* Loop 6: eval_speedFails2_bb1_in(V_n,V_i_0,B)->  eval_speedFails2_bb1_in(V_n,V_i_0',B')
                  [V_n>=V_i_0+1,V_i_0+1=V_i_0',B'=2,B=2] 
* Loop 7: eval_speedFails2_bb1_in(V_n,V_i_0,B)->  eval_speedFails2_bb1_in(V_n,V_i_0',B')
                  [V_i_0>=V_n+1,V_i_0+1=V_i_0',B'=2,B=2] 
* Loop 8: eval_speedFails2_bb1_in(A,A,B) [B=2] 

### Ranking functions of CR eval_speedFails2_bb1_in(V_n,V_i_0,B) 
* RF of phase [6]: [V_n-V_i_0]

#### Partial ranking functions of CR eval_speedFails2_bb1_in(V_n,V_i_0,B) 
* Partial RF of phase [6]:
  - RF of loop [6:1]:
    V_n-V_i_0


### Resulting Chains:eval_speedFails2_bb1_in(V_n,V_i_0,B) 
* [[7]]...
* [[6],8]
* [8]


### Specialization of cost equations eval_speedFails2_4/3 
* CE 2 is refined into CE [9,10,11] 


#### Refined cost equations eval_speedFails2_4/3 
* CE 9: eval_speedFails2_4(V_x,V_n,B) = 1+ eval_speedFails2_bb1_in(V_n,V_x,C):[[7]]
     [V_x>=V_n+1,C=2] 
* CE 10: eval_speedFails2_4(V_x,V_n,B) = 1+ eval_speedFails2_bb1_in(V_n,V_x,C):[[6],8]
     [V_n>=V_x+1,C=2] 
* CE 11: eval_speedFails2_4(A,A,B) = 1+ eval_speedFails2_bb1_in(A,A,C):[8]
     [C=2] 

### Cost equations --> "Loop" of eval_speedFails2_4/3 
* CEs [10] --> Loop 9 
* CEs [11] --> Loop 10 
* CEs [9] --> Loop 11 

#### Loops of eval_speedFails2_4/3 
* Loop 9: eval_speedFails2_4(V_x,V_n,B) [V_n>=V_x+1] 
* Loop 10: eval_speedFails2_4(A,A,B) [] 
* Loop 11: eval_speedFails2_4(V_x,V_n,B) [V_x>=V_n+1] 

### Ranking functions of CR eval_speedFails2_4(V_x,V_n,B) 

#### Partial ranking functions of CR eval_speedFails2_4(V_x,V_n,B) 


### Resulting Chains:eval_speedFails2_4(V_x,V_n,B) 
* [11]...
* [10]
* [9]


### Specialization of cost equations eval_speedFails2_start/3 
* CE 1 is refined into CE [12,13,14] 


#### Refined cost equations eval_speedFails2_start/3 
* CE 12: eval_speedFails2_start(V_x,V_n,B) = 0+ eval_speedFails2_4(V_x,V_n,B):[11]
     [V_x>=V_n+1] 
* CE 13: eval_speedFails2_start(A,A,B) = 0+ eval_speedFails2_4(A,A,B):[10]
     [] 
* CE 14: eval_speedFails2_start(V_x,V_n,B) = 0+ eval_speedFails2_4(V_x,V_n,B):[9]
     [V_n>=V_x+1] 

### Cost equations --> "Loop" of eval_speedFails2_start/3 
* CEs [14] --> Loop 12 
* CEs [13] --> Loop 13 
* CEs [12] --> Loop 14 

#### Loops of eval_speedFails2_start/3 
* Loop 12: eval_speedFails2_start(V_x,V_n,B) [V_n>=V_x+1] 
* Loop 13: eval_speedFails2_start(A,A,B) [] 
* Loop 14: eval_speedFails2_start(V_x,V_n,B) [V_x>=V_n+1] 

### Ranking functions of CR eval_speedFails2_start(V_x,V_n,B) 

#### Partial ranking functions of CR eval_speedFails2_start(V_x,V_n,B) 


### Resulting Chains:eval_speedFails2_start(V_x,V_n,B) 
* [14]...
* [13]
* [12]


Computing Bounds
=====================================

#### Cost of loops [7] 

 * loop 7:eval_speedFails2_bb1_in(V_n,V_i_0,B) -> [eval_speedFails2_bb1_in(V_n',V_i_0',B')] 
1
#### Cost of phase [7]:eval_speedFails2_bb1_in(V_n,V_i_0,B) -> [eval_speedFails2_bb1_in(V_n',V_i_0',B')] 
1*it(7)+0
#### Cost of loops [6] 

 * loop 6:eval_speedFails2_bb1_in(V_n,V_i_0,B) -> [eval_speedFails2_bb1_in(V_n',V_i_0',B')] 
1
#### Cost of phase [6]:eval_speedFails2_bb1_in(V_n,V_i_0,B) -> [eval_speedFails2_bb1_in(V_n',V_i_0',B')] 
1*it(6)+0
  Such that:it(6) =< V_n-V_i_0
it(6) =< V_n-V_i_0-V_n'+V_i_0'

#### Cost of chains of eval_speedFails2_bb1_in(V_n,V_i_0,B):
* Chain [[7]]...: 1*it(7)+0
  with precondition: [V_i_0>=V_n+1,B=2] 

* Chain [[6],8]: 1*it(6)+0
  Such that:it(6) =< V_n-V_i_0

  with precondition: [B=2,V_n>=V_i_0+1] 

* Chain [8]: 0
  with precondition: [B=2,V_i_0=V_n] 


#### Cost of chains of eval_speedFails2_4(V_x,V_n,B):
* Chain [11]...: 1*s(1)+1
  with precondition: [V_x>=V_n+1] 

* Chain [10]: 1
  with precondition: [V_n=V_x] 

* Chain [9]: 1*s(2)+1
  Such that:s(2) =< -V_x+V_n

  with precondition: [V_n>=V_x+1] 


#### Cost of chains of eval_speedFails2_start(V_x,V_n,B):
* Chain [14]...: 1*s(3)+1
  with precondition: [V_x>=V_n+1] 

* Chain [13]: 1
  with precondition: [V_n=V_x] 

* Chain [12]: 1*s(4)+1
  Such that:s(4) =< -V_x+V_n

  with precondition: [V_n>=V_x+1] 


Closed-form bounds of eval_speedFails2_start(V_x,V_n,B): 
-------------------------------------
* Chain [14]... with precondition: [V_x>=V_n+1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [13] with precondition: [V_n=V_x] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [12] with precondition: [V_n>=V_x+1] 
    - Upper bound: -V_x+V_n+1 
    - Complexity: n 

### Maximum cost of eval_speedFails2_start(V_x,V_n,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 24 ms.
* Invariants computed in 33 ms.
   - Backward Invariants 12 ms.
   - Transitive Invariants 9 ms.
* Refinement performed in 51 ms.
* Termination proved in 10 ms.
* Upper bounds computed in 49 ms.
   - Equation cost structures 20 ms.
   - Phase cost structures 15 ms.
   - Chain cost structures 13 ms.
   - Solving cost expressions 2 ms.
* Total analysis performed in 206 ms.


Warning: Ignored call to eval_insertsort_stop/1 in equation eval_insertsort_bb7_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_insertsort_bb3_in/9,eval_insertsort_bb4_in/9,eval_insertsort_bb5_in/9]
1. recursive  : [eval_insertsort_25/6,eval_insertsort_26/6,eval_insertsort_bb1_in/3,eval_insertsort_bb2_in/3,eval_insertsort_bb6_in/5,loop_cont_eval_insertsort_bb3_in/6]
2. non_recursive  : [eval_insertsort_bb7_in/1]
3. non_recursive  : [loop_cont_eval_insertsort_bb1_in/2]
4. non_recursive  : [eval_insertsort_6/2]
5. non_recursive  : [eval_insertsort_5/2]
6. non_recursive  : [eval_insertsort_4/2]
7. non_recursive  : [eval_insertsort_3/2]
8. non_recursive  : [eval_insertsort_2/2]
9. non_recursive  : [eval_insertsort_1/2]
10. non_recursive  : [eval_insertsort_0/2]
11. non_recursive  : [eval_insertsort_bb0_in/2]
12. non_recursive  : [eval_insertsort_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_insertsort_bb3_in/9
1. SCC is partially evaluated into eval_insertsort_bb1_in/3
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_insertsort_6/2
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into eval_insertsort_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_insertsort_bb3_in/9 
* CE 5 is refined into CE [8] 
* CE 7 is refined into CE [9] 
* CE 6 is refined into CE [10] 


#### Refined cost equations eval_insertsort_bb3_in/9 
* CE 8: eval_insertsort_bb3_in(A,B,C,D,E,A,B,C,D) = 0
     [B>=D+1,A>=B+1,D>=0,E=2] 
* CE 9: eval_insertsort_bb3_in(A,B,C,D,E,A,B,C,D) = 0
     [B>=D+1,A>=B+1,0>=D+1,E=2] 
* CE 10: eval_insertsort_bb3_in(V_length,V_i_0,V_3,V_j_0,B,C,D,E,F) = 1+ eval_insertsort_bb3_in(V_length,V_i_0,V_3,G,H,C,D,E,F)
     [V_i_0>=V_j_0+1,V_length>=V_i_0+1,V_j_0>=0,V_j_0=G+1,H=2,B=2] 

### Cost equations --> "Loop" of eval_insertsort_bb3_in/9 
* CEs [10] --> Loop 8 
* CEs [8] --> Loop 9 
* CEs [9] --> Loop 10 

#### Loops of eval_insertsort_bb3_in/9 
* Loop 8: eval_insertsort_bb3_in(V_length,V_i_0,V_3,V_j_0,B,C,D,E,F)->  eval_insertsort_bb3_in(V_length,V_i_0,V_3,V_j_0',B',C,D,E,F)
                  [V_i_0>=V_j_0+1,V_length>=V_i_0+1,V_j_0>=0,V_j_0=V_j_0'+1,B'=2,B=2] 
* Loop 9: eval_insertsort_bb3_in(A,B,C,D,E,A,B,C,D) [B>=D+1,A>=B+1,D>=0,E=2] 
* Loop 10: eval_insertsort_bb3_in(A,B,C,D,E,A,B,C,D) [B>=D+1,A>=B+1,0>=D+1,E=2] 

### Ranking functions of CR eval_insertsort_bb3_in(V_length,V_i_0,V_3,V_j_0,B,C,D,E,F) 
* RF of phase [8]: [V_j_0+1]

#### Partial ranking functions of CR eval_insertsort_bb3_in(V_length,V_i_0,V_3,V_j_0,B,C,D,E,F) 
* Partial RF of phase [8]:
  - RF of loop [8:1]:
    V_j_0+1


### Resulting Chains:eval_insertsort_bb3_in(V_length,V_i_0,V_3,V_j_0,B,C,D,E,F) 
* [[8],10]
* [[8],9]
* [10]
* [9]


### Specialization of cost equations eval_insertsort_bb1_in/3 
* CE 4 is refined into CE [11] 
* CE 3 is refined into CE [12,13,14,15] 


#### Refined cost equations eval_insertsort_bb1_in/3 
* CE 11: eval_insertsort_bb1_in(V_length,V_i_0,B) = 0
     [V_i_0>=V_length,B=3] 
* CE 12: eval_insertsort_bb1_in(V_length,V_i_0,B) = 2+ eval_insertsort_bb3_in(V_length,V_i_0,C,D,E,V_length,V_i_0,C,F):[[8],10]+ eval_insertsort_bb1_in(V_length,G,H)
     [V_length>=V_i_0+1,V_i_0>=1,V_i_0+1=G,V_i_0=D+1,H=3,F+1=0,E=2,B=3] 
* CE 13: eval_insertsort_bb1_in(V_length,V_i_0,B) = 2+ eval_insertsort_bb3_in(V_length,V_i_0,C,D,E,V_length,V_i_0,C,F):[[8],9]+ eval_insertsort_bb1_in(V_length,G,H)
     [V_i_0>=F+2,V_length>=V_i_0+1,F>=0,V_i_0+1=G,V_i_0=D+1,H=3,E=2,B=3] 
* CE 14: eval_insertsort_bb1_in(V_length,V_i_0,B) = 2+ eval_insertsort_bb3_in(V_length,V_i_0,C,D,E,V_length,V_i_0,C,F):[10]+ eval_insertsort_bb1_in(V_length,G,H)
     [V_length>=V_i_0+1,0>=V_i_0,V_i_0+1=G,V_i_0=F+1,V_i_0=D+1,H=3,E=2,B=3] 
* CE 15: eval_insertsort_bb1_in(V_length,V_i_0,B) = 2+ eval_insertsort_bb3_in(V_length,V_i_0,C,D,E,V_length,V_i_0,C,F):[9]+ eval_insertsort_bb1_in(V_length,G,H)
     [V_length>=V_i_0+1,V_i_0>=1,V_i_0+1=G,V_i_0=F+1,V_i_0=D+1,H=3,E=2,B=3] 

### Cost equations --> "Loop" of eval_insertsort_bb1_in/3 
* CEs [13] --> Loop 11 
* CEs [15] --> Loop 12 
* CEs [12] --> Loop 13 
* CEs [14] --> Loop 14 
* CEs [11] --> Loop 15 

#### Loops of eval_insertsort_bb1_in/3 
* Loop 11: eval_insertsort_bb1_in(V_length,V_i_0,B)->  eval_insertsort_bb1_in(V_length,V_i_0',B')
                  [V_length>=V_i_0',V_i_0'>=3,V_i_0'=V_i_0+1,B'=3,B=3] 
* Loop 12: eval_insertsort_bb1_in(V_length,V_i_0,B)->  eval_insertsort_bb1_in(V_length,V_i_0',B')
                  [V_length>=V_i_0',V_i_0'>=2,V_i_0'=V_i_0+1,B'=3,B=3] 
* Loop 13: eval_insertsort_bb1_in(V_length,V_i_0,B)->  eval_insertsort_bb1_in(V_length,V_i_0',B')
                  [V_length>=V_i_0',V_i_0'>=2,V_i_0'=V_i_0+1,B'=3,B=3] 
* Loop 14: eval_insertsort_bb1_in(V_length,V_i_0,B)->  eval_insertsort_bb1_in(V_length,V_i_0',B')
                  [V_length>=V_i_0',1>=V_i_0',V_i_0'=V_i_0+1,B'=3,B=3] 
* Loop 15: eval_insertsort_bb1_in(V_length,V_i_0,B) [V_i_0>=V_length,B=3] 

### Ranking functions of CR eval_insertsort_bb1_in(V_length,V_i_0,B) 
* RF of phase [11,12,13]: [V_length-V_i_0]

#### Partial ranking functions of CR eval_insertsort_bb1_in(V_length,V_i_0,B) 
* Partial RF of phase [11,12,13]:
  - RF of loop [11:1,12:1,13:1]:
    V_length-V_i_0


### Resulting Chains:eval_insertsort_bb1_in(V_length,V_i_0,B) 
* [[11,12,13],15]
* [15]


### Specialization of cost equations eval_insertsort_6/2 
* CE 2 is refined into CE [16,17] 


#### Refined cost equations eval_insertsort_6/2 
* CE 16: eval_insertsort_6(V_length,B) = 1+ eval_insertsort_bb1_in(V_length,C,D):[[11,12,13],15]
     [V_length>=2,D=3,C=1] 
* CE 17: eval_insertsort_6(V_length,B) = 1+ eval_insertsort_bb1_in(V_length,C,D):[15]
     [1>=V_length,D=3,C=1] 

### Cost equations --> "Loop" of eval_insertsort_6/2 
* CEs [16] --> Loop 16 
* CEs [17] --> Loop 17 

#### Loops of eval_insertsort_6/2 
* Loop 16: eval_insertsort_6(V_length,B) [V_length>=2] 
* Loop 17: eval_insertsort_6(V_length,B) [1>=V_length] 

### Ranking functions of CR eval_insertsort_6(V_length,B) 

#### Partial ranking functions of CR eval_insertsort_6(V_length,B) 


### Resulting Chains:eval_insertsort_6(V_length,B) 
* [17]
* [16]


### Specialization of cost equations eval_insertsort_start/2 
* CE 1 is refined into CE [18,19] 


#### Refined cost equations eval_insertsort_start/2 
* CE 18: eval_insertsort_start(V_length,B) = 0+ eval_insertsort_6(V_length,B):[17]
     [1>=V_length] 
* CE 19: eval_insertsort_start(V_length,B) = 0+ eval_insertsort_6(V_length,B):[16]
     [V_length>=2] 

### Cost equations --> "Loop" of eval_insertsort_start/2 
* CEs [19] --> Loop 18 
* CEs [18] --> Loop 19 

#### Loops of eval_insertsort_start/2 
* Loop 18: eval_insertsort_start(V_length,B) [V_length>=2] 
* Loop 19: eval_insertsort_start(V_length,B) [1>=V_length] 

### Ranking functions of CR eval_insertsort_start(V_length,B) 

#### Partial ranking functions of CR eval_insertsort_start(V_length,B) 


### Resulting Chains:eval_insertsort_start(V_length,B) 
* [19]
* [18]


Computing Bounds
=====================================

#### Cost of loops [8] 

 * loop 8:eval_insertsort_bb3_in(V_length,V_i_0,V_3,V_j_0,B,C,D,E,F) -> [eval_insertsort_bb3_in(V_length',V_i_0',V_3',V_j_0',B',C',D',E',F')] 
1
#### Cost of phase [8]:eval_insertsort_bb3_in(V_length,V_i_0,V_3,V_j_0,B,C,D,E,F) -> [eval_insertsort_bb3_in(V_length',V_i_0',V_3',V_j_0',B',C',D',E',F')] 
1*it(8)+0
  Such that:it(8) =< V_j_0+1
it(8) =< V_j_0-V_j_0'

#### Cost of phase [8]:eval_insertsort_bb3_in(V_length,V_i_0,V_3,V_j_0,B,C,D,E,F) -> [eval_insertsort_bb3_in(V_length',V_i_0',V_3',V_j_0',B',C',D',E',F')] 
1*it(8)+0
  Such that:it(8) =< V_j_0+1
it(8) =< V_j_0-V_j_0'

#### Cost of chains of eval_insertsort_bb3_in(V_length,V_i_0,V_3,V_j_0,B,C,D,E,F):
* Chain [[8],10]: 1*it(8)+0
  Such that:it(8) =< V_j_0+1

  with precondition: [B=2,F+1=0,V_length=C,V_i_0=D,V_3=E,V_j_0>=0,V_length>=V_i_0+1,V_i_0>=V_j_0+1] 

* Chain [[8],9]: 1*it(8)+0
  Such that:it(8) =< V_j_0-F

  with precondition: [B=2,V_length=C,V_i_0=D,V_3=E,F>=0,V_length>=V_i_0+1,V_i_0>=V_j_0+1,V_j_0>=F+1] 

* Chain [10]: 0
  with precondition: [B=2,E=V_3,V_length=C,V_i_0=D,V_j_0=F,0>=V_j_0+1,V_length>=V_i_0+1,V_i_0>=V_j_0+1] 

* Chain [9]: 0
  with precondition: [B=2,E=V_3,V_length=C,V_i_0=D,V_j_0=F,V_j_0>=0,V_length>=V_i_0+1,V_i_0>=V_j_0+1] 


#### Cost of loops [11,12,13] 

 * loop 11:eval_insertsort_bb1_in(V_length,V_i_0,B) -> [eval_insertsort_bb1_in(V_length',V_i_0',B')] 
1*s(2)+2
  Such that:s(2) =< V_i_0'

 * loop 12:eval_insertsort_bb1_in(V_length,V_i_0,B) -> [eval_insertsort_bb1_in(V_length',V_i_0',B')] 
2
 * loop 13:eval_insertsort_bb1_in(V_length,V_i_0,B) -> [eval_insertsort_bb1_in(V_length',V_i_0',B')] 
1*s(4)+2
  Such that:s(4) =< V_i_0'

#### Cost of phase [11,12,13]:eval_insertsort_bb1_in(V_length,V_i_0,B) -> [eval_insertsort_bb1_in(V_length',V_i_0',B')] 
6*it(11)+1*s(5)+1*s(6)+0
  Such that:aux(1) =< V_length
aux(3) =< V_length-V_i_0
aux(4) =< V_length-V_i_0-V_length'+V_i_0'
it(11) =< aux(3)
it(11) =< aux(4)
aux(2) =< aux(1)
s(5) =< it(11)*aux(1)
s(6) =< it(11)*aux(2)

#### Cost of chains of eval_insertsort_bb1_in(V_length,V_i_0,B):
* Chain [[11,12,13],15]: 6*it(11)+1*s(5)+1*s(6)+0
  Such that:aux(1) =< V_length
aux(5) =< V_length-V_i_0
it(11) =< aux(5)
aux(2) =< aux(1)
s(5) =< it(11)*aux(1)
s(6) =< it(11)*aux(2)

  with precondition: [B=3,V_i_0>=1,V_length>=V_i_0+1] 

* Chain [15]: 0
  with precondition: [B=3,V_i_0>=1,V_i_0>=V_length] 


#### Cost of chains of eval_insertsort_6(V_length,B):
* Chain [17]: 1
  with precondition: [1>=V_length] 

* Chain [16]: 6*s(9)+1*s(11)+1*s(12)+1
  Such that:aux(6) =< V_length
s(9) =< aux(6)
s(10) =< aux(6)
s(11) =< s(9)*aux(6)
s(12) =< s(9)*s(10)

  with precondition: [V_length>=2] 


#### Cost of chains of eval_insertsort_start(V_length,B):
* Chain [19]: 1
  with precondition: [1>=V_length] 

* Chain [18]: 6*s(14)+1*s(16)+1*s(17)+1
  Such that:s(13) =< V_length
s(14) =< s(13)
s(15) =< s(13)
s(16) =< s(14)*s(13)
s(17) =< s(14)*s(15)

  with precondition: [V_length>=2] 


Closed-form bounds of eval_insertsort_start(V_length,B): 
-------------------------------------
* Chain [19] with precondition: [1>=V_length] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [18] with precondition: [V_length>=2] 
    - Upper bound: 6*V_length+1+2*V_length*V_length 
    - Complexity: n^2 

### Maximum cost of eval_insertsort_start(V_length,B): nat(V_length)*2*nat(V_length)+nat(V_length)*6+1 
Asymptotic class: n^2 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 63 ms.
* Invariants computed in 127 ms.
   - Backward Invariants 57 ms.
   - Transitive Invariants 33 ms.
* Refinement performed in 140 ms.
* Termination proved in 23 ms.
* Upper bounds computed in 193 ms.
   - Equation cost structures 53 ms.
   - Phase cost structures 102 ms.
   - Chain cost structures 57 ms.
   - Solving cost expressions 2 ms.
* Total analysis performed in 627 ms.


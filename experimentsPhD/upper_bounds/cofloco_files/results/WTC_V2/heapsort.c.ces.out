Warning: Ignored call to eval_heapsort_stop/1 in equation eval_heapsort_bb11_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_heapsort_14/5,eval_heapsort_15/6,eval_heapsort_17/6,eval_heapsort_18/7,eval_heapsort_bb10_in/7,eval_heapsort_bb1_in/3,eval_heapsort_bb2_in/3,eval_heapsort_bb3_in/5,eval_heapsort_bb4_in/5,eval_heapsort_bb5_in/6,eval_heapsort_bb6_in/6,eval_heapsort_bb7_in/6,eval_heapsort_bb8_in/7,eval_heapsort_bb9_in/7]
1. non_recursive  : [eval_heapsort_bb11_in/1]
2. non_recursive  : [loop_cont_eval_heapsort_bb1_in/2]
3. non_recursive  : [eval_heapsort_9/2]
4. non_recursive  : [eval_heapsort_8/2]
5. non_recursive  : [eval_heapsort_7/2]
6. non_recursive  : [eval_heapsort_6/2]
7. non_recursive  : [eval_heapsort_5/2]
8. non_recursive  : [eval_heapsort_4/2]
9. non_recursive  : [eval_heapsort_3/2]
10. non_recursive  : [eval_heapsort_2/2]
11. non_recursive  : [eval_heapsort_1/2]
12. non_recursive  : [eval_heapsort_0/2]
13. non_recursive  : [eval_heapsort_bb0_in/2]
14. non_recursive  : [eval_heapsort_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_heapsort_bb1_in/3
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into eval_heapsort_9/2
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is partially evaluated into eval_heapsort_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_heapsort_bb1_in/3 
* CE 7 is refined into CE [11] 
* CE 3 is refined into CE [12] 
* CE 10 is discarded (unfeasible) 
* CE 9 is refined into CE [13] 
* CE 5 is refined into CE [14] 
* CE 6 is refined into CE [15] 
* CE 8 is refined into CE [16] 
* CE 4 is refined into CE [17] 


#### Refined cost equations eval_heapsort_bb1_in/3 
* CE 11: eval_heapsort_bb1_in(V_size,V_i_0,B) = 0
     [V_size>=2*V_i_0+1,V_i_0>=1,B=2] 
* CE 12: eval_heapsort_bb1_in(V_size,V_i_0,B) = 0
     [2*V_i_0>=V_size+1,V_size>=1,B=2] 
* CE 13: eval_heapsort_bb1_in(V_size,V_i_0,B) = 0
     [0>=V_size,B=2,V_i_0=1] 
* CE 14: eval_heapsort_bb1_in(V_size,V_i_0,B) = 0
     [V_size>=2,V_size=2*V_i_0,B=2] 
* CE 15: eval_heapsort_bb1_in(V_size,V_i_0,B) = 1+ eval_heapsort_bb1_in(V_size,C,D)
     [V_size>=C,C>=3,C=2*V_i_0+1,D=2,B=2] 
* CE 16: eval_heapsort_bb1_in(V_size,V_i_0,B) = 1+ eval_heapsort_bb1_in(V_size,C,D)
     [V_size>=C+1,C>=2,C=2*V_i_0,D=2,B=2] 
* CE 17: eval_heapsort_bb1_in(V_size,V_i_0,B) = 1+ eval_heapsort_bb1_in(V_size,V_size,C)
     [V_size>=2,V_size=2*V_i_0,C=2,B=2] 

### Cost equations --> "Loop" of eval_heapsort_bb1_in/3 
* CEs [15] --> Loop 11 
* CEs [16] --> Loop 12 
* CEs [17] --> Loop 13 
* CEs [11] --> Loop 14 
* CEs [12] --> Loop 15 
* CEs [14] --> Loop 16 
* CEs [13] --> Loop 17 

#### Loops of eval_heapsort_bb1_in/3 
* Loop 11: eval_heapsort_bb1_in(V_size,V_i_0,B)->  eval_heapsort_bb1_in(V_size,V_i_0',B')
                  [V_size>=V_i_0',V_i_0'>=3,V_i_0'=2*V_i_0+1,B'=2,B=2] 
* Loop 12: eval_heapsort_bb1_in(V_size,V_i_0,B)->  eval_heapsort_bb1_in(V_size,V_i_0',B')
                  [V_size>=V_i_0'+1,V_i_0'>=2,V_i_0'=2*V_i_0,B'=2,B=2] 
* Loop 13: eval_heapsort_bb1_in(V_size,V_i_0,B)->  eval_heapsort_bb1_in(V_size,V_size,A')
                  [V_size>=2,V_size=2*V_i_0,A'=2,B=2] 
* Loop 14: eval_heapsort_bb1_in(V_size,V_i_0,B) [V_size>=2*V_i_0+1,V_i_0>=1,B=2] 
* Loop 15: eval_heapsort_bb1_in(V_size,V_i_0,B) [2*V_i_0>=V_size+1,V_size>=1,B=2] 
* Loop 16: eval_heapsort_bb1_in(V_size,V_i_0,B) [V_size>=2,V_size=2*V_i_0,B=2] 
* Loop 17: eval_heapsort_bb1_in(V_size,V_i_0,B) [0>=V_size,B=2,V_i_0=1] 

### Ranking functions of CR eval_heapsort_bb1_in(V_size,V_i_0,B) 
* RF of phase [11,12]: [V_size/2-V_i_0]

#### Partial ranking functions of CR eval_heapsort_bb1_in(V_size,V_i_0,B) 
* Partial RF of phase [11,12]:
  - RF of loop [11:1]:
    V_size/4-V_i_0/2
  - RF of loop [12:1]:
    V_size/2-V_i_0


### Resulting Chains:eval_heapsort_bb1_in(V_size,V_i_0,B) 
* [[11,12],16]
* [[11,12],15]
* [[11,12],14]
* [[11,12],13,15]
* [17]
* [16]
* [15]
* [14]
* [13,15]


### Specialization of cost equations eval_heapsort_9/2 
* CE 2 is refined into CE [18,19,20,21,22,23,24,25,26] 


#### Refined cost equations eval_heapsort_9/2 
* CE 18: eval_heapsort_9(V_size,B) = 1+ eval_heapsort_bb1_in(V_size,C,D):[[11,12],16]
     [V_size>=4,D=2,C=1] 
* CE 19: eval_heapsort_9(V_size,B) = 1+ eval_heapsort_bb1_in(V_size,C,D):[[11,12],15]
     [V_size>=3,D=2,C=1] 
* CE 20: eval_heapsort_9(V_size,B) = 1+ eval_heapsort_bb1_in(V_size,C,D):[[11,12],14]
     [V_size>=5,D=2,C=1] 
* CE 21: eval_heapsort_9(V_size,B) = 1+ eval_heapsort_bb1_in(V_size,C,D):[[11,12],13,15]
     [V_size>=4,D=2,C=1] 
* CE 22: eval_heapsort_9(V_size,B) = 1+ eval_heapsort_bb1_in(V_size,C,D):[17]
     [0>=V_size,D=2,C=1] 
* CE 23: eval_heapsort_9(V_size,B) = 1+ eval_heapsort_bb1_in(C,D,E):[16]
     [E=2,D=1,C=2,V_size=2] 
* CE 24: eval_heapsort_9(V_size,B) = 1+ eval_heapsort_bb1_in(C,D,E):[15]
     [E=2,D=1,C=1,V_size=1] 
* CE 25: eval_heapsort_9(V_size,B) = 1+ eval_heapsort_bb1_in(V_size,C,D):[14]
     [V_size>=3,D=2,C=1] 
* CE 26: eval_heapsort_9(V_size,B) = 1+ eval_heapsort_bb1_in(C,D,E):[13,15]
     [E=2,D=1,C=2,V_size=2] 

### Cost equations --> "Loop" of eval_heapsort_9/2 
* CEs [20] --> Loop 18 
* CEs [21] --> Loop 19 
* CEs [18] --> Loop 20 
* CEs [25] --> Loop 21 
* CEs [19] --> Loop 22 
* CEs [22] --> Loop 23 
* CEs [26] --> Loop 24 
* CEs [23] --> Loop 25 
* CEs [24] --> Loop 26 

#### Loops of eval_heapsort_9/2 
* Loop 18: eval_heapsort_9(V_size,B) [V_size>=5] 
* Loop 19: eval_heapsort_9(V_size,B) [V_size>=4] 
* Loop 20: eval_heapsort_9(V_size,B) [V_size>=4] 
* Loop 21: eval_heapsort_9(V_size,B) [V_size>=3] 
* Loop 22: eval_heapsort_9(V_size,B) [V_size>=3] 
* Loop 23: eval_heapsort_9(V_size,B) [0>=V_size] 
* Loop 24: eval_heapsort_9(V_size,B) [V_size=2] 
* Loop 25: eval_heapsort_9(V_size,B) [V_size=2] 
* Loop 26: eval_heapsort_9(V_size,B) [V_size=1] 

### Ranking functions of CR eval_heapsort_9(V_size,B) 

#### Partial ranking functions of CR eval_heapsort_9(V_size,B) 


### Resulting Chains:eval_heapsort_9(V_size,B) 
* [26]
* [25]
* [24]
* [23]
* [22]
* [21]
* [20]
* [19]
* [18]


### Specialization of cost equations eval_heapsort_start/2 
* CE 1 is refined into CE [27,28,29,30,31,32,33,34,35] 


#### Refined cost equations eval_heapsort_start/2 
* CE 27: eval_heapsort_start(V_size,B) = 0+ eval_heapsort_9(C,B):[26]
     [C=1,V_size=1] 
* CE 28: eval_heapsort_start(V_size,B) = 0+ eval_heapsort_9(C,B):[25]
     [C=2,V_size=2] 
* CE 29: eval_heapsort_start(V_size,B) = 0+ eval_heapsort_9(C,B):[24]
     [C=2,V_size=2] 
* CE 30: eval_heapsort_start(V_size,B) = 0+ eval_heapsort_9(V_size,B):[23]
     [0>=V_size] 
* CE 31: eval_heapsort_start(V_size,B) = 0+ eval_heapsort_9(V_size,B):[22]
     [V_size>=3] 
* CE 32: eval_heapsort_start(V_size,B) = 0+ eval_heapsort_9(V_size,B):[21]
     [V_size>=3] 
* CE 33: eval_heapsort_start(V_size,B) = 0+ eval_heapsort_9(V_size,B):[20]
     [V_size>=4] 
* CE 34: eval_heapsort_start(V_size,B) = 0+ eval_heapsort_9(V_size,B):[19]
     [V_size>=4] 
* CE 35: eval_heapsort_start(V_size,B) = 0+ eval_heapsort_9(V_size,B):[18]
     [V_size>=5] 

### Cost equations --> "Loop" of eval_heapsort_start/2 
* CEs [35] --> Loop 27 
* CEs [34] --> Loop 28 
* CEs [33] --> Loop 29 
* CEs [32] --> Loop 30 
* CEs [31] --> Loop 31 
* CEs [30] --> Loop 32 
* CEs [29] --> Loop 33 
* CEs [28] --> Loop 34 
* CEs [27] --> Loop 35 

#### Loops of eval_heapsort_start/2 
* Loop 27: eval_heapsort_start(V_size,B) [V_size>=5] 
* Loop 28: eval_heapsort_start(V_size,B) [V_size>=4] 
* Loop 29: eval_heapsort_start(V_size,B) [V_size>=4] 
* Loop 30: eval_heapsort_start(V_size,B) [V_size>=3] 
* Loop 31: eval_heapsort_start(V_size,B) [V_size>=3] 
* Loop 32: eval_heapsort_start(V_size,B) [0>=V_size] 
* Loop 33: eval_heapsort_start(V_size,B) [V_size=2] 
* Loop 34: eval_heapsort_start(V_size,B) [V_size=2] 
* Loop 35: eval_heapsort_start(V_size,B) [V_size=1] 

### Ranking functions of CR eval_heapsort_start(V_size,B) 

#### Partial ranking functions of CR eval_heapsort_start(V_size,B) 


### Resulting Chains:eval_heapsort_start(V_size,B) 
* [35]
* [34]
* [33]
* [32]
* [31]
* [30]
* [29]
* [28]
* [27]


Computing Bounds
=====================================

#### Cost of loops [11,12] 

 * loop 11:eval_heapsort_bb1_in(V_size,V_i_0,B) -> [eval_heapsort_bb1_in(V_size',V_i_0',B')] 
1
 * loop 12:eval_heapsort_bb1_in(V_size,V_i_0,B) -> [eval_heapsort_bb1_in(V_size',V_i_0',B')] 
1
#### Cost of phase [11,12]:eval_heapsort_bb1_in(V_size,V_i_0,B) -> [eval_heapsort_bb1_in(V_size',V_i_0',B')] 
1*it(11)+1*it(12)+0
  Such that:it(11) =< V_size/4-V_i_0/2
it(11) =< V_size/4-V_i_0/2-V_size'/4+V_i_0'/2
aux(1) =< V_size/2-V_i_0
aux(2) =< V_size/2-V_i_0-V_size'/2+V_i_0'
it(11) =< aux(1)
it(12) =< aux(1)
it(11) =< aux(2)
it(12) =< aux(2)

#### Cost of phase [11,12]:eval_heapsort_bb1_in(V_size,V_i_0,B) -> [eval_heapsort_bb1_in(V_size',V_i_0',B')] 
1*it(11)+1*it(12)+0
  Such that:it(11) =< V_size/4-V_i_0/2
it(11) =< V_size/4-V_i_0/2-V_size'/4+V_i_0'/2
aux(1) =< V_size/2-V_i_0
aux(2) =< V_size/2-V_i_0-V_size'/2+V_i_0'
it(11) =< aux(1)
it(12) =< aux(1)
it(11) =< aux(2)
it(12) =< aux(2)

#### Cost of phase [11,12]:eval_heapsort_bb1_in(V_size,V_i_0,B) -> [eval_heapsort_bb1_in(V_size',V_i_0',B')] 
1*it(11)+1*it(12)+0
  Such that:it(11) =< V_size/4-V_i_0/2
it(11) =< V_size/4-V_i_0/2-V_size'/4+V_i_0'/2
aux(1) =< V_size/2-V_i_0
aux(2) =< V_size/2-V_i_0-V_size'/2+V_i_0'
it(11) =< aux(1)
it(12) =< aux(1)
it(11) =< aux(2)
it(12) =< aux(2)

#### Cost of phase [11,12]:eval_heapsort_bb1_in(V_size,V_i_0,B) -> [eval_heapsort_bb1_in(V_size',V_i_0',B')] 
1*it(11)+1*it(12)+0
  Such that:it(11) =< V_size/4-V_i_0/2
it(11) =< V_size/4-V_i_0/2-V_size'/4+V_i_0'/2
aux(1) =< V_size/2-V_i_0
aux(2) =< V_size/2-V_i_0-V_size'/2+V_i_0'
it(11) =< aux(1)
it(12) =< aux(1)
it(11) =< aux(2)
it(12) =< aux(2)

#### Cost of chains of eval_heapsort_bb1_in(V_size,V_i_0,B):
* Chain [[11,12],16]: 1*it(11)+1*it(12)+0
  Such that:it(11) =< V_size/4-V_i_0/2
aux(3) =< V_size/2-V_i_0
it(11) =< aux(3)
it(12) =< aux(3)

  with precondition: [B=2,V_i_0>=1,V_size>=4*V_i_0] 

* Chain [[11,12],15]: 1*it(11)+1*it(12)+0
  Such that:aux(2) =< V_size-V_i_0
aux(1) =< V_size/2-V_i_0
it(11) =< V_size/4-V_i_0/2
it(11) =< aux(1)
it(12) =< aux(1)
it(11) =< aux(2)
it(12) =< aux(2)

  with precondition: [B=2,V_i_0>=1,V_size>=2*V_i_0+1] 

* Chain [[11,12],14]: 1*it(11)+1*it(12)+0
  Such that:it(11) =< V_size/4-V_i_0/2
aux(4) =< V_size/2-V_i_0
it(11) =< aux(4)
it(12) =< aux(4)

  with precondition: [B=2,V_i_0>=1,V_size>=4*V_i_0+1] 

* Chain [[11,12],13,15]: 1*it(11)+1*it(12)+1
  Such that:it(11) =< V_size/4-V_i_0/2
aux(5) =< V_size/2-V_i_0
it(11) =< aux(5)
it(12) =< aux(5)

  with precondition: [B=2,V_i_0>=1,V_size>=4*V_i_0] 

* Chain [17]: 0
  with precondition: [V_i_0=1,B=2,0>=V_size] 

* Chain [16]: 0
  with precondition: [B=2,2*V_i_0=V_size,V_i_0>=1] 

* Chain [15]: 0
  with precondition: [B=2,V_size>=1,2*V_i_0>=V_size+1] 

* Chain [14]: 0
  with precondition: [B=2,V_i_0>=1,V_size>=2*V_i_0+1] 

* Chain [13,15]: 1
  with precondition: [B=2,V_size=2*V_i_0,V_size>=2] 


#### Cost of chains of eval_heapsort_9(V_size,B):
* Chain [26]: 1
  with precondition: [V_size=1] 

* Chain [25]: 1
  with precondition: [V_size=2] 

* Chain [24]: 2
  with precondition: [V_size=2] 

* Chain [23]: 1
  with precondition: [0>=V_size] 

* Chain [22]: 1*s(3)+1*s(4)+1
  Such that:s(1) =< V_size
s(2) =< V_size/2
s(3) =< V_size/4
s(3) =< s(2)
s(4) =< s(2)
s(3) =< s(1)
s(4) =< s(1)

  with precondition: [V_size>=3] 

* Chain [21]: 1
  with precondition: [V_size>=3] 

* Chain [20]: 1*s(5)+1*s(7)+1
  Such that:s(6) =< V_size/2
s(5) =< V_size/4
s(5) =< s(6)
s(7) =< s(6)

  with precondition: [V_size>=4] 

* Chain [19]: 1*s(8)+1*s(10)+2
  Such that:s(9) =< V_size/2
s(8) =< V_size/4
s(8) =< s(9)
s(10) =< s(9)

  with precondition: [V_size>=4] 

* Chain [18]: 1*s(11)+1*s(13)+1
  Such that:s(12) =< V_size/2
s(11) =< V_size/4
s(11) =< s(12)
s(13) =< s(12)

  with precondition: [V_size>=5] 


#### Cost of chains of eval_heapsort_start(V_size,B):
* Chain [35]: 1
  with precondition: [V_size=1] 

* Chain [34]: 1
  with precondition: [V_size=2] 

* Chain [33]: 2
  with precondition: [V_size=2] 

* Chain [32]: 1
  with precondition: [0>=V_size] 

* Chain [31]: 1*s(16)+1*s(17)+1
  Such that:s(14) =< V_size
s(15) =< V_size/2
s(16) =< V_size/4
s(16) =< s(15)
s(17) =< s(15)
s(16) =< s(14)
s(17) =< s(14)

  with precondition: [V_size>=3] 

* Chain [30]: 1
  with precondition: [V_size>=3] 

* Chain [29]: 1*s(19)+1*s(20)+1
  Such that:s(18) =< V_size/2
s(19) =< V_size/4
s(19) =< s(18)
s(20) =< s(18)

  with precondition: [V_size>=4] 

* Chain [28]: 1*s(22)+1*s(23)+2
  Such that:s(21) =< V_size/2
s(22) =< V_size/4
s(22) =< s(21)
s(23) =< s(21)

  with precondition: [V_size>=4] 

* Chain [27]: 1*s(25)+1*s(26)+1
  Such that:s(24) =< V_size/2
s(25) =< V_size/4
s(25) =< s(24)
s(26) =< s(24)

  with precondition: [V_size>=5] 


Closed-form bounds of eval_heapsort_start(V_size,B): 
-------------------------------------
* Chain [35] with precondition: [V_size=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [34] with precondition: [V_size=2] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [33] with precondition: [V_size=2] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [32] with precondition: [0>=V_size] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [31] with precondition: [V_size>=3] 
    - Upper bound: 3/4*V_size+1 
    - Complexity: n 
* Chain [30] with precondition: [V_size>=3] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [29] with precondition: [V_size>=4] 
    - Upper bound: 3/4*V_size+1 
    - Complexity: n 
* Chain [28] with precondition: [V_size>=4] 
    - Upper bound: 3/4*V_size+2 
    - Complexity: n 
* Chain [27] with precondition: [V_size>=5] 
    - Upper bound: 3/4*V_size+1 
    - Complexity: n 

### Maximum cost of eval_heapsort_start(V_size,B): nat(V_size/4)+nat(V_size/2)+2 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 95 ms.
* Invariants computed in 29 ms.
   - Backward Invariants 18 ms.
   - Transitive Invariants 3 ms.
* Refinement performed in 38 ms.
* Termination proved in 4 ms.
* Upper bounds computed in 52 ms.
   - Equation cost structures 18 ms.
   - Phase cost structures 8 ms.
   - Chain cost structures 18 ms.
   - Solving cost expressions 2 ms.
* Total analysis performed in 256 ms.


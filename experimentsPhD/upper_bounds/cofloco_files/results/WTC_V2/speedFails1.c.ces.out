Warning: Ignored call to eval_speedFails1_stop/1 in equation eval_speedFails1_bb3_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_speedFails1_bb1_in/4,eval_speedFails1_bb2_in/4]
1. non_recursive  : [eval_speedFails1_bb3_in/1]
2. non_recursive  : [loop_cont_eval_speedFails1_bb1_in/2]
3. non_recursive  : [eval_speedFails1_4/4]
4. non_recursive  : [eval_speedFails1_3/4]
5. non_recursive  : [eval_speedFails1_2/4]
6. non_recursive  : [eval_speedFails1_1/4]
7. non_recursive  : [eval_speedFails1_0/4]
8. non_recursive  : [eval_speedFails1_bb0_in/4]
9. non_recursive  : [eval_speedFails1_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_speedFails1_bb1_in/4
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into eval_speedFails1_4/4
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into eval_speedFails1_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_speedFails1_bb1_in/4 
* CE 4 is refined into CE [5] 
* CE 3 is refined into CE [6] 


#### Refined cost equations eval_speedFails1_bb1_in/4 
* CE 5: eval_speedFails1_bb1_in(V_n,V_m,V__0,B) = 0
     [V__0>=V_n+1,B=2] 
* CE 6: eval_speedFails1_bb1_in(V_n,V_m,V__0,B) = 1+ eval_speedFails1_bb1_in(V_n,V_m,C,D)
     [V_n>=V__0,V_m+V__0=C,D=2,B=2] 

### Cost equations --> "Loop" of eval_speedFails1_bb1_in/4 
* CEs [6] --> Loop 5 
* CEs [5] --> Loop 6 

#### Loops of eval_speedFails1_bb1_in/4 
* Loop 5: eval_speedFails1_bb1_in(V_n,V_m,V__0,B)->  eval_speedFails1_bb1_in(V_n,V_m,V__0',B')
                  [V_n>=V__0,V_m+V__0=V__0',B'=2,B=2] 
* Loop 6: eval_speedFails1_bb1_in(V_n,V_m,V__0,B) [V__0>=V_n+1,B=2] 

### Ranking functions of CR eval_speedFails1_bb1_in(V_n,V_m,V__0,B) 

#### Partial ranking functions of CR eval_speedFails1_bb1_in(V_n,V_m,V__0,B) 


### Resulting Chains:eval_speedFails1_bb1_in(V_n,V_m,V__0,B) 
* [[5]]...
* [[5],6]
* [6]


### Specialization of cost equations eval_speedFails1_4/4 
* CE 2 is refined into CE [7,8,9] 


#### Refined cost equations eval_speedFails1_4/4 
* CE 7: eval_speedFails1_4(V_i,V_n,V_m,B) = 1+ eval_speedFails1_bb1_in(V_n,V_m,V_i,C):[[5]]
     [V_n>=V_i,C=2] 
* CE 8: eval_speedFails1_4(V_i,V_n,V_m,B) = 1+ eval_speedFails1_bb1_in(V_n,V_m,V_i,C):[[5],6]
     [V_n>=V_i,V_m>=1,C=2] 
* CE 9: eval_speedFails1_4(V_i,V_n,V_m,B) = 1+ eval_speedFails1_bb1_in(V_n,V_m,V_i,C):[6]
     [V_i>=V_n+1,C=2] 

### Cost equations --> "Loop" of eval_speedFails1_4/4 
* CEs [9] --> Loop 7 
* CEs [8] --> Loop 8 
* CEs [7] --> Loop 9 

#### Loops of eval_speedFails1_4/4 
* Loop 7: eval_speedFails1_4(V_i,V_n,V_m,B) [V_i>=V_n+1] 
* Loop 8: eval_speedFails1_4(V_i,V_n,V_m,B) [V_n>=V_i,V_m>=1] 
* Loop 9: eval_speedFails1_4(V_i,V_n,V_m,B) [V_n>=V_i] 

### Ranking functions of CR eval_speedFails1_4(V_i,V_n,V_m,B) 

#### Partial ranking functions of CR eval_speedFails1_4(V_i,V_n,V_m,B) 


### Resulting Chains:eval_speedFails1_4(V_i,V_n,V_m,B) 
* [9]...
* [8]
* [7]


### Specialization of cost equations eval_speedFails1_start/4 
* CE 1 is refined into CE [10,11,12] 


#### Refined cost equations eval_speedFails1_start/4 
* CE 10: eval_speedFails1_start(V_i,V_n,V_m,B) = 0+ eval_speedFails1_4(V_i,V_n,V_m,B):[9]
     [V_n>=V_i] 
* CE 11: eval_speedFails1_start(V_i,V_n,V_m,B) = 0+ eval_speedFails1_4(V_i,V_n,V_m,B):[8]
     [V_n>=V_i,V_m>=1] 
* CE 12: eval_speedFails1_start(V_i,V_n,V_m,B) = 0+ eval_speedFails1_4(V_i,V_n,V_m,B):[7]
     [V_i>=V_n+1] 

### Cost equations --> "Loop" of eval_speedFails1_start/4 
* CEs [12] --> Loop 10 
* CEs [11] --> Loop 11 
* CEs [10] --> Loop 12 

#### Loops of eval_speedFails1_start/4 
* Loop 10: eval_speedFails1_start(V_i,V_n,V_m,B) [V_i>=V_n+1] 
* Loop 11: eval_speedFails1_start(V_i,V_n,V_m,B) [V_n>=V_i,V_m>=1] 
* Loop 12: eval_speedFails1_start(V_i,V_n,V_m,B) [V_n>=V_i] 

### Ranking functions of CR eval_speedFails1_start(V_i,V_n,V_m,B) 

#### Partial ranking functions of CR eval_speedFails1_start(V_i,V_n,V_m,B) 


### Resulting Chains:eval_speedFails1_start(V_i,V_n,V_m,B) 
* [12]...
* [11]
* [10]


Computing Bounds
=====================================

#### Cost of loops [5] 

 * loop 5:eval_speedFails1_bb1_in(V_n,V_m,V__0,B) -> [eval_speedFails1_bb1_in(V_n',V_m',V__0',B')] 
1
#### Cost of phase [5]:eval_speedFails1_bb1_in(V_n,V_m,V__0,B) -> [eval_speedFails1_bb1_in(V_n',V_m',V__0',B')] 
1*it(5)+0
#### Cost of phase [5]:eval_speedFails1_bb1_in(V_n,V_m,V__0,B) -> [eval_speedFails1_bb1_in(V_n',V_m',V__0',B')] 
1*it(5)+0
#### Cost of chains of eval_speedFails1_bb1_in(V_n,V_m,V__0,B):
* Chain [[5]]...: 1*it(5)+0
  with precondition: [V_n>=V__0,B=2] 

* Chain [[5],6]: 1*it(5)+0
  with precondition: [B=2,V_m>=1,V_n>=V__0] 

* Chain [6]: 0
  with precondition: [B=2,V__0>=V_n+1] 


#### Cost of chains of eval_speedFails1_4(V_i,V_n,V_m,B):
* Chain [9]...: 1*s(1)+1
  with precondition: [V_n>=V_i] 

* Chain [8]: 1*s(2)+1
  with precondition: [V_m>=1,V_n>=V_i] 

* Chain [7]: 1
  with precondition: [V_i>=V_n+1] 


#### Cost of chains of eval_speedFails1_start(V_i,V_n,V_m,B):
* Chain [12]...: 1*s(3)+1
  with precondition: [V_n>=V_i] 

* Chain [11]: 1*s(4)+1
  with precondition: [V_m>=1,V_n>=V_i] 

* Chain [10]: 1
  with precondition: [V_i>=V_n+1] 


Closed-form bounds of eval_speedFails1_start(V_i,V_n,V_m,B): 
-------------------------------------
* Chain [12]... with precondition: [V_n>=V_i] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [11] with precondition: [V_m>=1,V_n>=V_i] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [10] with precondition: [V_i>=V_n+1] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of eval_speedFails1_start(V_i,V_n,V_m,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 7 ms.
* Invariants computed in 9 ms.
   - Backward Invariants 5 ms.
   - Transitive Invariants 2 ms.
* Refinement performed in 14 ms.
* Termination proved in 1 ms.
* Upper bounds computed in 14 ms.
   - Equation cost structures 7 ms.
   - Phase cost structures 3 ms.
   - Chain cost structures 4 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 59 ms.


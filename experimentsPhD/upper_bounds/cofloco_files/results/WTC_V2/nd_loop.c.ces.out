Warning: Ignored call to eval_nd_loop_stop/1 in equation eval_nd_loop_bb2_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_nd_loop_4/2,eval_nd_loop_5/3,eval_nd_loop_bb1_in/2]
1. non_recursive  : [eval_nd_loop_bb2_in/1]
2. non_recursive  : [loop_cont_eval_nd_loop_bb1_in/2]
3. non_recursive  : [eval_nd_loop_3/1]
4. non_recursive  : [eval_nd_loop_2/1]
5. non_recursive  : [eval_nd_loop_1/1]
6. non_recursive  : [eval_nd_loop_0/1]
7. non_recursive  : [eval_nd_loop_bb0_in/1]
8. non_recursive  : [eval_nd_loop_start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_nd_loop_bb1_in/2
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into eval_nd_loop_3/1
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into eval_nd_loop_start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_nd_loop_bb1_in/2 
* CE 4 is refined into CE [5] 
* CE 3 is refined into CE [6] 


#### Refined cost equations eval_nd_loop_bb1_in/2 
* CE 5: eval_nd_loop_bb1_in(V_x_0,B) = 1+ eval_nd_loop_bb1_in(C,D)
     [V_x_0+2>=C,C>=V_x_0+1,V_x_0>=0,9>=C,D=2,B=2] 
* CE 6: eval_nd_loop_bb1_in(V_x_0,B) = 0
     [V_x_0>=0,B=2] 

### Cost equations --> "Loop" of eval_nd_loop_bb1_in/2 
* CEs [6] --> Loop 5 
* CEs [5] --> Loop 6 

#### Loops of eval_nd_loop_bb1_in/2 
* Loop 5: eval_nd_loop_bb1_in(V_x_0,B) [V_x_0>=0,B=2] 
* Loop 6: eval_nd_loop_bb1_in(V_x_0,B)->  eval_nd_loop_bb1_in(V_x_0',B')
                  [V_x_0+2>=V_x_0',V_x_0'>=V_x_0+1,V_x_0>=0,9>=V_x_0',B'=2,B=2] 

### Ranking functions of CR eval_nd_loop_bb1_in(V_x_0,B) 
* RF of phase [6]: [-V_x_0+9]

#### Partial ranking functions of CR eval_nd_loop_bb1_in(V_x_0,B) 
* Partial RF of phase [6]:
  - RF of loop [6:1]:
    -V_x_0+9


### Resulting Chains:eval_nd_loop_bb1_in(V_x_0,B) 
* [[6],5]
* [5]


### Specialization of cost equations eval_nd_loop_3/1 
* CE 2 is refined into CE [7,8] 


#### Refined cost equations eval_nd_loop_3/1 
* CE 7: eval_nd_loop_3(B) = 1+ eval_nd_loop_bb1_in(C,D):[[6],5]
     [D=2,C=0] 
* CE 8: eval_nd_loop_3(B) = 1+ eval_nd_loop_bb1_in(C,D):[5]
     [D=2,C=0] 

### Cost equations --> "Loop" of eval_nd_loop_3/1 
* CEs [8] --> Loop 7 
* CEs [7] --> Loop 8 

#### Loops of eval_nd_loop_3/1 
* Loop 7: eval_nd_loop_3(B) [] 
* Loop 8: eval_nd_loop_3(B) [] 

### Ranking functions of CR eval_nd_loop_3(B) 

#### Partial ranking functions of CR eval_nd_loop_3(B) 


### Resulting Chains:eval_nd_loop_3(B) 
* [8]
* [7]


### Specialization of cost equations eval_nd_loop_start/1 
* CE 1 is refined into CE [9,10] 


#### Refined cost equations eval_nd_loop_start/1 
* CE 9: eval_nd_loop_start(B) = 0+ eval_nd_loop_3(B):[8]
     [] 
* CE 10: eval_nd_loop_start(B) = 0+ eval_nd_loop_3(B):[7]
     [] 

### Cost equations --> "Loop" of eval_nd_loop_start/1 
* CEs [10] --> Loop 9 
* CEs [9] --> Loop 10 

#### Loops of eval_nd_loop_start/1 
* Loop 9: eval_nd_loop_start(B) [] 
* Loop 10: eval_nd_loop_start(B) [] 

### Ranking functions of CR eval_nd_loop_start(B) 

#### Partial ranking functions of CR eval_nd_loop_start(B) 


### Resulting Chains:eval_nd_loop_start(B) 
* [10]
* [9]


Computing Bounds
=====================================

#### Cost of loops [6] 

 * loop 6:eval_nd_loop_bb1_in(V_x_0,B) -> [eval_nd_loop_bb1_in(V_x_0',B')] 
1
#### Cost of phase [6]:eval_nd_loop_bb1_in(V_x_0,B) -> [eval_nd_loop_bb1_in(V_x_0',B')] 
1*it(6)+0
  Such that:it(6) =< -V_x_0+9
it(6) =< -V_x_0+V_x_0'

#### Cost of chains of eval_nd_loop_bb1_in(V_x_0,B):
* Chain [[6],5]: 1*it(6)+0
  Such that:it(6) =< -V_x_0+9

  with precondition: [B=2,8>=V_x_0,V_x_0>=0] 

* Chain [5]: 0
  with precondition: [B=2,V_x_0>=0] 


#### Cost of chains of eval_nd_loop_3(B):
* Chain [8]: 1*s(1)+1
  Such that:s(1) =< 9

  with precondition: [] 

* Chain [7]: 1
  with precondition: [] 


#### Cost of chains of eval_nd_loop_start(B):
* Chain [10]: 1*s(2)+1
  Such that:s(2) =< 9

  with precondition: [] 

* Chain [9]: 1
  with precondition: [] 


Closed-form bounds of eval_nd_loop_start(B): 
-------------------------------------
* Chain [10] with precondition: [] 
    - Upper bound: 10 
    - Complexity: constant 
* Chain [9] with precondition: [] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of eval_nd_loop_start(B): 10 
Asymptotic class: constant 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 5 ms.
* Invariants computed in 6 ms.
   - Backward Invariants 2 ms.
   - Transitive Invariants 2 ms.
* Refinement performed in 6 ms.
* Termination proved in 2 ms.
* Upper bounds computed in 8 ms.
   - Equation cost structures 2 ms.
   - Phase cost structures 2 ms.
   - Chain cost structures 3 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 39 ms.


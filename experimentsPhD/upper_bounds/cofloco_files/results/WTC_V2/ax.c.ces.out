Warning: Ignored call to eval_ax_stop/1 in equation eval_ax_bb5_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_ax_bb2_in/7,eval_ax_bb3_in/7]
1. recursive  : [eval_ax_12/5,eval_ax_13/5,eval_ax_bb1_in/3,eval_ax_bb4_in/4,loop_cont_eval_ax_bb2_in/5]
2. non_recursive  : [eval_ax_bb5_in/1]
3. non_recursive  : [loop_cont_eval_ax_bb1_in/2]
4. non_recursive  : [eval_ax_6/2]
5. non_recursive  : [eval_ax_5/2]
6. non_recursive  : [eval_ax_4/2]
7. non_recursive  : [eval_ax_3/2]
8. non_recursive  : [eval_ax_2/2]
9. non_recursive  : [eval_ax_1/2]
10. non_recursive  : [eval_ax_0/2]
11. non_recursive  : [eval_ax_bb0_in/2]
12. non_recursive  : [eval_ax_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_ax_bb2_in/7
1. SCC is partially evaluated into eval_ax_bb1_in/3
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_ax_6/2
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into eval_ax_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_ax_bb2_in/7 
* CE 7 is refined into CE [8] 
* CE 6 is refined into CE [9] 


#### Refined cost equations eval_ax_bb2_in/7 
* CE 8: eval_ax_bb2_in(A,B,C,D,A,B,C) = 0
     [C+1>=A,C>=0,D=2] 
* CE 9: eval_ax_bb2_in(V_n,V__0,V__01,B,C,D,E) = 1+ eval_ax_bb2_in(V_n,V__0,F,G,C,D,E)
     [V_n>=V__01+2,V__01>=0,V__01+1=F,G=2,B=2] 

### Cost equations --> "Loop" of eval_ax_bb2_in/7 
* CEs [9] --> Loop 8 
* CEs [8] --> Loop 9 

#### Loops of eval_ax_bb2_in/7 
* Loop 8: eval_ax_bb2_in(V_n,V__0,V__01,B,C,D,E)->  eval_ax_bb2_in(V_n,V__0,V__01',B',C,D,E)
                  [V_n>=V__01+2,V__01>=0,V__01+1=V__01',B'=2,B=2] 
* Loop 9: eval_ax_bb2_in(A,B,C,D,A,B,C) [C+1>=A,C>=0,D=2] 

### Ranking functions of CR eval_ax_bb2_in(V_n,V__0,V__01,B,C,D,E) 
* RF of phase [8]: [V_n-V__01-1]

#### Partial ranking functions of CR eval_ax_bb2_in(V_n,V__0,V__01,B,C,D,E) 
* Partial RF of phase [8]:
  - RF of loop [8:1]:
    V_n-V__01-1


### Resulting Chains:eval_ax_bb2_in(V_n,V__0,V__01,B,C,D,E) 
* [[8],9]
* [9]


### Specialization of cost equations eval_ax_bb1_in/3 
* CE 5 is refined into CE [10,11] 
* CE 4 is discarded (unfeasible) 
* CE 3 is refined into CE [12,13] 


#### Refined cost equations eval_ax_bb1_in/3 
* CE 10: eval_ax_bb1_in(V_n,V__0,B) = 2+ eval_ax_bb2_in(V_n,V__0,C,D,V_n,V__0,E):[[8],9]+ eval_ax_bb1_in(V_n,F,G)
     [V_n>=V__0+3,V_n>=2,V__0+1=F,V_n=E+1,G=3,D=2,C=0,B=3] 
* CE 11: eval_ax_bb1_in(V_n,V__0,B) = 2+ eval_ax_bb2_in(V_n,V__0,C,D,V_n,V__0,E):[9]+ eval_ax_bb1_in(V_n,F,G)
     [V_n>=V__0+3,1>=V_n,V__0+1=F,G=3,E=0,D=2,C=0,B=3] 
* CE 12: eval_ax_bb1_in(V_n,V__0,B) = 1+ eval_ax_bb2_in(V_n,V__0,C,D,V_n,V__0,E):[[8],9]
     [V__0+2>=V_n,V_n>=2,V_n=E+1,D=2,C=0,B=3] 
* CE 13: eval_ax_bb1_in(V_n,V__0,B) = 1+ eval_ax_bb2_in(V_n,V__0,C,D,V_n,V__0,E):[9]
     [V__0+2>=V_n,1>=V_n,E=0,D=2,C=0,B=3] 

### Cost equations --> "Loop" of eval_ax_bb1_in/3 
* CEs [12] --> Loop 10 
* CEs [13] --> Loop 11 
* CEs [10] --> Loop 12 
* CEs [11] --> Loop 13 

#### Loops of eval_ax_bb1_in/3 
* Loop 10: eval_ax_bb1_in(V_n,V__0,B) [V__0+2>=V_n,V_n>=2,B=3] 
* Loop 11: eval_ax_bb1_in(V_n,V__0,B) [V__0+2>=V_n,1>=V_n,B=3] 
* Loop 12: eval_ax_bb1_in(V_n,V__0,B)->  eval_ax_bb1_in(V_n,V__0',B')
                  [V_n>=V__0+3,V_n>=2,V__0+1=V__0',B'=3,B=3] 
* Loop 13: eval_ax_bb1_in(V_n,V__0,B)->  eval_ax_bb1_in(V_n,V__0',B')
                  [V_n>=V__0+3,1>=V_n,V__0+1=V__0',B'=3,B=3] 

### Ranking functions of CR eval_ax_bb1_in(V_n,V__0,B) 
* RF of phase [12]: [V_n-V__0-2]

#### Partial ranking functions of CR eval_ax_bb1_in(V_n,V__0,B) 
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    V_n-V__0-2


### Resulting Chains:eval_ax_bb1_in(V_n,V__0,B) 
* [[12],10]
* [11]
* [10]


### Specialization of cost equations eval_ax_6/2 
* CE 2 is refined into CE [14,15,16] 


#### Refined cost equations eval_ax_6/2 
* CE 14: eval_ax_6(V_n,B) = 1+ eval_ax_bb1_in(V_n,C,D):[[12],10]
     [V_n>=3,D=3,C=0] 
* CE 15: eval_ax_6(V_n,B) = 1+ eval_ax_bb1_in(V_n,C,D):[11]
     [1>=V_n,D=3,C=0] 
* CE 16: eval_ax_6(V_n,B) = 1+ eval_ax_bb1_in(C,D,E):[10]
     [E=3,D=0,C=2,V_n=2] 

### Cost equations --> "Loop" of eval_ax_6/2 
* CEs [14] --> Loop 14 
* CEs [15] --> Loop 15 
* CEs [16] --> Loop 16 

#### Loops of eval_ax_6/2 
* Loop 14: eval_ax_6(V_n,B) [V_n>=3] 
* Loop 15: eval_ax_6(V_n,B) [1>=V_n] 
* Loop 16: eval_ax_6(V_n,B) [V_n=2] 

### Ranking functions of CR eval_ax_6(V_n,B) 

#### Partial ranking functions of CR eval_ax_6(V_n,B) 


### Resulting Chains:eval_ax_6(V_n,B) 
* [16]
* [15]
* [14]


### Specialization of cost equations eval_ax_start/4 
* CE 1 is refined into CE [17,18,19] 


#### Refined cost equations eval_ax_start/4 
* CE 17: eval_ax_start(V_i,V_j,V_n,B) = 0+ eval_ax_6(C,B):[16]
     [C=2,V_n=2] 
* CE 18: eval_ax_start(V_i,V_j,V_n,B) = 0+ eval_ax_6(V_n,B):[15]
     [1>=V_n] 
* CE 19: eval_ax_start(V_i,V_j,V_n,B) = 0+ eval_ax_6(V_n,B):[14]
     [V_n>=3] 

### Cost equations --> "Loop" of eval_ax_start/4 
* CEs [19] --> Loop 17 
* CEs [18] --> Loop 18 
* CEs [17] --> Loop 19 

#### Loops of eval_ax_start/4 
* Loop 17: eval_ax_start(V_i,V_j,V_n,B) [V_n>=3] 
* Loop 18: eval_ax_start(V_i,V_j,V_n,B) [1>=V_n] 
* Loop 19: eval_ax_start(V_i,V_j,V_n,B) [V_n=2] 

### Ranking functions of CR eval_ax_start(V_i,V_j,V_n,B) 

#### Partial ranking functions of CR eval_ax_start(V_i,V_j,V_n,B) 


### Resulting Chains:eval_ax_start(V_i,V_j,V_n,B) 
* [19]
* [18]
* [17]


Computing Bounds
=====================================

#### Cost of loops [8] 

 * loop 8:eval_ax_bb2_in(V_n,V__0,V__01,B,C,D,E) -> [eval_ax_bb2_in(V_n',V__0',V__01',B',C',D',E')] 
1
#### Cost of phase [8]:eval_ax_bb2_in(V_n,V__0,V__01,B,C,D,E) -> [eval_ax_bb2_in(V_n',V__0',V__01',B',C',D',E')] 
1*it(8)+0
  Such that:it(8) =< V_n-V__01
it(8) =< V_n-V__01-V_n'+V__01'

#### Cost of chains of eval_ax_bb2_in(V_n,V__0,V__01,B,C,D,E):
* Chain [[8],9]: 1*it(8)+0
  Such that:it(8) =< V_n-V__01

  with precondition: [B=2,V_n=C,V__0=D,V_n=E+1,V__01>=0,V_n>=V__01+2] 

* Chain [9]: 0
  with precondition: [B=2,D=V__0,V_n=C,V__01=E,V__01>=0,V__01+1>=V_n] 


#### Cost of loops [12] 

 * loop 12:eval_ax_bb1_in(V_n,V__0,B) -> [eval_ax_bb1_in(V_n',V__0',B')] 
1*s(3)+2
  Such that:s(3) =< V_n

#### Cost of phase [12]:eval_ax_bb1_in(V_n,V__0,B) -> [eval_ax_bb1_in(V_n',V__0',B')] 
2*it(12)+1*s(4)+0
  Such that:aux(1) =< V_n
it(12) =< V_n-V__0
it(12) =< V_n-V__0-V_n'+V__0'
s(4) =< it(12)*aux(1)

#### Cost of chains of eval_ax_bb1_in(V_n,V__0,B):
* Chain [[12],10]: 2*it(12)+1*s(1)+1*s(4)+1
  Such that:it(12) =< V_n-V__0
aux(2) =< V_n
s(1) =< aux(2)
s(4) =< it(12)*aux(2)

  with precondition: [B=3,V__0>=0,V_n>=V__0+3] 

* Chain [11]: 1
  with precondition: [V__0=0,B=3,1>=V_n] 

* Chain [10]: 1*s(1)+1
  Such that:s(1) =< V_n

  with precondition: [B=3,V_n>=2,V__0+2>=V_n] 


#### Cost of chains of eval_ax_6(V_n,B):
* Chain [16]: 1*s(5)+2
  Such that:s(5) =< 2

  with precondition: [V_n=2] 

* Chain [15]: 2
  with precondition: [1>=V_n] 

* Chain [14]: 3*s(6)+1*s(9)+2
  Such that:aux(3) =< V_n
s(6) =< aux(3)
s(9) =< s(6)*aux(3)

  with precondition: [V_n>=3] 


#### Cost of chains of eval_ax_start(V_i,V_j,V_n,B):
* Chain [19]: 1*s(10)+2
  Such that:s(10) =< 2

  with precondition: [V_n=2] 

* Chain [18]: 2
  with precondition: [1>=V_n] 

* Chain [17]: 3*s(12)+1*s(13)+2
  Such that:s(11) =< V_n
s(12) =< s(11)
s(13) =< s(12)*s(11)

  with precondition: [V_n>=3] 


Closed-form bounds of eval_ax_start(V_i,V_j,V_n,B): 
-------------------------------------
* Chain [19] with precondition: [V_n=2] 
    - Upper bound: 4 
    - Complexity: constant 
* Chain [18] with precondition: [1>=V_n] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [17] with precondition: [V_n>=3] 
    - Upper bound: 3*V_n+2+V_n*V_n 
    - Complexity: n^2 

### Maximum cost of eval_ax_start(V_i,V_j,V_n,B): max([2,nat(V_n)*nat(V_n)+nat(V_n)*3])+2 
Asymptotic class: n^2 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 18 ms.
* Invariants computed in 22 ms.
   - Backward Invariants 8 ms.
   - Transitive Invariants 7 ms.
* Refinement performed in 31 ms.
* Termination proved in 5 ms.
* Upper bounds computed in 36 ms.
   - Equation cost structures 12 ms.
   - Phase cost structures 15 ms.
   - Chain cost structures 10 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 133 ms.


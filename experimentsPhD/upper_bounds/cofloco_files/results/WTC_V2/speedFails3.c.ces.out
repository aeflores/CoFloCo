Warning: Ignored call to eval_speedFails3_stop/1 in equation eval_speedFails3_bb3_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_speedFails3_bb1_in/5,eval_speedFails3_bb2_in/5]
1. non_recursive  : [eval_speedFails3_bb3_in/1]
2. non_recursive  : [loop_cont_eval_speedFails3_bb1_in/2]
3. non_recursive  : [eval_speedFails3_7/5]
4. non_recursive  : [eval_speedFails3_6/5]
5. non_recursive  : [eval_speedFails3_5/5]
6. non_recursive  : [eval_speedFails3_4/5]
7. non_recursive  : [eval_speedFails3_3/4]
8. non_recursive  : [eval_speedFails3_2/4]
9. non_recursive  : [eval_speedFails3_1/4]
10. non_recursive  : [eval_speedFails3_0/4]
11. non_recursive  : [eval_speedFails3_bb0_in/4]
12. non_recursive  : [eval_speedFails3_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_speedFails3_bb1_in/5
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into eval_speedFails3_7/5
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into eval_speedFails3_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_speedFails3_bb1_in/5 
* CE 6 is refined into CE [7] 
* CE 5 is refined into CE [8] 
* CE 4 is refined into CE [9] 
* CE 3 is refined into CE [10] 


#### Refined cost equations eval_speedFails3_bb1_in/5 
* CE 7: eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B) = 0
     [V__0>=V_n+1,B=2] 
* CE 8: eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B) = 0
     [0>=V__0+1,B=2] 
* CE 9: eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B) = 1+ eval_speedFails3_bb1_in(V_n,V_t,V_0,C,D)
     [V_n>=V__0,V__0>=0,V_0>=1,V_t+V__0=C,D=2,B=2] 
* CE 10: eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B) = 1+ eval_speedFails3_bb1_in(V_n,V_t,V_0,C,D)
     [V_n>=V__0,V__0>=0,0>=V_0,V__0=V_t+C,D=2,B=2] 

### Cost equations --> "Loop" of eval_speedFails3_bb1_in/5 
* CEs [9] --> Loop 7 
* CEs [10] --> Loop 8 
* CEs [7] --> Loop 9 
* CEs [8] --> Loop 10 

#### Loops of eval_speedFails3_bb1_in/5 
* Loop 7: eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B)->  eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0',B')
                  [V_n>=V__0,V__0>=0,V_0>=1,V_t+V__0=V__0',B'=2,B=2] 
* Loop 8: eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B)->  eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0',B')
                  [V_n>=V__0,V__0>=0,0>=V_0,V_t+V__0'=V__0,B'=2,B=2] 
* Loop 9: eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B) [V__0>=V_n+1,B=2] 
* Loop 10: eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B) [0>=V__0+1,B=2] 

### Ranking functions of CR eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B) 

#### Partial ranking functions of CR eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B) 


### Resulting Chains:eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B) 
* [[8]]...
* [[8],10]
* [[8],9]
* [[7]]...
* [[7],10]
* [[7],9]
* [10]
* [9]


### Specialization of cost equations eval_speedFails3_7/5 
* CE 2 is refined into CE [11,12,13,14,15,16,17,18] 


#### Refined cost equations eval_speedFails3_7/5 
* CE 11: eval_speedFails3_7(V_x,V_n,V_t,V_0,B) = 1+ eval_speedFails3_bb1_in(V_n,V_t,V_0,V_x,C):[[8]]
     [V_n>=V_x,V_x>=0,0>=V_0,C=2] 
* CE 12: eval_speedFails3_7(V_x,V_n,V_t,V_0,B) = 1+ eval_speedFails3_bb1_in(V_n,V_t,V_0,V_x,C):[[8],10]
     [V_n>=V_x,V_x>=0,V_t>=1,0>=V_0,C=2] 
* CE 13: eval_speedFails3_7(V_x,V_n,V_t,V_0,B) = 1+ eval_speedFails3_bb1_in(V_n,V_t,V_0,V_x,C):[[8],9]
     [V_n>=V_x,V_x>=0,0>=V_0,0>=V_t+1,C=2] 
* CE 14: eval_speedFails3_7(V_x,V_n,V_t,V_0,B) = 1+ eval_speedFails3_bb1_in(V_n,V_t,V_0,V_x,C):[[7]]
     [V_n>=V_x,V_x>=0,V_0>=1,C=2] 
* CE 15: eval_speedFails3_7(V_x,V_n,V_t,V_0,B) = 1+ eval_speedFails3_bb1_in(V_n,V_t,V_0,V_x,C):[[7],10]
     [V_n>=V_x,V_x>=0,V_0>=1,0>=V_t+1,C=2] 
* CE 16: eval_speedFails3_7(V_x,V_n,V_t,V_0,B) = 1+ eval_speedFails3_bb1_in(V_n,V_t,V_0,V_x,C):[[7],9]
     [V_n>=V_x,V_x>=0,V_0>=1,V_t>=1,C=2] 
* CE 17: eval_speedFails3_7(V_x,V_n,V_t,V_0,B) = 1+ eval_speedFails3_bb1_in(V_n,V_t,V_0,V_x,C):[10]
     [0>=V_x+1,C=2] 
* CE 18: eval_speedFails3_7(V_x,V_n,V_t,V_0,B) = 1+ eval_speedFails3_bb1_in(V_n,V_t,V_0,V_x,C):[9]
     [V_x>=V_n+1,C=2] 

### Cost equations --> "Loop" of eval_speedFails3_7/5 
* CEs [18] --> Loop 11 
* CEs [16] --> Loop 12 
* CEs [12] --> Loop 13 
* CEs [15] --> Loop 14 
* CEs [13] --> Loop 15 
* CEs [17] --> Loop 16 
* CEs [14] --> Loop 17 
* CEs [11] --> Loop 18 

#### Loops of eval_speedFails3_7/5 
* Loop 11: eval_speedFails3_7(V_x,V_n,V_t,V_0,B) [V_x>=V_n+1] 
* Loop 12: eval_speedFails3_7(V_x,V_n,V_t,V_0,B) [V_n>=V_x,V_0>=1,V_t>=1,V_x>=0] 
* Loop 13: eval_speedFails3_7(V_x,V_n,V_t,V_0,B) [V_n>=V_x,V_t>=1,V_x>=0,0>=V_0] 
* Loop 14: eval_speedFails3_7(V_x,V_n,V_t,V_0,B) [V_n>=V_x,V_0>=1,V_x>=0,0>=V_t+1] 
* Loop 15: eval_speedFails3_7(V_x,V_n,V_t,V_0,B) [V_n>=V_x,V_x>=0,0>=V_0,0>=V_t+1] 
* Loop 16: eval_speedFails3_7(V_x,V_n,V_t,V_0,B) [0>=V_x+1] 
* Loop 17: eval_speedFails3_7(V_x,V_n,V_t,V_0,B) [V_n>=V_x,V_0>=1,V_x>=0] 
* Loop 18: eval_speedFails3_7(V_x,V_n,V_t,V_0,B) [V_n>=V_x,V_x>=0,0>=V_0] 

### Ranking functions of CR eval_speedFails3_7(V_x,V_n,V_t,V_0,B) 

#### Partial ranking functions of CR eval_speedFails3_7(V_x,V_n,V_t,V_0,B) 


### Resulting Chains:eval_speedFails3_7(V_x,V_n,V_t,V_0,B) 
* [18]...
* [17]...
* [16]
* [15]
* [14]
* [13]
* [12]
* [11]


### Specialization of cost equations eval_speedFails3_start/4 
* CE 1 is refined into CE [19,20,21,22,23,24,25,26] 


#### Refined cost equations eval_speedFails3_start/4 
* CE 19: eval_speedFails3_start(V_x,V_n,V_t,B) = 0+ eval_speedFails3_7(V_x,V_n,V_t,C,B):[18]
     [V_n>=V_x,V_x>=0,0>=C] 
* CE 20: eval_speedFails3_start(V_x,V_n,V_t,B) = 0+ eval_speedFails3_7(V_x,V_n,V_t,C,B):[17]
     [V_n>=V_x,C>=1,V_x>=0] 
* CE 21: eval_speedFails3_start(V_x,V_n,V_t,B) = 0+ eval_speedFails3_7(V_x,V_n,V_t,C,B):[16]
     [0>=V_x+1] 
* CE 22: eval_speedFails3_start(V_x,V_n,V_t,B) = 0+ eval_speedFails3_7(V_x,V_n,V_t,C,B):[15]
     [V_n>=V_x,V_x>=0,0>=C,0>=V_t+1] 
* CE 23: eval_speedFails3_start(V_x,V_n,V_t,B) = 0+ eval_speedFails3_7(V_x,V_n,V_t,C,B):[14]
     [V_n>=V_x,C>=1,V_x>=0,0>=V_t+1] 
* CE 24: eval_speedFails3_start(V_x,V_n,V_t,B) = 0+ eval_speedFails3_7(V_x,V_n,V_t,C,B):[13]
     [V_n>=V_x,V_t>=1,V_x>=0,0>=C] 
* CE 25: eval_speedFails3_start(V_x,V_n,V_t,B) = 0+ eval_speedFails3_7(V_x,V_n,V_t,C,B):[12]
     [V_n>=V_x,C>=1,V_t>=1,V_x>=0] 
* CE 26: eval_speedFails3_start(V_x,V_n,V_t,B) = 0+ eval_speedFails3_7(V_x,V_n,V_t,C,B):[11]
     [V_x>=V_n+1] 

### Cost equations --> "Loop" of eval_speedFails3_start/4 
* CEs [26] --> Loop 19 
* CEs [25] --> Loop 20 
* CEs [24] --> Loop 21 
* CEs [23] --> Loop 22 
* CEs [22] --> Loop 23 
* CEs [21] --> Loop 24 
* CEs [20] --> Loop 25 
* CEs [19] --> Loop 26 

#### Loops of eval_speedFails3_start/4 
* Loop 19: eval_speedFails3_start(V_x,V_n,V_t,B) [V_x>=V_n+1] 
* Loop 20: eval_speedFails3_start(V_x,V_n,V_t,B) [V_n>=V_x,V_t>=1,V_x>=0] 
* Loop 21: eval_speedFails3_start(V_x,V_n,V_t,B) [V_n>=V_x,V_t>=1,V_x>=0] 
* Loop 22: eval_speedFails3_start(V_x,V_n,V_t,B) [V_n>=V_x,V_x>=0,0>=V_t+1] 
* Loop 23: eval_speedFails3_start(V_x,V_n,V_t,B) [V_n>=V_x,V_x>=0,0>=V_t+1] 
* Loop 24: eval_speedFails3_start(V_x,V_n,V_t,B) [0>=V_x+1] 
* Loop 25: eval_speedFails3_start(V_x,V_n,V_t,B) [V_n>=V_x,V_x>=0] 
* Loop 26: eval_speedFails3_start(V_x,V_n,V_t,B) [V_n>=V_x,V_x>=0] 

### Ranking functions of CR eval_speedFails3_start(V_x,V_n,V_t,B) 

#### Partial ranking functions of CR eval_speedFails3_start(V_x,V_n,V_t,B) 


### Resulting Chains:eval_speedFails3_start(V_x,V_n,V_t,B) 
* [26]...
* [25]...
* [24]
* [23]
* [22]
* [21]
* [20]
* [19]


Computing Bounds
=====================================

#### Cost of loops [8] 

 * loop 8:eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B) -> [eval_speedFails3_bb1_in(V_n',V_t',V_0',V__0',B')] 
1
#### Cost of phase [8]:eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B) -> [eval_speedFails3_bb1_in(V_n',V_t',V_0',V__0',B')] 
1*it(8)+0
#### Cost of phase [8]:eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B) -> [eval_speedFails3_bb1_in(V_n',V_t',V_0',V__0',B')] 
1*it(8)+0
#### Cost of phase [8]:eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B) -> [eval_speedFails3_bb1_in(V_n',V_t',V_0',V__0',B')] 
1*it(8)+0
#### Cost of loops [7] 

 * loop 7:eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B) -> [eval_speedFails3_bb1_in(V_n',V_t',V_0',V__0',B')] 
1
#### Cost of phase [7]:eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B) -> [eval_speedFails3_bb1_in(V_n',V_t',V_0',V__0',B')] 
1*it(7)+0
#### Cost of phase [7]:eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B) -> [eval_speedFails3_bb1_in(V_n',V_t',V_0',V__0',B')] 
1*it(7)+0
#### Cost of phase [7]:eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B) -> [eval_speedFails3_bb1_in(V_n',V_t',V_0',V__0',B')] 
1*it(7)+0
#### Cost of chains of eval_speedFails3_bb1_in(V_n,V_t,V_0,V__0,B):
* Chain [[8]]...: 1*it(8)+0
  with precondition: [V_n>=V__0,V__0>=0,0>=V_0,B=2] 

* Chain [[8],10]: 1*it(8)+0
  with precondition: [B=2,0>=V_0,V_t>=1,V__0>=0,V_n>=V__0] 

* Chain [[8],9]: 1*it(8)+0
  with precondition: [B=2,0>=V_t+1,0>=V_0,V__0>=0,V_n>=V__0] 

* Chain [[7]]...: 1*it(7)+0
  with precondition: [V__0>=0,V_n>=V__0,V_0>=1,B=2] 

* Chain [[7],10]: 1*it(7)+0
  with precondition: [B=2,0>=V_t+1,V_0>=1,V__0>=0,V_n>=V__0] 

* Chain [[7],9]: 1*it(7)+0
  with precondition: [B=2,V_t>=1,V_0>=1,V__0>=0,V_n>=V__0] 

* Chain [10]: 0
  with precondition: [B=2,0>=V__0+1] 

* Chain [9]: 0
  with precondition: [B=2,V__0>=V_n+1] 


#### Cost of chains of eval_speedFails3_7(V_x,V_n,V_t,V_0,B):
* Chain [18]...: 1*s(1)+1
  with precondition: [0>=V_0,V_x>=0,V_n>=V_x] 

* Chain [17]...: 1*s(2)+1
  with precondition: [V_x>=0,V_0>=1,V_n>=V_x] 

* Chain [16]: 1
  with precondition: [0>=V_x+1] 

* Chain [15]: 1*s(3)+1
  with precondition: [0>=V_t+1,0>=V_0,V_x>=0,V_n>=V_x] 

* Chain [14]: 1*s(4)+1
  with precondition: [0>=V_t+1,V_x>=0,V_0>=1,V_n>=V_x] 

* Chain [13]: 1*s(5)+1
  with precondition: [0>=V_0,V_x>=0,V_t>=1,V_n>=V_x] 

* Chain [12]: 1*s(6)+1
  with precondition: [V_x>=0,V_t>=1,V_0>=1,V_n>=V_x] 

* Chain [11]: 1
  with precondition: [V_x>=V_n+1] 


#### Cost of chains of eval_speedFails3_start(V_x,V_n,V_t,B):
* Chain [26]...: 1*s(7)+1
  with precondition: [V_x>=0,V_n>=V_x] 

* Chain [25]...: 1*s(8)+1
  with precondition: [V_x>=0,V_n>=V_x] 

* Chain [24]: 1
  with precondition: [0>=V_x+1] 

* Chain [23]: 1*s(9)+1
  with precondition: [0>=V_t+1,V_x>=0,V_n>=V_x] 

* Chain [22]: 1*s(10)+1
  with precondition: [0>=V_t+1,V_x>=0,V_n>=V_x] 

* Chain [21]: 1*s(11)+1
  with precondition: [V_x>=0,V_t>=1,V_n>=V_x] 

* Chain [20]: 1*s(12)+1
  with precondition: [V_x>=0,V_t>=1,V_n>=V_x] 

* Chain [19]: 1
  with precondition: [V_x>=V_n+1] 


Closed-form bounds of eval_speedFails3_start(V_x,V_n,V_t,B): 
-------------------------------------
* Chain [26]... with precondition: [V_x>=0,V_n>=V_x] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [25]... with precondition: [V_x>=0,V_n>=V_x] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [24] with precondition: [0>=V_x+1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [23] with precondition: [0>=V_t+1,V_x>=0,V_n>=V_x] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [22] with precondition: [0>=V_t+1,V_x>=0,V_n>=V_x] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [21] with precondition: [V_x>=0,V_t>=1,V_n>=V_x] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [20] with precondition: [V_x>=0,V_t>=1,V_n>=V_x] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [19] with precondition: [V_x>=V_n+1] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of eval_speedFails3_start(V_x,V_n,V_t,B): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 45 ms.
* Invariants computed in 93 ms.
   - Backward Invariants 58 ms.
   - Transitive Invariants 14 ms.
* Refinement performed in 145 ms.
* Termination proved in 14 ms.
* Upper bounds computed in 140 ms.
   - Equation cost structures 62 ms.
   - Phase cost structures 20 ms.
   - Chain cost structures 52 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 499 ms.


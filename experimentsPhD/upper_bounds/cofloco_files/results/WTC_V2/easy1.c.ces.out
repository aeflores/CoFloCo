Warning: Ignored call to eval_easy1_stop/1 in equation eval_easy1_bb3_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_easy1_bb1_in/3,eval_easy1_bb2_in/3]
1. non_recursive  : [eval_easy1_bb3_in/1]
2. non_recursive  : [loop_cont_eval_easy1_bb1_in/2]
3. non_recursive  : [eval_easy1_6/2]
4. non_recursive  : [eval_easy1_5/2]
5. non_recursive  : [eval_easy1_4/2]
6. non_recursive  : [eval_easy1_3/2]
7. non_recursive  : [eval_easy1_2/2]
8. non_recursive  : [eval_easy1_1/2]
9. non_recursive  : [eval_easy1_bb0_in/1]
10. non_recursive  : [eval_easy1_start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_easy1_bb1_in/3
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into eval_easy1_6/2
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is partially evaluated into eval_easy1_start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_easy1_bb1_in/3 
* CE 6 is refined into CE [7] 
* CE 3 is refined into CE [8] 
* CE 4 is refined into CE [9] 
* CE 5 is refined into CE [10] 


#### Refined cost equations eval_easy1_bb1_in/3 
* CE 7: eval_easy1_bb1_in(V_0,V_x_0,B) = 0
     [V_x_0>=40,B=2] 
* CE 8: eval_easy1_bb1_in(V_0,V_x_0,B) = 1+ eval_easy1_bb1_in(V_0,C,D)
     [V_x_0>=0,V_0>=1,39>=V_x_0,V_x_0+2=C,D=2,B=2] 
* CE 9: eval_easy1_bb1_in(V_0,V_x_0,B) = 1+ eval_easy1_bb1_in(V_0,C,D)
     [V_x_0>=0,39>=V_x_0,0>=V_0+1,V_x_0+2=C,D=2,B=2] 
* CE 10: eval_easy1_bb1_in(V_0,V_x_0,B) = 1+ eval_easy1_bb1_in(C,D,E)
     [V_x_0>=0,39>=V_x_0,V_x_0+1=D,E=2,C=0,B=2,V_0=0] 

### Cost equations --> "Loop" of eval_easy1_bb1_in/3 
* CEs [8] --> Loop 7 
* CEs [9] --> Loop 8 
* CEs [10] --> Loop 9 
* CEs [7] --> Loop 10 

#### Loops of eval_easy1_bb1_in/3 
* Loop 7: eval_easy1_bb1_in(V_0,V_x_0,B)->  eval_easy1_bb1_in(V_0,V_x_0',B')
                  [V_x_0>=0,V_0>=1,39>=V_x_0,V_x_0+2=V_x_0',B'=2,B=2] 
* Loop 8: eval_easy1_bb1_in(V_0,V_x_0,B)->  eval_easy1_bb1_in(V_0,V_x_0',B')
                  [V_x_0>=0,39>=V_x_0,0>=V_0+1,V_x_0+2=V_x_0',B'=2,B=2] 
* Loop 9: eval_easy1_bb1_in(V_0,V_x_0,B)->  eval_easy1_bb1_in(V_0',V_x_0',B')
                  [V_x_0>=0,39>=V_x_0,V_x_0+1=V_x_0',B'=2,V_0'=0,B=2,V_0=0] 
* Loop 10: eval_easy1_bb1_in(V_0,V_x_0,B) [V_x_0>=40,B=2] 

### Ranking functions of CR eval_easy1_bb1_in(V_0,V_x_0,B) 
* RF of phase [7]: [-V_x_0/2+20]
* RF of phase [8]: [-V_x_0/2+20]
* RF of phase [9]: [-V_x_0+40]

#### Partial ranking functions of CR eval_easy1_bb1_in(V_0,V_x_0,B) 
* Partial RF of phase [7]:
  - RF of loop [7:1]:
    -V_x_0/2+20
* Partial RF of phase [8]:
  - RF of loop [8:1]:
    -V_x_0/2+20
* Partial RF of phase [9]:
  - RF of loop [9:1]:
    -V_x_0+40


### Resulting Chains:eval_easy1_bb1_in(V_0,V_x_0,B) 
* [[9],10]
* [[8],10]
* [[7],10]


### Specialization of cost equations eval_easy1_6/2 
* CE 2 is refined into CE [11,12,13] 


#### Refined cost equations eval_easy1_6/2 
* CE 11: eval_easy1_6(V_0,B) = 1+ eval_easy1_bb1_in(C,D,E):[[9],10]
     [E=2,D=0,C=0,V_0=0] 
* CE 12: eval_easy1_6(V_0,B) = 1+ eval_easy1_bb1_in(V_0,C,D):[[8],10]
     [0>=V_0+1,D=2,C=0] 
* CE 13: eval_easy1_6(V_0,B) = 1+ eval_easy1_bb1_in(V_0,C,D):[[7],10]
     [V_0>=1,D=2,C=0] 

### Cost equations --> "Loop" of eval_easy1_6/2 
* CEs [13] --> Loop 11 
* CEs [12] --> Loop 12 
* CEs [11] --> Loop 13 

#### Loops of eval_easy1_6/2 
* Loop 11: eval_easy1_6(V_0,B) [V_0>=1] 
* Loop 12: eval_easy1_6(V_0,B) [0>=V_0+1] 
* Loop 13: eval_easy1_6(V_0,B) [V_0=0] 

### Ranking functions of CR eval_easy1_6(V_0,B) 

#### Partial ranking functions of CR eval_easy1_6(V_0,B) 


### Resulting Chains:eval_easy1_6(V_0,B) 
* [13]
* [12]
* [11]


### Specialization of cost equations eval_easy1_start/1 
* CE 1 is refined into CE [14,15,16] 


#### Refined cost equations eval_easy1_start/1 
* CE 14: eval_easy1_start(B) = 0+ eval_easy1_6(C,B):[13]
     [C=0] 
* CE 15: eval_easy1_start(B) = 0+ eval_easy1_6(C,B):[12]
     [0>=C+1] 
* CE 16: eval_easy1_start(B) = 0+ eval_easy1_6(C,B):[11]
     [C>=1] 

### Cost equations --> "Loop" of eval_easy1_start/1 
* CEs [16] --> Loop 14 
* CEs [15] --> Loop 15 
* CEs [14] --> Loop 16 

#### Loops of eval_easy1_start/1 
* Loop 14: eval_easy1_start(B) [] 
* Loop 15: eval_easy1_start(B) [] 
* Loop 16: eval_easy1_start(B) [] 

### Ranking functions of CR eval_easy1_start(B) 

#### Partial ranking functions of CR eval_easy1_start(B) 


### Resulting Chains:eval_easy1_start(B) 
* [16]
* [15]
* [14]


Computing Bounds
=====================================

#### Cost of loops [9] 

 * loop 9:eval_easy1_bb1_in(V_0,V_x_0,B) -> [eval_easy1_bb1_in(V_0',V_x_0',B')] 
1
#### Cost of phase [9]:eval_easy1_bb1_in(V_0,V_x_0,B) -> [eval_easy1_bb1_in(V_0',V_x_0',B')] 
1*it(9)+0
  Such that:it(9) =< -V_x_0+40
it(9) =< -V_x_0+V_x_0'

#### Cost of loops [8] 

 * loop 8:eval_easy1_bb1_in(V_0,V_x_0,B) -> [eval_easy1_bb1_in(V_0',V_x_0',B')] 
1
#### Cost of phase [8]:eval_easy1_bb1_in(V_0,V_x_0,B) -> [eval_easy1_bb1_in(V_0',V_x_0',B')] 
1*it(8)+0
  Such that:it(8) =< -V_x_0/2+20
it(8) =< -V_x_0/2+V_x_0'/2

#### Cost of loops [7] 

 * loop 7:eval_easy1_bb1_in(V_0,V_x_0,B) -> [eval_easy1_bb1_in(V_0',V_x_0',B')] 
1
#### Cost of phase [7]:eval_easy1_bb1_in(V_0,V_x_0,B) -> [eval_easy1_bb1_in(V_0',V_x_0',B')] 
1*it(7)+0
  Such that:it(7) =< -V_x_0/2+20
it(7) =< -V_x_0/2+V_x_0'/2

#### Cost of chains of eval_easy1_bb1_in(V_0,V_x_0,B):
* Chain [[9],10]: 1*it(9)+0
  Such that:it(9) =< -V_x_0+40

  with precondition: [V_0=0,B=2,39>=V_x_0,V_x_0>=0] 

* Chain [[8],10]: 1*it(8)+0
  Such that:it(8) =< -V_x_0/2+20

  with precondition: [B=2,0>=V_0+1,39>=V_x_0,V_x_0>=0] 

* Chain [[7],10]: 1*it(7)+0
  Such that:it(7) =< -V_x_0/2+20

  with precondition: [B=2,39>=V_x_0,V_0>=1,V_x_0>=0] 


#### Cost of chains of eval_easy1_6(V_0,B):
* Chain [13]: 1*s(1)+1
  Such that:s(1) =< 40

  with precondition: [V_0=0] 

* Chain [12]: 1*s(2)+1
  Such that:s(2) =< 20

  with precondition: [0>=V_0+1] 

* Chain [11]: 1*s(3)+1
  Such that:s(3) =< 20

  with precondition: [V_0>=1] 


#### Cost of chains of eval_easy1_start(B):
* Chain [16]: 1*s(4)+1
  Such that:s(4) =< 40

  with precondition: [] 

* Chain [15]: 1*s(5)+1
  Such that:s(5) =< 20

  with precondition: [] 

* Chain [14]: 1*s(6)+1
  Such that:s(6) =< 20

  with precondition: [] 


Closed-form bounds of eval_easy1_start(B): 
-------------------------------------
* Chain [16] with precondition: [] 
    - Upper bound: 41 
    - Complexity: constant 
* Chain [15] with precondition: [] 
    - Upper bound: 21 
    - Complexity: constant 
* Chain [14] with precondition: [] 
    - Upper bound: 21 
    - Complexity: constant 

### Maximum cost of eval_easy1_start(B): 41 
Asymptotic class: constant 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 12 ms.
* Invariants computed in 20 ms.
   - Backward Invariants 8 ms.
   - Transitive Invariants 6 ms.
* Refinement performed in 21 ms.
* Termination proved in 7 ms.
* Upper bounds computed in 23 ms.
   - Equation cost structures 9 ms.
   - Phase cost structures 8 ms.
   - Chain cost structures 9 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 101 ms.


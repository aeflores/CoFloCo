Warning: Ignored call to eval_abc_stop/1 in equation eval_abc_bb5_in/1 

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_abc_bb2_in/7,eval_abc_bb3_in/7]
1. recursive  : [eval_abc_10/5,eval_abc_9/5,eval_abc_bb1_in/3,eval_abc_bb4_in/4,loop_cont_eval_abc_bb2_in/5]
2. non_recursive  : [eval_abc_bb5_in/1]
3. non_recursive  : [loop_cont_eval_abc_bb1_in/2]
4. non_recursive  : [eval_abc_5/3]
5. non_recursive  : [eval_abc_4/3]
6. non_recursive  : [eval_abc_3/3]
7. non_recursive  : [eval_abc_2/3]
8. non_recursive  : [eval_abc_1/3]
9. non_recursive  : [eval_abc_0/3]
10. non_recursive  : [eval_abc_bb0_in/3]
11. non_recursive  : [eval_abc_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_abc_bb2_in/7
1. SCC is partially evaluated into eval_abc_bb1_in/3
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_abc_5/3
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into eval_abc_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_abc_bb2_in/7 
* CE 6 is refined into CE [7] 
* CE 5 is refined into CE [8] 


#### Refined cost equations eval_abc_bb2_in/7 
* CE 7: eval_abc_bb2_in(A,B,C,D,A,B,C) = 0
     [A>=C,B>=1,0>=C,D=2] 
* CE 8: eval_abc_bb2_in(V_m,V_i_0,V_j_0,B,C,D,E) = 1+ eval_abc_bb2_in(V_m,V_i_0,F,G,C,D,E)
     [V_m>=V_j_0,V_j_0>=1,V_i_0>=1,V_j_0=F+1,G=2,B=2] 

### Cost equations --> "Loop" of eval_abc_bb2_in/7 
* CEs [8] --> Loop 7 
* CEs [7] --> Loop 8 

#### Loops of eval_abc_bb2_in/7 
* Loop 7: eval_abc_bb2_in(V_m,V_i_0,V_j_0,B,C,D,E)->  eval_abc_bb2_in(V_m,V_i_0,V_j_0',B',C,D,E)
                  [V_m>=V_j_0,V_j_0>=1,V_i_0>=1,V_j_0=V_j_0'+1,B'=2,B=2] 
* Loop 8: eval_abc_bb2_in(A,B,C,D,A,B,C) [A>=C,B>=1,0>=C,D=2] 

### Ranking functions of CR eval_abc_bb2_in(V_m,V_i_0,V_j_0,B,C,D,E) 
* RF of phase [7]: [V_j_0]

#### Partial ranking functions of CR eval_abc_bb2_in(V_m,V_i_0,V_j_0,B,C,D,E) 
* Partial RF of phase [7]:
  - RF of loop [7:1]:
    V_j_0


### Resulting Chains:eval_abc_bb2_in(V_m,V_i_0,V_j_0,B,C,D,E) 
* [[7],8]
* [8]


### Specialization of cost equations eval_abc_bb1_in/3 
* CE 4 is refined into CE [9] 
* CE 3 is refined into CE [10,11] 


#### Refined cost equations eval_abc_bb1_in/3 
* CE 9: eval_abc_bb1_in(V_m,V_i_0,B) = 0
     [0>=V_i_0,B=3] 
* CE 10: eval_abc_bb1_in(V_m,V_i_0,B) = 2+ eval_abc_bb2_in(V_m,V_i_0,V_m,C,V_m,V_i_0,D):[[7],8]+ eval_abc_bb1_in(V_m,E,F)
     [V_i_0>=1,V_m>=1,V_i_0=E+1,F=3,D=0,C=2,B=3] 
* CE 11: eval_abc_bb1_in(V_m,V_i_0,B) = 2+ eval_abc_bb2_in(V_m,V_i_0,V_m,C,V_m,V_i_0,V_m):[8]+ eval_abc_bb1_in(V_m,D,E)
     [V_i_0>=1,0>=V_m,V_i_0=D+1,E=3,C=2,B=3] 

### Cost equations --> "Loop" of eval_abc_bb1_in/3 
* CEs [10] --> Loop 9 
* CEs [11] --> Loop 10 
* CEs [9] --> Loop 11 

#### Loops of eval_abc_bb1_in/3 
* Loop 9: eval_abc_bb1_in(V_m,V_i_0,B)->  eval_abc_bb1_in(V_m,V_i_0',B')
                  [V_i_0>=1,V_m>=1,V_i_0=V_i_0'+1,B'=3,B=3] 
* Loop 10: eval_abc_bb1_in(V_m,V_i_0,B)->  eval_abc_bb1_in(V_m,V_i_0',B')
                  [V_i_0>=1,0>=V_m,V_i_0=V_i_0'+1,B'=3,B=3] 
* Loop 11: eval_abc_bb1_in(V_m,V_i_0,B) [0>=V_i_0,B=3] 

### Ranking functions of CR eval_abc_bb1_in(V_m,V_i_0,B) 
* RF of phase [9]: [V_i_0]
* RF of phase [10]: [V_i_0]

#### Partial ranking functions of CR eval_abc_bb1_in(V_m,V_i_0,B) 
* Partial RF of phase [9]:
  - RF of loop [9:1]:
    V_i_0
* Partial RF of phase [10]:
  - RF of loop [10:1]:
    V_i_0


### Resulting Chains:eval_abc_bb1_in(V_m,V_i_0,B) 
* [[10],11]
* [[9],11]
* [11]


### Specialization of cost equations eval_abc_5/3 
* CE 2 is refined into CE [12,13,14] 


#### Refined cost equations eval_abc_5/3 
* CE 12: eval_abc_5(V_n,V_m,B) = 1+ eval_abc_bb1_in(V_m,V_n,C):[[10],11]
     [V_n>=1,0>=V_m,C=3] 
* CE 13: eval_abc_5(V_n,V_m,B) = 1+ eval_abc_bb1_in(V_m,V_n,C):[[9],11]
     [V_n>=1,V_m>=1,C=3] 
* CE 14: eval_abc_5(V_n,V_m,B) = 1+ eval_abc_bb1_in(V_m,V_n,C):[11]
     [0>=V_n,C=3] 

### Cost equations --> "Loop" of eval_abc_5/3 
* CEs [13] --> Loop 12 
* CEs [12] --> Loop 13 
* CEs [14] --> Loop 14 

#### Loops of eval_abc_5/3 
* Loop 12: eval_abc_5(V_n,V_m,B) [V_m>=1,V_n>=1] 
* Loop 13: eval_abc_5(V_n,V_m,B) [V_n>=1,0>=V_m] 
* Loop 14: eval_abc_5(V_n,V_m,B) [0>=V_n] 

### Ranking functions of CR eval_abc_5(V_n,V_m,B) 

#### Partial ranking functions of CR eval_abc_5(V_n,V_m,B) 


### Resulting Chains:eval_abc_5(V_n,V_m,B) 
* [14]
* [13]
* [12]


### Specialization of cost equations eval_abc_start/3 
* CE 1 is refined into CE [15,16,17] 


#### Refined cost equations eval_abc_start/3 
* CE 15: eval_abc_start(V_n,V_m,B) = 0+ eval_abc_5(V_n,V_m,B):[14]
     [0>=V_n] 
* CE 16: eval_abc_start(V_n,V_m,B) = 0+ eval_abc_5(V_n,V_m,B):[13]
     [V_n>=1,0>=V_m] 
* CE 17: eval_abc_start(V_n,V_m,B) = 0+ eval_abc_5(V_n,V_m,B):[12]
     [V_m>=1,V_n>=1] 

### Cost equations --> "Loop" of eval_abc_start/3 
* CEs [17] --> Loop 15 
* CEs [16] --> Loop 16 
* CEs [15] --> Loop 17 

#### Loops of eval_abc_start/3 
* Loop 15: eval_abc_start(V_n,V_m,B) [V_m>=1,V_n>=1] 
* Loop 16: eval_abc_start(V_n,V_m,B) [V_n>=1,0>=V_m] 
* Loop 17: eval_abc_start(V_n,V_m,B) [0>=V_n] 

### Ranking functions of CR eval_abc_start(V_n,V_m,B) 

#### Partial ranking functions of CR eval_abc_start(V_n,V_m,B) 


### Resulting Chains:eval_abc_start(V_n,V_m,B) 
* [17]
* [16]
* [15]


Computing Bounds
=====================================

#### Cost of loops [7] 

 * loop 7:eval_abc_bb2_in(V_m,V_i_0,V_j_0,B,C,D,E) -> [eval_abc_bb2_in(V_m',V_i_0',V_j_0',B',C',D',E')] 
1
#### Cost of phase [7]:eval_abc_bb2_in(V_m,V_i_0,V_j_0,B,C,D,E) -> [eval_abc_bb2_in(V_m',V_i_0',V_j_0',B',C',D',E')] 
1*it(7)+0
  Such that:it(7) =< V_j_0
it(7) =< V_j_0-V_j_0'

#### Cost of chains of eval_abc_bb2_in(V_m,V_i_0,V_j_0,B,C,D,E):
* Chain [[7],8]: 1*it(7)+0
  Such that:it(7) =< V_j_0

  with precondition: [B=2,E=0,V_m=C,V_i_0=D,V_i_0>=1,V_j_0>=1,V_m>=V_j_0] 

* Chain [8]: 0
  with precondition: [B=2,V_m=C,V_i_0=D,V_j_0=E,0>=V_j_0,V_i_0>=1,V_m>=V_j_0] 


#### Cost of loops [10] 

 * loop 10:eval_abc_bb1_in(V_m,V_i_0,B) -> [eval_abc_bb1_in(V_m',V_i_0',B')] 
2
#### Cost of phase [10]:eval_abc_bb1_in(V_m,V_i_0,B) -> [eval_abc_bb1_in(V_m',V_i_0',B')] 
2*it(10)+0
  Such that:it(10) =< V_i_0
it(10) =< V_i_0-V_i_0'

#### Cost of loops [9] 

 * loop 9:eval_abc_bb1_in(V_m,V_i_0,B) -> [eval_abc_bb1_in(V_m',V_i_0',B')] 
1*s(2)+2
  Such that:s(2) =< V_m'

#### Cost of phase [9]:eval_abc_bb1_in(V_m,V_i_0,B) -> [eval_abc_bb1_in(V_m',V_i_0',B')] 
2*it(9)+1*s(3)+0
  Such that:aux(1) =< V_m
it(9) =< V_i_0
it(9) =< V_i_0-V_i_0'
s(3) =< it(9)*aux(1)

#### Cost of chains of eval_abc_bb1_in(V_m,V_i_0,B):
* Chain [[10],11]: 2*it(10)+0
  Such that:it(10) =< V_i_0

  with precondition: [B=3,0>=V_m,V_i_0>=1] 

* Chain [[9],11]: 2*it(9)+1*s(3)+0
  Such that:aux(1) =< V_m
it(9) =< V_i_0
s(3) =< it(9)*aux(1)

  with precondition: [B=3,V_m>=1,V_i_0>=1] 

* Chain [11]: 0
  with precondition: [B=3,0>=V_i_0] 


#### Cost of chains of eval_abc_5(V_n,V_m,B):
* Chain [14]: 1
  with precondition: [0>=V_n] 

* Chain [13]: 2*s(4)+1
  Such that:s(4) =< V_n

  with precondition: [0>=V_m,V_n>=1] 

* Chain [12]: 2*s(6)+1*s(7)+1
  Such that:s(6) =< V_n
s(5) =< V_m
s(7) =< s(6)*s(5)

  with precondition: [V_n>=1,V_m>=1] 


#### Cost of chains of eval_abc_start(V_n,V_m,B):
* Chain [17]: 1
  with precondition: [0>=V_n] 

* Chain [16]: 2*s(8)+1
  Such that:s(8) =< V_n

  with precondition: [0>=V_m,V_n>=1] 

* Chain [15]: 2*s(9)+1*s(11)+1
  Such that:s(9) =< V_n
s(10) =< V_m
s(11) =< s(9)*s(10)

  with precondition: [V_n>=1,V_m>=1] 


Closed-form bounds of eval_abc_start(V_n,V_m,B): 
-------------------------------------
* Chain [17] with precondition: [0>=V_n] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [16] with precondition: [0>=V_m,V_n>=1] 
    - Upper bound: 2*V_n+1 
    - Complexity: n 
* Chain [15] with precondition: [V_n>=1,V_m>=1] 
    - Upper bound: 2*V_n+1+V_m*V_n 
    - Complexity: n^2 

### Maximum cost of eval_abc_start(V_n,V_m,B): nat(V_m)*nat(V_n)+nat(V_n)*2+1 
Asymptotic class: n^2 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 13 ms.
* Invariants computed in 24 ms.
   - Backward Invariants 10 ms.
   - Transitive Invariants 6 ms.
* Refinement performed in 27 ms.
* Termination proved in 6 ms.
* Upper bounds computed in 39 ms.
   - Equation cost structures 14 ms.
   - Phase cost structures 19 ms.
   - Chain cost structures 9 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 134 ms.


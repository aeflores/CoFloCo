
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [empty/2]
1. recursive  : [eq/3]
2. recursive  : [le/3]
3. recursive  : [fun/3,min/2]
4. recursive  : [fun1/5,replace/4]
5. non_recursive  : [head/2]
6. non_recursive  : [tail/2]
7. recursive  : [if/5,sortIter/3]
8. non_recursive  : [sort/2]
9. non_recursive  : [start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into empty/2
1. SCC is partially evaluated into eq/3
2. SCC is partially evaluated into le/3
3. SCC is partially evaluated into min/2
4. SCC is partially evaluated into replace/4
5. SCC is partially evaluated into head/2
6. SCC is partially evaluated into tail/2
7. SCC is partially evaluated into sortIter/3
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations empty/2 
* CE 45 is refined into CE [47] 
* CE 46 is refined into CE [48] 
* CE 44 is refined into CE [49] 


#### Refined cost equations empty/2 
* CE 47: empty(V,Out) = 1
     [V>=1,Out=1] 
* CE 48: empty(V,Out) = 0
     [V>=0,Out=0] 
* CE 49: empty(V,Out) = 1
     [Out=2,V=0] 

### Cost equations --> "Loop" of empty/2 
* CEs [47] --> Loop 30 
* CEs [48] --> Loop 31 
* CEs [49] --> Loop 32 

#### Loops of empty/2 
* Loop 30: empty(V,Out) [V>=1,Out=1] 
* Loop 31: empty(V,Out) [V>=0,Out=0] 
* Loop 32: empty(V,Out) [Out=2,V=0] 

### Ranking functions of CR empty(V,Out) 

#### Partial ranking functions of CR empty(V,Out) 


### Resulting Chains:empty(V,Out) 
* [32]
* [31]
* [30]


### Merging Chains  empty/2 into  External patterns of execution 
* [[32]] --> 1 
* [[31]] --> 2 
* [[30]] --> 3 


### Specialization of cost equations eq/3 
* CE 39 is refined into CE [50] 
* CE 37 is refined into CE [51] 
* CE 36 is refined into CE [52] 
* CE 35 is refined into CE [53] 
* CE 38 is refined into CE [54] 


#### Refined cost equations eq/3 
* CE 50: eq(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 51: eq(V,V1,Out) = 1
     [V>=1,Out=1,V1=0] 
* CE 52: eq(V,V1,Out) = 1
     [V1>=1,Out=1,V=0] 
* CE 53: eq(V,V1,Out) = 1
     [Out=2,V1=0,V=0] 
* CE 54: eq(V,V1,Out) = 1+ eq(W1,X1,Out)
     [X1>=0,W1>=0,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of eq/3 
* CEs [54] --> Loop 33 
* CEs [50] --> Loop 34 
* CEs [51] --> Loop 35 
* CEs [52] --> Loop 36 
* CEs [53] --> Loop 37 

#### Loops of eq/3 
* Loop 33: eq(V,V1,Out)->  eq(V',V1',Out)
                  [V1'>=0,V'>=0,V1'+1=V1,V'+1=V] 
* Loop 34: eq(V,V1,Out) [V1>=0,V>=0,Out=0] 
* Loop 35: eq(V,V1,Out) [V>=1,Out=1,V1=0] 
* Loop 36: eq(V,V1,Out) [V1>=1,Out=1,V=0] 
* Loop 37: eq(V,V1,Out) [Out=2,V1=0,V=0] 

### Ranking functions of CR eq(V,V1,Out) 
* RF of phase [33]: [V,V1]

#### Partial ranking functions of CR eq(V,V1,Out) 
* Partial RF of phase [33]:
  - RF of loop [33:1]:
    V
    V1


### Resulting Chains:eq(V,V1,Out) 
* [[33],37]
* [[33],36]
* [[33],35]
* [[33],34]
* [37]
* [36]
* [35]
* [34]


### Merging Chains  eq/3 into  External patterns of execution 
* [[37]] --> 1 
* [[36]] --> 2 
* [[35]] --> 3 
* [[34],[34,[33]]] --> 4 
* [[36,[33]]] --> 5 
* [[35,[33]]] --> 6 
* [[37,[33]]] --> 7 


### Specialization of cost equations le/3 
* CE 43 is refined into CE [55] 
* CE 41 is refined into CE [56] 
* CE 40 is refined into CE [57] 
* CE 42 is refined into CE [58] 


#### Refined cost equations le/3 
* CE 55: le(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 56: le(V,V1,Out) = 1
     [V>=1,Out=1,V1=0] 
* CE 57: le(V,V1,Out) = 1
     [V1>=0,Out=2,V=0] 
* CE 58: le(V,V1,Out) = 1+ le(W1,X1,Out)
     [X1>=0,W1>=0,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of le/3 
* CEs [58] --> Loop 38 
* CEs [55] --> Loop 39 
* CEs [56] --> Loop 40 
* CEs [57] --> Loop 41 

#### Loops of le/3 
* Loop 38: le(V,V1,Out)->  le(V',V1',Out)
                  [V1'>=0,V'>=0,V1'+1=V1,V'+1=V] 
* Loop 39: le(V,V1,Out) [V1>=0,V>=0,Out=0] 
* Loop 40: le(V,V1,Out) [V>=1,Out=1,V1=0] 
* Loop 41: le(V,V1,Out) [V1>=0,Out=2,V=0] 

### Ranking functions of CR le(V,V1,Out) 
* RF of phase [38]: [V,V1]

#### Partial ranking functions of CR le(V,V1,Out) 
* Partial RF of phase [38]:
  - RF of loop [38:1]:
    V
    V1


### Resulting Chains:le(V,V1,Out) 
* [[38],41]
* [[38],40]
* [[38],39]
* [41]
* [40]
* [39]


### Merging Chains  le/3 into  External patterns of execution 
* [[41]] --> 1 
* [[40]] --> 2 
* [[39],[39,[38]]] --> 3 
* [[40,[38]]] --> 4 
* [[41,[38]]] --> 5 


### Specialization of cost equations min/2 
* CE 20 is refined into CE [59] 
* CE 17 is refined into CE [60,61,62,63,64] 
* CE 21 is refined into CE [65] 
* CE 18 is refined into CE [66,67] 
* CE 19 is refined into CE [68,69] 


#### Refined cost equations min/2 
* CE 59: min(V,Out) = 1
     [Out>=0,Out+1=V] 
* CE 60: min(V,Out) = 1+ le(W,X,Y):1
     [V>=X+2,X>=0,Y=2,W=0,Out=0] 
* CE 61: min(V,Out) = 1+ le(W,X,Y):2
     [V>=W+2,W>=1,Y=1,X=0,Out=0] 
* CE 62: min(V,Out) = 1+ le(W,X,Y):3
     [V>=W+X+2,X>=0,W>=0,Y=0,Out=0] 
* CE 63: min(V,Out) = 1+ le(W,X,Y):4
     [V>=W+X+2,W>=X+1,X>=1,Y=1,Out=0] 
* CE 64: min(V,Out) = 1+ le(W,X,Y):5
     [V>=W+X+2,X>=W,W>=1,Y=2,Out=0] 
* CE 65: min(V,Out) = 0
     [V>=0,Out=0] 
* CE 66: min(V,Out) = 2+ le(W,X,Y):2+ min(Z,Out)
     [V>=Z+1,V>=W+2,Z>=1,W>=1,Y=1,X=0] 
* CE 67: min(V,Out) = 2+ le(W,X,Y):4+ min(Z,Out)
     [V>=W+X+2,V>=Z+1,W>=X+1,Z>=1,X>=1,Y=1] 
* CE 68: min(V,Out) = 2+ le(W,X,Y):1+ min(Z,Out)
     [V>=Z+1,V>=X+2,Z>=1,X>=0,Y=2,W=0] 
* CE 69: min(V,Out) = 2+ le(W,X,Y):5+ min(Z,Out)
     [V>=W+X+2,V>=Z+1,X>=W,Z>=1,W>=1,Y=2] 

### Cost equations --> "Loop" of min/2 
* CEs [66,67,68,69] --> Loop 42 
* CEs [59] --> Loop 43 
* CEs [60,61,62,63,64,65] --> Loop 44 

#### Loops of min/2 
* Loop 42: min(V,Out)->  min(V',Out)
                  [V>=V'+1,V'>=1] 
* Loop 43: min(V,Out) [V>=1,V=Out+1] 
* Loop 44: min(V,Out) [V>=0,Out=0] 

### Ranking functions of CR min(V,Out) 
* RF of phase [42]: [V-1]

#### Partial ranking functions of CR min(V,Out) 
* Partial RF of phase [42]:
  - RF of loop [42:1]:
    V-1


### Resulting Chains:min(V,Out) 
* [[42],44]
* [[42],43]
* [44]
* [43]


### Merging Chains  min/2 into  External patterns of execution 
* [[44],[44,[42]]] --> 1 
* [[43]] --> 2 
* [[43,[42]]] --> 3 


### Specialization of cost equations replace/4 
* CE 29 is refined into CE [70,71] 
* CE 27 is refined into CE [72,73,74,75,76,77,78] 
* CE 30 is refined into CE [79] 
* CE 31 is refined into CE [80] 
* CE 28 is refined into CE [81,82,83,84] 


#### Refined cost equations replace/4 
* CE 70: replace(V,V1,V22,Out) = 2+ eq(W22,X22,Y22):1
     [V1+V22>=Out,Out>=V1+1,V1>=0,Y22=2,X22=0,W22=0,V=0] 
* CE 71: replace(V,V1,V22,Out) = 2+ eq(V,V,W22):7
     [V1+V22>=Out,V22>=V+1,Out>=V1+1,V>=1,V1>=0,W22=2] 
* CE 72: replace(V,V1,V22,Out) = 1+ eq(W22,X22,Y22):1
     [V22>=1,V1>=0,Y22=2,X22=0,W22=0,Out=0,V=0] 
* CE 73: replace(V,V1,V22,Out) = 1+ eq(W22,X22,Y22):2
     [V22>=X22+1,X22>=1,V1>=0,Y22=1,W22=0,Out=0,V=0] 
* CE 74: replace(V,V1,V22,Out) = 1+ eq(V,W22,X22):3
     [V>=1,V22>=1,V1>=0,X22=1,W22=0,Out=0] 
* CE 75: replace(V,V1,V22,Out) = 1+ eq(V,W22,X22):4
     [V22>=W22+1,W22>=0,V>=0,V1>=0,X22=0,Out=0] 
* CE 76: replace(V,V1,V22,Out) = 1+ eq(V,W22,X22):5
     [V22>=W22+1,W22>=V+1,V>=1,V1>=0,X22=1,Out=0] 
* CE 77: replace(V,V1,V22,Out) = 1+ eq(V,W22,X22):6
     [V>=W22+1,V22>=W22+1,W22>=1,V1>=0,X22=1,Out=0] 
* CE 78: replace(V,V1,V22,Out) = 1+ eq(V,V,W22):7
     [V22>=V+1,V>=1,V1>=0,W22=2,Out=0] 
* CE 79: replace(V,V1,V22,Out) = 1
     [V1>=0,V>=0,Out=0,V22=0] 
* CE 80: replace(V,V1,V22,Out) = 0
     [V22>=0,V1>=0,V>=0,Out=0] 
* CE 81: replace(V,V1,V22,Out) = 2+ eq(W22,X22,Y22):2+ replace(Z22,V1,A23,B23)
     [V22>=A23+1,V22>=X22+1,A23>=0,X22>=1,V1>=0,Out+A23=V22+B23,Z22=0,Y22=1,W22=0,V=0] 
* CE 82: replace(V,V1,V22,Out) = 2+ eq(V,W22,X22):3+ replace(V,V1,Y22,Z22)
     [V22>=Y22+1,Y22>=0,V>=1,V1>=0,Out+Y22=V22+Z22,X22=1,W22=0] 
* CE 83: replace(V,V1,V22,Out) = 2+ eq(V,W22,X22):5+ replace(V,V1,Y22,Z22)
     [V22>=Y22+1,V22>=W22+1,W22>=V+1,Y22>=0,V>=1,V1>=0,Out+Y22=V22+Z22,X22=1] 
* CE 84: replace(V,V1,V22,Out) = 2+ eq(V,W22,X22):6+ replace(V,V1,Y22,Z22)
     [V22>=Y22+1,V>=W22+1,V22>=W22+1,Y22>=0,W22>=1,V1>=0,Out+Y22=V22+Z22,X22=1] 

### Cost equations --> "Loop" of replace/4 
* CEs [82,83,84] --> Loop 45 
* CEs [81] --> Loop 46 
* CEs [71] --> Loop 47 
* CEs [79] --> Loop 48 
* CEs [70] --> Loop 49 
* CEs [72,73,74,75,76,77,78,80] --> Loop 50 

#### Loops of replace/4 
* Loop 45: replace(V,V1,V22,Out)->  replace(V,V1,V22',Out')
                  [V22>=V22'+1,V22'>=0,V1>=0,V>=1,V22+Out'=Out+V22'] 
* Loop 46: replace(V,V1,V22,Out)->  replace(V',V1,V22',Out')
                  [V22>=V22'+1,V22'>=0,V22>=2,V1>=0,V22+Out'=Out+V22',V'=0,V=0] 
* Loop 47: replace(V,V1,V22,Out) [V1+V22>=Out,Out>=V1+1,V22>=V+1,V1>=0,V>=1] 
* Loop 48: replace(V,V1,V22,Out) [V1>=0,V>=0,Out=0,V22=0] 
* Loop 49: replace(V,V1,V22,Out) [V1+V22>=Out,Out>=V1+1,V1>=0,V=0] 
* Loop 50: replace(V,V1,V22,Out) [V22>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR replace(V,V1,V22,Out) 
* RF of phase [45]: [V22]
* RF of phase [46]: [V22-1]

#### Partial ranking functions of CR replace(V,V1,V22,Out) 
* Partial RF of phase [45]:
  - RF of loop [45:1]:
    V22
* Partial RF of phase [46]:
  - RF of loop [46:1]:
    V22-1


### Resulting Chains:replace(V,V1,V22,Out) 
* [[46],50]
* [[46],49]
* [[46],48]
* [[45],50]
* [[45],48]
* [[45],47]
* [50]
* [49]
* [48]
* [47]


### Merging Chains  replace/4 into  External patterns of execution 
* [[48,[46]],[50,[46]]] --> 1 
* [[49],[49,[46]]] --> 2 
* [[48],[50]] --> 3 
* [[48,[45]],[50,[45]]] --> 4 
* [[47],[47,[45]]] --> 5 


### Specialization of cost equations head/2 
* CE 22 is refined into CE [85] 
* CE 23 is refined into CE [86] 


#### Refined cost equations head/2 
* CE 85: head(V,Out) = 1
     [V>=Out+1,Out>=0] 
* CE 86: head(V,Out) = 0
     [V>=0,Out=0] 

### Cost equations --> "Loop" of head/2 
* CEs [85] --> Loop 51 
* CEs [86] --> Loop 52 

#### Loops of head/2 
* Loop 51: head(V,Out) [V>=Out+1,Out>=0] 
* Loop 52: head(V,Out) [V>=0,Out=0] 

### Ranking functions of CR head(V,Out) 

#### Partial ranking functions of CR head(V,Out) 


### Resulting Chains:head(V,Out) 
* [52]
* [51]


### Merging Chains  head/2 into  External patterns of execution 
* [[52]] --> 1 
* [[51]] --> 2 


### Specialization of cost equations tail/2 
* CE 25 is refined into CE [87] 
* CE 24 is refined into CE [88] 
* CE 26 is refined into CE [89] 


#### Refined cost equations tail/2 
* CE 87: tail(V,Out) = 1
     [V>=Out+1,Out>=0] 
* CE 88: tail(V,Out) = 1
     [Out=0,V=0] 
* CE 89: tail(V,Out) = 0
     [V>=0,Out=0] 

### Cost equations --> "Loop" of tail/2 
* CEs [87] --> Loop 53 
* CEs [88,89] --> Loop 54 

#### Loops of tail/2 
* Loop 53: tail(V,Out) [V>=Out+1,Out>=0] 
* Loop 54: tail(V,Out) [V>=0,Out=0] 

### Ranking functions of CR tail(V,Out) 

#### Partial ranking functions of CR tail(V,Out) 


### Resulting Chains:tail(V,Out) 
* [54]
* [53]


### Merging Chains  tail/2 into  External patterns of execution 
* [[54]] --> 1 
* [[53]] --> 2 


### Specialization of cost equations sortIter/3 
* CE 34 is refined into CE [90] 
* CE 32 is refined into CE [91,92,93,94,95,96,97] 
* CE 33 is refined into CE [98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175] 


#### Refined cost equations sortIter/3 
* CE 90: sortIter(A,B,B) = 2+ empty(C,D):1+ min(E,F):1
     [B>=0,F=0,E=0,D=2,C=0,A=0] 
* CE 91: sortIter(V,V1,Out) = 1+ empty(W1,X1):1+ min(Y1,Z1):1
     [V1>=0,Z1=0,Y1=0,X1=2,W1=0,Out=0,V=0] 
* CE 92: sortIter(V,V1,Out) = 1+ empty(V,W1):2+ min(V,X1):1
     [V>=0,V1>=0,X1=0,W1=0,Out=0] 
* CE 93: sortIter(V,V1,Out) = 1+ empty(W1,X1):2+ min(Y1,Z1):2
     [Z1>=0,V1>=0,Z1+1=Y1,Z1+1=W1,Z1+1=V,X1=0,Out=0] 
* CE 94: sortIter(V,V1,Out) = 1+ empty(V,W1):2+ min(V,X1):3
     [V>=X1+2,X1>=0,V1>=0,W1=0,Out=0] 
* CE 95: sortIter(V,V1,Out) = 1+ empty(V,W1):3+ min(V,X1):1
     [V>=1,V1>=0,X1=0,W1=1,Out=0] 
* CE 96: sortIter(V,V1,Out) = 1+ empty(W1,X1):3+ min(Y1,Z1):2
     [Z1>=0,V1>=0,Z1+1=Y1,Z1+1=W1,Z1+1=V,X1=1,Out=0] 
* CE 97: sortIter(V,V1,Out) = 1+ empty(V,W1):3+ min(V,X1):3
     [V>=X1+2,X1>=0,V1>=0,W1=1,Out=0] 
* CE 98: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):1+ min(V,Y1):1+ head(V,Z1):1+ tail(V,A2):1+ replace(B2,C2,D2,E2):3+ sortIter(F2,G2,Out)
     [G2>=2,V>=1,G2=V1+2,F2=0,E2=0,D2=0,C2=0,B2=0,A2=0,Z1=0,Y1=0,X1=0,W1=1] 
* CE 99: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):1+ min(V,Y1):1+ head(V,Z1):1+ tail(V,A2):2+ replace(B2,C2,A2,D2):1+ sortIter(D2,E2,Out)
     [A2>=D2,V>=A2+1,E2>=2,D2>=1,A2>=2,E2=V1+2,C2=0,B2=0,Z1=0,Y1=0,X1=0,W1=1] 
* CE 100: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):1+ min(V,Y1):1+ head(V,Z1):1+ tail(V,A2):2+ replace(B2,C2,A2,D2):2+ sortIter(D2,E2,Out)
     [A2>=D2,V>=A2+1,E2>=2,D2>=1,E2=V1+2,C2=0,B2=0,Z1=0,Y1=0,X1=0,W1=1] 
* CE 101: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):1+ min(V,Y1):1+ head(V,Z1):1+ tail(V,A2):2+ replace(B2,C2,A2,D2):3+ sortIter(E2,F2,Out)
     [V>=A2+1,F2>=2,A2>=0,F2=V1+2,E2=0,D2=0,C2=0,B2=0,Z1=0,Y1=0,X1=0,W1=1] 
* CE 102: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):1+ min(V,Y1):1+ head(V,Z1):2+ tail(V,A2):1+ replace(B2,Z1,C2,D2):3+ sortIter(E2,F2,Out)
     [V>=Z1+1,F2>=2,Z1>=0,F2=V1+2,E2=0,D2=0,C2=0,B2=0,A2=0,Y1=0,X1=0,W1=1] 
* CE 103: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):1+ min(V,Y1):1+ head(V,Z1):2+ tail(V,A2):2+ replace(B2,Z1,A2,C2):1+ sortIter(C2,D2,Out)
     [A2>=C2,V>=A2+1,V>=Z1+1,D2>=2,C2>=1,A2>=2,Z1>=0,D2=V1+2,B2=0,Y1=0,X1=0,W1=1] 
* CE 104: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):1+ min(V,Y1):1+ head(V,Z1):2+ tail(V,A2):2+ replace(B2,Z1,A2,C2):2+ sortIter(C2,D2,Out)
     [Z1+A2>=C2,V>=A2+1,C2>=Z1+1,V>=Z1+1,D2>=2,Z1>=0,D2=V1+2,B2=0,Y1=0,X1=0,W1=1] 
* CE 105: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):1+ min(V,Y1):1+ head(V,Z1):2+ tail(V,A2):2+ replace(B2,Z1,A2,C2):3+ sortIter(D2,E2,Out)
     [V>=A2+1,V>=Z1+1,E2>=2,A2>=0,Z1>=0,E2=V1+2,D2=0,C2=0,B2=0,Y1=0,X1=0,W1=1] 
* CE 106: sortIter(V,V1,Out) = 2+ empty(W1,X1):3+ min(Y1,Z1):1+ min(A2,B2):2+ head(C2,D2):1+ tail(E2,F2):1+ replace(B2,G2,H2,I2):3+ sortIter(J2,K2,Out)
     [K2>=2,B2>=0,B2+1=E2,B2+1=C2,B2+1=A2,B2+1=Y1,B2+1=W1,K2=V1+2,B2+1=V,J2=0,I2=0,H2=0,G2=0,F2=0,D2=0,Z1=0,X1=1] 
* CE 107: sortIter(V,V1,Out) = 2+ empty(W1,X1):3+ min(Y1,Z1):1+ min(A2,B2):2+ head(C2,D2):1+ tail(E2,F2):2+ replace(B2,G2,F2,H2):3+ sortIter(I2,J2,Out)
     [B2>=F2,J2>=2,F2>=0,B2+1=E2,B2+1=C2,B2+1=A2,B2+1=Y1,B2+1=W1,J2=V1+2,B2+1=V,I2=0,H2=0,G2=0,D2=0,Z1=0,X1=1] 
* CE 108: sortIter(V,V1,Out) = 2+ empty(W1,X1):3+ min(Y1,Z1):1+ min(A2,B2):2+ head(C2,D2):1+ tail(E2,F2):2+ replace(B2,G2,F2,H2):4+ sortIter(H2,I2,Out)
     [F2>=H2,B2>=F2,I2>=2,H2>=1,B2+1=E2,B2+1=C2,B2+1=A2,B2+1=Y1,B2+1=W1,I2=V1+2,B2+1=V,G2=0,D2=0,Z1=0,X1=1] 
* CE 109: sortIter(V,V1,Out) = 2+ empty(W1,X1):3+ min(Y1,Z1):1+ min(A2,B2):2+ head(C2,D2):2+ tail(E2,F2):1+ replace(B2,D2,G2,H2):3+ sortIter(I2,J2,Out)
     [B2>=D2,J2>=2,D2>=0,B2+1=E2,B2+1=C2,B2+1=A2,B2+1=Y1,B2+1=W1,J2=V1+2,B2+1=V,I2=0,H2=0,G2=0,F2=0,Z1=0,X1=1] 
* CE 110: sortIter(V,V1,Out) = 2+ empty(W1,X1):3+ min(Y1,Z1):1+ min(A2,B2):2+ head(C2,D2):2+ tail(E2,F2):2+ replace(B2,D2,F2,G2):3+ sortIter(H2,I2,Out)
     [B2>=F2,B2>=D2,I2>=2,F2>=0,D2>=0,B2+1=E2,B2+1=C2,B2+1=A2,B2+1=Y1,B2+1=W1,I2=V1+2,B2+1=V,H2=0,G2=0,Z1=0,X1=1] 
* CE 111: sortIter(V,V1,Out) = 2+ empty(W1,X1):3+ min(Y1,Z1):1+ min(A2,B2):2+ head(C2,D2):2+ tail(E2,F2):2+ replace(B2,D2,F2,G2):4+ sortIter(G2,H2,Out)
     [F2>=G2,B2>=F2,B2>=D2,H2>=2,G2>=1,D2>=0,B2+1=E2,B2+1=C2,B2+1=A2,B2+1=Y1,B2+1=W1,H2=V1+2,B2+1=V,Z1=0,X1=1] 
* CE 112: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):1+ min(V,Y1):3+ head(V,Z1):1+ tail(V,A2):1+ replace(Y1,B2,C2,D2):3+ sortIter(E2,F2,Out)
     [V>=Y1+2,F2>=2,Y1>=0,F2=V1+2,E2=0,D2=0,C2=0,B2=0,A2=0,Z1=0,X1=0,W1=1] 
* CE 113: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):1+ min(V,Y1):3+ head(V,Z1):1+ tail(V,A2):2+ replace(B2,C2,A2,D2):1+ sortIter(D2,E2,Out)
     [A2>=D2,V>=A2+1,E2>=2,D2>=1,A2>=2,E2=V1+2,C2=0,B2=0,Z1=0,Y1=0,X1=0,W1=1] 
* CE 114: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):1+ min(V,Y1):3+ head(V,Z1):1+ tail(V,A2):2+ replace(B2,C2,A2,D2):2+ sortIter(D2,E2,Out)
     [A2>=D2,V>=A2+1,E2>=2,D2>=1,E2=V1+2,C2=0,B2=0,Z1=0,Y1=0,X1=0,W1=1] 
* CE 115: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):1+ min(V,Y1):3+ head(V,Z1):1+ tail(V,A2):2+ replace(Y1,B2,A2,C2):3+ sortIter(D2,E2,Out)
     [V>=A2+1,V>=Y1+2,E2>=2,A2>=0,Y1>=0,E2=V1+2,D2=0,C2=0,B2=0,Z1=0,X1=0,W1=1] 
* CE 116: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):1+ min(V,Y1):3+ head(V,Z1):1+ tail(V,A2):2+ replace(Y1,B2,A2,C2):4+ sortIter(C2,D2,Out)
     [A2>=C2,V>=A2+1,V>=Y1+2,D2>=2,C2>=1,Y1>=1,D2=V1+2,B2=0,Z1=0,X1=0,W1=1] 
* CE 117: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):1+ min(V,Y1):3+ head(V,Z1):1+ tail(V,A2):2+ replace(Y1,B2,A2,C2):5+ sortIter(C2,D2,Out)
     [A2>=C2,V>=A2+1,A2>=Y1+1,D2>=2,C2>=1,Y1>=1,D2=V1+2,B2=0,Z1=0,X1=0,W1=1] 
* CE 118: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):1+ min(V,Y1):3+ head(V,Z1):2+ tail(V,A2):1+ replace(Y1,Z1,B2,C2):3+ sortIter(D2,E2,Out)
     [V>=Z1+1,V>=Y1+2,E2>=2,Z1>=0,Y1>=0,E2=V1+2,D2=0,C2=0,B2=0,A2=0,X1=0,W1=1] 
* CE 119: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):1+ min(V,Y1):3+ head(V,Z1):2+ tail(V,A2):2+ replace(B2,Z1,A2,C2):1+ sortIter(C2,D2,Out)
     [A2>=C2,V>=A2+1,V>=Z1+1,D2>=2,C2>=1,A2>=2,Z1>=0,D2=V1+2,B2=0,Y1=0,X1=0,W1=1] 
* CE 120: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):1+ min(V,Y1):3+ head(V,Z1):2+ tail(V,A2):2+ replace(B2,Z1,A2,C2):2+ sortIter(C2,D2,Out)
     [Z1+A2>=C2,V>=A2+1,C2>=Z1+1,V>=Z1+1,D2>=2,Z1>=0,D2=V1+2,B2=0,Y1=0,X1=0,W1=1] 
* CE 121: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):1+ min(V,Y1):3+ head(V,Z1):2+ tail(V,A2):2+ replace(Y1,Z1,A2,B2):3+ sortIter(C2,D2,Out)
     [V>=A2+1,V>=Z1+1,V>=Y1+2,D2>=2,A2>=0,Z1>=0,Y1>=0,D2=V1+2,C2=0,B2=0,X1=0,W1=1] 
* CE 122: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):1+ min(V,Y1):3+ head(V,Z1):2+ tail(V,A2):2+ replace(Y1,Z1,A2,B2):4+ sortIter(B2,C2,Out)
     [A2>=B2,V>=A2+1,V>=Z1+1,V>=Y1+2,C2>=2,B2>=1,Z1>=0,Y1>=1,C2=V1+2,X1=0,W1=1] 
* CE 123: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):1+ min(V,Y1):3+ head(V,Z1):2+ tail(V,A2):2+ replace(Y1,Z1,A2,B2):5+ sortIter(B2,C2,Out)
     [Z1+A2>=B2,V>=A2+1,B2>=Z1+1,V>=Z1+1,A2>=Y1+1,C2>=2,Z1>=0,Y1>=1,C2=V1+2,X1=0,W1=1] 
* CE 124: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):2+ min(V,Y1):1+ head(V,Z1):1+ tail(V,A2):1+ replace(B2,C2,D2,E2):3+ sortIter(F2,G2,Out)
     [G2>=V+1,V>=1,V+V1+1=G2,V=X1+1,F2=0,E2=0,D2=0,C2=0,B2=0,A2=0,Z1=0,Y1=0,W1=1] 
* CE 125: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):2+ min(V,Y1):1+ head(V,Z1):1+ tail(V,A2):2+ replace(B2,C2,A2,D2):1+ sortIter(D2,E2,Out)
     [A2>=D2,V>=A2+1,E2>=V+1,D2>=1,A2>=2,V+V1+1=E2,V=X1+1,C2=0,B2=0,Z1=0,Y1=0,W1=1] 
* CE 126: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):2+ min(V,Y1):1+ head(V,Z1):1+ tail(V,A2):2+ replace(B2,C2,A2,D2):2+ sortIter(D2,E2,Out)
     [A2>=D2,V>=A2+1,E2>=V+1,D2>=1,V+V1+1=E2,V=X1+1,C2=0,B2=0,Z1=0,Y1=0,W1=1] 
* CE 127: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):2+ min(V,Y1):1+ head(V,Z1):1+ tail(V,A2):2+ replace(B2,C2,A2,D2):3+ sortIter(E2,F2,Out)
     [V>=A2+1,F2>=V+1,A2>=0,V+V1+1=F2,V=X1+1,E2=0,D2=0,C2=0,B2=0,Z1=0,Y1=0,W1=1] 
* CE 128: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):2+ min(V,Y1):1+ head(V,Z1):2+ tail(V,A2):1+ replace(B2,Z1,C2,D2):3+ sortIter(E2,F2,Out)
     [V>=Z1+1,F2>=V+1,Z1>=0,V+V1+1=F2,V=X1+1,E2=0,D2=0,C2=0,B2=0,A2=0,Y1=0,W1=1] 
* CE 129: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):2+ min(V,Y1):1+ head(V,Z1):2+ tail(V,A2):2+ replace(B2,Z1,A2,C2):1+ sortIter(C2,D2,Out)
     [A2>=C2,V>=A2+1,V>=Z1+1,D2>=V+1,C2>=1,A2>=2,Z1>=0,V+V1+1=D2,V=X1+1,B2=0,Y1=0,W1=1] 
* CE 130: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):2+ min(V,Y1):1+ head(V,Z1):2+ tail(V,A2):2+ replace(B2,Z1,A2,C2):2+ sortIter(C2,D2,Out)
     [Z1+A2>=C2,V>=A2+1,C2>=Z1+1,V>=Z1+1,D2>=V+1,Z1>=0,V+V1+1=D2,V=X1+1,B2=0,Y1=0,W1=1] 
* CE 131: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):2+ min(V,Y1):1+ head(V,Z1):2+ tail(V,A2):2+ replace(B2,Z1,A2,C2):3+ sortIter(D2,E2,Out)
     [V>=A2+1,V>=Z1+1,E2>=V+1,A2>=0,Z1>=0,V+V1+1=E2,V=X1+1,D2=0,C2=0,B2=0,Y1=0,W1=1] 
* CE 132: sortIter(V,V1,Out) = 2+ empty(W1,X1):3+ min(Y1,Z1):2+ min(A2,Z1):2+ head(B2,C2):1+ tail(D2,E2):1+ replace(Z1,F2,G2,H2):3+ sortIter(I2,J2,Out)
     [J2>=Z1+2,Z1>=0,V1+Z1+2=J2,Z1+1=D2,Z1+1=B2,Z1+1=A2,Z1+1=Y1,Z1+1=W1,Z1+1=V,I2=0,H2=0,G2=0,F2=0,E2=0,C2=0,X1=1] 
* CE 133: sortIter(V,V1,Out) = 2+ empty(W1,X1):3+ min(Y1,Z1):2+ min(A2,Z1):2+ head(B2,C2):1+ tail(D2,E2):2+ replace(Z1,F2,E2,G2):3+ sortIter(H2,I2,Out)
     [Z1>=E2,I2>=Z1+2,E2>=0,V1+Z1+2=I2,Z1+1=D2,Z1+1=B2,Z1+1=A2,Z1+1=Y1,Z1+1=W1,Z1+1=V,H2=0,G2=0,F2=0,C2=0,X1=1] 
* CE 134: sortIter(V,V1,Out) = 2+ empty(W1,X1):3+ min(Y1,Z1):2+ min(A2,Z1):2+ head(B2,C2):1+ tail(D2,E2):2+ replace(Z1,F2,E2,G2):4+ sortIter(G2,H2,Out)
     [E2>=G2,Z1>=E2,H2>=Z1+2,G2>=1,V1+Z1+2=H2,Z1+1=D2,Z1+1=B2,Z1+1=A2,Z1+1=Y1,Z1+1=W1,Z1+1=V,F2=0,C2=0,X1=1] 
* CE 135: sortIter(V,V1,Out) = 2+ empty(W1,X1):3+ min(Y1,Z1):2+ min(A2,Z1):2+ head(B2,C2):2+ tail(D2,E2):1+ replace(Z1,C2,F2,G2):3+ sortIter(H2,I2,Out)
     [Z1>=C2,I2>=Z1+2,C2>=0,V1+Z1+2=I2,Z1+1=D2,Z1+1=B2,Z1+1=A2,Z1+1=Y1,Z1+1=W1,Z1+1=V,H2=0,G2=0,F2=0,E2=0,X1=1] 
* CE 136: sortIter(V,V1,Out) = 2+ empty(W1,X1):3+ min(Y1,Z1):2+ min(A2,Z1):2+ head(B2,C2):2+ tail(D2,E2):2+ replace(Z1,C2,E2,F2):3+ sortIter(G2,H2,Out)
     [Z1>=E2,Z1>=C2,H2>=Z1+2,E2>=0,C2>=0,V1+Z1+2=H2,Z1+1=D2,Z1+1=B2,Z1+1=A2,Z1+1=Y1,Z1+1=W1,Z1+1=V,G2=0,F2=0,X1=1] 
* CE 137: sortIter(V,V1,Out) = 2+ empty(W1,X1):3+ min(Y1,Z1):2+ min(A2,Z1):2+ head(B2,C2):2+ tail(D2,E2):2+ replace(Z1,C2,E2,F2):4+ sortIter(F2,G2,Out)
     [E2>=F2,Z1>=E2,Z1>=C2,G2>=Z1+2,F2>=1,C2>=0,V1+Z1+2=G2,Z1+1=D2,Z1+1=B2,Z1+1=A2,Z1+1=Y1,Z1+1=W1,Z1+1=V,X1=1] 
* CE 138: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):2+ min(V,Y1):3+ head(V,Z1):1+ tail(V,A2):1+ replace(Y1,B2,C2,D2):3+ sortIter(E2,F2,Out)
     [V>=Y1+2,F2>=V+1,Y1>=0,V+V1+1=F2,V=X1+1,E2=0,D2=0,C2=0,B2=0,A2=0,Z1=0,W1=1] 
* CE 139: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):2+ min(V,Y1):3+ head(V,Z1):1+ tail(V,A2):2+ replace(B2,C2,A2,D2):1+ sortIter(D2,E2,Out)
     [A2>=D2,V>=A2+1,E2>=V+1,D2>=1,A2>=2,V+V1+1=E2,V=X1+1,C2=0,B2=0,Z1=0,Y1=0,W1=1] 
* CE 140: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):2+ min(V,Y1):3+ head(V,Z1):1+ tail(V,A2):2+ replace(B2,C2,A2,D2):2+ sortIter(D2,E2,Out)
     [A2>=D2,V>=A2+1,E2>=V+1,D2>=1,V+V1+1=E2,V=X1+1,C2=0,B2=0,Z1=0,Y1=0,W1=1] 
* CE 141: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):2+ min(V,Y1):3+ head(V,Z1):1+ tail(V,A2):2+ replace(Y1,B2,A2,C2):3+ sortIter(D2,E2,Out)
     [V>=A2+1,V>=Y1+2,E2>=V+1,A2>=0,Y1>=0,V+V1+1=E2,V=X1+1,D2=0,C2=0,B2=0,Z1=0,W1=1] 
* CE 142: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):2+ min(V,Y1):3+ head(V,Z1):1+ tail(V,A2):2+ replace(Y1,B2,A2,C2):4+ sortIter(C2,D2,Out)
     [A2>=C2,V>=A2+1,V>=Y1+2,D2>=V+1,C2>=1,Y1>=1,V+V1+1=D2,V=X1+1,B2=0,Z1=0,W1=1] 
* CE 143: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):2+ min(V,Y1):3+ head(V,Z1):1+ tail(V,A2):2+ replace(Y1,B2,A2,C2):5+ sortIter(C2,D2,Out)
     [A2>=C2,V>=A2+1,A2>=Y1+1,D2>=V+1,C2>=1,Y1>=1,V+V1+1=D2,V=X1+1,B2=0,Z1=0,W1=1] 
* CE 144: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):2+ min(V,Y1):3+ head(V,Z1):2+ tail(V,A2):1+ replace(Y1,Z1,B2,C2):3+ sortIter(D2,E2,Out)
     [V>=Z1+1,V>=Y1+2,E2>=V+1,Z1>=0,Y1>=0,V+V1+1=E2,V=X1+1,D2=0,C2=0,B2=0,A2=0,W1=1] 
* CE 145: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):2+ min(V,Y1):3+ head(V,Z1):2+ tail(V,A2):2+ replace(B2,Z1,A2,C2):1+ sortIter(C2,D2,Out)
     [A2>=C2,V>=A2+1,V>=Z1+1,D2>=V+1,C2>=1,A2>=2,Z1>=0,V+V1+1=D2,V=X1+1,B2=0,Y1=0,W1=1] 
* CE 146: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):2+ min(V,Y1):3+ head(V,Z1):2+ tail(V,A2):2+ replace(B2,Z1,A2,C2):2+ sortIter(C2,D2,Out)
     [Z1+A2>=C2,V>=A2+1,C2>=Z1+1,V>=Z1+1,D2>=V+1,Z1>=0,V+V1+1=D2,V=X1+1,B2=0,Y1=0,W1=1] 
* CE 147: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):2+ min(V,Y1):3+ head(V,Z1):2+ tail(V,A2):2+ replace(Y1,Z1,A2,B2):3+ sortIter(C2,D2,Out)
     [V>=A2+1,V>=Z1+1,V>=Y1+2,D2>=V+1,A2>=0,Z1>=0,Y1>=0,V+V1+1=D2,V=X1+1,C2=0,B2=0,W1=1] 
* CE 148: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):2+ min(V,Y1):3+ head(V,Z1):2+ tail(V,A2):2+ replace(Y1,Z1,A2,B2):4+ sortIter(B2,C2,Out)
     [A2>=B2,V>=A2+1,V>=Z1+1,V>=Y1+2,C2>=V+1,B2>=1,Z1>=0,Y1>=1,V+V1+1=C2,V=X1+1,W1=1] 
* CE 149: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):2+ min(V,Y1):3+ head(V,Z1):2+ tail(V,A2):2+ replace(Y1,Z1,A2,B2):5+ sortIter(B2,C2,Out)
     [Z1+A2>=B2,V>=A2+1,B2>=Z1+1,V>=Z1+1,A2>=Y1+1,C2>=V+1,Z1>=0,Y1>=1,V+V1+1=C2,V=X1+1,W1=1] 
* CE 150: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):3+ min(V,Y1):1+ head(V,Z1):1+ tail(V,A2):1+ replace(B2,C2,D2,E2):3+ sortIter(F2,G2,Out)
     [G2>=X1+2,V>=X1+2,X1>=0,V1+X1+2=G2,F2=0,E2=0,D2=0,C2=0,B2=0,A2=0,Z1=0,Y1=0,W1=1] 
* CE 151: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):3+ min(V,Y1):1+ head(V,Z1):1+ tail(V,A2):2+ replace(B2,C2,A2,D2):1+ sortIter(D2,E2,Out)
     [A2>=D2,V>=A2+1,E2>=X1+2,V>=X1+2,D2>=1,A2>=2,X1>=0,V1+X1+2=E2,C2=0,B2=0,Z1=0,Y1=0,W1=1] 
* CE 152: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):3+ min(V,Y1):1+ head(V,Z1):1+ tail(V,A2):2+ replace(B2,C2,A2,D2):2+ sortIter(D2,E2,Out)
     [A2>=D2,V>=A2+1,E2>=X1+2,V>=X1+2,D2>=1,X1>=0,V1+X1+2=E2,C2=0,B2=0,Z1=0,Y1=0,W1=1] 
* CE 153: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):3+ min(V,Y1):1+ head(V,Z1):1+ tail(V,A2):2+ replace(B2,C2,A2,D2):3+ sortIter(E2,F2,Out)
     [V>=A2+1,F2>=X1+2,V>=X1+2,A2>=0,X1>=0,V1+X1+2=F2,E2=0,D2=0,C2=0,B2=0,Z1=0,Y1=0,W1=1] 
* CE 154: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):3+ min(V,Y1):1+ head(V,Z1):2+ tail(V,A2):1+ replace(B2,Z1,C2,D2):3+ sortIter(E2,F2,Out)
     [V>=Z1+1,F2>=X1+2,V>=X1+2,Z1>=0,X1>=0,V1+X1+2=F2,E2=0,D2=0,C2=0,B2=0,A2=0,Y1=0,W1=1] 
* CE 155: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):3+ min(V,Y1):1+ head(V,Z1):2+ tail(V,A2):2+ replace(B2,Z1,A2,C2):1+ sortIter(C2,D2,Out)
     [A2>=C2,V>=A2+1,V>=Z1+1,D2>=X1+2,V>=X1+2,C2>=1,A2>=2,Z1>=0,X1>=0,V1+X1+2=D2,B2=0,Y1=0,W1=1] 
* CE 156: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):3+ min(V,Y1):1+ head(V,Z1):2+ tail(V,A2):2+ replace(B2,Z1,A2,C2):2+ sortIter(C2,D2,Out)
     [Z1+A2>=C2,V>=A2+1,C2>=Z1+1,V>=Z1+1,D2>=X1+2,V>=X1+2,Z1>=0,X1>=0,V1+X1+2=D2,B2=0,Y1=0,W1=1] 
* CE 157: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):3+ min(V,Y1):1+ head(V,Z1):2+ tail(V,A2):2+ replace(B2,Z1,A2,C2):3+ sortIter(D2,E2,Out)
     [V>=A2+1,V>=Z1+1,E2>=X1+2,V>=X1+2,A2>=0,Z1>=0,X1>=0,V1+X1+2=E2,D2=0,C2=0,B2=0,Y1=0,W1=1] 
* CE 158: sortIter(V,V1,Out) = 2+ empty(W1,X1):3+ min(Y1,Z1):3+ min(A2,B2):2+ head(C2,D2):1+ tail(E2,F2):1+ replace(B2,G2,H2,I2):3+ sortIter(J2,K2,Out)
     [K2>=Z1+2,B2>=Z1+1,Z1>=0,V1+Z1+2=K2,B2+1=E2,B2+1=C2,B2+1=A2,B2+1=Y1,B2+1=W1,B2+1=V,J2=0,I2=0,H2=0,G2=0,F2=0,D2=0,X1=1] 
* CE 159: sortIter(V,V1,Out) = 2+ empty(W1,X1):3+ min(Y1,Z1):3+ min(A2,B2):2+ head(C2,D2):1+ tail(E2,F2):2+ replace(B2,G2,F2,H2):3+ sortIter(I2,J2,Out)
     [B2>=F2,J2>=Z1+2,B2>=Z1+1,F2>=0,Z1>=0,V1+Z1+2=J2,B2+1=E2,B2+1=C2,B2+1=A2,B2+1=Y1,B2+1=W1,B2+1=V,I2=0,H2=0,G2=0,D2=0,X1=1] 
* CE 160: sortIter(V,V1,Out) = 2+ empty(W1,X1):3+ min(Y1,Z1):3+ min(A2,B2):2+ head(C2,D2):1+ tail(E2,F2):2+ replace(B2,G2,F2,H2):4+ sortIter(H2,I2,Out)
     [F2>=H2,B2>=F2,I2>=Z1+2,B2>=Z1+1,H2>=1,Z1>=0,V1+Z1+2=I2,B2+1=E2,B2+1=C2,B2+1=A2,B2+1=Y1,B2+1=W1,B2+1=V,G2=0,D2=0,X1=1] 
* CE 161: sortIter(V,V1,Out) = 2+ empty(W1,X1):3+ min(Y1,Z1):3+ min(A2,B2):2+ head(C2,D2):2+ tail(E2,F2):1+ replace(B2,D2,G2,H2):3+ sortIter(I2,J2,Out)
     [B2>=D2,J2>=Z1+2,B2>=Z1+1,D2>=0,Z1>=0,V1+Z1+2=J2,B2+1=E2,B2+1=C2,B2+1=A2,B2+1=Y1,B2+1=W1,B2+1=V,I2=0,H2=0,G2=0,F2=0,X1=1] 
* CE 162: sortIter(V,V1,Out) = 2+ empty(W1,X1):3+ min(Y1,Z1):3+ min(A2,B2):2+ head(C2,D2):2+ tail(E2,F2):2+ replace(B2,D2,F2,G2):3+ sortIter(H2,I2,Out)
     [B2>=F2,B2>=D2,I2>=Z1+2,B2>=Z1+1,F2>=0,D2>=0,Z1>=0,V1+Z1+2=I2,B2+1=E2,B2+1=C2,B2+1=A2,B2+1=Y1,B2+1=W1,B2+1=V,H2=0,G2=0,X1=1] 
* CE 163: sortIter(V,V1,Out) = 2+ empty(W1,X1):3+ min(Y1,Z1):3+ min(A2,B2):2+ head(C2,D2):2+ tail(E2,F2):2+ replace(B2,D2,F2,G2):4+ sortIter(G2,H2,Out)
     [F2>=G2,B2>=F2,B2>=D2,H2>=Z1+2,B2>=Z1+1,G2>=1,D2>=0,Z1>=0,V1+Z1+2=H2,B2+1=E2,B2+1=C2,B2+1=A2,B2+1=Y1,B2+1=W1,B2+1=V,X1=1] 
* CE 164: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):3+ min(V,Y1):3+ head(V,Z1):1+ tail(V,A2):1+ replace(Y1,B2,C2,D2):3+ sortIter(E2,F2,Out)
     [V>=Y1+2,F2>=X1+2,V>=X1+2,Y1>=0,X1>=0,V1+X1+2=F2,E2=0,D2=0,C2=0,B2=0,A2=0,Z1=0,W1=1] 
* CE 165: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):3+ min(V,Y1):3+ head(V,Z1):1+ tail(V,A2):2+ replace(B2,C2,A2,D2):1+ sortIter(D2,E2,Out)
     [A2>=D2,V>=A2+1,E2>=X1+2,V>=X1+2,D2>=1,A2>=2,X1>=0,V1+X1+2=E2,C2=0,B2=0,Z1=0,Y1=0,W1=1] 
* CE 166: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):3+ min(V,Y1):3+ head(V,Z1):1+ tail(V,A2):2+ replace(B2,C2,A2,D2):2+ sortIter(D2,E2,Out)
     [A2>=D2,V>=A2+1,E2>=X1+2,V>=X1+2,D2>=1,X1>=0,V1+X1+2=E2,C2=0,B2=0,Z1=0,Y1=0,W1=1] 
* CE 167: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):3+ min(V,Y1):3+ head(V,Z1):1+ tail(V,A2):2+ replace(Y1,B2,A2,C2):3+ sortIter(D2,E2,Out)
     [V>=A2+1,V>=Y1+2,E2>=X1+2,V>=X1+2,A2>=0,Y1>=0,X1>=0,V1+X1+2=E2,D2=0,C2=0,B2=0,Z1=0,W1=1] 
* CE 168: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):3+ min(V,Y1):3+ head(V,Z1):1+ tail(V,A2):2+ replace(Y1,B2,A2,C2):4+ sortIter(C2,D2,Out)
     [A2>=C2,V>=A2+1,V>=Y1+2,D2>=X1+2,V>=X1+2,C2>=1,Y1>=1,X1>=0,V1+X1+2=D2,B2=0,Z1=0,W1=1] 
* CE 169: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):3+ min(V,Y1):3+ head(V,Z1):1+ tail(V,A2):2+ replace(Y1,B2,A2,C2):5+ sortIter(C2,D2,Out)
     [A2>=C2,V>=A2+1,A2>=Y1+1,D2>=X1+2,V>=X1+2,C2>=1,Y1>=1,X1>=0,V1+X1+2=D2,B2=0,Z1=0,W1=1] 
* CE 170: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):3+ min(V,Y1):3+ head(V,Z1):2+ tail(V,A2):1+ replace(Y1,Z1,B2,C2):3+ sortIter(D2,E2,Out)
     [V>=Z1+1,V>=Y1+2,E2>=X1+2,V>=X1+2,Z1>=0,Y1>=0,X1>=0,V1+X1+2=E2,D2=0,C2=0,B2=0,A2=0,W1=1] 
* CE 171: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):3+ min(V,Y1):3+ head(V,Z1):2+ tail(V,A2):2+ replace(B2,Z1,A2,C2):1+ sortIter(C2,D2,Out)
     [A2>=C2,V>=A2+1,V>=Z1+1,D2>=X1+2,V>=X1+2,C2>=1,A2>=2,Z1>=0,X1>=0,V1+X1+2=D2,B2=0,Y1=0,W1=1] 
* CE 172: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):3+ min(V,Y1):3+ head(V,Z1):2+ tail(V,A2):2+ replace(B2,Z1,A2,C2):2+ sortIter(C2,D2,Out)
     [Z1+A2>=C2,V>=A2+1,C2>=Z1+1,V>=Z1+1,D2>=X1+2,V>=X1+2,Z1>=0,X1>=0,V1+X1+2=D2,B2=0,Y1=0,W1=1] 
* CE 173: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):3+ min(V,Y1):3+ head(V,Z1):2+ tail(V,A2):2+ replace(Y1,Z1,A2,B2):3+ sortIter(C2,D2,Out)
     [V>=A2+1,V>=Z1+1,V>=Y1+2,D2>=X1+2,V>=X1+2,A2>=0,Z1>=0,Y1>=0,X1>=0,V1+X1+2=D2,C2=0,B2=0,W1=1] 
* CE 174: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):3+ min(V,Y1):3+ head(V,Z1):2+ tail(V,A2):2+ replace(Y1,Z1,A2,B2):4+ sortIter(B2,C2,Out)
     [A2>=B2,V>=A2+1,V>=Z1+1,V>=Y1+2,C2>=X1+2,V>=X1+2,B2>=1,Z1>=0,Y1>=1,X1>=0,V1+X1+2=C2,W1=1] 
* CE 175: sortIter(V,V1,Out) = 2+ empty(V,W1):3+ min(V,X1):3+ min(V,Y1):3+ head(V,Z1):2+ tail(V,A2):2+ replace(Y1,Z1,A2,B2):5+ sortIter(B2,C2,Out)
     [Z1+A2>=B2,V>=A2+1,B2>=Z1+1,V>=Z1+1,A2>=Y1+1,C2>=X1+2,V>=X1+2,Z1>=0,Y1>=1,X1>=0,V1+X1+2=C2,W1=1] 

### Cost equations --> "Loop" of sortIter/3 
* CEs [152,160,163,166] --> Loop 55 
* CEs [151,155,165,168,169,171,174,175] --> Loop 56 
* CEs [125,126,129,130,134,137,139,140,142,143,145,146,148,149] --> Loop 57 
* CEs [99,100,103,104,108,111,113,114,116,117,119,120,122,123,156,172] --> Loop 58 
* CEs [150,153,154,157,158,159,161,162,164,167,170,173] --> Loop 59 
* CEs [124,127,128,131,132,133,135,136,138,141,144,147] --> Loop 60 
* CEs [98,101,102,105,106,107,109,110,112,115,118,121] --> Loop 61 
* CEs [90] --> Loop 62 
* CEs [91,92,93,94,95,96,97] --> Loop 63 

#### Loops of sortIter/3 
* Loop 55: sortIter(V,V1,Out)->  sortIter(V',V1',Out)
                  [V+V1>=V1',V>=V'+1,V1'>=V1+2,V'>=1,V1>=0] 
* Loop 56: sortIter(V,V1,Out)->  sortIter(V',V1',Out)
                  [V+V1>=V1',2*V>=V'+2,V1'>=V1+2,V'>=1,V1>=0,V>=3] 
* Loop 57: sortIter(V,V1,Out)->  sortIter(V',V1',Out)
                  [2*V>=V'+2,V'>=1,V1>=0,V>=2,V+V1+1=V1'] 
* Loop 58: sortIter(V,V1,Out)->  sortIter(V',V1',Out)
                  [V+V1>=V1',2*V>=V'+2,V1'>=V1+2,V'>=1,V1>=0] 
* Loop 59: sortIter(V,V1,Out)->  sortIter(V',V1',Out)
                  [V+V1>=V1',V1'>=V1+2,V1>=0,V'=0] 
* Loop 60: sortIter(V,V1,Out)->  sortIter(V',V1',Out)
                  [V1>=0,V>=1,V+V1+1=V1',V'=0] 
* Loop 61: sortIter(V,V1,Out)->  sortIter(V',V1',Out)
                  [V1>=0,V>=1,V1+2=V1',V'=0] 
* Loop 62: sortIter(A,B,B) [B>=0,A=0] 
* Loop 63: sortIter(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR sortIter(V,V1,Out) 

#### Partial ranking functions of CR sortIter(V,V1,Out) 
* Partial RF of phase [55,56,57,58]:
  - RF of loop [55:1]:
    V-1 depends on loops [56:1,57:1,58:1] 


### Resulting Chains:sortIter(V,V1,Out) 
* [[55,56,57,58]]...
* [[55,56,57,58],63]
* [[55,56,57,58],61,63]
* [[55,56,57,58],61,62]
* [[55,56,57,58],60,63]
* [[55,56,57,58],60,62]
* [[55,56,57,58],59,63]
* [[55,56,57,58],59,62]
* [63]
* [62]
* [61,63]
* [61,62]
* [60,63]
* [60,62]
* [59,63]
* [59,62]


### Merging Chains  sortIter/3 into  External patterns of execution 
* [[62]] --> 1 
* [[63,59],[63,60],[63,61],[63],[63,59,[55,56,57,58]],[63,60,[55,56,57,58]],[63,61,[55,56,57,58]],[63,[55,56,57,58]]] --> 2 
* [[62,61]] --> 3 
* [[62,60]] --> 4 
* [[62,59,[55,56,57,58]],[62,60,[55,56,57,58]],[62,61,[55,56,57,58]]] --> 5 
* [[62,59]] --> 6 
* [[[55,56,57,58]]] --> 7 


### Specialization of cost equations start/4 
* CE 7 is refined into CE [176,177,178] 
* CE 4 is refined into CE [179] 
* CE 6 is refined into CE [180,181,182] 
* CE 2 is refined into CE [183] 
* CE 3 is refined into CE [184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291] 
* CE 5 is refined into CE [292,293,294,295,296] 
* CE 8 is refined into CE [297,298,299,300,301,302,303] 
* CE 9 is refined into CE [304,305,306,307,308] 
* CE 10 is refined into CE [309,310,311] 
* CE 11 is refined into CE [312,313,314,315,316] 
* CE 12 is refined into CE [317,318,319] 
* CE 13 is refined into CE [320,321] 
* CE 14 is refined into CE [322,323] 
* CE 15 is refined into CE [324,325,326,327,328,329,330] 
* CE 16 is refined into CE [331,332,333,334,335,336,337] 


#### Refined cost equations start/4 
* CE 176: start(V,V1,V22,V30) = 1+ min(W30,X30):1
     [V1>=W30+1,W30>=1,X30=0,V=2] 
* CE 177: start(V,V1,V22,V30) = 1+ min(W30,X30):2
     [V1>=X30+2,X30>=0,X30+1=W30,V=2] 
* CE 178: start(V,V1,V22,V30) = 1+ min(W30,X30):3
     [W30>=X30+2,V1>=W30+1,X30>=0,V=2] 
* CE 179: start(V,V1,V22,V30) = 1
     [V30>=0,V22>=0,V1>=0,V=2] 
* CE 180: start(V,V1,V22,V30) = 1+ min(W30,X30):1
     [V1>=W30+1,W30>=1,X30=0,V=1] 
* CE 181: start(V,V1,V22,V30) = 1+ min(W30,X30):2
     [V1>=X30+2,X30>=0,X30+1=W30,V=1] 
* CE 182: start(V,V1,V22,V30) = 1+ min(W30,X30):3
     [W30>=X30+2,V1>=W30+1,X30>=0,V=1] 
* CE 183: start(V,V1,V22,V30) = 0
     [V1>=0,V>=0] 
* CE 184: start(V,V1,V22,V30) = 1+ min(V1,W30):1+ head(V1,X30):1+ tail(V1,Y30):1+ replace(Z30,A31,B31,C31):3+ sortIter(D31,V30,V30):1
     [V30>=0,V1>=0,V22>=0,D31=0,C31=0,B31=0,A31=0,Z30=0,Y30=0,X30=0,W30=0,V=1] 
* CE 185: start(V,V1,V22,V30) = 1+ min(V1,W30):1+ head(V1,X30):1+ tail(V1,Y30):1+ replace(Z30,A31,B31,C31):3+ sortIter(D31,V30,E31):2
     [V30>=0,V1>=0,V22>=0,E31=0,D31=0,C31=0,B31=0,A31=0,Z30=0,Y30=0,X30=0,W30=0,V=1] 
* CE 186: start(V,V1,V22,V30) = 1+ min(V1,W30):1+ head(V1,X30):1+ tail(V1,Y30):2+ replace(Z30,A31,Y30,B31):1+ sortIter(B31,V30,C31):2
     [Y30>=B31,V1>=Y30+1,V30>=0,B31>=1,Y30>=2,V22>=0,C31=0,A31=0,Z30=0,X30=0,W30=0,V=1] 
* CE 187: start(V,V1,V22,V30) = 1+ min(V1,W30):1+ head(V1,X30):1+ tail(V1,Y30):2+ replace(Z30,A31,Y30,B31):1+ sortIter(B31,C31,D31):3
     [Y30>=B31,V1>=Y30+1,D31>=2,B31>=1,Y30>=2,V22>=0,D31=C31+2,D31=V30+2,A31=0,Z30=0,X30=0,W30=0,V=1] 
* CE 188: start(V,V1,V22,V30) = 1+ min(V1,W30):1+ head(V1,X30):1+ tail(V1,Y30):2+ replace(Z30,A31,Y30,B31):1+ sortIter(B31,C31,D31):4
     [D31>=B31+1,Y30>=B31,V1>=Y30+1,B31>=1,Y30>=2,V22>=0,D31=B31+C31+1,D31=V30+B31+1,A31=0,Z30=0,X30=0,W30=0,V=1] 
* CE 189: start(V,V1,V22,V30) = 1+ min(V1,W30):1+ head(V1,X30):1+ tail(V1,Y30):2+ replace(Z30,A31,Y30,B31):1+ sortIter(B31,V30,C31):5
     [C31>=V30+4,Y30>=B31,V1>=Y30+1,V30>=0,B31>=2,V22>=0,A31=0,Z30=0,X30=0,W30=0,V=1] 
* CE 190: start(V,V1,V22,V30) = 1+ min(V1,W30):1+ head(V1,X30):1+ tail(V1,Y30):2+ replace(Z30,A31,Y30,B31):1+ sortIter(B31,V30,C31):6
     [V30+B31>=C31,C31>=V30+2,Y30>=B31,V1>=Y30+1,V30>=0,V22>=0,A31=0,Z30=0,X30=0,W30=0,V=1] 
* CE 191: start(V,V1,V22,V30) = 1+ min(V1,W30):1+ head(V1,X30):1+ tail(V1,Y30):2+ replace(Z30,A31,Y30,B31):1+ sortIter(B31,V30,C31):7
     [Y30>=B31,V1>=Y30+1,V30>=0,B31>=2,V22>=0,A31=0,Z30=0,X30=0,W30=0,V=1] 
* CE 192: start(V,V1,V22,V30) = 1+ min(V1,W30):1+ head(V1,X30):1+ tail(V1,Y30):2+ replace(Z30,A31,Y30,B31):2+ sortIter(B31,V30,C31):2
     [Y30>=B31,V1>=Y30+1,V30>=0,B31>=1,V22>=0,C31=0,A31=0,Z30=0,X30=0,W30=0,V=1] 
* CE 193: start(V,V1,V22,V30) = 1+ min(V1,W30):1+ head(V1,X30):1+ tail(V1,Y30):2+ replace(Z30,A31,Y30,B31):2+ sortIter(B31,C31,D31):3
     [Y30>=B31,V1>=Y30+1,D31>=2,B31>=1,V22>=0,D31=C31+2,D31=V30+2,A31=0,Z30=0,X30=0,W30=0,V=1] 
* CE 194: start(V,V1,V22,V30) = 1+ min(V1,W30):1+ head(V1,X30):1+ tail(V1,Y30):2+ replace(Z30,A31,Y30,B31):2+ sortIter(B31,C31,D31):4
     [D31>=B31+1,Y30>=B31,V1>=Y30+1,B31>=1,V22>=0,D31=B31+C31+1,D31=V30+B31+1,A31=0,Z30=0,X30=0,W30=0,V=1] 
* CE 195: start(V,V1,V22,V30) = 1+ min(V1,W30):1+ head(V1,X30):1+ tail(V1,Y30):2+ replace(Z30,A31,Y30,B31):2+ sortIter(B31,V30,C31):5
     [C31>=V30+4,Y30>=B31,V1>=Y30+1,V30>=0,B31>=2,V22>=0,A31=0,Z30=0,X30=0,W30=0,V=1] 
* CE 196: start(V,V1,V22,V30) = 1+ min(V1,W30):1+ head(V1,X30):1+ tail(V1,Y30):2+ replace(Z30,A31,Y30,B31):2+ sortIter(B31,V30,C31):6
     [V30+B31>=C31,C31>=V30+2,Y30>=B31,V1>=Y30+1,V30>=0,V22>=0,A31=0,Z30=0,X30=0,W30=0,V=1] 
* CE 197: start(V,V1,V22,V30) = 1+ min(V1,W30):1+ head(V1,X30):1+ tail(V1,Y30):2+ replace(Z30,A31,Y30,B31):2+ sortIter(B31,V30,C31):7
     [Y30>=B31,V1>=Y30+1,V30>=0,B31>=2,V22>=0,A31=0,Z30=0,X30=0,W30=0,V=1] 
* CE 198: start(V,V1,V22,V30) = 1+ min(V1,W30):1+ head(V1,X30):1+ tail(V1,Y30):2+ replace(Z30,A31,Y30,B31):3+ sortIter(C31,V30,V30):1
     [V1>=Y30+1,V30>=0,Y30>=0,V22>=0,C31=0,B31=0,A31=0,Z30=0,X30=0,W30=0,V=1] 
* CE 199: start(V,V1,V22,V30) = 1+ min(V1,W30):1+ head(V1,X30):1+ tail(V1,Y30):2+ replace(Z30,A31,Y30,B31):3+ sortIter(C31,V30,D31):2
     [V1>=Y30+1,V30>=0,Y30>=0,V22>=0,D31=0,C31=0,B31=0,A31=0,Z30=0,X30=0,W30=0,V=1] 
* CE 200: start(V,V1,V22,V30) = 1+ min(V1,W30):1+ head(V1,X30):2+ tail(V1,Y30):1+ replace(Z30,X30,A31,B31):3+ sortIter(C31,V30,V30):1
     [V1>=X30+1,V30>=0,X30>=0,V22>=0,C31=0,B31=0,A31=0,Z30=0,Y30=0,W30=0,V=1] 
* CE 201: start(V,V1,V22,V30) = 1+ min(V1,W30):1+ head(V1,X30):2+ tail(V1,Y30):1+ replace(Z30,X30,A31,B31):3+ sortIter(C31,V30,D31):2
     [V1>=X30+1,V30>=0,X30>=0,V22>=0,D31=0,C31=0,B31=0,A31=0,Z30=0,Y30=0,W30=0,V=1] 
* CE 202: start(V,V1,V22,V30) = 1+ min(V1,W30):1+ head(V1,X30):2+ tail(V1,Y30):2+ replace(Z30,X30,Y30,A31):1+ sortIter(A31,V30,B31):2
     [Y30>=A31,V1>=Y30+1,V1>=X30+1,V30>=0,A31>=1,Y30>=2,X30>=0,V22>=0,B31=0,Z30=0,W30=0,V=1] 
* CE 203: start(V,V1,V22,V30) = 1+ min(V1,W30):1+ head(V1,X30):2+ tail(V1,Y30):2+ replace(Z30,X30,Y30,A31):1+ sortIter(A31,B31,C31):3
     [Y30>=A31,V1>=Y30+1,V1>=X30+1,C31>=2,A31>=1,Y30>=2,X30>=0,V22>=0,C31=B31+2,C31=V30+2,Z30=0,W30=0,V=1] 
* CE 204: start(V,V1,V22,V30) = 1+ min(V1,W30):1+ head(V1,X30):2+ tail(V1,Y30):2+ replace(Z30,X30,Y30,A31):1+ sortIter(A31,B31,C31):4
     [C31>=A31+1,Y30>=A31,V1>=Y30+1,V1>=X30+1,A31>=1,Y30>=2,X30>=0,V22>=0,C31=A31+B31+1,C31=V30+A31+1,Z30=0,W30=0,V=1] 
* CE 205: start(V,V1,V22,V30) = 1+ min(V1,W30):1+ head(V1,X30):2+ tail(V1,Y30):2+ replace(Z30,X30,Y30,A31):1+ sortIter(A31,V30,B31):5
     [B31>=V30+4,Y30>=A31,V1>=Y30+1,V1>=X30+1,V30>=0,A31>=2,X30>=0,V22>=0,Z30=0,W30=0,V=1] 
* CE 206: start(V,V1,V22,V30) = 1+ min(V1,W30):1+ head(V1,X30):2+ tail(V1,Y30):2+ replace(Z30,X30,Y30,A31):1+ sortIter(A31,V30,B31):6
     [V30+A31>=B31,B31>=V30+2,Y30>=A31,V1>=Y30+1,V1>=X30+1,V30>=0,X30>=0,V22>=0,Z30=0,W30=0,V=1] 
* CE 207: start(V,V1,V22,V30) = 1+ min(V1,W30):1+ head(V1,X30):2+ tail(V1,Y30):2+ replace(Z30,X30,Y30,A31):1+ sortIter(A31,V30,B31):7
     [Y30>=A31,V1>=Y30+1,V1>=X30+1,V30>=0,A31>=2,X30>=0,V22>=0,Z30=0,W30=0,V=1] 
* CE 208: start(V,V1,V22,V30) = 1+ min(V1,W30):1+ head(V1,X30):2+ tail(V1,Y30):2+ replace(Z30,X30,Y30,A31):2+ sortIter(A31,V30,B31):2
     [X30+Y30>=A31,V1>=Y30+1,A31>=X30+1,V1>=X30+1,V30>=0,X30>=0,V22>=0,B31=0,Z30=0,W30=0,V=1] 
* CE 209: start(V,V1,V22,V30) = 1+ min(V1,W30):1+ head(V1,X30):2+ tail(V1,Y30):2+ replace(Z30,X30,Y30,A31):2+ sortIter(A31,B31,C31):3
     [X30+Y30>=A31,V1>=Y30+1,A31>=X30+1,V1>=X30+1,C31>=2,X30>=0,V22>=0,C31=B31+2,C31=V30+2,Z30=0,W30=0,V=1] 
* CE 210: start(V,V1,V22,V30) = 1+ min(V1,W30):1+ head(V1,X30):2+ tail(V1,Y30):2+ replace(Z30,X30,Y30,A31):2+ sortIter(A31,B31,C31):4
     [X30+Y30>=A31,C31>=A31+1,V1>=Y30+1,A31>=X30+1,V1>=X30+1,X30>=0,V22>=0,C31=A31+B31+1,C31=V30+A31+1,Z30=0,W30=0,V=1] 
* CE 211: start(V,V1,V22,V30) = 1+ min(V1,W30):1+ head(V1,X30):2+ tail(V1,Y30):2+ replace(Z30,X30,Y30,A31):2+ sortIter(A31,V30,B31):5
     [X30+Y30>=A31,B31>=V30+4,V1>=Y30+1,A31>=X30+1,V1>=X30+1,V30>=0,A31>=2,X30>=0,V22>=0,Z30=0,W30=0,V=1] 
* CE 212: start(V,V1,V22,V30) = 1+ min(V1,W30):1+ head(V1,X30):2+ tail(V1,Y30):2+ replace(Z30,X30,Y30,A31):2+ sortIter(A31,V30,B31):6
     [V30+A31>=B31,X30+Y30>=A31,B31>=V30+2,V1>=Y30+1,A31>=X30+1,V1>=X30+1,V30>=0,X30>=0,V22>=0,Z30=0,W30=0,V=1] 
* CE 213: start(V,V1,V22,V30) = 1+ min(V1,W30):1+ head(V1,X30):2+ tail(V1,Y30):2+ replace(Z30,X30,Y30,A31):2+ sortIter(A31,V30,B31):7
     [X30+Y30>=A31,V1>=Y30+1,A31>=X30+1,V1>=X30+1,V30>=0,A31>=2,X30>=0,V22>=0,Z30=0,W30=0,V=1] 
* CE 214: start(V,V1,V22,V30) = 1+ min(V1,W30):1+ head(V1,X30):2+ tail(V1,Y30):2+ replace(Z30,X30,Y30,A31):3+ sortIter(B31,V30,V30):1
     [V1>=Y30+1,V1>=X30+1,V30>=0,Y30>=0,X30>=0,V22>=0,B31=0,A31=0,Z30=0,W30=0,V=1] 
* CE 215: start(V,V1,V22,V30) = 1+ min(V1,W30):1+ head(V1,X30):2+ tail(V1,Y30):2+ replace(Z30,X30,Y30,A31):3+ sortIter(B31,V30,C31):2
     [V1>=Y30+1,V1>=X30+1,V30>=0,Y30>=0,X30>=0,V22>=0,C31=0,B31=0,A31=0,Z30=0,W30=0,V=1] 
* CE 216: start(V,V1,V22,V30) = 1+ min(W30,X30):2+ head(Y30,Z30):1+ tail(A31,B31):1+ replace(X30,C31,D31,E31):3+ sortIter(F31,V30,V30):1
     [V30>=0,X30>=0,V22>=0,X30+1=A31,X30+1=Y30,X30+1=W30,X30+1=V1,F31=0,E31=0,D31=0,C31=0,B31=0,Z30=0,V=1] 
* CE 217: start(V,V1,V22,V30) = 1+ min(W30,X30):2+ head(Y30,Z30):1+ tail(A31,B31):1+ replace(X30,C31,D31,E31):3+ sortIter(F31,V30,G31):2
     [V30>=0,X30>=0,V22>=0,X30+1=A31,X30+1=Y30,X30+1=W30,X30+1=V1,G31=0,F31=0,E31=0,D31=0,C31=0,B31=0,Z30=0,V=1] 
* CE 218: start(V,V1,V22,V30) = 1+ min(W30,X30):2+ head(Y30,Z30):1+ tail(A31,B31):2+ replace(X30,C31,B31,D31):3+ sortIter(E31,V30,V30):1
     [X30>=B31,V30>=0,B31>=0,V22>=0,X30+1=A31,X30+1=Y30,X30+1=W30,X30+1=V1,E31=0,D31=0,C31=0,Z30=0,V=1] 
* CE 219: start(V,V1,V22,V30) = 1+ min(W30,X30):2+ head(Y30,Z30):1+ tail(A31,B31):2+ replace(X30,C31,B31,D31):3+ sortIter(E31,V30,F31):2
     [X30>=B31,V30>=0,B31>=0,V22>=0,X30+1=A31,X30+1=Y30,X30+1=W30,X30+1=V1,F31=0,E31=0,D31=0,C31=0,Z30=0,V=1] 
* CE 220: start(V,V1,V22,V30) = 1+ min(W30,X30):2+ head(Y30,Z30):1+ tail(A31,B31):2+ replace(X30,C31,B31,D31):4+ sortIter(D31,V30,E31):2
     [B31>=D31,X30>=B31,V30>=0,D31>=1,V22>=0,X30+1=A31,X30+1=Y30,X30+1=W30,X30+1=V1,E31=0,C31=0,Z30=0,V=1] 
* CE 221: start(V,V1,V22,V30) = 1+ min(W30,X30):2+ head(Y30,Z30):1+ tail(A31,B31):2+ replace(X30,C31,B31,D31):4+ sortIter(D31,E31,F31):3
     [B31>=D31,X30>=B31,F31>=2,D31>=1,V22>=0,F31=E31+2,X30+1=A31,X30+1=Y30,X30+1=W30,F31=V30+2,X30+1=V1,C31=0,Z30=0,V=1] 
* CE 222: start(V,V1,V22,V30) = 1+ min(W30,X30):2+ head(Y30,Z30):1+ tail(A31,B31):2+ replace(X30,C31,B31,D31):4+ sortIter(D31,E31,F31):4
     [F31>=D31+1,B31>=D31,X30>=B31,D31>=1,V22>=0,F31=D31+E31+1,F31=V30+D31+1,X30+1=A31,X30+1=Y30,X30+1=W30,X30+1=V1,C31=0,Z30=0,V=1] 
* CE 223: start(V,V1,V22,V30) = 1+ min(W30,X30):2+ head(Y30,Z30):1+ tail(A31,B31):2+ replace(X30,C31,B31,D31):4+ sortIter(D31,V30,E31):5
     [E31>=V30+4,B31>=D31,X30>=B31,V30>=0,D31>=2,V22>=0,X30+1=A31,X30+1=Y30,X30+1=W30,X30+1=V1,C31=0,Z30=0,V=1] 
* CE 224: start(V,V1,V22,V30) = 1+ min(W30,X30):2+ head(Y30,Z30):1+ tail(A31,B31):2+ replace(X30,C31,B31,D31):4+ sortIter(D31,V30,E31):6
     [V30+D31>=E31,E31>=V30+2,B31>=D31,X30>=B31,V30>=0,V22>=0,X30+1=A31,X30+1=Y30,X30+1=W30,X30+1=V1,C31=0,Z30=0,V=1] 
* CE 225: start(V,V1,V22,V30) = 1+ min(W30,X30):2+ head(Y30,Z30):1+ tail(A31,B31):2+ replace(X30,C31,B31,D31):4+ sortIter(D31,V30,E31):7
     [B31>=D31,X30>=B31,V30>=0,D31>=2,V22>=0,X30+1=A31,X30+1=Y30,X30+1=W30,X30+1=V1,C31=0,Z30=0,V=1] 
* CE 226: start(V,V1,V22,V30) = 1+ min(W30,X30):2+ head(Y30,Z30):2+ tail(A31,B31):1+ replace(X30,Z30,C31,D31):3+ sortIter(E31,V30,V30):1
     [X30>=Z30,V30>=0,Z30>=0,V22>=0,X30+1=A31,X30+1=Y30,X30+1=W30,X30+1=V1,E31=0,D31=0,C31=0,B31=0,V=1] 
* CE 227: start(V,V1,V22,V30) = 1+ min(W30,X30):2+ head(Y30,Z30):2+ tail(A31,B31):1+ replace(X30,Z30,C31,D31):3+ sortIter(E31,V30,F31):2
     [X30>=Z30,V30>=0,Z30>=0,V22>=0,X30+1=A31,X30+1=Y30,X30+1=W30,X30+1=V1,F31=0,E31=0,D31=0,C31=0,B31=0,V=1] 
* CE 228: start(V,V1,V22,V30) = 1+ min(W30,X30):2+ head(Y30,Z30):2+ tail(A31,B31):2+ replace(X30,Z30,B31,C31):3+ sortIter(D31,V30,V30):1
     [X30>=B31,X30>=Z30,V30>=0,B31>=0,Z30>=0,V22>=0,X30+1=A31,X30+1=Y30,X30+1=W30,X30+1=V1,D31=0,C31=0,V=1] 
* CE 229: start(V,V1,V22,V30) = 1+ min(W30,X30):2+ head(Y30,Z30):2+ tail(A31,B31):2+ replace(X30,Z30,B31,C31):3+ sortIter(D31,V30,E31):2
     [X30>=B31,X30>=Z30,V30>=0,B31>=0,Z30>=0,V22>=0,X30+1=A31,X30+1=Y30,X30+1=W30,X30+1=V1,E31=0,D31=0,C31=0,V=1] 
* CE 230: start(V,V1,V22,V30) = 1+ min(W30,X30):2+ head(Y30,Z30):2+ tail(A31,B31):2+ replace(X30,Z30,B31,C31):4+ sortIter(C31,V30,D31):2
     [B31>=C31,X30>=B31,X30>=Z30,V30>=0,C31>=1,Z30>=0,V22>=0,X30+1=A31,X30+1=Y30,X30+1=W30,X30+1=V1,D31=0,V=1] 
* CE 231: start(V,V1,V22,V30) = 1+ min(W30,X30):2+ head(Y30,Z30):2+ tail(A31,B31):2+ replace(X30,Z30,B31,C31):4+ sortIter(C31,D31,E31):3
     [B31>=C31,X30>=B31,X30>=Z30,E31>=2,C31>=1,Z30>=0,V22>=0,E31=D31+2,X30+1=A31,X30+1=Y30,X30+1=W30,E31=V30+2,X30+1=V1,V=1] 
* CE 232: start(V,V1,V22,V30) = 1+ min(W30,X30):2+ head(Y30,Z30):2+ tail(A31,B31):2+ replace(X30,Z30,B31,C31):4+ sortIter(C31,D31,E31):4
     [E31>=C31+1,B31>=C31,X30>=B31,X30>=Z30,C31>=1,Z30>=0,V22>=0,E31=C31+D31+1,E31=V30+C31+1,X30+1=A31,X30+1=Y30,X30+1=W30,X30+1=V1,V=1] 
* CE 233: start(V,V1,V22,V30) = 1+ min(W30,X30):2+ head(Y30,Z30):2+ tail(A31,B31):2+ replace(X30,Z30,B31,C31):4+ sortIter(C31,V30,D31):5
     [D31>=V30+4,B31>=C31,X30>=B31,X30>=Z30,V30>=0,C31>=2,Z30>=0,V22>=0,X30+1=A31,X30+1=Y30,X30+1=W30,X30+1=V1,V=1] 
* CE 234: start(V,V1,V22,V30) = 1+ min(W30,X30):2+ head(Y30,Z30):2+ tail(A31,B31):2+ replace(X30,Z30,B31,C31):4+ sortIter(C31,V30,D31):6
     [V30+C31>=D31,D31>=V30+2,B31>=C31,X30>=B31,X30>=Z30,V30>=0,Z30>=0,V22>=0,X30+1=A31,X30+1=Y30,X30+1=W30,X30+1=V1,V=1] 
* CE 235: start(V,V1,V22,V30) = 1+ min(W30,X30):2+ head(Y30,Z30):2+ tail(A31,B31):2+ replace(X30,Z30,B31,C31):4+ sortIter(C31,V30,D31):7
     [B31>=C31,X30>=B31,X30>=Z30,V30>=0,C31>=2,Z30>=0,V22>=0,X30+1=A31,X30+1=Y30,X30+1=W30,X30+1=V1,V=1] 
* CE 236: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):1+ tail(V1,Y30):1+ replace(W30,Z30,A31,B31):3+ sortIter(C31,V30,V30):1
     [V1>=W30+2,V30>=0,W30>=0,V22>=0,C31=0,B31=0,A31=0,Z30=0,Y30=0,X30=0,V=1] 
* CE 237: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):1+ tail(V1,Y30):1+ replace(W30,Z30,A31,B31):3+ sortIter(C31,V30,D31):2
     [V1>=W30+2,V30>=0,W30>=0,V22>=0,D31=0,C31=0,B31=0,A31=0,Z30=0,Y30=0,X30=0,V=1] 
* CE 238: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):1+ tail(V1,Y30):2+ replace(Z30,A31,Y30,B31):1+ sortIter(B31,V30,C31):2
     [Y30>=B31,V1>=Y30+1,V30>=0,B31>=1,Y30>=2,V22>=0,C31=0,A31=0,Z30=0,X30=0,W30=0,V=1] 
* CE 239: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):1+ tail(V1,Y30):2+ replace(Z30,A31,Y30,B31):1+ sortIter(B31,C31,D31):3
     [Y30>=B31,V1>=Y30+1,D31>=2,B31>=1,Y30>=2,V22>=0,D31=C31+2,D31=V30+2,A31=0,Z30=0,X30=0,W30=0,V=1] 
* CE 240: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):1+ tail(V1,Y30):2+ replace(Z30,A31,Y30,B31):1+ sortIter(B31,C31,D31):4
     [D31>=B31+1,Y30>=B31,V1>=Y30+1,B31>=1,Y30>=2,V22>=0,D31=B31+C31+1,D31=V30+B31+1,A31=0,Z30=0,X30=0,W30=0,V=1] 
* CE 241: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):1+ tail(V1,Y30):2+ replace(Z30,A31,Y30,B31):1+ sortIter(B31,V30,C31):5
     [C31>=V30+4,Y30>=B31,V1>=Y30+1,V30>=0,B31>=2,V22>=0,A31=0,Z30=0,X30=0,W30=0,V=1] 
* CE 242: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):1+ tail(V1,Y30):2+ replace(Z30,A31,Y30,B31):1+ sortIter(B31,V30,C31):6
     [V30+B31>=C31,C31>=V30+2,Y30>=B31,V1>=Y30+1,V30>=0,V22>=0,A31=0,Z30=0,X30=0,W30=0,V=1] 
* CE 243: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):1+ tail(V1,Y30):2+ replace(Z30,A31,Y30,B31):1+ sortIter(B31,V30,C31):7
     [Y30>=B31,V1>=Y30+1,V30>=0,B31>=2,V22>=0,A31=0,Z30=0,X30=0,W30=0,V=1] 
* CE 244: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):1+ tail(V1,Y30):2+ replace(Z30,A31,Y30,B31):2+ sortIter(B31,V30,C31):2
     [Y30>=B31,V1>=Y30+1,V30>=0,B31>=1,V22>=0,C31=0,A31=0,Z30=0,X30=0,W30=0,V=1] 
* CE 245: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):1+ tail(V1,Y30):2+ replace(Z30,A31,Y30,B31):2+ sortIter(B31,C31,D31):3
     [Y30>=B31,V1>=Y30+1,D31>=2,B31>=1,V22>=0,D31=C31+2,D31=V30+2,A31=0,Z30=0,X30=0,W30=0,V=1] 
* CE 246: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):1+ tail(V1,Y30):2+ replace(Z30,A31,Y30,B31):2+ sortIter(B31,C31,D31):4
     [D31>=B31+1,Y30>=B31,V1>=Y30+1,B31>=1,V22>=0,D31=B31+C31+1,D31=V30+B31+1,A31=0,Z30=0,X30=0,W30=0,V=1] 
* CE 247: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):1+ tail(V1,Y30):2+ replace(Z30,A31,Y30,B31):2+ sortIter(B31,V30,C31):5
     [C31>=V30+4,Y30>=B31,V1>=Y30+1,V30>=0,B31>=2,V22>=0,A31=0,Z30=0,X30=0,W30=0,V=1] 
* CE 248: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):1+ tail(V1,Y30):2+ replace(Z30,A31,Y30,B31):2+ sortIter(B31,V30,C31):6
     [V30+B31>=C31,C31>=V30+2,Y30>=B31,V1>=Y30+1,V30>=0,V22>=0,A31=0,Z30=0,X30=0,W30=0,V=1] 
* CE 249: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):1+ tail(V1,Y30):2+ replace(Z30,A31,Y30,B31):2+ sortIter(B31,V30,C31):7
     [Y30>=B31,V1>=Y30+1,V30>=0,B31>=2,V22>=0,A31=0,Z30=0,X30=0,W30=0,V=1] 
* CE 250: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):1+ tail(V1,Y30):2+ replace(W30,Z30,Y30,A31):3+ sortIter(B31,V30,V30):1
     [V1>=Y30+1,V1>=W30+2,V30>=0,Y30>=0,W30>=0,V22>=0,B31=0,A31=0,Z30=0,X30=0,V=1] 
* CE 251: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):1+ tail(V1,Y30):2+ replace(W30,Z30,Y30,A31):3+ sortIter(B31,V30,C31):2
     [V1>=Y30+1,V1>=W30+2,V30>=0,Y30>=0,W30>=0,V22>=0,C31=0,B31=0,A31=0,Z30=0,X30=0,V=1] 
* CE 252: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):1+ tail(V1,Y30):2+ replace(W30,Z30,Y30,A31):4+ sortIter(A31,V30,B31):2
     [Y30>=A31,V1>=Y30+1,V1>=W30+2,V30>=0,A31>=1,W30>=1,V22>=0,B31=0,Z30=0,X30=0,V=1] 
* CE 253: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):1+ tail(V1,Y30):2+ replace(W30,Z30,Y30,A31):4+ sortIter(A31,B31,C31):3
     [Y30>=A31,V1>=Y30+1,V1>=W30+2,C31>=2,A31>=1,W30>=1,V22>=0,C31=B31+2,C31=V30+2,Z30=0,X30=0,V=1] 
* CE 254: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):1+ tail(V1,Y30):2+ replace(W30,Z30,Y30,A31):4+ sortIter(A31,B31,C31):4
     [C31>=A31+1,Y30>=A31,V1>=Y30+1,V1>=W30+2,A31>=1,W30>=1,V22>=0,C31=A31+B31+1,C31=V30+A31+1,Z30=0,X30=0,V=1] 
* CE 255: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):1+ tail(V1,Y30):2+ replace(W30,Z30,Y30,A31):4+ sortIter(A31,V30,B31):5
     [B31>=V30+4,Y30>=A31,V1>=Y30+1,V1>=W30+2,V30>=0,A31>=2,W30>=1,V22>=0,Z30=0,X30=0,V=1] 
* CE 256: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):1+ tail(V1,Y30):2+ replace(W30,Z30,Y30,A31):4+ sortIter(A31,V30,B31):6
     [V30+A31>=B31,B31>=V30+2,Y30>=A31,V1>=Y30+1,V1>=W30+2,V30>=0,W30>=1,V22>=0,Z30=0,X30=0,V=1] 
* CE 257: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):1+ tail(V1,Y30):2+ replace(W30,Z30,Y30,A31):4+ sortIter(A31,V30,B31):7
     [Y30>=A31,V1>=Y30+1,V1>=W30+2,V30>=0,A31>=2,W30>=1,V22>=0,Z30=0,X30=0,V=1] 
* CE 258: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):1+ tail(V1,Y30):2+ replace(W30,Z30,Y30,A31):5+ sortIter(A31,V30,B31):2
     [Y30>=A31,V1>=Y30+1,Y30>=W30+1,V30>=0,A31>=1,W30>=1,V22>=0,B31=0,Z30=0,X30=0,V=1] 
* CE 259: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):1+ tail(V1,Y30):2+ replace(W30,Z30,Y30,A31):5+ sortIter(A31,B31,C31):3
     [Y30>=A31,V1>=Y30+1,Y30>=W30+1,C31>=2,A31>=1,W30>=1,V22>=0,C31=B31+2,C31=V30+2,Z30=0,X30=0,V=1] 
* CE 260: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):1+ tail(V1,Y30):2+ replace(W30,Z30,Y30,A31):5+ sortIter(A31,B31,C31):4
     [C31>=A31+1,Y30>=A31,V1>=Y30+1,Y30>=W30+1,A31>=1,W30>=1,V22>=0,C31=A31+B31+1,C31=V30+A31+1,Z30=0,X30=0,V=1] 
* CE 261: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):1+ tail(V1,Y30):2+ replace(W30,Z30,Y30,A31):5+ sortIter(A31,V30,B31):5
     [B31>=V30+4,Y30>=A31,V1>=Y30+1,Y30>=W30+1,V30>=0,A31>=2,W30>=1,V22>=0,Z30=0,X30=0,V=1] 
* CE 262: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):1+ tail(V1,Y30):2+ replace(W30,Z30,Y30,A31):5+ sortIter(A31,V30,B31):6
     [V30+A31>=B31,B31>=V30+2,Y30>=A31,V1>=Y30+1,Y30>=W30+1,V30>=0,W30>=1,V22>=0,Z30=0,X30=0,V=1] 
* CE 263: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):1+ tail(V1,Y30):2+ replace(W30,Z30,Y30,A31):5+ sortIter(A31,V30,B31):7
     [Y30>=A31,V1>=Y30+1,Y30>=W30+1,V30>=0,A31>=2,W30>=1,V22>=0,Z30=0,X30=0,V=1] 
* CE 264: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):2+ tail(V1,Y30):1+ replace(W30,X30,Z30,A31):3+ sortIter(B31,V30,V30):1
     [V1>=X30+1,V1>=W30+2,V30>=0,X30>=0,W30>=0,V22>=0,B31=0,A31=0,Z30=0,Y30=0,V=1] 
* CE 265: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):2+ tail(V1,Y30):1+ replace(W30,X30,Z30,A31):3+ sortIter(B31,V30,C31):2
     [V1>=X30+1,V1>=W30+2,V30>=0,X30>=0,W30>=0,V22>=0,C31=0,B31=0,A31=0,Z30=0,Y30=0,V=1] 
* CE 266: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):2+ tail(V1,Y30):2+ replace(Z30,X30,Y30,A31):1+ sortIter(A31,V30,B31):2
     [Y30>=A31,V1>=Y30+1,V1>=X30+1,V30>=0,A31>=1,Y30>=2,X30>=0,V22>=0,B31=0,Z30=0,W30=0,V=1] 
* CE 267: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):2+ tail(V1,Y30):2+ replace(Z30,X30,Y30,A31):1+ sortIter(A31,B31,C31):3
     [Y30>=A31,V1>=Y30+1,V1>=X30+1,C31>=2,A31>=1,Y30>=2,X30>=0,V22>=0,C31=B31+2,C31=V30+2,Z30=0,W30=0,V=1] 
* CE 268: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):2+ tail(V1,Y30):2+ replace(Z30,X30,Y30,A31):1+ sortIter(A31,B31,C31):4
     [C31>=A31+1,Y30>=A31,V1>=Y30+1,V1>=X30+1,A31>=1,Y30>=2,X30>=0,V22>=0,C31=A31+B31+1,C31=V30+A31+1,Z30=0,W30=0,V=1] 
* CE 269: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):2+ tail(V1,Y30):2+ replace(Z30,X30,Y30,A31):1+ sortIter(A31,V30,B31):5
     [B31>=V30+4,Y30>=A31,V1>=Y30+1,V1>=X30+1,V30>=0,A31>=2,X30>=0,V22>=0,Z30=0,W30=0,V=1] 
* CE 270: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):2+ tail(V1,Y30):2+ replace(Z30,X30,Y30,A31):1+ sortIter(A31,V30,B31):6
     [V30+A31>=B31,B31>=V30+2,Y30>=A31,V1>=Y30+1,V1>=X30+1,V30>=0,X30>=0,V22>=0,Z30=0,W30=0,V=1] 
* CE 271: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):2+ tail(V1,Y30):2+ replace(Z30,X30,Y30,A31):1+ sortIter(A31,V30,B31):7
     [Y30>=A31,V1>=Y30+1,V1>=X30+1,V30>=0,A31>=2,X30>=0,V22>=0,Z30=0,W30=0,V=1] 
* CE 272: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):2+ tail(V1,Y30):2+ replace(Z30,X30,Y30,A31):2+ sortIter(A31,V30,B31):2
     [X30+Y30>=A31,V1>=Y30+1,A31>=X30+1,V1>=X30+1,V30>=0,X30>=0,V22>=0,B31=0,Z30=0,W30=0,V=1] 
* CE 273: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):2+ tail(V1,Y30):2+ replace(Z30,X30,Y30,A31):2+ sortIter(A31,B31,C31):3
     [X30+Y30>=A31,V1>=Y30+1,A31>=X30+1,V1>=X30+1,C31>=2,X30>=0,V22>=0,C31=B31+2,C31=V30+2,Z30=0,W30=0,V=1] 
* CE 274: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):2+ tail(V1,Y30):2+ replace(Z30,X30,Y30,A31):2+ sortIter(A31,B31,C31):4
     [X30+Y30>=A31,C31>=A31+1,V1>=Y30+1,A31>=X30+1,V1>=X30+1,X30>=0,V22>=0,C31=A31+B31+1,C31=V30+A31+1,Z30=0,W30=0,V=1] 
* CE 275: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):2+ tail(V1,Y30):2+ replace(Z30,X30,Y30,A31):2+ sortIter(A31,V30,B31):5
     [X30+Y30>=A31,B31>=V30+4,V1>=Y30+1,A31>=X30+1,V1>=X30+1,V30>=0,A31>=2,X30>=0,V22>=0,Z30=0,W30=0,V=1] 
* CE 276: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):2+ tail(V1,Y30):2+ replace(Z30,X30,Y30,A31):2+ sortIter(A31,V30,B31):6
     [V30+A31>=B31,X30+Y30>=A31,B31>=V30+2,V1>=Y30+1,A31>=X30+1,V1>=X30+1,V30>=0,X30>=0,V22>=0,Z30=0,W30=0,V=1] 
* CE 277: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):2+ tail(V1,Y30):2+ replace(Z30,X30,Y30,A31):2+ sortIter(A31,V30,B31):7
     [X30+Y30>=A31,V1>=Y30+1,A31>=X30+1,V1>=X30+1,V30>=0,A31>=2,X30>=0,V22>=0,Z30=0,W30=0,V=1] 
* CE 278: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):2+ tail(V1,Y30):2+ replace(W30,X30,Y30,Z30):3+ sortIter(A31,V30,V30):1
     [V1>=Y30+1,V1>=X30+1,V1>=W30+2,V30>=0,Y30>=0,X30>=0,W30>=0,V22>=0,A31=0,Z30=0,V=1] 
* CE 279: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):2+ tail(V1,Y30):2+ replace(W30,X30,Y30,Z30):3+ sortIter(A31,V30,B31):2
     [V1>=Y30+1,V1>=X30+1,V1>=W30+2,V30>=0,Y30>=0,X30>=0,W30>=0,V22>=0,B31=0,A31=0,Z30=0,V=1] 
* CE 280: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):2+ tail(V1,Y30):2+ replace(W30,X30,Y30,Z30):4+ sortIter(Z30,V30,A31):2
     [Y30>=Z30,V1>=Y30+1,V1>=X30+1,V1>=W30+2,V30>=0,Z30>=1,X30>=0,W30>=1,V22>=0,A31=0,V=1] 
* CE 281: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):2+ tail(V1,Y30):2+ replace(W30,X30,Y30,Z30):4+ sortIter(Z30,A31,B31):3
     [Y30>=Z30,V1>=Y30+1,V1>=X30+1,V1>=W30+2,B31>=2,Z30>=1,X30>=0,W30>=1,V22>=0,B31=A31+2,B31=V30+2,V=1] 
* CE 282: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):2+ tail(V1,Y30):2+ replace(W30,X30,Y30,Z30):4+ sortIter(Z30,A31,B31):4
     [B31>=Z30+1,Y30>=Z30,V1>=Y30+1,V1>=X30+1,V1>=W30+2,Z30>=1,X30>=0,W30>=1,V22>=0,B31=Z30+A31+1,B31=V30+Z30+1,V=1] 
* CE 283: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):2+ tail(V1,Y30):2+ replace(W30,X30,Y30,Z30):4+ sortIter(Z30,V30,A31):5
     [A31>=V30+4,Y30>=Z30,V1>=Y30+1,V1>=X30+1,V1>=W30+2,V30>=0,Z30>=2,X30>=0,W30>=1,V22>=0,V=1] 
* CE 284: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):2+ tail(V1,Y30):2+ replace(W30,X30,Y30,Z30):4+ sortIter(Z30,V30,A31):6
     [V30+Z30>=A31,A31>=V30+2,Y30>=Z30,V1>=Y30+1,V1>=X30+1,V1>=W30+2,V30>=0,X30>=0,W30>=1,V22>=0,V=1] 
* CE 285: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):2+ tail(V1,Y30):2+ replace(W30,X30,Y30,Z30):4+ sortIter(Z30,V30,A31):7
     [Y30>=Z30,V1>=Y30+1,V1>=X30+1,V1>=W30+2,V30>=0,Z30>=2,X30>=0,W30>=1,V22>=0,V=1] 
* CE 286: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):2+ tail(V1,Y30):2+ replace(W30,X30,Y30,Z30):5+ sortIter(Z30,V30,A31):2
     [X30+Y30>=Z30,V1>=Y30+1,Z30>=X30+1,V1>=X30+1,Y30>=W30+1,V30>=0,X30>=0,W30>=1,V22>=0,A31=0,V=1] 
* CE 287: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):2+ tail(V1,Y30):2+ replace(W30,X30,Y30,Z30):5+ sortIter(Z30,A31,B31):3
     [X30+Y30>=Z30,V1>=Y30+1,Z30>=X30+1,V1>=X30+1,Y30>=W30+1,B31>=2,X30>=0,W30>=1,V22>=0,B31=A31+2,B31=V30+2,V=1] 
* CE 288: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):2+ tail(V1,Y30):2+ replace(W30,X30,Y30,Z30):5+ sortIter(Z30,A31,B31):4
     [X30+Y30>=Z30,B31>=Z30+1,V1>=Y30+1,Z30>=X30+1,V1>=X30+1,Y30>=W30+1,X30>=0,W30>=1,V22>=0,B31=Z30+A31+1,B31=V30+Z30+1,V=1] 
* CE 289: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):2+ tail(V1,Y30):2+ replace(W30,X30,Y30,Z30):5+ sortIter(Z30,V30,A31):5
     [X30+Y30>=Z30,A31>=V30+4,V1>=Y30+1,Z30>=X30+1,V1>=X30+1,Y30>=W30+1,V30>=0,Z30>=2,X30>=0,W30>=1,V22>=0,V=1] 
* CE 290: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):2+ tail(V1,Y30):2+ replace(W30,X30,Y30,Z30):5+ sortIter(Z30,V30,A31):6
     [V30+Z30>=A31,X30+Y30>=Z30,A31>=V30+2,V1>=Y30+1,Z30>=X30+1,V1>=X30+1,Y30>=W30+1,V30>=0,X30>=0,W30>=1,V22>=0,V=1] 
* CE 291: start(V,V1,V22,V30) = 1+ min(V1,W30):3+ head(V1,X30):2+ tail(V1,Y30):2+ replace(W30,X30,Y30,Z30):5+ sortIter(Z30,V30,A31):7
     [X30+Y30>=Z30,V1>=Y30+1,Z30>=X30+1,V1>=X30+1,Y30>=W30+1,V30>=0,Z30>=2,X30>=0,W30>=1,V22>=0,V=1] 
* CE 292: start(V,V1,V22,V30) = 1+ replace(W30,V22,X30,Y30):1
     [X30>=Y30,V30>=X30+1,Y30>=1,X30>=2,V22>=0,W30=0,V1=0,V=1] 
* CE 293: start(V,V1,V22,V30) = 1+ replace(W30,V22,X30,Y30):2
     [V22+X30>=Y30,V30>=X30+1,Y30>=V22+1,V22>=0,W30=0,V1=0,V=1] 
* CE 294: start(V,V1,V22,V30) = 1+ replace(V1,V22,W30,X30):3
     [V30>=W30+1,W30>=0,V22>=0,V1>=0,X30=0,V=1] 
* CE 295: start(V,V1,V22,V30) = 1+ replace(V1,V22,W30,X30):4
     [W30>=X30,V30>=W30+1,X30>=1,V22>=0,V1>=1,V=1] 
* CE 296: start(V,V1,V22,V30) = 1+ replace(V1,V22,W30,X30):5
     [V22+W30>=X30,V30>=W30+1,X30>=V22+1,W30>=V1+1,V22>=0,V1>=1,V=1] 
* CE 297: start(V,V1,V22,V30) = 0+ eq(W30,X30,Y30):1
     [Y30=2,X30=0,W30=0,V1=0,V=0] 
* CE 298: start(V,V1,V22,V30) = 0+ eq(W30,V1,X30):2
     [V1>=1,X30=1,W30=0,V=0] 
* CE 299: start(V,V1,V22,V30) = 0+ eq(V,W30,X30):3
     [V>=1,X30=1,W30=0,V1=0] 
* CE 300: start(V,V1,V22,V30) = 0+ eq(V,V1,W30):4
     [V1>=0,V>=0,W30=0] 
* CE 301: start(V,V1,V22,V30) = 0+ eq(V,V1,W30):5
     [V1>=V+1,V>=1,W30=1] 
* CE 302: start(V,V1,V22,V30) = 0+ eq(V,V1,W30):6
     [V>=V1+1,V1>=1,W30=1] 
* CE 303: start(A,A,B,C) = 0+ eq(A,A,D):7
     [A>=1,D=2] 
* CE 304: start(V,V1,V22,V30) = 0+ le(W30,V1,X30):1
     [V1>=0,X30=2,W30=0,V=0] 
* CE 305: start(V,V1,V22,V30) = 0+ le(V,W30,X30):2
     [V>=1,X30=1,W30=0,V1=0] 
* CE 306: start(V,V1,V22,V30) = 0+ le(V,V1,W30):3
     [V1>=0,V>=0,W30=0] 
* CE 307: start(V,V1,V22,V30) = 0+ le(V,V1,W30):4
     [V>=V1+1,V1>=1,W30=1] 
* CE 308: start(V,V1,V22,V30) = 0+ le(V,V1,W30):5
     [V1>=V,V>=1,W30=2] 
* CE 309: start(V,V1,V22,V30) = 0+ min(V,W30):1
     [V>=0,W30=0] 
* CE 310: start(V,V1,V22,V30) = 0+ min(W30,X30):2
     [X30>=0,X30+1=W30,X30+1=V] 
* CE 311: start(V,V1,V22,V30) = 0+ min(V,W30):3
     [V>=W30+2,W30>=0] 
* CE 312: start(V,V1,V22,V30) = 0+ replace(W30,V1,V22,X30):1
     [V22>=X30,X30>=1,V22>=2,V1>=0,W30=0,V=0] 
* CE 313: start(V,V1,V22,V30) = 0+ replace(W30,V1,V22,X30):2
     [V1+V22>=X30,X30>=V1+1,V1>=0,W30=0,V=0] 
* CE 314: start(V,V1,V22,V30) = 0+ replace(V,V1,V22,W30):3
     [V22>=0,V1>=0,V>=0,W30=0] 
* CE 315: start(V,V1,V22,V30) = 0+ replace(V,V1,V22,W30):4
     [V22>=W30,W30>=1,V1>=0,V>=1] 
* CE 316: start(V,V1,V22,V30) = 0+ replace(V,V1,V22,W30):5
     [V1+V22>=W30,W30>=V1+1,V22>=V+1,V1>=0,V>=1] 
* CE 317: start(V,V1,V22,V30) = 0+ empty(W30,X30):1
     [X30=2,W30=0,V=0] 
* CE 318: start(V,V1,V22,V30) = 0+ empty(V,W30):2
     [V>=0,W30=0] 
* CE 319: start(V,V1,V22,V30) = 0+ empty(V,W30):3
     [V>=1,W30=1] 
* CE 320: start(V,V1,V22,V30) = 0+ head(V,W30):1
     [V>=0,W30=0] 
* CE 321: start(V,V1,V22,V30) = 0+ head(V,W30):2
     [V>=W30+1,W30>=0] 
* CE 322: start(V,V1,V22,V30) = 0+ tail(V,W30):1
     [V>=0,W30=0] 
* CE 323: start(V,V1,V22,V30) = 0+ tail(V,W30):2
     [V>=W30+1,W30>=0] 
* CE 324: start(V,V1,V22,V30) = 1+ sortIter(W30,X30,Y30):1
     [Y30=0,X30=0,W30=0,V=0] 
* CE 325: start(V,V1,V22,V30) = 1+ sortIter(V,W30,X30):2
     [V>=0,X30=0,W30=0] 
* CE 326: start(V,V1,V22,V30) = 1+ sortIter(V,W30,X30):3
     [V>=1,X30=2,W30=0] 
* CE 327: start(V,V1,V22,V30) = 1+ sortIter(W30,X30,Y30):4
     [Y30>=2,Y30=W30+1,Y30=V+1,X30=0] 
* CE 328: start(V,V1,V22,V30) = 1+ sortIter(V,W30,X30):5
     [X30>=4,V>=2,W30=0] 
* CE 329: start(V,V1,V22,V30) = 1+ sortIter(V,W30,X30):6
     [V>=X30,X30>=2,W30=0] 
* CE 330: start(V,V1,V22,V30) = 1+ sortIter(V,W30,X30):7
     [V>=2,W30=0] 
* CE 331: start(V,V1,V22,V30) = 0+ sortIter(W30,V1,V1):1
     [V1>=0,W30=0,V=0] 
* CE 332: start(V,V1,V22,V30) = 0+ sortIter(V,V1,W30):2
     [V1>=0,V>=0,W30=0] 
* CE 333: start(V,V1,V22,V30) = 0+ sortIter(V,W30,X30):3
     [X30>=2,V>=1,X30=W30+2,X30=V1+2] 
* CE 334: start(V,V1,V22,V30) = 0+ sortIter(V,W30,X30):4
     [X30>=V+1,V>=1,X30=V+W30+1,X30=V+V1+1] 
* CE 335: start(V,V1,V22,V30) = 0+ sortIter(V,V1,W30):5
     [W30>=V1+4,V1>=0,V>=2] 
* CE 336: start(V,V1,V22,V30) = 0+ sortIter(V,V1,W30):6
     [V+V1>=W30,W30>=V1+2,V1>=0] 
* CE 337: start(V,V1,V22,V30) = 0+ sortIter(V,V1,W30):7
     [V1>=0,V>=2] 

### Cost equations --> "Loop" of start/4 
* CEs [330,337] --> Loop 64 
* CEs [191,197,207,213,225,235,243,249,257,263,271,277,285,291] --> Loop 65 
* CEs [303] --> Loop 66 
* CEs [299,305] --> Loop 67 
* CEs [176,177,178] --> Loop 68 
* CEs [179] --> Loop 69 
* CEs [180,181,182] --> Loop 70 
* CEs [184,185,186,187,188,189,190,192,193,194,195,196,198,199,200,201,202,203,204,205,206,208,209,210,211,212,214,215,216,217,218,219,220,221,222,223,224,226,227,228,229,230,231,232,233,234,236,237,238,239,240,241,242,244,245,246,247,248,250,251,252,253,254,255,256,258,259,260,261,262,264,265,266,267,268,269,270,272,273,274,275,276,278,279,280,281,282,283,284,286,287,288,289,290,292,293,294,295,296] --> Loop 71 
* CEs [183,297,298,300,301,302,304,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,331,332,333,334,335,336] --> Loop 72 

#### Loops of start/4 
* Loop 64: start(V,V1,V22,V30) [V>=2] 
* Loop 65: start(V,V1,V22,V30) [V30>=0,V22>=0,V1>=2,V=1] 
* Loop 66: start(A,A,B,C) [A>=1] 
* Loop 67: start(V,V1,V22,V30) [V>=1,V1=0] 
* Loop 68: start(V,V1,V22,V30) [V1>=2,V=2] 
* Loop 69: start(V,V1,V22,V30) [V30>=0,V22>=0,V1>=0,V=2] 
* Loop 70: start(V,V1,V22,V30) [V1>=2,V=1] 
* Loop 71: start(V,V1,V22,V30) [V30>=0,V22>=0,V1>=0,V=1] 
* Loop 72: start(V,V1,V22,V30) [V>=0] 

### Ranking functions of CR start(V,V1,V22,V30) 

#### Partial ranking functions of CR start(V,V1,V22,V30) 


### Resulting Chains:start(V,V1,V22,V30) 
* [72]
* [71]
* [70]
* [69]
* [68]
* [67]
* [66]
* [65]...
* [64]...


### Merging Chains  start/4 into  External patterns of execution 
* [[71],[72]] --> 1 
* [[70]] --> 2 
* [[69]] --> 3 
* [[68]] --> 4 
* [[67]] --> 5 
* [[66]] --> 6 
* [[65]] --> 7 
* [[64]] --> 8 


Computing Bounds
=====================================

#### Cost of chains of empty(V,Out):
* Chain [32]: 1
  with precondition: [V=0,Out=2] 

* Chain [31]: 0
  with precondition: [Out=0,V>=0] 

* Chain [30]: 1
  with precondition: [Out=1,V>=1] 


#### Cost of loops [33] 

 * loop 33:eq(V,V1,Out) -> [eq(V',V1',Out')] 
1
#### Cost of phase [33]:eq(V,V1,Out) -> [eq(V',V1',Out')] 
1*it(33)+0
  Such that:it(33) =< V
it(33) =< V-V'
it(33) =< V1
it(33) =< V1-V1'

#### Cost of phase [33]:eq(V,V1,Out) -> [eq(V',V1',Out')] 
1*it(33)+0
  Such that:it(33) =< V
it(33) =< V-V'
it(33) =< V1
it(33) =< V1-V1'

#### Cost of phase [33]:eq(V,V1,Out) -> [eq(V',V1',Out')] 
1*it(33)+0
  Such that:it(33) =< V
it(33) =< V-V'
it(33) =< V1
it(33) =< V1-V1'

#### Cost of phase [33]:eq(V,V1,Out) -> [eq(V',V1',Out')] 
1*it(33)+0
  Such that:it(33) =< V
it(33) =< V-V'
it(33) =< V1
it(33) =< V1-V1'

#### Cost of chains of eq(V,V1,Out):
* Chain [[33],37]: 1*it(33)+1
  Such that:it(33) =< V

  with precondition: [Out=2,V=V1,V>=1] 

* Chain [[33],36]: 1*it(33)+1
  Such that:it(33) =< V

  with precondition: [Out=1,V>=1,V1>=V+1] 

* Chain [[33],35]: 1*it(33)+1
  Such that:it(33) =< V1

  with precondition: [Out=1,V1>=1,V>=V1+1] 

* Chain [[33],34]: 1*it(33)+0
  Such that:it(33) =< V1

  with precondition: [Out=0,V>=1,V1>=1] 

* Chain [37]: 1
  with precondition: [V=0,V1=0,Out=2] 

* Chain [36]: 1
  with precondition: [V=0,Out=1,V1>=1] 

* Chain [35]: 1
  with precondition: [V1=0,Out=1,V>=1] 

* Chain [34]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [38] 

 * loop 38:le(V,V1,Out) -> [le(V',V1',Out')] 
1
#### Cost of phase [38]:le(V,V1,Out) -> [le(V',V1',Out')] 
1*it(38)+0
  Such that:it(38) =< V
it(38) =< V-V'
it(38) =< V1
it(38) =< V1-V1'

#### Cost of phase [38]:le(V,V1,Out) -> [le(V',V1',Out')] 
1*it(38)+0
  Such that:it(38) =< V
it(38) =< V-V'
it(38) =< V1
it(38) =< V1-V1'

#### Cost of phase [38]:le(V,V1,Out) -> [le(V',V1',Out')] 
1*it(38)+0
  Such that:it(38) =< V
it(38) =< V-V'
it(38) =< V1
it(38) =< V1-V1'

#### Cost of chains of le(V,V1,Out):
* Chain [[38],41]: 1*it(38)+1
  Such that:it(38) =< V

  with precondition: [Out=2,V>=1,V1>=V] 

* Chain [[38],40]: 1*it(38)+1
  Such that:it(38) =< V1

  with precondition: [Out=1,V1>=1,V>=V1+1] 

* Chain [[38],39]: 1*it(38)+0
  Such that:it(38) =< V1

  with precondition: [Out=0,V>=1,V1>=1] 

* Chain [41]: 1
  with precondition: [V=0,Out=2,V1>=0] 

* Chain [40]: 1
  with precondition: [V1=0,Out=1,V>=1] 

* Chain [39]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [42] 

 * loop 42:min(V,Out) -> [min(V',Out')] 
2*s(9)+3
  Such that:s(8) =< V/2
s(9) =< s(8)

#### Cost of phase [42]:min(V,Out) -> [min(V',Out')] 
3*it(42)+2*s(10)+0
  Such that:it(42) =< V
it(42) =< V-V'
aux(3) =< V/2
s(11) =< it(42)*aux(3)
s(10) =< s(11)

#### Cost of phase [42]:min(V,Out) -> [min(V',Out')] 
3*it(42)+2*s(10)+0
  Such that:it(42) =< V
it(42) =< V-V'
aux(3) =< V/2
s(11) =< it(42)*aux(3)
s(10) =< s(11)

#### Cost of chains of min(V,Out):
* Chain [[42],44]: 6*it(42)+2*s(10)+2
  Such that:aux(3) =< V/2
aux(4) =< V
it(42) =< aux(4)
s(11) =< it(42)*aux(3)
s(10) =< s(11)

  with precondition: [Out=0,V>=2] 

* Chain [[42],43]: 3*it(42)+2*s(10)+1
  Such that:it(42) =< V-Out
aux(3) =< V/2
s(11) =< it(42)*aux(3)
s(10) =< s(11)

  with precondition: [Out>=0,V>=Out+2] 

* Chain [44]: 1*s(3)+2*s(4)+2
  Such that:s(3) =< V
aux(1) =< V/2
s(4) =< aux(1)

  with precondition: [Out=0,V>=0] 

* Chain [43]: 1
  with precondition: [V=Out+1,V>=1] 


#### Cost of loops [46] 

 * loop 46:replace(V,V1,V22,Out) -> [replace(V',V1',V22',Out')] 
3
#### Cost of phase [46]:replace(V,V1,V22,Out) -> [replace(V',V1',V22',Out')] 
3*it(46)+0
  Such that:it(46) =< V22
it(46) =< V22-V22'

#### Cost of phase [46]:replace(V,V1,V22,Out) -> [replace(V',V1',V22',Out')] 
3*it(46)+0
  Such that:it(46) =< V22
it(46) =< V22-V22'

#### Cost of phase [46]:replace(V,V1,V22,Out) -> [replace(V',V1',V22',Out')] 
3*it(46)+0
  Such that:it(46) =< V22
it(46) =< V22-V22'

#### Cost of loops [45] 

 * loop 45:replace(V,V1,V22,Out) -> [replace(V',V1',V22',Out')] 
1*s(27)+1*s(26)+3
  Such that:s(26) =< V22
s(27) =< V'

#### Cost of phase [45]:replace(V,V1,V22,Out) -> [replace(V',V1',V22',Out')] 
3*it(45)+1*s(28)+1*s(29)+0
  Such that:aux(10) =< V
it(45) =< V22-V22'
aux(11) =< V22
it(45) =< aux(11)
s(28) =< it(45)*aux(10)
s(29) =< it(45)*aux(11)

#### Cost of phase [45]:replace(V,V1,V22,Out) -> [replace(V',V1',V22',Out')] 
3*it(45)+1*s(28)+1*s(29)+0
  Such that:aux(10) =< V
it(45) =< V22-V22'
aux(11) =< V22
it(45) =< aux(11)
s(28) =< it(45)*aux(10)
s(29) =< it(45)*aux(11)

#### Cost of phase [45]:replace(V,V1,V22,Out) -> [replace(V',V1',V22',Out')] 
3*it(45)+1*s(28)+1*s(29)+0
  Such that:aux(10) =< V
it(45) =< V22-V22'
aux(11) =< V22
it(45) =< aux(11)
s(28) =< it(45)*aux(10)
s(29) =< it(45)*aux(11)

#### Cost of chains of replace(V,V1,V22,Out):
* Chain [[46],50]: 3*it(46)+2*s(20)+2
  Such that:aux(8) =< V22-Out
it(46) =< Out
s(20) =< aux(8)

  with precondition: [V=0,V1>=0,V22>=2,Out>=1,V22>=Out] 

* Chain [[46],49]: 3*it(46)+3
  Such that:it(46) =< -V1+Out

  with precondition: [V=0,V1>=0,Out>=V1+2,V1+V22>=Out] 

* Chain [[46],48]: 3*it(46)+1
  Such that:it(46) =< Out

  with precondition: [V=0,V22=Out,V1>=0,V22>=2] 

* Chain [[45],50]: 3*it(45)+2*s(20)+2*s(21)+1*s(28)+1*s(29)+2
  Such that:aux(11) =< V22
aux(8) =< V22-Out
it(45) =< Out
aux(12) =< V
s(21) =< aux(12)
s(20) =< aux(8)
it(45) =< aux(11)
s(28) =< it(45)*aux(12)
s(29) =< it(45)*aux(11)

  with precondition: [V>=1,V1>=0,Out>=1,V22>=Out] 

* Chain [[45],48]: 3*it(45)+1*s(28)+1*s(29)+1
  Such that:aux(10) =< V
aux(13) =< Out
it(45) =< aux(13)
s(28) =< it(45)*aux(10)
s(29) =< it(45)*aux(13)

  with precondition: [V22=Out,V>=1,V1>=0,V22>=1] 

* Chain [[45],47]: 3*it(45)+1*s(28)+1*s(29)+1*s(30)+3
  Such that:it(45) =< -V+V22
aux(11) =< V22
aux(14) =< V
s(30) =< aux(14)
it(45) =< aux(11)
s(28) =< it(45)*aux(14)
s(29) =< it(45)*aux(11)

  with precondition: [V>=1,V1>=0,V22>=V+2,Out>=V1+2,V1+V22>=Out] 

* Chain [50]: 2*s(20)+2*s(21)+2
  Such that:aux(7) =< V
aux(8) =< V22
s(21) =< aux(7)
s(20) =< aux(8)

  with precondition: [Out=0,V>=0,V1>=0,V22>=0] 

* Chain [49]: 3
  with precondition: [V=0,V1>=0,Out>=V1+1,V1+V22>=Out] 

* Chain [48]: 1
  with precondition: [V22=0,Out=0,V>=0,V1>=0] 

* Chain [47]: 1*s(30)+3
  Such that:s(30) =< V

  with precondition: [V>=1,V1>=0,V22>=V+1,Out>=V1+1,V1+V22>=Out] 


#### Cost of chains of head(V,Out):
* Chain [52]: 0
  with precondition: [Out=0,V>=0] 

* Chain [51]: 1
  with precondition: [Out>=0,V>=Out+1] 


#### Cost of chains of tail(V,Out):
* Chain [54]: 1
  with precondition: [Out=0,V>=0] 

* Chain [53]: 1
  with precondition: [Out>=0,V>=Out+1] 


#### Cost of loops [55,56,57,58] 

 * loop 55:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
12*s(118)+8*s(124)+14*s(117)+2*s(120)+4*s(122)+12*s(119)+6*s(125)+2*s(126)+2*s(127)+4*s(128)+4*s(129)+10
  Such that:s(112) =< V
s(113) =< V+V1-V1'+2
s(114) =< V-V'
s(115) =< V/2
s(116) =< V'
s(117) =< s(112)
s(118) =< s(113)
s(119) =< s(116)
s(120) =< s(115)
s(121) =< s(117)*s(115)
s(122) =< s(121)
s(123) =< s(118)*s(115)
s(124) =< s(123)
s(125) =< s(116)
s(126) =< s(119)*s(112)
s(127) =< s(119)*s(116)
s(128) =< s(114)
s(125) =< s(112)
s(129) =< s(125)*s(112)

 * loop 56:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
24*s(256)+16*s(263)+46*s(255)+4*s(259)+16*s(261)+30*s(257)+12*s(258)+6*s(264)+2*s(265)+2*s(266)+4*s(267)+4*s(268)+10
  Such that:s(250) =< V
s(251) =< V+V1-V1'+2
s(252) =< V-V'
s(253) =< V/2
s(254) =< V'
s(255) =< s(250)
s(256) =< s(251)
s(257) =< s(254)
s(258) =< s(252)
s(259) =< s(253)
s(260) =< s(255)*s(253)
s(261) =< s(260)
s(262) =< s(256)*s(253)
s(263) =< s(262)
s(264) =< s(254)
s(265) =< s(257)*s(250)
s(266) =< s(257)*s(254)
s(264) =< s(250)
s(267) =< s(264)*s(250)
s(268) =< s(255)*s(250)

 * loop 57:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
76*s(409)+8*s(412)+24*s(414)+42*s(410)+16*s(411)+12*s(415)+4*s(416)+4*s(417)+8*s(418)+4*s(419)+11
  Such that:s(405) =< V
s(406) =< V-V'
s(407) =< V/2
s(408) =< V'
s(409) =< s(405)
s(410) =< s(408)
s(411) =< s(406)
s(412) =< s(407)
s(413) =< s(409)*s(407)
s(414) =< s(413)
s(415) =< s(408)
s(416) =< s(410)*s(405)
s(417) =< s(410)*s(408)
s(415) =< s(405)
s(418) =< s(415)*s(405)
s(419) =< s(409)*s(405)

 * loop 58:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
190*s(667)+38*s(668)+56*s(670)+42*s(666)+16*s(674)+12*s(675)+4*s(676)+4*s(677)+8*s(678)+4*s(671)+6*s(665)+4*s(673)+12
  Such that:s(660) =< V
s(661) =< V+V1-V1'+2
s(662) =< V-V'
s(663) =< V/2
s(664) =< V'
s(665) =< s(661)
s(666) =< s(664)
s(667) =< s(660)
s(668) =< s(663)
s(669) =< s(667)*s(663)
s(670) =< s(669)
s(671) =< s(667)*s(660)
s(672) =< s(665)*s(663)
s(673) =< s(672)
s(674) =< s(662)
s(675) =< s(664)
s(676) =< s(666)*s(660)
s(677) =< s(666)*s(664)
s(675) =< s(660)
s(678) =< s(675)*s(660)

#### Cost of phase [55,56,57,58]:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
43*it(55)+12*s(679)+8*s(680)+14*s(681)+2*s(682)+4*s(683)+12*s(684)+6*s(685)+2*s(686)+2*s(687)+4*s(688)+4*s(689)+24*s(697)+16*s(698)+46*s(699)+4*s(700)+16*s(701)+30*s(702)+12*s(703)+6*s(704)+2*s(705)+2*s(706)+4*s(707)+4*s(708)+76*s(716)+8*s(717)+24*s(718)+42*s(719)+16*s(720)+12*s(721)+4*s(722)+4*s(723)+8*s(724)+4*s(725)+190*s(731)+38*s(732)+56*s(733)+42*s(734)+16*s(735)+12*s(736)+4*s(737)+4*s(738)+8*s(739)+4*s(740)+6*s(741)+4*s(742)+0
#### Cost of phase [55,56,57,58]:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
43*it(55)+12*s(679)+8*s(680)+14*s(681)+2*s(682)+4*s(683)+12*s(684)+6*s(685)+2*s(686)+2*s(687)+4*s(688)+4*s(689)+24*s(697)+16*s(698)+46*s(699)+4*s(700)+16*s(701)+30*s(702)+12*s(703)+6*s(704)+2*s(705)+2*s(706)+4*s(707)+4*s(708)+76*s(716)+8*s(717)+24*s(718)+42*s(719)+16*s(720)+12*s(721)+4*s(722)+4*s(723)+8*s(724)+4*s(725)+190*s(731)+38*s(732)+56*s(733)+42*s(734)+16*s(735)+12*s(736)+4*s(737)+4*s(738)+8*s(739)+4*s(740)+6*s(741)+4*s(742)+0
#### Cost of loops [55,56,57,58] 

 * loop 55:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
12*s(118)+8*s(124)+14*s(117)+2*s(120)+4*s(122)+12*s(119)+6*s(125)+2*s(126)+2*s(127)+4*s(128)+4*s(129)+10
  Such that:s(112) =< V
s(113) =< V+V1-V1'+2
s(114) =< V-V'
s(115) =< V/2
s(116) =< V'
s(117) =< s(112)
s(118) =< s(113)
s(119) =< s(116)
s(120) =< s(115)
s(121) =< s(117)*s(115)
s(122) =< s(121)
s(123) =< s(118)*s(115)
s(124) =< s(123)
s(125) =< s(116)
s(126) =< s(119)*s(112)
s(127) =< s(119)*s(116)
s(128) =< s(114)
s(125) =< s(112)
s(129) =< s(125)*s(112)

 * loop 56:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
24*s(256)+16*s(263)+46*s(255)+4*s(259)+16*s(261)+30*s(257)+12*s(258)+6*s(264)+2*s(265)+2*s(266)+4*s(267)+4*s(268)+10
  Such that:s(250) =< V
s(251) =< V+V1-V1'+2
s(252) =< V-V'
s(253) =< V/2
s(254) =< V'
s(255) =< s(250)
s(256) =< s(251)
s(257) =< s(254)
s(258) =< s(252)
s(259) =< s(253)
s(260) =< s(255)*s(253)
s(261) =< s(260)
s(262) =< s(256)*s(253)
s(263) =< s(262)
s(264) =< s(254)
s(265) =< s(257)*s(250)
s(266) =< s(257)*s(254)
s(264) =< s(250)
s(267) =< s(264)*s(250)
s(268) =< s(255)*s(250)

 * loop 57:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
76*s(409)+8*s(412)+24*s(414)+42*s(410)+16*s(411)+12*s(415)+4*s(416)+4*s(417)+8*s(418)+4*s(419)+11
  Such that:s(405) =< V
s(406) =< V-V'
s(407) =< V/2
s(408) =< V'
s(409) =< s(405)
s(410) =< s(408)
s(411) =< s(406)
s(412) =< s(407)
s(413) =< s(409)*s(407)
s(414) =< s(413)
s(415) =< s(408)
s(416) =< s(410)*s(405)
s(417) =< s(410)*s(408)
s(415) =< s(405)
s(418) =< s(415)*s(405)
s(419) =< s(409)*s(405)

 * loop 58:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
190*s(667)+38*s(668)+56*s(670)+42*s(666)+16*s(674)+12*s(675)+4*s(676)+4*s(677)+8*s(678)+4*s(671)+6*s(665)+4*s(673)+12
  Such that:s(660) =< V
s(661) =< V+V1-V1'+2
s(662) =< V-V'
s(663) =< V/2
s(664) =< V'
s(665) =< s(661)
s(666) =< s(664)
s(667) =< s(660)
s(668) =< s(663)
s(669) =< s(667)*s(663)
s(670) =< s(669)
s(671) =< s(667)*s(660)
s(672) =< s(665)*s(663)
s(673) =< s(672)
s(674) =< s(662)
s(675) =< s(664)
s(676) =< s(666)*s(660)
s(677) =< s(666)*s(664)
s(675) =< s(660)
s(678) =< s(675)*s(660)

#### Cost of phase [55,56,57,58]:sortIter(V,V1,Out) -> [] 
43*it(55)+4*it([63])+12*s(679)+8*s(680)+14*s(681)+2*s(682)+4*s(683)+12*s(684)+6*s(685)+2*s(686)+2*s(687)+4*s(688)+4*s(689)+24*s(697)+16*s(698)+46*s(699)+4*s(700)+16*s(701)+30*s(702)+12*s(703)+6*s(704)+2*s(705)+2*s(706)+4*s(707)+4*s(708)+76*s(716)+8*s(717)+24*s(718)+42*s(719)+16*s(720)+12*s(721)+4*s(722)+4*s(723)+8*s(724)+4*s(725)+190*s(731)+38*s(732)+56*s(733)+42*s(734)+16*s(735)+12*s(736)+4*s(737)+4*s(738)+8*s(739)+4*s(740)+6*s(741)+4*s(742)+20*s(776)+4*s(777)+8*s(778)+0
  Such that:it([63]) =< 1

#### Cost of phase [55,56,57,58]:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
43*it(55)+12*s(679)+8*s(680)+14*s(681)+2*s(682)+4*s(683)+12*s(684)+6*s(685)+2*s(686)+2*s(687)+4*s(688)+4*s(689)+24*s(697)+16*s(698)+46*s(699)+4*s(700)+16*s(701)+30*s(702)+12*s(703)+6*s(704)+2*s(705)+2*s(706)+4*s(707)+4*s(708)+76*s(716)+8*s(717)+24*s(718)+42*s(719)+16*s(720)+12*s(721)+4*s(722)+4*s(723)+8*s(724)+4*s(725)+190*s(731)+38*s(732)+56*s(733)+42*s(734)+16*s(735)+12*s(736)+4*s(737)+4*s(738)+8*s(739)+4*s(740)+6*s(741)+4*s(742)+0
#### Cost of loops [55,56,57,58] 

 * loop 55:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
12*s(118)+8*s(124)+14*s(117)+2*s(120)+4*s(122)+12*s(119)+6*s(125)+2*s(126)+2*s(127)+4*s(128)+4*s(129)+10
  Such that:s(112) =< V
s(113) =< V+V1-V1'+2
s(114) =< V-V'
s(115) =< V/2
s(116) =< V'
s(117) =< s(112)
s(118) =< s(113)
s(119) =< s(116)
s(120) =< s(115)
s(121) =< s(117)*s(115)
s(122) =< s(121)
s(123) =< s(118)*s(115)
s(124) =< s(123)
s(125) =< s(116)
s(126) =< s(119)*s(112)
s(127) =< s(119)*s(116)
s(128) =< s(114)
s(125) =< s(112)
s(129) =< s(125)*s(112)

 * loop 56:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
24*s(256)+16*s(263)+46*s(255)+4*s(259)+16*s(261)+30*s(257)+12*s(258)+6*s(264)+2*s(265)+2*s(266)+4*s(267)+4*s(268)+10
  Such that:s(250) =< V
s(251) =< V+V1-V1'+2
s(252) =< V-V'
s(253) =< V/2
s(254) =< V'
s(255) =< s(250)
s(256) =< s(251)
s(257) =< s(254)
s(258) =< s(252)
s(259) =< s(253)
s(260) =< s(255)*s(253)
s(261) =< s(260)
s(262) =< s(256)*s(253)
s(263) =< s(262)
s(264) =< s(254)
s(265) =< s(257)*s(250)
s(266) =< s(257)*s(254)
s(264) =< s(250)
s(267) =< s(264)*s(250)
s(268) =< s(255)*s(250)

 * loop 57:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
76*s(409)+8*s(412)+24*s(414)+42*s(410)+16*s(411)+12*s(415)+4*s(416)+4*s(417)+8*s(418)+4*s(419)+11
  Such that:s(405) =< V
s(406) =< V-V'
s(407) =< V/2
s(408) =< V'
s(409) =< s(405)
s(410) =< s(408)
s(411) =< s(406)
s(412) =< s(407)
s(413) =< s(409)*s(407)
s(414) =< s(413)
s(415) =< s(408)
s(416) =< s(410)*s(405)
s(417) =< s(410)*s(408)
s(415) =< s(405)
s(418) =< s(415)*s(405)
s(419) =< s(409)*s(405)

 * loop 58:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
190*s(667)+38*s(668)+56*s(670)+42*s(666)+16*s(674)+12*s(675)+4*s(676)+4*s(677)+8*s(678)+4*s(671)+6*s(665)+4*s(673)+12
  Such that:s(660) =< V
s(661) =< V+V1-V1'+2
s(662) =< V-V'
s(663) =< V/2
s(664) =< V'
s(665) =< s(661)
s(666) =< s(664)
s(667) =< s(660)
s(668) =< s(663)
s(669) =< s(667)*s(663)
s(670) =< s(669)
s(671) =< s(667)*s(660)
s(672) =< s(665)*s(663)
s(673) =< s(672)
s(674) =< s(662)
s(675) =< s(664)
s(676) =< s(666)*s(660)
s(677) =< s(666)*s(664)
s(675) =< s(660)
s(678) =< s(675)*s(660)

#### Cost of phase [55,56,57,58]:sortIter(V,V1,Out) -> [] 
43*it(55)+15*it([61,63])+12*s(679)+8*s(680)+14*s(681)+2*s(682)+4*s(683)+12*s(684)+6*s(685)+2*s(686)+2*s(687)+4*s(688)+4*s(689)+24*s(697)+16*s(698)+46*s(699)+4*s(700)+16*s(701)+30*s(702)+12*s(703)+6*s(704)+2*s(705)+2*s(706)+4*s(707)+4*s(708)+76*s(716)+8*s(717)+24*s(718)+42*s(719)+16*s(720)+12*s(721)+4*s(722)+4*s(723)+8*s(724)+4*s(725)+190*s(731)+38*s(732)+56*s(733)+42*s(734)+16*s(735)+12*s(736)+4*s(737)+4*s(738)+8*s(739)+4*s(740)+6*s(741)+4*s(742)+152*s(942)+32*s(943)+40*s(944)+0
  Such that:it([61,63]) =< 1

#### Cost of phase [55,56,57,58]:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
43*it(55)+12*s(679)+8*s(680)+14*s(681)+2*s(682)+4*s(683)+12*s(684)+6*s(685)+2*s(686)+2*s(687)+4*s(688)+4*s(689)+24*s(697)+16*s(698)+46*s(699)+4*s(700)+16*s(701)+30*s(702)+12*s(703)+6*s(704)+2*s(705)+2*s(706)+4*s(707)+4*s(708)+76*s(716)+8*s(717)+24*s(718)+42*s(719)+16*s(720)+12*s(721)+4*s(722)+4*s(723)+8*s(724)+4*s(725)+190*s(731)+38*s(732)+56*s(733)+42*s(734)+16*s(735)+12*s(736)+4*s(737)+4*s(738)+8*s(739)+4*s(740)+6*s(741)+4*s(742)+0
#### Cost of loops [55,56,57,58] 

 * loop 55:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
12*s(118)+8*s(124)+14*s(117)+2*s(120)+4*s(122)+12*s(119)+6*s(125)+2*s(126)+2*s(127)+4*s(128)+4*s(129)+10
  Such that:s(112) =< V
s(113) =< V+V1-V1'+2
s(114) =< V-V'
s(115) =< V/2
s(116) =< V'
s(117) =< s(112)
s(118) =< s(113)
s(119) =< s(116)
s(120) =< s(115)
s(121) =< s(117)*s(115)
s(122) =< s(121)
s(123) =< s(118)*s(115)
s(124) =< s(123)
s(125) =< s(116)
s(126) =< s(119)*s(112)
s(127) =< s(119)*s(116)
s(128) =< s(114)
s(125) =< s(112)
s(129) =< s(125)*s(112)

 * loop 56:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
24*s(256)+16*s(263)+46*s(255)+4*s(259)+16*s(261)+30*s(257)+12*s(258)+6*s(264)+2*s(265)+2*s(266)+4*s(267)+4*s(268)+10
  Such that:s(250) =< V
s(251) =< V+V1-V1'+2
s(252) =< V-V'
s(253) =< V/2
s(254) =< V'
s(255) =< s(250)
s(256) =< s(251)
s(257) =< s(254)
s(258) =< s(252)
s(259) =< s(253)
s(260) =< s(255)*s(253)
s(261) =< s(260)
s(262) =< s(256)*s(253)
s(263) =< s(262)
s(264) =< s(254)
s(265) =< s(257)*s(250)
s(266) =< s(257)*s(254)
s(264) =< s(250)
s(267) =< s(264)*s(250)
s(268) =< s(255)*s(250)

 * loop 57:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
76*s(409)+8*s(412)+24*s(414)+42*s(410)+16*s(411)+12*s(415)+4*s(416)+4*s(417)+8*s(418)+4*s(419)+11
  Such that:s(405) =< V
s(406) =< V-V'
s(407) =< V/2
s(408) =< V'
s(409) =< s(405)
s(410) =< s(408)
s(411) =< s(406)
s(412) =< s(407)
s(413) =< s(409)*s(407)
s(414) =< s(413)
s(415) =< s(408)
s(416) =< s(410)*s(405)
s(417) =< s(410)*s(408)
s(415) =< s(405)
s(418) =< s(415)*s(405)
s(419) =< s(409)*s(405)

 * loop 58:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
190*s(667)+38*s(668)+56*s(670)+42*s(666)+16*s(674)+12*s(675)+4*s(676)+4*s(677)+8*s(678)+4*s(671)+6*s(665)+4*s(673)+12
  Such that:s(660) =< V
s(661) =< V+V1-V1'+2
s(662) =< V-V'
s(663) =< V/2
s(664) =< V'
s(665) =< s(661)
s(666) =< s(664)
s(667) =< s(660)
s(668) =< s(663)
s(669) =< s(667)*s(663)
s(670) =< s(669)
s(671) =< s(667)*s(660)
s(672) =< s(665)*s(663)
s(673) =< s(672)
s(674) =< s(662)
s(675) =< s(664)
s(676) =< s(666)*s(660)
s(677) =< s(666)*s(664)
s(675) =< s(660)
s(678) =< s(675)*s(660)

#### Cost of phase [55,56,57,58]:sortIter(V,V1,Out) -> [] 
43*it(55)+16*it([61,62])+12*s(679)+8*s(680)+14*s(681)+2*s(682)+4*s(683)+12*s(684)+6*s(685)+2*s(686)+2*s(687)+4*s(688)+4*s(689)+24*s(697)+16*s(698)+46*s(699)+4*s(700)+16*s(701)+30*s(702)+12*s(703)+6*s(704)+2*s(705)+2*s(706)+4*s(707)+4*s(708)+76*s(716)+8*s(717)+24*s(718)+42*s(719)+16*s(720)+12*s(721)+4*s(722)+4*s(723)+8*s(724)+4*s(725)+190*s(731)+38*s(732)+56*s(733)+42*s(734)+16*s(735)+12*s(736)+4*s(737)+4*s(738)+8*s(739)+4*s(740)+6*s(741)+4*s(742)+152*s(954)+32*s(955)+40*s(956)+0
  Such that:it([61,62]) =< 1

#### Cost of phase [55,56,57,58]:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
43*it(55)+12*s(679)+8*s(680)+14*s(681)+2*s(682)+4*s(683)+12*s(684)+6*s(685)+2*s(686)+2*s(687)+4*s(688)+4*s(689)+24*s(697)+16*s(698)+46*s(699)+4*s(700)+16*s(701)+30*s(702)+12*s(703)+6*s(704)+2*s(705)+2*s(706)+4*s(707)+4*s(708)+76*s(716)+8*s(717)+24*s(718)+42*s(719)+16*s(720)+12*s(721)+4*s(722)+4*s(723)+8*s(724)+4*s(725)+190*s(731)+38*s(732)+56*s(733)+42*s(734)+16*s(735)+12*s(736)+4*s(737)+4*s(738)+8*s(739)+4*s(740)+6*s(741)+4*s(742)+0
#### Cost of loops [55,56,57,58] 

 * loop 55:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
12*s(118)+8*s(124)+14*s(117)+2*s(120)+4*s(122)+12*s(119)+6*s(125)+2*s(126)+2*s(127)+4*s(128)+4*s(129)+10
  Such that:s(112) =< V
s(113) =< V+V1-V1'+2
s(114) =< V-V'
s(115) =< V/2
s(116) =< V'
s(117) =< s(112)
s(118) =< s(113)
s(119) =< s(116)
s(120) =< s(115)
s(121) =< s(117)*s(115)
s(122) =< s(121)
s(123) =< s(118)*s(115)
s(124) =< s(123)
s(125) =< s(116)
s(126) =< s(119)*s(112)
s(127) =< s(119)*s(116)
s(128) =< s(114)
s(125) =< s(112)
s(129) =< s(125)*s(112)

 * loop 56:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
24*s(256)+16*s(263)+46*s(255)+4*s(259)+16*s(261)+30*s(257)+12*s(258)+6*s(264)+2*s(265)+2*s(266)+4*s(267)+4*s(268)+10
  Such that:s(250) =< V
s(251) =< V+V1-V1'+2
s(252) =< V-V'
s(253) =< V/2
s(254) =< V'
s(255) =< s(250)
s(256) =< s(251)
s(257) =< s(254)
s(258) =< s(252)
s(259) =< s(253)
s(260) =< s(255)*s(253)
s(261) =< s(260)
s(262) =< s(256)*s(253)
s(263) =< s(262)
s(264) =< s(254)
s(265) =< s(257)*s(250)
s(266) =< s(257)*s(254)
s(264) =< s(250)
s(267) =< s(264)*s(250)
s(268) =< s(255)*s(250)

 * loop 57:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
76*s(409)+8*s(412)+24*s(414)+42*s(410)+16*s(411)+12*s(415)+4*s(416)+4*s(417)+8*s(418)+4*s(419)+11
  Such that:s(405) =< V
s(406) =< V-V'
s(407) =< V/2
s(408) =< V'
s(409) =< s(405)
s(410) =< s(408)
s(411) =< s(406)
s(412) =< s(407)
s(413) =< s(409)*s(407)
s(414) =< s(413)
s(415) =< s(408)
s(416) =< s(410)*s(405)
s(417) =< s(410)*s(408)
s(415) =< s(405)
s(418) =< s(415)*s(405)
s(419) =< s(409)*s(405)

 * loop 58:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
190*s(667)+38*s(668)+56*s(670)+42*s(666)+16*s(674)+12*s(675)+4*s(676)+4*s(677)+8*s(678)+4*s(671)+6*s(665)+4*s(673)+12
  Such that:s(660) =< V
s(661) =< V+V1-V1'+2
s(662) =< V-V'
s(663) =< V/2
s(664) =< V'
s(665) =< s(661)
s(666) =< s(664)
s(667) =< s(660)
s(668) =< s(663)
s(669) =< s(667)*s(663)
s(670) =< s(669)
s(671) =< s(667)*s(660)
s(672) =< s(665)*s(663)
s(673) =< s(672)
s(674) =< s(662)
s(675) =< s(664)
s(676) =< s(666)*s(660)
s(677) =< s(666)*s(664)
s(675) =< s(660)
s(678) =< s(675)*s(660)

#### Cost of phase [55,56,57,58]:sortIter(V,V1,Out) -> [] 
43*it(55)+14*it([60,63])+12*s(679)+8*s(680)+14*s(681)+2*s(682)+4*s(683)+12*s(684)+6*s(685)+2*s(686)+2*s(687)+4*s(688)+4*s(689)+24*s(697)+16*s(698)+46*s(699)+4*s(700)+16*s(701)+30*s(702)+12*s(703)+6*s(704)+2*s(705)+2*s(706)+4*s(707)+4*s(708)+76*s(716)+8*s(717)+24*s(718)+42*s(719)+16*s(720)+12*s(721)+4*s(722)+4*s(723)+8*s(724)+4*s(725)+190*s(731)+38*s(732)+56*s(733)+42*s(734)+16*s(735)+12*s(736)+4*s(737)+4*s(738)+8*s(739)+4*s(740)+6*s(741)+4*s(742)+68*s(1048)+8*s(1049)+16*s(1050)+0
  Such that:it([60,63]) =< 1

#### Cost of phase [55,56,57,58]:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
43*it(55)+12*s(679)+8*s(680)+14*s(681)+2*s(682)+4*s(683)+12*s(684)+6*s(685)+2*s(686)+2*s(687)+4*s(688)+4*s(689)+24*s(697)+16*s(698)+46*s(699)+4*s(700)+16*s(701)+30*s(702)+12*s(703)+6*s(704)+2*s(705)+2*s(706)+4*s(707)+4*s(708)+76*s(716)+8*s(717)+24*s(718)+42*s(719)+16*s(720)+12*s(721)+4*s(722)+4*s(723)+8*s(724)+4*s(725)+190*s(731)+38*s(732)+56*s(733)+42*s(734)+16*s(735)+12*s(736)+4*s(737)+4*s(738)+8*s(739)+4*s(740)+6*s(741)+4*s(742)+0
#### Cost of phase [55,56,57,58]:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
43*it(55)+12*s(679)+8*s(680)+14*s(681)+2*s(682)+4*s(683)+12*s(684)+6*s(685)+2*s(686)+2*s(687)+4*s(688)+4*s(689)+24*s(697)+16*s(698)+46*s(699)+4*s(700)+16*s(701)+30*s(702)+12*s(703)+6*s(704)+2*s(705)+2*s(706)+4*s(707)+4*s(708)+76*s(716)+8*s(717)+24*s(718)+42*s(719)+16*s(720)+12*s(721)+4*s(722)+4*s(723)+8*s(724)+4*s(725)+190*s(731)+38*s(732)+56*s(733)+42*s(734)+16*s(735)+12*s(736)+4*s(737)+4*s(738)+8*s(739)+4*s(740)+6*s(741)+4*s(742)+0
#### Cost of loops [55,56,57,58] 

 * loop 55:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
12*s(118)+8*s(124)+14*s(117)+2*s(120)+4*s(122)+12*s(119)+6*s(125)+2*s(126)+2*s(127)+4*s(128)+4*s(129)+10
  Such that:s(112) =< V
s(113) =< V+V1-V1'+2
s(114) =< V-V'
s(115) =< V/2
s(116) =< V'
s(117) =< s(112)
s(118) =< s(113)
s(119) =< s(116)
s(120) =< s(115)
s(121) =< s(117)*s(115)
s(122) =< s(121)
s(123) =< s(118)*s(115)
s(124) =< s(123)
s(125) =< s(116)
s(126) =< s(119)*s(112)
s(127) =< s(119)*s(116)
s(128) =< s(114)
s(125) =< s(112)
s(129) =< s(125)*s(112)

 * loop 56:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
24*s(256)+16*s(263)+46*s(255)+4*s(259)+16*s(261)+30*s(257)+12*s(258)+6*s(264)+2*s(265)+2*s(266)+4*s(267)+4*s(268)+10
  Such that:s(250) =< V
s(251) =< V+V1-V1'+2
s(252) =< V-V'
s(253) =< V/2
s(254) =< V'
s(255) =< s(250)
s(256) =< s(251)
s(257) =< s(254)
s(258) =< s(252)
s(259) =< s(253)
s(260) =< s(255)*s(253)
s(261) =< s(260)
s(262) =< s(256)*s(253)
s(263) =< s(262)
s(264) =< s(254)
s(265) =< s(257)*s(250)
s(266) =< s(257)*s(254)
s(264) =< s(250)
s(267) =< s(264)*s(250)
s(268) =< s(255)*s(250)

 * loop 57:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
76*s(409)+8*s(412)+24*s(414)+42*s(410)+16*s(411)+12*s(415)+4*s(416)+4*s(417)+8*s(418)+4*s(419)+11
  Such that:s(405) =< V
s(406) =< V-V'
s(407) =< V/2
s(408) =< V'
s(409) =< s(405)
s(410) =< s(408)
s(411) =< s(406)
s(412) =< s(407)
s(413) =< s(409)*s(407)
s(414) =< s(413)
s(415) =< s(408)
s(416) =< s(410)*s(405)
s(417) =< s(410)*s(408)
s(415) =< s(405)
s(418) =< s(415)*s(405)
s(419) =< s(409)*s(405)

 * loop 58:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
190*s(667)+38*s(668)+56*s(670)+42*s(666)+16*s(674)+12*s(675)+4*s(676)+4*s(677)+8*s(678)+4*s(671)+6*s(665)+4*s(673)+12
  Such that:s(660) =< V
s(661) =< V+V1-V1'+2
s(662) =< V-V'
s(663) =< V/2
s(664) =< V'
s(665) =< s(661)
s(666) =< s(664)
s(667) =< s(660)
s(668) =< s(663)
s(669) =< s(667)*s(663)
s(670) =< s(669)
s(671) =< s(667)*s(660)
s(672) =< s(665)*s(663)
s(673) =< s(672)
s(674) =< s(662)
s(675) =< s(664)
s(676) =< s(666)*s(660)
s(677) =< s(666)*s(664)
s(675) =< s(660)
s(678) =< s(675)*s(660)

#### Cost of phase [55,56,57,58]:sortIter(V,V1,Out) -> [] 
57*it(55)+12*s(679)+8*s(680)+14*s(681)+2*s(682)+4*s(683)+12*s(684)+6*s(685)+2*s(686)+2*s(687)+4*s(688)+4*s(689)+24*s(697)+16*s(698)+46*s(699)+4*s(700)+16*s(701)+30*s(702)+12*s(703)+6*s(704)+2*s(705)+2*s(706)+4*s(707)+4*s(708)+76*s(716)+8*s(717)+24*s(718)+42*s(719)+16*s(720)+12*s(721)+4*s(722)+4*s(723)+8*s(724)+4*s(725)+190*s(731)+38*s(732)+56*s(733)+42*s(734)+16*s(735)+12*s(736)+4*s(737)+4*s(738)+8*s(739)+4*s(740)+6*s(741)+4*s(742)+104*s(1190)+40*s(1191)+8*s(1192)+0
#### Cost of phase [55,56,57,58]:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
43*it(55)+12*s(679)+8*s(680)+14*s(681)+2*s(682)+4*s(683)+12*s(684)+6*s(685)+2*s(686)+2*s(687)+4*s(688)+4*s(689)+24*s(697)+16*s(698)+46*s(699)+4*s(700)+16*s(701)+30*s(702)+12*s(703)+6*s(704)+2*s(705)+2*s(706)+4*s(707)+4*s(708)+76*s(716)+8*s(717)+24*s(718)+42*s(719)+16*s(720)+12*s(721)+4*s(722)+4*s(723)+8*s(724)+4*s(725)+190*s(731)+38*s(732)+56*s(733)+42*s(734)+16*s(735)+12*s(736)+4*s(737)+4*s(738)+8*s(739)+4*s(740)+6*s(741)+4*s(742)+0
#### Cost of loops [55,56,57,58] 

 * loop 55:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
12*s(118)+8*s(124)+14*s(117)+2*s(120)+4*s(122)+12*s(119)+6*s(125)+2*s(126)+2*s(127)+4*s(128)+4*s(129)+10
  Such that:s(112) =< V
s(113) =< V+V1-V1'+2
s(114) =< V-V'
s(115) =< V/2
s(116) =< V'
s(117) =< s(112)
s(118) =< s(113)
s(119) =< s(116)
s(120) =< s(115)
s(121) =< s(117)*s(115)
s(122) =< s(121)
s(123) =< s(118)*s(115)
s(124) =< s(123)
s(125) =< s(116)
s(126) =< s(119)*s(112)
s(127) =< s(119)*s(116)
s(128) =< s(114)
s(125) =< s(112)
s(129) =< s(125)*s(112)

 * loop 56:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
24*s(256)+16*s(263)+46*s(255)+4*s(259)+16*s(261)+30*s(257)+12*s(258)+6*s(264)+2*s(265)+2*s(266)+4*s(267)+4*s(268)+10
  Such that:s(250) =< V
s(251) =< V+V1-V1'+2
s(252) =< V-V'
s(253) =< V/2
s(254) =< V'
s(255) =< s(250)
s(256) =< s(251)
s(257) =< s(254)
s(258) =< s(252)
s(259) =< s(253)
s(260) =< s(255)*s(253)
s(261) =< s(260)
s(262) =< s(256)*s(253)
s(263) =< s(262)
s(264) =< s(254)
s(265) =< s(257)*s(250)
s(266) =< s(257)*s(254)
s(264) =< s(250)
s(267) =< s(264)*s(250)
s(268) =< s(255)*s(250)

 * loop 57:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
76*s(409)+8*s(412)+24*s(414)+42*s(410)+16*s(411)+12*s(415)+4*s(416)+4*s(417)+8*s(418)+4*s(419)+11
  Such that:s(405) =< V
s(406) =< V-V'
s(407) =< V/2
s(408) =< V'
s(409) =< s(405)
s(410) =< s(408)
s(411) =< s(406)
s(412) =< s(407)
s(413) =< s(409)*s(407)
s(414) =< s(413)
s(415) =< s(408)
s(416) =< s(410)*s(405)
s(417) =< s(410)*s(408)
s(415) =< s(405)
s(418) =< s(415)*s(405)
s(419) =< s(409)*s(405)

 * loop 58:sortIter(V,V1,Out) -> [sortIter(V',V1',Out')] 
190*s(667)+38*s(668)+56*s(670)+42*s(666)+16*s(674)+12*s(675)+4*s(676)+4*s(677)+8*s(678)+4*s(671)+6*s(665)+4*s(673)+12
  Such that:s(660) =< V
s(661) =< V+V1-V1'+2
s(662) =< V-V'
s(663) =< V/2
s(664) =< V'
s(665) =< s(661)
s(666) =< s(664)
s(667) =< s(660)
s(668) =< s(663)
s(669) =< s(667)*s(663)
s(670) =< s(669)
s(671) =< s(667)*s(660)
s(672) =< s(665)*s(663)
s(673) =< s(672)
s(674) =< s(662)
s(675) =< s(664)
s(676) =< s(666)*s(660)
s(677) =< s(666)*s(664)
s(675) =< s(660)
s(678) =< s(675)*s(660)

#### Cost of phase [55,56,57,58]:sortIter(V,V1,Out) -> [] 
58*it(55)+12*s(679)+8*s(680)+14*s(681)+2*s(682)+4*s(683)+12*s(684)+6*s(685)+2*s(686)+2*s(687)+4*s(688)+4*s(689)+24*s(697)+16*s(698)+46*s(699)+4*s(700)+16*s(701)+30*s(702)+12*s(703)+6*s(704)+2*s(705)+2*s(706)+4*s(707)+4*s(708)+76*s(716)+8*s(717)+24*s(718)+42*s(719)+16*s(720)+12*s(721)+4*s(722)+4*s(723)+8*s(724)+4*s(725)+190*s(731)+38*s(732)+56*s(733)+42*s(734)+16*s(735)+12*s(736)+4*s(737)+4*s(738)+8*s(739)+4*s(740)+6*s(741)+4*s(742)+36*s(1196)+24*s(1197)+68*s(1198)+8*s(1199)+16*s(1200)+0
#### Cost of chains of sortIter(V,V1,Out):
* Chain [[55,56,57,58]]...: 861*it(55)+0
  with precondition: [V1>=0,V>=2] 

* Chain [[55,56,57,58],63]: 43*it(55)+4*it([63])+12*s(679)+8*s(680)+14*s(681)+2*s(682)+4*s(683)+12*s(684)+6*s(685)+2*s(686)+2*s(687)+4*s(688)+4*s(689)+24*s(697)+16*s(698)+46*s(699)+4*s(700)+16*s(701)+30*s(702)+12*s(703)+6*s(704)+2*s(705)+2*s(706)+4*s(707)+4*s(708)+76*s(716)+8*s(717)+24*s(718)+42*s(719)+16*s(720)+12*s(721)+4*s(722)+4*s(723)+8*s(724)+4*s(725)+190*s(731)+38*s(732)+56*s(733)+42*s(734)+16*s(735)+12*s(736)+4*s(737)+4*s(738)+8*s(739)+4*s(740)+6*s(741)+4*s(742)+20*s(776)+4*s(777)+8*s(778)+0
  Such that:it([63]) =< 1

  with precondition: [Out=0,V>=2,V1>=0] 

* Chain [[55,56,57,58],61,63]: 43*it(55)+15*it([61,63])+12*s(679)+8*s(680)+14*s(681)+2*s(682)+4*s(683)+12*s(684)+6*s(685)+2*s(686)+2*s(687)+4*s(688)+4*s(689)+24*s(697)+16*s(698)+46*s(699)+4*s(700)+16*s(701)+30*s(702)+12*s(703)+6*s(704)+2*s(705)+2*s(706)+4*s(707)+4*s(708)+76*s(716)+8*s(717)+24*s(718)+42*s(719)+16*s(720)+12*s(721)+4*s(722)+4*s(723)+8*s(724)+4*s(725)+190*s(731)+38*s(732)+56*s(733)+42*s(734)+16*s(735)+12*s(736)+4*s(737)+4*s(738)+8*s(739)+4*s(740)+6*s(741)+4*s(742)+152*s(942)+32*s(943)+40*s(944)+0
  Such that:it([61,63]) =< 1

  with precondition: [Out=0,V>=2,V1>=0] 

* Chain [[55,56,57,58],61,62]: 43*it(55)+16*it([61,62])+12*s(679)+8*s(680)+14*s(681)+2*s(682)+4*s(683)+12*s(684)+6*s(685)+2*s(686)+2*s(687)+4*s(688)+4*s(689)+24*s(697)+16*s(698)+46*s(699)+4*s(700)+16*s(701)+30*s(702)+12*s(703)+6*s(704)+2*s(705)+2*s(706)+4*s(707)+4*s(708)+76*s(716)+8*s(717)+24*s(718)+42*s(719)+16*s(720)+12*s(721)+4*s(722)+4*s(723)+8*s(724)+4*s(725)+190*s(731)+38*s(732)+56*s(733)+42*s(734)+16*s(735)+12*s(736)+4*s(737)+4*s(738)+8*s(739)+4*s(740)+6*s(741)+4*s(742)+152*s(954)+32*s(955)+40*s(956)+0
  Such that:it([61,62]) =< 1

  with precondition: [V>=2,V1>=0,Out>=V1+4] 

* Chain [[55,56,57,58],60,63]: 43*it(55)+14*it([60,63])+12*s(679)+8*s(680)+14*s(681)+2*s(682)+4*s(683)+12*s(684)+6*s(685)+2*s(686)+2*s(687)+4*s(688)+4*s(689)+24*s(697)+16*s(698)+46*s(699)+4*s(700)+16*s(701)+30*s(702)+12*s(703)+6*s(704)+2*s(705)+2*s(706)+4*s(707)+4*s(708)+76*s(716)+8*s(717)+24*s(718)+42*s(719)+16*s(720)+12*s(721)+4*s(722)+4*s(723)+8*s(724)+4*s(725)+190*s(731)+38*s(732)+56*s(733)+42*s(734)+16*s(735)+12*s(736)+4*s(737)+4*s(738)+8*s(739)+4*s(740)+6*s(741)+4*s(742)+68*s(1048)+8*s(1049)+16*s(1050)+0
  Such that:it([60,63]) =< 1

  with precondition: [Out=0,V>=2,V1>=0] 

* Chain [[55,56,57,58],60,62]: 861*it(55)+68*s(962)+8*s(963)+16*s(965)+15
  Such that:aux(298) =< -V1+Out
aux(299) =< -V1/2+Out/2
s(962) =< aux(298)
s(963) =< aux(299)
s(964) =< s(962)*aux(299)
s(965) =< s(964)

  with precondition: [V>=2,V1>=0,Out>=V1+4] 

* Chain [[55,56,57,58],59,63]: 57*it(55)+12*s(679)+8*s(680)+14*s(681)+2*s(682)+4*s(683)+12*s(684)+6*s(685)+2*s(686)+2*s(687)+4*s(688)+4*s(689)+24*s(697)+16*s(698)+46*s(699)+4*s(700)+16*s(701)+30*s(702)+12*s(703)+6*s(704)+2*s(705)+2*s(706)+4*s(707)+4*s(708)+76*s(716)+8*s(717)+24*s(718)+42*s(719)+16*s(720)+12*s(721)+4*s(722)+4*s(723)+8*s(724)+4*s(725)+190*s(731)+38*s(732)+56*s(733)+42*s(734)+16*s(735)+12*s(736)+4*s(737)+4*s(738)+8*s(739)+4*s(740)+6*s(741)+4*s(742)+104*s(1190)+40*s(1191)+8*s(1192)+0
  with precondition: [Out=0,V>=2,V1>=0] 

* Chain [[55,56,57,58],59,62]: 58*it(55)+12*s(679)+8*s(680)+14*s(681)+2*s(682)+4*s(683)+12*s(684)+6*s(685)+2*s(686)+2*s(687)+4*s(688)+4*s(689)+24*s(697)+16*s(698)+46*s(699)+4*s(700)+16*s(701)+30*s(702)+12*s(703)+6*s(704)+2*s(705)+2*s(706)+4*s(707)+4*s(708)+76*s(716)+8*s(717)+24*s(718)+42*s(719)+16*s(720)+12*s(721)+4*s(722)+4*s(723)+8*s(724)+4*s(725)+190*s(731)+38*s(732)+56*s(733)+42*s(734)+16*s(735)+12*s(736)+4*s(737)+4*s(738)+8*s(739)+4*s(740)+6*s(741)+4*s(742)+36*s(1196)+24*s(1197)+68*s(1198)+8*s(1199)+16*s(1200)+0
  with precondition: [V>=2,V1>=0,Out>=V1+4] 

* Chain [63]: 20*s(758)+4*s(759)+8*s(761)+4
  Such that:aux(128) =< V
aux(129) =< V/2
s(758) =< aux(128)
s(759) =< aux(129)
s(760) =< s(758)*aux(129)
s(761) =< s(760)

  with precondition: [Out=0,V>=0,V1>=0] 

* Chain [62]: 5
  with precondition: [V=0,V1=Out,V1>=0] 

* Chain [61,63]: 152*s(784)+32*s(785)+40*s(787)+15
  Such that:aux(196) =< V
aux(197) =< V/2
s(784) =< aux(196)
s(785) =< aux(197)
s(786) =< s(784)*aux(197)
s(787) =< s(786)

  with precondition: [Out=0,V>=1,V1>=0] 

* Chain [61,62]: 152*s(784)+32*s(785)+40*s(787)+16
  Such that:aux(196) =< V
aux(197) =< V/2
s(784) =< aux(196)
s(785) =< aux(197)
s(786) =< s(784)*aux(197)
s(787) =< s(786)

  with precondition: [Out=V1+2,V>=1,Out>=2] 

* Chain [60,63]: 68*s(962)+8*s(963)+16*s(965)+14
  Such that:aux(298) =< V
aux(299) =< V/2
s(962) =< aux(298)
s(963) =< aux(299)
s(964) =< s(962)*aux(299)
s(965) =< s(964)

  with precondition: [Out=0,V>=1,V1>=0] 

* Chain [60,62]: 68*s(962)+8*s(963)+16*s(965)+15
  Such that:aux(298) =< V
aux(299) =< V/2
s(962) =< aux(298)
s(963) =< aux(299)
s(964) =< s(962)*aux(299)
s(965) =< s(964)

  with precondition: [Out=V+V1+1,V1>=0,Out>=V1+2] 

* Chain [59,63]: 104*s(1054)+40*s(1057)+8*s(1061)+14
  Such that:aux(365) =< V/2
aux(367) =< V
s(1054) =< aux(367)
s(1061) =< aux(365)
s(1056) =< s(1054)*aux(365)
s(1057) =< s(1056)

  with precondition: [Out=0,V>=2,V1>=0] 

* Chain [59,62]: 36*s(1054)+24*s(1057)+68*s(1060)+8*s(1061)+16*s(1063)+15
  Such that:aux(363) =< V
aux(364) =< V+V1-Out+2
aux(365) =< V/2
s(1054) =< aux(364)
s(1060) =< aux(363)
s(1061) =< aux(365)
s(1062) =< s(1060)*aux(365)
s(1063) =< s(1062)
s(1056) =< s(1054)*aux(365)
s(1057) =< s(1056)

  with precondition: [V1>=0,Out>=V1+2,V+V1>=Out] 


#### Cost of chains of start(V,V1,V22,V30):
* Chain [72]: 4*s(1537)+1354*s(1538)+202*s(1546)+404*s(1548)+21*s(1555)+2*s(1568)+2*s(1569)+3*s(1574)+1*s(1578)+1*s(1579)+98*s(1583)+14048*s(1588)+17
  Such that:s(1574) =< -V+V22
aux(465) =< 1
aux(466) =< V
aux(467) =< V/2
aux(468) =< V1
aux(469) =< V22
s(1583) =< aux(465)
s(1538) =< aux(466)
s(1537) =< aux(468)
s(1555) =< aux(469)
s(1546) =< aux(467)
s(1547) =< s(1538)*aux(467)
s(1548) =< s(1547)
s(1574) =< aux(469)
s(1578) =< s(1574)*aux(466)
s(1579) =< s(1574)*aux(469)
s(1568) =< s(1555)*aux(466)
s(1569) =< s(1555)*aux(469)

  with precondition: [V>=0] 

* Chain [71]: 9320*s(1660)+356*s(1661)+752*s(1663)+1082*s(1681)+145832*s(1686)+1600*s(1704)+2004*s(2008)+600*s(2011)+100*s(2140)+21*s(3170)+2*s(3183)+2*s(3184)+3*s(3189)+1*s(3193)+1*s(3194)+24
  Such that:s(3189) =< -V1+V30
aux(587) =< 1
aux(588) =< V1
aux(589) =< 2*V1
aux(590) =< V1/2
aux(591) =< V30
s(1681) =< aux(587)
s(3170) =< aux(591)
s(1660) =< aux(588)
s(1661) =< aux(590)
s(1662) =< s(1660)*aux(590)
s(1663) =< s(1662)
s(1703) =< s(1660)*aux(588)
s(1704) =< s(1703)
s(2008) =< aux(589)
s(2010) =< s(2008)*aux(588)
s(2011) =< s(2010)
s(2140) =< s(1660)*aux(588)
s(3189) =< aux(591)
s(3193) =< s(3189)*aux(588)
s(3194) =< s(3189)*aux(591)
s(3183) =< s(3170)*aux(588)
s(3184) =< s(3170)*aux(591)

  with precondition: [V=1,V1>=0,V22>=0,V30>=0] 

* Chain [70]: 10*s(3197)+2*s(3198)+4*s(3200)+3
  Such that:aux(592) =< V1
aux(593) =< V1/2
s(3197) =< aux(592)
s(3198) =< aux(593)
s(3199) =< s(3197)*aux(593)
s(3200) =< s(3199)

  with precondition: [V=1,V1>=2] 

* Chain [69]: 1
  with precondition: [V=2,V1>=0,V22>=0,V30>=0] 

* Chain [68]: 10*s(3207)+2*s(3208)+4*s(3210)+3
  Such that:aux(594) =< V1
aux(595) =< V1/2
s(3207) =< aux(594)
s(3208) =< aux(595)
s(3209) =< s(3207)*aux(595)
s(3210) =< s(3209)

  with precondition: [V=2,V1>=2] 

* Chain [67]: 1
  with precondition: [V1=0,V>=1] 

* Chain [66]: 1*s(3215)+1
  Such that:s(3215) =< V1

  with precondition: [V=V1,V>=1] 

* Chain [65]...: 146*s(3218)+8*s(3219)+24*s(3221)+12054*s(3226)+20*s(3260)+8
  Such that:aux(610) =< V1
aux(611) =< V1/2
s(3218) =< aux(610)
s(3260) =< s(3218)*aux(610)
s(3219) =< aux(611)
s(3220) =< s(3218)*aux(611)
s(3221) =< s(3220)

  with precondition: [V=1,V1>=2,V22>=0,V30>=0] 

* Chain [64]...: 1*aux(612)+0
  with precondition: [V>=2] 


Closed-form bounds of start(V,V1,V22,V30): 
-------------------------------------
* Chain [72] with precondition: [V>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [71] with precondition: [V=1,V1>=0,V22>=0,V30>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [70] with precondition: [V=1,V1>=2] 
    - Upper bound: 11*V1+3+2*V1*V1 
    - Complexity: n^2 
* Chain [69] with precondition: [V=2,V1>=0,V22>=0,V30>=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [68] with precondition: [V=2,V1>=2] 
    - Upper bound: 11*V1+3+2*V1*V1 
    - Complexity: n^2 
* Chain [67] with precondition: [V1=0,V>=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [66] with precondition: [V=V1,V>=1] 
    - Upper bound: V1+1 
    - Complexity: n 
* Chain [65]... with precondition: [V=1,V1>=2,V22>=0,V30>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [64]... with precondition: [V>=2] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of start(V,V1,V22,V30): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 53 ms.
* Invariants computed in 117 ms.
   - Backward Invariants 77 ms.
   - Transitive Invariants 11 ms.
* Refinement performed in 2069 ms.
* Termination proved in 14 ms.
* Upper bounds computed in 5623 ms.
   - Equation cost structures 2531 ms.
   - Phase cost structures 3649 ms.
   - Chain cost structures 153 ms.
   - Solving cost expressions 5 ms.
* Total analysis performed in 7940 ms.



Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [empty/2]
1. non_recursive  : [head/2]
2. non_recursive  : [tail/2]
3. recursive  : [fun/3,intlist/2]
4. non_recursive  : [zero/2]
5. recursive  : [p/2]
6. recursive [non_tail] : [fun1/5,if1/4,if2/4,int/3]
7. non_recursive  : [start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into empty/2
1. SCC is partially evaluated into head/2
2. SCC is partially evaluated into tail/2
3. SCC is partially evaluated into intlist/2
4. SCC is partially evaluated into zero/2
5. SCC is partially evaluated into p/2
6. SCC is partially evaluated into int/3
7. SCC is partially evaluated into start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations empty/2 
* CE 39 is refined into CE [44] 
* CE 40 is refined into CE [45] 
* CE 38 is refined into CE [46] 


#### Refined cost equations empty/2 
* CE 44: empty(V,Out) = 1
     [V>=1,Out=1] 
* CE 45: empty(V,Out) = 0
     [V>=0,Out=0] 
* CE 46: empty(V,Out) = 1
     [Out=2,V=0] 

### Cost equations --> "Loop" of empty/2 
* CEs [44] --> Loop 23 
* CEs [45] --> Loop 24 
* CEs [46] --> Loop 25 

#### Loops of empty/2 
* Loop 23: empty(V,Out) [V>=1,Out=1] 
* Loop 24: empty(V,Out) [V>=0,Out=0] 
* Loop 25: empty(V,Out) [Out=2,V=0] 

### Ranking functions of CR empty(V,Out) 

#### Partial ranking functions of CR empty(V,Out) 


### Resulting Chains:empty(V,Out) 
* [25]
* [24]
* [23]


### Merging Chains  empty/2 into  External patterns of execution 
* [[25]] --> 1 
* [[24]] --> 2 
* [[23]] --> 3 


### Specialization of cost equations head/2 
* CE 33 is refined into CE [47] 
* CE 34 is refined into CE [48] 


#### Refined cost equations head/2 
* CE 47: head(V,Out) = 1
     [V>=Out+1,Out>=0] 
* CE 48: head(V,Out) = 0
     [V>=0,Out=0] 

### Cost equations --> "Loop" of head/2 
* CEs [47] --> Loop 26 
* CEs [48] --> Loop 27 

#### Loops of head/2 
* Loop 26: head(V,Out) [V>=Out+1,Out>=0] 
* Loop 27: head(V,Out) [V>=0,Out=0] 

### Ranking functions of CR head(V,Out) 

#### Partial ranking functions of CR head(V,Out) 


### Resulting Chains:head(V,Out) 
* [27]
* [26]


### Merging Chains  head/2 into  External patterns of execution 
* [[27]] --> 1 
* [[26]] --> 2 


### Specialization of cost equations tail/2 
* CE 36 is refined into CE [49] 
* CE 35 is refined into CE [50] 
* CE 37 is refined into CE [51] 


#### Refined cost equations tail/2 
* CE 49: tail(V,Out) = 1
     [V>=Out+1,Out>=0] 
* CE 50: tail(V,Out) = 1
     [Out=0,V=0] 
* CE 51: tail(V,Out) = 0
     [V>=0,Out=0] 

### Cost equations --> "Loop" of tail/2 
* CEs [49] --> Loop 28 
* CEs [50,51] --> Loop 29 

#### Loops of tail/2 
* Loop 28: tail(V,Out) [V>=Out+1,Out>=0] 
* Loop 29: tail(V,Out) [V>=0,Out=0] 

### Ranking functions of CR tail(V,Out) 

#### Partial ranking functions of CR tail(V,Out) 


### Resulting Chains:tail(V,Out) 
* [29]
* [28]


### Merging Chains  tail/2 into  External patterns of execution 
* [[29]] --> 1 
* [[28]] --> 2 


### Specialization of cost equations intlist/2 
* CE 30 is refined into CE [52,53,54] 
* CE 32 is refined into CE [55] 
* CE 31 is refined into CE [56,57,58,59] 


#### Refined cost equations intlist/2 
* CE 52: intlist(V,Out) = 1+ empty(W,X):1
     [X=2,W=0,Out=0,V=0] 
* CE 53: intlist(V,Out) = 1+ empty(V,W):2
     [V>=0,W=0,Out=0] 
* CE 54: intlist(V,Out) = 1+ empty(V,W):3
     [V>=1,W=1,Out=0] 
* CE 55: intlist(V,Out) = 2+ empty(W,X):1
     [X=2,W=0,Out=0,V=0] 
* CE 56: intlist(V,Out) = 2+ empty(V,W):3+ head(V,X):1+ tail(V,Y):1+ intlist(Z,A1)
     [V>=1,A1+2=Out,Z=0,Y=0,X=0,W=1] 
* CE 57: intlist(V,Out) = 2+ empty(V,W):3+ head(V,X):1+ tail(V,Y):2+ intlist(Y,Z)
     [V>=Y+1,Y>=0,Z+2=Out,X=0,W=1] 
* CE 58: intlist(V,Out) = 2+ empty(V,W):3+ head(V,X):2+ tail(V,Y):1+ intlist(Z,A1)
     [V>=X+1,X>=0,X+A1+2=Out,Z=0,Y=0,W=1] 
* CE 59: intlist(V,Out) = 2+ empty(V,W):3+ head(V,X):2+ tail(V,Y):2+ intlist(Y,Z)
     [V>=Y+1,V>=X+1,Y>=0,X>=0,X+Z+2=Out,W=1] 

### Cost equations --> "Loop" of intlist/2 
* CEs [57] --> Loop 30 
* CEs [56,58,59] --> Loop 31 
* CEs [52,53,54,55] --> Loop 32 

#### Loops of intlist/2 
* Loop 30: intlist(V,Out)->  intlist(V',Out')
                  [V>=V'+1,V'>=0,Out=Out'+2] 
* Loop 31: intlist(V,Out)->  intlist(V',Out')
                  [V+Out'+1>=Out,Out>=Out'+2,V>=V'+1,V'>=0] 
* Loop 32: intlist(V,Out) [V>=0,Out=0] 

### Ranking functions of CR intlist(V,Out) 
* RF of phase [30,31]: [V]

#### Partial ranking functions of CR intlist(V,Out) 
* Partial RF of phase [30,31]:
  - RF of loop [30:1,31:1]:
    V


### Resulting Chains:intlist(V,Out) 
* [[30,31],32]
* [32]


### Merging Chains  intlist/2 into  External patterns of execution 
* [[32]] --> 1 
* [[32,[30,31]]] --> 2 


### Specialization of cost equations zero/2 
* CE 42 is refined into CE [60] 
* CE 43 is refined into CE [61] 
* CE 41 is refined into CE [62] 


#### Refined cost equations zero/2 
* CE 60: zero(V,Out) = 1
     [V>=1,Out=1] 
* CE 61: zero(V,Out) = 0
     [V>=0,Out=0] 
* CE 62: zero(V,Out) = 1
     [Out=2,V=0] 

### Cost equations --> "Loop" of zero/2 
* CEs [60] --> Loop 33 
* CEs [61] --> Loop 34 
* CEs [62] --> Loop 35 

#### Loops of zero/2 
* Loop 33: zero(V,Out) [V>=1,Out=1] 
* Loop 34: zero(V,Out) [V>=0,Out=0] 
* Loop 35: zero(V,Out) [Out=2,V=0] 

### Ranking functions of CR zero(V,Out) 

#### Partial ranking functions of CR zero(V,Out) 


### Resulting Chains:zero(V,Out) 
* [35]
* [34]
* [33]


### Merging Chains  zero/2 into  External patterns of execution 
* [[35]] --> 1 
* [[34]] --> 2 
* [[33]] --> 3 


### Specialization of cost equations p/2 
* CE 20 is refined into CE [63] 
* CE 19 is refined into CE [64] 
* CE 22 is refined into CE [65] 
* CE 21 is refined into CE [66] 


#### Refined cost equations p/2 
* CE 63: p(V,Out) = 1
     [Out=0,V=1] 
* CE 64: p(V,Out) = 1
     [Out=0,V=0] 
* CE 65: p(V,Out) = 0
     [V>=0,Out=0] 
* CE 66: p(V,Out) = 1+ p(W,X)
     [V>=2,V=W+1,X+1=Out] 

### Cost equations --> "Loop" of p/2 
* CEs [66] --> Loop 36 
* CEs [63] --> Loop 37 
* CEs [64,65] --> Loop 38 

#### Loops of p/2 
* Loop 36: p(V,Out)->  p(V',Out')
                  [V>=2,Out=Out'+1,V=V'+1] 
* Loop 37: p(V,Out) [Out=0,V=1] 
* Loop 38: p(V,Out) [V>=0,Out=0] 

### Ranking functions of CR p(V,Out) 
* RF of phase [36]: [V-1]

#### Partial ranking functions of CR p(V,Out) 
* Partial RF of phase [36]:
  - RF of loop [36:1]:
    V-1


### Resulting Chains:p(V,Out) 
* [[36],38]
* [[36],37]
* [38]
* [37]


### Merging Chains  p/2 into  External patterns of execution 
* [[37],[38]] --> 1 
* [[37,[36]],[38,[36]]] --> 2 


### Specialization of cost equations int/3 
* CE 28 is refined into CE [67] 
* CE 23 is refined into CE [68,69,70] 
* CE 25 is refined into CE [71] 
* CE 26 is refined into CE [72,73,74] 
* CE 29 is refined into CE [75,76,77,78,79,80,81,82,83] 
* CE 24 is refined into CE [84,85,86,87,88,89,90,91] 
* CE 27 is refined into CE [92] 


#### Refined cost equations int/3 
* CE 67: int(V,V10,Out) = 3+ zero(W10,X10):1+ zero(Y10,Z10):1
     [Z10=2,Y10=0,X10=2,W10=0,Out=1,V10=0,V=0] 
* CE 68: int(V,V10,Out) = 2+ zero(V,W10):3+ zero(X10,Y10):1
     [V>=1,Y10=2,X10=0,W10=1,Out=0,V10=0] 
* CE 69: int(V,V10,Out) = 2+ zero(V,W10):3+ zero(V10,X10):2
     [V10>=0,V>=1,X10=0,W10=1,Out=0] 
* CE 70: int(V,V10,Out) = 2+ zero(V,W10):3+ zero(V10,X10):3
     [V10>=1,V>=1,X10=1,W10=1,Out=0] 
* CE 71: int(V,V10,Out) = 3+ zero(V,W10):3+ zero(X10,Y10):1
     [V>=1,Y10=2,X10=0,W10=1,Out=0,V10=0] 
* CE 72: int(V,V10,Out) = 2+ zero(W10,X10):1+ zero(Y10,Z10):1
     [Z10=2,Y10=0,X10=2,W10=0,Out=0,V10=0,V=0] 
* CE 73: int(V,V10,Out) = 2+ zero(W10,X10):1+ zero(V10,Y10):2
     [V10>=0,Y10=0,X10=2,W10=0,Out=0,V=0] 
* CE 74: int(V,V10,Out) = 2+ zero(W10,X10):1+ zero(V10,Y10):3
     [V10>=1,Y10=1,X10=2,W10=0,Out=0,V=0] 
* CE 75: int(V,V10,Out) = 1+ zero(W10,X10):1+ zero(Y10,Z10):1
     [Z10=2,Y10=0,X10=2,W10=0,Out=0,V10=0,V=0] 
* CE 76: int(V,V10,Out) = 1+ zero(W10,X10):1+ zero(V10,Y10):2
     [V10>=0,Y10=0,X10=2,W10=0,Out=0,V=0] 
* CE 77: int(V,V10,Out) = 1+ zero(W10,X10):1+ zero(V10,Y10):3
     [V10>=1,Y10=1,X10=2,W10=0,Out=0,V=0] 
* CE 78: int(V,V10,Out) = 1+ zero(V,W10):2+ zero(X10,Y10):1
     [V>=0,Y10=2,X10=0,W10=0,Out=0,V10=0] 
* CE 79: int(V,V10,Out) = 1+ zero(V,W10):2+ zero(V10,X10):2
     [V10>=0,V>=0,X10=0,W10=0,Out=0] 
* CE 80: int(V,V10,Out) = 1+ zero(V,W10):2+ zero(V10,X10):3
     [V10>=1,V>=0,X10=1,W10=0,Out=0] 
* CE 81: int(V,V10,Out) = 1+ zero(V,W10):3+ zero(X10,Y10):1
     [V>=1,Y10=2,X10=0,W10=1,Out=0,V10=0] 
* CE 82: int(V,V10,Out) = 1+ zero(V,W10):3+ zero(V10,X10):2
     [V10>=0,V>=1,X10=0,W10=1,Out=0] 
* CE 83: int(V,V10,Out) = 1+ zero(V,W10):3+ zero(V10,X10):3
     [V10>=1,V>=1,X10=1,W10=1,Out=0] 
* CE 84: int(V,V10,Out) = 3+ zero(V,W10):3+ zero(V10,X10):3+ p(V,Y10):1+ p(V10,Z10):1+ int(A11,B11,C11)+ intlist(C11,D11):1
     [C11>=0,V10>=1,V>=1,B11=0,A11=0,D11=0,Z10=0,Y10=0,X10=1,W10=1,Out=0] 
* CE 85: int(V,V10,Out) = 3+ zero(V,W10):3+ zero(V10,X10):3+ p(V,Y10):1+ p(V10,Z10):1+ int(A11,B11,C11)+ intlist(C11,Out):2
     [Out>=2,C11>=1,V10>=1,V>=1,B11=0,A11=0,Z10=0,Y10=0,X10=1,W10=1] 
* CE 86: int(V,V10,Out) = 3+ zero(V,W10):3+ zero(V10,X10):3+ p(V,Y10):1+ p(V10,Z10):2+ int(A11,Z10,B11)+ intlist(B11,C11):1
     [V10>=Z10+1,B11>=0,Z10>=1,V>=1,A11=0,C11=0,Y10=0,X10=1,W10=1,Out=0] 
* CE 87: int(V,V10,Out) = 3+ zero(V,W10):3+ zero(V10,X10):3+ p(V,Y10):1+ p(V10,Z10):2+ int(A11,Z10,B11)+ intlist(B11,Out):2
     [V10>=Z10+1,Out>=2,B11>=1,Z10>=1,V>=1,A11=0,Y10=0,X10=1,W10=1] 
* CE 88: int(V,V10,Out) = 3+ zero(V,W10):3+ zero(V10,X10):3+ p(V,Y10):2+ p(V10,Z10):1+ int(Y10,A11,B11)+ intlist(B11,C11):1
     [V>=Y10+1,B11>=0,V10>=1,Y10>=1,A11=0,C11=0,Z10=0,X10=1,W10=1,Out=0] 
* CE 89: int(V,V10,Out) = 3+ zero(V,W10):3+ zero(V10,X10):3+ p(V,Y10):2+ p(V10,Z10):1+ int(Y10,A11,B11)+ intlist(B11,Out):2
     [V>=Y10+1,Out>=2,B11>=1,V10>=1,Y10>=1,A11=0,Z10=0,X10=1,W10=1] 
* CE 90: int(V,V10,Out) = 3+ zero(V,W10):3+ zero(V10,X10):3+ p(V,Y10):2+ p(V10,Z10):2+ int(Y10,Z10,A11)+ intlist(A11,B11):1
     [V10>=Z10+1,V>=Y10+1,A11>=0,Z10>=1,Y10>=1,B11=0,X10=1,W10=1,Out=0] 
* CE 91: int(V,V10,Out) = 3+ zero(V,W10):3+ zero(V10,X10):3+ p(V,Y10):2+ p(V10,Z10):2+ int(Y10,Z10,A11)+ intlist(A11,Out):2
     [V10>=Z10+1,V>=Y10+1,Out>=2,A11>=1,Z10>=1,Y10>=1,X10=1,W10=1] 
* CE 92: int(V,V10,Out) = 3+ zero(W10,X10):1+ zero(V10,Y10):3+ int(Z10,V10,A11)
     [V10>=1,A11+1=Out,Z10=1,Y10=1,X10=2,W10=0,V=0] 

### Cost equations --> "Loop" of int/3 
* CEs [91] --> Loop 39 
* CEs [89] --> Loop 40 
* CEs [87] --> Loop 41 
* CEs [85] --> Loop 42 
* CEs [90] --> Loop 43 
* CEs [88] --> Loop 44 
* CEs [86] --> Loop 45 
* CEs [84] --> Loop 46 
* CEs [92] --> Loop 47 
* CEs [68,71,78,81] --> Loop 48 
* CEs [67] --> Loop 49 
* CEs [69,70,72,73,74,75,76,77,79,80,82,83] --> Loop 50 

#### Loops of int/3 
* Loop 39: int(V,V10,Out)->  int(V',V10',Out')
                  [V10>=V10'+1,V>=V'+1,Out'>=1,V10'>=1,V'>=1,Out>=2] 
* Loop 40: int(V,V10,Out)->  int(V',V10',Out')
                  [V>=V'+1,Out'>=1,V'>=1,Out>=2,V10>=1,V10'=0] 
* Loop 41: int(V,V10,Out)->  int(V',V10',Out')
                  [V10>=V10'+1,Out'>=1,V10'>=1,Out>=2,V>=1,V'=0] 
* Loop 42: int(V,V10,Out)->  int(V',V10',Out')
                  [Out'>=1,Out>=2,V10>=1,V>=1,V10'=0,V'=0] 
* Loop 43: int(V,V10,Out)->  int(V',V10',Out')
                  [V10>=V10'+1,V>=V'+1,Out'>=0,V10'>=1,V'>=1,Out=0] 
* Loop 44: int(V,V10,Out)->  int(V',V10',Out')
                  [V>=V'+1,Out'>=0,V'>=1,V10>=1,V10'=0,Out=0] 
* Loop 45: int(V,V10,Out)->  int(V',V10',Out')
                  [V10>=V10'+1,Out'>=0,V10'>=1,V>=1,V'=0,Out=0] 
* Loop 46: int(V,V10,Out)->  int(V',V10',Out')
                  [Out'>=0,V10>=1,V>=1,V10'=0,V'=0,Out=0] 
* Loop 47: int(V,V10,Out)->  int(V',V10,Out')
                  [V10>=1,Out=Out'+1,V'=1,V=0] 
* Loop 48: int(V,V10,Out) [V>=0,Out=0,V10=0] 
* Loop 49: int(V,V10,Out) [Out=1,V10=0,V=0] 
* Loop 50: int(V,V10,Out) [V10>=0,V>=0,Out=0] 

### Ranking functions of CR int(V,V10,Out) 
* RF of phase [39]: [V-1,V10-1]
* RF of phase [43]: [V-1,V10-1]

#### Partial ranking functions of CR int(V,V10,Out) 
* Partial RF of phase [39]:
  - RF of loop [39:1]:
    V-1
    V10-1
* Partial RF of phase [41,45,47]:
  - RF of loop [41:1,45:1]:
    V depends on loops [47:1] 
    V10-1
  - RF of loop [47:1]:
    -V+1 depends on loops [41:1,45:1] 
* Partial RF of phase [43]:
  - RF of loop [43:1]:
    V-1
    V10-1


### Resulting Chains:int(V,V10,Out) 
* [[43],[41,45,47],50]
* [[43],[41,45,47],46,50]
* [[43],[41,45,47],46,49]
* [[43],[41,45,47],46,48]
* [[43],[41,45,47],42,49]
* [[43],[39],[41,45,47],50]
* [[43],[39],[41,45,47],46,50]
* [[43],[39],[41,45,47],46,49]
* [[43],[39],[41,45,47],46,48]
* [[43],[39],[41,45,47],42,49]
* [[43],[39],42,49]
* [[43],50]
* [[43],46,50]
* [[43],46,49]
* [[43],46,48]
* [[43],44,50]
* [[43],44,48]
* [[43],42,49]
* [[41,45,47],50]
* [[41,45,47],46,50]
* [[41,45,47],46,49]
* [[41,45,47],46,48]
* [[41,45,47],42,49]
* [[39],[41,45,47],50]
* [[39],[41,45,47],46,50]
* [[39],[41,45,47],46,49]
* [[39],[41,45,47],46,48]
* [[39],[41,45,47],42,49]
* [[39],42,49]
* [50]
* [49]
* [48]
* [46,50]
* [46,49]
* [46,48]
* [44,50]
* [44,48]
* [42,49]


### Merging Chains  int/3 into  External patterns of execution 
* [[49]] --> 1 
* [[48,44],[50,44],[48,46],[49,46],[50,46],[48],[50],[49,42,[43]],[48,44,[43]],[50,44,[43]],[48,46,[43]],[49,46,[43]],[50,46,[43]],[50,[43]],[49,42,[39],[43]],[49,42,[41,45,47],[39],[43]],[48,46,[41,45,47],[39],[43]],[49,46,[41,45,47],[39],[43]],[50,46,[41,45,47],[39],[43]],[50,[41,45,47],[39],[43]],[49,42,[41,45,47],[43]],[48,46,[41,45,47],[43]],[49,46,[41,45,47],[43]],[50,46,[41,45,47],[43]],[50,[41,45,47],[43]]] --> 2 
* [[49,42],[49,42,[39]],[49,42,[41,45,47],[39]],[48,46,[41,45,47],[39]],[49,46,[41,45,47],[39]],[50,46,[41,45,47],[39]],[50,[41,45,47],[39]],[48,46,[41,45,47]],[49,46,[41,45,47]],[50,46,[41,45,47]],[50,[41,45,47]]] --> 3 
* [[49,42,[41,45,47]]] --> 4 


### Specialization of cost equations start/4 
* CE 10 is refined into CE [93] 
* CE 7 is refined into CE [94] 
* CE 8 is refined into CE [95,96,97] 
* CE 6 is refined into CE [98] 
* CE 2 is refined into CE [99] 
* CE 3 is refined into CE [100] 
* CE 4 is refined into CE [101,102,103,104,105,106,107,108,109,110,111,112,113,114] 
* CE 5 is refined into CE [115,116,117,118,119,120,121,122,123,124,125,126,127,128] 
* CE 9 is refined into CE [129,130,131] 
* CE 11 is refined into CE [132,133,134,135,136,137] 
* CE 12 is refined into CE [138,139,140] 
* CE 13 is refined into CE [141,142] 
* CE 14 is refined into CE [143,144] 
* CE 15 is refined into CE [145,146,147] 
* CE 16 is refined into CE [148,149] 
* CE 17 is refined into CE [150,151] 
* CE 18 is refined into CE [152,153,154,155] 


#### Refined cost equations start/4 
* CE 93: start(V,V10,V16,V19) = 2
     [V19>=0,V16>=0,V10=2,V=2] 
* CE 94: start(V,V10,V16,V19) = 1
     [V10>=0,V=2] 
* CE 95: start(V,V10,V16,V19) = 2+ int(W19,V19,X19):2
     [V19>=0,V16>=0,X19=0,W19=1,V10=1,V=2] 
* CE 96: start(V,V10,V16,V19) = 2+ int(W19,V19,X19):3
     [V19+X19>=2,X19>=0,V19>=1,V16>=0,W19=1,V10=1,V=2] 
* CE 97: start(V,V10,V16,V19) = 2+ int(W19,V19,X19):4
     [X19+3*V19>=6,X19>=0,V19>=1,V16>=0,W19=1,V10=1,V=2] 
* CE 98: start(V,V10,V16,V19) = 2
     [V19>=0,V16>=0,V10=2,V=1] 
* CE 99: start(V,V10,V16,V19) = 1
     [V19>=0,V16>=0,V10>=0,V=1] 
* CE 100: start(V,V10,V16,V19) = 0
     [V10>=0,V>=0] 
* CE 101: start(V,V10,V16,V19) = 2+ p(V16,W19):1+ p(V19,X19):1+ int(Y19,Z19,A20):1+ intlist(B20,C20):1
     [V19>=0,V16>=0,C20=0,B20=1,A20=1,Z19=0,Y19=0,X19=0,W19=0,V10=1,V=1] 
* CE 102: start(V,V10,V16,V19) = 2+ p(V16,W19):1+ p(V19,X19):1+ int(Y19,Z19,A20):1+ intlist(B20,C20):2
     [C20>=2,V19>=0,V16>=0,B20=1,A20=1,Z19=0,Y19=0,X19=0,W19=0,V10=1,V=1] 
* CE 103: start(V,V10,V16,V19) = 2+ p(V16,W19):1+ p(V19,X19):1+ int(Y19,Z19,A20):2+ intlist(B20,C20):1
     [V19>=0,V16>=0,C20=0,B20=0,A20=0,Z19=0,Y19=0,X19=0,W19=0,V10=1,V=1] 
* CE 104: start(V,V10,V16,V19) = 2+ p(V16,W19):1+ p(V19,X19):2+ int(Y19,X19,Z19):2+ intlist(A20,B20):1
     [V19>=X19+1,X19>=1,V16>=0,B20=0,A20=0,Z19=0,Y19=0,W19=0,V10=1,V=1] 
* CE 105: start(V,V10,V16,V19) = 2+ p(V16,W19):1+ p(V19,X19):2+ int(Y19,X19,Z19):3+ intlist(Z19,A20):1
     [V19>=X19+1,Z19>=1,X19>=1,V16>=0,A20=0,Y19=0,W19=0,V10=1,V=1] 
* CE 106: start(V,V10,V16,V19) = 2+ p(V16,W19):1+ p(V19,X19):2+ int(Y19,X19,Z19):3+ intlist(Z19,A20):2
     [V19>=X19+1,A20>=2,Z19>=1,X19>=1,V16>=0,Y19=0,W19=0,V10=1,V=1] 
* CE 107: start(V,V10,V16,V19) = 2+ p(V16,W19):1+ p(V19,X19):2+ int(Y19,X19,Z19):4+ intlist(Z19,A20):1
     [Z19+3*X19>=6,V19>=X19+1,Z19>=0,X19>=1,V16>=0,A20=0,Y19=0,W19=0,V10=1,V=1] 
* CE 108: start(V,V10,V16,V19) = 2+ p(V16,W19):1+ p(V19,X19):2+ int(Y19,X19,Z19):4+ intlist(Z19,A20):2
     [Z19+3*X19>=6,V19>=X19+1,A20>=2,Z19>=1,X19>=1,V16>=0,Y19=0,W19=0,V10=1,V=1] 
* CE 109: start(V,V10,V16,V19) = 2+ p(V16,W19):2+ p(V19,X19):1+ int(W19,Y19,Z19):2+ intlist(A20,B20):1
     [V16>=W19+1,W19>=1,V19>=0,B20=0,A20=0,Z19=0,Y19=0,X19=0,V10=1,V=1] 
* CE 110: start(V,V10,V16,V19) = 2+ p(V16,W19):2+ p(V19,X19):2+ int(W19,X19,Y19):2+ intlist(Z19,A20):1
     [V19>=X19+1,V16>=W19+1,X19>=1,W19>=1,A20=0,Z19=0,Y19=0,V10=1,V=1] 
* CE 111: start(V,V10,V16,V19) = 2+ p(V16,W19):2+ p(V19,X19):2+ int(W19,X19,Y19):3+ intlist(Y19,Z19):1
     [X19+Y19>=2,V19>=X19+1,V16>=W19+1,Y19>=0,X19>=1,W19>=1,Z19=0,V10=1,V=1] 
* CE 112: start(V,V10,V16,V19) = 2+ p(V16,W19):2+ p(V19,X19):2+ int(W19,X19,Y19):3+ intlist(Y19,Z19):2
     [V19>=X19+1,V16>=W19+1,Z19>=2,Y19>=1,X19>=1,W19>=1,V10=1,V=1] 
* CE 113: start(V,V10,V16,V19) = 2+ p(V16,W19):2+ p(V19,X19):2+ int(W19,X19,Y19):4+ intlist(Y19,Z19):1
     [Y19+3*X19>=6,V19>=X19+1,V16>=W19+1,Y19>=0,X19>=1,W19>=1,Z19=0,V10=1,V=1] 
* CE 114: start(V,V10,V16,V19) = 2+ p(V16,W19):2+ p(V19,X19):2+ int(W19,X19,Y19):4+ intlist(Y19,Z19):2
     [Y19+3*X19>=6,V19>=X19+1,V16>=W19+1,Z19>=2,Y19>=1,X19>=1,W19>=1,V10=1,V=1] 
* CE 115: start(V,V10,V16,V19) = 1+ p(V10,W19):1+ p(V16,X19):1+ int(Y19,Z19,A20):1+ intlist(B20,C20):1
     [V16>=0,V10>=0,C20=0,B20=1,A20=1,Z19=0,Y19=0,X19=0,W19=0,V=1] 
* CE 116: start(V,V10,V16,V19) = 1+ p(V10,W19):1+ p(V16,X19):1+ int(Y19,Z19,A20):1+ intlist(B20,C20):2
     [C20>=2,V16>=0,V10>=0,B20=1,A20=1,Z19=0,Y19=0,X19=0,W19=0,V=1] 
* CE 117: start(V,V10,V16,V19) = 1+ p(V10,W19):1+ p(V16,X19):1+ int(Y19,Z19,A20):2+ intlist(B20,C20):1
     [V16>=0,V10>=0,C20=0,B20=0,A20=0,Z19=0,Y19=0,X19=0,W19=0,V=1] 
* CE 118: start(V,V10,V16,V19) = 1+ p(V10,W19):1+ p(V16,X19):2+ int(Y19,X19,Z19):2+ intlist(A20,B20):1
     [V16>=X19+1,X19>=1,V10>=0,B20=0,A20=0,Z19=0,Y19=0,W19=0,V=1] 
* CE 119: start(V,V10,V16,V19) = 1+ p(V10,W19):1+ p(V16,X19):2+ int(Y19,X19,Z19):3+ intlist(Z19,A20):1
     [V16>=X19+1,Z19>=1,X19>=1,V10>=0,A20=0,Y19=0,W19=0,V=1] 
* CE 120: start(V,V10,V16,V19) = 1+ p(V10,W19):1+ p(V16,X19):2+ int(Y19,X19,Z19):3+ intlist(Z19,A20):2
     [V16>=X19+1,A20>=2,Z19>=1,X19>=1,V10>=0,Y19=0,W19=0,V=1] 
* CE 121: start(V,V10,V16,V19) = 1+ p(V10,W19):1+ p(V16,X19):2+ int(Y19,X19,Z19):4+ intlist(Z19,A20):1
     [Z19+3*X19>=6,V16>=X19+1,Z19>=0,X19>=1,V10>=0,A20=0,Y19=0,W19=0,V=1] 
* CE 122: start(V,V10,V16,V19) = 1+ p(V10,W19):1+ p(V16,X19):2+ int(Y19,X19,Z19):4+ intlist(Z19,A20):2
     [Z19+3*X19>=6,V16>=X19+1,A20>=2,Z19>=1,X19>=1,V10>=0,Y19=0,W19=0,V=1] 
* CE 123: start(V,V10,V16,V19) = 1+ p(V10,W19):2+ p(V16,X19):1+ int(W19,Y19,Z19):2+ intlist(A20,B20):1
     [V10>=W19+1,W19>=1,V16>=0,B20=0,A20=0,Z19=0,Y19=0,X19=0,V=1] 
* CE 124: start(V,V10,V16,V19) = 1+ p(V10,W19):2+ p(V16,X19):2+ int(W19,X19,Y19):2+ intlist(Z19,A20):1
     [V16>=X19+1,V10>=W19+1,X19>=1,W19>=1,A20=0,Z19=0,Y19=0,V=1] 
* CE 125: start(V,V10,V16,V19) = 1+ p(V10,W19):2+ p(V16,X19):2+ int(W19,X19,Y19):3+ intlist(Y19,Z19):1
     [X19+Y19>=2,V16>=X19+1,V10>=W19+1,Y19>=0,X19>=1,W19>=1,Z19=0,V=1] 
* CE 126: start(V,V10,V16,V19) = 1+ p(V10,W19):2+ p(V16,X19):2+ int(W19,X19,Y19):3+ intlist(Y19,Z19):2
     [V16>=X19+1,V10>=W19+1,Z19>=2,Y19>=1,X19>=1,W19>=1,V=1] 
* CE 127: start(V,V10,V16,V19) = 1+ p(V10,W19):2+ p(V16,X19):2+ int(W19,X19,Y19):4+ intlist(Y19,Z19):1
     [Y19+3*X19>=6,V16>=X19+1,V10>=W19+1,Y19>=0,X19>=1,W19>=1,Z19=0,V=1] 
* CE 128: start(V,V10,V16,V19) = 1+ p(V10,W19):2+ p(V16,X19):2+ int(W19,X19,Y19):4+ intlist(Y19,Z19):2
     [Y19+3*X19>=6,V16>=X19+1,V10>=W19+1,Z19>=2,Y19>=1,X19>=1,W19>=1,V=1] 
* CE 129: start(V,V10,V16,V19) = 1+ int(W19,V16,X19):2
     [V16>=0,V10>=0,X19=0,W19=1,V=1] 
* CE 130: start(V,V10,V16,V19) = 1+ int(W19,V16,X19):3
     [V16+X19>=2,X19>=0,V16>=1,V10>=0,W19=1,V=1] 
* CE 131: start(V,V10,V16,V19) = 1+ int(W19,V16,X19):4
     [X19+3*V16>=6,X19>=0,V16>=1,V10>=0,W19=1,V=1] 
* CE 132: start(V,V10,V16,V19) = 1+ head(V10,W19):1+ tail(V10,X19):1+ intlist(Y19,Z19):1
     [V10>=0,Z19=0,Y19=0,X19=0,W19=0,V=1] 
* CE 133: start(V,V10,V16,V19) = 1+ head(V10,W19):1+ tail(V10,X19):2+ intlist(X19,Y19):1
     [V10>=X19+1,X19>=0,Y19=0,W19=0,V=1] 
* CE 134: start(V,V10,V16,V19) = 1+ head(V10,W19):1+ tail(V10,X19):2+ intlist(X19,Y19):2
     [V10>=X19+1,Y19>=2,X19>=1,W19=0,V=1] 
* CE 135: start(V,V10,V16,V19) = 1+ head(V10,W19):2+ tail(V10,X19):1+ intlist(Y19,Z19):1
     [V10>=W19+1,W19>=0,Z19=0,Y19=0,X19=0,V=1] 
* CE 136: start(V,V10,V16,V19) = 1+ head(V10,W19):2+ tail(V10,X19):2+ intlist(X19,Y19):1
     [V10>=X19+1,V10>=W19+1,X19>=0,W19>=0,Y19=0,V=1] 
* CE 137: start(V,V10,V16,V19) = 1+ head(V10,W19):2+ tail(V10,X19):2+ intlist(X19,Y19):2
     [V10>=X19+1,V10>=W19+1,Y19>=2,X19>=1,W19>=0,V=1] 
* CE 138: start(V,V10,V16,V19) = 0+ empty(W19,X19):1
     [X19=2,W19=0,V=0] 
* CE 139: start(V,V10,V16,V19) = 0+ empty(V,W19):2
     [V>=0,W19=0] 
* CE 140: start(V,V10,V16,V19) = 0+ empty(V,W19):3
     [V>=1,W19=1] 
* CE 141: start(V,V10,V16,V19) = 0+ tail(V,W19):1
     [V>=0,W19=0] 
* CE 142: start(V,V10,V16,V19) = 0+ tail(V,W19):2
     [V>=W19+1,W19>=0] 
* CE 143: start(V,V10,V16,V19) = 0+ head(V,W19):1
     [V>=0,W19=0] 
* CE 144: start(V,V10,V16,V19) = 0+ head(V,W19):2
     [V>=W19+1,W19>=0] 
* CE 145: start(V,V10,V16,V19) = 0+ zero(W19,X19):1
     [X19=2,W19=0,V=0] 
* CE 146: start(V,V10,V16,V19) = 0+ zero(V,W19):2
     [V>=0,W19=0] 
* CE 147: start(V,V10,V16,V19) = 0+ zero(V,W19):3
     [V>=1,W19=1] 
* CE 148: start(V,V10,V16,V19) = 0+ p(V,W19):1
     [V>=0,W19=0] 
* CE 149: start(V,V10,V16,V19) = 0+ p(V,W19):2
     [V>=W19+1,W19>=1] 
* CE 150: start(V,V10,V16,V19) = 0+ intlist(V,W19):1
     [V>=0,W19=0] 
* CE 151: start(V,V10,V16,V19) = 0+ intlist(V,W19):2
     [W19>=2,V>=1] 
* CE 152: start(V,V10,V16,V19) = 0+ int(W19,X19,Y19):1
     [Y19=1,X19=0,W19=0,V10=0,V=0] 
* CE 153: start(V,V10,V16,V19) = 0+ int(V,V10,W19):2
     [V10>=0,V>=0,W19=0] 
* CE 154: start(V,V10,V16,V19) = 0+ int(V,V10,W19):3
     [V10+W19>=2,V+W19>=1,W19>=0,V10>=1,V>=0] 
* CE 155: start(V,V10,V16,V19) = 0+ int(V,V10,W19):4
     [W19+3*V10>=6,W19>=0,V10>=1,V>=0] 

### Cost equations --> "Loop" of start/4 
* CEs [93] --> Loop 51 
* CEs [94,95,96,97] --> Loop 52 
* CEs [98] --> Loop 53 
* CEs [99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137] --> Loop 54 
* CEs [100,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155] --> Loop 55 

#### Loops of start/4 
* Loop 51: start(V,V10,V16,V19) [V19>=0,V16>=0,V10=2,V=2] 
* Loop 52: start(V,V10,V16,V19) [V10>=0,V=2] 
* Loop 53: start(V,V10,V16,V19) [V19>=0,V16>=0,V10=2,V=1] 
* Loop 54: start(V,V10,V16,V19) [V10>=0,V=1] 
* Loop 55: start(V,V10,V16,V19) [V>=0] 

### Ranking functions of CR start(V,V10,V16,V19) 

#### Partial ranking functions of CR start(V,V10,V16,V19) 


### Resulting Chains:start(V,V10,V16,V19) 
* [55]
* [54]
* [53]
* [52]
* [51]


### Merging Chains  start/4 into  External patterns of execution 
* [[53],[54],[55]] --> 1 
* [[51],[52]] --> 2 


Computing Bounds
=====================================

#### Cost of chains of empty(V,Out):
* Chain [25]: 1
  with precondition: [V=0,Out=2] 

* Chain [24]: 0
  with precondition: [Out=0,V>=0] 

* Chain [23]: 1
  with precondition: [Out=1,V>=1] 


#### Cost of chains of head(V,Out):
* Chain [27]: 0
  with precondition: [Out=0,V>=0] 

* Chain [26]: 1
  with precondition: [Out>=0,V>=Out+1] 


#### Cost of chains of tail(V,Out):
* Chain [29]: 1
  with precondition: [Out=0,V>=0] 

* Chain [28]: 1
  with precondition: [Out>=0,V>=Out+1] 


#### Cost of loops [30,31] 

 * loop 30:intlist(V,Out) -> [intlist(V',Out')] 
4
 * loop 31:intlist(V,Out) -> [intlist(V',Out')] 
5
#### Cost of phase [30,31]:intlist(V,Out) -> [intlist(V',Out')] 
9*it(30)+0
  Such that:aux(1) =< V
aux(2) =< V-V'
it(30) =< aux(1)
it(30) =< aux(2)

#### Cost of chains of intlist(V,Out):
* Chain [[30,31],32]: 9*it(30)+3
  Such that:aux(3) =< V
it(30) =< aux(3)

  with precondition: [V>=1,Out>=2] 

* Chain [32]: 3
  with precondition: [Out=0,V>=0] 


#### Cost of chains of zero(V,Out):
* Chain [35]: 1
  with precondition: [V=0,Out=2] 

* Chain [34]: 0
  with precondition: [Out=0,V>=0] 

* Chain [33]: 1
  with precondition: [Out=1,V>=1] 


#### Cost of loops [36] 

 * loop 36:p(V,Out) -> [p(V',Out')] 
1
#### Cost of phase [36]:p(V,Out) -> [p(V',Out')] 
1*it(36)+0
  Such that:it(36) =< V
it(36) =< V-V'

#### Cost of phase [36]:p(V,Out) -> [p(V',Out')] 
1*it(36)+0
  Such that:it(36) =< V
it(36) =< V-V'

#### Cost of chains of p(V,Out):
* Chain [[36],38]: 1*it(36)+1
  Such that:it(36) =< Out

  with precondition: [Out>=1,V>=Out+1] 

* Chain [[36],37]: 1*it(36)+1
  Such that:it(36) =< Out

  with precondition: [V=Out+1,V>=2] 

* Chain [38]: 1
  with precondition: [Out=0,V>=0] 

* Chain [37]: 1
  with precondition: [V=1,Out=0] 


#### Cost of loops [41,45,47] 

 * loop 41:int(V,V10,Out) -> [int(V',V10',Out')] 
2*s(8)+9*s(9)+10
  Such that:s(7) =< V10'
s(8) =< s(7)

 * loop 45:int(V,V10,Out) -> [int(V',V10',Out')] 
2*s(13)+10
  Such that:s(12) =< V10'
s(13) =< s(12)

 * loop 47:int(V,V10,Out) -> [int(V',V10',Out')] 
5
#### Cost of phase [41,45,47]:int(V,V10,Out) -> [int(V',V10',Out')] 
20*it(41)+5*it(47)+2*s(14)+9*s(15)+2*s(17)+0
  Such that:aux(13) =< -V+1
aux(18) =< V10
aux(19) =< V10-V10'
aux(14) =< aux(18)
it(41) =< aux(18)
aux(14) =< aux(19)
it(41) =< aux(19)
aux(10) =< aux(18)
s(18) =< it(41)*aux(10)
s(16) =< it(41)*aux(18)
it(47) =< aux(14)+aux(14)+aux(13)
s(17) =< s(18)
s(14) =< s(16)

#### Cost of loops [43] 

 * loop 43:int(V,V10,Out) -> [int(V',V10',Out')] 
2*s(26)+2*s(25)+10
  Such that:s(23) =< V'
s(24) =< V10'
s(25) =< s(24)
s(26) =< s(23)

#### Cost of phase [43]:int(V,V10,Out) -> [int(V',V10',Out')] 
10*it(43)+2*s(27)+2*s(28)+0
  Such that:it(43) =< V-V'
it(43) =< V10-V10'
aux(23) =< V
aux(24) =< V10
it(43) =< aux(23)
it(43) =< aux(24)
s(30) =< it(43)*aux(24)
s(29) =< it(43)*aux(23)
s(28) =< s(30)
s(27) =< s(29)

#### Cost of phase [41,45,47]:int(V,V10,Out) -> [int(V',V10',Out')] 
20*it(41)+5*it(47)+2*s(14)+9*s(15)+2*s(17)+0
  Such that:aux(13) =< -V+1
aux(18) =< V10
aux(19) =< V10-V10'
aux(14) =< aux(18)
it(41) =< aux(18)
aux(14) =< aux(19)
it(41) =< aux(19)
aux(10) =< aux(18)
s(18) =< it(41)*aux(10)
s(16) =< it(41)*aux(18)
it(47) =< aux(14)+aux(14)+aux(13)
s(17) =< s(18)
s(14) =< s(16)

#### Cost of phase [43]:int(V,V10,Out) -> [int(V',V10',Out')] 
10*it(43)+2*s(27)+2*s(28)+0
  Such that:it(43) =< V-V'
it(43) =< V10-V10'
aux(23) =< V
aux(24) =< V10
it(43) =< aux(23)
it(43) =< aux(24)
s(30) =< it(43)*aux(24)
s(29) =< it(43)*aux(23)
s(28) =< s(30)
s(27) =< s(29)

#### Cost of phase [41,45,47]:int(V,V10,Out) -> [int(V',V10',Out')] 
20*it(41)+5*it(47)+2*s(14)+9*s(15)+2*s(17)+0
  Such that:aux(13) =< -V+1
aux(18) =< V10
aux(19) =< V10-V10'
aux(14) =< aux(18)
it(41) =< aux(18)
aux(14) =< aux(19)
it(41) =< aux(19)
aux(10) =< aux(18)
s(18) =< it(41)*aux(10)
s(16) =< it(41)*aux(18)
it(47) =< aux(14)+aux(14)+aux(13)
s(17) =< s(18)
s(14) =< s(16)

#### Cost of phase [43]:int(V,V10,Out) -> [int(V',V10',Out')] 
10*it(43)+2*s(27)+2*s(28)+0
  Such that:it(43) =< V-V'
it(43) =< V10-V10'
aux(23) =< V
aux(24) =< V10
it(43) =< aux(23)
it(43) =< aux(24)
s(30) =< it(43)*aux(24)
s(29) =< it(43)*aux(23)
s(28) =< s(30)
s(27) =< s(29)

#### Cost of phase [41,45,47]:int(V,V10,Out) -> [int(V',V10',Out')] 
20*it(41)+5*it(47)+2*s(14)+9*s(15)+2*s(17)+0
  Such that:aux(13) =< -V+1
aux(18) =< V10
aux(19) =< V10-V10'
aux(14) =< aux(18)
it(41) =< aux(18)
aux(14) =< aux(19)
it(41) =< aux(19)
aux(10) =< aux(18)
s(18) =< it(41)*aux(10)
s(16) =< it(41)*aux(18)
it(47) =< aux(14)+aux(14)+aux(13)
s(17) =< s(18)
s(14) =< s(16)

#### Cost of phase [43]:int(V,V10,Out) -> [int(V',V10',Out')] 
10*it(43)+2*s(27)+2*s(28)+0
  Such that:it(43) =< V-V'
it(43) =< V10-V10'
aux(23) =< V
aux(24) =< V10
it(43) =< aux(23)
it(43) =< aux(24)
s(30) =< it(43)*aux(24)
s(29) =< it(43)*aux(23)
s(28) =< s(30)
s(27) =< s(29)

#### Cost of phase [41,45,47]:int(V,V10,Out) -> [int(V',V10',Out')] 
20*it(41)+5*it(47)+2*s(14)+9*s(15)+2*s(17)+0
  Such that:aux(13) =< -V+1
aux(18) =< V10
aux(19) =< V10-V10'
aux(14) =< aux(18)
it(41) =< aux(18)
aux(14) =< aux(19)
it(41) =< aux(19)
aux(10) =< aux(18)
s(18) =< it(41)*aux(10)
s(16) =< it(41)*aux(18)
it(47) =< aux(14)+aux(14)+aux(13)
s(17) =< s(18)
s(14) =< s(16)

#### Cost of phase [43]:int(V,V10,Out) -> [int(V',V10',Out')] 
10*it(43)+2*s(27)+2*s(28)+0
  Such that:it(43) =< V-V'
it(43) =< V10-V10'
aux(23) =< V
aux(24) =< V10
it(43) =< aux(23)
it(43) =< aux(24)
s(30) =< it(43)*aux(24)
s(29) =< it(43)*aux(23)
s(28) =< s(30)
s(27) =< s(29)

#### Cost of loops [39] 

 * loop 39:int(V,V10,Out) -> [int(V',V10',Out')] 
2*s(42)+2*s(41)+9*s(43)+10
  Such that:s(39) =< V'
s(40) =< V10'
s(41) =< s(40)
s(42) =< s(39)

#### Cost of phase [39]:int(V,V10,Out) -> [int(V',V10',Out')] 
10*it(39)+2*s(44)+2*s(45)+9*s(46)+0
  Such that:it(39) =< V-V'
it(39) =< V10-V10'
aux(36) =< V
aux(37) =< V10
it(39) =< aux(36)
it(39) =< aux(37)
s(48) =< it(39)*aux(37)
s(47) =< it(39)*aux(36)
s(45) =< s(48)
s(44) =< s(47)

#### Cost of phase [43]:int(V,V10,Out) -> [int(V',V10',Out')] 
10*it(43)+2*s(27)+2*s(28)+0
  Such that:it(43) =< V-V'
it(43) =< V10-V10'
aux(23) =< V
aux(24) =< V10
it(43) =< aux(23)
it(43) =< aux(24)
s(30) =< it(43)*aux(24)
s(29) =< it(43)*aux(23)
s(28) =< s(30)
s(27) =< s(29)

#### Cost of phase [39]:int(V,V10,Out) -> [int(V',V10',Out')] 
10*it(39)+2*s(44)+2*s(45)+9*s(46)+0
  Such that:it(39) =< V-V'
it(39) =< V10-V10'
aux(36) =< V
aux(37) =< V10
it(39) =< aux(36)
it(39) =< aux(37)
s(48) =< it(39)*aux(37)
s(47) =< it(39)*aux(36)
s(45) =< s(48)
s(44) =< s(47)

#### Cost of phase [43]:int(V,V10,Out) -> [int(V',V10',Out')] 
10*it(43)+2*s(27)+2*s(28)+0
  Such that:it(43) =< V-V'
it(43) =< V10-V10'
aux(23) =< V
aux(24) =< V10
it(43) =< aux(23)
it(43) =< aux(24)
s(30) =< it(43)*aux(24)
s(29) =< it(43)*aux(23)
s(28) =< s(30)
s(27) =< s(29)

#### Cost of phase [39]:int(V,V10,Out) -> [int(V',V10',Out')] 
10*it(39)+2*s(44)+2*s(45)+9*s(46)+0
  Such that:it(39) =< V-V'
it(39) =< V10-V10'
aux(36) =< V
aux(37) =< V10
it(39) =< aux(36)
it(39) =< aux(37)
s(48) =< it(39)*aux(37)
s(47) =< it(39)*aux(36)
s(45) =< s(48)
s(44) =< s(47)

#### Cost of phase [43]:int(V,V10,Out) -> [int(V',V10',Out')] 
10*it(43)+2*s(27)+2*s(28)+0
  Such that:it(43) =< V-V'
it(43) =< V10-V10'
aux(23) =< V
aux(24) =< V10
it(43) =< aux(23)
it(43) =< aux(24)
s(30) =< it(43)*aux(24)
s(29) =< it(43)*aux(23)
s(28) =< s(30)
s(27) =< s(29)

#### Cost of phase [39]:int(V,V10,Out) -> [int(V',V10',Out')] 
10*it(39)+2*s(44)+2*s(45)+9*s(46)+0
  Such that:it(39) =< V-V'
it(39) =< V10-V10'
aux(36) =< V
aux(37) =< V10
it(39) =< aux(36)
it(39) =< aux(37)
s(48) =< it(39)*aux(37)
s(47) =< it(39)*aux(36)
s(45) =< s(48)
s(44) =< s(47)

#### Cost of phase [43]:int(V,V10,Out) -> [int(V',V10',Out')] 
10*it(43)+2*s(27)+2*s(28)+0
  Such that:it(43) =< V-V'
it(43) =< V10-V10'
aux(23) =< V
aux(24) =< V10
it(43) =< aux(23)
it(43) =< aux(24)
s(30) =< it(43)*aux(24)
s(29) =< it(43)*aux(23)
s(28) =< s(30)
s(27) =< s(29)

#### Cost of phase [39]:int(V,V10,Out) -> [int(V',V10',Out')] 
10*it(39)+2*s(44)+2*s(45)+9*s(46)+0
  Such that:it(39) =< V-V'
it(39) =< V10-V10'
aux(36) =< V
aux(37) =< V10
it(39) =< aux(36)
it(39) =< aux(37)
s(48) =< it(39)*aux(37)
s(47) =< it(39)*aux(36)
s(45) =< s(48)
s(44) =< s(47)

#### Cost of phase [43]:int(V,V10,Out) -> [int(V',V10',Out')] 
10*it(43)+2*s(27)+2*s(28)+0
  Such that:it(43) =< V-V'
it(43) =< V10-V10'
aux(23) =< V
aux(24) =< V10
it(43) =< aux(23)
it(43) =< aux(24)
s(30) =< it(43)*aux(24)
s(29) =< it(43)*aux(23)
s(28) =< s(30)
s(27) =< s(29)

#### Cost of phase [39]:int(V,V10,Out) -> [int(V',V10',Out')] 
10*it(39)+2*s(44)+2*s(45)+9*s(46)+0
  Such that:it(39) =< V-V'
it(39) =< V10-V10'
aux(36) =< V
aux(37) =< V10
it(39) =< aux(36)
it(39) =< aux(37)
s(48) =< it(39)*aux(37)
s(47) =< it(39)*aux(36)
s(45) =< s(48)
s(44) =< s(47)

#### Cost of phase [43]:int(V,V10,Out) -> [int(V',V10',Out')] 
10*it(43)+2*s(27)+2*s(28)+0
  Such that:it(43) =< V-V'
it(43) =< V10-V10'
aux(23) =< V
aux(24) =< V10
it(43) =< aux(23)
it(43) =< aux(24)
s(30) =< it(43)*aux(24)
s(29) =< it(43)*aux(23)
s(28) =< s(30)
s(27) =< s(29)

#### Cost of phase [43]:int(V,V10,Out) -> [int(V',V10',Out')] 
10*it(43)+2*s(27)+2*s(28)+0
  Such that:it(43) =< V-V'
it(43) =< V10-V10'
aux(23) =< V
aux(24) =< V10
it(43) =< aux(23)
it(43) =< aux(24)
s(30) =< it(43)*aux(24)
s(29) =< it(43)*aux(23)
s(28) =< s(30)
s(27) =< s(29)

#### Cost of phase [43]:int(V,V10,Out) -> [int(V',V10',Out')] 
10*it(43)+2*s(27)+2*s(28)+0
  Such that:it(43) =< V-V'
it(43) =< V10-V10'
aux(23) =< V
aux(24) =< V10
it(43) =< aux(23)
it(43) =< aux(24)
s(30) =< it(43)*aux(24)
s(29) =< it(43)*aux(23)
s(28) =< s(30)
s(27) =< s(29)

#### Cost of phase [43]:int(V,V10,Out) -> [int(V',V10',Out')] 
10*it(43)+2*s(27)+2*s(28)+0
  Such that:it(43) =< V-V'
it(43) =< V10-V10'
aux(23) =< V
aux(24) =< V10
it(43) =< aux(23)
it(43) =< aux(24)
s(30) =< it(43)*aux(24)
s(29) =< it(43)*aux(23)
s(28) =< s(30)
s(27) =< s(29)

#### Cost of phase [43]:int(V,V10,Out) -> [int(V',V10',Out')] 
10*it(43)+2*s(27)+2*s(28)+0
  Such that:it(43) =< V-V'
it(43) =< V10-V10'
aux(23) =< V
aux(24) =< V10
it(43) =< aux(23)
it(43) =< aux(24)
s(30) =< it(43)*aux(24)
s(29) =< it(43)*aux(23)
s(28) =< s(30)
s(27) =< s(29)

#### Cost of phase [43]:int(V,V10,Out) -> [int(V',V10',Out')] 
10*it(43)+2*s(27)+2*s(28)+0
  Such that:it(43) =< V-V'
it(43) =< V10-V10'
aux(23) =< V
aux(24) =< V10
it(43) =< aux(23)
it(43) =< aux(24)
s(30) =< it(43)*aux(24)
s(29) =< it(43)*aux(23)
s(28) =< s(30)
s(27) =< s(29)

#### Cost of phase [43]:int(V,V10,Out) -> [int(V',V10',Out')] 
10*it(43)+2*s(27)+2*s(28)+0
  Such that:it(43) =< V-V'
it(43) =< V10-V10'
aux(23) =< V
aux(24) =< V10
it(43) =< aux(23)
it(43) =< aux(24)
s(30) =< it(43)*aux(24)
s(29) =< it(43)*aux(23)
s(28) =< s(30)
s(27) =< s(29)

#### Cost of phase [43]:int(V,V10,Out) -> [int(V',V10',Out')] 
10*it(43)+2*s(27)+2*s(28)+0
  Such that:it(43) =< V-V'
it(43) =< V10-V10'
aux(23) =< V
aux(24) =< V10
it(43) =< aux(23)
it(43) =< aux(24)
s(30) =< it(43)*aux(24)
s(29) =< it(43)*aux(23)
s(28) =< s(30)
s(27) =< s(29)

#### Cost of chains of int(V,V10,Out):
* Chain [[43],[41,45,47],50]: 20*it(41)+10*it(43)+5*it(47)+2*s(14)+9*s(15)+2*s(17)+2*s(27)+2*s(28)+4
  Such that:aux(23) =< V
aux(25) =< V10
it(43) =< aux(25)
it(41) =< aux(25)
aux(10) =< aux(25)
s(18) =< it(41)*aux(10)
s(16) =< it(41)*aux(25)
it(47) =< aux(25)+aux(25)
s(17) =< s(18)
s(14) =< s(16)
it(43) =< aux(23)
s(30) =< it(43)*aux(25)
s(29) =< it(43)*aux(23)
s(28) =< s(30)
s(27) =< s(29)

  with precondition: [Out=0,V>=2,V10>=2] 

* Chain [[43],[41,45,47],46,50]: 20*it(41)+10*it(43)+5*it(47)+2*s(14)+9*s(15)+2*s(17)+2*s(27)+2*s(28)+14
  Such that:aux(23) =< V
aux(27) =< V10
it(43) =< aux(27)
it(41) =< aux(27)
aux(10) =< aux(27)
s(18) =< it(41)*aux(10)
s(16) =< it(41)*aux(27)
it(47) =< aux(27)+aux(27)
s(17) =< s(18)
s(14) =< s(16)
it(43) =< aux(23)
s(30) =< it(43)*aux(27)
s(29) =< it(43)*aux(23)
s(28) =< s(30)
s(27) =< s(29)

  with precondition: [Out=0,V>=2,V10>=2] 

* Chain [[43],[41,45,47],46,49]: 20*it(41)+10*it(43)+5*it(47)+2*s(14)+9*s(15)+2*s(17)+2*s(27)+2*s(28)+15
  Such that:aux(23) =< V
aux(29) =< V10
it(43) =< aux(29)
it(41) =< aux(29)
aux(10) =< aux(29)
s(18) =< it(41)*aux(10)
s(16) =< it(41)*aux(29)
it(47) =< aux(29)+aux(29)
s(17) =< s(18)
s(14) =< s(16)
it(43) =< aux(23)
s(30) =< it(43)*aux(29)
s(29) =< it(43)*aux(23)
s(28) =< s(30)
s(27) =< s(29)

  with precondition: [Out=0,V>=2,V10>=2] 

* Chain [[43],[41,45,47],46,48]: 20*it(41)+10*it(43)+5*it(47)+2*s(14)+9*s(15)+2*s(17)+2*s(27)+2*s(28)+15
  Such that:aux(23) =< V
aux(31) =< V10
it(43) =< aux(31)
it(41) =< aux(31)
aux(10) =< aux(31)
s(18) =< it(41)*aux(10)
s(16) =< it(41)*aux(31)
it(47) =< aux(31)+aux(31)
s(17) =< s(18)
s(14) =< s(16)
it(43) =< aux(23)
s(30) =< it(43)*aux(31)
s(29) =< it(43)*aux(23)
s(28) =< s(30)
s(27) =< s(29)

  with precondition: [Out=0,V>=2,V10>=2] 

* Chain [[43],[41,45,47],42,49]: 20*it(41)+10*it(43)+5*it(47)+2*s(14)+18*s(15)+2*s(17)+2*s(27)+2*s(28)+15
  Such that:aux(23) =< V
aux(33) =< V10
it(43) =< aux(33)
it(41) =< aux(33)
aux(10) =< aux(33)
s(18) =< it(41)*aux(10)
s(16) =< it(41)*aux(33)
it(47) =< aux(33)+aux(33)
s(17) =< s(18)
s(14) =< s(16)
it(43) =< aux(23)
s(30) =< it(43)*aux(33)
s(29) =< it(43)*aux(23)
s(28) =< s(30)
s(27) =< s(29)

  with precondition: [Out=0,V>=2,V10>=2] 

* Chain [[43],[39],[41,45,47],50]: 20*it(39)+20*it(41)+5*it(47)+2*s(14)+18*s(15)+2*s(17)+4*s(27)+4*s(28)+4
  Such that:aux(39) =< V
aux(40) =< V10
it(39) =< aux(40)
it(41) =< aux(40)
aux(10) =< aux(40)
s(18) =< it(41)*aux(10)
s(16) =< it(41)*aux(40)
it(47) =< aux(40)+aux(40)
s(17) =< s(18)
s(14) =< s(16)
it(39) =< aux(39)
s(30) =< it(39)*aux(40)
s(29) =< it(39)*aux(39)
s(28) =< s(30)
s(27) =< s(29)

  with precondition: [Out=0,V>=3,V10>=3] 

* Chain [[43],[39],[41,45,47],46,50]: 20*it(39)+20*it(41)+5*it(47)+2*s(14)+18*s(15)+2*s(17)+4*s(27)+4*s(28)+14
  Such that:aux(42) =< V
aux(43) =< V10
it(39) =< aux(43)
it(41) =< aux(43)
aux(10) =< aux(43)
s(18) =< it(41)*aux(10)
s(16) =< it(41)*aux(43)
it(47) =< aux(43)+aux(43)
s(17) =< s(18)
s(14) =< s(16)
it(39) =< aux(42)
s(30) =< it(39)*aux(43)
s(29) =< it(39)*aux(42)
s(28) =< s(30)
s(27) =< s(29)

  with precondition: [Out=0,V>=3,V10>=3] 

* Chain [[43],[39],[41,45,47],46,49]: 20*it(39)+20*it(41)+5*it(47)+2*s(14)+18*s(15)+2*s(17)+4*s(27)+4*s(28)+15
  Such that:aux(45) =< V
aux(46) =< V10
it(39) =< aux(46)
it(41) =< aux(46)
aux(10) =< aux(46)
s(18) =< it(41)*aux(10)
s(16) =< it(41)*aux(46)
it(47) =< aux(46)+aux(46)
s(17) =< s(18)
s(14) =< s(16)
it(39) =< aux(45)
s(30) =< it(39)*aux(46)
s(29) =< it(39)*aux(45)
s(28) =< s(30)
s(27) =< s(29)

  with precondition: [Out=0,V>=3,V10>=3] 

* Chain [[43],[39],[41,45,47],46,48]: 20*it(39)+20*it(41)+5*it(47)+2*s(14)+18*s(15)+2*s(17)+4*s(27)+4*s(28)+15
  Such that:aux(48) =< V
aux(49) =< V10
it(39) =< aux(49)
it(41) =< aux(49)
aux(10) =< aux(49)
s(18) =< it(41)*aux(10)
s(16) =< it(41)*aux(49)
it(47) =< aux(49)+aux(49)
s(17) =< s(18)
s(14) =< s(16)
it(39) =< aux(48)
s(30) =< it(39)*aux(49)
s(29) =< it(39)*aux(48)
s(28) =< s(30)
s(27) =< s(29)

  with precondition: [Out=0,V>=3,V10>=3] 

* Chain [[43],[39],[41,45,47],42,49]: 20*it(39)+20*it(41)+5*it(47)+2*s(14)+27*s(15)+2*s(17)+4*s(27)+4*s(28)+15
  Such that:aux(51) =< V
aux(52) =< V10
it(39) =< aux(52)
it(41) =< aux(52)
aux(10) =< aux(52)
s(18) =< it(41)*aux(10)
s(16) =< it(41)*aux(52)
it(47) =< aux(52)+aux(52)
s(17) =< s(18)
s(14) =< s(16)
it(39) =< aux(51)
s(30) =< it(39)*aux(52)
s(29) =< it(39)*aux(51)
s(28) =< s(30)
s(27) =< s(29)

  with precondition: [Out=0,V>=3,V10>=3] 

* Chain [[43],[39],42,49]: 20*it(39)+4*s(27)+4*s(28)+18*s(32)+15
  Such that:aux(54) =< V
aux(55) =< V10
it(39) =< aux(54)
it(39) =< aux(55)
s(30) =< it(39)*aux(55)
s(29) =< it(39)*aux(54)
s(28) =< s(30)
s(27) =< s(29)

  with precondition: [Out=0,V>=3,V10>=3] 

* Chain [[43],50]: 10*it(43)+2*s(27)+2*s(28)+4
  Such that:aux(23) =< V
aux(56) =< V10
it(43) =< aux(56)
it(43) =< aux(23)
s(30) =< it(43)*aux(56)
s(29) =< it(43)*aux(23)
s(28) =< s(30)
s(27) =< s(29)

  with precondition: [Out=0,V>=2,V10>=2] 

* Chain [[43],46,50]: 10*it(43)+2*s(27)+2*s(28)+14
  Such that:aux(23) =< V
aux(57) =< V10
it(43) =< aux(57)
it(43) =< aux(23)
s(30) =< it(43)*aux(57)
s(29) =< it(43)*aux(23)
s(28) =< s(30)
s(27) =< s(29)

  with precondition: [Out=0,V>=2,V10>=2] 

* Chain [[43],46,49]: 10*it(43)+2*s(27)+2*s(28)+15
  Such that:aux(23) =< V
aux(58) =< V10
it(43) =< aux(58)
it(43) =< aux(23)
s(30) =< it(43)*aux(58)
s(29) =< it(43)*aux(23)
s(28) =< s(30)
s(27) =< s(29)

  with precondition: [Out=0,V>=2,V10>=2] 

* Chain [[43],46,48]: 10*it(43)+2*s(27)+2*s(28)+15
  Such that:aux(23) =< V
aux(59) =< V10
it(43) =< aux(59)
it(43) =< aux(23)
s(30) =< it(43)*aux(59)
s(29) =< it(43)*aux(23)
s(28) =< s(30)
s(27) =< s(29)

  with precondition: [Out=0,V>=2,V10>=2] 

* Chain [[43],44,50]: 10*it(43)+2*s(27)+2*s(28)+2*s(50)+14
  Such that:aux(24) =< V10
aux(60) =< V
it(43) =< aux(60)
s(50) =< aux(60)
it(43) =< aux(24)
s(30) =< it(43)*aux(24)
s(29) =< it(43)*aux(60)
s(28) =< s(30)
s(27) =< s(29)

  with precondition: [Out=0,V>=3,V10>=2] 

* Chain [[43],44,48]: 10*it(43)+2*s(27)+2*s(28)+2*s(50)+15
  Such that:aux(24) =< V10
aux(61) =< V
it(43) =< aux(61)
s(50) =< aux(61)
it(43) =< aux(24)
s(30) =< it(43)*aux(24)
s(29) =< it(43)*aux(61)
s(28) =< s(30)
s(27) =< s(29)

  with precondition: [Out=0,V>=3,V10>=2] 

* Chain [[43],42,49]: 10*it(43)+2*s(27)+2*s(28)+9*s(32)+15
  Such that:aux(23) =< V
aux(62) =< V10
it(43) =< aux(62)
it(43) =< aux(23)
s(30) =< it(43)*aux(62)
s(29) =< it(43)*aux(23)
s(28) =< s(30)
s(27) =< s(29)

  with precondition: [Out=0,V>=2,V10>=2] 

* Chain [[41,45,47],50]: 20*it(41)+5*it(47)+2*s(14)+9*s(15)+2*s(17)+4
  Such that:aux(13) =< -V+1
aux(20) =< V10
it(41) =< aux(20)
aux(10) =< aux(20)
s(18) =< it(41)*aux(10)
s(16) =< it(41)*aux(20)
it(47) =< aux(20)+aux(20)+aux(13)
s(17) =< s(18)
s(14) =< s(16)

  with precondition: [V>=0,V10>=1,Out>=0,Out+V>=1,Out+V10>=2] 

* Chain [[41,45,47],46,50]: 20*it(41)+5*it(47)+2*s(14)+9*s(15)+2*s(17)+14
  Such that:aux(13) =< -V+1
aux(26) =< V10
it(41) =< aux(26)
aux(10) =< aux(26)
s(18) =< it(41)*aux(10)
s(16) =< it(41)*aux(26)
it(47) =< aux(26)+aux(26)+aux(13)
s(17) =< s(18)
s(14) =< s(16)

  with precondition: [V>=0,V10>=1,Out>=0,Out+V>=1,Out+V10>=2] 

* Chain [[41,45,47],46,49]: 20*it(41)+5*it(47)+2*s(14)+9*s(15)+2*s(17)+15
  Such that:aux(13) =< -V+1
aux(28) =< V10
it(41) =< aux(28)
aux(10) =< aux(28)
s(18) =< it(41)*aux(10)
s(16) =< it(41)*aux(28)
it(47) =< aux(28)+aux(28)+aux(13)
s(17) =< s(18)
s(14) =< s(16)

  with precondition: [V>=0,V10>=1,Out>=0,Out+V>=1,Out+V10>=2] 

* Chain [[41,45,47],46,48]: 20*it(41)+5*it(47)+2*s(14)+9*s(15)+2*s(17)+15
  Such that:aux(13) =< -V+1
aux(30) =< V10
it(41) =< aux(30)
aux(10) =< aux(30)
s(18) =< it(41)*aux(10)
s(16) =< it(41)*aux(30)
it(47) =< aux(30)+aux(30)+aux(13)
s(17) =< s(18)
s(14) =< s(16)

  with precondition: [V>=0,V10>=1,Out>=0,Out+V>=1,Out+V10>=2] 

* Chain [[41,45,47],42,49]: 20*it(41)+5*it(47)+2*s(14)+18*s(15)+2*s(17)+15
  Such that:aux(13) =< -V+1
aux(32) =< V10
it(41) =< aux(32)
aux(10) =< aux(32)
s(18) =< it(41)*aux(10)
s(16) =< it(41)*aux(32)
it(47) =< aux(32)+aux(32)+aux(13)
s(17) =< s(18)
s(14) =< s(16)

  with precondition: [V>=0,V10>=1,Out>=0,Out+3*V10>=6] 

* Chain [[39],[41,45,47],50]: 10*it(39)+20*it(41)+5*it(47)+2*s(14)+18*s(15)+2*s(17)+2*s(44)+2*s(45)+4
  Such that:aux(36) =< V
aux(38) =< V10
it(39) =< aux(38)
it(41) =< aux(38)
aux(10) =< aux(38)
s(18) =< it(41)*aux(10)
s(16) =< it(41)*aux(38)
it(47) =< aux(38)+aux(38)
s(17) =< s(18)
s(14) =< s(16)
it(39) =< aux(36)
s(48) =< it(39)*aux(38)
s(47) =< it(39)*aux(36)
s(45) =< s(48)
s(44) =< s(47)

  with precondition: [V>=2,V10>=2,Out>=2] 

* Chain [[39],[41,45,47],46,50]: 10*it(39)+20*it(41)+5*it(47)+2*s(14)+18*s(15)+2*s(17)+2*s(44)+2*s(45)+14
  Such that:aux(36) =< V
aux(41) =< V10
it(39) =< aux(41)
it(41) =< aux(41)
aux(10) =< aux(41)
s(18) =< it(41)*aux(10)
s(16) =< it(41)*aux(41)
it(47) =< aux(41)+aux(41)
s(17) =< s(18)
s(14) =< s(16)
it(39) =< aux(36)
s(48) =< it(39)*aux(41)
s(47) =< it(39)*aux(36)
s(45) =< s(48)
s(44) =< s(47)

  with precondition: [V>=2,V10>=2,Out>=2] 

* Chain [[39],[41,45,47],46,49]: 10*it(39)+20*it(41)+5*it(47)+2*s(14)+18*s(15)+2*s(17)+2*s(44)+2*s(45)+15
  Such that:aux(36) =< V
aux(44) =< V10
it(39) =< aux(44)
it(41) =< aux(44)
aux(10) =< aux(44)
s(18) =< it(41)*aux(10)
s(16) =< it(41)*aux(44)
it(47) =< aux(44)+aux(44)
s(17) =< s(18)
s(14) =< s(16)
it(39) =< aux(36)
s(48) =< it(39)*aux(44)
s(47) =< it(39)*aux(36)
s(45) =< s(48)
s(44) =< s(47)

  with precondition: [V>=2,V10>=2,Out>=2] 

* Chain [[39],[41,45,47],46,48]: 10*it(39)+20*it(41)+5*it(47)+2*s(14)+18*s(15)+2*s(17)+2*s(44)+2*s(45)+15
  Such that:aux(36) =< V
aux(47) =< V10
it(39) =< aux(47)
it(41) =< aux(47)
aux(10) =< aux(47)
s(18) =< it(41)*aux(10)
s(16) =< it(41)*aux(47)
it(47) =< aux(47)+aux(47)
s(17) =< s(18)
s(14) =< s(16)
it(39) =< aux(36)
s(48) =< it(39)*aux(47)
s(47) =< it(39)*aux(36)
s(45) =< s(48)
s(44) =< s(47)

  with precondition: [V>=2,V10>=2,Out>=2] 

* Chain [[39],[41,45,47],42,49]: 10*it(39)+20*it(41)+5*it(47)+2*s(14)+27*s(15)+2*s(17)+2*s(44)+2*s(45)+15
  Such that:aux(36) =< V
aux(50) =< V10
it(39) =< aux(50)
it(41) =< aux(50)
aux(10) =< aux(50)
s(18) =< it(41)*aux(10)
s(16) =< it(41)*aux(50)
it(47) =< aux(50)+aux(50)
s(17) =< s(18)
s(14) =< s(16)
it(39) =< aux(36)
s(48) =< it(39)*aux(50)
s(47) =< it(39)*aux(36)
s(45) =< s(48)
s(44) =< s(47)

  with precondition: [V>=2,V10>=2,Out>=2] 

* Chain [[39],42,49]: 10*it(39)+18*s(32)+2*s(44)+2*s(45)+15
  Such that:aux(37) =< V10
aux(53) =< V
it(39) =< aux(53)
it(39) =< aux(37)
s(48) =< it(39)*aux(37)
s(47) =< it(39)*aux(53)
s(45) =< s(48)
s(44) =< s(47)

  with precondition: [V>=2,V10>=2,Out>=2] 

* Chain [50]: 4
  with precondition: [Out=0,V>=0,V10>=0] 

* Chain [49]: 5
  with precondition: [V=0,V10=0,Out=1] 

* Chain [48]: 5
  with precondition: [V10=0,Out=0,V>=0] 

* Chain [46,50]: 14
  with precondition: [Out=0,V>=1,V10>=1] 

* Chain [46,49]: 15
  with precondition: [Out=0,V>=1,V10>=1] 

* Chain [46,48]: 15
  with precondition: [Out=0,V>=1,V10>=1] 

* Chain [44,50]: 2*s(50)+14
  Such that:s(49) =< V
s(50) =< s(49)

  with precondition: [Out=0,V>=2,V10>=1] 

* Chain [44,48]: 2*s(50)+15
  Such that:s(49) =< V
s(50) =< s(49)

  with precondition: [Out=0,V>=2,V10>=1] 

* Chain [42,49]: 9*s(32)+15
  with precondition: [V>=1,V10>=1,Out>=2] 


#### Cost of chains of start(V,V10,V16,V19):
* Chain [55]: 19*s(390)+300*s(396)+60*s(399)+60*s(400)+400*s(401)+75*s(405)+40*s(406)+40*s(407)+360*s(408)+25*s(416)+15
  Such that:aux(68) =< -V+1
aux(69) =< V
aux(70) =< V10
s(401) =< aux(70)
s(402) =< aux(70)
s(403) =< s(401)*s(402)
s(404) =< s(401)*aux(70)
s(416) =< aux(70)+aux(70)+aux(68)
s(406) =< s(403)
s(407) =< s(404)
s(396) =< aux(70)
s(405) =< aux(70)+aux(70)
s(396) =< aux(69)
s(397) =< s(396)*aux(70)
s(398) =< s(396)*aux(69)
s(399) =< s(397)
s(400) =< s(398)
s(390) =< aux(69)

  with precondition: [V>=0] 

* Chain [54]: 26*s(437)+3312*s(453)+1220*s(455)+250*s(468)+120*s(469)+120*s(470)+50*s(481)+1648*s(539)+360*s(563)+72*s(566)+72*s(567)+350*s(682)+160*s(683)+160*s(684)+50*s(695)+46*s(753)+360*s(777)+72*s(780)+72*s(781)+300*s(867)+60*s(870)+60*s(871)+22
  Such that:aux(101) =< 1
aux(102) =< V10
aux(103) =< V16
aux(104) =< V19
s(437) =< aux(101)
s(455) =< aux(104)
s(465) =< aux(104)
s(466) =< s(455)*s(465)
s(467) =< s(455)*aux(104)
s(481) =< aux(104)+aux(104)+aux(101)
s(469) =< s(466)
s(470) =< s(467)
s(468) =< aux(104)+aux(104)
s(539) =< aux(103)
s(679) =< aux(103)
s(680) =< s(539)*s(679)
s(681) =< s(539)*aux(103)
s(695) =< aux(103)+aux(103)+aux(101)
s(683) =< s(680)
s(684) =< s(681)
s(682) =< aux(103)+aux(103)
s(867) =< aux(103)
s(867) =< aux(101)
s(868) =< s(867)*aux(103)
s(869) =< s(867)*aux(101)
s(870) =< s(868)
s(871) =< s(869)
s(753) =< aux(102)
s(777) =< aux(103)
s(777) =< aux(102)
s(778) =< s(777)*aux(103)
s(779) =< s(777)*aux(102)
s(780) =< s(778)
s(781) =< s(779)
s(563) =< aux(104)
s(563) =< aux(103)
s(564) =< s(563)*aux(104)
s(565) =< s(563)*aux(103)
s(566) =< s(564)
s(567) =< s(565)

  with precondition: [V=1,V10>=0] 

* Chain [53]: 2
  with precondition: [V=1,V10=2,V16>=0,V19>=0] 

* Chain [52]: 8*s(913)+300*s(914)+60*s(917)+60*s(918)+400*s(919)+100*s(923)+40*s(924)+40*s(925)+360*s(926)+17
  Such that:aux(105) =< 1
aux(106) =< V19
s(913) =< aux(105)
s(914) =< aux(106)
s(914) =< aux(105)
s(915) =< s(914)*aux(106)
s(916) =< s(914)*aux(105)
s(917) =< s(915)
s(918) =< s(916)
s(919) =< aux(106)
s(920) =< aux(106)
s(921) =< s(919)*s(920)
s(922) =< s(919)*aux(106)
s(923) =< aux(106)+aux(106)
s(924) =< s(921)
s(925) =< s(922)

  with precondition: [V=2,V10>=0] 

* Chain [51]: 2
  with precondition: [V=2,V10=2,V16>=0,V19>=0] 


Closed-form bounds of start(V,V10,V16,V19): 
-------------------------------------
* Chain [55] with precondition: [V>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [54] with precondition: [V=1,V10>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [53] with precondition: [V=1,V10=2,V16>=0,V19>=0] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [52] with precondition: [V=2,V10>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [51] with precondition: [V=2,V10=2,V16>=0,V19>=0] 
    - Upper bound: 2 
    - Complexity: constant 

### Maximum cost of start(V,V10,V16,V19): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 55 ms.
* Invariants computed in 117 ms.
   - Backward Invariants 59 ms.
   - Transitive Invariants 8 ms.
* Refinement performed in 224 ms.
* Termination proved in 11 ms.
* Upper bounds computed in 621 ms.
   - Equation cost structures 325 ms.
   - Phase cost structures 59 ms.
   - Chain cost structures 123 ms.
   - Solving cost expressions 6 ms.
* Total analysis performed in 1071 ms.


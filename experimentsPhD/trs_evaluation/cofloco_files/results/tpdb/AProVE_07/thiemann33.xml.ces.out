
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive [multiple] : [ack/3]
1. recursive  : [le/3]
2. non_recursive  : [nr/1]
3. recursive  : [d/2,if/3]
4. non_recursive  : [numbers/1]
5. non_recursive  : [start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into ack/3
1. SCC is partially evaluated into le/3
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into d/2
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations ack/3 
* CE 16 is refined into CE [17] 
* CE 15 is refined into CE [18] 
* CE 14 is refined into CE [19] 


#### Refined cost equations ack/3 
* CE 17: ack(V,V2,Out) = 1+ ack(W2,X2,Y2)+ ack(Z2,Y2,Out)
     [Z2>=0,X2>=0,Z2+1=W2,X2+1=V2,Z2+1=V] 
* CE 18: ack(V,V2,Out) = 1+ ack(W2,X2,Out)
     [W2>=0,W2+1=V,X2=1,V2=0] 
* CE 19: ack(V,V2,Out) = 1
     [V2>=0,V2+1=Out,V=0] 

### Cost equations --> "Loop" of ack/3 
* CEs [19] --> Loop 10 
* CEs [18] --> Loop 11 
* CEs [17] --> Loop 12 

#### Loops of ack/3 
* Loop 10: ack(V,V2,Out) [V2>=0,V2+1=Out,V=0] 
* Loop 11: ack(V,V2,Out)->  ack(V',V2',Out)
                  [V'>=0,V'+1=V,V2'=1,V2=0] 
* Loop 12: ack(V,V2,Out)->  ack(V',V2',Out')  ack(A'2,Out',Out)
                  [A'2>=0,V2'>=0,A'2+1=V',V2'+1=V2,A'2+1=V] 

### Ranking functions of CR ack(V,V2,Out) 

#### Partial ranking functions of CR ack(V,V2,Out) 
* Partial RF of phase [11,12]:
  - RF of loop [11:1]:
    -V2+1 depends on loops [12:1,12:2] 
  - RF of loop [11:1,12:2]:
    V
  - RF of loop [12:1]:
    V2 depends on loops [11:1,12:2] 


### Resulting Chains:ack(V,V2,Out) 
* [10]
* [multiple([11,12],[[10]])]


### Merging Chains  ack/3 into  External patterns of execution 
* [[10]] --> 1 
* [[multiple([11,12],[[10]])]] --> 2 


### Specialization of cost equations le/3 
* CE 13 is refined into CE [20] 
* CE 12 is refined into CE [21] 
* CE 11 is refined into CE [22] 


#### Refined cost equations le/3 
* CE 20: le(V,V2,Out) = 1+ le(W2,X2,Out)
     [X2>=0,W2>=0,X2+1=V2,W2+1=V] 
* CE 21: le(V,V2,Out) = 1
     [V>=1,Out=0,V2=0] 
* CE 22: le(V,V2,Out) = 1
     [V2>=0,Out=1,V=0] 

### Cost equations --> "Loop" of le/3 
* CEs [21] --> Loop 13 
* CEs [22] --> Loop 14 
* CEs [20] --> Loop 15 

#### Loops of le/3 
* Loop 13: le(V,V2,Out) [V>=1,Out=0,V2=0] 
* Loop 14: le(V,V2,Out) [V2>=0,Out=1,V=0] 
* Loop 15: le(V,V2,Out)->  le(V',V2',Out)
                  [V2'>=0,V'>=0,V2'+1=V2,V'+1=V] 

### Ranking functions of CR le(V,V2,Out) 
* RF of phase [15]: [V,V2]

#### Partial ranking functions of CR le(V,V2,Out) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    V
    V2


### Resulting Chains:le(V,V2,Out) 
* [[15],14]
* [[15],13]
* [14]
* [13]


### Merging Chains  le/3 into  External patterns of execution 
* [[14]] --> 1 
* [[13]] --> 2 
* [[13,[15]]] --> 3 
* [[14,[15]]] --> 4 


### Specialization of cost equations d/2 
* CE 10 is refined into CE [23,24] 
* CE 9 is refined into CE [25] 


#### Refined cost equations d/2 
* CE 23: d(V,Out) = 3+ ack(W,X,Y):2+ le(Z,Y,A1):1+ d(B1,C1)
     [Y>=7,Out=C1+1,B1=1,A1=1,Z=0,X=0,W=6,V=0] 
* CE 24: d(V,Out) = 3+ ack(W,X,Y):2+ le(V,Y,Z):4+ d(A1,B1)
     [Y>=V,Y>=7,V>=1,V+B1+1=Out,V+1=A1,Z=1,X=0,W=6] 
* CE 25: d(V,Out) = 3+ ack(W,X,Y):2+ le(V,Y,Z):3
     [V>=Y+1,Y>=7,Z=0,X=0,W=6,Out=0] 

### Cost equations --> "Loop" of d/2 
* CEs [25] --> Loop 16 
* CEs [24] --> Loop 17 
* CEs [23] --> Loop 18 

#### Loops of d/2 
* Loop 16: d(V,Out) [V>=8,Out=0] 
* Loop 17: d(V,Out)->  d(V',Out')
                  [V>=1,V+Out'+1=Out,V+1=V'] 
* Loop 18: d(V,Out)->  d(V',Out')
                  [Out=Out'+1,V'=1,V=0] 

### Ranking functions of CR d(V,Out) 

#### Partial ranking functions of CR d(V,Out) 


### Resulting Chains:d(V,Out) 
* [[17]]...
* [[17],16]
* [18,[17]]...
* [18,[17],16]
* [16]


### Merging Chains  d/2 into  External patterns of execution 
* [[16,[17],18]] --> 1 
* [[16]] --> 2 
* [[16,[17]]] --> 3 
* [[[17],18]] --> 4 
* [[[17]]] --> 5 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [26] 
* CE 3 is refined into CE [27,28,29] 
* CE 4 is refined into CE [30,31] 
* CE 5 is refined into CE [32,33,34,35,36] 
* CE 6 is refined into CE [37,38,39,40] 
* CE 7 is refined into CE [41] 
* CE 8 is refined into CE [42,43] 


#### Refined cost equations start/2 
* CE 26: start(V,V2) = 1
     [V2>=0,V=0] 
* CE 27: start(V,V2) = 1+ d(W2,X2):2
     [W2>=8,W2=V2+1,X2=0,V=1] 
* CE 28: start(V,V2) = 1+ d(W2,X2):3
     [X2>=W2+1,W2>=1,W2=V2+1,V=1] 
* CE 29: start(V,V2) = 1+ d(W2,X2):5
     [W2>=1,W2=V2+1,V=1] 
* CE 30: start(V,V2) = 1+ d(W2,X2):1
     [X2>=3,W2=0] 
* CE 31: start(V,V2) = 1+ d(W2,X2):4
     [W2=0] 
* CE 32: start(V,V2) = 0+ d(W2,X2):1
     [X2>=3,W2=0,V=0] 
* CE 33: start(V,V2) = 0+ d(V,W2):2
     [V>=8,W2=0] 
* CE 34: start(V,V2) = 0+ d(V,W2):3
     [W2>=V+1,V>=1] 
* CE 35: start(V,V2) = 0+ d(W2,X2):4
     [W2=0,V=0] 
* CE 36: start(V,V2) = 0+ d(V,W2):5
     [V>=1] 
* CE 37: start(V,V2) = 0+ le(W2,V2,X2):1
     [V2>=0,X2=1,W2=0,V=0] 
* CE 38: start(V,V2) = 0+ le(V,W2,X2):2
     [V>=1,X2=0,W2=0,V2=0] 
* CE 39: start(V,V2) = 0+ le(V,V2,W2):3
     [V>=V2+1,V2>=1,W2=0] 
* CE 40: start(V,V2) = 0+ le(V,V2,W2):4
     [V2>=V,V>=1,W2=1] 
* CE 41: start(V,V2) = 1+ ack(W2,X2,Y2):2
     [Y2>=7,X2=0,W2=6] 
* CE 42: start(V,V2) = 0+ ack(W2,X2,Y2):1
     [Y2>=1,Y2=X2+1,Y2=V2+1,W2=0,V=0] 
* CE 43: start(V,V2) = 0+ ack(V,V2,W2):2
     [W2>=V+V2+1,V2>=0,V>=1] 

### Cost equations --> "Loop" of start/2 
* CEs [26,27,28,30,32,33,34,37,38,39,40,41,42,43] --> Loop 19 
* CEs [29,31,35,36] --> Loop 20 

#### Loops of start/2 
* Loop 19: start(V,V2) [] 
* Loop 20: start(V,V2) [] 

### Ranking functions of CR start(V,V2) 

#### Partial ranking functions of CR start(V,V2) 


### Resulting Chains:start(V,V2) 
* [20]...
* [19]


### Merging Chains  start/2 into  External patterns of execution 
* [[19]] --> 1 
* [[20]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [11,12] 

 * loop 11:ack(V,V2,Out) -> [ack(V',V2',Out')] 
1
 * loop 12:ack(V,V2,Out) -> [ack(V',V2',Out'),ack(V'2,V2'2,Out'2)] 
1
#### Cost of phase [11,12]:ack(V,V2,Out) -> [] 
1*it(11)+1*it(12)+1*it([10])+0
  Such that:aux(22) =< -V2+1
it(11) =< aux(22)

#### Cost of chains of ack(V,V2,Out):
* Chain [10]: 1
  with precondition: [V=0,V2+1=Out,V2>=0] 

* Chain [multiple([11,12],[[10]])]: 1*it(11)+1*it(12)+1*it([10])+0
  Such that:aux(22) =< -V2+1
it(11) =< aux(22)

  with precondition: [V>=1,V2>=0,Out>=V+V2+1] 


#### Cost of loops [15] 

 * loop 15:le(V,V2,Out) -> [le(V',V2',Out')] 
1
#### Cost of phase [15]:le(V,V2,Out) -> [le(V',V2',Out')] 
1*it(15)+0
  Such that:it(15) =< V
it(15) =< V-V'
it(15) =< V2
it(15) =< V2-V2'

#### Cost of phase [15]:le(V,V2,Out) -> [le(V',V2',Out')] 
1*it(15)+0
  Such that:it(15) =< V
it(15) =< V-V'
it(15) =< V2
it(15) =< V2-V2'

#### Cost of chains of le(V,V2,Out):
* Chain [[15],14]: 1*it(15)+1
  Such that:it(15) =< V

  with precondition: [Out=1,V>=1,V2>=V] 

* Chain [[15],13]: 1*it(15)+1
  Such that:it(15) =< V2

  with precondition: [Out=0,V2>=1,V>=V2+1] 

* Chain [14]: 1
  with precondition: [V=0,Out=1,V2>=0] 

* Chain [13]: 1
  with precondition: [V2=0,Out=0,V>=1] 


#### Cost of loops [17] 

 * loop 17:d(V,Out) -> [d(V',Out')] 
1*s(8)+2*s(9)+1*s(7)+4
  Such that:s(6) =< 1
s(7) =< V'
s(8) =< s(6)

#### Cost of phase [17]:d(V,Out) -> [d(V',Out')] 
6*it(17)+1*s(10)+1*s(12)+0
#### Cost of phase [17]:d(V,Out) -> [d(V',Out')] 
6*it(17)+1*s(10)+1*s(12)+0
#### Cost of chains of d(V,Out):
* Chain [[17]]...: 8*it(17)+0
  with precondition: [V>=1] 

* Chain [[17],16]: 10*it(17)+1*s(15)+1*s(18)+4
  Such that:s(14) =< 1
s(18) =< V/2+Out/2+1/2
s(15) =< s(14)

  with precondition: [V>=1,Out>=V+1] 

* Chain [18,[17]]...: 10*it(17)+1*s(20)+4
  Such that:s(19) =< 1
s(20) =< s(19)

  with precondition: [V=0] 

* Chain [18,[17],16]: 12*it(17)+2*s(15)+1*s(18)+8
  Such that:s(18) =< Out/2+1/2
aux(25) =< 1
s(15) =< aux(25)

  with precondition: [V=0,Out>=3] 

* Chain [16]: 1*s(15)+2*s(16)+1*s(18)+4
  Such that:s(14) =< 1
s(18) =< V
s(15) =< s(14)

  with precondition: [Out=0,V>=8] 


#### Cost of chains of start(V,V2):
* Chain [20]...: 1*aux(27)+0
  with precondition: [] 

* Chain [19]: 1*s(32)+9*s(33)+56*s(34)+2*s(48)+1*s(55)+1*s(62)+9
  Such that:s(61) =< -V2+1
s(55) =< V2
s(32) =< V2+1
aux(28) =< 1
aux(29) =< V
s(48) =< aux(29)
s(33) =< aux(28)
s(62) =< s(61)

  with precondition: [] 


Closed-form bounds of start(V,V2): 
-------------------------------------
* Chain [20]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [19] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of start(V,V2): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 14 ms.
* Invariants computed in 23 ms.
   - Backward Invariants 9 ms.
   - Transitive Invariants 6 ms.
* Refinement performed in 47 ms.
* Termination proved in 8 ms.
* Upper bounds computed in 83 ms.
   - Equation cost structures 19 ms.
   - Phase cost structures 55 ms.
   - Chain cost structures 8 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 195 ms.


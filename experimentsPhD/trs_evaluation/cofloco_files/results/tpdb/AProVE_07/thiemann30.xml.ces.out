
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [app/3]
1. recursive  : [eq/3]
2. recursive  : [le/3]
3. recursive  : [fun/5,minIter/4]
4. recursive  : [fun1/4,rm/3]
5. non_recursive  : [min/2]
6. recursive  : [fun2/4,minsort/3]
7. non_recursive  : [head/2]
8. non_recursive  : [null/2]
9. non_recursive  : [tail/2]
10. non_recursive  : [start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into app/3
1. SCC is partially evaluated into eq/3
2. SCC is partially evaluated into le/3
3. SCC is partially evaluated into minIter/4
4. SCC is partially evaluated into rm/3
5. SCC is partially evaluated into min/2
6. SCC is partially evaluated into minsort/3
7. SCC is partially evaluated into head/2
8. SCC is partially evaluated into null/2
9. SCC is partially evaluated into tail/2
10. SCC is partially evaluated into start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations app/3 
* CE 31 is refined into CE [57] 
* CE 29 is refined into CE [58] 
* CE 30 is refined into CE [59] 


#### Refined cost equations app/3 
* CE 57: app(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 58: app(A,B,B) = 1
     [B>=0,A=0] 
* CE 59: app(V1,V,Out) = 1+ app(W1,V,X1)
     [V1+X1>=Out,Out>=X1+1,V>=0,V1+X1=Out+W1] 

### Cost equations --> "Loop" of app/3 
* CEs [59] --> Loop 38 
* CEs [57] --> Loop 39 
* CEs [58] --> Loop 40 

#### Loops of app/3 
* Loop 38: app(V1,V,Out)->  app(V1',V,Out')
                  [V1+Out'>=Out,Out>=Out'+1,V>=0,V1+Out'=Out+V1'] 
* Loop 39: app(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 40: app(A,B,B) [B>=0,A=0] 

### Ranking functions of CR app(V1,V,Out) 
* RF of phase [38]: [V1]

#### Partial ranking functions of CR app(V1,V,Out) 
* Partial RF of phase [38]:
  - RF of loop [38:1]:
    V1


### Resulting Chains:app(V1,V,Out) 
* [[38],40]
* [[38],39]
* [40]
* [39]


### Merging Chains  app/3 into  External patterns of execution 
* [[40]] --> 1 
* [[39]] --> 2 
* [[40,[38]]] --> 3 
* [[39,[38]]] --> 4 


### Specialization of cost equations eq/3 
* CE 41 is refined into CE [60] 
* CE 39 is refined into CE [61] 
* CE 38 is refined into CE [62] 
* CE 37 is refined into CE [63] 
* CE 40 is refined into CE [64] 


#### Refined cost equations eq/3 
* CE 60: eq(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 61: eq(V1,V,Out) = 1
     [V1>=1,Out=1,V=0] 
* CE 62: eq(V1,V,Out) = 1
     [V>=1,Out=1,V1=0] 
* CE 63: eq(V1,V,Out) = 1
     [Out=2,V=0,V1=0] 
* CE 64: eq(V1,V,Out) = 1+ eq(W1,X1,Out)
     [X1>=0,W1>=0,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of eq/3 
* CEs [64] --> Loop 41 
* CEs [60] --> Loop 42 
* CEs [61] --> Loop 43 
* CEs [62] --> Loop 44 
* CEs [63] --> Loop 45 

#### Loops of eq/3 
* Loop 41: eq(V1,V,Out)->  eq(V1',V',Out)
                  [V'>=0,V1'>=0,V'+1=V,V1'+1=V1] 
* Loop 42: eq(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 43: eq(V1,V,Out) [V1>=1,Out=1,V=0] 
* Loop 44: eq(V1,V,Out) [V>=1,Out=1,V1=0] 
* Loop 45: eq(V1,V,Out) [Out=2,V=0,V1=0] 

### Ranking functions of CR eq(V1,V,Out) 
* RF of phase [41]: [V,V1]

#### Partial ranking functions of CR eq(V1,V,Out) 
* Partial RF of phase [41]:
  - RF of loop [41:1]:
    V
    V1


### Resulting Chains:eq(V1,V,Out) 
* [[41],45]
* [[41],44]
* [[41],43]
* [[41],42]
* [45]
* [44]
* [43]
* [42]


### Merging Chains  eq/3 into  External patterns of execution 
* [[45]] --> 1 
* [[44]] --> 2 
* [[43]] --> 3 
* [[42],[42,[41]]] --> 4 
* [[44,[41]]] --> 5 
* [[43,[41]]] --> 6 
* [[45,[41]]] --> 7 


### Specialization of cost equations le/3 
* CE 45 is refined into CE [65] 
* CE 43 is refined into CE [66] 
* CE 42 is refined into CE [67] 
* CE 44 is refined into CE [68] 


#### Refined cost equations le/3 
* CE 65: le(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 66: le(V1,V,Out) = 1
     [V1>=1,Out=1,V=0] 
* CE 67: le(V1,V,Out) = 1
     [V>=0,Out=2,V1=0] 
* CE 68: le(V1,V,Out) = 1+ le(W1,X1,Out)
     [X1>=0,W1>=0,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of le/3 
* CEs [68] --> Loop 46 
* CEs [65] --> Loop 47 
* CEs [66] --> Loop 48 
* CEs [67] --> Loop 49 

#### Loops of le/3 
* Loop 46: le(V1,V,Out)->  le(V1',V',Out)
                  [V'>=0,V1'>=0,V'+1=V,V1'+1=V1] 
* Loop 47: le(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 48: le(V1,V,Out) [V1>=1,Out=1,V=0] 
* Loop 49: le(V1,V,Out) [V>=0,Out=2,V1=0] 

### Ranking functions of CR le(V1,V,Out) 
* RF of phase [46]: [V,V1]

#### Partial ranking functions of CR le(V1,V,Out) 
* Partial RF of phase [46]:
  - RF of loop [46:1]:
    V
    V1


### Resulting Chains:le(V1,V,Out) 
* [[46],49]
* [[46],48]
* [[46],47]
* [49]
* [48]
* [47]


### Merging Chains  le/3 into  External patterns of execution 
* [[49]] --> 1 
* [[48]] --> 2 
* [[47],[47,[46]]] --> 3 
* [[48,[46]]] --> 4 
* [[49,[46]]] --> 5 


### Specialization of cost equations minIter/4 
* CE 34 is refined into CE [69,70] 
* CE 32 is refined into CE [71,72,73,74,75] 
* CE 36 is refined into CE [76] 
* CE 33 is refined into CE [77,78] 
* CE 35 is refined into CE [79] 


#### Refined cost equations minIter/4 
* CE 69: minIter(A,B,C,C) = 2+ le(D,C,E):1
     [C>=0,B>=0,A>=1,E=2,D=0] 
* CE 70: minIter(A,B,C,C) = 2+ le(D,C,E):5
     [C>=D,A>=D+1,D>=1,B>=0,E=2] 
* CE 71: minIter(V1,V,V17,Out) = 1+ le(W17,V17,X17):1
     [V17>=0,V>=0,V1>=1,X17=2,W17=0,Out=0] 
* CE 72: minIter(V1,V,V17,Out) = 1+ le(W17,X17,Y17):2
     [V1>=W17+1,W17>=1,V>=0,Y17=1,X17=0,Out=0,V17=0] 
* CE 73: minIter(V1,V,V17,Out) = 1+ le(W17,V17,X17):3
     [V1>=W17+1,V17>=0,W17>=0,V>=0,X17=0,Out=0] 
* CE 74: minIter(V1,V,V17,Out) = 1+ le(W17,V17,X17):4
     [W17>=V17+1,V1>=W17+1,V17>=1,V>=0,X17=1,Out=0] 
* CE 75: minIter(V1,V,V17,Out) = 1+ le(W17,V17,X17):5
     [V17>=W17,V1>=W17+1,W17>=1,V>=0,X17=2,Out=0] 
* CE 76: minIter(V1,V,V17,Out) = 0
     [V17>=0,V>=0,V1>=0,Out=0] 
* CE 77: minIter(V1,V,V17,Out) = 2+ le(W17,X17,Y17):2+ minIter(Z17,V,A18,Out)
     [Z17>=0,W17>=1,V>=0,W17+Z17+1=V1,A18=0,Y17=1,X17=0,V17=0] 
* CE 78: minIter(V1,V,V17,Out) = 2+ le(W17,V17,X17):4+ minIter(Y17,V,V17,Out)
     [W17>=V17+1,Y17>=0,V17>=1,V>=0,W17+Y17+1=V1,X17=1] 
* CE 79: minIter(V1,V,V17,Out) = 1+ minIter(V,V,W17,Out)
     [V17>=0,V>=1,V17+1=W17,V1=0] 

### Cost equations --> "Loop" of minIter/4 
* CEs [78] --> Loop 50 
* CEs [77] --> Loop 51 
* CEs [79] --> Loop 52 
* CEs [69,70] --> Loop 53 
* CEs [71,72,73,74,75,76] --> Loop 54 

#### Loops of minIter/4 
* Loop 50: minIter(V1,V,V17,Out)->  minIter(V1',V,V17,Out)
                  [V1>=V17+V1'+2,V1'>=0,V17>=1,V>=0] 
* Loop 51: minIter(V1,V,V17,Out)->  minIter(V1',V,V17',Out)
                  [V1>=V1'+2,V1'>=0,V>=0,V17'=0,V17=0] 
* Loop 52: minIter(V1,V,V17,Out)->  minIter(V,V,A',Out)
                  [V17>=0,V>=1,V17+1=A',V1=0] 
* Loop 53: minIter(A,B,C,C) [C>=0,B>=0,A>=1] 
* Loop 54: minIter(V1,V,V17,Out) [V17>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR minIter(V1,V,V17,Out) 
* RF of phase [51]: [V1-1]

#### Partial ranking functions of CR minIter(V1,V,V17,Out) 
* Partial RF of phase [50,52]:
  - RF of loop [50:1]:
    V1/3-2/3 depends on loops [52:1] 
    V1/3-V17/3-1/3 depends on loops [52:1] 
  - RF of loop [52:1]:
    -V1+1 depends on loops [50:1] 
* Partial RF of phase [51]:
  - RF of loop [51:1]:
    V1-1


### Resulting Chains:minIter(V1,V,V17,Out) 
* [[51],[50,52]]...
* [[51],[50,52],54]
* [[51],[50,52],53]
* [[51],54]
* [[51],53]
* [[50,52]]...
* [[50,52],54]
* [[50,52],53]
* [54]
* [53]


### Merging Chains  minIter/4 into  External patterns of execution 
* [[54],[54,[50,52]],[53,[51]],[54,[51]],[54,[50,52],[51]]] --> 1 
* [[53,[50,52]],[53,[50,52],[51]]] --> 2 
* [[53]] --> 3 
* [[[50,52],[51]]] --> 4 
* [[[50,52]]] --> 5 


### Specialization of cost equations rm/3 
* CE 24 is refined into CE [80,81,82,83,84,85,86] 
* CE 27 is refined into CE [87] 
* CE 28 is refined into CE [88] 
* CE 25 is refined into CE [89,90,91,92] 
* CE 26 is refined into CE [93,94] 


#### Refined cost equations rm/3 
* CE 80: rm(V1,V,Out) = 1+ eq(W1,X1,Y1):1
     [V>=1,Y1=2,X1=0,W1=0,Out=0,V1=0] 
* CE 81: rm(V1,V,Out) = 1+ eq(W1,X1,Y1):2
     [V>=X1+1,X1>=1,Y1=1,W1=0,Out=0,V1=0] 
* CE 82: rm(V1,V,Out) = 1+ eq(V1,W1,X1):3
     [V1>=1,V>=1,X1=1,W1=0,Out=0] 
* CE 83: rm(V1,V,Out) = 1+ eq(V1,W1,X1):4
     [V>=W1+1,W1>=0,V1>=0,X1=0,Out=0] 
* CE 84: rm(V1,V,Out) = 1+ eq(V1,W1,X1):5
     [V>=W1+1,W1>=V1+1,V1>=1,X1=1,Out=0] 
* CE 85: rm(V1,V,Out) = 1+ eq(V1,W1,X1):6
     [V1>=W1+1,V>=W1+1,W1>=1,X1=1,Out=0] 
* CE 86: rm(V1,V,Out) = 1+ eq(V1,V1,W1):7
     [V>=V1+1,V1>=1,W1=2,Out=0] 
* CE 87: rm(V1,V,Out) = 1
     [V1>=0,Out=0,V=0] 
* CE 88: rm(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 89: rm(V1,V,Out) = 2+ eq(W1,X1,Y1):2+ rm(Z1,A2,B2)
     [V>=A2+1,V>=X1+1,A2>=0,X1>=1,V+B2=Out+A2,Z1=0,Y1=1,W1=0,V1=0] 
* CE 90: rm(V1,V,Out) = 2+ eq(V1,W1,X1):3+ rm(V1,Y1,Z1)
     [V>=Y1+1,Y1>=0,V1>=1,V+Z1=Out+Y1,X1=1,W1=0] 
* CE 91: rm(V1,V,Out) = 2+ eq(V1,W1,X1):5+ rm(V1,Y1,Z1)
     [V>=Y1+1,V>=W1+1,W1>=V1+1,Y1>=0,V1>=1,V+Z1=Out+Y1,X1=1] 
* CE 92: rm(V1,V,Out) = 2+ eq(V1,W1,X1):6+ rm(V1,Y1,Z1)
     [V>=Y1+1,V1>=W1+1,V>=W1+1,Y1>=0,W1>=1,V+Z1=Out+Y1,X1=1] 
* CE 93: rm(V1,V,Out) = 2+ eq(W1,X1,Y1):1+ rm(Z1,A2,Out)
     [V>=A2+1,A2>=0,Z1=0,Y1=2,X1=0,W1=0,V1=0] 
* CE 94: rm(V1,V,Out) = 2+ eq(V1,V1,W1):7+ rm(V1,X1,Out)
     [V>=X1+1,V>=V1+1,X1>=0,V1>=1,W1=2] 

### Cost equations --> "Loop" of rm/3 
* CEs [90,91,92] --> Loop 55 
* CEs [94] --> Loop 56 
* CEs [89] --> Loop 57 
* CEs [93] --> Loop 58 
* CEs [87] --> Loop 59 
* CEs [80,81,82,83,84,85,86,88] --> Loop 60 

#### Loops of rm/3 
* Loop 55: rm(V1,V,Out)->  rm(V1,V',Out')
                  [V>=V'+1,V'>=0,V1>=1,V+Out'=Out+V'] 
* Loop 56: rm(V1,V,Out)->  rm(V1,V',Out)
                  [V>=V'+1,V>=V1+1,V'>=0,V1>=1] 
* Loop 57: rm(V1,V,Out)->  rm(V1',V',Out')
                  [V>=V'+1,V'>=0,V>=2,V+Out'=Out+V',V1'=0,V1=0] 
* Loop 58: rm(V1,V,Out)->  rm(V1',V',Out)
                  [V>=V'+1,V'>=0,V1'=0,V1=0] 
* Loop 59: rm(V1,V,Out) [V1>=0,Out=0,V=0] 
* Loop 60: rm(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR rm(V1,V,Out) 
* RF of phase [55,56]: [V]
* RF of phase [57,58]: [V]

#### Partial ranking functions of CR rm(V1,V,Out) 
* Partial RF of phase [55,56]:
  - RF of loop [55:1]:
    V
  - RF of loop [56:1]:
    V-1
    -V1+V
* Partial RF of phase [57,58]:
  - RF of loop [57:1]:
    V-1
  - RF of loop [58:1]:
    V


### Resulting Chains:rm(V1,V,Out) 
* [[57,58],60]
* [[57,58],59]
* [[55,56],60]
* [[55,56],59]
* [60]
* [59]


### Merging Chains  rm/3 into  External patterns of execution 
* [[59,[57,58]],[60,[57,58]]] --> 1 
* [[59],[60]] --> 2 
* [[59,[55,56]],[60,[55,56]]] --> 3 


### Specialization of cost equations min/2 
* CE 47 is refined into CE [95,96,97,98,99] 
* CE 46 is refined into CE [100] 
* CE 48 is refined into CE [101] 


#### Refined cost equations min/2 
* CE 95: min(V1,Out) = 1+ minIter(V1,V1,W1,X1):1
     [V1>=1,X1=0,W1=0,Out=0] 
* CE 96: min(V1,Out) = 1+ minIter(V1,V1,W1,Out):2
     [Out>=1,V1>=1,W1=0] 
* CE 97: min(V1,Out) = 1+ minIter(V1,V1,W1,X1):3
     [V1>=1,X1=0,W1=0,Out=0] 
* CE 98: min(V1,Out) = 1+ minIter(V1,V1,W1,Out):4
     [V1>=2,W1=0] 
* CE 99: min(V1,Out) = 1+ minIter(V1,V1,W1,Out):5
     [V1>=1,W1=0] 
* CE 100: min(V1,Out) = 1
     [Out=0,V1=0] 
* CE 101: min(V1,Out) = 0
     [V1>=0,Out=0] 

### Cost equations --> "Loop" of min/2 
* CEs [96] --> Loop 61 
* CEs [95,97,100,101] --> Loop 62 
* CEs [98,99] --> Loop 63 

#### Loops of min/2 
* Loop 61: min(V1,Out) [Out>=1,V1>=1] 
* Loop 62: min(V1,Out) [V1>=0,Out=0] 
* Loop 63: min(V1,Out) [V1>=1] 

### Ranking functions of CR min(V1,Out) 

#### Partial ranking functions of CR min(V1,Out) 


### Resulting Chains:min(V1,Out) 
* [63]...
* [62]
* [61]


### Merging Chains  min/2 into  External patterns of execution 
* [[62]] --> 1 
* [[61]] --> 2 
* [[63]] --> 3 


### Specialization of cost equations minsort/3 
* CE 19 is refined into CE [102,103,104,105,106,107,108,109,110] 
* CE 22 is refined into CE [111] 
* CE 23 is refined into CE [112] 
* CE 20 is refined into CE [113,114,115,116,117] 
* CE 21 is refined into CE [118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138] 


#### Refined cost equations minsort/3 
* CE 102: minsort(V1,V,Out) = 1+ min(V1,W1):1+ eq(X1,Y1,Z1):1
     [V1>=1,V>=0,Z1=2,Y1=0,X1=0,W1=0,Out=0] 
* CE 103: minsort(V1,V,Out) = 1+ min(V1,W1):1+ eq(X1,Y1,Z1):3
     [V1>=X1+1,X1>=1,V>=0,Z1=1,Y1=0,W1=0,Out=0] 
* CE 104: minsort(V1,V,Out) = 1+ min(V1,W1):1+ eq(X1,Y1,Z1):4
     [V1>=X1+1,X1>=0,V>=0,Z1=0,Y1=0,W1=0,Out=0] 
* CE 105: minsort(V1,V,Out) = 1+ min(V1,W1):2+ eq(X1,W1,Y1):2
     [W1>=1,V1>=1,V>=0,Y1=1,X1=0,Out=0] 
* CE 106: minsort(V1,V,Out) = 1+ min(V1,W1):2+ eq(X1,W1,Y1):4
     [V1>=X1+1,W1>=1,X1>=0,V>=0,Y1=0,Out=0] 
* CE 107: minsort(V1,V,Out) = 1+ min(V1,W1):2+ eq(X1,W1,Y1):5
     [W1>=X1+1,V1>=X1+1,X1>=1,V>=0,Y1=1,Out=0] 
* CE 108: minsort(V1,V,Out) = 1+ min(V1,W1):2+ eq(X1,W1,Y1):6
     [X1>=W1+1,V1>=X1+1,W1>=1,V>=0,Y1=1,Out=0] 
* CE 109: minsort(V1,V,Out) = 1+ min(V1,W1):2+ eq(W1,W1,X1):7
     [V1>=W1+1,W1>=1,V>=0,X1=2,Out=0] 
* CE 110: minsort(V1,V,Out) = 1+ min(V1,W1):3
     [V1>=X1+1,Y1>=0,X1>=0,V>=0,Out=0] 
* CE 111: minsort(V1,V,Out) = 1
     [Out=0,V=0,V1=0] 
* CE 112: minsort(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 113: minsort(V1,V,Out) = 2+ min(V1,W1):1+ eq(X1,Y1,Z1):3+ minsort(A2,B2,Out)
     [V1>=A2+1,V1>=X1+1,A2>=0,X1>=1,V>=0,V1+V=A2+B2,Z1=1,Y1=0,W1=0] 
* CE 114: minsort(V1,V,Out) = 2+ min(V1,W1):2+ eq(X1,W1,Y1):2+ minsort(Z1,A2,Out)
     [V1>=Z1+1,Z1>=0,W1>=1,V>=0,V1+V=Z1+A2,Y1=1,X1=0] 
* CE 115: minsort(V1,V,Out) = 2+ min(V1,W1):2+ eq(X1,W1,Y1):5+ minsort(Z1,A2,Out)
     [V1>=Z1+1,W1>=X1+1,V1>=X1+1,Z1>=0,X1>=1,V>=0,V1+V=Z1+A2,Y1=1] 
* CE 116: minsort(V1,V,Out) = 2+ min(V1,W1):2+ eq(X1,W1,Y1):6+ minsort(Z1,A2,Out)
     [V1>=Z1+1,X1>=W1+1,V1>=X1+1,Z1>=0,W1>=1,V>=0,V1+V=Z1+A2,Y1=1] 
* CE 117: minsort(V1,V,Out) = 2+ min(V1,W1):3
     [V1>=X1+1,V1>=Y1+1,X1>=0,Y1>=0,V>=0,V1+V=X1+Z1,A2=1] 
* CE 118: minsort(V1,V,Out) = 2+ min(W1,X1):1+ eq(Y1,Z1,A2):1+ rm(B2,C2,D2):1+ app(E2,V,V):1+ minsort(V,F2,G2)
     [V>=0,C2>=1,Out=G2+1,C2+1=W1,C2+1=V1,F2=0,E2=0,D2=0,B2=0,A2=2,Z1=0,Y1=0,X1=0] 
* CE 119: minsort(V1,V,Out) = 2+ min(W1,X1):1+ eq(Y1,Z1,A2):1+ rm(B2,C2,D2):1+ app(D2,V,E2):2+ minsort(F2,G2,H2)
     [2*C2>=D2+2,C2>=D2,V>=0,D2>=0,Out=H2+1,C2+1=W1,C2+1=V1,G2=0,F2=0,E2=0,B2=0,A2=2,Z1=0,Y1=0,X1=0] 
* CE 120: minsort(V1,V,Out) = 2+ min(W1,X1):1+ eq(Y1,Z1,A2):1+ rm(B2,C2,D2):1+ app(D2,E2,F2):3+ minsort(F2,G2,H2)
     [2*C2>=D2+2,F2>=D2,C2>=D2,D2>=1,F2=D2+E2,F2=V+D2,Out=H2+1,C2+1=W1,C2+1=V1,G2=0,B2=0,A2=2,Z1=0,Y1=0,X1=0] 
* CE 121: minsort(V1,V,Out) = 2+ min(W1,X1):1+ eq(Y1,Z1,A2):1+ rm(B2,C2,D2):1+ app(D2,V,E2):4+ minsort(E2,F2,G2)
     [D2>=E2,2*C2>=D2+2,C2>=D2,E2>=1,V>=0,Out=G2+1,C2+1=W1,C2+1=V1,F2=0,B2=0,A2=2,Z1=0,Y1=0,X1=0] 
* CE 122: minsort(V1,V,Out) = 2+ min(W1,X1):1+ eq(Y1,Z1,A2):1+ rm(B2,C2,D2):2+ app(E2,V,V):1+ minsort(V,F2,G2)
     [V>=0,C2>=0,B2>=0,B2+C2+1=W1,B2+G2+1=Out,B2+C2+1=V1,F2=0,E2=0,D2=0,A2=2,Z1=0,Y1=0,X1=0] 
* CE 123: minsort(V1,V,Out) = 2+ min(W1,X1):1+ eq(Y1,Z1,A2):1+ rm(B2,C2,D2):2+ app(E2,V,F2):2+ minsort(G2,H2,I2)
     [V>=0,C2>=0,B2>=0,B2+C2+1=W1,B2+I2+1=Out,B2+C2+1=V1,H2=0,G2=0,F2=0,E2=0,D2=0,A2=2,Z1=0,Y1=0,X1=0] 
* CE 124: minsort(V1,V,Out) = 2+ min(W1,X1):1+ eq(Y1,Z1,A2):1+ rm(B2,C2,D2):3+ app(E2,V,V):1+ minsort(V,F2,G2)
     [V>=0,C2>=2,B2>=1,B2+C2+1=W1,B2+G2+1=Out,B2+C2+1=V1,F2=0,E2=0,D2=0,A2=2,Z1=0,Y1=0,X1=0] 
* CE 125: minsort(V1,V,Out) = 2+ min(W1,X1):1+ eq(Y1,Z1,A2):1+ rm(B2,C2,D2):3+ app(D2,V,E2):2+ minsort(F2,G2,H2)
     [C2+D2>=2,C2>=D2,V>=0,D2>=0,B2>=1,B2+C2+1=W1,B2+H2+1=Out,B2+C2+1=V1,G2=0,F2=0,E2=0,A2=2,Z1=0,Y1=0,X1=0] 
* CE 126: minsort(V1,V,Out) = 2+ min(W1,X1):1+ eq(Y1,Z1,A2):1+ rm(B2,C2,D2):3+ app(D2,E2,F2):3+ minsort(F2,G2,H2)
     [F2>=D2,C2>=D2,D2>=1,B2>=1,F2=D2+E2,B2+C2+1=W1,B2+H2+1=Out,F2=V+D2,B2+C2+1=V1,G2=0,A2=2,Z1=0,Y1=0,X1=0] 
* CE 127: minsort(V1,V,Out) = 2+ min(W1,X1):1+ eq(Y1,Z1,A2):1+ rm(B2,C2,D2):3+ app(D2,V,E2):4+ minsort(E2,F2,G2)
     [D2>=E2,C2>=D2,E2>=1,V>=0,B2>=1,B2+C2+1=W1,B2+G2+1=Out,B2+C2+1=V1,F2=0,A2=2,Z1=0,Y1=0,X1=0] 
* CE 128: minsort(V1,V,Out) = 2+ min(W1,X1):2+ eq(X1,X1,Y1):7+ rm(Z1,A2,B2):1+ app(C2,V,V):1+ minsort(V,D2,E2)
     [A2>=X1,V>=0,X1>=1,Out=E2+1,A2+1=W1,A2+1=V1,D2=0,C2=0,B2=0,Z1=0,Y1=2] 
* CE 129: minsort(V1,V,Out) = 2+ min(W1,X1):2+ eq(X1,X1,Y1):7+ rm(Z1,A2,B2):1+ app(B2,V,C2):2+ minsort(D2,E2,F2)
     [2*A2>=B2+2,A2>=B2,A2>=X1,V>=0,B2>=0,X1>=1,Out=F2+1,A2+1=W1,A2+1=V1,E2=0,D2=0,C2=0,Z1=0,Y1=2] 
* CE 130: minsort(V1,V,Out) = 2+ min(W1,X1):2+ eq(X1,X1,Y1):7+ rm(Z1,A2,B2):1+ app(B2,C2,D2):3+ minsort(D2,E2,F2)
     [2*A2>=B2+2,D2>=B2,A2>=B2,A2>=X1,B2>=1,X1>=1,D2=B2+C2,D2=V+B2,Out=F2+1,A2+1=W1,A2+1=V1,E2=0,Z1=0,Y1=2] 
* CE 131: minsort(V1,V,Out) = 2+ min(W1,X1):2+ eq(X1,X1,Y1):7+ rm(Z1,A2,B2):1+ app(B2,V,C2):4+ minsort(C2,D2,E2)
     [B2>=C2,2*A2>=B2+2,A2>=B2,A2>=X1,C2>=1,V>=0,X1>=1,Out=E2+1,A2+1=W1,A2+1=V1,D2=0,Z1=0,Y1=2] 
* CE 132: minsort(V1,V,Out) = 2+ min(W1,X1):2+ eq(X1,X1,Y1):7+ rm(Z1,A2,B2):2+ app(C2,V,V):1+ minsort(V,D2,E2)
     [Z1+A2>=X1,V>=0,A2>=0,Z1>=0,X1>=1,Z1+A2+1=W1,Z1+E2+1=Out,Z1+A2+1=V1,D2=0,C2=0,B2=0,Y1=2] 
* CE 133: minsort(V1,V,Out) = 2+ min(W1,X1):2+ eq(X1,X1,Y1):7+ rm(Z1,A2,B2):2+ app(C2,V,D2):2+ minsort(E2,F2,G2)
     [Z1+A2>=X1,V>=0,A2>=0,Z1>=0,X1>=1,Z1+A2+1=W1,Z1+G2+1=Out,Z1+A2+1=V1,F2=0,E2=0,D2=0,C2=0,B2=0,Y1=2] 
* CE 134: minsort(V1,V,Out) = 2+ min(W1,X1):2+ eq(X1,X1,Y1):7+ rm(Z1,A2,B2):3+ app(C2,V,V):1+ minsort(V,D2,E2)
     [Z1+A2>=X1,V>=0,A2>=2,Z1>=1,X1>=1,Z1+A2+1=W1,Z1+E2+1=Out,Z1+A2+1=V1,D2=0,C2=0,B2=0,Y1=2] 
* CE 135: minsort(V1,V,Out) = 2+ min(W1,X1):2+ eq(X1,X1,Y1):7+ rm(Z1,A2,B2):3+ app(B2,V,C2):2+ minsort(D2,E2,F2)
     [Z1+A2>=X1,A2+B2>=2,A2>=B2,V>=0,B2>=0,Z1>=1,X1>=1,Z1+A2+1=W1,Z1+F2+1=Out,Z1+A2+1=V1,E2=0,D2=0,C2=0,Y1=2] 
* CE 136: minsort(V1,V,Out) = 2+ min(W1,X1):2+ eq(X1,X1,Y1):7+ rm(Z1,A2,B2):3+ app(B2,C2,D2):3+ minsort(D2,E2,F2)
     [Z1+A2>=X1,D2>=B2,A2>=B2,B2>=1,Z1>=1,X1>=1,D2=B2+C2,Z1+A2+1=W1,Z1+F2+1=Out,D2=V+B2,Z1+A2+1=V1,E2=0,Y1=2] 
* CE 137: minsort(V1,V,Out) = 2+ min(W1,X1):2+ eq(X1,X1,Y1):7+ rm(Z1,A2,B2):3+ app(B2,V,C2):4+ minsort(C2,D2,E2)
     [Z1+A2>=X1,B2>=C2,A2>=B2,C2>=1,V>=0,Z1>=1,X1>=1,Z1+A2+1=W1,Z1+E2+1=Out,Z1+A2+1=V1,D2=0,Y1=2] 
* CE 138: minsort(V1,V,Out) = 2+ min(V1,W1):3
     [V1>=X1+1,V1>=Y1+1,X1>=0,Y1>=0,V>=0,V1=X1+Z1+1,X1+A2+1=Out,B2=0,C2=2] 

### Cost equations --> "Loop" of minsort/3 
* CEs [110,117,138] --> Loop 64 
* CEs [113,114,115,116] --> Loop 65 
* CEs [126,136] --> Loop 66 
* CEs [127,137] --> Loop 67 
* CEs [120,130] --> Loop 68 
* CEs [121,131] --> Loop 69 
* CEs [118,122,124,128,132,134] --> Loop 70 
* CEs [119,123,125,129,133,135] --> Loop 71 
* CEs [102,103,104,105,106,107,108,109,111,112] --> Loop 72 

#### Loops of minsort/3 
* Loop 64: minsort(V1,V,Out) [V>=0,V1>=1] 
* Loop 65: minsort(V1,V,Out)->  minsort(V1',V',Out)
                  [V1>=V1'+1,V1'>=0,V>=0,V1+V=V1'+V'] 
* Loop 66: minsort(V1,V,Out)->  minsort(V1',V',Out')
                  [V1+V+Out'>=Out+V1',Out>=Out'+2,V1'>=V+1,V>=0,V'=0] 
* Loop 67: minsort(V1,V,Out)->  minsort(V1',V',Out')
                  [V1+Out'>=Out+V1',Out>=Out'+2,V1'>=1,V>=0,V'=0] 
* Loop 68: minsort(V1,V,Out)->  minsort(V1',V',Out')
                  [V+2*V1>=V1'+4,V1+V>=V1'+1,V1'>=V+1,V>=0,Out=Out'+1,V'=0] 
* Loop 69: minsort(V1,V,Out)->  minsort(V1',V',Out')
                  [2*V1>=V1'+4,V1>=V1'+1,V1'>=1,V>=0,Out=Out'+1,V'=0] 
* Loop 70: minsort(V1,V,Out)->  minsort(V,A',B')
                  [V1+B'>=Out,Out>=B'+1,V>=0,A'=0] 
* Loop 71: minsort(V1,V,Out)->  minsort(V1',V',Out')
                  [V1+Out'>=Out,Out>=Out'+1,V>=0,V'=0,V1'=0] 
* Loop 72: minsort(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR minsort(V1,V,Out) 

#### Partial ranking functions of CR minsort(V1,V,Out) 
* Partial RF of phase [65,66,67,68,69,70]:
  - RF of loop [65:1]:
    V1 depends on loops [66:1,68:1,70:1] 
  - RF of loop [66:1]:
    V1/2+V/2-1
  - RF of loop [67:1]:
    V1/2-1 depends on loops [66:1,68:1,70:1] 
  - RF of loop [68:1]:
    V1+V-1
  - RF of loop [69:1]:
    V1-1 depends on loops [66:1,68:1,70:1] 
  - RF of loop [70:1]:
    V1+V


### Resulting Chains:minsort(V1,V,Out) 
* [[65,66,67,68,69,70],72]
* [[65,66,67,68,69,70],71,72]
* [[65,66,67,68,69,70],64]...
* [72]
* [71,72]
* [64]...


### Merging Chains  minsort/3 into  External patterns of execution 
* [[72]] --> 1 
* [[72,71],[72,71,[65,66,67,68,69,70]],[72,[65,66,67,68,69,70]]] --> 2 
* [[64]] --> 3 
* [[64,[65,66,67,68,69,70]]] --> 4 


### Specialization of cost equations head/2 
* CE 49 is refined into CE [139] 
* CE 50 is refined into CE [140] 


#### Refined cost equations head/2 
* CE 139: head(V1,Out) = 1
     [V1>=Out+1,Out>=0] 
* CE 140: head(V1,Out) = 0
     [V1>=0,Out=0] 

### Cost equations --> "Loop" of head/2 
* CEs [139] --> Loop 73 
* CEs [140] --> Loop 74 

#### Loops of head/2 
* Loop 73: head(V1,Out) [V1>=Out+1,Out>=0] 
* Loop 74: head(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR head(V1,Out) 

#### Partial ranking functions of CR head(V1,Out) 


### Resulting Chains:head(V1,Out) 
* [74]
* [73]


### Merging Chains  head/2 into  External patterns of execution 
* [[74]] --> 1 
* [[73]] --> 2 


### Specialization of cost equations null/2 
* CE 55 is refined into CE [141] 
* CE 56 is refined into CE [142] 
* CE 54 is refined into CE [143] 


#### Refined cost equations null/2 
* CE 141: null(V1,Out) = 1
     [V1>=1,Out=1] 
* CE 142: null(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 143: null(V1,Out) = 1
     [Out=2,V1=0] 

### Cost equations --> "Loop" of null/2 
* CEs [141] --> Loop 75 
* CEs [142] --> Loop 76 
* CEs [143] --> Loop 77 

#### Loops of null/2 
* Loop 75: null(V1,Out) [V1>=1,Out=1] 
* Loop 76: null(V1,Out) [V1>=0,Out=0] 
* Loop 77: null(V1,Out) [Out=2,V1=0] 

### Ranking functions of CR null(V1,Out) 

#### Partial ranking functions of CR null(V1,Out) 


### Resulting Chains:null(V1,Out) 
* [77]
* [76]
* [75]


### Merging Chains  null/2 into  External patterns of execution 
* [[77]] --> 1 
* [[76]] --> 2 
* [[75]] --> 3 


### Specialization of cost equations tail/2 
* CE 51 is refined into CE [144] 
* CE 52 is refined into CE [145] 
* CE 53 is refined into CE [146] 


#### Refined cost equations tail/2 
* CE 144: tail(V1,Out) = 1
     [V1>=Out+1,Out>=0] 
* CE 145: tail(V1,Out) = 1
     [Out=0,V1=0] 
* CE 146: tail(V1,Out) = 0
     [V1>=0,Out=0] 

### Cost equations --> "Loop" of tail/2 
* CEs [144] --> Loop 78 
* CEs [145,146] --> Loop 79 

#### Loops of tail/2 
* Loop 78: tail(V1,Out) [V1>=Out+1,Out>=0] 
* Loop 79: tail(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR tail(V1,Out) 

#### Partial ranking functions of CR tail(V1,Out) 


### Resulting Chains:tail(V1,Out) 
* [79]
* [78]


### Merging Chains  tail/2 into  External patterns of execution 
* [[79]] --> 1 
* [[78]] --> 2 


### Specialization of cost equations start/4 
* CE 4 is refined into CE [147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177] 
* CE 6 is refined into CE [178,179,180] 
* CE 8 is refined into CE [181] 
* CE 3 is refined into CE [182,183,184,185] 
* CE 5 is refined into CE [186,187,188] 
* CE 2 is refined into CE [189] 
* CE 7 is refined into CE [190,191,192,193,194] 
* CE 9 is refined into CE [195,196,197,198,199,200,201] 
* CE 10 is refined into CE [202,203,204,205,206] 
* CE 11 is refined into CE [207,208,209,210] 
* CE 12 is refined into CE [211,212,213] 
* CE 13 is refined into CE [214,215,216,217,218] 
* CE 14 is refined into CE [219,220] 
* CE 15 is refined into CE [221,222] 
* CE 16 is refined into CE [223,224,225] 
* CE 17 is refined into CE [226,227,228] 
* CE 18 is refined into CE [229,230,231,232] 


#### Refined cost equations start/4 
* CE 147: start(V1,V,V17,V27) = 1+ rm(W27,X27,Y27):1+ app(Z27,V17,V17):1+ minsort(V17,A28,B28):1
     [V17>=0,X27>=1,X27+1=V,B28=0,A28=0,Z27=0,Y27=0,W27=0,V1=2] 
* CE 148: start(V1,V,V17,V27) = 1+ rm(W27,X27,Y27):1+ app(Z27,V17,V17):1+ minsort(V17,A28,B28):2
     [V17>=B28,B28>=0,V17>=1,X27>=1,X27+1=V,A28=0,Z27=0,Y27=0,W27=0,V1=2] 
* CE 149: start(V1,V,V17,V27) = 1+ rm(W27,X27,Y27):1+ app(Z27,V17,V17):1+ minsort(V17,A28,B28):3
     [V17>=1,X27>=1,X27+1=V,A28=0,Z27=0,Y27=0,W27=0,V1=2] 
* CE 150: start(V1,V,V17,V27) = 1+ rm(W27,X27,Y27):1+ app(Z27,V17,V17):1+ minsort(V17,A28,B28):4
     [V17>=2,X27>=1,X27+1=V,A28=0,Z27=0,Y27=0,W27=0,V1=2] 
* CE 151: start(V1,V,V17,V27) = 1+ rm(W27,X27,Y27):1+ app(Y27,V17,Z27):2+ minsort(A28,B28,C28):1
     [2*X27>=Y27+2,X27>=Y27,V17>=0,Y27>=0,X27+1=V,C28=0,B28=0,A28=0,Z27=0,W27=0,V1=2] 
* CE 152: start(V1,V,V17,V27) = 1+ rm(W27,X27,Y27):1+ app(Y27,Z27,A28):3+ minsort(A28,B28,C28):1
     [2*X27>=Y27+2,A28>=Y27,X27>=Y27,Y27>=1,A28=Y27+Z27,A28=V17+Y27,X27+1=V,C28=0,B28=0,W27=0,V1=2] 
* CE 153: start(V1,V,V17,V27) = 1+ rm(W27,X27,Y27):1+ app(Y27,Z27,A28):3+ minsort(A28,B28,C28):2
     [A28>=C28,2*X27>=Y27+2,A28>=Y27,X27>=Y27,C28>=0,Y27>=1,A28=Y27+Z27,A28=V17+Y27,X27+1=V,B28=0,W27=0,V1=2] 
* CE 154: start(V1,V,V17,V27) = 1+ rm(W27,X27,Y27):1+ app(Y27,Z27,A28):3+ minsort(A28,B28,C28):3
     [2*X27>=Y27+2,A28>=Y27,X27>=Y27,Y27>=1,A28=Y27+Z27,A28=V17+Y27,X27+1=V,B28=0,W27=0,V1=2] 
* CE 155: start(V1,V,V17,V27) = 1+ rm(W27,X27,Y27):1+ app(Y27,Z27,A28):3+ minsort(A28,B28,C28):4
     [2*X27>=Y27+2,A28>=Y27,X27>=Y27,A28>=2,Y27>=1,A28=Y27+Z27,A28=V17+Y27,X27+1=V,B28=0,W27=0,V1=2] 
* CE 156: start(V1,V,V17,V27) = 1+ rm(W27,X27,Y27):1+ app(Y27,V17,Z27):4+ minsort(Z27,A28,B28):1
     [Y27>=Z27,2*X27>=Y27+2,X27>=Y27,Z27>=1,V17>=0,X27+1=V,B28=0,A28=0,W27=0,V1=2] 
* CE 157: start(V1,V,V17,V27) = 1+ rm(W27,X27,Y27):1+ app(Y27,V17,Z27):4+ minsort(Z27,A28,B28):2
     [Z27>=B28,Y27>=Z27,2*X27>=Y27+2,X27>=Y27,B28>=0,Z27>=1,V17>=0,X27+1=V,A28=0,W27=0,V1=2] 
* CE 158: start(V1,V,V17,V27) = 1+ rm(W27,X27,Y27):1+ app(Y27,V17,Z27):4+ minsort(Z27,A28,B28):3
     [Y27>=Z27,2*X27>=Y27+2,X27>=Y27,Z27>=1,V17>=0,X27+1=V,A28=0,W27=0,V1=2] 
* CE 159: start(V1,V,V17,V27) = 1+ rm(W27,X27,Y27):1+ app(Y27,V17,Z27):4+ minsort(Z27,A28,B28):4
     [Y27>=Z27,X27>=Y27,Z27>=2,V17>=0,X27+1=V,A28=0,W27=0,V1=2] 
* CE 160: start(V1,V,V17,V27) = 1+ rm(W27,X27,Y27):2+ app(Z27,V17,V17):1+ minsort(V17,A28,B28):1
     [V17>=0,X27>=0,W27>=0,W27+X27+1=V,B28=0,A28=0,Z27=0,Y27=0,V1=2] 
* CE 161: start(V1,V,V17,V27) = 1+ rm(W27,X27,Y27):2+ app(Z27,V17,V17):1+ minsort(V17,A28,B28):2
     [V17>=B28,B28>=0,V17>=1,X27>=0,W27>=0,W27+X27+1=V,A28=0,Z27=0,Y27=0,V1=2] 
* CE 162: start(V1,V,V17,V27) = 1+ rm(W27,X27,Y27):2+ app(Z27,V17,V17):1+ minsort(V17,A28,B28):3
     [V17>=1,X27>=0,W27>=0,W27+X27+1=V,A28=0,Z27=0,Y27=0,V1=2] 
* CE 163: start(V1,V,V17,V27) = 1+ rm(W27,X27,Y27):2+ app(Z27,V17,V17):1+ minsort(V17,A28,B28):4
     [V17>=2,X27>=0,W27>=0,W27+X27+1=V,A28=0,Z27=0,Y27=0,V1=2] 
* CE 164: start(V1,V,V17,V27) = 1+ rm(W27,X27,Y27):2+ app(Z27,V17,A28):2+ minsort(B28,C28,D28):1
     [V17>=0,X27>=0,W27>=0,W27+X27+1=V,D28=0,C28=0,B28=0,A28=0,Z27=0,Y27=0,V1=2] 
* CE 165: start(V1,V,V17,V27) = 1+ rm(W27,X27,Y27):3+ app(Z27,V17,V17):1+ minsort(V17,A28,B28):1
     [V17>=0,X27>=2,W27>=1,W27+X27+1=V,B28=0,A28=0,Z27=0,Y27=0,V1=2] 
* CE 166: start(V1,V,V17,V27) = 1+ rm(W27,X27,Y27):3+ app(Z27,V17,V17):1+ minsort(V17,A28,B28):2
     [V17>=B28,B28>=0,V17>=1,X27>=2,W27>=1,W27+X27+1=V,A28=0,Z27=0,Y27=0,V1=2] 
* CE 167: start(V1,V,V17,V27) = 1+ rm(W27,X27,Y27):3+ app(Z27,V17,V17):1+ minsort(V17,A28,B28):3
     [V17>=1,X27>=2,W27>=1,W27+X27+1=V,A28=0,Z27=0,Y27=0,V1=2] 
* CE 168: start(V1,V,V17,V27) = 1+ rm(W27,X27,Y27):3+ app(Z27,V17,V17):1+ minsort(V17,A28,B28):4
     [V17>=2,X27>=2,W27>=1,W27+X27+1=V,A28=0,Z27=0,Y27=0,V1=2] 
* CE 169: start(V1,V,V17,V27) = 1+ rm(W27,X27,Y27):3+ app(Y27,V17,Z27):2+ minsort(A28,B28,C28):1
     [X27+Y27>=2,X27>=Y27,V17>=0,Y27>=0,W27>=1,W27+X27+1=V,C28=0,B28=0,A28=0,Z27=0,V1=2] 
* CE 170: start(V1,V,V17,V27) = 1+ rm(W27,X27,Y27):3+ app(Y27,Z27,A28):3+ minsort(A28,B28,C28):1
     [A28>=Y27,X27>=Y27,Y27>=1,W27>=1,A28=Y27+Z27,A28=V17+Y27,W27+X27+1=V,C28=0,B28=0,V1=2] 
* CE 171: start(V1,V,V17,V27) = 1+ rm(W27,X27,Y27):3+ app(Y27,Z27,A28):3+ minsort(A28,B28,C28):2
     [A28>=C28,A28>=Y27,X27>=Y27,C28>=0,Y27>=1,W27>=1,A28=Y27+Z27,A28=V17+Y27,W27+X27+1=V,B28=0,V1=2] 
* CE 172: start(V1,V,V17,V27) = 1+ rm(W27,X27,Y27):3+ app(Y27,Z27,A28):3+ minsort(A28,B28,C28):3
     [A28>=Y27,X27>=Y27,Y27>=1,W27>=1,A28=Y27+Z27,A28=V17+Y27,W27+X27+1=V,B28=0,V1=2] 
* CE 173: start(V1,V,V17,V27) = 1+ rm(W27,X27,Y27):3+ app(Y27,Z27,A28):3+ minsort(A28,B28,C28):4
     [A28>=Y27,X27>=Y27,A28>=2,Y27>=1,W27>=1,A28=Y27+Z27,A28=V17+Y27,W27+X27+1=V,B28=0,V1=2] 
* CE 174: start(V1,V,V17,V27) = 1+ rm(W27,X27,Y27):3+ app(Y27,V17,Z27):4+ minsort(Z27,A28,B28):1
     [Y27>=Z27,X27>=Y27,Z27>=1,V17>=0,W27>=1,W27+X27+1=V,B28=0,A28=0,V1=2] 
* CE 175: start(V1,V,V17,V27) = 1+ rm(W27,X27,Y27):3+ app(Y27,V17,Z27):4+ minsort(Z27,A28,B28):2
     [Z27>=B28,Y27>=Z27,X27>=Y27,B28>=0,Z27>=1,V17>=0,W27>=1,W27+X27+1=V,A28=0,V1=2] 
* CE 176: start(V1,V,V17,V27) = 1+ rm(W27,X27,Y27):3+ app(Y27,V17,Z27):4+ minsort(Z27,A28,B28):3
     [Y27>=Z27,X27>=Y27,Z27>=1,V17>=0,W27>=1,W27+X27+1=V,A28=0,V1=2] 
* CE 177: start(V1,V,V17,V27) = 1+ rm(W27,X27,Y27):3+ app(Y27,V17,Z27):4+ minsort(Z27,A28,B28):4
     [Y27>=Z27,X27>=Y27,Z27>=2,V17>=0,W27>=1,W27+X27+1=V,A28=0,V1=2] 
* CE 178: start(V1,V,V17,V27) = 1+ rm(W27,X27,Y27):1
     [2*X27>=Y27+2,X27>=Y27,V17>=X27+1,Y27>=0,W27=0,V=0,V1=2] 
* CE 179: start(V1,V,V17,V27) = 1+ rm(V,W27,X27):2
     [V17>=W27+1,W27>=0,V>=0,X27=0,V1=2] 
* CE 180: start(V1,V,V17,V27) = 1+ rm(V,W27,X27):3
     [W27+X27>=2,W27>=X27,V17>=W27+1,X27>=0,V>=1,V1=2] 
* CE 181: start(V1,V,V17,V27) = 1
     [V27>=0,V17>=0,V>=0,V1=2] 
* CE 182: start(V1,V,V17,V27) = 1+ minsort(W27,X27,Y27):1
     [W27+X27>=V,V>=W27+1,W27>=0,W27+X27=V+V17,Y27=0,V1=1] 
* CE 183: start(V1,V,V17,V27) = 1+ minsort(W27,X27,Y27):2
     [W27+X27>=Y27,W27+X27>=V,V>=W27+1,Y27>=0,W27>=1,W27+X27=V+V17,V1=1] 
* CE 184: start(V1,V,V17,V27) = 1+ minsort(W27,X27,Y27):3
     [W27+X27>=V,V>=W27+1,W27>=1,W27+X27=V+V17,V1=1] 
* CE 185: start(V1,V,V17,V27) = 1+ minsort(W27,X27,Y27):4
     [W27+X27>=V,V>=W27+1,W27>=1,W27+X27=V+V17,V1=1] 
* CE 186: start(V1,V,V17,V27) = 1+ rm(W27,X27,Y27):1
     [2*X27>=Y27+2,X27>=Y27,V17>=X27+1,Y27>=0,W27=0,V=0,V1=1] 
* CE 187: start(V1,V,V17,V27) = 1+ rm(V,W27,X27):2
     [V17>=W27+1,W27>=0,V>=0,X27=0,V1=1] 
* CE 188: start(V1,V,V17,V27) = 1+ rm(V,W27,X27):3
     [W27+X27>=2,W27>=X27,V17>=W27+1,X27>=0,V>=1,V1=1] 
* CE 189: start(V1,V,V17,V27) = 0
     [V17>=0,V>=0,V1>=0] 
* CE 190: start(V1,V,V17,V27) = 1+ minIter(V,V17,V27,W27):1
     [V27>=0,V17>=0,V>=0,W27=0,V1=1] 
* CE 191: start(V1,V,V17,V27) = 1+ minIter(V,V17,V27,W27):2
     [V+4*W27>=4*V27+4,V17+V27>=1,V+4*V17>=4,W27>=V27,W27>=1,V27>=0,V17>=0,V>=0,V1=1] 
* CE 192: start(V1,V,V17,V27) = 1+ minIter(V,V17,V27,V27):3
     [V27>=0,V17>=0,V>=1,V1=1] 
* CE 193: start(V1,V,V17,V27) = 1+ minIter(V,V17,W27,X27):4
     [V17>=1,V>=2,W27=0,V27=0,V1=1] 
* CE 194: start(V1,V,V17,V27) = 1+ minIter(V,V17,V27,W27):5
     [V17+V27>=1,V+3*V17>=3,V27>=0,V17>=0,V>=0,V1=1] 
* CE 195: start(V1,V,V17,V27) = 0+ eq(W27,X27,Y27):1
     [Y27=2,X27=0,W27=0,V=0,V1=0] 
* CE 196: start(V1,V,V17,V27) = 0+ eq(W27,V,X27):2
     [V>=1,X27=1,W27=0,V1=0] 
* CE 197: start(V1,V,V17,V27) = 0+ eq(V1,W27,X27):3
     [V1>=1,X27=1,W27=0,V=0] 
* CE 198: start(V1,V,V17,V27) = 0+ eq(V1,V,W27):4
     [V>=0,V1>=0,W27=0] 
* CE 199: start(V1,V,V17,V27) = 0+ eq(V1,V,W27):5
     [V>=V1+1,V1>=1,W27=1] 
* CE 200: start(V1,V,V17,V27) = 0+ eq(V1,V,W27):6
     [V1>=V+1,V>=1,W27=1] 
* CE 201: start(A,A,B,C) = 0+ eq(A,A,D):7
     [A>=1,D=2] 
* CE 202: start(V1,V,V17,V27) = 0+ le(W27,V,X27):1
     [V>=0,X27=2,W27=0,V1=0] 
* CE 203: start(V1,V,V17,V27) = 0+ le(V1,W27,X27):2
     [V1>=1,X27=1,W27=0,V=0] 
* CE 204: start(V1,V,V17,V27) = 0+ le(V1,V,W27):3
     [V>=0,V1>=0,W27=0] 
* CE 205: start(V1,V,V17,V27) = 0+ le(V1,V,W27):4
     [V1>=V+1,V>=1,W27=1] 
* CE 206: start(V1,V,V17,V27) = 0+ le(V1,V,W27):5
     [V>=V1,V1>=1,W27=2] 
* CE 207: start(V1,V,V17,V27) = 0+ app(W27,V,V):1
     [V>=0,W27=0,V1=0] 
* CE 208: start(V1,V,V17,V27) = 0+ app(V1,V,W27):2
     [V>=0,V1>=0,W27=0] 
* CE 209: start(V1,V,V17,V27) = 0+ app(V1,W27,X27):3
     [X27>=V1,V1>=1,X27=V1+W27,X27=V1+V] 
* CE 210: start(V1,V,V17,V27) = 0+ app(V1,V,W27):4
     [V1>=W27,W27>=1,V>=0] 
* CE 211: start(V1,V,V17,V27) = 0+ min(V1,W27):1
     [V1>=0,W27=0] 
* CE 212: start(V1,V,V17,V27) = 0+ min(V1,W27):2
     [W27>=1,V1>=1] 
* CE 213: start(V1,V,V17,V27) = 0+ min(V1,W27):3
     [V1>=1] 
* CE 214: start(V1,V,V17,V27) = 0+ minIter(V1,V,V17,W27):1
     [V17>=0,V>=0,V1>=0,W27=0] 
* CE 215: start(V1,V,V17,V27) = 0+ minIter(V1,V,V17,W27):2
     [V1+4*W27>=4*V17+4,V+V17>=1,V1+4*V>=4,W27>=V17,W27>=1,V17>=0,V>=0,V1>=0] 
* CE 216: start(V1,V,V17,V27) = 0+ minIter(V1,V,V17,V17):3
     [V17>=0,V>=0,V1>=1] 
* CE 217: start(V1,V,V17,V27) = 0+ minIter(V1,V,W27,X27):4
     [V>=1,V1>=2,W27=0,V17=0] 
* CE 218: start(V1,V,V17,V27) = 0+ minIter(V1,V,V17,W27):5
     [V+V17>=1,V1+3*V>=3,V17>=0,V>=0,V1>=0] 
* CE 219: start(V1,V,V17,V27) = 0+ head(V1,W27):1
     [V1>=0,W27=0] 
* CE 220: start(V1,V,V17,V27) = 0+ head(V1,W27):2
     [V1>=W27+1,W27>=0] 
* CE 221: start(V1,V,V17,V27) = 0+ tail(V1,W27):1
     [V1>=0,W27=0] 
* CE 222: start(V1,V,V17,V27) = 0+ tail(V1,W27):2
     [V1>=W27+1,W27>=0] 
* CE 223: start(V1,V,V17,V27) = 0+ null(W27,X27):1
     [X27=2,W27=0,V1=0] 
* CE 224: start(V1,V,V17,V27) = 0+ null(V1,W27):2
     [V1>=0,W27=0] 
* CE 225: start(V1,V,V17,V27) = 0+ null(V1,W27):3
     [V1>=1,W27=1] 
* CE 226: start(V1,V,V17,V27) = 0+ rm(W27,V,X27):1
     [2*V>=X27+2,V>=X27,X27>=0,W27=0,V1=0] 
* CE 227: start(V1,V,V17,V27) = 0+ rm(V1,V,W27):2
     [V>=0,V1>=0,W27=0] 
* CE 228: start(V1,V,V17,V27) = 0+ rm(V1,V,W27):3
     [V+W27>=2,V>=W27,W27>=0,V1>=1] 
* CE 229: start(V1,V,V17,V27) = 0+ minsort(V1,V,W27):1
     [V>=0,V1>=0,W27=0] 
* CE 230: start(V1,V,V17,V27) = 0+ minsort(V1,V,W27):2
     [V1+V>=W27,W27>=0,V>=0,V1>=1] 
* CE 231: start(V1,V,V17,V27) = 0+ minsort(V1,V,W27):3
     [V>=0,V1>=1] 
* CE 232: start(V1,V,V17,V27) = 0+ minsort(V1,V,W27):4
     [V1+V>=2,V>=0,V1>=1] 

### Cost equations --> "Loop" of start/4 
* CEs [217] --> Loop 80 
* CEs [154,155,158,159,172,173,176,177] --> Loop 81 
* CEs [149,150,162,163,167,168] --> Loop 82 
* CEs [184,185,218] --> Loop 83 
* CEs [193,194,213,231,232] --> Loop 84 
* CEs [201] --> Loop 85 
* CEs [197,203] --> Loop 86 
* CEs [147,151,152,153,156,157,160,164,165,169,170,171,174,175] --> Loop 87 
* CEs [181] --> Loop 88 
* CEs [148,161,166,178,179,180] --> Loop 89 
* CEs [182,183] --> Loop 90 
* CEs [190,191,192] --> Loop 91 
* CEs [186,187,188] --> Loop 92 
* CEs [189,195,196,198,199,200,202,204,205,206,207,208,209,210,211,212,214,215,216,219,220,221,222,223,224,225,226,227,228,229,230] --> Loop 93 

#### Loops of start/4 
* Loop 80: start(V1,V,V17,V27) [V>=1,V1>=2,V17=0] 
* Loop 81: start(V1,V,V17,V27) [2*V>=5,V17>=0,V1=2] 
* Loop 82: start(V1,V,V17,V27) [V17>=1,V>=1,V1=2] 
* Loop 83: start(V1,V,V17,V27) [V+V17>=1,V1+3*V>=3,V17>=0,V>=0,V1>=0] 
* Loop 84: start(V1,V,V17,V27) [V1>=1] 
* Loop 85: start(A,A,B,C) [A>=1] 
* Loop 86: start(V1,V,V17,V27) [V1>=1,V=0] 
* Loop 87: start(V1,V,V17,V27) [V17>=0,V>=1,V1=2] 
* Loop 88: start(V1,V,V17,V27) [V27>=0,V17>=0,V>=0,V1=2] 
* Loop 89: start(V1,V,V17,V27) [V17>=1,V>=0,V1=2] 
* Loop 90: start(V1,V,V17,V27) [V17>=0,V>=1,V1=1] 
* Loop 91: start(V1,V,V17,V27) [V27>=0,V17>=0,V>=0,V1=1] 
* Loop 92: start(V1,V,V17,V27) [V17>=1,V>=0,V1=1] 
* Loop 93: start(V1,V,V17,V27) [V1>=0] 

### Ranking functions of CR start(V1,V,V17,V27) 

#### Partial ranking functions of CR start(V1,V,V17,V27) 


### Resulting Chains:start(V1,V,V17,V27) 
* [93]
* [92]
* [91]
* [90]
* [89]
* [88]
* [87]
* [86]
* [85]
* [84]...
* [83]...
* [82]...
* [81]...
* [80]...


### Merging Chains  start/4 into  External patterns of execution 
* [[91],[93]] --> 1 
* [[92]] --> 2 
* [[90]] --> 3 
* [[88]] --> 4 
* [[89]] --> 5 
* [[87]] --> 6 
* [[86]] --> 7 
* [[85]] --> 8 
* [[82]] --> 9 
* [[81]] --> 10 
* [[80]] --> 11 
* [[83]] --> 12 
* [[84]] --> 13 


Computing Bounds
=====================================

#### Cost of loops [38] 

 * loop 38:app(V1,V,Out) -> [app(V1',V',Out')] 
1
#### Cost of phase [38]:app(V1,V,Out) -> [app(V1',V',Out')] 
1*it(38)+0
  Such that:it(38) =< V1
it(38) =< V1-V1'

#### Cost of phase [38]:app(V1,V,Out) -> [app(V1',V',Out')] 
1*it(38)+0
  Such that:it(38) =< V1
it(38) =< V1-V1'

#### Cost of chains of app(V1,V,Out):
* Chain [[38],40]: 1*it(38)+1
  Such that:it(38) =< -V+Out

  with precondition: [V+V1=Out,V1>=1,V>=0] 

* Chain [[38],39]: 1*it(38)+0
  Such that:it(38) =< Out

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [40]: 1
  with precondition: [V1=0,V=Out,V>=0] 

* Chain [39]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [41] 

 * loop 41:eq(V1,V,Out) -> [eq(V1',V',Out')] 
1
#### Cost of phase [41]:eq(V1,V,Out) -> [eq(V1',V',Out')] 
1*it(41)+0
  Such that:it(41) =< V1
it(41) =< V1-V1'
it(41) =< V
it(41) =< V-V'

#### Cost of phase [41]:eq(V1,V,Out) -> [eq(V1',V',Out')] 
1*it(41)+0
  Such that:it(41) =< V1
it(41) =< V1-V1'
it(41) =< V
it(41) =< V-V'

#### Cost of phase [41]:eq(V1,V,Out) -> [eq(V1',V',Out')] 
1*it(41)+0
  Such that:it(41) =< V1
it(41) =< V1-V1'
it(41) =< V
it(41) =< V-V'

#### Cost of phase [41]:eq(V1,V,Out) -> [eq(V1',V',Out')] 
1*it(41)+0
  Such that:it(41) =< V1
it(41) =< V1-V1'
it(41) =< V
it(41) =< V-V'

#### Cost of chains of eq(V1,V,Out):
* Chain [[41],45]: 1*it(41)+1
  Such that:it(41) =< V1

  with precondition: [Out=2,V1=V,V1>=1] 

* Chain [[41],44]: 1*it(41)+1
  Such that:it(41) =< V1

  with precondition: [Out=1,V1>=1,V>=V1+1] 

* Chain [[41],43]: 1*it(41)+1
  Such that:it(41) =< V

  with precondition: [Out=1,V>=1,V1>=V+1] 

* Chain [[41],42]: 1*it(41)+0
  Such that:it(41) =< V

  with precondition: [Out=0,V1>=1,V>=1] 

* Chain [45]: 1
  with precondition: [V1=0,V=0,Out=2] 

* Chain [44]: 1
  with precondition: [V1=0,Out=1,V>=1] 

* Chain [43]: 1
  with precondition: [V=0,Out=1,V1>=1] 

* Chain [42]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [46] 

 * loop 46:le(V1,V,Out) -> [le(V1',V',Out')] 
1
#### Cost of phase [46]:le(V1,V,Out) -> [le(V1',V',Out')] 
1*it(46)+0
  Such that:it(46) =< V1
it(46) =< V1-V1'
it(46) =< V
it(46) =< V-V'

#### Cost of phase [46]:le(V1,V,Out) -> [le(V1',V',Out')] 
1*it(46)+0
  Such that:it(46) =< V1
it(46) =< V1-V1'
it(46) =< V
it(46) =< V-V'

#### Cost of phase [46]:le(V1,V,Out) -> [le(V1',V',Out')] 
1*it(46)+0
  Such that:it(46) =< V1
it(46) =< V1-V1'
it(46) =< V
it(46) =< V-V'

#### Cost of chains of le(V1,V,Out):
* Chain [[46],49]: 1*it(46)+1
  Such that:it(46) =< V1

  with precondition: [Out=2,V1>=1,V>=V1] 

* Chain [[46],48]: 1*it(46)+1
  Such that:it(46) =< V

  with precondition: [Out=1,V>=1,V1>=V+1] 

* Chain [[46],47]: 1*it(46)+0
  Such that:it(46) =< V

  with precondition: [Out=0,V1>=1,V>=1] 

* Chain [49]: 1
  with precondition: [V1=0,Out=2,V>=0] 

* Chain [48]: 1
  with precondition: [V=0,Out=1,V1>=1] 

* Chain [47]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [50,52] 

 * loop 50:minIter(V1,V,V17,Out) -> [minIter(V1',V',V17',Out')] 
1*s(4)+3
  Such that:s(4) =< V17'

 * loop 52:minIter(V1,V,V17,Out) -> [minIter(V1',V',V17',Out')] 
1
#### Cost of phase [50,52]:minIter(V1,V,V17,Out) -> [minIter(V1',V',V17',Out')] 
5*it(50)+0
#### Cost of loops [51] 

 * loop 51:minIter(V1,V,V17,Out) -> [minIter(V1',V',V17',Out')] 
3
#### Cost of phase [51]:minIter(V1,V,V17,Out) -> [minIter(V1',V',V17',Out')] 
3*it(51)+0
  Such that:it(51) =< V1
it(51) =< V1-V1'

#### Cost of phase [50,52]:minIter(V1,V,V17,Out) -> [minIter(V1',V',V17',Out')] 
5*it(50)+0
#### Cost of loops [50,52] 

 * loop 50:minIter(V1,V,V17,Out) -> [minIter(V1',V',V17',Out')] 
1*s(4)+3
  Such that:s(4) =< V17'

 * loop 52:minIter(V1,V,V17,Out) -> [minIter(V1',V',V17',Out')] 
1
#### Cost of phase [50,52]:minIter(V1,V,V17,Out) -> [] 
5*it(50)+2*it([54])+3*s(9)+0
  Such that:it([54]) =< 1

#### Cost of phase [51]:minIter(V1,V,V17,Out) -> [minIter(V1',V',V17',Out')] 
3*it(51)+0
  Such that:it(51) =< V1
it(51) =< V1-V1'

#### Cost of phase [50,52]:minIter(V1,V,V17,Out) -> [minIter(V1',V',V17',Out')] 
5*it(50)+0
#### Cost of phase [51]:minIter(V1,V,V17,Out) -> [minIter(V1',V',V17',Out')] 
3*it(51)+0
  Such that:it(51) =< V1
it(51) =< V1-V1'

#### Cost of phase [51]:minIter(V1,V,V17,Out) -> [minIter(V1',V',V17',Out')] 
3*it(51)+0
  Such that:it(51) =< V1
it(51) =< V1-V1'

#### Cost of phase [51]:minIter(V1,V,V17,Out) -> [minIter(V1',V',V17',Out')] 
3*it(51)+0
  Such that:it(51) =< V1
it(51) =< V1-V1'

#### Cost of chains of minIter(V1,V,V17,Out):
* Chain [[51],[50,52]]...: 5*it(50)+3*it(51)+0
  Such that:it(51) =< V1

  with precondition: [V17=0,V1>=2,V>=1] 

* Chain [[51],[50,52],54]: 8*it(50)+3*it(51)+2*it([54])+0
  Such that:it([54]) =< 1
it(51) =< V1

  with precondition: [V17=0,Out=0,V1>=2,V>=1] 

* Chain [[51],[50,52],53]: 5*it(50)+3*it(51)+1*s(11)+3
  Such that:it(51) =< V1
s(11) =< Out

  with precondition: [V17=0,V1>=2,V>=1,Out>=1] 

* Chain [[51],54]: 3*it(51)+2
  Such that:it(51) =< V1

  with precondition: [V17=0,Out=0,V1>=2,V>=0] 

* Chain [[51],53]: 3*it(51)+3
  Such that:it(51) =< V1

  with precondition: [V17=0,Out=0,V1>=3,V>=0] 

* Chain [[50,52]]...: 5*it(50)+0
  with precondition: [V>=0,V1+3*V>=3,V+V17>=1,V17>=0,V1>=0] 

* Chain [[50,52],54]: 5*it(50)+2*it([54])+3*s(9)+0
  Such that:it([54]) =< 1

  with precondition: [Out=0,V1>=0,V>=0,V17>=0,V1+3*V>=3,V+V17>=1] 

* Chain [[50,52],53]: 5*it(50)+1*s(11)+3
  Such that:s(11) =< Out

  with precondition: [V1>=0,V>=0,V17>=0,Out>=1,Out>=V17,V1+4*V>=4,V+V17>=1,V1+4*Out>=4*V17+4] 

* Chain [54]: 3*s(6)+2
  Such that:aux(31) =< V17
s(6) =< aux(31)

  with precondition: [Out=0,V1>=0,V>=0,V17>=0] 

* Chain [53]: 1*s(11)+3
  Such that:s(11) =< V17

  with precondition: [V17=Out,V1>=1,V>=0,V17>=0] 


#### Cost of loops [57,58] 

 * loop 57:rm(V1,V,Out) -> [rm(V1',V',Out')] 
3
 * loop 58:rm(V1,V,Out) -> [rm(V1',V',Out')] 
3
#### Cost of phase [57,58]:rm(V1,V,Out) -> [rm(V1',V',Out')] 
6*it(57)+0
  Such that:aux(71) =< V
aux(72) =< V-V'
it(57) =< aux(71)
it(57) =< aux(72)

#### Cost of phase [57,58]:rm(V1,V,Out) -> [rm(V1',V',Out')] 
6*it(57)+0
  Such that:aux(71) =< V
aux(72) =< V-V'
it(57) =< aux(71)
it(57) =< aux(72)

#### Cost of loops [55,56] 

 * loop 55:rm(V1,V,Out) -> [rm(V1',V',Out')] 
1*s(34)+1*s(33)+3
  Such that:s(33) =< V
s(34) =< V1'

 * loop 56:rm(V1,V,Out) -> [rm(V1',V',Out')] 
1*s(36)+3
  Such that:s(36) =< V1'

#### Cost of phase [55,56]:rm(V1,V,Out) -> [rm(V1',V',Out')] 
3*it(55)+3*it(56)+1*s(37)+1*s(38)+1*s(39)+0
  Such that:it(56) =< -V1+V
it(56) =< -V1+V+V1'-V'
aux(76) =< V1
aux(78) =< V
aux(79) =< V-V'
it(55) =< aux(78)
it(56) =< aux(78)
it(55) =< aux(79)
it(56) =< aux(79)
aux(77) =< aux(76)
s(37) =< it(55)*aux(76)
s(38) =< it(55)*aux(78)
s(39) =< it(56)*aux(77)

#### Cost of phase [55,56]:rm(V1,V,Out) -> [rm(V1',V',Out')] 
3*it(55)+3*it(56)+1*s(37)+1*s(38)+1*s(39)+0
  Such that:it(56) =< -V1+V
it(56) =< -V1+V+V1'-V'
aux(76) =< V1
aux(78) =< V
aux(79) =< V-V'
it(55) =< aux(78)
it(56) =< aux(78)
it(55) =< aux(79)
it(56) =< aux(79)
aux(77) =< aux(76)
s(37) =< it(55)*aux(76)
s(38) =< it(55)*aux(78)
s(39) =< it(56)*aux(77)

#### Cost of chains of rm(V1,V,Out):
* Chain [[57,58],60]: 8*it(57)+2
  Such that:aux(73) =< V
it(57) =< aux(73)

  with precondition: [V1=0,Out>=0,V>=Out,2*V>=Out+2] 

* Chain [[57,58],59]: 6*it(57)+1
  Such that:aux(74) =< V
it(57) =< aux(74)

  with precondition: [V1=0,Out>=0,V>=Out,2*V>=Out+2] 

* Chain [[55,56],60]: 5*it(55)+3*it(56)+2*s(28)+1*s(37)+1*s(38)+1*s(39)+2
  Such that:it(56) =< -V1+V
aux(80) =< V1
aux(81) =< V
it(56) =< aux(81)
s(28) =< aux(80)
it(55) =< aux(81)
aux(77) =< aux(80)
s(37) =< it(55)*aux(80)
s(38) =< it(55)*aux(81)
s(39) =< it(56)*aux(77)

  with precondition: [V1>=1,Out>=0,V>=Out,Out+V>=2] 

* Chain [[55,56],59]: 3*it(55)+3*it(56)+1*s(37)+1*s(38)+1*s(39)+1
  Such that:it(56) =< -V1+V
aux(76) =< V1
aux(82) =< V
it(56) =< aux(82)
it(55) =< aux(82)
aux(77) =< aux(76)
s(37) =< it(55)*aux(76)
s(38) =< it(55)*aux(82)
s(39) =< it(56)*aux(77)

  with precondition: [V1>=1,Out>=0,V>=Out,Out+V>=2] 

* Chain [60]: 2*s(27)+2*s(28)+2
  Such that:aux(69) =< V1
aux(70) =< V
s(28) =< aux(69)
s(27) =< aux(70)

  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [59]: 1
  with precondition: [V=0,Out=0,V1>=0] 


#### Cost of chains of min(V1,Out):
* Chain [63]...: 3*s(65)+10*s(66)+1
  Such that:s(65) =< V1

  with precondition: [V1>=1] 

* Chain [62]: 4*s(71)+9*s(72)+16*s(74)+4
  Such that:s(69) =< 1
s(70) =< V1
s(71) =< s(69)
s(72) =< s(70)

  with precondition: [Out=0,V1>=0] 

* Chain [61]: 3*s(76)+2*s(78)+10*s(79)+4
  Such that:s(76) =< V1

  with precondition: [V1>=1,Out>=1] 


#### Cost of loops [65,66,67,68,69,70] 

 * loop 65:minsort(V1,V,Out) -> [minsort(V1',V',Out')] 
4*s(134)+20*s(133)+52*s(135)+7
  Such that:s(131) =< 1
s(132) =< V1
s(133) =< s(132)
s(134) =< s(131)

 * loop 66:minsort(V1,V,Out) -> [minsort(V1',V',Out')] 
4*s(179)+41*s(173)+28*s(180)+4*s(175)+4*s(176)+4*s(177)+4*s(178)+2*s(172)+10
  Such that:s(167) =< 1
s(168) =< V1
s(169) =< V1+V-V1'
s(170) =< -V+V1'
s(171) =< s(169)
s(172) =< s(170)
s(171) =< s(168)
s(173) =< s(168)
s(174) =< s(171)
s(175) =< s(173)*s(171)
s(176) =< s(173)*s(168)
s(177) =< s(173)*s(174)
s(178) =< s(171)
s(179) =< s(167)

 * loop 67:minsort(V1,V,Out) -> [minsort(V1',V',Out')] 
4*s(224)+41*s(218)+28*s(225)+4*s(220)+4*s(221)+4*s(222)+4*s(223)+2*s(217)+9
  Such that:s(212) =< 1
s(213) =< V1
s(214) =< V1-V1'
s(215) =< V1'
s(216) =< s(214)
s(217) =< s(215)
s(216) =< s(213)
s(218) =< s(213)
s(219) =< s(216)
s(220) =< s(218)*s(216)
s(221) =< s(218)*s(213)
s(222) =< s(218)*s(219)
s(223) =< s(216)
s(224) =< s(212)

 * loop 68:minsort(V1,V,Out) -> [minsort(V1',V',Out')] 
4*s(246)+41*s(245)+28*s(247)+2*s(244)+10
  Such that:s(241) =< 1
s(242) =< V1
s(243) =< -V+V1'
s(244) =< s(243)
s(245) =< s(242)
s(246) =< s(241)

 * loop 69:minsort(V1,V,Out) -> [minsort(V1',V',Out')] 
4*s(268)+41*s(267)+28*s(269)+2*s(266)+9
  Such that:s(263) =< 1
s(264) =< V1
s(265) =< V1'
s(266) =< s(265)
s(267) =< s(264)
s(268) =< s(263)

 * loop 70:minsort(V1,V,Out) -> [minsort(V1',V',Out')] 
12*s(332)+107*s(331)+84*s(336)+8*s(334)+4*s(335)+10
  Such that:s(329) =< 1
s(330) =< V1
s(331) =< s(330)
s(332) =< s(329)
s(333) =< s(330)
s(334) =< s(331)*s(330)
s(335) =< s(331)*s(333)

#### Cost of phase [65,66,67,68,69,70]:minsort(V1,V,Out) -> [minsort(V1',V',Out')] 
7*it(65)+10*it(66)+9*it(67)+20*it(68)+9*it(69)+8*s(337)+20*s(338)+248*s(339)+4*s(342)+41*s(343)+4*s(345)+4*s(346)+4*s(347)+4*s(348)+2*s(349)+4*s(355)+41*s(356)+4*s(358)+4*s(359)+4*s(360)+4*s(361)+2*s(362)+123*s(368)+41*s(369)+2*s(371)+41*s(376)+2*s(378)+8*s(385)+4*s(386)+0
  Such that:aux(147) =< V1/2
aux(151) =< V1/2-V1'/2
aux(197) =< V1
aux(198) =< V1+V
aux(199) =< V1+V-V1'-V'
aux(200) =< V1-V1'
aux(201) =< V1/2+V/2
aux(202) =< V1/2+V/2-V1'/2-V'/2
aux(168) =< aux(198)
it(67) =< aux(198)
it(68) =< aux(198)
it(69) =< aux(198)
aux(168) =< aux(199)
it(67) =< aux(199)
it(68) =< aux(199)
it(69) =< aux(199)
aux(131) =< aux(201)
it(66) =< aux(201)
it(67) =< aux(201)
aux(131) =< aux(202)
it(66) =< aux(202)
it(67) =< aux(202)
aux(130) =< aux(198)+1
aux(164) =< aux(198)
aux(133) =< aux(198)-1
aux(121) =< it(66)*aux(198)
aux(122) =< it(68)*aux(130)
s(374) =< it(68)*aux(164)
s(373) =< it(68)*aux(130)
s(353) =< it(66)*aux(133)
s(352) =< it(66)*aux(130)
aux(145) =< aux(122)* (1/2)
it(67) =< aux(122)+aux(122)+aux(121)+aux(197)
it(69) =< aux(122)+aux(122)+aux(121)+aux(197)
aux(144) =< aux(121)* (1/2)
aux(129) =< aux(122)+aux(122)+aux(121)+aux(197)
it(65) =< aux(122)+aux(122)+aux(121)+aux(197)
aux(129) =< aux(122)+aux(122)+aux(121)+aux(200)
s(367) =< aux(122)+aux(122)+aux(121)+aux(200)
s(367) =< aux(122)+aux(122)+aux(121)+aux(197)
it(69) =< aux(122)+aux(122)+aux(121)+aux(200)
it(67) =< aux(122)+aux(122)+aux(121)+aux(200)
aux(154) =< aux(145)+aux(145)+aux(144)+aux(151)
aux(154) =< aux(145)+aux(145)+aux(144)+aux(147)
it(65) =< aux(122)+aux(122)+aux(121)+aux(200)
s(381) =< it(69)*aux(164)
s(380) =< it(69)*aux(130)
s(366) =< it(67)*aux(133)
s(367) =< it(67)*aux(164)
s(365) =< it(67)*aux(130)
s(341) =< it(65)*aux(130)
s(368) =< aux(168)
s(333) =< aux(130)
s(385) =< s(368)*aux(130)
s(386) =< s(368)*s(333)
s(378) =< s(381)
s(376) =< s(380)
s(337) =< aux(129)
s(371) =< s(374)
s(369) =< s(373)
s(364) =< s(367)
s(216) =< aux(164)
s(362) =< s(366)
s(364) =< s(365)
s(216) =< aux(130)
s(356) =< s(365)
s(219) =< s(216)
s(358) =< s(356)*s(216)
s(359) =< s(356)*aux(130)
s(360) =< s(356)*s(219)
s(361) =< s(364)
s(355) =< aux(154)
s(351) =< aux(168)
s(171) =< aux(198)
s(349) =< s(353)
s(351) =< s(352)
s(171) =< aux(130)
s(343) =< s(352)
s(174) =< s(171)
s(345) =< s(343)*s(171)
s(346) =< s(343)*aux(130)
s(347) =< s(343)*s(174)
s(348) =< s(351)
s(342) =< aux(131)
s(338) =< s(341)

#### Cost of phase [65,66,67,68,69,70]:minsort(V1,V,Out) -> [minsort(V1',V',Out')] 
7*it(65)+10*it(66)+9*it(67)+20*it(68)+9*it(69)+8*s(337)+20*s(338)+248*s(339)+4*s(342)+41*s(343)+4*s(345)+4*s(346)+4*s(347)+4*s(348)+2*s(349)+4*s(355)+41*s(356)+4*s(358)+4*s(359)+4*s(360)+4*s(361)+2*s(362)+123*s(368)+41*s(369)+2*s(371)+41*s(376)+2*s(378)+8*s(385)+4*s(386)+0
  Such that:aux(147) =< V1/2
aux(151) =< V1/2-V1'/2
aux(197) =< V1
aux(198) =< V1+V
aux(199) =< V1+V-V1'-V'
aux(200) =< V1-V1'
aux(201) =< V1/2+V/2
aux(202) =< V1/2+V/2-V1'/2-V'/2
aux(168) =< aux(198)
it(67) =< aux(198)
it(68) =< aux(198)
it(69) =< aux(198)
aux(168) =< aux(199)
it(67) =< aux(199)
it(68) =< aux(199)
it(69) =< aux(199)
aux(131) =< aux(201)
it(66) =< aux(201)
it(67) =< aux(201)
aux(131) =< aux(202)
it(66) =< aux(202)
it(67) =< aux(202)
aux(130) =< aux(198)+1
aux(164) =< aux(198)
aux(133) =< aux(198)-1
aux(121) =< it(66)*aux(198)
aux(122) =< it(68)*aux(130)
s(374) =< it(68)*aux(164)
s(373) =< it(68)*aux(130)
s(353) =< it(66)*aux(133)
s(352) =< it(66)*aux(130)
aux(145) =< aux(122)* (1/2)
it(67) =< aux(122)+aux(122)+aux(121)+aux(197)
it(69) =< aux(122)+aux(122)+aux(121)+aux(197)
aux(144) =< aux(121)* (1/2)
aux(129) =< aux(122)+aux(122)+aux(121)+aux(197)
it(65) =< aux(122)+aux(122)+aux(121)+aux(197)
aux(129) =< aux(122)+aux(122)+aux(121)+aux(200)
s(367) =< aux(122)+aux(122)+aux(121)+aux(200)
s(367) =< aux(122)+aux(122)+aux(121)+aux(197)
it(69) =< aux(122)+aux(122)+aux(121)+aux(200)
it(67) =< aux(122)+aux(122)+aux(121)+aux(200)
aux(154) =< aux(145)+aux(145)+aux(144)+aux(151)
aux(154) =< aux(145)+aux(145)+aux(144)+aux(147)
it(65) =< aux(122)+aux(122)+aux(121)+aux(200)
s(381) =< it(69)*aux(164)
s(380) =< it(69)*aux(130)
s(366) =< it(67)*aux(133)
s(367) =< it(67)*aux(164)
s(365) =< it(67)*aux(130)
s(341) =< it(65)*aux(130)
s(368) =< aux(168)
s(333) =< aux(130)
s(385) =< s(368)*aux(130)
s(386) =< s(368)*s(333)
s(378) =< s(381)
s(376) =< s(380)
s(337) =< aux(129)
s(371) =< s(374)
s(369) =< s(373)
s(364) =< s(367)
s(216) =< aux(164)
s(362) =< s(366)
s(364) =< s(365)
s(216) =< aux(130)
s(356) =< s(365)
s(219) =< s(216)
s(358) =< s(356)*s(216)
s(359) =< s(356)*aux(130)
s(360) =< s(356)*s(219)
s(361) =< s(364)
s(355) =< aux(154)
s(351) =< aux(168)
s(171) =< aux(198)
s(349) =< s(353)
s(351) =< s(352)
s(171) =< aux(130)
s(343) =< s(352)
s(174) =< s(171)
s(345) =< s(343)*s(171)
s(346) =< s(343)*aux(130)
s(347) =< s(343)*s(174)
s(348) =< s(351)
s(342) =< aux(131)
s(338) =< s(341)

#### Cost of phase [65,66,67,68,69,70]:minsort(V1,V,Out) -> [minsort(V1',V',Out')] 
7*it(65)+10*it(66)+9*it(67)+20*it(68)+9*it(69)+8*s(337)+20*s(338)+248*s(339)+4*s(342)+41*s(343)+4*s(345)+4*s(346)+4*s(347)+4*s(348)+2*s(349)+4*s(355)+41*s(356)+4*s(358)+4*s(359)+4*s(360)+4*s(361)+2*s(362)+123*s(368)+41*s(369)+2*s(371)+41*s(376)+2*s(378)+8*s(385)+4*s(386)+0
  Such that:aux(147) =< V1/2
aux(151) =< V1/2-V1'/2
aux(197) =< V1
aux(198) =< V1+V
aux(199) =< V1+V-V1'-V'
aux(200) =< V1-V1'
aux(201) =< V1/2+V/2
aux(202) =< V1/2+V/2-V1'/2-V'/2
aux(168) =< aux(198)
it(67) =< aux(198)
it(68) =< aux(198)
it(69) =< aux(198)
aux(168) =< aux(199)
it(67) =< aux(199)
it(68) =< aux(199)
it(69) =< aux(199)
aux(131) =< aux(201)
it(66) =< aux(201)
it(67) =< aux(201)
aux(131) =< aux(202)
it(66) =< aux(202)
it(67) =< aux(202)
aux(130) =< aux(198)+1
aux(164) =< aux(198)
aux(133) =< aux(198)-1
aux(121) =< it(66)*aux(198)
aux(122) =< it(68)*aux(130)
s(374) =< it(68)*aux(164)
s(373) =< it(68)*aux(130)
s(353) =< it(66)*aux(133)
s(352) =< it(66)*aux(130)
aux(145) =< aux(122)* (1/2)
it(67) =< aux(122)+aux(122)+aux(121)+aux(197)
it(69) =< aux(122)+aux(122)+aux(121)+aux(197)
aux(144) =< aux(121)* (1/2)
aux(129) =< aux(122)+aux(122)+aux(121)+aux(197)
it(65) =< aux(122)+aux(122)+aux(121)+aux(197)
aux(129) =< aux(122)+aux(122)+aux(121)+aux(200)
s(367) =< aux(122)+aux(122)+aux(121)+aux(200)
s(367) =< aux(122)+aux(122)+aux(121)+aux(197)
it(69) =< aux(122)+aux(122)+aux(121)+aux(200)
it(67) =< aux(122)+aux(122)+aux(121)+aux(200)
aux(154) =< aux(145)+aux(145)+aux(144)+aux(151)
aux(154) =< aux(145)+aux(145)+aux(144)+aux(147)
it(65) =< aux(122)+aux(122)+aux(121)+aux(200)
s(381) =< it(69)*aux(164)
s(380) =< it(69)*aux(130)
s(366) =< it(67)*aux(133)
s(367) =< it(67)*aux(164)
s(365) =< it(67)*aux(130)
s(341) =< it(65)*aux(130)
s(368) =< aux(168)
s(333) =< aux(130)
s(385) =< s(368)*aux(130)
s(386) =< s(368)*s(333)
s(378) =< s(381)
s(376) =< s(380)
s(337) =< aux(129)
s(371) =< s(374)
s(369) =< s(373)
s(364) =< s(367)
s(216) =< aux(164)
s(362) =< s(366)
s(364) =< s(365)
s(216) =< aux(130)
s(356) =< s(365)
s(219) =< s(216)
s(358) =< s(356)*s(216)
s(359) =< s(356)*aux(130)
s(360) =< s(356)*s(219)
s(361) =< s(364)
s(355) =< aux(154)
s(351) =< aux(168)
s(171) =< aux(198)
s(349) =< s(353)
s(351) =< s(352)
s(171) =< aux(130)
s(343) =< s(352)
s(174) =< s(171)
s(345) =< s(343)*s(171)
s(346) =< s(343)*aux(130)
s(347) =< s(343)*s(174)
s(348) =< s(351)
s(342) =< aux(131)
s(338) =< s(341)

#### Cost of chains of minsort(V1,V,Out):
* Chain [[65,66,67,68,69,70],72]: 7*it(65)+10*it(66)+9*it(67)+143*it(68)+9*it(69)+12*s(82)+45*s(83)+357*s(84)+8*s(337)+20*s(338)+4*s(342)+41*s(343)+4*s(345)+4*s(346)+4*s(347)+4*s(348)+2*s(349)+4*s(355)+41*s(356)+4*s(358)+4*s(359)+4*s(360)+4*s(361)+2*s(362)+41*s(369)+2*s(371)+41*s(376)+2*s(378)+8*s(385)+4*s(386)+6
  Such that:aux(90) =< 1
aux(91) =< V1+V+Out
aux(201) =< V1/2+V/2
aux(205) =< V1
aux(206) =< V1+V
aux(207) =< V1/2
aux(91) =< aux(206)
s(83) =< aux(91)
s(82) =< aux(90)
it(67) =< aux(206)
it(68) =< aux(206)
it(69) =< aux(206)
aux(131) =< aux(201)
it(66) =< aux(201)
it(67) =< aux(201)
aux(131) =< aux(206)
it(66) =< aux(206)
aux(130) =< aux(206)+1
aux(164) =< aux(206)
aux(133) =< aux(206)-1
aux(121) =< it(66)*aux(206)
aux(122) =< it(68)*aux(130)
s(374) =< it(68)*aux(164)
s(353) =< it(66)*aux(133)
s(352) =< it(66)*aux(130)
aux(145) =< aux(122)* (1/2)
it(67) =< aux(122)+aux(122)+aux(121)+aux(205)
it(69) =< aux(122)+aux(122)+aux(121)+aux(205)
aux(144) =< aux(121)* (1/2)
aux(129) =< aux(122)+aux(122)+aux(121)+aux(205)
it(65) =< aux(122)+aux(122)+aux(121)+aux(205)
s(367) =< aux(122)+aux(122)+aux(121)+aux(205)
aux(154) =< aux(145)+aux(145)+aux(144)+aux(207)
s(381) =< it(69)*aux(164)
s(380) =< it(69)*aux(130)
s(366) =< it(67)*aux(133)
s(367) =< it(67)*aux(164)
s(365) =< it(67)*aux(130)
s(341) =< it(65)*aux(130)
s(333) =< aux(130)
s(385) =< it(68)*aux(130)
s(386) =< it(68)*s(333)
s(378) =< s(381)
s(376) =< s(380)
s(337) =< aux(129)
s(371) =< s(374)
s(369) =< aux(122)
s(364) =< s(367)
s(216) =< aux(164)
s(362) =< s(366)
s(364) =< s(365)
s(216) =< aux(130)
s(356) =< s(365)
s(219) =< s(216)
s(358) =< s(356)*s(216)
s(359) =< s(356)*aux(130)
s(360) =< s(356)*s(219)
s(361) =< s(364)
s(355) =< aux(154)
s(351) =< aux(206)
s(171) =< aux(206)
s(349) =< s(353)
s(351) =< s(352)
s(171) =< aux(130)
s(343) =< s(352)
s(174) =< s(171)
s(345) =< s(343)*s(171)
s(346) =< s(343)*aux(130)
s(347) =< s(343)*s(174)
s(348) =< s(351)
s(342) =< aux(131)
s(338) =< s(341)

  with precondition: [V1>=1,V>=0,Out>=0,V+V1>=Out] 

* Chain [[65,66,67,68,69,70],71,72]: 7*it(65)+10*it(66)+9*it(67)+250*it(68)+9*it(69)+24*s(82)+441*s(84)+8*s(337)+20*s(338)+4*s(342)+41*s(343)+4*s(345)+4*s(346)+4*s(347)+4*s(348)+2*s(349)+4*s(355)+41*s(356)+4*s(358)+4*s(359)+4*s(360)+4*s(361)+2*s(362)+41*s(369)+2*s(371)+41*s(376)+2*s(378)+8*s(385)+4*s(386)+8*s(416)+4*s(418)+15
  Such that:aux(216) =< 1
aux(202) =< V1+V+Out
aux(201) =< V1/2+V/2
aux(217) =< V1
aux(218) =< V1+V
aux(219) =< V1/2
aux(202) =< aux(218)
s(82) =< aux(216)
it(68) =< aux(218)
aux(164) =< aux(218)
s(416) =< it(68)*aux(218)
s(418) =< it(68)*aux(164)
it(67) =< aux(218)
it(69) =< aux(218)
aux(131) =< aux(201)
it(66) =< aux(201)
it(67) =< aux(201)
aux(131) =< aux(202)
it(66) =< aux(202)
it(67) =< aux(202)
aux(130) =< aux(218)+1
aux(133) =< aux(218)-1
aux(121) =< it(66)*aux(218)
aux(122) =< it(68)*aux(130)
s(374) =< it(68)*aux(164)
s(353) =< it(66)*aux(133)
s(352) =< it(66)*aux(130)
aux(145) =< aux(122)* (1/2)
it(67) =< aux(122)+aux(122)+aux(121)+aux(217)
it(69) =< aux(122)+aux(122)+aux(121)+aux(217)
aux(144) =< aux(121)* (1/2)
aux(129) =< aux(122)+aux(122)+aux(121)+aux(217)
it(65) =< aux(122)+aux(122)+aux(121)+aux(217)
s(367) =< aux(122)+aux(122)+aux(121)+aux(217)
aux(154) =< aux(145)+aux(145)+aux(144)+aux(219)
s(381) =< it(69)*aux(164)
s(380) =< it(69)*aux(130)
s(366) =< it(67)*aux(133)
s(367) =< it(67)*aux(164)
s(365) =< it(67)*aux(130)
s(341) =< it(65)*aux(130)
s(333) =< aux(130)
s(385) =< it(68)*aux(130)
s(386) =< it(68)*s(333)
s(378) =< s(381)
s(376) =< s(380)
s(337) =< aux(129)
s(371) =< s(374)
s(369) =< aux(122)
s(364) =< s(367)
s(216) =< aux(164)
s(362) =< s(366)
s(364) =< s(365)
s(216) =< aux(130)
s(356) =< s(365)
s(219) =< s(216)
s(358) =< s(356)*s(216)
s(359) =< s(356)*aux(130)
s(360) =< s(356)*s(219)
s(361) =< s(364)
s(355) =< aux(154)
s(351) =< aux(218)
s(171) =< aux(218)
s(349) =< s(353)
s(351) =< s(352)
s(171) =< aux(130)
s(343) =< s(352)
s(174) =< s(171)
s(345) =< s(343)*s(171)
s(346) =< s(343)*aux(130)
s(347) =< s(343)*s(174)
s(348) =< s(351)
s(342) =< aux(131)
s(338) =< s(341)

  with precondition: [V1>=1,V>=0,Out>=1,V+V1>=2,Out+V1>=3,V+V1>=Out] 

* Chain [[65,66,67,68,69,70],64]...: 7*it(65)+10*it(66)+9*it(67)+152*it(68)+9*it(69)+8*s(337)+20*s(338)+278*s(339)+4*s(342)+41*s(343)+4*s(345)+4*s(346)+4*s(347)+4*s(348)+2*s(349)+4*s(355)+41*s(356)+4*s(358)+4*s(359)+4*s(360)+4*s(361)+2*s(362)+41*s(369)+2*s(371)+41*s(376)+2*s(378)+8*s(385)+4*s(386)+3
  Such that:aux(201) =< V1/2+V/2
aux(221) =< V1
aux(222) =< V1+V
aux(223) =< V1/2
it(68) =< aux(222)
it(67) =< aux(222)
it(69) =< aux(222)
aux(131) =< aux(201)
it(66) =< aux(201)
it(67) =< aux(201)
aux(131) =< aux(222)
it(66) =< aux(222)
aux(130) =< aux(222)+1
aux(164) =< aux(222)
aux(133) =< aux(222)-1
aux(121) =< it(66)*aux(222)
aux(122) =< it(68)*aux(130)
s(374) =< it(68)*aux(164)
s(353) =< it(66)*aux(133)
s(352) =< it(66)*aux(130)
aux(145) =< aux(122)* (1/2)
it(67) =< aux(122)+aux(122)+aux(121)+aux(221)
it(69) =< aux(122)+aux(122)+aux(121)+aux(221)
aux(144) =< aux(121)* (1/2)
aux(129) =< aux(122)+aux(122)+aux(121)+aux(221)
it(65) =< aux(122)+aux(122)+aux(121)+aux(221)
s(367) =< aux(122)+aux(122)+aux(121)+aux(221)
aux(154) =< aux(145)+aux(145)+aux(144)+aux(223)
s(381) =< it(69)*aux(164)
s(380) =< it(69)*aux(130)
s(366) =< it(67)*aux(133)
s(367) =< it(67)*aux(164)
s(365) =< it(67)*aux(130)
s(341) =< it(65)*aux(130)
s(333) =< aux(130)
s(385) =< it(68)*aux(130)
s(386) =< it(68)*s(333)
s(378) =< s(381)
s(376) =< s(380)
s(337) =< aux(129)
s(371) =< s(374)
s(369) =< aux(122)
s(364) =< s(367)
s(216) =< aux(164)
s(362) =< s(366)
s(364) =< s(365)
s(216) =< aux(130)
s(356) =< s(365)
s(219) =< s(216)
s(358) =< s(356)*s(216)
s(359) =< s(356)*aux(130)
s(360) =< s(356)*s(219)
s(361) =< s(364)
s(355) =< aux(154)
s(351) =< aux(222)
s(171) =< aux(222)
s(349) =< s(353)
s(351) =< s(352)
s(171) =< aux(130)
s(343) =< s(352)
s(174) =< s(171)
s(345) =< s(343)*s(171)
s(346) =< s(343)*aux(130)
s(347) =< s(343)*s(174)
s(348) =< s(351)
s(342) =< aux(131)
s(338) =< s(341)

  with precondition: [V1>=1,V>=0,V+V1>=2] 

* Chain [72]: 12*s(82)+45*s(83)+109*s(84)+6
  Such that:aux(90) =< 1
aux(91) =< V1
s(83) =< aux(91)
s(82) =< aux(90)

  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [71,72]: 24*s(82)+193*s(84)+107*s(392)+8*s(416)+4*s(418)+15
  Such that:aux(215) =< V1
aux(216) =< 1
s(82) =< aux(216)
s(392) =< aux(215)
s(415) =< aux(215)
s(416) =< s(392)*aux(215)
s(418) =< s(392)*s(415)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [64]...: 9*s(448)+30*s(449)+3
  Such that:aux(220) =< V1
s(448) =< aux(220)

  with precondition: [V1>=1,V>=0] 


#### Cost of chains of head(V1,Out):
* Chain [74]: 0
  with precondition: [Out=0,V1>=0] 

* Chain [73]: 1
  with precondition: [Out>=0,V1>=Out+1] 


#### Cost of chains of null(V1,Out):
* Chain [77]: 1
  with precondition: [V1=0,Out=2] 

* Chain [76]: 0
  with precondition: [Out=0,V1>=0] 

* Chain [75]: 1
  with precondition: [Out=1,V1>=1] 


#### Cost of chains of tail(V1,Out):
* Chain [79]: 1
  with precondition: [Out=0,V1>=0] 

* Chain [78]: 1
  with precondition: [Out>=0,V1>=Out+1] 


#### Cost of chains of start(V1,V,V17,V27):
* Chain [93]: 28*s(587)+184*s(588)+80*s(597)+1156*s(599)+4*s(608)+6*s(624)+2*s(627)+2*s(628)+2*s(629)+393*s(644)+8*s(646)+4*s(647)+9*s(648)+9*s(649)+10*s(651)+7*s(662)+16*s(671)+8*s(672)+2*s(673)+41*s(674)+8*s(675)+4*s(676)+82*s(677)+2*s(680)+41*s(681)+4*s(683)+4*s(684)+4*s(685)+4*s(686)+4*s(687)+2*s(690)+41*s(691)+4*s(693)+4*s(694)+4*s(695)+4*s(696)+4*s(697)+20*s(698)+45*s(699)+9*s(700)+9*s(701)+10*s(703)+7*s(709)+2*s(717)+41*s(718)+8*s(719)+2*s(721)+41*s(722)+4*s(723)+4*s(724)+4*s(725)+4*s(726)+4*s(727)+2*s(729)+41*s(730)+4*s(731)+4*s(732)+4*s(733)+4*s(734)+4*s(735)+20*s(736)+8*s(739)+4*s(740)+15
  Such that:s(621) =< -V1+V
s(638) =< V1+V
s(639) =< 2*V1+2*V
s(640) =< V1/2
s(641) =< V1/2+V/2
aux(230) =< 1
aux(231) =< V1
aux(232) =< V
aux(233) =< V17
s(588) =< aux(231)
s(587) =< aux(232)
s(608) =< aux(233)
s(597) =< aux(230)
s(642) =< s(639)
s(642) =< s(638)
s(644) =< s(638)
s(645) =< s(638)
s(646) =< s(644)*s(638)
s(647) =< s(644)*s(645)
s(648) =< s(638)
s(649) =< s(638)
s(650) =< s(641)
s(651) =< s(641)
s(648) =< s(641)
s(650) =< s(642)
s(651) =< s(642)
s(648) =< s(642)
s(652) =< s(638)+1
s(653) =< s(638)-1
s(654) =< s(651)*s(638)
s(655) =< s(644)*s(652)
s(656) =< s(644)*s(645)
s(657) =< s(651)*s(653)
s(658) =< s(651)*s(652)
s(659) =< s(655)* (1/2)
s(648) =< s(655)+s(655)+s(654)+aux(231)
s(649) =< s(655)+s(655)+s(654)+aux(231)
s(660) =< s(654)* (1/2)
s(661) =< s(655)+s(655)+s(654)+aux(231)
s(662) =< s(655)+s(655)+s(654)+aux(231)
s(663) =< s(655)+s(655)+s(654)+aux(231)
s(664) =< s(659)+s(659)+s(660)+s(640)
s(665) =< s(649)*s(645)
s(666) =< s(649)*s(652)
s(667) =< s(648)*s(653)
s(663) =< s(648)*s(645)
s(668) =< s(648)*s(652)
s(669) =< s(662)*s(652)
s(670) =< s(652)
s(671) =< s(644)*s(652)
s(672) =< s(644)*s(670)
s(673) =< s(665)
s(674) =< s(666)
s(675) =< s(661)
s(676) =< s(656)
s(677) =< s(655)
s(678) =< s(663)
s(679) =< s(645)
s(680) =< s(667)
s(678) =< s(668)
s(679) =< s(652)
s(681) =< s(668)
s(682) =< s(679)
s(683) =< s(681)*s(679)
s(684) =< s(681)*s(652)
s(685) =< s(681)*s(682)
s(686) =< s(678)
s(687) =< s(664)
s(688) =< s(638)
s(689) =< s(638)
s(690) =< s(657)
s(688) =< s(658)
s(689) =< s(652)
s(691) =< s(658)
s(692) =< s(689)
s(693) =< s(691)*s(689)
s(694) =< s(691)*s(652)
s(695) =< s(691)*s(692)
s(696) =< s(688)
s(697) =< s(650)
s(698) =< s(669)
s(699) =< s(642)
s(700) =< s(638)
s(701) =< s(638)
s(702) =< s(641)
s(703) =< s(641)
s(700) =< s(641)
s(702) =< s(638)
s(703) =< s(638)
s(704) =< s(703)*s(638)
s(705) =< s(703)*s(653)
s(706) =< s(703)*s(652)
s(700) =< s(655)+s(655)+s(704)+aux(231)
s(701) =< s(655)+s(655)+s(704)+aux(231)
s(707) =< s(704)* (1/2)
s(708) =< s(655)+s(655)+s(704)+aux(231)
s(709) =< s(655)+s(655)+s(704)+aux(231)
s(710) =< s(655)+s(655)+s(704)+aux(231)
s(711) =< s(659)+s(659)+s(707)+s(640)
s(712) =< s(701)*s(645)
s(713) =< s(701)*s(652)
s(714) =< s(700)*s(653)
s(710) =< s(700)*s(645)
s(715) =< s(700)*s(652)
s(716) =< s(709)*s(652)
s(717) =< s(712)
s(718) =< s(713)
s(719) =< s(708)
s(720) =< s(710)
s(721) =< s(714)
s(720) =< s(715)
s(722) =< s(715)
s(723) =< s(722)*s(679)
s(724) =< s(722)*s(652)
s(725) =< s(722)*s(682)
s(726) =< s(720)
s(727) =< s(711)
s(728) =< s(638)
s(729) =< s(705)
s(728) =< s(706)
s(730) =< s(706)
s(731) =< s(730)*s(689)
s(732) =< s(730)*s(652)
s(733) =< s(730)*s(692)
s(734) =< s(728)
s(735) =< s(702)
s(736) =< s(716)
s(626) =< aux(231)
s(739) =< s(588)*aux(231)
s(740) =< s(588)*s(626)
s(624) =< s(621)
s(624) =< aux(232)
s(627) =< s(587)*aux(231)
s(628) =< s(587)*aux(232)
s(629) =< s(624)*s(626)

  with precondition: [V1>=0] 

* Chain [92]: 24*s(743)+4*s(746)+6*s(751)+2*s(754)+2*s(755)+2*s(756)+3
  Such that:s(748) =< -V+V17
aux(234) =< V
aux(235) =< V17
s(751) =< s(748)
s(751) =< aux(235)
s(743) =< aux(235)
s(753) =< aux(234)
s(754) =< s(743)*aux(234)
s(755) =< s(743)*aux(235)
s(756) =< s(751)*s(753)
s(746) =< aux(234)

  with precondition: [V1=1,V>=0,V17>=1] 

* Chain [91]: 4*s(761)+12*s(762)+4*s(763)+28*s(764)+4
  Such that:s(759) =< 1
aux(236) =< V
aux(237) =< V27
s(762) =< aux(236)
s(763) =< aux(237)
s(761) =< s(759)

  with precondition: [V1=1,V>=0,V17>=0,V27>=0] 

* Chain [90]: 152*s(772)+72*s(773)+1100*s(774)+393*s(783)+8*s(785)+4*s(786)+9*s(787)+9*s(788)+10*s(790)+7*s(801)+16*s(810)+8*s(811)+2*s(812)+41*s(813)+8*s(814)+4*s(815)+82*s(816)+2*s(819)+41*s(820)+4*s(822)+4*s(823)+4*s(824)+4*s(825)+4*s(826)+2*s(829)+41*s(830)+4*s(832)+4*s(833)+4*s(834)+4*s(835)+4*s(836)+20*s(837)+45*s(838)+9*s(839)+9*s(840)+10*s(842)+7*s(848)+2*s(856)+41*s(857)+8*s(858)+2*s(860)+41*s(861)+4*s(862)+4*s(863)+4*s(864)+4*s(865)+4*s(866)+2*s(868)+41*s(869)+4*s(870)+4*s(871)+4*s(872)+4*s(873)+4*s(874)+20*s(875)+8*s(878)+4*s(879)+16
  Such that:s(777) =< V+V17
s(778) =< 2*V+2*V17
s(779) =< V/2
s(780) =< V/2+V17/2
aux(238) =< 1
aux(239) =< V
s(772) =< aux(239)
s(773) =< aux(238)
s(781) =< s(778)
s(781) =< s(777)
s(783) =< s(777)
s(784) =< s(777)
s(785) =< s(783)*s(777)
s(786) =< s(783)*s(784)
s(787) =< s(777)
s(788) =< s(777)
s(789) =< s(780)
s(790) =< s(780)
s(787) =< s(780)
s(789) =< s(781)
s(790) =< s(781)
s(787) =< s(781)
s(791) =< s(777)+1
s(792) =< s(777)-1
s(793) =< s(790)*s(777)
s(794) =< s(783)*s(791)
s(795) =< s(783)*s(784)
s(796) =< s(790)*s(792)
s(797) =< s(790)*s(791)
s(798) =< s(794)* (1/2)
s(787) =< s(794)+s(794)+s(793)+aux(239)
s(788) =< s(794)+s(794)+s(793)+aux(239)
s(799) =< s(793)* (1/2)
s(800) =< s(794)+s(794)+s(793)+aux(239)
s(801) =< s(794)+s(794)+s(793)+aux(239)
s(802) =< s(794)+s(794)+s(793)+aux(239)
s(803) =< s(798)+s(798)+s(799)+s(779)
s(804) =< s(788)*s(784)
s(805) =< s(788)*s(791)
s(806) =< s(787)*s(792)
s(802) =< s(787)*s(784)
s(807) =< s(787)*s(791)
s(808) =< s(801)*s(791)
s(809) =< s(791)
s(810) =< s(783)*s(791)
s(811) =< s(783)*s(809)
s(812) =< s(804)
s(813) =< s(805)
s(814) =< s(800)
s(815) =< s(795)
s(816) =< s(794)
s(817) =< s(802)
s(818) =< s(784)
s(819) =< s(806)
s(817) =< s(807)
s(818) =< s(791)
s(820) =< s(807)
s(821) =< s(818)
s(822) =< s(820)*s(818)
s(823) =< s(820)*s(791)
s(824) =< s(820)*s(821)
s(825) =< s(817)
s(826) =< s(803)
s(827) =< s(777)
s(828) =< s(777)
s(829) =< s(796)
s(827) =< s(797)
s(828) =< s(791)
s(830) =< s(797)
s(831) =< s(828)
s(832) =< s(830)*s(828)
s(833) =< s(830)*s(791)
s(834) =< s(830)*s(831)
s(835) =< s(827)
s(836) =< s(789)
s(837) =< s(808)
s(838) =< s(781)
s(839) =< s(777)
s(840) =< s(777)
s(841) =< s(780)
s(842) =< s(780)
s(839) =< s(780)
s(841) =< s(777)
s(842) =< s(777)
s(843) =< s(842)*s(777)
s(844) =< s(842)*s(792)
s(845) =< s(842)*s(791)
s(839) =< s(794)+s(794)+s(843)+aux(239)
s(840) =< s(794)+s(794)+s(843)+aux(239)
s(846) =< s(843)* (1/2)
s(847) =< s(794)+s(794)+s(843)+aux(239)
s(848) =< s(794)+s(794)+s(843)+aux(239)
s(849) =< s(794)+s(794)+s(843)+aux(239)
s(850) =< s(798)+s(798)+s(846)+s(779)
s(851) =< s(840)*s(784)
s(852) =< s(840)*s(791)
s(853) =< s(839)*s(792)
s(849) =< s(839)*s(784)
s(854) =< s(839)*s(791)
s(855) =< s(848)*s(791)
s(856) =< s(851)
s(857) =< s(852)
s(858) =< s(847)
s(859) =< s(849)
s(860) =< s(853)
s(859) =< s(854)
s(861) =< s(854)
s(862) =< s(861)*s(818)
s(863) =< s(861)*s(791)
s(864) =< s(861)*s(821)
s(865) =< s(859)
s(866) =< s(850)
s(867) =< s(777)
s(868) =< s(844)
s(867) =< s(845)
s(869) =< s(845)
s(870) =< s(869)*s(828)
s(871) =< s(869)*s(791)
s(872) =< s(869)*s(831)
s(873) =< s(867)
s(874) =< s(841)
s(875) =< s(855)
s(877) =< aux(239)
s(878) =< s(772)*aux(239)
s(879) =< s(772)*s(877)

  with precondition: [V1=1,V>=1,V17>=0] 

* Chain [89]: 38*s(882)+180*s(890)+1524*s(891)+50*s(893)+24*s(894)+27*s(895)+27*s(896)+30*s(898)+21*s(909)+48*s(918)+24*s(919)+6*s(920)+123*s(921)+24*s(922)+12*s(923)+246*s(924)+6*s(927)+123*s(928)+12*s(930)+12*s(931)+12*s(932)+12*s(933)+12*s(934)+6*s(937)+123*s(938)+12*s(940)+12*s(941)+12*s(942)+12*s(943)+12*s(944)+60*s(945)+135*s(946)+27*s(947)+27*s(948)+30*s(950)+21*s(956)+6*s(964)+123*s(965)+24*s(966)+6*s(968)+123*s(969)+12*s(970)+12*s(971)+12*s(972)+12*s(973)+12*s(974)+6*s(976)+123*s(977)+12*s(978)+12*s(979)+12*s(980)+12*s(981)+12*s(982)+60*s(983)+2973*s(988)+4*s(1105)+2*s(1107)+6*s(1224)+2*s(1227)+2*s(1229)+19
  Such that:s(1221) =< -V+V17
aux(248) =< 1
aux(249) =< V
aux(250) =< V17
aux(251) =< 2*V17
aux(252) =< V17/2
s(889) =< aux(251)
s(889) =< aux(250)
s(890) =< aux(248)
s(891) =< aux(250)
s(892) =< aux(250)
s(893) =< s(891)*aux(250)
s(894) =< s(891)*s(892)
s(895) =< aux(250)
s(896) =< aux(250)
s(897) =< aux(252)
s(898) =< aux(252)
s(895) =< aux(252)
s(897) =< s(889)
s(898) =< s(889)
s(895) =< s(889)
s(899) =< aux(250)+1
s(900) =< aux(250)-1
s(901) =< s(898)*aux(250)
s(902) =< s(891)*s(899)
s(903) =< s(891)*s(892)
s(904) =< s(898)*s(900)
s(905) =< s(898)*s(899)
s(906) =< s(902)* (1/2)
s(895) =< s(902)+s(902)+s(901)+aux(250)
s(896) =< s(902)+s(902)+s(901)+aux(250)
s(907) =< s(901)* (1/2)
s(908) =< s(902)+s(902)+s(901)+aux(250)
s(909) =< s(902)+s(902)+s(901)+aux(250)
s(910) =< s(902)+s(902)+s(901)+aux(250)
s(911) =< s(906)+s(906)+s(907)+aux(252)
s(912) =< s(896)*s(892)
s(913) =< s(896)*s(899)
s(914) =< s(895)*s(900)
s(910) =< s(895)*s(892)
s(915) =< s(895)*s(899)
s(916) =< s(909)*s(899)
s(917) =< s(899)
s(918) =< s(891)*s(899)
s(919) =< s(891)*s(917)
s(920) =< s(912)
s(921) =< s(913)
s(922) =< s(908)
s(923) =< s(903)
s(924) =< s(902)
s(925) =< s(910)
s(926) =< s(892)
s(927) =< s(914)
s(925) =< s(915)
s(926) =< s(899)
s(928) =< s(915)
s(929) =< s(926)
s(930) =< s(928)*s(926)
s(931) =< s(928)*s(899)
s(932) =< s(928)*s(929)
s(933) =< s(925)
s(934) =< s(911)
s(935) =< aux(250)
s(936) =< aux(250)
s(937) =< s(904)
s(935) =< s(905)
s(936) =< s(899)
s(938) =< s(905)
s(939) =< s(936)
s(940) =< s(938)*s(936)
s(941) =< s(938)*s(899)
s(942) =< s(938)*s(939)
s(943) =< s(935)
s(944) =< s(897)
s(945) =< s(916)
s(946) =< s(889)
s(947) =< aux(250)
s(948) =< aux(250)
s(949) =< aux(252)
s(950) =< aux(252)
s(947) =< aux(252)
s(949) =< aux(250)
s(950) =< aux(250)
s(951) =< s(950)*aux(250)
s(952) =< s(950)*s(900)
s(953) =< s(950)*s(899)
s(947) =< s(902)+s(902)+s(951)+aux(250)
s(948) =< s(902)+s(902)+s(951)+aux(250)
s(954) =< s(951)* (1/2)
s(955) =< s(902)+s(902)+s(951)+aux(250)
s(956) =< s(902)+s(902)+s(951)+aux(250)
s(957) =< s(902)+s(902)+s(951)+aux(250)
s(958) =< s(906)+s(906)+s(954)+aux(252)
s(959) =< s(948)*s(892)
s(960) =< s(948)*s(899)
s(961) =< s(947)*s(900)
s(957) =< s(947)*s(892)
s(962) =< s(947)*s(899)
s(963) =< s(956)*s(899)
s(964) =< s(959)
s(965) =< s(960)
s(966) =< s(955)
s(967) =< s(957)
s(968) =< s(961)
s(967) =< s(962)
s(969) =< s(962)
s(970) =< s(969)*s(926)
s(971) =< s(969)*s(899)
s(972) =< s(969)*s(929)
s(973) =< s(967)
s(974) =< s(958)
s(975) =< aux(250)
s(976) =< s(952)
s(975) =< s(953)
s(977) =< s(953)
s(978) =< s(977)*s(936)
s(979) =< s(977)*s(899)
s(980) =< s(977)*s(939)
s(981) =< s(975)
s(982) =< s(949)
s(983) =< s(963)
s(882) =< aux(249)
s(1104) =< aux(249)
s(1105) =< s(882)*aux(249)
s(1107) =< s(882)*s(1104)
s(1224) =< s(1221)
s(1224) =< aux(250)
s(1227) =< s(891)*aux(249)
s(1229) =< s(1224)*s(1104)

  with precondition: [V1=2,V>=0,V17>=1] 

* Chain [88]: 1
  with precondition: [V1=2,V>=0,V17>=0,V27>=0] 

* Chain [87]: 792*s(1232)+135*s(1235)+360*s(1236)+5054*s(1237)+604*s(1250)+547*s(1255)+500*s(1264)+16*s(1266)+8*s(1267)+9*s(1268)+9*s(1269)+10*s(1271)+7*s(1282)+16*s(1291)+8*s(1292)+2*s(1293)+41*s(1294)+8*s(1295)+4*s(1296)+82*s(1297)+2*s(1300)+41*s(1301)+4*s(1303)+4*s(1304)+4*s(1305)+4*s(1306)+4*s(1307)+2*s(1310)+41*s(1311)+4*s(1313)+4*s(1314)+4*s(1315)+4*s(1316)+4*s(1317)+20*s(1318)+45*s(1319)+9*s(1320)+9*s(1321)+10*s(1323)+7*s(1329)+2*s(1337)+41*s(1338)+8*s(1339)+2*s(1341)+41*s(1342)+4*s(1343)+4*s(1344)+4*s(1345)+4*s(1346)+4*s(1347)+2*s(1349)+41*s(1350)+4*s(1351)+4*s(1352)+4*s(1353)+4*s(1354)+4*s(1355)+20*s(1356)+16*s(1383)+8*s(1384)+18*s(1385)+18*s(1386)+20*s(1388)+14*s(1399)+16*s(1408)+8*s(1409)+4*s(1410)+82*s(1411)+16*s(1412)+4*s(1413)+82*s(1414)+4*s(1417)+82*s(1418)+8*s(1420)+8*s(1421)+8*s(1422)+8*s(1423)+8*s(1424)+4*s(1427)+82*s(1428)+8*s(1430)+8*s(1431)+8*s(1432)+8*s(1433)+55*s(1434)+40*s(1435)+34*s(1503)+14*s(1505)+2*s(1533)+2*s(1535)+2*s(1536)+2*s(1549)+2*s(1551)+2*s(1552)+16*s(1564)+8*s(1565)+9*s(1566)+9*s(1567)+10*s(1569)+7*s(1580)+16*s(1589)+8*s(1590)+2*s(1591)+41*s(1592)+8*s(1593)+4*s(1594)+123*s(1595)+2*s(1598)+41*s(1599)+4*s(1601)+4*s(1602)+4*s(1603)+4*s(1604)+4*s(1605)+2*s(1608)+41*s(1609)+4*s(1611)+4*s(1612)+4*s(1613)+4*s(1614)+4*s(1615)+20*s(1616)+45*s(1617)+18*s(1618)+7*s(1627)+2*s(1635)+82*s(1636)+8*s(1637)+2*s(1639)+4*s(1641)+4*s(1642)+4*s(1643)+4*s(1644)+4*s(1645)+2*s(1647)+4*s(1649)+4*s(1650)+4*s(1651)+4*s(1652)+20*s(1654)+2*s(1682)+2*s(1684)+9*s(1699)+9*s(1700)+10*s(1702)+7*s(1713)+16*s(1722)+8*s(1723)+2*s(1724)+41*s(1725)+8*s(1726)+4*s(1727)+123*s(1728)+2*s(1731)+41*s(1732)+4*s(1734)+4*s(1735)+4*s(1736)+4*s(1737)+4*s(1738)+2*s(1741)+41*s(1742)+4*s(1744)+4*s(1745)+4*s(1746)+4*s(1747)+4*s(1748)+20*s(1749)+18*s(1751)+7*s(1760)+2*s(1768)+82*s(1769)+8*s(1770)+2*s(1772)+4*s(1774)+4*s(1775)+4*s(1776)+4*s(1777)+4*s(1778)+2*s(1780)+4*s(1782)+4*s(1783)+4*s(1784)+4*s(1785)+20*s(1787)+19
  Such that:aux(254) =< V+V17/2
aux(255) =< 2*V+V17
aux(271) =< 1
aux(272) =< V
aux(273) =< V+V17
aux(274) =< 2*V
aux(275) =< 2*V+2*V17
aux(276) =< V17
s(1255) =< aux(274)
s(1235) =< aux(276)
s(1236) =< aux(271)
s(1232) =< aux(272)
s(1250) =< aux(273)
s(1262) =< aux(275)
s(1262) =< aux(255)
s(1264) =< aux(255)
s(1265) =< aux(255)
s(1266) =< s(1264)*aux(255)
s(1267) =< s(1264)*s(1265)
s(1268) =< aux(255)
s(1269) =< aux(255)
s(1270) =< aux(254)
s(1271) =< aux(254)
s(1268) =< aux(254)
s(1270) =< s(1262)
s(1271) =< s(1262)
s(1268) =< s(1262)
s(1272) =< aux(255)+1
s(1273) =< aux(255)-1
s(1274) =< s(1271)*aux(255)
s(1275) =< s(1264)*s(1272)
s(1276) =< s(1264)*s(1265)
s(1277) =< s(1271)*s(1273)
s(1278) =< s(1271)*s(1272)
s(1279) =< s(1275)* (1/2)
s(1268) =< s(1275)+s(1275)+s(1274)+aux(255)
s(1269) =< s(1275)+s(1275)+s(1274)+aux(255)
s(1280) =< s(1274)* (1/2)
s(1281) =< s(1275)+s(1275)+s(1274)+aux(255)
s(1282) =< s(1275)+s(1275)+s(1274)+aux(255)
s(1283) =< s(1275)+s(1275)+s(1274)+aux(255)
s(1284) =< s(1279)+s(1279)+s(1280)+aux(254)
s(1285) =< s(1269)*s(1265)
s(1286) =< s(1269)*s(1272)
s(1287) =< s(1268)*s(1273)
s(1283) =< s(1268)*s(1265)
s(1288) =< s(1268)*s(1272)
s(1289) =< s(1282)*s(1272)
s(1290) =< s(1272)
s(1291) =< s(1264)*s(1272)
s(1292) =< s(1264)*s(1290)
s(1293) =< s(1285)
s(1294) =< s(1286)
s(1295) =< s(1281)
s(1296) =< s(1276)
s(1297) =< s(1275)
s(1298) =< s(1283)
s(1299) =< s(1265)
s(1300) =< s(1287)
s(1298) =< s(1288)
s(1299) =< s(1272)
s(1301) =< s(1288)
s(1302) =< s(1299)
s(1303) =< s(1301)*s(1299)
s(1304) =< s(1301)*s(1272)
s(1305) =< s(1301)*s(1302)
s(1306) =< s(1298)
s(1307) =< s(1284)
s(1308) =< aux(255)
s(1309) =< aux(255)
s(1310) =< s(1277)
s(1308) =< s(1278)
s(1309) =< s(1272)
s(1311) =< s(1278)
s(1312) =< s(1309)
s(1313) =< s(1311)*s(1309)
s(1314) =< s(1311)*s(1272)
s(1315) =< s(1311)*s(1312)
s(1316) =< s(1308)
s(1317) =< s(1270)
s(1318) =< s(1289)
s(1319) =< s(1262)
s(1320) =< aux(255)
s(1321) =< aux(255)
s(1322) =< aux(254)
s(1323) =< aux(254)
s(1320) =< aux(254)
s(1322) =< aux(255)
s(1323) =< aux(255)
s(1324) =< s(1323)*aux(255)
s(1325) =< s(1323)*s(1273)
s(1326) =< s(1323)*s(1272)
s(1320) =< s(1275)+s(1275)+s(1324)+aux(255)
s(1321) =< s(1275)+s(1275)+s(1324)+aux(255)
s(1327) =< s(1324)* (1/2)
s(1328) =< s(1275)+s(1275)+s(1324)+aux(255)
s(1329) =< s(1275)+s(1275)+s(1324)+aux(255)
s(1330) =< s(1275)+s(1275)+s(1324)+aux(255)
s(1331) =< s(1279)+s(1279)+s(1327)+aux(254)
s(1332) =< s(1321)*s(1265)
s(1333) =< s(1321)*s(1272)
s(1334) =< s(1320)*s(1273)
s(1330) =< s(1320)*s(1265)
s(1335) =< s(1320)*s(1272)
s(1336) =< s(1329)*s(1272)
s(1337) =< s(1332)
s(1338) =< s(1333)
s(1339) =< s(1328)
s(1340) =< s(1330)
s(1341) =< s(1334)
s(1340) =< s(1335)
s(1342) =< s(1335)
s(1343) =< s(1342)*s(1299)
s(1344) =< s(1342)*s(1272)
s(1345) =< s(1342)*s(1302)
s(1346) =< s(1340)
s(1347) =< s(1331)
s(1348) =< aux(255)
s(1349) =< s(1325)
s(1348) =< s(1326)
s(1350) =< s(1326)
s(1351) =< s(1350)*s(1309)
s(1352) =< s(1350)*s(1272)
s(1353) =< s(1350)*s(1312)
s(1354) =< s(1348)
s(1355) =< s(1322)
s(1356) =< s(1336)
s(1382) =< aux(274)
s(1383) =< s(1255)*aux(274)
s(1384) =< s(1255)*s(1382)
s(1385) =< aux(274)
s(1386) =< aux(274)
s(1387) =< aux(272)
s(1388) =< aux(272)
s(1385) =< aux(272)
s(1387) =< aux(274)
s(1388) =< aux(274)
s(1389) =< aux(274)+1
s(1390) =< aux(274)-1
s(1391) =< s(1388)*aux(274)
s(1392) =< s(1255)*s(1389)
s(1393) =< s(1255)*s(1382)
s(1394) =< s(1388)*s(1390)
s(1395) =< s(1388)*s(1389)
s(1396) =< s(1392)* (1/2)
s(1385) =< s(1392)+s(1392)+s(1391)+aux(274)
s(1386) =< s(1392)+s(1392)+s(1391)+aux(274)
s(1397) =< s(1391)* (1/2)
s(1398) =< s(1392)+s(1392)+s(1391)+aux(274)
s(1399) =< s(1392)+s(1392)+s(1391)+aux(274)
s(1400) =< s(1392)+s(1392)+s(1391)+aux(274)
s(1401) =< s(1396)+s(1396)+s(1397)+aux(272)
s(1402) =< s(1386)*s(1382)
s(1403) =< s(1386)*s(1389)
s(1404) =< s(1385)*s(1390)
s(1400) =< s(1385)*s(1382)
s(1405) =< s(1385)*s(1389)
s(1406) =< s(1399)*s(1389)
s(1407) =< s(1389)
s(1408) =< s(1255)*s(1389)
s(1409) =< s(1255)*s(1407)
s(1410) =< s(1402)
s(1411) =< s(1403)
s(1412) =< s(1398)
s(1413) =< s(1393)
s(1414) =< s(1392)
s(1415) =< s(1400)
s(1416) =< s(1382)
s(1417) =< s(1404)
s(1415) =< s(1405)
s(1416) =< s(1389)
s(1418) =< s(1405)
s(1419) =< s(1416)
s(1420) =< s(1418)*s(1416)
s(1421) =< s(1418)*s(1389)
s(1422) =< s(1418)*s(1419)
s(1423) =< s(1415)
s(1424) =< s(1401)
s(1425) =< aux(274)
s(1426) =< aux(274)
s(1427) =< s(1394)
s(1425) =< s(1395)
s(1426) =< s(1389)
s(1428) =< s(1395)
s(1429) =< s(1426)
s(1430) =< s(1428)*s(1426)
s(1431) =< s(1428)*s(1389)
s(1432) =< s(1428)*s(1429)
s(1433) =< s(1425)
s(1434) =< s(1387)
s(1435) =< s(1406)
s(1502) =< aux(272)
s(1503) =< s(1232)*aux(272)
s(1505) =< s(1232)*s(1502)
s(1528) =< aux(272)
s(1528) =< aux(273)
s(1532) =< s(1528)
s(1533) =< s(1232)*s(1528)
s(1535) =< s(1232)*s(1532)
s(1536) =< s(1528)
s(1544) =< aux(272)
s(1544) =< aux(275)
s(1560) =< aux(275)
s(1560) =< aux(273)
s(1563) =< aux(273)
s(1564) =< s(1250)*aux(273)
s(1565) =< s(1250)*s(1563)
s(1566) =< aux(273)
s(1567) =< aux(273)
s(1568) =< aux(273)
s(1569) =< aux(273)
s(1568) =< s(1560)
s(1569) =< s(1560)
s(1566) =< s(1560)
s(1570) =< aux(273)+1
s(1571) =< aux(273)-1
s(1572) =< s(1569)*aux(273)
s(1573) =< s(1250)*s(1570)
s(1574) =< s(1250)*s(1563)
s(1575) =< s(1569)*s(1571)
s(1576) =< s(1569)*s(1570)
s(1577) =< s(1573)* (1/2)
s(1566) =< s(1573)+s(1573)+s(1572)+aux(273)
s(1567) =< s(1573)+s(1573)+s(1572)+aux(273)
s(1578) =< s(1572)* (1/2)
s(1579) =< s(1573)+s(1573)+s(1572)+aux(273)
s(1580) =< s(1573)+s(1573)+s(1572)+aux(273)
s(1581) =< s(1573)+s(1573)+s(1572)+aux(273)
s(1582) =< s(1577)+s(1577)+s(1578)+aux(273)
s(1583) =< s(1567)*s(1563)
s(1584) =< s(1567)*s(1570)
s(1585) =< s(1566)*s(1571)
s(1581) =< s(1566)*s(1563)
s(1586) =< s(1566)*s(1570)
s(1587) =< s(1580)*s(1570)
s(1588) =< s(1570)
s(1589) =< s(1250)*s(1570)
s(1590) =< s(1250)*s(1588)
s(1591) =< s(1583)
s(1592) =< s(1584)
s(1593) =< s(1579)
s(1594) =< s(1574)
s(1595) =< s(1573)
s(1596) =< s(1581)
s(1597) =< s(1563)
s(1598) =< s(1585)
s(1596) =< s(1586)
s(1597) =< s(1570)
s(1599) =< s(1586)
s(1600) =< s(1597)
s(1601) =< s(1599)*s(1597)
s(1602) =< s(1599)*s(1570)
s(1603) =< s(1599)*s(1600)
s(1604) =< s(1596)
s(1605) =< s(1582)
s(1606) =< aux(273)
s(1607) =< aux(273)
s(1608) =< s(1575)
s(1606) =< s(1576)
s(1607) =< s(1570)
s(1609) =< s(1576)
s(1610) =< s(1607)
s(1611) =< s(1609)*s(1607)
s(1612) =< s(1609)*s(1570)
s(1613) =< s(1609)*s(1610)
s(1614) =< s(1606)
s(1615) =< s(1568)
s(1616) =< s(1587)
s(1617) =< s(1560)
s(1618) =< aux(273)
s(1622) =< s(1250)*aux(273)
s(1623) =< s(1250)*s(1571)
s(1618) =< s(1573)+s(1573)+s(1622)+aux(273)
s(1625) =< s(1622)* (1/2)
s(1626) =< s(1573)+s(1573)+s(1622)+aux(273)
s(1627) =< s(1573)+s(1573)+s(1622)+aux(273)
s(1628) =< s(1573)+s(1573)+s(1622)+aux(273)
s(1629) =< s(1577)+s(1577)+s(1625)+aux(273)
s(1630) =< s(1618)*s(1563)
s(1631) =< s(1618)*s(1570)
s(1632) =< s(1618)*s(1571)
s(1628) =< s(1618)*s(1563)
s(1634) =< s(1627)*s(1570)
s(1635) =< s(1630)
s(1636) =< s(1631)
s(1637) =< s(1626)
s(1638) =< s(1628)
s(1639) =< s(1632)
s(1638) =< s(1631)
s(1641) =< s(1636)*s(1597)
s(1642) =< s(1636)*s(1570)
s(1643) =< s(1636)*s(1600)
s(1644) =< s(1638)
s(1645) =< s(1629)
s(1646) =< aux(273)
s(1647) =< s(1623)
s(1646) =< s(1573)
s(1649) =< s(1595)*s(1607)
s(1650) =< s(1595)*s(1570)
s(1651) =< s(1595)*s(1610)
s(1652) =< s(1646)
s(1654) =< s(1634)
s(1548) =< s(1544)
s(1549) =< s(1232)*s(1544)
s(1551) =< s(1232)*s(1548)
s(1552) =< s(1544)
s(1699) =< aux(272)
s(1700) =< aux(272)
s(1701) =< aux(272)
s(1702) =< aux(272)
s(1701) =< s(1387)
s(1702) =< s(1387)
s(1699) =< s(1387)
s(1703) =< aux(272)+1
s(1704) =< aux(272)-1
s(1705) =< s(1702)*aux(272)
s(1706) =< s(1232)*s(1703)
s(1707) =< s(1232)*s(1502)
s(1708) =< s(1702)*s(1704)
s(1709) =< s(1702)*s(1703)
s(1710) =< s(1706)* (1/2)
s(1699) =< s(1706)+s(1706)+s(1705)+aux(272)
s(1700) =< s(1706)+s(1706)+s(1705)+aux(272)
s(1711) =< s(1705)* (1/2)
s(1712) =< s(1706)+s(1706)+s(1705)+aux(272)
s(1713) =< s(1706)+s(1706)+s(1705)+aux(272)
s(1714) =< s(1706)+s(1706)+s(1705)+aux(272)
s(1715) =< s(1710)+s(1710)+s(1711)+aux(272)
s(1716) =< s(1700)*s(1502)
s(1717) =< s(1700)*s(1703)
s(1718) =< s(1699)*s(1704)
s(1714) =< s(1699)*s(1502)
s(1719) =< s(1699)*s(1703)
s(1720) =< s(1713)*s(1703)
s(1721) =< s(1703)
s(1722) =< s(1232)*s(1703)
s(1723) =< s(1232)*s(1721)
s(1724) =< s(1716)
s(1725) =< s(1717)
s(1726) =< s(1712)
s(1727) =< s(1707)
s(1728) =< s(1706)
s(1729) =< s(1714)
s(1730) =< s(1502)
s(1731) =< s(1718)
s(1729) =< s(1719)
s(1730) =< s(1703)
s(1732) =< s(1719)
s(1733) =< s(1730)
s(1734) =< s(1732)*s(1730)
s(1735) =< s(1732)*s(1703)
s(1736) =< s(1732)*s(1733)
s(1737) =< s(1729)
s(1738) =< s(1715)
s(1739) =< aux(272)
s(1740) =< aux(272)
s(1741) =< s(1708)
s(1739) =< s(1709)
s(1740) =< s(1703)
s(1742) =< s(1709)
s(1743) =< s(1740)
s(1744) =< s(1742)*s(1740)
s(1745) =< s(1742)*s(1703)
s(1746) =< s(1742)*s(1743)
s(1747) =< s(1739)
s(1748) =< s(1701)
s(1749) =< s(1720)
s(1751) =< aux(272)
s(1755) =< s(1232)*aux(272)
s(1756) =< s(1232)*s(1704)
s(1751) =< s(1706)+s(1706)+s(1755)+aux(272)
s(1758) =< s(1755)* (1/2)
s(1759) =< s(1706)+s(1706)+s(1755)+aux(272)
s(1760) =< s(1706)+s(1706)+s(1755)+aux(272)
s(1761) =< s(1706)+s(1706)+s(1755)+aux(272)
s(1762) =< s(1710)+s(1710)+s(1758)+aux(272)
s(1763) =< s(1751)*s(1502)
s(1764) =< s(1751)*s(1703)
s(1765) =< s(1751)*s(1704)
s(1761) =< s(1751)*s(1502)
s(1767) =< s(1760)*s(1703)
s(1768) =< s(1763)
s(1769) =< s(1764)
s(1770) =< s(1759)
s(1771) =< s(1761)
s(1772) =< s(1765)
s(1771) =< s(1764)
s(1774) =< s(1769)*s(1730)
s(1775) =< s(1769)*s(1703)
s(1776) =< s(1769)*s(1733)
s(1777) =< s(1771)
s(1778) =< s(1762)
s(1779) =< aux(272)
s(1780) =< s(1756)
s(1779) =< s(1706)
s(1782) =< s(1728)*s(1740)
s(1783) =< s(1728)*s(1703)
s(1784) =< s(1728)*s(1743)
s(1785) =< s(1779)
s(1787) =< s(1767)
s(1681) =< s(1387)
s(1682) =< s(1232)*s(1387)
s(1684) =< s(1232)*s(1681)

  with precondition: [V1=2,V>=1,V17>=0] 

* Chain [86]: 1
  with precondition: [V=0,V1>=1] 

* Chain [85]: 1*s(1793)+1
  Such that:s(1793) =< V

  with precondition: [V1=V,V1>=1] 

* Chain [84]...: 3*s(1794)+328*s(1795)+12*s(1797)+152*s(1806)+9*s(1807)+9*s(1808)+10*s(1810)+7*s(1822)+8*s(1831)+4*s(1832)+2*s(1833)+41*s(1834)+8*s(1835)+2*s(1836)+41*s(1837)+2*s(1840)+41*s(1841)+4*s(1843)+4*s(1844)+4*s(1845)+4*s(1846)+4*s(1847)+2*s(1850)+41*s(1851)+4*s(1853)+4*s(1854)+4*s(1855)+4*s(1856)+4*s(1857)+20*s(1858)+3
  Such that:s(1804) =< V1+V
s(1805) =< V1/2
s(1802) =< V1/2+V/2
s(1794) =< V
aux(277) =< V1
s(1797) =< aux(277)
s(1806) =< s(1804)
s(1807) =< s(1804)
s(1808) =< s(1804)
s(1809) =< s(1802)
s(1810) =< s(1802)
s(1807) =< s(1802)
s(1809) =< s(1804)
s(1810) =< s(1804)
s(1811) =< s(1804)+1
s(1812) =< s(1804)
s(1813) =< s(1804)-1
s(1814) =< s(1810)*s(1804)
s(1815) =< s(1806)*s(1811)
s(1816) =< s(1806)*s(1812)
s(1817) =< s(1810)*s(1813)
s(1818) =< s(1810)*s(1811)
s(1819) =< s(1815)* (1/2)
s(1807) =< s(1815)+s(1815)+s(1814)+aux(277)
s(1808) =< s(1815)+s(1815)+s(1814)+aux(277)
s(1820) =< s(1814)* (1/2)
s(1821) =< s(1815)+s(1815)+s(1814)+aux(277)
s(1822) =< s(1815)+s(1815)+s(1814)+aux(277)
s(1823) =< s(1815)+s(1815)+s(1814)+aux(277)
s(1824) =< s(1819)+s(1819)+s(1820)+s(1805)
s(1825) =< s(1808)*s(1812)
s(1826) =< s(1808)*s(1811)
s(1827) =< s(1807)*s(1813)
s(1823) =< s(1807)*s(1812)
s(1828) =< s(1807)*s(1811)
s(1829) =< s(1822)*s(1811)
s(1830) =< s(1811)
s(1831) =< s(1806)*s(1811)
s(1832) =< s(1806)*s(1830)
s(1833) =< s(1825)
s(1834) =< s(1826)
s(1835) =< s(1821)
s(1836) =< s(1816)
s(1837) =< s(1815)
s(1838) =< s(1823)
s(1839) =< s(1812)
s(1840) =< s(1827)
s(1838) =< s(1828)
s(1839) =< s(1811)
s(1841) =< s(1828)
s(1842) =< s(1839)
s(1843) =< s(1841)*s(1839)
s(1844) =< s(1841)*s(1811)
s(1845) =< s(1841)*s(1842)
s(1846) =< s(1838)
s(1847) =< s(1824)
s(1848) =< s(1804)
s(1849) =< s(1804)
s(1850) =< s(1817)
s(1848) =< s(1818)
s(1849) =< s(1811)
s(1851) =< s(1818)
s(1852) =< s(1849)
s(1853) =< s(1851)*s(1849)
s(1854) =< s(1851)*s(1811)
s(1855) =< s(1851)*s(1852)
s(1856) =< s(1848)
s(1857) =< s(1809)
s(1858) =< s(1829)

  with precondition: [V1>=1] 

* Chain [83]...: 9*s(1861)+313*s(1862)+152*s(1867)+9*s(1868)+9*s(1869)+10*s(1871)+7*s(1883)+8*s(1892)+4*s(1893)+2*s(1894)+41*s(1895)+8*s(1896)+2*s(1897)+41*s(1898)+2*s(1901)+41*s(1902)+4*s(1904)+4*s(1905)+4*s(1906)+4*s(1907)+4*s(1908)+2*s(1911)+41*s(1912)+4*s(1914)+4*s(1915)+4*s(1916)+4*s(1917)+4*s(1918)+20*s(1919)+4
  Such that:s(1865) =< V+V17
s(1866) =< V/2
s(1863) =< V/2+V17/2
aux(278) =< V
s(1861) =< aux(278)
s(1867) =< s(1865)
s(1868) =< s(1865)
s(1869) =< s(1865)
s(1870) =< s(1863)
s(1871) =< s(1863)
s(1868) =< s(1863)
s(1870) =< s(1865)
s(1871) =< s(1865)
s(1872) =< s(1865)+1
s(1873) =< s(1865)
s(1874) =< s(1865)-1
s(1875) =< s(1871)*s(1865)
s(1876) =< s(1867)*s(1872)
s(1877) =< s(1867)*s(1873)
s(1878) =< s(1871)*s(1874)
s(1879) =< s(1871)*s(1872)
s(1880) =< s(1876)* (1/2)
s(1868) =< s(1876)+s(1876)+s(1875)+aux(278)
s(1869) =< s(1876)+s(1876)+s(1875)+aux(278)
s(1881) =< s(1875)* (1/2)
s(1882) =< s(1876)+s(1876)+s(1875)+aux(278)
s(1883) =< s(1876)+s(1876)+s(1875)+aux(278)
s(1884) =< s(1876)+s(1876)+s(1875)+aux(278)
s(1885) =< s(1880)+s(1880)+s(1881)+s(1866)
s(1886) =< s(1869)*s(1873)
s(1887) =< s(1869)*s(1872)
s(1888) =< s(1868)*s(1874)
s(1884) =< s(1868)*s(1873)
s(1889) =< s(1868)*s(1872)
s(1890) =< s(1883)*s(1872)
s(1891) =< s(1872)
s(1892) =< s(1867)*s(1872)
s(1893) =< s(1867)*s(1891)
s(1894) =< s(1886)
s(1895) =< s(1887)
s(1896) =< s(1882)
s(1897) =< s(1877)
s(1898) =< s(1876)
s(1899) =< s(1884)
s(1900) =< s(1873)
s(1901) =< s(1888)
s(1899) =< s(1889)
s(1900) =< s(1872)
s(1902) =< s(1889)
s(1903) =< s(1900)
s(1904) =< s(1902)*s(1900)
s(1905) =< s(1902)*s(1872)
s(1906) =< s(1902)*s(1903)
s(1907) =< s(1899)
s(1908) =< s(1885)
s(1909) =< s(1865)
s(1910) =< s(1865)
s(1911) =< s(1878)
s(1909) =< s(1879)
s(1910) =< s(1872)
s(1912) =< s(1879)
s(1913) =< s(1910)
s(1914) =< s(1912)*s(1910)
s(1915) =< s(1912)*s(1872)
s(1916) =< s(1912)*s(1913)
s(1917) =< s(1909)
s(1918) =< s(1870)
s(1919) =< s(1890)

  with precondition: [V1>=0,V>=0,V17>=0,V1+3*V>=3,V+V17>=1] 

* Chain [82]...: 68*s(1923)+483*s(1925)+924*s(1926)+27*s(1934)+27*s(1935)+30*s(1937)+21*s(1949)+24*s(1958)+12*s(1959)+6*s(1960)+123*s(1961)+24*s(1962)+6*s(1963)+123*s(1964)+6*s(1967)+123*s(1968)+12*s(1970)+12*s(1971)+12*s(1972)+12*s(1973)+12*s(1974)+6*s(1977)+123*s(1978)+12*s(1980)+12*s(1981)+12*s(1982)+12*s(1983)+12*s(1984)+60*s(1985)+8*s(2062)+4*s(2064)+7
  Such that:aux(289) =< V
aux(290) =< V17
aux(291) =< V17/2
s(1925) =< aux(290)
s(1934) =< aux(290)
s(1935) =< aux(290)
s(1936) =< aux(291)
s(1937) =< aux(291)
s(1934) =< aux(291)
s(1936) =< aux(290)
s(1937) =< aux(290)
s(1938) =< aux(290)+1
s(1939) =< aux(290)
s(1940) =< aux(290)-1
s(1941) =< s(1937)*aux(290)
s(1942) =< s(1925)*s(1938)
s(1943) =< s(1925)*s(1939)
s(1944) =< s(1937)*s(1940)
s(1945) =< s(1937)*s(1938)
s(1946) =< s(1942)* (1/2)
s(1934) =< s(1942)+s(1942)+s(1941)+aux(290)
s(1935) =< s(1942)+s(1942)+s(1941)+aux(290)
s(1947) =< s(1941)* (1/2)
s(1948) =< s(1942)+s(1942)+s(1941)+aux(290)
s(1949) =< s(1942)+s(1942)+s(1941)+aux(290)
s(1950) =< s(1942)+s(1942)+s(1941)+aux(290)
s(1951) =< s(1946)+s(1946)+s(1947)+aux(291)
s(1952) =< s(1935)*s(1939)
s(1953) =< s(1935)*s(1938)
s(1954) =< s(1934)*s(1940)
s(1950) =< s(1934)*s(1939)
s(1955) =< s(1934)*s(1938)
s(1956) =< s(1949)*s(1938)
s(1957) =< s(1938)
s(1958) =< s(1925)*s(1938)
s(1959) =< s(1925)*s(1957)
s(1960) =< s(1952)
s(1961) =< s(1953)
s(1962) =< s(1948)
s(1963) =< s(1943)
s(1964) =< s(1942)
s(1965) =< s(1950)
s(1966) =< s(1939)
s(1967) =< s(1954)
s(1965) =< s(1955)
s(1966) =< s(1938)
s(1968) =< s(1955)
s(1969) =< s(1966)
s(1970) =< s(1968)*s(1966)
s(1971) =< s(1968)*s(1938)
s(1972) =< s(1968)*s(1969)
s(1973) =< s(1965)
s(1974) =< s(1951)
s(1975) =< aux(290)
s(1976) =< aux(290)
s(1977) =< s(1944)
s(1975) =< s(1945)
s(1976) =< s(1938)
s(1978) =< s(1945)
s(1979) =< s(1976)
s(1980) =< s(1978)*s(1976)
s(1981) =< s(1978)*s(1938)
s(1982) =< s(1978)*s(1979)
s(1983) =< s(1975)
s(1984) =< s(1936)
s(1985) =< s(1956)
s(1923) =< aux(289)
s(2061) =< aux(289)
s(2062) =< s(1923)*aux(289)
s(2064) =< s(1923)*s(2061)

  with precondition: [V1=2,V>=1,V17>=1] 

* Chain [81]...: 460*s(2138)+336*s(2141)+1232*s(2142)+9*s(2151)+9*s(2152)+10*s(2154)+7*s(2166)+16*s(2175)+8*s(2176)+2*s(2177)+41*s(2178)+8*s(2179)+4*s(2180)+123*s(2181)+2*s(2184)+41*s(2185)+4*s(2187)+4*s(2188)+4*s(2189)+4*s(2190)+4*s(2191)+2*s(2194)+41*s(2195)+4*s(2197)+4*s(2198)+4*s(2199)+4*s(2200)+4*s(2201)+20*s(2202)+9*s(2218)+9*s(2219)+10*s(2221)+7*s(2233)+16*s(2242)+8*s(2243)+2*s(2244)+41*s(2245)+8*s(2246)+4*s(2247)+123*s(2248)+2*s(2251)+41*s(2252)+4*s(2254)+4*s(2255)+4*s(2256)+4*s(2257)+4*s(2258)+2*s(2261)+41*s(2262)+4*s(2264)+4*s(2265)+4*s(2266)+4*s(2267)+4*s(2268)+20*s(2269)+4*s(2277)+12*s(2278)+4*s(2279)+4*s(2280)+18*s(2301)+7*s(2316)+2*s(2327)+82*s(2328)+8*s(2329)+2*s(2334)+4*s(2337)+4*s(2338)+4*s(2339)+4*s(2340)+4*s(2341)+2*s(2344)+4*s(2347)+4*s(2348)+4*s(2349)+4*s(2350)+20*s(2352)+4*s(2362)+18*s(2384)+7*s(2399)+2*s(2410)+82*s(2411)+8*s(2412)+2*s(2417)+4*s(2420)+4*s(2421)+4*s(2422)+4*s(2423)+4*s(2424)+2*s(2427)+4*s(2430)+4*s(2431)+4*s(2432)+4*s(2433)+20*s(2435)+7
  Such that:aux(298) =< V/2
aux(295) =< V/2+V17/2
aux(305) =< V
aux(306) =< V+V17
s(2138) =< aux(305)
s(2141) =< aux(306)
s(2151) =< aux(306)
s(2152) =< aux(306)
s(2153) =< aux(295)
s(2154) =< aux(295)
s(2151) =< aux(295)
s(2153) =< aux(306)
s(2154) =< aux(306)
s(2155) =< aux(306)+1
s(2156) =< aux(306)
s(2157) =< aux(306)-1
s(2158) =< s(2154)*aux(306)
s(2159) =< s(2141)*s(2155)
s(2160) =< s(2141)*s(2156)
s(2161) =< s(2154)*s(2157)
s(2162) =< s(2154)*s(2155)
s(2163) =< s(2159)* (1/2)
s(2151) =< s(2159)+s(2159)+s(2158)+aux(306)
s(2152) =< s(2159)+s(2159)+s(2158)+aux(306)
s(2164) =< s(2158)* (1/2)
s(2165) =< s(2159)+s(2159)+s(2158)+aux(306)
s(2166) =< s(2159)+s(2159)+s(2158)+aux(306)
s(2167) =< s(2159)+s(2159)+s(2158)+aux(306)
s(2168) =< s(2163)+s(2163)+s(2164)+aux(295)
s(2169) =< s(2152)*s(2156)
s(2170) =< s(2152)*s(2155)
s(2171) =< s(2151)*s(2157)
s(2167) =< s(2151)*s(2156)
s(2172) =< s(2151)*s(2155)
s(2173) =< s(2166)*s(2155)
s(2174) =< s(2155)
s(2175) =< s(2141)*s(2155)
s(2176) =< s(2141)*s(2174)
s(2177) =< s(2169)
s(2178) =< s(2170)
s(2179) =< s(2165)
s(2180) =< s(2160)
s(2181) =< s(2159)
s(2182) =< s(2167)
s(2183) =< s(2156)
s(2184) =< s(2171)
s(2182) =< s(2172)
s(2183) =< s(2155)
s(2185) =< s(2172)
s(2186) =< s(2183)
s(2187) =< s(2185)*s(2183)
s(2188) =< s(2185)*s(2155)
s(2189) =< s(2185)*s(2186)
s(2190) =< s(2182)
s(2191) =< s(2168)
s(2192) =< aux(306)
s(2193) =< aux(306)
s(2194) =< s(2161)
s(2192) =< s(2162)
s(2193) =< s(2155)
s(2195) =< s(2162)
s(2196) =< s(2193)
s(2197) =< s(2195)*s(2193)
s(2198) =< s(2195)*s(2155)
s(2199) =< s(2195)*s(2196)
s(2200) =< s(2192)
s(2201) =< s(2153)
s(2202) =< s(2173)
s(2218) =< aux(305)
s(2219) =< aux(305)
s(2220) =< aux(298)
s(2221) =< aux(298)
s(2218) =< aux(298)
s(2220) =< aux(305)
s(2221) =< aux(305)
s(2222) =< aux(305)+1
s(2223) =< aux(305)
s(2224) =< aux(305)-1
s(2225) =< s(2221)*aux(305)
s(2226) =< s(2138)*s(2222)
s(2227) =< s(2138)*s(2223)
s(2228) =< s(2221)*s(2224)
s(2229) =< s(2221)*s(2222)
s(2230) =< s(2226)* (1/2)
s(2218) =< s(2226)+s(2226)+s(2225)+aux(305)
s(2219) =< s(2226)+s(2226)+s(2225)+aux(305)
s(2231) =< s(2225)* (1/2)
s(2232) =< s(2226)+s(2226)+s(2225)+aux(305)
s(2233) =< s(2226)+s(2226)+s(2225)+aux(305)
s(2234) =< s(2226)+s(2226)+s(2225)+aux(305)
s(2235) =< s(2230)+s(2230)+s(2231)+aux(298)
s(2236) =< s(2219)*s(2223)
s(2237) =< s(2219)*s(2222)
s(2238) =< s(2218)*s(2224)
s(2234) =< s(2218)*s(2223)
s(2239) =< s(2218)*s(2222)
s(2240) =< s(2233)*s(2222)
s(2241) =< s(2222)
s(2242) =< s(2138)*s(2222)
s(2243) =< s(2138)*s(2241)
s(2244) =< s(2236)
s(2245) =< s(2237)
s(2246) =< s(2232)
s(2247) =< s(2227)
s(2248) =< s(2226)
s(2249) =< s(2234)
s(2250) =< s(2223)
s(2251) =< s(2238)
s(2249) =< s(2239)
s(2250) =< s(2222)
s(2252) =< s(2239)
s(2253) =< s(2250)
s(2254) =< s(2252)*s(2250)
s(2255) =< s(2252)*s(2222)
s(2256) =< s(2252)*s(2253)
s(2257) =< s(2249)
s(2258) =< s(2235)
s(2259) =< aux(305)
s(2260) =< aux(305)
s(2261) =< s(2228)
s(2259) =< s(2229)
s(2260) =< s(2222)
s(2262) =< s(2229)
s(2263) =< s(2260)
s(2264) =< s(2262)*s(2260)
s(2265) =< s(2262)*s(2222)
s(2266) =< s(2262)*s(2263)
s(2267) =< s(2259)
s(2268) =< s(2220)
s(2269) =< s(2240)
s(2272) =< aux(305)
s(2272) =< aux(306)
s(2276) =< s(2272)
s(2277) =< s(2138)*s(2272)
s(2278) =< s(2138)*aux(305)
s(2279) =< s(2138)*s(2276)
s(2280) =< s(2272)
s(2301) =< aux(306)
s(2308) =< s(2141)*aux(306)
s(2311) =< s(2141)*s(2157)
s(2301) =< s(2159)+s(2159)+s(2308)+aux(306)
s(2314) =< s(2308)* (1/2)
s(2315) =< s(2159)+s(2159)+s(2308)+aux(306)
s(2316) =< s(2159)+s(2159)+s(2308)+aux(306)
s(2317) =< s(2159)+s(2159)+s(2308)+aux(306)
s(2318) =< s(2163)+s(2163)+s(2314)+aux(306)
s(2319) =< s(2301)*s(2156)
s(2320) =< s(2301)*s(2155)
s(2321) =< s(2301)*s(2157)
s(2317) =< s(2301)*s(2156)
s(2323) =< s(2316)*s(2155)
s(2327) =< s(2319)
s(2328) =< s(2320)
s(2329) =< s(2315)
s(2332) =< s(2317)
s(2334) =< s(2321)
s(2332) =< s(2320)
s(2337) =< s(2328)*s(2183)
s(2338) =< s(2328)*s(2155)
s(2339) =< s(2328)*s(2186)
s(2340) =< s(2332)
s(2341) =< s(2318)
s(2342) =< aux(306)
s(2344) =< s(2311)
s(2342) =< s(2159)
s(2347) =< s(2181)*s(2193)
s(2348) =< s(2181)*s(2155)
s(2349) =< s(2181)*s(2196)
s(2350) =< s(2342)
s(2352) =< s(2323)
s(2362) =< s(2138)*s(2223)
s(2384) =< aux(305)
s(2391) =< s(2138)*aux(305)
s(2394) =< s(2138)*s(2224)
s(2384) =< s(2226)+s(2226)+s(2391)+aux(305)
s(2397) =< s(2391)* (1/2)
s(2398) =< s(2226)+s(2226)+s(2391)+aux(305)
s(2399) =< s(2226)+s(2226)+s(2391)+aux(305)
s(2400) =< s(2226)+s(2226)+s(2391)+aux(305)
s(2401) =< s(2230)+s(2230)+s(2397)+aux(305)
s(2402) =< s(2384)*s(2223)
s(2403) =< s(2384)*s(2222)
s(2404) =< s(2384)*s(2224)
s(2400) =< s(2384)*s(2223)
s(2406) =< s(2399)*s(2222)
s(2410) =< s(2402)
s(2411) =< s(2403)
s(2412) =< s(2398)
s(2415) =< s(2400)
s(2417) =< s(2404)
s(2415) =< s(2403)
s(2420) =< s(2411)*s(2250)
s(2421) =< s(2411)*s(2222)
s(2422) =< s(2411)*s(2253)
s(2423) =< s(2415)
s(2424) =< s(2401)
s(2425) =< aux(305)
s(2427) =< s(2394)
s(2425) =< s(2226)
s(2430) =< s(2248)*s(2260)
s(2431) =< s(2248)*s(2222)
s(2432) =< s(2248)*s(2263)
s(2433) =< s(2425)
s(2435) =< s(2406)

  with precondition: [V1=2,V17>=0,2*V>=5] 

* Chain [80]...: 3*s(2437)+5*s(2438)+0
  Such that:s(2437) =< V1

  with precondition: [V17=0,V1>=2,V>=1] 


Closed-form bounds of start(V1,V,V17,V27): 
-------------------------------------
* Chain [93] with precondition: [V1>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [92] with precondition: [V1=1,V>=0,V17>=1] 
    - Upper bound: 4*V+3+2*V*V17+2*V*nat(-V+V17)+24*V17+2*V17*V17+nat(-V+V17)*6 
    - Complexity: n^2 
* Chain [91] with precondition: [V1=1,V>=0,V17>=0,V27>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [90] with precondition: [V1=1,V>=1,V17>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [89] with precondition: [V1=2,V>=0,V17>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [88] with precondition: [V1=2,V>=0,V17>=0,V27>=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [87] with precondition: [V1=2,V>=1,V17>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [86] with precondition: [V=0,V1>=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [85] with precondition: [V1=V,V1>=1] 
    - Upper bound: V+1 
    - Complexity: n 
* Chain [84]... with precondition: [V1>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [83]... with precondition: [V1>=0,V>=0,V17>=0,V1+3*V>=3,V+V17>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [82]... with precondition: [V1=2,V>=1,V17>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [81]... with precondition: [V1=2,V17>=0,2*V>=5] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [80]... with precondition: [V17=0,V1>=2,V>=1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of start(V1,V,V17,V27): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 58 ms.
* Invariants computed in 325 ms.
   - Backward Invariants 183 ms.
   - Transitive Invariants 57 ms.
* Refinement performed in 1134 ms.
* Termination proved in 93 ms.
* Upper bounds computed in 6989 ms.
   - Equation cost structures 4391 ms.
   - Phase cost structures 1545 ms.
   - Chain cost structures 486 ms.
   - Solving cost expressions 376 ms.
* Total analysis performed in 8687 ms.



Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [append/3]
1. recursive  : [ge/3]
2. recursive  : [help/5,if/6]
3. recursive  : [length/2]
4. non_recursive  : [rev/2]
5. non_recursive  : [start/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into append/3
1. SCC is partially evaluated into ge/3
2. SCC is partially evaluated into if/6
3. SCC is partially evaluated into length/2
4. SCC is partially evaluated into rev/2
5. SCC is partially evaluated into start/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations append/3 
* CE 11 is refined into CE [24] 
* CE 9 is refined into CE [25] 
* CE 10 is refined into CE [26] 


#### Refined cost equations append/3 
* CE 24: append(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 25: append(A,B,B) = 1
     [B>=0,A=0] 
* CE 26: append(V,V1,Out) = 1+ append(W1,V1,X1)
     [V+X1>=Out,Out>=X1+1,V1>=0,V+X1=Out+W1] 

### Cost equations --> "Loop" of append/3 
* CEs [26] --> Loop 14 
* CEs [24] --> Loop 15 
* CEs [25] --> Loop 16 

#### Loops of append/3 
* Loop 14: append(V,V1,Out)->  append(V',V1,Out')
                  [V+Out'>=Out,Out>=Out'+1,V1>=0,V+Out'=Out+V'] 
* Loop 15: append(V,V1,Out) [V1>=0,V>=0,Out=0] 
* Loop 16: append(A,B,B) [B>=0,A=0] 

### Ranking functions of CR append(V,V1,Out) 
* RF of phase [14]: [V]

#### Partial ranking functions of CR append(V,V1,Out) 
* Partial RF of phase [14]:
  - RF of loop [14:1]:
    V


### Resulting Chains:append(V,V1,Out) 
* [[14],16]
* [[14],15]
* [16]
* [15]


### Merging Chains  append/3 into  External patterns of execution 
* [[16]] --> 1 
* [[15]] --> 2 
* [[16,[14]]] --> 3 
* [[15,[14]]] --> 4 


### Specialization of cost equations ge/3 
* CE 12 is refined into CE [27] 
* CE 13 is refined into CE [28] 
* CE 15 is refined into CE [29] 
* CE 14 is refined into CE [30] 


#### Refined cost equations ge/3 
* CE 27: ge(V,V1,Out) = 1
     [V>=0,Out=1,V1=0] 
* CE 28: ge(V,V1,Out) = 1
     [V1>=1,Out=0,V=0] 
* CE 29: ge(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 30: ge(V,V1,Out) = 1+ ge(W1,X1,Out)
     [X1>=0,W1>=0,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of ge/3 
* CEs [30] --> Loop 17 
* CEs [27] --> Loop 18 
* CEs [28,29] --> Loop 19 

#### Loops of ge/3 
* Loop 17: ge(V,V1,Out)->  ge(V',V1',Out)
                  [V1'>=0,V'>=0,V1'+1=V1,V'+1=V] 
* Loop 18: ge(V,V1,Out) [V>=0,Out=1,V1=0] 
* Loop 19: ge(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR ge(V,V1,Out) 
* RF of phase [17]: [V,V1]

#### Partial ranking functions of CR ge(V,V1,Out) 
* Partial RF of phase [17]:
  - RF of loop [17:1]:
    V
    V1


### Resulting Chains:ge(V,V1,Out) 
* [[17],19]
* [[17],18]
* [19]
* [18]


### Merging Chains  ge/3 into  External patterns of execution 
* [[18]] --> 1 
* [[19],[19,[17]]] --> 2 
* [[18,[17]]] --> 3 


### Specialization of cost equations if/6 
* CE 18 is refined into CE [31] 
* CE 16 is refined into CE [32] 
* CE 19 is refined into CE [33] 
* CE 17 is refined into CE [34,35,36,37,38,39,40,41,42,43,44,45] 


#### Refined cost equations if/6 
* CE 31: if(A,B,C,D,E,C) = 1
     [E>=0,D>=0,C>=0,A>=0,B=1] 
* CE 32: if(V,V1,V13,V11,V12,Out) = 1
     [V12>=0,V11>=0,V13>=0,V>=0,Out=0,V1=0] 
* CE 33: if(V,V1,V13,V11,V12,Out) = 0
     [V12>=0,V11>=0,V13>=0,V1>=0,V>=0,Out=0] 
* CE 34: if(V,V1,V13,V11,V12,Out) = 2+ append(W13,V,V):1+ ge(X13,Y13,Z13):1+ if(V,A14,B14,X13,C14,Out)
     [X13>=1,V>=1,V13>=0,V+V13=B14,X13=V11+1,C14=0,A14=1,Z13=1,Y13=0,W13=0,V12=0,V1=0] 
* CE 35: if(V,V1,V13,V11,V12,Out) = 2+ append(W13,V,V):1+ ge(X13,V12,Y13):2+ if(V,Z13,A14,X13,V12,Out)
     [V12>=0,X13>=1,V>=1,V13>=0,V+V13=A14,X13=V11+1,Z13=0,Y13=0,W13=0,V1=0] 
* CE 36: if(V,V1,V13,V11,V12,Out) = 2+ append(W13,V,V):1+ ge(X13,V12,Y13):3+ if(V,Z13,A14,X13,V12,Out)
     [X13>=V12,V12>=1,V>=1,V13>=0,V+V13=A14,X13=V11+1,Z13=1,Y13=1,W13=0,V1=0] 
* CE 37: if(V,V1,V13,V11,V12,Out) = 2+ append(W13,X13,Y13):2+ ge(Z13,A14,B14):1+ if(C14,D14,E14,Z13,F14,Out)
     [Z13>=1,X13>=1,W13>=0,V13>=0,V13+X13=E14,W13+X13=V,Z13=V11+1,F14=0,D14=1,C14=0,B14=1,A14=0,Y13=0,V12=0,V1=0] 
* CE 38: if(V,V1,V13,V11,V12,Out) = 2+ append(W13,X13,Y13):2+ ge(Z13,V12,A14):2+ if(B14,C14,D14,Z13,V12,Out)
     [V12>=0,Z13>=1,X13>=1,W13>=0,V13>=0,V13+X13=D14,W13+X13=V,Z13=V11+1,C14=0,B14=0,A14=0,Y13=0,V1=0] 
* CE 39: if(V,V1,V13,V11,V12,Out) = 2+ append(W13,X13,Y13):2+ ge(Z13,V12,A14):3+ if(B14,C14,D14,Z13,V12,Out)
     [Z13>=V12,V12>=1,X13>=1,W13>=0,V13>=0,V13+X13=D14,W13+X13=V,Z13=V11+1,C14=1,B14=0,A14=1,Y13=0,V1=0] 
* CE 40: if(V,V1,V13,V11,V12,Out) = 2+ append(W13,X13,V):3+ ge(Y13,Z13,A14):1+ if(V,B14,C14,Y13,D14,Out)
     [V>=W13+1,Y13>=1,W13>=1,V13>=0,V+V13=W13+C14,V=W13+X13,Y13=V11+1,D14=0,B14=1,A14=1,Z13=0,V12=0,V1=0] 
* CE 41: if(V,V1,V13,V11,V12,Out) = 2+ append(W13,X13,V):3+ ge(Y13,V12,Z13):2+ if(V,A14,B14,Y13,V12,Out)
     [V>=W13+1,V12>=0,Y13>=1,W13>=1,V13>=0,V+V13=W13+B14,V=W13+X13,Y13=V11+1,A14=0,Z13=0,V1=0] 
* CE 42: if(V,V1,V13,V11,V12,Out) = 2+ append(W13,X13,V):3+ ge(Y13,V12,Z13):3+ if(V,A14,B14,Y13,V12,Out)
     [Y13>=V12,V>=W13+1,V12>=1,W13>=1,V13>=0,V+V13=W13+B14,V=W13+X13,Y13=V11+1,A14=1,Z13=1,V1=0] 
* CE 43: if(V,V1,V13,V11,V12,Out) = 2+ append(W13,X13,Y13):4+ ge(Z13,A14,B14):1+ if(Y13,C14,D14,Z13,E14,Out)
     [W13>=Y13,Z13>=1,Y13>=1,X13>=1,V13>=0,V13+X13=D14,W13+X13=V,Z13=V11+1,E14=0,C14=1,B14=1,A14=0,V12=0,V1=0] 
* CE 44: if(V,V1,V13,V11,V12,Out) = 2+ append(W13,X13,Y13):4+ ge(Z13,V12,A14):2+ if(Y13,B14,C14,Z13,V12,Out)
     [W13>=Y13,V12>=0,Z13>=1,Y13>=1,X13>=1,V13>=0,V13+X13=C14,W13+X13=V,Z13=V11+1,B14=0,A14=0,V1=0] 
* CE 45: if(V,V1,V13,V11,V12,Out) = 2+ append(W13,X13,Y13):4+ ge(Z13,V12,A14):3+ if(Y13,B14,C14,Z13,V12,Out)
     [Z13>=V12,W13>=Y13,V12>=1,Y13>=1,X13>=1,V13>=0,V13+X13=C14,W13+X13=V,Z13=V11+1,B14=1,A14=1,V1=0] 

### Cost equations --> "Loop" of if/6 
* CEs [45] --> Loop 20 
* CEs [42] --> Loop 21 
* CEs [36] --> Loop 22 
* CEs [44] --> Loop 23 
* CEs [41] --> Loop 24 
* CEs [35] --> Loop 25 
* CEs [39] --> Loop 26 
* CEs [38] --> Loop 27 
* CEs [43] --> Loop 28 
* CEs [40] --> Loop 29 
* CEs [34] --> Loop 30 
* CEs [37] --> Loop 31 
* CEs [31] --> Loop 32 
* CEs [32,33] --> Loop 33 

#### Loops of if/6 
* Loop 20: if(V,V1,V13,V11,V12,Out)->  if(V',V1',V13',V11',V12,Out)
                  [V+V13>=V'+V13',V11+1>=V12,V13'>=V13+1,V'>=1,V12>=1,V13>=0,V11+1=V11',V1'=1,V1=0] 
* Loop 21: if(V,V1,V13,V11,V12,Out)->  if(V,V1',V13',V11',V12,Out)
                  [V+V13>=V13'+1,V11+1>=V12,V13'>=V13+1,V12>=1,V13>=0,V11+1=V11',V1'=1,V1=0] 
* Loop 22: if(V,V1,V13,V11,V12,Out)->  if(V,V1',V13',V11',V12,Out)
                  [V11+1>=V12,V12>=1,V13>=0,V>=1,V+V13=V13',V11+1=V11',V1'=1,V1=0] 
* Loop 23: if(V,V1,V13,V11,V12,Out)->  if(V',V1',V13',V11',V12,Out)
                  [V+V13>=V'+V13',V13'>=V13+1,V'>=1,V12>=0,V11>=0,V13>=0,V11+1=V11',V1'=0,V1=0] 
* Loop 24: if(V,V1,V13,V11,V12,Out)->  if(V,V1',V13',V11',V12,Out)
                  [V+V13>=V13'+1,V13'>=V13+1,V12>=0,V11>=0,V13>=0,V11+1=V11',V1'=0,V1=0] 
* Loop 25: if(V,V1,V13,V11,V12,Out)->  if(V,V1',V13',V11',V12,Out)
                  [V12>=0,V11>=0,V13>=0,V>=1,V+V13=V13',V11+1=V11',V1'=0,V1=0] 
* Loop 26: if(V,V1,V13,V11,V12,Out)->  if(V',V1',V13',V11',V12,Out)
                  [V+V13>=V13',V11+1>=V12,V13'>=V13+1,V12>=1,V13>=0,V11+1=V11',V1'=1,V'=0,V1=0] 
* Loop 27: if(V,V1,V13,V11,V12,Out)->  if(V',V1',V13',V11',V12,Out)
                  [V+V13>=V13',V13'>=V13+1,V12>=0,V11>=0,V13>=0,V11+1=V11',V1'=0,V'=0,V1=0] 
* Loop 28: if(V,V1,V13,V11,V12,Out)->  if(V',V1',V13',V11',V12',Out)
                  [V+V13>=V'+V13',V13'>=V13+1,V'>=1,V11>=0,V13>=0,V11+1=V11',V12'=0,V1'=1,V12=0,V1=0] 
* Loop 29: if(V,V1,V13,V11,V12,Out)->  if(V,V1',V13',V11',V12',Out)
                  [V+V13>=V13'+1,V13'>=V13+1,V11>=0,V13>=0,V11+1=V11',V12'=0,V1'=1,V12=0,V1=0] 
* Loop 30: if(V,V1,V13,V11,V12,Out)->  if(V,V1',V13',V11',V12',Out)
                  [V11>=0,V13>=0,V>=1,V+V13=V13',V11+1=V11',V12'=0,V1'=1,V12=0,V1=0] 
* Loop 31: if(V,V1,V13,V11,V12,Out)->  if(V',V1',V13',V11',V12',Out)
                  [V+V13>=V13',V13'>=V13+1,V11>=0,V13>=0,V11+1=V11',V12'=0,V1'=1,V'=0,V12=0,V1=0] 
* Loop 32: if(A,B,C,D,E,C) [E>=0,D>=0,C>=0,A>=0,B=1] 
* Loop 33: if(V,V1,V13,V11,V12,Out) [V12>=0,V11>=0,V13>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR if(V,V1,V13,V11,V12,Out) 

#### Partial ranking functions of CR if(V,V1,V13,V11,V12,Out) 
* Partial RF of phase [23,24,25]:
  - RF of loop [23:1]:
    V-1


### Resulting Chains:if(V,V1,V13,V11,V12,Out) 
* [[23,24,25]]...
* [[23,24,25],33]
* [[23,24,25],31,33]
* [[23,24,25],31,32]
* [[23,24,25],30,33]
* [[23,24,25],30,32]
* [[23,24,25],29,33]
* [[23,24,25],29,32]
* [[23,24,25],28,33]
* [[23,24,25],28,32]
* [[23,24,25],27,33]
* [[23,24,25],26,33]
* [[23,24,25],26,32]
* [[23,24,25],22,33]
* [[23,24,25],22,32]
* [[23,24,25],21,33]
* [[23,24,25],21,32]
* [[23,24,25],20,33]
* [[23,24,25],20,32]
* [33]
* [32]
* [31,33]
* [31,32]
* [30,33]
* [30,32]
* [29,33]
* [29,32]
* [28,33]
* [28,32]
* [27,33]
* [26,33]
* [26,32]
* [22,33]
* [22,32]
* [21,33]
* [21,32]
* [20,33]
* [20,32]


### Merging Chains  if/6 into  External patterns of execution 
* [[33,20],[33,21],[33,22],[33,26],[33,27],[33,28],[33,29],[33,30],[33,31],[33],[33,20,[23,24,25]],[33,21,[23,24,25]],[33,22,[23,24,25]],[33,26,[23,24,25]],[33,27,[23,24,25]],[33,28,[23,24,25]],[33,29,[23,24,25]],[33,30,[23,24,25]],[33,31,[23,24,25]],[33,[23,24,25]]] --> 1 
* [[32,28],[32,29],[32,30],[32,31]] --> 2 
* [[32,28,[23,24,25]],[32,29,[23,24,25]],[32,30,[23,24,25]],[32,31,[23,24,25]]] --> 3 
* [[32,20],[32,21],[32,22],[32,26]] --> 4 
* [[32,20,[23,24,25]],[32,21,[23,24,25]],[32,22,[23,24,25]],[32,26,[23,24,25]]] --> 5 
* [[32]] --> 6 
* [[[23,24,25]]] --> 7 


### Specialization of cost equations length/2 
* CE 21 is refined into CE [46] 
* CE 23 is refined into CE [47] 
* CE 22 is refined into CE [48] 


#### Refined cost equations length/2 
* CE 46: length(V,Out) = 1
     [Out=0,V=0] 
* CE 47: length(V,Out) = 0
     [V>=0,Out=0] 
* CE 48: length(V,Out) = 1+ length(W,X)
     [V>=W+1,W>=0,X+1=Out] 

### Cost equations --> "Loop" of length/2 
* CEs [48] --> Loop 34 
* CEs [46,47] --> Loop 35 

#### Loops of length/2 
* Loop 34: length(V,Out)->  length(V',Out')
                  [V>=V'+1,V'>=0,Out=Out'+1] 
* Loop 35: length(V,Out) [V>=0,Out=0] 

### Ranking functions of CR length(V,Out) 
* RF of phase [34]: [V]

#### Partial ranking functions of CR length(V,Out) 
* Partial RF of phase [34]:
  - RF of loop [34:1]:
    V


### Resulting Chains:length(V,Out) 
* [[34],35]
* [35]


### Merging Chains  length/2 into  External patterns of execution 
* [[35]] --> 1 
* [[35,[34]]] --> 2 


### Specialization of cost equations rev/2 
* CE 20 is refined into CE [49,50,51,52,53,54] 


#### Refined cost equations rev/2 
* CE 49: rev(V,Out) = 1+ length(V,W):1+ length(V,X):1+ if(V,Y,Z,A1,B1,C1):1
     [V>=0,C1=0,B1=0,A1=0,Z=0,Y=1,X=0,W=0,Out=0] 
* CE 50: rev(V,Out) = 1+ length(V,W):1+ length(V,X):1+ if(V,Y,Z,A1,B1,C1):6
     [V>=0,C1=0,B1=0,A1=0,Z=0,Y=1,X=0,W=0,Out=0] 
* CE 51: rev(V,Out) = 1+ length(V,W):1+ length(V,X):2+ if(V,Y,Z,A1,X,B1):1
     [V>=X,X>=1,B1=0,A1=0,Z=0,Y=1,W=0,Out=0] 
* CE 52: rev(V,Out) = 1+ length(V,W):1+ length(V,X):2+ if(V,Y,Z,A1,X,B1):6
     [V>=X,X>=1,B1=0,A1=0,Z=0,Y=1,W=0,Out=0] 
* CE 53: rev(V,Out) = 1+ length(V,W):2+ length(V,X):1+ if(V,Y,Z,A1,B1,C1):1
     [V+1>=Y,Y>=2,Y=W+1,C1=0,B1=0,A1=0,Z=0,X=0,Out=0] 
* CE 54: rev(V,Out) = 1+ length(V,W):2+ length(V,X):2+ if(V,Y,Z,A1,X,B1):1
     [V>=X,V+1>=Y,X>=1,Y>=2,Y=W+1,B1=0,A1=0,Z=0,Out=0] 

### Cost equations --> "Loop" of rev/2 
* CEs [49,50,51,52,53,54] --> Loop 36 

#### Loops of rev/2 
* Loop 36: rev(V,Out) [V>=0,Out=0] 

### Ranking functions of CR rev(V,Out) 

#### Partial ranking functions of CR rev(V,Out) 


### Resulting Chains:rev(V,Out) 
* [36]


### Merging Chains  rev/2 into  External patterns of execution 
* [[36]] --> 1 


### Specialization of cost equations start/5 
* CE 2 is refined into CE [55] 
* CE 3 is refined into CE [56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90] 
* CE 4 is refined into CE [91,92,93] 
* CE 5 is refined into CE [94] 
* CE 6 is refined into CE [95,96,97,98,99,100,101] 
* CE 7 is refined into CE [102,103,104,105] 
* CE 8 is refined into CE [106,107] 


#### Refined cost equations start/5 
* CE 55: start(V,V1,V13,V11,V12) = 0
     [V11>=0,V13>=0,V1>=0,V>=0] 
* CE 56: start(V,V1,V13,V11,V12) = 1+ append(W13,V13,V13):1+ ge(V,X13,Y13):1+ if(V13,Z13,A14,V,B14,C14):1
     [A14>=V13,V>=0,V13>=1,V13+V11=A14,C14=0,B14=0,Z13=1,Y13=1,X13=0,W13=0,V1=0] 
* CE 57: start(V,V1,V13,V11,V12) = 1+ append(W13,V13,V13):1+ ge(V,X13,Y13):1+ if(V13,Z13,A14,V,B14,A14):6
     [A14>=V13,V>=0,V13>=1,A14=V13+V11,B14=0,Z13=1,Y13=1,X13=0,W13=0,V1=0] 
* CE 58: start(V,V1,V13,V11,V12) = 1+ append(W13,V13,V13):1+ ge(V,V1,X13):2+ if(V13,Y13,Z13,V,V1,A14):1
     [Z13>=V13,V1>=0,V>=0,V13>=1,V13+V11=Z13,A14=0,Y13=0,X13=0,W13=0] 
* CE 59: start(V,V1,V13,V11,V12) = 1+ append(W13,V13,V13):1+ ge(V,X13,Y13):2+ if(V13,Z13,A14,V,B14,C14):2
     [V13+A14>=C14,C14>=A14+1,A14>=V13,V>=0,A14=V13+V11,B14=0,Z13=0,Y13=0,X13=0,W13=0,V1=0] 
* CE 60: start(V,V1,V13,V11,V12) = 1+ append(W13,V13,V13):1+ ge(V,X13,Y13):2+ if(V13,Z13,A14,V,B14,C14):3
     [C14>=A14+2,A14>=V13,V>=0,V13>=1,V13+V11=A14,B14=0,Z13=0,Y13=0,X13=0,W13=0,V1=0] 
* CE 61: start(V,V1,V13,V11,V12) = 1+ append(W13,V13,V13):1+ ge(V,V1,X13):2+ if(V13,Y13,Z13,V,V1,A14):4
     [V13+Z13>=A14,V+1>=V1,A14>=Z13+1,Z13>=V13,V1>=1,Z13=V13+V11,Y13=0,X13=0,W13=0] 
* CE 62: start(V,V1,V13,V11,V12) = 1+ append(W13,V13,V13):1+ ge(V,V1,X13):2+ if(V13,Y13,Z13,V,V1,A14):5
     [V+A14>=V1+Z13,A14>=Z13+2,Z13>=V13,V1>=1,V>=0,V13>=1,V13+V11=Z13,Y13=0,X13=0,W13=0] 
* CE 63: start(V,V1,V13,V11,V12) = 1+ append(W13,V13,V13):1+ ge(V,V1,X13):2+ if(V13,Y13,Z13,V,V1,A14):7
     [Z13>=V13,V1>=0,V>=0,V13>=1,Z13=V13+V11,Y13=0,X13=0,W13=0] 
* CE 64: start(V,V1,V13,V11,V12) = 1+ append(W13,V13,V13):1+ ge(V,V1,X13):3+ if(V13,Y13,Z13,V,V1,A14):1
     [V>=V1,Z13>=V13,V1>=1,V13>=1,V13+V11=Z13,A14=0,Y13=1,X13=1,W13=0] 
* CE 65: start(V,V1,V13,V11,V12) = 1+ append(W13,V13,V13):1+ ge(V,V1,X13):3+ if(V13,Y13,Z13,V,V1,Z13):6
     [V>=V1,Z13>=V13,V1>=1,V13>=1,Z13=V13+V11,Y13=1,X13=1,W13=0] 
* CE 66: start(V,V1,V13,V11,V12) = 1+ append(W13,X13,Y13):2+ ge(V,Z13,A14):1+ if(B14,C14,D14,V,E14,F14):1
     [D14>=X13,V>=0,X13>=1,W13>=0,D14=V11+X13,W13+X13=V13,F14=0,E14=0,C14=1,B14=0,A14=1,Z13=0,Y13=0,V1=0] 
* CE 67: start(V,V1,V13,V11,V12) = 1+ append(W13,X13,Y13):2+ ge(V,Z13,A14):1+ if(B14,C14,D14,V,E14,D14):6
     [D14>=X13,V>=0,X13>=1,W13>=0,D14=V11+X13,W13+X13=V13,E14=0,C14=1,B14=0,A14=1,Z13=0,Y13=0,V1=0] 
* CE 68: start(V,V1,V13,V11,V12) = 1+ append(W13,X13,Y13):2+ ge(V,V1,Z13):2+ if(A14,B14,C14,V,V1,D14):1
     [C14>=X13,V1>=0,V>=0,X13>=1,W13>=0,C14=V11+X13,W13+X13=V13,D14=0,B14=0,A14=0,Z13=0,Y13=0] 
* CE 69: start(V,V1,V13,V11,V12) = 1+ append(W13,X13,Y13):2+ ge(V,V1,Z13):3+ if(A14,B14,C14,V,V1,D14):1
     [V>=V1,C14>=X13,V1>=1,X13>=1,W13>=0,C14=V11+X13,W13+X13=V13,D14=0,B14=1,A14=0,Z13=1,Y13=0] 
* CE 70: start(V,V1,V13,V11,V12) = 1+ append(W13,X13,Y13):2+ ge(V,V1,Z13):3+ if(A14,B14,C14,V,V1,C14):6
     [V>=V1,C14>=X13,V1>=1,X13>=1,W13>=0,C14=V11+X13,W13+X13=V13,B14=1,A14=0,Z13=1,Y13=0] 
* CE 71: start(V,V1,V13,V11,V12) = 1+ append(W13,X13,V13):3+ ge(V,Y13,Z13):1+ if(V13,A14,B14,V,C14,D14):1
     [W13+B14>=V13,V13>=W13+1,V>=0,W13>=1,V13+V11=W13+B14,V13=W13+X13,D14=0,C14=0,A14=1,Z13=1,Y13=0,V1=0] 
* CE 72: start(V,V1,V13,V11,V12) = 1+ append(W13,X13,V13):3+ ge(V,Y13,Z13):1+ if(V13,A14,B14,V,C14,B14):6
     [W13+B14>=V13,V13>=W13+1,V>=0,W13>=1,W13+B14=V13+V11,V13=W13+X13,C14=0,A14=1,Z13=1,Y13=0,V1=0] 
* CE 73: start(V,V1,V13,V11,V12) = 1+ append(W13,X13,V13):3+ ge(V,V1,Y13):2+ if(V13,Z13,A14,V,V1,B14):1
     [W13+A14>=V13,V13>=W13+1,V1>=0,V>=0,W13>=1,V13+V11=W13+A14,V13=W13+X13,B14=0,Z13=0,Y13=0] 
* CE 74: start(V,V1,V13,V11,V12) = 1+ append(W13,X13,V13):3+ ge(V,Y13,Z13):2+ if(V13,A14,B14,V,C14,D14):2
     [V13+B14>=D14,W13+B14>=V13,D14>=B14+1,V13>=W13+1,V>=0,W13>=1,W13+B14=V13+V11,V13=W13+X13,C14=0,A14=0,Z13=0,Y13=0,V1=0] 
* CE 75: start(V,V1,V13,V11,V12) = 1+ append(W13,X13,V13):3+ ge(V,Y13,Z13):2+ if(V13,A14,B14,V,C14,D14):3
     [W13+B14>=V13,D14>=B14+2,V13>=W13+1,V>=0,W13>=1,V13+V11=W13+B14,V13=W13+X13,C14=0,A14=0,Z13=0,Y13=0,V1=0] 
* CE 76: start(V,V1,V13,V11,V12) = 1+ append(W13,X13,V13):3+ ge(V,V1,Y13):2+ if(V13,Z13,A14,V,V1,B14):4
     [V13+A14>=B14,W13+A14>=V13,V+1>=V1,B14>=A14+1,V13>=W13+1,V1>=1,W13>=1,W13+A14=V13+V11,V13=W13+X13,Z13=0,Y13=0] 
* CE 77: start(V,V1,V13,V11,V12) = 1+ append(W13,X13,V13):3+ ge(V,V1,Y13):2+ if(V13,Z13,A14,V,V1,B14):5
     [V+B14>=V1+A14,W13+A14>=V13,B14>=A14+2,V13>=W13+1,V1>=1,V>=0,W13>=1,V13+V11=W13+A14,V13=W13+X13,Z13=0,Y13=0] 
* CE 78: start(V,V1,V13,V11,V12) = 1+ append(W13,X13,V13):3+ ge(V,V1,Y13):2+ if(V13,Z13,A14,V,V1,B14):7
     [W13+A14>=V13,V13>=W13+1,V1>=0,V>=0,W13>=1,W13+A14=V13+V11,V13=W13+X13,Z13=0,Y13=0] 
* CE 79: start(V,V1,V13,V11,V12) = 1+ append(W13,X13,V13):3+ ge(V,V1,Y13):3+ if(V13,Z13,A14,V,V1,B14):1
     [W13+A14>=V13,V>=V1,V13>=W13+1,V1>=1,W13>=1,V13+V11=W13+A14,V13=W13+X13,B14=0,Z13=1,Y13=1] 
* CE 80: start(V,V1,V13,V11,V12) = 1+ append(W13,X13,V13):3+ ge(V,V1,Y13):3+ if(V13,Z13,A14,V,V1,A14):6
     [W13+A14>=V13,V>=V1,V13>=W13+1,V1>=1,W13>=1,W13+A14=V13+V11,V13=W13+X13,Z13=1,Y13=1] 
* CE 81: start(V,V1,V13,V11,V12) = 1+ append(W13,X13,Y13):4+ ge(V,Z13,A14):1+ if(Y13,B14,C14,V,D14,E14):1
     [W13>=Y13,C14>=X13,V>=0,Y13>=1,X13>=1,C14=V11+X13,W13+X13=V13,E14=0,D14=0,B14=1,A14=1,Z13=0,V1=0] 
* CE 82: start(V,V1,V13,V11,V12) = 1+ append(W13,X13,Y13):4+ ge(V,Z13,A14):1+ if(Y13,B14,C14,V,D14,C14):6
     [W13>=Y13,C14>=X13,V>=0,Y13>=1,X13>=1,C14=V11+X13,W13+X13=V13,D14=0,B14=1,A14=1,Z13=0,V1=0] 
* CE 83: start(V,V1,V13,V11,V12) = 1+ append(W13,X13,Y13):4+ ge(V,V1,Z13):2+ if(Y13,A14,B14,V,V1,C14):1
     [W13>=Y13,B14>=X13,V1>=0,V>=0,Y13>=1,X13>=1,B14=V11+X13,W13+X13=V13,C14=0,A14=0,Z13=0] 
* CE 84: start(V,V1,V13,V11,V12) = 1+ append(W13,X13,Y13):4+ ge(V,Z13,A14):2+ if(Y13,B14,C14,V,D14,E14):2
     [Y13+C14>=E14,E14>=C14+1,W13>=Y13,C14>=X13,V>=0,X13>=1,C14=V11+X13,W13+X13=V13,D14=0,B14=0,A14=0,Z13=0,V1=0] 
* CE 85: start(V,V1,V13,V11,V12) = 1+ append(W13,X13,Y13):4+ ge(V,Z13,A14):2+ if(Y13,B14,C14,V,D14,E14):3
     [E14>=C14+2,W13>=Y13,C14>=X13,V>=0,Y13>=1,X13>=1,C14=V11+X13,W13+X13=V13,D14=0,B14=0,A14=0,Z13=0,V1=0] 
* CE 86: start(V,V1,V13,V11,V12) = 1+ append(W13,X13,Y13):4+ ge(V,V1,Z13):2+ if(Y13,A14,B14,V,V1,C14):4
     [Y13+B14>=C14,V+1>=V1,C14>=B14+1,W13>=Y13,B14>=X13,V1>=1,X13>=1,B14=V11+X13,W13+X13=V13,A14=0,Z13=0] 
* CE 87: start(V,V1,V13,V11,V12) = 1+ append(W13,X13,Y13):4+ ge(V,V1,Z13):2+ if(Y13,A14,B14,V,V1,C14):5
     [V+C14>=V1+B14,C14>=B14+2,W13>=Y13,B14>=X13,V1>=1,V>=0,Y13>=1,X13>=1,B14=V11+X13,W13+X13=V13,A14=0,Z13=0] 
* CE 88: start(V,V1,V13,V11,V12) = 1+ append(W13,X13,Y13):4+ ge(V,V1,Z13):2+ if(Y13,A14,B14,V,V1,C14):7
     [W13>=Y13,B14>=X13,V1>=0,V>=0,Y13>=1,X13>=1,B14=V11+X13,W13+X13=V13,A14=0,Z13=0] 
* CE 89: start(V,V1,V13,V11,V12) = 1+ append(W13,X13,Y13):4+ ge(V,V1,Z13):3+ if(Y13,A14,B14,V,V1,C14):1
     [V>=V1,W13>=Y13,B14>=X13,V1>=1,Y13>=1,X13>=1,B14=V11+X13,W13+X13=V13,C14=0,A14=1,Z13=1] 
* CE 90: start(V,V1,V13,V11,V12) = 1+ append(W13,X13,Y13):4+ ge(V,V1,Z13):3+ if(Y13,A14,B14,V,V1,B14):6
     [V>=V1,W13>=Y13,B14>=X13,V1>=1,Y13>=1,X13>=1,B14=V11+X13,W13+X13=V13,A14=1,Z13=1] 
* CE 91: start(V,V1,V13,V11,V12) = 0+ ge(V,W13,X13):1
     [V>=0,X13=1,W13=0,V1=0] 
* CE 92: start(V,V1,V13,V11,V12) = 0+ ge(V,V1,W13):2
     [V1>=0,V>=0,W13=0] 
* CE 93: start(V,V1,V13,V11,V12) = 0+ ge(V,V1,W13):3
     [V>=V1,V1>=1,W13=1] 
* CE 94: start(V,V1,V13,V11,V12) = 0+ rev(V,W13):1
     [V>=0,W13=0] 
* CE 95: start(V,V1,V13,V11,V12) = 0+ if(V,V1,V13,V11,V12,W13):1
     [V12>=0,V11>=0,V13>=0,V1>=0,V>=0,W13=0] 
* CE 96: start(V,V1,V13,V11,V12) = 0+ if(V,W13,V13,V11,X13,Y13):2
     [V+V13>=Y13,Y13>=V13+1,V11>=0,V13>=0,X13=0,W13=0,V12=0,V1=0] 
* CE 97: start(V,V1,V13,V11,V12) = 0+ if(V,W13,V13,V11,X13,Y13):3
     [Y13>=V13+2,V11>=0,V13>=0,V>=1,X13=0,W13=0,V12=0,V1=0] 
* CE 98: start(V,V1,V13,V11,V12) = 0+ if(V,W13,V13,V11,V12,X13):4
     [V+V13>=X13,V11+1>=V12,X13>=V13+1,V12>=1,V13>=0,W13=0,V1=0] 
* CE 99: start(V,V1,V13,V11,V12) = 0+ if(V,W13,V13,V11,V12,X13):5
     [V11+X13>=V13+V12,X13>=V13+2,V12>=1,V11>=0,V13>=0,V>=1,W13=0,V1=0] 
* CE 100: start(V,V1,V13,V11,V12) = 0+ if(V,W13,V13,V11,V12,V13):6
     [V13>=0,V12>=0,V11>=0,V>=0,W13=1,V1=1] 
* CE 101: start(V,V1,V13,V11,V12) = 0+ if(V,W13,V13,V11,V12,X13):7
     [V12>=0,V11>=0,V13>=0,V>=1,W13=0,V1=0] 
* CE 102: start(V,V1,V13,V11,V12) = 0+ append(W13,V1,V1):1
     [V1>=0,W13=0,V=0] 
* CE 103: start(V,V1,V13,V11,V12) = 0+ append(V,V1,W13):2
     [V1>=0,V>=0,W13=0] 
* CE 104: start(V,V1,V13,V11,V12) = 0+ append(V,W13,X13):3
     [X13>=V,V>=1,X13=V+W13,X13=V+V1] 
* CE 105: start(V,V1,V13,V11,V12) = 0+ append(V,V1,W13):4
     [V>=W13,W13>=1,V1>=0] 
* CE 106: start(V,V1,V13,V11,V12) = 0+ length(V,W13):1
     [V>=0,W13=0] 
* CE 107: start(V,V1,V13,V11,V12) = 0+ length(V,W13):2
     [V>=W13,W13>=1] 

### Cost equations --> "Loop" of start/5 
* CEs [100] --> Loop 37 
* CEs [56,57,59,60,66,67,71,72,74,75,81,82,84,85,91,96,97,98,99] --> Loop 38 
* CEs [55,58,61,62,64,65,68,69,70,73,76,77,79,80,83,86,87,89,90,92,93,94,95,102,103,104,105,106,107] --> Loop 39 
* CEs [63,78,88] --> Loop 40 
* CEs [101] --> Loop 41 

#### Loops of start/5 
* Loop 37: start(V,V1,V13,V11,V12) [V12>=0,V11>=0,V13>=0,V>=0,V1=1] 
* Loop 38: start(V,V1,V13,V11,V12) [V>=0,V1=0] 
* Loop 39: start(V,V1,V13,V11,V12) [V>=0] 
* Loop 40: start(V,V1,V13,V11,V12) [V11>=0,V13>=1,V1>=0,V>=0] 
* Loop 41: start(V,V1,V13,V11,V12) [V12>=0,V11>=0,V13>=0,V>=1,V1=0] 

### Ranking functions of CR start(V,V1,V13,V11,V12) 

#### Partial ranking functions of CR start(V,V1,V13,V11,V12) 


### Resulting Chains:start(V,V1,V13,V11,V12) 
* [41]...
* [40]...
* [39]
* [38]
* [37]


### Merging Chains  start/5 into  External patterns of execution 
* [[38],[39]] --> 1 
* [[37]] --> 2 
* [[41]] --> 3 
* [[40]] --> 4 


Computing Bounds
=====================================

#### Cost of loops [14] 

 * loop 14:append(V,V1,Out) -> [append(V',V1',Out')] 
1
#### Cost of phase [14]:append(V,V1,Out) -> [append(V',V1',Out')] 
1*it(14)+0
  Such that:it(14) =< V
it(14) =< V-V'

#### Cost of phase [14]:append(V,V1,Out) -> [append(V',V1',Out')] 
1*it(14)+0
  Such that:it(14) =< V
it(14) =< V-V'

#### Cost of chains of append(V,V1,Out):
* Chain [[14],16]: 1*it(14)+1
  Such that:it(14) =< -V1+Out

  with precondition: [V+V1=Out,V>=1,V1>=0] 

* Chain [[14],15]: 1*it(14)+0
  Such that:it(14) =< Out

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [16]: 1
  with precondition: [V=0,V1=Out,V1>=0] 

* Chain [15]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [17] 

 * loop 17:ge(V,V1,Out) -> [ge(V',V1',Out')] 
1
#### Cost of phase [17]:ge(V,V1,Out) -> [ge(V',V1',Out')] 
1*it(17)+0
  Such that:it(17) =< V
it(17) =< V-V'
it(17) =< V1
it(17) =< V1-V1'

#### Cost of phase [17]:ge(V,V1,Out) -> [ge(V',V1',Out')] 
1*it(17)+0
  Such that:it(17) =< V
it(17) =< V-V'
it(17) =< V1
it(17) =< V1-V1'

#### Cost of chains of ge(V,V1,Out):
* Chain [[17],19]: 1*it(17)+1
  Such that:it(17) =< V1

  with precondition: [Out=0,V>=1,V1>=1] 

* Chain [[17],18]: 1*it(17)+1
  Such that:it(17) =< V1

  with precondition: [Out=1,V1>=1,V>=V1] 

* Chain [19]: 1
  with precondition: [Out=0,V>=0,V1>=0] 

* Chain [18]: 1
  with precondition: [V1=0,Out=1,V>=0] 


#### Cost of loops [23,24,25] 

 * loop 23:if(V,V1,V13,V11,V12,Out) -> [if(V',V1',V13',V11',V12',Out')] 
1*s(4)+1*s(5)+3
  Such that:s(4) =< V'
s(5) =< V12'

 * loop 24:if(V,V1,V13,V11,V12,Out) -> [if(V',V1',V13',V11',V12',Out')] 
1*s(8)+1*s(9)+4
  Such that:s(8) =< V+V13-V13'
s(9) =< V12'

 * loop 25:if(V,V1,V13,V11,V12,Out) -> [if(V',V1',V13',V11',V12',Out')] 
1*s(11)+4
  Such that:s(11) =< V12'

#### Cost of phase [23,24,25]:if(V,V1,V13,V11,V12,Out) -> [if(V',V1',V13',V11',V12',Out')] 
3*it(23)+8*it(24)+1*s(12)+1*s(13)+1*s(14)+2*s(15)+0
  Such that:it(23) =< V-V'
aux(2) =< V12
aux(6) =< V
it(23) =< aux(6)
s(13) =< it(23)*aux(2)
s(12) =< it(23)*aux(6)

#### Cost of phase [23,24,25]:if(V,V1,V13,V11,V12,Out) -> [if(V',V1',V13',V11',V12',Out')] 
3*it(23)+8*it(24)+1*s(12)+1*s(13)+1*s(14)+2*s(15)+0
  Such that:it(23) =< V-V'
aux(2) =< V12
aux(6) =< V
it(23) =< aux(6)
s(13) =< it(23)*aux(2)
s(12) =< it(23)*aux(6)

#### Cost of phase [23,24,25]:if(V,V1,V13,V11,V12,Out) -> [if(V',V1',V13',V11',V12',Out')] 
3*it(23)+8*it(24)+1*s(12)+1*s(13)+1*s(14)+2*s(15)+0
  Such that:it(23) =< V-V'
aux(2) =< V12
aux(6) =< V
it(23) =< aux(6)
s(13) =< it(23)*aux(2)
s(12) =< it(23)*aux(6)

#### Cost of phase [23,24,25]:if(V,V1,V13,V11,V12,Out) -> [if(V',V1',V13',V11',V12',Out')] 
3*it(23)+8*it(24)+1*s(12)+1*s(13)+1*s(14)+2*s(15)+0
  Such that:it(23) =< V-V'
aux(2) =< V12
aux(6) =< V
it(23) =< aux(6)
s(13) =< it(23)*aux(2)
s(12) =< it(23)*aux(6)

#### Cost of phase [23,24,25]:if(V,V1,V13,V11,V12,Out) -> [if(V',V1',V13',V11',V12',Out')] 
3*it(23)+8*it(24)+1*s(12)+1*s(13)+1*s(14)+2*s(15)+0
  Such that:it(23) =< V-V'
aux(2) =< V12
aux(6) =< V
it(23) =< aux(6)
s(13) =< it(23)*aux(2)
s(12) =< it(23)*aux(6)

#### Cost of phase [23,24,25]:if(V,V1,V13,V11,V12,Out) -> [if(V',V1',V13',V11',V12',Out')] 
3*it(23)+8*it(24)+1*s(12)+1*s(13)+1*s(14)+2*s(15)+0
  Such that:it(23) =< V-V'
aux(2) =< V12
aux(6) =< V
it(23) =< aux(6)
s(13) =< it(23)*aux(2)
s(12) =< it(23)*aux(6)

#### Cost of phase [23,24,25]:if(V,V1,V13,V11,V12,Out) -> [if(V',V1',V13',V11',V12',Out')] 
3*it(23)+8*it(24)+1*s(12)+1*s(13)+1*s(14)+2*s(15)+0
  Such that:it(23) =< V-V'
aux(2) =< V12
aux(6) =< V
it(23) =< aux(6)
s(13) =< it(23)*aux(2)
s(12) =< it(23)*aux(6)

#### Cost of phase [23,24,25]:if(V,V1,V13,V11,V12,Out) -> [if(V',V1',V13',V11',V12',Out')] 
3*it(23)+8*it(24)+1*s(12)+1*s(13)+1*s(14)+2*s(15)+0
  Such that:it(23) =< V-V'
aux(2) =< V12
aux(6) =< V
it(23) =< aux(6)
s(13) =< it(23)*aux(2)
s(12) =< it(23)*aux(6)

#### Cost of phase [23,24,25]:if(V,V1,V13,V11,V12,Out) -> [if(V',V1',V13',V11',V12',Out')] 
3*it(23)+8*it(24)+1*s(12)+1*s(13)+1*s(14)+2*s(15)+0
  Such that:it(23) =< V-V'
aux(2) =< V12
aux(6) =< V
it(23) =< aux(6)
s(13) =< it(23)*aux(2)
s(12) =< it(23)*aux(6)

#### Cost of phase [23,24,25]:if(V,V1,V13,V11,V12,Out) -> [if(V',V1',V13',V11',V12',Out')] 
3*it(23)+8*it(24)+1*s(12)+1*s(13)+1*s(14)+2*s(15)+0
  Such that:it(23) =< V-V'
aux(2) =< V12
aux(6) =< V
it(23) =< aux(6)
s(13) =< it(23)*aux(2)
s(12) =< it(23)*aux(6)

#### Cost of phase [23,24,25]:if(V,V1,V13,V11,V12,Out) -> [if(V',V1',V13',V11',V12',Out')] 
3*it(23)+8*it(24)+1*s(12)+1*s(13)+1*s(14)+2*s(15)+0
  Such that:it(23) =< V-V'
aux(2) =< V12
aux(6) =< V
it(23) =< aux(6)
s(13) =< it(23)*aux(2)
s(12) =< it(23)*aux(6)

#### Cost of phase [23,24,25]:if(V,V1,V13,V11,V12,Out) -> [if(V',V1',V13',V11',V12',Out')] 
3*it(23)+8*it(24)+1*s(12)+1*s(13)+1*s(14)+2*s(15)+0
  Such that:it(23) =< V-V'
aux(2) =< V12
aux(6) =< V
it(23) =< aux(6)
s(13) =< it(23)*aux(2)
s(12) =< it(23)*aux(6)

#### Cost of phase [23,24,25]:if(V,V1,V13,V11,V12,Out) -> [if(V',V1',V13',V11',V12',Out')] 
3*it(23)+8*it(24)+1*s(12)+1*s(13)+1*s(14)+2*s(15)+0
  Such that:it(23) =< V-V'
aux(2) =< V12
aux(6) =< V
it(23) =< aux(6)
s(13) =< it(23)*aux(2)
s(12) =< it(23)*aux(6)

#### Cost of phase [23,24,25]:if(V,V1,V13,V11,V12,Out) -> [if(V',V1',V13',V11',V12',Out')] 
3*it(23)+8*it(24)+1*s(12)+1*s(13)+1*s(14)+2*s(15)+0
  Such that:it(23) =< V-V'
aux(2) =< V12
aux(6) =< V
it(23) =< aux(6)
s(13) =< it(23)*aux(2)
s(12) =< it(23)*aux(6)

#### Cost of phase [23,24,25]:if(V,V1,V13,V11,V12,Out) -> [if(V',V1',V13',V11',V12',Out')] 
3*it(23)+8*it(24)+1*s(12)+1*s(13)+1*s(14)+2*s(15)+0
  Such that:it(23) =< V-V'
aux(2) =< V12
aux(6) =< V
it(23) =< aux(6)
s(13) =< it(23)*aux(2)
s(12) =< it(23)*aux(6)

#### Cost of phase [23,24,25]:if(V,V1,V13,V11,V12,Out) -> [if(V',V1',V13',V11',V12',Out')] 
3*it(23)+8*it(24)+1*s(12)+1*s(13)+1*s(14)+2*s(15)+0
  Such that:it(23) =< V-V'
aux(2) =< V12
aux(6) =< V
it(23) =< aux(6)
s(13) =< it(23)*aux(2)
s(12) =< it(23)*aux(6)

#### Cost of phase [23,24,25]:if(V,V1,V13,V11,V12,Out) -> [if(V',V1',V13',V11',V12',Out')] 
3*it(23)+8*it(24)+1*s(12)+1*s(13)+1*s(14)+2*s(15)+0
  Such that:it(23) =< V-V'
aux(2) =< V12
aux(6) =< V
it(23) =< aux(6)
s(13) =< it(23)*aux(2)
s(12) =< it(23)*aux(6)

#### Cost of phase [23,24,25]:if(V,V1,V13,V11,V12,Out) -> [if(V',V1',V13',V11',V12',Out')] 
3*it(23)+8*it(24)+1*s(12)+1*s(13)+1*s(14)+2*s(15)+0
  Such that:it(23) =< V-V'
aux(2) =< V12
aux(6) =< V
it(23) =< aux(6)
s(13) =< it(23)*aux(2)
s(12) =< it(23)*aux(6)

#### Cost of phase [23,24,25]:if(V,V1,V13,V11,V12,Out) -> [if(V',V1',V13',V11',V12',Out')] 
3*it(23)+8*it(24)+1*s(12)+1*s(13)+1*s(14)+2*s(15)+0
  Such that:it(23) =< V-V'
aux(2) =< V12
aux(6) =< V
it(23) =< aux(6)
s(13) =< it(23)*aux(2)
s(12) =< it(23)*aux(6)

#### Cost of chains of if(V,V1,V13,V11,V12,Out):
* Chain [[23,24,25]]...: 3*it(23)+11*it(24)+1*s(12)+1*s(13)+0
  Such that:aux(2) =< V12
aux(7) =< V
it(23) =< aux(7)
s(13) =< it(23)*aux(2)
s(12) =< it(23)*aux(7)

  with precondition: [V13>=0,V>=1,V1=0,V11>=0,V12>=0] 

* Chain [[23,24,25],33]: 3*it(23)+11*it(24)+1*s(12)+1*s(13)+1
  Such that:aux(2) =< V12
aux(8) =< V
it(23) =< aux(8)
s(13) =< it(23)*aux(2)
s(12) =< it(23)*aux(8)

  with precondition: [V1=0,Out=0,V>=1,V13>=0,V11>=0,V12>=0] 

* Chain [[23,24,25],31,33]: 3*it(23)+11*it(24)+1*s(12)+4
  Such that:aux(9) =< V
it(23) =< aux(9)
s(12) =< it(23)*aux(9)

  with precondition: [V1=0,V12=0,Out=0,V>=1,V13>=0,V11>=0] 

* Chain [[23,24,25],31,32]: 3*it(23)+11*it(24)+1*s(12)+4
  Such that:aux(10) =< V
it(23) =< aux(10)
s(12) =< it(23)*aux(10)

  with precondition: [V1=0,V12=0,V>=1,V13>=0,V11>=0,Out>=V13+2] 

* Chain [[23,24,25],30,33]: 3*it(23)+11*it(24)+1*s(12)+5
  Such that:aux(11) =< V
it(23) =< aux(11)
s(12) =< it(23)*aux(11)

  with precondition: [V1=0,V12=0,Out=0,V>=1,V13>=0,V11>=0] 

* Chain [[23,24,25],30,32]: 3*it(23)+11*it(24)+1*s(12)+5
  Such that:aux(12) =< V
it(23) =< aux(12)
s(12) =< it(23)*aux(12)

  with precondition: [V1=0,V12=0,V>=1,V13>=0,V11>=0,Out>=V13+2] 

* Chain [[23,24,25],29,33]: 4*it(23)+11*it(24)+1*s(12)+5
  Such that:aux(13) =< V
it(23) =< aux(13)
s(12) =< it(23)*aux(13)

  with precondition: [V1=0,V12=0,Out=0,V>=2,V13>=0,V11>=0] 

* Chain [[23,24,25],29,32]: 4*it(23)+11*it(24)+1*s(12)+5
  Such that:aux(14) =< V
it(23) =< aux(14)
s(12) =< it(23)*aux(14)

  with precondition: [V1=0,V12=0,V>=2,V13>=0,V11>=0,Out>=V13+2] 

* Chain [[23,24,25],28,33]: 4*it(23)+11*it(24)+1*s(12)+4
  Such that:aux(15) =< V
it(23) =< aux(15)
s(12) =< it(23)*aux(15)

  with precondition: [V1=0,V12=0,Out=0,V>=2,V13>=0,V11>=0] 

* Chain [[23,24,25],28,32]: 4*it(23)+11*it(24)+1*s(12)+4
  Such that:aux(16) =< V
it(23) =< aux(16)
s(12) =< it(23)*aux(16)

  with precondition: [V1=0,V12=0,V>=2,V13>=0,V11>=0,Out>=V13+2] 

* Chain [[23,24,25],27,33]: 3*it(23)+11*it(24)+1*s(12)+1*s(13)+1*s(19)+4
  Such that:aux(17) =< V
aux(18) =< V12
it(23) =< aux(17)
s(19) =< aux(18)
s(13) =< it(23)*aux(18)
s(12) =< it(23)*aux(17)

  with precondition: [V1=0,Out=0,V>=1,V13>=0,V11>=0,V12>=0] 

* Chain [[23,24,25],26,33]: 3*it(23)+11*it(24)+1*s(12)+1*s(13)+1*s(20)+4
  Such that:aux(19) =< V
aux(20) =< V12
it(23) =< aux(19)
s(20) =< aux(20)
s(13) =< it(23)*aux(20)
s(12) =< it(23)*aux(19)

  with precondition: [V1=0,Out=0,V>=1,V13>=0,V11>=0,V12>=1] 

* Chain [[23,24,25],26,32]: 3*it(23)+11*it(24)+1*s(12)+1*s(13)+1*s(20)+4
  Such that:aux(21) =< V
aux(22) =< V12
it(23) =< aux(21)
s(20) =< aux(22)
s(13) =< it(23)*aux(22)
s(12) =< it(23)*aux(21)

  with precondition: [V1=0,V>=1,V13>=0,V11>=0,V12>=1,Out>=V13+2,Out+V11>=V12+V13] 

* Chain [[23,24,25],22,33]: 3*it(23)+11*it(24)+1*s(12)+1*s(13)+1*s(21)+5
  Such that:aux(23) =< V
aux(24) =< V12
it(23) =< aux(23)
s(21) =< aux(24)
s(13) =< it(23)*aux(24)
s(12) =< it(23)*aux(23)

  with precondition: [V1=0,Out=0,V>=1,V13>=0,V11>=0,V12>=1] 

* Chain [[23,24,25],22,32]: 3*it(23)+11*it(24)+1*s(12)+1*s(13)+1*s(21)+5
  Such that:aux(25) =< V
aux(26) =< V12
it(23) =< aux(25)
s(21) =< aux(26)
s(13) =< it(23)*aux(26)
s(12) =< it(23)*aux(25)

  with precondition: [V1=0,V>=1,V13>=0,V11>=0,V12>=1,Out>=V13+2,Out+V11>=V12+V13] 

* Chain [[23,24,25],21,33]: 4*it(23)+11*it(24)+1*s(12)+1*s(13)+1*s(23)+5
  Such that:aux(27) =< V
aux(28) =< V12
it(23) =< aux(27)
s(23) =< aux(28)
s(13) =< it(23)*aux(28)
s(12) =< it(23)*aux(27)

  with precondition: [V1=0,Out=0,V>=2,V13>=0,V11>=0,V12>=1] 

* Chain [[23,24,25],21,32]: 4*it(23)+11*it(24)+1*s(12)+1*s(13)+1*s(23)+5
  Such that:aux(29) =< V
aux(30) =< V12
it(23) =< aux(29)
s(23) =< aux(30)
s(13) =< it(23)*aux(30)
s(12) =< it(23)*aux(29)

  with precondition: [V1=0,V>=2,V13>=0,V11>=0,V12>=1,Out>=V13+2,Out+V11>=V12+V13] 

* Chain [[23,24,25],20,33]: 4*it(23)+11*it(24)+1*s(12)+1*s(13)+1*s(25)+4
  Such that:aux(31) =< V
aux(32) =< V12
it(23) =< aux(31)
s(25) =< aux(32)
s(13) =< it(23)*aux(32)
s(12) =< it(23)*aux(31)

  with precondition: [V1=0,Out=0,V>=2,V13>=0,V11>=0,V12>=1] 

* Chain [[23,24,25],20,32]: 4*it(23)+11*it(24)+1*s(12)+1*s(13)+1*s(25)+4
  Such that:aux(33) =< V
aux(34) =< V12
it(23) =< aux(33)
s(25) =< aux(34)
s(13) =< it(23)*aux(34)
s(12) =< it(23)*aux(33)

  with precondition: [V1=0,V>=2,V13>=0,V11>=0,V12>=1,Out>=V13+2,Out+V11>=V12+V13] 

* Chain [33]: 1
  with precondition: [Out=0,V>=0,V1>=0,V13>=0,V11>=0,V12>=0] 

* Chain [32]: 1
  with precondition: [V1=1,V13=Out,V>=0,V13>=0,V11>=0,V12>=0] 

* Chain [31,33]: 4
  with precondition: [V1=0,V12=0,Out=0,V>=1,V13>=0,V11>=0] 

* Chain [31,32]: 4
  with precondition: [V1=0,V12=0,V13>=0,V11>=0,Out>=V13+1,V+V13>=Out] 

* Chain [30,33]: 5
  with precondition: [V1=0,V12=0,Out=0,V>=1,V13>=0,V11>=0] 

* Chain [30,32]: 5
  with precondition: [V1=0,V12=0,Out=V+V13,V13>=0,V11>=0,Out>=V13+1] 

* Chain [29,33]: 1*s(17)+5
  Such that:s(17) =< V

  with precondition: [V1=0,V12=0,Out=0,V>=2,V13>=0,V11>=0] 

* Chain [29,32]: 1*s(17)+5
  Such that:s(17) =< V+V13-Out

  with precondition: [V1=0,V12=0,V13>=0,V11>=0,Out>=V13+1,V+V13>=Out+1] 

* Chain [28,33]: 1*s(18)+4
  Such that:s(18) =< V

  with precondition: [V1=0,V12=0,Out=0,V>=2,V13>=0,V11>=0] 

* Chain [28,32]: 1*s(18)+4
  Such that:s(18) =< V+V13-Out

  with precondition: [V1=0,V12=0,V13>=0,V11>=0,Out>=V13+1,V+V13>=Out+1] 

* Chain [27,33]: 1*s(19)+4
  Such that:s(19) =< V12

  with precondition: [V1=0,Out=0,V>=1,V13>=0,V11>=0,V12>=0] 

* Chain [26,33]: 1*s(20)+4
  Such that:s(20) =< V12

  with precondition: [V1=0,Out=0,V>=1,V13>=0,V12>=1,V11+1>=V12] 

* Chain [26,32]: 1*s(20)+4
  Such that:s(20) =< V12

  with precondition: [V1=0,V13>=0,V12>=1,Out>=V13+1,V11+1>=V12,V+V13>=Out] 

* Chain [22,33]: 1*s(21)+5
  Such that:s(21) =< V12

  with precondition: [V1=0,Out=0,V>=1,V13>=0,V12>=1,V11+1>=V12] 

* Chain [22,32]: 1*s(21)+5
  Such that:s(21) =< V12

  with precondition: [V1=0,Out=V+V13,V13>=0,V12>=1,Out>=V13+1,V11+1>=V12] 

* Chain [21,33]: 1*s(22)+1*s(23)+5
  Such that:s(22) =< V
s(23) =< V12

  with precondition: [V1=0,Out=0,V>=2,V13>=0,V12>=1,V11+1>=V12] 

* Chain [21,32]: 1*s(22)+1*s(23)+5
  Such that:s(22) =< V+V13-Out
s(23) =< V12

  with precondition: [V1=0,V13>=0,V12>=1,Out>=V13+1,V11+1>=V12,V+V13>=Out+1] 

* Chain [20,33]: 1*s(24)+1*s(25)+4
  Such that:s(24) =< V
s(25) =< V12

  with precondition: [V1=0,Out=0,V>=2,V13>=0,V12>=1,V11+1>=V12] 

* Chain [20,32]: 1*s(24)+1*s(25)+4
  Such that:s(24) =< V+V13-Out
s(25) =< V12

  with precondition: [V1=0,V13>=0,V12>=1,Out>=V13+1,V11+1>=V12,V+V13>=Out+1] 


#### Cost of loops [34] 

 * loop 34:length(V,Out) -> [length(V',Out')] 
1
#### Cost of phase [34]:length(V,Out) -> [length(V',Out')] 
1*it(34)+0
  Such that:it(34) =< V
it(34) =< V-V'

#### Cost of chains of length(V,Out):
* Chain [[34],35]: 1*it(34)+1
  Such that:it(34) =< V

  with precondition: [Out>=1,V>=Out] 

* Chain [35]: 1
  with precondition: [Out=0,V>=0] 


#### Cost of chains of rev(V,Out):
* Chain [36]: 177*s(146)+52*s(149)+440*s(150)+8
  Such that:aux(46) =< V
s(146) =< aux(46)
s(149) =< s(146)*aux(46)

  with precondition: [Out=0,V>=0] 


#### Cost of chains of start(V,V1,V13,V11,V12):
* Chain [41]...: 3*s(179)+1*s(180)+1*s(181)+11*s(182)+0
  Such that:s(178) =< V
s(177) =< V12
s(179) =< s(178)
s(180) =< s(179)*s(177)
s(181) =< s(179)*s(178)

  with precondition: [V1=0,V>=1,V13>=0,V11>=0,V12>=0] 

* Chain [40]...: 3*s(183)+11*s(186)+3*s(187)+3*s(188)+33*s(189)+3
  Such that:aux(52) =< V1
aux(53) =< V13
s(183) =< aux(52)
s(186) =< aux(53)
s(187) =< s(186)*aux(52)
s(188) =< s(186)*aux(53)

  with precondition: [V>=0,V1>=0,V13>=1,V11>=0] 

* Chain [39]: 124*s(206)+286*s(209)+48*s(211)+72*s(212)+1562*s(213)+218*s(326)+62*s(327)+10*s(332)+6*s(333)+8
  Such that:s(330) =< V12
aux(76) =< V
aux(77) =< V1
aux(78) =< V13
s(326) =< aux(76)
s(206) =< aux(77)
s(209) =< aux(78)
s(327) =< s(326)*aux(76)
s(332) =< s(330)
s(333) =< s(326)*s(330)
s(211) =< s(209)*aux(77)
s(212) =< s(209)*aux(78)

  with precondition: [V>=0] 

* Chain [38]: 170*s(341)+42*s(344)+660*s(345)+32*s(400)+8*s(403)+8*s(408)+4*s(413)+8
  Such that:aux(86) =< V
aux(87) =< V13
aux(88) =< V12
s(341) =< aux(87)
s(400) =< aux(86)
s(403) =< s(400)*aux(86)
s(408) =< aux(88)
s(413) =< s(400)*aux(88)
s(344) =< s(341)*aux(87)

  with precondition: [V1=0,V>=0] 

* Chain [37]: 1
  with precondition: [V1=1,V>=0,V13>=0,V11>=0,V12>=0] 


Closed-form bounds of start(V,V1,V13,V11,V12): 
-------------------------------------
* Chain [41]... with precondition: [V1=0,V>=1,V13>=0,V11>=0,V12>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [40]... with precondition: [V>=0,V1>=0,V13>=1,V11>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [39] with precondition: [V>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [38] with precondition: [V1=0,V>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [37] with precondition: [V1=1,V>=0,V13>=0,V11>=0,V12>=0] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V,V1,V13,V11,V12): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 76 ms.
* Invariants computed in 755 ms.
   - Backward Invariants 451 ms.
   - Transitive Invariants 29 ms.
* Refinement performed in 1172 ms.
* Termination proved in 33 ms.
* Upper bounds computed in 1352 ms.
   - Equation cost structures 501 ms.
   - Phase cost structures 203 ms.
   - Chain cost structures 392 ms.
   - Solving cost expressions 8 ms.
* Total analysis performed in 3508 ms.


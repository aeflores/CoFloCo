
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [fun/1]
1. recursive  : [plus/3]
2. recursive [non_tail] : [times/3]
3. recursive  : [le/3]
4. recursive  : [gen/2,if1/3,if2/3,if3/4]
5. non_recursive  : [table/1]
6. non_recursive  : [start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is partially evaluated into plus/3
2. SCC is partially evaluated into times/3
3. SCC is partially evaluated into le/3
4. SCC is partially evaluated into if2/3
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations plus/3 
* CE 24 is refined into CE [25] 
* CE 23 is refined into CE [26] 


#### Refined cost equations plus/3 
* CE 25: plus(V,V2,Out) = 1+ plus(W2,V2,X2)
     [W2>=0,V2>=0,X2+1=Out,W2+1=V] 
* CE 26: plus(A,B,B) = 1
     [B>=0,A=0] 

### Cost equations --> "Loop" of plus/3 
* CEs [26] --> Loop 12 
* CEs [25] --> Loop 13 

#### Loops of plus/3 
* Loop 12: plus(A,B,B) [B>=0,A=0] 
* Loop 13: plus(V,V2,Out)->  plus(V',V2,Out')
                  [V'>=0,V2>=0,Out=Out'+1,V'+1=V] 

### Ranking functions of CR plus(V,V2,Out) 
* RF of phase [13]: [V]

#### Partial ranking functions of CR plus(V,V2,Out) 
* Partial RF of phase [13]:
  - RF of loop [13:1]:
    V


### Resulting Chains:plus(V,V2,Out) 
* [[13],12]
* [12]


### Merging Chains  plus/3 into  External patterns of execution 
* [[12]] --> 1 
* [[12,[13]]] --> 2 


### Specialization of cost equations times/3 
* CE 22 is refined into CE [27,28] 
* CE 21 is refined into CE [29] 


#### Refined cost equations times/3 
* CE 27: times(V,V2,Out) = 1+ times(W2,X2,Out)+ plus(Y2,Out,Out):1
     [W2>=0,Out>=0,W2+1=V,X2=0,Y2=0,V2=0] 
* CE 28: times(V,V2,Out) = 1+ times(W2,V2,X2)+ plus(V2,Y2,Out):2
     [Out>=V2,W2>=0,V2>=1,Out=V2+X2,Out=V2+Y2,W2+1=V] 
* CE 29: times(V,V2,Out) = 1
     [V2>=0,Out=0,V=0] 

### Cost equations --> "Loop" of times/3 
* CEs [29] --> Loop 14 
* CEs [28] --> Loop 15 
* CEs [27] --> Loop 16 

#### Loops of times/3 
* Loop 14: times(V,V2,Out) [V2>=0,Out=0,V=0] 
* Loop 15: times(V,V2,Out)->  times(V',V2,Out')
                  [Out>=V2,V2>=1,V>=1,V2+Out'=Out,V=V'+1] 
* Loop 16: times(V,V2,Out)->  times(V',V2',Out)
                  [Out>=0,V>=1,V=V'+1,V2'=0,V2=0] 

### Ranking functions of CR times(V,V2,Out) 
* RF of phase [15]: [V]
* RF of phase [16]: [V]

#### Partial ranking functions of CR times(V,V2,Out) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    V
* Partial RF of phase [16]:
  - RF of loop [16:1]:
    V


### Resulting Chains:times(V,V2,Out) 
* [[16],14]
* [[15],14]
* [14]


### Merging Chains  times/3 into  External patterns of execution 
* [[14]] --> 1 
* [[14,[16]]] --> 2 
* [[14,[15]]] --> 3 


### Specialization of cost equations le/3 
* CE 17 is refined into CE [30] 
* CE 16 is refined into CE [31] 
* CE 15 is refined into CE [32] 


#### Refined cost equations le/3 
* CE 30: le(V,V2,Out) = 1+ le(W2,X2,Out)
     [X2>=0,W2>=0,X2+1=V2,W2+1=V] 
* CE 31: le(V,V2,Out) = 1
     [V>=1,Out=0,V2=0] 
* CE 32: le(V,V2,Out) = 1
     [V2>=0,Out=1,V=0] 

### Cost equations --> "Loop" of le/3 
* CEs [31] --> Loop 17 
* CEs [32] --> Loop 18 
* CEs [30] --> Loop 19 

#### Loops of le/3 
* Loop 17: le(V,V2,Out) [V>=1,Out=0,V2=0] 
* Loop 18: le(V,V2,Out) [V2>=0,Out=1,V=0] 
* Loop 19: le(V,V2,Out)->  le(V',V2',Out)
                  [V2'>=0,V'>=0,V2'+1=V2,V'+1=V] 

### Ranking functions of CR le(V,V2,Out) 
* RF of phase [19]: [V,V2]

#### Partial ranking functions of CR le(V,V2,Out) 
* Partial RF of phase [19]:
  - RF of loop [19:1]:
    V
    V2


### Resulting Chains:le(V,V2,Out) 
* [[19],18]
* [[19],17]
* [18]
* [17]


### Merging Chains  le/3 into  External patterns of execution 
* [[18]] --> 1 
* [[17]] --> 2 
* [[17,[19]]] --> 3 
* [[18,[19]]] --> 4 


### Specialization of cost equations if2/3 
* CE 20 is refined into CE [33,34,35,36] 
* CE 18 is refined into CE [37] 
* CE 19 is refined into CE [38] 


#### Refined cost equations if2/3 
* CE 33: if2(V,V2,Out) = 3+ le(W2,X2,Y2):1+ times(Z2,A3,B3):1+ if2(C3,D3,E3)
     [Out=E3+2,D3=1,C3=0,B3=0,A3=0,Z2=0,Y2=1,X2=10,W2=0,V2=0,V=0] 
* CE 34: if2(V,V2,Out) = 3+ le(W2,X2,Y2):1+ times(V,Z2,A3):2+ if2(V,B3,C3)
     [V>=1,V+C3+2=Out,B3=1,A3=0,Z2=0,Y2=1,X2=10,W2=0,V2=0] 
* CE 35: if2(V,V2,Out) = 3+ le(V2,W2,X2):4+ times(Y2,V2,Z2):1+ if2(A3,B3,C3)
     [V2>=1,10>=V2,V2+C3+2=Out,V2+1=B3,A3=0,Z2=0,Y2=0,X2=1,W2=10,V=0] 
* CE 36: if2(V,V2,Out) = 3+ le(V2,W2,X2):4+ times(V,V2,Y2):3+ if2(V,Z2,A3)
     [Y2+1>=V+V2,V2>=1,V>=1,10>=V2,V+V2+Y2+A3+2=Out,V2+1=Z2,X2=1,W2=10] 
* CE 37: if2(V,V2,Out) = 6+ le(V2,W2,X2):3+ le(Y2,Z2,A3):4+ if2(Y2,Y2,Out)
     [Y2>=1,V2>=11,10>=Y2,Y2=V+1,A3=1,Z2=10,X2=0,W2=10] 
* CE 38: if2(V,V2,Out) = 6+ le(V2,W2,X2):3+ le(Y2,Z2,A3):3
     [Y2>=11,V2>=11,Y2=V+1,A3=0,Z2=10,X2=0,W2=10,Out=0] 

### Cost equations --> "Loop" of if2/3 
* CEs [38] --> Loop 20 
* CEs [36] --> Loop 21 
* CEs [37] --> Loop 22 
* CEs [34] --> Loop 23 
* CEs [35] --> Loop 24 
* CEs [33] --> Loop 25 

#### Loops of if2/3 
* Loop 20: if2(V,V2,Out) [V2>=11,V>=10,Out=0] 
* Loop 21: if2(V,V2,Out)->  if2(V,V2',Out')
                  [Out>=2*V+2*V2+Out'+1,V2>=1,V>=1,10>=V2,V2+1=V2'] 
* Loop 22: if2(V,V2,Out)->  if2(V',V2',Out)
                  [V2>=11,V>=0,9>=V,V+1=V2',V+1=V'] 
* Loop 23: if2(V,V2,Out)->  if2(V,V2',Out')
                  [V>=1,V+Out'+2=Out,V2'=1,V2=0] 
* Loop 24: if2(V,V2,Out)->  if2(V',V2',Out')
                  [V2>=1,10>=V2,V2+Out'+2=Out,V2+1=V2',V'=0,V=0] 
* Loop 25: if2(V,V2,Out)->  if2(V',V2',Out')
                  [Out=Out'+2,V2'=1,V'=0,V2=0,V=0] 

### Ranking functions of CR if2(V,V2,Out) 
* RF of phase [24]: [-V2+11]

#### Partial ranking functions of CR if2(V,V2,Out) 
* Partial RF of phase [21,22]:
  - RF of loop [21:1]:
    -V2+11 depends on loops [22:1] 
  - RF of loop [22:1]:
    -V+10
    V2-10 depends on loops [21:1] 
* Partial RF of phase [24]:
  - RF of loop [24:1]:
    -V2+11


### Resulting Chains:if2(V,V2,Out) 
* [[24],[21,22],20]
* [[21,22],20]
* [25,[24],[21,22],20]
* [23,[21,22],20]
* [20]


### Merging Chains  if2/3 into  External patterns of execution 
* [[20,[21,22],[24],25]] --> 1 
* [[20,[21,22],[24]]] --> 2 
* [[20,[21,22],23]] --> 3 
* [[20]] --> 4 
* [[20,[21,22]]] --> 5 


### Specialization of cost equations start/3 
* CE 2 is refined into CE [39] 
* CE 3 is refined into CE [40,41] 
* CE 4 is refined into CE [42,43,44] 
* CE 5 is refined into CE [45] 
* CE 6 is refined into CE [46] 
* CE 7 is refined into CE [47] 
* CE 8 is refined into CE [48,49,50,51,52] 
* CE 9 is refined into CE [53] 
* CE 10 is discarded (unfeasible) 
* CE 11 is refined into CE [54,55,56,57,58] 
* CE 12 is refined into CE [59,60,61,62] 
* CE 13 is refined into CE [63,64] 
* CE 14 is refined into CE [65,66,67] 


#### Refined cost equations start/3 
* CE 39: start(V,V2,V8) = 4+ le(W8,X8,Y8):4+ if2(W8,W8,Z8):5
     [Z8>=41,W8>=1,V8>=0,10>=W8,W8=V2+1,Y8=1,X8=10,V=0] 
* CE 40: start(V,V2,V8) = 3+ le(W8,X8,Y8):1+ if2(Z8,A9,B9):1
     [A9=0,Z8=0,Y8=1,X8=10,W8=0,V=0] 
* CE 41: start(V,V2,V8) = 3+ le(V,W8,X8):4+ if2(V,V,Y8):5
     [Y8>=41,V>=1,10>=V,X8=1,W8=10] 
* CE 42: start(V,V2,V8) = 1+ if2(W8,X8,Y8):1
     [X8=0,W8=0,V2=0,V=1] 
* CE 43: start(V,V2,V8) = 1+ if2(V2,V2,W8):4
     [V2>=11,W8=0,V=1] 
* CE 44: start(V,V2,V8) = 1+ if2(V2,V2,W8):5
     [W8>=2*V2+21,W8>=41,V2>=1,V=1] 
* CE 45: start(V,V2,V8) = 4+ le(W8,X8,Y8):3
     [W8>=11,V8>=0,W8=V2+1,Y8=0,X8=10,V=0] 
* CE 46: start(V,V2,V8) = 3+ le(V,W8,X8):3
     [V>=11,X8=0,W8=10] 
* CE 47: start(V,V2,V8) = 1
     [] 
* CE 48: start(V,V2,V8) = 1+ times(W8,X8,Y8):1+ if2(Z8,A9,B9):2
     [A9>=1,10>=A9,A9=X8+1,A9=V8+1,Z8=0,Y8=0,W8=0,V2=0,V=1] 
* CE 49: start(V,V2,V8) = 1+ times(W8,X8,Y8):1+ if2(Z8,A9,B9):5
     [B9>=41,A9>=11,A9=X8+1,A9=V8+1,Z8=0,Y8=0,W8=0,V2=0,V=1] 
* CE 50: start(V,V2,V8) = 1+ times(V2,W8,X8):2+ if2(V2,Y8,Z8):5
     [Z8>=2*V2+21,Z8>=41,V2>=1,Y8=1,X8=0,W8=0,V8=0,V=1] 
* CE 51: start(V,V2,V8) = 1+ times(V2,W8,X8):3+ if2(V2,Y8,Z8):4
     [X8+2>=V2+Y8,Y8>=11,V2>=10,Y8=W8+1,Y8=V8+1,Z8=0,V=1] 
* CE 52: start(V,V2,V8) = 1+ times(V2,W8,X8):3+ if2(V2,Y8,Z8):5
     [X8+2>=V2+Y8,Z8>=2*V2+21,Z8>=41,Y8>=2,V2>=1,Y8=W8+1,Y8=V8+1,V=1] 
* CE 53: start(V,V2,V8) = 4+ le(W8,X8,Y8):4+ if2(Z8,A9,B9):5
     [B9>=41,A9=1,Z8=1,Y8=1,X8=10,W8=1] 
* CE 54: start(V,V2,V8) = 0+ if2(W8,X8,Y8):1
     [X8=0,W8=0,V2=0,V=0] 
* CE 55: start(V,V2,V8) = 0+ if2(W8,V2,X8):2
     [V2>=1,10>=V2,W8=0,V=0] 
* CE 56: start(V,V2,V8) = 0+ if2(V,W8,X8):3
     [X8>=V+43,X8>=3*V+23,V>=1,W8=0,V2=0] 
* CE 57: start(V,V2,V8) = 0+ if2(V,V2,W8):4
     [V2>=11,V>=10,W8=0] 
* CE 58: start(V,V2,V8) = 0+ if2(V,V2,W8):5
     [V2+10*V>=11,W8>=2*V+21,W8>=41,V2>=1,V>=0] 
* CE 59: start(V,V2,V8) = 0+ le(W8,V2,X8):1
     [V2>=0,X8=1,W8=0,V=0] 
* CE 60: start(V,V2,V8) = 0+ le(V,W8,X8):2
     [V>=1,X8=0,W8=0,V2=0] 
* CE 61: start(V,V2,V8) = 0+ le(V,V2,W8):3
     [V>=V2+1,V2>=1,W8=0] 
* CE 62: start(V,V2,V8) = 0+ le(V,V2,W8):4
     [V2>=V,V>=1,W8=1] 
* CE 63: start(V,V2,V8) = 0+ plus(W8,V2,V2):1
     [V2>=0,W8=0,V=0] 
* CE 64: start(V,V2,V8) = 0+ plus(V,W8,X8):2
     [X8>=V,V>=1,X8=V+W8,X8=V+V2] 
* CE 65: start(V,V2,V8) = 0+ times(W8,V2,X8):1
     [V2>=0,X8=0,W8=0,V=0] 
* CE 66: start(V,V2,V8) = 0+ times(V,W8,X8):2
     [V>=1,X8=0,W8=0,V2=0] 
* CE 67: start(V,V2,V8) = 0+ times(V,V2,W8):3
     [W8+1>=V+V2,V2>=1,V>=1] 

### Cost equations --> "Loop" of start/3 
* CEs [39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67] --> Loop 26 

#### Loops of start/3 
* Loop 26: start(V,V2,V8) [] 

### Ranking functions of CR start(V,V2,V8) 

#### Partial ranking functions of CR start(V,V2,V8) 


### Resulting Chains:start(V,V2,V8) 
* [26]


### Merging Chains  start/3 into  External patterns of execution 
* [[26]] --> 1 


Computing Bounds
=====================================

#### Cost of loops [13] 

 * loop 13:plus(V,V2,Out) -> [plus(V',V2',Out')] 
1
#### Cost of phase [13]:plus(V,V2,Out) -> [plus(V',V2',Out')] 
1*it(13)+0
  Such that:it(13) =< V
it(13) =< V-V'

#### Cost of chains of plus(V,V2,Out):
* Chain [[13],12]: 1*it(13)+1
  Such that:it(13) =< -V2+Out

  with precondition: [V+V2=Out,V>=1,V2>=0] 

* Chain [12]: 1
  with precondition: [V=0,V2=Out,V2>=0] 


#### Cost of loops [16] 

 * loop 16:times(V,V2,Out) -> [times(V',V2',Out')] 
2
#### Cost of phase [16]:times(V,V2,Out) -> [times(V',V2',Out')] 
2*it(16)+0
  Such that:it(16) =< V
it(16) =< V-V'

#### Cost of loops [15] 

 * loop 15:times(V,V2,Out) -> [times(V',V2',Out')] 
1*s(2)+2
  Such that:s(2) =< V2'

#### Cost of phase [15]:times(V,V2,Out) -> [times(V',V2',Out')] 
2*it(15)+1*s(3)+0
  Such that:it(15) =< V
it(15) =< V-V'
aux(1) =< V2
s(3) =< it(15)*aux(1)

#### Cost of chains of times(V,V2,Out):
* Chain [[16],14]: 2*it(16)+1
  Such that:it(16) =< V

  with precondition: [V2=0,Out=0,V>=1] 

* Chain [[15],14]: 2*it(15)+1*s(3)+1
  Such that:it(15) =< V
aux(1) =< V2
s(3) =< it(15)*aux(1)

  with precondition: [V>=1,V2>=1,Out+1>=V+V2] 

* Chain [14]: 1
  with precondition: [V=0,Out=0,V2>=0] 


#### Cost of loops [19] 

 * loop 19:le(V,V2,Out) -> [le(V',V2',Out')] 
1
#### Cost of phase [19]:le(V,V2,Out) -> [le(V',V2',Out')] 
1*it(19)+0
  Such that:it(19) =< V
it(19) =< V-V'
it(19) =< V2
it(19) =< V2-V2'

#### Cost of phase [19]:le(V,V2,Out) -> [le(V',V2',Out')] 
1*it(19)+0
  Such that:it(19) =< V
it(19) =< V-V'
it(19) =< V2
it(19) =< V2-V2'

#### Cost of chains of le(V,V2,Out):
* Chain [[19],18]: 1*it(19)+1
  Such that:it(19) =< V

  with precondition: [Out=1,V>=1,V2>=V] 

* Chain [[19],17]: 1*it(19)+1
  Such that:it(19) =< V2

  with precondition: [Out=0,V2>=1,V>=V2+1] 

* Chain [18]: 1
  with precondition: [V=0,Out=1,V2>=0] 

* Chain [17]: 1
  with precondition: [V2=0,Out=0,V>=1] 


#### Cost of loops [21,22] 

 * loop 21:if2(V,V2,Out) -> [if2(V',V2',Out')] 
1*s(12)+2*s(10)+1*s(13)+5
  Such that:s(10) =< V'
s(11) =< V2
s(12) =< s(11)
s(13) =< s(10)*s(11)

 * loop 22:if2(V,V2,Out) -> [if2(V',V2',Out')] 
1*s(16)+1*s(17)+8
  Such that:s(16) =< 10
s(17) =< V+1

#### Cost of phase [21,22]:if2(V,V2,Out) -> [if2(V',V2',Out')] 
5*it(21)+8*it(22)+1*s(18)+2*s(19)+1*s(20)+1*s(22)+1*s(23)+0
  Such that:aux(20) =< 100
aux(11) =< V
aux(8) =< -10*V2+110
aux(6) =< -V2+11
aux(22) =< -V+10
aux(23) =< -V+V'
aux(24) =< V2
aux(14) =< aux(22)
it(22) =< aux(22)
aux(14) =< aux(23)
it(22) =< aux(23)
aux(10) =< aux(11)+it(22)
aux(7) =< it(22)*aux(20)
s(22) =< aux(14)*10
aux(17) =< aux(10)+1
s(23) =< it(22)*aux(17)
aux(5) =< aux(7)* (1/10)
s(21) =< aux(7)+aux(8)
it(21) =< aux(5)+aux(6)
s(11) =< aux(24)+it(21)
s(19) =< it(21)*aux(10)
aux(9) =< s(11)
s(21) =< it(21)*aux(9)
s(18) =< s(21)
s(20) =< s(19)*s(11)

#### Cost of loops [24] 

 * loop 24:if2(V,V2,Out) -> [if2(V',V2',Out')] 
1*s(25)+5
  Such that:s(25) =< V2'

#### Cost of phase [24]:if2(V,V2,Out) -> [if2(V',V2',Out')] 
5*it(24)+1*s(26)+0
  Such that:s(26) =< -11*V2+121
s(26) =< -11*V2+11*V2'
it(24) =< -V2+11
it(24) =< -V2+V2'

#### Cost of chains of if2(V,V2,Out):
* Chain [[24],[21,22],20]: 5*it(21)+8*it(22)+5*it(24)+2*s(4)+1*s(18)+2*s(19)+1*s(20)+1*s(22)+1*s(23)+1*s(26)+8
  Such that:aux(20) =< 100
s(26) =< -11*V2+121
it(24) =< -V2+11
aux(24) =< 2/3*V2+Out/3
aux(23) =< 2/25*V2+Out/25+1/25
aux(26) =< 10
s(4) =< aux(26)
aux(14) =< aux(26)
it(22) =< aux(26)
aux(14) =< aux(23)
it(22) =< aux(23)
aux(10) =< it(22)
aux(7) =< it(22)*aux(20)
s(22) =< aux(14)*10
aux(17) =< aux(10)+1
s(23) =< it(22)*aux(17)
aux(5) =< aux(7)* (1/10)
s(21) =< aux(7)
it(21) =< aux(5)
s(11) =< aux(24)+it(21)
s(19) =< it(21)*aux(10)
aux(9) =< s(11)
s(21) =< it(21)*aux(9)
s(18) =< s(21)
s(20) =< s(19)*s(11)

  with precondition: [V=0,10>=V2,V2>=1] 

* Chain [[21,22],20]: 5*it(21)+8*it(22)+2*s(4)+1*s(18)+2*s(19)+1*s(20)+1*s(22)+1*s(23)+8
  Such that:aux(2) =< 10
aux(20) =< 100
aux(22) =< -V+10
aux(11) =< V
aux(23) =< V/5+3/25*V2+Out/25
aux(8) =< -10*V2+110
aux(6) =< -V2+11
aux(24) =< V2
s(4) =< aux(2)
aux(14) =< aux(22)
it(22) =< aux(22)
aux(14) =< aux(23)
it(22) =< aux(23)
aux(10) =< aux(11)+it(22)
aux(7) =< it(22)*aux(20)
s(22) =< aux(14)*10
aux(17) =< aux(10)+1
s(23) =< it(22)*aux(17)
aux(5) =< aux(7)* (1/10)
s(21) =< aux(7)+aux(8)
it(21) =< aux(5)+aux(6)
s(11) =< aux(24)+it(21)
s(19) =< it(21)*aux(10)
aux(9) =< s(11)
s(21) =< it(21)*aux(9)
s(18) =< s(21)
s(20) =< s(19)*s(11)

  with precondition: [V>=0,V2>=1,Out>=41,Out>=2*V+21,V2+10*V>=11] 

* Chain [25,[24],[21,22],20]: 5*it(21)+8*it(22)+7*it(24)+1*s(18)+2*s(19)+1*s(20)+1*s(22)+1*s(23)+1*s(26)+13
  Such that:aux(20) =< 100
s(26) =< 110
aux(24) =< Out/3
aux(23) =< Out/25+1/25
aux(27) =< 10
it(24) =< aux(27)
aux(14) =< aux(27)
it(22) =< aux(27)
aux(14) =< aux(23)
it(22) =< aux(23)
aux(7) =< it(22)*aux(20)
s(22) =< aux(14)*10
aux(17) =< it(22)+1
s(23) =< it(22)*aux(17)
aux(5) =< aux(7)* (1/10)
s(21) =< aux(7)
it(21) =< aux(5)
s(11) =< aux(24)+it(21)
s(19) =< it(21)*it(22)
aux(9) =< s(11)
s(21) =< it(21)*aux(9)
s(18) =< s(21)
s(20) =< s(19)*s(11)

  with precondition: [V=0,V2=0] 

* Chain [23,[21,22],20]: 5*it(21)+8*it(22)+2*s(4)+1*s(18)+2*s(19)+1*s(20)+1*s(22)+1*s(23)+2*s(27)+13
  Such that:aux(24) =< 1
aux(22) =< -V+10
aux(23) =< 4/25*V+Out/25+1/25
aux(28) =< 10
aux(29) =< 100
aux(30) =< V
s(27) =< aux(30)
s(4) =< aux(28)
aux(14) =< aux(22)
it(22) =< aux(22)
aux(14) =< aux(23)
it(22) =< aux(23)
aux(10) =< aux(30)+it(22)
aux(7) =< it(22)*aux(29)
s(22) =< aux(14)*10
aux(17) =< aux(10)+1
s(23) =< it(22)*aux(17)
aux(5) =< aux(7)* (1/10)
s(21) =< aux(7)+aux(29)
it(21) =< aux(5)+aux(28)
s(11) =< aux(24)+it(21)
s(19) =< it(21)*aux(10)
aux(9) =< s(11)
s(21) =< it(21)*aux(9)
s(18) =< s(21)
s(20) =< s(19)*s(11)

  with precondition: [V2=0,V>=1,Out>=3*V+23,Out>=V+43] 

* Chain [20]: 2*s(4)+8
  Such that:aux(2) =< 10
s(4) =< aux(2)

  with precondition: [Out=0,V>=10,V2>=11] 


#### Cost of chains of start(V,V2,V8):
* Chain [26]: 1*s(28)+99*s(37)+8*s(39)+1*s(42)+1*s(44)+5*s(47)+2*s(49)+1*s(51)+1*s(52)+3*s(54)+6*s(62)+6*s(64)+25*s(67)+10*s(69)+5*s(71)+5*s(72)+9*s(73)+24*s(84)+3*s(87)+3*s(89)+5*s(92)+2*s(94)+1*s(96)+1*s(97)+24*s(130)+3*s(133)+3*s(135)+5*s(138)+2*s(140)+1*s(142)+1*s(143)+1*s(147)+5*s(148)+5*s(186)+2*s(188)+1*s(190)+1*s(191)+7*s(192)+5*s(211)+2*s(213)+1*s(215)+1*s(216)+2*s(219)+5*s(243)+2*s(245)+1*s(247)+1*s(248)+1*s(249)+8*s(260)+1*s(263)+1*s(265)+5*s(268)+2*s(270)+1*s(272)+1*s(273)+1*s(295)+5*s(296)+5*s(333)+2*s(335)+1*s(337)+1*s(338)+5*s(359)+2*s(361)+1*s(363)+1*s(364)+1*s(371)+17
  Such that:s(252) =< 9
s(79) =< -10*V+110
s(80) =< -V+11
s(295) =< -11*V2+121
s(34) =< -10*V2+100
s(31) =< -V2+9
aux(31) =< V2+1
s(147) =< -11*V8+110
aux(42) =< 1
aux(43) =< 10
aux(44) =< 100
aux(45) =< 110
aux(46) =< -V+10
aux(47) =< V
aux(48) =< -10*V2+110
aux(49) =< -V2+10
aux(50) =< -V2+11
aux(51) =< V2
aux(52) =< -10*V8+100
aux(53) =< -V8+10
aux(54) =< V8
aux(55) =< V8+1
s(37) =< aux(43)
s(54) =< aux(45)
s(73) =< aux(47)
s(296) =< aux(50)
s(192) =< aux(51)
s(148) =< aux(53)
s(130) =< aux(49)
s(131) =< aux(51)+s(130)
s(132) =< s(130)*aux(44)
s(133) =< aux(49)*10
s(134) =< s(131)+1
s(135) =< s(130)*s(134)
s(136) =< s(132)* (1/10)
s(210) =< s(132)+aux(44)
s(211) =< s(136)+aux(43)
s(212) =< aux(42)+s(211)
s(213) =< s(211)*s(131)
s(214) =< s(212)
s(210) =< s(211)*s(214)
s(215) =< s(210)
s(216) =< s(213)*s(212)
s(84) =< aux(46)
s(85) =< aux(47)+s(84)
s(86) =< s(84)*aux(44)
s(87) =< aux(46)*10
s(88) =< s(85)+1
s(89) =< s(84)*s(88)
s(90) =< s(86)* (1/10)
s(332) =< s(86)+aux(44)
s(333) =< s(90)+aux(43)
s(334) =< aux(42)+s(333)
s(335) =< s(333)*s(85)
s(336) =< s(334)
s(332) =< s(333)*s(336)
s(337) =< s(332)
s(338) =< s(335)*s(334)
s(249) =< aux(42)
s(260) =< s(252)
s(261) =< aux(42)+s(260)
s(262) =< s(260)*aux(44)
s(263) =< s(252)*10
s(264) =< s(261)+1
s(265) =< s(260)*s(264)
s(266) =< s(262)* (1/10)
s(267) =< s(262)+aux(44)
s(268) =< s(266)+aux(43)
s(269) =< aux(42)+s(268)
s(270) =< s(268)*s(261)
s(271) =< s(269)
s(267) =< s(268)*s(271)
s(272) =< s(267)
s(273) =< s(270)*s(269)
s(28) =< aux(31)
s(39) =< s(31)
s(40) =< aux(31)+s(39)
s(41) =< s(39)*aux(44)
s(42) =< s(31)*10
s(43) =< s(40)+1
s(44) =< s(39)*s(43)
s(45) =< s(41)* (1/10)
s(46) =< s(41)+s(34)
s(47) =< s(45)+aux(49)
s(48) =< aux(31)+s(47)
s(49) =< s(47)*s(40)
s(50) =< s(48)
s(46) =< s(47)*s(50)
s(51) =< s(46)
s(52) =< s(49)*s(48)
s(61) =< s(37)*aux(44)
s(62) =< aux(43)*10
s(63) =< s(37)+1
s(64) =< s(37)*s(63)
s(65) =< s(61)* (1/10)
s(67) =< s(65)
s(69) =< s(67)*s(37)
s(71) =< s(61)
s(91) =< s(86)+s(79)
s(92) =< s(90)+s(80)
s(93) =< aux(47)+s(92)
s(94) =< s(92)*s(85)
s(95) =< s(93)
s(91) =< s(92)*s(95)
s(96) =< s(91)
s(97) =< s(94)*s(93)
s(137) =< s(132)+aux(48)
s(138) =< s(136)+aux(50)
s(139) =< aux(51)+s(138)
s(140) =< s(138)*s(131)
s(141) =< s(139)
s(137) =< s(138)*s(141)
s(142) =< s(137)
s(143) =< s(140)*s(139)
s(219) =< s(192)*aux(54)
s(242) =< s(132)+aux(52)
s(243) =< s(136)+aux(53)
s(244) =< aux(55)+s(243)
s(245) =< s(243)*s(131)
s(246) =< s(244)
s(242) =< s(243)*s(246)
s(247) =< s(242)
s(248) =< s(245)*s(244)
s(358) =< s(86)+aux(48)
s(359) =< s(90)+aux(50)
s(360) =< aux(51)+s(359)
s(361) =< s(359)*s(85)
s(362) =< s(360)
s(358) =< s(359)*s(362)
s(363) =< s(358)
s(364) =< s(361)*s(360)
s(180) =< s(37)*aux(44)
s(184) =< s(180)* (1/10)
s(185) =< s(180)+aux(52)
s(186) =< s(184)+aux(53)
s(187) =< aux(55)+s(186)
s(188) =< s(186)*s(37)
s(189) =< s(187)
s(185) =< s(186)*s(189)
s(190) =< s(185)
s(191) =< s(188)*s(187)
s(371) =< s(73)*aux(51)

  with precondition: [] 


Closed-form bounds of start(V,V2,V8): 
-------------------------------------
* Chain [26] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of start(V,V2,V8): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 37 ms.
* Invariants computed in 68 ms.
   - Backward Invariants 18 ms.
   - Transitive Invariants 26 ms.
* Refinement performed in 102 ms.
* Termination proved in 12 ms.
* Upper bounds computed in 557 ms.
   - Equation cost structures 376 ms.
   - Phase cost structures 72 ms.
   - Chain cost structures 55 ms.
   - Solving cost expressions 40 ms.
* Total analysis performed in 808 ms.


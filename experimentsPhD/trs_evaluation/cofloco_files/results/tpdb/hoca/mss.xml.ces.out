
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [fun1/3]
1. recursive  : [fun2/3]
2. non_recursive  : [fun/3]
3. recursive [non_tail] : [fun3/2]
4. recursive  : [fun5/3]
5. recursive  : [fun4/3]
6. non_recursive  : [main/2]
7. non_recursive  : [start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into fun1/3
1. SCC is partially evaluated into fun2/3
2. SCC is partially evaluated into fun/3
3. SCC is partially evaluated into fun3/2
4. SCC is partially evaluated into fun5/3
5. SCC is partially evaluated into fun4/3
6. SCC is partially evaluated into main/2
7. SCC is partially evaluated into start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fun1/3 
* CE 24 is refined into CE [35] 
* CE 23 is refined into CE [36] 
* CE 26 is refined into CE [37] 
* CE 25 is refined into CE [38] 


#### Refined cost equations fun1/3 
* CE 35: fun1(A,B,A) = 1
     [A>=1,B=0] 
* CE 36: fun1(V1,V,Out) = 1
     [V>=0,Out=0,V1=0] 
* CE 37: fun1(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 38: fun1(V1,V,Out) = 1+ fun1(W1,X1,Out)
     [X1>=0,W1>=0,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun1/3 
* CEs [38] --> Loop 25 
* CEs [35] --> Loop 26 
* CEs [36,37] --> Loop 27 

#### Loops of fun1/3 
* Loop 25: fun1(V1,V,Out)->  fun1(V1',V',Out)
                  [V'>=0,V1'>=0,V'+1=V,V1'+1=V1] 
* Loop 26: fun1(A,B,A) [A>=1,B=0] 
* Loop 27: fun1(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun1(V1,V,Out) 
* RF of phase [25]: [V,V1]

#### Partial ranking functions of CR fun1(V1,V,Out) 
* Partial RF of phase [25]:
  - RF of loop [25:1]:
    V
    V1


### Resulting Chains:fun1(V1,V,Out) 
* [[25],27]
* [[25],26]
* [27]
* [26]


### Merging Chains  fun1/3 into  External patterns of execution 
* [[26]] --> 1 
* [[27],[27,[25]]] --> 2 
* [[26,[25]]] --> 3 


### Specialization of cost equations fun2/3 
* CE 29 is refined into CE [39] 
* CE 27 is refined into CE [40] 
* CE 28 is refined into CE [41] 


#### Refined cost equations fun2/3 
* CE 39: fun2(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 40: fun2(A,B,B) = 1
     [B>=1,A=0] 
* CE 41: fun2(V1,V,Out) = 1+ fun2(W1,V,X1)
     [W1>=0,V>=1,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun2/3 
* CEs [41] --> Loop 28 
* CEs [39] --> Loop 29 
* CEs [40] --> Loop 30 

#### Loops of fun2/3 
* Loop 28: fun2(V1,V,Out)->  fun2(V1',V,Out')
                  [V1'>=0,V>=1,Out=Out'+1,V1'+1=V1] 
* Loop 29: fun2(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 30: fun2(A,B,B) [B>=1,A=0] 

### Ranking functions of CR fun2(V1,V,Out) 
* RF of phase [28]: [V1]

#### Partial ranking functions of CR fun2(V1,V,Out) 
* Partial RF of phase [28]:
  - RF of loop [28:1]:
    V1


### Resulting Chains:fun2(V1,V,Out) 
* [[28],30]
* [[28],29]
* [30]
* [29]


### Merging Chains  fun2/3 into  External patterns of execution 
* [[30]] --> 1 
* [[29]] --> 2 
* [[30,[28]]] --> 3 
* [[29,[28]]] --> 4 


### Specialization of cost equations fun/3 
* CE 14 is refined into CE [42] 
* CE 11 is refined into CE [43] 
* CE 16 is refined into CE [44] 
* CE 12 is refined into CE [45] 
* CE 13 is refined into CE [46,47,48] 
* CE 15 is refined into CE [49,50,51] 
* CE 10 is refined into CE [52] 
* CE 9 is refined into CE [53] 


#### Refined cost equations fun/3 
* CE 42: fun(V1,V,Out) = 1
     [V>=1,V1>=1,V1+V+1=Out] 
* CE 43: fun(V1,V,Out) = 1
     [V>=1,V1>=1,V1+1=Out] 
* CE 44: fun(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 45: fun(V1,V,Out) = 1
     [2*V1>=Out,Out>=V1+2,V=1] 
* CE 46: fun(V1,V,Out) = 1+ fun1(W1,X1,W1):1
     [V1>=W1+2,W1>=1,V1+W1+1=Out,X1=0,V=2] 
* CE 47: fun(V1,V,Out) = 1+ fun1(W1,X1,Y1):2
     [V1>=W1+2,X1>=0,W1>=0,V1+1=Out,X1+2=V,Y1=0] 
* CE 48: fun(V1,V,Out) = 1+ fun1(W1,X1,Y1):3
     [V1>=X1+Y1+2,Y1>=1,X1>=1,X1+Y1=W1,V1+Y1+1=Out,X1+2=V] 
* CE 49: fun(V1,V,Out) = 1+ fun2(V,W1,X1):2
     [V1>=W1+1,W1>=1,V>=1,V1+1=Out,X1=0] 
* CE 50: fun(V1,V,Out) = 1+ fun2(V,W1,X1):3
     [V1+V>=X1+1,X1>=V+1,V>=1,X1=V+W1,V1+X1+1=Out] 
* CE 51: fun(V1,V,Out) = 1+ fun2(V,W1,X1):4
     [V>=X1,V1>=W1+1,X1>=1,W1>=1,V1+X1+1=Out] 
* CE 52: fun(V1,V,Out) = 1
     [2*V1>=Out,Out>=V1+2,V=0] 
* CE 53: fun(V1,V,Out) = 1
     [V1>=1,V1+1=Out,V=0] 

### Cost equations --> "Loop" of fun/3 
* CEs [48] --> Loop 31 
* CEs [50] --> Loop 32 
* CEs [51] --> Loop 33 
* CEs [42] --> Loop 34 
* CEs [43,47,49] --> Loop 35 
* CEs [44] --> Loop 36 
* CEs [46] --> Loop 37 
* CEs [45] --> Loop 38 
* CEs [52] --> Loop 39 
* CEs [53] --> Loop 40 

#### Loops of fun/3 
* Loop 31: fun(V1,V,Out) [2*V1+1>=V+Out,Out>=V1+2,V>=3] 
* Loop 32: fun(V1,V,Out) [V+2*V1>=Out,Out>=V1+V+2,V>=1] 
* Loop 33: fun(V1,V,Out) [V1+V+1>=Out,Out>=V1+2,V1>=2] 
* Loop 34: fun(V1,V,Out) [V>=1,V1>=1,V1+V+1=Out] 
* Loop 35: fun(V1,V,Out) [V>=1,V1>=1,V1+1=Out] 
* Loop 36: fun(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 37: fun(V1,V,Out) [2*V1>=Out+1,Out>=V1+2,V=2] 
* Loop 38: fun(V1,V,Out) [2*V1>=Out,Out>=V1+2,V=1] 
* Loop 39: fun(V1,V,Out) [2*V1>=Out,Out>=V1+2,V=0] 
* Loop 40: fun(V1,V,Out) [V1>=1,V1+1=Out,V=0] 

### Ranking functions of CR fun(V1,V,Out) 

#### Partial ranking functions of CR fun(V1,V,Out) 


### Resulting Chains:fun(V1,V,Out) 
* [40]
* [39]
* [38]
* [37]
* [36]
* [35]
* [34]
* [33]
* [32]
* [31]


### Merging Chains  fun/3 into  External patterns of execution 
* [[40]] --> 1 
* [[39]] --> 2 
* [[38]] --> 3 
* [[37]] --> 4 
* [[36]] --> 5 
* [[35]] --> 6 
* [[34]] --> 7 
* [[33]] --> 8 
* [[32]] --> 9 
* [[31]] --> 10 


### Specialization of cost equations fun3/2 
* CE 19 is refined into CE [54] 
* CE 17 is refined into CE [55] 
* CE 18 is refined into CE [56,57,58,59,60,61,62,63,64,65] 


#### Refined cost equations fun3/2 
* CE 54: fun3(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 55: fun3(V1,Out) = 1
     [Out=1,V1=0] 
* CE 56: fun3(V1,Out) = 1+ fun3(W1,X1)+ fun(Y1,Z1,Out):1
     [W1>=0,Out>=2,Out=X1+1,Out=Y1+1,W1+1=V1,Z1=0] 
* CE 57: fun3(V1,Out) = 1+ fun3(W1,X1)+ fun(X1,Y1,Out):2
     [2*X1>=Out,Out>=X1+2,W1>=0,W1+1=V1,Y1=0] 
* CE 58: fun3(V1,Out) = 1+ fun3(W1,X1)+ fun(X1,Y1,Out):3
     [2*X1>=Out,Out>=X1+2,W1>=0,W1+2=V1,Y1=1] 
* CE 59: fun3(V1,Out) = 1+ fun3(W1,X1)+ fun(X1,Y1,Out):4
     [2*X1>=Out+1,Out>=X1+2,W1>=0,W1+3=V1,Y1=2] 
* CE 60: fun3(V1,Out) = 1+ fun3(W1,X1)+ fun(X1,Y1,Z1):5
     [W1>=0,Y1>=0,X1>=0,Y1+W1+1=V1,Z1=0,Out=0] 
* CE 61: fun3(V1,Out) = 1+ fun3(W1,X1)+ fun(Y1,Z1,Out):6
     [W1>=0,Out>=2,Z1>=1,Z1+W1+1=V1,Out=X1+1,Out=Y1+1] 
* CE 62: fun3(V1,Out) = 1+ fun3(W1,X1)+ fun(X1,Y1,Out):7
     [Out>=X1+2,W1>=0,X1>=1,Out+W1=V1+X1,Out=X1+Y1+1] 
* CE 63: fun3(V1,Out) = 1+ fun3(W1,X1)+ fun(X1,Y1,Out):8
     [X1+Y1+1>=Out,Out>=X1+2,W1>=0,X1>=2,Y1+W1+1=V1] 
* CE 64: fun3(V1,Out) = 1+ fun3(W1,X1)+ fun(X1,Y1,Out):9
     [Y1+2*X1>=Out,Out>=X1+Y1+2,W1>=0,Y1>=1,Y1+W1+1=V1] 
* CE 65: fun3(V1,Out) = 1+ fun3(W1,X1)+ fun(X1,Y1,Out):10
     [2*X1+1>=Out+Y1,Out>=X1+2,W1>=0,Y1>=3,Y1+W1+1=V1] 

### Cost equations --> "Loop" of fun3/2 
* CEs [65] --> Loop 41 
* CEs [64] --> Loop 42 
* CEs [63] --> Loop 43 
* CEs [62] --> Loop 44 
* CEs [61] --> Loop 45 
* CEs [57] --> Loop 46 
* CEs [56] --> Loop 47 
* CEs [58] --> Loop 48 
* CEs [59] --> Loop 49 
* CEs [60] --> Loop 50 
* CEs [54] --> Loop 51 
* CEs [55] --> Loop 52 

#### Loops of fun3/2 
* Loop 41: fun3(V1,Out)->  fun3(V1',Out')
                  [V1'+2*Out'+2>=V1+Out,Out>=Out'+2,V1>=V1'+4,V1'>=0] 
* Loop 42: fun3(V1,Out)->  fun3(V1',Out')
                  [V1+2*Out'>=Out+V1'+1,Out+V1'>=V1+Out'+1,V1>=V1'+2,V1'>=0] 
* Loop 43: fun3(V1,Out)->  fun3(V1',Out')
                  [V1+Out'>=Out+V1',Out>=Out'+2,Out'>=2,V1'>=0] 
* Loop 44: fun3(V1,Out)->  fun3(V1',Out')
                  [Out+V1'>=V1+1,V1>=V1'+2,V1'>=0,V1+Out'=Out+V1'] 
* Loop 45: fun3(V1,Out)->  fun3(V1',Out')
                  [V1>=V1'+2,V1'>=0,Out>=2,Out=Out'+1] 
* Loop 46: fun3(V1,Out)->  fun3(V1',Out')
                  [Out>=Out'+2,2*Out'>=Out,V1>=1,V1=V1'+1] 
* Loop 47: fun3(V1,Out)->  fun3(V1',Out')
                  [Out>=2,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 48: fun3(V1,Out)->  fun3(V1',Out')
                  [Out>=Out'+2,2*Out'>=Out,V1>=2,V1=V1'+2] 
* Loop 49: fun3(V1,Out)->  fun3(V1',Out')
                  [Out>=Out'+2,2*Out'>=Out+1,V1>=3,V1=V1'+3] 
* Loop 50: fun3(V1,Out)->  fun3(V1',Out')
                  [V1>=V1'+1,Out'>=0,V1'>=0,Out=0] 
* Loop 51: fun3(V1,Out) [V1>=0,Out=0] 
* Loop 52: fun3(V1,Out) [Out=1,V1=0] 

### Ranking functions of CR fun3(V1,Out) 
* RF of phase [41,42,43,44,45,46,47,48,49]: [V1]
* RF of phase [50]: [V1]

#### Partial ranking functions of CR fun3(V1,Out) 
* Partial RF of phase [41,42,43,44,45,46,47,48,49]:
  - RF of loop [41:1]:
    V1-3
  - RF of loop [42:1,43:1,44:1,45:1,48:1]:
    V1-1
  - RF of loop [46:1,47:1]:
    V1
  - RF of loop [49:1]:
    V1-2
* Partial RF of phase [50]:
  - RF of loop [50:1]:
    V1


### Resulting Chains:fun3(V1,Out) 
* [[50],[41,42,43,44,45,46,47,48,49],52]
* [[50],52]
* [[50],51]
* [[41,42,43,44,45,46,47,48,49],52]
* [52]
* [51]


### Merging Chains  fun3/2 into  External patterns of execution 
* [[52]] --> 1 
* [[51],[51,[50]],[52,[50]],[52,[41,42,43,44,45,46,47,48,49],[50]]] --> 2 
* [[52,[41,42,43,44,45,46,47,48,49]]] --> 3 


### Specialization of cost equations fun5/3 
* CE 33 is refined into CE [66] 
* CE 31 is refined into CE [67] 
* CE 30 is refined into CE [68] 
* CE 32 is refined into CE [69] 


#### Refined cost equations fun5/3 
* CE 66: fun5(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 67: fun5(A,B,A) = 1
     [A>=1,B=0] 
* CE 68: fun5(A,B,B) = 1
     [B>=0,A=0] 
* CE 69: fun5(V1,V,Out) = 1+ fun5(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun5/3 
* CEs [69] --> Loop 53 
* CEs [66] --> Loop 54 
* CEs [67] --> Loop 55 
* CEs [68] --> Loop 56 

#### Loops of fun5/3 
* Loop 53: fun5(V1,V,Out)->  fun5(V1',V',Out')
                  [V'>=0,V1'>=0,Out=Out'+1,V'+1=V,V1'+1=V1] 
* Loop 54: fun5(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 55: fun5(A,B,A) [A>=1,B=0] 
* Loop 56: fun5(A,B,B) [B>=0,A=0] 

### Ranking functions of CR fun5(V1,V,Out) 
* RF of phase [53]: [V,V1]

#### Partial ranking functions of CR fun5(V1,V,Out) 
* Partial RF of phase [53]:
  - RF of loop [53:1]:
    V
    V1


### Resulting Chains:fun5(V1,V,Out) 
* [[53],56]
* [[53],55]
* [[53],54]
* [56]
* [55]
* [54]


### Merging Chains  fun5/3 into  External patterns of execution 
* [[56]] --> 1 
* [[55]] --> 2 
* [[54]] --> 3 
* [[55,[53]]] --> 4 
* [[56,[53]]] --> 5 
* [[54,[53]]] --> 6 


### Specialization of cost equations fun4/3 
* CE 22 is refined into CE [70] 
* CE 20 is refined into CE [71] 
* CE 21 is refined into CE [72,73,74,75,76,77] 


#### Refined cost equations fun4/3 
* CE 70: fun4(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 71: fun4(A,B,A) = 1
     [A>=0,B=0] 
* CE 72: fun4(V1,V,Out) = 1+ fun5(W1,X1,X1):1+ fun4(X1,Y1,Out)
     [Y1>=0,X1>=0,X1+Y1+1=V,W1=0,V1=0] 
* CE 73: fun4(V1,V,Out) = 1+ fun5(V1,W1,V1):2+ fun4(V1,X1,Out)
     [X1>=0,V1>=1,X1+1=V,W1=0] 
* CE 74: fun4(V1,V,Out) = 1+ fun5(V1,W1,X1):3+ fun4(Y1,Z1,Out)
     [Z1>=0,W1>=0,V1>=0,W1+Z1+1=V,Y1=0,X1=0] 
* CE 75: fun4(V1,V,Out) = 1+ fun5(V1,W1,V1):4+ fun4(V1,X1,Out)
     [V1>=W1+1,X1>=0,W1>=1,W1+X1+1=V] 
* CE 76: fun4(V1,V,Out) = 1+ fun5(V1,W1,W1):5+ fun4(W1,X1,Out)
     [W1>=V1,X1>=0,V1>=1,W1+X1+1=V] 
* CE 77: fun4(V1,V,Out) = 1+ fun5(V1,W1,X1):6+ fun4(X1,Y1,Out)
     [W1>=X1,V1>=X1,Y1>=0,X1>=1,W1+Y1+1=V] 

### Cost equations --> "Loop" of fun4/3 
* CEs [77] --> Loop 57 
* CEs [76] --> Loop 58 
* CEs [75] --> Loop 59 
* CEs [73] --> Loop 60 
* CEs [74] --> Loop 61 
* CEs [72] --> Loop 62 
* CEs [70] --> Loop 63 
* CEs [71] --> Loop 64 

#### Loops of fun4/3 
* Loop 57: fun4(V1,V,Out)->  fun4(V1',V',Out)
                  [V>=V1'+V'+1,V1>=V1',V'>=0,V1'>=1] 
* Loop 58: fun4(V1,V,Out)->  fun4(V1',V',Out)
                  [V>=V1'+1,V1'>=V1,V1>=1,V=V1'+V'+1] 
* Loop 59: fun4(V1,V,Out)->  fun4(V1,V',Out)
                  [V1+V'>=V,V>=V'+2,V'>=0] 
* Loop 60: fun4(V1,V,Out)->  fun4(V1,V',Out)
                  [V>=1,V1>=1,V=V'+1] 
* Loop 61: fun4(V1,V,Out)->  fun4(V1',V',Out)
                  [V>=V'+1,V'>=0,V1>=0,V1'=0] 
* Loop 62: fun4(V1,V,Out)->  fun4(V1',V',Out)
                  [V>=V1'+1,V1'>=0,V1'+V'+1=V,V1=0] 
* Loop 63: fun4(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 64: fun4(A,B,A) [A>=0,B=0] 

### Ranking functions of CR fun4(V1,V,Out) 
* RF of phase [57,58,59,60,61,62]: [V,V1+V]

#### Partial ranking functions of CR fun4(V1,V,Out) 
* Partial RF of phase [57,58,59,60,61,62]:
  - RF of loop [57:1]:
    V/2-1/2
  - RF of loop [58:1]:
    -V1/2+V/2 depends on loops [57:1,61:1] 
    V1/2+V/2-1
  - RF of loop [59:1]:
    V-1
  - RF of loop [60:1,61:1,62:1]:
    V
  - RF of loop [62:1]:
    V1+V


### Resulting Chains:fun4(V1,V,Out) 
* [[57,58,59,60,61,62],64]
* [[57,58,59,60,61,62],63]
* [64]
* [63]


### Merging Chains  fun4/3 into  External patterns of execution 
* [[64]] --> 1 
* [[63],[63,[57,58,59,60,61,62]]] --> 2 
* [[64,[57,58,59,60,61,62]]] --> 3 


### Specialization of cost equations main/2 
* CE 34 is refined into CE [78,79,80,81,82,83] 


#### Refined cost equations main/2 
* CE 78: main(V1,Out) = 1+ fun3(W1,X1):1+ fun4(Y1,Z1,A2):2
     [A2=0,Z1=1,Y1=0,X1=1,W1=0,Out=0,V1=0] 
* CE 79: main(V1,Out) = 1+ fun3(W1,X1):1+ fun4(Y1,Z1,A2):3
     [A2=0,Z1=1,Y1=0,X1=1,W1=0,Out=0,V1=0] 
* CE 80: main(V1,Out) = 1+ fun3(V1,W1):2+ fun4(X1,Y1,Z1):1
     [V1>=0,Z1=0,Y1=0,X1=0,W1=0,Out=0] 
* CE 81: main(V1,Out) = 1+ fun3(V1,W1):2+ fun4(X1,Y1,Z1):2
     [V1>=0,Z1=0,Y1=0,X1=0,W1=0,Out=0] 
* CE 82: main(V1,Out) = 1+ fun3(V1,W1):3+ fun4(X1,W1,Y1):2
     [W1>=2,V1>=1,Y1=0,X1=0,Out=0] 
* CE 83: main(V1,Out) = 1+ fun3(V1,W1):3+ fun4(X1,W1,Out):3
     [W1>=Out+1,Out>=0,W1>=2,V1>=1,X1=0] 

### Cost equations --> "Loop" of main/2 
* CEs [83] --> Loop 65 
* CEs [78,79,80,81,82] --> Loop 66 

#### Loops of main/2 
* Loop 65: main(V1,Out) [Out>=0,V1>=1] 
* Loop 66: main(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR main(V1,Out) 

#### Partial ranking functions of CR main(V1,Out) 


### Resulting Chains:main(V1,Out) 
* [66]
* [65]


### Merging Chains  main/2 into  External patterns of execution 
* [[66]] --> 1 
* [[65]] --> 2 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [84,85,86,87,88,89,90,91,92,93] 
* CE 3 is refined into CE [94,95,96] 
* CE 4 is refined into CE [97,98,99] 
* CE 5 is refined into CE [100,101,102] 
* CE 6 is refined into CE [103,104,105,106] 
* CE 7 is refined into CE [107,108,109,110,111,112] 
* CE 8 is refined into CE [113,114] 


#### Refined cost equations start/2 
* CE 84: start(V1,V) = 0+ fun(W1,X1,Y1):1
     [Y1>=2,Y1=W1+1,Y1=V1+1,X1=0,V=0] 
* CE 85: start(V1,V) = 0+ fun(V1,W1,X1):2
     [2*V1>=X1,X1>=V1+2,W1=0,V=0] 
* CE 86: start(V1,V) = 0+ fun(V1,W1,X1):3
     [2*V1>=X1,X1>=V1+2,W1=1,V=1] 
* CE 87: start(V1,V) = 0+ fun(V1,W1,X1):4
     [2*V1>=X1+1,X1>=V1+2,W1=2,V=2] 
* CE 88: start(V1,V) = 0+ fun(V1,V,W1):5
     [V>=0,V1>=0,W1=0] 
* CE 89: start(V1,V) = 0+ fun(W1,V,X1):6
     [X1>=2,V>=1,X1=W1+1,X1=V1+1] 
* CE 90: start(V1,V) = 0+ fun(V1,W1,X1):7
     [X1>=V1+2,V1>=1,X1=V1+W1+1,X1=V1+V+1] 
* CE 91: start(V1,V) = 0+ fun(V1,V,W1):8
     [V1+V+1>=W1,W1>=V1+2,V1>=2] 
* CE 92: start(V1,V) = 0+ fun(V1,V,W1):9
     [V+2*V1>=W1,W1>=V1+V+2,V>=1] 
* CE 93: start(V1,V) = 0+ fun(V1,V,W1):10
     [2*V1+1>=V+W1,W1>=V1+2,V>=3] 
* CE 94: start(V1,V) = 0+ fun3(W1,X1):1
     [X1=1,W1=0,V1=0] 
* CE 95: start(V1,V) = 0+ fun3(V1,W1):2
     [V1>=0,W1=0] 
* CE 96: start(V1,V) = 0+ fun3(V1,W1):3
     [W1>=2,V1>=1] 
* CE 97: start(V1,V) = 0+ fun4(V1,W1,V1):1
     [V1>=0,W1=0,V=0] 
* CE 98: start(V1,V) = 0+ fun4(V1,V,W1):2
     [V>=0,V1>=0,W1=0] 
* CE 99: start(V1,V) = 0+ fun4(V1,V,W1):3
     [V1+V>=W1+1,W1>=0,V>=1,V1>=0] 
* CE 100: start(V1,V) = 0+ fun1(V1,W1,V1):1
     [V1>=1,W1=0,V=0] 
* CE 101: start(V1,V) = 0+ fun1(V1,V,W1):2
     [V>=0,V1>=0,W1=0] 
* CE 102: start(V1,V) = 0+ fun1(W1,V,X1):3
     [X1>=1,V>=1,V+X1=W1,V+X1=V1] 
* CE 103: start(V1,V) = 0+ fun2(W1,V,V):1
     [V>=1,W1=0,V1=0] 
* CE 104: start(V1,V) = 0+ fun2(V1,V,W1):2
     [V>=0,V1>=0,W1=0] 
* CE 105: start(V1,V) = 0+ fun2(V1,W1,X1):3
     [X1>=V1+1,V1>=1,X1=V1+W1,X1=V1+V] 
* CE 106: start(V1,V) = 0+ fun2(V1,V,W1):4
     [V1>=W1,W1>=1,V>=1] 
* CE 107: start(V1,V) = 0+ fun5(W1,V,V):1
     [V>=0,W1=0,V1=0] 
* CE 108: start(V1,V) = 0+ fun5(V1,W1,V1):2
     [V1>=1,W1=0,V=0] 
* CE 109: start(V1,V) = 0+ fun5(V1,V,W1):3
     [V>=0,V1>=0,W1=0] 
* CE 110: start(V1,V) = 0+ fun5(V1,V,V1):4
     [V1>=V+1,V>=1] 
* CE 111: start(V1,V) = 0+ fun5(V1,V,V):5
     [V>=V1,V1>=1] 
* CE 112: start(V1,V) = 0+ fun5(V1,V,W1):6
     [V>=W1,V1>=W1,W1>=1] 
* CE 113: start(V1,V) = 0+ main(V1,W1):1
     [V1>=0,W1=0] 
* CE 114: start(V1,V) = 0+ main(V1,W1):2
     [W1>=0,V1>=1] 

### Cost equations --> "Loop" of start/2 
* CEs [87] --> Loop 67 
* CEs [86] --> Loop 68 
* CEs [84,85,97,100,108] --> Loop 69 
* CEs [88,89,90,91,92,93,94,95,96,98,99,101,102,103,104,105,106,107,109,110,111,112,113,114] --> Loop 70 

#### Loops of start/2 
* Loop 67: start(V1,V) [V1>=3,V=2] 
* Loop 68: start(V1,V) [V1>=2,V=1] 
* Loop 69: start(V1,V) [V1>=0,V=0] 
* Loop 70: start(V1,V) [V1>=0] 

### Ranking functions of CR start(V1,V) 

#### Partial ranking functions of CR start(V1,V) 


### Resulting Chains:start(V1,V) 
* [70]
* [69]
* [68]
* [67]


### Merging Chains  start/2 into  External patterns of execution 
* [[69],[70]] --> 1 
* [[68]] --> 2 
* [[67]] --> 3 


Computing Bounds
=====================================

#### Cost of loops [25] 

 * loop 25:fun1(V1,V,Out) -> [fun1(V1',V',Out')] 
1
#### Cost of phase [25]:fun1(V1,V,Out) -> [fun1(V1',V',Out')] 
1*it(25)+0
  Such that:it(25) =< V1
it(25) =< V1-V1'
it(25) =< V
it(25) =< V-V'

#### Cost of phase [25]:fun1(V1,V,Out) -> [fun1(V1',V',Out')] 
1*it(25)+0
  Such that:it(25) =< V1
it(25) =< V1-V1'
it(25) =< V
it(25) =< V-V'

#### Cost of chains of fun1(V1,V,Out):
* Chain [[25],27]: 1*it(25)+1
  Such that:it(25) =< V

  with precondition: [Out=0,V1>=1,V>=1] 

* Chain [[25],26]: 1*it(25)+1
  Such that:it(25) =< V

  with precondition: [V1=Out+V,V>=1,V1>=V+1] 

* Chain [27]: 1
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [26]: 1
  with precondition: [V=0,V1=Out,V1>=1] 


#### Cost of loops [28] 

 * loop 28:fun2(V1,V,Out) -> [fun2(V1',V',Out')] 
1
#### Cost of phase [28]:fun2(V1,V,Out) -> [fun2(V1',V',Out')] 
1*it(28)+0
  Such that:it(28) =< V1
it(28) =< V1-V1'

#### Cost of phase [28]:fun2(V1,V,Out) -> [fun2(V1',V',Out')] 
1*it(28)+0
  Such that:it(28) =< V1
it(28) =< V1-V1'

#### Cost of chains of fun2(V1,V,Out):
* Chain [[28],30]: 1*it(28)+1
  Such that:it(28) =< -V+Out

  with precondition: [V+V1=Out,V1>=1,V>=1] 

* Chain [[28],29]: 1*it(28)+0
  Such that:it(28) =< Out

  with precondition: [V>=1,Out>=1,V1>=Out] 

* Chain [30]: 1
  with precondition: [V1=0,V=Out,V>=1] 

* Chain [29]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of chains of fun(V1,V,Out):
* Chain [40]: 1
  with precondition: [V=0,V1+1=Out,V1>=1] 

* Chain [39]: 1
  with precondition: [V=0,Out>=V1+2,2*V1>=Out] 

* Chain [38]: 1
  with precondition: [V=1,Out>=V1+2,2*V1>=Out] 

* Chain [37]: 2
  with precondition: [V=2,Out>=V1+2,2*V1>=Out+1] 

* Chain [36]: 0
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [35]: 1*s(2)+2
  Such that:s(2) =< V

  with precondition: [V1+1=Out,V1>=1,V>=1] 

* Chain [34]: 1
  with precondition: [V+V1+1=Out,V1>=1,V>=1] 

* Chain [33]: 1*s(3)+1
  Such that:s(3) =< V

  with precondition: [V1>=2,Out>=V1+2,V+V1+1>=Out] 

* Chain [32]: 1*s(4)+2
  Such that:s(4) =< V

  with precondition: [V>=1,Out>=V+V1+2,V+2*V1>=Out] 

* Chain [31]: 1*s(5)+2
  Such that:s(5) =< V

  with precondition: [V>=3,Out>=V1+2,2*V1+1>=Out+V] 


#### Cost of loops [41,42,43,44,45,46,47,48,49] 

 * loop 41:fun3(V1,Out) -> [fun3(V1',Out')] 
1*s(7)+3
  Such that:s(7) =< V1-V1'

 * loop 42:fun3(V1,Out) -> [fun3(V1',Out')] 
1*s(9)+3
  Such that:s(9) =< V1-V1'

 * loop 43:fun3(V1,Out) -> [fun3(V1',Out')] 
1*s(11)+2
  Such that:s(11) =< V1-V1'

 * loop 44:fun3(V1,Out) -> [fun3(V1',Out')] 
2
 * loop 45:fun3(V1,Out) -> [fun3(V1',Out')] 
1*s(13)+3
  Such that:s(13) =< V1-V1'

 * loop 46:fun3(V1,Out) -> [fun3(V1',Out')] 
2
 * loop 47:fun3(V1,Out) -> [fun3(V1',Out')] 
2
 * loop 48:fun3(V1,Out) -> [fun3(V1',Out')] 
2
 * loop 49:fun3(V1,Out) -> [fun3(V1',Out')] 
3
#### Cost of phase [41,42,43,44,45,46,47,48,49]:fun3(V1,Out) -> [fun3(V1',Out')] 
26*it(41)+0
  Such that:aux(1) =< V1
aux(2) =< V1-V1'
it(41) =< aux(1)
it(41) =< aux(2)

#### Cost of loops [50] 

 * loop 50:fun3(V1,Out) -> [fun3(V1',Out')] 
1
#### Cost of phase [50]:fun3(V1,Out) -> [fun3(V1',Out')] 
1*it(50)+0
  Such that:it(50) =< V1
it(50) =< V1-V1'

#### Cost of phase [50]:fun3(V1,Out) -> [fun3(V1',Out')] 
1*it(50)+0
  Such that:it(50) =< V1
it(50) =< V1-V1'

#### Cost of phase [50]:fun3(V1,Out) -> [fun3(V1',Out')] 
1*it(50)+0
  Such that:it(50) =< V1
it(50) =< V1-V1'

#### Cost of chains of fun3(V1,Out):
* Chain [[50],[41,42,43,44,45,46,47,48,49],52]: 27*it(41)+1
  Such that:aux(4) =< V1
it(41) =< aux(4)

  with precondition: [Out=0,V1>=2] 

* Chain [[50],52]: 1*it(50)+1
  Such that:it(50) =< V1

  with precondition: [Out=0,V1>=1] 

* Chain [[50],51]: 1*it(50)+0
  Such that:it(50) =< V1

  with precondition: [Out=0,V1>=1] 

* Chain [[41,42,43,44,45,46,47,48,49],52]: 26*it(41)+1
  Such that:aux(3) =< V1
it(41) =< aux(3)

  with precondition: [V1>=1,Out>=2] 

* Chain [52]: 1
  with precondition: [V1=0,Out=1] 

* Chain [51]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [53] 

 * loop 53:fun5(V1,V,Out) -> [fun5(V1',V',Out')] 
1
#### Cost of phase [53]:fun5(V1,V,Out) -> [fun5(V1',V',Out')] 
1*it(53)+0
  Such that:it(53) =< V1
it(53) =< V1-V1'
it(53) =< V
it(53) =< V-V'

#### Cost of phase [53]:fun5(V1,V,Out) -> [fun5(V1',V',Out')] 
1*it(53)+0
  Such that:it(53) =< V1
it(53) =< V1-V1'
it(53) =< V
it(53) =< V-V'

#### Cost of phase [53]:fun5(V1,V,Out) -> [fun5(V1',V',Out')] 
1*it(53)+0
  Such that:it(53) =< V1
it(53) =< V1-V1'
it(53) =< V
it(53) =< V-V'

#### Cost of chains of fun5(V1,V,Out):
* Chain [[53],56]: 1*it(53)+1
  Such that:it(53) =< V1

  with precondition: [V=Out,V1>=1,V>=V1] 

* Chain [[53],55]: 1*it(53)+1
  Such that:it(53) =< V

  with precondition: [V1=Out,V>=1,V1>=V+1] 

* Chain [[53],54]: 1*it(53)+0
  Such that:it(53) =< Out

  with precondition: [Out>=1,V1>=Out,V>=Out] 

* Chain [56]: 1
  with precondition: [V1=0,V=Out,V>=0] 

* Chain [55]: 1
  with precondition: [V=0,V1=Out,V1>=1] 

* Chain [54]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [57,58,59,60,61,62] 

 * loop 57:fun4(V1,V,Out) -> [fun4(V1',V',Out')] 
1*s(23)+1
  Such that:s(23) =< V1'

 * loop 58:fun4(V1,V,Out) -> [fun4(V1',V',Out')] 
1*s(25)+2
  Such that:s(25) =< V1

 * loop 59:fun4(V1,V,Out) -> [fun4(V1',V',Out')] 
1*s(27)+2
  Such that:s(27) =< V-V'

 * loop 60:fun4(V1,V,Out) -> [fun4(V1',V',Out')] 
2
 * loop 61:fun4(V1,V,Out) -> [fun4(V1',V',Out')] 
1
 * loop 62:fun4(V1,V,Out) -> [fun4(V1',V',Out')] 
2
#### Cost of phase [57,58,59,60,61,62]:fun4(V1,V,Out) -> [fun4(V1',V',Out')] 
1*it(57)+2*it(58)+2*it(59)+5*it(60)+3*s(28)+0
  Such that:aux(8) =< -V1/2+V/2
aux(11) =< V1+V
aux(12) =< V1+V-V1'-V'
aux(13) =< V1/2+V/2
aux(14) =< V1/2+V/2-V1'/2-V'/2
aux(15) =< V
aux(16) =< V-V'
aux(17) =< V/2
aux(18) =< V/2-V'/2
it(57) =< aux(11)
it(58) =< aux(11)
it(59) =< aux(11)
it(60) =< aux(11)
s(28) =< aux(11)
it(57) =< aux(12)
it(58) =< aux(12)
it(59) =< aux(12)
it(60) =< aux(12)
s(28) =< aux(12)
it(58) =< aux(13)
it(59) =< aux(13)
it(58) =< aux(14)
it(59) =< aux(14)
it(57) =< aux(15)
it(58) =< aux(15)
it(59) =< aux(15)
it(60) =< aux(15)
it(57) =< aux(16)
it(58) =< aux(16)
it(59) =< aux(16)
it(60) =< aux(16)
it(57) =< aux(17)
it(58) =< aux(17)
it(59) =< aux(17)
it(57) =< aux(18)
it(58) =< aux(18)
it(59) =< aux(18)
aux(10) =< aux(17)+1
aux(6) =< it(57)*aux(17)
aux(7) =< it(60)*aux(10)
it(58) =< aux(7)+aux(6)+aux(8)

#### Cost of phase [57,58,59,60,61,62]:fun4(V1,V,Out) -> [fun4(V1',V',Out')] 
1*it(57)+2*it(58)+2*it(59)+5*it(60)+3*s(28)+0
  Such that:aux(8) =< -V1/2+V/2
aux(11) =< V1+V
aux(12) =< V1+V-V1'-V'
aux(13) =< V1/2+V/2
aux(14) =< V1/2+V/2-V1'/2-V'/2
aux(15) =< V
aux(16) =< V-V'
aux(17) =< V/2
aux(18) =< V/2-V'/2
it(57) =< aux(11)
it(58) =< aux(11)
it(59) =< aux(11)
it(60) =< aux(11)
s(28) =< aux(11)
it(57) =< aux(12)
it(58) =< aux(12)
it(59) =< aux(12)
it(60) =< aux(12)
s(28) =< aux(12)
it(58) =< aux(13)
it(59) =< aux(13)
it(58) =< aux(14)
it(59) =< aux(14)
it(57) =< aux(15)
it(58) =< aux(15)
it(59) =< aux(15)
it(60) =< aux(15)
it(57) =< aux(16)
it(58) =< aux(16)
it(59) =< aux(16)
it(60) =< aux(16)
it(57) =< aux(17)
it(58) =< aux(17)
it(59) =< aux(17)
it(57) =< aux(18)
it(58) =< aux(18)
it(59) =< aux(18)
aux(10) =< aux(17)+1
aux(6) =< it(57)*aux(17)
aux(7) =< it(60)*aux(10)
it(58) =< aux(7)+aux(6)+aux(8)

#### Cost of chains of fun4(V1,V,Out):
* Chain [[57,58,59,60,61,62],64]: 1*it(57)+2*it(58)+2*it(59)+5*it(60)+3*s(28)+1
  Such that:aux(11) =< V1+V
aux(12) =< V1+V-Out
aux(8) =< -V1/2+V/2
aux(13) =< V1/2+V/2
aux(14) =< V1/2+V/2-Out/2
aux(19) =< V
aux(20) =< V/2
it(57) =< aux(11)
it(58) =< aux(11)
it(59) =< aux(11)
it(60) =< aux(11)
s(28) =< aux(11)
it(57) =< aux(12)
it(58) =< aux(12)
it(59) =< aux(12)
it(60) =< aux(12)
s(28) =< aux(12)
it(58) =< aux(13)
it(59) =< aux(13)
it(58) =< aux(14)
it(59) =< aux(14)
it(57) =< aux(19)
it(58) =< aux(19)
it(59) =< aux(19)
it(60) =< aux(19)
it(57) =< aux(20)
it(58) =< aux(20)
it(59) =< aux(20)
aux(10) =< aux(20)+1
aux(6) =< it(57)*aux(20)
aux(7) =< it(60)*aux(10)
it(58) =< aux(7)+aux(6)+aux(8)

  with precondition: [V1>=0,V>=1,Out>=0,V+V1>=Out+1] 

* Chain [[57,58,59,60,61,62],63]: 1*it(57)+2*it(58)+2*it(59)+5*it(60)+3*s(28)+0
  Such that:aux(8) =< -V1/2+V/2
aux(21) =< V1+V
aux(22) =< V1/2+V/2
aux(23) =< V
aux(24) =< V/2
it(57) =< aux(21)
it(58) =< aux(21)
it(59) =< aux(21)
it(60) =< aux(21)
s(28) =< aux(21)
it(58) =< aux(22)
it(59) =< aux(22)
it(57) =< aux(23)
it(58) =< aux(23)
it(59) =< aux(23)
it(60) =< aux(23)
it(57) =< aux(24)
it(58) =< aux(24)
it(59) =< aux(24)
aux(10) =< aux(24)+1
aux(6) =< it(57)*aux(24)
aux(7) =< it(60)*aux(10)
it(58) =< aux(7)+aux(6)+aux(8)

  with precondition: [Out=0,V1>=0,V>=1] 

* Chain [64]: 1
  with precondition: [V=0,V1=Out,V1>=0] 

* Chain [63]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of chains of main(V1,Out):
* Chain [66]: 6*s(49)+4*s(50)+16*s(52)+84*s(73)+13*s(96)+3
  Such that:aux(30) =< 1
aux(31) =< 1/2
aux(32) =< V1
s(49) =< aux(30)
s(50) =< aux(30)
s(52) =< aux(30)
s(50) =< aux(31)
s(49) =< aux(31)
s(54) =< aux(31)+1
s(55) =< s(49)*aux(31)
s(56) =< s(52)*s(54)
s(50) =< s(56)+s(55)+aux(31)
s(73) =< aux(32)

  with precondition: [Out=0,V1>=0] 

* Chain [65]: 26*s(105)+1*s(113)+2*s(114)+2*s(115)+5*s(116)+3*s(117)+3
  Such that:s(104) =< V1
s(105) =< s(104)

  with precondition: [V1>=1,Out>=0] 


#### Cost of chains of start(V1,V):
* Chain [70]: 8*s(121)+168*s(126)+2*s(134)+4*s(135)+4*s(136)+10*s(137)+6*s(138)+6*s(167)+4*s(168)+16*s(169)+26*s(174)+3
  Such that:s(164) =< 1
s(165) =< 1/2
aux(35) =< V1
aux(36) =< V1+V
aux(37) =< -V1/2+V/2
aux(38) =< V1/2+V/2
aux(39) =< V
aux(40) =< V/2
s(126) =< aux(35)
s(121) =< aux(39)
s(167) =< s(164)
s(168) =< s(164)
s(169) =< s(164)
s(168) =< s(165)
s(167) =< s(165)
s(170) =< s(165)+1
s(171) =< s(167)*s(165)
s(172) =< s(169)*s(170)
s(168) =< s(172)+s(171)+s(165)
s(134) =< aux(36)
s(135) =< aux(36)
s(136) =< aux(36)
s(137) =< aux(36)
s(138) =< aux(36)
s(135) =< aux(38)
s(136) =< aux(38)
s(134) =< aux(39)
s(135) =< aux(39)
s(136) =< aux(39)
s(137) =< aux(39)
s(134) =< aux(40)
s(135) =< aux(40)
s(136) =< aux(40)
s(139) =< aux(40)+1
s(140) =< s(134)*aux(40)
s(141) =< s(137)*s(139)
s(135) =< s(141)+s(140)+aux(37)

  with precondition: [V1>=0] 

* Chain [69]: 1
  with precondition: [V=0,V1>=0] 

* Chain [68]: 1
  with precondition: [V=1,V1>=2] 

* Chain [67]: 2
  with precondition: [V=2,V1>=3] 


Closed-form bounds of start(V1,V): 
-------------------------------------
* Chain [70] with precondition: [V1>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [69] with precondition: [V=0,V1>=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [68] with precondition: [V=1,V1>=2] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [67] with precondition: [V=2,V1>=3] 
    - Upper bound: 2 
    - Complexity: constant 

### Maximum cost of start(V1,V): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 67 ms.
* Invariants computed in 275 ms.
   - Backward Invariants 123 ms.
   - Transitive Invariants 52 ms.
* Refinement performed in 506 ms.
* Termination proved in 102 ms.
* Upper bounds computed in 808 ms.
   - Equation cost structures 295 ms.
   - Phase cost structures 404 ms.
   - Chain cost structures 135 ms.
   - Solving cost expressions 9 ms.
* Total analysis performed in 1896 ms.


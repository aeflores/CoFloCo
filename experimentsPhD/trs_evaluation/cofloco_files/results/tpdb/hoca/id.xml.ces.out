
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [fun/3]
1. recursive  : [fun1/2]
2. non_recursive  : [main/2]
3. non_recursive  : [start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into fun/3
1. SCC is partially evaluated into fun1/2
2. SCC is partially evaluated into main/2
3. SCC is partially evaluated into start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fun/3 
* CE 6 is refined into CE [11] 
* CE 5 is refined into CE [12] 


#### Refined cost equations fun/3 
* CE 11: fun(V1,V,Out) = 1
     [V>=0,V+1=Out,V1=0] 
* CE 12: fun(V1,V,Out) = 1+ fun(W1,X1,Out)
     [W1>=0,V>=0,V+1=X1,W1+1=V1] 

### Cost equations --> "Loop" of fun/3 
* CEs [12] --> Loop 8 
* CEs [11] --> Loop 9 

#### Loops of fun/3 
* Loop 8: fun(V1,V,Out)->  fun(V1',V',Out)
                  [V1'>=0,V>=0,V+1=V',V1'+1=V1] 
* Loop 9: fun(V1,V,Out) [V>=0,V+1=Out,V1=0] 

### Ranking functions of CR fun(V1,V,Out) 
* RF of phase [8]: [V1]

#### Partial ranking functions of CR fun(V1,V,Out) 
* Partial RF of phase [8]:
  - RF of loop [8:1]:
    V1


### Resulting Chains:fun(V1,V,Out) 
* [[8],9]
* [9]


### Merging Chains  fun/3 into  External patterns of execution 
* [[9]] --> 1 
* [[9,[8]]] --> 2 


### Specialization of cost equations fun1/2 
* CE 8 is refined into CE [13] 
* CE 7 is refined into CE [14] 


#### Refined cost equations fun1/2 
* CE 13: fun1(V1,Out) = 1+ fun1(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 
* CE 14: fun1(V1,Out) = 1
     [Out=0,V1=0] 

### Cost equations --> "Loop" of fun1/2 
* CEs [14] --> Loop 10 
* CEs [13] --> Loop 11 

#### Loops of fun1/2 
* Loop 10: fun1(V1,Out) [Out=0,V1=0] 
* Loop 11: fun1(V1,Out)->  fun1(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 

### Ranking functions of CR fun1(V1,Out) 
* RF of phase [11]: [V1]

#### Partial ranking functions of CR fun1(V1,Out) 
* Partial RF of phase [11]:
  - RF of loop [11:1]:
    V1


### Resulting Chains:fun1(V1,Out) 
* [[11],10]
* [10]


### Merging Chains  fun1/2 into  External patterns of execution 
* [[10]] --> 1 
* [[10,[11]]] --> 2 


### Specialization of cost equations main/2 
* CE 10 is refined into CE [15,16] 
* CE 9 is refined into CE [17] 


#### Refined cost equations main/2 
* CE 15: main(V1,Out) = 1+ fun1(W1,X1):1+ fun(Y1,Z1,A2):1
     [A2=1,Z1=0,Y1=0,X1=0,W1=0,Out=1,V1=1] 
* CE 16: main(A,A) = 1+ fun1(B,C):2+ fun(D,E,A):2
     [A>=2,A=D+1,A=C+1,A=B+1,E=0] 
* CE 17: main(V1,Out) = 1
     [Out=0,V1=0] 

### Cost equations --> "Loop" of main/2 
* CEs [16] --> Loop 12 
* CEs [15] --> Loop 13 
* CEs [17] --> Loop 14 

#### Loops of main/2 
* Loop 12: main(A,A) [A>=2] 
* Loop 13: main(V1,Out) [Out=1,V1=1] 
* Loop 14: main(V1,Out) [Out=0,V1=0] 

### Ranking functions of CR main(V1,Out) 

#### Partial ranking functions of CR main(V1,Out) 


### Resulting Chains:main(V1,Out) 
* [14]
* [13]
* [12]


### Merging Chains  main/2 into  External patterns of execution 
* [[14]] --> 1 
* [[13]] --> 2 
* [[12]] --> 3 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [18,19] 
* CE 3 is refined into CE [20,21] 
* CE 4 is refined into CE [22,23,24] 


#### Refined cost equations start/2 
* CE 18: start(V1,V) = 0+ fun(W1,X1,Y1):1
     [Y1>=1,Y1=X1+1,Y1=V+1,W1=0,V1=0] 
* CE 19: start(V1,V) = 0+ fun(V1,W1,X1):2
     [X1>=V1+1,V1>=1,X1=V1+W1+1,X1=V1+V+1] 
* CE 20: start(V1,V) = 0+ fun1(W1,X1):1
     [X1=0,W1=0,V1=0] 
* CE 21: start(V1,V) = 0+ fun1(V1,V1):2
     [V1>=1] 
* CE 22: start(V1,V) = 0+ main(W1,X1):1
     [X1=0,W1=0,V1=0] 
* CE 23: start(V1,V) = 0+ main(W1,X1):2
     [X1=1,W1=1,V1=1] 
* CE 24: start(V1,V) = 0+ main(V1,V1):3
     [V1>=2] 

### Cost equations --> "Loop" of start/2 
* CEs [19,21,23,24] --> Loop 15 
* CEs [18,20,22] --> Loop 16 

#### Loops of start/2 
* Loop 15: start(V1,V) [V1>=1] 
* Loop 16: start(V1,V) [V1=0] 

### Ranking functions of CR start(V1,V) 

#### Partial ranking functions of CR start(V1,V) 


### Resulting Chains:start(V1,V) 
* [16]
* [15]


### Merging Chains  start/2 into  External patterns of execution 
* [[16]] --> 1 
* [[15]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [8] 

 * loop 8:fun(V1,V,Out) -> [fun(V1',V',Out')] 
1
#### Cost of phase [8]:fun(V1,V,Out) -> [fun(V1',V',Out')] 
1*it(8)+0
  Such that:it(8) =< V1
it(8) =< V1-V1'

#### Cost of chains of fun(V1,V,Out):
* Chain [[8],9]: 1*it(8)+1
  Such that:it(8) =< -V+Out

  with precondition: [V+V1+1=Out,V1>=1,V>=0] 

* Chain [9]: 1
  with precondition: [V1=0,V+1=Out,V>=0] 


#### Cost of loops [11] 

 * loop 11:fun1(V1,Out) -> [fun1(V1',Out')] 
1
#### Cost of phase [11]:fun1(V1,Out) -> [fun1(V1',Out')] 
1*it(11)+0
  Such that:it(11) =< V1
it(11) =< V1-V1'

#### Cost of chains of fun1(V1,Out):
* Chain [[11],10]: 1*it(11)+1
  Such that:it(11) =< Out

  with precondition: [V1=Out,V1>=1] 

* Chain [10]: 1
  with precondition: [V1=0,Out=0] 


#### Cost of chains of main(V1,Out):
* Chain [14]: 1
  with precondition: [V1=0,Out=0] 

* Chain [13]: 3
  with precondition: [V1=1,Out=1] 

* Chain [12]: 2*s(1)+3
  Such that:aux(1) =< V1
s(1) =< aux(1)

  with precondition: [V1=Out,V1>=2] 


#### Cost of chains of start(V1,V):
* Chain [16]: 1
  with precondition: [V1=0] 

* Chain [15]: 1*s(3)+3*s(4)+3
  Such that:s(3) =< V1+1
aux(2) =< V1
s(4) =< aux(2)

  with precondition: [V1>=1] 


Closed-form bounds of start(V1,V): 
-------------------------------------
* Chain [16] with precondition: [V1=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [15] with precondition: [V1>=1] 
    - Upper bound: 4*V1+4 
    - Complexity: n 

### Maximum cost of start(V1,V): 4*V1+4 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 14 ms.
* Invariants computed in 32 ms.
   - Backward Invariants 17 ms.
   - Transitive Invariants 7 ms.
* Refinement performed in 72 ms.
* Termination proved in 9 ms.
* Upper bounds computed in 55 ms.
   - Equation cost structures 26 ms.
   - Phase cost structures 14 ms.
   - Chain cost structures 13 ms.
   - Solving cost expressions 2 ms.
* Total analysis performed in 221 ms.



Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [fun8/3]
1. recursive [non_tail,multiple] : [fun1/3]
2. non_recursive  : [fun5/4]
3. recursive [non_tail,multiple] : [fun6/4]
4. non_recursive  : [fun2/3]
5. non_recursive  : [fun/3]
6. recursive [multiple] : [fun3/5,fun4/3]
7. non_recursive  : [fun7/3]
8. non_recursive  : [main/2]
9. non_recursive  : [start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into fun8/3
1. SCC is partially evaluated into fun1/3
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into fun6/4
4. SCC is partially evaluated into fun2/3
5. SCC is partially evaluated into fun/3
6. SCC is partially evaluated into fun3/5
7. SCC is partially evaluated into fun7/3
8. SCC is partially evaluated into main/2
9. SCC is partially evaluated into start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fun8/3 
* CE 33 is refined into CE [39] 
* CE 32 is refined into CE [40] 
* CE 35 is refined into CE [41] 
* CE 34 is refined into CE [42] 


#### Refined cost equations fun8/3 
* CE 39: fun8(V1,V,Out) = 1
     [V1>=1,Out=0,V=0] 
* CE 40: fun8(V1,V,Out) = 1
     [V>=0,Out=0,V1=0] 
* CE 41: fun8(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 42: fun8(V1,V,Out) = 1+ fun8(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun8/3 
* CEs [42] --> Loop 24 
* CEs [39] --> Loop 25 
* CEs [40,41] --> Loop 26 

#### Loops of fun8/3 
* Loop 24: fun8(V1,V,Out)->  fun8(V1',V',Out')
                  [V'>=0,V1'>=0,Out=Out'+1,V'+1=V,V1'+1=V1] 
* Loop 25: fun8(V1,V,Out) [V1>=1,Out=0,V=0] 
* Loop 26: fun8(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun8(V1,V,Out) 
* RF of phase [24]: [V,V1]

#### Partial ranking functions of CR fun8(V1,V,Out) 
* Partial RF of phase [24]:
  - RF of loop [24:1]:
    V
    V1


### Resulting Chains:fun8(V1,V,Out) 
* [[24],26]
* [[24],25]
* [26]
* [25]


### Merging Chains  fun8/3 into  External patterns of execution 
* [[25],[26]] --> 1 
* [[25,[24]],[26,[24]]] --> 2 


### Specialization of cost equations fun1/3 
* CE 29 is refined into CE [43] 
* CE 31 is refined into CE [44] 
* CE 30 is refined into CE [45,46] 


#### Refined cost equations fun1/3 
* CE 43: fun1(V1,V,Out) = 1
     [Out>=0,V>=0,V+Out+2=V1] 
* CE 44: fun1(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 45: fun1(V1,V,Out) = 1+ fun1(W1,X1,Y1)+ fun1(Z1,A2,B2)+ fun8(Y1,B2,C2):1
     [Z1>=0,W1>=0,B2>=0,Y1>=0,V>=0,V+W1+Z1+2=V1,A2=2,X1=1,C2=0,Out=0] 
* CE 46: fun1(V1,V,Out) = 1+ fun1(W1,X1,Y1)+ fun1(Z1,A2,B2)+ fun8(Y1,B2,Out):2
     [B2>=Out,Y1>=Out,Z1>=0,W1>=0,Out>=1,V>=0,V+W1+Z1+2=V1,A2=2,X1=1] 

### Cost equations --> "Loop" of fun1/3 
* CEs [46] --> Loop 27 
* CEs [45] --> Loop 28 
* CEs [43] --> Loop 29 
* CEs [44] --> Loop 30 

#### Loops of fun1/3 
* Loop 27: fun1(V1,V,Out)->  fun1(V1',V',Out')  fun1(V1'2,V'2,Out'2)
                  [V1>=V+V1'+2,Out'2>=Out,Out'>=Out,V1'>=0,Out>=1,V>=0,V+V1'+V1'2+2=V1,V'2=2,V'=1] 
* Loop 28: fun1(V1,V,Out)->  fun1(V1',V',Out')  fun1(V1'2,V'2,Out'2)
                  [V1>=V+V1'+2,Out'2>=0,Out'>=0,V1'>=0,V>=0,V+V1'+V1'2+2=V1,V'2=2,V'=1,Out=0] 
* Loop 29: fun1(V1,V,Out) [V1>=V+2,V>=0,V+Out+2=V1] 
* Loop 30: fun1(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun1(V1,V,Out) 
* RF of phase [27]: [V1/2-1/2,V1/3-V/3-1/3]
* RF of phase [28]: [V1/2-1/2,V1/3-V/3-1/3]

#### Partial ranking functions of CR fun1(V1,V,Out) 
* Partial RF of phase [27]:
  - RF of loop [27:1]:
    V1/2-1/2
    V1/3-V/3-1/3
  - RF of loop [27:2]:
    V1-1
    V1/2-V/2-1/2
* Partial RF of phase [28]:
  - RF of loop [28:1]:
    V1/2-1/2
    V1/3-V/3-1/3
  - RF of loop [28:2]:
    V1-1
    V1/2-V/2-1/2


### Resulting Chains:fun1(V1,V,Out) 
* [30]
* [29]
* [multiple([28],[[multiple([27],[[29]])],[30],[29]])]
* [multiple([27],[[29]])]


### Merging Chains  fun1/3 into  External patterns of execution 
* [[30],[multiple([28],[[multiple([27],[[29]])],[30],[29]])]] --> 1 
* [[29]] --> 2 
* [[multiple([27],[[29]])]] --> 3 


### Specialization of cost equations fun6/4 
* CE 23 is refined into CE [47] 
* CE 25 is refined into CE [48] 
* CE 24 is refined into CE [49] 


#### Refined cost equations fun6/4 
* CE 47: fun6(V1,V,V5,Out) = 1
     [V5>=0,V>=1,V1>=1,V1+V+2=Out] 
* CE 48: fun6(V1,V,V5,Out) = 0
     [V5>=0,V>=0,V1>=0,Out=0] 
* CE 49: fun6(V1,V,V5,Out) = 2+ fun6(W5,V,X5,Y5)+ fun6(Z5,V,A6,B6)
     [B6>=0,Z5>=0,Y5>=0,W5>=0,V5>=0,V>=1,2*Y5+2*B6+3=Out,W5+Z5+1=V1,A6=0,X5=2] 

### Cost equations --> "Loop" of fun6/4 
* CEs [49] --> Loop 31 
* CEs [47] --> Loop 32 
* CEs [48] --> Loop 33 

#### Loops of fun6/4 
* Loop 31: fun6(V1,V,V5,Out)->  fun6(V1',V,V5',Out')  fun6(V1'2,V,V5'2,Out'2)
                  [Out'2>=0,V1'2>=0,Out'>=0,V1'>=0,V5>=0,V>=1,2*Out'+2*Out'2+3=Out,V1'+V1'2+1=V1,V5'2=0,V5'=2] 
* Loop 32: fun6(V1,V,V5,Out) [V5>=0,V>=1,V1>=1,V1+V+2=Out] 
* Loop 33: fun6(V1,V,V5,Out) [V5>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun6(V1,V,V5,Out) 
* RF of phase [31]: [V1]

#### Partial ranking functions of CR fun6(V1,V,V5,Out) 
* Partial RF of phase [31]:
  - RF of loop [31:1,31:2]:
    V1


### Resulting Chains:fun6(V1,V,V5,Out) 
* [33]
* [32]
* [multiple([31],[[33],[32]])]


### Merging Chains  fun6/4 into  External patterns of execution 
* [[33]] --> 1 
* [[32],[multiple([31],[[33],[32]])]] --> 2 


### Specialization of cost equations fun2/3 
* CE 36 is refined into CE [50,51] 
* CE 37 is refined into CE [52] 


#### Refined cost equations fun2/3 
* CE 50: fun2(V1,V,Out) = 1+ fun6(W1,X1,Y1,Z1):1
     [W1>=0,V>=0,W1+3=X1,W1+1=V1,Z1=0,Y1=1,Out=0] 
* CE 51: fun2(V1,V,Out) = 1+ fun6(W1,X1,Y1,Out):2
     [Out>=3,W1>=1,V>=0,W1+3=X1,W1+1=V1,Y1=1] 
* CE 52: fun2(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 

### Cost equations --> "Loop" of fun2/3 
* CEs [51] --> Loop 34 
* CEs [50,52] --> Loop 35 

#### Loops of fun2/3 
* Loop 34: fun2(V1,V,Out) [Out>=3,V>=0,V1>=2] 
* Loop 35: fun2(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun2(V1,V,Out) 

#### Partial ranking functions of CR fun2(V1,V,Out) 


### Resulting Chains:fun2(V1,V,Out) 
* [35]
* [34]


### Merging Chains  fun2/3 into  External patterns of execution 
* [[35]] --> 1 
* [[34]] --> 2 


### Specialization of cost equations fun/3 
* CE 14 is refined into CE [53,54,55,56] 
* CE 15 is refined into CE [57] 


#### Refined cost equations fun/3 
* CE 53: fun(V1,V,Out) = 1+ fun2(W1,X1,Y1):1+ fun1(Z1,A2,B2):1
     [W1>=0,V>=0,W1+2=V1,B2=0,A2=0,Z1=0,Y1=0,X1=1,Out=1] 
* CE 54: fun(V1,V,Out) = 1+ fun2(W1,X1,Y1):2+ fun1(Y1,Z1,A2):1
     [Y1>=3,W1>=2,V>=0,W1+2=V1,A2=0,Z1=0,X1=1,Out=1] 
* CE 55: fun(V1,V,Out) = 1+ fun2(W1,X1,Y1):2+ fun1(Z1,A2,B2):2
     [B2>=1,W1>=2,V>=0,B2+2=Z1,B2+2=Y1,B2+1=Out,W1+2=V1,A2=0,X1=1] 
* CE 56: fun(V1,V,Out) = 1+ fun2(W1,X1,Y1):2+ fun1(Y1,Z1,A2):3
     [Y1>=2*A2+9,A2>=1,W1>=2,V>=0,A2+1=Out,W1+2=V1,Z1=0,X1=1] 
* CE 57: fun(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 

### Cost equations --> "Loop" of fun/3 
* CEs [55,56] --> Loop 36 
* CEs [53,54] --> Loop 37 
* CEs [57] --> Loop 38 

#### Loops of fun/3 
* Loop 36: fun(V1,V,Out) [Out>=2,V>=0,V1>=4] 
* Loop 37: fun(V1,V,Out) [V>=0,V1>=2,Out=1] 
* Loop 38: fun(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun(V1,V,Out) 

#### Partial ranking functions of CR fun(V1,V,Out) 


### Resulting Chains:fun(V1,V,Out) 
* [38]
* [37]
* [36]


### Merging Chains  fun/3 into  External patterns of execution 
* [[38]] --> 1 
* [[37]] --> 2 
* [[36]] --> 3 


### Specialization of cost equations fun3/5 
* CE 22 is refined into CE [58] 
* CE 16 is refined into CE [59,60,61] 
* CE 18 is refined into CE [62,63,64,65,66,67,68,69,70] 
* CE 21 is refined into CE [71] 
* CE 20 is refined into CE [72,73,74] 
* CE 19 is refined into CE [75,76,77] 
* CE 17 is refined into CE [78] 


#### Refined cost equations fun3/5 
* CE 58: fun3(V1,V,V5,V10,Out) = 0
     [V10>=0,V5>=0,V>=0,V1>=0,Out=0] 
* CE 59: fun3(V1,V,V5,V10,Out) = 1+ fun(W10,X10,Y10):1
     [V>=W10+2,W10>=0,V10>=0,V5>=0,Y10=0,X10=1,Out=1,V1=0] 
* CE 60: fun3(V1,V,V5,V10,Out) = 1+ fun(W10,X10,Y10):2
     [V>=W10+2,W10>=2,V10>=0,V5>=0,Y10=1,X10=1,Out=2,V1=0] 
* CE 61: fun3(V1,V,V5,V10,Out) = 1+ fun(W10,X10,Y10):3
     [V>=W10+2,Y10>=2,W10>=4,V10>=0,V5>=0,Y10+1=Out,X10=1,V1=0] 
* CE 62: fun3(V1,V,V5,V10,Out) = 2+ fun(W10,X10,Y10):1+ fun(Z10,A11,B11):1
     [V5>=Z10+2,V>=W10+2,Z10>=0,W10>=0,V10>=0,B11=0,A11=2,Y10=0,X10=1,Out=1,V1=0] 
* CE 63: fun3(V1,V,V5,V10,Out) = 2+ fun(W10,X10,Y10):1+ fun(Z10,A11,B11):2
     [V5>=Z10+2,V>=W10+2,Z10>=2,W10>=0,V10>=0,B11=1,A11=2,Y10=0,X10=1,Out=2,V1=0] 
* CE 64: fun3(V1,V,V5,V10,Out) = 2+ fun(W10,X10,Y10):1+ fun(Z10,A11,B11):3
     [V5>=Z10+2,V>=W10+2,B11>=2,Z10>=4,W10>=0,V10>=0,B11+1=Out,A11=2,Y10=0,X10=1,V1=0] 
* CE 65: fun3(V1,V,V5,V10,Out) = 2+ fun(W10,X10,Y10):2+ fun(Z10,A11,B11):1
     [V5>=Z10+2,V>=W10+2,Z10>=0,W10>=2,V10>=0,B11=0,A11=2,Y10=1,X10=1,Out=2,V1=0] 
* CE 66: fun3(V1,V,V5,V10,Out) = 2+ fun(W10,X10,Y10):2+ fun(Z10,A11,B11):2
     [V5>=Z10+2,V>=W10+2,Z10>=2,W10>=2,V10>=0,B11=1,A11=2,Y10=1,X10=1,Out=3,V1=0] 
* CE 67: fun3(V1,V,V5,V10,Out) = 2+ fun(W10,X10,Y10):2+ fun(Z10,A11,B11):3
     [V5>=Z10+2,V>=W10+2,B11>=2,Z10>=4,W10>=2,V10>=0,B11+2=Out,A11=2,Y10=1,X10=1,V1=0] 
* CE 68: fun3(V1,V,V5,V10,Out) = 2+ fun(W10,X10,Y10):3+ fun(Z10,A11,B11):1
     [V5>=Z10+2,V>=W10+2,Z10>=0,Y10>=2,W10>=4,V10>=0,Y10+1=Out,B11=0,A11=2,X10=1,V1=0] 
* CE 69: fun3(V1,V,V5,V10,Out) = 2+ fun(W10,X10,Y10):3+ fun(Z10,A11,B11):2
     [V5>=Z10+2,V>=W10+2,Z10>=2,Y10>=2,W10>=4,V10>=0,Y10+2=Out,B11=1,A11=2,X10=1,V1=0] 
* CE 70: fun3(V1,V,V5,V10,Out) = 2+ fun(W10,X10,Y10):3+ fun(Z10,A11,B11):3
     [V5>=Z10+2,V>=W10+2,B11>=2,Z10>=4,Y10>=2,W10>=4,V10>=0,Y10+B11+1=Out,A11=2,X10=1,V1=0] 
* CE 71: fun3(V1,V,V5,V10,Out) = 2+ fun3(W10,X10,Y10,Z10,A11)+ fun3(B11,C11,D11,E11,F11)
     [V5>=B11+C11+D11+2,V>=W10+X10+Y10+2,D11>=0,C11>=0,B11>=0,Y10>=0,X10>=0,W10>=0,V10>=0,A11+F11+1=Out,E11=2,Z10=1,V1=0] 
* CE 72: fun3(V1,V,V5,V10,Out) = 2+ fun(W10,X10,Y10):1+ fun3(Z10,A11,B11,C11,D11)
     [V5>=Z10+A11+B11+2,V>=W10+2,B11>=0,A11>=0,Z10>=0,W10>=0,V10>=0,D11+1=Out,C11=2,Y10=0,X10=1,V1=0] 
* CE 73: fun3(V1,V,V5,V10,Out) = 2+ fun(W10,X10,Y10):2+ fun3(Z10,A11,B11,C11,D11)
     [V5>=Z10+A11+B11+2,V>=W10+2,B11>=0,A11>=0,Z10>=0,W10>=2,V10>=0,D11+2=Out,C11=2,Y10=1,X10=1,V1=0] 
* CE 74: fun3(V1,V,V5,V10,Out) = 2+ fun(W10,X10,Y10):3+ fun3(Z10,A11,B11,C11,D11)
     [V5>=Z10+A11+B11+2,V>=W10+2,B11>=0,A11>=0,Z10>=0,Y10>=2,W10>=4,V10>=0,Y10+D11+1=Out,C11=2,X10=1,V1=0] 
* CE 75: fun3(V1,V,V5,V10,Out) = 2+ fun3(W10,X10,Y10,Z10,A11)+ fun(B11,C11,D11):1
     [V>=W10+X10+Y10+2,V5>=B11+2,Y10>=0,X10>=0,W10>=0,B11>=0,V10>=0,A11+1=Out,Z10=1,D11=0,C11=2,V1=0] 
* CE 76: fun3(V1,V,V5,V10,Out) = 2+ fun3(W10,X10,Y10,Z10,A11)+ fun(B11,C11,D11):2
     [V>=W10+X10+Y10+2,V5>=B11+2,Y10>=0,X10>=0,W10>=0,B11>=2,V10>=0,A11+2=Out,Z10=1,D11=1,C11=2,V1=0] 
* CE 77: fun3(V1,V,V5,V10,Out) = 2+ fun3(W10,X10,Y10,Z10,A11)+ fun(B11,C11,D11):3
     [V>=W10+X10+Y10+2,V5>=B11+2,Y10>=0,X10>=0,W10>=0,D11>=2,B11>=4,V10>=0,D11+A11+1=Out,Z10=1,C11=2,V1=0] 
* CE 78: fun3(V1,V,V5,V10,Out) = 1+ fun3(W10,X10,Y10,Z10,A11)
     [V>=W10+X10+Y10+2,Y10>=0,X10>=0,W10>=0,V10>=0,V5>=0,A11+1=Out,Z10=1,V1=0] 

### Cost equations --> "Loop" of fun3/5 
* CEs [74] --> Loop 39 
* CEs [73] --> Loop 40 
* CEs [72] --> Loop 41 
* CEs [77] --> Loop 42 
* CEs [76] --> Loop 43 
* CEs [75,78] --> Loop 44 
* CEs [71] --> Loop 45 
* CEs [58] --> Loop 46 
* CEs [61,68,69] --> Loop 47 
* CEs [64,67,70] --> Loop 48 
* CEs [66] --> Loop 49 
* CEs [60,65] --> Loop 50 
* CEs [63] --> Loop 51 
* CEs [59,62] --> Loop 52 

#### Loops of fun3/5 
* Loop 39: fun3(V1,V,V5,V10,Out)->  fun3(V1',V',V5',V10',Out')
                  [V5>=V1'+V'+V5'+2,Out>=Out'+3,V5'>=0,V'>=0,V1'>=0,V10>=0,V>=6,V10'=2,V1=0] 
* Loop 40: fun3(V1,V,V5,V10,Out)->  fun3(V1',V',V5',V10',Out')
                  [V5>=V1'+V'+V5'+2,V5'>=0,V'>=0,V1'>=0,V10>=0,V>=4,Out=Out'+2,V10'=2,V1=0] 
* Loop 41: fun3(V1,V,V5,V10,Out)->  fun3(V1',V',V5',V10',Out')
                  [V5>=V1'+V'+V5'+2,V5'>=0,V'>=0,V1'>=0,V10>=0,V>=2,Out=Out'+1,V10'=2,V1=0] 
* Loop 42: fun3(V1,V,V5,V10,Out)->  fun3(V1',V',V5',V10',Out')
                  [V>=V1'+V'+V5'+2,Out>=Out'+3,V5'>=0,V'>=0,V1'>=0,V10>=0,V5>=6,V10'=1,V1=0] 
* Loop 43: fun3(V1,V,V5,V10,Out)->  fun3(V1',V',V5',V10',Out')
                  [V>=V1'+V'+V5'+2,V5'>=0,V'>=0,V1'>=0,V10>=0,V5>=4,Out=Out'+2,V10'=1,V1=0] 
* Loop 44: fun3(V1,V,V5,V10,Out)->  fun3(V1',V',V5',V10',Out')
                  [V>=V1'+V'+V5'+2,V5'>=0,V'>=0,V1'>=0,V10>=0,V5>=0,Out=Out'+1,V10'=1,V1=0] 
* Loop 45: fun3(V1,V,V5,V10,Out)->  fun3(V1',V',V5',V10',Out')  fun3(V1'2,V'2,V5'2,V10'2,Out'2)
                  [V5>=V1'2+V'2+V5'2+2,V>=V1'+V'+V5'+2,V5'2>=0,V'2>=0,V1'2>=0,V5'>=0,V'>=0,V1'>=0,V10>=0,Out=Out'+Out'2+1,V10'2=2,V10'=1,V1=0] 
* Loop 46: fun3(V1,V,V5,V10,Out) [V10>=0,V5>=0,V>=0,V1>=0,Out=0] 
* Loop 47: fun3(V1,V,V5,V10,Out) [Out>=3,V10>=0,V5>=0,V>=6,V1=0] 
* Loop 48: fun3(V1,V,V5,V10,Out) [Out>=3,V10>=0,V5>=6,V>=2,V1=0] 
* Loop 49: fun3(V1,V,V5,V10,Out) [V10>=0,V5>=4,V>=4,Out=3,V1=0] 
* Loop 50: fun3(V1,V,V5,V10,Out) [V10>=0,V5>=0,V>=4,Out=2,V1=0] 
* Loop 51: fun3(V1,V,V5,V10,Out) [V10>=0,V5>=4,V>=2,Out=2,V1=0] 
* Loop 52: fun3(V1,V,V5,V10,Out) [V10>=0,V5>=0,V>=2,Out=1,V1=0] 

### Ranking functions of CR fun3(V1,V,V5,V10,Out) 
* RF of phase [39,40,41,42,43,44,45]: [V/2+V5/2-1/2,V1/2+V/2+V5/2-1/2]

#### Partial ranking functions of CR fun3(V1,V,V5,V10,Out) 
* Partial RF of phase [39,40,41,42,43,44,45]:
  - RF of loop [39:1]:
    V/4+V5/4-7/4
    V1/4+V/4+V5/4-7/4
  - RF of loop [39:1,40:1,41:1,45:2]:
    V1+V5-1 depends on loops [42:1,43:1,44:1,45:1] 
    V5-1 depends on loops [42:1,43:1,44:1,45:1] 
  - RF of loop [40:1]:
    V/3+V5/3-5/3
    V1/3+V/3+V5/3-5/3
  - RF of loop [41:1,45:2]:
    V/2+V5/2-3/2
    V1/2+V/2+V5/2-3/2
  - RF of loop [42:1]:
    V/8+V5/8-7/8
    V1/8+V/8+V5/8-7/8
  - RF of loop [42:1,43:1,44:1,45:1]:
    V/2-1/2 depends on loops [39:1,40:1,41:1,45:2] 
    V1/2+V/2-1/2 depends on loops [39:1,40:1,41:1,45:2] 
  - RF of loop [43:1]:
    V/6+V5/6-5/6
    V1/6+V/6+V5/6-5/6
  - RF of loop [44:1]:
    V/2+V5/2-1/2
    V1/2+V/2+V5/2-1/2
  - RF of loop [45:1]:
    V/4+V5/4-3/4
    V1/4+V/4+V5/4-3/4


### Resulting Chains:fun3(V1,V,V5,V10,Out) 
* [52]
* [51]
* [50]
* [49]
* [48]
* [47]
* [46]
* [multiple([39,40,41,42,43,44,45],[[52],[51],[50],[49],[48],[47],[46]])]


### Merging Chains  fun3/5 into  External patterns of execution 
* [[47],[48],[52],[multiple([39,40,41,42,43,44,45],[[52],[51],[50],[49],[48],[47],[46]])]] --> 1 
* [[51]] --> 2 
* [[50]] --> 3 
* [[49]] --> 4 
* [[46]] --> 5 


### Specialization of cost equations fun7/3 
* CE 26 is refined into CE [79,80,81] 
* CE 27 is refined into CE [82,83,84,85,86] 
* CE 28 is refined into CE [87] 


#### Refined cost equations fun7/3 
* CE 79: fun7(V1,V,Out) = 1+ fun(W1,V,X1):1
     [V1>=W1+2,V>=0,W1>=0,X1=0,Out=0] 
* CE 80: fun7(V1,V,Out) = 1+ fun(W1,V,X1):2
     [V1>=W1+2,V>=0,W1>=2,X1=1,Out=1] 
* CE 81: fun7(V1,V,Out) = 1+ fun(W1,V,Out):3
     [V1>=W1+2,Out>=2,V>=0,W1>=4] 
* CE 82: fun7(V1,V,Out) = 1+ fun3(W1,X1,Y1,V,Out):1
     [V1>=X1+Y1+2,Out>=1,V>=0,Y1>=0,X1>=2,W1=0] 
* CE 83: fun7(V1,V,Out) = 1+ fun3(W1,X1,Y1,V,Z1):2
     [V1>=X1+Y1+2,V>=0,Y1>=4,X1>=2,Z1=2,W1=0,Out=2] 
* CE 84: fun7(V1,V,Out) = 1+ fun3(W1,X1,Y1,V,Z1):3
     [V1>=X1+Y1+2,V>=0,Y1>=0,X1>=4,Z1=2,W1=0,Out=2] 
* CE 85: fun7(V1,V,Out) = 1+ fun3(W1,X1,Y1,V,Z1):4
     [V1>=X1+Y1+2,V>=0,Y1>=4,X1>=4,Z1=3,W1=0,Out=3] 
* CE 86: fun7(V1,V,Out) = 1+ fun3(W1,X1,Y1,V,Z1):5
     [V1>=W1+X1+Y1+2,V>=0,Y1>=0,X1>=0,W1>=0,Z1=0,Out=0] 
* CE 87: fun7(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 

### Cost equations --> "Loop" of fun7/3 
* CEs [85] --> Loop 53 
* CEs [83,84] --> Loop 54 
* CEs [80,81,82] --> Loop 55 
* CEs [79,86,87] --> Loop 56 

#### Loops of fun7/3 
* Loop 53: fun7(V1,V,Out) [V>=0,V1>=10,Out=3] 
* Loop 54: fun7(V1,V,Out) [V>=0,V1>=6,Out=2] 
* Loop 55: fun7(V1,V,Out) [Out>=1,V>=0,V1>=4] 
* Loop 56: fun7(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun7(V1,V,Out) 

#### Partial ranking functions of CR fun7(V1,V,Out) 


### Resulting Chains:fun7(V1,V,Out) 
* [56]
* [55]
* [54]
* [53]


### Merging Chains  fun7/3 into  External patterns of execution 
* [[56]] --> 1 
* [[54],[55]] --> 2 
* [[53]] --> 3 


### Specialization of cost equations main/2 
* CE 38 is refined into CE [88,89,90,91] 


#### Refined cost equations main/2 
* CE 88: main(V1,Out) = 1+ fun2(W1,X1,Y1):1+ fun7(Z1,A2,B2):1
     [W1>=1,W1=V1+1,B2=0,A2=0,Z1=0,Y1=0,X1=0,Out=0] 
* CE 89: main(V1,Out) = 1+ fun2(W1,X1,Y1):2+ fun7(Y1,Z1,A2):1
     [Y1>=3,W1>=2,W1=V1+1,A2=0,Z1=0,X1=0,Out=0] 
* CE 90: main(V1,Out) = 1+ fun2(W1,X1,Y1):2+ fun7(Y1,Z1,Out):2
     [Out>=1,Y1>=4,W1>=2,W1=V1+1,Z1=0,X1=0] 
* CE 91: main(V1,Out) = 1+ fun2(W1,X1,Y1):2+ fun7(Y1,Z1,A2):3
     [Y1>=10,W1>=2,W1=V1+1,A2=3,Z1=0,X1=0,Out=3] 

### Cost equations --> "Loop" of main/2 
* CEs [90,91] --> Loop 57 
* CEs [88,89] --> Loop 58 

#### Loops of main/2 
* Loop 57: main(V1,Out) [Out>=1,V1>=1] 
* Loop 58: main(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR main(V1,Out) 

#### Partial ranking functions of CR main(V1,Out) 


### Resulting Chains:main(V1,Out) 
* [58]
* [57]


### Merging Chains  main/2 into  External patterns of execution 
* [[58]] --> 1 
* [[57]] --> 2 


### Specialization of cost equations start/4 
* CE 2 is refined into CE [92] 
* CE 3 is refined into CE [93,94,95] 
* CE 4 is refined into CE [96,97,98,99,100] 
* CE 5 is refined into CE [101,102,103] 
* CE 6 is refined into CE [104,105,106,107,108] 
* CE 7 is refined into CE [109] 
* CE 8 is refined into CE [110,111] 
* CE 9 is refined into CE [112,113,114] 
* CE 10 is refined into CE [115,116,117] 
* CE 11 is refined into CE [118,119] 
* CE 12 is refined into CE [120,121] 
* CE 13 is refined into CE [122,123] 


#### Refined cost equations start/4 
* CE 92: start(V1,V,V5,V10) = 0
     [V>=0,V1>=0] 
* CE 93: start(V1,V,V5,V10) = 1+ fun(W10,V,X10):1
     [V1>=W10+2,V>=0,W10>=0,X10=0] 
* CE 94: start(V1,V,V5,V10) = 1+ fun(W10,V,X10):2
     [V1>=W10+2,V>=0,W10>=2,X10=1] 
* CE 95: start(V1,V,V5,V10) = 1+ fun(W10,V,X10):3
     [V1>=W10+2,X10>=2,V>=0,W10>=4] 
* CE 96: start(V1,V,V5,V10) = 1+ fun3(W10,X10,Y10,V,Z10):1
     [V1>=X10+Y10+2,Z10>=1,V>=0,Y10>=0,X10>=2,W10=0] 
* CE 97: start(V1,V,V5,V10) = 1+ fun3(W10,X10,Y10,V,Z10):2
     [V1>=X10+Y10+2,V>=0,Y10>=4,X10>=2,Z10=2,W10=0] 
* CE 98: start(V1,V,V5,V10) = 1+ fun3(W10,X10,Y10,V,Z10):3
     [V1>=X10+Y10+2,V>=0,Y10>=0,X10>=4,Z10=2,W10=0] 
* CE 99: start(V1,V,V5,V10) = 1+ fun3(W10,X10,Y10,V,Z10):4
     [V1>=X10+Y10+2,V>=0,Y10>=4,X10>=4,Z10=3,W10=0] 
* CE 100: start(V1,V,V5,V10) = 1+ fun3(W10,X10,Y10,V,Z10):5
     [V1>=W10+X10+Y10+2,V>=0,Y10>=0,X10>=0,W10>=0,Z10=0] 
* CE 101: start(V1,V,V5,V10) = 0+ fun(V1,V,W10):1
     [V>=0,V1>=0,W10=0] 
* CE 102: start(V1,V,V5,V10) = 0+ fun(V1,V,W10):2
     [V>=0,V1>=2,W10=1] 
* CE 103: start(V1,V,V5,V10) = 0+ fun(V1,V,W10):3
     [W10>=2,V>=0,V1>=4] 
* CE 104: start(V1,V,V5,V10) = 0+ fun3(W10,V,V5,V10,X10):1
     [X10>=1,V10>=0,V5>=0,V>=2,W10=0,V1=0] 
* CE 105: start(V1,V,V5,V10) = 0+ fun3(W10,V,V5,V10,X10):2
     [V10>=0,V5>=4,V>=2,X10=2,W10=0,V1=0] 
* CE 106: start(V1,V,V5,V10) = 0+ fun3(W10,V,V5,V10,X10):3
     [V10>=0,V5>=0,V>=4,X10=2,W10=0,V1=0] 
* CE 107: start(V1,V,V5,V10) = 0+ fun3(W10,V,V5,V10,X10):4
     [V10>=0,V5>=4,V>=4,X10=3,W10=0,V1=0] 
* CE 108: start(V1,V,V5,V10) = 0+ fun3(V1,V,V5,V10,W10):5
     [V10>=0,V5>=0,V>=0,V1>=0,W10=0] 
* CE 109: start(V1,V,V5,V10) = 1
     [V5>=0,V>=0,V1>=0] 
* CE 110: start(V1,V,V5,V10) = 0+ fun6(V1,V,V5,W10):1
     [V5>=0,V>=0,V1>=0,W10=0] 
* CE 111: start(V1,V,V5,V10) = 0+ fun6(V1,V,V5,W10):2
     [W10>=3,V5>=0,V>=1,V1>=1] 
* CE 112: start(V1,V,V5,V10) = 0+ fun7(V1,V,W10):1
     [V>=0,V1>=0,W10=0] 
* CE 113: start(V1,V,V5,V10) = 0+ fun7(V1,V,W10):2
     [W10>=1,V>=0,V1>=4] 
* CE 114: start(V1,V,V5,V10) = 0+ fun7(V1,V,W10):3
     [V>=0,V1>=10,W10=3] 
* CE 115: start(V1,V,V5,V10) = 0+ fun1(V1,V,W10):1
     [V>=0,V1>=0,W10=0] 
* CE 116: start(V1,V,V5,V10) = 0+ fun1(W10,V,X10):2
     [X10>=0,V>=0,V+X10+2=W10,V+X10+2=V1] 
* CE 117: start(V1,V,V5,V10) = 0+ fun1(V1,V,W10):3
     [V1>=2*W10+V+9,W10>=1,V>=0] 
* CE 118: start(V1,V,V5,V10) = 0+ fun8(V1,V,W10):1
     [V>=0,V1>=0,W10=0] 
* CE 119: start(V1,V,V5,V10) = 0+ fun8(V1,V,W10):2
     [V>=W10,V1>=W10,W10>=1] 
* CE 120: start(V1,V,V5,V10) = 0+ fun2(V1,V,W10):1
     [V>=0,V1>=0,W10=0] 
* CE 121: start(V1,V,V5,V10) = 0+ fun2(V1,V,W10):2
     [W10>=3,V>=0,V1>=2] 
* CE 122: start(V1,V,V5,V10) = 0+ main(V1,W10):1
     [V1>=0,W10=0] 
* CE 123: start(V1,V,V5,V10) = 0+ main(V1,W10):2
     [W10>=1,V1>=1] 

### Cost equations --> "Loop" of start/4 
* CEs [92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123] --> Loop 59 

#### Loops of start/4 
* Loop 59: start(V1,V,V5,V10) [V1>=0] 

### Ranking functions of CR start(V1,V,V5,V10) 

#### Partial ranking functions of CR start(V1,V,V5,V10) 


### Resulting Chains:start(V1,V,V5,V10) 
* [59]


### Merging Chains  start/4 into  External patterns of execution 
* [[59]] --> 1 


Computing Bounds
=====================================

#### Cost of loops [24] 

 * loop 24:fun8(V1,V,Out) -> [fun8(V1',V',Out')] 
1
#### Cost of phase [24]:fun8(V1,V,Out) -> [fun8(V1',V',Out')] 
1*it(24)+0
  Such that:it(24) =< V1
it(24) =< V1-V1'
it(24) =< V
it(24) =< V-V'

#### Cost of phase [24]:fun8(V1,V,Out) -> [fun8(V1',V',Out')] 
1*it(24)+0
  Such that:it(24) =< V1
it(24) =< V1-V1'
it(24) =< V
it(24) =< V-V'

#### Cost of chains of fun8(V1,V,Out):
* Chain [[24],26]: 1*it(24)+1
  Such that:it(24) =< Out

  with precondition: [Out>=1,V1>=Out,V>=Out] 

* Chain [[24],25]: 1*it(24)+1
  Such that:it(24) =< Out

  with precondition: [V=Out,V>=1,V1>=V+1] 

* Chain [26]: 1
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [25]: 1
  with precondition: [V=0,Out=0,V1>=1] 


#### Cost of loops [27] 

 * loop 27:fun1(V1,V,Out) -> [fun1(V1',V',Out'),fun1(V1'2,V'2,Out'2)] 
2*s(6)+2
  Such that:s(5) =< V1-V-V1'2
s(6) =< s(5)

#### Cost of phase [27]:fun1(V1,V,Out) -> [] 
2*it(27)+1*it([29])+2*s(7)+0
  Such that:aux(3) =< V1-V
it([29]) =< V1/8-V/8+5/8
aux(4) =< 2/13*V1
it(27) =< aux(4)
it(27) =< it([29])* (1/13)+aux(4)
s(8) =< it(27)*aux(3)
s(7) =< s(8)

#### Cost of loops [28] 

 * loop 28:fun1(V1,V,Out) -> [fun1(V1',V',Out'),fun1(V1'2,V'2,Out'2)] 
2
#### Cost of phase [28]:fun1(V1,V,Out) -> [] 
2*it(28)+1*it([29])+2*s(9)+1*s(10)+2*s(11)+0
  Such that:aux(3) =< V1-V
s(10) =< V1/8-V/8+5/8
s(13) =< 2/13*V1-2/13*V+10/13
aux(6) =< V1/3-V/3+5/3
aux(7) =< V1/7-V/7+5/7
aux(8) =< 2/7*V1-2/7*V+3/7
it([30]) =< aux(6)
it([29]) =< aux(7)
it(28) =< aux(8)
it([29]) =< aux(8)
it(28) =< it([30])* (1/7)+aux(8)
it([29]) =< it([30])* (1/7)+aux(8)
s(9) =< s(13)
s(9) =< s(10)* (1/13)+s(13)
s(12) =< s(9)*aux(3)
s(11) =< s(12)

#### Cost of chains of fun1(V1,V,Out):
* Chain [30]: 0
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [29]: 1
  with precondition: [Out+V+2=V1,V>=0,V1>=V+2] 

* Chain [multiple([28],[[multiple([27],[[29]])],[30],[29]])]: 2*it(28)+1*it([29])+2*s(9)+1*s(10)+2*s(11)+0
  Such that:aux(3) =< V1-V
s(10) =< V1/8-V/8+5/8
s(13) =< 2/13*V1-2/13*V+10/13
aux(6) =< V1/3-V/3+5/3
aux(7) =< V1/7-V/7+5/7
aux(8) =< 2/7*V1-2/7*V+3/7
it([30]) =< aux(6)
it([29]) =< aux(7)
it(28) =< aux(8)
it([29]) =< aux(8)
it(28) =< it([30])* (1/7)+aux(8)
it([29]) =< it([30])* (1/7)+aux(8)
s(9) =< s(13)
s(9) =< s(10)* (1/13)+s(13)
s(12) =< s(9)*aux(3)
s(11) =< s(12)

  with precondition: [Out=0,V>=0,V1>=V+2] 

* Chain [multiple([27],[[29]])]: 2*it(27)+1*it([29])+2*s(7)+0
  Such that:aux(3) =< V1-V
it([29]) =< V1/8-V/8+5/8
aux(4) =< 2/13*V1
it(27) =< aux(4)
it(27) =< it([29])* (1/13)+aux(4)
s(8) =< it(27)*aux(3)
s(7) =< s(8)

  with precondition: [V>=0,Out>=1,V1>=2*Out+V+9] 


#### Cost of loops [31] 

 * loop 31:fun6(V1,V,V5,Out) -> [fun6(V1',V',V5',Out'),fun6(V1'2,V'2,V5'2,Out'2)] 
2
#### Cost of phase [31]:fun6(V1,V,V5,Out) -> [] 
2*it(31)+1*it([32])+0
  Such that:it([32]) =< V1/2+1/2
aux(9) =< V1
it(31) =< aux(9)
it([32]) =< aux(9)

#### Cost of chains of fun6(V1,V,V5,Out):
* Chain [33]: 0
  with precondition: [Out=0,V1>=0,V>=0,V5>=0] 

* Chain [32]: 1
  with precondition: [V+V1+2=Out,V1>=1,V>=1,V5>=0] 

* Chain [multiple([31],[[33],[32]])]: 2*it(31)+1*it([32])+0
  Such that:it([32]) =< V1/2+1/2
aux(9) =< V1
it(31) =< aux(9)
it([32]) =< aux(9)

  with precondition: [V1>=1,V>=1,V5>=0,Out>=3] 


#### Cost of chains of fun2(V1,V,Out):
* Chain [35]: 1
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [34]: 1*s(30)+2*s(31)+2
  Such that:s(29) =< V1
s(30) =< V1/2
s(31) =< s(29)
s(30) =< s(29)

  with precondition: [V1>=2,V>=0,Out>=3] 


#### Cost of chains of fun(V1,V,Out):
* Chain [38]: 0
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [37]: 1*s(35)+1*s(38)+2*s(39)+2*s(40)+1*s(44)+2*s(45)+8*s(49)+3
  Such that:s(36) =< 3/7
s(33) =< 5/3
s(34) =< 5/7
s(35) =< 5/8
s(37) =< 10/13
s(43) =< V1
s(44) =< V1/2
s(38) =< s(34)
s(39) =< s(36)
s(38) =< s(36)
s(39) =< s(33)* (1/7)+s(36)
s(38) =< s(33)* (1/7)+s(36)
s(40) =< s(37)
s(40) =< s(35)* (1/13)+s(37)
s(45) =< s(43)
s(44) =< s(43)

  with precondition: [Out=1,V1>=2,V>=0] 

* Chain [36]: 2*s(58)+4*s(59)+5*s(64)+4
  Such that:aux(10) =< V1
aux(11) =< V1/2
s(58) =< aux(11)
s(59) =< aux(10)
s(58) =< aux(10)

  with precondition: [V1>=4,V>=0,Out>=2] 


#### Cost of loops [39,40,41,42,43,44,45] 

 * loop 39:fun3(V1,V,V5,V10,Out) -> [fun3(V1',V',V5',V10',Out')] 
2*s(195)+4*s(196)+5*s(197)+6
  Such that:s(193) =< V
s(194) =< V/2
s(195) =< s(194)
s(196) =< s(193)
s(195) =< s(193)

 * loop 40:fun3(V1,V,V5,V10,Out) -> [fun3(V1',V',V5',V10',Out')] 
1*s(213)+1*s(216)+1*s(217)+2*s(218)+2*s(219)+2*s(220)+8*s(221)+5
  Such that:s(210) =< 3/7
s(211) =< 5/3
s(212) =< 5/7
s(213) =< 5/8
s(214) =< 10/13
s(215) =< V
s(216) =< V/2
s(217) =< s(212)
s(218) =< s(210)
s(217) =< s(210)
s(218) =< s(211)* (1/7)+s(210)
s(217) =< s(211)* (1/7)+s(210)
s(219) =< s(214)
s(219) =< s(213)* (1/13)+s(214)
s(220) =< s(215)
s(216) =< s(215)

 * loop 41:fun3(V1,V,V5,V10,Out) -> [fun3(V1',V',V5',V10',Out')] 
2
 * loop 42:fun3(V1,V,V5,V10,Out) -> [fun3(V1',V',V5',V10',Out')] 
2*s(229)+4*s(230)+5*s(231)+6
  Such that:s(227) =< V5
s(228) =< V5/2
s(229) =< s(228)
s(230) =< s(227)
s(229) =< s(227)

 * loop 43:fun3(V1,V,V5,V10,Out) -> [fun3(V1',V',V5',V10',Out')] 
1*s(247)+1*s(250)+1*s(251)+2*s(252)+2*s(253)+2*s(254)+8*s(255)+5
  Such that:s(244) =< 3/7
s(245) =< 5/3
s(246) =< 5/7
s(247) =< 5/8
s(248) =< 10/13
s(249) =< V5
s(250) =< V5/2
s(251) =< s(246)
s(252) =< s(244)
s(251) =< s(244)
s(252) =< s(245)* (1/7)+s(244)
s(251) =< s(245)* (1/7)+s(244)
s(253) =< s(248)
s(253) =< s(247)* (1/13)+s(248)
s(254) =< s(249)
s(250) =< s(249)

 * loop 44:fun3(V1,V,V5,V10,Out) -> [fun3(V1',V',V5',V10',Out')] 
2
 * loop 45:fun3(V1,V,V5,V10,Out) -> [fun3(V1',V',V5',V10',Out'),fun3(V1'2,V'2,V5'2,V10'2,Out'2)] 
2
#### Cost of phase [39,40,41,42,43,44,45]:fun3(V1,V,V5,V10,Out) -> [] 
6*it(39)+7*it(40)+6*it(42)+5*it(43)+2*it(44)+2*it(45)+9*it([47])+10*it([48])+8*it([49])+5*it([50])+5*it([51])+2*it([52])+2*s(256)+6*s(257)+117*s(258)+1*s(261)+1*s(262)+1*s(263)+2*s(264)+2*s(265)+2*s(273)+6*s(274)+1*s(278)+1*s(279)+1*s(280)+2*s(281)+2*s(282)+3*s(290)+1*s(291)+2*s(292)+4*s(293)+6*s(294)+14*s(295)+4*s(302)+2*s(303)+2*s(304)+4*s(305)+8*s(306)+4*s(307)+3*s(317)+3*s(318)+6*s(319)+6*s(321)+6*s(332)+3*s(336)+6*s(340)+6*s(349)+12*s(350)+0
  Such that:aux(659) =< 1
aux(660) =< V1+V+V5+V10
aux(661) =< V1+V+V5+2*V10
aux(662) =< V1+V+V5+4*V10
aux(667) =< V1/2+V/2+V5/2
aux(669) =< V1/2+V/2+V10/2
aux(671) =< V1/3+V/3+V5/3
aux(672) =< V1/4+V/4+V5/4
aux(673) =< V1/6+V/6+V5/6
aux(674) =< V1/8+V/8+V5/8
aux(675) =< V+V5+4*V10
aux(678) =< V/2+V5/2
aux(680) =< V/2+V10/2
aux(681) =< V/3+V5/3
aux(682) =< V/4+V5/4
aux(683) =< V/6+V5/6
aux(684) =< V/8+V5/8
it(40) =< aux(660)
it(42) =< aux(660)
it(43) =< aux(660)
it(44) =< aux(660)
it(45) =< aux(660)
it([47]) =< aux(660)
it([48]) =< aux(660)
it([49]) =< aux(660)
it([50]) =< aux(660)
it([51]) =< aux(660)
it([52]) =< aux(660)
it(43) =< aux(661)
it([47]) =< aux(661)
it([48]) =< aux(661)
it([49]) =< aux(661)
it([50]) =< aux(661)
it([51]) =< aux(661)
it([52]) =< aux(661)
aux(65) =< aux(667)
aux(318) =< aux(667)
it(39) =< aux(667)
it(40) =< aux(667)
it(42) =< aux(667)
it(43) =< aux(667)
it(44) =< aux(667)
it(45) =< aux(667)
it([47]) =< aux(667)
it([48]) =< aux(667)
it([49]) =< aux(667)
it([50]) =< aux(667)
it([51]) =< aux(667)
s(311) =< aux(667)
aux(65) =< aux(671)
it(40) =< aux(671)
it(42) =< aux(671)
it(43) =< aux(671)
it(45) =< aux(671)
it([48]) =< aux(671)
it([49]) =< aux(671)
it(39) =< aux(672)
it(40) =< aux(672)
it(42) =< aux(672)
it(43) =< aux(672)
it(45) =< aux(672)
it([47]) =< aux(672)
it([48]) =< aux(672)
it([49]) =< aux(672)
it([50]) =< aux(672)
it([51]) =< aux(672)
aux(318) =< aux(673)
it(43) =< aux(673)
it(45) =< aux(673)
s(328) =< aux(673)
it(42) =< aux(674)
it(45) =< aux(674)
s(287) =< aux(674)
aux(65) =< aux(678)
aux(318) =< aux(678)
it(39) =< aux(678)
it(40) =< aux(678)
it(42) =< aux(678)
it(43) =< aux(678)
it(44) =< aux(678)
it(45) =< aux(678)
it([47]) =< aux(678)
it([48]) =< aux(678)
it([49]) =< aux(678)
it([50]) =< aux(678)
it([51]) =< aux(678)
s(311) =< aux(678)
aux(65) =< aux(681)
it(40) =< aux(681)
it(42) =< aux(681)
it(43) =< aux(681)
it(45) =< aux(681)
it([48]) =< aux(681)
it([49]) =< aux(681)
it(39) =< aux(682)
it(40) =< aux(682)
it(42) =< aux(682)
it(43) =< aux(682)
it(45) =< aux(682)
aux(318) =< aux(683)
it(43) =< aux(683)
it(45) =< aux(683)
s(328) =< aux(683)
it(42) =< aux(684)
it(45) =< aux(684)
s(287) =< aux(684)
aux(457) =< aux(678)+3
aux(155) =< aux(678)+2
aux(139) =< aux(678)+1
s(279) =< aux(661)* (1/2)
s(277) =< aux(661)* (1/2)
aux(592) =< it(45)+aux(659)
it([47]) =< it(45)+aux(659)
it([48]) =< it(45)+aux(659)
it([49]) =< it(45)+aux(659)
it([50]) =< it(45)+aux(659)
it([51]) =< it(45)+aux(659)
it([52]) =< it(45)+aux(659)
aux(431) =< it(45)*aux(457)
aux(430) =< it(40)*aux(457)
aux(83) =< it(40)*aux(155)
aux(428) =< it(39)*aux(139)
s(262) =< aux(660)* (1/2)
s(269) =< aux(65)* (10/13)
s(261) =< aux(65)* (5/8)
s(272) =< aux(65)* (5/7)
s(271) =< aux(65)* (5/3)
s(270) =< aux(65)* (3/7)
s(260) =< aux(660)* (1/2)
s(298) =< aux(592)* (10/13)
s(290) =< aux(592)* (5/8)
s(301) =< aux(592)* (5/7)
s(300) =< aux(592)* (5/3)
s(299) =< aux(592)* (3/7)
s(315) =< aux(592)* (5/8)
aux(619) =< aux(592)*2+it(45)*2+it(44)*2+it(40)*4+it(40)*2+aux(675)
it([49]) =< aux(592)*2+it(45)*2+it(44)*2+it(40)*4+it(40)*2+aux(675)
it([50]) =< aux(592)*2+it(45)*2+it(44)*2+it(40)*4+it(40)*2+aux(675)
aux(619) =< it(45)*2+it(44)*2+it(40)*4+it(40)*2+aux(675)
it([49]) =< it(45)*2+it(44)*2+it(40)*4+it(40)*2+aux(675)
it([50]) =< it(45)*2+it(44)*2+it(40)*4+it(40)*2+aux(675)
aux(645) =< it(45)*4+it(44)*2+it(40)*4+it(40)*2+aux(675)
it([51]) =< it(45)*4+it(44)*2+it(40)*4+it(40)*2+aux(675)
it([52]) =< it(45)*4+it(44)*2+it(40)*4+it(40)*2+aux(675)
aux(604) =< it(44)*2+it(40)*4+it(40)*2+aux(675)
it([51]) =< it(44)*2+it(40)*4+it(40)*2+aux(675)
it([51]) =< aux(592)*2+it(45)*2+it(44)*2+it(40)*4+it(40)*2+aux(675)
it([51]) =< it(45)*2+it(44)*2+it(40)*4+it(40)*2+aux(675)
aux(615) =< it(44)*2+it(40)*4+it(40)*2+aux(662)
it([49]) =< it(44)*2+it(40)*4+it(40)*2+aux(662)
it([48]) =< it(44)*2+it(40)*4+it(40)*2+aux(675)
it([49]) =< it(44)*2+it(40)*4+it(40)*2+aux(675)
aux(600) =< it(45)*4+it(44)*2+it(40)*4+it(40)*2+aux(662)
it([48]) =< it(45)*4+it(44)*2+it(40)*4+it(40)*2+aux(662)
it([49]) =< it(45)*4+it(44)*2+it(40)*4+it(40)*2+aux(662)
it([50]) =< it(45)*4+it(44)*2+it(40)*4+it(40)*2+aux(662)
it([51]) =< it(45)*4+it(44)*2+it(40)*4+it(40)*2+aux(662)
it([52]) =< it(45)*4+it(44)*2+it(40)*4+it(40)*2+aux(662)
it([47]) =< aux(431)+aux(430)+aux(83)+aux(428)+aux(680)
it([48]) =< aux(431)+aux(430)+aux(83)+aux(428)+aux(680)
it([49]) =< aux(431)+aux(430)+aux(83)+aux(428)+aux(680)
it([50]) =< aux(431)+aux(430)+aux(83)+aux(428)+aux(680)
it([51]) =< aux(431)+aux(430)+aux(83)+aux(428)+aux(680)
it([52]) =< aux(431)+aux(430)+aux(83)+aux(428)+aux(680)
it([47]) =< aux(431)+aux(430)+aux(83)+aux(428)+aux(669)
it([48]) =< aux(431)+aux(430)+aux(83)+aux(428)+aux(669)
it([49]) =< aux(431)+aux(430)+aux(83)+aux(428)+aux(669)
it([50]) =< aux(431)+aux(430)+aux(83)+aux(428)+aux(669)
it([51]) =< aux(431)+aux(430)+aux(83)+aux(428)+aux(669)
it([52]) =< aux(431)+aux(430)+aux(83)+aux(428)+aux(669)
s(286) =< aux(318)* (10/13)
s(278) =< aux(318)* (5/8)
s(289) =< aux(318)* (5/7)
s(288) =< aux(318)* (5/3)
s(291) =< aux(619)* (1/2)
s(314) =< aux(645)* (1/2)
s(317) =< aux(604)* (1/2)
s(347) =< aux(619)* (1/2)
s(348) =< aux(615)* (1/2)
s(359) =< aux(600)* (1/2)
s(292) =< s(301)
s(293) =< s(299)
s(292) =< s(299)
s(293) =< s(300)* (1/7)+s(299)
s(292) =< s(300)* (1/7)+s(299)
s(294) =< s(298)
s(294) =< s(290)* (1/13)+s(298)
s(321) =< aux(604)
s(317) =< aux(604)
s(349) =< s(359)
s(350) =< aux(600)
s(349) =< aux(600)
s(336) =< s(348)
s(332) =< s(347)
s(295) =< aux(619)
s(332) =< aux(619)
s(318) =< s(301)
s(319) =< s(328)
s(318) =< s(328)
s(319) =< s(300)* (1/7)+s(328)
s(318) =< s(300)* (1/7)+s(328)
s(340) =< aux(615)
s(336) =< aux(615)
s(302) =< s(315)
s(306) =< s(298)
s(306) =< s(302)* (1/13)+s(298)
s(303) =< s(314)
s(304) =< s(301)
s(305) =< s(311)
s(304) =< s(311)
s(305) =< s(300)* (1/7)+s(311)
s(304) =< s(300)* (1/7)+s(311)
s(307) =< aux(645)
s(303) =< aux(645)
s(291) =< aux(619)
s(280) =< s(289)
s(281) =< s(287)
s(280) =< s(287)
s(281) =< s(288)* (1/7)+s(287)
s(280) =< s(288)* (1/7)+s(287)
s(282) =< s(286)
s(282) =< s(278)* (1/13)+s(286)
s(274) =< aux(661)
s(279) =< aux(661)
s(273) =< s(277)
s(273) =< aux(661)
s(263) =< s(272)
s(264) =< s(270)
s(263) =< s(270)
s(264) =< s(271)* (1/7)+s(270)
s(263) =< s(271)* (1/7)+s(270)
s(265) =< s(269)
s(265) =< s(261)* (1/13)+s(269)
s(257) =< aux(660)
s(262) =< aux(660)
s(256) =< s(260)
s(256) =< aux(660)

#### Cost of chains of fun3(V1,V,V5,V10,Out):
* Chain [52]: 2
  with precondition: [V1=0,Out=1,V>=2,V5>=0,V10>=0] 

* Chain [51]: 1*s(72)+1*s(75)+1*s(76)+2*s(77)+2*s(78)+2*s(79)+8*s(80)+5
  Such that:s(69) =< 3/7
s(70) =< 5/3
s(71) =< 5/7
s(72) =< 5/8
s(73) =< 10/13
s(74) =< V5
s(75) =< V5/2
s(76) =< s(71)
s(77) =< s(69)
s(76) =< s(69)
s(77) =< s(70)* (1/7)+s(69)
s(76) =< s(70)* (1/7)+s(69)
s(78) =< s(73)
s(78) =< s(72)* (1/13)+s(73)
s(79) =< s(74)
s(75) =< s(74)

  with precondition: [V1=0,Out=2,V>=2,V5>=4,V10>=0] 

* Chain [50]: 2*s(84)+2*s(87)+2*s(88)+4*s(89)+4*s(90)+4*s(91)+16*s(92)+5
  Such that:aux(12) =< 3/7
aux(13) =< 5/3
aux(14) =< 5/7
aux(15) =< 5/8
aux(16) =< 10/13
aux(17) =< V
aux(18) =< V/2
s(84) =< aux(15)
s(87) =< aux(18)
s(88) =< aux(14)
s(89) =< aux(12)
s(88) =< aux(12)
s(89) =< aux(13)* (1/7)+aux(12)
s(88) =< aux(13)* (1/7)+aux(12)
s(90) =< aux(16)
s(90) =< s(84)* (1/13)+aux(16)
s(91) =< aux(17)
s(87) =< aux(17)

  with precondition: [V1=0,Out=2,V>=4,V5>=0,V10>=0] 

* Chain [49]: 2*s(108)+1*s(111)+2*s(112)+4*s(113)+4*s(114)+2*s(115)+16*s(116)+1*s(123)+2*s(127)+8
  Such that:s(110) =< V
s(111) =< V/2
s(122) =< V5
s(123) =< V5/2
aux(19) =< 3/7
aux(20) =< 5/3
aux(21) =< 5/7
aux(22) =< 5/8
aux(23) =< 10/13
s(108) =< aux(22)
s(112) =< aux(21)
s(113) =< aux(19)
s(112) =< aux(19)
s(113) =< aux(20)* (1/7)+aux(19)
s(112) =< aux(20)* (1/7)+aux(19)
s(114) =< aux(23)
s(114) =< s(108)* (1/13)+aux(23)
s(127) =< s(122)
s(123) =< s(122)
s(115) =< s(110)
s(111) =< s(110)

  with precondition: [V1=0,Out=3,V>=4,V5>=4,V10>=0] 

* Chain [48]: 6*s(131)+12*s(132)+28*s(133)+1*s(137)+3*s(140)+1*s(141)+2*s(142)+2*s(143)+6*s(144)+10
  Such that:s(134) =< 3/7
s(135) =< 5/3
s(136) =< 5/7
s(137) =< 5/8
s(138) =< 10/13
aux(24) =< V
aux(25) =< V/2
aux(26) =< V5
aux(27) =< V5/2
s(140) =< aux(25)
s(131) =< aux(27)
s(132) =< aux(26)
s(131) =< aux(26)
s(141) =< s(136)
s(142) =< s(134)
s(141) =< s(134)
s(142) =< s(135)* (1/7)+s(134)
s(141) =< s(135)* (1/7)+s(134)
s(143) =< s(138)
s(143) =< s(137)* (1/13)+s(138)
s(144) =< aux(24)
s(140) =< aux(24)

  with precondition: [V1=0,V>=2,V5>=6,V10>=0,Out>=3] 

* Chain [47]: 6*s(163)+12*s(164)+23*s(165)+1*s(179)+1*s(182)+1*s(183)+2*s(184)+2*s(185)+2*s(186)+9
  Such that:s(176) =< 3/7
s(177) =< 5/3
s(178) =< 5/7
s(179) =< 5/8
s(180) =< 10/13
s(181) =< V5
s(182) =< V5/2
aux(28) =< V
aux(29) =< V/2
s(183) =< s(178)
s(184) =< s(176)
s(183) =< s(176)
s(184) =< s(177)* (1/7)+s(176)
s(183) =< s(177)* (1/7)+s(176)
s(185) =< s(180)
s(185) =< s(179)* (1/13)+s(180)
s(186) =< s(181)
s(182) =< s(181)
s(163) =< aux(29)
s(164) =< aux(28)
s(163) =< aux(28)

  with precondition: [V1=0,V>=6,V5>=0,V10>=0,Out>=3] 

* Chain [46]: 0
  with precondition: [Out=0,V1>=0,V>=0,V5>=0,V10>=0] 

* Chain [multiple([39,40,41,42,43,44,45],[[52],[51],[50],[49],[48],[47],[46]])]: 6*it(39)+7*it(40)+6*it(42)+5*it(43)+2*it(44)+2*it(45)+9*it([47])+10*it([48])+8*it([49])+5*it([50])+5*it([51])+2*it([52])+2*s(256)+6*s(257)+117*s(258)+1*s(261)+1*s(262)+1*s(263)+2*s(264)+2*s(265)+2*s(273)+6*s(274)+1*s(278)+1*s(279)+1*s(280)+2*s(281)+2*s(282)+3*s(290)+1*s(291)+2*s(292)+4*s(293)+6*s(294)+14*s(295)+4*s(302)+2*s(303)+2*s(304)+4*s(305)+8*s(306)+4*s(307)+3*s(317)+3*s(318)+6*s(319)+6*s(321)+6*s(332)+3*s(336)+6*s(340)+6*s(349)+12*s(350)+0
  Such that:aux(659) =< 1
aux(660) =< V1+V+V5+V10
aux(661) =< V1+V+V5+2*V10
aux(662) =< V1+V+V5+4*V10
aux(667) =< V1/2+V/2+V5/2
aux(669) =< V1/2+V/2+V10/2
aux(671) =< V1/3+V/3+V5/3
aux(672) =< V1/4+V/4+V5/4
aux(673) =< V1/6+V/6+V5/6
aux(674) =< V1/8+V/8+V5/8
aux(675) =< V+V5+4*V10
aux(678) =< V/2+V5/2
aux(680) =< V/2+V10/2
aux(681) =< V/3+V5/3
aux(682) =< V/4+V5/4
aux(683) =< V/6+V5/6
aux(684) =< V/8+V5/8
it(40) =< aux(660)
it(42) =< aux(660)
it(43) =< aux(660)
it(44) =< aux(660)
it(45) =< aux(660)
it([47]) =< aux(660)
it([48]) =< aux(660)
it([49]) =< aux(660)
it([50]) =< aux(660)
it([51]) =< aux(660)
it([52]) =< aux(660)
it(43) =< aux(661)
it([47]) =< aux(661)
it([48]) =< aux(661)
it([49]) =< aux(661)
it([50]) =< aux(661)
it([51]) =< aux(661)
it([52]) =< aux(661)
aux(65) =< aux(667)
aux(318) =< aux(667)
it(39) =< aux(667)
it(40) =< aux(667)
it(42) =< aux(667)
it(43) =< aux(667)
it(44) =< aux(667)
it(45) =< aux(667)
it([47]) =< aux(667)
it([48]) =< aux(667)
it([49]) =< aux(667)
it([50]) =< aux(667)
it([51]) =< aux(667)
s(311) =< aux(667)
aux(65) =< aux(671)
it(40) =< aux(671)
it(42) =< aux(671)
it(43) =< aux(671)
it(45) =< aux(671)
it([48]) =< aux(671)
it([49]) =< aux(671)
it(39) =< aux(672)
it(40) =< aux(672)
it(42) =< aux(672)
it(43) =< aux(672)
it(45) =< aux(672)
it([47]) =< aux(672)
it([48]) =< aux(672)
it([49]) =< aux(672)
it([50]) =< aux(672)
it([51]) =< aux(672)
aux(318) =< aux(673)
it(43) =< aux(673)
it(45) =< aux(673)
s(328) =< aux(673)
it(42) =< aux(674)
it(45) =< aux(674)
s(287) =< aux(674)
aux(65) =< aux(678)
aux(318) =< aux(678)
it(39) =< aux(678)
it(40) =< aux(678)
it(42) =< aux(678)
it(43) =< aux(678)
it(44) =< aux(678)
it(45) =< aux(678)
it([47]) =< aux(678)
it([48]) =< aux(678)
it([49]) =< aux(678)
it([50]) =< aux(678)
it([51]) =< aux(678)
s(311) =< aux(678)
aux(65) =< aux(681)
it(40) =< aux(681)
it(42) =< aux(681)
it(43) =< aux(681)
it(45) =< aux(681)
it([48]) =< aux(681)
it([49]) =< aux(681)
it(39) =< aux(682)
it(40) =< aux(682)
it(42) =< aux(682)
it(43) =< aux(682)
it(45) =< aux(682)
aux(318) =< aux(683)
it(43) =< aux(683)
it(45) =< aux(683)
s(328) =< aux(683)
it(42) =< aux(684)
it(45) =< aux(684)
s(287) =< aux(684)
aux(457) =< aux(678)+3
aux(155) =< aux(678)+2
aux(139) =< aux(678)+1
s(279) =< aux(661)* (1/2)
s(277) =< aux(661)* (1/2)
aux(592) =< it(45)+aux(659)
it([47]) =< it(45)+aux(659)
it([48]) =< it(45)+aux(659)
it([49]) =< it(45)+aux(659)
it([50]) =< it(45)+aux(659)
it([51]) =< it(45)+aux(659)
it([52]) =< it(45)+aux(659)
aux(431) =< it(45)*aux(457)
aux(430) =< it(40)*aux(457)
aux(83) =< it(40)*aux(155)
aux(428) =< it(39)*aux(139)
s(262) =< aux(660)* (1/2)
s(269) =< aux(65)* (10/13)
s(261) =< aux(65)* (5/8)
s(272) =< aux(65)* (5/7)
s(271) =< aux(65)* (5/3)
s(270) =< aux(65)* (3/7)
s(260) =< aux(660)* (1/2)
s(298) =< aux(592)* (10/13)
s(290) =< aux(592)* (5/8)
s(301) =< aux(592)* (5/7)
s(300) =< aux(592)* (5/3)
s(299) =< aux(592)* (3/7)
s(315) =< aux(592)* (5/8)
aux(619) =< aux(592)*2+it(45)*2+it(44)*2+it(40)*4+it(40)*2+aux(675)
it([49]) =< aux(592)*2+it(45)*2+it(44)*2+it(40)*4+it(40)*2+aux(675)
it([50]) =< aux(592)*2+it(45)*2+it(44)*2+it(40)*4+it(40)*2+aux(675)
aux(619) =< it(45)*2+it(44)*2+it(40)*4+it(40)*2+aux(675)
it([49]) =< it(45)*2+it(44)*2+it(40)*4+it(40)*2+aux(675)
it([50]) =< it(45)*2+it(44)*2+it(40)*4+it(40)*2+aux(675)
aux(645) =< it(45)*4+it(44)*2+it(40)*4+it(40)*2+aux(675)
it([51]) =< it(45)*4+it(44)*2+it(40)*4+it(40)*2+aux(675)
it([52]) =< it(45)*4+it(44)*2+it(40)*4+it(40)*2+aux(675)
aux(604) =< it(44)*2+it(40)*4+it(40)*2+aux(675)
it([51]) =< it(44)*2+it(40)*4+it(40)*2+aux(675)
it([51]) =< aux(592)*2+it(45)*2+it(44)*2+it(40)*4+it(40)*2+aux(675)
it([51]) =< it(45)*2+it(44)*2+it(40)*4+it(40)*2+aux(675)
aux(615) =< it(44)*2+it(40)*4+it(40)*2+aux(662)
it([49]) =< it(44)*2+it(40)*4+it(40)*2+aux(662)
it([48]) =< it(44)*2+it(40)*4+it(40)*2+aux(675)
it([49]) =< it(44)*2+it(40)*4+it(40)*2+aux(675)
aux(600) =< it(45)*4+it(44)*2+it(40)*4+it(40)*2+aux(662)
it([48]) =< it(45)*4+it(44)*2+it(40)*4+it(40)*2+aux(662)
it([49]) =< it(45)*4+it(44)*2+it(40)*4+it(40)*2+aux(662)
it([50]) =< it(45)*4+it(44)*2+it(40)*4+it(40)*2+aux(662)
it([51]) =< it(45)*4+it(44)*2+it(40)*4+it(40)*2+aux(662)
it([52]) =< it(45)*4+it(44)*2+it(40)*4+it(40)*2+aux(662)
it([47]) =< aux(431)+aux(430)+aux(83)+aux(428)+aux(680)
it([48]) =< aux(431)+aux(430)+aux(83)+aux(428)+aux(680)
it([49]) =< aux(431)+aux(430)+aux(83)+aux(428)+aux(680)
it([50]) =< aux(431)+aux(430)+aux(83)+aux(428)+aux(680)
it([51]) =< aux(431)+aux(430)+aux(83)+aux(428)+aux(680)
it([52]) =< aux(431)+aux(430)+aux(83)+aux(428)+aux(680)
it([47]) =< aux(431)+aux(430)+aux(83)+aux(428)+aux(669)
it([48]) =< aux(431)+aux(430)+aux(83)+aux(428)+aux(669)
it([49]) =< aux(431)+aux(430)+aux(83)+aux(428)+aux(669)
it([50]) =< aux(431)+aux(430)+aux(83)+aux(428)+aux(669)
it([51]) =< aux(431)+aux(430)+aux(83)+aux(428)+aux(669)
it([52]) =< aux(431)+aux(430)+aux(83)+aux(428)+aux(669)
s(286) =< aux(318)* (10/13)
s(278) =< aux(318)* (5/8)
s(289) =< aux(318)* (5/7)
s(288) =< aux(318)* (5/3)
s(291) =< aux(619)* (1/2)
s(314) =< aux(645)* (1/2)
s(317) =< aux(604)* (1/2)
s(347) =< aux(619)* (1/2)
s(348) =< aux(615)* (1/2)
s(359) =< aux(600)* (1/2)
s(292) =< s(301)
s(293) =< s(299)
s(292) =< s(299)
s(293) =< s(300)* (1/7)+s(299)
s(292) =< s(300)* (1/7)+s(299)
s(294) =< s(298)
s(294) =< s(290)* (1/13)+s(298)
s(321) =< aux(604)
s(317) =< aux(604)
s(349) =< s(359)
s(350) =< aux(600)
s(349) =< aux(600)
s(336) =< s(348)
s(332) =< s(347)
s(295) =< aux(619)
s(332) =< aux(619)
s(318) =< s(301)
s(319) =< s(328)
s(318) =< s(328)
s(319) =< s(300)* (1/7)+s(328)
s(318) =< s(300)* (1/7)+s(328)
s(340) =< aux(615)
s(336) =< aux(615)
s(302) =< s(315)
s(306) =< s(298)
s(306) =< s(302)* (1/13)+s(298)
s(303) =< s(314)
s(304) =< s(301)
s(305) =< s(311)
s(304) =< s(311)
s(305) =< s(300)* (1/7)+s(311)
s(304) =< s(300)* (1/7)+s(311)
s(307) =< aux(645)
s(303) =< aux(645)
s(291) =< aux(619)
s(280) =< s(289)
s(281) =< s(287)
s(280) =< s(287)
s(281) =< s(288)* (1/7)+s(287)
s(280) =< s(288)* (1/7)+s(287)
s(282) =< s(286)
s(282) =< s(278)* (1/13)+s(286)
s(274) =< aux(661)
s(279) =< aux(661)
s(273) =< s(277)
s(273) =< aux(661)
s(263) =< s(272)
s(264) =< s(270)
s(263) =< s(270)
s(264) =< s(271)* (1/7)+s(270)
s(263) =< s(271)* (1/7)+s(270)
s(265) =< s(269)
s(265) =< s(261)* (1/13)+s(269)
s(257) =< aux(660)
s(262) =< aux(660)
s(256) =< s(260)
s(256) =< aux(660)

  with precondition: [V1=0,V>=2,V5>=0,V10>=0,Out>=1] 


#### Cost of chains of fun7(V1,V,Out):
* Chain [56]: 1
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [55]: 3*s(502)+3*s(505)+3*s(506)+6*s(507)+6*s(508)+24*s(509)+181*s(510)+7*s(543)+7*s(544)+6*s(545)+5*s(546)+2*s(547)+2*s(548)+9*s(549)+10*s(550)+8*s(551)+5*s(552)+5*s(553)+2*s(554)+6*s(557)+1*s(564)+1*s(571)+1*s(573)+3*s(579)+1*s(590)+1*s(593)+3*s(595)+2*s(599)+4*s(600)+6*s(601)+12*s(602)+8*s(603)+16*s(604)+3*s(605)+6*s(606)+14*s(607)+3*s(608)+6*s(609)+4*s(611)+8*s(612)+2*s(614)+4*s(615)+1*s(617)+2*s(618)+2*s(619)+6*s(620)+2*s(621)+1*s(622)+2*s(623)+2*s(624)+20*s(625)+2*s(626)+9*s(631)+11
  Such that:s(516) =< 1
aux(698) =< V1+V
s(518) =< V1+2*V
aux(699) =< V1+4*V
aux(701) =< V1/2+V/2
aux(702) =< V1/3
aux(703) =< V1/4
aux(704) =< V1/6
aux(705) =< V1/8
aux(706) =< 3/7
aux(707) =< 5/3
aux(708) =< 5/7
aux(709) =< 5/8
aux(710) =< 10/13
aux(711) =< V1
aux(712) =< V1/2
s(502) =< aux(709)
s(505) =< aux(712)
s(539) =< aux(711)
s(521) =< aux(698)
s(539) =< aux(712)
s(521) =< aux(701)
s(543) =< aux(711)
s(544) =< aux(698)
s(545) =< aux(698)
s(546) =< aux(698)
s(547) =< aux(698)
s(548) =< aux(698)
s(549) =< aux(698)
s(550) =< aux(698)
s(551) =< aux(698)
s(552) =< aux(698)
s(553) =< aux(698)
s(554) =< aux(698)
s(546) =< s(518)
s(549) =< s(518)
s(550) =< s(518)
s(551) =< s(518)
s(552) =< s(518)
s(553) =< s(518)
s(554) =< s(518)
s(555) =< aux(712)
s(556) =< aux(712)
s(557) =< aux(712)
s(544) =< aux(712)
s(545) =< aux(712)
s(546) =< aux(712)
s(547) =< aux(712)
s(548) =< aux(712)
s(549) =< aux(712)
s(550) =< aux(712)
s(551) =< aux(712)
s(552) =< aux(712)
s(553) =< aux(712)
s(555) =< aux(702)
s(544) =< aux(702)
s(545) =< aux(702)
s(546) =< aux(702)
s(548) =< aux(702)
s(550) =< aux(702)
s(551) =< aux(702)
s(557) =< aux(703)
s(544) =< aux(703)
s(545) =< aux(703)
s(546) =< aux(703)
s(548) =< aux(703)
s(549) =< aux(703)
s(550) =< aux(703)
s(551) =< aux(703)
s(552) =< aux(703)
s(553) =< aux(703)
s(556) =< aux(704)
s(546) =< aux(704)
s(548) =< aux(704)
s(545) =< aux(705)
s(548) =< aux(705)
s(561) =< aux(712)+3
s(562) =< aux(712)+2
s(563) =< aux(712)+1
s(564) =< s(518)* (1/2)
s(565) =< s(518)* (1/2)
s(566) =< s(548)+s(516)
s(549) =< s(548)+s(516)
s(550) =< s(548)+s(516)
s(551) =< s(548)+s(516)
s(552) =< s(548)+s(516)
s(553) =< s(548)+s(516)
s(554) =< s(548)+s(516)
s(567) =< s(548)*s(561)
s(568) =< s(544)*s(561)
s(569) =< s(544)*s(562)
s(570) =< s(557)*s(563)
s(571) =< aux(698)* (1/2)
s(572) =< s(555)* (10/13)
s(573) =< s(555)* (5/8)
s(574) =< s(555)* (5/7)
s(575) =< s(555)* (5/3)
s(576) =< s(555)* (3/7)
s(577) =< aux(698)* (1/2)
s(578) =< s(566)* (10/13)
s(579) =< s(566)* (5/8)
s(580) =< s(566)* (5/7)
s(581) =< s(566)* (5/3)
s(582) =< s(566)* (3/7)
s(583) =< s(566)* (5/8)
s(584) =< s(566)*2+s(548)*2+s(547)*2+s(544)*4+s(544)*2+aux(699)
s(551) =< s(566)*2+s(548)*2+s(547)*2+s(544)*4+s(544)*2+aux(699)
s(552) =< s(566)*2+s(548)*2+s(547)*2+s(544)*4+s(544)*2+aux(699)
s(584) =< s(548)*2+s(547)*2+s(544)*4+s(544)*2+aux(699)
s(551) =< s(548)*2+s(547)*2+s(544)*4+s(544)*2+aux(699)
s(552) =< s(548)*2+s(547)*2+s(544)*4+s(544)*2+aux(699)
s(585) =< s(548)*4+s(547)*2+s(544)*4+s(544)*2+aux(699)
s(553) =< s(548)*4+s(547)*2+s(544)*4+s(544)*2+aux(699)
s(554) =< s(548)*4+s(547)*2+s(544)*4+s(544)*2+aux(699)
s(586) =< s(547)*2+s(544)*4+s(544)*2+aux(699)
s(553) =< s(547)*2+s(544)*4+s(544)*2+aux(699)
s(553) =< s(566)*2+s(548)*2+s(547)*2+s(544)*4+s(544)*2+aux(699)
s(553) =< s(548)*2+s(547)*2+s(544)*4+s(544)*2+aux(699)
s(551) =< s(547)*2+s(544)*4+s(544)*2+aux(699)
s(550) =< s(547)*2+s(544)*4+s(544)*2+aux(699)
s(550) =< s(548)*4+s(547)*2+s(544)*4+s(544)*2+aux(699)
s(551) =< s(548)*4+s(547)*2+s(544)*4+s(544)*2+aux(699)
s(552) =< s(548)*4+s(547)*2+s(544)*4+s(544)*2+aux(699)
s(549) =< s(567)+s(568)+s(569)+s(570)+s(521)
s(550) =< s(567)+s(568)+s(569)+s(570)+s(521)
s(551) =< s(567)+s(568)+s(569)+s(570)+s(521)
s(552) =< s(567)+s(568)+s(569)+s(570)+s(521)
s(553) =< s(567)+s(568)+s(569)+s(570)+s(521)
s(554) =< s(567)+s(568)+s(569)+s(570)+s(521)
s(589) =< s(556)* (10/13)
s(590) =< s(556)* (5/8)
s(591) =< s(556)* (5/7)
s(592) =< s(556)* (5/3)
s(593) =< s(584)* (1/2)
s(594) =< s(585)* (1/2)
s(595) =< s(586)* (1/2)
s(596) =< s(584)* (1/2)
s(597) =< s(586)* (1/2)
s(599) =< s(580)
s(600) =< s(582)
s(599) =< s(582)
s(600) =< s(581)* (1/7)+s(582)
s(599) =< s(581)* (1/7)+s(582)
s(601) =< s(578)
s(601) =< s(579)* (1/13)+s(578)
s(602) =< s(586)
s(595) =< s(586)
s(603) =< s(594)
s(604) =< s(585)
s(603) =< s(585)
s(605) =< s(597)
s(606) =< s(596)
s(607) =< s(584)
s(606) =< s(584)
s(608) =< s(580)
s(609) =< aux(704)
s(608) =< aux(704)
s(609) =< s(581)* (1/7)+aux(704)
s(608) =< s(581)* (1/7)+aux(704)
s(605) =< s(586)
s(611) =< s(583)
s(612) =< s(578)
s(612) =< s(611)* (1/13)+s(578)
s(614) =< s(580)
s(615) =< aux(712)
s(614) =< aux(712)
s(615) =< s(581)* (1/7)+aux(712)
s(614) =< s(581)* (1/7)+aux(712)
s(593) =< s(584)
s(617) =< s(591)
s(618) =< aux(705)
s(617) =< aux(705)
s(618) =< s(592)* (1/7)+aux(705)
s(617) =< s(592)* (1/7)+aux(705)
s(619) =< s(589)
s(619) =< s(590)* (1/13)+s(589)
s(620) =< s(518)
s(564) =< s(518)
s(621) =< s(565)
s(621) =< s(518)
s(622) =< s(574)
s(623) =< s(576)
s(622) =< s(576)
s(623) =< s(575)* (1/7)+s(576)
s(622) =< s(575)* (1/7)+s(576)
s(624) =< s(572)
s(624) =< s(573)* (1/13)+s(572)
s(625) =< aux(698)
s(571) =< aux(698)
s(626) =< s(577)
s(626) =< aux(698)
s(506) =< aux(708)
s(507) =< aux(706)
s(506) =< aux(706)
s(507) =< aux(707)* (1/7)+aux(706)
s(506) =< aux(707)* (1/7)+aux(706)
s(508) =< aux(710)
s(508) =< s(502)* (1/13)+aux(710)
s(543) =< aux(698)
s(631) =< s(539)
s(509) =< aux(711)
s(631) =< aux(711)
s(505) =< aux(711)

  with precondition: [V1>=4,V>=0,Out>=1] 

* Chain [54]: 3*s(637)+3*s(640)+3*s(641)+6*s(642)+6*s(643)+6*s(644)+24*s(645)+6
  Such that:aux(713) =< 3/7
aux(714) =< 5/3
aux(715) =< 5/7
aux(716) =< 5/8
aux(717) =< 10/13
aux(718) =< V1
aux(719) =< V1/2
s(637) =< aux(716)
s(640) =< aux(719)
s(641) =< aux(715)
s(642) =< aux(713)
s(641) =< aux(713)
s(642) =< aux(714)* (1/7)+aux(713)
s(641) =< aux(714)* (1/7)+aux(713)
s(643) =< aux(717)
s(643) =< s(637)* (1/13)+aux(717)
s(644) =< aux(718)
s(640) =< aux(718)

  with precondition: [Out=2,V1>=6,V>=0] 

* Chain [53]: 2*s(661)+2*s(669)+2*s(670)+4*s(671)+4*s(672)+4*s(673)+16*s(675)+9
  Such that:s(664) =< 3/7
s(665) =< 5/3
s(666) =< 5/7
s(667) =< 5/8
s(668) =< 10/13
aux(720) =< V1
aux(721) =< V1/2
s(661) =< aux(720)
s(661) =< aux(721)
s(669) =< s(667)
s(670) =< s(666)
s(671) =< s(664)
s(670) =< s(664)
s(671) =< s(665)* (1/7)+s(664)
s(670) =< s(665)* (1/7)+s(664)
s(672) =< s(668)
s(672) =< s(669)* (1/13)+s(668)
s(673) =< aux(720)

  with precondition: [Out=3,V1>=10,V>=0] 


#### Cost of chains of main(V1,Out):
* Chain [58]: 1*s(792)+2*s(793)+4
  Such that:s(791) =< V1+1
s(792) =< V1/2+1/2
s(793) =< s(791)
s(792) =< s(791)

  with precondition: [Out=0,V1>=0] 

* Chain [57]: 2*s(795)+4*s(796)+8*s(813)+495*s(814)+8*s(892)+16*s(893)+16*s(894)+14
  Such that:aux(729) =< 3/7
aux(730) =< 5/3
aux(731) =< 5/7
aux(732) =< 5/8
aux(733) =< 10/13
aux(734) =< V1+1
aux(735) =< V1/2+1/2
s(795) =< aux(735)
s(813) =< aux(732)
s(892) =< aux(731)
s(893) =< aux(729)
s(892) =< aux(729)
s(893) =< aux(730)* (1/7)+aux(729)
s(892) =< aux(730)* (1/7)+aux(729)
s(894) =< aux(733)
s(894) =< s(813)* (1/13)+aux(733)
s(796) =< aux(734)
s(795) =< aux(734)

  with precondition: [V1>=1,Out>=1] 


#### Cost of chains of start(V1,V,V5,V10):
* Chain [59]: 32*s(918)+20*s(921)+32*s(922)+64*s(923)+64*s(924)+78*s(925)+1158*s(926)+14*s(959)+14*s(960)+12*s(961)+10*s(962)+4*s(963)+4*s(964)+18*s(965)+20*s(966)+16*s(967)+10*s(968)+10*s(969)+4*s(970)+12*s(973)+2*s(980)+2*s(987)+2*s(989)+6*s(995)+2*s(1006)+2*s(1009)+6*s(1011)+4*s(1015)+8*s(1016)+12*s(1017)+24*s(1018)+16*s(1019)+32*s(1020)+6*s(1021)+12*s(1022)+28*s(1023)+6*s(1024)+12*s(1025)+8*s(1027)+16*s(1028)+4*s(1030)+8*s(1031)+2*s(1033)+4*s(1034)+4*s(1035)+12*s(1036)+4*s(1037)+2*s(1038)+4*s(1039)+4*s(1040)+40*s(1041)+4*s(1042)+18*s(1047)+9*s(1136)+7*s(1137)+6*s(1138)+5*s(1139)+2*s(1140)+2*s(1141)+9*s(1142)+10*s(1143)+8*s(1144)+5*s(1145)+5*s(1146)+2*s(1147)+6*s(1150)+1*s(1157)+1*s(1164)+1*s(1166)+3*s(1172)+1*s(1183)+1*s(1186)+3*s(1188)+2*s(1192)+4*s(1193)+6*s(1194)+12*s(1195)+8*s(1196)+16*s(1197)+3*s(1198)+6*s(1199)+14*s(1200)+3*s(1201)+6*s(1202)+4*s(1204)+8*s(1205)+2*s(1207)+4*s(1208)+1*s(1210)+2*s(1211)+2*s(1212)+6*s(1213)+2*s(1214)+1*s(1215)+2*s(1216)+2*s(1217)+6*s(1218)+2*s(1219)+18*s(1223)+12*s(1224)+26*s(1225)+1*s(1270)+2*s(1390)+1*s(1393)+2*s(1394)+2*s(1395)+2*s(1397)+2*s(1401)+2*s(1403)+3*s(1410)+6*s(1411)+14
  Such that:s(1388) =< V1/3-V/3+5/3
s(1389) =< V1/7-V/7+5/7
s(1391) =< 2/7*V1-2/7*V+3/7
s(1400) =< 2/13*V1
s(1392) =< 2/13*V1-2/13*V+10/13
s(1110) =< V+V5+V10
s(1111) =< V+V5+2*V10
aux(747) =< V+V5+4*V10
aux(748) =< V/2+V5/2
aux(749) =< V/2+V10/2
aux(750) =< V/3+V5/3
aux(751) =< V/4+V5/4
aux(752) =< V/6+V5/6
aux(753) =< V/8+V5/8
aux(754) =< 1
aux(755) =< 3/7
aux(756) =< 5/3
aux(757) =< 5/7
aux(758) =< 5/8
aux(759) =< 10/13
aux(760) =< V1
aux(761) =< V1+1
aux(762) =< V1-V
aux(763) =< V1+V
aux(764) =< V1+2*V
aux(765) =< V1+4*V
aux(766) =< V1/2
aux(767) =< V1/2+1/2
aux(768) =< V1/2+V/2
aux(769) =< V1/3
aux(770) =< V1/4
aux(771) =< V1/6
aux(772) =< V1/8
aux(773) =< V1/8-V/8+5/8
aux(774) =< V
aux(775) =< V/2
aux(776) =< V5
aux(777) =< V5/2
s(918) =< aux(758)
s(921) =< aux(766)
s(1270) =< aux(767)
s(1410) =< aux(767)
s(1390) =< aux(773)
s(1224) =< aux(775)
s(1136) =< aux(777)
s(955) =< aux(760)
s(937) =< aux(763)
s(955) =< aux(766)
s(937) =< aux(768)
s(959) =< aux(760)
s(960) =< aux(763)
s(961) =< aux(763)
s(962) =< aux(763)
s(963) =< aux(763)
s(964) =< aux(763)
s(965) =< aux(763)
s(966) =< aux(763)
s(967) =< aux(763)
s(968) =< aux(763)
s(969) =< aux(763)
s(970) =< aux(763)
s(962) =< aux(764)
s(965) =< aux(764)
s(966) =< aux(764)
s(967) =< aux(764)
s(968) =< aux(764)
s(969) =< aux(764)
s(970) =< aux(764)
s(971) =< aux(766)
s(972) =< aux(766)
s(973) =< aux(766)
s(960) =< aux(766)
s(961) =< aux(766)
s(962) =< aux(766)
s(963) =< aux(766)
s(964) =< aux(766)
s(965) =< aux(766)
s(966) =< aux(766)
s(967) =< aux(766)
s(968) =< aux(766)
s(969) =< aux(766)
s(971) =< aux(769)
s(960) =< aux(769)
s(961) =< aux(769)
s(962) =< aux(769)
s(964) =< aux(769)
s(966) =< aux(769)
s(967) =< aux(769)
s(973) =< aux(770)
s(960) =< aux(770)
s(961) =< aux(770)
s(962) =< aux(770)
s(964) =< aux(770)
s(965) =< aux(770)
s(966) =< aux(770)
s(967) =< aux(770)
s(968) =< aux(770)
s(969) =< aux(770)
s(972) =< aux(771)
s(962) =< aux(771)
s(964) =< aux(771)
s(961) =< aux(772)
s(964) =< aux(772)
s(977) =< aux(766)+3
s(978) =< aux(766)+2
s(979) =< aux(766)+1
s(980) =< aux(764)* (1/2)
s(981) =< aux(764)* (1/2)
s(982) =< s(964)+aux(754)
s(965) =< s(964)+aux(754)
s(966) =< s(964)+aux(754)
s(967) =< s(964)+aux(754)
s(968) =< s(964)+aux(754)
s(969) =< s(964)+aux(754)
s(970) =< s(964)+aux(754)
s(983) =< s(964)*s(977)
s(984) =< s(960)*s(977)
s(985) =< s(960)*s(978)
s(986) =< s(973)*s(979)
s(987) =< aux(763)* (1/2)
s(988) =< s(971)* (10/13)
s(989) =< s(971)* (5/8)
s(990) =< s(971)* (5/7)
s(991) =< s(971)* (5/3)
s(992) =< s(971)* (3/7)
s(993) =< aux(763)* (1/2)
s(994) =< s(982)* (10/13)
s(995) =< s(982)* (5/8)
s(996) =< s(982)* (5/7)
s(997) =< s(982)* (5/3)
s(998) =< s(982)* (3/7)
s(999) =< s(982)* (5/8)
s(1000) =< s(982)*2+s(964)*2+s(963)*2+s(960)*4+s(960)*2+aux(765)
s(967) =< s(982)*2+s(964)*2+s(963)*2+s(960)*4+s(960)*2+aux(765)
s(968) =< s(982)*2+s(964)*2+s(963)*2+s(960)*4+s(960)*2+aux(765)
s(1000) =< s(964)*2+s(963)*2+s(960)*4+s(960)*2+aux(765)
s(967) =< s(964)*2+s(963)*2+s(960)*4+s(960)*2+aux(765)
s(968) =< s(964)*2+s(963)*2+s(960)*4+s(960)*2+aux(765)
s(1001) =< s(964)*4+s(963)*2+s(960)*4+s(960)*2+aux(765)
s(969) =< s(964)*4+s(963)*2+s(960)*4+s(960)*2+aux(765)
s(970) =< s(964)*4+s(963)*2+s(960)*4+s(960)*2+aux(765)
s(1002) =< s(963)*2+s(960)*4+s(960)*2+aux(765)
s(969) =< s(963)*2+s(960)*4+s(960)*2+aux(765)
s(969) =< s(982)*2+s(964)*2+s(963)*2+s(960)*4+s(960)*2+aux(765)
s(969) =< s(964)*2+s(963)*2+s(960)*4+s(960)*2+aux(765)
s(967) =< s(963)*2+s(960)*4+s(960)*2+aux(765)
s(966) =< s(963)*2+s(960)*4+s(960)*2+aux(765)
s(966) =< s(964)*4+s(963)*2+s(960)*4+s(960)*2+aux(765)
s(967) =< s(964)*4+s(963)*2+s(960)*4+s(960)*2+aux(765)
s(968) =< s(964)*4+s(963)*2+s(960)*4+s(960)*2+aux(765)
s(965) =< s(983)+s(984)+s(985)+s(986)+s(937)
s(966) =< s(983)+s(984)+s(985)+s(986)+s(937)
s(967) =< s(983)+s(984)+s(985)+s(986)+s(937)
s(968) =< s(983)+s(984)+s(985)+s(986)+s(937)
s(969) =< s(983)+s(984)+s(985)+s(986)+s(937)
s(970) =< s(983)+s(984)+s(985)+s(986)+s(937)
s(1005) =< s(972)* (10/13)
s(1006) =< s(972)* (5/8)
s(1007) =< s(972)* (5/7)
s(1008) =< s(972)* (5/3)
s(1009) =< s(1000)* (1/2)
s(1010) =< s(1001)* (1/2)
s(1011) =< s(1002)* (1/2)
s(1012) =< s(1000)* (1/2)
s(1013) =< s(1002)* (1/2)
s(1015) =< s(996)
s(1016) =< s(998)
s(1015) =< s(998)
s(1016) =< s(997)* (1/7)+s(998)
s(1015) =< s(997)* (1/7)+s(998)
s(1017) =< s(994)
s(1017) =< s(995)* (1/13)+s(994)
s(1018) =< s(1002)
s(1011) =< s(1002)
s(1019) =< s(1010)
s(1020) =< s(1001)
s(1019) =< s(1001)
s(1021) =< s(1013)
s(1022) =< s(1012)
s(1023) =< s(1000)
s(1022) =< s(1000)
s(1024) =< s(996)
s(1025) =< aux(771)
s(1024) =< aux(771)
s(1025) =< s(997)* (1/7)+aux(771)
s(1024) =< s(997)* (1/7)+aux(771)
s(1021) =< s(1002)
s(1027) =< s(999)
s(1028) =< s(994)
s(1028) =< s(1027)* (1/13)+s(994)
s(1030) =< s(996)
s(1031) =< aux(766)
s(1030) =< aux(766)
s(1031) =< s(997)* (1/7)+aux(766)
s(1030) =< s(997)* (1/7)+aux(766)
s(1009) =< s(1000)
s(1033) =< s(1007)
s(1034) =< aux(772)
s(1033) =< aux(772)
s(1034) =< s(1008)* (1/7)+aux(772)
s(1033) =< s(1008)* (1/7)+aux(772)
s(1035) =< s(1005)
s(1035) =< s(1006)* (1/13)+s(1005)
s(1036) =< aux(764)
s(980) =< aux(764)
s(1037) =< s(981)
s(1037) =< aux(764)
s(1038) =< s(990)
s(1039) =< s(992)
s(1038) =< s(992)
s(1039) =< s(991)* (1/7)+s(992)
s(1038) =< s(991)* (1/7)+s(992)
s(1040) =< s(988)
s(1040) =< s(989)* (1/13)+s(988)
s(1041) =< aux(763)
s(987) =< aux(763)
s(1042) =< s(993)
s(1042) =< aux(763)
s(922) =< aux(757)
s(923) =< aux(755)
s(922) =< aux(755)
s(923) =< aux(756)* (1/7)+aux(755)
s(922) =< aux(756)* (1/7)+aux(755)
s(924) =< aux(759)
s(924) =< s(918)* (1/13)+aux(759)
s(959) =< aux(763)
s(1047) =< s(955)
s(925) =< aux(760)
s(1047) =< aux(760)
s(1137) =< s(1110)
s(1138) =< s(1110)
s(1139) =< s(1110)
s(1140) =< s(1110)
s(1141) =< s(1110)
s(1142) =< s(1110)
s(1143) =< s(1110)
s(1144) =< s(1110)
s(1145) =< s(1110)
s(1146) =< s(1110)
s(1147) =< s(1110)
s(1139) =< s(1111)
s(1142) =< s(1111)
s(1143) =< s(1111)
s(1144) =< s(1111)
s(1145) =< s(1111)
s(1146) =< s(1111)
s(1147) =< s(1111)
s(1148) =< aux(748)
s(1149) =< aux(748)
s(1150) =< aux(748)
s(1137) =< aux(748)
s(1138) =< aux(748)
s(1139) =< aux(748)
s(1140) =< aux(748)
s(1141) =< aux(748)
s(1142) =< aux(748)
s(1143) =< aux(748)
s(1144) =< aux(748)
s(1145) =< aux(748)
s(1146) =< aux(748)
s(1148) =< aux(750)
s(1137) =< aux(750)
s(1138) =< aux(750)
s(1139) =< aux(750)
s(1141) =< aux(750)
s(1143) =< aux(750)
s(1144) =< aux(750)
s(1150) =< aux(751)
s(1137) =< aux(751)
s(1138) =< aux(751)
s(1139) =< aux(751)
s(1141) =< aux(751)
s(1142) =< aux(751)
s(1143) =< aux(751)
s(1144) =< aux(751)
s(1145) =< aux(751)
s(1146) =< aux(751)
s(1149) =< aux(752)
s(1139) =< aux(752)
s(1141) =< aux(752)
s(1138) =< aux(753)
s(1141) =< aux(753)
s(1154) =< aux(748)+3
s(1155) =< aux(748)+2
s(1156) =< aux(748)+1
s(1157) =< s(1111)* (1/2)
s(1158) =< s(1111)* (1/2)
s(1159) =< s(1141)+aux(754)
s(1142) =< s(1141)+aux(754)
s(1143) =< s(1141)+aux(754)
s(1144) =< s(1141)+aux(754)
s(1145) =< s(1141)+aux(754)
s(1146) =< s(1141)+aux(754)
s(1147) =< s(1141)+aux(754)
s(1160) =< s(1141)*s(1154)
s(1161) =< s(1137)*s(1154)
s(1162) =< s(1137)*s(1155)
s(1163) =< s(1150)*s(1156)
s(1164) =< s(1110)* (1/2)
s(1165) =< s(1148)* (10/13)
s(1166) =< s(1148)* (5/8)
s(1167) =< s(1148)* (5/7)
s(1168) =< s(1148)* (5/3)
s(1169) =< s(1148)* (3/7)
s(1170) =< s(1110)* (1/2)
s(1171) =< s(1159)* (10/13)
s(1172) =< s(1159)* (5/8)
s(1173) =< s(1159)* (5/7)
s(1174) =< s(1159)* (5/3)
s(1175) =< s(1159)* (3/7)
s(1176) =< s(1159)* (5/8)
s(1177) =< s(1159)*2+s(1141)*2+s(1140)*2+s(1137)*4+s(1137)*2+aux(747)
s(1144) =< s(1159)*2+s(1141)*2+s(1140)*2+s(1137)*4+s(1137)*2+aux(747)
s(1145) =< s(1159)*2+s(1141)*2+s(1140)*2+s(1137)*4+s(1137)*2+aux(747)
s(1177) =< s(1141)*2+s(1140)*2+s(1137)*4+s(1137)*2+aux(747)
s(1144) =< s(1141)*2+s(1140)*2+s(1137)*4+s(1137)*2+aux(747)
s(1145) =< s(1141)*2+s(1140)*2+s(1137)*4+s(1137)*2+aux(747)
s(1178) =< s(1141)*4+s(1140)*2+s(1137)*4+s(1137)*2+aux(747)
s(1146) =< s(1141)*4+s(1140)*2+s(1137)*4+s(1137)*2+aux(747)
s(1147) =< s(1141)*4+s(1140)*2+s(1137)*4+s(1137)*2+aux(747)
s(1179) =< s(1140)*2+s(1137)*4+s(1137)*2+aux(747)
s(1146) =< s(1140)*2+s(1137)*4+s(1137)*2+aux(747)
s(1146) =< s(1159)*2+s(1141)*2+s(1140)*2+s(1137)*4+s(1137)*2+aux(747)
s(1146) =< s(1141)*2+s(1140)*2+s(1137)*4+s(1137)*2+aux(747)
s(1144) =< s(1140)*2+s(1137)*4+s(1137)*2+aux(747)
s(1143) =< s(1140)*2+s(1137)*4+s(1137)*2+aux(747)
s(1143) =< s(1141)*4+s(1140)*2+s(1137)*4+s(1137)*2+aux(747)
s(1144) =< s(1141)*4+s(1140)*2+s(1137)*4+s(1137)*2+aux(747)
s(1145) =< s(1141)*4+s(1140)*2+s(1137)*4+s(1137)*2+aux(747)
s(1142) =< s(1160)+s(1161)+s(1162)+s(1163)+aux(749)
s(1143) =< s(1160)+s(1161)+s(1162)+s(1163)+aux(749)
s(1144) =< s(1160)+s(1161)+s(1162)+s(1163)+aux(749)
s(1145) =< s(1160)+s(1161)+s(1162)+s(1163)+aux(749)
s(1146) =< s(1160)+s(1161)+s(1162)+s(1163)+aux(749)
s(1147) =< s(1160)+s(1161)+s(1162)+s(1163)+aux(749)
s(1182) =< s(1149)* (10/13)
s(1183) =< s(1149)* (5/8)
s(1184) =< s(1149)* (5/7)
s(1185) =< s(1149)* (5/3)
s(1186) =< s(1177)* (1/2)
s(1187) =< s(1178)* (1/2)
s(1188) =< s(1179)* (1/2)
s(1189) =< s(1177)* (1/2)
s(1190) =< s(1179)* (1/2)
s(1192) =< s(1173)
s(1193) =< s(1175)
s(1192) =< s(1175)
s(1193) =< s(1174)* (1/7)+s(1175)
s(1192) =< s(1174)* (1/7)+s(1175)
s(1194) =< s(1171)
s(1194) =< s(1172)* (1/13)+s(1171)
s(1195) =< s(1179)
s(1188) =< s(1179)
s(1196) =< s(1187)
s(1197) =< s(1178)
s(1196) =< s(1178)
s(1198) =< s(1190)
s(1199) =< s(1189)
s(1200) =< s(1177)
s(1199) =< s(1177)
s(1201) =< s(1173)
s(1202) =< aux(752)
s(1201) =< aux(752)
s(1202) =< s(1174)* (1/7)+aux(752)
s(1201) =< s(1174)* (1/7)+aux(752)
s(1198) =< s(1179)
s(1204) =< s(1176)
s(1205) =< s(1171)
s(1205) =< s(1204)* (1/13)+s(1171)
s(1207) =< s(1173)
s(1208) =< aux(748)
s(1207) =< aux(748)
s(1208) =< s(1174)* (1/7)+aux(748)
s(1207) =< s(1174)* (1/7)+aux(748)
s(1186) =< s(1177)
s(1210) =< s(1184)
s(1211) =< aux(753)
s(1210) =< aux(753)
s(1211) =< s(1185)* (1/7)+aux(753)
s(1210) =< s(1185)* (1/7)+aux(753)
s(1212) =< s(1182)
s(1212) =< s(1183)* (1/13)+s(1182)
s(1213) =< s(1111)
s(1157) =< s(1111)
s(1214) =< s(1158)
s(1214) =< s(1111)
s(1215) =< s(1167)
s(1216) =< s(1169)
s(1215) =< s(1169)
s(1216) =< s(1168)* (1/7)+s(1169)
s(1215) =< s(1168)* (1/7)+s(1169)
s(1217) =< s(1165)
s(1217) =< s(1166)* (1/13)+s(1165)
s(1218) =< s(1110)
s(1164) =< s(1110)
s(1219) =< s(1170)
s(1219) =< s(1110)
s(1223) =< aux(776)
s(1136) =< aux(776)
s(1225) =< aux(774)
s(1224) =< aux(774)
s(921) =< aux(760)
s(1411) =< aux(761)
s(1410) =< aux(761)
s(1270) =< aux(760)
s(1393) =< s(1389)
s(1394) =< s(1391)
s(1393) =< s(1391)
s(1394) =< s(1388)* (1/7)+s(1391)
s(1393) =< s(1388)* (1/7)+s(1391)
s(1395) =< s(1392)
s(1395) =< s(1390)* (1/13)+s(1392)
s(1396) =< s(1395)*aux(762)
s(1397) =< s(1396)
s(1401) =< s(1400)
s(1401) =< s(1390)* (1/13)+s(1400)
s(1402) =< s(1401)*aux(762)
s(1403) =< s(1402)

  with precondition: [V1>=0] 


Closed-form bounds of start(V1,V,V5,V10): 
-------------------------------------
* Chain [59] with precondition: [V1>=0] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of start(V1,V,V5,V10): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 46 ms.
* Invariants computed in 88 ms.
   - Backward Invariants 31 ms.
   - Transitive Invariants 23 ms.
* Refinement performed in 215 ms.
* Termination proved in 96 ms.
* Upper bounds computed in 22082 ms.
   - Equation cost structures 1996 ms.
   - Phase cost structures 19547 ms.
   - Chain cost structures 6 ms.
   - Solving cost expressions 300 ms.
* Total analysis performed in 22584 ms.


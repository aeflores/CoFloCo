
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [fun1/3]
1. recursive [non_tail] : [fun/2]
2. recursive [non_tail] : [fun3/3]
3. recursive  : [fun2/2]
4. recursive  : [fun4/2]
5. non_recursive  : [main/2]
6. non_recursive  : [start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into fun1/3
1. SCC is partially evaluated into fun/2
2. SCC is partially evaluated into fun3/3
3. SCC is partially evaluated into fun2/2
4. SCC is partially evaluated into fun4/2
5. SCC is partially evaluated into main/2
6. SCC is partially evaluated into start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fun1/3 
* CE 17 is refined into CE [20] 
* CE 16 is refined into CE [21] 


#### Refined cost equations fun1/3 
* CE 20: fun1(V,V6,Out) = 1+ fun1(W6,V6,X6)
     [W6>=0,V6>=0,X6+1=Out,W6+1=V] 
* CE 21: fun1(A,B,B) = 1
     [B>=0,A=0] 

### Cost equations --> "Loop" of fun1/3 
* CEs [21] --> Loop 14 
* CEs [20] --> Loop 15 

#### Loops of fun1/3 
* Loop 14: fun1(A,B,B) [B>=0,A=0] 
* Loop 15: fun1(V,V6,Out)->  fun1(V',V6,Out')
                  [V'>=0,V6>=0,Out=Out'+1,V'+1=V] 

### Ranking functions of CR fun1(V,V6,Out) 
* RF of phase [15]: [V]

#### Partial ranking functions of CR fun1(V,V6,Out) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    V


### Resulting Chains:fun1(V,V6,Out) 
* [[15],14]
* [14]


### Merging Chains  fun1/3 into  External patterns of execution 
* [[14]] --> 1 
* [[14,[15]]] --> 2 


### Specialization of cost equations fun/2 
* CE 9 is refined into CE [22,23] 
* CE 8 is refined into CE [24] 


#### Refined cost equations fun/2 
* CE 22: fun(V,Out) = 1+ fun(W,Out)+ fun1(X,Out,Out):1
     [W>=0,Out>=0,W+1=V,X=0] 
* CE 23: fun(V,Out) = 1+ fun(W,X)+ fun1(Y,Z,Out):2
     [Out>=Y,W>=0,Y>=1,Out=Y+X,Out=Y+Z,Y+W+1=V] 
* CE 24: fun(V,Out) = 1
     [Out=0,V=0] 

### Cost equations --> "Loop" of fun/2 
* CEs [24] --> Loop 16 
* CEs [23] --> Loop 17 
* CEs [22] --> Loop 18 

#### Loops of fun/2 
* Loop 16: fun(V,Out) [Out=0,V=0] 
* Loop 17: fun(V,Out)->  fun(V',Out')
                  [Out+V'+1>=V,V>=V'+2,V'>=0,V+Out'=Out+V'+1] 
* Loop 18: fun(V,Out)->  fun(V',Out)
                  [Out>=0,V>=1,V=V'+1] 

### Ranking functions of CR fun(V,Out) 
* RF of phase [17,18]: [V]

#### Partial ranking functions of CR fun(V,Out) 
* Partial RF of phase [17,18]:
  - RF of loop [17:1]:
    V-1
  - RF of loop [18:1]:
    V


### Resulting Chains:fun(V,Out) 
* [[17,18],16]
* [16]


### Merging Chains  fun/2 into  External patterns of execution 
* [[16]] --> 1 
* [[16,[17,18]]] --> 2 


### Specialization of cost equations fun3/3 
* CE 15 is refined into CE [25,26] 
* CE 14 is refined into CE [27] 


#### Refined cost equations fun3/3 
* CE 25: fun3(V,V6,Out) = 1+ fun3(W6,X6,Out)+ fun1(Y6,Out,Out):1
     [W6>=0,Out>=0,W6+1=V,X6=0,Y6=0,V6=0] 
* CE 26: fun3(V,V6,Out) = 1+ fun3(W6,V6,X6)+ fun1(V6,Y6,Out):2
     [Out>=V6,W6>=0,V6>=1,Out=V6+X6,Out=V6+Y6,W6+1=V] 
* CE 27: fun3(V,V6,Out) = 1
     [V6>=0,Out=0,V=0] 

### Cost equations --> "Loop" of fun3/3 
* CEs [27] --> Loop 19 
* CEs [26] --> Loop 20 
* CEs [25] --> Loop 21 

#### Loops of fun3/3 
* Loop 19: fun3(V,V6,Out) [V6>=0,Out=0,V=0] 
* Loop 20: fun3(V,V6,Out)->  fun3(V',V6,Out')
                  [Out>=V6,V6>=1,V>=1,V6+Out'=Out,V=V'+1] 
* Loop 21: fun3(V,V6,Out)->  fun3(V',V6',Out)
                  [Out>=0,V>=1,V=V'+1,V6'=0,V6=0] 

### Ranking functions of CR fun3(V,V6,Out) 
* RF of phase [20]: [V]
* RF of phase [21]: [V]

#### Partial ranking functions of CR fun3(V,V6,Out) 
* Partial RF of phase [20]:
  - RF of loop [20:1]:
    V
* Partial RF of phase [21]:
  - RF of loop [21:1]:
    V


### Resulting Chains:fun3(V,V6,Out) 
* [[21],19]
* [[20],19]
* [19]


### Merging Chains  fun3/3 into  External patterns of execution 
* [[19]] --> 1 
* [[19,[21]]] --> 2 
* [[19,[20]]] --> 3 


### Specialization of cost equations fun2/2 
* CE 11 is refined into CE [28,29] 
* CE 10 is refined into CE [30] 


#### Refined cost equations fun2/2 
* CE 28: fun2(V,Out) = 1+ fun3(W,X,Y):1+ fun2(Z,A1)
     [Z>=0,A1+1=Out,Z+1=V,Y=0,X=0,W=0] 
* CE 29: fun2(V,Out) = 1+ fun3(W,W,X):3+ fun2(Y,Z)
     [X+1>=2*W,Y>=0,W>=1,X+Z+1=Out,W+Y+1=V] 
* CE 30: fun2(V,Out) = 1
     [Out=0,V=0] 

### Cost equations --> "Loop" of fun2/2 
* CEs [30] --> Loop 22 
* CEs [29] --> Loop 23 
* CEs [28] --> Loop 24 

#### Loops of fun2/2 
* Loop 22: fun2(V,Out) [Out=0,V=0] 
* Loop 23: fun2(V,Out)->  fun2(V',Out')
                  [Out+2*V'+2>=2*V+Out',V>=V'+2,V'>=0] 
* Loop 24: fun2(V,Out)->  fun2(V',Out')
                  [V>=1,Out=Out'+1,V=V'+1] 

### Ranking functions of CR fun2(V,Out) 
* RF of phase [23,24]: [V]

#### Partial ranking functions of CR fun2(V,Out) 
* Partial RF of phase [23,24]:
  - RF of loop [23:1]:
    V-1
  - RF of loop [24:1]:
    V


### Resulting Chains:fun2(V,Out) 
* [[23,24],22]
* [22]


### Merging Chains  fun2/2 into  External patterns of execution 
* [[22]] --> 1 
* [[22,[23,24]]] --> 2 


### Specialization of cost equations fun4/2 
* CE 13 is refined into CE [31] 
* CE 12 is refined into CE [32] 


#### Refined cost equations fun4/2 
* CE 31: fun4(V,Out) = 1+ fun4(W,X)
     [W>=0,W+X+1=Out,W+1=V] 
* CE 32: fun4(V,Out) = 1
     [Out=0,V=0] 

### Cost equations --> "Loop" of fun4/2 
* CEs [32] --> Loop 25 
* CEs [31] --> Loop 26 

#### Loops of fun4/2 
* Loop 25: fun4(V,Out) [Out=0,V=0] 
* Loop 26: fun4(V,Out)->  fun4(V',Out')
                  [V'>=0,V'+Out'+1=Out,V'+1=V] 

### Ranking functions of CR fun4(V,Out) 
* RF of phase [26]: [V]

#### Partial ranking functions of CR fun4(V,Out) 
* Partial RF of phase [26]:
  - RF of loop [26:1]:
    V


### Resulting Chains:fun4(V,Out) 
* [[26],25]
* [25]


### Merging Chains  fun4/2 into  External patterns of execution 
* [[25]] --> 1 
* [[25,[26]]] --> 2 


### Specialization of cost equations main/2 
* CE 19 is refined into CE [33,34] 
* CE 18 is refined into CE [35] 


#### Refined cost equations main/2 
* CE 33: main(V,Out) = 1+ fun4(V,W):2+ fun2(X,Y):1+ fun(Z,A1):1
     [V>=1,V+W+1=0,A1=0,Z=0,Y=0,X=0,Out=0] 
* CE 34: main(V,Out) = 1+ fun4(V,W):2+ fun2(X,Y):2+ fun(Y,Out):2
     [Y>=Out+1,Y>=X,Out>=0,X>=1,V>=1,X=V+W+1] 
* CE 35: main(V,Out) = 1
     [Out=0,V=0] 

### Cost equations --> "Loop" of main/2 
* CEs [33,34] --> Loop 27 
* CEs [35] --> Loop 28 

#### Loops of main/2 
* Loop 27: main(V,Out) [Out>=0,V>=1] 
* Loop 28: main(V,Out) [Out=0,V=0] 

### Ranking functions of CR main(V,Out) 

#### Partial ranking functions of CR main(V,Out) 


### Resulting Chains:main(V,Out) 
* [28]
* [27]


### Merging Chains  main/2 into  External patterns of execution 
* [[28]] --> 1 
* [[27]] --> 2 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [36,37] 
* CE 3 is refined into CE [38,39] 
* CE 4 is refined into CE [40,41] 
* CE 5 is refined into CE [42,43,44] 
* CE 6 is refined into CE [45,46] 
* CE 7 is refined into CE [47,48] 


#### Refined cost equations start/2 
* CE 36: start(V,V6) = 0+ fun(W6,X6):1
     [X6=0,W6=0,V=0] 
* CE 37: start(V,V6) = 0+ fun(V,W6):2
     [V>=W6+1,W6>=0] 
* CE 38: start(V,V6) = 0+ fun2(W6,X6):1
     [X6=0,W6=0,V=0] 
* CE 39: start(V,V6) = 0+ fun2(V,W6):2
     [W6>=V,V>=1] 
* CE 40: start(V,V6) = 0+ fun4(W6,X6):1
     [X6=0,W6=0,V=0] 
* CE 41: start(V,V6) = 0+ fun4(V,W6):2
     [V>=1] 
* CE 42: start(V,V6) = 0+ fun3(W6,V6,X6):1
     [V6>=0,X6=0,W6=0,V=0] 
* CE 43: start(V,V6) = 0+ fun3(V,W6,X6):2
     [V>=1,X6=0,W6=0,V6=0] 
* CE 44: start(V,V6) = 0+ fun3(V,V6,W6):3
     [W6+1>=V+V6,V6>=1,V>=1] 
* CE 45: start(V,V6) = 0+ fun1(W6,V6,V6):1
     [V6>=0,W6=0,V=0] 
* CE 46: start(V,V6) = 0+ fun1(V,W6,X6):2
     [X6>=V,V>=1,X6=V+W6,X6=V+V6] 
* CE 47: start(V,V6) = 0+ main(W6,X6):1
     [X6=0,W6=0,V=0] 
* CE 48: start(V,V6) = 0+ main(V,W6):2
     [W6>=0,V>=1] 

### Cost equations --> "Loop" of start/2 
* CEs [37,39,41,43,44,46,48] --> Loop 29 
* CEs [36,38,40,42,45,47] --> Loop 30 

#### Loops of start/2 
* Loop 29: start(V,V6) [V>=1] 
* Loop 30: start(V,V6) [V=0] 

### Ranking functions of CR start(V,V6) 

#### Partial ranking functions of CR start(V,V6) 


### Resulting Chains:start(V,V6) 
* [30]
* [29]


### Merging Chains  start/2 into  External patterns of execution 
* [[30]] --> 1 
* [[29]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [15] 

 * loop 15:fun1(V,V6,Out) -> [fun1(V',V6',Out')] 
1
#### Cost of phase [15]:fun1(V,V6,Out) -> [fun1(V',V6',Out')] 
1*it(15)+0
  Such that:it(15) =< V
it(15) =< V-V'

#### Cost of chains of fun1(V,V6,Out):
* Chain [[15],14]: 1*it(15)+1
  Such that:it(15) =< -V6+Out

  with precondition: [V+V6=Out,V>=1,V6>=0] 

* Chain [14]: 1
  with precondition: [V=0,V6=Out,V6>=0] 


#### Cost of loops [17,18] 

 * loop 17:fun(V,Out) -> [fun(V',Out')] 
1*s(2)+2
  Such that:s(2) =< V-V'

 * loop 18:fun(V,Out) -> [fun(V',Out')] 
2
#### Cost of phase [17,18]:fun(V,Out) -> [fun(V',Out')] 
5*it(17)+0
  Such that:aux(1) =< V
aux(2) =< V-V'
it(17) =< aux(1)
it(17) =< aux(2)

#### Cost of chains of fun(V,Out):
* Chain [[17,18],16]: 5*it(17)+1
  Such that:aux(3) =< V
it(17) =< aux(3)

  with precondition: [Out>=0,V>=Out+1] 

* Chain [16]: 1
  with precondition: [V=0,Out=0] 


#### Cost of loops [21] 

 * loop 21:fun3(V,V6,Out) -> [fun3(V',V6',Out')] 
2
#### Cost of phase [21]:fun3(V,V6,Out) -> [fun3(V',V6',Out')] 
2*it(21)+0
  Such that:it(21) =< V
it(21) =< V-V'

#### Cost of loops [20] 

 * loop 20:fun3(V,V6,Out) -> [fun3(V',V6',Out')] 
1*s(5)+2
  Such that:s(5) =< V6'

#### Cost of phase [20]:fun3(V,V6,Out) -> [fun3(V',V6',Out')] 
2*it(20)+1*s(6)+0
  Such that:it(20) =< V
it(20) =< V-V'
aux(4) =< V6
s(6) =< it(20)*aux(4)

#### Cost of chains of fun3(V,V6,Out):
* Chain [[21],19]: 2*it(21)+1
  Such that:it(21) =< V

  with precondition: [V6=0,Out=0,V>=1] 

* Chain [[20],19]: 2*it(20)+1*s(6)+1
  Such that:it(20) =< V
aux(4) =< V6
s(6) =< it(20)*aux(4)

  with precondition: [V>=1,V6>=1,Out+1>=V+V6] 

* Chain [19]: 1
  with precondition: [V=0,Out=0,V6>=0] 


#### Cost of loops [23,24] 

 * loop 23:fun2(V,Out) -> [fun2(V',Out')] 
2*s(11)+1*s(12)+2
  Such that:s(10) =< V-V'
s(11) =< s(10)
s(12) =< s(11)*s(10)

 * loop 24:fun2(V,Out) -> [fun2(V',Out')] 
2
#### Cost of phase [23,24]:fun2(V,Out) -> [fun2(V',Out')] 
4*it(23)+2*s(13)+1*s(14)+0
  Such that:aux(6) =< V
aux(7) =< V-V'
it(23) =< aux(6)
s(15) =< aux(6)
it(23) =< aux(7)
s(15) =< aux(7)
s(13) =< s(15)
s(14) =< s(13)*aux(6)

#### Cost of chains of fun2(V,Out):
* Chain [[23,24],22]: 6*it(23)+1*s(14)+1
  Such that:aux(8) =< V
it(23) =< aux(8)
s(14) =< it(23)*aux(8)

  with precondition: [V>=1,Out>=V] 

* Chain [22]: 1
  with precondition: [V=0,Out=0] 


#### Cost of loops [26] 

 * loop 26:fun4(V,Out) -> [fun4(V',Out')] 
1
#### Cost of phase [26]:fun4(V,Out) -> [fun4(V',Out')] 
1*it(26)+0
  Such that:it(26) =< V
it(26) =< V-V'

#### Cost of chains of fun4(V,Out):
* Chain [[26],25]: 1*it(26)+1
  Such that:it(26) =< V

  with precondition: [V>=1] 

* Chain [25]: 1
  with precondition: [V=0,Out=0] 


#### Cost of chains of main(V,Out):
* Chain [28]: 1
  with precondition: [V=0,Out=0] 

* Chain [27]: 2*s(16)+12*s(19)+4
  Such that:aux(9) =< V
s(16) =< aux(9)

  with precondition: [V>=1,Out>=0] 


#### Cost of chains of start(V,V6):
* Chain [30]: 1
  with precondition: [V=0] 

* Chain [29]: 19*s(24)+1*s(27)+1*s(32)+12*s(36)+4
  Such that:s(31) =< V6
aux(10) =< V
s(24) =< aux(10)
s(27) =< s(24)*aux(10)
s(32) =< s(24)*s(31)

  with precondition: [V>=1] 


Closed-form bounds of start(V,V6): 
-------------------------------------
* Chain [30] with precondition: [V=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [29] with precondition: [V>=1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of start(V,V6): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 30 ms.
* Invariants computed in 98 ms.
   - Backward Invariants 42 ms.
   - Transitive Invariants 28 ms.
* Refinement performed in 177 ms.
* Termination proved in 31 ms.
* Upper bounds computed in 188 ms.
   - Equation cost structures 67 ms.
   - Phase cost structures 97 ms.
   - Chain cost structures 41 ms.
   - Solving cost expressions 2 ms.
* Total analysis performed in 592 ms.


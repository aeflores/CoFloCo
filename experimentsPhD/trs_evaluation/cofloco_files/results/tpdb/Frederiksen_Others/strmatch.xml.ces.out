
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [and/3]
1. recursive  : [fun/3]
2. recursive [non_tail] : [prefix/3]
3. recursive  : [domatch/4,fun1/5]
4. recursive  : [eqNatList/3,fun2/6]
5. non_recursive  : [notEmpty/2]
6. non_recursive  : [strmatch/3]
7. non_recursive  : [start/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into and/3
1. SCC is partially evaluated into fun/3
2. SCC is partially evaluated into prefix/3
3. SCC is partially evaluated into domatch/4
4. SCC is partially evaluated into eqNatList/3
5. SCC is partially evaluated into notEmpty/2
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into start/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations and/3 
* CE 37 is refined into CE [43] 
* CE 36 is refined into CE [44] 
* CE 34 is refined into CE [45] 
* CE 35 is refined into CE [46] 
* CE 33 is refined into CE [47] 


#### Refined cost equations and/3 
* CE 43: and(V2,V,Out) = 0
     [V>=0,V2>=0,Out=0] 
* CE 44: and(V2,V,Out) = 0
     [Out=2,V=2,V2=2] 
* CE 45: and(V2,V,Out) = 0
     [Out=1,V=1,V2=2] 
* CE 46: and(V2,V,Out) = 0
     [Out=1,V=2,V2=1] 
* CE 47: and(V2,V,Out) = 0
     [Out=1,V=1,V2=1] 

### Cost equations --> "Loop" of and/3 
* CEs [43] --> Loop 31 
* CEs [44] --> Loop 32 
* CEs [45] --> Loop 33 
* CEs [46] --> Loop 34 
* CEs [47] --> Loop 35 

#### Loops of and/3 
* Loop 31: and(V2,V,Out) [V>=0,V2>=0,Out=0] 
* Loop 32: and(V2,V,Out) [Out=2,V=2,V2=2] 
* Loop 33: and(V2,V,Out) [Out=1,V=1,V2=2] 
* Loop 34: and(V2,V,Out) [Out=1,V=2,V2=1] 
* Loop 35: and(V2,V,Out) [Out=1,V=1,V2=1] 

### Ranking functions of CR and(V2,V,Out) 

#### Partial ranking functions of CR and(V2,V,Out) 


### Resulting Chains:and(V2,V,Out) 
* [35]
* [34]
* [33]
* [32]
* [31]


### Merging Chains  and/3 into  External patterns of execution 
* [[35]] --> 1 
* [[34]] --> 2 
* [[33]] --> 3 
* [[32]] --> 4 
* [[31]] --> 5 


### Specialization of cost equations fun/3 
* CE 42 is refined into CE [48] 
* CE 40 is refined into CE [49] 
* CE 39 is refined into CE [50] 
* CE 41 is refined into CE [51] 
* CE 38 is refined into CE [52] 


#### Refined cost equations fun/3 
* CE 48: fun(V2,V,Out) = 0
     [V>=0,V2>=0,Out=0] 
* CE 49: fun(V2,V,Out) = 0
     [V2>=1,Out=1,V=0] 
* CE 50: fun(V2,V,Out) = 0
     [V>=1,Out=1,V2=0] 
* CE 51: fun(V2,V,Out) = 0
     [Out=2,V=0,V2=0] 
* CE 52: fun(V2,V,Out) = 0+ fun(W2,X2,Out)
     [X2>=0,W2>=0,X2+1=V,W2+1=V2] 

### Cost equations --> "Loop" of fun/3 
* CEs [52] --> Loop 36 
* CEs [48] --> Loop 37 
* CEs [49] --> Loop 38 
* CEs [50] --> Loop 39 
* CEs [51] --> Loop 40 

#### Loops of fun/3 
* Loop 36: fun(V2,V,Out)->  fun(V2',V',Out)
                  [V'>=0,V2'>=0,V'+1=V,V2'+1=V2] 
* Loop 37: fun(V2,V,Out) [V>=0,V2>=0,Out=0] 
* Loop 38: fun(V2,V,Out) [V2>=1,Out=1,V=0] 
* Loop 39: fun(V2,V,Out) [V>=1,Out=1,V2=0] 
* Loop 40: fun(V2,V,Out) [Out=2,V=0,V2=0] 

### Ranking functions of CR fun(V2,V,Out) 
* RF of phase [36]: [V,V2]

#### Partial ranking functions of CR fun(V2,V,Out) 
* Partial RF of phase [36]:
  - RF of loop [36:1]:
    V
    V2


### Resulting Chains:fun(V2,V,Out) 
* [[36],40]
* [[36],39]
* [[36],38]
* [[36],37]
* [40]
* [39]
* [38]
* [37]


### Merging Chains  fun/3 into  External patterns of execution 
* [[40]] --> 1 
* [[39]] --> 2 
* [[38]] --> 3 
* [[37],[37,[36]]] --> 4 
* [[39,[36]]] --> 5 
* [[38,[36]]] --> 6 
* [[40,[36]]] --> 7 


### Specialization of cost equations prefix/3 
* CE 29 is refined into CE [53] 
* CE 27 is refined into CE [54] 
* CE 28 is refined into CE [55] 
* CE 26 is refined into CE [56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74] 


#### Refined cost equations prefix/3 
* CE 53: prefix(V2,V,Out) = 0
     [V>=0,V2>=0,Out=0] 
* CE 54: prefix(V2,V,Out) = 1
     [V2>=1,Out=1,V=1] 
* CE 55: prefix(V2,V,Out) = 1
     [V>=0,Out=2,V2=1] 
* CE 56: prefix(V2,V,Out) = 1+ fun(W2,X2,Y2):1+ prefix(Z2,A3,B3)+ and(C3,D3,E3):3
     [A3>=0,Z2>=0,A3+1=V,Z2+1=V2,B3=1,E3=1,D3=1,C3=2,Y2=2,X2=0,W2=0,Out=1] 
* CE 57: prefix(V2,V,Out) = 1+ fun(W2,X2,Y2):1+ prefix(Z2,A3,B3)+ and(C3,D3,E3):4
     [A3>=0,Z2>=0,A3+1=V,Z2+1=V2,B3=2,E3=2,D3=2,C3=2,Y2=2,X2=0,W2=0,Out=2] 
* CE 58: prefix(V2,V,Out) = 1+ fun(W2,X2,Y2):1+ prefix(Z2,A3,B3)+ and(C3,B3,D3):5
     [A3>=0,Z2>=0,B3>=0,A3+1=V,Z2+1=V2,D3=0,C3=2,Y2=2,X2=0,W2=0,Out=0] 
* CE 59: prefix(V2,V,Out) = 1+ fun(W2,X2,Y2):2+ prefix(Z2,A3,B3)+ and(C3,D3,E3):1
     [A3>=0,Z2>=0,X2>=1,X2+A3+1=V,Z2+1=V2,B3=1,E3=1,D3=1,C3=1,Y2=1,W2=0,Out=1] 
* CE 60: prefix(V2,V,Out) = 1+ fun(W2,X2,Y2):2+ prefix(Z2,A3,B3)+ and(C3,D3,E3):2
     [A3>=0,Z2>=0,X2>=1,X2+A3+1=V,Z2+1=V2,B3=2,E3=1,D3=2,C3=1,Y2=1,W2=0,Out=1] 
* CE 61: prefix(V2,V,Out) = 1+ fun(W2,X2,Y2):2+ prefix(Z2,A3,B3)+ and(C3,B3,D3):5
     [A3>=0,Z2>=0,B3>=0,X2>=1,X2+A3+1=V,Z2+1=V2,D3=0,C3=1,Y2=1,W2=0,Out=0] 
* CE 62: prefix(V2,V,Out) = 1+ fun(W2,X2,Y2):3+ prefix(Z2,A3,B3)+ and(C3,D3,E3):1
     [A3>=0,Z2>=0,W2>=1,W2+Z2+1=V2,A3+1=V,B3=1,E3=1,D3=1,C3=1,Y2=1,X2=0,Out=1] 
* CE 63: prefix(V2,V,Out) = 1+ fun(W2,X2,Y2):3+ prefix(Z2,A3,B3)+ and(C3,D3,E3):2
     [A3>=0,Z2>=0,W2>=1,W2+Z2+1=V2,A3+1=V,B3=2,E3=1,D3=2,C3=1,Y2=1,X2=0,Out=1] 
* CE 64: prefix(V2,V,Out) = 1+ fun(W2,X2,Y2):3+ prefix(Z2,A3,B3)+ and(C3,B3,D3):5
     [A3>=0,Z2>=0,B3>=0,W2>=1,W2+Z2+1=V2,A3+1=V,D3=0,C3=1,Y2=1,X2=0,Out=0] 
* CE 65: prefix(V2,V,Out) = 1+ fun(W2,X2,Y2):4+ prefix(Z2,A3,B3)+ and(C3,B3,D3):5
     [A3>=0,Z2>=0,B3>=0,X2>=0,W2>=0,X2+A3+1=V,W2+Z2+1=V2,D3=0,C3=0,Y2=0,Out=0] 
* CE 66: prefix(V2,V,Out) = 1+ fun(W2,X2,Y2):5+ prefix(Z2,A3,B3)+ and(C3,D3,E3):1
     [X2>=W2+1,A3>=0,Z2>=0,W2>=1,X2+A3+1=V,W2+Z2+1=V2,B3=1,E3=1,D3=1,C3=1,Y2=1,Out=1] 
* CE 67: prefix(V2,V,Out) = 1+ fun(W2,X2,Y2):5+ prefix(Z2,A3,B3)+ and(C3,D3,E3):2
     [X2>=W2+1,A3>=0,Z2>=0,W2>=1,X2+A3+1=V,W2+Z2+1=V2,B3=2,E3=1,D3=2,C3=1,Y2=1,Out=1] 
* CE 68: prefix(V2,V,Out) = 1+ fun(W2,X2,Y2):5+ prefix(Z2,A3,B3)+ and(C3,B3,D3):5
     [X2>=W2+1,A3>=0,Z2>=0,B3>=0,W2>=1,X2+A3+1=V,W2+Z2+1=V2,D3=0,C3=1,Y2=1,Out=0] 
* CE 69: prefix(V2,V,Out) = 1+ fun(W2,X2,Y2):6+ prefix(Z2,A3,B3)+ and(C3,D3,E3):1
     [W2>=X2+1,A3>=0,Z2>=0,X2>=1,X2+A3+1=V,W2+Z2+1=V2,B3=1,E3=1,D3=1,C3=1,Y2=1,Out=1] 
* CE 70: prefix(V2,V,Out) = 1+ fun(W2,X2,Y2):6+ prefix(Z2,A3,B3)+ and(C3,D3,E3):2
     [W2>=X2+1,A3>=0,Z2>=0,X2>=1,X2+A3+1=V,W2+Z2+1=V2,B3=2,E3=1,D3=2,C3=1,Y2=1,Out=1] 
* CE 71: prefix(V2,V,Out) = 1+ fun(W2,X2,Y2):6+ prefix(Z2,A3,B3)+ and(C3,B3,D3):5
     [W2>=X2+1,A3>=0,Z2>=0,B3>=0,X2>=1,X2+A3+1=V,W2+Z2+1=V2,D3=0,C3=1,Y2=1,Out=0] 
* CE 72: prefix(V2,V,Out) = 1+ fun(W2,W2,X2):7+ prefix(Y2,Z2,A3)+ and(B3,C3,D3):3
     [Z2>=0,Y2>=0,W2>=1,W2+Z2+1=V,W2+Y2+1=V2,A3=1,D3=1,C3=1,B3=2,X2=2,Out=1] 
* CE 73: prefix(V2,V,Out) = 1+ fun(W2,W2,X2):7+ prefix(Y2,Z2,A3)+ and(B3,C3,D3):4
     [Z2>=0,Y2>=0,W2>=1,W2+Z2+1=V,W2+Y2+1=V2,A3=2,D3=2,C3=2,B3=2,X2=2,Out=2] 
* CE 74: prefix(V2,V,Out) = 1+ fun(W2,W2,X2):7+ prefix(Y2,Z2,A3)+ and(B3,A3,C3):5
     [Z2>=0,Y2>=0,A3>=0,W2>=1,W2+Z2+1=V,W2+Y2+1=V2,C3=0,B3=2,X2=2,Out=0] 

### Cost equations --> "Loop" of prefix/3 
* CEs [73] --> Loop 41 
* CEs [57] --> Loop 42 
* CEs [70] --> Loop 43 
* CEs [67] --> Loop 44 
* CEs [63] --> Loop 45 
* CEs [60] --> Loop 46 
* CEs [69] --> Loop 47 
* CEs [66] --> Loop 48 
* CEs [72] --> Loop 49 
* CEs [62] --> Loop 50 
* CEs [59] --> Loop 51 
* CEs [56] --> Loop 52 
* CEs [74] --> Loop 53 
* CEs [64] --> Loop 54 
* CEs [61] --> Loop 55 
* CEs [58,65,68,71] --> Loop 56 
* CEs [53] --> Loop 57 
* CEs [54] --> Loop 58 
* CEs [55] --> Loop 59 

#### Loops of prefix/3 
* Loop 41: prefix(V2,V,Out)->  prefix(V2',V',Out')
                  [V+V2'>=V2,V2>=V2'+2,V2'>=0,V2+V'=V+V2',Out'=2,Out=2] 
* Loop 42: prefix(V2,V,Out)->  prefix(V2',V',Out')
                  [V>=1,V2>=1,V=V'+1,V2=V2'+1,Out'=2,Out=2] 
* Loop 43: prefix(V2,V,Out)->  prefix(V2',V',Out')
                  [V2+V'>=V+V2'+1,V>=V'+2,V'>=0,V2'>=0,Out'=2,Out=1] 
* Loop 44: prefix(V2,V,Out)->  prefix(V2',V',Out')
                  [V+V2'>=V2+V'+1,V2>=V2'+2,V'>=0,V2'>=0,Out'=2,Out=1] 
* Loop 45: prefix(V2,V,Out)->  prefix(V2',V',Out')
                  [V2>=V2'+2,V2'>=0,V>=1,V=V'+1,Out'=2,Out=1] 
* Loop 46: prefix(V2,V,Out)->  prefix(V2',V',Out')
                  [V>=V'+2,V'>=0,V2>=1,V2=V2'+1,Out'=2,Out=1] 
* Loop 47: prefix(V2,V,Out)->  prefix(V2',V',Out')
                  [V2+V'>=V+V2'+1,V>=V'+2,V'>=0,V2'>=0,Out'=1,Out=1] 
* Loop 48: prefix(V2,V,Out)->  prefix(V2',V',Out')
                  [V+V2'>=V2+V'+1,V2>=V2'+2,V'>=0,V2'>=0,Out'=1,Out=1] 
* Loop 49: prefix(V2,V,Out)->  prefix(V2',V',Out')
                  [V+V2'>=V2,V2>=V2'+2,V2'>=0,V2+V'=V+V2',Out'=1,Out=1] 
* Loop 50: prefix(V2,V,Out)->  prefix(V2',V',Out')
                  [V2>=V2'+2,V2'>=0,V>=1,V=V'+1,Out'=1,Out=1] 
* Loop 51: prefix(V2,V,Out)->  prefix(V2',V',Out')
                  [V>=V'+2,V'>=0,V2>=1,V2=V2'+1,Out'=1,Out=1] 
* Loop 52: prefix(V2,V,Out)->  prefix(V2',V',Out')
                  [V>=1,V2>=1,V=V'+1,V2=V2'+1,Out'=1,Out=1] 
* Loop 53: prefix(V2,V,Out)->  prefix(V2',V',Out')
                  [V+V2'>=V2,V2>=V2'+2,Out'>=0,V2'>=0,V2+V'=V+V2',Out=0] 
* Loop 54: prefix(V2,V,Out)->  prefix(V2',V',Out')
                  [V2>=V2'+2,Out'>=0,V2'>=0,V>=1,V=V'+1,Out=0] 
* Loop 55: prefix(V2,V,Out)->  prefix(V2',V',Out')
                  [V>=V'+2,Out'>=0,V'>=0,V2>=1,V2=V2'+1,Out=0] 
* Loop 56: prefix(V2,V,Out)->  prefix(V2',V',Out')
                  [V>=V'+1,V2>=V2'+1,Out'>=0,V'>=0,V2'>=0,Out=0] 
* Loop 57: prefix(V2,V,Out) [V>=0,V2>=0,Out=0] 
* Loop 58: prefix(V2,V,Out) [V2>=1,Out=1,V=1] 
* Loop 59: prefix(V2,V,Out) [V>=0,Out=2,V2=1] 

### Ranking functions of CR prefix(V2,V,Out) 
* RF of phase [41,42]: [V,V2]
* RF of phase [47,48,49,50,51,52]: [V,V2]
* RF of phase [53,54,55,56]: [V,V2]

#### Partial ranking functions of CR prefix(V2,V,Out) 
* Partial RF of phase [41,42]:
  - RF of loop [41:1]:
    V-1
    V2-1
  - RF of loop [42:1]:
    V
    V2
* Partial RF of phase [47,48,49,50,51,52]:
  - RF of loop [47:1]:
    V2/3-2/3
  - RF of loop [47:1,51:1]:
    V/2-1/2
  - RF of loop [48:1]:
    V/3-2/3
  - RF of loop [48:1,50:1]:
    V2/2-1/2
  - RF of loop [49:1]:
    V-1
    V2-1
  - RF of loop [50:1,52:1]:
    V
  - RF of loop [51:1,52:1]:
    V2
* Partial RF of phase [53,54,55,56]:
  - RF of loop [53:1]:
    V-1
    V2-1
  - RF of loop [54:1]:
    V2/2-1/2
  - RF of loop [54:1,56:1]:
    V
  - RF of loop [55:1]:
    V/2-1/2
  - RF of loop [55:1,56:1]:
    V2


### Resulting Chains:prefix(V2,V,Out) 
* [[53,54,55,56],[47,48,49,50,51,52],58]
* [[53,54,55,56],[47,48,49,50,51,52],46,[41,42],59]
* [[53,54,55,56],[47,48,49,50,51,52],46,59]
* [[53,54,55,56],[47,48,49,50,51,52],45,[41,42],59]
* [[53,54,55,56],[47,48,49,50,51,52],45,59]
* [[53,54,55,56],[47,48,49,50,51,52],44,[41,42],59]
* [[53,54,55,56],[47,48,49,50,51,52],44,59]
* [[53,54,55,56],[47,48,49,50,51,52],43,[41,42],59]
* [[53,54,55,56],[47,48,49,50,51,52],43,59]
* [[53,54,55,56],[41,42],59]
* [[53,54,55,56],59]
* [[53,54,55,56],58]
* [[53,54,55,56],57]
* [[53,54,55,56],46,[41,42],59]
* [[53,54,55,56],46,59]
* [[53,54,55,56],45,[41,42],59]
* [[53,54,55,56],45,59]
* [[53,54,55,56],44,[41,42],59]
* [[53,54,55,56],44,59]
* [[53,54,55,56],43,[41,42],59]
* [[53,54,55,56],43,59]
* [[47,48,49,50,51,52],58]
* [[47,48,49,50,51,52],46,[41,42],59]
* [[47,48,49,50,51,52],46,59]
* [[47,48,49,50,51,52],45,[41,42],59]
* [[47,48,49,50,51,52],45,59]
* [[47,48,49,50,51,52],44,[41,42],59]
* [[47,48,49,50,51,52],44,59]
* [[47,48,49,50,51,52],43,[41,42],59]
* [[47,48,49,50,51,52],43,59]
* [[41,42],59]
* [59]
* [58]
* [57]
* [46,[41,42],59]
* [46,59]
* [45,[41,42],59]
* [45,59]
* [44,[41,42],59]
* [44,59]
* [43,[41,42],59]
* [43,59]


### Merging Chains  prefix/3 into  External patterns of execution 
* [[59]] --> 1 
* [[59,43],[59,[41,42],43],[59,44],[59,[41,42],44],[59,[41,42],45],[59,46],[59,[41,42],46],[59,43,[47,48,49,50,51,52]],[59,[41,42],43,[47,48,49,50,51,52]],[59,44,[47,48,49,50,51,52]],[59,[41,42],44,[47,48,49,50,51,52]],[59,45,[47,48,49,50,51,52]],[59,[41,42],45,[47,48,49,50,51,52]],[59,46,[47,48,49,50,51,52]],[59,[41,42],46,[47,48,49,50,51,52]],[58,[47,48,49,50,51,52]]] --> 2 
* [[58]] --> 3 
* [[57],[59,43,[53,54,55,56]],[59,[41,42],43,[53,54,55,56]],[59,44,[53,54,55,56]],[59,[41,42],44,[53,54,55,56]],[59,45,[53,54,55,56]],[59,[41,42],45,[53,54,55,56]],[59,46,[53,54,55,56]],[59,[41,42],46,[53,54,55,56]],[57,[53,54,55,56]],[58,[53,54,55,56]],[59,[53,54,55,56]],[59,[41,42],[53,54,55,56]],[59,43,[47,48,49,50,51,52],[53,54,55,56]],[59,[41,42],43,[47,48,49,50,51,52],[53,54,55,56]],[59,44,[47,48,49,50,51,52],[53,54,55,56]],[59,[41,42],44,[47,48,49,50,51,52],[53,54,55,56]],[59,45,[47,48,49,50,51,52],[53,54,55,56]],[59,[41,42],45,[47,48,49,50,51,52],[53,54,55,56]],[59,46,[47,48,49,50,51,52],[53,54,55,56]],[59,[41,42],46,[47,48,49,50,51,52],[53,54,55,56]],[58,[47,48,49,50,51,52],[53,54,55,56]]] --> 4 
* [[59,45]] --> 5 
* [[59,[41,42]]] --> 6 


### Specialization of cost equations domatch/4 
* CE 20 is refined into CE [75,76,77,78,79,80] 
* CE 25 is refined into CE [81] 
* CE 23 is refined into CE [82] 
* CE 24 is refined into CE [83] 
* CE 21 is refined into CE [84,85] 
* CE 22 is refined into CE [86,87,88] 


#### Refined cost equations domatch/4 
* CE 75: domatch(V2,V,V7,Out) = 1+ prefix(W7,V,X7):1
     [V>=1,V7>=0,X7=2,W7=1,Out=0,V2=1] 
* CE 76: domatch(V2,V,V7,Out) = 1+ prefix(V2,V,W7):2
     [V>=2,V2>=2,V7>=0,W7=1,Out=0] 
* CE 77: domatch(V2,V,V7,Out) = 1+ prefix(V2,W7,X7):3
     [V2>=1,V7>=0,X7=1,W7=1,Out=0,V=1] 
* CE 78: domatch(V2,V,V7,Out) = 1+ prefix(V2,V,W7):4
     [V>=1,V2>=0,V7>=0,W7=0,Out=0] 
* CE 79: domatch(V2,V,V7,Out) = 1+ prefix(V2,V,W7):5
     [V>=1,V2>=3,V7>=0,W7=1,Out=0] 
* CE 80: domatch(V2,V,V7,Out) = 1+ prefix(V2,V,W7):6
     [V+1>=V2,V2>=2,V7>=0,W7=2,Out=0] 
* CE 81: domatch(V2,V,V7,Out) = 0
     [V7>=0,V>=0,V2>=0,Out=0] 
* CE 82: domatch(V2,V,V7,Out) = 1
     [V7>=0,V2>=1,Out=1,V=1] 
* CE 83: domatch(V2,V,V7,Out) = 1
     [V7>=0,V7+2=Out,V=1,V2=1] 
* CE 84: domatch(V2,V,V7,Out) = 1+ prefix(W7,V,X7):1+ domatch(Y7,Z7,A8,B8)
     [V>=Z7+1,Z7>=0,V7>=0,V7+B8+1=Out,V7+4=A8,Y7=1,X7=2,W7=1,V2=1] 
* CE 85: domatch(V2,V,V7,Out) = 1+ prefix(V2,V,W7):6+ domatch(V2,X7,Y7,Z7)
     [V>=X7+1,V+1>=V2,X7>=0,V2>=2,V7>=0,V7+Z7+1=Out,V7+4=Y7,W7=2] 
* CE 86: domatch(V2,V,V7,Out) = 1+ prefix(V2,V,W7):2+ domatch(V2,X7,Y7,Out)
     [V>=X7+1,X7>=0,V>=2,V2>=2,V7>=0,V7+4=Y7,W7=1] 
* CE 87: domatch(V2,V,V7,Out) = 1+ prefix(V2,W7,X7):3+ domatch(V2,Y7,Z7,Out)
     [V2>=1,V7>=0,V7+4=Z7,Y7=0,X7=1,W7=1,V=1] 
* CE 88: domatch(V2,V,V7,Out) = 1+ prefix(V2,V,W7):5+ domatch(V2,X7,Y7,Out)
     [V>=X7+1,X7>=0,V2>=3,V7>=0,V7+4=Y7,W7=1] 

### Cost equations --> "Loop" of domatch/4 
* CEs [85] --> Loop 60 
* CEs [88] --> Loop 61 
* CEs [86] --> Loop 62 
* CEs [87] --> Loop 63 
* CEs [84] --> Loop 64 
* CEs [82] --> Loop 65 
* CEs [77] --> Loop 66 
* CEs [75,76,78,79,80,81] --> Loop 67 
* CEs [83] --> Loop 68 

#### Loops of domatch/4 
* Loop 60: domatch(V2,V,V7,Out)->  domatch(V2,V',V7',Out')
                  [V>=V'+1,V+1>=V2,V'>=0,V7>=0,V2>=2,V7+Out'+1=Out,V7+4=V7'] 
* Loop 61: domatch(V2,V,V7,Out)->  domatch(V2,V',V7',Out)
                  [V>=V'+1,V'>=0,V7>=0,V2>=3,V7+4=V7'] 
* Loop 62: domatch(V2,V,V7,Out)->  domatch(V2,V',V7',Out)
                  [V>=V'+1,V'>=0,V7>=0,V>=2,V2>=2,V7+4=V7'] 
* Loop 63: domatch(V2,V,V7,Out)->  domatch(V2,V',V7',Out)
                  [V7>=0,V2>=1,V7+4=V7',V'=0,V=1] 
* Loop 64: domatch(V2,V,V7,Out)->  domatch(V2',V',V7',Out')
                  [V>=V'+1,V'>=0,V7>=0,V7+Out'+1=Out,V7+4=V7',V2'=1,V2=1] 
* Loop 65: domatch(V2,V,V7,Out) [V7>=0,V2>=1,Out=1,V=1] 
* Loop 66: domatch(V2,V,V7,Out) [V7>=0,V2>=1,Out=0,V=1] 
* Loop 67: domatch(V2,V,V7,Out) [V7>=0,V>=0,V2>=0,Out=0] 
* Loop 68: domatch(V2,V,V7,Out) [V7>=0,V7+2=Out,V=1,V2=1] 

### Ranking functions of CR domatch(V2,V,V7,Out) 
* RF of phase [60,61,62]: [V]
* RF of phase [64]: [V]

#### Partial ranking functions of CR domatch(V2,V,V7,Out) 
* Partial RF of phase [60,61,62]:
  - RF of loop [60:1]:
    -V2+V+2
  - RF of loop [60:1,61:1]:
    V
  - RF of loop [62:1]:
    V-1
* Partial RF of phase [64]:
  - RF of loop [64:1]:
    V


### Resulting Chains:domatch(V2,V,V7,Out) 
* [[64],68]
* [[64],67]
* [[64],66]
* [[64],65]
* [[64],63,67]
* [[60,61,62],67]
* [[60,61,62],66]
* [[60,61,62],65]
* [[60,61,62],63,67]
* [68]
* [67]
* [66]
* [65]
* [63,67]


### Merging Chains  domatch/4 into  External patterns of execution 
* [[68],[67,63,[64]],[65,[64]],[66,[64]],[67,[64]],[68,[64]]] --> 1 
* [[67,63],[66],[67]] --> 2 
* [[65]] --> 3 
* [[67,63,[60,61,62]],[65,[60,61,62]],[66,[60,61,62]],[67,[60,61,62]]] --> 4 


### Specialization of cost equations eqNatList/3 
* CE 13 is refined into CE [89,90,91,92,93,94,95] 
* CE 19 is refined into CE [96] 
* CE 16 is refined into CE [97] 
* CE 15 is refined into CE [98,99,100,101] 
* CE 17 is refined into CE [102] 
* CE 18 is refined into CE [103] 
* CE 14 is refined into CE [104,105] 


#### Refined cost equations eqNatList/3 
* CE 89: eqNatList(V2,V,Out) = 1+ fun(W2,X2,Y2):1
     [V>=1,V2>=1,Y2=2,X2=0,W2=0,Out=0] 
* CE 90: eqNatList(V2,V,Out) = 1+ fun(W2,X2,Y2):2
     [V>=X2+1,X2>=1,V2>=1,Y2=1,W2=0,Out=0] 
* CE 91: eqNatList(V2,V,Out) = 1+ fun(W2,X2,Y2):3
     [V2>=W2+1,W2>=1,V>=1,Y2=1,X2=0,Out=0] 
* CE 92: eqNatList(V2,V,Out) = 1+ fun(W2,X2,Y2):4
     [V>=X2+1,V2>=W2+1,X2>=0,W2>=0,Y2=0,Out=0] 
* CE 93: eqNatList(V2,V,Out) = 1+ fun(W2,X2,Y2):5
     [V>=X2+1,X2>=W2+1,V2>=W2+1,W2>=1,Y2=1,Out=0] 
* CE 94: eqNatList(V2,V,Out) = 1+ fun(W2,X2,Y2):6
     [W2>=X2+1,V>=X2+1,V2>=W2+1,X2>=1,Y2=1,Out=0] 
* CE 95: eqNatList(V2,V,Out) = 1+ fun(W2,W2,X2):7
     [V>=W2+1,V2>=W2+1,W2>=1,X2=2,Out=0] 
* CE 96: eqNatList(V2,V,Out) = 0
     [V>=0,V2>=0,Out=0] 
* CE 97: eqNatList(V2,V,Out) = 1
     [V2>=1,Out=1,V=1] 
* CE 98: eqNatList(V2,V,Out) = 1+ fun(W2,X2,Y2):2
     [V>=X2+1,X2>=1,V2>=1,Y2=1,W2=0,Out=1] 
* CE 99: eqNatList(V2,V,Out) = 1+ fun(W2,X2,Y2):3
     [V2>=W2+1,W2>=1,V>=1,Y2=1,X2=0,Out=1] 
* CE 100: eqNatList(V2,V,Out) = 1+ fun(W2,X2,Y2):5
     [V>=X2+1,X2>=W2+1,V2>=W2+1,W2>=1,Y2=1,Out=1] 
* CE 101: eqNatList(V2,V,Out) = 1+ fun(W2,X2,Y2):6
     [W2>=X2+1,V>=X2+1,V2>=W2+1,X2>=1,Y2=1,Out=1] 
* CE 102: eqNatList(V2,V,Out) = 1
     [V>=1,Out=1,V2=1] 
* CE 103: eqNatList(V2,V,Out) = 1
     [Out=2,V=1,V2=1] 
* CE 104: eqNatList(V2,V,Out) = 1+ fun(W2,X2,Y2):1+ eqNatList(Z2,A3,Out)
     [A3>=0,Z2>=0,A3+1=V,Z2+1=V2,Y2=2,X2=0,W2=0] 
* CE 105: eqNatList(V2,V,Out) = 1+ fun(W2,W2,X2):7+ eqNatList(Y2,Z2,Out)
     [Z2>=0,Y2>=0,W2>=1,W2+Z2+1=V,W2+Y2+1=V2,X2=2] 

### Cost equations --> "Loop" of eqNatList/3 
* CEs [105] --> Loop 69 
* CEs [104] --> Loop 70 
* CEs [99] --> Loop 71 
* CEs [98,100,101] --> Loop 72 
* CEs [89,90,91,92,93,94,95,96] --> Loop 73 
* CEs [97] --> Loop 74 
* CEs [102] --> Loop 75 
* CEs [103] --> Loop 76 

#### Loops of eqNatList/3 
* Loop 69: eqNatList(V2,V,Out)->  eqNatList(V2',V',Out)
                  [V+V2'>=V2,V2>=V2'+2,V2'>=0,V2+V'=V+V2'] 
* Loop 70: eqNatList(V2,V,Out)->  eqNatList(V2',V',Out)
                  [V>=1,V2>=1,V=V'+1,V2=V2'+1] 
* Loop 71: eqNatList(V2,V,Out) [V>=1,V2>=2,Out=1] 
* Loop 72: eqNatList(V2,V,Out) [V>=2,V2>=1,Out=1] 
* Loop 73: eqNatList(V2,V,Out) [V>=0,V2>=0,Out=0] 
* Loop 74: eqNatList(V2,V,Out) [V2>=1,Out=1,V=1] 
* Loop 75: eqNatList(V2,V,Out) [V>=1,Out=1,V2=1] 
* Loop 76: eqNatList(V2,V,Out) [Out=2,V=1,V2=1] 

### Ranking functions of CR eqNatList(V2,V,Out) 
* RF of phase [69,70]: [V,V2]

#### Partial ranking functions of CR eqNatList(V2,V,Out) 
* Partial RF of phase [69,70]:
  - RF of loop [69:1]:
    V-1
    V2-1
  - RF of loop [70:1]:
    V
    V2


### Resulting Chains:eqNatList(V2,V,Out) 
* [[69,70],76]
* [[69,70],75]
* [[69,70],74]
* [[69,70],73]
* [[69,70],72]
* [[69,70],71]
* [76]
* [75]
* [74]
* [73]
* [72]
* [71]


### Merging Chains  eqNatList/3 into  External patterns of execution 
* [[76]] --> 1 
* [[75]] --> 2 
* [[74]] --> 3 
* [[73],[73,[69,70]]] --> 4 
* [[72],[71,[69,70]],[72,[69,70]],[74,[69,70]],[75,[69,70]]] --> 5 
* [[71]] --> 6 
* [[76,[69,70]]] --> 7 


### Specialization of cost equations notEmpty/2 
* CE 30 is refined into CE [106] 
* CE 32 is refined into CE [107] 
* CE 31 is refined into CE [108] 


#### Refined cost equations notEmpty/2 
* CE 106: notEmpty(V2,Out) = 1
     [V2>=1,Out=2] 
* CE 107: notEmpty(V2,Out) = 0
     [V2>=0,Out=0] 
* CE 108: notEmpty(V2,Out) = 1
     [Out=1,V2=1] 

### Cost equations --> "Loop" of notEmpty/2 
* CEs [106] --> Loop 77 
* CEs [107] --> Loop 78 
* CEs [108] --> Loop 79 

#### Loops of notEmpty/2 
* Loop 77: notEmpty(V2,Out) [V2>=1,Out=2] 
* Loop 78: notEmpty(V2,Out) [V2>=0,Out=0] 
* Loop 79: notEmpty(V2,Out) [Out=1,V2=1] 

### Ranking functions of CR notEmpty(V2,Out) 

#### Partial ranking functions of CR notEmpty(V2,Out) 


### Resulting Chains:notEmpty(V2,Out) 
* [79]
* [78]
* [77]


### Merging Chains  notEmpty/2 into  External patterns of execution 
* [[79]] --> 1 
* [[78]] --> 2 
* [[77]] --> 3 


### Specialization of cost equations start/5 
* CE 4 is refined into CE [109,110,111,112] 
* CE 3 is refined into CE [113,114,115,116,117,118,119] 
* CE 2 is refined into CE [120] 
* CE 5 is refined into CE [121,122,123,124] 
* CE 6 is refined into CE [125,126,127,128,129,130] 
* CE 7 is refined into CE [131,132,133,134] 
* CE 8 is refined into CE [135,136,137,138,139,140,141] 
* CE 9 is refined into CE [142,143,144] 
* CE 10 is refined into CE [145,146,147,148] 
* CE 11 is refined into CE [149,150,151,152,153] 
* CE 12 is refined into CE [154,155,156,157,158,159,160] 


#### Refined cost equations start/5 
* CE 109: start(V2,V,V7,V38,V47) = 0+ domatch(W47,X47,Y47,Z47):1
     [Z47>=Y47+1,V7>=X47+1,Y47>=4,X47>=1,Y47=V38+4,W47=1,V=1,V2=2] 
* CE 110: start(V2,V,V7,V38,V47) = 0+ domatch(V,W47,X47,Y47):2
     [V7>=W47+1,X47>=4,W47>=0,V>=0,X47=V38+4,Y47=0,V2=2] 
* CE 111: start(V2,V,V7,V38,V47) = 0+ domatch(V,W47,X47,Y47):3
     [X47>=4,V>=1,V7>=2,X47=V38+4,Y47=1,W47=1,V2=2] 
* CE 112: start(V2,V,V7,V38,V47) = 0+ domatch(V,W47,X47,Y47):4
     [V+W47+Y47>=4,V7>=W47+1,Y47>=0,X47>=4,W47>=1,V>=2,X47=V38+4,V2=2] 
* CE 113: start(V2,V,V7,V38,V47) = 0+ eqNatList(W47,X47,Y47):1
     [V38>=0,V>=0,Y47=2,X47=1,W47=1,V47=1,V7=1,V2=2] 
* CE 114: start(V2,V,V7,V38,V47) = 0+ eqNatList(W47,V7,X47):2
     [V7>=1,V38>=0,V>=0,X47=1,W47=1,V47=1,V2=2] 
* CE 115: start(V2,V,V7,V38,V47) = 0+ eqNatList(V47,W47,X47):3
     [V47>=1,V38>=0,V>=0,X47=1,W47=1,V7=1,V2=2] 
* CE 116: start(V2,V,V7,V38,V47) = 0+ eqNatList(V47,V7,W47):4
     [V7>=0,V47>=0,V38>=0,V>=0,W47=0,V2=2] 
* CE 117: start(V2,V,V7,V38,V47) = 0+ eqNatList(V47,V7,W47):5
     [V7>=2,V47>=1,V38>=0,V>=0,W47=1,V2=2] 
* CE 118: start(V2,V,V7,V38,V47) = 0+ eqNatList(V47,V7,W47):6
     [V7>=1,V47>=2,V38>=0,V>=0,W47=1,V2=2] 
* CE 119: start(A,B,C,D,C) = 0+ eqNatList(C,C,E):7
     [C>=2,D>=0,B>=0,E=2,A=2] 
* CE 120: start(V2,V,V7,V38,V47) = 0
     [V38>=0,V7>=0,V>=0,V2>=0] 
* CE 121: start(V2,V,V7,V38,V47) = 0+ domatch(W47,X47,Y47,Z47):1
     [Z47>=Y47+1,V7>=X47+1,Y47>=4,X47>=1,Y47=V38+4,W47=1,V=1,V2=1] 
* CE 122: start(V2,V,V7,V38,V47) = 0+ domatch(V,W47,X47,Y47):2
     [V7>=W47+1,X47>=4,W47>=0,V>=0,X47=V38+4,Y47=0,V2=1] 
* CE 123: start(V2,V,V7,V38,V47) = 0+ domatch(V,W47,X47,Y47):3
     [X47>=4,V>=1,V7>=2,X47=V38+4,Y47=1,W47=1,V2=1] 
* CE 124: start(V2,V,V7,V38,V47) = 0+ domatch(V,W47,X47,Y47):4
     [V+W47+Y47>=4,V7>=W47+1,Y47>=0,X47>=4,W47>=1,V>=2,X47=V38+4,V2=1] 
* CE 125: start(V2,V,V7,V38,V47) = 0+ prefix(W47,V,X47):1
     [V>=0,X47=2,W47=1,V2=1] 
* CE 126: start(V2,V,V7,V38,V47) = 0+ prefix(V2,V,W47):2
     [V>=2,V2>=2,W47=1] 
* CE 127: start(V2,V,V7,V38,V47) = 0+ prefix(V2,W47,X47):3
     [V2>=1,X47=1,W47=1,V=1] 
* CE 128: start(V2,V,V7,V38,V47) = 0+ prefix(V2,V,W47):4
     [V>=0,V2>=0,W47=0] 
* CE 129: start(V2,V,V7,V38,V47) = 0+ prefix(V2,V,W47):5
     [V>=1,V2>=3,W47=1] 
* CE 130: start(V2,V,V7,V38,V47) = 0+ prefix(V2,V,W47):6
     [V+1>=V2,V2>=2,W47=2] 
* CE 131: start(V2,V,V7,V38,V47) = 0+ domatch(W47,V,V7,X47):1
     [X47>=V7+1,V7>=0,V>=1,W47=1,V2=1] 
* CE 132: start(V2,V,V7,V38,V47) = 0+ domatch(V2,V,V7,W47):2
     [V7>=0,V>=0,V2>=0,W47=0] 
* CE 133: start(V2,V,V7,V38,V47) = 0+ domatch(V2,W47,V7,X47):3
     [V7>=0,V2>=1,X47=1,W47=1,V=1] 
* CE 134: start(V2,V,V7,V38,V47) = 0+ domatch(V2,V,V7,W47):4
     [V2+V+W47>=4,W47>=0,V7>=0,V>=1,V2>=2] 
* CE 135: start(V2,V,V7,V38,V47) = 0+ eqNatList(W47,X47,Y47):1
     [Y47=2,X47=1,W47=1,V=1,V2=1] 
* CE 136: start(V2,V,V7,V38,V47) = 0+ eqNatList(W47,V,X47):2
     [V>=1,X47=1,W47=1,V2=1] 
* CE 137: start(V2,V,V7,V38,V47) = 0+ eqNatList(V2,W47,X47):3
     [V2>=1,X47=1,W47=1,V=1] 
* CE 138: start(V2,V,V7,V38,V47) = 0+ eqNatList(V2,V,W47):4
     [V>=0,V2>=0,W47=0] 
* CE 139: start(V2,V,V7,V38,V47) = 0+ eqNatList(V2,V,W47):5
     [V>=2,V2>=1,W47=1] 
* CE 140: start(V2,V,V7,V38,V47) = 0+ eqNatList(V2,V,W47):6
     [V>=1,V2>=2,W47=1] 
* CE 141: start(A,A,B,C,D) = 0+ eqNatList(A,A,E):7
     [A>=2,E=2] 
* CE 142: start(V2,V,V7,V38,V47) = 0+ notEmpty(W47,X47):1
     [X47=1,W47=1,V2=1] 
* CE 143: start(V2,V,V7,V38,V47) = 0+ notEmpty(V2,W47):2
     [V2>=0,W47=0] 
* CE 144: start(V2,V,V7,V38,V47) = 0+ notEmpty(V2,W47):3
     [V2>=1,W47=2] 
* CE 145: start(V2,V,V7,V38,V47) = 1+ domatch(W47,V,X47,Y47):1
     [Y47>=2,V>=1,X47=1,W47=1,V2=1] 
* CE 146: start(V2,V,V7,V38,V47) = 1+ domatch(V2,V,W47,X47):2
     [V>=0,V2>=0,X47=0,W47=1] 
* CE 147: start(V2,V,V7,V38,V47) = 1+ domatch(V2,W47,X47,Y47):3
     [V2>=1,Y47=1,X47=1,W47=1,V=1] 
* CE 148: start(V2,V,V7,V38,V47) = 1+ domatch(V2,V,W47,X47):4
     [V2+V+X47>=4,X47>=0,V>=1,V2>=2,W47=1] 
* CE 149: start(V2,V,V7,V38,V47) = 0+ and(W47,X47,Y47):1
     [Y47=1,X47=1,W47=1,V=1,V2=1] 
* CE 150: start(V2,V,V7,V38,V47) = 0+ and(W47,X47,Y47):2
     [Y47=1,X47=2,W47=1,V=2,V2=1] 
* CE 151: start(V2,V,V7,V38,V47) = 0+ and(W47,X47,Y47):3
     [Y47=1,X47=1,W47=2,V=1,V2=2] 
* CE 152: start(V2,V,V7,V38,V47) = 0+ and(W47,X47,Y47):4
     [Y47=2,X47=2,W47=2,V=2,V2=2] 
* CE 153: start(V2,V,V7,V38,V47) = 0+ and(V2,V,W47):5
     [V>=0,V2>=0,W47=0] 
* CE 154: start(V2,V,V7,V38,V47) = 0+ fun(W47,X47,Y47):1
     [Y47=2,X47=0,W47=0,V=0,V2=0] 
* CE 155: start(V2,V,V7,V38,V47) = 0+ fun(W47,V,X47):2
     [V>=1,X47=1,W47=0,V2=0] 
* CE 156: start(V2,V,V7,V38,V47) = 0+ fun(V2,W47,X47):3
     [V2>=1,X47=1,W47=0,V=0] 
* CE 157: start(V2,V,V7,V38,V47) = 0+ fun(V2,V,W47):4
     [V>=0,V2>=0,W47=0] 
* CE 158: start(V2,V,V7,V38,V47) = 0+ fun(V2,V,W47):5
     [V>=V2+1,V2>=1,W47=1] 
* CE 159: start(V2,V,V7,V38,V47) = 0+ fun(V2,V,W47):6
     [V2>=V+1,V>=1,W47=1] 
* CE 160: start(A,A,B,C,D) = 0+ fun(A,A,E):7
     [A>=1,E=2] 

### Cost equations --> "Loop" of start/5 
* CEs [156] --> Loop 80 
* CEs [119] --> Loop 81 
* CEs [110,111,112,114] --> Loop 82 
* CEs [113,115,116,117,118] --> Loop 83 
* CEs [141,152,160] --> Loop 84 
* CEs [109,127,133,137,147,151] --> Loop 85 
* CEs [121,122,123,124,125,131,135,136,142,145,149,150] --> Loop 86 
* CEs [155] --> Loop 87 
* CEs [120,126,128,129,130,132,134,138,139,140,143,144,146,148,153,154,157,158,159] --> Loop 88 

#### Loops of start/5 
* Loop 80: start(V2,V,V7,V38,V47) [V2>=1,V=0] 
* Loop 81: start(A,B,C,D,C) [D>=0,C>=2,B>=0,A=2] 
* Loop 82: start(V2,V,V7,V38,V47) [V38>=0,V7>=1,V>=0,V2=2] 
* Loop 83: start(V2,V,V7,V38,V47) [V47>=0,V38>=0,V7>=0,V>=0,V2=2] 
* Loop 84: start(A,A,B,C,D) [A>=1] 
* Loop 85: start(V2,V,V7,V38,V47) [V2>=1,V=1] 
* Loop 86: start(V2,V,V7,V38,V47) [V2=1] 
* Loop 87: start(V2,V,V7,V38,V47) [V>=1,V2=0] 
* Loop 88: start(V2,V,V7,V38,V47) [V2>=0] 

### Ranking functions of CR start(V2,V,V7,V38,V47) 

#### Partial ranking functions of CR start(V2,V,V7,V38,V47) 


### Resulting Chains:start(V2,V,V7,V38,V47) 
* [88]
* [87]
* [86]
* [85]
* [84]
* [83]
* [82]
* [81]
* [80]


### Merging Chains  start/5 into  External patterns of execution 
* [[87],[88]] --> 1 
* [[86]] --> 2 
* [[81],[83]] --> 3 
* [[82]] --> 4 
* [[80]] --> 5 
* [[85]] --> 6 
* [[84]] --> 7 


Computing Bounds
=====================================

#### Cost of chains of and(V2,V,Out):
* Chain [35]: 0
  with precondition: [V2=1,V=1,Out=1] 

* Chain [34]: 0
  with precondition: [V2=1,V=2,Out=1] 

* Chain [33]: 0
  with precondition: [V2=2,V=1,Out=1] 

* Chain [32]: 0
  with precondition: [V2=2,V=2,Out=2] 

* Chain [31]: 0
  with precondition: [Out=0,V2>=0,V>=0] 


#### Cost of loops [36] 

 * loop 36:fun(V2,V,Out) -> [fun(V2',V',Out')] 
0
#### Cost of phase [36]:fun(V2,V,Out) -> [fun(V2',V',Out')] 
0
#### Cost of phase [36]:fun(V2,V,Out) -> [fun(V2',V',Out')] 
0
#### Cost of phase [36]:fun(V2,V,Out) -> [fun(V2',V',Out')] 
0
#### Cost of phase [36]:fun(V2,V,Out) -> [fun(V2',V',Out')] 
0
#### Cost of chains of fun(V2,V,Out):
* Chain [[36],40]: 0
  with precondition: [Out=2,V2=V,V2>=1] 

* Chain [[36],39]: 0
  with precondition: [Out=1,V2>=1,V>=V2+1] 

* Chain [[36],38]: 0
  with precondition: [Out=1,V>=1,V2>=V+1] 

* Chain [[36],37]: 0
  with precondition: [Out=0,V2>=1,V>=1] 

* Chain [40]: 0
  with precondition: [V2=0,V=0,Out=2] 

* Chain [39]: 0
  with precondition: [V2=0,Out=1,V>=1] 

* Chain [38]: 0
  with precondition: [V=0,Out=1,V2>=1] 

* Chain [37]: 0
  with precondition: [Out=0,V2>=0,V>=0] 


#### Cost of loops [47,48,49,50,51,52] 

 * loop 47:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
1
 * loop 48:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
1
 * loop 49:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
1
 * loop 50:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
1
 * loop 51:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
1
 * loop 52:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
1
#### Cost of phase [47,48,49,50,51,52]:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
1*it(47)+1*it(48)+1*it(49)+1*it(50)+1*it(51)+1*it(52)+0
  Such that:it(47) =< V2/3
it(47) =< V2/3-V2'/3
it(48) =< V/3
it(48) =< V/3-V'/3
aux(1) =< V2
aux(2) =< V2-V2'
aux(3) =< V2/2
aux(4) =< V2/2-V2'/2
aux(5) =< V
aux(6) =< V-V'
aux(7) =< V/2
aux(8) =< V/2-V'/2
it(47) =< aux(1)
it(48) =< aux(1)
it(49) =< aux(1)
it(50) =< aux(1)
it(51) =< aux(1)
it(52) =< aux(1)
it(47) =< aux(2)
it(48) =< aux(2)
it(49) =< aux(2)
it(50) =< aux(2)
it(51) =< aux(2)
it(52) =< aux(2)
it(48) =< aux(3)
it(49) =< aux(3)
it(50) =< aux(3)
it(48) =< aux(4)
it(49) =< aux(4)
it(50) =< aux(4)
it(47) =< aux(5)
it(48) =< aux(5)
it(49) =< aux(5)
it(50) =< aux(5)
it(51) =< aux(5)
it(52) =< aux(5)
it(47) =< aux(6)
it(48) =< aux(6)
it(49) =< aux(6)
it(50) =< aux(6)
it(51) =< aux(6)
it(52) =< aux(6)
it(47) =< aux(7)
it(48) =< aux(7)
it(49) =< aux(7)
it(51) =< aux(7)
it(47) =< aux(8)
it(48) =< aux(8)
it(49) =< aux(8)
it(51) =< aux(8)

#### Cost of loops [53,54,55,56] 

 * loop 53:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
1
 * loop 54:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
1
 * loop 55:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
1
 * loop 56:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
1
#### Cost of phase [53,54,55,56]:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
2*it(53)+1*it(54)+1*it(55)+0
  Such that:it(54) =< V2/2
it(54) =< V2/2-V2'/2
it(55) =< V/2
it(55) =< V/2-V'/2
aux(13) =< V2
aux(14) =< V2-V2'
aux(15) =< V
aux(16) =< V-V'
it(53) =< aux(13)
it(54) =< aux(13)
it(55) =< aux(13)
it(53) =< aux(14)
it(54) =< aux(14)
it(55) =< aux(14)
it(53) =< aux(15)
it(54) =< aux(15)
it(55) =< aux(15)
it(53) =< aux(16)
it(54) =< aux(16)
it(55) =< aux(16)

#### Cost of loops [41,42] 

 * loop 41:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
1
 * loop 42:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
1
#### Cost of phase [41,42]:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
2*it(41)+0
  Such that:aux(20) =< V2
aux(21) =< V2-V2'
aux(22) =< V
aux(23) =< V-V'
it(41) =< aux(20)
it(41) =< aux(21)
it(41) =< aux(22)
it(41) =< aux(23)

#### Cost of phase [47,48,49,50,51,52]:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
1*it(47)+1*it(48)+1*it(49)+1*it(50)+1*it(51)+1*it(52)+0
  Such that:it(47) =< V2/3
it(47) =< V2/3-V2'/3
it(48) =< V/3
it(48) =< V/3-V'/3
aux(1) =< V2
aux(2) =< V2-V2'
aux(3) =< V2/2
aux(4) =< V2/2-V2'/2
aux(5) =< V
aux(6) =< V-V'
aux(7) =< V/2
aux(8) =< V/2-V'/2
it(47) =< aux(1)
it(48) =< aux(1)
it(49) =< aux(1)
it(50) =< aux(1)
it(51) =< aux(1)
it(52) =< aux(1)
it(47) =< aux(2)
it(48) =< aux(2)
it(49) =< aux(2)
it(50) =< aux(2)
it(51) =< aux(2)
it(52) =< aux(2)
it(48) =< aux(3)
it(49) =< aux(3)
it(50) =< aux(3)
it(48) =< aux(4)
it(49) =< aux(4)
it(50) =< aux(4)
it(47) =< aux(5)
it(48) =< aux(5)
it(49) =< aux(5)
it(50) =< aux(5)
it(51) =< aux(5)
it(52) =< aux(5)
it(47) =< aux(6)
it(48) =< aux(6)
it(49) =< aux(6)
it(50) =< aux(6)
it(51) =< aux(6)
it(52) =< aux(6)
it(47) =< aux(7)
it(48) =< aux(7)
it(49) =< aux(7)
it(51) =< aux(7)
it(47) =< aux(8)
it(48) =< aux(8)
it(49) =< aux(8)
it(51) =< aux(8)

#### Cost of phase [53,54,55,56]:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
2*it(53)+1*it(54)+1*it(55)+0
  Such that:it(54) =< V2/2
it(54) =< V2/2-V2'/2
it(55) =< V/2
it(55) =< V/2-V'/2
aux(13) =< V2
aux(14) =< V2-V2'
aux(15) =< V
aux(16) =< V-V'
it(53) =< aux(13)
it(54) =< aux(13)
it(55) =< aux(13)
it(53) =< aux(14)
it(54) =< aux(14)
it(55) =< aux(14)
it(53) =< aux(15)
it(54) =< aux(15)
it(55) =< aux(15)
it(53) =< aux(16)
it(54) =< aux(16)
it(55) =< aux(16)

#### Cost of phase [47,48,49,50,51,52]:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
1*it(47)+1*it(48)+1*it(49)+1*it(50)+1*it(51)+1*it(52)+0
  Such that:it(47) =< V2/3
it(47) =< V2/3-V2'/3
it(48) =< V/3
it(48) =< V/3-V'/3
aux(1) =< V2
aux(2) =< V2-V2'
aux(3) =< V2/2
aux(4) =< V2/2-V2'/2
aux(5) =< V
aux(6) =< V-V'
aux(7) =< V/2
aux(8) =< V/2-V'/2
it(47) =< aux(1)
it(48) =< aux(1)
it(49) =< aux(1)
it(50) =< aux(1)
it(51) =< aux(1)
it(52) =< aux(1)
it(47) =< aux(2)
it(48) =< aux(2)
it(49) =< aux(2)
it(50) =< aux(2)
it(51) =< aux(2)
it(52) =< aux(2)
it(48) =< aux(3)
it(49) =< aux(3)
it(50) =< aux(3)
it(48) =< aux(4)
it(49) =< aux(4)
it(50) =< aux(4)
it(47) =< aux(5)
it(48) =< aux(5)
it(49) =< aux(5)
it(50) =< aux(5)
it(51) =< aux(5)
it(52) =< aux(5)
it(47) =< aux(6)
it(48) =< aux(6)
it(49) =< aux(6)
it(50) =< aux(6)
it(51) =< aux(6)
it(52) =< aux(6)
it(47) =< aux(7)
it(48) =< aux(7)
it(49) =< aux(7)
it(51) =< aux(7)
it(47) =< aux(8)
it(48) =< aux(8)
it(49) =< aux(8)
it(51) =< aux(8)

#### Cost of phase [53,54,55,56]:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
2*it(53)+1*it(54)+1*it(55)+0
  Such that:it(54) =< V2/2
it(54) =< V2/2-V2'/2
it(55) =< V/2
it(55) =< V/2-V'/2
aux(13) =< V2
aux(14) =< V2-V2'
aux(15) =< V
aux(16) =< V-V'
it(53) =< aux(13)
it(54) =< aux(13)
it(55) =< aux(13)
it(53) =< aux(14)
it(54) =< aux(14)
it(55) =< aux(14)
it(53) =< aux(15)
it(54) =< aux(15)
it(55) =< aux(15)
it(53) =< aux(16)
it(54) =< aux(16)
it(55) =< aux(16)

#### Cost of phase [47,48,49,50,51,52]:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
1*it(47)+1*it(48)+1*it(49)+1*it(50)+1*it(51)+1*it(52)+0
  Such that:it(47) =< V2/3
it(47) =< V2/3-V2'/3
it(48) =< V/3
it(48) =< V/3-V'/3
aux(1) =< V2
aux(2) =< V2-V2'
aux(3) =< V2/2
aux(4) =< V2/2-V2'/2
aux(5) =< V
aux(6) =< V-V'
aux(7) =< V/2
aux(8) =< V/2-V'/2
it(47) =< aux(1)
it(48) =< aux(1)
it(49) =< aux(1)
it(50) =< aux(1)
it(51) =< aux(1)
it(52) =< aux(1)
it(47) =< aux(2)
it(48) =< aux(2)
it(49) =< aux(2)
it(50) =< aux(2)
it(51) =< aux(2)
it(52) =< aux(2)
it(48) =< aux(3)
it(49) =< aux(3)
it(50) =< aux(3)
it(48) =< aux(4)
it(49) =< aux(4)
it(50) =< aux(4)
it(47) =< aux(5)
it(48) =< aux(5)
it(49) =< aux(5)
it(50) =< aux(5)
it(51) =< aux(5)
it(52) =< aux(5)
it(47) =< aux(6)
it(48) =< aux(6)
it(49) =< aux(6)
it(50) =< aux(6)
it(51) =< aux(6)
it(52) =< aux(6)
it(47) =< aux(7)
it(48) =< aux(7)
it(49) =< aux(7)
it(51) =< aux(7)
it(47) =< aux(8)
it(48) =< aux(8)
it(49) =< aux(8)
it(51) =< aux(8)

#### Cost of phase [53,54,55,56]:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
2*it(53)+1*it(54)+1*it(55)+0
  Such that:it(54) =< V2/2
it(54) =< V2/2-V2'/2
it(55) =< V/2
it(55) =< V/2-V'/2
aux(13) =< V2
aux(14) =< V2-V2'
aux(15) =< V
aux(16) =< V-V'
it(53) =< aux(13)
it(54) =< aux(13)
it(55) =< aux(13)
it(53) =< aux(14)
it(54) =< aux(14)
it(55) =< aux(14)
it(53) =< aux(15)
it(54) =< aux(15)
it(55) =< aux(15)
it(53) =< aux(16)
it(54) =< aux(16)
it(55) =< aux(16)

#### Cost of phase [47,48,49,50,51,52]:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
1*it(47)+1*it(48)+1*it(49)+1*it(50)+1*it(51)+1*it(52)+0
  Such that:it(47) =< V2/3
it(47) =< V2/3-V2'/3
it(48) =< V/3
it(48) =< V/3-V'/3
aux(1) =< V2
aux(2) =< V2-V2'
aux(3) =< V2/2
aux(4) =< V2/2-V2'/2
aux(5) =< V
aux(6) =< V-V'
aux(7) =< V/2
aux(8) =< V/2-V'/2
it(47) =< aux(1)
it(48) =< aux(1)
it(49) =< aux(1)
it(50) =< aux(1)
it(51) =< aux(1)
it(52) =< aux(1)
it(47) =< aux(2)
it(48) =< aux(2)
it(49) =< aux(2)
it(50) =< aux(2)
it(51) =< aux(2)
it(52) =< aux(2)
it(48) =< aux(3)
it(49) =< aux(3)
it(50) =< aux(3)
it(48) =< aux(4)
it(49) =< aux(4)
it(50) =< aux(4)
it(47) =< aux(5)
it(48) =< aux(5)
it(49) =< aux(5)
it(50) =< aux(5)
it(51) =< aux(5)
it(52) =< aux(5)
it(47) =< aux(6)
it(48) =< aux(6)
it(49) =< aux(6)
it(50) =< aux(6)
it(51) =< aux(6)
it(52) =< aux(6)
it(47) =< aux(7)
it(48) =< aux(7)
it(49) =< aux(7)
it(51) =< aux(7)
it(47) =< aux(8)
it(48) =< aux(8)
it(49) =< aux(8)
it(51) =< aux(8)

#### Cost of phase [53,54,55,56]:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
2*it(53)+1*it(54)+1*it(55)+0
  Such that:it(54) =< V2/2
it(54) =< V2/2-V2'/2
it(55) =< V/2
it(55) =< V/2-V'/2
aux(13) =< V2
aux(14) =< V2-V2'
aux(15) =< V
aux(16) =< V-V'
it(53) =< aux(13)
it(54) =< aux(13)
it(55) =< aux(13)
it(53) =< aux(14)
it(54) =< aux(14)
it(55) =< aux(14)
it(53) =< aux(15)
it(54) =< aux(15)
it(55) =< aux(15)
it(53) =< aux(16)
it(54) =< aux(16)
it(55) =< aux(16)

#### Cost of phase [47,48,49,50,51,52]:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
1*it(47)+1*it(48)+1*it(49)+1*it(50)+1*it(51)+1*it(52)+0
  Such that:it(47) =< V2/3
it(47) =< V2/3-V2'/3
it(48) =< V/3
it(48) =< V/3-V'/3
aux(1) =< V2
aux(2) =< V2-V2'
aux(3) =< V2/2
aux(4) =< V2/2-V2'/2
aux(5) =< V
aux(6) =< V-V'
aux(7) =< V/2
aux(8) =< V/2-V'/2
it(47) =< aux(1)
it(48) =< aux(1)
it(49) =< aux(1)
it(50) =< aux(1)
it(51) =< aux(1)
it(52) =< aux(1)
it(47) =< aux(2)
it(48) =< aux(2)
it(49) =< aux(2)
it(50) =< aux(2)
it(51) =< aux(2)
it(52) =< aux(2)
it(48) =< aux(3)
it(49) =< aux(3)
it(50) =< aux(3)
it(48) =< aux(4)
it(49) =< aux(4)
it(50) =< aux(4)
it(47) =< aux(5)
it(48) =< aux(5)
it(49) =< aux(5)
it(50) =< aux(5)
it(51) =< aux(5)
it(52) =< aux(5)
it(47) =< aux(6)
it(48) =< aux(6)
it(49) =< aux(6)
it(50) =< aux(6)
it(51) =< aux(6)
it(52) =< aux(6)
it(47) =< aux(7)
it(48) =< aux(7)
it(49) =< aux(7)
it(51) =< aux(7)
it(47) =< aux(8)
it(48) =< aux(8)
it(49) =< aux(8)
it(51) =< aux(8)

#### Cost of phase [53,54,55,56]:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
2*it(53)+1*it(54)+1*it(55)+0
  Such that:it(54) =< V2/2
it(54) =< V2/2-V2'/2
it(55) =< V/2
it(55) =< V/2-V'/2
aux(13) =< V2
aux(14) =< V2-V2'
aux(15) =< V
aux(16) =< V-V'
it(53) =< aux(13)
it(54) =< aux(13)
it(55) =< aux(13)
it(53) =< aux(14)
it(54) =< aux(14)
it(55) =< aux(14)
it(53) =< aux(15)
it(54) =< aux(15)
it(55) =< aux(15)
it(53) =< aux(16)
it(54) =< aux(16)
it(55) =< aux(16)

#### Cost of phase [47,48,49,50,51,52]:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
1*it(47)+1*it(48)+1*it(49)+1*it(50)+1*it(51)+1*it(52)+0
  Such that:it(47) =< V2/3
it(47) =< V2/3-V2'/3
it(48) =< V/3
it(48) =< V/3-V'/3
aux(1) =< V2
aux(2) =< V2-V2'
aux(3) =< V2/2
aux(4) =< V2/2-V2'/2
aux(5) =< V
aux(6) =< V-V'
aux(7) =< V/2
aux(8) =< V/2-V'/2
it(47) =< aux(1)
it(48) =< aux(1)
it(49) =< aux(1)
it(50) =< aux(1)
it(51) =< aux(1)
it(52) =< aux(1)
it(47) =< aux(2)
it(48) =< aux(2)
it(49) =< aux(2)
it(50) =< aux(2)
it(51) =< aux(2)
it(52) =< aux(2)
it(48) =< aux(3)
it(49) =< aux(3)
it(50) =< aux(3)
it(48) =< aux(4)
it(49) =< aux(4)
it(50) =< aux(4)
it(47) =< aux(5)
it(48) =< aux(5)
it(49) =< aux(5)
it(50) =< aux(5)
it(51) =< aux(5)
it(52) =< aux(5)
it(47) =< aux(6)
it(48) =< aux(6)
it(49) =< aux(6)
it(50) =< aux(6)
it(51) =< aux(6)
it(52) =< aux(6)
it(47) =< aux(7)
it(48) =< aux(7)
it(49) =< aux(7)
it(51) =< aux(7)
it(47) =< aux(8)
it(48) =< aux(8)
it(49) =< aux(8)
it(51) =< aux(8)

#### Cost of phase [53,54,55,56]:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
2*it(53)+1*it(54)+1*it(55)+0
  Such that:it(54) =< V2/2
it(54) =< V2/2-V2'/2
it(55) =< V/2
it(55) =< V/2-V'/2
aux(13) =< V2
aux(14) =< V2-V2'
aux(15) =< V
aux(16) =< V-V'
it(53) =< aux(13)
it(54) =< aux(13)
it(55) =< aux(13)
it(53) =< aux(14)
it(54) =< aux(14)
it(55) =< aux(14)
it(53) =< aux(15)
it(54) =< aux(15)
it(55) =< aux(15)
it(53) =< aux(16)
it(54) =< aux(16)
it(55) =< aux(16)

#### Cost of phase [47,48,49,50,51,52]:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
1*it(47)+1*it(48)+1*it(49)+1*it(50)+1*it(51)+1*it(52)+0
  Such that:it(47) =< V2/3
it(47) =< V2/3-V2'/3
it(48) =< V/3
it(48) =< V/3-V'/3
aux(1) =< V2
aux(2) =< V2-V2'
aux(3) =< V2/2
aux(4) =< V2/2-V2'/2
aux(5) =< V
aux(6) =< V-V'
aux(7) =< V/2
aux(8) =< V/2-V'/2
it(47) =< aux(1)
it(48) =< aux(1)
it(49) =< aux(1)
it(50) =< aux(1)
it(51) =< aux(1)
it(52) =< aux(1)
it(47) =< aux(2)
it(48) =< aux(2)
it(49) =< aux(2)
it(50) =< aux(2)
it(51) =< aux(2)
it(52) =< aux(2)
it(48) =< aux(3)
it(49) =< aux(3)
it(50) =< aux(3)
it(48) =< aux(4)
it(49) =< aux(4)
it(50) =< aux(4)
it(47) =< aux(5)
it(48) =< aux(5)
it(49) =< aux(5)
it(50) =< aux(5)
it(51) =< aux(5)
it(52) =< aux(5)
it(47) =< aux(6)
it(48) =< aux(6)
it(49) =< aux(6)
it(50) =< aux(6)
it(51) =< aux(6)
it(52) =< aux(6)
it(47) =< aux(7)
it(48) =< aux(7)
it(49) =< aux(7)
it(51) =< aux(7)
it(47) =< aux(8)
it(48) =< aux(8)
it(49) =< aux(8)
it(51) =< aux(8)

#### Cost of phase [53,54,55,56]:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
2*it(53)+1*it(54)+1*it(55)+0
  Such that:it(54) =< V2/2
it(54) =< V2/2-V2'/2
it(55) =< V/2
it(55) =< V/2-V'/2
aux(13) =< V2
aux(14) =< V2-V2'
aux(15) =< V
aux(16) =< V-V'
it(53) =< aux(13)
it(54) =< aux(13)
it(55) =< aux(13)
it(53) =< aux(14)
it(54) =< aux(14)
it(55) =< aux(14)
it(53) =< aux(15)
it(54) =< aux(15)
it(55) =< aux(15)
it(53) =< aux(16)
it(54) =< aux(16)
it(55) =< aux(16)

#### Cost of phase [47,48,49,50,51,52]:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
1*it(47)+1*it(48)+1*it(49)+1*it(50)+1*it(51)+1*it(52)+0
  Such that:it(47) =< V2/3
it(47) =< V2/3-V2'/3
it(48) =< V/3
it(48) =< V/3-V'/3
aux(1) =< V2
aux(2) =< V2-V2'
aux(3) =< V2/2
aux(4) =< V2/2-V2'/2
aux(5) =< V
aux(6) =< V-V'
aux(7) =< V/2
aux(8) =< V/2-V'/2
it(47) =< aux(1)
it(48) =< aux(1)
it(49) =< aux(1)
it(50) =< aux(1)
it(51) =< aux(1)
it(52) =< aux(1)
it(47) =< aux(2)
it(48) =< aux(2)
it(49) =< aux(2)
it(50) =< aux(2)
it(51) =< aux(2)
it(52) =< aux(2)
it(48) =< aux(3)
it(49) =< aux(3)
it(50) =< aux(3)
it(48) =< aux(4)
it(49) =< aux(4)
it(50) =< aux(4)
it(47) =< aux(5)
it(48) =< aux(5)
it(49) =< aux(5)
it(50) =< aux(5)
it(51) =< aux(5)
it(52) =< aux(5)
it(47) =< aux(6)
it(48) =< aux(6)
it(49) =< aux(6)
it(50) =< aux(6)
it(51) =< aux(6)
it(52) =< aux(6)
it(47) =< aux(7)
it(48) =< aux(7)
it(49) =< aux(7)
it(51) =< aux(7)
it(47) =< aux(8)
it(48) =< aux(8)
it(49) =< aux(8)
it(51) =< aux(8)

#### Cost of phase [53,54,55,56]:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
2*it(53)+1*it(54)+1*it(55)+0
  Such that:it(54) =< V2/2
it(54) =< V2/2-V2'/2
it(55) =< V/2
it(55) =< V/2-V'/2
aux(13) =< V2
aux(14) =< V2-V2'
aux(15) =< V
aux(16) =< V-V'
it(53) =< aux(13)
it(54) =< aux(13)
it(55) =< aux(13)
it(53) =< aux(14)
it(54) =< aux(14)
it(55) =< aux(14)
it(53) =< aux(15)
it(54) =< aux(15)
it(55) =< aux(15)
it(53) =< aux(16)
it(54) =< aux(16)
it(55) =< aux(16)

#### Cost of phase [53,54,55,56]:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
2*it(53)+1*it(54)+1*it(55)+0
  Such that:it(54) =< V2/2
it(54) =< V2/2-V2'/2
it(55) =< V/2
it(55) =< V/2-V'/2
aux(13) =< V2
aux(14) =< V2-V2'
aux(15) =< V
aux(16) =< V-V'
it(53) =< aux(13)
it(54) =< aux(13)
it(55) =< aux(13)
it(53) =< aux(14)
it(54) =< aux(14)
it(55) =< aux(14)
it(53) =< aux(15)
it(54) =< aux(15)
it(55) =< aux(15)
it(53) =< aux(16)
it(54) =< aux(16)
it(55) =< aux(16)

#### Cost of phase [53,54,55,56]:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
2*it(53)+1*it(54)+1*it(55)+0
  Such that:it(54) =< V2/2
it(54) =< V2/2-V2'/2
it(55) =< V/2
it(55) =< V/2-V'/2
aux(13) =< V2
aux(14) =< V2-V2'
aux(15) =< V
aux(16) =< V-V'
it(53) =< aux(13)
it(54) =< aux(13)
it(55) =< aux(13)
it(53) =< aux(14)
it(54) =< aux(14)
it(55) =< aux(14)
it(53) =< aux(15)
it(54) =< aux(15)
it(55) =< aux(15)
it(53) =< aux(16)
it(54) =< aux(16)
it(55) =< aux(16)

#### Cost of phase [53,54,55,56]:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
2*it(53)+1*it(54)+1*it(55)+0
  Such that:it(54) =< V2/2
it(54) =< V2/2-V2'/2
it(55) =< V/2
it(55) =< V/2-V'/2
aux(13) =< V2
aux(14) =< V2-V2'
aux(15) =< V
aux(16) =< V-V'
it(53) =< aux(13)
it(54) =< aux(13)
it(55) =< aux(13)
it(53) =< aux(14)
it(54) =< aux(14)
it(55) =< aux(14)
it(53) =< aux(15)
it(54) =< aux(15)
it(55) =< aux(15)
it(53) =< aux(16)
it(54) =< aux(16)
it(55) =< aux(16)

#### Cost of phase [53,54,55,56]:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
2*it(53)+1*it(54)+1*it(55)+0
  Such that:it(54) =< V2/2
it(54) =< V2/2-V2'/2
it(55) =< V/2
it(55) =< V/2-V'/2
aux(13) =< V2
aux(14) =< V2-V2'
aux(15) =< V
aux(16) =< V-V'
it(53) =< aux(13)
it(54) =< aux(13)
it(55) =< aux(13)
it(53) =< aux(14)
it(54) =< aux(14)
it(55) =< aux(14)
it(53) =< aux(15)
it(54) =< aux(15)
it(55) =< aux(15)
it(53) =< aux(16)
it(54) =< aux(16)
it(55) =< aux(16)

#### Cost of phase [53,54,55,56]:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
2*it(53)+1*it(54)+1*it(55)+0
  Such that:it(54) =< V2/2
it(54) =< V2/2-V2'/2
it(55) =< V/2
it(55) =< V/2-V'/2
aux(13) =< V2
aux(14) =< V2-V2'
aux(15) =< V
aux(16) =< V-V'
it(53) =< aux(13)
it(54) =< aux(13)
it(55) =< aux(13)
it(53) =< aux(14)
it(54) =< aux(14)
it(55) =< aux(14)
it(53) =< aux(15)
it(54) =< aux(15)
it(55) =< aux(15)
it(53) =< aux(16)
it(54) =< aux(16)
it(55) =< aux(16)

#### Cost of phase [53,54,55,56]:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
2*it(53)+1*it(54)+1*it(55)+0
  Such that:it(54) =< V2/2
it(54) =< V2/2-V2'/2
it(55) =< V/2
it(55) =< V/2-V'/2
aux(13) =< V2
aux(14) =< V2-V2'
aux(15) =< V
aux(16) =< V-V'
it(53) =< aux(13)
it(54) =< aux(13)
it(55) =< aux(13)
it(53) =< aux(14)
it(54) =< aux(14)
it(55) =< aux(14)
it(53) =< aux(15)
it(54) =< aux(15)
it(55) =< aux(15)
it(53) =< aux(16)
it(54) =< aux(16)
it(55) =< aux(16)

#### Cost of phase [53,54,55,56]:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
2*it(53)+1*it(54)+1*it(55)+0
  Such that:it(54) =< V2/2
it(54) =< V2/2-V2'/2
it(55) =< V/2
it(55) =< V/2-V'/2
aux(13) =< V2
aux(14) =< V2-V2'
aux(15) =< V
aux(16) =< V-V'
it(53) =< aux(13)
it(54) =< aux(13)
it(55) =< aux(13)
it(53) =< aux(14)
it(54) =< aux(14)
it(55) =< aux(14)
it(53) =< aux(15)
it(54) =< aux(15)
it(55) =< aux(15)
it(53) =< aux(16)
it(54) =< aux(16)
it(55) =< aux(16)

#### Cost of phase [53,54,55,56]:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
2*it(53)+1*it(54)+1*it(55)+0
  Such that:it(54) =< V2/2
it(54) =< V2/2-V2'/2
it(55) =< V/2
it(55) =< V/2-V'/2
aux(13) =< V2
aux(14) =< V2-V2'
aux(15) =< V
aux(16) =< V-V'
it(53) =< aux(13)
it(54) =< aux(13)
it(55) =< aux(13)
it(53) =< aux(14)
it(54) =< aux(14)
it(55) =< aux(14)
it(53) =< aux(15)
it(54) =< aux(15)
it(55) =< aux(15)
it(53) =< aux(16)
it(54) =< aux(16)
it(55) =< aux(16)

#### Cost of phase [53,54,55,56]:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
2*it(53)+1*it(54)+1*it(55)+0
  Such that:it(54) =< V2/2
it(54) =< V2/2-V2'/2
it(55) =< V/2
it(55) =< V/2-V'/2
aux(13) =< V2
aux(14) =< V2-V2'
aux(15) =< V
aux(16) =< V-V'
it(53) =< aux(13)
it(54) =< aux(13)
it(55) =< aux(13)
it(53) =< aux(14)
it(54) =< aux(14)
it(55) =< aux(14)
it(53) =< aux(15)
it(54) =< aux(15)
it(55) =< aux(15)
it(53) =< aux(16)
it(54) =< aux(16)
it(55) =< aux(16)

#### Cost of phase [53,54,55,56]:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
2*it(53)+1*it(54)+1*it(55)+0
  Such that:it(54) =< V2/2
it(54) =< V2/2-V2'/2
it(55) =< V/2
it(55) =< V/2-V'/2
aux(13) =< V2
aux(14) =< V2-V2'
aux(15) =< V
aux(16) =< V-V'
it(53) =< aux(13)
it(54) =< aux(13)
it(55) =< aux(13)
it(53) =< aux(14)
it(54) =< aux(14)
it(55) =< aux(14)
it(53) =< aux(15)
it(54) =< aux(15)
it(55) =< aux(15)
it(53) =< aux(16)
it(54) =< aux(16)
it(55) =< aux(16)

#### Cost of phase [53,54,55,56]:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
2*it(53)+1*it(54)+1*it(55)+0
  Such that:it(54) =< V2/2
it(54) =< V2/2-V2'/2
it(55) =< V/2
it(55) =< V/2-V'/2
aux(13) =< V2
aux(14) =< V2-V2'
aux(15) =< V
aux(16) =< V-V'
it(53) =< aux(13)
it(54) =< aux(13)
it(55) =< aux(13)
it(53) =< aux(14)
it(54) =< aux(14)
it(55) =< aux(14)
it(53) =< aux(15)
it(54) =< aux(15)
it(55) =< aux(15)
it(53) =< aux(16)
it(54) =< aux(16)
it(55) =< aux(16)

#### Cost of phase [53,54,55,56]:prefix(V2,V,Out) -> [prefix(V2',V',Out')] 
2*it(53)+1*it(54)+1*it(55)+0
  Such that:it(54) =< V2/2
it(54) =< V2/2-V2'/2
it(55) =< V/2
it(55) =< V/2-V'/2
aux(13) =< V2
aux(14) =< V2-V2'
aux(15) =< V
aux(16) =< V-V'
it(53) =< aux(13)
it(54) =< aux(13)
it(55) =< aux(13)
it(53) =< aux(14)
it(54) =< aux(14)
it(55) =< aux(14)
it(53) =< aux(15)
it(54) =< aux(15)
it(55) =< aux(15)
it(53) =< aux(16)
it(54) =< aux(16)
it(55) =< aux(16)

#### Cost of chains of prefix(V2,V,Out):
* Chain [[53,54,55,56],[47,48,49,50,51,52],58]: 2*it(47)+2*it(48)+1*it(50)+4*it(52)+1*it(54)+1
  Such that:aux(12) =< V/2
aux(17) =< V2
aux(18) =< V2/2
aux(19) =< V
aux(10) =< aux(17)
it(47) =< aux(17)
aux(10) =< aux(18)
it(54) =< aux(18)
aux(12) =< aux(19)
it(48) =< aux(19)
it(52) =< aux(19)
it(48) =< aux(17)
it(50) =< aux(17)
it(52) =< aux(17)
it(48) =< aux(10)
it(50) =< aux(10)
it(47) =< aux(19)
it(50) =< aux(19)
it(47) =< aux(12)
it(48) =< aux(12)
it(54) =< aux(17)
it(54) =< aux(19)

  with precondition: [Out=0,V2>=3,V>=3] 

* Chain [[53,54,55,56],[47,48,49,50,51,52],46,[41,42],59]: 6*it(41)+2*it(47)+2*it(48)+1*it(50)+1*it(55)+2
  Such that:aux(3) =< V2/2
aux(27) =< V2
aux(28) =< V
aux(29) =< V/2
aux(3) =< aux(27)
it(41) =< aux(27)
aux(7) =< aux(28)
aux(7) =< aux(29)
it(55) =< aux(29)
it(47) =< aux(27)
it(48) =< aux(28)
it(41) =< aux(28)
it(48) =< aux(27)
it(50) =< aux(27)
it(48) =< aux(3)
it(50) =< aux(3)
it(47) =< aux(28)
it(50) =< aux(28)
it(47) =< aux(7)
it(48) =< aux(7)
it(55) =< aux(27)
it(55) =< aux(28)

  with precondition: [Out=0,V2>=5,V>=5] 

* Chain [[53,54,55,56],[47,48,49,50,51,52],46,59]: 2*it(47)+2*it(48)+1*it(50)+5*it(52)+2
  Such that:aux(31) =< V2/2
aux(33) =< V/2
aux(34) =< V2
aux(35) =< V
aux(31) =< aux(34)
it(47) =< aux(34)
it(52) =< aux(34)
aux(33) =< aux(35)
it(48) =< aux(35)
it(52) =< aux(35)
it(48) =< aux(34)
it(50) =< aux(34)
it(48) =< aux(31)
it(50) =< aux(31)
it(47) =< aux(35)
it(50) =< aux(35)
it(47) =< aux(33)
it(48) =< aux(33)

  with precondition: [Out=0,V2>=4,V>=4] 

* Chain [[53,54,55,56],[47,48,49,50,51,52],45,[41,42],59]: 2*it(41)+2*it(47)+2*it(48)+1*it(50)+5*it(52)+2
  Such that:aux(38) =< V2/2
aux(7) =< V/2
aux(40) =< V2
aux(41) =< V
it(47) =< aux(40)
it(52) =< aux(40)
aux(7) =< aux(41)
it(52) =< aux(41)
it(48) =< aux(41)
it(41) =< aux(41)
it(48) =< aux(40)
it(50) =< aux(40)
it(48) =< aux(38)
it(50) =< aux(38)
it(47) =< aux(41)
it(50) =< aux(41)
it(47) =< aux(7)
it(48) =< aux(7)

  with precondition: [Out=0,V2>=6,V>=4] 

* Chain [[53,54,55,56],[47,48,49,50,51,52],45,59]: 2*it(47)+2*it(48)+1*it(50)+5*it(52)+2
  Such that:aux(43) =< V2/2
aux(45) =< V/2
aux(46) =< V2
aux(47) =< V
aux(43) =< aux(46)
it(47) =< aux(46)
it(52) =< aux(46)
aux(45) =< aux(47)
it(48) =< aux(47)
it(52) =< aux(47)
it(48) =< aux(46)
it(50) =< aux(46)
it(48) =< aux(43)
it(50) =< aux(43)
it(47) =< aux(47)
it(50) =< aux(47)
it(47) =< aux(45)
it(48) =< aux(45)

  with precondition: [Out=0,V2>=5,V>=3] 

* Chain [[53,54,55,56],[47,48,49,50,51,52],44,[41,42],59]: 6*it(41)+2*it(47)+2*it(48)+1*it(50)+1*it(55)+2
  Such that:aux(3) =< V2/2
aux(50) =< V2
aux(51) =< V
aux(52) =< V/2
aux(3) =< aux(50)
it(41) =< aux(50)
aux(7) =< aux(51)
aux(7) =< aux(52)
it(55) =< aux(52)
it(47) =< aux(50)
it(48) =< aux(51)
it(41) =< aux(51)
it(48) =< aux(50)
it(50) =< aux(50)
it(48) =< aux(3)
it(50) =< aux(3)
it(47) =< aux(51)
it(50) =< aux(51)
it(47) =< aux(7)
it(48) =< aux(7)
it(55) =< aux(50)
it(55) =< aux(51)

  with precondition: [Out=0,V2>=6,V>=6] 

* Chain [[53,54,55,56],[47,48,49,50,51,52],44,59]: 2*it(47)+2*it(48)+1*it(50)+5*it(52)+2
  Such that:aux(54) =< V2/2
aux(56) =< V/2
aux(57) =< V2
aux(58) =< V
aux(54) =< aux(57)
it(47) =< aux(57)
it(52) =< aux(57)
aux(56) =< aux(58)
it(48) =< aux(58)
it(52) =< aux(58)
it(48) =< aux(57)
it(50) =< aux(57)
it(48) =< aux(54)
it(50) =< aux(54)
it(47) =< aux(58)
it(50) =< aux(58)
it(47) =< aux(56)
it(48) =< aux(56)

  with precondition: [Out=0,V2>=5,V>=5] 

* Chain [[53,54,55,56],[47,48,49,50,51,52],43,[41,42],59]: 6*it(41)+2*it(47)+2*it(48)+1*it(50)+1*it(55)+2
  Such that:aux(3) =< V2/2
aux(61) =< V2
aux(62) =< V
aux(63) =< V/2
aux(3) =< aux(61)
it(41) =< aux(61)
aux(7) =< aux(62)
aux(7) =< aux(63)
it(55) =< aux(63)
it(47) =< aux(61)
it(48) =< aux(62)
it(41) =< aux(62)
it(48) =< aux(61)
it(50) =< aux(61)
it(48) =< aux(3)
it(50) =< aux(3)
it(47) =< aux(62)
it(50) =< aux(62)
it(47) =< aux(7)
it(48) =< aux(7)
it(55) =< aux(61)
it(55) =< aux(62)

  with precondition: [Out=0,V2>=7,V>=5] 

* Chain [[53,54,55,56],[47,48,49,50,51,52],43,59]: 2*it(47)+2*it(48)+1*it(50)+5*it(52)+2
  Such that:aux(65) =< V2/2
aux(67) =< V/2
aux(68) =< V2
aux(69) =< V
aux(65) =< aux(68)
it(47) =< aux(68)
it(52) =< aux(68)
aux(67) =< aux(69)
it(48) =< aux(69)
it(52) =< aux(69)
it(48) =< aux(68)
it(50) =< aux(68)
it(48) =< aux(65)
it(50) =< aux(65)
it(47) =< aux(69)
it(50) =< aux(69)
it(47) =< aux(67)
it(48) =< aux(67)

  with precondition: [Out=0,V2>=6,V>=4] 

* Chain [[53,54,55,56],[41,42],59]: 6*it(41)+1
  Such that:aux(70) =< V2
aux(71) =< V
it(41) =< aux(70)
it(41) =< aux(71)

  with precondition: [Out=0,V2>=3,V>=2] 

* Chain [[53,54,55,56],59]: 2*it(53)+1*it(54)+1*it(55)+1
  Such that:it(54) =< V2/2
it(55) =< V/2
aux(72) =< V2
aux(73) =< V
it(53) =< aux(72)
it(54) =< aux(72)
it(55) =< aux(72)
it(53) =< aux(73)
it(54) =< aux(73)
it(55) =< aux(73)

  with precondition: [Out=0,V2>=2,V>=1] 

* Chain [[53,54,55,56],58]: 2*it(53)+1*it(54)+1*it(55)+1
  Such that:it(54) =< V2/2
it(55) =< V/2
aux(74) =< V2
aux(75) =< V
it(53) =< aux(74)
it(54) =< aux(74)
it(55) =< aux(74)
it(53) =< aux(75)
it(54) =< aux(75)
it(55) =< aux(75)

  with precondition: [Out=0,V2>=2,V>=2] 

* Chain [[53,54,55,56],57]: 2*it(53)+1*it(54)+1*it(55)+0
  Such that:it(54) =< V2/2
it(55) =< V/2
aux(76) =< V2
aux(77) =< V
it(53) =< aux(76)
it(54) =< aux(76)
it(55) =< aux(76)
it(53) =< aux(77)
it(54) =< aux(77)
it(55) =< aux(77)

  with precondition: [Out=0,V2>=1,V>=1] 

* Chain [[53,54,55,56],46,[41,42],59]: 6*it(41)+2
  Such that:aux(78) =< V2
aux(79) =< V
it(41) =< aux(78)
it(41) =< aux(79)

  with precondition: [Out=0,V2>=4,V>=4] 

* Chain [[53,54,55,56],46,59]: 2*it(53)+1*it(54)+1*it(55)+2
  Such that:it(54) =< V2/2
it(55) =< V/2
aux(80) =< V2
aux(81) =< V
it(53) =< aux(80)
it(54) =< aux(80)
it(55) =< aux(80)
it(53) =< aux(81)
it(54) =< aux(81)
it(55) =< aux(81)

  with precondition: [Out=0,V2>=3,V>=3] 

* Chain [[53,54,55,56],45,[41,42],59]: 2*it(41)+3*it(53)+1*it(54)+2
  Such that:it(54) =< V2/2
aux(82) =< V2
aux(83) =< V
it(53) =< aux(83)
it(41) =< aux(83)
it(53) =< aux(82)
it(54) =< aux(82)
it(54) =< aux(83)

  with precondition: [Out=0,V2>=5,V>=3] 

* Chain [[53,54,55,56],45,59]: 2*it(53)+1*it(54)+1*it(55)+2
  Such that:it(54) =< V2/2
it(55) =< V/2
aux(84) =< V2
aux(85) =< V
it(53) =< aux(84)
it(54) =< aux(84)
it(55) =< aux(84)
it(53) =< aux(85)
it(54) =< aux(85)
it(55) =< aux(85)

  with precondition: [Out=0,V2>=4,V>=2] 

* Chain [[53,54,55,56],44,[41,42],59]: 6*it(41)+2
  Such that:aux(86) =< V2
aux(87) =< V
it(41) =< aux(86)
it(41) =< aux(87)

  with precondition: [Out=0,V2>=5,V>=5] 

* Chain [[53,54,55,56],44,59]: 2*it(53)+1*it(54)+1*it(55)+2
  Such that:it(54) =< V2/2
it(55) =< V/2
aux(88) =< V2
aux(89) =< V
it(53) =< aux(88)
it(54) =< aux(88)
it(55) =< aux(88)
it(53) =< aux(89)
it(54) =< aux(89)
it(55) =< aux(89)

  with precondition: [Out=0,V2>=4,V>=4] 

* Chain [[53,54,55,56],43,[41,42],59]: 6*it(41)+2
  Such that:aux(90) =< V2
aux(91) =< V
it(41) =< aux(90)
it(41) =< aux(91)

  with precondition: [Out=0,V2>=6,V>=4] 

* Chain [[53,54,55,56],43,59]: 2*it(53)+1*it(54)+1*it(55)+2
  Such that:it(54) =< V2/2
it(55) =< V/2
aux(92) =< V2
aux(93) =< V
it(53) =< aux(92)
it(54) =< aux(92)
it(55) =< aux(92)
it(53) =< aux(93)
it(54) =< aux(93)
it(55) =< aux(93)

  with precondition: [Out=0,V2>=5,V>=3] 

* Chain [[47,48,49,50,51,52],58]: 1*it(47)+1*it(48)+1*it(49)+1*it(50)+1*it(51)+1*it(52)+1
  Such that:it(47) =< V2/3
it(48) =< V/3
aux(9) =< V2
aux(10) =< V2/2
aux(11) =< V
aux(12) =< V/2
it(47) =< aux(9)
it(48) =< aux(9)
it(49) =< aux(9)
it(50) =< aux(9)
it(51) =< aux(9)
it(52) =< aux(9)
it(48) =< aux(10)
it(49) =< aux(10)
it(50) =< aux(10)
it(47) =< aux(11)
it(48) =< aux(11)
it(49) =< aux(11)
it(50) =< aux(11)
it(51) =< aux(11)
it(52) =< aux(11)
it(47) =< aux(12)
it(48) =< aux(12)
it(49) =< aux(12)
it(51) =< aux(12)

  with precondition: [Out=1,V2>=2,V>=2] 

* Chain [[47,48,49,50,51,52],46,[41,42],59]: 3*it(41)+2*it(47)+2*it(48)+1*it(50)+2
  Such that:aux(3) =< V2/2
aux(7) =< V/2
aux(25) =< V2
aux(26) =< V
it(47) =< aux(25)
it(48) =< aux(26)
it(41) =< aux(25)
it(41) =< aux(26)
it(48) =< aux(25)
it(50) =< aux(25)
it(48) =< aux(3)
it(50) =< aux(3)
it(47) =< aux(26)
it(50) =< aux(26)
it(47) =< aux(7)
it(48) =< aux(7)

  with precondition: [Out=1,V2>=4,V>=4] 

* Chain [[47,48,49,50,51,52],46,59]: 1*it(47)+1*it(48)+1*it(49)+1*it(50)+1*it(51)+1*it(52)+2
  Such that:it(47) =< V2/3
it(48) =< V/3
aux(30) =< V2
aux(31) =< V2/2
aux(32) =< V
aux(33) =< V/2
it(47) =< aux(30)
it(48) =< aux(30)
it(49) =< aux(30)
it(50) =< aux(30)
it(51) =< aux(30)
it(52) =< aux(30)
it(48) =< aux(31)
it(49) =< aux(31)
it(50) =< aux(31)
it(47) =< aux(32)
it(48) =< aux(32)
it(49) =< aux(32)
it(50) =< aux(32)
it(51) =< aux(32)
it(52) =< aux(32)
it(47) =< aux(33)
it(48) =< aux(33)
it(49) =< aux(33)
it(51) =< aux(33)

  with precondition: [Out=1,V2>=3,V>=3] 

* Chain [[47,48,49,50,51,52],45,[41,42],59]: 2*it(41)+1*it(47)+2*it(48)+1*it(50)+1*it(51)+1*it(52)+2
  Such that:it(47) =< V2/3
aux(7) =< V/2
aux(37) =< V2
aux(38) =< V2/2
aux(39) =< V
it(48) =< aux(39)
it(41) =< aux(39)
it(47) =< aux(37)
it(48) =< aux(37)
it(50) =< aux(37)
it(51) =< aux(37)
it(52) =< aux(37)
it(48) =< aux(38)
it(50) =< aux(38)
it(47) =< aux(39)
it(50) =< aux(39)
it(51) =< aux(39)
it(52) =< aux(39)
it(47) =< aux(7)
it(48) =< aux(7)
it(51) =< aux(7)

  with precondition: [Out=1,V2>=5,V>=3] 

* Chain [[47,48,49,50,51,52],45,59]: 1*it(47)+1*it(48)+1*it(49)+1*it(50)+1*it(51)+1*it(52)+2
  Such that:it(47) =< V2/3
it(48) =< V/3
aux(42) =< V2
aux(43) =< V2/2
aux(44) =< V
aux(45) =< V/2
it(47) =< aux(42)
it(48) =< aux(42)
it(49) =< aux(42)
it(50) =< aux(42)
it(51) =< aux(42)
it(52) =< aux(42)
it(48) =< aux(43)
it(49) =< aux(43)
it(50) =< aux(43)
it(47) =< aux(44)
it(48) =< aux(44)
it(49) =< aux(44)
it(50) =< aux(44)
it(51) =< aux(44)
it(52) =< aux(44)
it(47) =< aux(45)
it(48) =< aux(45)
it(49) =< aux(45)
it(51) =< aux(45)

  with precondition: [Out=1,V2>=4,V>=2] 

* Chain [[47,48,49,50,51,52],44,[41,42],59]: 3*it(41)+2*it(47)+2*it(48)+1*it(50)+2
  Such that:aux(3) =< V2/2
aux(7) =< V/2
aux(48) =< V2
aux(49) =< V
it(47) =< aux(48)
it(48) =< aux(49)
it(41) =< aux(48)
it(41) =< aux(49)
it(48) =< aux(48)
it(50) =< aux(48)
it(48) =< aux(3)
it(50) =< aux(3)
it(47) =< aux(49)
it(50) =< aux(49)
it(47) =< aux(7)
it(48) =< aux(7)

  with precondition: [Out=1,V2>=5,V>=5] 

* Chain [[47,48,49,50,51,52],44,59]: 1*it(47)+1*it(48)+1*it(49)+1*it(50)+1*it(51)+1*it(52)+2
  Such that:it(47) =< V2/3
it(48) =< V/3
aux(53) =< V2
aux(54) =< V2/2
aux(55) =< V
aux(56) =< V/2
it(47) =< aux(53)
it(48) =< aux(53)
it(49) =< aux(53)
it(50) =< aux(53)
it(51) =< aux(53)
it(52) =< aux(53)
it(48) =< aux(54)
it(49) =< aux(54)
it(50) =< aux(54)
it(47) =< aux(55)
it(48) =< aux(55)
it(49) =< aux(55)
it(50) =< aux(55)
it(51) =< aux(55)
it(52) =< aux(55)
it(47) =< aux(56)
it(48) =< aux(56)
it(49) =< aux(56)
it(51) =< aux(56)

  with precondition: [Out=1,V2>=4,V>=4] 

* Chain [[47,48,49,50,51,52],43,[41,42],59]: 3*it(41)+2*it(47)+2*it(48)+1*it(50)+2
  Such that:aux(3) =< V2/2
aux(7) =< V/2
aux(59) =< V2
aux(60) =< V
it(47) =< aux(59)
it(48) =< aux(60)
it(41) =< aux(59)
it(41) =< aux(60)
it(48) =< aux(59)
it(50) =< aux(59)
it(48) =< aux(3)
it(50) =< aux(3)
it(47) =< aux(60)
it(50) =< aux(60)
it(47) =< aux(7)
it(48) =< aux(7)

  with precondition: [Out=1,V2>=6,V>=4] 

* Chain [[47,48,49,50,51,52],43,59]: 1*it(47)+1*it(48)+1*it(49)+1*it(50)+1*it(51)+1*it(52)+2
  Such that:it(47) =< V2/3
it(48) =< V/3
aux(64) =< V2
aux(65) =< V2/2
aux(66) =< V
aux(67) =< V/2
it(47) =< aux(64)
it(48) =< aux(64)
it(49) =< aux(64)
it(50) =< aux(64)
it(51) =< aux(64)
it(52) =< aux(64)
it(48) =< aux(65)
it(49) =< aux(65)
it(50) =< aux(65)
it(47) =< aux(66)
it(48) =< aux(66)
it(49) =< aux(66)
it(50) =< aux(66)
it(51) =< aux(66)
it(52) =< aux(66)
it(47) =< aux(67)
it(48) =< aux(67)
it(49) =< aux(67)
it(51) =< aux(67)

  with precondition: [Out=1,V2>=5,V>=3] 

* Chain [[41,42],59]: 2*it(41)+1
  Such that:aux(22) =< V
aux(24) =< V2
it(41) =< aux(24)
it(41) =< aux(22)

  with precondition: [Out=2,V2>=2,V+1>=V2] 

* Chain [59]: 1
  with precondition: [V2=1,Out=2,V>=0] 

* Chain [58]: 1
  with precondition: [V=1,Out=1,V2>=1] 

* Chain [57]: 0
  with precondition: [Out=0,V2>=0,V>=0] 

* Chain [46,[41,42],59]: 2*it(41)+2
  Such that:aux(24) =< V2
aux(22) =< V
it(41) =< aux(24)
it(41) =< aux(22)

  with precondition: [Out=1,V2>=3,V>=V2] 

* Chain [46,59]: 2
  with precondition: [V2=2,Out=1,V>=2] 

* Chain [45,[41,42],59]: 2*it(41)+2
  Such that:aux(36) =< V
it(41) =< aux(36)

  with precondition: [Out=1,V2>=4,V>=2] 

* Chain [45,59]: 2
  with precondition: [Out=1,V2>=3,V>=1] 

* Chain [44,[41,42],59]: 2*it(41)+2
  Such that:aux(24) =< V2
aux(22) =< V
it(41) =< aux(24)
it(41) =< aux(22)

  with precondition: [Out=1,V2>=4,V>=V2] 

* Chain [44,59]: 2
  with precondition: [Out=1,V2>=3,V>=V2] 

* Chain [43,[41,42],59]: 2*it(41)+2
  Such that:aux(24) =< V2
aux(22) =< V
it(41) =< aux(24)
it(41) =< aux(22)

  with precondition: [Out=1,V2>=5,V>=3] 

* Chain [43,59]: 2
  with precondition: [Out=1,V2>=4,V>=2] 


#### Cost of loops [64] 

 * loop 64:domatch(V2,V,V7,Out) -> [domatch(V2',V',V7',Out')] 
2
#### Cost of phase [64]:domatch(V2,V,V7,Out) -> [domatch(V2',V',V7',Out')] 
2*it(64)+0
  Such that:it(64) =< V
it(64) =< V-V'

#### Cost of phase [64]:domatch(V2,V,V7,Out) -> [domatch(V2',V',V7',Out')] 
2*it(64)+0
  Such that:it(64) =< V
it(64) =< V-V'

#### Cost of phase [64]:domatch(V2,V,V7,Out) -> [domatch(V2',V',V7',Out')] 
2*it(64)+0
  Such that:it(64) =< V
it(64) =< V-V'

#### Cost of phase [64]:domatch(V2,V,V7,Out) -> [domatch(V2',V',V7',Out')] 
2*it(64)+0
  Such that:it(64) =< V
it(64) =< V-V'

#### Cost of phase [64]:domatch(V2,V,V7,Out) -> [domatch(V2',V',V7',Out')] 
2*it(64)+0
  Such that:it(64) =< V
it(64) =< V-V'

#### Cost of loops [60,61,62] 

 * loop 60:domatch(V2,V,V7,Out) -> [domatch(V2',V',V7',Out')] 
2*s(264)+2
  Such that:s(262) =< V
s(263) =< V2'
s(264) =< s(263)
s(264) =< s(262)

 * loop 61:domatch(V2,V,V7,Out) -> [domatch(V2',V',V7',Out')] 
3
 * loop 62:domatch(V2,V,V7,Out) -> [domatch(V2',V',V7',Out')] 
6*s(284)+5*s(285)+21*s(286)+12*s(287)+13*s(288)+9*s(289)+4*s(290)+3
  Such that:s(278) =< V2
s(279) =< V2/2
s(280) =< V2/3
s(281) =< V
s(282) =< V/2
s(283) =< V/3
s(284) =< s(280)
s(285) =< s(283)
s(286) =< s(278)
s(286) =< s(281)
s(287) =< s(278)
s(288) =< s(281)
s(288) =< s(278)
s(289) =< s(278)
s(288) =< s(279)
s(289) =< s(279)
s(287) =< s(281)
s(289) =< s(281)
s(287) =< s(282)
s(288) =< s(282)
s(284) =< s(278)
s(285) =< s(278)
s(285) =< s(279)
s(284) =< s(281)
s(285) =< s(281)
s(284) =< s(282)
s(285) =< s(282)
s(290) =< s(281)

#### Cost of phase [60,61,62]:domatch(V2,V,V7,Out) -> [domatch(V2',V',V7',Out')] 
2*it(60)+6*it(61)+2*s(291)+6*s(294)+5*s(295)+21*s(296)+12*s(297)+13*s(298)+9*s(299)+4*s(300)+0
  Such that:it(60) =< -V2+V+2
aux(111) =< V2
aux(118) =< -V2+V+V2'-V'
aux(119) =< V
aux(120) =< V-V'
it(60) =< aux(118)
it(61) =< aux(118)
it(60) =< aux(119)
it(61) =< aux(119)
it(60) =< aux(120)
it(61) =< aux(120)
aux(115) =< aux(119)
aux(112) =< aux(111)
s(293) =< it(60)*aux(111)
s(292) =< it(60)*aux(119)
aux(116) =< it(61)*aux(115)
aux(113) =< it(61)*aux(112)
s(305) =< aux(116)* (1/3)
s(302) =< aux(116)* (1/2)
s(306) =< aux(113)* (1/3)
s(303) =< aux(113)* (1/2)
s(294) =< s(306)
s(295) =< s(305)
s(296) =< aux(113)
s(296) =< aux(116)
s(297) =< aux(113)
s(298) =< aux(116)
s(298) =< aux(113)
s(299) =< aux(113)
s(298) =< s(303)
s(299) =< s(303)
s(297) =< aux(116)
s(299) =< aux(116)
s(297) =< s(302)
s(298) =< s(302)
s(294) =< aux(113)
s(295) =< aux(113)
s(295) =< s(303)
s(294) =< aux(116)
s(295) =< aux(116)
s(294) =< s(302)
s(295) =< s(302)
s(300) =< aux(116)
s(291) =< s(293)
s(291) =< s(292)

#### Cost of phase [60,61,62]:domatch(V2,V,V7,Out) -> [domatch(V2',V',V7',Out')] 
2*it(60)+6*it(61)+2*s(291)+6*s(294)+5*s(295)+21*s(296)+12*s(297)+13*s(298)+9*s(299)+4*s(300)+0
  Such that:it(60) =< -V2+V+2
aux(111) =< V2
aux(118) =< -V2+V+V2'-V'
aux(119) =< V
aux(120) =< V-V'
it(60) =< aux(118)
it(61) =< aux(118)
it(60) =< aux(119)
it(61) =< aux(119)
it(60) =< aux(120)
it(61) =< aux(120)
aux(115) =< aux(119)
aux(112) =< aux(111)
s(293) =< it(60)*aux(111)
s(292) =< it(60)*aux(119)
aux(116) =< it(61)*aux(115)
aux(113) =< it(61)*aux(112)
s(305) =< aux(116)* (1/3)
s(302) =< aux(116)* (1/2)
s(306) =< aux(113)* (1/3)
s(303) =< aux(113)* (1/2)
s(294) =< s(306)
s(295) =< s(305)
s(296) =< aux(113)
s(296) =< aux(116)
s(297) =< aux(113)
s(298) =< aux(116)
s(298) =< aux(113)
s(299) =< aux(113)
s(298) =< s(303)
s(299) =< s(303)
s(297) =< aux(116)
s(299) =< aux(116)
s(297) =< s(302)
s(298) =< s(302)
s(294) =< aux(113)
s(295) =< aux(113)
s(295) =< s(303)
s(294) =< aux(116)
s(295) =< aux(116)
s(294) =< s(302)
s(295) =< s(302)
s(300) =< aux(116)
s(291) =< s(293)
s(291) =< s(292)

#### Cost of phase [60,61,62]:domatch(V2,V,V7,Out) -> [domatch(V2',V',V7',Out')] 
2*it(60)+6*it(61)+2*s(291)+6*s(294)+5*s(295)+21*s(296)+12*s(297)+13*s(298)+9*s(299)+4*s(300)+0
  Such that:it(60) =< -V2+V+2
aux(111) =< V2
aux(118) =< -V2+V+V2'-V'
aux(119) =< V
aux(120) =< V-V'
it(60) =< aux(118)
it(61) =< aux(118)
it(60) =< aux(119)
it(61) =< aux(119)
it(60) =< aux(120)
it(61) =< aux(120)
aux(115) =< aux(119)
aux(112) =< aux(111)
s(293) =< it(60)*aux(111)
s(292) =< it(60)*aux(119)
aux(116) =< it(61)*aux(115)
aux(113) =< it(61)*aux(112)
s(305) =< aux(116)* (1/3)
s(302) =< aux(116)* (1/2)
s(306) =< aux(113)* (1/3)
s(303) =< aux(113)* (1/2)
s(294) =< s(306)
s(295) =< s(305)
s(296) =< aux(113)
s(296) =< aux(116)
s(297) =< aux(113)
s(298) =< aux(116)
s(298) =< aux(113)
s(299) =< aux(113)
s(298) =< s(303)
s(299) =< s(303)
s(297) =< aux(116)
s(299) =< aux(116)
s(297) =< s(302)
s(298) =< s(302)
s(294) =< aux(113)
s(295) =< aux(113)
s(295) =< s(303)
s(294) =< aux(116)
s(295) =< aux(116)
s(294) =< s(302)
s(295) =< s(302)
s(300) =< aux(116)
s(291) =< s(293)
s(291) =< s(292)

#### Cost of phase [60,61,62]:domatch(V2,V,V7,Out) -> [domatch(V2',V',V7',Out')] 
2*it(60)+6*it(61)+2*s(291)+6*s(294)+5*s(295)+21*s(296)+12*s(297)+13*s(298)+9*s(299)+4*s(300)+0
  Such that:it(60) =< -V2+V+2
aux(111) =< V2
aux(118) =< -V2+V+V2'-V'
aux(119) =< V
aux(120) =< V-V'
it(60) =< aux(118)
it(61) =< aux(118)
it(60) =< aux(119)
it(61) =< aux(119)
it(60) =< aux(120)
it(61) =< aux(120)
aux(115) =< aux(119)
aux(112) =< aux(111)
s(293) =< it(60)*aux(111)
s(292) =< it(60)*aux(119)
aux(116) =< it(61)*aux(115)
aux(113) =< it(61)*aux(112)
s(305) =< aux(116)* (1/3)
s(302) =< aux(116)* (1/2)
s(306) =< aux(113)* (1/3)
s(303) =< aux(113)* (1/2)
s(294) =< s(306)
s(295) =< s(305)
s(296) =< aux(113)
s(296) =< aux(116)
s(297) =< aux(113)
s(298) =< aux(116)
s(298) =< aux(113)
s(299) =< aux(113)
s(298) =< s(303)
s(299) =< s(303)
s(297) =< aux(116)
s(299) =< aux(116)
s(297) =< s(302)
s(298) =< s(302)
s(294) =< aux(113)
s(295) =< aux(113)
s(295) =< s(303)
s(294) =< aux(116)
s(295) =< aux(116)
s(294) =< s(302)
s(295) =< s(302)
s(300) =< aux(116)
s(291) =< s(293)
s(291) =< s(292)

#### Cost of chains of domatch(V2,V,V7,Out):
* Chain [[64],68]: 2*it(64)+1
  Such that:it(64) =< V

  with precondition: [V2=1,V>=2,V7>=0,Out>=2*V7+7] 

* Chain [[64],67]: 10*it(64)+6*s(235)+39*s(236)+151*s(237)+24*s(253)+3
  Such that:aux(104) =< 1
aux(105) =< 1/2
s(231) =< 1/3
aux(108) =< V
it(64) =< aux(108)
s(235) =< s(231)
s(236) =< aux(108)
s(237) =< aux(104)
s(237) =< aux(108)
s(236) =< aux(104)
s(236) =< aux(105)
s(235) =< aux(104)
s(235) =< aux(108)
s(247) =< aux(105)
s(247) =< aux(104)
s(253) =< aux(108)
s(253) =< aux(104)
s(253) =< s(247)

  with precondition: [V2=1,V>=1,V7>=0,Out>=V7+1] 

* Chain [[64],66]: 2*it(64)+2
  Such that:it(64) =< V

  with precondition: [V2=1,V>=2,V7>=0,Out>=V7+1] 

* Chain [[64],65]: 2*it(64)+1
  Such that:it(64) =< V

  with precondition: [V2=1,V>=2,V7>=0,Out>=V7+2] 

* Chain [[64],63,67]: 2*it(64)+5
  Such that:it(64) =< V

  with precondition: [V2=1,V>=2,V7>=0,Out>=V7+1] 

* Chain [[60,61,62],67]: 2*it(60)+14*it(61)+6*s(235)+39*s(236)+151*s(237)+24*s(253)+2*s(291)+6*s(294)+5*s(295)+21*s(296)+12*s(297)+13*s(298)+9*s(299)+4*s(300)+3
  Such that:it(60) =< -V2+V+2
aux(105) =< V2/2
s(231) =< V2/3
aux(121) =< V2
aux(122) =< V
s(235) =< s(231)
s(236) =< aux(122)
s(237) =< aux(121)
s(237) =< aux(122)
s(236) =< aux(121)
s(236) =< aux(105)
s(235) =< aux(121)
s(235) =< aux(122)
it(61) =< aux(122)
s(247) =< aux(105)
s(247) =< aux(121)
s(253) =< aux(122)
s(253) =< aux(121)
s(253) =< s(247)
it(60) =< aux(122)
aux(115) =< aux(122)
aux(112) =< aux(121)
s(293) =< it(60)*aux(121)
s(292) =< it(60)*aux(122)
aux(116) =< it(61)*aux(115)
aux(113) =< it(61)*aux(112)
s(305) =< aux(116)* (1/3)
s(302) =< aux(116)* (1/2)
s(306) =< aux(113)* (1/3)
s(303) =< aux(113)* (1/2)
s(294) =< s(306)
s(295) =< s(305)
s(296) =< aux(113)
s(296) =< aux(116)
s(297) =< aux(113)
s(298) =< aux(116)
s(298) =< aux(113)
s(299) =< aux(113)
s(298) =< s(303)
s(299) =< s(303)
s(297) =< aux(116)
s(299) =< aux(116)
s(297) =< s(302)
s(298) =< s(302)
s(294) =< aux(113)
s(295) =< aux(113)
s(295) =< s(303)
s(294) =< aux(116)
s(295) =< aux(116)
s(294) =< s(302)
s(295) =< s(302)
s(300) =< aux(116)
s(291) =< s(293)
s(291) =< s(292)

  with precondition: [V2>=2,V>=1,V7>=0,Out>=0,Out+V+V2>=4] 

* Chain [[60,61,62],66]: 2*it(60)+6*it(61)+2*s(291)+6*s(294)+5*s(295)+21*s(296)+12*s(297)+13*s(298)+9*s(299)+4*s(300)+2
  Such that:it(60) =< -V2+V+2
aux(111) =< V2
aux(123) =< V
it(60) =< aux(123)
it(61) =< aux(123)
aux(115) =< aux(123)
aux(112) =< aux(111)
s(293) =< it(60)*aux(111)
s(292) =< it(60)*aux(123)
aux(116) =< it(61)*aux(115)
aux(113) =< it(61)*aux(112)
s(305) =< aux(116)* (1/3)
s(302) =< aux(116)* (1/2)
s(306) =< aux(113)* (1/3)
s(303) =< aux(113)* (1/2)
s(294) =< s(306)
s(295) =< s(305)
s(296) =< aux(113)
s(296) =< aux(116)
s(297) =< aux(113)
s(298) =< aux(116)
s(298) =< aux(113)
s(299) =< aux(113)
s(298) =< s(303)
s(299) =< s(303)
s(297) =< aux(116)
s(299) =< aux(116)
s(297) =< s(302)
s(298) =< s(302)
s(294) =< aux(113)
s(295) =< aux(113)
s(295) =< s(303)
s(294) =< aux(116)
s(295) =< aux(116)
s(294) =< s(302)
s(295) =< s(302)
s(300) =< aux(116)
s(291) =< s(293)
s(291) =< s(292)

  with precondition: [V2>=2,V>=2,V7>=0,Out>=0] 

* Chain [[60,61,62],65]: 2*it(60)+6*it(61)+2*s(291)+6*s(294)+5*s(295)+21*s(296)+12*s(297)+13*s(298)+9*s(299)+4*s(300)+1
  Such that:it(60) =< -V2+V+2
aux(111) =< V2
aux(124) =< V
it(60) =< aux(124)
it(61) =< aux(124)
aux(115) =< aux(124)
aux(112) =< aux(111)
s(293) =< it(60)*aux(111)
s(292) =< it(60)*aux(124)
aux(116) =< it(61)*aux(115)
aux(113) =< it(61)*aux(112)
s(305) =< aux(116)* (1/3)
s(302) =< aux(116)* (1/2)
s(306) =< aux(113)* (1/3)
s(303) =< aux(113)* (1/2)
s(294) =< s(306)
s(295) =< s(305)
s(296) =< aux(113)
s(296) =< aux(116)
s(297) =< aux(113)
s(298) =< aux(116)
s(298) =< aux(113)
s(299) =< aux(113)
s(298) =< s(303)
s(299) =< s(303)
s(297) =< aux(116)
s(299) =< aux(116)
s(297) =< s(302)
s(298) =< s(302)
s(294) =< aux(113)
s(295) =< aux(113)
s(295) =< s(303)
s(294) =< aux(116)
s(295) =< aux(116)
s(294) =< s(302)
s(295) =< s(302)
s(300) =< aux(116)
s(291) =< s(293)
s(291) =< s(292)

  with precondition: [V2>=2,V>=2,V7>=0,Out>=1] 

* Chain [[60,61,62],63,67]: 2*it(60)+6*it(61)+2*s(291)+6*s(294)+5*s(295)+21*s(296)+12*s(297)+13*s(298)+9*s(299)+4*s(300)+5
  Such that:it(60) =< -V2+V+2
aux(111) =< V2
aux(125) =< V
it(60) =< aux(125)
it(61) =< aux(125)
aux(115) =< aux(125)
aux(112) =< aux(111)
s(293) =< it(60)*aux(111)
s(292) =< it(60)*aux(125)
aux(116) =< it(61)*aux(115)
aux(113) =< it(61)*aux(112)
s(305) =< aux(116)* (1/3)
s(302) =< aux(116)* (1/2)
s(306) =< aux(113)* (1/3)
s(303) =< aux(113)* (1/2)
s(294) =< s(306)
s(295) =< s(305)
s(296) =< aux(113)
s(296) =< aux(116)
s(297) =< aux(113)
s(298) =< aux(116)
s(298) =< aux(113)
s(299) =< aux(113)
s(298) =< s(303)
s(299) =< s(303)
s(297) =< aux(116)
s(299) =< aux(116)
s(297) =< s(302)
s(298) =< s(302)
s(294) =< aux(113)
s(295) =< aux(113)
s(295) =< s(303)
s(294) =< aux(116)
s(295) =< aux(116)
s(294) =< s(302)
s(295) =< s(302)
s(300) =< aux(116)
s(291) =< s(293)
s(291) =< s(292)

  with precondition: [V2>=2,V>=2,V7>=0,Out>=0] 

* Chain [68]: 1
  with precondition: [V2=1,V=1,V7+2=Out,V7>=0] 

* Chain [67]: 6*s(235)+5*s(236)+111*s(237)+22*s(238)+13*s(239)+19*s(240)+8*s(241)+18*s(252)+16*s(253)+8*s(254)+2*s(255)+3
  Such that:s(231) =< V2/3
s(234) =< V/3
aux(104) =< V2
aux(105) =< V2/2
aux(106) =< V
aux(107) =< V/2
s(235) =< s(231)
s(236) =< s(234)
s(237) =< aux(104)
s(237) =< aux(106)
s(238) =< aux(104)
s(239) =< aux(106)
s(239) =< aux(104)
s(240) =< aux(104)
s(239) =< aux(105)
s(240) =< aux(105)
s(238) =< aux(106)
s(240) =< aux(106)
s(238) =< aux(107)
s(239) =< aux(107)
s(235) =< aux(104)
s(236) =< aux(104)
s(236) =< aux(105)
s(235) =< aux(106)
s(236) =< aux(106)
s(235) =< aux(107)
s(236) =< aux(107)
s(241) =< aux(106)
s(247) =< aux(105)
s(249) =< aux(107)
s(247) =< aux(104)
s(252) =< aux(104)
s(249) =< aux(106)
s(253) =< aux(106)
s(253) =< aux(104)
s(254) =< aux(104)
s(253) =< s(247)
s(254) =< s(247)
s(252) =< aux(106)
s(254) =< aux(106)
s(252) =< s(249)
s(253) =< s(249)
s(255) =< aux(106)
s(255) =< aux(104)
s(255) =< aux(105)
s(255) =< s(249)

  with precondition: [Out=0,V2>=0,V>=0,V7>=0] 

* Chain [66]: 2
  with precondition: [V=1,Out=0,V2>=1,V7>=0] 

* Chain [65]: 1
  with precondition: [V=1,Out=1,V2>=1,V7>=0] 

* Chain [63,67]: 5
  with precondition: [V=1,Out=0,V2>=1,V7>=0] 


#### Cost of loops [69,70] 

 * loop 69:eqNatList(V2,V,Out) -> [eqNatList(V2',V',Out')] 
1
 * loop 70:eqNatList(V2,V,Out) -> [eqNatList(V2',V',Out')] 
1
#### Cost of phase [69,70]:eqNatList(V2,V,Out) -> [eqNatList(V2',V',Out')] 
2*it(69)+0
  Such that:aux(130) =< V2
aux(131) =< V2-V2'
aux(132) =< V
aux(133) =< V-V'
it(69) =< aux(130)
it(69) =< aux(131)
it(69) =< aux(132)
it(69) =< aux(133)

#### Cost of phase [69,70]:eqNatList(V2,V,Out) -> [eqNatList(V2',V',Out')] 
2*it(69)+0
  Such that:aux(130) =< V2
aux(131) =< V2-V2'
aux(132) =< V
aux(133) =< V-V'
it(69) =< aux(130)
it(69) =< aux(131)
it(69) =< aux(132)
it(69) =< aux(133)

#### Cost of phase [69,70]:eqNatList(V2,V,Out) -> [eqNatList(V2',V',Out')] 
2*it(69)+0
  Such that:aux(130) =< V2
aux(131) =< V2-V2'
aux(132) =< V
aux(133) =< V-V'
it(69) =< aux(130)
it(69) =< aux(131)
it(69) =< aux(132)
it(69) =< aux(133)

#### Cost of phase [69,70]:eqNatList(V2,V,Out) -> [eqNatList(V2',V',Out')] 
2*it(69)+0
  Such that:aux(130) =< V2
aux(131) =< V2-V2'
aux(132) =< V
aux(133) =< V-V'
it(69) =< aux(130)
it(69) =< aux(131)
it(69) =< aux(132)
it(69) =< aux(133)

#### Cost of phase [69,70]:eqNatList(V2,V,Out) -> [eqNatList(V2',V',Out')] 
2*it(69)+0
  Such that:aux(130) =< V2
aux(131) =< V2-V2'
aux(132) =< V
aux(133) =< V-V'
it(69) =< aux(130)
it(69) =< aux(131)
it(69) =< aux(132)
it(69) =< aux(133)

#### Cost of phase [69,70]:eqNatList(V2,V,Out) -> [eqNatList(V2',V',Out')] 
2*it(69)+0
  Such that:aux(130) =< V2
aux(131) =< V2-V2'
aux(132) =< V
aux(133) =< V-V'
it(69) =< aux(130)
it(69) =< aux(131)
it(69) =< aux(132)
it(69) =< aux(133)

#### Cost of chains of eqNatList(V2,V,Out):
* Chain [[69,70],76]: 2*it(69)+1
  Such that:aux(134) =< V
it(69) =< aux(134)

  with precondition: [Out=2,V=V2,V>=2] 

* Chain [[69,70],75]: 2*it(69)+1
  Such that:aux(132) =< V
aux(135) =< V2
it(69) =< aux(135)
it(69) =< aux(132)

  with precondition: [Out=1,V2>=2,V>=V2] 

* Chain [[69,70],74]: 2*it(69)+1
  Such that:aux(130) =< V2
aux(136) =< V
it(69) =< aux(130)
it(69) =< aux(136)

  with precondition: [Out=1,V>=2,V2>=V] 

* Chain [[69,70],73]: 2*it(69)+1
  Such that:aux(130) =< V2
aux(137) =< V
it(69) =< aux(130)
it(69) =< aux(137)

  with precondition: [Out=0,V2>=1,V>=1] 

* Chain [[69,70],72]: 2*it(69)+1
  Such that:aux(130) =< V2
aux(138) =< V
it(69) =< aux(130)
it(69) =< aux(138)

  with precondition: [Out=1,V2>=2,V>=3] 

* Chain [[69,70],71]: 2*it(69)+1
  Such that:aux(132) =< V
aux(139) =< V2
it(69) =< aux(139)
it(69) =< aux(132)

  with precondition: [Out=1,V2>=3,V>=2] 

* Chain [76]: 1
  with precondition: [V2=1,V=1,Out=2] 

* Chain [75]: 1
  with precondition: [V2=1,Out=1,V>=1] 

* Chain [74]: 1
  with precondition: [V=1,Out=1,V2>=1] 

* Chain [73]: 1
  with precondition: [Out=0,V2>=0,V>=0] 

* Chain [72]: 1
  with precondition: [Out=1,V2>=1,V>=2] 

* Chain [71]: 1
  with precondition: [Out=1,V2>=2,V>=1] 


#### Cost of chains of notEmpty(V2,Out):
* Chain [79]: 1
  with precondition: [V2=1,Out=1] 

* Chain [78]: 0
  with precondition: [Out=0,V2>=0] 

* Chain [77]: 1
  with precondition: [Out=2,V2>=1] 


#### Cost of chains of start(V2,V,V7,V38,V47):
* Chain [88]: 18*s(456)+15*s(457)+645*s(458)+66*s(459)+39*s(460)+135*s(461)+88*s(462)+54*s(473)+48*s(474)+72*s(475)+6*s(476)+16*s(504)+48*s(516)+40*s(517)+168*s(518)+96*s(519)+104*s(520)+72*s(521)+32*s(522)+16*s(523)+12*s(524)+6
  Such that:aux(142) =< -V2+V+2
aux(143) =< V2
aux(144) =< V2/2
aux(145) =< V2/3
aux(146) =< V
aux(147) =< V/2
aux(148) =< V/3
s(504) =< aux(142)
s(504) =< aux(146)
s(462) =< aux(146)
s(506) =< aux(146)
s(507) =< aux(143)
s(508) =< s(504)*aux(143)
s(509) =< s(504)*aux(146)
s(510) =< s(462)*s(506)
s(511) =< s(462)*s(507)
s(512) =< s(510)* (1/3)
s(513) =< s(510)* (1/2)
s(514) =< s(511)* (1/3)
s(515) =< s(511)* (1/2)
s(516) =< s(514)
s(517) =< s(512)
s(518) =< s(511)
s(518) =< s(510)
s(519) =< s(511)
s(520) =< s(510)
s(520) =< s(511)
s(521) =< s(511)
s(520) =< s(515)
s(521) =< s(515)
s(519) =< s(510)
s(521) =< s(510)
s(519) =< s(513)
s(520) =< s(513)
s(516) =< s(511)
s(517) =< s(511)
s(517) =< s(515)
s(516) =< s(510)
s(517) =< s(510)
s(516) =< s(513)
s(517) =< s(513)
s(522) =< s(510)
s(523) =< s(508)
s(523) =< s(509)
s(524) =< aux(145)
s(461) =< aux(146)
s(458) =< aux(143)
s(458) =< aux(146)
s(461) =< aux(143)
s(461) =< aux(144)
s(524) =< aux(143)
s(524) =< aux(146)
s(468) =< aux(144)
s(468) =< aux(143)
s(475) =< aux(146)
s(475) =< aux(143)
s(475) =< s(468)
s(456) =< aux(145)
s(457) =< aux(148)
s(459) =< aux(143)
s(460) =< aux(146)
s(460) =< aux(143)
s(460) =< aux(144)
s(459) =< aux(146)
s(459) =< aux(147)
s(460) =< aux(147)
s(456) =< aux(143)
s(457) =< aux(143)
s(457) =< aux(144)
s(456) =< aux(146)
s(457) =< aux(146)
s(456) =< aux(147)
s(457) =< aux(147)
s(470) =< aux(147)
s(473) =< aux(143)
s(470) =< aux(146)
s(474) =< aux(146)
s(474) =< aux(143)
s(474) =< s(468)
s(473) =< aux(146)
s(473) =< s(470)
s(474) =< s(470)
s(476) =< aux(146)
s(476) =< aux(143)
s(476) =< aux(144)
s(476) =< s(470)

  with precondition: [V2>=0] 

* Chain [87]: 0
  with precondition: [V2=0,V>=1] 

* Chain [86]: 58*s(588)+6*s(589)+39*s(590)+151*s(591)+24*s(593)+6*s(600)+5*s(601)+262*s(602)+22*s(603)+13*s(604)+58*s(605)+18*s(609)+16*s(610)+32*s(611)+2*s(612)+8*s(618)+24*s(630)+20*s(631)+84*s(632)+48*s(633)+52*s(634)+36*s(635)+16*s(636)+8*s(637)+6*s(638)+36*s(647)+12*s(648)+78*s(649)+302*s(650)+48*s(652)+6
  Such that:s(615) =< -V+V7+1
s(598) =< V7/2
s(599) =< V7/3
aux(149) =< 1
aux(150) =< 1/2
aux(151) =< 1/3
aux(152) =< V
aux(153) =< V/2
aux(154) =< V/3
aux(155) =< V7
s(588) =< aux(155)
s(589) =< aux(151)
s(590) =< aux(155)
s(591) =< aux(149)
s(591) =< aux(155)
s(590) =< aux(149)
s(590) =< aux(150)
s(589) =< aux(149)
s(589) =< aux(155)
s(592) =< aux(150)
s(592) =< aux(149)
s(593) =< aux(155)
s(593) =< aux(149)
s(593) =< s(592)
s(647) =< aux(152)
s(648) =< aux(151)
s(649) =< aux(152)
s(650) =< aux(149)
s(650) =< aux(152)
s(649) =< aux(149)
s(649) =< aux(150)
s(648) =< aux(149)
s(648) =< aux(152)
s(652) =< aux(152)
s(652) =< aux(149)
s(652) =< s(592)
s(618) =< s(615)
s(618) =< aux(155)
s(620) =< aux(155)
s(621) =< aux(152)
s(622) =< s(618)*aux(152)
s(623) =< s(618)*aux(155)
s(624) =< s(588)*s(620)
s(625) =< s(588)*s(621)
s(626) =< s(624)* (1/3)
s(627) =< s(624)* (1/2)
s(628) =< s(625)* (1/3)
s(629) =< s(625)* (1/2)
s(630) =< s(628)
s(631) =< s(626)
s(632) =< s(625)
s(632) =< s(624)
s(633) =< s(625)
s(634) =< s(624)
s(634) =< s(625)
s(635) =< s(625)
s(634) =< s(629)
s(635) =< s(629)
s(633) =< s(624)
s(635) =< s(624)
s(633) =< s(627)
s(634) =< s(627)
s(630) =< s(625)
s(631) =< s(625)
s(631) =< s(629)
s(630) =< s(624)
s(631) =< s(624)
s(630) =< s(627)
s(631) =< s(627)
s(636) =< s(624)
s(637) =< s(622)
s(637) =< s(623)
s(638) =< aux(154)
s(605) =< aux(155)
s(602) =< aux(152)
s(602) =< aux(155)
s(605) =< aux(152)
s(605) =< aux(153)
s(638) =< aux(152)
s(638) =< aux(155)
s(607) =< aux(153)
s(607) =< aux(152)
s(611) =< aux(155)
s(611) =< aux(152)
s(611) =< s(607)
s(600) =< aux(154)
s(601) =< s(599)
s(603) =< aux(152)
s(604) =< aux(155)
s(604) =< aux(152)
s(604) =< aux(153)
s(603) =< aux(155)
s(603) =< s(598)
s(604) =< s(598)
s(600) =< aux(152)
s(601) =< aux(152)
s(601) =< aux(153)
s(600) =< aux(155)
s(601) =< aux(155)
s(600) =< s(598)
s(601) =< s(598)
s(608) =< s(598)
s(609) =< aux(152)
s(608) =< aux(155)
s(610) =< aux(155)
s(610) =< aux(152)
s(610) =< s(607)
s(609) =< aux(155)
s(609) =< s(608)
s(610) =< s(608)
s(612) =< aux(155)
s(612) =< aux(152)
s(612) =< aux(153)
s(612) =< s(608)

  with precondition: [V2=1] 

* Chain [85]: 18*s(667)+6*s(668)+39*s(669)+151*s(670)+24*s(672)+5
  Such that:s(663) =< 1
s(664) =< 1/2
s(665) =< 1/3
s(666) =< V7
s(667) =< s(666)
s(668) =< s(665)
s(669) =< s(666)
s(670) =< s(663)
s(670) =< s(666)
s(669) =< s(663)
s(669) =< s(664)
s(668) =< s(663)
s(668) =< s(666)
s(671) =< s(664)
s(671) =< s(663)
s(672) =< s(666)
s(672) =< s(663)
s(672) =< s(671)

  with precondition: [V=1,V2>=1] 

* Chain [84]: 2*s(674)+1
  Such that:s(673) =< V
s(674) =< s(673)

  with precondition: [V2=V,V2>=1] 

* Chain [83]: 10*s(677)+1
  Such that:aux(156) =< V7
aux(157) =< V47
s(677) =< aux(157)
s(677) =< aux(156)

  with precondition: [V2=2,V>=0,V7>=0,V38>=0,V47>=0] 

* Chain [82]: 6*s(687)+5*s(688)+262*s(689)+22*s(690)+13*s(691)+58*s(692)+40*s(693)+18*s(696)+16*s(697)+32*s(698)+2*s(699)+8*s(705)+24*s(717)+20*s(718)+84*s(719)+48*s(720)+52*s(721)+36*s(722)+16*s(723)+8*s(724)+6*s(725)+5
  Such that:s(702) =< -V+V7+1
s(685) =< V7/2
s(686) =< V7/3
aux(158) =< V
aux(159) =< V/2
aux(160) =< V/3
aux(161) =< V7
s(705) =< s(702)
s(705) =< aux(161)
s(693) =< aux(161)
s(707) =< aux(161)
s(708) =< aux(158)
s(709) =< s(705)*aux(158)
s(710) =< s(705)*aux(161)
s(711) =< s(693)*s(707)
s(712) =< s(693)*s(708)
s(713) =< s(711)* (1/3)
s(714) =< s(711)* (1/2)
s(715) =< s(712)* (1/3)
s(716) =< s(712)* (1/2)
s(717) =< s(715)
s(718) =< s(713)
s(719) =< s(712)
s(719) =< s(711)
s(720) =< s(712)
s(721) =< s(711)
s(721) =< s(712)
s(722) =< s(712)
s(721) =< s(716)
s(722) =< s(716)
s(720) =< s(711)
s(722) =< s(711)
s(720) =< s(714)
s(721) =< s(714)
s(717) =< s(712)
s(718) =< s(712)
s(718) =< s(716)
s(717) =< s(711)
s(718) =< s(711)
s(717) =< s(714)
s(718) =< s(714)
s(723) =< s(711)
s(724) =< s(709)
s(724) =< s(710)
s(725) =< aux(160)
s(692) =< aux(161)
s(689) =< aux(158)
s(689) =< aux(161)
s(692) =< aux(158)
s(692) =< aux(159)
s(725) =< aux(158)
s(725) =< aux(161)
s(694) =< aux(159)
s(694) =< aux(158)
s(698) =< aux(161)
s(698) =< aux(158)
s(698) =< s(694)
s(687) =< aux(160)
s(688) =< s(686)
s(690) =< aux(158)
s(691) =< aux(161)
s(691) =< aux(158)
s(691) =< aux(159)
s(690) =< aux(161)
s(690) =< s(685)
s(691) =< s(685)
s(687) =< aux(158)
s(688) =< aux(158)
s(688) =< aux(159)
s(687) =< aux(161)
s(688) =< aux(161)
s(687) =< s(685)
s(688) =< s(685)
s(695) =< s(685)
s(696) =< aux(158)
s(695) =< aux(161)
s(697) =< aux(161)
s(697) =< aux(158)
s(697) =< s(694)
s(696) =< aux(161)
s(696) =< s(695)
s(697) =< s(695)
s(699) =< aux(161)
s(699) =< aux(158)
s(699) =< aux(159)
s(699) =< s(695)

  with precondition: [V2=2,V>=0,V7>=1,V38>=0] 

* Chain [81]: 2*s(731)+1
  Such that:s(730) =< V47
s(731) =< s(730)

  with precondition: [V2=2,V7=V47,V>=0,V7>=2,V38>=0] 

* Chain [80]: 0
  with precondition: [V=0,V2>=1] 


Closed-form bounds of start(V2,V,V7,V38,V47): 
-------------------------------------
* Chain [88] with precondition: [V2>=0] 
    - Upper bound: 765*V2+6+352*V2*nat(V)+16*V2*nat(-V2+V+2)+nat(V)*388+448/3*nat(V)*nat(V)+nat(-V2+V+2)*16+10*V2+nat(V/3)*15 
    - Complexity: n^2 
* Chain [87] with precondition: [V2=0,V>=1] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [86] with precondition: [V2=1] 
    - Upper bound: nat(V)*338+654+nat(V)*176*nat(V7)+nat(V)*8*nat(-V+V7+1)+nat(V7)*179+224/3*nat(V7)*nat(V7)+nat(-V+V7+1)*8+nat(V/3)*12+nat(V7/3)*5 
    - Complexity: n^2 
* Chain [85] with precondition: [V=1,V2>=1] 
    - Upper bound: nat(V7)*18+221 
    - Complexity: n 
* Chain [84] with precondition: [V2=V,V2>=1] 
    - Upper bound: 2*V+1 
    - Complexity: n 
* Chain [83] with precondition: [V2=2,V>=0,V7>=0,V38>=0,V47>=0] 
    - Upper bound: 10*V47+1 
    - Complexity: n 
* Chain [82] with precondition: [V2=2,V>=0,V7>=1,V38>=0] 
    - Upper bound: 302*V+5+176*V*V7+8*V*nat(-V+V7+1)+161*V7+224/3*V7*V7+nat(-V+V7+1)*8+4*V+5/3*V7 
    - Complexity: n^2 
* Chain [81] with precondition: [V2=2,V7=V47,V>=0,V7>=2,V38>=0] 
    - Upper bound: 2*V47+1 
    - Complexity: n 
* Chain [80] with precondition: [V=0,V2>=1] 
    - Upper bound: 0 
    - Complexity: constant 

### Maximum cost of start(V2,V,V7,V38,V47): max([max([nat(V7)*18+221,nat(V47)*10+1]),nat(V)*300+4+nat(V/3)*12+max([nat(V)*36+1+max([nat(V)*176*nat(V7)+648+nat(V)*8*nat(-V+V7+1)+nat(V7)*179+224/3*nat(V7)*nat(V7)+nat(-V+V7+1)*8+nat(V7/3)*5,352*V2*nat(V)+765*V2+16*V2*nat(-V2+V+2)+nat(V)*50+448/3*nat(V)*nat(V)+nat(-V2+V+2)*16+10*V2+nat(V/3)*3]),nat(V)*176*nat(V7)+nat(V)*8*nat(-V+V7+1)+nat(V7)*161+224/3*nat(V7)*nat(V7)+nat(-V+V7+1)*8+nat(V7/3)*5])+ (nat(V)*2+1)]) 
Asymptotic class: n^2 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 156 ms.
* Invariants computed in 523 ms.
   - Backward Invariants 178 ms.
   - Transitive Invariants 22 ms.
* Refinement performed in 1229 ms.
* Termination proved in 50 ms.
* Upper bounds computed in 986 ms.
   - Equation cost structures 316 ms.
   - Phase cost structures 150 ms.
   - Chain cost structures 308 ms.
   - Solving cost expressions 27 ms.
* Total analysis performed in 3117 ms.



Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [and/3]
1. recursive [non_tail,multiple] : [eqZList/3]
2. recursive [multiple] : [f/2]
3. non_recursive  : [first/2]
4. non_recursive  : [g/2]
5. non_recursive  : [second/2]
6. non_recursive  : [start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into and/3
1. SCC is partially evaluated into eqZList/3
2. SCC is partially evaluated into f/2
3. SCC is partially evaluated into first/2
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into second/2
6. SCC is partially evaluated into start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations and/3 
* CE 24 is refined into CE [25] 
* CE 23 is refined into CE [26] 
* CE 21 is refined into CE [27] 
* CE 22 is refined into CE [28] 
* CE 20 is refined into CE [29] 


#### Refined cost equations and/3 
* CE 25: and(V,V3,Out) = 0
     [V3>=0,V>=0,Out=0] 
* CE 26: and(V,V3,Out) = 0
     [Out=2,V3=2,V=2] 
* CE 27: and(V,V3,Out) = 0
     [Out=1,V3=1,V=2] 
* CE 28: and(V,V3,Out) = 0
     [Out=1,V3=2,V=1] 
* CE 29: and(V,V3,Out) = 0
     [Out=1,V3=1,V=1] 

### Cost equations --> "Loop" of and/3 
* CEs [25] --> Loop 18 
* CEs [26] --> Loop 19 
* CEs [27] --> Loop 20 
* CEs [28] --> Loop 21 
* CEs [29] --> Loop 22 

#### Loops of and/3 
* Loop 18: and(V,V3,Out) [V3>=0,V>=0,Out=0] 
* Loop 19: and(V,V3,Out) [Out=2,V3=2,V=2] 
* Loop 20: and(V,V3,Out) [Out=1,V3=1,V=2] 
* Loop 21: and(V,V3,Out) [Out=1,V3=2,V=1] 
* Loop 22: and(V,V3,Out) [Out=1,V3=1,V=1] 

### Ranking functions of CR and(V,V3,Out) 

#### Partial ranking functions of CR and(V,V3,Out) 


### Resulting Chains:and(V,V3,Out) 
* [22]
* [21]
* [20]
* [19]
* [18]


### Merging Chains  and/3 into  External patterns of execution 
* [[22]] --> 1 
* [[21]] --> 2 
* [[20]] --> 3 
* [[19]] --> 4 
* [[18]] --> 5 


### Specialization of cost equations eqZList/3 
* CE 15 is refined into CE [30] 
* CE 12 is refined into CE [31] 
* CE 13 is refined into CE [32] 
* CE 14 is refined into CE [33] 
* CE 11 is refined into CE [34,35,36,37,38] 


#### Refined cost equations eqZList/3 
* CE 30: eqZList(V,V3,Out) = 0
     [V3>=0,V>=0,Out=0] 
* CE 31: eqZList(V,V3,Out) = 1
     [V>=1,Out=1,V3=0] 
* CE 32: eqZList(V,V3,Out) = 1
     [V3>=1,Out=1,V=0] 
* CE 33: eqZList(V,V3,Out) = 1
     [Out=2,V3=0,V=0] 
* CE 34: eqZList(V,V3,Out) = 1+ eqZList(W3,X3,Y3)+ eqZList(Z3,A4,B4)+ and(C4,D4,E4):1
     [A4>=0,Z3>=0,X3>=0,W3>=0,X3+A4+1=V3,W3+Z3+1=V,B4=1,Y3=1,E4=1,D4=1,C4=1,Out=1] 
* CE 35: eqZList(V,V3,Out) = 1+ eqZList(W3,X3,Y3)+ eqZList(Z3,A4,B4)+ and(C4,D4,E4):2
     [A4>=0,Z3>=0,X3>=0,W3>=0,X3+A4+1=V3,W3+Z3+1=V,B4=2,Y3=1,E4=1,D4=2,C4=1,Out=1] 
* CE 36: eqZList(V,V3,Out) = 1+ eqZList(W3,X3,Y3)+ eqZList(Z3,A4,B4)+ and(C4,D4,E4):3
     [A4>=0,Z3>=0,X3>=0,W3>=0,X3+A4+1=V3,W3+Z3+1=V,B4=1,Y3=2,E4=1,D4=1,C4=2,Out=1] 
* CE 37: eqZList(V,V3,Out) = 1+ eqZList(W3,X3,Y3)+ eqZList(Z3,A4,B4)+ and(C4,D4,E4):4
     [A4>=0,Z3>=0,X3>=0,W3>=0,X3+A4+1=V3,W3+Z3+1=V,B4=2,Y3=2,E4=2,D4=2,C4=2,Out=2] 
* CE 38: eqZList(V,V3,Out) = 1+ eqZList(W3,X3,Y3)+ eqZList(Z3,A4,B4)+ and(Y3,B4,C4):5
     [A4>=0,Z3>=0,X3>=0,W3>=0,B4>=0,Y3>=0,X3+A4+1=V3,W3+Z3+1=V,C4=0,Out=0] 

### Cost equations --> "Loop" of eqZList/3 
* CEs [37] --> Loop 23 
* CEs [36] --> Loop 24 
* CEs [35] --> Loop 25 
* CEs [34] --> Loop 26 
* CEs [38] --> Loop 27 
* CEs [30] --> Loop 28 
* CEs [31] --> Loop 29 
* CEs [32] --> Loop 30 
* CEs [33] --> Loop 31 

#### Loops of eqZList/3 
* Loop 23: eqZList(V,V3,Out)->  eqZList(V',V3',Out')  eqZList(V'2,V3'2,Out'2)
                  [V3>=V3'+1,V>=V'+1,V3'>=0,V'>=0,V3'+V3'2+1=V3,V'+V'2+1=V,Out'2=2,Out'=2,Out=2] 
* Loop 24: eqZList(V,V3,Out)->  eqZList(V',V3',Out')  eqZList(V'2,V3'2,Out'2)
                  [V3>=V3'+1,V>=V'+1,V3'>=0,V'>=0,V3'+V3'2+1=V3,V'+V'2+1=V,Out'2=1,Out'=2,Out=1] 
* Loop 25: eqZList(V,V3,Out)->  eqZList(V',V3',Out')  eqZList(V'2,V3'2,Out'2)
                  [V3>=V3'+1,V>=V'+1,V3'>=0,V'>=0,V3'+V3'2+1=V3,V'+V'2+1=V,Out'2=2,Out'=1,Out=1] 
* Loop 26: eqZList(V,V3,Out)->  eqZList(V',V3',Out')  eqZList(V'2,V3'2,Out'2)
                  [V3>=V3'+1,V>=V'+1,V3'>=0,V'>=0,V3'+V3'2+1=V3,V'+V'2+1=V,Out'2=1,Out'=1,Out=1] 
* Loop 27: eqZList(V,V3,Out)->  eqZList(V',V3',Out')  eqZList(V'2,V3'2,Out'2)
                  [V3>=V3'+1,V>=V'+1,Out'2>=0,Out'>=0,V3'>=0,V'>=0,V3'+V3'2+1=V3,V'+V'2+1=V,Out=0] 
* Loop 28: eqZList(V,V3,Out) [V3>=0,V>=0,Out=0] 
* Loop 29: eqZList(V,V3,Out) [V>=1,Out=1,V3=0] 
* Loop 30: eqZList(V,V3,Out) [V3>=1,Out=1,V=0] 
* Loop 31: eqZList(V,V3,Out) [Out=2,V3=0,V=0] 

### Ranking functions of CR eqZList(V,V3,Out) 
* RF of phase [23]: [V,V3]
* RF of phase [24,25,26]: [V,V3]
* RF of phase [27]: [V,V3]

#### Partial ranking functions of CR eqZList(V,V3,Out) 
* Partial RF of phase [23]:
  - RF of loop [23:1,23:2]:
    V
    V3
* Partial RF of phase [24,25,26]:
  - RF of loop [24:1,24:2,25:1,25:2,26:1,26:2]:
    V
    V3
* Partial RF of phase [27]:
  - RF of loop [27:1,27:2]:
    V
    V3


### Resulting Chains:eqZList(V,V3,Out) 
* [31]
* [30]
* [29]
* [28]
* [multiple([27],[[multiple([24,25,26],[[multiple([23],[[31]])],[31],[30],[29]])],[multiple([23],[[31]])],[31],[30],[29],[28]])]
* [multiple([24,25,26],[[multiple([23],[[31]])],[31],[30],[29]])]
* [multiple([23],[[31]])]


### Merging Chains  eqZList/3 into  External patterns of execution 
* [[31]] --> 1 
* [[30]] --> 2 
* [[29]] --> 3 
* [[28],[multiple([27],[[multiple([24,25,26],[[multiple([23],[[31]])],[31],[30],[29]])],[multiple([23],[[31]])],[31],[30],[29],[28]])]] --> 4 
* [[multiple([24,25,26],[[multiple([23],[[31]])],[31],[30],[29]])]] --> 5 
* [[multiple([23],[[31]])]] --> 6 


### Specialization of cost equations f/2 
* CE 9 is refined into CE [39] 
* CE 10 is refined into CE [40] 
* CE 8 is refined into CE [41] 


#### Refined cost equations f/2 
* CE 39: f(V,Out) = 1
     [Out=0,V=0] 
* CE 40: f(V,Out) = 0
     [V>=0,Out=0] 
* CE 41: f(V,Out) = 1+ f(W,X)+ f(Y,Z)
     [Y>=0,W>=0,X+Z+1=Out,W+Y+1=V] 

### Cost equations --> "Loop" of f/2 
* CEs [41] --> Loop 32 
* CEs [39,40] --> Loop 33 

#### Loops of f/2 
* Loop 32: f(V,Out)->  f(V',Out')  f(V'2,Out'2)
                  [V'2>=0,V'>=0,Out=Out'+Out'2+1,V'+V'2+1=V] 
* Loop 33: f(V,Out) [V>=0,Out=0] 

### Ranking functions of CR f(V,Out) 
* RF of phase [32]: [V]

#### Partial ranking functions of CR f(V,Out) 
* Partial RF of phase [32]:
  - RF of loop [32:1,32:2]:
    V


### Resulting Chains:f(V,Out) 
* [33]
* [multiple([32],[[33]])]


### Merging Chains  f/2 into  External patterns of execution 
* [[33]] --> 1 
* [[multiple([32],[[33]])]] --> 2 


### Specialization of cost equations first/2 
* CE 18 is refined into CE [42] 
* CE 19 is refined into CE [43] 


#### Refined cost equations first/2 
* CE 42: first(V,Out) = 1
     [V>=Out+1,Out>=0] 
* CE 43: first(V,Out) = 0
     [V>=0,Out=0] 

### Cost equations --> "Loop" of first/2 
* CEs [42] --> Loop 34 
* CEs [43] --> Loop 35 

#### Loops of first/2 
* Loop 34: first(V,Out) [V>=Out+1,Out>=0] 
* Loop 35: first(V,Out) [V>=0,Out=0] 

### Ranking functions of CR first(V,Out) 

#### Partial ranking functions of CR first(V,Out) 


### Resulting Chains:first(V,Out) 
* [35]
* [34]


### Merging Chains  first/2 into  External patterns of execution 
* [[35]] --> 1 
* [[34]] --> 2 


### Specialization of cost equations second/2 
* CE 16 is refined into CE [44] 
* CE 17 is refined into CE [45] 


#### Refined cost equations second/2 
* CE 44: second(V,Out) = 1
     [V>=Out+1,Out>=0] 
* CE 45: second(V,Out) = 0
     [V>=0,Out=0] 

### Cost equations --> "Loop" of second/2 
* CEs [44] --> Loop 36 
* CEs [45] --> Loop 37 

#### Loops of second/2 
* Loop 36: second(V,Out) [V>=Out+1,Out>=0] 
* Loop 37: second(V,Out) [V>=0,Out=0] 

### Ranking functions of CR second(V,Out) 

#### Partial ranking functions of CR second(V,Out) 


### Resulting Chains:second(V,Out) 
* [37]
* [36]


### Merging Chains  second/2 into  External patterns of execution 
* [[37]] --> 1 
* [[36]] --> 2 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [46,47] 
* CE 3 is refined into CE [48,49,50,51,52,53] 
* CE 4 is refined into CE [54,55] 
* CE 5 is refined into CE [56,57] 
* CE 6 is refined into CE [58] 
* CE 7 is refined into CE [59,60,61,62,63] 


#### Refined cost equations start/2 
* CE 46: start(V,V3) = 0+ f(V,W3):1
     [V>=0,W3=0] 
* CE 47: start(V,V3) = 0+ f(V,W3):2
     [V>=W3,W3>=1] 
* CE 48: start(V,V3) = 0+ eqZList(W3,X3,Y3):1
     [Y3=2,X3=0,W3=0,V3=0,V=0] 
* CE 49: start(V,V3) = 0+ eqZList(W3,V3,X3):2
     [V3>=1,X3=1,W3=0,V=0] 
* CE 50: start(V,V3) = 0+ eqZList(V,W3,X3):3
     [V>=1,X3=1,W3=0,V3=0] 
* CE 51: start(V,V3) = 0+ eqZList(V,V3,W3):4
     [V3>=0,V>=0,W3=0] 
* CE 52: start(V,V3) = 0+ eqZList(V,V3,W3):5
     [V+V3>=3,V3>=1,V>=1,W3=1] 
* CE 53: start(A,A) = 0+ eqZList(A,A,B):6
     [A>=1,B=2] 
* CE 54: start(V,V3) = 0+ second(V,W3):1
     [V>=0,W3=0] 
* CE 55: start(V,V3) = 0+ second(V,W3):2
     [V>=W3+1,W3>=0] 
* CE 56: start(V,V3) = 0+ first(V,W3):1
     [V>=0,W3=0] 
* CE 57: start(V,V3) = 0+ first(V,W3):2
     [V>=W3+1,W3>=0] 
* CE 58: start(V,V3) = 1
     [V>=0] 
* CE 59: start(V,V3) = 0+ and(W3,X3,Y3):1
     [Y3=1,X3=1,W3=1,V3=1,V=1] 
* CE 60: start(V,V3) = 0+ and(W3,X3,Y3):2
     [Y3=1,X3=2,W3=1,V3=2,V=1] 
* CE 61: start(V,V3) = 0+ and(W3,X3,Y3):3
     [Y3=1,X3=1,W3=2,V3=1,V=2] 
* CE 62: start(V,V3) = 0+ and(W3,X3,Y3):4
     [Y3=2,X3=2,W3=2,V3=2,V=2] 
* CE 63: start(V,V3) = 0+ and(V,V3,W3):5
     [V3>=0,V>=0,W3=0] 

### Cost equations --> "Loop" of start/2 
* CEs [50] --> Loop 38 
* CEs [62] --> Loop 39 
* CEs [61] --> Loop 40 
* CEs [60] --> Loop 41 
* CEs [53,59] --> Loop 42 
* CEs [49] --> Loop 43 
* CEs [46,47,48,51,52,54,55,56,57,58,63] --> Loop 44 

#### Loops of start/2 
* Loop 38: start(V,V3) [V>=1,V3=0] 
* Loop 39: start(V,V3) [V3=2,V=2] 
* Loop 40: start(V,V3) [V3=1,V=2] 
* Loop 41: start(V,V3) [V3=2,V=1] 
* Loop 42: start(A,A) [A>=1] 
* Loop 43: start(V,V3) [V3>=1,V=0] 
* Loop 44: start(V,V3) [V>=0] 

### Ranking functions of CR start(V,V3) 

#### Partial ranking functions of CR start(V,V3) 


### Resulting Chains:start(V,V3) 
* [44]
* [43]
* [42]
* [41]
* [40]
* [39]
* [38]


### Merging Chains  start/2 into  External patterns of execution 
* [[43],[44]] --> 1 
* [[41]] --> 2 
* [[40]] --> 3 
* [[39],[42]] --> 4 
* [[38]] --> 5 


Computing Bounds
=====================================

#### Cost of chains of and(V,V3,Out):
* Chain [22]: 0
  with precondition: [V=1,V3=1,Out=1] 

* Chain [21]: 0
  with precondition: [V=1,V3=2,Out=1] 

* Chain [20]: 0
  with precondition: [V=2,V3=1,Out=1] 

* Chain [19]: 0
  with precondition: [V=2,V3=2,Out=2] 

* Chain [18]: 0
  with precondition: [Out=0,V>=0,V3>=0] 


#### Cost of loops [23] 

 * loop 23:eqZList(V,V3,Out) -> [eqZList(V',V3',Out'),eqZList(V'2,V3'2,Out'2)] 
1
#### Cost of phase [23]:eqZList(V,V3,Out) -> [] 
1*it(23)+1*it([31])+0
  Such that:it(23) =< V3
it([31]) =< V3+1

#### Cost of loops [24,25,26] 

 * loop 24:eqZList(V,V3,Out) -> [eqZList(V',V3',Out'),eqZList(V'2,V3'2,Out'2)] 
1
 * loop 25:eqZList(V,V3,Out) -> [eqZList(V',V3',Out'),eqZList(V'2,V3'2,Out'2)] 
1
 * loop 26:eqZList(V,V3,Out) -> [eqZList(V',V3',Out'),eqZList(V'2,V3'2,Out'2)] 
1
#### Cost of phase [24,25,26]:eqZList(V,V3,Out) -> [] 
1*it(24)+1*it(25)+1*it(26)+1*it([29])+1*it([30])+3*it([31])+0
  Such that:aux(3) =< V/2+1/2
aux(4) =< V/3+V3/3
aux(5) =< 2/5*V+2/5*V3
aux(6) =< V3
aux(7) =< V3+1
aux(8) =< V3/2+1/2
it([29]) =< aux(3)
it(26) =< aux(4)
it(24) =< aux(5)
it(25) =< aux(5)
it(26) =< aux(5)
it(25) =< aux(6)
it(26) =< aux(6)
it([30]) =< aux(6)
it([31]) =< aux(7)
it([30]) =< aux(8)
it(26) =< it([31])* (1/3)+aux(4)
it(24) =< it([31])* (1/5)+aux(5)
it(25) =< it([31])* (1/5)+aux(5)
it(26) =< it([31])* (1/5)+aux(5)

#### Cost of loops [27] 

 * loop 27:eqZList(V,V3,Out) -> [eqZList(V',V3',Out'),eqZList(V'2,V3'2,Out'2)] 
1
#### Cost of phase [27]:eqZList(V,V3,Out) -> [] 
1*it(27)+1*it([29])+1*it([30])+1*it([31])+5*s(1)+1*s(3)+1*s(4)+1*s(5)+1*s(6)+1*s(7)+0
  Such that:aux(11) =< V
aux(12) =< V+1
aux(13) =< V/2+1/2
aux(14) =< V/3+V3/3+2/3
aux(15) =< V3+1
aux(16) =< V3/2+1/2
it(27) =< aux(11)
it([29]) =< aux(11)
it([29]) =< aux(12)
it([30]) =< aux(12)
it([31]) =< aux(12)
it([29]) =< aux(13)
it([31]) =< aux(15)
s(1) =< aux(15)
it([30]) =< aux(16)
s(11) =< aux(15)* (1/2)
s(9) =< aux(14)* (6/5)
s(6) =< aux(13)
s(5) =< aux(14)
s(3) =< s(9)
s(4) =< s(9)
s(5) =< s(9)
s(4) =< aux(15)
s(5) =< aux(15)
s(7) =< aux(15)
s(7) =< s(11)
s(5) =< s(1)* (1/3)+aux(14)
s(3) =< s(1)* (1/5)+s(9)
s(4) =< s(1)* (1/5)+s(9)
s(5) =< s(1)* (1/5)+s(9)

#### Cost of chains of eqZList(V,V3,Out):
* Chain [31]: 1
  with precondition: [V=0,V3=0,Out=2] 

* Chain [30]: 1
  with precondition: [V=0,Out=1,V3>=1] 

* Chain [29]: 1
  with precondition: [V3=0,Out=1,V>=1] 

* Chain [28]: 0
  with precondition: [Out=0,V>=0,V3>=0] 

* Chain [multiple([27],[[multiple([24,25,26],[[multiple([23],[[31]])],[31],[30],[29]])],[multiple([23],[[31]])],[31],[30],[29],[28]])]: 1*it(27)+1*it([29])+1*it([30])+1*it([31])+5*s(1)+1*s(3)+1*s(4)+1*s(5)+1*s(6)+1*s(7)+0
  Such that:aux(11) =< V
aux(12) =< V+1
aux(13) =< V/2+1/2
aux(14) =< V/3+V3/3+2/3
aux(15) =< V3+1
aux(16) =< V3/2+1/2
it(27) =< aux(11)
it([29]) =< aux(11)
it([29]) =< aux(12)
it([30]) =< aux(12)
it([31]) =< aux(12)
it([29]) =< aux(13)
it([31]) =< aux(15)
s(1) =< aux(15)
it([30]) =< aux(16)
s(11) =< aux(15)* (1/2)
s(9) =< aux(14)* (6/5)
s(6) =< aux(13)
s(5) =< aux(14)
s(3) =< s(9)
s(4) =< s(9)
s(5) =< s(9)
s(4) =< aux(15)
s(5) =< aux(15)
s(7) =< aux(15)
s(7) =< s(11)
s(5) =< s(1)* (1/3)+aux(14)
s(3) =< s(1)* (1/5)+s(9)
s(4) =< s(1)* (1/5)+s(9)
s(5) =< s(1)* (1/5)+s(9)

  with precondition: [Out=0,V>=1,V3>=1] 

* Chain [multiple([24,25,26],[[multiple([23],[[31]])],[31],[30],[29]])]: 1*it(24)+1*it(25)+1*it(26)+1*it([29])+1*it([30])+3*it([31])+0
  Such that:aux(3) =< V/2+1/2
aux(4) =< V/3+V3/3
aux(5) =< 2/5*V+2/5*V3
aux(6) =< V3
aux(7) =< V3+1
aux(8) =< V3/2+1/2
it([29]) =< aux(3)
it(26) =< aux(4)
it(24) =< aux(5)
it(25) =< aux(5)
it(26) =< aux(5)
it(25) =< aux(6)
it(26) =< aux(6)
it([30]) =< aux(6)
it([31]) =< aux(7)
it([30]) =< aux(8)
it(26) =< it([31])* (1/3)+aux(4)
it(24) =< it([31])* (1/5)+aux(5)
it(25) =< it([31])* (1/5)+aux(5)
it(26) =< it([31])* (1/5)+aux(5)

  with precondition: [Out=1,V>=1,V3>=1,V+V3>=3] 

* Chain [multiple([23],[[31]])]: 1*it(23)+1*it([31])+0
  Such that:it(23) =< V3
it([31]) =< V3+1

  with precondition: [Out=2,V=V3,V>=1] 


#### Cost of loops [32] 

 * loop 32:f(V,Out) -> [f(V',Out'),f(V'2,Out'2)] 
1
#### Cost of phase [32]:f(V,Out) -> [] 
1*it(32)+1*it([33])+0
  Such that:it(32) =< V
it([33]) =< V+1

#### Cost of chains of f(V,Out):
* Chain [33]: 1
  with precondition: [Out=0,V>=0] 

* Chain [multiple([32],[[33]])]: 1*it(32)+1*it([33])+0
  Such that:it(32) =< V
it([33]) =< V+1

  with precondition: [Out>=1,V>=Out] 


#### Cost of chains of first(V,Out):
* Chain [35]: 0
  with precondition: [Out=0,V>=0] 

* Chain [34]: 1
  with precondition: [Out>=0,V>=Out+1] 


#### Cost of chains of second(V,Out):
* Chain [37]: 0
  with precondition: [Out=0,V>=0] 

* Chain [36]: 1
  with precondition: [Out>=0,V>=Out+1] 


#### Cost of chains of start(V,V3):
* Chain [44]: 2*s(33)+1*s(34)+1*s(42)+1*s(43)+1*s(44)+8*s(45)+2*s(48)+1*s(49)+1*s(50)+1*s(51)+1*s(52)+1*s(60)+1*s(61)+1*s(62)+1*s(63)+1
  Such that:s(54) =< V/3+V3/3
s(38) =< V/3+V3/3+2/3
s(55) =< 2/5*V+2/5*V3
s(56) =< V3
aux(17) =< V
aux(18) =< V+1
aux(19) =< V/2+1/2
aux(20) =< V3+1
aux(21) =< V3/2+1/2
s(33) =< aux(17)
s(34) =< aux(18)
s(42) =< aux(17)
s(42) =< aux(18)
s(43) =< aux(18)
s(44) =< aux(18)
s(42) =< aux(19)
s(44) =< aux(20)
s(45) =< aux(20)
s(43) =< aux(21)
s(46) =< aux(20)* (1/2)
s(47) =< s(38)* (6/5)
s(48) =< aux(19)
s(49) =< s(38)
s(50) =< s(47)
s(51) =< s(47)
s(49) =< s(47)
s(51) =< aux(20)
s(49) =< aux(20)
s(52) =< aux(20)
s(52) =< s(46)
s(49) =< s(45)* (1/3)+s(38)
s(50) =< s(45)* (1/5)+s(47)
s(51) =< s(45)* (1/5)+s(47)
s(49) =< s(45)* (1/5)+s(47)
s(60) =< s(54)
s(61) =< s(55)
s(62) =< s(55)
s(60) =< s(55)
s(62) =< s(56)
s(60) =< s(56)
s(63) =< s(56)
s(63) =< aux(21)
s(60) =< s(45)* (1/3)+s(54)
s(61) =< s(45)* (1/5)+s(55)
s(62) =< s(45)* (1/5)+s(55)
s(60) =< s(45)* (1/5)+s(55)

  with precondition: [V>=0] 

* Chain [43]: 1
  with precondition: [V=0,V3>=1] 

* Chain [42]: 1*s(65)+1*s(66)+0
  Such that:s(65) =< V3
s(66) =< V3+1

  with precondition: [V=V3,V>=1] 

* Chain [41]: 0
  with precondition: [V=1,V3=2] 

* Chain [40]: 0
  with precondition: [V=2,V3=1] 

* Chain [39]: 0
  with precondition: [V=2,V3=2] 

* Chain [38]: 1
  with precondition: [V3=0,V>=1] 


Closed-form bounds of start(V,V3): 
-------------------------------------
* Chain [44] with precondition: [V>=0] 
    - Upper bound: 3*V+1+nat(V3)+ (3*V+3)+nat(V3+1)*9+nat(2/5*V+2/5*V3)*2+17/5*nat(V/3+V3/3+2/3)+ (V+1)+nat(V/3+V3/3) 
    - Complexity: n 
* Chain [43] with precondition: [V=0,V3>=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [42] with precondition: [V=V3,V>=1] 
    - Upper bound: 2*V3+1 
    - Complexity: n 
* Chain [41] with precondition: [V=1,V3=2] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [40] with precondition: [V=2,V3=1] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [39] with precondition: [V=2,V3=2] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [38] with precondition: [V3=0,V>=1] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V,V3): max([1,6*V+4+nat(V3+1)*8+nat(2/5*V+2/5*V3)*2+17/5*nat(V/3+V3/3+2/3)+ (V+1)+nat(V/3+V3/3)+ (nat(V3+1)+nat(V3))]) 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 12 ms.
* Invariants computed in 62 ms.
   - Backward Invariants 13 ms.
   - Transitive Invariants 11 ms.
* Refinement performed in 85 ms.
* Termination proved in 13 ms.
* Upper bounds computed in 200 ms.
   - Equation cost structures 34 ms.
   - Phase cost structures 159 ms.
   - Chain cost structures 0 ms.
   - Solving cost expressions 4 ms.
* Total analysis performed in 401 ms.


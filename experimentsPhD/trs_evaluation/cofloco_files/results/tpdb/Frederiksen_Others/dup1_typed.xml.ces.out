
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive [multiple] : [a/3]
1. non_recursive  : [and/3]
2. recursive [non_tail,multiple] : [eqZList/3]
3. non_recursive  : [first/2]
4. non_recursive  : [second/2]
5. non_recursive  : [start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into a/3
1. SCC is partially evaluated into and/3
2. SCC is partially evaluated into eqZList/3
3. SCC is partially evaluated into first/2
4. SCC is partially evaluated into second/2
5. SCC is partially evaluated into start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations a/3 
* CE 8 is refined into CE [24] 
* CE 9 is refined into CE [25] 
* CE 7 is refined into CE [26] 


#### Refined cost equations a/3 
* CE 24: a(V1,V,Out) = 1
     [V>=0,Out=0,V1=0] 
* CE 25: a(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 26: a(V1,V,Out) = 1+ a(W1,V,X1)+ a(Y1,Z1,A2)
     [Y1>=0,W1>=0,V>=0,W1+Y1+1=Z1,X1+A2+1=Out,W1+Y1+1=V1] 

### Cost equations --> "Loop" of a/3 
* CEs [26] --> Loop 18 
* CEs [24,25] --> Loop 19 

#### Loops of a/3 
* Loop 18: a(V1,V,Out)->  a(V1',V,Out')  a(V1'2,V'2,Out'2)
                  [V1'2>=0,V1'>=0,V>=0,V1'+V1'2+1=V'2,Out=Out'+Out'2+1,V1'+V1'2+1=V1] 
* Loop 19: a(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR a(V1,V,Out) 
* RF of phase [18]: [V1]

#### Partial ranking functions of CR a(V1,V,Out) 
* Partial RF of phase [18]:
  - RF of loop [18:1,18:2]:
    V1


### Resulting Chains:a(V1,V,Out) 
* [19]
* [multiple([18],[[19]])]


### Merging Chains  a/3 into  External patterns of execution 
* [[19]] --> 1 
* [[multiple([18],[[19]])]] --> 2 


### Specialization of cost equations and/3 
* CE 23 is refined into CE [27] 
* CE 22 is refined into CE [28] 
* CE 20 is refined into CE [29] 
* CE 21 is refined into CE [30] 
* CE 19 is refined into CE [31] 


#### Refined cost equations and/3 
* CE 27: and(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 28: and(V1,V,Out) = 0
     [Out=2,V=2,V1=2] 
* CE 29: and(V1,V,Out) = 0
     [Out=1,V=1,V1=2] 
* CE 30: and(V1,V,Out) = 0
     [Out=1,V=2,V1=1] 
* CE 31: and(V1,V,Out) = 0
     [Out=1,V=1,V1=1] 

### Cost equations --> "Loop" of and/3 
* CEs [27] --> Loop 20 
* CEs [28] --> Loop 21 
* CEs [29] --> Loop 22 
* CEs [30] --> Loop 23 
* CEs [31] --> Loop 24 

#### Loops of and/3 
* Loop 20: and(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 21: and(V1,V,Out) [Out=2,V=2,V1=2] 
* Loop 22: and(V1,V,Out) [Out=1,V=1,V1=2] 
* Loop 23: and(V1,V,Out) [Out=1,V=2,V1=1] 
* Loop 24: and(V1,V,Out) [Out=1,V=1,V1=1] 

### Ranking functions of CR and(V1,V,Out) 

#### Partial ranking functions of CR and(V1,V,Out) 


### Resulting Chains:and(V1,V,Out) 
* [24]
* [23]
* [22]
* [21]
* [20]


### Merging Chains  and/3 into  External patterns of execution 
* [[24]] --> 1 
* [[23]] --> 2 
* [[22]] --> 3 
* [[21]] --> 4 
* [[20]] --> 5 


### Specialization of cost equations eqZList/3 
* CE 14 is refined into CE [32] 
* CE 11 is refined into CE [33] 
* CE 12 is refined into CE [34] 
* CE 13 is refined into CE [35] 
* CE 10 is refined into CE [36,37,38,39,40] 


#### Refined cost equations eqZList/3 
* CE 32: eqZList(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 33: eqZList(V1,V,Out) = 1
     [V1>=1,Out=1,V=0] 
* CE 34: eqZList(V1,V,Out) = 1
     [V>=1,Out=1,V1=0] 
* CE 35: eqZList(V1,V,Out) = 1
     [Out=2,V=0,V1=0] 
* CE 36: eqZList(V1,V,Out) = 1+ eqZList(W1,X1,Y1)+ eqZList(Z1,A2,B2)+ and(C2,D2,E2):1
     [A2>=0,Z1>=0,X1>=0,W1>=0,X1+A2+1=V,W1+Z1+1=V1,B2=1,Y1=1,E2=1,D2=1,C2=1,Out=1] 
* CE 37: eqZList(V1,V,Out) = 1+ eqZList(W1,X1,Y1)+ eqZList(Z1,A2,B2)+ and(C2,D2,E2):2
     [A2>=0,Z1>=0,X1>=0,W1>=0,X1+A2+1=V,W1+Z1+1=V1,B2=2,Y1=1,E2=1,D2=2,C2=1,Out=1] 
* CE 38: eqZList(V1,V,Out) = 1+ eqZList(W1,X1,Y1)+ eqZList(Z1,A2,B2)+ and(C2,D2,E2):3
     [A2>=0,Z1>=0,X1>=0,W1>=0,X1+A2+1=V,W1+Z1+1=V1,B2=1,Y1=2,E2=1,D2=1,C2=2,Out=1] 
* CE 39: eqZList(V1,V,Out) = 1+ eqZList(W1,X1,Y1)+ eqZList(Z1,A2,B2)+ and(C2,D2,E2):4
     [A2>=0,Z1>=0,X1>=0,W1>=0,X1+A2+1=V,W1+Z1+1=V1,B2=2,Y1=2,E2=2,D2=2,C2=2,Out=2] 
* CE 40: eqZList(V1,V,Out) = 1+ eqZList(W1,X1,Y1)+ eqZList(Z1,A2,B2)+ and(Y1,B2,C2):5
     [A2>=0,Z1>=0,X1>=0,W1>=0,B2>=0,Y1>=0,X1+A2+1=V,W1+Z1+1=V1,C2=0,Out=0] 

### Cost equations --> "Loop" of eqZList/3 
* CEs [39] --> Loop 25 
* CEs [38] --> Loop 26 
* CEs [37] --> Loop 27 
* CEs [36] --> Loop 28 
* CEs [40] --> Loop 29 
* CEs [32] --> Loop 30 
* CEs [33] --> Loop 31 
* CEs [34] --> Loop 32 
* CEs [35] --> Loop 33 

#### Loops of eqZList/3 
* Loop 25: eqZList(V1,V,Out)->  eqZList(V1',V',Out')  eqZList(V1'2,V'2,Out'2)
                  [V>=V'+1,V1>=V1'+1,V'>=0,V1'>=0,V'+V'2+1=V,V1'+V1'2+1=V1,Out'2=2,Out'=2,Out=2] 
* Loop 26: eqZList(V1,V,Out)->  eqZList(V1',V',Out')  eqZList(V1'2,V'2,Out'2)
                  [V>=V'+1,V1>=V1'+1,V'>=0,V1'>=0,V'+V'2+1=V,V1'+V1'2+1=V1,Out'2=1,Out'=2,Out=1] 
* Loop 27: eqZList(V1,V,Out)->  eqZList(V1',V',Out')  eqZList(V1'2,V'2,Out'2)
                  [V>=V'+1,V1>=V1'+1,V'>=0,V1'>=0,V'+V'2+1=V,V1'+V1'2+1=V1,Out'2=2,Out'=1,Out=1] 
* Loop 28: eqZList(V1,V,Out)->  eqZList(V1',V',Out')  eqZList(V1'2,V'2,Out'2)
                  [V>=V'+1,V1>=V1'+1,V'>=0,V1'>=0,V'+V'2+1=V,V1'+V1'2+1=V1,Out'2=1,Out'=1,Out=1] 
* Loop 29: eqZList(V1,V,Out)->  eqZList(V1',V',Out')  eqZList(V1'2,V'2,Out'2)
                  [V>=V'+1,V1>=V1'+1,Out'2>=0,Out'>=0,V'>=0,V1'>=0,V'+V'2+1=V,V1'+V1'2+1=V1,Out=0] 
* Loop 30: eqZList(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 31: eqZList(V1,V,Out) [V1>=1,Out=1,V=0] 
* Loop 32: eqZList(V1,V,Out) [V>=1,Out=1,V1=0] 
* Loop 33: eqZList(V1,V,Out) [Out=2,V=0,V1=0] 

### Ranking functions of CR eqZList(V1,V,Out) 
* RF of phase [25]: [V,V1]
* RF of phase [26,27,28]: [V,V1]
* RF of phase [29]: [V,V1]

#### Partial ranking functions of CR eqZList(V1,V,Out) 
* Partial RF of phase [25]:
  - RF of loop [25:1,25:2]:
    V
    V1
* Partial RF of phase [26,27,28]:
  - RF of loop [26:1,26:2,27:1,27:2,28:1,28:2]:
    V
    V1
* Partial RF of phase [29]:
  - RF of loop [29:1,29:2]:
    V
    V1


### Resulting Chains:eqZList(V1,V,Out) 
* [33]
* [32]
* [31]
* [30]
* [multiple([29],[[multiple([26,27,28],[[multiple([25],[[33]])],[33],[32],[31]])],[multiple([25],[[33]])],[33],[32],[31],[30]])]
* [multiple([26,27,28],[[multiple([25],[[33]])],[33],[32],[31]])]
* [multiple([25],[[33]])]


### Merging Chains  eqZList/3 into  External patterns of execution 
* [[33]] --> 1 
* [[32]] --> 2 
* [[31]] --> 3 
* [[30],[multiple([29],[[multiple([26,27,28],[[multiple([25],[[33]])],[33],[32],[31]])],[multiple([25],[[33]])],[33],[32],[31],[30]])]] --> 4 
* [[multiple([26,27,28],[[multiple([25],[[33]])],[33],[32],[31]])]] --> 5 
* [[multiple([25],[[33]])]] --> 6 


### Specialization of cost equations first/2 
* CE 17 is refined into CE [41] 
* CE 18 is refined into CE [42] 


#### Refined cost equations first/2 
* CE 41: first(V1,Out) = 1
     [V1>=Out+1,Out>=0] 
* CE 42: first(V1,Out) = 0
     [V1>=0,Out=0] 

### Cost equations --> "Loop" of first/2 
* CEs [41] --> Loop 34 
* CEs [42] --> Loop 35 

#### Loops of first/2 
* Loop 34: first(V1,Out) [V1>=Out+1,Out>=0] 
* Loop 35: first(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR first(V1,Out) 

#### Partial ranking functions of CR first(V1,Out) 


### Resulting Chains:first(V1,Out) 
* [35]
* [34]


### Merging Chains  first/2 into  External patterns of execution 
* [[35]] --> 1 
* [[34]] --> 2 


### Specialization of cost equations second/2 
* CE 15 is refined into CE [43] 
* CE 16 is refined into CE [44] 


#### Refined cost equations second/2 
* CE 43: second(V1,Out) = 1
     [V1>=Out+1,Out>=0] 
* CE 44: second(V1,Out) = 0
     [V1>=0,Out=0] 

### Cost equations --> "Loop" of second/2 
* CEs [43] --> Loop 36 
* CEs [44] --> Loop 37 

#### Loops of second/2 
* Loop 36: second(V1,Out) [V1>=Out+1,Out>=0] 
* Loop 37: second(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR second(V1,Out) 

#### Partial ranking functions of CR second(V1,Out) 


### Resulting Chains:second(V1,Out) 
* [37]
* [36]


### Merging Chains  second/2 into  External patterns of execution 
* [[37]] --> 1 
* [[36]] --> 2 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [45,46] 
* CE 3 is refined into CE [47,48,49,50,51,52] 
* CE 4 is refined into CE [53,54] 
* CE 5 is refined into CE [55,56] 
* CE 6 is refined into CE [57,58,59,60,61] 


#### Refined cost equations start/2 
* CE 45: start(V1,V) = 0+ a(V1,V,W1):1
     [V>=0,V1>=0,W1=0] 
* CE 46: start(V1,V) = 0+ a(V1,V,W1):2
     [V1>=W1,W1>=1,V>=0] 
* CE 47: start(V1,V) = 0+ eqZList(W1,X1,Y1):1
     [Y1=2,X1=0,W1=0,V=0,V1=0] 
* CE 48: start(V1,V) = 0+ eqZList(W1,V,X1):2
     [V>=1,X1=1,W1=0,V1=0] 
* CE 49: start(V1,V) = 0+ eqZList(V1,W1,X1):3
     [V1>=1,X1=1,W1=0,V=0] 
* CE 50: start(V1,V) = 0+ eqZList(V1,V,W1):4
     [V>=0,V1>=0,W1=0] 
* CE 51: start(V1,V) = 0+ eqZList(V1,V,W1):5
     [V1+V>=3,V>=1,V1>=1,W1=1] 
* CE 52: start(A,A) = 0+ eqZList(A,A,B):6
     [A>=1,B=2] 
* CE 53: start(V1,V) = 0+ second(V1,W1):1
     [V1>=0,W1=0] 
* CE 54: start(V1,V) = 0+ second(V1,W1):2
     [V1>=W1+1,W1>=0] 
* CE 55: start(V1,V) = 0+ first(V1,W1):1
     [V1>=0,W1=0] 
* CE 56: start(V1,V) = 0+ first(V1,W1):2
     [V1>=W1+1,W1>=0] 
* CE 57: start(V1,V) = 0+ and(W1,X1,Y1):1
     [Y1=1,X1=1,W1=1,V=1,V1=1] 
* CE 58: start(V1,V) = 0+ and(W1,X1,Y1):2
     [Y1=1,X1=2,W1=1,V=2,V1=1] 
* CE 59: start(V1,V) = 0+ and(W1,X1,Y1):3
     [Y1=1,X1=1,W1=2,V=1,V1=2] 
* CE 60: start(V1,V) = 0+ and(W1,X1,Y1):4
     [Y1=2,X1=2,W1=2,V=2,V1=2] 
* CE 61: start(V1,V) = 0+ and(V1,V,W1):5
     [V>=0,V1>=0,W1=0] 

### Cost equations --> "Loop" of start/2 
* CEs [49] --> Loop 38 
* CEs [60] --> Loop 39 
* CEs [59] --> Loop 40 
* CEs [58] --> Loop 41 
* CEs [52,57] --> Loop 42 
* CEs [48] --> Loop 43 
* CEs [45,46,47,50,51,53,54,55,56,61] --> Loop 44 

#### Loops of start/2 
* Loop 38: start(V1,V) [V1>=1,V=0] 
* Loop 39: start(V1,V) [V=2,V1=2] 
* Loop 40: start(V1,V) [V=1,V1=2] 
* Loop 41: start(V1,V) [V=2,V1=1] 
* Loop 42: start(A,A) [A>=1] 
* Loop 43: start(V1,V) [V>=1,V1=0] 
* Loop 44: start(V1,V) [V1>=0] 

### Ranking functions of CR start(V1,V) 

#### Partial ranking functions of CR start(V1,V) 


### Resulting Chains:start(V1,V) 
* [44]
* [43]
* [42]
* [41]
* [40]
* [39]
* [38]


### Merging Chains  start/2 into  External patterns of execution 
* [[43],[44]] --> 1 
* [[41]] --> 2 
* [[40]] --> 3 
* [[39],[42]] --> 4 
* [[38]] --> 5 


Computing Bounds
=====================================

#### Cost of loops [18] 

 * loop 18:a(V1,V,Out) -> [a(V1',V',Out'),a(V1'2,V'2,Out'2)] 
1
#### Cost of phase [18]:a(V1,V,Out) -> [] 
1*it(18)+1*it([19])+0
  Such that:it(18) =< V1
it([19]) =< V1+1

#### Cost of chains of a(V1,V,Out):
* Chain [19]: 1
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [multiple([18],[[19]])]: 1*it(18)+1*it([19])+0
  Such that:it(18) =< V1
it([19]) =< V1+1

  with precondition: [V>=0,Out>=1,V1>=Out] 


#### Cost of chains of and(V1,V,Out):
* Chain [24]: 0
  with precondition: [V1=1,V=1,Out=1] 

* Chain [23]: 0
  with precondition: [V1=1,V=2,Out=1] 

* Chain [22]: 0
  with precondition: [V1=2,V=1,Out=1] 

* Chain [21]: 0
  with precondition: [V1=2,V=2,Out=2] 

* Chain [20]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [25] 

 * loop 25:eqZList(V1,V,Out) -> [eqZList(V1',V',Out'),eqZList(V1'2,V'2,Out'2)] 
1
#### Cost of phase [25]:eqZList(V1,V,Out) -> [] 
1*it(25)+1*it([33])+0
  Such that:it(25) =< V
it([33]) =< V+1

#### Cost of loops [26,27,28] 

 * loop 26:eqZList(V1,V,Out) -> [eqZList(V1',V',Out'),eqZList(V1'2,V'2,Out'2)] 
1
 * loop 27:eqZList(V1,V,Out) -> [eqZList(V1',V',Out'),eqZList(V1'2,V'2,Out'2)] 
1
 * loop 28:eqZList(V1,V,Out) -> [eqZList(V1',V',Out'),eqZList(V1'2,V'2,Out'2)] 
1
#### Cost of phase [26,27,28]:eqZList(V1,V,Out) -> [] 
1*it(26)+1*it(27)+1*it(28)+1*it([31])+1*it([32])+3*it([33])+0
  Such that:aux(3) =< V1/2+1/2
aux(4) =< V1/3+V/3
aux(5) =< 2/5*V1+2/5*V
aux(6) =< V
aux(7) =< V+1
aux(8) =< V/2+1/2
it([31]) =< aux(3)
it(28) =< aux(4)
it(26) =< aux(5)
it(27) =< aux(5)
it(28) =< aux(5)
it(27) =< aux(6)
it(28) =< aux(6)
it([32]) =< aux(6)
it([33]) =< aux(7)
it([32]) =< aux(8)
it(28) =< it([33])* (1/3)+aux(4)
it(26) =< it([33])* (1/5)+aux(5)
it(27) =< it([33])* (1/5)+aux(5)
it(28) =< it([33])* (1/5)+aux(5)

#### Cost of loops [29] 

 * loop 29:eqZList(V1,V,Out) -> [eqZList(V1',V',Out'),eqZList(V1'2,V'2,Out'2)] 
1
#### Cost of phase [29]:eqZList(V1,V,Out) -> [] 
1*it(29)+1*it([31])+1*it([32])+1*it([33])+5*s(1)+1*s(3)+1*s(4)+1*s(5)+1*s(6)+1*s(7)+0
  Such that:aux(11) =< V1
aux(12) =< V1+1
aux(13) =< V1/2+1/2
aux(14) =< V1/3+V/3+2/3
aux(15) =< V+1
aux(16) =< V/2+1/2
it(29) =< aux(11)
it([31]) =< aux(11)
it([31]) =< aux(12)
it([32]) =< aux(12)
it([33]) =< aux(12)
it([31]) =< aux(13)
it([33]) =< aux(15)
s(1) =< aux(15)
it([32]) =< aux(16)
s(11) =< aux(15)* (1/2)
s(9) =< aux(14)* (6/5)
s(6) =< aux(13)
s(5) =< aux(14)
s(3) =< s(9)
s(4) =< s(9)
s(5) =< s(9)
s(4) =< aux(15)
s(5) =< aux(15)
s(7) =< aux(15)
s(7) =< s(11)
s(5) =< s(1)* (1/3)+aux(14)
s(3) =< s(1)* (1/5)+s(9)
s(4) =< s(1)* (1/5)+s(9)
s(5) =< s(1)* (1/5)+s(9)

#### Cost of chains of eqZList(V1,V,Out):
* Chain [33]: 1
  with precondition: [V1=0,V=0,Out=2] 

* Chain [32]: 1
  with precondition: [V1=0,Out=1,V>=1] 

* Chain [31]: 1
  with precondition: [V=0,Out=1,V1>=1] 

* Chain [30]: 0
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [multiple([29],[[multiple([26,27,28],[[multiple([25],[[33]])],[33],[32],[31]])],[multiple([25],[[33]])],[33],[32],[31],[30]])]: 1*it(29)+1*it([31])+1*it([32])+1*it([33])+5*s(1)+1*s(3)+1*s(4)+1*s(5)+1*s(6)+1*s(7)+0
  Such that:aux(11) =< V1
aux(12) =< V1+1
aux(13) =< V1/2+1/2
aux(14) =< V1/3+V/3+2/3
aux(15) =< V+1
aux(16) =< V/2+1/2
it(29) =< aux(11)
it([31]) =< aux(11)
it([31]) =< aux(12)
it([32]) =< aux(12)
it([33]) =< aux(12)
it([31]) =< aux(13)
it([33]) =< aux(15)
s(1) =< aux(15)
it([32]) =< aux(16)
s(11) =< aux(15)* (1/2)
s(9) =< aux(14)* (6/5)
s(6) =< aux(13)
s(5) =< aux(14)
s(3) =< s(9)
s(4) =< s(9)
s(5) =< s(9)
s(4) =< aux(15)
s(5) =< aux(15)
s(7) =< aux(15)
s(7) =< s(11)
s(5) =< s(1)* (1/3)+aux(14)
s(3) =< s(1)* (1/5)+s(9)
s(4) =< s(1)* (1/5)+s(9)
s(5) =< s(1)* (1/5)+s(9)

  with precondition: [Out=0,V1>=1,V>=1] 

* Chain [multiple([26,27,28],[[multiple([25],[[33]])],[33],[32],[31]])]: 1*it(26)+1*it(27)+1*it(28)+1*it([31])+1*it([32])+3*it([33])+0
  Such that:aux(3) =< V1/2+1/2
aux(4) =< V1/3+V/3
aux(5) =< 2/5*V1+2/5*V
aux(6) =< V
aux(7) =< V+1
aux(8) =< V/2+1/2
it([31]) =< aux(3)
it(28) =< aux(4)
it(26) =< aux(5)
it(27) =< aux(5)
it(28) =< aux(5)
it(27) =< aux(6)
it(28) =< aux(6)
it([32]) =< aux(6)
it([33]) =< aux(7)
it([32]) =< aux(8)
it(28) =< it([33])* (1/3)+aux(4)
it(26) =< it([33])* (1/5)+aux(5)
it(27) =< it([33])* (1/5)+aux(5)
it(28) =< it([33])* (1/5)+aux(5)

  with precondition: [Out=1,V1>=1,V>=1,V+V1>=3] 

* Chain [multiple([25],[[33]])]: 1*it(25)+1*it([33])+0
  Such that:it(25) =< V
it([33]) =< V+1

  with precondition: [Out=2,V1=V,V1>=1] 


#### Cost of chains of first(V1,Out):
* Chain [35]: 0
  with precondition: [Out=0,V1>=0] 

* Chain [34]: 1
  with precondition: [Out>=0,V1>=Out+1] 


#### Cost of chains of second(V1,Out):
* Chain [37]: 0
  with precondition: [Out=0,V1>=0] 

* Chain [36]: 1
  with precondition: [Out>=0,V1>=Out+1] 


#### Cost of chains of start(V1,V):
* Chain [44]: 2*s(33)+1*s(34)+1*s(42)+1*s(43)+1*s(44)+8*s(45)+2*s(48)+1*s(49)+1*s(50)+1*s(51)+1*s(52)+1*s(60)+1*s(61)+1*s(62)+1*s(63)+1
  Such that:s(54) =< V1/3+V/3
s(38) =< V1/3+V/3+2/3
s(55) =< 2/5*V1+2/5*V
s(56) =< V
aux(17) =< V1
aux(18) =< V1+1
aux(19) =< V1/2+1/2
aux(20) =< V+1
aux(21) =< V/2+1/2
s(33) =< aux(17)
s(34) =< aux(18)
s(42) =< aux(17)
s(42) =< aux(18)
s(43) =< aux(18)
s(44) =< aux(18)
s(42) =< aux(19)
s(44) =< aux(20)
s(45) =< aux(20)
s(43) =< aux(21)
s(46) =< aux(20)* (1/2)
s(47) =< s(38)* (6/5)
s(48) =< aux(19)
s(49) =< s(38)
s(50) =< s(47)
s(51) =< s(47)
s(49) =< s(47)
s(51) =< aux(20)
s(49) =< aux(20)
s(52) =< aux(20)
s(52) =< s(46)
s(49) =< s(45)* (1/3)+s(38)
s(50) =< s(45)* (1/5)+s(47)
s(51) =< s(45)* (1/5)+s(47)
s(49) =< s(45)* (1/5)+s(47)
s(60) =< s(54)
s(61) =< s(55)
s(62) =< s(55)
s(60) =< s(55)
s(62) =< s(56)
s(60) =< s(56)
s(63) =< s(56)
s(63) =< aux(21)
s(60) =< s(45)* (1/3)+s(54)
s(61) =< s(45)* (1/5)+s(55)
s(62) =< s(45)* (1/5)+s(55)
s(60) =< s(45)* (1/5)+s(55)

  with precondition: [V1>=0] 

* Chain [43]: 1
  with precondition: [V1=0,V>=1] 

* Chain [42]: 1*s(65)+1*s(66)+0
  Such that:s(65) =< V
s(66) =< V+1

  with precondition: [V1=V,V1>=1] 

* Chain [41]: 0
  with precondition: [V1=1,V=2] 

* Chain [40]: 0
  with precondition: [V1=2,V=1] 

* Chain [39]: 0
  with precondition: [V1=2,V=2] 

* Chain [38]: 1
  with precondition: [V=0,V1>=1] 


Closed-form bounds of start(V1,V): 
-------------------------------------
* Chain [44] with precondition: [V1>=0] 
    - Upper bound: 3*V1+1+nat(V)+ (3*V1+3)+nat(V+1)*9+nat(2/5*V1+2/5*V)*2+17/5*nat(V1/3+V/3+2/3)+ (V1+1)+nat(V1/3+V/3) 
    - Complexity: n 
* Chain [43] with precondition: [V1=0,V>=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [42] with precondition: [V1=V,V1>=1] 
    - Upper bound: 2*V+1 
    - Complexity: n 
* Chain [41] with precondition: [V1=1,V=2] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [40] with precondition: [V1=2,V=1] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [39] with precondition: [V1=2,V=2] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [38] with precondition: [V=0,V1>=1] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V1,V): max([1,6*V1+4+nat(V+1)*8+nat(2/5*V1+2/5*V)*2+17/5*nat(V1/3+V/3+2/3)+ (V1+1)+nat(V1/3+V/3)+ (nat(V+1)+nat(V))]) 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 13 ms.
* Invariants computed in 187 ms.
   - Backward Invariants 44 ms.
   - Transitive Invariants 31 ms.
* Refinement performed in 210 ms.
* Termination proved in 40 ms.
* Upper bounds computed in 656 ms.
   - Equation cost structures 119 ms.
   - Phase cost structures 524 ms.
   - Chain cost structures 0 ms.
   - Solving cost expressions 14 ms.
* Total analysis performed in 1142 ms.


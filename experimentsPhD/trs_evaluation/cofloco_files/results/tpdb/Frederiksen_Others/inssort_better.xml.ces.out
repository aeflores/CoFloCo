
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [lt/3]
1. recursive  : [fun/4,insert/3]
2. recursive  : [isort/3]
3. non_recursive  : [inssort/2]
4. non_recursive  : [start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into lt/3
1. SCC is partially evaluated into insert/3
2. SCC is partially evaluated into isort/3
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations lt/3 
* CE 19 is refined into CE [20] 
* CE 18 is refined into CE [21] 
* CE 17 is refined into CE [22] 
* CE 16 is refined into CE [23] 


#### Refined cost equations lt/3 
* CE 20: lt(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 21: lt(V1,V,Out) = 0
     [V1>=0,Out=1,V=0] 
* CE 22: lt(V1,V,Out) = 0
     [V>=1,Out=2,V1=0] 
* CE 23: lt(V1,V,Out) = 0+ lt(W1,X1,Out)
     [X1>=0,W1>=0,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of lt/3 
* CEs [23] --> Loop 13 
* CEs [20] --> Loop 14 
* CEs [21] --> Loop 15 
* CEs [22] --> Loop 16 

#### Loops of lt/3 
* Loop 13: lt(V1,V,Out)->  lt(V1',V',Out)
                  [V'>=0,V1'>=0,V'+1=V,V1'+1=V1] 
* Loop 14: lt(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 15: lt(V1,V,Out) [V1>=0,Out=1,V=0] 
* Loop 16: lt(V1,V,Out) [V>=1,Out=2,V1=0] 

### Ranking functions of CR lt(V1,V,Out) 
* RF of phase [13]: [V,V1]

#### Partial ranking functions of CR lt(V1,V,Out) 
* Partial RF of phase [13]:
  - RF of loop [13:1]:
    V
    V1


### Resulting Chains:lt(V1,V,Out) 
* [[13],16]
* [[13],15]
* [[13],14]
* [16]
* [15]
* [14]


### Merging Chains  lt/3 into  External patterns of execution 
* [[16]] --> 1 
* [[15]] --> 2 
* [[14],[14,[13]]] --> 3 
* [[15,[13]]] --> 4 
* [[16,[13]]] --> 5 


### Specialization of cost equations insert/3 
* CE 9 is refined into CE [24,25] 
* CE 8 is refined into CE [26,27,28,29,30] 
* CE 12 is refined into CE [31] 
* CE 11 is refined into CE [32] 
* CE 10 is refined into CE [33,34] 


#### Refined cost equations insert/3 
* CE 24: insert(V1,V,Out) = 1+ lt(W1,X1,Y1):1
     [V>=X1+1,X1>=1,V+1=Out,Y1=2,W1=0,V1=0] 
* CE 25: insert(V1,V,Out) = 1+ lt(V1,W1,X1):5
     [V>=W1+1,W1>=V1+1,V1>=1,V1+V+1=Out,X1=2] 
* CE 26: insert(V1,V,Out) = 1+ lt(W1,X1,Y1):1
     [V>=X1+1,X1>=1,Y1=2,W1=0,Out=0,V1=0] 
* CE 27: insert(V1,V,Out) = 1+ lt(V1,W1,X1):2
     [V1>=0,V>=1,X1=1,W1=0,Out=0] 
* CE 28: insert(V1,V,Out) = 1+ lt(V1,W1,X1):3
     [V>=W1+1,W1>=0,V1>=0,X1=0,Out=0] 
* CE 29: insert(V1,V,Out) = 1+ lt(V1,W1,X1):4
     [V1>=W1,V>=W1+1,W1>=1,X1=1,Out=0] 
* CE 30: insert(V1,V,Out) = 1+ lt(V1,W1,X1):5
     [V>=W1+1,W1>=V1+1,V1>=1,X1=2,Out=0] 
* CE 31: insert(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 32: insert(V1,V,Out) = 1
     [V1>=0,V1+1=Out,V=0] 
* CE 33: insert(V1,V,Out) = 1+ lt(V1,W1,X1):2+ insert(V1,Y1,Z1)
     [V>=Y1+1,Y1>=0,V1>=0,V+Z1=Out+Y1,X1=1,W1=0] 
* CE 34: insert(V1,V,Out) = 1+ lt(V1,W1,X1):4+ insert(V1,Y1,Z1)
     [V>=Y1+1,V1>=W1,V>=W1+1,Y1>=0,W1>=1,V+Z1=Out+Y1,X1=1] 

### Cost equations --> "Loop" of insert/3 
* CEs [33,34] --> Loop 17 
* CEs [25] --> Loop 18 
* CEs [32] --> Loop 19 
* CEs [24] --> Loop 20 
* CEs [26,27,28,29,30,31] --> Loop 21 

#### Loops of insert/3 
* Loop 17: insert(V1,V,Out)->  insert(V1,V',Out')
                  [V>=V'+1,V'>=0,V1>=0,V+Out'=Out+V'] 
* Loop 18: insert(V1,V,Out) [V>=V1+2,V1>=1,V1+V+1=Out] 
* Loop 19: insert(V1,V,Out) [V1>=0,V1+1=Out,V=0] 
* Loop 20: insert(V1,V,Out) [V>=2,V+1=Out,V1=0] 
* Loop 21: insert(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR insert(V1,V,Out) 
* RF of phase [17]: [V]

#### Partial ranking functions of CR insert(V1,V,Out) 
* Partial RF of phase [17]:
  - RF of loop [17:1]:
    V


### Resulting Chains:insert(V1,V,Out) 
* [[17],21]
* [[17],20]
* [[17],19]
* [[17],18]
* [21]
* [20]
* [19]
* [18]


### Merging Chains  insert/3 into  External patterns of execution 
* [[18],[20],[18,[17]],[19,[17]],[20,[17]]] --> 1 
* [[19]] --> 2 
* [[21]] --> 3 
* [[21,[17]]] --> 4 


### Specialization of cost equations isort/3 
* CE 15 is refined into CE [35] 
* CE 14 is refined into CE [36] 
* CE 13 is refined into CE [37,38,39,40] 


#### Refined cost equations isort/3 
* CE 35: isort(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 36: isort(A,B,B) = 1
     [B>=0,A=0] 
* CE 37: isort(V1,V,Out) = 1+ insert(W1,X1,Y1):1+ isort(Z1,Y1,Out)
     [Y1>=W1+2,Z1>=0,W1>=0,Y1=W1+X1+1,Y1=V+W1+1,W1+Z1+1=V1] 
* CE 38: isort(V1,V,Out) = 1+ insert(W1,X1,Y1):2+ isort(Z1,Y1,Out)
     [Z1>=0,Y1>=1,Y1+Z1=V1,Y1=W1+1,X1=0,V=0] 
* CE 39: isort(V1,V,Out) = 1+ insert(W1,V,X1):3+ isort(Y1,Z1,Out)
     [Y1>=0,V>=0,W1>=0,W1+Y1+1=V1,Z1=0,X1=0] 
* CE 40: isort(V1,V,Out) = 1+ insert(W1,V,X1):4+ isort(Y1,X1,Out)
     [V>=X1,Y1>=0,X1>=1,W1>=0,W1+Y1+1=V1] 

### Cost equations --> "Loop" of isort/3 
* CEs [40] --> Loop 22 
* CEs [37] --> Loop 23 
* CEs [39] --> Loop 24 
* CEs [38] --> Loop 25 
* CEs [35] --> Loop 26 
* CEs [36] --> Loop 27 

#### Loops of isort/3 
* Loop 22: isort(V1,V,Out)->  isort(V1',V',Out)
                  [V>=V',V1>=V1'+1,V'>=1,V1'>=0] 
* Loop 23: isort(V1,V,Out)->  isort(V1',V',Out)
                  [V1>=V1'+1,V1'>=0,V>=1,V1+V=V1'+V'] 
* Loop 24: isort(V1,V,Out)->  isort(V1',V',Out)
                  [V1>=V1'+1,V1'>=0,V>=0,V'=0] 
* Loop 25: isort(V1,V,Out)->  isort(V1',V',Out)
                  [V1>=V1'+1,V1'>=0,V1=V1'+V',V=0] 
* Loop 26: isort(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 27: isort(A,B,B) [B>=0,A=0] 

### Ranking functions of CR isort(V1,V,Out) 
* RF of phase [22,23,24,25]: [V1]

#### Partial ranking functions of CR isort(V1,V,Out) 
* Partial RF of phase [22,23,24,25]:
  - RF of loop [22:1,23:1,24:1,25:1]:
    V1
  - RF of loop [25:1]:
    -V+1 depends on loops [22:1,24:1] 


### Resulting Chains:isort(V1,V,Out) 
* [[22,23,24,25],27]
* [[22,23,24,25],26]
* [27]
* [26]


### Merging Chains  isort/3 into  External patterns of execution 
* [[27]] --> 1 
* [[26],[26,[22,23,24,25]]] --> 2 
* [[27,[22,23,24,25]]] --> 3 


### Specialization of cost equations start/3 
* CE 2 is refined into CE [41] 
* CE 3 is refined into CE [42,43,44,45] 
* CE 4 is refined into CE [46,47,48] 
* CE 5 is refined into CE [49,50,51,52] 
* CE 6 is refined into CE [53,54,55] 
* CE 7 is refined into CE [56,57,58,59,60] 


#### Refined cost equations start/3 
* CE 41: start(V1,V,V15) = 0
     [V15>=0,V>=0,V1>=0] 
* CE 42: start(V1,V,V15) = 0+ insert(V,W15,X15):1
     [V+V15>=X15,X15>=V+2,V>=0,X15=V+W15+1,V1=1] 
* CE 43: start(V1,V,V15) = 0+ insert(W15,X15,Y15):2
     [Y15>=1,V15>=1,Y15=W15+1,Y15=V+1,X15=0,V1=1] 
* CE 44: start(V1,V,V15) = 0+ insert(V,W15,X15):3
     [V15>=W15+1,W15>=0,V>=0,X15=0,V1=1] 
* CE 45: start(V1,V,V15) = 0+ insert(V,W15,X15):4
     [W15>=X15,V15>=W15+1,X15>=1,V>=0,V1=1] 
* CE 46: start(V1,V,V15) = 0+ isort(W15,V,V):1
     [V>=0,W15=0,V1=0] 
* CE 47: start(V1,V,V15) = 0+ isort(V1,V,W15):2
     [V>=0,V1>=0,W15=0] 
* CE 48: start(V1,V,V15) = 0+ isort(V1,V,W15):3
     [V1+V>=W15,W15>=0,V>=0,V1>=1] 
* CE 49: start(V1,V,V15) = 0+ insert(V1,W15,X15):1
     [X15>=V1+2,V1>=0,X15=V1+W15+1,X15=V1+V+1] 
* CE 50: start(V1,V,V15) = 0+ insert(W15,X15,Y15):2
     [Y15>=1,Y15=W15+1,Y15=V1+1,X15=0,V=0] 
* CE 51: start(V1,V,V15) = 0+ insert(V1,V,W15):3
     [V>=0,V1>=0,W15=0] 
* CE 52: start(V1,V,V15) = 0+ insert(V1,V,W15):4
     [V>=W15,W15>=1,V1>=0] 
* CE 53: start(V1,V,V15) = 1+ isort(W15,X15,Y15):1
     [Y15=0,X15=0,W15=0,V1=0] 
* CE 54: start(V1,V,V15) = 1+ isort(V1,W15,X15):2
     [V1>=0,X15=0,W15=0] 
* CE 55: start(V1,V,V15) = 1+ isort(V1,W15,X15):3
     [V1>=X15,X15>=0,V1>=1,W15=0] 
* CE 56: start(V1,V,V15) = 0+ lt(W15,V,X15):1
     [V>=1,X15=2,W15=0,V1=0] 
* CE 57: start(V1,V,V15) = 0+ lt(V1,W15,X15):2
     [V1>=0,X15=1,W15=0,V=0] 
* CE 58: start(V1,V,V15) = 0+ lt(V1,V,W15):3
     [V>=0,V1>=0,W15=0] 
* CE 59: start(V1,V,V15) = 0+ lt(V1,V,W15):4
     [V1>=V,V>=1,W15=1] 
* CE 60: start(V1,V,V15) = 0+ lt(V1,V,W15):5
     [V>=V1+1,V1>=1,W15=2] 

### Cost equations --> "Loop" of start/3 
* CEs [50,57] --> Loop 28 
* CEs [42,43,44,45] --> Loop 29 
* CEs [41,46,47,48,49,51,52,53,54,55,56,58,59,60] --> Loop 30 

#### Loops of start/3 
* Loop 28: start(V1,V,V15) [V1>=0,V=0] 
* Loop 29: start(V1,V,V15) [V15>=1,V>=0,V1=1] 
* Loop 30: start(V1,V,V15) [V1>=0] 

### Ranking functions of CR start(V1,V,V15) 

#### Partial ranking functions of CR start(V1,V,V15) 


### Resulting Chains:start(V1,V,V15) 
* [30]
* [29]
* [28]


### Merging Chains  start/3 into  External patterns of execution 
* [[29],[30]] --> 1 
* [[28]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [13] 

 * loop 13:lt(V1,V,Out) -> [lt(V1',V',Out')] 
0
#### Cost of phase [13]:lt(V1,V,Out) -> [lt(V1',V',Out')] 
0
#### Cost of phase [13]:lt(V1,V,Out) -> [lt(V1',V',Out')] 
0
#### Cost of phase [13]:lt(V1,V,Out) -> [lt(V1',V',Out')] 
0
#### Cost of chains of lt(V1,V,Out):
* Chain [[13],16]: 0
  with precondition: [Out=2,V1>=1,V>=V1+1] 

* Chain [[13],15]: 0
  with precondition: [Out=1,V>=1,V1>=V] 

* Chain [[13],14]: 0
  with precondition: [Out=0,V1>=1,V>=1] 

* Chain [16]: 0
  with precondition: [V1=0,Out=2,V>=1] 

* Chain [15]: 0
  with precondition: [V=0,Out=1,V1>=0] 

* Chain [14]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [17] 

 * loop 17:insert(V1,V,Out) -> [insert(V1',V',Out')] 
1
#### Cost of phase [17]:insert(V1,V,Out) -> [insert(V1',V',Out')] 
1*it(17)+0
  Such that:it(17) =< V
it(17) =< V-V'

#### Cost of phase [17]:insert(V1,V,Out) -> [insert(V1',V',Out')] 
1*it(17)+0
  Such that:it(17) =< V
it(17) =< V-V'

#### Cost of phase [17]:insert(V1,V,Out) -> [insert(V1',V',Out')] 
1*it(17)+0
  Such that:it(17) =< V
it(17) =< V-V'

#### Cost of phase [17]:insert(V1,V,Out) -> [insert(V1',V',Out')] 
1*it(17)+0
  Such that:it(17) =< V
it(17) =< V-V'

#### Cost of chains of insert(V1,V,Out):
* Chain [[17],21]: 1*it(17)+1
  Such that:it(17) =< Out

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [[17],20]: 1*it(17)+1
  Such that:it(17) =< Out

  with precondition: [V1=0,V+1=Out,V>=3] 

* Chain [[17],19]: 1*it(17)+1
  Such that:it(17) =< V

  with precondition: [V+V1+1=Out,V1>=0,V>=1] 

* Chain [[17],18]: 1*it(17)+1
  Such that:it(17) =< 2*V-Out

  with precondition: [V+V1+1=Out,V1>=1,V>=V1+3] 

* Chain [21]: 1
  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [20]: 1
  with precondition: [V1=0,V+1=Out,V>=2] 

* Chain [19]: 1
  with precondition: [V=0,V1+1=Out,V1>=0] 

* Chain [18]: 1
  with precondition: [V+V1+1=Out,V1>=1,V>=V1+2] 


#### Cost of loops [22,23,24,25] 

 * loop 22:isort(V1,V,Out) -> [isort(V1',V',Out')] 
1*s(5)+2
  Such that:s(5) =< V'

 * loop 23:isort(V1,V,Out) -> [isort(V1',V',Out')] 
1*s(11)+1*s(9)+1*s(10)+2
  Such that:s(9) =< -2*V1+2*V1'+V'
s(10) =< V1+V-V1'
s(11) =< V

 * loop 24:isort(V1,V,Out) -> [isort(V1',V',Out')] 
2
 * loop 25:isort(V1,V,Out) -> [isort(V1',V',Out')] 
2
#### Cost of phase [22,23,24,25]:isort(V1,V,Out) -> [isort(V1',V',Out')] 
6*it(22)+2*it(25)+2*s(12)+1*s(13)+1*s(14)+0
  Such that:aux(7) =< -V+1
aux(9) =< V1
aux(10) =< V1+V
aux(11) =< V1-V1'
aux(8) =< aux(9)
it(22) =< aux(9)
it(25) =< aux(9)
aux(8) =< aux(11)
it(22) =< aux(11)
it(25) =< aux(11)
aux(4) =< aux(10)
aux(2) =< aux(10)-1
s(12) =< it(22)*aux(10)
it(25) =< aux(8)+aux(7)
s(13) =< it(22)*aux(4)
s(14) =< it(22)*aux(2)

#### Cost of phase [22,23,24,25]:isort(V1,V,Out) -> [isort(V1',V',Out')] 
6*it(22)+2*it(25)+2*s(12)+1*s(13)+1*s(14)+0
  Such that:aux(7) =< -V+1
aux(9) =< V1
aux(10) =< V1+V
aux(11) =< V1-V1'
aux(8) =< aux(9)
it(22) =< aux(9)
it(25) =< aux(9)
aux(8) =< aux(11)
it(22) =< aux(11)
it(25) =< aux(11)
aux(4) =< aux(10)
aux(2) =< aux(10)-1
s(12) =< it(22)*aux(10)
it(25) =< aux(8)+aux(7)
s(13) =< it(22)*aux(4)
s(14) =< it(22)*aux(2)

#### Cost of chains of isort(V1,V,Out):
* Chain [[22,23,24,25],27]: 6*it(22)+2*it(25)+2*s(12)+1*s(13)+1*s(14)+1
  Such that:aux(10) =< V1+V
aux(7) =< -V+1
aux(12) =< V1
it(22) =< aux(12)
it(25) =< aux(12)
aux(4) =< aux(10)
aux(2) =< aux(10)-1
s(12) =< it(22)*aux(10)
it(25) =< aux(12)+aux(7)
s(13) =< it(22)*aux(4)
s(14) =< it(22)*aux(2)

  with precondition: [V1>=1,V>=0,Out>=0,V+V1>=Out] 

* Chain [[22,23,24,25],26]: 6*it(22)+2*it(25)+2*s(12)+1*s(13)+1*s(14)+0
  Such that:aux(10) =< V1+V
aux(7) =< -V+1
aux(13) =< V1
it(22) =< aux(13)
it(25) =< aux(13)
aux(4) =< aux(10)
aux(2) =< aux(10)-1
s(12) =< it(22)*aux(10)
it(25) =< aux(13)+aux(7)
s(13) =< it(22)*aux(4)
s(14) =< it(22)*aux(2)

  with precondition: [Out=0,V1>=1,V>=0] 

* Chain [27]: 1
  with precondition: [V1=0,V=Out,V>=0] 

* Chain [26]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of chains of start(V1,V,V15):
* Chain [30]: 24*s(29)+4*s(30)+4*s(33)+2*s(34)+2*s(35)+2*s(46)+1*s(47)+1*s(48)+4*s(54)+4*s(57)+2*s(58)+2*s(59)+2
  Such that:s(47) =< -V1+V
s(48) =< V1+V+1
aux(16) =< 1
aux(17) =< V1
aux(18) =< V1+V
aux(19) =< -V+1
aux(20) =< V
s(46) =< aux(20)
s(29) =< aux(17)
s(54) =< aux(17)
s(55) =< aux(17)
s(56) =< aux(17)-1
s(57) =< s(29)*aux(17)
s(54) =< aux(17)+aux(16)
s(58) =< s(29)*s(55)
s(59) =< s(29)*s(56)
s(30) =< aux(17)
s(31) =< aux(18)
s(32) =< aux(18)-1
s(33) =< s(29)*aux(18)
s(30) =< aux(17)+aux(19)
s(34) =< s(29)*s(31)
s(35) =< s(29)*s(32)

  with precondition: [V1>=0] 

* Chain [29]: 2*s(70)+1*s(71)+1*s(72)+1
  Such that:s(71) =< -V+V15
s(72) =< V+V15
aux(21) =< V15
s(70) =< aux(21)

  with precondition: [V1=1,V>=0,V15>=1] 

* Chain [28]: 1
  with precondition: [V=0,V1>=0] 


Closed-form bounds of start(V1,V,V15): 
-------------------------------------
* Chain [30] with precondition: [V1>=0] 
    - Upper bound: 32*V1+2+6*V1*V1+nat(V)*2+nat(V1-1)*2*V1+nat(nat(V1+V)+ -1)*2*V1+nat(V1+V)*6*V1+nat(-V1+V)+nat(V1+V+1) 
    - Complexity: n^2 
* Chain [29] with precondition: [V1=1,V>=0,V15>=1] 
    - Upper bound: V+3*V15+1+nat(-V+V15) 
    - Complexity: n 
* Chain [28] with precondition: [V=0,V1>=0] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V1,V,V15): max([nat(V15)*2+nat(V+V15)+nat(-V+V15),32*V1+1+6*V1*V1+nat(V)*2+nat(V1-1)*2*V1+nat(nat(V1+V)+ -1)*2*V1+nat(V1+V)*6*V1+nat(-V1+V)+nat(V1+V+1)])+1 
Asymptotic class: n^2 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 19 ms.
* Invariants computed in 37 ms.
   - Backward Invariants 22 ms.
   - Transitive Invariants 5 ms.
* Refinement performed in 79 ms.
* Termination proved in 8 ms.
* Upper bounds computed in 114 ms.
   - Equation cost structures 45 ms.
   - Phase cost structures 45 ms.
   - Chain cost structures 24 ms.
   - Solving cost expressions 3 ms.
* Total analysis performed in 283 ms.


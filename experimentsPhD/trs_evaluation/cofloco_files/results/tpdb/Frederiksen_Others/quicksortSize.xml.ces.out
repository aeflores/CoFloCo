
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [app/3]
1. recursive  : [lt/3]
2. recursive  : [fun/4,partLt/3]
3. recursive  : [gr/3]
4. recursive  : [fun1/4,partGt/3]
5. recursive [non_tail,multiple] : [part/3,quicksort/2]
6. non_recursive  : [goal/2]
7. non_recursive  : [notEmpty/2]
8. non_recursive  : [start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into app/3
1. SCC is partially evaluated into lt/3
2. SCC is partially evaluated into partLt/3
3. SCC is partially evaluated into gr/3
4. SCC is partially evaluated into partGt/3
5. SCC is partially evaluated into quicksort/2
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into notEmpty/2
8. SCC is partially evaluated into start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations app/3 
* CE 32 is refined into CE [44] 
* CE 31 is refined into CE [45] 
* CE 30 is refined into CE [46] 


#### Refined cost equations app/3 
* CE 44: app(V,V5,Out) = 0
     [V5>=0,V>=0,Out=0] 
* CE 45: app(A,B,B) = 1
     [B>=0,A=0] 
* CE 46: app(V,V5,Out) = 1+ app(W5,V5,X5)
     [V+X5>=Out,Out>=X5+1,V5>=0,V+X5=Out+W5] 

### Cost equations --> "Loop" of app/3 
* CEs [46] --> Loop 26 
* CEs [44] --> Loop 27 
* CEs [45] --> Loop 28 

#### Loops of app/3 
* Loop 26: app(V,V5,Out)->  app(V',V5,Out')
                  [V+Out'>=Out,Out>=Out'+1,V5>=0,V+Out'=Out+V'] 
* Loop 27: app(V,V5,Out) [V5>=0,V>=0,Out=0] 
* Loop 28: app(A,B,B) [B>=0,A=0] 

### Ranking functions of CR app(V,V5,Out) 
* RF of phase [26]: [V]

#### Partial ranking functions of CR app(V,V5,Out) 
* Partial RF of phase [26]:
  - RF of loop [26:1]:
    V


### Resulting Chains:app(V,V5,Out) 
* [[26],28]
* [[26],27]
* [28]
* [27]


### Merging Chains  app/3 into  External patterns of execution 
* [[28]] --> 1 
* [[27]] --> 2 
* [[28,[26]]] --> 3 
* [[27,[26]]] --> 4 


### Specialization of cost equations lt/3 
* CE 39 is refined into CE [47] 
* CE 38 is refined into CE [48] 
* CE 37 is refined into CE [49] 
* CE 36 is refined into CE [50] 


#### Refined cost equations lt/3 
* CE 47: lt(V,V5,Out) = 0
     [V5>=0,V>=0,Out=0] 
* CE 48: lt(V,V5,Out) = 0
     [V>=0,Out=1,V5=0] 
* CE 49: lt(V,V5,Out) = 0
     [V5>=1,Out=2,V=0] 
* CE 50: lt(V,V5,Out) = 0+ lt(W5,X5,Out)
     [X5>=0,W5>=0,X5+1=V5,W5+1=V] 

### Cost equations --> "Loop" of lt/3 
* CEs [50] --> Loop 29 
* CEs [47] --> Loop 30 
* CEs [48] --> Loop 31 
* CEs [49] --> Loop 32 

#### Loops of lt/3 
* Loop 29: lt(V,V5,Out)->  lt(V',V5',Out)
                  [V5'>=0,V'>=0,V5'+1=V5,V'+1=V] 
* Loop 30: lt(V,V5,Out) [V5>=0,V>=0,Out=0] 
* Loop 31: lt(V,V5,Out) [V>=0,Out=1,V5=0] 
* Loop 32: lt(V,V5,Out) [V5>=1,Out=2,V=0] 

### Ranking functions of CR lt(V,V5,Out) 
* RF of phase [29]: [V,V5]

#### Partial ranking functions of CR lt(V,V5,Out) 
* Partial RF of phase [29]:
  - RF of loop [29:1]:
    V
    V5


### Resulting Chains:lt(V,V5,Out) 
* [[29],32]
* [[29],31]
* [[29],30]
* [32]
* [31]
* [30]


### Merging Chains  lt/3 into  External patterns of execution 
* [[32]] --> 1 
* [[31]] --> 2 
* [[30],[30,[29]]] --> 3 
* [[31,[29]]] --> 4 
* [[32,[29]]] --> 5 


### Specialization of cost equations partLt/3 
* CE 16 is refined into CE [51,52,53,54,55] 
* CE 19 is refined into CE [56] 
* CE 20 is refined into CE [57] 
* CE 18 is refined into CE [58,59] 
* CE 17 is refined into CE [60,61] 


#### Refined cost equations partLt/3 
* CE 51: partLt(V,V5,Out) = 1+ lt(W5,V,X5):1
     [V>=1,V5>=1,X5=2,W5=0,Out=0] 
* CE 52: partLt(V,V5,Out) = 1+ lt(W5,X5,Y5):2
     [V5>=W5+1,W5>=0,Y5=1,X5=0,Out=0,V=0] 
* CE 53: partLt(V,V5,Out) = 1+ lt(W5,V,X5):3
     [V5>=W5+1,V>=0,W5>=0,X5=0,Out=0] 
* CE 54: partLt(V,V5,Out) = 1+ lt(W5,V,X5):4
     [W5>=V,V5>=W5+1,V>=1,X5=1,Out=0] 
* CE 55: partLt(V,V5,Out) = 1+ lt(W5,V,X5):5
     [V>=W5+1,V5>=W5+1,W5>=1,X5=2,Out=0] 
* CE 56: partLt(V,V5,Out) = 1
     [V>=0,Out=0,V5=0] 
* CE 57: partLt(V,V5,Out) = 0
     [V5>=0,V>=0,Out=0] 
* CE 58: partLt(V,V5,Out) = 1+ lt(W5,V,X5):1+ partLt(V,Y5,Z5)
     [V5>=Y5+1,Y5>=0,V>=1,V5+Z5=Out+Y5,X5=2,W5=0] 
* CE 59: partLt(V,V5,Out) = 1+ lt(W5,V,X5):5+ partLt(V,Y5,Z5)
     [V5>=Y5+1,V>=W5+1,V5>=W5+1,Y5>=0,W5>=1,V5+Z5=Out+Y5,X5=2] 
* CE 60: partLt(V,V5,Out) = 1+ lt(W5,X5,Y5):2+ partLt(Z5,A6,Out)
     [V5>=A6+1,V5>=W5+1,A6>=0,W5>=0,Z5=0,Y5=1,X5=0,V=0] 
* CE 61: partLt(V,V5,Out) = 1+ lt(W5,V,X5):4+ partLt(V,Y5,Out)
     [V5>=Y5+1,W5>=V,V5>=W5+1,Y5>=0,V>=1,X5=1] 

### Cost equations --> "Loop" of partLt/3 
* CEs [58,59] --> Loop 33 
* CEs [61] --> Loop 34 
* CEs [60] --> Loop 35 
* CEs [56] --> Loop 36 
* CEs [51,52,53,54,55,57] --> Loop 37 

#### Loops of partLt/3 
* Loop 33: partLt(V,V5,Out)->  partLt(V,V5',Out')
                  [V5>=V5'+1,V5'>=0,V>=1,V5+Out'=Out+V5'] 
* Loop 34: partLt(V,V5,Out)->  partLt(V,V5',Out)
                  [V5>=V5'+1,V5>=V+1,V5'>=0,V>=1] 
* Loop 35: partLt(V,V5,Out)->  partLt(V',V5',Out)
                  [V5>=V5'+1,V5'>=0,V'=0,V=0] 
* Loop 36: partLt(V,V5,Out) [V>=0,Out=0,V5=0] 
* Loop 37: partLt(V,V5,Out) [V5>=0,V>=0,Out=0] 

### Ranking functions of CR partLt(V,V5,Out) 
* RF of phase [33,34]: [V5]
* RF of phase [35]: [V5]

#### Partial ranking functions of CR partLt(V,V5,Out) 
* Partial RF of phase [33,34]:
  - RF of loop [33:1]:
    V5
  - RF of loop [34:1]:
    -V+V5
    V5-1
* Partial RF of phase [35]:
  - RF of loop [35:1]:
    V5


### Resulting Chains:partLt(V,V5,Out) 
* [[35],37]
* [[35],36]
* [[33,34],37]
* [[33,34],36]
* [37]
* [36]


### Merging Chains  partLt/3 into  External patterns of execution 
* [[37],[36,[35]],[37,[35]]] --> 1 
* [[36]] --> 2 
* [[36,[33,34]],[37,[33,34]]] --> 3 


### Specialization of cost equations gr/3 
* CE 43 is refined into CE [62] 
* CE 42 is refined into CE [63] 
* CE 41 is refined into CE [64] 
* CE 40 is refined into CE [65] 


#### Refined cost equations gr/3 
* CE 62: gr(V,V5,Out) = 0
     [V5>=0,V>=0,Out=0] 
* CE 63: gr(V,V5,Out) = 0
     [V>=1,Out=2,V5=0] 
* CE 64: gr(V,V5,Out) = 0
     [V5>=0,Out=1,V=0] 
* CE 65: gr(V,V5,Out) = 0+ gr(W5,X5,Out)
     [X5>=0,W5>=0,X5+1=V5,W5+1=V] 

### Cost equations --> "Loop" of gr/3 
* CEs [65] --> Loop 38 
* CEs [62] --> Loop 39 
* CEs [63] --> Loop 40 
* CEs [64] --> Loop 41 

#### Loops of gr/3 
* Loop 38: gr(V,V5,Out)->  gr(V',V5',Out)
                  [V5'>=0,V'>=0,V5'+1=V5,V'+1=V] 
* Loop 39: gr(V,V5,Out) [V5>=0,V>=0,Out=0] 
* Loop 40: gr(V,V5,Out) [V>=1,Out=2,V5=0] 
* Loop 41: gr(V,V5,Out) [V5>=0,Out=1,V=0] 

### Ranking functions of CR gr(V,V5,Out) 
* RF of phase [38]: [V,V5]

#### Partial ranking functions of CR gr(V,V5,Out) 
* Partial RF of phase [38]:
  - RF of loop [38:1]:
    V
    V5


### Resulting Chains:gr(V,V5,Out) 
* [[38],41]
* [[38],40]
* [[38],39]
* [41]
* [40]
* [39]


### Merging Chains  gr/3 into  External patterns of execution 
* [[41]] --> 1 
* [[40]] --> 2 
* [[39],[39,[38]]] --> 3 
* [[41,[38]]] --> 4 
* [[40,[38]]] --> 5 


### Specialization of cost equations partGt/3 
* CE 25 is refined into CE [66,67,68,69,70] 
* CE 28 is refined into CE [71] 
* CE 29 is refined into CE [72] 
* CE 27 is refined into CE [73,74] 
* CE 26 is refined into CE [75,76] 


#### Refined cost equations partGt/3 
* CE 66: partGt(V,V5,Out) = 1+ gr(W5,V,X5):1
     [V>=0,V5>=1,X5=1,W5=0,Out=0] 
* CE 67: partGt(V,V5,Out) = 1+ gr(W5,X5,Y5):2
     [V5>=W5+1,W5>=1,Y5=2,X5=0,Out=0,V=0] 
* CE 68: partGt(V,V5,Out) = 1+ gr(W5,V,X5):3
     [V5>=W5+1,V>=0,W5>=0,X5=0,Out=0] 
* CE 69: partGt(V,V5,Out) = 1+ gr(W5,V,X5):4
     [V>=W5,V5>=W5+1,W5>=1,X5=1,Out=0] 
* CE 70: partGt(V,V5,Out) = 1+ gr(W5,V,X5):5
     [W5>=V+1,V5>=W5+1,V>=1,X5=2,Out=0] 
* CE 71: partGt(V,V5,Out) = 1
     [V>=0,Out=0,V5=0] 
* CE 72: partGt(V,V5,Out) = 0
     [V5>=0,V>=0,Out=0] 
* CE 73: partGt(V,V5,Out) = 1+ gr(W5,X5,Y5):2+ partGt(Z5,A6,B6)
     [V5>=A6+1,V5>=W5+1,A6>=0,W5>=1,V5+B6=Out+A6,Z5=0,Y5=2,X5=0,V=0] 
* CE 74: partGt(V,V5,Out) = 1+ gr(W5,V,X5):5+ partGt(V,Y5,Z5)
     [V5>=Y5+1,W5>=V+1,V5>=W5+1,Y5>=0,V>=1,V5+Z5=Out+Y5,X5=2] 
* CE 75: partGt(V,V5,Out) = 1+ gr(W5,V,X5):1+ partGt(V,Y5,Out)
     [V5>=Y5+1,Y5>=0,V>=0,X5=1,W5=0] 
* CE 76: partGt(V,V5,Out) = 1+ gr(W5,V,X5):4+ partGt(V,Y5,Out)
     [V5>=Y5+1,V>=W5,V5>=W5+1,Y5>=0,W5>=1,X5=1] 

### Cost equations --> "Loop" of partGt/3 
* CEs [74] --> Loop 42 
* CEs [75,76] --> Loop 43 
* CEs [73] --> Loop 44 
* CEs [71] --> Loop 45 
* CEs [66,67,68,69,70,72] --> Loop 46 

#### Loops of partGt/3 
* Loop 42: partGt(V,V5,Out)->  partGt(V,V5',Out')
                  [V5>=V5'+1,V5>=V+2,V5'>=0,V>=1,V5+Out'=Out+V5'] 
* Loop 43: partGt(V,V5,Out)->  partGt(V,V5',Out)
                  [V5>=V5'+1,V5'>=0,V>=0] 
* Loop 44: partGt(V,V5,Out)->  partGt(V',V5',Out')
                  [V5>=V5'+1,V5'>=0,V5>=2,V5+Out'=Out+V5',V'=0,V=0] 
* Loop 45: partGt(V,V5,Out) [V>=0,Out=0,V5=0] 
* Loop 46: partGt(V,V5,Out) [V5>=0,V>=0,Out=0] 

### Ranking functions of CR partGt(V,V5,Out) 
* RF of phase [42,43,44]: [V5]

#### Partial ranking functions of CR partGt(V,V5,Out) 
* Partial RF of phase [42,43,44]:
  - RF of loop [42:1]:
    -V+V5-1
    V5-2
  - RF of loop [43:1]:
    V5
  - RF of loop [44:1]:
    V5-1


### Resulting Chains:partGt(V,V5,Out) 
* [[42,43,44],46]
* [[42,43,44],45]
* [46]
* [45]


### Merging Chains  partGt/3 into  External patterns of execution 
* [[45],[46]] --> 1 
* [[45,[42,43,44]],[46,[42,43,44]]] --> 2 


### Specialization of cost equations quicksort/2 
* CE 22 is refined into CE [77] 
* CE 23 is refined into CE [78] 
* CE 24 is refined into CE [79] 
* CE 21 is refined into CE [80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95] 


#### Refined cost equations quicksort/2 
* CE 77: quicksort(A,A) = 1
     [A>=1] 
* CE 78: quicksort(V,Out) = 1
     [Out=0,V=0] 
* CE 79: quicksort(V,Out) = 0
     [V>=0,Out=0] 
* CE 80: quicksort(V,Out) = 2+ partLt(W,X,Y):1+ quicksort(Z,A1)+ partGt(W,X,B1):1+ quicksort(C1,D1)+ app(E1,Out,Out):1
     [Out>=0,X>=1,W>=0,Out=W+D1+1,W+X+1=V,C1=0,A1=0,Z=0,E1=0,B1=0,Y=0] 
* CE 81: quicksort(V,Out) = 2+ partLt(W,X,Y):1+ quicksort(Z,A1)+ partGt(W,X,B1):1+ quicksort(C1,D1)+ app(A1,E1,F1):2
     [E1>=0,A1>=0,X>=1,W>=0,E1=W+D1+1,W+X+1=V,C1=0,Z=0,F1=0,B1=0,Y=0,Out=0] 
* CE 82: quicksort(V,Out) = 2+ partLt(W,X,Y):1+ quicksort(Z,A1)+ partGt(W,X,B1):1+ quicksort(C1,D1)+ app(A1,E1,Out):3
     [Out>=A1,A1>=1,X>=1,W>=0,Out=W+A1+D1+1,Out=A1+E1,W+X+1=V,C1=0,Z=0,B1=0,Y=0] 
* CE 83: quicksort(V,Out) = 2+ partLt(W,X,Y):1+ quicksort(Z,A1)+ partGt(W,X,B1):1+ quicksort(C1,D1)+ app(A1,E1,Out):4
     [A1>=Out,Out>=1,E1>=0,X>=1,W>=0,E1=W+D1+1,W+X+1=V,C1=0,Z=0,B1=0,Y=0] 
* CE 84: quicksort(V,Out) = 2+ partLt(W,X,Y):1+ quicksort(Z,A1)+ partGt(W,X,B1):2+ quicksort(B1,C1)+ app(D1,Out,Out):1
     [2*X>=B1+2,X>=B1,Out>=0,B1>=0,W>=0,Out=W+C1+1,W+X+1=V,A1=0,Z=0,D1=0,Y=0] 
* CE 85: quicksort(V,Out) = 2+ partLt(W,X,Y):1+ quicksort(Z,A1)+ partGt(W,X,B1):2+ quicksort(B1,C1)+ app(A1,D1,E1):2
     [2*X>=B1+2,X>=B1,D1>=0,A1>=0,B1>=0,W>=0,D1=W+C1+1,W+X+1=V,Z=0,E1=0,Y=0,Out=0] 
* CE 86: quicksort(V,Out) = 2+ partLt(W,X,Y):1+ quicksort(Z,A1)+ partGt(W,X,B1):2+ quicksort(B1,C1)+ app(A1,D1,Out):3
     [Out>=A1,2*X>=B1+2,X>=B1,A1>=1,B1>=0,W>=0,Out=W+A1+C1+1,Out=A1+D1,W+X+1=V,Z=0,Y=0] 
* CE 87: quicksort(V,Out) = 2+ partLt(W,X,Y):1+ quicksort(Z,A1)+ partGt(W,X,B1):2+ quicksort(B1,C1)+ app(A1,D1,Out):4
     [A1>=Out,2*X>=B1+2,X>=B1,Out>=1,D1>=0,B1>=0,W>=0,D1=W+C1+1,W+X+1=V,Z=0,Y=0] 
* CE 88: quicksort(V,Out) = 2+ partLt(W,X,Y):3+ quicksort(Y,Z)+ partGt(W,X,A1):1+ quicksort(B1,C1)+ app(D1,Out,Out):1
     [X+Y>=2,X>=Y,Out>=0,W>=1,Y>=0,Out=W+C1+1,W+X+1=V,B1=0,Z=0,D1=0,A1=0] 
* CE 89: quicksort(V,Out) = 2+ partLt(W,X,Y):3+ quicksort(Y,Z)+ partGt(W,X,A1):1+ quicksort(B1,C1)+ app(Z,D1,E1):2
     [X+Y>=2,X>=Y,D1>=0,Z>=0,W>=1,Y>=0,D1=W+C1+1,W+X+1=V,B1=0,E1=0,A1=0,Out=0] 
* CE 90: quicksort(V,Out) = 2+ partLt(W,X,Y):3+ quicksort(Y,Z)+ partGt(W,X,A1):1+ quicksort(B1,C1)+ app(Z,D1,Out):3
     [X+Y>=2,Out>=Z,X>=Y,Z>=1,W>=1,Y>=0,Out=W+Z+C1+1,Out=Z+D1,W+X+1=V,B1=0,A1=0] 
* CE 91: quicksort(V,Out) = 2+ partLt(W,X,Y):3+ quicksort(Y,Z)+ partGt(W,X,A1):1+ quicksort(B1,C1)+ app(Z,D1,Out):4
     [X+Y>=2,Z>=Out,X>=Y,Out>=1,D1>=0,W>=1,Y>=0,D1=W+C1+1,W+X+1=V,B1=0,A1=0] 
* CE 92: quicksort(V,Out) = 2+ partLt(W,X,Y):3+ quicksort(Y,Z)+ partGt(W,X,A1):2+ quicksort(A1,B1)+ app(C1,Out,Out):1
     [X+Y>=2,2*X>=A1+2,X>=A1,X>=Y,Out>=0,A1>=0,W>=1,Y>=0,Out=W+B1+1,W+X+1=V,Z=0,C1=0] 
* CE 93: quicksort(V,Out) = 2+ partLt(W,X,Y):3+ quicksort(Y,Z)+ partGt(W,X,A1):2+ quicksort(A1,B1)+ app(Z,C1,D1):2
     [X+Y>=2,2*X>=A1+2,X>=A1,X>=Y,C1>=0,Z>=0,A1>=0,W>=1,Y>=0,C1=W+B1+1,W+X+1=V,D1=0,Out=0] 
* CE 94: quicksort(V,Out) = 2+ partLt(W,X,Y):3+ quicksort(Y,Z)+ partGt(W,X,A1):2+ quicksort(A1,B1)+ app(Z,C1,Out):3
     [X+Y>=2,Out>=Z,2*X>=A1+2,X>=A1,X>=Y,Z>=1,A1>=0,W>=1,Y>=0,Out=W+Z+B1+1,Out=Z+C1,W+X+1=V] 
* CE 95: quicksort(V,Out) = 2+ partLt(W,X,Y):3+ quicksort(Y,Z)+ partGt(W,X,A1):2+ quicksort(A1,B1)+ app(Z,C1,Out):4
     [X+Y>=2,Z>=Out,2*X>=A1+2,X>=A1,X>=Y,Out>=1,C1>=0,A1>=0,W>=1,Y>=0,C1=W+B1+1,W+X+1=V] 

### Cost equations --> "Loop" of quicksort/2 
* CEs [90,94] --> Loop 47 
* CEs [91,95] --> Loop 48 
* CEs [88,92] --> Loop 49 
* CEs [82,86] --> Loop 50 
* CEs [83,87] --> Loop 51 
* CEs [80,84] --> Loop 52 
* CEs [89,93] --> Loop 53 
* CEs [81,85] --> Loop 54 
* CEs [77] --> Loop 55 
* CEs [78,79] --> Loop 56 

#### Loops of quicksort/2 
* Loop 47: quicksort(V,Out)->  quicksort(V',Out')  quicksort(V'2,Out'2)
                  [V+V'+Out'+Out'2>=Out+2,V+Out'+Out'2>=Out+V'2,V+Out'+Out'2>=Out+V',2*V+2*Out'+2*Out'2>=2*Out+V'2+2,Out>=Out'+Out'2+2,Out>=Out',V'2>=0,Out'>=1,V'>=0] 
* Loop 48: quicksort(V,Out)->  quicksort(V',Out')  quicksort(V'2,Out'2)
                  [V+V'+Out'2>=2,2*V+2*Out'2>=V'2+2,V+Out'2>=V'2,V+Out'2>=V',V+V'>=4,2*V>=V'2+6,V>=V'2+2,V>=V'+2,Out'>=Out,V'2>=0,V'>=0,Out>=1] 
* Loop 49: quicksort(V,Out)->  quicksort(V',Out')  quicksort(V'2,Out'2)
                  [V+V'+Out'2>=Out+2,V+Out'2>=Out+V'2,V+Out'2>=Out+V',2*V+2*Out'2>=2*Out+V'2+2,Out>=Out'2+2,V'2>=0,V'>=0,Out>=0,Out'=0] 
* Loop 50: quicksort(V,Out)->  quicksort(V',Out')  quicksort(V'2,Out'2)
                  [V+Out'+Out'2>=Out+V'2,2*V+2*Out'+2*Out'2>=2*Out+V'2+2,Out>=Out'+Out'2+1,Out>=Out',V'2>=0,Out'>=1,V'=0] 
* Loop 51: quicksort(V,Out)->  quicksort(V',Out')  quicksort(V'2,Out'2)
                  [2*V+2*Out'2>=V'2+2,V+Out'2>=V'2,2*V>=V'2+4,V>=V'2+1,Out'>=Out,V'2>=0,Out>=1,V'=0] 
* Loop 52: quicksort(V,Out)->  quicksort(V',Out')  quicksort(V'2,Out'2)
                  [V+Out'2>=Out+V'2,2*V+2*Out'2>=2*Out+V'2+2,Out>=Out'2+1,V'2>=0,Out>=0,Out'=0,V'=0] 
* Loop 53: quicksort(V,Out)->  quicksort(V',Out')  quicksort(V'2,Out'2)
                  [V+V'+Out'2>=2,2*V+2*Out'2>=V'2+2,V+Out'2>=V'2,V+Out'2>=V',V+V'>=4,2*V>=V'2+6,V>=V'2+2,V>=V'+2,V'2>=0,Out'>=0,V'>=0,Out=0] 
* Loop 54: quicksort(V,Out)->  quicksort(V',Out')  quicksort(V'2,Out'2)
                  [2*V+2*Out'2>=V'2+2,V+Out'2>=V'2,2*V>=V'2+4,V>=V'2+1,V'2>=0,Out'>=0,V'=0,Out=0] 
* Loop 55: quicksort(A,A) [A>=1] 
* Loop 56: quicksort(V,Out) [V>=0,Out=0] 

### Ranking functions of CR quicksort(V,Out) 
* RF of phase [47,48,49,50,51,52,53,54]: [V-1]

#### Partial ranking functions of CR quicksort(V,Out) 
* Partial RF of phase [47,48,49,50,51,52,53,54]:
  - RF of loop [47:1,47:2,48:1,48:2,49:1,49:2,53:1,53:2]:
    V-2
  - RF of loop [50:1,50:2,51:1,51:2,52:1,52:2,54:1,54:2]:
    V-1


### Resulting Chains:quicksort(V,Out) 
* [56]
* [55]
* [multiple([47,48,49,50,51,52,53,54],[[56],[55]])]


### Merging Chains  quicksort/2 into  External patterns of execution 
* [[56]] --> 1 
* [[55]] --> 2 
* [[multiple([47,48,49,50,51,52,53,54],[[56],[55]])]] --> 3 


### Specialization of cost equations notEmpty/2 
* CE 33 is refined into CE [96] 
* CE 35 is refined into CE [97] 
* CE 34 is refined into CE [98] 


#### Refined cost equations notEmpty/2 
* CE 96: notEmpty(V,Out) = 1
     [V>=1,Out=2] 
* CE 97: notEmpty(V,Out) = 0
     [V>=0,Out=0] 
* CE 98: notEmpty(V,Out) = 1
     [Out=1,V=0] 

### Cost equations --> "Loop" of notEmpty/2 
* CEs [96] --> Loop 57 
* CEs [97] --> Loop 58 
* CEs [98] --> Loop 59 

#### Loops of notEmpty/2 
* Loop 57: notEmpty(V,Out) [V>=1,Out=2] 
* Loop 58: notEmpty(V,Out) [V>=0,Out=0] 
* Loop 59: notEmpty(V,Out) [Out=1,V=0] 

### Ranking functions of CR notEmpty(V,Out) 

#### Partial ranking functions of CR notEmpty(V,Out) 


### Resulting Chains:notEmpty(V,Out) 
* [59]
* [58]
* [57]


### Merging Chains  notEmpty/2 into  External patterns of execution 
* [[59]] --> 1 
* [[58]] --> 2 
* [[57]] --> 3 


### Specialization of cost equations start/3 
* CE 5 is refined into CE [99,100] 
* CE 7 is refined into CE [101,102,103] 
* CE 2 is refined into CE [104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149] 
* CE 3 is refined into CE [150] 
* CE 4 is refined into CE [151,152] 
* CE 6 is refined into CE [153,154,155] 
* CE 8 is refined into CE [156,157,158] 
* CE 9 is refined into CE [159,160,161] 
* CE 10 is refined into CE [162,163] 
* CE 11 is refined into CE [164,165,166,167] 
* CE 12 is refined into CE [168,169,170] 
* CE 13 is refined into CE [171,172,173] 
* CE 14 is refined into CE [174,175,176,177,178] 
* CE 15 is refined into CE [179,180,181,182,183] 


#### Refined cost equations start/3 
* CE 99: start(V,V5,V31) = 0+ partGt(V5,W31,X31):1
     [V31>=W31+1,W31>=0,V5>=0,X31=0,V=2] 
* CE 100: start(V,V5,V31) = 0+ partGt(V5,W31,X31):2
     [2*W31>=X31+2,W31>=X31,V31>=W31+1,X31>=0,V5>=0,V=2] 
* CE 101: start(V,V5,V31) = 0+ partLt(V5,W31,X31):1
     [V31>=W31+1,W31>=0,V5>=0,X31=0,V=2] 
* CE 102: start(V,V5,V31) = 0+ partLt(V5,W31,X31):2
     [V5>=0,V31>=1,X31=0,W31=0,V=2] 
* CE 103: start(V,V5,V31) = 0+ partLt(V5,W31,X31):3
     [W31+X31>=2,W31>=X31,V31>=W31+1,X31>=0,V5>=1,V=2] 
* CE 104: start(V,V5,V31) = 1+ partLt(W31,V5,X31):1+ quicksort(Y31,Z31):1+ partGt(A32,V5,B32):1+ quicksort(C32,D32):1+ app(E32,F32,F32):1
     [F32>=1,V5>=0,F32=A32+1,F32=W31+1,F32=V+1,E32=0,D32=0,C32=0,B32=0,Z31=0,Y31=0,X31=0] 
* CE 105: start(V,V5,V31) = 1+ partLt(W31,V5,X31):1+ quicksort(Y31,Z31):1+ partGt(A32,V5,B32):1+ quicksort(C32,D32):1+ app(E32,F32,G32):2
     [F32>=1,V5>=0,F32=A32+1,F32=W31+1,F32=V+1,G32=0,E32=0,D32=0,C32=0,B32=0,Z31=0,Y31=0,X31=0] 
* CE 106: start(V,V5,V31) = 1+ partLt(W31,V5,X31):1+ quicksort(Y31,Z31):1+ partGt(A32,V5,B32):2+ quicksort(B32,C32):1+ app(D32,E32,E32):1
     [2*V5>=B32+2,V5>=B32,E32>=1,B32>=0,E32=A32+1,E32=W31+1,E32=V+1,D32=0,C32=0,Z31=0,Y31=0,X31=0] 
* CE 107: start(V,V5,V31) = 1+ partLt(W31,V5,X31):1+ quicksort(Y31,Z31):1+ partGt(A32,V5,B32):2+ quicksort(B32,C32):1+ app(D32,E32,F32):2
     [2*V5>=B32+2,V5>=B32,E32>=1,B32>=0,E32=A32+1,E32=W31+1,E32=V+1,F32=0,D32=0,C32=0,Z31=0,Y31=0,X31=0] 
* CE 108: start(V,V5,V31) = 1+ partLt(W31,V5,X31):1+ quicksort(Y31,Z31):1+ partGt(A32,V5,B32):2+ quicksort(B32,B32):2+ app(C32,D32,D32):1
     [2*V5>=B32+2,D32>=B32+1,V5>=B32,B32>=1,D32=A32+B32+1,D32=W31+B32+1,D32=V+B32+1,C32=0,Z31=0,Y31=0,X31=0] 
* CE 109: start(V,V5,V31) = 1+ partLt(W31,V5,X31):1+ quicksort(Y31,Z31):1+ partGt(A32,V5,B32):2+ quicksort(B32,B32):2+ app(C32,D32,E32):2
     [2*V5>=B32+2,D32>=B32+1,V5>=B32,B32>=1,D32=A32+B32+1,D32=W31+B32+1,D32=V+B32+1,E32=0,C32=0,Z31=0,Y31=0,X31=0] 
* CE 110: start(V,V5,V31) = 1+ partLt(W31,V5,X31):1+ quicksort(Y31,Z31):1+ partGt(A32,V5,B32):2+ quicksort(B32,C32):3+ app(D32,E32,E32):1
     [E32>=C32+1,V5>=B32,C32>=0,B32>=2,E32=A32+C32+1,E32=W31+C32+1,E32=V+C32+1,D32=0,Z31=0,Y31=0,X31=0] 
* CE 111: start(V,V5,V31) = 1+ partLt(W31,V5,X31):1+ quicksort(Y31,Z31):1+ partGt(A32,V5,B32):2+ quicksort(B32,C32):3+ app(D32,E32,F32):2
     [E32>=C32+1,V5>=B32,C32>=0,B32>=2,E32=A32+C32+1,E32=W31+C32+1,E32=V+C32+1,F32=0,D32=0,Z31=0,Y31=0,X31=0] 
* CE 112: start(V,V5,V31) = 1+ partLt(W31,X31,Y31):2+ quicksort(Z31,A32):1+ partGt(B32,C32,D32):1+ quicksort(E32,F32):1+ app(G32,H32,H32):1
     [H32>=1,H32=B32+1,H32=W31+1,H32=V+1,G32=0,F32=0,E32=0,D32=0,C32=0,A32=0,Z31=0,Y31=0,X31=0,V5=0] 
* CE 113: start(V,V5,V31) = 1+ partLt(W31,X31,Y31):2+ quicksort(Z31,A32):1+ partGt(B32,C32,D32):1+ quicksort(E32,F32):1+ app(G32,H32,I32):2
     [H32>=1,H32=B32+1,H32=W31+1,H32=V+1,I32=0,G32=0,F32=0,E32=0,D32=0,C32=0,A32=0,Z31=0,Y31=0,X31=0,V5=0] 
* CE 114: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,Y31):1+ partGt(Z31,V5,A32):1+ quicksort(B32,C32):1+ app(D32,E32,E32):1
     [V5+X31>=2,V5>=X31,E32>=2,X31>=0,E32=Z31+1,E32=W31+1,E32=V+1,D32=0,C32=0,B32=0,A32=0,Y31=0] 
* CE 115: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,Y31):1+ partGt(Z31,V5,A32):1+ quicksort(B32,C32):1+ app(D32,E32,F32):2
     [V5+X31>=2,V5>=X31,E32>=2,X31>=0,E32=Z31+1,E32=W31+1,E32=V+1,F32=0,D32=0,C32=0,B32=0,A32=0,Y31=0] 
* CE 116: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,Y31):1+ partGt(Z31,V5,A32):2+ quicksort(A32,B32):1+ app(C32,D32,D32):1
     [V5+X31>=2,2*V5>=A32+2,V5>=A32,V5>=X31,D32>=2,A32>=0,X31>=0,D32=Z31+1,D32=W31+1,D32=V+1,C32=0,B32=0,Y31=0] 
* CE 117: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,Y31):1+ partGt(Z31,V5,A32):2+ quicksort(A32,B32):1+ app(C32,D32,E32):2
     [V5+X31>=2,2*V5>=A32+2,V5>=A32,V5>=X31,D32>=2,A32>=0,X31>=0,D32=Z31+1,D32=W31+1,D32=V+1,E32=0,C32=0,B32=0,Y31=0] 
* CE 118: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,Y31):1+ partGt(Z31,V5,A32):2+ quicksort(A32,A32):2+ app(B32,C32,C32):1
     [V5+X31>=2,2*V5>=A32+2,C32>=A32+2,V5>=A32,V5>=X31,A32>=1,X31>=0,C32=Z31+A32+1,C32=W31+A32+1,C32=V+A32+1,B32=0,Y31=0] 
* CE 119: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,Y31):1+ partGt(Z31,V5,A32):2+ quicksort(A32,A32):2+ app(B32,C32,D32):2
     [V5+X31>=2,2*V5>=A32+2,C32>=A32+2,V5>=A32,V5>=X31,A32>=1,X31>=0,C32=Z31+A32+1,C32=W31+A32+1,C32=V+A32+1,D32=0,B32=0,Y31=0] 
* CE 120: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,Y31):1+ partGt(Z31,V5,A32):2+ quicksort(A32,B32):3+ app(C32,D32,D32):1
     [D32>=B32+2,V5>=A32,V5>=X31,B32>=0,A32>=2,X31>=0,D32=Z31+B32+1,D32=W31+B32+1,D32=V+B32+1,C32=0,Y31=0] 
* CE 121: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,Y31):1+ partGt(Z31,V5,A32):2+ quicksort(A32,B32):3+ app(C32,D32,E32):2
     [D32>=B32+2,V5>=A32,V5>=X31,B32>=0,A32>=2,X31>=0,D32=Z31+B32+1,D32=W31+B32+1,D32=V+B32+1,E32=0,C32=0,Y31=0] 
* CE 122: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,X31):2+ partGt(Y31,V5,Z31):1+ quicksort(A32,B32):1+ app(X31,C32,D32):2
     [V5>=X31,C32>=2,X31>=1,C32=Y31+1,C32=W31+1,C32=V+1,D32=0,B32=0,A32=0,Z31=0] 
* CE 123: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,X31):2+ partGt(Y31,V5,Z31):1+ quicksort(A32,B32):1+ app(X31,C32,D32):3
     [D32>=X31+2,V5>=X31,X31>=1,D32=X31+C32,D32=X31+Y31+1,D32=W31+X31+1,D32=V+X31+1,B32=0,A32=0,Z31=0] 
* CE 124: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,X31):2+ partGt(Y31,V5,Z31):1+ quicksort(A32,B32):1+ app(X31,C32,D32):4
     [X31>=D32,V5>=X31,D32>=1,C32>=2,C32=Y31+1,C32=W31+1,C32=V+1,B32=0,A32=0,Z31=0] 
* CE 125: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,X31):2+ partGt(Y31,V5,Z31):2+ quicksort(Z31,A32):1+ app(X31,B32,C32):2
     [V5>=X31,2*V5>=Z31+2,V5>=Z31,B32>=2,X31>=1,Z31>=0,B32=Y31+1,B32=W31+1,B32=V+1,C32=0,A32=0] 
* CE 126: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,X31):2+ partGt(Y31,V5,Z31):2+ quicksort(Z31,A32):1+ app(X31,B32,C32):3
     [C32>=X31+2,V5>=X31,2*V5>=Z31+2,V5>=Z31,X31>=1,Z31>=0,C32=X31+B32,C32=X31+Y31+1,C32=W31+X31+1,C32=V+X31+1,A32=0] 
* CE 127: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,X31):2+ partGt(Y31,V5,Z31):2+ quicksort(Z31,A32):1+ app(X31,B32,C32):4
     [X31>=C32,V5>=X31,2*V5>=Z31+2,V5>=Z31,C32>=1,B32>=2,Z31>=0,B32=Y31+1,B32=W31+1,B32=V+1,A32=0] 
* CE 128: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,X31):2+ partGt(Y31,V5,Z31):2+ quicksort(Z31,Z31):2+ app(X31,A32,B32):2
     [V5>=X31,2*V5>=Z31+2,A32>=Z31+2,V5>=Z31,X31>=1,Z31>=1,A32=Y31+Z31+1,A32=W31+Z31+1,A32=V+Z31+1,B32=0] 
* CE 129: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,X31):2+ partGt(Y31,V5,Z31):2+ quicksort(Z31,Z31):2+ app(X31,A32,B32):3
     [B32>=X31+Z31+2,V5>=X31,2*V5>=Z31+2,V5>=Z31,X31>=1,Z31>=1,B32=X31+Y31+Z31+1,B32=W31+X31+Z31+1,B32=V+X31+Z31+1,B32=X31+A32] 
* CE 130: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,X31):2+ partGt(Y31,V5,Z31):2+ quicksort(Z31,Z31):2+ app(X31,A32,B32):4
     [X31>=B32,V5>=X31,2*V5>=Z31+2,A32>=Z31+2,V5>=Z31,B32>=1,Z31>=1,A32=Y31+Z31+1,A32=W31+Z31+1,A32=V+Z31+1] 
* CE 131: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,X31):2+ partGt(Y31,V5,Z31):2+ quicksort(Z31,A32):3+ app(X31,B32,C32):2
     [V5>=X31,B32>=A32+2,V5>=Z31,X31>=1,A32>=0,Z31>=2,B32=Y31+A32+1,B32=W31+A32+1,B32=V+A32+1,C32=0] 
* CE 132: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,X31):2+ partGt(Y31,V5,Z31):2+ quicksort(Z31,A32):3+ app(X31,B32,C32):3
     [C32>=X31+A32+2,V5>=X31,V5>=Z31,X31>=1,A32>=0,Z31>=2,C32=X31+Y31+A32+1,C32=W31+X31+A32+1,C32=V+X31+A32+1,C32=X31+B32] 
* CE 133: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,X31):2+ partGt(Y31,V5,Z31):2+ quicksort(Z31,A32):3+ app(X31,B32,C32):4
     [X31>=C32,V5>=X31,B32>=A32+2,V5>=Z31,C32>=1,A32>=0,Z31>=2,B32=Y31+A32+1,B32=W31+A32+1,B32=V+A32+1] 
* CE 134: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,Y31):3+ partGt(Z31,V5,A32):1+ quicksort(B32,C32):1+ app(D32,E32,E32):1
     [V5>=X31,E32>=2,X31>=2,E32=Z31+1,E32=W31+1,E32=V+1,D32=0,C32=0,B32=0,A32=0,Y31=0] 
* CE 135: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,Y31):3+ partGt(Z31,V5,A32):1+ quicksort(B32,C32):1+ app(Y31,D32,E32):2
     [V5>=X31,D32>=2,Y31>=0,X31>=2,D32=Z31+1,D32=W31+1,D32=V+1,E32=0,C32=0,B32=0,A32=0] 
* CE 136: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,Y31):3+ partGt(Z31,V5,A32):1+ quicksort(B32,C32):1+ app(Y31,D32,E32):3
     [E32>=Y31+2,V5>=X31,Y31>=1,X31>=2,E32=Y31+D32,E32=Y31+Z31+1,E32=W31+Y31+1,E32=V+Y31+1,C32=0,B32=0,A32=0] 
* CE 137: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,Y31):3+ partGt(Z31,V5,A32):1+ quicksort(B32,C32):1+ app(Y31,D32,E32):4
     [Y31>=E32,V5>=X31,E32>=1,D32>=2,X31>=2,D32=Z31+1,D32=W31+1,D32=V+1,C32=0,B32=0,A32=0] 
* CE 138: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,Y31):3+ partGt(Z31,V5,A32):2+ quicksort(A32,B32):1+ app(C32,D32,D32):1
     [V5>=A32,V5>=X31,D32>=2,A32>=0,X31>=2,D32=Z31+1,D32=W31+1,D32=V+1,C32=0,B32=0,Y31=0] 
* CE 139: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,Y31):3+ partGt(Z31,V5,A32):2+ quicksort(A32,B32):1+ app(Y31,C32,D32):2
     [V5>=A32,V5>=X31,C32>=2,Y31>=0,A32>=0,X31>=2,C32=Z31+1,C32=W31+1,C32=V+1,D32=0,B32=0] 
* CE 140: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,Y31):3+ partGt(Z31,V5,A32):2+ quicksort(A32,B32):1+ app(Y31,C32,D32):3
     [D32>=Y31+2,V5>=A32,V5>=X31,Y31>=1,A32>=0,X31>=2,D32=Y31+C32,D32=Y31+Z31+1,D32=W31+Y31+1,D32=V+Y31+1,B32=0] 
* CE 141: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,Y31):3+ partGt(Z31,V5,A32):2+ quicksort(A32,B32):1+ app(Y31,C32,D32):4
     [Y31>=D32,V5>=A32,V5>=X31,D32>=1,C32>=2,A32>=0,X31>=2,C32=Z31+1,C32=W31+1,C32=V+1,B32=0] 
* CE 142: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,Y31):3+ partGt(Z31,V5,A32):2+ quicksort(A32,A32):2+ app(B32,C32,C32):1
     [C32>=A32+2,V5>=A32,V5>=X31,A32>=1,X31>=2,C32=Z31+A32+1,C32=W31+A32+1,C32=V+A32+1,B32=0,Y31=0] 
* CE 143: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,Y31):3+ partGt(Z31,V5,A32):2+ quicksort(A32,A32):2+ app(Y31,B32,C32):2
     [B32>=A32+2,V5>=A32,V5>=X31,Y31>=0,A32>=1,X31>=2,B32=Z31+A32+1,B32=W31+A32+1,B32=V+A32+1,C32=0] 
* CE 144: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,Y31):3+ partGt(Z31,V5,A32):2+ quicksort(A32,A32):2+ app(Y31,B32,C32):3
     [C32>=Y31+A32+2,V5>=A32,V5>=X31,Y31>=1,A32>=1,X31>=2,C32=Y31+Z31+A32+1,C32=W31+Y31+A32+1,C32=V+Y31+A32+1,C32=Y31+B32] 
* CE 145: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,Y31):3+ partGt(Z31,V5,A32):2+ quicksort(A32,A32):2+ app(Y31,B32,C32):4
     [Y31>=C32,B32>=A32+2,V5>=A32,V5>=X31,C32>=1,A32>=1,X31>=2,B32=Z31+A32+1,B32=W31+A32+1,B32=V+A32+1] 
* CE 146: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,Y31):3+ partGt(Z31,V5,A32):2+ quicksort(A32,B32):3+ app(C32,D32,D32):1
     [D32>=B32+2,V5>=A32,V5>=X31,B32>=0,A32>=2,X31>=2,D32=Z31+B32+1,D32=W31+B32+1,D32=V+B32+1,C32=0,Y31=0] 
* CE 147: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,Y31):3+ partGt(Z31,V5,A32):2+ quicksort(A32,B32):3+ app(Y31,C32,D32):2
     [C32>=B32+2,V5>=A32,V5>=X31,Y31>=0,B32>=0,A32>=2,X31>=2,C32=Z31+B32+1,C32=W31+B32+1,C32=V+B32+1,D32=0] 
* CE 148: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,Y31):3+ partGt(Z31,V5,A32):2+ quicksort(A32,B32):3+ app(Y31,C32,D32):3
     [D32>=Y31+B32+2,V5>=A32,V5>=X31,Y31>=1,B32>=0,A32>=2,X31>=2,D32=Y31+Z31+B32+1,D32=W31+Y31+B32+1,D32=V+Y31+B32+1,D32=Y31+C32] 
* CE 149: start(V,V5,V31) = 1+ partLt(W31,V5,X31):3+ quicksort(X31,Y31):3+ partGt(Z31,V5,A32):2+ quicksort(A32,B32):3+ app(Y31,C32,D32):4
     [Y31>=D32,C32>=B32+2,V5>=A32,V5>=X31,D32>=1,B32>=0,A32>=2,X31>=2,C32=Z31+B32+1,C32=W31+B32+1,C32=V+B32+1] 
* CE 150: start(V,V5,V31) = 0
     [V31>=0,V5>=0,V>=0] 
* CE 151: start(V,V5,V31) = 0+ partGt(V5,W31,X31):1
     [V31>=W31+1,W31>=0,V5>=0,X31=0,V=1] 
* CE 152: start(V,V5,V31) = 0+ partGt(V5,W31,X31):2
     [2*W31>=X31+2,W31>=X31,V31>=W31+1,X31>=0,V5>=0,V=1] 
* CE 153: start(V,V5,V31) = 0+ partLt(V5,W31,X31):1
     [V31>=W31+1,W31>=0,V5>=0,X31=0,V=1] 
* CE 154: start(V,V5,V31) = 0+ partLt(V5,W31,X31):2
     [V5>=0,V31>=1,X31=0,W31=0,V=1] 
* CE 155: start(V,V5,V31) = 0+ partLt(V5,W31,X31):3
     [W31+X31>=2,W31>=X31,V31>=W31+1,X31>=0,V5>=1,V=1] 
* CE 156: start(V,V5,V31) = 0+ quicksort(V,W31):1
     [V>=0,W31=0] 
* CE 157: start(V,V5,V31) = 0+ quicksort(V,V):2
     [V>=1] 
* CE 158: start(V,V5,V31) = 0+ quicksort(V,W31):3
     [W31>=0,V>=2] 
* CE 159: start(V,V5,V31) = 0+ partLt(V,V5,W31):1
     [V5>=0,V>=0,W31=0] 
* CE 160: start(V,V5,V31) = 0+ partLt(V,W31,X31):2
     [V>=0,X31=0,W31=0,V5=0] 
* CE 161: start(V,V5,V31) = 0+ partLt(V,V5,W31):3
     [V5+W31>=2,V5>=W31,W31>=0,V>=1] 
* CE 162: start(V,V5,V31) = 0+ partGt(V,V5,W31):1
     [V5>=0,V>=0,W31=0] 
* CE 163: start(V,V5,V31) = 0+ partGt(V,V5,W31):2
     [2*V5>=W31+2,V5>=W31,W31>=0,V>=0] 
* CE 164: start(V,V5,V31) = 0+ app(W31,V5,V5):1
     [V5>=0,W31=0,V=0] 
* CE 165: start(V,V5,V31) = 0+ app(V,V5,W31):2
     [V5>=0,V>=0,W31=0] 
* CE 166: start(V,V5,V31) = 0+ app(V,W31,X31):3
     [X31>=V,V>=1,X31=V+W31,X31=V+V5] 
* CE 167: start(V,V5,V31) = 0+ app(V,V5,W31):4
     [V>=W31,W31>=1,V5>=0] 
* CE 168: start(V,V5,V31) = 0+ notEmpty(W31,X31):1
     [X31=1,W31=0,V=0] 
* CE 169: start(V,V5,V31) = 0+ notEmpty(V,W31):2
     [V>=0,W31=0] 
* CE 170: start(V,V5,V31) = 0+ notEmpty(V,W31):3
     [V>=1,W31=2] 
* CE 171: start(V,V5,V31) = 1+ quicksort(V,W31):1
     [V>=0,W31=0] 
* CE 172: start(V,V5,V31) = 1+ quicksort(V,V):2
     [V>=1] 
* CE 173: start(V,V5,V31) = 1+ quicksort(V,W31):3
     [W31>=0,V>=2] 
* CE 174: start(V,V5,V31) = 0+ lt(W31,V5,X31):1
     [V5>=1,X31=2,W31=0,V=0] 
* CE 175: start(V,V5,V31) = 0+ lt(V,W31,X31):2
     [V>=0,X31=1,W31=0,V5=0] 
* CE 176: start(V,V5,V31) = 0+ lt(V,V5,W31):3
     [V5>=0,V>=0,W31=0] 
* CE 177: start(V,V5,V31) = 0+ lt(V,V5,W31):4
     [V>=V5,V5>=1,W31=1] 
* CE 178: start(V,V5,V31) = 0+ lt(V,V5,W31):5
     [V5>=V+1,V>=1,W31=2] 
* CE 179: start(V,V5,V31) = 0+ gr(W31,V5,X31):1
     [V5>=0,X31=1,W31=0,V=0] 
* CE 180: start(V,V5,V31) = 0+ gr(V,W31,X31):2
     [V>=1,X31=2,W31=0,V5=0] 
* CE 181: start(V,V5,V31) = 0+ gr(V,V5,W31):3
     [V5>=0,V>=0,W31=0] 
* CE 182: start(V,V5,V31) = 0+ gr(V,V5,W31):4
     [V5>=V,V>=1,W31=1] 
* CE 183: start(V,V5,V31) = 0+ gr(V,V5,W31):5
     [V>=V5+1,V5>=1,W31=2] 

### Cost equations --> "Loop" of start/3 
* CEs [112,113,160,175,180] --> Loop 60 
* CEs [99,100,101,102,103] --> Loop 61 
* CEs [151,152,153,154,155] --> Loop 62 
* CEs [104,105,106,107,108,109,110,111,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,156,157,158,159,161,162,163,164,165,166,167,168,169,170,171,172,173,174,176,177,178,179,181,182,183] --> Loop 63 

#### Loops of start/3 
* Loop 60: start(V,V5,V31) [V>=0,V5=0] 
* Loop 61: start(V,V5,V31) [V31>=1,V5>=0,V=2] 
* Loop 62: start(V,V5,V31) [V31>=1,V5>=0,V=1] 
* Loop 63: start(V,V5,V31) [V>=0] 

### Ranking functions of CR start(V,V5,V31) 

#### Partial ranking functions of CR start(V,V5,V31) 


### Resulting Chains:start(V,V5,V31) 
* [63]
* [62]
* [61]
* [60]


### Merging Chains  start/3 into  External patterns of execution 
* [[62],[63]] --> 1 
* [[61]] --> 2 
* [[60]] --> 3 


Computing Bounds
=====================================

#### Cost of loops [26] 

 * loop 26:app(V,V5,Out) -> [app(V',V5',Out')] 
1
#### Cost of phase [26]:app(V,V5,Out) -> [app(V',V5',Out')] 
1*it(26)+0
  Such that:it(26) =< V
it(26) =< V-V'

#### Cost of phase [26]:app(V,V5,Out) -> [app(V',V5',Out')] 
1*it(26)+0
  Such that:it(26) =< V
it(26) =< V-V'

#### Cost of chains of app(V,V5,Out):
* Chain [[26],28]: 1*it(26)+1
  Such that:it(26) =< -V5+Out

  with precondition: [V+V5=Out,V>=1,V5>=0] 

* Chain [[26],27]: 1*it(26)+0
  Such that:it(26) =< Out

  with precondition: [V5>=0,Out>=1,V>=Out] 

* Chain [28]: 1
  with precondition: [V=0,V5=Out,V5>=0] 

* Chain [27]: 0
  with precondition: [Out=0,V>=0,V5>=0] 


#### Cost of loops [29] 

 * loop 29:lt(V,V5,Out) -> [lt(V',V5',Out')] 
0
#### Cost of phase [29]:lt(V,V5,Out) -> [lt(V',V5',Out')] 
0
#### Cost of phase [29]:lt(V,V5,Out) -> [lt(V',V5',Out')] 
0
#### Cost of phase [29]:lt(V,V5,Out) -> [lt(V',V5',Out')] 
0
#### Cost of chains of lt(V,V5,Out):
* Chain [[29],32]: 0
  with precondition: [Out=2,V>=1,V5>=V+1] 

* Chain [[29],31]: 0
  with precondition: [Out=1,V5>=1,V>=V5] 

* Chain [[29],30]: 0
  with precondition: [Out=0,V>=1,V5>=1] 

* Chain [32]: 0
  with precondition: [V=0,Out=2,V5>=1] 

* Chain [31]: 0
  with precondition: [V5=0,Out=1,V>=0] 

* Chain [30]: 0
  with precondition: [Out=0,V>=0,V5>=0] 


#### Cost of loops [35] 

 * loop 35:partLt(V,V5,Out) -> [partLt(V',V5',Out')] 
1
#### Cost of phase [35]:partLt(V,V5,Out) -> [partLt(V',V5',Out')] 
1*it(35)+0
  Such that:it(35) =< V5
it(35) =< V5-V5'

#### Cost of phase [35]:partLt(V,V5,Out) -> [partLt(V',V5',Out')] 
1*it(35)+0
  Such that:it(35) =< V5
it(35) =< V5-V5'

#### Cost of loops [33,34] 

 * loop 33:partLt(V,V5,Out) -> [partLt(V',V5',Out')] 
1
 * loop 34:partLt(V,V5,Out) -> [partLt(V',V5',Out')] 
1
#### Cost of phase [33,34]:partLt(V,V5,Out) -> [partLt(V',V5',Out')] 
1*it(33)+1*it(34)+0
  Such that:it(34) =< -V+V5
it(34) =< -V+V5+V'-V5'
aux(1) =< V5
aux(2) =< V5-V5'
it(33) =< aux(1)
it(34) =< aux(1)
it(33) =< aux(2)
it(34) =< aux(2)

#### Cost of phase [33,34]:partLt(V,V5,Out) -> [partLt(V',V5',Out')] 
1*it(33)+1*it(34)+0
  Such that:it(34) =< -V+V5
it(34) =< -V+V5+V'-V5'
aux(1) =< V5
aux(2) =< V5-V5'
it(33) =< aux(1)
it(34) =< aux(1)
it(33) =< aux(2)
it(34) =< aux(2)

#### Cost of chains of partLt(V,V5,Out):
* Chain [[35],37]: 1*it(35)+1
  Such that:it(35) =< V5

  with precondition: [V=0,Out=0,V5>=1] 

* Chain [[35],36]: 1*it(35)+1
  Such that:it(35) =< V5

  with precondition: [V=0,Out=0,V5>=1] 

* Chain [[33,34],37]: 1*it(33)+1*it(34)+1
  Such that:it(34) =< -V+V5
aux(3) =< V5
it(34) =< aux(3)
it(33) =< aux(3)

  with precondition: [V>=1,Out>=0,V5>=Out,Out+V5>=2] 

* Chain [[33,34],36]: 1*it(33)+1*it(34)+1
  Such that:it(34) =< -V+V5
aux(4) =< V5
it(34) =< aux(4)
it(33) =< aux(4)

  with precondition: [V>=1,Out>=0,V5>=Out,Out+V5>=2] 

* Chain [37]: 1
  with precondition: [Out=0,V>=0,V5>=0] 

* Chain [36]: 1
  with precondition: [V5=0,Out=0,V>=0] 


#### Cost of loops [38] 

 * loop 38:gr(V,V5,Out) -> [gr(V',V5',Out')] 
0
#### Cost of phase [38]:gr(V,V5,Out) -> [gr(V',V5',Out')] 
0
#### Cost of phase [38]:gr(V,V5,Out) -> [gr(V',V5',Out')] 
0
#### Cost of phase [38]:gr(V,V5,Out) -> [gr(V',V5',Out')] 
0
#### Cost of chains of gr(V,V5,Out):
* Chain [[38],41]: 0
  with precondition: [Out=1,V>=1,V5>=V] 

* Chain [[38],40]: 0
  with precondition: [Out=2,V5>=1,V>=V5+1] 

* Chain [[38],39]: 0
  with precondition: [Out=0,V>=1,V5>=1] 

* Chain [41]: 0
  with precondition: [V=0,Out=1,V5>=0] 

* Chain [40]: 0
  with precondition: [V5=0,Out=2,V>=1] 

* Chain [39]: 0
  with precondition: [Out=0,V>=0,V5>=0] 


#### Cost of loops [42,43,44] 

 * loop 42:partGt(V,V5,Out) -> [partGt(V',V5',Out')] 
1
 * loop 43:partGt(V,V5,Out) -> [partGt(V',V5',Out')] 
1
 * loop 44:partGt(V,V5,Out) -> [partGt(V',V5',Out')] 
1
#### Cost of phase [42,43,44]:partGt(V,V5,Out) -> [partGt(V',V5',Out')] 
2*it(42)+1*it(43)+0
  Such that:aux(8) =< -V+V5
aux(9) =< -V+V5+V'-V5'
aux(10) =< V5
aux(11) =< V5-V5'
it(42) =< aux(8)
it(42) =< aux(9)
it(43) =< aux(9)
it(42) =< aux(10)
it(43) =< aux(10)
it(42) =< aux(11)
it(43) =< aux(11)

#### Cost of phase [42,43,44]:partGt(V,V5,Out) -> [partGt(V',V5',Out')] 
2*it(42)+1*it(43)+0
  Such that:aux(8) =< -V+V5
aux(9) =< -V+V5+V'-V5'
aux(10) =< V5
aux(11) =< V5-V5'
it(42) =< aux(8)
it(42) =< aux(9)
it(43) =< aux(9)
it(42) =< aux(10)
it(43) =< aux(10)
it(42) =< aux(11)
it(43) =< aux(11)

#### Cost of chains of partGt(V,V5,Out):
* Chain [[42,43,44],46]: 2*it(42)+1*it(43)+1
  Such that:aux(8) =< -V+V5
aux(12) =< V5
it(42) =< aux(8)
it(42) =< aux(12)
it(43) =< aux(12)

  with precondition: [V>=0,Out>=0,V5>=Out,2*V5>=Out+2] 

* Chain [[42,43,44],45]: 2*it(42)+1*it(43)+1
  Such that:aux(8) =< -V+V5
aux(13) =< V5
it(42) =< aux(8)
it(42) =< aux(13)
it(43) =< aux(13)

  with precondition: [V>=0,Out>=0,V5>=Out,2*V5>=Out+2] 

* Chain [46]: 1
  with precondition: [Out=0,V>=0,V5>=0] 

* Chain [45]: 1
  with precondition: [V5=0,Out=0,V>=0] 


#### Cost of loops [47,48,49,50,51,52,53,54] 

 * loop 47:quicksort(V,Out) -> [quicksort(V',Out'),quicksort(V'2,Out'2)] 
14*s(32)+2*s(33)+5
  Such that:s(31) =< V
s(32) =< s(31)

 * loop 48:quicksort(V,Out) -> [quicksort(V',Out'),quicksort(V'2,Out'2)] 
14*s(49)+2*s(50)+4
  Such that:s(48) =< V
s(49) =< s(48)

 * loop 49:quicksort(V,Out) -> [quicksort(V',Out'),quicksort(V'2,Out'2)] 
14*s(64)+5
  Such that:s(63) =< V
s(64) =< s(63)

 * loop 50:quicksort(V,Out) -> [quicksort(V',Out'),quicksort(V'2,Out'2)] 
10*s(76)+2*s(77)+5
  Such that:s(75) =< V
s(76) =< s(75)

 * loop 51:quicksort(V,Out) -> [quicksort(V',Out'),quicksort(V'2,Out'2)] 
10*s(89)+2*s(90)+4
  Such that:s(88) =< V
s(89) =< s(88)

 * loop 52:quicksort(V,Out) -> [quicksort(V',Out'),quicksort(V'2,Out'2)] 
10*s(100)+5
  Such that:s(99) =< V
s(100) =< s(99)

 * loop 53:quicksort(V,Out) -> [quicksort(V',Out'),quicksort(V'2,Out'2)] 
14*s(114)+4
  Such that:s(113) =< V
s(114) =< s(113)

 * loop 54:quicksort(V,Out) -> [quicksort(V',Out'),quicksort(V'2,Out'2)] 
10*s(124)+4
  Such that:s(123) =< V
s(124) =< s(123)

#### Cost of phase [47,48,49,50,51,52,53,54]:quicksort(V,Out) -> [] 
26*it(47)+18*it(50)+2*it([55])+14*s(125)+42*s(128)+40*s(133)+0
#### Cost of chains of quicksort(V,Out):
* Chain [56]: 1
  with precondition: [Out=0,V>=0] 

* Chain [55]: 1
  with precondition: [V=Out,V>=1] 

* Chain [multiple([47,48,49,50,51,52,53,54],[[56],[55]])]: 26*it(47)+18*it(50)+2*it([55])+14*s(125)+42*s(128)+40*s(133)+0
  with precondition: [V>=2,Out>=0] 


#### Cost of chains of notEmpty(V,Out):
* Chain [59]: 1
  with precondition: [V=0,Out=1] 

* Chain [58]: 0
  with precondition: [Out=0,V>=0] 

* Chain [57]: 1
  with precondition: [Out=2,V>=1] 


#### Cost of chains of start(V,V5,V31):
* Chain [63]: 168*s(146)+210*s(153)+4126*s(179)+2*s(631)+6
  Such that:aux(120) =< -V+V5
aux(121) =< V
aux(122) =< V5
s(631) =< aux(121)
s(153) =< aux(120)
s(153) =< aux(122)
s(146) =< aux(122)

  with precondition: [V>=0] 

* Chain [62]: 6*s(641)+6*s(642)+1
  Such that:aux(123) =< -V5+V31
aux(124) =< V31
s(641) =< aux(123)
s(641) =< aux(124)
s(642) =< aux(124)

  with precondition: [V=1,V5>=0,V31>=1] 

* Chain [61]: 6*s(651)+6*s(652)+1
  Such that:aux(125) =< -V5+V31
aux(126) =< V31
s(651) =< aux(125)
s(651) =< aux(126)
s(652) =< aux(126)

  with precondition: [V=2,V5>=0,V31>=1] 

* Chain [60]: 6
  with precondition: [V5=0,V>=0] 


Closed-form bounds of start(V,V5,V31): 
-------------------------------------
* Chain [63] with precondition: [V>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [62] with precondition: [V=1,V5>=0,V31>=1] 
    - Upper bound: 6*V31+1+nat(-V5+V31)*6 
    - Complexity: n 
* Chain [61] with precondition: [V=2,V5>=0,V31>=1] 
    - Upper bound: 6*V31+1+nat(-V5+V31)*6 
    - Complexity: n 
* Chain [60] with precondition: [V5=0,V>=0] 
    - Upper bound: 6 
    - Complexity: constant 

### Maximum cost of start(V,V5,V31): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 142 ms.
* Invariants computed in 313 ms.
   - Backward Invariants 135 ms.
   - Transitive Invariants 69 ms.
* Refinement performed in 1332 ms.
* Termination proved in 119 ms.
* Upper bounds computed in 1665 ms.
   - Equation cost structures 1107 ms.
   - Phase cost structures 662 ms.
   - Chain cost structures 117 ms.
   - Solving cost expressions 5 ms.
* Total analysis performed in 3737 ms.


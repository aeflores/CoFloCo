
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [plus/3]
1. recursive [non_tail] : [add0/3]
2. non_recursive  : [start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into plus/3
1. SCC is partially evaluated into add0/3
2. SCC is partially evaluated into start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations plus/3 
* CE 9 is refined into CE [10] 
* CE 7 is refined into CE [11] 
* CE 8 is refined into CE [12] 


#### Refined cost equations plus/3 
* CE 10: plus(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 11: plus(V1,V,Out) = 0
     [V1>=0,V1+1=Out,V=1] 
* CE 12: plus(V1,V,Out) = 0
     [V>=0,V+1=Out,V1=1] 

### Cost equations --> "Loop" of plus/3 
* CEs [10] --> Loop 8 
* CEs [11] --> Loop 9 
* CEs [12] --> Loop 10 

#### Loops of plus/3 
* Loop 8: plus(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 9: plus(V1,V,Out) [V1>=0,V1+1=Out,V=1] 
* Loop 10: plus(V1,V,Out) [V>=0,V+1=Out,V1=1] 

### Ranking functions of CR plus(V1,V,Out) 

#### Partial ranking functions of CR plus(V1,V,Out) 


### Resulting Chains:plus(V1,V,Out) 
* [10]
* [9]
* [8]


### Merging Chains  plus/3 into  External patterns of execution 
* [[10]] --> 1 
* [[9]] --> 2 
* [[8]] --> 3 


### Specialization of cost equations add0/3 
* CE 6 is refined into CE [13] 
* CE 5 is refined into CE [14] 
* CE 4 is refined into CE [15,16,17] 


#### Refined cost equations add0/3 
* CE 13: add0(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 14: add0(A,B,B) = 1
     [B>=0,A=0] 
* CE 15: add0(V1,V,Out) = 1+ add0(V,W1,X1)+ plus(Y1,Z1,Out):1
     [W1>=0,Out>=1,V>=0,Out=X1+1,Out=Z1+1,W1+1=V1,Y1=1] 
* CE 16: add0(V1,V,Out) = 1+ add0(V,W1,X1)+ plus(Y1,Z1,A2):2
     [W1>=0,V>=0,W1+1=V1,X1=1,A2=2,Z1=1,Y1=1,Out=2] 
* CE 17: add0(V1,V,Out) = 1+ add0(V,W1,X1)+ plus(Y1,X1,Z1):3
     [W1>=0,X1>=0,V>=0,W1+1=V1,Z1=0,Y1=1,Out=0] 

### Cost equations --> "Loop" of add0/3 
* CEs [15,16] --> Loop 11 
* CEs [17] --> Loop 12 
* CEs [13] --> Loop 13 
* CEs [14] --> Loop 14 

#### Loops of add0/3 
* Loop 11: add0(V1,V,Out)->  add0(V,A',B')
                  [Out>=1,V>=0,V1>=1,Out=B'+1,V1=A'+1] 
* Loop 12: add0(V1,V,Out)->  add0(V,A',B')
                  [B'>=0,V>=0,V1>=1,V1=A'+1,Out=0] 
* Loop 13: add0(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 14: add0(A,B,B) [B>=0,A=0] 

### Ranking functions of CR add0(V1,V,Out) 
* RF of phase [11,12]: [V1+V]

#### Partial ranking functions of CR add0(V1,V,Out) 
* Partial RF of phase [11,12]:
  - RF of loop [11:1,12:1]:
    V1+V


### Resulting Chains:add0(V1,V,Out) 
* [[11,12],14]
* [[11,12],13]
* [14]
* [13]


### Merging Chains  add0/3 into  External patterns of execution 
* [[14]] --> 1 
* [[13]] --> 2 
* [[13,[11,12]],[14,[11,12]]] --> 3 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [18,19,20] 
* CE 3 is refined into CE [21,22,23] 


#### Refined cost equations start/2 
* CE 18: start(V1,V) = 0+ add0(W1,V,V):1
     [V>=0,W1=0,V1=0] 
* CE 19: start(V1,V) = 0+ add0(V1,V,W1):2
     [V>=0,V1>=0,W1=0] 
* CE 20: start(V1,V) = 0+ add0(V1,V,W1):3
     [W1>=0,V>=0,V1>=1] 
* CE 21: start(V1,V) = 0+ plus(W1,X1,Y1):1
     [Y1>=1,Y1=X1+1,Y1=V+1,W1=1,V1=1] 
* CE 22: start(V1,V) = 0+ plus(W1,X1,Y1):2
     [Y1>=1,Y1=W1+1,Y1=V1+1,X1=1,V=1] 
* CE 23: start(V1,V) = 0+ plus(V1,V,W1):3
     [V>=0,V1>=0,W1=0] 

### Cost equations --> "Loop" of start/2 
* CEs [22] --> Loop 15 
* CEs [21] --> Loop 16 
* CEs [18,19,20,23] --> Loop 17 

#### Loops of start/2 
* Loop 15: start(V1,V) [V1>=0,V=1] 
* Loop 16: start(V1,V) [V>=0,V1=1] 
* Loop 17: start(V1,V) [V>=0,V1>=0] 

### Ranking functions of CR start(V1,V) 

#### Partial ranking functions of CR start(V1,V) 


### Resulting Chains:start(V1,V) 
* [17]
* [16]
* [15]


### Merging Chains  start/2 into  External patterns of execution 
* [[16],[17]] --> 1 
* [[15]] --> 2 


Computing Bounds
=====================================

#### Cost of chains of plus(V1,V,Out):
* Chain [10]: 0
  with precondition: [V1=1,V+1=Out,V>=0] 

* Chain [9]: 0
  with precondition: [V=1,V1+1=Out,V1>=0] 

* Chain [8]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [11,12] 

 * loop 11:add0(V1,V,Out) -> [add0(V1',V',Out')] 
1
 * loop 12:add0(V1,V,Out) -> [add0(V1',V',Out')] 
1
#### Cost of phase [11,12]:add0(V1,V,Out) -> [add0(V1',V',Out')] 
2*it(11)+0
  Such that:aux(1) =< V1+V
aux(2) =< V1+V-V1'-V'
it(11) =< aux(1)
it(11) =< aux(2)

#### Cost of phase [11,12]:add0(V1,V,Out) -> [add0(V1',V',Out')] 
2*it(11)+0
  Such that:aux(1) =< V1+V
aux(2) =< V1+V-V1'-V'
it(11) =< aux(1)
it(11) =< aux(2)

#### Cost of chains of add0(V1,V,Out):
* Chain [[11,12],14]: 2*it(11)+1
  Such that:aux(3) =< V1+V
it(11) =< aux(3)

  with precondition: [V1>=1,V>=0,Out>=0,V+V1>=Out] 

* Chain [[11,12],13]: 2*it(11)+0
  Such that:aux(4) =< V1+V
it(11) =< aux(4)

  with precondition: [V1>=1,V>=0,Out>=0] 

* Chain [14]: 1
  with precondition: [V1=0,V=Out,V>=0] 

* Chain [13]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of chains of start(V1,V):
* Chain [17]: 4*s(6)+1
  Such that:s(5) =< V1+V
s(6) =< s(5)

  with precondition: [V1>=0,V>=0] 

* Chain [16]: 0
  with precondition: [V1=1,V>=0] 

* Chain [15]: 0
  with precondition: [V=1,V1>=0] 


Closed-form bounds of start(V1,V): 
-------------------------------------
* Chain [17] with precondition: [V1>=0,V>=0] 
    - Upper bound: 4*V1+4*V+1 
    - Complexity: n 
* Chain [16] with precondition: [V1=1,V>=0] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [15] with precondition: [V=1,V1>=0] 
    - Upper bound: 0 
    - Complexity: constant 

### Maximum cost of start(V1,V): 4*V1+4*V+1 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 16 ms.
* Invariants computed in 45 ms.
   - Backward Invariants 23 ms.
   - Transitive Invariants 9 ms.
* Refinement performed in 84 ms.
* Termination proved in 8 ms.
* Upper bounds computed in 67 ms.
   - Equation cost structures 27 ms.
   - Phase cost structures 21 ms.
   - Chain cost structures 20 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 256 ms.


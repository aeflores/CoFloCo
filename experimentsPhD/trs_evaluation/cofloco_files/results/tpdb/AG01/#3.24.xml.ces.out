
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive [multiple] : [f/2]
1. non_recursive  : [start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into f/2
1. SCC is partially evaluated into start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations f/2 
* CE 5 is refined into CE [6] 
* CE 4 is refined into CE [7] 
* CE 3 is refined into CE [8] 


#### Refined cost equations f/2 
* CE 6: f(V,Out) = 1+ f(W,X)+ f(X,Out)
     [V>=2,V=W+1] 
* CE 7: f(V,Out) = 1
     [Out=1,V=1] 
* CE 8: f(V,Out) = 1
     [Out=1,V=0] 

### Cost equations --> "Loop" of f/2 
* CEs [7] --> Loop 5 
* CEs [8] --> Loop 6 
* CEs [6] --> Loop 7 

#### Loops of f/2 
* Loop 5: f(V,Out) [Out=1,V=1] 
* Loop 6: f(V,Out) [Out=1,V=0] 
* Loop 7: f(V,Out)->  f(V',Out')  f(Out',Out)
                  [V>=2,V=V'+1] 

### Ranking functions of CR f(V,Out) 

#### Partial ranking functions of CR f(V,Out) 
* Partial RF of phase [7]:
  - RF of loop [7:1]:
    V-1 depends on loops [7:2] 


### Resulting Chains:f(V,Out) 
* [multiple([7],[[],[6],[5]])]...
* [6]
* [5]


### Merging Chains  f/2 into  External patterns of execution 
* [[6]] --> 1 
* [[5]] --> 2 
* [[multiple([7],[[],[6],[5]])]] --> 3 


### Specialization of cost equations start/1 
* CE 2 is refined into CE [9,10,11] 


#### Refined cost equations start/1 
* CE 9: start(V) = 0+ f(W,X):1
     [X=1,W=0,V=0] 
* CE 10: start(V) = 0+ f(W,X):2
     [X=1,W=1,V=1] 
* CE 11: start(V) = 0+ f(V,W):3
     [V>=2] 

### Cost equations --> "Loop" of start/1 
* CEs [11] --> Loop 8 
* CEs [10] --> Loop 9 
* CEs [9] --> Loop 10 

#### Loops of start/1 
* Loop 8: start(V) [V>=2] 
* Loop 9: start(V) [V=1] 
* Loop 10: start(V) [V=0] 

### Ranking functions of CR start(V) 

#### Partial ranking functions of CR start(V) 


### Resulting Chains:start(V) 
* [10]
* [9]
* [8]...


### Merging Chains  start/1 into  External patterns of execution 
* [[10]] --> 1 
* [[9]] --> 2 
* [[8]] --> 3 


Computing Bounds
=====================================

#### Cost of loops [7] 

 * loop 7:f(V,Out) -> [f(V',Out'),f(V'2,Out'2)] 
1
#### Cost of phase [7]:f(V,Out) -> [] 
1*it(7)+2*it([5])+0
#### Cost of chains of f(V,Out):
* Chain [multiple([7],[[],[6],[5]])]...: 1*it(7)+2*it([5])+0
  with precondition: [V>=2] 

* Chain [6]: 1
  with precondition: [V=0,Out=1] 

* Chain [5]: 1
  with precondition: [V=1,Out=1] 


#### Cost of chains of start(V):
* Chain [10]: 1
  with precondition: [V=0] 

* Chain [9]: 1
  with precondition: [V=1] 

* Chain [8]...: 3*s(1)+0
  with precondition: [V>=2] 


Closed-form bounds of start(V): 
-------------------------------------
* Chain [10] with precondition: [V=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [9] with precondition: [V=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [8]... with precondition: [V>=2] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of start(V): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 2 ms.
* Invariants computed in 2 ms.
   - Backward Invariants 0 ms.
   - Transitive Invariants 1 ms.
* Refinement performed in 11 ms.
* Termination proved in 1 ms.
* Upper bounds computed in 10 ms.
   - Equation cost structures 1 ms.
   - Phase cost structures 8 ms.
   - Chain cost structures 0 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 34 ms.


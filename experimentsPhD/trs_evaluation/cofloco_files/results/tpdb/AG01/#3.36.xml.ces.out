
Preprocessing Cost Relations
=====================================
1. SCC does not have a single cut point : [f/2,g/2]  
 Merged into fg/2

#### Computed strongly connected components 
0. recursive  : [minus/3]
2. non_recursive  : [start/2]
1. recursive [non_tail,multiple] : [fg/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into minus/3
2. SCC is partially evaluated into start/2
1. SCC is partially evaluated into fg/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations minus/3 
* CE 6 is refined into CE [11] 
* CE 4 is refined into CE [12] 
* CE 5 is refined into CE [13] 


#### Refined cost equations minus/3 
* CE 11: minus(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 12: minus(A,B,A) = 1
     [A>=0,B=0] 
* CE 13: minus(V1,V,Out) = 1+ minus(W1,X1,Out)
     [X1>=0,W1>=0,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of minus/3 
* CEs [13] --> Loop 8 
* CEs [11] --> Loop 9 
* CEs [12] --> Loop 10 

#### Loops of minus/3 
* Loop 8: minus(V1,V,Out)->  minus(V1',V',Out)
                  [V'>=0,V1'>=0,V'+1=V,V1'+1=V1] 
* Loop 9: minus(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 10: minus(A,B,A) [A>=0,B=0] 

### Ranking functions of CR minus(V1,V,Out) 
* RF of phase [8]: [V,V1]

#### Partial ranking functions of CR minus(V1,V,Out) 
* Partial RF of phase [8]:
  - RF of loop [8:1]:
    V
    V1


### Resulting Chains:minus(V1,V,Out) 
* [[8],10]
* [[8],9]
* [10]
* [9]


### Merging Chains  minus/3 into  External patterns of execution 
* [[10]] --> 1 
* [[9],[9,[8]]] --> 2 
* [[10,[8]]] --> 3 


### Specialization of cost equations fg/2 
* CE 7 is refined into CE [14] 
* CE 9 is refined into CE [15] 
* CE 10 is refined into CE [16] 
* CE 8 is refined into CE [17,18,19] 


#### Refined cost equations fg/2 
* CE 14: fg(A,B) = 1
     [B=1,A=0] 
* CE 15: fg(A,B) = 0
     [A>=0,B=0] 
* CE 16: fg(A,B) = 1
     [B=0,A=0] 
* CE 17: fg(A,A) = 1+ fg(B,C)+ fg(C,D)+ minus(A,E,A):1
     [A>=1,A=B+1,D=0,E=0] 
* CE 18: fg(A,B) = 1+ fg(C,D)+ fg(D,E)+ minus(A,E,F):2
     [E>=0,A>=1,A=C+1,F=0,B=0] 
* CE 19: fg(A,B) = 1+ fg(C,D)+ fg(D,E)+ minus(F,E,B):3
     [B>=0,E>=1,B+E=C+1,B+E=F,B+E=A] 

### Cost equations --> "Loop" of fg/2 
* CEs [19] --> Loop 11 
* CEs [17] --> Loop 12 
* CEs [18] --> Loop 13 
* CEs [14] --> Loop 14 
* CEs [15,16] --> Loop 15 

#### Loops of fg/2 
* Loop 11: fg(A,B)->  fg(A',B')  fg(B',A'2)
                  [A>=B+1,B>=0,B+A'2=A,A=A'+1] 
* Loop 12: fg(A,A)->  fg(A',B')  fg(B',A'2)
                  [A>=1,A=A'+1,A'2=0] 
* Loop 13: fg(A,B)->  fg(A',B')  fg(B',A'2)
                  [A'2>=0,A>=1,A=A'+1,B=0] 
* Loop 14: fg(A,B) [B=1,A=0] 
* Loop 15: fg(A,B) [A>=0,B=0] 

### Ranking functions of CR fg(A,B) 

#### Partial ranking functions of CR fg(A,B) 
* Partial RF of phase [11,12,13]:
  - RF of loop [11:1,12:1,13:1]:
    A depends on loops [11:2,12:2,13:2] 


### Resulting Chains:fg(A,B) 
* [multiple([11,12,13],[[],[15],[14]])]...
* [15]
* [14]


### Merging Chains  fg/2 into  External patterns of execution 
* [[14]] --> 1 
* [[15]] --> 2 
* [[multiple([11,12,13],[[],[15],[14]])]] --> 3 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [20,21,22] 
* CE 3 is refined into CE [23,24,25] 


#### Refined cost equations start/2 
* CE 20: start(V1,V) = 0+ minus(V1,W1,V1):1
     [V1>=0,W1=0,V=0] 
* CE 21: start(V1,V) = 0+ minus(V1,V,W1):2
     [V>=0,V1>=0,W1=0] 
* CE 22: start(V1,V) = 0+ minus(W1,V,X1):3
     [X1>=0,V>=1,V+X1=W1,V+X1=V1] 
* CE 23: start(V1,V) = 0+ fg(W1,X1):1
     [X1=1,W1=0,V1=0] 
* CE 24: start(V1,V) = 0+ fg(V1,W1):2
     [V1>=0,W1=0] 
* CE 25: start(V1,V) = 0+ fg(V1,W1):3
     [V1>=W1,W1>=0,V1>=1] 

### Cost equations --> "Loop" of start/2 
* CEs [25] --> Loop 16 
* CEs [20] --> Loop 17 
* CEs [21,22,23,24] --> Loop 18 

#### Loops of start/2 
* Loop 16: start(V1,V) [V1>=1] 
* Loop 17: start(V1,V) [V1>=0,V=0] 
* Loop 18: start(V1,V) [V1>=0] 

### Ranking functions of CR start(V1,V) 

#### Partial ranking functions of CR start(V1,V) 


### Resulting Chains:start(V1,V) 
* [18]
* [17]
* [16]...


### Merging Chains  start/2 into  External patterns of execution 
* [[17],[18]] --> 1 
* [[16]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [8] 

 * loop 8:minus(V1,V,Out) -> [minus(V1',V',Out')] 
1
#### Cost of phase [8]:minus(V1,V,Out) -> [minus(V1',V',Out')] 
1*it(8)+0
  Such that:it(8) =< V1
it(8) =< V1-V1'
it(8) =< V
it(8) =< V-V'

#### Cost of phase [8]:minus(V1,V,Out) -> [minus(V1',V',Out')] 
1*it(8)+0
  Such that:it(8) =< V1
it(8) =< V1-V1'
it(8) =< V
it(8) =< V-V'

#### Cost of chains of minus(V1,V,Out):
* Chain [[8],10]: 1*it(8)+1
  Such that:it(8) =< V

  with precondition: [V1=Out+V,V>=1,V1>=V] 

* Chain [[8],9]: 1*it(8)+0
  Such that:it(8) =< V

  with precondition: [Out=0,V1>=1,V>=1] 

* Chain [10]: 1
  with precondition: [V=0,V1=Out,V1>=0] 

* Chain [9]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [11,12,13] 

 * loop 11:fg(A,B) -> [fg(A',B'),fg(A'2,B'2)] 
1*s(3)+2
  Such that:s(3) =< A'+1

 * loop 12:fg(A,B) -> [fg(A',B'),fg(A'2,B'2)] 
2
 * loop 13:fg(A,B) -> [fg(A',B'),fg(A'2,B'2)] 
1*s(5)+1
#### Cost of phase [11,12,13]:fg(A,B) -> [] 
6*it(11)+2*it([14])+1*s(6)+0
#### Cost of chains of fg(A,B):
* Chain [multiple([11,12,13],[[],[15],[14]])]...: 6*it(11)+2*it([14])+1*s(6)+0
  with precondition: [A>=B,B>=0,A>=1] 

* Chain [15]: 1
  with precondition: [B=0,A>=0] 

* Chain [14]: 1
  with precondition: [A=0,B=1] 


#### Cost of chains of start(V1,V):
* Chain [18]: 2*s(8)+1
  Such that:aux(4) =< V
s(8) =< aux(4)

  with precondition: [V1>=0] 

* Chain [17]: 1
  with precondition: [V=0,V1>=0] 

* Chain [16]...: 9*s(10)+0
  with precondition: [V1>=1] 


Closed-form bounds of start(V1,V): 
-------------------------------------
* Chain [18] with precondition: [V1>=0] 
    - Upper bound: nat(V)*2+1 
    - Complexity: n 
* Chain [17] with precondition: [V=0,V1>=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [16]... with precondition: [V1>=1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of start(V1,V): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 6 ms.
* Invariants computed in 16 ms.
   - Backward Invariants 5 ms.
   - Transitive Invariants 4 ms.
* Refinement performed in 28 ms.
* Termination proved in 6 ms.
* Upper bounds computed in 43 ms.
   - Equation cost structures 9 ms.
   - Phase cost structures 29 ms.
   - Chain cost structures 6 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 114 ms.



Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [app/3]
1. recursive  : [concat/3]
2. recursive  : [fun/3]
3. recursive  : [minus/3]
4. recursive  : [quot/3]
5. recursive [non_tail] : [reverse/2]
6. recursive  : [shuffle/2]
7. non_recursive  : [start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into app/3
1. SCC is partially evaluated into concat/3
2. SCC is partially evaluated into fun/3
3. SCC is partially evaluated into minus/3
4. SCC is partially evaluated into quot/3
5. SCC is partially evaluated into reverse/2
6. SCC is partially evaluated into shuffle/2
7. SCC is partially evaluated into start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations app/3 
* CE 16 is refined into CE [26] 
* CE 15 is refined into CE [27] 


#### Refined cost equations app/3 
* CE 26: app(V,V1,Out) = 1+ app(W1,V1,X1)
     [V+X1>=Out,Out>=X1+1,V1>=0,V+X1=Out+W1] 
* CE 27: app(A,B,B) = 1
     [B>=0,A=0] 

### Cost equations --> "Loop" of app/3 
* CEs [27] --> Loop 18 
* CEs [26] --> Loop 19 

#### Loops of app/3 
* Loop 18: app(A,B,B) [B>=0,A=0] 
* Loop 19: app(V,V1,Out)->  app(V',V1,Out')
                  [V+Out'>=Out,Out>=Out'+1,V1>=0,V+Out'=Out+V'] 

### Ranking functions of CR app(V,V1,Out) 
* RF of phase [19]: [V]

#### Partial ranking functions of CR app(V,V1,Out) 
* Partial RF of phase [19]:
  - RF of loop [19:1]:
    V


### Resulting Chains:app(V,V1,Out) 
* [[19],18]
* [18]


### Merging Chains  app/3 into  External patterns of execution 
* [[18]] --> 1 
* [[18,[19]]] --> 2 


### Specialization of cost equations concat/3 
* CE 22 is refined into CE [28] 
* CE 21 is refined into CE [29] 


#### Refined cost equations concat/3 
* CE 28: concat(V,V1,Out) = 1+ concat(W1,V1,X1)
     [V+X1>=Out,Out>=X1+1,V1>=0,V+X1=Out+W1] 
* CE 29: concat(A,B,B) = 1
     [B>=0,A=0] 

### Cost equations --> "Loop" of concat/3 
* CEs [29] --> Loop 20 
* CEs [28] --> Loop 21 

#### Loops of concat/3 
* Loop 20: concat(A,B,B) [B>=0,A=0] 
* Loop 21: concat(V,V1,Out)->  concat(V',V1,Out')
                  [V+Out'>=Out,Out>=Out'+1,V1>=0,V+Out'=Out+V'] 

### Ranking functions of CR concat(V,V1,Out) 
* RF of phase [21]: [V]

#### Partial ranking functions of CR concat(V,V1,Out) 
* Partial RF of phase [21]:
  - RF of loop [21:1]:
    V


### Resulting Chains:concat(V,V1,Out) 
* [[21],20]
* [20]


### Merging Chains  concat/3 into  External patterns of execution 
* [[20]] --> 1 
* [[20,[21]]] --> 2 


### Specialization of cost equations fun/3 
* CE 25 is refined into CE [30,31,32,33] 
* CE 23 is refined into CE [34] 
* CE 24 is refined into CE [35] 


#### Refined cost equations fun/3 
* CE 30: fun(V,V1,Out) = 1+ concat(W1,X1,X1):1+ concat(Y1,Z1,Z1):1+ fun(X1,Z1,Out)
     [Z1>=0,X1>=0,Z1+1=V1,X1+1=V,Y1=0,W1=0] 
* CE 31: fun(V,V1,Out) = 1+ concat(W1,X1,X1):1+ concat(Y1,Z1,A2):2+ fun(X1,A2,Out)
     [A2>=Y1,Y1>=1,X1>=0,A2=Y1+Z1,A2+1=V1,X1+1=V,W1=0] 
* CE 32: fun(V,V1,Out) = 1+ concat(W1,X1,Y1):2+ concat(Z1,A2,A2):1+ fun(Y1,A2,Out)
     [Y1>=W1,A2>=0,W1>=1,Y1=W1+X1,A2+1=V1,Y1+1=V,Z1=0] 
* CE 33: fun(V,V1,Out) = 1+ concat(W1,X1,Y1):2+ concat(Z1,A2,B2):2+ fun(Y1,B2,Out)
     [B2>=Z1,Y1>=W1,Z1>=1,W1>=1,B2=Z1+A2,Y1=W1+X1,B2+1=V1,Y1+1=V] 
* CE 34: fun(V,V1,Out) = 1
     [V>=0,Out=0,V1=0] 
* CE 35: fun(V,V1,Out) = 1
     [V1>=1,Out=1,V=0] 

### Cost equations --> "Loop" of fun/3 
* CEs [34] --> Loop 22 
* CEs [35] --> Loop 23 
* CEs [30,31,32,33] --> Loop 24 

#### Loops of fun/3 
* Loop 22: fun(V,V1,Out) [V>=0,Out=0,V1=0] 
* Loop 23: fun(V,V1,Out) [V1>=1,Out=1,V=0] 
* Loop 24: fun(V,V1,Out)->  fun(V',V1',Out)
                  [V1>=1,V>=1,V1=V1'+1,V=V'+1] 

### Ranking functions of CR fun(V,V1,Out) 
* RF of phase [24]: [V,V1]

#### Partial ranking functions of CR fun(V,V1,Out) 
* Partial RF of phase [24]:
  - RF of loop [24:1]:
    V
    V1


### Resulting Chains:fun(V,V1,Out) 
* [[24],23]
* [[24],22]
* [23]
* [22]


### Merging Chains  fun/3 into  External patterns of execution 
* [[23]] --> 1 
* [[22]] --> 2 
* [[22,[24]]] --> 3 
* [[23,[24]]] --> 4 


### Specialization of cost equations minus/3 
* CE 11 is refined into CE [36] 
* CE 9 is refined into CE [37] 
* CE 10 is refined into CE [38] 


#### Refined cost equations minus/3 
* CE 36: minus(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 37: minus(A,B,A) = 1
     [A>=0,B=0] 
* CE 38: minus(V,V1,Out) = 1+ minus(W1,X1,Out)
     [X1>=0,W1>=0,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of minus/3 
* CEs [38] --> Loop 25 
* CEs [36] --> Loop 26 
* CEs [37] --> Loop 27 

#### Loops of minus/3 
* Loop 25: minus(V,V1,Out)->  minus(V',V1',Out)
                  [V1'>=0,V'>=0,V1'+1=V1,V'+1=V] 
* Loop 26: minus(V,V1,Out) [V1>=0,V>=0,Out=0] 
* Loop 27: minus(A,B,A) [A>=0,B=0] 

### Ranking functions of CR minus(V,V1,Out) 
* RF of phase [25]: [V,V1]

#### Partial ranking functions of CR minus(V,V1,Out) 
* Partial RF of phase [25]:
  - RF of loop [25:1]:
    V
    V1


### Resulting Chains:minus(V,V1,Out) 
* [[25],27]
* [[25],26]
* [27]
* [26]


### Merging Chains  minus/3 into  External patterns of execution 
* [[27]] --> 1 
* [[26],[26,[25]]] --> 2 
* [[27,[25]]] --> 3 


### Specialization of cost equations quot/3 
* CE 12 is refined into CE [39] 
* CE 14 is refined into CE [40] 
* CE 13 is refined into CE [41,42,43] 


#### Refined cost equations quot/3 
* CE 39: quot(V,V1,Out) = 1
     [V1>=1,Out=0,V=0] 
* CE 40: quot(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 41: quot(V,V1,Out) = 1+ minus(W1,X1,W1):1+ quot(W1,Y1,Z1)
     [W1>=0,Z1+1=Out,W1+1=V,Y1=1,X1=0,V1=1] 
* CE 42: quot(V,V1,Out) = 1+ minus(W1,X1,Y1):2+ quot(Z1,A2,B2)
     [X1>=0,W1>=0,X1+1=A2,B2+1=Out,X1+1=V1,W1+1=V,Z1=0,Y1=0] 
* CE 43: quot(V,V1,Out) = 1+ minus(W1,X1,Y1):3+ quot(Y1,Z1,A2)
     [Y1>=0,X1>=1,X1+Y1=W1,X1+Y1+1=V,X1+1=Z1,A2+1=Out,X1+1=V1] 

### Cost equations --> "Loop" of quot/3 
* CEs [43] --> Loop 28 
* CEs [42] --> Loop 29 
* CEs [41] --> Loop 30 
* CEs [39,40] --> Loop 31 

#### Loops of quot/3 
* Loop 28: quot(V,V1,Out)->  quot(V',V1,Out')
                  [V>=V1,V1>=2,V=V1+V',Out=Out'+1] 
* Loop 29: quot(V,V1,Out)->  quot(V',V1,Out')
                  [V1>=1,V>=1,Out=Out'+1,V'=0] 
* Loop 30: quot(V,V1,Out)->  quot(V',V1',Out')
                  [V>=1,Out=Out'+1,V=V'+1,V1'=1,V1=1] 
* Loop 31: quot(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR quot(V,V1,Out) 
* RF of phase [28]: [V-1,V-V1+1]
* RF of phase [30]: [V]

#### Partial ranking functions of CR quot(V,V1,Out) 
* Partial RF of phase [28]:
  - RF of loop [28:1]:
    V-1
    V-V1+1
* Partial RF of phase [30]:
  - RF of loop [30:1]:
    V


### Resulting Chains:quot(V,V1,Out) 
* [[30],31]
* [[30],29,31]
* [[28],31]
* [[28],29,31]
* [31]
* [29,31]


### Merging Chains  quot/3 into  External patterns of execution 
* [[31,29,[30]],[31,[30]]] --> 1 
* [[31]] --> 2 
* [[31,29]] --> 3 
* [[31,[28]]] --> 4 
* [[31,29,[28]]] --> 5 


### Specialization of cost equations reverse/2 
* CE 18 is refined into CE [44,45] 
* CE 17 is refined into CE [46] 


#### Refined cost equations reverse/2 
* CE 44: reverse(V,Out) = 1+ reverse(W,X)+ app(Y,Out,Out):1
     [V>=Out,Out>=1,Out+W=V,X=0,Y=0] 
* CE 45: reverse(V,Out) = 1+ reverse(W,X)+ app(X,Y,Out):2
     [V+X>=Out,Out>=X+1,X>=1,Out+W=V+X,Out=X+Y] 
* CE 46: reverse(V,Out) = 1
     [Out=0,V=0] 

### Cost equations --> "Loop" of reverse/2 
* CEs [46] --> Loop 32 
* CEs [45] --> Loop 33 
* CEs [44] --> Loop 34 

#### Loops of reverse/2 
* Loop 32: reverse(V,Out) [Out=0,V=0] 
* Loop 33: reverse(V,Out)->  reverse(V',Out')
                  [Out+V'>=V+1,V>=V'+1,V'>=0,V+Out'=Out+V'] 
* Loop 34: reverse(V,Out)->  reverse(V',Out')
                  [V>=Out,Out>=1,V=Out+V',Out'=0] 

### Ranking functions of CR reverse(V,Out) 
* RF of phase [33]: [V]

#### Partial ranking functions of CR reverse(V,Out) 
* Partial RF of phase [33]:
  - RF of loop [33:1]:
    V


### Resulting Chains:reverse(V,Out) 
* [[33],34,32]
* [34,32]
* [32]


### Merging Chains  reverse/2 into  External patterns of execution 
* [[32]] --> 1 
* [[32,34],[32,34,[33]]] --> 2 


### Specialization of cost equations shuffle/2 
* CE 20 is refined into CE [47,48] 
* CE 19 is refined into CE [49] 


#### Refined cost equations shuffle/2 
* CE 47: shuffle(V,Out) = 1+ reverse(W,X):1+ shuffle(Y,Z)
     [V>=1,V+Z=Out,Y=0,X=0,W=0] 
* CE 48: shuffle(V,Out) = 1+ reverse(W,W):2+ shuffle(W,X)
     [V>=W+1,W>=1,Out+W=V+X] 
* CE 49: shuffle(V,Out) = 1
     [Out=0,V=0] 

### Cost equations --> "Loop" of shuffle/2 
* CEs [49] --> Loop 35 
* CEs [48] --> Loop 36 
* CEs [47] --> Loop 37 

#### Loops of shuffle/2 
* Loop 35: shuffle(V,Out) [Out=0,V=0] 
* Loop 36: shuffle(V,Out)->  shuffle(V',Out')
                  [V>=V'+1,V'>=1,V+Out'=Out+V'] 
* Loop 37: shuffle(V,Out)->  shuffle(V',Out')
                  [V>=1,V+Out'=Out,V'=0] 

### Ranking functions of CR shuffle(V,Out) 
* RF of phase [36]: [V-1]

#### Partial ranking functions of CR shuffle(V,Out) 
* Partial RF of phase [36]:
  - RF of loop [36:1]:
    V-1


### Resulting Chains:shuffle(V,Out) 
* [[36],37,35]
* [37,35]
* [35]


### Merging Chains  shuffle/2 into  External patterns of execution 
* [[35]] --> 1 
* [[35,37],[35,37,[36]]] --> 2 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [50,51,52] 
* CE 3 is refined into CE [53,54,55,56,57] 
* CE 4 is refined into CE [58,59] 
* CE 5 is refined into CE [60,61] 
* CE 6 is refined into CE [62,63] 
* CE 7 is refined into CE [64,65] 
* CE 8 is refined into CE [66,67,68,69] 


#### Refined cost equations start/2 
* CE 50: start(V,V1) = 0+ minus(V,W1,V):1
     [V>=0,W1=0,V1=0] 
* CE 51: start(V,V1) = 0+ minus(V,V1,W1):2
     [V1>=0,V>=0,W1=0] 
* CE 52: start(V,V1) = 0+ minus(W1,V1,X1):3
     [X1>=0,V1>=1,V1+X1=W1,V1+X1=V] 
* CE 53: start(V,V1) = 0+ quot(V,W1,X1):1
     [V>=X1,X1>=1,W1=1,V1=1] 
* CE 54: start(V,V1) = 0+ quot(V,V1,W1):2
     [V1>=0,V>=0,W1=0] 
* CE 55: start(V,V1) = 0+ quot(V,V1,W1):3
     [V1>=1,V>=1,W1=1] 
* CE 56: start(V,V1) = 0+ quot(V,V1,W1):4
     [V+2>=2*W1+V1,W1>=1,V1>=2] 
* CE 57: start(V,V1) = 0+ quot(V,V1,W1):5
     [V+3>=2*W1+V1,W1>=2,V1>=2] 
* CE 58: start(V,V1) = 0+ app(W1,V1,V1):1
     [V1>=0,W1=0,V=0] 
* CE 59: start(V,V1) = 0+ app(V,W1,X1):2
     [X1>=V,V>=1,X1=V+W1,X1=V+V1] 
* CE 60: start(V,V1) = 0+ reverse(W1,X1):1
     [X1=0,W1=0,V=0] 
* CE 61: start(V,V1) = 0+ reverse(V,V):2
     [V>=1] 
* CE 62: start(V,V1) = 0+ shuffle(W1,X1):1
     [X1=0,W1=0,V=0] 
* CE 63: start(V,V1) = 0+ shuffle(V,V):2
     [V>=1] 
* CE 64: start(V,V1) = 0+ concat(W1,V1,V1):1
     [V1>=0,W1=0,V=0] 
* CE 65: start(V,V1) = 0+ concat(V,W1,X1):2
     [X1>=V,V>=1,X1=V+W1,X1=V+V1] 
* CE 66: start(V,V1) = 0+ fun(W1,V1,X1):1
     [V1>=1,X1=1,W1=0,V=0] 
* CE 67: start(V,V1) = 0+ fun(V,W1,X1):2
     [V>=0,X1=0,W1=0,V1=0] 
* CE 68: start(V,V1) = 0+ fun(V,V1,W1):3
     [V>=V1,V1>=1,W1=0] 
* CE 69: start(V,V1) = 0+ fun(V,V1,W1):4
     [V1>=V+1,V>=1,W1=1] 

### Cost equations --> "Loop" of start/2 
* CEs [53,61,63] --> Loop 38 
* CEs [50,51,52,54,55,56,57,59,65,67,68,69] --> Loop 39 
* CEs [58,60,62,64,66] --> Loop 40 

#### Loops of start/2 
* Loop 38: start(V,V1) [V>=1] 
* Loop 39: start(V,V1) [V1>=0,V>=0] 
* Loop 40: start(V,V1) [V=0] 

### Ranking functions of CR start(V,V1) 

#### Partial ranking functions of CR start(V,V1) 


### Resulting Chains:start(V,V1) 
* [40]
* [39]
* [38]


### Merging Chains  start/2 into  External patterns of execution 
* [[40]] --> 1 
* [[39]] --> 2 
* [[38]] --> 3 


Computing Bounds
=====================================

#### Cost of loops [19] 

 * loop 19:app(V,V1,Out) -> [app(V',V1',Out')] 
1
#### Cost of phase [19]:app(V,V1,Out) -> [app(V',V1',Out')] 
1*it(19)+0
  Such that:it(19) =< V
it(19) =< V-V'

#### Cost of chains of app(V,V1,Out):
* Chain [[19],18]: 1*it(19)+1
  Such that:it(19) =< -V1+Out

  with precondition: [V+V1=Out,V>=1,V1>=0] 

* Chain [18]: 1
  with precondition: [V=0,V1=Out,V1>=0] 


#### Cost of loops [21] 

 * loop 21:concat(V,V1,Out) -> [concat(V',V1',Out')] 
1
#### Cost of phase [21]:concat(V,V1,Out) -> [concat(V',V1',Out')] 
1*it(21)+0
  Such that:it(21) =< V
it(21) =< V-V'

#### Cost of chains of concat(V,V1,Out):
* Chain [[21],20]: 1*it(21)+1
  Such that:it(21) =< -V1+Out

  with precondition: [V+V1=Out,V>=1,V1>=0] 

* Chain [20]: 1
  with precondition: [V=0,V1=Out,V1>=0] 


#### Cost of loops [24] 

 * loop 24:fun(V,V1,Out) -> [fun(V',V1',Out')] 
2*s(8)+2*s(7)+3
  Such that:s(5) =< V'
s(6) =< V1'
s(7) =< s(5)
s(8) =< s(6)

#### Cost of phase [24]:fun(V,V1,Out) -> [fun(V',V1',Out')] 
3*it(24)+2*s(9)+2*s(10)+0
  Such that:it(24) =< V-V'
it(24) =< V1-V1'
aux(5) =< V
aux(6) =< V1
it(24) =< aux(5)
it(24) =< aux(6)
s(11) =< it(24)*aux(6)
s(12) =< it(24)*aux(5)
s(10) =< s(12)
s(9) =< s(11)

#### Cost of phase [24]:fun(V,V1,Out) -> [fun(V',V1',Out')] 
3*it(24)+2*s(9)+2*s(10)+0
  Such that:it(24) =< V-V'
it(24) =< V1-V1'
aux(5) =< V
aux(6) =< V1
it(24) =< aux(5)
it(24) =< aux(6)
s(11) =< it(24)*aux(6)
s(12) =< it(24)*aux(5)
s(10) =< s(12)
s(9) =< s(11)

#### Cost of chains of fun(V,V1,Out):
* Chain [[24],23]: 3*it(24)+2*s(9)+2*s(10)+1
  Such that:aux(6) =< V1
aux(7) =< V
it(24) =< aux(7)
it(24) =< aux(6)
s(11) =< it(24)*aux(6)
s(12) =< it(24)*aux(7)
s(10) =< s(12)
s(9) =< s(11)

  with precondition: [Out=1,V>=1,V1>=V+1] 

* Chain [[24],22]: 3*it(24)+2*s(9)+2*s(10)+1
  Such that:aux(5) =< V
aux(8) =< V1
it(24) =< aux(8)
it(24) =< aux(5)
s(11) =< it(24)*aux(8)
s(12) =< it(24)*aux(5)
s(10) =< s(12)
s(9) =< s(11)

  with precondition: [Out=0,V1>=1,V>=V1] 

* Chain [23]: 1
  with precondition: [V=0,Out=1,V1>=1] 

* Chain [22]: 1
  with precondition: [V1=0,Out=0,V>=0] 


#### Cost of loops [25] 

 * loop 25:minus(V,V1,Out) -> [minus(V',V1',Out')] 
1
#### Cost of phase [25]:minus(V,V1,Out) -> [minus(V',V1',Out')] 
1*it(25)+0
  Such that:it(25) =< V
it(25) =< V-V'
it(25) =< V1
it(25) =< V1-V1'

#### Cost of phase [25]:minus(V,V1,Out) -> [minus(V',V1',Out')] 
1*it(25)+0
  Such that:it(25) =< V
it(25) =< V-V'
it(25) =< V1
it(25) =< V1-V1'

#### Cost of chains of minus(V,V1,Out):
* Chain [[25],27]: 1*it(25)+1
  Such that:it(25) =< V1

  with precondition: [V=Out+V1,V1>=1,V>=V1] 

* Chain [[25],26]: 1*it(25)+0
  Such that:it(25) =< V1

  with precondition: [Out=0,V>=1,V1>=1] 

* Chain [27]: 1
  with precondition: [V1=0,V=Out,V>=0] 

* Chain [26]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [30] 

 * loop 30:quot(V,V1,Out) -> [quot(V',V1',Out')] 
2
#### Cost of phase [30]:quot(V,V1,Out) -> [quot(V',V1',Out')] 
2*it(30)+0
  Such that:it(30) =< V
it(30) =< V-V'

#### Cost of phase [30]:quot(V,V1,Out) -> [quot(V',V1',Out')] 
2*it(30)+0
  Such that:it(30) =< V
it(30) =< V-V'

#### Cost of loops [28] 

 * loop 28:quot(V,V1,Out) -> [quot(V',V1',Out')] 
1*s(16)+2
  Such that:s(16) =< V1'

#### Cost of phase [28]:quot(V,V1,Out) -> [quot(V',V1',Out')] 
2*it(28)+1*s(17)+0
  Such that:it(28) =< V-V1+1
it(28) =< V-V1-V'+V1'
aux(9) =< V
aux(10) =< V-V'
it(28) =< aux(9)
s(17) =< aux(9)
it(28) =< aux(10)
s(17) =< aux(10)

#### Cost of phase [28]:quot(V,V1,Out) -> [quot(V',V1',Out')] 
2*it(28)+1*s(17)+0
  Such that:it(28) =< V-V1+1
it(28) =< V-V1-V'+V1'
aux(9) =< V
aux(10) =< V-V'
it(28) =< aux(9)
s(17) =< aux(9)
it(28) =< aux(10)
s(17) =< aux(10)

#### Cost of chains of quot(V,V1,Out):
* Chain [[30],31]: 2*it(30)+1
  Such that:it(30) =< Out

  with precondition: [V1=1,Out>=1,V>=Out] 

* Chain [[30],29,31]: 2*it(30)+1*s(14)+2
  Such that:s(14) =< 1
it(30) =< Out

  with precondition: [V1=1,Out>=2,V>=Out] 

* Chain [[28],31]: 2*it(28)+1*s(17)+1
  Such that:it(28) =< V-V1+1
aux(11) =< V
it(28) =< aux(11)
s(17) =< aux(11)

  with precondition: [V1>=2,Out>=1,V+2>=2*Out+V1] 

* Chain [[28],29,31]: 2*it(28)+1*s(14)+1*s(17)+2
  Such that:it(28) =< V-V1+1
s(14) =< V1
aux(12) =< V
it(28) =< aux(12)
s(17) =< aux(12)

  with precondition: [V1>=2,Out>=2,V+3>=2*Out+V1] 

* Chain [31]: 1
  with precondition: [Out=0,V>=0,V1>=0] 

* Chain [29,31]: 1*s(14)+2
  Such that:s(14) =< V1

  with precondition: [Out=1,V>=1,V1>=1] 


#### Cost of loops [33] 

 * loop 33:reverse(V,Out) -> [reverse(V',Out')] 
1*s(22)+2
  Such that:s(22) =< V'

#### Cost of phase [33]:reverse(V,Out) -> [reverse(V',Out')] 
2*it(33)+1*s(23)+0
  Such that:it(33) =< V-V'
aux(15) =< V
it(33) =< aux(15)
s(23) =< it(33)*aux(15)

#### Cost of chains of reverse(V,Out):
* Chain [[33],34,32]: 2*it(33)+1*s(23)+3
  Such that:aux(16) =< Out
it(33) =< aux(16)
s(23) =< it(33)*aux(16)

  with precondition: [Out=V,Out>=2] 

* Chain [34,32]: 3
  with precondition: [V=Out,V>=1] 

* Chain [32]: 1
  with precondition: [V=0,Out=0] 


#### Cost of loops [36] 

 * loop 36:shuffle(V,Out) -> [shuffle(V',Out')] 
2*s(31)+1*s(32)+4
  Such that:s(30) =< V'
s(31) =< s(30)
s(32) =< s(31)*s(30)

#### Cost of phase [36]:shuffle(V,Out) -> [shuffle(V',Out')] 
4*it(36)+2*s(33)+1*s(34)+0
  Such that:it(36) =< V-V'
aux(18) =< V
it(36) =< aux(18)
aux(17) =< aux(18)
s(35) =< it(36)*aux(17)
s(33) =< s(35)
s(34) =< s(33)*aux(18)

#### Cost of chains of shuffle(V,Out):
* Chain [[36],37,35]: 4*it(36)+2*s(33)+1*s(34)+3
  Such that:aux(19) =< Out
it(36) =< aux(19)
aux(17) =< aux(19)
s(35) =< it(36)*aux(17)
s(33) =< s(35)
s(34) =< s(33)*aux(19)

  with precondition: [V=Out,V>=2] 

* Chain [37,35]: 3
  with precondition: [V=Out,V>=1] 

* Chain [35]: 1
  with precondition: [V=0,Out=0] 


#### Cost of chains of start(V,V1):
* Chain [40]: 1
  with precondition: [V=0] 

* Chain [39]: 4*s(42)+4*s(45)+4*s(47)+6*s(56)+4*s(59)+4*s(60)+2
  Such that:aux(20) =< V
aux(21) =< V-V1+1
aux(22) =< V1
s(47) =< aux(20)
s(45) =< aux(21)
s(42) =< aux(22)
s(45) =< aux(20)
s(56) =< aux(22)
s(56) =< aux(20)
s(57) =< s(56)*aux(22)
s(58) =< s(56)*aux(20)
s(59) =< s(58)
s(60) =< s(57)

  with precondition: [V>=0,V1>=0] 

* Chain [38]: 1*s(68)+10*s(70)+1*s(73)+2*s(78)+1*s(79)+3
  Such that:s(68) =< 1
aux(23) =< V
s(70) =< aux(23)
s(73) =< s(70)*aux(23)
s(76) =< aux(23)
s(77) =< s(70)*s(76)
s(78) =< s(77)
s(79) =< s(78)*aux(23)

  with precondition: [V>=1] 


Closed-form bounds of start(V,V1): 
-------------------------------------
* Chain [40] with precondition: [V=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [39] with precondition: [V>=0,V1>=0] 
    - Upper bound: 4*V+2+4*V*V1+10*V1+4*V1*V1+nat(V-V1+1)*4 
    - Complexity: n^2 
* Chain [38] with precondition: [V>=1] 
    - Upper bound: 10*V+4+3*V*V+V*V*V 
    - Complexity: n^3 

### Maximum cost of start(V,V1): 4*V+1+max([6*V+2+3*V*V+V*V*V,4*V*nat(V1)+nat(V1)*10+nat(V1)*4*nat(V1)+nat(V-V1+1)*4])+1 
Asymptotic class: n^3 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 15 ms.
* Invariants computed in 51 ms.
   - Backward Invariants 25 ms.
   - Transitive Invariants 9 ms.
* Refinement performed in 93 ms.
* Termination proved in 14 ms.
* Upper bounds computed in 122 ms.
   - Equation cost structures 40 ms.
   - Phase cost structures 48 ms.
   - Chain cost structures 37 ms.
   - Solving cost expressions 2 ms.
* Total analysis performed in 327 ms.


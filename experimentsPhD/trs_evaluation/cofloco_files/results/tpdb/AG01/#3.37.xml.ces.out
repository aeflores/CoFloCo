
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [not/2]
1. recursive [non_tail] : [evenodd/3]
2. non_recursive  : [start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into not/2
1. SCC is partially evaluated into evenodd/3
2. SCC is partially evaluated into start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations not/2 
* CE 6 is refined into CE [11] 
* CE 4 is refined into CE [12] 
* CE 5 is refined into CE [13] 


#### Refined cost equations not/2 
* CE 11: not(V,Out) = 0
     [V>=0,Out=0] 
* CE 12: not(V,Out) = 1
     [Out=1,V=2] 
* CE 13: not(V,Out) = 1
     [Out=2,V=1] 

### Cost equations --> "Loop" of not/2 
* CEs [11] --> Loop 9 
* CEs [12] --> Loop 10 
* CEs [13] --> Loop 11 

#### Loops of not/2 
* Loop 9: not(V,Out) [V>=0,Out=0] 
* Loop 10: not(V,Out) [Out=1,V=2] 
* Loop 11: not(V,Out) [Out=2,V=1] 

### Ranking functions of CR not(V,Out) 

#### Partial ranking functions of CR not(V,Out) 


### Resulting Chains:not(V,Out) 
* [11]
* [10]
* [9]


### Merging Chains  not/2 into  External patterns of execution 
* [[11]] --> 1 
* [[10]] --> 2 
* [[9]] --> 3 


### Specialization of cost equations evenodd/3 
* CE 10 is refined into CE [14] 
* CE 8 is refined into CE [15] 
* CE 9 is refined into CE [16] 
* CE 7 is refined into CE [17,18,19] 


#### Refined cost equations evenodd/3 
* CE 14: evenodd(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 15: evenodd(V,V1,Out) = 1
     [Out=1,V1=1,V=0] 
* CE 16: evenodd(V,V1,Out) = 1+ evenodd(W1,X1,Out)
     [W1>=0,W1+1=V,X1=0,V1=1] 
* CE 17: evenodd(V,V1,Out) = 1+ evenodd(V,W1,X1)+ not(Y1,Z1):1
     [V>=0,X1=1,W1=1,Z1=2,Y1=1,Out=2,V1=0] 
* CE 18: evenodd(V,V1,Out) = 1+ evenodd(V,W1,X1)+ not(Y1,Z1):2
     [V>=0,X1=2,W1=1,Z1=1,Y1=2,Out=1,V1=0] 
* CE 19: evenodd(V,V1,Out) = 1+ evenodd(V,W1,X1)+ not(X1,Y1):3
     [X1>=0,V>=0,W1=1,Y1=0,Out=0,V1=0] 

### Cost equations --> "Loop" of evenodd/3 
* CEs [16] --> Loop 12 
* CEs [17] --> Loop 13 
* CEs [18] --> Loop 14 
* CEs [19] --> Loop 15 
* CEs [14] --> Loop 16 
* CEs [15] --> Loop 17 

#### Loops of evenodd/3 
* Loop 12: evenodd(V,V1,Out)->  evenodd(V',V1',Out)
                  [V>=1,V=V'+1,V1'=0,V1=1] 
* Loop 13: evenodd(V,V1,Out)->  evenodd(V,V1',Out')
                  [V>=0,Out'=1,V1'=1,Out=2,V1=0] 
* Loop 14: evenodd(V,V1,Out)->  evenodd(V,V1',Out')
                  [V>=0,Out'=2,V1'=1,Out=1,V1=0] 
* Loop 15: evenodd(V,V1,Out)->  evenodd(V,V1',Out')
                  [Out'>=0,V>=0,V1'=1,Out=0,V1=0] 
* Loop 16: evenodd(V,V1,Out) [V1>=0,V>=0,Out=0] 
* Loop 17: evenodd(V,V1,Out) [Out=1,V1=1,V=0] 

### Ranking functions of CR evenodd(V,V1,Out) 
* RF of phase [12,13,14,15]: [2*V-V1+1]

#### Partial ranking functions of CR evenodd(V,V1,Out) 
* Partial RF of phase [12,13,14,15]:
  - RF of loop [12:1]:
    V
    V1 depends on loops [13:1,14:1,15:1] 
  - RF of loop [13:1,14:1,15:1]:
    -V1+1 depends on loops [12:1] 


### Resulting Chains:evenodd(V,V1,Out) 
* [[12,13,14,15],17]
* [[12,13,14,15],16]
* [17]
* [16]


### Merging Chains  evenodd/3 into  External patterns of execution 
* [[17]] --> 1 
* [[16],[16,[12,13,14,15]]] --> 2 
* [[17,[12,13,14,15]]] --> 3 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [20,21,22] 
* CE 3 is refined into CE [23,24,25] 


#### Refined cost equations start/2 
* CE 20: start(V,V1) = 0+ not(W1,X1):1
     [X1=2,W1=1,V=1] 
* CE 21: start(V,V1) = 0+ not(W1,X1):2
     [X1=1,W1=2,V=2] 
* CE 22: start(V,V1) = 0+ not(V,W1):3
     [V>=0,W1=0] 
* CE 23: start(V,V1) = 0+ evenodd(W1,X1,Y1):1
     [Y1=1,X1=1,W1=0,V1=1,V=0] 
* CE 24: start(V,V1) = 0+ evenodd(V,V1,W1):2
     [V1>=0,V>=0,W1=0] 
* CE 25: start(V,V1) = 0+ evenodd(V,V1,W1):3
     [V>=V1,W1>=0,V1>=0,2>=W1,1>=V1] 

### Cost equations --> "Loop" of start/2 
* CEs [25] --> Loop 18 
* CEs [21] --> Loop 19 
* CEs [20] --> Loop 20 
* CEs [22,23,24] --> Loop 21 

#### Loops of start/2 
* Loop 18: start(V,V1) [V>=V1,V1>=0,1>=V1] 
* Loop 19: start(V,V1) [V=2] 
* Loop 20: start(V,V1) [V=1] 
* Loop 21: start(V,V1) [V>=0] 

### Ranking functions of CR start(V,V1) 

#### Partial ranking functions of CR start(V,V1) 


### Resulting Chains:start(V,V1) 
* [21]
* [20]
* [19]
* [18]


### Merging Chains  start/2 into  External patterns of execution 
* [[20],[21]] --> 1 
* [[19]] --> 2 
* [[18]] --> 3 


Computing Bounds
=====================================

#### Cost of chains of not(V,Out):
* Chain [11]: 1
  with precondition: [V=1,Out=2] 

* Chain [10]: 1
  with precondition: [V=2,Out=1] 

* Chain [9]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [12,13,14,15] 

 * loop 12:evenodd(V,V1,Out) -> [evenodd(V',V1',Out')] 
1
 * loop 13:evenodd(V,V1,Out) -> [evenodd(V',V1',Out')] 
2
 * loop 14:evenodd(V,V1,Out) -> [evenodd(V',V1',Out')] 
2
 * loop 15:evenodd(V,V1,Out) -> [evenodd(V',V1',Out')] 
1
#### Cost of phase [12,13,14,15]:evenodd(V,V1,Out) -> [evenodd(V',V1',Out')] 
1*it(12)+5*it(13)+0
  Such that:it(12) =< V
it(12) =< V-V'
aux(9) =< 2*V-V1+1
aux(10) =< 2*V-V1-2*V'+V1'
it(12) =< aux(9)
it(13) =< aux(9)
it(12) =< aux(10)
it(13) =< aux(10)

#### Cost of phase [12,13,14,15]:evenodd(V,V1,Out) -> [evenodd(V',V1',Out')] 
1*it(12)+5*it(13)+0
  Such that:it(12) =< V
it(12) =< V-V'
aux(9) =< 2*V-V1+1
aux(10) =< 2*V-V1-2*V'+V1'
it(12) =< aux(9)
it(13) =< aux(9)
it(12) =< aux(10)
it(13) =< aux(10)

#### Cost of chains of evenodd(V,V1,Out):
* Chain [[12,13,14,15],17]: 1*it(12)+5*it(13)+1
  Such that:it(12) =< V
aux(13) =< 2*V-V1+1
it(12) =< aux(13)
it(13) =< aux(13)

  with precondition: [1>=V1,2>=Out,V1>=0,Out>=0,V>=V1] 

* Chain [[12,13,14,15],16]: 1*it(12)+5*it(13)+0
  Such that:it(12) =< V
aux(9) =< 2*V-V1+1
it(12) =< aux(9)
it(13) =< aux(9)

  with precondition: [Out=0,1>=V1,V1>=0,V>=V1] 

* Chain [17]: 1
  with precondition: [V=0,V1=1,Out=1] 

* Chain [16]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of chains of start(V,V1):
* Chain [21]: 1*s(4)+5*s(6)+1
  Such that:s(4) =< V
s(5) =< 2*V-V1+1
s(4) =< s(5)
s(6) =< s(5)

  with precondition: [V>=0] 

* Chain [20]: 1
  with precondition: [V=1] 

* Chain [19]: 1
  with precondition: [V=2] 

* Chain [18]: 1*s(7)+5*s(9)+1
  Such that:s(7) =< V
s(8) =< 2*V-V1+1
s(7) =< s(8)
s(9) =< s(8)

  with precondition: [1>=V1,V1>=0,V>=V1] 


Closed-form bounds of start(V,V1): 
-------------------------------------
* Chain [21] with precondition: [V>=0] 
    - Upper bound: V+1+nat(2*V-V1+1)*5 
    - Complexity: n 
* Chain [20] with precondition: [V=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [19] with precondition: [V=2] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [18] with precondition: [1>=V1,V1>=0,V>=V1] 
    - Upper bound: 11*V-5*V1+6 
    - Complexity: n 

### Maximum cost of start(V,V1): nat(2*V-V1+1)*5+V+1 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 4 ms.
* Invariants computed in 17 ms.
   - Backward Invariants 9 ms.
   - Transitive Invariants 3 ms.
* Refinement performed in 28 ms.
* Termination proved in 6 ms.
* Upper bounds computed in 33 ms.
   - Equation cost structures 11 ms.
   - Phase cost structures 15 ms.
   - Chain cost structures 7 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 101 ms.



Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [app/3]
1. recursive  : [eq/3]
2. recursive  : [le/3]
3. recursive  : [fun/3,min/2]
4. recursive  : [fun1/4,rm/3]
5. recursive  : [fun2/4,minsort/3]
6. non_recursive  : [start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into app/3
1. SCC is partially evaluated into eq/3
2. SCC is partially evaluated into le/3
3. SCC is partially evaluated into min/2
4. SCC is partially evaluated into rm/3
5. SCC is partially evaluated into minsort/3
6. SCC is partially evaluated into start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations app/3 
* CE 27 is refined into CE [42] 
* CE 25 is refined into CE [43] 
* CE 26 is refined into CE [44] 


#### Refined cost equations app/3 
* CE 42: app(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 43: app(A,B,B) = 1
     [B>=0,A=0] 
* CE 44: app(V1,V,Out) = 1+ app(W1,V,X1)
     [V1+X1>=Out,Out>=X1+1,V>=0,V1+X1=Out+W1] 

### Cost equations --> "Loop" of app/3 
* CEs [44] --> Loop 28 
* CEs [42] --> Loop 29 
* CEs [43] --> Loop 30 

#### Loops of app/3 
* Loop 28: app(V1,V,Out)->  app(V1',V,Out')
                  [V1+Out'>=Out,Out>=Out'+1,V>=0,V1+Out'=Out+V1'] 
* Loop 29: app(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 30: app(A,B,B) [B>=0,A=0] 

### Ranking functions of CR app(V1,V,Out) 
* RF of phase [28]: [V1]

#### Partial ranking functions of CR app(V1,V,Out) 
* Partial RF of phase [28]:
  - RF of loop [28:1]:
    V1


### Resulting Chains:app(V1,V,Out) 
* [[28],30]
* [[28],29]
* [30]
* [29]


### Merging Chains  app/3 into  External patterns of execution 
* [[30]] --> 1 
* [[29]] --> 2 
* [[30,[28]]] --> 3 
* [[29,[28]]] --> 4 


### Specialization of cost equations eq/3 
* CE 37 is refined into CE [45] 
* CE 35 is refined into CE [46] 
* CE 34 is refined into CE [47] 
* CE 33 is refined into CE [48] 
* CE 36 is refined into CE [49] 


#### Refined cost equations eq/3 
* CE 45: eq(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 46: eq(V1,V,Out) = 1
     [V1>=1,Out=1,V=0] 
* CE 47: eq(V1,V,Out) = 1
     [V>=1,Out=1,V1=0] 
* CE 48: eq(V1,V,Out) = 1
     [Out=2,V=0,V1=0] 
* CE 49: eq(V1,V,Out) = 1+ eq(W1,X1,Out)
     [X1>=0,W1>=0,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of eq/3 
* CEs [49] --> Loop 31 
* CEs [45] --> Loop 32 
* CEs [46] --> Loop 33 
* CEs [47] --> Loop 34 
* CEs [48] --> Loop 35 

#### Loops of eq/3 
* Loop 31: eq(V1,V,Out)->  eq(V1',V',Out)
                  [V'>=0,V1'>=0,V'+1=V,V1'+1=V1] 
* Loop 32: eq(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 33: eq(V1,V,Out) [V1>=1,Out=1,V=0] 
* Loop 34: eq(V1,V,Out) [V>=1,Out=1,V1=0] 
* Loop 35: eq(V1,V,Out) [Out=2,V=0,V1=0] 

### Ranking functions of CR eq(V1,V,Out) 
* RF of phase [31]: [V,V1]

#### Partial ranking functions of CR eq(V1,V,Out) 
* Partial RF of phase [31]:
  - RF of loop [31:1]:
    V
    V1


### Resulting Chains:eq(V1,V,Out) 
* [[31],35]
* [[31],34]
* [[31],33]
* [[31],32]
* [35]
* [34]
* [33]
* [32]


### Merging Chains  eq/3 into  External patterns of execution 
* [[35]] --> 1 
* [[34]] --> 2 
* [[33]] --> 3 
* [[32],[32,[31]]] --> 4 
* [[34,[31]]] --> 5 
* [[33,[31]]] --> 6 
* [[35,[31]]] --> 7 


### Specialization of cost equations le/3 
* CE 41 is refined into CE [50] 
* CE 39 is refined into CE [51] 
* CE 38 is refined into CE [52] 
* CE 40 is refined into CE [53] 


#### Refined cost equations le/3 
* CE 50: le(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 51: le(V1,V,Out) = 1
     [V1>=1,Out=1,V=0] 
* CE 52: le(V1,V,Out) = 1
     [V>=0,Out=2,V1=0] 
* CE 53: le(V1,V,Out) = 1+ le(W1,X1,Out)
     [X1>=0,W1>=0,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of le/3 
* CEs [53] --> Loop 36 
* CEs [50] --> Loop 37 
* CEs [51] --> Loop 38 
* CEs [52] --> Loop 39 

#### Loops of le/3 
* Loop 36: le(V1,V,Out)->  le(V1',V',Out)
                  [V'>=0,V1'>=0,V'+1=V,V1'+1=V1] 
* Loop 37: le(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 38: le(V1,V,Out) [V1>=1,Out=1,V=0] 
* Loop 39: le(V1,V,Out) [V>=0,Out=2,V1=0] 

### Ranking functions of CR le(V1,V,Out) 
* RF of phase [36]: [V,V1]

#### Partial ranking functions of CR le(V1,V,Out) 
* Partial RF of phase [36]:
  - RF of loop [36:1]:
    V
    V1


### Resulting Chains:le(V1,V,Out) 
* [[36],39]
* [[36],38]
* [[36],37]
* [39]
* [38]
* [37]


### Merging Chains  le/3 into  External patterns of execution 
* [[39]] --> 1 
* [[38]] --> 2 
* [[37],[37,[36]]] --> 3 
* [[38,[36]]] --> 4 
* [[39,[36]]] --> 5 


### Specialization of cost equations min/2 
* CE 31 is refined into CE [54] 
* CE 28 is refined into CE [55,56,57,58,59] 
* CE 32 is refined into CE [60] 
* CE 29 is refined into CE [61,62] 
* CE 30 is refined into CE [63,64] 


#### Refined cost equations min/2 
* CE 54: min(V1,Out) = 1
     [Out>=0,Out+1=V1] 
* CE 55: min(V1,Out) = 1+ le(W1,X1,Y1):1
     [V1>=X1+2,X1>=0,Y1=2,W1=0,Out=0] 
* CE 56: min(V1,Out) = 1+ le(W1,X1,Y1):2
     [V1>=W1+2,W1>=1,Y1=1,X1=0,Out=0] 
* CE 57: min(V1,Out) = 1+ le(W1,X1,Y1):3
     [V1>=W1+X1+2,X1>=0,W1>=0,Y1=0,Out=0] 
* CE 58: min(V1,Out) = 1+ le(W1,X1,Y1):4
     [V1>=W1+X1+2,W1>=X1+1,X1>=1,Y1=1,Out=0] 
* CE 59: min(V1,Out) = 1+ le(W1,X1,Y1):5
     [V1>=W1+X1+2,X1>=W1,W1>=1,Y1=2,Out=0] 
* CE 60: min(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 61: min(V1,Out) = 2+ le(W1,X1,Y1):2+ min(Z1,Out)
     [V1>=Z1+1,V1>=W1+2,Z1>=1,W1>=1,Y1=1,X1=0] 
* CE 62: min(V1,Out) = 2+ le(W1,X1,Y1):4+ min(Z1,Out)
     [V1>=W1+X1+2,V1>=Z1+1,W1>=X1+1,Z1>=1,X1>=1,Y1=1] 
* CE 63: min(V1,Out) = 2+ le(W1,X1,Y1):1+ min(Z1,Out)
     [V1>=Z1+1,V1>=X1+2,Z1>=1,X1>=0,Y1=2,W1=0] 
* CE 64: min(V1,Out) = 2+ le(W1,X1,Y1):5+ min(Z1,Out)
     [V1>=W1+X1+2,V1>=Z1+1,X1>=W1,Z1>=1,W1>=1,Y1=2] 

### Cost equations --> "Loop" of min/2 
* CEs [61,62,63,64] --> Loop 40 
* CEs [54] --> Loop 41 
* CEs [55,56,57,58,59,60] --> Loop 42 

#### Loops of min/2 
* Loop 40: min(V1,Out)->  min(V1',Out)
                  [V1>=V1'+1,V1'>=1] 
* Loop 41: min(V1,Out) [V1>=1,V1=Out+1] 
* Loop 42: min(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR min(V1,Out) 
* RF of phase [40]: [V1-1]

#### Partial ranking functions of CR min(V1,Out) 
* Partial RF of phase [40]:
  - RF of loop [40:1]:
    V1-1


### Resulting Chains:min(V1,Out) 
* [[40],42]
* [[40],41]
* [42]
* [41]


### Merging Chains  min/2 into  External patterns of execution 
* [[42],[42,[40]]] --> 1 
* [[41]] --> 2 
* [[41,[40]]] --> 3 


### Specialization of cost equations rm/3 
* CE 20 is refined into CE [65,66,67,68,69,70,71] 
* CE 23 is refined into CE [72] 
* CE 24 is refined into CE [73] 
* CE 21 is refined into CE [74,75,76,77] 
* CE 22 is refined into CE [78,79] 


#### Refined cost equations rm/3 
* CE 65: rm(V1,V,Out) = 1+ eq(W1,X1,Y1):1
     [V>=1,Y1=2,X1=0,W1=0,Out=0,V1=0] 
* CE 66: rm(V1,V,Out) = 1+ eq(W1,X1,Y1):2
     [V>=X1+1,X1>=1,Y1=1,W1=0,Out=0,V1=0] 
* CE 67: rm(V1,V,Out) = 1+ eq(V1,W1,X1):3
     [V1>=1,V>=1,X1=1,W1=0,Out=0] 
* CE 68: rm(V1,V,Out) = 1+ eq(V1,W1,X1):4
     [V>=W1+1,W1>=0,V1>=0,X1=0,Out=0] 
* CE 69: rm(V1,V,Out) = 1+ eq(V1,W1,X1):5
     [V>=W1+1,W1>=V1+1,V1>=1,X1=1,Out=0] 
* CE 70: rm(V1,V,Out) = 1+ eq(V1,W1,X1):6
     [V1>=W1+1,V>=W1+1,W1>=1,X1=1,Out=0] 
* CE 71: rm(V1,V,Out) = 1+ eq(V1,V1,W1):7
     [V>=V1+1,V1>=1,W1=2,Out=0] 
* CE 72: rm(V1,V,Out) = 1
     [V1>=0,Out=0,V=0] 
* CE 73: rm(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 74: rm(V1,V,Out) = 2+ eq(W1,X1,Y1):2+ rm(Z1,A2,B2)
     [V>=A2+1,V>=X1+1,A2>=0,X1>=1,V+B2=Out+A2,Z1=0,Y1=1,W1=0,V1=0] 
* CE 75: rm(V1,V,Out) = 2+ eq(V1,W1,X1):3+ rm(V1,Y1,Z1)
     [V>=Y1+1,Y1>=0,V1>=1,V+Z1=Out+Y1,X1=1,W1=0] 
* CE 76: rm(V1,V,Out) = 2+ eq(V1,W1,X1):5+ rm(V1,Y1,Z1)
     [V>=Y1+1,V>=W1+1,W1>=V1+1,Y1>=0,V1>=1,V+Z1=Out+Y1,X1=1] 
* CE 77: rm(V1,V,Out) = 2+ eq(V1,W1,X1):6+ rm(V1,Y1,Z1)
     [V>=Y1+1,V1>=W1+1,V>=W1+1,Y1>=0,W1>=1,V+Z1=Out+Y1,X1=1] 
* CE 78: rm(V1,V,Out) = 2+ eq(W1,X1,Y1):1+ rm(Z1,A2,Out)
     [V>=A2+1,A2>=0,Z1=0,Y1=2,X1=0,W1=0,V1=0] 
* CE 79: rm(V1,V,Out) = 2+ eq(V1,V1,W1):7+ rm(V1,X1,Out)
     [V>=X1+1,V>=V1+1,X1>=0,V1>=1,W1=2] 

### Cost equations --> "Loop" of rm/3 
* CEs [75,76,77] --> Loop 43 
* CEs [79] --> Loop 44 
* CEs [74] --> Loop 45 
* CEs [78] --> Loop 46 
* CEs [72] --> Loop 47 
* CEs [65,66,67,68,69,70,71,73] --> Loop 48 

#### Loops of rm/3 
* Loop 43: rm(V1,V,Out)->  rm(V1,V',Out')
                  [V>=V'+1,V'>=0,V1>=1,V+Out'=Out+V'] 
* Loop 44: rm(V1,V,Out)->  rm(V1,V',Out)
                  [V>=V'+1,V>=V1+1,V'>=0,V1>=1] 
* Loop 45: rm(V1,V,Out)->  rm(V1',V',Out')
                  [V>=V'+1,V'>=0,V>=2,V+Out'=Out+V',V1'=0,V1=0] 
* Loop 46: rm(V1,V,Out)->  rm(V1',V',Out)
                  [V>=V'+1,V'>=0,V1'=0,V1=0] 
* Loop 47: rm(V1,V,Out) [V1>=0,Out=0,V=0] 
* Loop 48: rm(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR rm(V1,V,Out) 
* RF of phase [43,44]: [V]
* RF of phase [45,46]: [V]

#### Partial ranking functions of CR rm(V1,V,Out) 
* Partial RF of phase [43,44]:
  - RF of loop [43:1]:
    V
  - RF of loop [44:1]:
    V-1
    -V1+V
* Partial RF of phase [45,46]:
  - RF of loop [45:1]:
    V-1
  - RF of loop [46:1]:
    V


### Resulting Chains:rm(V1,V,Out) 
* [[45,46],48]
* [[45,46],47]
* [[43,44],48]
* [[43,44],47]
* [48]
* [47]


### Merging Chains  rm/3 into  External patterns of execution 
* [[47,[45,46]],[48,[45,46]]] --> 1 
* [[47],[48]] --> 2 
* [[47,[43,44]],[48,[43,44]]] --> 3 


### Specialization of cost equations minsort/3 
* CE 15 is refined into CE [80,81,82,83,84,85,86,87,88,89,90,91,92,93,94] 
* CE 18 is refined into CE [95] 
* CE 19 is refined into CE [96] 
* CE 16 is refined into CE [97,98,99,100,101,102,103] 
* CE 17 is refined into CE [104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145] 


#### Refined cost equations minsort/3 
* CE 80: minsort(V1,V,Out) = 1+ min(V1,W1):1+ eq(X1,Y1,Z1):1
     [V1>=1,V>=0,Z1=2,Y1=0,X1=0,W1=0,Out=0] 
* CE 81: minsort(V1,V,Out) = 1+ min(V1,W1):1+ eq(X1,Y1,Z1):3
     [V1>=X1+1,X1>=1,V>=0,Z1=1,Y1=0,W1=0,Out=0] 
* CE 82: minsort(V1,V,Out) = 1+ min(V1,W1):1+ eq(X1,Y1,Z1):4
     [V1>=X1+1,X1>=0,V>=0,Z1=0,Y1=0,W1=0,Out=0] 
* CE 83: minsort(V1,V,Out) = 1+ min(W1,X1):2+ eq(Y1,Z1,A2):1
     [V>=0,A2=2,Z1=0,Y1=0,X1=0,W1=1,Out=0,V1=1] 
* CE 84: minsort(V1,V,Out) = 1+ min(W1,X1):2+ eq(Y1,X1,Z1):2
     [X1>=1,V>=0,X1+1=W1,X1+1=V1,Z1=1,Y1=0,Out=0] 
* CE 85: minsort(V1,V,Out) = 1+ min(W1,X1):2+ eq(Y1,X1,Z1):4
     [X1>=Y1,Y1>=0,V>=0,X1+1=W1,X1+1=V1,Z1=0,Out=0] 
* CE 86: minsort(V1,V,Out) = 1+ min(W1,X1):2+ eq(Y1,X1,Z1):5
     [X1>=Y1+1,Y1>=1,V>=0,X1+1=W1,X1+1=V1,Z1=1,Out=0] 
* CE 87: minsort(V1,V,Out) = 1+ min(W1,X1):2+ eq(X1,X1,Y1):7
     [X1>=1,V>=0,X1+1=W1,X1+1=V1,Y1=2,Out=0] 
* CE 88: minsort(V1,V,Out) = 1+ min(V1,W1):3+ eq(X1,Y1,Z1):1
     [V1>=2,V>=0,Z1=2,Y1=0,X1=0,W1=0,Out=0] 
* CE 89: minsort(V1,V,Out) = 1+ min(V1,W1):3+ eq(X1,W1,Y1):2
     [V1>=W1+2,W1>=1,V>=0,Y1=1,X1=0,Out=0] 
* CE 90: minsort(V1,V,Out) = 1+ min(V1,W1):3+ eq(X1,Y1,Z1):3
     [V1>=X1+1,X1>=1,V>=0,Z1=1,Y1=0,W1=0,Out=0] 
* CE 91: minsort(V1,V,Out) = 1+ min(V1,W1):3+ eq(X1,W1,Y1):4
     [V1>=W1+2,V1>=X1+1,W1>=0,X1>=0,V>=0,Y1=0,Out=0] 
* CE 92: minsort(V1,V,Out) = 1+ min(V1,W1):3+ eq(X1,W1,Y1):5
     [V1>=W1+2,W1>=X1+1,X1>=1,V>=0,Y1=1,Out=0] 
* CE 93: minsort(V1,V,Out) = 1+ min(V1,W1):3+ eq(X1,W1,Y1):6
     [X1>=W1+1,V1>=X1+1,W1>=1,V>=0,Y1=1,Out=0] 
* CE 94: minsort(V1,V,Out) = 1+ min(V1,W1):3+ eq(W1,W1,X1):7
     [V1>=W1+2,W1>=1,V>=0,X1=2,Out=0] 
* CE 95: minsort(V1,V,Out) = 1
     [Out=0,V=0,V1=0] 
* CE 96: minsort(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 97: minsort(V1,V,Out) = 2+ min(V1,W1):1+ eq(X1,Y1,Z1):3+ minsort(A2,B2,Out)
     [V1>=A2+1,V1>=X1+1,A2>=0,X1>=1,V>=0,V1+V=A2+B2,Z1=1,Y1=0,W1=0] 
* CE 98: minsort(V1,V,Out) = 2+ min(W1,X1):2+ eq(Y1,X1,Z1):2+ minsort(A2,B2,Out)
     [X1>=A2,A2>=0,X1>=1,V>=0,V+X1+1=A2+B2,X1+1=W1,X1+1=V1,Z1=1,Y1=0] 
* CE 99: minsort(V1,V,Out) = 2+ min(W1,X1):2+ eq(Y1,X1,Z1):5+ minsort(A2,B2,Out)
     [X1>=A2,X1>=Y1+1,A2>=0,Y1>=1,V>=0,V+X1+1=A2+B2,X1+1=W1,X1+1=V1,Z1=1] 
* CE 100: minsort(V1,V,Out) = 2+ min(V1,W1):3+ eq(X1,W1,Y1):2+ minsort(Z1,A2,Out)
     [V1>=Z1+1,V1>=W1+2,Z1>=0,W1>=1,V>=0,V1+V=Z1+A2,Y1=1,X1=0] 
* CE 101: minsort(V1,V,Out) = 2+ min(V1,W1):3+ eq(X1,Y1,Z1):3+ minsort(A2,B2,Out)
     [V1>=A2+1,V1>=X1+1,A2>=0,X1>=1,V>=0,V1+V=A2+B2,Z1=1,Y1=0,W1=0] 
* CE 102: minsort(V1,V,Out) = 2+ min(V1,W1):3+ eq(X1,W1,Y1):5+ minsort(Z1,A2,Out)
     [V1>=Z1+1,V1>=W1+2,W1>=X1+1,Z1>=0,X1>=1,V>=0,V1+V=Z1+A2,Y1=1] 
* CE 103: minsort(V1,V,Out) = 2+ min(V1,W1):3+ eq(X1,W1,Y1):6+ minsort(Z1,A2,Out)
     [V1>=Z1+1,X1>=W1+1,V1>=X1+1,Z1>=0,W1>=1,V>=0,V1+V=Z1+A2,Y1=1] 
* CE 104: minsort(V1,V,Out) = 2+ min(W1,X1):1+ eq(Y1,Z1,A2):1+ rm(B2,C2,D2):1+ app(E2,V,V):1+ minsort(V,F2,G2)
     [V>=0,C2>=1,Out=G2+1,C2+1=W1,C2+1=V1,F2=0,E2=0,D2=0,B2=0,A2=2,Z1=0,Y1=0,X1=0] 
* CE 105: minsort(V1,V,Out) = 2+ min(W1,X1):1+ eq(Y1,Z1,A2):1+ rm(B2,C2,D2):1+ app(D2,V,E2):2+ minsort(F2,G2,H2)
     [2*C2>=D2+2,C2>=D2,V>=0,D2>=0,Out=H2+1,C2+1=W1,C2+1=V1,G2=0,F2=0,E2=0,B2=0,A2=2,Z1=0,Y1=0,X1=0] 
* CE 106: minsort(V1,V,Out) = 2+ min(W1,X1):1+ eq(Y1,Z1,A2):1+ rm(B2,C2,D2):1+ app(D2,E2,F2):3+ minsort(F2,G2,H2)
     [2*C2>=D2+2,F2>=D2,C2>=D2,D2>=1,F2=D2+E2,F2=V+D2,Out=H2+1,C2+1=W1,C2+1=V1,G2=0,B2=0,A2=2,Z1=0,Y1=0,X1=0] 
* CE 107: minsort(V1,V,Out) = 2+ min(W1,X1):1+ eq(Y1,Z1,A2):1+ rm(B2,C2,D2):1+ app(D2,V,E2):4+ minsort(E2,F2,G2)
     [D2>=E2,2*C2>=D2+2,C2>=D2,E2>=1,V>=0,Out=G2+1,C2+1=W1,C2+1=V1,F2=0,B2=0,A2=2,Z1=0,Y1=0,X1=0] 
* CE 108: minsort(V1,V,Out) = 2+ min(W1,X1):1+ eq(Y1,Z1,A2):1+ rm(B2,C2,D2):2+ app(E2,V,V):1+ minsort(V,F2,G2)
     [V>=0,C2>=0,B2>=0,B2+C2+1=W1,B2+G2+1=Out,B2+C2+1=V1,F2=0,E2=0,D2=0,A2=2,Z1=0,Y1=0,X1=0] 
* CE 109: minsort(V1,V,Out) = 2+ min(W1,X1):1+ eq(Y1,Z1,A2):1+ rm(B2,C2,D2):2+ app(E2,V,F2):2+ minsort(G2,H2,I2)
     [V>=0,C2>=0,B2>=0,B2+C2+1=W1,B2+I2+1=Out,B2+C2+1=V1,H2=0,G2=0,F2=0,E2=0,D2=0,A2=2,Z1=0,Y1=0,X1=0] 
* CE 110: minsort(V1,V,Out) = 2+ min(W1,X1):1+ eq(Y1,Z1,A2):1+ rm(B2,C2,D2):3+ app(E2,V,V):1+ minsort(V,F2,G2)
     [V>=0,C2>=2,B2>=1,B2+C2+1=W1,B2+G2+1=Out,B2+C2+1=V1,F2=0,E2=0,D2=0,A2=2,Z1=0,Y1=0,X1=0] 
* CE 111: minsort(V1,V,Out) = 2+ min(W1,X1):1+ eq(Y1,Z1,A2):1+ rm(B2,C2,D2):3+ app(D2,V,E2):2+ minsort(F2,G2,H2)
     [C2+D2>=2,C2>=D2,V>=0,D2>=0,B2>=1,B2+C2+1=W1,B2+H2+1=Out,B2+C2+1=V1,G2=0,F2=0,E2=0,A2=2,Z1=0,Y1=0,X1=0] 
* CE 112: minsort(V1,V,Out) = 2+ min(W1,X1):1+ eq(Y1,Z1,A2):1+ rm(B2,C2,D2):3+ app(D2,E2,F2):3+ minsort(F2,G2,H2)
     [F2>=D2,C2>=D2,D2>=1,B2>=1,F2=D2+E2,B2+C2+1=W1,B2+H2+1=Out,F2=V+D2,B2+C2+1=V1,G2=0,A2=2,Z1=0,Y1=0,X1=0] 
* CE 113: minsort(V1,V,Out) = 2+ min(W1,X1):1+ eq(Y1,Z1,A2):1+ rm(B2,C2,D2):3+ app(D2,V,E2):4+ minsort(E2,F2,G2)
     [D2>=E2,C2>=D2,E2>=1,V>=0,B2>=1,B2+C2+1=W1,B2+G2+1=Out,B2+C2+1=V1,F2=0,A2=2,Z1=0,Y1=0,X1=0] 
* CE 114: minsort(V1,V,Out) = 2+ min(W1,X1):2+ eq(Y1,Z1,A2):1+ rm(B2,C2,D2):2+ app(E2,V,V):1+ minsort(V,F2,G2)
     [V>=0,Out=G2+1,F2=0,E2=0,D2=0,C2=0,B2=0,A2=2,Z1=0,Y1=0,X1=0,W1=1,V1=1] 
* CE 115: minsort(V1,V,Out) = 2+ min(W1,X1):2+ eq(Y1,Z1,A2):1+ rm(B2,C2,D2):2+ app(E2,V,F2):2+ minsort(G2,H2,I2)
     [V>=0,Out=I2+1,H2=0,G2=0,F2=0,E2=0,D2=0,C2=0,B2=0,A2=2,Z1=0,Y1=0,X1=0,W1=1,V1=1] 
* CE 116: minsort(V1,V,Out) = 2+ min(W1,X1):2+ eq(X1,X1,Y1):7+ rm(Z1,X1,A2):1+ app(B2,V,V):1+ minsort(V,C2,D2)
     [V>=0,X1>=1,Out=D2+1,X1+1=W1,X1+1=V1,C2=0,B2=0,A2=0,Z1=0,Y1=2] 
* CE 117: minsort(V1,V,Out) = 2+ min(W1,X1):2+ eq(X1,X1,Y1):7+ rm(Z1,X1,A2):1+ app(A2,V,B2):2+ minsort(C2,D2,E2)
     [2*X1>=A2+2,X1>=A2,V>=0,A2>=0,Out=E2+1,X1+1=W1,X1+1=V1,D2=0,C2=0,B2=0,Z1=0,Y1=2] 
* CE 118: minsort(V1,V,Out) = 2+ min(W1,X1):2+ eq(X1,X1,Y1):7+ rm(Z1,X1,A2):1+ app(A2,B2,C2):3+ minsort(C2,D2,E2)
     [2*X1>=A2+2,C2>=A2,X1>=A2,A2>=1,C2=A2+B2,C2=V+A2,Out=E2+1,X1+1=W1,X1+1=V1,D2=0,Z1=0,Y1=2] 
* CE 119: minsort(V1,V,Out) = 2+ min(W1,X1):2+ eq(X1,X1,Y1):7+ rm(Z1,X1,A2):1+ app(A2,V,B2):4+ minsort(B2,C2,D2)
     [A2>=B2,2*X1>=A2+2,X1>=A2,B2>=1,V>=0,Out=D2+1,X1+1=W1,X1+1=V1,C2=0,Z1=0,Y1=2] 
* CE 120: minsort(V1,V,Out) = 2+ min(W1,X1):2+ eq(Y1,Z1,A2):7+ rm(B2,C2,D2):2+ app(E2,V,V):1+ minsort(V,F2,G2)
     [B2+C2>=1,V>=0,C2>=0,B2>=0,B2+C2=Z1,B2+C2=Y1,B2+C2=X1,B2+C2+1=W1,B2+G2+1=Out,B2+C2+1=V1,F2=0,E2=0,D2=0,A2=2] 
* CE 121: minsort(V1,V,Out) = 2+ min(W1,X1):2+ eq(Y1,Z1,A2):7+ rm(B2,C2,D2):2+ app(E2,V,F2):2+ minsort(G2,H2,I2)
     [B2+C2>=1,V>=0,C2>=0,B2>=0,B2+C2=Z1,B2+C2=Y1,B2+C2=X1,B2+C2+1=W1,B2+I2+1=Out,B2+C2+1=V1,H2=0,G2=0,F2=0,E2=0,D2=0,A2=2] 
* CE 122: minsort(V1,V,Out) = 2+ min(W1,X1):2+ eq(Y1,Z1,A2):7+ rm(B2,C2,D2):3+ app(E2,V,V):1+ minsort(V,F2,G2)
     [V>=0,C2>=2,B2>=1,B2+C2=Z1,B2+C2=Y1,B2+C2=X1,B2+C2+1=W1,B2+G2+1=Out,B2+C2+1=V1,F2=0,E2=0,D2=0,A2=2] 
* CE 123: minsort(V1,V,Out) = 2+ min(W1,X1):2+ eq(Y1,Z1,A2):7+ rm(B2,C2,D2):3+ app(D2,V,E2):2+ minsort(F2,G2,H2)
     [C2+D2>=2,C2>=D2,V>=0,D2>=0,B2>=1,B2+C2=Z1,B2+C2=Y1,B2+C2=X1,B2+C2+1=W1,B2+H2+1=Out,B2+C2+1=V1,G2=0,F2=0,E2=0,A2=2] 
* CE 124: minsort(V1,V,Out) = 2+ min(W1,X1):2+ eq(Y1,Z1,A2):7+ rm(B2,C2,D2):3+ app(D2,E2,F2):3+ minsort(F2,G2,H2)
     [F2>=D2,C2>=D2,D2>=1,B2>=1,F2=D2+E2,B2+C2=Z1,B2+C2=Y1,B2+C2=X1,B2+C2+1=W1,B2+H2+1=Out,F2=V+D2,B2+C2+1=V1,G2=0,A2=2] 
* CE 125: minsort(V1,V,Out) = 2+ min(W1,X1):2+ eq(Y1,Z1,A2):7+ rm(B2,C2,D2):3+ app(D2,V,E2):4+ minsort(E2,F2,G2)
     [D2>=E2,C2>=D2,E2>=1,V>=0,B2>=1,B2+C2=Z1,B2+C2=Y1,B2+C2=X1,B2+C2+1=W1,B2+G2+1=Out,B2+C2+1=V1,F2=0,A2=2] 
* CE 126: minsort(V1,V,Out) = 2+ min(W1,X1):3+ eq(Y1,Z1,A2):1+ rm(B2,C2,D2):1+ app(E2,V,V):1+ minsort(V,F2,G2)
     [V>=0,C2>=1,Out=G2+1,C2+1=W1,C2+1=V1,F2=0,E2=0,D2=0,B2=0,A2=2,Z1=0,Y1=0,X1=0] 
* CE 127: minsort(V1,V,Out) = 2+ min(W1,X1):3+ eq(Y1,Z1,A2):1+ rm(B2,C2,D2):1+ app(D2,V,E2):2+ minsort(F2,G2,H2)
     [2*C2>=D2+2,C2>=D2,V>=0,D2>=0,Out=H2+1,C2+1=W1,C2+1=V1,G2=0,F2=0,E2=0,B2=0,A2=2,Z1=0,Y1=0,X1=0] 
* CE 128: minsort(V1,V,Out) = 2+ min(W1,X1):3+ eq(Y1,Z1,A2):1+ rm(B2,C2,D2):1+ app(D2,E2,F2):3+ minsort(F2,G2,H2)
     [2*C2>=D2+2,F2>=D2,C2>=D2,D2>=1,F2=D2+E2,F2=V+D2,Out=H2+1,C2+1=W1,C2+1=V1,G2=0,B2=0,A2=2,Z1=0,Y1=0,X1=0] 
* CE 129: minsort(V1,V,Out) = 2+ min(W1,X1):3+ eq(Y1,Z1,A2):1+ rm(B2,C2,D2):1+ app(D2,V,E2):4+ minsort(E2,F2,G2)
     [D2>=E2,2*C2>=D2+2,C2>=D2,E2>=1,V>=0,Out=G2+1,C2+1=W1,C2+1=V1,F2=0,B2=0,A2=2,Z1=0,Y1=0,X1=0] 
* CE 130: minsort(V1,V,Out) = 2+ min(W1,X1):3+ eq(Y1,Z1,A2):1+ rm(B2,C2,D2):2+ app(E2,V,V):1+ minsort(V,F2,G2)
     [B2+C2>=1,V>=0,C2>=0,B2>=0,B2+C2+1=W1,B2+G2+1=Out,B2+C2+1=V1,F2=0,E2=0,D2=0,A2=2,Z1=0,Y1=0,X1=0] 
* CE 131: minsort(V1,V,Out) = 2+ min(W1,X1):3+ eq(Y1,Z1,A2):1+ rm(B2,C2,D2):2+ app(E2,V,F2):2+ minsort(G2,H2,I2)
     [B2+C2>=1,V>=0,C2>=0,B2>=0,B2+C2+1=W1,B2+I2+1=Out,B2+C2+1=V1,H2=0,G2=0,F2=0,E2=0,D2=0,A2=2,Z1=0,Y1=0,X1=0] 
* CE 132: minsort(V1,V,Out) = 2+ min(W1,X1):3+ eq(Y1,Z1,A2):1+ rm(B2,C2,D2):3+ app(E2,V,V):1+ minsort(V,F2,G2)
     [V>=0,C2>=2,B2>=1,B2+C2+1=W1,B2+G2+1=Out,B2+C2+1=V1,F2=0,E2=0,D2=0,A2=2,Z1=0,Y1=0,X1=0] 
* CE 133: minsort(V1,V,Out) = 2+ min(W1,X1):3+ eq(Y1,Z1,A2):1+ rm(B2,C2,D2):3+ app(D2,V,E2):2+ minsort(F2,G2,H2)
     [C2+D2>=2,C2>=D2,V>=0,D2>=0,B2>=1,B2+C2+1=W1,B2+H2+1=Out,B2+C2+1=V1,G2=0,F2=0,E2=0,A2=2,Z1=0,Y1=0,X1=0] 
* CE 134: minsort(V1,V,Out) = 2+ min(W1,X1):3+ eq(Y1,Z1,A2):1+ rm(B2,C2,D2):3+ app(D2,E2,F2):3+ minsort(F2,G2,H2)
     [F2>=D2,C2>=D2,D2>=1,B2>=1,F2=D2+E2,B2+C2+1=W1,B2+H2+1=Out,F2=V+D2,B2+C2+1=V1,G2=0,A2=2,Z1=0,Y1=0,X1=0] 
* CE 135: minsort(V1,V,Out) = 2+ min(W1,X1):3+ eq(Y1,Z1,A2):1+ rm(B2,C2,D2):3+ app(D2,V,E2):4+ minsort(E2,F2,G2)
     [D2>=E2,C2>=D2,E2>=1,V>=0,B2>=1,B2+C2+1=W1,B2+G2+1=Out,B2+C2+1=V1,F2=0,A2=2,Z1=0,Y1=0,X1=0] 
* CE 136: minsort(V1,V,Out) = 2+ min(W1,X1):3+ eq(X1,X1,Y1):7+ rm(Z1,A2,B2):1+ app(C2,V,V):1+ minsort(V,D2,E2)
     [A2>=X1+1,V>=0,X1>=1,Out=E2+1,A2+1=W1,A2+1=V1,D2=0,C2=0,B2=0,Z1=0,Y1=2] 
* CE 137: minsort(V1,V,Out) = 2+ min(W1,X1):3+ eq(X1,X1,Y1):7+ rm(Z1,A2,B2):1+ app(B2,V,C2):2+ minsort(D2,E2,F2)
     [A2>=B2,A2>=X1+1,V>=0,B2>=0,X1>=1,Out=F2+1,A2+1=W1,A2+1=V1,E2=0,D2=0,C2=0,Z1=0,Y1=2] 
* CE 138: minsort(V1,V,Out) = 2+ min(W1,X1):3+ eq(X1,X1,Y1):7+ rm(Z1,A2,B2):1+ app(B2,C2,D2):3+ minsort(D2,E2,F2)
     [D2>=B2,A2>=B2,A2>=X1+1,B2>=1,X1>=1,D2=B2+C2,D2=V+B2,Out=F2+1,A2+1=W1,A2+1=V1,E2=0,Z1=0,Y1=2] 
* CE 139: minsort(V1,V,Out) = 2+ min(W1,X1):3+ eq(X1,X1,Y1):7+ rm(Z1,A2,B2):1+ app(B2,V,C2):4+ minsort(C2,D2,E2)
     [B2>=C2,A2>=B2,A2>=X1+1,C2>=1,V>=0,X1>=1,Out=E2+1,A2+1=W1,A2+1=V1,D2=0,Z1=0,Y1=2] 
* CE 140: minsort(V1,V,Out) = 2+ min(W1,X1):3+ eq(X1,X1,Y1):7+ rm(Z1,A2,B2):2+ app(C2,V,V):1+ minsort(V,D2,E2)
     [Z1+A2>=X1+1,V>=0,A2>=0,Z1>=0,X1>=1,Z1+A2+1=W1,Z1+E2+1=Out,Z1+A2+1=V1,D2=0,C2=0,B2=0,Y1=2] 
* CE 141: minsort(V1,V,Out) = 2+ min(W1,X1):3+ eq(X1,X1,Y1):7+ rm(Z1,A2,B2):2+ app(C2,V,D2):2+ minsort(E2,F2,G2)
     [Z1+A2>=X1+1,V>=0,A2>=0,Z1>=0,X1>=1,Z1+A2+1=W1,Z1+G2+1=Out,Z1+A2+1=V1,F2=0,E2=0,D2=0,C2=0,B2=0,Y1=2] 
* CE 142: minsort(V1,V,Out) = 2+ min(W1,X1):3+ eq(X1,X1,Y1):7+ rm(Z1,A2,B2):3+ app(C2,V,V):1+ minsort(V,D2,E2)
     [Z1+A2>=X1+1,V>=0,A2>=2,Z1>=1,X1>=1,Z1+A2+1=W1,Z1+E2+1=Out,Z1+A2+1=V1,D2=0,C2=0,B2=0,Y1=2] 
* CE 143: minsort(V1,V,Out) = 2+ min(W1,X1):3+ eq(X1,X1,Y1):7+ rm(Z1,A2,B2):3+ app(B2,V,C2):2+ minsort(D2,E2,F2)
     [Z1+A2>=X1+1,A2+B2>=2,A2>=B2,V>=0,B2>=0,Z1>=1,X1>=1,Z1+A2+1=W1,Z1+F2+1=Out,Z1+A2+1=V1,E2=0,D2=0,C2=0,Y1=2] 
* CE 144: minsort(V1,V,Out) = 2+ min(W1,X1):3+ eq(X1,X1,Y1):7+ rm(Z1,A2,B2):3+ app(B2,C2,D2):3+ minsort(D2,E2,F2)
     [Z1+A2>=X1+1,D2>=B2,A2>=B2,B2>=1,Z1>=1,X1>=1,D2=B2+C2,Z1+A2+1=W1,Z1+F2+1=Out,D2=V+B2,Z1+A2+1=V1,E2=0,Y1=2] 
* CE 145: minsort(V1,V,Out) = 2+ min(W1,X1):3+ eq(X1,X1,Y1):7+ rm(Z1,A2,B2):3+ app(B2,V,C2):4+ minsort(C2,D2,E2)
     [Z1+A2>=X1+1,B2>=C2,A2>=B2,C2>=1,V>=0,Z1>=1,X1>=1,Z1+A2+1=W1,Z1+E2+1=Out,Z1+A2+1=V1,D2=0,Y1=2] 

### Cost equations --> "Loop" of minsort/3 
* CEs [97,98,99,100,101,102,103] --> Loop 49 
* CEs [112,124,134,144] --> Loop 50 
* CEs [113,125,135,145] --> Loop 51 
* CEs [106,118,128,138] --> Loop 52 
* CEs [107,119,129,139] --> Loop 53 
* CEs [104,116,120,126,130,136,140] --> Loop 54 
* CEs [105,117,121,127,131,137,141] --> Loop 55 
* CEs [108,110,114,122,132,142] --> Loop 56 
* CEs [109,111,115,123,133,143] --> Loop 57 
* CEs [83] --> Loop 58 
* CEs [80,81,82,84,85,86,87,88,89,90,91,92,93,94,95,96] --> Loop 59 

#### Loops of minsort/3 
* Loop 49: minsort(V1,V,Out)->  minsort(V1',V',Out)
                  [V1>=V1'+1,V1'>=0,V>=0,V1>=2,V1+V=V1'+V'] 
* Loop 50: minsort(V1,V,Out)->  minsort(V1',V',Out')
                  [V1+V+Out'>=Out+V1',Out>=Out'+2,V1'>=V+1,V>=0,V'=0] 
* Loop 51: minsort(V1,V,Out)->  minsort(V1',V',Out')
                  [V1+Out'>=Out+V1',Out>=Out'+2,V1'>=1,V>=0,V'=0] 
* Loop 52: minsort(V1,V,Out)->  minsort(V1',V',Out')
                  [V+2*V1>=V1'+4,V1+V>=V1'+1,V1'>=V+1,V>=0,Out=Out'+1,V'=0] 
* Loop 53: minsort(V1,V,Out)->  minsort(V1',V',Out')
                  [2*V1>=V1'+4,V1>=V1'+1,V1'>=1,V>=0,Out=Out'+1,V'=0] 
* Loop 54: minsort(V1,V,Out)->  minsort(V,A',B')
                  [V1+B'>=Out,Out>=B'+1,V>=0,V1>=2,A'=0] 
* Loop 55: minsort(V1,V,Out)->  minsort(V1',V',Out')
                  [V1+Out'>=Out,Out>=Out'+1,V>=0,V1>=2,V'=0,V1'=0] 
* Loop 56: minsort(V1,V,Out)->  minsort(V,A',B')
                  [V1+B'>=Out,Out>=B'+1,V>=0,A'=0] 
* Loop 57: minsort(V1,V,Out)->  minsort(V1',V',Out')
                  [V1+Out'>=Out,Out>=Out'+1,V>=0,V'=0,V1'=0] 
* Loop 58: minsort(V1,V,Out) [V>=0,Out=0,V1=1] 
* Loop 59: minsort(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR minsort(V1,V,Out) 

#### Partial ranking functions of CR minsort(V1,V,Out) 
* Partial RF of phase [49,50,51,52,53,54,56]:
  - RF of loop [49:1,53:1]:
    V1-1 depends on loops [50:1,52:1,54:1,56:1] 
  - RF of loop [50:1]:
    V1/2+V/2-1
  - RF of loop [51:1]:
    V1/2-1 depends on loops [50:1,52:1,54:1,56:1] 
  - RF of loop [52:1,54:1]:
    V1+V-1
  - RF of loop [56:1]:
    V1+V


### Resulting Chains:minsort(V1,V,Out) 
* [[49,50,51,52,53,54,56],59]
* [[49,50,51,52,53,54,56],58]
* [[49,50,51,52,53,54,56],57,59]
* [[49,50,51,52,53,54,56],55,59]
* [59]
* [58]
* [57,59]
* [55,59]


### Merging Chains  minsort/3 into  External patterns of execution 
* [[58],[59]] --> 1 
* [[59,55],[59,57],[59,55,[49,50,51,52,53,54,56]],[59,57,[49,50,51,52,53,54,56]],[58,[49,50,51,52,53,54,56]],[59,[49,50,51,52,53,54,56]]] --> 2 


### Specialization of cost equations start/3 
* CE 8 is refined into CE [146,147,148] 
* CE 4 is refined into CE [149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165] 
* CE 6 is refined into CE [166,167,168] 
* CE 7 is refined into CE [169,170,171] 
* CE 3 is refined into CE [172,173] 
* CE 2 is refined into CE [174] 
* CE 5 is refined into CE [175,176,177] 
* CE 9 is refined into CE [178,179,180,181,182,183,184] 
* CE 10 is refined into CE [185,186,187,188,189] 
* CE 11 is refined into CE [190,191,192,193] 
* CE 12 is refined into CE [194,195,196] 
* CE 13 is refined into CE [197,198,199] 
* CE 14 is refined into CE [200,201] 


#### Refined cost equations start/3 
* CE 146: start(V1,V,V29) = 1+ min(W29,X29):1
     [V>=W29+1,W29>=1,X29=0,V1=2] 
* CE 147: start(V1,V,V29) = 1+ min(W29,X29):2
     [V>=X29+2,X29>=0,X29+1=W29,V1=2] 
* CE 148: start(V1,V,V29) = 1+ min(W29,X29):3
     [W29>=X29+2,V>=W29+1,X29>=0,V1=2] 
* CE 149: start(V1,V,V29) = 1+ rm(W29,X29,Y29):1+ app(Z29,V29,V29):1+ minsort(V29,A30,B30):1
     [V29>=0,X29>=1,X29+1=V,B30=0,A30=0,Z29=0,Y29=0,W29=0,V1=2] 
* CE 150: start(V1,V,V29) = 1+ rm(W29,X29,Y29):1+ app(Z29,V29,V29):1+ minsort(V29,A30,B30):2
     [V29+B30>=2,V29>=B30,B30>=0,X29>=1,X29+1=V,A30=0,Z29=0,Y29=0,W29=0,V1=2] 
* CE 151: start(V1,V,V29) = 1+ rm(W29,X29,Y29):1+ app(Y29,V29,Z29):2+ minsort(A30,B30,C30):1
     [2*X29>=Y29+2,X29>=Y29,V29>=0,Y29>=0,X29+1=V,C30=0,B30=0,A30=0,Z29=0,W29=0,V1=2] 
* CE 152: start(V1,V,V29) = 1+ rm(W29,X29,Y29):1+ app(Y29,Z29,A30):3+ minsort(A30,B30,C30):1
     [2*X29>=Y29+2,A30>=Y29,X29>=Y29,Y29>=1,A30=Y29+Z29,A30=V29+Y29,X29+1=V,C30=0,B30=0,W29=0,V1=2] 
* CE 153: start(V1,V,V29) = 1+ rm(W29,X29,Y29):1+ app(Y29,Z29,A30):3+ minsort(A30,B30,C30):2
     [A30+C30>=2,A30>=C30,2*X29>=Y29+2,A30>=Y29,X29>=Y29,C30>=0,Y29>=1,A30=Y29+Z29,A30=V29+Y29,X29+1=V,B30=0,W29=0,V1=2] 
* CE 154: start(V1,V,V29) = 1+ rm(W29,X29,Y29):1+ app(Y29,V29,Z29):4+ minsort(Z29,A30,B30):1
     [Y29>=Z29,2*X29>=Y29+2,X29>=Y29,Z29>=1,V29>=0,X29+1=V,B30=0,A30=0,W29=0,V1=2] 
* CE 155: start(V1,V,V29) = 1+ rm(W29,X29,Y29):1+ app(Y29,V29,Z29):4+ minsort(Z29,A30,B30):2
     [Z29+B30>=2,Z29>=B30,Y29>=Z29,2*X29>=Y29+2,X29>=Y29,B30>=0,V29>=0,X29+1=V,A30=0,W29=0,V1=2] 
* CE 156: start(V1,V,V29) = 1+ rm(W29,X29,Y29):2+ app(Z29,V29,V29):1+ minsort(V29,A30,B30):1
     [V29>=0,X29>=0,W29>=0,W29+X29+1=V,B30=0,A30=0,Z29=0,Y29=0,V1=2] 
* CE 157: start(V1,V,V29) = 1+ rm(W29,X29,Y29):2+ app(Z29,V29,V29):1+ minsort(V29,A30,B30):2
     [V29+B30>=2,V29>=B30,B30>=0,X29>=0,W29>=0,W29+X29+1=V,A30=0,Z29=0,Y29=0,V1=2] 
* CE 158: start(V1,V,V29) = 1+ rm(W29,X29,Y29):2+ app(Z29,V29,A30):2+ minsort(B30,C30,D30):1
     [V29>=0,X29>=0,W29>=0,W29+X29+1=V,D30=0,C30=0,B30=0,A30=0,Z29=0,Y29=0,V1=2] 
* CE 159: start(V1,V,V29) = 1+ rm(W29,X29,Y29):3+ app(Z29,V29,V29):1+ minsort(V29,A30,B30):1
     [V29>=0,X29>=2,W29>=1,W29+X29+1=V,B30=0,A30=0,Z29=0,Y29=0,V1=2] 
* CE 160: start(V1,V,V29) = 1+ rm(W29,X29,Y29):3+ app(Z29,V29,V29):1+ minsort(V29,A30,B30):2
     [V29+B30>=2,V29>=B30,B30>=0,X29>=2,W29>=1,W29+X29+1=V,A30=0,Z29=0,Y29=0,V1=2] 
* CE 161: start(V1,V,V29) = 1+ rm(W29,X29,Y29):3+ app(Y29,V29,Z29):2+ minsort(A30,B30,C30):1
     [X29+Y29>=2,X29>=Y29,V29>=0,Y29>=0,W29>=1,W29+X29+1=V,C30=0,B30=0,A30=0,Z29=0,V1=2] 
* CE 162: start(V1,V,V29) = 1+ rm(W29,X29,Y29):3+ app(Y29,Z29,A30):3+ minsort(A30,B30,C30):1
     [A30>=Y29,X29>=Y29,Y29>=1,W29>=1,A30=Y29+Z29,A30=V29+Y29,W29+X29+1=V,C30=0,B30=0,V1=2] 
* CE 163: start(V1,V,V29) = 1+ rm(W29,X29,Y29):3+ app(Y29,Z29,A30):3+ minsort(A30,B30,C30):2
     [A30+C30>=2,A30>=C30,A30>=Y29,X29>=Y29,C30>=0,Y29>=1,W29>=1,A30=Y29+Z29,A30=V29+Y29,W29+X29+1=V,B30=0,V1=2] 
* CE 164: start(V1,V,V29) = 1+ rm(W29,X29,Y29):3+ app(Y29,V29,Z29):4+ minsort(Z29,A30,B30):1
     [Y29>=Z29,X29>=Y29,Z29>=1,V29>=0,W29>=1,W29+X29+1=V,B30=0,A30=0,V1=2] 
* CE 165: start(V1,V,V29) = 1+ rm(W29,X29,Y29):3+ app(Y29,V29,Z29):4+ minsort(Z29,A30,B30):2
     [Z29+B30>=2,Z29>=B30,Y29>=Z29,X29>=Y29,B30>=0,V29>=0,W29>=1,W29+X29+1=V,A30=0,V1=2] 
* CE 166: start(V1,V,V29) = 1+ rm(W29,X29,Y29):1
     [2*X29>=Y29+2,X29>=Y29,V29>=X29+1,Y29>=0,W29=0,V=0,V1=2] 
* CE 167: start(V1,V,V29) = 1+ rm(V,W29,X29):2
     [V29>=W29+1,W29>=0,V>=0,X29=0,V1=2] 
* CE 168: start(V1,V,V29) = 1+ rm(V,W29,X29):3
     [W29+X29>=2,W29>=X29,V29>=W29+1,X29>=0,V>=1,V1=2] 
* CE 169: start(V1,V,V29) = 1+ min(W29,X29):1
     [V>=W29+1,W29>=1,X29=0,V1=1] 
* CE 170: start(V1,V,V29) = 1+ min(W29,X29):2
     [V>=X29+2,X29>=0,X29+1=W29,V1=1] 
* CE 171: start(V1,V,V29) = 1+ min(W29,X29):3
     [W29>=X29+2,V>=W29+1,X29>=0,V1=1] 
* CE 172: start(V1,V,V29) = 1+ minsort(W29,X29,Y29):1
     [W29+X29>=V,V>=W29+1,W29>=0,W29+X29=V+V29,Y29=0,V1=1] 
* CE 173: start(V1,V,V29) = 1+ minsort(W29,X29,Y29):2
     [W29+X29>=Y29,W29+X29>=V,W29+Y29>=2,V>=W29+1,Y29>=0,W29>=1,W29+X29=V+V29,V1=1] 
* CE 174: start(V1,V,V29) = 0
     [V>=0,V1>=0] 
* CE 175: start(V1,V,V29) = 1+ rm(W29,X29,Y29):1
     [2*X29>=Y29+2,X29>=Y29,V29>=X29+1,Y29>=0,W29=0,V=0,V1=1] 
* CE 176: start(V1,V,V29) = 1+ rm(V,W29,X29):2
     [V29>=W29+1,W29>=0,V>=0,X29=0,V1=1] 
* CE 177: start(V1,V,V29) = 1+ rm(V,W29,X29):3
     [W29+X29>=2,W29>=X29,V29>=W29+1,X29>=0,V>=1,V1=1] 
* CE 178: start(V1,V,V29) = 0+ eq(W29,X29,Y29):1
     [Y29=2,X29=0,W29=0,V=0,V1=0] 
* CE 179: start(V1,V,V29) = 0+ eq(W29,V,X29):2
     [V>=1,X29=1,W29=0,V1=0] 
* CE 180: start(V1,V,V29) = 0+ eq(V1,W29,X29):3
     [V1>=1,X29=1,W29=0,V=0] 
* CE 181: start(V1,V,V29) = 0+ eq(V1,V,W29):4
     [V>=0,V1>=0,W29=0] 
* CE 182: start(V1,V,V29) = 0+ eq(V1,V,W29):5
     [V>=V1+1,V1>=1,W29=1] 
* CE 183: start(V1,V,V29) = 0+ eq(V1,V,W29):6
     [V1>=V+1,V>=1,W29=1] 
* CE 184: start(A,A,B) = 0+ eq(A,A,C):7
     [A>=1,C=2] 
* CE 185: start(V1,V,V29) = 0+ le(W29,V,X29):1
     [V>=0,X29=2,W29=0,V1=0] 
* CE 186: start(V1,V,V29) = 0+ le(V1,W29,X29):2
     [V1>=1,X29=1,W29=0,V=0] 
* CE 187: start(V1,V,V29) = 0+ le(V1,V,W29):3
     [V>=0,V1>=0,W29=0] 
* CE 188: start(V1,V,V29) = 0+ le(V1,V,W29):4
     [V1>=V+1,V>=1,W29=1] 
* CE 189: start(V1,V,V29) = 0+ le(V1,V,W29):5
     [V>=V1,V1>=1,W29=2] 
* CE 190: start(V1,V,V29) = 0+ app(W29,V,V):1
     [V>=0,W29=0,V1=0] 
* CE 191: start(V1,V,V29) = 0+ app(V1,V,W29):2
     [V>=0,V1>=0,W29=0] 
* CE 192: start(V1,V,V29) = 0+ app(V1,W29,X29):3
     [X29>=V1,V1>=1,X29=V1+W29,X29=V1+V] 
* CE 193: start(V1,V,V29) = 0+ app(V1,V,W29):4
     [V1>=W29,W29>=1,V>=0] 
* CE 194: start(V1,V,V29) = 0+ min(V1,W29):1
     [V1>=0,W29=0] 
* CE 195: start(V1,V,V29) = 0+ min(W29,X29):2
     [X29>=0,X29+1=W29,X29+1=V1] 
* CE 196: start(V1,V,V29) = 0+ min(V1,W29):3
     [V1>=W29+2,W29>=0] 
* CE 197: start(V1,V,V29) = 0+ rm(W29,V,X29):1
     [2*V>=X29+2,V>=X29,X29>=0,W29=0,V1=0] 
* CE 198: start(V1,V,V29) = 0+ rm(V1,V,W29):2
     [V>=0,V1>=0,W29=0] 
* CE 199: start(V1,V,V29) = 0+ rm(V1,V,W29):3
     [V+W29>=2,V>=W29,W29>=0,V1>=1] 
* CE 200: start(V1,V,V29) = 0+ minsort(V1,V,W29):1
     [V>=0,V1>=0,W29=0] 
* CE 201: start(V1,V,V29) = 0+ minsort(V1,V,W29):2
     [V1+V>=W29,V1+W29>=2,W29>=0,V>=0,V1>=1] 

### Cost equations --> "Loop" of start/3 
* CEs [184] --> Loop 60 
* CEs [180,186] --> Loop 61 
* CEs [146,147,148] --> Loop 62 
* CEs [149,151,152,153,154,155,156,158,159,161,162,163,164,165] --> Loop 63 
* CEs [150,157,160,166,167,168] --> Loop 64 
* CEs [169,170,171] --> Loop 65 
* CEs [172,173] --> Loop 66 
* CEs [175,176,177] --> Loop 67 
* CEs [174,178,179,181,182,183,185,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201] --> Loop 68 

#### Loops of start/3 
* Loop 60: start(A,A,B) [A>=1] 
* Loop 61: start(V1,V,V29) [V1>=1,V=0] 
* Loop 62: start(V1,V,V29) [V>=2,V1=2] 
* Loop 63: start(V1,V,V29) [V29>=0,V>=1,V1=2] 
* Loop 64: start(V1,V,V29) [V29>=1,V>=0,V1=2] 
* Loop 65: start(V1,V,V29) [V>=2,V1=1] 
* Loop 66: start(V1,V,V29) [V29>=0,V>=1,V1=1] 
* Loop 67: start(V1,V,V29) [V29>=1,V>=0,V1=1] 
* Loop 68: start(V1,V,V29) [V1>=0] 

### Ranking functions of CR start(V1,V,V29) 

#### Partial ranking functions of CR start(V1,V,V29) 


### Resulting Chains:start(V1,V,V29) 
* [68]
* [67]
* [66]
* [65]
* [64]
* [63]
* [62]
* [61]
* [60]


### Merging Chains  start/3 into  External patterns of execution 
* [[67],[68]] --> 1 
* [[66]] --> 2 
* [[65]] --> 3 
* [[64]] --> 4 
* [[63]] --> 5 
* [[62]] --> 6 
* [[61]] --> 7 
* [[60]] --> 8 


Computing Bounds
=====================================

#### Cost of loops [28] 

 * loop 28:app(V1,V,Out) -> [app(V1',V',Out')] 
1
#### Cost of phase [28]:app(V1,V,Out) -> [app(V1',V',Out')] 
1*it(28)+0
  Such that:it(28) =< V1
it(28) =< V1-V1'

#### Cost of phase [28]:app(V1,V,Out) -> [app(V1',V',Out')] 
1*it(28)+0
  Such that:it(28) =< V1
it(28) =< V1-V1'

#### Cost of chains of app(V1,V,Out):
* Chain [[28],30]: 1*it(28)+1
  Such that:it(28) =< -V+Out

  with precondition: [V+V1=Out,V1>=1,V>=0] 

* Chain [[28],29]: 1*it(28)+0
  Such that:it(28) =< Out

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [30]: 1
  with precondition: [V1=0,V=Out,V>=0] 

* Chain [29]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [31] 

 * loop 31:eq(V1,V,Out) -> [eq(V1',V',Out')] 
1
#### Cost of phase [31]:eq(V1,V,Out) -> [eq(V1',V',Out')] 
1*it(31)+0
  Such that:it(31) =< V1
it(31) =< V1-V1'
it(31) =< V
it(31) =< V-V'

#### Cost of phase [31]:eq(V1,V,Out) -> [eq(V1',V',Out')] 
1*it(31)+0
  Such that:it(31) =< V1
it(31) =< V1-V1'
it(31) =< V
it(31) =< V-V'

#### Cost of phase [31]:eq(V1,V,Out) -> [eq(V1',V',Out')] 
1*it(31)+0
  Such that:it(31) =< V1
it(31) =< V1-V1'
it(31) =< V
it(31) =< V-V'

#### Cost of phase [31]:eq(V1,V,Out) -> [eq(V1',V',Out')] 
1*it(31)+0
  Such that:it(31) =< V1
it(31) =< V1-V1'
it(31) =< V
it(31) =< V-V'

#### Cost of chains of eq(V1,V,Out):
* Chain [[31],35]: 1*it(31)+1
  Such that:it(31) =< V1

  with precondition: [Out=2,V1=V,V1>=1] 

* Chain [[31],34]: 1*it(31)+1
  Such that:it(31) =< V1

  with precondition: [Out=1,V1>=1,V>=V1+1] 

* Chain [[31],33]: 1*it(31)+1
  Such that:it(31) =< V

  with precondition: [Out=1,V>=1,V1>=V+1] 

* Chain [[31],32]: 1*it(31)+0
  Such that:it(31) =< V

  with precondition: [Out=0,V1>=1,V>=1] 

* Chain [35]: 1
  with precondition: [V1=0,V=0,Out=2] 

* Chain [34]: 1
  with precondition: [V1=0,Out=1,V>=1] 

* Chain [33]: 1
  with precondition: [V=0,Out=1,V1>=1] 

* Chain [32]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [36] 

 * loop 36:le(V1,V,Out) -> [le(V1',V',Out')] 
1
#### Cost of phase [36]:le(V1,V,Out) -> [le(V1',V',Out')] 
1*it(36)+0
  Such that:it(36) =< V1
it(36) =< V1-V1'
it(36) =< V
it(36) =< V-V'

#### Cost of phase [36]:le(V1,V,Out) -> [le(V1',V',Out')] 
1*it(36)+0
  Such that:it(36) =< V1
it(36) =< V1-V1'
it(36) =< V
it(36) =< V-V'

#### Cost of phase [36]:le(V1,V,Out) -> [le(V1',V',Out')] 
1*it(36)+0
  Such that:it(36) =< V1
it(36) =< V1-V1'
it(36) =< V
it(36) =< V-V'

#### Cost of chains of le(V1,V,Out):
* Chain [[36],39]: 1*it(36)+1
  Such that:it(36) =< V1

  with precondition: [Out=2,V1>=1,V>=V1] 

* Chain [[36],38]: 1*it(36)+1
  Such that:it(36) =< V

  with precondition: [Out=1,V>=1,V1>=V+1] 

* Chain [[36],37]: 1*it(36)+0
  Such that:it(36) =< V

  with precondition: [Out=0,V1>=1,V>=1] 

* Chain [39]: 1
  with precondition: [V1=0,Out=2,V>=0] 

* Chain [38]: 1
  with precondition: [V=0,Out=1,V1>=1] 

* Chain [37]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [40] 

 * loop 40:min(V1,Out) -> [min(V1',Out')] 
2*s(9)+3
  Such that:s(8) =< V1/2
s(9) =< s(8)

#### Cost of phase [40]:min(V1,Out) -> [min(V1',Out')] 
3*it(40)+2*s(10)+0
  Such that:it(40) =< V1
it(40) =< V1-V1'
aux(3) =< V1/2
s(11) =< it(40)*aux(3)
s(10) =< s(11)

#### Cost of phase [40]:min(V1,Out) -> [min(V1',Out')] 
3*it(40)+2*s(10)+0
  Such that:it(40) =< V1
it(40) =< V1-V1'
aux(3) =< V1/2
s(11) =< it(40)*aux(3)
s(10) =< s(11)

#### Cost of chains of min(V1,Out):
* Chain [[40],42]: 6*it(40)+2*s(10)+2
  Such that:aux(3) =< V1/2
aux(4) =< V1
it(40) =< aux(4)
s(11) =< it(40)*aux(3)
s(10) =< s(11)

  with precondition: [Out=0,V1>=2] 

* Chain [[40],41]: 3*it(40)+2*s(10)+1
  Such that:it(40) =< V1-Out
aux(3) =< V1/2
s(11) =< it(40)*aux(3)
s(10) =< s(11)

  with precondition: [Out>=0,V1>=Out+2] 

* Chain [42]: 1*s(3)+2*s(4)+2
  Such that:s(3) =< V1
aux(1) =< V1/2
s(4) =< aux(1)

  with precondition: [Out=0,V1>=0] 

* Chain [41]: 1
  with precondition: [V1=Out+1,V1>=1] 


#### Cost of loops [45,46] 

 * loop 45:rm(V1,V,Out) -> [rm(V1',V',Out')] 
3
 * loop 46:rm(V1,V,Out) -> [rm(V1',V',Out')] 
3
#### Cost of phase [45,46]:rm(V1,V,Out) -> [rm(V1',V',Out')] 
6*it(45)+0
  Such that:aux(9) =< V
aux(10) =< V-V'
it(45) =< aux(9)
it(45) =< aux(10)

#### Cost of phase [45,46]:rm(V1,V,Out) -> [rm(V1',V',Out')] 
6*it(45)+0
  Such that:aux(9) =< V
aux(10) =< V-V'
it(45) =< aux(9)
it(45) =< aux(10)

#### Cost of loops [43,44] 

 * loop 43:rm(V1,V,Out) -> [rm(V1',V',Out')] 
1*s(27)+1*s(26)+3
  Such that:s(26) =< V
s(27) =< V1'

 * loop 44:rm(V1,V,Out) -> [rm(V1',V',Out')] 
1*s(29)+3
  Such that:s(29) =< V1'

#### Cost of phase [43,44]:rm(V1,V,Out) -> [rm(V1',V',Out')] 
3*it(43)+3*it(44)+1*s(30)+1*s(31)+1*s(32)+0
  Such that:it(44) =< -V1+V
it(44) =< -V1+V+V1'-V'
aux(14) =< V1
aux(16) =< V
aux(17) =< V-V'
it(43) =< aux(16)
it(44) =< aux(16)
it(43) =< aux(17)
it(44) =< aux(17)
aux(15) =< aux(14)
s(30) =< it(43)*aux(14)
s(31) =< it(43)*aux(16)
s(32) =< it(44)*aux(15)

#### Cost of phase [43,44]:rm(V1,V,Out) -> [rm(V1',V',Out')] 
3*it(43)+3*it(44)+1*s(30)+1*s(31)+1*s(32)+0
  Such that:it(44) =< -V1+V
it(44) =< -V1+V+V1'-V'
aux(14) =< V1
aux(16) =< V
aux(17) =< V-V'
it(43) =< aux(16)
it(44) =< aux(16)
it(43) =< aux(17)
it(44) =< aux(17)
aux(15) =< aux(14)
s(30) =< it(43)*aux(14)
s(31) =< it(43)*aux(16)
s(32) =< it(44)*aux(15)

#### Cost of chains of rm(V1,V,Out):
* Chain [[45,46],48]: 8*it(45)+2
  Such that:aux(11) =< V
it(45) =< aux(11)

  with precondition: [V1=0,Out>=0,V>=Out,2*V>=Out+2] 

* Chain [[45,46],47]: 6*it(45)+1
  Such that:aux(12) =< V
it(45) =< aux(12)

  with precondition: [V1=0,Out>=0,V>=Out,2*V>=Out+2] 

* Chain [[43,44],48]: 5*it(43)+3*it(44)+2*s(21)+1*s(30)+1*s(31)+1*s(32)+2
  Such that:it(44) =< -V1+V
aux(18) =< V1
aux(19) =< V
it(44) =< aux(19)
s(21) =< aux(18)
it(43) =< aux(19)
aux(15) =< aux(18)
s(30) =< it(43)*aux(18)
s(31) =< it(43)*aux(19)
s(32) =< it(44)*aux(15)

  with precondition: [V1>=1,Out>=0,V>=Out,Out+V>=2] 

* Chain [[43,44],47]: 3*it(43)+3*it(44)+1*s(30)+1*s(31)+1*s(32)+1
  Such that:it(44) =< -V1+V
aux(14) =< V1
aux(20) =< V
it(44) =< aux(20)
it(43) =< aux(20)
aux(15) =< aux(14)
s(30) =< it(43)*aux(14)
s(31) =< it(43)*aux(20)
s(32) =< it(44)*aux(15)

  with precondition: [V1>=1,Out>=0,V>=Out,Out+V>=2] 

* Chain [48]: 2*s(20)+2*s(21)+2
  Such that:aux(7) =< V1
aux(8) =< V
s(21) =< aux(7)
s(20) =< aux(8)

  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [47]: 1
  with precondition: [V=0,Out=0,V1>=0] 


#### Cost of loops [49,50,51,52,53,54,56] 

 * loop 49:minsort(V1,V,Out) -> [minsort(V1',V',Out')] 
10*s(142)+2*s(145)+4*s(147)+12*s(141)+6*s(144)+5
  Such that:s(137) =< V1
s(138) =< V1/2
s(139) =< -V+V1'+V'
s(140) =< -V/2+V1'/2+V'/2
s(141) =< s(137)
s(142) =< s(139)
s(143) =< s(141)*s(138)
s(144) =< s(143)
s(145) =< s(140)
s(146) =< s(142)*s(140)
s(147) =< s(146)

 * loop 50:minsort(V1,V,Out) -> [minsort(V1',V',Out')] 
71*s(214)+2*s(220)+6*s(222)+8*s(216)+8*s(217)+8*s(218)+8*s(219)+4*s(213)+8
  Such that:s(208) =< V1
s(209) =< V1+V-V1'
s(210) =< V1/2
s(211) =< -V+V1'
s(212) =< s(209)
s(213) =< s(211)
s(212) =< s(208)
s(214) =< s(208)
s(215) =< s(212)
s(216) =< s(214)*s(212)
s(217) =< s(214)*s(208)
s(218) =< s(214)*s(215)
s(219) =< s(212)
s(220) =< s(210)
s(221) =< s(214)*s(210)
s(222) =< s(221)

 * loop 51:minsort(V1,V,Out) -> [minsort(V1',V',Out')] 
71*s(289)+2*s(295)+6*s(297)+8*s(291)+8*s(292)+8*s(293)+8*s(294)+4*s(288)+7
  Such that:s(283) =< V1
s(284) =< V1-V1'
s(285) =< V1/2
s(286) =< V1'
s(287) =< s(284)
s(288) =< s(286)
s(287) =< s(283)
s(289) =< s(283)
s(290) =< s(287)
s(291) =< s(289)*s(287)
s(292) =< s(289)*s(283)
s(293) =< s(289)*s(290)
s(294) =< s(287)
s(295) =< s(285)
s(296) =< s(289)*s(285)
s(297) =< s(296)

 * loop 52:minsort(V1,V,Out) -> [minsort(V1',V',Out')] 
71*s(330)+2*s(331)+6*s(333)+4*s(329)+8
  Such that:s(326) =< V1
s(327) =< V1/2
s(328) =< -V+V1'
s(329) =< s(328)
s(330) =< s(326)
s(331) =< s(327)
s(332) =< s(330)*s(327)
s(333) =< s(332)

 * loop 53:minsort(V1,V,Out) -> [minsort(V1',V',Out')] 
71*s(366)+2*s(367)+6*s(369)+4*s(365)+7
  Such that:s(362) =< V1
s(363) =< V1/2
s(364) =< V1'
s(365) =< s(364)
s(366) =< s(362)
s(367) =< s(363)
s(368) =< s(366)*s(363)
s(369) =< s(368)

 * loop 54:minsort(V1,V,Out) -> [minsort(V1',V',Out')] 
91*s(418)+2*s(419)+10*s(421)+8
  Such that:s(416) =< V1
s(417) =< V1/2
s(418) =< s(416)
s(419) =< s(417)
s(420) =< s(418)*s(417)
s(421) =< s(420)

 * loop 56:minsort(V1,V,Out) -> [minsort(V1',V',Out')] 
90*s(494)+4*s(498)+8*s(500)+16*s(496)+8*s(497)+8
  Such that:s(492) =< V1
s(493) =< V1/2
s(494) =< s(492)
s(495) =< s(492)
s(496) =< s(494)*s(492)
s(497) =< s(494)*s(495)
s(498) =< s(493)
s(499) =< s(494)*s(493)
s(500) =< s(499)

#### Cost of phase [49,50,51,52,53,54,56]:minsort(V1,V,Out) -> [minsort(V1',V',Out')] 
5*it(49)+8*it(50)+7*it(51)+16*it(52)+7*it(53)+8*it(54)+10*s(501)+2*s(502)+4*s(503)+12*s(504)+6*s(505)+71*s(511)+2*s(512)+6*s(513)+8*s(514)+8*s(515)+8*s(516)+8*s(517)+4*s(518)+71*s(525)+2*s(526)+6*s(527)+8*s(528)+8*s(529)+8*s(530)+8*s(531)+4*s(532)+71*s(539)+2*s(540)+6*s(541)+4*s(542)+71*s(547)+2*s(548)+6*s(549)+4*s(550)+181*s(555)+2*s(556)+18*s(557)+4*s(562)+16*s(564)+8*s(565)+0
  Such that:aux(176) =< V1
aux(177) =< V1+V
aux(178) =< V1+V-V1'-V'
aux(179) =< V1-V1'
aux(180) =< V1/2+V/2
aux(181) =< V1/2+V/2-V1'/2-V'/2
aux(158) =< aux(177)
it(51) =< aux(177)
it(52) =< aux(177)
it(53) =< aux(177)
it(54) =< aux(177)
aux(158) =< aux(178)
it(51) =< aux(178)
it(52) =< aux(178)
it(53) =< aux(178)
it(54) =< aux(178)
it(50) =< aux(180)
it(51) =< aux(180)
it(54) =< aux(180)
s(567) =< aux(180)
it(50) =< aux(181)
it(51) =< aux(181)
it(54) =< aux(181)
s(567) =< aux(181)
aux(94) =< aux(177)+1
aux(161) =< aux(177)
aux(135) =< aux(177)
aux(99) =< aux(177)-1
s(138) =< aux(177)* (1/2)+1/2
s(567) =< aux(158)* (1/2)
s(559) =< aux(158)* (1/2)
aux(84) =< it(50)*aux(177)
aux(85) =< it(52)*aux(94)
aux(86) =< it(54)*aux(161)
s(546) =< it(52)*aux(135)
s(523) =< it(50)*aux(99)
aux(98) =< it(50)*aux(94)
s(544) =< aux(85)* (1/2)
s(520) =< aux(98)* (1/2)
it(49) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(176)
it(51) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(176)
it(53) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(176)
it(49) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(179)
it(51) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(179)
it(53) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(179)
s(538) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(179)
s(538) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(176)
s(554) =< it(53)*aux(135)
aux(156) =< it(53)*aux(94)
s(537) =< it(51)*aux(99)
aux(136) =< it(51)*aux(94)
s(538) =< it(51)*aux(135)
aux(96) =< it(49)*aux(94)
s(510) =< it(49)*aux(94)
s(552) =< aux(156)* (1/2)
s(534) =< aux(136)* (1/2)
s(507) =< aux(96)* (1/2)
s(555) =< aux(158)
s(495) =< aux(94)
s(564) =< s(555)*aux(94)
s(565) =< s(555)*s(495)
s(562) =< s(567)
s(558) =< s(555)*s(138)
s(557) =< s(558)
s(556) =< s(559)
s(550) =< s(554)
s(547) =< aux(156)
s(548) =< s(552)
s(551) =< s(547)*s(138)
s(549) =< s(551)
s(542) =< s(546)
s(539) =< aux(85)
s(540) =< s(544)
s(543) =< s(539)*s(138)
s(541) =< s(543)
s(535) =< s(538)
s(287) =< aux(135)
s(532) =< s(537)
s(535) =< aux(136)
s(287) =< aux(94)
s(525) =< aux(136)
s(290) =< s(287)
s(528) =< s(525)*s(287)
s(529) =< s(525)*aux(94)
s(530) =< s(525)*s(290)
s(531) =< s(535)
s(526) =< s(534)
s(533) =< s(525)*s(138)
s(527) =< s(533)
s(521) =< aux(158)
s(212) =< aux(177)
s(518) =< s(523)
s(521) =< aux(98)
s(212) =< aux(94)
s(511) =< aux(98)
s(215) =< s(212)
s(514) =< s(511)*s(212)
s(515) =< s(511)*aux(94)
s(516) =< s(511)*s(215)
s(517) =< s(521)
s(512) =< s(520)
s(519) =< s(511)*s(138)
s(513) =< s(519)
s(504) =< s(510)
s(501) =< aux(96)
s(508) =< s(504)*s(138)
s(505) =< s(508)
s(502) =< s(507)
s(506) =< s(501)*s(138)
s(503) =< s(506)

#### Cost of phase [49,50,51,52,53,54,56]:minsort(V1,V,Out) -> [minsort(V1',V',Out')] 
5*it(49)+8*it(50)+7*it(51)+16*it(52)+7*it(53)+8*it(54)+10*s(501)+2*s(502)+4*s(503)+12*s(504)+6*s(505)+71*s(511)+2*s(512)+6*s(513)+8*s(514)+8*s(515)+8*s(516)+8*s(517)+4*s(518)+71*s(525)+2*s(526)+6*s(527)+8*s(528)+8*s(529)+8*s(530)+8*s(531)+4*s(532)+71*s(539)+2*s(540)+6*s(541)+4*s(542)+71*s(547)+2*s(548)+6*s(549)+4*s(550)+181*s(555)+2*s(556)+18*s(557)+4*s(562)+16*s(564)+8*s(565)+0
  Such that:aux(176) =< V1
aux(177) =< V1+V
aux(178) =< V1+V-V1'-V'
aux(179) =< V1-V1'
aux(180) =< V1/2+V/2
aux(181) =< V1/2+V/2-V1'/2-V'/2
aux(158) =< aux(177)
it(51) =< aux(177)
it(52) =< aux(177)
it(53) =< aux(177)
it(54) =< aux(177)
aux(158) =< aux(178)
it(51) =< aux(178)
it(52) =< aux(178)
it(53) =< aux(178)
it(54) =< aux(178)
it(50) =< aux(180)
it(51) =< aux(180)
it(54) =< aux(180)
s(567) =< aux(180)
it(50) =< aux(181)
it(51) =< aux(181)
it(54) =< aux(181)
s(567) =< aux(181)
aux(94) =< aux(177)+1
aux(161) =< aux(177)
aux(135) =< aux(177)
aux(99) =< aux(177)-1
s(138) =< aux(177)* (1/2)+1/2
s(567) =< aux(158)* (1/2)
s(559) =< aux(158)* (1/2)
aux(84) =< it(50)*aux(177)
aux(85) =< it(52)*aux(94)
aux(86) =< it(54)*aux(161)
s(546) =< it(52)*aux(135)
s(523) =< it(50)*aux(99)
aux(98) =< it(50)*aux(94)
s(544) =< aux(85)* (1/2)
s(520) =< aux(98)* (1/2)
it(49) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(176)
it(51) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(176)
it(53) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(176)
it(49) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(179)
it(51) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(179)
it(53) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(179)
s(538) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(179)
s(538) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(176)
s(554) =< it(53)*aux(135)
aux(156) =< it(53)*aux(94)
s(537) =< it(51)*aux(99)
aux(136) =< it(51)*aux(94)
s(538) =< it(51)*aux(135)
aux(96) =< it(49)*aux(94)
s(510) =< it(49)*aux(94)
s(552) =< aux(156)* (1/2)
s(534) =< aux(136)* (1/2)
s(507) =< aux(96)* (1/2)
s(555) =< aux(158)
s(495) =< aux(94)
s(564) =< s(555)*aux(94)
s(565) =< s(555)*s(495)
s(562) =< s(567)
s(558) =< s(555)*s(138)
s(557) =< s(558)
s(556) =< s(559)
s(550) =< s(554)
s(547) =< aux(156)
s(548) =< s(552)
s(551) =< s(547)*s(138)
s(549) =< s(551)
s(542) =< s(546)
s(539) =< aux(85)
s(540) =< s(544)
s(543) =< s(539)*s(138)
s(541) =< s(543)
s(535) =< s(538)
s(287) =< aux(135)
s(532) =< s(537)
s(535) =< aux(136)
s(287) =< aux(94)
s(525) =< aux(136)
s(290) =< s(287)
s(528) =< s(525)*s(287)
s(529) =< s(525)*aux(94)
s(530) =< s(525)*s(290)
s(531) =< s(535)
s(526) =< s(534)
s(533) =< s(525)*s(138)
s(527) =< s(533)
s(521) =< aux(158)
s(212) =< aux(177)
s(518) =< s(523)
s(521) =< aux(98)
s(212) =< aux(94)
s(511) =< aux(98)
s(215) =< s(212)
s(514) =< s(511)*s(212)
s(515) =< s(511)*aux(94)
s(516) =< s(511)*s(215)
s(517) =< s(521)
s(512) =< s(520)
s(519) =< s(511)*s(138)
s(513) =< s(519)
s(504) =< s(510)
s(501) =< aux(96)
s(508) =< s(504)*s(138)
s(505) =< s(508)
s(502) =< s(507)
s(506) =< s(501)*s(138)
s(503) =< s(506)

#### Cost of phase [49,50,51,52,53,54,56]:minsort(V1,V,Out) -> [minsort(V1',V',Out')] 
5*it(49)+8*it(50)+7*it(51)+16*it(52)+7*it(53)+8*it(54)+10*s(501)+2*s(502)+4*s(503)+12*s(504)+6*s(505)+71*s(511)+2*s(512)+6*s(513)+8*s(514)+8*s(515)+8*s(516)+8*s(517)+4*s(518)+71*s(525)+2*s(526)+6*s(527)+8*s(528)+8*s(529)+8*s(530)+8*s(531)+4*s(532)+71*s(539)+2*s(540)+6*s(541)+4*s(542)+71*s(547)+2*s(548)+6*s(549)+4*s(550)+181*s(555)+2*s(556)+18*s(557)+4*s(562)+16*s(564)+8*s(565)+0
  Such that:aux(176) =< V1
aux(177) =< V1+V
aux(178) =< V1+V-V1'-V'
aux(179) =< V1-V1'
aux(180) =< V1/2+V/2
aux(181) =< V1/2+V/2-V1'/2-V'/2
aux(158) =< aux(177)
it(51) =< aux(177)
it(52) =< aux(177)
it(53) =< aux(177)
it(54) =< aux(177)
aux(158) =< aux(178)
it(51) =< aux(178)
it(52) =< aux(178)
it(53) =< aux(178)
it(54) =< aux(178)
it(50) =< aux(180)
it(51) =< aux(180)
it(54) =< aux(180)
s(567) =< aux(180)
it(50) =< aux(181)
it(51) =< aux(181)
it(54) =< aux(181)
s(567) =< aux(181)
aux(94) =< aux(177)+1
aux(161) =< aux(177)
aux(135) =< aux(177)
aux(99) =< aux(177)-1
s(138) =< aux(177)* (1/2)+1/2
s(567) =< aux(158)* (1/2)
s(559) =< aux(158)* (1/2)
aux(84) =< it(50)*aux(177)
aux(85) =< it(52)*aux(94)
aux(86) =< it(54)*aux(161)
s(546) =< it(52)*aux(135)
s(523) =< it(50)*aux(99)
aux(98) =< it(50)*aux(94)
s(544) =< aux(85)* (1/2)
s(520) =< aux(98)* (1/2)
it(49) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(176)
it(51) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(176)
it(53) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(176)
it(49) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(179)
it(51) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(179)
it(53) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(179)
s(538) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(179)
s(538) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(176)
s(554) =< it(53)*aux(135)
aux(156) =< it(53)*aux(94)
s(537) =< it(51)*aux(99)
aux(136) =< it(51)*aux(94)
s(538) =< it(51)*aux(135)
aux(96) =< it(49)*aux(94)
s(510) =< it(49)*aux(94)
s(552) =< aux(156)* (1/2)
s(534) =< aux(136)* (1/2)
s(507) =< aux(96)* (1/2)
s(555) =< aux(158)
s(495) =< aux(94)
s(564) =< s(555)*aux(94)
s(565) =< s(555)*s(495)
s(562) =< s(567)
s(558) =< s(555)*s(138)
s(557) =< s(558)
s(556) =< s(559)
s(550) =< s(554)
s(547) =< aux(156)
s(548) =< s(552)
s(551) =< s(547)*s(138)
s(549) =< s(551)
s(542) =< s(546)
s(539) =< aux(85)
s(540) =< s(544)
s(543) =< s(539)*s(138)
s(541) =< s(543)
s(535) =< s(538)
s(287) =< aux(135)
s(532) =< s(537)
s(535) =< aux(136)
s(287) =< aux(94)
s(525) =< aux(136)
s(290) =< s(287)
s(528) =< s(525)*s(287)
s(529) =< s(525)*aux(94)
s(530) =< s(525)*s(290)
s(531) =< s(535)
s(526) =< s(534)
s(533) =< s(525)*s(138)
s(527) =< s(533)
s(521) =< aux(158)
s(212) =< aux(177)
s(518) =< s(523)
s(521) =< aux(98)
s(212) =< aux(94)
s(511) =< aux(98)
s(215) =< s(212)
s(514) =< s(511)*s(212)
s(515) =< s(511)*aux(94)
s(516) =< s(511)*s(215)
s(517) =< s(521)
s(512) =< s(520)
s(519) =< s(511)*s(138)
s(513) =< s(519)
s(504) =< s(510)
s(501) =< aux(96)
s(508) =< s(504)*s(138)
s(505) =< s(508)
s(502) =< s(507)
s(506) =< s(501)*s(138)
s(503) =< s(506)

#### Cost of phase [49,50,51,52,53,54,56]:minsort(V1,V,Out) -> [minsort(V1',V',Out')] 
5*it(49)+8*it(50)+7*it(51)+16*it(52)+7*it(53)+8*it(54)+10*s(501)+2*s(502)+4*s(503)+12*s(504)+6*s(505)+71*s(511)+2*s(512)+6*s(513)+8*s(514)+8*s(515)+8*s(516)+8*s(517)+4*s(518)+71*s(525)+2*s(526)+6*s(527)+8*s(528)+8*s(529)+8*s(530)+8*s(531)+4*s(532)+71*s(539)+2*s(540)+6*s(541)+4*s(542)+71*s(547)+2*s(548)+6*s(549)+4*s(550)+181*s(555)+2*s(556)+18*s(557)+4*s(562)+16*s(564)+8*s(565)+0
  Such that:aux(176) =< V1
aux(177) =< V1+V
aux(178) =< V1+V-V1'-V'
aux(179) =< V1-V1'
aux(180) =< V1/2+V/2
aux(181) =< V1/2+V/2-V1'/2-V'/2
aux(158) =< aux(177)
it(51) =< aux(177)
it(52) =< aux(177)
it(53) =< aux(177)
it(54) =< aux(177)
aux(158) =< aux(178)
it(51) =< aux(178)
it(52) =< aux(178)
it(53) =< aux(178)
it(54) =< aux(178)
it(50) =< aux(180)
it(51) =< aux(180)
it(54) =< aux(180)
s(567) =< aux(180)
it(50) =< aux(181)
it(51) =< aux(181)
it(54) =< aux(181)
s(567) =< aux(181)
aux(94) =< aux(177)+1
aux(161) =< aux(177)
aux(135) =< aux(177)
aux(99) =< aux(177)-1
s(138) =< aux(177)* (1/2)+1/2
s(567) =< aux(158)* (1/2)
s(559) =< aux(158)* (1/2)
aux(84) =< it(50)*aux(177)
aux(85) =< it(52)*aux(94)
aux(86) =< it(54)*aux(161)
s(546) =< it(52)*aux(135)
s(523) =< it(50)*aux(99)
aux(98) =< it(50)*aux(94)
s(544) =< aux(85)* (1/2)
s(520) =< aux(98)* (1/2)
it(49) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(176)
it(51) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(176)
it(53) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(176)
it(49) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(179)
it(51) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(179)
it(53) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(179)
s(538) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(179)
s(538) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(176)
s(554) =< it(53)*aux(135)
aux(156) =< it(53)*aux(94)
s(537) =< it(51)*aux(99)
aux(136) =< it(51)*aux(94)
s(538) =< it(51)*aux(135)
aux(96) =< it(49)*aux(94)
s(510) =< it(49)*aux(94)
s(552) =< aux(156)* (1/2)
s(534) =< aux(136)* (1/2)
s(507) =< aux(96)* (1/2)
s(555) =< aux(158)
s(495) =< aux(94)
s(564) =< s(555)*aux(94)
s(565) =< s(555)*s(495)
s(562) =< s(567)
s(558) =< s(555)*s(138)
s(557) =< s(558)
s(556) =< s(559)
s(550) =< s(554)
s(547) =< aux(156)
s(548) =< s(552)
s(551) =< s(547)*s(138)
s(549) =< s(551)
s(542) =< s(546)
s(539) =< aux(85)
s(540) =< s(544)
s(543) =< s(539)*s(138)
s(541) =< s(543)
s(535) =< s(538)
s(287) =< aux(135)
s(532) =< s(537)
s(535) =< aux(136)
s(287) =< aux(94)
s(525) =< aux(136)
s(290) =< s(287)
s(528) =< s(525)*s(287)
s(529) =< s(525)*aux(94)
s(530) =< s(525)*s(290)
s(531) =< s(535)
s(526) =< s(534)
s(533) =< s(525)*s(138)
s(527) =< s(533)
s(521) =< aux(158)
s(212) =< aux(177)
s(518) =< s(523)
s(521) =< aux(98)
s(212) =< aux(94)
s(511) =< aux(98)
s(215) =< s(212)
s(514) =< s(511)*s(212)
s(515) =< s(511)*aux(94)
s(516) =< s(511)*s(215)
s(517) =< s(521)
s(512) =< s(520)
s(519) =< s(511)*s(138)
s(513) =< s(519)
s(504) =< s(510)
s(501) =< aux(96)
s(508) =< s(504)*s(138)
s(505) =< s(508)
s(502) =< s(507)
s(506) =< s(501)*s(138)
s(503) =< s(506)

#### Cost of chains of minsort(V1,V,Out):
* Chain [[49,50,51,52,53,54,56],59]: 5*it(49)+16*it(50)+7*it(51)+246*it(52)+7*it(53)+6*s(61)+20*s(63)+22*s(501)+2*s(502)+10*s(503)+71*s(511)+2*s(512)+6*s(513)+8*s(514)+8*s(515)+8*s(516)+8*s(517)+4*s(518)+71*s(525)+2*s(526)+6*s(527)+8*s(528)+8*s(529)+8*s(530)+8*s(531)+4*s(532)+71*s(539)+2*s(540)+6*s(541)+4*s(542)+71*s(547)+2*s(548)+6*s(549)+4*s(550)+2*s(556)+18*s(557)+4*s(562)+16*s(564)+8*s(565)+4
  Such that:aux(184) =< V1
aux(185) =< V1+V
aux(186) =< V1/2+V/2
aux(30) =< aux(185)
aux(30) =< aux(186)
it(52) =< aux(185)
s(61) =< aux(30)
s(62) =< it(52)*aux(30)
s(63) =< s(62)
it(51) =< aux(185)
it(53) =< aux(185)
it(50) =< aux(185)
it(50) =< aux(186)
it(51) =< aux(186)
s(567) =< aux(186)
s(567) =< aux(185)
aux(94) =< aux(185)+1
aux(135) =< aux(185)
aux(99) =< aux(185)-1
s(138) =< aux(185)* (1/2)+1/2
s(567) =< aux(185)* (1/2)
s(559) =< aux(185)* (1/2)
aux(84) =< it(50)*aux(185)
aux(85) =< it(52)*aux(94)
aux(86) =< it(50)*aux(135)
s(546) =< it(52)*aux(135)
s(523) =< it(50)*aux(99)
aux(98) =< it(50)*aux(94)
s(544) =< aux(85)* (1/2)
s(520) =< aux(98)* (1/2)
it(49) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(184)
it(51) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(184)
it(53) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(184)
s(538) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(184)
s(554) =< it(53)*aux(135)
aux(156) =< it(53)*aux(94)
s(537) =< it(51)*aux(99)
aux(136) =< it(51)*aux(94)
s(538) =< it(51)*aux(135)
aux(96) =< it(49)*aux(94)
s(552) =< aux(156)* (1/2)
s(534) =< aux(136)* (1/2)
s(507) =< aux(96)* (1/2)
s(495) =< aux(94)
s(564) =< it(52)*aux(94)
s(565) =< it(52)*s(495)
s(562) =< s(567)
s(558) =< it(52)*s(138)
s(557) =< s(558)
s(556) =< s(559)
s(550) =< s(554)
s(547) =< aux(156)
s(548) =< s(552)
s(551) =< s(547)*s(138)
s(549) =< s(551)
s(542) =< s(546)
s(539) =< aux(85)
s(540) =< s(544)
s(543) =< s(539)*s(138)
s(541) =< s(543)
s(535) =< s(538)
s(287) =< aux(135)
s(532) =< s(537)
s(535) =< aux(136)
s(287) =< aux(94)
s(525) =< aux(136)
s(290) =< s(287)
s(528) =< s(525)*s(287)
s(529) =< s(525)*aux(94)
s(530) =< s(525)*s(290)
s(531) =< s(535)
s(526) =< s(534)
s(533) =< s(525)*s(138)
s(527) =< s(533)
s(521) =< aux(185)
s(212) =< aux(185)
s(518) =< s(523)
s(521) =< aux(98)
s(212) =< aux(94)
s(511) =< aux(98)
s(215) =< s(212)
s(514) =< s(511)*s(212)
s(515) =< s(511)*aux(94)
s(516) =< s(511)*s(215)
s(517) =< s(521)
s(512) =< s(520)
s(519) =< s(511)*s(138)
s(513) =< s(519)
s(501) =< aux(96)
s(506) =< s(501)*s(138)
s(503) =< s(506)
s(502) =< s(507)

  with precondition: [V1>=1,V>=0,Out>=0,Out+V1>=2,V+V1>=Out] 

* Chain [[49,50,51,52,53,54,56],58]: 5*it(49)+8*it(50)+7*it(51)+197*it(52)+7*it(53)+8*it(54)+22*s(501)+2*s(502)+10*s(503)+71*s(511)+2*s(512)+6*s(513)+8*s(514)+8*s(515)+8*s(516)+8*s(517)+4*s(518)+71*s(525)+2*s(526)+6*s(527)+8*s(528)+8*s(529)+8*s(530)+8*s(531)+4*s(532)+71*s(539)+2*s(540)+6*s(541)+4*s(542)+71*s(547)+2*s(548)+6*s(549)+4*s(550)+2*s(556)+18*s(557)+4*s(562)+16*s(564)+8*s(565)+3
  Such that:aux(187) =< V1
aux(188) =< V1+V
aux(189) =< V1/2+V/2
it(51) =< aux(188)
it(52) =< aux(188)
it(53) =< aux(188)
it(54) =< aux(188)
it(50) =< aux(189)
it(51) =< aux(189)
it(54) =< aux(189)
s(567) =< aux(189)
aux(94) =< aux(188)+1
aux(135) =< aux(188)
aux(99) =< aux(188)-1
s(138) =< aux(188)* (1/2)+1/2
s(567) =< aux(188)* (1/2)
s(559) =< aux(188)* (1/2)
aux(84) =< it(50)*aux(188)
aux(85) =< it(52)*aux(94)
aux(86) =< it(54)*aux(135)
s(546) =< it(52)*aux(135)
s(523) =< it(50)*aux(99)
aux(98) =< it(50)*aux(94)
s(544) =< aux(85)* (1/2)
s(520) =< aux(98)* (1/2)
it(49) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(187)
it(51) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(187)
it(53) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(187)
s(538) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(187)
s(554) =< it(53)*aux(135)
aux(156) =< it(53)*aux(94)
s(537) =< it(51)*aux(99)
aux(136) =< it(51)*aux(94)
s(538) =< it(51)*aux(135)
aux(96) =< it(49)*aux(94)
s(552) =< aux(156)* (1/2)
s(534) =< aux(136)* (1/2)
s(507) =< aux(96)* (1/2)
s(495) =< aux(94)
s(564) =< it(52)*aux(94)
s(565) =< it(52)*s(495)
s(562) =< s(567)
s(558) =< it(52)*s(138)
s(557) =< s(558)
s(556) =< s(559)
s(550) =< s(554)
s(547) =< aux(156)
s(548) =< s(552)
s(551) =< s(547)*s(138)
s(549) =< s(551)
s(542) =< s(546)
s(539) =< aux(85)
s(540) =< s(544)
s(543) =< s(539)*s(138)
s(541) =< s(543)
s(535) =< s(538)
s(287) =< aux(135)
s(532) =< s(537)
s(535) =< aux(136)
s(287) =< aux(94)
s(525) =< aux(136)
s(290) =< s(287)
s(528) =< s(525)*s(287)
s(529) =< s(525)*aux(94)
s(530) =< s(525)*s(290)
s(531) =< s(535)
s(526) =< s(534)
s(533) =< s(525)*s(138)
s(527) =< s(533)
s(521) =< aux(188)
s(212) =< aux(188)
s(518) =< s(523)
s(521) =< aux(98)
s(212) =< aux(94)
s(511) =< aux(98)
s(215) =< s(212)
s(514) =< s(511)*s(212)
s(515) =< s(511)*aux(94)
s(516) =< s(511)*s(215)
s(517) =< s(521)
s(512) =< s(520)
s(519) =< s(511)*s(138)
s(513) =< s(519)
s(501) =< aux(96)
s(506) =< s(501)*s(138)
s(503) =< s(506)
s(502) =< s(507)

  with precondition: [V1>=1,V>=0,Out>=0,V+V1>=2,Out+V1>=2,V+V1>=Out+1] 

* Chain [[49,50,51,52,53,54,56],57,59]: 5*it(49)+8*it(50)+7*it(51)+287*it(52)+7*it(53)+8*it(54)+22*s(501)+2*s(502)+10*s(503)+71*s(511)+2*s(512)+6*s(513)+8*s(514)+8*s(515)+8*s(516)+8*s(517)+4*s(518)+71*s(525)+2*s(526)+6*s(527)+8*s(528)+8*s(529)+8*s(530)+8*s(531)+4*s(532)+71*s(539)+2*s(540)+6*s(541)+4*s(542)+71*s(547)+2*s(548)+6*s(549)+4*s(550)+2*s(556)+18*s(557)+4*s(562)+16*s(564)+8*s(565)+4*s(572)+8*s(574)+16*s(591)+8*s(593)+11
  Such that:aux(181) =< V1+V+Out
aux(199) =< V1
aux(200) =< V1+V
aux(201) =< V1/2+V/2
aux(181) =< aux(200)
aux(181) =< aux(201)
it(52) =< aux(200)
s(590) =< aux(200)
s(591) =< it(52)*aux(200)
s(593) =< it(52)*s(590)
s(572) =< aux(201)
s(573) =< it(52)*aux(201)
s(574) =< s(573)
it(51) =< aux(200)
it(53) =< aux(200)
it(54) =< aux(200)
it(50) =< aux(201)
it(51) =< aux(201)
it(54) =< aux(201)
s(567) =< aux(201)
it(50) =< aux(181)
it(51) =< aux(181)
it(54) =< aux(181)
s(567) =< aux(181)
aux(94) =< aux(200)+1
aux(135) =< aux(200)
aux(99) =< aux(200)-1
s(138) =< aux(200)* (1/2)+1/2
s(567) =< aux(200)* (1/2)
s(559) =< aux(200)* (1/2)
aux(84) =< it(50)*aux(200)
aux(85) =< it(52)*aux(94)
aux(86) =< it(54)*aux(135)
s(546) =< it(52)*aux(135)
s(523) =< it(50)*aux(99)
aux(98) =< it(50)*aux(94)
s(544) =< aux(85)* (1/2)
s(520) =< aux(98)* (1/2)
it(49) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(199)
it(51) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(199)
it(53) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(199)
s(538) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(199)
s(554) =< it(53)*aux(135)
aux(156) =< it(53)*aux(94)
s(537) =< it(51)*aux(99)
aux(136) =< it(51)*aux(94)
s(538) =< it(51)*aux(135)
aux(96) =< it(49)*aux(94)
s(552) =< aux(156)* (1/2)
s(534) =< aux(136)* (1/2)
s(507) =< aux(96)* (1/2)
s(495) =< aux(94)
s(564) =< it(52)*aux(94)
s(565) =< it(52)*s(495)
s(562) =< s(567)
s(558) =< it(52)*s(138)
s(557) =< s(558)
s(556) =< s(559)
s(550) =< s(554)
s(547) =< aux(156)
s(548) =< s(552)
s(551) =< s(547)*s(138)
s(549) =< s(551)
s(542) =< s(546)
s(539) =< aux(85)
s(540) =< s(544)
s(543) =< s(539)*s(138)
s(541) =< s(543)
s(535) =< s(538)
s(287) =< aux(135)
s(532) =< s(537)
s(535) =< aux(136)
s(287) =< aux(94)
s(525) =< aux(136)
s(290) =< s(287)
s(528) =< s(525)*s(287)
s(529) =< s(525)*aux(94)
s(530) =< s(525)*s(290)
s(531) =< s(535)
s(526) =< s(534)
s(533) =< s(525)*s(138)
s(527) =< s(533)
s(521) =< aux(200)
s(212) =< aux(200)
s(518) =< s(523)
s(521) =< aux(98)
s(212) =< aux(94)
s(511) =< aux(98)
s(215) =< s(212)
s(514) =< s(511)*s(212)
s(515) =< s(511)*aux(94)
s(516) =< s(511)*s(215)
s(517) =< s(521)
s(512) =< s(520)
s(519) =< s(511)*s(138)
s(513) =< s(519)
s(501) =< aux(96)
s(506) =< s(501)*s(138)
s(503) =< s(506)
s(502) =< s(507)

  with precondition: [V1>=1,V>=0,Out>=1,V+V1>=2,Out+V1>=3,V+V1>=Out] 

* Chain [[49,50,51,52,53,54,56],55,59]: 5*it(49)+8*it(50)+7*it(51)+288*it(52)+7*it(53)+8*it(54)+22*s(501)+2*s(502)+10*s(503)+71*s(511)+2*s(512)+6*s(513)+8*s(514)+8*s(515)+8*s(516)+8*s(517)+4*s(518)+71*s(525)+2*s(526)+6*s(527)+8*s(528)+8*s(529)+8*s(530)+8*s(531)+4*s(532)+71*s(539)+2*s(540)+6*s(541)+4*s(542)+71*s(547)+2*s(548)+6*s(549)+4*s(550)+2*s(556)+18*s(557)+4*s(562)+16*s(564)+8*s(565)+2*s(642)+10*s(644)+11
  Such that:aux(181) =< V1+V+Out
aux(212) =< V1
aux(213) =< V1+V
aux(214) =< V1/2+V/2
aux(181) =< aux(213)
aux(181) =< aux(214)
it(52) =< aux(213)
s(642) =< aux(214)
s(643) =< it(52)*aux(214)
s(644) =< s(643)
it(51) =< aux(213)
it(53) =< aux(213)
it(54) =< aux(213)
it(50) =< aux(214)
it(51) =< aux(214)
it(54) =< aux(214)
s(567) =< aux(214)
it(50) =< aux(181)
it(51) =< aux(181)
it(54) =< aux(181)
s(567) =< aux(181)
aux(94) =< aux(213)+1
aux(135) =< aux(213)
aux(99) =< aux(213)-1
s(138) =< aux(213)* (1/2)+1/2
s(567) =< aux(213)* (1/2)
s(559) =< aux(213)* (1/2)
aux(84) =< it(50)*aux(213)
aux(85) =< it(52)*aux(94)
aux(86) =< it(54)*aux(135)
s(546) =< it(52)*aux(135)
s(523) =< it(50)*aux(99)
aux(98) =< it(50)*aux(94)
s(544) =< aux(85)* (1/2)
s(520) =< aux(98)* (1/2)
it(49) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(212)
it(51) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(212)
it(53) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(212)
s(538) =< aux(85)+aux(86)+aux(85)+aux(84)+aux(212)
s(554) =< it(53)*aux(135)
aux(156) =< it(53)*aux(94)
s(537) =< it(51)*aux(99)
aux(136) =< it(51)*aux(94)
s(538) =< it(51)*aux(135)
aux(96) =< it(49)*aux(94)
s(552) =< aux(156)* (1/2)
s(534) =< aux(136)* (1/2)
s(507) =< aux(96)* (1/2)
s(495) =< aux(94)
s(564) =< it(52)*aux(94)
s(565) =< it(52)*s(495)
s(562) =< s(567)
s(558) =< it(52)*s(138)
s(557) =< s(558)
s(556) =< s(559)
s(550) =< s(554)
s(547) =< aux(156)
s(548) =< s(552)
s(551) =< s(547)*s(138)
s(549) =< s(551)
s(542) =< s(546)
s(539) =< aux(85)
s(540) =< s(544)
s(543) =< s(539)*s(138)
s(541) =< s(543)
s(535) =< s(538)
s(287) =< aux(135)
s(532) =< s(537)
s(535) =< aux(136)
s(287) =< aux(94)
s(525) =< aux(136)
s(290) =< s(287)
s(528) =< s(525)*s(287)
s(529) =< s(525)*aux(94)
s(530) =< s(525)*s(290)
s(531) =< s(535)
s(526) =< s(534)
s(533) =< s(525)*s(138)
s(527) =< s(533)
s(521) =< aux(213)
s(212) =< aux(213)
s(518) =< s(523)
s(521) =< aux(98)
s(212) =< aux(94)
s(511) =< aux(98)
s(215) =< s(212)
s(514) =< s(511)*s(212)
s(515) =< s(511)*aux(94)
s(516) =< s(511)*s(215)
s(517) =< s(521)
s(512) =< s(520)
s(519) =< s(511)*s(138)
s(513) =< s(519)
s(501) =< aux(96)
s(506) =< s(501)*s(138)
s(503) =< s(506)
s(502) =< s(507)

  with precondition: [V1>=1,V>=0,Out>=1,V+V1>=3,V1+2*Out>=5,V+V1>=Out] 

* Chain [59]: 49*s(60)+6*s(61)+20*s(63)+4
  Such that:aux(29) =< V1
aux(30) =< V1/2
s(60) =< aux(29)
s(61) =< aux(30)
s(62) =< s(60)*aux(30)
s(63) =< s(62)

  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [58]: 3
  with precondition: [V1=1,Out=0,V>=0] 

* Chain [57,59]: 90*s(571)+4*s(572)+8*s(574)+16*s(591)+8*s(593)+11
  Such that:aux(196) =< V1
aux(197) =< V1/2
s(571) =< aux(196)
s(590) =< aux(196)
s(591) =< s(571)*aux(196)
s(593) =< s(571)*s(590)
s(572) =< aux(197)
s(573) =< s(571)*aux(197)
s(574) =< s(573)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [55,59]: 91*s(641)+2*s(642)+10*s(644)+11
  Such that:aux(209) =< V1
aux(210) =< V1/2
s(641) =< aux(209)
s(642) =< aux(210)
s(643) =< s(641)*aux(210)
s(644) =< s(643)

  with precondition: [V1>=2,V>=0,Out>=1,V1>=Out] 


#### Cost of chains of start(V1,V,V29):
* Chain [68]: 28*s(1028)+248*s(1029)+14*s(1039)+42*s(1041)+6*s(1055)+2*s(1058)+2*s(1059)+2*s(1060)+16*s(1079)+8*s(1080)+7*s(1081)+1018*s(1082)+7*s(1083)+24*s(1084)+14*s(1085)+5*s(1100)+64*s(1111)+32*s(1112)+4*s(1113)+72*s(1115)+8*s(1116)+4*s(1117)+71*s(1118)+2*s(1119)+6*s(1121)+16*s(1122)+284*s(1123)+8*s(1124)+24*s(1126)+4*s(1129)+71*s(1130)+8*s(1132)+8*s(1133)+8*s(1134)+8*s(1135)+2*s(1136)+6*s(1138)+4*s(1141)+71*s(1142)+8*s(1144)+8*s(1145)+8*s(1146)+8*s(1147)+2*s(1148)+6*s(1150)+22*s(1151)+10*s(1153)+2*s(1154)+6*s(1156)+20*s(1158)+7*s(1159)+7*s(1160)+5*s(1166)+4*s(1176)+4*s(1177)+71*s(1178)+2*s(1179)+6*s(1181)+4*s(1183)+71*s(1184)+8*s(1185)+8*s(1186)+8*s(1187)+8*s(1188)+2*s(1189)+6*s(1191)+4*s(1193)+71*s(1194)+8*s(1195)+8*s(1196)+8*s(1197)+8*s(1198)+2*s(1199)+6*s(1201)+22*s(1202)+10*s(1204)+2*s(1205)+18*s(1207)+14*s(1208)+14*s(1209)+16*s(1210)+16*s(1211)+10*s(1218)+8*s(1228)+8*s(1229)+142*s(1230)+4*s(1231)+12*s(1233)+8*s(1235)+142*s(1236)+16*s(1237)+16*s(1238)+16*s(1239)+16*s(1240)+4*s(1241)+12*s(1243)+8*s(1245)+142*s(1246)+16*s(1247)+16*s(1248)+16*s(1249)+16*s(1250)+4*s(1251)+12*s(1253)+44*s(1254)+20*s(1256)+4*s(1257)+16*s(1258)+8*s(1259)+11
  Such that:s(1052) =< -V1+V
s(1069) =< V1+V
s(1070) =< 2*V1+2*V
s(1072) =< V1/2+V/2
aux(220) =< V1
aux(221) =< V1/2
aux(222) =< V
s(1029) =< aux(220)
s(1028) =< aux(222)
s(1055) =< s(1052)
s(1055) =< aux(222)
s(1057) =< aux(220)
s(1058) =< s(1028)*aux(220)
s(1059) =< s(1028)*aux(222)
s(1060) =< s(1055)*s(1057)
s(1039) =< aux(221)
s(1040) =< s(1029)*aux(221)
s(1041) =< s(1040)
s(1073) =< s(1070)
s(1079) =< s(1029)*aux(220)
s(1080) =< s(1029)*s(1057)
s(1081) =< s(1069)
s(1082) =< s(1069)
s(1083) =< s(1069)
s(1084) =< s(1069)
s(1085) =< s(1072)
s(1081) =< s(1072)
s(1084) =< s(1072)
s(1086) =< s(1072)
s(1087) =< s(1069)+1
s(1088) =< s(1069)
s(1089) =< s(1069)-1
s(1090) =< s(1069)* (1/2)+1/2
s(1086) =< s(1069)* (1/2)
s(1091) =< s(1069)* (1/2)
s(1092) =< s(1085)*s(1069)
s(1093) =< s(1082)*s(1087)
s(1094) =< s(1084)*s(1088)
s(1095) =< s(1082)*s(1088)
s(1096) =< s(1085)*s(1089)
s(1097) =< s(1085)*s(1087)
s(1098) =< s(1093)* (1/2)
s(1099) =< s(1097)* (1/2)
s(1100) =< s(1093)+s(1094)+s(1093)+s(1092)+aux(220)
s(1081) =< s(1093)+s(1094)+s(1093)+s(1092)+aux(220)
s(1083) =< s(1093)+s(1094)+s(1093)+s(1092)+aux(220)
s(1101) =< s(1093)+s(1094)+s(1093)+s(1092)+aux(220)
s(1102) =< s(1083)*s(1088)
s(1103) =< s(1083)*s(1087)
s(1104) =< s(1081)*s(1089)
s(1105) =< s(1081)*s(1087)
s(1101) =< s(1081)*s(1088)
s(1106) =< s(1100)*s(1087)
s(1107) =< s(1103)* (1/2)
s(1108) =< s(1105)* (1/2)
s(1109) =< s(1106)* (1/2)
s(1110) =< s(1087)
s(1111) =< s(1082)*s(1087)
s(1112) =< s(1082)*s(1110)
s(1113) =< s(1086)
s(1114) =< s(1082)*s(1090)
s(1115) =< s(1114)
s(1116) =< s(1091)
s(1117) =< s(1102)
s(1118) =< s(1103)
s(1119) =< s(1107)
s(1120) =< s(1118)*s(1090)
s(1121) =< s(1120)
s(1122) =< s(1095)
s(1123) =< s(1093)
s(1124) =< s(1098)
s(1125) =< s(1123)*s(1090)
s(1126) =< s(1125)
s(1127) =< s(1101)
s(1128) =< s(1088)
s(1129) =< s(1104)
s(1127) =< s(1105)
s(1128) =< s(1087)
s(1130) =< s(1105)
s(1131) =< s(1128)
s(1132) =< s(1130)*s(1128)
s(1133) =< s(1130)*s(1087)
s(1134) =< s(1130)*s(1131)
s(1135) =< s(1127)
s(1136) =< s(1108)
s(1137) =< s(1130)*s(1090)
s(1138) =< s(1137)
s(1139) =< s(1069)
s(1140) =< s(1069)
s(1141) =< s(1096)
s(1139) =< s(1097)
s(1140) =< s(1087)
s(1142) =< s(1097)
s(1143) =< s(1140)
s(1144) =< s(1142)*s(1140)
s(1145) =< s(1142)*s(1087)
s(1146) =< s(1142)*s(1143)
s(1147) =< s(1139)
s(1148) =< s(1099)
s(1149) =< s(1142)*s(1090)
s(1150) =< s(1149)
s(1151) =< s(1106)
s(1152) =< s(1151)*s(1090)
s(1153) =< s(1152)
s(1154) =< s(1109)
s(1155) =< s(1069)
s(1155) =< s(1072)
s(1156) =< s(1155)
s(1157) =< s(1082)*s(1155)
s(1158) =< s(1157)
s(1159) =< s(1069)
s(1160) =< s(1069)
s(1159) =< s(1072)
s(1161) =< s(1072)
s(1161) =< s(1069)
s(1161) =< s(1069)* (1/2)
s(1162) =< s(1084)*s(1069)
s(1163) =< s(1084)*s(1089)
s(1164) =< s(1084)*s(1087)
s(1165) =< s(1164)* (1/2)
s(1166) =< s(1093)+s(1094)+s(1093)+s(1162)+aux(220)
s(1159) =< s(1093)+s(1094)+s(1093)+s(1162)+aux(220)
s(1160) =< s(1093)+s(1094)+s(1093)+s(1162)+aux(220)
s(1167) =< s(1093)+s(1094)+s(1093)+s(1162)+aux(220)
s(1168) =< s(1160)*s(1088)
s(1169) =< s(1160)*s(1087)
s(1170) =< s(1159)*s(1089)
s(1171) =< s(1159)*s(1087)
s(1167) =< s(1159)*s(1088)
s(1172) =< s(1166)*s(1087)
s(1173) =< s(1169)* (1/2)
s(1174) =< s(1171)* (1/2)
s(1175) =< s(1172)* (1/2)
s(1176) =< s(1161)
s(1177) =< s(1168)
s(1178) =< s(1169)
s(1179) =< s(1173)
s(1180) =< s(1178)*s(1090)
s(1181) =< s(1180)
s(1182) =< s(1167)
s(1183) =< s(1170)
s(1182) =< s(1171)
s(1184) =< s(1171)
s(1185) =< s(1184)*s(1128)
s(1186) =< s(1184)*s(1087)
s(1187) =< s(1184)*s(1131)
s(1188) =< s(1182)
s(1189) =< s(1174)
s(1190) =< s(1184)*s(1090)
s(1191) =< s(1190)
s(1192) =< s(1069)
s(1193) =< s(1163)
s(1192) =< s(1164)
s(1194) =< s(1164)
s(1195) =< s(1194)*s(1140)
s(1196) =< s(1194)*s(1087)
s(1197) =< s(1194)*s(1143)
s(1198) =< s(1192)
s(1199) =< s(1165)
s(1200) =< s(1194)*s(1090)
s(1201) =< s(1200)
s(1202) =< s(1172)
s(1203) =< s(1202)*s(1090)
s(1204) =< s(1203)
s(1205) =< s(1175)
s(1073) =< s(1069)
s(1073) =< s(1072)
s(1206) =< s(1082)*s(1072)
s(1207) =< s(1206)
s(1208) =< s(1069)
s(1209) =< s(1069)
s(1210) =< s(1069)
s(1211) =< s(1072)
s(1208) =< s(1072)
s(1210) =< s(1072)
s(1212) =< s(1072)
s(1211) =< s(1073)
s(1208) =< s(1073)
s(1210) =< s(1073)
s(1212) =< s(1073)
s(1212) =< s(1069)* (1/2)
s(1213) =< s(1211)*s(1069)
s(1214) =< s(1210)*s(1088)
s(1215) =< s(1211)*s(1089)
s(1216) =< s(1211)*s(1087)
s(1217) =< s(1216)* (1/2)
s(1218) =< s(1093)+s(1214)+s(1093)+s(1213)+aux(220)
s(1208) =< s(1093)+s(1214)+s(1093)+s(1213)+aux(220)
s(1209) =< s(1093)+s(1214)+s(1093)+s(1213)+aux(220)
s(1219) =< s(1093)+s(1214)+s(1093)+s(1213)+aux(220)
s(1220) =< s(1209)*s(1088)
s(1221) =< s(1209)*s(1087)
s(1222) =< s(1208)*s(1089)
s(1223) =< s(1208)*s(1087)
s(1219) =< s(1208)*s(1088)
s(1224) =< s(1218)*s(1087)
s(1225) =< s(1221)* (1/2)
s(1226) =< s(1223)* (1/2)
s(1227) =< s(1224)* (1/2)
s(1228) =< s(1212)
s(1229) =< s(1220)
s(1230) =< s(1221)
s(1231) =< s(1225)
s(1232) =< s(1230)*s(1090)
s(1233) =< s(1232)
s(1234) =< s(1219)
s(1235) =< s(1222)
s(1234) =< s(1223)
s(1236) =< s(1223)
s(1237) =< s(1236)*s(1128)
s(1238) =< s(1236)*s(1087)
s(1239) =< s(1236)*s(1131)
s(1240) =< s(1234)
s(1241) =< s(1226)
s(1242) =< s(1236)*s(1090)
s(1243) =< s(1242)
s(1244) =< s(1069)
s(1245) =< s(1215)
s(1244) =< s(1216)
s(1246) =< s(1216)
s(1247) =< s(1246)*s(1140)
s(1248) =< s(1246)*s(1087)
s(1249) =< s(1246)*s(1143)
s(1250) =< s(1244)
s(1251) =< s(1217)
s(1252) =< s(1246)*s(1090)
s(1253) =< s(1252)
s(1254) =< s(1224)
s(1255) =< s(1254)*s(1090)
s(1256) =< s(1255)
s(1257) =< s(1227)
s(1258) =< s(1082)*s(1069)
s(1259) =< s(1082)*s(1088)

  with precondition: [V1>=0] 

* Chain [67]: 24*s(1267)+4*s(1270)+6*s(1275)+2*s(1278)+2*s(1279)+2*s(1280)+3
  Such that:s(1272) =< -V+V29
aux(223) =< V
aux(224) =< V29
s(1275) =< s(1272)
s(1275) =< aux(224)
s(1267) =< aux(224)
s(1277) =< aux(223)
s(1278) =< s(1267)*aux(223)
s(1279) =< s(1267)*aux(224)
s(1280) =< s(1275)*s(1277)
s(1270) =< aux(223)

  with precondition: [V1=1,V>=0,V29>=1] 

* Chain [66]: 230*s(1284)+12*s(1285)+38*s(1287)+16*s(1299)+8*s(1300)+7*s(1301)+1018*s(1302)+7*s(1303)+24*s(1304)+14*s(1305)+5*s(1320)+64*s(1331)+32*s(1332)+4*s(1333)+72*s(1335)+8*s(1336)+4*s(1337)+71*s(1338)+2*s(1339)+6*s(1341)+16*s(1342)+284*s(1343)+8*s(1344)+24*s(1346)+4*s(1349)+71*s(1350)+8*s(1352)+8*s(1353)+8*s(1354)+8*s(1355)+2*s(1356)+6*s(1358)+4*s(1361)+71*s(1362)+8*s(1364)+8*s(1365)+8*s(1366)+8*s(1367)+2*s(1368)+6*s(1370)+22*s(1371)+10*s(1373)+2*s(1374)+6*s(1376)+20*s(1378)+7*s(1379)+7*s(1380)+5*s(1386)+4*s(1396)+4*s(1397)+71*s(1398)+2*s(1399)+6*s(1401)+4*s(1403)+71*s(1404)+8*s(1405)+8*s(1406)+8*s(1407)+8*s(1408)+2*s(1409)+6*s(1411)+4*s(1413)+71*s(1414)+8*s(1415)+8*s(1416)+8*s(1417)+8*s(1418)+2*s(1419)+6*s(1421)+22*s(1422)+10*s(1424)+2*s(1425)+18*s(1427)+14*s(1428)+14*s(1429)+16*s(1430)+16*s(1431)+10*s(1438)+8*s(1448)+8*s(1449)+142*s(1450)+4*s(1451)+12*s(1453)+8*s(1455)+142*s(1456)+16*s(1457)+16*s(1458)+16*s(1459)+16*s(1460)+4*s(1461)+12*s(1463)+8*s(1465)+142*s(1466)+16*s(1467)+16*s(1468)+16*s(1469)+16*s(1470)+4*s(1471)+12*s(1473)+44*s(1474)+20*s(1476)+4*s(1477)+16*s(1478)+8*s(1479)+12
  Such that:s(1289) =< V+V29
s(1290) =< 2*V+2*V29
s(1292) =< V/2+V29/2
aux(225) =< V
aux(226) =< V/2
s(1284) =< aux(225)
s(1285) =< aux(226)
s(1286) =< s(1284)*aux(226)
s(1287) =< s(1286)
s(1293) =< s(1290)
s(1298) =< aux(225)
s(1299) =< s(1284)*aux(225)
s(1300) =< s(1284)*s(1298)
s(1301) =< s(1289)
s(1302) =< s(1289)
s(1303) =< s(1289)
s(1304) =< s(1289)
s(1305) =< s(1292)
s(1301) =< s(1292)
s(1304) =< s(1292)
s(1306) =< s(1292)
s(1307) =< s(1289)+1
s(1308) =< s(1289)
s(1309) =< s(1289)-1
s(1310) =< s(1289)* (1/2)+1/2
s(1306) =< s(1289)* (1/2)
s(1311) =< s(1289)* (1/2)
s(1312) =< s(1305)*s(1289)
s(1313) =< s(1302)*s(1307)
s(1314) =< s(1304)*s(1308)
s(1315) =< s(1302)*s(1308)
s(1316) =< s(1305)*s(1309)
s(1317) =< s(1305)*s(1307)
s(1318) =< s(1313)* (1/2)
s(1319) =< s(1317)* (1/2)
s(1320) =< s(1313)+s(1314)+s(1313)+s(1312)+aux(225)
s(1301) =< s(1313)+s(1314)+s(1313)+s(1312)+aux(225)
s(1303) =< s(1313)+s(1314)+s(1313)+s(1312)+aux(225)
s(1321) =< s(1313)+s(1314)+s(1313)+s(1312)+aux(225)
s(1322) =< s(1303)*s(1308)
s(1323) =< s(1303)*s(1307)
s(1324) =< s(1301)*s(1309)
s(1325) =< s(1301)*s(1307)
s(1321) =< s(1301)*s(1308)
s(1326) =< s(1320)*s(1307)
s(1327) =< s(1323)* (1/2)
s(1328) =< s(1325)* (1/2)
s(1329) =< s(1326)* (1/2)
s(1330) =< s(1307)
s(1331) =< s(1302)*s(1307)
s(1332) =< s(1302)*s(1330)
s(1333) =< s(1306)
s(1334) =< s(1302)*s(1310)
s(1335) =< s(1334)
s(1336) =< s(1311)
s(1337) =< s(1322)
s(1338) =< s(1323)
s(1339) =< s(1327)
s(1340) =< s(1338)*s(1310)
s(1341) =< s(1340)
s(1342) =< s(1315)
s(1343) =< s(1313)
s(1344) =< s(1318)
s(1345) =< s(1343)*s(1310)
s(1346) =< s(1345)
s(1347) =< s(1321)
s(1348) =< s(1308)
s(1349) =< s(1324)
s(1347) =< s(1325)
s(1348) =< s(1307)
s(1350) =< s(1325)
s(1351) =< s(1348)
s(1352) =< s(1350)*s(1348)
s(1353) =< s(1350)*s(1307)
s(1354) =< s(1350)*s(1351)
s(1355) =< s(1347)
s(1356) =< s(1328)
s(1357) =< s(1350)*s(1310)
s(1358) =< s(1357)
s(1359) =< s(1289)
s(1360) =< s(1289)
s(1361) =< s(1316)
s(1359) =< s(1317)
s(1360) =< s(1307)
s(1362) =< s(1317)
s(1363) =< s(1360)
s(1364) =< s(1362)*s(1360)
s(1365) =< s(1362)*s(1307)
s(1366) =< s(1362)*s(1363)
s(1367) =< s(1359)
s(1368) =< s(1319)
s(1369) =< s(1362)*s(1310)
s(1370) =< s(1369)
s(1371) =< s(1326)
s(1372) =< s(1371)*s(1310)
s(1373) =< s(1372)
s(1374) =< s(1329)
s(1375) =< s(1289)
s(1375) =< s(1292)
s(1376) =< s(1375)
s(1377) =< s(1302)*s(1375)
s(1378) =< s(1377)
s(1379) =< s(1289)
s(1380) =< s(1289)
s(1379) =< s(1292)
s(1381) =< s(1292)
s(1381) =< s(1289)
s(1381) =< s(1289)* (1/2)
s(1382) =< s(1304)*s(1289)
s(1383) =< s(1304)*s(1309)
s(1384) =< s(1304)*s(1307)
s(1385) =< s(1384)* (1/2)
s(1386) =< s(1313)+s(1314)+s(1313)+s(1382)+aux(225)
s(1379) =< s(1313)+s(1314)+s(1313)+s(1382)+aux(225)
s(1380) =< s(1313)+s(1314)+s(1313)+s(1382)+aux(225)
s(1387) =< s(1313)+s(1314)+s(1313)+s(1382)+aux(225)
s(1388) =< s(1380)*s(1308)
s(1389) =< s(1380)*s(1307)
s(1390) =< s(1379)*s(1309)
s(1391) =< s(1379)*s(1307)
s(1387) =< s(1379)*s(1308)
s(1392) =< s(1386)*s(1307)
s(1393) =< s(1389)* (1/2)
s(1394) =< s(1391)* (1/2)
s(1395) =< s(1392)* (1/2)
s(1396) =< s(1381)
s(1397) =< s(1388)
s(1398) =< s(1389)
s(1399) =< s(1393)
s(1400) =< s(1398)*s(1310)
s(1401) =< s(1400)
s(1402) =< s(1387)
s(1403) =< s(1390)
s(1402) =< s(1391)
s(1404) =< s(1391)
s(1405) =< s(1404)*s(1348)
s(1406) =< s(1404)*s(1307)
s(1407) =< s(1404)*s(1351)
s(1408) =< s(1402)
s(1409) =< s(1394)
s(1410) =< s(1404)*s(1310)
s(1411) =< s(1410)
s(1412) =< s(1289)
s(1413) =< s(1383)
s(1412) =< s(1384)
s(1414) =< s(1384)
s(1415) =< s(1414)*s(1360)
s(1416) =< s(1414)*s(1307)
s(1417) =< s(1414)*s(1363)
s(1418) =< s(1412)
s(1419) =< s(1385)
s(1420) =< s(1414)*s(1310)
s(1421) =< s(1420)
s(1422) =< s(1392)
s(1423) =< s(1422)*s(1310)
s(1424) =< s(1423)
s(1425) =< s(1395)
s(1293) =< s(1289)
s(1293) =< s(1292)
s(1426) =< s(1302)*s(1292)
s(1427) =< s(1426)
s(1428) =< s(1289)
s(1429) =< s(1289)
s(1430) =< s(1289)
s(1431) =< s(1292)
s(1428) =< s(1292)
s(1430) =< s(1292)
s(1432) =< s(1292)
s(1431) =< s(1293)
s(1428) =< s(1293)
s(1430) =< s(1293)
s(1432) =< s(1293)
s(1432) =< s(1289)* (1/2)
s(1433) =< s(1431)*s(1289)
s(1434) =< s(1430)*s(1308)
s(1435) =< s(1431)*s(1309)
s(1436) =< s(1431)*s(1307)
s(1437) =< s(1436)* (1/2)
s(1438) =< s(1313)+s(1434)+s(1313)+s(1433)+aux(225)
s(1428) =< s(1313)+s(1434)+s(1313)+s(1433)+aux(225)
s(1429) =< s(1313)+s(1434)+s(1313)+s(1433)+aux(225)
s(1439) =< s(1313)+s(1434)+s(1313)+s(1433)+aux(225)
s(1440) =< s(1429)*s(1308)
s(1441) =< s(1429)*s(1307)
s(1442) =< s(1428)*s(1309)
s(1443) =< s(1428)*s(1307)
s(1439) =< s(1428)*s(1308)
s(1444) =< s(1438)*s(1307)
s(1445) =< s(1441)* (1/2)
s(1446) =< s(1443)* (1/2)
s(1447) =< s(1444)* (1/2)
s(1448) =< s(1432)
s(1449) =< s(1440)
s(1450) =< s(1441)
s(1451) =< s(1445)
s(1452) =< s(1450)*s(1310)
s(1453) =< s(1452)
s(1454) =< s(1439)
s(1455) =< s(1442)
s(1454) =< s(1443)
s(1456) =< s(1443)
s(1457) =< s(1456)*s(1348)
s(1458) =< s(1456)*s(1307)
s(1459) =< s(1456)*s(1351)
s(1460) =< s(1454)
s(1461) =< s(1446)
s(1462) =< s(1456)*s(1310)
s(1463) =< s(1462)
s(1464) =< s(1289)
s(1465) =< s(1435)
s(1464) =< s(1436)
s(1466) =< s(1436)
s(1467) =< s(1466)*s(1360)
s(1468) =< s(1466)*s(1307)
s(1469) =< s(1466)*s(1363)
s(1470) =< s(1464)
s(1471) =< s(1437)
s(1472) =< s(1466)*s(1310)
s(1473) =< s(1472)
s(1474) =< s(1444)
s(1475) =< s(1474)*s(1310)
s(1476) =< s(1475)
s(1477) =< s(1447)
s(1478) =< s(1302)*s(1289)
s(1479) =< s(1302)*s(1308)

  with precondition: [V1=1,V>=1,V29>=0] 

* Chain [65]: 10*s(1488)+2*s(1489)+4*s(1491)+3
  Such that:aux(227) =< V
aux(228) =< V/2
s(1488) =< aux(227)
s(1489) =< aux(228)
s(1490) =< s(1488)*aux(228)
s(1491) =< s(1490)

  with precondition: [V1=1,V>=2] 

* Chain [64]: 38*s(1497)+3621*s(1504)+60*s(1505)+108*s(1507)+98*s(1509)+48*s(1510)+21*s(1511)+21*s(1513)+72*s(1514)+15*s(1530)+192*s(1541)+96*s(1542)+12*s(1543)+216*s(1545)+24*s(1546)+12*s(1547)+213*s(1548)+6*s(1549)+18*s(1551)+48*s(1552)+852*s(1553)+24*s(1554)+72*s(1556)+12*s(1559)+213*s(1560)+24*s(1562)+24*s(1563)+24*s(1564)+24*s(1565)+6*s(1566)+18*s(1568)+12*s(1571)+213*s(1572)+24*s(1574)+24*s(1575)+24*s(1576)+24*s(1577)+6*s(1578)+18*s(1580)+66*s(1581)+30*s(1583)+6*s(1584)+18*s(1586)+60*s(1588)+21*s(1589)+21*s(1590)+15*s(1596)+12*s(1606)+12*s(1607)+213*s(1608)+6*s(1609)+18*s(1611)+12*s(1613)+213*s(1614)+24*s(1615)+24*s(1616)+24*s(1617)+24*s(1618)+6*s(1619)+18*s(1621)+12*s(1623)+213*s(1624)+24*s(1625)+24*s(1626)+24*s(1627)+24*s(1628)+6*s(1629)+18*s(1631)+66*s(1632)+30*s(1634)+6*s(1635)+42*s(1638)+42*s(1639)+48*s(1640)+48*s(1641)+30*s(1648)+24*s(1658)+24*s(1659)+426*s(1660)+12*s(1661)+36*s(1663)+24*s(1665)+426*s(1666)+48*s(1667)+48*s(1668)+48*s(1669)+48*s(1670)+12*s(1671)+36*s(1673)+24*s(1675)+426*s(1676)+48*s(1677)+48*s(1678)+48*s(1679)+48*s(1680)+12*s(1681)+36*s(1683)+132*s(1684)+60*s(1686)+12*s(1687)+4*s(1904)+2*s(1906)+6*s(2115)+2*s(2118)+2*s(2120)+15
  Such that:s(2112) =< -V+V29
aux(237) =< V
aux(238) =< V29
aux(239) =< 2*V29
aux(240) =< V29/2
s(2115) =< s(2112)
s(2115) =< aux(238)
s(1504) =< aux(238)
s(1903) =< aux(237)
s(2118) =< s(1504)*aux(237)
s(1509) =< s(1504)*aux(238)
s(2120) =< s(2115)*s(1903)
s(1497) =< aux(237)
s(1503) =< aux(239)
s(1505) =< aux(240)
s(1506) =< s(1504)*aux(240)
s(1507) =< s(1506)
s(1508) =< aux(238)
s(1510) =< s(1504)*s(1508)
s(1511) =< aux(238)
s(1513) =< aux(238)
s(1514) =< aux(238)
s(1511) =< aux(240)
s(1514) =< aux(240)
s(1516) =< aux(240)
s(1517) =< aux(238)+1
s(1519) =< aux(238)-1
s(1520) =< aux(238)* (1/2)+1/2
s(1516) =< aux(238)* (1/2)
s(1521) =< aux(238)* (1/2)
s(1522) =< s(1505)*aux(238)
s(1523) =< s(1504)*s(1517)
s(1524) =< s(1514)*s(1508)
s(1525) =< s(1504)*s(1508)
s(1526) =< s(1505)*s(1519)
s(1527) =< s(1505)*s(1517)
s(1528) =< s(1523)* (1/2)
s(1529) =< s(1527)* (1/2)
s(1530) =< s(1523)+s(1524)+s(1523)+s(1522)+aux(238)
s(1511) =< s(1523)+s(1524)+s(1523)+s(1522)+aux(238)
s(1513) =< s(1523)+s(1524)+s(1523)+s(1522)+aux(238)
s(1531) =< s(1523)+s(1524)+s(1523)+s(1522)+aux(238)
s(1532) =< s(1513)*s(1508)
s(1533) =< s(1513)*s(1517)
s(1534) =< s(1511)*s(1519)
s(1535) =< s(1511)*s(1517)
s(1531) =< s(1511)*s(1508)
s(1536) =< s(1530)*s(1517)
s(1537) =< s(1533)* (1/2)
s(1538) =< s(1535)* (1/2)
s(1539) =< s(1536)* (1/2)
s(1540) =< s(1517)
s(1541) =< s(1504)*s(1517)
s(1542) =< s(1504)*s(1540)
s(1543) =< s(1516)
s(1544) =< s(1504)*s(1520)
s(1545) =< s(1544)
s(1546) =< s(1521)
s(1547) =< s(1532)
s(1548) =< s(1533)
s(1549) =< s(1537)
s(1550) =< s(1548)*s(1520)
s(1551) =< s(1550)
s(1552) =< s(1525)
s(1553) =< s(1523)
s(1554) =< s(1528)
s(1555) =< s(1553)*s(1520)
s(1556) =< s(1555)
s(1557) =< s(1531)
s(1558) =< s(1508)
s(1559) =< s(1534)
s(1557) =< s(1535)
s(1558) =< s(1517)
s(1560) =< s(1535)
s(1561) =< s(1558)
s(1562) =< s(1560)*s(1558)
s(1563) =< s(1560)*s(1517)
s(1564) =< s(1560)*s(1561)
s(1565) =< s(1557)
s(1566) =< s(1538)
s(1567) =< s(1560)*s(1520)
s(1568) =< s(1567)
s(1569) =< aux(238)
s(1570) =< aux(238)
s(1571) =< s(1526)
s(1569) =< s(1527)
s(1570) =< s(1517)
s(1572) =< s(1527)
s(1573) =< s(1570)
s(1574) =< s(1572)*s(1570)
s(1575) =< s(1572)*s(1517)
s(1576) =< s(1572)*s(1573)
s(1577) =< s(1569)
s(1578) =< s(1529)
s(1579) =< s(1572)*s(1520)
s(1580) =< s(1579)
s(1581) =< s(1536)
s(1582) =< s(1581)*s(1520)
s(1583) =< s(1582)
s(1584) =< s(1539)
s(1585) =< aux(238)
s(1585) =< aux(240)
s(1586) =< s(1585)
s(1587) =< s(1504)*s(1585)
s(1588) =< s(1587)
s(1589) =< aux(238)
s(1590) =< aux(238)
s(1589) =< aux(240)
s(1591) =< aux(240)
s(1591) =< aux(238)
s(1591) =< aux(238)* (1/2)
s(1592) =< s(1514)*aux(238)
s(1593) =< s(1514)*s(1519)
s(1594) =< s(1514)*s(1517)
s(1595) =< s(1594)* (1/2)
s(1596) =< s(1523)+s(1524)+s(1523)+s(1592)+aux(238)
s(1589) =< s(1523)+s(1524)+s(1523)+s(1592)+aux(238)
s(1590) =< s(1523)+s(1524)+s(1523)+s(1592)+aux(238)
s(1597) =< s(1523)+s(1524)+s(1523)+s(1592)+aux(238)
s(1598) =< s(1590)*s(1508)
s(1599) =< s(1590)*s(1517)
s(1600) =< s(1589)*s(1519)
s(1601) =< s(1589)*s(1517)
s(1597) =< s(1589)*s(1508)
s(1602) =< s(1596)*s(1517)
s(1603) =< s(1599)* (1/2)
s(1604) =< s(1601)* (1/2)
s(1605) =< s(1602)* (1/2)
s(1606) =< s(1591)
s(1607) =< s(1598)
s(1608) =< s(1599)
s(1609) =< s(1603)
s(1610) =< s(1608)*s(1520)
s(1611) =< s(1610)
s(1612) =< s(1597)
s(1613) =< s(1600)
s(1612) =< s(1601)
s(1614) =< s(1601)
s(1615) =< s(1614)*s(1558)
s(1616) =< s(1614)*s(1517)
s(1617) =< s(1614)*s(1561)
s(1618) =< s(1612)
s(1619) =< s(1604)
s(1620) =< s(1614)*s(1520)
s(1621) =< s(1620)
s(1622) =< aux(238)
s(1623) =< s(1593)
s(1622) =< s(1594)
s(1624) =< s(1594)
s(1625) =< s(1624)*s(1570)
s(1626) =< s(1624)*s(1517)
s(1627) =< s(1624)*s(1573)
s(1628) =< s(1622)
s(1629) =< s(1595)
s(1630) =< s(1624)*s(1520)
s(1631) =< s(1630)
s(1632) =< s(1602)
s(1633) =< s(1632)*s(1520)
s(1634) =< s(1633)
s(1635) =< s(1605)
s(1503) =< aux(238)
s(1503) =< aux(240)
s(1638) =< aux(238)
s(1639) =< aux(238)
s(1640) =< aux(238)
s(1641) =< aux(240)
s(1638) =< aux(240)
s(1640) =< aux(240)
s(1642) =< aux(240)
s(1641) =< s(1503)
s(1638) =< s(1503)
s(1640) =< s(1503)
s(1642) =< s(1503)
s(1642) =< aux(238)* (1/2)
s(1643) =< s(1641)*aux(238)
s(1644) =< s(1640)*s(1508)
s(1645) =< s(1641)*s(1519)
s(1646) =< s(1641)*s(1517)
s(1647) =< s(1646)* (1/2)
s(1648) =< s(1523)+s(1644)+s(1523)+s(1643)+aux(238)
s(1638) =< s(1523)+s(1644)+s(1523)+s(1643)+aux(238)
s(1639) =< s(1523)+s(1644)+s(1523)+s(1643)+aux(238)
s(1649) =< s(1523)+s(1644)+s(1523)+s(1643)+aux(238)
s(1650) =< s(1639)*s(1508)
s(1651) =< s(1639)*s(1517)
s(1652) =< s(1638)*s(1519)
s(1653) =< s(1638)*s(1517)
s(1649) =< s(1638)*s(1508)
s(1654) =< s(1648)*s(1517)
s(1655) =< s(1651)* (1/2)
s(1656) =< s(1653)* (1/2)
s(1657) =< s(1654)* (1/2)
s(1658) =< s(1642)
s(1659) =< s(1650)
s(1660) =< s(1651)
s(1661) =< s(1655)
s(1662) =< s(1660)*s(1520)
s(1663) =< s(1662)
s(1664) =< s(1649)
s(1665) =< s(1652)
s(1664) =< s(1653)
s(1666) =< s(1653)
s(1667) =< s(1666)*s(1558)
s(1668) =< s(1666)*s(1517)
s(1669) =< s(1666)*s(1561)
s(1670) =< s(1664)
s(1671) =< s(1656)
s(1672) =< s(1666)*s(1520)
s(1673) =< s(1672)
s(1674) =< aux(238)
s(1675) =< s(1645)
s(1674) =< s(1646)
s(1676) =< s(1646)
s(1677) =< s(1676)*s(1570)
s(1678) =< s(1676)*s(1517)
s(1679) =< s(1676)*s(1573)
s(1680) =< s(1674)
s(1681) =< s(1647)
s(1682) =< s(1676)*s(1520)
s(1683) =< s(1682)
s(1684) =< s(1654)
s(1685) =< s(1684)*s(1520)
s(1686) =< s(1685)
s(1687) =< s(1657)
s(1904) =< s(1497)*aux(237)
s(1906) =< s(1497)*s(1903)

  with precondition: [V1=2,V>=0,V29>=1] 

* Chain [63]: 2741*s(2123)+147*s(2126)+18*s(2127)+60*s(2129)+1353*s(2143)+6*s(2144)+20*s(2146)+1*s(2149)+1199*s(2156)+20*s(2157)+36*s(2159)+32*s(2161)+16*s(2162)+7*s(2163)+7*s(2165)+24*s(2166)+5*s(2182)+64*s(2193)+32*s(2194)+4*s(2195)+72*s(2197)+8*s(2198)+4*s(2199)+71*s(2200)+2*s(2201)+6*s(2203)+16*s(2204)+284*s(2205)+8*s(2206)+24*s(2208)+4*s(2211)+71*s(2212)+8*s(2214)+8*s(2215)+8*s(2216)+8*s(2217)+2*s(2218)+6*s(2220)+4*s(2223)+71*s(2224)+8*s(2226)+8*s(2227)+8*s(2228)+8*s(2229)+2*s(2230)+6*s(2232)+22*s(2233)+10*s(2235)+2*s(2236)+6*s(2238)+20*s(2240)+7*s(2241)+7*s(2242)+5*s(2248)+4*s(2258)+4*s(2259)+71*s(2260)+2*s(2261)+6*s(2263)+4*s(2265)+71*s(2266)+8*s(2267)+8*s(2268)+8*s(2269)+8*s(2270)+2*s(2271)+6*s(2273)+4*s(2275)+71*s(2276)+8*s(2277)+8*s(2278)+8*s(2279)+8*s(2280)+2*s(2281)+6*s(2283)+22*s(2284)+10*s(2286)+2*s(2287)+14*s(2290)+14*s(2291)+16*s(2292)+16*s(2293)+10*s(2300)+8*s(2310)+8*s(2311)+142*s(2312)+4*s(2313)+12*s(2315)+8*s(2317)+142*s(2318)+16*s(2319)+16*s(2320)+16*s(2321)+16*s(2322)+4*s(2323)+12*s(2325)+8*s(2327)+142*s(2328)+16*s(2329)+16*s(2330)+16*s(2331)+16*s(2332)+4*s(2333)+12*s(2335)+44*s(2336)+20*s(2338)+4*s(2339)+26*s(2354)+56*s(2356)+82*s(2371)+38*s(2372)+7*s(2373)+7*s(2375)+24*s(2376)+5*s(2392)+128*s(2403)+64*s(2404)+4*s(2405)+144*s(2407)+16*s(2408)+4*s(2409)+71*s(2410)+2*s(2411)+6*s(2413)+16*s(2414)+710*s(2415)+20*s(2416)+60*s(2418)+4*s(2421)+71*s(2422)+8*s(2424)+8*s(2425)+8*s(2426)+8*s(2427)+2*s(2428)+6*s(2430)+4*s(2433)+71*s(2434)+8*s(2436)+8*s(2437)+8*s(2438)+8*s(2439)+2*s(2440)+6*s(2442)+22*s(2443)+10*s(2445)+2*s(2446)+6*s(2448)+20*s(2450)+7*s(2451)+7*s(2452)+5*s(2458)+4*s(2468)+4*s(2469)+71*s(2470)+2*s(2471)+6*s(2473)+4*s(2475)+71*s(2476)+8*s(2477)+8*s(2478)+8*s(2479)+8*s(2480)+2*s(2481)+6*s(2483)+4*s(2485)+71*s(2486)+8*s(2487)+8*s(2488)+8*s(2489)+8*s(2490)+2*s(2491)+6*s(2493)+22*s(2494)+10*s(2496)+2*s(2497)+14*s(2500)+14*s(2501)+16*s(2502)+16*s(2503)+10*s(2510)+8*s(2520)+8*s(2521)+142*s(2522)+4*s(2523)+12*s(2525)+8*s(2527)+142*s(2528)+16*s(2529)+16*s(2530)+16*s(2531)+16*s(2532)+4*s(2533)+12*s(2535)+8*s(2537)+142*s(2538)+16*s(2539)+16*s(2540)+16*s(2541)+16*s(2542)+4*s(2543)+12*s(2545)+44*s(2546)+20*s(2548)+4*s(2549)+2*s(2616)+2*s(2618)+2*s(2619)+76*s(2626)+2*s(2633)+2*s(2635)+2*s(2636)+32*s(2649)+16*s(2650)+28*s(2651)+10*s(2670)+64*s(2681)+32*s(2682)+8*s(2683)+72*s(2685)+8*s(2686)+8*s(2687)+284*s(2688)+8*s(2689)+24*s(2691)+16*s(2692)+426*s(2693)+12*s(2694)+36*s(2696)+8*s(2699)+16*s(2702)+16*s(2703)+16*s(2704)+16*s(2705)+8*s(2711)+16*s(2714)+16*s(2715)+16*s(2716)+16*s(2717)+44*s(2721)+20*s(2723)+4*s(2724)+14*s(2778)+14*s(2779)+32*s(2780)+10*s(2788)+8*s(2798)+8*s(2799)+142*s(2800)+4*s(2801)+12*s(2803)+8*s(2805)+142*s(2806)+16*s(2807)+16*s(2808)+16*s(2809)+16*s(2810)+4*s(2811)+12*s(2813)+8*s(2815)+142*s(2816)+16*s(2817)+16*s(2818)+16*s(2819)+16*s(2820)+4*s(2821)+12*s(2823)+44*s(2824)+20*s(2826)+4*s(2827)+76*s(2852)+2*s(2859)+2*s(2861)+2*s(2862)+28*s(2877)+10*s(2896)+8*s(2909)+8*s(2913)+284*s(2914)+8*s(2915)+24*s(2917)+16*s(2918)+8*s(2925)+16*s(2928)+16*s(2929)+16*s(2930)+16*s(2931)+8*s(2937)+16*s(2940)+16*s(2941)+16*s(2942)+16*s(2943)+44*s(2947)+20*s(2949)+4*s(2950)+14*s(3004)+14*s(3005)+32*s(3006)+10*s(3014)+8*s(3024)+8*s(3025)+142*s(3026)+4*s(3027)+12*s(3029)+8*s(3031)+142*s(3032)+16*s(3033)+16*s(3034)+16*s(3035)+16*s(3036)+4*s(3037)+12*s(3039)+8*s(3041)+142*s(3042)+16*s(3043)+16*s(3044)+16*s(3045)+16*s(3046)+4*s(3047)+12*s(3049)+44*s(3050)+20*s(3052)+4*s(3053)+15
  Such that:aux(243) =< V+V29/2
aux(244) =< 2*V+V29
s(2142) =< V/2+V29/2
aux(262) =< V
aux(263) =< V+V29
aux(264) =< 2*V
aux(265) =< 2*V+2*V29
aux(266) =< V/2
aux(267) =< V29
aux(268) =< V29/2
s(2149) =< aux(264)
s(2123) =< aux(262)
s(2370) =< aux(262)
s(2371) =< s(2123)*aux(262)
s(2372) =< s(2123)*s(2370)
s(2611) =< aux(262)
s(2611) =< aux(263)
s(2143) =< aux(263)
s(2625) =< s(2143)*aux(263)
s(2626) =< s(2625)
s(2615) =< s(2611)
s(2616) =< s(2123)*s(2611)
s(2618) =< s(2123)*s(2615)
s(2619) =< s(2611)
s(2628) =< aux(262)
s(2628) =< aux(265)
s(2643) =< aux(265)
s(2648) =< aux(263)
s(2649) =< s(2143)*aux(263)
s(2650) =< s(2143)*s(2648)
s(2651) =< aux(263)
s(2656) =< aux(263)
s(2657) =< aux(263)+1
s(2659) =< aux(263)-1
s(2660) =< aux(263)* (1/2)+1/2
s(2656) =< aux(263)* (1/2)
s(2661) =< aux(263)* (1/2)
s(2663) =< s(2143)*s(2657)
s(2664) =< s(2143)*s(2648)
s(2666) =< s(2143)*s(2659)
s(2668) =< s(2663)* (1/2)
s(2670) =< s(2663)+s(2664)+s(2663)+s(2625)+aux(263)
s(2651) =< s(2663)+s(2664)+s(2663)+s(2625)+aux(263)
s(2671) =< s(2663)+s(2664)+s(2663)+s(2625)+aux(263)
s(2672) =< s(2651)*s(2648)
s(2673) =< s(2651)*s(2657)
s(2674) =< s(2651)*s(2659)
s(2671) =< s(2651)*s(2648)
s(2676) =< s(2670)*s(2657)
s(2677) =< s(2673)* (1/2)
s(2679) =< s(2676)* (1/2)
s(2680) =< s(2657)
s(2681) =< s(2143)*s(2657)
s(2682) =< s(2143)*s(2680)
s(2683) =< s(2656)
s(2684) =< s(2143)*s(2660)
s(2685) =< s(2684)
s(2686) =< s(2661)
s(2687) =< s(2672)
s(2688) =< s(2673)
s(2689) =< s(2677)
s(2690) =< s(2688)*s(2660)
s(2691) =< s(2690)
s(2692) =< s(2664)
s(2693) =< s(2663)
s(2694) =< s(2668)
s(2695) =< s(2693)*s(2660)
s(2696) =< s(2695)
s(2697) =< s(2671)
s(2698) =< s(2648)
s(2699) =< s(2674)
s(2697) =< s(2673)
s(2698) =< s(2657)
s(2701) =< s(2698)
s(2702) =< s(2688)*s(2698)
s(2703) =< s(2688)*s(2657)
s(2704) =< s(2688)*s(2701)
s(2705) =< s(2697)
s(2709) =< aux(263)
s(2710) =< aux(263)
s(2711) =< s(2666)
s(2709) =< s(2663)
s(2710) =< s(2657)
s(2713) =< s(2710)
s(2714) =< s(2693)*s(2710)
s(2715) =< s(2693)*s(2657)
s(2716) =< s(2693)*s(2713)
s(2717) =< s(2709)
s(2721) =< s(2676)
s(2722) =< s(2721)*s(2660)
s(2723) =< s(2722)
s(2724) =< s(2679)
s(2643) =< aux(263)
s(2778) =< aux(263)
s(2779) =< aux(263)
s(2780) =< aux(263)
s(2782) =< aux(263)
s(2780) =< s(2643)
s(2778) =< s(2643)
s(2782) =< s(2643)
s(2782) =< aux(263)* (1/2)
s(2783) =< s(2780)*aux(263)
s(2784) =< s(2780)*s(2648)
s(2785) =< s(2780)*s(2659)
s(2786) =< s(2780)*s(2657)
s(2787) =< s(2786)* (1/2)
s(2788) =< s(2663)+s(2784)+s(2663)+s(2783)+aux(263)
s(2778) =< s(2663)+s(2784)+s(2663)+s(2783)+aux(263)
s(2779) =< s(2663)+s(2784)+s(2663)+s(2783)+aux(263)
s(2789) =< s(2663)+s(2784)+s(2663)+s(2783)+aux(263)
s(2790) =< s(2779)*s(2648)
s(2791) =< s(2779)*s(2657)
s(2792) =< s(2778)*s(2659)
s(2793) =< s(2778)*s(2657)
s(2789) =< s(2778)*s(2648)
s(2794) =< s(2788)*s(2657)
s(2795) =< s(2791)* (1/2)
s(2796) =< s(2793)* (1/2)
s(2797) =< s(2794)* (1/2)
s(2798) =< s(2782)
s(2799) =< s(2790)
s(2800) =< s(2791)
s(2801) =< s(2795)
s(2802) =< s(2800)*s(2660)
s(2803) =< s(2802)
s(2804) =< s(2789)
s(2805) =< s(2792)
s(2804) =< s(2793)
s(2806) =< s(2793)
s(2807) =< s(2806)*s(2698)
s(2808) =< s(2806)*s(2657)
s(2809) =< s(2806)*s(2701)
s(2810) =< s(2804)
s(2811) =< s(2796)
s(2812) =< s(2806)*s(2660)
s(2813) =< s(2812)
s(2814) =< aux(263)
s(2815) =< s(2785)
s(2814) =< s(2786)
s(2816) =< s(2786)
s(2817) =< s(2816)*s(2710)
s(2818) =< s(2816)*s(2657)
s(2819) =< s(2816)*s(2713)
s(2820) =< s(2814)
s(2821) =< s(2787)
s(2822) =< s(2816)*s(2660)
s(2823) =< s(2822)
s(2824) =< s(2794)
s(2825) =< s(2824)*s(2660)
s(2826) =< s(2825)
s(2827) =< s(2797)
s(2632) =< s(2628)
s(2633) =< s(2123)*s(2628)
s(2635) =< s(2123)*s(2632)
s(2636) =< s(2628)
s(2851) =< s(2123)*aux(262)
s(2852) =< s(2851)
s(2854) =< aux(262)
s(2854) =< aux(264)
s(2877) =< aux(262)
s(2882) =< aux(262)
s(2379) =< aux(262)+1
s(2381) =< aux(262)-1
s(2382) =< aux(262)* (1/2)+1/2
s(2882) =< aux(262)* (1/2)
s(2383) =< aux(262)* (1/2)
s(2385) =< s(2123)*s(2379)
s(2890) =< s(2123)*s(2370)
s(2892) =< s(2123)*s(2381)
s(2390) =< s(2385)* (1/2)
s(2896) =< s(2385)+s(2890)+s(2385)+s(2851)+aux(262)
s(2877) =< s(2385)+s(2890)+s(2385)+s(2851)+aux(262)
s(2897) =< s(2385)+s(2890)+s(2385)+s(2851)+aux(262)
s(2898) =< s(2877)*s(2370)
s(2899) =< s(2877)*s(2379)
s(2900) =< s(2877)*s(2381)
s(2897) =< s(2877)*s(2370)
s(2902) =< s(2896)*s(2379)
s(2903) =< s(2899)* (1/2)
s(2905) =< s(2902)* (1/2)
s(2402) =< s(2379)
s(2403) =< s(2123)*s(2379)
s(2404) =< s(2123)*s(2402)
s(2909) =< s(2882)
s(2406) =< s(2123)*s(2382)
s(2407) =< s(2406)
s(2408) =< s(2383)
s(2913) =< s(2898)
s(2914) =< s(2899)
s(2915) =< s(2903)
s(2916) =< s(2914)*s(2382)
s(2917) =< s(2916)
s(2918) =< s(2890)
s(2415) =< s(2385)
s(2416) =< s(2390)
s(2417) =< s(2415)*s(2382)
s(2418) =< s(2417)
s(2923) =< s(2897)
s(2420) =< s(2370)
s(2925) =< s(2900)
s(2923) =< s(2899)
s(2420) =< s(2379)
s(2423) =< s(2420)
s(2928) =< s(2914)*s(2420)
s(2929) =< s(2914)*s(2379)
s(2930) =< s(2914)*s(2423)
s(2931) =< s(2923)
s(2935) =< aux(262)
s(2432) =< aux(262)
s(2937) =< s(2892)
s(2935) =< s(2385)
s(2432) =< s(2379)
s(2435) =< s(2432)
s(2940) =< s(2415)*s(2432)
s(2941) =< s(2415)*s(2379)
s(2942) =< s(2415)*s(2435)
s(2943) =< s(2935)
s(2947) =< s(2902)
s(2948) =< s(2947)*s(2382)
s(2949) =< s(2948)
s(2950) =< s(2905)
s(3004) =< aux(262)
s(3005) =< aux(262)
s(3006) =< aux(262)
s(3008) =< aux(262)
s(3006) =< s(2854)
s(3004) =< s(2854)
s(3008) =< s(2854)
s(3008) =< aux(262)* (1/2)
s(3009) =< s(3006)*aux(262)
s(3010) =< s(3006)*s(2370)
s(3011) =< s(3006)*s(2381)
s(3012) =< s(3006)*s(2379)
s(3013) =< s(3012)* (1/2)
s(3014) =< s(2385)+s(3010)+s(2385)+s(3009)+aux(262)
s(3004) =< s(2385)+s(3010)+s(2385)+s(3009)+aux(262)
s(3005) =< s(2385)+s(3010)+s(2385)+s(3009)+aux(262)
s(3015) =< s(2385)+s(3010)+s(2385)+s(3009)+aux(262)
s(3016) =< s(3005)*s(2370)
s(3017) =< s(3005)*s(2379)
s(3018) =< s(3004)*s(2381)
s(3019) =< s(3004)*s(2379)
s(3015) =< s(3004)*s(2370)
s(3020) =< s(3014)*s(2379)
s(3021) =< s(3017)* (1/2)
s(3022) =< s(3019)* (1/2)
s(3023) =< s(3020)* (1/2)
s(3024) =< s(3008)
s(3025) =< s(3016)
s(3026) =< s(3017)
s(3027) =< s(3021)
s(3028) =< s(3026)*s(2382)
s(3029) =< s(3028)
s(3030) =< s(3015)
s(3031) =< s(3018)
s(3030) =< s(3019)
s(3032) =< s(3019)
s(3033) =< s(3032)*s(2420)
s(3034) =< s(3032)*s(2379)
s(3035) =< s(3032)*s(2423)
s(3036) =< s(3030)
s(3037) =< s(3022)
s(3038) =< s(3032)*s(2382)
s(3039) =< s(3038)
s(3040) =< aux(262)
s(3041) =< s(3011)
s(3040) =< s(3012)
s(3042) =< s(3012)
s(3043) =< s(3042)*s(2432)
s(3044) =< s(3042)*s(2379)
s(3045) =< s(3042)*s(2435)
s(3046) =< s(3040)
s(3047) =< s(3013)
s(3048) =< s(3042)*s(2382)
s(3049) =< s(3048)
s(3050) =< s(3020)
s(3051) =< s(3050)*s(2382)
s(3052) =< s(3051)
s(3053) =< s(3023)
s(2858) =< s(2854)
s(2859) =< s(2123)*s(2854)
s(2861) =< s(2123)*s(2858)
s(2862) =< s(2854)
s(2126) =< aux(267)
s(2127) =< aux(268)
s(2128) =< s(2126)*aux(268)
s(2129) =< s(2128)
s(2155) =< aux(265)
s(2156) =< aux(244)
s(2157) =< aux(243)
s(2158) =< s(2156)*aux(243)
s(2159) =< s(2158)
s(2160) =< aux(244)
s(2161) =< s(2156)*aux(244)
s(2162) =< s(2156)*s(2160)
s(2163) =< aux(244)
s(2165) =< aux(244)
s(2166) =< aux(244)
s(2163) =< aux(243)
s(2166) =< aux(243)
s(2168) =< aux(243)
s(2169) =< aux(244)+1
s(2171) =< aux(244)-1
s(2172) =< aux(244)* (1/2)+1/2
s(2168) =< aux(244)* (1/2)
s(2173) =< aux(244)* (1/2)
s(2174) =< s(2157)*aux(244)
s(2175) =< s(2156)*s(2169)
s(2176) =< s(2166)*s(2160)
s(2177) =< s(2156)*s(2160)
s(2178) =< s(2157)*s(2171)
s(2179) =< s(2157)*s(2169)
s(2180) =< s(2175)* (1/2)
s(2181) =< s(2179)* (1/2)
s(2182) =< s(2175)+s(2176)+s(2175)+s(2174)+aux(244)
s(2163) =< s(2175)+s(2176)+s(2175)+s(2174)+aux(244)
s(2165) =< s(2175)+s(2176)+s(2175)+s(2174)+aux(244)
s(2183) =< s(2175)+s(2176)+s(2175)+s(2174)+aux(244)
s(2184) =< s(2165)*s(2160)
s(2185) =< s(2165)*s(2169)
s(2186) =< s(2163)*s(2171)
s(2187) =< s(2163)*s(2169)
s(2183) =< s(2163)*s(2160)
s(2188) =< s(2182)*s(2169)
s(2189) =< s(2185)* (1/2)
s(2190) =< s(2187)* (1/2)
s(2191) =< s(2188)* (1/2)
s(2192) =< s(2169)
s(2193) =< s(2156)*s(2169)
s(2194) =< s(2156)*s(2192)
s(2195) =< s(2168)
s(2196) =< s(2156)*s(2172)
s(2197) =< s(2196)
s(2198) =< s(2173)
s(2199) =< s(2184)
s(2200) =< s(2185)
s(2201) =< s(2189)
s(2202) =< s(2200)*s(2172)
s(2203) =< s(2202)
s(2204) =< s(2177)
s(2205) =< s(2175)
s(2206) =< s(2180)
s(2207) =< s(2205)*s(2172)
s(2208) =< s(2207)
s(2209) =< s(2183)
s(2210) =< s(2160)
s(2211) =< s(2186)
s(2209) =< s(2187)
s(2210) =< s(2169)
s(2212) =< s(2187)
s(2213) =< s(2210)
s(2214) =< s(2212)*s(2210)
s(2215) =< s(2212)*s(2169)
s(2216) =< s(2212)*s(2213)
s(2217) =< s(2209)
s(2218) =< s(2190)
s(2219) =< s(2212)*s(2172)
s(2220) =< s(2219)
s(2221) =< aux(244)
s(2222) =< aux(244)
s(2223) =< s(2178)
s(2221) =< s(2179)
s(2222) =< s(2169)
s(2224) =< s(2179)
s(2225) =< s(2222)
s(2226) =< s(2224)*s(2222)
s(2227) =< s(2224)*s(2169)
s(2228) =< s(2224)*s(2225)
s(2229) =< s(2221)
s(2230) =< s(2181)
s(2231) =< s(2224)*s(2172)
s(2232) =< s(2231)
s(2233) =< s(2188)
s(2234) =< s(2233)*s(2172)
s(2235) =< s(2234)
s(2236) =< s(2191)
s(2237) =< aux(244)
s(2237) =< aux(243)
s(2238) =< s(2237)
s(2239) =< s(2156)*s(2237)
s(2240) =< s(2239)
s(2241) =< aux(244)
s(2242) =< aux(244)
s(2241) =< aux(243)
s(2243) =< aux(243)
s(2243) =< aux(244)
s(2243) =< aux(244)* (1/2)
s(2244) =< s(2166)*aux(244)
s(2245) =< s(2166)*s(2171)
s(2246) =< s(2166)*s(2169)
s(2247) =< s(2246)* (1/2)
s(2248) =< s(2175)+s(2176)+s(2175)+s(2244)+aux(244)
s(2241) =< s(2175)+s(2176)+s(2175)+s(2244)+aux(244)
s(2242) =< s(2175)+s(2176)+s(2175)+s(2244)+aux(244)
s(2249) =< s(2175)+s(2176)+s(2175)+s(2244)+aux(244)
s(2250) =< s(2242)*s(2160)
s(2251) =< s(2242)*s(2169)
s(2252) =< s(2241)*s(2171)
s(2253) =< s(2241)*s(2169)
s(2249) =< s(2241)*s(2160)
s(2254) =< s(2248)*s(2169)
s(2255) =< s(2251)* (1/2)
s(2256) =< s(2253)* (1/2)
s(2257) =< s(2254)* (1/2)
s(2258) =< s(2243)
s(2259) =< s(2250)
s(2260) =< s(2251)
s(2261) =< s(2255)
s(2262) =< s(2260)*s(2172)
s(2263) =< s(2262)
s(2264) =< s(2249)
s(2265) =< s(2252)
s(2264) =< s(2253)
s(2266) =< s(2253)
s(2267) =< s(2266)*s(2210)
s(2268) =< s(2266)*s(2169)
s(2269) =< s(2266)*s(2213)
s(2270) =< s(2264)
s(2271) =< s(2256)
s(2272) =< s(2266)*s(2172)
s(2273) =< s(2272)
s(2274) =< aux(244)
s(2275) =< s(2245)
s(2274) =< s(2246)
s(2276) =< s(2246)
s(2277) =< s(2276)*s(2222)
s(2278) =< s(2276)*s(2169)
s(2279) =< s(2276)*s(2225)
s(2280) =< s(2274)
s(2281) =< s(2247)
s(2282) =< s(2276)*s(2172)
s(2283) =< s(2282)
s(2284) =< s(2254)
s(2285) =< s(2284)*s(2172)
s(2286) =< s(2285)
s(2287) =< s(2257)
s(2155) =< aux(244)
s(2155) =< aux(243)
s(2290) =< aux(244)
s(2291) =< aux(244)
s(2292) =< aux(244)
s(2293) =< aux(243)
s(2290) =< aux(243)
s(2292) =< aux(243)
s(2294) =< aux(243)
s(2293) =< s(2155)
s(2290) =< s(2155)
s(2292) =< s(2155)
s(2294) =< s(2155)
s(2294) =< aux(244)* (1/2)
s(2295) =< s(2293)*aux(244)
s(2296) =< s(2292)*s(2160)
s(2297) =< s(2293)*s(2171)
s(2298) =< s(2293)*s(2169)
s(2299) =< s(2298)* (1/2)
s(2300) =< s(2175)+s(2296)+s(2175)+s(2295)+aux(244)
s(2290) =< s(2175)+s(2296)+s(2175)+s(2295)+aux(244)
s(2291) =< s(2175)+s(2296)+s(2175)+s(2295)+aux(244)
s(2301) =< s(2175)+s(2296)+s(2175)+s(2295)+aux(244)
s(2302) =< s(2291)*s(2160)
s(2303) =< s(2291)*s(2169)
s(2304) =< s(2290)*s(2171)
s(2305) =< s(2290)*s(2169)
s(2301) =< s(2290)*s(2160)
s(2306) =< s(2300)*s(2169)
s(2307) =< s(2303)* (1/2)
s(2308) =< s(2305)* (1/2)
s(2309) =< s(2306)* (1/2)
s(2310) =< s(2294)
s(2311) =< s(2302)
s(2312) =< s(2303)
s(2313) =< s(2307)
s(2314) =< s(2312)*s(2172)
s(2315) =< s(2314)
s(2316) =< s(2301)
s(2317) =< s(2304)
s(2316) =< s(2305)
s(2318) =< s(2305)
s(2319) =< s(2318)*s(2210)
s(2320) =< s(2318)*s(2169)
s(2321) =< s(2318)*s(2213)
s(2322) =< s(2316)
s(2323) =< s(2308)
s(2324) =< s(2318)*s(2172)
s(2325) =< s(2324)
s(2326) =< aux(244)
s(2327) =< s(2297)
s(2326) =< s(2298)
s(2328) =< s(2298)
s(2329) =< s(2328)*s(2222)
s(2330) =< s(2328)*s(2169)
s(2331) =< s(2328)*s(2225)
s(2332) =< s(2326)
s(2333) =< s(2299)
s(2334) =< s(2328)*s(2172)
s(2335) =< s(2334)
s(2336) =< s(2306)
s(2337) =< s(2336)*s(2172)
s(2338) =< s(2337)
s(2339) =< s(2309)
s(2144) =< s(2142)
s(2145) =< s(2143)*s(2142)
s(2146) =< s(2145)
s(2365) =< aux(264)
s(2354) =< aux(266)
s(2355) =< s(2123)*aux(266)
s(2356) =< s(2355)
s(2373) =< aux(262)
s(2375) =< aux(262)
s(2376) =< aux(262)
s(2373) =< aux(266)
s(2376) =< aux(266)
s(2378) =< aux(266)
s(2378) =< aux(262)* (1/2)
s(2384) =< s(2354)*aux(262)
s(2386) =< s(2376)*s(2370)
s(2387) =< s(2123)*s(2370)
s(2388) =< s(2354)*s(2381)
s(2389) =< s(2354)*s(2379)
s(2391) =< s(2389)* (1/2)
s(2392) =< s(2385)+s(2386)+s(2385)+s(2384)+aux(262)
s(2373) =< s(2385)+s(2386)+s(2385)+s(2384)+aux(262)
s(2375) =< s(2385)+s(2386)+s(2385)+s(2384)+aux(262)
s(2393) =< s(2385)+s(2386)+s(2385)+s(2384)+aux(262)
s(2394) =< s(2375)*s(2370)
s(2395) =< s(2375)*s(2379)
s(2396) =< s(2373)*s(2381)
s(2397) =< s(2373)*s(2379)
s(2393) =< s(2373)*s(2370)
s(2398) =< s(2392)*s(2379)
s(2399) =< s(2395)* (1/2)
s(2400) =< s(2397)* (1/2)
s(2401) =< s(2398)* (1/2)
s(2405) =< s(2378)
s(2409) =< s(2394)
s(2410) =< s(2395)
s(2411) =< s(2399)
s(2412) =< s(2410)*s(2382)
s(2413) =< s(2412)
s(2414) =< s(2387)
s(2419) =< s(2393)
s(2421) =< s(2396)
s(2419) =< s(2397)
s(2422) =< s(2397)
s(2424) =< s(2422)*s(2420)
s(2425) =< s(2422)*s(2379)
s(2426) =< s(2422)*s(2423)
s(2427) =< s(2419)
s(2428) =< s(2400)
s(2429) =< s(2422)*s(2382)
s(2430) =< s(2429)
s(2431) =< aux(262)
s(2433) =< s(2388)
s(2431) =< s(2389)
s(2434) =< s(2389)
s(2436) =< s(2434)*s(2432)
s(2437) =< s(2434)*s(2379)
s(2438) =< s(2434)*s(2435)
s(2439) =< s(2431)
s(2440) =< s(2391)
s(2441) =< s(2434)*s(2382)
s(2442) =< s(2441)
s(2443) =< s(2398)
s(2444) =< s(2443)*s(2382)
s(2445) =< s(2444)
s(2446) =< s(2401)
s(2447) =< aux(262)
s(2447) =< aux(266)
s(2448) =< s(2447)
s(2449) =< s(2123)*s(2447)
s(2450) =< s(2449)
s(2451) =< aux(262)
s(2452) =< aux(262)
s(2451) =< aux(266)
s(2453) =< aux(266)
s(2453) =< aux(262)
s(2453) =< aux(262)* (1/2)
s(2454) =< s(2376)*aux(262)
s(2455) =< s(2376)*s(2381)
s(2456) =< s(2376)*s(2379)
s(2457) =< s(2456)* (1/2)
s(2458) =< s(2385)+s(2386)+s(2385)+s(2454)+aux(262)
s(2451) =< s(2385)+s(2386)+s(2385)+s(2454)+aux(262)
s(2452) =< s(2385)+s(2386)+s(2385)+s(2454)+aux(262)
s(2459) =< s(2385)+s(2386)+s(2385)+s(2454)+aux(262)
s(2460) =< s(2452)*s(2370)
s(2461) =< s(2452)*s(2379)
s(2462) =< s(2451)*s(2381)
s(2463) =< s(2451)*s(2379)
s(2459) =< s(2451)*s(2370)
s(2464) =< s(2458)*s(2379)
s(2465) =< s(2461)* (1/2)
s(2466) =< s(2463)* (1/2)
s(2467) =< s(2464)* (1/2)
s(2468) =< s(2453)
s(2469) =< s(2460)
s(2470) =< s(2461)
s(2471) =< s(2465)
s(2472) =< s(2470)*s(2382)
s(2473) =< s(2472)
s(2474) =< s(2459)
s(2475) =< s(2462)
s(2474) =< s(2463)
s(2476) =< s(2463)
s(2477) =< s(2476)*s(2420)
s(2478) =< s(2476)*s(2379)
s(2479) =< s(2476)*s(2423)
s(2480) =< s(2474)
s(2481) =< s(2466)
s(2482) =< s(2476)*s(2382)
s(2483) =< s(2482)
s(2484) =< aux(262)
s(2485) =< s(2455)
s(2484) =< s(2456)
s(2486) =< s(2456)
s(2487) =< s(2486)*s(2432)
s(2488) =< s(2486)*s(2379)
s(2489) =< s(2486)*s(2435)
s(2490) =< s(2484)
s(2491) =< s(2457)
s(2492) =< s(2486)*s(2382)
s(2493) =< s(2492)
s(2494) =< s(2464)
s(2495) =< s(2494)*s(2382)
s(2496) =< s(2495)
s(2497) =< s(2467)
s(2365) =< aux(262)
s(2365) =< aux(266)
s(2500) =< aux(262)
s(2501) =< aux(262)
s(2502) =< aux(262)
s(2503) =< aux(266)
s(2500) =< aux(266)
s(2502) =< aux(266)
s(2504) =< aux(266)
s(2503) =< s(2365)
s(2500) =< s(2365)
s(2502) =< s(2365)
s(2504) =< s(2365)
s(2504) =< aux(262)* (1/2)
s(2505) =< s(2503)*aux(262)
s(2506) =< s(2502)*s(2370)
s(2507) =< s(2503)*s(2381)
s(2508) =< s(2503)*s(2379)
s(2509) =< s(2508)* (1/2)
s(2510) =< s(2385)+s(2506)+s(2385)+s(2505)+aux(262)
s(2500) =< s(2385)+s(2506)+s(2385)+s(2505)+aux(262)
s(2501) =< s(2385)+s(2506)+s(2385)+s(2505)+aux(262)
s(2511) =< s(2385)+s(2506)+s(2385)+s(2505)+aux(262)
s(2512) =< s(2501)*s(2370)
s(2513) =< s(2501)*s(2379)
s(2514) =< s(2500)*s(2381)
s(2515) =< s(2500)*s(2379)
s(2511) =< s(2500)*s(2370)
s(2516) =< s(2510)*s(2379)
s(2517) =< s(2513)* (1/2)
s(2518) =< s(2515)* (1/2)
s(2519) =< s(2516)* (1/2)
s(2520) =< s(2504)
s(2521) =< s(2512)
s(2522) =< s(2513)
s(2523) =< s(2517)
s(2524) =< s(2522)*s(2382)
s(2525) =< s(2524)
s(2526) =< s(2511)
s(2527) =< s(2514)
s(2526) =< s(2515)
s(2528) =< s(2515)
s(2529) =< s(2528)*s(2420)
s(2530) =< s(2528)*s(2379)
s(2531) =< s(2528)*s(2423)
s(2532) =< s(2526)
s(2533) =< s(2518)
s(2534) =< s(2528)*s(2382)
s(2535) =< s(2534)
s(2536) =< aux(262)
s(2537) =< s(2507)
s(2536) =< s(2508)
s(2538) =< s(2508)
s(2539) =< s(2538)*s(2432)
s(2540) =< s(2538)*s(2379)
s(2541) =< s(2538)*s(2435)
s(2542) =< s(2536)
s(2543) =< s(2509)
s(2544) =< s(2538)*s(2382)
s(2545) =< s(2544)
s(2546) =< s(2516)
s(2547) =< s(2546)*s(2382)
s(2548) =< s(2547)
s(2549) =< s(2519)

  with precondition: [V1=2,V>=1,V29>=0] 

* Chain [62]: 10*s(3064)+2*s(3065)+4*s(3067)+3
  Such that:aux(269) =< V
aux(270) =< V/2
s(3064) =< aux(269)
s(3065) =< aux(270)
s(3066) =< s(3064)*aux(270)
s(3067) =< s(3066)

  with precondition: [V1=2,V>=2] 

* Chain [61]: 1
  with precondition: [V=0,V1>=1] 

* Chain [60]: 1*s(3072)+1
  Such that:s(3072) =< V

  with precondition: [V1=V,V1>=1] 


Closed-form bounds of start(V1,V,V29): 
-------------------------------------
* Chain [68] with precondition: [V1>=0] 
    - Upper bound: 412*V1+11+24*V1*V1+2*V1*nat(V)+2*V1*nat(-V1+V)+nat(V)*28+nat(V)*2*nat(V)+nat(nat(V1+V)+ -1)*20*nat(V1+V)+nat(nat(V1+V)+ -1)*12*nat(V1/2+V/2)+nat(V1+V)*2631+nat(V1+V)*132*V1+nat(V1+V)*2179*nat(V1+V)+nat(V1+V)*20*nat(V1+V)*V1+nat(V1+V)*628*nat(V1+V)*nat(V1+V)+nat(V1+V)*65*nat(V1+V)*nat(V1+V)*nat(V1+V)+nat(V1+V)*15*nat(V1+V)*nat(V1+V)*nat(V1/2+V/2)+nat(V1+V)*180*nat(V1+V)*nat(V1/2+V/2)+nat(V1+V)*453*nat(V1/2+V/2)+nat(-V1+V)*6+nat(V1/2+V/2)*295+nat(V1/2+V/2)*18*nat(V1+V)+7*V1+21*V1*V1 
    - Complexity: n^4 
* Chain [67] with precondition: [V1=1,V>=0,V29>=1] 
    - Upper bound: 4*V+3+2*V*V29+2*V*nat(-V+V29)+24*V29+2*V29*V29+nat(-V+V29)*6 
    - Complexity: n^2 
* Chain [66] with precondition: [V1=1,V>=1,V29>=0] 
    - Upper bound: 394*V+12+24*V*V+ (20*V+20*V29-20)* (V+V29)+ (12*V+12*V29-12)* (V/2+V29/2)+ (2631*V+2631*V29)+ (132*V+132*V29)*V+ (2179*V+2179*V29)* (V+V29)+ (20*V+20*V29)* (V+V29)*V+ (V+V29)* ((628*V+628*V29)* (V+V29))+ (V+V29)* ((V+V29)* ((65*V+65*V29)* (V+V29)))+ (V/2+V29/2)* ((V+V29)* ((15*V+15*V29)* (V+V29)))+ (V/2+V29/2)* ((180*V+180*V29)* (V+V29))+ (V/2+V29/2)* (453*V+453*V29)+ (295/2*V+295/2*V29)+ (9*V+9*V29)* (V+V29)+6*V+19*V*V 
    - Complexity: n^4 
* Chain [65] with precondition: [V1=1,V>=2] 
    - Upper bound: 11*V+3+2*V*V 
    - Complexity: n^2 
* Chain [64] with precondition: [V1=2,V>=0,V29>=1] 
    - Upper bound: 38*V+15+6*V*V+2*V*V29+2*V*nat(-V+V29)+8952*V29+7007*V29*V29+1944*V29*V29*V29+195*V29*V29*V29*V29+V29/2* (45*V29*V29*V29)+V29/2* (540*V29*V29)+V29/2* (1359*V29)+ (60*V29-60)*V29+V29/2* (36*V29-36)+nat(-V+V29)*6+903/2*V29+54*V29*V29 
    - Complexity: n^4 
* Chain [63] with precondition: [V1=2,V>=1,V29>=0] 
    - Upper bound: 6552*V+15+5215*V*V+1476*V*V*V+145*V*V*V*V+V/2* (15*V*V*V)+V/2* (180*V*V)+V/2* (453*V)+147*V29+ (52*V-52)*V+V/2* (12*V-12)+ (32*V+32*V29-32)* (V+V29)+ (24*V+12*V29-12)* (V+V29/2)+ (40*V+20*V29-20)* (2*V+V29)+2*V+ (3381*V+3381*V29)+ (2844*V+2844*V29)* (V+V29)+ (V+V29)* ((828*V+828*V29)* (V+V29))+ (V+V29)* ((V+V29)* ((80*V+80*V29)* (V+V29)))+ (301*V+301/2*V29)+ (60*V+30*V29)* (2*V+V29)+ (5952*V+2976*V29)+ (858*V+429*V29)* (V+V29/2)+ (2*V+V29)* ((48*V+24*V29)* (V+V29/2))+ (4670*V+2335*V29)* (2*V+V29)+ (V+V29/2)* ((312*V+156*V29)* (2*V+V29))+ (2*V+V29)* ((1296*V+648*V29)* (2*V+V29))+ (V+V29/2)* ((2*V+V29)* ((30*V+15*V29)* (2*V+V29)))+ (2*V+V29)* ((2*V+V29)* ((130*V+65*V29)* (2*V+V29)))+ (3*V+3*V29)+ (10*V+10*V29)* (V+V29)+307/2*V+28*V*V+9*V29+30*V29*V29 
    - Complexity: n^4 
* Chain [62] with precondition: [V1=2,V>=2] 
    - Upper bound: 11*V+3+2*V*V 
    - Complexity: n^2 
* Chain [61] with precondition: [V=0,V1>=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [60] with precondition: [V1=V,V1>=1] 
    - Upper bound: V+1 
    - Complexity: n 

### Maximum cost of start(V1,V,V29): nat(V)*3+2+max([nat(V)*6+max([nat(V/2)*4*nat(V)+nat(V/2)*2,nat(V)*18+8+nat(V)*2*nat(V)+max([nat(V)*10+1+nat(V)*4*nat(V)+max([nat(V)*18*nat(V)+nat(V)*356+nat(nat(V+V29)+ -1)*20*nat(V+V29)+nat(V+V29)*2631+nat(V+V29)*2179*nat(V+V29)+nat(V+V29)*628*nat(V+V29)*nat(V+V29)+nat(V+V29)*65*nat(V+V29)*nat(V+V29)*nat(V+V29)+nat(V/2+V29/2)*6+nat(V/2+V29/2)*18*nat(V+V29)+nat(V/2)*12+nat(V/2)*38*nat(V)+max([nat(nat(V+V29)+ -1)*12*nat(V/2+V29/2)+nat(V+V29)*132*nat(V)+nat(V+V29)*20*nat(V+V29)*nat(V)+nat(V+V29)*15*nat(V+V29)*nat(V+V29)*nat(V/2+V29/2)+nat(V+V29)*180*nat(V+V29)*nat(V/2+V29/2)+nat(V+V29)*453*nat(V/2+V29/2)+nat(V/2+V29/2)*289,nat(V)*6158+3+nat(V)*5191*nat(V)+nat(V)*1476*nat(V)*nat(V)+nat(V)*145*nat(V)*nat(V)*nat(V)+nat(V)*15*nat(V)*nat(V)*nat(V/2)+nat(V)*180*nat(V)*nat(V/2)+nat(V)*453*nat(V/2)+nat(V29)*147+nat(nat(V)+ -1)*52*nat(V)+nat(nat(V)+ -1)*12*nat(V/2)+nat(nat(V+V29)+ -1)*12*nat(V+V29)+nat(nat(2*V+V29)+ -1)*12*nat(V+V29/2)+nat(nat(2*V+V29)+ -1)*20*nat(2*V+V29)+nat(2*V)+nat(V+V29)*750+nat(V+V29)*665*nat(V+V29)+nat(V+V29)*200*nat(V+V29)*nat(V+V29)+nat(V+V29)*15*nat(V+V29)*nat(V+V29)*nat(V+V29)+nat(V+V29/2)*301+nat(V+V29/2)*60*nat(2*V+V29)+nat(2*V+V29)*2976+nat(2*V+V29)*429*nat(V+V29/2)+nat(2*V+V29)*24*nat(V+V29/2)*nat(2*V+V29)+nat(2*V+V29)*2335*nat(2*V+V29)+nat(2*V+V29)*156*nat(2*V+V29)*nat(V+V29/2)+nat(2*V+V29)*648*nat(2*V+V29)*nat(2*V+V29)+nat(2*V+V29)*15*nat(2*V+V29)*nat(2*V+V29)*nat(V+V29/2)+nat(2*V+V29)*65*nat(2*V+V29)*nat(2*V+V29)*nat(2*V+V29)+nat(V/2+V29/2)*2*nat(V+V29)+nat(V/2)*295+nat(V/2)*18*nat(V)+nat(V29/2)*18+nat(V29/2)*60*nat(V29)]),nat(V)*2*nat(V29)+3+nat(V)*2*nat(-V+V29)+nat(V29)*8952+nat(V29)*7007*nat(V29)+nat(V29)*1944*nat(V29)*nat(V29)+nat(V29)*195*nat(V29)*nat(V29)*nat(V29)+nat(V29)*45*nat(V29)*nat(V29)*nat(V29/2)+nat(V29)*540*nat(V29)*nat(V29/2)+nat(V29)*1359*nat(V29/2)+nat(nat(V29)+ -1)*60*nat(V29)+nat(nat(V29)+ -1)*36*nat(V29/2)+nat(-V+V29)*6+nat(V29/2)*903+nat(V29/2)*108*nat(V29)]),24*V1*V1+412*V1+2*V1*nat(V)+2*V1*nat(-V1+V)+nat(nat(V1+V)+ -1)*20*nat(V1+V)+nat(nat(V1+V)+ -1)*12*nat(V1/2+V/2)+nat(V1+V)*2631+nat(V1+V)*132*V1+nat(V1+V)*2179*nat(V1+V)+nat(V1+V)*20*nat(V1+V)*V1+nat(V1+V)*628*nat(V1+V)*nat(V1+V)+nat(V1+V)*65*nat(V1+V)*nat(V1+V)*nat(V1+V)+nat(V1+V)*15*nat(V1+V)*nat(V1+V)*nat(V1/2+V/2)+nat(V1+V)*180*nat(V1+V)*nat(V1/2+V/2)+nat(V1+V)*453*nat(V1/2+V/2)+nat(-V1+V)*6+nat(V1/2+V/2)*295+nat(V1/2+V/2)*18*nat(V1+V)+7*V1+21*V1*V1])]),nat(V)*2*nat(-V+V29)+nat(V)*2*nat(V29)+nat(V29)*24+nat(V29)*2*nat(V29)+nat(-V+V29)*6])+nat(V)+1 
Asymptotic class: n^4 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 49 ms.
* Invariants computed in 108 ms.
   - Backward Invariants 63 ms.
   - Transitive Invariants 18 ms.
* Refinement performed in 433 ms.
* Termination proved in 29 ms.
* Upper bounds computed in 8358 ms.
   - Equation cost structures 5918 ms.
   - Phase cost structures 650 ms.
   - Chain cost structures 231 ms.
   - Solving cost expressions 888 ms.
* Total analysis performed in 9033 ms.



Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [plus/3]
1. recursive [non_tail] : [times/3]
2. non_recursive  : [start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into plus/3
1. SCC is partially evaluated into times/3
2. SCC is partially evaluated into start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations plus/3 
* CE 8 is refined into CE [10] 
* CE 9 is refined into CE [11] 
* CE 6 is refined into CE [12] 
* CE 7 is refined into CE [13] 


#### Refined cost equations plus/3 
* CE 10: plus(V1,V,Out) = 1+ plus(V1,W1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 11: plus(V1,V,Out) = 1+ plus(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 12: plus(A,B,A) = 1
     [A>=0,B=0] 
* CE 13: plus(A,B,B) = 1
     [B>=0,A=0] 

### Cost equations --> "Loop" of plus/3 
* CEs [12] --> Loop 8 
* CEs [13] --> Loop 9 
* CEs [10] --> Loop 10 
* CEs [11] --> Loop 11 

#### Loops of plus/3 
* Loop 8: plus(A,B,A) [A>=0,B=0] 
* Loop 9: plus(A,B,B) [B>=0,A=0] 
* Loop 10: plus(V1,V,Out)->  plus(V1,V',Out')
                  [V>=1,V1>=0,Out=Out'+1,V=V'+1] 
* Loop 11: plus(V1,V,Out)->  plus(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 

### Ranking functions of CR plus(V1,V,Out) 
* RF of phase [10,11]: [V1+V]

#### Partial ranking functions of CR plus(V1,V,Out) 
* Partial RF of phase [10,11]:
  - RF of loop [10:1]:
    V
  - RF of loop [11:1]:
    V1


### Resulting Chains:plus(V1,V,Out) 
* [[10,11],9]
* [[10,11],8]
* [9]
* [8]


### Merging Chains  plus/3 into  External patterns of execution 
* [[9]] --> 1 
* [[8]] --> 2 
* [[8,[10,11]],[9,[10,11]]] --> 3 


### Specialization of cost equations times/3 
* CE 5 is refined into CE [14,15,16] 
* CE 4 is refined into CE [17] 


#### Refined cost equations times/3 
* CE 14: times(A,B,A) = 1+ times(A,C,D)+ plus(E,A,A):1
     [C>=0,A>=0,C+1=B,D=0,E=0] 
* CE 15: times(V1,V,Out) = 1+ times(W1,X1,Out)+ plus(Out,Y1,Out):2
     [X1>=0,Out>=0,X1+1=V,W1=0,Y1=0,V1=0] 
* CE 16: times(V1,V,Out) = 1+ times(W1,X1,Y1)+ plus(Y1,Z1,Out):3
     [Out>=Y1,X1>=0,Out>=1,Y1>=0,Out=Y1+W1,Out=Y1+Z1,Out=V1+Y1,X1+1=V] 
* CE 17: times(V1,V,Out) = 1
     [V1>=0,Out=0,V=0] 

### Cost equations --> "Loop" of times/3 
* CEs [17] --> Loop 12 
* CEs [16] --> Loop 13 
* CEs [14] --> Loop 14 
* CEs [15] --> Loop 15 

#### Loops of times/3 
* Loop 12: times(V1,V,Out) [V1>=0,Out=0,V=0] 
* Loop 13: times(V1,V,Out)->  times(V1,V',Out')
                  [Out>=V1,Out>=1,V>=1,V1>=0,Out=V1+Out',V=V'+1] 
* Loop 14: times(A,B,A)->  times(A,A',B')
                  [B>=1,A>=0,B=A'+1,B'=0] 
* Loop 15: times(V1,V,Out)->  times(V1',V',Out)
                  [Out>=0,V>=1,V=V'+1,V1'=0,V1=0] 

### Ranking functions of CR times(V1,V,Out) 
* RF of phase [13,14,15]: [V]

#### Partial ranking functions of CR times(V1,V,Out) 
* Partial RF of phase [13,14,15]:
  - RF of loop [13:1,14:1,15:1]:
    V


### Resulting Chains:times(V1,V,Out) 
* [[13,14,15],12]
* [12]


### Merging Chains  times/3 into  External patterns of execution 
* [[12]] --> 1 
* [[12,[13,14,15]]] --> 2 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [18,19] 
* CE 3 is refined into CE [20,21,22] 


#### Refined cost equations start/2 
* CE 18: start(V1,V) = 0+ times(V1,W1,X1):1
     [V1>=0,X1=0,W1=0,V=0] 
* CE 19: start(V1,V) = 0+ times(V1,V,W1):2
     [W1>=V1,V>=1,V1>=0] 
* CE 20: start(V1,V) = 0+ plus(W1,V,V):1
     [V>=0,W1=0,V1=0] 
* CE 21: start(V1,V) = 0+ plus(V1,W1,V1):2
     [V1>=0,W1=0,V=0] 
* CE 22: start(V1,V) = 0+ plus(V1,W1,X1):3
     [X1>=V1,X1>=1,V1>=0,X1=V1+W1,X1=V1+V] 

### Cost equations --> "Loop" of start/2 
* CEs [19,22] --> Loop 16 
* CEs [18,21] --> Loop 17 
* CEs [20] --> Loop 18 

#### Loops of start/2 
* Loop 16: start(V1,V) [V1+V>=1,V>=0,V1>=0] 
* Loop 17: start(V1,V) [V1>=0,V=0] 
* Loop 18: start(V1,V) [V>=0,V1=0] 

### Ranking functions of CR start(V1,V) 

#### Partial ranking functions of CR start(V1,V) 


### Resulting Chains:start(V1,V) 
* [18]
* [17]
* [16]


### Merging Chains  start/2 into  External patterns of execution 
* [[18]] --> 1 
* [[17]] --> 2 
* [[16]] --> 3 


Computing Bounds
=====================================

#### Cost of loops [10,11] 

 * loop 10:plus(V1,V,Out) -> [plus(V1',V',Out')] 
1
 * loop 11:plus(V1,V,Out) -> [plus(V1',V',Out')] 
1
#### Cost of phase [10,11]:plus(V1,V,Out) -> [plus(V1',V',Out')] 
1*it(10)+1*it(11)+0
  Such that:it(11) =< V1
it(11) =< V1-V1'
it(10) =< V
it(10) =< V-V'
aux(1) =< V1+V
aux(2) =< V1+V-V1'-V'
it(10) =< aux(1)
it(11) =< aux(1)
it(10) =< aux(2)
it(11) =< aux(2)

#### Cost of phase [10,11]:plus(V1,V,Out) -> [plus(V1',V',Out')] 
1*it(10)+1*it(11)+0
  Such that:it(11) =< V1
it(11) =< V1-V1'
it(10) =< V
it(10) =< V-V'
aux(1) =< V1+V
aux(2) =< V1+V-V1'-V'
it(10) =< aux(1)
it(11) =< aux(1)
it(10) =< aux(2)
it(11) =< aux(2)

#### Cost of chains of plus(V1,V,Out):
* Chain [[10,11],9]: 1*it(10)+1*it(11)+1
  Such that:it(10) =< -V1+Out
it(11) =< V1
aux(3) =< Out
it(10) =< aux(3)
it(11) =< aux(3)

  with precondition: [V+V1=Out,V1>=0,V>=0,V+V1>=1] 

* Chain [[10,11],8]: 1*it(10)+1*it(11)+1
  Such that:it(11) =< -V+Out
it(10) =< V
aux(4) =< Out
it(10) =< aux(4)
it(11) =< aux(4)

  with precondition: [V+V1=Out,V1>=0,V>=0,V+V1>=1] 

* Chain [9]: 1
  with precondition: [V1=0,V=Out,V>=0] 

* Chain [8]: 1
  with precondition: [V=0,V1=Out,V1>=0] 


#### Cost of loops [13,14,15] 

 * loop 13:times(V1,V,Out) -> [times(V1',V',Out')] 
2*s(13)+2*s(14)+2
  Such that:s(12) =< V1
s(13) =< s(12)

 * loop 14:times(V1,V,Out) -> [times(V1',V',Out')] 
2
 * loop 15:times(V1,V,Out) -> [times(V1',V',Out')] 
2
#### Cost of phase [13,14,15]:times(V1,V,Out) -> [times(V1',V',Out')] 
6*it(13)+2*s(15)+2*s(16)+0
  Such that:aux(7) =< V1
aux(8) =< V
aux(9) =< V-V'
it(13) =< aux(8)
it(13) =< aux(9)
s(17) =< it(13)*aux(7)
s(15) =< s(17)

#### Cost of chains of times(V1,V,Out):
* Chain [[13,14,15],12]: 6*it(13)+2*s(15)+2*s(16)+1
  Such that:aux(7) =< V1
aux(10) =< V
it(13) =< aux(10)
s(17) =< it(13)*aux(7)
s(15) =< s(17)

  with precondition: [V1>=0,V>=1,Out>=V1] 

* Chain [12]: 1
  with precondition: [V=0,Out=0,V1>=0] 


#### Cost of chains of start(V1,V):
* Chain [18]: 1
  with precondition: [V1=0,V>=0] 

* Chain [17]: 1
  with precondition: [V=0,V1>=0] 

* Chain [16]: 6*s(20)+2*s(22)+2*s(23)+2*s(24)+2*s(25)+1
  Such that:s(28) =< V1+V
aux(13) =< V1
aux(14) =< V
s(20) =< aux(14)
s(21) =< s(20)*aux(13)
s(22) =< s(21)
s(25) =< aux(13)
s(24) =< aux(14)
s(24) =< s(28)
s(25) =< s(28)

  with precondition: [V1>=0,V>=0,V+V1>=1] 


Closed-form bounds of start(V1,V): 
-------------------------------------
* Chain [18] with precondition: [V1=0,V>=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [17] with precondition: [V=0,V1>=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [16] with precondition: [V1>=0,V>=0,V1+V>=1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of start(V1,V): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 5 ms.
* Invariants computed in 23 ms.
   - Backward Invariants 10 ms.
   - Transitive Invariants 6 ms.
* Refinement performed in 32 ms.
* Termination proved in 6 ms.
* Upper bounds computed in 44 ms.
   - Equation cost structures 14 ms.
   - Phase cost structures 21 ms.
   - Chain cost structures 12 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 125 ms.


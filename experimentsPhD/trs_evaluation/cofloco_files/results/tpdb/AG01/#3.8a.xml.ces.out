
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [pred/2]
1. recursive [non_tail] : [minus/3]
2. recursive  : [quot/3]
3. recursive  : [log/2]
4. non_recursive  : [start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into pred/2
1. SCC is partially evaluated into minus/3
2. SCC is partially evaluated into quot/3
3. SCC is partially evaluated into log/2
4. SCC is partially evaluated into start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations pred/2 
* CE 6 is refined into CE [17] 
* CE 7 is refined into CE [18] 


#### Refined cost equations pred/2 
* CE 17: pred(V,Out) = 1
     [Out>=0,Out+1=V] 
* CE 18: pred(V,Out) = 0
     [V>=0,Out=0] 

### Cost equations --> "Loop" of pred/2 
* CEs [17] --> Loop 11 
* CEs [18] --> Loop 12 

#### Loops of pred/2 
* Loop 11: pred(V,Out) [V>=1,V=Out+1] 
* Loop 12: pred(V,Out) [V>=0,Out=0] 

### Ranking functions of CR pred(V,Out) 

#### Partial ranking functions of CR pred(V,Out) 


### Resulting Chains:pred(V,Out) 
* [12]
* [11]


### Merging Chains  pred/2 into  External patterns of execution 
* [[12]] --> 1 
* [[11]] --> 2 


### Specialization of cost equations minus/3 
* CE 10 is refined into CE [19] 
* CE 8 is refined into CE [20] 
* CE 9 is refined into CE [21,22] 


#### Refined cost equations minus/3 
* CE 19: minus(V,V2,Out) = 0
     [V2>=0,V>=0,Out=0] 
* CE 20: minus(A,B,A) = 1
     [A>=0,B=0] 
* CE 21: minus(V,V2,Out) = 1+ minus(V,W2,X2)+ pred(X2,Y2):1
     [W2>=0,X2>=0,V>=0,W2+1=V2,Y2=0,Out=0] 
* CE 22: minus(V,V2,Out) = 1+ minus(V,W2,X2)+ pred(Y2,Out):2
     [W2>=0,Out>=0,V>=0,Out+1=X2,Out+1=Y2,W2+1=V2] 

### Cost equations --> "Loop" of minus/3 
* CEs [22] --> Loop 13 
* CEs [21] --> Loop 14 
* CEs [19] --> Loop 15 
* CEs [20] --> Loop 16 

#### Loops of minus/3 
* Loop 13: minus(V,V2,Out)->  minus(V,V2',Out')
                  [Out>=0,V2>=1,V>=0,Out+1=Out',V2=V2'+1] 
* Loop 14: minus(V,V2,Out)->  minus(V,V2',Out')
                  [Out'>=0,V2>=1,V>=0,V2=V2'+1,Out=0] 
* Loop 15: minus(V,V2,Out) [V2>=0,V>=0,Out=0] 
* Loop 16: minus(A,B,A) [A>=0,B=0] 

### Ranking functions of CR minus(V,V2,Out) 
* RF of phase [13]: [V2]
* RF of phase [14]: [V2]

#### Partial ranking functions of CR minus(V,V2,Out) 
* Partial RF of phase [13]:
  - RF of loop [13:1]:
    V2
* Partial RF of phase [14]:
  - RF of loop [14:1]:
    V2


### Resulting Chains:minus(V,V2,Out) 
* [[14],[13],16]
* [[14],16]
* [[14],15]
* [[13],16]
* [16]
* [15]


### Merging Chains  minus/3 into  External patterns of execution 
* [[16]] --> 1 
* [[15],[15,[14]],[16,[14]],[16,[13],[14]]] --> 2 
* [[16,[13]]] --> 3 


### Specialization of cost equations quot/3 
* CE 11 is refined into CE [23] 
* CE 13 is refined into CE [24] 
* CE 12 is refined into CE [25,26,27] 


#### Refined cost equations quot/3 
* CE 23: quot(V,V2,Out) = 1
     [V2>=1,Out=0,V=0] 
* CE 24: quot(V,V2,Out) = 0
     [V2>=0,V>=0,Out=0] 
* CE 25: quot(V,V2,Out) = 1+ minus(W2,X2,W2):1+ quot(W2,Y2,Z2)
     [W2>=0,Z2+1=Out,W2+1=V,Y2=1,X2=0,V2=1] 
* CE 26: quot(V,V2,Out) = 1+ minus(W2,X2,Y2):2+ quot(Z2,A3,B3)
     [X2>=0,W2>=0,X2+1=A3,B3+1=Out,X2+1=V2,W2+1=V,Z2=0,Y2=0] 
* CE 27: quot(V,V2,Out) = 1+ minus(W2,X2,Y2):3+ quot(Y2,Z2,A3)
     [Y2>=0,X2>=1,X2+Y2=W2,X2+Y2+1=V,X2+1=Z2,A3+1=Out,X2+1=V2] 

### Cost equations --> "Loop" of quot/3 
* CEs [27] --> Loop 17 
* CEs [26] --> Loop 18 
* CEs [25] --> Loop 19 
* CEs [23,24] --> Loop 20 

#### Loops of quot/3 
* Loop 17: quot(V,V2,Out)->  quot(V',V2,Out')
                  [V>=V2,V2>=2,V=V2+V',Out=Out'+1] 
* Loop 18: quot(V,V2,Out)->  quot(V',V2,Out')
                  [V2>=1,V>=1,Out=Out'+1,V'=0] 
* Loop 19: quot(V,V2,Out)->  quot(V',V2',Out')
                  [V>=1,Out=Out'+1,V=V'+1,V2'=1,V2=1] 
* Loop 20: quot(V,V2,Out) [V2>=0,V>=0,Out=0] 

### Ranking functions of CR quot(V,V2,Out) 
* RF of phase [17]: [V-1,V-V2+1]
* RF of phase [19]: [V]

#### Partial ranking functions of CR quot(V,V2,Out) 
* Partial RF of phase [17]:
  - RF of loop [17:1]:
    V-1
    V-V2+1
* Partial RF of phase [19]:
  - RF of loop [19:1]:
    V


### Resulting Chains:quot(V,V2,Out) 
* [[19],20]
* [[19],18,20]
* [[17],20]
* [[17],18,20]
* [20]
* [18,20]


### Merging Chains  quot/3 into  External patterns of execution 
* [[20,18,[19]],[20,[19]]] --> 1 
* [[20]] --> 2 
* [[20,18]] --> 3 
* [[20,[17]]] --> 4 
* [[20,18,[17]]] --> 5 


### Specialization of cost equations log/2 
* CE 14 is refined into CE [28] 
* CE 16 is refined into CE [29] 
* CE 15 is refined into CE [30,31,32,33] 


#### Refined cost equations log/2 
* CE 28: log(V,Out) = 1
     [Out=0,V=1] 
* CE 29: log(V,Out) = 0
     [V>=0,Out=0] 
* CE 30: log(V,Out) = 1+ quot(W,X,Y):2+ log(Z,A1)
     [W>=0,A1+1=Out,W+2=V,Z=1,Y=0,X=2] 
* CE 31: log(V,Out) = 1+ quot(W,X,Y):3+ log(Z,A1)
     [W>=1,A1+1=Out,W+2=V,Z=2,Y=1,X=2] 
* CE 32: log(V,Out) = 1+ quot(W,X,Y):4+ log(Z,A1)
     [W>=2*Y,Y>=1,Y+1=Z,A1+1=Out,W+2=V,X=2] 
* CE 33: log(V,Out) = 1+ quot(W,X,Y):5+ log(Z,A1)
     [W+1>=2*Y,Y>=2,Y+1=Z,A1+1=Out,W+2=V,X=2] 

### Cost equations --> "Loop" of log/2 
* CEs [33] --> Loop 21 
* CEs [32] --> Loop 22 
* CEs [31] --> Loop 23 
* CEs [30] --> Loop 24 
* CEs [28,29] --> Loop 25 

#### Loops of log/2 
* Loop 21: log(V,Out)->  log(V',Out')
                  [V+1>=2*V',V'>=3,Out=Out'+1] 
* Loop 22: log(V,Out)->  log(V',Out')
                  [V>=2*V',V'>=2,Out=Out'+1] 
* Loop 23: log(V,Out)->  log(V',Out')
                  [V>=3,Out=Out'+1,V'=2] 
* Loop 24: log(V,Out)->  log(V',Out')
                  [V>=2,Out=Out'+1,V'=1] 
* Loop 25: log(V,Out) [V>=0,Out=0] 

### Ranking functions of CR log(V,Out) 
* RF of phase [21,22]: [V-3,V/2-3/2]

#### Partial ranking functions of CR log(V,Out) 
* Partial RF of phase [21,22]:
  - RF of loop [21:1]:
    V/2-2
  - RF of loop [22:1]:
    V-3


### Resulting Chains:log(V,Out) 
* [[21,22],25]
* [[21,22],24,25]
* [[21,22],23,25]
* [[21,22],23,24,25]
* [25]
* [24,25]
* [23,25]
* [23,24,25]


### Merging Chains  log/2 into  External patterns of execution 
* [[25]] --> 1 
* [[25,23],[25,24]] --> 2 
* [[25,24,23]] --> 3 
* [[25,[21,22]]] --> 4 
* [[25,23,[21,22]],[25,24,[21,22]]] --> 5 
* [[25,24,23,[21,22]]] --> 6 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [34,35] 
* CE 3 is refined into CE [36,37,38] 
* CE 4 is refined into CE [39,40,41,42,43] 
* CE 5 is refined into CE [44,45,46,47,48,49] 


#### Refined cost equations start/2 
* CE 34: start(V,V2) = 0+ pred(V,W2):1
     [V>=0,W2=0] 
* CE 35: start(V,V2) = 0+ pred(W2,X2):2
     [X2>=0,X2+1=W2,X2+1=V] 
* CE 36: start(V,V2) = 0+ minus(V,W2,V):1
     [V>=0,W2=0,V2=0] 
* CE 37: start(V,V2) = 0+ minus(V,V2,W2):2
     [V2>=0,V>=0,W2=0] 
* CE 38: start(V,V2) = 0+ minus(W2,V2,X2):3
     [X2>=0,V2>=1,V2+X2=W2,V2+X2=V] 
* CE 39: start(V,V2) = 0+ quot(V,W2,X2):1
     [V>=X2,X2>=1,W2=1,V2=1] 
* CE 40: start(V,V2) = 0+ quot(V,V2,W2):2
     [V2>=0,V>=0,W2=0] 
* CE 41: start(V,V2) = 0+ quot(V,V2,W2):3
     [V2>=1,V>=1,W2=1] 
* CE 42: start(V,V2) = 0+ quot(V,V2,W2):4
     [V+2>=2*W2+V2,W2>=1,V2>=2] 
* CE 43: start(V,V2) = 0+ quot(V,V2,W2):5
     [V+3>=2*W2+V2,W2>=2,V2>=2] 
* CE 44: start(V,V2) = 0+ log(V,W2):1
     [V>=0,W2=0] 
* CE 45: start(V,V2) = 0+ log(V,W2):2
     [V>=2,W2=1] 
* CE 46: start(V,V2) = 0+ log(V,W2):3
     [V>=3,W2=2] 
* CE 47: start(V,V2) = 0+ log(V,W2):4
     [V>=3*W2+1,W2>=1] 
* CE 48: start(V,V2) = 0+ log(V,W2):5
     [V+2>=3*W2,W2>=2] 
* CE 49: start(V,V2) = 0+ log(V,W2):6
     [V+7>=4*W2,W2>=3] 

### Cost equations --> "Loop" of start/2 
* CEs [39] --> Loop 26 
* CEs [34,35,36,37,38,40,41,42,43,44,45,46,47,48,49] --> Loop 27 

#### Loops of start/2 
* Loop 26: start(V,V2) [V>=1,V2=1] 
* Loop 27: start(V,V2) [V>=0] 

### Ranking functions of CR start(V,V2) 

#### Partial ranking functions of CR start(V,V2) 


### Resulting Chains:start(V,V2) 
* [27]
* [26]


### Merging Chains  start/2 into  External patterns of execution 
* [[26],[27]] --> 1 


Computing Bounds
=====================================

#### Cost of chains of pred(V,Out):
* Chain [12]: 0
  with precondition: [Out=0,V>=0] 

* Chain [11]: 1
  with precondition: [V=Out+1,V>=1] 


#### Cost of loops [13] 

 * loop 13:minus(V,V2,Out) -> [minus(V',V2',Out')] 
2
#### Cost of phase [13]:minus(V,V2,Out) -> [minus(V',V2',Out')] 
2*it(13)+0
  Such that:it(13) =< V2
it(13) =< V2-V2'

#### Cost of loops [14] 

 * loop 14:minus(V,V2,Out) -> [minus(V',V2',Out')] 
1
#### Cost of phase [14]:minus(V,V2,Out) -> [minus(V',V2',Out')] 
1*it(14)+0
  Such that:it(14) =< V2
it(14) =< V2-V2'

#### Cost of phase [14]:minus(V,V2,Out) -> [minus(V',V2',Out')] 
1*it(14)+0
  Such that:it(14) =< V2
it(14) =< V2-V2'

#### Cost of phase [14]:minus(V,V2,Out) -> [minus(V',V2',Out')] 
1*it(14)+0
  Such that:it(14) =< V2
it(14) =< V2-V2'

#### Cost of chains of minus(V,V2,Out):
* Chain [[14],[13],16]: 3*it(13)+1
  Such that:aux(1) =< V2
it(13) =< aux(1)

  with precondition: [Out=0,V>=1,V2>=2] 

* Chain [[14],16]: 1*it(14)+1
  Such that:it(14) =< V2

  with precondition: [Out=0,V>=0,V2>=1] 

* Chain [[14],15]: 1*it(14)+0
  Such that:it(14) =< V2

  with precondition: [Out=0,V>=0,V2>=1] 

* Chain [[13],16]: 2*it(13)+1
  Such that:it(13) =< V2

  with precondition: [V=Out+V2,V2>=1,V>=V2] 

* Chain [16]: 1
  with precondition: [V2=0,V=Out,V>=0] 

* Chain [15]: 0
  with precondition: [Out=0,V>=0,V2>=0] 


#### Cost of loops [19] 

 * loop 19:quot(V,V2,Out) -> [quot(V',V2',Out')] 
2
#### Cost of phase [19]:quot(V,V2,Out) -> [quot(V',V2',Out')] 
2*it(19)+0
  Such that:it(19) =< V
it(19) =< V-V'

#### Cost of phase [19]:quot(V,V2,Out) -> [quot(V',V2',Out')] 
2*it(19)+0
  Such that:it(19) =< V
it(19) =< V-V'

#### Cost of loops [17] 

 * loop 17:quot(V,V2,Out) -> [quot(V',V2',Out')] 
2*s(8)+2
  Such that:s(8) =< V2'

#### Cost of phase [17]:quot(V,V2,Out) -> [quot(V',V2',Out')] 
2*it(17)+2*s(9)+0
  Such that:it(17) =< V-V2+1
it(17) =< V-V2-V'+V2'
aux(3) =< V
aux(4) =< V-V'
it(17) =< aux(3)
s(9) =< aux(3)
it(17) =< aux(4)
s(9) =< aux(4)

#### Cost of phase [17]:quot(V,V2,Out) -> [quot(V',V2',Out')] 
2*it(17)+2*s(9)+0
  Such that:it(17) =< V-V2+1
it(17) =< V-V2-V'+V2'
aux(3) =< V
aux(4) =< V-V'
it(17) =< aux(3)
s(9) =< aux(3)
it(17) =< aux(4)
s(9) =< aux(4)

#### Cost of chains of quot(V,V2,Out):
* Chain [[19],20]: 2*it(19)+1
  Such that:it(19) =< Out

  with precondition: [V2=1,Out>=1,V>=Out] 

* Chain [[19],18,20]: 2*it(19)+5*s(6)+3
  Such that:s(5) =< 1
it(19) =< Out
s(6) =< s(5)

  with precondition: [V2=1,Out>=2,V>=Out] 

* Chain [[17],20]: 2*it(17)+2*s(9)+1
  Such that:it(17) =< V-V2+1
aux(5) =< V
it(17) =< aux(5)
s(9) =< aux(5)

  with precondition: [V2>=2,Out>=1,V+2>=2*Out+V2] 

* Chain [[17],18,20]: 2*it(17)+5*s(6)+2*s(9)+3
  Such that:it(17) =< V-V2+1
s(5) =< V2
aux(6) =< V
s(6) =< s(5)
it(17) =< aux(6)
s(9) =< aux(6)

  with precondition: [V2>=2,Out>=2,V+3>=2*Out+V2] 

* Chain [20]: 1
  with precondition: [Out=0,V>=0,V2>=0] 

* Chain [18,20]: 5*s(6)+3
  Such that:s(5) =< V2
s(6) =< s(5)

  with precondition: [Out=1,V>=1,V2>=1] 


#### Cost of loops [21,22] 

 * loop 21:log(V,Out) -> [log(V',Out')] 
4*s(21)+5*s(22)+4
  Such that:s(19) =< 2
s(20) =< V
s(21) =< s(20)
s(22) =< s(19)

 * loop 22:log(V,Out) -> [log(V',Out')] 
4*s(27)+2
  Such that:s(26) =< V
s(27) =< s(26)

#### Cost of phase [21,22]:log(V,Out) -> [log(V',Out')] 
4*it(21)+2*it(22)+4*s(28)+5*s(29)+4*s(32)+0
  Such that:s(33) =< 2*V
s(33) =< 2*V-2*V'
aux(11) =< V
aux(12) =< V-V'
aux(13) =< V/2
aux(14) =< V/2-V'/2
aux(15) =< 5/2*V+27/2
aux(16) =< 5/2*V-5/2*V'
aux(10) =< aux(11)
it(21) =< aux(11)
it(22) =< aux(11)
aux(10) =< aux(12)
it(21) =< aux(12)
it(22) =< aux(12)
aux(10) =< aux(13)
it(21) =< aux(13)
it(22) =< aux(13)
aux(10) =< aux(14)
it(21) =< aux(14)
it(22) =< aux(14)
it(22) =< aux(15)
s(31) =< aux(15)
it(22) =< aux(16)
s(31) =< aux(16)
s(30) =< aux(10)*2
s(32) =< s(33)
s(28) =< s(31)
s(29) =< s(30)

#### Cost of phase [21,22]:log(V,Out) -> [log(V',Out')] 
4*it(21)+2*it(22)+4*s(28)+5*s(29)+4*s(32)+0
  Such that:s(33) =< 2*V
s(33) =< 2*V-2*V'
aux(11) =< V
aux(12) =< V-V'
aux(13) =< V/2
aux(14) =< V/2-V'/2
aux(15) =< 5/2*V+27/2
aux(16) =< 5/2*V-5/2*V'
aux(10) =< aux(11)
it(21) =< aux(11)
it(22) =< aux(11)
aux(10) =< aux(12)
it(21) =< aux(12)
it(22) =< aux(12)
aux(10) =< aux(13)
it(21) =< aux(13)
it(22) =< aux(13)
aux(10) =< aux(14)
it(21) =< aux(14)
it(22) =< aux(14)
it(22) =< aux(15)
s(31) =< aux(15)
it(22) =< aux(16)
s(31) =< aux(16)
s(30) =< aux(10)*2
s(32) =< s(33)
s(28) =< s(31)
s(29) =< s(30)

#### Cost of phase [21,22]:log(V,Out) -> [log(V',Out')] 
4*it(21)+2*it(22)+4*s(28)+5*s(29)+4*s(32)+0
  Such that:s(33) =< 2*V
s(33) =< 2*V-2*V'
aux(11) =< V
aux(12) =< V-V'
aux(13) =< V/2
aux(14) =< V/2-V'/2
aux(15) =< 5/2*V+27/2
aux(16) =< 5/2*V-5/2*V'
aux(10) =< aux(11)
it(21) =< aux(11)
it(22) =< aux(11)
aux(10) =< aux(12)
it(21) =< aux(12)
it(22) =< aux(12)
aux(10) =< aux(13)
it(21) =< aux(13)
it(22) =< aux(13)
aux(10) =< aux(14)
it(21) =< aux(14)
it(22) =< aux(14)
it(22) =< aux(15)
s(31) =< aux(15)
it(22) =< aux(16)
s(31) =< aux(16)
s(30) =< aux(10)*2
s(32) =< s(33)
s(28) =< s(31)
s(29) =< s(30)

#### Cost of phase [21,22]:log(V,Out) -> [log(V',Out')] 
4*it(21)+2*it(22)+4*s(28)+5*s(29)+4*s(32)+0
  Such that:s(33) =< 2*V
s(33) =< 2*V-2*V'
aux(11) =< V
aux(12) =< V-V'
aux(13) =< V/2
aux(14) =< V/2-V'/2
aux(15) =< 5/2*V+27/2
aux(16) =< 5/2*V-5/2*V'
aux(10) =< aux(11)
it(21) =< aux(11)
it(22) =< aux(11)
aux(10) =< aux(12)
it(21) =< aux(12)
it(22) =< aux(12)
aux(10) =< aux(13)
it(21) =< aux(13)
it(22) =< aux(13)
aux(10) =< aux(14)
it(21) =< aux(14)
it(22) =< aux(14)
it(22) =< aux(15)
s(31) =< aux(15)
it(22) =< aux(16)
s(31) =< aux(16)
s(30) =< aux(10)*2
s(32) =< s(33)
s(28) =< s(31)
s(29) =< s(30)

#### Cost of chains of log(V,Out):
* Chain [[21,22],25]: 4*it(21)+2*it(22)+4*s(28)+5*s(29)+4*s(32)+1
  Such that:s(33) =< 2*V
aux(16) =< 5/2*V
aux(15) =< 5/2*V+27/2
aux(17) =< V
aux(18) =< V/2
aux(10) =< aux(17)
it(21) =< aux(17)
it(22) =< aux(17)
aux(10) =< aux(18)
it(21) =< aux(18)
it(22) =< aux(18)
it(22) =< aux(15)
s(31) =< aux(15)
it(22) =< aux(16)
s(31) =< aux(16)
s(30) =< aux(10)*2
s(32) =< s(33)
s(28) =< s(31)
s(29) =< s(30)

  with precondition: [Out>=1,V>=3*Out+1] 

* Chain [[21,22],24,25]: 4*it(21)+2*it(22)+4*s(28)+5*s(29)+4*s(32)+3
  Such that:s(33) =< 2*V
aux(16) =< 5/2*V
aux(15) =< 5/2*V+27/2
aux(19) =< V
aux(20) =< V/2
aux(10) =< aux(19)
it(21) =< aux(19)
it(22) =< aux(19)
aux(10) =< aux(20)
it(21) =< aux(20)
it(22) =< aux(20)
it(22) =< aux(15)
s(31) =< aux(15)
it(22) =< aux(16)
s(31) =< aux(16)
s(30) =< aux(10)*2
s(32) =< s(33)
s(28) =< s(31)
s(29) =< s(30)

  with precondition: [Out>=2,V+2>=3*Out] 

* Chain [[21,22],23,25]: 4*it(21)+2*it(22)+4*s(28)+5*s(29)+4*s(32)+5*s(35)+5
  Such that:s(34) =< 2
s(33) =< 2*V
aux(16) =< 5/2*V
aux(15) =< 5/2*V+27/2
aux(21) =< V
aux(22) =< V/2
s(35) =< s(34)
aux(10) =< aux(21)
it(21) =< aux(21)
it(22) =< aux(21)
aux(10) =< aux(22)
it(21) =< aux(22)
it(22) =< aux(22)
it(22) =< aux(15)
s(31) =< aux(15)
it(22) =< aux(16)
s(31) =< aux(16)
s(30) =< aux(10)*2
s(32) =< s(33)
s(28) =< s(31)
s(29) =< s(30)

  with precondition: [Out>=2,V+3>=4*Out] 

* Chain [[21,22],23,24,25]: 4*it(21)+2*it(22)+4*s(28)+5*s(29)+4*s(32)+5*s(35)+7
  Such that:s(34) =< 2
s(33) =< 2*V
aux(16) =< 5/2*V
aux(15) =< 5/2*V+27/2
aux(23) =< V
aux(24) =< V/2
s(35) =< s(34)
aux(10) =< aux(23)
it(21) =< aux(23)
it(22) =< aux(23)
aux(10) =< aux(24)
it(21) =< aux(24)
it(22) =< aux(24)
it(22) =< aux(15)
s(31) =< aux(15)
it(22) =< aux(16)
s(31) =< aux(16)
s(30) =< aux(10)*2
s(32) =< s(33)
s(28) =< s(31)
s(29) =< s(30)

  with precondition: [Out>=3,V+7>=4*Out] 

* Chain [25]: 1
  with precondition: [Out=0,V>=0] 

* Chain [24,25]: 3
  with precondition: [Out=1,V>=2] 

* Chain [23,25]: 5*s(35)+5
  Such that:s(34) =< 2
s(35) =< s(34)

  with precondition: [Out=1,V>=3] 

* Chain [23,24,25]: 5*s(35)+7
  Such that:s(34) =< 2
s(35) =< s(34)

  with precondition: [Out=2,V>=3] 


#### Cost of chains of start(V,V2):
* Chain [27]: 17*s(67)+4*s(71)+4*s(73)+15*s(80)+16*s(87)+8*s(88)+16*s(91)+16*s(92)+20*s(93)+15
  Such that:aux(30) =< 2
aux(31) =< V
aux(32) =< V-V2+1
aux(33) =< 2*V
aux(34) =< V/2
aux(35) =< 5/2*V
aux(36) =< 5/2*V+27/2
aux(37) =< V2
s(71) =< aux(32)
s(67) =< aux(37)
s(80) =< aux(30)
s(86) =< aux(31)
s(87) =< aux(31)
s(88) =< aux(31)
s(86) =< aux(34)
s(87) =< aux(34)
s(88) =< aux(34)
s(88) =< aux(36)
s(89) =< aux(36)
s(88) =< aux(35)
s(89) =< aux(35)
s(90) =< s(86)*2
s(91) =< aux(33)
s(92) =< s(89)
s(93) =< s(90)
s(71) =< aux(31)
s(73) =< aux(31)

  with precondition: [V>=0] 

* Chain [26]: 4*s(126)+5*s(127)+3
  Such that:s(124) =< 1
s(125) =< V
s(126) =< s(125)
s(127) =< s(124)

  with precondition: [V2=1,V>=1] 


Closed-form bounds of start(V,V2): 
-------------------------------------
* Chain [27] with precondition: [V>=0] 
    - Upper bound: 68*V+45+nat(V2)*17+32*V+ (40*V+216)+nat(V-V2+1)*4 
    - Complexity: n 
* Chain [26] with precondition: [V2=1,V>=1] 
    - Upper bound: 4*V+8 
    - Complexity: n 

### Maximum cost of start(V,V2): 64*V+37+nat(V2)*17+32*V+ (40*V+216)+nat(V-V2+1)*4+ (4*V+8) 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 8 ms.
* Invariants computed in 52 ms.
   - Backward Invariants 28 ms.
   - Transitive Invariants 6 ms.
* Refinement performed in 58 ms.
* Termination proved in 10 ms.
* Upper bounds computed in 139 ms.
   - Equation cost structures 43 ms.
   - Phase cost structures 40 ms.
   - Chain cost structures 44 ms.
   - Solving cost expressions 2 ms.
* Total analysis performed in 285 ms.


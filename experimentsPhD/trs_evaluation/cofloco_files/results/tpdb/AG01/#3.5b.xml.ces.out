
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [le/3]
1. recursive  : [fun/4,minus/3]
2. recursive  : [fun1/4, (mod)/3]
3. non_recursive  : [start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into le/3
1. SCC is partially evaluated into minus/3
2. SCC is partially evaluated into (mod)/3
3. SCC is partially evaluated into start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations le/3 
* CE 24 is refined into CE [25] 
* CE 22 is refined into CE [26] 
* CE 21 is refined into CE [27] 
* CE 23 is refined into CE [28] 


#### Refined cost equations le/3 
* CE 25: le(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 26: le(V1,V,Out) = 1
     [V1>=1,Out=1,V=0] 
* CE 27: le(V1,V,Out) = 1
     [V>=0,Out=2,V1=0] 
* CE 28: le(V1,V,Out) = 1+ le(W1,X1,Out)
     [X1>=0,W1>=0,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of le/3 
* CEs [28] --> Loop 13 
* CEs [25] --> Loop 14 
* CEs [26] --> Loop 15 
* CEs [27] --> Loop 16 

#### Loops of le/3 
* Loop 13: le(V1,V,Out)->  le(V1',V',Out)
                  [V'>=0,V1'>=0,V'+1=V,V1'+1=V1] 
* Loop 14: le(V1,V,Out) [V>=0,V1>=0,Out=0] 
* Loop 15: le(V1,V,Out) [V1>=1,Out=1,V=0] 
* Loop 16: le(V1,V,Out) [V>=0,Out=2,V1=0] 

### Ranking functions of CR le(V1,V,Out) 
* RF of phase [13]: [V,V1]

#### Partial ranking functions of CR le(V1,V,Out) 
* Partial RF of phase [13]:
  - RF of loop [13:1]:
    V
    V1


### Resulting Chains:le(V1,V,Out) 
* [[13],16]
* [[13],15]
* [[13],14]
* [16]
* [15]
* [14]


### Merging Chains  le/3 into  External patterns of execution 
* [[16]] --> 1 
* [[15]] --> 2 
* [[14],[14,[13]]] --> 3 
* [[15,[13]]] --> 4 
* [[16,[13]]] --> 5 


### Specialization of cost equations minus/3 
* CE 10 is refined into CE [29,30,31,32] 
* CE 12 is refined into CE [33] 
* CE 13 is refined into CE [34] 
* CE 14 is refined into CE [35] 
* CE 11 is refined into CE [36,37] 


#### Refined cost equations minus/3 
* CE 29: minus(V1,V,Out) = 1+ le(V1,W1,X1):2
     [V1>=1,X1=1,W1=0,Out=0,V=0] 
* CE 30: minus(V1,V,Out) = 1+ le(V1,V,W1):3
     [V>=0,V1>=1,W1=0,Out=0] 
* CE 31: minus(V1,V,Out) = 1+ le(V1,V,W1):4
     [V1>=V+1,V>=1,W1=1,Out=0] 
* CE 32: minus(V1,V,Out) = 1+ le(V1,V,W1):5
     [V>=V1,V1>=1,W1=2,Out=0] 
* CE 33: minus(V1,V,Out) = 2+ le(V1,V,W1):5
     [V>=V1,V1>=1,W1=2,Out=0] 
* CE 34: minus(V1,V,Out) = 1
     [V>=0,Out=0,V1=0] 
* CE 35: minus(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 36: minus(V1,V,Out) = 2+ le(V1,W1,X1):2+ minus(Y1,Z1,A2)
     [V1>=1,V1=Y1+1,A2+1=Out,Z1=0,X1=1,W1=0,V=0] 
* CE 37: minus(V1,V,Out) = 2+ le(V1,V,W1):4+ minus(X1,V,Y1)
     [V1>=V+1,V>=1,V1=X1+1,Y1+1=Out,W1=1] 

### Cost equations --> "Loop" of minus/3 
* CEs [37] --> Loop 17 
* CEs [36] --> Loop 18 
* CEs [29] --> Loop 19 
* CEs [30,31,32,33,34,35] --> Loop 20 

#### Loops of minus/3 
* Loop 17: minus(V1,V,Out)->  minus(V1',V,Out')
                  [V1>=V+1,V>=1,Out=Out'+1,V1=V1'+1] 
* Loop 18: minus(V1,V,Out)->  minus(V1',V',Out')
                  [V1>=1,Out=Out'+1,V1=V1'+1,V'=0,V=0] 
* Loop 19: minus(V1,V,Out) [V1>=1,Out=0,V=0] 
* Loop 20: minus(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR minus(V1,V,Out) 
* RF of phase [17]: [V1-1,V1-V]
* RF of phase [18]: [V1]

#### Partial ranking functions of CR minus(V1,V,Out) 
* Partial RF of phase [17]:
  - RF of loop [17:1]:
    V1-1
    V1-V
* Partial RF of phase [18]:
  - RF of loop [18:1]:
    V1


### Resulting Chains:minus(V1,V,Out) 
* [[18],20]
* [[18],19]
* [[17],20]
* [20]
* [19]


### Merging Chains  minus/3 into  External patterns of execution 
* [[19],[20]] --> 1 
* [[19,[18]],[20,[18]]] --> 2 
* [[20,[17]]] --> 3 


### Specialization of cost equations (mod)/3 
* CE 16 is refined into CE [38,39] 
* CE 19 is refined into CE [40] 
* CE 15 is refined into CE [41,42,43,44,45] 
* CE 18 is refined into CE [46] 
* CE 20 is refined into CE [47] 
* CE 17 is refined into CE [48,49,50,51] 


#### Refined cost equations (mod)/3 
* CE 38: mod(V1,V,Out) = 2+ le(W1,X1,Y1):2
     [W1>=1,W1+1=V,Y1=1,X1=0,Out=1,V1=1] 
* CE 39: mod(V1,V,Out) = 2+ le(W1,X1,Y1):4
     [W1>=X1+1,X1>=1,X1+1=Out,W1+1=V,X1+1=V1,Y1=1] 
* CE 40: mod(V1,V,Out) = 1
     [V1>=1,Out=0,V=0] 
* CE 41: mod(V1,V,Out) = 1+ le(W1,X1,Y1):1
     [X1>=0,X1+1=V1,Y1=2,W1=0,Out=0,V=1] 
* CE 42: mod(V1,V,Out) = 1+ le(W1,X1,Y1):2
     [W1>=1,W1+1=V,Y1=1,X1=0,Out=0,V1=1] 
* CE 43: mod(V1,V,Out) = 1+ le(W1,X1,Y1):3
     [X1>=0,W1>=0,W1+1=V,X1+1=V1,Y1=0,Out=0] 
* CE 44: mod(V1,V,Out) = 1+ le(W1,X1,Y1):4
     [W1>=X1+1,X1>=1,W1+1=V,X1+1=V1,Y1=1,Out=0] 
* CE 45: mod(V1,V,Out) = 1+ le(W1,X1,Y1):5
     [X1>=W1,W1>=1,W1+1=V,X1+1=V1,Y1=2,Out=0] 
* CE 46: mod(V1,V,Out) = 1
     [V>=0,Out=0,V1=0] 
* CE 47: mod(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 48: mod(V1,V,Out) = 2+ le(W1,X1,Y1):1+ minus(X1,Z1,A2):1+ mod(B2,C2,Out)
     [X1>=0,X1+1=V1,C2=1,B2=0,A2=0,Z1=0,Y1=2,W1=0,V=1] 
* CE 49: mod(V1,V,Out) = 2+ le(W1,X1,Y1):1+ minus(X1,Z1,A2):2+ mod(A2,B2,Out)
     [X1>=A2,A2>=1,X1+1=V1,B2=1,Z1=0,Y1=2,W1=0,V=1] 
* CE 50: mod(V1,V,Out) = 2+ le(W1,X1,Y1):5+ minus(X1,W1,Z1):1+ mod(A2,B2,Out)
     [X1>=W1,W1>=1,W1+1=B2,W1+1=V,X1+1=V1,A2=0,Z1=0,Y1=2] 
* CE 51: mod(V1,V,Out) = 2+ le(W1,X1,Y1):5+ minus(X1,W1,Z1):3+ mod(Z1,A2,Out)
     [X1>=W1+Z1,Z1>=1,W1>=1,W1+1=A2,W1+1=V,X1+1=V1,Y1=2] 

### Cost equations --> "Loop" of (mod)/3 
* CEs [51] --> Loop 21 
* CEs [50] --> Loop 22 
* CEs [49] --> Loop 23 
* CEs [48] --> Loop 24 
* CEs [39] --> Loop 25 
* CEs [41] --> Loop 26 
* CEs [40] --> Loop 27 
* CEs [38] --> Loop 28 
* CEs [42] --> Loop 29 
* CEs [43,44,45,46,47] --> Loop 30 

#### Loops of (mod)/3 
* Loop 21: mod(V1,V,Out)->  mod(V1',V,Out)
                  [V1>=V+V1',V1'>=1,V>=2] 
* Loop 22: mod(V1,V,Out)->  mod(V1',V,Out)
                  [V1>=V,V>=2,V1'=0] 
* Loop 23: mod(V1,V,Out)->  mod(V1',V',Out)
                  [V1>=V1'+1,V1'>=1,V'=1,V=1] 
* Loop 24: mod(V1,V,Out)->  mod(V1',V',Out)
                  [V1>=1,V'=1,V1'=0,V=1] 
* Loop 25: mod(A,B,A) [B>=A+1,A>=2] 
* Loop 26: mod(V1,V,Out) [V1>=1,Out=0,V=1] 
* Loop 27: mod(V1,V,Out) [V1>=1,Out=0,V=0] 
* Loop 28: mod(V1,V,Out) [V>=2,Out=1,V1=1] 
* Loop 29: mod(V1,V,Out) [V>=2,Out=0,V1=1] 
* Loop 30: mod(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR mod(V1,V,Out) 
* RF of phase [21]: [V1/2-1,V1/2-V/2]
* RF of phase [23]: [V1-1]

#### Partial ranking functions of CR mod(V1,V,Out) 
* Partial RF of phase [21]:
  - RF of loop [21:1]:
    V1/2-1
    V1/2-V/2
* Partial RF of phase [23]:
  - RF of loop [23:1]:
    V1-1


### Resulting Chains:mod(V1,V,Out) 
* [[23],30]
* [[23],26]
* [[23],24,30]
* [[21],30]
* [[21],29]
* [[21],28]
* [[21],25]
* [[21],22,30]
* [30]
* [29]
* [28]
* [27]
* [26]
* [25]
* [24,30]
* [22,30]


### Merging Chains  (mod)/3 into  External patterns of execution 
* [[30,22],[29],[30],[30,22,[21]],[29,[21]],[30,[21]]] --> 1 
* [[28]] --> 2 
* [[27]] --> 3 
* [[30,24],[26],[30,24,[23]],[26,[23]],[30,[23]]] --> 4 
* [[28,[21]]] --> 5 
* [[25]] --> 6 
* [[25,[21]]] --> 7 


### Specialization of cost equations start/3 
* CE 4 is refined into CE [52,53,54,55,56,57,58,59] 
* CE 6 is refined into CE [60] 
* CE 2 is refined into CE [61] 
* CE 3 is refined into CE [62] 
* CE 5 is refined into CE [63,64,65] 
* CE 7 is refined into CE [66,67,68,69,70] 
* CE 8 is refined into CE [71,72,73] 
* CE 9 is refined into CE [74,75,76,77,78,79,80] 


#### Refined cost equations start/3 
* CE 52: start(V1,V,V11) = 1+ minus(W11,X11,Y11):1+ mod(Z11,V11,A12):1
     [V11>=1,W11>=0,V11=X11+1,W11+1=V,A12=0,Z11=0,Y11=0,V1=2] 
* CE 53: start(V1,V,V11) = 1+ minus(W11,X11,Y11):2+ mod(Y11,Z11,A12):1
     [W11>=Y11,Y11>=1,W11+1=V,A12=0,Z11=1,X11=0,V11=1,V1=2] 
* CE 54: start(V1,V,V11) = 1+ minus(W11,X11,Y11):2+ mod(Y11,Z11,A12):4
     [W11>=Y11,Y11>=1,W11+1=V,A12=0,Z11=1,X11=0,V11=1,V1=2] 
* CE 55: start(V1,V,V11) = 1+ minus(W11,X11,Y11):3+ mod(Y11,V11,Z11):1
     [W11+1>=V11+Y11,V11>=2,Y11>=1,V11=X11+1,W11+1=V,Z11=0,V1=2] 
* CE 56: start(V1,V,V11) = 1+ minus(W11,X11,Y11):3+ mod(Z11,V11,A12):2
     [W11>=V11,V11>=2,V11=X11+1,W11+1=V,A12=1,Z11=1,Y11=1,V1=2] 
* CE 57: start(V1,V,V11) = 1+ minus(W11,X11,Y11):3+ mod(Y11,V11,Z11):5
     [W11+1>=V11+Y11,Y11>=V11+1,V11>=2,V11=X11+1,W11+1=V,Z11=1,V1=2] 
* CE 58: start(V1,V,V11) = 1+ minus(W11,X11,Y11):3+ mod(Y11,V11,Y11):6
     [W11+1>=V11+Y11,V11>=Y11+1,Y11>=2,V11=X11+1,W11+1=V,V1=2] 
* CE 59: start(V1,V,V11) = 1+ minus(W11,X11,Y11):3+ mod(Y11,V11,Z11):7
     [Y11>=V11+Z11,W11+1>=V11+Y11,V11>=Z11+1,Z11>=2,V11=X11+1,W11+1=V,V1=2] 
* CE 60: start(V1,V,V11) = 1
     [V11>=0,V>=1,V1=2] 
* CE 61: start(V1,V,V11) = 0
     [V11>=0,V>=0,V1>=0] 
* CE 62: start(V1,V,V11) = 1
     [V11>=1,V>=1,V1=1] 
* CE 63: start(V1,V,V11) = 1+ minus(W11,V11,X11):1
     [V11>=0,W11>=0,W11+1=V,X11=0,V1=1] 
* CE 64: start(V1,V,V11) = 1+ minus(W11,X11,Y11):2
     [W11>=Y11,Y11>=1,W11+1=V,X11=0,V11=0,V1=1] 
* CE 65: start(V1,V,V11) = 1+ minus(W11,V11,X11):3
     [W11>=V11+X11,X11>=1,V11>=1,W11+1=V,V1=1] 
* CE 66: start(V1,V,V11) = 0+ le(W11,V,X11):1
     [V>=0,X11=2,W11=0,V1=0] 
* CE 67: start(V1,V,V11) = 0+ le(V1,W11,X11):2
     [V1>=1,X11=1,W11=0,V=0] 
* CE 68: start(V1,V,V11) = 0+ le(V1,V,W11):3
     [V>=0,V1>=0,W11=0] 
* CE 69: start(V1,V,V11) = 0+ le(V1,V,W11):4
     [V1>=V+1,V>=1,W11=1] 
* CE 70: start(V1,V,V11) = 0+ le(V1,V,W11):5
     [V>=V1,V1>=1,W11=2] 
* CE 71: start(V1,V,V11) = 0+ minus(V1,V,W11):1
     [V>=0,V1>=0,W11=0] 
* CE 72: start(V1,V,V11) = 0+ minus(V1,W11,X11):2
     [V1>=X11,X11>=1,W11=0,V=0] 
* CE 73: start(V1,V,V11) = 0+ minus(V1,V,W11):3
     [V1>=V+W11,W11>=1,V>=1] 
* CE 74: start(V1,V,V11) = 0+ mod(V1,V,W11):1
     [V>=0,V1>=0,W11=0] 
* CE 75: start(V1,V,V11) = 0+ mod(W11,V,X11):2
     [V>=2,X11=1,W11=1,V1=1] 
* CE 76: start(V1,V,V11) = 0+ mod(V1,W11,X11):3
     [V1>=1,X11=0,W11=0,V=0] 
* CE 77: start(V1,V,V11) = 0+ mod(V1,W11,X11):4
     [V1>=1,X11=0,W11=1,V=1] 
* CE 78: start(V1,V,V11) = 0+ mod(V1,V,W11):5
     [V1>=V+1,V>=2,W11=1] 
* CE 79: start(V1,V,V11) = 0+ mod(V1,V,V1):6
     [V>=V1+1,V1>=2] 
* CE 80: start(V1,V,V11) = 0+ mod(V1,V,W11):7
     [V1>=V+W11,V>=W11+1,W11>=2] 

### Cost equations --> "Loop" of start/3 
* CEs [77] --> Loop 31 
* CEs [67,72,76] --> Loop 32 
* CEs [52,53,54,55,56,57,58,59,60] --> Loop 33 
* CEs [75] --> Loop 34 
* CEs [62,63,64,65] --> Loop 35 
* CEs [61,66,68,69,70,71,73,74,78,79,80] --> Loop 36 

#### Loops of start/3 
* Loop 31: start(V1,V,V11) [V1>=1,V=1] 
* Loop 32: start(V1,V,V11) [V1>=1,V=0] 
* Loop 33: start(V1,V,V11) [V11>=0,V>=1,V1=2] 
* Loop 34: start(V1,V,V11) [V>=2,V1=1] 
* Loop 35: start(V1,V,V11) [V11>=0,V>=1,V1=1] 
* Loop 36: start(V1,V,V11) [V>=0,V1>=0] 

### Ranking functions of CR start(V1,V,V11) 

#### Partial ranking functions of CR start(V1,V,V11) 


### Resulting Chains:start(V1,V,V11) 
* [36]
* [35]
* [34]
* [33]
* [32]
* [31]


### Merging Chains  start/3 into  External patterns of execution 
* [[35],[36]] --> 1 
* [[34]] --> 2 
* [[33]] --> 3 
* [[32]] --> 4 
* [[31]] --> 5 


Computing Bounds
=====================================

#### Cost of loops [13] 

 * loop 13:le(V1,V,Out) -> [le(V1',V',Out')] 
1
#### Cost of phase [13]:le(V1,V,Out) -> [le(V1',V',Out')] 
1*it(13)+0
  Such that:it(13) =< V1
it(13) =< V1-V1'
it(13) =< V
it(13) =< V-V'

#### Cost of phase [13]:le(V1,V,Out) -> [le(V1',V',Out')] 
1*it(13)+0
  Such that:it(13) =< V1
it(13) =< V1-V1'
it(13) =< V
it(13) =< V-V'

#### Cost of phase [13]:le(V1,V,Out) -> [le(V1',V',Out')] 
1*it(13)+0
  Such that:it(13) =< V1
it(13) =< V1-V1'
it(13) =< V
it(13) =< V-V'

#### Cost of chains of le(V1,V,Out):
* Chain [[13],16]: 1*it(13)+1
  Such that:it(13) =< V1

  with precondition: [Out=2,V1>=1,V>=V1] 

* Chain [[13],15]: 1*it(13)+1
  Such that:it(13) =< V

  with precondition: [Out=1,V>=1,V1>=V+1] 

* Chain [[13],14]: 1*it(13)+0
  Such that:it(13) =< V

  with precondition: [Out=0,V1>=1,V>=1] 

* Chain [16]: 1
  with precondition: [V1=0,Out=2,V>=0] 

* Chain [15]: 1
  with precondition: [V=0,Out=1,V1>=1] 

* Chain [14]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [18] 

 * loop 18:minus(V1,V,Out) -> [minus(V1',V',Out')] 
3
#### Cost of phase [18]:minus(V1,V,Out) -> [minus(V1',V',Out')] 
3*it(18)+0
  Such that:it(18) =< V1
it(18) =< V1-V1'

#### Cost of phase [18]:minus(V1,V,Out) -> [minus(V1',V',Out')] 
3*it(18)+0
  Such that:it(18) =< V1
it(18) =< V1-V1'

#### Cost of loops [17] 

 * loop 17:minus(V1,V,Out) -> [minus(V1',V',Out')] 
1*s(7)+3
  Such that:s(7) =< V'

#### Cost of phase [17]:minus(V1,V,Out) -> [minus(V1',V',Out')] 
3*it(17)+1*s(8)+0
  Such that:it(17) =< V1
it(17) =< V1-V
it(17) =< V1-V-V1'+V'
it(17) =< V1-V1'
aux(3) =< V
s(8) =< it(17)*aux(3)

#### Cost of chains of minus(V1,V,Out):
* Chain [[18],20]: 3*it(18)+2*s(4)+3
  Such that:aux(1) =< V1-Out
it(18) =< Out
s(4) =< aux(1)

  with precondition: [V=0,Out>=1,V1>=Out] 

* Chain [[18],19]: 3*it(18)+2
  Such that:it(18) =< Out

  with precondition: [V=0,Out>=1,V1>=Out+1] 

* Chain [[17],20]: 3*it(17)+2*s(2)+2*s(4)+1*s(8)+3
  Such that:aux(1) =< V1-Out
it(17) =< Out
aux(4) =< V
s(4) =< aux(1)
s(2) =< aux(4)
s(8) =< it(17)*aux(4)

  with precondition: [V>=1,Out>=1,V1>=Out+V] 

* Chain [20]: 2*s(2)+2*s(4)+3
  Such that:aux(1) =< V1
aux(2) =< V
s(4) =< aux(1)
s(2) =< aux(2)

  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [19]: 2
  with precondition: [V=0,Out=0,V1>=1] 


#### Cost of loops [23] 

 * loop 23:mod(V1,V,Out) -> [mod(V1',V',Out')] 
6*s(26)+2*s(27)+6
  Such that:s(24) =< V1-V1'
s(25) =< V1'
s(26) =< s(25)
s(27) =< s(24)

#### Cost of phase [23]:mod(V1,V,Out) -> [mod(V1',V',Out')] 
6*it(23)+6*s(28)+2*s(29)+0
  Such that:aux(8) =< V1
aux(9) =< V1-V1'
it(23) =< aux(8)
s(30) =< aux(8)
it(23) =< aux(9)
s(30) =< aux(9)
s(31) =< it(23)*aux(8)
s(28) =< s(31)
s(29) =< s(30)

#### Cost of phase [23]:mod(V1,V,Out) -> [mod(V1',V',Out')] 
6*it(23)+6*s(28)+2*s(29)+0
  Such that:aux(8) =< V1
aux(9) =< V1-V1'
it(23) =< aux(8)
s(30) =< aux(8)
it(23) =< aux(9)
s(30) =< aux(9)
s(31) =< it(23)*aux(8)
s(28) =< s(31)
s(29) =< s(30)

#### Cost of phase [23]:mod(V1,V,Out) -> [mod(V1',V',Out')] 
6*it(23)+6*s(28)+2*s(29)+0
  Such that:aux(8) =< V1
aux(9) =< V1-V1'
it(23) =< aux(8)
s(30) =< aux(8)
it(23) =< aux(9)
s(30) =< aux(9)
s(31) =< it(23)*aux(8)
s(28) =< s(31)
s(29) =< s(30)

#### Cost of loops [21] 

 * loop 21:mod(V1,V,Out) -> [mod(V1',V',Out')] 
3*s(46)+3*s(44)+2*s(47)+1*s(48)+6
  Such that:s(43) =< V1-V1'
s(44) =< V1'
s(45) =< V'
s(46) =< s(45)
s(47) =< s(43)
s(48) =< s(44)*s(45)

#### Cost of phase [21]:mod(V1,V,Out) -> [mod(V1',V',Out')] 
6*it(21)+5*s(49)+3*s(50)+1*s(52)+0
  Such that:aux(14) =< V1-V
it(21) =< V1/2
it(21) =< V1/2-V/2
it(21) =< V1/2-V/2-V1'/2+V'/2
it(21) =< V1/2-V1'/2
s(45) =< V
aux(15) =< V1
aux(16) =< V1-V1'
s(53) =< aux(15)
s(53) =< aux(16)
s(50) =< it(21)*aux(14)
s(49) =< s(53)
s(52) =< s(50)*s(45)

#### Cost of phase [21]:mod(V1,V,Out) -> [mod(V1',V',Out')] 
6*it(21)+5*s(49)+3*s(50)+1*s(52)+0
  Such that:aux(14) =< V1-V
it(21) =< V1/2
it(21) =< V1/2-V/2
it(21) =< V1/2-V/2-V1'/2+V'/2
it(21) =< V1/2-V1'/2
s(45) =< V
aux(15) =< V1
aux(16) =< V1-V1'
s(53) =< aux(15)
s(53) =< aux(16)
s(50) =< it(21)*aux(14)
s(49) =< s(53)
s(52) =< s(50)*s(45)

#### Cost of phase [21]:mod(V1,V,Out) -> [mod(V1',V',Out')] 
6*it(21)+5*s(49)+3*s(50)+1*s(52)+0
  Such that:aux(14) =< V1-V
it(21) =< V1/2
it(21) =< V1/2-V/2
it(21) =< V1/2-V/2-V1'/2+V'/2
it(21) =< V1/2-V1'/2
s(45) =< V
aux(15) =< V1
aux(16) =< V1-V1'
s(53) =< aux(15)
s(53) =< aux(16)
s(50) =< it(21)*aux(14)
s(49) =< s(53)
s(52) =< s(50)*s(45)

#### Cost of phase [21]:mod(V1,V,Out) -> [mod(V1',V',Out')] 
6*it(21)+5*s(49)+3*s(50)+1*s(52)+0
  Such that:aux(14) =< V1-V
it(21) =< V1/2
it(21) =< V1/2-V/2
it(21) =< V1/2-V/2-V1'/2+V'/2
it(21) =< V1/2-V1'/2
s(45) =< V
aux(15) =< V1
aux(16) =< V1-V1'
s(53) =< aux(15)
s(53) =< aux(16)
s(50) =< it(21)*aux(14)
s(49) =< s(53)
s(52) =< s(50)*s(45)

#### Cost of phase [21]:mod(V1,V,Out) -> [mod(V1',V',Out')] 
6*it(21)+5*s(49)+3*s(50)+1*s(52)+0
  Such that:aux(14) =< V1-V
it(21) =< V1/2
it(21) =< V1/2-V/2
it(21) =< V1/2-V/2-V1'/2+V'/2
it(21) =< V1/2-V1'/2
s(45) =< V
aux(15) =< V1
aux(16) =< V1-V1'
s(53) =< aux(15)
s(53) =< aux(16)
s(50) =< it(21)*aux(14)
s(49) =< s(53)
s(52) =< s(50)*s(45)

#### Cost of chains of mod(V1,V,Out):
* Chain [[23],30]: 10*it(23)+1*s(19)+6*s(28)+2
  Such that:s(19) =< 1
aux(10) =< V1
it(23) =< aux(10)
s(31) =< it(23)*aux(10)
s(28) =< s(31)

  with precondition: [V=1,Out=0,V1>=2] 

* Chain [[23],26]: 8*it(23)+6*s(28)+2
  Such that:aux(11) =< V1
it(23) =< aux(11)
s(31) =< it(23)*aux(11)
s(28) =< s(31)

  with precondition: [V=1,Out=0,V1>=2] 

* Chain [[23],24,30]: 10*it(23)+1*s(19)+6*s(28)+8
  Such that:s(19) =< 1
aux(12) =< V1
it(23) =< aux(12)
s(31) =< it(23)*aux(12)
s(28) =< s(31)

  with precondition: [V=1,Out=0,V1>=2] 

* Chain [[21],30]: 13*it(21)+1*s(19)+3*s(50)+1*s(52)+2
  Such that:aux(14) =< V1-V
aux(17) =< V1
aux(18) =< V
it(21) =< aux(17)
s(19) =< aux(18)
s(50) =< it(21)*aux(14)
s(52) =< s(50)*aux(18)

  with precondition: [Out=0,V>=2,V1>=V+1] 

* Chain [[21],29]: 6*it(21)+5*s(49)+3*s(50)+1*s(52)+2
  Such that:aux(14) =< V1-V
it(21) =< V1/2-V/2
s(45) =< V
aux(19) =< V1
s(50) =< it(21)*aux(14)
s(49) =< aux(19)
s(52) =< s(50)*s(45)

  with precondition: [Out=0,V>=2,V1>=V+1] 

* Chain [[21],28]: 6*it(21)+5*s(49)+3*s(50)+1*s(52)+3
  Such that:aux(14) =< V1-V
it(21) =< V1/2-V/2
s(45) =< V
aux(20) =< V1
s(50) =< it(21)*aux(14)
s(49) =< aux(20)
s(52) =< s(50)*s(45)

  with precondition: [Out=1,V>=2,V1>=V+1] 

* Chain [[21],25]: 6*it(21)+5*s(49)+3*s(50)+1*s(52)+1*s(55)+3
  Such that:aux(15) =< V1
aux(14) =< V1-V
aux(16) =< V1-Out
it(21) =< V1/2-V/2
s(45) =< V
s(55) =< Out
s(53) =< aux(15)
s(53) =< aux(16)
s(50) =< it(21)*aux(14)
s(49) =< s(53)
s(52) =< s(50)*s(45)

  with precondition: [Out>=2,V>=Out+1,V1>=Out+V] 

* Chain [[21],22,30]: 6*it(21)+4*s(19)+7*s(49)+3*s(50)+1*s(52)+8
  Such that:aux(14) =< V1-V
it(21) =< V1/2-V/2
aux(23) =< V1
aux(24) =< V
it(21) =< aux(23)
s(19) =< aux(24)
s(49) =< aux(23)
s(50) =< it(21)*aux(14)
s(52) =< s(50)*aux(24)

  with precondition: [Out=0,V>=2,V1>=2*V] 

* Chain [30]: 2*s(17)+1*s(19)+2
  Such that:s(19) =< V
aux(6) =< V1
s(17) =< aux(6)

  with precondition: [Out=0,V1>=0,V>=0] 

* Chain [29]: 2
  with precondition: [V1=1,Out=0,V>=2] 

* Chain [28]: 3
  with precondition: [V1=1,Out=1,V>=2] 

* Chain [27]: 1
  with precondition: [V=0,Out=0,V1>=1] 

* Chain [26]: 2
  with precondition: [V=1,Out=0,V1>=1] 

* Chain [25]: 1*s(55)+3
  Such that:s(55) =< V1

  with precondition: [V1=Out,V1>=2,V>=V1+1] 

* Chain [24,30]: 1*s(19)+2*s(34)+8
  Such that:s(19) =< 1
s(32) =< V1
s(34) =< s(32)

  with precondition: [V=1,Out=0,V1>=1] 

* Chain [22,30]: 4*s(19)+2*s(59)+8
  Such that:s(57) =< V1
aux(22) =< V
s(19) =< aux(22)
s(59) =< s(57)

  with precondition: [Out=0,V>=2,V1>=V] 


#### Cost of chains of start(V1,V,V11):
* Chain [36]: 16*s(107)+49*s(109)+1*s(119)+6*s(124)+18*s(125)+3*s(128)+1*s(129)+9*s(130)+3*s(131)+3*s(132)+1*s(133)+8
  Such that:aux(33) =< V1
aux(34) =< V1-V
aux(35) =< V1/2-V/2
aux(36) =< V
s(109) =< aux(33)
s(125) =< aux(35)
s(107) =< aux(36)
s(124) =< aux(35)
s(124) =< aux(33)
s(128) =< s(124)*aux(34)
s(129) =< s(128)*aux(36)
s(130) =< s(125)*aux(34)
s(131) =< s(130)*aux(36)
s(132) =< s(109)*aux(34)
s(133) =< s(132)*aux(36)
s(119) =< s(109)*aux(36)

  with precondition: [V1>=0,V>=0] 

* Chain [35]: 15*s(154)+4*s(155)+1*s(165)+4
  Such that:aux(39) =< V
aux(40) =< V11
s(154) =< aux(39)
s(155) =< aux(40)
s(165) =< s(154)*aux(40)

  with precondition: [V1=1,V>=1,V11>=0] 

* Chain [34]: 3
  with precondition: [V1=1,V>=2] 

* Chain [33]: 150*s(168)+32*s(169)+6*s(175)+3*s(180)+1*s(181)+16*s(194)+9*s(196)+3*s(197)+18*s(211)+4*s(217)+6*s(222)+6*s(223)+3*s(226)+1*s(227)+3*s(228)+1*s(229)+3*s(230)+1*s(231)+1*s(237)+2*s(241)+12*s(245)+6*s(248)+2*s(250)+12
  Such that:s(219) =< V-2*V11
s(220) =< V/2-V11
s(171) =< -V11
s(172) =< -V11/2
aux(53) =< 1
aux(54) =< V
aux(55) =< V-V11
aux(56) =< V11
s(194) =< aux(53)
s(168) =< aux(54)
s(196) =< s(168)*aux(54)
s(197) =< s(196)*aux(53)
s(210) =< s(168)*aux(54)
s(211) =< s(210)
s(169) =< aux(56)
s(237) =< s(194)*aux(56)
s(238) =< aux(54)
s(238) =< aux(55)
s(245) =< aux(55)
s(248) =< s(245)*aux(55)
s(250) =< s(248)*aux(56)
s(241) =< s(238)
s(217) =< s(168)*aux(56)
s(175) =< s(172)
s(180) =< s(175)*s(171)
s(181) =< s(180)*aux(56)
s(222) =< s(220)
s(223) =< s(220)
s(222) =< aux(54)
s(226) =< s(222)*s(219)
s(227) =< s(226)*aux(56)
s(228) =< s(223)*s(219)
s(229) =< s(228)*aux(56)
s(230) =< s(168)*s(219)
s(231) =< s(230)*aux(56)

  with precondition: [V1=2,V>=1,V11>=0] 

* Chain [32]: 8*s(276)+3
  Such that:aux(57) =< V1
s(276) =< aux(57)

  with precondition: [V=0,V1>=1] 

* Chain [31]: 3*s(280)+30*s(281)+18*s(283)+8
  Such that:s(278) =< 1
s(279) =< V1
s(280) =< s(278)
s(281) =< s(279)
s(282) =< s(281)*s(279)
s(283) =< s(282)

  with precondition: [V=1,V1>=1] 


Closed-form bounds of start(V1,V,V11): 
-------------------------------------
* Chain [36] with precondition: [V1>=0,V>=0] 
    - Upper bound: 49*V1+16*V+8+V*V1+nat(V1-V)*V*V1+4*V*nat(V1-V)*nat(V1/2-V/2)+nat(V1-V)*3*V1+nat(V1-V)*12*nat(V1/2-V/2)+nat(V1/2-V/2)*24 
    - Complexity: n^3 
* Chain [35] with precondition: [V1=1,V>=1,V11>=0] 
    - Upper bound: 15*V+4*V11+4+V11*V 
    - Complexity: n^2 
* Chain [34] with precondition: [V1=1,V>=2] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [33] with precondition: [V1=2,V>=1,V11>=0] 
    - Upper bound: 152*V+28+30*V*V+33*V11+4*V11*V+2*V11*nat(V-V11)*nat(V-V11)+nat(V-2*V11)*V11*V+2*V11*nat(V-2*V11)*nat(V/2-V11)+nat(V-V11)*12+nat(V-V11)*6*nat(V-V11)+nat(V-2*V11)*3*V+nat(V-2*V11)*6*nat(V/2-V11)+nat(V/2-V11)*12 
    - Complexity: n^3 
* Chain [32] with precondition: [V=0,V1>=1] 
    - Upper bound: 8*V1+3 
    - Complexity: n 
* Chain [31] with precondition: [V=1,V1>=1] 
    - Upper bound: 30*V1+11+18*V1*V1 
    - Complexity: n^2 

### Maximum cost of start(V1,V,V11): max([22*V1+5+max([18*V1*V1+3,19*V1+16*V+V*V1+nat(V1-V)*V*V1+4*V*nat(V1-V)*nat(V1/2-V/2)+nat(V1-V)*3*V1+nat(V1-V)*12*nat(V1/2-V/2)+nat(V1/2-V/2)*24])+8*V1,137*V+24+30*V*V+nat(V11)*29+nat(V11)*3*V+nat(V11)*2*nat(V-V11)*nat(V-V11)+nat(V-2*V11)*nat(V11)*V+nat(V11)*2*nat(V-2*V11)*nat(V/2-V11)+nat(V-V11)*12+nat(V-V11)*6*nat(V-V11)+nat(V-2*V11)*3*V+nat(V-2*V11)*6*nat(V/2-V11)+nat(V/2-V11)*12+ (15*V+1+nat(V11)*4+nat(V11)*V)])+3 
Asymptotic class: n^3 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 27 ms.
* Invariants computed in 48 ms.
   - Backward Invariants 29 ms.
   - Transitive Invariants 6 ms.
* Refinement performed in 113 ms.
* Termination proved in 8 ms.
* Upper bounds computed in 228 ms.
   - Equation cost structures 97 ms.
   - Phase cost structures 48 ms.
   - Chain cost structures 53 ms.
   - Solving cost expressions 7 ms.
* Total analysis performed in 465 ms.



Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eq/3]
1. recursive  : [del/3,if/5]
2. recursive  : [double/2]
3. non_recursive  : [first/2]
4. recursive  : [doublelist/2]
5. non_recursive  : [start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eq/3
1. SCC is partially evaluated into del/3
2. SCC is partially evaluated into double/2
3. SCC is partially evaluated into first/2
4. SCC is partially evaluated into doublelist/2
5. SCC is partially evaluated into start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eq/3 
* CE 17 is refined into CE [22] 
* CE 16 is refined into CE [23] 
* CE 15 is refined into CE [24] 
* CE 14 is refined into CE [25] 


#### Refined cost equations eq/3 
* CE 22: eq(V,V2,Out) = 1+ eq(W2,X2,Out)
     [X2>=0,W2>=0,X2+1=V2,W2+1=V] 
* CE 23: eq(V,V2,Out) = 1
     [V>=1,Out=0,V2=0] 
* CE 24: eq(V,V2,Out) = 1
     [V2>=1,Out=0,V=0] 
* CE 25: eq(V,V2,Out) = 1
     [Out=1,V2=0,V=0] 

### Cost equations --> "Loop" of eq/3 
* CEs [23] --> Loop 16 
* CEs [24] --> Loop 17 
* CEs [25] --> Loop 18 
* CEs [22] --> Loop 19 

#### Loops of eq/3 
* Loop 16: eq(V,V2,Out) [V>=1,Out=0,V2=0] 
* Loop 17: eq(V,V2,Out) [V2>=1,Out=0,V=0] 
* Loop 18: eq(V,V2,Out) [Out=1,V2=0,V=0] 
* Loop 19: eq(V,V2,Out)->  eq(V',V2',Out)
                  [V2'>=0,V'>=0,V2'+1=V2,V'+1=V] 

### Ranking functions of CR eq(V,V2,Out) 
* RF of phase [19]: [V,V2]

#### Partial ranking functions of CR eq(V,V2,Out) 
* Partial RF of phase [19]:
  - RF of loop [19:1]:
    V
    V2


### Resulting Chains:eq(V,V2,Out) 
* [[19],18]
* [[19],17]
* [[19],16]
* [18]
* [17]
* [16]


### Merging Chains  eq/3 into  External patterns of execution 
* [[18]] --> 1 
* [[17]] --> 2 
* [[16]] --> 3 
* [[17,[19]]] --> 4 
* [[16,[19]]] --> 5 
* [[18,[19]]] --> 6 


### Specialization of cost equations del/3 
* CE 10 is refined into CE [26,27] 
* CE 11 is refined into CE [28] 
* CE 9 is refined into CE [29,30,31,32] 


#### Refined cost equations del/3 
* CE 26: del(V,V2,Out) = 2+ eq(W2,X2,Y2):1
     [Out>=0,Out+1=V2,Y2=1,X2=0,W2=0,V=0] 
* CE 27: del(V,V2,Out) = 2+ eq(V,V,W2):6
     [V>=1,Out>=0,V+Out+1=V2,W2=1] 
* CE 28: del(V,V2,Out) = 1
     [V>=0,Out=0,V2=0] 
* CE 29: del(V,V2,Out) = 2+ eq(W2,X2,Y2):2+ del(Z2,A3,B3)
     [A3>=0,X2>=1,X2+B3+1=Out,X2+A3+1=V2,Z2=0,Y2=0,W2=0,V=0] 
* CE 30: del(V,V2,Out) = 2+ eq(V,W2,X2):3+ del(V,Y2,Z2)
     [Y2>=0,V>=1,Out=Z2+1,Y2+1=V2,X2=0,W2=0] 
* CE 31: del(V,V2,Out) = 2+ eq(V,W2,X2):4+ del(V,Y2,Z2)
     [W2>=V+1,Y2>=0,V>=1,W2+Z2+1=Out,W2+Y2+1=V2,X2=0] 
* CE 32: del(V,V2,Out) = 2+ eq(V,W2,X2):5+ del(V,Y2,Z2)
     [V>=W2+1,Y2>=0,W2>=1,W2+Z2+1=Out,W2+Y2+1=V2,X2=0] 

### Cost equations --> "Loop" of del/3 
* CEs [32] --> Loop 20 
* CEs [31] --> Loop 21 
* CEs [30] --> Loop 22 
* CEs [29] --> Loop 23 
* CEs [27] --> Loop 24 
* CEs [28] --> Loop 25 
* CEs [26] --> Loop 26 

#### Loops of del/3 
* Loop 20: del(V,V2,Out)->  del(V,V2',Out')
                  [V+V2'>=V2,V2>=V2'+2,V2'>=0,V2+Out'=Out+V2'] 
* Loop 21: del(V,V2,Out)->  del(V,V2',Out')
                  [V2>=V+V2'+2,V2'>=0,V>=1,Out+V2'=V2+Out'] 
* Loop 22: del(V,V2,Out)->  del(V,V2',Out')
                  [V2>=1,V>=1,Out=Out'+1,V2=V2'+1] 
* Loop 23: del(V,V2,Out)->  del(V',V2',Out')
                  [V2>=V2'+2,V2'>=0,V2+Out'=Out+V2',V'=0,V=0] 
* Loop 24: del(V,V2,Out) [V2>=V+1,V>=1,V+Out+1=V2] 
* Loop 25: del(V,V2,Out) [V>=0,Out=0,V2=0] 
* Loop 26: del(V,V2,Out) [V2>=1,V2=Out+1,V=0] 

### Ranking functions of CR del(V,V2,Out) 
* RF of phase [20,21,22]: [V2]
* RF of phase [23]: [V2-1]

#### Partial ranking functions of CR del(V,V2,Out) 
* Partial RF of phase [20,21,22]:
  - RF of loop [20:1]:
    V2-1
  - RF of loop [21:1]:
    -V/3+V2/3-1/3
    V2/3-2/3
  - RF of loop [22:1]:
    V2
* Partial RF of phase [23]:
  - RF of loop [23:1]:
    V2-1


### Resulting Chains:del(V,V2,Out) 
* [[23],26]
* [[23],25]
* [[20,21,22],25]
* [[20,21,22],24]
* [26]
* [25]
* [24]


### Merging Chains  del/3 into  External patterns of execution 
* [[25,[23]]] --> 1 
* [[26],[26,[23]]] --> 2 
* [[25]] --> 3 
* [[25,[20,21,22]]] --> 4 
* [[24],[24,[20,21,22]]] --> 5 


### Specialization of cost equations double/2 
* CE 13 is refined into CE [33] 
* CE 12 is refined into CE [34] 


#### Refined cost equations double/2 
* CE 33: double(V,Out) = 1+ double(W,X)
     [W>=0,X+2=Out,W+1=V] 
* CE 34: double(V,Out) = 1
     [Out=0,V=0] 

### Cost equations --> "Loop" of double/2 
* CEs [34] --> Loop 27 
* CEs [33] --> Loop 28 

#### Loops of double/2 
* Loop 27: double(V,Out) [Out=0,V=0] 
* Loop 28: double(V,Out)->  double(V',Out')
                  [V'>=0,Out=Out'+2,V'+1=V] 

### Ranking functions of CR double(V,Out) 
* RF of phase [28]: [V]

#### Partial ranking functions of CR double(V,Out) 
* Partial RF of phase [28]:
  - RF of loop [28:1]:
    V


### Resulting Chains:double(V,Out) 
* [[28],27]
* [27]


### Merging Chains  double/2 into  External patterns of execution 
* [[27]] --> 1 
* [[27,[28]]] --> 2 


### Specialization of cost equations first/2 
* CE 19 is refined into CE [35] 
* CE 18 is refined into CE [36] 


#### Refined cost equations first/2 
* CE 35: first(V,Out) = 1
     [V>=Out+1,Out>=0] 
* CE 36: first(V,Out) = 1
     [Out=0,V=0] 

### Cost equations --> "Loop" of first/2 
* CEs [35] --> Loop 29 
* CEs [36] --> Loop 30 

#### Loops of first/2 
* Loop 29: first(V,Out) [V>=Out+1,Out>=0] 
* Loop 30: first(V,Out) [Out=0,V=0] 

### Ranking functions of CR first(V,Out) 

#### Partial ranking functions of CR first(V,Out) 


### Resulting Chains:first(V,Out) 
* [30]
* [29]


### Merging Chains  first/2 into  External patterns of execution 
* [[30]] --> 1 
* [[29]] --> 2 


### Specialization of cost equations doublelist/2 
* CE 21 is refined into CE [37,38,39,40,41,42,43,44] 
* CE 20 is refined into CE [45] 


#### Refined cost equations doublelist/2 
* CE 37: doublelist(V,Out) = 1+ double(W,X):1+ first(V,Y):2+ del(Z,V,V):1+ doublelist(V,A1)
     [V>=2,A1+1=Out,Z=0,Y=0,X=0,W=0] 
* CE 38: doublelist(V,Out) = 1+ double(W,X):1+ first(Y,Z):2+ del(A1,B1,C1):2+ doublelist(C1,D1)
     [C1>=0,C1+1=B1,C1+1=Y,D1+1=Out,C1+1=V,A1=0,Z=0,X=0,W=0] 
* CE 39: doublelist(V,Out) = 1+ double(W,X):1+ first(V,Y):2+ del(Y,V,V):4+ doublelist(V,Z)
     [V>=Y+1,Y>=1,Z+1=Out,X=0,W=0] 
* CE 40: doublelist(V,Out) = 1+ double(W,X):1+ first(V,Y):2+ del(Y,V,Z):5+ doublelist(A1,B1)
     [V>=Y+1,Y>=1,V=Y+A1+1,V=Y+Z+1,B1+1=Out,X=0,W=0] 
* CE 41: doublelist(V,Out) = 1+ double(W,X):2+ first(V,Y):2+ del(Z,V,V):1+ doublelist(V,A1)
     [2*V>=X+2,X>=2,X+A1+1=Out,X=2*W,Z=0,Y=0] 
* CE 42: doublelist(V,Out) = 1+ double(W,X):2+ first(Y,Z):2+ del(A1,B1,C1):2+ doublelist(C1,D1)
     [2*C1>=X,X>=2,X+D1+1=Out,C1+1=B1,C1+1=Y,C1+1=V,X=2*W,A1=0,Z=0] 
* CE 43: doublelist(V,Out) = 1+ double(W,X):2+ first(V,Y):2+ del(Y,V,V):4+ doublelist(V,Z)
     [V>=Y+1,2*V>=X+2,Y>=1,X>=2,X+Z+1=Out,X=2*W] 
* CE 44: doublelist(V,Out) = 1+ double(W,X):2+ first(V,Y):2+ del(Y,V,Z):5+ doublelist(A1,B1)
     [V>=Y+1,2*V>=X+2,Y>=1,X>=2,V=Y+A1+1,V=Y+Z+1,X+B1+1=Out,X=2*W] 
* CE 45: doublelist(V,Out) = 1
     [Out=0,V=0] 

### Cost equations --> "Loop" of doublelist/2 
* CEs [45] --> Loop 31 
* CEs [44] --> Loop 32 
* CEs [40] --> Loop 33 
* CEs [42] --> Loop 34 
* CEs [41,43] --> Loop 35 
* CEs [37,39] --> Loop 36 
* CEs [38] --> Loop 37 

#### Loops of doublelist/2 
* Loop 31: doublelist(V,Out) [Out=0,V=0] 
* Loop 32: doublelist(V,Out)->  doublelist(V',Out')
                  [Out'+2*V>=Out+1,Out>=Out'+3,V>=V'+2,V'>=0] 
* Loop 33: doublelist(V,Out)->  doublelist(V',Out')
                  [V>=V'+2,V'>=0,Out=Out'+1] 
* Loop 34: doublelist(V,Out)->  doublelist(V',Out')
                  [Out'+2*V>=Out+1,Out>=Out'+3,V=V'+1] 
* Loop 35: doublelist(V,Out)->  doublelist(V,Out')
                  [Out'+2*V>=Out+1,Out>=Out'+3] 
* Loop 36: doublelist(V,Out)->  doublelist(V,Out')
                  [V>=2,Out=Out'+1] 
* Loop 37: doublelist(V,Out)->  doublelist(V',Out')
                  [V>=1,Out=Out'+1,V=V'+1] 

### Ranking functions of CR doublelist(V,Out) 

#### Partial ranking functions of CR doublelist(V,Out) 
* Partial RF of phase [32,33,34,35,36,37]:
  - RF of loop [32:1,33:1,34:1]:
    V-1
  - RF of loop [37:1]:
    V


### Resulting Chains:doublelist(V,Out) 
* [[32,33,34,35,36,37]]...
* [[32,33,34,35,36,37],31]
* [31]


### Merging Chains  doublelist/2 into  External patterns of execution 
* [[31]] --> 1 
* [[31,[32,33,34,35,36,37]]] --> 2 
* [[[32,33,34,35,36,37]]] --> 3 


### Specialization of cost equations start/4 
* CE 3 is refined into CE [46] 
* CE 2 is refined into CE [47,48,49,50,51] 
* CE 4 is refined into CE [52,53] 
* CE 5 is refined into CE [54,55,56,57,58] 
* CE 6 is refined into CE [59,60,61,62,63,64] 
* CE 7 is refined into CE [65,66] 
* CE 8 is refined into CE [67,68,69] 


#### Refined cost equations start/4 
* CE 46: start(V,V2,V8,V11) = 1
     [V11>=0,V8>=0,V2>=0,V=1] 
* CE 47: start(V,V2,V8,V11) = 1+ del(W11,V11,V11):1
     [V11>=2,V8>=0,W11=0,V2=0,V=0] 
* CE 48: start(V,V2,V8,V11) = 1+ del(W11,X11,Y11):2
     [Y11>=0,V8>=0,Y11+1=X11,Y11+1=V11,W11=0,V2=0,V=0] 
* CE 49: start(V,V2,V8,V11) = 1+ del(V2,W11,X11):3
     [V2>=0,V8>=0,X11=0,W11=0,V11=0,V=0] 
* CE 50: start(V,V2,V8,V11) = 1+ del(V2,V11,V11):4
     [V11>=1,V2>=1,V8>=0,V=0] 
* CE 51: start(V,V2,V8,V11) = 1+ del(V2,V11,W11):5
     [V11>=V2+1,V2>=1,V8>=0,V11=V2+W11+1,V=0] 
* CE 52: start(V,V2,V8,V11) = 0+ double(W11,X11):1
     [X11=0,W11=0,V=0] 
* CE 53: start(V,V2,V8,V11) = 0+ double(W11,X11):2
     [X11>=2,X11=2*W11,X11=2*V] 
* CE 54: start(V,V2,V8,V11) = 0+ del(W11,V2,V2):1
     [V2>=2,W11=0,V=0] 
* CE 55: start(V,V2,V8,V11) = 0+ del(W11,X11,Y11):2
     [Y11>=0,Y11+1=X11,Y11+1=V2,W11=0,V=0] 
* CE 56: start(V,V2,V8,V11) = 0+ del(V,W11,X11):3
     [V>=0,X11=0,W11=0,V2=0] 
* CE 57: start(V,V2,V8,V11) = 0+ del(V,V2,V2):4
     [V2>=1,V>=1] 
* CE 58: start(V,V2,V8,V11) = 0+ del(V,V2,W11):5
     [V2>=V+1,V>=1,V2=V+W11+1] 
* CE 59: start(V,V2,V8,V11) = 0+ eq(W11,X11,Y11):1
     [Y11=1,X11=0,W11=0,V2=0,V=0] 
* CE 60: start(V,V2,V8,V11) = 0+ eq(W11,V2,X11):2
     [V2>=1,X11=0,W11=0,V=0] 
* CE 61: start(V,V2,V8,V11) = 0+ eq(V,W11,X11):3
     [V>=1,X11=0,W11=0,V2=0] 
* CE 62: start(V,V2,V8,V11) = 0+ eq(V,V2,W11):4
     [V2>=V+1,V>=1,W11=0] 
* CE 63: start(V,V2,V8,V11) = 0+ eq(V,V2,W11):5
     [V>=V2+1,V2>=1,W11=0] 
* CE 64: start(A,A,B,C) = 0+ eq(A,A,D):6
     [A>=1,D=1] 
* CE 65: start(V,V2,V8,V11) = 0+ first(W11,X11):1
     [X11=0,W11=0,V=0] 
* CE 66: start(V,V2,V8,V11) = 0+ first(V,W11):2
     [V>=W11+1,W11>=0] 
* CE 67: start(V,V2,V8,V11) = 0+ doublelist(W11,X11):1
     [X11=0,W11=0,V=0] 
* CE 68: start(V,V2,V8,V11) = 0+ doublelist(V,W11):2
     [W11>=1,V>=1] 
* CE 69: start(V,V2,V8,V11) = 0+ doublelist(V,W11):3
     [V>=1] 

### Cost equations --> "Loop" of start/4 
* CEs [69] --> Loop 38 
* CEs [64] --> Loop 39 
* CEs [56,61] --> Loop 40 
* CEs [46,53,57,58,62,63,66,68] --> Loop 41 
* CEs [47,48,49,50,51,52,54,55,59,60,65,67] --> Loop 42 

#### Loops of start/4 
* Loop 38: start(V,V2,V8,V11) [V>=1] 
* Loop 39: start(A,A,B,C) [A>=1] 
* Loop 40: start(V,V2,V8,V11) [V>=0,V2=0] 
* Loop 41: start(V,V2,V8,V11) [V>=1] 
* Loop 42: start(V,V2,V8,V11) [V=0] 

### Ranking functions of CR start(V,V2,V8,V11) 

#### Partial ranking functions of CR start(V,V2,V8,V11) 


### Resulting Chains:start(V,V2,V8,V11) 
* [42]
* [41]
* [40]
* [39]
* [38]...


### Merging Chains  start/4 into  External patterns of execution 
* [[42]] --> 1 
* [[40]] --> 2 
* [[39],[41]] --> 3 
* [[38]] --> 4 


Computing Bounds
=====================================

#### Cost of loops [19] 

 * loop 19:eq(V,V2,Out) -> [eq(V',V2',Out')] 
1
#### Cost of phase [19]:eq(V,V2,Out) -> [eq(V',V2',Out')] 
1*it(19)+0
  Such that:it(19) =< V
it(19) =< V-V'
it(19) =< V2
it(19) =< V2-V2'

#### Cost of phase [19]:eq(V,V2,Out) -> [eq(V',V2',Out')] 
1*it(19)+0
  Such that:it(19) =< V
it(19) =< V-V'
it(19) =< V2
it(19) =< V2-V2'

#### Cost of phase [19]:eq(V,V2,Out) -> [eq(V',V2',Out')] 
1*it(19)+0
  Such that:it(19) =< V
it(19) =< V-V'
it(19) =< V2
it(19) =< V2-V2'

#### Cost of chains of eq(V,V2,Out):
* Chain [[19],18]: 1*it(19)+1
  Such that:it(19) =< V

  with precondition: [Out=1,V=V2,V>=1] 

* Chain [[19],17]: 1*it(19)+1
  Such that:it(19) =< V

  with precondition: [Out=0,V>=1,V2>=V+1] 

* Chain [[19],16]: 1*it(19)+1
  Such that:it(19) =< V2

  with precondition: [Out=0,V2>=1,V>=V2+1] 

* Chain [18]: 1
  with precondition: [V=0,V2=0,Out=1] 

* Chain [17]: 1
  with precondition: [V=0,Out=0,V2>=1] 

* Chain [16]: 1
  with precondition: [V2=0,Out=0,V>=1] 


#### Cost of loops [23] 

 * loop 23:del(V,V2,Out) -> [del(V',V2',Out')] 
3
#### Cost of phase [23]:del(V,V2,Out) -> [del(V',V2',Out')] 
3*it(23)+0
  Such that:it(23) =< V2
it(23) =< V2-V2'

#### Cost of phase [23]:del(V,V2,Out) -> [del(V',V2',Out')] 
3*it(23)+0
  Such that:it(23) =< V2
it(23) =< V2-V2'

#### Cost of loops [20,21,22] 

 * loop 20:del(V,V2,Out) -> [del(V',V2',Out')] 
1*s(2)+3
  Such that:s(2) =< V2-V2'

 * loop 21:del(V,V2,Out) -> [del(V',V2',Out')] 
1*s(4)+3
  Such that:s(4) =< V'

 * loop 22:del(V,V2,Out) -> [del(V',V2',Out')] 
3
#### Cost of phase [20,21,22]:del(V,V2,Out) -> [del(V',V2',Out')] 
8*it(20)+3*it(21)+0
  Such that:it(21) =< -V/3+V2/3
it(21) =< -V/3+V2/3+V'/3-V2'/3
it(21) =< V2/3
it(21) =< V2/3-V2'/3
aux(1) =< V2
aux(2) =< V2-V2'
it(20) =< aux(1)
it(21) =< aux(1)
it(20) =< aux(2)
it(21) =< aux(2)

#### Cost of phase [20,21,22]:del(V,V2,Out) -> [del(V',V2',Out')] 
8*it(20)+3*it(21)+0
  Such that:it(21) =< -V/3+V2/3
it(21) =< -V/3+V2/3+V'/3-V2'/3
it(21) =< V2/3
it(21) =< V2/3-V2'/3
aux(1) =< V2
aux(2) =< V2-V2'
it(20) =< aux(1)
it(21) =< aux(1)
it(20) =< aux(2)
it(21) =< aux(2)

#### Cost of chains of del(V,V2,Out):
* Chain [[23],26]: 3*it(23)+3
  Such that:it(23) =< Out

  with precondition: [V=0,V2=Out+1,V2>=3] 

* Chain [[23],25]: 3*it(23)+1
  Such that:it(23) =< Out

  with precondition: [V=0,V2=Out,V2>=2] 

* Chain [[20,21,22],25]: 8*it(20)+3*it(21)+1
  Such that:it(21) =< -V/3+V2/3
it(21) =< Out/3
aux(3) =< Out
it(20) =< aux(3)
it(21) =< aux(3)

  with precondition: [V2=Out,V>=1,V2>=1] 

* Chain [[20,21,22],24]: 8*it(20)+3*it(21)+1*s(7)+3
  Such that:s(7) =< V
aux(1) =< V+Out+1
aux(2) =< Out
it(21) =< Out/3
it(20) =< aux(1)
it(21) =< aux(1)
it(20) =< aux(2)
it(21) =< aux(2)

  with precondition: [Out+V+1=V2,V>=1,V2>=V+2] 

* Chain [26]: 3
  with precondition: [V=0,V2=Out+1,V2>=1] 

* Chain [25]: 1
  with precondition: [V2=0,Out=0,V>=0] 

* Chain [24]: 1*s(7)+3
  Such that:s(7) =< V

  with precondition: [V2=Out+V+1,V>=1,V2>=V+1] 


#### Cost of loops [28] 

 * loop 28:double(V,Out) -> [double(V',Out')] 
1
#### Cost of phase [28]:double(V,Out) -> [double(V',Out')] 
1*it(28)+0
  Such that:it(28) =< V
it(28) =< V-V'

#### Cost of chains of double(V,Out):
* Chain [[28],27]: 1*it(28)+1
  Such that:it(28) =< Out/2

  with precondition: [2*V=Out,V>=1] 

* Chain [27]: 1
  with precondition: [V=0,Out=0] 


#### Cost of chains of first(V,Out):
* Chain [30]: 1
  with precondition: [V=0,Out=0] 

* Chain [29]: 1
  with precondition: [Out>=0,V>=Out+1] 


#### Cost of loops [32,33,34,35,36,37] 

 * loop 32:doublelist(V,Out) -> [doublelist(V',Out')] 
1*s(26)+3*s(24)+2*s(27)+8*s(28)+6
  Such that:s(22) =< V-V'
s(23) =< V'
s(24) =< V'/3
s(25) =< V
s(26) =< s(25)
s(27) =< s(22)
s(28) =< s(25)
s(24) =< s(25)
s(28) =< s(23)
s(24) =< s(23)

 * loop 33:doublelist(V,Out) -> [doublelist(V',Out')] 
3*s(38)+2*s(39)+8*s(40)+6
  Such that:s(35) =< V
s(36) =< V-V'
s(37) =< V'
s(38) =< V'/3
s(39) =< s(36)
s(40) =< s(35)
s(38) =< s(35)
s(40) =< s(37)
s(38) =< s(37)

 * loop 34:doublelist(V,Out) -> [doublelist(V',Out')] 
4*s(44)+6
  Such that:s(43) =< V'
s(44) =< s(43)

 * loop 35:doublelist(V,Out) -> [doublelist(V',Out')] 
13*s(53)+3*s(51)+4
  Such that:s(51) =< V'/3
s(52) =< V'
s(53) =< s(52)
s(51) =< s(52)

 * loop 36:doublelist(V,Out) -> [doublelist(V',Out')] 
11*s(60)+3*s(58)+4
  Such that:s(58) =< V'/3
s(59) =< V'
s(60) =< s(59)
s(58) =< s(59)

 * loop 37:doublelist(V,Out) -> [doublelist(V',Out')] 
3*s(62)+6
  Such that:s(62) =< V

#### Cost of phase [32,33,34,35,36,37]:doublelist(V,Out) -> [doublelist(V',Out')] 
24*it(32)+8*it(35)+1*s(63)+3*s(64)+4*s(65)+8*s(66)+3*s(70)+8*s(72)+4*s(76)+24*s(78)+6*s(79)+3*s(84)+0
  Such that:aux(23) =< V
aux(24) =< V-V'
it(32) =< aux(23)
s(69) =< aux(23)
it(32) =< aux(24)
s(69) =< aux(24)
aux(14) =< aux(23)
aux(17) =< aux(23)-1
aux(12) =< aux(23)-2
s(68) =< it(32)*aux(23)
s(84) =< it(32)*aux(14)
s(77) =< it(32)*aux(17)
aux(13) =< it(32)*aux(12)
s(74) =< it(32)*aux(14)
s(70) =< aux(13)* (1/3)
s(64) =< aux(13)* (1/3)
s(76) =< s(77)
s(65) =< s(69)
s(72) =< s(74)
s(70) =< s(74)
s(72) =< aux(13)
s(70) =< aux(13)
s(63) =< s(68)
s(66) =< s(68)
s(64) =< s(68)
s(66) =< aux(13)
s(64) =< aux(13)

#### Cost of phase [32,33,34,35,36,37]:doublelist(V,Out) -> [doublelist(V',Out')] 
24*it(32)+8*it(35)+1*s(63)+3*s(64)+4*s(65)+8*s(66)+3*s(70)+8*s(72)+4*s(76)+24*s(78)+6*s(79)+3*s(84)+0
  Such that:aux(23) =< V
aux(24) =< V-V'
it(32) =< aux(23)
s(69) =< aux(23)
it(32) =< aux(24)
s(69) =< aux(24)
aux(14) =< aux(23)
aux(17) =< aux(23)-1
aux(12) =< aux(23)-2
s(68) =< it(32)*aux(23)
s(84) =< it(32)*aux(14)
s(77) =< it(32)*aux(17)
aux(13) =< it(32)*aux(12)
s(74) =< it(32)*aux(14)
s(70) =< aux(13)* (1/3)
s(64) =< aux(13)* (1/3)
s(76) =< s(77)
s(65) =< s(69)
s(72) =< s(74)
s(70) =< s(74)
s(72) =< aux(13)
s(70) =< aux(13)
s(63) =< s(68)
s(66) =< s(68)
s(64) =< s(68)
s(66) =< aux(13)
s(64) =< aux(13)

#### Cost of chains of doublelist(V,Out):
* Chain [[32,33,34,35,36,37]]...: 28*it(32)+38*it(35)+1*s(63)+3*s(64)+8*s(66)+3*s(70)+8*s(72)+4*s(76)+3*s(84)+0
  Such that:aux(25) =< V
it(32) =< aux(25)
aux(14) =< aux(25)
aux(17) =< aux(25)-1
aux(12) =< aux(25)-2
s(68) =< it(32)*aux(25)
s(84) =< it(32)*aux(14)
s(77) =< it(32)*aux(17)
aux(13) =< it(32)*aux(12)
s(74) =< it(32)*aux(14)
s(70) =< aux(13)* (1/3)
s(64) =< aux(13)* (1/3)
s(76) =< s(77)
s(72) =< s(74)
s(70) =< s(74)
s(72) =< aux(13)
s(70) =< aux(13)
s(63) =< s(68)
s(66) =< s(68)
s(64) =< s(68)
s(66) =< aux(13)
s(64) =< aux(13)

  with precondition: [V>=1] 

* Chain [[32,33,34,35,36,37],31]: 28*it(32)+38*it(35)+1*s(63)+3*s(64)+8*s(66)+3*s(70)+8*s(72)+4*s(76)+3*s(84)+1
  Such that:aux(26) =< V
it(32) =< aux(26)
aux(14) =< aux(26)
aux(17) =< aux(26)-1
aux(12) =< aux(26)-2
s(68) =< it(32)*aux(26)
s(84) =< it(32)*aux(14)
s(77) =< it(32)*aux(17)
aux(13) =< it(32)*aux(12)
s(74) =< it(32)*aux(14)
s(70) =< aux(13)* (1/3)
s(64) =< aux(13)* (1/3)
s(76) =< s(77)
s(72) =< s(74)
s(70) =< s(74)
s(72) =< aux(13)
s(70) =< aux(13)
s(63) =< s(68)
s(66) =< s(68)
s(64) =< s(68)
s(66) =< aux(13)
s(64) =< aux(13)

  with precondition: [V>=1,Out>=1] 

* Chain [31]: 1
  with precondition: [V=0,Out=0] 


#### Cost of chains of start(V,V2,V8,V11):
* Chain [42]: 14*s(85)+3*s(87)+3*s(92)+8*s(94)+8*s(95)+4
  Such that:s(91) =< -V2+V11
s(87) =< V11/3
aux(27) =< V2
aux(28) =< -V2/3+V11/3
aux(29) =< V11
s(94) =< aux(27)
s(87) =< aux(28)
s(92) =< aux(28)
s(85) =< aux(29)
s(95) =< aux(29)
s(92) =< aux(29)
s(95) =< s(91)
s(92) =< s(91)
s(87) =< aux(29)

  with precondition: [V=0] 

* Chain [41]: 32*s(98)+3*s(99)+9*s(101)+3*s(104)+8*s(107)+3*s(116)+3*s(120)+3*s(121)+4*s(122)+8*s(123)+1*s(124)+8*s(125)+38*s(126)+3
  Such that:s(103) =< -V+V2
s(99) =< V2/3
aux(30) =< V
aux(31) =< -V/3+V2/3
aux(32) =< V2
s(98) =< aux(30)
s(99) =< aux(31)
s(104) =< aux(31)
s(101) =< aux(32)
s(107) =< aux(32)
s(104) =< aux(32)
s(107) =< s(103)
s(104) =< s(103)
s(112) =< aux(30)
s(113) =< aux(30)-1
s(114) =< aux(30)-2
s(115) =< s(98)*aux(30)
s(116) =< s(98)*s(112)
s(117) =< s(98)*s(113)
s(118) =< s(98)*s(114)
s(119) =< s(98)*s(112)
s(120) =< s(118)* (1/3)
s(121) =< s(118)* (1/3)
s(122) =< s(117)
s(123) =< s(119)
s(120) =< s(119)
s(123) =< s(118)
s(120) =< s(118)
s(124) =< s(115)
s(125) =< s(115)
s(121) =< s(115)
s(125) =< s(118)
s(121) =< s(118)
s(99) =< aux(32)

  with precondition: [V>=1] 

* Chain [40]: 1
  with precondition: [V2=0,V>=0] 

* Chain [39]: 1*s(127)+1
  Such that:s(127) =< V2

  with precondition: [V=V2,V>=1] 

* Chain [38]...: 28*s(129)+3*s(134)+3*s(138)+3*s(139)+4*s(140)+8*s(141)+1*s(142)+8*s(143)+38*s(144)+0
  Such that:s(128) =< V
s(129) =< s(128)
s(130) =< s(128)
s(131) =< s(128)-1
s(132) =< s(128)-2
s(133) =< s(129)*s(128)
s(134) =< s(129)*s(130)
s(135) =< s(129)*s(131)
s(136) =< s(129)*s(132)
s(137) =< s(129)*s(130)
s(138) =< s(136)* (1/3)
s(139) =< s(136)* (1/3)
s(140) =< s(135)
s(141) =< s(137)
s(138) =< s(137)
s(141) =< s(136)
s(138) =< s(136)
s(142) =< s(133)
s(143) =< s(133)
s(139) =< s(133)
s(143) =< s(136)
s(139) =< s(136)

  with precondition: [V>=1] 


Closed-form bounds of start(V,V2,V8,V11): 
-------------------------------------
* Chain [42] with precondition: [V=0] 
    - Upper bound: nat(V2)*8+4+nat(V11)*22+nat(-V2/3+V11/3)*3+nat(V11/3)*3 
    - Complexity: n 
* Chain [41] with precondition: [V>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [40] with precondition: [V2=0,V>=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [39] with precondition: [V=V2,V>=1] 
    - Upper bound: V2+1 
    - Complexity: n 
* Chain [38]... with precondition: [V>=1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of start(V,V2,V8,V11): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 16 ms.
* Invariants computed in 47 ms.
   - Backward Invariants 23 ms.
   - Transitive Invariants 11 ms.
* Refinement performed in 101 ms.
* Termination proved in 16 ms.
* Upper bounds computed in 174 ms.
   - Equation cost structures 57 ms.
   - Phase cost structures 97 ms.
   - Chain cost structures 33 ms.
   - Solving cost expressions 5 ms.
* Total analysis performed in 378 ms.


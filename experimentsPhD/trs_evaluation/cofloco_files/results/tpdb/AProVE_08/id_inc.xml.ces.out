
Preprocessing Cost Relations
=====================================
1. SCC does not have a single cut point : [f/2,g/2]  
 Merged into fg/2

#### Computed strongly connected components 
0. recursive [multiple] : [fun/2]
2. non_recursive  : [start/1]
1. recursive  : [fg/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into fun/2
2. SCC is partially evaluated into start/1
1. SCC is partially evaluated into fg/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fun/2 
* CE 11 is refined into CE [12] 
* CE 10 is refined into CE [13] 
* CE 9 is refined into CE [14] 
* CE 8 is refined into CE [15] 


#### Refined cost equations fun/2 
* CE 12: fun(V,Out) = 1
     [Out=1,V=0] 
* CE 13: fun(V,Out) = 1
     [Out=0,V=0] 
* CE 14: fun(V,Out) = 1+ fun(W,X)
     [W>=0,X+1=Out,W+1=V] 
* CE 15: fun(V,Out) = 1+ fun(W,X)+ fun(Y,Z)
     [Y>=0,W>=0,X+Z+1=Out,W+Y+1=V] 

### Cost equations --> "Loop" of fun/2 
* CEs [15] --> Loop 9 
* CEs [14] --> Loop 10 
* CEs [12] --> Loop 11 
* CEs [13] --> Loop 12 

#### Loops of fun/2 
* Loop 9: fun(V,Out)->  fun(V',Out')  fun(V'2,Out'2)
                  [V'2>=0,V'>=0,Out=Out'+Out'2+1,V'+V'2+1=V] 
* Loop 10: fun(V,Out)->  fun(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 11: fun(V,Out) [Out=1,V=0] 
* Loop 12: fun(V,Out) [Out=0,V=0] 

### Ranking functions of CR fun(V,Out) 
* RF of phase [9,10]: [V]

#### Partial ranking functions of CR fun(V,Out) 
* Partial RF of phase [9,10]:
  - RF of loop [9:1,9:2,10:1]:
    V


### Resulting Chains:fun(V,Out) 
* [12]
* [11]
* [multiple([9,10],[[12],[11]])]


### Merging Chains  fun/2 into  External patterns of execution 
* [[12]] --> 1 
* [[11]] --> 2 
* [[multiple([9,10],[[12],[11]])]] --> 3 


### Specialization of cost equations fg/2 
* CE 5 is refined into CE [16] 
* CE 4 is refined into CE [17] 
* CE 7 is refined into CE [18] 
* CE 6 is refined into CE [19] 


#### Refined cost equations fg/2 
* CE 16: fg(A,B) = 1+ fg(C,B)
     [A>=2,A=C+1] 
* CE 17: fg(A,B) = 1+ fun(C,D):3+ fg(D,B)
     [2*C+1>=D,D>=C,C>=1,C+1=2*A] 
* CE 18: fg(A,B) = 1+ fg(C,B)
     [C>=0,2*C+1=A] 
* CE 19: fg(A,B) = 0
     [A>=0,B=0] 

### Cost equations --> "Loop" of fg/2 
* CEs [19] --> Loop 13 
* CEs [17] --> Loop 14 
* CEs [16] --> Loop 15 
* CEs [18] --> Loop 16 

#### Loops of fg/2 
* Loop 13: fg(A,B) [A>=0,B=0] 
* Loop 14: fg(A,B)->  fg(A',B)
                  [4*A>=A'+1,A'+1>=2*A,A>=1] 
* Loop 15: fg(A,B)->  fg(A',B)
                  [A>=2,A=A'+1] 
* Loop 16: fg(A,B)->  fg(A',B)
                  [A>=1,A=2*A'+1] 

### Ranking functions of CR fg(A,B) 

#### Partial ranking functions of CR fg(A,B) 
* Partial RF of phase [14,15,16]:
  - RF of loop [15:1]:
    A-1 depends on loops [14:1] 
  - RF of loop [16:1]:
    A depends on loops [14:1] 


### Resulting Chains:fg(A,B) 
* [[14,15,16]]...
* [[14,15,16],13]
* [13]


### Merging Chains  fg/2 into  External patterns of execution 
* [[13],[13,[14,15,16]]] --> 1 
* [[[14,15,16]]] --> 2 


### Specialization of cost equations start/1 
* CE 2 is refined into CE [20,21] 
* CE 3 is refined into CE [22,23,24] 


#### Refined cost equations start/1 
* CE 20: start(V) = 0+ fg(V,W):1
     [V>=0,W=0] 
* CE 21: start(V) = 0+ fg(V,W):2
     [V>=1] 
* CE 22: start(V) = 0+ fun(W,X):1
     [X=0,W=0,V=0] 
* CE 23: start(V) = 0+ fun(W,X):2
     [X=1,W=0,V=0] 
* CE 24: start(V) = 0+ fun(V,W):3
     [2*V+1>=W,W>=V,V>=1] 

### Cost equations --> "Loop" of start/1 
* CEs [20,22,23,24] --> Loop 17 
* CEs [21] --> Loop 18 

#### Loops of start/1 
* Loop 17: start(V) [V>=0] 
* Loop 18: start(V) [V>=1] 

### Ranking functions of CR start(V) 

#### Partial ranking functions of CR start(V) 


### Resulting Chains:start(V) 
* [18]...
* [17]


### Merging Chains  start/1 into  External patterns of execution 
* [[17]] --> 1 
* [[18]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [9,10] 

 * loop 9:fun(V,Out) -> [fun(V',Out'),fun(V'2,Out'2)] 
1
 * loop 10:fun(V,Out) -> [fun(V',Out')] 
1
#### Cost of phase [9,10]:fun(V,Out) -> [] 
1*it(9)+1*it(10)+2*it([11])+0
  Such that:it(10) =< V
aux(1) =< V+1
aux(2) =< 2*V+1
it([11]) =< aux(1)
it(9) =< aux(2)
it(10) =< aux(2)
it([11]) =< aux(2)

#### Cost of chains of fun(V,Out):
* Chain [12]: 1
  with precondition: [V=0,Out=0] 

* Chain [11]: 1
  with precondition: [V=0,Out=1] 

* Chain [multiple([9,10],[[12],[11]])]: 1*it(9)+1*it(10)+2*it([11])+0
  Such that:it(10) =< V
aux(1) =< V+1
aux(2) =< 2*V+1
it([11]) =< aux(1)
it(9) =< aux(2)
it(10) =< aux(2)
it([11]) =< aux(2)

  with precondition: [V>=1,Out>=V,2*V+1>=Out] 


#### Cost of loops [14,15,16] 

 * loop 14:fg(A,B) -> [fg(A',B')] 
3*s(8)+1*s(9)+1
  Such that:s(6) =< 4*A
s(7) =< 2*A
s(8) =< s(7)
s(9) =< s(6)
s(8) =< s(6)

 * loop 15:fg(A,B) -> [fg(A',B')] 
1
 * loop 16:fg(A,B) -> [fg(A',B')] 
1
#### Cost of phase [14,15,16]:fg(A,B) -> [fg(A',B')] 
3*it(14)+3*s(10)+1*s(11)+0
#### Cost of phase [14,15,16]:fg(A,B) -> [fg(A',B')] 
3*it(14)+3*s(10)+1*s(11)+0
#### Cost of chains of fg(A,B):
* Chain [[14,15,16]]...: 7*it(14)+0
  with precondition: [A>=1] 

* Chain [[14,15,16],13]: 7*it(14)+0
  with precondition: [B=0,A>=1] 

* Chain [13]: 0
  with precondition: [B=0,A>=0] 


#### Cost of chains of start(V):
* Chain [18]...: 7*s(15)+0
  with precondition: [V>=1] 

* Chain [17]: 1*s(16)+1*s(17)+2*s(20)+1*s(21)+1
  Such that:s(17) =< V
s(18) =< V+1
s(19) =< 2*V+1
s(20) =< s(18)
s(21) =< s(19)
s(17) =< s(19)
s(20) =< s(19)

  with precondition: [V>=0] 


Closed-form bounds of start(V): 
-------------------------------------
* Chain [18]... with precondition: [V>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [17] with precondition: [V>=0] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of start(V): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 22 ms.
* Invariants computed in 45 ms.
   - Backward Invariants 16 ms.
   - Transitive Invariants 13 ms.
* Refinement performed in 77 ms.
* Termination proved in 16 ms.
* Upper bounds computed in 137 ms.
   - Equation cost structures 27 ms.
   - Phase cost structures 113 ms.
   - Chain cost structures 6 ms.
   - Solving cost expressions 2 ms.
* Total analysis performed in 343 ms.



Preprocessing Cost Relations
=====================================
1. SCC does not have a single cut point : [mark/2,fun3/2]  
 Merged into markfun3/2

#### Computed strongly connected components 
0. non_recursive  : [fun/1]
2. non_recursive  : [start/4]
1. recursive [multiple] : [fun1/3,fun2/3,fun4/5,fun5/5,fun6/5,fun7/3,markfun3/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into fun/1
2. SCC is partially evaluated into start/4
1. SCC is partially evaluated into markfun3/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fun/1 
* CE 41 is refined into CE [43] 
* CE 42 is refined into CE [44] 


#### Refined cost equations fun/1 
* CE 43: fun(Out) = 1
     [Out=4] 
* CE 44: fun(Out) = 1
     [Out=3] 

### Cost equations --> "Loop" of fun/1 
* CEs [43] --> Loop 19 
* CEs [44] --> Loop 20 

#### Loops of fun/1 
* Loop 19: fun(Out) [Out=4] 
* Loop 20: fun(Out) [Out=3] 

### Ranking functions of CR fun(Out) 

#### Partial ranking functions of CR fun(Out) 


### Resulting Chains:fun(Out) 
* [20]
* [19]


### Merging Chains  fun/1 into  External patterns of execution 
* [[20]] --> 1 
* [[19]] --> 2 


### Specialization of cost equations markfun3/2 
* CE 27 is refined into CE [45] 
* CE 30 is refined into CE [46] 
* CE 40 is refined into CE [47] 
* CE 33 is refined into CE [48,49] 
* CE 37 is refined into CE [50] 
* CE 38 is refined into CE [51] 
* CE 39 is refined into CE [52] 
* CE 36 is refined into CE [53] 
* CE 22 is refined into CE [54] 
* CE 23 is refined into CE [55] 
* CE 26 is refined into CE [56] 
* CE 35 is refined into CE [57] 
* CE 16 is refined into CE [58] 
* CE 18 is refined into CE [59] 
* CE 19 is refined into CE [60] 
* CE 21 is refined into CE [61] 
* CE 29 is refined into CE [62] 
* CE 34 is refined into CE [63] 
* CE 24 is refined into CE [64] 
* CE 25 is refined into CE [65] 
* CE 32 is refined into CE [66] 
* CE 17 is refined into CE [67] 
* CE 20 is refined into CE [68] 
* CE 28 is refined into CE [69] 
* CE 31 is refined into CE [70] 


#### Refined cost equations markfun3/2 
* CE 45: markfun3(A,B) = 2
     [A+2>=B,B>=3] 
* CE 46: markfun3(A,B) = 3
     [A+2>=B,B>=3] 
* CE 47: markfun3(A,B) = 1
     [A>=0,A+1=B] 
* CE 48: markfun3(A,B) = 1+ fun(C):1
     [C=3,B=3,A=3] 
* CE 49: markfun3(A,B) = 1+ fun(C):2
     [C=4,B=4,A=3] 
* CE 50: markfun3(A,B) = 1
     [B=2,A=2] 
* CE 51: markfun3(A,B) = 1
     [B=1,A=1] 
* CE 52: markfun3(A,B) = 1
     [B=0,A=1] 
* CE 53: markfun3(A,B) = 1
     [B=0,A=0] 
* CE 54: markfun3(A,B) = 3+ markfun3(C,D)
     [A>=C+1,C>=0,B+C=A+2,D=2] 
* CE 55: markfun3(A,B) = 2+ markfun3(C,D)
     [B+C>=A,A>=C+1,C>=0,B+C=A+D] 
* CE 56: markfun3(A,B) = 4+ markfun3(C,D)
     [A>=C+1,C>=0,B+C=A+2,D=2] 
* CE 57: markfun3(A,B) = 1+ markfun3(C,D)
     [A+D>=B,B>=D+1,A+D=B+C] 
* CE 58: markfun3(A,B) = 2+ markfun3(C,D)+ markfun3(E,F)
     [F>=0,E>=0,D>=0,C>=0,D+F+1=B,C+E+1=A] 
* CE 59: markfun3(A,B) = 3+ markfun3(C,D)+ markfun3(E,F)
     [F>=1,E>=0,D>=1,C>=0,D+F+1=B,C+E+1=A] 
* CE 60: markfun3(A,B) = 5+ markfun3(C,D)+ markfun3(E,F)
     [F>=1,E>=0,D>=1,C>=0,D+F+1=B,C+E+1=A] 
* CE 61: markfun3(A,B) = 4+ markfun3(C,D)+ markfun3(E,F)
     [F>=1,E>=0,D>=1,C>=0,D+F+1=B,C+E+1=A] 
* CE 62: markfun3(A,B) = 3+ markfun3(C,D)+ markfun3(D,E)
     [A>=C+1,C>=0,E+1=B] 
* CE 63: markfun3(A,B) = 1+ markfun3(C,D)+ markfun3(D,B)
     [C>=0,C+1=A] 
* CE 64: markfun3(A,B) = 4+ markfun3(C,D)+ markfun3(E,F)
     [A+F+1>=B+E,B>=F+2,E>=0,B+C+E=A+F+1,D=2] 
* CE 65: markfun3(A,B) = 3+ markfun3(C,D)+ markfun3(E,F)
     [A+F+1>=B+E,B>=F+2,E>=0,B+C+E=A+F+1,D=2] 
* CE 66: markfun3(A,B) = 2+ markfun3(C,D)+ markfun3(E,F)
     [A+F+1>=B+E,B>=F+2,E>=0,B+C+E=A+F+1,D=2] 
* CE 67: markfun3(A,B) = 2+ markfun3(C,D)+ markfun3(E,F)
     [F>=0,E>=0,C>=0,C+E+1=A,D=0,B=1] 
* CE 68: markfun3(A,B) = 5+ markfun3(C,D)+ markfun3(E,F)+ markfun3(G,H)
     [F>=G+1,G>=0,E>=0,D>=1,C>=0,B+G=D+F+H,C+E+1=A] 
* CE 69: markfun3(A,B) = 3+ markfun3(C,D)+ markfun3(E,F)+ markfun3(F,G)
     [E>=0,C>=0,C+E+1=A,G+1=B,D=2] 
* CE 70: markfun3(A,B) = 2+ markfun3(C,D)+ markfun3(E,F)+ markfun3(F,G)
     [E>=0,C>=0,C+E+1=A,G+1=B,D=2] 

### Cost equations --> "Loop" of markfun3/2 
* CEs [68] --> Loop 21 
* CEs [69,70] --> Loop 22 
* CEs [58,59,60,61] --> Loop 23 
* CEs [62] --> Loop 24 
* CEs [63] --> Loop 25 
* CEs [64,65,66] --> Loop 26 
* CEs [67] --> Loop 27 
* CEs [54,55,56,57] --> Loop 28 
* CEs [47,49] --> Loop 29 
* CEs [45,46,48] --> Loop 30 
* CEs [50] --> Loop 31 
* CEs [51] --> Loop 32 
* CEs [52] --> Loop 33 
* CEs [53] --> Loop 34 

#### Loops of markfun3/2 
* Loop 21: markfun3(A,B)->  markfun3(A',B')  markfun3(A'2,B'2)  markfun3(A'3,B'3)
                  [B'2>=A'3+1,A>=A'+1,A'3>=0,B'>=1,A'>=0,B'+B'2+B'3=B+A'3,A'+A'2+1=A] 
* Loop 22: markfun3(A,B)->  markfun3(A',B')  markfun3(A'2,B'2)  markfun3(B'2,A'3)
                  [A>=A'+1,A'>=0,A'+A'2+1=A,B=A'3+1,B'=2] 
* Loop 23: markfun3(A,B)->  markfun3(A',B')  markfun3(A'2,B'2)
                  [B>=B'+1,A>=A'+1,B'>=0,A'>=0,B'+B'2+1=B,A'+A'2+1=A] 
* Loop 24: markfun3(A,B)->  markfun3(A',B')  markfun3(B',A'2)
                  [A>=A'+1,A'>=0,B=A'2+1] 
* Loop 25: markfun3(A,B)->  markfun3(A',B')  markfun3(B',B)
                  [A>=1,A=A'+1] 
* Loop 26: markfun3(A,B)->  markfun3(A',B')  markfun3(A'2,B'2)
                  [A>=A'+A'2+1,A'2>=0,A'>=0,B+A'+A'2=A+B'2+1,B'=2] 
* Loop 27: markfun3(A,B)->  markfun3(A',B')  markfun3(A'2,B'2)
                  [A>=A'+1,B'2>=0,A'>=0,A'+A'2+1=A,B'=0,B=1] 
* Loop 28: markfun3(A,B)->  markfun3(A',B')
                  [A+B'>=B,B>=B'+1,A+B'=B+A'] 
* Loop 29: markfun3(A,B) [A>=0,A+1=B] 
* Loop 30: markfun3(A,B) [A+2>=B,B>=3] 
* Loop 31: markfun3(A,B) [B=2,A=2] 
* Loop 32: markfun3(A,B) [B=1,A=1] 
* Loop 33: markfun3(A,B) [B=0,A=1] 
* Loop 34: markfun3(A,B) [B=0,A=0] 

### Ranking functions of CR markfun3(A,B) 

#### Partial ranking functions of CR markfun3(A,B) 
* Partial RF of phase [21,22,23,24,25,26,27,28]:
  - RF of loop [21:1,21:2,22:1,22:2,23:1,23:2,24:1,25:1,26:1,26:2,27:1,27:2,28:1]:
    A depends on loops [21:3,22:3,24:2,25:2] 


### Resulting Chains:markfun3(A,B) 
* [multiple([21,22,23,24,25,26,27,28],[[],[34],[33],[32],[31],[30],[29]])]...
* [34]
* [33]
* [32]
* [31]
* [30]
* [29]


### Merging Chains  markfun3/2 into  External patterns of execution 
* [[34]] --> 1 
* [[33]] --> 2 
* [[32]] --> 3 
* [[31]] --> 4 
* [[29]] --> 5 
* [[30]] --> 6 
* [[multiple([21,22,23,24,25,26,27,28],[[],[34],[33],[32],[31],[30],[29]])]] --> 7 


### Specialization of cost equations start/4 
* CE 2 is refined into CE [71] 
* CE 3 is refined into CE [72] 
* CE 4 is refined into CE [73] 
* CE 5 is refined into CE [74,75,76,77,78,79,80] 
* CE 6 is refined into CE [81] 
* CE 7 is refined into CE [82] 
* CE 8 is refined into CE [83,84,85,86,87,88,89] 
* CE 9 is refined into CE [90,91,92,93,94,95,96] 
* CE 10 is refined into CE [97] 
* CE 11 is refined into CE [98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120] 
* CE 12 is refined into CE [121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143] 
* CE 13 is refined into CE [144,145,146,147,148,149,150] 
* CE 14 is refined into CE [151,152] 
* CE 15 is refined into CE [153,154,155,156,157,158,159] 


#### Refined cost equations start/4 
* CE 71: start(V1,V,V2,V3) = 1
     [V>=0,V1>=0] 
* CE 72: start(V1,V,V2,V3) = 2
     [V>=1,V1>=1] 
* CE 73: start(V1,V,V2,V3) = 4
     [V>=1,V1>=1] 
* CE 74: start(V1,V,V2,V3) = 4+ markfun3(W3,X3):1
     [V>=1,V1>=1,X3=0,W3=0] 
* CE 75: start(V1,V,V2,V3) = 4+ markfun3(W3,X3):2
     [V>=2,V1>=1,X3=0,W3=1] 
* CE 76: start(V1,V,V2,V3) = 4+ markfun3(W3,X3):3
     [V>=2,V1>=1,X3=1,W3=1] 
* CE 77: start(V1,V,V2,V3) = 4+ markfun3(W3,X3):4
     [V>=3,V1>=1,X3=2,W3=2] 
* CE 78: start(V1,V,V2,V3) = 4+ markfun3(W3,X3):5
     [V>=X3,X3>=1,V1>=1,X3=W3+1] 
* CE 79: start(V1,V,V2,V3) = 4+ markfun3(W3,X3):6
     [W3+2>=X3,V>=W3+1,X3>=3,V1>=1] 
* CE 80: start(V1,V,V2,V3) = 4+ markfun3(W3,X3):7
     [V>=W3+1,W3>=1,V1>=1] 
* CE 81: start(V1,V,V2,V3) = 3
     [V>=1,V1>=1] 
* CE 82: start(V1,V,V2,V3) = 2
     [V>=0,V1=2] 
* CE 83: start(V1,V,V2,V3) = 3+ markfun3(W3,X3):1
     [V2>=0,V>=0,X3=0,W3=0,V3=0,V1=2] 
* CE 84: start(V1,V,V2,V3) = 3+ markfun3(W3,X3):2
     [V2>=0,V>=0,X3=0,W3=1,V3=1,V1=2] 
* CE 85: start(V1,V,V2,V3) = 3+ markfun3(W3,X3):3
     [V2>=0,V>=0,X3=1,W3=1,V3=1,V1=2] 
* CE 86: start(V1,V,V2,V3) = 3+ markfun3(W3,X3):4
     [V2>=0,V>=0,X3=2,W3=2,V3=2,V1=2] 
* CE 87: start(V1,V,V2,V3) = 3+ markfun3(W3,X3):5
     [X3>=1,V2>=0,V>=0,X3=W3+1,X3=V3+1,V1=2] 
* CE 88: start(V1,V,V2,V3) = 3+ markfun3(V3,W3):6
     [V3+2>=W3,W3>=3,V2>=0,V>=0,V1=2] 
* CE 89: start(V1,V,V2,V3) = 3+ markfun3(V3,W3):7
     [V3>=1,V2>=0,V>=0,V1=2] 
* CE 90: start(V1,V,V2,V3) = 2+ markfun3(W3,X3):1
     [V2>=0,V>=0,X3=0,W3=0,V3=0,V1=2] 
* CE 91: start(V1,V,V2,V3) = 2+ markfun3(W3,X3):2
     [V2>=0,V>=0,X3=0,W3=1,V3=1,V1=2] 
* CE 92: start(V1,V,V2,V3) = 2+ markfun3(W3,X3):3
     [V2>=0,V>=0,X3=1,W3=1,V3=1,V1=2] 
* CE 93: start(V1,V,V2,V3) = 2+ markfun3(W3,X3):4
     [V2>=0,V>=0,X3=2,W3=2,V3=2,V1=2] 
* CE 94: start(V1,V,V2,V3) = 2+ markfun3(W3,X3):5
     [X3>=1,V2>=0,V>=0,X3=W3+1,X3=V3+1,V1=2] 
* CE 95: start(V1,V,V2,V3) = 2+ markfun3(V3,W3):6
     [V3+2>=W3,W3>=3,V2>=0,V>=0,V1=2] 
* CE 96: start(V1,V,V2,V3) = 2+ markfun3(V3,W3):7
     [V3>=1,V2>=0,V>=0,V1=2] 
* CE 97: start(V1,V,V2,V3) = 3
     [V3>=0,V2>=0,V>=0,V1=2] 
* CE 98: start(V1,V,V2,V3) = 2+ markfun3(W3,X3):1+ markfun3(Y3,Z3):1
     [Z3=0,Y3=0,X3=0,W3=0,V=0,V1=2] 
* CE 99: start(V1,V,V2,V3) = 2+ markfun3(W3,X3):1+ markfun3(Y3,Z3):5
     [Z3=1,Y3=0,X3=0,W3=0,V=0,V1=2] 
* CE 100: start(V1,V,V2,V3) = 2+ markfun3(W3,X3):2+ markfun3(Y3,Z3):1
     [Z3=0,Y3=0,X3=0,W3=1,V=1,V1=2] 
* CE 101: start(V1,V,V2,V3) = 2+ markfun3(W3,X3):2+ markfun3(Y3,Z3):5
     [Z3=1,Y3=0,X3=0,W3=1,V=1,V1=2] 
* CE 102: start(V1,V,V2,V3) = 2+ markfun3(W3,X3):3+ markfun3(Y3,Z3):2
     [Z3=0,Y3=1,X3=1,W3=1,V=1,V1=2] 
* CE 103: start(V1,V,V2,V3) = 2+ markfun3(W3,X3):3+ markfun3(Y3,Z3):3
     [Z3=1,Y3=1,X3=1,W3=1,V=1,V1=2] 
* CE 104: start(V1,V,V2,V3) = 2+ markfun3(W3,X3):3+ markfun3(Y3,Z3):5
     [Z3=2,Y3=1,X3=1,W3=1,V=1,V1=2] 
* CE 105: start(V1,V,V2,V3) = 2+ markfun3(W3,X3):3+ markfun3(Y3,Z3):6
     [Z3=3,Y3=1,X3=1,W3=1,V=1,V1=2] 
* CE 106: start(V1,V,V2,V3) = 2+ markfun3(W3,X3):3+ markfun3(Y3,Z3):7
     [Y3=1,X3=1,W3=1,V=1,V1=2] 
* CE 107: start(V1,V,V2,V3) = 2+ markfun3(W3,X3):4+ markfun3(Y3,Z3):4
     [Z3=2,Y3=2,X3=2,W3=2,V=2,V1=2] 
* CE 108: start(V1,V,V2,V3) = 2+ markfun3(W3,X3):4+ markfun3(Y3,Z3):5
     [Z3=3,Y3=2,X3=2,W3=2,V=2,V1=2] 
* CE 109: start(V1,V,V2,V3) = 2+ markfun3(W3,X3):4+ markfun3(Y3,Z3):6
     [Z3>=3,4>=Z3,Y3=2,X3=2,W3=2,V=2,V1=2] 
* CE 110: start(V1,V,V2,V3) = 2+ markfun3(W3,X3):4+ markfun3(Y3,Z3):7
     [Y3=2,X3=2,W3=2,V=2,V1=2] 
* CE 111: start(V1,V,V2,V3) = 2+ markfun3(W3,X3):5+ markfun3(Y3,Z3):2
     [Z3=0,Y3=1,X3=1,W3=0,V=0,V1=2] 
* CE 112: start(V1,V,V2,V3) = 2+ markfun3(W3,X3):5+ markfun3(Y3,Z3):3
     [Z3=1,Y3=1,X3=1,W3=0,V=0,V1=2] 
* CE 113: start(V1,V,V2,V3) = 2+ markfun3(W3,X3):5+ markfun3(Y3,Z3):4
     [Z3=2,Y3=2,X3=2,W3=1,V=1,V1=2] 
* CE 114: start(V1,V,V2,V3) = 2+ markfun3(W3,X3):5+ markfun3(Y3,Z3):5
     [Z3>=2,Z3=Y3+1,Z3=X3+1,Z3=W3+2,Z3=V+2,V1=2] 
* CE 115: start(V1,V,V2,V3) = 2+ markfun3(W3,X3):5+ markfun3(X3,Y3):6
     [X3+2>=Y3,Y3>=3,X3=W3+1,X3=V+1,V1=2] 
* CE 116: start(V1,V,V2,V3) = 2+ markfun3(W3,X3):5+ markfun3(X3,Y3):7
     [X3>=1,X3=W3+1,X3=V+1,V1=2] 
* CE 117: start(V1,V,V2,V3) = 2+ markfun3(V,W3):6+ markfun3(X3,Y3):5
     [V+3>=Y3,Y3>=4,Y3=X3+1,Y3=W3+1,V1=2] 
* CE 118: start(V1,V,V2,V3) = 2+ markfun3(V,W3):6+ markfun3(W3,X3):6
     [W3+2>=X3,V+2>=W3,X3>=3,W3>=3,V1=2] 
* CE 119: start(V1,V,V2,V3) = 2+ markfun3(V,W3):6+ markfun3(W3,X3):7
     [V+2>=W3,W3>=3,V1=2] 
* CE 120: start(V1,V,V2,V3) = 2+ markfun3(V,W3):7
     [V>=1,V1=2] 
* CE 121: start(V1,V,V2,V3) = 1+ markfun3(W3,X3):1+ markfun3(Y3,Z3):1
     [Z3=0,Y3=0,X3=0,W3=0,V=0,V1=2] 
* CE 122: start(V1,V,V2,V3) = 1+ markfun3(W3,X3):1+ markfun3(Y3,Z3):5
     [Z3=1,Y3=0,X3=0,W3=0,V=0,V1=2] 
* CE 123: start(V1,V,V2,V3) = 1+ markfun3(W3,X3):2+ markfun3(Y3,Z3):1
     [Z3=0,Y3=0,X3=0,W3=1,V=1,V1=2] 
* CE 124: start(V1,V,V2,V3) = 1+ markfun3(W3,X3):2+ markfun3(Y3,Z3):5
     [Z3=1,Y3=0,X3=0,W3=1,V=1,V1=2] 
* CE 125: start(V1,V,V2,V3) = 1+ markfun3(W3,X3):3+ markfun3(Y3,Z3):2
     [Z3=0,Y3=1,X3=1,W3=1,V=1,V1=2] 
* CE 126: start(V1,V,V2,V3) = 1+ markfun3(W3,X3):3+ markfun3(Y3,Z3):3
     [Z3=1,Y3=1,X3=1,W3=1,V=1,V1=2] 
* CE 127: start(V1,V,V2,V3) = 1+ markfun3(W3,X3):3+ markfun3(Y3,Z3):5
     [Z3=2,Y3=1,X3=1,W3=1,V=1,V1=2] 
* CE 128: start(V1,V,V2,V3) = 1+ markfun3(W3,X3):3+ markfun3(Y3,Z3):6
     [Z3=3,Y3=1,X3=1,W3=1,V=1,V1=2] 
* CE 129: start(V1,V,V2,V3) = 1+ markfun3(W3,X3):3+ markfun3(Y3,Z3):7
     [Y3=1,X3=1,W3=1,V=1,V1=2] 
* CE 130: start(V1,V,V2,V3) = 1+ markfun3(W3,X3):4+ markfun3(Y3,Z3):4
     [Z3=2,Y3=2,X3=2,W3=2,V=2,V1=2] 
* CE 131: start(V1,V,V2,V3) = 1+ markfun3(W3,X3):4+ markfun3(Y3,Z3):5
     [Z3=3,Y3=2,X3=2,W3=2,V=2,V1=2] 
* CE 132: start(V1,V,V2,V3) = 1+ markfun3(W3,X3):4+ markfun3(Y3,Z3):6
     [Z3>=3,4>=Z3,Y3=2,X3=2,W3=2,V=2,V1=2] 
* CE 133: start(V1,V,V2,V3) = 1+ markfun3(W3,X3):4+ markfun3(Y3,Z3):7
     [Y3=2,X3=2,W3=2,V=2,V1=2] 
* CE 134: start(V1,V,V2,V3) = 1+ markfun3(W3,X3):5+ markfun3(Y3,Z3):2
     [Z3=0,Y3=1,X3=1,W3=0,V=0,V1=2] 
* CE 135: start(V1,V,V2,V3) = 1+ markfun3(W3,X3):5+ markfun3(Y3,Z3):3
     [Z3=1,Y3=1,X3=1,W3=0,V=0,V1=2] 
* CE 136: start(V1,V,V2,V3) = 1+ markfun3(W3,X3):5+ markfun3(Y3,Z3):4
     [Z3=2,Y3=2,X3=2,W3=1,V=1,V1=2] 
* CE 137: start(V1,V,V2,V3) = 1+ markfun3(W3,X3):5+ markfun3(Y3,Z3):5
     [Z3>=2,Z3=Y3+1,Z3=X3+1,Z3=W3+2,Z3=V+2,V1=2] 
* CE 138: start(V1,V,V2,V3) = 1+ markfun3(W3,X3):5+ markfun3(X3,Y3):6
     [X3+2>=Y3,Y3>=3,X3=W3+1,X3=V+1,V1=2] 
* CE 139: start(V1,V,V2,V3) = 1+ markfun3(W3,X3):5+ markfun3(X3,Y3):7
     [X3>=1,X3=W3+1,X3=V+1,V1=2] 
* CE 140: start(V1,V,V2,V3) = 1+ markfun3(V,W3):6+ markfun3(X3,Y3):5
     [V+3>=Y3,Y3>=4,Y3=X3+1,Y3=W3+1,V1=2] 
* CE 141: start(V1,V,V2,V3) = 1+ markfun3(V,W3):6+ markfun3(W3,X3):6
     [W3+2>=X3,V+2>=W3,X3>=3,W3>=3,V1=2] 
* CE 142: start(V1,V,V2,V3) = 1+ markfun3(V,W3):6+ markfun3(W3,X3):7
     [V+2>=W3,W3>=3,V1=2] 
* CE 143: start(V1,V,V2,V3) = 1+ markfun3(V,W3):7
     [V>=1,V1=2] 
* CE 144: start(V1,V,V2,V3) = 1+ markfun3(W3,X3):1
     [V2>=0,V>=0,X3=0,W3=0,V3=0,V1=2] 
* CE 145: start(V1,V,V2,V3) = 1+ markfun3(W3,X3):2
     [V2>=0,V>=0,X3=0,W3=1,V3=1,V1=2] 
* CE 146: start(V1,V,V2,V3) = 1+ markfun3(W3,X3):3
     [V2>=0,V>=0,X3=1,W3=1,V3=1,V1=2] 
* CE 147: start(V1,V,V2,V3) = 1+ markfun3(W3,X3):4
     [V2>=0,V>=0,X3=2,W3=2,V3=2,V1=2] 
* CE 148: start(V1,V,V2,V3) = 1+ markfun3(W3,X3):5
     [X3>=1,V2>=0,V>=0,X3=W3+1,X3=V3+1,V1=2] 
* CE 149: start(V1,V,V2,V3) = 1+ markfun3(V3,W3):6
     [V3+2>=W3,W3>=3,V2>=0,V>=0,V1=2] 
* CE 150: start(V1,V,V2,V3) = 1+ markfun3(V3,W3):7
     [V3>=1,V2>=0,V>=0,V1=2] 
* CE 151: start(V1,V,V2,V3) = 0+ fun(W3):1
     [W3=3] 
* CE 152: start(V1,V,V2,V3) = 0+ fun(W3):2
     [W3=4] 
* CE 153: start(V1,V,V2,V3) = 0+ markfun3(W3,X3):1
     [X3=0,W3=0,V1=0] 
* CE 154: start(V1,V,V2,V3) = 0+ markfun3(W3,X3):2
     [X3=0,W3=1,V1=1] 
* CE 155: start(V1,V,V2,V3) = 0+ markfun3(W3,X3):3
     [X3=1,W3=1,V1=1] 
* CE 156: start(V1,V,V2,V3) = 0+ markfun3(W3,X3):4
     [X3=2,W3=2,V1=2] 
* CE 157: start(V1,V,V2,V3) = 0+ markfun3(W3,X3):5
     [X3>=1,X3=W3+1,X3=V1+1] 
* CE 158: start(V1,V,V2,V3) = 0+ markfun3(V1,W3):6
     [V1+2>=W3,W3>=3] 
* CE 159: start(V1,V,V2,V3) = 0+ markfun3(V1,W3):7
     [V1>=1] 

### Cost equations --> "Loop" of start/4 
* CEs [110,133] --> Loop 35 
* CEs [80,89,96,106,116,119,120,129,139,142,143,150,159] --> Loop 36 
* CEs [71,72,73,74,75,76,77,78,79,81,82,83,84,85,86,87,88,90,91,92,93,94,95,97,98,99,100,101,102,103,104,105,107,108,109,111,112,113,114,115,117,118,121,122,123,124,125,126,127,128,130,131,132,134,135,136,137,138,140,141,144,145,146,147,148,149,151,152,153,154,155,156,157,158] --> Loop 37 

#### Loops of start/4 
* Loop 35: start(V1,V,V2,V3) [V=2,V1=2] 
* Loop 36: start(V1,V,V2,V3) [V1>=1] 
* Loop 37: start(V1,V,V2,V3) [] 

### Ranking functions of CR start(V1,V,V2,V3) 

#### Partial ranking functions of CR start(V1,V,V2,V3) 


### Resulting Chains:start(V1,V,V2,V3) 
* [37]
* [36]...
* [35]...


### Merging Chains  start/4 into  External patterns of execution 
* [[37]] --> 1 
* [[35]] --> 2 
* [[36]] --> 3 


Computing Bounds
=====================================

#### Cost of chains of fun(Out):
* Chain [20]: 1
  with precondition: [Out=3] 

* Chain [19]: 1
  with precondition: [Out=4] 


#### Cost of loops [21,22,23,24,25,26,27,28] 

 * loop 21:markfun3(A,B) -> [markfun3(A',B'),markfun3(A'2,B'2),markfun3(A'3,B'3)] 
5
 * loop 22:markfun3(A,B) -> [markfun3(A',B'),markfun3(A'2,B'2),markfun3(A'3,B'3)] 
3
 * loop 23:markfun3(A,B) -> [markfun3(A',B'),markfun3(A'2,B'2)] 
5
 * loop 24:markfun3(A,B) -> [markfun3(A',B'),markfun3(A'2,B'2)] 
3
 * loop 25:markfun3(A,B) -> [markfun3(A',B'),markfun3(A'2,B'2)] 
1
 * loop 26:markfun3(A,B) -> [markfun3(A',B'),markfun3(A'2,B'2)] 
4
 * loop 27:markfun3(A,B) -> [markfun3(A',B'),markfun3(A'2,B'2)] 
2
 * loop 28:markfun3(A,B) -> [markfun3(A',B')] 
4
#### Cost of phase [21,22,23,24,25,26,27,28]:markfun3(A,B) -> [] 
12*it(21)+21*it(23)+3*it([29])+0
#### Cost of chains of markfun3(A,B):
* Chain [multiple([21,22,23,24,25,26,27,28],[[],[34],[33],[32],[31],[30],[29]])]...: 12*it(21)+21*it(23)+3*it([29])+0
  with precondition: [A>=1] 

* Chain [34]: 1
  with precondition: [A=0,B=0] 

* Chain [33]: 1
  with precondition: [A=1,B=0] 

* Chain [32]: 1
  with precondition: [A=1,B=1] 

* Chain [31]: 1
  with precondition: [A=2,B=2] 

* Chain [30]: 3
  with precondition: [B>=3,A+2>=B] 

* Chain [29]: 2
  with precondition: [A+1=B,A>=0] 


#### Cost of chains of start(V1,V,V2,V3):
* Chain [37]: 8
  with precondition: [] 

* Chain [36]...: 1*aux(11)+0
  with precondition: [V1>=1] 

* Chain [35]...: 1*aux(12)+0
  with precondition: [V1=2,V=2] 


Closed-form bounds of start(V1,V,V2,V3): 
-------------------------------------
* Chain [37] with precondition: [] 
    - Upper bound: 8 
    - Complexity: constant 
* Chain [36]... with precondition: [V1>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [35]... with precondition: [V1=2,V=2] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of start(V1,V,V2,V3): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 74 ms.
* Invariants computed in 22 ms.
   - Backward Invariants 3 ms.
   - Transitive Invariants 7 ms.
* Refinement performed in 175 ms.
* Termination proved in 9 ms.
* Upper bounds computed in 117 ms.
   - Equation cost structures 56 ms.
   - Phase cost structures 71 ms.
   - Chain cost structures 0 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 446 ms.


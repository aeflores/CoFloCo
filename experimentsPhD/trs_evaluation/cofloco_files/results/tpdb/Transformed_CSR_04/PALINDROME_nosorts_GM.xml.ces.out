
Preprocessing Cost Relations
=====================================
1. SCC does not have a single cut point : [fun/3,mark/2]  
 Merged into funmark/3

#### Computed strongly connected components 
0. non_recursive  : [fun2/2]
2. non_recursive  : [start/2]
1. recursive [non_tail,multiple] : [fun1/3,funmark/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into fun2/2
2. SCC is partially evaluated into start/2
1. SCC is partially evaluated into funmark/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fun2/2 
* CE 17 is refined into CE [18] 
* CE 16 is refined into CE [19] 


#### Refined cost equations fun2/2 
* CE 18: fun2(V1,Out) = 1
     [V1>=0,V1+1=Out] 
* CE 19: fun2(V1,Out) = 1
     [V1>=2,Out=1] 

### Cost equations --> "Loop" of fun2/2 
* CEs [18] --> Loop 14 
* CEs [19] --> Loop 15 

#### Loops of fun2/2 
* Loop 14: fun2(V1,Out) [V1>=0,V1+1=Out] 
* Loop 15: fun2(V1,Out) [V1>=2,Out=1] 

### Ranking functions of CR fun2(V1,Out) 

#### Partial ranking functions of CR fun2(V1,Out) 


### Resulting Chains:fun2(V1,Out) 
* [15]
* [14]


### Merging Chains  fun2/2 into  External patterns of execution 
* [[15]] --> 1 
* [[14]] --> 2 


### Specialization of cost equations funmark/3 
* CE 11 is refined into CE [20] 
* CE 15 is refined into CE [21] 
* CE 14 is refined into CE [22] 
* CE 6 is refined into CE [23] 
* CE 13 is refined into CE [24,25] 
* CE 9 is refined into CE [26] 
* CE 10 is refined into CE [27] 
* CE 12 is refined into CE [28] 
* CE 8 is refined into CE [29] 
* CE 7 is refined into CE [30] 


#### Refined cost equations funmark/3 
* CE 20: funmark(A,B,C) = 1
     [B>=0,A>=0,A+B+1=C] 
* CE 21: funmark(A,B,C) = 1
     [C=1,A=1] 
* CE 22: funmark(A,B,C) = 1
     [C=0,A=0] 
* CE 23: funmark(A,B,C) = 2+ funmark(D,E,F)
     [C+D>=A,A>=D+1,D>=0,C+D=A+F] 
* CE 24: funmark(A,B,C) = 1+ funmark(D,E,F)+ fun2(F,G):1
     [D>=0,F>=2,D+1=A,G=1,C=1] 
* CE 25: funmark(A,B,C) = 1+ funmark(D,E,F)+ fun2(G,C):2
     [D>=0,C>=1,C=F+1,C=G+1,D+1=A] 
* CE 26: funmark(A,B,C) = 1+ funmark(A,D,C)
     [A>=0,B=0] 
* CE 27: funmark(A,B,C) = 1+ funmark(B,D,C)
     [B>=0,A=0] 
* CE 28: funmark(A,B,C) = 1+ funmark(D,E,F)+ funmark(G,H,I)+ funmark(F,I,C)
     [G>=0,D>=0,D+G+1=A] 
* CE 29: funmark(A,B,C) = 1+ funmark(D,E,F)+ funmark(G,H,I)+ funmark(B,J,K)+ funmark(I,K,L)+ funmark(F,L,C)
     [G>=0,D>=0,B>=0,D+G+1=A] 
* CE 30: funmark(A,B,C) = 2+ funmark(D,E,F)+ funmark(G,H,C)
     [G>=0,D>=0,D+G+1=A,F=1] 

### Cost equations --> "Loop" of funmark/3 
* CEs [30] --> Loop 16 
* CEs [29] --> Loop 17 
* CEs [28] --> Loop 18 
* CEs [23,25] --> Loop 19 
* CEs [24] --> Loop 20 
* CEs [26] --> Loop 21 
* CEs [27] --> Loop 22 
* CEs [20] --> Loop 23 
* CEs [21] --> Loop 24 
* CEs [22] --> Loop 25 

#### Loops of funmark/3 
* Loop 16: funmark(A,B,C)->  funmark(A',B',C')  funmark(A'2,B'2,C)
                  [A'2>=0,A'>=0,A'+A'2+1=A,C'=1] 
* Loop 17: funmark(A,B,C)->  funmark(A',B',C')  funmark(A'2,B'2,C'2)  funmark(B,A'3,B'3)  funmark(C'2,B'3,A'4)  funmark(C',A'4,C)
                  [A'2>=0,A'>=0,B>=0,A'+A'2+1=A] 
* Loop 18: funmark(A,B,C)->  funmark(A',B',C')  funmark(A'2,B'2,C'2)  funmark(C',C'2,C)
                  [A'2>=0,A'>=0,A'+A'2+1=A] 
* Loop 19: funmark(A,B,C)->  funmark(A',B',C')
                  [C+A'>=A,A>=A'+1,A'>=0,A+C'=C+A'] 
* Loop 20: funmark(A,B,C)->  funmark(A',B',C')
                  [C'>=2,A>=1,A=A'+1,C=1] 
* Loop 21: funmark(A,B,C)->  funmark(A,A',C)
                  [A>=0,B=0] 
* Loop 22: funmark(A,B,C)->  funmark(B,A',C)
                  [B>=0,A=0] 
* Loop 23: funmark(A,B,C) [B>=0,A>=0,A+B+1=C] 
* Loop 24: funmark(A,B,C) [C=1,A=1] 
* Loop 25: funmark(A,B,C) [C=0,A=0] 

### Ranking functions of CR funmark(A,B,C) 

#### Partial ranking functions of CR funmark(A,B,C) 
* Partial RF of phase [16,17,18,19,20,21,22]:
  - RF of loop [16:1,16:2,17:1,17:2,18:1,18:2,19:1,20:1]:
    A depends on loops [17:3,17:4,17:5,18:3,22:1] 


### Resulting Chains:funmark(A,B,C) 
* [multiple([16,17,18,19,20,21,22],[[],[25],[24],[23]])]...
* [25]
* [24]
* [23]


### Merging Chains  funmark/3 into  External patterns of execution 
* [[25]] --> 1 
* [[24]] --> 2 
* [[23]] --> 3 
* [[multiple([16,17,18,19,20,21,22],[[],[25],[24],[23]])]] --> 4 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [31] 
* CE 3 is refined into CE [32,33,34,35] 
* CE 4 is refined into CE [36,37,38,39] 
* CE 5 is refined into CE [40,41] 


#### Refined cost equations start/2 
* CE 31: start(V1,V) = 1
     [V>=0,V1>=0] 
* CE 32: start(V1,V) = 1+ funmark(W1,X1,Y1):1
     [Y1=0,W1=0,V=0,V1=1] 
* CE 33: start(V1,V) = 1+ funmark(W1,X1,Y1):2
     [Y1=1,W1=1,V=1,V1=1] 
* CE 34: start(V1,V) = 1+ funmark(V,W1,X1):3
     [X1>=V+1,V>=0,X1=V+W1+1,V1=1] 
* CE 35: start(V1,V) = 1+ funmark(V,W1,X1):4
     [V>=0,V1=1] 
* CE 36: start(V1,V) = 0+ funmark(W1,X1,Y1):1
     [Y1=0,W1=0,V1=0] 
* CE 37: start(V1,V) = 0+ funmark(W1,X1,Y1):2
     [Y1=1,W1=1,V1=1] 
* CE 38: start(V1,V) = 0+ funmark(V1,W1,X1):3
     [X1>=V1+1,V1>=0,X1=V1+W1+1] 
* CE 39: start(V1,V) = 0+ funmark(V1,W1,X1):4
     [V1>=0] 
* CE 40: start(V1,V) = 0+ fun2(V1,W1):1
     [V1>=2,W1=1] 
* CE 41: start(V1,V) = 0+ fun2(W1,X1):2
     [X1>=1,X1=W1+1,X1=V1+1] 

### Cost equations --> "Loop" of start/2 
* CEs [32,33,34,37] --> Loop 26 
* CEs [31,36,38,40,41] --> Loop 27 
* CEs [35,39] --> Loop 28 

#### Loops of start/2 
* Loop 26: start(V1,V) [V1=1] 
* Loop 27: start(V1,V) [V1>=0] 
* Loop 28: start(V1,V) [V1>=0] 

### Ranking functions of CR start(V1,V) 

#### Partial ranking functions of CR start(V1,V) 


### Resulting Chains:start(V1,V) 
* [28]...
* [27]
* [26]


### Merging Chains  start/2 into  External patterns of execution 
* [[26],[27]] --> 1 
* [[28]] --> 2 


Computing Bounds
=====================================

#### Cost of chains of fun2(V1,Out):
* Chain [15]: 1
  with precondition: [Out=1,V1>=2] 

* Chain [14]: 1
  with precondition: [V1+1=Out,V1>=0] 


#### Cost of loops [16,17,18,19,20,21,22] 

 * loop 16:funmark(A,B,C) -> [funmark(A',B',C'),funmark(A'2,B'2,C'2)] 
2
 * loop 17:funmark(A,B,C) -> [funmark(A',B',C'),funmark(A'2,B'2,C'2),funmark(A'3,B'3,C'3),funmark(A'4,B'4,C'4),funmark(A'5,B'5,C'5)] 
1
 * loop 18:funmark(A,B,C) -> [funmark(A',B',C'),funmark(A'2,B'2,C'2),funmark(A'3,B'3,C'3)] 
1
 * loop 19:funmark(A,B,C) -> [funmark(A',B',C')] 
2
 * loop 20:funmark(A,B,C) -> [funmark(A',B',C')] 
2
 * loop 21:funmark(A,B,C) -> [funmark(A',B',C')] 
1
 * loop 22:funmark(A,B,C) -> [funmark(A',B',C')] 
1
#### Cost of phase [16,17,18,19,20,21,22]:funmark(A,B,C) -> [] 
7*it(16)+4*it(17)+2*it([23])+0
#### Cost of chains of funmark(A,B,C):
* Chain [multiple([16,17,18,19,20,21,22],[[],[25],[24],[23]])]...: 7*it(16)+4*it(17)+2*it([23])+0
  with precondition: [A>=0] 

* Chain [25]: 1
  with precondition: [A=0,C=0] 

* Chain [24]: 1
  with precondition: [A=1,C=1] 

* Chain [23]: 1
  with precondition: [A+B+1=C,A>=0,B>=0] 


#### Cost of chains of start(V1,V):
* Chain [28]...: 1*aux(16)+0
  with precondition: [V1>=0] 

* Chain [27]: 1
  with precondition: [V1>=0] 

* Chain [26]: 2
  with precondition: [V1=1] 


Closed-form bounds of start(V1,V): 
-------------------------------------
* Chain [28]... with precondition: [V1>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [27] with precondition: [V1>=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [26] with precondition: [V1=1] 
    - Upper bound: 2 
    - Complexity: constant 

### Maximum cost of start(V1,V): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 43 ms.
* Invariants computed in 68 ms.
   - Backward Invariants 6 ms.
   - Transitive Invariants 21 ms.
* Refinement performed in 180 ms.
* Termination proved in 26 ms.
* Upper bounds computed in 247 ms.
   - Equation cost structures 31 ms.
   - Phase cost structures 235 ms.
   - Chain cost structures 0 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 648 ms.



Preprocessing Cost Relations
=====================================
1. SCC does not have a single cut point : [fun2/2,mark/2]  
 Merged into fun2mark/2

#### Computed strongly connected components 
0. non_recursive  : [fun/1]
2. non_recursive  : [start/2]
1. recursive [multiple] : [fun1/3,fun2mark/2,fun3/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into fun/1
2. SCC is partially evaluated into start/2
1. SCC is partially evaluated into fun2mark/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fun/1 
* CE 21 is refined into CE [23] 
* CE 22 is refined into CE [24] 


#### Refined cost equations fun/1 
* CE 23: fun(Out) = 1
     [Out=4] 
* CE 24: fun(Out) = 1
     [Out=3] 

### Cost equations --> "Loop" of fun/1 
* CEs [23] --> Loop 17 
* CEs [24] --> Loop 18 

#### Loops of fun/1 
* Loop 17: fun(Out) [Out=4] 
* Loop 18: fun(Out) [Out=3] 

### Ranking functions of CR fun(Out) 

#### Partial ranking functions of CR fun(Out) 


### Resulting Chains:fun(Out) 
* [18]
* [17]


### Merging Chains  fun/1 into  External patterns of execution 
* [[18]] --> 1 
* [[17]] --> 2 


### Specialization of cost equations fun2mark/2 
* CE 14 is refined into CE [25] 
* CE 15 is refined into CE [26,27] 
* CE 19 is refined into CE [28] 
* CE 20 is refined into CE [29] 
* CE 12 is refined into CE [30] 
* CE 18 is refined into CE [31] 
* CE 10 is refined into CE [32] 
* CE 17 is refined into CE [33] 
* CE 7 is refined into CE [34] 
* CE 13 is refined into CE [35] 
* CE 16 is refined into CE [36] 
* CE 11 is refined into CE [37] 
* CE 9 is refined into CE [38] 
* CE 8 is refined into CE [39] 


#### Refined cost equations fun2mark/2 
* CE 25: fun2mark(A,B) = 1
     [A>=0,A+1=B] 
* CE 26: fun2mark(A,B) = 1+ fun(C):1
     [C=3,B=3,A=3] 
* CE 27: fun2mark(A,B) = 1+ fun(C):2
     [C=4,B=4,A=3] 
* CE 28: fun2mark(A,B) = 1
     [B=2,A=2] 
* CE 29: fun2mark(A,B) = 1
     [B=1,A=1] 
* CE 30: fun2mark(A,B) = 1
     [B=0,A=1] 
* CE 31: fun2mark(A,B) = 1
     [B=0,A=0] 
* CE 32: fun2mark(A,B) = 2+ fun2mark(C,D)
     [B+C>=A,A>=C+1,C>=0,B+C=A+D] 
* CE 33: fun2mark(A,B) = 1+ fun2mark(C,D)
     [A+D>=B,B>=D+1,A+D=B+C] 
* CE 34: fun2mark(A,B) = 2+ fun2mark(C,D)+ fun2mark(E,F)
     [F>=0,E>=0,D>=0,C>=0,D+F+1=B,C+E+1=A] 
* CE 35: fun2mark(A,B) = 1+ fun2mark(C,D)+ fun2mark(D,E)
     [A>=C+1,C>=0,E+1=B] 
* CE 36: fun2mark(A,B) = 1+ fun2mark(C,D)+ fun2mark(D,B)
     [C>=0,C+1=A] 
* CE 37: fun2mark(A,B) = 2+ fun2mark(C,D)+ fun2mark(E,B)
     [E>=0,C>=0,C+E+1=A,D=2] 
* CE 38: fun2mark(A,B) = 2+ fun2mark(C,D)+ fun2mark(E,F)
     [F>=0,E>=0,C>=0,C+E+1=A,D=0,B=1] 
* CE 39: fun2mark(A,B) = 2+ fun2mark(C,D)+ fun2mark(E,F)+ fun2mark(G,H)
     [B+G>=F+H+1,F>=G+1,G>=0,E>=0,C>=0,D+F+H=B+G,C+E+1=A] 

### Cost equations --> "Loop" of fun2mark/2 
* CEs [39] --> Loop 19 
* CEs [34] --> Loop 20 
* CEs [35] --> Loop 21 
* CEs [36] --> Loop 22 
* CEs [37] --> Loop 23 
* CEs [38] --> Loop 24 
* CEs [32,33] --> Loop 25 
* CEs [25,27] --> Loop 26 
* CEs [26] --> Loop 27 
* CEs [28] --> Loop 28 
* CEs [29] --> Loop 29 
* CEs [30] --> Loop 30 
* CEs [31] --> Loop 31 

#### Loops of fun2mark/2 
* Loop 19: fun2mark(A,B)->  fun2mark(A',B')  fun2mark(A'2,B'2)  fun2mark(A'3,B'3)
                  [B+A'3>=B'2+B'3+1,B'2>=A'3+1,A'3>=0,A'2>=0,A'>=0,B+A'3=B'+B'2+B'3,A'+A'2+1=A] 
* Loop 20: fun2mark(A,B)->  fun2mark(A',B')  fun2mark(A'2,B'2)
                  [B>=B'+1,A>=A'+1,B'>=0,A'>=0,B'+B'2+1=B,A'+A'2+1=A] 
* Loop 21: fun2mark(A,B)->  fun2mark(A',B')  fun2mark(B',A'2)
                  [A>=A'+1,A'>=0,B=A'2+1] 
* Loop 22: fun2mark(A,B)->  fun2mark(A',B')  fun2mark(B',B)
                  [A>=1,A=A'+1] 
* Loop 23: fun2mark(A,B)->  fun2mark(A',B')  fun2mark(A'2,B)
                  [A>=A'+1,A'>=0,A'+A'2+1=A,B'=2] 
* Loop 24: fun2mark(A,B)->  fun2mark(A',B')  fun2mark(A'2,B'2)
                  [A>=A'+1,B'2>=0,A'>=0,A'+A'2+1=A,B'=0,B=1] 
* Loop 25: fun2mark(A,B)->  fun2mark(A',B')
                  [A+B'>=B,B>=B'+1,A+B'=B+A'] 
* Loop 26: fun2mark(A,B) [A>=0,A+1=B] 
* Loop 27: fun2mark(A,B) [B=3,A=3] 
* Loop 28: fun2mark(A,B) [B=2,A=2] 
* Loop 29: fun2mark(A,B) [B=1,A=1] 
* Loop 30: fun2mark(A,B) [B=0,A=1] 
* Loop 31: fun2mark(A,B) [B=0,A=0] 

### Ranking functions of CR fun2mark(A,B) 

#### Partial ranking functions of CR fun2mark(A,B) 
* Partial RF of phase [19,20,21,22,23,24,25]:
  - RF of loop [19:1,19:2,20:1,20:2,21:1,22:1,23:1,23:2,24:1,24:2,25:1]:
    A depends on loops [19:3,21:2,22:2] 


### Resulting Chains:fun2mark(A,B) 
* [multiple([19,20,21,22,23,24,25],[[],[31],[30],[29],[28],[27],[26]])]...
* [31]
* [30]
* [29]
* [28]
* [27]
* [26]


### Merging Chains  fun2mark/2 into  External patterns of execution 
* [[31]] --> 1 
* [[30]] --> 2 
* [[29]] --> 3 
* [[28]] --> 4 
* [[27]] --> 5 
* [[26]] --> 6 
* [[multiple([19,20,21,22,23,24,25],[[],[31],[30],[29],[28],[27],[26]])]] --> 7 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [40] 
* CE 3 is refined into CE [41,42,43,44,45,46,47] 
* CE 4 is refined into CE [48,49,50,51,52,53,54] 
* CE 5 is refined into CE [55,56] 
* CE 6 is refined into CE [57,58,59,60,61,62,63] 


#### Refined cost equations start/2 
* CE 40: start(V1,V) = 1
     [V>=0,V1>=0] 
* CE 41: start(V1,V) = 1+ fun2mark(W1,X1):1
     [V>=1,V1>=1,X1=0,W1=0] 
* CE 42: start(V1,V) = 1+ fun2mark(W1,X1):2
     [V>=2,V1>=1,X1=0,W1=1] 
* CE 43: start(V1,V) = 1+ fun2mark(W1,X1):3
     [V>=2,V1>=1,X1=1,W1=1] 
* CE 44: start(V1,V) = 1+ fun2mark(W1,X1):4
     [V>=3,V1>=1,X1=2,W1=2] 
* CE 45: start(V1,V) = 1+ fun2mark(W1,X1):5
     [V>=4,V1>=1,X1=3,W1=3] 
* CE 46: start(V1,V) = 1+ fun2mark(W1,X1):6
     [V>=X1,X1>=1,V1>=1,X1=W1+1] 
* CE 47: start(V1,V) = 1+ fun2mark(W1,X1):7
     [V>=W1+1,W1>=1,V1>=1] 
* CE 48: start(V1,V) = 1+ fun2mark(W1,X1):1
     [X1=0,W1=0,V=0,V1=2] 
* CE 49: start(V1,V) = 1+ fun2mark(W1,X1):2
     [X1=0,W1=1,V=1,V1=2] 
* CE 50: start(V1,V) = 1+ fun2mark(W1,X1):3
     [X1=1,W1=1,V=1,V1=2] 
* CE 51: start(V1,V) = 1+ fun2mark(W1,X1):4
     [X1=2,W1=2,V=2,V1=2] 
* CE 52: start(V1,V) = 1+ fun2mark(W1,X1):5
     [X1=3,W1=3,V=3,V1=2] 
* CE 53: start(V1,V) = 1+ fun2mark(W1,X1):6
     [X1>=1,X1=W1+1,X1=V+1,V1=2] 
* CE 54: start(V1,V) = 1+ fun2mark(V,W1):7
     [V>=1,V1=2] 
* CE 55: start(V1,V) = 0+ fun(W1):1
     [W1=3] 
* CE 56: start(V1,V) = 0+ fun(W1):2
     [W1=4] 
* CE 57: start(V1,V) = 0+ fun2mark(W1,X1):1
     [X1=0,W1=0,V1=0] 
* CE 58: start(V1,V) = 0+ fun2mark(W1,X1):2
     [X1=0,W1=1,V1=1] 
* CE 59: start(V1,V) = 0+ fun2mark(W1,X1):3
     [X1=1,W1=1,V1=1] 
* CE 60: start(V1,V) = 0+ fun2mark(W1,X1):4
     [X1=2,W1=2,V1=2] 
* CE 61: start(V1,V) = 0+ fun2mark(W1,X1):5
     [X1=3,W1=3,V1=3] 
* CE 62: start(V1,V) = 0+ fun2mark(W1,X1):6
     [X1>=1,X1=W1+1,X1=V1+1] 
* CE 63: start(V1,V) = 0+ fun2mark(V1,W1):7
     [V1>=1] 

### Cost equations --> "Loop" of start/2 
* CEs [47,54,63] --> Loop 32 
* CEs [40,41,42,43,44,45,46,48,49,50,51,52,53,55,56,57,58,59,60,61,62] --> Loop 33 

#### Loops of start/2 
* Loop 32: start(V1,V) [V1>=1] 
* Loop 33: start(V1,V) [] 

### Ranking functions of CR start(V1,V) 

#### Partial ranking functions of CR start(V1,V) 


### Resulting Chains:start(V1,V) 
* [33]
* [32]...


### Merging Chains  start/2 into  External patterns of execution 
* [[33]] --> 1 
* [[32]] --> 2 


Computing Bounds
=====================================

#### Cost of chains of fun(Out):
* Chain [18]: 1
  with precondition: [Out=3] 

* Chain [17]: 1
  with precondition: [Out=4] 


#### Cost of loops [19,20,21,22,23,24,25] 

 * loop 19:fun2mark(A,B) -> [fun2mark(A',B'),fun2mark(A'2,B'2),fun2mark(A'3,B'3)] 
2
 * loop 20:fun2mark(A,B) -> [fun2mark(A',B'),fun2mark(A'2,B'2)] 
2
 * loop 21:fun2mark(A,B) -> [fun2mark(A',B'),fun2mark(A'2,B'2)] 
1
 * loop 22:fun2mark(A,B) -> [fun2mark(A',B'),fun2mark(A'2,B'2)] 
1
 * loop 23:fun2mark(A,B) -> [fun2mark(A',B'),fun2mark(A'2,B'2)] 
2
 * loop 24:fun2mark(A,B) -> [fun2mark(A',B'),fun2mark(A'2,B'2)] 
2
 * loop 25:fun2mark(A,B) -> [fun2mark(A',B')] 
2
#### Cost of phase [19,20,21,22,23,24,25]:fun2mark(A,B) -> [] 
4*it(19)+13*it(20)+3*it([26])+0
#### Cost of chains of fun2mark(A,B):
* Chain [multiple([19,20,21,22,23,24,25],[[],[31],[30],[29],[28],[27],[26]])]...: 4*it(19)+13*it(20)+3*it([26])+0
  with precondition: [A>=1] 

* Chain [31]: 1
  with precondition: [A=0,B=0] 

* Chain [30]: 1
  with precondition: [A=1,B=0] 

* Chain [29]: 1
  with precondition: [A=1,B=1] 

* Chain [28]: 1
  with precondition: [A=2,B=2] 

* Chain [27]: 2
  with precondition: [A=3,B=3] 

* Chain [26]: 2
  with precondition: [A+1=B,A>=0] 


#### Cost of chains of start(V1,V):
* Chain [33]: 3
  with precondition: [] 

* Chain [32]...: 1*aux(9)+0
  with precondition: [V1>=1] 


Closed-form bounds of start(V1,V): 
-------------------------------------
* Chain [33] with precondition: [] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [32]... with precondition: [V1>=1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of start(V1,V): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 21 ms.
* Invariants computed in 21 ms.
   - Backward Invariants 2 ms.
   - Transitive Invariants 7 ms.
* Refinement performed in 71 ms.
* Termination proved in 8 ms.
* Upper bounds computed in 63 ms.
   - Equation cost structures 15 ms.
   - Phase cost structures 52 ms.
   - Chain cost structures 0 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 222 ms.



Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [fun3/2]
1. non_recursive  : [fun1/2]
2. non_recursive  : [fun2/1]
3. non_recursive  : [fun/1]
4. recursive [non_tail,multiple] : [fun4/2,fun5/2,mark/2]
5. non_recursive  : [start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into fun3/2
1. SCC is partially evaluated into fun1/2
2. SCC is partially evaluated into fun2/1
3. SCC is partially evaluated into fun/1
4. SCC is partially evaluated into mark/2
5. SCC is partially evaluated into start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fun3/2 
* CE 22 is refined into CE [25] 
* CE 21 is refined into CE [26] 


#### Refined cost equations fun3/2 
* CE 25: fun3(V,Out) = 1
     [V>=0,V+1=Out] 
* CE 26: fun3(V,Out) = 1
     [V>=1,V+2=Out] 

### Cost equations --> "Loop" of fun3/2 
* CEs [25] --> Loop 15 
* CEs [26] --> Loop 16 

#### Loops of fun3/2 
* Loop 15: fun3(V,Out) [V>=0,V+1=Out] 
* Loop 16: fun3(V,Out) [V>=1,V+2=Out] 

### Ranking functions of CR fun3(V,Out) 

#### Partial ranking functions of CR fun3(V,Out) 


### Resulting Chains:fun3(V,Out) 
* [16]
* [15]


### Merging Chains  fun3/2 into  External patterns of execution 
* [[16]] --> 1 
* [[15]] --> 2 


### Specialization of cost equations fun1/2 
* CE 23 is refined into CE [27,28] 
* CE 24 is refined into CE [29] 


#### Refined cost equations fun1/2 
* CE 27: fun1(V,Out) = 1+ fun3(W,Out):1
     [Out>=4,Out=W+2,Out=V+3] 
* CE 28: fun1(V,Out) = 1+ fun3(W,Out):2
     [Out>=3,Out=W+1,Out=V+2] 
* CE 29: fun1(V,Out) = 1
     [V>=0,V+1=Out] 

### Cost equations --> "Loop" of fun1/2 
* CEs [29] --> Loop 17 
* CEs [28] --> Loop 18 
* CEs [27] --> Loop 19 

#### Loops of fun1/2 
* Loop 17: fun1(V,Out) [V>=0,V+1=Out] 
* Loop 18: fun1(V,Out) [V>=1,V+2=Out] 
* Loop 19: fun1(V,Out) [V>=1,V+3=Out] 

### Ranking functions of CR fun1(V,Out) 

#### Partial ranking functions of CR fun1(V,Out) 


### Resulting Chains:fun1(V,Out) 
* [19]
* [18]
* [17]


### Merging Chains  fun1/2 into  External patterns of execution 
* [[19]] --> 1 
* [[18]] --> 2 
* [[17]] --> 3 


### Specialization of cost equations fun2/1 
* CE 19 is refined into CE [30] 
* CE 20 is refined into CE [31] 


#### Refined cost equations fun2/1 
* CE 30: fun2(Out) = 1
     [Out=3] 
* CE 31: fun2(Out) = 1
     [Out=2] 

### Cost equations --> "Loop" of fun2/1 
* CEs [30] --> Loop 20 
* CEs [31] --> Loop 21 

#### Loops of fun2/1 
* Loop 20: fun2(Out) [Out=3] 
* Loop 21: fun2(Out) [Out=2] 

### Ranking functions of CR fun2(Out) 

#### Partial ranking functions of CR fun2(Out) 


### Resulting Chains:fun2(Out) 
* [21]
* [20]


### Merging Chains  fun2/1 into  External patterns of execution 
* [[21]] --> 1 
* [[20]] --> 2 


### Specialization of cost equations fun/1 
* CE 17 is refined into CE [32,33,34,35,36,37] 
* CE 18 is refined into CE [38] 


#### Refined cost equations fun/1 
* CE 32: fun(Out) = 1+ fun2(B):1+ fun1(C,D):1
     [D=5,C=2,B=2,Out=5] 
* CE 33: fun(Out) = 1+ fun2(B):1+ fun1(C,D):2
     [D=4,C=2,B=2,Out=4] 
* CE 34: fun(Out) = 1+ fun2(B):1+ fun1(C,D):3
     [D=3,C=2,B=2,Out=3] 
* CE 35: fun(Out) = 1+ fun2(B):2+ fun1(C,D):1
     [D=6,C=3,B=3,Out=6] 
* CE 36: fun(Out) = 1+ fun2(B):2+ fun1(C,D):2
     [D=5,C=3,B=3,Out=5] 
* CE 37: fun(Out) = 1+ fun2(B):2+ fun1(C,D):3
     [D=4,C=3,B=3,Out=4] 
* CE 38: fun(Out) = 1
     [Out=1] 

### Cost equations --> "Loop" of fun/1 
* CEs [35] --> Loop 22 
* CEs [32,36] --> Loop 23 
* CEs [33,37] --> Loop 24 
* CEs [34] --> Loop 25 
* CEs [38] --> Loop 26 

#### Loops of fun/1 
* Loop 22: fun(Out) [Out=6] 
* Loop 23: fun(Out) [Out=5] 
* Loop 24: fun(Out) [Out=4] 
* Loop 25: fun(Out) [Out=3] 
* Loop 26: fun(Out) [Out=1] 

### Ranking functions of CR fun(Out) 

#### Partial ranking functions of CR fun(Out) 


### Resulting Chains:fun(Out) 
* [26]
* [25]
* [24]
* [23]
* [22]


### Merging Chains  fun/1 into  External patterns of execution 
* [[26]] --> 1 
* [[25]] --> 2 
* [[24]] --> 3 
* [[23]] --> 4 
* [[22]] --> 5 


### Specialization of cost equations mark/2 
* CE 15 is refined into CE [39] 
* CE 13 is refined into CE [40,41] 
* CE 11 is refined into CE [42,43,44,45,46] 
* CE 16 is refined into CE [47] 
* CE 9 is refined into CE [48] 
* CE 12 is refined into CE [49,50,51] 
* CE 14 is refined into CE [52,53] 
* CE 10 is refined into CE [54] 


#### Refined cost equations mark/2 
* CE 39: mark(A,A) = 1
     [A>=1] 
* CE 40: mark(V,Out) = 1+ fun2(W):1
     [W=2,Out=2,V=2] 
* CE 41: mark(V,Out) = 1+ fun2(W):2
     [W=3,Out=3,V=2] 
* CE 42: mark(V,Out) = 1+ fun(W):1
     [W=1,Out=1,V=1] 
* CE 43: mark(V,Out) = 1+ fun(W):2
     [W=3,Out=3,V=1] 
* CE 44: mark(V,Out) = 1+ fun(W):3
     [W=4,Out=4,V=1] 
* CE 45: mark(V,Out) = 1+ fun(W):4
     [W=5,Out=5,V=1] 
* CE 46: mark(V,Out) = 1+ fun(W):5
     [W=6,Out=6,V=1] 
* CE 47: mark(V,Out) = 1
     [Out=0,V=0] 
* CE 48: mark(V,Out) = 2+ mark(W,X)
     [X>=0,W>=0,X+1=Out,W+1=V] 
* CE 49: mark(V,Out) = 1+ mark(W,X)+ fun1(Y,Out):1
     [W>=0,Out>=4,Out=X+3,Out=Y+3,W+1=V] 
* CE 50: mark(V,Out) = 1+ mark(W,X)+ fun1(Y,Out):2
     [W>=0,Out>=3,Out=X+2,Out=Y+2,W+1=V] 
* CE 51: mark(V,Out) = 1+ mark(W,X)+ fun1(Y,Out):3
     [W>=0,Out>=1,Out=X+1,Out=Y+1,W+1=V] 
* CE 52: mark(V,Out) = 1+ mark(W,X)+ fun3(Y,Out):1
     [W>=0,Out>=3,Out=X+2,Out=Y+2,W+1=V] 
* CE 53: mark(V,Out) = 1+ mark(W,X)+ fun3(Y,Out):2
     [W>=0,Out>=1,Out=X+1,Out=Y+1,W+1=V] 
* CE 54: mark(V,Out) = 2+ mark(W,X)+ mark(Y,Out)
     [X>=Y+1,Y>=0,W>=0,W+1=V] 

### Cost equations --> "Loop" of mark/2 
* CEs [54] --> Loop 27 
* CEs [49] --> Loop 28 
* CEs [50,52] --> Loop 29 
* CEs [48,51,53] --> Loop 30 
* CEs [41] --> Loop 31 
* CEs [40] --> Loop 32 
* CEs [46] --> Loop 33 
* CEs [45] --> Loop 34 
* CEs [44] --> Loop 35 
* CEs [43] --> Loop 36 
* CEs [39,42] --> Loop 37 
* CEs [47] --> Loop 38 

#### Loops of mark/2 
* Loop 27: mark(V,Out)->  mark(V',Out')  mark(V'2,Out)
                  [Out'>=V'2+1,V'2>=0,V'>=0,V'+1=V] 
* Loop 28: mark(V,Out)->  mark(V',Out')
                  [Out>=4,V>=1,Out=Out'+3,V=V'+1] 
* Loop 29: mark(V,Out)->  mark(V',Out')
                  [Out>=3,V>=1,Out=Out'+2,V=V'+1] 
* Loop 30: mark(V,Out)->  mark(V',Out')
                  [Out>=1,V>=1,Out=Out'+1,V=V'+1] 
* Loop 31: mark(V,Out) [Out=3,V=2] 
* Loop 32: mark(V,Out) [Out=2,V=2] 
* Loop 33: mark(V,Out) [Out=6,V=1] 
* Loop 34: mark(V,Out) [Out=5,V=1] 
* Loop 35: mark(V,Out) [Out=4,V=1] 
* Loop 36: mark(V,Out) [Out=3,V=1] 
* Loop 37: mark(A,A) [A>=1] 
* Loop 38: mark(V,Out) [Out=0,V=0] 

### Ranking functions of CR mark(V,Out) 

#### Partial ranking functions of CR mark(V,Out) 
* Partial RF of phase [27,28,29,30]:
  - RF of loop [27:1,28:1,29:1,30:1]:
    V depends on loops [27:2] 


### Resulting Chains:mark(V,Out) 
* [multiple([27,28,29,30],[[],[38],[37],[36],[35],[34],[33],[32],[31]])]...
* [38]
* [37]
* [36]
* [35]
* [34]
* [33]
* [32]
* [31]


### Merging Chains  mark/2 into  External patterns of execution 
* [[38]] --> 1 
* [[36]] --> 2 
* [[35]] --> 3 
* [[34]] --> 4 
* [[33]] --> 5 
* [[32],[37]] --> 6 
* [[31]] --> 7 
* [[multiple([27,28,29,30],[[],[38],[37],[36],[35],[34],[33],[32],[31]])]] --> 8 


### Specialization of cost equations start/1 
* CE 2 is refined into CE [55] 
* CE 3 is refined into CE [56,57,58,59,60,61,62,63] 
* CE 4 is refined into CE [64,65,66,67,68] 
* CE 5 is refined into CE [69,70] 
* CE 6 is refined into CE [71,72] 
* CE 7 is refined into CE [73,74,75] 
* CE 8 is refined into CE [76,77,78,79,80,81,82,83] 


#### Refined cost equations start/1 
* CE 55: start(V) = 1
     [V>=0] 
* CE 56: start(V) = 1+ mark(W,X):1
     [V>=1,X=0,W=0] 
* CE 57: start(V) = 1+ mark(W,X):2
     [V>=2,X=3,W=1] 
* CE 58: start(V) = 1+ mark(W,X):3
     [V>=2,X=4,W=1] 
* CE 59: start(V) = 1+ mark(W,X):4
     [V>=2,X=5,W=1] 
* CE 60: start(V) = 1+ mark(W,X):5
     [V>=2,X=6,W=1] 
* CE 61: start(V) = 1+ mark(W,W):6
     [V>=W+1,W>=1] 
* CE 62: start(V) = 1+ mark(W,X):7
     [V>=3,X=3,W=2] 
* CE 63: start(V) = 1+ mark(W,X):8
     [V>=W+1,W>=1] 
* CE 64: start(V) = 0+ fun(W):1
     [W=1] 
* CE 65: start(V) = 0+ fun(W):2
     [W=3] 
* CE 66: start(V) = 0+ fun(W):3
     [W=4] 
* CE 67: start(V) = 0+ fun(W):4
     [W=5] 
* CE 68: start(V) = 0+ fun(W):5
     [W=6] 
* CE 69: start(V) = 0+ fun2(W):1
     [W=2] 
* CE 70: start(V) = 0+ fun2(W):2
     [W=3] 
* CE 71: start(V) = 0+ fun3(W,X):1
     [X>=3,X=W+2,X=V+2] 
* CE 72: start(V) = 0+ fun3(W,X):2
     [X>=1,X=W+1,X=V+1] 
* CE 73: start(V) = 0+ fun1(W,X):1
     [X>=4,X=W+3,X=V+3] 
* CE 74: start(V) = 0+ fun1(W,X):2
     [X>=3,X=W+2,X=V+2] 
* CE 75: start(V) = 0+ fun1(W,X):3
     [X>=1,X=W+1,X=V+1] 
* CE 76: start(V) = 0+ mark(W,X):1
     [X=0,W=0,V=0] 
* CE 77: start(V) = 0+ mark(W,X):2
     [X=3,W=1,V=1] 
* CE 78: start(V) = 0+ mark(W,X):3
     [X=4,W=1,V=1] 
* CE 79: start(V) = 0+ mark(W,X):4
     [X=5,W=1,V=1] 
* CE 80: start(V) = 0+ mark(W,X):5
     [X=6,W=1,V=1] 
* CE 81: start(V) = 0+ mark(V,V):6
     [V>=1] 
* CE 82: start(V) = 0+ mark(W,X):7
     [X=3,W=2,V=2] 
* CE 83: start(V) = 0+ mark(V,W):8
     [V>=1] 

### Cost equations --> "Loop" of start/1 
* CEs [63,83] --> Loop 39 
* CEs [55,56,57,58,59,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82] --> Loop 40 

#### Loops of start/1 
* Loop 39: start(V) [V>=1] 
* Loop 40: start(V) [] 

### Ranking functions of CR start(V) 

#### Partial ranking functions of CR start(V) 


### Resulting Chains:start(V) 
* [40]
* [39]...


### Merging Chains  start/1 into  External patterns of execution 
* [[40]] --> 1 
* [[39]] --> 2 


Computing Bounds
=====================================

#### Cost of chains of fun3(V,Out):
* Chain [16]: 1
  with precondition: [V+2=Out,V>=1] 

* Chain [15]: 1
  with precondition: [V+1=Out,V>=0] 


#### Cost of chains of fun1(V,Out):
* Chain [19]: 2
  with precondition: [V+3=Out,V>=1] 

* Chain [18]: 2
  with precondition: [V+2=Out,V>=1] 

* Chain [17]: 1
  with precondition: [V+1=Out,V>=0] 


#### Cost of chains of fun2(Out):
* Chain [21]: 1
  with precondition: [Out=2] 

* Chain [20]: 1
  with precondition: [Out=3] 


#### Cost of chains of fun(Out):
* Chain [26]: 1
  with precondition: [Out=1] 

* Chain [25]: 3
  with precondition: [Out=3] 

* Chain [24]: 4
  with precondition: [Out=4] 

* Chain [23]: 4
  with precondition: [Out=5] 

* Chain [22]: 4
  with precondition: [Out=6] 


#### Cost of loops [27,28,29,30] 

 * loop 27:mark(V,Out) -> [mark(V',Out'),mark(V'2,Out'2)] 
2
 * loop 28:mark(V,Out) -> [mark(V',Out')] 
3
 * loop 29:mark(V,Out) -> [mark(V',Out')] 
3
 * loop 30:mark(V,Out) -> [mark(V',Out')] 
2
#### Cost of phase [27,28,29,30]:mark(V,Out) -> [] 
2*it(27)+8*it(28)+25*it([31])+1*it([38])+0
#### Cost of chains of mark(V,Out):
* Chain [multiple([27,28,29,30],[[],[38],[37],[36],[35],[34],[33],[32],[31]])]...: 2*it(27)+8*it(28)+25*it([31])+1*it([38])+0
  with precondition: [V>=1] 

* Chain [38]: 1
  with precondition: [V=0,Out=0] 

* Chain [37]: 2
  with precondition: [V=Out,V>=1] 

* Chain [36]: 4
  with precondition: [V=1,Out=3] 

* Chain [35]: 5
  with precondition: [V=1,Out=4] 

* Chain [34]: 5
  with precondition: [V=1,Out=5] 

* Chain [33]: 5
  with precondition: [V=1,Out=6] 

* Chain [32]: 2
  with precondition: [V=2,Out=2] 

* Chain [31]: 2
  with precondition: [V=2,Out=3] 


#### Cost of chains of start(V):
* Chain [40]: 6
  with precondition: [] 

* Chain [39]...: 1*aux(13)+0
  with precondition: [V>=1] 


Closed-form bounds of start(V): 
-------------------------------------
* Chain [40] with precondition: [] 
    - Upper bound: 6 
    - Complexity: constant 
* Chain [39]... with precondition: [V>=1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of start(V): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 42 ms.
* Invariants computed in 42 ms.
   - Backward Invariants 14 ms.
   - Transitive Invariants 7 ms.
* Refinement performed in 188 ms.
* Termination proved in 11 ms.
* Upper bounds computed in 146 ms.
   - Equation cost structures 61 ms.
   - Phase cost structures 91 ms.
   - Chain cost structures 0 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 498 ms.


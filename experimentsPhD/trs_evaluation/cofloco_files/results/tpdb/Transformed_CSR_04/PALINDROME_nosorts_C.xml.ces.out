
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [and/3]
1. recursive  : [fun/3]
2. recursive  : [isNePal/2]
3. non_recursive  : [proper/2]
4. recursive  : [top/2]
5. non_recursive  : [start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into and/3
1. SCC is partially evaluated into fun/3
2. SCC is partially evaluated into isNePal/2
3. SCC is partially evaluated into proper/2
4. SCC is partially evaluated into top/2
5. SCC is partially evaluated into start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations and/3 
* CE 21 is refined into CE [22] 
* CE 19 is refined into CE [23] 
* CE 20 is refined into CE [24] 


#### Refined cost equations and/3 
* CE 22: and(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 23: and(V,V1,Out) = 1+ and(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 24: and(V,V1,Out) = 1+ and(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of and/3 
* CEs [23] --> Loop 16 
* CEs [24] --> Loop 17 
* CEs [22] --> Loop 18 

#### Loops of and/3 
* Loop 16: and(V,V1,Out)->  and(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 17: and(V,V1,Out)->  and(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 18: and(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR and(V,V1,Out) 
* RF of phase [16,17]: [V]

#### Partial ranking functions of CR and(V,V1,Out) 
* Partial RF of phase [16,17]:
  - RF of loop [16:1,17:1]:
    V
  - RF of loop [17:1]:
    V1


### Resulting Chains:and(V,V1,Out) 
* [[16,17],18]
* [18]


### Merging Chains  and/3 into  External patterns of execution 
* [[18]] --> 1 
* [[18,[16,17]]] --> 2 


### Specialization of cost equations fun/3 
* CE 18 is refined into CE [25] 
* CE 15 is refined into CE [26] 
* CE 17 is refined into CE [27] 
* CE 16 is refined into CE [28] 


#### Refined cost equations fun/3 
* CE 25: fun(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 26: fun(V,V1,Out) = 1+ fun(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 27: fun(V,V1,Out) = 1+ fun(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 28: fun(V,V1,Out) = 1+ fun(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun/3 
* CEs [26] --> Loop 19 
* CEs [27] --> Loop 20 
* CEs [28] --> Loop 21 
* CEs [25] --> Loop 22 

#### Loops of fun/3 
* Loop 19: fun(V,V1,Out)->  fun(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 20: fun(V,V1,Out)->  fun(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 21: fun(V,V1,Out)->  fun(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 22: fun(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun(V,V1,Out) 
* RF of phase [19,20,21]: [V+V1]

#### Partial ranking functions of CR fun(V,V1,Out) 
* Partial RF of phase [19,20,21]:
  - RF of loop [19:1,21:1]:
    V1
  - RF of loop [20:1,21:1]:
    V


### Resulting Chains:fun(V,V1,Out) 
* [[19,20,21],22]
* [22]


### Merging Chains  fun/3 into  External patterns of execution 
* [[22]] --> 1 
* [[22,[19,20,21]]] --> 2 


### Specialization of cost equations isNePal/2 
* CE 14 is refined into CE [29] 
* CE 13 is refined into CE [30] 


#### Refined cost equations isNePal/2 
* CE 29: isNePal(V,Out) = 0
     [V>=0,Out=0] 
* CE 30: isNePal(V,Out) = 1+ isNePal(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of isNePal/2 
* CEs [30] --> Loop 23 
* CEs [29] --> Loop 24 

#### Loops of isNePal/2 
* Loop 23: isNePal(V,Out)->  isNePal(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 24: isNePal(V,Out) [V>=0,Out=0] 

### Ranking functions of CR isNePal(V,Out) 
* RF of phase [23]: [V]

#### Partial ranking functions of CR isNePal(V,Out) 
* Partial RF of phase [23]:
  - RF of loop [23:1]:
    V


### Resulting Chains:isNePal(V,Out) 
* [[23],24]
* [24]


### Merging Chains  isNePal/2 into  External patterns of execution 
* [[24]] --> 1 
* [[24,[23]]] --> 2 


### Specialization of cost equations proper/2 
* CE 12 is refined into CE [31] 
* CE 11 is refined into CE [32] 
* CE 10 is refined into CE [33] 


#### Refined cost equations proper/2 
* CE 31: proper(V,Out) = 0
     [V>=0,Out=0] 
* CE 32: proper(V,Out) = 1
     [Out=2,V=1] 
* CE 33: proper(V,Out) = 1
     [Out=1,V=0] 

### Cost equations --> "Loop" of proper/2 
* CEs [31] --> Loop 25 
* CEs [32] --> Loop 26 
* CEs [33] --> Loop 27 

#### Loops of proper/2 
* Loop 25: proper(V,Out) [V>=0,Out=0] 
* Loop 26: proper(V,Out) [Out=2,V=1] 
* Loop 27: proper(V,Out) [Out=1,V=0] 

### Ranking functions of CR proper(V,Out) 

#### Partial ranking functions of CR proper(V,Out) 


### Resulting Chains:proper(V,Out) 
* [27]
* [26]
* [25]


### Merging Chains  proper/2 into  External patterns of execution 
* [[27]] --> 1 
* [[26]] --> 2 
* [[25]] --> 3 


### Specialization of cost equations top/2 
* CE 9 is refined into CE [34] 
* CE 7 is refined into CE [35] 
* CE 8 is refined into CE [36,37,38] 


#### Refined cost equations top/2 
* CE 34: top(V,Out) = 0
     [V>=0,Out=0] 
* CE 35: top(V,Out) = 1+ top(V,Out)
     [V>=1] 
* CE 36: top(V,Out) = 1+ proper(W,X):1+ top(Y,Out)
     [Y=1,X=1,W=0,V=1] 
* CE 37: top(V,Out) = 1+ proper(W,X):2+ top(Y,Out)
     [Y=2,X=2,W=1,V=2] 
* CE 38: top(V,Out) = 1+ proper(W,X):3+ top(Y,Out)
     [W>=0,W+1=V,Y=0,X=0] 

### Cost equations --> "Loop" of top/2 
* CEs [38] --> Loop 28 
* CEs [37] --> Loop 29 
* CEs [35,36] --> Loop 30 
* CEs [34] --> Loop 31 

#### Loops of top/2 
* Loop 28: top(V,Out)->  top(V',Out)
                  [V>=1,V'=0] 
* Loop 29: top(V,Out)->  top(V',Out)
                  [V'=2,V=2] 
* Loop 30: top(V,Out)->  top(V,Out)
                  [V>=1] 
* Loop 31: top(V,Out) [V>=0,Out=0] 

### Ranking functions of CR top(V,Out) 

#### Partial ranking functions of CR top(V,Out) 


### Resulting Chains:top(V,Out) 
* [[29,30]]...
* [[29,30],31]
* [[29,30],28,31]
* [31]
* [28,31]


### Merging Chains  top/2 into  External patterns of execution 
* [[31,28],[31],[31,28,[29,30]],[31,[29,30]]] --> 1 
* [[[29,30]]] --> 2 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [39,40] 
* CE 3 is refined into CE [41,42,43] 
* CE 4 is refined into CE [44,45] 
* CE 5 is refined into CE [46,47] 
* CE 6 is refined into CE [48,49] 


#### Refined cost equations start/2 
* CE 39: start(V,V1) = 0+ top(V,W1):1
     [V>=0,W1=0] 
* CE 40: start(V,V1) = 0+ top(V,W1):2
     [V>=1] 
* CE 41: start(V,V1) = 0+ proper(W1,X1):1
     [X1=1,W1=0,V=0] 
* CE 42: start(V,V1) = 0+ proper(W1,X1):2
     [X1=2,W1=1,V=1] 
* CE 43: start(V,V1) = 0+ proper(V,W1):3
     [V>=0,W1=0] 
* CE 44: start(V,V1) = 0+ isNePal(V,W1):1
     [V>=0,W1=0] 
* CE 45: start(V,V1) = 0+ isNePal(V,W1):2
     [V>=W1,W1>=1] 
* CE 46: start(V,V1) = 0+ fun(V,V1,W1):1
     [V1>=0,V>=0,W1=0] 
* CE 47: start(V,V1) = 0+ fun(V,V1,W1):2
     [V+V1>=W1,W1>=1,V1>=0,V>=0] 
* CE 48: start(V,V1) = 0+ and(V,V1,W1):1
     [V1>=0,V>=0,W1=0] 
* CE 49: start(V,V1) = 0+ and(V,V1,W1):2
     [V>=W1,W1>=1,V1>=0] 

### Cost equations --> "Loop" of start/2 
* CEs [42] --> Loop 32 
* CEs [39,41,43,44,45,46,47,48,49] --> Loop 33 
* CEs [40] --> Loop 34 

#### Loops of start/2 
* Loop 32: start(V,V1) [V=1] 
* Loop 33: start(V,V1) [V>=0] 
* Loop 34: start(V,V1) [V>=1] 

### Ranking functions of CR start(V,V1) 

#### Partial ranking functions of CR start(V,V1) 


### Resulting Chains:start(V,V1) 
* [34]...
* [33]
* [32]


### Merging Chains  start/2 into  External patterns of execution 
* [[32],[33]] --> 1 
* [[34]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [16,17] 

 * loop 16:and(V,V1,Out) -> [and(V',V1',Out')] 
1
 * loop 17:and(V,V1,Out) -> [and(V',V1',Out')] 
1
#### Cost of phase [16,17]:and(V,V1,Out) -> [and(V',V1',Out')] 
1*it(16)+1*it(17)+0
  Such that:it(17) =< V1
it(17) =< V1-V1'
aux(1) =< V
aux(2) =< V-V'
it(16) =< aux(1)
it(17) =< aux(1)
it(16) =< aux(2)
it(17) =< aux(2)

#### Cost of chains of and(V,V1,Out):
* Chain [[16,17],18]: 1*it(16)+1*it(17)+0
  Such that:aux(1) =< V
it(17) =< V1
aux(2) =< Out
it(16) =< aux(1)
it(17) =< aux(1)
it(16) =< aux(2)
it(17) =< aux(2)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [18]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [19,20,21] 

 * loop 19:fun(V,V1,Out) -> [fun(V',V1',Out')] 
1
 * loop 20:fun(V,V1,Out) -> [fun(V',V1',Out')] 
1
 * loop 21:fun(V,V1,Out) -> [fun(V',V1',Out')] 
1
#### Cost of phase [19,20,21]:fun(V,V1,Out) -> [fun(V',V1',Out')] 
1*it(19)+1*it(20)+1*it(21)+0
  Such that:aux(3) =< V
aux(4) =< V+V1
aux(5) =< V+V1-V'-V1'
aux(6) =< V-V'
aux(7) =< V1
aux(8) =< V1-V1'
it(20) =< aux(3)
it(21) =< aux(3)
it(19) =< aux(4)
it(20) =< aux(4)
it(21) =< aux(4)
it(19) =< aux(5)
it(20) =< aux(5)
it(21) =< aux(5)
it(20) =< aux(6)
it(21) =< aux(6)
it(19) =< aux(7)
it(21) =< aux(7)
it(19) =< aux(8)
it(21) =< aux(8)

#### Cost of chains of fun(V,V1,Out):
* Chain [[19,20,21],22]: 1*it(19)+1*it(20)+1*it(21)+0
  Such that:aux(9) =< V
aux(10) =< V+V1
aux(11) =< V1
it(20) =< aux(9)
it(21) =< aux(9)
it(19) =< aux(10)
it(20) =< aux(10)
it(21) =< aux(10)
it(19) =< aux(11)
it(21) =< aux(11)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [22]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [23] 

 * loop 23:isNePal(V,Out) -> [isNePal(V',Out')] 
1
#### Cost of phase [23]:isNePal(V,Out) -> [isNePal(V',Out')] 
1*it(23)+0
  Such that:it(23) =< V
it(23) =< V-V'

#### Cost of chains of isNePal(V,Out):
* Chain [[23],24]: 1*it(23)+0
  Such that:it(23) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [24]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of chains of proper(V,Out):
* Chain [27]: 1
  with precondition: [V=0,Out=1] 

* Chain [26]: 1
  with precondition: [V=1,Out=2] 

* Chain [25]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [29,30] 

 * loop 29:top(V,Out) -> [top(V',Out')] 
2
 * loop 30:top(V,Out) -> [top(V',Out')] 
2
#### Cost of phase [29,30]:top(V,Out) -> [top(V',Out')] 
4*it(29)+0
#### Cost of phase [29,30]:top(V,Out) -> [top(V',Out')] 
4*it(29)+0
#### Cost of phase [29,30]:top(V,Out) -> [top(V',Out')] 
4*it(29)+0
#### Cost of chains of top(V,Out):
* Chain [[29,30]]...: 4*it(29)+0
  with precondition: [V>=1] 

* Chain [[29,30],31]: 4*it(29)+0
  with precondition: [Out=0,V>=1] 

* Chain [[29,30],28,31]: 4*it(29)+1
  with precondition: [Out=0,V>=1] 

* Chain [31]: 0
  with precondition: [Out=0,V>=0] 

* Chain [28,31]: 1
  with precondition: [Out=0,V>=1] 


#### Cost of chains of start(V,V1):
* Chain [34]...: 4*s(3)+0
  with precondition: [V>=1] 

* Chain [33]: 1*s(4)+2*s(5)+1*s(9)+1*s(10)+1*s(11)+1*s(13)+1
  Such that:s(7) =< V+V1
aux(14) =< V
aux(15) =< V1
s(5) =< aux(14)
s(13) =< aux(15)
s(9) =< aux(14)
s(10) =< aux(14)
s(11) =< s(7)
s(9) =< s(7)
s(10) =< s(7)
s(11) =< aux(15)
s(10) =< aux(15)
s(13) =< aux(14)

  with precondition: [V>=0] 

* Chain [32]: 1
  with precondition: [V=1] 


Closed-form bounds of start(V,V1): 
-------------------------------------
* Chain [34]... with precondition: [V>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [33] with precondition: [V>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [32] with precondition: [V=1] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V,V1): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 36 ms.
* Invariants computed in 98 ms.
   - Backward Invariants 42 ms.
   - Transitive Invariants 24 ms.
* Refinement performed in 165 ms.
* Termination proved in 29 ms.
* Upper bounds computed in 163 ms.
   - Equation cost structures 54 ms.
   - Phase cost structures 67 ms.
   - Chain cost structures 48 ms.
   - Solving cost expressions 3 ms.
* Total analysis performed in 569 ms.


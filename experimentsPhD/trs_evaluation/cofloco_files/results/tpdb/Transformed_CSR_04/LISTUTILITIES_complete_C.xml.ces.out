
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [afterNth/3]
1. recursive  : [and/3]
2. recursive  : [cons/3]
3. recursive  : [fst/2]
4. recursive  : [fun/4]
5. recursive  : [fun1/2]
6. recursive  : [fun10/2]
7. recursive  : [fun11/2]
8. recursive  : [fun12/5]
9. recursive  : [fun13/2]
10. recursive  : [fun14/2]
11. recursive  : [fun15/3]
12. recursive  : [fun16/3]
13. recursive  : [fun17/3]
14. recursive  : [fun18/2]
15. recursive  : [fun19/2]
16. recursive  : [fun2/3]
17. recursive  : [fun20/3]
18. recursive  : [fun21/3]
19. recursive  : [fun22/4]
20. recursive  : [fun23/2]
21. recursive  : [fun24/4]
22. recursive  : [fun25/4]
23. recursive  : [fun26/3]
24. recursive  : [fun27/4]
25. recursive  : [fun28/4]
26. recursive  : [fun29/3]
27. recursive  : [fun3/2]
28. recursive  : [fun30/3]
29. recursive  : [fun31/3]
30. recursive  : [fun32/2]
31. recursive  : [fun33/4]
32. recursive  : [fun34/3]
33. recursive  : [fun35/3]
34. recursive  : [fun36/2]
35. recursive  : [fun37/3]
36. recursive  : [fun38/2]
37. recursive  : [fun39/3]
38. recursive  : [fun4/3]
39. recursive  : [fun40/3]
40. recursive  : [fun5/4]
41. recursive  : [fun6/3]
42. recursive  : [fun7/3]
43. recursive  : [fun8/3]
44. recursive  : [fun9/4]
45. recursive  : [head/2]
46. recursive  : [isLNat/2]
47. recursive  : [isLNatKind/2]
48. recursive  : [isNatural/2]
49. recursive  : [isNaturalKind/2]
50. recursive  : [isPLNat/2]
51. recursive  : [isPLNatKind/2]
52. recursive  : [natsFrom/2]
53. recursive  : [pair/3]
54. non_recursive  : [proper/2]
55. recursive  : [s/2]
56. recursive  : [sel/3]
57. recursive  : [snd/2]
58. recursive  : [splitAt/3]
59. recursive  : [tail/2]
60. recursive  : [take/3]
61. recursive  : [top/2]
62. non_recursive  : [start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into afterNth/3
1. SCC is partially evaluated into and/3
2. SCC is partially evaluated into cons/3
3. SCC is partially evaluated into fst/2
4. SCC is partially evaluated into fun/4
5. SCC is partially evaluated into fun1/2
6. SCC is partially evaluated into fun10/2
7. SCC is partially evaluated into fun11/2
8. SCC is partially evaluated into fun12/5
9. SCC is partially evaluated into fun13/2
10. SCC is partially evaluated into fun14/2
11. SCC is partially evaluated into fun15/3
12. SCC is partially evaluated into fun16/3
13. SCC is partially evaluated into fun17/3
14. SCC is partially evaluated into fun18/2
15. SCC is partially evaluated into fun19/2
16. SCC is partially evaluated into fun2/3
17. SCC is partially evaluated into fun20/3
18. SCC is partially evaluated into fun21/3
19. SCC is partially evaluated into fun22/4
20. SCC is partially evaluated into fun23/2
21. SCC is partially evaluated into fun24/4
22. SCC is partially evaluated into fun25/4
23. SCC is partially evaluated into fun26/3
24. SCC is partially evaluated into fun27/4
25. SCC is partially evaluated into fun28/4
26. SCC is partially evaluated into fun29/3
27. SCC is partially evaluated into fun3/2
28. SCC is partially evaluated into fun30/3
29. SCC is partially evaluated into fun31/3
30. SCC is partially evaluated into fun32/2
31. SCC is partially evaluated into fun33/4
32. SCC is partially evaluated into fun34/3
33. SCC is partially evaluated into fun35/3
34. SCC is partially evaluated into fun36/2
35. SCC is partially evaluated into fun37/3
36. SCC is partially evaluated into fun38/2
37. SCC is partially evaluated into fun39/3
38. SCC is partially evaluated into fun4/3
39. SCC is partially evaluated into fun40/3
40. SCC is partially evaluated into fun5/4
41. SCC is partially evaluated into fun6/3
42. SCC is partially evaluated into fun7/3
43. SCC is partially evaluated into fun8/3
44. SCC is partially evaluated into fun9/4
45. SCC is partially evaluated into head/2
46. SCC is partially evaluated into isLNat/2
47. SCC is partially evaluated into isLNatKind/2
48. SCC is partially evaluated into isNatural/2
49. SCC is partially evaluated into isNaturalKind/2
50. SCC is partially evaluated into isPLNat/2
51. SCC is partially evaluated into isPLNatKind/2
52. SCC is partially evaluated into natsFrom/2
53. SCC is partially evaluated into pair/3
54. SCC is partially evaluated into proper/2
55. SCC is partially evaluated into s/2
56. SCC is partially evaluated into sel/3
57. SCC is partially evaluated into snd/2
58. SCC is partially evaluated into splitAt/3
59. SCC is partially evaluated into tail/2
60. SCC is partially evaluated into take/3
61. SCC is partially evaluated into top/2
62. SCC is partially evaluated into start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations afterNth/3 
* CE 131 is refined into CE [232] 
* CE 129 is refined into CE [233] 
* CE 130 is refined into CE [234] 
* CE 128 is refined into CE [235] 


#### Refined cost equations afterNth/3 
* CE 232: afterNth(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 233: afterNth(V,V1,Out) = 1+ afterNth(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 234: afterNth(V,V1,Out) = 1+ afterNth(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 235: afterNth(V,V1,Out) = 1+ afterNth(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of afterNth/3 
* CEs [233] --> Loop 169 
* CEs [234] --> Loop 170 
* CEs [235] --> Loop 171 
* CEs [232] --> Loop 172 

#### Loops of afterNth/3 
* Loop 169: afterNth(V,V1,Out)->  afterNth(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 170: afterNth(V,V1,Out)->  afterNth(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 171: afterNth(V,V1,Out)->  afterNth(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 172: afterNth(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR afterNth(V,V1,Out) 
* RF of phase [169,170,171]: [V+V1]

#### Partial ranking functions of CR afterNth(V,V1,Out) 
* Partial RF of phase [169,170,171]:
  - RF of loop [169:1,171:1]:
    V1
  - RF of loop [170:1,171:1]:
    V


### Resulting Chains:afterNth(V,V1,Out) 
* [[169,170,171],172]
* [172]


### Merging Chains  afterNth/3 into  External patterns of execution 
* [[172]] --> 1 
* [[172,[169,170,171]]] --> 2 


### Specialization of cost equations and/3 
* CE 166 is refined into CE [236] 
* CE 164 is refined into CE [237] 
* CE 165 is refined into CE [238] 


#### Refined cost equations and/3 
* CE 236: and(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 237: and(V,V1,Out) = 1+ and(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 238: and(V,V1,Out) = 1+ and(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of and/3 
* CEs [237] --> Loop 173 
* CEs [238] --> Loop 174 
* CEs [236] --> Loop 175 

#### Loops of and/3 
* Loop 173: and(V,V1,Out)->  and(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 174: and(V,V1,Out)->  and(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 175: and(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR and(V,V1,Out) 
* RF of phase [173,174]: [V]

#### Partial ranking functions of CR and(V,V1,Out) 
* Partial RF of phase [173,174]:
  - RF of loop [173:1,174:1]:
    V
  - RF of loop [174:1]:
    V1


### Resulting Chains:and(V,V1,Out) 
* [[173,174],175]
* [175]


### Merging Chains  and/3 into  External patterns of execution 
* [[175]] --> 1 
* [[175,[173,174]]] --> 2 


### Specialization of cost equations cons/3 
* CE 181 is refined into CE [239] 
* CE 179 is refined into CE [240] 
* CE 180 is refined into CE [241] 


#### Refined cost equations cons/3 
* CE 239: cons(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 240: cons(V,V1,Out) = 1+ cons(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 241: cons(V,V1,Out) = 1+ cons(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of cons/3 
* CEs [240] --> Loop 176 
* CEs [241] --> Loop 177 
* CEs [239] --> Loop 178 

#### Loops of cons/3 
* Loop 176: cons(V,V1,Out)->  cons(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 177: cons(V,V1,Out)->  cons(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 178: cons(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR cons(V,V1,Out) 
* RF of phase [176,177]: [V]

#### Partial ranking functions of CR cons(V,V1,Out) 
* Partial RF of phase [176,177]:
  - RF of loop [176:1,177:1]:
    V
  - RF of loop [177:1]:
    V1


### Resulting Chains:cons(V,V1,Out) 
* [[176,177],178]
* [178]


### Merging Chains  cons/3 into  External patterns of execution 
* [[178]] --> 1 
* [[178,[176,177]]] --> 2 


### Specialization of cost equations fst/2 
* CE 127 is refined into CE [242] 
* CE 126 is refined into CE [243] 


#### Refined cost equations fst/2 
* CE 242: fst(V,Out) = 0
     [V>=0,Out=0] 
* CE 243: fst(V,Out) = 1+ fst(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of fst/2 
* CEs [243] --> Loop 179 
* CEs [242] --> Loop 180 

#### Loops of fst/2 
* Loop 179: fst(V,Out)->  fst(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 180: fst(V,Out) [V>=0,Out=0] 

### Ranking functions of CR fst(V,Out) 
* RF of phase [179]: [V]

#### Partial ranking functions of CR fst(V,Out) 
* Partial RF of phase [179]:
  - RF of loop [179:1]:
    V


### Resulting Chains:fst(V,Out) 
* [[179],180]
* [180]


### Merging Chains  fst/2 into  External patterns of execution 
* [[180]] --> 1 
* [[180,[179]]] --> 2 


### Specialization of cost equations fun/4 
* CE 69 is refined into CE [244] 
* CE 68 is refined into CE [245] 
* CE 67 is refined into CE [246] 


#### Refined cost equations fun/4 
* CE 244: fun(V,V1,V2,Out) = 0
     [V2>=0,V1>=0,V>=0,Out=0] 
* CE 245: fun(V,V1,V2,Out) = 1+ fun(W2,V1,V2,X2)
     [W2>=0,V2>=0,V1>=0,X2+1=Out,W2+1=V] 
* CE 246: fun(V,V1,V2,Out) = 1+ fun(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V1,W2+1=V] 

### Cost equations --> "Loop" of fun/4 
* CEs [245] --> Loop 181 
* CEs [246] --> Loop 182 
* CEs [244] --> Loop 183 

#### Loops of fun/4 
* Loop 181: fun(V,V1,V2,Out)->  fun(V',V1,V2,Out')
                  [V2>=0,V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 182: fun(V,V1,V2,Out)->  fun(V',V1',V2',Out')
                  [V2>=1,V1>=1,V>=1,Out=Out'+1,V2=V2'+1,V1=V1'+1,V=V'+1] 
* Loop 183: fun(V,V1,V2,Out) [V2>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun(V,V1,V2,Out) 
* RF of phase [181,182]: [V]

#### Partial ranking functions of CR fun(V,V1,V2,Out) 
* Partial RF of phase [181,182]:
  - RF of loop [181:1,182:1]:
    V
  - RF of loop [182:1]:
    V1
    V2


### Resulting Chains:fun(V,V1,V2,Out) 
* [[181,182],183]
* [183]


### Merging Chains  fun/4 into  External patterns of execution 
* [[183]] --> 1 
* [[183,[181,182]]] --> 2 


### Specialization of cost equations fun1/2 
* CE 71 is refined into CE [247] 
* CE 70 is refined into CE [248] 


#### Refined cost equations fun1/2 
* CE 247: fun1(V,Out) = 0
     [V>=0,Out=0] 
* CE 248: fun1(V,Out) = 1+ fun1(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of fun1/2 
* CEs [248] --> Loop 184 
* CEs [247] --> Loop 185 

#### Loops of fun1/2 
* Loop 184: fun1(V,Out)->  fun1(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 185: fun1(V,Out) [V>=0,Out=0] 

### Ranking functions of CR fun1(V,Out) 
* RF of phase [184]: [V]

#### Partial ranking functions of CR fun1(V,Out) 
* Partial RF of phase [184]:
  - RF of loop [184:1]:
    V


### Resulting Chains:fun1(V,Out) 
* [[184],185]
* [185]


### Merging Chains  fun1/2 into  External patterns of execution 
* [[185]] --> 1 
* [[185,[184]]] --> 2 


### Specialization of cost equations fun10/2 
* CE 110 is refined into CE [249] 
* CE 109 is refined into CE [250] 


#### Refined cost equations fun10/2 
* CE 249: fun10(V,Out) = 0
     [V>=0,Out=0] 
* CE 250: fun10(V,Out) = 1+ fun10(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of fun10/2 
* CEs [250] --> Loop 186 
* CEs [249] --> Loop 187 

#### Loops of fun10/2 
* Loop 186: fun10(V,Out)->  fun10(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 187: fun10(V,Out) [V>=0,Out=0] 

### Ranking functions of CR fun10(V,Out) 
* RF of phase [186]: [V]

#### Partial ranking functions of CR fun10(V,Out) 
* Partial RF of phase [186]:
  - RF of loop [186:1]:
    V


### Resulting Chains:fun10(V,Out) 
* [[186],187]
* [187]


### Merging Chains  fun10/2 into  External patterns of execution 
* [[187]] --> 1 
* [[187,[186]]] --> 2 


### Specialization of cost equations fun11/2 
* CE 112 is refined into CE [251] 
* CE 111 is refined into CE [252] 


#### Refined cost equations fun11/2 
* CE 251: fun11(V,Out) = 0
     [V>=0,Out=0] 
* CE 252: fun11(V,Out) = 1+ fun11(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of fun11/2 
* CEs [252] --> Loop 188 
* CEs [251] --> Loop 189 

#### Loops of fun11/2 
* Loop 188: fun11(V,Out)->  fun11(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 189: fun11(V,Out) [V>=0,Out=0] 

### Ranking functions of CR fun11(V,Out) 
* RF of phase [188]: [V]

#### Partial ranking functions of CR fun11(V,Out) 
* Partial RF of phase [188]:
  - RF of loop [188:1]:
    V


### Resulting Chains:fun11(V,Out) 
* [[188],189]
* [189]


### Merging Chains  fun11/2 into  External patterns of execution 
* [[189]] --> 1 
* [[189,[188]]] --> 2 


### Specialization of cost equations fun12/5 
* CE 115 is refined into CE [253] 
* CE 114 is refined into CE [254] 
* CE 113 is refined into CE [255] 


#### Refined cost equations fun12/5 
* CE 253: fun12(V,V1,V2,V3,Out) = 0
     [V3>=0,V2>=0,V1>=0,V>=0,Out=0] 
* CE 254: fun12(V,V1,V2,V3,Out) = 1+ fun12(W3,V1,V2,V3,X3)
     [W3>=0,V3>=0,V2>=0,V1>=0,X3+1=Out,W3+1=V] 
* CE 255: fun12(V,V1,V2,V3,Out) = 1+ fun12(W3,X3,Y3,Z3,A4)
     [Z3>=0,Y3>=0,X3>=0,W3>=0,A4+1=Out,Z3+1=V3,Y3+1=V2,X3+1=V1,W3+1=V] 

### Cost equations --> "Loop" of fun12/5 
* CEs [254] --> Loop 190 
* CEs [255] --> Loop 191 
* CEs [253] --> Loop 192 

#### Loops of fun12/5 
* Loop 190: fun12(V,V1,V2,V3,Out)->  fun12(V',V1,V2,V3,Out')
                  [V3>=0,V2>=0,V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 191: fun12(V,V1,V2,V3,Out)->  fun12(V',V1',V2',V3',Out')
                  [V3>=1,V2>=1,V1>=1,V>=1,Out=Out'+1,V3=V3'+1,V2=V2'+1,V1=V1'+1,V=V'+1] 
* Loop 192: fun12(V,V1,V2,V3,Out) [V3>=0,V2>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun12(V,V1,V2,V3,Out) 
* RF of phase [190,191]: [V]

#### Partial ranking functions of CR fun12(V,V1,V2,V3,Out) 
* Partial RF of phase [190,191]:
  - RF of loop [190:1,191:1]:
    V
  - RF of loop [191:1]:
    V1
    V2
    V3


### Resulting Chains:fun12(V,V1,V2,V3,Out) 
* [[190,191],192]
* [192]


### Merging Chains  fun12/5 into  External patterns of execution 
* [[192]] --> 1 
* [[192,[190,191]]] --> 2 


### Specialization of cost equations fun13/2 
* CE 121 is refined into CE [256] 
* CE 120 is refined into CE [257] 


#### Refined cost equations fun13/2 
* CE 256: fun13(V,Out) = 0
     [V>=0,Out=0] 
* CE 257: fun13(V,Out) = 1+ fun13(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of fun13/2 
* CEs [257] --> Loop 193 
* CEs [256] --> Loop 194 

#### Loops of fun13/2 
* Loop 193: fun13(V,Out)->  fun13(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 194: fun13(V,Out) [V>=0,Out=0] 

### Ranking functions of CR fun13(V,Out) 
* RF of phase [193]: [V]

#### Partial ranking functions of CR fun13(V,Out) 
* Partial RF of phase [193]:
  - RF of loop [193:1]:
    V


### Resulting Chains:fun13(V,Out) 
* [[193],194]
* [194]


### Merging Chains  fun13/2 into  External patterns of execution 
* [[194]] --> 1 
* [[194,[193]]] --> 2 


### Specialization of cost equations fun14/2 
* CE 125 is refined into CE [258] 
* CE 124 is refined into CE [259] 


#### Refined cost equations fun14/2 
* CE 258: fun14(V,Out) = 0
     [V>=0,Out=0] 
* CE 259: fun14(V,Out) = 1+ fun14(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of fun14/2 
* CEs [259] --> Loop 195 
* CEs [258] --> Loop 196 

#### Loops of fun14/2 
* Loop 195: fun14(V,Out)->  fun14(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 196: fun14(V,Out) [V>=0,Out=0] 

### Ranking functions of CR fun14(V,Out) 
* RF of phase [195]: [V]

#### Partial ranking functions of CR fun14(V,Out) 
* Partial RF of phase [195]:
  - RF of loop [195:1]:
    V


### Resulting Chains:fun14(V,Out) 
* [[195],196]
* [196]


### Merging Chains  fun14/2 into  External patterns of execution 
* [[196]] --> 1 
* [[196,[195]]] --> 2 


### Specialization of cost equations fun15/3 
* CE 136 is refined into CE [260] 
* CE 135 is refined into CE [261] 
* CE 134 is refined into CE [262] 


#### Refined cost equations fun15/3 
* CE 260: fun15(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 261: fun15(V,V1,Out) = 1+ fun15(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 262: fun15(V,V1,Out) = 1+ fun15(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun15/3 
* CEs [261] --> Loop 197 
* CEs [262] --> Loop 198 
* CEs [260] --> Loop 199 

#### Loops of fun15/3 
* Loop 197: fun15(V,V1,Out)->  fun15(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 198: fun15(V,V1,Out)->  fun15(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 199: fun15(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun15(V,V1,Out) 
* RF of phase [197,198]: [V]

#### Partial ranking functions of CR fun15(V,V1,Out) 
* Partial RF of phase [197,198]:
  - RF of loop [197:1,198:1]:
    V
  - RF of loop [198:1]:
    V1


### Resulting Chains:fun15(V,V1,Out) 
* [[197,198],199]
* [199]


### Merging Chains  fun15/3 into  External patterns of execution 
* [[199]] --> 1 
* [[199,[197,198]]] --> 2 


### Specialization of cost equations fun16/3 
* CE 141 is refined into CE [263] 
* CE 140 is refined into CE [264] 
* CE 139 is refined into CE [265] 


#### Refined cost equations fun16/3 
* CE 263: fun16(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 264: fun16(V,V1,Out) = 1+ fun16(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 265: fun16(V,V1,Out) = 1+ fun16(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun16/3 
* CEs [264] --> Loop 200 
* CEs [265] --> Loop 201 
* CEs [263] --> Loop 202 

#### Loops of fun16/3 
* Loop 200: fun16(V,V1,Out)->  fun16(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 201: fun16(V,V1,Out)->  fun16(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 202: fun16(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun16(V,V1,Out) 
* RF of phase [200,201]: [V]

#### Partial ranking functions of CR fun16(V,V1,Out) 
* Partial RF of phase [200,201]:
  - RF of loop [200:1,201:1]:
    V
  - RF of loop [201:1]:
    V1


### Resulting Chains:fun16(V,V1,Out) 
* [[200,201],202]
* [202]


### Merging Chains  fun16/3 into  External patterns of execution 
* [[202]] --> 1 
* [[202,[200,201]]] --> 2 


### Specialization of cost equations fun17/3 
* CE 144 is refined into CE [266] 
* CE 142 is refined into CE [267] 
* CE 143 is refined into CE [268] 


#### Refined cost equations fun17/3 
* CE 266: fun17(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 267: fun17(V,V1,Out) = 1+ fun17(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 268: fun17(V,V1,Out) = 1+ fun17(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun17/3 
* CEs [267] --> Loop 203 
* CEs [268] --> Loop 204 
* CEs [266] --> Loop 205 

#### Loops of fun17/3 
* Loop 203: fun17(V,V1,Out)->  fun17(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 204: fun17(V,V1,Out)->  fun17(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 205: fun17(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun17(V,V1,Out) 
* RF of phase [203,204]: [V]

#### Partial ranking functions of CR fun17(V,V1,Out) 
* Partial RF of phase [203,204]:
  - RF of loop [203:1,204:1]:
    V
  - RF of loop [204:1]:
    V1


### Resulting Chains:fun17(V,V1,Out) 
* [[203,204],205]
* [205]


### Merging Chains  fun17/3 into  External patterns of execution 
* [[205]] --> 1 
* [[205,[203,204]]] --> 2 


### Specialization of cost equations fun18/2 
* CE 146 is refined into CE [269] 
* CE 145 is refined into CE [270] 


#### Refined cost equations fun18/2 
* CE 269: fun18(V,Out) = 0
     [V>=0,Out=0] 
* CE 270: fun18(V,Out) = 1+ fun18(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of fun18/2 
* CEs [270] --> Loop 206 
* CEs [269] --> Loop 207 

#### Loops of fun18/2 
* Loop 206: fun18(V,Out)->  fun18(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 207: fun18(V,Out) [V>=0,Out=0] 

### Ranking functions of CR fun18(V,Out) 
* RF of phase [206]: [V]

#### Partial ranking functions of CR fun18(V,Out) 
* Partial RF of phase [206]:
  - RF of loop [206:1]:
    V


### Resulting Chains:fun18(V,Out) 
* [[206],207]
* [207]


### Merging Chains  fun18/2 into  External patterns of execution 
* [[207]] --> 1 
* [[207,[206]]] --> 2 


### Specialization of cost equations fun19/2 
* CE 148 is refined into CE [271] 
* CE 147 is refined into CE [272] 


#### Refined cost equations fun19/2 
* CE 271: fun19(V,Out) = 0
     [V>=0,Out=0] 
* CE 272: fun19(V,Out) = 1+ fun19(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of fun19/2 
* CEs [272] --> Loop 208 
* CEs [271] --> Loop 209 

#### Loops of fun19/2 
* Loop 208: fun19(V,Out)->  fun19(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 209: fun19(V,Out) [V>=0,Out=0] 

### Ranking functions of CR fun19(V,Out) 
* RF of phase [208]: [V]

#### Partial ranking functions of CR fun19(V,Out) 
* Partial RF of phase [208]:
  - RF of loop [208:1]:
    V


### Resulting Chains:fun19(V,Out) 
* [[208],209]
* [209]


### Merging Chains  fun19/2 into  External patterns of execution 
* [[209]] --> 1 
* [[209,[208]]] --> 2 


### Specialization of cost equations fun2/3 
* CE 74 is refined into CE [273] 
* CE 72 is refined into CE [274] 
* CE 73 is refined into CE [275] 


#### Refined cost equations fun2/3 
* CE 273: fun2(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 274: fun2(V,V1,Out) = 1+ fun2(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 275: fun2(V,V1,Out) = 1+ fun2(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun2/3 
* CEs [274] --> Loop 210 
* CEs [275] --> Loop 211 
* CEs [273] --> Loop 212 

#### Loops of fun2/3 
* Loop 210: fun2(V,V1,Out)->  fun2(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 211: fun2(V,V1,Out)->  fun2(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 212: fun2(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun2(V,V1,Out) 
* RF of phase [210,211]: [V]

#### Partial ranking functions of CR fun2(V,V1,Out) 
* Partial RF of phase [210,211]:
  - RF of loop [210:1,211:1]:
    V
  - RF of loop [211:1]:
    V1


### Resulting Chains:fun2(V,V1,Out) 
* [[210,211],212]
* [212]


### Merging Chains  fun2/3 into  External patterns of execution 
* [[212]] --> 1 
* [[212,[210,211]]] --> 2 


### Specialization of cost equations fun20/3 
* CE 151 is refined into CE [276] 
* CE 149 is refined into CE [277] 
* CE 150 is refined into CE [278] 


#### Refined cost equations fun20/3 
* CE 276: fun20(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 277: fun20(V,V1,Out) = 1+ fun20(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 278: fun20(V,V1,Out) = 1+ fun20(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun20/3 
* CEs [277] --> Loop 213 
* CEs [278] --> Loop 214 
* CEs [276] --> Loop 215 

#### Loops of fun20/3 
* Loop 213: fun20(V,V1,Out)->  fun20(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 214: fun20(V,V1,Out)->  fun20(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 215: fun20(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun20(V,V1,Out) 
* RF of phase [213,214]: [V]

#### Partial ranking functions of CR fun20(V,V1,Out) 
* Partial RF of phase [213,214]:
  - RF of loop [213:1,214:1]:
    V
  - RF of loop [214:1]:
    V1


### Resulting Chains:fun20(V,V1,Out) 
* [[213,214],215]
* [215]


### Merging Chains  fun20/3 into  External patterns of execution 
* [[215]] --> 1 
* [[215,[213,214]]] --> 2 


### Specialization of cost equations fun21/3 
* CE 154 is refined into CE [279] 
* CE 152 is refined into CE [280] 
* CE 153 is refined into CE [281] 


#### Refined cost equations fun21/3 
* CE 279: fun21(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 280: fun21(V,V1,Out) = 1+ fun21(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 281: fun21(V,V1,Out) = 1+ fun21(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun21/3 
* CEs [280] --> Loop 216 
* CEs [281] --> Loop 217 
* CEs [279] --> Loop 218 

#### Loops of fun21/3 
* Loop 216: fun21(V,V1,Out)->  fun21(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 217: fun21(V,V1,Out)->  fun21(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 218: fun21(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun21(V,V1,Out) 
* RF of phase [216,217]: [V]

#### Partial ranking functions of CR fun21(V,V1,Out) 
* Partial RF of phase [216,217]:
  - RF of loop [216:1,217:1]:
    V
  - RF of loop [217:1]:
    V1


### Resulting Chains:fun21(V,V1,Out) 
* [[216,217],218]
* [218]


### Merging Chains  fun21/3 into  External patterns of execution 
* [[218]] --> 1 
* [[218,[216,217]]] --> 2 


### Specialization of cost equations fun22/4 
* CE 157 is refined into CE [282] 
* CE 156 is refined into CE [283] 
* CE 155 is refined into CE [284] 


#### Refined cost equations fun22/4 
* CE 282: fun22(V,V1,V2,Out) = 0
     [V2>=0,V1>=0,V>=0,Out=0] 
* CE 283: fun22(V,V1,V2,Out) = 1+ fun22(W2,V1,V2,X2)
     [W2>=0,V2>=0,V1>=0,X2+1=Out,W2+1=V] 
* CE 284: fun22(V,V1,V2,Out) = 1+ fun22(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V1,W2+1=V] 

### Cost equations --> "Loop" of fun22/4 
* CEs [283] --> Loop 219 
* CEs [284] --> Loop 220 
* CEs [282] --> Loop 221 

#### Loops of fun22/4 
* Loop 219: fun22(V,V1,V2,Out)->  fun22(V',V1,V2,Out')
                  [V2>=0,V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 220: fun22(V,V1,V2,Out)->  fun22(V',V1',V2',Out')
                  [V2>=1,V1>=1,V>=1,Out=Out'+1,V2=V2'+1,V1=V1'+1,V=V'+1] 
* Loop 221: fun22(V,V1,V2,Out) [V2>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun22(V,V1,V2,Out) 
* RF of phase [219,220]: [V]

#### Partial ranking functions of CR fun22(V,V1,V2,Out) 
* Partial RF of phase [219,220]:
  - RF of loop [219:1,220:1]:
    V
  - RF of loop [220:1]:
    V1
    V2


### Resulting Chains:fun22(V,V1,V2,Out) 
* [[219,220],221]
* [221]


### Merging Chains  fun22/4 into  External patterns of execution 
* [[221]] --> 1 
* [[221,[219,220]]] --> 2 


### Specialization of cost equations fun23/2 
* CE 159 is refined into CE [285] 
* CE 158 is refined into CE [286] 


#### Refined cost equations fun23/2 
* CE 285: fun23(V,Out) = 0
     [V>=0,Out=0] 
* CE 286: fun23(V,Out) = 1+ fun23(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of fun23/2 
* CEs [286] --> Loop 222 
* CEs [285] --> Loop 223 

#### Loops of fun23/2 
* Loop 222: fun23(V,Out)->  fun23(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 223: fun23(V,Out) [V>=0,Out=0] 

### Ranking functions of CR fun23(V,Out) 
* RF of phase [222]: [V]

#### Partial ranking functions of CR fun23(V,Out) 
* Partial RF of phase [222]:
  - RF of loop [222:1]:
    V


### Resulting Chains:fun23(V,Out) 
* [[222],223]
* [223]


### Merging Chains  fun23/2 into  External patterns of execution 
* [[223]] --> 1 
* [[223,[222]]] --> 2 


### Specialization of cost equations fun24/4 
* CE 171 is refined into CE [287] 
* CE 169 is refined into CE [288] 
* CE 170 is refined into CE [289] 


#### Refined cost equations fun24/4 
* CE 287: fun24(V,V1,V2,Out) = 0
     [V2>=0,V1>=0,V>=0,Out=0] 
* CE 288: fun24(V,V1,V2,Out) = 1+ fun24(W2,V1,V2,X2)
     [W2>=0,V2>=0,V1>=0,X2+1=Out,W2+1=V] 
* CE 289: fun24(V,V1,V2,Out) = 1+ fun24(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V1,W2+1=V] 

### Cost equations --> "Loop" of fun24/4 
* CEs [288] --> Loop 224 
* CEs [289] --> Loop 225 
* CEs [287] --> Loop 226 

#### Loops of fun24/4 
* Loop 224: fun24(V,V1,V2,Out)->  fun24(V',V1,V2,Out')
                  [V2>=0,V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 225: fun24(V,V1,V2,Out)->  fun24(V',V1',V2',Out')
                  [V2>=1,V1>=1,V>=1,Out=Out'+1,V2=V2'+1,V1=V1'+1,V=V'+1] 
* Loop 226: fun24(V,V1,V2,Out) [V2>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun24(V,V1,V2,Out) 
* RF of phase [224,225]: [V]

#### Partial ranking functions of CR fun24(V,V1,V2,Out) 
* Partial RF of phase [224,225]:
  - RF of loop [224:1,225:1]:
    V
  - RF of loop [225:1]:
    V1
    V2


### Resulting Chains:fun24(V,V1,V2,Out) 
* [[224,225],226]
* [226]


### Merging Chains  fun24/4 into  External patterns of execution 
* [[226]] --> 1 
* [[226,[224,225]]] --> 2 


### Specialization of cost equations fun25/4 
* CE 178 is refined into CE [290] 
* CE 176 is refined into CE [291] 
* CE 177 is refined into CE [292] 


#### Refined cost equations fun25/4 
* CE 290: fun25(V,V1,V2,Out) = 0
     [V2>=0,V1>=0,V>=0,Out=0] 
* CE 291: fun25(V,V1,V2,Out) = 1+ fun25(W2,V1,V2,X2)
     [W2>=0,V2>=0,V1>=0,X2+1=Out,W2+1=V] 
* CE 292: fun25(V,V1,V2,Out) = 1+ fun25(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V1,W2+1=V] 

### Cost equations --> "Loop" of fun25/4 
* CEs [291] --> Loop 227 
* CEs [292] --> Loop 228 
* CEs [290] --> Loop 229 

#### Loops of fun25/4 
* Loop 227: fun25(V,V1,V2,Out)->  fun25(V',V1,V2,Out')
                  [V2>=0,V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 228: fun25(V,V1,V2,Out)->  fun25(V',V1',V2',Out')
                  [V2>=1,V1>=1,V>=1,Out=Out'+1,V2=V2'+1,V1=V1'+1,V=V'+1] 
* Loop 229: fun25(V,V1,V2,Out) [V2>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun25(V,V1,V2,Out) 
* RF of phase [227,228]: [V]

#### Partial ranking functions of CR fun25(V,V1,V2,Out) 
* Partial RF of phase [227,228]:
  - RF of loop [227:1,228:1]:
    V
  - RF of loop [228:1]:
    V1
    V2


### Resulting Chains:fun25(V,V1,V2,Out) 
* [[227,228],229]
* [229]


### Merging Chains  fun25/4 into  External patterns of execution 
* [[229]] --> 1 
* [[229,[227,228]]] --> 2 


### Specialization of cost equations fun26/3 
* CE 184 is refined into CE [293] 
* CE 183 is refined into CE [294] 
* CE 182 is refined into CE [295] 


#### Refined cost equations fun26/3 
* CE 293: fun26(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 294: fun26(V,V1,Out) = 1+ fun26(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 295: fun26(V,V1,Out) = 1+ fun26(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun26/3 
* CEs [294] --> Loop 230 
* CEs [295] --> Loop 231 
* CEs [293] --> Loop 232 

#### Loops of fun26/3 
* Loop 230: fun26(V,V1,Out)->  fun26(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 231: fun26(V,V1,Out)->  fun26(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 232: fun26(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun26(V,V1,Out) 
* RF of phase [230,231]: [V]

#### Partial ranking functions of CR fun26(V,V1,Out) 
* Partial RF of phase [230,231]:
  - RF of loop [230:1,231:1]:
    V
  - RF of loop [231:1]:
    V1


### Resulting Chains:fun26(V,V1,Out) 
* [[230,231],232]
* [232]


### Merging Chains  fun26/3 into  External patterns of execution 
* [[232]] --> 1 
* [[232,[230,231]]] --> 2 


### Specialization of cost equations fun27/4 
* CE 189 is refined into CE [296] 
* CE 187 is refined into CE [297] 
* CE 188 is refined into CE [298] 


#### Refined cost equations fun27/4 
* CE 296: fun27(V,V1,V2,Out) = 0
     [V2>=0,V1>=0,V>=0,Out=0] 
* CE 297: fun27(V,V1,V2,Out) = 1+ fun27(W2,V1,V2,X2)
     [W2>=0,V2>=0,V1>=0,X2+1=Out,W2+1=V] 
* CE 298: fun27(V,V1,V2,Out) = 1+ fun27(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V1,W2+1=V] 

### Cost equations --> "Loop" of fun27/4 
* CEs [297] --> Loop 233 
* CEs [298] --> Loop 234 
* CEs [296] --> Loop 235 

#### Loops of fun27/4 
* Loop 233: fun27(V,V1,V2,Out)->  fun27(V',V1,V2,Out')
                  [V2>=0,V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 234: fun27(V,V1,V2,Out)->  fun27(V',V1',V2',Out')
                  [V2>=1,V1>=1,V>=1,Out=Out'+1,V2=V2'+1,V1=V1'+1,V=V'+1] 
* Loop 235: fun27(V,V1,V2,Out) [V2>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun27(V,V1,V2,Out) 
* RF of phase [233,234]: [V]

#### Partial ranking functions of CR fun27(V,V1,V2,Out) 
* Partial RF of phase [233,234]:
  - RF of loop [233:1,234:1]:
    V
  - RF of loop [234:1]:
    V1
    V2


### Resulting Chains:fun27(V,V1,V2,Out) 
* [[233,234],235]
* [235]


### Merging Chains  fun27/4 into  External patterns of execution 
* [[235]] --> 1 
* [[235,[233,234]]] --> 2 


### Specialization of cost equations fun28/4 
* CE 192 is refined into CE [299] 
* CE 191 is refined into CE [300] 
* CE 190 is refined into CE [301] 


#### Refined cost equations fun28/4 
* CE 299: fun28(V,V1,V2,Out) = 0
     [V2>=0,V1>=0,V>=0,Out=0] 
* CE 300: fun28(V,V1,V2,Out) = 1+ fun28(W2,V1,V2,X2)
     [W2>=0,V2>=0,V1>=0,X2+1=Out,W2+1=V] 
* CE 301: fun28(V,V1,V2,Out) = 1+ fun28(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V1,W2+1=V] 

### Cost equations --> "Loop" of fun28/4 
* CEs [300] --> Loop 236 
* CEs [301] --> Loop 237 
* CEs [299] --> Loop 238 

#### Loops of fun28/4 
* Loop 236: fun28(V,V1,V2,Out)->  fun28(V',V1,V2,Out')
                  [V2>=0,V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 237: fun28(V,V1,V2,Out)->  fun28(V',V1',V2',Out')
                  [V2>=1,V1>=1,V>=1,Out=Out'+1,V2=V2'+1,V1=V1'+1,V=V'+1] 
* Loop 238: fun28(V,V1,V2,Out) [V2>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun28(V,V1,V2,Out) 
* RF of phase [236,237]: [V]

#### Partial ranking functions of CR fun28(V,V1,V2,Out) 
* Partial RF of phase [236,237]:
  - RF of loop [236:1,237:1]:
    V
  - RF of loop [237:1]:
    V1
    V2


### Resulting Chains:fun28(V,V1,V2,Out) 
* [[236,237],238]
* [238]


### Merging Chains  fun28/4 into  External patterns of execution 
* [[238]] --> 1 
* [[238,[236,237]]] --> 2 


### Specialization of cost equations fun29/3 
* CE 195 is refined into CE [302] 
* CE 194 is refined into CE [303] 
* CE 193 is refined into CE [304] 


#### Refined cost equations fun29/3 
* CE 302: fun29(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 303: fun29(V,V1,Out) = 1+ fun29(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 304: fun29(V,V1,Out) = 1+ fun29(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun29/3 
* CEs [303] --> Loop 239 
* CEs [304] --> Loop 240 
* CEs [302] --> Loop 241 

#### Loops of fun29/3 
* Loop 239: fun29(V,V1,Out)->  fun29(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 240: fun29(V,V1,Out)->  fun29(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 241: fun29(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun29(V,V1,Out) 
* RF of phase [239,240]: [V]

#### Partial ranking functions of CR fun29(V,V1,Out) 
* Partial RF of phase [239,240]:
  - RF of loop [239:1,240:1]:
    V
  - RF of loop [240:1]:
    V1


### Resulting Chains:fun29(V,V1,Out) 
* [[239,240],241]
* [241]


### Merging Chains  fun29/3 into  External patterns of execution 
* [[241]] --> 1 
* [[241,[239,240]]] --> 2 


### Specialization of cost equations fun3/2 
* CE 76 is refined into CE [305] 
* CE 75 is refined into CE [306] 


#### Refined cost equations fun3/2 
* CE 305: fun3(V,Out) = 0
     [V>=0,Out=0] 
* CE 306: fun3(V,Out) = 1+ fun3(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of fun3/2 
* CEs [306] --> Loop 242 
* CEs [305] --> Loop 243 

#### Loops of fun3/2 
* Loop 242: fun3(V,Out)->  fun3(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 243: fun3(V,Out) [V>=0,Out=0] 

### Ranking functions of CR fun3(V,Out) 
* RF of phase [242]: [V]

#### Partial ranking functions of CR fun3(V,Out) 
* Partial RF of phase [242]:
  - RF of loop [242:1]:
    V


### Resulting Chains:fun3(V,Out) 
* [[242],243]
* [243]


### Merging Chains  fun3/2 into  External patterns of execution 
* [[243]] --> 1 
* [[243,[242]]] --> 2 


### Specialization of cost equations fun30/3 
* CE 200 is refined into CE [307] 
* CE 198 is refined into CE [308] 
* CE 199 is refined into CE [309] 


#### Refined cost equations fun30/3 
* CE 307: fun30(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 308: fun30(V,V1,Out) = 1+ fun30(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 309: fun30(V,V1,Out) = 1+ fun30(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun30/3 
* CEs [308] --> Loop 244 
* CEs [309] --> Loop 245 
* CEs [307] --> Loop 246 

#### Loops of fun30/3 
* Loop 244: fun30(V,V1,Out)->  fun30(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 245: fun30(V,V1,Out)->  fun30(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 246: fun30(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun30(V,V1,Out) 
* RF of phase [244,245]: [V]

#### Partial ranking functions of CR fun30(V,V1,Out) 
* Partial RF of phase [244,245]:
  - RF of loop [244:1,245:1]:
    V
  - RF of loop [245:1]:
    V1


### Resulting Chains:fun30(V,V1,Out) 
* [[244,245],246]
* [246]


### Merging Chains  fun30/3 into  External patterns of execution 
* [[246]] --> 1 
* [[246,[244,245]]] --> 2 


### Specialization of cost equations fun31/3 
* CE 203 is refined into CE [310] 
* CE 201 is refined into CE [311] 
* CE 202 is refined into CE [312] 


#### Refined cost equations fun31/3 
* CE 310: fun31(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 311: fun31(V,V1,Out) = 1+ fun31(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 312: fun31(V,V1,Out) = 1+ fun31(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun31/3 
* CEs [311] --> Loop 247 
* CEs [312] --> Loop 248 
* CEs [310] --> Loop 249 

#### Loops of fun31/3 
* Loop 247: fun31(V,V1,Out)->  fun31(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 248: fun31(V,V1,Out)->  fun31(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 249: fun31(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun31(V,V1,Out) 
* RF of phase [247,248]: [V]

#### Partial ranking functions of CR fun31(V,V1,Out) 
* Partial RF of phase [247,248]:
  - RF of loop [247:1,248:1]:
    V
  - RF of loop [248:1]:
    V1


### Resulting Chains:fun31(V,V1,Out) 
* [[247,248],249]
* [249]


### Merging Chains  fun31/3 into  External patterns of execution 
* [[249]] --> 1 
* [[249,[247,248]]] --> 2 


### Specialization of cost equations fun32/2 
* CE 205 is refined into CE [313] 
* CE 204 is refined into CE [314] 


#### Refined cost equations fun32/2 
* CE 313: fun32(V,Out) = 0
     [V>=0,Out=0] 
* CE 314: fun32(V,Out) = 1+ fun32(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of fun32/2 
* CEs [314] --> Loop 250 
* CEs [313] --> Loop 251 

#### Loops of fun32/2 
* Loop 250: fun32(V,Out)->  fun32(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 251: fun32(V,Out) [V>=0,Out=0] 

### Ranking functions of CR fun32(V,Out) 
* RF of phase [250]: [V]

#### Partial ranking functions of CR fun32(V,Out) 
* Partial RF of phase [250]:
  - RF of loop [250:1]:
    V


### Resulting Chains:fun32(V,Out) 
* [[250],251]
* [251]


### Merging Chains  fun32/2 into  External patterns of execution 
* [[251]] --> 1 
* [[251,[250]]] --> 2 


### Specialization of cost equations fun33/4 
* CE 210 is refined into CE [315] 
* CE 208 is refined into CE [316] 
* CE 209 is refined into CE [317] 


#### Refined cost equations fun33/4 
* CE 315: fun33(V,V1,V2,Out) = 0
     [V2>=0,V1>=0,V>=0,Out=0] 
* CE 316: fun33(V,V1,V2,Out) = 1+ fun33(W2,V1,V2,X2)
     [W2>=0,V2>=0,V1>=0,X2+1=Out,W2+1=V] 
* CE 317: fun33(V,V1,V2,Out) = 1+ fun33(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V1,W2+1=V] 

### Cost equations --> "Loop" of fun33/4 
* CEs [316] --> Loop 252 
* CEs [317] --> Loop 253 
* CEs [315] --> Loop 254 

#### Loops of fun33/4 
* Loop 252: fun33(V,V1,V2,Out)->  fun33(V',V1,V2,Out')
                  [V2>=0,V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 253: fun33(V,V1,V2,Out)->  fun33(V',V1',V2',Out')
                  [V2>=1,V1>=1,V>=1,Out=Out'+1,V2=V2'+1,V1=V1'+1,V=V'+1] 
* Loop 254: fun33(V,V1,V2,Out) [V2>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun33(V,V1,V2,Out) 
* RF of phase [252,253]: [V]

#### Partial ranking functions of CR fun33(V,V1,V2,Out) 
* Partial RF of phase [252,253]:
  - RF of loop [252:1,253:1]:
    V
  - RF of loop [253:1]:
    V1
    V2


### Resulting Chains:fun33(V,V1,V2,Out) 
* [[252,253],254]
* [254]


### Merging Chains  fun33/4 into  External patterns of execution 
* [[254]] --> 1 
* [[254,[252,253]]] --> 2 


### Specialization of cost equations fun34/3 
* CE 213 is refined into CE [318] 
* CE 212 is refined into CE [319] 
* CE 211 is refined into CE [320] 


#### Refined cost equations fun34/3 
* CE 318: fun34(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 319: fun34(V,V1,Out) = 1+ fun34(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 320: fun34(V,V1,Out) = 1+ fun34(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun34/3 
* CEs [319] --> Loop 255 
* CEs [320] --> Loop 256 
* CEs [318] --> Loop 257 

#### Loops of fun34/3 
* Loop 255: fun34(V,V1,Out)->  fun34(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 256: fun34(V,V1,Out)->  fun34(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 257: fun34(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun34(V,V1,Out) 
* RF of phase [255,256]: [V]

#### Partial ranking functions of CR fun34(V,V1,Out) 
* Partial RF of phase [255,256]:
  - RF of loop [255:1,256:1]:
    V
  - RF of loop [256:1]:
    V1


### Resulting Chains:fun34(V,V1,Out) 
* [[255,256],257]
* [257]


### Merging Chains  fun34/3 into  External patterns of execution 
* [[257]] --> 1 
* [[257,[255,256]]] --> 2 


### Specialization of cost equations fun35/3 
* CE 216 is refined into CE [321] 
* CE 215 is refined into CE [322] 
* CE 214 is refined into CE [323] 


#### Refined cost equations fun35/3 
* CE 321: fun35(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 322: fun35(V,V1,Out) = 1+ fun35(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 323: fun35(V,V1,Out) = 1+ fun35(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun35/3 
* CEs [322] --> Loop 258 
* CEs [323] --> Loop 259 
* CEs [321] --> Loop 260 

#### Loops of fun35/3 
* Loop 258: fun35(V,V1,Out)->  fun35(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 259: fun35(V,V1,Out)->  fun35(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 260: fun35(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun35(V,V1,Out) 
* RF of phase [258,259]: [V]

#### Partial ranking functions of CR fun35(V,V1,Out) 
* Partial RF of phase [258,259]:
  - RF of loop [258:1,259:1]:
    V
  - RF of loop [259:1]:
    V1


### Resulting Chains:fun35(V,V1,Out) 
* [[258,259],260]
* [260]


### Merging Chains  fun35/3 into  External patterns of execution 
* [[260]] --> 1 
* [[260,[258,259]]] --> 2 


### Specialization of cost equations fun36/2 
* CE 218 is refined into CE [324] 
* CE 217 is refined into CE [325] 


#### Refined cost equations fun36/2 
* CE 324: fun36(V,Out) = 0
     [V>=0,Out=0] 
* CE 325: fun36(V,Out) = 1+ fun36(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of fun36/2 
* CEs [325] --> Loop 261 
* CEs [324] --> Loop 262 

#### Loops of fun36/2 
* Loop 261: fun36(V,Out)->  fun36(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 262: fun36(V,Out) [V>=0,Out=0] 

### Ranking functions of CR fun36(V,Out) 
* RF of phase [261]: [V]

#### Partial ranking functions of CR fun36(V,Out) 
* Partial RF of phase [261]:
  - RF of loop [261:1]:
    V


### Resulting Chains:fun36(V,Out) 
* [[261],262]
* [262]


### Merging Chains  fun36/2 into  External patterns of execution 
* [[262]] --> 1 
* [[262,[261]]] --> 2 


### Specialization of cost equations fun37/3 
* CE 221 is refined into CE [326] 
* CE 220 is refined into CE [327] 
* CE 219 is refined into CE [328] 


#### Refined cost equations fun37/3 
* CE 326: fun37(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 327: fun37(V,V1,Out) = 1+ fun37(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 328: fun37(V,V1,Out) = 1+ fun37(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun37/3 
* CEs [327] --> Loop 263 
* CEs [328] --> Loop 264 
* CEs [326] --> Loop 265 

#### Loops of fun37/3 
* Loop 263: fun37(V,V1,Out)->  fun37(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 264: fun37(V,V1,Out)->  fun37(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 265: fun37(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun37(V,V1,Out) 
* RF of phase [263,264]: [V]

#### Partial ranking functions of CR fun37(V,V1,Out) 
* Partial RF of phase [263,264]:
  - RF of loop [263:1,264:1]:
    V
  - RF of loop [264:1]:
    V1


### Resulting Chains:fun37(V,V1,Out) 
* [[263,264],265]
* [265]


### Merging Chains  fun37/3 into  External patterns of execution 
* [[265]] --> 1 
* [[265,[263,264]]] --> 2 


### Specialization of cost equations fun38/2 
* CE 223 is refined into CE [329] 
* CE 222 is refined into CE [330] 


#### Refined cost equations fun38/2 
* CE 329: fun38(V,Out) = 0
     [V>=0,Out=0] 
* CE 330: fun38(V,Out) = 1+ fun38(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of fun38/2 
* CEs [330] --> Loop 266 
* CEs [329] --> Loop 267 

#### Loops of fun38/2 
* Loop 266: fun38(V,Out)->  fun38(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 267: fun38(V,Out) [V>=0,Out=0] 

### Ranking functions of CR fun38(V,Out) 
* RF of phase [266]: [V]

#### Partial ranking functions of CR fun38(V,Out) 
* Partial RF of phase [266]:
  - RF of loop [266:1]:
    V


### Resulting Chains:fun38(V,Out) 
* [[266],267]
* [267]


### Merging Chains  fun38/2 into  External patterns of execution 
* [[267]] --> 1 
* [[267,[266]]] --> 2 


### Specialization of cost equations fun39/3 
* CE 226 is refined into CE [331] 
* CE 225 is refined into CE [332] 
* CE 224 is refined into CE [333] 


#### Refined cost equations fun39/3 
* CE 331: fun39(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 332: fun39(V,V1,Out) = 1+ fun39(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 333: fun39(V,V1,Out) = 1+ fun39(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun39/3 
* CEs [332] --> Loop 268 
* CEs [333] --> Loop 269 
* CEs [331] --> Loop 270 

#### Loops of fun39/3 
* Loop 268: fun39(V,V1,Out)->  fun39(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 269: fun39(V,V1,Out)->  fun39(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 270: fun39(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun39(V,V1,Out) 
* RF of phase [268,269]: [V]

#### Partial ranking functions of CR fun39(V,V1,Out) 
* Partial RF of phase [268,269]:
  - RF of loop [268:1,269:1]:
    V
  - RF of loop [269:1]:
    V1


### Resulting Chains:fun39(V,V1,Out) 
* [[268,269],270]
* [270]


### Merging Chains  fun39/3 into  External patterns of execution 
* [[270]] --> 1 
* [[270,[268,269]]] --> 2 


### Specialization of cost equations fun4/3 
* CE 79 is refined into CE [334] 
* CE 78 is refined into CE [335] 
* CE 77 is refined into CE [336] 


#### Refined cost equations fun4/3 
* CE 334: fun4(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 335: fun4(V,V1,Out) = 1+ fun4(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 336: fun4(V,V1,Out) = 1+ fun4(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun4/3 
* CEs [335] --> Loop 271 
* CEs [336] --> Loop 272 
* CEs [334] --> Loop 273 

#### Loops of fun4/3 
* Loop 271: fun4(V,V1,Out)->  fun4(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 272: fun4(V,V1,Out)->  fun4(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 273: fun4(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun4(V,V1,Out) 
* RF of phase [271,272]: [V]

#### Partial ranking functions of CR fun4(V,V1,Out) 
* Partial RF of phase [271,272]:
  - RF of loop [271:1,272:1]:
    V
  - RF of loop [272:1]:
    V1


### Resulting Chains:fun4(V,V1,Out) 
* [[271,272],273]
* [273]


### Merging Chains  fun4/3 into  External patterns of execution 
* [[273]] --> 1 
* [[273,[271,272]]] --> 2 


### Specialization of cost equations fun40/3 
* CE 229 is refined into CE [337] 
* CE 228 is refined into CE [338] 
* CE 227 is refined into CE [339] 


#### Refined cost equations fun40/3 
* CE 337: fun40(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 338: fun40(V,V1,Out) = 1+ fun40(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 339: fun40(V,V1,Out) = 1+ fun40(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun40/3 
* CEs [338] --> Loop 274 
* CEs [339] --> Loop 275 
* CEs [337] --> Loop 276 

#### Loops of fun40/3 
* Loop 274: fun40(V,V1,Out)->  fun40(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 275: fun40(V,V1,Out)->  fun40(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 276: fun40(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun40(V,V1,Out) 
* RF of phase [274,275]: [V]

#### Partial ranking functions of CR fun40(V,V1,Out) 
* Partial RF of phase [274,275]:
  - RF of loop [274:1,275:1]:
    V
  - RF of loop [275:1]:
    V1


### Resulting Chains:fun40(V,V1,Out) 
* [[274,275],276]
* [276]


### Merging Chains  fun40/3 into  External patterns of execution 
* [[276]] --> 1 
* [[276,[274,275]]] --> 2 


### Specialization of cost equations fun5/4 
* CE 82 is refined into CE [340] 
* CE 80 is refined into CE [341] 
* CE 81 is refined into CE [342] 


#### Refined cost equations fun5/4 
* CE 340: fun5(V,V1,V2,Out) = 0
     [V2>=0,V1>=0,V>=0,Out=0] 
* CE 341: fun5(V,V1,V2,Out) = 1+ fun5(W2,V1,V2,X2)
     [W2>=0,V2>=0,V1>=0,X2+1=Out,W2+1=V] 
* CE 342: fun5(V,V1,V2,Out) = 1+ fun5(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V1,W2+1=V] 

### Cost equations --> "Loop" of fun5/4 
* CEs [341] --> Loop 277 
* CEs [342] --> Loop 278 
* CEs [340] --> Loop 279 

#### Loops of fun5/4 
* Loop 277: fun5(V,V1,V2,Out)->  fun5(V',V1,V2,Out')
                  [V2>=0,V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 278: fun5(V,V1,V2,Out)->  fun5(V',V1',V2',Out')
                  [V2>=1,V1>=1,V>=1,Out=Out'+1,V2=V2'+1,V1=V1'+1,V=V'+1] 
* Loop 279: fun5(V,V1,V2,Out) [V2>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun5(V,V1,V2,Out) 
* RF of phase [277,278]: [V]

#### Partial ranking functions of CR fun5(V,V1,V2,Out) 
* Partial RF of phase [277,278]:
  - RF of loop [277:1,278:1]:
    V
  - RF of loop [278:1]:
    V1
    V2


### Resulting Chains:fun5(V,V1,V2,Out) 
* [[277,278],279]
* [279]


### Merging Chains  fun5/4 into  External patterns of execution 
* [[279]] --> 1 
* [[279,[277,278]]] --> 2 


### Specialization of cost equations fun6/3 
* CE 85 is refined into CE [343] 
* CE 84 is refined into CE [344] 
* CE 83 is refined into CE [345] 


#### Refined cost equations fun6/3 
* CE 343: fun6(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 344: fun6(V,V1,Out) = 1+ fun6(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 345: fun6(V,V1,Out) = 1+ fun6(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun6/3 
* CEs [344] --> Loop 280 
* CEs [345] --> Loop 281 
* CEs [343] --> Loop 282 

#### Loops of fun6/3 
* Loop 280: fun6(V,V1,Out)->  fun6(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 281: fun6(V,V1,Out)->  fun6(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 282: fun6(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun6(V,V1,Out) 
* RF of phase [280,281]: [V]

#### Partial ranking functions of CR fun6(V,V1,Out) 
* Partial RF of phase [280,281]:
  - RF of loop [280:1,281:1]:
    V
  - RF of loop [281:1]:
    V1


### Resulting Chains:fun6(V,V1,Out) 
* [[280,281],282]
* [282]


### Merging Chains  fun6/3 into  External patterns of execution 
* [[282]] --> 1 
* [[282,[280,281]]] --> 2 


### Specialization of cost equations fun7/3 
* CE 96 is refined into CE [346] 
* CE 95 is refined into CE [347] 
* CE 94 is refined into CE [348] 


#### Refined cost equations fun7/3 
* CE 346: fun7(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 347: fun7(V,V1,Out) = 1+ fun7(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 348: fun7(V,V1,Out) = 1+ fun7(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun7/3 
* CEs [347] --> Loop 283 
* CEs [348] --> Loop 284 
* CEs [346] --> Loop 285 

#### Loops of fun7/3 
* Loop 283: fun7(V,V1,Out)->  fun7(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 284: fun7(V,V1,Out)->  fun7(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 285: fun7(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun7(V,V1,Out) 
* RF of phase [283,284]: [V]

#### Partial ranking functions of CR fun7(V,V1,Out) 
* Partial RF of phase [283,284]:
  - RF of loop [283:1,284:1]:
    V
  - RF of loop [284:1]:
    V1


### Resulting Chains:fun7(V,V1,Out) 
* [[283,284],285]
* [285]


### Merging Chains  fun7/3 into  External patterns of execution 
* [[285]] --> 1 
* [[285,[283,284]]] --> 2 


### Specialization of cost equations fun8/3 
* CE 103 is refined into CE [349] 
* CE 102 is refined into CE [350] 
* CE 101 is refined into CE [351] 


#### Refined cost equations fun8/3 
* CE 349: fun8(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 350: fun8(V,V1,Out) = 1+ fun8(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 351: fun8(V,V1,Out) = 1+ fun8(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun8/3 
* CEs [350] --> Loop 286 
* CEs [351] --> Loop 287 
* CEs [349] --> Loop 288 

#### Loops of fun8/3 
* Loop 286: fun8(V,V1,Out)->  fun8(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 287: fun8(V,V1,Out)->  fun8(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 288: fun8(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun8(V,V1,Out) 
* RF of phase [286,287]: [V]

#### Partial ranking functions of CR fun8(V,V1,Out) 
* Partial RF of phase [286,287]:
  - RF of loop [286:1,287:1]:
    V
  - RF of loop [287:1]:
    V1


### Resulting Chains:fun8(V,V1,Out) 
* [[286,287],288]
* [288]


### Merging Chains  fun8/3 into  External patterns of execution 
* [[288]] --> 1 
* [[288,[286,287]]] --> 2 


### Specialization of cost equations fun9/4 
* CE 108 is refined into CE [352] 
* CE 106 is refined into CE [353] 
* CE 107 is refined into CE [354] 


#### Refined cost equations fun9/4 
* CE 352: fun9(V,V1,V2,Out) = 0
     [V2>=0,V1>=0,V>=0,Out=0] 
* CE 353: fun9(V,V1,V2,Out) = 1+ fun9(W2,V1,V2,X2)
     [W2>=0,V2>=0,V1>=0,X2+1=Out,W2+1=V] 
* CE 354: fun9(V,V1,V2,Out) = 1+ fun9(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V1,W2+1=V] 

### Cost equations --> "Loop" of fun9/4 
* CEs [353] --> Loop 289 
* CEs [354] --> Loop 290 
* CEs [352] --> Loop 291 

#### Loops of fun9/4 
* Loop 289: fun9(V,V1,V2,Out)->  fun9(V',V1,V2,Out')
                  [V2>=0,V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 290: fun9(V,V1,V2,Out)->  fun9(V',V1',V2',Out')
                  [V2>=1,V1>=1,V>=1,Out=Out'+1,V2=V2'+1,V1=V1'+1,V=V'+1] 
* Loop 291: fun9(V,V1,V2,Out) [V2>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun9(V,V1,V2,Out) 
* RF of phase [289,290]: [V]

#### Partial ranking functions of CR fun9(V,V1,V2,Out) 
* Partial RF of phase [289,290]:
  - RF of loop [289:1,290:1]:
    V
  - RF of loop [290:1]:
    V1
    V2


### Resulting Chains:fun9(V,V1,V2,Out) 
* [[289,290],291]
* [291]


### Merging Chains  fun9/4 into  External patterns of execution 
* [[291]] --> 1 
* [[291,[289,290]]] --> 2 


### Specialization of cost equations head/2 
* CE 123 is refined into CE [355] 
* CE 122 is refined into CE [356] 


#### Refined cost equations head/2 
* CE 355: head(V,Out) = 0
     [V>=0,Out=0] 
* CE 356: head(V,Out) = 1+ head(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of head/2 
* CEs [356] --> Loop 292 
* CEs [355] --> Loop 293 

#### Loops of head/2 
* Loop 292: head(V,Out)->  head(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 293: head(V,Out) [V>=0,Out=0] 

### Ranking functions of CR head(V,Out) 
* RF of phase [292]: [V]

#### Partial ranking functions of CR head(V,Out) 
* Partial RF of phase [292]:
  - RF of loop [292:1]:
    V


### Resulting Chains:head(V,Out) 
* [[292],293]
* [293]


### Merging Chains  head/2 into  External patterns of execution 
* [[293]] --> 1 
* [[293,[292]]] --> 2 


### Specialization of cost equations isLNat/2 
* CE 231 is refined into CE [357] 
* CE 230 is refined into CE [358] 


#### Refined cost equations isLNat/2 
* CE 357: isLNat(V,Out) = 0
     [V>=0,Out=0] 
* CE 358: isLNat(V,Out) = 1+ isLNat(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of isLNat/2 
* CEs [358] --> Loop 294 
* CEs [357] --> Loop 295 

#### Loops of isLNat/2 
* Loop 294: isLNat(V,Out)->  isLNat(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 295: isLNat(V,Out) [V>=0,Out=0] 

### Ranking functions of CR isLNat(V,Out) 
* RF of phase [294]: [V]

#### Partial ranking functions of CR isLNat(V,Out) 
* Partial RF of phase [294]:
  - RF of loop [294:1]:
    V


### Resulting Chains:isLNat(V,Out) 
* [[294],295]
* [295]


### Merging Chains  isLNat/2 into  External patterns of execution 
* [[295]] --> 1 
* [[295,[294]]] --> 2 


### Specialization of cost equations isLNatKind/2 
* CE 105 is refined into CE [359] 
* CE 104 is refined into CE [360] 


#### Refined cost equations isLNatKind/2 
* CE 359: isLNatKind(V,Out) = 0
     [V>=0,Out=0] 
* CE 360: isLNatKind(V,Out) = 1+ isLNatKind(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of isLNatKind/2 
* CEs [360] --> Loop 296 
* CEs [359] --> Loop 297 

#### Loops of isLNatKind/2 
* Loop 296: isLNatKind(V,Out)->  isLNatKind(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 297: isLNatKind(V,Out) [V>=0,Out=0] 

### Ranking functions of CR isLNatKind(V,Out) 
* RF of phase [296]: [V]

#### Partial ranking functions of CR isLNatKind(V,Out) 
* Partial RF of phase [296]:
  - RF of loop [296:1]:
    V


### Resulting Chains:isLNatKind(V,Out) 
* [[296],297]
* [297]


### Merging Chains  isLNatKind/2 into  External patterns of execution 
* [[297]] --> 1 
* [[297,[296]]] --> 2 


### Specialization of cost equations isNatural/2 
* CE 186 is refined into CE [361] 
* CE 185 is refined into CE [362] 


#### Refined cost equations isNatural/2 
* CE 361: isNatural(V,Out) = 0
     [V>=0,Out=0] 
* CE 362: isNatural(V,Out) = 1+ isNatural(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of isNatural/2 
* CEs [362] --> Loop 298 
* CEs [361] --> Loop 299 

#### Loops of isNatural/2 
* Loop 298: isNatural(V,Out)->  isNatural(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 299: isNatural(V,Out) [V>=0,Out=0] 

### Ranking functions of CR isNatural(V,Out) 
* RF of phase [298]: [V]

#### Partial ranking functions of CR isNatural(V,Out) 
* Partial RF of phase [298]:
  - RF of loop [298:1]:
    V


### Resulting Chains:isNatural(V,Out) 
* [[298],299]
* [299]


### Merging Chains  isNatural/2 into  External patterns of execution 
* [[299]] --> 1 
* [[299,[298]]] --> 2 


### Specialization of cost equations isNaturalKind/2 
* CE 138 is refined into CE [363] 
* CE 137 is refined into CE [364] 


#### Refined cost equations isNaturalKind/2 
* CE 363: isNaturalKind(V,Out) = 0
     [V>=0,Out=0] 
* CE 364: isNaturalKind(V,Out) = 1+ isNaturalKind(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of isNaturalKind/2 
* CEs [364] --> Loop 300 
* CEs [363] --> Loop 301 

#### Loops of isNaturalKind/2 
* Loop 300: isNaturalKind(V,Out)->  isNaturalKind(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 301: isNaturalKind(V,Out) [V>=0,Out=0] 

### Ranking functions of CR isNaturalKind(V,Out) 
* RF of phase [300]: [V]

#### Partial ranking functions of CR isNaturalKind(V,Out) 
* Partial RF of phase [300]:
  - RF of loop [300:1]:
    V


### Resulting Chains:isNaturalKind(V,Out) 
* [[300],301]
* [301]


### Merging Chains  isNaturalKind/2 into  External patterns of execution 
* [[301]] --> 1 
* [[301,[300]]] --> 2 


### Specialization of cost equations isPLNat/2 
* CE 207 is refined into CE [365] 
* CE 206 is refined into CE [366] 


#### Refined cost equations isPLNat/2 
* CE 365: isPLNat(V,Out) = 0
     [V>=0,Out=0] 
* CE 366: isPLNat(V,Out) = 1+ isPLNat(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of isPLNat/2 
* CEs [366] --> Loop 302 
* CEs [365] --> Loop 303 

#### Loops of isPLNat/2 
* Loop 302: isPLNat(V,Out)->  isPLNat(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 303: isPLNat(V,Out) [V>=0,Out=0] 

### Ranking functions of CR isPLNat(V,Out) 
* RF of phase [302]: [V]

#### Partial ranking functions of CR isPLNat(V,Out) 
* Partial RF of phase [302]:
  - RF of loop [302:1]:
    V


### Resulting Chains:isPLNat(V,Out) 
* [[302],303]
* [303]


### Merging Chains  isPLNat/2 into  External patterns of execution 
* [[303]] --> 1 
* [[303,[302]]] --> 2 


### Specialization of cost equations isPLNatKind/2 
* CE 173 is refined into CE [367] 
* CE 172 is refined into CE [368] 


#### Refined cost equations isPLNatKind/2 
* CE 367: isPLNatKind(V,Out) = 0
     [V>=0,Out=0] 
* CE 368: isPLNatKind(V,Out) = 1+ isPLNatKind(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of isPLNatKind/2 
* CEs [368] --> Loop 304 
* CEs [367] --> Loop 305 

#### Loops of isPLNatKind/2 
* Loop 304: isPLNatKind(V,Out)->  isPLNatKind(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 305: isPLNatKind(V,Out) [V>=0,Out=0] 

### Ranking functions of CR isPLNatKind(V,Out) 
* RF of phase [304]: [V]

#### Partial ranking functions of CR isPLNatKind(V,Out) 
* Partial RF of phase [304]:
  - RF of loop [304:1]:
    V


### Resulting Chains:isPLNatKind(V,Out) 
* [[304],305]
* [305]


### Merging Chains  isPLNatKind/2 into  External patterns of execution 
* [[305]] --> 1 
* [[305,[304]]] --> 2 


### Specialization of cost equations natsFrom/2 
* CE 168 is refined into CE [369] 
* CE 167 is refined into CE [370] 


#### Refined cost equations natsFrom/2 
* CE 369: natsFrom(V,Out) = 0
     [V>=0,Out=0] 
* CE 370: natsFrom(V,Out) = 1+ natsFrom(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of natsFrom/2 
* CEs [370] --> Loop 306 
* CEs [369] --> Loop 307 

#### Loops of natsFrom/2 
* Loop 306: natsFrom(V,Out)->  natsFrom(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 307: natsFrom(V,Out) [V>=0,Out=0] 

### Ranking functions of CR natsFrom(V,Out) 
* RF of phase [306]: [V]

#### Partial ranking functions of CR natsFrom(V,Out) 
* Partial RF of phase [306]:
  - RF of loop [306:1]:
    V


### Resulting Chains:natsFrom(V,Out) 
* [[306],307]
* [307]


### Merging Chains  natsFrom/2 into  External patterns of execution 
* [[307]] --> 1 
* [[307,[306]]] --> 2 


### Specialization of cost equations pair/3 
* CE 89 is refined into CE [371] 
* CE 88 is refined into CE [372] 
* CE 86 is refined into CE [373] 
* CE 87 is refined into CE [374] 


#### Refined cost equations pair/3 
* CE 371: pair(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 372: pair(V,V1,Out) = 1+ pair(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 373: pair(V,V1,Out) = 1+ pair(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 374: pair(V,V1,Out) = 1+ pair(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of pair/3 
* CEs [372] --> Loop 308 
* CEs [373] --> Loop 309 
* CEs [374] --> Loop 310 
* CEs [371] --> Loop 311 

#### Loops of pair/3 
* Loop 308: pair(V,V1,Out)->  pair(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 309: pair(V,V1,Out)->  pair(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 310: pair(V,V1,Out)->  pair(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 311: pair(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR pair(V,V1,Out) 
* RF of phase [308,309,310]: [V+V1]

#### Partial ranking functions of CR pair(V,V1,Out) 
* Partial RF of phase [308,309,310]:
  - RF of loop [308:1,310:1]:
    V1
  - RF of loop [309:1,310:1]:
    V


### Resulting Chains:pair(V,V1,Out) 
* [[308,309,310],311]
* [311]


### Merging Chains  pair/3 into  External patterns of execution 
* [[311]] --> 1 
* [[311,[308,309,310]]] --> 2 


### Specialization of cost equations proper/2 
* CE 100 is refined into CE [375] 
* CE 97 is refined into CE [376] 
* CE 98 is refined into CE [377] 
* CE 99 is refined into CE [378] 


#### Refined cost equations proper/2 
* CE 375: proper(V,Out) = 0
     [V>=0,Out=0] 
* CE 376: proper(V,Out) = 1
     [Out=3,V=2] 
* CE 377: proper(V,Out) = 1
     [Out=2,V=1] 
* CE 378: proper(V,Out) = 1
     [Out=1,V=0] 

### Cost equations --> "Loop" of proper/2 
* CEs [375] --> Loop 312 
* CEs [376] --> Loop 313 
* CEs [377] --> Loop 314 
* CEs [378] --> Loop 315 

#### Loops of proper/2 
* Loop 312: proper(V,Out) [V>=0,Out=0] 
* Loop 313: proper(V,Out) [Out=3,V=2] 
* Loop 314: proper(V,Out) [Out=2,V=1] 
* Loop 315: proper(V,Out) [Out=1,V=0] 

### Ranking functions of CR proper(V,Out) 

#### Partial ranking functions of CR proper(V,Out) 


### Resulting Chains:proper(V,Out) 
* [315]
* [314]
* [313]
* [312]


### Merging Chains  proper/2 into  External patterns of execution 
* [[315]] --> 1 
* [[314]] --> 2 
* [[313]] --> 3 
* [[312]] --> 4 


### Specialization of cost equations s/2 
* CE 175 is refined into CE [379] 
* CE 174 is refined into CE [380] 


#### Refined cost equations s/2 
* CE 379: s(V,Out) = 0
     [V>=0,Out=0] 
* CE 380: s(V,Out) = 1+ s(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of s/2 
* CEs [380] --> Loop 316 
* CEs [379] --> Loop 317 

#### Loops of s/2 
* Loop 316: s(V,Out)->  s(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 317: s(V,Out) [V>=0,Out=0] 

### Ranking functions of CR s(V,Out) 
* RF of phase [316]: [V]

#### Partial ranking functions of CR s(V,Out) 
* Partial RF of phase [316]:
  - RF of loop [316:1]:
    V


### Resulting Chains:s(V,Out) 
* [[316],317]
* [317]


### Merging Chains  s/2 into  External patterns of execution 
* [[317]] --> 1 
* [[317,[316]]] --> 2 


### Specialization of cost equations sel/3 
* CE 93 is refined into CE [381] 
* CE 92 is refined into CE [382] 
* CE 91 is refined into CE [383] 
* CE 90 is refined into CE [384] 


#### Refined cost equations sel/3 
* CE 381: sel(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 382: sel(V,V1,Out) = 1+ sel(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 383: sel(V,V1,Out) = 1+ sel(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 384: sel(V,V1,Out) = 1+ sel(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of sel/3 
* CEs [382] --> Loop 318 
* CEs [383] --> Loop 319 
* CEs [384] --> Loop 320 
* CEs [381] --> Loop 321 

#### Loops of sel/3 
* Loop 318: sel(V,V1,Out)->  sel(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 319: sel(V,V1,Out)->  sel(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 320: sel(V,V1,Out)->  sel(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 321: sel(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR sel(V,V1,Out) 
* RF of phase [318,319,320]: [V+V1]

#### Partial ranking functions of CR sel(V,V1,Out) 
* Partial RF of phase [318,319,320]:
  - RF of loop [318:1,320:1]:
    V1
  - RF of loop [319:1,320:1]:
    V


### Resulting Chains:sel(V,V1,Out) 
* [[318,319,320],321]
* [321]


### Merging Chains  sel/3 into  External patterns of execution 
* [[321]] --> 1 
* [[321,[318,319,320]]] --> 2 


### Specialization of cost equations snd/2 
* CE 197 is refined into CE [385] 
* CE 196 is refined into CE [386] 


#### Refined cost equations snd/2 
* CE 385: snd(V,Out) = 0
     [V>=0,Out=0] 
* CE 386: snd(V,Out) = 1+ snd(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of snd/2 
* CEs [386] --> Loop 322 
* CEs [385] --> Loop 323 

#### Loops of snd/2 
* Loop 322: snd(V,Out)->  snd(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 323: snd(V,Out) [V>=0,Out=0] 

### Ranking functions of CR snd(V,Out) 
* RF of phase [322]: [V]

#### Partial ranking functions of CR snd(V,Out) 
* Partial RF of phase [322]:
  - RF of loop [322:1]:
    V


### Resulting Chains:snd(V,Out) 
* [[322],323]
* [323]


### Merging Chains  snd/2 into  External patterns of execution 
* [[323]] --> 1 
* [[323,[322]]] --> 2 


### Specialization of cost equations splitAt/3 
* CE 119 is refined into CE [387] 
* CE 116 is refined into CE [388] 
* CE 117 is refined into CE [389] 
* CE 118 is refined into CE [390] 


#### Refined cost equations splitAt/3 
* CE 387: splitAt(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 388: splitAt(V,V1,Out) = 1+ splitAt(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 389: splitAt(V,V1,Out) = 1+ splitAt(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 390: splitAt(V,V1,Out) = 1+ splitAt(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of splitAt/3 
* CEs [388] --> Loop 324 
* CEs [389] --> Loop 325 
* CEs [390] --> Loop 326 
* CEs [387] --> Loop 327 

#### Loops of splitAt/3 
* Loop 324: splitAt(V,V1,Out)->  splitAt(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 325: splitAt(V,V1,Out)->  splitAt(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 326: splitAt(V,V1,Out)->  splitAt(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 327: splitAt(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR splitAt(V,V1,Out) 
* RF of phase [324,325,326]: [V+V1]

#### Partial ranking functions of CR splitAt(V,V1,Out) 
* Partial RF of phase [324,325,326]:
  - RF of loop [324:1,326:1]:
    V1
  - RF of loop [325:1,326:1]:
    V


### Resulting Chains:splitAt(V,V1,Out) 
* [[324,325,326],327]
* [327]


### Merging Chains  splitAt/3 into  External patterns of execution 
* [[327]] --> 1 
* [[327,[324,325,326]]] --> 2 


### Specialization of cost equations tail/2 
* CE 133 is refined into CE [391] 
* CE 132 is refined into CE [392] 


#### Refined cost equations tail/2 
* CE 391: tail(V,Out) = 0
     [V>=0,Out=0] 
* CE 392: tail(V,Out) = 1+ tail(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of tail/2 
* CEs [392] --> Loop 328 
* CEs [391] --> Loop 329 

#### Loops of tail/2 
* Loop 328: tail(V,Out)->  tail(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 329: tail(V,Out) [V>=0,Out=0] 

### Ranking functions of CR tail(V,Out) 
* RF of phase [328]: [V]

#### Partial ranking functions of CR tail(V,Out) 
* Partial RF of phase [328]:
  - RF of loop [328:1]:
    V


### Resulting Chains:tail(V,Out) 
* [[328],329]
* [329]


### Merging Chains  tail/2 into  External patterns of execution 
* [[329]] --> 1 
* [[329,[328]]] --> 2 


### Specialization of cost equations take/3 
* CE 163 is refined into CE [393] 
* CE 160 is refined into CE [394] 
* CE 161 is refined into CE [395] 
* CE 162 is refined into CE [396] 


#### Refined cost equations take/3 
* CE 393: take(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 394: take(V,V1,Out) = 1+ take(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 395: take(V,V1,Out) = 1+ take(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 396: take(V,V1,Out) = 1+ take(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of take/3 
* CEs [394] --> Loop 330 
* CEs [395] --> Loop 331 
* CEs [396] --> Loop 332 
* CEs [393] --> Loop 333 

#### Loops of take/3 
* Loop 330: take(V,V1,Out)->  take(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 331: take(V,V1,Out)->  take(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 332: take(V,V1,Out)->  take(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 333: take(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR take(V,V1,Out) 
* RF of phase [330,331,332]: [V+V1]

#### Partial ranking functions of CR take(V,V1,Out) 
* Partial RF of phase [330,331,332]:
  - RF of loop [330:1,332:1]:
    V1
  - RF of loop [331:1,332:1]:
    V


### Resulting Chains:take(V,V1,Out) 
* [[330,331,332],333]
* [333]


### Merging Chains  take/3 into  External patterns of execution 
* [[333]] --> 1 
* [[333,[330,331,332]]] --> 2 


### Specialization of cost equations top/2 
* CE 66 is refined into CE [397] 
* CE 64 is refined into CE [398] 
* CE 65 is refined into CE [399,400,401,402] 


#### Refined cost equations top/2 
* CE 397: top(V,Out) = 0
     [V>=0,Out=0] 
* CE 398: top(V,Out) = 1+ top(V,Out)
     [V>=1] 
* CE 399: top(V,Out) = 1+ proper(W,X):1+ top(Y,Out)
     [Y=1,X=1,W=0,V=1] 
* CE 400: top(V,Out) = 1+ proper(W,X):2+ top(Y,Out)
     [Y=2,X=2,W=1,V=2] 
* CE 401: top(V,Out) = 1+ proper(W,X):3+ top(Y,Out)
     [Y=3,X=3,W=2,V=3] 
* CE 402: top(V,Out) = 1+ proper(W,X):4+ top(Y,Out)
     [W>=0,W+1=V,Y=0,X=0] 

### Cost equations --> "Loop" of top/2 
* CEs [402] --> Loop 334 
* CEs [401] --> Loop 335 
* CEs [400] --> Loop 336 
* CEs [398,399] --> Loop 337 
* CEs [397] --> Loop 338 

#### Loops of top/2 
* Loop 334: top(V,Out)->  top(V',Out)
                  [V>=1,V'=0] 
* Loop 335: top(V,Out)->  top(V',Out)
                  [V'=3,V=3] 
* Loop 336: top(V,Out)->  top(V',Out)
                  [V'=2,V=2] 
* Loop 337: top(V,Out)->  top(V,Out)
                  [V>=1] 
* Loop 338: top(V,Out) [V>=0,Out=0] 

### Ranking functions of CR top(V,Out) 

#### Partial ranking functions of CR top(V,Out) 


### Resulting Chains:top(V,Out) 
* [[335,336,337]]...
* [[335,336,337],338]
* [[335,336,337],334,338]
* [338]
* [334,338]


### Merging Chains  top/2 into  External patterns of execution 
* [[338,334],[338],[338,334,[335,336,337]],[338,[335,336,337]]] --> 1 
* [[[335,336,337]]] --> 2 


### Specialization of cost equations start/4 
* CE 2 is refined into CE [403,404] 
* CE 3 is refined into CE [405,406] 
* CE 4 is refined into CE [407,408] 
* CE 5 is refined into CE [409,410] 
* CE 6 is refined into CE [411,412] 
* CE 7 is refined into CE [413,414] 
* CE 8 is refined into CE [415,416] 
* CE 9 is refined into CE [417,418] 
* CE 10 is refined into CE [419,420] 
* CE 11 is refined into CE [421,422] 
* CE 12 is refined into CE [423,424] 
* CE 13 is refined into CE [425,426,427,428] 
* CE 14 is refined into CE [429,430] 
* CE 15 is refined into CE [431,432] 
* CE 16 is refined into CE [433,434] 
* CE 17 is refined into CE [435,436] 
* CE 18 is refined into CE [437,438] 
* CE 19 is refined into CE [439,440] 
* CE 20 is refined into CE [441,442] 
* CE 21 is refined into CE [443,444] 
* CE 22 is refined into CE [445,446] 
* CE 23 is refined into CE [447,448] 
* CE 24 is refined into CE [449,450] 
* CE 25 is refined into CE [451,452] 
* CE 26 is refined into CE [453,454] 
* CE 27 is refined into CE [455,456] 
* CE 28 is refined into CE [457,458] 
* CE 29 is refined into CE [459,460] 
* CE 30 is refined into CE [461,462] 
* CE 31 is refined into CE [463,464] 
* CE 32 is refined into CE [465,466] 
* CE 33 is refined into CE [467,468] 
* CE 34 is refined into CE [469,470] 
* CE 35 is refined into CE [471,472] 
* CE 36 is refined into CE [473,474] 
* CE 37 is refined into CE [475,476] 
* CE 38 is refined into CE [477,478] 
* CE 39 is refined into CE [479,480] 
* CE 40 is refined into CE [481,482] 
* CE 41 is refined into CE [483,484] 
* CE 42 is refined into CE [485,486] 
* CE 43 is refined into CE [487,488] 
* CE 44 is refined into CE [489,490] 
* CE 45 is refined into CE [491,492] 
* CE 46 is refined into CE [493,494] 
* CE 47 is refined into CE [495,496] 
* CE 48 is refined into CE [497,498] 
* CE 49 is refined into CE [499,500] 
* CE 50 is refined into CE [501,502] 
* CE 51 is refined into CE [503,504] 
* CE 52 is refined into CE [505,506] 
* CE 53 is refined into CE [507,508] 
* CE 54 is refined into CE [509,510] 
* CE 55 is refined into CE [511,512] 
* CE 56 is refined into CE [513,514] 
* CE 57 is refined into CE [515,516] 
* CE 58 is refined into CE [517,518] 
* CE 59 is refined into CE [519,520] 
* CE 60 is refined into CE [521,522] 
* CE 61 is refined into CE [523,524] 
* CE 62 is refined into CE [525,526] 
* CE 63 is refined into CE [527,528] 


#### Refined cost equations start/4 
* CE 403: start(V,V1,V2,V3) = 0+ top(V,W3):1
     [V>=0,W3=0] 
* CE 404: start(V,V1,V2,V3) = 0+ top(V,W3):2
     [V>=1] 
* CE 405: start(V,V1,V2,V3) = 0+ fun(V,V1,V2,W3):1
     [V2>=0,V1>=0,V>=0,W3=0] 
* CE 406: start(V,V1,V2,V3) = 0+ fun(V,V1,V2,W3):2
     [V>=W3,W3>=1,V2>=0,V1>=0] 
* CE 407: start(V,V1,V2,V3) = 0+ fun1(V,W3):1
     [V>=0,W3=0] 
* CE 408: start(V,V1,V2,V3) = 0+ fun1(V,W3):2
     [V>=W3,W3>=1] 
* CE 409: start(V,V1,V2,V3) = 0+ fun2(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 410: start(V,V1,V2,V3) = 0+ fun2(V,V1,W3):2
     [V>=W3,W3>=1,V1>=0] 
* CE 411: start(V,V1,V2,V3) = 0+ fun3(V,W3):1
     [V>=0,W3=0] 
* CE 412: start(V,V1,V2,V3) = 0+ fun3(V,W3):2
     [V>=W3,W3>=1] 
* CE 413: start(V,V1,V2,V3) = 0+ fun4(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 414: start(V,V1,V2,V3) = 0+ fun4(V,V1,W3):2
     [V>=W3,W3>=1,V1>=0] 
* CE 415: start(V,V1,V2,V3) = 0+ fun5(V,V1,V2,W3):1
     [V2>=0,V1>=0,V>=0,W3=0] 
* CE 416: start(V,V1,V2,V3) = 0+ fun5(V,V1,V2,W3):2
     [V>=W3,W3>=1,V2>=0,V1>=0] 
* CE 417: start(V,V1,V2,V3) = 0+ fun6(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 418: start(V,V1,V2,V3) = 0+ fun6(V,V1,W3):2
     [V>=W3,W3>=1,V1>=0] 
* CE 419: start(V,V1,V2,V3) = 0+ pair(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 420: start(V,V1,V2,V3) = 0+ pair(V,V1,W3):2
     [V+V1>=W3,W3>=1,V1>=0,V>=0] 
* CE 421: start(V,V1,V2,V3) = 0+ sel(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 422: start(V,V1,V2,V3) = 0+ sel(V,V1,W3):2
     [V+V1>=W3,W3>=1,V1>=0,V>=0] 
* CE 423: start(V,V1,V2,V3) = 0+ fun7(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 424: start(V,V1,V2,V3) = 0+ fun7(V,V1,W3):2
     [V>=W3,W3>=1,V1>=0] 
* CE 425: start(V,V1,V2,V3) = 0+ proper(W3,X3):1
     [X3=1,W3=0,V=0] 
* CE 426: start(V,V1,V2,V3) = 0+ proper(W3,X3):2
     [X3=2,W3=1,V=1] 
* CE 427: start(V,V1,V2,V3) = 0+ proper(W3,X3):3
     [X3=3,W3=2,V=2] 
* CE 428: start(V,V1,V2,V3) = 0+ proper(V,W3):4
     [V>=0,W3=0] 
* CE 429: start(V,V1,V2,V3) = 0+ fun8(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 430: start(V,V1,V2,V3) = 0+ fun8(V,V1,W3):2
     [V>=W3,W3>=1,V1>=0] 
* CE 431: start(V,V1,V2,V3) = 0+ isLNatKind(V,W3):1
     [V>=0,W3=0] 
* CE 432: start(V,V1,V2,V3) = 0+ isLNatKind(V,W3):2
     [V>=W3,W3>=1] 
* CE 433: start(V,V1,V2,V3) = 0+ fun9(V,V1,V2,W3):1
     [V2>=0,V1>=0,V>=0,W3=0] 
* CE 434: start(V,V1,V2,V3) = 0+ fun9(V,V1,V2,W3):2
     [V>=W3,W3>=1,V2>=0,V1>=0] 
* CE 435: start(V,V1,V2,V3) = 0+ fun10(V,W3):1
     [V>=0,W3=0] 
* CE 436: start(V,V1,V2,V3) = 0+ fun10(V,W3):2
     [V>=W3,W3>=1] 
* CE 437: start(V,V1,V2,V3) = 0+ fun11(V,W3):1
     [V>=0,W3=0] 
* CE 438: start(V,V1,V2,V3) = 0+ fun11(V,W3):2
     [V>=W3,W3>=1] 
* CE 439: start(V,V1,V2,V3) = 0+ fun12(V,V1,V2,V3,W3):1
     [V3>=0,V2>=0,V1>=0,V>=0,W3=0] 
* CE 440: start(V,V1,V2,V3) = 0+ fun12(V,V1,V2,V3,W3):2
     [V>=W3,W3>=1,V3>=0,V2>=0,V1>=0] 
* CE 441: start(V,V1,V2,V3) = 0+ splitAt(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 442: start(V,V1,V2,V3) = 0+ splitAt(V,V1,W3):2
     [V+V1>=W3,W3>=1,V1>=0,V>=0] 
* CE 443: start(V,V1,V2,V3) = 0+ fun13(V,W3):1
     [V>=0,W3=0] 
* CE 444: start(V,V1,V2,V3) = 0+ fun13(V,W3):2
     [V>=W3,W3>=1] 
* CE 445: start(V,V1,V2,V3) = 0+ head(V,W3):1
     [V>=0,W3=0] 
* CE 446: start(V,V1,V2,V3) = 0+ head(V,W3):2
     [V>=W3,W3>=1] 
* CE 447: start(V,V1,V2,V3) = 0+ fun14(V,W3):1
     [V>=0,W3=0] 
* CE 448: start(V,V1,V2,V3) = 0+ fun14(V,W3):2
     [V>=W3,W3>=1] 
* CE 449: start(V,V1,V2,V3) = 0+ fst(V,W3):1
     [V>=0,W3=0] 
* CE 450: start(V,V1,V2,V3) = 0+ fst(V,W3):2
     [V>=W3,W3>=1] 
* CE 451: start(V,V1,V2,V3) = 0+ afterNth(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 452: start(V,V1,V2,V3) = 0+ afterNth(V,V1,W3):2
     [V+V1>=W3,W3>=1,V1>=0,V>=0] 
* CE 453: start(V,V1,V2,V3) = 0+ tail(V,W3):1
     [V>=0,W3=0] 
* CE 454: start(V,V1,V2,V3) = 0+ tail(V,W3):2
     [V>=W3,W3>=1] 
* CE 455: start(V,V1,V2,V3) = 0+ fun15(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 456: start(V,V1,V2,V3) = 0+ fun15(V,V1,W3):2
     [V>=W3,W3>=1,V1>=0] 
* CE 457: start(V,V1,V2,V3) = 0+ isNaturalKind(V,W3):1
     [V>=0,W3=0] 
* CE 458: start(V,V1,V2,V3) = 0+ isNaturalKind(V,W3):2
     [V>=W3,W3>=1] 
* CE 459: start(V,V1,V2,V3) = 0+ fun16(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 460: start(V,V1,V2,V3) = 0+ fun16(V,V1,W3):2
     [V>=W3,W3>=1,V1>=0] 
* CE 461: start(V,V1,V2,V3) = 0+ fun17(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 462: start(V,V1,V2,V3) = 0+ fun17(V,V1,W3):2
     [V>=W3,W3>=1,V1>=0] 
* CE 463: start(V,V1,V2,V3) = 0+ fun18(V,W3):1
     [V>=0,W3=0] 
* CE 464: start(V,V1,V2,V3) = 0+ fun18(V,W3):2
     [V>=W3,W3>=1] 
* CE 465: start(V,V1,V2,V3) = 0+ fun19(V,W3):1
     [V>=0,W3=0] 
* CE 466: start(V,V1,V2,V3) = 0+ fun19(V,W3):2
     [V>=W3,W3>=1] 
* CE 467: start(V,V1,V2,V3) = 0+ fun20(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 468: start(V,V1,V2,V3) = 0+ fun20(V,V1,W3):2
     [V>=W3,W3>=1,V1>=0] 
* CE 469: start(V,V1,V2,V3) = 0+ fun21(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 470: start(V,V1,V2,V3) = 0+ fun21(V,V1,W3):2
     [V>=W3,W3>=1,V1>=0] 
* CE 471: start(V,V1,V2,V3) = 0+ fun22(V,V1,V2,W3):1
     [V2>=0,V1>=0,V>=0,W3=0] 
* CE 472: start(V,V1,V2,V3) = 0+ fun22(V,V1,V2,W3):2
     [V>=W3,W3>=1,V2>=0,V1>=0] 
* CE 473: start(V,V1,V2,V3) = 0+ fun23(V,W3):1
     [V>=0,W3=0] 
* CE 474: start(V,V1,V2,V3) = 0+ fun23(V,W3):2
     [V>=W3,W3>=1] 
* CE 475: start(V,V1,V2,V3) = 0+ take(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 476: start(V,V1,V2,V3) = 0+ take(V,V1,W3):2
     [V+V1>=W3,W3>=1,V1>=0,V>=0] 
* CE 477: start(V,V1,V2,V3) = 0+ and(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 478: start(V,V1,V2,V3) = 0+ and(V,V1,W3):2
     [V>=W3,W3>=1,V1>=0] 
* CE 479: start(V,V1,V2,V3) = 0+ natsFrom(V,W3):1
     [V>=0,W3=0] 
* CE 480: start(V,V1,V2,V3) = 0+ natsFrom(V,W3):2
     [V>=W3,W3>=1] 
* CE 481: start(V,V1,V2,V3) = 0+ fun24(V,V1,V2,W3):1
     [V2>=0,V1>=0,V>=0,W3=0] 
* CE 482: start(V,V1,V2,V3) = 0+ fun24(V,V1,V2,W3):2
     [V>=W3,W3>=1,V2>=0,V1>=0] 
* CE 483: start(V,V1,V2,V3) = 0+ isPLNatKind(V,W3):1
     [V>=0,W3=0] 
* CE 484: start(V,V1,V2,V3) = 0+ isPLNatKind(V,W3):2
     [V>=W3,W3>=1] 
* CE 485: start(V,V1,V2,V3) = 0+ s(V,W3):1
     [V>=0,W3=0] 
* CE 486: start(V,V1,V2,V3) = 0+ s(V,W3):2
     [V>=W3,W3>=1] 
* CE 487: start(V,V1,V2,V3) = 0+ fun25(V,V1,V2,W3):1
     [V2>=0,V1>=0,V>=0,W3=0] 
* CE 488: start(V,V1,V2,V3) = 0+ fun25(V,V1,V2,W3):2
     [V>=W3,W3>=1,V2>=0,V1>=0] 
* CE 489: start(V,V1,V2,V3) = 0+ cons(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 490: start(V,V1,V2,V3) = 0+ cons(V,V1,W3):2
     [V>=W3,W3>=1,V1>=0] 
* CE 491: start(V,V1,V2,V3) = 0+ fun26(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 492: start(V,V1,V2,V3) = 0+ fun26(V,V1,W3):2
     [V>=W3,W3>=1,V1>=0] 
* CE 493: start(V,V1,V2,V3) = 0+ isNatural(V,W3):1
     [V>=0,W3=0] 
* CE 494: start(V,V1,V2,V3) = 0+ isNatural(V,W3):2
     [V>=W3,W3>=1] 
* CE 495: start(V,V1,V2,V3) = 0+ fun27(V,V1,V2,W3):1
     [V2>=0,V1>=0,V>=0,W3=0] 
* CE 496: start(V,V1,V2,V3) = 0+ fun27(V,V1,V2,W3):2
     [V>=W3,W3>=1,V2>=0,V1>=0] 
* CE 497: start(V,V1,V2,V3) = 0+ fun28(V,V1,V2,W3):1
     [V2>=0,V1>=0,V>=0,W3=0] 
* CE 498: start(V,V1,V2,V3) = 0+ fun28(V,V1,V2,W3):2
     [V>=W3,W3>=1,V2>=0,V1>=0] 
* CE 499: start(V,V1,V2,V3) = 0+ fun29(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 500: start(V,V1,V2,V3) = 0+ fun29(V,V1,W3):2
     [V>=W3,W3>=1,V1>=0] 
* CE 501: start(V,V1,V2,V3) = 0+ snd(V,W3):1
     [V>=0,W3=0] 
* CE 502: start(V,V1,V2,V3) = 0+ snd(V,W3):2
     [V>=W3,W3>=1] 
* CE 503: start(V,V1,V2,V3) = 0+ fun30(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 504: start(V,V1,V2,V3) = 0+ fun30(V,V1,W3):2
     [V>=W3,W3>=1,V1>=0] 
* CE 505: start(V,V1,V2,V3) = 0+ fun31(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 506: start(V,V1,V2,V3) = 0+ fun31(V,V1,W3):2
     [V>=W3,W3>=1,V1>=0] 
* CE 507: start(V,V1,V2,V3) = 0+ fun32(V,W3):1
     [V>=0,W3=0] 
* CE 508: start(V,V1,V2,V3) = 0+ fun32(V,W3):2
     [V>=W3,W3>=1] 
* CE 509: start(V,V1,V2,V3) = 0+ isPLNat(V,W3):1
     [V>=0,W3=0] 
* CE 510: start(V,V1,V2,V3) = 0+ isPLNat(V,W3):2
     [V>=W3,W3>=1] 
* CE 511: start(V,V1,V2,V3) = 0+ fun33(V,V1,V2,W3):1
     [V2>=0,V1>=0,V>=0,W3=0] 
* CE 512: start(V,V1,V2,V3) = 0+ fun33(V,V1,V2,W3):2
     [V>=W3,W3>=1,V2>=0,V1>=0] 
* CE 513: start(V,V1,V2,V3) = 0+ fun34(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 514: start(V,V1,V2,V3) = 0+ fun34(V,V1,W3):2
     [V>=W3,W3>=1,V1>=0] 
* CE 515: start(V,V1,V2,V3) = 0+ fun35(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 516: start(V,V1,V2,V3) = 0+ fun35(V,V1,W3):2
     [V>=W3,W3>=1,V1>=0] 
* CE 517: start(V,V1,V2,V3) = 0+ fun36(V,W3):1
     [V>=0,W3=0] 
* CE 518: start(V,V1,V2,V3) = 0+ fun36(V,W3):2
     [V>=W3,W3>=1] 
* CE 519: start(V,V1,V2,V3) = 0+ fun37(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 520: start(V,V1,V2,V3) = 0+ fun37(V,V1,W3):2
     [V>=W3,W3>=1,V1>=0] 
* CE 521: start(V,V1,V2,V3) = 0+ fun38(V,W3):1
     [V>=0,W3=0] 
* CE 522: start(V,V1,V2,V3) = 0+ fun38(V,W3):2
     [V>=W3,W3>=1] 
* CE 523: start(V,V1,V2,V3) = 0+ fun39(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 524: start(V,V1,V2,V3) = 0+ fun39(V,V1,W3):2
     [V>=W3,W3>=1,V1>=0] 
* CE 525: start(V,V1,V2,V3) = 0+ fun40(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 526: start(V,V1,V2,V3) = 0+ fun40(V,V1,W3):2
     [V>=W3,W3>=1,V1>=0] 
* CE 527: start(V,V1,V2,V3) = 0+ isLNat(V,W3):1
     [V>=0,W3=0] 
* CE 528: start(V,V1,V2,V3) = 0+ isLNat(V,W3):2
     [V>=W3,W3>=1] 

### Cost equations --> "Loop" of start/4 
* CEs [427] --> Loop 339 
* CEs [426] --> Loop 340 
* CEs [403,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528] --> Loop 341 
* CEs [404] --> Loop 342 

#### Loops of start/4 
* Loop 339: start(V,V1,V2,V3) [V=2] 
* Loop 340: start(V,V1,V2,V3) [V=1] 
* Loop 341: start(V,V1,V2,V3) [V>=0] 
* Loop 342: start(V,V1,V2,V3) [V>=1] 

### Ranking functions of CR start(V,V1,V2,V3) 

#### Partial ranking functions of CR start(V,V1,V2,V3) 


### Resulting Chains:start(V,V1,V2,V3) 
* [342]...
* [341]
* [340]
* [339]


### Merging Chains  start/4 into  External patterns of execution 
* [[340],[341]] --> 1 
* [[339]] --> 2 
* [[342]] --> 3 


Computing Bounds
=====================================

#### Cost of loops [169,170,171] 

 * loop 169:afterNth(V,V1,Out) -> [afterNth(V',V1',Out')] 
1
 * loop 170:afterNth(V,V1,Out) -> [afterNth(V',V1',Out')] 
1
 * loop 171:afterNth(V,V1,Out) -> [afterNth(V',V1',Out')] 
1
#### Cost of phase [169,170,171]:afterNth(V,V1,Out) -> [afterNth(V',V1',Out')] 
1*it(169)+1*it(170)+1*it(171)+0
  Such that:aux(1) =< V
aux(2) =< V+V1
aux(3) =< V+V1-V'-V1'
aux(4) =< V-V'
aux(5) =< V1
aux(6) =< V1-V1'
it(170) =< aux(1)
it(171) =< aux(1)
it(169) =< aux(2)
it(170) =< aux(2)
it(171) =< aux(2)
it(169) =< aux(3)
it(170) =< aux(3)
it(171) =< aux(3)
it(170) =< aux(4)
it(171) =< aux(4)
it(169) =< aux(5)
it(171) =< aux(5)
it(169) =< aux(6)
it(171) =< aux(6)

#### Cost of chains of afterNth(V,V1,Out):
* Chain [[169,170,171],172]: 1*it(169)+1*it(170)+1*it(171)+0
  Such that:aux(7) =< V
aux(8) =< V+V1
aux(9) =< V1
it(170) =< aux(7)
it(171) =< aux(7)
it(169) =< aux(8)
it(170) =< aux(8)
it(171) =< aux(8)
it(169) =< aux(9)
it(171) =< aux(9)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [172]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [173,174] 

 * loop 173:and(V,V1,Out) -> [and(V',V1',Out')] 
1
 * loop 174:and(V,V1,Out) -> [and(V',V1',Out')] 
1
#### Cost of phase [173,174]:and(V,V1,Out) -> [and(V',V1',Out')] 
1*it(173)+1*it(174)+0
  Such that:it(174) =< V1
it(174) =< V1-V1'
aux(10) =< V
aux(11) =< V-V'
it(173) =< aux(10)
it(174) =< aux(10)
it(173) =< aux(11)
it(174) =< aux(11)

#### Cost of chains of and(V,V1,Out):
* Chain [[173,174],175]: 1*it(173)+1*it(174)+0
  Such that:aux(10) =< V
it(174) =< V1
aux(11) =< Out
it(173) =< aux(10)
it(174) =< aux(10)
it(173) =< aux(11)
it(174) =< aux(11)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [175]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [176,177] 

 * loop 176:cons(V,V1,Out) -> [cons(V',V1',Out')] 
1
 * loop 177:cons(V,V1,Out) -> [cons(V',V1',Out')] 
1
#### Cost of phase [176,177]:cons(V,V1,Out) -> [cons(V',V1',Out')] 
1*it(176)+1*it(177)+0
  Such that:it(177) =< V1
it(177) =< V1-V1'
aux(12) =< V
aux(13) =< V-V'
it(176) =< aux(12)
it(177) =< aux(12)
it(176) =< aux(13)
it(177) =< aux(13)

#### Cost of chains of cons(V,V1,Out):
* Chain [[176,177],178]: 1*it(176)+1*it(177)+0
  Such that:aux(12) =< V
it(177) =< V1
aux(13) =< Out
it(176) =< aux(12)
it(177) =< aux(12)
it(176) =< aux(13)
it(177) =< aux(13)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [178]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [179] 

 * loop 179:fst(V,Out) -> [fst(V',Out')] 
1
#### Cost of phase [179]:fst(V,Out) -> [fst(V',Out')] 
1*it(179)+0
  Such that:it(179) =< V
it(179) =< V-V'

#### Cost of chains of fst(V,Out):
* Chain [[179],180]: 1*it(179)+0
  Such that:it(179) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [180]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [181,182] 

 * loop 181:fun(V,V1,V2,Out) -> [fun(V',V1',V2',Out')] 
1
 * loop 182:fun(V,V1,V2,Out) -> [fun(V',V1',V2',Out')] 
1
#### Cost of phase [181,182]:fun(V,V1,V2,Out) -> [fun(V',V1',V2',Out')] 
1*it(181)+1*it(182)+0
  Such that:it(182) =< V1
it(182) =< V1-V1'
it(182) =< V2
it(182) =< V2-V2'
aux(14) =< V
aux(15) =< V-V'
it(181) =< aux(14)
it(182) =< aux(14)
it(181) =< aux(15)
it(182) =< aux(15)

#### Cost of chains of fun(V,V1,V2,Out):
* Chain [[181,182],183]: 1*it(181)+1*it(182)+0
  Such that:aux(14) =< V
it(182) =< V1
aux(15) =< Out
it(181) =< aux(14)
it(182) =< aux(14)
it(181) =< aux(15)
it(182) =< aux(15)

  with precondition: [V1>=0,V2>=0,Out>=1,V>=Out] 

* Chain [183]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0] 


#### Cost of loops [184] 

 * loop 184:fun1(V,Out) -> [fun1(V',Out')] 
1
#### Cost of phase [184]:fun1(V,Out) -> [fun1(V',Out')] 
1*it(184)+0
  Such that:it(184) =< V
it(184) =< V-V'

#### Cost of chains of fun1(V,Out):
* Chain [[184],185]: 1*it(184)+0
  Such that:it(184) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [185]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [186] 

 * loop 186:fun10(V,Out) -> [fun10(V',Out')] 
1
#### Cost of phase [186]:fun10(V,Out) -> [fun10(V',Out')] 
1*it(186)+0
  Such that:it(186) =< V
it(186) =< V-V'

#### Cost of chains of fun10(V,Out):
* Chain [[186],187]: 1*it(186)+0
  Such that:it(186) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [187]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [188] 

 * loop 188:fun11(V,Out) -> [fun11(V',Out')] 
1
#### Cost of phase [188]:fun11(V,Out) -> [fun11(V',Out')] 
1*it(188)+0
  Such that:it(188) =< V
it(188) =< V-V'

#### Cost of chains of fun11(V,Out):
* Chain [[188],189]: 1*it(188)+0
  Such that:it(188) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [189]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [190,191] 

 * loop 190:fun12(V,V1,V2,V3,Out) -> [fun12(V',V1',V2',V3',Out')] 
1
 * loop 191:fun12(V,V1,V2,V3,Out) -> [fun12(V',V1',V2',V3',Out')] 
1
#### Cost of phase [190,191]:fun12(V,V1,V2,V3,Out) -> [fun12(V',V1',V2',V3',Out')] 
1*it(190)+1*it(191)+0
  Such that:it(191) =< V1
it(191) =< V1-V1'
it(191) =< V2
it(191) =< V2-V2'
it(191) =< V3
it(191) =< V3-V3'
aux(16) =< V
aux(17) =< V-V'
it(190) =< aux(16)
it(191) =< aux(16)
it(190) =< aux(17)
it(191) =< aux(17)

#### Cost of chains of fun12(V,V1,V2,V3,Out):
* Chain [[190,191],192]: 1*it(190)+1*it(191)+0
  Such that:aux(16) =< V
it(191) =< V1
aux(17) =< Out
it(190) =< aux(16)
it(191) =< aux(16)
it(190) =< aux(17)
it(191) =< aux(17)

  with precondition: [V1>=0,V2>=0,V3>=0,Out>=1,V>=Out] 

* Chain [192]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0,V3>=0] 


#### Cost of loops [193] 

 * loop 193:fun13(V,Out) -> [fun13(V',Out')] 
1
#### Cost of phase [193]:fun13(V,Out) -> [fun13(V',Out')] 
1*it(193)+0
  Such that:it(193) =< V
it(193) =< V-V'

#### Cost of chains of fun13(V,Out):
* Chain [[193],194]: 1*it(193)+0
  Such that:it(193) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [194]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [195] 

 * loop 195:fun14(V,Out) -> [fun14(V',Out')] 
1
#### Cost of phase [195]:fun14(V,Out) -> [fun14(V',Out')] 
1*it(195)+0
  Such that:it(195) =< V
it(195) =< V-V'

#### Cost of chains of fun14(V,Out):
* Chain [[195],196]: 1*it(195)+0
  Such that:it(195) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [196]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [197,198] 

 * loop 197:fun15(V,V1,Out) -> [fun15(V',V1',Out')] 
1
 * loop 198:fun15(V,V1,Out) -> [fun15(V',V1',Out')] 
1
#### Cost of phase [197,198]:fun15(V,V1,Out) -> [fun15(V',V1',Out')] 
1*it(197)+1*it(198)+0
  Such that:it(198) =< V1
it(198) =< V1-V1'
aux(18) =< V
aux(19) =< V-V'
it(197) =< aux(18)
it(198) =< aux(18)
it(197) =< aux(19)
it(198) =< aux(19)

#### Cost of chains of fun15(V,V1,Out):
* Chain [[197,198],199]: 1*it(197)+1*it(198)+0
  Such that:aux(18) =< V
it(198) =< V1
aux(19) =< Out
it(197) =< aux(18)
it(198) =< aux(18)
it(197) =< aux(19)
it(198) =< aux(19)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [199]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [200,201] 

 * loop 200:fun16(V,V1,Out) -> [fun16(V',V1',Out')] 
1
 * loop 201:fun16(V,V1,Out) -> [fun16(V',V1',Out')] 
1
#### Cost of phase [200,201]:fun16(V,V1,Out) -> [fun16(V',V1',Out')] 
1*it(200)+1*it(201)+0
  Such that:it(201) =< V1
it(201) =< V1-V1'
aux(20) =< V
aux(21) =< V-V'
it(200) =< aux(20)
it(201) =< aux(20)
it(200) =< aux(21)
it(201) =< aux(21)

#### Cost of chains of fun16(V,V1,Out):
* Chain [[200,201],202]: 1*it(200)+1*it(201)+0
  Such that:aux(20) =< V
it(201) =< V1
aux(21) =< Out
it(200) =< aux(20)
it(201) =< aux(20)
it(200) =< aux(21)
it(201) =< aux(21)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [202]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [203,204] 

 * loop 203:fun17(V,V1,Out) -> [fun17(V',V1',Out')] 
1
 * loop 204:fun17(V,V1,Out) -> [fun17(V',V1',Out')] 
1
#### Cost of phase [203,204]:fun17(V,V1,Out) -> [fun17(V',V1',Out')] 
1*it(203)+1*it(204)+0
  Such that:it(204) =< V1
it(204) =< V1-V1'
aux(22) =< V
aux(23) =< V-V'
it(203) =< aux(22)
it(204) =< aux(22)
it(203) =< aux(23)
it(204) =< aux(23)

#### Cost of chains of fun17(V,V1,Out):
* Chain [[203,204],205]: 1*it(203)+1*it(204)+0
  Such that:aux(22) =< V
it(204) =< V1
aux(23) =< Out
it(203) =< aux(22)
it(204) =< aux(22)
it(203) =< aux(23)
it(204) =< aux(23)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [205]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [206] 

 * loop 206:fun18(V,Out) -> [fun18(V',Out')] 
1
#### Cost of phase [206]:fun18(V,Out) -> [fun18(V',Out')] 
1*it(206)+0
  Such that:it(206) =< V
it(206) =< V-V'

#### Cost of chains of fun18(V,Out):
* Chain [[206],207]: 1*it(206)+0
  Such that:it(206) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [207]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [208] 

 * loop 208:fun19(V,Out) -> [fun19(V',Out')] 
1
#### Cost of phase [208]:fun19(V,Out) -> [fun19(V',Out')] 
1*it(208)+0
  Such that:it(208) =< V
it(208) =< V-V'

#### Cost of chains of fun19(V,Out):
* Chain [[208],209]: 1*it(208)+0
  Such that:it(208) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [209]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [210,211] 

 * loop 210:fun2(V,V1,Out) -> [fun2(V',V1',Out')] 
1
 * loop 211:fun2(V,V1,Out) -> [fun2(V',V1',Out')] 
1
#### Cost of phase [210,211]:fun2(V,V1,Out) -> [fun2(V',V1',Out')] 
1*it(210)+1*it(211)+0
  Such that:it(211) =< V1
it(211) =< V1-V1'
aux(24) =< V
aux(25) =< V-V'
it(210) =< aux(24)
it(211) =< aux(24)
it(210) =< aux(25)
it(211) =< aux(25)

#### Cost of chains of fun2(V,V1,Out):
* Chain [[210,211],212]: 1*it(210)+1*it(211)+0
  Such that:aux(24) =< V
it(211) =< V1
aux(25) =< Out
it(210) =< aux(24)
it(211) =< aux(24)
it(210) =< aux(25)
it(211) =< aux(25)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [212]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [213,214] 

 * loop 213:fun20(V,V1,Out) -> [fun20(V',V1',Out')] 
1
 * loop 214:fun20(V,V1,Out) -> [fun20(V',V1',Out')] 
1
#### Cost of phase [213,214]:fun20(V,V1,Out) -> [fun20(V',V1',Out')] 
1*it(213)+1*it(214)+0
  Such that:it(214) =< V1
it(214) =< V1-V1'
aux(26) =< V
aux(27) =< V-V'
it(213) =< aux(26)
it(214) =< aux(26)
it(213) =< aux(27)
it(214) =< aux(27)

#### Cost of chains of fun20(V,V1,Out):
* Chain [[213,214],215]: 1*it(213)+1*it(214)+0
  Such that:aux(26) =< V
it(214) =< V1
aux(27) =< Out
it(213) =< aux(26)
it(214) =< aux(26)
it(213) =< aux(27)
it(214) =< aux(27)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [215]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [216,217] 

 * loop 216:fun21(V,V1,Out) -> [fun21(V',V1',Out')] 
1
 * loop 217:fun21(V,V1,Out) -> [fun21(V',V1',Out')] 
1
#### Cost of phase [216,217]:fun21(V,V1,Out) -> [fun21(V',V1',Out')] 
1*it(216)+1*it(217)+0
  Such that:it(217) =< V1
it(217) =< V1-V1'
aux(28) =< V
aux(29) =< V-V'
it(216) =< aux(28)
it(217) =< aux(28)
it(216) =< aux(29)
it(217) =< aux(29)

#### Cost of chains of fun21(V,V1,Out):
* Chain [[216,217],218]: 1*it(216)+1*it(217)+0
  Such that:aux(28) =< V
it(217) =< V1
aux(29) =< Out
it(216) =< aux(28)
it(217) =< aux(28)
it(216) =< aux(29)
it(217) =< aux(29)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [218]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [219,220] 

 * loop 219:fun22(V,V1,V2,Out) -> [fun22(V',V1',V2',Out')] 
1
 * loop 220:fun22(V,V1,V2,Out) -> [fun22(V',V1',V2',Out')] 
1
#### Cost of phase [219,220]:fun22(V,V1,V2,Out) -> [fun22(V',V1',V2',Out')] 
1*it(219)+1*it(220)+0
  Such that:it(220) =< V1
it(220) =< V1-V1'
it(220) =< V2
it(220) =< V2-V2'
aux(30) =< V
aux(31) =< V-V'
it(219) =< aux(30)
it(220) =< aux(30)
it(219) =< aux(31)
it(220) =< aux(31)

#### Cost of chains of fun22(V,V1,V2,Out):
* Chain [[219,220],221]: 1*it(219)+1*it(220)+0
  Such that:aux(30) =< V
it(220) =< V1
aux(31) =< Out
it(219) =< aux(30)
it(220) =< aux(30)
it(219) =< aux(31)
it(220) =< aux(31)

  with precondition: [V1>=0,V2>=0,Out>=1,V>=Out] 

* Chain [221]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0] 


#### Cost of loops [222] 

 * loop 222:fun23(V,Out) -> [fun23(V',Out')] 
1
#### Cost of phase [222]:fun23(V,Out) -> [fun23(V',Out')] 
1*it(222)+0
  Such that:it(222) =< V
it(222) =< V-V'

#### Cost of chains of fun23(V,Out):
* Chain [[222],223]: 1*it(222)+0
  Such that:it(222) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [223]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [224,225] 

 * loop 224:fun24(V,V1,V2,Out) -> [fun24(V',V1',V2',Out')] 
1
 * loop 225:fun24(V,V1,V2,Out) -> [fun24(V',V1',V2',Out')] 
1
#### Cost of phase [224,225]:fun24(V,V1,V2,Out) -> [fun24(V',V1',V2',Out')] 
1*it(224)+1*it(225)+0
  Such that:it(225) =< V1
it(225) =< V1-V1'
it(225) =< V2
it(225) =< V2-V2'
aux(32) =< V
aux(33) =< V-V'
it(224) =< aux(32)
it(225) =< aux(32)
it(224) =< aux(33)
it(225) =< aux(33)

#### Cost of chains of fun24(V,V1,V2,Out):
* Chain [[224,225],226]: 1*it(224)+1*it(225)+0
  Such that:aux(32) =< V
it(225) =< V1
aux(33) =< Out
it(224) =< aux(32)
it(225) =< aux(32)
it(224) =< aux(33)
it(225) =< aux(33)

  with precondition: [V1>=0,V2>=0,Out>=1,V>=Out] 

* Chain [226]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0] 


#### Cost of loops [227,228] 

 * loop 227:fun25(V,V1,V2,Out) -> [fun25(V',V1',V2',Out')] 
1
 * loop 228:fun25(V,V1,V2,Out) -> [fun25(V',V1',V2',Out')] 
1
#### Cost of phase [227,228]:fun25(V,V1,V2,Out) -> [fun25(V',V1',V2',Out')] 
1*it(227)+1*it(228)+0
  Such that:it(228) =< V1
it(228) =< V1-V1'
it(228) =< V2
it(228) =< V2-V2'
aux(34) =< V
aux(35) =< V-V'
it(227) =< aux(34)
it(228) =< aux(34)
it(227) =< aux(35)
it(228) =< aux(35)

#### Cost of chains of fun25(V,V1,V2,Out):
* Chain [[227,228],229]: 1*it(227)+1*it(228)+0
  Such that:aux(34) =< V
it(228) =< V1
aux(35) =< Out
it(227) =< aux(34)
it(228) =< aux(34)
it(227) =< aux(35)
it(228) =< aux(35)

  with precondition: [V1>=0,V2>=0,Out>=1,V>=Out] 

* Chain [229]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0] 


#### Cost of loops [230,231] 

 * loop 230:fun26(V,V1,Out) -> [fun26(V',V1',Out')] 
1
 * loop 231:fun26(V,V1,Out) -> [fun26(V',V1',Out')] 
1
#### Cost of phase [230,231]:fun26(V,V1,Out) -> [fun26(V',V1',Out')] 
1*it(230)+1*it(231)+0
  Such that:it(231) =< V1
it(231) =< V1-V1'
aux(36) =< V
aux(37) =< V-V'
it(230) =< aux(36)
it(231) =< aux(36)
it(230) =< aux(37)
it(231) =< aux(37)

#### Cost of chains of fun26(V,V1,Out):
* Chain [[230,231],232]: 1*it(230)+1*it(231)+0
  Such that:aux(36) =< V
it(231) =< V1
aux(37) =< Out
it(230) =< aux(36)
it(231) =< aux(36)
it(230) =< aux(37)
it(231) =< aux(37)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [232]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [233,234] 

 * loop 233:fun27(V,V1,V2,Out) -> [fun27(V',V1',V2',Out')] 
1
 * loop 234:fun27(V,V1,V2,Out) -> [fun27(V',V1',V2',Out')] 
1
#### Cost of phase [233,234]:fun27(V,V1,V2,Out) -> [fun27(V',V1',V2',Out')] 
1*it(233)+1*it(234)+0
  Such that:it(234) =< V1
it(234) =< V1-V1'
it(234) =< V2
it(234) =< V2-V2'
aux(38) =< V
aux(39) =< V-V'
it(233) =< aux(38)
it(234) =< aux(38)
it(233) =< aux(39)
it(234) =< aux(39)

#### Cost of chains of fun27(V,V1,V2,Out):
* Chain [[233,234],235]: 1*it(233)+1*it(234)+0
  Such that:aux(38) =< V
it(234) =< V1
aux(39) =< Out
it(233) =< aux(38)
it(234) =< aux(38)
it(233) =< aux(39)
it(234) =< aux(39)

  with precondition: [V1>=0,V2>=0,Out>=1,V>=Out] 

* Chain [235]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0] 


#### Cost of loops [236,237] 

 * loop 236:fun28(V,V1,V2,Out) -> [fun28(V',V1',V2',Out')] 
1
 * loop 237:fun28(V,V1,V2,Out) -> [fun28(V',V1',V2',Out')] 
1
#### Cost of phase [236,237]:fun28(V,V1,V2,Out) -> [fun28(V',V1',V2',Out')] 
1*it(236)+1*it(237)+0
  Such that:it(237) =< V1
it(237) =< V1-V1'
it(237) =< V2
it(237) =< V2-V2'
aux(40) =< V
aux(41) =< V-V'
it(236) =< aux(40)
it(237) =< aux(40)
it(236) =< aux(41)
it(237) =< aux(41)

#### Cost of chains of fun28(V,V1,V2,Out):
* Chain [[236,237],238]: 1*it(236)+1*it(237)+0
  Such that:aux(40) =< V
it(237) =< V1
aux(41) =< Out
it(236) =< aux(40)
it(237) =< aux(40)
it(236) =< aux(41)
it(237) =< aux(41)

  with precondition: [V1>=0,V2>=0,Out>=1,V>=Out] 

* Chain [238]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0] 


#### Cost of loops [239,240] 

 * loop 239:fun29(V,V1,Out) -> [fun29(V',V1',Out')] 
1
 * loop 240:fun29(V,V1,Out) -> [fun29(V',V1',Out')] 
1
#### Cost of phase [239,240]:fun29(V,V1,Out) -> [fun29(V',V1',Out')] 
1*it(239)+1*it(240)+0
  Such that:it(240) =< V1
it(240) =< V1-V1'
aux(42) =< V
aux(43) =< V-V'
it(239) =< aux(42)
it(240) =< aux(42)
it(239) =< aux(43)
it(240) =< aux(43)

#### Cost of chains of fun29(V,V1,Out):
* Chain [[239,240],241]: 1*it(239)+1*it(240)+0
  Such that:aux(42) =< V
it(240) =< V1
aux(43) =< Out
it(239) =< aux(42)
it(240) =< aux(42)
it(239) =< aux(43)
it(240) =< aux(43)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [241]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [242] 

 * loop 242:fun3(V,Out) -> [fun3(V',Out')] 
1
#### Cost of phase [242]:fun3(V,Out) -> [fun3(V',Out')] 
1*it(242)+0
  Such that:it(242) =< V
it(242) =< V-V'

#### Cost of chains of fun3(V,Out):
* Chain [[242],243]: 1*it(242)+0
  Such that:it(242) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [243]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [244,245] 

 * loop 244:fun30(V,V1,Out) -> [fun30(V',V1',Out')] 
1
 * loop 245:fun30(V,V1,Out) -> [fun30(V',V1',Out')] 
1
#### Cost of phase [244,245]:fun30(V,V1,Out) -> [fun30(V',V1',Out')] 
1*it(244)+1*it(245)+0
  Such that:it(245) =< V1
it(245) =< V1-V1'
aux(44) =< V
aux(45) =< V-V'
it(244) =< aux(44)
it(245) =< aux(44)
it(244) =< aux(45)
it(245) =< aux(45)

#### Cost of chains of fun30(V,V1,Out):
* Chain [[244,245],246]: 1*it(244)+1*it(245)+0
  Such that:aux(44) =< V
it(245) =< V1
aux(45) =< Out
it(244) =< aux(44)
it(245) =< aux(44)
it(244) =< aux(45)
it(245) =< aux(45)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [246]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [247,248] 

 * loop 247:fun31(V,V1,Out) -> [fun31(V',V1',Out')] 
1
 * loop 248:fun31(V,V1,Out) -> [fun31(V',V1',Out')] 
1
#### Cost of phase [247,248]:fun31(V,V1,Out) -> [fun31(V',V1',Out')] 
1*it(247)+1*it(248)+0
  Such that:it(248) =< V1
it(248) =< V1-V1'
aux(46) =< V
aux(47) =< V-V'
it(247) =< aux(46)
it(248) =< aux(46)
it(247) =< aux(47)
it(248) =< aux(47)

#### Cost of chains of fun31(V,V1,Out):
* Chain [[247,248],249]: 1*it(247)+1*it(248)+0
  Such that:aux(46) =< V
it(248) =< V1
aux(47) =< Out
it(247) =< aux(46)
it(248) =< aux(46)
it(247) =< aux(47)
it(248) =< aux(47)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [249]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [250] 

 * loop 250:fun32(V,Out) -> [fun32(V',Out')] 
1
#### Cost of phase [250]:fun32(V,Out) -> [fun32(V',Out')] 
1*it(250)+0
  Such that:it(250) =< V
it(250) =< V-V'

#### Cost of chains of fun32(V,Out):
* Chain [[250],251]: 1*it(250)+0
  Such that:it(250) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [251]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [252,253] 

 * loop 252:fun33(V,V1,V2,Out) -> [fun33(V',V1',V2',Out')] 
1
 * loop 253:fun33(V,V1,V2,Out) -> [fun33(V',V1',V2',Out')] 
1
#### Cost of phase [252,253]:fun33(V,V1,V2,Out) -> [fun33(V',V1',V2',Out')] 
1*it(252)+1*it(253)+0
  Such that:it(253) =< V1
it(253) =< V1-V1'
it(253) =< V2
it(253) =< V2-V2'
aux(48) =< V
aux(49) =< V-V'
it(252) =< aux(48)
it(253) =< aux(48)
it(252) =< aux(49)
it(253) =< aux(49)

#### Cost of chains of fun33(V,V1,V2,Out):
* Chain [[252,253],254]: 1*it(252)+1*it(253)+0
  Such that:aux(48) =< V
it(253) =< V1
aux(49) =< Out
it(252) =< aux(48)
it(253) =< aux(48)
it(252) =< aux(49)
it(253) =< aux(49)

  with precondition: [V1>=0,V2>=0,Out>=1,V>=Out] 

* Chain [254]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0] 


#### Cost of loops [255,256] 

 * loop 255:fun34(V,V1,Out) -> [fun34(V',V1',Out')] 
1
 * loop 256:fun34(V,V1,Out) -> [fun34(V',V1',Out')] 
1
#### Cost of phase [255,256]:fun34(V,V1,Out) -> [fun34(V',V1',Out')] 
1*it(255)+1*it(256)+0
  Such that:it(256) =< V1
it(256) =< V1-V1'
aux(50) =< V
aux(51) =< V-V'
it(255) =< aux(50)
it(256) =< aux(50)
it(255) =< aux(51)
it(256) =< aux(51)

#### Cost of chains of fun34(V,V1,Out):
* Chain [[255,256],257]: 1*it(255)+1*it(256)+0
  Such that:aux(50) =< V
it(256) =< V1
aux(51) =< Out
it(255) =< aux(50)
it(256) =< aux(50)
it(255) =< aux(51)
it(256) =< aux(51)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [257]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [258,259] 

 * loop 258:fun35(V,V1,Out) -> [fun35(V',V1',Out')] 
1
 * loop 259:fun35(V,V1,Out) -> [fun35(V',V1',Out')] 
1
#### Cost of phase [258,259]:fun35(V,V1,Out) -> [fun35(V',V1',Out')] 
1*it(258)+1*it(259)+0
  Such that:it(259) =< V1
it(259) =< V1-V1'
aux(52) =< V
aux(53) =< V-V'
it(258) =< aux(52)
it(259) =< aux(52)
it(258) =< aux(53)
it(259) =< aux(53)

#### Cost of chains of fun35(V,V1,Out):
* Chain [[258,259],260]: 1*it(258)+1*it(259)+0
  Such that:aux(52) =< V
it(259) =< V1
aux(53) =< Out
it(258) =< aux(52)
it(259) =< aux(52)
it(258) =< aux(53)
it(259) =< aux(53)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [260]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [261] 

 * loop 261:fun36(V,Out) -> [fun36(V',Out')] 
1
#### Cost of phase [261]:fun36(V,Out) -> [fun36(V',Out')] 
1*it(261)+0
  Such that:it(261) =< V
it(261) =< V-V'

#### Cost of chains of fun36(V,Out):
* Chain [[261],262]: 1*it(261)+0
  Such that:it(261) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [262]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [263,264] 

 * loop 263:fun37(V,V1,Out) -> [fun37(V',V1',Out')] 
1
 * loop 264:fun37(V,V1,Out) -> [fun37(V',V1',Out')] 
1
#### Cost of phase [263,264]:fun37(V,V1,Out) -> [fun37(V',V1',Out')] 
1*it(263)+1*it(264)+0
  Such that:it(264) =< V1
it(264) =< V1-V1'
aux(54) =< V
aux(55) =< V-V'
it(263) =< aux(54)
it(264) =< aux(54)
it(263) =< aux(55)
it(264) =< aux(55)

#### Cost of chains of fun37(V,V1,Out):
* Chain [[263,264],265]: 1*it(263)+1*it(264)+0
  Such that:aux(54) =< V
it(264) =< V1
aux(55) =< Out
it(263) =< aux(54)
it(264) =< aux(54)
it(263) =< aux(55)
it(264) =< aux(55)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [265]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [266] 

 * loop 266:fun38(V,Out) -> [fun38(V',Out')] 
1
#### Cost of phase [266]:fun38(V,Out) -> [fun38(V',Out')] 
1*it(266)+0
  Such that:it(266) =< V
it(266) =< V-V'

#### Cost of chains of fun38(V,Out):
* Chain [[266],267]: 1*it(266)+0
  Such that:it(266) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [267]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [268,269] 

 * loop 268:fun39(V,V1,Out) -> [fun39(V',V1',Out')] 
1
 * loop 269:fun39(V,V1,Out) -> [fun39(V',V1',Out')] 
1
#### Cost of phase [268,269]:fun39(V,V1,Out) -> [fun39(V',V1',Out')] 
1*it(268)+1*it(269)+0
  Such that:it(269) =< V1
it(269) =< V1-V1'
aux(56) =< V
aux(57) =< V-V'
it(268) =< aux(56)
it(269) =< aux(56)
it(268) =< aux(57)
it(269) =< aux(57)

#### Cost of chains of fun39(V,V1,Out):
* Chain [[268,269],270]: 1*it(268)+1*it(269)+0
  Such that:aux(56) =< V
it(269) =< V1
aux(57) =< Out
it(268) =< aux(56)
it(269) =< aux(56)
it(268) =< aux(57)
it(269) =< aux(57)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [270]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [271,272] 

 * loop 271:fun4(V,V1,Out) -> [fun4(V',V1',Out')] 
1
 * loop 272:fun4(V,V1,Out) -> [fun4(V',V1',Out')] 
1
#### Cost of phase [271,272]:fun4(V,V1,Out) -> [fun4(V',V1',Out')] 
1*it(271)+1*it(272)+0
  Such that:it(272) =< V1
it(272) =< V1-V1'
aux(58) =< V
aux(59) =< V-V'
it(271) =< aux(58)
it(272) =< aux(58)
it(271) =< aux(59)
it(272) =< aux(59)

#### Cost of chains of fun4(V,V1,Out):
* Chain [[271,272],273]: 1*it(271)+1*it(272)+0
  Such that:aux(58) =< V
it(272) =< V1
aux(59) =< Out
it(271) =< aux(58)
it(272) =< aux(58)
it(271) =< aux(59)
it(272) =< aux(59)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [273]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [274,275] 

 * loop 274:fun40(V,V1,Out) -> [fun40(V',V1',Out')] 
1
 * loop 275:fun40(V,V1,Out) -> [fun40(V',V1',Out')] 
1
#### Cost of phase [274,275]:fun40(V,V1,Out) -> [fun40(V',V1',Out')] 
1*it(274)+1*it(275)+0
  Such that:it(275) =< V1
it(275) =< V1-V1'
aux(60) =< V
aux(61) =< V-V'
it(274) =< aux(60)
it(275) =< aux(60)
it(274) =< aux(61)
it(275) =< aux(61)

#### Cost of chains of fun40(V,V1,Out):
* Chain [[274,275],276]: 1*it(274)+1*it(275)+0
  Such that:aux(60) =< V
it(275) =< V1
aux(61) =< Out
it(274) =< aux(60)
it(275) =< aux(60)
it(274) =< aux(61)
it(275) =< aux(61)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [276]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [277,278] 

 * loop 277:fun5(V,V1,V2,Out) -> [fun5(V',V1',V2',Out')] 
1
 * loop 278:fun5(V,V1,V2,Out) -> [fun5(V',V1',V2',Out')] 
1
#### Cost of phase [277,278]:fun5(V,V1,V2,Out) -> [fun5(V',V1',V2',Out')] 
1*it(277)+1*it(278)+0
  Such that:it(278) =< V1
it(278) =< V1-V1'
it(278) =< V2
it(278) =< V2-V2'
aux(62) =< V
aux(63) =< V-V'
it(277) =< aux(62)
it(278) =< aux(62)
it(277) =< aux(63)
it(278) =< aux(63)

#### Cost of chains of fun5(V,V1,V2,Out):
* Chain [[277,278],279]: 1*it(277)+1*it(278)+0
  Such that:aux(62) =< V
it(278) =< V1
aux(63) =< Out
it(277) =< aux(62)
it(278) =< aux(62)
it(277) =< aux(63)
it(278) =< aux(63)

  with precondition: [V1>=0,V2>=0,Out>=1,V>=Out] 

* Chain [279]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0] 


#### Cost of loops [280,281] 

 * loop 280:fun6(V,V1,Out) -> [fun6(V',V1',Out')] 
1
 * loop 281:fun6(V,V1,Out) -> [fun6(V',V1',Out')] 
1
#### Cost of phase [280,281]:fun6(V,V1,Out) -> [fun6(V',V1',Out')] 
1*it(280)+1*it(281)+0
  Such that:it(281) =< V1
it(281) =< V1-V1'
aux(64) =< V
aux(65) =< V-V'
it(280) =< aux(64)
it(281) =< aux(64)
it(280) =< aux(65)
it(281) =< aux(65)

#### Cost of chains of fun6(V,V1,Out):
* Chain [[280,281],282]: 1*it(280)+1*it(281)+0
  Such that:aux(64) =< V
it(281) =< V1
aux(65) =< Out
it(280) =< aux(64)
it(281) =< aux(64)
it(280) =< aux(65)
it(281) =< aux(65)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [282]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [283,284] 

 * loop 283:fun7(V,V1,Out) -> [fun7(V',V1',Out')] 
1
 * loop 284:fun7(V,V1,Out) -> [fun7(V',V1',Out')] 
1
#### Cost of phase [283,284]:fun7(V,V1,Out) -> [fun7(V',V1',Out')] 
1*it(283)+1*it(284)+0
  Such that:it(284) =< V1
it(284) =< V1-V1'
aux(66) =< V
aux(67) =< V-V'
it(283) =< aux(66)
it(284) =< aux(66)
it(283) =< aux(67)
it(284) =< aux(67)

#### Cost of chains of fun7(V,V1,Out):
* Chain [[283,284],285]: 1*it(283)+1*it(284)+0
  Such that:aux(66) =< V
it(284) =< V1
aux(67) =< Out
it(283) =< aux(66)
it(284) =< aux(66)
it(283) =< aux(67)
it(284) =< aux(67)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [285]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [286,287] 

 * loop 286:fun8(V,V1,Out) -> [fun8(V',V1',Out')] 
1
 * loop 287:fun8(V,V1,Out) -> [fun8(V',V1',Out')] 
1
#### Cost of phase [286,287]:fun8(V,V1,Out) -> [fun8(V',V1',Out')] 
1*it(286)+1*it(287)+0
  Such that:it(287) =< V1
it(287) =< V1-V1'
aux(68) =< V
aux(69) =< V-V'
it(286) =< aux(68)
it(287) =< aux(68)
it(286) =< aux(69)
it(287) =< aux(69)

#### Cost of chains of fun8(V,V1,Out):
* Chain [[286,287],288]: 1*it(286)+1*it(287)+0
  Such that:aux(68) =< V
it(287) =< V1
aux(69) =< Out
it(286) =< aux(68)
it(287) =< aux(68)
it(286) =< aux(69)
it(287) =< aux(69)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [288]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [289,290] 

 * loop 289:fun9(V,V1,V2,Out) -> [fun9(V',V1',V2',Out')] 
1
 * loop 290:fun9(V,V1,V2,Out) -> [fun9(V',V1',V2',Out')] 
1
#### Cost of phase [289,290]:fun9(V,V1,V2,Out) -> [fun9(V',V1',V2',Out')] 
1*it(289)+1*it(290)+0
  Such that:it(290) =< V1
it(290) =< V1-V1'
it(290) =< V2
it(290) =< V2-V2'
aux(70) =< V
aux(71) =< V-V'
it(289) =< aux(70)
it(290) =< aux(70)
it(289) =< aux(71)
it(290) =< aux(71)

#### Cost of chains of fun9(V,V1,V2,Out):
* Chain [[289,290],291]: 1*it(289)+1*it(290)+0
  Such that:aux(70) =< V
it(290) =< V1
aux(71) =< Out
it(289) =< aux(70)
it(290) =< aux(70)
it(289) =< aux(71)
it(290) =< aux(71)

  with precondition: [V1>=0,V2>=0,Out>=1,V>=Out] 

* Chain [291]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0] 


#### Cost of loops [292] 

 * loop 292:head(V,Out) -> [head(V',Out')] 
1
#### Cost of phase [292]:head(V,Out) -> [head(V',Out')] 
1*it(292)+0
  Such that:it(292) =< V
it(292) =< V-V'

#### Cost of chains of head(V,Out):
* Chain [[292],293]: 1*it(292)+0
  Such that:it(292) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [293]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [294] 

 * loop 294:isLNat(V,Out) -> [isLNat(V',Out')] 
1
#### Cost of phase [294]:isLNat(V,Out) -> [isLNat(V',Out')] 
1*it(294)+0
  Such that:it(294) =< V
it(294) =< V-V'

#### Cost of chains of isLNat(V,Out):
* Chain [[294],295]: 1*it(294)+0
  Such that:it(294) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [295]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [296] 

 * loop 296:isLNatKind(V,Out) -> [isLNatKind(V',Out')] 
1
#### Cost of phase [296]:isLNatKind(V,Out) -> [isLNatKind(V',Out')] 
1*it(296)+0
  Such that:it(296) =< V
it(296) =< V-V'

#### Cost of chains of isLNatKind(V,Out):
* Chain [[296],297]: 1*it(296)+0
  Such that:it(296) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [297]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [298] 

 * loop 298:isNatural(V,Out) -> [isNatural(V',Out')] 
1
#### Cost of phase [298]:isNatural(V,Out) -> [isNatural(V',Out')] 
1*it(298)+0
  Such that:it(298) =< V
it(298) =< V-V'

#### Cost of chains of isNatural(V,Out):
* Chain [[298],299]: 1*it(298)+0
  Such that:it(298) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [299]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [300] 

 * loop 300:isNaturalKind(V,Out) -> [isNaturalKind(V',Out')] 
1
#### Cost of phase [300]:isNaturalKind(V,Out) -> [isNaturalKind(V',Out')] 
1*it(300)+0
  Such that:it(300) =< V
it(300) =< V-V'

#### Cost of chains of isNaturalKind(V,Out):
* Chain [[300],301]: 1*it(300)+0
  Such that:it(300) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [301]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [302] 

 * loop 302:isPLNat(V,Out) -> [isPLNat(V',Out')] 
1
#### Cost of phase [302]:isPLNat(V,Out) -> [isPLNat(V',Out')] 
1*it(302)+0
  Such that:it(302) =< V
it(302) =< V-V'

#### Cost of chains of isPLNat(V,Out):
* Chain [[302],303]: 1*it(302)+0
  Such that:it(302) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [303]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [304] 

 * loop 304:isPLNatKind(V,Out) -> [isPLNatKind(V',Out')] 
1
#### Cost of phase [304]:isPLNatKind(V,Out) -> [isPLNatKind(V',Out')] 
1*it(304)+0
  Such that:it(304) =< V
it(304) =< V-V'

#### Cost of chains of isPLNatKind(V,Out):
* Chain [[304],305]: 1*it(304)+0
  Such that:it(304) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [305]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [306] 

 * loop 306:natsFrom(V,Out) -> [natsFrom(V',Out')] 
1
#### Cost of phase [306]:natsFrom(V,Out) -> [natsFrom(V',Out')] 
1*it(306)+0
  Such that:it(306) =< V
it(306) =< V-V'

#### Cost of chains of natsFrom(V,Out):
* Chain [[306],307]: 1*it(306)+0
  Such that:it(306) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [307]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [308,309,310] 

 * loop 308:pair(V,V1,Out) -> [pair(V',V1',Out')] 
1
 * loop 309:pair(V,V1,Out) -> [pair(V',V1',Out')] 
1
 * loop 310:pair(V,V1,Out) -> [pair(V',V1',Out')] 
1
#### Cost of phase [308,309,310]:pair(V,V1,Out) -> [pair(V',V1',Out')] 
1*it(308)+1*it(309)+1*it(310)+0
  Such that:aux(72) =< V
aux(73) =< V+V1
aux(74) =< V+V1-V'-V1'
aux(75) =< V-V'
aux(76) =< V1
aux(77) =< V1-V1'
it(309) =< aux(72)
it(310) =< aux(72)
it(308) =< aux(73)
it(309) =< aux(73)
it(310) =< aux(73)
it(308) =< aux(74)
it(309) =< aux(74)
it(310) =< aux(74)
it(309) =< aux(75)
it(310) =< aux(75)
it(308) =< aux(76)
it(310) =< aux(76)
it(308) =< aux(77)
it(310) =< aux(77)

#### Cost of chains of pair(V,V1,Out):
* Chain [[308,309,310],311]: 1*it(308)+1*it(309)+1*it(310)+0
  Such that:aux(78) =< V
aux(79) =< V+V1
aux(80) =< V1
it(309) =< aux(78)
it(310) =< aux(78)
it(308) =< aux(79)
it(309) =< aux(79)
it(310) =< aux(79)
it(308) =< aux(80)
it(310) =< aux(80)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [311]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of chains of proper(V,Out):
* Chain [315]: 1
  with precondition: [V=0,Out=1] 

* Chain [314]: 1
  with precondition: [V=1,Out=2] 

* Chain [313]: 1
  with precondition: [V=2,Out=3] 

* Chain [312]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [316] 

 * loop 316:s(V,Out) -> [s(V',Out')] 
1
#### Cost of phase [316]:s(V,Out) -> [s(V',Out')] 
1*it(316)+0
  Such that:it(316) =< V
it(316) =< V-V'

#### Cost of chains of s(V,Out):
* Chain [[316],317]: 1*it(316)+0
  Such that:it(316) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [317]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [318,319,320] 

 * loop 318:sel(V,V1,Out) -> [sel(V',V1',Out')] 
1
 * loop 319:sel(V,V1,Out) -> [sel(V',V1',Out')] 
1
 * loop 320:sel(V,V1,Out) -> [sel(V',V1',Out')] 
1
#### Cost of phase [318,319,320]:sel(V,V1,Out) -> [sel(V',V1',Out')] 
1*it(318)+1*it(319)+1*it(320)+0
  Such that:aux(81) =< V
aux(82) =< V+V1
aux(83) =< V+V1-V'-V1'
aux(84) =< V-V'
aux(85) =< V1
aux(86) =< V1-V1'
it(319) =< aux(81)
it(320) =< aux(81)
it(318) =< aux(82)
it(319) =< aux(82)
it(320) =< aux(82)
it(318) =< aux(83)
it(319) =< aux(83)
it(320) =< aux(83)
it(319) =< aux(84)
it(320) =< aux(84)
it(318) =< aux(85)
it(320) =< aux(85)
it(318) =< aux(86)
it(320) =< aux(86)

#### Cost of chains of sel(V,V1,Out):
* Chain [[318,319,320],321]: 1*it(318)+1*it(319)+1*it(320)+0
  Such that:aux(87) =< V
aux(88) =< V+V1
aux(89) =< V1
it(319) =< aux(87)
it(320) =< aux(87)
it(318) =< aux(88)
it(319) =< aux(88)
it(320) =< aux(88)
it(318) =< aux(89)
it(320) =< aux(89)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [321]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [322] 

 * loop 322:snd(V,Out) -> [snd(V',Out')] 
1
#### Cost of phase [322]:snd(V,Out) -> [snd(V',Out')] 
1*it(322)+0
  Such that:it(322) =< V
it(322) =< V-V'

#### Cost of chains of snd(V,Out):
* Chain [[322],323]: 1*it(322)+0
  Such that:it(322) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [323]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [324,325,326] 

 * loop 324:splitAt(V,V1,Out) -> [splitAt(V',V1',Out')] 
1
 * loop 325:splitAt(V,V1,Out) -> [splitAt(V',V1',Out')] 
1
 * loop 326:splitAt(V,V1,Out) -> [splitAt(V',V1',Out')] 
1
#### Cost of phase [324,325,326]:splitAt(V,V1,Out) -> [splitAt(V',V1',Out')] 
1*it(324)+1*it(325)+1*it(326)+0
  Such that:aux(90) =< V
aux(91) =< V+V1
aux(92) =< V+V1-V'-V1'
aux(93) =< V-V'
aux(94) =< V1
aux(95) =< V1-V1'
it(325) =< aux(90)
it(326) =< aux(90)
it(324) =< aux(91)
it(325) =< aux(91)
it(326) =< aux(91)
it(324) =< aux(92)
it(325) =< aux(92)
it(326) =< aux(92)
it(325) =< aux(93)
it(326) =< aux(93)
it(324) =< aux(94)
it(326) =< aux(94)
it(324) =< aux(95)
it(326) =< aux(95)

#### Cost of chains of splitAt(V,V1,Out):
* Chain [[324,325,326],327]: 1*it(324)+1*it(325)+1*it(326)+0
  Such that:aux(96) =< V
aux(97) =< V+V1
aux(98) =< V1
it(325) =< aux(96)
it(326) =< aux(96)
it(324) =< aux(97)
it(325) =< aux(97)
it(326) =< aux(97)
it(324) =< aux(98)
it(326) =< aux(98)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [327]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [328] 

 * loop 328:tail(V,Out) -> [tail(V',Out')] 
1
#### Cost of phase [328]:tail(V,Out) -> [tail(V',Out')] 
1*it(328)+0
  Such that:it(328) =< V
it(328) =< V-V'

#### Cost of chains of tail(V,Out):
* Chain [[328],329]: 1*it(328)+0
  Such that:it(328) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [329]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [330,331,332] 

 * loop 330:take(V,V1,Out) -> [take(V',V1',Out')] 
1
 * loop 331:take(V,V1,Out) -> [take(V',V1',Out')] 
1
 * loop 332:take(V,V1,Out) -> [take(V',V1',Out')] 
1
#### Cost of phase [330,331,332]:take(V,V1,Out) -> [take(V',V1',Out')] 
1*it(330)+1*it(331)+1*it(332)+0
  Such that:aux(99) =< V
aux(100) =< V+V1
aux(101) =< V+V1-V'-V1'
aux(102) =< V-V'
aux(103) =< V1
aux(104) =< V1-V1'
it(331) =< aux(99)
it(332) =< aux(99)
it(330) =< aux(100)
it(331) =< aux(100)
it(332) =< aux(100)
it(330) =< aux(101)
it(331) =< aux(101)
it(332) =< aux(101)
it(331) =< aux(102)
it(332) =< aux(102)
it(330) =< aux(103)
it(332) =< aux(103)
it(330) =< aux(104)
it(332) =< aux(104)

#### Cost of chains of take(V,V1,Out):
* Chain [[330,331,332],333]: 1*it(330)+1*it(331)+1*it(332)+0
  Such that:aux(105) =< V
aux(106) =< V+V1
aux(107) =< V1
it(331) =< aux(105)
it(332) =< aux(105)
it(330) =< aux(106)
it(331) =< aux(106)
it(332) =< aux(106)
it(330) =< aux(107)
it(332) =< aux(107)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [333]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [335,336,337] 

 * loop 335:top(V,Out) -> [top(V',Out')] 
2
 * loop 336:top(V,Out) -> [top(V',Out')] 
2
 * loop 337:top(V,Out) -> [top(V',Out')] 
2
#### Cost of phase [335,336,337]:top(V,Out) -> [top(V',Out')] 
6*it(335)+0
#### Cost of phase [335,336,337]:top(V,Out) -> [top(V',Out')] 
6*it(335)+0
#### Cost of phase [335,336,337]:top(V,Out) -> [top(V',Out')] 
6*it(335)+0
#### Cost of chains of top(V,Out):
* Chain [[335,336,337]]...: 6*it(335)+0
  with precondition: [V>=1] 

* Chain [[335,336,337],338]: 6*it(335)+0
  with precondition: [Out=0,V>=1] 

* Chain [[335,336,337],334,338]: 6*it(335)+1
  with precondition: [Out=0,V>=1] 

* Chain [338]: 0
  with precondition: [Out=0,V>=0] 

* Chain [334,338]: 1
  with precondition: [Out=0,V>=1] 


#### Cost of chains of start(V,V1,V2,V3):
* Chain [342]...: 6*s(3)+0
  with precondition: [V>=1] 

* Chain [341]: 1*s(4)+31*s(6)+55*s(8)+5*s(30)+5*s(31)+5*s(32)+1
  Such that:aux(140) =< V
aux(141) =< V+V1
aux(142) =< V1
s(8) =< aux(140)
s(6) =< aux(142)
s(30) =< aux(140)
s(31) =< aux(140)
s(32) =< aux(141)
s(30) =< aux(141)
s(31) =< aux(141)
s(32) =< aux(142)
s(31) =< aux(142)
s(6) =< aux(140)

  with precondition: [V>=0] 

* Chain [340]: 1
  with precondition: [V=1] 

* Chain [339]: 1
  with precondition: [V=2] 


Closed-form bounds of start(V,V1,V2,V3): 
-------------------------------------
* Chain [342]... with precondition: [V>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [341] with precondition: [V>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [340] with precondition: [V=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [339] with precondition: [V=2] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V,V1,V2,V3): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 467 ms.
* Invariants computed in 1366 ms.
   - Backward Invariants 510 ms.
   - Transitive Invariants 414 ms.
* Refinement performed in 2250 ms.
* Termination proved in 471 ms.
* Upper bounds computed in 1619 ms.
   - Equation cost structures 451 ms.
   - Phase cost structures 733 ms.
   - Chain cost structures 620 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 7155 ms.


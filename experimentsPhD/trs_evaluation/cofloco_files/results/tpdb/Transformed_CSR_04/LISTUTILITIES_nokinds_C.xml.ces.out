
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [afterNth/3]
1. recursive  : [and/3]
2. recursive  : [cons/3]
3. recursive  : [fst/2]
4. recursive  : [fun/3]
5. recursive  : [fun1/3]
6. recursive  : [fun10/5]
7. recursive  : [fun2/4]
8. recursive  : [fun3/3]
9. recursive  : [fun4/4]
10. recursive  : [fun5/3]
11. recursive  : [fun6/4]
12. recursive  : [fun7/3]
13. recursive  : [fun8/3]
14. recursive  : [fun9/3]
15. recursive  : [head/2]
16. recursive  : [isLNat/2]
17. recursive  : [isNatural/2]
18. recursive  : [isPLNat/2]
19. recursive  : [natsFrom/2]
20. recursive  : [pair/3]
21. non_recursive  : [proper/2]
22. recursive  : [s/2]
23. recursive  : [sel/3]
24. recursive  : [snd/2]
25. recursive  : [splitAt/3]
26. recursive  : [tail/2]
27. recursive  : [take/3]
28. recursive  : [top/2]
29. non_recursive  : [start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into afterNth/3
1. SCC is partially evaluated into and/3
2. SCC is partially evaluated into cons/3
3. SCC is partially evaluated into fst/2
4. SCC is partially evaluated into fun/3
5. SCC is partially evaluated into fun1/3
6. SCC is partially evaluated into fun10/5
7. SCC is partially evaluated into fun2/4
8. SCC is partially evaluated into fun3/3
9. SCC is partially evaluated into fun4/4
10. SCC is partially evaluated into fun5/3
11. SCC is partially evaluated into fun6/4
12. SCC is partially evaluated into fun7/3
13. SCC is partially evaluated into fun8/3
14. SCC is partially evaluated into fun9/3
15. SCC is partially evaluated into head/2
16. SCC is partially evaluated into isLNat/2
17. SCC is partially evaluated into isNatural/2
18. SCC is partially evaluated into isPLNat/2
19. SCC is partially evaluated into natsFrom/2
20. SCC is partially evaluated into pair/3
21. SCC is partially evaluated into proper/2
22. SCC is partially evaluated into s/2
23. SCC is partially evaluated into sel/3
24. SCC is partially evaluated into snd/2
25. SCC is partially evaluated into splitAt/3
26. SCC is partially evaluated into tail/2
27. SCC is partially evaluated into take/3
28. SCC is partially evaluated into top/2
29. SCC is partially evaluated into start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations afterNth/3 
* CE 97 is refined into CE [115] 
* CE 95 is refined into CE [116] 
* CE 96 is refined into CE [117] 
* CE 94 is refined into CE [118] 


#### Refined cost equations afterNth/3 
* CE 115: afterNth(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 116: afterNth(V,V1,Out) = 1+ afterNth(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 117: afterNth(V,V1,Out) = 1+ afterNth(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 118: afterNth(V,V1,Out) = 1+ afterNth(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of afterNth/3 
* CEs [116] --> Loop 85 
* CEs [117] --> Loop 86 
* CEs [118] --> Loop 87 
* CEs [115] --> Loop 88 

#### Loops of afterNth/3 
* Loop 85: afterNth(V,V1,Out)->  afterNth(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 86: afterNth(V,V1,Out)->  afterNth(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 87: afterNth(V,V1,Out)->  afterNth(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 88: afterNth(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR afterNth(V,V1,Out) 
* RF of phase [85,86,87]: [V+V1]

#### Partial ranking functions of CR afterNth(V,V1,Out) 
* Partial RF of phase [85,86,87]:
  - RF of loop [85:1,87:1]:
    V1
  - RF of loop [86:1,87:1]:
    V


### Resulting Chains:afterNth(V,V1,Out) 
* [[85,86,87],88]
* [88]


### Merging Chains  afterNth/3 into  External patterns of execution 
* [[88]] --> 1 
* [[88,[85,86,87]]] --> 2 


### Specialization of cost equations and/3 
* CE 57 is refined into CE [119] 
* CE 56 is refined into CE [120] 
* CE 55 is refined into CE [121] 


#### Refined cost equations and/3 
* CE 119: and(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 120: and(V,V1,Out) = 1+ and(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 121: and(V,V1,Out) = 1+ and(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of and/3 
* CEs [120] --> Loop 89 
* CEs [121] --> Loop 90 
* CEs [119] --> Loop 91 

#### Loops of and/3 
* Loop 89: and(V,V1,Out)->  and(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 90: and(V,V1,Out)->  and(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 91: and(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR and(V,V1,Out) 
* RF of phase [89,90]: [V]

#### Partial ranking functions of CR and(V,V1,Out) 
* Partial RF of phase [89,90]:
  - RF of loop [89:1,90:1]:
    V
  - RF of loop [90:1]:
    V1


### Resulting Chains:and(V,V1,Out) 
* [[89,90],91]
* [91]


### Merging Chains  and/3 into  External patterns of execution 
* [[91]] --> 1 
* [[91,[89,90]]] --> 2 


### Specialization of cost equations cons/3 
* CE 41 is refined into CE [122] 
* CE 40 is refined into CE [123] 
* CE 39 is refined into CE [124] 


#### Refined cost equations cons/3 
* CE 122: cons(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 123: cons(V,V1,Out) = 1+ cons(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 124: cons(V,V1,Out) = 1+ cons(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of cons/3 
* CEs [123] --> Loop 92 
* CEs [124] --> Loop 93 
* CEs [122] --> Loop 94 

#### Loops of cons/3 
* Loop 92: cons(V,V1,Out)->  cons(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 93: cons(V,V1,Out)->  cons(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 94: cons(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR cons(V,V1,Out) 
* RF of phase [92,93]: [V]

#### Partial ranking functions of CR cons(V,V1,Out) 
* Partial RF of phase [92,93]:
  - RF of loop [92:1,93:1]:
    V
  - RF of loop [93:1]:
    V1


### Resulting Chains:cons(V,V1,Out) 
* [[92,93],94]
* [94]


### Merging Chains  cons/3 into  External patterns of execution 
* [[94]] --> 1 
* [[94,[92,93]]] --> 2 


### Specialization of cost equations fst/2 
* CE 93 is refined into CE [125] 
* CE 92 is refined into CE [126] 


#### Refined cost equations fst/2 
* CE 125: fst(V,Out) = 0
     [V>=0,Out=0] 
* CE 126: fst(V,Out) = 1+ fst(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of fst/2 
* CEs [126] --> Loop 95 
* CEs [125] --> Loop 96 

#### Loops of fst/2 
* Loop 95: fst(V,Out)->  fst(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 96: fst(V,Out) [V>=0,Out=0] 

### Ranking functions of CR fst(V,Out) 
* RF of phase [95]: [V]

#### Partial ranking functions of CR fst(V,Out) 
* Partial RF of phase [95]:
  - RF of loop [95:1]:
    V


### Resulting Chains:fst(V,Out) 
* [[95],96]
* [96]


### Merging Chains  fst/2 into  External patterns of execution 
* [[96]] --> 1 
* [[96,[95]]] --> 2 


### Specialization of cost equations fun/3 
* CE 38 is refined into CE [127] 
* CE 36 is refined into CE [128] 
* CE 37 is refined into CE [129] 


#### Refined cost equations fun/3 
* CE 127: fun(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 128: fun(V,V1,Out) = 1+ fun(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 129: fun(V,V1,Out) = 1+ fun(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun/3 
* CEs [128] --> Loop 97 
* CEs [129] --> Loop 98 
* CEs [127] --> Loop 99 

#### Loops of fun/3 
* Loop 97: fun(V,V1,Out)->  fun(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 98: fun(V,V1,Out)->  fun(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 99: fun(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun(V,V1,Out) 
* RF of phase [97,98]: [V]

#### Partial ranking functions of CR fun(V,V1,Out) 
* Partial RF of phase [97,98]:
  - RF of loop [97:1,98:1]:
    V
  - RF of loop [98:1]:
    V1


### Resulting Chains:fun(V,V1,Out) 
* [[97,98],99]
* [99]


### Merging Chains  fun/3 into  External patterns of execution 
* [[99]] --> 1 
* [[99,[97,98]]] --> 2 


### Specialization of cost equations fun1/3 
* CE 44 is refined into CE [130] 
* CE 42 is refined into CE [131] 
* CE 43 is refined into CE [132] 


#### Refined cost equations fun1/3 
* CE 130: fun1(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 131: fun1(V,V1,Out) = 1+ fun1(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 132: fun1(V,V1,Out) = 1+ fun1(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun1/3 
* CEs [131] --> Loop 100 
* CEs [132] --> Loop 101 
* CEs [130] --> Loop 102 

#### Loops of fun1/3 
* Loop 100: fun1(V,V1,Out)->  fun1(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 101: fun1(V,V1,Out)->  fun1(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 102: fun1(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun1(V,V1,Out) 
* RF of phase [100,101]: [V]

#### Partial ranking functions of CR fun1(V,V1,Out) 
* Partial RF of phase [100,101]:
  - RF of loop [100:1,101:1]:
    V
  - RF of loop [101:1]:
    V1


### Resulting Chains:fun1(V,V1,Out) 
* [[100,101],102]
* [102]


### Merging Chains  fun1/3 into  External patterns of execution 
* [[102]] --> 1 
* [[102,[100,101]]] --> 2 


### Specialization of cost equations fun10/5 
* CE 108 is refined into CE [133] 
* CE 106 is refined into CE [134] 
* CE 107 is refined into CE [135] 


#### Refined cost equations fun10/5 
* CE 133: fun10(V,V1,V2,V3,Out) = 0
     [V3>=0,V2>=0,V1>=0,V>=0,Out=0] 
* CE 134: fun10(V,V1,V2,V3,Out) = 1+ fun10(W3,V1,V2,V3,X3)
     [W3>=0,V3>=0,V2>=0,V1>=0,X3+1=Out,W3+1=V] 
* CE 135: fun10(V,V1,V2,V3,Out) = 1+ fun10(W3,X3,Y3,Z3,A4)
     [Z3>=0,Y3>=0,X3>=0,W3>=0,A4+1=Out,Z3+1=V3,Y3+1=V2,X3+1=V1,W3+1=V] 

### Cost equations --> "Loop" of fun10/5 
* CEs [134] --> Loop 103 
* CEs [135] --> Loop 104 
* CEs [133] --> Loop 105 

#### Loops of fun10/5 
* Loop 103: fun10(V,V1,V2,V3,Out)->  fun10(V',V1,V2,V3,Out')
                  [V3>=0,V2>=0,V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 104: fun10(V,V1,V2,V3,Out)->  fun10(V',V1',V2',V3',Out')
                  [V3>=1,V2>=1,V1>=1,V>=1,Out=Out'+1,V3=V3'+1,V2=V2'+1,V1=V1'+1,V=V'+1] 
* Loop 105: fun10(V,V1,V2,V3,Out) [V3>=0,V2>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun10(V,V1,V2,V3,Out) 
* RF of phase [103,104]: [V]

#### Partial ranking functions of CR fun10(V,V1,V2,V3,Out) 
* Partial RF of phase [103,104]:
  - RF of loop [103:1,104:1]:
    V
  - RF of loop [104:1]:
    V1
    V2
    V3


### Resulting Chains:fun10(V,V1,V2,V3,Out) 
* [[103,104],105]
* [105]


### Merging Chains  fun10/5 into  External patterns of execution 
* [[105]] --> 1 
* [[105,[103,104]]] --> 2 


### Specialization of cost equations fun2/4 
* CE 49 is refined into CE [136] 
* CE 48 is refined into CE [137] 
* CE 47 is refined into CE [138] 


#### Refined cost equations fun2/4 
* CE 136: fun2(V,V1,V2,Out) = 0
     [V2>=0,V1>=0,V>=0,Out=0] 
* CE 137: fun2(V,V1,V2,Out) = 1+ fun2(W2,V1,V2,X2)
     [W2>=0,V2>=0,V1>=0,X2+1=Out,W2+1=V] 
* CE 138: fun2(V,V1,V2,Out) = 1+ fun2(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V1,W2+1=V] 

### Cost equations --> "Loop" of fun2/4 
* CEs [137] --> Loop 106 
* CEs [138] --> Loop 107 
* CEs [136] --> Loop 108 

#### Loops of fun2/4 
* Loop 106: fun2(V,V1,V2,Out)->  fun2(V',V1,V2,Out')
                  [V2>=0,V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 107: fun2(V,V1,V2,Out)->  fun2(V',V1',V2',Out')
                  [V2>=1,V1>=1,V>=1,Out=Out'+1,V2=V2'+1,V1=V1'+1,V=V'+1] 
* Loop 108: fun2(V,V1,V2,Out) [V2>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun2(V,V1,V2,Out) 
* RF of phase [106,107]: [V]

#### Partial ranking functions of CR fun2(V,V1,V2,Out) 
* Partial RF of phase [106,107]:
  - RF of loop [106:1,107:1]:
    V
  - RF of loop [107:1]:
    V1
    V2


### Resulting Chains:fun2(V,V1,V2,Out) 
* [[106,107],108]
* [108]


### Merging Chains  fun2/4 into  External patterns of execution 
* [[108]] --> 1 
* [[108,[106,107]]] --> 2 


### Specialization of cost equations fun3/3 
* CE 52 is refined into CE [139] 
* CE 51 is refined into CE [140] 
* CE 50 is refined into CE [141] 


#### Refined cost equations fun3/3 
* CE 139: fun3(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 140: fun3(V,V1,Out) = 1+ fun3(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 141: fun3(V,V1,Out) = 1+ fun3(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun3/3 
* CEs [140] --> Loop 109 
* CEs [141] --> Loop 110 
* CEs [139] --> Loop 111 

#### Loops of fun3/3 
* Loop 109: fun3(V,V1,Out)->  fun3(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 110: fun3(V,V1,Out)->  fun3(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 111: fun3(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun3(V,V1,Out) 
* RF of phase [109,110]: [V]

#### Partial ranking functions of CR fun3(V,V1,Out) 
* Partial RF of phase [109,110]:
  - RF of loop [109:1,110:1]:
    V
  - RF of loop [110:1]:
    V1


### Resulting Chains:fun3(V,V1,Out) 
* [[109,110],111]
* [111]


### Merging Chains  fun3/3 into  External patterns of execution 
* [[111]] --> 1 
* [[111,[109,110]]] --> 2 


### Specialization of cost equations fun4/4 
* CE 60 is refined into CE [142] 
* CE 58 is refined into CE [143] 
* CE 59 is refined into CE [144] 


#### Refined cost equations fun4/4 
* CE 142: fun4(V,V1,V2,Out) = 0
     [V2>=0,V1>=0,V>=0,Out=0] 
* CE 143: fun4(V,V1,V2,Out) = 1+ fun4(W2,V1,V2,X2)
     [W2>=0,V2>=0,V1>=0,X2+1=Out,W2+1=V] 
* CE 144: fun4(V,V1,V2,Out) = 1+ fun4(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V1,W2+1=V] 

### Cost equations --> "Loop" of fun4/4 
* CEs [143] --> Loop 112 
* CEs [144] --> Loop 113 
* CEs [142] --> Loop 114 

#### Loops of fun4/4 
* Loop 112: fun4(V,V1,V2,Out)->  fun4(V',V1,V2,Out')
                  [V2>=0,V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 113: fun4(V,V1,V2,Out)->  fun4(V',V1',V2',Out')
                  [V2>=1,V1>=1,V>=1,Out=Out'+1,V2=V2'+1,V1=V1'+1,V=V'+1] 
* Loop 114: fun4(V,V1,V2,Out) [V2>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun4(V,V1,V2,Out) 
* RF of phase [112,113]: [V]

#### Partial ranking functions of CR fun4(V,V1,V2,Out) 
* Partial RF of phase [112,113]:
  - RF of loop [112:1,113:1]:
    V
  - RF of loop [113:1]:
    V1
    V2


### Resulting Chains:fun4(V,V1,V2,Out) 
* [[112,113],114]
* [114]


### Merging Chains  fun4/4 into  External patterns of execution 
* [[114]] --> 1 
* [[114,[112,113]]] --> 2 


### Specialization of cost equations fun5/3 
* CE 67 is refined into CE [145] 
* CE 65 is refined into CE [146] 
* CE 66 is refined into CE [147] 


#### Refined cost equations fun5/3 
* CE 145: fun5(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 146: fun5(V,V1,Out) = 1+ fun5(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 147: fun5(V,V1,Out) = 1+ fun5(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun5/3 
* CEs [146] --> Loop 115 
* CEs [147] --> Loop 116 
* CEs [145] --> Loop 117 

#### Loops of fun5/3 
* Loop 115: fun5(V,V1,Out)->  fun5(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 116: fun5(V,V1,Out)->  fun5(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 117: fun5(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun5(V,V1,Out) 
* RF of phase [115,116]: [V]

#### Partial ranking functions of CR fun5(V,V1,Out) 
* Partial RF of phase [115,116]:
  - RF of loop [115:1,116:1]:
    V
  - RF of loop [116:1]:
    V1


### Resulting Chains:fun5(V,V1,Out) 
* [[115,116],117]
* [117]


### Merging Chains  fun5/3 into  External patterns of execution 
* [[117]] --> 1 
* [[117,[115,116]]] --> 2 


### Specialization of cost equations fun6/4 
* CE 84 is refined into CE [148] 
* CE 82 is refined into CE [149] 
* CE 83 is refined into CE [150] 


#### Refined cost equations fun6/4 
* CE 148: fun6(V,V1,V2,Out) = 0
     [V2>=0,V1>=0,V>=0,Out=0] 
* CE 149: fun6(V,V1,V2,Out) = 1+ fun6(W2,V1,V2,X2)
     [W2>=0,V2>=0,V1>=0,X2+1=Out,W2+1=V] 
* CE 150: fun6(V,V1,V2,Out) = 1+ fun6(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V1,W2+1=V] 

### Cost equations --> "Loop" of fun6/4 
* CEs [149] --> Loop 118 
* CEs [150] --> Loop 119 
* CEs [148] --> Loop 120 

#### Loops of fun6/4 
* Loop 118: fun6(V,V1,V2,Out)->  fun6(V',V1,V2,Out')
                  [V2>=0,V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 119: fun6(V,V1,V2,Out)->  fun6(V',V1',V2',Out')
                  [V2>=1,V1>=1,V>=1,Out=Out'+1,V2=V2'+1,V1=V1'+1,V=V'+1] 
* Loop 120: fun6(V,V1,V2,Out) [V2>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun6(V,V1,V2,Out) 
* RF of phase [118,119]: [V]

#### Partial ranking functions of CR fun6(V,V1,V2,Out) 
* Partial RF of phase [118,119]:
  - RF of loop [118:1,119:1]:
    V
  - RF of loop [119:1]:
    V1
    V2


### Resulting Chains:fun6(V,V1,V2,Out) 
* [[118,119],120]
* [120]


### Merging Chains  fun6/4 into  External patterns of execution 
* [[120]] --> 1 
* [[120,[118,119]]] --> 2 


### Specialization of cost equations fun7/3 
* CE 87 is refined into CE [151] 
* CE 86 is refined into CE [152] 
* CE 85 is refined into CE [153] 


#### Refined cost equations fun7/3 
* CE 151: fun7(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 152: fun7(V,V1,Out) = 1+ fun7(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 153: fun7(V,V1,Out) = 1+ fun7(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun7/3 
* CEs [152] --> Loop 121 
* CEs [153] --> Loop 122 
* CEs [151] --> Loop 123 

#### Loops of fun7/3 
* Loop 121: fun7(V,V1,Out)->  fun7(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 122: fun7(V,V1,Out)->  fun7(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 123: fun7(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun7(V,V1,Out) 
* RF of phase [121,122]: [V]

#### Partial ranking functions of CR fun7(V,V1,Out) 
* Partial RF of phase [121,122]:
  - RF of loop [121:1,122:1]:
    V
  - RF of loop [122:1]:
    V1


### Resulting Chains:fun7(V,V1,Out) 
* [[121,122],123]
* [123]


### Merging Chains  fun7/3 into  External patterns of execution 
* [[123]] --> 1 
* [[123,[121,122]]] --> 2 


### Specialization of cost equations fun8/3 
* CE 100 is refined into CE [154] 
* CE 99 is refined into CE [155] 
* CE 98 is refined into CE [156] 


#### Refined cost equations fun8/3 
* CE 154: fun8(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 155: fun8(V,V1,Out) = 1+ fun8(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 156: fun8(V,V1,Out) = 1+ fun8(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun8/3 
* CEs [155] --> Loop 124 
* CEs [156] --> Loop 125 
* CEs [154] --> Loop 126 

#### Loops of fun8/3 
* Loop 124: fun8(V,V1,Out)->  fun8(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 125: fun8(V,V1,Out)->  fun8(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 126: fun8(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun8(V,V1,Out) 
* RF of phase [124,125]: [V]

#### Partial ranking functions of CR fun8(V,V1,Out) 
* Partial RF of phase [124,125]:
  - RF of loop [124:1,125:1]:
    V
  - RF of loop [125:1]:
    V1


### Resulting Chains:fun8(V,V1,Out) 
* [[124,125],126]
* [126]


### Merging Chains  fun8/3 into  External patterns of execution 
* [[126]] --> 1 
* [[126,[124,125]]] --> 2 


### Specialization of cost equations fun9/3 
* CE 105 is refined into CE [157] 
* CE 104 is refined into CE [158] 
* CE 103 is refined into CE [159] 


#### Refined cost equations fun9/3 
* CE 157: fun9(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 158: fun9(V,V1,Out) = 1+ fun9(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 159: fun9(V,V1,Out) = 1+ fun9(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun9/3 
* CEs [158] --> Loop 127 
* CEs [159] --> Loop 128 
* CEs [157] --> Loop 129 

#### Loops of fun9/3 
* Loop 127: fun9(V,V1,Out)->  fun9(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 128: fun9(V,V1,Out)->  fun9(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 129: fun9(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun9(V,V1,Out) 
* RF of phase [127,128]: [V]

#### Partial ranking functions of CR fun9(V,V1,Out) 
* Partial RF of phase [127,128]:
  - RF of loop [127:1,128:1]:
    V
  - RF of loop [128:1]:
    V1


### Resulting Chains:fun9(V,V1,Out) 
* [[127,128],129]
* [129]


### Merging Chains  fun9/3 into  External patterns of execution 
* [[129]] --> 1 
* [[129,[127,128]]] --> 2 


### Specialization of cost equations head/2 
* CE 89 is refined into CE [160] 
* CE 88 is refined into CE [161] 


#### Refined cost equations head/2 
* CE 160: head(V,Out) = 0
     [V>=0,Out=0] 
* CE 161: head(V,Out) = 1+ head(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of head/2 
* CEs [161] --> Loop 130 
* CEs [160] --> Loop 131 

#### Loops of head/2 
* Loop 130: head(V,Out)->  head(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 131: head(V,Out) [V>=0,Out=0] 

### Ranking functions of CR head(V,Out) 
* RF of phase [130]: [V]

#### Partial ranking functions of CR head(V,Out) 
* Partial RF of phase [130]:
  - RF of loop [130:1]:
    V


### Resulting Chains:head(V,Out) 
* [[130],131]
* [131]


### Merging Chains  head/2 into  External patterns of execution 
* [[131]] --> 1 
* [[131,[130]]] --> 2 


### Specialization of cost equations isLNat/2 
* CE 114 is refined into CE [162] 
* CE 113 is refined into CE [163] 


#### Refined cost equations isLNat/2 
* CE 162: isLNat(V,Out) = 0
     [V>=0,Out=0] 
* CE 163: isLNat(V,Out) = 1+ isLNat(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of isLNat/2 
* CEs [163] --> Loop 132 
* CEs [162] --> Loop 133 

#### Loops of isLNat/2 
* Loop 132: isLNat(V,Out)->  isLNat(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 133: isLNat(V,Out) [V>=0,Out=0] 

### Ranking functions of CR isLNat(V,Out) 
* RF of phase [132]: [V]

#### Partial ranking functions of CR isLNat(V,Out) 
* Partial RF of phase [132]:
  - RF of loop [132:1]:
    V


### Resulting Chains:isLNat(V,Out) 
* [[132],133]
* [133]


### Merging Chains  isLNat/2 into  External patterns of execution 
* [[133]] --> 1 
* [[133,[132]]] --> 2 


### Specialization of cost equations isNatural/2 
* CE 35 is refined into CE [164] 
* CE 34 is refined into CE [165] 


#### Refined cost equations isNatural/2 
* CE 164: isNatural(V,Out) = 0
     [V>=0,Out=0] 
* CE 165: isNatural(V,Out) = 1+ isNatural(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of isNatural/2 
* CEs [165] --> Loop 134 
* CEs [164] --> Loop 135 

#### Loops of isNatural/2 
* Loop 134: isNatural(V,Out)->  isNatural(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 135: isNatural(V,Out) [V>=0,Out=0] 

### Ranking functions of CR isNatural(V,Out) 
* RF of phase [134]: [V]

#### Partial ranking functions of CR isNatural(V,Out) 
* Partial RF of phase [134]:
  - RF of loop [134:1]:
    V


### Resulting Chains:isNatural(V,Out) 
* [[134],135]
* [135]


### Merging Chains  isNatural/2 into  External patterns of execution 
* [[135]] --> 1 
* [[135,[134]]] --> 2 


### Specialization of cost equations isPLNat/2 
* CE 77 is refined into CE [166] 
* CE 76 is refined into CE [167] 


#### Refined cost equations isPLNat/2 
* CE 166: isPLNat(V,Out) = 0
     [V>=0,Out=0] 
* CE 167: isPLNat(V,Out) = 1+ isPLNat(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of isPLNat/2 
* CEs [167] --> Loop 136 
* CEs [166] --> Loop 137 

#### Loops of isPLNat/2 
* Loop 136: isPLNat(V,Out)->  isPLNat(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 137: isPLNat(V,Out) [V>=0,Out=0] 

### Ranking functions of CR isPLNat(V,Out) 
* RF of phase [136]: [V]

#### Partial ranking functions of CR isPLNat(V,Out) 
* Partial RF of phase [136]:
  - RF of loop [136:1]:
    V


### Resulting Chains:isPLNat(V,Out) 
* [[136],137]
* [137]


### Merging Chains  isPLNat/2 into  External patterns of execution 
* [[137]] --> 1 
* [[137,[136]]] --> 2 


### Specialization of cost equations natsFrom/2 
* CE 91 is refined into CE [168] 
* CE 90 is refined into CE [169] 


#### Refined cost equations natsFrom/2 
* CE 168: natsFrom(V,Out) = 0
     [V>=0,Out=0] 
* CE 169: natsFrom(V,Out) = 1+ natsFrom(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of natsFrom/2 
* CEs [169] --> Loop 138 
* CEs [168] --> Loop 139 

#### Loops of natsFrom/2 
* Loop 138: natsFrom(V,Out)->  natsFrom(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 139: natsFrom(V,Out) [V>=0,Out=0] 

### Ranking functions of CR natsFrom(V,Out) 
* RF of phase [138]: [V]

#### Partial ranking functions of CR natsFrom(V,Out) 
* Partial RF of phase [138]:
  - RF of loop [138:1]:
    V


### Resulting Chains:natsFrom(V,Out) 
* [[138],139]
* [139]


### Merging Chains  natsFrom/2 into  External patterns of execution 
* [[139]] --> 1 
* [[139,[138]]] --> 2 


### Specialization of cost equations pair/3 
* CE 64 is refined into CE [170] 
* CE 62 is refined into CE [171] 
* CE 61 is refined into CE [172] 
* CE 63 is refined into CE [173] 


#### Refined cost equations pair/3 
* CE 170: pair(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 171: pair(V,V1,Out) = 1+ pair(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 172: pair(V,V1,Out) = 1+ pair(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 173: pair(V,V1,Out) = 1+ pair(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of pair/3 
* CEs [171] --> Loop 140 
* CEs [172] --> Loop 141 
* CEs [173] --> Loop 142 
* CEs [170] --> Loop 143 

#### Loops of pair/3 
* Loop 140: pair(V,V1,Out)->  pair(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 141: pair(V,V1,Out)->  pair(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 142: pair(V,V1,Out)->  pair(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 143: pair(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR pair(V,V1,Out) 
* RF of phase [140,141,142]: [V+V1]

#### Partial ranking functions of CR pair(V,V1,Out) 
* Partial RF of phase [140,141,142]:
  - RF of loop [140:1,142:1]:
    V1
  - RF of loop [141:1,142:1]:
    V


### Resulting Chains:pair(V,V1,Out) 
* [[140,141,142],143]
* [143]


### Merging Chains  pair/3 into  External patterns of execution 
* [[143]] --> 1 
* [[143,[140,141,142]]] --> 2 


### Specialization of cost equations proper/2 
* CE 81 is refined into CE [174] 
* CE 78 is refined into CE [175] 
* CE 79 is refined into CE [176] 
* CE 80 is refined into CE [177] 


#### Refined cost equations proper/2 
* CE 174: proper(V,Out) = 0
     [V>=0,Out=0] 
* CE 175: proper(V,Out) = 1
     [Out=3,V=2] 
* CE 176: proper(V,Out) = 1
     [Out=2,V=1] 
* CE 177: proper(V,Out) = 1
     [Out=1,V=0] 

### Cost equations --> "Loop" of proper/2 
* CEs [174] --> Loop 144 
* CEs [175] --> Loop 145 
* CEs [176] --> Loop 146 
* CEs [177] --> Loop 147 

#### Loops of proper/2 
* Loop 144: proper(V,Out) [V>=0,Out=0] 
* Loop 145: proper(V,Out) [Out=3,V=2] 
* Loop 146: proper(V,Out) [Out=2,V=1] 
* Loop 147: proper(V,Out) [Out=1,V=0] 

### Ranking functions of CR proper(V,Out) 

#### Partial ranking functions of CR proper(V,Out) 


### Resulting Chains:proper(V,Out) 
* [147]
* [146]
* [145]
* [144]


### Merging Chains  proper/2 into  External patterns of execution 
* [[147]] --> 1 
* [[146]] --> 2 
* [[145]] --> 3 
* [[144]] --> 4 


### Specialization of cost equations s/2 
* CE 102 is refined into CE [178] 
* CE 101 is refined into CE [179] 


#### Refined cost equations s/2 
* CE 178: s(V,Out) = 0
     [V>=0,Out=0] 
* CE 179: s(V,Out) = 1+ s(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of s/2 
* CEs [179] --> Loop 148 
* CEs [178] --> Loop 149 

#### Loops of s/2 
* Loop 148: s(V,Out)->  s(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 149: s(V,Out) [V>=0,Out=0] 

### Ranking functions of CR s(V,Out) 
* RF of phase [148]: [V]

#### Partial ranking functions of CR s(V,Out) 
* Partial RF of phase [148]:
  - RF of loop [148:1]:
    V


### Resulting Chains:s(V,Out) 
* [[148],149]
* [149]


### Merging Chains  s/2 into  External patterns of execution 
* [[149]] --> 1 
* [[149,[148]]] --> 2 


### Specialization of cost equations sel/3 
* CE 71 is refined into CE [180] 
* CE 69 is refined into CE [181] 
* CE 70 is refined into CE [182] 
* CE 68 is refined into CE [183] 


#### Refined cost equations sel/3 
* CE 180: sel(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 181: sel(V,V1,Out) = 1+ sel(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 182: sel(V,V1,Out) = 1+ sel(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 183: sel(V,V1,Out) = 1+ sel(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of sel/3 
* CEs [181] --> Loop 150 
* CEs [182] --> Loop 151 
* CEs [183] --> Loop 152 
* CEs [180] --> Loop 153 

#### Loops of sel/3 
* Loop 150: sel(V,V1,Out)->  sel(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 151: sel(V,V1,Out)->  sel(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 152: sel(V,V1,Out)->  sel(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 153: sel(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR sel(V,V1,Out) 
* RF of phase [150,151,152]: [V+V1]

#### Partial ranking functions of CR sel(V,V1,Out) 
* Partial RF of phase [150,151,152]:
  - RF of loop [150:1,152:1]:
    V1
  - RF of loop [151:1,152:1]:
    V


### Resulting Chains:sel(V,V1,Out) 
* [[150,151,152],153]
* [153]


### Merging Chains  sel/3 into  External patterns of execution 
* [[153]] --> 1 
* [[153,[150,151,152]]] --> 2 


### Specialization of cost equations snd/2 
* CE 54 is refined into CE [184] 
* CE 53 is refined into CE [185] 


#### Refined cost equations snd/2 
* CE 184: snd(V,Out) = 0
     [V>=0,Out=0] 
* CE 185: snd(V,Out) = 1+ snd(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of snd/2 
* CEs [185] --> Loop 154 
* CEs [184] --> Loop 155 

#### Loops of snd/2 
* Loop 154: snd(V,Out)->  snd(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 155: snd(V,Out) [V>=0,Out=0] 

### Ranking functions of CR snd(V,Out) 
* RF of phase [154]: [V]

#### Partial ranking functions of CR snd(V,Out) 
* Partial RF of phase [154]:
  - RF of loop [154:1]:
    V


### Resulting Chains:snd(V,Out) 
* [[154],155]
* [155]


### Merging Chains  snd/2 into  External patterns of execution 
* [[155]] --> 1 
* [[155,[154]]] --> 2 


### Specialization of cost equations splitAt/3 
* CE 75 is refined into CE [186] 
* CE 73 is refined into CE [187] 
* CE 72 is refined into CE [188] 
* CE 74 is refined into CE [189] 


#### Refined cost equations splitAt/3 
* CE 186: splitAt(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 187: splitAt(V,V1,Out) = 1+ splitAt(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 188: splitAt(V,V1,Out) = 1+ splitAt(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 189: splitAt(V,V1,Out) = 1+ splitAt(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of splitAt/3 
* CEs [187] --> Loop 156 
* CEs [188] --> Loop 157 
* CEs [189] --> Loop 158 
* CEs [186] --> Loop 159 

#### Loops of splitAt/3 
* Loop 156: splitAt(V,V1,Out)->  splitAt(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 157: splitAt(V,V1,Out)->  splitAt(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 158: splitAt(V,V1,Out)->  splitAt(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 159: splitAt(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR splitAt(V,V1,Out) 
* RF of phase [156,157,158]: [V+V1]

#### Partial ranking functions of CR splitAt(V,V1,Out) 
* Partial RF of phase [156,157,158]:
  - RF of loop [156:1,158:1]:
    V1
  - RF of loop [157:1,158:1]:
    V


### Resulting Chains:splitAt(V,V1,Out) 
* [[156,157,158],159]
* [159]


### Merging Chains  splitAt/3 into  External patterns of execution 
* [[159]] --> 1 
* [[159,[156,157,158]]] --> 2 


### Specialization of cost equations tail/2 
* CE 46 is refined into CE [190] 
* CE 45 is refined into CE [191] 


#### Refined cost equations tail/2 
* CE 190: tail(V,Out) = 0
     [V>=0,Out=0] 
* CE 191: tail(V,Out) = 1+ tail(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of tail/2 
* CEs [191] --> Loop 160 
* CEs [190] --> Loop 161 

#### Loops of tail/2 
* Loop 160: tail(V,Out)->  tail(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 161: tail(V,Out) [V>=0,Out=0] 

### Ranking functions of CR tail(V,Out) 
* RF of phase [160]: [V]

#### Partial ranking functions of CR tail(V,Out) 
* Partial RF of phase [160]:
  - RF of loop [160:1]:
    V


### Resulting Chains:tail(V,Out) 
* [[160],161]
* [161]


### Merging Chains  tail/2 into  External patterns of execution 
* [[161]] --> 1 
* [[161,[160]]] --> 2 


### Specialization of cost equations take/3 
* CE 112 is refined into CE [192] 
* CE 111 is refined into CE [193] 
* CE 109 is refined into CE [194] 
* CE 110 is refined into CE [195] 


#### Refined cost equations take/3 
* CE 192: take(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 193: take(V,V1,Out) = 1+ take(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 194: take(V,V1,Out) = 1+ take(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 195: take(V,V1,Out) = 1+ take(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of take/3 
* CEs [193] --> Loop 162 
* CEs [194] --> Loop 163 
* CEs [195] --> Loop 164 
* CEs [192] --> Loop 165 

#### Loops of take/3 
* Loop 162: take(V,V1,Out)->  take(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 163: take(V,V1,Out)->  take(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 164: take(V,V1,Out)->  take(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 165: take(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR take(V,V1,Out) 
* RF of phase [162,163,164]: [V+V1]

#### Partial ranking functions of CR take(V,V1,Out) 
* Partial RF of phase [162,163,164]:
  - RF of loop [162:1,164:1]:
    V1
  - RF of loop [163:1,164:1]:
    V


### Resulting Chains:take(V,V1,Out) 
* [[162,163,164],165]
* [165]


### Merging Chains  take/3 into  External patterns of execution 
* [[165]] --> 1 
* [[165,[162,163,164]]] --> 2 


### Specialization of cost equations top/2 
* CE 33 is refined into CE [196] 
* CE 31 is refined into CE [197] 
* CE 32 is refined into CE [198,199,200,201] 


#### Refined cost equations top/2 
* CE 196: top(V,Out) = 0
     [V>=0,Out=0] 
* CE 197: top(V,Out) = 1+ top(V,Out)
     [V>=1] 
* CE 198: top(V,Out) = 1+ proper(W,X):1+ top(Y,Out)
     [Y=1,X=1,W=0,V=1] 
* CE 199: top(V,Out) = 1+ proper(W,X):2+ top(Y,Out)
     [Y=2,X=2,W=1,V=2] 
* CE 200: top(V,Out) = 1+ proper(W,X):3+ top(Y,Out)
     [Y=3,X=3,W=2,V=3] 
* CE 201: top(V,Out) = 1+ proper(W,X):4+ top(Y,Out)
     [W>=0,W+1=V,Y=0,X=0] 

### Cost equations --> "Loop" of top/2 
* CEs [201] --> Loop 166 
* CEs [200] --> Loop 167 
* CEs [199] --> Loop 168 
* CEs [197,198] --> Loop 169 
* CEs [196] --> Loop 170 

#### Loops of top/2 
* Loop 166: top(V,Out)->  top(V',Out)
                  [V>=1,V'=0] 
* Loop 167: top(V,Out)->  top(V',Out)
                  [V'=3,V=3] 
* Loop 168: top(V,Out)->  top(V',Out)
                  [V'=2,V=2] 
* Loop 169: top(V,Out)->  top(V,Out)
                  [V>=1] 
* Loop 170: top(V,Out) [V>=0,Out=0] 

### Ranking functions of CR top(V,Out) 

#### Partial ranking functions of CR top(V,Out) 


### Resulting Chains:top(V,Out) 
* [[167,168,169]]...
* [[167,168,169],170]
* [[167,168,169],166,170]
* [170]
* [166,170]


### Merging Chains  top/2 into  External patterns of execution 
* [[170,166],[170],[170,166,[167,168,169]],[170,[167,168,169]]] --> 1 
* [[[167,168,169]]] --> 2 


### Specialization of cost equations start/4 
* CE 2 is refined into CE [202,203] 
* CE 3 is refined into CE [204,205] 
* CE 4 is refined into CE [206,207] 
* CE 5 is refined into CE [208,209] 
* CE 6 is refined into CE [210,211] 
* CE 7 is refined into CE [212,213] 
* CE 8 is refined into CE [214,215] 
* CE 9 is refined into CE [216,217] 
* CE 10 is refined into CE [218,219] 
* CE 11 is refined into CE [220,221] 
* CE 12 is refined into CE [222,223] 
* CE 13 is refined into CE [224,225] 
* CE 14 is refined into CE [226,227] 
* CE 15 is refined into CE [228,229] 
* CE 16 is refined into CE [230,231] 
* CE 17 is refined into CE [232,233] 
* CE 18 is refined into CE [234,235,236,237] 
* CE 19 is refined into CE [238,239] 
* CE 20 is refined into CE [240,241] 
* CE 21 is refined into CE [242,243] 
* CE 22 is refined into CE [244,245] 
* CE 23 is refined into CE [246,247] 
* CE 24 is refined into CE [248,249] 
* CE 25 is refined into CE [250,251] 
* CE 26 is refined into CE [252,253] 
* CE 27 is refined into CE [254,255] 
* CE 28 is refined into CE [256,257] 
* CE 29 is refined into CE [258,259] 
* CE 30 is refined into CE [260,261] 


#### Refined cost equations start/4 
* CE 202: start(V,V1,V2,V3) = 0+ top(V,W3):1
     [V>=0,W3=0] 
* CE 203: start(V,V1,V2,V3) = 0+ top(V,W3):2
     [V>=1] 
* CE 204: start(V,V1,V2,V3) = 0+ isNatural(V,W3):1
     [V>=0,W3=0] 
* CE 205: start(V,V1,V2,V3) = 0+ isNatural(V,W3):2
     [V>=W3,W3>=1] 
* CE 206: start(V,V1,V2,V3) = 0+ fun(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 207: start(V,V1,V2,V3) = 0+ fun(V,V1,W3):2
     [V>=W3,W3>=1,V1>=0] 
* CE 208: start(V,V1,V2,V3) = 0+ cons(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 209: start(V,V1,V2,V3) = 0+ cons(V,V1,W3):2
     [V>=W3,W3>=1,V1>=0] 
* CE 210: start(V,V1,V2,V3) = 0+ fun1(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 211: start(V,V1,V2,V3) = 0+ fun1(V,V1,W3):2
     [V>=W3,W3>=1,V1>=0] 
* CE 212: start(V,V1,V2,V3) = 0+ tail(V,W3):1
     [V>=0,W3=0] 
* CE 213: start(V,V1,V2,V3) = 0+ tail(V,W3):2
     [V>=W3,W3>=1] 
* CE 214: start(V,V1,V2,V3) = 0+ fun2(V,V1,V2,W3):1
     [V2>=0,V1>=0,V>=0,W3=0] 
* CE 215: start(V,V1,V2,V3) = 0+ fun2(V,V1,V2,W3):2
     [V>=W3,W3>=1,V2>=0,V1>=0] 
* CE 216: start(V,V1,V2,V3) = 0+ fun3(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 217: start(V,V1,V2,V3) = 0+ fun3(V,V1,W3):2
     [V>=W3,W3>=1,V1>=0] 
* CE 218: start(V,V1,V2,V3) = 0+ snd(V,W3):1
     [V>=0,W3=0] 
* CE 219: start(V,V1,V2,V3) = 0+ snd(V,W3):2
     [V>=W3,W3>=1] 
* CE 220: start(V,V1,V2,V3) = 0+ and(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 221: start(V,V1,V2,V3) = 0+ and(V,V1,W3):2
     [V>=W3,W3>=1,V1>=0] 
* CE 222: start(V,V1,V2,V3) = 0+ fun4(V,V1,V2,W3):1
     [V2>=0,V1>=0,V>=0,W3=0] 
* CE 223: start(V,V1,V2,V3) = 0+ fun4(V,V1,V2,W3):2
     [V>=W3,W3>=1,V2>=0,V1>=0] 
* CE 224: start(V,V1,V2,V3) = 0+ pair(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 225: start(V,V1,V2,V3) = 0+ pair(V,V1,W3):2
     [V+V1>=W3,W3>=1,V1>=0,V>=0] 
* CE 226: start(V,V1,V2,V3) = 0+ fun5(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 227: start(V,V1,V2,V3) = 0+ fun5(V,V1,W3):2
     [V>=W3,W3>=1,V1>=0] 
* CE 228: start(V,V1,V2,V3) = 0+ sel(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 229: start(V,V1,V2,V3) = 0+ sel(V,V1,W3):2
     [V+V1>=W3,W3>=1,V1>=0,V>=0] 
* CE 230: start(V,V1,V2,V3) = 0+ splitAt(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 231: start(V,V1,V2,V3) = 0+ splitAt(V,V1,W3):2
     [V+V1>=W3,W3>=1,V1>=0,V>=0] 
* CE 232: start(V,V1,V2,V3) = 0+ isPLNat(V,W3):1
     [V>=0,W3=0] 
* CE 233: start(V,V1,V2,V3) = 0+ isPLNat(V,W3):2
     [V>=W3,W3>=1] 
* CE 234: start(V,V1,V2,V3) = 0+ proper(W3,X3):1
     [X3=1,W3=0,V=0] 
* CE 235: start(V,V1,V2,V3) = 0+ proper(W3,X3):2
     [X3=2,W3=1,V=1] 
* CE 236: start(V,V1,V2,V3) = 0+ proper(W3,X3):3
     [X3=3,W3=2,V=2] 
* CE 237: start(V,V1,V2,V3) = 0+ proper(V,W3):4
     [V>=0,W3=0] 
* CE 238: start(V,V1,V2,V3) = 0+ fun6(V,V1,V2,W3):1
     [V2>=0,V1>=0,V>=0,W3=0] 
* CE 239: start(V,V1,V2,V3) = 0+ fun6(V,V1,V2,W3):2
     [V>=W3,W3>=1,V2>=0,V1>=0] 
* CE 240: start(V,V1,V2,V3) = 0+ fun7(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 241: start(V,V1,V2,V3) = 0+ fun7(V,V1,W3):2
     [V>=W3,W3>=1,V1>=0] 
* CE 242: start(V,V1,V2,V3) = 0+ head(V,W3):1
     [V>=0,W3=0] 
* CE 243: start(V,V1,V2,V3) = 0+ head(V,W3):2
     [V>=W3,W3>=1] 
* CE 244: start(V,V1,V2,V3) = 0+ natsFrom(V,W3):1
     [V>=0,W3=0] 
* CE 245: start(V,V1,V2,V3) = 0+ natsFrom(V,W3):2
     [V>=W3,W3>=1] 
* CE 246: start(V,V1,V2,V3) = 0+ fst(V,W3):1
     [V>=0,W3=0] 
* CE 247: start(V,V1,V2,V3) = 0+ fst(V,W3):2
     [V>=W3,W3>=1] 
* CE 248: start(V,V1,V2,V3) = 0+ afterNth(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 249: start(V,V1,V2,V3) = 0+ afterNth(V,V1,W3):2
     [V+V1>=W3,W3>=1,V1>=0,V>=0] 
* CE 250: start(V,V1,V2,V3) = 0+ fun8(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 251: start(V,V1,V2,V3) = 0+ fun8(V,V1,W3):2
     [V>=W3,W3>=1,V1>=0] 
* CE 252: start(V,V1,V2,V3) = 0+ s(V,W3):1
     [V>=0,W3=0] 
* CE 253: start(V,V1,V2,V3) = 0+ s(V,W3):2
     [V>=W3,W3>=1] 
* CE 254: start(V,V1,V2,V3) = 0+ fun9(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 255: start(V,V1,V2,V3) = 0+ fun9(V,V1,W3):2
     [V>=W3,W3>=1,V1>=0] 
* CE 256: start(V,V1,V2,V3) = 0+ fun10(V,V1,V2,V3,W3):1
     [V3>=0,V2>=0,V1>=0,V>=0,W3=0] 
* CE 257: start(V,V1,V2,V3) = 0+ fun10(V,V1,V2,V3,W3):2
     [V>=W3,W3>=1,V3>=0,V2>=0,V1>=0] 
* CE 258: start(V,V1,V2,V3) = 0+ take(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 259: start(V,V1,V2,V3) = 0+ take(V,V1,W3):2
     [V+V1>=W3,W3>=1,V1>=0,V>=0] 
* CE 260: start(V,V1,V2,V3) = 0+ isLNat(V,W3):1
     [V>=0,W3=0] 
* CE 261: start(V,V1,V2,V3) = 0+ isLNat(V,W3):2
     [V>=W3,W3>=1] 

### Cost equations --> "Loop" of start/4 
* CEs [236] --> Loop 171 
* CEs [235] --> Loop 172 
* CEs [202,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261] --> Loop 173 
* CEs [203] --> Loop 174 

#### Loops of start/4 
* Loop 171: start(V,V1,V2,V3) [V=2] 
* Loop 172: start(V,V1,V2,V3) [V=1] 
* Loop 173: start(V,V1,V2,V3) [V>=0] 
* Loop 174: start(V,V1,V2,V3) [V>=1] 

### Ranking functions of CR start(V,V1,V2,V3) 

#### Partial ranking functions of CR start(V,V1,V2,V3) 


### Resulting Chains:start(V,V1,V2,V3) 
* [174]...
* [173]
* [172]
* [171]


### Merging Chains  start/4 into  External patterns of execution 
* [[172],[173]] --> 1 
* [[171]] --> 2 
* [[174]] --> 3 


Computing Bounds
=====================================

#### Cost of loops [85,86,87] 

 * loop 85:afterNth(V,V1,Out) -> [afterNth(V',V1',Out')] 
1
 * loop 86:afterNth(V,V1,Out) -> [afterNth(V',V1',Out')] 
1
 * loop 87:afterNth(V,V1,Out) -> [afterNth(V',V1',Out')] 
1
#### Cost of phase [85,86,87]:afterNth(V,V1,Out) -> [afterNth(V',V1',Out')] 
1*it(85)+1*it(86)+1*it(87)+0
  Such that:aux(1) =< V
aux(2) =< V+V1
aux(3) =< V+V1-V'-V1'
aux(4) =< V-V'
aux(5) =< V1
aux(6) =< V1-V1'
it(86) =< aux(1)
it(87) =< aux(1)
it(85) =< aux(2)
it(86) =< aux(2)
it(87) =< aux(2)
it(85) =< aux(3)
it(86) =< aux(3)
it(87) =< aux(3)
it(86) =< aux(4)
it(87) =< aux(4)
it(85) =< aux(5)
it(87) =< aux(5)
it(85) =< aux(6)
it(87) =< aux(6)

#### Cost of chains of afterNth(V,V1,Out):
* Chain [[85,86,87],88]: 1*it(85)+1*it(86)+1*it(87)+0
  Such that:aux(7) =< V
aux(8) =< V+V1
aux(9) =< V1
it(86) =< aux(7)
it(87) =< aux(7)
it(85) =< aux(8)
it(86) =< aux(8)
it(87) =< aux(8)
it(85) =< aux(9)
it(87) =< aux(9)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [88]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [89,90] 

 * loop 89:and(V,V1,Out) -> [and(V',V1',Out')] 
1
 * loop 90:and(V,V1,Out) -> [and(V',V1',Out')] 
1
#### Cost of phase [89,90]:and(V,V1,Out) -> [and(V',V1',Out')] 
1*it(89)+1*it(90)+0
  Such that:it(90) =< V1
it(90) =< V1-V1'
aux(10) =< V
aux(11) =< V-V'
it(89) =< aux(10)
it(90) =< aux(10)
it(89) =< aux(11)
it(90) =< aux(11)

#### Cost of chains of and(V,V1,Out):
* Chain [[89,90],91]: 1*it(89)+1*it(90)+0
  Such that:aux(10) =< V
it(90) =< V1
aux(11) =< Out
it(89) =< aux(10)
it(90) =< aux(10)
it(89) =< aux(11)
it(90) =< aux(11)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [91]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [92,93] 

 * loop 92:cons(V,V1,Out) -> [cons(V',V1',Out')] 
1
 * loop 93:cons(V,V1,Out) -> [cons(V',V1',Out')] 
1
#### Cost of phase [92,93]:cons(V,V1,Out) -> [cons(V',V1',Out')] 
1*it(92)+1*it(93)+0
  Such that:it(93) =< V1
it(93) =< V1-V1'
aux(12) =< V
aux(13) =< V-V'
it(92) =< aux(12)
it(93) =< aux(12)
it(92) =< aux(13)
it(93) =< aux(13)

#### Cost of chains of cons(V,V1,Out):
* Chain [[92,93],94]: 1*it(92)+1*it(93)+0
  Such that:aux(12) =< V
it(93) =< V1
aux(13) =< Out
it(92) =< aux(12)
it(93) =< aux(12)
it(92) =< aux(13)
it(93) =< aux(13)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [94]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [95] 

 * loop 95:fst(V,Out) -> [fst(V',Out')] 
1
#### Cost of phase [95]:fst(V,Out) -> [fst(V',Out')] 
1*it(95)+0
  Such that:it(95) =< V
it(95) =< V-V'

#### Cost of chains of fst(V,Out):
* Chain [[95],96]: 1*it(95)+0
  Such that:it(95) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [96]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [97,98] 

 * loop 97:fun(V,V1,Out) -> [fun(V',V1',Out')] 
1
 * loop 98:fun(V,V1,Out) -> [fun(V',V1',Out')] 
1
#### Cost of phase [97,98]:fun(V,V1,Out) -> [fun(V',V1',Out')] 
1*it(97)+1*it(98)+0
  Such that:it(98) =< V1
it(98) =< V1-V1'
aux(14) =< V
aux(15) =< V-V'
it(97) =< aux(14)
it(98) =< aux(14)
it(97) =< aux(15)
it(98) =< aux(15)

#### Cost of chains of fun(V,V1,Out):
* Chain [[97,98],99]: 1*it(97)+1*it(98)+0
  Such that:aux(14) =< V
it(98) =< V1
aux(15) =< Out
it(97) =< aux(14)
it(98) =< aux(14)
it(97) =< aux(15)
it(98) =< aux(15)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [99]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [100,101] 

 * loop 100:fun1(V,V1,Out) -> [fun1(V',V1',Out')] 
1
 * loop 101:fun1(V,V1,Out) -> [fun1(V',V1',Out')] 
1
#### Cost of phase [100,101]:fun1(V,V1,Out) -> [fun1(V',V1',Out')] 
1*it(100)+1*it(101)+0
  Such that:it(101) =< V1
it(101) =< V1-V1'
aux(16) =< V
aux(17) =< V-V'
it(100) =< aux(16)
it(101) =< aux(16)
it(100) =< aux(17)
it(101) =< aux(17)

#### Cost of chains of fun1(V,V1,Out):
* Chain [[100,101],102]: 1*it(100)+1*it(101)+0
  Such that:aux(16) =< V
it(101) =< V1
aux(17) =< Out
it(100) =< aux(16)
it(101) =< aux(16)
it(100) =< aux(17)
it(101) =< aux(17)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [102]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [103,104] 

 * loop 103:fun10(V,V1,V2,V3,Out) -> [fun10(V',V1',V2',V3',Out')] 
1
 * loop 104:fun10(V,V1,V2,V3,Out) -> [fun10(V',V1',V2',V3',Out')] 
1
#### Cost of phase [103,104]:fun10(V,V1,V2,V3,Out) -> [fun10(V',V1',V2',V3',Out')] 
1*it(103)+1*it(104)+0
  Such that:it(104) =< V1
it(104) =< V1-V1'
it(104) =< V2
it(104) =< V2-V2'
it(104) =< V3
it(104) =< V3-V3'
aux(18) =< V
aux(19) =< V-V'
it(103) =< aux(18)
it(104) =< aux(18)
it(103) =< aux(19)
it(104) =< aux(19)

#### Cost of chains of fun10(V,V1,V2,V3,Out):
* Chain [[103,104],105]: 1*it(103)+1*it(104)+0
  Such that:aux(18) =< V
it(104) =< V1
aux(19) =< Out
it(103) =< aux(18)
it(104) =< aux(18)
it(103) =< aux(19)
it(104) =< aux(19)

  with precondition: [V1>=0,V2>=0,V3>=0,Out>=1,V>=Out] 

* Chain [105]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0,V3>=0] 


#### Cost of loops [106,107] 

 * loop 106:fun2(V,V1,V2,Out) -> [fun2(V',V1',V2',Out')] 
1
 * loop 107:fun2(V,V1,V2,Out) -> [fun2(V',V1',V2',Out')] 
1
#### Cost of phase [106,107]:fun2(V,V1,V2,Out) -> [fun2(V',V1',V2',Out')] 
1*it(106)+1*it(107)+0
  Such that:it(107) =< V1
it(107) =< V1-V1'
it(107) =< V2
it(107) =< V2-V2'
aux(20) =< V
aux(21) =< V-V'
it(106) =< aux(20)
it(107) =< aux(20)
it(106) =< aux(21)
it(107) =< aux(21)

#### Cost of chains of fun2(V,V1,V2,Out):
* Chain [[106,107],108]: 1*it(106)+1*it(107)+0
  Such that:aux(20) =< V
it(107) =< V1
aux(21) =< Out
it(106) =< aux(20)
it(107) =< aux(20)
it(106) =< aux(21)
it(107) =< aux(21)

  with precondition: [V1>=0,V2>=0,Out>=1,V>=Out] 

* Chain [108]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0] 


#### Cost of loops [109,110] 

 * loop 109:fun3(V,V1,Out) -> [fun3(V',V1',Out')] 
1
 * loop 110:fun3(V,V1,Out) -> [fun3(V',V1',Out')] 
1
#### Cost of phase [109,110]:fun3(V,V1,Out) -> [fun3(V',V1',Out')] 
1*it(109)+1*it(110)+0
  Such that:it(110) =< V1
it(110) =< V1-V1'
aux(22) =< V
aux(23) =< V-V'
it(109) =< aux(22)
it(110) =< aux(22)
it(109) =< aux(23)
it(110) =< aux(23)

#### Cost of chains of fun3(V,V1,Out):
* Chain [[109,110],111]: 1*it(109)+1*it(110)+0
  Such that:aux(22) =< V
it(110) =< V1
aux(23) =< Out
it(109) =< aux(22)
it(110) =< aux(22)
it(109) =< aux(23)
it(110) =< aux(23)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [111]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [112,113] 

 * loop 112:fun4(V,V1,V2,Out) -> [fun4(V',V1',V2',Out')] 
1
 * loop 113:fun4(V,V1,V2,Out) -> [fun4(V',V1',V2',Out')] 
1
#### Cost of phase [112,113]:fun4(V,V1,V2,Out) -> [fun4(V',V1',V2',Out')] 
1*it(112)+1*it(113)+0
  Such that:it(113) =< V1
it(113) =< V1-V1'
it(113) =< V2
it(113) =< V2-V2'
aux(24) =< V
aux(25) =< V-V'
it(112) =< aux(24)
it(113) =< aux(24)
it(112) =< aux(25)
it(113) =< aux(25)

#### Cost of chains of fun4(V,V1,V2,Out):
* Chain [[112,113],114]: 1*it(112)+1*it(113)+0
  Such that:aux(24) =< V
it(113) =< V1
aux(25) =< Out
it(112) =< aux(24)
it(113) =< aux(24)
it(112) =< aux(25)
it(113) =< aux(25)

  with precondition: [V1>=0,V2>=0,Out>=1,V>=Out] 

* Chain [114]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0] 


#### Cost of loops [115,116] 

 * loop 115:fun5(V,V1,Out) -> [fun5(V',V1',Out')] 
1
 * loop 116:fun5(V,V1,Out) -> [fun5(V',V1',Out')] 
1
#### Cost of phase [115,116]:fun5(V,V1,Out) -> [fun5(V',V1',Out')] 
1*it(115)+1*it(116)+0
  Such that:it(116) =< V1
it(116) =< V1-V1'
aux(26) =< V
aux(27) =< V-V'
it(115) =< aux(26)
it(116) =< aux(26)
it(115) =< aux(27)
it(116) =< aux(27)

#### Cost of chains of fun5(V,V1,Out):
* Chain [[115,116],117]: 1*it(115)+1*it(116)+0
  Such that:aux(26) =< V
it(116) =< V1
aux(27) =< Out
it(115) =< aux(26)
it(116) =< aux(26)
it(115) =< aux(27)
it(116) =< aux(27)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [117]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [118,119] 

 * loop 118:fun6(V,V1,V2,Out) -> [fun6(V',V1',V2',Out')] 
1
 * loop 119:fun6(V,V1,V2,Out) -> [fun6(V',V1',V2',Out')] 
1
#### Cost of phase [118,119]:fun6(V,V1,V2,Out) -> [fun6(V',V1',V2',Out')] 
1*it(118)+1*it(119)+0
  Such that:it(119) =< V1
it(119) =< V1-V1'
it(119) =< V2
it(119) =< V2-V2'
aux(28) =< V
aux(29) =< V-V'
it(118) =< aux(28)
it(119) =< aux(28)
it(118) =< aux(29)
it(119) =< aux(29)

#### Cost of chains of fun6(V,V1,V2,Out):
* Chain [[118,119],120]: 1*it(118)+1*it(119)+0
  Such that:aux(28) =< V
it(119) =< V1
aux(29) =< Out
it(118) =< aux(28)
it(119) =< aux(28)
it(118) =< aux(29)
it(119) =< aux(29)

  with precondition: [V1>=0,V2>=0,Out>=1,V>=Out] 

* Chain [120]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0] 


#### Cost of loops [121,122] 

 * loop 121:fun7(V,V1,Out) -> [fun7(V',V1',Out')] 
1
 * loop 122:fun7(V,V1,Out) -> [fun7(V',V1',Out')] 
1
#### Cost of phase [121,122]:fun7(V,V1,Out) -> [fun7(V',V1',Out')] 
1*it(121)+1*it(122)+0
  Such that:it(122) =< V1
it(122) =< V1-V1'
aux(30) =< V
aux(31) =< V-V'
it(121) =< aux(30)
it(122) =< aux(30)
it(121) =< aux(31)
it(122) =< aux(31)

#### Cost of chains of fun7(V,V1,Out):
* Chain [[121,122],123]: 1*it(121)+1*it(122)+0
  Such that:aux(30) =< V
it(122) =< V1
aux(31) =< Out
it(121) =< aux(30)
it(122) =< aux(30)
it(121) =< aux(31)
it(122) =< aux(31)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [123]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [124,125] 

 * loop 124:fun8(V,V1,Out) -> [fun8(V',V1',Out')] 
1
 * loop 125:fun8(V,V1,Out) -> [fun8(V',V1',Out')] 
1
#### Cost of phase [124,125]:fun8(V,V1,Out) -> [fun8(V',V1',Out')] 
1*it(124)+1*it(125)+0
  Such that:it(125) =< V1
it(125) =< V1-V1'
aux(32) =< V
aux(33) =< V-V'
it(124) =< aux(32)
it(125) =< aux(32)
it(124) =< aux(33)
it(125) =< aux(33)

#### Cost of chains of fun8(V,V1,Out):
* Chain [[124,125],126]: 1*it(124)+1*it(125)+0
  Such that:aux(32) =< V
it(125) =< V1
aux(33) =< Out
it(124) =< aux(32)
it(125) =< aux(32)
it(124) =< aux(33)
it(125) =< aux(33)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [126]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [127,128] 

 * loop 127:fun9(V,V1,Out) -> [fun9(V',V1',Out')] 
1
 * loop 128:fun9(V,V1,Out) -> [fun9(V',V1',Out')] 
1
#### Cost of phase [127,128]:fun9(V,V1,Out) -> [fun9(V',V1',Out')] 
1*it(127)+1*it(128)+0
  Such that:it(128) =< V1
it(128) =< V1-V1'
aux(34) =< V
aux(35) =< V-V'
it(127) =< aux(34)
it(128) =< aux(34)
it(127) =< aux(35)
it(128) =< aux(35)

#### Cost of chains of fun9(V,V1,Out):
* Chain [[127,128],129]: 1*it(127)+1*it(128)+0
  Such that:aux(34) =< V
it(128) =< V1
aux(35) =< Out
it(127) =< aux(34)
it(128) =< aux(34)
it(127) =< aux(35)
it(128) =< aux(35)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [129]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [130] 

 * loop 130:head(V,Out) -> [head(V',Out')] 
1
#### Cost of phase [130]:head(V,Out) -> [head(V',Out')] 
1*it(130)+0
  Such that:it(130) =< V
it(130) =< V-V'

#### Cost of chains of head(V,Out):
* Chain [[130],131]: 1*it(130)+0
  Such that:it(130) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [131]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [132] 

 * loop 132:isLNat(V,Out) -> [isLNat(V',Out')] 
1
#### Cost of phase [132]:isLNat(V,Out) -> [isLNat(V',Out')] 
1*it(132)+0
  Such that:it(132) =< V
it(132) =< V-V'

#### Cost of chains of isLNat(V,Out):
* Chain [[132],133]: 1*it(132)+0
  Such that:it(132) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [133]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [134] 

 * loop 134:isNatural(V,Out) -> [isNatural(V',Out')] 
1
#### Cost of phase [134]:isNatural(V,Out) -> [isNatural(V',Out')] 
1*it(134)+0
  Such that:it(134) =< V
it(134) =< V-V'

#### Cost of chains of isNatural(V,Out):
* Chain [[134],135]: 1*it(134)+0
  Such that:it(134) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [135]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [136] 

 * loop 136:isPLNat(V,Out) -> [isPLNat(V',Out')] 
1
#### Cost of phase [136]:isPLNat(V,Out) -> [isPLNat(V',Out')] 
1*it(136)+0
  Such that:it(136) =< V
it(136) =< V-V'

#### Cost of chains of isPLNat(V,Out):
* Chain [[136],137]: 1*it(136)+0
  Such that:it(136) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [137]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [138] 

 * loop 138:natsFrom(V,Out) -> [natsFrom(V',Out')] 
1
#### Cost of phase [138]:natsFrom(V,Out) -> [natsFrom(V',Out')] 
1*it(138)+0
  Such that:it(138) =< V
it(138) =< V-V'

#### Cost of chains of natsFrom(V,Out):
* Chain [[138],139]: 1*it(138)+0
  Such that:it(138) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [139]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [140,141,142] 

 * loop 140:pair(V,V1,Out) -> [pair(V',V1',Out')] 
1
 * loop 141:pair(V,V1,Out) -> [pair(V',V1',Out')] 
1
 * loop 142:pair(V,V1,Out) -> [pair(V',V1',Out')] 
1
#### Cost of phase [140,141,142]:pair(V,V1,Out) -> [pair(V',V1',Out')] 
1*it(140)+1*it(141)+1*it(142)+0
  Such that:aux(36) =< V
aux(37) =< V+V1
aux(38) =< V+V1-V'-V1'
aux(39) =< V-V'
aux(40) =< V1
aux(41) =< V1-V1'
it(141) =< aux(36)
it(142) =< aux(36)
it(140) =< aux(37)
it(141) =< aux(37)
it(142) =< aux(37)
it(140) =< aux(38)
it(141) =< aux(38)
it(142) =< aux(38)
it(141) =< aux(39)
it(142) =< aux(39)
it(140) =< aux(40)
it(142) =< aux(40)
it(140) =< aux(41)
it(142) =< aux(41)

#### Cost of chains of pair(V,V1,Out):
* Chain [[140,141,142],143]: 1*it(140)+1*it(141)+1*it(142)+0
  Such that:aux(42) =< V
aux(43) =< V+V1
aux(44) =< V1
it(141) =< aux(42)
it(142) =< aux(42)
it(140) =< aux(43)
it(141) =< aux(43)
it(142) =< aux(43)
it(140) =< aux(44)
it(142) =< aux(44)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [143]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of chains of proper(V,Out):
* Chain [147]: 1
  with precondition: [V=0,Out=1] 

* Chain [146]: 1
  with precondition: [V=1,Out=2] 

* Chain [145]: 1
  with precondition: [V=2,Out=3] 

* Chain [144]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [148] 

 * loop 148:s(V,Out) -> [s(V',Out')] 
1
#### Cost of phase [148]:s(V,Out) -> [s(V',Out')] 
1*it(148)+0
  Such that:it(148) =< V
it(148) =< V-V'

#### Cost of chains of s(V,Out):
* Chain [[148],149]: 1*it(148)+0
  Such that:it(148) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [149]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [150,151,152] 

 * loop 150:sel(V,V1,Out) -> [sel(V',V1',Out')] 
1
 * loop 151:sel(V,V1,Out) -> [sel(V',V1',Out')] 
1
 * loop 152:sel(V,V1,Out) -> [sel(V',V1',Out')] 
1
#### Cost of phase [150,151,152]:sel(V,V1,Out) -> [sel(V',V1',Out')] 
1*it(150)+1*it(151)+1*it(152)+0
  Such that:aux(45) =< V
aux(46) =< V+V1
aux(47) =< V+V1-V'-V1'
aux(48) =< V-V'
aux(49) =< V1
aux(50) =< V1-V1'
it(151) =< aux(45)
it(152) =< aux(45)
it(150) =< aux(46)
it(151) =< aux(46)
it(152) =< aux(46)
it(150) =< aux(47)
it(151) =< aux(47)
it(152) =< aux(47)
it(151) =< aux(48)
it(152) =< aux(48)
it(150) =< aux(49)
it(152) =< aux(49)
it(150) =< aux(50)
it(152) =< aux(50)

#### Cost of chains of sel(V,V1,Out):
* Chain [[150,151,152],153]: 1*it(150)+1*it(151)+1*it(152)+0
  Such that:aux(51) =< V
aux(52) =< V+V1
aux(53) =< V1
it(151) =< aux(51)
it(152) =< aux(51)
it(150) =< aux(52)
it(151) =< aux(52)
it(152) =< aux(52)
it(150) =< aux(53)
it(152) =< aux(53)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [153]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [154] 

 * loop 154:snd(V,Out) -> [snd(V',Out')] 
1
#### Cost of phase [154]:snd(V,Out) -> [snd(V',Out')] 
1*it(154)+0
  Such that:it(154) =< V
it(154) =< V-V'

#### Cost of chains of snd(V,Out):
* Chain [[154],155]: 1*it(154)+0
  Such that:it(154) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [155]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [156,157,158] 

 * loop 156:splitAt(V,V1,Out) -> [splitAt(V',V1',Out')] 
1
 * loop 157:splitAt(V,V1,Out) -> [splitAt(V',V1',Out')] 
1
 * loop 158:splitAt(V,V1,Out) -> [splitAt(V',V1',Out')] 
1
#### Cost of phase [156,157,158]:splitAt(V,V1,Out) -> [splitAt(V',V1',Out')] 
1*it(156)+1*it(157)+1*it(158)+0
  Such that:aux(54) =< V
aux(55) =< V+V1
aux(56) =< V+V1-V'-V1'
aux(57) =< V-V'
aux(58) =< V1
aux(59) =< V1-V1'
it(157) =< aux(54)
it(158) =< aux(54)
it(156) =< aux(55)
it(157) =< aux(55)
it(158) =< aux(55)
it(156) =< aux(56)
it(157) =< aux(56)
it(158) =< aux(56)
it(157) =< aux(57)
it(158) =< aux(57)
it(156) =< aux(58)
it(158) =< aux(58)
it(156) =< aux(59)
it(158) =< aux(59)

#### Cost of chains of splitAt(V,V1,Out):
* Chain [[156,157,158],159]: 1*it(156)+1*it(157)+1*it(158)+0
  Such that:aux(60) =< V
aux(61) =< V+V1
aux(62) =< V1
it(157) =< aux(60)
it(158) =< aux(60)
it(156) =< aux(61)
it(157) =< aux(61)
it(158) =< aux(61)
it(156) =< aux(62)
it(158) =< aux(62)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [159]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [160] 

 * loop 160:tail(V,Out) -> [tail(V',Out')] 
1
#### Cost of phase [160]:tail(V,Out) -> [tail(V',Out')] 
1*it(160)+0
  Such that:it(160) =< V
it(160) =< V-V'

#### Cost of chains of tail(V,Out):
* Chain [[160],161]: 1*it(160)+0
  Such that:it(160) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [161]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [162,163,164] 

 * loop 162:take(V,V1,Out) -> [take(V',V1',Out')] 
1
 * loop 163:take(V,V1,Out) -> [take(V',V1',Out')] 
1
 * loop 164:take(V,V1,Out) -> [take(V',V1',Out')] 
1
#### Cost of phase [162,163,164]:take(V,V1,Out) -> [take(V',V1',Out')] 
1*it(162)+1*it(163)+1*it(164)+0
  Such that:aux(63) =< V
aux(64) =< V+V1
aux(65) =< V+V1-V'-V1'
aux(66) =< V-V'
aux(67) =< V1
aux(68) =< V1-V1'
it(163) =< aux(63)
it(164) =< aux(63)
it(162) =< aux(64)
it(163) =< aux(64)
it(164) =< aux(64)
it(162) =< aux(65)
it(163) =< aux(65)
it(164) =< aux(65)
it(163) =< aux(66)
it(164) =< aux(66)
it(162) =< aux(67)
it(164) =< aux(67)
it(162) =< aux(68)
it(164) =< aux(68)

#### Cost of chains of take(V,V1,Out):
* Chain [[162,163,164],165]: 1*it(162)+1*it(163)+1*it(164)+0
  Such that:aux(69) =< V
aux(70) =< V+V1
aux(71) =< V1
it(163) =< aux(69)
it(164) =< aux(69)
it(162) =< aux(70)
it(163) =< aux(70)
it(164) =< aux(70)
it(162) =< aux(71)
it(164) =< aux(71)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [165]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [167,168,169] 

 * loop 167:top(V,Out) -> [top(V',Out')] 
2
 * loop 168:top(V,Out) -> [top(V',Out')] 
2
 * loop 169:top(V,Out) -> [top(V',Out')] 
2
#### Cost of phase [167,168,169]:top(V,Out) -> [top(V',Out')] 
6*it(167)+0
#### Cost of phase [167,168,169]:top(V,Out) -> [top(V',Out')] 
6*it(167)+0
#### Cost of phase [167,168,169]:top(V,Out) -> [top(V',Out')] 
6*it(167)+0
#### Cost of chains of top(V,Out):
* Chain [[167,168,169]]...: 6*it(167)+0
  with precondition: [V>=1] 

* Chain [[167,168,169],170]: 6*it(167)+0
  with precondition: [Out=0,V>=1] 

* Chain [[167,168,169],166,170]: 6*it(167)+1
  with precondition: [Out=0,V>=1] 

* Chain [170]: 0
  with precondition: [Out=0,V>=0] 

* Chain [166,170]: 1
  with precondition: [Out=0,V>=1] 


#### Cost of chains of start(V,V1,V2,V3):
* Chain [174]...: 6*s(3)+0
  with precondition: [V>=1] 

* Chain [173]: 1*s(4)+22*s(5)+13*s(7)+5*s(39)+5*s(40)+5*s(41)+1
  Such that:aux(86) =< V
aux(87) =< V+V1
aux(88) =< V1
s(5) =< aux(86)
s(7) =< aux(88)
s(39) =< aux(86)
s(40) =< aux(86)
s(41) =< aux(87)
s(39) =< aux(87)
s(40) =< aux(87)
s(41) =< aux(88)
s(40) =< aux(88)
s(7) =< aux(86)

  with precondition: [V>=0] 

* Chain [172]: 1
  with precondition: [V=1] 

* Chain [171]: 1
  with precondition: [V=2] 


Closed-form bounds of start(V,V1,V2,V3): 
-------------------------------------
* Chain [174]... with precondition: [V>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [173] with precondition: [V>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [172] with precondition: [V=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [171] with precondition: [V=2] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V,V1,V2,V3): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 236 ms.
* Invariants computed in 381 ms.
   - Backward Invariants 139 ms.
   - Transitive Invariants 118 ms.
* Refinement performed in 756 ms.
* Termination proved in 134 ms.
* Upper bounds computed in 356 ms.
   - Equation cost structures 128 ms.
   - Phase cost structures 146 ms.
   - Chain cost structures 122 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 2321 ms.


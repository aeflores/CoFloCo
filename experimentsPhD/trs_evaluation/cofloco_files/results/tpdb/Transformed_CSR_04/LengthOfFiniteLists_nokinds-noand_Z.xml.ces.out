
Preprocessing Cost Relations
=====================================
12. SCC does not have a single cut point : [isNatList/2,isNat/2]  
 Merged into isNatListisNat/2

#### Computed strongly connected components 
0. non_recursive  : [cons/3]
1. non_recursive  : [fun/1]
2. non_recursive  : [length/2]
3. non_recursive  : [nil/1]
4. non_recursive  : [s/2]
5. non_recursive  : [zeros/1]
6. non_recursive  : [activate/2]
7. non_recursive  : [fun1/2]
8. non_recursive  : [fun2/2]
9. non_recursive  : [fun3/2]
10. non_recursive  : [fun5/2]
11. non_recursive  : [fun7/2]
13. recursive [non_tail] : [fun4/3,isNatIList/2]
14. non_recursive  : [fun9/3]
15. non_recursive  : [fun8/4]
16. non_recursive  : [start/3]
12. recursive [non_tail,multiple] : [fun6/3,isNatListisNat/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into zeros/1
6. SCC is partially evaluated into activate/2
7. SCC is partially evaluated into fun1/2
8. SCC is partially evaluated into fun2/2
9. SCC is partially evaluated into fun3/2
10. SCC is partially evaluated into fun5/2
11. SCC is partially evaluated into fun7/2
13. SCC is partially evaluated into isNatIList/2
14. SCC is partially evaluated into fun9/3
15. SCC is partially evaluated into fun8/4
16. SCC is partially evaluated into start/3
12. SCC is partially evaluated into isNatListisNat/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations zeros/1 
* CE 36 is refined into CE [48] 
* CE 37 is refined into CE [49] 


#### Refined cost equations zeros/1 
* CE 48: zeros(Out) = 3
     [Out=3] 
* CE 49: zeros(Out) = 1
     [Out=2] 

### Cost equations --> "Loop" of zeros/1 
* CEs [48] --> Loop 28 
* CEs [49] --> Loop 29 

#### Loops of zeros/1 
* Loop 28: zeros(Out) [Out=3] 
* Loop 29: zeros(Out) [Out=2] 

### Ranking functions of CR zeros(Out) 

#### Partial ranking functions of CR zeros(Out) 


### Resulting Chains:zeros(Out) 
* [29]
* [28]


### Merging Chains  zeros/1 into  External patterns of execution 
* [[29]] --> 1 
* [[28]] --> 2 


### Specialization of cost equations activate/2 
* CE 17 is refined into CE [50,51] 
* CE 18 is refined into CE [52] 
* CE 19 is refined into CE [53] 
* CE 20 is refined into CE [54] 


#### Refined cost equations activate/2 
* CE 50: activate(V3,Out) = 1+ zeros(W3):1
     [W3=2,Out=2,V3=2] 
* CE 51: activate(V3,Out) = 1+ zeros(W3):2
     [W3=3,Out=3,V3=2] 
* CE 52: activate(V3,Out) = 2
     [Out=0,V3=0] 
* CE 53: activate(A,A) = 2
     [A>=1] 
* CE 54: activate(A,A) = 1
     [A>=0] 

### Cost equations --> "Loop" of activate/2 
* CEs [51] --> Loop 30 
* CEs [50] --> Loop 31 
* CEs [52,53,54] --> Loop 32 

#### Loops of activate/2 
* Loop 30: activate(V3,Out) [Out=3,V3=2] 
* Loop 31: activate(V3,Out) [Out=2,V3=2] 
* Loop 32: activate(A,A) [A>=0] 

### Ranking functions of CR activate(V3,Out) 

#### Partial ranking functions of CR activate(V3,Out) 


### Resulting Chains:activate(V3,Out) 
* [32]
* [31]
* [30]


### Merging Chains  activate/2 into  External patterns of execution 
* [[31],[32]] --> 1 
* [[30]] --> 2 


### Specialization of cost equations fun1/2 
* CE 39 is refined into CE [55] 
* CE 38 is refined into CE [56] 


#### Refined cost equations fun1/2 
* CE 55: fun1(V3,Out) = 0
     [V3>=0,Out=0] 
* CE 56: fun1(V3,Out) = 1
     [Out=1,V3=1] 

### Cost equations --> "Loop" of fun1/2 
* CEs [55] --> Loop 33 
* CEs [56] --> Loop 34 

#### Loops of fun1/2 
* Loop 33: fun1(V3,Out) [V3>=0,Out=0] 
* Loop 34: fun1(V3,Out) [Out=1,V3=1] 

### Ranking functions of CR fun1(V3,Out) 

#### Partial ranking functions of CR fun1(V3,Out) 


### Resulting Chains:fun1(V3,Out) 
* [34]
* [33]


### Merging Chains  fun1/2 into  External patterns of execution 
* [[34]] --> 1 
* [[33]] --> 2 


### Specialization of cost equations fun2/2 
* CE 41 is refined into CE [57] 
* CE 40 is refined into CE [58] 


#### Refined cost equations fun2/2 
* CE 57: fun2(V3,Out) = 0
     [V3>=0,Out=0] 
* CE 58: fun2(V3,Out) = 1
     [Out=1,V3=1] 

### Cost equations --> "Loop" of fun2/2 
* CEs [57] --> Loop 35 
* CEs [58] --> Loop 36 

#### Loops of fun2/2 
* Loop 35: fun2(V3,Out) [V3>=0,Out=0] 
* Loop 36: fun2(V3,Out) [Out=1,V3=1] 

### Ranking functions of CR fun2(V3,Out) 

#### Partial ranking functions of CR fun2(V3,Out) 


### Resulting Chains:fun2(V3,Out) 
* [36]
* [35]


### Merging Chains  fun2/2 into  External patterns of execution 
* [[36]] --> 1 
* [[35]] --> 2 


### Specialization of cost equations fun3/2 
* CE 43 is refined into CE [59] 
* CE 42 is refined into CE [60] 


#### Refined cost equations fun3/2 
* CE 59: fun3(V3,Out) = 0
     [V3>=0,Out=0] 
* CE 60: fun3(V3,Out) = 1
     [Out=1,V3=1] 

### Cost equations --> "Loop" of fun3/2 
* CEs [59] --> Loop 37 
* CEs [60] --> Loop 38 

#### Loops of fun3/2 
* Loop 37: fun3(V3,Out) [V3>=0,Out=0] 
* Loop 38: fun3(V3,Out) [Out=1,V3=1] 

### Ranking functions of CR fun3(V3,Out) 

#### Partial ranking functions of CR fun3(V3,Out) 


### Resulting Chains:fun3(V3,Out) 
* [38]
* [37]


### Merging Chains  fun3/2 into  External patterns of execution 
* [[38]] --> 1 
* [[37]] --> 2 


### Specialization of cost equations fun5/2 
* CE 35 is refined into CE [61] 
* CE 34 is refined into CE [62] 


#### Refined cost equations fun5/2 
* CE 61: fun5(V3,Out) = 0
     [V3>=0,Out=0] 
* CE 62: fun5(V3,Out) = 1
     [Out=1,V3=1] 

### Cost equations --> "Loop" of fun5/2 
* CEs [61] --> Loop 39 
* CEs [62] --> Loop 40 

#### Loops of fun5/2 
* Loop 39: fun5(V3,Out) [V3>=0,Out=0] 
* Loop 40: fun5(V3,Out) [Out=1,V3=1] 

### Ranking functions of CR fun5(V3,Out) 

#### Partial ranking functions of CR fun5(V3,Out) 


### Resulting Chains:fun5(V3,Out) 
* [40]
* [39]


### Merging Chains  fun5/2 into  External patterns of execution 
* [[40]] --> 1 
* [[39]] --> 2 


### Specialization of cost equations fun7/2 
* CE 29 is refined into CE [63] 
* CE 28 is refined into CE [64] 


#### Refined cost equations fun7/2 
* CE 63: fun7(V3,Out) = 0
     [V3>=0,Out=0] 
* CE 64: fun7(V3,Out) = 1
     [Out=1,V3=1] 

### Cost equations --> "Loop" of fun7/2 
* CEs [63] --> Loop 41 
* CEs [64] --> Loop 42 

#### Loops of fun7/2 
* Loop 41: fun7(V3,Out) [V3>=0,Out=0] 
* Loop 42: fun7(V3,Out) [Out=1,V3=1] 

### Ranking functions of CR fun7(V3,Out) 

#### Partial ranking functions of CR fun7(V3,Out) 


### Resulting Chains:fun7(V3,Out) 
* [42]
* [41]


### Merging Chains  fun7/2 into  External patterns of execution 
* [[42]] --> 1 
* [[41]] --> 2 


### Specialization of cost equations isNatListisNat/2 
* CE 21 is refined into CE [65,66,67,68] 
* CE 26 is refined into CE [69,70,71,72] 
* CE 27 is refined into CE [73,74,75,76] 
* CE 24 is refined into CE [77] 
* CE 23 is refined into CE [78] 
* CE 25 is refined into CE [79] 
* CE 22 is refined into CE [80,81,82,83,84,85,86,87,88,89,90,91] 


#### Refined cost equations isNatListisNat/2 
* CE 65: isNatListisNat(A,B) = 1+ activate(C,C):1+ isNatListisNat(C,D)+ activate(E,E):1
     [D>=0,E>=0,C>=0,C+E+1=A,B=0] 
* CE 66: isNatListisNat(A,B) = 1+ activate(C,C):1+ isNatListisNat(C,D)+ activate(E,F):2
     [D>=0,C>=0,C+3=A,F=3,E=2,B=0] 
* CE 67: isNatListisNat(A,B) = 1+ activate(C,D):2+ isNatListisNat(E,F)+ activate(G,G):1
     [F>=0,G>=0,G+3=A,E=3,D=3,C=2,B=0] 
* CE 68: isNatListisNat(A,B) = 1+ activate(C,D):2+ isNatListisNat(E,F)+ activate(G,H):2
     [F>=0,E=3,H=3,G=2,D=3,C=2,B=0,A=5] 
* CE 69: isNatListisNat(A,B) = 1+ activate(C,C):1+ isNatListisNat(C,D)+ fun1(E,F):1
     [C>=0,C+1=A,D=1,F=1,E=1,B=1] 
* CE 70: isNatListisNat(A,B) = 1+ activate(C,C):1+ isNatListisNat(C,D)+ fun1(D,E):2
     [D>=0,C>=0,C+1=A,E=0,B=0] 
* CE 71: isNatListisNat(A,B) = 1+ activate(C,D):2+ isNatListisNat(E,F)+ fun1(G,H):1
     [F=1,E=3,H=1,G=1,D=3,C=2,B=1,A=3] 
* CE 72: isNatListisNat(A,B) = 1+ activate(C,D):2+ isNatListisNat(E,F)+ fun1(F,G):2
     [F>=0,E=3,G=0,D=3,C=2,B=0,A=3] 
* CE 73: isNatListisNat(A,B) = 1+ activate(C,C):1+ isNatListisNat(C,D)+ fun2(E,F):1
     [C>=0,C+1=A,D=1,F=1,E=1,B=1] 
* CE 74: isNatListisNat(A,B) = 1+ activate(C,C):1+ isNatListisNat(C,D)+ fun2(D,E):2
     [D>=0,C>=0,C+1=A,E=0,B=0] 
* CE 75: isNatListisNat(A,B) = 1+ activate(C,D):2+ isNatListisNat(E,F)+ fun2(G,H):1
     [F=1,E=3,H=1,G=1,D=3,C=2,B=1,A=3] 
* CE 76: isNatListisNat(A,B) = 1+ activate(C,D):2+ isNatListisNat(E,F)+ fun2(F,G):2
     [F>=0,E=3,G=0,D=3,C=2,B=0,A=3] 
* CE 77: isNatListisNat(A,B) = 0
     [A>=0,B=0] 
* CE 78: isNatListisNat(A,B) = 1
     [B=1,A=1] 
* CE 79: isNatListisNat(A,B) = 1
     [B=1,A=0] 
* CE 80: isNatListisNat(A,B) = 2+ activate(C,C):1+ isNatListisNat(C,D)+ activate(E,E):1+ activate(E,E):1+ isNatListisNat(E,F)+ fun7(G,H):1
     [E>=0,C>=0,C+E+1=A,F=1,D=1,H=1,G=1,B=1] 
* CE 81: isNatListisNat(A,B) = 2+ activate(C,C):1+ isNatListisNat(C,D)+ activate(E,E):1+ activate(E,E):1+ isNatListisNat(E,F)+ fun7(F,G):2
     [F>=0,E>=0,C>=0,C+E+1=A,D=1,G=0,B=0] 
* CE 82: isNatListisNat(A,B) = 2+ activate(C,C):1+ isNatListisNat(C,D)+ activate(E,F):1+ activate(G,H):2+ isNatListisNat(I,J)+ fun7(K,L):1
     [C>=0,C+3=A,J=1,I=3,D=1,L=1,K=1,H=3,G=2,F=2,E=2,B=1] 
* CE 83: isNatListisNat(A,B) = 2+ activate(C,C):1+ isNatListisNat(C,D)+ activate(E,F):1+ activate(G,H):2+ isNatListisNat(I,J)+ fun7(J,K):2
     [J>=0,C>=0,C+3=A,I=3,D=1,K=0,H=3,G=2,F=2,E=2,B=0] 
* CE 84: isNatListisNat(A,B) = 2+ activate(C,C):1+ isNatListisNat(C,D)+ activate(E,F):2+ activate(G,H):1+ isNatListisNat(I,J)+ fun7(K,L):1
     [C>=0,C+3=A,J=1,I=3,D=1,L=1,K=1,H=3,G=3,F=3,E=2,B=1] 
* CE 85: isNatListisNat(A,B) = 2+ activate(C,C):1+ isNatListisNat(C,D)+ activate(E,F):2+ activate(G,H):1+ isNatListisNat(I,J)+ fun7(J,K):2
     [J>=0,C>=0,C+3=A,I=3,D=1,K=0,H=3,G=3,F=3,E=2,B=0] 
* CE 86: isNatListisNat(A,B) = 2+ activate(C,D):2+ isNatListisNat(E,F)+ activate(G,G):1+ activate(G,G):1+ isNatListisNat(G,H)+ fun7(I,J):1
     [G>=0,G+3=A,H=1,F=1,E=3,J=1,I=1,D=3,C=2,B=1] 
* CE 87: isNatListisNat(A,B) = 2+ activate(C,D):2+ isNatListisNat(E,F)+ activate(G,G):1+ activate(G,G):1+ isNatListisNat(G,H)+ fun7(H,I):2
     [H>=0,G>=0,G+3=A,F=1,E=3,I=0,D=3,C=2,B=0] 
* CE 88: isNatListisNat(A,B) = 2+ activate(C,D):2+ isNatListisNat(E,F)+ activate(G,H):1+ activate(I,J):2+ isNatListisNat(K,L)+ fun7(M,N):1
     [L=1,K=3,F=1,E=3,N=1,M=1,J=3,I=2,H=2,G=2,D=3,C=2,B=1,A=5] 
* CE 89: isNatListisNat(A,B) = 2+ activate(C,D):2+ isNatListisNat(E,F)+ activate(G,H):1+ activate(I,J):2+ isNatListisNat(K,L)+ fun7(L,M):2
     [L>=0,K=3,F=1,E=3,M=0,J=3,I=2,H=2,G=2,D=3,C=2,B=0,A=5] 
* CE 90: isNatListisNat(A,B) = 2+ activate(C,D):2+ isNatListisNat(E,F)+ activate(G,H):2+ activate(I,J):1+ isNatListisNat(K,L)+ fun7(M,N):1
     [L=1,K=3,F=1,E=3,N=1,M=1,J=3,I=3,H=3,G=2,D=3,C=2,B=1,A=5] 
* CE 91: isNatListisNat(A,B) = 2+ activate(C,D):2+ isNatListisNat(E,F)+ activate(G,H):2+ activate(I,J):1+ isNatListisNat(K,L)+ fun7(L,M):2
     [L>=0,K=3,F=1,E=3,M=0,J=3,I=3,H=3,G=2,D=3,C=2,B=0,A=5] 

### Cost equations --> "Loop" of isNatListisNat/2 
* CEs [80] --> Loop 43 
* CEs [82,84] --> Loop 44 
* CEs [86] --> Loop 45 
* CEs [81] --> Loop 46 
* CEs [83,85] --> Loop 47 
* CEs [87] --> Loop 48 
* CEs [88,90] --> Loop 49 
* CEs [89,91] --> Loop 50 
* CEs [77] --> Loop 51 
* CEs [78] --> Loop 52 
* CEs [79] --> Loop 53 
* CEs [69,73] --> Loop 54 
* CEs [70,74] --> Loop 55 
* CEs [66] --> Loop 56 
* CEs [65,68] --> Loop 57 
* CEs [71,75] --> Loop 58 
* CEs [67,72,76] --> Loop 59 

#### Loops of isNatListisNat/2 
* Loop 43: isNatListisNat(A,B)->  isNatListisNat(A',B')  isNatListisNat(A'2,B'2)
                  [A>=A'+1,A'>=0,A'+A'2+1=A,B'2=1,B'=1,B=1] 
* Loop 44: isNatListisNat(A,B)->  isNatListisNat(A',B')  isNatListisNat(A'2,B'2)
                  [A>=3,A=A'+3,B'2=1,A'2=3,B'=1,B=1] 
* Loop 45: isNatListisNat(A,B)->  isNatListisNat(A',B')  isNatListisNat(A'2,B'2)
                  [A>=3,A=A'2+3,B'2=1,B'=1,A'=3,B=1] 
* Loop 46: isNatListisNat(A,B)->  isNatListisNat(A',B')  isNatListisNat(A'2,B'2)
                  [A>=A'+1,B'2>=0,A'>=0,A'+A'2+1=A,B'=1,B=0] 
* Loop 47: isNatListisNat(A,B)->  isNatListisNat(A',B')  isNatListisNat(A'2,B'2)
                  [B'2>=0,A>=3,A=A'+3,A'2=3,B'=1,B=0] 
* Loop 48: isNatListisNat(A,B)->  isNatListisNat(A',B')  isNatListisNat(A'2,B'2)
                  [B'2>=0,A>=3,A=A'2+3,B'=1,A'=3,B=0] 
* Loop 49: isNatListisNat(A,B)->  isNatListisNat(A',B')  isNatListisNat(A'2,B'2)
                  [B'2=1,A'2=3,B'=1,A'=3,B=1,A=5] 
* Loop 50: isNatListisNat(A,B)->  isNatListisNat(A',B')  isNatListisNat(A'2,B'2)
                  [B'2>=0,A'2=3,B'=1,A'=3,B=0,A=5] 
* Loop 51: isNatListisNat(A,B) [A>=0,B=0] 
* Loop 52: isNatListisNat(A,B) [B=1,A=1] 
* Loop 53: isNatListisNat(A,B) [B=1,A=0] 
* Loop 54: isNatListisNat(A,B)->  isNatListisNat(A',B')
                  [A>=1,A=A'+1,B'=1,B=1] 
* Loop 55: isNatListisNat(A,B)->  isNatListisNat(A',B')
                  [B'>=0,A>=1,A=A'+1,B=0] 
* Loop 56: isNatListisNat(A,B)->  isNatListisNat(A',B')
                  [B'>=0,A>=3,A=A'+3,B=0] 
* Loop 57: isNatListisNat(A,B)->  isNatListisNat(A',B')
                  [A>=A'+1,B'>=0,A'>=0,B=0] 
* Loop 58: isNatListisNat(A,B)->  isNatListisNat(A',B')
                  [B'=1,A'=3,B=1,A=3] 
* Loop 59: isNatListisNat(A,B)->  isNatListisNat(A',B')
                  [B'>=0,A>=3,A'=3,B=0] 

### Ranking functions of CR isNatListisNat(A,B) 

#### Partial ranking functions of CR isNatListisNat(A,B) 
* Partial RF of phase [43,44,45,49,54,58]:
  - RF of loop [43:1,43:2,54:1]:
    A
  - RF of loop [44:1,45:2]:
    A-2
  - RF of loop [49:1,49:2]:
    A/2-2
* Partial RF of phase [46,47,48,50,55,56,57,59]:
  - RF of loop [46:1,46:2,55:1,57:1]:
    A
  - RF of loop [47:1,48:2,56:1]:
    A-2
  - RF of loop [50:1,50:2]:
    A/2-2


### Resulting Chains:isNatListisNat(A,B) 
* [multiple([46,47,48,50,55,56,57,59],[[],[multiple([43,44,45,49,54,58],[[],[53],[52]])],[53],[52],[51]])]...
* [multiple([43,44,45,49,54,58],[[],[53],[52]])]...
* [53]
* [52]
* [51]


### Merging Chains  isNatListisNat/2 into  External patterns of execution 
* [[53]] --> 1 
* [[52]] --> 2 
* [[51]] --> 3 
* [[multiple([46,47,48,50,55,56,57,59],[[],[multiple([43,44,45,49,54,58],[[],[53],[52]])],[53],[52],[51]])]] --> 4 
* [[multiple([43,44,45,49,54,58],[[],[53],[52]])]] --> 5 


### Specialization of cost equations isNatIList/2 
* CE 30 is refined into CE [92,93,94,95,96,97,98,99,100,101,102,103] 
* CE 32 is refined into CE [104,105,106,107,108,109,110,111,112,113] 
* CE 33 is refined into CE [114] 
* CE 31 is refined into CE [115,116,117,118,119,120,121,122,123,124,125,126,127,128] 


#### Refined cost equations isNatIList/2 
* CE 92: isNatIList(V3,Out) = 1+ activate(W3,X3):1+ isNatListisNat(Y3,Z3):1+ activate(A4,A4):1
     [A4>=0,A4+1=V3,Z3=1,Y3=0,X3=0,W3=0,Out=0] 
* CE 93: isNatIList(V3,Out) = 1+ activate(W3,X3):1+ isNatListisNat(Y3,Z3):1+ activate(A4,B4):2
     [B4=3,A4=2,Z3=1,Y3=0,X3=0,W3=0,Out=0,V3=3] 
* CE 94: isNatIList(V3,Out) = 1+ activate(W3,X3):1+ isNatListisNat(Y3,Z3):2+ activate(A4,A4):1
     [A4>=0,A4+2=V3,Z3=1,Y3=1,X3=1,W3=1,Out=0] 
* CE 95: isNatIList(V3,Out) = 1+ activate(W3,X3):1+ isNatListisNat(Y3,Z3):2+ activate(A4,B4):2
     [B4=3,A4=2,Z3=1,Y3=1,X3=1,W3=1,Out=0,V3=4] 
* CE 96: isNatIList(V3,Out) = 1+ activate(W3,W3):1+ isNatListisNat(W3,X3):3+ activate(Y3,Y3):1
     [Y3>=0,W3>=0,W3+Y3+1=V3,X3=0,Out=0] 
* CE 97: isNatIList(V3,Out) = 1+ activate(W3,W3):1+ isNatListisNat(W3,X3):3+ activate(Y3,Z3):2
     [W3>=0,W3+3=V3,Z3=3,Y3=2,X3=0,Out=0] 
* CE 98: isNatIList(V3,Out) = 1+ activate(W3,W3):1+ isNatListisNat(W3,X3):4
     [Y3>=0,Z3>=0,W3>=1,W3+Z3+1=V3,X3=0,Out=0] 
* CE 99: isNatIList(V3,Out) = 1+ activate(W3,W3):1+ isNatListisNat(W3,X3):5
     [Y3>=0,Z3>=0,W3>=1,W3+Z3+1=V3,X3=1,Out=0] 
* CE 100: isNatIList(V3,Out) = 1+ activate(W3,X3):2+ isNatListisNat(Y3,Z3):3+ activate(A4,A4):1
     [A4>=0,A4+3=V3,Z3=0,Y3=3,X3=3,W3=2,Out=0] 
* CE 101: isNatIList(V3,Out) = 1+ activate(W3,X3):2+ isNatListisNat(Y3,Z3):3+ activate(A4,B4):2
     [B4=3,A4=2,Z3=0,Y3=3,X3=3,W3=2,Out=0,V3=5] 
* CE 102: isNatIList(V3,Out) = 1+ activate(W3,X3):2+ isNatListisNat(Y3,Z3):4
     [A4>=0,B4>=0,B4+3=V3,Z3=0,Y3=3,X3=3,W3=2,Out=0] 
* CE 103: isNatIList(V3,Out) = 1+ activate(W3,X3):2+ isNatListisNat(Y3,Z3):5
     [A4>=0,B4>=0,B4+3=V3,Z3=1,Y3=3,X3=3,W3=2,Out=0] 
* CE 104: isNatIList(V3,Out) = 1+ activate(W3,X3):1+ isNatListisNat(Y3,Z3):1+ fun3(A4,B4):1
     [B4=1,A4=1,Z3=1,Y3=0,X3=0,W3=0,Out=1,V3=0] 
* CE 105: isNatIList(V3,Out) = 1+ activate(W3,X3):1+ isNatListisNat(Y3,Z3):1+ fun3(A4,B4):2
     [B4=0,A4=1,Z3=1,Y3=0,X3=0,W3=0,Out=0,V3=0] 
* CE 106: isNatIList(V3,Out) = 1+ activate(W3,X3):1+ isNatListisNat(Y3,Z3):2+ fun3(A4,B4):1
     [B4=1,A4=1,Z3=1,Y3=1,X3=1,W3=1,Out=1,V3=1] 
* CE 107: isNatIList(V3,Out) = 1+ activate(W3,X3):1+ isNatListisNat(Y3,Z3):2+ fun3(A4,B4):2
     [B4=0,A4=1,Z3=1,Y3=1,X3=1,W3=1,Out=0,V3=1] 
* CE 108: isNatIList(V3,Out) = 1+ activate(V3,V3):1+ isNatListisNat(V3,W3):3+ fun3(X3,Y3):2
     [V3>=0,Y3=0,X3=0,W3=0,Out=0] 
* CE 109: isNatIList(V3,Out) = 1+ activate(V3,V3):1+ isNatListisNat(V3,W3):4
     [V3>=1,X3=0,W3=0] 
* CE 110: isNatIList(V3,Out) = 1+ activate(V3,V3):1+ isNatListisNat(V3,W3):5
     [V3>=1,X3=1,W3=1] 
* CE 111: isNatIList(V3,Out) = 1+ activate(W3,X3):2+ isNatListisNat(Y3,Z3):3+ fun3(A4,B4):2
     [B4=0,A4=0,Z3=0,Y3=3,X3=3,W3=2,Out=0,V3=2] 
* CE 112: isNatIList(V3,Out) = 1+ activate(W3,X3):2+ isNatListisNat(Y3,Z3):4
     [A4=0,Z3=0,Y3=3,X3=3,W3=2,V3=2] 
* CE 113: isNatIList(V3,Out) = 1+ activate(W3,X3):2+ isNatListisNat(Y3,Z3):5
     [A4=1,Z3=1,Y3=3,X3=3,W3=2,V3=2] 
* CE 114: isNatIList(V3,Out) = 1
     [Out=1,V3=2] 
* CE 115: isNatIList(V3,Out) = 2+ activate(W3,X3):1+ isNatListisNat(Y3,Z3):1+ activate(A4,A4):1+ activate(A4,A4):1+ isNatIList(A4,B4)+ fun5(C4,D4):1
     [A4>=0,A4+1=V3,B4=1,D4=1,C4=1,Z3=1,Y3=0,X3=0,W3=0,Out=1] 
* CE 116: isNatIList(V3,Out) = 2+ activate(W3,X3):1+ isNatListisNat(Y3,Z3):1+ activate(A4,A4):1+ activate(A4,A4):1+ isNatIList(A4,B4)+ fun5(B4,C4):2
     [B4>=0,A4>=0,A4+1=V3,C4=0,Z3=1,Y3=0,X3=0,W3=0,Out=0] 
* CE 117: isNatIList(V3,Out) = 2+ activate(W3,X3):1+ isNatListisNat(Y3,Z3):1+ activate(A4,B4):1+ activate(C4,D4):2+ isNatIList(E4,F4)+ fun5(G4,H4):1
     [F4=1,E4=3,H4=1,G4=1,D4=3,C4=2,B4=2,A4=2,Z3=1,Y3=0,X3=0,W3=0,Out=1,V3=3] 
* CE 118: isNatIList(V3,Out) = 2+ activate(W3,X3):1+ isNatListisNat(Y3,Z3):1+ activate(A4,B4):1+ activate(C4,D4):2+ isNatIList(E4,F4)+ fun5(F4,G4):2
     [F4>=0,E4=3,G4=0,D4=3,C4=2,B4=2,A4=2,Z3=1,Y3=0,X3=0,W3=0,Out=0,V3=3] 
* CE 119: isNatIList(V3,Out) = 2+ activate(W3,X3):1+ isNatListisNat(Y3,Z3):1+ activate(A4,B4):2+ activate(C4,D4):1+ isNatIList(E4,F4)+ fun5(G4,H4):1
     [F4=1,E4=3,H4=1,G4=1,D4=3,C4=3,B4=3,A4=2,Z3=1,Y3=0,X3=0,W3=0,Out=1,V3=3] 
* CE 120: isNatIList(V3,Out) = 2+ activate(W3,X3):1+ isNatListisNat(Y3,Z3):1+ activate(A4,B4):2+ activate(C4,D4):1+ isNatIList(E4,F4)+ fun5(F4,G4):2
     [F4>=0,E4=3,G4=0,D4=3,C4=3,B4=3,A4=2,Z3=1,Y3=0,X3=0,W3=0,Out=0,V3=3] 
* CE 121: isNatIList(V3,Out) = 2+ activate(W3,X3):1+ isNatListisNat(Y3,Z3):2+ activate(A4,A4):1+ activate(A4,A4):1+ isNatIList(A4,B4)+ fun5(C4,D4):1
     [A4>=0,A4+2=V3,B4=1,D4=1,C4=1,Z3=1,Y3=1,X3=1,W3=1,Out=1] 
* CE 122: isNatIList(V3,Out) = 2+ activate(W3,X3):1+ isNatListisNat(Y3,Z3):2+ activate(A4,A4):1+ activate(A4,A4):1+ isNatIList(A4,B4)+ fun5(B4,C4):2
     [B4>=0,A4>=0,A4+2=V3,C4=0,Z3=1,Y3=1,X3=1,W3=1,Out=0] 
* CE 123: isNatIList(V3,Out) = 2+ activate(W3,X3):1+ isNatListisNat(Y3,Z3):2+ activate(A4,B4):1+ activate(C4,D4):2+ isNatIList(E4,F4)+ fun5(G4,H4):1
     [F4=1,E4=3,H4=1,G4=1,D4=3,C4=2,B4=2,A4=2,Z3=1,Y3=1,X3=1,W3=1,Out=1,V3=4] 
* CE 124: isNatIList(V3,Out) = 2+ activate(W3,X3):1+ isNatListisNat(Y3,Z3):2+ activate(A4,B4):1+ activate(C4,D4):2+ isNatIList(E4,F4)+ fun5(F4,G4):2
     [F4>=0,E4=3,G4=0,D4=3,C4=2,B4=2,A4=2,Z3=1,Y3=1,X3=1,W3=1,Out=0,V3=4] 
* CE 125: isNatIList(V3,Out) = 2+ activate(W3,X3):1+ isNatListisNat(Y3,Z3):2+ activate(A4,B4):2+ activate(C4,D4):1+ isNatIList(E4,F4)+ fun5(G4,H4):1
     [F4=1,E4=3,H4=1,G4=1,D4=3,C4=3,B4=3,A4=2,Z3=1,Y3=1,X3=1,W3=1,Out=1,V3=4] 
* CE 126: isNatIList(V3,Out) = 2+ activate(W3,X3):1+ isNatListisNat(Y3,Z3):2+ activate(A4,B4):2+ activate(C4,D4):1+ isNatIList(E4,F4)+ fun5(F4,G4):2
     [F4>=0,E4=3,G4=0,D4=3,C4=3,B4=3,A4=2,Z3=1,Y3=1,X3=1,W3=1,Out=0,V3=4] 
* CE 127: isNatIList(V3,Out) = 2+ activate(W3,W3):1+ isNatListisNat(W3,X3):5
     [Y3>=0,Z3>=0,W3>=1,W3+Z3+1=V3,X3=1] 
* CE 128: isNatIList(V3,Out) = 2+ activate(W3,X3):2+ isNatListisNat(Y3,Z3):5
     [A4>=0,B4>=0,B4+3=V3,Z3=1,Y3=3,X3=3,W3=2] 

### Cost equations --> "Loop" of isNatIList/2 
* CEs [98,99,102,103] --> Loop 60 
* CEs [109,110,112,113,127,128] --> Loop 61 
* CEs [121] --> Loop 62 
* CEs [122] --> Loop 63 
* CEs [115,123,125] --> Loop 64 
* CEs [116,124,126] --> Loop 65 
* CEs [117,119] --> Loop 66 
* CEs [118,120] --> Loop 67 
* CEs [101] --> Loop 68 
* CEs [95] --> Loop 69 
* CEs [93] --> Loop 70 
* CEs [114] --> Loop 71 
* CEs [111] --> Loop 72 
* CEs [106] --> Loop 73 
* CEs [107] --> Loop 74 
* CEs [104] --> Loop 75 
* CEs [92,94,96,97,100,105,108] --> Loop 76 

#### Loops of isNatIList/2 
* Loop 60: isNatIList(V3,Out) [V3>=2,Out=0] 
* Loop 61: isNatIList(V3,Out) [V3>=1] 
* Loop 62: isNatIList(V3,Out)->  isNatIList(V3',Out')
                  [V3>=2,V3=V3'+2,Out'=1,Out=1] 
* Loop 63: isNatIList(V3,Out)->  isNatIList(V3',Out')
                  [Out'>=0,V3>=2,V3=V3'+2,Out=0] 
* Loop 64: isNatIList(V3,Out)->  isNatIList(V3',Out')
                  [V3>=1,V3=V3'+1,Out'=1,Out=1] 
* Loop 65: isNatIList(V3,Out)->  isNatIList(V3',Out')
                  [Out'>=0,V3>=1,V3=V3'+1,Out=0] 
* Loop 66: isNatIList(V3,Out)->  isNatIList(V3',Out')
                  [Out'=1,V3'=3,Out=1,V3=3] 
* Loop 67: isNatIList(V3,Out)->  isNatIList(V3',Out')
                  [Out'>=0,V3'=3,Out=0,V3=3] 
* Loop 68: isNatIList(V3,Out) [Out=0,V3=5] 
* Loop 69: isNatIList(V3,Out) [Out=0,V3=4] 
* Loop 70: isNatIList(V3,Out) [Out=0,V3=3] 
* Loop 71: isNatIList(V3,Out) [Out=1,V3=2] 
* Loop 72: isNatIList(V3,Out) [Out=0,V3=2] 
* Loop 73: isNatIList(V3,Out) [Out=1,V3=1] 
* Loop 74: isNatIList(V3,Out) [Out=0,V3=1] 
* Loop 75: isNatIList(V3,Out) [Out=1,V3=0] 
* Loop 76: isNatIList(V3,Out) [V3>=0,Out=0] 

### Ranking functions of CR isNatIList(V3,Out) 

#### Partial ranking functions of CR isNatIList(V3,Out) 
* Partial RF of phase [62,64,66]:
  - RF of loop [62:1]:
    V3-1
  - RF of loop [64:1]:
    V3
* Partial RF of phase [63,65,67]:
  - RF of loop [63:1]:
    V3-1
  - RF of loop [65:1]:
    V3


### Resulting Chains:isNatIList(V3,Out) 
* [[63,65,67]]...
* [[63,65,67],[62,64,66]]...
* [[63,65,67],[62,64,66],75]
* [[63,65,67],[62,64,66],73]
* [[63,65,67],[62,64,66],71]
* [[63,65,67],[62,64,66],61]...
* [[63,65,67],76]
* [[63,65,67],75]
* [[63,65,67],74]
* [[63,65,67],73]
* [[63,65,67],72]
* [[63,65,67],71]
* [[63,65,67],70]
* [[63,65,67],69]
* [[63,65,67],68]
* [[63,65,67],61]...
* [[63,65,67],60]...
* [[62,64,66]]...
* [[62,64,66],75]
* [[62,64,66],73]
* [[62,64,66],71]
* [[62,64,66],61]...
* [76]
* [75]
* [74]
* [73]
* [72]
* [71]
* [70]
* [69]
* [68]
* [61]...
* [60]...


### Merging Chains  isNatIList/2 into  External patterns of execution 
* [[75]] --> 1 
* [[74],[76],[68,[63,65,67]],[69,[63,65,67]],[70,[63,65,67]],[71,[63,65,67]],[72,[63,65,67]],[73,[63,65,67]],[74,[63,65,67]],[75,[63,65,67]],[76,[63,65,67]],[71,[62,64,66],[63,65,67]],[73,[62,64,66],[63,65,67]],[75,[62,64,66],[63,65,67]]] --> 2 
* [[73],[71,[62,64,66]],[73,[62,64,66]],[75,[62,64,66]]] --> 3 
* [[72]] --> 4 
* [[71]] --> 5 
* [[70]] --> 6 
* [[69]] --> 7 
* [[68]] --> 8 
* [[60],[61,[63,65,67]],[[62,64,66],[63,65,67]]] --> 9 
* [[60,[63,65,67]],[61,[62,64,66],[63,65,67]]] --> 10 
* [[61,[62,64,66]]] --> 11 
* [[61]] --> 12 
* [[[63,65,67]]] --> 13 
* [[[62,64,66]]] --> 14 


### Specialization of cost equations fun9/3 
* CE 47 is refined into CE [129] 
* CE 46 is refined into CE [130,131] 


#### Refined cost equations fun9/3 
* CE 129: fun9(V3,V4,Out) = 0
     [V4>=0,V3>=0,Out=0] 
* CE 130: fun9(V3,V4,Out) = 3+ activate(V4,V4):1
     [V4>=0,V4+2=Out,V3=1] 
* CE 131: fun9(V3,V4,Out) = 3+ activate(W4,X4):2
     [X4=3,W4=2,Out=5,V4=2,V3=1] 

### Cost equations --> "Loop" of fun9/3 
* CEs [129] --> Loop 77 
* CEs [130] --> Loop 78 
* CEs [131] --> Loop 79 

#### Loops of fun9/3 
* Loop 77: fun9(V3,V4,Out) [V4>=0,V3>=0,Out=0] 
* Loop 78: fun9(V3,V4,Out) [V4>=0,V4+2=Out,V3=1] 
* Loop 79: fun9(V3,V4,Out) [Out=5,V4=2,V3=1] 

### Ranking functions of CR fun9(V3,V4,Out) 

#### Partial ranking functions of CR fun9(V3,V4,Out) 


### Resulting Chains:fun9(V3,V4,Out) 
* [79]
* [78]
* [77]


### Merging Chains  fun9/3 into  External patterns of execution 
* [[79]] --> 1 
* [[78]] --> 2 
* [[77]] --> 3 


### Specialization of cost equations fun8/4 
* CE 45 is refined into CE [132] 
* CE 44 is refined into CE [133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150] 


#### Refined cost equations fun8/4 
* CE 132: fun8(V3,V4,V5,Out) = 0
     [V5>=0,V4>=0,V3>=0,Out=0] 
* CE 133: fun8(V3,V4,V5,Out) = 1+ activate(W5,X5):1+ isNatListisNat(Y5,Z5):1+ activate(A6,B6):1+ fun9(C6,D6,E6):1
     [E6=5,D6=2,C6=1,B6=2,A6=2,Z5=1,Y5=0,X5=0,W5=0,Out=5,V5=0,V4=2,V3=1] 
* CE 134: fun8(V3,V4,V5,Out) = 1+ activate(W5,X5):1+ isNatListisNat(Y5,Z5):1+ activate(A6,B6):1+ fun9(C6,D6,Out):2
     [Out>=2,Out=D6+2,Out=B6+2,Out=A6+2,Out=V4+2,C6=1,Z5=1,Y5=0,X5=0,W5=0,V5=0,V3=1] 
* CE 135: fun8(V3,V4,V5,Out) = 1+ activate(W5,X5):1+ isNatListisNat(Y5,Z5):1+ activate(V4,V4):1+ fun9(A6,V4,B6):3
     [V4>=0,B6=0,A6=1,Z5=1,Y5=0,X5=0,W5=0,Out=0,V5=0,V3=1] 
* CE 136: fun8(V3,V4,V5,Out) = 1+ activate(W5,X5):1+ isNatListisNat(Y5,Z5):1+ activate(A6,B6):2+ fun9(C6,D6,E6):2
     [E6=5,D6=3,C6=1,B6=3,A6=2,Z5=1,Y5=0,X5=0,W5=0,Out=5,V5=0,V4=2,V3=1] 
* CE 137: fun8(V3,V4,V5,Out) = 1+ activate(W5,X5):1+ isNatListisNat(Y5,Z5):1+ activate(A6,B6):2+ fun9(C6,D6,E6):3
     [E6=0,D6=3,C6=1,B6=3,A6=2,Z5=1,Y5=0,X5=0,W5=0,Out=0,V5=0,V4=2,V3=1] 
* CE 138: fun8(V3,V4,V5,Out) = 1+ activate(W5,X5):1+ isNatListisNat(Y5,Z5):2+ activate(A6,B6):1+ fun9(C6,D6,E6):1
     [E6=5,D6=2,C6=1,B6=2,A6=2,Z5=1,Y5=1,X5=1,W5=1,Out=5,V5=1,V4=2,V3=1] 
* CE 139: fun8(V3,V4,V5,Out) = 1+ activate(W5,X5):1+ isNatListisNat(Y5,Z5):2+ activate(A6,B6):1+ fun9(C6,D6,Out):2
     [Out>=2,Out=D6+2,Out=B6+2,Out=A6+2,Out=V4+2,C6=1,Z5=1,Y5=1,X5=1,W5=1,V5=1,V3=1] 
* CE 140: fun8(V3,V4,V5,Out) = 1+ activate(W5,X5):1+ isNatListisNat(Y5,Z5):2+ activate(V4,V4):1+ fun9(A6,V4,B6):3
     [V4>=0,B6=0,A6=1,Z5=1,Y5=1,X5=1,W5=1,Out=0,V5=1,V3=1] 
* CE 141: fun8(V3,V4,V5,Out) = 1+ activate(W5,X5):1+ isNatListisNat(Y5,Z5):2+ activate(A6,B6):2+ fun9(C6,D6,E6):2
     [E6=5,D6=3,C6=1,B6=3,A6=2,Z5=1,Y5=1,X5=1,W5=1,Out=5,V5=1,V4=2,V3=1] 
* CE 142: fun8(V3,V4,V5,Out) = 1+ activate(W5,X5):1+ isNatListisNat(Y5,Z5):2+ activate(A6,B6):2+ fun9(C6,D6,E6):3
     [E6=0,D6=3,C6=1,B6=3,A6=2,Z5=1,Y5=1,X5=1,W5=1,Out=0,V5=1,V4=2,V3=1] 
* CE 143: fun8(V3,V4,V5,Out) = 1+ activate(V5,V5):1+ isNatListisNat(V5,W5):3+ activate(V4,V4):1+ fun9(X5,V4,Y5):3
     [V4>=0,V5>=0,Y5=0,X5=0,W5=0,Out=0,V3=1] 
* CE 144: fun8(V3,V4,V5,Out) = 1+ activate(V5,V5):1+ isNatListisNat(V5,W5):3+ activate(X5,Y5):2+ fun9(Z5,A6,B6):3
     [V5>=0,B6=0,A6=3,Z5=0,Y5=3,X5=2,W5=0,Out=0,V4=2,V3=1] 
* CE 145: fun8(V3,V4,V5,Out) = 1+ activate(V5,V5):1+ isNatListisNat(V5,W5):4
     [V5>=1,V4>=0,X5=0,W5=0,V3=1] 
* CE 146: fun8(V3,V4,V5,Out) = 1+ activate(V5,V5):1+ isNatListisNat(V5,W5):5
     [V5>=1,V4>=0,X5=1,W5=1,V3=1] 
* CE 147: fun8(V3,V4,V5,Out) = 1+ activate(W5,X5):2+ isNatListisNat(Y5,Z5):3+ activate(V4,V4):1+ fun9(A6,V4,B6):3
     [V4>=0,B6=0,A6=0,Z5=0,Y5=3,X5=3,W5=2,Out=0,V5=2,V3=1] 
* CE 148: fun8(V3,V4,V5,Out) = 1+ activate(W5,X5):2+ isNatListisNat(Y5,Z5):3+ activate(A6,B6):2+ fun9(C6,D6,E6):3
     [E6=0,D6=3,C6=0,B6=3,A6=2,Z5=0,Y5=3,X5=3,W5=2,Out=0,V5=2,V4=2,V3=1] 
* CE 149: fun8(V3,V4,V5,Out) = 1+ activate(W5,X5):2+ isNatListisNat(Y5,Z5):4
     [V4>=0,A6=0,Z5=0,Y5=3,X5=3,W5=2,V5=2,V3=1] 
* CE 150: fun8(V3,V4,V5,Out) = 1+ activate(W5,X5):2+ isNatListisNat(Y5,Z5):5
     [V4>=0,A6=1,Z5=1,Y5=3,X5=3,W5=2,V5=2,V3=1] 

### Cost equations --> "Loop" of fun8/4 
* CEs [145,146,149,150] --> Loop 80 
* CEs [139] --> Loop 81 
* CEs [134] --> Loop 82 
* CEs [135] --> Loop 83 
* CEs [147,148] --> Loop 84 
* CEs [138,141] --> Loop 85 
* CEs [140,142] --> Loop 86 
* CEs [133,136] --> Loop 87 
* CEs [132,137,143,144] --> Loop 88 

#### Loops of fun8/4 
* Loop 80: fun8(V3,V4,V5,Out) [V5>=1,V4>=0,V3=1] 
* Loop 81: fun8(V3,V4,V5,Out) [V4>=0,V4+2=Out,V5=1,V3=1] 
* Loop 82: fun8(V3,V4,V5,Out) [V4>=0,V4+2=Out,V5=0,V3=1] 
* Loop 83: fun8(V3,V4,V5,Out) [V4>=0,Out=0,V5=0,V3=1] 
* Loop 84: fun8(V3,V4,V5,Out) [V4>=0,Out=0,V5=2,V3=1] 
* Loop 85: fun8(V3,V4,V5,Out) [Out=5,V5=1,V4=2,V3=1] 
* Loop 86: fun8(V3,V4,V5,Out) [V4>=0,Out=0,V5=1,V3=1] 
* Loop 87: fun8(V3,V4,V5,Out) [Out=5,V5=0,V4=2,V3=1] 
* Loop 88: fun8(V3,V4,V5,Out) [V5>=0,V4>=0,V3>=0,Out=0] 

### Ranking functions of CR fun8(V3,V4,V5,Out) 

#### Partial ranking functions of CR fun8(V3,V4,V5,Out) 


### Resulting Chains:fun8(V3,V4,V5,Out) 
* [88]
* [87]
* [86]
* [85]
* [84]
* [83]
* [82]
* [81]
* [80]...


### Merging Chains  fun8/4 into  External patterns of execution 
* [[87]] --> 1 
* [[85]] --> 2 
* [[83],[88]] --> 3 
* [[82]] --> 4 
* [[86]] --> 5 
* [[81]] --> 6 
* [[84]] --> 7 
* [[80]] --> 8 


### Specialization of cost equations start/3 
* CE 2 is refined into CE [151] 
* CE 3 is refined into CE [152,153,154,155,156,157,158,159,160,161] 
* CE 4 is refined into CE [162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188] 
* CE 5 is refined into CE [189,190] 
* CE 6 is refined into CE [191,192] 
* CE 7 is refined into CE [193,194] 
* CE 8 is refined into CE [195,196] 
* CE 9 is refined into CE [197,198] 
* CE 10 is refined into CE [199,200] 
* CE 11 is refined into CE [201,202,203,204,205,206,207,208] 
* CE 12 is refined into CE [209,210,211] 
* CE 13 is refined into CE [212,213,214,215,216] 
* CE 14 is refined into CE [217,218,219,220,221,222,223,224,225,226,227,228,229,230] 
* CE 15 is refined into CE [231] 
* CE 16 is refined into CE [232,233] 


#### Refined cost equations start/3 
* CE 151: start(V3,V4,V5) = 0
     [V4>=0,V3>=0] 
* CE 152: start(V3,V4,V5) = 1+ activate(W5,X5):1+ isNatListisNat(Y5,Z5):1+ fun7(A6,B6):1
     [B6=1,A6=1,Z5=1,Y5=0,X5=0,W5=0,V4=0,V3=1] 
* CE 153: start(V3,V4,V5) = 1+ activate(W5,X5):1+ isNatListisNat(Y5,Z5):1+ fun7(A6,B6):2
     [B6=0,A6=1,Z5=1,Y5=0,X5=0,W5=0,V4=0,V3=1] 
* CE 154: start(V3,V4,V5) = 1+ activate(W5,X5):1+ isNatListisNat(Y5,Z5):2+ fun7(A6,B6):1
     [B6=1,A6=1,Z5=1,Y5=1,X5=1,W5=1,V4=1,V3=1] 
* CE 155: start(V3,V4,V5) = 1+ activate(W5,X5):1+ isNatListisNat(Y5,Z5):2+ fun7(A6,B6):2
     [B6=0,A6=1,Z5=1,Y5=1,X5=1,W5=1,V4=1,V3=1] 
* CE 156: start(V3,V4,V5) = 1+ activate(V4,V4):1+ isNatListisNat(V4,W5):3+ fun7(X5,Y5):2
     [V4>=0,Y5=0,X5=0,W5=0,V3=1] 
* CE 157: start(V3,V4,V5) = 1+ activate(V4,V4):1+ isNatListisNat(V4,W5):4
     [V4>=1,X5=0,W5=0,V3=1] 
* CE 158: start(V3,V4,V5) = 1+ activate(V4,V4):1+ isNatListisNat(V4,W5):5
     [V4>=1,X5=1,W5=1,V3=1] 
* CE 159: start(V3,V4,V5) = 1+ activate(W5,X5):2+ isNatListisNat(Y5,Z5):3+ fun7(A6,B6):2
     [B6=0,A6=0,Z5=0,Y5=3,X5=3,W5=2,V4=2,V3=1] 
* CE 160: start(V3,V4,V5) = 1+ activate(W5,X5):2+ isNatListisNat(Y5,Z5):4
     [A6=0,Z5=0,Y5=3,X5=3,W5=2,V4=2,V3=1] 
* CE 161: start(V3,V4,V5) = 1+ activate(W5,X5):2+ isNatListisNat(Y5,Z5):5
     [A6=1,Z5=1,Y5=3,X5=3,W5=2,V4=2,V3=1] 
* CE 162: start(V3,V4,V5) = 1+ activate(W5,X5):1+ isNatIList(Y5,Z5):1+ fun5(A6,B6):1
     [B6=1,A6=1,Z5=1,Y5=0,X5=0,W5=0,V4=0,V3=1] 
* CE 163: start(V3,V4,V5) = 1+ activate(W5,X5):1+ isNatIList(Y5,Z5):1+ fun5(A6,B6):2
     [B6=0,A6=1,Z5=1,Y5=0,X5=0,W5=0,V4=0,V3=1] 
* CE 164: start(V3,V4,V5) = 1+ activate(V4,V4):1+ isNatIList(V4,W5):2+ fun5(X5,Y5):2
     [V4>=0,Y5=0,X5=0,W5=0,V3=1] 
* CE 165: start(V3,V4,V5) = 1+ activate(V4,V4):1+ isNatIList(V4,W5):3+ fun5(X5,Y5):1
     [V4>=1,Y5=1,X5=1,W5=1,V3=1] 
* CE 166: start(V3,V4,V5) = 1+ activate(V4,V4):1+ isNatIList(V4,W5):3+ fun5(X5,Y5):2
     [V4>=1,Y5=0,X5=1,W5=1,V3=1] 
* CE 167: start(V3,V4,V5) = 1+ activate(W5,X5):1+ isNatIList(Y5,Z5):4+ fun5(A6,B6):2
     [B6=0,A6=0,Z5=0,Y5=2,X5=2,W5=2,V4=2,V3=1] 
* CE 168: start(V3,V4,V5) = 1+ activate(W5,X5):1+ isNatIList(Y5,Z5):5+ fun5(A6,B6):1
     [B6=1,A6=1,Z5=1,Y5=2,X5=2,W5=2,V4=2,V3=1] 
* CE 169: start(V3,V4,V5) = 1+ activate(W5,X5):1+ isNatIList(Y5,Z5):5+ fun5(A6,B6):2
     [B6=0,A6=1,Z5=1,Y5=2,X5=2,W5=2,V4=2,V3=1] 
* CE 170: start(V3,V4,V5) = 1+ activate(W5,X5):1+ isNatIList(Y5,Z5):6+ fun5(A6,B6):2
     [B6=0,A6=0,Z5=0,Y5=3,X5=3,W5=3,V4=3,V3=1] 
* CE 171: start(V3,V4,V5) = 1+ activate(W5,X5):1+ isNatIList(Y5,Z5):7+ fun5(A6,B6):2
     [B6=0,A6=0,Z5=0,Y5=4,X5=4,W5=4,V4=4,V3=1] 
* CE 172: start(V3,V4,V5) = 1+ activate(W5,X5):1+ isNatIList(Y5,Z5):8+ fun5(A6,B6):2
     [B6=0,A6=0,Z5=0,Y5=5,X5=5,W5=5,V4=5,V3=1] 
* CE 173: start(V3,V4,V5) = 1+ activate(V4,V4):1+ isNatIList(V4,W5):9
     [V4>=2,X5=0,W5=0,V3=1] 
* CE 174: start(V3,V4,V5) = 1+ activate(V4,V4):1+ isNatIList(V4,W5):10
     [V4>=3,X5=0,W5=0,V3=1] 
* CE 175: start(V3,V4,V5) = 1+ activate(V4,V4):1+ isNatIList(V4,W5):11
     [V4>=2,X5=1,W5=1,V3=1] 
* CE 176: start(V3,V4,V5) = 1+ activate(V4,V4):1+ isNatIList(V4,W5):12
     [V4>=1,V3=1] 
* CE 177: start(V3,V4,V5) = 1+ activate(V4,V4):1+ isNatIList(V4,W5):13
     [V4>=1,X5=0,W5=0,V3=1] 
* CE 178: start(V3,V4,V5) = 1+ activate(V4,V4):1+ isNatIList(V4,W5):14
     [V4>=1,X5=1,W5=1,V3=1] 
* CE 179: start(V3,V4,V5) = 1+ activate(W5,X5):2+ isNatIList(Y5,Z5):2+ fun5(A6,B6):2
     [B6=0,A6=0,Z5=0,Y5=3,X5=3,W5=2,V4=2,V3=1] 
* CE 180: start(V3,V4,V5) = 1+ activate(W5,X5):2+ isNatIList(Y5,Z5):3+ fun5(A6,B6):1
     [B6=1,A6=1,Z5=1,Y5=3,X5=3,W5=2,V4=2,V3=1] 
* CE 181: start(V3,V4,V5) = 1+ activate(W5,X5):2+ isNatIList(Y5,Z5):3+ fun5(A6,B6):2
     [B6=0,A6=1,Z5=1,Y5=3,X5=3,W5=2,V4=2,V3=1] 
* CE 182: start(V3,V4,V5) = 1+ activate(W5,X5):2+ isNatIList(Y5,Z5):6+ fun5(A6,B6):2
     [B6=0,A6=0,Z5=0,Y5=3,X5=3,W5=2,V4=2,V3=1] 
* CE 183: start(V3,V4,V5) = 1+ activate(W5,X5):2+ isNatIList(Y5,Z5):9
     [A6=0,Z5=0,Y5=3,X5=3,W5=2,V4=2,V3=1] 
* CE 184: start(V3,V4,V5) = 1+ activate(W5,X5):2+ isNatIList(Y5,Z5):10
     [A6=0,Z5=0,Y5=3,X5=3,W5=2,V4=2,V3=1] 
* CE 185: start(V3,V4,V5) = 1+ activate(W5,X5):2+ isNatIList(Y5,Z5):11
     [A6=1,Z5=1,Y5=3,X5=3,W5=2,V4=2,V3=1] 
* CE 186: start(V3,V4,V5) = 1+ activate(W5,X5):2+ isNatIList(Y5,Z5):12
     [Y5=3,X5=3,W5=2,V4=2,V3=1] 
* CE 187: start(V3,V4,V5) = 1+ activate(W5,X5):2+ isNatIList(Y5,Z5):13
     [A6=0,Z5=0,Y5=3,X5=3,W5=2,V4=2,V3=1] 
* CE 188: start(V3,V4,V5) = 1+ activate(W5,X5):2+ isNatIList(Y5,Z5):14
     [A6=1,Z5=1,Y5=3,X5=3,W5=2,V4=2,V3=1] 
* CE 189: start(V3,V4,V5) = 0+ zeros(W5):1
     [W5=2] 
* CE 190: start(V3,V4,V5) = 0+ zeros(W5):2
     [W5=3] 
* CE 191: start(V3,V4,V5) = 0+ fun1(W5,X5):1
     [X5=1,W5=1,V3=1] 
* CE 192: start(V3,V4,V5) = 0+ fun1(V3,W5):2
     [V3>=0,W5=0] 
* CE 193: start(V3,V4,V5) = 0+ fun2(W5,X5):1
     [X5=1,W5=1,V3=1] 
* CE 194: start(V3,V4,V5) = 0+ fun2(V3,W5):2
     [V3>=0,W5=0] 
* CE 195: start(V3,V4,V5) = 0+ fun3(W5,X5):1
     [X5=1,W5=1,V3=1] 
* CE 196: start(V3,V4,V5) = 0+ fun3(V3,W5):2
     [V3>=0,W5=0] 
* CE 197: start(V3,V4,V5) = 0+ fun5(W5,X5):1
     [X5=1,W5=1,V3=1] 
* CE 198: start(V3,V4,V5) = 0+ fun5(V3,W5):2
     [V3>=0,W5=0] 
* CE 199: start(V3,V4,V5) = 0+ fun7(W5,X5):1
     [X5=1,W5=1,V3=1] 
* CE 200: start(V3,V4,V5) = 0+ fun7(V3,W5):2
     [V3>=0,W5=0] 
* CE 201: start(V3,V4,V5) = 0+ fun8(W5,X5,Y5,Z5):1
     [Z5=5,Y5=0,X5=2,W5=1,V5=0,V4=2,V3=1] 
* CE 202: start(V3,V4,V5) = 0+ fun8(W5,X5,Y5,Z5):2
     [Z5=5,Y5=1,X5=2,W5=1,V5=1,V4=2,V3=1] 
* CE 203: start(V3,V4,V5) = 0+ fun8(V3,V4,V5,W5):3
     [V5>=0,V4>=0,V3>=0,W5=0] 
* CE 204: start(V3,V4,V5) = 0+ fun8(W5,X5,Y5,Z5):4
     [Z5>=2,Z5=X5+2,Z5=V4+2,Y5=0,W5=1,V5=0,V3=1] 
* CE 205: start(V3,V4,V5) = 0+ fun8(W5,V4,X5,Y5):5
     [V4>=0,Y5=0,X5=1,W5=1,V5=1,V3=1] 
* CE 206: start(V3,V4,V5) = 0+ fun8(W5,X5,Y5,Z5):6
     [Z5>=2,Z5=X5+2,Z5=V4+2,Y5=1,W5=1,V5=1,V3=1] 
* CE 207: start(V3,V4,V5) = 0+ fun8(W5,V4,X5,Y5):7
     [V4>=0,Y5=0,X5=2,W5=1,V5=2,V3=1] 
* CE 208: start(V3,V4,V5) = 0+ fun8(W5,V4,V5,X5):8
     [V5>=1,V4>=0,W5=1,V3=1] 
* CE 209: start(V3,V4,V5) = 0+ fun9(W5,X5,Y5):1
     [Y5=5,X5=2,W5=1,V4=2,V3=1] 
* CE 210: start(V3,V4,V5) = 0+ fun9(W5,X5,Y5):2
     [Y5>=2,Y5=X5+2,Y5=V4+2,W5=1,V3=1] 
* CE 211: start(V3,V4,V5) = 0+ fun9(V3,V4,W5):3
     [V4>=0,V3>=0,W5=0] 
* CE 212: start(V3,V4,V5) = 0+ isNatListisNat(W5,X5):1
     [X5=1,W5=0,V3=0] 
* CE 213: start(V3,V4,V5) = 0+ isNatListisNat(W5,X5):2
     [X5=1,W5=1,V3=1] 
* CE 214: start(V3,V4,V5) = 0+ isNatListisNat(V3,W5):3
     [V3>=0,W5=0] 
* CE 215: start(V3,V4,V5) = 0+ isNatListisNat(V3,W5):4
     [V3>=1,W5=0] 
* CE 216: start(V3,V4,V5) = 0+ isNatListisNat(V3,W5):5
     [V3>=1,W5=1] 
* CE 217: start(V3,V4,V5) = 0+ isNatIList(W5,X5):1
     [X5=1,W5=0,V3=0] 
* CE 218: start(V3,V4,V5) = 0+ isNatIList(V3,W5):2
     [V3>=0,W5=0] 
* CE 219: start(V3,V4,V5) = 0+ isNatIList(V3,W5):3
     [V3>=1,W5=1] 
* CE 220: start(V3,V4,V5) = 0+ isNatIList(W5,X5):4
     [X5=0,W5=2,V3=2] 
* CE 221: start(V3,V4,V5) = 0+ isNatIList(W5,X5):5
     [X5=1,W5=2,V3=2] 
* CE 222: start(V3,V4,V5) = 0+ isNatIList(W5,X5):6
     [X5=0,W5=3,V3=3] 
* CE 223: start(V3,V4,V5) = 0+ isNatIList(W5,X5):7
     [X5=0,W5=4,V3=4] 
* CE 224: start(V3,V4,V5) = 0+ isNatIList(W5,X5):8
     [X5=0,W5=5,V3=5] 
* CE 225: start(V3,V4,V5) = 0+ isNatIList(V3,W5):9
     [V3>=2,W5=0] 
* CE 226: start(V3,V4,V5) = 0+ isNatIList(V3,W5):10
     [V3>=3,W5=0] 
* CE 227: start(V3,V4,V5) = 0+ isNatIList(V3,W5):11
     [V3>=2,W5=1] 
* CE 228: start(V3,V4,V5) = 0+ isNatIList(V3,W5):12
     [V3>=1] 
* CE 229: start(V3,V4,V5) = 0+ isNatIList(V3,W5):13
     [V3>=1,W5=0] 
* CE 230: start(V3,V4,V5) = 0+ isNatIList(V3,W5):14
     [V3>=1,W5=1] 
* CE 231: start(V3,V4,V5) = 1
     [] 
* CE 232: start(V3,V4,V5) = 0+ activate(V3,V3):1
     [V3>=0] 
* CE 233: start(V3,V4,V5) = 0+ activate(W5,X5):2
     [X5=3,W5=2,V3=2] 

### Cost equations --> "Loop" of start/3 
* CEs [151,152,153,154,155,156,159,162,163,164,165,166,167,168,169,170,171,172,179,180,181,182,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,209,210,211,212,213,214,217,218,219,220,221,222,223,224,231,232,233] --> Loop 89 
* CEs [208] --> Loop 90 
* CEs [157,158,160,161,173,174,175,176,177,178,183,184,185,186,187,188,215,216,225,226,227,228,229,230] --> Loop 91 

#### Loops of start/3 
* Loop 89: start(V3,V4,V5) [] 
* Loop 90: start(V3,V4,V5) [V5>=1,V4>=0,V3=1] 
* Loop 91: start(V3,V4,V5) [V3>=1] 

### Ranking functions of CR start(V3,V4,V5) 

#### Partial ranking functions of CR start(V3,V4,V5) 


### Resulting Chains:start(V3,V4,V5) 
* [91]...
* [90]...
* [89]


### Merging Chains  start/3 into  External patterns of execution 
* [[89]] --> 1 
* [[90]] --> 2 
* [[91]] --> 3 


Computing Bounds
=====================================

#### Cost of chains of zeros(Out):
* Chain [29]: 1
  with precondition: [Out=2] 

* Chain [28]: 3
  with precondition: [Out=3] 


#### Cost of chains of activate(V3,Out):
* Chain [32]: 2
  with precondition: [V3=Out,V3>=0] 

* Chain [31]: 2
  with precondition: [V3=2,Out=2] 

* Chain [30]: 4
  with precondition: [V3=2,Out=3] 


#### Cost of chains of fun1(V3,Out):
* Chain [34]: 1
  with precondition: [V3=1,Out=1] 

* Chain [33]: 0
  with precondition: [Out=0,V3>=0] 


#### Cost of chains of fun2(V3,Out):
* Chain [36]: 1
  with precondition: [V3=1,Out=1] 

* Chain [35]: 0
  with precondition: [Out=0,V3>=0] 


#### Cost of chains of fun3(V3,Out):
* Chain [38]: 1
  with precondition: [V3=1,Out=1] 

* Chain [37]: 0
  with precondition: [Out=0,V3>=0] 


#### Cost of chains of fun5(V3,Out):
* Chain [40]: 1
  with precondition: [V3=1,Out=1] 

* Chain [39]: 0
  with precondition: [Out=0,V3>=0] 


#### Cost of chains of fun7(V3,Out):
* Chain [42]: 1
  with precondition: [V3=1,Out=1] 

* Chain [41]: 0
  with precondition: [Out=0,V3>=0] 


#### Cost of loops [43,44,45,49,54,58] 

 * loop 43:isNatListisNat(A,B) -> [isNatListisNat(A',B'),isNatListisNat(A'2,B'2)] 
9
 * loop 44:isNatListisNat(A,B) -> [isNatListisNat(A',B'),isNatListisNat(A'2,B'2)] 
11
 * loop 45:isNatListisNat(A,B) -> [isNatListisNat(A',B'),isNatListisNat(A'2,B'2)] 
11
 * loop 49:isNatListisNat(A,B) -> [isNatListisNat(A',B'),isNatListisNat(A'2,B'2)] 
13
 * loop 54:isNatListisNat(A,B) -> [isNatListisNat(A',B')] 
4
 * loop 58:isNatListisNat(A,B) -> [isNatListisNat(A',B')] 
6
#### Cost of phase [43,44,45,49,54,58]:isNatListisNat(A,B) -> [] 
14*it(43)+22*it(44)+13*it(49)+6*it(58)+1*it([53])+0
  Such that:aux(1) =< A
aux(2) =< A+1
it(49) =< A/2
aux(3) =< 2/3*A
it(44) =< aux(3)
it([53]) =< it(49)*2+it(44)+it(44)+aux(2)
it(43) =< it(49)+aux(1)

#### Cost of loops [46,47,48,50,55,56,57,59] 

 * loop 46:isNatListisNat(A,B) -> [isNatListisNat(A',B'),isNatListisNat(A'2,B'2)] 
8
 * loop 47:isNatListisNat(A,B) -> [isNatListisNat(A',B'),isNatListisNat(A'2,B'2)] 
10
 * loop 48:isNatListisNat(A,B) -> [isNatListisNat(A',B'),isNatListisNat(A'2,B'2)] 
10
 * loop 50:isNatListisNat(A,B) -> [isNatListisNat(A',B'),isNatListisNat(A'2,B'2)] 
12
 * loop 55:isNatListisNat(A,B) -> [isNatListisNat(A',B')] 
3
 * loop 56:isNatListisNat(A,B) -> [isNatListisNat(A',B')] 
7
 * loop 57:isNatListisNat(A,B) -> [isNatListisNat(A',B')] 
9
 * loop 59:isNatListisNat(A,B) -> [isNatListisNat(A',B')] 
7
#### Cost of phase [46,47,48,50,55,56,57,59]:isNatListisNat(A,B) -> [] 
28*it(46)+20*it(47)+12*it(50)+13*it(59)+1*it([53])+14*s(1)+22*s(2)+13*s(3)+1*s(5)+0
  Such that:aux(4) =< A
it(50) =< A/2
aux(8) =< A/2+1/2
aux(11) =< A+1
aux(12) =< 2/3*A
it(47) =< aux(12)
aux(9) =< aux(11)* (1/2)-1/2
aux(10) =< it(50)+it(47)* (1/2)+it(47)* (1/2)+aux(8)
s(3) =< it(50)+it(47)* (1/2)+it(47)* (1/2)+aux(8)
it([53]) =< it(50)*2+it(47)+it(47)+aux(11)
s(7) =< it(50)*2+it(47)+it(47)+aux(11)
s(6) =< it(50)*2+it(47)+it(47)+aux(11)
it(46) =< it(50)+aux(4)
it([multiple([43,44,45,49,54,58],[[],[53],[52]])]) =< it(50)+aux(4)
aux(10) =< it([multiple([43,44,45,49,54,58],[[],[53],[52]])])*aux(9)
s(3) =< it([multiple([43,44,45,49,54,58],[[],[53],[52]])])*aux(9)
s(7) =< it([multiple([43,44,45,49,54,58],[[],[53],[52]])])*aux(11)
s(8) =< aux(10)* (4/3)
s(2) =< s(8)
s(5) =< s(3)*2+s(2)+s(2)+s(7)
s(1) =< s(3)+s(6)

#### Cost of chains of isNatListisNat(A,B):
* Chain [multiple([46,47,48,50,55,56,57,59],[[],[multiple([43,44,45,49,54,58],[[],[53],[52]])],[53],[52],[51]])]...: 28*it(46)+20*it(47)+12*it(50)+13*it(59)+1*it([53])+14*s(1)+22*s(2)+13*s(3)+1*s(5)+0
  Such that:aux(4) =< A
it(50) =< A/2
aux(8) =< A/2+1/2
aux(11) =< A+1
aux(12) =< 2/3*A
it(47) =< aux(12)
aux(9) =< aux(11)* (1/2)-1/2
aux(10) =< it(50)+it(47)* (1/2)+it(47)* (1/2)+aux(8)
s(3) =< it(50)+it(47)* (1/2)+it(47)* (1/2)+aux(8)
it([53]) =< it(50)*2+it(47)+it(47)+aux(11)
s(7) =< it(50)*2+it(47)+it(47)+aux(11)
s(6) =< it(50)*2+it(47)+it(47)+aux(11)
it(46) =< it(50)+aux(4)
it([multiple([43,44,45,49,54,58],[[],[53],[52]])]) =< it(50)+aux(4)
aux(10) =< it([multiple([43,44,45,49,54,58],[[],[53],[52]])])*aux(9)
s(3) =< it([multiple([43,44,45,49,54,58],[[],[53],[52]])])*aux(9)
s(7) =< it([multiple([43,44,45,49,54,58],[[],[53],[52]])])*aux(11)
s(8) =< aux(10)* (4/3)
s(2) =< s(8)
s(5) =< s(3)*2+s(2)+s(2)+s(7)
s(1) =< s(3)+s(6)

  with precondition: [A>=1,B=0] 

* Chain [multiple([43,44,45,49,54,58],[[],[53],[52]])]...: 14*it(43)+22*it(44)+13*it(49)+6*it(58)+1*it([53])+0
  Such that:aux(1) =< A
aux(2) =< A+1
it(49) =< A/2
aux(3) =< 2/3*A
it(44) =< aux(3)
it([53]) =< it(49)*2+it(44)+it(44)+aux(2)
it(43) =< it(49)+aux(1)

  with precondition: [A>=1,B=1] 

* Chain [53]: 1
  with precondition: [A=0,B=1] 

* Chain [52]: 1
  with precondition: [A=1,B=1] 

* Chain [51]: 0
  with precondition: [B=0,A>=0] 


#### Cost of loops [63,65,67] 

 * loop 63:isNatIList(V3,Out) -> [isNatIList(V3',Out')] 
9
 * loop 65:isNatIList(V3,Out) -> [isNatIList(V3',Out')] 
11
 * loop 67:isNatIList(V3,Out) -> [isNatIList(V3',Out')] 
11
#### Cost of phase [63,65,67]:isNatIList(V3,Out) -> [isNatIList(V3',Out')] 
20*it(63)+11*it(67)+0
  Such that:aux(13) =< V3
aux(14) =< V3-V3'
it(63) =< aux(13)
it(63) =< aux(14)

#### Cost of loops [62,64,66] 

 * loop 62:isNatIList(V3,Out) -> [isNatIList(V3',Out')] 
10
 * loop 64:isNatIList(V3,Out) -> [isNatIList(V3',Out')] 
12
 * loop 66:isNatIList(V3,Out) -> [isNatIList(V3',Out')] 
12
#### Cost of phase [62,64,66]:isNatIList(V3,Out) -> [isNatIList(V3',Out')] 
22*it(62)+12*it(66)+0
  Such that:aux(16) =< V3
aux(17) =< V3-V3'
it(62) =< aux(16)
it(62) =< aux(17)

#### Cost of phase [63,65,67]:isNatIList(V3,Out) -> [isNatIList(V3',Out')] 
20*it(63)+11*it(67)+0
  Such that:aux(13) =< V3
aux(14) =< V3-V3'
it(63) =< aux(13)
it(63) =< aux(14)

#### Cost of phase [62,64,66]:isNatIList(V3,Out) -> [isNatIList(V3',Out')] 
22*it(62)+12*it(66)+0
  Such that:aux(16) =< V3
aux(17) =< V3-V3'
it(62) =< aux(16)
it(62) =< aux(17)

#### Cost of phase [63,65,67]:isNatIList(V3,Out) -> [isNatIList(V3',Out')] 
20*it(63)+11*it(67)+0
  Such that:aux(13) =< V3
aux(14) =< V3-V3'
it(63) =< aux(13)
it(63) =< aux(14)

#### Cost of phase [62,64,66]:isNatIList(V3,Out) -> [isNatIList(V3',Out')] 
22*it(62)+12*it(66)+0
  Such that:aux(16) =< V3
aux(17) =< V3-V3'
it(62) =< aux(16)
it(62) =< aux(17)

#### Cost of phase [63,65,67]:isNatIList(V3,Out) -> [isNatIList(V3',Out')] 
20*it(63)+11*it(67)+0
  Such that:aux(13) =< V3
aux(14) =< V3-V3'
it(63) =< aux(13)
it(63) =< aux(14)

#### Cost of phase [62,64,66]:isNatIList(V3,Out) -> [isNatIList(V3',Out')] 
22*it(62)+12*it(66)+0
  Such that:aux(16) =< V3
aux(17) =< V3-V3'
it(62) =< aux(16)
it(62) =< aux(17)

#### Cost of phase [63,65,67]:isNatIList(V3,Out) -> [isNatIList(V3',Out')] 
20*it(63)+11*it(67)+0
  Such that:aux(13) =< V3
aux(14) =< V3-V3'
it(63) =< aux(13)
it(63) =< aux(14)

#### Cost of phase [62,64,66]:isNatIList(V3,Out) -> [isNatIList(V3',Out')] 
22*it(62)+12*it(66)+0
  Such that:aux(16) =< V3
aux(17) =< V3-V3'
it(62) =< aux(16)
it(62) =< aux(17)

#### Cost of phase [63,65,67]:isNatIList(V3,Out) -> [isNatIList(V3',Out')] 
20*it(63)+11*it(67)+0
  Such that:aux(13) =< V3
aux(14) =< V3-V3'
it(63) =< aux(13)
it(63) =< aux(14)

#### Cost of phase [63,65,67]:isNatIList(V3,Out) -> [isNatIList(V3',Out')] 
20*it(63)+11*it(67)+0
  Such that:aux(13) =< V3
aux(14) =< V3-V3'
it(63) =< aux(13)
it(63) =< aux(14)

#### Cost of phase [63,65,67]:isNatIList(V3,Out) -> [isNatIList(V3',Out')] 
20*it(63)+11*it(67)+0
  Such that:aux(13) =< V3
aux(14) =< V3-V3'
it(63) =< aux(13)
it(63) =< aux(14)

#### Cost of phase [63,65,67]:isNatIList(V3,Out) -> [isNatIList(V3',Out')] 
20*it(63)+11*it(67)+0
  Such that:aux(13) =< V3
aux(14) =< V3-V3'
it(63) =< aux(13)
it(63) =< aux(14)

#### Cost of phase [63,65,67]:isNatIList(V3,Out) -> [isNatIList(V3',Out')] 
20*it(63)+11*it(67)+0
  Such that:aux(13) =< V3
aux(14) =< V3-V3'
it(63) =< aux(13)
it(63) =< aux(14)

#### Cost of phase [63,65,67]:isNatIList(V3,Out) -> [isNatIList(V3',Out')] 
20*it(63)+11*it(67)+0
  Such that:aux(13) =< V3
aux(14) =< V3-V3'
it(63) =< aux(13)
it(63) =< aux(14)

#### Cost of phase [63,65,67]:isNatIList(V3,Out) -> [isNatIList(V3',Out')] 
20*it(63)+11*it(67)+0
  Such that:aux(13) =< V3
aux(14) =< V3-V3'
it(63) =< aux(13)
it(63) =< aux(14)

#### Cost of phase [63,65,67]:isNatIList(V3,Out) -> [isNatIList(V3',Out')] 
20*it(63)+11*it(67)+0
  Such that:aux(13) =< V3
aux(14) =< V3-V3'
it(63) =< aux(13)
it(63) =< aux(14)

#### Cost of phase [63,65,67]:isNatIList(V3,Out) -> [isNatIList(V3',Out')] 
20*it(63)+11*it(67)+0
  Such that:aux(13) =< V3
aux(14) =< V3-V3'
it(63) =< aux(13)
it(63) =< aux(14)

#### Cost of phase [63,65,67]:isNatIList(V3,Out) -> [isNatIList(V3',Out')] 
20*it(63)+11*it(67)+0
  Such that:aux(13) =< V3
aux(14) =< V3-V3'
it(63) =< aux(13)
it(63) =< aux(14)

#### Cost of phase [63,65,67]:isNatIList(V3,Out) -> [isNatIList(V3',Out')] 
20*it(63)+11*it(67)+0
  Such that:aux(13) =< V3
aux(14) =< V3-V3'
it(63) =< aux(13)
it(63) =< aux(14)

#### Cost of phase [63,65,67]:isNatIList(V3,Out) -> [isNatIList(V3',Out')] 
20*it(63)+11*it(67)+0
  Such that:aux(13) =< V3
aux(14) =< V3-V3'
it(63) =< aux(13)
it(63) =< aux(14)

#### Cost of chains of isNatIList(V3,Out):
* Chain [[63,65,67]]...: 20*it(63)+11*it(67)+0
  Such that:aux(15) =< V3
it(63) =< aux(15)

  with precondition: [V3>=1,Out=0] 

* Chain [[63,65,67],[62,64,66]]...: 42*it(62)+23*it(66)+0
  Such that:aux(19) =< V3
it(62) =< aux(19)

  with precondition: [Out=0,V3>=2] 

* Chain [[63,65,67],[62,64,66],75]: 42*it(62)+23*it(66)+5
  Such that:aux(21) =< V3
it(62) =< aux(21)

  with precondition: [Out=0,V3>=2] 

* Chain [[63,65,67],[62,64,66],73]: 42*it(62)+23*it(66)+5
  Such that:aux(23) =< V3
it(62) =< aux(23)

  with precondition: [Out=0,V3>=3] 

* Chain [[63,65,67],[62,64,66],71]: 42*it(62)+23*it(66)+1
  Such that:aux(25) =< V3
it(62) =< aux(25)

  with precondition: [Out=0,V3>=3] 

* Chain [[63,65,67],[62,64,66],61]...: 22*it(62)+20*it(63)+73*it(66)+38*s(10)+64*s(14)+13*s(17)+2*s(18)+56*s(21)+22*s(24)+1*s(25)+14*s(26)+38*s(37)+64*s(41)+13*s(44)+3*s(45)+56*s(48)+22*s(51)+1*s(52)+14*s(53)+1*s(68)+6
  Such that:aux(28) =< 2
aux(29) =< 3
aux(30) =< 4
aux(31) =< 3/2
aux(38) =< V3
aux(39) =< V3+1
aux(40) =< 2*V3
aux(14) =< aux(39)
aux(14) =< aux(40)
s(37) =< aux(31)
s(10) =< aux(38)
s(41) =< aux(28)
s(45) =< s(37)*2+s(41)+s(41)+aux(30)
s(48) =< s(37)+aux(29)
s(42) =< aux(30)* (1/2)-1/2
s(43) =< s(37)+s(41)* (1/2)+s(41)* (1/2)+aux(28)
s(44) =< s(37)+s(41)* (1/2)+s(41)* (1/2)+aux(28)
s(46) =< s(37)*2+s(41)+s(41)+aux(30)
s(47) =< s(37)*2+s(41)+s(41)+aux(30)
s(49) =< s(37)+aux(29)
s(43) =< s(49)*s(42)
s(44) =< s(49)*s(42)
s(46) =< s(49)*aux(30)
s(50) =< s(43)* (4/3)
s(51) =< s(50)
s(52) =< s(44)*2+s(51)+s(51)+s(46)
s(53) =< s(44)+s(47)
s(14) =< aux(40)
s(15) =< aux(39)* (1/2)-1/2
s(16) =< s(10)+s(14)* (1/2)+s(14)* (1/2)+aux(39)
s(17) =< s(10)+s(14)* (1/2)+s(14)* (1/2)+aux(39)
s(18) =< s(10)*2+s(14)+s(14)+aux(39)
s(19) =< s(10)*2+s(14)+s(14)+aux(39)
s(20) =< s(10)*2+s(14)+s(14)+aux(39)
s(21) =< s(10)+aux(38)
s(22) =< s(10)+aux(38)
s(16) =< s(22)*s(15)
s(17) =< s(22)*s(15)
s(19) =< s(22)*aux(39)
s(23) =< s(16)* (4/3)
s(24) =< s(23)
s(25) =< s(17)*2+s(24)+s(24)+s(19)
s(26) =< s(17)+s(20)
s(68) =< s(10)*2+s(14)+s(14)+aux(38)
it(62) =< aux(38)
it(62) =< aux(39)
it(63) =< aux(38)
it(63) =< aux(14)

  with precondition: [Out=0,V3>=3] 

* Chain [[63,65,67],76]: 20*it(63)+11*it(67)+7
  Such that:aux(41) =< V3
it(63) =< aux(41)

  with precondition: [Out=0,V3>=1] 

* Chain [[63,65,67],75]: 20*it(63)+11*it(67)+5
  Such that:aux(42) =< V3
it(63) =< aux(42)

  with precondition: [Out=0,V3>=1] 

* Chain [[63,65,67],74]: 20*it(63)+11*it(67)+4
  Such that:aux(43) =< V3
it(63) =< aux(43)

  with precondition: [Out=0,V3>=2] 

* Chain [[63,65,67],73]: 20*it(63)+11*it(67)+5
  Such that:aux(44) =< V3
it(63) =< aux(44)

  with precondition: [Out=0,V3>=2] 

* Chain [[63,65,67],72]: 20*it(63)+11*it(67)+5
  Such that:aux(45) =< V3
it(63) =< aux(45)

  with precondition: [Out=0,V3>=3] 

* Chain [[63,65,67],71]: 20*it(63)+11*it(67)+1
  Such that:aux(46) =< V3
it(63) =< aux(46)

  with precondition: [Out=0,V3>=3] 

* Chain [[63,65,67],70]: 20*it(63)+11*it(67)+8
  Such that:aux(47) =< V3
it(63) =< aux(47)

  with precondition: [Out=0,V3>=3] 

* Chain [[63,65,67],69]: 20*it(63)+11*it(67)+8
  Such that:aux(48) =< V3
it(63) =< aux(48)

  with precondition: [Out=0,V3>=5] 

* Chain [[63,65,67],68]: 20*it(63)+11*it(67)+9
  Such that:aux(49) =< V3
it(63) =< aux(49)

  with precondition: [Out=0,V3>=6] 

* Chain [[63,65,67],61]...: 20*it(63)+61*it(67)+38*s(10)+64*s(14)+13*s(17)+2*s(18)+56*s(21)+22*s(24)+1*s(25)+14*s(26)+38*s(37)+64*s(41)+13*s(44)+3*s(45)+56*s(48)+22*s(51)+1*s(52)+14*s(53)+1*s(68)+6
  Such that:aux(28) =< 2
aux(29) =< 3
aux(30) =< 4
aux(31) =< 3/2
aux(35) =< 2*V3
aux(50) =< V3
aux(51) =< V3+1
s(37) =< aux(31)
s(10) =< aux(50)
s(41) =< aux(28)
s(45) =< s(37)*2+s(41)+s(41)+aux(30)
s(48) =< s(37)+aux(29)
s(42) =< aux(30)* (1/2)-1/2
s(43) =< s(37)+s(41)* (1/2)+s(41)* (1/2)+aux(28)
s(44) =< s(37)+s(41)* (1/2)+s(41)* (1/2)+aux(28)
s(46) =< s(37)*2+s(41)+s(41)+aux(30)
s(47) =< s(37)*2+s(41)+s(41)+aux(30)
s(49) =< s(37)+aux(29)
s(43) =< s(49)*s(42)
s(44) =< s(49)*s(42)
s(46) =< s(49)*aux(30)
s(50) =< s(43)* (4/3)
s(51) =< s(50)
s(52) =< s(44)*2+s(51)+s(51)+s(46)
s(53) =< s(44)+s(47)
s(14) =< aux(35)
s(15) =< aux(51)* (1/2)-1/2
s(16) =< s(10)+s(14)* (1/2)+s(14)* (1/2)+aux(51)
s(17) =< s(10)+s(14)* (1/2)+s(14)* (1/2)+aux(51)
s(18) =< s(10)*2+s(14)+s(14)+aux(51)
s(19) =< s(10)*2+s(14)+s(14)+aux(51)
s(20) =< s(10)*2+s(14)+s(14)+aux(51)
s(21) =< s(10)+aux(50)
s(22) =< s(10)+aux(50)
s(16) =< s(22)*s(15)
s(17) =< s(22)*s(15)
s(19) =< s(22)*aux(51)
s(23) =< s(16)* (4/3)
s(24) =< s(23)
s(25) =< s(17)*2+s(24)+s(24)+s(19)
s(26) =< s(17)+s(20)
s(68) =< s(10)*2+s(14)+s(14)+aux(50)
it(63) =< aux(50)
it(63) =< aux(51)

  with precondition: [Out=0,V3>=2] 

* Chain [[63,65,67],60]...: 20*it(63)+49*it(67)+25*s(80)+42*s(84)+13*s(87)+2*s(88)+42*s(91)+22*s(94)+1*s(95)+14*s(96)+25*s(107)+42*s(111)+13*s(114)+2*s(115)+42*s(118)+22*s(121)+1*s(122)+14*s(123)+5
  Such that:aux(56) =< 2
aux(57) =< 3
aux(58) =< 4
aux(59) =< 3/2
aux(63) =< V3
aux(64) =< 2*V3
s(107) =< aux(59)
s(80) =< aux(63)
s(111) =< aux(56)
s(115) =< s(107)*2+s(111)+s(111)+aux(58)
s(118) =< s(107)+aux(57)
s(112) =< aux(58)* (1/2)-1/2
s(113) =< s(107)+s(111)* (1/2)+s(111)* (1/2)+aux(56)
s(114) =< s(107)+s(111)* (1/2)+s(111)* (1/2)+aux(56)
s(116) =< s(107)*2+s(111)+s(111)+aux(58)
s(117) =< s(107)*2+s(111)+s(111)+aux(58)
s(119) =< s(107)+aux(57)
s(113) =< s(119)*s(112)
s(114) =< s(119)*s(112)
s(116) =< s(119)*aux(58)
s(120) =< s(113)* (4/3)
s(121) =< s(120)
s(122) =< s(114)*2+s(121)+s(121)+s(116)
s(123) =< s(114)+s(117)
s(84) =< aux(64)
s(88) =< s(80)*2+s(84)+s(84)+aux(63)
s(91) =< s(80)+aux(63)
s(85) =< aux(63)* (1/2)-1/2
s(86) =< s(80)+s(84)* (1/2)+s(84)* (1/2)+aux(63)
s(87) =< s(80)+s(84)* (1/2)+s(84)* (1/2)+aux(63)
s(89) =< s(80)*2+s(84)+s(84)+aux(63)
s(90) =< s(80)*2+s(84)+s(84)+aux(63)
s(92) =< s(80)+aux(63)
s(86) =< s(92)*s(85)
s(87) =< s(92)*s(85)
s(89) =< s(92)*aux(63)
s(93) =< s(86)* (4/3)
s(94) =< s(93)
s(95) =< s(87)*2+s(94)+s(94)+s(89)
s(96) =< s(87)+s(90)
it(63) =< aux(63)
it(63) =< aux(64)

  with precondition: [Out=0,V3>=3] 

* Chain [[62,64,66]]...: 22*it(62)+12*it(66)+0
  Such that:aux(18) =< V3
it(62) =< aux(18)

  with precondition: [V3>=1,Out=1] 

* Chain [[62,64,66],75]: 22*it(62)+12*it(66)+5
  Such that:aux(20) =< V3
it(62) =< aux(20)

  with precondition: [Out=1,V3>=1] 

* Chain [[62,64,66],73]: 22*it(62)+12*it(66)+5
  Such that:aux(22) =< V3
it(62) =< aux(22)

  with precondition: [Out=1,V3>=2] 

* Chain [[62,64,66],71]: 22*it(62)+12*it(66)+1
  Such that:aux(24) =< V3
it(62) =< aux(24)

  with precondition: [Out=1,V3>=3] 

* Chain [[62,64,66],61]...: 22*it(62)+62*it(66)+38*s(10)+64*s(14)+13*s(17)+2*s(18)+56*s(21)+22*s(24)+1*s(25)+14*s(26)+38*s(37)+64*s(41)+13*s(44)+3*s(45)+56*s(48)+22*s(51)+1*s(52)+14*s(53)+1*s(68)+6
  Such that:aux(28) =< 2
aux(29) =< 3
aux(30) =< 4
aux(31) =< 3/2
aux(35) =< 2*V3
aux(36) =< V3
aux(37) =< V3+1
s(37) =< aux(31)
s(10) =< aux(36)
s(41) =< aux(28)
s(45) =< s(37)*2+s(41)+s(41)+aux(30)
s(48) =< s(37)+aux(29)
s(42) =< aux(30)* (1/2)-1/2
s(43) =< s(37)+s(41)* (1/2)+s(41)* (1/2)+aux(28)
s(44) =< s(37)+s(41)* (1/2)+s(41)* (1/2)+aux(28)
s(46) =< s(37)*2+s(41)+s(41)+aux(30)
s(47) =< s(37)*2+s(41)+s(41)+aux(30)
s(49) =< s(37)+aux(29)
s(43) =< s(49)*s(42)
s(44) =< s(49)*s(42)
s(46) =< s(49)*aux(30)
s(50) =< s(43)* (4/3)
s(51) =< s(50)
s(52) =< s(44)*2+s(51)+s(51)+s(46)
s(53) =< s(44)+s(47)
s(14) =< aux(35)
s(15) =< aux(37)* (1/2)-1/2
s(16) =< s(10)+s(14)* (1/2)+s(14)* (1/2)+aux(37)
s(17) =< s(10)+s(14)* (1/2)+s(14)* (1/2)+aux(37)
s(18) =< s(10)*2+s(14)+s(14)+aux(37)
s(19) =< s(10)*2+s(14)+s(14)+aux(37)
s(20) =< s(10)*2+s(14)+s(14)+aux(37)
s(21) =< s(10)+aux(36)
s(22) =< s(10)+aux(36)
s(16) =< s(22)*s(15)
s(17) =< s(22)*s(15)
s(19) =< s(22)*aux(37)
s(23) =< s(16)* (4/3)
s(24) =< s(23)
s(25) =< s(17)*2+s(24)+s(24)+s(19)
s(26) =< s(17)+s(20)
s(68) =< s(10)*2+s(14)+s(14)+aux(36)
it(62) =< aux(36)
it(62) =< aux(37)

  with precondition: [Out=1,V3>=2] 

* Chain [76]: 7
  with precondition: [Out=0,V3>=0] 

* Chain [75]: 5
  with precondition: [V3=0,Out=1] 

* Chain [74]: 4
  with precondition: [V3=1,Out=0] 

* Chain [73]: 5
  with precondition: [V3=1,Out=1] 

* Chain [72]: 5
  with precondition: [V3=2,Out=0] 

* Chain [71]: 1
  with precondition: [V3=2,Out=1] 

* Chain [70]: 8
  with precondition: [V3=3,Out=0] 

* Chain [69]: 8
  with precondition: [V3=4,Out=0] 

* Chain [68]: 9
  with precondition: [V3=5,Out=0] 

* Chain [61]...: 38*s(10)+64*s(14)+13*s(17)+2*s(18)+56*s(21)+22*s(24)+1*s(25)+14*s(26)+50*s(27)+38*s(37)+64*s(41)+13*s(44)+3*s(45)+56*s(48)+22*s(51)+1*s(52)+14*s(53)+1*s(68)+6
  Such that:s(11) =< V3/2+1/2
aux(28) =< 2
aux(29) =< 3
aux(30) =< 4
aux(31) =< 3/2
aux(32) =< V3
aux(33) =< V3+1
aux(34) =< V3/2
aux(35) =< 2/3*V3
s(37) =< aux(31)
s(10) =< aux(34)
s(41) =< aux(28)
s(45) =< s(37)*2+s(41)+s(41)+aux(30)
s(48) =< s(37)+aux(29)
s(42) =< aux(30)* (1/2)-1/2
s(43) =< s(37)+s(41)* (1/2)+s(41)* (1/2)+aux(28)
s(44) =< s(37)+s(41)* (1/2)+s(41)* (1/2)+aux(28)
s(46) =< s(37)*2+s(41)+s(41)+aux(30)
s(47) =< s(37)*2+s(41)+s(41)+aux(30)
s(49) =< s(37)+aux(29)
s(43) =< s(49)*s(42)
s(44) =< s(49)*s(42)
s(46) =< s(49)*aux(30)
s(50) =< s(43)* (4/3)
s(51) =< s(50)
s(52) =< s(44)*2+s(51)+s(51)+s(46)
s(53) =< s(44)+s(47)
s(14) =< aux(35)
s(15) =< aux(33)* (1/2)-1/2
s(16) =< s(10)+s(14)* (1/2)+s(14)* (1/2)+s(11)
s(17) =< s(10)+s(14)* (1/2)+s(14)* (1/2)+s(11)
s(18) =< s(10)*2+s(14)+s(14)+aux(33)
s(19) =< s(10)*2+s(14)+s(14)+aux(33)
s(20) =< s(10)*2+s(14)+s(14)+aux(33)
s(21) =< s(10)+aux(32)
s(22) =< s(10)+aux(32)
s(16) =< s(22)*s(15)
s(17) =< s(22)*s(15)
s(19) =< s(22)*aux(33)
s(23) =< s(16)* (4/3)
s(24) =< s(23)
s(25) =< s(17)*2+s(24)+s(24)+s(19)
s(26) =< s(17)+s(20)
s(68) =< s(10)*2+s(14)+s(14)+aux(32)

  with precondition: [V3>=1] 

* Chain [60]...: 25*s(80)+42*s(84)+13*s(87)+2*s(88)+42*s(91)+22*s(94)+1*s(95)+14*s(96)+38*s(97)+25*s(107)+42*s(111)+13*s(114)+2*s(115)+42*s(118)+22*s(121)+1*s(122)+14*s(123)+5
  Such that:aux(56) =< 2
aux(57) =< 3
aux(58) =< 4
aux(59) =< 3/2
aux(60) =< V3
aux(61) =< V3/2
aux(62) =< 2/3*V3
s(107) =< aux(59)
s(80) =< aux(61)
s(111) =< aux(56)
s(115) =< s(107)*2+s(111)+s(111)+aux(58)
s(118) =< s(107)+aux(57)
s(112) =< aux(58)* (1/2)-1/2
s(113) =< s(107)+s(111)* (1/2)+s(111)* (1/2)+aux(56)
s(114) =< s(107)+s(111)* (1/2)+s(111)* (1/2)+aux(56)
s(116) =< s(107)*2+s(111)+s(111)+aux(58)
s(117) =< s(107)*2+s(111)+s(111)+aux(58)
s(119) =< s(107)+aux(57)
s(113) =< s(119)*s(112)
s(114) =< s(119)*s(112)
s(116) =< s(119)*aux(58)
s(120) =< s(113)* (4/3)
s(121) =< s(120)
s(122) =< s(114)*2+s(121)+s(121)+s(116)
s(123) =< s(114)+s(117)
s(84) =< aux(62)
s(88) =< s(80)*2+s(84)+s(84)+aux(60)
s(91) =< s(80)+aux(60)
s(85) =< aux(60)* (1/2)-1/2
s(86) =< s(80)+s(84)* (1/2)+s(84)* (1/2)+aux(61)
s(87) =< s(80)+s(84)* (1/2)+s(84)* (1/2)+aux(61)
s(89) =< s(80)*2+s(84)+s(84)+aux(60)
s(90) =< s(80)*2+s(84)+s(84)+aux(60)
s(92) =< s(80)+aux(60)
s(86) =< s(92)*s(85)
s(87) =< s(92)*s(85)
s(89) =< s(92)*aux(60)
s(93) =< s(86)* (4/3)
s(94) =< s(93)
s(95) =< s(87)*2+s(94)+s(94)+s(89)
s(96) =< s(87)+s(90)

  with precondition: [Out=0,V3>=2] 


#### Cost of chains of fun9(V3,V4,Out):
* Chain [79]: 7
  with precondition: [V3=1,V4=2,Out=5] 

* Chain [78]: 5
  with precondition: [V3=1,V4+2=Out,V4>=0] 

* Chain [77]: 0
  with precondition: [Out=0,V3>=0,V4>=0] 


#### Cost of chains of fun8(V3,V4,V5,Out):
* Chain [88]: 8
  with precondition: [Out=0,V3>=0,V4>=0,V5>=0] 

* Chain [87]: 13
  with precondition: [V3=1,V4=2,V5=0,Out=5] 

* Chain [86]: 8
  with precondition: [V3=1,V5=1,Out=0,V4>=0] 

* Chain [85]: 13
  with precondition: [V3=1,V4=2,V5=1,Out=5] 

* Chain [84]: 9
  with precondition: [V3=1,V5=2,Out=0,V4>=0] 

* Chain [83]: 6
  with precondition: [V3=1,V5=0,Out=0,V4>=0] 

* Chain [82]: 11
  with precondition: [V3=1,V5=0,V4+2=Out,V4>=0] 

* Chain [81]: 11
  with precondition: [V3=1,V5=1,V4+2=Out,V4>=0] 

* Chain [80]...: 25*s(332)+42*s(336)+13*s(339)+2*s(340)+42*s(343)+22*s(346)+1*s(347)+14*s(348)+38*s(349)+25*s(359)+42*s(363)+13*s(366)+2*s(367)+42*s(370)+22*s(373)+1*s(374)+14*s(375)+5
  Such that:s(333) =< V5/2+1/2
aux(79) =< 2
aux(80) =< 3
aux(81) =< 4
aux(82) =< 3/2
aux(83) =< V5
aux(84) =< V5+1
aux(85) =< V5/2
aux(86) =< 2/3*V5
s(359) =< aux(82)
s(332) =< aux(85)
s(363) =< aux(79)
s(367) =< s(359)*2+s(363)+s(363)+aux(81)
s(370) =< s(359)+aux(80)
s(364) =< aux(81)* (1/2)-1/2
s(365) =< s(359)+s(363)* (1/2)+s(363)* (1/2)+aux(79)
s(366) =< s(359)+s(363)* (1/2)+s(363)* (1/2)+aux(79)
s(368) =< s(359)*2+s(363)+s(363)+aux(81)
s(369) =< s(359)*2+s(363)+s(363)+aux(81)
s(371) =< s(359)+aux(80)
s(365) =< s(371)*s(364)
s(366) =< s(371)*s(364)
s(368) =< s(371)*aux(81)
s(372) =< s(365)* (4/3)
s(373) =< s(372)
s(374) =< s(366)*2+s(373)+s(373)+s(368)
s(375) =< s(366)+s(369)
s(336) =< aux(86)
s(337) =< aux(84)* (1/2)-1/2
s(338) =< s(332)+s(336)* (1/2)+s(336)* (1/2)+s(333)
s(339) =< s(332)+s(336)* (1/2)+s(336)* (1/2)+s(333)
s(340) =< s(332)*2+s(336)+s(336)+aux(84)
s(341) =< s(332)*2+s(336)+s(336)+aux(84)
s(342) =< s(332)*2+s(336)+s(336)+aux(84)
s(343) =< s(332)+aux(83)
s(344) =< s(332)+aux(83)
s(338) =< s(344)*s(337)
s(339) =< s(344)*s(337)
s(341) =< s(344)*aux(84)
s(345) =< s(338)* (4/3)
s(346) =< s(345)
s(347) =< s(339)*2+s(346)+s(346)+s(341)
s(348) =< s(339)+s(342)

  with precondition: [V3=1,V4>=0,V5>=1] 


#### Cost of chains of start(V3,V4,V5):
* Chain [91]...: 88*s(386)+148*s(390)+26*s(393)+4*s(394)+140*s(397)+44*s(400)+2*s(401)+28*s(402)+1194*s(403)+694*s(413)+1168*s(417)+260*s(420)+52*s(421)+1064*s(424)+440*s(427)+20*s(428)+280*s(429)+3*s(464)+13*s(468)+22*s(473)+1*s(474)+14*s(475)+223*s(476)+234*s(477)+39*s(480)+6*s(481)+210*s(484)+66*s(487)+3*s(488)+42*s(489)+5*s(490)+64*s(491)+13*s(520)+22*s(525)+1*s(526)+14*s(527)+20*s(528)+20*s(541)+3*s(651)+13*s(655)+22*s(660)+1*s(661)+14*s(662)+223*s(663)+234*s(664)+39*s(667)+6*s(668)+210*s(671)+66*s(674)+3*s(675)+42*s(676)+5*s(677)+64*s(678)+13*s(707)+22*s(712)+1*s(713)+14*s(714)+20*s(715)+20*s(728)+88*s(814)+148*s(818)+26*s(821)+4*s(822)+140*s(825)+44*s(828)+2*s(829)+28*s(830)+3*s(865)+13*s(869)+22*s(874)+1*s(875)+14*s(876)+223*s(877)+234*s(878)+39*s(881)+6*s(882)+210*s(885)+66*s(888)+3*s(889)+42*s(890)+5*s(891)+64*s(892)+13*s(921)+22*s(926)+1*s(927)+14*s(928)+20*s(929)+20*s(942)+11
  Such that:aux(100) =< 2
aux(101) =< 3
aux(102) =< 4
aux(103) =< 6
aux(104) =< 3/2
aux(105) =< V3
aux(106) =< V3+1
aux(107) =< 2*V3
aux(108) =< V3/2
aux(109) =< V3/2+1/2
aux(110) =< 2/3*V3
aux(111) =< V4
aux(112) =< V4+1
aux(113) =< 2*V4
aux(114) =< V4/2
aux(115) =< V4/2+1/2
aux(116) =< 2/3*V4
s(413) =< aux(104)
s(814) =< aux(108)
s(386) =< aux(114)
s(417) =< aux(100)
s(421) =< s(413)*2+s(417)+s(417)+aux(102)
s(424) =< s(413)+aux(101)
s(418) =< aux(102)* (1/2)-1/2
s(419) =< s(413)+s(417)* (1/2)+s(417)* (1/2)+aux(100)
s(420) =< s(413)+s(417)* (1/2)+s(417)* (1/2)+aux(100)
s(422) =< s(413)*2+s(417)+s(417)+aux(102)
s(423) =< s(413)*2+s(417)+s(417)+aux(102)
s(425) =< s(413)+aux(101)
s(419) =< s(425)*s(418)
s(420) =< s(425)*s(418)
s(422) =< s(425)*aux(102)
s(426) =< s(419)* (4/3)
s(427) =< s(426)
s(428) =< s(420)*2+s(427)+s(427)+s(422)
s(429) =< s(420)+s(423)
s(651) =< s(413)*2+s(417)+s(417)+aux(101)
s(390) =< aux(116)
s(464) =< s(386)*2+s(390)+s(390)+aux(111)
s(397) =< s(386)+aux(111)
s(466) =< aux(111)* (1/2)-1/2
s(467) =< s(386)+s(390)* (1/2)+s(390)* (1/2)+aux(114)
s(468) =< s(386)+s(390)* (1/2)+s(390)* (1/2)+aux(114)
s(469) =< s(386)*2+s(390)+s(390)+aux(111)
s(470) =< s(386)*2+s(390)+s(390)+aux(111)
s(398) =< s(386)+aux(111)
s(467) =< s(398)*s(466)
s(468) =< s(398)*s(466)
s(469) =< s(398)*aux(111)
s(472) =< s(467)* (4/3)
s(473) =< s(472)
s(474) =< s(468)*2+s(473)+s(473)+s(469)
s(475) =< s(468)+s(470)
s(476) =< aux(111)
s(477) =< aux(113)
s(391) =< aux(112)* (1/2)-1/2
s(479) =< s(476)+s(477)* (1/2)+s(477)* (1/2)+aux(112)
s(480) =< s(476)+s(477)* (1/2)+s(477)* (1/2)+aux(112)
s(481) =< s(476)*2+s(477)+s(477)+aux(112)
s(482) =< s(476)*2+s(477)+s(477)+aux(112)
s(483) =< s(476)*2+s(477)+s(477)+aux(112)
s(484) =< s(476)+aux(111)
s(485) =< s(476)+aux(111)
s(479) =< s(485)*s(391)
s(480) =< s(485)*s(391)
s(482) =< s(485)*aux(112)
s(486) =< s(479)* (4/3)
s(487) =< s(486)
s(488) =< s(480)*2+s(487)+s(487)+s(482)
s(489) =< s(480)+s(483)
s(490) =< s(476)*2+s(477)+s(477)+aux(111)
s(491) =< aux(111)
s(491) =< aux(112)
s(519) =< s(476)+s(477)* (1/2)+s(477)* (1/2)+aux(111)
s(520) =< s(476)+s(477)* (1/2)+s(477)* (1/2)+aux(111)
s(521) =< s(476)*2+s(477)+s(477)+aux(111)
s(522) =< s(476)*2+s(477)+s(477)+aux(111)
s(519) =< s(485)*s(466)
s(520) =< s(485)*s(466)
s(521) =< s(485)*aux(111)
s(524) =< s(519)* (4/3)
s(525) =< s(524)
s(526) =< s(520)*2+s(525)+s(525)+s(521)
s(527) =< s(520)+s(522)
s(528) =< aux(111)
s(528) =< aux(113)
s(529) =< aux(112)
s(529) =< aux(113)
s(541) =< aux(111)
s(541) =< s(529)
s(392) =< s(386)+s(390)* (1/2)+s(390)* (1/2)+aux(115)
s(393) =< s(386)+s(390)* (1/2)+s(390)* (1/2)+aux(115)
s(394) =< s(386)*2+s(390)+s(390)+aux(112)
s(395) =< s(386)*2+s(390)+s(390)+aux(112)
s(396) =< s(386)*2+s(390)+s(390)+aux(112)
s(392) =< s(398)*s(391)
s(393) =< s(398)*s(391)
s(395) =< s(398)*aux(112)
s(399) =< s(392)* (4/3)
s(400) =< s(399)
s(401) =< s(393)*2+s(400)+s(400)+s(395)
s(402) =< s(393)+s(396)
s(663) =< aux(101)
s(664) =< aux(103)
s(677) =< s(663)*2+s(664)+s(664)+aux(101)
s(671) =< s(663)+aux(101)
s(653) =< aux(101)* (1/2)-1/2
s(706) =< s(663)+s(664)* (1/2)+s(664)* (1/2)+aux(101)
s(707) =< s(663)+s(664)* (1/2)+s(664)* (1/2)+aux(101)
s(708) =< s(663)*2+s(664)+s(664)+aux(101)
s(709) =< s(663)*2+s(664)+s(664)+aux(101)
s(672) =< s(663)+aux(101)
s(706) =< s(672)*s(653)
s(707) =< s(672)*s(653)
s(708) =< s(672)*aux(101)
s(711) =< s(706)* (4/3)
s(712) =< s(711)
s(713) =< s(707)*2+s(712)+s(712)+s(708)
s(714) =< s(707)+s(709)
s(715) =< aux(101)
s(715) =< aux(103)
s(716) =< aux(102)
s(716) =< aux(103)
s(666) =< s(663)+s(664)* (1/2)+s(664)* (1/2)+aux(102)
s(667) =< s(663)+s(664)* (1/2)+s(664)* (1/2)+aux(102)
s(668) =< s(663)*2+s(664)+s(664)+aux(102)
s(669) =< s(663)*2+s(664)+s(664)+aux(102)
s(670) =< s(663)*2+s(664)+s(664)+aux(102)
s(666) =< s(672)*s(418)
s(667) =< s(672)*s(418)
s(669) =< s(672)*aux(102)
s(673) =< s(666)* (4/3)
s(674) =< s(673)
s(675) =< s(667)*2+s(674)+s(674)+s(669)
s(676) =< s(667)+s(670)
s(678) =< aux(101)
s(678) =< aux(102)
s(728) =< aux(101)
s(728) =< s(716)
s(818) =< aux(110)
s(865) =< s(814)*2+s(818)+s(818)+aux(105)
s(825) =< s(814)+aux(105)
s(867) =< aux(105)* (1/2)-1/2
s(868) =< s(814)+s(818)* (1/2)+s(818)* (1/2)+aux(108)
s(869) =< s(814)+s(818)* (1/2)+s(818)* (1/2)+aux(108)
s(870) =< s(814)*2+s(818)+s(818)+aux(105)
s(871) =< s(814)*2+s(818)+s(818)+aux(105)
s(826) =< s(814)+aux(105)
s(868) =< s(826)*s(867)
s(869) =< s(826)*s(867)
s(870) =< s(826)*aux(105)
s(873) =< s(868)* (4/3)
s(874) =< s(873)
s(875) =< s(869)*2+s(874)+s(874)+s(870)
s(876) =< s(869)+s(871)
s(877) =< aux(105)
s(878) =< aux(107)
s(819) =< aux(106)* (1/2)-1/2
s(880) =< s(877)+s(878)* (1/2)+s(878)* (1/2)+aux(106)
s(881) =< s(877)+s(878)* (1/2)+s(878)* (1/2)+aux(106)
s(882) =< s(877)*2+s(878)+s(878)+aux(106)
s(883) =< s(877)*2+s(878)+s(878)+aux(106)
s(884) =< s(877)*2+s(878)+s(878)+aux(106)
s(885) =< s(877)+aux(105)
s(886) =< s(877)+aux(105)
s(880) =< s(886)*s(819)
s(881) =< s(886)*s(819)
s(883) =< s(886)*aux(106)
s(887) =< s(880)* (4/3)
s(888) =< s(887)
s(889) =< s(881)*2+s(888)+s(888)+s(883)
s(890) =< s(881)+s(884)
s(891) =< s(877)*2+s(878)+s(878)+aux(105)
s(892) =< aux(105)
s(892) =< aux(106)
s(920) =< s(877)+s(878)* (1/2)+s(878)* (1/2)+aux(105)
s(921) =< s(877)+s(878)* (1/2)+s(878)* (1/2)+aux(105)
s(922) =< s(877)*2+s(878)+s(878)+aux(105)
s(923) =< s(877)*2+s(878)+s(878)+aux(105)
s(920) =< s(886)*s(867)
s(921) =< s(886)*s(867)
s(922) =< s(886)*aux(105)
s(925) =< s(920)* (4/3)
s(926) =< s(925)
s(927) =< s(921)*2+s(926)+s(926)+s(922)
s(928) =< s(921)+s(923)
s(929) =< aux(105)
s(929) =< aux(107)
s(930) =< aux(106)
s(930) =< aux(107)
s(942) =< aux(105)
s(942) =< s(930)
s(820) =< s(814)+s(818)* (1/2)+s(818)* (1/2)+aux(109)
s(821) =< s(814)+s(818)* (1/2)+s(818)* (1/2)+aux(109)
s(822) =< s(814)*2+s(818)+s(818)+aux(106)
s(823) =< s(814)*2+s(818)+s(818)+aux(106)
s(824) =< s(814)*2+s(818)+s(818)+aux(106)
s(820) =< s(826)*s(819)
s(821) =< s(826)*s(819)
s(823) =< s(826)*aux(106)
s(827) =< s(820)* (4/3)
s(828) =< s(827)
s(829) =< s(821)*2+s(828)+s(828)+s(823)
s(830) =< s(821)+s(824)
s(654) =< s(413)+s(417)* (1/2)+s(417)* (1/2)+aux(104)
s(655) =< s(413)+s(417)* (1/2)+s(417)* (1/2)+aux(104)
s(656) =< s(413)*2+s(417)+s(417)+aux(101)
s(657) =< s(413)*2+s(417)+s(417)+aux(101)
s(654) =< s(425)*s(653)
s(655) =< s(425)*s(653)
s(656) =< s(425)*aux(101)
s(659) =< s(654)* (4/3)
s(660) =< s(659)
s(661) =< s(655)*2+s(660)+s(660)+s(656)
s(662) =< s(655)+s(657)

  with precondition: [V3>=1] 

* Chain [90]...: 25*s(1036)+25*s(1037)+42*s(1038)+2*s(1039)+42*s(1040)+13*s(1043)+22*s(1048)+1*s(1049)+14*s(1050)+42*s(1051)+13*s(1054)+2*s(1055)+42*s(1058)+22*s(1061)+1*s(1062)+14*s(1063)+38*s(1064)+5
  Such that:s(1028) =< 2
s(1029) =< 3
s(1030) =< 4
s(1031) =< 3/2
s(1032) =< V5
s(1033) =< V5+1
s(1034) =< V5/2
s(1027) =< V5/2+1/2
s(1035) =< 2/3*V5
s(1036) =< s(1031)
s(1037) =< s(1034)
s(1038) =< s(1028)
s(1039) =< s(1036)*2+s(1038)+s(1038)+s(1030)
s(1040) =< s(1036)+s(1029)
s(1041) =< s(1030)* (1/2)-1/2
s(1042) =< s(1036)+s(1038)* (1/2)+s(1038)* (1/2)+s(1028)
s(1043) =< s(1036)+s(1038)* (1/2)+s(1038)* (1/2)+s(1028)
s(1044) =< s(1036)*2+s(1038)+s(1038)+s(1030)
s(1045) =< s(1036)*2+s(1038)+s(1038)+s(1030)
s(1046) =< s(1036)+s(1029)
s(1042) =< s(1046)*s(1041)
s(1043) =< s(1046)*s(1041)
s(1044) =< s(1046)*s(1030)
s(1047) =< s(1042)* (4/3)
s(1048) =< s(1047)
s(1049) =< s(1043)*2+s(1048)+s(1048)+s(1044)
s(1050) =< s(1043)+s(1045)
s(1051) =< s(1035)
s(1052) =< s(1033)* (1/2)-1/2
s(1053) =< s(1037)+s(1051)* (1/2)+s(1051)* (1/2)+s(1027)
s(1054) =< s(1037)+s(1051)* (1/2)+s(1051)* (1/2)+s(1027)
s(1055) =< s(1037)*2+s(1051)+s(1051)+s(1033)
s(1056) =< s(1037)*2+s(1051)+s(1051)+s(1033)
s(1057) =< s(1037)*2+s(1051)+s(1051)+s(1033)
s(1058) =< s(1037)+s(1032)
s(1059) =< s(1037)+s(1032)
s(1053) =< s(1059)*s(1052)
s(1054) =< s(1059)*s(1052)
s(1056) =< s(1059)*s(1033)
s(1060) =< s(1053)* (4/3)
s(1061) =< s(1060)
s(1062) =< s(1054)*2+s(1061)+s(1061)+s(1056)
s(1063) =< s(1054)+s(1057)

  with precondition: [V3=1,V4>=0,V5>=1] 

* Chain [89]: 438*s(1066)+684*s(1067)+438*s(1075)+372*s(1084)+14
  Such that:aux(117) =< 3
aux(118) =< V3
aux(119) =< V4
s(1075) =< aux(117)
s(1084) =< aux(118)
s(1066) =< aux(119)

  with precondition: [] 


Closed-form bounds of start(V3,V4,V5): 
-------------------------------------
* Chain [91]... with precondition: [V3>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [90]... with precondition: [V3=1,V4>=0,V5>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [89] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of start(V3,V4,V5): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 37 ms.
* Invariants computed in 96 ms.
   - Backward Invariants 47 ms.
   - Transitive Invariants 15 ms.
* Refinement performed in 348 ms.
* Termination proved in 32 ms.
* Upper bounds computed in 4184 ms.
   - Equation cost structures 3823 ms.
   - Phase cost structures 104 ms.
   - Chain cost structures 77 ms.
   - Solving cost expressions 69 ms.
* Total analysis performed in 4748 ms.


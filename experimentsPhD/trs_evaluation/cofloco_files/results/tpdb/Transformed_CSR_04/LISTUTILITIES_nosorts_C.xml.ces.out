
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [afterNth/3]
1. recursive  : [and/3]
2. recursive  : [cons/3]
3. recursive  : [fst/2]
4. recursive  : [fun/5]
5. recursive  : [fun1/3]
6. recursive  : [head/2]
7. recursive  : [natsFrom/2]
8. recursive  : [pair/3]
9. non_recursive  : [proper/2]
10. recursive  : [s/2]
11. recursive  : [sel/3]
12. recursive  : [snd/2]
13. recursive  : [splitAt/3]
14. recursive  : [tail/2]
15. recursive  : [take/3]
16. recursive  : [top/2]
17. non_recursive  : [start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into afterNth/3
1. SCC is partially evaluated into and/3
2. SCC is partially evaluated into cons/3
3. SCC is partially evaluated into fst/2
4. SCC is partially evaluated into fun/5
5. SCC is partially evaluated into fun1/3
6. SCC is partially evaluated into head/2
7. SCC is partially evaluated into natsFrom/2
8. SCC is partially evaluated into pair/3
9. SCC is partially evaluated into proper/2
10. SCC is partially evaluated into s/2
11. SCC is partially evaluated into sel/3
12. SCC is partially evaluated into snd/2
13. SCC is partially evaluated into splitAt/3
14. SCC is partially evaluated into tail/2
15. SCC is partially evaluated into take/3
16. SCC is partially evaluated into top/2
17. SCC is partially evaluated into start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations afterNth/3 
* CE 25 is refined into CE [70] 
* CE 22 is refined into CE [71] 
* CE 23 is refined into CE [72] 
* CE 24 is refined into CE [73] 


#### Refined cost equations afterNth/3 
* CE 70: afterNth(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 71: afterNth(V,V1,Out) = 1+ afterNth(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 72: afterNth(V,V1,Out) = 1+ afterNth(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 73: afterNth(V,V1,Out) = 1+ afterNth(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of afterNth/3 
* CEs [71] --> Loop 52 
* CEs [72] --> Loop 53 
* CEs [73] --> Loop 54 
* CEs [70] --> Loop 55 

#### Loops of afterNth/3 
* Loop 52: afterNth(V,V1,Out)->  afterNth(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 53: afterNth(V,V1,Out)->  afterNth(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 54: afterNth(V,V1,Out)->  afterNth(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 55: afterNth(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR afterNth(V,V1,Out) 
* RF of phase [52,53,54]: [V+V1]

#### Partial ranking functions of CR afterNth(V,V1,Out) 
* Partial RF of phase [52,53,54]:
  - RF of loop [52:1,54:1]:
    V1
  - RF of loop [53:1,54:1]:
    V


### Resulting Chains:afterNth(V,V1,Out) 
* [[52,53,54],55]
* [55]


### Merging Chains  afterNth/3 into  External patterns of execution 
* [[55]] --> 1 
* [[55,[52,53,54]]] --> 2 


### Specialization of cost equations and/3 
* CE 43 is refined into CE [74] 
* CE 42 is refined into CE [75] 
* CE 41 is refined into CE [76] 


#### Refined cost equations and/3 
* CE 74: and(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 75: and(V,V1,Out) = 1+ and(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 76: and(V,V1,Out) = 1+ and(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of and/3 
* CEs [75] --> Loop 56 
* CEs [76] --> Loop 57 
* CEs [74] --> Loop 58 

#### Loops of and/3 
* Loop 56: and(V,V1,Out)->  and(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 57: and(V,V1,Out)->  and(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 58: and(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR and(V,V1,Out) 
* RF of phase [56,57]: [V]

#### Partial ranking functions of CR and(V,V1,Out) 
* Partial RF of phase [56,57]:
  - RF of loop [56:1,57:1]:
    V
  - RF of loop [57:1]:
    V1


### Resulting Chains:and(V,V1,Out) 
* [[56,57],58]
* [58]


### Merging Chains  and/3 into  External patterns of execution 
* [[58]] --> 1 
* [[58,[56,57]]] --> 2 


### Specialization of cost equations cons/3 
* CE 32 is refined into CE [77] 
* CE 31 is refined into CE [78] 
* CE 30 is refined into CE [79] 


#### Refined cost equations cons/3 
* CE 77: cons(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 78: cons(V,V1,Out) = 1+ cons(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 79: cons(V,V1,Out) = 1+ cons(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of cons/3 
* CEs [78] --> Loop 59 
* CEs [79] --> Loop 60 
* CEs [77] --> Loop 61 

#### Loops of cons/3 
* Loop 59: cons(V,V1,Out)->  cons(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 60: cons(V,V1,Out)->  cons(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 61: cons(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR cons(V,V1,Out) 
* RF of phase [59,60]: [V]

#### Partial ranking functions of CR cons(V,V1,Out) 
* Partial RF of phase [59,60]:
  - RF of loop [59:1,60:1]:
    V
  - RF of loop [60:1]:
    V1


### Resulting Chains:cons(V,V1,Out) 
* [[59,60],61]
* [61]


### Merging Chains  cons/3 into  External patterns of execution 
* [[61]] --> 1 
* [[61,[59,60]]] --> 2 


### Specialization of cost equations fst/2 
* CE 67 is refined into CE [80] 
* CE 66 is refined into CE [81] 


#### Refined cost equations fst/2 
* CE 80: fst(V,Out) = 0
     [V>=0,Out=0] 
* CE 81: fst(V,Out) = 1+ fst(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of fst/2 
* CEs [81] --> Loop 62 
* CEs [80] --> Loop 63 

#### Loops of fst/2 
* Loop 62: fst(V,Out)->  fst(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 63: fst(V,Out) [V>=0,Out=0] 

### Ranking functions of CR fst(V,Out) 
* RF of phase [62]: [V]

#### Partial ranking functions of CR fst(V,Out) 
* Partial RF of phase [62]:
  - RF of loop [62:1]:
    V


### Resulting Chains:fst(V,Out) 
* [[62],63]
* [63]


### Merging Chains  fst/2 into  External patterns of execution 
* [[63]] --> 1 
* [[63,[62]]] --> 2 


### Specialization of cost equations fun/5 
* CE 54 is refined into CE [82] 
* CE 53 is refined into CE [83] 
* CE 52 is refined into CE [84] 


#### Refined cost equations fun/5 
* CE 82: fun(V,V1,V2,V3,Out) = 0
     [V3>=0,V2>=0,V1>=0,V>=0,Out=0] 
* CE 83: fun(V,V1,V2,V3,Out) = 1+ fun(W3,V1,V2,V3,X3)
     [W3>=0,V3>=0,V2>=0,V1>=0,X3+1=Out,W3+1=V] 
* CE 84: fun(V,V1,V2,V3,Out) = 1+ fun(W3,X3,Y3,Z3,A4)
     [Z3>=0,Y3>=0,X3>=0,W3>=0,A4+1=Out,Z3+1=V3,Y3+1=V2,X3+1=V1,W3+1=V] 

### Cost equations --> "Loop" of fun/5 
* CEs [83] --> Loop 64 
* CEs [84] --> Loop 65 
* CEs [82] --> Loop 66 

#### Loops of fun/5 
* Loop 64: fun(V,V1,V2,V3,Out)->  fun(V',V1,V2,V3,Out')
                  [V3>=0,V2>=0,V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 65: fun(V,V1,V2,V3,Out)->  fun(V',V1',V2',V3',Out')
                  [V3>=1,V2>=1,V1>=1,V>=1,Out=Out'+1,V3=V3'+1,V2=V2'+1,V1=V1'+1,V=V'+1] 
* Loop 66: fun(V,V1,V2,V3,Out) [V3>=0,V2>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun(V,V1,V2,V3,Out) 
* RF of phase [64,65]: [V]

#### Partial ranking functions of CR fun(V,V1,V2,V3,Out) 
* Partial RF of phase [64,65]:
  - RF of loop [64:1,65:1]:
    V
  - RF of loop [65:1]:
    V1
    V2
    V3


### Resulting Chains:fun(V,V1,V2,V3,Out) 
* [[64,65],66]
* [66]


### Merging Chains  fun/5 into  External patterns of execution 
* [[66]] --> 1 
* [[66,[64,65]]] --> 2 


### Specialization of cost equations fun1/3 
* CE 63 is refined into CE [85] 
* CE 62 is refined into CE [86] 
* CE 61 is refined into CE [87] 


#### Refined cost equations fun1/3 
* CE 85: fun1(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 86: fun1(V,V1,Out) = 1+ fun1(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 87: fun1(V,V1,Out) = 1+ fun1(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun1/3 
* CEs [86] --> Loop 67 
* CEs [87] --> Loop 68 
* CEs [85] --> Loop 69 

#### Loops of fun1/3 
* Loop 67: fun1(V,V1,Out)->  fun1(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 68: fun1(V,V1,Out)->  fun1(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 69: fun1(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun1(V,V1,Out) 
* RF of phase [67,68]: [V]

#### Partial ranking functions of CR fun1(V,V1,Out) 
* Partial RF of phase [67,68]:
  - RF of loop [67:1,68:1]:
    V
  - RF of loop [68:1]:
    V1


### Resulting Chains:fun1(V,V1,Out) 
* [[67,68],69]
* [69]


### Merging Chains  fun1/3 into  External patterns of execution 
* [[69]] --> 1 
* [[69,[67,68]]] --> 2 


### Specialization of cost equations head/2 
* CE 60 is refined into CE [88] 
* CE 59 is refined into CE [89] 


#### Refined cost equations head/2 
* CE 88: head(V,Out) = 0
     [V>=0,Out=0] 
* CE 89: head(V,Out) = 1+ head(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of head/2 
* CEs [89] --> Loop 70 
* CEs [88] --> Loop 71 

#### Loops of head/2 
* Loop 70: head(V,Out)->  head(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 71: head(V,Out) [V>=0,Out=0] 

### Ranking functions of CR head(V,Out) 
* RF of phase [70]: [V]

#### Partial ranking functions of CR head(V,Out) 
* Partial RF of phase [70]:
  - RF of loop [70:1]:
    V


### Resulting Chains:head(V,Out) 
* [[70],71]
* [71]


### Merging Chains  head/2 into  External patterns of execution 
* [[71]] --> 1 
* [[71,[70]]] --> 2 


### Specialization of cost equations natsFrom/2 
* CE 65 is refined into CE [90] 
* CE 64 is refined into CE [91] 


#### Refined cost equations natsFrom/2 
* CE 90: natsFrom(V,Out) = 0
     [V>=0,Out=0] 
* CE 91: natsFrom(V,Out) = 1+ natsFrom(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of natsFrom/2 
* CEs [91] --> Loop 72 
* CEs [90] --> Loop 73 

#### Loops of natsFrom/2 
* Loop 72: natsFrom(V,Out)->  natsFrom(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 73: natsFrom(V,Out) [V>=0,Out=0] 

### Ranking functions of CR natsFrom(V,Out) 
* RF of phase [72]: [V]

#### Partial ranking functions of CR natsFrom(V,Out) 
* Partial RF of phase [72]:
  - RF of loop [72:1]:
    V


### Resulting Chains:natsFrom(V,Out) 
* [[72],73]
* [73]


### Merging Chains  natsFrom/2 into  External patterns of execution 
* [[73]] --> 1 
* [[73,[72]]] --> 2 


### Specialization of cost equations pair/3 
* CE 40 is refined into CE [92] 
* CE 37 is refined into CE [93] 
* CE 38 is refined into CE [94] 
* CE 39 is refined into CE [95] 


#### Refined cost equations pair/3 
* CE 92: pair(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 93: pair(V,V1,Out) = 1+ pair(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 94: pair(V,V1,Out) = 1+ pair(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 95: pair(V,V1,Out) = 1+ pair(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of pair/3 
* CEs [93] --> Loop 74 
* CEs [94] --> Loop 75 
* CEs [95] --> Loop 76 
* CEs [92] --> Loop 77 

#### Loops of pair/3 
* Loop 74: pair(V,V1,Out)->  pair(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 75: pair(V,V1,Out)->  pair(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 76: pair(V,V1,Out)->  pair(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 77: pair(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR pair(V,V1,Out) 
* RF of phase [74,75,76]: [V+V1]

#### Partial ranking functions of CR pair(V,V1,Out) 
* Partial RF of phase [74,75,76]:
  - RF of loop [74:1,76:1]:
    V1
  - RF of loop [75:1,76:1]:
    V


### Resulting Chains:pair(V,V1,Out) 
* [[74,75,76],77]
* [77]


### Merging Chains  pair/3 into  External patterns of execution 
* [[77]] --> 1 
* [[77,[74,75,76]]] --> 2 


### Specialization of cost equations proper/2 
* CE 58 is refined into CE [96] 
* CE 55 is refined into CE [97] 
* CE 56 is refined into CE [98] 
* CE 57 is refined into CE [99] 


#### Refined cost equations proper/2 
* CE 96: proper(V,Out) = 0
     [V>=0,Out=0] 
* CE 97: proper(V,Out) = 1
     [Out=3,V=2] 
* CE 98: proper(V,Out) = 1
     [Out=2,V=1] 
* CE 99: proper(V,Out) = 1
     [Out=1,V=0] 

### Cost equations --> "Loop" of proper/2 
* CEs [96] --> Loop 78 
* CEs [97] --> Loop 79 
* CEs [98] --> Loop 80 
* CEs [99] --> Loop 81 

#### Loops of proper/2 
* Loop 78: proper(V,Out) [V>=0,Out=0] 
* Loop 79: proper(V,Out) [Out=3,V=2] 
* Loop 80: proper(V,Out) [Out=2,V=1] 
* Loop 81: proper(V,Out) [Out=1,V=0] 

### Ranking functions of CR proper(V,Out) 

#### Partial ranking functions of CR proper(V,Out) 


### Resulting Chains:proper(V,Out) 
* [81]
* [80]
* [79]
* [78]


### Merging Chains  proper/2 into  External patterns of execution 
* [[81]] --> 1 
* [[80]] --> 2 
* [[79]] --> 3 
* [[78]] --> 4 


### Specialization of cost equations s/2 
* CE 69 is refined into CE [100] 
* CE 68 is refined into CE [101] 


#### Refined cost equations s/2 
* CE 100: s(V,Out) = 0
     [V>=0,Out=0] 
* CE 101: s(V,Out) = 1+ s(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of s/2 
* CEs [101] --> Loop 82 
* CEs [100] --> Loop 83 

#### Loops of s/2 
* Loop 82: s(V,Out)->  s(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 83: s(V,Out) [V>=0,Out=0] 

### Ranking functions of CR s(V,Out) 
* RF of phase [82]: [V]

#### Partial ranking functions of CR s(V,Out) 
* Partial RF of phase [82]:
  - RF of loop [82:1]:
    V


### Resulting Chains:s(V,Out) 
* [[82],83]
* [83]


### Merging Chains  s/2 into  External patterns of execution 
* [[83]] --> 1 
* [[83,[82]]] --> 2 


### Specialization of cost equations sel/3 
* CE 47 is refined into CE [102] 
* CE 45 is refined into CE [103] 
* CE 46 is refined into CE [104] 
* CE 44 is refined into CE [105] 


#### Refined cost equations sel/3 
* CE 102: sel(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 103: sel(V,V1,Out) = 1+ sel(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 104: sel(V,V1,Out) = 1+ sel(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 105: sel(V,V1,Out) = 1+ sel(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of sel/3 
* CEs [103] --> Loop 84 
* CEs [104] --> Loop 85 
* CEs [105] --> Loop 86 
* CEs [102] --> Loop 87 

#### Loops of sel/3 
* Loop 84: sel(V,V1,Out)->  sel(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 85: sel(V,V1,Out)->  sel(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 86: sel(V,V1,Out)->  sel(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 87: sel(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR sel(V,V1,Out) 
* RF of phase [84,85,86]: [V+V1]

#### Partial ranking functions of CR sel(V,V1,Out) 
* Partial RF of phase [84,85,86]:
  - RF of loop [84:1,86:1]:
    V1
  - RF of loop [85:1,86:1]:
    V


### Resulting Chains:sel(V,V1,Out) 
* [[84,85,86],87]
* [87]


### Merging Chains  sel/3 into  External patterns of execution 
* [[87]] --> 1 
* [[87,[84,85,86]]] --> 2 


### Specialization of cost equations snd/2 
* CE 36 is refined into CE [106] 
* CE 35 is refined into CE [107] 


#### Refined cost equations snd/2 
* CE 106: snd(V,Out) = 0
     [V>=0,Out=0] 
* CE 107: snd(V,Out) = 1+ snd(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of snd/2 
* CEs [107] --> Loop 88 
* CEs [106] --> Loop 89 

#### Loops of snd/2 
* Loop 88: snd(V,Out)->  snd(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 89: snd(V,Out) [V>=0,Out=0] 

### Ranking functions of CR snd(V,Out) 
* RF of phase [88]: [V]

#### Partial ranking functions of CR snd(V,Out) 
* Partial RF of phase [88]:
  - RF of loop [88:1]:
    V


### Resulting Chains:snd(V,Out) 
* [[88],89]
* [89]


### Merging Chains  snd/2 into  External patterns of execution 
* [[89]] --> 1 
* [[89,[88]]] --> 2 


### Specialization of cost equations splitAt/3 
* CE 51 is refined into CE [108] 
* CE 49 is refined into CE [109] 
* CE 48 is refined into CE [110] 
* CE 50 is refined into CE [111] 


#### Refined cost equations splitAt/3 
* CE 108: splitAt(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 109: splitAt(V,V1,Out) = 1+ splitAt(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 110: splitAt(V,V1,Out) = 1+ splitAt(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 111: splitAt(V,V1,Out) = 1+ splitAt(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of splitAt/3 
* CEs [109] --> Loop 90 
* CEs [110] --> Loop 91 
* CEs [111] --> Loop 92 
* CEs [108] --> Loop 93 

#### Loops of splitAt/3 
* Loop 90: splitAt(V,V1,Out)->  splitAt(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 91: splitAt(V,V1,Out)->  splitAt(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 92: splitAt(V,V1,Out)->  splitAt(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 93: splitAt(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR splitAt(V,V1,Out) 
* RF of phase [90,91,92]: [V+V1]

#### Partial ranking functions of CR splitAt(V,V1,Out) 
* Partial RF of phase [90,91,92]:
  - RF of loop [90:1,92:1]:
    V1
  - RF of loop [91:1,92:1]:
    V


### Resulting Chains:splitAt(V,V1,Out) 
* [[90,91,92],93]
* [93]


### Merging Chains  splitAt/3 into  External patterns of execution 
* [[93]] --> 1 
* [[93,[90,91,92]]] --> 2 


### Specialization of cost equations tail/2 
* CE 34 is refined into CE [112] 
* CE 33 is refined into CE [113] 


#### Refined cost equations tail/2 
* CE 112: tail(V,Out) = 0
     [V>=0,Out=0] 
* CE 113: tail(V,Out) = 1+ tail(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of tail/2 
* CEs [113] --> Loop 94 
* CEs [112] --> Loop 95 

#### Loops of tail/2 
* Loop 94: tail(V,Out)->  tail(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 95: tail(V,Out) [V>=0,Out=0] 

### Ranking functions of CR tail(V,Out) 
* RF of phase [94]: [V]

#### Partial ranking functions of CR tail(V,Out) 
* Partial RF of phase [94]:
  - RF of loop [94:1]:
    V


### Resulting Chains:tail(V,Out) 
* [[94],95]
* [95]


### Merging Chains  tail/2 into  External patterns of execution 
* [[95]] --> 1 
* [[95,[94]]] --> 2 


### Specialization of cost equations take/3 
* CE 29 is refined into CE [114] 
* CE 28 is refined into CE [115] 
* CE 26 is refined into CE [116] 
* CE 27 is refined into CE [117] 


#### Refined cost equations take/3 
* CE 114: take(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 115: take(V,V1,Out) = 1+ take(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 116: take(V,V1,Out) = 1+ take(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 117: take(V,V1,Out) = 1+ take(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of take/3 
* CEs [115] --> Loop 96 
* CEs [116] --> Loop 97 
* CEs [117] --> Loop 98 
* CEs [114] --> Loop 99 

#### Loops of take/3 
* Loop 96: take(V,V1,Out)->  take(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 97: take(V,V1,Out)->  take(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 98: take(V,V1,Out)->  take(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 99: take(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR take(V,V1,Out) 
* RF of phase [96,97,98]: [V+V1]

#### Partial ranking functions of CR take(V,V1,Out) 
* Partial RF of phase [96,97,98]:
  - RF of loop [96:1,98:1]:
    V1
  - RF of loop [97:1,98:1]:
    V


### Resulting Chains:take(V,V1,Out) 
* [[96,97,98],99]
* [99]


### Merging Chains  take/3 into  External patterns of execution 
* [[99]] --> 1 
* [[99,[96,97,98]]] --> 2 


### Specialization of cost equations top/2 
* CE 21 is refined into CE [118] 
* CE 19 is refined into CE [119] 
* CE 20 is refined into CE [120,121,122,123] 


#### Refined cost equations top/2 
* CE 118: top(V,Out) = 0
     [V>=0,Out=0] 
* CE 119: top(V,Out) = 1+ top(V,Out)
     [V>=1] 
* CE 120: top(V,Out) = 1+ proper(W,X):1+ top(Y,Out)
     [Y=1,X=1,W=0,V=1] 
* CE 121: top(V,Out) = 1+ proper(W,X):2+ top(Y,Out)
     [Y=2,X=2,W=1,V=2] 
* CE 122: top(V,Out) = 1+ proper(W,X):3+ top(Y,Out)
     [Y=3,X=3,W=2,V=3] 
* CE 123: top(V,Out) = 1+ proper(W,X):4+ top(Y,Out)
     [W>=0,W+1=V,Y=0,X=0] 

### Cost equations --> "Loop" of top/2 
* CEs [123] --> Loop 100 
* CEs [122] --> Loop 101 
* CEs [121] --> Loop 102 
* CEs [119,120] --> Loop 103 
* CEs [118] --> Loop 104 

#### Loops of top/2 
* Loop 100: top(V,Out)->  top(V',Out)
                  [V>=1,V'=0] 
* Loop 101: top(V,Out)->  top(V',Out)
                  [V'=3,V=3] 
* Loop 102: top(V,Out)->  top(V',Out)
                  [V'=2,V=2] 
* Loop 103: top(V,Out)->  top(V,Out)
                  [V>=1] 
* Loop 104: top(V,Out) [V>=0,Out=0] 

### Ranking functions of CR top(V,Out) 

#### Partial ranking functions of CR top(V,Out) 


### Resulting Chains:top(V,Out) 
* [[101,102,103]]...
* [[101,102,103],104]
* [[101,102,103],100,104]
* [104]
* [100,104]


### Merging Chains  top/2 into  External patterns of execution 
* [[104,100],[104],[104,100,[101,102,103]],[104,[101,102,103]]] --> 1 
* [[[101,102,103]]] --> 2 


### Specialization of cost equations start/4 
* CE 2 is refined into CE [124,125] 
* CE 3 is refined into CE [126,127] 
* CE 4 is refined into CE [128,129] 
* CE 5 is refined into CE [130,131] 
* CE 6 is refined into CE [132,133] 
* CE 7 is refined into CE [134,135] 
* CE 8 is refined into CE [136,137] 
* CE 9 is refined into CE [138,139] 
* CE 10 is refined into CE [140,141] 
* CE 11 is refined into CE [142,143] 
* CE 12 is refined into CE [144,145] 
* CE 13 is refined into CE [146,147,148,149] 
* CE 14 is refined into CE [150,151] 
* CE 15 is refined into CE [152,153] 
* CE 16 is refined into CE [154,155] 
* CE 17 is refined into CE [156,157] 
* CE 18 is refined into CE [158,159] 


#### Refined cost equations start/4 
* CE 124: start(V,V1,V2,V3) = 0+ top(V,W3):1
     [V>=0,W3=0] 
* CE 125: start(V,V1,V2,V3) = 0+ top(V,W3):2
     [V>=1] 
* CE 126: start(V,V1,V2,V3) = 0+ afterNth(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 127: start(V,V1,V2,V3) = 0+ afterNth(V,V1,W3):2
     [V+V1>=W3,W3>=1,V1>=0,V>=0] 
* CE 128: start(V,V1,V2,V3) = 0+ take(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 129: start(V,V1,V2,V3) = 0+ take(V,V1,W3):2
     [V+V1>=W3,W3>=1,V1>=0,V>=0] 
* CE 130: start(V,V1,V2,V3) = 0+ cons(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 131: start(V,V1,V2,V3) = 0+ cons(V,V1,W3):2
     [V>=W3,W3>=1,V1>=0] 
* CE 132: start(V,V1,V2,V3) = 0+ tail(V,W3):1
     [V>=0,W3=0] 
* CE 133: start(V,V1,V2,V3) = 0+ tail(V,W3):2
     [V>=W3,W3>=1] 
* CE 134: start(V,V1,V2,V3) = 0+ snd(V,W3):1
     [V>=0,W3=0] 
* CE 135: start(V,V1,V2,V3) = 0+ snd(V,W3):2
     [V>=W3,W3>=1] 
* CE 136: start(V,V1,V2,V3) = 0+ pair(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 137: start(V,V1,V2,V3) = 0+ pair(V,V1,W3):2
     [V+V1>=W3,W3>=1,V1>=0,V>=0] 
* CE 138: start(V,V1,V2,V3) = 0+ and(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 139: start(V,V1,V2,V3) = 0+ and(V,V1,W3):2
     [V>=W3,W3>=1,V1>=0] 
* CE 140: start(V,V1,V2,V3) = 0+ sel(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 141: start(V,V1,V2,V3) = 0+ sel(V,V1,W3):2
     [V+V1>=W3,W3>=1,V1>=0,V>=0] 
* CE 142: start(V,V1,V2,V3) = 0+ splitAt(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 143: start(V,V1,V2,V3) = 0+ splitAt(V,V1,W3):2
     [V+V1>=W3,W3>=1,V1>=0,V>=0] 
* CE 144: start(V,V1,V2,V3) = 0+ fun(V,V1,V2,V3,W3):1
     [V3>=0,V2>=0,V1>=0,V>=0,W3=0] 
* CE 145: start(V,V1,V2,V3) = 0+ fun(V,V1,V2,V3,W3):2
     [V>=W3,W3>=1,V3>=0,V2>=0,V1>=0] 
* CE 146: start(V,V1,V2,V3) = 0+ proper(W3,X3):1
     [X3=1,W3=0,V=0] 
* CE 147: start(V,V1,V2,V3) = 0+ proper(W3,X3):2
     [X3=2,W3=1,V=1] 
* CE 148: start(V,V1,V2,V3) = 0+ proper(W3,X3):3
     [X3=3,W3=2,V=2] 
* CE 149: start(V,V1,V2,V3) = 0+ proper(V,W3):4
     [V>=0,W3=0] 
* CE 150: start(V,V1,V2,V3) = 0+ head(V,W3):1
     [V>=0,W3=0] 
* CE 151: start(V,V1,V2,V3) = 0+ head(V,W3):2
     [V>=W3,W3>=1] 
* CE 152: start(V,V1,V2,V3) = 0+ fun1(V,V1,W3):1
     [V1>=0,V>=0,W3=0] 
* CE 153: start(V,V1,V2,V3) = 0+ fun1(V,V1,W3):2
     [V>=W3,W3>=1,V1>=0] 
* CE 154: start(V,V1,V2,V3) = 0+ natsFrom(V,W3):1
     [V>=0,W3=0] 
* CE 155: start(V,V1,V2,V3) = 0+ natsFrom(V,W3):2
     [V>=W3,W3>=1] 
* CE 156: start(V,V1,V2,V3) = 0+ fst(V,W3):1
     [V>=0,W3=0] 
* CE 157: start(V,V1,V2,V3) = 0+ fst(V,W3):2
     [V>=W3,W3>=1] 
* CE 158: start(V,V1,V2,V3) = 0+ s(V,W3):1
     [V>=0,W3=0] 
* CE 159: start(V,V1,V2,V3) = 0+ s(V,W3):2
     [V>=W3,W3>=1] 

### Cost equations --> "Loop" of start/4 
* CEs [148] --> Loop 105 
* CEs [147] --> Loop 106 
* CEs [124,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,149,150,151,152,153,154,155,156,157,158,159] --> Loop 107 
* CEs [125] --> Loop 108 

#### Loops of start/4 
* Loop 105: start(V,V1,V2,V3) [V=2] 
* Loop 106: start(V,V1,V2,V3) [V=1] 
* Loop 107: start(V,V1,V2,V3) [V>=0] 
* Loop 108: start(V,V1,V2,V3) [V>=1] 

### Ranking functions of CR start(V,V1,V2,V3) 

#### Partial ranking functions of CR start(V,V1,V2,V3) 


### Resulting Chains:start(V,V1,V2,V3) 
* [108]...
* [107]
* [106]
* [105]


### Merging Chains  start/4 into  External patterns of execution 
* [[106],[107]] --> 1 
* [[105]] --> 2 
* [[108]] --> 3 


Computing Bounds
=====================================

#### Cost of loops [52,53,54] 

 * loop 52:afterNth(V,V1,Out) -> [afterNth(V',V1',Out')] 
1
 * loop 53:afterNth(V,V1,Out) -> [afterNth(V',V1',Out')] 
1
 * loop 54:afterNth(V,V1,Out) -> [afterNth(V',V1',Out')] 
1
#### Cost of phase [52,53,54]:afterNth(V,V1,Out) -> [afterNth(V',V1',Out')] 
1*it(52)+1*it(53)+1*it(54)+0
  Such that:aux(1) =< V
aux(2) =< V+V1
aux(3) =< V+V1-V'-V1'
aux(4) =< V-V'
aux(5) =< V1
aux(6) =< V1-V1'
it(53) =< aux(1)
it(54) =< aux(1)
it(52) =< aux(2)
it(53) =< aux(2)
it(54) =< aux(2)
it(52) =< aux(3)
it(53) =< aux(3)
it(54) =< aux(3)
it(53) =< aux(4)
it(54) =< aux(4)
it(52) =< aux(5)
it(54) =< aux(5)
it(52) =< aux(6)
it(54) =< aux(6)

#### Cost of chains of afterNth(V,V1,Out):
* Chain [[52,53,54],55]: 1*it(52)+1*it(53)+1*it(54)+0
  Such that:aux(7) =< V
aux(8) =< V+V1
aux(9) =< V1
it(53) =< aux(7)
it(54) =< aux(7)
it(52) =< aux(8)
it(53) =< aux(8)
it(54) =< aux(8)
it(52) =< aux(9)
it(54) =< aux(9)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [55]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [56,57] 

 * loop 56:and(V,V1,Out) -> [and(V',V1',Out')] 
1
 * loop 57:and(V,V1,Out) -> [and(V',V1',Out')] 
1
#### Cost of phase [56,57]:and(V,V1,Out) -> [and(V',V1',Out')] 
1*it(56)+1*it(57)+0
  Such that:it(57) =< V1
it(57) =< V1-V1'
aux(10) =< V
aux(11) =< V-V'
it(56) =< aux(10)
it(57) =< aux(10)
it(56) =< aux(11)
it(57) =< aux(11)

#### Cost of chains of and(V,V1,Out):
* Chain [[56,57],58]: 1*it(56)+1*it(57)+0
  Such that:aux(10) =< V
it(57) =< V1
aux(11) =< Out
it(56) =< aux(10)
it(57) =< aux(10)
it(56) =< aux(11)
it(57) =< aux(11)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [58]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [59,60] 

 * loop 59:cons(V,V1,Out) -> [cons(V',V1',Out')] 
1
 * loop 60:cons(V,V1,Out) -> [cons(V',V1',Out')] 
1
#### Cost of phase [59,60]:cons(V,V1,Out) -> [cons(V',V1',Out')] 
1*it(59)+1*it(60)+0
  Such that:it(60) =< V1
it(60) =< V1-V1'
aux(12) =< V
aux(13) =< V-V'
it(59) =< aux(12)
it(60) =< aux(12)
it(59) =< aux(13)
it(60) =< aux(13)

#### Cost of chains of cons(V,V1,Out):
* Chain [[59,60],61]: 1*it(59)+1*it(60)+0
  Such that:aux(12) =< V
it(60) =< V1
aux(13) =< Out
it(59) =< aux(12)
it(60) =< aux(12)
it(59) =< aux(13)
it(60) =< aux(13)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [61]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [62] 

 * loop 62:fst(V,Out) -> [fst(V',Out')] 
1
#### Cost of phase [62]:fst(V,Out) -> [fst(V',Out')] 
1*it(62)+0
  Such that:it(62) =< V
it(62) =< V-V'

#### Cost of chains of fst(V,Out):
* Chain [[62],63]: 1*it(62)+0
  Such that:it(62) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [63]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [64,65] 

 * loop 64:fun(V,V1,V2,V3,Out) -> [fun(V',V1',V2',V3',Out')] 
1
 * loop 65:fun(V,V1,V2,V3,Out) -> [fun(V',V1',V2',V3',Out')] 
1
#### Cost of phase [64,65]:fun(V,V1,V2,V3,Out) -> [fun(V',V1',V2',V3',Out')] 
1*it(64)+1*it(65)+0
  Such that:it(65) =< V1
it(65) =< V1-V1'
it(65) =< V2
it(65) =< V2-V2'
it(65) =< V3
it(65) =< V3-V3'
aux(14) =< V
aux(15) =< V-V'
it(64) =< aux(14)
it(65) =< aux(14)
it(64) =< aux(15)
it(65) =< aux(15)

#### Cost of chains of fun(V,V1,V2,V3,Out):
* Chain [[64,65],66]: 1*it(64)+1*it(65)+0
  Such that:aux(14) =< V
it(65) =< V1
aux(15) =< Out
it(64) =< aux(14)
it(65) =< aux(14)
it(64) =< aux(15)
it(65) =< aux(15)

  with precondition: [V1>=0,V2>=0,V3>=0,Out>=1,V>=Out] 

* Chain [66]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0,V3>=0] 


#### Cost of loops [67,68] 

 * loop 67:fun1(V,V1,Out) -> [fun1(V',V1',Out')] 
1
 * loop 68:fun1(V,V1,Out) -> [fun1(V',V1',Out')] 
1
#### Cost of phase [67,68]:fun1(V,V1,Out) -> [fun1(V',V1',Out')] 
1*it(67)+1*it(68)+0
  Such that:it(68) =< V1
it(68) =< V1-V1'
aux(16) =< V
aux(17) =< V-V'
it(67) =< aux(16)
it(68) =< aux(16)
it(67) =< aux(17)
it(68) =< aux(17)

#### Cost of chains of fun1(V,V1,Out):
* Chain [[67,68],69]: 1*it(67)+1*it(68)+0
  Such that:aux(16) =< V
it(68) =< V1
aux(17) =< Out
it(67) =< aux(16)
it(68) =< aux(16)
it(67) =< aux(17)
it(68) =< aux(17)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [69]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [70] 

 * loop 70:head(V,Out) -> [head(V',Out')] 
1
#### Cost of phase [70]:head(V,Out) -> [head(V',Out')] 
1*it(70)+0
  Such that:it(70) =< V
it(70) =< V-V'

#### Cost of chains of head(V,Out):
* Chain [[70],71]: 1*it(70)+0
  Such that:it(70) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [71]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [72] 

 * loop 72:natsFrom(V,Out) -> [natsFrom(V',Out')] 
1
#### Cost of phase [72]:natsFrom(V,Out) -> [natsFrom(V',Out')] 
1*it(72)+0
  Such that:it(72) =< V
it(72) =< V-V'

#### Cost of chains of natsFrom(V,Out):
* Chain [[72],73]: 1*it(72)+0
  Such that:it(72) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [73]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [74,75,76] 

 * loop 74:pair(V,V1,Out) -> [pair(V',V1',Out')] 
1
 * loop 75:pair(V,V1,Out) -> [pair(V',V1',Out')] 
1
 * loop 76:pair(V,V1,Out) -> [pair(V',V1',Out')] 
1
#### Cost of phase [74,75,76]:pair(V,V1,Out) -> [pair(V',V1',Out')] 
1*it(74)+1*it(75)+1*it(76)+0
  Such that:aux(18) =< V
aux(19) =< V+V1
aux(20) =< V+V1-V'-V1'
aux(21) =< V-V'
aux(22) =< V1
aux(23) =< V1-V1'
it(75) =< aux(18)
it(76) =< aux(18)
it(74) =< aux(19)
it(75) =< aux(19)
it(76) =< aux(19)
it(74) =< aux(20)
it(75) =< aux(20)
it(76) =< aux(20)
it(75) =< aux(21)
it(76) =< aux(21)
it(74) =< aux(22)
it(76) =< aux(22)
it(74) =< aux(23)
it(76) =< aux(23)

#### Cost of chains of pair(V,V1,Out):
* Chain [[74,75,76],77]: 1*it(74)+1*it(75)+1*it(76)+0
  Such that:aux(24) =< V
aux(25) =< V+V1
aux(26) =< V1
it(75) =< aux(24)
it(76) =< aux(24)
it(74) =< aux(25)
it(75) =< aux(25)
it(76) =< aux(25)
it(74) =< aux(26)
it(76) =< aux(26)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [77]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of chains of proper(V,Out):
* Chain [81]: 1
  with precondition: [V=0,Out=1] 

* Chain [80]: 1
  with precondition: [V=1,Out=2] 

* Chain [79]: 1
  with precondition: [V=2,Out=3] 

* Chain [78]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [82] 

 * loop 82:s(V,Out) -> [s(V',Out')] 
1
#### Cost of phase [82]:s(V,Out) -> [s(V',Out')] 
1*it(82)+0
  Such that:it(82) =< V
it(82) =< V-V'

#### Cost of chains of s(V,Out):
* Chain [[82],83]: 1*it(82)+0
  Such that:it(82) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [83]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [84,85,86] 

 * loop 84:sel(V,V1,Out) -> [sel(V',V1',Out')] 
1
 * loop 85:sel(V,V1,Out) -> [sel(V',V1',Out')] 
1
 * loop 86:sel(V,V1,Out) -> [sel(V',V1',Out')] 
1
#### Cost of phase [84,85,86]:sel(V,V1,Out) -> [sel(V',V1',Out')] 
1*it(84)+1*it(85)+1*it(86)+0
  Such that:aux(27) =< V
aux(28) =< V+V1
aux(29) =< V+V1-V'-V1'
aux(30) =< V-V'
aux(31) =< V1
aux(32) =< V1-V1'
it(85) =< aux(27)
it(86) =< aux(27)
it(84) =< aux(28)
it(85) =< aux(28)
it(86) =< aux(28)
it(84) =< aux(29)
it(85) =< aux(29)
it(86) =< aux(29)
it(85) =< aux(30)
it(86) =< aux(30)
it(84) =< aux(31)
it(86) =< aux(31)
it(84) =< aux(32)
it(86) =< aux(32)

#### Cost of chains of sel(V,V1,Out):
* Chain [[84,85,86],87]: 1*it(84)+1*it(85)+1*it(86)+0
  Such that:aux(33) =< V
aux(34) =< V+V1
aux(35) =< V1
it(85) =< aux(33)
it(86) =< aux(33)
it(84) =< aux(34)
it(85) =< aux(34)
it(86) =< aux(34)
it(84) =< aux(35)
it(86) =< aux(35)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [87]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [88] 

 * loop 88:snd(V,Out) -> [snd(V',Out')] 
1
#### Cost of phase [88]:snd(V,Out) -> [snd(V',Out')] 
1*it(88)+0
  Such that:it(88) =< V
it(88) =< V-V'

#### Cost of chains of snd(V,Out):
* Chain [[88],89]: 1*it(88)+0
  Such that:it(88) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [89]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [90,91,92] 

 * loop 90:splitAt(V,V1,Out) -> [splitAt(V',V1',Out')] 
1
 * loop 91:splitAt(V,V1,Out) -> [splitAt(V',V1',Out')] 
1
 * loop 92:splitAt(V,V1,Out) -> [splitAt(V',V1',Out')] 
1
#### Cost of phase [90,91,92]:splitAt(V,V1,Out) -> [splitAt(V',V1',Out')] 
1*it(90)+1*it(91)+1*it(92)+0
  Such that:aux(36) =< V
aux(37) =< V+V1
aux(38) =< V+V1-V'-V1'
aux(39) =< V-V'
aux(40) =< V1
aux(41) =< V1-V1'
it(91) =< aux(36)
it(92) =< aux(36)
it(90) =< aux(37)
it(91) =< aux(37)
it(92) =< aux(37)
it(90) =< aux(38)
it(91) =< aux(38)
it(92) =< aux(38)
it(91) =< aux(39)
it(92) =< aux(39)
it(90) =< aux(40)
it(92) =< aux(40)
it(90) =< aux(41)
it(92) =< aux(41)

#### Cost of chains of splitAt(V,V1,Out):
* Chain [[90,91,92],93]: 1*it(90)+1*it(91)+1*it(92)+0
  Such that:aux(42) =< V
aux(43) =< V+V1
aux(44) =< V1
it(91) =< aux(42)
it(92) =< aux(42)
it(90) =< aux(43)
it(91) =< aux(43)
it(92) =< aux(43)
it(90) =< aux(44)
it(92) =< aux(44)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [93]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [94] 

 * loop 94:tail(V,Out) -> [tail(V',Out')] 
1
#### Cost of phase [94]:tail(V,Out) -> [tail(V',Out')] 
1*it(94)+0
  Such that:it(94) =< V
it(94) =< V-V'

#### Cost of chains of tail(V,Out):
* Chain [[94],95]: 1*it(94)+0
  Such that:it(94) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [95]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [96,97,98] 

 * loop 96:take(V,V1,Out) -> [take(V',V1',Out')] 
1
 * loop 97:take(V,V1,Out) -> [take(V',V1',Out')] 
1
 * loop 98:take(V,V1,Out) -> [take(V',V1',Out')] 
1
#### Cost of phase [96,97,98]:take(V,V1,Out) -> [take(V',V1',Out')] 
1*it(96)+1*it(97)+1*it(98)+0
  Such that:aux(45) =< V
aux(46) =< V+V1
aux(47) =< V+V1-V'-V1'
aux(48) =< V-V'
aux(49) =< V1
aux(50) =< V1-V1'
it(97) =< aux(45)
it(98) =< aux(45)
it(96) =< aux(46)
it(97) =< aux(46)
it(98) =< aux(46)
it(96) =< aux(47)
it(97) =< aux(47)
it(98) =< aux(47)
it(97) =< aux(48)
it(98) =< aux(48)
it(96) =< aux(49)
it(98) =< aux(49)
it(96) =< aux(50)
it(98) =< aux(50)

#### Cost of chains of take(V,V1,Out):
* Chain [[96,97,98],99]: 1*it(96)+1*it(97)+1*it(98)+0
  Such that:aux(51) =< V
aux(52) =< V+V1
aux(53) =< V1
it(97) =< aux(51)
it(98) =< aux(51)
it(96) =< aux(52)
it(97) =< aux(52)
it(98) =< aux(52)
it(96) =< aux(53)
it(98) =< aux(53)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [99]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [101,102,103] 

 * loop 101:top(V,Out) -> [top(V',Out')] 
2
 * loop 102:top(V,Out) -> [top(V',Out')] 
2
 * loop 103:top(V,Out) -> [top(V',Out')] 
2
#### Cost of phase [101,102,103]:top(V,Out) -> [top(V',Out')] 
6*it(101)+0
#### Cost of phase [101,102,103]:top(V,Out) -> [top(V',Out')] 
6*it(101)+0
#### Cost of phase [101,102,103]:top(V,Out) -> [top(V',Out')] 
6*it(101)+0
#### Cost of chains of top(V,Out):
* Chain [[101,102,103]]...: 6*it(101)+0
  with precondition: [V>=1] 

* Chain [[101,102,103],104]: 6*it(101)+0
  with precondition: [Out=0,V>=1] 

* Chain [[101,102,103],100,104]: 6*it(101)+1
  with precondition: [Out=0,V>=1] 

* Chain [104]: 0
  with precondition: [Out=0,V>=0] 

* Chain [100,104]: 1
  with precondition: [Out=0,V>=1] 


#### Cost of chains of start(V,V1,V2,V3):
* Chain [108]...: 6*s(3)+0
  with precondition: [V>=1] 

* Chain [107]: 1*s(4)+5*s(8)+5*s(9)+5*s(10)+4*s(18)+10*s(20)+1
  Such that:aux(59) =< V
aux(60) =< V+V1
aux(61) =< V1
s(20) =< aux(59)
s(18) =< aux(61)
s(8) =< aux(59)
s(9) =< aux(59)
s(10) =< aux(60)
s(8) =< aux(60)
s(9) =< aux(60)
s(10) =< aux(61)
s(9) =< aux(61)
s(18) =< aux(59)

  with precondition: [V>=0] 

* Chain [106]: 1
  with precondition: [V=1] 

* Chain [105]: 1
  with precondition: [V=2] 


Closed-form bounds of start(V,V1,V2,V3): 
-------------------------------------
* Chain [108]... with precondition: [V>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [107] with precondition: [V>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [106] with precondition: [V=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [105] with precondition: [V=2] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V,V1,V2,V3): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 43 ms.
* Invariants computed in 119 ms.
   - Backward Invariants 49 ms.
   - Transitive Invariants 34 ms.
* Refinement performed in 199 ms.
* Termination proved in 38 ms.
* Upper bounds computed in 213 ms.
   - Equation cost structures 72 ms.
   - Phase cost structures 92 ms.
   - Chain cost structures 69 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 704 ms.


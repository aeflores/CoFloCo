
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [fun/1]
1. non_recursive  : [p/2]
2. non_recursive  : [prod/3]
3. non_recursive  : [s/2]
4. recursive [non_tail,multiple] : [activate/2,fact/2,if/4]
5. non_recursive  : [start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into activate/2
5. SCC is partially evaluated into start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations activate/2 
* CE 11 is refined into CE [14] 
* CE 13 is refined into CE [15] 
* CE 12 is refined into CE [16] 
* CE 9 is refined into CE [17] 
* CE 10 is refined into CE [18] 
* CE 8 is refined into CE [19] 


#### Refined cost equations activate/2 
* CE 14: activate(V,Out) = 2
     [Out=0,V=0] 
* CE 15: activate(A,A) = 1
     [A>=0] 
* CE 16: activate(V,Out) = 2+ activate(W,X)+ activate(Y,Z)
     [Z>=0,Y>=0,X>=0,W>=0,X+Z+1=Out,W+Y+1=V] 
* CE 17: activate(V,Out) = 3+ activate(W,X)+ activate(Y,Out)
     [W>=0,W+1=V,Y=1,X=0] 
* CE 18: activate(V,Out) = 2+ activate(W,X)
     [X>=0,W>=0,X+1=Out,W+1=V] 
* CE 19: activate(V,Out) = 2+ activate(W,X)
     [X>=0,W>=0,W+1=V,Out=0] 

### Cost equations --> "Loop" of activate/2 
* CEs [18] --> Loop 7 
* CEs [19] --> Loop 8 
* CEs [16] --> Loop 9 
* CEs [17] --> Loop 10 
* CEs [14,15] --> Loop 11 

#### Loops of activate/2 
* Loop 7: activate(V,Out)->  activate(V',Out')
                  [Out>=1,V>=1,Out=Out'+1,V=V'+1] 
* Loop 8: activate(V,Out)->  activate(V',Out')
                  [Out'>=0,V>=1,V=V'+1,Out=0] 
* Loop 9: activate(V,Out)->  activate(V',Out')  activate(V'2,Out'2)
                  [Out>=Out'+1,V>=V'+1,Out'>=0,V'>=0,Out'+Out'2+1=Out,V'+V'2+1=V] 
* Loop 10: activate(V,Out)->  activate(V',Out')  activate(V'2,Out)
                  [V>=1,V=V'+1,V'2=1,Out'=0] 
* Loop 11: activate(A,A) [A>=0] 

### Ranking functions of CR activate(V,Out) 

#### Partial ranking functions of CR activate(V,Out) 
* Partial RF of phase [7,8,9,10]:
  - RF of loop [7:1,8:1,9:1,9:2,10:1]:
    V


### Resulting Chains:activate(V,Out) 
* [multiple([7,8,9,10],[[],[11]])]...
* [11]


### Merging Chains  activate/2 into  External patterns of execution 
* [[11]] --> 1 
* [[multiple([7,8,9,10],[[],[11]])]] --> 2 


### Specialization of cost equations start/3 
* CE 2 is refined into CE [20] 
* CE 3 is refined into CE [21] 
* CE 4 is refined into CE [22,23] 
* CE 5 is refined into CE [24,25] 
* CE 6 is refined into CE [26,27] 
* CE 7 is refined into CE [28,29] 


#### Refined cost equations start/3 
* CE 20: start(V,V1,V2) = 1
     [] 
* CE 21: start(V,V1,V2) = 0
     [V2>=0,V1>=0,V>=0] 
* CE 22: start(V,V1,V2) = 1+ activate(V2,V2):1
     [V2>=0,V1>=0,V=0] 
* CE 23: start(V,V1,V2) = 1+ activate(V2,W2):2
     [V2>=1,V1>=0,V=0] 
* CE 24: start(V,V1,V2) = 2+ activate(W2,X2):1
     [X2=1,W2=1,V=0] 
* CE 25: start(V,V1,V2) = 2+ activate(W2,X2):2
     [W2=1,V=0] 
* CE 26: start(V,V1,V2) = 1+ activate(V1,V1):1
     [V1>=0,V2>=0,V=1] 
* CE 27: start(V,V1,V2) = 1+ activate(V1,W2):2
     [V1>=1,V2>=0,V=1] 
* CE 28: start(V,V1,V2) = 0+ activate(V,V):1
     [V>=0] 
* CE 29: start(V,V1,V2) = 0+ activate(V,W2):2
     [V>=1] 

### Cost equations --> "Loop" of start/3 
* CEs [27,29] --> Loop 12 
* CEs [23,25] --> Loop 13 
* CEs [20,21,22,24,26,28] --> Loop 14 

#### Loops of start/3 
* Loop 12: start(V,V1,V2) [V>=1] 
* Loop 13: start(V,V1,V2) [V=0] 
* Loop 14: start(V,V1,V2) [] 

### Ranking functions of CR start(V,V1,V2) 

#### Partial ranking functions of CR start(V,V1,V2) 


### Resulting Chains:start(V,V1,V2) 
* [14]
* [13]...
* [12]...


### Merging Chains  start/3 into  External patterns of execution 
* [[14]] --> 1 
* [[13]] --> 2 
* [[12]] --> 3 


Computing Bounds
=====================================

#### Cost of loops [7,8,9,10] 

 * loop 7:activate(V,Out) -> [activate(V',Out')] 
2
 * loop 8:activate(V,Out) -> [activate(V',Out')] 
2
 * loop 9:activate(V,Out) -> [activate(V',Out'),activate(V'2,Out'2)] 
2
 * loop 10:activate(V,Out) -> [activate(V',Out'),activate(V'2,Out'2)] 
3
#### Cost of phase [7,8,9,10]:activate(V,Out) -> [] 
6*it(7)+3*it(10)+2*it([11])+0
  Such that:aux(1) =< 1
it(10) =< 2*V
aux(2) =< V
it(7) =< aux(2)
it([11]) =< it(10)+it(7)+aux(1)

#### Cost of chains of activate(V,Out):
* Chain [multiple([7,8,9,10],[[],[11]])]...: 6*it(7)+3*it(10)+2*it([11])+0
  Such that:aux(1) =< 1
it(10) =< 2*V
aux(2) =< V
it(7) =< aux(2)
it([11]) =< it(10)+it(7)+aux(1)

  with precondition: [V>=1] 

* Chain [11]: 2
  with precondition: [V=Out,V>=0] 


#### Cost of chains of start(V,V1,V2):
* Chain [14]: 4
  with precondition: [] 

* Chain [13]...: 3*s(2)+6*s(4)+2*s(5)+3*s(7)+6*s(9)+2*s(10)+2
  Such that:s(7) =< 2
s(3) =< V2
s(2) =< 2*V2
aux(4) =< 1
s(4) =< s(3)
s(5) =< s(2)+s(4)+aux(4)
s(9) =< aux(4)
s(10) =< s(7)+s(9)+aux(4)

  with precondition: [V=0] 

* Chain [12]...: 3*s(12)+6*s(14)+2*s(15)+3*s(17)+6*s(19)+2*s(20)+1
  Such that:s(18) =< V
s(17) =< 2*V
s(13) =< V1
s(12) =< 2*V1
aux(5) =< 1
s(14) =< s(13)
s(15) =< s(12)+s(14)+aux(5)
s(19) =< s(18)
s(20) =< s(17)+s(19)+aux(5)

  with precondition: [V>=1] 


Closed-form bounds of start(V,V1,V2): 
-------------------------------------
* Chain [14] with precondition: [] 
    - Upper bound: 4 
    - Complexity: constant 
* Chain [13]... with precondition: [V=0] 
    - Upper bound: nat(V2)*8+24+nat(2*V2)*5 
    - Complexity: n 
* Chain [12]... with precondition: [V>=1] 
    - Upper bound: 8*V+5+nat(V1)*8+10*V+nat(2*V1)*5 
    - Complexity: n 

### Maximum cost of start(V,V1,V2): max([nat(V2)*8+20+nat(2*V2)*5,nat(V)*8+1+nat(V1)*8+nat(2*V)*5+nat(2*V1)*5])+4 
Asymptotic class: n 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 20 ms.
* Invariants computed in 9 ms.
   - Backward Invariants 1 ms.
   - Transitive Invariants 3 ms.
* Refinement performed in 29 ms.
* Termination proved in 4 ms.
* Upper bounds computed in 31 ms.
   - Equation cost structures 9 ms.
   - Phase cost structures 19 ms.
   - Chain cost structures 0 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 111 ms.



Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. non_recursive  : [fun/1]
1. non_recursive  : [fun1/1]
2. recursive [multiple] : [fun2/1,fun3/2,fun4/2,fun5/2,mark/2]
3. non_recursive  : [start/1]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into fun/1
1. SCC is partially evaluated into fun1/1
2. SCC is partially evaluated into mark/2
3. SCC is partially evaluated into start/1

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fun/1 
* CE 21 is refined into CE [23] 
* CE 22 is refined into CE [24] 


#### Refined cost equations fun/1 
* CE 23: fun(Out) = 1
     [Out=3] 
* CE 24: fun(Out) = 1
     [Out=1] 

### Cost equations --> "Loop" of fun/1 
* CEs [23] --> Loop 14 
* CEs [24] --> Loop 15 

#### Loops of fun/1 
* Loop 14: fun(Out) [Out=3] 
* Loop 15: fun(Out) [Out=1] 

### Ranking functions of CR fun(Out) 

#### Partial ranking functions of CR fun(Out) 


### Resulting Chains:fun(Out) 
* [15]
* [14]


### Merging Chains  fun/1 into  External patterns of execution 
* [[15]] --> 1 
* [[14]] --> 2 


### Specialization of cost equations fun1/1 
* CE 9 is refined into CE [25] 
* CE 10 is refined into CE [26] 


#### Refined cost equations fun1/1 
* CE 25: fun1(Out) = 1
     [Out=4] 
* CE 26: fun1(Out) = 1
     [Out=3] 

### Cost equations --> "Loop" of fun1/1 
* CEs [25] --> Loop 16 
* CEs [26] --> Loop 17 

#### Loops of fun1/1 
* Loop 16: fun1(Out) [Out=4] 
* Loop 17: fun1(Out) [Out=3] 

### Ranking functions of CR fun1(Out) 

#### Partial ranking functions of CR fun1(Out) 


### Resulting Chains:fun1(Out) 
* [17]
* [16]


### Merging Chains  fun1/1 into  External patterns of execution 
* [[17]] --> 1 
* [[16]] --> 2 


### Specialization of cost equations mark/2 
* CE 18 is refined into CE [27,28] 
* CE 11 is refined into CE [29] 
* CE 13 is refined into CE [30,31] 
* CE 17 is refined into CE [32,33] 
* CE 20 is refined into CE [34] 
* CE 14 is refined into CE [35] 
* CE 19 is refined into CE [36] 
* CE 12 is refined into CE [37,38] 
* CE 15 is refined into CE [39] 
* CE 16 is refined into CE [40] 


#### Refined cost equations mark/2 
* CE 27: mark(V,Out) = 1+ fun1(W):1
     [W=3,Out=3,V=3] 
* CE 28: mark(V,Out) = 1+ fun1(W):2
     [W=4,Out=4,V=3] 
* CE 29: mark(V,Out) = 2
     [Out=2,V=2] 
* CE 30: mark(V,Out) = 3+ fun1(W):1
     [W=3,Out=4,V=2] 
* CE 31: mark(V,Out) = 3+ fun1(W):2
     [W=4,Out=5,V=2] 
* CE 32: mark(V,Out) = 1+ fun(W):1
     [W=1,Out=1,V=1] 
* CE 33: mark(V,Out) = 1+ fun(W):2
     [W=3,Out=3,V=1] 
* CE 34: mark(V,Out) = 1
     [Out=0,V=0] 
* CE 35: mark(V,Out) = 2+ mark(W,X)
     [X>=0,W>=0,X+1=Out,W+1=V] 
* CE 36: mark(V,Out) = 1+ mark(W,X)
     [V+X>=Out,Out>=X+1,V+X=Out+W] 
* CE 37: mark(V,Out) = 3+ fun1(W):1+ mark(X,Y)
     [Out>=Y+3,Y+5>=Out,Y+5=Out+X,W=3,V=2] 
* CE 38: mark(V,Out) = 3+ fun1(W):2+ mark(X,Y)
     [Out>=Y+3,Y+6>=Out,Y+6=Out+X,W=4,V=2] 
* CE 39: mark(V,Out) = 2+ mark(W,X)+ mark(Y,Z)
     [Out>=Z+3,Y>=0,W>=0,X+Z+2=Out+Y,W+1=V] 
* CE 40: mark(V,Out) = 2+ mark(W,X)+ mark(Y,Out)
     [X>=Y+1,Y>=0,W>=0,W+1=V] 

### Cost equations --> "Loop" of mark/2 
* CEs [39] --> Loop 18 
* CEs [40] --> Loop 19 
* CEs [35,36] --> Loop 20 
* CEs [38] --> Loop 21 
* CEs [37] --> Loop 22 
* CEs [28] --> Loop 23 
* CEs [27] --> Loop 24 
* CEs [31] --> Loop 25 
* CEs [30] --> Loop 26 
* CEs [29] --> Loop 27 
* CEs [33] --> Loop 28 
* CEs [32] --> Loop 29 
* CEs [34] --> Loop 30 

#### Loops of mark/2 
* Loop 18: mark(V,Out)->  mark(V',Out')  mark(V'2,Out'2)
                  [Out'>=V'2+1,V'2>=0,V>=1,Out'+Out'2+2=Out+V'2,V=V'+1] 
* Loop 19: mark(V,Out)->  mark(V',Out')  mark(V'2,Out)
                  [Out'>=V'2+1,V'2>=0,V>=1,V=V'+1] 
* Loop 20: mark(V,Out)->  mark(V',Out')
                  [V>=V'+1,V'>=0,Out+V'=V+Out'] 
* Loop 21: mark(V,Out)->  mark(V',Out')
                  [V'>=0,3>=V',Out+V'=Out'+6,V=2] 
* Loop 22: mark(V,Out)->  mark(V',Out')
                  [V'>=0,2>=V',Out+V'=Out'+5,V=2] 
* Loop 23: mark(V,Out) [Out=4,V=3] 
* Loop 24: mark(V,Out) [Out=3,V=3] 
* Loop 25: mark(V,Out) [Out=5,V=2] 
* Loop 26: mark(V,Out) [Out=4,V=2] 
* Loop 27: mark(V,Out) [Out=2,V=2] 
* Loop 28: mark(V,Out) [Out=3,V=1] 
* Loop 29: mark(V,Out) [Out=1,V=1] 
* Loop 30: mark(V,Out) [Out=0,V=0] 

### Ranking functions of CR mark(V,Out) 

#### Partial ranking functions of CR mark(V,Out) 
* Partial RF of phase [18,19,20,21,22]:
  - RF of loop [18:1,19:1,20:1]:
    V depends on loops [18:2,19:2,21:1] 


### Resulting Chains:mark(V,Out) 
* [multiple([18,19,20,21,22],[[],[30],[29],[28],[27],[26],[25],[24],[23]])]...
* [30]
* [29]
* [28]
* [27]
* [26]
* [25]
* [24]
* [23]


### Merging Chains  mark/2 into  External patterns of execution 
* [[30]] --> 1 
* [[29]] --> 2 
* [[28]] --> 3 
* [[27]] --> 4 
* [[26]] --> 5 
* [[25]] --> 6 
* [[24]] --> 7 
* [[23]] --> 8 
* [[multiple([18,19,20,21,22],[[],[30],[29],[28],[27],[26],[25],[24],[23]])]] --> 9 


### Specialization of cost equations start/1 
* CE 2 is refined into CE [41] 
* CE 3 is refined into CE [42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57] 
* CE 4 is refined into CE [58,59] 
* CE 5 is refined into CE [60,61,62,63,64,65,66,67,68] 
* CE 6 is refined into CE [69,70] 
* CE 7 is refined into CE [71,72] 
* CE 8 is refined into CE [73,74,75,76,77,78,79,80,81] 


#### Refined cost equations start/1 
* CE 41: start(V) = 1
     [] 
* CE 42: start(V) = 2+ fun1(W):1+ mark(X,Y):1
     [Y=0,X=0,W=3] 
* CE 43: start(V) = 2+ fun1(W):1+ mark(X,Y):2
     [Y=1,X=1,W=3] 
* CE 44: start(V) = 2+ fun1(W):1+ mark(X,Y):3
     [Y=3,X=1,W=3] 
* CE 45: start(V) = 2+ fun1(W):1+ mark(X,Y):4
     [Y=2,X=2,W=3] 
* CE 46: start(V) = 2+ fun1(W):1+ mark(X,Y):5
     [Y=4,X=2,W=3] 
* CE 47: start(V) = 2+ fun1(W):1+ mark(X,Y):6
     [Y=5,X=2,W=3] 
* CE 48: start(V) = 2+ fun1(W):1+ mark(X,Y):9
     [X>=1,2>=X,W=3] 
* CE 49: start(V) = 2+ fun1(W):2+ mark(X,Y):1
     [Y=0,X=0,W=4] 
* CE 50: start(V) = 2+ fun1(W):2+ mark(X,Y):2
     [Y=1,X=1,W=4] 
* CE 51: start(V) = 2+ fun1(W):2+ mark(X,Y):3
     [Y=3,X=1,W=4] 
* CE 52: start(V) = 2+ fun1(W):2+ mark(X,Y):4
     [Y=2,X=2,W=4] 
* CE 53: start(V) = 2+ fun1(W):2+ mark(X,Y):5
     [Y=4,X=2,W=4] 
* CE 54: start(V) = 2+ fun1(W):2+ mark(X,Y):6
     [Y=5,X=2,W=4] 
* CE 55: start(V) = 2+ fun1(W):2+ mark(X,Y):7
     [Y=3,X=3,W=4] 
* CE 56: start(V) = 2+ fun1(W):2+ mark(X,Y):8
     [Y=4,X=3,W=4] 
* CE 57: start(V) = 2+ fun1(W):2+ mark(X,Y):9
     [X>=1,3>=X,W=4] 
* CE 58: start(V) = 2+ fun1(W):1
     [W=3] 
* CE 59: start(V) = 2+ fun1(W):2
     [W=4] 
* CE 60: start(V) = 1+ mark(W,X):1
     [V>=1,X=0,W=0] 
* CE 61: start(V) = 1+ mark(W,X):2
     [V>=2,X=1,W=1] 
* CE 62: start(V) = 1+ mark(W,X):3
     [V>=2,X=3,W=1] 
* CE 63: start(V) = 1+ mark(W,X):4
     [V>=3,X=2,W=2] 
* CE 64: start(V) = 1+ mark(W,X):5
     [V>=3,X=4,W=2] 
* CE 65: start(V) = 1+ mark(W,X):6
     [V>=3,X=5,W=2] 
* CE 66: start(V) = 1+ mark(W,X):7
     [V>=4,X=3,W=3] 
* CE 67: start(V) = 1+ mark(W,X):8
     [V>=4,X=4,W=3] 
* CE 68: start(V) = 1+ mark(W,X):9
     [V>=W+1,W>=1] 
* CE 69: start(V) = 0+ fun(W):1
     [W=1] 
* CE 70: start(V) = 0+ fun(W):2
     [W=3] 
* CE 71: start(V) = 0+ fun1(W):1
     [W=3] 
* CE 72: start(V) = 0+ fun1(W):2
     [W=4] 
* CE 73: start(V) = 0+ mark(W,X):1
     [X=0,W=0,V=0] 
* CE 74: start(V) = 0+ mark(W,X):2
     [X=1,W=1,V=1] 
* CE 75: start(V) = 0+ mark(W,X):3
     [X=3,W=1,V=1] 
* CE 76: start(V) = 0+ mark(W,X):4
     [X=2,W=2,V=2] 
* CE 77: start(V) = 0+ mark(W,X):5
     [X=4,W=2,V=2] 
* CE 78: start(V) = 0+ mark(W,X):6
     [X=5,W=2,V=2] 
* CE 79: start(V) = 0+ mark(W,X):7
     [X=3,W=3,V=3] 
* CE 80: start(V) = 0+ mark(W,X):8
     [X=4,W=3,V=3] 
* CE 81: start(V) = 0+ mark(V,W):9
     [V>=1] 

### Cost equations --> "Loop" of start/1 
* CEs [48,57,68,81] --> Loop 31 
* CEs [41,42,43,44,45,46,47,49,50,51,52,53,54,55,56,58,59,60,61,62,63,64,65,66,67,69,70,71,72,73,74,75,76,77,78,79,80] --> Loop 32 

#### Loops of start/1 
* Loop 31: start(V) [] 
* Loop 32: start(V) [] 

### Ranking functions of CR start(V) 

#### Partial ranking functions of CR start(V) 


### Resulting Chains:start(V) 
* [32]
* [31]...


### Merging Chains  start/1 into  External patterns of execution 
* [[32]] --> 1 
* [[31]] --> 2 


Computing Bounds
=====================================

#### Cost of chains of fun(Out):
* Chain [15]: 1
  with precondition: [Out=1] 

* Chain [14]: 1
  with precondition: [Out=3] 


#### Cost of chains of fun1(Out):
* Chain [17]: 1
  with precondition: [Out=3] 

* Chain [16]: 1
  with precondition: [Out=4] 


#### Cost of loops [18,19,20,21,22] 

 * loop 18:mark(V,Out) -> [mark(V',Out'),mark(V'2,Out'2)] 
2
 * loop 19:mark(V,Out) -> [mark(V',Out'),mark(V'2,Out'2)] 
2
 * loop 20:mark(V,Out) -> [mark(V',Out')] 
2
 * loop 21:mark(V,Out) -> [mark(V',Out')] 
4
 * loop 22:mark(V,Out) -> [mark(V',Out')] 
4
#### Cost of phase [18,19,20,21,22]:mark(V,Out) -> [] 
12*it(18)+2*it(20)+18*it([23])+1*it([30])+0
#### Cost of chains of mark(V,Out):
* Chain [multiple([18,19,20,21,22],[[],[30],[29],[28],[27],[26],[25],[24],[23]])]...: 12*it(18)+2*it(20)+18*it([23])+1*it([30])+0
  with precondition: [V>=1] 

* Chain [30]: 1
  with precondition: [V=0,Out=0] 

* Chain [29]: 2
  with precondition: [V=1,Out=1] 

* Chain [28]: 2
  with precondition: [V=1,Out=3] 

* Chain [27]: 2
  with precondition: [V=2,Out=2] 

* Chain [26]: 4
  with precondition: [V=2,Out=4] 

* Chain [25]: 4
  with precondition: [V=2,Out=5] 

* Chain [24]: 2
  with precondition: [V=3,Out=3] 

* Chain [23]: 2
  with precondition: [V=3,Out=4] 


#### Cost of chains of start(V):
* Chain [32]: 7
  with precondition: [] 

* Chain [31]...: 1*aux(13)+0
  with precondition: [] 


Closed-form bounds of start(V): 
-------------------------------------
* Chain [32] with precondition: [] 
    - Upper bound: 7 
    - Complexity: constant 
* Chain [31]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of start(V): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 55 ms.
* Invariants computed in 43 ms.
   - Backward Invariants 9 ms.
   - Transitive Invariants 10 ms.
* Refinement performed in 186 ms.
* Termination proved in 17 ms.
* Upper bounds computed in 167 ms.
   - Equation cost structures 54 ms.
   - Phase cost structures 120 ms.
   - Chain cost structures 0 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 532 ms.


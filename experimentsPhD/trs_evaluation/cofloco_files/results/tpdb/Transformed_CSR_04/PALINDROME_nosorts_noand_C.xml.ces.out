
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [fun/2]
1. recursive  : [fun1/3]
2. recursive  : [fun2/2]
3. recursive  : [isNePal/2]
4. non_recursive  : [proper/2]
5. recursive  : [top/2]
6. non_recursive  : [start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into fun/2
1. SCC is partially evaluated into fun1/3
2. SCC is partially evaluated into fun2/2
3. SCC is partially evaluated into isNePal/2
4. SCC is partially evaluated into proper/2
5. SCC is partially evaluated into top/2
6. SCC is partially evaluated into start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fun/2 
* CE 17 is refined into CE [24] 
* CE 16 is refined into CE [25] 


#### Refined cost equations fun/2 
* CE 24: fun(V,Out) = 0
     [V>=0,Out=0] 
* CE 25: fun(V,Out) = 1+ fun(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of fun/2 
* CEs [25] --> Loop 17 
* CEs [24] --> Loop 18 

#### Loops of fun/2 
* Loop 17: fun(V,Out)->  fun(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 18: fun(V,Out) [V>=0,Out=0] 

### Ranking functions of CR fun(V,Out) 
* RF of phase [17]: [V]

#### Partial ranking functions of CR fun(V,Out) 
* Partial RF of phase [17]:
  - RF of loop [17:1]:
    V


### Resulting Chains:fun(V,Out) 
* [[17],18]
* [18]


### Merging Chains  fun/2 into  External patterns of execution 
* [[18]] --> 1 
* [[18,[17]]] --> 2 


### Specialization of cost equations fun1/3 
* CE 21 is refined into CE [26] 
* CE 20 is refined into CE [27] 
* CE 19 is refined into CE [28] 
* CE 18 is refined into CE [29] 


#### Refined cost equations fun1/3 
* CE 26: fun1(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 27: fun1(V,V1,Out) = 1+ fun1(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 28: fun1(V,V1,Out) = 1+ fun1(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 29: fun1(V,V1,Out) = 1+ fun1(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun1/3 
* CEs [27] --> Loop 19 
* CEs [28] --> Loop 20 
* CEs [29] --> Loop 21 
* CEs [26] --> Loop 22 

#### Loops of fun1/3 
* Loop 19: fun1(V,V1,Out)->  fun1(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 20: fun1(V,V1,Out)->  fun1(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 21: fun1(V,V1,Out)->  fun1(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 22: fun1(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun1(V,V1,Out) 
* RF of phase [19,20,21]: [V+V1]

#### Partial ranking functions of CR fun1(V,V1,Out) 
* Partial RF of phase [19,20,21]:
  - RF of loop [19:1,21:1]:
    V1
  - RF of loop [20:1,21:1]:
    V


### Resulting Chains:fun1(V,V1,Out) 
* [[19,20,21],22]
* [22]


### Merging Chains  fun1/3 into  External patterns of execution 
* [[22]] --> 1 
* [[22,[19,20,21]]] --> 2 


### Specialization of cost equations fun2/2 
* CE 23 is refined into CE [30] 
* CE 22 is refined into CE [31] 


#### Refined cost equations fun2/2 
* CE 30: fun2(V,Out) = 0
     [V>=0,Out=0] 
* CE 31: fun2(V,Out) = 1+ fun2(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of fun2/2 
* CEs [31] --> Loop 23 
* CEs [30] --> Loop 24 

#### Loops of fun2/2 
* Loop 23: fun2(V,Out)->  fun2(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 24: fun2(V,Out) [V>=0,Out=0] 

### Ranking functions of CR fun2(V,Out) 
* RF of phase [23]: [V]

#### Partial ranking functions of CR fun2(V,Out) 
* Partial RF of phase [23]:
  - RF of loop [23:1]:
    V


### Resulting Chains:fun2(V,Out) 
* [[23],24]
* [24]


### Merging Chains  fun2/2 into  External patterns of execution 
* [[24]] --> 1 
* [[24,[23]]] --> 2 


### Specialization of cost equations isNePal/2 
* CE 15 is refined into CE [32] 
* CE 14 is refined into CE [33] 


#### Refined cost equations isNePal/2 
* CE 32: isNePal(V,Out) = 0
     [V>=0,Out=0] 
* CE 33: isNePal(V,Out) = 1+ isNePal(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of isNePal/2 
* CEs [33] --> Loop 25 
* CEs [32] --> Loop 26 

#### Loops of isNePal/2 
* Loop 25: isNePal(V,Out)->  isNePal(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 26: isNePal(V,Out) [V>=0,Out=0] 

### Ranking functions of CR isNePal(V,Out) 
* RF of phase [25]: [V]

#### Partial ranking functions of CR isNePal(V,Out) 
* Partial RF of phase [25]:
  - RF of loop [25:1]:
    V


### Resulting Chains:isNePal(V,Out) 
* [[25],26]
* [26]


### Merging Chains  isNePal/2 into  External patterns of execution 
* [[26]] --> 1 
* [[26,[25]]] --> 2 


### Specialization of cost equations proper/2 
* CE 13 is refined into CE [34] 
* CE 12 is refined into CE [35] 
* CE 11 is refined into CE [36] 


#### Refined cost equations proper/2 
* CE 34: proper(V,Out) = 0
     [V>=0,Out=0] 
* CE 35: proper(V,Out) = 1
     [Out=2,V=1] 
* CE 36: proper(V,Out) = 1
     [Out=1,V=0] 

### Cost equations --> "Loop" of proper/2 
* CEs [34] --> Loop 27 
* CEs [35] --> Loop 28 
* CEs [36] --> Loop 29 

#### Loops of proper/2 
* Loop 27: proper(V,Out) [V>=0,Out=0] 
* Loop 28: proper(V,Out) [Out=2,V=1] 
* Loop 29: proper(V,Out) [Out=1,V=0] 

### Ranking functions of CR proper(V,Out) 

#### Partial ranking functions of CR proper(V,Out) 


### Resulting Chains:proper(V,Out) 
* [29]
* [28]
* [27]


### Merging Chains  proper/2 into  External patterns of execution 
* [[29]] --> 1 
* [[28]] --> 2 
* [[27]] --> 3 


### Specialization of cost equations top/2 
* CE 10 is refined into CE [37] 
* CE 8 is refined into CE [38] 
* CE 9 is refined into CE [39,40,41] 


#### Refined cost equations top/2 
* CE 37: top(V,Out) = 0
     [V>=0,Out=0] 
* CE 38: top(V,Out) = 1+ top(V,Out)
     [V>=1] 
* CE 39: top(V,Out) = 1+ proper(W,X):1+ top(Y,Out)
     [Y=1,X=1,W=0,V=1] 
* CE 40: top(V,Out) = 1+ proper(W,X):2+ top(Y,Out)
     [Y=2,X=2,W=1,V=2] 
* CE 41: top(V,Out) = 1+ proper(W,X):3+ top(Y,Out)
     [W>=0,W+1=V,Y=0,X=0] 

### Cost equations --> "Loop" of top/2 
* CEs [41] --> Loop 30 
* CEs [40] --> Loop 31 
* CEs [38,39] --> Loop 32 
* CEs [37] --> Loop 33 

#### Loops of top/2 
* Loop 30: top(V,Out)->  top(V',Out)
                  [V>=1,V'=0] 
* Loop 31: top(V,Out)->  top(V',Out)
                  [V'=2,V=2] 
* Loop 32: top(V,Out)->  top(V,Out)
                  [V>=1] 
* Loop 33: top(V,Out) [V>=0,Out=0] 

### Ranking functions of CR top(V,Out) 

#### Partial ranking functions of CR top(V,Out) 


### Resulting Chains:top(V,Out) 
* [[31,32]]...
* [[31,32],33]
* [[31,32],30,33]
* [33]
* [30,33]


### Merging Chains  top/2 into  External patterns of execution 
* [[33,30],[33],[33,30,[31,32]],[33,[31,32]]] --> 1 
* [[[31,32]]] --> 2 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [42,43] 
* CE 3 is refined into CE [44,45,46] 
* CE 4 is refined into CE [47,48] 
* CE 5 is refined into CE [49,50] 
* CE 6 is refined into CE [51,52] 
* CE 7 is refined into CE [53,54] 


#### Refined cost equations start/2 
* CE 42: start(V,V1) = 0+ top(V,W1):1
     [V>=0,W1=0] 
* CE 43: start(V,V1) = 0+ top(V,W1):2
     [V>=1] 
* CE 44: start(V,V1) = 0+ proper(W1,X1):1
     [X1=1,W1=0,V=0] 
* CE 45: start(V,V1) = 0+ proper(W1,X1):2
     [X1=2,W1=1,V=1] 
* CE 46: start(V,V1) = 0+ proper(V,W1):3
     [V>=0,W1=0] 
* CE 47: start(V,V1) = 0+ isNePal(V,W1):1
     [V>=0,W1=0] 
* CE 48: start(V,V1) = 0+ isNePal(V,W1):2
     [V>=W1,W1>=1] 
* CE 49: start(V,V1) = 0+ fun(V,W1):1
     [V>=0,W1=0] 
* CE 50: start(V,V1) = 0+ fun(V,W1):2
     [V>=W1,W1>=1] 
* CE 51: start(V,V1) = 0+ fun1(V,V1,W1):1
     [V1>=0,V>=0,W1=0] 
* CE 52: start(V,V1) = 0+ fun1(V,V1,W1):2
     [V+V1>=W1,W1>=1,V1>=0,V>=0] 
* CE 53: start(V,V1) = 0+ fun2(V,W1):1
     [V>=0,W1=0] 
* CE 54: start(V,V1) = 0+ fun2(V,W1):2
     [V>=W1,W1>=1] 

### Cost equations --> "Loop" of start/2 
* CEs [45] --> Loop 34 
* CEs [42,44,46,47,48,49,50,51,52,53,54] --> Loop 35 
* CEs [43] --> Loop 36 

#### Loops of start/2 
* Loop 34: start(V,V1) [V=1] 
* Loop 35: start(V,V1) [V>=0] 
* Loop 36: start(V,V1) [V>=1] 

### Ranking functions of CR start(V,V1) 

#### Partial ranking functions of CR start(V,V1) 


### Resulting Chains:start(V,V1) 
* [36]...
* [35]
* [34]


### Merging Chains  start/2 into  External patterns of execution 
* [[34],[35]] --> 1 
* [[36]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [17] 

 * loop 17:fun(V,Out) -> [fun(V',Out')] 
1
#### Cost of phase [17]:fun(V,Out) -> [fun(V',Out')] 
1*it(17)+0
  Such that:it(17) =< V
it(17) =< V-V'

#### Cost of chains of fun(V,Out):
* Chain [[17],18]: 1*it(17)+0
  Such that:it(17) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [18]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [19,20,21] 

 * loop 19:fun1(V,V1,Out) -> [fun1(V',V1',Out')] 
1
 * loop 20:fun1(V,V1,Out) -> [fun1(V',V1',Out')] 
1
 * loop 21:fun1(V,V1,Out) -> [fun1(V',V1',Out')] 
1
#### Cost of phase [19,20,21]:fun1(V,V1,Out) -> [fun1(V',V1',Out')] 
1*it(19)+1*it(20)+1*it(21)+0
  Such that:aux(1) =< V
aux(2) =< V+V1
aux(3) =< V+V1-V'-V1'
aux(4) =< V-V'
aux(5) =< V1
aux(6) =< V1-V1'
it(20) =< aux(1)
it(21) =< aux(1)
it(19) =< aux(2)
it(20) =< aux(2)
it(21) =< aux(2)
it(19) =< aux(3)
it(20) =< aux(3)
it(21) =< aux(3)
it(20) =< aux(4)
it(21) =< aux(4)
it(19) =< aux(5)
it(21) =< aux(5)
it(19) =< aux(6)
it(21) =< aux(6)

#### Cost of chains of fun1(V,V1,Out):
* Chain [[19,20,21],22]: 1*it(19)+1*it(20)+1*it(21)+0
  Such that:aux(7) =< V
aux(8) =< V+V1
aux(9) =< V1
it(20) =< aux(7)
it(21) =< aux(7)
it(19) =< aux(8)
it(20) =< aux(8)
it(21) =< aux(8)
it(19) =< aux(9)
it(21) =< aux(9)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [22]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [23] 

 * loop 23:fun2(V,Out) -> [fun2(V',Out')] 
1
#### Cost of phase [23]:fun2(V,Out) -> [fun2(V',Out')] 
1*it(23)+0
  Such that:it(23) =< V
it(23) =< V-V'

#### Cost of chains of fun2(V,Out):
* Chain [[23],24]: 1*it(23)+0
  Such that:it(23) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [24]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [25] 

 * loop 25:isNePal(V,Out) -> [isNePal(V',Out')] 
1
#### Cost of phase [25]:isNePal(V,Out) -> [isNePal(V',Out')] 
1*it(25)+0
  Such that:it(25) =< V
it(25) =< V-V'

#### Cost of chains of isNePal(V,Out):
* Chain [[25],26]: 1*it(25)+0
  Such that:it(25) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [26]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of chains of proper(V,Out):
* Chain [29]: 1
  with precondition: [V=0,Out=1] 

* Chain [28]: 1
  with precondition: [V=1,Out=2] 

* Chain [27]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [31,32] 

 * loop 31:top(V,Out) -> [top(V',Out')] 
2
 * loop 32:top(V,Out) -> [top(V',Out')] 
2
#### Cost of phase [31,32]:top(V,Out) -> [top(V',Out')] 
4*it(31)+0
#### Cost of phase [31,32]:top(V,Out) -> [top(V',Out')] 
4*it(31)+0
#### Cost of phase [31,32]:top(V,Out) -> [top(V',Out')] 
4*it(31)+0
#### Cost of chains of top(V,Out):
* Chain [[31,32]]...: 4*it(31)+0
  with precondition: [V>=1] 

* Chain [[31,32],33]: 4*it(31)+0
  with precondition: [Out=0,V>=1] 

* Chain [[31,32],30,33]: 4*it(31)+1
  with precondition: [Out=0,V>=1] 

* Chain [33]: 0
  with precondition: [Out=0,V>=0] 

* Chain [30,33]: 1
  with precondition: [Out=0,V>=1] 


#### Cost of chains of start(V,V1):
* Chain [36]...: 4*s(3)+0
  with precondition: [V>=1] 

* Chain [35]: 1*s(4)+3*s(5)+1*s(10)+1*s(11)+1*s(12)+1
  Such that:s(8) =< V+V1
s(9) =< V1
aux(11) =< V
s(5) =< aux(11)
s(10) =< aux(11)
s(11) =< aux(11)
s(12) =< s(8)
s(10) =< s(8)
s(11) =< s(8)
s(12) =< s(9)
s(11) =< s(9)

  with precondition: [V>=0] 

* Chain [34]: 1
  with precondition: [V=1] 


Closed-form bounds of start(V,V1): 
-------------------------------------
* Chain [36]... with precondition: [V>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [35] with precondition: [V>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [34] with precondition: [V=1] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V,V1): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 10 ms.
* Invariants computed in 34 ms.
   - Backward Invariants 14 ms.
   - Transitive Invariants 8 ms.
* Refinement performed in 49 ms.
* Termination proved in 7 ms.
* Upper bounds computed in 49 ms.
   - Equation cost structures 19 ms.
   - Phase cost structures 18 ms.
   - Chain cost structures 16 ms.
   - Solving cost expressions 0 ms.
* Total analysis performed in 183 ms.


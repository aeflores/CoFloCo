
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eq/1]
1. non_recursive  : [inf/2]
2. non_recursive  : [length/2]
3. non_recursive  : [take/3]
4. non_recursive  : [start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eq/1
1. SCC is completely evaluated into other SCCs
2. SCC is partially evaluated into length/2
3. SCC is partially evaluated into take/3
4. SCC is partially evaluated into start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eq/1 
* CE 6 is refined into CE [15] 
* CE 8 is refined into CE [16] 
* CE 7 is refined into CE [17] 


#### Refined cost equations eq/1 
* CE 15: eq(Out) = 1
     [Out=1] 
* CE 16: eq(Out) = 1
     [Out=0] 
* CE 17: eq(Out) = 1+ eq(Out)
     [] 

### Cost equations --> "Loop" of eq/1 
* CEs [17] --> Loop 11 
* CEs [15] --> Loop 12 
* CEs [16] --> Loop 13 

#### Loops of eq/1 
* Loop 11: eq(Out)->  eq(Out)
                  [] 
* Loop 12: eq(Out) [Out=1] 
* Loop 13: eq(Out) [Out=0] 

### Ranking functions of CR eq(Out) 

#### Partial ranking functions of CR eq(Out) 


### Resulting Chains:eq(Out) 
* [[11]]...
* [[11],13]
* [[11],12]
* [13]
* [12]


### Merging Chains  eq/1 into  External patterns of execution 
* [[13],[13,[11]]] --> 1 
* [[12],[12,[11]]] --> 2 
* [[[11]]] --> 3 


### Specialization of cost equations length/2 
* CE 14 is refined into CE [18] 
* CE 12 is refined into CE [19] 
* CE 13 is refined into CE [20] 


#### Refined cost equations length/2 
* CE 18: length(V,Out) = 0
     [V>=0,Out=0] 
* CE 19: length(V,Out) = 1
     [Out=1,V=2] 
* CE 20: length(V,Out) = 1
     [Out=2,V=1] 

### Cost equations --> "Loop" of length/2 
* CEs [18] --> Loop 14 
* CEs [19] --> Loop 15 
* CEs [20] --> Loop 16 

#### Loops of length/2 
* Loop 14: length(V,Out) [V>=0,Out=0] 
* Loop 15: length(V,Out) [Out=1,V=2] 
* Loop 16: length(V,Out) [Out=2,V=1] 

### Ranking functions of CR length(V,Out) 

#### Partial ranking functions of CR length(V,Out) 


### Resulting Chains:length(V,Out) 
* [16]
* [15]
* [14]


### Merging Chains  length/2 into  External patterns of execution 
* [[16]] --> 1 
* [[15]] --> 2 
* [[14]] --> 3 


### Specialization of cost equations take/3 
* CE 11 is refined into CE [21] 
* CE 10 is refined into CE [22] 
* CE 9 is refined into CE [23] 


#### Refined cost equations take/3 
* CE 21: take(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 22: take(V,V1,Out) = 1
     [Out=1,V1=1,V=2] 
* CE 23: take(V,V1,Out) = 1
     [V1>=0,Out=2,V=1] 

### Cost equations --> "Loop" of take/3 
* CEs [21] --> Loop 17 
* CEs [22] --> Loop 18 
* CEs [23] --> Loop 19 

#### Loops of take/3 
* Loop 17: take(V,V1,Out) [V1>=0,V>=0,Out=0] 
* Loop 18: take(V,V1,Out) [Out=1,V1=1,V=2] 
* Loop 19: take(V,V1,Out) [V1>=0,Out=2,V=1] 

### Ranking functions of CR take(V,V1,Out) 

#### Partial ranking functions of CR take(V,V1,Out) 


### Resulting Chains:take(V,V1,Out) 
* [19]
* [18]
* [17]


### Merging Chains  take/3 into  External patterns of execution 
* [[19]] --> 1 
* [[18]] --> 2 
* [[17]] --> 3 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [24,25,26] 
* CE 3 is refined into CE [27] 
* CE 4 is refined into CE [28,29,30] 
* CE 5 is refined into CE [31,32,33] 


#### Refined cost equations start/2 
* CE 24: start(V,V1) = 0+ eq(W1):1
     [W1=0] 
* CE 25: start(V,V1) = 0+ eq(W1):2
     [W1=1] 
* CE 26: start(V,V1) = 0+ eq(W1):3
     [] 
* CE 27: start(V,V1) = 1
     [V>=0] 
* CE 28: start(V,V1) = 0+ take(W1,V1,X1):1
     [V1>=0,X1=2,W1=1,V=1] 
* CE 29: start(V,V1) = 0+ take(W1,X1,Y1):2
     [Y1=1,X1=1,W1=2,V1=1,V=2] 
* CE 30: start(V,V1) = 0+ take(V,V1,W1):3
     [V1>=0,V>=0,W1=0] 
* CE 31: start(V,V1) = 0+ length(W1,X1):1
     [X1=2,W1=1,V=1] 
* CE 32: start(V,V1) = 0+ length(W1,X1):2
     [X1=1,W1=2,V=2] 
* CE 33: start(V,V1) = 0+ length(V,W1):3
     [V>=0,W1=0] 

### Cost equations --> "Loop" of start/2 
* CEs [24,25,27,28,29,30,31,32,33] --> Loop 20 
* CEs [26] --> Loop 21 

#### Loops of start/2 
* Loop 20: start(V,V1) [] 
* Loop 21: start(V,V1) [] 

### Ranking functions of CR start(V,V1) 

#### Partial ranking functions of CR start(V,V1) 


### Resulting Chains:start(V,V1) 
* [21]...
* [20]


### Merging Chains  start/2 into  External patterns of execution 
* [[20]] --> 1 
* [[21]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [11] 

 * loop 11:eq(Out) -> [eq(Out')] 
1
#### Cost of phase [11]:eq(Out) -> [eq(Out')] 
1*it(11)+0
#### Cost of phase [11]:eq(Out) -> [eq(Out')] 
1*it(11)+0
#### Cost of phase [11]:eq(Out) -> [eq(Out')] 
1*it(11)+0
#### Cost of chains of eq(Out):
* Chain [[11]]...: 1*it(11)+0
  with precondition: [] 

* Chain [[11],13]: 1*it(11)+1
  with precondition: [Out=0] 

* Chain [[11],12]: 1*it(11)+1
  with precondition: [Out=1] 

* Chain [13]: 1
  with precondition: [Out=0] 

* Chain [12]: 1
  with precondition: [Out=1] 


#### Cost of chains of length(V,Out):
* Chain [16]: 1
  with precondition: [V=1,Out=2] 

* Chain [15]: 1
  with precondition: [V=2,Out=1] 

* Chain [14]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of chains of take(V,V1,Out):
* Chain [19]: 1
  with precondition: [V=1,Out=2,V1>=0] 

* Chain [18]: 1
  with precondition: [V=2,V1=1,Out=1] 

* Chain [17]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of chains of start(V,V1):
* Chain [21]...: 1*s(3)+0
  with precondition: [] 

* Chain [20]: 1*aux(3)+0
  with precondition: [] 


Closed-form bounds of start(V,V1): 
-------------------------------------
* Chain [21]... with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [20] with precondition: [] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of start(V,V1): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 5 ms.
* Invariants computed in 7 ms.
   - Backward Invariants 4 ms.
   - Transitive Invariants 0 ms.
* Refinement performed in 16 ms.
* Termination proved in 0 ms.
* Upper bounds computed in 9 ms.
   - Equation cost structures 5 ms.
   - Phase cost structures 0 ms.
   - Chain cost structures 1 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 47 ms.


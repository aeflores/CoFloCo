
Preprocessing Cost Relations
=====================================
2. SCC does not have a single cut point : [fun1/3,fun/3]  
 Merged into fun1fun/3

#### Computed strongly connected components 
0. non_recursive  : [from/2]
1. non_recursive  : [activate/2]
3. non_recursive  : [pi/2]
4. recursive  : [plus/3]
5. recursive [non_tail] : [times/3]
6. non_recursive  : [square/2]
7. non_recursive  : [start/2]
2. recursive  : [fun1fun/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into from/2
1. SCC is partially evaluated into activate/2
3. SCC is partially evaluated into pi/2
4. SCC is partially evaluated into plus/3
5. SCC is partially evaluated into times/3
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into start/2
2. SCC is partially evaluated into fun1fun/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations from/2 
* CE 9 is refined into CE [22] 
* CE 10 is refined into CE [23] 


#### Refined cost equations from/2 
* CE 22: from(V,Out) = 1
     [V>=0,2*V+3=Out] 
* CE 23: from(V,Out) = 1
     [V>=0,V+1=Out] 

### Cost equations --> "Loop" of from/2 
* CEs [22] --> Loop 14 
* CEs [23] --> Loop 15 

#### Loops of from/2 
* Loop 14: from(V,Out) [V>=0,2*V+3=Out] 
* Loop 15: from(V,Out) [V>=0,V+1=Out] 

### Ranking functions of CR from(V,Out) 

#### Partial ranking functions of CR from(V,Out) 


### Resulting Chains:from(V,Out) 
* [15]
* [14]


### Merging Chains  from/2 into  External patterns of execution 
* [[15]] --> 1 
* [[14]] --> 2 


### Specialization of cost equations activate/2 
* CE 20 is refined into CE [24,25] 
* CE 21 is refined into CE [26] 


#### Refined cost equations activate/2 
* CE 24: activate(A,A) = 1+ from(B,A):1
     [A>=1,A=B+1] 
* CE 25: activate(V,Out) = 1+ from(W,Out):2
     [Out>=3,Out=2*W+3,Out=2*V+1] 
* CE 26: activate(A,A) = 1
     [A>=0] 

### Cost equations --> "Loop" of activate/2 
* CEs [25] --> Loop 16 
* CEs [24,26] --> Loop 17 

#### Loops of activate/2 
* Loop 16: activate(V,Out) [V>=1,2*V+1=Out] 
* Loop 17: activate(A,A) [A>=0] 

### Ranking functions of CR activate(V,Out) 

#### Partial ranking functions of CR activate(V,Out) 


### Resulting Chains:activate(V,Out) 
* [17]
* [16]


### Merging Chains  activate/2 into  External patterns of execution 
* [[17]] --> 1 
* [[16]] --> 2 


### Specialization of cost equations fun1fun/3 
* CE 11 is refined into CE [27] 
* CE 14 is refined into CE [28] 
* CE 12 is refined into CE [29,30] 
* CE 13 is refined into CE [31,32] 


#### Refined cost equations fun1fun/3 
* CE 27: fun1fun(A,B,C) = 1
     [B>=0,C=0,A=0] 
* CE 28: fun1fun(A,B,C) = 0
     [B>=0,A>=0,C=0] 
* CE 29: fun1fun(A,B,C) = 1+ activate(D,D):1+ fun1fun(A,B,C)
     [B>=D+1,D>=0,A>=1] 
* CE 30: fun1fun(A,B,C) = 1+ activate(D,E):2+ fun1fun(A,F,C)
     [2*B>=E+1,E>=3,A>=1,E+2*B+1=2*F,E=2*D+1] 
* CE 31: fun1fun(A,B,C) = 1+ activate(D,D):1+ fun1fun(E,D,F)
     [B+F>=C+D,C>=F+2,E>=0,D>=0,E+1=A] 
* CE 32: fun1fun(A,B,C) = 1+ activate(D,E):2+ fun1fun(F,E,G)
     [2*B+2*G+1>=2*C+E,C>=G+2,F>=0,E>=3,F+1=A,E=2*D+1] 

### Cost equations --> "Loop" of fun1fun/3 
* CEs [30] --> Loop 18 
* CEs [29] --> Loop 19 
* CEs [32] --> Loop 20 
* CEs [31] --> Loop 21 
* CEs [27,28] --> Loop 22 

#### Loops of fun1fun/3 
* Loop 18: fun1fun(A,B,C)->  fun1fun(A,A',C)
                  [2*B>=A',A'>=B+2,A>=1] 
* Loop 19: fun1fun(A,B,C)->  fun1fun(A,B,C)
                  [B>=1,A>=1] 
* Loop 20: fun1fun(A,B,C)->  fun1fun(A',B',C')
                  [2*B+2*C'+1>=2*C+B',C>=C'+2,B'>=3,A>=1,A=A'+1] 
* Loop 21: fun1fun(A,B,C)->  fun1fun(A',B',C')
                  [B+C'>=C+B',C>=C'+2,B'>=0,A>=1,A=A'+1] 
* Loop 22: fun1fun(A,B,C) [B>=0,A>=0,C=0] 

### Ranking functions of CR fun1fun(A,B,C) 

#### Partial ranking functions of CR fun1fun(A,B,C) 
* Partial RF of phase [18,19,20,21]:
  - RF of loop [20:1,21:1]:
    A
  - RF of loop [21:1]:
    B/2-1/2 depends on loops [18:1,20:1] 


### Resulting Chains:fun1fun(A,B,C) 
* [[18,19,20,21]]...
* [[18,19,20,21],22]
* [22]


### Merging Chains  fun1fun/3 into  External patterns of execution 
* [[22]] --> 1 
* [[22,[18,19,20,21]]] --> 2 
* [[[18,19,20,21]]] --> 3 


### Specialization of cost equations pi/2 
* CE 15 is refined into CE [33,34,35,36,37,38] 


#### Refined cost equations pi/2 
* CE 33: pi(V,Out) = 1+ from(W,X):1+ fun1fun(V,Y,Z):1
     [V>=0,Z=0,Y=1,X=1,W=0,Out=0] 
* CE 34: pi(V,Out) = 1+ from(W,X):1+ fun1fun(V,Y,Out):2
     [Out>=0,V>=1,Y=1,X=1,W=0] 
* CE 35: pi(V,Out) = 1+ from(W,X):1+ fun1fun(V,Y,Out):3
     [V>=1,Y=1,X=1,W=0] 
* CE 36: pi(V,Out) = 1+ from(W,X):2+ fun1fun(V,Y,Z):1
     [V>=0,Z=0,Y=3,X=3,W=0,Out=0] 
* CE 37: pi(V,Out) = 1+ from(W,X):2+ fun1fun(V,Y,Out):2
     [Out>=0,V>=1,Y=3,X=3,W=0] 
* CE 38: pi(V,Out) = 1+ from(W,X):2+ fun1fun(V,Y,Out):3
     [V>=1,Y=3,X=3,W=0] 

### Cost equations --> "Loop" of pi/2 
* CEs [35,38] --> Loop 23 
* CEs [34,37] --> Loop 24 
* CEs [33,36] --> Loop 25 

#### Loops of pi/2 
* Loop 23: pi(V,Out) [V>=1] 
* Loop 24: pi(V,Out) [Out>=0,V>=1] 
* Loop 25: pi(V,Out) [V>=0,Out=0] 

### Ranking functions of CR pi(V,Out) 

#### Partial ranking functions of CR pi(V,Out) 


### Resulting Chains:pi(V,Out) 
* [25]
* [24]
* [23]...


### Merging Chains  pi/2 into  External patterns of execution 
* [[25]] --> 1 
* [[24]] --> 2 
* [[23]] --> 3 


### Specialization of cost equations plus/3 
* CE 17 is refined into CE [39] 
* CE 16 is refined into CE [40] 


#### Refined cost equations plus/3 
* CE 39: plus(V,V1,Out) = 1+ plus(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 40: plus(A,B,B) = 1
     [B>=0,A=0] 

### Cost equations --> "Loop" of plus/3 
* CEs [40] --> Loop 26 
* CEs [39] --> Loop 27 

#### Loops of plus/3 
* Loop 26: plus(A,B,B) [B>=0,A=0] 
* Loop 27: plus(V,V1,Out)->  plus(V',V1,Out')
                  [V'>=0,V1>=0,Out=Out'+1,V'+1=V] 

### Ranking functions of CR plus(V,V1,Out) 
* RF of phase [27]: [V]

#### Partial ranking functions of CR plus(V,V1,Out) 
* Partial RF of phase [27]:
  - RF of loop [27:1]:
    V


### Resulting Chains:plus(V,V1,Out) 
* [[27],26]
* [26]


### Merging Chains  plus/3 into  External patterns of execution 
* [[26]] --> 1 
* [[26,[27]]] --> 2 


### Specialization of cost equations times/3 
* CE 19 is refined into CE [41,42] 
* CE 18 is refined into CE [43] 


#### Refined cost equations times/3 
* CE 41: times(V,V1,Out) = 1+ times(W1,X1,Out)+ plus(Y1,Out,Out):1
     [W1>=0,Out>=0,W1+1=V,X1=0,Y1=0,V1=0] 
* CE 42: times(V,V1,Out) = 1+ times(W1,V1,X1)+ plus(V1,Y1,Out):2
     [Out>=V1,W1>=0,V1>=1,Out=V1+X1,Out=V1+Y1,W1+1=V] 
* CE 43: times(V,V1,Out) = 1
     [V1>=0,Out=0,V=0] 

### Cost equations --> "Loop" of times/3 
* CEs [43] --> Loop 28 
* CEs [42] --> Loop 29 
* CEs [41] --> Loop 30 

#### Loops of times/3 
* Loop 28: times(V,V1,Out) [V1>=0,Out=0,V=0] 
* Loop 29: times(V,V1,Out)->  times(V',V1,Out')
                  [Out>=V1,V1>=1,V>=1,V1+Out'=Out,V=V'+1] 
* Loop 30: times(V,V1,Out)->  times(V',V1',Out)
                  [Out>=0,V>=1,V=V'+1,V1'=0,V1=0] 

### Ranking functions of CR times(V,V1,Out) 
* RF of phase [29]: [V]
* RF of phase [30]: [V]

#### Partial ranking functions of CR times(V,V1,Out) 
* Partial RF of phase [29]:
  - RF of loop [29:1]:
    V
* Partial RF of phase [30]:
  - RF of loop [30:1]:
    V


### Resulting Chains:times(V,V1,Out) 
* [[30],28]
* [[29],28]
* [28]


### Merging Chains  times/3 into  External patterns of execution 
* [[28]] --> 1 
* [[28,[30]]] --> 2 
* [[28,[29]]] --> 3 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [44,45] 
* CE 3 is refined into CE [46,47,48] 
* CE 4 is refined into CE [49,50,51] 
* CE 5 is refined into CE [52,53] 
* CE 6 is refined into CE [54,55,56] 
* CE 7 is refined into CE [57,58] 
* CE 8 is refined into CE [59,60] 


#### Refined cost equations start/2 
* CE 44: start(V,V1) = 0+ from(W1,X1):1
     [X1>=1,X1=W1+1,X1=V+1] 
* CE 45: start(V,V1) = 0+ from(W1,X1):2
     [X1>=3,X1=2*W1+3,X1=2*V+3] 
* CE 46: start(V,V1) = 0+ fun1fun(V,V1,W1):1
     [V1>=0,V>=0,W1=0] 
* CE 47: start(V,V1) = 0+ fun1fun(V,V1,W1):2
     [W1>=0,V1>=1,V>=1] 
* CE 48: start(V,V1) = 0+ fun1fun(V,V1,W1):3
     [V1>=1,V>=1] 
* CE 49: start(V,V1) = 0+ pi(V,W1):1
     [V>=0,W1=0] 
* CE 50: start(V,V1) = 0+ pi(V,W1):2
     [W1>=0,V>=1] 
* CE 51: start(V,V1) = 0+ pi(V,W1):3
     [V>=1] 
* CE 52: start(V,V1) = 0+ plus(W1,V1,V1):1
     [V1>=0,W1=0,V=0] 
* CE 53: start(V,V1) = 0+ plus(V,W1,X1):2
     [X1>=V,V>=1,X1=V+W1,X1=V+V1] 
* CE 54: start(V,V1) = 0+ times(W1,V1,X1):1
     [V1>=0,X1=0,W1=0,V=0] 
* CE 55: start(V,V1) = 0+ times(V,W1,X1):2
     [V>=1,X1=0,W1=0,V1=0] 
* CE 56: start(V,V1) = 0+ times(V,V1,W1):3
     [W1+1>=V+V1,V1>=1,V>=1] 
* CE 57: start(V,V1) = 1+ times(W1,X1,Y1):1
     [Y1=0,X1=0,W1=0,V=0] 
* CE 58: start(V,V1) = 1+ times(V,V,W1):3
     [W1+1>=2*V,V>=1] 
* CE 59: start(V,V1) = 0+ activate(V,V):1
     [V>=0] 
* CE 60: start(V,V1) = 0+ activate(W1,X1):2
     [X1>=3,X1=2*W1+1,X1=2*V+1] 

### Cost equations --> "Loop" of start/2 
* CEs [55] --> Loop 31 
* CEs [44,45,46,47,49,50,52,53,54,56,57,58,59,60] --> Loop 32 
* CEs [48,51] --> Loop 33 

#### Loops of start/2 
* Loop 31: start(V,V1) [V>=1,V1=0] 
* Loop 32: start(V,V1) [V>=0] 
* Loop 33: start(V,V1) [V>=1] 

### Ranking functions of CR start(V,V1) 

#### Partial ranking functions of CR start(V,V1) 


### Resulting Chains:start(V,V1) 
* [33]...
* [32]
* [31]


### Merging Chains  start/2 into  External patterns of execution 
* [[31],[32]] --> 1 
* [[33]] --> 2 


Computing Bounds
=====================================

#### Cost of chains of from(V,Out):
* Chain [15]: 1
  with precondition: [V+1=Out,V>=0] 

* Chain [14]: 1
  with precondition: [2*V+3=Out,V>=0] 


#### Cost of chains of activate(V,Out):
* Chain [17]: 2
  with precondition: [V=Out,V>=0] 

* Chain [16]: 2
  with precondition: [2*V+1=Out,V>=1] 


#### Cost of loops [18,19,20,21] 

 * loop 18:fun1fun(A,B,C) -> [fun1fun(A',B',C')] 
3
 * loop 19:fun1fun(A,B,C) -> [fun1fun(A',B',C')] 
3
 * loop 20:fun1fun(A,B,C) -> [fun1fun(A',B',C')] 
3
 * loop 21:fun1fun(A,B,C) -> [fun1fun(A',B',C')] 
3
#### Cost of phase [18,19,20,21]:fun1fun(A,B,C) -> [fun1fun(A',B',C')] 
6*it(18)+6*it(20)+0
  Such that:aux(11) =< A
aux(12) =< A-A'
it(20) =< aux(11)
it(20) =< aux(12)

#### Cost of phase [18,19,20,21]:fun1fun(A,B,C) -> [fun1fun(A',B',C')] 
6*it(18)+6*it(20)+0
  Such that:aux(11) =< A
aux(12) =< A-A'
it(20) =< aux(11)
it(20) =< aux(12)

#### Cost of chains of fun1fun(A,B,C):
* Chain [[18,19,20,21]]...: 6*it(18)+6*it(20)+0
  Such that:aux(13) =< A
it(20) =< aux(13)

  with precondition: [B>=1,A>=1] 

* Chain [[18,19,20,21],22]: 6*it(18)+6*it(20)+1
  Such that:aux(14) =< A
it(20) =< aux(14)

  with precondition: [A>=1,B>=1,C>=0] 

* Chain [22]: 1
  with precondition: [C=0,A>=0,B>=0] 


#### Cost of chains of pi(V,Out):
* Chain [25]: 3
  with precondition: [Out=0,V>=0] 

* Chain [24]: 12*s(2)+12*s(3)+3
  Such that:aux(15) =< V
s(2) =< aux(15)

  with precondition: [V>=1,Out>=0] 

* Chain [23]...: 12*s(8)+12*s(9)+2
  Such that:aux(16) =< V
s(8) =< aux(16)

  with precondition: [V>=1] 


#### Cost of loops [27] 

 * loop 27:plus(V,V1,Out) -> [plus(V',V1',Out')] 
1
#### Cost of phase [27]:plus(V,V1,Out) -> [plus(V',V1',Out')] 
1*it(27)+0
  Such that:it(27) =< V
it(27) =< V-V'

#### Cost of chains of plus(V,V1,Out):
* Chain [[27],26]: 1*it(27)+1
  Such that:it(27) =< -V1+Out

  with precondition: [V+V1=Out,V>=1,V1>=0] 

* Chain [26]: 1
  with precondition: [V=0,V1=Out,V1>=0] 


#### Cost of loops [30] 

 * loop 30:times(V,V1,Out) -> [times(V',V1',Out')] 
2
#### Cost of phase [30]:times(V,V1,Out) -> [times(V',V1',Out')] 
2*it(30)+0
  Such that:it(30) =< V
it(30) =< V-V'

#### Cost of loops [29] 

 * loop 29:times(V,V1,Out) -> [times(V',V1',Out')] 
1*s(14)+2
  Such that:s(14) =< V1'

#### Cost of phase [29]:times(V,V1,Out) -> [times(V',V1',Out')] 
2*it(29)+1*s(15)+0
  Such that:it(29) =< V
it(29) =< V-V'
aux(17) =< V1
s(15) =< it(29)*aux(17)

#### Cost of chains of times(V,V1,Out):
* Chain [[30],28]: 2*it(30)+1
  Such that:it(30) =< V

  with precondition: [V1=0,Out=0,V>=1] 

* Chain [[29],28]: 2*it(29)+1*s(15)+1
  Such that:it(29) =< V
aux(17) =< V1
s(15) =< it(29)*aux(17)

  with precondition: [V>=1,V1>=1,Out+1>=V+V1] 

* Chain [28]: 1
  with precondition: [V=0,Out=0,V1>=0] 


#### Cost of chains of start(V,V1):
* Chain [33]...: 18*s(17)+18*s(18)+2
  Such that:aux(18) =< V
s(17) =< aux(18)

  with precondition: [V>=1] 

* Chain [32]: 23*s(23)+18*s(24)+1*s(31)+1*s(34)+3
  Such that:s(30) =< V1
aux(20) =< V
s(23) =< aux(20)
s(34) =< s(23)*aux(20)
s(31) =< s(23)*s(30)

  with precondition: [V>=0] 

* Chain [31]: 2*s(35)+1
  Such that:s(35) =< V

  with precondition: [V1=0,V>=1] 


Closed-form bounds of start(V,V1): 
-------------------------------------
* Chain [33]... with precondition: [V>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [32] with precondition: [V>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [31] with precondition: [V1=0,V>=1] 
    - Upper bound: 2*V+1 
    - Complexity: n 

### Maximum cost of start(V,V1): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 53 ms.
* Invariants computed in 111 ms.
   - Backward Invariants 43 ms.
   - Transitive Invariants 35 ms.
* Refinement performed in 216 ms.
* Termination proved in 29 ms.
* Upper bounds computed in 242 ms.
   - Equation cost structures 81 ms.
   - Phase cost structures 125 ms.
   - Chain cost structures 44 ms.
   - Solving cost expressions 2 ms.
* Total analysis performed in 738 ms.


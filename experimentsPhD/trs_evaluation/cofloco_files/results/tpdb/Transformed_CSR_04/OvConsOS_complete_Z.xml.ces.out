
Preprocessing Cost Relations
=====================================
7. SCC does not have a single cut point : [isNatKind/2,activate/2]  
 Merged into isNatKindactivate/2
14. SCC does not have a single cut point : [isNat/2,isNatIList/2,isNatList/2]  
 Merged into isNatisNatIListisNatList/2

#### Computed strongly connected components 
0. non_recursive  : [cons/3]
1. non_recursive  : [fun/1]
2. non_recursive  : [length/2]
3. non_recursive  : [nil/1]
4. non_recursive  : [s/2]
5. non_recursive  : [take/3]
6. non_recursive  : [zeros/1]
8. non_recursive  : [fun2/2]
9. non_recursive  : [fun8/2]
10. non_recursive  : [fun13/2]
11. non_recursive  : [fun18/2]
12. non_recursive  : [fun14/2]
13. non_recursive  : [fun15/2]
15. non_recursive  : [fun17/2]
16. non_recursive  : [fun3/5]
17. non_recursive  : [fun6/3]
18. non_recursive  : [start/4]
7. recursive [multiple] : [and/3,isNatIListKind/2,isNatKindactivate/2]
14. recursive [non_tail,multiple] : [fun1/3,fun10/4,fun11/3,fun12/4,fun16/3,fun4/4,fun5/3,fun7/3,fun9/3,isNatisNatIListisNatList/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is completely evaluated into other SCCs
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into zeros/1
8. SCC is partially evaluated into fun2/2
9. SCC is partially evaluated into fun8/2
10. SCC is partially evaluated into fun13/2
11. SCC is partially evaluated into fun18/2
12. SCC is partially evaluated into fun14/2
13. SCC is partially evaluated into fun15/2
15. SCC is partially evaluated into fun17/2
16. SCC is partially evaluated into fun3/5
17. SCC is partially evaluated into fun6/3
18. SCC is partially evaluated into start/4
7. SCC is partially evaluated into isNatKindactivate/2
14. SCC is partially evaluated into isNatisNatIListisNatList/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations zeros/1 
* CE 87 is refined into CE [95] 
* CE 88 is refined into CE [96] 


#### Refined cost equations zeros/1 
* CE 95: zeros(Out) = 3
     [Out=3] 
* CE 96: zeros(Out) = 1
     [Out=2] 

### Cost equations --> "Loop" of zeros/1 
* CEs [95] --> Loop 41 
* CEs [96] --> Loop 42 

#### Loops of zeros/1 
* Loop 41: zeros(Out) [Out=3] 
* Loop 42: zeros(Out) [Out=2] 

### Ranking functions of CR zeros(Out) 

#### Partial ranking functions of CR zeros(Out) 


### Resulting Chains:zeros(Out) 
* [42]
* [41]


### Merging Chains  zeros/1 into  External patterns of execution 
* [[42]] --> 1 
* [[41]] --> 2 


### Specialization of cost equations isNatKindactivate/2 
* CE 39 is refined into CE [97] 
* CE 32 is refined into CE [98] 
* CE 44 is refined into CE [99,100] 
* CE 38 is refined into CE [101] 
* CE 30 is refined into CE [102] 
* CE 42 is refined into CE [103] 
* CE 43 is refined into CE [104] 
* CE 37 is refined into CE [105] 
* CE 41 is refined into CE [106] 
* CE 29 is refined into CE [107] 
* CE 31 is refined into CE [108] 
* CE 40 is refined into CE [109] 
* CE 36 is refined into CE [110] 
* CE 35 is refined into CE [111] 
* CE 34 is refined into CE [112] 
* CE 33 is refined into CE [113] 


#### Refined cost equations isNatKindactivate/2 
* CE 97: isNatKindactivate(A,B) = 1
     [A>=0,A+1=B] 
* CE 98: isNatKindactivate(A,B) = 2
     [B=3,A=2] 
* CE 99: isNatKindactivate(A,B) = 1+ zeros(C):1
     [C=2,B=2,A=2] 
* CE 100: isNatKindactivate(A,B) = 1+ zeros(C):2
     [C=3,B=3,A=2] 
* CE 101: isNatKindactivate(A,B) = 1
     [B=3,A=0] 
* CE 102: isNatKindactivate(A,A) = 2
     [A>=1] 
* CE 103: isNatKindactivate(A,B) = 2
     [B=0,A=0] 
* CE 104: isNatKindactivate(A,A) = 1
     [A>=0] 
* CE 105: isNatKindactivate(A,B) = 2+ isNatKindactivate(C,B)
     [A>=4,A=C+4] 
* CE 106: isNatKindactivate(A,B) = 1+ isNatKindactivate(C,B)
     [C>=0,C+1=A] 
* CE 107: isNatKindactivate(A,B) = 2+ isNatKindactivate(C,D)
     [D>=0,C>=0,D+1=B,C+1=A] 
* CE 108: isNatKindactivate(A,B) = 2+ isNatKindactivate(C,D)
     [C>=0,C+1=A,D=1,B=3] 
* CE 109: isNatKindactivate(A,B) = 1+ isNatKindactivate(C,D)+ isNatKindactivate(D,B)
     [C>=0,C+1=A] 
* CE 110: isNatKindactivate(A,B) = 3+ isNatKindactivate(C,D)+ isNatKindactivate(D,E)+ isNatKindactivate(F,G)
     [A>=F+2,G+1>=0,F>=0,E>=0,E+G+2=B,C+F+2=A] 
* CE 111: isNatKindactivate(A,B) = 3+ isNatKindactivate(C,D)+ isNatKindactivate(E,F)+ isNatKindactivate(F,G)+ isNatKindactivate(H,I)
     [I+1>=0,H>=0,G>=0,E>=0,C>=0,E+H+1=D,G+I+2=B,C+1=A] 
* CE 112: isNatKindactivate(A,B) = 3+ isNatKindactivate(C,D)+ isNatKindactivate(D,E)+ isNatKindactivate(F,G)+ isNatKindactivate(H,B)
     [A>=F+2,H>=0,F>=0,C+F+2=A,H=G+1,E=3] 
* CE 113: isNatKindactivate(A,B) = 3+ isNatKindactivate(C,D)+ isNatKindactivate(E,F)+ isNatKindactivate(F,G)+ isNatKindactivate(H,I)+ isNatKindactivate(J,B)
     [J>=0,H>=0,E>=0,C>=0,E+H+1=D,J=I+1,C+1=A,G=3] 

### Cost equations --> "Loop" of isNatKindactivate/2 
* CEs [113] --> Loop 43 
* CEs [111] --> Loop 44 
* CEs [112] --> Loop 45 
* CEs [110] --> Loop 46 
* CEs [109] --> Loop 47 
* CEs [105] --> Loop 48 
* CEs [106] --> Loop 49 
* CEs [107] --> Loop 50 
* CEs [108] --> Loop 51 
* CEs [97,98,100] --> Loop 52 
* CEs [99] --> Loop 53 
* CEs [101] --> Loop 54 
* CEs [102,103,104] --> Loop 55 

#### Loops of isNatKindactivate/2 
* Loop 43: isNatKindactivate(A,B)->  isNatKindactivate(A',B')  isNatKindactivate(A'2,B'2)  isNatKindactivate(B'2,A'3)  isNatKindactivate(A'4,B'4)  isNatKindactivate(A'5,B)
                  [A'5>=0,A'4>=0,A'2>=0,A'>=0,A'2+A'4+1=B',A'5=B'4+1,A'+1=A,A'3=3] 
* Loop 44: isNatKindactivate(A,B)->  isNatKindactivate(A',B')  isNatKindactivate(A'2,B'2)  isNatKindactivate(B'2,A'3)  isNatKindactivate(A'4,B'4)
                  [B>=A'3+1,B'>=A'2+1,A'3>=0,A'2>=0,A>=1,A'2+A'4+1=B',A'3+B'4+2=B,A=A'+1] 
* Loop 45: isNatKindactivate(A,B)->  isNatKindactivate(A',B')  isNatKindactivate(B',A'2)  isNatKindactivate(A'3,B'3)  isNatKindactivate(A'4,B)
                  [A>=A'+2,B'3+1>=0,A'>=0,A'+A'3+2=A,B'3+1=A'4,A'2=3] 
* Loop 46: isNatKindactivate(A,B)->  isNatKindactivate(A',B')  isNatKindactivate(B',A'2)  isNatKindactivate(A'3,B'3)
                  [A>=A'3+2,B'3+1>=0,A'3>=0,A'2>=0,A=A'+A'3+2,A'2+B'3+2=B] 
* Loop 47: isNatKindactivate(A,B)->  isNatKindactivate(A',B')  isNatKindactivate(B',B)
                  [A'>=0,A'+1=A] 
* Loop 48: isNatKindactivate(A,B)->  isNatKindactivate(A',B)
                  [A>=4,A=A'+4] 
* Loop 49: isNatKindactivate(A,B)->  isNatKindactivate(A',B)
                  [A>=1,A=A'+1] 
* Loop 50: isNatKindactivate(A,B)->  isNatKindactivate(A',B')
                  [B>=1,A>=1,B=B'+1,A=A'+1] 
* Loop 51: isNatKindactivate(A,B)->  isNatKindactivate(A',B')
                  [A>=1,A=A'+1,B'=1,B=3] 
* Loop 52: isNatKindactivate(A,B) [A>=0,A+1=B] 
* Loop 53: isNatKindactivate(A,B) [B=2,A=2] 
* Loop 54: isNatKindactivate(A,B) [B=3,A=0] 
* Loop 55: isNatKindactivate(A,A) [A>=0] 

### Ranking functions of CR isNatKindactivate(A,B) 

#### Partial ranking functions of CR isNatKindactivate(A,B) 
* Partial RF of phase [43,44,45,46,47,48,49,50,51]:
  - RF of loop [43:1,44:1,47:1,49:1,50:1,51:1]:
    A depends on loops [43:2,43:3,43:4,43:5,44:2,44:3,44:4,45:2,45:4,46:2,47:2] 
  - RF of loop [45:1,45:3,46:1,46:3]:
    A-1 depends on loops [43:2,43:3,43:4,43:5,44:2,44:3,44:4,45:2,45:4,46:2,47:2] 
  - RF of loop [48:1]:
    A-3 depends on loops [43:2,43:3,43:4,43:5,44:2,44:3,44:4,45:2,45:4,46:2,47:2] 


### Resulting Chains:isNatKindactivate(A,B) 
* [multiple([43,44,45,46,47,48,49,50,51],[[],[55],[54],[53],[52]])]...
* [55]
* [54]
* [53]
* [52]


### Merging Chains  isNatKindactivate/2 into  External patterns of execution 
* [[54]] --> 1 
* [[53],[55]] --> 2 
* [[52]] --> 3 
* [[multiple([43,44,45,46,47,48,49,50,51],[[],[55],[54],[53],[52]])]] --> 4 


### Specialization of cost equations fun2/2 
* CE 80 is refined into CE [114] 
* CE 79 is refined into CE [115] 


#### Refined cost equations fun2/2 
* CE 114: fun2(V3,Out) = 0
     [V3>=0,Out=0] 
* CE 115: fun2(V3,Out) = 1
     [Out=3,V3=3] 

### Cost equations --> "Loop" of fun2/2 
* CEs [114] --> Loop 56 
* CEs [115] --> Loop 57 

#### Loops of fun2/2 
* Loop 56: fun2(V3,Out) [V3>=0,Out=0] 
* Loop 57: fun2(V3,Out) [Out=3,V3=3] 

### Ranking functions of CR fun2(V3,Out) 

#### Partial ranking functions of CR fun2(V3,Out) 


### Resulting Chains:fun2(V3,Out) 
* [57]
* [56]


### Merging Chains  fun2/2 into  External patterns of execution 
* [[57]] --> 1 
* [[56]] --> 2 


### Specialization of cost equations fun8/2 
* CE 84 is refined into CE [116] 
* CE 83 is refined into CE [117] 


#### Refined cost equations fun8/2 
* CE 116: fun8(V3,Out) = 0
     [V3>=0,Out=0] 
* CE 117: fun8(V3,Out) = 1
     [Out=3,V3=3] 

### Cost equations --> "Loop" of fun8/2 
* CEs [116] --> Loop 58 
* CEs [117] --> Loop 59 

#### Loops of fun8/2 
* Loop 58: fun8(V3,Out) [V3>=0,Out=0] 
* Loop 59: fun8(V3,Out) [Out=3,V3=3] 

### Ranking functions of CR fun8(V3,Out) 

#### Partial ranking functions of CR fun8(V3,Out) 


### Resulting Chains:fun8(V3,Out) 
* [59]
* [58]


### Merging Chains  fun8/2 into  External patterns of execution 
* [[59]] --> 1 
* [[58]] --> 2 


### Specialization of cost equations fun13/2 
* CE 86 is refined into CE [118] 
* CE 85 is refined into CE [119] 


#### Refined cost equations fun13/2 
* CE 118: fun13(V3,Out) = 0
     [V3>=0,Out=0] 
* CE 119: fun13(V3,Out) = 1
     [Out=3,V3=3] 

### Cost equations --> "Loop" of fun13/2 
* CEs [118] --> Loop 60 
* CEs [119] --> Loop 61 

#### Loops of fun13/2 
* Loop 60: fun13(V3,Out) [V3>=0,Out=0] 
* Loop 61: fun13(V3,Out) [Out=3,V3=3] 

### Ranking functions of CR fun13(V3,Out) 

#### Partial ranking functions of CR fun13(V3,Out) 


### Resulting Chains:fun13(V3,Out) 
* [61]
* [60]


### Merging Chains  fun13/2 into  External patterns of execution 
* [[61]] --> 1 
* [[60]] --> 2 


### Specialization of cost equations fun18/2 
* CE 76 is refined into CE [120] 
* CE 75 is refined into CE [121] 


#### Refined cost equations fun18/2 
* CE 120: fun18(V3,Out) = 0
     [V3>=0,Out=0] 
* CE 121: fun18(V3,Out) = 1
     [Out=3,V3=3] 

### Cost equations --> "Loop" of fun18/2 
* CEs [120] --> Loop 62 
* CEs [121] --> Loop 63 

#### Loops of fun18/2 
* Loop 62: fun18(V3,Out) [V3>=0,Out=0] 
* Loop 63: fun18(V3,Out) [Out=3,V3=3] 

### Ranking functions of CR fun18(V3,Out) 

#### Partial ranking functions of CR fun18(V3,Out) 


### Resulting Chains:fun18(V3,Out) 
* [63]
* [62]


### Merging Chains  fun18/2 into  External patterns of execution 
* [[63]] --> 1 
* [[62]] --> 2 


### Specialization of cost equations fun14/2 
* CE 78 is refined into CE [122] 
* CE 77 is refined into CE [123] 


#### Refined cost equations fun14/2 
* CE 122: fun14(V3,Out) = 0
     [V3>=0,Out=0] 
* CE 123: fun14(V3,Out) = 1
     [Out=3,V3=3] 

### Cost equations --> "Loop" of fun14/2 
* CEs [122] --> Loop 64 
* CEs [123] --> Loop 65 

#### Loops of fun14/2 
* Loop 64: fun14(V3,Out) [V3>=0,Out=0] 
* Loop 65: fun14(V3,Out) [Out=3,V3=3] 

### Ranking functions of CR fun14(V3,Out) 

#### Partial ranking functions of CR fun14(V3,Out) 


### Resulting Chains:fun14(V3,Out) 
* [65]
* [64]


### Merging Chains  fun14/2 into  External patterns of execution 
* [[65]] --> 1 
* [[64]] --> 2 


### Specialization of cost equations fun15/2 
* CE 82 is refined into CE [124] 
* CE 81 is refined into CE [125] 


#### Refined cost equations fun15/2 
* CE 124: fun15(V3,Out) = 0
     [V3>=0,Out=0] 
* CE 125: fun15(V3,Out) = 1
     [Out=3,V3=3] 

### Cost equations --> "Loop" of fun15/2 
* CEs [124] --> Loop 66 
* CEs [125] --> Loop 67 

#### Loops of fun15/2 
* Loop 66: fun15(V3,Out) [V3>=0,Out=0] 
* Loop 67: fun15(V3,Out) [Out=3,V3=3] 

### Ranking functions of CR fun15(V3,Out) 

#### Partial ranking functions of CR fun15(V3,Out) 


### Resulting Chains:fun15(V3,Out) 
* [67]
* [66]


### Merging Chains  fun15/2 into  External patterns of execution 
* [[67]] --> 1 
* [[66]] --> 2 


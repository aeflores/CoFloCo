
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [add/3]
1. recursive  : [and/3]
2. recursive  : [cons/3]
3. recursive  : [first/3]
4. recursive  : [from/2]
5. recursive  : [if/4]
6. non_recursive  : [proper/2]
7. recursive  : [s/2]
8. recursive  : [top/2]
9. non_recursive  : [start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into add/3
1. SCC is partially evaluated into and/3
2. SCC is partially evaluated into cons/3
3. SCC is partially evaluated into first/3
4. SCC is partially evaluated into from/2
5. SCC is partially evaluated into if/4
6. SCC is partially evaluated into proper/2
7. SCC is partially evaluated into s/2
8. SCC is partially evaluated into top/2
9. SCC is partially evaluated into start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations add/3 
* CE 18 is refined into CE [38] 
* CE 17 is refined into CE [39] 
* CE 16 is refined into CE [40] 


#### Refined cost equations add/3 
* CE 38: add(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 39: add(V,V1,Out) = 1+ add(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 40: add(V,V1,Out) = 1+ add(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of add/3 
* CEs [39] --> Loop 28 
* CEs [40] --> Loop 29 
* CEs [38] --> Loop 30 

#### Loops of add/3 
* Loop 28: add(V,V1,Out)->  add(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 29: add(V,V1,Out)->  add(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 30: add(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR add(V,V1,Out) 
* RF of phase [28,29]: [V]

#### Partial ranking functions of CR add(V,V1,Out) 
* Partial RF of phase [28,29]:
  - RF of loop [28:1,29:1]:
    V
  - RF of loop [29:1]:
    V1


### Resulting Chains:add(V,V1,Out) 
* [[28,29],30]
* [30]


### Merging Chains  add/3 into  External patterns of execution 
* [[30]] --> 1 
* [[30,[28,29]]] --> 2 


### Specialization of cost equations and/3 
* CE 28 is refined into CE [41] 
* CE 26 is refined into CE [42] 
* CE 27 is refined into CE [43] 


#### Refined cost equations and/3 
* CE 41: and(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 42: and(V,V1,Out) = 1+ and(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 43: and(V,V1,Out) = 1+ and(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of and/3 
* CEs [42] --> Loop 31 
* CEs [43] --> Loop 32 
* CEs [41] --> Loop 33 

#### Loops of and/3 
* Loop 31: and(V,V1,Out)->  and(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 32: and(V,V1,Out)->  and(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 33: and(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR and(V,V1,Out) 
* RF of phase [31,32]: [V]

#### Partial ranking functions of CR and(V,V1,Out) 
* Partial RF of phase [31,32]:
  - RF of loop [31:1,32:1]:
    V
  - RF of loop [32:1]:
    V1


### Resulting Chains:and(V,V1,Out) 
* [[31,32],33]
* [33]


### Merging Chains  and/3 into  External patterns of execution 
* [[33]] --> 1 
* [[33,[31,32]]] --> 2 


### Specialization of cost equations cons/3 
* CE 25 is refined into CE [44] 
* CE 24 is refined into CE [45] 


#### Refined cost equations cons/3 
* CE 44: cons(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 45: cons(V,V1,Out) = 1+ cons(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of cons/3 
* CEs [45] --> Loop 34 
* CEs [44] --> Loop 35 

#### Loops of cons/3 
* Loop 34: cons(V,V1,Out)->  cons(V',V1',Out')
                  [V1'>=0,V'>=0,Out=Out'+1,V1'+1=V1,V'+1=V] 
* Loop 35: cons(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR cons(V,V1,Out) 
* RF of phase [34]: [V,V1]

#### Partial ranking functions of CR cons(V,V1,Out) 
* Partial RF of phase [34]:
  - RF of loop [34:1]:
    V
    V1


### Resulting Chains:cons(V,V1,Out) 
* [[34],35]
* [35]


### Merging Chains  cons/3 into  External patterns of execution 
* [[35]] --> 1 
* [[35,[34]]] --> 2 


### Specialization of cost equations first/3 
* CE 32 is refined into CE [46] 
* CE 31 is refined into CE [47] 
* CE 30 is refined into CE [48] 
* CE 29 is refined into CE [49] 


#### Refined cost equations first/3 
* CE 46: first(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 47: first(V,V1,Out) = 1+ first(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 48: first(V,V1,Out) = 1+ first(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 49: first(V,V1,Out) = 1+ first(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of first/3 
* CEs [47] --> Loop 36 
* CEs [48] --> Loop 37 
* CEs [49] --> Loop 38 
* CEs [46] --> Loop 39 

#### Loops of first/3 
* Loop 36: first(V,V1,Out)->  first(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 37: first(V,V1,Out)->  first(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 38: first(V,V1,Out)->  first(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 39: first(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR first(V,V1,Out) 
* RF of phase [36,37,38]: [V+V1]

#### Partial ranking functions of CR first(V,V1,Out) 
* Partial RF of phase [36,37,38]:
  - RF of loop [36:1,38:1]:
    V1
  - RF of loop [37:1,38:1]:
    V


### Resulting Chains:first(V,V1,Out) 
* [[36,37,38],39]
* [39]


### Merging Chains  first/3 into  External patterns of execution 
* [[39]] --> 1 
* [[39,[36,37,38]]] --> 2 


### Specialization of cost equations from/2 
* CE 23 is refined into CE [50] 
* CE 22 is refined into CE [51] 


#### Refined cost equations from/2 
* CE 50: from(V,Out) = 0
     [V>=0,Out=0] 
* CE 51: from(V,Out) = 1+ from(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of from/2 
* CEs [51] --> Loop 40 
* CEs [50] --> Loop 41 

#### Loops of from/2 
* Loop 40: from(V,Out)->  from(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 41: from(V,Out) [V>=0,Out=0] 

### Ranking functions of CR from(V,Out) 
* RF of phase [40]: [V]

#### Partial ranking functions of CR from(V,Out) 
* Partial RF of phase [40]:
  - RF of loop [40:1]:
    V


### Resulting Chains:from(V,Out) 
* [[40],41]
* [41]


### Merging Chains  from/2 into  External patterns of execution 
* [[41]] --> 1 
* [[41,[40]]] --> 2 


### Specialization of cost equations if/4 
* CE 37 is refined into CE [52] 
* CE 35 is refined into CE [53] 
* CE 36 is refined into CE [54] 


#### Refined cost equations if/4 
* CE 52: if(V,V1,V2,Out) = 0
     [V2>=0,V1>=0,V>=0,Out=0] 
* CE 53: if(V,V1,V2,Out) = 1+ if(W2,V1,V2,X2)
     [W2>=0,V2>=0,V1>=0,X2+1=Out,W2+1=V] 
* CE 54: if(V,V1,V2,Out) = 1+ if(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V1,W2+1=V] 

### Cost equations --> "Loop" of if/4 
* CEs [53] --> Loop 42 
* CEs [54] --> Loop 43 
* CEs [52] --> Loop 44 

#### Loops of if/4 
* Loop 42: if(V,V1,V2,Out)->  if(V',V1,V2,Out')
                  [V2>=0,V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 43: if(V,V1,V2,Out)->  if(V',V1',V2',Out')
                  [V2>=1,V1>=1,V>=1,Out=Out'+1,V2=V2'+1,V1=V1'+1,V=V'+1] 
* Loop 44: if(V,V1,V2,Out) [V2>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR if(V,V1,V2,Out) 
* RF of phase [42,43]: [V]

#### Partial ranking functions of CR if(V,V1,V2,Out) 
* Partial RF of phase [42,43]:
  - RF of loop [42:1,43:1]:
    V
  - RF of loop [43:1]:
    V1
    V2


### Resulting Chains:if(V,V1,V2,Out) 
* [[42,43],44]
* [44]


### Merging Chains  if/4 into  External patterns of execution 
* [[44]] --> 1 
* [[44,[42,43]]] --> 2 


### Specialization of cost equations proper/2 
* CE 15 is refined into CE [55] 
* CE 11 is refined into CE [56] 
* CE 12 is refined into CE [57] 
* CE 13 is refined into CE [58] 
* CE 14 is refined into CE [59] 


#### Refined cost equations proper/2 
* CE 55: proper(V,Out) = 0
     [V>=0,Out=0] 
* CE 56: proper(V,Out) = 1
     [Out=4,V=3] 
* CE 57: proper(V,Out) = 1
     [Out=3,V=2] 
* CE 58: proper(V,Out) = 1
     [Out=2,V=1] 
* CE 59: proper(V,Out) = 1
     [Out=1,V=0] 

### Cost equations --> "Loop" of proper/2 
* CEs [55] --> Loop 45 
* CEs [56] --> Loop 46 
* CEs [57] --> Loop 47 
* CEs [58] --> Loop 48 
* CEs [59] --> Loop 49 

#### Loops of proper/2 
* Loop 45: proper(V,Out) [V>=0,Out=0] 
* Loop 46: proper(V,Out) [Out=4,V=3] 
* Loop 47: proper(V,Out) [Out=3,V=2] 
* Loop 48: proper(V,Out) [Out=2,V=1] 
* Loop 49: proper(V,Out) [Out=1,V=0] 

### Ranking functions of CR proper(V,Out) 

#### Partial ranking functions of CR proper(V,Out) 


### Resulting Chains:proper(V,Out) 
* [49]
* [48]
* [47]
* [46]
* [45]


### Merging Chains  proper/2 into  External patterns of execution 
* [[49]] --> 1 
* [[48]] --> 2 
* [[47]] --> 3 
* [[46]] --> 4 
* [[45]] --> 5 


### Specialization of cost equations s/2 
* CE 34 is refined into CE [60] 
* CE 33 is refined into CE [61] 


#### Refined cost equations s/2 
* CE 60: s(V,Out) = 0
     [V>=0,Out=0] 
* CE 61: s(V,Out) = 1+ s(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of s/2 
* CEs [61] --> Loop 50 
* CEs [60] --> Loop 51 

#### Loops of s/2 
* Loop 50: s(V,Out)->  s(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 51: s(V,Out) [V>=0,Out=0] 

### Ranking functions of CR s(V,Out) 
* RF of phase [50]: [V]

#### Partial ranking functions of CR s(V,Out) 
* Partial RF of phase [50]:
  - RF of loop [50:1]:
    V


### Resulting Chains:s(V,Out) 
* [[50],51]
* [51]


### Merging Chains  s/2 into  External patterns of execution 
* [[51]] --> 1 
* [[51,[50]]] --> 2 


### Specialization of cost equations top/2 
* CE 21 is refined into CE [62] 
* CE 19 is refined into CE [63] 
* CE 20 is refined into CE [64,65,66,67,68] 


#### Refined cost equations top/2 
* CE 62: top(V,Out) = 0
     [V>=0,Out=0] 
* CE 63: top(V,Out) = 1+ top(V,Out)
     [V>=1] 
* CE 64: top(V,Out) = 1+ proper(W,X):1+ top(Y,Out)
     [Y=1,X=1,W=0,V=1] 
* CE 65: top(V,Out) = 1+ proper(W,X):2+ top(Y,Out)
     [Y=2,X=2,W=1,V=2] 
* CE 66: top(V,Out) = 1+ proper(W,X):3+ top(Y,Out)
     [Y=3,X=3,W=2,V=3] 
* CE 67: top(V,Out) = 1+ proper(W,X):4+ top(Y,Out)
     [Y=4,X=4,W=3,V=4] 
* CE 68: top(V,Out) = 1+ proper(W,X):5+ top(Y,Out)
     [W>=0,W+1=V,Y=0,X=0] 

### Cost equations --> "Loop" of top/2 
* CEs [68] --> Loop 52 
* CEs [67] --> Loop 53 
* CEs [66] --> Loop 54 
* CEs [65] --> Loop 55 
* CEs [63,64] --> Loop 56 
* CEs [62] --> Loop 57 

#### Loops of top/2 
* Loop 52: top(V,Out)->  top(V',Out)
                  [V>=1,V'=0] 
* Loop 53: top(V,Out)->  top(V',Out)
                  [V'=4,V=4] 
* Loop 54: top(V,Out)->  top(V',Out)
                  [V'=3,V=3] 
* Loop 55: top(V,Out)->  top(V',Out)
                  [V'=2,V=2] 
* Loop 56: top(V,Out)->  top(V,Out)
                  [V>=1] 
* Loop 57: top(V,Out) [V>=0,Out=0] 

### Ranking functions of CR top(V,Out) 

#### Partial ranking functions of CR top(V,Out) 


### Resulting Chains:top(V,Out) 
* [[53,54,55,56]]...
* [[53,54,55,56],57]
* [[53,54,55,56],52,57]
* [57]
* [52,57]


### Merging Chains  top/2 into  External patterns of execution 
* [[57,52],[57],[57,52,[53,54,55,56]],[57,[53,54,55,56]]] --> 1 
* [[[53,54,55,56]]] --> 2 


### Specialization of cost equations start/3 
* CE 2 is refined into CE [69,70,71,72,73] 
* CE 3 is refined into CE [74,75] 
* CE 4 is refined into CE [76,77] 
* CE 5 is refined into CE [78,79] 
* CE 6 is refined into CE [80,81] 
* CE 7 is refined into CE [82,83] 
* CE 8 is refined into CE [84,85] 
* CE 9 is refined into CE [86,87] 
* CE 10 is refined into CE [88,89] 


#### Refined cost equations start/3 
* CE 69: start(V,V1,V2) = 0+ proper(W2,X2):1
     [X2=1,W2=0,V=0] 
* CE 70: start(V,V1,V2) = 0+ proper(W2,X2):2
     [X2=2,W2=1,V=1] 
* CE 71: start(V,V1,V2) = 0+ proper(W2,X2):3
     [X2=3,W2=2,V=2] 
* CE 72: start(V,V1,V2) = 0+ proper(W2,X2):4
     [X2=4,W2=3,V=3] 
* CE 73: start(V,V1,V2) = 0+ proper(V,W2):5
     [V>=0,W2=0] 
* CE 74: start(V,V1,V2) = 0+ add(V,V1,W2):1
     [V1>=0,V>=0,W2=0] 
* CE 75: start(V,V1,V2) = 0+ add(V,V1,W2):2
     [V>=W2,W2>=1,V1>=0] 
* CE 76: start(V,V1,V2) = 0+ top(V,W2):1
     [V>=0,W2=0] 
* CE 77: start(V,V1,V2) = 0+ top(V,W2):2
     [V>=1] 
* CE 78: start(V,V1,V2) = 0+ from(V,W2):1
     [V>=0,W2=0] 
* CE 79: start(V,V1,V2) = 0+ from(V,W2):2
     [V>=W2,W2>=1] 
* CE 80: start(V,V1,V2) = 0+ cons(V,V1,W2):1
     [V1>=0,V>=0,W2=0] 
* CE 81: start(V,V1,V2) = 0+ cons(V,V1,W2):2
     [V1>=W2,V>=W2,W2>=1] 
* CE 82: start(V,V1,V2) = 0+ and(V,V1,W2):1
     [V1>=0,V>=0,W2=0] 
* CE 83: start(V,V1,V2) = 0+ and(V,V1,W2):2
     [V>=W2,W2>=1,V1>=0] 
* CE 84: start(V,V1,V2) = 0+ first(V,V1,W2):1
     [V1>=0,V>=0,W2=0] 
* CE 85: start(V,V1,V2) = 0+ first(V,V1,W2):2
     [V+V1>=W2,W2>=1,V1>=0,V>=0] 
* CE 86: start(V,V1,V2) = 0+ s(V,W2):1
     [V>=0,W2=0] 
* CE 87: start(V,V1,V2) = 0+ s(V,W2):2
     [V>=W2,W2>=1] 
* CE 88: start(V,V1,V2) = 0+ if(V,V1,V2,W2):1
     [V2>=0,V1>=0,V>=0,W2=0] 
* CE 89: start(V,V1,V2) = 0+ if(V,V1,V2,W2):2
     [V>=W2,W2>=1,V2>=0,V1>=0] 

### Cost equations --> "Loop" of start/3 
* CEs [72] --> Loop 58 
* CEs [71] --> Loop 59 
* CEs [70] --> Loop 60 
* CEs [69,73,74,75,76,78,79,80,81,82,83,84,85,86,87,88,89] --> Loop 61 
* CEs [77] --> Loop 62 

#### Loops of start/3 
* Loop 58: start(V,V1,V2) [V=3] 
* Loop 59: start(V,V1,V2) [V=2] 
* Loop 60: start(V,V1,V2) [V=1] 
* Loop 61: start(V,V1,V2) [V>=0] 
* Loop 62: start(V,V1,V2) [V>=1] 

### Ranking functions of CR start(V,V1,V2) 

#### Partial ranking functions of CR start(V,V1,V2) 


### Resulting Chains:start(V,V1,V2) 
* [62]...
* [61]
* [60]
* [59]
* [58]


### Merging Chains  start/3 into  External patterns of execution 
* [[60],[61]] --> 1 
* [[59]] --> 2 
* [[58]] --> 3 
* [[62]] --> 4 


Computing Bounds
=====================================

#### Cost of loops [28,29] 

 * loop 28:add(V,V1,Out) -> [add(V',V1',Out')] 
1
 * loop 29:add(V,V1,Out) -> [add(V',V1',Out')] 
1
#### Cost of phase [28,29]:add(V,V1,Out) -> [add(V',V1',Out')] 
1*it(28)+1*it(29)+0
  Such that:it(29) =< V1
it(29) =< V1-V1'
aux(1) =< V
aux(2) =< V-V'
it(28) =< aux(1)
it(29) =< aux(1)
it(28) =< aux(2)
it(29) =< aux(2)

#### Cost of chains of add(V,V1,Out):
* Chain [[28,29],30]: 1*it(28)+1*it(29)+0
  Such that:aux(1) =< V
it(29) =< V1
aux(2) =< Out
it(28) =< aux(1)
it(29) =< aux(1)
it(28) =< aux(2)
it(29) =< aux(2)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [30]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [31,32] 

 * loop 31:and(V,V1,Out) -> [and(V',V1',Out')] 
1
 * loop 32:and(V,V1,Out) -> [and(V',V1',Out')] 
1
#### Cost of phase [31,32]:and(V,V1,Out) -> [and(V',V1',Out')] 
1*it(31)+1*it(32)+0
  Such that:it(32) =< V1
it(32) =< V1-V1'
aux(3) =< V
aux(4) =< V-V'
it(31) =< aux(3)
it(32) =< aux(3)
it(31) =< aux(4)
it(32) =< aux(4)

#### Cost of chains of and(V,V1,Out):
* Chain [[31,32],33]: 1*it(31)+1*it(32)+0
  Such that:aux(3) =< V
it(32) =< V1
aux(4) =< Out
it(31) =< aux(3)
it(32) =< aux(3)
it(31) =< aux(4)
it(32) =< aux(4)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [33]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [34] 

 * loop 34:cons(V,V1,Out) -> [cons(V',V1',Out')] 
1
#### Cost of phase [34]:cons(V,V1,Out) -> [cons(V',V1',Out')] 
1*it(34)+0
  Such that:it(34) =< V
it(34) =< V-V'
it(34) =< V1
it(34) =< V1-V1'

#### Cost of chains of cons(V,V1,Out):
* Chain [[34],35]: 1*it(34)+0
  Such that:it(34) =< Out

  with precondition: [Out>=1,V>=Out,V1>=Out] 

* Chain [35]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [36,37,38] 

 * loop 36:first(V,V1,Out) -> [first(V',V1',Out')] 
1
 * loop 37:first(V,V1,Out) -> [first(V',V1',Out')] 
1
 * loop 38:first(V,V1,Out) -> [first(V',V1',Out')] 
1
#### Cost of phase [36,37,38]:first(V,V1,Out) -> [first(V',V1',Out')] 
1*it(36)+1*it(37)+1*it(38)+0
  Such that:aux(5) =< V
aux(6) =< V+V1
aux(7) =< V+V1-V'-V1'
aux(8) =< V-V'
aux(9) =< V1
aux(10) =< V1-V1'
it(37) =< aux(5)
it(38) =< aux(5)
it(36) =< aux(6)
it(37) =< aux(6)
it(38) =< aux(6)
it(36) =< aux(7)
it(37) =< aux(7)
it(38) =< aux(7)
it(37) =< aux(8)
it(38) =< aux(8)
it(36) =< aux(9)
it(38) =< aux(9)
it(36) =< aux(10)
it(38) =< aux(10)

#### Cost of chains of first(V,V1,Out):
* Chain [[36,37,38],39]: 1*it(36)+1*it(37)+1*it(38)+0
  Such that:aux(11) =< V
aux(12) =< V+V1
aux(13) =< V1
it(37) =< aux(11)
it(38) =< aux(11)
it(36) =< aux(12)
it(37) =< aux(12)
it(38) =< aux(12)
it(36) =< aux(13)
it(38) =< aux(13)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [39]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [40] 

 * loop 40:from(V,Out) -> [from(V',Out')] 
1
#### Cost of phase [40]:from(V,Out) -> [from(V',Out')] 
1*it(40)+0
  Such that:it(40) =< V
it(40) =< V-V'

#### Cost of chains of from(V,Out):
* Chain [[40],41]: 1*it(40)+0
  Such that:it(40) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [41]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [42,43] 

 * loop 42:if(V,V1,V2,Out) -> [if(V',V1',V2',Out')] 
1
 * loop 43:if(V,V1,V2,Out) -> [if(V',V1',V2',Out')] 
1
#### Cost of phase [42,43]:if(V,V1,V2,Out) -> [if(V',V1',V2',Out')] 
1*it(42)+1*it(43)+0
  Such that:it(43) =< V1
it(43) =< V1-V1'
it(43) =< V2
it(43) =< V2-V2'
aux(14) =< V
aux(15) =< V-V'
it(42) =< aux(14)
it(43) =< aux(14)
it(42) =< aux(15)
it(43) =< aux(15)

#### Cost of chains of if(V,V1,V2,Out):
* Chain [[42,43],44]: 1*it(42)+1*it(43)+0
  Such that:aux(14) =< V
it(43) =< V1
aux(15) =< Out
it(42) =< aux(14)
it(43) =< aux(14)
it(42) =< aux(15)
it(43) =< aux(15)

  with precondition: [V1>=0,V2>=0,Out>=1,V>=Out] 

* Chain [44]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0] 


#### Cost of chains of proper(V,Out):
* Chain [49]: 1
  with precondition: [V=0,Out=1] 

* Chain [48]: 1
  with precondition: [V=1,Out=2] 

* Chain [47]: 1
  with precondition: [V=2,Out=3] 

* Chain [46]: 1
  with precondition: [V=3,Out=4] 

* Chain [45]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [50] 

 * loop 50:s(V,Out) -> [s(V',Out')] 
1
#### Cost of phase [50]:s(V,Out) -> [s(V',Out')] 
1*it(50)+0
  Such that:it(50) =< V
it(50) =< V-V'

#### Cost of chains of s(V,Out):
* Chain [[50],51]: 1*it(50)+0
  Such that:it(50) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [51]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [53,54,55,56] 

 * loop 53:top(V,Out) -> [top(V',Out')] 
2
 * loop 54:top(V,Out) -> [top(V',Out')] 
2
 * loop 55:top(V,Out) -> [top(V',Out')] 
2
 * loop 56:top(V,Out) -> [top(V',Out')] 
2
#### Cost of phase [53,54,55,56]:top(V,Out) -> [top(V',Out')] 
8*it(53)+0
#### Cost of phase [53,54,55,56]:top(V,Out) -> [top(V',Out')] 
8*it(53)+0
#### Cost of phase [53,54,55,56]:top(V,Out) -> [top(V',Out')] 
8*it(53)+0
#### Cost of chains of top(V,Out):
* Chain [[53,54,55,56]]...: 8*it(53)+0
  with precondition: [V>=1] 

* Chain [[53,54,55,56],57]: 8*it(53)+0
  with precondition: [Out=0,V>=1] 

* Chain [[53,54,55,56],52,57]: 8*it(53)+1
  with precondition: [Out=0,V>=1] 

* Chain [57]: 0
  with precondition: [Out=0,V>=0] 

* Chain [52,57]: 1
  with precondition: [Out=0,V>=1] 


#### Cost of chains of start(V,V1,V2):
* Chain [62]...: 8*s(3)+0
  with precondition: [V>=1] 

* Chain [61]: 3*s(5)+5*s(7)+1*s(8)+1*s(10)+1*s(18)+1*s(19)+1*s(20)+1
  Such that:s(16) =< V+V1
aux(20) =< V
aux(21) =< V1
s(7) =< aux(20)
s(5) =< aux(21)
s(10) =< aux(21)
s(18) =< aux(20)
s(19) =< aux(20)
s(20) =< s(16)
s(18) =< s(16)
s(19) =< s(16)
s(20) =< aux(21)
s(19) =< aux(21)
s(5) =< aux(20)

  with precondition: [V>=0] 

* Chain [60]: 1
  with precondition: [V=1] 

* Chain [59]: 1
  with precondition: [V=2] 

* Chain [58]: 1
  with precondition: [V=3] 


Closed-form bounds of start(V,V1,V2): 
-------------------------------------
* Chain [62]... with precondition: [V>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [61] with precondition: [V>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [60] with precondition: [V=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [59] with precondition: [V=2] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [58] with precondition: [V=3] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V,V1,V2): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 22 ms.
* Invariants computed in 64 ms.
   - Backward Invariants 23 ms.
   - Transitive Invariants 18 ms.
* Refinement performed in 101 ms.
* Termination proved in 20 ms.
* Upper bounds computed in 96 ms.
   - Equation cost structures 32 ms.
   - Phase cost structures 39 ms.
   - Chain cost structures 30 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 346 ms.


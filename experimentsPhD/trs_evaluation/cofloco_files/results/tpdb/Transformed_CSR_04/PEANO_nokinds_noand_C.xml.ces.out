
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [fun/3]
1. recursive  : [fun1/4]
2. recursive  : [fun2/3]
3. recursive  : [fun3/2]
4. recursive  : [fun4/4]
5. recursive  : [fun5/2]
6. recursive  : [isNat/2]
7. recursive  : [plus/3]
8. non_recursive  : [proper/2]
9. recursive  : [s/2]
10. recursive  : [top/2]
11. non_recursive  : [start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into fun/3
1. SCC is partially evaluated into fun1/4
2. SCC is partially evaluated into fun2/3
3. SCC is partially evaluated into fun3/2
4. SCC is partially evaluated into fun4/4
5. SCC is partially evaluated into fun5/2
6. SCC is partially evaluated into isNat/2
7. SCC is partially evaluated into plus/3
8. SCC is partially evaluated into proper/2
9. SCC is partially evaluated into s/2
10. SCC is partially evaluated into top/2
11. SCC is partially evaluated into start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fun/3 
* CE 15 is refined into CE [43] 
* CE 14 is refined into CE [44] 
* CE 13 is refined into CE [45] 


#### Refined cost equations fun/3 
* CE 43: fun(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 44: fun(V1,V,Out) = 1+ fun(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 45: fun(V1,V,Out) = 1+ fun(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun/3 
* CEs [44] --> Loop 31 
* CEs [45] --> Loop 32 
* CEs [43] --> Loop 33 

#### Loops of fun/3 
* Loop 31: fun(V1,V,Out)->  fun(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 32: fun(V1,V,Out)->  fun(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 33: fun(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun(V1,V,Out) 
* RF of phase [31,32]: [V1]

#### Partial ranking functions of CR fun(V1,V,Out) 
* Partial RF of phase [31,32]:
  - RF of loop [31:1,32:1]:
    V1
  - RF of loop [32:1]:
    V


### Resulting Chains:fun(V1,V,Out) 
* [[31,32],33]
* [33]


### Merging Chains  fun/3 into  External patterns of execution 
* [[33]] --> 1 
* [[33,[31,32]]] --> 2 


### Specialization of cost equations fun1/4 
* CE 18 is refined into CE [46] 
* CE 16 is refined into CE [47] 
* CE 17 is refined into CE [48] 


#### Refined cost equations fun1/4 
* CE 46: fun1(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 47: fun1(V1,V,V2,Out) = 1+ fun1(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 48: fun1(V1,V,V2,Out) = 1+ fun1(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun1/4 
* CEs [47] --> Loop 34 
* CEs [48] --> Loop 35 
* CEs [46] --> Loop 36 

#### Loops of fun1/4 
* Loop 34: fun1(V1,V,V2,Out)->  fun1(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 35: fun1(V1,V,V2,Out)->  fun1(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 36: fun1(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun1(V1,V,V2,Out) 
* RF of phase [34,35]: [V1]

#### Partial ranking functions of CR fun1(V1,V,V2,Out) 
* Partial RF of phase [34,35]:
  - RF of loop [34:1,35:1]:
    V1
  - RF of loop [35:1]:
    V
    V2


### Resulting Chains:fun1(V1,V,V2,Out) 
* [[34,35],36]
* [36]


### Merging Chains  fun1/4 into  External patterns of execution 
* [[36]] --> 1 
* [[36,[34,35]]] --> 2 


### Specialization of cost equations fun2/3 
* CE 27 is refined into CE [49] 
* CE 26 is refined into CE [50] 
* CE 25 is refined into CE [51] 


#### Refined cost equations fun2/3 
* CE 49: fun2(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 50: fun2(V1,V,Out) = 1+ fun2(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 51: fun2(V1,V,Out) = 1+ fun2(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of fun2/3 
* CEs [50] --> Loop 37 
* CEs [51] --> Loop 38 
* CEs [49] --> Loop 39 

#### Loops of fun2/3 
* Loop 37: fun2(V1,V,Out)->  fun2(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 38: fun2(V1,V,Out)->  fun2(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 39: fun2(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun2(V1,V,Out) 
* RF of phase [37,38]: [V1]

#### Partial ranking functions of CR fun2(V1,V,Out) 
* Partial RF of phase [37,38]:
  - RF of loop [37:1,38:1]:
    V1
  - RF of loop [38:1]:
    V


### Resulting Chains:fun2(V1,V,Out) 
* [[37,38],39]
* [39]


### Merging Chains  fun2/3 into  External patterns of execution 
* [[39]] --> 1 
* [[39,[37,38]]] --> 2 


### Specialization of cost equations fun3/2 
* CE 29 is refined into CE [52] 
* CE 28 is refined into CE [53] 


#### Refined cost equations fun3/2 
* CE 52: fun3(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 53: fun3(V1,Out) = 1+ fun3(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun3/2 
* CEs [53] --> Loop 40 
* CEs [52] --> Loop 41 

#### Loops of fun3/2 
* Loop 40: fun3(V1,Out)->  fun3(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 41: fun3(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun3(V1,Out) 
* RF of phase [40]: [V1]

#### Partial ranking functions of CR fun3(V1,Out) 
* Partial RF of phase [40]:
  - RF of loop [40:1]:
    V1


### Resulting Chains:fun3(V1,Out) 
* [[40],41]
* [41]


### Merging Chains  fun3/2 into  External patterns of execution 
* [[41]] --> 1 
* [[41,[40]]] --> 2 


### Specialization of cost equations fun4/4 
* CE 40 is refined into CE [54] 
* CE 38 is refined into CE [55] 
* CE 39 is refined into CE [56] 


#### Refined cost equations fun4/4 
* CE 54: fun4(V1,V,V2,Out) = 0
     [V2>=0,V>=0,V1>=0,Out=0] 
* CE 55: fun4(V1,V,V2,Out) = 1+ fun4(W2,V,V2,X2)
     [W2>=0,V2>=0,V>=0,X2+1=Out,W2+1=V1] 
* CE 56: fun4(V1,V,V2,Out) = 1+ fun4(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V,W2+1=V1] 

### Cost equations --> "Loop" of fun4/4 
* CEs [55] --> Loop 42 
* CEs [56] --> Loop 43 
* CEs [54] --> Loop 44 

#### Loops of fun4/4 
* Loop 42: fun4(V1,V,V2,Out)->  fun4(V1',V,V2,Out')
                  [V2>=0,V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 43: fun4(V1,V,V2,Out)->  fun4(V1',V',V2',Out')
                  [V2>=1,V>=1,V1>=1,Out=Out'+1,V2=V2'+1,V=V'+1,V1=V1'+1] 
* Loop 44: fun4(V1,V,V2,Out) [V2>=0,V>=0,V1>=0,Out=0] 

### Ranking functions of CR fun4(V1,V,V2,Out) 
* RF of phase [42,43]: [V1]

#### Partial ranking functions of CR fun4(V1,V,V2,Out) 
* Partial RF of phase [42,43]:
  - RF of loop [42:1,43:1]:
    V1
  - RF of loop [43:1]:
    V
    V2


### Resulting Chains:fun4(V1,V,V2,Out) 
* [[42,43],44]
* [44]


### Merging Chains  fun4/4 into  External patterns of execution 
* [[44]] --> 1 
* [[44,[42,43]]] --> 2 


### Specialization of cost equations fun5/2 
* CE 42 is refined into CE [57] 
* CE 41 is refined into CE [58] 


#### Refined cost equations fun5/2 
* CE 57: fun5(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 58: fun5(V1,Out) = 1+ fun5(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of fun5/2 
* CEs [58] --> Loop 45 
* CEs [57] --> Loop 46 

#### Loops of fun5/2 
* Loop 45: fun5(V1,Out)->  fun5(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 46: fun5(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR fun5(V1,Out) 
* RF of phase [45]: [V1]

#### Partial ranking functions of CR fun5(V1,Out) 
* Partial RF of phase [45]:
  - RF of loop [45:1]:
    V1


### Resulting Chains:fun5(V1,Out) 
* [[45],46]
* [46]


### Merging Chains  fun5/2 into  External patterns of execution 
* [[46]] --> 1 
* [[46,[45]]] --> 2 


### Specialization of cost equations isNat/2 
* CE 31 is refined into CE [59] 
* CE 30 is refined into CE [60] 


#### Refined cost equations isNat/2 
* CE 59: isNat(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 60: isNat(V1,Out) = 1+ isNat(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of isNat/2 
* CEs [60] --> Loop 47 
* CEs [59] --> Loop 48 

#### Loops of isNat/2 
* Loop 47: isNat(V1,Out)->  isNat(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 48: isNat(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR isNat(V1,Out) 
* RF of phase [47]: [V1]

#### Partial ranking functions of CR isNat(V1,Out) 
* Partial RF of phase [47]:
  - RF of loop [47:1]:
    V1


### Resulting Chains:isNat(V1,Out) 
* [[47],48]
* [48]


### Merging Chains  isNat/2 into  External patterns of execution 
* [[48]] --> 1 
* [[48,[47]]] --> 2 


### Specialization of cost equations plus/3 
* CE 37 is refined into CE [61] 
* CE 36 is refined into CE [62] 
* CE 34 is refined into CE [63] 
* CE 35 is refined into CE [64] 


#### Refined cost equations plus/3 
* CE 61: plus(V1,V,Out) = 0
     [V>=0,V1>=0,Out=0] 
* CE 62: plus(V1,V,Out) = 1+ plus(V1,W1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 63: plus(V1,V,Out) = 1+ plus(W1,V,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 64: plus(V1,V,Out) = 1+ plus(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V,W1+1=V1] 

### Cost equations --> "Loop" of plus/3 
* CEs [62] --> Loop 49 
* CEs [63] --> Loop 50 
* CEs [64] --> Loop 51 
* CEs [61] --> Loop 52 

#### Loops of plus/3 
* Loop 49: plus(V1,V,Out)->  plus(V1,V',Out')
                  [V>=1,V1>=0,Out=Out'+1,V=V'+1] 
* Loop 50: plus(V1,V,Out)->  plus(V1',V,Out')
                  [V>=0,V1>=1,Out=Out'+1,V1=V1'+1] 
* Loop 51: plus(V1,V,Out)->  plus(V1',V',Out')
                  [V>=1,V1>=1,Out=Out'+1,V=V'+1,V1=V1'+1] 
* Loop 52: plus(V1,V,Out) [V>=0,V1>=0,Out=0] 

### Ranking functions of CR plus(V1,V,Out) 
* RF of phase [49,50,51]: [V1+V]

#### Partial ranking functions of CR plus(V1,V,Out) 
* Partial RF of phase [49,50,51]:
  - RF of loop [49:1,51:1]:
    V
  - RF of loop [50:1,51:1]:
    V1


### Resulting Chains:plus(V1,V,Out) 
* [[49,50,51],52]
* [52]


### Merging Chains  plus/3 into  External patterns of execution 
* [[52]] --> 1 
* [[52,[49,50,51]]] --> 2 


### Specialization of cost equations proper/2 
* CE 24 is refined into CE [65] 
* CE 22 is refined into CE [66] 
* CE 23 is refined into CE [67] 


#### Refined cost equations proper/2 
* CE 65: proper(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 66: proper(V1,Out) = 1
     [Out=2,V1=1] 
* CE 67: proper(V1,Out) = 1
     [Out=1,V1=0] 

### Cost equations --> "Loop" of proper/2 
* CEs [65] --> Loop 53 
* CEs [66] --> Loop 54 
* CEs [67] --> Loop 55 

#### Loops of proper/2 
* Loop 53: proper(V1,Out) [V1>=0,Out=0] 
* Loop 54: proper(V1,Out) [Out=2,V1=1] 
* Loop 55: proper(V1,Out) [Out=1,V1=0] 

### Ranking functions of CR proper(V1,Out) 

#### Partial ranking functions of CR proper(V1,Out) 


### Resulting Chains:proper(V1,Out) 
* [55]
* [54]
* [53]


### Merging Chains  proper/2 into  External patterns of execution 
* [[55]] --> 1 
* [[54]] --> 2 
* [[53]] --> 3 


### Specialization of cost equations s/2 
* CE 33 is refined into CE [68] 
* CE 32 is refined into CE [69] 


#### Refined cost equations s/2 
* CE 68: s(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 69: s(V1,Out) = 1+ s(W1,X1)
     [W1>=0,X1+1=Out,W1+1=V1] 

### Cost equations --> "Loop" of s/2 
* CEs [69] --> Loop 56 
* CEs [68] --> Loop 57 

#### Loops of s/2 
* Loop 56: s(V1,Out)->  s(V1',Out')
                  [V1'>=0,Out=Out'+1,V1'+1=V1] 
* Loop 57: s(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR s(V1,Out) 
* RF of phase [56]: [V1]

#### Partial ranking functions of CR s(V1,Out) 
* Partial RF of phase [56]:
  - RF of loop [56:1]:
    V1


### Resulting Chains:s(V1,Out) 
* [[56],57]
* [57]


### Merging Chains  s/2 into  External patterns of execution 
* [[57]] --> 1 
* [[57,[56]]] --> 2 


### Specialization of cost equations top/2 
* CE 21 is refined into CE [70] 
* CE 19 is refined into CE [71] 
* CE 20 is refined into CE [72,73,74] 


#### Refined cost equations top/2 
* CE 70: top(V1,Out) = 0
     [V1>=0,Out=0] 
* CE 71: top(V1,Out) = 1+ top(V1,Out)
     [V1>=1] 
* CE 72: top(V1,Out) = 1+ proper(W1,X1):1+ top(Y1,Out)
     [Y1=1,X1=1,W1=0,V1=1] 
* CE 73: top(V1,Out) = 1+ proper(W1,X1):2+ top(Y1,Out)
     [Y1=2,X1=2,W1=1,V1=2] 
* CE 74: top(V1,Out) = 1+ proper(W1,X1):3+ top(Y1,Out)
     [W1>=0,W1+1=V1,Y1=0,X1=0] 

### Cost equations --> "Loop" of top/2 
* CEs [74] --> Loop 58 
* CEs [73] --> Loop 59 
* CEs [71,72] --> Loop 60 
* CEs [70] --> Loop 61 

#### Loops of top/2 
* Loop 58: top(V1,Out)->  top(V1',Out)
                  [V1>=1,V1'=0] 
* Loop 59: top(V1,Out)->  top(V1',Out)
                  [V1'=2,V1=2] 
* Loop 60: top(V1,Out)->  top(V1,Out)
                  [V1>=1] 
* Loop 61: top(V1,Out) [V1>=0,Out=0] 

### Ranking functions of CR top(V1,Out) 

#### Partial ranking functions of CR top(V1,Out) 


### Resulting Chains:top(V1,Out) 
* [[59,60]]...
* [[59,60],61]
* [[59,60],58,61]
* [61]
* [58,61]


### Merging Chains  top/2 into  External patterns of execution 
* [[61,58],[61],[61,58,[59,60]],[61,[59,60]]] --> 1 
* [[[59,60]]] --> 2 


### Specialization of cost equations start/3 
* CE 2 is refined into CE [75,76] 
* CE 3 is refined into CE [77,78] 
* CE 4 is refined into CE [79,80] 
* CE 5 is refined into CE [81,82,83] 
* CE 6 is refined into CE [84,85] 
* CE 7 is refined into CE [86,87] 
* CE 8 is refined into CE [88,89] 
* CE 9 is refined into CE [90,91] 
* CE 10 is refined into CE [92,93] 
* CE 11 is refined into CE [94,95] 
* CE 12 is refined into CE [96,97] 


#### Refined cost equations start/3 
* CE 75: start(V1,V,V2) = 0+ fun(V1,V,W2):1
     [V>=0,V1>=0,W2=0] 
* CE 76: start(V1,V,V2) = 0+ fun(V1,V,W2):2
     [V1>=W2,W2>=1,V>=0] 
* CE 77: start(V1,V,V2) = 0+ fun1(V1,V,V2,W2):1
     [V2>=0,V>=0,V1>=0,W2=0] 
* CE 78: start(V1,V,V2) = 0+ fun1(V1,V,V2,W2):2
     [V1>=W2,W2>=1,V2>=0,V>=0] 
* CE 79: start(V1,V,V2) = 0+ top(V1,W2):1
     [V1>=0,W2=0] 
* CE 80: start(V1,V,V2) = 0+ top(V1,W2):2
     [V1>=1] 
* CE 81: start(V1,V,V2) = 0+ proper(W2,X2):1
     [X2=1,W2=0,V1=0] 
* CE 82: start(V1,V,V2) = 0+ proper(W2,X2):2
     [X2=2,W2=1,V1=1] 
* CE 83: start(V1,V,V2) = 0+ proper(V1,W2):3
     [V1>=0,W2=0] 
* CE 84: start(V1,V,V2) = 0+ fun2(V1,V,W2):1
     [V>=0,V1>=0,W2=0] 
* CE 85: start(V1,V,V2) = 0+ fun2(V1,V,W2):2
     [V1>=W2,W2>=1,V>=0] 
* CE 86: start(V1,V,V2) = 0+ fun3(V1,W2):1
     [V1>=0,W2=0] 
* CE 87: start(V1,V,V2) = 0+ fun3(V1,W2):2
     [V1>=W2,W2>=1] 
* CE 88: start(V1,V,V2) = 0+ isNat(V1,W2):1
     [V1>=0,W2=0] 
* CE 89: start(V1,V,V2) = 0+ isNat(V1,W2):2
     [V1>=W2,W2>=1] 
* CE 90: start(V1,V,V2) = 0+ s(V1,W2):1
     [V1>=0,W2=0] 
* CE 91: start(V1,V,V2) = 0+ s(V1,W2):2
     [V1>=W2,W2>=1] 
* CE 92: start(V1,V,V2) = 0+ plus(V1,V,W2):1
     [V>=0,V1>=0,W2=0] 
* CE 93: start(V1,V,V2) = 0+ plus(V1,V,W2):2
     [V1+V>=W2,W2>=1,V>=0,V1>=0] 
* CE 94: start(V1,V,V2) = 0+ fun4(V1,V,V2,W2):1
     [V2>=0,V>=0,V1>=0,W2=0] 
* CE 95: start(V1,V,V2) = 0+ fun4(V1,V,V2,W2):2
     [V1>=W2,W2>=1,V2>=0,V>=0] 
* CE 96: start(V1,V,V2) = 0+ fun5(V1,W2):1
     [V1>=0,W2=0] 
* CE 97: start(V1,V,V2) = 0+ fun5(V1,W2):2
     [V1>=W2,W2>=1] 

### Cost equations --> "Loop" of start/3 
* CEs [82] --> Loop 62 
* CEs [75,76,77,78,79,81,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97] --> Loop 63 
* CEs [80] --> Loop 64 

#### Loops of start/3 
* Loop 62: start(V1,V,V2) [V1=1] 
* Loop 63: start(V1,V,V2) [V1>=0] 
* Loop 64: start(V1,V,V2) [V1>=1] 

### Ranking functions of CR start(V1,V,V2) 

#### Partial ranking functions of CR start(V1,V,V2) 


### Resulting Chains:start(V1,V,V2) 
* [64]...
* [63]
* [62]


### Merging Chains  start/3 into  External patterns of execution 
* [[62],[63]] --> 1 
* [[64]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [31,32] 

 * loop 31:fun(V1,V,Out) -> [fun(V1',V',Out')] 
1
 * loop 32:fun(V1,V,Out) -> [fun(V1',V',Out')] 
1
#### Cost of phase [31,32]:fun(V1,V,Out) -> [fun(V1',V',Out')] 
1*it(31)+1*it(32)+0
  Such that:it(32) =< V
it(32) =< V-V'
aux(1) =< V1
aux(2) =< V1-V1'
it(31) =< aux(1)
it(32) =< aux(1)
it(31) =< aux(2)
it(32) =< aux(2)

#### Cost of chains of fun(V1,V,Out):
* Chain [[31,32],33]: 1*it(31)+1*it(32)+0
  Such that:aux(1) =< V1
it(32) =< V
aux(2) =< Out
it(31) =< aux(1)
it(32) =< aux(1)
it(31) =< aux(2)
it(32) =< aux(2)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [33]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [34,35] 

 * loop 34:fun1(V1,V,V2,Out) -> [fun1(V1',V',V2',Out')] 
1
 * loop 35:fun1(V1,V,V2,Out) -> [fun1(V1',V',V2',Out')] 
1
#### Cost of phase [34,35]:fun1(V1,V,V2,Out) -> [fun1(V1',V',V2',Out')] 
1*it(34)+1*it(35)+0
  Such that:it(35) =< V
it(35) =< V-V'
it(35) =< V2
it(35) =< V2-V2'
aux(3) =< V1
aux(4) =< V1-V1'
it(34) =< aux(3)
it(35) =< aux(3)
it(34) =< aux(4)
it(35) =< aux(4)

#### Cost of chains of fun1(V1,V,V2,Out):
* Chain [[34,35],36]: 1*it(34)+1*it(35)+0
  Such that:aux(3) =< V1
it(35) =< V
aux(4) =< Out
it(34) =< aux(3)
it(35) =< aux(3)
it(34) =< aux(4)
it(35) =< aux(4)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [36]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [37,38] 

 * loop 37:fun2(V1,V,Out) -> [fun2(V1',V',Out')] 
1
 * loop 38:fun2(V1,V,Out) -> [fun2(V1',V',Out')] 
1
#### Cost of phase [37,38]:fun2(V1,V,Out) -> [fun2(V1',V',Out')] 
1*it(37)+1*it(38)+0
  Such that:it(38) =< V
it(38) =< V-V'
aux(5) =< V1
aux(6) =< V1-V1'
it(37) =< aux(5)
it(38) =< aux(5)
it(37) =< aux(6)
it(38) =< aux(6)

#### Cost of chains of fun2(V1,V,Out):
* Chain [[37,38],39]: 1*it(37)+1*it(38)+0
  Such that:aux(5) =< V1
it(38) =< V
aux(6) =< Out
it(37) =< aux(5)
it(38) =< aux(5)
it(37) =< aux(6)
it(38) =< aux(6)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [39]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of loops [40] 

 * loop 40:fun3(V1,Out) -> [fun3(V1',Out')] 
1
#### Cost of phase [40]:fun3(V1,Out) -> [fun3(V1',Out')] 
1*it(40)+0
  Such that:it(40) =< V1
it(40) =< V1-V1'

#### Cost of chains of fun3(V1,Out):
* Chain [[40],41]: 1*it(40)+0
  Such that:it(40) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [41]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [42,43] 

 * loop 42:fun4(V1,V,V2,Out) -> [fun4(V1',V',V2',Out')] 
1
 * loop 43:fun4(V1,V,V2,Out) -> [fun4(V1',V',V2',Out')] 
1
#### Cost of phase [42,43]:fun4(V1,V,V2,Out) -> [fun4(V1',V',V2',Out')] 
1*it(42)+1*it(43)+0
  Such that:it(43) =< V
it(43) =< V-V'
it(43) =< V2
it(43) =< V2-V2'
aux(7) =< V1
aux(8) =< V1-V1'
it(42) =< aux(7)
it(43) =< aux(7)
it(42) =< aux(8)
it(43) =< aux(8)

#### Cost of chains of fun4(V1,V,V2,Out):
* Chain [[42,43],44]: 1*it(42)+1*it(43)+0
  Such that:aux(7) =< V1
it(43) =< V
aux(8) =< Out
it(42) =< aux(7)
it(43) =< aux(7)
it(42) =< aux(8)
it(43) =< aux(8)

  with precondition: [V>=0,V2>=0,Out>=1,V1>=Out] 

* Chain [44]: 0
  with precondition: [Out=0,V1>=0,V>=0,V2>=0] 


#### Cost of loops [45] 

 * loop 45:fun5(V1,Out) -> [fun5(V1',Out')] 
1
#### Cost of phase [45]:fun5(V1,Out) -> [fun5(V1',Out')] 
1*it(45)+0
  Such that:it(45) =< V1
it(45) =< V1-V1'

#### Cost of chains of fun5(V1,Out):
* Chain [[45],46]: 1*it(45)+0
  Such that:it(45) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [46]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [47] 

 * loop 47:isNat(V1,Out) -> [isNat(V1',Out')] 
1
#### Cost of phase [47]:isNat(V1,Out) -> [isNat(V1',Out')] 
1*it(47)+0
  Such that:it(47) =< V1
it(47) =< V1-V1'

#### Cost of chains of isNat(V1,Out):
* Chain [[47],48]: 1*it(47)+0
  Such that:it(47) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [48]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [49,50,51] 

 * loop 49:plus(V1,V,Out) -> [plus(V1',V',Out')] 
1
 * loop 50:plus(V1,V,Out) -> [plus(V1',V',Out')] 
1
 * loop 51:plus(V1,V,Out) -> [plus(V1',V',Out')] 
1
#### Cost of phase [49,50,51]:plus(V1,V,Out) -> [plus(V1',V',Out')] 
1*it(49)+1*it(50)+1*it(51)+0
  Such that:aux(9) =< V1
aux(10) =< V1+V
aux(11) =< V1+V-V1'-V'
aux(12) =< V1-V1'
aux(13) =< V
aux(14) =< V-V'
it(50) =< aux(9)
it(51) =< aux(9)
it(49) =< aux(10)
it(50) =< aux(10)
it(51) =< aux(10)
it(49) =< aux(11)
it(50) =< aux(11)
it(51) =< aux(11)
it(50) =< aux(12)
it(51) =< aux(12)
it(49) =< aux(13)
it(51) =< aux(13)
it(49) =< aux(14)
it(51) =< aux(14)

#### Cost of chains of plus(V1,V,Out):
* Chain [[49,50,51],52]: 1*it(49)+1*it(50)+1*it(51)+0
  Such that:aux(15) =< V1
aux(16) =< V1+V
aux(17) =< V
it(50) =< aux(15)
it(51) =< aux(15)
it(49) =< aux(16)
it(50) =< aux(16)
it(51) =< aux(16)
it(49) =< aux(17)
it(51) =< aux(17)

  with precondition: [V1>=0,V>=0,Out>=1,V+V1>=Out] 

* Chain [52]: 0
  with precondition: [Out=0,V1>=0,V>=0] 


#### Cost of chains of proper(V1,Out):
* Chain [55]: 1
  with precondition: [V1=0,Out=1] 

* Chain [54]: 1
  with precondition: [V1=1,Out=2] 

* Chain [53]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [56] 

 * loop 56:s(V1,Out) -> [s(V1',Out')] 
1
#### Cost of phase [56]:s(V1,Out) -> [s(V1',Out')] 
1*it(56)+0
  Such that:it(56) =< V1
it(56) =< V1-V1'

#### Cost of chains of s(V1,Out):
* Chain [[56],57]: 1*it(56)+0
  Such that:it(56) =< Out

  with precondition: [Out>=1,V1>=Out] 

* Chain [57]: 0
  with precondition: [Out=0,V1>=0] 


#### Cost of loops [59,60] 

 * loop 59:top(V1,Out) -> [top(V1',Out')] 
2
 * loop 60:top(V1,Out) -> [top(V1',Out')] 
2
#### Cost of phase [59,60]:top(V1,Out) -> [top(V1',Out')] 
4*it(59)+0
#### Cost of phase [59,60]:top(V1,Out) -> [top(V1',Out')] 
4*it(59)+0
#### Cost of phase [59,60]:top(V1,Out) -> [top(V1',Out')] 
4*it(59)+0
#### Cost of chains of top(V1,Out):
* Chain [[59,60]]...: 4*it(59)+0
  with precondition: [V1>=1] 

* Chain [[59,60],61]: 4*it(59)+0
  with precondition: [Out=0,V1>=1] 

* Chain [[59,60],58,61]: 4*it(59)+1
  with precondition: [Out=0,V1>=1] 

* Chain [61]: 0
  with precondition: [Out=0,V1>=0] 

* Chain [58,61]: 1
  with precondition: [Out=0,V1>=1] 


#### Cost of chains of start(V1,V,V2):
* Chain [64]...: 4*s(3)+0
  with precondition: [V1>=1] 

* Chain [63]: 4*s(5)+8*s(7)+1*s(12)+1*s(23)+1*s(24)+1*s(25)+1
  Such that:s(21) =< V1+V
aux(23) =< V1
aux(24) =< V
s(7) =< aux(23)
s(5) =< aux(24)
s(23) =< aux(23)
s(24) =< aux(23)
s(25) =< s(21)
s(23) =< s(21)
s(24) =< s(21)
s(25) =< aux(24)
s(24) =< aux(24)
s(5) =< aux(23)

  with precondition: [V1>=0] 

* Chain [62]: 1
  with precondition: [V1=1] 


Closed-form bounds of start(V1,V,V2): 
-------------------------------------
* Chain [64]... with precondition: [V1>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [63] with precondition: [V1>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [62] with precondition: [V1=1] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V1,V,V2): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 78 ms.
* Invariants computed in 223 ms.
   - Backward Invariants 89 ms.
   - Transitive Invariants 62 ms.
* Refinement performed in 365 ms.
* Termination proved in 74 ms.
* Upper bounds computed in 356 ms.
   - Equation cost structures 119 ms.
   - Phase cost structures 142 ms.
   - Chain cost structures 120 ms.
   - Solving cost expressions 3 ms.
* Total analysis performed in 1263 ms.


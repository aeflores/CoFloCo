
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [fun/4]
1. recursive  : [fun1/4]
2. recursive  : [plus/3]
3. non_recursive  : [proper/2]
4. recursive  : [s/2]
5. recursive  : [top/2]
6. non_recursive  : [start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into fun/4
1. SCC is partially evaluated into fun1/4
2. SCC is partially evaluated into plus/3
3. SCC is partially evaluated into proper/2
4. SCC is partially evaluated into s/2
5. SCC is partially evaluated into top/2
6. SCC is partially evaluated into start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations fun/4 
* CE 16 is refined into CE [26] 
* CE 14 is refined into CE [27] 
* CE 15 is refined into CE [28] 


#### Refined cost equations fun/4 
* CE 26: fun(V,V1,V2,Out) = 0
     [V2>=0,V1>=0,V>=0,Out=0] 
* CE 27: fun(V,V1,V2,Out) = 1+ fun(W2,V1,V2,X2)
     [W2>=0,V2>=0,V1>=0,X2+1=Out,W2+1=V] 
* CE 28: fun(V,V1,V2,Out) = 1+ fun(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V1,W2+1=V] 

### Cost equations --> "Loop" of fun/4 
* CEs [27] --> Loop 19 
* CEs [28] --> Loop 20 
* CEs [26] --> Loop 21 

#### Loops of fun/4 
* Loop 19: fun(V,V1,V2,Out)->  fun(V',V1,V2,Out')
                  [V2>=0,V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 20: fun(V,V1,V2,Out)->  fun(V',V1',V2',Out')
                  [V2>=1,V1>=1,V>=1,Out=Out'+1,V2=V2'+1,V1=V1'+1,V=V'+1] 
* Loop 21: fun(V,V1,V2,Out) [V2>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun(V,V1,V2,Out) 
* RF of phase [19,20]: [V]

#### Partial ranking functions of CR fun(V,V1,V2,Out) 
* Partial RF of phase [19,20]:
  - RF of loop [19:1,20:1]:
    V
  - RF of loop [20:1]:
    V1
    V2


### Resulting Chains:fun(V,V1,V2,Out) 
* [[19,20],21]
* [21]


### Merging Chains  fun/4 into  External patterns of execution 
* [[21]] --> 1 
* [[21,[19,20]]] --> 2 


### Specialization of cost equations fun1/4 
* CE 19 is refined into CE [29] 
* CE 18 is refined into CE [30] 
* CE 17 is refined into CE [31] 


#### Refined cost equations fun1/4 
* CE 29: fun1(V,V1,V2,Out) = 0
     [V2>=0,V1>=0,V>=0,Out=0] 
* CE 30: fun1(V,V1,V2,Out) = 1+ fun1(W2,V1,V2,X2)
     [W2>=0,V2>=0,V1>=0,X2+1=Out,W2+1=V] 
* CE 31: fun1(V,V1,V2,Out) = 1+ fun1(W2,X2,Y2,Z2)
     [Y2>=0,X2>=0,W2>=0,Z2+1=Out,Y2+1=V2,X2+1=V1,W2+1=V] 

### Cost equations --> "Loop" of fun1/4 
* CEs [30] --> Loop 22 
* CEs [31] --> Loop 23 
* CEs [29] --> Loop 24 

#### Loops of fun1/4 
* Loop 22: fun1(V,V1,V2,Out)->  fun1(V',V1,V2,Out')
                  [V2>=0,V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 23: fun1(V,V1,V2,Out)->  fun1(V',V1',V2',Out')
                  [V2>=1,V1>=1,V>=1,Out=Out'+1,V2=V2'+1,V1=V1'+1,V=V'+1] 
* Loop 24: fun1(V,V1,V2,Out) [V2>=0,V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun1(V,V1,V2,Out) 
* RF of phase [22,23]: [V]

#### Partial ranking functions of CR fun1(V,V1,V2,Out) 
* Partial RF of phase [22,23]:
  - RF of loop [22:1,23:1]:
    V
  - RF of loop [23:1]:
    V1
    V2


### Resulting Chains:fun1(V,V1,V2,Out) 
* [[22,23],24]
* [24]


### Merging Chains  fun1/4 into  External patterns of execution 
* [[24]] --> 1 
* [[24,[22,23]]] --> 2 


### Specialization of cost equations plus/3 
* CE 25 is refined into CE [32] 
* CE 24 is refined into CE [33] 
* CE 22 is refined into CE [34] 
* CE 23 is refined into CE [35] 


#### Refined cost equations plus/3 
* CE 32: plus(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 33: plus(V,V1,Out) = 1+ plus(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 34: plus(V,V1,Out) = 1+ plus(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 35: plus(V,V1,Out) = 1+ plus(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of plus/3 
* CEs [33] --> Loop 25 
* CEs [34] --> Loop 26 
* CEs [35] --> Loop 27 
* CEs [32] --> Loop 28 

#### Loops of plus/3 
* Loop 25: plus(V,V1,Out)->  plus(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 26: plus(V,V1,Out)->  plus(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 27: plus(V,V1,Out)->  plus(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 28: plus(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR plus(V,V1,Out) 
* RF of phase [25,26,27]: [V+V1]

#### Partial ranking functions of CR plus(V,V1,Out) 
* Partial RF of phase [25,26,27]:
  - RF of loop [25:1,27:1]:
    V1
  - RF of loop [26:1,27:1]:
    V


### Resulting Chains:plus(V,V1,Out) 
* [[25,26,27],28]
* [28]


### Merging Chains  plus/3 into  External patterns of execution 
* [[28]] --> 1 
* [[28,[25,26,27]]] --> 2 


### Specialization of cost equations proper/2 
* CE 13 is refined into CE [36] 
* CE 11 is refined into CE [37] 
* CE 12 is refined into CE [38] 


#### Refined cost equations proper/2 
* CE 36: proper(V,Out) = 0
     [V>=0,Out=0] 
* CE 37: proper(V,Out) = 1
     [Out=2,V=1] 
* CE 38: proper(V,Out) = 1
     [Out=1,V=0] 

### Cost equations --> "Loop" of proper/2 
* CEs [36] --> Loop 29 
* CEs [37] --> Loop 30 
* CEs [38] --> Loop 31 

#### Loops of proper/2 
* Loop 29: proper(V,Out) [V>=0,Out=0] 
* Loop 30: proper(V,Out) [Out=2,V=1] 
* Loop 31: proper(V,Out) [Out=1,V=0] 

### Ranking functions of CR proper(V,Out) 

#### Partial ranking functions of CR proper(V,Out) 


### Resulting Chains:proper(V,Out) 
* [31]
* [30]
* [29]


### Merging Chains  proper/2 into  External patterns of execution 
* [[31]] --> 1 
* [[30]] --> 2 
* [[29]] --> 3 


### Specialization of cost equations s/2 
* CE 21 is refined into CE [39] 
* CE 20 is refined into CE [40] 


#### Refined cost equations s/2 
* CE 39: s(V,Out) = 0
     [V>=0,Out=0] 
* CE 40: s(V,Out) = 1+ s(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of s/2 
* CEs [40] --> Loop 32 
* CEs [39] --> Loop 33 

#### Loops of s/2 
* Loop 32: s(V,Out)->  s(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 33: s(V,Out) [V>=0,Out=0] 

### Ranking functions of CR s(V,Out) 
* RF of phase [32]: [V]

#### Partial ranking functions of CR s(V,Out) 
* Partial RF of phase [32]:
  - RF of loop [32:1]:
    V


### Resulting Chains:s(V,Out) 
* [[32],33]
* [33]


### Merging Chains  s/2 into  External patterns of execution 
* [[33]] --> 1 
* [[33,[32]]] --> 2 


### Specialization of cost equations top/2 
* CE 10 is refined into CE [41] 
* CE 8 is refined into CE [42] 
* CE 9 is refined into CE [43,44,45] 


#### Refined cost equations top/2 
* CE 41: top(V,Out) = 0
     [V>=0,Out=0] 
* CE 42: top(V,Out) = 1+ top(V,Out)
     [V>=1] 
* CE 43: top(V,Out) = 1+ proper(W,X):1+ top(Y,Out)
     [Y=1,X=1,W=0,V=1] 
* CE 44: top(V,Out) = 1+ proper(W,X):2+ top(Y,Out)
     [Y=2,X=2,W=1,V=2] 
* CE 45: top(V,Out) = 1+ proper(W,X):3+ top(Y,Out)
     [W>=0,W+1=V,Y=0,X=0] 

### Cost equations --> "Loop" of top/2 
* CEs [45] --> Loop 34 
* CEs [44] --> Loop 35 
* CEs [42,43] --> Loop 36 
* CEs [41] --> Loop 37 

#### Loops of top/2 
* Loop 34: top(V,Out)->  top(V',Out)
                  [V>=1,V'=0] 
* Loop 35: top(V,Out)->  top(V',Out)
                  [V'=2,V=2] 
* Loop 36: top(V,Out)->  top(V,Out)
                  [V>=1] 
* Loop 37: top(V,Out) [V>=0,Out=0] 

### Ranking functions of CR top(V,Out) 

#### Partial ranking functions of CR top(V,Out) 


### Resulting Chains:top(V,Out) 
* [[35,36]]...
* [[35,36],37]
* [[35,36],34,37]
* [37]
* [34,37]


### Merging Chains  top/2 into  External patterns of execution 
* [[37,34],[37],[37,34,[35,36]],[37,[35,36]]] --> 1 
* [[[35,36]]] --> 2 


### Specialization of cost equations start/3 
* CE 2 is refined into CE [46,47] 
* CE 3 is refined into CE [48,49,50] 
* CE 4 is refined into CE [51,52] 
* CE 5 is refined into CE [53,54] 
* CE 6 is refined into CE [55,56] 
* CE 7 is refined into CE [57,58] 


#### Refined cost equations start/3 
* CE 46: start(V,V1,V2) = 0+ top(V,W2):1
     [V>=0,W2=0] 
* CE 47: start(V,V1,V2) = 0+ top(V,W2):2
     [V>=1] 
* CE 48: start(V,V1,V2) = 0+ proper(W2,X2):1
     [X2=1,W2=0,V=0] 
* CE 49: start(V,V1,V2) = 0+ proper(W2,X2):2
     [X2=2,W2=1,V=1] 
* CE 50: start(V,V1,V2) = 0+ proper(V,W2):3
     [V>=0,W2=0] 
* CE 51: start(V,V1,V2) = 0+ fun(V,V1,V2,W2):1
     [V2>=0,V1>=0,V>=0,W2=0] 
* CE 52: start(V,V1,V2) = 0+ fun(V,V1,V2,W2):2
     [V>=W2,W2>=1,V2>=0,V1>=0] 
* CE 53: start(V,V1,V2) = 0+ fun1(V,V1,V2,W2):1
     [V2>=0,V1>=0,V>=0,W2=0] 
* CE 54: start(V,V1,V2) = 0+ fun1(V,V1,V2,W2):2
     [V>=W2,W2>=1,V2>=0,V1>=0] 
* CE 55: start(V,V1,V2) = 0+ s(V,W2):1
     [V>=0,W2=0] 
* CE 56: start(V,V1,V2) = 0+ s(V,W2):2
     [V>=W2,W2>=1] 
* CE 57: start(V,V1,V2) = 0+ plus(V,V1,W2):1
     [V1>=0,V>=0,W2=0] 
* CE 58: start(V,V1,V2) = 0+ plus(V,V1,W2):2
     [V+V1>=W2,W2>=1,V1>=0,V>=0] 

### Cost equations --> "Loop" of start/3 
* CEs [49] --> Loop 38 
* CEs [46,48,50,51,52,53,54,55,56,57,58] --> Loop 39 
* CEs [47] --> Loop 40 

#### Loops of start/3 
* Loop 38: start(V,V1,V2) [V=1] 
* Loop 39: start(V,V1,V2) [V>=0] 
* Loop 40: start(V,V1,V2) [V>=1] 

### Ranking functions of CR start(V,V1,V2) 

#### Partial ranking functions of CR start(V,V1,V2) 


### Resulting Chains:start(V,V1,V2) 
* [40]...
* [39]
* [38]


### Merging Chains  start/3 into  External patterns of execution 
* [[38],[39]] --> 1 
* [[40]] --> 2 


Computing Bounds
=====================================

#### Cost of loops [19,20] 

 * loop 19:fun(V,V1,V2,Out) -> [fun(V',V1',V2',Out')] 
1
 * loop 20:fun(V,V1,V2,Out) -> [fun(V',V1',V2',Out')] 
1
#### Cost of phase [19,20]:fun(V,V1,V2,Out) -> [fun(V',V1',V2',Out')] 
1*it(19)+1*it(20)+0
  Such that:it(20) =< V1
it(20) =< V1-V1'
it(20) =< V2
it(20) =< V2-V2'
aux(1) =< V
aux(2) =< V-V'
it(19) =< aux(1)
it(20) =< aux(1)
it(19) =< aux(2)
it(20) =< aux(2)

#### Cost of chains of fun(V,V1,V2,Out):
* Chain [[19,20],21]: 1*it(19)+1*it(20)+0
  Such that:aux(1) =< V
it(20) =< V1
aux(2) =< Out
it(19) =< aux(1)
it(20) =< aux(1)
it(19) =< aux(2)
it(20) =< aux(2)

  with precondition: [V1>=0,V2>=0,Out>=1,V>=Out] 

* Chain [21]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0] 


#### Cost of loops [22,23] 

 * loop 22:fun1(V,V1,V2,Out) -> [fun1(V',V1',V2',Out')] 
1
 * loop 23:fun1(V,V1,V2,Out) -> [fun1(V',V1',V2',Out')] 
1
#### Cost of phase [22,23]:fun1(V,V1,V2,Out) -> [fun1(V',V1',V2',Out')] 
1*it(22)+1*it(23)+0
  Such that:it(23) =< V1
it(23) =< V1-V1'
it(23) =< V2
it(23) =< V2-V2'
aux(3) =< V
aux(4) =< V-V'
it(22) =< aux(3)
it(23) =< aux(3)
it(22) =< aux(4)
it(23) =< aux(4)

#### Cost of chains of fun1(V,V1,V2,Out):
* Chain [[22,23],24]: 1*it(22)+1*it(23)+0
  Such that:aux(3) =< V
it(23) =< V1
aux(4) =< Out
it(22) =< aux(3)
it(23) =< aux(3)
it(22) =< aux(4)
it(23) =< aux(4)

  with precondition: [V1>=0,V2>=0,Out>=1,V>=Out] 

* Chain [24]: 0
  with precondition: [Out=0,V>=0,V1>=0,V2>=0] 


#### Cost of loops [25,26,27] 

 * loop 25:plus(V,V1,Out) -> [plus(V',V1',Out')] 
1
 * loop 26:plus(V,V1,Out) -> [plus(V',V1',Out')] 
1
 * loop 27:plus(V,V1,Out) -> [plus(V',V1',Out')] 
1
#### Cost of phase [25,26,27]:plus(V,V1,Out) -> [plus(V',V1',Out')] 
1*it(25)+1*it(26)+1*it(27)+0
  Such that:aux(5) =< V
aux(6) =< V+V1
aux(7) =< V+V1-V'-V1'
aux(8) =< V-V'
aux(9) =< V1
aux(10) =< V1-V1'
it(26) =< aux(5)
it(27) =< aux(5)
it(25) =< aux(6)
it(26) =< aux(6)
it(27) =< aux(6)
it(25) =< aux(7)
it(26) =< aux(7)
it(27) =< aux(7)
it(26) =< aux(8)
it(27) =< aux(8)
it(25) =< aux(9)
it(27) =< aux(9)
it(25) =< aux(10)
it(27) =< aux(10)

#### Cost of chains of plus(V,V1,Out):
* Chain [[25,26,27],28]: 1*it(25)+1*it(26)+1*it(27)+0
  Such that:aux(11) =< V
aux(12) =< V+V1
aux(13) =< V1
it(26) =< aux(11)
it(27) =< aux(11)
it(25) =< aux(12)
it(26) =< aux(12)
it(27) =< aux(12)
it(25) =< aux(13)
it(27) =< aux(13)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [28]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of chains of proper(V,Out):
* Chain [31]: 1
  with precondition: [V=0,Out=1] 

* Chain [30]: 1
  with precondition: [V=1,Out=2] 

* Chain [29]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [32] 

 * loop 32:s(V,Out) -> [s(V',Out')] 
1
#### Cost of phase [32]:s(V,Out) -> [s(V',Out')] 
1*it(32)+0
  Such that:it(32) =< V
it(32) =< V-V'

#### Cost of chains of s(V,Out):
* Chain [[32],33]: 1*it(32)+0
  Such that:it(32) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [33]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [35,36] 

 * loop 35:top(V,Out) -> [top(V',Out')] 
2
 * loop 36:top(V,Out) -> [top(V',Out')] 
2
#### Cost of phase [35,36]:top(V,Out) -> [top(V',Out')] 
4*it(35)+0
#### Cost of phase [35,36]:top(V,Out) -> [top(V',Out')] 
4*it(35)+0
#### Cost of phase [35,36]:top(V,Out) -> [top(V',Out')] 
4*it(35)+0
#### Cost of chains of top(V,Out):
* Chain [[35,36]]...: 4*it(35)+0
  with precondition: [V>=1] 

* Chain [[35,36],37]: 4*it(35)+0
  with precondition: [Out=0,V>=1] 

* Chain [[35,36],34,37]: 4*it(35)+1
  with precondition: [Out=0,V>=1] 

* Chain [37]: 0
  with precondition: [Out=0,V>=0] 

* Chain [34,37]: 1
  with precondition: [Out=0,V>=1] 


#### Cost of chains of start(V,V1,V2):
* Chain [40]...: 4*s(3)+0
  with precondition: [V>=1] 

* Chain [39]: 1*s(4)+2*s(6)+3*s(8)+1*s(17)+1*s(18)+1*s(19)+1
  Such that:s(15) =< V+V1
aux(17) =< V
aux(18) =< V1
s(8) =< aux(17)
s(6) =< aux(18)
s(17) =< aux(17)
s(18) =< aux(17)
s(19) =< s(15)
s(17) =< s(15)
s(18) =< s(15)
s(19) =< aux(18)
s(18) =< aux(18)
s(6) =< aux(17)

  with precondition: [V>=0] 

* Chain [38]: 1
  with precondition: [V=1] 


Closed-form bounds of start(V,V1,V2): 
-------------------------------------
* Chain [40]... with precondition: [V>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [39] with precondition: [V>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [38] with precondition: [V=1] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V,V1,V2): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 15 ms.
* Invariants computed in 44 ms.
   - Backward Invariants 18 ms.
   - Transitive Invariants 12 ms.
* Refinement performed in 75 ms.
* Termination proved in 14 ms.
* Upper bounds computed in 72 ms.
   - Equation cost structures 25 ms.
   - Phase cost structures 28 ms.
   - Chain cost structures 25 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 257 ms.


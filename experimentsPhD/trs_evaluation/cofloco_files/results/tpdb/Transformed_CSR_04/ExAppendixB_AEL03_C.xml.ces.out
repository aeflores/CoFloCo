
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [cons/3]
1. recursive  : [cons2/3]
2. recursive  : [from/2]
3. recursive  : [fun/3]
4. recursive  : [fun1/3]
5. recursive  : [negrecip/2]
6. recursive  : [pi/2]
7. recursive  : [plus/3]
8. recursive  : [posrecip/2]
9. non_recursive  : [proper/2]
10. recursive  : [rcons/3]
11. recursive  : [s/2]
12. recursive  : [square/2]
13. recursive  : [times/3]
14. recursive  : [top/2]
15. non_recursive  : [start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into cons/3
1. SCC is partially evaluated into cons2/3
2. SCC is partially evaluated into from/2
3. SCC is partially evaluated into fun/3
4. SCC is partially evaluated into fun1/3
5. SCC is partially evaluated into negrecip/2
6. SCC is partially evaluated into pi/2
7. SCC is partially evaluated into plus/3
8. SCC is partially evaluated into posrecip/2
9. SCC is partially evaluated into proper/2
10. SCC is partially evaluated into rcons/3
11. SCC is partially evaluated into s/2
12. SCC is partially evaluated into square/2
13. SCC is partially evaluated into times/3
14. SCC is partially evaluated into top/2
15. SCC is partially evaluated into start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations cons/3 
* CE 39 is refined into CE [62] 
* CE 38 is refined into CE [63] 
* CE 37 is refined into CE [64] 


#### Refined cost equations cons/3 
* CE 62: cons(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 63: cons(V,V1,Out) = 1+ cons(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 64: cons(V,V1,Out) = 1+ cons(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of cons/3 
* CEs [63] --> Loop 46 
* CEs [64] --> Loop 47 
* CEs [62] --> Loop 48 

#### Loops of cons/3 
* Loop 46: cons(V,V1,Out)->  cons(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 47: cons(V,V1,Out)->  cons(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 48: cons(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR cons(V,V1,Out) 
* RF of phase [46,47]: [V]

#### Partial ranking functions of CR cons(V,V1,Out) 
* Partial RF of phase [46,47]:
  - RF of loop [46:1,47:1]:
    V
  - RF of loop [47:1]:
    V1


### Resulting Chains:cons(V,V1,Out) 
* [[46,47],48]
* [48]


### Merging Chains  cons/3 into  External patterns of execution 
* [[48]] --> 1 
* [[48,[46,47]]] --> 2 


### Specialization of cost equations cons2/3 
* CE 32 is refined into CE [65] 
* CE 31 is refined into CE [66] 
* CE 30 is refined into CE [67] 


#### Refined cost equations cons2/3 
* CE 65: cons2(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 66: cons2(V,V1,Out) = 1+ cons2(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 67: cons2(V,V1,Out) = 1+ cons2(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of cons2/3 
* CEs [66] --> Loop 49 
* CEs [67] --> Loop 50 
* CEs [65] --> Loop 51 

#### Loops of cons2/3 
* Loop 49: cons2(V,V1,Out)->  cons2(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 50: cons2(V,V1,Out)->  cons2(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 51: cons2(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR cons2(V,V1,Out) 
* RF of phase [49,50]: [V1]

#### Partial ranking functions of CR cons2(V,V1,Out) 
* Partial RF of phase [49,50]:
  - RF of loop [49:1,50:1]:
    V1
  - RF of loop [50:1]:
    V


### Resulting Chains:cons2(V,V1,Out) 
* [[49,50],51]
* [51]


### Merging Chains  cons2/3 into  External patterns of execution 
* [[51]] --> 1 
* [[51,[49,50]]] --> 2 


### Specialization of cost equations from/2 
* CE 29 is refined into CE [68] 
* CE 28 is refined into CE [69] 


#### Refined cost equations from/2 
* CE 68: from(V,Out) = 0
     [V>=0,Out=0] 
* CE 69: from(V,Out) = 1+ from(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of from/2 
* CEs [69] --> Loop 52 
* CEs [68] --> Loop 53 

#### Loops of from/2 
* Loop 52: from(V,Out)->  from(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 53: from(V,Out) [V>=0,Out=0] 

### Ranking functions of CR from(V,Out) 
* RF of phase [52]: [V]

#### Partial ranking functions of CR from(V,Out) 
* Partial RF of phase [52]:
  - RF of loop [52:1]:
    V


### Resulting Chains:from(V,Out) 
* [[52],53]
* [53]


### Merging Chains  from/2 into  External patterns of execution 
* [[53]] --> 1 
* [[53,[52]]] --> 2 


### Specialization of cost equations fun/3 
* CE 43 is refined into CE [70] 
* CE 40 is refined into CE [71] 
* CE 42 is refined into CE [72] 
* CE 41 is refined into CE [73] 


#### Refined cost equations fun/3 
* CE 70: fun(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 71: fun(V,V1,Out) = 1+ fun(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 72: fun(V,V1,Out) = 1+ fun(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 73: fun(V,V1,Out) = 1+ fun(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun/3 
* CEs [71] --> Loop 54 
* CEs [72] --> Loop 55 
* CEs [73] --> Loop 56 
* CEs [70] --> Loop 57 

#### Loops of fun/3 
* Loop 54: fun(V,V1,Out)->  fun(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 55: fun(V,V1,Out)->  fun(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 56: fun(V,V1,Out)->  fun(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 57: fun(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun(V,V1,Out) 
* RF of phase [54,55,56]: [V+V1]

#### Partial ranking functions of CR fun(V,V1,Out) 
* Partial RF of phase [54,55,56]:
  - RF of loop [54:1,56:1]:
    V1
  - RF of loop [55:1,56:1]:
    V


### Resulting Chains:fun(V,V1,Out) 
* [[54,55,56],57]
* [57]


### Merging Chains  fun/3 into  External patterns of execution 
* [[57]] --> 1 
* [[57,[54,55,56]]] --> 2 


### Specialization of cost equations fun1/3 
* CE 49 is refined into CE [74] 
* CE 48 is refined into CE [75] 
* CE 47 is refined into CE [76] 
* CE 46 is refined into CE [77] 


#### Refined cost equations fun1/3 
* CE 74: fun1(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 75: fun1(V,V1,Out) = 1+ fun1(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 76: fun1(V,V1,Out) = 1+ fun1(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 77: fun1(V,V1,Out) = 1+ fun1(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of fun1/3 
* CEs [75] --> Loop 58 
* CEs [76] --> Loop 59 
* CEs [77] --> Loop 60 
* CEs [74] --> Loop 61 

#### Loops of fun1/3 
* Loop 58: fun1(V,V1,Out)->  fun1(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 59: fun1(V,V1,Out)->  fun1(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 60: fun1(V,V1,Out)->  fun1(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 61: fun1(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR fun1(V,V1,Out) 
* RF of phase [58,59,60]: [V+V1]

#### Partial ranking functions of CR fun1(V,V1,Out) 
* Partial RF of phase [58,59,60]:
  - RF of loop [58:1,60:1]:
    V1
  - RF of loop [59:1,60:1]:
    V


### Resulting Chains:fun1(V,V1,Out) 
* [[58,59,60],61]
* [61]


### Merging Chains  fun1/3 into  External patterns of execution 
* [[61]] --> 1 
* [[61,[58,59,60]]] --> 2 


### Specialization of cost equations negrecip/2 
* CE 18 is refined into CE [78] 
* CE 17 is refined into CE [79] 


#### Refined cost equations negrecip/2 
* CE 78: negrecip(V,Out) = 0
     [V>=0,Out=0] 
* CE 79: negrecip(V,Out) = 1+ negrecip(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of negrecip/2 
* CEs [79] --> Loop 62 
* CEs [78] --> Loop 63 

#### Loops of negrecip/2 
* Loop 62: negrecip(V,Out)->  negrecip(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 63: negrecip(V,Out) [V>=0,Out=0] 

### Ranking functions of CR negrecip(V,Out) 
* RF of phase [62]: [V]

#### Partial ranking functions of CR negrecip(V,Out) 
* Partial RF of phase [62]:
  - RF of loop [62:1]:
    V


### Resulting Chains:negrecip(V,Out) 
* [[62],63]
* [63]


### Merging Chains  negrecip/2 into  External patterns of execution 
* [[63]] --> 1 
* [[63,[62]]] --> 2 


### Specialization of cost equations pi/2 
* CE 55 is refined into CE [80] 
* CE 54 is refined into CE [81] 


#### Refined cost equations pi/2 
* CE 80: pi(V,Out) = 0
     [V>=0,Out=0] 
* CE 81: pi(V,Out) = 1+ pi(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of pi/2 
* CEs [81] --> Loop 64 
* CEs [80] --> Loop 65 

#### Loops of pi/2 
* Loop 64: pi(V,Out)->  pi(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 65: pi(V,Out) [V>=0,Out=0] 

### Ranking functions of CR pi(V,Out) 
* RF of phase [64]: [V]

#### Partial ranking functions of CR pi(V,Out) 
* Partial RF of phase [64]:
  - RF of loop [64:1]:
    V


### Resulting Chains:pi(V,Out) 
* [[64],65]
* [65]


### Merging Chains  pi/2 into  External patterns of execution 
* [[65]] --> 1 
* [[65,[64]]] --> 2 


### Specialization of cost equations plus/3 
* CE 59 is refined into CE [82] 
* CE 57 is refined into CE [83] 
* CE 58 is refined into CE [84] 
* CE 56 is refined into CE [85] 


#### Refined cost equations plus/3 
* CE 82: plus(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 83: plus(V,V1,Out) = 1+ plus(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 84: plus(V,V1,Out) = 1+ plus(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 85: plus(V,V1,Out) = 1+ plus(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of plus/3 
* CEs [83] --> Loop 66 
* CEs [84] --> Loop 67 
* CEs [85] --> Loop 68 
* CEs [82] --> Loop 69 

#### Loops of plus/3 
* Loop 66: plus(V,V1,Out)->  plus(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 67: plus(V,V1,Out)->  plus(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 68: plus(V,V1,Out)->  plus(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 69: plus(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR plus(V,V1,Out) 
* RF of phase [66,67,68]: [V+V1]

#### Partial ranking functions of CR plus(V,V1,Out) 
* Partial RF of phase [66,67,68]:
  - RF of loop [66:1,68:1]:
    V1
  - RF of loop [67:1,68:1]:
    V


### Resulting Chains:plus(V,V1,Out) 
* [[66,67,68],69]
* [69]


### Merging Chains  plus/3 into  External patterns of execution 
* [[69]] --> 1 
* [[69,[66,67,68]]] --> 2 


### Specialization of cost equations posrecip/2 
* CE 27 is refined into CE [86] 
* CE 26 is refined into CE [87] 


#### Refined cost equations posrecip/2 
* CE 86: posrecip(V,Out) = 0
     [V>=0,Out=0] 
* CE 87: posrecip(V,Out) = 1+ posrecip(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of posrecip/2 
* CEs [87] --> Loop 70 
* CEs [86] --> Loop 71 

#### Loops of posrecip/2 
* Loop 70: posrecip(V,Out)->  posrecip(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 71: posrecip(V,Out) [V>=0,Out=0] 

### Ranking functions of CR posrecip(V,Out) 
* RF of phase [70]: [V]

#### Partial ranking functions of CR posrecip(V,Out) 
* Partial RF of phase [70]:
  - RF of loop [70:1]:
    V


### Resulting Chains:posrecip(V,Out) 
* [[70],71]
* [71]


### Merging Chains  posrecip/2 into  External patterns of execution 
* [[71]] --> 1 
* [[71,[70]]] --> 2 


### Specialization of cost equations proper/2 
* CE 53 is refined into CE [88] 
* CE 50 is refined into CE [89] 
* CE 51 is refined into CE [90] 
* CE 52 is refined into CE [91] 


#### Refined cost equations proper/2 
* CE 88: proper(V,Out) = 0
     [V>=0,Out=0] 
* CE 89: proper(V,Out) = 1
     [Out=3,V=2] 
* CE 90: proper(V,Out) = 1
     [Out=2,V=1] 
* CE 91: proper(V,Out) = 1
     [Out=1,V=0] 

### Cost equations --> "Loop" of proper/2 
* CEs [88] --> Loop 72 
* CEs [89] --> Loop 73 
* CEs [90] --> Loop 74 
* CEs [91] --> Loop 75 

#### Loops of proper/2 
* Loop 72: proper(V,Out) [V>=0,Out=0] 
* Loop 73: proper(V,Out) [Out=3,V=2] 
* Loop 74: proper(V,Out) [Out=2,V=1] 
* Loop 75: proper(V,Out) [Out=1,V=0] 

### Ranking functions of CR proper(V,Out) 

#### Partial ranking functions of CR proper(V,Out) 


### Resulting Chains:proper(V,Out) 
* [75]
* [74]
* [73]
* [72]


### Merging Chains  proper/2 into  External patterns of execution 
* [[75]] --> 1 
* [[74]] --> 2 
* [[73]] --> 3 
* [[72]] --> 4 


### Specialization of cost equations rcons/3 
* CE 36 is refined into CE [92] 
* CE 35 is refined into CE [93] 
* CE 33 is refined into CE [94] 
* CE 34 is refined into CE [95] 


#### Refined cost equations rcons/3 
* CE 92: rcons(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 93: rcons(V,V1,Out) = 1+ rcons(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 94: rcons(V,V1,Out) = 1+ rcons(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 95: rcons(V,V1,Out) = 1+ rcons(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of rcons/3 
* CEs [93] --> Loop 76 
* CEs [94] --> Loop 77 
* CEs [95] --> Loop 78 
* CEs [92] --> Loop 79 

#### Loops of rcons/3 
* Loop 76: rcons(V,V1,Out)->  rcons(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 77: rcons(V,V1,Out)->  rcons(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 78: rcons(V,V1,Out)->  rcons(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 79: rcons(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR rcons(V,V1,Out) 
* RF of phase [76,77,78]: [V+V1]

#### Partial ranking functions of CR rcons(V,V1,Out) 
* Partial RF of phase [76,77,78]:
  - RF of loop [76:1,78:1]:
    V1
  - RF of loop [77:1,78:1]:
    V


### Resulting Chains:rcons(V,V1,Out) 
* [[76,77,78],79]
* [79]


### Merging Chains  rcons/3 into  External patterns of execution 
* [[79]] --> 1 
* [[79,[76,77,78]]] --> 2 


### Specialization of cost equations s/2 
* CE 61 is refined into CE [96] 
* CE 60 is refined into CE [97] 


#### Refined cost equations s/2 
* CE 96: s(V,Out) = 0
     [V>=0,Out=0] 
* CE 97: s(V,Out) = 1+ s(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of s/2 
* CEs [97] --> Loop 80 
* CEs [96] --> Loop 81 

#### Loops of s/2 
* Loop 80: s(V,Out)->  s(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 81: s(V,Out) [V>=0,Out=0] 

### Ranking functions of CR s(V,Out) 
* RF of phase [80]: [V]

#### Partial ranking functions of CR s(V,Out) 
* Partial RF of phase [80]:
  - RF of loop [80:1]:
    V


### Resulting Chains:s(V,Out) 
* [[80],81]
* [81]


### Merging Chains  s/2 into  External patterns of execution 
* [[81]] --> 1 
* [[81,[80]]] --> 2 


### Specialization of cost equations square/2 
* CE 45 is refined into CE [98] 
* CE 44 is refined into CE [99] 


#### Refined cost equations square/2 
* CE 98: square(V,Out) = 0
     [V>=0,Out=0] 
* CE 99: square(V,Out) = 1+ square(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of square/2 
* CEs [99] --> Loop 82 
* CEs [98] --> Loop 83 

#### Loops of square/2 
* Loop 82: square(V,Out)->  square(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 83: square(V,Out) [V>=0,Out=0] 

### Ranking functions of CR square(V,Out) 
* RF of phase [82]: [V]

#### Partial ranking functions of CR square(V,Out) 
* Partial RF of phase [82]:
  - RF of loop [82:1]:
    V


### Resulting Chains:square(V,Out) 
* [[82],83]
* [83]


### Merging Chains  square/2 into  External patterns of execution 
* [[83]] --> 1 
* [[83,[82]]] --> 2 


### Specialization of cost equations times/3 
* CE 22 is refined into CE [100] 
* CE 20 is refined into CE [101] 
* CE 21 is refined into CE [102] 
* CE 19 is refined into CE [103] 


#### Refined cost equations times/3 
* CE 100: times(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 101: times(V,V1,Out) = 1+ times(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 102: times(V,V1,Out) = 1+ times(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 103: times(V,V1,Out) = 1+ times(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of times/3 
* CEs [101] --> Loop 84 
* CEs [102] --> Loop 85 
* CEs [103] --> Loop 86 
* CEs [100] --> Loop 87 

#### Loops of times/3 
* Loop 84: times(V,V1,Out)->  times(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 85: times(V,V1,Out)->  times(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 86: times(V,V1,Out)->  times(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 87: times(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR times(V,V1,Out) 
* RF of phase [84,85,86]: [V+V1]

#### Partial ranking functions of CR times(V,V1,Out) 
* Partial RF of phase [84,85,86]:
  - RF of loop [84:1,86:1]:
    V1
  - RF of loop [85:1,86:1]:
    V


### Resulting Chains:times(V,V1,Out) 
* [[84,85,86],87]
* [87]


### Merging Chains  times/3 into  External patterns of execution 
* [[87]] --> 1 
* [[87,[84,85,86]]] --> 2 


### Specialization of cost equations top/2 
* CE 25 is refined into CE [104] 
* CE 23 is refined into CE [105] 
* CE 24 is refined into CE [106,107,108,109] 


#### Refined cost equations top/2 
* CE 104: top(V,Out) = 0
     [V>=0,Out=0] 
* CE 105: top(V,Out) = 1+ top(V,Out)
     [V>=1] 
* CE 106: top(V,Out) = 1+ proper(W,X):1+ top(Y,Out)
     [Y=1,X=1,W=0,V=1] 
* CE 107: top(V,Out) = 1+ proper(W,X):2+ top(Y,Out)
     [Y=2,X=2,W=1,V=2] 
* CE 108: top(V,Out) = 1+ proper(W,X):3+ top(Y,Out)
     [Y=3,X=3,W=2,V=3] 
* CE 109: top(V,Out) = 1+ proper(W,X):4+ top(Y,Out)
     [W>=0,W+1=V,Y=0,X=0] 

### Cost equations --> "Loop" of top/2 
* CEs [109] --> Loop 88 
* CEs [108] --> Loop 89 
* CEs [107] --> Loop 90 
* CEs [105,106] --> Loop 91 
* CEs [104] --> Loop 92 

#### Loops of top/2 
* Loop 88: top(V,Out)->  top(V',Out)
                  [V>=1,V'=0] 
* Loop 89: top(V,Out)->  top(V',Out)
                  [V'=3,V=3] 
* Loop 90: top(V,Out)->  top(V',Out)
                  [V'=2,V=2] 
* Loop 91: top(V,Out)->  top(V,Out)
                  [V>=1] 
* Loop 92: top(V,Out) [V>=0,Out=0] 

### Ranking functions of CR top(V,Out) 

#### Partial ranking functions of CR top(V,Out) 


### Resulting Chains:top(V,Out) 
* [[89,90,91]]...
* [[89,90,91],92]
* [[89,90,91],88,92]
* [92]
* [88,92]


### Merging Chains  top/2 into  External patterns of execution 
* [[92,88],[92],[92,88,[89,90,91]],[92,[89,90,91]]] --> 1 
* [[[89,90,91]]] --> 2 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [110,111] 
* CE 3 is refined into CE [112,113] 
* CE 4 is refined into CE [114,115] 
* CE 5 is refined into CE [116,117] 
* CE 6 is refined into CE [118,119] 
* CE 7 is refined into CE [120,121] 
* CE 8 is refined into CE [122,123] 
* CE 9 is refined into CE [124,125] 
* CE 10 is refined into CE [126,127] 
* CE 11 is refined into CE [128,129] 
* CE 12 is refined into CE [130,131] 
* CE 13 is refined into CE [132,133,134,135] 
* CE 14 is refined into CE [136,137] 
* CE 15 is refined into CE [138,139] 
* CE 16 is refined into CE [140,141] 


#### Refined cost equations start/2 
* CE 110: start(V,V1) = 0+ negrecip(V,W1):1
     [V>=0,W1=0] 
* CE 111: start(V,V1) = 0+ negrecip(V,W1):2
     [V>=W1,W1>=1] 
* CE 112: start(V,V1) = 0+ times(V,V1,W1):1
     [V1>=0,V>=0,W1=0] 
* CE 113: start(V,V1) = 0+ times(V,V1,W1):2
     [V+V1>=W1,W1>=1,V1>=0,V>=0] 
* CE 114: start(V,V1) = 0+ top(V,W1):1
     [V>=0,W1=0] 
* CE 115: start(V,V1) = 0+ top(V,W1):2
     [V>=1] 
* CE 116: start(V,V1) = 0+ posrecip(V,W1):1
     [V>=0,W1=0] 
* CE 117: start(V,V1) = 0+ posrecip(V,W1):2
     [V>=W1,W1>=1] 
* CE 118: start(V,V1) = 0+ from(V,W1):1
     [V>=0,W1=0] 
* CE 119: start(V,V1) = 0+ from(V,W1):2
     [V>=W1,W1>=1] 
* CE 120: start(V,V1) = 0+ cons2(V,V1,W1):1
     [V1>=0,V>=0,W1=0] 
* CE 121: start(V,V1) = 0+ cons2(V,V1,W1):2
     [V1>=W1,W1>=1,V>=0] 
* CE 122: start(V,V1) = 0+ rcons(V,V1,W1):1
     [V1>=0,V>=0,W1=0] 
* CE 123: start(V,V1) = 0+ rcons(V,V1,W1):2
     [V+V1>=W1,W1>=1,V1>=0,V>=0] 
* CE 124: start(V,V1) = 0+ cons(V,V1,W1):1
     [V1>=0,V>=0,W1=0] 
* CE 125: start(V,V1) = 0+ cons(V,V1,W1):2
     [V>=W1,W1>=1,V1>=0] 
* CE 126: start(V,V1) = 0+ fun(V,V1,W1):1
     [V1>=0,V>=0,W1=0] 
* CE 127: start(V,V1) = 0+ fun(V,V1,W1):2
     [V+V1>=W1,W1>=1,V1>=0,V>=0] 
* CE 128: start(V,V1) = 0+ square(V,W1):1
     [V>=0,W1=0] 
* CE 129: start(V,V1) = 0+ square(V,W1):2
     [V>=W1,W1>=1] 
* CE 130: start(V,V1) = 0+ fun1(V,V1,W1):1
     [V1>=0,V>=0,W1=0] 
* CE 131: start(V,V1) = 0+ fun1(V,V1,W1):2
     [V+V1>=W1,W1>=1,V1>=0,V>=0] 
* CE 132: start(V,V1) = 0+ proper(W1,X1):1
     [X1=1,W1=0,V=0] 
* CE 133: start(V,V1) = 0+ proper(W1,X1):2
     [X1=2,W1=1,V=1] 
* CE 134: start(V,V1) = 0+ proper(W1,X1):3
     [X1=3,W1=2,V=2] 
* CE 135: start(V,V1) = 0+ proper(V,W1):4
     [V>=0,W1=0] 
* CE 136: start(V,V1) = 0+ pi(V,W1):1
     [V>=0,W1=0] 
* CE 137: start(V,V1) = 0+ pi(V,W1):2
     [V>=W1,W1>=1] 
* CE 138: start(V,V1) = 0+ plus(V,V1,W1):1
     [V1>=0,V>=0,W1=0] 
* CE 139: start(V,V1) = 0+ plus(V,V1,W1):2
     [V+V1>=W1,W1>=1,V1>=0,V>=0] 
* CE 140: start(V,V1) = 0+ s(V,W1):1
     [V>=0,W1=0] 
* CE 141: start(V,V1) = 0+ s(V,W1):2
     [V>=W1,W1>=1] 

### Cost equations --> "Loop" of start/2 
* CEs [134] --> Loop 93 
* CEs [133] --> Loop 94 
* CEs [110,111,112,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,135,136,137,138,139,140,141] --> Loop 95 
* CEs [115] --> Loop 96 

#### Loops of start/2 
* Loop 93: start(V,V1) [V=2] 
* Loop 94: start(V,V1) [V=1] 
* Loop 95: start(V,V1) [V>=0] 
* Loop 96: start(V,V1) [V>=1] 

### Ranking functions of CR start(V,V1) 

#### Partial ranking functions of CR start(V,V1) 


### Resulting Chains:start(V,V1) 
* [96]...
* [95]
* [94]
* [93]


### Merging Chains  start/2 into  External patterns of execution 
* [[94],[95]] --> 1 
* [[93]] --> 2 
* [[96]] --> 3 


Computing Bounds
=====================================

#### Cost of loops [46,47] 

 * loop 46:cons(V,V1,Out) -> [cons(V',V1',Out')] 
1
 * loop 47:cons(V,V1,Out) -> [cons(V',V1',Out')] 
1
#### Cost of phase [46,47]:cons(V,V1,Out) -> [cons(V',V1',Out')] 
1*it(46)+1*it(47)+0
  Such that:it(47) =< V1
it(47) =< V1-V1'
aux(1) =< V
aux(2) =< V-V'
it(46) =< aux(1)
it(47) =< aux(1)
it(46) =< aux(2)
it(47) =< aux(2)

#### Cost of chains of cons(V,V1,Out):
* Chain [[46,47],48]: 1*it(46)+1*it(47)+0
  Such that:aux(1) =< V
it(47) =< V1
aux(2) =< Out
it(46) =< aux(1)
it(47) =< aux(1)
it(46) =< aux(2)
it(47) =< aux(2)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [48]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [49,50] 

 * loop 49:cons2(V,V1,Out) -> [cons2(V',V1',Out')] 
1
 * loop 50:cons2(V,V1,Out) -> [cons2(V',V1',Out')] 
1
#### Cost of phase [49,50]:cons2(V,V1,Out) -> [cons2(V',V1',Out')] 
1*it(49)+1*it(50)+0
  Such that:it(50) =< V
it(50) =< V-V'
aux(3) =< V1
aux(4) =< V1-V1'
it(49) =< aux(3)
it(50) =< aux(3)
it(49) =< aux(4)
it(50) =< aux(4)

#### Cost of chains of cons2(V,V1,Out):
* Chain [[49,50],51]: 1*it(49)+1*it(50)+0
  Such that:it(50) =< V
aux(3) =< V1
aux(4) =< Out
it(49) =< aux(3)
it(50) =< aux(3)
it(49) =< aux(4)
it(50) =< aux(4)

  with precondition: [V>=0,Out>=1,V1>=Out] 

* Chain [51]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [52] 

 * loop 52:from(V,Out) -> [from(V',Out')] 
1
#### Cost of phase [52]:from(V,Out) -> [from(V',Out')] 
1*it(52)+0
  Such that:it(52) =< V
it(52) =< V-V'

#### Cost of chains of from(V,Out):
* Chain [[52],53]: 1*it(52)+0
  Such that:it(52) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [53]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [54,55,56] 

 * loop 54:fun(V,V1,Out) -> [fun(V',V1',Out')] 
1
 * loop 55:fun(V,V1,Out) -> [fun(V',V1',Out')] 
1
 * loop 56:fun(V,V1,Out) -> [fun(V',V1',Out')] 
1
#### Cost of phase [54,55,56]:fun(V,V1,Out) -> [fun(V',V1',Out')] 
1*it(54)+1*it(55)+1*it(56)+0
  Such that:aux(5) =< V
aux(6) =< V+V1
aux(7) =< V+V1-V'-V1'
aux(8) =< V-V'
aux(9) =< V1
aux(10) =< V1-V1'
it(55) =< aux(5)
it(56) =< aux(5)
it(54) =< aux(6)
it(55) =< aux(6)
it(56) =< aux(6)
it(54) =< aux(7)
it(55) =< aux(7)
it(56) =< aux(7)
it(55) =< aux(8)
it(56) =< aux(8)
it(54) =< aux(9)
it(56) =< aux(9)
it(54) =< aux(10)
it(56) =< aux(10)

#### Cost of chains of fun(V,V1,Out):
* Chain [[54,55,56],57]: 1*it(54)+1*it(55)+1*it(56)+0
  Such that:aux(11) =< V
aux(12) =< V+V1
aux(13) =< V1
it(55) =< aux(11)
it(56) =< aux(11)
it(54) =< aux(12)
it(55) =< aux(12)
it(56) =< aux(12)
it(54) =< aux(13)
it(56) =< aux(13)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [57]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [58,59,60] 

 * loop 58:fun1(V,V1,Out) -> [fun1(V',V1',Out')] 
1
 * loop 59:fun1(V,V1,Out) -> [fun1(V',V1',Out')] 
1
 * loop 60:fun1(V,V1,Out) -> [fun1(V',V1',Out')] 
1
#### Cost of phase [58,59,60]:fun1(V,V1,Out) -> [fun1(V',V1',Out')] 
1*it(58)+1*it(59)+1*it(60)+0
  Such that:aux(14) =< V
aux(15) =< V+V1
aux(16) =< V+V1-V'-V1'
aux(17) =< V-V'
aux(18) =< V1
aux(19) =< V1-V1'
it(59) =< aux(14)
it(60) =< aux(14)
it(58) =< aux(15)
it(59) =< aux(15)
it(60) =< aux(15)
it(58) =< aux(16)
it(59) =< aux(16)
it(60) =< aux(16)
it(59) =< aux(17)
it(60) =< aux(17)
it(58) =< aux(18)
it(60) =< aux(18)
it(58) =< aux(19)
it(60) =< aux(19)

#### Cost of chains of fun1(V,V1,Out):
* Chain [[58,59,60],61]: 1*it(58)+1*it(59)+1*it(60)+0
  Such that:aux(20) =< V
aux(21) =< V+V1
aux(22) =< V1
it(59) =< aux(20)
it(60) =< aux(20)
it(58) =< aux(21)
it(59) =< aux(21)
it(60) =< aux(21)
it(58) =< aux(22)
it(60) =< aux(22)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [61]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [62] 

 * loop 62:negrecip(V,Out) -> [negrecip(V',Out')] 
1
#### Cost of phase [62]:negrecip(V,Out) -> [negrecip(V',Out')] 
1*it(62)+0
  Such that:it(62) =< V
it(62) =< V-V'

#### Cost of chains of negrecip(V,Out):
* Chain [[62],63]: 1*it(62)+0
  Such that:it(62) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [63]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [64] 

 * loop 64:pi(V,Out) -> [pi(V',Out')] 
1
#### Cost of phase [64]:pi(V,Out) -> [pi(V',Out')] 
1*it(64)+0
  Such that:it(64) =< V
it(64) =< V-V'

#### Cost of chains of pi(V,Out):
* Chain [[64],65]: 1*it(64)+0
  Such that:it(64) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [65]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [66,67,68] 

 * loop 66:plus(V,V1,Out) -> [plus(V',V1',Out')] 
1
 * loop 67:plus(V,V1,Out) -> [plus(V',V1',Out')] 
1
 * loop 68:plus(V,V1,Out) -> [plus(V',V1',Out')] 
1
#### Cost of phase [66,67,68]:plus(V,V1,Out) -> [plus(V',V1',Out')] 
1*it(66)+1*it(67)+1*it(68)+0
  Such that:aux(23) =< V
aux(24) =< V+V1
aux(25) =< V+V1-V'-V1'
aux(26) =< V-V'
aux(27) =< V1
aux(28) =< V1-V1'
it(67) =< aux(23)
it(68) =< aux(23)
it(66) =< aux(24)
it(67) =< aux(24)
it(68) =< aux(24)
it(66) =< aux(25)
it(67) =< aux(25)
it(68) =< aux(25)
it(67) =< aux(26)
it(68) =< aux(26)
it(66) =< aux(27)
it(68) =< aux(27)
it(66) =< aux(28)
it(68) =< aux(28)

#### Cost of chains of plus(V,V1,Out):
* Chain [[66,67,68],69]: 1*it(66)+1*it(67)+1*it(68)+0
  Such that:aux(29) =< V
aux(30) =< V+V1
aux(31) =< V1
it(67) =< aux(29)
it(68) =< aux(29)
it(66) =< aux(30)
it(67) =< aux(30)
it(68) =< aux(30)
it(66) =< aux(31)
it(68) =< aux(31)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [69]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [70] 

 * loop 70:posrecip(V,Out) -> [posrecip(V',Out')] 
1
#### Cost of phase [70]:posrecip(V,Out) -> [posrecip(V',Out')] 
1*it(70)+0
  Such that:it(70) =< V
it(70) =< V-V'

#### Cost of chains of posrecip(V,Out):
* Chain [[70],71]: 1*it(70)+0
  Such that:it(70) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [71]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of chains of proper(V,Out):
* Chain [75]: 1
  with precondition: [V=0,Out=1] 

* Chain [74]: 1
  with precondition: [V=1,Out=2] 

* Chain [73]: 1
  with precondition: [V=2,Out=3] 

* Chain [72]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [76,77,78] 

 * loop 76:rcons(V,V1,Out) -> [rcons(V',V1',Out')] 
1
 * loop 77:rcons(V,V1,Out) -> [rcons(V',V1',Out')] 
1
 * loop 78:rcons(V,V1,Out) -> [rcons(V',V1',Out')] 
1
#### Cost of phase [76,77,78]:rcons(V,V1,Out) -> [rcons(V',V1',Out')] 
1*it(76)+1*it(77)+1*it(78)+0
  Such that:aux(32) =< V
aux(33) =< V+V1
aux(34) =< V+V1-V'-V1'
aux(35) =< V-V'
aux(36) =< V1
aux(37) =< V1-V1'
it(77) =< aux(32)
it(78) =< aux(32)
it(76) =< aux(33)
it(77) =< aux(33)
it(78) =< aux(33)
it(76) =< aux(34)
it(77) =< aux(34)
it(78) =< aux(34)
it(77) =< aux(35)
it(78) =< aux(35)
it(76) =< aux(36)
it(78) =< aux(36)
it(76) =< aux(37)
it(78) =< aux(37)

#### Cost of chains of rcons(V,V1,Out):
* Chain [[76,77,78],79]: 1*it(76)+1*it(77)+1*it(78)+0
  Such that:aux(38) =< V
aux(39) =< V+V1
aux(40) =< V1
it(77) =< aux(38)
it(78) =< aux(38)
it(76) =< aux(39)
it(77) =< aux(39)
it(78) =< aux(39)
it(76) =< aux(40)
it(78) =< aux(40)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [79]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [80] 

 * loop 80:s(V,Out) -> [s(V',Out')] 
1
#### Cost of phase [80]:s(V,Out) -> [s(V',Out')] 
1*it(80)+0
  Such that:it(80) =< V
it(80) =< V-V'

#### Cost of chains of s(V,Out):
* Chain [[80],81]: 1*it(80)+0
  Such that:it(80) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [81]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [82] 

 * loop 82:square(V,Out) -> [square(V',Out')] 
1
#### Cost of phase [82]:square(V,Out) -> [square(V',Out')] 
1*it(82)+0
  Such that:it(82) =< V
it(82) =< V-V'

#### Cost of chains of square(V,Out):
* Chain [[82],83]: 1*it(82)+0
  Such that:it(82) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [83]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [84,85,86] 

 * loop 84:times(V,V1,Out) -> [times(V',V1',Out')] 
1
 * loop 85:times(V,V1,Out) -> [times(V',V1',Out')] 
1
 * loop 86:times(V,V1,Out) -> [times(V',V1',Out')] 
1
#### Cost of phase [84,85,86]:times(V,V1,Out) -> [times(V',V1',Out')] 
1*it(84)+1*it(85)+1*it(86)+0
  Such that:aux(41) =< V
aux(42) =< V+V1
aux(43) =< V+V1-V'-V1'
aux(44) =< V-V'
aux(45) =< V1
aux(46) =< V1-V1'
it(85) =< aux(41)
it(86) =< aux(41)
it(84) =< aux(42)
it(85) =< aux(42)
it(86) =< aux(42)
it(84) =< aux(43)
it(85) =< aux(43)
it(86) =< aux(43)
it(85) =< aux(44)
it(86) =< aux(44)
it(84) =< aux(45)
it(86) =< aux(45)
it(84) =< aux(46)
it(86) =< aux(46)

#### Cost of chains of times(V,V1,Out):
* Chain [[84,85,86],87]: 1*it(84)+1*it(85)+1*it(86)+0
  Such that:aux(47) =< V
aux(48) =< V+V1
aux(49) =< V1
it(85) =< aux(47)
it(86) =< aux(47)
it(84) =< aux(48)
it(85) =< aux(48)
it(86) =< aux(48)
it(84) =< aux(49)
it(86) =< aux(49)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [87]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [89,90,91] 

 * loop 89:top(V,Out) -> [top(V',Out')] 
2
 * loop 90:top(V,Out) -> [top(V',Out')] 
2
 * loop 91:top(V,Out) -> [top(V',Out')] 
2
#### Cost of phase [89,90,91]:top(V,Out) -> [top(V',Out')] 
6*it(89)+0
#### Cost of phase [89,90,91]:top(V,Out) -> [top(V',Out')] 
6*it(89)+0
#### Cost of phase [89,90,91]:top(V,Out) -> [top(V',Out')] 
6*it(89)+0
#### Cost of chains of top(V,Out):
* Chain [[89,90,91]]...: 6*it(89)+0
  with precondition: [V>=1] 

* Chain [[89,90,91],92]: 6*it(89)+0
  with precondition: [Out=0,V>=1] 

* Chain [[89,90,91],88,92]: 6*it(89)+1
  with precondition: [Out=0,V>=1] 

* Chain [92]: 0
  with precondition: [Out=0,V>=0] 

* Chain [88,92]: 1
  with precondition: [Out=0,V>=1] 


#### Cost of chains of start(V,V1):
* Chain [96]...: 6*s(3)+0
  with precondition: [V>=1] 

* Chain [95]: 7*s(4)+5*s(8)+5*s(9)+5*s(10)+1*s(11)+2*s(14)+1*s(17)+1
  Such that:aux(53) =< V
aux(54) =< V+V1
aux(55) =< V1
s(4) =< aux(53)
s(14) =< aux(53)
s(14) =< aux(55)
s(8) =< aux(53)
s(9) =< aux(53)
s(10) =< aux(54)
s(8) =< aux(54)
s(9) =< aux(54)
s(10) =< aux(55)
s(9) =< aux(55)
s(17) =< aux(55)

  with precondition: [V>=0] 

* Chain [94]: 1
  with precondition: [V=1] 

* Chain [93]: 1
  with precondition: [V=2] 


Closed-form bounds of start(V,V1): 
-------------------------------------
* Chain [96]... with precondition: [V>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [95] with precondition: [V>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [94] with precondition: [V=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [93] with precondition: [V=2] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V,V1): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 34 ms.
* Invariants computed in 104 ms.
   - Backward Invariants 41 ms.
   - Transitive Invariants 31 ms.
* Refinement performed in 169 ms.
* Termination proved in 31 ms.
* Upper bounds computed in 178 ms.
   - Equation cost structures 60 ms.
   - Phase cost structures 79 ms.
   - Chain cost structures 54 ms.
   - Solving cost expressions 1 ms.
* Total analysis performed in 587 ms.


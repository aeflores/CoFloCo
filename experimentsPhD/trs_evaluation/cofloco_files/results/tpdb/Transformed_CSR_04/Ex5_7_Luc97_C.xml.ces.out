
Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [cons/3]
1. recursive  : [dbl/2]
2. recursive  : [dbl1/2]
3. recursive  : [dbls/2]
4. recursive  : [from/2]
5. recursive  : [indx/3]
6. non_recursive  : [proper/2]
7. recursive  : [quote/2]
8. recursive  : [s/2]
9. recursive  : [s1/2]
10. recursive  : [sel/3]
11. recursive  : [sel1/3]
12. recursive  : [top/2]
13. non_recursive  : [start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into cons/3
1. SCC is partially evaluated into dbl/2
2. SCC is partially evaluated into dbl1/2
3. SCC is partially evaluated into dbls/2
4. SCC is partially evaluated into from/2
5. SCC is partially evaluated into indx/3
6. SCC is partially evaluated into proper/2
7. SCC is partially evaluated into quote/2
8. SCC is partially evaluated into s/2
9. SCC is partially evaluated into s1/2
10. SCC is partially evaluated into sel/3
11. SCC is partially evaluated into sel1/3
12. SCC is partially evaluated into top/2
13. SCC is partially evaluated into start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations cons/3 
* CE 27 is refined into CE [49] 
* CE 26 is refined into CE [50] 


#### Refined cost equations cons/3 
* CE 49: cons(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 50: cons(V,V1,Out) = 1+ cons(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of cons/3 
* CEs [50] --> Loop 35 
* CEs [49] --> Loop 36 

#### Loops of cons/3 
* Loop 35: cons(V,V1,Out)->  cons(V',V1',Out')
                  [V1'>=0,V'>=0,Out=Out'+1,V1'+1=V1,V'+1=V] 
* Loop 36: cons(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR cons(V,V1,Out) 
* RF of phase [35]: [V,V1]

#### Partial ranking functions of CR cons(V,V1,Out) 
* Partial RF of phase [35]:
  - RF of loop [35:1]:
    V
    V1


### Resulting Chains:cons(V,V1,Out) 
* [[35],36]
* [36]


### Merging Chains  cons/3 into  External patterns of execution 
* [[36]] --> 1 
* [[36,[35]]] --> 2 


### Specialization of cost equations dbl/2 
* CE 21 is refined into CE [51] 
* CE 20 is refined into CE [52] 


#### Refined cost equations dbl/2 
* CE 51: dbl(V,Out) = 0
     [V>=0,Out=0] 
* CE 52: dbl(V,Out) = 1+ dbl(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of dbl/2 
* CEs [52] --> Loop 37 
* CEs [51] --> Loop 38 

#### Loops of dbl/2 
* Loop 37: dbl(V,Out)->  dbl(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 38: dbl(V,Out) [V>=0,Out=0] 

### Ranking functions of CR dbl(V,Out) 
* RF of phase [37]: [V]

#### Partial ranking functions of CR dbl(V,Out) 
* Partial RF of phase [37]:
  - RF of loop [37:1]:
    V


### Resulting Chains:dbl(V,Out) 
* [[37],38]
* [38]


### Merging Chains  dbl/2 into  External patterns of execution 
* [[38]] --> 1 
* [[38,[37]]] --> 2 


### Specialization of cost equations dbl1/2 
* CE 29 is refined into CE [53] 
* CE 28 is refined into CE [54] 


#### Refined cost equations dbl1/2 
* CE 53: dbl1(V,Out) = 0
     [V>=0,Out=0] 
* CE 54: dbl1(V,Out) = 1+ dbl1(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of dbl1/2 
* CEs [54] --> Loop 39 
* CEs [53] --> Loop 40 

#### Loops of dbl1/2 
* Loop 39: dbl1(V,Out)->  dbl1(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 40: dbl1(V,Out) [V>=0,Out=0] 

### Ranking functions of CR dbl1(V,Out) 
* RF of phase [39]: [V]

#### Partial ranking functions of CR dbl1(V,Out) 
* Partial RF of phase [39]:
  - RF of loop [39:1]:
    V


### Resulting Chains:dbl1(V,Out) 
* [[39],40]
* [40]


### Merging Chains  dbl1/2 into  External patterns of execution 
* [[40]] --> 1 
* [[40,[39]]] --> 2 


### Specialization of cost equations dbls/2 
* CE 48 is refined into CE [55] 
* CE 47 is refined into CE [56] 


#### Refined cost equations dbls/2 
* CE 55: dbls(V,Out) = 0
     [V>=0,Out=0] 
* CE 56: dbls(V,Out) = 1+ dbls(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of dbls/2 
* CEs [56] --> Loop 41 
* CEs [55] --> Loop 42 

#### Loops of dbls/2 
* Loop 41: dbls(V,Out)->  dbls(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 42: dbls(V,Out) [V>=0,Out=0] 

### Ranking functions of CR dbls(V,Out) 
* RF of phase [41]: [V]

#### Partial ranking functions of CR dbls(V,Out) 
* Partial RF of phase [41]:
  - RF of loop [41:1]:
    V


### Resulting Chains:dbls(V,Out) 
* [[41],42]
* [42]


### Merging Chains  dbls/2 into  External patterns of execution 
* [[42]] --> 1 
* [[42,[41]]] --> 2 


### Specialization of cost equations from/2 
* CE 19 is refined into CE [57] 
* CE 18 is refined into CE [58] 


#### Refined cost equations from/2 
* CE 57: from(V,Out) = 0
     [V>=0,Out=0] 
* CE 58: from(V,Out) = 1+ from(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of from/2 
* CEs [58] --> Loop 43 
* CEs [57] --> Loop 44 

#### Loops of from/2 
* Loop 43: from(V,Out)->  from(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 44: from(V,Out) [V>=0,Out=0] 

### Ranking functions of CR from(V,Out) 
* RF of phase [43]: [V]

#### Partial ranking functions of CR from(V,Out) 
* Partial RF of phase [43]:
  - RF of loop [43:1]:
    V


### Resulting Chains:from(V,Out) 
* [[43],44]
* [44]


### Merging Chains  from/2 into  External patterns of execution 
* [[44]] --> 1 
* [[44,[43]]] --> 2 


### Specialization of cost equations indx/3 
* CE 40 is refined into CE [59] 
* CE 38 is refined into CE [60] 
* CE 39 is refined into CE [61] 


#### Refined cost equations indx/3 
* CE 59: indx(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 60: indx(V,V1,Out) = 1+ indx(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 61: indx(V,V1,Out) = 1+ indx(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of indx/3 
* CEs [60] --> Loop 45 
* CEs [61] --> Loop 46 
* CEs [59] --> Loop 47 

#### Loops of indx/3 
* Loop 45: indx(V,V1,Out)->  indx(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 46: indx(V,V1,Out)->  indx(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 47: indx(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR indx(V,V1,Out) 
* RF of phase [45,46]: [V]

#### Partial ranking functions of CR indx(V,V1,Out) 
* Partial RF of phase [45,46]:
  - RF of loop [45:1,46:1]:
    V
  - RF of loop [46:1]:
    V1


### Resulting Chains:indx(V,V1,Out) 
* [[45,46],47]
* [47]


### Merging Chains  indx/3 into  External patterns of execution 
* [[47]] --> 1 
* [[47,[45,46]]] --> 2 


### Specialization of cost equations proper/2 
* CE 33 is refined into CE [62] 
* CE 31 is refined into CE [63] 
* CE 30 is refined into CE [64] 
* CE 32 is refined into CE [65] 


#### Refined cost equations proper/2 
* CE 62: proper(V,Out) = 0
     [V>=0,Out=0] 
* CE 63: proper(V,Out) = 1
     [Out=3,V=2] 
* CE 64: proper(V,Out) = 1
     [Out=2,V=1] 
* CE 65: proper(V,Out) = 1
     [Out=1,V=0] 

### Cost equations --> "Loop" of proper/2 
* CEs [62] --> Loop 48 
* CEs [63] --> Loop 49 
* CEs [64] --> Loop 50 
* CEs [65] --> Loop 51 

#### Loops of proper/2 
* Loop 48: proper(V,Out) [V>=0,Out=0] 
* Loop 49: proper(V,Out) [Out=3,V=2] 
* Loop 50: proper(V,Out) [Out=2,V=1] 
* Loop 51: proper(V,Out) [Out=1,V=0] 

### Ranking functions of CR proper(V,Out) 

#### Partial ranking functions of CR proper(V,Out) 


### Resulting Chains:proper(V,Out) 
* [51]
* [50]
* [49]
* [48]


### Merging Chains  proper/2 into  External patterns of execution 
* [[51]] --> 1 
* [[50]] --> 2 
* [[49]] --> 3 
* [[48]] --> 4 


### Specialization of cost equations quote/2 
* CE 42 is refined into CE [66] 
* CE 41 is refined into CE [67] 


#### Refined cost equations quote/2 
* CE 66: quote(V,Out) = 0
     [V>=0,Out=0] 
* CE 67: quote(V,Out) = 1+ quote(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of quote/2 
* CEs [67] --> Loop 52 
* CEs [66] --> Loop 53 

#### Loops of quote/2 
* Loop 52: quote(V,Out)->  quote(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 53: quote(V,Out) [V>=0,Out=0] 

### Ranking functions of CR quote(V,Out) 
* RF of phase [52]: [V]

#### Partial ranking functions of CR quote(V,Out) 
* Partial RF of phase [52]:
  - RF of loop [52:1]:
    V


### Resulting Chains:quote(V,Out) 
* [[52],53]
* [53]


### Merging Chains  quote/2 into  External patterns of execution 
* [[53]] --> 1 
* [[53,[52]]] --> 2 


### Specialization of cost equations s/2 
* CE 46 is refined into CE [68] 
* CE 45 is refined into CE [69] 


#### Refined cost equations s/2 
* CE 68: s(V,Out) = 0
     [V>=0,Out=0] 
* CE 69: s(V,Out) = 1+ s(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of s/2 
* CEs [69] --> Loop 54 
* CEs [68] --> Loop 55 

#### Loops of s/2 
* Loop 54: s(V,Out)->  s(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 55: s(V,Out) [V>=0,Out=0] 

### Ranking functions of CR s(V,Out) 
* RF of phase [54]: [V]

#### Partial ranking functions of CR s(V,Out) 
* Partial RF of phase [54]:
  - RF of loop [54:1]:
    V


### Resulting Chains:s(V,Out) 
* [[54],55]
* [55]


### Merging Chains  s/2 into  External patterns of execution 
* [[55]] --> 1 
* [[55,[54]]] --> 2 


### Specialization of cost equations s1/2 
* CE 44 is refined into CE [70] 
* CE 43 is refined into CE [71] 


#### Refined cost equations s1/2 
* CE 70: s1(V,Out) = 0
     [V>=0,Out=0] 
* CE 71: s1(V,Out) = 1+ s1(W,X)
     [W>=0,X+1=Out,W+1=V] 

### Cost equations --> "Loop" of s1/2 
* CEs [71] --> Loop 56 
* CEs [70] --> Loop 57 

#### Loops of s1/2 
* Loop 56: s1(V,Out)->  s1(V',Out')
                  [V'>=0,Out=Out'+1,V'+1=V] 
* Loop 57: s1(V,Out) [V>=0,Out=0] 

### Ranking functions of CR s1(V,Out) 
* RF of phase [56]: [V]

#### Partial ranking functions of CR s1(V,Out) 
* Partial RF of phase [56]:
  - RF of loop [56:1]:
    V


### Resulting Chains:s1(V,Out) 
* [[56],57]
* [57]


### Merging Chains  s1/2 into  External patterns of execution 
* [[57]] --> 1 
* [[57,[56]]] --> 2 


### Specialization of cost equations sel/3 
* CE 37 is refined into CE [72] 
* CE 35 is refined into CE [73] 
* CE 36 is refined into CE [74] 
* CE 34 is refined into CE [75] 


#### Refined cost equations sel/3 
* CE 72: sel(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 73: sel(V,V1,Out) = 1+ sel(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 74: sel(V,V1,Out) = 1+ sel(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 75: sel(V,V1,Out) = 1+ sel(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of sel/3 
* CEs [73] --> Loop 58 
* CEs [74] --> Loop 59 
* CEs [75] --> Loop 60 
* CEs [72] --> Loop 61 

#### Loops of sel/3 
* Loop 58: sel(V,V1,Out)->  sel(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 59: sel(V,V1,Out)->  sel(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 60: sel(V,V1,Out)->  sel(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 61: sel(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR sel(V,V1,Out) 
* RF of phase [58,59,60]: [V+V1]

#### Partial ranking functions of CR sel(V,V1,Out) 
* Partial RF of phase [58,59,60]:
  - RF of loop [58:1,60:1]:
    V1
  - RF of loop [59:1,60:1]:
    V


### Resulting Chains:sel(V,V1,Out) 
* [[58,59,60],61]
* [61]


### Merging Chains  sel/3 into  External patterns of execution 
* [[61]] --> 1 
* [[61,[58,59,60]]] --> 2 


### Specialization of cost equations sel1/3 
* CE 25 is refined into CE [76] 
* CE 23 is refined into CE [77] 
* CE 22 is refined into CE [78] 
* CE 24 is refined into CE [79] 


#### Refined cost equations sel1/3 
* CE 76: sel1(V,V1,Out) = 0
     [V1>=0,V>=0,Out=0] 
* CE 77: sel1(V,V1,Out) = 1+ sel1(V,W1,X1)
     [W1>=0,V>=0,X1+1=Out,W1+1=V1] 
* CE 78: sel1(V,V1,Out) = 1+ sel1(W1,V1,X1)
     [W1>=0,V1>=0,X1+1=Out,W1+1=V] 
* CE 79: sel1(V,V1,Out) = 1+ sel1(W1,X1,Y1)
     [X1>=0,W1>=0,Y1+1=Out,X1+1=V1,W1+1=V] 

### Cost equations --> "Loop" of sel1/3 
* CEs [77] --> Loop 62 
* CEs [78] --> Loop 63 
* CEs [79] --> Loop 64 
* CEs [76] --> Loop 65 

#### Loops of sel1/3 
* Loop 62: sel1(V,V1,Out)->  sel1(V,V1',Out')
                  [V1>=1,V>=0,Out=Out'+1,V1=V1'+1] 
* Loop 63: sel1(V,V1,Out)->  sel1(V',V1,Out')
                  [V1>=0,V>=1,Out=Out'+1,V=V'+1] 
* Loop 64: sel1(V,V1,Out)->  sel1(V',V1',Out')
                  [V1>=1,V>=1,Out=Out'+1,V1=V1'+1,V=V'+1] 
* Loop 65: sel1(V,V1,Out) [V1>=0,V>=0,Out=0] 

### Ranking functions of CR sel1(V,V1,Out) 
* RF of phase [62,63,64]: [V+V1]

#### Partial ranking functions of CR sel1(V,V1,Out) 
* Partial RF of phase [62,63,64]:
  - RF of loop [62:1,64:1]:
    V1
  - RF of loop [63:1,64:1]:
    V


### Resulting Chains:sel1(V,V1,Out) 
* [[62,63,64],65]
* [65]


### Merging Chains  sel1/3 into  External patterns of execution 
* [[65]] --> 1 
* [[65,[62,63,64]]] --> 2 


### Specialization of cost equations top/2 
* CE 17 is refined into CE [80] 
* CE 15 is refined into CE [81] 
* CE 16 is refined into CE [82,83,84,85] 


#### Refined cost equations top/2 
* CE 80: top(V,Out) = 0
     [V>=0,Out=0] 
* CE 81: top(V,Out) = 1+ top(V,Out)
     [V>=1] 
* CE 82: top(V,Out) = 1+ proper(W,X):1+ top(Y,Out)
     [Y=1,X=1,W=0,V=1] 
* CE 83: top(V,Out) = 1+ proper(W,X):2+ top(Y,Out)
     [Y=2,X=2,W=1,V=2] 
* CE 84: top(V,Out) = 1+ proper(W,X):3+ top(Y,Out)
     [Y=3,X=3,W=2,V=3] 
* CE 85: top(V,Out) = 1+ proper(W,X):4+ top(Y,Out)
     [W>=0,W+1=V,Y=0,X=0] 

### Cost equations --> "Loop" of top/2 
* CEs [85] --> Loop 66 
* CEs [84] --> Loop 67 
* CEs [83] --> Loop 68 
* CEs [81,82] --> Loop 69 
* CEs [80] --> Loop 70 

#### Loops of top/2 
* Loop 66: top(V,Out)->  top(V',Out)
                  [V>=1,V'=0] 
* Loop 67: top(V,Out)->  top(V',Out)
                  [V'=3,V=3] 
* Loop 68: top(V,Out)->  top(V',Out)
                  [V'=2,V=2] 
* Loop 69: top(V,Out)->  top(V,Out)
                  [V>=1] 
* Loop 70: top(V,Out) [V>=0,Out=0] 

### Ranking functions of CR top(V,Out) 

#### Partial ranking functions of CR top(V,Out) 


### Resulting Chains:top(V,Out) 
* [[67,68,69]]...
* [[67,68,69],70]
* [[67,68,69],66,70]
* [70]
* [66,70]


### Merging Chains  top/2 into  External patterns of execution 
* [[70,66],[70],[70,66,[67,68,69]],[70,[67,68,69]]] --> 1 
* [[[67,68,69]]] --> 2 


### Specialization of cost equations start/2 
* CE 2 is refined into CE [86,87] 
* CE 3 is refined into CE [88,89] 
* CE 4 is refined into CE [90,91] 
* CE 5 is refined into CE [92,93] 
* CE 6 is refined into CE [94,95] 
* CE 7 is refined into CE [96,97] 
* CE 8 is refined into CE [98,99,100,101] 
* CE 9 is refined into CE [102,103] 
* CE 10 is refined into CE [104,105] 
* CE 11 is refined into CE [106,107] 
* CE 12 is refined into CE [108,109] 
* CE 13 is refined into CE [110,111] 
* CE 14 is refined into CE [112,113] 


#### Refined cost equations start/2 
* CE 86: start(V,V1) = 0+ top(V,W1):1
     [V>=0,W1=0] 
* CE 87: start(V,V1) = 0+ top(V,W1):2
     [V>=1] 
* CE 88: start(V,V1) = 0+ from(V,W1):1
     [V>=0,W1=0] 
* CE 89: start(V,V1) = 0+ from(V,W1):2
     [V>=W1,W1>=1] 
* CE 90: start(V,V1) = 0+ dbl(V,W1):1
     [V>=0,W1=0] 
* CE 91: start(V,V1) = 0+ dbl(V,W1):2
     [V>=W1,W1>=1] 
* CE 92: start(V,V1) = 0+ sel1(V,V1,W1):1
     [V1>=0,V>=0,W1=0] 
* CE 93: start(V,V1) = 0+ sel1(V,V1,W1):2
     [V+V1>=W1,W1>=1,V1>=0,V>=0] 
* CE 94: start(V,V1) = 0+ cons(V,V1,W1):1
     [V1>=0,V>=0,W1=0] 
* CE 95: start(V,V1) = 0+ cons(V,V1,W1):2
     [V1>=W1,V>=W1,W1>=1] 
* CE 96: start(V,V1) = 0+ dbl1(V,W1):1
     [V>=0,W1=0] 
* CE 97: start(V,V1) = 0+ dbl1(V,W1):2
     [V>=W1,W1>=1] 
* CE 98: start(V,V1) = 0+ proper(W1,X1):1
     [X1=1,W1=0,V=0] 
* CE 99: start(V,V1) = 0+ proper(W1,X1):2
     [X1=2,W1=1,V=1] 
* CE 100: start(V,V1) = 0+ proper(W1,X1):3
     [X1=3,W1=2,V=2] 
* CE 101: start(V,V1) = 0+ proper(V,W1):4
     [V>=0,W1=0] 
* CE 102: start(V,V1) = 0+ sel(V,V1,W1):1
     [V1>=0,V>=0,W1=0] 
* CE 103: start(V,V1) = 0+ sel(V,V1,W1):2
     [V+V1>=W1,W1>=1,V1>=0,V>=0] 
* CE 104: start(V,V1) = 0+ indx(V,V1,W1):1
     [V1>=0,V>=0,W1=0] 
* CE 105: start(V,V1) = 0+ indx(V,V1,W1):2
     [V>=W1,W1>=1,V1>=0] 
* CE 106: start(V,V1) = 0+ quote(V,W1):1
     [V>=0,W1=0] 
* CE 107: start(V,V1) = 0+ quote(V,W1):2
     [V>=W1,W1>=1] 
* CE 108: start(V,V1) = 0+ s1(V,W1):1
     [V>=0,W1=0] 
* CE 109: start(V,V1) = 0+ s1(V,W1):2
     [V>=W1,W1>=1] 
* CE 110: start(V,V1) = 0+ s(V,W1):1
     [V>=0,W1=0] 
* CE 111: start(V,V1) = 0+ s(V,W1):2
     [V>=W1,W1>=1] 
* CE 112: start(V,V1) = 0+ dbls(V,W1):1
     [V>=0,W1=0] 
* CE 113: start(V,V1) = 0+ dbls(V,W1):2
     [V>=W1,W1>=1] 

### Cost equations --> "Loop" of start/2 
* CEs [100] --> Loop 71 
* CEs [99] --> Loop 72 
* CEs [86,88,89,90,91,92,93,94,95,96,97,98,101,102,103,104,105,106,107,108,109,110,111,112,113] --> Loop 73 
* CEs [87] --> Loop 74 

#### Loops of start/2 
* Loop 71: start(V,V1) [V=2] 
* Loop 72: start(V,V1) [V=1] 
* Loop 73: start(V,V1) [V>=0] 
* Loop 74: start(V,V1) [V>=1] 

### Ranking functions of CR start(V,V1) 

#### Partial ranking functions of CR start(V,V1) 


### Resulting Chains:start(V,V1) 
* [74]...
* [73]
* [72]
* [71]


### Merging Chains  start/2 into  External patterns of execution 
* [[72],[73]] --> 1 
* [[71]] --> 2 
* [[74]] --> 3 


Computing Bounds
=====================================

#### Cost of loops [35] 

 * loop 35:cons(V,V1,Out) -> [cons(V',V1',Out')] 
1
#### Cost of phase [35]:cons(V,V1,Out) -> [cons(V',V1',Out')] 
1*it(35)+0
  Such that:it(35) =< V
it(35) =< V-V'
it(35) =< V1
it(35) =< V1-V1'

#### Cost of chains of cons(V,V1,Out):
* Chain [[35],36]: 1*it(35)+0
  Such that:it(35) =< Out

  with precondition: [Out>=1,V>=Out,V1>=Out] 

* Chain [36]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [37] 

 * loop 37:dbl(V,Out) -> [dbl(V',Out')] 
1
#### Cost of phase [37]:dbl(V,Out) -> [dbl(V',Out')] 
1*it(37)+0
  Such that:it(37) =< V
it(37) =< V-V'

#### Cost of chains of dbl(V,Out):
* Chain [[37],38]: 1*it(37)+0
  Such that:it(37) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [38]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [39] 

 * loop 39:dbl1(V,Out) -> [dbl1(V',Out')] 
1
#### Cost of phase [39]:dbl1(V,Out) -> [dbl1(V',Out')] 
1*it(39)+0
  Such that:it(39) =< V
it(39) =< V-V'

#### Cost of chains of dbl1(V,Out):
* Chain [[39],40]: 1*it(39)+0
  Such that:it(39) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [40]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [41] 

 * loop 41:dbls(V,Out) -> [dbls(V',Out')] 
1
#### Cost of phase [41]:dbls(V,Out) -> [dbls(V',Out')] 
1*it(41)+0
  Such that:it(41) =< V
it(41) =< V-V'

#### Cost of chains of dbls(V,Out):
* Chain [[41],42]: 1*it(41)+0
  Such that:it(41) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [42]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [43] 

 * loop 43:from(V,Out) -> [from(V',Out')] 
1
#### Cost of phase [43]:from(V,Out) -> [from(V',Out')] 
1*it(43)+0
  Such that:it(43) =< V
it(43) =< V-V'

#### Cost of chains of from(V,Out):
* Chain [[43],44]: 1*it(43)+0
  Such that:it(43) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [44]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [45,46] 

 * loop 45:indx(V,V1,Out) -> [indx(V',V1',Out')] 
1
 * loop 46:indx(V,V1,Out) -> [indx(V',V1',Out')] 
1
#### Cost of phase [45,46]:indx(V,V1,Out) -> [indx(V',V1',Out')] 
1*it(45)+1*it(46)+0
  Such that:it(46) =< V1
it(46) =< V1-V1'
aux(1) =< V
aux(2) =< V-V'
it(45) =< aux(1)
it(46) =< aux(1)
it(45) =< aux(2)
it(46) =< aux(2)

#### Cost of chains of indx(V,V1,Out):
* Chain [[45,46],47]: 1*it(45)+1*it(46)+0
  Such that:aux(1) =< V
it(46) =< V1
aux(2) =< Out
it(45) =< aux(1)
it(46) =< aux(1)
it(45) =< aux(2)
it(46) =< aux(2)

  with precondition: [V1>=0,Out>=1,V>=Out] 

* Chain [47]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of chains of proper(V,Out):
* Chain [51]: 1
  with precondition: [V=0,Out=1] 

* Chain [50]: 1
  with precondition: [V=1,Out=2] 

* Chain [49]: 1
  with precondition: [V=2,Out=3] 

* Chain [48]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [52] 

 * loop 52:quote(V,Out) -> [quote(V',Out')] 
1
#### Cost of phase [52]:quote(V,Out) -> [quote(V',Out')] 
1*it(52)+0
  Such that:it(52) =< V
it(52) =< V-V'

#### Cost of chains of quote(V,Out):
* Chain [[52],53]: 1*it(52)+0
  Such that:it(52) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [53]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [54] 

 * loop 54:s(V,Out) -> [s(V',Out')] 
1
#### Cost of phase [54]:s(V,Out) -> [s(V',Out')] 
1*it(54)+0
  Such that:it(54) =< V
it(54) =< V-V'

#### Cost of chains of s(V,Out):
* Chain [[54],55]: 1*it(54)+0
  Such that:it(54) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [55]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [56] 

 * loop 56:s1(V,Out) -> [s1(V',Out')] 
1
#### Cost of phase [56]:s1(V,Out) -> [s1(V',Out')] 
1*it(56)+0
  Such that:it(56) =< V
it(56) =< V-V'

#### Cost of chains of s1(V,Out):
* Chain [[56],57]: 1*it(56)+0
  Such that:it(56) =< Out

  with precondition: [Out>=1,V>=Out] 

* Chain [57]: 0
  with precondition: [Out=0,V>=0] 


#### Cost of loops [58,59,60] 

 * loop 58:sel(V,V1,Out) -> [sel(V',V1',Out')] 
1
 * loop 59:sel(V,V1,Out) -> [sel(V',V1',Out')] 
1
 * loop 60:sel(V,V1,Out) -> [sel(V',V1',Out')] 
1
#### Cost of phase [58,59,60]:sel(V,V1,Out) -> [sel(V',V1',Out')] 
1*it(58)+1*it(59)+1*it(60)+0
  Such that:aux(3) =< V
aux(4) =< V+V1
aux(5) =< V+V1-V'-V1'
aux(6) =< V-V'
aux(7) =< V1
aux(8) =< V1-V1'
it(59) =< aux(3)
it(60) =< aux(3)
it(58) =< aux(4)
it(59) =< aux(4)
it(60) =< aux(4)
it(58) =< aux(5)
it(59) =< aux(5)
it(60) =< aux(5)
it(59) =< aux(6)
it(60) =< aux(6)
it(58) =< aux(7)
it(60) =< aux(7)
it(58) =< aux(8)
it(60) =< aux(8)

#### Cost of chains of sel(V,V1,Out):
* Chain [[58,59,60],61]: 1*it(58)+1*it(59)+1*it(60)+0
  Such that:aux(9) =< V
aux(10) =< V+V1
aux(11) =< V1
it(59) =< aux(9)
it(60) =< aux(9)
it(58) =< aux(10)
it(59) =< aux(10)
it(60) =< aux(10)
it(58) =< aux(11)
it(60) =< aux(11)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [61]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [62,63,64] 

 * loop 62:sel1(V,V1,Out) -> [sel1(V',V1',Out')] 
1
 * loop 63:sel1(V,V1,Out) -> [sel1(V',V1',Out')] 
1
 * loop 64:sel1(V,V1,Out) -> [sel1(V',V1',Out')] 
1
#### Cost of phase [62,63,64]:sel1(V,V1,Out) -> [sel1(V',V1',Out')] 
1*it(62)+1*it(63)+1*it(64)+0
  Such that:aux(12) =< V
aux(13) =< V+V1
aux(14) =< V+V1-V'-V1'
aux(15) =< V-V'
aux(16) =< V1
aux(17) =< V1-V1'
it(63) =< aux(12)
it(64) =< aux(12)
it(62) =< aux(13)
it(63) =< aux(13)
it(64) =< aux(13)
it(62) =< aux(14)
it(63) =< aux(14)
it(64) =< aux(14)
it(63) =< aux(15)
it(64) =< aux(15)
it(62) =< aux(16)
it(64) =< aux(16)
it(62) =< aux(17)
it(64) =< aux(17)

#### Cost of chains of sel1(V,V1,Out):
* Chain [[62,63,64],65]: 1*it(62)+1*it(63)+1*it(64)+0
  Such that:aux(18) =< V
aux(19) =< V+V1
aux(20) =< V1
it(63) =< aux(18)
it(64) =< aux(18)
it(62) =< aux(19)
it(63) =< aux(19)
it(64) =< aux(19)
it(62) =< aux(20)
it(64) =< aux(20)

  with precondition: [V>=0,V1>=0,Out>=1,V+V1>=Out] 

* Chain [65]: 0
  with precondition: [Out=0,V>=0,V1>=0] 


#### Cost of loops [67,68,69] 

 * loop 67:top(V,Out) -> [top(V',Out')] 
2
 * loop 68:top(V,Out) -> [top(V',Out')] 
2
 * loop 69:top(V,Out) -> [top(V',Out')] 
2
#### Cost of phase [67,68,69]:top(V,Out) -> [top(V',Out')] 
6*it(67)+0
#### Cost of phase [67,68,69]:top(V,Out) -> [top(V',Out')] 
6*it(67)+0
#### Cost of phase [67,68,69]:top(V,Out) -> [top(V',Out')] 
6*it(67)+0
#### Cost of chains of top(V,Out):
* Chain [[67,68,69]]...: 6*it(67)+0
  with precondition: [V>=1] 

* Chain [[67,68,69],70]: 6*it(67)+0
  with precondition: [Out=0,V>=1] 

* Chain [[67,68,69],66,70]: 6*it(67)+1
  with precondition: [Out=0,V>=1] 

* Chain [70]: 0
  with precondition: [Out=0,V>=0] 

* Chain [66,70]: 1
  with precondition: [Out=0,V>=1] 


#### Cost of chains of start(V,V1):
* Chain [74]...: 6*s(3)+0
  with precondition: [V>=1] 

* Chain [73]: 1*s(4)+8*s(5)+2*s(10)+2*s(11)+2*s(12)+1*s(13)+1*s(22)+1
  Such that:aux(23) =< V
aux(24) =< V+V1
aux(25) =< V1
s(5) =< aux(23)
s(13) =< aux(25)
s(22) =< aux(25)
s(10) =< aux(23)
s(11) =< aux(23)
s(12) =< aux(24)
s(10) =< aux(24)
s(11) =< aux(24)
s(12) =< aux(25)
s(11) =< aux(25)
s(22) =< aux(23)

  with precondition: [V>=0] 

* Chain [72]: 1
  with precondition: [V=1] 

* Chain [71]: 1
  with precondition: [V=2] 


Closed-form bounds of start(V,V1): 
-------------------------------------
* Chain [74]... with precondition: [V>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [73] with precondition: [V>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [72] with precondition: [V=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [71] with precondition: [V=2] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start(V,V1): inf 
Asymptotic class: infinity 

Time statistics: 
-------------------------------------
* Partial evaluation computed in 23 ms.
* Invariants computed in 76 ms.
   - Backward Invariants 29 ms.
   - Transitive Invariants 21 ms.
* Refinement performed in 117 ms.
* Termination proved in 19 ms.
* Upper bounds computed in 360 ms.
   - Equation cost structures 124 ms.
   - Phase cost structures 142 ms.
   - Chain cost structures 114 ms.
   - Solving cost expressions 3 ms.
* Total analysis performed in 650 ms.

